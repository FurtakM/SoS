// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export omarStatus , stevensStatus , labDestroyed ; export tanksFromIntro , tanksFrom05 , resourcesInCargo ; export actionTime ; export sawArabianBase , sawApeman ; export dial_tameApeBlocker , dial_apeEnterLabBlocker , dial_southRoadBlocker , dial_seeCratesBlocker ; export stevensPlaced , stevensFollow , stevensWantTalkPetrosyan , stevensDepot , stevensWasInDepot , stevensCanExitMap ; export omarCanExitMap , arabianCanExitMap ; export cratesSpawned ; export fastBreakthrough ; export finishMissionBool ; export buildedLab ; export achievement_DestroyedHovercrafts ; export achievement_CollectedCrates ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 250 0 0
// omarStatus = 0 ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// stevensStatus = 0 ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// labDestroyed = 0 ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// tanksFrom05 = [ ] ;
  48: LD_ADDR_EXP 5
  52: PUSH
  53: EMPTY
  54: ST_TO_ADDR
// resourcesInCargo = [ ] ;
  55: LD_ADDR_EXP 6
  59: PUSH
  60: EMPTY
  61: ST_TO_ADDR
// tanksFromIntro = LoadVariable ( 05_TanksIntro_1 , [ ] ) ;
  62: LD_ADDR_EXP 4
  66: PUSH
  67: LD_STRING 05_TanksIntro_1
  69: PPUSH
  70: EMPTY
  71: PPUSH
  72: CALL_OW 30
  76: ST_TO_ADDR
// actionTime = 0 0$00 ;
  77: LD_ADDR_EXP 7
  81: PUSH
  82: LD_INT 0
  84: ST_TO_ADDR
// dial_tameApeBlocker = false ;
  85: LD_ADDR_EXP 10
  89: PUSH
  90: LD_INT 0
  92: ST_TO_ADDR
// dial_apeEnterLabBlocker = false ;
  93: LD_ADDR_EXP 11
  97: PUSH
  98: LD_INT 0
 100: ST_TO_ADDR
// sawArabianBase = false ;
 101: LD_ADDR_EXP 8
 105: PUSH
 106: LD_INT 0
 108: ST_TO_ADDR
// sawApeman = false ;
 109: LD_ADDR_EXP 9
 113: PUSH
 114: LD_INT 0
 116: ST_TO_ADDR
// stevensPlaced = false ;
 117: LD_ADDR_EXP 14
 121: PUSH
 122: LD_INT 0
 124: ST_TO_ADDR
// stevensFollow = false ;
 125: LD_ADDR_EXP 15
 129: PUSH
 130: LD_INT 0
 132: ST_TO_ADDR
// stevensWantTalkPetrosyan = false ;
 133: LD_ADDR_EXP 16
 137: PUSH
 138: LD_INT 0
 140: ST_TO_ADDR
// stevensDepot = false ;
 141: LD_ADDR_EXP 17
 145: PUSH
 146: LD_INT 0
 148: ST_TO_ADDR
// stevensWasInDepot = false ;
 149: LD_ADDR_EXP 18
 153: PUSH
 154: LD_INT 0
 156: ST_TO_ADDR
// stevensCanExitMap = false ;
 157: LD_ADDR_EXP 19
 161: PUSH
 162: LD_INT 0
 164: ST_TO_ADDR
// cratesSpawned = 0 ;
 165: LD_ADDR_EXP 22
 169: PUSH
 170: LD_INT 0
 172: ST_TO_ADDR
// fastBreakthrough = false ;
 173: LD_ADDR_EXP 23
 177: PUSH
 178: LD_INT 0
 180: ST_TO_ADDR
// finishMissionBool = false ;
 181: LD_ADDR_EXP 24
 185: PUSH
 186: LD_INT 0
 188: ST_TO_ADDR
// buildedLab = false ;
 189: LD_ADDR_EXP 25
 193: PUSH
 194: LD_INT 0
 196: ST_TO_ADDR
// omarCanExitMap = false ;
 197: LD_ADDR_EXP 20
 201: PUSH
 202: LD_INT 0
 204: ST_TO_ADDR
// arabianCanExitMap = false ;
 205: LD_ADDR_EXP 21
 209: PUSH
 210: LD_INT 0
 212: ST_TO_ADDR
// achievement_DestroyedHovercrafts = 0 ;
 213: LD_ADDR_EXP 26
 217: PUSH
 218: LD_INT 0
 220: ST_TO_ADDR
// achievement_CollectedCrates = false ;
 221: LD_ADDR_EXP 27
 225: PUSH
 226: LD_INT 0
 228: ST_TO_ADDR
// PrepareRussians ;
 229: CALL 921 0 0
// PrepareArabians ;
 233: CALL 1668 0 0
// Nef_PrepareNature ;
 237: CALL 20050 0 0
// MissionIntro ;
 241: CALL 3006 0 0
// end ; end_of_file
 245: LD_VAR 0 1
 249: RET
// export function InitMapConfig ; begin
 250: LD_INT 0
 252: PPUSH
// BaseMapConfig ;
 253: CALL 266 0 0
// MissionMapConfig ;
 257: CALL 356 0 0
// end ;
 261: LD_VAR 0 1
 265: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 266: LD_INT 0
 268: PPUSH
// animalsAmount = [ 4 , 3 , 1 , 0 , 0 ] ;
 269: LD_ADDR_EXP 28
 273: PUSH
 274: LD_INT 4
 276: PUSH
 277: LD_INT 3
 279: PUSH
 280: LD_INT 1
 282: PUSH
 283: LD_INT 0
 285: PUSH
 286: LD_INT 0
 288: PUSH
 289: EMPTY
 290: LIST
 291: LIST
 292: LIST
 293: LIST
 294: LIST
 295: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 296: LD_ADDR_EXP 29
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: LD_INT 2
 306: PUSH
 307: LD_INT 2
 309: PUSH
 310: LD_INT 2
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: LIST
 317: LIST
 318: ST_TO_ADDR
// animalsAgression = 0 ;
 319: LD_ADDR_EXP 30
 323: PUSH
 324: LD_INT 0
 326: ST_TO_ADDR
// debugMode = 0 ;
 327: LD_ADDR_EXP 33
 331: PUSH
 332: LD_INT 0
 334: ST_TO_ADDR
// missionPrefix = 05_ ;
 335: LD_ADDR_EXP 31
 339: PUSH
 340: LD_STRING 05_
 342: ST_TO_ADDR
// previousMissionPrefix = 04_ ;
 343: LD_ADDR_EXP 32
 347: PUSH
 348: LD_STRING 04_
 350: ST_TO_ADDR
// end ;
 351: LD_VAR 0 1
 355: RET
// export enemySkillLevel , arabBreakthrough ; export arabianUnits , arabianPatrolVehiclesAmount , arabianPatrolSoldiers ; export arabianHovercraftsPath ; function MissionMapConfig ; begin
 356: LD_INT 0
 358: PPUSH
// enemySkillLevel = [ 3 , 3 , 4 , 5 ] [ Difficulty ] ;
 359: LD_ADDR_EXP 34
 363: PUSH
 364: LD_INT 3
 366: PUSH
 367: LD_INT 3
 369: PUSH
 370: LD_INT 4
 372: PUSH
 373: LD_INT 5
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: LIST
 380: LIST
 381: PUSH
 382: LD_OWVAR 67
 386: ARRAY
 387: ST_TO_ADDR
// arabBreakthrough = [ 70 70$0 , 65 65$0 , 60 60$0 , 55 55$0 ] [ Difficulty ] ;
 388: LD_ADDR_EXP 35
 392: PUSH
 393: LD_INT 147000
 395: PUSH
 396: LD_INT 136500
 398: PUSH
 399: LD_INT 126000
 401: PUSH
 402: LD_INT 115500
 404: PUSH
 405: EMPTY
 406: LIST
 407: LIST
 408: LIST
 409: LIST
 410: PUSH
 411: LD_OWVAR 67
 415: ARRAY
 416: ST_TO_ADDR
// arabianUnits = [ 2 , 1 , 6 , 3 ] ;
 417: LD_ADDR_EXP 36
 421: PUSH
 422: LD_INT 2
 424: PUSH
 425: LD_INT 1
 427: PUSH
 428: LD_INT 6
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: LIST
 438: LIST
 439: ST_TO_ADDR
// arabianPatrolVehiclesAmount = 1 ;
 440: LD_ADDR_EXP 37
 444: PUSH
 445: LD_INT 1
 447: ST_TO_ADDR
// arabianPatrolSoldiers = [ 2 , 3 , 3 , 3 ] [ Difficulty ] ;
 448: LD_ADDR_EXP 38
 452: PUSH
 453: LD_INT 2
 455: PUSH
 456: LD_INT 3
 458: PUSH
 459: LD_INT 3
 461: PUSH
 462: LD_INT 3
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: LIST
 469: LIST
 470: PUSH
 471: LD_OWVAR 67
 475: ARRAY
 476: ST_TO_ADDR
// arabianHovercraftsPath = [ [ 108 , 15 ] , [ 102 , 45 ] , [ 65 , 23 ] , [ 37 , 28 ] , [ 32 , 40 ] , [ 45 , 74 ] , [ 69 , 98 ] , [ 101 , 101 ] , [ 117 , 84 ] , [ 158 , 132 ] ] ;
 477: LD_ADDR_EXP 39
 481: PUSH
 482: LD_INT 108
 484: PUSH
 485: LD_INT 15
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: LD_INT 102
 494: PUSH
 495: LD_INT 45
 497: PUSH
 498: EMPTY
 499: LIST
 500: LIST
 501: PUSH
 502: LD_INT 65
 504: PUSH
 505: LD_INT 23
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 37
 514: PUSH
 515: LD_INT 28
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 32
 524: PUSH
 525: LD_INT 40
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 45
 534: PUSH
 535: LD_INT 74
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 69
 544: PUSH
 545: LD_INT 98
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 101
 554: PUSH
 555: LD_INT 101
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: LD_INT 117
 564: PUSH
 565: LD_INT 84
 567: PUSH
 568: EMPTY
 569: LIST
 570: LIST
 571: PUSH
 572: LD_INT 158
 574: PUSH
 575: LD_INT 132
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PUSH
 582: EMPTY
 583: LIST
 584: LIST
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: LIST
 590: LIST
 591: LIST
 592: LIST
 593: ST_TO_ADDR
// end ;
 594: LD_VAR 0 1
 598: RET
// every 0 0$1 trigger debugMode do var i ;
 599: LD_EXP 33
 603: IFFALSE 918
 605: GO 607
 607: DISABLE
 608: LD_INT 0
 610: PPUSH
// begin enable ;
 611: ENABLE
// FogOff ( your_side ) ;
 612: LD_OWVAR 2
 616: PPUSH
 617: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 621: LD_ADDR_VAR 0 1
 625: PUSH
 626: LD_INT 22
 628: PUSH
 629: LD_OWVAR 2
 633: PUSH
 634: EMPTY
 635: LIST
 636: LIST
 637: PUSH
 638: LD_INT 2
 640: PUSH
 641: LD_INT 21
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 21
 653: PUSH
 654: LD_INT 2
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: LIST
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PPUSH
 670: CALL_OW 69
 674: PUSH
 675: FOR_IN
 676: IFFALSE 692
// SetLives ( i , 1000 ) ;
 678: LD_VAR 0 1
 682: PPUSH
 683: LD_INT 1000
 685: PPUSH
 686: CALL_OW 234
 690: GO 675
 692: POP
 693: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
 694: LD_ADDR_VAR 0 1
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_OWVAR 2
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 1
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PPUSH
 725: CALL_OW 69
 729: PUSH
 730: FOR_IN
 731: IFFALSE 795
// begin SetSkill ( i , skill_combat , 10 ) ;
 733: LD_VAR 0 1
 737: PPUSH
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 10
 743: PPUSH
 744: CALL_OW 237
// SetSkill ( i , skill_engineering , 10 ) ;
 748: LD_VAR 0 1
 752: PPUSH
 753: LD_INT 2
 755: PPUSH
 756: LD_INT 10
 758: PPUSH
 759: CALL_OW 237
// SetSkill ( i , skill_mechanical , 10 ) ;
 763: LD_VAR 0 1
 767: PPUSH
 768: LD_INT 3
 770: PPUSH
 771: LD_INT 10
 773: PPUSH
 774: CALL_OW 237
// SetSkill ( i , skill_scientistic , 10 ) ;
 778: LD_VAR 0 1
 782: PPUSH
 783: LD_INT 4
 785: PPUSH
 786: LD_INT 10
 788: PPUSH
 789: CALL_OW 237
// end ;
 793: GO 730
 795: POP
 796: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 797: LD_ADDR_VAR 0 1
 801: PUSH
 802: LD_INT 22
 804: PUSH
 805: LD_OWVAR 2
 809: PUSH
 810: EMPTY
 811: LIST
 812: LIST
 813: PUSH
 814: LD_INT 2
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 0
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: LD_INT 30
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: EMPTY
 834: LIST
 835: LIST
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: LIST
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PPUSH
 846: CALL_OW 69
 850: PUSH
 851: FOR_IN
 852: IFFALSE 916
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 854: LD_VAR 0 1
 858: PPUSH
 859: CALL_OW 274
 863: PPUSH
 864: LD_INT 1
 866: PPUSH
 867: LD_INT 9999
 869: PPUSH
 870: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 874: LD_VAR 0 1
 878: PPUSH
 879: CALL_OW 274
 883: PPUSH
 884: LD_INT 2
 886: PPUSH
 887: LD_INT 9999
 889: PPUSH
 890: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 894: LD_VAR 0 1
 898: PPUSH
 899: CALL_OW 274
 903: PPUSH
 904: LD_INT 3
 906: PPUSH
 907: LD_INT 9999
 909: PPUSH
 910: CALL_OW 277
// end ;
 914: GO 851
 916: POP
 917: POP
// end ; end_of_file
 918: PPOPN 1
 920: END
// export Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin ; export Platonov ; export ruCars ; export function PrepareRussians ; begin
 921: LD_INT 0
 923: PPUSH
// PrepareHeroes ;
 924: CALL 933 0 0
// end ;
 928: LD_VAR 0 1
 932: RET
// function PrepareHeroes ; var i , car ; begin
 933: LD_INT 0
 935: PPUSH
 936: PPUSH
 937: PPUSH
// ruCars = [ ] ;
 938: LD_ADDR_EXP 49
 942: PUSH
 943: EMPTY
 944: ST_TO_ADDR
// uc_side = 3 ;
 945: LD_ADDR_OWVAR 20
 949: PUSH
 950: LD_INT 3
 952: ST_TO_ADDR
// uc_nation = 3 ;
 953: LD_ADDR_OWVAR 21
 957: PUSH
 958: LD_INT 3
 960: ST_TO_ADDR
// Burlak := PrepareUnitExt ( Burlak , true , class_mechanic ) ;
 961: LD_ADDR_EXP 40
 965: PUSH
 966: LD_STRING Burlak
 968: PPUSH
 969: LD_INT 1
 971: PPUSH
 972: LD_INT 3
 974: PPUSH
 975: CALL 8546 0 3
 979: ST_TO_ADDR
// Titov := PrepareUnitExt ( Titov , false , class_soldier ) ;
 980: LD_ADDR_EXP 45
 984: PUSH
 985: LD_STRING Titov
 987: PPUSH
 988: LD_INT 0
 990: PPUSH
 991: LD_INT 1
 993: PPUSH
 994: CALL 8546 0 3
 998: ST_TO_ADDR
// Dolgov := PrepareUnitExt ( Dolgov , false , class_scientistic ) ;
 999: LD_ADDR_EXP 46
1003: PUSH
1004: LD_STRING Dolgov
1006: PPUSH
1007: LD_INT 0
1009: PPUSH
1010: LD_INT 4
1012: PPUSH
1013: CALL 8546 0 3
1017: ST_TO_ADDR
// Lipshchin := PrepareUnitExt ( Lipshchin , false , class_soldier ) ;
1018: LD_ADDR_EXP 47
1022: PUSH
1023: LD_STRING Lipshchin
1025: PPUSH
1026: LD_INT 0
1028: PPUSH
1029: LD_INT 1
1031: PPUSH
1032: CALL 8546 0 3
1036: ST_TO_ADDR
// Karamazov := PrepareUnitExt ( Karamazov , false , class_engineer ) ;
1037: LD_ADDR_EXP 41
1041: PUSH
1042: LD_STRING Karamazov
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_INT 2
1050: PPUSH
1051: CALL 8546 0 3
1055: ST_TO_ADDR
// Petrovova := PrepareUnitExt ( Petrovova , false , class_soldier ) ;
1056: LD_ADDR_EXP 42
1060: PUSH
1061: LD_STRING Petrovova
1063: PPUSH
1064: LD_INT 0
1066: PPUSH
1067: LD_INT 1
1069: PPUSH
1070: CALL 8546 0 3
1074: ST_TO_ADDR
// Gleb := PrepareUnitExt ( Gleb , false , class_soldier ) ;
1075: LD_ADDR_EXP 43
1079: PUSH
1080: LD_STRING Gleb
1082: PPUSH
1083: LD_INT 0
1085: PPUSH
1086: LD_INT 1
1088: PPUSH
1089: CALL 8546 0 3
1093: ST_TO_ADDR
// Petrosyan := PrepareUnitExt ( Petrosyan , false , class_scientistic ) ;
1094: LD_ADDR_EXP 44
1098: PUSH
1099: LD_STRING Petrosyan
1101: PPUSH
1102: LD_INT 0
1104: PPUSH
1105: LD_INT 4
1107: PPUSH
1108: CALL 8546 0 3
1112: ST_TO_ADDR
// Platonov = PrepareUnitExt ( Platonov , false , 0 ) ;
1113: LD_ADDR_EXP 48
1117: PUSH
1118: LD_STRING Platonov
1120: PPUSH
1121: LD_INT 0
1123: PPUSH
1124: LD_INT 0
1126: PPUSH
1127: CALL 8546 0 3
1131: ST_TO_ADDR
// for i := 1 to TanksFromIntro do
1132: LD_ADDR_VAR 0 2
1136: PUSH
1137: DOUBLE
1138: LD_INT 1
1140: DEC
1141: ST_TO_ADDR
1142: LD_EXP 4
1146: PUSH
1147: FOR_TO
1148: IFFALSE 1526
// begin vc_chassis := TanksFromIntro [ i ] [ 1 ] ;
1150: LD_ADDR_OWVAR 37
1154: PUSH
1155: LD_EXP 4
1159: PUSH
1160: LD_VAR 0 2
1164: ARRAY
1165: PUSH
1166: LD_INT 1
1168: ARRAY
1169: ST_TO_ADDR
// vc_engine = TanksFromIntro [ i ] [ 2 ] ;
1170: LD_ADDR_OWVAR 39
1174: PUSH
1175: LD_EXP 4
1179: PUSH
1180: LD_VAR 0 2
1184: ARRAY
1185: PUSH
1186: LD_INT 2
1188: ARRAY
1189: ST_TO_ADDR
// vc_control = TanksFromIntro [ i ] [ 3 ] ;
1190: LD_ADDR_OWVAR 38
1194: PUSH
1195: LD_EXP 4
1199: PUSH
1200: LD_VAR 0 2
1204: ARRAY
1205: PUSH
1206: LD_INT 3
1208: ARRAY
1209: ST_TO_ADDR
// vc_weapon := TanksFromIntro [ i ] [ 4 ] ;
1210: LD_ADDR_OWVAR 40
1214: PUSH
1215: LD_EXP 4
1219: PUSH
1220: LD_VAR 0 2
1224: ARRAY
1225: PUSH
1226: LD_INT 4
1228: ARRAY
1229: ST_TO_ADDR
// uc_direction := Rand ( 3 , 4 ) ;
1230: LD_ADDR_OWVAR 24
1234: PUSH
1235: LD_INT 3
1237: PPUSH
1238: LD_INT 4
1240: PPUSH
1241: CALL_OW 12
1245: ST_TO_ADDR
// vc_fuel_battery := Rand ( 25 , 40 ) ;
1246: LD_ADDR_OWVAR 41
1250: PUSH
1251: LD_INT 25
1253: PPUSH
1254: LD_INT 40
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
// car := CreateVehicle ;
1262: LD_ADDR_VAR 0 3
1266: PUSH
1267: CALL_OW 45
1271: ST_TO_ADDR
// ruCars := ruCars ^ car ;
1272: LD_ADDR_EXP 49
1276: PUSH
1277: LD_EXP 49
1281: PUSH
1282: LD_VAR 0 3
1286: ADD
1287: ST_TO_ADDR
// case TanksFromIntro [ i ] [ 5 ] of Bur :
1288: LD_EXP 4
1292: PUSH
1293: LD_VAR 0 2
1297: ARRAY
1298: PUSH
1299: LD_INT 5
1301: ARRAY
1302: PUSH
1303: LD_STRING Bur
1305: DOUBLE
1306: EQUAL
1307: IFTRUE 1311
1309: GO 1328
1311: POP
// PlaceHumanInUnit ( Burlak , car ) ; Kar :
1312: LD_EXP 40
1316: PPUSH
1317: LD_VAR 0 3
1321: PPUSH
1322: CALL_OW 52
1326: GO 1504
1328: LD_STRING Kar
1330: DOUBLE
1331: EQUAL
1332: IFTRUE 1336
1334: GO 1353
1336: POP
// PlaceHumanInUnit ( Karamazov , car ) ; Ptr :
1337: LD_EXP 41
1341: PPUSH
1342: LD_VAR 0 3
1346: PPUSH
1347: CALL_OW 52
1351: GO 1504
1353: LD_STRING Ptr
1355: DOUBLE
1356: EQUAL
1357: IFTRUE 1361
1359: GO 1378
1361: POP
// PlaceHumanInUnit ( Petrovova , car ) ; Glb :
1362: LD_EXP 42
1366: PPUSH
1367: LD_VAR 0 3
1371: PPUSH
1372: CALL_OW 52
1376: GO 1504
1378: LD_STRING Glb
1380: DOUBLE
1381: EQUAL
1382: IFTRUE 1386
1384: GO 1403
1386: POP
// PlaceHumanInUnit ( Gleb , car ) ; Pet :
1387: LD_EXP 43
1391: PPUSH
1392: LD_VAR 0 3
1396: PPUSH
1397: CALL_OW 52
1401: GO 1504
1403: LD_STRING Pet
1405: DOUBLE
1406: EQUAL
1407: IFTRUE 1411
1409: GO 1428
1411: POP
// PlaceHumanInUnit ( Petrosyan , car ) ; Dol :
1412: LD_EXP 44
1416: PPUSH
1417: LD_VAR 0 3
1421: PPUSH
1422: CALL_OW 52
1426: GO 1504
1428: LD_STRING Dol
1430: DOUBLE
1431: EQUAL
1432: IFTRUE 1436
1434: GO 1453
1436: POP
// PlaceHumanInUnit ( Dolgov , car ) ; Lip :
1437: LD_EXP 46
1441: PPUSH
1442: LD_VAR 0 3
1446: PPUSH
1447: CALL_OW 52
1451: GO 1504
1453: LD_STRING Lip
1455: DOUBLE
1456: EQUAL
1457: IFTRUE 1461
1459: GO 1478
1461: POP
// PlaceHumanInUnit ( Lipshchin , car ) ; Tit :
1462: LD_EXP 47
1466: PPUSH
1467: LD_VAR 0 3
1471: PPUSH
1472: CALL_OW 52
1476: GO 1504
1478: LD_STRING Tit
1480: DOUBLE
1481: EQUAL
1482: IFTRUE 1486
1484: GO 1503
1486: POP
// PlaceHumanInUnit ( Titov , car ) ; end ;
1487: LD_EXP 45
1491: PPUSH
1492: LD_VAR 0 3
1496: PPUSH
1497: CALL_OW 52
1501: GO 1504
1503: POP
// SetLives ( car , Rand ( 251 , 800 ) ) ;
1504: LD_VAR 0 3
1508: PPUSH
1509: LD_INT 251
1511: PPUSH
1512: LD_INT 800
1514: PPUSH
1515: CALL_OW 12
1519: PPUSH
1520: CALL_OW 234
// end ;
1524: GO 1147
1526: POP
1527: POP
// for i in ruCars do
1528: LD_ADDR_VAR 0 2
1532: PUSH
1533: LD_EXP 49
1537: PUSH
1538: FOR_IN
1539: IFFALSE 1558
// PlaceUnitArea ( i , ru_place2 , false ) ;
1541: LD_VAR 0 2
1545: PPUSH
1546: LD_INT 18
1548: PPUSH
1549: LD_INT 0
1551: PPUSH
1552: CALL_OW 49
1556: GO 1538
1558: POP
1559: POP
// RevealFogArea ( 3 , co_vidi ) ;
1560: LD_INT 3
1562: PPUSH
1563: LD_INT 19
1565: PPUSH
1566: CALL_OW 332
// ComMoveToArea ( ruCars , ru_dojezd ) ;
1570: LD_EXP 49
1574: PPUSH
1575: LD_INT 3
1577: PPUSH
1578: CALL_OW 113
// wait ( 0 0$0.1 ) ;
1582: LD_INT 4
1584: PPUSH
1585: CALL_OW 67
// CenterNowOnUnits ( IsInUnit ( Burlak ) ) ;
1589: LD_EXP 40
1593: PPUSH
1594: CALL_OW 310
1598: PPUSH
1599: CALL_OW 87
// while FilterUnitsInArea ( ru_dojezd , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] ] ) < 5 do
1603: LD_INT 3
1605: PPUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 2
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 70
1634: PUSH
1635: LD_INT 5
1637: LESS
1638: IFFALSE 1663
// begin wait ( 0 0$1 ) ;
1640: LD_INT 35
1642: PPUSH
1643: CALL_OW 67
// CenterOnUnits ( IsInUnit ( Burlak ) ) ;
1647: LD_EXP 40
1651: PPUSH
1652: CALL_OW 310
1656: PPUSH
1657: CALL_OW 85
// end ;
1661: GO 1603
// end ; end_of_file
1663: LD_VAR 0 1
1667: RET
// export Heike , Omar ; export arabianUnitsInBase , arabianPatrolVehicles , arabianHovercrafts , arabianPatrolTroops ; export arabLeftExit , arabRightExit ; export function PrepareArabians ; begin
1668: LD_INT 0
1670: PPUSH
// arabianUnitsInBase = [ ] ;
1671: LD_ADDR_EXP 52
1675: PUSH
1676: EMPTY
1677: ST_TO_ADDR
// arabianHovercrafts = [ ] ;
1678: LD_ADDR_EXP 54
1682: PUSH
1683: EMPTY
1684: ST_TO_ADDR
// arabianPatrolTroops = [ ] ;
1685: LD_ADDR_EXP 55
1689: PUSH
1690: EMPTY
1691: ST_TO_ADDR
// arabLeftExit = true ;
1692: LD_ADDR_EXP 56
1696: PUSH
1697: LD_INT 1
1699: ST_TO_ADDR
// PrepareHeroes ;
1700: CALL 1733 0 0
// PrepareBuildings ;
1704: CALL 1799 0 0
// PrepareUnits ;
1708: CALL 2157 0 0
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
1712: LD_EXP 37
1716: PPUSH
1717: LD_INT 42
1719: PPUSH
1720: CALL 2694 0 2
// PrepareArabianHovercraft ;
1724: CALL 2853 0 0
// end ;
1728: LD_VAR 0 1
1732: RET
// function PrepareHeroes ; begin
1733: LD_INT 0
1735: PPUSH
// uc_side = 2 ;
1736: LD_ADDR_OWVAR 20
1740: PUSH
1741: LD_INT 2
1743: ST_TO_ADDR
// Heike = PrepareUnitExt ( Heike , false , 0 ) ;
1744: LD_ADDR_EXP 50
1748: PUSH
1749: LD_STRING Heike
1751: PPUSH
1752: LD_INT 0
1754: PPUSH
1755: LD_INT 0
1757: PPUSH
1758: CALL 8546 0 3
1762: ST_TO_ADDR
// Omar = PrepareUnitExt ( Omar , false , class_desert_warior ) ;
1763: LD_ADDR_EXP 51
1767: PUSH
1768: LD_STRING Omar
1770: PPUSH
1771: LD_INT 0
1773: PPUSH
1774: LD_INT 11
1776: PPUSH
1777: CALL 8546 0 3
1781: ST_TO_ADDR
// PlaceHumanInUnit ( Omar , mastodon ) ;
1782: LD_EXP 51
1786: PPUSH
1787: LD_INT 1
1789: PPUSH
1790: CALL_OW 52
// end ;
1794: LD_VAR 0 1
1798: RET
// function PrepareBuildings ; var depot ; begin
1799: LD_INT 0
1801: PPUSH
1802: PPUSH
// uc_side = 2 ;
1803: LD_ADDR_OWVAR 20
1807: PUSH
1808: LD_INT 2
1810: ST_TO_ADDR
// uc_nation = nation_arabian ;
1811: LD_ADDR_OWVAR 21
1815: PUSH
1816: LD_INT 2
1818: ST_TO_ADDR
// bc_level = enemySkillLevel ;
1819: LD_ADDR_OWVAR 43
1823: PUSH
1824: LD_EXP 34
1828: ST_TO_ADDR
// bc_type = b_breastwork ;
1829: LD_ADDR_OWVAR 42
1833: PUSH
1834: LD_INT 31
1836: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 118 , 63 , 1 ) ;
1837: LD_INT 118
1839: PPUSH
1840: LD_INT 63
1842: PPUSH
1843: LD_INT 1
1845: PPUSH
1846: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 120 , 66 , 1 ) ;
1850: LD_INT 120
1852: PPUSH
1853: LD_INT 66
1855: PPUSH
1856: LD_INT 1
1858: PPUSH
1859: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 123 , 73 , 1 ) ;
1863: LD_INT 123
1865: PPUSH
1866: LD_INT 73
1868: PPUSH
1869: LD_INT 1
1871: PPUSH
1872: CALL_OW 47
// if Difficulty = 2 then
1876: LD_OWVAR 67
1880: PUSH
1881: LD_INT 2
1883: EQUAL
1884: IFFALSE 1899
// CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1886: LD_INT 145
1888: PPUSH
1889: LD_INT 83
1891: PPUSH
1892: LD_INT 0
1894: PPUSH
1895: CALL_OW 47
// if Difficulty >= 3 then
1899: LD_OWVAR 67
1903: PUSH
1904: LD_INT 3
1906: GREATEREQUAL
1907: IFFALSE 1935
// begin CreateAndPlaceBuildingXYD ( 145 , 83 , 0 ) ;
1909: LD_INT 145
1911: PPUSH
1912: LD_INT 83
1914: PPUSH
1915: LD_INT 0
1917: PPUSH
1918: CALL_OW 47
// CreateAndPlaceBuildingXYD ( 151 , 81 , 5 ) ;
1922: LD_INT 151
1924: PPUSH
1925: LD_INT 81
1927: PPUSH
1928: LD_INT 5
1930: PPUSH
1931: CALL_OW 47
// end ; bc_type = b_depot ;
1935: LD_ADDR_OWVAR 42
1939: PUSH
1940: LD_INT 0
1942: ST_TO_ADDR
// depot = CreateAndPlaceBuildingXYD ( 124 , 60 , 2 ) ;
1943: LD_ADDR_VAR 0 2
1947: PUSH
1948: LD_INT 124
1950: PPUSH
1951: LD_INT 60
1953: PPUSH
1954: LD_INT 2
1956: PPUSH
1957: CALL_OW 47
1961: ST_TO_ADDR
// SetResourceType ( GetBase ( depot ) , mat_cans , 3000 ) ;
1962: LD_VAR 0 2
1966: PPUSH
1967: CALL_OW 274
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: LD_INT 3000
1977: PPUSH
1978: CALL_OW 277
// SetResourceVisibility ( 131 , 51 , 2 ) ;
1982: LD_INT 131
1984: PPUSH
1985: LD_INT 51
1987: PPUSH
1988: LD_INT 2
1990: PPUSH
1991: CALL_OW 441
// bc_type = b_oil_mine ;
1995: LD_ADDR_OWVAR 42
1999: PUSH
2000: LD_INT 29
2002: ST_TO_ADDR
// CreateAndPlaceBuildingXYD ( 131 , 51 , 2 ) ;
2003: LD_INT 131
2005: PPUSH
2006: LD_INT 51
2008: PPUSH
2009: LD_INT 2
2011: PPUSH
2012: CALL_OW 47
// case Difficulty of 1 :
2016: LD_OWVAR 67
2020: PUSH
2021: LD_INT 1
2023: DOUBLE
2024: EQUAL
2025: IFTRUE 2029
2027: GO 2045
2029: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2030: LD_INT 48
2032: PPUSH
2033: LD_INT 2
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: CALL_OW 322
// end ; 2 :
2043: GO 2152
2045: LD_INT 2
2047: DOUBLE
2048: EQUAL
2049: IFTRUE 2053
2051: GO 2082
2053: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2054: LD_INT 48
2056: PPUSH
2057: LD_INT 2
2059: PPUSH
2060: LD_INT 2
2062: PPUSH
2063: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2067: LD_INT 51
2069: PPUSH
2070: LD_INT 2
2072: PPUSH
2073: LD_INT 2
2075: PPUSH
2076: CALL_OW 322
// end ; 3 .. 4 :
2080: GO 2152
2082: LD_INT 3
2084: DOUBLE
2085: GREATEREQUAL
2086: IFFALSE 2094
2088: LD_INT 4
2090: DOUBLE
2091: LESSEQUAL
2092: IFTRUE 2096
2094: GO 2151
2096: POP
// begin SetTech ( tech_tech1 , 2 , state_researched ) ;
2097: LD_INT 48
2099: PPUSH
2100: LD_INT 2
2102: PPUSH
2103: LD_INT 2
2105: PPUSH
2106: CALL_OW 322
// SetTech ( tech_weap1 , 2 , state_researched ) ;
2110: LD_INT 51
2112: PPUSH
2113: LD_INT 2
2115: PPUSH
2116: LD_INT 2
2118: PPUSH
2119: CALL_OW 322
// SetTech ( tech_tech2 , 2 , state_researched ) ;
2123: LD_INT 49
2125: PPUSH
2126: LD_INT 2
2128: PPUSH
2129: LD_INT 2
2131: PPUSH
2132: CALL_OW 322
// SetTech ( tech_weap2 , 2 , state_researched ) ;
2136: LD_INT 52
2138: PPUSH
2139: LD_INT 2
2141: PPUSH
2142: LD_INT 2
2144: PPUSH
2145: CALL_OW 322
// end ; end ;
2149: GO 2152
2151: POP
// end ;
2152: LD_VAR 0 1
2156: RET
// function PrepareUnits ; var i , unit , bunker ; begin
2157: LD_INT 0
2159: PPUSH
2160: PPUSH
2161: PPUSH
2162: PPUSH
// uc_side = 2 ;
2163: LD_ADDR_OWVAR 20
2167: PUSH
2168: LD_INT 2
2170: ST_TO_ADDR
// uc_nation = 2 ;
2171: LD_ADDR_OWVAR 21
2175: PUSH
2176: LD_INT 2
2178: ST_TO_ADDR
// for bunker in FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) do
2179: LD_ADDR_VAR 0 4
2183: PUSH
2184: LD_INT 22
2186: PUSH
2187: LD_INT 2
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_INT 30
2196: PUSH
2197: LD_INT 31
2199: PUSH
2200: EMPTY
2201: LIST
2202: LIST
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PPUSH
2208: CALL_OW 69
2212: PUSH
2213: FOR_IN
2214: IFFALSE 2270
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2216: LD_INT 0
2218: PPUSH
2219: LD_EXP 34
2223: PPUSH
2224: CALL_OW 381
// unit = CreateHuman ;
2228: LD_ADDR_VAR 0 3
2232: PUSH
2233: CALL_OW 44
2237: ST_TO_ADDR
// PlaceHumanInBunker ( unit , bunker ) ;
2238: LD_VAR 0 3
2242: PPUSH
2243: LD_VAR 0 4
2247: PPUSH
2248: CALL 9146 0 2
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2252: LD_ADDR_EXP 52
2256: PUSH
2257: LD_EXP 52
2261: PUSH
2262: LD_VAR 0 3
2266: ADD
2267: ST_TO_ADDR
// end ;
2268: GO 2213
2270: POP
2271: POP
// for i := 1 to arabianUnits [ 1 ] do
2272: LD_ADDR_VAR 0 2
2276: PUSH
2277: DOUBLE
2278: LD_INT 1
2280: DEC
2281: ST_TO_ADDR
2282: LD_EXP 36
2286: PUSH
2287: LD_INT 1
2289: ARRAY
2290: PUSH
2291: FOR_TO
2292: IFFALSE 2349
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2294: LD_INT 0
2296: PPUSH
2297: LD_EXP 34
2301: PPUSH
2302: CALL_OW 381
// unit = CreateHuman ;
2306: LD_ADDR_VAR 0 3
2310: PUSH
2311: CALL_OW 44
2315: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2316: LD_VAR 0 3
2320: PPUSH
2321: LD_INT 38
2323: PPUSH
2324: LD_INT 0
2326: PPUSH
2327: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2331: LD_ADDR_EXP 52
2335: PUSH
2336: LD_EXP 52
2340: PUSH
2341: LD_VAR 0 3
2345: ADD
2346: ST_TO_ADDR
// end ;
2347: GO 2291
2349: POP
2350: POP
// for i := 1 to arabianUnits [ 2 ] do
2351: LD_ADDR_VAR 0 2
2355: PUSH
2356: DOUBLE
2357: LD_INT 1
2359: DEC
2360: ST_TO_ADDR
2361: LD_EXP 36
2365: PUSH
2366: LD_INT 2
2368: ARRAY
2369: PUSH
2370: FOR_TO
2371: IFFALSE 2428
// begin PrepareEngineer ( 0 , enemySkillLevel ) ;
2373: LD_INT 0
2375: PPUSH
2376: LD_EXP 34
2380: PPUSH
2381: CALL_OW 382
// unit = CreateHuman ;
2385: LD_ADDR_VAR 0 3
2389: PUSH
2390: CALL_OW 44
2394: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2395: LD_VAR 0 3
2399: PPUSH
2400: LD_INT 38
2402: PPUSH
2403: LD_INT 0
2405: PPUSH
2406: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2410: LD_ADDR_EXP 52
2414: PUSH
2415: LD_EXP 52
2419: PUSH
2420: LD_VAR 0 3
2424: ADD
2425: ST_TO_ADDR
// end ;
2426: GO 2370
2428: POP
2429: POP
// for i := 1 to arabianUnits [ 3 ] do
2430: LD_ADDR_VAR 0 2
2434: PUSH
2435: DOUBLE
2436: LD_INT 1
2438: DEC
2439: ST_TO_ADDR
2440: LD_EXP 36
2444: PUSH
2445: LD_INT 3
2447: ARRAY
2448: PUSH
2449: FOR_TO
2450: IFFALSE 2507
// begin PrepareMechanic ( 0 , enemySkillLevel ) ;
2452: LD_INT 0
2454: PPUSH
2455: LD_EXP 34
2459: PPUSH
2460: CALL_OW 383
// unit = CreateHuman ;
2464: LD_ADDR_VAR 0 3
2468: PUSH
2469: CALL_OW 44
2473: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2474: LD_VAR 0 3
2478: PPUSH
2479: LD_INT 38
2481: PPUSH
2482: LD_INT 0
2484: PPUSH
2485: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2489: LD_ADDR_EXP 52
2493: PUSH
2494: LD_EXP 52
2498: PUSH
2499: LD_VAR 0 3
2503: ADD
2504: ST_TO_ADDR
// end ;
2505: GO 2449
2507: POP
2508: POP
// for i := 1 to arabianUnits [ 4 ] do
2509: LD_ADDR_VAR 0 2
2513: PUSH
2514: DOUBLE
2515: LD_INT 1
2517: DEC
2518: ST_TO_ADDR
2519: LD_EXP 36
2523: PUSH
2524: LD_INT 4
2526: ARRAY
2527: PUSH
2528: FOR_TO
2529: IFFALSE 2586
// begin PrepareScientist ( 0 , enemySkillLevel ) ;
2531: LD_INT 0
2533: PPUSH
2534: LD_EXP 34
2538: PPUSH
2539: CALL_OW 384
// unit = CreateHuman ;
2543: LD_ADDR_VAR 0 3
2547: PUSH
2548: CALL_OW 44
2552: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea1 , false ) ;
2553: LD_VAR 0 3
2557: PPUSH
2558: LD_INT 38
2560: PPUSH
2561: LD_INT 0
2563: PPUSH
2564: CALL_OW 49
// arabianUnitsInBase = arabianUnitsInBase ^ unit ;
2568: LD_ADDR_EXP 52
2572: PUSH
2573: LD_EXP 52
2577: PUSH
2578: LD_VAR 0 3
2582: ADD
2583: ST_TO_ADDR
// end ;
2584: GO 2528
2586: POP
2587: POP
// end ;
2588: LD_VAR 0 1
2592: RET
// export function PrepareArabianPatrolSoldiers ; var i , unit ; begin
2593: LD_INT 0
2595: PPUSH
2596: PPUSH
2597: PPUSH
// uc_side = 2 ;
2598: LD_ADDR_OWVAR 20
2602: PUSH
2603: LD_INT 2
2605: ST_TO_ADDR
// uc_nation = 2 ;
2606: LD_ADDR_OWVAR 21
2610: PUSH
2611: LD_INT 2
2613: ST_TO_ADDR
// for i := 1 to arabianPatrolSoldiers do
2614: LD_ADDR_VAR 0 2
2618: PUSH
2619: DOUBLE
2620: LD_INT 1
2622: DEC
2623: ST_TO_ADDR
2624: LD_EXP 38
2628: PUSH
2629: FOR_TO
2630: IFFALSE 2687
// begin PrepareSoldier ( 0 , enemySkillLevel ) ;
2632: LD_INT 0
2634: PPUSH
2635: LD_EXP 34
2639: PPUSH
2640: CALL_OW 381
// unit = CreateHuman ;
2644: LD_ADDR_VAR 0 3
2648: PUSH
2649: CALL_OW 44
2653: ST_TO_ADDR
// PlaceUnitArea ( unit , ArabianSpawnArea2 , false ) ;
2654: LD_VAR 0 3
2658: PPUSH
2659: LD_INT 45
2661: PPUSH
2662: LD_INT 0
2664: PPUSH
2665: CALL_OW 49
// arabianPatrolTroops = arabianPatrolTroops ^ unit ;
2669: LD_ADDR_EXP 55
2673: PUSH
2674: LD_EXP 55
2678: PUSH
2679: LD_VAR 0 3
2683: ADD
2684: ST_TO_ADDR
// end ;
2685: GO 2629
2687: POP
2688: POP
// end ;
2689: LD_VAR 0 1
2693: RET
// export function PrepareArabianPatrolVehicles ( amount , area ) ; var i , veh ; begin
2694: LD_INT 0
2696: PPUSH
2697: PPUSH
2698: PPUSH
// uc_side = 2 ;
2699: LD_ADDR_OWVAR 20
2703: PUSH
2704: LD_INT 2
2706: ST_TO_ADDR
// uc_nation = 2 ;
2707: LD_ADDR_OWVAR 21
2711: PUSH
2712: LD_INT 2
2714: ST_TO_ADDR
// for i := 1 to amount do
2715: LD_ADDR_VAR 0 4
2719: PUSH
2720: DOUBLE
2721: LD_INT 1
2723: DEC
2724: ST_TO_ADDR
2725: LD_VAR 0 1
2729: PUSH
2730: FOR_TO
2731: IFFALSE 2846
// begin PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_flame_thrower , ar_gatling_gun , ar_gun ] [ Rand ( 1 , 3 ) ] , 100 ) ;
2733: LD_INT 14
2735: PPUSH
2736: LD_INT 1
2738: PPUSH
2739: LD_INT 1
2741: PPUSH
2742: LD_INT 26
2744: PUSH
2745: LD_INT 25
2747: PUSH
2748: LD_INT 27
2750: PUSH
2751: EMPTY
2752: LIST
2753: LIST
2754: LIST
2755: PUSH
2756: LD_INT 1
2758: PPUSH
2759: LD_INT 3
2761: PPUSH
2762: CALL_OW 12
2766: ARRAY
2767: PPUSH
2768: LD_INT 100
2770: PPUSH
2771: CALL 26088 0 5
// veh = CreateVehicle ;
2775: LD_ADDR_VAR 0 5
2779: PUSH
2780: CALL_OW 45
2784: ST_TO_ADDR
// arabianPatrolVehicles = arabianPatrolVehicles ^ veh ;
2785: LD_ADDR_EXP 53
2789: PUSH
2790: LD_EXP 53
2794: PUSH
2795: LD_VAR 0 5
2799: ADD
2800: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
2801: LD_VAR 0 5
2805: PPUSH
2806: LD_VAR 0 2
2810: PPUSH
2811: LD_INT 0
2813: PPUSH
2814: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2818: LD_INT 0
2820: PPUSH
2821: LD_EXP 34
2825: PPUSH
2826: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2830: CALL_OW 44
2834: PPUSH
2835: LD_VAR 0 5
2839: PPUSH
2840: CALL_OW 52
// end ;
2844: GO 2730
2846: POP
2847: POP
// end ;
2848: LD_VAR 0 3
2852: RET
// export function PrepareArabianHovercraft ; var i , veh ; begin
2853: LD_INT 0
2855: PPUSH
2856: PPUSH
2857: PPUSH
// uc_side = 2 ;
2858: LD_ADDR_OWVAR 20
2862: PUSH
2863: LD_INT 2
2865: ST_TO_ADDR
// uc_nation = 2 ;
2866: LD_ADDR_OWVAR 21
2870: PUSH
2871: LD_INT 2
2873: ST_TO_ADDR
// for i := 1 to arabianPatrolVehiclesAmount do
2874: LD_ADDR_VAR 0 2
2878: PUSH
2879: DOUBLE
2880: LD_INT 1
2882: DEC
2883: ST_TO_ADDR
2884: LD_EXP 37
2888: PUSH
2889: FOR_TO
2890: IFFALSE 2999
// begin PrepareVehicle ( ar_hovercraft , engine_combustion , control_manual , [ ar_double_machine_gun , ar_light_gun ] [ Rand ( 1 , 2 ) ] , 100 ) ;
2892: LD_INT 11
2894: PPUSH
2895: LD_INT 1
2897: PPUSH
2898: LD_INT 1
2900: PPUSH
2901: LD_INT 24
2903: PUSH
2904: LD_INT 23
2906: PUSH
2907: EMPTY
2908: LIST
2909: LIST
2910: PUSH
2911: LD_INT 1
2913: PPUSH
2914: LD_INT 2
2916: PPUSH
2917: CALL_OW 12
2921: ARRAY
2922: PPUSH
2923: LD_INT 100
2925: PPUSH
2926: CALL 26088 0 5
// veh = CreateVehicle ;
2930: LD_ADDR_VAR 0 3
2934: PUSH
2935: CALL_OW 45
2939: ST_TO_ADDR
// arabianHovercrafts = arabianHovercrafts ^ veh ;
2940: LD_ADDR_EXP 54
2944: PUSH
2945: LD_EXP 54
2949: PUSH
2950: LD_VAR 0 3
2954: ADD
2955: ST_TO_ADDR
// PlaceUnitArea ( veh , ArabianSpawnArea3 , false ) ;
2956: LD_VAR 0 3
2960: PPUSH
2961: LD_INT 47
2963: PPUSH
2964: LD_INT 0
2966: PPUSH
2967: CALL_OW 49
// PrepareMechanic ( 0 , enemySkillLevel ) ;
2971: LD_INT 0
2973: PPUSH
2974: LD_EXP 34
2978: PPUSH
2979: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , veh ) ;
2983: CALL_OW 44
2987: PPUSH
2988: LD_VAR 0 3
2992: PPUSH
2993: CALL_OW 52
// end ;
2997: GO 2889
2999: POP
3000: POP
// end ; end_of_file
3001: LD_VAR 0 1
3005: RET
// export function MissionIntro ; var unit , meetPositions , x ; begin
3006: LD_INT 0
3008: PPUSH
3009: PPUSH
3010: PPUSH
3011: PPUSH
// meetPositions = [ [ 66 , 87 ] , [ 66 , 86 ] , [ 67 , 86 ] , [ 69 , 87 ] , [ 70 , 88 ] , [ 71 , 89 ] , [ 72 , 90 ] , [ 72 , 91 ] ] ;
3012: LD_ADDR_VAR 0 3
3016: PUSH
3017: LD_INT 66
3019: PUSH
3020: LD_INT 87
3022: PUSH
3023: EMPTY
3024: LIST
3025: LIST
3026: PUSH
3027: LD_INT 66
3029: PUSH
3030: LD_INT 86
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: PUSH
3037: LD_INT 67
3039: PUSH
3040: LD_INT 86
3042: PUSH
3043: EMPTY
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 69
3049: PUSH
3050: LD_INT 87
3052: PUSH
3053: EMPTY
3054: LIST
3055: LIST
3056: PUSH
3057: LD_INT 70
3059: PUSH
3060: LD_INT 88
3062: PUSH
3063: EMPTY
3064: LIST
3065: LIST
3066: PUSH
3067: LD_INT 71
3069: PUSH
3070: LD_INT 89
3072: PUSH
3073: EMPTY
3074: LIST
3075: LIST
3076: PUSH
3077: LD_INT 72
3079: PUSH
3080: LD_INT 90
3082: PUSH
3083: EMPTY
3084: LIST
3085: LIST
3086: PUSH
3087: LD_INT 72
3089: PUSH
3090: LD_INT 91
3092: PUSH
3093: EMPTY
3094: LIST
3095: LIST
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: ST_TO_ADDR
// wait ( 0 0$8 ) ;
3107: LD_INT 280
3109: PPUSH
3110: CALL_OW 67
// Say ( Burlak , DStart-Bur-1 ) ;
3114: LD_EXP 40
3118: PPUSH
3119: LD_STRING DStart-Bur-1
3121: PPUSH
3122: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-1 ) ;
3126: LD_EXP 48
3130: PPUSH
3131: LD_STRING DStart-Pla-1
3133: PPUSH
3134: CALL_OW 94
// Say ( Burlak , DStart-Bur-2 ) ;
3138: LD_EXP 40
3142: PPUSH
3143: LD_STRING DStart-Bur-2
3145: PPUSH
3146: CALL_OW 88
// SayRadio ( Platonov , DStart-Pla-2 ) ;
3150: LD_EXP 48
3154: PPUSH
3155: LD_STRING DStart-Pla-2
3157: PPUSH
3158: CALL_OW 94
// x = 0 ;
3162: LD_ADDR_VAR 0 4
3166: PUSH
3167: LD_INT 0
3169: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3170: LD_ADDR_VAR 0 2
3174: PUSH
3175: LD_INT 22
3177: PUSH
3178: LD_INT 3
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: PUSH
3185: LD_INT 21
3187: PUSH
3188: LD_INT 1
3190: PUSH
3191: EMPTY
3192: LIST
3193: LIST
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: PPUSH
3199: CALL_OW 69
3203: PUSH
3204: FOR_IN
3205: IFFALSE 3293
// begin ComExitVehicle ( unit ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: CALL_OW 121
// wait ( 0 0$1 ) ;
3216: LD_INT 35
3218: PPUSH
3219: CALL_OW 67
// AddComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3223: LD_VAR 0 2
3227: PPUSH
3228: LD_VAR 0 3
3232: PUSH
3233: LD_VAR 0 4
3237: ARRAY
3238: PUSH
3239: LD_INT 1
3241: ARRAY
3242: PPUSH
3243: LD_VAR 0 3
3247: PUSH
3248: LD_VAR 0 4
3252: ARRAY
3253: PUSH
3254: LD_INT 2
3256: ARRAY
3257: PPUSH
3258: CALL_OW 171
// AddComTurnXY ( unit , 69 , 96 ) ;
3262: LD_VAR 0 2
3266: PPUSH
3267: LD_INT 69
3269: PPUSH
3270: LD_INT 96
3272: PPUSH
3273: CALL_OW 178
// x = x + 1 ;
3277: LD_ADDR_VAR 0 4
3281: PUSH
3282: LD_VAR 0 4
3286: PUSH
3287: LD_INT 1
3289: PLUS
3290: ST_TO_ADDR
// end ;
3291: GO 3204
3293: POP
3294: POP
// repeat CenterNowOnUnits ( Burlak ) ;
3295: LD_EXP 40
3299: PPUSH
3300: CALL_OW 87
// x = 0 ;
3304: LD_ADDR_VAR 0 4
3308: PUSH
3309: LD_INT 0
3311: ST_TO_ADDR
// for unit in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) do
3312: LD_ADDR_VAR 0 2
3316: PUSH
3317: LD_INT 22
3319: PUSH
3320: LD_INT 3
3322: PUSH
3323: EMPTY
3324: LIST
3325: LIST
3326: PUSH
3327: LD_INT 21
3329: PUSH
3330: LD_INT 1
3332: PUSH
3333: EMPTY
3334: LIST
3335: LIST
3336: PUSH
3337: EMPTY
3338: LIST
3339: LIST
3340: PPUSH
3341: CALL_OW 69
3345: PUSH
3346: FOR_IN
3347: IFFALSE 3419
// begin ComMoveXY ( unit , meetPositions [ x ] [ 1 ] , meetPositions [ x ] [ 2 ] ) ;
3349: LD_VAR 0 2
3353: PPUSH
3354: LD_VAR 0 3
3358: PUSH
3359: LD_VAR 0 4
3363: ARRAY
3364: PUSH
3365: LD_INT 1
3367: ARRAY
3368: PPUSH
3369: LD_VAR 0 3
3373: PUSH
3374: LD_VAR 0 4
3378: ARRAY
3379: PUSH
3380: LD_INT 2
3382: ARRAY
3383: PPUSH
3384: CALL_OW 111
// AddComTurnXY ( unit , 69 , 96 ) ;
3388: LD_VAR 0 2
3392: PPUSH
3393: LD_INT 69
3395: PPUSH
3396: LD_INT 96
3398: PPUSH
3399: CALL_OW 178
// x = x + 1 ;
3403: LD_ADDR_VAR 0 4
3407: PUSH
3408: LD_VAR 0 4
3412: PUSH
3413: LD_INT 1
3415: PLUS
3416: ST_TO_ADDR
// end ;
3417: GO 3346
3419: POP
3420: POP
// wait ( 0 0$1 ) ;
3421: LD_INT 35
3423: PPUSH
3424: CALL_OW 67
// until GetDistUnitXY ( Burlak , 70 , 90 ) < 7 and GetDistUnitXY ( Karamazov , 70 , 90 ) < 7 and GetDistUnitXY ( Petrovova , 70 , 90 ) < 7 and GetDistUnitXY ( Gleb , 70 , 90 ) < 7 and GetDistUnitXY ( Lipshchin , 70 , 90 ) < 7 ;
3428: LD_EXP 40
3432: PPUSH
3433: LD_INT 70
3435: PPUSH
3436: LD_INT 90
3438: PPUSH
3439: CALL_OW 297
3443: PUSH
3444: LD_INT 7
3446: LESS
3447: PUSH
3448: LD_EXP 41
3452: PPUSH
3453: LD_INT 70
3455: PPUSH
3456: LD_INT 90
3458: PPUSH
3459: CALL_OW 297
3463: PUSH
3464: LD_INT 7
3466: LESS
3467: AND
3468: PUSH
3469: LD_EXP 42
3473: PPUSH
3474: LD_INT 70
3476: PPUSH
3477: LD_INT 90
3479: PPUSH
3480: CALL_OW 297
3484: PUSH
3485: LD_INT 7
3487: LESS
3488: AND
3489: PUSH
3490: LD_EXP 43
3494: PPUSH
3495: LD_INT 70
3497: PPUSH
3498: LD_INT 90
3500: PPUSH
3501: CALL_OW 297
3505: PUSH
3506: LD_INT 7
3508: LESS
3509: AND
3510: PUSH
3511: LD_EXP 47
3515: PPUSH
3516: LD_INT 70
3518: PPUSH
3519: LD_INT 90
3521: PPUSH
3522: CALL_OW 297
3526: PUSH
3527: LD_INT 7
3529: LESS
3530: AND
3531: IFFALSE 3295
// Say ( Karamazov , DDoubts-Kar-1 ) ;
3533: LD_EXP 41
3537: PPUSH
3538: LD_STRING DDoubts-Kar-1
3540: PPUSH
3541: CALL_OW 88
// Say ( Petrovova , DDoubts-Ptr-1 ) ;
3545: LD_EXP 42
3549: PPUSH
3550: LD_STRING DDoubts-Ptr-1
3552: PPUSH
3553: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-1 ) ;
3557: LD_EXP 40
3561: PPUSH
3562: LD_STRING DDoubts-Bur-1
3564: PPUSH
3565: CALL_OW 88
// Say ( Karamazov , DDoubts-Kar-2 ) ;
3569: LD_EXP 41
3573: PPUSH
3574: LD_STRING DDoubts-Kar-2
3576: PPUSH
3577: CALL_OW 88
// Say ( Gleb , DDoubts-Glb-2 ) ;
3581: LD_EXP 43
3585: PPUSH
3586: LD_STRING DDoubts-Glb-2
3588: PPUSH
3589: CALL_OW 88
// Say ( Burlak , DDoubts-Bur-2 ) ;
3593: LD_EXP 40
3597: PPUSH
3598: LD_STRING DDoubts-Bur-2
3600: PPUSH
3601: CALL_OW 88
// InGameOff ;
3605: CALL_OW 9
// ChangeMissionObjectives ( MBegin ) ;
3609: LD_STRING MBegin
3611: PPUSH
3612: CALL_OW 337
// SaveForQuickRestart ;
3616: CALL_OW 22
// BuildBase ;
3620: CALL 10744 0 0
// end ;
3624: LD_VAR 0 1
3628: RET
// every 0 0$1 trigger not sawArabianBase do var unit ;
3629: LD_EXP 8
3633: NOT
3634: IFFALSE 3894
3636: GO 3638
3638: DISABLE
3639: LD_INT 0
3641: PPUSH
// begin enable ;
3642: ENABLE
// for unit in FilterUnitsInArea ( ArabianBaseArea , [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3643: LD_ADDR_VAR 0 1
3647: PUSH
3648: LD_INT 34
3650: PPUSH
3651: LD_INT 22
3653: PUSH
3654: LD_INT 2
3656: PUSH
3657: EMPTY
3658: LIST
3659: LIST
3660: PUSH
3661: LD_INT 21
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: EMPTY
3668: LIST
3669: LIST
3670: PUSH
3671: EMPTY
3672: LIST
3673: LIST
3674: PPUSH
3675: CALL_OW 70
3679: PUSH
3680: FOR_IN
3681: IFFALSE 3892
// if See ( 3 , unit ) then
3683: LD_INT 3
3685: PPUSH
3686: LD_VAR 0 1
3690: PPUSH
3691: CALL_OW 292
3695: IFFALSE 3890
// begin sawArabianBase = true ;
3697: LD_ADDR_EXP 8
3701: PUSH
3702: LD_INT 1
3704: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
3705: LD_VAR 0 1
3709: PPUSH
3710: CALL_OW 87
// DialogueOn ;
3714: CALL_OW 6
// if IsOk ( Lipshchin ) then
3718: LD_EXP 47
3722: PPUSH
3723: CALL_OW 302
3727: IFFALSE 3741
// Say ( Lipshchin , DArabs-RSol1-1 ) ;
3729: LD_EXP 47
3733: PPUSH
3734: LD_STRING DArabs-RSol1-1
3736: PPUSH
3737: CALL_OW 88
// if IsOk ( Karamazov ) then
3741: LD_EXP 41
3745: PPUSH
3746: CALL_OW 302
3750: IFFALSE 3764
// Say ( Karamazov , DArabs-Kar-1 ) ;
3752: LD_EXP 41
3756: PPUSH
3757: LD_STRING DArabs-Kar-1
3759: PPUSH
3760: CALL_OW 88
// Say ( Burlak , DArabs-Bur-1 ) ;
3764: LD_EXP 40
3768: PPUSH
3769: LD_STRING DArabs-Bur-1
3771: PPUSH
3772: CALL_OW 88
// SayRadio ( Platonov , DArabs-Pla-1 ) ;
3776: LD_EXP 48
3780: PPUSH
3781: LD_STRING DArabs-Pla-1
3783: PPUSH
3784: CALL_OW 94
// Say ( Omar , DSurrender-Omar-1 ) ;
3788: LD_EXP 51
3792: PPUSH
3793: LD_STRING DSurrender-Omar-1
3795: PPUSH
3796: CALL_OW 88
// case Query ( QSurrender ) of 1 :
3800: LD_STRING QSurrender
3802: PPUSH
3803: CALL_OW 97
3807: PUSH
3808: LD_INT 1
3810: DOUBLE
3811: EQUAL
3812: IFTRUE 3816
3814: GO 3835
3816: POP
// begin Say ( Burlak , DQrSurrender#1-Bur-1 ) ;
3817: LD_EXP 40
3821: PPUSH
3822: LD_STRING DQrSurrender#1-Bur-1
3824: PPUSH
3825: CALL_OW 88
// Lose_Survive ;
3829: CALL 17411 0 0
// end ; 2 :
3833: GO 3882
3835: LD_INT 2
3837: DOUBLE
3838: EQUAL
3839: IFTRUE 3843
3841: GO 3858
3843: POP
// Say ( Burlak , DQrSurrender#2-Bur-1 ) ; 3 :
3844: LD_EXP 40
3848: PPUSH
3849: LD_STRING DQrSurrender#2-Bur-1
3851: PPUSH
3852: CALL_OW 88
3856: GO 3882
3858: LD_INT 3
3860: DOUBLE
3861: EQUAL
3862: IFTRUE 3866
3864: GO 3881
3866: POP
// Say ( Burlak , DQrSurrender#3-Bur-1 ) ; end ;
3867: LD_EXP 40
3871: PPUSH
3872: LD_STRING DQrSurrender#3-Bur-1
3874: PPUSH
3875: CALL_OW 88
3879: GO 3882
3881: POP
// DialogueOff ;
3882: CALL_OW 7
// exit ;
3886: POP
3887: POP
3888: GO 3894
// end ;
3890: GO 3680
3892: POP
3893: POP
// end ;
3894: PPOPN 1
3896: END
// every 0 0$1 trigger not sawApeman and GetTech ( tech_apelang , 3 ) = state_enabled do var unit , nearUnit ;
3897: LD_EXP 9
3901: NOT
3902: PUSH
3903: LD_INT 1
3905: PPUSH
3906: LD_INT 3
3908: PPUSH
3909: CALL_OW 321
3913: PUSH
3914: LD_INT 1
3916: EQUAL
3917: AND
3918: IFFALSE 4283
3920: GO 3922
3922: DISABLE
3923: LD_INT 0
3925: PPUSH
3926: PPUSH
// begin enable ;
3927: ENABLE
// for unit in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_INT 22
3935: PUSH
3936: LD_INT 0
3938: PUSH
3939: EMPTY
3940: LIST
3941: LIST
3942: PUSH
3943: LD_INT 25
3945: PUSH
3946: LD_INT 12
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: PUSH
3953: EMPTY
3954: LIST
3955: LIST
3956: PPUSH
3957: CALL_OW 69
3961: PUSH
3962: FOR_IN
3963: IFFALSE 4281
// if See ( 3 , unit ) then
3965: LD_INT 3
3967: PPUSH
3968: LD_VAR 0 1
3972: PPUSH
3973: CALL_OW 292
3977: IFFALSE 4279
// begin sawApeman = true ;
3979: LD_ADDR_EXP 9
3983: PUSH
3984: LD_INT 1
3986: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , unit ) ;
3987: LD_ADDR_VAR 0 2
3991: PUSH
3992: LD_INT 22
3994: PUSH
3995: LD_INT 3
3997: PUSH
3998: EMPTY
3999: LIST
4000: LIST
4001: PUSH
4002: LD_INT 21
4004: PUSH
4005: LD_INT 1
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 26
4014: PUSH
4015: LD_INT 1
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: LD_INT 50
4024: PUSH
4025: EMPTY
4026: LIST
4027: PUSH
4028: LD_INT 2
4030: PUSH
4031: LD_INT 25
4033: PUSH
4034: LD_INT 1
4036: PUSH
4037: EMPTY
4038: LIST
4039: LIST
4040: PUSH
4041: LD_INT 25
4043: PUSH
4044: LD_INT 2
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: LD_INT 25
4053: PUSH
4054: LD_INT 3
4056: PUSH
4057: EMPTY
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 25
4063: PUSH
4064: LD_INT 4
4066: PUSH
4067: EMPTY
4068: LIST
4069: LIST
4070: PUSH
4071: EMPTY
4072: LIST
4073: LIST
4074: LIST
4075: LIST
4076: LIST
4077: PUSH
4078: EMPTY
4079: LIST
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: PPUSH
4085: CALL_OW 69
4089: PPUSH
4090: LD_VAR 0 1
4094: PPUSH
4095: CALL_OW 74
4099: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
4100: LD_VAR 0 1
4104: PPUSH
4105: CALL_OW 87
// DialogueOn ;
4109: CALL_OW 6
// if nearUnit = Burlak then
4113: LD_VAR 0 2
4117: PUSH
4118: LD_EXP 40
4122: EQUAL
4123: IFFALSE 4139
// Say ( Burlak , DApeSpot-Bur-1a ) else
4125: LD_EXP 40
4129: PPUSH
4130: LD_STRING DApeSpot-Bur-1a
4132: PPUSH
4133: CALL_OW 88
4137: GO 4151
// Say ( nearUnit , DApeSpot-RSol1-1 ) ;
4139: LD_VAR 0 2
4143: PPUSH
4144: LD_STRING DApeSpot-RSol1-1
4146: PPUSH
4147: CALL_OW 88
// Say ( Burlak , DApeSpot-Bur-1 ) ;
4151: LD_EXP 40
4155: PPUSH
4156: LD_STRING DApeSpot-Bur-1
4158: PPUSH
4159: CALL_OW 88
// if IsOK ( Petrosyan ) then
4163: LD_EXP 44
4167: PPUSH
4168: CALL_OW 302
4172: IFFALSE 4271
// begin Say ( Petrosyan , DApeSpot-Pty-1 ) ;
4174: LD_EXP 44
4178: PPUSH
4179: LD_STRING DApeSpot-Pty-1
4181: PPUSH
4182: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
4186: LD_INT 22
4188: PUSH
4189: LD_INT 3
4191: PUSH
4192: EMPTY
4193: LIST
4194: LIST
4195: PUSH
4196: LD_INT 21
4198: PUSH
4199: LD_INT 3
4201: PUSH
4202: EMPTY
4203: LIST
4204: LIST
4205: PUSH
4206: LD_INT 2
4208: PUSH
4209: LD_INT 30
4211: PUSH
4212: LD_INT 6
4214: PUSH
4215: EMPTY
4216: LIST
4217: LIST
4218: PUSH
4219: LD_INT 30
4221: PUSH
4222: LD_INT 7
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: EMPTY
4230: LIST
4231: LIST
4232: LIST
4233: PUSH
4234: EMPTY
4235: LIST
4236: LIST
4237: LIST
4238: PPUSH
4239: CALL_OW 69
4243: IFFALSE 4259
// Say ( Petrosyan , DApeSpot-Pty-1a ) else
4245: LD_EXP 44
4249: PPUSH
4250: LD_STRING DApeSpot-Pty-1a
4252: PPUSH
4253: CALL_OW 88
4257: GO 4271
// Say ( Petrosyan , DApeSpot-Pty-1b ) ;
4259: LD_EXP 44
4263: PPUSH
4264: LD_STRING DApeSpot-Pty-1b
4266: PPUSH
4267: CALL_OW 88
// end ; DialogueOff ;
4271: CALL_OW 7
// exit ;
4275: POP
4276: POP
4277: GO 4283
// end ;
4279: GO 3962
4281: POP
4282: POP
// end ;
4283: PPOPN 2
4285: END
// every 2 2$30 trigger IsOk ( Petrosyan ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) and not buildedLab do
4286: LD_EXP 44
4290: PPUSH
4291: CALL_OW 302
4295: PUSH
4296: LD_INT 22
4298: PUSH
4299: LD_INT 3
4301: PUSH
4302: EMPTY
4303: LIST
4304: LIST
4305: PUSH
4306: LD_INT 21
4308: PUSH
4309: LD_INT 3
4311: PUSH
4312: EMPTY
4313: LIST
4314: LIST
4315: PUSH
4316: LD_INT 2
4318: PUSH
4319: LD_INT 30
4321: PUSH
4322: LD_INT 6
4324: PUSH
4325: EMPTY
4326: LIST
4327: LIST
4328: PUSH
4329: LD_INT 30
4331: PUSH
4332: LD_INT 7
4334: PUSH
4335: EMPTY
4336: LIST
4337: LIST
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: NOT
4354: AND
4355: PUSH
4356: LD_EXP 25
4360: NOT
4361: AND
4362: IFFALSE 4379
4364: GO 4366
4366: DISABLE
// Say ( Petrosyan , DApeLab-Pty-1 ) ;
4367: LD_EXP 44
4371: PPUSH
4372: LD_STRING DApeLab-Pty-1
4374: PPUSH
4375: CALL_OW 88
4379: END
// export function Dial_ResearchApeLang ; begin
4380: LD_INT 0
4382: PPUSH
// DialogueOn ;
4383: CALL_OW 6
// if IsOK ( Petrosyan ) then
4387: LD_EXP 44
4391: PPUSH
4392: CALL_OW 302
4396: IFFALSE 4482
// begin Say ( Petrosyan , DApeLangCompl-Pty-1 ) ;
4398: LD_EXP 44
4402: PPUSH
4403: LD_STRING DApeLangCompl-Pty-1
4405: PPUSH
4406: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-1 ) ;
4410: LD_EXP 40
4414: PPUSH
4415: LD_STRING DApeLangCompl-Bur-1
4417: PPUSH
4418: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-2 ) ;
4422: LD_EXP 44
4426: PPUSH
4427: LD_STRING DApeLangCompl-Pty-2
4429: PPUSH
4430: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-2 ) ;
4434: LD_EXP 40
4438: PPUSH
4439: LD_STRING DApeLangCompl-Bur-2
4441: PPUSH
4442: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-3 ) ;
4446: LD_EXP 44
4450: PPUSH
4451: LD_STRING DApeLangCompl-Pty-3
4453: PPUSH
4454: CALL_OW 88
// Say ( Burlak , DApeLangCompl-Bur-3 ) ;
4458: LD_EXP 40
4462: PPUSH
4463: LD_STRING DApeLangCompl-Bur-3
4465: PPUSH
4466: CALL_OW 88
// Say ( Petrosyan , DApeLangCompl-Pty-4 ) ;
4470: LD_EXP 44
4474: PPUSH
4475: LD_STRING DApeLangCompl-Pty-4
4477: PPUSH
4478: CALL_OW 88
// end ; DialogueOff ;
4482: CALL_OW 7
// end ;
4486: LD_VAR 0 1
4490: RET
// export function Dial_TameApe ( sci ) ; begin
4491: LD_INT 0
4493: PPUSH
// dial_tameApeBlocker = true ;
4494: LD_ADDR_EXP 10
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// if GetSex ( sci ) = sex_male then
4502: LD_VAR 0 1
4506: PPUSH
4507: CALL_OW 258
4511: PUSH
4512: LD_INT 1
4514: EQUAL
4515: IFFALSE 4531
// Say ( sci , DApeTame-Sci1-1 ) else
4517: LD_VAR 0 1
4521: PPUSH
4522: LD_STRING DApeTame-Sci1-1
4524: PPUSH
4525: CALL_OW 88
4529: GO 4695
// begin if IsOK ( Petrosyan ) then
4531: LD_EXP 44
4535: PPUSH
4536: CALL_OW 302
4540: IFFALSE 4556
// Say ( Petrosyan , DApeTame-Sci1-1 ) else
4542: LD_EXP 44
4546: PPUSH
4547: LD_STRING DApeTame-Sci1-1
4549: PPUSH
4550: CALL_OW 88
4554: GO 4695
// if IsOK ( Dolgov ) then
4556: LD_EXP 46
4560: PPUSH
4561: CALL_OW 302
4565: IFFALSE 4581
// Say ( Dolgov , DApeTame-Sci1-1 ) else
4567: LD_EXP 46
4571: PPUSH
4572: LD_STRING DApeTame-Sci1-1
4574: PPUSH
4575: CALL_OW 88
4579: GO 4695
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeTame-Sci1-1 ,  , false , true ) ;
4581: LD_INT 22
4583: PUSH
4584: LD_INT 3
4586: PUSH
4587: EMPTY
4588: LIST
4589: LIST
4590: PUSH
4591: LD_INT 21
4593: PUSH
4594: LD_INT 1
4596: PUSH
4597: EMPTY
4598: LIST
4599: LIST
4600: PUSH
4601: LD_INT 26
4603: PUSH
4604: LD_INT 1
4606: PUSH
4607: EMPTY
4608: LIST
4609: LIST
4610: PUSH
4611: LD_INT 50
4613: PUSH
4614: EMPTY
4615: LIST
4616: PUSH
4617: LD_INT 2
4619: PUSH
4620: LD_INT 25
4622: PUSH
4623: LD_INT 1
4625: PUSH
4626: EMPTY
4627: LIST
4628: LIST
4629: PUSH
4630: LD_INT 25
4632: PUSH
4633: LD_INT 2
4635: PUSH
4636: EMPTY
4637: LIST
4638: LIST
4639: PUSH
4640: LD_INT 25
4642: PUSH
4643: LD_INT 3
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 25
4652: PUSH
4653: LD_INT 4
4655: PUSH
4656: EMPTY
4657: LIST
4658: LIST
4659: PUSH
4660: EMPTY
4661: LIST
4662: LIST
4663: LIST
4664: LIST
4665: LIST
4666: PUSH
4667: EMPTY
4668: LIST
4669: LIST
4670: LIST
4671: LIST
4672: LIST
4673: PPUSH
4674: CALL_OW 69
4678: PPUSH
4679: LD_STRING DApeTame-Sci1-1
4681: PPUSH
4682: LD_STRING 
4684: PPUSH
4685: LD_INT 0
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL 8863 0 5
// end ; Say ( Burlak , DApeTame-Bur-1 ) ;
4695: LD_EXP 40
4699: PPUSH
4700: LD_STRING DApeTame-Bur-1
4702: PPUSH
4703: CALL_OW 88
// end ;
4707: LD_VAR 0 2
4711: RET
// export function Dial_ApeEnterLab ; begin
4712: LD_INT 0
4714: PPUSH
// dial_apeEnterLabBlocker = true ;
4715: LD_ADDR_EXP 11
4719: PUSH
4720: LD_INT 1
4722: ST_TO_ADDR
// DialogueOn ;
4723: CALL_OW 6
// Say ( Burlak , DApeWorkSol-Bur-1 ) ;
4727: LD_EXP 40
4731: PPUSH
4732: LD_STRING DApeWorkSol-Bur-1
4734: PPUSH
4735: CALL_OW 88
// if IsOK ( Petrosyan ) then
4739: LD_EXP 44
4743: PPUSH
4744: CALL_OW 302
4748: IFFALSE 4764
// Say ( Petrosyan , DApeWorkSol-Pty-1 ) else
4750: LD_EXP 44
4754: PPUSH
4755: LD_STRING DApeWorkSol-Pty-1
4757: PPUSH
4758: CALL_OW 88
4762: GO 4903
// if IsOK ( Dolgov ) then
4764: LD_EXP 46
4768: PPUSH
4769: CALL_OW 302
4773: IFFALSE 4789
// Say ( Dolgov , DApeWorkSol-Pty-1 ) else
4775: LD_EXP 46
4779: PPUSH
4780: LD_STRING DApeWorkSol-Pty-1
4782: PPUSH
4783: CALL_OW 88
4787: GO 4903
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkSol-Pty-1 ,  , false , true ) ;
4789: LD_INT 22
4791: PUSH
4792: LD_INT 3
4794: PUSH
4795: EMPTY
4796: LIST
4797: LIST
4798: PUSH
4799: LD_INT 21
4801: PUSH
4802: LD_INT 1
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: PUSH
4809: LD_INT 26
4811: PUSH
4812: LD_INT 1
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: PUSH
4819: LD_INT 50
4821: PUSH
4822: EMPTY
4823: LIST
4824: PUSH
4825: LD_INT 2
4827: PUSH
4828: LD_INT 25
4830: PUSH
4831: LD_INT 1
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PUSH
4838: LD_INT 25
4840: PUSH
4841: LD_INT 2
4843: PUSH
4844: EMPTY
4845: LIST
4846: LIST
4847: PUSH
4848: LD_INT 25
4850: PUSH
4851: LD_INT 3
4853: PUSH
4854: EMPTY
4855: LIST
4856: LIST
4857: PUSH
4858: LD_INT 25
4860: PUSH
4861: LD_INT 4
4863: PUSH
4864: EMPTY
4865: LIST
4866: LIST
4867: PUSH
4868: EMPTY
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: PPUSH
4882: CALL_OW 69
4886: PPUSH
4887: LD_STRING DApeWorkSol-Pty-1
4889: PPUSH
4890: LD_STRING 
4892: PPUSH
4893: LD_INT 0
4895: PPUSH
4896: LD_INT 1
4898: PPUSH
4899: CALL 8863 0 5
// Say ( Burlak , DApeWorkSol-Bur-2 ) ;
4903: LD_EXP 40
4907: PPUSH
4908: LD_STRING DApeWorkSol-Bur-2
4910: PPUSH
4911: CALL_OW 88
// DialogueOff ;
4915: CALL_OW 7
// end ;
4919: LD_VAR 0 1
4923: RET
// export function Dial_ResearchApePsych ; begin
4924: LD_INT 0
4926: PPUSH
// DialogueOn ;
4927: CALL_OW 6
// if IsOK ( Petrosyan ) then
4931: LD_EXP 44
4935: PPUSH
4936: CALL_OW 302
4940: IFFALSE 4956
// Say ( Petrosyan , DApeWorkCompl-Pty-1 ) else
4942: LD_EXP 44
4946: PPUSH
4947: LD_STRING DApeWorkCompl-Pty-1
4949: PPUSH
4950: CALL_OW 88
4954: GO 5095
// if IsOK ( Dolgov ) then
4956: LD_EXP 46
4960: PPUSH
4961: CALL_OW 302
4965: IFFALSE 4981
// Say ( Dolgov , DApeWorkCompl-Pty-1 ) else
4967: LD_EXP 46
4971: PPUSH
4972: LD_STRING DApeWorkCompl-Pty-1
4974: PPUSH
4975: CALL_OW 88
4979: GO 5095
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeWorkCompl-Pty-1 ,  , false , true ) ;
4981: LD_INT 22
4983: PUSH
4984: LD_INT 3
4986: PUSH
4987: EMPTY
4988: LIST
4989: LIST
4990: PUSH
4991: LD_INT 21
4993: PUSH
4994: LD_INT 1
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PUSH
5001: LD_INT 26
5003: PUSH
5004: LD_INT 1
5006: PUSH
5007: EMPTY
5008: LIST
5009: LIST
5010: PUSH
5011: LD_INT 50
5013: PUSH
5014: EMPTY
5015: LIST
5016: PUSH
5017: LD_INT 2
5019: PUSH
5020: LD_INT 25
5022: PUSH
5023: LD_INT 1
5025: PUSH
5026: EMPTY
5027: LIST
5028: LIST
5029: PUSH
5030: LD_INT 25
5032: PUSH
5033: LD_INT 2
5035: PUSH
5036: EMPTY
5037: LIST
5038: LIST
5039: PUSH
5040: LD_INT 25
5042: PUSH
5043: LD_INT 3
5045: PUSH
5046: EMPTY
5047: LIST
5048: LIST
5049: PUSH
5050: LD_INT 25
5052: PUSH
5053: LD_INT 4
5055: PUSH
5056: EMPTY
5057: LIST
5058: LIST
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: LIST
5064: LIST
5065: LIST
5066: PUSH
5067: EMPTY
5068: LIST
5069: LIST
5070: LIST
5071: LIST
5072: LIST
5073: PPUSH
5074: CALL_OW 69
5078: PPUSH
5079: LD_STRING DApeWorkCompl-Pty-1
5081: PPUSH
5082: LD_STRING 
5084: PPUSH
5085: LD_INT 0
5087: PPUSH
5088: LD_INT 1
5090: PPUSH
5091: CALL 8863 0 5
// Say ( Burlak , DApeWorkCompl-Bur-1 ) ;
5095: LD_EXP 40
5099: PPUSH
5100: LD_STRING DApeWorkCompl-Bur-1
5102: PPUSH
5103: CALL_OW 88
// DialogueOff ;
5107: CALL_OW 7
// end ;
5111: LD_VAR 0 1
5115: RET
// export function Dial_ResearchApeAgress ; begin
5116: LD_INT 0
5118: PPUSH
// DialogueOn ;
5119: CALL_OW 6
// if IsOK ( Petrosyan ) then
5123: LD_EXP 44
5127: PPUSH
5128: CALL_OW 302
5132: IFFALSE 5148
// Say ( Petrosyan , DApeSolCompl-Pty-1 ) else
5134: LD_EXP 44
5138: PPUSH
5139: LD_STRING DApeSolCompl-Pty-1
5141: PPUSH
5142: CALL_OW 88
5146: GO 5287
// if IsOK ( Dolgov ) then
5148: LD_EXP 46
5152: PPUSH
5153: CALL_OW 302
5157: IFFALSE 5173
// Say ( Dolgov , DApeSolCompl-Pty-1 ) else
5159: LD_EXP 46
5163: PPUSH
5164: LD_STRING DApeSolCompl-Pty-1
5166: PPUSH
5167: CALL_OW 88
5171: GO 5287
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DApeSolCompl-Pty-1 ,  , false , true ) ;
5173: LD_INT 22
5175: PUSH
5176: LD_INT 3
5178: PUSH
5179: EMPTY
5180: LIST
5181: LIST
5182: PUSH
5183: LD_INT 21
5185: PUSH
5186: LD_INT 1
5188: PUSH
5189: EMPTY
5190: LIST
5191: LIST
5192: PUSH
5193: LD_INT 26
5195: PUSH
5196: LD_INT 1
5198: PUSH
5199: EMPTY
5200: LIST
5201: LIST
5202: PUSH
5203: LD_INT 50
5205: PUSH
5206: EMPTY
5207: LIST
5208: PUSH
5209: LD_INT 2
5211: PUSH
5212: LD_INT 25
5214: PUSH
5215: LD_INT 1
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 25
5224: PUSH
5225: LD_INT 2
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: LD_INT 25
5234: PUSH
5235: LD_INT 3
5237: PUSH
5238: EMPTY
5239: LIST
5240: LIST
5241: PUSH
5242: LD_INT 25
5244: PUSH
5245: LD_INT 4
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PUSH
5252: EMPTY
5253: LIST
5254: LIST
5255: LIST
5256: LIST
5257: LIST
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: LIST
5265: PPUSH
5266: CALL_OW 69
5270: PPUSH
5271: LD_STRING DApeSolCompl-Pty-1
5273: PPUSH
5274: LD_STRING 
5276: PPUSH
5277: LD_INT 0
5279: PPUSH
5280: LD_INT 1
5282: PPUSH
5283: CALL 8863 0 5
// Say ( Burlak , DApeSolCompl-Bur-1 ) ;
5287: LD_EXP 40
5291: PPUSH
5292: LD_STRING DApeSolCompl-Bur-1
5294: PPUSH
5295: CALL_OW 88
// DialogueOff ;
5299: CALL_OW 7
// end ;
5303: LD_VAR 0 1
5307: RET
// every 0 0$1 trigger SeeXY ( 3 , 74 , 115 ) do
5308: LD_INT 3
5310: PPUSH
5311: LD_INT 74
5313: PPUSH
5314: LD_INT 115
5316: PPUSH
5317: CALL_OW 293
5321: IFFALSE 5452
5323: GO 5325
5325: DISABLE
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DShipments-RSol1-1 ,  , false , true ) ;
5326: LD_INT 22
5328: PUSH
5329: LD_INT 3
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: LD_INT 21
5338: PUSH
5339: LD_INT 1
5341: PUSH
5342: EMPTY
5343: LIST
5344: LIST
5345: PUSH
5346: LD_INT 26
5348: PUSH
5349: LD_INT 1
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: PUSH
5356: LD_INT 50
5358: PUSH
5359: EMPTY
5360: LIST
5361: PUSH
5362: LD_INT 2
5364: PUSH
5365: LD_INT 25
5367: PUSH
5368: LD_INT 1
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: PUSH
5375: LD_INT 25
5377: PUSH
5378: LD_INT 2
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 25
5387: PUSH
5388: LD_INT 3
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: LD_INT 25
5397: PUSH
5398: LD_INT 4
5400: PUSH
5401: EMPTY
5402: LIST
5403: LIST
5404: PUSH
5405: EMPTY
5406: LIST
5407: LIST
5408: LIST
5409: LIST
5410: LIST
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: CALL_OW 69
5423: PPUSH
5424: LD_STRING DShipments-RSol1-1
5426: PPUSH
5427: LD_STRING 
5429: PPUSH
5430: LD_INT 0
5432: PPUSH
5433: LD_INT 1
5435: PPUSH
5436: CALL 8863 0 5
// Say ( Burlak , DShipments-Bur-1 ) ;
5440: LD_EXP 40
5444: PPUSH
5445: LD_STRING DShipments-Bur-1
5447: PPUSH
5448: CALL_OW 88
// end ;
5452: END
// every 0 0$1 trigger SeeXY ( 3 , 81 , 132 ) do var unit ;
5453: LD_INT 3
5455: PPUSH
5456: LD_INT 81
5458: PPUSH
5459: LD_INT 132
5461: PPUSH
5462: CALL_OW 293
5466: IFFALSE 5606
5468: GO 5470
5470: DISABLE
5471: LD_INT 0
5473: PPUSH
// begin unit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DRoad-RSol1-1 ,  , false , true ) ;
5474: LD_ADDR_VAR 0 1
5478: PUSH
5479: LD_INT 22
5481: PUSH
5482: LD_INT 3
5484: PUSH
5485: EMPTY
5486: LIST
5487: LIST
5488: PUSH
5489: LD_INT 21
5491: PUSH
5492: LD_INT 1
5494: PUSH
5495: EMPTY
5496: LIST
5497: LIST
5498: PUSH
5499: LD_INT 26
5501: PUSH
5502: LD_INT 1
5504: PUSH
5505: EMPTY
5506: LIST
5507: LIST
5508: PUSH
5509: LD_INT 50
5511: PUSH
5512: EMPTY
5513: LIST
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 25
5520: PUSH
5521: LD_INT 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 25
5530: PUSH
5531: LD_INT 2
5533: PUSH
5534: EMPTY
5535: LIST
5536: LIST
5537: PUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 3
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PUSH
5548: LD_INT 25
5550: PUSH
5551: LD_INT 4
5553: PUSH
5554: EMPTY
5555: LIST
5556: LIST
5557: PUSH
5558: EMPTY
5559: LIST
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: LIST
5569: LIST
5570: LIST
5571: PPUSH
5572: CALL_OW 69
5576: PPUSH
5577: LD_STRING DRoad-RSol1-1
5579: PPUSH
5580: LD_STRING 
5582: PPUSH
5583: LD_INT 0
5585: PPUSH
5586: LD_INT 1
5588: PPUSH
5589: CALL 8863 0 5
5593: ST_TO_ADDR
// Say ( unit , DRoad-RSol1-1a ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_STRING DRoad-RSol1-1a
5601: PPUSH
5602: CALL_OW 88
// end ;
5606: PPOPN 1
5608: END
// every 0 0$1 trigger FilterUnitsInArea ( NatureArea , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff [ Burlak ] and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
5609: LD_INT 33
5611: PPUSH
5612: LD_INT 22
5614: PUSH
5615: LD_INT 3
5617: PUSH
5618: EMPTY
5619: LIST
5620: LIST
5621: PUSH
5622: LD_INT 21
5624: PUSH
5625: LD_INT 1
5627: PUSH
5628: EMPTY
5629: LIST
5630: LIST
5631: PUSH
5632: LD_INT 26
5634: PUSH
5635: LD_INT 1
5637: PUSH
5638: EMPTY
5639: LIST
5640: LIST
5641: PUSH
5642: LD_INT 50
5644: PUSH
5645: EMPTY
5646: LIST
5647: PUSH
5648: LD_INT 2
5650: PUSH
5651: LD_INT 25
5653: PUSH
5654: LD_INT 1
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 2
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 25
5673: PUSH
5674: LD_INT 3
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 25
5683: PUSH
5684: LD_INT 4
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: EMPTY
5692: LIST
5693: LIST
5694: LIST
5695: LIST
5696: LIST
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: PPUSH
5705: CALL_OW 70
5709: PUSH
5710: LD_EXP 40
5714: PUSH
5715: EMPTY
5716: LIST
5717: DIFF
5718: PUSH
5719: LD_INT 22
5721: PUSH
5722: LD_INT 3
5724: PUSH
5725: EMPTY
5726: LIST
5727: LIST
5728: PUSH
5729: LD_INT 21
5731: PUSH
5732: LD_INT 3
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PUSH
5739: LD_INT 30
5741: PUSH
5742: LD_INT 0
5744: PUSH
5745: EMPTY
5746: LIST
5747: LIST
5748: PUSH
5749: LD_INT 50
5751: PUSH
5752: EMPTY
5753: LIST
5754: PUSH
5755: EMPTY
5756: LIST
5757: LIST
5758: LIST
5759: LIST
5760: PPUSH
5761: CALL_OW 69
5765: AND
5766: IFFALSE 5793
5768: GO 5770
5770: DISABLE
// begin PrepareStevens ( StevensSpawnArea ) ;
5771: LD_INT 36
5773: PPUSH
5774: CALL 20911 0 1
// wait ( 0 0$2 ) ;
5778: LD_INT 70
5780: PPUSH
5781: CALL_OW 67
// stevensPlaced = true ;
5785: LD_ADDR_EXP 14
5789: PUSH
5790: LD_INT 1
5792: ST_TO_ADDR
// end ;
5793: END
// every 0 0$1 trigger See ( 3 , Stevens ) and stevensPlaced and not finishMissionBool do var nearUnit ;
5794: LD_INT 3
5796: PPUSH
5797: LD_EXP 58
5801: PPUSH
5802: CALL_OW 292
5806: PUSH
5807: LD_EXP 14
5811: AND
5812: PUSH
5813: LD_EXP 24
5817: NOT
5818: AND
5819: IFFALSE 6161
5821: GO 5823
5823: DISABLE
5824: LD_INT 0
5826: PPUSH
// begin nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
5827: LD_ADDR_VAR 0 1
5831: PUSH
5832: LD_INT 22
5834: PUSH
5835: LD_INT 3
5837: PUSH
5838: EMPTY
5839: LIST
5840: LIST
5841: PUSH
5842: LD_INT 21
5844: PUSH
5845: LD_INT 1
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PUSH
5852: LD_INT 26
5854: PUSH
5855: LD_INT 1
5857: PUSH
5858: EMPTY
5859: LIST
5860: LIST
5861: PUSH
5862: LD_INT 50
5864: PUSH
5865: EMPTY
5866: LIST
5867: PUSH
5868: LD_INT 2
5870: PUSH
5871: LD_INT 25
5873: PUSH
5874: LD_INT 1
5876: PUSH
5877: EMPTY
5878: LIST
5879: LIST
5880: PUSH
5881: LD_INT 25
5883: PUSH
5884: LD_INT 2
5886: PUSH
5887: EMPTY
5888: LIST
5889: LIST
5890: PUSH
5891: LD_INT 25
5893: PUSH
5894: LD_INT 3
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: PUSH
5901: LD_INT 25
5903: PUSH
5904: LD_INT 4
5906: PUSH
5907: EMPTY
5908: LIST
5909: LIST
5910: PUSH
5911: EMPTY
5912: LIST
5913: LIST
5914: LIST
5915: LIST
5916: LIST
5917: PUSH
5918: EMPTY
5919: LIST
5920: LIST
5921: LIST
5922: LIST
5923: LIST
5924: PPUSH
5925: CALL_OW 69
5929: PPUSH
5930: LD_EXP 58
5934: PPUSH
5935: CALL_OW 74
5939: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
5940: LD_EXP 58
5944: PPUSH
5945: CALL_OW 87
// InGameOn ;
5949: CALL_OW 8
// DialogueOn ;
5953: CALL_OW 6
// Say ( nearUnit , DStevens-RSol1-1 ) ;
5957: LD_VAR 0 1
5961: PPUSH
5962: LD_STRING DStevens-RSol1-1
5964: PPUSH
5965: CALL_OW 88
// DialogueOff ;
5969: CALL_OW 7
// wait ( 0 0$1.5 ) ;
5973: LD_INT 52
5975: PPUSH
5976: CALL_OW 67
// if IsOK ( Petrosyan ) then
5980: LD_EXP 44
5984: PPUSH
5985: CALL_OW 302
5989: IFFALSE 6157
// begin SetSide ( Stevens , 6 ) ;
5991: LD_EXP 58
5995: PPUSH
5996: LD_INT 6
5998: PPUSH
5999: CALL_OW 235
// DialogueOn ;
6003: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
6007: LD_EXP 58
6011: PPUSH
6012: LD_STRING DStevens-Huck-1
6014: PPUSH
6015: CALL_OW 88
// if nearUnit = Petrosyan then
6019: LD_VAR 0 1
6023: PUSH
6024: LD_EXP 44
6028: EQUAL
6029: IFFALSE 6125
// begin Say ( Petrosyan , DStevens-Pty-1a ) ;
6031: LD_EXP 44
6035: PPUSH
6036: LD_STRING DStevens-Pty-1a
6038: PPUSH
6039: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6043: LD_EXP 58
6047: PPUSH
6048: LD_STRING DStevens-Huck-2
6050: PPUSH
6051: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6055: LD_EXP 44
6059: PPUSH
6060: LD_STRING DStevens-Pty-2
6062: PPUSH
6063: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6067: LD_EXP 58
6071: PPUSH
6072: LD_STRING DStevens-Huck-3
6074: PPUSH
6075: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6079: LD_EXP 44
6083: PPUSH
6084: LD_STRING DStevens-Pty-3
6086: PPUSH
6087: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6091: LD_EXP 58
6095: PPUSH
6096: LD_STRING DStevens-Huck-4
6098: PPUSH
6099: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6103: LD_EXP 44
6107: PPUSH
6108: LD_STRING DStevens-Pty-4
6110: PPUSH
6111: CALL_OW 88
// stevensFollow = true ;
6115: LD_ADDR_EXP 15
6119: PUSH
6120: LD_INT 1
6122: ST_TO_ADDR
// end else
6123: GO 6153
// begin stevensFollow = true ;
6125: LD_ADDR_EXP 15
6129: PUSH
6130: LD_INT 1
6132: ST_TO_ADDR
// stevensWantTalkPetrosyan = true ;
6133: LD_ADDR_EXP 16
6137: PUSH
6138: LD_INT 1
6140: ST_TO_ADDR
// Say ( Petrosyan , DStevens-Pty-1 ) ;
6141: LD_EXP 44
6145: PPUSH
6146: LD_STRING DStevens-Pty-1
6148: PPUSH
6149: CALL_OW 88
// end ; DialogueOff ;
6153: CALL_OW 7
// end ; InGameOff ;
6157: CALL_OW 9
// end ;
6161: PPOPN 1
6163: END
// every 0 0$1 trigger stevensWantTalkPetrosyan and GetDistUnits ( Petrosyan , Stevens ) < 20 and IsOK ( Petrosyan ) and not finishMissionBool do
6164: LD_EXP 16
6168: PUSH
6169: LD_EXP 44
6173: PPUSH
6174: LD_EXP 58
6178: PPUSH
6179: CALL_OW 296
6183: PUSH
6184: LD_INT 20
6186: LESS
6187: AND
6188: PUSH
6189: LD_EXP 44
6193: PPUSH
6194: CALL_OW 302
6198: AND
6199: PUSH
6200: LD_EXP 24
6204: NOT
6205: AND
6206: IFFALSE 6311
6208: GO 6210
6210: DISABLE
// begin stevensWantTalkPetrosyan = false ;
6211: LD_ADDR_EXP 16
6215: PUSH
6216: LD_INT 0
6218: ST_TO_ADDR
// DialogueOn ;
6219: CALL_OW 6
// Say ( Petrosyan , DStevens-Pty-1a ) ;
6223: LD_EXP 44
6227: PPUSH
6228: LD_STRING DStevens-Pty-1a
6230: PPUSH
6231: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
6235: LD_EXP 58
6239: PPUSH
6240: LD_STRING DStevens-Huck-2
6242: PPUSH
6243: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
6247: LD_EXP 44
6251: PPUSH
6252: LD_STRING DStevens-Pty-2
6254: PPUSH
6255: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
6259: LD_EXP 58
6263: PPUSH
6264: LD_STRING DStevens-Huck-3
6266: PPUSH
6267: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
6271: LD_EXP 44
6275: PPUSH
6276: LD_STRING DStevens-Pty-3
6278: PPUSH
6279: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
6283: LD_EXP 58
6287: PPUSH
6288: LD_STRING DStevens-Huck-4
6290: PPUSH
6291: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-4 ) ;
6295: LD_EXP 44
6299: PPUSH
6300: LD_STRING DStevens-Pty-4
6302: PPUSH
6303: CALL_OW 88
// DialogueOff ;
6307: CALL_OW 7
// end ;
6311: END
// every 0 0$1 trigger GetDistUnits ( Stevens , Burlak ) < 15 and GetSide ( Stevens ) = 6 and IsOK ( Petrosyan ) and not finishMissionBool do
6312: LD_EXP 58
6316: PPUSH
6317: LD_EXP 40
6321: PPUSH
6322: CALL_OW 296
6326: PUSH
6327: LD_INT 15
6329: LESS
6330: PUSH
6331: LD_EXP 58
6335: PPUSH
6336: CALL_OW 255
6340: PUSH
6341: LD_INT 6
6343: EQUAL
6344: AND
6345: PUSH
6346: LD_EXP 44
6350: PPUSH
6351: CALL_OW 302
6355: AND
6356: PUSH
6357: LD_EXP 24
6361: NOT
6362: AND
6363: IFFALSE 6578
6365: GO 6367
6367: DISABLE
// begin DialogueOn ;
6368: CALL_OW 6
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
6372: LD_EXP 44
6376: PPUSH
6377: LD_STRING DStevensBurlak-Pty-1
6379: PPUSH
6380: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
6384: LD_EXP 40
6388: PPUSH
6389: LD_STRING DStevensBurlak-Bur-1
6391: PPUSH
6392: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
6396: LD_EXP 44
6400: PPUSH
6401: LD_STRING DStevensBurlak-Pty-2
6403: PPUSH
6404: CALL_OW 88
// case Query ( QKill ) of 1 :
6408: LD_STRING QKill
6410: PPUSH
6411: CALL_OW 97
6415: PUSH
6416: LD_INT 1
6418: DOUBLE
6419: EQUAL
6420: IFTRUE 6424
6422: GO 6502
6424: POP
// begin stevensCanExitMap = true ;
6425: LD_ADDR_EXP 19
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// stevensFollow = false ;
6433: LD_ADDR_EXP 15
6437: PUSH
6438: LD_INT 0
6440: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
6441: LD_EXP 40
6445: PPUSH
6446: LD_STRING DKill-1-Bur-1
6448: PPUSH
6449: CALL_OW 88
// if IsOK ( Gleb ) then
6453: LD_EXP 43
6457: PPUSH
6458: CALL_OW 302
6462: IFFALSE 6476
// Say ( Gleb , DKill-1-Glb-1 ) ;
6464: LD_EXP 43
6468: PPUSH
6469: LD_STRING DKill-1-Glb-1
6471: PPUSH
6472: CALL_OW 88
// SetSide ( Stevens , 1 ) ;
6476: LD_EXP 58
6480: PPUSH
6481: LD_INT 1
6483: PPUSH
6484: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
6488: LD_EXP 58
6492: PPUSH
6493: LD_INT 37
6495: PPUSH
6496: CALL_OW 113
// end ; 2 :
6500: GO 6574
6502: LD_INT 2
6504: DOUBLE
6505: EQUAL
6506: IFTRUE 6510
6508: GO 6573
6510: POP
// begin stevensCanExitMap = true ;
6511: LD_ADDR_EXP 19
6515: PUSH
6516: LD_INT 1
6518: ST_TO_ADDR
// stevensFollow = false ;
6519: LD_ADDR_EXP 15
6523: PUSH
6524: LD_INT 0
6526: ST_TO_ADDR
// stevensDepot = true ;
6527: LD_ADDR_EXP 17
6531: PUSH
6532: LD_INT 1
6534: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
6535: LD_EXP 40
6539: PPUSH
6540: LD_STRING DKill-2-Bur-1
6542: PPUSH
6543: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
6547: LD_EXP 44
6551: PPUSH
6552: LD_STRING DKill-2-Pty-1
6554: PPUSH
6555: CALL_OW 88
// Say ( Burlak , DKill-2-Bur-2 ) ;
6559: LD_EXP 40
6563: PPUSH
6564: LD_STRING DKill-2-Bur-2
6566: PPUSH
6567: CALL_OW 88
// end ; end ;
6571: GO 6574
6573: POP
// DialogueOff ;
6574: CALL_OW 7
// end ;
6578: END
// every 0 0$1 trigger stevensFollow do var nearUnit ;
6579: LD_EXP 15
6583: IFFALSE 6723
6585: GO 6587
6587: DISABLE
6588: LD_INT 0
6590: PPUSH
// begin enable ;
6591: ENABLE
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
6592: LD_ADDR_VAR 0 1
6596: PUSH
6597: LD_INT 22
6599: PUSH
6600: LD_INT 3
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: PUSH
6607: LD_INT 21
6609: PUSH
6610: LD_INT 1
6612: PUSH
6613: EMPTY
6614: LIST
6615: LIST
6616: PUSH
6617: LD_INT 50
6619: PUSH
6620: EMPTY
6621: LIST
6622: PUSH
6623: LD_INT 2
6625: PUSH
6626: LD_INT 25
6628: PUSH
6629: LD_INT 1
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: PUSH
6636: LD_INT 25
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: EMPTY
6643: LIST
6644: LIST
6645: PUSH
6646: LD_INT 25
6648: PUSH
6649: LD_INT 3
6651: PUSH
6652: EMPTY
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 25
6658: PUSH
6659: LD_INT 4
6661: PUSH
6662: EMPTY
6663: LIST
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: PUSH
6673: EMPTY
6674: LIST
6675: LIST
6676: LIST
6677: LIST
6678: PPUSH
6679: CALL_OW 69
6683: PPUSH
6684: LD_EXP 58
6688: PPUSH
6689: CALL_OW 74
6693: ST_TO_ADDR
// ComMoveXY ( Stevens , GetX ( nearUnit ) , GetY ( nearUnit ) ) ;
6694: LD_EXP 58
6698: PPUSH
6699: LD_VAR 0 1
6703: PPUSH
6704: CALL_OW 250
6708: PPUSH
6709: LD_VAR 0 1
6713: PPUSH
6714: CALL_OW 251
6718: PPUSH
6719: CALL_OW 111
// end ;
6723: PPOPN 1
6725: END
// every 0 0$1 trigger stevensDepot and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
6726: LD_EXP 17
6730: PUSH
6731: LD_INT 22
6733: PUSH
6734: LD_INT 3
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 21
6743: PUSH
6744: LD_INT 3
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: PUSH
6751: LD_INT 30
6753: PUSH
6754: LD_INT 0
6756: PUSH
6757: EMPTY
6758: LIST
6759: LIST
6760: PUSH
6761: LD_INT 50
6763: PUSH
6764: EMPTY
6765: LIST
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: PPUSH
6773: CALL_OW 69
6777: NOT
6778: AND
6779: IFFALSE 6806
6781: GO 6783
6783: DISABLE
// begin enable ;
6784: ENABLE
// SetSide ( Stevens , 6 ) ;
6785: LD_EXP 58
6789: PPUSH
6790: LD_INT 6
6792: PPUSH
6793: CALL_OW 235
// ComHold ( Stevens ) ;
6797: LD_EXP 58
6801: PPUSH
6802: CALL_OW 140
// end ;
6806: END
// every 0 0$1 trigger stevensDepot and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do var depot , depotUnit , constructDepot ;
6807: LD_EXP 17
6811: PUSH
6812: LD_INT 22
6814: PUSH
6815: LD_INT 3
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 21
6824: PUSH
6825: LD_INT 3
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: LD_INT 30
6834: PUSH
6835: LD_INT 0
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: PUSH
6842: LD_INT 50
6844: PUSH
6845: EMPTY
6846: LIST
6847: PUSH
6848: EMPTY
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: PPUSH
6854: CALL_OW 69
6858: AND
6859: IFFALSE 7458
6861: GO 6863
6863: DISABLE
6864: LD_INT 0
6866: PPUSH
6867: PPUSH
6868: PPUSH
// begin enable ;
6869: ENABLE
// depot = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) [ 1 ] ;
6870: LD_ADDR_VAR 0 1
6874: PUSH
6875: LD_INT 22
6877: PUSH
6878: LD_INT 3
6880: PUSH
6881: EMPTY
6882: LIST
6883: LIST
6884: PUSH
6885: LD_INT 21
6887: PUSH
6888: LD_INT 3
6890: PUSH
6891: EMPTY
6892: LIST
6893: LIST
6894: PUSH
6895: LD_INT 30
6897: PUSH
6898: LD_INT 0
6900: PUSH
6901: EMPTY
6902: LIST
6903: LIST
6904: PUSH
6905: LD_INT 50
6907: PUSH
6908: EMPTY
6909: LIST
6910: PUSH
6911: EMPTY
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: PPUSH
6917: CALL_OW 69
6921: PUSH
6922: LD_INT 1
6924: ARRAY
6925: ST_TO_ADDR
// stevensFollow = false ;
6926: LD_ADDR_EXP 15
6930: PUSH
6931: LD_INT 0
6933: ST_TO_ADDR
// if not depot then
6934: LD_VAR 0 1
6938: NOT
6939: IFFALSE 6943
// exit ;
6941: GO 7458
// for depotUnit in depot do
6943: LD_ADDR_VAR 0 2
6947: PUSH
6948: LD_VAR 0 1
6952: PUSH
6953: FOR_IN
6954: IFFALSE 6980
// if not IsConstructed ( depotUnit ) then
6956: LD_VAR 0 2
6960: PPUSH
6961: CALL_OW 304
6965: NOT
6966: IFFALSE 6978
// constructDepot = depotUnit ;
6968: LD_ADDR_VAR 0 3
6972: PUSH
6973: LD_VAR 0 2
6977: ST_TO_ADDR
6978: GO 6953
6980: POP
6981: POP
// if not constructDepot then
6982: LD_VAR 0 3
6986: NOT
6987: IFFALSE 6991
// exit ;
6989: GO 7458
// if not stevensWasInDepot then
6991: LD_EXP 18
6995: NOT
6996: IFFALSE 7136
// begin if not IsInUnit ( Stevens ) and not GetDistUnits ( Stevens , depot ) < 8 then
6998: LD_EXP 58
7002: PPUSH
7003: CALL_OW 310
7007: NOT
7008: PUSH
7009: LD_EXP 58
7013: PPUSH
7014: LD_VAR 0 1
7018: PPUSH
7019: CALL_OW 296
7023: PUSH
7024: LD_INT 8
7026: LESS
7027: NOT
7028: AND
7029: IFFALSE 7062
// ComMoveXY ( Stevens , GetX ( constructDepot ) , GetY ( constructDepot ) ) else
7031: LD_EXP 58
7035: PPUSH
7036: LD_VAR 0 3
7040: PPUSH
7041: CALL_OW 250
7045: PPUSH
7046: LD_VAR 0 3
7050: PPUSH
7051: CALL_OW 251
7055: PPUSH
7056: CALL_OW 111
7060: GO 7134
// begin InGameOn ;
7062: CALL_OW 8
// repeat SetSide ( Stevens , 3 ) ;
7066: LD_EXP 58
7070: PPUSH
7071: LD_INT 3
7073: PPUSH
7074: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7078: LD_EXP 58
7082: PPUSH
7083: LD_VAR 0 3
7087: PPUSH
7088: CALL_OW 120
// wait ( 0 0$1 ) ;
7092: LD_INT 35
7094: PPUSH
7095: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7099: LD_EXP 58
7103: PPUSH
7104: CALL_OW 310
7108: PUSH
7109: LD_EXP 58
7113: PPUSH
7114: CALL_OW 302
7118: NOT
7119: OR
7120: IFFALSE 7066
// InGameOff ;
7122: CALL_OW 9
// stevensWasInDepot = true ;
7126: LD_ADDR_EXP 18
7130: PUSH
7131: LD_INT 1
7133: ST_TO_ADDR
// end ; end else
7134: GO 7458
// begin if not IsInUnit ( Stevens ) or GetType ( IsInUnit ( Stevens ) ) = unit_vehicle then
7136: LD_EXP 58
7140: PPUSH
7141: CALL_OW 310
7145: NOT
7146: PUSH
7147: LD_EXP 58
7151: PPUSH
7152: CALL_OW 310
7156: PPUSH
7157: CALL_OW 247
7161: PUSH
7162: LD_INT 2
7164: EQUAL
7165: OR
7166: IFFALSE 7458
// begin DialogueOn ;
7168: CALL_OW 6
// Say ( Burlak , DRelease-Bur-1 ) ;
7172: LD_EXP 40
7176: PPUSH
7177: LD_STRING DRelease-Bur-1
7179: PPUSH
7180: CALL_OW 88
// case Query ( QKillAgain ) of 1 :
7184: LD_STRING QKillAgain
7186: PPUSH
7187: CALL_OW 97
7191: PUSH
7192: LD_INT 1
7194: DOUBLE
7195: EQUAL
7196: IFTRUE 7200
7198: GO 7269
7200: POP
// begin Say ( Burlak , DQrKillAgain#1-Bur-1 ) ;
7201: LD_EXP 40
7205: PPUSH
7206: LD_STRING DQrKillAgain#1-Bur-1
7208: PPUSH
7209: CALL_OW 88
// stevensCanExitMap = true ;
7213: LD_ADDR_EXP 19
7217: PUSH
7218: LD_INT 1
7220: ST_TO_ADDR
// stevensWasInDepot = false ;
7221: LD_ADDR_EXP 18
7225: PUSH
7226: LD_INT 0
7228: ST_TO_ADDR
// stevensDepot = false ;
7229: LD_ADDR_EXP 17
7233: PUSH
7234: LD_INT 0
7236: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
7237: LD_EXP 58
7241: PPUSH
7242: LD_INT 1
7244: PPUSH
7245: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7249: LD_EXP 58
7253: PPUSH
7254: LD_INT 37
7256: PPUSH
7257: CALL_OW 113
// DialogueOff ;
7261: CALL_OW 7
// exit ;
7265: GO 7458
// end ; 2 :
7267: GO 7454
7269: LD_INT 2
7271: DOUBLE
7272: EQUAL
7273: IFTRUE 7277
7275: GO 7346
7277: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1 ) ;
7278: LD_EXP 40
7282: PPUSH
7283: LD_STRING DQrKillAgain#2-Bur-1
7285: PPUSH
7286: CALL_OW 88
// stevensCanExitMap = true ;
7290: LD_ADDR_EXP 19
7294: PUSH
7295: LD_INT 1
7297: ST_TO_ADDR
// stevensWasInDepot = false ;
7298: LD_ADDR_EXP 18
7302: PUSH
7303: LD_INT 0
7305: ST_TO_ADDR
// stevensDepot = false ;
7306: LD_ADDR_EXP 17
7310: PUSH
7311: LD_INT 0
7313: ST_TO_ADDR
// SetSide ( Stevens , 6 ) ;
7314: LD_EXP 58
7318: PPUSH
7319: LD_INT 6
7321: PPUSH
7322: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
7326: LD_EXP 58
7330: PPUSH
7331: LD_INT 37
7333: PPUSH
7334: CALL_OW 113
// DialogueOff ;
7338: CALL_OW 7
// exit ;
7342: GO 7458
// end ; 3 :
7344: GO 7454
7346: LD_INT 3
7348: DOUBLE
7349: EQUAL
7350: IFTRUE 7354
7352: GO 7453
7354: POP
// begin Say ( Burlak , DQrKillAgain#2-Bur-1a ) ;
7355: LD_EXP 40
7359: PPUSH
7360: LD_STRING DQrKillAgain#2-Bur-1a
7362: PPUSH
7363: CALL_OW 88
// DialogueOff ;
7367: CALL_OW 7
// InGameOn ;
7371: CALL_OW 8
// ComExitVehicle ( Stevens ) ;
7375: LD_EXP 58
7379: PPUSH
7380: CALL_OW 121
// wait ( 0 0$1 ) ;
7384: LD_INT 35
7386: PPUSH
7387: CALL_OW 67
// repeat SetSide ( Stevens , 3 ) ;
7391: LD_EXP 58
7395: PPUSH
7396: LD_INT 3
7398: PPUSH
7399: CALL_OW 235
// ComEnterUnit ( Stevens , constructDepot ) ;
7403: LD_EXP 58
7407: PPUSH
7408: LD_VAR 0 3
7412: PPUSH
7413: CALL_OW 120
// wait ( 0 0$1 ) ;
7417: LD_INT 35
7419: PPUSH
7420: CALL_OW 67
// until IsInUnit ( Stevens ) or not IsOK ( Stevens ) ;
7424: LD_EXP 58
7428: PPUSH
7429: CALL_OW 310
7433: PUSH
7434: LD_EXP 58
7438: PPUSH
7439: CALL_OW 302
7443: NOT
7444: OR
7445: IFFALSE 7391
// InGameOff ;
7447: CALL_OW 9
// end ; end ;
7451: GO 7454
7453: POP
// DialogueOff ;
7454: CALL_OW 7
// end ; end ; end ;
7458: PPOPN 3
7460: END
// every 0 0$1 trigger stevensCanExitMap and IsInArea ( Stevens , StevensExitMapArea ) do
7461: LD_EXP 19
7465: PUSH
7466: LD_EXP 58
7470: PPUSH
7471: LD_INT 37
7473: PPUSH
7474: CALL_OW 308
7478: AND
7479: IFFALSE 7526
7481: GO 7483
7483: DISABLE
// begin if GetSide ( Stevens ) = 6 then
7484: LD_EXP 58
7488: PPUSH
7489: CALL_OW 255
7493: PUSH
7494: LD_INT 6
7496: EQUAL
7497: IFFALSE 7509
// stevensStatus = 1 else
7499: LD_ADDR_EXP 2
7503: PUSH
7504: LD_INT 1
7506: ST_TO_ADDR
7507: GO 7517
// stevensStatus = 2 ;
7509: LD_ADDR_EXP 2
7513: PUSH
7514: LD_INT 2
7516: ST_TO_ADDR
// RemoveUnit ( Stevens ) ;
7517: LD_EXP 58
7521: PPUSH
7522: CALL_OW 64
// end ;
7526: END
// every 0 0$1 trigger See ( 3 , mastodon ) do var rnd ;
7527: LD_INT 3
7529: PPUSH
7530: LD_INT 1
7532: PPUSH
7533: CALL_OW 292
7537: IFFALSE 7737
7539: GO 7541
7541: DISABLE
7542: LD_INT 0
7544: PPUSH
// begin rnd = rand ( 1 , 2 ) ;
7545: LD_ADDR_VAR 0 1
7549: PUSH
7550: LD_INT 1
7552: PPUSH
7553: LD_INT 2
7555: PPUSH
7556: CALL_OW 12
7560: ST_TO_ADDR
// CenterNowOnUnits ( mastodon ) ;
7561: LD_INT 1
7563: PPUSH
7564: CALL_OW 87
// DialogueOn ;
7568: CALL_OW 6
// if rnd = 1 then
7572: LD_VAR 0 1
7576: PUSH
7577: LD_INT 1
7579: EQUAL
7580: IFFALSE 7596
// Say ( Burlak , DMastodon-Bur-1 ) else
7582: LD_EXP 40
7586: PPUSH
7587: LD_STRING DMastodon-Bur-1
7589: PPUSH
7590: CALL_OW 88
7594: GO 7710
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DMastodon-RSol1-1 ,  , false , true ) ;
7596: LD_INT 22
7598: PUSH
7599: LD_INT 3
7601: PUSH
7602: EMPTY
7603: LIST
7604: LIST
7605: PUSH
7606: LD_INT 21
7608: PUSH
7609: LD_INT 1
7611: PUSH
7612: EMPTY
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 26
7618: PUSH
7619: LD_INT 1
7621: PUSH
7622: EMPTY
7623: LIST
7624: LIST
7625: PUSH
7626: LD_INT 50
7628: PUSH
7629: EMPTY
7630: LIST
7631: PUSH
7632: LD_INT 2
7634: PUSH
7635: LD_INT 25
7637: PUSH
7638: LD_INT 1
7640: PUSH
7641: EMPTY
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 25
7647: PUSH
7648: LD_INT 2
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 25
7657: PUSH
7658: LD_INT 3
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: LD_INT 25
7667: PUSH
7668: LD_INT 4
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: PUSH
7675: EMPTY
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: PUSH
7682: EMPTY
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: PPUSH
7689: CALL_OW 69
7693: PPUSH
7694: LD_STRING DMastodon-RSol1-1
7696: PPUSH
7697: LD_STRING 
7699: PPUSH
7700: LD_INT 0
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: CALL 8863 0 5
// if IsOK ( Gleb ) then
7710: LD_EXP 43
7714: PPUSH
7715: CALL_OW 302
7719: IFFALSE 7733
// Say ( Gleb , DMastodon-Glb-1 ) ;
7721: LD_EXP 43
7725: PPUSH
7726: LD_STRING DMastodon-Glb-1
7728: PPUSH
7729: CALL_OW 88
// DialogueOff ;
7733: CALL_OW 7
// end ;
7737: PPOPN 1
7739: END
// every 0 0$1 trigger not IsOK ( mastodon ) do
7740: LD_INT 1
7742: PPUSH
7743: CALL_OW 302
7747: NOT
7748: IFFALSE 7827
7750: GO 7752
7752: DISABLE
// begin omarCanExitMap = true ;
7753: LD_ADDR_EXP 20
7757: PUSH
7758: LD_INT 1
7760: ST_TO_ADDR
// DialogueOn ;
7761: CALL_OW 6
// if IsOK ( Karamazov ) then
7765: LD_EXP 41
7769: PPUSH
7770: CALL_OW 302
7774: IFFALSE 7788
// Say ( Karamazov , DOmar-Kar-1 ) ;
7776: LD_EXP 41
7780: PPUSH
7781: LD_STRING DOmar-Kar-1
7783: PPUSH
7784: CALL_OW 88
// if IsOK ( Petrovova ) then
7788: LD_EXP 42
7792: PPUSH
7793: CALL_OW 302
7797: IFFALSE 7811
// Say ( Petrovova , DOmar-Ptr-1 ) ;
7799: LD_EXP 42
7803: PPUSH
7804: LD_STRING DOmar-Ptr-1
7806: PPUSH
7807: CALL_OW 88
// DialogueOff ;
7811: CALL_OW 7
// ComMoveToArea ( Omar , ArabianExitArea ) ;
7815: LD_EXP 51
7819: PPUSH
7820: LD_INT 41
7822: PPUSH
7823: CALL_OW 113
// end ;
7827: END
// every 0 0$1 trigger IsInArea ( Omar , ArabianExitArea ) and omarCanExitMap do
7828: LD_EXP 51
7832: PPUSH
7833: LD_INT 41
7835: PPUSH
7836: CALL_OW 308
7840: PUSH
7841: LD_EXP 20
7845: AND
7846: IFFALSE 7868
7848: GO 7850
7850: DISABLE
// begin RemoveUnit ( Omar ) ;
7851: LD_EXP 51
7855: PPUSH
7856: CALL_OW 64
// omarStatus = 1 ;
7860: LD_ADDR_EXP 1
7864: PUSH
7865: LD_INT 1
7867: ST_TO_ADDR
// end ;
7868: END
// every 0 0$1 trigger IsDead ( Omar ) do
7869: LD_EXP 51
7873: PPUSH
7874: CALL_OW 301
7878: IFFALSE 8036
7880: GO 7882
7882: DISABLE
// begin DialogueOn ;
7883: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , DOmar-RSol1-1 ,  , false , true ) ;
7887: LD_INT 22
7889: PUSH
7890: LD_INT 3
7892: PUSH
7893: EMPTY
7894: LIST
7895: LIST
7896: PUSH
7897: LD_INT 21
7899: PUSH
7900: LD_INT 1
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 26
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: LD_INT 50
7919: PUSH
7920: EMPTY
7921: LIST
7922: PUSH
7923: LD_INT 2
7925: PUSH
7926: LD_INT 25
7928: PUSH
7929: LD_INT 1
7931: PUSH
7932: EMPTY
7933: LIST
7934: LIST
7935: PUSH
7936: LD_INT 25
7938: PUSH
7939: LD_INT 2
7941: PUSH
7942: EMPTY
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 25
7948: PUSH
7949: LD_INT 3
7951: PUSH
7952: EMPTY
7953: LIST
7954: LIST
7955: PUSH
7956: LD_INT 25
7958: PUSH
7959: LD_INT 4
7961: PUSH
7962: EMPTY
7963: LIST
7964: LIST
7965: PUSH
7966: EMPTY
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: PUSH
7973: EMPTY
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: PPUSH
7980: CALL_OW 69
7984: PPUSH
7985: LD_STRING DOmar-RSol1-1
7987: PPUSH
7988: LD_STRING 
7990: PPUSH
7991: LD_INT 0
7993: PPUSH
7994: LD_INT 1
7996: PPUSH
7997: CALL 8863 0 5
// wait ( 0 0$1 ) ;
8001: LD_INT 35
8003: PPUSH
8004: CALL_OW 67
// Say ( Heike , DOmar-Hke-1 ) ;
8008: LD_EXP 50
8012: PPUSH
8013: LD_STRING DOmar-Hke-1
8015: PPUSH
8016: CALL_OW 88
// Say ( Burlak , DOmar-Bur-1 ) ;
8020: LD_EXP 40
8024: PPUSH
8025: LD_STRING DOmar-Bur-1
8027: PPUSH
8028: CALL_OW 88
// DialogueOff ;
8032: CALL_OW 7
// end ;
8036: END
// every 0 0$1 trigger ( IsDead ( Omar ) or not IsPlaced ( Omar ) ) and arabianUnitsInBase < 3 do
8037: LD_EXP 51
8041: PPUSH
8042: CALL_OW 301
8046: PUSH
8047: LD_EXP 51
8051: PPUSH
8052: CALL_OW 305
8056: NOT
8057: OR
8058: PUSH
8059: LD_EXP 52
8063: PUSH
8064: LD_INT 3
8066: LESS
8067: AND
8068: IFFALSE 8219
8070: GO 8072
8072: DISABLE
// begin if actionTime < arabBreakthrough then
8073: LD_EXP 7
8077: PUSH
8078: LD_EXP 35
8082: LESS
8083: IFFALSE 8093
// fastBreakthrough = true ;
8085: LD_ADDR_EXP 23
8089: PUSH
8090: LD_INT 1
8092: ST_TO_ADDR
// DialogueOn ;
8093: CALL_OW 6
// if IsOK ( Petrovova ) then
8097: LD_EXP 42
8101: PPUSH
8102: CALL_OW 302
8106: IFFALSE 8120
// Say ( Petrovova , DBreakthrough-Ptr-1 ) ;
8108: LD_EXP 42
8112: PPUSH
8113: LD_STRING DBreakthrough-Ptr-1
8115: PPUSH
8116: CALL_OW 88
// Say ( Burlak , DBreakthrough-Bur-1 ) ;
8120: LD_EXP 40
8124: PPUSH
8125: LD_STRING DBreakthrough-Bur-1
8127: PPUSH
8128: CALL_OW 88
// SayRadio ( Platonov , DBreakthrough-Pla-1 ) ;
8132: LD_EXP 48
8136: PPUSH
8137: LD_STRING DBreakthrough-Pla-1
8139: PPUSH
8140: CALL_OW 94
// if fastBreakthrough then
8144: LD_EXP 23
8148: IFFALSE 8164
// SayRadio ( Platonov , DBreakthrough-Pla-1a ) else
8150: LD_EXP 48
8154: PPUSH
8155: LD_STRING DBreakthrough-Pla-1a
8157: PPUSH
8158: CALL_OW 94
8162: GO 8176
// SayRadio ( Platonov , DBreakthrough-Pla-1b ) ;
8164: LD_EXP 48
8168: PPUSH
8169: LD_STRING DBreakthrough-Pla-1b
8171: PPUSH
8172: CALL_OW 94
// SayRadio ( Platonov , DBreakthrough-Pla-1c ) ;
8176: LD_EXP 48
8180: PPUSH
8181: LD_STRING DBreakthrough-Pla-1c
8183: PPUSH
8184: CALL_OW 94
// DialogueOff ;
8188: CALL_OW 7
// ChangeMissionObjectives ( MAddLab ) ;
8192: LD_STRING MAddLab
8194: PPUSH
8195: CALL_OW 337
// arabianCanExitMap = true ;
8199: LD_ADDR_EXP 21
8203: PUSH
8204: LD_INT 1
8206: ST_TO_ADDR
// ComMoveToArea ( arabianUnitsInBase , ArabianExitArea ) ;
8207: LD_EXP 52
8211: PPUSH
8212: LD_INT 41
8214: PPUSH
8215: CALL_OW 113
// end ;
8219: END
// every 0 0$1 trigger arabianCanExitMap do var unit ;
8220: LD_EXP 21
8224: IFFALSE 8289
8226: GO 8228
8228: DISABLE
8229: LD_INT 0
8231: PPUSH
// begin enable ;
8232: ENABLE
// for unit in arabianUnitsInBase do
8233: LD_ADDR_VAR 0 1
8237: PUSH
8238: LD_EXP 52
8242: PUSH
8243: FOR_IN
8244: IFFALSE 8287
// if IsInArea ( unit , ArabianExitArea ) then
8246: LD_VAR 0 1
8250: PPUSH
8251: LD_INT 41
8253: PPUSH
8254: CALL_OW 308
8258: IFFALSE 8285
// begin arabianUnitsInBase = arabianUnitsInBase diff unit ;
8260: LD_ADDR_EXP 52
8264: PUSH
8265: LD_EXP 52
8269: PUSH
8270: LD_VAR 0 1
8274: DIFF
8275: ST_TO_ADDR
// RemoveUnit ( unit ) ;
8276: LD_VAR 0 1
8280: PPUSH
8281: CALL_OW 64
// end ;
8285: GO 8243
8287: POP
8288: POP
// end ;
8289: PPOPN 1
8291: END
// every 0 0$1 trigger not dial_southRoadBlocker do var unit ;
8292: LD_EXP 12
8296: NOT
8297: IFFALSE 8535
8299: GO 8301
8301: DISABLE
8302: LD_INT 0
8304: PPUSH
// begin for unit in arabianPatrolVehicles do
8305: LD_ADDR_VAR 0 1
8309: PUSH
8310: LD_EXP 53
8314: PUSH
8315: FOR_IN
8316: IFFALSE 8533
// if See ( 3 , unit ) then
8318: LD_INT 3
8320: PPUSH
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 292
8330: IFFALSE 8531
// begin dial_southRoadBlocker = true ;
8332: LD_ADDR_EXP 12
8336: PUSH
8337: LD_INT 1
8339: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
8340: LD_VAR 0 1
8344: PPUSH
8345: CALL_OW 87
// if IsOK ( Karamazov ) then
8349: LD_EXP 41
8353: PPUSH
8354: CALL_OW 302
8358: IFFALSE 8372
// Say ( Karamazov , DPatrol-Kar-1 ) ;
8360: LD_EXP 41
8364: PPUSH
8365: LD_STRING DPatrol-Kar-1
8367: PPUSH
8368: CALL_OW 88
// if IsOK ( Petrovova ) then
8372: LD_EXP 42
8376: PPUSH
8377: CALL_OW 302
8381: IFFALSE 8395
// Say ( Petrovova , DPatrol-Ptr-1 ) ;
8383: LD_EXP 42
8387: PPUSH
8388: LD_STRING DPatrol-Ptr-1
8390: PPUSH
8391: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) diff Karamazov , DPatrol-RSol1-1 ,  , false , true ) ;
8395: LD_INT 22
8397: PUSH
8398: LD_INT 3
8400: PUSH
8401: EMPTY
8402: LIST
8403: LIST
8404: PUSH
8405: LD_INT 21
8407: PUSH
8408: LD_INT 1
8410: PUSH
8411: EMPTY
8412: LIST
8413: LIST
8414: PUSH
8415: LD_INT 26
8417: PUSH
8418: LD_INT 1
8420: PUSH
8421: EMPTY
8422: LIST
8423: LIST
8424: PUSH
8425: LD_INT 50
8427: PUSH
8428: EMPTY
8429: LIST
8430: PUSH
8431: LD_INT 2
8433: PUSH
8434: LD_INT 25
8436: PUSH
8437: LD_INT 1
8439: PUSH
8440: EMPTY
8441: LIST
8442: LIST
8443: PUSH
8444: LD_INT 25
8446: PUSH
8447: LD_INT 2
8449: PUSH
8450: EMPTY
8451: LIST
8452: LIST
8453: PUSH
8454: LD_INT 25
8456: PUSH
8457: LD_INT 3
8459: PUSH
8460: EMPTY
8461: LIST
8462: LIST
8463: PUSH
8464: LD_INT 25
8466: PUSH
8467: LD_INT 4
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: PUSH
8474: EMPTY
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: PUSH
8481: EMPTY
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: PPUSH
8488: CALL_OW 69
8492: PUSH
8493: LD_EXP 41
8497: DIFF
8498: PPUSH
8499: LD_STRING DPatrol-RSol1-1
8501: PPUSH
8502: LD_STRING 
8504: PPUSH
8505: LD_INT 0
8507: PPUSH
8508: LD_INT 1
8510: PPUSH
8511: CALL 8863 0 5
// Say ( Burlak , DPatrol-Bur-1 ) ;
8515: LD_EXP 40
8519: PPUSH
8520: LD_STRING DPatrol-Bur-1
8522: PPUSH
8523: CALL_OW 88
// exit ;
8527: POP
8528: POP
8529: GO 8535
// end ;
8531: GO 8315
8533: POP
8534: POP
// end ;
8535: PPOPN 1
8537: END
// every 10 10$0 do
8538: GO 8540
8540: DISABLE
// PrepareArabianPatrolSoldiers ; end_of_file
8541: CALL 2593 0 0
8545: END
// export function PrepareUnitExt ( ident , exist_mode , class ) ; var unit ; begin
8546: LD_INT 0
8548: PPUSH
8549: PPUSH
// if debugMode then
8550: LD_EXP 33
8554: IFFALSE 8571
// unit := NewCharacter ( ident ) ;
8556: LD_ADDR_VAR 0 5
8560: PUSH
8561: LD_VAR 0 1
8565: PPUSH
8566: CALL_OW 25
8570: ST_TO_ADDR
// if exist_mode and not debugMode then
8571: LD_VAR 0 2
8575: PUSH
8576: LD_EXP 33
8580: NOT
8581: AND
8582: IFFALSE 8607
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8584: LD_ADDR_VAR 0 5
8588: PUSH
8589: LD_EXP 32
8593: PUSH
8594: LD_VAR 0 1
8598: STR
8599: PPUSH
8600: CALL_OW 34
8604: ST_TO_ADDR
8605: GO 8629
// if not debugMode then
8607: LD_EXP 33
8611: NOT
8612: IFFALSE 8629
// unit := NewCharacter ( ident ) ;
8614: LD_ADDR_VAR 0 5
8618: PUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 25
8628: ST_TO_ADDR
// if class then
8629: LD_VAR 0 3
8633: IFFALSE 8649
// SetClass ( unit , class ) ;
8635: LD_VAR 0 5
8639: PPUSH
8640: LD_VAR 0 3
8644: PPUSH
8645: CALL_OW 336
// result := unit ;
8649: LD_ADDR_VAR 0 4
8653: PUSH
8654: LD_VAR 0 5
8658: ST_TO_ADDR
// end ;
8659: LD_VAR 0 4
8663: RET
// export function ExtSaveCharacter ( character , characterStringID , side ) ; begin
8664: LD_INT 0
8666: PPUSH
// if GetSide ( character ) = side and IsOK ( character ) then
8667: LD_VAR 0 1
8671: PPUSH
8672: CALL_OW 255
8676: PUSH
8677: LD_VAR 0 3
8681: EQUAL
8682: PUSH
8683: LD_VAR 0 1
8687: PPUSH
8688: CALL_OW 302
8692: AND
8693: IFFALSE 8715
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8695: LD_VAR 0 1
8699: PPUSH
8700: LD_EXP 31
8704: PUSH
8705: LD_VAR 0 2
8709: STR
8710: PPUSH
8711: CALL_OW 38
// end ;
8715: LD_VAR 0 4
8719: RET
// export function ExtSaveCharacters ( characters , charactersStringID , side ) ; var unit , resultCharactersToSave ; begin
8720: LD_INT 0
8722: PPUSH
8723: PPUSH
8724: PPUSH
// resultCharactersToSave = [ ] ;
8725: LD_ADDR_VAR 0 6
8729: PUSH
8730: EMPTY
8731: ST_TO_ADDR
// for unit in characters do
8732: LD_ADDR_VAR 0 5
8736: PUSH
8737: LD_VAR 0 1
8741: PUSH
8742: FOR_IN
8743: IFFALSE 8791
// if GetSide ( unit ) = side and IsOK ( unit ) then
8745: LD_VAR 0 5
8749: PPUSH
8750: CALL_OW 255
8754: PUSH
8755: LD_VAR 0 3
8759: EQUAL
8760: PUSH
8761: LD_VAR 0 5
8765: PPUSH
8766: CALL_OW 302
8770: AND
8771: IFFALSE 8789
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8773: LD_ADDR_VAR 0 6
8777: PUSH
8778: LD_VAR 0 6
8782: PUSH
8783: LD_VAR 0 5
8787: ADD
8788: ST_TO_ADDR
8789: GO 8742
8791: POP
8792: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8793: LD_VAR 0 6
8797: PPUSH
8798: LD_EXP 31
8802: PUSH
8803: LD_VAR 0 2
8807: STR
8808: PPUSH
8809: CALL_OW 38
// end ;
8813: LD_VAR 0 4
8817: RET
// export function PlaceUnitsArea ( units , area , spawnMode ) ; var unit ; begin
8818: LD_INT 0
8820: PPUSH
8821: PPUSH
// for unit in units do
8822: LD_ADDR_VAR 0 5
8826: PUSH
8827: LD_VAR 0 1
8831: PUSH
8832: FOR_IN
8833: IFFALSE 8856
// PlaceUnitArea ( unit , area , spawnMode ) ;
8835: LD_VAR 0 5
8839: PPUSH
8840: LD_VAR 0 2
8844: PPUSH
8845: LD_VAR 0 3
8849: PPUSH
8850: CALL_OW 49
8854: GO 8832
8856: POP
8857: POP
// end ;
8858: LD_VAR 0 4
8862: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio , canTalkHero ) ; var i , speaker , units ; begin
8863: LD_INT 0
8865: PPUSH
8866: PPUSH
8867: PPUSH
8868: PPUSH
// units = characters ;
8869: LD_ADDR_VAR 0 9
8873: PUSH
8874: LD_VAR 0 1
8878: ST_TO_ADDR
// units := units diff [ Burlak , Karamazov , Petrovova , Gleb , Petrosyan , Titov , Dolgov , Lipshchin , Stevens ] ;
8879: LD_ADDR_VAR 0 9
8883: PUSH
8884: LD_VAR 0 9
8888: PUSH
8889: LD_EXP 40
8893: PUSH
8894: LD_EXP 41
8898: PUSH
8899: LD_EXP 42
8903: PUSH
8904: LD_EXP 43
8908: PUSH
8909: LD_EXP 44
8913: PUSH
8914: LD_EXP 45
8918: PUSH
8919: LD_EXP 46
8923: PUSH
8924: LD_EXP 47
8928: PUSH
8929: LD_EXP 58
8933: PUSH
8934: EMPTY
8935: LIST
8936: LIST
8937: LIST
8938: LIST
8939: LIST
8940: LIST
8941: LIST
8942: LIST
8943: LIST
8944: DIFF
8945: ST_TO_ADDR
// if not units and not canTalkHero then
8946: LD_VAR 0 9
8950: NOT
8951: PUSH
8952: LD_VAR 0 5
8956: NOT
8957: AND
8958: IFFALSE 8962
// exit ;
8960: GO 9141
// if not units then
8962: LD_VAR 0 9
8966: NOT
8967: IFFALSE 8994
// units = characters diff [ Burlak , Stevens ] ;
8969: LD_ADDR_VAR 0 9
8973: PUSH
8974: LD_VAR 0 1
8978: PUSH
8979: LD_EXP 40
8983: PUSH
8984: LD_EXP 58
8988: PUSH
8989: EMPTY
8990: LIST
8991: LIST
8992: DIFF
8993: ST_TO_ADDR
// if not units and canTalkHero then
8994: LD_VAR 0 9
8998: NOT
8999: PUSH
9000: LD_VAR 0 5
9004: AND
9005: IFFALSE 9009
// exit ;
9007: GO 9141
// speaker := units [ rand ( 1 , units ) ] ;
9009: LD_ADDR_VAR 0 8
9013: PUSH
9014: LD_VAR 0 9
9018: PUSH
9019: LD_INT 1
9021: PPUSH
9022: LD_VAR 0 9
9026: PPUSH
9027: CALL_OW 12
9031: ARRAY
9032: ST_TO_ADDR
// if radio then
9033: LD_VAR 0 4
9037: IFFALSE 9086
// begin if GetSex ( speaker ) = sex_male then
9039: LD_VAR 0 8
9043: PPUSH
9044: CALL_OW 258
9048: PUSH
9049: LD_INT 1
9051: EQUAL
9052: IFFALSE 9070
// SayRadio ( speaker , dialogMID ) else
9054: LD_VAR 0 8
9058: PPUSH
9059: LD_VAR 0 2
9063: PPUSH
9064: CALL_OW 94
9068: GO 9084
// SayRadio ( speaker , dialogFID ) ;
9070: LD_VAR 0 8
9074: PPUSH
9075: LD_VAR 0 3
9079: PPUSH
9080: CALL_OW 94
// end else
9084: GO 9131
// begin if GetSex ( speaker ) = sex_male then
9086: LD_VAR 0 8
9090: PPUSH
9091: CALL_OW 258
9095: PUSH
9096: LD_INT 1
9098: EQUAL
9099: IFFALSE 9117
// Say ( speaker , dialogMID ) else
9101: LD_VAR 0 8
9105: PPUSH
9106: LD_VAR 0 2
9110: PPUSH
9111: CALL_OW 88
9115: GO 9131
// Say ( speaker , dialogFID ) ;
9117: LD_VAR 0 8
9121: PPUSH
9122: LD_VAR 0 3
9126: PPUSH
9127: CALL_OW 88
// end ; result := speaker ;
9131: LD_ADDR_VAR 0 6
9135: PUSH
9136: LD_VAR 0 8
9140: ST_TO_ADDR
// end ;
9141: LD_VAR 0 6
9145: RET
// export function PlaceHumanInBunker ( un , bunker ) ; var dir ; begin
9146: LD_INT 0
9148: PPUSH
9149: PPUSH
// dir := GetDir ( bunker ) - 3 ;
9150: LD_ADDR_VAR 0 4
9154: PUSH
9155: LD_VAR 0 2
9159: PPUSH
9160: CALL_OW 254
9164: PUSH
9165: LD_INT 3
9167: MINUS
9168: ST_TO_ADDR
// if dir < 0 then
9169: LD_VAR 0 4
9173: PUSH
9174: LD_INT 0
9176: LESS
9177: IFFALSE 9193
// dir := 6 + dir ;
9179: LD_ADDR_VAR 0 4
9183: PUSH
9184: LD_INT 6
9186: PUSH
9187: LD_VAR 0 4
9191: PLUS
9192: ST_TO_ADDR
// SetDir ( un , dir ) ;
9193: LD_VAR 0 1
9197: PPUSH
9198: LD_VAR 0 4
9202: PPUSH
9203: CALL_OW 233
// PlaceHumanInUnit ( un , bunker ) ;
9207: LD_VAR 0 1
9211: PPUSH
9212: LD_VAR 0 2
9216: PPUSH
9217: CALL_OW 52
// result = un ;
9221: LD_ADDR_VAR 0 3
9225: PUSH
9226: LD_VAR 0 1
9230: ST_TO_ADDR
// end ;
9231: LD_VAR 0 3
9235: RET
// export function GetAvailableWeapons ( side , nation ) ; var i , resultWeapons , weaponTechs ; begin
9236: LD_INT 0
9238: PPUSH
9239: PPUSH
9240: PPUSH
9241: PPUSH
// weaponTechs = [ tech_AdvMet , tech_AdvRocket , tech_Flame , tech_Gatling , tech_Gun , tech_Lapser , tech_LasDouble , tech_Laser , tech_Rocket ] ;
9242: LD_ADDR_VAR 0 6
9246: PUSH
9247: LD_INT 34
9249: PUSH
9250: LD_INT 71
9252: PUSH
9253: LD_INT 70
9255: PUSH
9256: LD_INT 69
9258: PUSH
9259: LD_INT 39
9261: PUSH
9262: LD_INT 31
9264: PUSH
9265: LD_INT 14
9267: PUSH
9268: LD_INT 10
9270: PUSH
9271: LD_INT 40
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: ST_TO_ADDR
// resultWeapons = [ ] ;
9285: LD_ADDR_VAR 0 5
9289: PUSH
9290: EMPTY
9291: ST_TO_ADDR
// for i := 1 to weaponTechs do
9292: LD_ADDR_VAR 0 4
9296: PUSH
9297: DOUBLE
9298: LD_INT 1
9300: DEC
9301: ST_TO_ADDR
9302: LD_VAR 0 6
9306: PUSH
9307: FOR_TO
9308: IFFALSE 9495
// begin if TechNationAvailable ( weaponTechs [ i ] , nation ) and GetTech ( weaponTechs [ i ] , side ) = state_researched then
9310: LD_VAR 0 6
9314: PUSH
9315: LD_VAR 0 4
9319: ARRAY
9320: PPUSH
9321: LD_VAR 0 2
9325: PPUSH
9326: CALL_OW 482
9330: PUSH
9331: LD_VAR 0 6
9335: PUSH
9336: LD_VAR 0 4
9340: ARRAY
9341: PPUSH
9342: LD_VAR 0 1
9346: PPUSH
9347: CALL_OW 321
9351: PUSH
9352: LD_INT 2
9354: EQUAL
9355: AND
9356: IFFALSE 9493
// case nation of nation_american :
9358: LD_VAR 0 2
9362: PUSH
9363: LD_INT 1
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9406
9371: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_arabian :
9372: LD_ADDR_VAR 0 5
9376: PUSH
9377: LD_VAR 0 5
9381: PUSH
9382: LD_VAR 0 6
9386: PUSH
9387: LD_VAR 0 4
9391: ARRAY
9392: PPUSH
9393: LD_VAR 0 2
9397: PPUSH
9398: CALL 9512 0 2
9402: ADD
9403: ST_TO_ADDR
9404: GO 9493
9406: LD_INT 2
9408: DOUBLE
9409: EQUAL
9410: IFTRUE 9414
9412: GO 9449
9414: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; nation_russian :
9415: LD_ADDR_VAR 0 5
9419: PUSH
9420: LD_VAR 0 5
9424: PUSH
9425: LD_VAR 0 6
9429: PUSH
9430: LD_VAR 0 4
9434: ARRAY
9435: PPUSH
9436: LD_VAR 0 2
9440: PPUSH
9441: CALL 9512 0 2
9445: ADD
9446: ST_TO_ADDR
9447: GO 9493
9449: LD_INT 3
9451: DOUBLE
9452: EQUAL
9453: IFTRUE 9457
9455: GO 9492
9457: POP
// resultWeapons = resultWeapons ^ GetNationWeaponByTech ( weaponTechs [ i ] , nation ) ; end ;
9458: LD_ADDR_VAR 0 5
9462: PUSH
9463: LD_VAR 0 5
9467: PUSH
9468: LD_VAR 0 6
9472: PUSH
9473: LD_VAR 0 4
9477: ARRAY
9478: PPUSH
9479: LD_VAR 0 2
9483: PPUSH
9484: CALL 9512 0 2
9488: ADD
9489: ST_TO_ADDR
9490: GO 9493
9492: POP
// end ;
9493: GO 9307
9495: POP
9496: POP
// result = resultWeapons ;
9497: LD_ADDR_VAR 0 3
9501: PUSH
9502: LD_VAR 0 5
9506: ST_TO_ADDR
// end ;
9507: LD_VAR 0 3
9511: RET
// export function GetNationWeaponByTech ( tech , nation ) ; begin
9512: LD_INT 0
9514: PPUSH
// case tech of tech_AdvMet :
9515: LD_VAR 0 1
9519: PUSH
9520: LD_INT 34
9522: DOUBLE
9523: EQUAL
9524: IFTRUE 9528
9526: GO 9556
9528: POP
// result = [ us_heavy_gun ,  , ru_heavy_gun ] [ nation ] ; tech_AdvRocket :
9529: LD_ADDR_VAR 0 3
9533: PUSH
9534: LD_INT 6
9536: PUSH
9537: LD_STRING 
9539: PUSH
9540: LD_INT 46
9542: PUSH
9543: EMPTY
9544: LIST
9545: LIST
9546: LIST
9547: PUSH
9548: LD_VAR 0 2
9552: ARRAY
9553: ST_TO_ADDR
9554: GO 9845
9556: LD_INT 71
9558: DOUBLE
9559: EQUAL
9560: IFTRUE 9564
9562: GO 9592
9564: POP
// result = [  ,  , ru_rocket ] [ nation ] ; tech_Flame :
9565: LD_ADDR_VAR 0 3
9569: PUSH
9570: LD_STRING 
9572: PUSH
9573: LD_STRING 
9575: PUSH
9576: LD_INT 47
9578: PUSH
9579: EMPTY
9580: LIST
9581: LIST
9582: LIST
9583: PUSH
9584: LD_VAR 0 2
9588: ARRAY
9589: ST_TO_ADDR
9590: GO 9845
9592: LD_INT 70
9594: DOUBLE
9595: EQUAL
9596: IFTRUE 9600
9598: GO 9628
9600: POP
// result = [  , ar_flame_thrower ,  ] [ nation ] ; tech_Gatling :
9601: LD_ADDR_VAR 0 3
9605: PUSH
9606: LD_STRING 
9608: PUSH
9609: LD_INT 26
9611: PUSH
9612: LD_STRING 
9614: PUSH
9615: EMPTY
9616: LIST
9617: LIST
9618: LIST
9619: PUSH
9620: LD_VAR 0 2
9624: ARRAY
9625: ST_TO_ADDR
9626: GO 9845
9628: LD_INT 69
9630: DOUBLE
9631: EQUAL
9632: IFTRUE 9636
9634: GO 9664
9636: POP
// result = [ us_gatling_gun , ar_gatling_gun , ru_gatling_gun ] [ nation ] ; tech_Gun :
9637: LD_ADDR_VAR 0 3
9641: PUSH
9642: LD_INT 4
9644: PUSH
9645: LD_INT 25
9647: PUSH
9648: LD_INT 43
9650: PUSH
9651: EMPTY
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_VAR 0 2
9660: ARRAY
9661: ST_TO_ADDR
9662: GO 9845
9664: LD_INT 39
9666: DOUBLE
9667: EQUAL
9668: IFTRUE 9672
9670: GO 9700
9672: POP
// result = [ us_double_gun , ar_gun , ru_gun ] [ nation ] ; tech_Lapser :
9673: LD_ADDR_VAR 0 3
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: LD_INT 27
9683: PUSH
9684: LD_INT 44
9686: PUSH
9687: EMPTY
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: LD_VAR 0 2
9696: ARRAY
9697: ST_TO_ADDR
9698: GO 9845
9700: LD_INT 31
9702: DOUBLE
9703: EQUAL
9704: IFTRUE 9708
9706: GO 9736
9708: POP
// result = [  ,  , ru_time_lapser ] [ nation ] ; tech_LasDouble :
9709: LD_ADDR_VAR 0 3
9713: PUSH
9714: LD_STRING 
9716: PUSH
9717: LD_STRING 
9719: PUSH
9720: LD_INT 49
9722: PUSH
9723: EMPTY
9724: LIST
9725: LIST
9726: LIST
9727: PUSH
9728: LD_VAR 0 2
9732: ARRAY
9733: ST_TO_ADDR
9734: GO 9845
9736: LD_INT 14
9738: DOUBLE
9739: EQUAL
9740: IFTRUE 9744
9742: GO 9772
9744: POP
// result = [ us_double_laser ,  ,  ] [ nation ] ; tech_Laser :
9745: LD_ADDR_VAR 0 3
9749: PUSH
9750: LD_INT 10
9752: PUSH
9753: LD_STRING 
9755: PUSH
9756: LD_STRING 
9758: PUSH
9759: EMPTY
9760: LIST
9761: LIST
9762: LIST
9763: PUSH
9764: LD_VAR 0 2
9768: ARRAY
9769: ST_TO_ADDR
9770: GO 9845
9772: LD_INT 10
9774: DOUBLE
9775: EQUAL
9776: IFTRUE 9780
9778: GO 9808
9780: POP
// result = [ us_laser ,  ,  ] [ nation ] ; tech_Rocket :
9781: LD_ADDR_VAR 0 3
9785: PUSH
9786: LD_INT 9
9788: PUSH
9789: LD_STRING 
9791: PUSH
9792: LD_STRING 
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: LIST
9799: PUSH
9800: LD_VAR 0 2
9804: ARRAY
9805: ST_TO_ADDR
9806: GO 9845
9808: LD_INT 40
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 9844
9816: POP
// result = [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nation ] ; end ;
9817: LD_ADDR_VAR 0 3
9821: PUSH
9822: LD_INT 7
9824: PUSH
9825: LD_INT 28
9827: PUSH
9828: LD_INT 45
9830: PUSH
9831: EMPTY
9832: LIST
9833: LIST
9834: LIST
9835: PUSH
9836: LD_VAR 0 2
9840: ARRAY
9841: ST_TO_ADDR
9842: GO 9845
9844: POP
// end ;
9845: LD_VAR 0 3
9849: RET
// export function GetMultiCargo ( cargo_bay ) ; var i ; begin
9850: LD_INT 0
9852: PPUSH
9853: PPUSH
// result := [ GetCargo ( cargo_bay , mat_cans ) , GetCargo ( cargo_bay , mat_oil ) , GetCargo ( cargo_bay , mat_siberit ) ] ;
9854: LD_ADDR_VAR 0 2
9858: PUSH
9859: LD_VAR 0 1
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 289
9871: PUSH
9872: LD_VAR 0 1
9876: PPUSH
9877: LD_INT 2
9879: PPUSH
9880: CALL_OW 289
9884: PUSH
9885: LD_VAR 0 1
9889: PPUSH
9890: LD_INT 3
9892: PPUSH
9893: CALL_OW 289
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: ST_TO_ADDR
// end ; end_of_file
9903: LD_VAR 0 2
9907: RET
// on BuildingComplete ( building ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
9908: LD_VAR 0 1
9912: PPUSH
9913: CALL_OW 255
9917: PUSH
9918: LD_INT 3
9920: EQUAL
9921: PUSH
9922: LD_VAR 0 1
9926: PPUSH
9927: CALL_OW 266
9931: PUSH
9932: LD_INT 0
9934: EQUAL
9935: AND
9936: IFFALSE 9950
// SetBname ( building , bukharin ) ;
9938: LD_VAR 0 1
9942: PPUSH
9943: LD_STRING bukharin
9945: PPUSH
9946: CALL_OW 500
// if GetSide ( building ) = 3 and GetBTYpe ( building ) in [ b_lab , b_lab_basic , b_lab_full , b_lab_half ] and not buildedLab then
9950: LD_VAR 0 1
9954: PPUSH
9955: CALL_OW 255
9959: PUSH
9960: LD_INT 3
9962: EQUAL
9963: PUSH
9964: LD_VAR 0 1
9968: PPUSH
9969: CALL_OW 266
9973: PUSH
9974: LD_INT 6
9976: PUSH
9977: LD_INT 9
9979: PUSH
9980: LD_INT 8
9982: PUSH
9983: LD_INT 7
9985: PUSH
9986: EMPTY
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: IN
9992: AND
9993: PUSH
9994: LD_EXP 25
9998: NOT
9999: AND
10000: IFFALSE 10010
// buildedLab = true ;
10002: LD_ADDR_EXP 25
10006: PUSH
10007: LD_INT 1
10009: ST_TO_ADDR
// if GetSide ( building ) = 2 then
10010: LD_VAR 0 1
10014: PPUSH
10015: CALL_OW 255
10019: PUSH
10020: LD_INT 2
10022: EQUAL
10023: IFFALSE 10172
// begin if GetBType ( building ) = b_lab then
10025: LD_VAR 0 1
10029: PPUSH
10030: CALL_OW 266
10034: PUSH
10035: LD_INT 6
10037: EQUAL
10038: IFFALSE 10052
// ComUpgradeLab ( building , b_lab_weapon ) ;
10040: LD_VAR 0 1
10044: PPUSH
10045: LD_INT 10
10047: PPUSH
10048: CALL_OW 147
// if GetBType ( building ) = b_workshop then
10052: LD_VAR 0 1
10056: PPUSH
10057: CALL_OW 266
10061: PUSH
10062: LD_INT 2
10064: EQUAL
10065: IFFALSE 10076
// ComUpgrade ( building ) ;
10067: LD_VAR 0 1
10071: PPUSH
10072: CALL_OW 146
// if GetBType ( building ) = b_ext_gun then
10076: LD_VAR 0 1
10080: PPUSH
10081: CALL_OW 266
10085: PUSH
10086: LD_INT 17
10088: EQUAL
10089: IFFALSE 10172
// InitAIManager ( 2 , nation_arabian , arabianUnitsInBase , ArabianBaseArea , ArabianHealArea , ArabianParkingArea , ArabianDefenceArea , [ 2 , 2 , 3 , 3 ] [ Difficulty ] , 1 , [ 1 , 1 , 2 , 2 ] [ Difficulty ] , true ) ;
10091: LD_INT 2
10093: PPUSH
10094: LD_INT 2
10096: PPUSH
10097: LD_EXP 52
10101: PPUSH
10102: LD_INT 34
10104: PPUSH
10105: LD_INT 39
10107: PPUSH
10108: LD_INT 40
10110: PPUSH
10111: LD_INT 35
10113: PPUSH
10114: LD_INT 2
10116: PUSH
10117: LD_INT 2
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: LD_INT 3
10125: PUSH
10126: EMPTY
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: PUSH
10132: LD_OWVAR 67
10136: ARRAY
10137: PPUSH
10138: LD_INT 1
10140: PPUSH
10141: LD_INT 1
10143: PUSH
10144: LD_INT 1
10146: PUSH
10147: LD_INT 2
10149: PUSH
10150: LD_INT 2
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: PUSH
10159: LD_OWVAR 67
10163: ARRAY
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL 10988 0 11
// end ; end ;
10172: PPOPN 1
10174: END
// on ApemanTamed ( apeman , human ) do begin if GetSide ( human ) = 3 and GetNation ( human ) = 3 and not dial_tameApeBlocker then
10175: LD_VAR 0 2
10179: PPUSH
10180: CALL_OW 255
10184: PUSH
10185: LD_INT 3
10187: EQUAL
10188: PUSH
10189: LD_VAR 0 2
10193: PPUSH
10194: CALL_OW 248
10198: PUSH
10199: LD_INT 3
10201: EQUAL
10202: AND
10203: PUSH
10204: LD_EXP 10
10208: NOT
10209: AND
10210: IFFALSE 10221
// Dial_TameApe ( human ) ;
10212: LD_VAR 0 2
10216: PPUSH
10217: CALL 4491 0 1
// end ;
10221: PPOPN 2
10223: END
// on ResearchComplete ( research , building ) do begin if research = tech_apelang and GetSide ( building ) = 3 then
10224: LD_VAR 0 1
10228: PUSH
10229: LD_INT 1
10231: EQUAL
10232: PUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: CALL_OW 255
10242: PUSH
10243: LD_INT 3
10245: EQUAL
10246: AND
10247: IFFALSE 10253
// Dial_ResearchApeLang ;
10249: CALL 4380 0 0
// if research = tech_apepsych and GetSide ( building ) = 3 then
10253: LD_VAR 0 1
10257: PUSH
10258: LD_INT 2
10260: EQUAL
10261: PUSH
10262: LD_VAR 0 2
10266: PPUSH
10267: CALL_OW 255
10271: PUSH
10272: LD_INT 3
10274: EQUAL
10275: AND
10276: IFFALSE 10282
// Dial_ResearchApePsych ;
10278: CALL 4924 0 0
// if research = tech_apeagres and GetSide ( building ) = 3 then
10282: LD_VAR 0 1
10286: PUSH
10287: LD_INT 11
10289: EQUAL
10290: PUSH
10291: LD_VAR 0 2
10295: PPUSH
10296: CALL_OW 255
10300: PUSH
10301: LD_INT 3
10303: EQUAL
10304: AND
10305: IFFALSE 10311
// Dial_ResearchApeAgress ;
10307: CALL 5116 0 0
// end ;
10311: PPOPN 2
10313: END
// on EnterBuilding ( building , human ) do begin if GetSide ( human ) = 3 and GetClass ( human ) = class_apeman and ( GetBtype ( building ) = b_lab or GetBType ( building ) = b_lab_half ) and not dial_apeEnterLabBlocker then
10314: LD_VAR 0 2
10318: PPUSH
10319: CALL_OW 255
10323: PUSH
10324: LD_INT 3
10326: EQUAL
10327: PUSH
10328: LD_VAR 0 2
10332: PPUSH
10333: CALL_OW 257
10337: PUSH
10338: LD_INT 12
10340: EQUAL
10341: AND
10342: PUSH
10343: LD_VAR 0 1
10347: PPUSH
10348: CALL_OW 266
10352: PUSH
10353: LD_INT 6
10355: EQUAL
10356: PUSH
10357: LD_VAR 0 1
10361: PPUSH
10362: CALL_OW 266
10366: PUSH
10367: LD_INT 7
10369: EQUAL
10370: OR
10371: AND
10372: PUSH
10373: LD_EXP 11
10377: NOT
10378: AND
10379: IFFALSE 10385
// Dial_ApeEnterLab ;
10381: CALL 4712 0 0
// end ;
10385: PPOPN 2
10387: END
// on UnitGoesToRed ( unit ) do begin if unit in arabianPatrolVehicles then
10388: LD_VAR 0 1
10392: PUSH
10393: LD_EXP 53
10397: IN
10398: IFFALSE 10416
// arabianPatrolVehicles = arabianPatrolVehicles diff unit ;
10400: LD_ADDR_EXP 53
10404: PUSH
10405: LD_EXP 53
10409: PUSH
10410: LD_VAR 0 1
10414: DIFF
10415: ST_TO_ADDR
// if unit in arabianHovercrafts then
10416: LD_VAR 0 1
10420: PUSH
10421: LD_EXP 54
10425: IN
10426: IFFALSE 10444
// arabianHovercrafts = arabianHovercrafts diff unit ;
10428: LD_ADDR_EXP 54
10432: PUSH
10433: LD_EXP 54
10437: PUSH
10438: LD_VAR 0 1
10442: DIFF
10443: ST_TO_ADDR
// if unit in arabianPatrolTroops then
10444: LD_VAR 0 1
10448: PUSH
10449: LD_EXP 55
10453: IN
10454: IFFALSE 10472
// arabianPatrolTroops = arabianPatrolTroops diff unit ;
10456: LD_ADDR_EXP 55
10460: PUSH
10461: LD_EXP 55
10465: PUSH
10466: LD_VAR 0 1
10470: DIFF
10471: ST_TO_ADDR
// end ;
10472: PPOPN 1
10474: END
// on UnitDestroyed ( unit ) do begin if unit in arabianUnitsInBase then
10475: LD_VAR 0 1
10479: PUSH
10480: LD_EXP 52
10484: IN
10485: IFFALSE 10503
// arabianUnitsInBase = arabianUnitsInBase diff unit ;
10487: LD_ADDR_EXP 52
10491: PUSH
10492: LD_EXP 52
10496: PUSH
10497: LD_VAR 0 1
10501: DIFF
10502: ST_TO_ADDR
// if unit = Burlak then
10503: LD_VAR 0 1
10507: PUSH
10508: LD_EXP 40
10512: EQUAL
10513: IFFALSE 10519
// Lose_Burlak ;
10515: CALL 17396 0 0
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] ] ) < 6 then
10519: LD_INT 22
10521: PUSH
10522: LD_INT 3
10524: PUSH
10525: EMPTY
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 21
10531: PUSH
10532: LD_INT 1
10534: PUSH
10535: EMPTY
10536: LIST
10537: LIST
10538: PUSH
10539: LD_INT 23
10541: PUSH
10542: LD_INT 3
10544: PUSH
10545: EMPTY
10546: LIST
10547: LIST
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: LIST
10553: PPUSH
10554: CALL_OW 69
10558: PUSH
10559: LD_INT 6
10561: LESS
10562: IFFALSE 10568
// Lose_Survive ;
10564: CALL 17411 0 0
// if GetType ( unit ) = unit_vehicle and GetSide ( unit ) = 2 and GetChassis ( unit ) = ar_hovercraft then
10568: LD_VAR 0 1
10572: PPUSH
10573: CALL_OW 247
10577: PUSH
10578: LD_INT 2
10580: EQUAL
10581: PUSH
10582: LD_VAR 0 1
10586: PPUSH
10587: CALL_OW 255
10591: PUSH
10592: LD_INT 2
10594: EQUAL
10595: AND
10596: PUSH
10597: LD_VAR 0 1
10601: PPUSH
10602: CALL_OW 265
10606: PUSH
10607: LD_INT 11
10609: EQUAL
10610: AND
10611: IFFALSE 10627
// achievement_DestroyedHovercrafts = achievement_DestroyedHovercrafts + 1 ;
10613: LD_ADDR_EXP 26
10617: PUSH
10618: LD_EXP 26
10622: PUSH
10623: LD_INT 1
10625: PLUS
10626: ST_TO_ADDR
// end ;
10627: PPOPN 1
10629: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 6 or side1 = 6 and side2 = 3 ) and GetSide ( Stevens ) = 6 then
10630: LD_VAR 0 1
10634: PUSH
10635: LD_INT 3
10637: EQUAL
10638: PUSH
10639: LD_VAR 0 2
10643: PUSH
10644: LD_INT 6
10646: EQUAL
10647: AND
10648: PUSH
10649: LD_VAR 0 1
10653: PUSH
10654: LD_INT 6
10656: EQUAL
10657: PUSH
10658: LD_VAR 0 2
10662: PUSH
10663: LD_INT 3
10665: EQUAL
10666: AND
10667: OR
10668: PUSH
10669: LD_EXP 58
10673: PPUSH
10674: CALL_OW 255
10678: PUSH
10679: LD_INT 6
10681: EQUAL
10682: AND
10683: IFFALSE 10741
// begin stevensFollow = false ;
10685: LD_ADDR_EXP 15
10689: PUSH
10690: LD_INT 0
10692: ST_TO_ADDR
// stevensCanExitMap = true ;
10693: LD_ADDR_EXP 19
10697: PUSH
10698: LD_INT 1
10700: ST_TO_ADDR
// stevensWasInDepot = false ;
10701: LD_ADDR_EXP 18
10705: PUSH
10706: LD_INT 0
10708: ST_TO_ADDR
// stevensDepot = false ;
10709: LD_ADDR_EXP 17
10713: PUSH
10714: LD_INT 0
10716: ST_TO_ADDR
// SetSide ( Stevens , 1 ) ;
10717: LD_EXP 58
10721: PPUSH
10722: LD_INT 1
10724: PPUSH
10725: CALL_OW 235
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
10729: LD_EXP 58
10733: PPUSH
10734: LD_INT 37
10736: PPUSH
10737: CALL_OW 113
// end ; end ; end_of_file
10741: PPOPN 2
10743: END
// export function BuildBase ; var engs ; begin
10744: LD_INT 0
10746: PPUSH
10747: PPUSH
// engs = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , class_engineer ] ] ) ;
10748: LD_ADDR_VAR 0 2
10752: PUSH
10753: LD_INT 22
10755: PUSH
10756: LD_INT 2
10758: PUSH
10759: EMPTY
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 21
10765: PUSH
10766: LD_INT 1
10768: PUSH
10769: EMPTY
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 25
10775: PUSH
10776: LD_INT 2
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: EMPTY
10784: LIST
10785: LIST
10786: LIST
10787: PPUSH
10788: CALL_OW 69
10792: ST_TO_ADDR
// AddComBuild ( engs , b_armoury , 129 , 74 , 2 ) ;
10793: LD_VAR 0 2
10797: PPUSH
10798: LD_INT 4
10800: PPUSH
10801: LD_INT 129
10803: PPUSH
10804: LD_INT 74
10806: PPUSH
10807: LD_INT 2
10809: PPUSH
10810: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 128 , 53 , 2 ) ;
10814: LD_VAR 0 2
10818: PPUSH
10819: LD_INT 26
10821: PPUSH
10822: LD_INT 128
10824: PPUSH
10825: LD_INT 53
10827: PPUSH
10828: LD_INT 2
10830: PPUSH
10831: CALL_OW 205
// AddComBuild ( engs , b_oil_power , 127 , 56 , 1 ) ;
10835: LD_VAR 0 2
10839: PPUSH
10840: LD_INT 26
10842: PPUSH
10843: LD_INT 127
10845: PPUSH
10846: LD_INT 56
10848: PPUSH
10849: LD_INT 1
10851: PPUSH
10852: CALL_OW 205
// AddComBuild ( engs , b_lab , 138 , 78 , 5 ) ;
10856: LD_VAR 0 2
10860: PPUSH
10861: LD_INT 6
10863: PPUSH
10864: LD_INT 138
10866: PPUSH
10867: LD_INT 78
10869: PPUSH
10870: LD_INT 5
10872: PPUSH
10873: CALL_OW 205
// AddComBuild ( engs , b_workshop , 137 , 63 , 4 ) ;
10877: LD_VAR 0 2
10881: PPUSH
10882: LD_INT 2
10884: PPUSH
10885: LD_INT 137
10887: PPUSH
10888: LD_INT 63
10890: PPUSH
10891: LD_INT 4
10893: PPUSH
10894: CALL_OW 205
// AddComBuild ( engs , b_ext_stitch , 137 , 60 , 3 ) ;
10898: LD_VAR 0 2
10902: PPUSH
10903: LD_INT 23
10905: PPUSH
10906: LD_INT 137
10908: PPUSH
10909: LD_INT 60
10911: PPUSH
10912: LD_INT 3
10914: PPUSH
10915: CALL_OW 205
// AddComBuild ( engs , b_ext_track , 140 , 66 , 5 ) ;
10919: LD_VAR 0 2
10923: PPUSH
10924: LD_INT 16
10926: PPUSH
10927: LD_INT 140
10929: PPUSH
10930: LD_INT 66
10932: PPUSH
10933: LD_INT 5
10935: PPUSH
10936: CALL_OW 205
// AddComBuild ( engs , b_ext_gun , 133 , 59 , 2 ) ;
10940: LD_VAR 0 2
10944: PPUSH
10945: LD_INT 17
10947: PPUSH
10948: LD_INT 133
10950: PPUSH
10951: LD_INT 59
10953: PPUSH
10954: LD_INT 2
10956: PPUSH
10957: CALL_OW 205
// ComMoveXY ( [ mastodon , Omar ] , 128 , 66 ) ;
10961: LD_INT 1
10963: PUSH
10964: LD_EXP 51
10968: PUSH
10969: EMPTY
10970: LIST
10971: LIST
10972: PPUSH
10973: LD_INT 128
10975: PPUSH
10976: LD_INT 66
10978: PPUSH
10979: CALL_OW 111
// end ;
10983: LD_VAR 0 1
10987: RET
// export function InitAIManager ( side , nation , basePersonel , baseArea , healArea , parkingArea , defenceArea , vehiclesAmount , vehiclesToDefenceAmount , vehiclesToAttackAmount , canAttack ) ; var i , j , tmp , tmpState , unit , personel , soldiers , engineers , mechanics , scientists , vehicle , vehicles , vehicleInList , defenceUnits , offensiveUnits , offensiveReadyCounter , target1 , target2 , weapons , chassis , depot , factory , lab , bunkers , barracks , damageBuilding , damageUnit , emptyBunkers , enemyUnits , attackBuildings , enemyBuildings ; begin
10988: LD_INT 0
10990: PPUSH
10991: PPUSH
10992: PPUSH
10993: PPUSH
10994: PPUSH
10995: PPUSH
10996: PPUSH
10997: PPUSH
10998: PPUSH
10999: PPUSH
11000: PPUSH
11001: PPUSH
11002: PPUSH
11003: PPUSH
11004: PPUSH
11005: PPUSH
11006: PPUSH
11007: PPUSH
11008: PPUSH
11009: PPUSH
11010: PPUSH
11011: PPUSH
11012: PPUSH
11013: PPUSH
11014: PPUSH
11015: PPUSH
11016: PPUSH
11017: PPUSH
11018: PPUSH
11019: PPUSH
11020: PPUSH
11021: PPUSH
// personel = [ ] ;
11022: LD_ADDR_VAR 0 18
11026: PUSH
11027: EMPTY
11028: ST_TO_ADDR
// vehicles = [ ] ;
11029: LD_ADDR_VAR 0 24
11033: PUSH
11034: EMPTY
11035: ST_TO_ADDR
// for unit in basePersonel do
11036: LD_ADDR_VAR 0 17
11040: PUSH
11041: LD_VAR 0 3
11045: PUSH
11046: FOR_IN
11047: IFFALSE 11095
// personel = personel ^ [ [ unit , IsInUnit ( unit ) , IsOK ( unit ) ] ] ;
11049: LD_ADDR_VAR 0 18
11053: PUSH
11054: LD_VAR 0 18
11058: PUSH
11059: LD_VAR 0 17
11063: PUSH
11064: LD_VAR 0 17
11068: PPUSH
11069: CALL_OW 310
11073: PUSH
11074: LD_VAR 0 17
11078: PPUSH
11079: CALL_OW 302
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: ADD
11092: ST_TO_ADDR
11093: GO 11046
11095: POP
11096: POP
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
11097: LD_ADDR_VAR 0 23
11101: PUSH
11102: LD_VAR 0 4
11106: PPUSH
11107: LD_INT 22
11109: PUSH
11110: LD_VAR 0 1
11114: PUSH
11115: EMPTY
11116: LIST
11117: LIST
11118: PUSH
11119: LD_INT 21
11121: PUSH
11122: LD_INT 2
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: PUSH
11129: LD_INT 50
11131: PUSH
11132: EMPTY
11133: LIST
11134: PUSH
11135: LD_INT 3
11137: PUSH
11138: LD_INT 2
11140: PUSH
11141: LD_INT 31
11143: PUSH
11144: LD_INT 31
11146: PUSH
11147: EMPTY
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 34
11153: PUSH
11154: LD_INT 12
11156: PUSH
11157: EMPTY
11158: LIST
11159: LIST
11160: PUSH
11161: LD_INT 34
11163: PUSH
11164: LD_INT 51
11166: PUSH
11167: EMPTY
11168: LIST
11169: LIST
11170: PUSH
11171: LD_INT 34
11173: PUSH
11174: LD_INT 32
11176: PUSH
11177: EMPTY
11178: LIST
11179: LIST
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: PUSH
11188: EMPTY
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PPUSH
11198: CALL_OW 70
11202: PUSH
11203: LD_EXP 53
11207: DIFF
11208: PUSH
11209: FOR_IN
11210: IFFALSE 11258
// vehicles = vehicles ^ [ [ vehicle , IsInUnit ( vehicle ) , IsOK ( vehicle ) ] ] ;
11212: LD_ADDR_VAR 0 24
11216: PUSH
11217: LD_VAR 0 24
11221: PUSH
11222: LD_VAR 0 23
11226: PUSH
11227: LD_VAR 0 23
11231: PPUSH
11232: CALL_OW 310
11236: PUSH
11237: LD_VAR 0 23
11241: PPUSH
11242: CALL_OW 302
11246: PUSH
11247: EMPTY
11248: LIST
11249: LIST
11250: LIST
11251: PUSH
11252: EMPTY
11253: LIST
11254: ADD
11255: ST_TO_ADDR
11256: GO 11209
11258: POP
11259: POP
// repeat soldiers = [ ] ;
11260: LD_ADDR_VAR 0 19
11264: PUSH
11265: EMPTY
11266: ST_TO_ADDR
// engineers = [ ] ;
11267: LD_ADDR_VAR 0 20
11271: PUSH
11272: EMPTY
11273: ST_TO_ADDR
// mechanics = [ ] ;
11274: LD_ADDR_VAR 0 21
11278: PUSH
11279: EMPTY
11280: ST_TO_ADDR
// scientists = [ ] ;
11281: LD_ADDR_VAR 0 22
11285: PUSH
11286: EMPTY
11287: ST_TO_ADDR
// depot = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
11288: LD_ADDR_VAR 0 33
11292: PUSH
11293: LD_VAR 0 4
11297: PPUSH
11298: LD_INT 22
11300: PUSH
11301: LD_VAR 0 1
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: PUSH
11310: LD_INT 21
11312: PUSH
11313: LD_INT 3
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PUSH
11320: LD_INT 50
11322: PUSH
11323: EMPTY
11324: LIST
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 0
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 30
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: EMPTY
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: PPUSH
11360: CALL_OW 70
11364: ST_TO_ADDR
// factory = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ;
11365: LD_ADDR_VAR 0 34
11369: PUSH
11370: LD_VAR 0 4
11374: PPUSH
11375: LD_INT 22
11377: PUSH
11378: LD_VAR 0 1
11382: PUSH
11383: EMPTY
11384: LIST
11385: LIST
11386: PUSH
11387: LD_INT 21
11389: PUSH
11390: LD_INT 3
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 50
11399: PUSH
11400: EMPTY
11401: LIST
11402: PUSH
11403: LD_INT 2
11405: PUSH
11406: LD_INT 30
11408: PUSH
11409: LD_INT 2
11411: PUSH
11412: EMPTY
11413: LIST
11414: LIST
11415: PUSH
11416: LD_INT 30
11418: PUSH
11419: LD_INT 3
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: PPUSH
11437: CALL_OW 70
11441: ST_TO_ADDR
// lab = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
11442: LD_ADDR_VAR 0 35
11446: PUSH
11447: LD_VAR 0 4
11451: PPUSH
11452: LD_INT 22
11454: PUSH
11455: LD_VAR 0 1
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: PUSH
11464: LD_INT 21
11466: PUSH
11467: LD_INT 3
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: EMPTY
11478: LIST
11479: PUSH
11480: LD_INT 2
11482: PUSH
11483: LD_INT 30
11485: PUSH
11486: LD_INT 6
11488: PUSH
11489: EMPTY
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 7
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PUSH
11503: LD_INT 30
11505: PUSH
11506: LD_INT 8
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PPUSH
11525: CALL_OW 70
11529: ST_TO_ADDR
// bunkers = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ] ) ;
11530: LD_ADDR_VAR 0 36
11534: PUSH
11535: LD_VAR 0 4
11539: PPUSH
11540: LD_INT 22
11542: PUSH
11543: LD_VAR 0 1
11547: PUSH
11548: EMPTY
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 21
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: PUSH
11562: LD_INT 50
11564: PUSH
11565: EMPTY
11566: LIST
11567: PUSH
11568: LD_INT 2
11570: PUSH
11571: LD_INT 30
11573: PUSH
11574: LD_INT 31
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: PUSH
11581: LD_INT 30
11583: PUSH
11584: LD_INT 32
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: PUSH
11596: EMPTY
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 70
11606: ST_TO_ADDR
// barracks = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
11607: LD_ADDR_VAR 0 37
11611: PUSH
11612: LD_VAR 0 4
11616: PPUSH
11617: LD_INT 22
11619: PUSH
11620: LD_VAR 0 1
11624: PUSH
11625: EMPTY
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 21
11631: PUSH
11632: LD_INT 3
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: PUSH
11639: LD_INT 50
11641: PUSH
11642: EMPTY
11643: LIST
11644: PUSH
11645: LD_INT 2
11647: PUSH
11648: LD_INT 30
11650: PUSH
11651: LD_INT 4
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: PUSH
11658: LD_INT 30
11660: PUSH
11661: LD_INT 5
11663: PUSH
11664: EMPTY
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: EMPTY
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: PPUSH
11679: CALL_OW 70
11683: ST_TO_ADDR
// for i := 1 to personel do
11684: LD_ADDR_VAR 0 13
11688: PUSH
11689: DOUBLE
11690: LD_INT 1
11692: DEC
11693: ST_TO_ADDR
11694: LD_VAR 0 18
11698: PUSH
11699: FOR_TO
11700: IFFALSE 11906
// begin if GetLives ( personel [ i ] [ 1 ] ) = 1000 then
11702: LD_VAR 0 18
11706: PUSH
11707: LD_VAR 0 13
11711: ARRAY
11712: PUSH
11713: LD_INT 1
11715: ARRAY
11716: PPUSH
11717: CALL_OW 256
11721: PUSH
11722: LD_INT 1000
11724: EQUAL
11725: IFFALSE 11767
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 1 ) ;
11727: LD_ADDR_VAR 0 18
11731: PUSH
11732: LD_VAR 0 18
11736: PPUSH
11737: LD_VAR 0 13
11741: PUSH
11742: LD_VAR 0 18
11746: PUSH
11747: LD_VAR 0 13
11751: ARRAY
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: PPUSH
11757: LD_INT 1
11759: PPUSH
11760: CALL 26210 0 3
11764: ST_TO_ADDR
// end else
11765: GO 11854
// if GetLives ( personel [ i ] [ 1 ] ) <= 950 then
11767: LD_VAR 0 18
11771: PUSH
11772: LD_VAR 0 13
11776: ARRAY
11777: PUSH
11778: LD_INT 1
11780: ARRAY
11781: PPUSH
11782: CALL_OW 256
11786: PUSH
11787: LD_INT 950
11789: LESSEQUAL
11790: IFFALSE 11854
// begin personel = ReplaceIn ( personel , [ i , personel [ i ] ] , 0 ) ;
11792: LD_ADDR_VAR 0 18
11796: PUSH
11797: LD_VAR 0 18
11801: PPUSH
11802: LD_VAR 0 13
11806: PUSH
11807: LD_VAR 0 18
11811: PUSH
11812: LD_VAR 0 13
11816: ARRAY
11817: PUSH
11818: EMPTY
11819: LIST
11820: LIST
11821: PPUSH
11822: LD_INT 0
11824: PPUSH
11825: CALL 26210 0 3
11829: ST_TO_ADDR
// ComMoveToArea ( personel [ i ] [ 1 ] , healArea ) ;
11830: LD_VAR 0 18
11834: PUSH
11835: LD_VAR 0 13
11839: ARRAY
11840: PUSH
11841: LD_INT 1
11843: ARRAY
11844: PPUSH
11845: LD_VAR 0 5
11849: PPUSH
11850: CALL_OW 113
// end ; if GetLives ( personel [ i ] [ 1 ] ) < 250 then
11854: LD_VAR 0 18
11858: PUSH
11859: LD_VAR 0 13
11863: ARRAY
11864: PUSH
11865: LD_INT 1
11867: ARRAY
11868: PPUSH
11869: CALL_OW 256
11873: PUSH
11874: LD_INT 250
11876: LESS
11877: IFFALSE 11904
// personel = personel diff [ personel [ i ] ] ;
11879: LD_ADDR_VAR 0 18
11883: PUSH
11884: LD_VAR 0 18
11888: PUSH
11889: LD_VAR 0 18
11893: PUSH
11894: LD_VAR 0 13
11898: ARRAY
11899: PUSH
11900: EMPTY
11901: LIST
11902: DIFF
11903: ST_TO_ADDR
// end ;
11904: GO 11699
11906: POP
11907: POP
// for i := 1 to vehicles do
11908: LD_ADDR_VAR 0 13
11912: PUSH
11913: DOUBLE
11914: LD_INT 1
11916: DEC
11917: ST_TO_ADDR
11918: LD_VAR 0 24
11922: PUSH
11923: FOR_TO
11924: IFFALSE 12310
// begin if GetFuel ( vehicles [ i ] [ 1 ] ) < 50 then
11926: LD_VAR 0 24
11930: PUSH
11931: LD_VAR 0 13
11935: ARRAY
11936: PUSH
11937: LD_INT 1
11939: ARRAY
11940: PPUSH
11941: CALL_OW 261
11945: PUSH
11946: LD_INT 50
11948: LESS
11949: IFFALSE 11973
// SetFuel ( vehicles [ i ] [ 1 ] , 100 ) ;
11951: LD_VAR 0 24
11955: PUSH
11956: LD_VAR 0 13
11960: ARRAY
11961: PUSH
11962: LD_INT 1
11964: ARRAY
11965: PPUSH
11966: LD_INT 100
11968: PPUSH
11969: CALL_OW 240
// if GetLives ( vehicles [ i ] [ 1 ] ) = 1000 then
11973: LD_VAR 0 24
11977: PUSH
11978: LD_VAR 0 13
11982: ARRAY
11983: PUSH
11984: LD_INT 1
11986: ARRAY
11987: PPUSH
11988: CALL_OW 256
11992: PUSH
11993: LD_INT 1000
11995: EQUAL
11996: IFFALSE 12171
// begin if GetControl ( vehicles [ i ] [ 1 ] ) = control_manual then
11998: LD_VAR 0 24
12002: PUSH
12003: LD_VAR 0 13
12007: ARRAY
12008: PUSH
12009: LD_INT 1
12011: ARRAY
12012: PPUSH
12013: CALL_OW 263
12017: PUSH
12018: LD_INT 1
12020: EQUAL
12021: IFFALSE 12079
// if not IsInUnit ( vehicles [ i ] [ 2 ] ) then
12023: LD_VAR 0 24
12027: PUSH
12028: LD_VAR 0 13
12032: ARRAY
12033: PUSH
12034: LD_INT 2
12036: ARRAY
12037: PPUSH
12038: CALL_OW 310
12042: NOT
12043: IFFALSE 12079
// ComEnterUnit ( vehicles [ i ] [ 2 ] , vehicles [ i ] [ 1 ] ) ;
12045: LD_VAR 0 24
12049: PUSH
12050: LD_VAR 0 13
12054: ARRAY
12055: PUSH
12056: LD_INT 2
12058: ARRAY
12059: PPUSH
12060: LD_VAR 0 24
12064: PUSH
12065: LD_VAR 0 13
12069: ARRAY
12070: PUSH
12071: LD_INT 1
12073: ARRAY
12074: PPUSH
12075: CALL_OW 120
// if offensiveunits < vehiclesToAttackAmount then
12079: LD_VAR 0 27
12083: PUSH
12084: LD_VAR 0 10
12088: LESS
12089: IFFALSE 12131
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 3 ) else
12091: LD_ADDR_VAR 0 24
12095: PUSH
12096: LD_VAR 0 24
12100: PPUSH
12101: LD_VAR 0 13
12105: PUSH
12106: LD_VAR 0 24
12110: PUSH
12111: LD_VAR 0 13
12115: ARRAY
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: PPUSH
12121: LD_INT 3
12123: PPUSH
12124: CALL 26210 0 3
12128: ST_TO_ADDR
12129: GO 12169
// vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 2 ) ;
12131: LD_ADDR_VAR 0 24
12135: PUSH
12136: LD_VAR 0 24
12140: PPUSH
12141: LD_VAR 0 13
12145: PUSH
12146: LD_VAR 0 24
12150: PUSH
12151: LD_VAR 0 13
12155: ARRAY
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PPUSH
12161: LD_INT 2
12163: PPUSH
12164: CALL 26210 0 3
12168: ST_TO_ADDR
// end else
12169: GO 12258
// if GetLives ( vehicles [ i ] [ 1 ] ) <= 650 then
12171: LD_VAR 0 24
12175: PUSH
12176: LD_VAR 0 13
12180: ARRAY
12181: PUSH
12182: LD_INT 1
12184: ARRAY
12185: PPUSH
12186: CALL_OW 256
12190: PUSH
12191: LD_INT 650
12193: LESSEQUAL
12194: IFFALSE 12258
// begin vehicles = ReplaceIn ( vehicles , [ i , vehicles [ i ] ] , 0 ) ;
12196: LD_ADDR_VAR 0 24
12200: PUSH
12201: LD_VAR 0 24
12205: PPUSH
12206: LD_VAR 0 13
12210: PUSH
12211: LD_VAR 0 24
12215: PUSH
12216: LD_VAR 0 13
12220: ARRAY
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: PPUSH
12226: LD_INT 0
12228: PPUSH
12229: CALL 26210 0 3
12233: ST_TO_ADDR
// ComMoveToArea ( vehicles [ i ] [ 1 ] , parkingArea ) ;
12234: LD_VAR 0 24
12238: PUSH
12239: LD_VAR 0 13
12243: ARRAY
12244: PUSH
12245: LD_INT 1
12247: ARRAY
12248: PPUSH
12249: LD_VAR 0 6
12253: PPUSH
12254: CALL_OW 113
// end ; if GetLives ( vehicles [ i ] [ 1 ] ) < 250 then
12258: LD_VAR 0 24
12262: PUSH
12263: LD_VAR 0 13
12267: ARRAY
12268: PUSH
12269: LD_INT 1
12271: ARRAY
12272: PPUSH
12273: CALL_OW 256
12277: PUSH
12278: LD_INT 250
12280: LESS
12281: IFFALSE 12308
// vehicles = vehicles diff [ vehicles [ i ] ] ;
12283: LD_ADDR_VAR 0 24
12287: PUSH
12288: LD_VAR 0 24
12292: PUSH
12293: LD_VAR 0 24
12297: PUSH
12298: LD_VAR 0 13
12302: ARRAY
12303: PUSH
12304: EMPTY
12305: LIST
12306: DIFF
12307: ST_TO_ADDR
// end ;
12308: GO 11923
12310: POP
12311: POP
// for i := 1 to personel do
12312: LD_ADDR_VAR 0 13
12316: PUSH
12317: DOUBLE
12318: LD_INT 1
12320: DEC
12321: ST_TO_ADDR
12322: LD_VAR 0 18
12326: PUSH
12327: FOR_TO
12328: IFFALSE 12369
// soldiers = soldiers ^ UnitFilter ( personel [ i ] , [ f_class , class_soldier ] ) ;
12330: LD_ADDR_VAR 0 19
12334: PUSH
12335: LD_VAR 0 19
12339: PUSH
12340: LD_VAR 0 18
12344: PUSH
12345: LD_VAR 0 13
12349: ARRAY
12350: PPUSH
12351: LD_INT 25
12353: PUSH
12354: LD_INT 1
12356: PUSH
12357: EMPTY
12358: LIST
12359: LIST
12360: PPUSH
12361: CALL_OW 72
12365: ADD
12366: ST_TO_ADDR
12367: GO 12327
12369: POP
12370: POP
// if soldiers and UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) then
12371: LD_VAR 0 19
12375: PUSH
12376: LD_VAR 0 36
12380: PPUSH
12381: LD_INT 3
12383: PUSH
12384: LD_INT 59
12386: PUSH
12387: EMPTY
12388: LIST
12389: PUSH
12390: EMPTY
12391: LIST
12392: LIST
12393: PPUSH
12394: CALL_OW 72
12398: AND
12399: IFFALSE 12687
// begin for i := 1 to personel do
12401: LD_ADDR_VAR 0 13
12405: PUSH
12406: DOUBLE
12407: LD_INT 1
12409: DEC
12410: ST_TO_ADDR
12411: LD_VAR 0 18
12415: PUSH
12416: FOR_TO
12417: IFFALSE 12683
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 then
12419: LD_VAR 0 18
12423: PUSH
12424: LD_VAR 0 13
12428: ARRAY
12429: PUSH
12430: LD_INT 1
12432: ARRAY
12433: PPUSH
12434: CALL_OW 257
12438: PUSH
12439: LD_INT 1
12441: EQUAL
12442: PUSH
12443: LD_VAR 0 18
12447: PUSH
12448: LD_VAR 0 13
12452: ARRAY
12453: PUSH
12454: LD_INT 3
12456: ARRAY
12457: PUSH
12458: LD_INT 1
12460: EQUAL
12461: AND
12462: IFFALSE 12681
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
12464: LD_VAR 0 18
12468: PUSH
12469: LD_VAR 0 13
12473: ARRAY
12474: PUSH
12475: LD_INT 1
12477: ARRAY
12478: PPUSH
12479: CALL_OW 437
12483: IFFALSE 12584
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e and GetBType ( GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 4 ] ) in [ b_armoury , b_barracks ] then
12485: LD_VAR 0 18
12489: PUSH
12490: LD_VAR 0 13
12494: ARRAY
12495: PUSH
12496: LD_INT 1
12498: ARRAY
12499: PPUSH
12500: CALL_OW 437
12504: PUSH
12505: LD_INT 1
12507: ARRAY
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: PUSH
12513: LD_STRING e
12515: EQUAL
12516: PUSH
12517: LD_VAR 0 18
12521: PUSH
12522: LD_VAR 0 13
12526: ARRAY
12527: PUSH
12528: LD_INT 1
12530: ARRAY
12531: PPUSH
12532: CALL_OW 437
12536: PUSH
12537: LD_INT 1
12539: ARRAY
12540: PUSH
12541: LD_INT 4
12543: ARRAY
12544: PPUSH
12545: CALL_OW 266
12549: PUSH
12550: LD_INT 4
12552: PUSH
12553: LD_INT 5
12555: PUSH
12556: EMPTY
12557: LIST
12558: LIST
12559: IN
12560: AND
12561: IFFALSE 12584
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
12563: LD_VAR 0 18
12567: PUSH
12568: LD_VAR 0 13
12572: ARRAY
12573: PUSH
12574: LD_INT 1
12576: ARRAY
12577: PPUSH
12578: EMPTY
12579: PPUSH
12580: CALL_OW 446
// for emptyBunkers in UnitFilter ( bunkers , [ f_not , [ f_occupied ] ] ) do
12584: LD_ADDR_VAR 0 40
12588: PUSH
12589: LD_VAR 0 36
12593: PPUSH
12594: LD_INT 3
12596: PUSH
12597: LD_INT 59
12599: PUSH
12600: EMPTY
12601: LIST
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: PPUSH
12607: CALL_OW 72
12611: PUSH
12612: FOR_IN
12613: IFFALSE 12679
// if not GetBType ( IsInUnit ( personel [ i ] [ 1 ] ) ) in [ b_breastwork , b_bunker ] then
12615: LD_VAR 0 18
12619: PUSH
12620: LD_VAR 0 13
12624: ARRAY
12625: PUSH
12626: LD_INT 1
12628: ARRAY
12629: PPUSH
12630: CALL_OW 310
12634: PPUSH
12635: CALL_OW 266
12639: PUSH
12640: LD_INT 31
12642: PUSH
12643: LD_INT 32
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: IN
12650: NOT
12651: IFFALSE 12677
// ComEnterUnit ( personel [ i ] [ 1 ] , emptyBunkers ) ;
12653: LD_VAR 0 18
12657: PUSH
12658: LD_VAR 0 13
12662: ARRAY
12663: PUSH
12664: LD_INT 1
12666: ARRAY
12667: PPUSH
12668: LD_VAR 0 40
12672: PPUSH
12673: CALL_OW 120
12677: GO 12612
12679: POP
12680: POP
// end ; end ;
12681: GO 12416
12683: POP
12684: POP
// end else
12685: GO 12902
// if soldiers and barracks then
12687: LD_VAR 0 19
12691: PUSH
12692: LD_VAR 0 37
12696: AND
12697: IFFALSE 12902
// for i := 1 to personel do
12699: LD_ADDR_VAR 0 13
12703: PUSH
12704: DOUBLE
12705: LD_INT 1
12707: DEC
12708: ST_TO_ADDR
12709: LD_VAR 0 18
12713: PUSH
12714: FOR_TO
12715: IFFALSE 12900
// if GetClass ( personel [ i ] [ 1 ] ) = class_soldier and personel [ i ] [ 3 ] = 1 and UnitFilter ( personel [ i ] [ 1 ] , [ f_outside ] ) then
12717: LD_VAR 0 18
12721: PUSH
12722: LD_VAR 0 13
12726: ARRAY
12727: PUSH
12728: LD_INT 1
12730: ARRAY
12731: PPUSH
12732: CALL_OW 257
12736: PUSH
12737: LD_INT 1
12739: EQUAL
12740: PUSH
12741: LD_VAR 0 18
12745: PUSH
12746: LD_VAR 0 13
12750: ARRAY
12751: PUSH
12752: LD_INT 3
12754: ARRAY
12755: PUSH
12756: LD_INT 1
12758: EQUAL
12759: AND
12760: PUSH
12761: LD_VAR 0 18
12765: PUSH
12766: LD_VAR 0 13
12770: ARRAY
12771: PUSH
12772: LD_INT 1
12774: ARRAY
12775: PPUSH
12776: LD_INT 56
12778: PUSH
12779: EMPTY
12780: LIST
12781: PPUSH
12782: CALL_OW 72
12786: AND
12787: IFFALSE 12898
// begin if not personel [ i ] [ 2 ] then
12789: LD_VAR 0 18
12793: PUSH
12794: LD_VAR 0 13
12798: ARRAY
12799: PUSH
12800: LD_INT 2
12802: ARRAY
12803: NOT
12804: IFFALSE 12864
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , barracks [ rand ( 1 , barracks ) ] ) ;
12806: LD_ADDR_VAR 0 18
12810: PUSH
12811: LD_VAR 0 18
12815: PPUSH
12816: LD_VAR 0 13
12820: PUSH
12821: LD_VAR 0 18
12825: PUSH
12826: LD_VAR 0 13
12830: ARRAY
12831: PUSH
12832: LD_INT 1
12834: MINUS
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PPUSH
12840: LD_VAR 0 37
12844: PUSH
12845: LD_INT 1
12847: PPUSH
12848: LD_VAR 0 37
12852: PPUSH
12853: CALL_OW 12
12857: ARRAY
12858: PPUSH
12859: CALL 26210 0 3
12863: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
12864: LD_VAR 0 18
12868: PUSH
12869: LD_VAR 0 13
12873: ARRAY
12874: PUSH
12875: LD_INT 1
12877: ARRAY
12878: PPUSH
12879: LD_VAR 0 18
12883: PUSH
12884: LD_VAR 0 13
12888: ARRAY
12889: PUSH
12890: LD_INT 2
12892: ARRAY
12893: PPUSH
12894: CALL_OW 120
// end ;
12898: GO 12714
12900: POP
12901: POP
// for i := 1 to personel do
12902: LD_ADDR_VAR 0 13
12906: PUSH
12907: DOUBLE
12908: LD_INT 1
12910: DEC
12911: ST_TO_ADDR
12912: LD_VAR 0 18
12916: PUSH
12917: FOR_TO
12918: IFFALSE 12959
// engineers = engineers ^ UnitFilter ( personel [ i ] , [ f_class , class_engineer ] ) ;
12920: LD_ADDR_VAR 0 20
12924: PUSH
12925: LD_VAR 0 20
12929: PUSH
12930: LD_VAR 0 18
12934: PUSH
12935: LD_VAR 0 13
12939: ARRAY
12940: PPUSH
12941: LD_INT 25
12943: PUSH
12944: LD_INT 2
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: PPUSH
12951: CALL_OW 72
12955: ADD
12956: ST_TO_ADDR
12957: GO 12917
12959: POP
12960: POP
// if engineers and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
12961: LD_VAR 0 20
12965: PUSH
12966: LD_VAR 0 4
12970: PPUSH
12971: LD_INT 22
12973: PUSH
12974: LD_VAR 0 1
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 21
12985: PUSH
12986: LD_INT 3
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 3
12995: PUSH
12996: LD_INT 24
12998: PUSH
12999: LD_INT 1000
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: PPUSH
13015: CALL_OW 70
13019: AND
13020: IFFALSE 13296
// begin for i := 1 to personel do
13022: LD_ADDR_VAR 0 13
13026: PUSH
13027: DOUBLE
13028: LD_INT 1
13030: DEC
13031: ST_TO_ADDR
13032: LD_VAR 0 18
13036: PUSH
13037: FOR_TO
13038: IFFALSE 13292
// if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13040: LD_VAR 0 18
13044: PUSH
13045: LD_VAR 0 13
13049: ARRAY
13050: PUSH
13051: LD_INT 1
13053: ARRAY
13054: PPUSH
13055: CALL_OW 257
13059: PUSH
13060: LD_INT 2
13062: EQUAL
13063: PUSH
13064: LD_VAR 0 18
13068: PUSH
13069: LD_VAR 0 13
13073: ARRAY
13074: PUSH
13075: LD_INT 3
13077: ARRAY
13078: PUSH
13079: LD_INT 1
13081: EQUAL
13082: AND
13083: IFFALSE 13290
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13085: LD_VAR 0 18
13089: PUSH
13090: LD_VAR 0 13
13094: ARRAY
13095: PUSH
13096: LD_INT 1
13098: ARRAY
13099: PPUSH
13100: CALL_OW 437
13104: IFFALSE 13160
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13106: LD_VAR 0 18
13110: PUSH
13111: LD_VAR 0 13
13115: ARRAY
13116: PUSH
13117: LD_INT 1
13119: ARRAY
13120: PPUSH
13121: CALL_OW 437
13125: PUSH
13126: LD_INT 1
13128: ARRAY
13129: PUSH
13130: LD_INT 1
13132: ARRAY
13133: PUSH
13134: LD_STRING e
13136: EQUAL
13137: IFFALSE 13160
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13139: LD_VAR 0 18
13143: PUSH
13144: LD_VAR 0 13
13148: ARRAY
13149: PUSH
13150: LD_INT 1
13152: ARRAY
13153: PPUSH
13154: EMPTY
13155: PPUSH
13156: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13160: LD_VAR 0 18
13164: PUSH
13165: LD_VAR 0 13
13169: ARRAY
13170: PUSH
13171: LD_INT 1
13173: ARRAY
13174: PPUSH
13175: CALL_OW 310
13179: IFFALSE 13200
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
13181: LD_VAR 0 18
13185: PUSH
13186: LD_VAR 0 13
13190: ARRAY
13191: PUSH
13192: LD_INT 1
13194: ARRAY
13195: PPUSH
13196: CALL_OW 122
// for damageBuilding in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13200: LD_ADDR_VAR 0 38
13204: PUSH
13205: LD_VAR 0 4
13209: PPUSH
13210: LD_INT 22
13212: PUSH
13213: LD_VAR 0 1
13217: PUSH
13218: EMPTY
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 21
13224: PUSH
13225: LD_INT 3
13227: PUSH
13228: EMPTY
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 3
13234: PUSH
13235: LD_INT 24
13237: PUSH
13238: LD_INT 1000
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PUSH
13249: EMPTY
13250: LIST
13251: LIST
13252: LIST
13253: PPUSH
13254: CALL_OW 70
13258: PUSH
13259: FOR_IN
13260: IFFALSE 13288
// AddComRepairBuilding ( personel [ i ] [ 1 ] , damageBuilding ) ;
13262: LD_VAR 0 18
13266: PUSH
13267: LD_VAR 0 13
13271: ARRAY
13272: PUSH
13273: LD_INT 1
13275: ARRAY
13276: PPUSH
13277: LD_VAR 0 38
13281: PPUSH
13282: CALL_OW 190
13286: GO 13259
13288: POP
13289: POP
// end ;
13290: GO 13037
13292: POP
13293: POP
// end else
13294: GO 13558
// if engineers and UnitFilter ( engineers , [ f_outside ] ) and depot then
13296: LD_VAR 0 20
13300: PUSH
13301: LD_VAR 0 20
13305: PPUSH
13306: LD_INT 56
13308: PUSH
13309: EMPTY
13310: LIST
13311: PPUSH
13312: CALL_OW 72
13316: AND
13317: PUSH
13318: LD_VAR 0 33
13322: AND
13323: IFFALSE 13558
// for i := 1 to personel do
13325: LD_ADDR_VAR 0 13
13329: PUSH
13330: DOUBLE
13331: LD_INT 1
13333: DEC
13334: ST_TO_ADDR
13335: LD_VAR 0 18
13339: PUSH
13340: FOR_TO
13341: IFFALSE 13556
// begin if GetClass ( personel [ i ] [ 1 ] ) = class_engineer and personel [ i ] [ 3 ] = 1 then
13343: LD_VAR 0 18
13347: PUSH
13348: LD_VAR 0 13
13352: ARRAY
13353: PUSH
13354: LD_INT 1
13356: ARRAY
13357: PPUSH
13358: CALL_OW 257
13362: PUSH
13363: LD_INT 2
13365: EQUAL
13366: PUSH
13367: LD_VAR 0 18
13371: PUSH
13372: LD_VAR 0 13
13376: ARRAY
13377: PUSH
13378: LD_INT 3
13380: ARRAY
13381: PUSH
13382: LD_INT 1
13384: EQUAL
13385: AND
13386: IFFALSE 13554
// begin if not personel [ i ] [ 2 ] then
13388: LD_VAR 0 18
13392: PUSH
13393: LD_VAR 0 13
13397: ARRAY
13398: PUSH
13399: LD_INT 2
13401: ARRAY
13402: NOT
13403: IFFALSE 13520
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_building ] , [ f_ok ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) [ 1 ] ) ;
13405: LD_ADDR_VAR 0 18
13409: PUSH
13410: LD_VAR 0 18
13414: PPUSH
13415: LD_VAR 0 13
13419: PUSH
13420: LD_VAR 0 18
13424: PUSH
13425: LD_VAR 0 13
13429: ARRAY
13430: PUSH
13431: LD_INT 1
13433: MINUS
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: PPUSH
13439: LD_VAR 0 4
13443: PPUSH
13444: LD_INT 22
13446: PUSH
13447: LD_VAR 0 1
13451: PUSH
13452: EMPTY
13453: LIST
13454: LIST
13455: PUSH
13456: LD_INT 21
13458: PUSH
13459: LD_INT 3
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 50
13468: PUSH
13469: EMPTY
13470: LIST
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: LD_INT 30
13477: PUSH
13478: LD_INT 0
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 30
13487: PUSH
13488: LD_INT 1
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: PPUSH
13506: CALL_OW 70
13510: PUSH
13511: LD_INT 1
13513: ARRAY
13514: PPUSH
13515: CALL 26210 0 3
13519: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
13520: LD_VAR 0 18
13524: PUSH
13525: LD_VAR 0 13
13529: ARRAY
13530: PUSH
13531: LD_INT 1
13533: ARRAY
13534: PPUSH
13535: LD_VAR 0 18
13539: PUSH
13540: LD_VAR 0 13
13544: ARRAY
13545: PUSH
13546: LD_INT 2
13548: ARRAY
13549: PPUSH
13550: CALL_OW 120
// end ; end ;
13554: GO 13340
13556: POP
13557: POP
// for i := 1 to personel do
13558: LD_ADDR_VAR 0 13
13562: PUSH
13563: DOUBLE
13564: LD_INT 1
13566: DEC
13567: ST_TO_ADDR
13568: LD_VAR 0 18
13572: PUSH
13573: FOR_TO
13574: IFFALSE 13615
// mechanics = mechanics ^ UnitFilter ( personel [ i ] , [ f_class , class_mechanic ] ) ;
13576: LD_ADDR_VAR 0 21
13580: PUSH
13581: LD_VAR 0 21
13585: PUSH
13586: LD_VAR 0 18
13590: PUSH
13591: LD_VAR 0 13
13595: ARRAY
13596: PPUSH
13597: LD_INT 25
13599: PUSH
13600: LD_INT 3
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PPUSH
13607: CALL_OW 72
13611: ADD
13612: ST_TO_ADDR
13613: GO 13573
13615: POP
13616: POP
// if mechanics and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
13617: LD_VAR 0 21
13621: PUSH
13622: LD_VAR 0 4
13626: PPUSH
13627: LD_INT 22
13629: PUSH
13630: LD_VAR 0 1
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 21
13641: PUSH
13642: LD_INT 2
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 3
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 1000
13657: PUSH
13658: EMPTY
13659: LIST
13660: LIST
13661: PUSH
13662: EMPTY
13663: LIST
13664: LIST
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: PPUSH
13671: CALL_OW 70
13675: AND
13676: IFFALSE 14110
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
13678: LD_ADDR_VAR 0 39
13682: PUSH
13683: LD_VAR 0 4
13687: PPUSH
13688: LD_INT 22
13690: PUSH
13691: LD_VAR 0 1
13695: PUSH
13696: EMPTY
13697: LIST
13698: LIST
13699: PUSH
13700: LD_INT 21
13702: PUSH
13703: LD_INT 2
13705: PUSH
13706: EMPTY
13707: LIST
13708: LIST
13709: PUSH
13710: LD_INT 3
13712: PUSH
13713: LD_INT 24
13715: PUSH
13716: LD_INT 1000
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PUSH
13727: EMPTY
13728: LIST
13729: LIST
13730: LIST
13731: PPUSH
13732: CALL_OW 70
13736: PUSH
13737: FOR_IN
13738: IFFALSE 14106
// begin if GetDistUnitArea ( damageUnit , parkingArea ) < 5 then
13740: LD_VAR 0 39
13744: PPUSH
13745: LD_VAR 0 6
13749: PPUSH
13750: CALL_OW 299
13754: PUSH
13755: LD_INT 5
13757: LESS
13758: IFFALSE 14104
// begin for i := 1 to vehicles do
13760: LD_ADDR_VAR 0 13
13764: PUSH
13765: DOUBLE
13766: LD_INT 1
13768: DEC
13769: ST_TO_ADDR
13770: LD_VAR 0 24
13774: PUSH
13775: FOR_TO
13776: IFFALSE 13845
// begin if vehicles [ i ] [ 1 ] = damageUnit then
13778: LD_VAR 0 24
13782: PUSH
13783: LD_VAR 0 13
13787: ARRAY
13788: PUSH
13789: LD_INT 1
13791: ARRAY
13792: PUSH
13793: LD_VAR 0 39
13797: EQUAL
13798: IFFALSE 13819
// ComExitVehicle ( vehicles [ i ] [ 2 ] ) ;
13800: LD_VAR 0 24
13804: PUSH
13805: LD_VAR 0 13
13809: ARRAY
13810: PUSH
13811: LD_INT 2
13813: ARRAY
13814: PPUSH
13815: CALL_OW 121
// AddComRepairVehicle ( vehicles [ i ] [ 2 ] , damageUnit ) ;
13819: LD_VAR 0 24
13823: PUSH
13824: LD_VAR 0 13
13828: ARRAY
13829: PUSH
13830: LD_INT 2
13832: ARRAY
13833: PPUSH
13834: LD_VAR 0 39
13838: PPUSH
13839: CALL_OW 189
// end ;
13843: GO 13775
13845: POP
13846: POP
// for i := 1 to personel do
13847: LD_ADDR_VAR 0 13
13851: PUSH
13852: DOUBLE
13853: LD_INT 1
13855: DEC
13856: ST_TO_ADDR
13857: LD_VAR 0 18
13861: PUSH
13862: FOR_TO
13863: IFFALSE 14102
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
13865: LD_VAR 0 18
13869: PUSH
13870: LD_VAR 0 13
13874: ARRAY
13875: PUSH
13876: LD_INT 1
13878: ARRAY
13879: PPUSH
13880: CALL_OW 257
13884: PUSH
13885: LD_INT 3
13887: EQUAL
13888: PUSH
13889: LD_VAR 0 18
13893: PUSH
13894: LD_VAR 0 13
13898: ARRAY
13899: PUSH
13900: LD_INT 3
13902: ARRAY
13903: PUSH
13904: LD_INT 1
13906: EQUAL
13907: AND
13908: IFFALSE 14100
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
13910: LD_VAR 0 18
13914: PUSH
13915: LD_VAR 0 13
13919: ARRAY
13920: PUSH
13921: LD_INT 1
13923: ARRAY
13924: PPUSH
13925: CALL_OW 437
13929: IFFALSE 13985
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
13931: LD_VAR 0 18
13935: PUSH
13936: LD_VAR 0 13
13940: ARRAY
13941: PUSH
13942: LD_INT 1
13944: ARRAY
13945: PPUSH
13946: CALL_OW 437
13950: PUSH
13951: LD_INT 1
13953: ARRAY
13954: PUSH
13955: LD_INT 1
13957: ARRAY
13958: PUSH
13959: LD_STRING e
13961: EQUAL
13962: IFFALSE 13985
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
13964: LD_VAR 0 18
13968: PUSH
13969: LD_VAR 0 13
13973: ARRAY
13974: PUSH
13975: LD_INT 1
13977: ARRAY
13978: PPUSH
13979: EMPTY
13980: PPUSH
13981: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
13985: LD_VAR 0 18
13989: PUSH
13990: LD_VAR 0 13
13994: ARRAY
13995: PUSH
13996: LD_INT 1
13998: ARRAY
13999: PPUSH
14000: CALL_OW 310
14004: IFFALSE 14025
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14006: LD_VAR 0 18
14010: PUSH
14011: LD_VAR 0 13
14015: ARRAY
14016: PUSH
14017: LD_INT 1
14019: ARRAY
14020: PPUSH
14021: CALL_OW 122
// if not IsInArea ( personel [ i ] [ 1 ] , baseArea ) then
14025: LD_VAR 0 18
14029: PUSH
14030: LD_VAR 0 13
14034: ARRAY
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: LD_VAR 0 4
14044: PPUSH
14045: CALL_OW 308
14049: NOT
14050: IFFALSE 14076
// ComMoveToArea ( personel [ i ] [ 1 ] , baseArea ) ;
14052: LD_VAR 0 18
14056: PUSH
14057: LD_VAR 0 13
14061: ARRAY
14062: PUSH
14063: LD_INT 1
14065: ARRAY
14066: PPUSH
14067: LD_VAR 0 4
14071: PPUSH
14072: CALL_OW 113
// AddComRepairVehicle ( personel [ i ] [ 1 ] , damageUnit ) ;
14076: LD_VAR 0 18
14080: PUSH
14081: LD_VAR 0 13
14085: ARRAY
14086: PUSH
14087: LD_INT 1
14089: ARRAY
14090: PPUSH
14091: LD_VAR 0 39
14095: PPUSH
14096: CALL_OW 189
// end ;
14100: GO 13862
14102: POP
14103: POP
// end ; end ;
14104: GO 13737
14106: POP
14107: POP
// end else
14108: GO 14315
// if mechanics and UnitFilter ( mechanics , [ f_outside ] ) and factory then
14110: LD_VAR 0 21
14114: PUSH
14115: LD_VAR 0 21
14119: PPUSH
14120: LD_INT 56
14122: PUSH
14123: EMPTY
14124: LIST
14125: PPUSH
14126: CALL_OW 72
14130: AND
14131: PUSH
14132: LD_VAR 0 34
14136: AND
14137: IFFALSE 14315
// for i := 1 to personel do
14139: LD_ADDR_VAR 0 13
14143: PUSH
14144: DOUBLE
14145: LD_INT 1
14147: DEC
14148: ST_TO_ADDR
14149: LD_VAR 0 18
14153: PUSH
14154: FOR_TO
14155: IFFALSE 14313
// if GetClass ( personel [ i ] [ 1 ] ) = class_mechanic and personel [ i ] [ 3 ] = 1 then
14157: LD_VAR 0 18
14161: PUSH
14162: LD_VAR 0 13
14166: ARRAY
14167: PUSH
14168: LD_INT 1
14170: ARRAY
14171: PPUSH
14172: CALL_OW 257
14176: PUSH
14177: LD_INT 3
14179: EQUAL
14180: PUSH
14181: LD_VAR 0 18
14185: PUSH
14186: LD_VAR 0 13
14190: ARRAY
14191: PUSH
14192: LD_INT 3
14194: ARRAY
14195: PUSH
14196: LD_INT 1
14198: EQUAL
14199: AND
14200: IFFALSE 14311
// begin if not personel [ i ] [ 2 ] then
14202: LD_VAR 0 18
14206: PUSH
14207: LD_VAR 0 13
14211: ARRAY
14212: PUSH
14213: LD_INT 2
14215: ARRAY
14216: NOT
14217: IFFALSE 14277
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , factory [ rand ( 1 , factory ) ] ) ;
14219: LD_ADDR_VAR 0 18
14223: PUSH
14224: LD_VAR 0 18
14228: PPUSH
14229: LD_VAR 0 13
14233: PUSH
14234: LD_VAR 0 18
14238: PUSH
14239: LD_VAR 0 13
14243: ARRAY
14244: PUSH
14245: LD_INT 1
14247: MINUS
14248: PUSH
14249: EMPTY
14250: LIST
14251: LIST
14252: PPUSH
14253: LD_VAR 0 34
14257: PUSH
14258: LD_INT 1
14260: PPUSH
14261: LD_VAR 0 34
14265: PPUSH
14266: CALL_OW 12
14270: ARRAY
14271: PPUSH
14272: CALL 26210 0 3
14276: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
14277: LD_VAR 0 18
14281: PUSH
14282: LD_VAR 0 13
14286: ARRAY
14287: PUSH
14288: LD_INT 1
14290: ARRAY
14291: PPUSH
14292: LD_VAR 0 18
14296: PUSH
14297: LD_VAR 0 13
14301: ARRAY
14302: PUSH
14303: LD_INT 2
14305: ARRAY
14306: PPUSH
14307: CALL_OW 120
// end ;
14311: GO 14154
14313: POP
14314: POP
// for i := 1 to personel do
14315: LD_ADDR_VAR 0 13
14319: PUSH
14320: DOUBLE
14321: LD_INT 1
14323: DEC
14324: ST_TO_ADDR
14325: LD_VAR 0 18
14329: PUSH
14330: FOR_TO
14331: IFFALSE 14372
// scientists = scientists ^ UnitFilter ( personel [ i ] , [ f_class , class_scientistic ] ) ;
14333: LD_ADDR_VAR 0 22
14337: PUSH
14338: LD_VAR 0 22
14342: PUSH
14343: LD_VAR 0 18
14347: PUSH
14348: LD_VAR 0 13
14352: ARRAY
14353: PPUSH
14354: LD_INT 25
14356: PUSH
14357: LD_INT 4
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: PPUSH
14364: CALL_OW 72
14368: ADD
14369: ST_TO_ADDR
14370: GO 14330
14372: POP
14373: POP
// if scientists and FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) then
14374: LD_VAR 0 22
14378: PUSH
14379: LD_VAR 0 4
14383: PPUSH
14384: LD_INT 22
14386: PUSH
14387: LD_VAR 0 1
14391: PUSH
14392: EMPTY
14393: LIST
14394: LIST
14395: PUSH
14396: LD_INT 21
14398: PUSH
14399: LD_INT 1
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: LD_INT 3
14408: PUSH
14409: LD_INT 24
14411: PUSH
14412: LD_INT 1000
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: LIST
14427: PPUSH
14428: CALL_OW 70
14432: AND
14433: IFFALSE 14950
// begin for damageUnit in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_lives , 1000 ] ] ] ) do
14435: LD_ADDR_VAR 0 39
14439: PUSH
14440: LD_VAR 0 4
14444: PPUSH
14445: LD_INT 22
14447: PUSH
14448: LD_VAR 0 1
14452: PUSH
14453: EMPTY
14454: LIST
14455: LIST
14456: PUSH
14457: LD_INT 21
14459: PUSH
14460: LD_INT 1
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PUSH
14467: LD_INT 3
14469: PUSH
14470: LD_INT 24
14472: PUSH
14473: LD_INT 1000
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: LIST
14488: PPUSH
14489: CALL_OW 70
14493: PUSH
14494: FOR_IN
14495: IFFALSE 14946
// begin if GetDistUnitArea ( damageUnit , healArea ) < 5 then
14497: LD_VAR 0 39
14501: PPUSH
14502: LD_VAR 0 5
14506: PPUSH
14507: CALL_OW 299
14511: PUSH
14512: LD_INT 5
14514: LESS
14515: IFFALSE 14723
// for i := 1 to personel do
14517: LD_ADDR_VAR 0 13
14521: PUSH
14522: DOUBLE
14523: LD_INT 1
14525: DEC
14526: ST_TO_ADDR
14527: LD_VAR 0 18
14531: PUSH
14532: FOR_TO
14533: IFFALSE 14721
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14535: LD_VAR 0 18
14539: PUSH
14540: LD_VAR 0 13
14544: ARRAY
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PPUSH
14550: CALL_OW 257
14554: PUSH
14555: LD_INT 4
14557: EQUAL
14558: PUSH
14559: LD_VAR 0 18
14563: PUSH
14564: LD_VAR 0 13
14568: ARRAY
14569: PUSH
14570: LD_INT 3
14572: ARRAY
14573: PUSH
14574: LD_INT 1
14576: EQUAL
14577: AND
14578: IFFALSE 14719
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14580: LD_VAR 0 18
14584: PUSH
14585: LD_VAR 0 13
14589: ARRAY
14590: PUSH
14591: LD_INT 1
14593: ARRAY
14594: PPUSH
14595: CALL_OW 437
14599: IFFALSE 14655
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14601: LD_VAR 0 18
14605: PUSH
14606: LD_VAR 0 13
14610: ARRAY
14611: PUSH
14612: LD_INT 1
14614: ARRAY
14615: PPUSH
14616: CALL_OW 437
14620: PUSH
14621: LD_INT 1
14623: ARRAY
14624: PUSH
14625: LD_INT 1
14627: ARRAY
14628: PUSH
14629: LD_STRING e
14631: EQUAL
14632: IFFALSE 14655
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14634: LD_VAR 0 18
14638: PUSH
14639: LD_VAR 0 13
14643: ARRAY
14644: PUSH
14645: LD_INT 1
14647: ARRAY
14648: PPUSH
14649: EMPTY
14650: PPUSH
14651: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14655: LD_VAR 0 18
14659: PUSH
14660: LD_VAR 0 13
14664: ARRAY
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PPUSH
14670: CALL_OW 310
14674: IFFALSE 14695
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14676: LD_VAR 0 18
14680: PUSH
14681: LD_VAR 0 13
14685: ARRAY
14686: PUSH
14687: LD_INT 1
14689: ARRAY
14690: PPUSH
14691: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14695: LD_VAR 0 18
14699: PUSH
14700: LD_VAR 0 13
14704: ARRAY
14705: PUSH
14706: LD_INT 1
14708: ARRAY
14709: PPUSH
14710: LD_VAR 0 39
14714: PPUSH
14715: CALL_OW 188
// end ;
14719: GO 14532
14721: POP
14722: POP
// if GetLives ( damageUnit ) < 250 then
14723: LD_VAR 0 39
14727: PPUSH
14728: CALL_OW 256
14732: PUSH
14733: LD_INT 250
14735: LESS
14736: IFFALSE 14944
// for i := 1 to personel do
14738: LD_ADDR_VAR 0 13
14742: PUSH
14743: DOUBLE
14744: LD_INT 1
14746: DEC
14747: ST_TO_ADDR
14748: LD_VAR 0 18
14752: PUSH
14753: FOR_TO
14754: IFFALSE 14942
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14756: LD_VAR 0 18
14760: PUSH
14761: LD_VAR 0 13
14765: ARRAY
14766: PUSH
14767: LD_INT 1
14769: ARRAY
14770: PPUSH
14771: CALL_OW 257
14775: PUSH
14776: LD_INT 4
14778: EQUAL
14779: PUSH
14780: LD_VAR 0 18
14784: PUSH
14785: LD_VAR 0 13
14789: ARRAY
14790: PUSH
14791: LD_INT 3
14793: ARRAY
14794: PUSH
14795: LD_INT 1
14797: EQUAL
14798: AND
14799: IFFALSE 14940
// begin if GetTaskList ( personel [ i ] [ 1 ] ) then
14801: LD_VAR 0 18
14805: PUSH
14806: LD_VAR 0 13
14810: ARRAY
14811: PUSH
14812: LD_INT 1
14814: ARRAY
14815: PPUSH
14816: CALL_OW 437
14820: IFFALSE 14876
// if GetTaskList ( personel [ i ] [ 1 ] ) [ 1 ] [ 1 ] = e then
14822: LD_VAR 0 18
14826: PUSH
14827: LD_VAR 0 13
14831: ARRAY
14832: PUSH
14833: LD_INT 1
14835: ARRAY
14836: PPUSH
14837: CALL_OW 437
14841: PUSH
14842: LD_INT 1
14844: ARRAY
14845: PUSH
14846: LD_INT 1
14848: ARRAY
14849: PUSH
14850: LD_STRING e
14852: EQUAL
14853: IFFALSE 14876
// SetTaskList ( personel [ i ] [ 1 ] , [ ] ) ;
14855: LD_VAR 0 18
14859: PUSH
14860: LD_VAR 0 13
14864: ARRAY
14865: PUSH
14866: LD_INT 1
14868: ARRAY
14869: PPUSH
14870: EMPTY
14871: PPUSH
14872: CALL_OW 446
// if IsInUnit ( personel [ i ] [ 1 ] ) then
14876: LD_VAR 0 18
14880: PUSH
14881: LD_VAR 0 13
14885: ARRAY
14886: PUSH
14887: LD_INT 1
14889: ARRAY
14890: PPUSH
14891: CALL_OW 310
14895: IFFALSE 14916
// ComExitBuilding ( personel [ i ] [ 1 ] ) ;
14897: LD_VAR 0 18
14901: PUSH
14902: LD_VAR 0 13
14906: ARRAY
14907: PUSH
14908: LD_INT 1
14910: ARRAY
14911: PPUSH
14912: CALL_OW 122
// AddComHeal ( personel [ i ] [ 1 ] , damageUnit ) ;
14916: LD_VAR 0 18
14920: PUSH
14921: LD_VAR 0 13
14925: ARRAY
14926: PUSH
14927: LD_INT 1
14929: ARRAY
14930: PPUSH
14931: LD_VAR 0 39
14935: PPUSH
14936: CALL_OW 188
// end ;
14940: GO 14753
14942: POP
14943: POP
// end ;
14944: GO 14494
14946: POP
14947: POP
// end else
14948: GO 15155
// if scientists and UnitFilter ( scientists , [ f_outside ] ) and lab then
14950: LD_VAR 0 22
14954: PUSH
14955: LD_VAR 0 22
14959: PPUSH
14960: LD_INT 56
14962: PUSH
14963: EMPTY
14964: LIST
14965: PPUSH
14966: CALL_OW 72
14970: AND
14971: PUSH
14972: LD_VAR 0 35
14976: AND
14977: IFFALSE 15155
// for i := 1 to personel do
14979: LD_ADDR_VAR 0 13
14983: PUSH
14984: DOUBLE
14985: LD_INT 1
14987: DEC
14988: ST_TO_ADDR
14989: LD_VAR 0 18
14993: PUSH
14994: FOR_TO
14995: IFFALSE 15153
// if GetClass ( personel [ i ] [ 1 ] ) = class_scientistic and personel [ i ] [ 3 ] = 1 then
14997: LD_VAR 0 18
15001: PUSH
15002: LD_VAR 0 13
15006: ARRAY
15007: PUSH
15008: LD_INT 1
15010: ARRAY
15011: PPUSH
15012: CALL_OW 257
15016: PUSH
15017: LD_INT 4
15019: EQUAL
15020: PUSH
15021: LD_VAR 0 18
15025: PUSH
15026: LD_VAR 0 13
15030: ARRAY
15031: PUSH
15032: LD_INT 3
15034: ARRAY
15035: PUSH
15036: LD_INT 1
15038: EQUAL
15039: AND
15040: IFFALSE 15151
// begin if not personel [ i ] [ 2 ] then
15042: LD_VAR 0 18
15046: PUSH
15047: LD_VAR 0 13
15051: ARRAY
15052: PUSH
15053: LD_INT 2
15055: ARRAY
15056: NOT
15057: IFFALSE 15117
// personel = ReplaceIn ( personel , [ i , personel [ i ] - 1 ] , lab [ rand ( 1 , lab ) ] ) ;
15059: LD_ADDR_VAR 0 18
15063: PUSH
15064: LD_VAR 0 18
15068: PPUSH
15069: LD_VAR 0 13
15073: PUSH
15074: LD_VAR 0 18
15078: PUSH
15079: LD_VAR 0 13
15083: ARRAY
15084: PUSH
15085: LD_INT 1
15087: MINUS
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PPUSH
15093: LD_VAR 0 35
15097: PUSH
15098: LD_INT 1
15100: PPUSH
15101: LD_VAR 0 35
15105: PPUSH
15106: CALL_OW 12
15110: ARRAY
15111: PPUSH
15112: CALL 26210 0 3
15116: ST_TO_ADDR
// ComEnterUnit ( personel [ i ] [ 1 ] , personel [ i ] [ 2 ] ) ;
15117: LD_VAR 0 18
15121: PUSH
15122: LD_VAR 0 13
15126: ARRAY
15127: PUSH
15128: LD_INT 1
15130: ARRAY
15131: PPUSH
15132: LD_VAR 0 18
15136: PUSH
15137: LD_VAR 0 13
15141: ARRAY
15142: PUSH
15143: LD_INT 2
15145: ARRAY
15146: PPUSH
15147: CALL_OW 120
// end ;
15151: GO 14994
15153: POP
15154: POP
// wait ( 0 0$01 ) ;
15155: LD_INT 35
15157: PPUSH
15158: CALL_OW 67
// if vehicles < vehiclesAmount and factory then
15162: LD_VAR 0 24
15166: PUSH
15167: LD_VAR 0 8
15171: LESS
15172: PUSH
15173: LD_VAR 0 34
15177: AND
15178: IFFALSE 15424
// begin tmp = vehiclesAmount - vehicles ;
15180: LD_ADDR_VAR 0 15
15184: PUSH
15185: LD_VAR 0 8
15189: PUSH
15190: LD_VAR 0 24
15194: MINUS
15195: ST_TO_ADDR
// weapons = GetAvailableWeapons ( side , nation ) ;
15196: LD_ADDR_VAR 0 31
15200: PUSH
15201: LD_VAR 0 1
15205: PPUSH
15206: LD_VAR 0 2
15210: PPUSH
15211: CALL 9236 0 2
15215: ST_TO_ADDR
// for i := 1 to tmp do
15216: LD_ADDR_VAR 0 13
15220: PUSH
15221: DOUBLE
15222: LD_INT 1
15224: DEC
15225: ST_TO_ADDR
15226: LD_VAR 0 15
15230: PUSH
15231: FOR_TO
15232: IFFALSE 15420
// begin tmp = weapons [ rand ( 1 , weapons ) ] ;
15234: LD_ADDR_VAR 0 15
15238: PUSH
15239: LD_VAR 0 31
15243: PUSH
15244: LD_INT 1
15246: PPUSH
15247: LD_VAR 0 31
15251: PPUSH
15252: CALL_OW 12
15256: ARRAY
15257: ST_TO_ADDR
// if tmp then
15258: LD_VAR 0 15
15262: IFFALSE 15418
// begin if tmp in [ 34 , 14 , 71 ] then
15264: LD_VAR 0 15
15268: PUSH
15269: LD_INT 34
15271: PUSH
15272: LD_INT 14
15274: PUSH
15275: LD_INT 71
15277: PUSH
15278: EMPTY
15279: LIST
15280: LIST
15281: LIST
15282: IN
15283: IFFALSE 15321
// chassis = [ [ us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_heavy_tracked ] ] [ nation ] else
15285: LD_ADDR_VAR 0 32
15289: PUSH
15290: LD_INT 4
15292: PUSH
15293: EMPTY
15294: LIST
15295: PUSH
15296: LD_INT 14
15298: PUSH
15299: EMPTY
15300: LIST
15301: PUSH
15302: LD_INT 24
15304: PUSH
15305: EMPTY
15306: LIST
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: LIST
15312: PUSH
15313: LD_VAR 0 2
15317: ARRAY
15318: ST_TO_ADDR
15319: GO 15375
// chassis = [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked ] , [ ar_half_tracked ] , [ ru_medium_wheeled , ru_heavy_wheeled , ru_heavy_tracked , ru_medium_tracked ] ] [ nation ] ;
15321: LD_ADDR_VAR 0 32
15325: PUSH
15326: LD_INT 2
15328: PUSH
15329: LD_INT 3
15331: PUSH
15332: LD_INT 4
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: PUSH
15340: LD_INT 14
15342: PUSH
15343: EMPTY
15344: LIST
15345: PUSH
15346: LD_INT 21
15348: PUSH
15349: LD_INT 23
15351: PUSH
15352: LD_INT 24
15354: PUSH
15355: LD_INT 22
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: LIST
15362: LIST
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: LIST
15368: PUSH
15369: LD_VAR 0 2
15373: ARRAY
15374: ST_TO_ADDR
// AddComConstruct ( factory [ 1 ] , chassis [ rand ( 1 , chassis ) ] , engine_combustion , control_manual , tmp ) ;
15375: LD_VAR 0 34
15379: PUSH
15380: LD_INT 1
15382: ARRAY
15383: PPUSH
15384: LD_VAR 0 32
15388: PUSH
15389: LD_INT 1
15391: PPUSH
15392: LD_VAR 0 32
15396: PPUSH
15397: CALL_OW 12
15401: ARRAY
15402: PPUSH
15403: LD_INT 1
15405: PPUSH
15406: LD_INT 1
15408: PPUSH
15409: LD_VAR 0 15
15413: PPUSH
15414: CALL_OW 185
// end ; end ;
15418: GO 15231
15420: POP
15421: POP
// end else
15422: GO 15437
// ComCancel ( factory [ 1 ] ) ;
15424: LD_VAR 0 34
15428: PUSH
15429: LD_INT 1
15431: ARRAY
15432: PPUSH
15433: CALL_OW 127
// for vehicle in FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_not , [ f_or , [ f_chassis , 31 ] , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ] ) diff arabianPatrolVehicles do
15437: LD_ADDR_VAR 0 23
15441: PUSH
15442: LD_VAR 0 4
15446: PPUSH
15447: LD_INT 22
15449: PUSH
15450: LD_VAR 0 1
15454: PUSH
15455: EMPTY
15456: LIST
15457: LIST
15458: PUSH
15459: LD_INT 21
15461: PUSH
15462: LD_INT 2
15464: PUSH
15465: EMPTY
15466: LIST
15467: LIST
15468: PUSH
15469: LD_INT 50
15471: PUSH
15472: EMPTY
15473: LIST
15474: PUSH
15475: LD_INT 3
15477: PUSH
15478: LD_INT 2
15480: PUSH
15481: LD_INT 31
15483: PUSH
15484: LD_INT 31
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: PUSH
15491: LD_INT 34
15493: PUSH
15494: LD_INT 12
15496: PUSH
15497: EMPTY
15498: LIST
15499: LIST
15500: PUSH
15501: LD_INT 34
15503: PUSH
15504: LD_INT 51
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: PUSH
15511: LD_INT 34
15513: PUSH
15514: LD_INT 32
15516: PUSH
15517: EMPTY
15518: LIST
15519: LIST
15520: PUSH
15521: EMPTY
15522: LIST
15523: LIST
15524: LIST
15525: LIST
15526: LIST
15527: PUSH
15528: EMPTY
15529: LIST
15530: LIST
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: PPUSH
15538: CALL_OW 70
15542: PUSH
15543: LD_EXP 53
15547: DIFF
15548: PUSH
15549: FOR_IN
15550: IFFALSE 15713
// begin vehicleInList = false ;
15552: LD_ADDR_VAR 0 25
15556: PUSH
15557: LD_INT 0
15559: ST_TO_ADDR
// for i := 1 to vehicles do
15560: LD_ADDR_VAR 0 13
15564: PUSH
15565: DOUBLE
15566: LD_INT 1
15568: DEC
15569: ST_TO_ADDR
15570: LD_VAR 0 24
15574: PUSH
15575: FOR_TO
15576: IFFALSE 15606
// begin if vehicle in vehicles [ i ] then
15578: LD_VAR 0 23
15582: PUSH
15583: LD_VAR 0 24
15587: PUSH
15588: LD_VAR 0 13
15592: ARRAY
15593: IN
15594: IFFALSE 15604
// vehicleInList = true ;
15596: LD_ADDR_VAR 0 25
15600: PUSH
15601: LD_INT 1
15603: ST_TO_ADDR
// end ;
15604: GO 15575
15606: POP
15607: POP
// if not vehicleInList then
15608: LD_VAR 0 25
15612: NOT
15613: IFFALSE 15711
// if vehicles < vehiclesToAttackAmount then
15615: LD_VAR 0 24
15619: PUSH
15620: LD_VAR 0 10
15624: LESS
15625: IFFALSE 15670
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 3 ] ] else
15627: LD_ADDR_VAR 0 24
15631: PUSH
15632: LD_VAR 0 24
15636: PUSH
15637: LD_VAR 0 23
15641: PUSH
15642: LD_VAR 0 23
15646: PPUSH
15647: CALL_OW 313
15651: PUSH
15652: LD_INT 1
15654: ARRAY
15655: PUSH
15656: LD_INT 3
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: LIST
15663: PUSH
15664: EMPTY
15665: LIST
15666: ADD
15667: ST_TO_ADDR
15668: GO 15711
// vehicles = vehicles ^ [ [ vehicle , UnitsInside ( vehicle ) [ 1 ] , 2 ] ] ;
15670: LD_ADDR_VAR 0 24
15674: PUSH
15675: LD_VAR 0 24
15679: PUSH
15680: LD_VAR 0 23
15684: PUSH
15685: LD_VAR 0 23
15689: PPUSH
15690: CALL_OW 313
15694: PUSH
15695: LD_INT 1
15697: ARRAY
15698: PUSH
15699: LD_INT 2
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: ADD
15710: ST_TO_ADDR
// end ;
15711: GO 15549
15713: POP
15714: POP
// for enemyUnits in FilterAllUnits ( [ f_enemy , side ] ) do
15715: LD_ADDR_VAR 0 41
15719: PUSH
15720: LD_INT 81
15722: PUSH
15723: LD_VAR 0 1
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PPUSH
15732: CALL_OW 69
15736: PUSH
15737: FOR_IN
15738: IFFALSE 16220
// begin offensiveUnits = [ ] ;
15740: LD_ADDR_VAR 0 27
15744: PUSH
15745: EMPTY
15746: ST_TO_ADDR
// offensiveReadyCounter = 0 ;
15747: LD_ADDR_VAR 0 28
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// for i := 1 to vehicles do
15755: LD_ADDR_VAR 0 13
15759: PUSH
15760: DOUBLE
15761: LD_INT 1
15763: DEC
15764: ST_TO_ADDR
15765: LD_VAR 0 24
15769: PUSH
15770: FOR_TO
15771: IFFALSE 15952
// if vehicles [ i ] [ 3 ] = 3 then
15773: LD_VAR 0 24
15777: PUSH
15778: LD_VAR 0 13
15782: ARRAY
15783: PUSH
15784: LD_INT 3
15786: ARRAY
15787: PUSH
15788: LD_INT 3
15790: EQUAL
15791: IFFALSE 15950
// begin if GetLives ( vehicles [ i ] [ 1 ] ) > 650 then
15793: LD_VAR 0 24
15797: PUSH
15798: LD_VAR 0 13
15802: ARRAY
15803: PUSH
15804: LD_INT 1
15806: ARRAY
15807: PPUSH
15808: CALL_OW 256
15812: PUSH
15813: LD_INT 650
15815: GREATER
15816: IFFALSE 15832
// offensiveReadyCounter = offensiveReadyCounter + 1 ;
15818: LD_ADDR_VAR 0 28
15822: PUSH
15823: LD_VAR 0 28
15827: PUSH
15828: LD_INT 1
15830: PLUS
15831: ST_TO_ADDR
// offensiveUnits = offensiveUnits ^ vehicles [ i ] [ 1 ] ;
15832: LD_ADDR_VAR 0 27
15836: PUSH
15837: LD_VAR 0 27
15841: PUSH
15842: LD_VAR 0 24
15846: PUSH
15847: LD_VAR 0 13
15851: ARRAY
15852: PUSH
15853: LD_INT 1
15855: ARRAY
15856: ADD
15857: ST_TO_ADDR
// for j = 1 to personel do
15858: LD_ADDR_VAR 0 14
15862: PUSH
15863: DOUBLE
15864: LD_INT 1
15866: DEC
15867: ST_TO_ADDR
15868: LD_VAR 0 18
15872: PUSH
15873: FOR_TO
15874: IFFALSE 15948
// if personel [ j ] [ 1 ] = vehicles [ i ] [ 2 ] then
15876: LD_VAR 0 18
15880: PUSH
15881: LD_VAR 0 14
15885: ARRAY
15886: PUSH
15887: LD_INT 1
15889: ARRAY
15890: PUSH
15891: LD_VAR 0 24
15895: PUSH
15896: LD_VAR 0 13
15900: ARRAY
15901: PUSH
15902: LD_INT 2
15904: ARRAY
15905: EQUAL
15906: IFFALSE 15946
// personel = ReplaceIn ( personel , [ j , personel [ j ] ] , 3 ) ;
15908: LD_ADDR_VAR 0 18
15912: PUSH
15913: LD_VAR 0 18
15917: PPUSH
15918: LD_VAR 0 14
15922: PUSH
15923: LD_VAR 0 18
15927: PUSH
15928: LD_VAR 0 14
15932: ARRAY
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PPUSH
15938: LD_INT 3
15940: PPUSH
15941: CALL 26210 0 3
15945: ST_TO_ADDR
15946: GO 15873
15948: POP
15949: POP
// end ;
15950: GO 15770
15952: POP
15953: POP
// if vehiclesToAttackAmount <= offensiveReadyCounter then
15954: LD_VAR 0 10
15958: PUSH
15959: LD_VAR 0 28
15963: LESSEQUAL
15964: IFFALSE 16218
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 2 ] ) , offensiveUnits [ 1 ] ) ;
15966: LD_ADDR_VAR 0 29
15970: PUSH
15971: LD_INT 81
15973: PUSH
15974: LD_INT 2
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 69
15985: PPUSH
15986: LD_VAR 0 27
15990: PUSH
15991: LD_INT 1
15993: ARRAY
15994: PPUSH
15995: CALL_OW 74
15999: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_enemy , 2 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , offensiveUnits [ 1 ] ) ;
16000: LD_ADDR_VAR 0 30
16004: PUSH
16005: LD_INT 81
16007: PUSH
16008: LD_INT 2
16010: PUSH
16011: EMPTY
16012: LIST
16013: LIST
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: LD_INT 59
16020: PUSH
16021: EMPTY
16022: LIST
16023: PUSH
16024: LD_INT 21
16026: PUSH
16027: LD_INT 1
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PUSH
16034: LD_INT 21
16036: PUSH
16037: LD_INT 2
16039: PUSH
16040: EMPTY
16041: LIST
16042: LIST
16043: PUSH
16044: EMPTY
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: PUSH
16050: EMPTY
16051: LIST
16052: LIST
16053: PUSH
16054: EMPTY
16055: LIST
16056: PPUSH
16057: CALL_OW 69
16061: PPUSH
16062: LD_VAR 0 27
16066: PUSH
16067: LD_INT 1
16069: ARRAY
16070: PPUSH
16071: CALL_OW 74
16075: ST_TO_ADDR
// if GetDistUnits ( offensiveUnits [ 1 ] , target1 ) + 8 < GetDistUnits ( offensiveUnits [ 1 ] , target2 ) then
16076: LD_VAR 0 27
16080: PUSH
16081: LD_INT 1
16083: ARRAY
16084: PPUSH
16085: LD_VAR 0 29
16089: PPUSH
16090: CALL_OW 296
16094: PUSH
16095: LD_INT 8
16097: PLUS
16098: PUSH
16099: LD_VAR 0 27
16103: PUSH
16104: LD_INT 1
16106: ARRAY
16107: PPUSH
16108: LD_VAR 0 30
16112: PPUSH
16113: CALL_OW 296
16117: LESS
16118: IFFALSE 16154
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target1 ) else
16120: LD_VAR 0 27
16124: PPUSH
16125: LD_INT 3
16127: PUSH
16128: LD_INT 60
16130: PUSH
16131: EMPTY
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: PPUSH
16138: CALL_OW 72
16142: PPUSH
16143: LD_VAR 0 29
16147: PPUSH
16148: CALL_OW 115
16152: GO 16186
// ComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , target2 ) ;
16154: LD_VAR 0 27
16158: PPUSH
16159: LD_INT 3
16161: PUSH
16162: LD_INT 60
16164: PUSH
16165: EMPTY
16166: LIST
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: PPUSH
16172: CALL_OW 72
16176: PPUSH
16177: LD_VAR 0 30
16181: PPUSH
16182: CALL_OW 115
// AddComAttackUnit ( UnitFilter ( offensiveUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16186: LD_VAR 0 27
16190: PPUSH
16191: LD_INT 3
16193: PUSH
16194: LD_INT 60
16196: PUSH
16197: EMPTY
16198: LIST
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PPUSH
16204: CALL_OW 72
16208: PPUSH
16209: LD_VAR 0 41
16213: PPUSH
16214: CALL_OW 175
// end ; end ;
16218: GO 15737
16220: POP
16221: POP
// for enemyUnits in FilterUnitsInArea ( defenceArea , [ f_enemy , side ] ) do
16222: LD_ADDR_VAR 0 41
16226: PUSH
16227: LD_VAR 0 7
16231: PPUSH
16232: LD_INT 81
16234: PUSH
16235: LD_VAR 0 1
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: PPUSH
16244: CALL_OW 70
16248: PUSH
16249: FOR_IN
16250: IFFALSE 16429
// begin defenceUnits = [ ] ;
16252: LD_ADDR_VAR 0 26
16256: PUSH
16257: EMPTY
16258: ST_TO_ADDR
// for i := 1 to personel do
16259: LD_ADDR_VAR 0 13
16263: PUSH
16264: DOUBLE
16265: LD_INT 1
16267: DEC
16268: ST_TO_ADDR
16269: LD_VAR 0 18
16273: PUSH
16274: FOR_TO
16275: IFFALSE 16325
// if personel [ i ] [ 3 ] = 2 then
16277: LD_VAR 0 18
16281: PUSH
16282: LD_VAR 0 13
16286: ARRAY
16287: PUSH
16288: LD_INT 3
16290: ARRAY
16291: PUSH
16292: LD_INT 2
16294: EQUAL
16295: IFFALSE 16323
// defenceUnits = defenceUnits ^ personel [ i ] [ 1 ] ;
16297: LD_ADDR_VAR 0 26
16301: PUSH
16302: LD_VAR 0 26
16306: PUSH
16307: LD_VAR 0 18
16311: PUSH
16312: LD_VAR 0 13
16316: ARRAY
16317: PUSH
16318: LD_INT 1
16320: ARRAY
16321: ADD
16322: ST_TO_ADDR
16323: GO 16274
16325: POP
16326: POP
// for i := 1 to vehicles do
16327: LD_ADDR_VAR 0 13
16331: PUSH
16332: DOUBLE
16333: LD_INT 1
16335: DEC
16336: ST_TO_ADDR
16337: LD_VAR 0 24
16341: PUSH
16342: FOR_TO
16343: IFFALSE 16393
// if vehicles [ i ] [ 3 ] = 2 then
16345: LD_VAR 0 24
16349: PUSH
16350: LD_VAR 0 13
16354: ARRAY
16355: PUSH
16356: LD_INT 3
16358: ARRAY
16359: PUSH
16360: LD_INT 2
16362: EQUAL
16363: IFFALSE 16391
// defenceUnits = defenceUnits ^ vehicles [ i ] [ 1 ] ;
16365: LD_ADDR_VAR 0 26
16369: PUSH
16370: LD_VAR 0 26
16374: PUSH
16375: LD_VAR 0 24
16379: PUSH
16380: LD_VAR 0 13
16384: ARRAY
16385: PUSH
16386: LD_INT 1
16388: ARRAY
16389: ADD
16390: ST_TO_ADDR
16391: GO 16342
16393: POP
16394: POP
// AddComAttackUnit ( UnitFilter ( defenceUnits , [ f_not , [ f_hastask ] ] ) , enemyUnits ) ;
16395: LD_VAR 0 26
16399: PPUSH
16400: LD_INT 3
16402: PUSH
16403: LD_INT 60
16405: PUSH
16406: EMPTY
16407: LIST
16408: PUSH
16409: EMPTY
16410: LIST
16411: LIST
16412: PPUSH
16413: CALL_OW 72
16417: PPUSH
16418: LD_VAR 0 41
16422: PPUSH
16423: CALL_OW 175
// end ;
16427: GO 16249
16429: POP
16430: POP
// attackBuildings = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ;
16431: LD_ADDR_VAR 0 42
16435: PUSH
16436: LD_INT 22
16438: PUSH
16439: LD_VAR 0 1
16443: PUSH
16444: EMPTY
16445: LIST
16446: LIST
16447: PUSH
16448: LD_INT 2
16450: PUSH
16451: LD_INT 30
16453: PUSH
16454: LD_INT 31
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 30
16463: PUSH
16464: LD_INT 32
16466: PUSH
16467: EMPTY
16468: LIST
16469: LIST
16470: PUSH
16471: LD_INT 30
16473: PUSH
16474: LD_INT 33
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: PUSH
16481: LD_INT 30
16483: PUSH
16484: LD_INT 4
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 5
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: LIST
16505: LIST
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: PPUSH
16513: CALL_OW 69
16517: ST_TO_ADDR
// enemyBuildings = FilterAllUnits ( [ [ f_enemy , side ] , [ f_type , unit_building ] , [ f_empty ] ] ) ;
16518: LD_ADDR_VAR 0 43
16522: PUSH
16523: LD_INT 81
16525: PUSH
16526: LD_VAR 0 1
16530: PUSH
16531: EMPTY
16532: LIST
16533: LIST
16534: PUSH
16535: LD_INT 21
16537: PUSH
16538: LD_INT 3
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PUSH
16545: LD_INT 58
16547: PUSH
16548: EMPTY
16549: LIST
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: LIST
16555: PPUSH
16556: CALL_OW 69
16560: ST_TO_ADDR
// if attackBuildings and enemyBuildings then
16561: LD_VAR 0 42
16565: PUSH
16566: LD_VAR 0 43
16570: AND
16571: IFFALSE 16641
// for i in attackBuildings do
16573: LD_ADDR_VAR 0 13
16577: PUSH
16578: LD_VAR 0 42
16582: PUSH
16583: FOR_IN
16584: IFFALSE 16639
// for j in enemyBuildings do
16586: LD_ADDR_VAR 0 14
16590: PUSH
16591: LD_VAR 0 43
16595: PUSH
16596: FOR_IN
16597: IFFALSE 16635
// if GetDistUnits ( i , j ) < 12 then
16599: LD_VAR 0 13
16603: PPUSH
16604: LD_VAR 0 14
16608: PPUSH
16609: CALL_OW 296
16613: PUSH
16614: LD_INT 12
16616: LESS
16617: IFFALSE 16633
// ComAttackUnit ( i , j ) ;
16619: LD_VAR 0 13
16623: PPUSH
16624: LD_VAR 0 14
16628: PPUSH
16629: CALL_OW 115
16633: GO 16596
16635: POP
16636: POP
16637: GO 16583
16639: POP
16640: POP
// until not personel or arabianCanExitMap ;
16641: LD_VAR 0 18
16645: NOT
16646: PUSH
16647: LD_EXP 21
16651: OR
16652: IFFALSE 11260
// end ;
16654: LD_VAR 0 12
16658: RET
// every 7 7$30 trigger not arabianPatrolVehicles do
16659: LD_EXP 53
16663: NOT
16664: IFFALSE 16698
16666: GO 16668
16668: DISABLE
// begin enable ;
16669: ENABLE
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
16670: LD_EXP 37
16674: PPUSH
16675: LD_INT 42
16677: PPUSH
16678: CALL 2694 0 2
// arabLeftExit = true ;
16682: LD_ADDR_EXP 56
16686: PUSH
16687: LD_INT 1
16689: ST_TO_ADDR
// arabRightExit = false ;
16690: LD_ADDR_EXP 57
16694: PUSH
16695: LD_INT 0
16697: ST_TO_ADDR
// end ;
16698: END
// every 0 0$1 trigger arabianPatrolVehicles and arabLeftExit do var veh , x , base ;
16699: LD_EXP 53
16703: PUSH
16704: LD_EXP 56
16708: AND
16709: IFFALSE 16904
16711: GO 16713
16713: DISABLE
16714: LD_INT 0
16716: PPUSH
16717: PPUSH
16718: PPUSH
// begin enable ;
16719: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 71 , 137 ) ;
16720: LD_EXP 53
16724: PPUSH
16725: LD_INT 71
16727: PPUSH
16728: LD_INT 137
16730: PPUSH
16731: CALL_OW 114
// for veh in arabianPatrolVehicles do
16735: LD_ADDR_VAR 0 1
16739: PUSH
16740: LD_EXP 53
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16902
// begin if IsInArea ( veh , ArabianPatrolExitArea2 ) then
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_INT 43
16755: PPUSH
16756: CALL_OW 308
16760: IFFALSE 16900
// begin if arabianPatrolVehicles then
16762: LD_EXP 53
16766: IFFALSE 16795
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: CALL_OW 313
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PPUSH
16782: CALL_OW 64
// RemoveUnit ( veh ) ;
16786: LD_VAR 0 1
16790: PPUSH
16791: CALL_OW 64
// end ; x = 0 ;
16795: LD_ADDR_VAR 0 2
16799: PUSH
16800: LD_INT 0
16802: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
16803: LD_ADDR_VAR 0 1
16807: PUSH
16808: LD_EXP 53
16812: PUSH
16813: FOR_IN
16814: IFFALSE 16844
// if not IsPlaced ( veh ) then
16816: LD_VAR 0 1
16820: PPUSH
16821: CALL_OW 305
16825: NOT
16826: IFFALSE 16842
// x = x + 1 ;
16828: LD_ADDR_VAR 0 2
16832: PUSH
16833: LD_VAR 0 2
16837: PUSH
16838: LD_INT 1
16840: PLUS
16841: ST_TO_ADDR
16842: GO 16813
16844: POP
16845: POP
// if x = arabianPatrolVehicles then
16846: LD_VAR 0 2
16850: PUSH
16851: LD_EXP 53
16855: EQUAL
16856: IFFALSE 16900
// begin arabLeftExit = false ;
16858: LD_ADDR_EXP 56
16862: PUSH
16863: LD_INT 0
16865: ST_TO_ADDR
// arabRightExit = true ;
16866: LD_ADDR_EXP 57
16870: PUSH
16871: LD_INT 1
16873: ST_TO_ADDR
// wait ( 2 2$0 ) ;
16874: LD_INT 4200
16876: PPUSH
16877: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
16881: LD_ADDR_EXP 53
16885: PUSH
16886: EMPTY
16887: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea2 ) ;
16888: LD_EXP 37
16892: PPUSH
16893: LD_INT 43
16895: PPUSH
16896: CALL 2694 0 2
// end ; end ; end ;
16900: GO 16745
16902: POP
16903: POP
// end ;
16904: PPOPN 3
16906: END
// every 0 0$1 trigger arabianPatrolVehicles and arabRightExit do var veh , x , base ;
16907: LD_EXP 53
16911: PUSH
16912: LD_EXP 57
16916: AND
16917: IFFALSE 17112
16919: GO 16921
16921: DISABLE
16922: LD_INT 0
16924: PPUSH
16925: PPUSH
16926: PPUSH
// begin enable ;
16927: ENABLE
// ComAgressiveMove ( arabianPatrolVehicles , 184 , 134 ) ;
16928: LD_EXP 53
16932: PPUSH
16933: LD_INT 184
16935: PPUSH
16936: LD_INT 134
16938: PPUSH
16939: CALL_OW 114
// for veh in arabianPatrolVehicles do
16943: LD_ADDR_VAR 0 1
16947: PUSH
16948: LD_EXP 53
16952: PUSH
16953: FOR_IN
16954: IFFALSE 17110
// begin if IsInArea ( veh , ArabianPatrolExitArea1 ) then
16956: LD_VAR 0 1
16960: PPUSH
16961: LD_INT 42
16963: PPUSH
16964: CALL_OW 308
16968: IFFALSE 17108
// begin if arabianPatrolVehicles then
16970: LD_EXP 53
16974: IFFALSE 17003
// begin RemoveUnit ( UnitsInside ( veh ) [ 1 ] ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: CALL_OW 313
16985: PUSH
16986: LD_INT 1
16988: ARRAY
16989: PPUSH
16990: CALL_OW 64
// RemoveUnit ( veh ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: CALL_OW 64
// end ; x = 0 ;
17003: LD_ADDR_VAR 0 2
17007: PUSH
17008: LD_INT 0
17010: ST_TO_ADDR
// for veh in arabianPatrolVehicles do
17011: LD_ADDR_VAR 0 1
17015: PUSH
17016: LD_EXP 53
17020: PUSH
17021: FOR_IN
17022: IFFALSE 17052
// if not IsPlaced ( veh ) then
17024: LD_VAR 0 1
17028: PPUSH
17029: CALL_OW 305
17033: NOT
17034: IFFALSE 17050
// x = x + 1 ;
17036: LD_ADDR_VAR 0 2
17040: PUSH
17041: LD_VAR 0 2
17045: PUSH
17046: LD_INT 1
17048: PLUS
17049: ST_TO_ADDR
17050: GO 17021
17052: POP
17053: POP
// if x = arabianPatrolVehicles then
17054: LD_VAR 0 2
17058: PUSH
17059: LD_EXP 53
17063: EQUAL
17064: IFFALSE 17108
// begin arabLeftExit = true ;
17066: LD_ADDR_EXP 56
17070: PUSH
17071: LD_INT 1
17073: ST_TO_ADDR
// arabRightExit = false ;
17074: LD_ADDR_EXP 57
17078: PUSH
17079: LD_INT 0
17081: ST_TO_ADDR
// wait ( 2 2$0 ) ;
17082: LD_INT 4200
17084: PPUSH
17085: CALL_OW 67
// arabianPatrolVehicles = [ ] ;
17089: LD_ADDR_EXP 53
17093: PUSH
17094: EMPTY
17095: ST_TO_ADDR
// PrepareArabianPatrolVehicles ( arabianPatrolVehiclesAmount , ArabianPatrolExitArea1 ) ;
17096: LD_EXP 37
17100: PPUSH
17101: LD_INT 42
17103: PPUSH
17104: CALL 2694 0 2
// end ; end ; end ;
17108: GO 16953
17110: POP
17111: POP
// end ;
17112: PPOPN 3
17114: END
// every 6 6$0 trigger not arabianHovercrafts and not arabianCanExitMap do
17115: LD_EXP 54
17119: NOT
17120: PUSH
17121: LD_EXP 21
17125: NOT
17126: AND
17127: IFFALSE 17137
17129: GO 17131
17131: DISABLE
// begin enable ;
17132: ENABLE
// PrepareArabianHovercraft ;
17133: CALL 2853 0 0
// end ;
17137: END
// every 0 0$1 trigger arabianHovercrafts do var i , x ;
17138: LD_EXP 54
17142: IFFALSE 17322
17144: GO 17146
17146: DISABLE
17147: LD_INT 0
17149: PPUSH
17150: PPUSH
// begin enable ;
17151: ENABLE
// SetFuel ( arabianHovercrafts , 100 ) ;
17152: LD_EXP 54
17156: PPUSH
17157: LD_INT 100
17159: PPUSH
17160: CALL_OW 240
// if not arabianCanExitMap then
17164: LD_EXP 21
17168: NOT
17169: IFFALSE 17307
// begin for i := 1 to arabianHovercraftsPath do
17171: LD_ADDR_VAR 0 1
17175: PUSH
17176: DOUBLE
17177: LD_INT 1
17179: DEC
17180: ST_TO_ADDR
17181: LD_EXP 39
17185: PUSH
17186: FOR_TO
17187: IFFALSE 17230
// AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ i ] [ 1 ] , arabianHovercraftsPath [ i ] [ 2 ] ) ;
17189: LD_EXP 54
17193: PPUSH
17194: LD_EXP 39
17198: PUSH
17199: LD_VAR 0 1
17203: ARRAY
17204: PUSH
17205: LD_INT 1
17207: ARRAY
17208: PPUSH
17209: LD_EXP 39
17213: PUSH
17214: LD_VAR 0 1
17218: ARRAY
17219: PUSH
17220: LD_INT 2
17222: ARRAY
17223: PPUSH
17224: CALL_OW 174
17228: GO 17186
17230: POP
17231: POP
// x = arabianHovercraftsPath ;
17232: LD_ADDR_VAR 0 2
17236: PUSH
17237: LD_EXP 39
17241: ST_TO_ADDR
// repeat AddComAgressiveMove ( arabianHovercrafts , arabianHovercraftsPath [ x ] [ 1 ] , arabianHovercraftsPath [ x ] [ 2 ] ) ;
17242: LD_EXP 54
17246: PPUSH
17247: LD_EXP 39
17251: PUSH
17252: LD_VAR 0 2
17256: ARRAY
17257: PUSH
17258: LD_INT 1
17260: ARRAY
17261: PPUSH
17262: LD_EXP 39
17266: PUSH
17267: LD_VAR 0 2
17271: ARRAY
17272: PUSH
17273: LD_INT 2
17275: ARRAY
17276: PPUSH
17277: CALL_OW 174
// x = x - 1 ;
17281: LD_ADDR_VAR 0 2
17285: PUSH
17286: LD_VAR 0 2
17290: PUSH
17291: LD_INT 1
17293: MINUS
17294: ST_TO_ADDR
// until x = 0 ;
17295: LD_VAR 0 2
17299: PUSH
17300: LD_INT 0
17302: EQUAL
17303: IFFALSE 17242
// end else
17305: GO 17322
// ComAgressiveMove ( arabianHovercrafts , 134 , 68 ) ;
17307: LD_EXP 54
17311: PPUSH
17312: LD_INT 134
17314: PPUSH
17315: LD_INT 68
17317: PPUSH
17318: CALL_OW 114
// end ;
17322: PPOPN 2
17324: END
// every 0 0$1 trigger arabianPatrolTroops do
17325: LD_EXP 55
17329: IFFALSE 17395
17331: GO 17333
17333: DISABLE
// begin enable ;
17334: ENABLE
// AddComAgressiveMove ( arabianPatrolTroops , 127 , 100 ) ;
17335: LD_EXP 55
17339: PPUSH
17340: LD_INT 127
17342: PPUSH
17343: LD_INT 100
17345: PPUSH
17346: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 141 , 133 ) ;
17350: LD_EXP 55
17354: PPUSH
17355: LD_INT 141
17357: PPUSH
17358: LD_INT 133
17360: PPUSH
17361: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 80 , 132 ) ;
17365: LD_EXP 55
17369: PPUSH
17370: LD_INT 80
17372: PPUSH
17373: LD_INT 132
17375: PPUSH
17376: CALL_OW 174
// AddComAgressiveMove ( arabianPatrolTroops , 174 , 122 ) ;
17380: LD_EXP 55
17384: PPUSH
17385: LD_INT 174
17387: PPUSH
17388: LD_INT 122
17390: PPUSH
17391: CALL_OW 174
// end ; end_of_file
17395: END
// export function Lose_Burlak ; begin
17396: LD_INT 0
17398: PPUSH
// YouLost ( Burlak ) ;
17399: LD_STRING Burlak
17401: PPUSH
17402: CALL_OW 104
// end ;
17406: LD_VAR 0 1
17410: RET
// export function Lose_Survive ; begin
17411: LD_INT 0
17413: PPUSH
// YouLost ( Survive ) ;
17414: LD_STRING Survive
17416: PPUSH
17417: CALL_OW 104
// end ;
17421: LD_VAR 0 1
17425: RET
// export function Lose_Surrender ; begin
17426: LD_INT 0
17428: PPUSH
// YouLost ( Surrender ) ;
17429: LD_STRING Surrender
17431: PPUSH
17432: CALL_OW 104
// end ; end_of_file
17436: LD_VAR 0 1
17440: RET
// every 0 0$1 do
17441: GO 17443
17443: DISABLE
// begin if not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_ok ] , [ f_occupied ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] ] ) then
17444: LD_EXP 24
17448: NOT
17449: PUSH
17450: LD_INT 22
17452: PPUSH
17453: LD_INT 22
17455: PUSH
17456: LD_INT 3
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: PUSH
17463: LD_INT 21
17465: PUSH
17466: LD_INT 2
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: PUSH
17473: LD_INT 50
17475: PUSH
17476: EMPTY
17477: LIST
17478: PUSH
17479: LD_INT 59
17481: PUSH
17482: EMPTY
17483: LIST
17484: PUSH
17485: LD_INT 2
17487: PUSH
17488: LD_INT 31
17490: PUSH
17491: LD_INT 22
17493: PUSH
17494: EMPTY
17495: LIST
17496: LIST
17497: PUSH
17498: LD_INT 31
17500: PUSH
17501: LD_INT 24
17503: PUSH
17504: EMPTY
17505: LIST
17506: LIST
17507: PUSH
17508: LD_INT 31
17510: PUSH
17511: LD_INT 14
17513: PUSH
17514: EMPTY
17515: LIST
17516: LIST
17517: PUSH
17518: EMPTY
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: PPUSH
17531: CALL_OW 70
17535: AND
17536: PUSH
17537: LD_INT 22
17539: PPUSH
17540: LD_INT 22
17542: PUSH
17543: LD_INT 3
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 21
17552: PUSH
17553: LD_INT 1
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: LD_INT 23
17562: PUSH
17563: LD_INT 3
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 50
17572: PUSH
17573: EMPTY
17574: LIST
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PPUSH
17582: CALL_OW 70
17586: AND
17587: IFFALSE 17596
// Query ( QVehicles ) ;
17589: LD_STRING QVehicles
17591: PPUSH
17592: CALL_OW 97
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17596: LD_EXP 40
17600: PPUSH
17601: CALL_OW 310
17605: PPUSH
17606: LD_INT 22
17608: PPUSH
17609: CALL_OW 308
17613: PUSH
17614: LD_EXP 24
17618: NOT
17619: AND
17620: PUSH
17621: LD_INT 22
17623: PPUSH
17624: LD_INT 22
17626: PUSH
17627: LD_INT 3
17629: PUSH
17630: EMPTY
17631: LIST
17632: LIST
17633: PUSH
17634: LD_INT 21
17636: PUSH
17637: LD_INT 2
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: PUSH
17644: LD_INT 59
17646: PUSH
17647: EMPTY
17648: LIST
17649: PUSH
17650: LD_INT 50
17652: PUSH
17653: EMPTY
17654: LIST
17655: PUSH
17656: LD_INT 2
17658: PUSH
17659: LD_INT 31
17661: PUSH
17662: LD_INT 22
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: PUSH
17669: LD_INT 31
17671: PUSH
17672: LD_INT 24
17674: PUSH
17675: EMPTY
17676: LIST
17677: LIST
17678: PUSH
17679: LD_INT 31
17681: PUSH
17682: LD_INT 14
17684: PUSH
17685: EMPTY
17686: LIST
17687: LIST
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: PUSH
17695: EMPTY
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: PPUSH
17702: CALL_OW 70
17706: PUSH
17707: LD_INT 22
17709: PUSH
17710: LD_INT 3
17712: PUSH
17713: EMPTY
17714: LIST
17715: LIST
17716: PUSH
17717: LD_INT 21
17719: PUSH
17720: LD_INT 1
17722: PUSH
17723: EMPTY
17724: LIST
17725: LIST
17726: PUSH
17727: LD_INT 23
17729: PUSH
17730: LD_INT 3
17732: PUSH
17733: EMPTY
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 2
17739: PUSH
17740: LD_INT 25
17742: PUSH
17743: LD_INT 1
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 2
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: LD_INT 25
17762: PUSH
17763: LD_INT 3
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: PUSH
17770: LD_INT 25
17772: PUSH
17773: LD_INT 4
17775: PUSH
17776: EMPTY
17777: LIST
17778: LIST
17779: PUSH
17780: EMPTY
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: LIST
17791: LIST
17792: PPUSH
17793: CALL_OW 69
17797: GREATEREQUAL
17798: AND
17799: IFFALSE 17805
// FinishMission ;
17801: CALL 18134 0 0
// if IsInArea ( IsInUnit ( Burlak ) , exit_rus ) and not finishMissionBool and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) >= 6 and FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] , [ f_ok ] , [ f_or , [ f_chassis , ru_medium_tracked ] , [ f_chassis , ru_heavy_tracked ] , [ f_chassis , ar_half_tracked ] ] ] ) < FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) then
17805: LD_EXP 40
17809: PPUSH
17810: CALL_OW 310
17814: PPUSH
17815: LD_INT 22
17817: PPUSH
17818: CALL_OW 308
17822: PUSH
17823: LD_EXP 24
17827: NOT
17828: AND
17829: PUSH
17830: LD_INT 22
17832: PPUSH
17833: LD_INT 22
17835: PUSH
17836: LD_INT 3
17838: PUSH
17839: EMPTY
17840: LIST
17841: LIST
17842: PUSH
17843: LD_INT 21
17845: PUSH
17846: LD_INT 2
17848: PUSH
17849: EMPTY
17850: LIST
17851: LIST
17852: PUSH
17853: LD_INT 59
17855: PUSH
17856: EMPTY
17857: LIST
17858: PUSH
17859: LD_INT 50
17861: PUSH
17862: EMPTY
17863: LIST
17864: PUSH
17865: LD_INT 2
17867: PUSH
17868: LD_INT 31
17870: PUSH
17871: LD_INT 22
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 31
17880: PUSH
17881: LD_INT 24
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 31
17890: PUSH
17891: LD_INT 14
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: PUSH
17904: EMPTY
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: PPUSH
17911: CALL_OW 70
17915: PUSH
17916: LD_INT 6
17918: GREATEREQUAL
17919: AND
17920: PUSH
17921: LD_INT 22
17923: PPUSH
17924: LD_INT 22
17926: PUSH
17927: LD_INT 3
17929: PUSH
17930: EMPTY
17931: LIST
17932: LIST
17933: PUSH
17934: LD_INT 21
17936: PUSH
17937: LD_INT 2
17939: PUSH
17940: EMPTY
17941: LIST
17942: LIST
17943: PUSH
17944: LD_INT 59
17946: PUSH
17947: EMPTY
17948: LIST
17949: PUSH
17950: LD_INT 50
17952: PUSH
17953: EMPTY
17954: LIST
17955: PUSH
17956: LD_INT 2
17958: PUSH
17959: LD_INT 31
17961: PUSH
17962: LD_INT 22
17964: PUSH
17965: EMPTY
17966: LIST
17967: LIST
17968: PUSH
17969: LD_INT 31
17971: PUSH
17972: LD_INT 24
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 31
17981: PUSH
17982: LD_INT 14
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: PUSH
17995: EMPTY
17996: LIST
17997: LIST
17998: LIST
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 70
18006: PUSH
18007: LD_INT 22
18009: PUSH
18010: LD_INT 3
18012: PUSH
18013: EMPTY
18014: LIST
18015: LIST
18016: PUSH
18017: LD_INT 21
18019: PUSH
18020: LD_INT 1
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 23
18029: PUSH
18030: LD_INT 3
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 25
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 25
18052: PUSH
18053: LD_INT 2
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 25
18062: PUSH
18063: LD_INT 3
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: LD_INT 25
18072: PUSH
18073: LD_INT 4
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PUSH
18080: EMPTY
18081: LIST
18082: LIST
18083: LIST
18084: LIST
18085: LIST
18086: PUSH
18087: EMPTY
18088: LIST
18089: LIST
18090: LIST
18091: LIST
18092: PPUSH
18093: CALL_OW 69
18097: LESS
18098: AND
18099: IFFALSE 18125
// begin case Query ( QEndMission ) of 1 :
18101: LD_STRING QEndMission
18103: PPUSH
18104: CALL_OW 97
18108: PUSH
18109: LD_INT 1
18111: DOUBLE
18112: EQUAL
18113: IFTRUE 18117
18115: GO 18124
18117: POP
// FinishMission ; end ;
18118: CALL 18134 0 0
18122: GO 18125
18124: POP
// end ; wait ( 0 0$5 ) ;
18125: LD_INT 175
18127: PPUSH
18128: CALL_OW 67
// enable ;
18132: ENABLE
// end ;
18133: END
// function FinishMission ; var nearUnit ; begin
18134: LD_INT 0
18136: PPUSH
18137: PPUSH
// finishMissionBool = true ;
18138: LD_ADDR_EXP 24
18142: PUSH
18143: LD_INT 1
18145: ST_TO_ADDR
// if stevensDepot then
18146: LD_EXP 17
18150: IFFALSE 18319
// begin DialogueOn ;
18152: CALL_OW 6
// if IsOK ( Petrosyan ) then
18156: LD_EXP 44
18160: PPUSH
18161: CALL_OW 302
18165: IFFALSE 18181
// Say ( Petrosyan , DStevensLeftBehind-Pty-1 ) else
18167: LD_EXP 44
18171: PPUSH
18172: LD_STRING DStevensLeftBehind-Pty-1
18174: PPUSH
18175: CALL_OW 88
18179: GO 18295
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , StevensLeftBehind-RSol1-1 ,  , false , true ) ;
18181: LD_INT 22
18183: PUSH
18184: LD_INT 3
18186: PUSH
18187: EMPTY
18188: LIST
18189: LIST
18190: PUSH
18191: LD_INT 21
18193: PUSH
18194: LD_INT 1
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 26
18203: PUSH
18204: LD_INT 1
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: LD_INT 50
18213: PUSH
18214: EMPTY
18215: LIST
18216: PUSH
18217: LD_INT 2
18219: PUSH
18220: LD_INT 25
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: PUSH
18230: LD_INT 25
18232: PUSH
18233: LD_INT 2
18235: PUSH
18236: EMPTY
18237: LIST
18238: LIST
18239: PUSH
18240: LD_INT 25
18242: PUSH
18243: LD_INT 3
18245: PUSH
18246: EMPTY
18247: LIST
18248: LIST
18249: PUSH
18250: LD_INT 25
18252: PUSH
18253: LD_INT 4
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PUSH
18260: EMPTY
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: LIST
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: LIST
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 69
18278: PPUSH
18279: LD_STRING StevensLeftBehind-RSol1-1
18281: PPUSH
18282: LD_STRING 
18284: PPUSH
18285: LD_INT 0
18287: PPUSH
18288: LD_INT 1
18290: PPUSH
18291: CALL 8863 0 5
// Say ( Burlak , DStevensLeftBehind-Bur-1 ) ;
18295: LD_EXP 40
18299: PPUSH
18300: LD_STRING DStevensLeftBehind-Bur-1
18302: PPUSH
18303: CALL_OW 88
// DialogueOff ;
18307: CALL_OW 7
// stevensStatus = 1 ;
18311: LD_ADDR_EXP 2
18315: PUSH
18316: LD_INT 1
18318: ST_TO_ADDR
// end ; if not stevensPlaced and IsOK ( Petrosyan ) then
18319: LD_EXP 14
18323: NOT
18324: PUSH
18325: LD_EXP 44
18329: PPUSH
18330: CALL_OW 302
18334: AND
18335: IFFALSE 18867
// begin PrepareStevens ( exit_rus ) ;
18337: LD_INT 22
18339: PPUSH
18340: CALL 20911 0 1
// wait ( 0 0$1.5 ) ;
18344: LD_INT 52
18346: PPUSH
18347: CALL_OW 67
// stevensPlaced = true ;
18351: LD_ADDR_EXP 14
18355: PUSH
18356: LD_INT 1
18358: ST_TO_ADDR
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_sex , sex_male ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) , Stevens ) ;
18359: LD_ADDR_VAR 0 2
18363: PUSH
18364: LD_INT 22
18366: PUSH
18367: LD_INT 3
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: LD_INT 21
18376: PUSH
18377: LD_INT 1
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 26
18386: PUSH
18387: LD_INT 1
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 50
18396: PUSH
18397: EMPTY
18398: LIST
18399: PUSH
18400: LD_INT 2
18402: PUSH
18403: LD_INT 25
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 25
18415: PUSH
18416: LD_INT 2
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: LD_INT 25
18425: PUSH
18426: LD_INT 3
18428: PUSH
18429: EMPTY
18430: LIST
18431: LIST
18432: PUSH
18433: LD_INT 25
18435: PUSH
18436: LD_INT 4
18438: PUSH
18439: EMPTY
18440: LIST
18441: LIST
18442: PUSH
18443: EMPTY
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: LIST
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: PPUSH
18457: CALL_OW 69
18461: PPUSH
18462: LD_EXP 58
18466: PPUSH
18467: CALL_OW 74
18471: ST_TO_ADDR
// CenterNowOnUnits ( Stevens ) ;
18472: LD_EXP 58
18476: PPUSH
18477: CALL_OW 87
// InGameOn ;
18481: CALL_OW 8
// wait ( 0 0$1.5 ) ;
18485: LD_INT 52
18487: PPUSH
18488: CALL_OW 67
// SetSide ( Stevens , 6 ) ;
18492: LD_EXP 58
18496: PPUSH
18497: LD_INT 6
18499: PPUSH
18500: CALL_OW 235
// DialogueOn ;
18504: CALL_OW 6
// Say ( Stevens , DStevens-Huck-1 ) ;
18508: LD_EXP 58
18512: PPUSH
18513: LD_STRING DStevens-Huck-1
18515: PPUSH
18516: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1 ) ;
18520: LD_EXP 44
18524: PPUSH
18525: LD_STRING DStevens-Pty-1
18527: PPUSH
18528: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-1a ) ;
18532: LD_EXP 44
18536: PPUSH
18537: LD_STRING DStevens-Pty-1a
18539: PPUSH
18540: CALL_OW 88
// Say ( Stevens , DStevens-Huck-2 ) ;
18544: LD_EXP 58
18548: PPUSH
18549: LD_STRING DStevens-Huck-2
18551: PPUSH
18552: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-2 ) ;
18556: LD_EXP 44
18560: PPUSH
18561: LD_STRING DStevens-Pty-2
18563: PPUSH
18564: CALL_OW 88
// Say ( Stevens , DStevens-Huck-3 ) ;
18568: LD_EXP 58
18572: PPUSH
18573: LD_STRING DStevens-Huck-3
18575: PPUSH
18576: CALL_OW 88
// Say ( Petrosyan , DStevens-Pty-3 ) ;
18580: LD_EXP 44
18584: PPUSH
18585: LD_STRING DStevens-Pty-3
18587: PPUSH
18588: CALL_OW 88
// Say ( Stevens , DStevens-Huck-4 ) ;
18592: LD_EXP 58
18596: PPUSH
18597: LD_STRING DStevens-Huck-4
18599: PPUSH
18600: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-1 ) ;
18604: LD_EXP 44
18608: PPUSH
18609: LD_STRING DStevensBurlak-Pty-1
18611: PPUSH
18612: CALL_OW 88
// Say ( Burlak , DStevensBurlak-Bur-1 ) ;
18616: LD_EXP 40
18620: PPUSH
18621: LD_STRING DStevensBurlak-Bur-1
18623: PPUSH
18624: CALL_OW 88
// Say ( Petrosyan , DStevensBurlak-Pty-2 ) ;
18628: LD_EXP 44
18632: PPUSH
18633: LD_STRING DStevensBurlak-Pty-2
18635: PPUSH
18636: CALL_OW 88
// case Query ( QKill ) of 1 :
18640: LD_STRING QKill
18642: PPUSH
18643: CALL_OW 97
18647: PUSH
18648: LD_INT 1
18650: DOUBLE
18651: EQUAL
18652: IFTRUE 18656
18654: GO 18783
18656: POP
// begin stevensCanExitMap = true ;
18657: LD_ADDR_EXP 19
18661: PUSH
18662: LD_INT 1
18664: ST_TO_ADDR
// stevensFollow = false ;
18665: LD_ADDR_EXP 15
18669: PUSH
18670: LD_INT 0
18672: ST_TO_ADDR
// Say ( Burlak , DKill-1-Bur-1 ) ;
18673: LD_EXP 40
18677: PPUSH
18678: LD_STRING DKill-1-Bur-1
18680: PPUSH
18681: CALL_OW 88
// if IsOK ( Gleb ) then
18685: LD_EXP 43
18689: PPUSH
18690: CALL_OW 302
18694: IFFALSE 18708
// Say ( Gleb , DKill-1-Glb-1 ) ;
18696: LD_EXP 43
18700: PPUSH
18701: LD_STRING DKill-1-Glb-1
18703: PPUSH
18704: CALL_OW 88
// DialogueOff ;
18708: CALL_OW 7
// SetSide ( Stevens , 1 ) ;
18712: LD_EXP 58
18716: PPUSH
18717: LD_INT 1
18719: PPUSH
18720: CALL_OW 235
// stevensStatus = 0 ;
18724: LD_ADDR_EXP 2
18728: PUSH
18729: LD_INT 0
18731: ST_TO_ADDR
// repeat ComAttackUnit ( FilterAllUnits ( [ f_side , 3 ] ) , Stevens ) ;
18732: LD_INT 22
18734: PUSH
18735: LD_INT 3
18737: PUSH
18738: EMPTY
18739: LIST
18740: LIST
18741: PPUSH
18742: CALL_OW 69
18746: PPUSH
18747: LD_EXP 58
18751: PPUSH
18752: CALL_OW 115
// wait ( 0 0$1 ) ;
18756: LD_INT 35
18758: PPUSH
18759: CALL_OW 67
// until IsDead ( Stevens ) ;
18763: LD_EXP 58
18767: PPUSH
18768: CALL_OW 301
18772: IFFALSE 18732
// wait ( 0 0$1.5 ) ;
18774: LD_INT 52
18776: PPUSH
18777: CALL_OW 67
// end ; 2 :
18781: GO 18867
18783: LD_INT 2
18785: DOUBLE
18786: EQUAL
18787: IFTRUE 18791
18789: GO 18866
18791: POP
// begin stevensCanExitMap = true ;
18792: LD_ADDR_EXP 19
18796: PUSH
18797: LD_INT 1
18799: ST_TO_ADDR
// stevensWasInDepot = false ;
18800: LD_ADDR_EXP 18
18804: PUSH
18805: LD_INT 0
18807: ST_TO_ADDR
// stevensDepot = false ;
18808: LD_ADDR_EXP 17
18812: PUSH
18813: LD_INT 0
18815: ST_TO_ADDR
// stevensStatus = 1 ;
18816: LD_ADDR_EXP 2
18820: PUSH
18821: LD_INT 1
18823: ST_TO_ADDR
// Say ( Burlak , DKill-2-Bur-1 ) ;
18824: LD_EXP 40
18828: PPUSH
18829: LD_STRING DKill-2-Bur-1
18831: PPUSH
18832: CALL_OW 88
// Say ( Petrosyan , DKill-2-Pty-1 ) ;
18836: LD_EXP 44
18840: PPUSH
18841: LD_STRING DKill-2-Pty-1
18843: PPUSH
18844: CALL_OW 88
// DialogueOff ;
18848: CALL_OW 7
// ComMoveToArea ( Stevens , StevensExitMapArea ) ;
18852: LD_EXP 58
18856: PPUSH
18857: LD_INT 37
18859: PPUSH
18860: CALL_OW 113
// end ; end ;
18864: GO 18867
18866: POP
// end ; SetRewards ;
18867: CALL 18888 0 0
// SavePlayerCharacters ;
18871: CALL 19129 0 0
// SaveGlobalVariables ;
18875: CALL 19474 0 0
// YouWin ;
18879: CALL_OW 103
// end ;
18883: LD_VAR 0 1
18887: RET
// function SetRewards ; begin
18888: LD_INT 0
18890: PPUSH
// if fastBreakthrough then
18891: LD_EXP 23
18895: IFFALSE 18909
// AddMedal ( Time , 1 ) else
18897: LD_STRING Time
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: CALL_OW 101
18907: GO 18920
// AddMedal ( Time , - 1 ) ;
18909: LD_STRING Time
18911: PPUSH
18912: LD_INT 1
18914: NEG
18915: PPUSH
18916: CALL_OW 101
// if dial_tameApeBlocker then
18920: LD_EXP 10
18924: IFFALSE 18938
// AddMedal ( Apemen , 1 ) else
18926: LD_STRING Apemen
18928: PPUSH
18929: LD_INT 1
18931: PPUSH
18932: CALL_OW 101
18936: GO 18985
// if not dial_tameApeBlocker and GetTech ( tech_apelang , 3 ) = state_enabled then
18938: LD_EXP 10
18942: NOT
18943: PUSH
18944: LD_INT 1
18946: PPUSH
18947: LD_INT 3
18949: PPUSH
18950: CALL_OW 321
18954: PUSH
18955: LD_INT 1
18957: EQUAL
18958: AND
18959: IFFALSE 18974
// AddMedal ( Apemen , - 1 ) else
18961: LD_STRING Apemen
18963: PPUSH
18964: LD_INT 1
18966: NEG
18967: PPUSH
18968: CALL_OW 101
18972: GO 18985
// AddMedal ( Apemen , - 2 ) ;
18974: LD_STRING Apemen
18976: PPUSH
18977: LD_INT 2
18979: NEG
18980: PPUSH
18981: CALL_OW 101
// if not omarStatus then
18985: LD_EXP 1
18989: NOT
18990: IFFALSE 19004
// AddMedal ( Abdul , 1 ) else
18992: LD_STRING Abdul
18994: PPUSH
18995: LD_INT 1
18997: PPUSH
18998: CALL_OW 101
19002: GO 19015
// AddMedal ( Abdul , - 1 ) ;
19004: LD_STRING Abdul
19006: PPUSH
19007: LD_INT 1
19009: NEG
19010: PPUSH
19011: CALL_OW 101
// GiveMedals ( Main ) ;
19015: LD_STRING Main
19017: PPUSH
19018: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_nation , 3 ] , [ f_ok ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ] ) ) ;
19022: LD_INT 22
19024: PUSH
19025: LD_INT 3
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: PUSH
19032: LD_INT 21
19034: PUSH
19035: LD_INT 1
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: PUSH
19042: LD_INT 23
19044: PUSH
19045: LD_INT 3
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: PUSH
19052: LD_INT 50
19054: PUSH
19055: EMPTY
19056: LIST
19057: PUSH
19058: LD_INT 2
19060: PUSH
19061: LD_INT 25
19063: PUSH
19064: LD_INT 1
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: LD_INT 25
19073: PUSH
19074: LD_INT 2
19076: PUSH
19077: EMPTY
19078: LIST
19079: LIST
19080: PUSH
19081: LD_INT 25
19083: PUSH
19084: LD_INT 3
19086: PUSH
19087: EMPTY
19088: LIST
19089: LIST
19090: PUSH
19091: LD_INT 25
19093: PUSH
19094: LD_INT 4
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: PUSH
19101: EMPTY
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: PUSH
19108: EMPTY
19109: LIST
19110: LIST
19111: LIST
19112: LIST
19113: LIST
19114: PPUSH
19115: CALL_OW 69
19119: PPUSH
19120: CALL_OW 43
// end ;
19124: LD_VAR 0 1
19128: RET
// function SavePlayerCharacters ; var othersYour , ape ; begin
19129: LD_INT 0
19131: PPUSH
19132: PPUSH
19133: PPUSH
// ExtSaveCharacter ( Burlak , Burlak , 3 ) ;
19134: LD_EXP 40
19138: PPUSH
19139: LD_STRING Burlak
19141: PPUSH
19142: LD_INT 3
19144: PPUSH
19145: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Karamazov ) , exit_rus ) then
19149: LD_EXP 41
19153: PPUSH
19154: CALL_OW 310
19158: PPUSH
19159: LD_INT 22
19161: PPUSH
19162: CALL_OW 308
19166: IFFALSE 19183
// ExtSaveCharacter ( Karamazov , Karamazov , 3 ) ;
19168: LD_EXP 41
19172: PPUSH
19173: LD_STRING Karamazov
19175: PPUSH
19176: LD_INT 3
19178: PPUSH
19179: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Petrovova ) , exit_rus ) then
19183: LD_EXP 42
19187: PPUSH
19188: CALL_OW 310
19192: PPUSH
19193: LD_INT 22
19195: PPUSH
19196: CALL_OW 308
19200: IFFALSE 19217
// ExtSaveCharacter ( Petrovova , Petrovova , 3 ) ;
19202: LD_EXP 42
19206: PPUSH
19207: LD_STRING Petrovova
19209: PPUSH
19210: LD_INT 3
19212: PPUSH
19213: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Gleb ) , exit_rus ) then
19217: LD_EXP 43
19221: PPUSH
19222: CALL_OW 310
19226: PPUSH
19227: LD_INT 22
19229: PPUSH
19230: CALL_OW 308
19234: IFFALSE 19251
// ExtSaveCharacter ( Gleb , Gleb , 3 ) ;
19236: LD_EXP 43
19240: PPUSH
19241: LD_STRING Gleb
19243: PPUSH
19244: LD_INT 3
19246: PPUSH
19247: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Petrosyan ) , exit_rus ) then
19251: LD_EXP 44
19255: PPUSH
19256: CALL_OW 310
19260: PPUSH
19261: LD_INT 22
19263: PPUSH
19264: CALL_OW 308
19268: IFFALSE 19285
// ExtSaveCharacter ( Petrosyan , Petrosyan , 3 ) ;
19270: LD_EXP 44
19274: PPUSH
19275: LD_STRING Petrosyan
19277: PPUSH
19278: LD_INT 3
19280: PPUSH
19281: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Dolgov ) , exit_rus ) then
19285: LD_EXP 46
19289: PPUSH
19290: CALL_OW 310
19294: PPUSH
19295: LD_INT 22
19297: PPUSH
19298: CALL_OW 308
19302: IFFALSE 19319
// ExtSaveCharacter ( Dolgov , Dolgov , 3 ) ;
19304: LD_EXP 46
19308: PPUSH
19309: LD_STRING Dolgov
19311: PPUSH
19312: LD_INT 3
19314: PPUSH
19315: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Lipshchin ) , exit_rus ) then
19319: LD_EXP 47
19323: PPUSH
19324: CALL_OW 310
19328: PPUSH
19329: LD_INT 22
19331: PPUSH
19332: CALL_OW 308
19336: IFFALSE 19353
// ExtSaveCharacter ( Lipshchin , Lipshchin , 3 ) ;
19338: LD_EXP 47
19342: PPUSH
19343: LD_STRING Lipshchin
19345: PPUSH
19346: LD_INT 3
19348: PPUSH
19349: CALL 8664 0 3
// if IsInArea ( IsInUnit ( Titov ) , exit_rus ) then
19353: LD_EXP 45
19357: PPUSH
19358: CALL_OW 310
19362: PPUSH
19363: LD_INT 22
19365: PPUSH
19366: CALL_OW 308
19370: IFFALSE 19387
// ExtSaveCharacter ( Titov , Titov , 3 ) ;
19372: LD_EXP 45
19376: PPUSH
19377: LD_STRING Titov
19379: PPUSH
19380: LD_INT 3
19382: PPUSH
19383: CALL 8664 0 3
// ExtSaveCharacters ( FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) , other_apemans , 3 ) ;
19387: LD_INT 22
19389: PPUSH
19390: LD_INT 22
19392: PUSH
19393: LD_INT 3
19395: PUSH
19396: EMPTY
19397: LIST
19398: LIST
19399: PUSH
19400: LD_INT 21
19402: PUSH
19403: LD_INT 1
19405: PUSH
19406: EMPTY
19407: LIST
19408: LIST
19409: PUSH
19410: LD_INT 2
19412: PUSH
19413: LD_INT 25
19415: PUSH
19416: LD_INT 12
19418: PUSH
19419: EMPTY
19420: LIST
19421: LIST
19422: PUSH
19423: LD_INT 25
19425: PUSH
19426: LD_INT 16
19428: PUSH
19429: EMPTY
19430: LIST
19431: LIST
19432: PUSH
19433: LD_INT 25
19435: PUSH
19436: LD_INT 15
19438: PUSH
19439: EMPTY
19440: LIST
19441: LIST
19442: PUSH
19443: EMPTY
19444: LIST
19445: LIST
19446: LIST
19447: LIST
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: PPUSH
19454: CALL_OW 70
19458: PPUSH
19459: LD_STRING other_apemans
19461: PPUSH
19462: LD_INT 3
19464: PPUSH
19465: CALL 8720 0 3
// end ;
19469: LD_VAR 0 1
19473: RET
// function SaveGlobalVariables ; var i , resources , driver , driverShortName ; begin
19474: LD_INT 0
19476: PPUSH
19477: PPUSH
19478: PPUSH
19479: PPUSH
19480: PPUSH
// resources = [ ] ;
19481: LD_ADDR_VAR 0 3
19485: PUSH
19486: EMPTY
19487: ST_TO_ADDR
// tanksFrom05 = [ ] ;
19488: LD_ADDR_EXP 5
19492: PUSH
19493: EMPTY
19494: ST_TO_ADDR
// SaveVariable ( stevensStatus , 05_StevensStatus_1 ) ;
19495: LD_EXP 2
19499: PPUSH
19500: LD_STRING 05_StevensStatus_1
19502: PPUSH
19503: CALL_OW 39
// SaveVariable ( omarStatus , 05_OmarStatus_2 ) ;
19507: LD_EXP 1
19511: PPUSH
19512: LD_STRING 05_OmarStatus_2
19514: PPUSH
19515: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_occupied ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , 89 ] ] ] ) do
19519: LD_ADDR_VAR 0 2
19523: PUSH
19524: LD_INT 22
19526: PPUSH
19527: LD_INT 22
19529: PUSH
19530: LD_INT 3
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: LD_INT 59
19539: PUSH
19540: EMPTY
19541: LIST
19542: PUSH
19543: LD_INT 2
19545: PUSH
19546: LD_INT 34
19548: PUSH
19549: LD_INT 51
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 34
19558: PUSH
19559: LD_INT 32
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: LD_INT 34
19568: PUSH
19569: LD_INT 89
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: LIST
19586: PPUSH
19587: CALL_OW 70
19591: PUSH
19592: FOR_IN
19593: IFFALSE 19621
// resources = resources ^ [ GetMultiCargo ( i ) ] ;
19595: LD_ADDR_VAR 0 3
19599: PUSH
19600: LD_VAR 0 3
19604: PUSH
19605: LD_VAR 0 2
19609: PPUSH
19610: CALL 9850 0 1
19614: PUSH
19615: EMPTY
19616: LIST
19617: ADD
19618: ST_TO_ADDR
19619: GO 19592
19621: POP
19622: POP
// SaveVariable ( resources , 05_ResourcesInCargo_3 ) ;
19623: LD_VAR 0 3
19627: PPUSH
19628: LD_STRING 05_ResourcesInCargo_3
19630: PPUSH
19631: CALL_OW 39
// for i in FilterUnitsInArea ( exit_rus , [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_occupied ] ] ) do
19635: LD_ADDR_VAR 0 2
19639: PUSH
19640: LD_INT 22
19642: PPUSH
19643: LD_INT 22
19645: PUSH
19646: LD_INT 3
19648: PUSH
19649: EMPTY
19650: LIST
19651: LIST
19652: PUSH
19653: LD_INT 21
19655: PUSH
19656: LD_INT 2
19658: PUSH
19659: EMPTY
19660: LIST
19661: LIST
19662: PUSH
19663: LD_INT 59
19665: PUSH
19666: EMPTY
19667: LIST
19668: PUSH
19669: EMPTY
19670: LIST
19671: LIST
19672: LIST
19673: PPUSH
19674: CALL_OW 70
19678: PUSH
19679: FOR_IN
19680: IFFALSE 19940
// begin driver = UnitsInside ( i ) [ 1 ] ;
19682: LD_ADDR_VAR 0 4
19686: PUSH
19687: LD_VAR 0 2
19691: PPUSH
19692: CALL_OW 313
19696: PUSH
19697: LD_INT 1
19699: ARRAY
19700: ST_TO_ADDR
// if driver = Burlak then
19701: LD_VAR 0 4
19705: PUSH
19706: LD_EXP 40
19710: EQUAL
19711: IFFALSE 19721
// driverShortName = Bur ;
19713: LD_ADDR_VAR 0 5
19717: PUSH
19718: LD_STRING Bur
19720: ST_TO_ADDR
// if driver = Karamazov then
19721: LD_VAR 0 4
19725: PUSH
19726: LD_EXP 41
19730: EQUAL
19731: IFFALSE 19741
// driverShortName = Kar ;
19733: LD_ADDR_VAR 0 5
19737: PUSH
19738: LD_STRING Kar
19740: ST_TO_ADDR
// if driver = Petrovova then
19741: LD_VAR 0 4
19745: PUSH
19746: LD_EXP 42
19750: EQUAL
19751: IFFALSE 19761
// driverShortName = Ptr ;
19753: LD_ADDR_VAR 0 5
19757: PUSH
19758: LD_STRING Ptr
19760: ST_TO_ADDR
// if driver = Gleb then
19761: LD_VAR 0 4
19765: PUSH
19766: LD_EXP 43
19770: EQUAL
19771: IFFALSE 19781
// driverShortName = Glb ;
19773: LD_ADDR_VAR 0 5
19777: PUSH
19778: LD_STRING Glb
19780: ST_TO_ADDR
// if driver = Petrosyan then
19781: LD_VAR 0 4
19785: PUSH
19786: LD_EXP 44
19790: EQUAL
19791: IFFALSE 19801
// driverShortName = Pet ;
19793: LD_ADDR_VAR 0 5
19797: PUSH
19798: LD_STRING Pet
19800: ST_TO_ADDR
// if driver = Dolgov then
19801: LD_VAR 0 4
19805: PUSH
19806: LD_EXP 46
19810: EQUAL
19811: IFFALSE 19821
// driverShortName = Dol ;
19813: LD_ADDR_VAR 0 5
19817: PUSH
19818: LD_STRING Dol
19820: ST_TO_ADDR
// if driver = Lipshchin then
19821: LD_VAR 0 4
19825: PUSH
19826: LD_EXP 47
19830: EQUAL
19831: IFFALSE 19841
// driverShortName = Lip ;
19833: LD_ADDR_VAR 0 5
19837: PUSH
19838: LD_STRING Lip
19840: ST_TO_ADDR
// if driver = Titov then
19841: LD_VAR 0 4
19845: PUSH
19846: LD_EXP 45
19850: EQUAL
19851: IFFALSE 19861
// driverShortName = Tit ;
19853: LD_ADDR_VAR 0 5
19857: PUSH
19858: LD_STRING Tit
19860: ST_TO_ADDR
// tanksFrom05 = tanksFrom05 ^ [ [ GetNation ( i ) , GetChassis ( i ) , GetEngine ( i ) , GetControl ( i ) , GetWeapon ( i ) , driverShortName ] ] ;
19861: LD_ADDR_EXP 5
19865: PUSH
19866: LD_EXP 5
19870: PUSH
19871: LD_VAR 0 2
19875: PPUSH
19876: CALL_OW 248
19880: PUSH
19881: LD_VAR 0 2
19885: PPUSH
19886: CALL_OW 265
19890: PUSH
19891: LD_VAR 0 2
19895: PPUSH
19896: CALL_OW 262
19900: PUSH
19901: LD_VAR 0 2
19905: PPUSH
19906: CALL_OW 263
19910: PUSH
19911: LD_VAR 0 2
19915: PPUSH
19916: CALL_OW 264
19920: PUSH
19921: LD_VAR 0 5
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: ADD
19937: ST_TO_ADDR
// end ;
19938: GO 19679
19940: POP
19941: POP
// SaveVariable ( tanksFrom05 , 05_Tanks_4 ) ;
19942: LD_EXP 5
19946: PPUSH
19947: LD_STRING 05_Tanks_4
19949: PPUSH
19950: CALL_OW 39
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_russian ] , [ f_type , unit_building ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ] ) then
19954: LD_INT 22
19956: PUSH
19957: LD_INT 3
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_INT 23
19966: PUSH
19967: LD_INT 3
19969: PUSH
19970: EMPTY
19971: LIST
19972: LIST
19973: PUSH
19974: LD_INT 21
19976: PUSH
19977: LD_INT 3
19979: PUSH
19980: EMPTY
19981: LIST
19982: LIST
19983: PUSH
19984: LD_INT 2
19986: PUSH
19987: LD_INT 30
19989: PUSH
19990: LD_INT 6
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PUSH
19997: LD_INT 30
19999: PUSH
20000: LD_INT 7
20002: PUSH
20003: EMPTY
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: LIST
20011: PUSH
20012: EMPTY
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: PPUSH
20018: CALL_OW 69
20022: NOT
20023: IFFALSE 20033
// labDestroyed = 1 ;
20025: LD_ADDR_EXP 3
20029: PUSH
20030: LD_INT 1
20032: ST_TO_ADDR
// SaveVariable ( labDestroyed , 05_LabDestroyed_5 ) ;
20033: LD_EXP 3
20037: PPUSH
20038: LD_STRING 05_LabDestroyed_5
20040: PPUSH
20041: CALL_OW 39
// end ; end_of_file
20045: LD_VAR 0 1
20049: RET
// export function Nef_PrepareNature ; var i , un ; begin
20050: LD_INT 0
20052: PPUSH
20053: PPUSH
20054: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
20055: LD_ADDR_VAR 0 2
20059: PUSH
20060: DOUBLE
20061: LD_INT 1
20063: DEC
20064: ST_TO_ADDR
20065: LD_EXP 28
20069: PUSH
20070: LD_INT 1
20072: ARRAY
20073: PUSH
20074: FOR_TO
20075: IFFALSE 20185
// begin uc_side = 0 ;
20077: LD_ADDR_OWVAR 20
20081: PUSH
20082: LD_INT 0
20084: ST_TO_ADDR
// uc_nation = nation_nature ;
20085: LD_ADDR_OWVAR 21
20089: PUSH
20090: LD_INT 0
20092: ST_TO_ADDR
// hc_class = class_apeman ;
20093: LD_ADDR_OWVAR 28
20097: PUSH
20098: LD_INT 12
20100: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20101: LD_ADDR_OWVAR 31
20105: PUSH
20106: LD_EXP 29
20110: PUSH
20111: LD_INT 1
20113: ARRAY
20114: PUSH
20115: LD_EXP 29
20119: PUSH
20120: LD_INT 2
20122: ARRAY
20123: PUSH
20124: LD_EXP 29
20128: PUSH
20129: LD_INT 3
20131: ARRAY
20132: PUSH
20133: LD_EXP 29
20137: PUSH
20138: LD_INT 4
20140: ARRAY
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20148: LD_ADDR_OWVAR 35
20152: PUSH
20153: LD_EXP 30
20157: ST_TO_ADDR
// un = CreateHuman ;
20158: LD_ADDR_VAR 0 3
20162: PUSH
20163: CALL_OW 44
20167: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20168: LD_VAR 0 3
20172: PPUSH
20173: LD_INT 33
20175: PPUSH
20176: LD_INT 0
20178: PPUSH
20179: CALL_OW 49
// end ;
20183: GO 20074
20185: POP
20186: POP
// for i := 1 to animalsAmount [ 2 ] do
20187: LD_ADDR_VAR 0 2
20191: PUSH
20192: DOUBLE
20193: LD_INT 1
20195: DEC
20196: ST_TO_ADDR
20197: LD_EXP 28
20201: PUSH
20202: LD_INT 2
20204: ARRAY
20205: PUSH
20206: FOR_TO
20207: IFFALSE 20317
// begin uc_side = 0 ;
20209: LD_ADDR_OWVAR 20
20213: PUSH
20214: LD_INT 0
20216: ST_TO_ADDR
// uc_nation = nation_nature ;
20217: LD_ADDR_OWVAR 21
20221: PUSH
20222: LD_INT 0
20224: ST_TO_ADDR
// hc_class = class_phororhacos ;
20225: LD_ADDR_OWVAR 28
20229: PUSH
20230: LD_INT 18
20232: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20233: LD_ADDR_OWVAR 31
20237: PUSH
20238: LD_EXP 29
20242: PUSH
20243: LD_INT 1
20245: ARRAY
20246: PUSH
20247: LD_EXP 29
20251: PUSH
20252: LD_INT 2
20254: ARRAY
20255: PUSH
20256: LD_EXP 29
20260: PUSH
20261: LD_INT 3
20263: ARRAY
20264: PUSH
20265: LD_EXP 29
20269: PUSH
20270: LD_INT 4
20272: ARRAY
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: LIST
20278: LIST
20279: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20280: LD_ADDR_OWVAR 35
20284: PUSH
20285: LD_EXP 30
20289: ST_TO_ADDR
// un = CreateHuman ;
20290: LD_ADDR_VAR 0 3
20294: PUSH
20295: CALL_OW 44
20299: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20300: LD_VAR 0 3
20304: PPUSH
20305: LD_INT 33
20307: PPUSH
20308: LD_INT 0
20310: PPUSH
20311: CALL_OW 49
// end ;
20315: GO 20206
20317: POP
20318: POP
// for i := 1 to animalsAmount [ 3 ] do
20319: LD_ADDR_VAR 0 2
20323: PUSH
20324: DOUBLE
20325: LD_INT 1
20327: DEC
20328: ST_TO_ADDR
20329: LD_EXP 28
20333: PUSH
20334: LD_INT 3
20336: ARRAY
20337: PUSH
20338: FOR_TO
20339: IFFALSE 20449
// begin uc_side = 0 ;
20341: LD_ADDR_OWVAR 20
20345: PUSH
20346: LD_INT 0
20348: ST_TO_ADDR
// uc_nation = nation_nature ;
20349: LD_ADDR_OWVAR 21
20353: PUSH
20354: LD_INT 0
20356: ST_TO_ADDR
// hc_class = class_tiger ;
20357: LD_ADDR_OWVAR 28
20361: PUSH
20362: LD_INT 14
20364: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20365: LD_ADDR_OWVAR 31
20369: PUSH
20370: LD_EXP 29
20374: PUSH
20375: LD_INT 1
20377: ARRAY
20378: PUSH
20379: LD_EXP 29
20383: PUSH
20384: LD_INT 2
20386: ARRAY
20387: PUSH
20388: LD_EXP 29
20392: PUSH
20393: LD_INT 3
20395: ARRAY
20396: PUSH
20397: LD_EXP 29
20401: PUSH
20402: LD_INT 4
20404: ARRAY
20405: PUSH
20406: EMPTY
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20412: LD_ADDR_OWVAR 35
20416: PUSH
20417: LD_EXP 30
20421: ST_TO_ADDR
// un = CreateHuman ;
20422: LD_ADDR_VAR 0 3
20426: PUSH
20427: CALL_OW 44
20431: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20432: LD_VAR 0 3
20436: PPUSH
20437: LD_INT 33
20439: PPUSH
20440: LD_INT 0
20442: PPUSH
20443: CALL_OW 49
// end ;
20447: GO 20338
20449: POP
20450: POP
// for i := 1 to animalsAmount [ 4 ] do
20451: LD_ADDR_VAR 0 2
20455: PUSH
20456: DOUBLE
20457: LD_INT 1
20459: DEC
20460: ST_TO_ADDR
20461: LD_EXP 28
20465: PUSH
20466: LD_INT 4
20468: ARRAY
20469: PUSH
20470: FOR_TO
20471: IFFALSE 20581
// begin uc_side = 0 ;
20473: LD_ADDR_OWVAR 20
20477: PUSH
20478: LD_INT 0
20480: ST_TO_ADDR
// uc_nation = nation_nature ;
20481: LD_ADDR_OWVAR 21
20485: PUSH
20486: LD_INT 0
20488: ST_TO_ADDR
// hc_class = 21 ;
20489: LD_ADDR_OWVAR 28
20493: PUSH
20494: LD_INT 21
20496: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
20497: LD_ADDR_OWVAR 31
20501: PUSH
20502: LD_EXP 29
20506: PUSH
20507: LD_INT 1
20509: ARRAY
20510: PUSH
20511: LD_EXP 29
20515: PUSH
20516: LD_INT 2
20518: ARRAY
20519: PUSH
20520: LD_EXP 29
20524: PUSH
20525: LD_INT 3
20527: ARRAY
20528: PUSH
20529: LD_EXP 29
20533: PUSH
20534: LD_INT 4
20536: ARRAY
20537: PUSH
20538: EMPTY
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
20544: LD_ADDR_OWVAR 35
20548: PUSH
20549: LD_EXP 30
20553: ST_TO_ADDR
// un = CreateHuman ;
20554: LD_ADDR_VAR 0 3
20558: PUSH
20559: CALL_OW 44
20563: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20564: LD_VAR 0 3
20568: PPUSH
20569: LD_INT 33
20571: PPUSH
20572: LD_INT 0
20574: PPUSH
20575: CALL_OW 49
// end ;
20579: GO 20470
20581: POP
20582: POP
// for i := 1 to animalsAmount [ 5 ] do
20583: LD_ADDR_VAR 0 2
20587: PUSH
20588: DOUBLE
20589: LD_INT 1
20591: DEC
20592: ST_TO_ADDR
20593: LD_EXP 28
20597: PUSH
20598: LD_INT 5
20600: ARRAY
20601: PUSH
20602: FOR_TO
20603: IFFALSE 20664
// begin uc_side = 0 ;
20605: LD_ADDR_OWVAR 20
20609: PUSH
20610: LD_INT 0
20612: ST_TO_ADDR
// uc_nation = nation_nature ;
20613: LD_ADDR_OWVAR 21
20617: PUSH
20618: LD_INT 0
20620: ST_TO_ADDR
// vc_chassis := 31 ;
20621: LD_ADDR_OWVAR 37
20625: PUSH
20626: LD_INT 31
20628: ST_TO_ADDR
// vc_control := control_rider ;
20629: LD_ADDR_OWVAR 38
20633: PUSH
20634: LD_INT 4
20636: ST_TO_ADDR
// un := CreateVehicle ;
20637: LD_ADDR_VAR 0 3
20641: PUSH
20642: CALL_OW 45
20646: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
20647: LD_VAR 0 3
20651: PPUSH
20652: LD_INT 33
20654: PPUSH
20655: LD_INT 0
20657: PPUSH
20658: CALL_OW 49
// end ;
20662: GO 20602
20664: POP
20665: POP
// end ; end_of_file
20666: LD_VAR 0 1
20670: RET
// every 0 0$1 do
20671: GO 20673
20673: DISABLE
// begin enable ;
20674: ENABLE
// display_strings = [ #Am01-1 , actionTime ] ;
20675: LD_ADDR_OWVAR 47
20679: PUSH
20680: LD_STRING #Am01-1
20682: PUSH
20683: LD_EXP 7
20687: PUSH
20688: EMPTY
20689: LIST
20690: LIST
20691: ST_TO_ADDR
// actionTime = actionTime + 0 0$01 ;
20692: LD_ADDR_EXP 7
20696: PUSH
20697: LD_EXP 7
20701: PUSH
20702: LD_INT 35
20704: PLUS
20705: ST_TO_ADDR
// end ; end_of_file
20706: END
// every 0 0$01 do var timer ;
20707: GO 20709
20709: DISABLE
20710: LD_INT 0
20712: PPUSH
// begin timer := 0 0$30 ;
20713: LD_ADDR_VAR 0 1
20717: PUSH
20718: LD_INT 1050
20720: ST_TO_ADDR
// repeat wait ( timer ) ;
20721: LD_VAR 0 1
20725: PPUSH
20726: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
20730: LD_EXP 22
20734: PUSH
20735: LD_INT 6
20737: GREATEREQUAL
20738: PUSH
20739: LD_EXP 22
20743: PUSH
20744: LD_INT 12
20746: LESS
20747: AND
20748: IFFALSE 20764
// timer := timer + 0 0$3 ;
20750: LD_ADDR_VAR 0 1
20754: PUSH
20755: LD_VAR 0 1
20759: PUSH
20760: LD_INT 105
20762: PLUS
20763: ST_TO_ADDR
// if cratesSpawned >= 12 then
20764: LD_EXP 22
20768: PUSH
20769: LD_INT 12
20771: GREATEREQUAL
20772: IFFALSE 20788
// timer := timer + 0 0$9 ;
20774: LD_ADDR_VAR 0 1
20778: PUSH
20779: LD_VAR 0 1
20783: PUSH
20784: LD_INT 315
20786: PLUS
20787: ST_TO_ADDR
// if timer > 3 3$00 then
20788: LD_VAR 0 1
20792: PUSH
20793: LD_INT 6300
20795: GREATER
20796: IFFALSE 20806
// timer := 0 0$50 ;
20798: LD_ADDR_VAR 0 1
20802: PUSH
20803: LD_INT 1750
20805: ST_TO_ADDR
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea , true ) ;
20806: LD_INT 3
20808: PPUSH
20809: LD_INT 5
20811: PPUSH
20812: CALL_OW 12
20816: PPUSH
20817: LD_INT 46
20819: PPUSH
20820: LD_INT 1
20822: PPUSH
20823: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
20827: LD_ADDR_EXP 22
20831: PUSH
20832: LD_EXP 22
20836: PUSH
20837: LD_INT 1
20839: PLUS
20840: ST_TO_ADDR
// until false ;
20841: LD_INT 0
20843: IFFALSE 20721
// end ;
20845: PPOPN 1
20847: END
// every 0 0$5 do
20848: GO 20850
20850: DISABLE
// begin CreateCratesArea ( 5 , CratesArea2 , true ) ;
20851: LD_INT 5
20853: PPUSH
20854: LD_INT 48
20856: PPUSH
20857: LD_INT 1
20859: PPUSH
20860: CALL_OW 55
// wait ( 0 0$40 ) ;
20864: LD_INT 1400
20866: PPUSH
20867: CALL_OW 67
// CreateCratesArea ( 5 , CratesArea2 , true ) ;
20871: LD_INT 5
20873: PPUSH
20874: LD_INT 48
20876: PPUSH
20877: LD_INT 1
20879: PPUSH
20880: CALL_OW 55
// end ;
20884: END
// every 10 10$0 do
20885: GO 20887
20887: DISABLE
// begin enable ;
20888: ENABLE
// CreateCratesArea ( rand ( 3 , 5 ) , CratesArea2 , true ) ;
20889: LD_INT 3
20891: PPUSH
20892: LD_INT 5
20894: PPUSH
20895: CALL_OW 12
20899: PPUSH
20900: LD_INT 48
20902: PPUSH
20903: LD_INT 1
20905: PPUSH
20906: CALL_OW 55
// end ; end_of_file
20910: END
// export Stevens ; export function PrepareStevens ( area ) ; begin
20911: LD_INT 0
20913: PPUSH
// uc_side = 1 ;
20914: LD_ADDR_OWVAR 20
20918: PUSH
20919: LD_INT 1
20921: ST_TO_ADDR
// Stevens = PrepareUnitExt ( Stevens , false , 0 ) ;
20922: LD_ADDR_EXP 58
20926: PUSH
20927: LD_STRING Stevens
20929: PPUSH
20930: LD_INT 0
20932: PPUSH
20933: LD_INT 0
20935: PPUSH
20936: CALL 8546 0 3
20940: ST_TO_ADDR
// PlaceUnitArea ( Stevens , area , true ) ;
20941: LD_EXP 58
20945: PPUSH
20946: LD_VAR 0 1
20950: PPUSH
20951: LD_INT 1
20953: PPUSH
20954: CALL_OW 49
// end ; end_of_file
20958: LD_VAR 0 2
20962: RET
// every 1 trigger achievement_DestroyedHovercrafts >= 3 do
20963: LD_EXP 26
20967: PUSH
20968: LD_INT 3
20970: GREATEREQUAL
20971: IFFALSE 20983
20973: GO 20975
20975: DISABLE
// SetAchievement ( ACH_HOVER ) ;
20976: LD_STRING ACH_HOVER
20978: PPUSH
20979: CALL_OW 543
20983: END
// every 1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , nation_nature ] , [ f_or , [ f_class , class_apeman ] , [ f_class , class_apeman_engineer ] , [ f_class , class_apeman_soldier ] ] ] ) and not FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_class , class_apeman ] ] ) do
20984: LD_INT 22
20986: PUSH
20987: LD_INT 3
20989: PUSH
20990: EMPTY
20991: LIST
20992: LIST
20993: PUSH
20994: LD_INT 23
20996: PUSH
20997: LD_INT 0
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PUSH
21004: LD_INT 2
21006: PUSH
21007: LD_INT 25
21009: PUSH
21010: LD_INT 12
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 25
21019: PUSH
21020: LD_INT 16
21022: PUSH
21023: EMPTY
21024: LIST
21025: LIST
21026: PUSH
21027: LD_INT 25
21029: PUSH
21030: LD_INT 15
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: PUSH
21037: EMPTY
21038: LIST
21039: LIST
21040: LIST
21041: LIST
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: LIST
21047: PPUSH
21048: CALL_OW 69
21052: PUSH
21053: LD_INT 22
21055: PUSH
21056: LD_INT 0
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PUSH
21063: LD_INT 23
21065: PUSH
21066: LD_INT 0
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: PUSH
21073: LD_INT 25
21075: PUSH
21076: LD_INT 12
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PUSH
21083: EMPTY
21084: LIST
21085: LIST
21086: LIST
21087: PPUSH
21088: CALL_OW 69
21092: NOT
21093: AND
21094: IFFALSE 21106
21096: GO 21098
21098: DISABLE
// SetAchievement ( ACH_REDARMY ) ;
21099: LD_STRING ACH_REDARMY
21101: PPUSH
21102: CALL_OW 543
21106: END
// every 1 trigger not achievement_CollectedCrates do var crates , depot ;
21107: LD_EXP 27
21111: NOT
21112: IFFALSE 21245
21114: GO 21116
21116: DISABLE
21117: LD_INT 0
21119: PPUSH
21120: PPUSH
// begin enable ;
21121: ENABLE
// crates = 0 ;
21122: LD_ADDR_VAR 0 1
21126: PUSH
21127: LD_INT 0
21129: ST_TO_ADDR
// for depot in FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_depot ] , [ f_ok ] ] ) do
21130: LD_ADDR_VAR 0 2
21134: PUSH
21135: LD_INT 22
21137: PUSH
21138: LD_INT 3
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: PUSH
21145: LD_INT 21
21147: PUSH
21148: LD_INT 3
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 30
21157: PUSH
21158: LD_INT 0
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: LD_INT 50
21167: PUSH
21168: EMPTY
21169: LIST
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: PPUSH
21177: CALL_OW 69
21181: PUSH
21182: FOR_IN
21183: IFFALSE 21216
// crates = crates + GetResourceType ( GetBase ( depot ) , mat_cans ) ;
21185: LD_ADDR_VAR 0 1
21189: PUSH
21190: LD_VAR 0 1
21194: PUSH
21195: LD_VAR 0 2
21199: PPUSH
21200: CALL_OW 274
21204: PPUSH
21205: LD_INT 1
21207: PPUSH
21208: CALL_OW 275
21212: PLUS
21213: ST_TO_ADDR
21214: GO 21182
21216: POP
21217: POP
// if crates >= 500 then
21218: LD_VAR 0 1
21222: PUSH
21223: LD_INT 500
21225: GREATEREQUAL
21226: IFFALSE 21245
// begin achievement_CollectedCrates = true ;
21228: LD_ADDR_EXP 27
21232: PUSH
21233: LD_INT 1
21235: ST_TO_ADDR
// SetAchievement ( ACH_CRATES ) ;
21236: LD_STRING ACH_CRATES
21238: PPUSH
21239: CALL_OW 543
// exit ;
21243: GO 21245
// end ; end ; end_of_file
21245: PPOPN 2
21247: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
// if exist_mode then
21252: LD_VAR 0 2
21256: IFFALSE 21281
// unit := CreateCharacter ( prefix & ident ) else
21258: LD_ADDR_VAR 0 5
21262: PUSH
21263: LD_VAR 0 3
21267: PUSH
21268: LD_VAR 0 1
21272: STR
21273: PPUSH
21274: CALL_OW 34
21278: ST_TO_ADDR
21279: GO 21296
// unit := NewCharacter ( ident ) ;
21281: LD_ADDR_VAR 0 5
21285: PUSH
21286: LD_VAR 0 1
21290: PPUSH
21291: CALL_OW 25
21295: ST_TO_ADDR
// result := unit ;
21296: LD_ADDR_VAR 0 4
21300: PUSH
21301: LD_VAR 0 5
21305: ST_TO_ADDR
// end ;
21306: LD_VAR 0 4
21310: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21311: LD_INT 0
21313: PPUSH
21314: PPUSH
// if not side or not nation then
21315: LD_VAR 0 1
21319: NOT
21320: PUSH
21321: LD_VAR 0 2
21325: NOT
21326: OR
21327: IFFALSE 21331
// exit ;
21329: GO 22099
// case nation of nation_american :
21331: LD_VAR 0 2
21335: PUSH
21336: LD_INT 1
21338: DOUBLE
21339: EQUAL
21340: IFTRUE 21344
21342: GO 21558
21344: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21345: LD_ADDR_VAR 0 4
21349: PUSH
21350: LD_INT 35
21352: PUSH
21353: LD_INT 45
21355: PUSH
21356: LD_INT 46
21358: PUSH
21359: LD_INT 47
21361: PUSH
21362: LD_INT 82
21364: PUSH
21365: LD_INT 83
21367: PUSH
21368: LD_INT 84
21370: PUSH
21371: LD_INT 85
21373: PUSH
21374: LD_INT 86
21376: PUSH
21377: LD_INT 1
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: LD_INT 6
21385: PUSH
21386: LD_INT 15
21388: PUSH
21389: LD_INT 16
21391: PUSH
21392: LD_INT 7
21394: PUSH
21395: LD_INT 12
21397: PUSH
21398: LD_INT 13
21400: PUSH
21401: LD_INT 10
21403: PUSH
21404: LD_INT 14
21406: PUSH
21407: LD_INT 20
21409: PUSH
21410: LD_INT 21
21412: PUSH
21413: LD_INT 22
21415: PUSH
21416: LD_INT 25
21418: PUSH
21419: LD_INT 32
21421: PUSH
21422: LD_INT 27
21424: PUSH
21425: LD_INT 36
21427: PUSH
21428: LD_INT 69
21430: PUSH
21431: LD_INT 39
21433: PUSH
21434: LD_INT 34
21436: PUSH
21437: LD_INT 40
21439: PUSH
21440: LD_INT 48
21442: PUSH
21443: LD_INT 49
21445: PUSH
21446: LD_INT 50
21448: PUSH
21449: LD_INT 51
21451: PUSH
21452: LD_INT 52
21454: PUSH
21455: LD_INT 53
21457: PUSH
21458: LD_INT 54
21460: PUSH
21461: LD_INT 55
21463: PUSH
21464: LD_INT 56
21466: PUSH
21467: LD_INT 57
21469: PUSH
21470: LD_INT 58
21472: PUSH
21473: LD_INT 59
21475: PUSH
21476: LD_INT 60
21478: PUSH
21479: LD_INT 61
21481: PUSH
21482: LD_INT 62
21484: PUSH
21485: LD_INT 80
21487: PUSH
21488: LD_INT 82
21490: PUSH
21491: LD_INT 83
21493: PUSH
21494: LD_INT 84
21496: PUSH
21497: LD_INT 85
21499: PUSH
21500: LD_INT 86
21502: PUSH
21503: EMPTY
21504: LIST
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: LIST
21510: LIST
21511: LIST
21512: LIST
21513: LIST
21514: LIST
21515: LIST
21516: LIST
21517: LIST
21518: LIST
21519: LIST
21520: LIST
21521: LIST
21522: LIST
21523: LIST
21524: LIST
21525: LIST
21526: LIST
21527: LIST
21528: LIST
21529: LIST
21530: LIST
21531: LIST
21532: LIST
21533: LIST
21534: LIST
21535: LIST
21536: LIST
21537: LIST
21538: LIST
21539: LIST
21540: LIST
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: LIST
21555: ST_TO_ADDR
21556: GO 22023
21558: LD_INT 2
21560: DOUBLE
21561: EQUAL
21562: IFTRUE 21566
21564: GO 21792
21566: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21567: LD_ADDR_VAR 0 4
21571: PUSH
21572: LD_INT 35
21574: PUSH
21575: LD_INT 45
21577: PUSH
21578: LD_INT 46
21580: PUSH
21581: LD_INT 47
21583: PUSH
21584: LD_INT 82
21586: PUSH
21587: LD_INT 83
21589: PUSH
21590: LD_INT 84
21592: PUSH
21593: LD_INT 85
21595: PUSH
21596: LD_INT 87
21598: PUSH
21599: LD_INT 70
21601: PUSH
21602: LD_INT 1
21604: PUSH
21605: LD_INT 11
21607: PUSH
21608: LD_INT 3
21610: PUSH
21611: LD_INT 4
21613: PUSH
21614: LD_INT 5
21616: PUSH
21617: LD_INT 6
21619: PUSH
21620: LD_INT 15
21622: PUSH
21623: LD_INT 18
21625: PUSH
21626: LD_INT 7
21628: PUSH
21629: LD_INT 17
21631: PUSH
21632: LD_INT 8
21634: PUSH
21635: LD_INT 20
21637: PUSH
21638: LD_INT 21
21640: PUSH
21641: LD_INT 22
21643: PUSH
21644: LD_INT 72
21646: PUSH
21647: LD_INT 26
21649: PUSH
21650: LD_INT 69
21652: PUSH
21653: LD_INT 39
21655: PUSH
21656: LD_INT 40
21658: PUSH
21659: LD_INT 41
21661: PUSH
21662: LD_INT 42
21664: PUSH
21665: LD_INT 43
21667: PUSH
21668: LD_INT 48
21670: PUSH
21671: LD_INT 49
21673: PUSH
21674: LD_INT 50
21676: PUSH
21677: LD_INT 51
21679: PUSH
21680: LD_INT 52
21682: PUSH
21683: LD_INT 53
21685: PUSH
21686: LD_INT 54
21688: PUSH
21689: LD_INT 55
21691: PUSH
21692: LD_INT 56
21694: PUSH
21695: LD_INT 60
21697: PUSH
21698: LD_INT 61
21700: PUSH
21701: LD_INT 62
21703: PUSH
21704: LD_INT 66
21706: PUSH
21707: LD_INT 67
21709: PUSH
21710: LD_INT 68
21712: PUSH
21713: LD_INT 81
21715: PUSH
21716: LD_INT 82
21718: PUSH
21719: LD_INT 83
21721: PUSH
21722: LD_INT 84
21724: PUSH
21725: LD_INT 85
21727: PUSH
21728: LD_INT 87
21730: PUSH
21731: LD_INT 88
21733: PUSH
21734: EMPTY
21735: LIST
21736: LIST
21737: LIST
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: LIST
21744: LIST
21745: LIST
21746: LIST
21747: LIST
21748: LIST
21749: LIST
21750: LIST
21751: LIST
21752: LIST
21753: LIST
21754: LIST
21755: LIST
21756: LIST
21757: LIST
21758: LIST
21759: LIST
21760: LIST
21761: LIST
21762: LIST
21763: LIST
21764: LIST
21765: LIST
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: LIST
21771: LIST
21772: LIST
21773: LIST
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: LIST
21779: LIST
21780: LIST
21781: LIST
21782: LIST
21783: LIST
21784: LIST
21785: LIST
21786: LIST
21787: LIST
21788: LIST
21789: ST_TO_ADDR
21790: GO 22023
21792: LD_INT 3
21794: DOUBLE
21795: EQUAL
21796: IFTRUE 21800
21798: GO 22022
21800: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21801: LD_ADDR_VAR 0 4
21805: PUSH
21806: LD_INT 46
21808: PUSH
21809: LD_INT 47
21811: PUSH
21812: LD_INT 1
21814: PUSH
21815: LD_INT 2
21817: PUSH
21818: LD_INT 82
21820: PUSH
21821: LD_INT 83
21823: PUSH
21824: LD_INT 84
21826: PUSH
21827: LD_INT 85
21829: PUSH
21830: LD_INT 86
21832: PUSH
21833: LD_INT 11
21835: PUSH
21836: LD_INT 9
21838: PUSH
21839: LD_INT 20
21841: PUSH
21842: LD_INT 19
21844: PUSH
21845: LD_INT 21
21847: PUSH
21848: LD_INT 24
21850: PUSH
21851: LD_INT 22
21853: PUSH
21854: LD_INT 25
21856: PUSH
21857: LD_INT 28
21859: PUSH
21860: LD_INT 29
21862: PUSH
21863: LD_INT 30
21865: PUSH
21866: LD_INT 31
21868: PUSH
21869: LD_INT 37
21871: PUSH
21872: LD_INT 38
21874: PUSH
21875: LD_INT 32
21877: PUSH
21878: LD_INT 27
21880: PUSH
21881: LD_INT 33
21883: PUSH
21884: LD_INT 69
21886: PUSH
21887: LD_INT 39
21889: PUSH
21890: LD_INT 34
21892: PUSH
21893: LD_INT 40
21895: PUSH
21896: LD_INT 71
21898: PUSH
21899: LD_INT 23
21901: PUSH
21902: LD_INT 44
21904: PUSH
21905: LD_INT 48
21907: PUSH
21908: LD_INT 49
21910: PUSH
21911: LD_INT 50
21913: PUSH
21914: LD_INT 51
21916: PUSH
21917: LD_INT 52
21919: PUSH
21920: LD_INT 53
21922: PUSH
21923: LD_INT 54
21925: PUSH
21926: LD_INT 55
21928: PUSH
21929: LD_INT 56
21931: PUSH
21932: LD_INT 57
21934: PUSH
21935: LD_INT 58
21937: PUSH
21938: LD_INT 59
21940: PUSH
21941: LD_INT 63
21943: PUSH
21944: LD_INT 64
21946: PUSH
21947: LD_INT 65
21949: PUSH
21950: LD_INT 82
21952: PUSH
21953: LD_INT 83
21955: PUSH
21956: LD_INT 84
21958: PUSH
21959: LD_INT 85
21961: PUSH
21962: LD_INT 86
21964: PUSH
21965: EMPTY
21966: LIST
21967: LIST
21968: LIST
21969: LIST
21970: LIST
21971: LIST
21972: LIST
21973: LIST
21974: LIST
21975: LIST
21976: LIST
21977: LIST
21978: LIST
21979: LIST
21980: LIST
21981: LIST
21982: LIST
21983: LIST
21984: LIST
21985: LIST
21986: LIST
21987: LIST
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: LIST
21994: LIST
21995: LIST
21996: LIST
21997: LIST
21998: LIST
21999: LIST
22000: LIST
22001: LIST
22002: LIST
22003: LIST
22004: LIST
22005: LIST
22006: LIST
22007: LIST
22008: LIST
22009: LIST
22010: LIST
22011: LIST
22012: LIST
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: LIST
22018: LIST
22019: ST_TO_ADDR
22020: GO 22023
22022: POP
// if state > - 1 and state < 3 then
22023: LD_VAR 0 3
22027: PUSH
22028: LD_INT 1
22030: NEG
22031: GREATER
22032: PUSH
22033: LD_VAR 0 3
22037: PUSH
22038: LD_INT 3
22040: LESS
22041: AND
22042: IFFALSE 22099
// for i in result do
22044: LD_ADDR_VAR 0 5
22048: PUSH
22049: LD_VAR 0 4
22053: PUSH
22054: FOR_IN
22055: IFFALSE 22097
// if GetTech ( i , side ) <> state then
22057: LD_VAR 0 5
22061: PPUSH
22062: LD_VAR 0 1
22066: PPUSH
22067: CALL_OW 321
22071: PUSH
22072: LD_VAR 0 3
22076: NONEQUAL
22077: IFFALSE 22095
// result := result diff i ;
22079: LD_ADDR_VAR 0 4
22083: PUSH
22084: LD_VAR 0 4
22088: PUSH
22089: LD_VAR 0 5
22093: DIFF
22094: ST_TO_ADDR
22095: GO 22054
22097: POP
22098: POP
// end ;
22099: LD_VAR 0 4
22103: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22104: LD_INT 0
22106: PPUSH
22107: PPUSH
22108: PPUSH
// result := true ;
22109: LD_ADDR_VAR 0 3
22113: PUSH
22114: LD_INT 1
22116: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22117: LD_ADDR_VAR 0 5
22121: PUSH
22122: LD_VAR 0 2
22126: PPUSH
22127: CALL_OW 480
22131: ST_TO_ADDR
// if not tmp then
22132: LD_VAR 0 5
22136: NOT
22137: IFFALSE 22141
// exit ;
22139: GO 22190
// for i in tmp do
22141: LD_ADDR_VAR 0 4
22145: PUSH
22146: LD_VAR 0 5
22150: PUSH
22151: FOR_IN
22152: IFFALSE 22188
// if GetTech ( i , side ) <> state_researched then
22154: LD_VAR 0 4
22158: PPUSH
22159: LD_VAR 0 1
22163: PPUSH
22164: CALL_OW 321
22168: PUSH
22169: LD_INT 2
22171: NONEQUAL
22172: IFFALSE 22186
// begin result := false ;
22174: LD_ADDR_VAR 0 3
22178: PUSH
22179: LD_INT 0
22181: ST_TO_ADDR
// exit ;
22182: POP
22183: POP
22184: GO 22190
// end ;
22186: GO 22151
22188: POP
22189: POP
// end ;
22190: LD_VAR 0 3
22194: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22195: LD_INT 0
22197: PPUSH
22198: PPUSH
22199: PPUSH
22200: PPUSH
22201: PPUSH
22202: PPUSH
22203: PPUSH
22204: PPUSH
22205: PPUSH
22206: PPUSH
22207: PPUSH
22208: PPUSH
22209: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22210: LD_VAR 0 1
22214: NOT
22215: PUSH
22216: LD_VAR 0 1
22220: PPUSH
22221: CALL_OW 257
22225: PUSH
22226: LD_INT 9
22228: NONEQUAL
22229: OR
22230: IFFALSE 22234
// exit ;
22232: GO 22807
// side := GetSide ( unit ) ;
22234: LD_ADDR_VAR 0 9
22238: PUSH
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 255
22248: ST_TO_ADDR
// tech_space := tech_spacanom ;
22249: LD_ADDR_VAR 0 12
22253: PUSH
22254: LD_INT 29
22256: ST_TO_ADDR
// tech_time := tech_taurad ;
22257: LD_ADDR_VAR 0 13
22261: PUSH
22262: LD_INT 28
22264: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22265: LD_ADDR_VAR 0 11
22269: PUSH
22270: LD_VAR 0 1
22274: PPUSH
22275: CALL_OW 310
22279: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22280: LD_VAR 0 11
22284: PPUSH
22285: CALL_OW 247
22289: PUSH
22290: LD_INT 2
22292: EQUAL
22293: IFFALSE 22297
// exit ;
22295: GO 22807
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22297: LD_ADDR_VAR 0 8
22301: PUSH
22302: LD_INT 81
22304: PUSH
22305: LD_VAR 0 9
22309: PUSH
22310: EMPTY
22311: LIST
22312: LIST
22313: PUSH
22314: LD_INT 3
22316: PUSH
22317: LD_INT 21
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PUSH
22331: EMPTY
22332: LIST
22333: LIST
22334: PPUSH
22335: CALL_OW 69
22339: ST_TO_ADDR
// if not tmp then
22340: LD_VAR 0 8
22344: NOT
22345: IFFALSE 22349
// exit ;
22347: GO 22807
// if in_unit then
22349: LD_VAR 0 11
22353: IFFALSE 22377
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22355: LD_ADDR_VAR 0 10
22359: PUSH
22360: LD_VAR 0 8
22364: PPUSH
22365: LD_VAR 0 11
22369: PPUSH
22370: CALL_OW 74
22374: ST_TO_ADDR
22375: GO 22397
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22377: LD_ADDR_VAR 0 10
22381: PUSH
22382: LD_VAR 0 8
22386: PPUSH
22387: LD_VAR 0 1
22391: PPUSH
22392: CALL_OW 74
22396: ST_TO_ADDR
// if not enemy then
22397: LD_VAR 0 10
22401: NOT
22402: IFFALSE 22406
// exit ;
22404: GO 22807
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22406: LD_VAR 0 11
22410: PUSH
22411: LD_VAR 0 11
22415: PPUSH
22416: LD_VAR 0 10
22420: PPUSH
22421: CALL_OW 296
22425: PUSH
22426: LD_INT 13
22428: GREATER
22429: AND
22430: PUSH
22431: LD_VAR 0 1
22435: PPUSH
22436: LD_VAR 0 10
22440: PPUSH
22441: CALL_OW 296
22445: PUSH
22446: LD_INT 12
22448: GREATER
22449: OR
22450: IFFALSE 22454
// exit ;
22452: GO 22807
// missile := [ 1 ] ;
22454: LD_ADDR_VAR 0 14
22458: PUSH
22459: LD_INT 1
22461: PUSH
22462: EMPTY
22463: LIST
22464: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22465: LD_VAR 0 9
22469: PPUSH
22470: LD_VAR 0 12
22474: PPUSH
22475: CALL_OW 325
22479: IFFALSE 22508
// missile := Replace ( missile , missile + 1 , 2 ) ;
22481: LD_ADDR_VAR 0 14
22485: PUSH
22486: LD_VAR 0 14
22490: PPUSH
22491: LD_VAR 0 14
22495: PUSH
22496: LD_INT 1
22498: PLUS
22499: PPUSH
22500: LD_INT 2
22502: PPUSH
22503: CALL_OW 1
22507: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22508: LD_VAR 0 9
22512: PPUSH
22513: LD_VAR 0 13
22517: PPUSH
22518: CALL_OW 325
22522: PUSH
22523: LD_VAR 0 10
22527: PPUSH
22528: CALL_OW 255
22532: PPUSH
22533: LD_VAR 0 13
22537: PPUSH
22538: CALL_OW 325
22542: NOT
22543: AND
22544: IFFALSE 22573
// missile := Replace ( missile , missile + 1 , 3 ) ;
22546: LD_ADDR_VAR 0 14
22550: PUSH
22551: LD_VAR 0 14
22555: PPUSH
22556: LD_VAR 0 14
22560: PUSH
22561: LD_INT 1
22563: PLUS
22564: PPUSH
22565: LD_INT 3
22567: PPUSH
22568: CALL_OW 1
22572: ST_TO_ADDR
// if missile < 2 then
22573: LD_VAR 0 14
22577: PUSH
22578: LD_INT 2
22580: LESS
22581: IFFALSE 22585
// exit ;
22583: GO 22807
// x := GetX ( enemy ) ;
22585: LD_ADDR_VAR 0 4
22589: PUSH
22590: LD_VAR 0 10
22594: PPUSH
22595: CALL_OW 250
22599: ST_TO_ADDR
// y := GetY ( enemy ) ;
22600: LD_ADDR_VAR 0 5
22604: PUSH
22605: LD_VAR 0 10
22609: PPUSH
22610: CALL_OW 251
22614: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22615: LD_ADDR_VAR 0 6
22619: PUSH
22620: LD_VAR 0 4
22624: PUSH
22625: LD_INT 1
22627: NEG
22628: PPUSH
22629: LD_INT 1
22631: PPUSH
22632: CALL_OW 12
22636: PLUS
22637: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22638: LD_ADDR_VAR 0 7
22642: PUSH
22643: LD_VAR 0 5
22647: PUSH
22648: LD_INT 1
22650: NEG
22651: PPUSH
22652: LD_INT 1
22654: PPUSH
22655: CALL_OW 12
22659: PLUS
22660: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22661: LD_VAR 0 6
22665: PPUSH
22666: LD_VAR 0 7
22670: PPUSH
22671: CALL_OW 488
22675: NOT
22676: IFFALSE 22698
// begin _x := x ;
22678: LD_ADDR_VAR 0 6
22682: PUSH
22683: LD_VAR 0 4
22687: ST_TO_ADDR
// _y := y ;
22688: LD_ADDR_VAR 0 7
22692: PUSH
22693: LD_VAR 0 5
22697: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22698: LD_ADDR_VAR 0 3
22702: PUSH
22703: LD_INT 1
22705: PPUSH
22706: LD_VAR 0 14
22710: PPUSH
22711: CALL_OW 12
22715: ST_TO_ADDR
// case i of 1 :
22716: LD_VAR 0 3
22720: PUSH
22721: LD_INT 1
22723: DOUBLE
22724: EQUAL
22725: IFTRUE 22729
22727: GO 22746
22729: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_VAR 0 10
22739: PPUSH
22740: CALL_OW 115
22744: GO 22807
22746: LD_INT 2
22748: DOUBLE
22749: EQUAL
22750: IFTRUE 22754
22752: GO 22776
22754: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22755: LD_VAR 0 1
22759: PPUSH
22760: LD_VAR 0 6
22764: PPUSH
22765: LD_VAR 0 7
22769: PPUSH
22770: CALL_OW 153
22774: GO 22807
22776: LD_INT 3
22778: DOUBLE
22779: EQUAL
22780: IFTRUE 22784
22782: GO 22806
22784: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22785: LD_VAR 0 1
22789: PPUSH
22790: LD_VAR 0 6
22794: PPUSH
22795: LD_VAR 0 7
22799: PPUSH
22800: CALL_OW 154
22804: GO 22807
22806: POP
// end ;
22807: LD_VAR 0 2
22811: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22812: LD_INT 0
22814: PPUSH
22815: PPUSH
22816: PPUSH
22817: PPUSH
22818: PPUSH
22819: PPUSH
// if not unit or not building then
22820: LD_VAR 0 1
22824: NOT
22825: PUSH
22826: LD_VAR 0 2
22830: NOT
22831: OR
22832: IFFALSE 22836
// exit ;
22834: GO 22994
// x := GetX ( building ) ;
22836: LD_ADDR_VAR 0 5
22840: PUSH
22841: LD_VAR 0 2
22845: PPUSH
22846: CALL_OW 250
22850: ST_TO_ADDR
// y := GetY ( building ) ;
22851: LD_ADDR_VAR 0 6
22855: PUSH
22856: LD_VAR 0 2
22860: PPUSH
22861: CALL_OW 251
22865: ST_TO_ADDR
// for i = 0 to 5 do
22866: LD_ADDR_VAR 0 4
22870: PUSH
22871: DOUBLE
22872: LD_INT 0
22874: DEC
22875: ST_TO_ADDR
22876: LD_INT 5
22878: PUSH
22879: FOR_TO
22880: IFFALSE 22992
// begin _x := ShiftX ( x , i , 3 ) ;
22882: LD_ADDR_VAR 0 7
22886: PUSH
22887: LD_VAR 0 5
22891: PPUSH
22892: LD_VAR 0 4
22896: PPUSH
22897: LD_INT 3
22899: PPUSH
22900: CALL_OW 272
22904: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22905: LD_ADDR_VAR 0 8
22909: PUSH
22910: LD_VAR 0 6
22914: PPUSH
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_INT 3
22922: PPUSH
22923: CALL_OW 273
22927: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22928: LD_VAR 0 7
22932: PPUSH
22933: LD_VAR 0 8
22937: PPUSH
22938: CALL_OW 488
22942: NOT
22943: IFFALSE 22947
// continue ;
22945: GO 22879
// if HexInfo ( _x , _y ) = 0 then
22947: LD_VAR 0 7
22951: PPUSH
22952: LD_VAR 0 8
22956: PPUSH
22957: CALL_OW 428
22961: PUSH
22962: LD_INT 0
22964: EQUAL
22965: IFFALSE 22990
// begin ComMoveXY ( unit , _x , _y ) ;
22967: LD_VAR 0 1
22971: PPUSH
22972: LD_VAR 0 7
22976: PPUSH
22977: LD_VAR 0 8
22981: PPUSH
22982: CALL_OW 111
// exit ;
22986: POP
22987: POP
22988: GO 22994
// end ; end ;
22990: GO 22879
22992: POP
22993: POP
// end ;
22994: LD_VAR 0 3
22998: RET
// export function ScanBase ( side , base_area ) ; begin
22999: LD_INT 0
23001: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23002: LD_ADDR_VAR 0 3
23006: PUSH
23007: LD_VAR 0 2
23011: PPUSH
23012: LD_INT 81
23014: PUSH
23015: LD_VAR 0 1
23019: PUSH
23020: EMPTY
23021: LIST
23022: LIST
23023: PPUSH
23024: CALL_OW 70
23028: ST_TO_ADDR
// end ;
23029: LD_VAR 0 3
23033: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23034: LD_INT 0
23036: PPUSH
23037: PPUSH
23038: PPUSH
23039: PPUSH
// result := false ;
23040: LD_ADDR_VAR 0 2
23044: PUSH
23045: LD_INT 0
23047: ST_TO_ADDR
// side := GetSide ( unit ) ;
23048: LD_ADDR_VAR 0 3
23052: PUSH
23053: LD_VAR 0 1
23057: PPUSH
23058: CALL_OW 255
23062: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23063: LD_ADDR_VAR 0 4
23067: PUSH
23068: LD_VAR 0 1
23072: PPUSH
23073: CALL_OW 248
23077: ST_TO_ADDR
// case nat of 1 :
23078: LD_VAR 0 4
23082: PUSH
23083: LD_INT 1
23085: DOUBLE
23086: EQUAL
23087: IFTRUE 23091
23089: GO 23102
23091: POP
// tech := tech_lassight ; 2 :
23092: LD_ADDR_VAR 0 5
23096: PUSH
23097: LD_INT 12
23099: ST_TO_ADDR
23100: GO 23141
23102: LD_INT 2
23104: DOUBLE
23105: EQUAL
23106: IFTRUE 23110
23108: GO 23121
23110: POP
// tech := tech_mortar ; 3 :
23111: LD_ADDR_VAR 0 5
23115: PUSH
23116: LD_INT 41
23118: ST_TO_ADDR
23119: GO 23141
23121: LD_INT 3
23123: DOUBLE
23124: EQUAL
23125: IFTRUE 23129
23127: GO 23140
23129: POP
// tech := tech_bazooka ; end ;
23130: LD_ADDR_VAR 0 5
23134: PUSH
23135: LD_INT 44
23137: ST_TO_ADDR
23138: GO 23141
23140: POP
// if Researched ( side , tech ) then
23141: LD_VAR 0 3
23145: PPUSH
23146: LD_VAR 0 5
23150: PPUSH
23151: CALL_OW 325
23155: IFFALSE 23182
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23157: LD_ADDR_VAR 0 2
23161: PUSH
23162: LD_INT 5
23164: PUSH
23165: LD_INT 8
23167: PUSH
23168: LD_INT 9
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: LIST
23175: PUSH
23176: LD_VAR 0 4
23180: ARRAY
23181: ST_TO_ADDR
// end ;
23182: LD_VAR 0 2
23186: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23187: LD_INT 0
23189: PPUSH
23190: PPUSH
23191: PPUSH
// if not mines then
23192: LD_VAR 0 2
23196: NOT
23197: IFFALSE 23201
// exit ;
23199: GO 23345
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23201: LD_ADDR_VAR 0 5
23205: PUSH
23206: LD_INT 81
23208: PUSH
23209: LD_VAR 0 1
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: PUSH
23218: LD_INT 3
23220: PUSH
23221: LD_INT 21
23223: PUSH
23224: LD_INT 3
23226: PUSH
23227: EMPTY
23228: LIST
23229: LIST
23230: PUSH
23231: EMPTY
23232: LIST
23233: LIST
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PPUSH
23239: CALL_OW 69
23243: ST_TO_ADDR
// for i in mines do
23244: LD_ADDR_VAR 0 4
23248: PUSH
23249: LD_VAR 0 2
23253: PUSH
23254: FOR_IN
23255: IFFALSE 23343
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23257: LD_VAR 0 4
23261: PUSH
23262: LD_INT 1
23264: ARRAY
23265: PPUSH
23266: LD_VAR 0 4
23270: PUSH
23271: LD_INT 2
23273: ARRAY
23274: PPUSH
23275: CALL_OW 458
23279: NOT
23280: IFFALSE 23284
// continue ;
23282: GO 23254
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23284: LD_VAR 0 4
23288: PUSH
23289: LD_INT 1
23291: ARRAY
23292: PPUSH
23293: LD_VAR 0 4
23297: PUSH
23298: LD_INT 2
23300: ARRAY
23301: PPUSH
23302: CALL_OW 428
23306: PUSH
23307: LD_VAR 0 5
23311: IN
23312: IFFALSE 23341
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23314: LD_VAR 0 4
23318: PUSH
23319: LD_INT 1
23321: ARRAY
23322: PPUSH
23323: LD_VAR 0 4
23327: PUSH
23328: LD_INT 2
23330: ARRAY
23331: PPUSH
23332: LD_VAR 0 1
23336: PPUSH
23337: CALL_OW 456
// end ;
23341: GO 23254
23343: POP
23344: POP
// end ;
23345: LD_VAR 0 3
23349: RET
// export function Count ( array ) ; begin
23350: LD_INT 0
23352: PPUSH
// result := array + 0 ;
23353: LD_ADDR_VAR 0 2
23357: PUSH
23358: LD_VAR 0 1
23362: PUSH
23363: LD_INT 0
23365: PLUS
23366: ST_TO_ADDR
// end ;
23367: LD_VAR 0 2
23371: RET
// export function IsEmpty ( building ) ; begin
23372: LD_INT 0
23374: PPUSH
// if not building then
23375: LD_VAR 0 1
23379: NOT
23380: IFFALSE 23384
// exit ;
23382: GO 23427
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23384: LD_ADDR_VAR 0 2
23388: PUSH
23389: LD_VAR 0 1
23393: PUSH
23394: LD_INT 22
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 255
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: PUSH
23411: LD_INT 58
23413: PUSH
23414: EMPTY
23415: LIST
23416: PUSH
23417: EMPTY
23418: LIST
23419: LIST
23420: PPUSH
23421: CALL_OW 69
23425: IN
23426: ST_TO_ADDR
// end ;
23427: LD_VAR 0 2
23431: RET
// export function IsNotFull ( building ) ; var places ; begin
23432: LD_INT 0
23434: PPUSH
23435: PPUSH
// if not building then
23436: LD_VAR 0 1
23440: NOT
23441: IFFALSE 23445
// exit ;
23443: GO 23473
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
23445: LD_ADDR_VAR 0 2
23449: PUSH
23450: LD_VAR 0 1
23454: PPUSH
23455: LD_INT 3
23457: PUSH
23458: LD_INT 62
23460: PUSH
23461: EMPTY
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PPUSH
23468: CALL_OW 72
23472: ST_TO_ADDR
// end ;
23473: LD_VAR 0 2
23477: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23478: LD_INT 0
23480: PPUSH
23481: PPUSH
23482: PPUSH
23483: PPUSH
// tmp := [ ] ;
23484: LD_ADDR_VAR 0 3
23488: PUSH
23489: EMPTY
23490: ST_TO_ADDR
// list := [ ] ;
23491: LD_ADDR_VAR 0 5
23495: PUSH
23496: EMPTY
23497: ST_TO_ADDR
// for i = 16 to 25 do
23498: LD_ADDR_VAR 0 4
23502: PUSH
23503: DOUBLE
23504: LD_INT 16
23506: DEC
23507: ST_TO_ADDR
23508: LD_INT 25
23510: PUSH
23511: FOR_TO
23512: IFFALSE 23585
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23514: LD_ADDR_VAR 0 3
23518: PUSH
23519: LD_VAR 0 3
23523: PUSH
23524: LD_INT 22
23526: PUSH
23527: LD_VAR 0 1
23531: PPUSH
23532: CALL_OW 255
23536: PUSH
23537: EMPTY
23538: LIST
23539: LIST
23540: PUSH
23541: LD_INT 91
23543: PUSH
23544: LD_VAR 0 1
23548: PUSH
23549: LD_INT 6
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: LIST
23556: PUSH
23557: LD_INT 30
23559: PUSH
23560: LD_VAR 0 4
23564: PUSH
23565: EMPTY
23566: LIST
23567: LIST
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: PUSH
23574: EMPTY
23575: LIST
23576: PPUSH
23577: CALL_OW 69
23581: ADD
23582: ST_TO_ADDR
23583: GO 23511
23585: POP
23586: POP
// for i = 1 to tmp do
23587: LD_ADDR_VAR 0 4
23591: PUSH
23592: DOUBLE
23593: LD_INT 1
23595: DEC
23596: ST_TO_ADDR
23597: LD_VAR 0 3
23601: PUSH
23602: FOR_TO
23603: IFFALSE 23691
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23605: LD_ADDR_VAR 0 5
23609: PUSH
23610: LD_VAR 0 5
23614: PUSH
23615: LD_VAR 0 3
23619: PUSH
23620: LD_VAR 0 4
23624: ARRAY
23625: PPUSH
23626: CALL_OW 266
23630: PUSH
23631: LD_VAR 0 3
23635: PUSH
23636: LD_VAR 0 4
23640: ARRAY
23641: PPUSH
23642: CALL_OW 250
23646: PUSH
23647: LD_VAR 0 3
23651: PUSH
23652: LD_VAR 0 4
23656: ARRAY
23657: PPUSH
23658: CALL_OW 251
23662: PUSH
23663: LD_VAR 0 3
23667: PUSH
23668: LD_VAR 0 4
23672: ARRAY
23673: PPUSH
23674: CALL_OW 254
23678: PUSH
23679: EMPTY
23680: LIST
23681: LIST
23682: LIST
23683: LIST
23684: PUSH
23685: EMPTY
23686: LIST
23687: ADD
23688: ST_TO_ADDR
23689: GO 23602
23691: POP
23692: POP
// result := list ;
23693: LD_ADDR_VAR 0 2
23697: PUSH
23698: LD_VAR 0 5
23702: ST_TO_ADDR
// end ;
23703: LD_VAR 0 2
23707: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23708: LD_INT 0
23710: PPUSH
23711: PPUSH
23712: PPUSH
23713: PPUSH
23714: PPUSH
23715: PPUSH
23716: PPUSH
// if not factory then
23717: LD_VAR 0 1
23721: NOT
23722: IFFALSE 23726
// exit ;
23724: GO 24319
// if control = control_apeman then
23726: LD_VAR 0 4
23730: PUSH
23731: LD_INT 5
23733: EQUAL
23734: IFFALSE 23843
// begin tmp := UnitsInside ( factory ) ;
23736: LD_ADDR_VAR 0 8
23740: PUSH
23741: LD_VAR 0 1
23745: PPUSH
23746: CALL_OW 313
23750: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23751: LD_VAR 0 8
23755: PPUSH
23756: LD_INT 25
23758: PUSH
23759: LD_INT 12
23761: PUSH
23762: EMPTY
23763: LIST
23764: LIST
23765: PPUSH
23766: CALL_OW 72
23770: NOT
23771: IFFALSE 23781
// control := control_manual ;
23773: LD_ADDR_VAR 0 4
23777: PUSH
23778: LD_INT 1
23780: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23781: LD_ADDR_VAR 0 8
23785: PUSH
23786: LD_VAR 0 1
23790: PPUSH
23791: CALL 23478 0 1
23795: ST_TO_ADDR
// if tmp then
23796: LD_VAR 0 8
23800: IFFALSE 23843
// begin for i in tmp do
23802: LD_ADDR_VAR 0 7
23806: PUSH
23807: LD_VAR 0 8
23811: PUSH
23812: FOR_IN
23813: IFFALSE 23841
// if i [ 1 ] = b_ext_radio then
23815: LD_VAR 0 7
23819: PUSH
23820: LD_INT 1
23822: ARRAY
23823: PUSH
23824: LD_INT 22
23826: EQUAL
23827: IFFALSE 23839
// begin control := control_remote ;
23829: LD_ADDR_VAR 0 4
23833: PUSH
23834: LD_INT 2
23836: ST_TO_ADDR
// break ;
23837: GO 23841
// end ;
23839: GO 23812
23841: POP
23842: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23843: LD_VAR 0 1
23847: PPUSH
23848: LD_VAR 0 2
23852: PPUSH
23853: LD_VAR 0 3
23857: PPUSH
23858: LD_VAR 0 4
23862: PPUSH
23863: LD_VAR 0 5
23867: PPUSH
23868: CALL_OW 448
23872: IFFALSE 23907
// begin result := [ chassis , engine , control , weapon ] ;
23874: LD_ADDR_VAR 0 6
23878: PUSH
23879: LD_VAR 0 2
23883: PUSH
23884: LD_VAR 0 3
23888: PUSH
23889: LD_VAR 0 4
23893: PUSH
23894: LD_VAR 0 5
23898: PUSH
23899: EMPTY
23900: LIST
23901: LIST
23902: LIST
23903: LIST
23904: ST_TO_ADDR
// exit ;
23905: GO 24319
// end ; _chassis := AvailableChassisList ( factory ) ;
23907: LD_ADDR_VAR 0 9
23911: PUSH
23912: LD_VAR 0 1
23916: PPUSH
23917: CALL_OW 475
23921: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23922: LD_ADDR_VAR 0 11
23926: PUSH
23927: LD_VAR 0 1
23931: PPUSH
23932: CALL_OW 476
23936: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23937: LD_ADDR_VAR 0 12
23941: PUSH
23942: LD_VAR 0 1
23946: PPUSH
23947: CALL_OW 477
23951: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23952: LD_ADDR_VAR 0 10
23956: PUSH
23957: LD_VAR 0 1
23961: PPUSH
23962: CALL_OW 478
23966: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23967: LD_VAR 0 9
23971: NOT
23972: PUSH
23973: LD_VAR 0 11
23977: NOT
23978: OR
23979: PUSH
23980: LD_VAR 0 12
23984: NOT
23985: OR
23986: PUSH
23987: LD_VAR 0 10
23991: NOT
23992: OR
23993: IFFALSE 24028
// begin result := [ chassis , engine , control , weapon ] ;
23995: LD_ADDR_VAR 0 6
23999: PUSH
24000: LD_VAR 0 2
24004: PUSH
24005: LD_VAR 0 3
24009: PUSH
24010: LD_VAR 0 4
24014: PUSH
24015: LD_VAR 0 5
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: LIST
24024: LIST
24025: ST_TO_ADDR
// exit ;
24026: GO 24319
// end ; if not chassis in _chassis then
24028: LD_VAR 0 2
24032: PUSH
24033: LD_VAR 0 9
24037: IN
24038: NOT
24039: IFFALSE 24065
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24041: LD_ADDR_VAR 0 2
24045: PUSH
24046: LD_VAR 0 9
24050: PUSH
24051: LD_INT 1
24053: PPUSH
24054: LD_VAR 0 9
24058: PPUSH
24059: CALL_OW 12
24063: ARRAY
24064: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24065: LD_VAR 0 2
24069: PPUSH
24070: LD_VAR 0 3
24074: PPUSH
24075: CALL 24324 0 2
24079: NOT
24080: IFFALSE 24139
// repeat engine := _engine [ 1 ] ;
24082: LD_ADDR_VAR 0 3
24086: PUSH
24087: LD_VAR 0 11
24091: PUSH
24092: LD_INT 1
24094: ARRAY
24095: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24096: LD_ADDR_VAR 0 11
24100: PUSH
24101: LD_VAR 0 11
24105: PPUSH
24106: LD_INT 1
24108: PPUSH
24109: CALL_OW 3
24113: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24114: LD_VAR 0 2
24118: PPUSH
24119: LD_VAR 0 3
24123: PPUSH
24124: CALL 24324 0 2
24128: PUSH
24129: LD_VAR 0 11
24133: PUSH
24134: EMPTY
24135: EQUAL
24136: OR
24137: IFFALSE 24082
// if not control in _control then
24139: LD_VAR 0 4
24143: PUSH
24144: LD_VAR 0 12
24148: IN
24149: NOT
24150: IFFALSE 24176
// control := _control [ rand ( 1 , _control ) ] ;
24152: LD_ADDR_VAR 0 4
24156: PUSH
24157: LD_VAR 0 12
24161: PUSH
24162: LD_INT 1
24164: PPUSH
24165: LD_VAR 0 12
24169: PPUSH
24170: CALL_OW 12
24174: ARRAY
24175: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24176: LD_VAR 0 2
24180: PPUSH
24181: LD_VAR 0 5
24185: PPUSH
24186: CALL 24544 0 2
24190: NOT
24191: IFFALSE 24250
// repeat weapon := _weapon [ 1 ] ;
24193: LD_ADDR_VAR 0 5
24197: PUSH
24198: LD_VAR 0 10
24202: PUSH
24203: LD_INT 1
24205: ARRAY
24206: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24207: LD_ADDR_VAR 0 10
24211: PUSH
24212: LD_VAR 0 10
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 3
24224: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24225: LD_VAR 0 2
24229: PPUSH
24230: LD_VAR 0 5
24234: PPUSH
24235: CALL 24544 0 2
24239: PUSH
24240: LD_VAR 0 10
24244: PUSH
24245: EMPTY
24246: EQUAL
24247: OR
24248: IFFALSE 24193
// result := [ ] ;
24250: LD_ADDR_VAR 0 6
24254: PUSH
24255: EMPTY
24256: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24257: LD_VAR 0 1
24261: PPUSH
24262: LD_VAR 0 2
24266: PPUSH
24267: LD_VAR 0 3
24271: PPUSH
24272: LD_VAR 0 4
24276: PPUSH
24277: LD_VAR 0 5
24281: PPUSH
24282: CALL_OW 448
24286: IFFALSE 24319
// result := [ chassis , engine , control , weapon ] ;
24288: LD_ADDR_VAR 0 6
24292: PUSH
24293: LD_VAR 0 2
24297: PUSH
24298: LD_VAR 0 3
24302: PUSH
24303: LD_VAR 0 4
24307: PUSH
24308: LD_VAR 0 5
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
// end ;
24319: LD_VAR 0 6
24323: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24324: LD_INT 0
24326: PPUSH
// if not chassis or not engine then
24327: LD_VAR 0 1
24331: NOT
24332: PUSH
24333: LD_VAR 0 2
24337: NOT
24338: OR
24339: IFFALSE 24343
// exit ;
24341: GO 24539
// case engine of engine_solar :
24343: LD_VAR 0 2
24347: PUSH
24348: LD_INT 2
24350: DOUBLE
24351: EQUAL
24352: IFTRUE 24356
24354: GO 24394
24356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24357: LD_ADDR_VAR 0 3
24361: PUSH
24362: LD_INT 11
24364: PUSH
24365: LD_INT 12
24367: PUSH
24368: LD_INT 13
24370: PUSH
24371: LD_INT 14
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: LD_INT 2
24379: PUSH
24380: LD_INT 3
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: LIST
24389: LIST
24390: LIST
24391: ST_TO_ADDR
24392: GO 24523
24394: LD_INT 1
24396: DOUBLE
24397: EQUAL
24398: IFTRUE 24402
24400: GO 24464
24402: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24403: LD_ADDR_VAR 0 3
24407: PUSH
24408: LD_INT 11
24410: PUSH
24411: LD_INT 12
24413: PUSH
24414: LD_INT 13
24416: PUSH
24417: LD_INT 14
24419: PUSH
24420: LD_INT 1
24422: PUSH
24423: LD_INT 2
24425: PUSH
24426: LD_INT 3
24428: PUSH
24429: LD_INT 4
24431: PUSH
24432: LD_INT 5
24434: PUSH
24435: LD_INT 21
24437: PUSH
24438: LD_INT 23
24440: PUSH
24441: LD_INT 22
24443: PUSH
24444: LD_INT 24
24446: PUSH
24447: EMPTY
24448: LIST
24449: LIST
24450: LIST
24451: LIST
24452: LIST
24453: LIST
24454: LIST
24455: LIST
24456: LIST
24457: LIST
24458: LIST
24459: LIST
24460: LIST
24461: ST_TO_ADDR
24462: GO 24523
24464: LD_INT 3
24466: DOUBLE
24467: EQUAL
24468: IFTRUE 24472
24470: GO 24522
24472: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24473: LD_ADDR_VAR 0 3
24477: PUSH
24478: LD_INT 13
24480: PUSH
24481: LD_INT 14
24483: PUSH
24484: LD_INT 2
24486: PUSH
24487: LD_INT 3
24489: PUSH
24490: LD_INT 4
24492: PUSH
24493: LD_INT 5
24495: PUSH
24496: LD_INT 21
24498: PUSH
24499: LD_INT 22
24501: PUSH
24502: LD_INT 23
24504: PUSH
24505: LD_INT 24
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: ST_TO_ADDR
24520: GO 24523
24522: POP
// result := ( chassis in result ) ;
24523: LD_ADDR_VAR 0 3
24527: PUSH
24528: LD_VAR 0 1
24532: PUSH
24533: LD_VAR 0 3
24537: IN
24538: ST_TO_ADDR
// end ;
24539: LD_VAR 0 3
24543: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24544: LD_INT 0
24546: PPUSH
// if not chassis or not weapon then
24547: LD_VAR 0 1
24551: NOT
24552: PUSH
24553: LD_VAR 0 2
24557: NOT
24558: OR
24559: IFFALSE 24563
// exit ;
24561: GO 25623
// case weapon of us_machine_gun :
24563: LD_VAR 0 2
24567: PUSH
24568: LD_INT 2
24570: DOUBLE
24571: EQUAL
24572: IFTRUE 24576
24574: GO 24606
24576: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24577: LD_ADDR_VAR 0 3
24581: PUSH
24582: LD_INT 1
24584: PUSH
24585: LD_INT 2
24587: PUSH
24588: LD_INT 3
24590: PUSH
24591: LD_INT 4
24593: PUSH
24594: LD_INT 5
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: LIST
24601: LIST
24602: LIST
24603: ST_TO_ADDR
24604: GO 25607
24606: LD_INT 3
24608: DOUBLE
24609: EQUAL
24610: IFTRUE 24614
24612: GO 24644
24614: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24615: LD_ADDR_VAR 0 3
24619: PUSH
24620: LD_INT 1
24622: PUSH
24623: LD_INT 2
24625: PUSH
24626: LD_INT 3
24628: PUSH
24629: LD_INT 4
24631: PUSH
24632: LD_INT 5
24634: PUSH
24635: EMPTY
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: ST_TO_ADDR
24642: GO 25607
24644: LD_INT 11
24646: DOUBLE
24647: EQUAL
24648: IFTRUE 24652
24650: GO 24682
24652: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24653: LD_ADDR_VAR 0 3
24657: PUSH
24658: LD_INT 1
24660: PUSH
24661: LD_INT 2
24663: PUSH
24664: LD_INT 3
24666: PUSH
24667: LD_INT 4
24669: PUSH
24670: LD_INT 5
24672: PUSH
24673: EMPTY
24674: LIST
24675: LIST
24676: LIST
24677: LIST
24678: LIST
24679: ST_TO_ADDR
24680: GO 25607
24682: LD_INT 4
24684: DOUBLE
24685: EQUAL
24686: IFTRUE 24690
24688: GO 24716
24690: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24691: LD_ADDR_VAR 0 3
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: LD_INT 3
24701: PUSH
24702: LD_INT 4
24704: PUSH
24705: LD_INT 5
24707: PUSH
24708: EMPTY
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: ST_TO_ADDR
24714: GO 25607
24716: LD_INT 5
24718: DOUBLE
24719: EQUAL
24720: IFTRUE 24724
24722: GO 24750
24724: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24725: LD_ADDR_VAR 0 3
24729: PUSH
24730: LD_INT 2
24732: PUSH
24733: LD_INT 3
24735: PUSH
24736: LD_INT 4
24738: PUSH
24739: LD_INT 5
24741: PUSH
24742: EMPTY
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
24748: GO 25607
24750: LD_INT 9
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24758
24756: GO 24784
24758: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24759: LD_ADDR_VAR 0 3
24763: PUSH
24764: LD_INT 2
24766: PUSH
24767: LD_INT 3
24769: PUSH
24770: LD_INT 4
24772: PUSH
24773: LD_INT 5
24775: PUSH
24776: EMPTY
24777: LIST
24778: LIST
24779: LIST
24780: LIST
24781: ST_TO_ADDR
24782: GO 25607
24784: LD_INT 7
24786: DOUBLE
24787: EQUAL
24788: IFTRUE 24792
24790: GO 24818
24792: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24793: LD_ADDR_VAR 0 3
24797: PUSH
24798: LD_INT 2
24800: PUSH
24801: LD_INT 3
24803: PUSH
24804: LD_INT 4
24806: PUSH
24807: LD_INT 5
24809: PUSH
24810: EMPTY
24811: LIST
24812: LIST
24813: LIST
24814: LIST
24815: ST_TO_ADDR
24816: GO 25607
24818: LD_INT 12
24820: DOUBLE
24821: EQUAL
24822: IFTRUE 24826
24824: GO 24852
24826: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24827: LD_ADDR_VAR 0 3
24831: PUSH
24832: LD_INT 2
24834: PUSH
24835: LD_INT 3
24837: PUSH
24838: LD_INT 4
24840: PUSH
24841: LD_INT 5
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: ST_TO_ADDR
24850: GO 25607
24852: LD_INT 13
24854: DOUBLE
24855: EQUAL
24856: IFTRUE 24860
24858: GO 24886
24860: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24861: LD_ADDR_VAR 0 3
24865: PUSH
24866: LD_INT 2
24868: PUSH
24869: LD_INT 3
24871: PUSH
24872: LD_INT 4
24874: PUSH
24875: LD_INT 5
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: LIST
24882: LIST
24883: ST_TO_ADDR
24884: GO 25607
24886: LD_INT 14
24888: DOUBLE
24889: EQUAL
24890: IFTRUE 24894
24892: GO 24912
24894: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24895: LD_ADDR_VAR 0 3
24899: PUSH
24900: LD_INT 4
24902: PUSH
24903: LD_INT 5
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: ST_TO_ADDR
24910: GO 25607
24912: LD_INT 6
24914: DOUBLE
24915: EQUAL
24916: IFTRUE 24920
24918: GO 24938
24920: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_INT 4
24928: PUSH
24929: LD_INT 5
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: ST_TO_ADDR
24936: GO 25607
24938: LD_INT 10
24940: DOUBLE
24941: EQUAL
24942: IFTRUE 24946
24944: GO 24964
24946: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24947: LD_ADDR_VAR 0 3
24951: PUSH
24952: LD_INT 4
24954: PUSH
24955: LD_INT 5
24957: PUSH
24958: EMPTY
24959: LIST
24960: LIST
24961: ST_TO_ADDR
24962: GO 25607
24964: LD_INT 22
24966: DOUBLE
24967: EQUAL
24968: IFTRUE 24972
24970: GO 24998
24972: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: LD_INT 11
24980: PUSH
24981: LD_INT 12
24983: PUSH
24984: LD_INT 13
24986: PUSH
24987: LD_INT 14
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: ST_TO_ADDR
24996: GO 25607
24998: LD_INT 23
25000: DOUBLE
25001: EQUAL
25002: IFTRUE 25006
25004: GO 25032
25006: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25007: LD_ADDR_VAR 0 3
25011: PUSH
25012: LD_INT 11
25014: PUSH
25015: LD_INT 12
25017: PUSH
25018: LD_INT 13
25020: PUSH
25021: LD_INT 14
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: LIST
25029: ST_TO_ADDR
25030: GO 25607
25032: LD_INT 24
25034: DOUBLE
25035: EQUAL
25036: IFTRUE 25040
25038: GO 25066
25040: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25041: LD_ADDR_VAR 0 3
25045: PUSH
25046: LD_INT 11
25048: PUSH
25049: LD_INT 12
25051: PUSH
25052: LD_INT 13
25054: PUSH
25055: LD_INT 14
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: ST_TO_ADDR
25064: GO 25607
25066: LD_INT 30
25068: DOUBLE
25069: EQUAL
25070: IFTRUE 25074
25072: GO 25100
25074: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25075: LD_ADDR_VAR 0 3
25079: PUSH
25080: LD_INT 11
25082: PUSH
25083: LD_INT 12
25085: PUSH
25086: LD_INT 13
25088: PUSH
25089: LD_INT 14
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: ST_TO_ADDR
25098: GO 25607
25100: LD_INT 25
25102: DOUBLE
25103: EQUAL
25104: IFTRUE 25108
25106: GO 25126
25108: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25109: LD_ADDR_VAR 0 3
25113: PUSH
25114: LD_INT 13
25116: PUSH
25117: LD_INT 14
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: ST_TO_ADDR
25124: GO 25607
25126: LD_INT 27
25128: DOUBLE
25129: EQUAL
25130: IFTRUE 25134
25132: GO 25152
25134: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_INT 13
25142: PUSH
25143: LD_INT 14
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: ST_TO_ADDR
25150: GO 25607
25152: LD_INT 92
25154: DOUBLE
25155: EQUAL
25156: IFTRUE 25160
25158: GO 25186
25160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25161: LD_ADDR_VAR 0 3
25165: PUSH
25166: LD_INT 11
25168: PUSH
25169: LD_INT 12
25171: PUSH
25172: LD_INT 13
25174: PUSH
25175: LD_INT 14
25177: PUSH
25178: EMPTY
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: ST_TO_ADDR
25184: GO 25607
25186: LD_INT 28
25188: DOUBLE
25189: EQUAL
25190: IFTRUE 25194
25192: GO 25212
25194: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25195: LD_ADDR_VAR 0 3
25199: PUSH
25200: LD_INT 13
25202: PUSH
25203: LD_INT 14
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: ST_TO_ADDR
25210: GO 25607
25212: LD_INT 29
25214: DOUBLE
25215: EQUAL
25216: IFTRUE 25220
25218: GO 25238
25220: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25221: LD_ADDR_VAR 0 3
25225: PUSH
25226: LD_INT 13
25228: PUSH
25229: LD_INT 14
25231: PUSH
25232: EMPTY
25233: LIST
25234: LIST
25235: ST_TO_ADDR
25236: GO 25607
25238: LD_INT 31
25240: DOUBLE
25241: EQUAL
25242: IFTRUE 25246
25244: GO 25264
25246: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_INT 13
25254: PUSH
25255: LD_INT 14
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: ST_TO_ADDR
25262: GO 25607
25264: LD_INT 26
25266: DOUBLE
25267: EQUAL
25268: IFTRUE 25272
25270: GO 25290
25272: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25273: LD_ADDR_VAR 0 3
25277: PUSH
25278: LD_INT 13
25280: PUSH
25281: LD_INT 14
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: ST_TO_ADDR
25288: GO 25607
25290: LD_INT 42
25292: DOUBLE
25293: EQUAL
25294: IFTRUE 25298
25296: GO 25324
25298: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25299: LD_ADDR_VAR 0 3
25303: PUSH
25304: LD_INT 21
25306: PUSH
25307: LD_INT 22
25309: PUSH
25310: LD_INT 23
25312: PUSH
25313: LD_INT 24
25315: PUSH
25316: EMPTY
25317: LIST
25318: LIST
25319: LIST
25320: LIST
25321: ST_TO_ADDR
25322: GO 25607
25324: LD_INT 43
25326: DOUBLE
25327: EQUAL
25328: IFTRUE 25332
25330: GO 25358
25332: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25333: LD_ADDR_VAR 0 3
25337: PUSH
25338: LD_INT 21
25340: PUSH
25341: LD_INT 22
25343: PUSH
25344: LD_INT 23
25346: PUSH
25347: LD_INT 24
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: LIST
25354: LIST
25355: ST_TO_ADDR
25356: GO 25607
25358: LD_INT 44
25360: DOUBLE
25361: EQUAL
25362: IFTRUE 25366
25364: GO 25392
25366: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25367: LD_ADDR_VAR 0 3
25371: PUSH
25372: LD_INT 21
25374: PUSH
25375: LD_INT 22
25377: PUSH
25378: LD_INT 23
25380: PUSH
25381: LD_INT 24
25383: PUSH
25384: EMPTY
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: ST_TO_ADDR
25390: GO 25607
25392: LD_INT 45
25394: DOUBLE
25395: EQUAL
25396: IFTRUE 25400
25398: GO 25426
25400: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25401: LD_ADDR_VAR 0 3
25405: PUSH
25406: LD_INT 21
25408: PUSH
25409: LD_INT 22
25411: PUSH
25412: LD_INT 23
25414: PUSH
25415: LD_INT 24
25417: PUSH
25418: EMPTY
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: ST_TO_ADDR
25424: GO 25607
25426: LD_INT 49
25428: DOUBLE
25429: EQUAL
25430: IFTRUE 25434
25432: GO 25460
25434: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25435: LD_ADDR_VAR 0 3
25439: PUSH
25440: LD_INT 21
25442: PUSH
25443: LD_INT 22
25445: PUSH
25446: LD_INT 23
25448: PUSH
25449: LD_INT 24
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: LIST
25456: LIST
25457: ST_TO_ADDR
25458: GO 25607
25460: LD_INT 51
25462: DOUBLE
25463: EQUAL
25464: IFTRUE 25468
25466: GO 25494
25468: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25469: LD_ADDR_VAR 0 3
25473: PUSH
25474: LD_INT 21
25476: PUSH
25477: LD_INT 22
25479: PUSH
25480: LD_INT 23
25482: PUSH
25483: LD_INT 24
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: LIST
25491: ST_TO_ADDR
25492: GO 25607
25494: LD_INT 52
25496: DOUBLE
25497: EQUAL
25498: IFTRUE 25502
25500: GO 25528
25502: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25503: LD_ADDR_VAR 0 3
25507: PUSH
25508: LD_INT 21
25510: PUSH
25511: LD_INT 22
25513: PUSH
25514: LD_INT 23
25516: PUSH
25517: LD_INT 24
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: ST_TO_ADDR
25526: GO 25607
25528: LD_INT 53
25530: DOUBLE
25531: EQUAL
25532: IFTRUE 25536
25534: GO 25554
25536: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25537: LD_ADDR_VAR 0 3
25541: PUSH
25542: LD_INT 23
25544: PUSH
25545: LD_INT 24
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: ST_TO_ADDR
25552: GO 25607
25554: LD_INT 46
25556: DOUBLE
25557: EQUAL
25558: IFTRUE 25562
25560: GO 25580
25562: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25563: LD_ADDR_VAR 0 3
25567: PUSH
25568: LD_INT 23
25570: PUSH
25571: LD_INT 24
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: ST_TO_ADDR
25578: GO 25607
25580: LD_INT 47
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25606
25588: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25589: LD_ADDR_VAR 0 3
25593: PUSH
25594: LD_INT 23
25596: PUSH
25597: LD_INT 24
25599: PUSH
25600: EMPTY
25601: LIST
25602: LIST
25603: ST_TO_ADDR
25604: GO 25607
25606: POP
// result := ( chassis in result ) ;
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: LD_VAR 0 1
25616: PUSH
25617: LD_VAR 0 3
25621: IN
25622: ST_TO_ADDR
// end ;
25623: LD_VAR 0 3
25627: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25628: LD_INT 0
25630: PPUSH
25631: PPUSH
25632: PPUSH
25633: PPUSH
25634: PPUSH
25635: PPUSH
25636: PPUSH
// result := array ;
25637: LD_ADDR_VAR 0 5
25641: PUSH
25642: LD_VAR 0 1
25646: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25647: LD_VAR 0 1
25651: NOT
25652: PUSH
25653: LD_VAR 0 2
25657: NOT
25658: OR
25659: PUSH
25660: LD_VAR 0 3
25664: NOT
25665: OR
25666: PUSH
25667: LD_VAR 0 2
25671: PUSH
25672: LD_VAR 0 1
25676: GREATER
25677: OR
25678: PUSH
25679: LD_VAR 0 3
25683: PUSH
25684: LD_VAR 0 1
25688: GREATER
25689: OR
25690: IFFALSE 25694
// exit ;
25692: GO 25990
// if direction then
25694: LD_VAR 0 4
25698: IFFALSE 25762
// begin d := 1 ;
25700: LD_ADDR_VAR 0 9
25704: PUSH
25705: LD_INT 1
25707: ST_TO_ADDR
// if i_from > i_to then
25708: LD_VAR 0 2
25712: PUSH
25713: LD_VAR 0 3
25717: GREATER
25718: IFFALSE 25744
// length := ( array - i_from ) + i_to else
25720: LD_ADDR_VAR 0 11
25724: PUSH
25725: LD_VAR 0 1
25729: PUSH
25730: LD_VAR 0 2
25734: MINUS
25735: PUSH
25736: LD_VAR 0 3
25740: PLUS
25741: ST_TO_ADDR
25742: GO 25760
// length := i_to - i_from ;
25744: LD_ADDR_VAR 0 11
25748: PUSH
25749: LD_VAR 0 3
25753: PUSH
25754: LD_VAR 0 2
25758: MINUS
25759: ST_TO_ADDR
// end else
25760: GO 25823
// begin d := - 1 ;
25762: LD_ADDR_VAR 0 9
25766: PUSH
25767: LD_INT 1
25769: NEG
25770: ST_TO_ADDR
// if i_from > i_to then
25771: LD_VAR 0 2
25775: PUSH
25776: LD_VAR 0 3
25780: GREATER
25781: IFFALSE 25801
// length := i_from - i_to else
25783: LD_ADDR_VAR 0 11
25787: PUSH
25788: LD_VAR 0 2
25792: PUSH
25793: LD_VAR 0 3
25797: MINUS
25798: ST_TO_ADDR
25799: GO 25823
// length := ( array - i_to ) + i_from ;
25801: LD_ADDR_VAR 0 11
25805: PUSH
25806: LD_VAR 0 1
25810: PUSH
25811: LD_VAR 0 3
25815: MINUS
25816: PUSH
25817: LD_VAR 0 2
25821: PLUS
25822: ST_TO_ADDR
// end ; if not length then
25823: LD_VAR 0 11
25827: NOT
25828: IFFALSE 25832
// exit ;
25830: GO 25990
// tmp := array ;
25832: LD_ADDR_VAR 0 10
25836: PUSH
25837: LD_VAR 0 1
25841: ST_TO_ADDR
// for i = 1 to length do
25842: LD_ADDR_VAR 0 6
25846: PUSH
25847: DOUBLE
25848: LD_INT 1
25850: DEC
25851: ST_TO_ADDR
25852: LD_VAR 0 11
25856: PUSH
25857: FOR_TO
25858: IFFALSE 25978
// begin for j = 1 to array do
25860: LD_ADDR_VAR 0 7
25864: PUSH
25865: DOUBLE
25866: LD_INT 1
25868: DEC
25869: ST_TO_ADDR
25870: LD_VAR 0 1
25874: PUSH
25875: FOR_TO
25876: IFFALSE 25964
// begin k := j + d ;
25878: LD_ADDR_VAR 0 8
25882: PUSH
25883: LD_VAR 0 7
25887: PUSH
25888: LD_VAR 0 9
25892: PLUS
25893: ST_TO_ADDR
// if k > array then
25894: LD_VAR 0 8
25898: PUSH
25899: LD_VAR 0 1
25903: GREATER
25904: IFFALSE 25914
// k := 1 ;
25906: LD_ADDR_VAR 0 8
25910: PUSH
25911: LD_INT 1
25913: ST_TO_ADDR
// if not k then
25914: LD_VAR 0 8
25918: NOT
25919: IFFALSE 25931
// k := array ;
25921: LD_ADDR_VAR 0 8
25925: PUSH
25926: LD_VAR 0 1
25930: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25931: LD_ADDR_VAR 0 10
25935: PUSH
25936: LD_VAR 0 10
25940: PPUSH
25941: LD_VAR 0 8
25945: PPUSH
25946: LD_VAR 0 1
25950: PUSH
25951: LD_VAR 0 7
25955: ARRAY
25956: PPUSH
25957: CALL_OW 1
25961: ST_TO_ADDR
// end ;
25962: GO 25875
25964: POP
25965: POP
// array := tmp ;
25966: LD_ADDR_VAR 0 1
25970: PUSH
25971: LD_VAR 0 10
25975: ST_TO_ADDR
// end ;
25976: GO 25857
25978: POP
25979: POP
// result := array ;
25980: LD_ADDR_VAR 0 5
25984: PUSH
25985: LD_VAR 0 1
25989: ST_TO_ADDR
// end ;
25990: LD_VAR 0 5
25994: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25995: LD_INT 0
25997: PPUSH
25998: PPUSH
// result := 0 ;
25999: LD_ADDR_VAR 0 3
26003: PUSH
26004: LD_INT 0
26006: ST_TO_ADDR
// if not array or not value in array then
26007: LD_VAR 0 1
26011: NOT
26012: PUSH
26013: LD_VAR 0 2
26017: PUSH
26018: LD_VAR 0 1
26022: IN
26023: NOT
26024: OR
26025: IFFALSE 26029
// exit ;
26027: GO 26083
// for i = 1 to array do
26029: LD_ADDR_VAR 0 4
26033: PUSH
26034: DOUBLE
26035: LD_INT 1
26037: DEC
26038: ST_TO_ADDR
26039: LD_VAR 0 1
26043: PUSH
26044: FOR_TO
26045: IFFALSE 26081
// if value = array [ i ] then
26047: LD_VAR 0 2
26051: PUSH
26052: LD_VAR 0 1
26056: PUSH
26057: LD_VAR 0 4
26061: ARRAY
26062: EQUAL
26063: IFFALSE 26079
// begin result := i ;
26065: LD_ADDR_VAR 0 3
26069: PUSH
26070: LD_VAR 0 4
26074: ST_TO_ADDR
// exit ;
26075: POP
26076: POP
26077: GO 26083
// end ;
26079: GO 26044
26081: POP
26082: POP
// end ;
26083: LD_VAR 0 3
26087: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26088: LD_INT 0
26090: PPUSH
// vc_chassis := chassis ;
26091: LD_ADDR_OWVAR 37
26095: PUSH
26096: LD_VAR 0 1
26100: ST_TO_ADDR
// vc_engine := engine ;
26101: LD_ADDR_OWVAR 39
26105: PUSH
26106: LD_VAR 0 2
26110: ST_TO_ADDR
// vc_control := control ;
26111: LD_ADDR_OWVAR 38
26115: PUSH
26116: LD_VAR 0 3
26120: ST_TO_ADDR
// vc_weapon := weapon ;
26121: LD_ADDR_OWVAR 40
26125: PUSH
26126: LD_VAR 0 4
26130: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26131: LD_ADDR_OWVAR 41
26135: PUSH
26136: LD_VAR 0 5
26140: ST_TO_ADDR
// end ;
26141: LD_VAR 0 6
26145: RET
// export function WantPlant ( unit ) ; var task ; begin
26146: LD_INT 0
26148: PPUSH
26149: PPUSH
// result := false ;
26150: LD_ADDR_VAR 0 2
26154: PUSH
26155: LD_INT 0
26157: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26158: LD_ADDR_VAR 0 3
26162: PUSH
26163: LD_VAR 0 1
26167: PPUSH
26168: CALL_OW 437
26172: ST_TO_ADDR
// if task then
26173: LD_VAR 0 3
26177: IFFALSE 26205
// if task [ 1 ] [ 1 ] = p then
26179: LD_VAR 0 3
26183: PUSH
26184: LD_INT 1
26186: ARRAY
26187: PUSH
26188: LD_INT 1
26190: ARRAY
26191: PUSH
26192: LD_STRING p
26194: EQUAL
26195: IFFALSE 26205
// result := true ;
26197: LD_ADDR_VAR 0 2
26201: PUSH
26202: LD_INT 1
26204: ST_TO_ADDR
// end ;
26205: LD_VAR 0 2
26209: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26210: LD_INT 0
26212: PPUSH
26213: PPUSH
26214: PPUSH
26215: PPUSH
// if pos < 1 then
26216: LD_VAR 0 2
26220: PUSH
26221: LD_INT 1
26223: LESS
26224: IFFALSE 26228
// exit ;
26226: GO 26531
// if pos = 1 then
26228: LD_VAR 0 2
26232: PUSH
26233: LD_INT 1
26235: EQUAL
26236: IFFALSE 26269
// result := Replace ( arr , pos [ 1 ] , value ) else
26238: LD_ADDR_VAR 0 4
26242: PUSH
26243: LD_VAR 0 1
26247: PPUSH
26248: LD_VAR 0 2
26252: PUSH
26253: LD_INT 1
26255: ARRAY
26256: PPUSH
26257: LD_VAR 0 3
26261: PPUSH
26262: CALL_OW 1
26266: ST_TO_ADDR
26267: GO 26531
// begin tmp := arr ;
26269: LD_ADDR_VAR 0 6
26273: PUSH
26274: LD_VAR 0 1
26278: ST_TO_ADDR
// s_arr := [ tmp ] ;
26279: LD_ADDR_VAR 0 7
26283: PUSH
26284: LD_VAR 0 6
26288: PUSH
26289: EMPTY
26290: LIST
26291: ST_TO_ADDR
// for i = 1 to pos - 1 do
26292: LD_ADDR_VAR 0 5
26296: PUSH
26297: DOUBLE
26298: LD_INT 1
26300: DEC
26301: ST_TO_ADDR
26302: LD_VAR 0 2
26306: PUSH
26307: LD_INT 1
26309: MINUS
26310: PUSH
26311: FOR_TO
26312: IFFALSE 26357
// begin tmp := tmp [ pos [ i ] ] ;
26314: LD_ADDR_VAR 0 6
26318: PUSH
26319: LD_VAR 0 6
26323: PUSH
26324: LD_VAR 0 2
26328: PUSH
26329: LD_VAR 0 5
26333: ARRAY
26334: ARRAY
26335: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26336: LD_ADDR_VAR 0 7
26340: PUSH
26341: LD_VAR 0 7
26345: PUSH
26346: LD_VAR 0 6
26350: PUSH
26351: EMPTY
26352: LIST
26353: ADD
26354: ST_TO_ADDR
// end ;
26355: GO 26311
26357: POP
26358: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26359: LD_ADDR_VAR 0 6
26363: PUSH
26364: LD_VAR 0 6
26368: PPUSH
26369: LD_VAR 0 2
26373: PUSH
26374: LD_VAR 0 2
26378: ARRAY
26379: PPUSH
26380: LD_VAR 0 3
26384: PPUSH
26385: CALL_OW 1
26389: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26390: LD_ADDR_VAR 0 7
26394: PUSH
26395: LD_VAR 0 7
26399: PPUSH
26400: LD_VAR 0 7
26404: PPUSH
26405: LD_VAR 0 6
26409: PPUSH
26410: CALL_OW 1
26414: ST_TO_ADDR
// for i = s_arr downto 2 do
26415: LD_ADDR_VAR 0 5
26419: PUSH
26420: DOUBLE
26421: LD_VAR 0 7
26425: INC
26426: ST_TO_ADDR
26427: LD_INT 2
26429: PUSH
26430: FOR_DOWNTO
26431: IFFALSE 26515
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26433: LD_ADDR_VAR 0 6
26437: PUSH
26438: LD_VAR 0 7
26442: PUSH
26443: LD_VAR 0 5
26447: PUSH
26448: LD_INT 1
26450: MINUS
26451: ARRAY
26452: PPUSH
26453: LD_VAR 0 2
26457: PUSH
26458: LD_VAR 0 5
26462: PUSH
26463: LD_INT 1
26465: MINUS
26466: ARRAY
26467: PPUSH
26468: LD_VAR 0 7
26472: PUSH
26473: LD_VAR 0 5
26477: ARRAY
26478: PPUSH
26479: CALL_OW 1
26483: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26484: LD_ADDR_VAR 0 7
26488: PUSH
26489: LD_VAR 0 7
26493: PPUSH
26494: LD_VAR 0 5
26498: PUSH
26499: LD_INT 1
26501: MINUS
26502: PPUSH
26503: LD_VAR 0 6
26507: PPUSH
26508: CALL_OW 1
26512: ST_TO_ADDR
// end ;
26513: GO 26430
26515: POP
26516: POP
// result := s_arr [ 1 ] ;
26517: LD_ADDR_VAR 0 4
26521: PUSH
26522: LD_VAR 0 7
26526: PUSH
26527: LD_INT 1
26529: ARRAY
26530: ST_TO_ADDR
// end ; end ;
26531: LD_VAR 0 4
26535: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26536: LD_INT 0
26538: PPUSH
26539: PPUSH
// if not list then
26540: LD_VAR 0 1
26544: NOT
26545: IFFALSE 26549
// exit ;
26547: GO 26640
// i := list [ pos1 ] ;
26549: LD_ADDR_VAR 0 5
26553: PUSH
26554: LD_VAR 0 1
26558: PUSH
26559: LD_VAR 0 2
26563: ARRAY
26564: ST_TO_ADDR
// if not i then
26565: LD_VAR 0 5
26569: NOT
26570: IFFALSE 26574
// exit ;
26572: GO 26640
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26574: LD_ADDR_VAR 0 1
26578: PUSH
26579: LD_VAR 0 1
26583: PPUSH
26584: LD_VAR 0 2
26588: PPUSH
26589: LD_VAR 0 1
26593: PUSH
26594: LD_VAR 0 3
26598: ARRAY
26599: PPUSH
26600: CALL_OW 1
26604: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26605: LD_ADDR_VAR 0 1
26609: PUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: LD_VAR 0 3
26619: PPUSH
26620: LD_VAR 0 5
26624: PPUSH
26625: CALL_OW 1
26629: ST_TO_ADDR
// result := list ;
26630: LD_ADDR_VAR 0 4
26634: PUSH
26635: LD_VAR 0 1
26639: ST_TO_ADDR
// end ;
26640: LD_VAR 0 4
26644: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26645: LD_INT 0
26647: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26648: LD_ADDR_VAR 0 5
26652: PUSH
26653: LD_VAR 0 1
26657: PPUSH
26658: CALL_OW 250
26662: PPUSH
26663: LD_VAR 0 1
26667: PPUSH
26668: CALL_OW 251
26672: PPUSH
26673: LD_VAR 0 2
26677: PPUSH
26678: LD_VAR 0 3
26682: PPUSH
26683: LD_VAR 0 4
26687: PPUSH
26688: CALL 26698 0 5
26692: ST_TO_ADDR
// end ;
26693: LD_VAR 0 5
26697: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26698: LD_INT 0
26700: PPUSH
26701: PPUSH
26702: PPUSH
26703: PPUSH
// if not list then
26704: LD_VAR 0 3
26708: NOT
26709: IFFALSE 26713
// exit ;
26711: GO 27101
// result := [ ] ;
26713: LD_ADDR_VAR 0 6
26717: PUSH
26718: EMPTY
26719: ST_TO_ADDR
// for i in list do
26720: LD_ADDR_VAR 0 7
26724: PUSH
26725: LD_VAR 0 3
26729: PUSH
26730: FOR_IN
26731: IFFALSE 26933
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26733: LD_ADDR_VAR 0 9
26737: PUSH
26738: LD_VAR 0 7
26742: PPUSH
26743: LD_VAR 0 1
26747: PPUSH
26748: LD_VAR 0 2
26752: PPUSH
26753: CALL_OW 297
26757: ST_TO_ADDR
// if not result then
26758: LD_VAR 0 6
26762: NOT
26763: IFFALSE 26789
// result := [ [ i , tmp ] ] else
26765: LD_ADDR_VAR 0 6
26769: PUSH
26770: LD_VAR 0 7
26774: PUSH
26775: LD_VAR 0 9
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: EMPTY
26785: LIST
26786: ST_TO_ADDR
26787: GO 26931
// begin if result [ result ] [ 2 ] < tmp then
26789: LD_VAR 0 6
26793: PUSH
26794: LD_VAR 0 6
26798: ARRAY
26799: PUSH
26800: LD_INT 2
26802: ARRAY
26803: PUSH
26804: LD_VAR 0 9
26808: LESS
26809: IFFALSE 26851
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26811: LD_ADDR_VAR 0 6
26815: PUSH
26816: LD_VAR 0 6
26820: PPUSH
26821: LD_VAR 0 6
26825: PUSH
26826: LD_INT 1
26828: PLUS
26829: PPUSH
26830: LD_VAR 0 7
26834: PUSH
26835: LD_VAR 0 9
26839: PUSH
26840: EMPTY
26841: LIST
26842: LIST
26843: PPUSH
26844: CALL_OW 2
26848: ST_TO_ADDR
26849: GO 26931
// for j = 1 to result do
26851: LD_ADDR_VAR 0 8
26855: PUSH
26856: DOUBLE
26857: LD_INT 1
26859: DEC
26860: ST_TO_ADDR
26861: LD_VAR 0 6
26865: PUSH
26866: FOR_TO
26867: IFFALSE 26929
// begin if tmp < result [ j ] [ 2 ] then
26869: LD_VAR 0 9
26873: PUSH
26874: LD_VAR 0 6
26878: PUSH
26879: LD_VAR 0 8
26883: ARRAY
26884: PUSH
26885: LD_INT 2
26887: ARRAY
26888: LESS
26889: IFFALSE 26927
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26891: LD_ADDR_VAR 0 6
26895: PUSH
26896: LD_VAR 0 6
26900: PPUSH
26901: LD_VAR 0 8
26905: PPUSH
26906: LD_VAR 0 7
26910: PUSH
26911: LD_VAR 0 9
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: PPUSH
26920: CALL_OW 2
26924: ST_TO_ADDR
// break ;
26925: GO 26929
// end ; end ;
26927: GO 26866
26929: POP
26930: POP
// end ; end ;
26931: GO 26730
26933: POP
26934: POP
// if result and not asc then
26935: LD_VAR 0 6
26939: PUSH
26940: LD_VAR 0 4
26944: NOT
26945: AND
26946: IFFALSE 27021
// begin tmp := result ;
26948: LD_ADDR_VAR 0 9
26952: PUSH
26953: LD_VAR 0 6
26957: ST_TO_ADDR
// for i = tmp downto 1 do
26958: LD_ADDR_VAR 0 7
26962: PUSH
26963: DOUBLE
26964: LD_VAR 0 9
26968: INC
26969: ST_TO_ADDR
26970: LD_INT 1
26972: PUSH
26973: FOR_DOWNTO
26974: IFFALSE 27019
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26976: LD_ADDR_VAR 0 6
26980: PUSH
26981: LD_VAR 0 6
26985: PPUSH
26986: LD_VAR 0 9
26990: PUSH
26991: LD_VAR 0 7
26995: MINUS
26996: PUSH
26997: LD_INT 1
26999: PLUS
27000: PPUSH
27001: LD_VAR 0 9
27005: PUSH
27006: LD_VAR 0 7
27010: ARRAY
27011: PPUSH
27012: CALL_OW 1
27016: ST_TO_ADDR
27017: GO 26973
27019: POP
27020: POP
// end ; tmp := [ ] ;
27021: LD_ADDR_VAR 0 9
27025: PUSH
27026: EMPTY
27027: ST_TO_ADDR
// if mode then
27028: LD_VAR 0 5
27032: IFFALSE 27101
// begin for i = 1 to result do
27034: LD_ADDR_VAR 0 7
27038: PUSH
27039: DOUBLE
27040: LD_INT 1
27042: DEC
27043: ST_TO_ADDR
27044: LD_VAR 0 6
27048: PUSH
27049: FOR_TO
27050: IFFALSE 27089
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27052: LD_ADDR_VAR 0 9
27056: PUSH
27057: LD_VAR 0 9
27061: PPUSH
27062: LD_VAR 0 7
27066: PPUSH
27067: LD_VAR 0 6
27071: PUSH
27072: LD_VAR 0 7
27076: ARRAY
27077: PUSH
27078: LD_INT 1
27080: ARRAY
27081: PPUSH
27082: CALL_OW 1
27086: ST_TO_ADDR
27087: GO 27049
27089: POP
27090: POP
// result := tmp ;
27091: LD_ADDR_VAR 0 6
27095: PUSH
27096: LD_VAR 0 9
27100: ST_TO_ADDR
// end ; end ;
27101: LD_VAR 0 6
27105: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27106: LD_INT 0
27108: PPUSH
27109: PPUSH
27110: PPUSH
27111: PPUSH
27112: PPUSH
27113: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27114: LD_ADDR_VAR 0 5
27118: PUSH
27119: LD_INT 0
27121: PUSH
27122: LD_INT 0
27124: PUSH
27125: LD_INT 0
27127: PUSH
27128: EMPTY
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: LIST
27134: LIST
27135: ST_TO_ADDR
// if not x or not y then
27136: LD_VAR 0 2
27140: NOT
27141: PUSH
27142: LD_VAR 0 3
27146: NOT
27147: OR
27148: IFFALSE 27152
// exit ;
27150: GO 28802
// if not range then
27152: LD_VAR 0 4
27156: NOT
27157: IFFALSE 27167
// range := 10 ;
27159: LD_ADDR_VAR 0 4
27163: PUSH
27164: LD_INT 10
27166: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27167: LD_ADDR_VAR 0 8
27171: PUSH
27172: LD_INT 81
27174: PUSH
27175: LD_VAR 0 1
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: LD_INT 92
27186: PUSH
27187: LD_VAR 0 2
27191: PUSH
27192: LD_VAR 0 3
27196: PUSH
27197: LD_VAR 0 4
27201: PUSH
27202: EMPTY
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 3
27210: PUSH
27211: LD_INT 21
27213: PUSH
27214: LD_INT 3
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: EMPTY
27226: LIST
27227: LIST
27228: LIST
27229: PPUSH
27230: CALL_OW 69
27234: ST_TO_ADDR
// if not tmp then
27235: LD_VAR 0 8
27239: NOT
27240: IFFALSE 27244
// exit ;
27242: GO 28802
// for i in tmp do
27244: LD_ADDR_VAR 0 6
27248: PUSH
27249: LD_VAR 0 8
27253: PUSH
27254: FOR_IN
27255: IFFALSE 28777
// begin points := [ 0 , 0 , 0 ] ;
27257: LD_ADDR_VAR 0 9
27261: PUSH
27262: LD_INT 0
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 0
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: LIST
27275: ST_TO_ADDR
// bpoints := 1 ;
27276: LD_ADDR_VAR 0 10
27280: PUSH
27281: LD_INT 1
27283: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27284: LD_VAR 0 6
27288: PPUSH
27289: CALL_OW 247
27293: PUSH
27294: LD_INT 1
27296: DOUBLE
27297: EQUAL
27298: IFTRUE 27302
27300: GO 27880
27302: POP
// begin if GetClass ( i ) = 1 then
27303: LD_VAR 0 6
27307: PPUSH
27308: CALL_OW 257
27312: PUSH
27313: LD_INT 1
27315: EQUAL
27316: IFFALSE 27337
// points := [ 10 , 5 , 3 ] ;
27318: LD_ADDR_VAR 0 9
27322: PUSH
27323: LD_INT 10
27325: PUSH
27326: LD_INT 5
27328: PUSH
27329: LD_INT 3
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27337: LD_VAR 0 6
27341: PPUSH
27342: CALL_OW 257
27346: PUSH
27347: LD_INT 2
27349: PUSH
27350: LD_INT 3
27352: PUSH
27353: LD_INT 4
27355: PUSH
27356: EMPTY
27357: LIST
27358: LIST
27359: LIST
27360: IN
27361: IFFALSE 27382
// points := [ 3 , 2 , 1 ] ;
27363: LD_ADDR_VAR 0 9
27367: PUSH
27368: LD_INT 3
27370: PUSH
27371: LD_INT 2
27373: PUSH
27374: LD_INT 1
27376: PUSH
27377: EMPTY
27378: LIST
27379: LIST
27380: LIST
27381: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27382: LD_VAR 0 6
27386: PPUSH
27387: CALL_OW 257
27391: PUSH
27392: LD_INT 5
27394: EQUAL
27395: IFFALSE 27416
// points := [ 130 , 5 , 2 ] ;
27397: LD_ADDR_VAR 0 9
27401: PUSH
27402: LD_INT 130
27404: PUSH
27405: LD_INT 5
27407: PUSH
27408: LD_INT 2
27410: PUSH
27411: EMPTY
27412: LIST
27413: LIST
27414: LIST
27415: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27416: LD_VAR 0 6
27420: PPUSH
27421: CALL_OW 257
27425: PUSH
27426: LD_INT 8
27428: EQUAL
27429: IFFALSE 27450
// points := [ 35 , 35 , 30 ] ;
27431: LD_ADDR_VAR 0 9
27435: PUSH
27436: LD_INT 35
27438: PUSH
27439: LD_INT 35
27441: PUSH
27442: LD_INT 30
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27450: LD_VAR 0 6
27454: PPUSH
27455: CALL_OW 257
27459: PUSH
27460: LD_INT 9
27462: EQUAL
27463: IFFALSE 27484
// points := [ 20 , 55 , 40 ] ;
27465: LD_ADDR_VAR 0 9
27469: PUSH
27470: LD_INT 20
27472: PUSH
27473: LD_INT 55
27475: PUSH
27476: LD_INT 40
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27484: LD_VAR 0 6
27488: PPUSH
27489: CALL_OW 257
27493: PUSH
27494: LD_INT 12
27496: PUSH
27497: LD_INT 16
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: IN
27504: IFFALSE 27525
// points := [ 5 , 3 , 2 ] ;
27506: LD_ADDR_VAR 0 9
27510: PUSH
27511: LD_INT 5
27513: PUSH
27514: LD_INT 3
27516: PUSH
27517: LD_INT 2
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27525: LD_VAR 0 6
27529: PPUSH
27530: CALL_OW 257
27534: PUSH
27535: LD_INT 17
27537: EQUAL
27538: IFFALSE 27559
// points := [ 100 , 50 , 75 ] ;
27540: LD_ADDR_VAR 0 9
27544: PUSH
27545: LD_INT 100
27547: PUSH
27548: LD_INT 50
27550: PUSH
27551: LD_INT 75
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: LIST
27558: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27559: LD_VAR 0 6
27563: PPUSH
27564: CALL_OW 257
27568: PUSH
27569: LD_INT 15
27571: EQUAL
27572: IFFALSE 27593
// points := [ 10 , 5 , 3 ] ;
27574: LD_ADDR_VAR 0 9
27578: PUSH
27579: LD_INT 10
27581: PUSH
27582: LD_INT 5
27584: PUSH
27585: LD_INT 3
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27593: LD_VAR 0 6
27597: PPUSH
27598: CALL_OW 257
27602: PUSH
27603: LD_INT 14
27605: EQUAL
27606: IFFALSE 27627
// points := [ 10 , 0 , 0 ] ;
27608: LD_ADDR_VAR 0 9
27612: PUSH
27613: LD_INT 10
27615: PUSH
27616: LD_INT 0
27618: PUSH
27619: LD_INT 0
27621: PUSH
27622: EMPTY
27623: LIST
27624: LIST
27625: LIST
27626: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27627: LD_VAR 0 6
27631: PPUSH
27632: CALL_OW 257
27636: PUSH
27637: LD_INT 11
27639: EQUAL
27640: IFFALSE 27661
// points := [ 30 , 10 , 5 ] ;
27642: LD_ADDR_VAR 0 9
27646: PUSH
27647: LD_INT 30
27649: PUSH
27650: LD_INT 10
27652: PUSH
27653: LD_INT 5
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27661: LD_VAR 0 1
27665: PPUSH
27666: LD_INT 5
27668: PPUSH
27669: CALL_OW 321
27673: PUSH
27674: LD_INT 2
27676: EQUAL
27677: IFFALSE 27694
// bpoints := bpoints * 1.8 ;
27679: LD_ADDR_VAR 0 10
27683: PUSH
27684: LD_VAR 0 10
27688: PUSH
27689: LD_REAL  1.80000000000000E+0000
27692: MUL
27693: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27694: LD_VAR 0 6
27698: PPUSH
27699: CALL_OW 257
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: LD_INT 2
27709: PUSH
27710: LD_INT 3
27712: PUSH
27713: LD_INT 4
27715: PUSH
27716: EMPTY
27717: LIST
27718: LIST
27719: LIST
27720: LIST
27721: IN
27722: PUSH
27723: LD_VAR 0 1
27727: PPUSH
27728: LD_INT 51
27730: PPUSH
27731: CALL_OW 321
27735: PUSH
27736: LD_INT 2
27738: EQUAL
27739: AND
27740: IFFALSE 27757
// bpoints := bpoints * 1.2 ;
27742: LD_ADDR_VAR 0 10
27746: PUSH
27747: LD_VAR 0 10
27751: PUSH
27752: LD_REAL  1.20000000000000E+0000
27755: MUL
27756: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27757: LD_VAR 0 6
27761: PPUSH
27762: CALL_OW 257
27766: PUSH
27767: LD_INT 5
27769: PUSH
27770: LD_INT 7
27772: PUSH
27773: LD_INT 9
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: IN
27781: PUSH
27782: LD_VAR 0 1
27786: PPUSH
27787: LD_INT 52
27789: PPUSH
27790: CALL_OW 321
27794: PUSH
27795: LD_INT 2
27797: EQUAL
27798: AND
27799: IFFALSE 27816
// bpoints := bpoints * 1.5 ;
27801: LD_ADDR_VAR 0 10
27805: PUSH
27806: LD_VAR 0 10
27810: PUSH
27811: LD_REAL  1.50000000000000E+0000
27814: MUL
27815: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27816: LD_VAR 0 1
27820: PPUSH
27821: LD_INT 66
27823: PPUSH
27824: CALL_OW 321
27828: PUSH
27829: LD_INT 2
27831: EQUAL
27832: IFFALSE 27849
// bpoints := bpoints * 1.1 ;
27834: LD_ADDR_VAR 0 10
27838: PUSH
27839: LD_VAR 0 10
27843: PUSH
27844: LD_REAL  1.10000000000000E+0000
27847: MUL
27848: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27849: LD_ADDR_VAR 0 10
27853: PUSH
27854: LD_VAR 0 10
27858: PUSH
27859: LD_VAR 0 6
27863: PPUSH
27864: LD_INT 1
27866: PPUSH
27867: CALL_OW 259
27871: PUSH
27872: LD_REAL  1.15000000000000E+0000
27875: MUL
27876: MUL
27877: ST_TO_ADDR
// end ; unit_vehicle :
27878: GO 28706
27880: LD_INT 2
27882: DOUBLE
27883: EQUAL
27884: IFTRUE 27888
27886: GO 28694
27888: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27889: LD_VAR 0 6
27893: PPUSH
27894: CALL_OW 264
27898: PUSH
27899: LD_INT 2
27901: PUSH
27902: LD_INT 42
27904: PUSH
27905: LD_INT 24
27907: PUSH
27908: EMPTY
27909: LIST
27910: LIST
27911: LIST
27912: IN
27913: IFFALSE 27934
// points := [ 25 , 5 , 3 ] ;
27915: LD_ADDR_VAR 0 9
27919: PUSH
27920: LD_INT 25
27922: PUSH
27923: LD_INT 5
27925: PUSH
27926: LD_INT 3
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: LIST
27933: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27934: LD_VAR 0 6
27938: PPUSH
27939: CALL_OW 264
27943: PUSH
27944: LD_INT 4
27946: PUSH
27947: LD_INT 43
27949: PUSH
27950: LD_INT 25
27952: PUSH
27953: EMPTY
27954: LIST
27955: LIST
27956: LIST
27957: IN
27958: IFFALSE 27979
// points := [ 40 , 15 , 5 ] ;
27960: LD_ADDR_VAR 0 9
27964: PUSH
27965: LD_INT 40
27967: PUSH
27968: LD_INT 15
27970: PUSH
27971: LD_INT 5
27973: PUSH
27974: EMPTY
27975: LIST
27976: LIST
27977: LIST
27978: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27979: LD_VAR 0 6
27983: PPUSH
27984: CALL_OW 264
27988: PUSH
27989: LD_INT 3
27991: PUSH
27992: LD_INT 23
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: IN
27999: IFFALSE 28020
// points := [ 7 , 25 , 8 ] ;
28001: LD_ADDR_VAR 0 9
28005: PUSH
28006: LD_INT 7
28008: PUSH
28009: LD_INT 25
28011: PUSH
28012: LD_INT 8
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28020: LD_VAR 0 6
28024: PPUSH
28025: CALL_OW 264
28029: PUSH
28030: LD_INT 5
28032: PUSH
28033: LD_INT 27
28035: PUSH
28036: LD_INT 44
28038: PUSH
28039: EMPTY
28040: LIST
28041: LIST
28042: LIST
28043: IN
28044: IFFALSE 28065
// points := [ 14 , 50 , 16 ] ;
28046: LD_ADDR_VAR 0 9
28050: PUSH
28051: LD_INT 14
28053: PUSH
28054: LD_INT 50
28056: PUSH
28057: LD_INT 16
28059: PUSH
28060: EMPTY
28061: LIST
28062: LIST
28063: LIST
28064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28065: LD_VAR 0 6
28069: PPUSH
28070: CALL_OW 264
28074: PUSH
28075: LD_INT 6
28077: PUSH
28078: LD_INT 46
28080: PUSH
28081: EMPTY
28082: LIST
28083: LIST
28084: IN
28085: IFFALSE 28106
// points := [ 32 , 120 , 70 ] ;
28087: LD_ADDR_VAR 0 9
28091: PUSH
28092: LD_INT 32
28094: PUSH
28095: LD_INT 120
28097: PUSH
28098: LD_INT 70
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: LIST
28105: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28106: LD_VAR 0 6
28110: PPUSH
28111: CALL_OW 264
28115: PUSH
28116: LD_INT 7
28118: PUSH
28119: LD_INT 28
28121: PUSH
28122: LD_INT 45
28124: PUSH
28125: LD_INT 92
28127: PUSH
28128: EMPTY
28129: LIST
28130: LIST
28131: LIST
28132: LIST
28133: IN
28134: IFFALSE 28155
// points := [ 35 , 20 , 45 ] ;
28136: LD_ADDR_VAR 0 9
28140: PUSH
28141: LD_INT 35
28143: PUSH
28144: LD_INT 20
28146: PUSH
28147: LD_INT 45
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28155: LD_VAR 0 6
28159: PPUSH
28160: CALL_OW 264
28164: PUSH
28165: LD_INT 47
28167: PUSH
28168: EMPTY
28169: LIST
28170: IN
28171: IFFALSE 28192
// points := [ 67 , 45 , 75 ] ;
28173: LD_ADDR_VAR 0 9
28177: PUSH
28178: LD_INT 67
28180: PUSH
28181: LD_INT 45
28183: PUSH
28184: LD_INT 75
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: LIST
28191: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28192: LD_VAR 0 6
28196: PPUSH
28197: CALL_OW 264
28201: PUSH
28202: LD_INT 26
28204: PUSH
28205: EMPTY
28206: LIST
28207: IN
28208: IFFALSE 28229
// points := [ 120 , 30 , 80 ] ;
28210: LD_ADDR_VAR 0 9
28214: PUSH
28215: LD_INT 120
28217: PUSH
28218: LD_INT 30
28220: PUSH
28221: LD_INT 80
28223: PUSH
28224: EMPTY
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28229: LD_VAR 0 6
28233: PPUSH
28234: CALL_OW 264
28238: PUSH
28239: LD_INT 22
28241: PUSH
28242: EMPTY
28243: LIST
28244: IN
28245: IFFALSE 28266
// points := [ 40 , 1 , 1 ] ;
28247: LD_ADDR_VAR 0 9
28251: PUSH
28252: LD_INT 40
28254: PUSH
28255: LD_INT 1
28257: PUSH
28258: LD_INT 1
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: LIST
28265: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28266: LD_VAR 0 6
28270: PPUSH
28271: CALL_OW 264
28275: PUSH
28276: LD_INT 29
28278: PUSH
28279: EMPTY
28280: LIST
28281: IN
28282: IFFALSE 28303
// points := [ 70 , 200 , 400 ] ;
28284: LD_ADDR_VAR 0 9
28288: PUSH
28289: LD_INT 70
28291: PUSH
28292: LD_INT 200
28294: PUSH
28295: LD_INT 400
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: LIST
28302: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28303: LD_VAR 0 6
28307: PPUSH
28308: CALL_OW 264
28312: PUSH
28313: LD_INT 14
28315: PUSH
28316: LD_INT 53
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: IN
28323: IFFALSE 28344
// points := [ 40 , 10 , 20 ] ;
28325: LD_ADDR_VAR 0 9
28329: PUSH
28330: LD_INT 40
28332: PUSH
28333: LD_INT 10
28335: PUSH
28336: LD_INT 20
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: LIST
28343: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28344: LD_VAR 0 6
28348: PPUSH
28349: CALL_OW 264
28353: PUSH
28354: LD_INT 9
28356: PUSH
28357: EMPTY
28358: LIST
28359: IN
28360: IFFALSE 28381
// points := [ 5 , 70 , 20 ] ;
28362: LD_ADDR_VAR 0 9
28366: PUSH
28367: LD_INT 5
28369: PUSH
28370: LD_INT 70
28372: PUSH
28373: LD_INT 20
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: LIST
28380: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28381: LD_VAR 0 6
28385: PPUSH
28386: CALL_OW 264
28390: PUSH
28391: LD_INT 10
28393: PUSH
28394: EMPTY
28395: LIST
28396: IN
28397: IFFALSE 28418
// points := [ 35 , 110 , 70 ] ;
28399: LD_ADDR_VAR 0 9
28403: PUSH
28404: LD_INT 35
28406: PUSH
28407: LD_INT 110
28409: PUSH
28410: LD_INT 70
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28418: LD_VAR 0 6
28422: PPUSH
28423: CALL_OW 265
28427: PUSH
28428: LD_INT 25
28430: EQUAL
28431: IFFALSE 28452
// points := [ 80 , 65 , 100 ] ;
28433: LD_ADDR_VAR 0 9
28437: PUSH
28438: LD_INT 80
28440: PUSH
28441: LD_INT 65
28443: PUSH
28444: LD_INT 100
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28452: LD_VAR 0 6
28456: PPUSH
28457: CALL_OW 263
28461: PUSH
28462: LD_INT 1
28464: EQUAL
28465: IFFALSE 28500
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28467: LD_ADDR_VAR 0 10
28471: PUSH
28472: LD_VAR 0 10
28476: PUSH
28477: LD_VAR 0 6
28481: PPUSH
28482: CALL_OW 311
28486: PPUSH
28487: LD_INT 3
28489: PPUSH
28490: CALL_OW 259
28494: PUSH
28495: LD_INT 4
28497: MUL
28498: MUL
28499: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28500: LD_VAR 0 6
28504: PPUSH
28505: CALL_OW 263
28509: PUSH
28510: LD_INT 2
28512: EQUAL
28513: IFFALSE 28564
// begin j := IsControledBy ( i ) ;
28515: LD_ADDR_VAR 0 7
28519: PUSH
28520: LD_VAR 0 6
28524: PPUSH
28525: CALL_OW 312
28529: ST_TO_ADDR
// if j then
28530: LD_VAR 0 7
28534: IFFALSE 28564
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28536: LD_ADDR_VAR 0 10
28540: PUSH
28541: LD_VAR 0 10
28545: PUSH
28546: LD_VAR 0 7
28550: PPUSH
28551: LD_INT 3
28553: PPUSH
28554: CALL_OW 259
28558: PUSH
28559: LD_INT 3
28561: MUL
28562: MUL
28563: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28564: LD_VAR 0 6
28568: PPUSH
28569: CALL_OW 264
28573: PUSH
28574: LD_INT 5
28576: PUSH
28577: LD_INT 6
28579: PUSH
28580: LD_INT 46
28582: PUSH
28583: LD_INT 44
28585: PUSH
28586: LD_INT 47
28588: PUSH
28589: LD_INT 45
28591: PUSH
28592: LD_INT 28
28594: PUSH
28595: LD_INT 7
28597: PUSH
28598: LD_INT 27
28600: PUSH
28601: LD_INT 29
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: IN
28616: PUSH
28617: LD_VAR 0 1
28621: PPUSH
28622: LD_INT 52
28624: PPUSH
28625: CALL_OW 321
28629: PUSH
28630: LD_INT 2
28632: EQUAL
28633: AND
28634: IFFALSE 28651
// bpoints := bpoints * 1.2 ;
28636: LD_ADDR_VAR 0 10
28640: PUSH
28641: LD_VAR 0 10
28645: PUSH
28646: LD_REAL  1.20000000000000E+0000
28649: MUL
28650: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28651: LD_VAR 0 6
28655: PPUSH
28656: CALL_OW 264
28660: PUSH
28661: LD_INT 6
28663: PUSH
28664: LD_INT 46
28666: PUSH
28667: LD_INT 47
28669: PUSH
28670: EMPTY
28671: LIST
28672: LIST
28673: LIST
28674: IN
28675: IFFALSE 28692
// bpoints := bpoints * 1.2 ;
28677: LD_ADDR_VAR 0 10
28681: PUSH
28682: LD_VAR 0 10
28686: PUSH
28687: LD_REAL  1.20000000000000E+0000
28690: MUL
28691: ST_TO_ADDR
// end ; unit_building :
28692: GO 28706
28694: LD_INT 3
28696: DOUBLE
28697: EQUAL
28698: IFTRUE 28702
28700: GO 28705
28702: POP
// ; end ;
28703: GO 28706
28705: POP
// for j = 1 to 3 do
28706: LD_ADDR_VAR 0 7
28710: PUSH
28711: DOUBLE
28712: LD_INT 1
28714: DEC
28715: ST_TO_ADDR
28716: LD_INT 3
28718: PUSH
28719: FOR_TO
28720: IFFALSE 28773
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28722: LD_ADDR_VAR 0 5
28726: PUSH
28727: LD_VAR 0 5
28731: PPUSH
28732: LD_VAR 0 7
28736: PPUSH
28737: LD_VAR 0 5
28741: PUSH
28742: LD_VAR 0 7
28746: ARRAY
28747: PUSH
28748: LD_VAR 0 9
28752: PUSH
28753: LD_VAR 0 7
28757: ARRAY
28758: PUSH
28759: LD_VAR 0 10
28763: MUL
28764: PLUS
28765: PPUSH
28766: CALL_OW 1
28770: ST_TO_ADDR
28771: GO 28719
28773: POP
28774: POP
// end ;
28775: GO 27254
28777: POP
28778: POP
// result := Replace ( result , 4 , tmp ) ;
28779: LD_ADDR_VAR 0 5
28783: PUSH
28784: LD_VAR 0 5
28788: PPUSH
28789: LD_INT 4
28791: PPUSH
28792: LD_VAR 0 8
28796: PPUSH
28797: CALL_OW 1
28801: ST_TO_ADDR
// end ;
28802: LD_VAR 0 5
28806: RET
// export function DangerAtRange ( unit , range ) ; begin
28807: LD_INT 0
28809: PPUSH
// if not unit then
28810: LD_VAR 0 1
28814: NOT
28815: IFFALSE 28819
// exit ;
28817: GO 28864
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28819: LD_ADDR_VAR 0 3
28823: PUSH
28824: LD_VAR 0 1
28828: PPUSH
28829: CALL_OW 255
28833: PPUSH
28834: LD_VAR 0 1
28838: PPUSH
28839: CALL_OW 250
28843: PPUSH
28844: LD_VAR 0 1
28848: PPUSH
28849: CALL_OW 251
28853: PPUSH
28854: LD_VAR 0 2
28858: PPUSH
28859: CALL 27106 0 4
28863: ST_TO_ADDR
// end ;
28864: LD_VAR 0 3
28868: RET
// export function DangerInArea ( side , area ) ; begin
28869: LD_INT 0
28871: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28872: LD_ADDR_VAR 0 3
28876: PUSH
28877: LD_VAR 0 2
28881: PPUSH
28882: LD_INT 81
28884: PUSH
28885: LD_VAR 0 1
28889: PUSH
28890: EMPTY
28891: LIST
28892: LIST
28893: PPUSH
28894: CALL_OW 70
28898: ST_TO_ADDR
// end ;
28899: LD_VAR 0 3
28903: RET
// export function IsExtension ( b ) ; begin
28904: LD_INT 0
28906: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28907: LD_ADDR_VAR 0 2
28911: PUSH
28912: LD_VAR 0 1
28916: PUSH
28917: LD_INT 23
28919: PUSH
28920: LD_INT 20
28922: PUSH
28923: LD_INT 22
28925: PUSH
28926: LD_INT 17
28928: PUSH
28929: LD_INT 24
28931: PUSH
28932: LD_INT 21
28934: PUSH
28935: LD_INT 19
28937: PUSH
28938: LD_INT 16
28940: PUSH
28941: LD_INT 25
28943: PUSH
28944: LD_INT 18
28946: PUSH
28947: EMPTY
28948: LIST
28949: LIST
28950: LIST
28951: LIST
28952: LIST
28953: LIST
28954: LIST
28955: LIST
28956: LIST
28957: LIST
28958: IN
28959: ST_TO_ADDR
// end ;
28960: LD_VAR 0 2
28964: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28965: LD_INT 0
28967: PPUSH
28968: PPUSH
28969: PPUSH
// result := [ ] ;
28970: LD_ADDR_VAR 0 4
28974: PUSH
28975: EMPTY
28976: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28977: LD_ADDR_VAR 0 5
28981: PUSH
28982: LD_VAR 0 2
28986: PPUSH
28987: LD_INT 21
28989: PUSH
28990: LD_INT 3
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PPUSH
28997: CALL_OW 70
29001: ST_TO_ADDR
// if not tmp then
29002: LD_VAR 0 5
29006: NOT
29007: IFFALSE 29011
// exit ;
29009: GO 29075
// if checkLink then
29011: LD_VAR 0 3
29015: IFFALSE 29065
// begin for i in tmp do
29017: LD_ADDR_VAR 0 6
29021: PUSH
29022: LD_VAR 0 5
29026: PUSH
29027: FOR_IN
29028: IFFALSE 29063
// if GetBase ( i ) <> base then
29030: LD_VAR 0 6
29034: PPUSH
29035: CALL_OW 274
29039: PUSH
29040: LD_VAR 0 1
29044: NONEQUAL
29045: IFFALSE 29061
// ComLinkToBase ( base , i ) ;
29047: LD_VAR 0 1
29051: PPUSH
29052: LD_VAR 0 6
29056: PPUSH
29057: CALL_OW 169
29061: GO 29027
29063: POP
29064: POP
// end ; result := tmp ;
29065: LD_ADDR_VAR 0 4
29069: PUSH
29070: LD_VAR 0 5
29074: ST_TO_ADDR
// end ;
29075: LD_VAR 0 4
29079: RET
// export function ComComplete ( units , b ) ; var i ; begin
29080: LD_INT 0
29082: PPUSH
29083: PPUSH
// if not units then
29084: LD_VAR 0 1
29088: NOT
29089: IFFALSE 29093
// exit ;
29091: GO 29183
// for i in units do
29093: LD_ADDR_VAR 0 4
29097: PUSH
29098: LD_VAR 0 1
29102: PUSH
29103: FOR_IN
29104: IFFALSE 29181
// if BuildingStatus ( b ) = bs_build then
29106: LD_VAR 0 2
29110: PPUSH
29111: CALL_OW 461
29115: PUSH
29116: LD_INT 1
29118: EQUAL
29119: IFFALSE 29179
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29121: LD_VAR 0 4
29125: PPUSH
29126: LD_STRING h
29128: PUSH
29129: LD_VAR 0 2
29133: PPUSH
29134: CALL_OW 250
29138: PUSH
29139: LD_VAR 0 2
29143: PPUSH
29144: CALL_OW 251
29148: PUSH
29149: LD_VAR 0 2
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: LD_INT 0
29159: PUSH
29160: LD_INT 0
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: PUSH
29172: EMPTY
29173: LIST
29174: PPUSH
29175: CALL_OW 446
29179: GO 29103
29181: POP
29182: POP
// end ;
29183: LD_VAR 0 3
29187: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29188: LD_INT 0
29190: PPUSH
29191: PPUSH
29192: PPUSH
29193: PPUSH
29194: PPUSH
29195: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29196: LD_VAR 0 1
29200: NOT
29201: PUSH
29202: LD_VAR 0 1
29206: PPUSH
29207: CALL_OW 263
29211: PUSH
29212: LD_INT 2
29214: NONEQUAL
29215: OR
29216: IFFALSE 29220
// exit ;
29218: GO 29536
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29220: LD_ADDR_VAR 0 6
29224: PUSH
29225: LD_INT 22
29227: PUSH
29228: LD_VAR 0 1
29232: PPUSH
29233: CALL_OW 255
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 2
29244: PUSH
29245: LD_INT 30
29247: PUSH
29248: LD_INT 36
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 34
29257: PUSH
29258: LD_INT 31
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: LIST
29269: PUSH
29270: EMPTY
29271: LIST
29272: LIST
29273: PPUSH
29274: CALL_OW 69
29278: ST_TO_ADDR
// if not tmp then
29279: LD_VAR 0 6
29283: NOT
29284: IFFALSE 29288
// exit ;
29286: GO 29536
// result := [ ] ;
29288: LD_ADDR_VAR 0 2
29292: PUSH
29293: EMPTY
29294: ST_TO_ADDR
// for i in tmp do
29295: LD_ADDR_VAR 0 3
29299: PUSH
29300: LD_VAR 0 6
29304: PUSH
29305: FOR_IN
29306: IFFALSE 29377
// begin t := UnitsInside ( i ) ;
29308: LD_ADDR_VAR 0 4
29312: PUSH
29313: LD_VAR 0 3
29317: PPUSH
29318: CALL_OW 313
29322: ST_TO_ADDR
// if t then
29323: LD_VAR 0 4
29327: IFFALSE 29375
// for j in t do
29329: LD_ADDR_VAR 0 7
29333: PUSH
29334: LD_VAR 0 4
29338: PUSH
29339: FOR_IN
29340: IFFALSE 29373
// result := Replace ( result , result + 1 , j ) ;
29342: LD_ADDR_VAR 0 2
29346: PUSH
29347: LD_VAR 0 2
29351: PPUSH
29352: LD_VAR 0 2
29356: PUSH
29357: LD_INT 1
29359: PLUS
29360: PPUSH
29361: LD_VAR 0 7
29365: PPUSH
29366: CALL_OW 1
29370: ST_TO_ADDR
29371: GO 29339
29373: POP
29374: POP
// end ;
29375: GO 29305
29377: POP
29378: POP
// if not result then
29379: LD_VAR 0 2
29383: NOT
29384: IFFALSE 29388
// exit ;
29386: GO 29536
// mech := result [ 1 ] ;
29388: LD_ADDR_VAR 0 5
29392: PUSH
29393: LD_VAR 0 2
29397: PUSH
29398: LD_INT 1
29400: ARRAY
29401: ST_TO_ADDR
// if result > 1 then
29402: LD_VAR 0 2
29406: PUSH
29407: LD_INT 1
29409: GREATER
29410: IFFALSE 29522
// begin for i = 2 to result do
29412: LD_ADDR_VAR 0 3
29416: PUSH
29417: DOUBLE
29418: LD_INT 2
29420: DEC
29421: ST_TO_ADDR
29422: LD_VAR 0 2
29426: PUSH
29427: FOR_TO
29428: IFFALSE 29520
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29430: LD_ADDR_VAR 0 4
29434: PUSH
29435: LD_VAR 0 2
29439: PUSH
29440: LD_VAR 0 3
29444: ARRAY
29445: PPUSH
29446: LD_INT 3
29448: PPUSH
29449: CALL_OW 259
29453: PUSH
29454: LD_VAR 0 2
29458: PUSH
29459: LD_VAR 0 3
29463: ARRAY
29464: PPUSH
29465: CALL_OW 432
29469: MINUS
29470: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29471: LD_VAR 0 4
29475: PUSH
29476: LD_VAR 0 5
29480: PPUSH
29481: LD_INT 3
29483: PPUSH
29484: CALL_OW 259
29488: PUSH
29489: LD_VAR 0 5
29493: PPUSH
29494: CALL_OW 432
29498: MINUS
29499: GREATEREQUAL
29500: IFFALSE 29518
// mech := result [ i ] ;
29502: LD_ADDR_VAR 0 5
29506: PUSH
29507: LD_VAR 0 2
29511: PUSH
29512: LD_VAR 0 3
29516: ARRAY
29517: ST_TO_ADDR
// end ;
29518: GO 29427
29520: POP
29521: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29522: LD_VAR 0 1
29526: PPUSH
29527: LD_VAR 0 5
29531: PPUSH
29532: CALL_OW 135
// end ;
29536: LD_VAR 0 2
29540: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29541: LD_INT 0
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
29547: PPUSH
29548: PPUSH
29549: PPUSH
29550: PPUSH
29551: PPUSH
29552: PPUSH
29553: PPUSH
29554: PPUSH
29555: PPUSH
// result := [ ] ;
29556: LD_ADDR_VAR 0 7
29560: PUSH
29561: EMPTY
29562: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29563: LD_VAR 0 1
29567: PPUSH
29568: CALL_OW 266
29572: PUSH
29573: LD_INT 0
29575: PUSH
29576: LD_INT 1
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: IN
29583: NOT
29584: IFFALSE 29588
// exit ;
29586: GO 31222
// if name then
29588: LD_VAR 0 3
29592: IFFALSE 29608
// SetBName ( base_dep , name ) ;
29594: LD_VAR 0 1
29598: PPUSH
29599: LD_VAR 0 3
29603: PPUSH
29604: CALL_OW 500
// base := GetBase ( base_dep ) ;
29608: LD_ADDR_VAR 0 15
29612: PUSH
29613: LD_VAR 0 1
29617: PPUSH
29618: CALL_OW 274
29622: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29623: LD_ADDR_VAR 0 16
29627: PUSH
29628: LD_VAR 0 1
29632: PPUSH
29633: CALL_OW 255
29637: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29638: LD_ADDR_VAR 0 17
29642: PUSH
29643: LD_VAR 0 1
29647: PPUSH
29648: CALL_OW 248
29652: ST_TO_ADDR
// if sources then
29653: LD_VAR 0 5
29657: IFFALSE 29704
// for i = 1 to 3 do
29659: LD_ADDR_VAR 0 8
29663: PUSH
29664: DOUBLE
29665: LD_INT 1
29667: DEC
29668: ST_TO_ADDR
29669: LD_INT 3
29671: PUSH
29672: FOR_TO
29673: IFFALSE 29702
// AddResourceType ( base , i , sources [ i ] ) ;
29675: LD_VAR 0 15
29679: PPUSH
29680: LD_VAR 0 8
29684: PPUSH
29685: LD_VAR 0 5
29689: PUSH
29690: LD_VAR 0 8
29694: ARRAY
29695: PPUSH
29696: CALL_OW 276
29700: GO 29672
29702: POP
29703: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29704: LD_ADDR_VAR 0 18
29708: PUSH
29709: LD_VAR 0 15
29713: PPUSH
29714: LD_VAR 0 2
29718: PPUSH
29719: LD_INT 1
29721: PPUSH
29722: CALL 28965 0 3
29726: ST_TO_ADDR
// InitHc ;
29727: CALL_OW 19
// InitUc ;
29731: CALL_OW 18
// uc_side := side ;
29735: LD_ADDR_OWVAR 20
29739: PUSH
29740: LD_VAR 0 16
29744: ST_TO_ADDR
// uc_nation := nation ;
29745: LD_ADDR_OWVAR 21
29749: PUSH
29750: LD_VAR 0 17
29754: ST_TO_ADDR
// if buildings then
29755: LD_VAR 0 18
29759: IFFALSE 31081
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29761: LD_ADDR_VAR 0 19
29765: PUSH
29766: LD_VAR 0 18
29770: PPUSH
29771: LD_INT 2
29773: PUSH
29774: LD_INT 30
29776: PUSH
29777: LD_INT 29
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 30
29786: PUSH
29787: LD_INT 30
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: LIST
29798: PPUSH
29799: CALL_OW 72
29803: ST_TO_ADDR
// if tmp then
29804: LD_VAR 0 19
29808: IFFALSE 29856
// for i in tmp do
29810: LD_ADDR_VAR 0 8
29814: PUSH
29815: LD_VAR 0 19
29819: PUSH
29820: FOR_IN
29821: IFFALSE 29854
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29823: LD_VAR 0 8
29827: PPUSH
29828: CALL_OW 250
29832: PPUSH
29833: LD_VAR 0 8
29837: PPUSH
29838: CALL_OW 251
29842: PPUSH
29843: LD_VAR 0 16
29847: PPUSH
29848: CALL_OW 441
29852: GO 29820
29854: POP
29855: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29856: LD_VAR 0 18
29860: PPUSH
29861: LD_INT 2
29863: PUSH
29864: LD_INT 30
29866: PUSH
29867: LD_INT 32
29869: PUSH
29870: EMPTY
29871: LIST
29872: LIST
29873: PUSH
29874: LD_INT 30
29876: PUSH
29877: LD_INT 33
29879: PUSH
29880: EMPTY
29881: LIST
29882: LIST
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: LIST
29888: PPUSH
29889: CALL_OW 72
29893: IFFALSE 29981
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29895: LD_ADDR_VAR 0 8
29899: PUSH
29900: LD_VAR 0 18
29904: PPUSH
29905: LD_INT 2
29907: PUSH
29908: LD_INT 30
29910: PUSH
29911: LD_INT 32
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: PUSH
29918: LD_INT 30
29920: PUSH
29921: LD_INT 33
29923: PUSH
29924: EMPTY
29925: LIST
29926: LIST
29927: PUSH
29928: EMPTY
29929: LIST
29930: LIST
29931: LIST
29932: PPUSH
29933: CALL_OW 72
29937: PUSH
29938: FOR_IN
29939: IFFALSE 29979
// begin if not GetBWeapon ( i ) then
29941: LD_VAR 0 8
29945: PPUSH
29946: CALL_OW 269
29950: NOT
29951: IFFALSE 29977
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29953: LD_VAR 0 8
29957: PPUSH
29958: LD_VAR 0 8
29962: PPUSH
29963: LD_VAR 0 2
29967: PPUSH
29968: CALL 31227 0 2
29972: PPUSH
29973: CALL_OW 431
// end ;
29977: GO 29938
29979: POP
29980: POP
// end ; for i = 1 to personel do
29981: LD_ADDR_VAR 0 8
29985: PUSH
29986: DOUBLE
29987: LD_INT 1
29989: DEC
29990: ST_TO_ADDR
29991: LD_VAR 0 6
29995: PUSH
29996: FOR_TO
29997: IFFALSE 31061
// begin if i > 4 then
29999: LD_VAR 0 8
30003: PUSH
30004: LD_INT 4
30006: GREATER
30007: IFFALSE 30011
// break ;
30009: GO 31061
// case i of 1 :
30011: LD_VAR 0 8
30015: PUSH
30016: LD_INT 1
30018: DOUBLE
30019: EQUAL
30020: IFTRUE 30024
30022: GO 30104
30024: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30025: LD_ADDR_VAR 0 12
30029: PUSH
30030: LD_VAR 0 18
30034: PPUSH
30035: LD_INT 22
30037: PUSH
30038: LD_VAR 0 16
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 58
30049: PUSH
30050: EMPTY
30051: LIST
30052: PUSH
30053: LD_INT 2
30055: PUSH
30056: LD_INT 30
30058: PUSH
30059: LD_INT 32
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 30
30068: PUSH
30069: LD_INT 4
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 30
30078: PUSH
30079: LD_INT 5
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: PUSH
30092: EMPTY
30093: LIST
30094: LIST
30095: LIST
30096: PPUSH
30097: CALL_OW 72
30101: ST_TO_ADDR
30102: GO 30326
30104: LD_INT 2
30106: DOUBLE
30107: EQUAL
30108: IFTRUE 30112
30110: GO 30174
30112: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30113: LD_ADDR_VAR 0 12
30117: PUSH
30118: LD_VAR 0 18
30122: PPUSH
30123: LD_INT 22
30125: PUSH
30126: LD_VAR 0 16
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 2
30137: PUSH
30138: LD_INT 30
30140: PUSH
30141: LD_INT 0
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 30
30150: PUSH
30151: LD_INT 1
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: PUSH
30158: EMPTY
30159: LIST
30160: LIST
30161: LIST
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PPUSH
30167: CALL_OW 72
30171: ST_TO_ADDR
30172: GO 30326
30174: LD_INT 3
30176: DOUBLE
30177: EQUAL
30178: IFTRUE 30182
30180: GO 30244
30182: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30183: LD_ADDR_VAR 0 12
30187: PUSH
30188: LD_VAR 0 18
30192: PPUSH
30193: LD_INT 22
30195: PUSH
30196: LD_VAR 0 16
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 2
30207: PUSH
30208: LD_INT 30
30210: PUSH
30211: LD_INT 2
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 30
30220: PUSH
30221: LD_INT 3
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PPUSH
30237: CALL_OW 72
30241: ST_TO_ADDR
30242: GO 30326
30244: LD_INT 4
30246: DOUBLE
30247: EQUAL
30248: IFTRUE 30252
30250: GO 30325
30252: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30253: LD_ADDR_VAR 0 12
30257: PUSH
30258: LD_VAR 0 18
30262: PPUSH
30263: LD_INT 22
30265: PUSH
30266: LD_VAR 0 16
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PUSH
30275: LD_INT 2
30277: PUSH
30278: LD_INT 30
30280: PUSH
30281: LD_INT 6
30283: PUSH
30284: EMPTY
30285: LIST
30286: LIST
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: LD_INT 7
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 8
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: PPUSH
30318: CALL_OW 72
30322: ST_TO_ADDR
30323: GO 30326
30325: POP
// if i = 1 then
30326: LD_VAR 0 8
30330: PUSH
30331: LD_INT 1
30333: EQUAL
30334: IFFALSE 30445
// begin tmp := [ ] ;
30336: LD_ADDR_VAR 0 19
30340: PUSH
30341: EMPTY
30342: ST_TO_ADDR
// for j in f do
30343: LD_ADDR_VAR 0 9
30347: PUSH
30348: LD_VAR 0 12
30352: PUSH
30353: FOR_IN
30354: IFFALSE 30427
// if GetBType ( j ) = b_bunker then
30356: LD_VAR 0 9
30360: PPUSH
30361: CALL_OW 266
30365: PUSH
30366: LD_INT 32
30368: EQUAL
30369: IFFALSE 30396
// tmp := Insert ( tmp , 1 , j ) else
30371: LD_ADDR_VAR 0 19
30375: PUSH
30376: LD_VAR 0 19
30380: PPUSH
30381: LD_INT 1
30383: PPUSH
30384: LD_VAR 0 9
30388: PPUSH
30389: CALL_OW 2
30393: ST_TO_ADDR
30394: GO 30425
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30396: LD_ADDR_VAR 0 19
30400: PUSH
30401: LD_VAR 0 19
30405: PPUSH
30406: LD_VAR 0 19
30410: PUSH
30411: LD_INT 1
30413: PLUS
30414: PPUSH
30415: LD_VAR 0 9
30419: PPUSH
30420: CALL_OW 2
30424: ST_TO_ADDR
30425: GO 30353
30427: POP
30428: POP
// if tmp then
30429: LD_VAR 0 19
30433: IFFALSE 30445
// f := tmp ;
30435: LD_ADDR_VAR 0 12
30439: PUSH
30440: LD_VAR 0 19
30444: ST_TO_ADDR
// end ; x := personel [ i ] ;
30445: LD_ADDR_VAR 0 13
30449: PUSH
30450: LD_VAR 0 6
30454: PUSH
30455: LD_VAR 0 8
30459: ARRAY
30460: ST_TO_ADDR
// if x = - 1 then
30461: LD_VAR 0 13
30465: PUSH
30466: LD_INT 1
30468: NEG
30469: EQUAL
30470: IFFALSE 30679
// begin for j in f do
30472: LD_ADDR_VAR 0 9
30476: PUSH
30477: LD_VAR 0 12
30481: PUSH
30482: FOR_IN
30483: IFFALSE 30675
// repeat InitHc ;
30485: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30489: LD_VAR 0 9
30493: PPUSH
30494: CALL_OW 266
30498: PUSH
30499: LD_INT 5
30501: EQUAL
30502: IFFALSE 30572
// begin if UnitsInside ( j ) < 3 then
30504: LD_VAR 0 9
30508: PPUSH
30509: CALL_OW 313
30513: PUSH
30514: LD_INT 3
30516: LESS
30517: IFFALSE 30553
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30519: LD_INT 0
30521: PPUSH
30522: LD_INT 5
30524: PUSH
30525: LD_INT 8
30527: PUSH
30528: LD_INT 9
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: LIST
30535: PUSH
30536: LD_VAR 0 17
30540: ARRAY
30541: PPUSH
30542: LD_VAR 0 4
30546: PPUSH
30547: CALL_OW 380
30551: GO 30570
// PrepareHuman ( false , i , skill ) ;
30553: LD_INT 0
30555: PPUSH
30556: LD_VAR 0 8
30560: PPUSH
30561: LD_VAR 0 4
30565: PPUSH
30566: CALL_OW 380
// end else
30570: GO 30589
// PrepareHuman ( false , i , skill ) ;
30572: LD_INT 0
30574: PPUSH
30575: LD_VAR 0 8
30579: PPUSH
30580: LD_VAR 0 4
30584: PPUSH
30585: CALL_OW 380
// un := CreateHuman ;
30589: LD_ADDR_VAR 0 14
30593: PUSH
30594: CALL_OW 44
30598: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30599: LD_ADDR_VAR 0 7
30603: PUSH
30604: LD_VAR 0 7
30608: PPUSH
30609: LD_INT 1
30611: PPUSH
30612: LD_VAR 0 14
30616: PPUSH
30617: CALL_OW 2
30621: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30622: LD_VAR 0 14
30626: PPUSH
30627: LD_VAR 0 9
30631: PPUSH
30632: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30636: LD_VAR 0 9
30640: PPUSH
30641: CALL_OW 313
30645: PUSH
30646: LD_INT 6
30648: EQUAL
30649: PUSH
30650: LD_VAR 0 9
30654: PPUSH
30655: CALL_OW 266
30659: PUSH
30660: LD_INT 32
30662: PUSH
30663: LD_INT 31
30665: PUSH
30666: EMPTY
30667: LIST
30668: LIST
30669: IN
30670: OR
30671: IFFALSE 30485
30673: GO 30482
30675: POP
30676: POP
// end else
30677: GO 31059
// for j = 1 to x do
30679: LD_ADDR_VAR 0 9
30683: PUSH
30684: DOUBLE
30685: LD_INT 1
30687: DEC
30688: ST_TO_ADDR
30689: LD_VAR 0 13
30693: PUSH
30694: FOR_TO
30695: IFFALSE 31057
// begin InitHc ;
30697: CALL_OW 19
// if not f then
30701: LD_VAR 0 12
30705: NOT
30706: IFFALSE 30795
// begin PrepareHuman ( false , i , skill ) ;
30708: LD_INT 0
30710: PPUSH
30711: LD_VAR 0 8
30715: PPUSH
30716: LD_VAR 0 4
30720: PPUSH
30721: CALL_OW 380
// un := CreateHuman ;
30725: LD_ADDR_VAR 0 14
30729: PUSH
30730: CALL_OW 44
30734: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30735: LD_ADDR_VAR 0 7
30739: PUSH
30740: LD_VAR 0 7
30744: PPUSH
30745: LD_INT 1
30747: PPUSH
30748: LD_VAR 0 14
30752: PPUSH
30753: CALL_OW 2
30757: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30758: LD_VAR 0 14
30762: PPUSH
30763: LD_VAR 0 1
30767: PPUSH
30768: CALL_OW 250
30772: PPUSH
30773: LD_VAR 0 1
30777: PPUSH
30778: CALL_OW 251
30782: PPUSH
30783: LD_INT 10
30785: PPUSH
30786: LD_INT 0
30788: PPUSH
30789: CALL_OW 50
// continue ;
30793: GO 30694
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30795: LD_VAR 0 12
30799: PUSH
30800: LD_INT 1
30802: ARRAY
30803: PPUSH
30804: CALL_OW 313
30808: PUSH
30809: LD_VAR 0 12
30813: PUSH
30814: LD_INT 1
30816: ARRAY
30817: PPUSH
30818: CALL_OW 266
30822: PUSH
30823: LD_INT 32
30825: PUSH
30826: LD_INT 31
30828: PUSH
30829: EMPTY
30830: LIST
30831: LIST
30832: IN
30833: AND
30834: PUSH
30835: LD_VAR 0 12
30839: PUSH
30840: LD_INT 1
30842: ARRAY
30843: PPUSH
30844: CALL_OW 313
30848: PUSH
30849: LD_INT 6
30851: EQUAL
30852: OR
30853: IFFALSE 30873
// f := Delete ( f , 1 ) ;
30855: LD_ADDR_VAR 0 12
30859: PUSH
30860: LD_VAR 0 12
30864: PPUSH
30865: LD_INT 1
30867: PPUSH
30868: CALL_OW 3
30872: ST_TO_ADDR
// if not f then
30873: LD_VAR 0 12
30877: NOT
30878: IFFALSE 30896
// begin x := x + 2 ;
30880: LD_ADDR_VAR 0 13
30884: PUSH
30885: LD_VAR 0 13
30889: PUSH
30890: LD_INT 2
30892: PLUS
30893: ST_TO_ADDR
// continue ;
30894: GO 30694
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30896: LD_VAR 0 12
30900: PUSH
30901: LD_INT 1
30903: ARRAY
30904: PPUSH
30905: CALL_OW 266
30909: PUSH
30910: LD_INT 5
30912: EQUAL
30913: IFFALSE 30987
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30915: LD_VAR 0 12
30919: PUSH
30920: LD_INT 1
30922: ARRAY
30923: PPUSH
30924: CALL_OW 313
30928: PUSH
30929: LD_INT 3
30931: LESS
30932: IFFALSE 30968
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30934: LD_INT 0
30936: PPUSH
30937: LD_INT 5
30939: PUSH
30940: LD_INT 8
30942: PUSH
30943: LD_INT 9
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: LIST
30950: PUSH
30951: LD_VAR 0 17
30955: ARRAY
30956: PPUSH
30957: LD_VAR 0 4
30961: PPUSH
30962: CALL_OW 380
30966: GO 30985
// PrepareHuman ( false , i , skill ) ;
30968: LD_INT 0
30970: PPUSH
30971: LD_VAR 0 8
30975: PPUSH
30976: LD_VAR 0 4
30980: PPUSH
30981: CALL_OW 380
// end else
30985: GO 31004
// PrepareHuman ( false , i , skill ) ;
30987: LD_INT 0
30989: PPUSH
30990: LD_VAR 0 8
30994: PPUSH
30995: LD_VAR 0 4
30999: PPUSH
31000: CALL_OW 380
// un := CreateHuman ;
31004: LD_ADDR_VAR 0 14
31008: PUSH
31009: CALL_OW 44
31013: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31014: LD_ADDR_VAR 0 7
31018: PUSH
31019: LD_VAR 0 7
31023: PPUSH
31024: LD_INT 1
31026: PPUSH
31027: LD_VAR 0 14
31031: PPUSH
31032: CALL_OW 2
31036: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31037: LD_VAR 0 14
31041: PPUSH
31042: LD_VAR 0 12
31046: PUSH
31047: LD_INT 1
31049: ARRAY
31050: PPUSH
31051: CALL_OW 52
// end ;
31055: GO 30694
31057: POP
31058: POP
// end ;
31059: GO 29996
31061: POP
31062: POP
// result := result ^ buildings ;
31063: LD_ADDR_VAR 0 7
31067: PUSH
31068: LD_VAR 0 7
31072: PUSH
31073: LD_VAR 0 18
31077: ADD
31078: ST_TO_ADDR
// end else
31079: GO 31222
// begin for i = 1 to personel do
31081: LD_ADDR_VAR 0 8
31085: PUSH
31086: DOUBLE
31087: LD_INT 1
31089: DEC
31090: ST_TO_ADDR
31091: LD_VAR 0 6
31095: PUSH
31096: FOR_TO
31097: IFFALSE 31220
// begin if i > 4 then
31099: LD_VAR 0 8
31103: PUSH
31104: LD_INT 4
31106: GREATER
31107: IFFALSE 31111
// break ;
31109: GO 31220
// x := personel [ i ] ;
31111: LD_ADDR_VAR 0 13
31115: PUSH
31116: LD_VAR 0 6
31120: PUSH
31121: LD_VAR 0 8
31125: ARRAY
31126: ST_TO_ADDR
// if x = - 1 then
31127: LD_VAR 0 13
31131: PUSH
31132: LD_INT 1
31134: NEG
31135: EQUAL
31136: IFFALSE 31140
// continue ;
31138: GO 31096
// PrepareHuman ( false , i , skill ) ;
31140: LD_INT 0
31142: PPUSH
31143: LD_VAR 0 8
31147: PPUSH
31148: LD_VAR 0 4
31152: PPUSH
31153: CALL_OW 380
// un := CreateHuman ;
31157: LD_ADDR_VAR 0 14
31161: PUSH
31162: CALL_OW 44
31166: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31167: LD_VAR 0 14
31171: PPUSH
31172: LD_VAR 0 1
31176: PPUSH
31177: CALL_OW 250
31181: PPUSH
31182: LD_VAR 0 1
31186: PPUSH
31187: CALL_OW 251
31191: PPUSH
31192: LD_INT 10
31194: PPUSH
31195: LD_INT 0
31197: PPUSH
31198: CALL_OW 50
// result := result ^ un ;
31202: LD_ADDR_VAR 0 7
31206: PUSH
31207: LD_VAR 0 7
31211: PUSH
31212: LD_VAR 0 14
31216: ADD
31217: ST_TO_ADDR
// end ;
31218: GO 31096
31220: POP
31221: POP
// end ; end ;
31222: LD_VAR 0 7
31226: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31227: LD_INT 0
31229: PPUSH
31230: PPUSH
31231: PPUSH
31232: PPUSH
31233: PPUSH
31234: PPUSH
31235: PPUSH
31236: PPUSH
31237: PPUSH
31238: PPUSH
31239: PPUSH
31240: PPUSH
31241: PPUSH
31242: PPUSH
31243: PPUSH
31244: PPUSH
// result := false ;
31245: LD_ADDR_VAR 0 3
31249: PUSH
31250: LD_INT 0
31252: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31253: LD_VAR 0 1
31257: NOT
31258: PUSH
31259: LD_VAR 0 1
31263: PPUSH
31264: CALL_OW 266
31268: PUSH
31269: LD_INT 32
31271: PUSH
31272: LD_INT 33
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: IN
31279: NOT
31280: OR
31281: IFFALSE 31285
// exit ;
31283: GO 32394
// nat := GetNation ( tower ) ;
31285: LD_ADDR_VAR 0 12
31289: PUSH
31290: LD_VAR 0 1
31294: PPUSH
31295: CALL_OW 248
31299: ST_TO_ADDR
// side := GetSide ( tower ) ;
31300: LD_ADDR_VAR 0 16
31304: PUSH
31305: LD_VAR 0 1
31309: PPUSH
31310: CALL_OW 255
31314: ST_TO_ADDR
// x := GetX ( tower ) ;
31315: LD_ADDR_VAR 0 10
31319: PUSH
31320: LD_VAR 0 1
31324: PPUSH
31325: CALL_OW 250
31329: ST_TO_ADDR
// y := GetY ( tower ) ;
31330: LD_ADDR_VAR 0 11
31334: PUSH
31335: LD_VAR 0 1
31339: PPUSH
31340: CALL_OW 251
31344: ST_TO_ADDR
// if not x or not y then
31345: LD_VAR 0 10
31349: NOT
31350: PUSH
31351: LD_VAR 0 11
31355: NOT
31356: OR
31357: IFFALSE 31361
// exit ;
31359: GO 32394
// weapon := 0 ;
31361: LD_ADDR_VAR 0 18
31365: PUSH
31366: LD_INT 0
31368: ST_TO_ADDR
// fac_list := [ ] ;
31369: LD_ADDR_VAR 0 17
31373: PUSH
31374: EMPTY
31375: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31376: LD_ADDR_VAR 0 6
31380: PUSH
31381: LD_VAR 0 1
31385: PPUSH
31386: CALL_OW 274
31390: PPUSH
31391: LD_VAR 0 2
31395: PPUSH
31396: LD_INT 0
31398: PPUSH
31399: CALL 28965 0 3
31403: PPUSH
31404: LD_INT 30
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PPUSH
31414: CALL_OW 72
31418: ST_TO_ADDR
// if not factories then
31419: LD_VAR 0 6
31423: NOT
31424: IFFALSE 31428
// exit ;
31426: GO 32394
// for i in factories do
31428: LD_ADDR_VAR 0 8
31432: PUSH
31433: LD_VAR 0 6
31437: PUSH
31438: FOR_IN
31439: IFFALSE 31464
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31441: LD_ADDR_VAR 0 17
31445: PUSH
31446: LD_VAR 0 17
31450: PUSH
31451: LD_VAR 0 8
31455: PPUSH
31456: CALL_OW 478
31460: UNION
31461: ST_TO_ADDR
31462: GO 31438
31464: POP
31465: POP
// if not fac_list then
31466: LD_VAR 0 17
31470: NOT
31471: IFFALSE 31475
// exit ;
31473: GO 32394
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31475: LD_ADDR_VAR 0 5
31479: PUSH
31480: LD_INT 4
31482: PUSH
31483: LD_INT 5
31485: PUSH
31486: LD_INT 9
31488: PUSH
31489: LD_INT 10
31491: PUSH
31492: LD_INT 6
31494: PUSH
31495: LD_INT 7
31497: PUSH
31498: LD_INT 11
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: LIST
31505: LIST
31506: LIST
31507: LIST
31508: LIST
31509: PUSH
31510: LD_INT 27
31512: PUSH
31513: LD_INT 28
31515: PUSH
31516: LD_INT 26
31518: PUSH
31519: LD_INT 30
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 43
31530: PUSH
31531: LD_INT 44
31533: PUSH
31534: LD_INT 46
31536: PUSH
31537: LD_INT 45
31539: PUSH
31540: LD_INT 47
31542: PUSH
31543: LD_INT 49
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: LIST
31558: PUSH
31559: LD_VAR 0 12
31563: ARRAY
31564: ST_TO_ADDR
// list := list isect fac_list ;
31565: LD_ADDR_VAR 0 5
31569: PUSH
31570: LD_VAR 0 5
31574: PUSH
31575: LD_VAR 0 17
31579: ISECT
31580: ST_TO_ADDR
// if not list then
31581: LD_VAR 0 5
31585: NOT
31586: IFFALSE 31590
// exit ;
31588: GO 32394
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31590: LD_VAR 0 12
31594: PUSH
31595: LD_INT 3
31597: EQUAL
31598: PUSH
31599: LD_INT 49
31601: PUSH
31602: LD_VAR 0 5
31606: IN
31607: AND
31608: PUSH
31609: LD_INT 31
31611: PPUSH
31612: LD_VAR 0 16
31616: PPUSH
31617: CALL_OW 321
31621: PUSH
31622: LD_INT 2
31624: EQUAL
31625: AND
31626: IFFALSE 31686
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31628: LD_INT 22
31630: PUSH
31631: LD_VAR 0 16
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: LD_INT 35
31642: PUSH
31643: LD_INT 49
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 91
31652: PUSH
31653: LD_VAR 0 1
31657: PUSH
31658: LD_INT 10
31660: PUSH
31661: EMPTY
31662: LIST
31663: LIST
31664: LIST
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: PPUSH
31671: CALL_OW 69
31675: NOT
31676: IFFALSE 31686
// weapon := ru_time_lapser ;
31678: LD_ADDR_VAR 0 18
31682: PUSH
31683: LD_INT 49
31685: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31686: LD_VAR 0 12
31690: PUSH
31691: LD_INT 1
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: IN
31701: PUSH
31702: LD_INT 11
31704: PUSH
31705: LD_VAR 0 5
31709: IN
31710: PUSH
31711: LD_INT 30
31713: PUSH
31714: LD_VAR 0 5
31718: IN
31719: OR
31720: AND
31721: PUSH
31722: LD_INT 6
31724: PPUSH
31725: LD_VAR 0 16
31729: PPUSH
31730: CALL_OW 321
31734: PUSH
31735: LD_INT 2
31737: EQUAL
31738: AND
31739: IFFALSE 31904
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31741: LD_INT 22
31743: PUSH
31744: LD_VAR 0 16
31748: PUSH
31749: EMPTY
31750: LIST
31751: LIST
31752: PUSH
31753: LD_INT 2
31755: PUSH
31756: LD_INT 35
31758: PUSH
31759: LD_INT 11
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: PUSH
31766: LD_INT 35
31768: PUSH
31769: LD_INT 30
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 91
31783: PUSH
31784: LD_VAR 0 1
31788: PUSH
31789: LD_INT 18
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: PUSH
31797: EMPTY
31798: LIST
31799: LIST
31800: LIST
31801: PPUSH
31802: CALL_OW 69
31806: NOT
31807: PUSH
31808: LD_INT 22
31810: PUSH
31811: LD_VAR 0 16
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 2
31822: PUSH
31823: LD_INT 30
31825: PUSH
31826: LD_INT 32
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: PUSH
31833: LD_INT 30
31835: PUSH
31836: LD_INT 33
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 91
31850: PUSH
31851: LD_VAR 0 1
31855: PUSH
31856: LD_INT 12
31858: PUSH
31859: EMPTY
31860: LIST
31861: LIST
31862: LIST
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: LIST
31868: PUSH
31869: EMPTY
31870: LIST
31871: PPUSH
31872: CALL_OW 69
31876: PUSH
31877: LD_INT 2
31879: GREATER
31880: AND
31881: IFFALSE 31904
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31883: LD_ADDR_VAR 0 18
31887: PUSH
31888: LD_INT 11
31890: PUSH
31891: LD_INT 30
31893: PUSH
31894: EMPTY
31895: LIST
31896: LIST
31897: PUSH
31898: LD_VAR 0 12
31902: ARRAY
31903: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31904: LD_VAR 0 18
31908: NOT
31909: PUSH
31910: LD_INT 40
31912: PPUSH
31913: LD_VAR 0 16
31917: PPUSH
31918: CALL_OW 321
31922: PUSH
31923: LD_INT 2
31925: EQUAL
31926: AND
31927: PUSH
31928: LD_INT 7
31930: PUSH
31931: LD_VAR 0 5
31935: IN
31936: PUSH
31937: LD_INT 28
31939: PUSH
31940: LD_VAR 0 5
31944: IN
31945: OR
31946: PUSH
31947: LD_INT 45
31949: PUSH
31950: LD_VAR 0 5
31954: IN
31955: OR
31956: AND
31957: IFFALSE 32211
// begin hex := GetHexInfo ( x , y ) ;
31959: LD_ADDR_VAR 0 4
31963: PUSH
31964: LD_VAR 0 10
31968: PPUSH
31969: LD_VAR 0 11
31973: PPUSH
31974: CALL_OW 546
31978: ST_TO_ADDR
// if hex [ 1 ] then
31979: LD_VAR 0 4
31983: PUSH
31984: LD_INT 1
31986: ARRAY
31987: IFFALSE 31991
// exit ;
31989: GO 32394
// height := hex [ 2 ] ;
31991: LD_ADDR_VAR 0 15
31995: PUSH
31996: LD_VAR 0 4
32000: PUSH
32001: LD_INT 2
32003: ARRAY
32004: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32005: LD_ADDR_VAR 0 14
32009: PUSH
32010: LD_INT 0
32012: PUSH
32013: LD_INT 2
32015: PUSH
32016: LD_INT 3
32018: PUSH
32019: LD_INT 5
32021: PUSH
32022: EMPTY
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: ST_TO_ADDR
// for i in tmp do
32028: LD_ADDR_VAR 0 8
32032: PUSH
32033: LD_VAR 0 14
32037: PUSH
32038: FOR_IN
32039: IFFALSE 32209
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32041: LD_ADDR_VAR 0 9
32045: PUSH
32046: LD_VAR 0 10
32050: PPUSH
32051: LD_VAR 0 8
32055: PPUSH
32056: LD_INT 5
32058: PPUSH
32059: CALL_OW 272
32063: PUSH
32064: LD_VAR 0 11
32068: PPUSH
32069: LD_VAR 0 8
32073: PPUSH
32074: LD_INT 5
32076: PPUSH
32077: CALL_OW 273
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32086: LD_VAR 0 9
32090: PUSH
32091: LD_INT 1
32093: ARRAY
32094: PPUSH
32095: LD_VAR 0 9
32099: PUSH
32100: LD_INT 2
32102: ARRAY
32103: PPUSH
32104: CALL_OW 488
32108: IFFALSE 32207
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32110: LD_ADDR_VAR 0 4
32114: PUSH
32115: LD_VAR 0 9
32119: PUSH
32120: LD_INT 1
32122: ARRAY
32123: PPUSH
32124: LD_VAR 0 9
32128: PUSH
32129: LD_INT 2
32131: ARRAY
32132: PPUSH
32133: CALL_OW 546
32137: ST_TO_ADDR
// if hex [ 1 ] then
32138: LD_VAR 0 4
32142: PUSH
32143: LD_INT 1
32145: ARRAY
32146: IFFALSE 32150
// continue ;
32148: GO 32038
// h := hex [ 2 ] ;
32150: LD_ADDR_VAR 0 13
32154: PUSH
32155: LD_VAR 0 4
32159: PUSH
32160: LD_INT 2
32162: ARRAY
32163: ST_TO_ADDR
// if h + 7 < height then
32164: LD_VAR 0 13
32168: PUSH
32169: LD_INT 7
32171: PLUS
32172: PUSH
32173: LD_VAR 0 15
32177: LESS
32178: IFFALSE 32207
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32180: LD_ADDR_VAR 0 18
32184: PUSH
32185: LD_INT 7
32187: PUSH
32188: LD_INT 28
32190: PUSH
32191: LD_INT 45
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: LIST
32198: PUSH
32199: LD_VAR 0 12
32203: ARRAY
32204: ST_TO_ADDR
// break ;
32205: GO 32209
// end ; end ; end ;
32207: GO 32038
32209: POP
32210: POP
// end ; if not weapon then
32211: LD_VAR 0 18
32215: NOT
32216: IFFALSE 32276
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32218: LD_ADDR_VAR 0 5
32222: PUSH
32223: LD_VAR 0 5
32227: PUSH
32228: LD_INT 11
32230: PUSH
32231: LD_INT 30
32233: PUSH
32234: LD_INT 49
32236: PUSH
32237: EMPTY
32238: LIST
32239: LIST
32240: LIST
32241: DIFF
32242: ST_TO_ADDR
// if not list then
32243: LD_VAR 0 5
32247: NOT
32248: IFFALSE 32252
// exit ;
32250: GO 32394
// weapon := list [ rand ( 1 , list ) ] ;
32252: LD_ADDR_VAR 0 18
32256: PUSH
32257: LD_VAR 0 5
32261: PUSH
32262: LD_INT 1
32264: PPUSH
32265: LD_VAR 0 5
32269: PPUSH
32270: CALL_OW 12
32274: ARRAY
32275: ST_TO_ADDR
// end ; if weapon then
32276: LD_VAR 0 18
32280: IFFALSE 32394
// begin tmp := CostOfWeapon ( weapon ) ;
32282: LD_ADDR_VAR 0 14
32286: PUSH
32287: LD_VAR 0 18
32291: PPUSH
32292: CALL_OW 451
32296: ST_TO_ADDR
// j := GetBase ( tower ) ;
32297: LD_ADDR_VAR 0 9
32301: PUSH
32302: LD_VAR 0 1
32306: PPUSH
32307: CALL_OW 274
32311: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32312: LD_VAR 0 9
32316: PPUSH
32317: LD_INT 1
32319: PPUSH
32320: CALL_OW 275
32324: PUSH
32325: LD_VAR 0 14
32329: PUSH
32330: LD_INT 1
32332: ARRAY
32333: GREATEREQUAL
32334: PUSH
32335: LD_VAR 0 9
32339: PPUSH
32340: LD_INT 2
32342: PPUSH
32343: CALL_OW 275
32347: PUSH
32348: LD_VAR 0 14
32352: PUSH
32353: LD_INT 2
32355: ARRAY
32356: GREATEREQUAL
32357: AND
32358: PUSH
32359: LD_VAR 0 9
32363: PPUSH
32364: LD_INT 3
32366: PPUSH
32367: CALL_OW 275
32371: PUSH
32372: LD_VAR 0 14
32376: PUSH
32377: LD_INT 3
32379: ARRAY
32380: GREATEREQUAL
32381: AND
32382: IFFALSE 32394
// result := weapon ;
32384: LD_ADDR_VAR 0 3
32388: PUSH
32389: LD_VAR 0 18
32393: ST_TO_ADDR
// end ; end ;
32394: LD_VAR 0 3
32398: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32399: LD_INT 0
32401: PPUSH
32402: PPUSH
// result := true ;
32403: LD_ADDR_VAR 0 3
32407: PUSH
32408: LD_INT 1
32410: ST_TO_ADDR
// if array1 = array2 then
32411: LD_VAR 0 1
32415: PUSH
32416: LD_VAR 0 2
32420: EQUAL
32421: IFFALSE 32481
// begin for i = 1 to array1 do
32423: LD_ADDR_VAR 0 4
32427: PUSH
32428: DOUBLE
32429: LD_INT 1
32431: DEC
32432: ST_TO_ADDR
32433: LD_VAR 0 1
32437: PUSH
32438: FOR_TO
32439: IFFALSE 32477
// if array1 [ i ] <> array2 [ i ] then
32441: LD_VAR 0 1
32445: PUSH
32446: LD_VAR 0 4
32450: ARRAY
32451: PUSH
32452: LD_VAR 0 2
32456: PUSH
32457: LD_VAR 0 4
32461: ARRAY
32462: NONEQUAL
32463: IFFALSE 32475
// begin result := false ;
32465: LD_ADDR_VAR 0 3
32469: PUSH
32470: LD_INT 0
32472: ST_TO_ADDR
// break ;
32473: GO 32477
// end ;
32475: GO 32438
32477: POP
32478: POP
// end else
32479: GO 32489
// result := false ;
32481: LD_ADDR_VAR 0 3
32485: PUSH
32486: LD_INT 0
32488: ST_TO_ADDR
// end ;
32489: LD_VAR 0 3
32493: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32494: LD_INT 0
32496: PPUSH
32497: PPUSH
// if not array1 or not array2 then
32498: LD_VAR 0 1
32502: NOT
32503: PUSH
32504: LD_VAR 0 2
32508: NOT
32509: OR
32510: IFFALSE 32514
// exit ;
32512: GO 32578
// result := true ;
32514: LD_ADDR_VAR 0 3
32518: PUSH
32519: LD_INT 1
32521: ST_TO_ADDR
// for i = 1 to array1 do
32522: LD_ADDR_VAR 0 4
32526: PUSH
32527: DOUBLE
32528: LD_INT 1
32530: DEC
32531: ST_TO_ADDR
32532: LD_VAR 0 1
32536: PUSH
32537: FOR_TO
32538: IFFALSE 32576
// if array1 [ i ] <> array2 [ i ] then
32540: LD_VAR 0 1
32544: PUSH
32545: LD_VAR 0 4
32549: ARRAY
32550: PUSH
32551: LD_VAR 0 2
32555: PUSH
32556: LD_VAR 0 4
32560: ARRAY
32561: NONEQUAL
32562: IFFALSE 32574
// begin result := false ;
32564: LD_ADDR_VAR 0 3
32568: PUSH
32569: LD_INT 0
32571: ST_TO_ADDR
// break ;
32572: GO 32576
// end ;
32574: GO 32537
32576: POP
32577: POP
// end ;
32578: LD_VAR 0 3
32582: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32583: LD_INT 0
32585: PPUSH
32586: PPUSH
32587: PPUSH
// pom := GetBase ( fac ) ;
32588: LD_ADDR_VAR 0 5
32592: PUSH
32593: LD_VAR 0 1
32597: PPUSH
32598: CALL_OW 274
32602: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32603: LD_ADDR_VAR 0 4
32607: PUSH
32608: LD_VAR 0 2
32612: PUSH
32613: LD_INT 1
32615: ARRAY
32616: PPUSH
32617: LD_VAR 0 2
32621: PUSH
32622: LD_INT 2
32624: ARRAY
32625: PPUSH
32626: LD_VAR 0 2
32630: PUSH
32631: LD_INT 3
32633: ARRAY
32634: PPUSH
32635: LD_VAR 0 2
32639: PUSH
32640: LD_INT 4
32642: ARRAY
32643: PPUSH
32644: CALL_OW 449
32648: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32649: LD_ADDR_VAR 0 3
32653: PUSH
32654: LD_VAR 0 5
32658: PPUSH
32659: LD_INT 1
32661: PPUSH
32662: CALL_OW 275
32666: PUSH
32667: LD_VAR 0 4
32671: PUSH
32672: LD_INT 1
32674: ARRAY
32675: GREATEREQUAL
32676: PUSH
32677: LD_VAR 0 5
32681: PPUSH
32682: LD_INT 2
32684: PPUSH
32685: CALL_OW 275
32689: PUSH
32690: LD_VAR 0 4
32694: PUSH
32695: LD_INT 2
32697: ARRAY
32698: GREATEREQUAL
32699: AND
32700: PUSH
32701: LD_VAR 0 5
32705: PPUSH
32706: LD_INT 3
32708: PPUSH
32709: CALL_OW 275
32713: PUSH
32714: LD_VAR 0 4
32718: PUSH
32719: LD_INT 3
32721: ARRAY
32722: GREATEREQUAL
32723: AND
32724: ST_TO_ADDR
// end ;
32725: LD_VAR 0 3
32729: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32730: LD_INT 0
32732: PPUSH
32733: PPUSH
32734: PPUSH
32735: PPUSH
// pom := GetBase ( building ) ;
32736: LD_ADDR_VAR 0 3
32740: PUSH
32741: LD_VAR 0 1
32745: PPUSH
32746: CALL_OW 274
32750: ST_TO_ADDR
// if not pom then
32751: LD_VAR 0 3
32755: NOT
32756: IFFALSE 32760
// exit ;
32758: GO 32930
// btype := GetBType ( building ) ;
32760: LD_ADDR_VAR 0 5
32764: PUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL_OW 266
32774: ST_TO_ADDR
// if btype = b_armoury then
32775: LD_VAR 0 5
32779: PUSH
32780: LD_INT 4
32782: EQUAL
32783: IFFALSE 32793
// btype := b_barracks ;
32785: LD_ADDR_VAR 0 5
32789: PUSH
32790: LD_INT 5
32792: ST_TO_ADDR
// if btype = b_depot then
32793: LD_VAR 0 5
32797: PUSH
32798: LD_INT 0
32800: EQUAL
32801: IFFALSE 32811
// btype := b_warehouse ;
32803: LD_ADDR_VAR 0 5
32807: PUSH
32808: LD_INT 1
32810: ST_TO_ADDR
// if btype = b_workshop then
32811: LD_VAR 0 5
32815: PUSH
32816: LD_INT 2
32818: EQUAL
32819: IFFALSE 32829
// btype := b_factory ;
32821: LD_ADDR_VAR 0 5
32825: PUSH
32826: LD_INT 3
32828: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32829: LD_ADDR_VAR 0 4
32833: PUSH
32834: LD_VAR 0 5
32838: PPUSH
32839: LD_VAR 0 1
32843: PPUSH
32844: CALL_OW 248
32848: PPUSH
32849: CALL_OW 450
32853: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32854: LD_ADDR_VAR 0 2
32858: PUSH
32859: LD_VAR 0 3
32863: PPUSH
32864: LD_INT 1
32866: PPUSH
32867: CALL_OW 275
32871: PUSH
32872: LD_VAR 0 4
32876: PUSH
32877: LD_INT 1
32879: ARRAY
32880: GREATEREQUAL
32881: PUSH
32882: LD_VAR 0 3
32886: PPUSH
32887: LD_INT 2
32889: PPUSH
32890: CALL_OW 275
32894: PUSH
32895: LD_VAR 0 4
32899: PUSH
32900: LD_INT 2
32902: ARRAY
32903: GREATEREQUAL
32904: AND
32905: PUSH
32906: LD_VAR 0 3
32910: PPUSH
32911: LD_INT 3
32913: PPUSH
32914: CALL_OW 275
32918: PUSH
32919: LD_VAR 0 4
32923: PUSH
32924: LD_INT 3
32926: ARRAY
32927: GREATEREQUAL
32928: AND
32929: ST_TO_ADDR
// end ;
32930: LD_VAR 0 2
32934: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32935: LD_INT 0
32937: PPUSH
32938: PPUSH
32939: PPUSH
// pom := GetBase ( building ) ;
32940: LD_ADDR_VAR 0 4
32944: PUSH
32945: LD_VAR 0 1
32949: PPUSH
32950: CALL_OW 274
32954: ST_TO_ADDR
// if not pom then
32955: LD_VAR 0 4
32959: NOT
32960: IFFALSE 32964
// exit ;
32962: GO 33065
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32964: LD_ADDR_VAR 0 5
32968: PUSH
32969: LD_VAR 0 2
32973: PPUSH
32974: LD_VAR 0 1
32978: PPUSH
32979: CALL_OW 248
32983: PPUSH
32984: CALL_OW 450
32988: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32989: LD_ADDR_VAR 0 3
32993: PUSH
32994: LD_VAR 0 4
32998: PPUSH
32999: LD_INT 1
33001: PPUSH
33002: CALL_OW 275
33006: PUSH
33007: LD_VAR 0 5
33011: PUSH
33012: LD_INT 1
33014: ARRAY
33015: GREATEREQUAL
33016: PUSH
33017: LD_VAR 0 4
33021: PPUSH
33022: LD_INT 2
33024: PPUSH
33025: CALL_OW 275
33029: PUSH
33030: LD_VAR 0 5
33034: PUSH
33035: LD_INT 2
33037: ARRAY
33038: GREATEREQUAL
33039: AND
33040: PUSH
33041: LD_VAR 0 4
33045: PPUSH
33046: LD_INT 3
33048: PPUSH
33049: CALL_OW 275
33053: PUSH
33054: LD_VAR 0 5
33058: PUSH
33059: LD_INT 3
33061: ARRAY
33062: GREATEREQUAL
33063: AND
33064: ST_TO_ADDR
// end ;
33065: LD_VAR 0 3
33069: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33070: LD_INT 0
33072: PPUSH
33073: PPUSH
33074: PPUSH
33075: PPUSH
33076: PPUSH
33077: PPUSH
33078: PPUSH
33079: PPUSH
33080: PPUSH
33081: PPUSH
33082: PPUSH
// result := false ;
33083: LD_ADDR_VAR 0 8
33087: PUSH
33088: LD_INT 0
33090: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33091: LD_VAR 0 5
33095: NOT
33096: PUSH
33097: LD_VAR 0 1
33101: NOT
33102: OR
33103: PUSH
33104: LD_VAR 0 2
33108: NOT
33109: OR
33110: PUSH
33111: LD_VAR 0 3
33115: NOT
33116: OR
33117: IFFALSE 33121
// exit ;
33119: GO 33935
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33121: LD_ADDR_VAR 0 14
33125: PUSH
33126: LD_VAR 0 1
33130: PPUSH
33131: LD_VAR 0 2
33135: PPUSH
33136: LD_VAR 0 3
33140: PPUSH
33141: LD_VAR 0 4
33145: PPUSH
33146: LD_VAR 0 5
33150: PUSH
33151: LD_INT 1
33153: ARRAY
33154: PPUSH
33155: CALL_OW 248
33159: PPUSH
33160: LD_INT 0
33162: PPUSH
33163: CALL 35188 0 6
33167: ST_TO_ADDR
// if not hexes then
33168: LD_VAR 0 14
33172: NOT
33173: IFFALSE 33177
// exit ;
33175: GO 33935
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33177: LD_ADDR_VAR 0 17
33181: PUSH
33182: LD_VAR 0 5
33186: PPUSH
33187: LD_INT 22
33189: PUSH
33190: LD_VAR 0 13
33194: PPUSH
33195: CALL_OW 255
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 2
33206: PUSH
33207: LD_INT 30
33209: PUSH
33210: LD_INT 0
33212: PUSH
33213: EMPTY
33214: LIST
33215: LIST
33216: PUSH
33217: LD_INT 30
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: LIST
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PPUSH
33236: CALL_OW 72
33240: ST_TO_ADDR
// for i = 1 to hexes do
33241: LD_ADDR_VAR 0 9
33245: PUSH
33246: DOUBLE
33247: LD_INT 1
33249: DEC
33250: ST_TO_ADDR
33251: LD_VAR 0 14
33255: PUSH
33256: FOR_TO
33257: IFFALSE 33933
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33259: LD_ADDR_VAR 0 13
33263: PUSH
33264: LD_VAR 0 14
33268: PUSH
33269: LD_VAR 0 9
33273: ARRAY
33274: PUSH
33275: LD_INT 1
33277: ARRAY
33278: PPUSH
33279: LD_VAR 0 14
33283: PUSH
33284: LD_VAR 0 9
33288: ARRAY
33289: PUSH
33290: LD_INT 2
33292: ARRAY
33293: PPUSH
33294: CALL_OW 428
33298: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33299: LD_VAR 0 14
33303: PUSH
33304: LD_VAR 0 9
33308: ARRAY
33309: PUSH
33310: LD_INT 1
33312: ARRAY
33313: PPUSH
33314: LD_VAR 0 14
33318: PUSH
33319: LD_VAR 0 9
33323: ARRAY
33324: PUSH
33325: LD_INT 2
33327: ARRAY
33328: PPUSH
33329: CALL_OW 351
33333: PUSH
33334: LD_VAR 0 14
33338: PUSH
33339: LD_VAR 0 9
33343: ARRAY
33344: PUSH
33345: LD_INT 1
33347: ARRAY
33348: PPUSH
33349: LD_VAR 0 14
33353: PUSH
33354: LD_VAR 0 9
33358: ARRAY
33359: PUSH
33360: LD_INT 2
33362: ARRAY
33363: PPUSH
33364: CALL_OW 488
33368: NOT
33369: OR
33370: PUSH
33371: LD_VAR 0 13
33375: PPUSH
33376: CALL_OW 247
33380: PUSH
33381: LD_INT 3
33383: EQUAL
33384: OR
33385: IFFALSE 33391
// exit ;
33387: POP
33388: POP
33389: GO 33935
// if not tmp then
33391: LD_VAR 0 13
33395: NOT
33396: IFFALSE 33400
// continue ;
33398: GO 33256
// result := true ;
33400: LD_ADDR_VAR 0 8
33404: PUSH
33405: LD_INT 1
33407: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33408: LD_VAR 0 6
33412: PUSH
33413: LD_VAR 0 13
33417: PPUSH
33418: CALL_OW 247
33422: PUSH
33423: LD_INT 2
33425: EQUAL
33426: AND
33427: PUSH
33428: LD_VAR 0 13
33432: PPUSH
33433: CALL_OW 263
33437: PUSH
33438: LD_INT 1
33440: EQUAL
33441: AND
33442: IFFALSE 33606
// begin if IsDrivenBy ( tmp ) then
33444: LD_VAR 0 13
33448: PPUSH
33449: CALL_OW 311
33453: IFFALSE 33457
// continue ;
33455: GO 33256
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33457: LD_VAR 0 6
33461: PPUSH
33462: LD_INT 3
33464: PUSH
33465: LD_INT 60
33467: PUSH
33468: EMPTY
33469: LIST
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: PUSH
33475: LD_INT 3
33477: PUSH
33478: LD_INT 55
33480: PUSH
33481: EMPTY
33482: LIST
33483: PUSH
33484: EMPTY
33485: LIST
33486: LIST
33487: PUSH
33488: EMPTY
33489: LIST
33490: LIST
33491: PPUSH
33492: CALL_OW 72
33496: IFFALSE 33604
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33498: LD_ADDR_VAR 0 18
33502: PUSH
33503: LD_VAR 0 6
33507: PPUSH
33508: LD_INT 3
33510: PUSH
33511: LD_INT 60
33513: PUSH
33514: EMPTY
33515: LIST
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: PUSH
33521: LD_INT 3
33523: PUSH
33524: LD_INT 55
33526: PUSH
33527: EMPTY
33528: LIST
33529: PUSH
33530: EMPTY
33531: LIST
33532: LIST
33533: PUSH
33534: EMPTY
33535: LIST
33536: LIST
33537: PPUSH
33538: CALL_OW 72
33542: PUSH
33543: LD_INT 1
33545: ARRAY
33546: ST_TO_ADDR
// if IsInUnit ( driver ) then
33547: LD_VAR 0 18
33551: PPUSH
33552: CALL_OW 310
33556: IFFALSE 33567
// ComExit ( driver ) ;
33558: LD_VAR 0 18
33562: PPUSH
33563: CALL 58967 0 1
// AddComEnterUnit ( driver , tmp ) ;
33567: LD_VAR 0 18
33571: PPUSH
33572: LD_VAR 0 13
33576: PPUSH
33577: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33581: LD_VAR 0 18
33585: PPUSH
33586: LD_VAR 0 7
33590: PPUSH
33591: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33595: LD_VAR 0 18
33599: PPUSH
33600: CALL_OW 181
// end ; continue ;
33604: GO 33256
// end ; if not cleaners or not tmp in cleaners then
33606: LD_VAR 0 6
33610: NOT
33611: PUSH
33612: LD_VAR 0 13
33616: PUSH
33617: LD_VAR 0 6
33621: IN
33622: NOT
33623: OR
33624: IFFALSE 33931
// begin if dep then
33626: LD_VAR 0 17
33630: IFFALSE 33766
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33632: LD_ADDR_VAR 0 16
33636: PUSH
33637: LD_VAR 0 17
33641: PUSH
33642: LD_INT 1
33644: ARRAY
33645: PPUSH
33646: CALL_OW 250
33650: PPUSH
33651: LD_VAR 0 17
33655: PUSH
33656: LD_INT 1
33658: ARRAY
33659: PPUSH
33660: CALL_OW 254
33664: PPUSH
33665: LD_INT 5
33667: PPUSH
33668: CALL_OW 272
33672: PUSH
33673: LD_VAR 0 17
33677: PUSH
33678: LD_INT 1
33680: ARRAY
33681: PPUSH
33682: CALL_OW 251
33686: PPUSH
33687: LD_VAR 0 17
33691: PUSH
33692: LD_INT 1
33694: ARRAY
33695: PPUSH
33696: CALL_OW 254
33700: PPUSH
33701: LD_INT 5
33703: PPUSH
33704: CALL_OW 273
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33713: LD_VAR 0 16
33717: PUSH
33718: LD_INT 1
33720: ARRAY
33721: PPUSH
33722: LD_VAR 0 16
33726: PUSH
33727: LD_INT 2
33729: ARRAY
33730: PPUSH
33731: CALL_OW 488
33735: IFFALSE 33766
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33737: LD_VAR 0 13
33741: PPUSH
33742: LD_VAR 0 16
33746: PUSH
33747: LD_INT 1
33749: ARRAY
33750: PPUSH
33751: LD_VAR 0 16
33755: PUSH
33756: LD_INT 2
33758: ARRAY
33759: PPUSH
33760: CALL_OW 111
// continue ;
33764: GO 33256
// end ; end ; r := GetDir ( tmp ) ;
33766: LD_ADDR_VAR 0 15
33770: PUSH
33771: LD_VAR 0 13
33775: PPUSH
33776: CALL_OW 254
33780: ST_TO_ADDR
// if r = 5 then
33781: LD_VAR 0 15
33785: PUSH
33786: LD_INT 5
33788: EQUAL
33789: IFFALSE 33799
// r := 0 ;
33791: LD_ADDR_VAR 0 15
33795: PUSH
33796: LD_INT 0
33798: ST_TO_ADDR
// for j = r to 5 do
33799: LD_ADDR_VAR 0 10
33803: PUSH
33804: DOUBLE
33805: LD_VAR 0 15
33809: DEC
33810: ST_TO_ADDR
33811: LD_INT 5
33813: PUSH
33814: FOR_TO
33815: IFFALSE 33929
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33817: LD_ADDR_VAR 0 11
33821: PUSH
33822: LD_VAR 0 13
33826: PPUSH
33827: CALL_OW 250
33831: PPUSH
33832: LD_VAR 0 10
33836: PPUSH
33837: LD_INT 2
33839: PPUSH
33840: CALL_OW 272
33844: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33845: LD_ADDR_VAR 0 12
33849: PUSH
33850: LD_VAR 0 13
33854: PPUSH
33855: CALL_OW 251
33859: PPUSH
33860: LD_VAR 0 10
33864: PPUSH
33865: LD_INT 2
33867: PPUSH
33868: CALL_OW 273
33872: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33873: LD_VAR 0 11
33877: PPUSH
33878: LD_VAR 0 12
33882: PPUSH
33883: CALL_OW 488
33887: PUSH
33888: LD_VAR 0 11
33892: PPUSH
33893: LD_VAR 0 12
33897: PPUSH
33898: CALL_OW 428
33902: NOT
33903: AND
33904: IFFALSE 33927
// begin ComMoveXY ( tmp , _x , _y ) ;
33906: LD_VAR 0 13
33910: PPUSH
33911: LD_VAR 0 11
33915: PPUSH
33916: LD_VAR 0 12
33920: PPUSH
33921: CALL_OW 111
// break ;
33925: GO 33929
// end ; end ;
33927: GO 33814
33929: POP
33930: POP
// end ; end ;
33931: GO 33256
33933: POP
33934: POP
// end ;
33935: LD_VAR 0 8
33939: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33940: LD_INT 0
33942: PPUSH
// result := true ;
33943: LD_ADDR_VAR 0 3
33947: PUSH
33948: LD_INT 1
33950: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33951: LD_VAR 0 2
33955: PUSH
33956: LD_INT 24
33958: DOUBLE
33959: EQUAL
33960: IFTRUE 33970
33962: LD_INT 33
33964: DOUBLE
33965: EQUAL
33966: IFTRUE 33970
33968: GO 33995
33970: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33971: LD_ADDR_VAR 0 3
33975: PUSH
33976: LD_INT 32
33978: PPUSH
33979: LD_VAR 0 1
33983: PPUSH
33984: CALL_OW 321
33988: PUSH
33989: LD_INT 2
33991: EQUAL
33992: ST_TO_ADDR
33993: GO 34311
33995: LD_INT 20
33997: DOUBLE
33998: EQUAL
33999: IFTRUE 34003
34001: GO 34028
34003: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34004: LD_ADDR_VAR 0 3
34008: PUSH
34009: LD_INT 6
34011: PPUSH
34012: LD_VAR 0 1
34016: PPUSH
34017: CALL_OW 321
34021: PUSH
34022: LD_INT 2
34024: EQUAL
34025: ST_TO_ADDR
34026: GO 34311
34028: LD_INT 22
34030: DOUBLE
34031: EQUAL
34032: IFTRUE 34042
34034: LD_INT 36
34036: DOUBLE
34037: EQUAL
34038: IFTRUE 34042
34040: GO 34067
34042: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34043: LD_ADDR_VAR 0 3
34047: PUSH
34048: LD_INT 15
34050: PPUSH
34051: LD_VAR 0 1
34055: PPUSH
34056: CALL_OW 321
34060: PUSH
34061: LD_INT 2
34063: EQUAL
34064: ST_TO_ADDR
34065: GO 34311
34067: LD_INT 30
34069: DOUBLE
34070: EQUAL
34071: IFTRUE 34075
34073: GO 34100
34075: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34076: LD_ADDR_VAR 0 3
34080: PUSH
34081: LD_INT 20
34083: PPUSH
34084: LD_VAR 0 1
34088: PPUSH
34089: CALL_OW 321
34093: PUSH
34094: LD_INT 2
34096: EQUAL
34097: ST_TO_ADDR
34098: GO 34311
34100: LD_INT 28
34102: DOUBLE
34103: EQUAL
34104: IFTRUE 34114
34106: LD_INT 21
34108: DOUBLE
34109: EQUAL
34110: IFTRUE 34114
34112: GO 34139
34114: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34115: LD_ADDR_VAR 0 3
34119: PUSH
34120: LD_INT 21
34122: PPUSH
34123: LD_VAR 0 1
34127: PPUSH
34128: CALL_OW 321
34132: PUSH
34133: LD_INT 2
34135: EQUAL
34136: ST_TO_ADDR
34137: GO 34311
34139: LD_INT 16
34141: DOUBLE
34142: EQUAL
34143: IFTRUE 34147
34145: GO 34172
34147: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34148: LD_ADDR_VAR 0 3
34152: PUSH
34153: LD_INT 84
34155: PPUSH
34156: LD_VAR 0 1
34160: PPUSH
34161: CALL_OW 321
34165: PUSH
34166: LD_INT 2
34168: EQUAL
34169: ST_TO_ADDR
34170: GO 34311
34172: LD_INT 19
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34186
34178: LD_INT 23
34180: DOUBLE
34181: EQUAL
34182: IFTRUE 34186
34184: GO 34211
34186: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34187: LD_ADDR_VAR 0 3
34191: PUSH
34192: LD_INT 83
34194: PPUSH
34195: LD_VAR 0 1
34199: PPUSH
34200: CALL_OW 321
34204: PUSH
34205: LD_INT 2
34207: EQUAL
34208: ST_TO_ADDR
34209: GO 34311
34211: LD_INT 17
34213: DOUBLE
34214: EQUAL
34215: IFTRUE 34219
34217: GO 34244
34219: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34220: LD_ADDR_VAR 0 3
34224: PUSH
34225: LD_INT 39
34227: PPUSH
34228: LD_VAR 0 1
34232: PPUSH
34233: CALL_OW 321
34237: PUSH
34238: LD_INT 2
34240: EQUAL
34241: ST_TO_ADDR
34242: GO 34311
34244: LD_INT 18
34246: DOUBLE
34247: EQUAL
34248: IFTRUE 34252
34250: GO 34277
34252: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34253: LD_ADDR_VAR 0 3
34257: PUSH
34258: LD_INT 40
34260: PPUSH
34261: LD_VAR 0 1
34265: PPUSH
34266: CALL_OW 321
34270: PUSH
34271: LD_INT 2
34273: EQUAL
34274: ST_TO_ADDR
34275: GO 34311
34277: LD_INT 27
34279: DOUBLE
34280: EQUAL
34281: IFTRUE 34285
34283: GO 34310
34285: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34286: LD_ADDR_VAR 0 3
34290: PUSH
34291: LD_INT 35
34293: PPUSH
34294: LD_VAR 0 1
34298: PPUSH
34299: CALL_OW 321
34303: PUSH
34304: LD_INT 2
34306: EQUAL
34307: ST_TO_ADDR
34308: GO 34311
34310: POP
// end ;
34311: LD_VAR 0 3
34315: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34316: LD_INT 0
34318: PPUSH
34319: PPUSH
34320: PPUSH
34321: PPUSH
34322: PPUSH
34323: PPUSH
34324: PPUSH
34325: PPUSH
34326: PPUSH
34327: PPUSH
34328: PPUSH
// result := false ;
34329: LD_ADDR_VAR 0 6
34333: PUSH
34334: LD_INT 0
34336: ST_TO_ADDR
// if btype = b_depot then
34337: LD_VAR 0 2
34341: PUSH
34342: LD_INT 0
34344: EQUAL
34345: IFFALSE 34357
// begin result := true ;
34347: LD_ADDR_VAR 0 6
34351: PUSH
34352: LD_INT 1
34354: ST_TO_ADDR
// exit ;
34355: GO 35183
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34357: LD_VAR 0 1
34361: NOT
34362: PUSH
34363: LD_VAR 0 1
34367: PPUSH
34368: CALL_OW 266
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: LD_INT 1
34378: PUSH
34379: EMPTY
34380: LIST
34381: LIST
34382: IN
34383: NOT
34384: OR
34385: PUSH
34386: LD_VAR 0 2
34390: NOT
34391: OR
34392: PUSH
34393: LD_VAR 0 5
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: LD_INT 3
34409: PUSH
34410: LD_INT 4
34412: PUSH
34413: LD_INT 5
34415: PUSH
34416: EMPTY
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: IN
34424: NOT
34425: OR
34426: PUSH
34427: LD_VAR 0 3
34431: PPUSH
34432: LD_VAR 0 4
34436: PPUSH
34437: CALL_OW 488
34441: NOT
34442: OR
34443: IFFALSE 34447
// exit ;
34445: GO 35183
// side := GetSide ( depot ) ;
34447: LD_ADDR_VAR 0 9
34451: PUSH
34452: LD_VAR 0 1
34456: PPUSH
34457: CALL_OW 255
34461: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34462: LD_VAR 0 9
34466: PPUSH
34467: LD_VAR 0 2
34471: PPUSH
34472: CALL 33940 0 2
34476: NOT
34477: IFFALSE 34481
// exit ;
34479: GO 35183
// pom := GetBase ( depot ) ;
34481: LD_ADDR_VAR 0 10
34485: PUSH
34486: LD_VAR 0 1
34490: PPUSH
34491: CALL_OW 274
34495: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34496: LD_ADDR_VAR 0 11
34500: PUSH
34501: LD_VAR 0 2
34505: PPUSH
34506: LD_VAR 0 1
34510: PPUSH
34511: CALL_OW 248
34515: PPUSH
34516: CALL_OW 450
34520: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34521: LD_VAR 0 10
34525: PPUSH
34526: LD_INT 1
34528: PPUSH
34529: CALL_OW 275
34533: PUSH
34534: LD_VAR 0 11
34538: PUSH
34539: LD_INT 1
34541: ARRAY
34542: GREATEREQUAL
34543: PUSH
34544: LD_VAR 0 10
34548: PPUSH
34549: LD_INT 2
34551: PPUSH
34552: CALL_OW 275
34556: PUSH
34557: LD_VAR 0 11
34561: PUSH
34562: LD_INT 2
34564: ARRAY
34565: GREATEREQUAL
34566: AND
34567: PUSH
34568: LD_VAR 0 10
34572: PPUSH
34573: LD_INT 3
34575: PPUSH
34576: CALL_OW 275
34580: PUSH
34581: LD_VAR 0 11
34585: PUSH
34586: LD_INT 3
34588: ARRAY
34589: GREATEREQUAL
34590: AND
34591: NOT
34592: IFFALSE 34596
// exit ;
34594: GO 35183
// if GetBType ( depot ) = b_depot then
34596: LD_VAR 0 1
34600: PPUSH
34601: CALL_OW 266
34605: PUSH
34606: LD_INT 0
34608: EQUAL
34609: IFFALSE 34621
// dist := 28 else
34611: LD_ADDR_VAR 0 14
34615: PUSH
34616: LD_INT 28
34618: ST_TO_ADDR
34619: GO 34629
// dist := 36 ;
34621: LD_ADDR_VAR 0 14
34625: PUSH
34626: LD_INT 36
34628: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34629: LD_VAR 0 1
34633: PPUSH
34634: LD_VAR 0 3
34638: PPUSH
34639: LD_VAR 0 4
34643: PPUSH
34644: CALL_OW 297
34648: PUSH
34649: LD_VAR 0 14
34653: GREATER
34654: IFFALSE 34658
// exit ;
34656: GO 35183
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34658: LD_ADDR_VAR 0 12
34662: PUSH
34663: LD_VAR 0 2
34667: PPUSH
34668: LD_VAR 0 3
34672: PPUSH
34673: LD_VAR 0 4
34677: PPUSH
34678: LD_VAR 0 5
34682: PPUSH
34683: LD_VAR 0 1
34687: PPUSH
34688: CALL_OW 248
34692: PPUSH
34693: LD_INT 0
34695: PPUSH
34696: CALL 35188 0 6
34700: ST_TO_ADDR
// if not hexes then
34701: LD_VAR 0 12
34705: NOT
34706: IFFALSE 34710
// exit ;
34708: GO 35183
// hex := GetHexInfo ( x , y ) ;
34710: LD_ADDR_VAR 0 15
34714: PUSH
34715: LD_VAR 0 3
34719: PPUSH
34720: LD_VAR 0 4
34724: PPUSH
34725: CALL_OW 546
34729: ST_TO_ADDR
// if hex [ 1 ] then
34730: LD_VAR 0 15
34734: PUSH
34735: LD_INT 1
34737: ARRAY
34738: IFFALSE 34742
// exit ;
34740: GO 35183
// height := hex [ 2 ] ;
34742: LD_ADDR_VAR 0 13
34746: PUSH
34747: LD_VAR 0 15
34751: PUSH
34752: LD_INT 2
34754: ARRAY
34755: ST_TO_ADDR
// for i = 1 to hexes do
34756: LD_ADDR_VAR 0 7
34760: PUSH
34761: DOUBLE
34762: LD_INT 1
34764: DEC
34765: ST_TO_ADDR
34766: LD_VAR 0 12
34770: PUSH
34771: FOR_TO
34772: IFFALSE 35102
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34774: LD_VAR 0 12
34778: PUSH
34779: LD_VAR 0 7
34783: ARRAY
34784: PUSH
34785: LD_INT 1
34787: ARRAY
34788: PPUSH
34789: LD_VAR 0 12
34793: PUSH
34794: LD_VAR 0 7
34798: ARRAY
34799: PUSH
34800: LD_INT 2
34802: ARRAY
34803: PPUSH
34804: CALL_OW 488
34808: NOT
34809: PUSH
34810: LD_VAR 0 12
34814: PUSH
34815: LD_VAR 0 7
34819: ARRAY
34820: PUSH
34821: LD_INT 1
34823: ARRAY
34824: PPUSH
34825: LD_VAR 0 12
34829: PUSH
34830: LD_VAR 0 7
34834: ARRAY
34835: PUSH
34836: LD_INT 2
34838: ARRAY
34839: PPUSH
34840: CALL_OW 428
34844: PUSH
34845: LD_INT 0
34847: GREATER
34848: OR
34849: PUSH
34850: LD_VAR 0 12
34854: PUSH
34855: LD_VAR 0 7
34859: ARRAY
34860: PUSH
34861: LD_INT 1
34863: ARRAY
34864: PPUSH
34865: LD_VAR 0 12
34869: PUSH
34870: LD_VAR 0 7
34874: ARRAY
34875: PUSH
34876: LD_INT 2
34878: ARRAY
34879: PPUSH
34880: CALL_OW 351
34884: OR
34885: IFFALSE 34891
// exit ;
34887: POP
34888: POP
34889: GO 35183
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34891: LD_ADDR_VAR 0 8
34895: PUSH
34896: LD_VAR 0 12
34900: PUSH
34901: LD_VAR 0 7
34905: ARRAY
34906: PUSH
34907: LD_INT 1
34909: ARRAY
34910: PPUSH
34911: LD_VAR 0 12
34915: PUSH
34916: LD_VAR 0 7
34920: ARRAY
34921: PUSH
34922: LD_INT 2
34924: ARRAY
34925: PPUSH
34926: CALL_OW 546
34930: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34931: LD_VAR 0 8
34935: PUSH
34936: LD_INT 1
34938: ARRAY
34939: PUSH
34940: LD_VAR 0 8
34944: PUSH
34945: LD_INT 2
34947: ARRAY
34948: PUSH
34949: LD_VAR 0 13
34953: PUSH
34954: LD_INT 2
34956: PLUS
34957: GREATER
34958: OR
34959: PUSH
34960: LD_VAR 0 8
34964: PUSH
34965: LD_INT 2
34967: ARRAY
34968: PUSH
34969: LD_VAR 0 13
34973: PUSH
34974: LD_INT 2
34976: MINUS
34977: LESS
34978: OR
34979: PUSH
34980: LD_VAR 0 8
34984: PUSH
34985: LD_INT 3
34987: ARRAY
34988: PUSH
34989: LD_INT 0
34991: PUSH
34992: LD_INT 8
34994: PUSH
34995: LD_INT 9
34997: PUSH
34998: LD_INT 10
35000: PUSH
35001: LD_INT 11
35003: PUSH
35004: LD_INT 12
35006: PUSH
35007: LD_INT 13
35009: PUSH
35010: LD_INT 16
35012: PUSH
35013: LD_INT 17
35015: PUSH
35016: LD_INT 18
35018: PUSH
35019: LD_INT 19
35021: PUSH
35022: LD_INT 20
35024: PUSH
35025: LD_INT 21
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: IN
35043: NOT
35044: OR
35045: PUSH
35046: LD_VAR 0 8
35050: PUSH
35051: LD_INT 5
35053: ARRAY
35054: NOT
35055: OR
35056: PUSH
35057: LD_VAR 0 8
35061: PUSH
35062: LD_INT 6
35064: ARRAY
35065: PUSH
35066: LD_INT 1
35068: PUSH
35069: LD_INT 2
35071: PUSH
35072: LD_INT 7
35074: PUSH
35075: LD_INT 9
35077: PUSH
35078: LD_INT 10
35080: PUSH
35081: LD_INT 11
35083: PUSH
35084: EMPTY
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: IN
35092: NOT
35093: OR
35094: IFFALSE 35100
// exit ;
35096: POP
35097: POP
35098: GO 35183
// end ;
35100: GO 34771
35102: POP
35103: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35104: LD_VAR 0 9
35108: PPUSH
35109: LD_VAR 0 3
35113: PPUSH
35114: LD_VAR 0 4
35118: PPUSH
35119: LD_INT 20
35121: PPUSH
35122: CALL 27106 0 4
35126: PUSH
35127: LD_INT 4
35129: ARRAY
35130: IFFALSE 35134
// exit ;
35132: GO 35183
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35134: LD_VAR 0 2
35138: PUSH
35139: LD_INT 29
35141: PUSH
35142: LD_INT 30
35144: PUSH
35145: EMPTY
35146: LIST
35147: LIST
35148: IN
35149: PUSH
35150: LD_VAR 0 3
35154: PPUSH
35155: LD_VAR 0 4
35159: PPUSH
35160: LD_VAR 0 9
35164: PPUSH
35165: CALL_OW 440
35169: NOT
35170: AND
35171: IFFALSE 35175
// exit ;
35173: GO 35183
// result := true ;
35175: LD_ADDR_VAR 0 6
35179: PUSH
35180: LD_INT 1
35182: ST_TO_ADDR
// end ;
35183: LD_VAR 0 6
35187: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35188: LD_INT 0
35190: PPUSH
35191: PPUSH
35192: PPUSH
35193: PPUSH
35194: PPUSH
35195: PPUSH
35196: PPUSH
35197: PPUSH
35198: PPUSH
35199: PPUSH
35200: PPUSH
35201: PPUSH
35202: PPUSH
35203: PPUSH
35204: PPUSH
35205: PPUSH
35206: PPUSH
35207: PPUSH
35208: PPUSH
35209: PPUSH
35210: PPUSH
35211: PPUSH
35212: PPUSH
35213: PPUSH
35214: PPUSH
35215: PPUSH
35216: PPUSH
35217: PPUSH
35218: PPUSH
35219: PPUSH
35220: PPUSH
35221: PPUSH
35222: PPUSH
35223: PPUSH
35224: PPUSH
35225: PPUSH
35226: PPUSH
35227: PPUSH
35228: PPUSH
35229: PPUSH
35230: PPUSH
35231: PPUSH
35232: PPUSH
35233: PPUSH
35234: PPUSH
35235: PPUSH
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
35240: PPUSH
35241: PPUSH
35242: PPUSH
35243: PPUSH
35244: PPUSH
35245: PPUSH
35246: PPUSH
35247: PPUSH
// result = [ ] ;
35248: LD_ADDR_VAR 0 7
35252: PUSH
35253: EMPTY
35254: ST_TO_ADDR
// temp_list = [ ] ;
35255: LD_ADDR_VAR 0 9
35259: PUSH
35260: EMPTY
35261: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35262: LD_VAR 0 4
35266: PUSH
35267: LD_INT 0
35269: PUSH
35270: LD_INT 1
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: LD_INT 3
35278: PUSH
35279: LD_INT 4
35281: PUSH
35282: LD_INT 5
35284: PUSH
35285: EMPTY
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: IN
35293: NOT
35294: PUSH
35295: LD_VAR 0 1
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: IN
35310: PUSH
35311: LD_VAR 0 5
35315: PUSH
35316: LD_INT 1
35318: PUSH
35319: LD_INT 2
35321: PUSH
35322: LD_INT 3
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: IN
35330: NOT
35331: AND
35332: OR
35333: IFFALSE 35337
// exit ;
35335: GO 53728
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35337: LD_VAR 0 1
35341: PUSH
35342: LD_INT 6
35344: PUSH
35345: LD_INT 7
35347: PUSH
35348: LD_INT 8
35350: PUSH
35351: LD_INT 13
35353: PUSH
35354: LD_INT 12
35356: PUSH
35357: LD_INT 15
35359: PUSH
35360: LD_INT 11
35362: PUSH
35363: LD_INT 14
35365: PUSH
35366: LD_INT 10
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: IN
35380: IFFALSE 35390
// btype = b_lab ;
35382: LD_ADDR_VAR 0 1
35386: PUSH
35387: LD_INT 6
35389: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35390: LD_VAR 0 6
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: LD_INT 1
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: LIST
35408: IN
35409: NOT
35410: PUSH
35411: LD_VAR 0 1
35415: PUSH
35416: LD_INT 0
35418: PUSH
35419: LD_INT 1
35421: PUSH
35422: LD_INT 2
35424: PUSH
35425: LD_INT 3
35427: PUSH
35428: LD_INT 6
35430: PUSH
35431: LD_INT 36
35433: PUSH
35434: LD_INT 4
35436: PUSH
35437: LD_INT 5
35439: PUSH
35440: LD_INT 31
35442: PUSH
35443: LD_INT 32
35445: PUSH
35446: LD_INT 33
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: IN
35462: NOT
35463: PUSH
35464: LD_VAR 0 6
35468: PUSH
35469: LD_INT 1
35471: EQUAL
35472: AND
35473: OR
35474: PUSH
35475: LD_VAR 0 1
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 3
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: IN
35490: NOT
35491: PUSH
35492: LD_VAR 0 6
35496: PUSH
35497: LD_INT 2
35499: EQUAL
35500: AND
35501: OR
35502: IFFALSE 35512
// mode = 0 ;
35504: LD_ADDR_VAR 0 6
35508: PUSH
35509: LD_INT 0
35511: ST_TO_ADDR
// case mode of 0 :
35512: LD_VAR 0 6
35516: PUSH
35517: LD_INT 0
35519: DOUBLE
35520: EQUAL
35521: IFTRUE 35525
35523: GO 46978
35525: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35526: LD_ADDR_VAR 0 11
35530: PUSH
35531: LD_INT 0
35533: PUSH
35534: LD_INT 0
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: LD_INT 1
35546: NEG
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 1
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: PUSH
35565: LD_INT 1
35567: PUSH
35568: EMPTY
35569: LIST
35570: LIST
35571: PUSH
35572: LD_INT 0
35574: PUSH
35575: LD_INT 1
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PUSH
35582: LD_INT 1
35584: NEG
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: EMPTY
35590: LIST
35591: LIST
35592: PUSH
35593: LD_INT 1
35595: NEG
35596: PUSH
35597: LD_INT 1
35599: NEG
35600: PUSH
35601: EMPTY
35602: LIST
35603: LIST
35604: PUSH
35605: LD_INT 1
35607: NEG
35608: PUSH
35609: LD_INT 2
35611: NEG
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: LD_INT 2
35622: NEG
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 1
35630: PUSH
35631: LD_INT 1
35633: NEG
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 1
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 0
35651: PUSH
35652: LD_INT 2
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: LD_INT 1
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: LD_INT 3
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 0
35682: PUSH
35683: LD_INT 3
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: EMPTY
35698: LIST
35699: LIST
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35719: LD_ADDR_VAR 0 12
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 0
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 1
35739: NEG
35740: PUSH
35741: EMPTY
35742: LIST
35743: LIST
35744: PUSH
35745: LD_INT 1
35747: PUSH
35748: LD_INT 0
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: LD_INT 1
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: LD_INT 1
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: LD_INT 0
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: LD_INT 1
35788: NEG
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: EMPTY
35795: LIST
35796: LIST
35797: PUSH
35798: LD_INT 1
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: LD_INT 2
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 2
35821: PUSH
35822: LD_INT 1
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: PUSH
35829: LD_INT 1
35831: NEG
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 2
35842: NEG
35843: PUSH
35844: LD_INT 0
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 2
35853: NEG
35854: PUSH
35855: LD_INT 1
35857: NEG
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 2
35865: NEG
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 3
35876: NEG
35877: PUSH
35878: LD_INT 0
35880: PUSH
35881: EMPTY
35882: LIST
35883: LIST
35884: PUSH
35885: LD_INT 3
35887: NEG
35888: PUSH
35889: LD_INT 1
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: LIST
35910: LIST
35911: LIST
35912: LIST
35913: LIST
35914: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35915: LD_ADDR_VAR 0 13
35919: PUSH
35920: LD_INT 0
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: LD_INT 1
35935: NEG
35936: PUSH
35937: EMPTY
35938: LIST
35939: LIST
35940: PUSH
35941: LD_INT 1
35943: PUSH
35944: LD_INT 0
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: PUSH
35951: LD_INT 1
35953: PUSH
35954: LD_INT 1
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: LD_INT 1
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: PUSH
35971: LD_INT 1
35973: NEG
35974: PUSH
35975: LD_INT 0
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: LD_INT 1
35988: NEG
35989: PUSH
35990: EMPTY
35991: LIST
35992: LIST
35993: PUSH
35994: LD_INT 1
35996: NEG
35997: PUSH
35998: LD_INT 2
36000: NEG
36001: PUSH
36002: EMPTY
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 2
36008: PUSH
36009: LD_INT 1
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: LD_INT 2
36018: PUSH
36019: LD_INT 2
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: LD_INT 2
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 2
36038: NEG
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 2
36050: NEG
36051: PUSH
36052: LD_INT 2
36054: NEG
36055: PUSH
36056: EMPTY
36057: LIST
36058: LIST
36059: PUSH
36060: LD_INT 2
36062: NEG
36063: PUSH
36064: LD_INT 3
36066: NEG
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 3
36074: NEG
36075: PUSH
36076: LD_INT 2
36078: NEG
36079: PUSH
36080: EMPTY
36081: LIST
36082: LIST
36083: PUSH
36084: LD_INT 3
36086: NEG
36087: PUSH
36088: LD_INT 3
36090: NEG
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: LIST
36111: LIST
36112: LIST
36113: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36114: LD_ADDR_VAR 0 14
36118: PUSH
36119: LD_INT 0
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 0
36131: PUSH
36132: LD_INT 1
36134: NEG
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 1
36142: PUSH
36143: LD_INT 0
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 1
36152: PUSH
36153: LD_INT 1
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 0
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 1
36172: NEG
36173: PUSH
36174: LD_INT 0
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 1
36183: NEG
36184: PUSH
36185: LD_INT 1
36187: NEG
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 1
36195: NEG
36196: PUSH
36197: LD_INT 2
36199: NEG
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: LD_INT 0
36207: PUSH
36208: LD_INT 2
36210: NEG
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: PUSH
36216: LD_INT 1
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: LD_INT 2
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 0
36239: PUSH
36240: LD_INT 2
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: NEG
36250: PUSH
36251: LD_INT 1
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: PUSH
36258: LD_INT 1
36260: NEG
36261: PUSH
36262: LD_INT 3
36264: NEG
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: LD_INT 3
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 2
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: LIST
36307: LIST
36308: LIST
36309: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36310: LD_ADDR_VAR 0 15
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: LD_INT 0
36320: PUSH
36321: EMPTY
36322: LIST
36323: LIST
36324: PUSH
36325: LD_INT 0
36327: PUSH
36328: LD_INT 1
36330: NEG
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: LD_INT 0
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 1
36348: PUSH
36349: LD_INT 1
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: LD_INT 1
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: NEG
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 1
36379: NEG
36380: PUSH
36381: LD_INT 1
36383: NEG
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 2
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 2
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 1
36422: NEG
36423: PUSH
36424: LD_INT 1
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 2
36433: NEG
36434: PUSH
36435: LD_INT 0
36437: PUSH
36438: EMPTY
36439: LIST
36440: LIST
36441: PUSH
36442: LD_INT 2
36444: NEG
36445: PUSH
36446: LD_INT 1
36448: NEG
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: LD_INT 1
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 3
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 3
36477: PUSH
36478: LD_INT 1
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: LIST
36496: LIST
36497: LIST
36498: LIST
36499: LIST
36500: LIST
36501: LIST
36502: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36503: LD_ADDR_VAR 0 16
36507: PUSH
36508: LD_INT 0
36510: PUSH
36511: LD_INT 0
36513: PUSH
36514: EMPTY
36515: LIST
36516: LIST
36517: PUSH
36518: LD_INT 0
36520: PUSH
36521: LD_INT 1
36523: NEG
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: PUSH
36529: LD_INT 1
36531: PUSH
36532: LD_INT 0
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 1
36541: PUSH
36542: LD_INT 1
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 0
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 1
36561: NEG
36562: PUSH
36563: LD_INT 0
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: LD_INT 1
36572: NEG
36573: PUSH
36574: LD_INT 1
36576: NEG
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 2
36588: NEG
36589: PUSH
36590: EMPTY
36591: LIST
36592: LIST
36593: PUSH
36594: LD_INT 2
36596: PUSH
36597: LD_INT 1
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 2
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 2
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 2
36626: NEG
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 2
36638: NEG
36639: PUSH
36640: LD_INT 2
36642: NEG
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 3
36650: PUSH
36651: LD_INT 2
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 3
36660: PUSH
36661: LD_INT 3
36663: PUSH
36664: EMPTY
36665: LIST
36666: LIST
36667: PUSH
36668: LD_INT 2
36670: PUSH
36671: LD_INT 3
36673: PUSH
36674: EMPTY
36675: LIST
36676: LIST
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36696: LD_ADDR_VAR 0 17
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 0
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 0
36713: PUSH
36714: LD_INT 1
36716: NEG
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 1
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 1
36734: PUSH
36735: LD_INT 1
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: LD_INT 0
36744: PUSH
36745: LD_INT 1
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: LD_INT 1
36754: NEG
36755: PUSH
36756: LD_INT 0
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 1
36777: NEG
36778: PUSH
36779: LD_INT 2
36781: NEG
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 0
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 1
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PUSH
36809: LD_INT 2
36811: PUSH
36812: LD_INT 0
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 2
36821: PUSH
36822: LD_INT 1
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 2
36831: PUSH
36832: LD_INT 2
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: LD_INT 2
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 2
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 1
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 2
36872: NEG
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 2
36883: NEG
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: EMPTY
36890: LIST
36891: LIST
36892: PUSH
36893: LD_INT 2
36895: NEG
36896: PUSH
36897: LD_INT 2
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: EMPTY
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: LIST
36916: LIST
36917: LIST
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36926: LD_ADDR_VAR 0 18
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: PUSH
36941: LD_INT 0
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: LD_INT 0
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 0
36974: PUSH
36975: LD_INT 1
36977: PUSH
36978: EMPTY
36979: LIST
36980: LIST
36981: PUSH
36982: LD_INT 1
36984: NEG
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: PUSH
36993: LD_INT 1
36995: NEG
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PUSH
37005: LD_INT 1
37007: NEG
37008: PUSH
37009: LD_INT 2
37011: NEG
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 0
37019: PUSH
37020: LD_INT 2
37022: NEG
37023: PUSH
37024: EMPTY
37025: LIST
37026: LIST
37027: PUSH
37028: LD_INT 1
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 2
37041: PUSH
37042: LD_INT 0
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 2
37051: PUSH
37052: LD_INT 1
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 2
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: LD_INT 2
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 2
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 2
37102: NEG
37103: PUSH
37104: LD_INT 0
37106: PUSH
37107: EMPTY
37108: LIST
37109: LIST
37110: PUSH
37111: LD_INT 2
37113: NEG
37114: PUSH
37115: LD_INT 1
37117: NEG
37118: PUSH
37119: EMPTY
37120: LIST
37121: LIST
37122: PUSH
37123: LD_INT 2
37125: NEG
37126: PUSH
37127: LD_INT 2
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37156: LD_ADDR_VAR 0 19
37160: PUSH
37161: LD_INT 0
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: EMPTY
37168: LIST
37169: LIST
37170: PUSH
37171: LD_INT 0
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: LD_INT 1
37184: PUSH
37185: LD_INT 0
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: LD_INT 1
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: LD_INT 0
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 1
37225: NEG
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: LD_INT 2
37241: NEG
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 0
37249: PUSH
37250: LD_INT 2
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: PUSH
37269: LD_INT 2
37271: PUSH
37272: LD_INT 0
37274: PUSH
37275: EMPTY
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: LD_INT 1
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 2
37291: PUSH
37292: LD_INT 2
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 2
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: LD_INT 1
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 2
37332: NEG
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 2
37343: NEG
37344: PUSH
37345: LD_INT 1
37347: NEG
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PUSH
37353: LD_INT 2
37355: NEG
37356: PUSH
37357: LD_INT 2
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37386: LD_ADDR_VAR 0 20
37390: PUSH
37391: LD_INT 0
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: EMPTY
37398: LIST
37399: LIST
37400: PUSH
37401: LD_INT 0
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 1
37414: PUSH
37415: LD_INT 0
37417: PUSH
37418: EMPTY
37419: LIST
37420: LIST
37421: PUSH
37422: LD_INT 1
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 0
37434: PUSH
37435: LD_INT 1
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 1
37444: NEG
37445: PUSH
37446: LD_INT 0
37448: PUSH
37449: EMPTY
37450: LIST
37451: LIST
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: LD_INT 2
37471: NEG
37472: PUSH
37473: EMPTY
37474: LIST
37475: LIST
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 2
37482: NEG
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PUSH
37488: LD_INT 1
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: PUSH
37499: LD_INT 2
37501: PUSH
37502: LD_INT 0
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 2
37511: PUSH
37512: LD_INT 1
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 2
37521: PUSH
37522: LD_INT 2
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 2
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: LD_INT 1
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 2
37562: NEG
37563: PUSH
37564: LD_INT 0
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 2
37573: NEG
37574: PUSH
37575: LD_INT 1
37577: NEG
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: LD_INT 2
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: EMPTY
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37616: LD_ADDR_VAR 0 21
37620: PUSH
37621: LD_INT 0
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: EMPTY
37639: LIST
37640: LIST
37641: PUSH
37642: LD_INT 1
37644: PUSH
37645: LD_INT 0
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 1
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 0
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 1
37674: NEG
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 1
37685: NEG
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 1
37697: NEG
37698: PUSH
37699: LD_INT 2
37701: NEG
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 2
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 1
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 2
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: PUSH
37752: LD_INT 2
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 2
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 1
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 2
37792: NEG
37793: PUSH
37794: LD_INT 0
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 2
37803: NEG
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 2
37815: NEG
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: EMPTY
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37846: LD_ADDR_VAR 0 22
37850: PUSH
37851: LD_INT 0
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 0
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: PUSH
37872: LD_INT 1
37874: PUSH
37875: LD_INT 0
37877: PUSH
37878: EMPTY
37879: LIST
37880: LIST
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: LD_INT 1
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 0
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 1
37904: NEG
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 1
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 1
37927: NEG
37928: PUSH
37929: LD_INT 2
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 2
37942: NEG
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: PUSH
37951: LD_INT 1
37953: NEG
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 2
37961: PUSH
37962: LD_INT 0
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: LD_INT 2
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 1
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 2
38022: NEG
38023: PUSH
38024: LD_INT 0
38026: PUSH
38027: EMPTY
38028: LIST
38029: LIST
38030: PUSH
38031: LD_INT 2
38033: NEG
38034: PUSH
38035: LD_INT 1
38037: NEG
38038: PUSH
38039: EMPTY
38040: LIST
38041: LIST
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: EMPTY
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38076: LD_ADDR_VAR 0 23
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 1
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 1
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 1
38157: NEG
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: LD_INT 2
38172: NEG
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 1
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 2
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 2
38201: PUSH
38202: LD_INT 1
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 2
38211: PUSH
38212: LD_INT 2
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 2
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 2
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 2
38252: NEG
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 2
38263: NEG
38264: PUSH
38265: LD_INT 1
38267: NEG
38268: PUSH
38269: EMPTY
38270: LIST
38271: LIST
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 2
38287: NEG
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: EMPTY
38294: LIST
38295: LIST
38296: PUSH
38297: LD_INT 1
38299: NEG
38300: PUSH
38301: LD_INT 3
38303: NEG
38304: PUSH
38305: EMPTY
38306: LIST
38307: LIST
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: LD_INT 2
38314: NEG
38315: PUSH
38316: EMPTY
38317: LIST
38318: LIST
38319: PUSH
38320: LD_INT 2
38322: PUSH
38323: LD_INT 1
38325: NEG
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38356: LD_ADDR_VAR 0 24
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: NEG
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 0
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 2
38481: PUSH
38482: LD_INT 1
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 2
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 2
38532: NEG
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 2
38543: NEG
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: NEG
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 3
38589: PUSH
38590: LD_INT 1
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 3
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38632: LD_ADDR_VAR 0 25
38636: PUSH
38637: LD_INT 0
38639: PUSH
38640: LD_INT 0
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: LD_INT 1
38652: NEG
38653: PUSH
38654: EMPTY
38655: LIST
38656: LIST
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 0
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PUSH
38668: LD_INT 1
38670: PUSH
38671: LD_INT 1
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: LD_INT 1
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: LD_INT 0
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: LD_INT 1
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 1
38713: NEG
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: LD_INT 0
38725: PUSH
38726: LD_INT 2
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 1
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 2
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 2
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 1
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 2
38808: NEG
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 2
38819: NEG
38820: PUSH
38821: LD_INT 1
38823: NEG
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: LD_INT 2
38831: NEG
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 3
38843: PUSH
38844: LD_INT 1
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: PUSH
38854: LD_INT 2
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 3
38866: PUSH
38867: EMPTY
38868: LIST
38869: LIST
38870: PUSH
38871: LD_INT 1
38873: PUSH
38874: LD_INT 3
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38906: LD_ADDR_VAR 0 26
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: PUSH
39118: LD_INT 3
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: LD_INT 3
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: NEG
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: LIST
39171: LIST
39172: LIST
39173: LIST
39174: LIST
39175: LIST
39176: LIST
39177: LIST
39178: LIST
39179: LIST
39180: LIST
39181: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39182: LD_ADDR_VAR 0 27
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 0
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: LD_INT 0
39199: PUSH
39200: LD_INT 1
39202: NEG
39203: PUSH
39204: EMPTY
39205: LIST
39206: LIST
39207: PUSH
39208: LD_INT 1
39210: PUSH
39211: LD_INT 0
39213: PUSH
39214: EMPTY
39215: LIST
39216: LIST
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: LD_INT 1
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: PUSH
39228: LD_INT 0
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: NEG
39241: PUSH
39242: LD_INT 0
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: NEG
39252: PUSH
39253: LD_INT 1
39255: NEG
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 1
39263: NEG
39264: PUSH
39265: LD_INT 2
39267: NEG
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 0
39275: PUSH
39276: LD_INT 2
39278: NEG
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: PUSH
39298: LD_INT 0
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 2
39307: PUSH
39308: LD_INT 1
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: LD_INT 2
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 2
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 2
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 1
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 2
39358: NEG
39359: PUSH
39360: LD_INT 0
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 2
39369: NEG
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 2
39381: NEG
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: LD_INT 2
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 1
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 3
39415: NEG
39416: PUSH
39417: LD_INT 1
39419: NEG
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 3
39427: NEG
39428: PUSH
39429: LD_INT 2
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39462: LD_ADDR_VAR 0 28
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: LD_INT 0
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: LD_INT 0
39479: PUSH
39480: LD_INT 1
39482: NEG
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 1
39490: PUSH
39491: LD_INT 0
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: PUSH
39501: LD_INT 1
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 0
39510: PUSH
39511: LD_INT 1
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 1
39520: NEG
39521: PUSH
39522: LD_INT 0
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: NEG
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: LD_INT 2
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 0
39555: PUSH
39556: LD_INT 2
39558: NEG
39559: PUSH
39560: EMPTY
39561: LIST
39562: LIST
39563: PUSH
39564: LD_INT 1
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 2
39577: PUSH
39578: LD_INT 0
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 2
39638: NEG
39639: PUSH
39640: LD_INT 0
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: NEG
39650: PUSH
39651: LD_INT 1
39653: NEG
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: LD_INT 3
39677: NEG
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: LD_INT 1
39685: NEG
39686: PUSH
39687: LD_INT 3
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 3
39697: NEG
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 3
39709: NEG
39710: PUSH
39711: LD_INT 2
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39744: LD_ADDR_VAR 0 29
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 0
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 0
39761: PUSH
39762: LD_INT 1
39764: NEG
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: LD_INT 1
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 1
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 1
39802: NEG
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: NEG
39814: PUSH
39815: LD_INT 1
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 1
39825: NEG
39826: PUSH
39827: LD_INT 2
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: LD_INT 2
39840: NEG
39841: PUSH
39842: EMPTY
39843: LIST
39844: LIST
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: LD_INT 1
39851: NEG
39852: PUSH
39853: EMPTY
39854: LIST
39855: LIST
39856: PUSH
39857: LD_INT 2
39859: PUSH
39860: LD_INT 0
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 2
39869: PUSH
39870: LD_INT 1
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 2
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 0
39889: PUSH
39890: LD_INT 2
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: LD_INT 1
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 2
39910: NEG
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: LD_INT 2
39926: NEG
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 2
39934: NEG
39935: PUSH
39936: LD_INT 3
39938: NEG
39939: PUSH
39940: EMPTY
39941: LIST
39942: LIST
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: LD_INT 1
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: LD_INT 3
39957: PUSH
39958: LD_INT 1
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: LD_INT 3
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 3
39988: NEG
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40023: LD_ADDR_VAR 0 30
40027: PUSH
40028: LD_INT 0
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 0
40040: PUSH
40041: LD_INT 1
40043: NEG
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 1
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: PUSH
40062: LD_INT 1
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: EMPTY
40076: LIST
40077: LIST
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: NEG
40093: PUSH
40094: LD_INT 1
40096: NEG
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 1
40104: NEG
40105: PUSH
40106: LD_INT 2
40108: NEG
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 0
40116: PUSH
40117: LD_INT 2
40119: NEG
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 1
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: LD_INT 2
40138: PUSH
40139: LD_INT 0
40141: PUSH
40142: EMPTY
40143: LIST
40144: LIST
40145: PUSH
40146: LD_INT 2
40148: PUSH
40149: LD_INT 1
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: LD_INT 2
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 1
40178: NEG
40179: PUSH
40180: LD_INT 1
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 2
40189: NEG
40190: PUSH
40191: LD_INT 0
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 2
40200: NEG
40201: PUSH
40202: LD_INT 1
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: NEG
40213: PUSH
40214: LD_INT 3
40216: NEG
40217: PUSH
40218: EMPTY
40219: LIST
40220: LIST
40221: PUSH
40222: LD_INT 1
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: EMPTY
40230: LIST
40231: LIST
40232: PUSH
40233: LD_INT 3
40235: PUSH
40236: LD_INT 2
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: LD_INT 3
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 3
40266: NEG
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: LIST
40293: LIST
40294: LIST
40295: LIST
40296: LIST
40297: LIST
40298: LIST
40299: LIST
40300: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40301: LD_ADDR_VAR 0 31
40305: PUSH
40306: LD_INT 0
40308: PUSH
40309: LD_INT 0
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 0
40318: PUSH
40319: LD_INT 1
40321: NEG
40322: PUSH
40323: EMPTY
40324: LIST
40325: LIST
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: LD_INT 0
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: LD_INT 1
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: LD_INT 1
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: LD_INT 0
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: PUSH
40368: LD_INT 1
40370: NEG
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 1
40382: NEG
40383: PUSH
40384: LD_INT 2
40386: NEG
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: EMPTY
40410: LIST
40411: LIST
40412: PUSH
40413: LD_INT 2
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 2
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: PUSH
40433: LD_INT 1
40435: PUSH
40436: LD_INT 2
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 0
40445: PUSH
40446: LD_INT 2
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 2
40466: NEG
40467: PUSH
40468: LD_INT 1
40470: NEG
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PUSH
40476: LD_INT 2
40478: NEG
40479: PUSH
40480: LD_INT 2
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: NEG
40491: PUSH
40492: LD_INT 3
40494: NEG
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 2
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: PUSH
40511: LD_INT 3
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: PUSH
40524: LD_INT 3
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 1
40533: NEG
40534: PUSH
40535: LD_INT 2
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 3
40544: NEG
40545: PUSH
40546: LD_INT 2
40548: NEG
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: LIST
40573: LIST
40574: LIST
40575: LIST
40576: LIST
40577: LIST
40578: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40579: LD_ADDR_VAR 0 32
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 0
40596: PUSH
40597: LD_INT 1
40599: NEG
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: LD_INT 0
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: LD_INT 1
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: LD_INT 0
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: NEG
40649: PUSH
40650: LD_INT 1
40652: NEG
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 0
40672: PUSH
40673: LD_INT 2
40675: NEG
40676: PUSH
40677: EMPTY
40678: LIST
40679: LIST
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: LD_INT 1
40686: NEG
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: LD_INT 2
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 0
40724: PUSH
40725: LD_INT 2
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 1
40734: NEG
40735: PUSH
40736: LD_INT 1
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 2
40745: NEG
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 2
40756: NEG
40757: PUSH
40758: LD_INT 1
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 3
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 3
40791: PUSH
40792: LD_INT 2
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 3
40822: NEG
40823: PUSH
40824: LD_INT 1
40826: NEG
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: LIST
40849: LIST
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40857: LD_ADDR_VAR 0 33
40861: PUSH
40862: LD_INT 0
40864: PUSH
40865: LD_INT 0
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: PUSH
40872: LD_INT 0
40874: PUSH
40875: LD_INT 1
40877: NEG
40878: PUSH
40879: EMPTY
40880: LIST
40881: LIST
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: LD_INT 0
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: NEG
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 1
40938: NEG
40939: PUSH
40940: LD_INT 2
40942: NEG
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 1
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 2
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 2
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 1
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 0
40991: PUSH
40992: LD_INT 2
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 2
41012: NEG
41013: PUSH
41014: LD_INT 0
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 2
41023: NEG
41024: PUSH
41025: LD_INT 1
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 2
41035: NEG
41036: PUSH
41037: LD_INT 2
41039: NEG
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: NEG
41048: PUSH
41049: LD_INT 3
41051: NEG
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 1
41062: NEG
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 1
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 1
41080: PUSH
41081: LD_INT 3
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: NEG
41091: PUSH
41092: LD_INT 2
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 3
41101: NEG
41102: PUSH
41103: LD_INT 2
41105: NEG
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: LIST
41130: LIST
41131: LIST
41132: LIST
41133: LIST
41134: LIST
41135: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41136: LD_ADDR_VAR 0 34
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 0
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 1
41156: NEG
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: EMPTY
41189: LIST
41190: LIST
41191: PUSH
41192: LD_INT 1
41194: NEG
41195: PUSH
41196: LD_INT 0
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 1
41205: NEG
41206: PUSH
41207: LD_INT 1
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 1
41217: NEG
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 0
41229: PUSH
41230: LD_INT 2
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: LD_INT 1
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 1
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 1
41327: NEG
41328: PUSH
41329: LD_INT 3
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: LD_INT 2
41342: NEG
41343: PUSH
41344: EMPTY
41345: LIST
41346: LIST
41347: PUSH
41348: LD_INT 3
41350: PUSH
41351: LD_INT 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 2
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: NEG
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 3
41381: NEG
41382: PUSH
41383: LD_INT 1
41385: NEG
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41416: LD_ADDR_VAR 0 35
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: LD_INT 0
41426: PUSH
41427: EMPTY
41428: LIST
41429: LIST
41430: PUSH
41431: LD_INT 0
41433: PUSH
41434: LD_INT 1
41436: NEG
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 1
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: EMPTY
41449: LIST
41450: LIST
41451: PUSH
41452: LD_INT 1
41454: PUSH
41455: LD_INT 1
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 0
41464: PUSH
41465: LD_INT 1
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 1
41474: NEG
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 1
41489: NEG
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 2
41497: PUSH
41498: LD_INT 1
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: NEG
41508: PUSH
41509: LD_INT 1
41511: NEG
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41528: LD_ADDR_VAR 0 36
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: LD_INT 1
41548: NEG
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 1
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: EMPTY
41561: LIST
41562: LIST
41563: PUSH
41564: LD_INT 1
41566: PUSH
41567: LD_INT 1
41569: PUSH
41570: EMPTY
41571: LIST
41572: LIST
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: LD_INT 1
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 1
41586: NEG
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: EMPTY
41592: LIST
41593: LIST
41594: PUSH
41595: LD_INT 1
41597: NEG
41598: PUSH
41599: LD_INT 1
41601: NEG
41602: PUSH
41603: EMPTY
41604: LIST
41605: LIST
41606: PUSH
41607: LD_INT 1
41609: NEG
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41640: LD_ADDR_VAR 0 37
41644: PUSH
41645: LD_INT 0
41647: PUSH
41648: LD_INT 0
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 0
41657: PUSH
41658: LD_INT 1
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: EMPTY
41683: LIST
41684: LIST
41685: PUSH
41686: LD_INT 0
41688: PUSH
41689: LD_INT 1
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 1
41698: NEG
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 1
41709: NEG
41710: PUSH
41711: LD_INT 1
41713: NEG
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PUSH
41719: LD_INT 1
41721: PUSH
41722: LD_INT 1
41724: NEG
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: LD_INT 1
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: EMPTY
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41752: LD_ADDR_VAR 0 38
41756: PUSH
41757: LD_INT 0
41759: PUSH
41760: LD_INT 0
41762: PUSH
41763: EMPTY
41764: LIST
41765: LIST
41766: PUSH
41767: LD_INT 0
41769: PUSH
41770: LD_INT 1
41772: NEG
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: EMPTY
41785: LIST
41786: LIST
41787: PUSH
41788: LD_INT 1
41790: PUSH
41791: LD_INT 1
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 0
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: EMPTY
41805: LIST
41806: LIST
41807: PUSH
41808: LD_INT 1
41810: NEG
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: NEG
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: PUSH
41834: LD_INT 1
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41864: LD_ADDR_VAR 0 39
41868: PUSH
41869: LD_INT 0
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 0
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: LD_INT 0
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: PUSH
41903: LD_INT 1
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 0
41912: PUSH
41913: LD_INT 1
41915: PUSH
41916: EMPTY
41917: LIST
41918: LIST
41919: PUSH
41920: LD_INT 1
41922: NEG
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: LD_INT 1
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: LD_INT 2
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: LIST
41972: LIST
41973: LIST
41974: LIST
41975: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41976: LD_ADDR_VAR 0 40
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 0
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 1
42004: PUSH
42005: LD_INT 0
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: LD_INT 1
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 0
42024: PUSH
42025: LD_INT 1
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: LD_INT 0
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 1
42057: PUSH
42058: LD_INT 1
42060: NEG
42061: PUSH
42062: EMPTY
42063: LIST
42064: LIST
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: LD_INT 1
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42088: LD_ADDR_VAR 0 41
42092: PUSH
42093: LD_INT 0
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 0
42105: PUSH
42106: LD_INT 1
42108: NEG
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: PUSH
42117: LD_INT 0
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: PUSH
42127: LD_INT 1
42129: PUSH
42130: EMPTY
42131: LIST
42132: LIST
42133: PUSH
42134: LD_INT 0
42136: PUSH
42137: LD_INT 1
42139: PUSH
42140: EMPTY
42141: LIST
42142: LIST
42143: PUSH
42144: LD_INT 1
42146: NEG
42147: PUSH
42148: LD_INT 0
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 1
42169: NEG
42170: PUSH
42171: LD_INT 2
42173: NEG
42174: PUSH
42175: EMPTY
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PUSH
42182: LD_INT 1
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 2
42192: PUSH
42193: LD_INT 0
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 2
42202: PUSH
42203: LD_INT 1
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 2
42212: PUSH
42213: LD_INT 2
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 1
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 2
42243: NEG
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: LD_INT 1
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 2
42266: NEG
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: NEG
42279: PUSH
42280: LD_INT 3
42282: NEG
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: PUSH
42288: LD_INT 2
42290: PUSH
42291: LD_INT 1
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 3
42301: PUSH
42302: LD_INT 0
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 3
42311: PUSH
42312: LD_INT 1
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: LD_INT 2
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 3
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 3
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: LD_INT 1
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 3
42362: NEG
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 3
42373: NEG
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 3
42385: NEG
42386: PUSH
42387: LD_INT 2
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 3
42397: NEG
42398: PUSH
42399: LD_INT 3
42401: NEG
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: LIST
42411: LIST
42412: LIST
42413: LIST
42414: LIST
42415: LIST
42416: LIST
42417: LIST
42418: LIST
42419: LIST
42420: LIST
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: LIST
42428: LIST
42429: LIST
42430: LIST
42431: LIST
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42438: LD_ADDR_VAR 0 42
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 0
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: EMPTY
42461: LIST
42462: LIST
42463: PUSH
42464: LD_INT 1
42466: PUSH
42467: LD_INT 0
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: LD_INT 0
42486: PUSH
42487: LD_INT 1
42489: PUSH
42490: EMPTY
42491: LIST
42492: LIST
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: LD_INT 0
42500: PUSH
42501: EMPTY
42502: LIST
42503: LIST
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: EMPTY
42514: LIST
42515: LIST
42516: PUSH
42517: LD_INT 1
42519: NEG
42520: PUSH
42521: LD_INT 2
42523: NEG
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 2
42534: NEG
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 2
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: EMPTY
42558: LIST
42559: LIST
42560: PUSH
42561: LD_INT 2
42563: PUSH
42564: LD_INT 2
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 2
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 0
42583: PUSH
42584: LD_INT 2
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 2
42604: NEG
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 2
42616: NEG
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 2
42628: NEG
42629: PUSH
42630: LD_INT 3
42632: NEG
42633: PUSH
42634: EMPTY
42635: LIST
42636: LIST
42637: PUSH
42638: LD_INT 1
42640: NEG
42641: PUSH
42642: LD_INT 3
42644: NEG
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 0
42652: PUSH
42653: LD_INT 3
42655: NEG
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: LD_INT 2
42666: NEG
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PUSH
42672: LD_INT 3
42674: PUSH
42675: LD_INT 2
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 3
42684: PUSH
42685: LD_INT 3
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 2
42694: PUSH
42695: LD_INT 3
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 3
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 3
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 2
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 3
42735: NEG
42736: PUSH
42737: LD_INT 2
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 3
42747: NEG
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42788: LD_ADDR_VAR 0 43
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 0
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 1
42808: NEG
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 0
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 0
42836: PUSH
42837: LD_INT 1
42839: PUSH
42840: EMPTY
42841: LIST
42842: LIST
42843: PUSH
42844: LD_INT 1
42846: NEG
42847: PUSH
42848: LD_INT 0
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 1
42857: NEG
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: EMPTY
42864: LIST
42865: LIST
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: LD_INT 2
42873: NEG
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 2
42884: NEG
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 2
42903: PUSH
42904: LD_INT 0
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 2
42913: PUSH
42914: LD_INT 1
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 2
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 0
42933: PUSH
42934: LD_INT 2
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: LD_INT 0
42958: PUSH
42959: EMPTY
42960: LIST
42961: LIST
42962: PUSH
42963: LD_INT 2
42965: NEG
42966: PUSH
42967: LD_INT 1
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 3
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 0
42989: PUSH
42990: LD_INT 3
42992: NEG
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: LD_INT 2
43003: NEG
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 1
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 3
43022: PUSH
43023: LD_INT 0
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 3
43032: PUSH
43033: LD_INT 1
43035: PUSH
43036: EMPTY
43037: LIST
43038: LIST
43039: PUSH
43040: LD_INT 1
43042: PUSH
43043: LD_INT 3
43045: PUSH
43046: EMPTY
43047: LIST
43048: LIST
43049: PUSH
43050: LD_INT 0
43052: PUSH
43053: LD_INT 3
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 2
43066: PUSH
43067: EMPTY
43068: LIST
43069: LIST
43070: PUSH
43071: LD_INT 2
43073: NEG
43074: PUSH
43075: LD_INT 1
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 3
43084: NEG
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 3
43095: NEG
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: LIST
43128: LIST
43129: LIST
43130: LIST
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43136: LD_ADDR_VAR 0 44
43140: PUSH
43141: LD_INT 0
43143: PUSH
43144: LD_INT 0
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 0
43153: PUSH
43154: LD_INT 1
43156: NEG
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 1
43164: PUSH
43165: LD_INT 0
43167: PUSH
43168: EMPTY
43169: LIST
43170: LIST
43171: PUSH
43172: LD_INT 1
43174: PUSH
43175: LD_INT 1
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 0
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 0
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 2
43314: NEG
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: NEG
43327: PUSH
43328: LD_INT 3
43330: NEG
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: PUSH
43336: LD_INT 2
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 3
43349: PUSH
43350: LD_INT 0
43352: PUSH
43353: EMPTY
43354: LIST
43355: LIST
43356: PUSH
43357: LD_INT 3
43359: PUSH
43360: LD_INT 1
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 3
43369: PUSH
43370: LD_INT 2
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 3
43379: PUSH
43380: LD_INT 3
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 2
43389: PUSH
43390: LD_INT 3
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: NEG
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 3
43410: NEG
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 3
43421: NEG
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 3
43433: NEG
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 3
43445: NEG
43446: PUSH
43447: LD_INT 3
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: LIST
43459: LIST
43460: LIST
43461: LIST
43462: LIST
43463: LIST
43464: LIST
43465: LIST
43466: LIST
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43486: LD_ADDR_VAR 0 45
43490: PUSH
43491: LD_INT 0
43493: PUSH
43494: LD_INT 0
43496: PUSH
43497: EMPTY
43498: LIST
43499: LIST
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 1
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: LD_INT 0
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 1
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 0
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 0
43548: PUSH
43549: EMPTY
43550: LIST
43551: LIST
43552: PUSH
43553: LD_INT 1
43555: NEG
43556: PUSH
43557: LD_INT 1
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 1
43567: NEG
43568: PUSH
43569: LD_INT 2
43571: NEG
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PUSH
43577: LD_INT 0
43579: PUSH
43580: LD_INT 2
43582: NEG
43583: PUSH
43584: EMPTY
43585: LIST
43586: LIST
43587: PUSH
43588: LD_INT 1
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 2
43601: PUSH
43602: LD_INT 1
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 2
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 0
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 1
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 2
43664: NEG
43665: PUSH
43666: LD_INT 2
43668: NEG
43669: PUSH
43670: EMPTY
43671: LIST
43672: LIST
43673: PUSH
43674: LD_INT 2
43676: NEG
43677: PUSH
43678: LD_INT 3
43680: NEG
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 3
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 0
43700: PUSH
43701: LD_INT 3
43703: NEG
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: LD_INT 2
43714: NEG
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 3
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 3
43732: PUSH
43733: LD_INT 3
43735: PUSH
43736: EMPTY
43737: LIST
43738: LIST
43739: PUSH
43740: LD_INT 2
43742: PUSH
43743: LD_INT 3
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: LD_INT 3
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 3
43765: PUSH
43766: EMPTY
43767: LIST
43768: LIST
43769: PUSH
43770: LD_INT 1
43772: NEG
43773: PUSH
43774: LD_INT 2
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 3
43783: NEG
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 3
43795: NEG
43796: PUSH
43797: LD_INT 3
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: LIST
43820: LIST
43821: LIST
43822: LIST
43823: LIST
43824: LIST
43825: LIST
43826: LIST
43827: LIST
43828: LIST
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43836: LD_ADDR_VAR 0 46
43840: PUSH
43841: LD_INT 0
43843: PUSH
43844: LD_INT 0
43846: PUSH
43847: EMPTY
43848: LIST
43849: LIST
43850: PUSH
43851: LD_INT 0
43853: PUSH
43854: LD_INT 1
43856: NEG
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: EMPTY
43879: LIST
43880: LIST
43881: PUSH
43882: LD_INT 0
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 1
43894: NEG
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 1
43905: NEG
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: EMPTY
43912: LIST
43913: LIST
43914: PUSH
43915: LD_INT 1
43917: NEG
43918: PUSH
43919: LD_INT 2
43921: NEG
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 2
43932: NEG
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 1
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: PUSH
43949: LD_INT 2
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: EMPTY
43956: LIST
43957: LIST
43958: PUSH
43959: LD_INT 2
43961: PUSH
43962: LD_INT 1
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 1
43991: NEG
43992: PUSH
43993: LD_INT 1
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 2
44002: NEG
44003: PUSH
44004: LD_INT 0
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 2
44013: NEG
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 3
44029: NEG
44030: PUSH
44031: EMPTY
44032: LIST
44033: LIST
44034: PUSH
44035: LD_INT 0
44037: PUSH
44038: LD_INT 3
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: PUSH
44049: LD_INT 2
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: LD_INT 1
44062: NEG
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 3
44070: PUSH
44071: LD_INT 0
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 3
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 3
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 3
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 2
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 2
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 3
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 3
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: LIST
44167: LIST
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: LIST
44173: LIST
44174: LIST
44175: LIST
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44184: LD_ADDR_VAR 0 47
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: LD_INT 0
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 0
44201: PUSH
44202: LD_INT 1
44204: NEG
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 1
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: PUSH
44220: LD_INT 1
44222: PUSH
44223: LD_INT 1
44225: PUSH
44226: EMPTY
44227: LIST
44228: LIST
44229: PUSH
44230: LD_INT 0
44232: PUSH
44233: LD_INT 1
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: PUSH
44240: LD_INT 1
44242: NEG
44243: PUSH
44244: LD_INT 0
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 1
44253: NEG
44254: PUSH
44255: LD_INT 1
44257: NEG
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PUSH
44263: LD_INT 1
44265: NEG
44266: PUSH
44267: LD_INT 2
44269: NEG
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 0
44277: PUSH
44278: LD_INT 2
44280: NEG
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: PUSH
44289: LD_INT 1
44291: NEG
44292: PUSH
44293: EMPTY
44294: LIST
44295: LIST
44296: PUSH
44297: LD_INT 2
44299: NEG
44300: PUSH
44301: LD_INT 1
44303: NEG
44304: PUSH
44305: EMPTY
44306: LIST
44307: LIST
44308: PUSH
44309: LD_INT 2
44311: NEG
44312: PUSH
44313: LD_INT 2
44315: NEG
44316: PUSH
44317: EMPTY
44318: LIST
44319: LIST
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44335: LD_ADDR_VAR 0 48
44339: PUSH
44340: LD_INT 0
44342: PUSH
44343: LD_INT 0
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 1
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 1
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 0
44383: PUSH
44384: LD_INT 1
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: PUSH
44391: LD_INT 1
44393: NEG
44394: PUSH
44395: LD_INT 0
44397: PUSH
44398: EMPTY
44399: LIST
44400: LIST
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: LD_INT 1
44408: NEG
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 1
44416: NEG
44417: PUSH
44418: LD_INT 2
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: LD_INT 2
44431: NEG
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 2
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: LIST
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: LIST
44477: LIST
44478: LIST
44479: LIST
44480: LIST
44481: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44482: LD_ADDR_VAR 0 49
44486: PUSH
44487: LD_INT 0
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 1
44502: NEG
44503: PUSH
44504: EMPTY
44505: LIST
44506: LIST
44507: PUSH
44508: LD_INT 1
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: EMPTY
44515: LIST
44516: LIST
44517: PUSH
44518: LD_INT 1
44520: PUSH
44521: LD_INT 1
44523: PUSH
44524: EMPTY
44525: LIST
44526: LIST
44527: PUSH
44528: LD_INT 0
44530: PUSH
44531: LD_INT 1
44533: PUSH
44534: EMPTY
44535: LIST
44536: LIST
44537: PUSH
44538: LD_INT 1
44540: NEG
44541: PUSH
44542: LD_INT 0
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 1
44551: NEG
44552: PUSH
44553: LD_INT 1
44555: NEG
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 1
44563: PUSH
44564: LD_INT 1
44566: NEG
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 2
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: PUSH
44585: LD_INT 1
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 2
44594: PUSH
44595: LD_INT 2
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 2
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: EMPTY
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44626: LD_ADDR_VAR 0 50
44630: PUSH
44631: LD_INT 0
44633: PUSH
44634: LD_INT 0
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: LD_INT 1
44677: PUSH
44678: EMPTY
44679: LIST
44680: LIST
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: LD_INT 0
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: NEG
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 2
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 2
44717: PUSH
44718: LD_INT 2
44720: PUSH
44721: EMPTY
44722: LIST
44723: LIST
44724: PUSH
44725: LD_INT 1
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 0
44737: PUSH
44738: LD_INT 2
44740: PUSH
44741: EMPTY
44742: LIST
44743: LIST
44744: PUSH
44745: LD_INT 1
44747: NEG
44748: PUSH
44749: LD_INT 1
44751: PUSH
44752: EMPTY
44753: LIST
44754: LIST
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: LIST
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44770: LD_ADDR_VAR 0 51
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: LD_INT 0
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 1
44790: NEG
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 1
44798: PUSH
44799: LD_INT 0
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 1
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 0
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 1
44828: NEG
44829: PUSH
44830: LD_INT 0
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 1
44839: NEG
44840: PUSH
44841: LD_INT 1
44843: NEG
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: PUSH
44852: LD_INT 2
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 2
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: LD_INT 1
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 2
44882: NEG
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 2
44893: NEG
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: EMPTY
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: LIST
44909: LIST
44910: LIST
44911: LIST
44912: LIST
44913: LIST
44914: LIST
44915: LIST
44916: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44917: LD_ADDR_VAR 0 52
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 0
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 0
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: PUSH
44946: LD_INT 0
44948: PUSH
44949: EMPTY
44950: LIST
44951: LIST
44952: PUSH
44953: LD_INT 1
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: EMPTY
44960: LIST
44961: LIST
44962: PUSH
44963: LD_INT 0
44965: PUSH
44966: LD_INT 1
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: NEG
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 1
44998: NEG
44999: PUSH
45000: LD_INT 2
45002: NEG
45003: PUSH
45004: EMPTY
45005: LIST
45006: LIST
45007: PUSH
45008: LD_INT 1
45010: NEG
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: LD_INT 0
45025: PUSH
45026: EMPTY
45027: LIST
45028: LIST
45029: PUSH
45030: LD_INT 2
45032: NEG
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: LD_INT 2
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: LIST
45058: LIST
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: LIST
45065: LIST
45066: LIST
45067: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45068: LD_ADDR_VAR 0 53
45072: PUSH
45073: LD_INT 0
45075: PUSH
45076: LD_INT 0
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 1
45088: NEG
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: LD_INT 0
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 1
45126: NEG
45127: PUSH
45128: LD_INT 0
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 1
45137: NEG
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 1
45149: NEG
45150: PUSH
45151: LD_INT 2
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 0
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: PUSH
45170: LD_INT 1
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: EMPTY
45178: LIST
45179: LIST
45180: PUSH
45181: LD_INT 2
45183: PUSH
45184: LD_INT 0
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 2
45193: PUSH
45194: LD_INT 1
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 2
45203: PUSH
45204: LD_INT 2
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 1
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: LD_INT 0
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 2
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: LIST
45284: LIST
45285: LIST
45286: LIST
45287: LIST
45288: LIST
45289: LIST
45290: LIST
45291: LIST
45292: LIST
45293: LIST
45294: LIST
45295: LIST
45296: LIST
45297: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45298: LD_ADDR_VAR 0 54
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: EMPTY
45310: LIST
45311: LIST
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PUSH
45324: LD_INT 1
45326: PUSH
45327: LD_INT 0
45329: PUSH
45330: EMPTY
45331: LIST
45332: LIST
45333: PUSH
45334: LD_INT 1
45336: PUSH
45337: LD_INT 1
45339: PUSH
45340: EMPTY
45341: LIST
45342: LIST
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: LD_INT 1
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 1
45356: NEG
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: EMPTY
45362: LIST
45363: LIST
45364: PUSH
45365: LD_INT 1
45367: NEG
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: NEG
45380: PUSH
45381: LD_INT 2
45383: NEG
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 0
45391: PUSH
45392: LD_INT 2
45394: NEG
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 2
45413: PUSH
45414: LD_INT 0
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 2
45423: PUSH
45424: LD_INT 1
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: PUSH
45434: LD_INT 2
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 2
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 2
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: NEG
45475: PUSH
45476: LD_INT 0
45478: PUSH
45479: EMPTY
45480: LIST
45481: LIST
45482: PUSH
45483: LD_INT 2
45485: NEG
45486: PUSH
45487: LD_INT 1
45489: NEG
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 2
45497: NEG
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45528: LD_ADDR_VAR 0 55
45532: PUSH
45533: LD_INT 0
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: PUSH
45543: LD_INT 0
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: EMPTY
45551: LIST
45552: LIST
45553: PUSH
45554: LD_INT 1
45556: PUSH
45557: LD_INT 0
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 0
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 1
45586: NEG
45587: PUSH
45588: LD_INT 0
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: NEG
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 2
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 0
45621: PUSH
45622: LD_INT 2
45624: NEG
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 2
45643: PUSH
45644: LD_INT 0
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 2
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 2
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 2
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 2
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 1
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 2
45704: NEG
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: EMPTY
45710: LIST
45711: LIST
45712: PUSH
45713: LD_INT 2
45715: NEG
45716: PUSH
45717: LD_INT 1
45719: NEG
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PUSH
45725: LD_INT 2
45727: NEG
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: LIST
45750: LIST
45751: LIST
45752: LIST
45753: LIST
45754: LIST
45755: LIST
45756: LIST
45757: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45758: LD_ADDR_VAR 0 56
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 0
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 1
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 1
45796: PUSH
45797: LD_INT 1
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 0
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 0
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: NEG
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PUSH
45837: LD_INT 1
45839: NEG
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: LD_INT 2
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: EMPTY
45868: LIST
45869: LIST
45870: PUSH
45871: LD_INT 2
45873: PUSH
45874: LD_INT 0
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: PUSH
45881: LD_INT 2
45883: PUSH
45884: LD_INT 1
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: PUSH
45894: LD_INT 2
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 2
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 2
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 1
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 2
45934: NEG
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: NEG
45946: PUSH
45947: LD_INT 1
45949: NEG
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 2
45957: NEG
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: EMPTY
45968: LIST
45969: LIST
45970: LIST
45971: LIST
45972: LIST
45973: LIST
45974: LIST
45975: LIST
45976: LIST
45977: LIST
45978: LIST
45979: LIST
45980: LIST
45981: LIST
45982: LIST
45983: LIST
45984: LIST
45985: LIST
45986: LIST
45987: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45988: LD_ADDR_VAR 0 57
45992: PUSH
45993: LD_INT 0
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 0
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: EMPTY
46011: LIST
46012: LIST
46013: PUSH
46014: LD_INT 1
46016: PUSH
46017: LD_INT 0
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: PUSH
46024: LD_INT 1
46026: PUSH
46027: LD_INT 1
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 1
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 1
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 0
46081: PUSH
46082: LD_INT 2
46084: NEG
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 2
46103: PUSH
46104: LD_INT 0
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 1
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 2
46123: PUSH
46124: LD_INT 2
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 2
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 2
46187: NEG
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: LIST
46201: LIST
46202: LIST
46203: LIST
46204: LIST
46205: LIST
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46218: LD_ADDR_VAR 0 58
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 0
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: EMPTY
46241: LIST
46242: LIST
46243: PUSH
46244: LD_INT 1
46246: PUSH
46247: LD_INT 0
46249: PUSH
46250: EMPTY
46251: LIST
46252: LIST
46253: PUSH
46254: LD_INT 1
46256: PUSH
46257: LD_INT 1
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 0
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: NEG
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 1
46325: NEG
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 2
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 2
46343: PUSH
46344: LD_INT 1
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 2
46353: PUSH
46354: LD_INT 2
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 2
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 1
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 2
46394: NEG
46395: PUSH
46396: LD_INT 0
46398: PUSH
46399: EMPTY
46400: LIST
46401: LIST
46402: PUSH
46403: LD_INT 2
46405: NEG
46406: PUSH
46407: LD_INT 1
46409: NEG
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: LIST
46431: LIST
46432: LIST
46433: LIST
46434: LIST
46435: LIST
46436: LIST
46437: LIST
46438: LIST
46439: LIST
46440: LIST
46441: LIST
46442: LIST
46443: LIST
46444: LIST
46445: LIST
46446: LIST
46447: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46448: LD_ADDR_VAR 0 59
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 0
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: LD_INT 0
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 1
46486: PUSH
46487: LD_INT 1
46489: PUSH
46490: EMPTY
46491: LIST
46492: LIST
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 1
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46536: LD_ADDR_VAR 0 60
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: EMPTY
46548: LIST
46549: LIST
46550: PUSH
46551: LD_INT 0
46553: PUSH
46554: LD_INT 1
46556: NEG
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: EMPTY
46569: LIST
46570: LIST
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 0
46584: PUSH
46585: LD_INT 1
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: NEG
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: PUSH
46607: LD_INT 1
46609: NEG
46610: PUSH
46611: EMPTY
46612: LIST
46613: LIST
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: LIST
46621: LIST
46622: LIST
46623: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46624: LD_ADDR_VAR 0 61
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: LD_INT 0
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 0
46641: PUSH
46642: LD_INT 1
46644: NEG
46645: PUSH
46646: EMPTY
46647: LIST
46648: LIST
46649: PUSH
46650: LD_INT 1
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: EMPTY
46657: LIST
46658: LIST
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: LD_INT 1
46665: PUSH
46666: EMPTY
46667: LIST
46668: LIST
46669: PUSH
46670: LD_INT 0
46672: PUSH
46673: LD_INT 1
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: PUSH
46680: LD_INT 1
46682: NEG
46683: PUSH
46684: LD_INT 0
46686: PUSH
46687: EMPTY
46688: LIST
46689: LIST
46690: PUSH
46691: LD_INT 1
46693: NEG
46694: PUSH
46695: LD_INT 1
46697: NEG
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: LIST
46709: LIST
46710: LIST
46711: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46712: LD_ADDR_VAR 0 62
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: LD_INT 0
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 0
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: LD_INT 1
46753: PUSH
46754: EMPTY
46755: LIST
46756: LIST
46757: PUSH
46758: LD_INT 0
46760: PUSH
46761: LD_INT 1
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: LD_INT 0
46774: PUSH
46775: EMPTY
46776: LIST
46777: LIST
46778: PUSH
46779: LD_INT 1
46781: NEG
46782: PUSH
46783: LD_INT 1
46785: NEG
46786: PUSH
46787: EMPTY
46788: LIST
46789: LIST
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: LIST
46797: LIST
46798: LIST
46799: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46800: LD_ADDR_VAR 0 63
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 0
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 0
46817: PUSH
46818: LD_INT 1
46820: NEG
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 1
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: NEG
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: LIST
46885: LIST
46886: LIST
46887: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46888: LD_ADDR_VAR 0 64
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: LD_INT 1
46908: NEG
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: PUSH
46914: LD_INT 1
46916: PUSH
46917: LD_INT 0
46919: PUSH
46920: EMPTY
46921: LIST
46922: LIST
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: LD_INT 1
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: LD_INT 0
46936: PUSH
46937: LD_INT 1
46939: PUSH
46940: EMPTY
46941: LIST
46942: LIST
46943: PUSH
46944: LD_INT 1
46946: NEG
46947: PUSH
46948: LD_INT 0
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: NEG
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: ST_TO_ADDR
// end ; 1 :
46976: GO 52873
46978: LD_INT 1
46980: DOUBLE
46981: EQUAL
46982: IFTRUE 46986
46984: GO 49609
46986: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46987: LD_ADDR_VAR 0 11
46991: PUSH
46992: LD_INT 1
46994: NEG
46995: PUSH
46996: LD_INT 3
46998: NEG
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 0
47006: PUSH
47007: LD_INT 3
47009: NEG
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 1
47017: PUSH
47018: LD_INT 2
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: EMPTY
47027: LIST
47028: LIST
47029: LIST
47030: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47031: LD_ADDR_VAR 0 12
47035: PUSH
47036: LD_INT 2
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 3
47049: PUSH
47050: LD_INT 0
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: LD_INT 1
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: LIST
47071: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47072: LD_ADDR_VAR 0 13
47076: PUSH
47077: LD_INT 3
47079: PUSH
47080: LD_INT 2
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 3
47089: PUSH
47090: LD_INT 3
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: PUSH
47100: LD_INT 3
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47112: LD_ADDR_VAR 0 14
47116: PUSH
47117: LD_INT 1
47119: PUSH
47120: LD_INT 3
47122: PUSH
47123: EMPTY
47124: LIST
47125: LIST
47126: PUSH
47127: LD_INT 0
47129: PUSH
47130: LD_INT 3
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 1
47139: NEG
47140: PUSH
47141: LD_INT 2
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: LIST
47152: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47153: LD_ADDR_VAR 0 15
47157: PUSH
47158: LD_INT 2
47160: NEG
47161: PUSH
47162: LD_INT 1
47164: PUSH
47165: EMPTY
47166: LIST
47167: LIST
47168: PUSH
47169: LD_INT 3
47171: NEG
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: NEG
47183: PUSH
47184: LD_INT 1
47186: NEG
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: LIST
47196: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47197: LD_ADDR_VAR 0 16
47201: PUSH
47202: LD_INT 2
47204: NEG
47205: PUSH
47206: LD_INT 3
47208: NEG
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 3
47216: NEG
47217: PUSH
47218: LD_INT 2
47220: NEG
47221: PUSH
47222: EMPTY
47223: LIST
47224: LIST
47225: PUSH
47226: LD_INT 3
47228: NEG
47229: PUSH
47230: LD_INT 3
47232: NEG
47233: PUSH
47234: EMPTY
47235: LIST
47236: LIST
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: LIST
47242: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47243: LD_ADDR_VAR 0 17
47247: PUSH
47248: LD_INT 1
47250: NEG
47251: PUSH
47252: LD_INT 3
47254: NEG
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: LD_INT 3
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: LD_INT 1
47273: PUSH
47274: LD_INT 2
47276: NEG
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: LIST
47286: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47287: LD_ADDR_VAR 0 18
47291: PUSH
47292: LD_INT 2
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 3
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 3
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47328: LD_ADDR_VAR 0 19
47332: PUSH
47333: LD_INT 3
47335: PUSH
47336: LD_INT 2
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 3
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 2
47355: PUSH
47356: LD_INT 3
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: LIST
47367: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47368: LD_ADDR_VAR 0 20
47372: PUSH
47373: LD_INT 1
47375: PUSH
47376: LD_INT 3
47378: PUSH
47379: EMPTY
47380: LIST
47381: LIST
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: LD_INT 3
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: PUSH
47393: LD_INT 1
47395: NEG
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47409: LD_ADDR_VAR 0 21
47413: PUSH
47414: LD_INT 2
47416: NEG
47417: PUSH
47418: LD_INT 1
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 3
47427: NEG
47428: PUSH
47429: LD_INT 0
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: LD_INT 3
47438: NEG
47439: PUSH
47440: LD_INT 1
47442: NEG
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47453: LD_ADDR_VAR 0 22
47457: PUSH
47458: LD_INT 2
47460: NEG
47461: PUSH
47462: LD_INT 3
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 3
47472: NEG
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 3
47484: NEG
47485: PUSH
47486: LD_INT 3
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47499: LD_ADDR_VAR 0 23
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: LD_INT 3
47509: NEG
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: PUSH
47515: LD_INT 1
47517: NEG
47518: PUSH
47519: LD_INT 4
47521: NEG
47522: PUSH
47523: EMPTY
47524: LIST
47525: LIST
47526: PUSH
47527: LD_INT 1
47529: PUSH
47530: LD_INT 3
47532: NEG
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: LIST
47542: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47543: LD_ADDR_VAR 0 24
47547: PUSH
47548: LD_INT 3
47550: PUSH
47551: LD_INT 0
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 3
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 4
47571: PUSH
47572: LD_INT 1
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47584: LD_ADDR_VAR 0 25
47588: PUSH
47589: LD_INT 3
47591: PUSH
47592: LD_INT 3
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 4
47601: PUSH
47602: LD_INT 3
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 3
47611: PUSH
47612: LD_INT 4
47614: PUSH
47615: EMPTY
47616: LIST
47617: LIST
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47624: LD_ADDR_VAR 0 26
47628: PUSH
47629: LD_INT 0
47631: PUSH
47632: LD_INT 3
47634: PUSH
47635: EMPTY
47636: LIST
47637: LIST
47638: PUSH
47639: LD_INT 1
47641: PUSH
47642: LD_INT 4
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: PUSH
47649: LD_INT 1
47651: NEG
47652: PUSH
47653: LD_INT 3
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47665: LD_ADDR_VAR 0 27
47669: PUSH
47670: LD_INT 3
47672: NEG
47673: PUSH
47674: LD_INT 0
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: LD_INT 3
47683: NEG
47684: PUSH
47685: LD_INT 1
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: PUSH
47692: LD_INT 4
47694: NEG
47695: PUSH
47696: LD_INT 1
47698: NEG
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47709: LD_ADDR_VAR 0 28
47713: PUSH
47714: LD_INT 3
47716: NEG
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 3
47728: NEG
47729: PUSH
47730: LD_INT 4
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 4
47740: NEG
47741: PUSH
47742: LD_INT 3
47744: NEG
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: LIST
47754: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47755: LD_ADDR_VAR 0 29
47759: PUSH
47760: LD_INT 1
47762: NEG
47763: PUSH
47764: LD_INT 3
47766: NEG
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: LD_INT 3
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 1
47785: PUSH
47786: LD_INT 2
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 4
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 4
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 3
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 1
47830: NEG
47831: PUSH
47832: LD_INT 5
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 5
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: LD_INT 4
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: LD_INT 1
47864: NEG
47865: PUSH
47866: LD_INT 6
47868: NEG
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 6
47879: NEG
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 5
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: LIST
47904: LIST
47905: LIST
47906: LIST
47907: LIST
47908: LIST
47909: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47910: LD_ADDR_VAR 0 30
47914: PUSH
47915: LD_INT 2
47917: PUSH
47918: LD_INT 1
47920: NEG
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 3
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 3
47938: PUSH
47939: LD_INT 1
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 3
47948: PUSH
47949: LD_INT 1
47951: NEG
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 4
47959: PUSH
47960: LD_INT 0
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 4
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 4
47979: PUSH
47980: LD_INT 1
47982: NEG
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 5
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: PUSH
47998: LD_INT 5
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 5
48010: PUSH
48011: LD_INT 1
48013: NEG
48014: PUSH
48015: EMPTY
48016: LIST
48017: LIST
48018: PUSH
48019: LD_INT 6
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 6
48031: PUSH
48032: LD_INT 1
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: LIST
48045: LIST
48046: LIST
48047: LIST
48048: LIST
48049: LIST
48050: LIST
48051: LIST
48052: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48053: LD_ADDR_VAR 0 31
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: LD_INT 2
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 3
48070: PUSH
48071: LD_INT 3
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: LD_INT 3
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 4
48090: PUSH
48091: LD_INT 3
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 4
48100: PUSH
48101: LD_INT 4
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 3
48110: PUSH
48111: LD_INT 4
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 5
48120: PUSH
48121: LD_INT 4
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 5
48130: PUSH
48131: LD_INT 5
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 4
48140: PUSH
48141: LD_INT 5
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 6
48150: PUSH
48151: LD_INT 5
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 6
48160: PUSH
48161: LD_INT 6
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PUSH
48168: LD_INT 5
48170: PUSH
48171: LD_INT 6
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48192: LD_ADDR_VAR 0 32
48196: PUSH
48197: LD_INT 1
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: EMPTY
48204: LIST
48205: LIST
48206: PUSH
48207: LD_INT 0
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 1
48219: NEG
48220: PUSH
48221: LD_INT 2
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 1
48230: PUSH
48231: LD_INT 4
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 0
48240: PUSH
48241: LD_INT 4
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 1
48250: NEG
48251: PUSH
48252: LD_INT 3
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 5
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 5
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: NEG
48282: PUSH
48283: LD_INT 4
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 6
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 0
48302: PUSH
48303: LD_INT 6
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: LD_INT 5
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: EMPTY
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48335: LD_ADDR_VAR 0 33
48339: PUSH
48340: LD_INT 2
48342: NEG
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: LD_INT 0
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 3
48364: NEG
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 4
48387: NEG
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: EMPTY
48393: LIST
48394: LIST
48395: PUSH
48396: LD_INT 4
48398: NEG
48399: PUSH
48400: LD_INT 1
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 4
48410: NEG
48411: PUSH
48412: LD_INT 1
48414: PUSH
48415: EMPTY
48416: LIST
48417: LIST
48418: PUSH
48419: LD_INT 5
48421: NEG
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: EMPTY
48427: LIST
48428: LIST
48429: PUSH
48430: LD_INT 5
48432: NEG
48433: PUSH
48434: LD_INT 1
48436: NEG
48437: PUSH
48438: EMPTY
48439: LIST
48440: LIST
48441: PUSH
48442: LD_INT 5
48444: NEG
48445: PUSH
48446: LD_INT 1
48448: PUSH
48449: EMPTY
48450: LIST
48451: LIST
48452: PUSH
48453: LD_INT 6
48455: NEG
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 6
48466: NEG
48467: PUSH
48468: LD_INT 1
48470: NEG
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: LIST
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: LIST
48488: LIST
48489: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48490: LD_ADDR_VAR 0 34
48494: PUSH
48495: LD_INT 2
48497: NEG
48498: PUSH
48499: LD_INT 3
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 3
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 3
48521: NEG
48522: PUSH
48523: LD_INT 3
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 3
48533: NEG
48534: PUSH
48535: LD_INT 4
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 4
48545: NEG
48546: PUSH
48547: LD_INT 3
48549: NEG
48550: PUSH
48551: EMPTY
48552: LIST
48553: LIST
48554: PUSH
48555: LD_INT 4
48557: NEG
48558: PUSH
48559: LD_INT 4
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 4
48569: NEG
48570: PUSH
48571: LD_INT 5
48573: NEG
48574: PUSH
48575: EMPTY
48576: LIST
48577: LIST
48578: PUSH
48579: LD_INT 5
48581: NEG
48582: PUSH
48583: LD_INT 4
48585: NEG
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 5
48593: NEG
48594: PUSH
48595: LD_INT 5
48597: NEG
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: LD_INT 5
48605: NEG
48606: PUSH
48607: LD_INT 6
48609: NEG
48610: PUSH
48611: EMPTY
48612: LIST
48613: LIST
48614: PUSH
48615: LD_INT 6
48617: NEG
48618: PUSH
48619: LD_INT 5
48621: NEG
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: LD_INT 6
48629: NEG
48630: PUSH
48631: LD_INT 6
48633: NEG
48634: PUSH
48635: EMPTY
48636: LIST
48637: LIST
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48653: LD_ADDR_VAR 0 41
48657: PUSH
48658: LD_INT 0
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 1
48671: NEG
48672: PUSH
48673: LD_INT 3
48675: NEG
48676: PUSH
48677: EMPTY
48678: LIST
48679: LIST
48680: PUSH
48681: LD_INT 1
48683: PUSH
48684: LD_INT 2
48686: NEG
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: LIST
48696: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48697: LD_ADDR_VAR 0 42
48701: PUSH
48702: LD_INT 2
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 2
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 3
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: LIST
48737: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48738: LD_ADDR_VAR 0 43
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 2
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 3
48755: PUSH
48756: LD_INT 2
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 3
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: LIST
48777: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48778: LD_ADDR_VAR 0 44
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: LD_INT 3
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: PUSH
48803: LD_INT 1
48805: NEG
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: LIST
48818: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48819: LD_ADDR_VAR 0 45
48823: PUSH
48824: LD_INT 2
48826: NEG
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 3
48848: NEG
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48863: LD_ADDR_VAR 0 46
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: NEG
48883: PUSH
48884: LD_INT 3
48886: NEG
48887: PUSH
48888: EMPTY
48889: LIST
48890: LIST
48891: PUSH
48892: LD_INT 3
48894: NEG
48895: PUSH
48896: LD_INT 2
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: LIST
48908: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48909: LD_ADDR_VAR 0 47
48913: PUSH
48914: LD_INT 2
48916: NEG
48917: PUSH
48918: LD_INT 3
48920: NEG
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 1
48928: NEG
48929: PUSH
48930: LD_INT 3
48932: NEG
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48942: LD_ADDR_VAR 0 48
48946: PUSH
48947: LD_INT 1
48949: PUSH
48950: LD_INT 2
48952: NEG
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 2
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48973: LD_ADDR_VAR 0 49
48977: PUSH
48978: LD_INT 3
48980: PUSH
48981: LD_INT 1
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: LD_INT 3
48990: PUSH
48991: LD_INT 2
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49002: LD_ADDR_VAR 0 50
49006: PUSH
49007: LD_INT 2
49009: PUSH
49010: LD_INT 3
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: LD_INT 3
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: EMPTY
49028: LIST
49029: LIST
49030: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49031: LD_ADDR_VAR 0 51
49035: PUSH
49036: LD_INT 1
49038: NEG
49039: PUSH
49040: LD_INT 2
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 2
49049: NEG
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49062: LD_ADDR_VAR 0 52
49066: PUSH
49067: LD_INT 3
49069: NEG
49070: PUSH
49071: LD_INT 1
49073: NEG
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: LD_INT 2
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49095: LD_ADDR_VAR 0 53
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: LD_INT 3
49106: NEG
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 0
49114: PUSH
49115: LD_INT 3
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: PUSH
49126: LD_INT 2
49128: NEG
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49139: LD_ADDR_VAR 0 54
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 1
49149: NEG
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 3
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 3
49167: PUSH
49168: LD_INT 1
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49180: LD_ADDR_VAR 0 55
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: LD_INT 2
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 3
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: EMPTY
49202: LIST
49203: LIST
49204: PUSH
49205: LD_INT 2
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: LIST
49219: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49220: LD_ADDR_VAR 0 56
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 3
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 0
49237: PUSH
49238: LD_INT 3
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 1
49247: NEG
49248: PUSH
49249: LD_INT 2
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: LIST
49260: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49261: LD_ADDR_VAR 0 57
49265: PUSH
49266: LD_INT 2
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: LD_INT 3
49279: NEG
49280: PUSH
49281: LD_INT 0
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 3
49290: NEG
49291: PUSH
49292: LD_INT 1
49294: NEG
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49305: LD_ADDR_VAR 0 58
49309: PUSH
49310: LD_INT 2
49312: NEG
49313: PUSH
49314: LD_INT 3
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 3
49324: NEG
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 3
49336: NEG
49337: PUSH
49338: LD_INT 3
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49351: LD_ADDR_VAR 0 59
49355: PUSH
49356: LD_INT 1
49358: NEG
49359: PUSH
49360: LD_INT 2
49362: NEG
49363: PUSH
49364: EMPTY
49365: LIST
49366: LIST
49367: PUSH
49368: LD_INT 0
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: LD_INT 1
49384: NEG
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: LIST
49394: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49395: LD_ADDR_VAR 0 60
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: LD_INT 1
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 2
49413: PUSH
49414: LD_INT 0
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 2
49423: PUSH
49424: LD_INT 1
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49436: LD_ADDR_VAR 0 61
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 2
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: LIST
49475: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49476: LD_ADDR_VAR 0 62
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: EMPTY
49488: LIST
49489: LIST
49490: PUSH
49491: LD_INT 0
49493: PUSH
49494: LD_INT 2
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: PUSH
49501: LD_INT 1
49503: NEG
49504: PUSH
49505: LD_INT 1
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: LIST
49516: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49517: LD_ADDR_VAR 0 63
49521: PUSH
49522: LD_INT 1
49524: NEG
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 2
49535: NEG
49536: PUSH
49537: LD_INT 0
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 2
49546: NEG
49547: PUSH
49548: LD_INT 1
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49561: LD_ADDR_VAR 0 64
49565: PUSH
49566: LD_INT 1
49568: NEG
49569: PUSH
49570: LD_INT 2
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: LD_INT 1
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 2
49592: NEG
49593: PUSH
49594: LD_INT 2
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: LIST
49606: ST_TO_ADDR
// end ; 2 :
49607: GO 52873
49609: LD_INT 2
49611: DOUBLE
49612: EQUAL
49613: IFTRUE 49617
49615: GO 52872
49617: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49618: LD_ADDR_VAR 0 29
49622: PUSH
49623: LD_INT 4
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 4
49635: PUSH
49636: LD_INT 1
49638: NEG
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 5
49646: PUSH
49647: LD_INT 0
49649: PUSH
49650: EMPTY
49651: LIST
49652: LIST
49653: PUSH
49654: LD_INT 5
49656: PUSH
49657: LD_INT 1
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 4
49666: PUSH
49667: LD_INT 1
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 3
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 3
49686: PUSH
49687: LD_INT 1
49689: NEG
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: LD_INT 3
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 5
49708: PUSH
49709: LD_INT 2
49711: PUSH
49712: EMPTY
49713: LIST
49714: LIST
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: LD_INT 3
49721: PUSH
49722: EMPTY
49723: LIST
49724: LIST
49725: PUSH
49726: LD_INT 3
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 4
49738: PUSH
49739: LD_INT 3
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 4
49748: PUSH
49749: LD_INT 4
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: LD_INT 4
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: PUSH
49769: LD_INT 3
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 2
49778: PUSH
49779: LD_INT 2
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 4
49788: PUSH
49789: LD_INT 2
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 2
49798: PUSH
49799: LD_INT 4
49801: PUSH
49802: EMPTY
49803: LIST
49804: LIST
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: LD_INT 4
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 1
49828: PUSH
49829: LD_INT 4
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: LD_INT 1
49838: PUSH
49839: LD_INT 5
49841: PUSH
49842: EMPTY
49843: LIST
49844: LIST
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 5
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: NEG
49859: PUSH
49860: LD_INT 4
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 3
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 2
49880: PUSH
49881: LD_INT 5
49883: PUSH
49884: EMPTY
49885: LIST
49886: LIST
49887: PUSH
49888: LD_INT 2
49890: NEG
49891: PUSH
49892: LD_INT 3
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: NEG
49902: PUSH
49903: LD_INT 0
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: PUSH
49910: LD_INT 3
49912: NEG
49913: PUSH
49914: LD_INT 1
49916: NEG
49917: PUSH
49918: EMPTY
49919: LIST
49920: LIST
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 3
49946: NEG
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 4
49957: NEG
49958: PUSH
49959: LD_INT 0
49961: PUSH
49962: EMPTY
49963: LIST
49964: LIST
49965: PUSH
49966: LD_INT 4
49968: NEG
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: PUSH
49978: LD_INT 4
49980: NEG
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 2
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 4
50003: NEG
50004: PUSH
50005: LD_INT 4
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 4
50015: NEG
50016: PUSH
50017: LD_INT 5
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: LD_INT 4
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 4
50051: NEG
50052: PUSH
50053: LD_INT 3
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 5
50063: NEG
50064: PUSH
50065: LD_INT 4
50067: NEG
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 5
50075: NEG
50076: PUSH
50077: LD_INT 5
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 3
50087: NEG
50088: PUSH
50089: LD_INT 5
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 5
50099: NEG
50100: PUSH
50101: LD_INT 3
50103: NEG
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: LIST
50137: LIST
50138: LIST
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50156: LD_ADDR_VAR 0 30
50160: PUSH
50161: LD_INT 4
50163: PUSH
50164: LD_INT 4
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 4
50173: PUSH
50174: LD_INT 3
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 5
50183: PUSH
50184: LD_INT 4
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 5
50193: PUSH
50194: LD_INT 5
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 4
50203: PUSH
50204: LD_INT 5
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: LD_INT 4
50216: PUSH
50217: EMPTY
50218: LIST
50219: LIST
50220: PUSH
50221: LD_INT 3
50223: PUSH
50224: LD_INT 3
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 5
50233: PUSH
50234: LD_INT 3
50236: PUSH
50237: EMPTY
50238: LIST
50239: LIST
50240: PUSH
50241: LD_INT 3
50243: PUSH
50244: LD_INT 5
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 0
50253: PUSH
50254: LD_INT 3
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: PUSH
50261: LD_INT 0
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 1
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 4
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 0
50293: PUSH
50294: LD_INT 4
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 1
50303: NEG
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 2
50325: PUSH
50326: LD_INT 4
50328: PUSH
50329: EMPTY
50330: LIST
50331: LIST
50332: PUSH
50333: LD_INT 2
50335: NEG
50336: PUSH
50337: LD_INT 2
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: PUSH
50344: LD_INT 4
50346: NEG
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 4
50357: NEG
50358: PUSH
50359: LD_INT 1
50361: NEG
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: NEG
50370: PUSH
50371: LD_INT 0
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 3
50380: NEG
50381: PUSH
50382: LD_INT 1
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 4
50391: NEG
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 5
50402: NEG
50403: PUSH
50404: LD_INT 0
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 5
50413: NEG
50414: PUSH
50415: LD_INT 1
50417: NEG
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 5
50425: NEG
50426: PUSH
50427: LD_INT 2
50429: NEG
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 3
50437: NEG
50438: PUSH
50439: LD_INT 2
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 3
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 3
50460: NEG
50461: PUSH
50462: LD_INT 4
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 2
50472: NEG
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: LD_INT 2
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 3
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 4
50508: NEG
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 4
50520: NEG
50521: PUSH
50522: LD_INT 4
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 4
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 4
50544: NEG
50545: PUSH
50546: LD_INT 2
50548: NEG
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 4
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: LD_INT 5
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 1
50578: PUSH
50579: LD_INT 4
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: PUSH
50590: LD_INT 3
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: EMPTY
50606: LIST
50607: LIST
50608: PUSH
50609: LD_INT 1
50611: NEG
50612: PUSH
50613: LD_INT 4
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: LD_INT 5
50627: NEG
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: PUSH
50636: LD_INT 3
50638: NEG
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 2
50646: NEG
50647: PUSH
50648: LD_INT 5
50650: NEG
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50703: LD_ADDR_VAR 0 31
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: LD_INT 4
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 0
50720: PUSH
50721: LD_INT 3
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 4
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: LD_INT 5
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 0
50750: PUSH
50751: LD_INT 5
50753: PUSH
50754: EMPTY
50755: LIST
50756: LIST
50757: PUSH
50758: LD_INT 1
50760: NEG
50761: PUSH
50762: LD_INT 4
50764: PUSH
50765: EMPTY
50766: LIST
50767: LIST
50768: PUSH
50769: LD_INT 1
50771: NEG
50772: PUSH
50773: LD_INT 3
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 2
50782: PUSH
50783: LD_INT 5
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 2
50792: NEG
50793: PUSH
50794: LD_INT 3
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 3
50803: NEG
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 3
50814: NEG
50815: PUSH
50816: LD_INT 1
50818: NEG
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 2
50826: NEG
50827: PUSH
50828: LD_INT 0
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 2
50837: NEG
50838: PUSH
50839: LD_INT 1
50841: PUSH
50842: EMPTY
50843: LIST
50844: LIST
50845: PUSH
50846: LD_INT 3
50848: NEG
50849: PUSH
50850: LD_INT 1
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 4
50859: NEG
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 4
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 4
50882: NEG
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: LD_INT 2
50894: NEG
50895: PUSH
50896: LD_INT 2
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 4
50905: NEG
50906: PUSH
50907: LD_INT 4
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 4
50917: NEG
50918: PUSH
50919: LD_INT 5
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: LD_INT 4
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 3
50941: NEG
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 4
50953: NEG
50954: PUSH
50955: LD_INT 3
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 5
50965: NEG
50966: PUSH
50967: LD_INT 4
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 5
50977: NEG
50978: PUSH
50979: LD_INT 5
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 3
50989: NEG
50990: PUSH
50991: LD_INT 5
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 5
51001: NEG
51002: PUSH
51003: LD_INT 3
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 0
51013: PUSH
51014: LD_INT 3
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 0
51024: PUSH
51025: LD_INT 4
51027: NEG
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: LD_INT 3
51038: NEG
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: PUSH
51044: LD_INT 1
51046: PUSH
51047: LD_INT 2
51049: NEG
51050: PUSH
51051: EMPTY
51052: LIST
51053: LIST
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: LD_INT 2
51060: NEG
51061: PUSH
51062: EMPTY
51063: LIST
51064: LIST
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: LD_INT 3
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: PUSH
51082: LD_INT 4
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: PUSH
51093: LD_INT 2
51095: NEG
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: NEG
51104: PUSH
51105: LD_INT 4
51107: NEG
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 4
51115: PUSH
51116: LD_INT 0
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 4
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 5
51136: PUSH
51137: LD_INT 0
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: LD_INT 5
51146: PUSH
51147: LD_INT 1
51149: PUSH
51150: EMPTY
51151: LIST
51152: LIST
51153: PUSH
51154: LD_INT 4
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: EMPTY
51161: LIST
51162: LIST
51163: PUSH
51164: LD_INT 3
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: PUSH
51177: LD_INT 1
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: LD_INT 2
51190: NEG
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 5
51198: PUSH
51199: LD_INT 2
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: LIST
51216: LIST
51217: LIST
51218: LIST
51219: LIST
51220: LIST
51221: LIST
51222: LIST
51223: LIST
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51253: LD_ADDR_VAR 0 32
51257: PUSH
51258: LD_INT 4
51260: NEG
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 4
51271: NEG
51272: PUSH
51273: LD_INT 1
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: NEG
51284: PUSH
51285: LD_INT 0
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: NEG
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 4
51305: NEG
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 5
51316: NEG
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 5
51327: NEG
51328: PUSH
51329: LD_INT 1
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 5
51339: NEG
51340: PUSH
51341: LD_INT 2
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: LD_INT 3
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: NEG
51375: PUSH
51376: LD_INT 4
51378: NEG
51379: PUSH
51380: EMPTY
51381: LIST
51382: LIST
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: LD_INT 3
51390: NEG
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: PUSH
51396: LD_INT 2
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: NEG
51403: PUSH
51404: EMPTY
51405: LIST
51406: LIST
51407: PUSH
51408: LD_INT 3
51410: NEG
51411: PUSH
51412: LD_INT 2
51414: NEG
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 4
51422: NEG
51423: PUSH
51424: LD_INT 3
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 4
51434: NEG
51435: PUSH
51436: LD_INT 4
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 2
51446: NEG
51447: PUSH
51448: LD_INT 4
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 4
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 0
51470: PUSH
51471: LD_INT 4
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: LD_INT 5
51484: NEG
51485: PUSH
51486: EMPTY
51487: LIST
51488: LIST
51489: PUSH
51490: LD_INT 1
51492: PUSH
51493: LD_INT 4
51495: NEG
51496: PUSH
51497: EMPTY
51498: LIST
51499: LIST
51500: PUSH
51501: LD_INT 1
51503: PUSH
51504: LD_INT 3
51506: NEG
51507: PUSH
51508: EMPTY
51509: LIST
51510: LIST
51511: PUSH
51512: LD_INT 0
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: NEG
51526: PUSH
51527: LD_INT 4
51529: NEG
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 5
51541: NEG
51542: PUSH
51543: EMPTY
51544: LIST
51545: LIST
51546: PUSH
51547: LD_INT 2
51549: PUSH
51550: LD_INT 3
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: LD_INT 5
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 3
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 3
51582: PUSH
51583: LD_INT 1
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 4
51593: PUSH
51594: LD_INT 0
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 4
51603: PUSH
51604: LD_INT 1
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: LD_INT 3
51613: PUSH
51614: LD_INT 1
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: LD_INT 1
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 2
51644: PUSH
51645: LD_INT 2
51647: NEG
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 4
51655: PUSH
51656: LD_INT 2
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: LD_INT 4
51665: PUSH
51666: LD_INT 4
51668: PUSH
51669: EMPTY
51670: LIST
51671: LIST
51672: PUSH
51673: LD_INT 4
51675: PUSH
51676: LD_INT 3
51678: PUSH
51679: EMPTY
51680: LIST
51681: LIST
51682: PUSH
51683: LD_INT 5
51685: PUSH
51686: LD_INT 4
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 5
51695: PUSH
51696: LD_INT 5
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 4
51705: PUSH
51706: LD_INT 5
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: PUSH
51713: LD_INT 3
51715: PUSH
51716: LD_INT 4
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 3
51725: PUSH
51726: LD_INT 3
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 5
51735: PUSH
51736: LD_INT 3
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: LD_INT 5
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: LIST
51761: LIST
51762: LIST
51763: LIST
51764: LIST
51765: LIST
51766: LIST
51767: LIST
51768: LIST
51769: LIST
51770: LIST
51771: LIST
51772: LIST
51773: LIST
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51800: LD_ADDR_VAR 0 33
51804: PUSH
51805: LD_INT 4
51807: NEG
51808: PUSH
51809: LD_INT 4
51811: NEG
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 4
51819: NEG
51820: PUSH
51821: LD_INT 5
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 3
51831: NEG
51832: PUSH
51833: LD_INT 4
51835: NEG
51836: PUSH
51837: EMPTY
51838: LIST
51839: LIST
51840: PUSH
51841: LD_INT 3
51843: NEG
51844: PUSH
51845: LD_INT 3
51847: NEG
51848: PUSH
51849: EMPTY
51850: LIST
51851: LIST
51852: PUSH
51853: LD_INT 4
51855: NEG
51856: PUSH
51857: LD_INT 3
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 5
51867: NEG
51868: PUSH
51869: LD_INT 4
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 5
51879: NEG
51880: PUSH
51881: LD_INT 5
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 3
51891: NEG
51892: PUSH
51893: LD_INT 5
51895: NEG
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 5
51903: NEG
51904: PUSH
51905: LD_INT 3
51907: NEG
51908: PUSH
51909: EMPTY
51910: LIST
51911: LIST
51912: PUSH
51913: LD_INT 0
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 0
51926: PUSH
51927: LD_INT 4
51929: NEG
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 1
51937: PUSH
51938: LD_INT 3
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 1
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 0
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 1
51970: NEG
51971: PUSH
51972: LD_INT 3
51974: NEG
51975: PUSH
51976: EMPTY
51977: LIST
51978: LIST
51979: PUSH
51980: LD_INT 1
51982: NEG
51983: PUSH
51984: LD_INT 4
51986: NEG
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 2
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 2
52005: NEG
52006: PUSH
52007: LD_INT 4
52009: NEG
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PUSH
52015: LD_INT 4
52017: PUSH
52018: LD_INT 0
52020: PUSH
52021: EMPTY
52022: LIST
52023: LIST
52024: PUSH
52025: LD_INT 4
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 5
52038: PUSH
52039: LD_INT 0
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 5
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 4
52058: PUSH
52059: LD_INT 1
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 3
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: LD_INT 1
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: LD_INT 2
52092: NEG
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 5
52100: PUSH
52101: LD_INT 2
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PUSH
52108: LD_INT 3
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: EMPTY
52115: LIST
52116: LIST
52117: PUSH
52118: LD_INT 3
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 4
52130: PUSH
52131: LD_INT 3
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 4
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 3
52150: PUSH
52151: LD_INT 4
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 4
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: PUSH
52191: LD_INT 4
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 0
52200: PUSH
52201: LD_INT 4
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 0
52210: PUSH
52211: LD_INT 3
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 1
52220: PUSH
52221: LD_INT 4
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 5
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 5
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 4
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 1
52261: NEG
52262: PUSH
52263: LD_INT 3
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: LD_INT 5
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: LD_INT 2
52282: NEG
52283: PUSH
52284: LD_INT 3
52286: PUSH
52287: EMPTY
52288: LIST
52289: LIST
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52338: LD_ADDR_VAR 0 34
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: LD_INT 4
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 0
52356: PUSH
52357: LD_INT 5
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 1
52367: PUSH
52368: LD_INT 4
52370: NEG
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: LD_INT 3
52381: NEG
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 0
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 1
52400: NEG
52401: PUSH
52402: LD_INT 4
52404: NEG
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 5
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 2
52424: PUSH
52425: LD_INT 3
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: NEG
52436: PUSH
52437: LD_INT 5
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: PUSH
52448: LD_INT 0
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 3
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 4
52468: PUSH
52469: LD_INT 0
52471: PUSH
52472: EMPTY
52473: LIST
52474: LIST
52475: PUSH
52476: LD_INT 4
52478: PUSH
52479: LD_INT 1
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: LD_INT 1
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: PUSH
52496: LD_INT 2
52498: PUSH
52499: LD_INT 0
52501: PUSH
52502: EMPTY
52503: LIST
52504: LIST
52505: PUSH
52506: LD_INT 2
52508: PUSH
52509: LD_INT 1
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 2
52519: PUSH
52520: LD_INT 2
52522: NEG
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 4
52530: PUSH
52531: LD_INT 2
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: LD_INT 4
52540: PUSH
52541: LD_INT 4
52543: PUSH
52544: EMPTY
52545: LIST
52546: LIST
52547: PUSH
52548: LD_INT 4
52550: PUSH
52551: LD_INT 3
52553: PUSH
52554: EMPTY
52555: LIST
52556: LIST
52557: PUSH
52558: LD_INT 5
52560: PUSH
52561: LD_INT 4
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 5
52570: PUSH
52571: LD_INT 5
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 4
52580: PUSH
52581: LD_INT 5
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 3
52590: PUSH
52591: LD_INT 4
52593: PUSH
52594: EMPTY
52595: LIST
52596: LIST
52597: PUSH
52598: LD_INT 3
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: EMPTY
52605: LIST
52606: LIST
52607: PUSH
52608: LD_INT 5
52610: PUSH
52611: LD_INT 3
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 3
52620: PUSH
52621: LD_INT 5
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 0
52630: PUSH
52631: LD_INT 3
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 2
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: PUSH
52651: LD_INT 3
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: LD_INT 1
52660: PUSH
52661: LD_INT 4
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 0
52670: PUSH
52671: LD_INT 4
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 1
52680: NEG
52681: PUSH
52682: LD_INT 3
52684: PUSH
52685: EMPTY
52686: LIST
52687: LIST
52688: PUSH
52689: LD_INT 1
52691: NEG
52692: PUSH
52693: LD_INT 2
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: PUSH
52703: LD_INT 4
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 2
52712: NEG
52713: PUSH
52714: LD_INT 2
52716: PUSH
52717: EMPTY
52718: LIST
52719: LIST
52720: PUSH
52721: LD_INT 4
52723: NEG
52724: PUSH
52725: LD_INT 0
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 4
52734: NEG
52735: PUSH
52736: LD_INT 1
52738: NEG
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 3
52746: NEG
52747: PUSH
52748: LD_INT 0
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 3
52757: NEG
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 4
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: PUSH
52773: EMPTY
52774: LIST
52775: LIST
52776: PUSH
52777: LD_INT 5
52779: NEG
52780: PUSH
52781: LD_INT 0
52783: PUSH
52784: EMPTY
52785: LIST
52786: LIST
52787: PUSH
52788: LD_INT 5
52790: NEG
52791: PUSH
52792: LD_INT 1
52794: NEG
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 5
52802: NEG
52803: PUSH
52804: LD_INT 2
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 3
52814: NEG
52815: PUSH
52816: LD_INT 2
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: LIST
52831: LIST
52832: LIST
52833: LIST
52834: LIST
52835: LIST
52836: LIST
52837: LIST
52838: LIST
52839: LIST
52840: LIST
52841: LIST
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: LIST
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: ST_TO_ADDR
// end ; end ;
52870: GO 52873
52872: POP
// case btype of b_depot , b_warehouse :
52873: LD_VAR 0 1
52877: PUSH
52878: LD_INT 0
52880: DOUBLE
52881: EQUAL
52882: IFTRUE 52892
52884: LD_INT 1
52886: DOUBLE
52887: EQUAL
52888: IFTRUE 52892
52890: GO 53093
52892: POP
// case nation of nation_american :
52893: LD_VAR 0 5
52897: PUSH
52898: LD_INT 1
52900: DOUBLE
52901: EQUAL
52902: IFTRUE 52906
52904: GO 52962
52906: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52907: LD_ADDR_VAR 0 9
52911: PUSH
52912: LD_VAR 0 11
52916: PUSH
52917: LD_VAR 0 12
52921: PUSH
52922: LD_VAR 0 13
52926: PUSH
52927: LD_VAR 0 14
52931: PUSH
52932: LD_VAR 0 15
52936: PUSH
52937: LD_VAR 0 16
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: PUSH
52950: LD_VAR 0 4
52954: PUSH
52955: LD_INT 1
52957: PLUS
52958: ARRAY
52959: ST_TO_ADDR
52960: GO 53091
52962: LD_INT 2
52964: DOUBLE
52965: EQUAL
52966: IFTRUE 52970
52968: GO 53026
52970: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52971: LD_ADDR_VAR 0 9
52975: PUSH
52976: LD_VAR 0 17
52980: PUSH
52981: LD_VAR 0 18
52985: PUSH
52986: LD_VAR 0 19
52990: PUSH
52991: LD_VAR 0 20
52995: PUSH
52996: LD_VAR 0 21
53000: PUSH
53001: LD_VAR 0 22
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: LIST
53010: LIST
53011: LIST
53012: LIST
53013: PUSH
53014: LD_VAR 0 4
53018: PUSH
53019: LD_INT 1
53021: PLUS
53022: ARRAY
53023: ST_TO_ADDR
53024: GO 53091
53026: LD_INT 3
53028: DOUBLE
53029: EQUAL
53030: IFTRUE 53034
53032: GO 53090
53034: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53035: LD_ADDR_VAR 0 9
53039: PUSH
53040: LD_VAR 0 23
53044: PUSH
53045: LD_VAR 0 24
53049: PUSH
53050: LD_VAR 0 25
53054: PUSH
53055: LD_VAR 0 26
53059: PUSH
53060: LD_VAR 0 27
53064: PUSH
53065: LD_VAR 0 28
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: PUSH
53078: LD_VAR 0 4
53082: PUSH
53083: LD_INT 1
53085: PLUS
53086: ARRAY
53087: ST_TO_ADDR
53088: GO 53091
53090: POP
53091: GO 53646
53093: LD_INT 2
53095: DOUBLE
53096: EQUAL
53097: IFTRUE 53107
53099: LD_INT 3
53101: DOUBLE
53102: EQUAL
53103: IFTRUE 53107
53105: GO 53163
53107: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53108: LD_ADDR_VAR 0 9
53112: PUSH
53113: LD_VAR 0 29
53117: PUSH
53118: LD_VAR 0 30
53122: PUSH
53123: LD_VAR 0 31
53127: PUSH
53128: LD_VAR 0 32
53132: PUSH
53133: LD_VAR 0 33
53137: PUSH
53138: LD_VAR 0 34
53142: PUSH
53143: EMPTY
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: PUSH
53151: LD_VAR 0 4
53155: PUSH
53156: LD_INT 1
53158: PLUS
53159: ARRAY
53160: ST_TO_ADDR
53161: GO 53646
53163: LD_INT 16
53165: DOUBLE
53166: EQUAL
53167: IFTRUE 53225
53169: LD_INT 17
53171: DOUBLE
53172: EQUAL
53173: IFTRUE 53225
53175: LD_INT 18
53177: DOUBLE
53178: EQUAL
53179: IFTRUE 53225
53181: LD_INT 19
53183: DOUBLE
53184: EQUAL
53185: IFTRUE 53225
53187: LD_INT 22
53189: DOUBLE
53190: EQUAL
53191: IFTRUE 53225
53193: LD_INT 20
53195: DOUBLE
53196: EQUAL
53197: IFTRUE 53225
53199: LD_INT 21
53201: DOUBLE
53202: EQUAL
53203: IFTRUE 53225
53205: LD_INT 23
53207: DOUBLE
53208: EQUAL
53209: IFTRUE 53225
53211: LD_INT 24
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53225
53217: LD_INT 25
53219: DOUBLE
53220: EQUAL
53221: IFTRUE 53225
53223: GO 53281
53225: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53226: LD_ADDR_VAR 0 9
53230: PUSH
53231: LD_VAR 0 35
53235: PUSH
53236: LD_VAR 0 36
53240: PUSH
53241: LD_VAR 0 37
53245: PUSH
53246: LD_VAR 0 38
53250: PUSH
53251: LD_VAR 0 39
53255: PUSH
53256: LD_VAR 0 40
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: LIST
53267: LIST
53268: PUSH
53269: LD_VAR 0 4
53273: PUSH
53274: LD_INT 1
53276: PLUS
53277: ARRAY
53278: ST_TO_ADDR
53279: GO 53646
53281: LD_INT 6
53283: DOUBLE
53284: EQUAL
53285: IFTRUE 53337
53287: LD_INT 7
53289: DOUBLE
53290: EQUAL
53291: IFTRUE 53337
53293: LD_INT 8
53295: DOUBLE
53296: EQUAL
53297: IFTRUE 53337
53299: LD_INT 13
53301: DOUBLE
53302: EQUAL
53303: IFTRUE 53337
53305: LD_INT 12
53307: DOUBLE
53308: EQUAL
53309: IFTRUE 53337
53311: LD_INT 15
53313: DOUBLE
53314: EQUAL
53315: IFTRUE 53337
53317: LD_INT 11
53319: DOUBLE
53320: EQUAL
53321: IFTRUE 53337
53323: LD_INT 14
53325: DOUBLE
53326: EQUAL
53327: IFTRUE 53337
53329: LD_INT 10
53331: DOUBLE
53332: EQUAL
53333: IFTRUE 53337
53335: GO 53393
53337: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53338: LD_ADDR_VAR 0 9
53342: PUSH
53343: LD_VAR 0 41
53347: PUSH
53348: LD_VAR 0 42
53352: PUSH
53353: LD_VAR 0 43
53357: PUSH
53358: LD_VAR 0 44
53362: PUSH
53363: LD_VAR 0 45
53367: PUSH
53368: LD_VAR 0 46
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: PUSH
53381: LD_VAR 0 4
53385: PUSH
53386: LD_INT 1
53388: PLUS
53389: ARRAY
53390: ST_TO_ADDR
53391: GO 53646
53393: LD_INT 36
53395: DOUBLE
53396: EQUAL
53397: IFTRUE 53401
53399: GO 53457
53401: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53402: LD_ADDR_VAR 0 9
53406: PUSH
53407: LD_VAR 0 47
53411: PUSH
53412: LD_VAR 0 48
53416: PUSH
53417: LD_VAR 0 49
53421: PUSH
53422: LD_VAR 0 50
53426: PUSH
53427: LD_VAR 0 51
53431: PUSH
53432: LD_VAR 0 52
53436: PUSH
53437: EMPTY
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: PUSH
53445: LD_VAR 0 4
53449: PUSH
53450: LD_INT 1
53452: PLUS
53453: ARRAY
53454: ST_TO_ADDR
53455: GO 53646
53457: LD_INT 4
53459: DOUBLE
53460: EQUAL
53461: IFTRUE 53483
53463: LD_INT 5
53465: DOUBLE
53466: EQUAL
53467: IFTRUE 53483
53469: LD_INT 34
53471: DOUBLE
53472: EQUAL
53473: IFTRUE 53483
53475: LD_INT 37
53477: DOUBLE
53478: EQUAL
53479: IFTRUE 53483
53481: GO 53539
53483: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53484: LD_ADDR_VAR 0 9
53488: PUSH
53489: LD_VAR 0 53
53493: PUSH
53494: LD_VAR 0 54
53498: PUSH
53499: LD_VAR 0 55
53503: PUSH
53504: LD_VAR 0 56
53508: PUSH
53509: LD_VAR 0 57
53513: PUSH
53514: LD_VAR 0 58
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: LIST
53523: LIST
53524: LIST
53525: LIST
53526: PUSH
53527: LD_VAR 0 4
53531: PUSH
53532: LD_INT 1
53534: PLUS
53535: ARRAY
53536: ST_TO_ADDR
53537: GO 53646
53539: LD_INT 31
53541: DOUBLE
53542: EQUAL
53543: IFTRUE 53589
53545: LD_INT 32
53547: DOUBLE
53548: EQUAL
53549: IFTRUE 53589
53551: LD_INT 33
53553: DOUBLE
53554: EQUAL
53555: IFTRUE 53589
53557: LD_INT 27
53559: DOUBLE
53560: EQUAL
53561: IFTRUE 53589
53563: LD_INT 26
53565: DOUBLE
53566: EQUAL
53567: IFTRUE 53589
53569: LD_INT 28
53571: DOUBLE
53572: EQUAL
53573: IFTRUE 53589
53575: LD_INT 29
53577: DOUBLE
53578: EQUAL
53579: IFTRUE 53589
53581: LD_INT 30
53583: DOUBLE
53584: EQUAL
53585: IFTRUE 53589
53587: GO 53645
53589: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53590: LD_ADDR_VAR 0 9
53594: PUSH
53595: LD_VAR 0 59
53599: PUSH
53600: LD_VAR 0 60
53604: PUSH
53605: LD_VAR 0 61
53609: PUSH
53610: LD_VAR 0 62
53614: PUSH
53615: LD_VAR 0 63
53619: PUSH
53620: LD_VAR 0 64
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: PUSH
53633: LD_VAR 0 4
53637: PUSH
53638: LD_INT 1
53640: PLUS
53641: ARRAY
53642: ST_TO_ADDR
53643: GO 53646
53645: POP
// temp_list2 = [ ] ;
53646: LD_ADDR_VAR 0 10
53650: PUSH
53651: EMPTY
53652: ST_TO_ADDR
// for i in temp_list do
53653: LD_ADDR_VAR 0 8
53657: PUSH
53658: LD_VAR 0 9
53662: PUSH
53663: FOR_IN
53664: IFFALSE 53716
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53666: LD_ADDR_VAR 0 10
53670: PUSH
53671: LD_VAR 0 10
53675: PUSH
53676: LD_VAR 0 8
53680: PUSH
53681: LD_INT 1
53683: ARRAY
53684: PUSH
53685: LD_VAR 0 2
53689: PLUS
53690: PUSH
53691: LD_VAR 0 8
53695: PUSH
53696: LD_INT 2
53698: ARRAY
53699: PUSH
53700: LD_VAR 0 3
53704: PLUS
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: PUSH
53710: EMPTY
53711: LIST
53712: ADD
53713: ST_TO_ADDR
53714: GO 53663
53716: POP
53717: POP
// result = temp_list2 ;
53718: LD_ADDR_VAR 0 7
53722: PUSH
53723: LD_VAR 0 10
53727: ST_TO_ADDR
// end ;
53728: LD_VAR 0 7
53732: RET
// export function EnemyInRange ( unit , dist ) ; begin
53733: LD_INT 0
53735: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53736: LD_ADDR_VAR 0 3
53740: PUSH
53741: LD_VAR 0 1
53745: PPUSH
53746: CALL_OW 255
53750: PPUSH
53751: LD_VAR 0 1
53755: PPUSH
53756: CALL_OW 250
53760: PPUSH
53761: LD_VAR 0 1
53765: PPUSH
53766: CALL_OW 251
53770: PPUSH
53771: LD_VAR 0 2
53775: PPUSH
53776: CALL 27106 0 4
53780: PUSH
53781: LD_INT 4
53783: ARRAY
53784: ST_TO_ADDR
// end ;
53785: LD_VAR 0 3
53789: RET
// export function PlayerSeeMe ( unit ) ; begin
53790: LD_INT 0
53792: PPUSH
// result := See ( your_side , unit ) ;
53793: LD_ADDR_VAR 0 2
53797: PUSH
53798: LD_OWVAR 2
53802: PPUSH
53803: LD_VAR 0 1
53807: PPUSH
53808: CALL_OW 292
53812: ST_TO_ADDR
// end ;
53813: LD_VAR 0 2
53817: RET
// export function ReverseDir ( unit ) ; begin
53818: LD_INT 0
53820: PPUSH
// if not unit then
53821: LD_VAR 0 1
53825: NOT
53826: IFFALSE 53830
// exit ;
53828: GO 53853
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53830: LD_ADDR_VAR 0 2
53834: PUSH
53835: LD_VAR 0 1
53839: PPUSH
53840: CALL_OW 254
53844: PUSH
53845: LD_INT 3
53847: PLUS
53848: PUSH
53849: LD_INT 6
53851: MOD
53852: ST_TO_ADDR
// end ;
53853: LD_VAR 0 2
53857: RET
// export function ReverseArray ( array ) ; var i ; begin
53858: LD_INT 0
53860: PPUSH
53861: PPUSH
// if not array then
53862: LD_VAR 0 1
53866: NOT
53867: IFFALSE 53871
// exit ;
53869: GO 53926
// result := [ ] ;
53871: LD_ADDR_VAR 0 2
53875: PUSH
53876: EMPTY
53877: ST_TO_ADDR
// for i := array downto 1 do
53878: LD_ADDR_VAR 0 3
53882: PUSH
53883: DOUBLE
53884: LD_VAR 0 1
53888: INC
53889: ST_TO_ADDR
53890: LD_INT 1
53892: PUSH
53893: FOR_DOWNTO
53894: IFFALSE 53924
// result := Join ( result , array [ i ] ) ;
53896: LD_ADDR_VAR 0 2
53900: PUSH
53901: LD_VAR 0 2
53905: PPUSH
53906: LD_VAR 0 1
53910: PUSH
53911: LD_VAR 0 3
53915: ARRAY
53916: PPUSH
53917: CALL 58569 0 2
53921: ST_TO_ADDR
53922: GO 53893
53924: POP
53925: POP
// end ;
53926: LD_VAR 0 2
53930: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
53931: LD_INT 0
53933: PPUSH
53934: PPUSH
53935: PPUSH
53936: PPUSH
53937: PPUSH
53938: PPUSH
// if not unit or not hexes then
53939: LD_VAR 0 1
53943: NOT
53944: PUSH
53945: LD_VAR 0 2
53949: NOT
53950: OR
53951: IFFALSE 53955
// exit ;
53953: GO 54078
// dist := 9999 ;
53955: LD_ADDR_VAR 0 5
53959: PUSH
53960: LD_INT 9999
53962: ST_TO_ADDR
// for i = 1 to hexes do
53963: LD_ADDR_VAR 0 4
53967: PUSH
53968: DOUBLE
53969: LD_INT 1
53971: DEC
53972: ST_TO_ADDR
53973: LD_VAR 0 2
53977: PUSH
53978: FOR_TO
53979: IFFALSE 54066
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53981: LD_ADDR_VAR 0 6
53985: PUSH
53986: LD_VAR 0 1
53990: PPUSH
53991: LD_VAR 0 2
53995: PUSH
53996: LD_VAR 0 4
54000: ARRAY
54001: PUSH
54002: LD_INT 1
54004: ARRAY
54005: PPUSH
54006: LD_VAR 0 2
54010: PUSH
54011: LD_VAR 0 4
54015: ARRAY
54016: PUSH
54017: LD_INT 2
54019: ARRAY
54020: PPUSH
54021: CALL_OW 297
54025: ST_TO_ADDR
// if tdist < dist then
54026: LD_VAR 0 6
54030: PUSH
54031: LD_VAR 0 5
54035: LESS
54036: IFFALSE 54064
// begin hex := hexes [ i ] ;
54038: LD_ADDR_VAR 0 8
54042: PUSH
54043: LD_VAR 0 2
54047: PUSH
54048: LD_VAR 0 4
54052: ARRAY
54053: ST_TO_ADDR
// dist := tdist ;
54054: LD_ADDR_VAR 0 5
54058: PUSH
54059: LD_VAR 0 6
54063: ST_TO_ADDR
// end ; end ;
54064: GO 53978
54066: POP
54067: POP
// result := hex ;
54068: LD_ADDR_VAR 0 3
54072: PUSH
54073: LD_VAR 0 8
54077: ST_TO_ADDR
// end ;
54078: LD_VAR 0 3
54082: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54083: LD_INT 0
54085: PPUSH
54086: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54087: LD_VAR 0 1
54091: NOT
54092: PUSH
54093: LD_VAR 0 1
54097: PUSH
54098: LD_INT 21
54100: PUSH
54101: LD_INT 2
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: LD_INT 23
54110: PUSH
54111: LD_INT 2
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: PPUSH
54122: CALL_OW 69
54126: IN
54127: NOT
54128: OR
54129: IFFALSE 54133
// exit ;
54131: GO 54180
// for i = 1 to 3 do
54133: LD_ADDR_VAR 0 3
54137: PUSH
54138: DOUBLE
54139: LD_INT 1
54141: DEC
54142: ST_TO_ADDR
54143: LD_INT 3
54145: PUSH
54146: FOR_TO
54147: IFFALSE 54178
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54149: LD_VAR 0 1
54153: PPUSH
54154: CALL_OW 250
54158: PPUSH
54159: LD_VAR 0 1
54163: PPUSH
54164: CALL_OW 251
54168: PPUSH
54169: LD_INT 1
54171: PPUSH
54172: CALL_OW 453
54176: GO 54146
54178: POP
54179: POP
// end ;
54180: LD_VAR 0 2
54184: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54185: LD_INT 0
54187: PPUSH
54188: PPUSH
54189: PPUSH
54190: PPUSH
54191: PPUSH
54192: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54193: LD_VAR 0 1
54197: NOT
54198: PUSH
54199: LD_VAR 0 2
54203: NOT
54204: OR
54205: PUSH
54206: LD_VAR 0 1
54210: PPUSH
54211: CALL_OW 314
54215: OR
54216: IFFALSE 54220
// exit ;
54218: GO 54687
// if GetLives ( i ) < 250 then
54220: LD_VAR 0 4
54224: PPUSH
54225: CALL_OW 256
54229: PUSH
54230: LD_INT 250
54232: LESS
54233: IFFALSE 54246
// begin ComAutodestruct ( i ) ;
54235: LD_VAR 0 4
54239: PPUSH
54240: CALL 54083 0 1
// exit ;
54244: GO 54687
// end ; x := GetX ( enemy_unit ) ;
54246: LD_ADDR_VAR 0 7
54250: PUSH
54251: LD_VAR 0 2
54255: PPUSH
54256: CALL_OW 250
54260: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54261: LD_ADDR_VAR 0 8
54265: PUSH
54266: LD_VAR 0 2
54270: PPUSH
54271: CALL_OW 251
54275: ST_TO_ADDR
// if not x or not y then
54276: LD_VAR 0 7
54280: NOT
54281: PUSH
54282: LD_VAR 0 8
54286: NOT
54287: OR
54288: IFFALSE 54292
// exit ;
54290: GO 54687
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54292: LD_ADDR_VAR 0 6
54296: PUSH
54297: LD_VAR 0 7
54301: PPUSH
54302: LD_INT 0
54304: PPUSH
54305: LD_INT 4
54307: PPUSH
54308: CALL_OW 272
54312: PUSH
54313: LD_VAR 0 8
54317: PPUSH
54318: LD_INT 0
54320: PPUSH
54321: LD_INT 4
54323: PPUSH
54324: CALL_OW 273
54328: PUSH
54329: EMPTY
54330: LIST
54331: LIST
54332: PUSH
54333: LD_VAR 0 7
54337: PPUSH
54338: LD_INT 1
54340: PPUSH
54341: LD_INT 4
54343: PPUSH
54344: CALL_OW 272
54348: PUSH
54349: LD_VAR 0 8
54353: PPUSH
54354: LD_INT 1
54356: PPUSH
54357: LD_INT 4
54359: PPUSH
54360: CALL_OW 273
54364: PUSH
54365: EMPTY
54366: LIST
54367: LIST
54368: PUSH
54369: LD_VAR 0 7
54373: PPUSH
54374: LD_INT 2
54376: PPUSH
54377: LD_INT 4
54379: PPUSH
54380: CALL_OW 272
54384: PUSH
54385: LD_VAR 0 8
54389: PPUSH
54390: LD_INT 2
54392: PPUSH
54393: LD_INT 4
54395: PPUSH
54396: CALL_OW 273
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_VAR 0 7
54409: PPUSH
54410: LD_INT 3
54412: PPUSH
54413: LD_INT 4
54415: PPUSH
54416: CALL_OW 272
54420: PUSH
54421: LD_VAR 0 8
54425: PPUSH
54426: LD_INT 3
54428: PPUSH
54429: LD_INT 4
54431: PPUSH
54432: CALL_OW 273
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_VAR 0 7
54445: PPUSH
54446: LD_INT 4
54448: PPUSH
54449: LD_INT 4
54451: PPUSH
54452: CALL_OW 272
54456: PUSH
54457: LD_VAR 0 8
54461: PPUSH
54462: LD_INT 4
54464: PPUSH
54465: LD_INT 4
54467: PPUSH
54468: CALL_OW 273
54472: PUSH
54473: EMPTY
54474: LIST
54475: LIST
54476: PUSH
54477: LD_VAR 0 7
54481: PPUSH
54482: LD_INT 5
54484: PPUSH
54485: LD_INT 4
54487: PPUSH
54488: CALL_OW 272
54492: PUSH
54493: LD_VAR 0 8
54497: PPUSH
54498: LD_INT 5
54500: PPUSH
54501: LD_INT 4
54503: PPUSH
54504: CALL_OW 273
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: ST_TO_ADDR
// for i = tmp downto 1 do
54521: LD_ADDR_VAR 0 4
54525: PUSH
54526: DOUBLE
54527: LD_VAR 0 6
54531: INC
54532: ST_TO_ADDR
54533: LD_INT 1
54535: PUSH
54536: FOR_DOWNTO
54537: IFFALSE 54638
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54539: LD_VAR 0 6
54543: PUSH
54544: LD_VAR 0 4
54548: ARRAY
54549: PUSH
54550: LD_INT 1
54552: ARRAY
54553: PPUSH
54554: LD_VAR 0 6
54558: PUSH
54559: LD_VAR 0 4
54563: ARRAY
54564: PUSH
54565: LD_INT 2
54567: ARRAY
54568: PPUSH
54569: CALL_OW 488
54573: NOT
54574: PUSH
54575: LD_VAR 0 6
54579: PUSH
54580: LD_VAR 0 4
54584: ARRAY
54585: PUSH
54586: LD_INT 1
54588: ARRAY
54589: PPUSH
54590: LD_VAR 0 6
54594: PUSH
54595: LD_VAR 0 4
54599: ARRAY
54600: PUSH
54601: LD_INT 2
54603: ARRAY
54604: PPUSH
54605: CALL_OW 428
54609: PUSH
54610: LD_INT 0
54612: NONEQUAL
54613: OR
54614: IFFALSE 54636
// tmp := Delete ( tmp , i ) ;
54616: LD_ADDR_VAR 0 6
54620: PUSH
54621: LD_VAR 0 6
54625: PPUSH
54626: LD_VAR 0 4
54630: PPUSH
54631: CALL_OW 3
54635: ST_TO_ADDR
54636: GO 54536
54638: POP
54639: POP
// j := GetClosestHex ( unit , tmp ) ;
54640: LD_ADDR_VAR 0 5
54644: PUSH
54645: LD_VAR 0 1
54649: PPUSH
54650: LD_VAR 0 6
54654: PPUSH
54655: CALL 53931 0 2
54659: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54660: LD_VAR 0 1
54664: PPUSH
54665: LD_VAR 0 5
54669: PUSH
54670: LD_INT 1
54672: ARRAY
54673: PPUSH
54674: LD_VAR 0 5
54678: PUSH
54679: LD_INT 2
54681: ARRAY
54682: PPUSH
54683: CALL_OW 111
// end ;
54687: LD_VAR 0 3
54691: RET
// export function PrepareApemanSoldier ( ) ; begin
54692: LD_INT 0
54694: PPUSH
// uc_nation := 0 ;
54695: LD_ADDR_OWVAR 21
54699: PUSH
54700: LD_INT 0
54702: ST_TO_ADDR
// hc_sex := sex_male ;
54703: LD_ADDR_OWVAR 27
54707: PUSH
54708: LD_INT 1
54710: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
54711: LD_ADDR_OWVAR 28
54715: PUSH
54716: LD_INT 15
54718: ST_TO_ADDR
// hc_gallery :=  ;
54719: LD_ADDR_OWVAR 33
54723: PUSH
54724: LD_STRING 
54726: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54727: LD_ADDR_OWVAR 31
54731: PUSH
54732: LD_INT 0
54734: PPUSH
54735: LD_INT 3
54737: PPUSH
54738: CALL_OW 12
54742: PUSH
54743: LD_INT 0
54745: PPUSH
54746: LD_INT 3
54748: PPUSH
54749: CALL_OW 12
54753: PUSH
54754: LD_INT 0
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: ST_TO_ADDR
// end ;
54766: LD_VAR 0 1
54770: RET
// export function PrepareApemanEngineer ( ) ; begin
54771: LD_INT 0
54773: PPUSH
// uc_nation := 0 ;
54774: LD_ADDR_OWVAR 21
54778: PUSH
54779: LD_INT 0
54781: ST_TO_ADDR
// hc_sex := sex_male ;
54782: LD_ADDR_OWVAR 27
54786: PUSH
54787: LD_INT 1
54789: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
54790: LD_ADDR_OWVAR 28
54794: PUSH
54795: LD_INT 16
54797: ST_TO_ADDR
// hc_gallery :=  ;
54798: LD_ADDR_OWVAR 33
54802: PUSH
54803: LD_STRING 
54805: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54806: LD_ADDR_OWVAR 31
54810: PUSH
54811: LD_INT 0
54813: PPUSH
54814: LD_INT 3
54816: PPUSH
54817: CALL_OW 12
54821: PUSH
54822: LD_INT 0
54824: PPUSH
54825: LD_INT 3
54827: PPUSH
54828: CALL_OW 12
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: LD_INT 0
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: ST_TO_ADDR
// end ;
54845: LD_VAR 0 1
54849: RET
// export function PrepareApeman ( agressivity ) ; begin
54850: LD_INT 0
54852: PPUSH
// uc_side := 0 ;
54853: LD_ADDR_OWVAR 20
54857: PUSH
54858: LD_INT 0
54860: ST_TO_ADDR
// uc_nation := 0 ;
54861: LD_ADDR_OWVAR 21
54865: PUSH
54866: LD_INT 0
54868: ST_TO_ADDR
// hc_sex := sex_male ;
54869: LD_ADDR_OWVAR 27
54873: PUSH
54874: LD_INT 1
54876: ST_TO_ADDR
// hc_class := class_apeman ;
54877: LD_ADDR_OWVAR 28
54881: PUSH
54882: LD_INT 12
54884: ST_TO_ADDR
// hc_gallery :=  ;
54885: LD_ADDR_OWVAR 33
54889: PUSH
54890: LD_STRING 
54892: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54893: LD_ADDR_OWVAR 35
54897: PUSH
54898: LD_VAR 0 1
54902: NEG
54903: PPUSH
54904: LD_VAR 0 1
54908: PPUSH
54909: CALL_OW 12
54913: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
54914: LD_ADDR_OWVAR 31
54918: PUSH
54919: LD_INT 0
54921: PPUSH
54922: LD_INT 3
54924: PPUSH
54925: CALL_OW 12
54929: PUSH
54930: LD_INT 0
54932: PPUSH
54933: LD_INT 3
54935: PPUSH
54936: CALL_OW 12
54940: PUSH
54941: LD_INT 0
54943: PUSH
54944: LD_INT 0
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: ST_TO_ADDR
// end ;
54953: LD_VAR 0 2
54957: RET
// export function PrepareTiger ( agressivity ) ; begin
54958: LD_INT 0
54960: PPUSH
// uc_side := 0 ;
54961: LD_ADDR_OWVAR 20
54965: PUSH
54966: LD_INT 0
54968: ST_TO_ADDR
// uc_nation := 0 ;
54969: LD_ADDR_OWVAR 21
54973: PUSH
54974: LD_INT 0
54976: ST_TO_ADDR
// hc_class := class_tiger ;
54977: LD_ADDR_OWVAR 28
54981: PUSH
54982: LD_INT 14
54984: ST_TO_ADDR
// hc_gallery :=  ;
54985: LD_ADDR_OWVAR 33
54989: PUSH
54990: LD_STRING 
54992: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
54993: LD_ADDR_OWVAR 35
54997: PUSH
54998: LD_VAR 0 1
55002: NEG
55003: PPUSH
55004: LD_VAR 0 1
55008: PPUSH
55009: CALL_OW 12
55013: ST_TO_ADDR
// end ;
55014: LD_VAR 0 2
55018: RET
// export function PrepareEnchidna ( ) ; begin
55019: LD_INT 0
55021: PPUSH
// uc_side := 0 ;
55022: LD_ADDR_OWVAR 20
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// uc_nation := 0 ;
55030: LD_ADDR_OWVAR 21
55034: PUSH
55035: LD_INT 0
55037: ST_TO_ADDR
// hc_class := class_baggie ;
55038: LD_ADDR_OWVAR 28
55042: PUSH
55043: LD_INT 13
55045: ST_TO_ADDR
// hc_gallery :=  ;
55046: LD_ADDR_OWVAR 33
55050: PUSH
55051: LD_STRING 
55053: ST_TO_ADDR
// end ;
55054: LD_VAR 0 1
55058: RET
// export function PrepareFrog ( ) ; begin
55059: LD_INT 0
55061: PPUSH
// uc_side := 0 ;
55062: LD_ADDR_OWVAR 20
55066: PUSH
55067: LD_INT 0
55069: ST_TO_ADDR
// uc_nation := 0 ;
55070: LD_ADDR_OWVAR 21
55074: PUSH
55075: LD_INT 0
55077: ST_TO_ADDR
// hc_class := class_frog ;
55078: LD_ADDR_OWVAR 28
55082: PUSH
55083: LD_INT 19
55085: ST_TO_ADDR
// hc_gallery :=  ;
55086: LD_ADDR_OWVAR 33
55090: PUSH
55091: LD_STRING 
55093: ST_TO_ADDR
// end ;
55094: LD_VAR 0 1
55098: RET
// export function PrepareFish ( ) ; begin
55099: LD_INT 0
55101: PPUSH
// uc_side := 0 ;
55102: LD_ADDR_OWVAR 20
55106: PUSH
55107: LD_INT 0
55109: ST_TO_ADDR
// uc_nation := 0 ;
55110: LD_ADDR_OWVAR 21
55114: PUSH
55115: LD_INT 0
55117: ST_TO_ADDR
// hc_class := class_fish ;
55118: LD_ADDR_OWVAR 28
55122: PUSH
55123: LD_INT 20
55125: ST_TO_ADDR
// hc_gallery :=  ;
55126: LD_ADDR_OWVAR 33
55130: PUSH
55131: LD_STRING 
55133: ST_TO_ADDR
// end ;
55134: LD_VAR 0 1
55138: RET
// export function PrepareBird ( ) ; begin
55139: LD_INT 0
55141: PPUSH
// uc_side := 0 ;
55142: LD_ADDR_OWVAR 20
55146: PUSH
55147: LD_INT 0
55149: ST_TO_ADDR
// uc_nation := 0 ;
55150: LD_ADDR_OWVAR 21
55154: PUSH
55155: LD_INT 0
55157: ST_TO_ADDR
// hc_class := class_phororhacos ;
55158: LD_ADDR_OWVAR 28
55162: PUSH
55163: LD_INT 18
55165: ST_TO_ADDR
// hc_gallery :=  ;
55166: LD_ADDR_OWVAR 33
55170: PUSH
55171: LD_STRING 
55173: ST_TO_ADDR
// end ;
55174: LD_VAR 0 1
55178: RET
// export function PrepareHorse ( ) ; begin
55179: LD_INT 0
55181: PPUSH
// uc_side := 0 ;
55182: LD_ADDR_OWVAR 20
55186: PUSH
55187: LD_INT 0
55189: ST_TO_ADDR
// uc_nation := 0 ;
55190: LD_ADDR_OWVAR 21
55194: PUSH
55195: LD_INT 0
55197: ST_TO_ADDR
// hc_class := class_horse ;
55198: LD_ADDR_OWVAR 28
55202: PUSH
55203: LD_INT 21
55205: ST_TO_ADDR
// hc_gallery :=  ;
55206: LD_ADDR_OWVAR 33
55210: PUSH
55211: LD_STRING 
55213: ST_TO_ADDR
// end ;
55214: LD_VAR 0 1
55218: RET
// export function PrepareMastodont ( ) ; begin
55219: LD_INT 0
55221: PPUSH
// uc_side := 0 ;
55222: LD_ADDR_OWVAR 20
55226: PUSH
55227: LD_INT 0
55229: ST_TO_ADDR
// uc_nation := 0 ;
55230: LD_ADDR_OWVAR 21
55234: PUSH
55235: LD_INT 0
55237: ST_TO_ADDR
// vc_chassis := class_mastodont ;
55238: LD_ADDR_OWVAR 37
55242: PUSH
55243: LD_INT 31
55245: ST_TO_ADDR
// vc_control := control_rider ;
55246: LD_ADDR_OWVAR 38
55250: PUSH
55251: LD_INT 4
55253: ST_TO_ADDR
// end ;
55254: LD_VAR 0 1
55258: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55259: LD_INT 0
55261: PPUSH
55262: PPUSH
55263: PPUSH
// uc_side = 0 ;
55264: LD_ADDR_OWVAR 20
55268: PUSH
55269: LD_INT 0
55271: ST_TO_ADDR
// uc_nation = 0 ;
55272: LD_ADDR_OWVAR 21
55276: PUSH
55277: LD_INT 0
55279: ST_TO_ADDR
// InitHc_All ( ) ;
55280: CALL_OW 584
// InitVc ;
55284: CALL_OW 20
// if mastodonts then
55288: LD_VAR 0 6
55292: IFFALSE 55359
// for i = 1 to mastodonts do
55294: LD_ADDR_VAR 0 11
55298: PUSH
55299: DOUBLE
55300: LD_INT 1
55302: DEC
55303: ST_TO_ADDR
55304: LD_VAR 0 6
55308: PUSH
55309: FOR_TO
55310: IFFALSE 55357
// begin vc_chassis := 31 ;
55312: LD_ADDR_OWVAR 37
55316: PUSH
55317: LD_INT 31
55319: ST_TO_ADDR
// vc_control := control_rider ;
55320: LD_ADDR_OWVAR 38
55324: PUSH
55325: LD_INT 4
55327: ST_TO_ADDR
// animal := CreateVehicle ;
55328: LD_ADDR_VAR 0 12
55332: PUSH
55333: CALL_OW 45
55337: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55338: LD_VAR 0 12
55342: PPUSH
55343: LD_VAR 0 8
55347: PPUSH
55348: LD_INT 0
55350: PPUSH
55351: CALL 57487 0 3
// end ;
55355: GO 55309
55357: POP
55358: POP
// if horses then
55359: LD_VAR 0 5
55363: IFFALSE 55430
// for i = 1 to horses do
55365: LD_ADDR_VAR 0 11
55369: PUSH
55370: DOUBLE
55371: LD_INT 1
55373: DEC
55374: ST_TO_ADDR
55375: LD_VAR 0 5
55379: PUSH
55380: FOR_TO
55381: IFFALSE 55428
// begin hc_class := 21 ;
55383: LD_ADDR_OWVAR 28
55387: PUSH
55388: LD_INT 21
55390: ST_TO_ADDR
// hc_gallery :=  ;
55391: LD_ADDR_OWVAR 33
55395: PUSH
55396: LD_STRING 
55398: ST_TO_ADDR
// animal := CreateHuman ;
55399: LD_ADDR_VAR 0 12
55403: PUSH
55404: CALL_OW 44
55408: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55409: LD_VAR 0 12
55413: PPUSH
55414: LD_VAR 0 8
55418: PPUSH
55419: LD_INT 0
55421: PPUSH
55422: CALL 57487 0 3
// end ;
55426: GO 55380
55428: POP
55429: POP
// if birds then
55430: LD_VAR 0 1
55434: IFFALSE 55501
// for i = 1 to birds do
55436: LD_ADDR_VAR 0 11
55440: PUSH
55441: DOUBLE
55442: LD_INT 1
55444: DEC
55445: ST_TO_ADDR
55446: LD_VAR 0 1
55450: PUSH
55451: FOR_TO
55452: IFFALSE 55499
// begin hc_class := 18 ;
55454: LD_ADDR_OWVAR 28
55458: PUSH
55459: LD_INT 18
55461: ST_TO_ADDR
// hc_gallery =  ;
55462: LD_ADDR_OWVAR 33
55466: PUSH
55467: LD_STRING 
55469: ST_TO_ADDR
// animal := CreateHuman ;
55470: LD_ADDR_VAR 0 12
55474: PUSH
55475: CALL_OW 44
55479: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55480: LD_VAR 0 12
55484: PPUSH
55485: LD_VAR 0 8
55489: PPUSH
55490: LD_INT 0
55492: PPUSH
55493: CALL 57487 0 3
// end ;
55497: GO 55451
55499: POP
55500: POP
// if tigers then
55501: LD_VAR 0 2
55505: IFFALSE 55589
// for i = 1 to tigers do
55507: LD_ADDR_VAR 0 11
55511: PUSH
55512: DOUBLE
55513: LD_INT 1
55515: DEC
55516: ST_TO_ADDR
55517: LD_VAR 0 2
55521: PUSH
55522: FOR_TO
55523: IFFALSE 55587
// begin hc_class = class_tiger ;
55525: LD_ADDR_OWVAR 28
55529: PUSH
55530: LD_INT 14
55532: ST_TO_ADDR
// hc_gallery =  ;
55533: LD_ADDR_OWVAR 33
55537: PUSH
55538: LD_STRING 
55540: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55541: LD_ADDR_OWVAR 35
55545: PUSH
55546: LD_INT 7
55548: NEG
55549: PPUSH
55550: LD_INT 7
55552: PPUSH
55553: CALL_OW 12
55557: ST_TO_ADDR
// animal := CreateHuman ;
55558: LD_ADDR_VAR 0 12
55562: PUSH
55563: CALL_OW 44
55567: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55568: LD_VAR 0 12
55572: PPUSH
55573: LD_VAR 0 8
55577: PPUSH
55578: LD_INT 0
55580: PPUSH
55581: CALL 57487 0 3
// end ;
55585: GO 55522
55587: POP
55588: POP
// if apemans then
55589: LD_VAR 0 3
55593: IFFALSE 55716
// for i = 1 to apemans do
55595: LD_ADDR_VAR 0 11
55599: PUSH
55600: DOUBLE
55601: LD_INT 1
55603: DEC
55604: ST_TO_ADDR
55605: LD_VAR 0 3
55609: PUSH
55610: FOR_TO
55611: IFFALSE 55714
// begin hc_class = class_apeman ;
55613: LD_ADDR_OWVAR 28
55617: PUSH
55618: LD_INT 12
55620: ST_TO_ADDR
// hc_gallery =  ;
55621: LD_ADDR_OWVAR 33
55625: PUSH
55626: LD_STRING 
55628: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55629: LD_ADDR_OWVAR 35
55633: PUSH
55634: LD_INT 2
55636: NEG
55637: PPUSH
55638: LD_INT 2
55640: PPUSH
55641: CALL_OW 12
55645: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55646: LD_ADDR_OWVAR 31
55650: PUSH
55651: LD_INT 1
55653: PPUSH
55654: LD_INT 3
55656: PPUSH
55657: CALL_OW 12
55661: PUSH
55662: LD_INT 1
55664: PPUSH
55665: LD_INT 3
55667: PPUSH
55668: CALL_OW 12
55672: PUSH
55673: LD_INT 0
55675: PUSH
55676: LD_INT 0
55678: PUSH
55679: EMPTY
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: ST_TO_ADDR
// animal := CreateHuman ;
55685: LD_ADDR_VAR 0 12
55689: PUSH
55690: CALL_OW 44
55694: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55695: LD_VAR 0 12
55699: PPUSH
55700: LD_VAR 0 8
55704: PPUSH
55705: LD_INT 0
55707: PPUSH
55708: CALL 57487 0 3
// end ;
55712: GO 55610
55714: POP
55715: POP
// if enchidnas then
55716: LD_VAR 0 4
55720: IFFALSE 55787
// for i = 1 to enchidnas do
55722: LD_ADDR_VAR 0 11
55726: PUSH
55727: DOUBLE
55728: LD_INT 1
55730: DEC
55731: ST_TO_ADDR
55732: LD_VAR 0 4
55736: PUSH
55737: FOR_TO
55738: IFFALSE 55785
// begin hc_class = 13 ;
55740: LD_ADDR_OWVAR 28
55744: PUSH
55745: LD_INT 13
55747: ST_TO_ADDR
// hc_gallery =  ;
55748: LD_ADDR_OWVAR 33
55752: PUSH
55753: LD_STRING 
55755: ST_TO_ADDR
// animal := CreateHuman ;
55756: LD_ADDR_VAR 0 12
55760: PUSH
55761: CALL_OW 44
55765: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55766: LD_VAR 0 12
55770: PPUSH
55771: LD_VAR 0 8
55775: PPUSH
55776: LD_INT 0
55778: PPUSH
55779: CALL 57487 0 3
// end ;
55783: GO 55737
55785: POP
55786: POP
// if fishes then
55787: LD_VAR 0 7
55791: IFFALSE 55858
// for i = 1 to fishes do
55793: LD_ADDR_VAR 0 11
55797: PUSH
55798: DOUBLE
55799: LD_INT 1
55801: DEC
55802: ST_TO_ADDR
55803: LD_VAR 0 7
55807: PUSH
55808: FOR_TO
55809: IFFALSE 55856
// begin hc_class = 20 ;
55811: LD_ADDR_OWVAR 28
55815: PUSH
55816: LD_INT 20
55818: ST_TO_ADDR
// hc_gallery =  ;
55819: LD_ADDR_OWVAR 33
55823: PUSH
55824: LD_STRING 
55826: ST_TO_ADDR
// animal := CreateHuman ;
55827: LD_ADDR_VAR 0 12
55831: PUSH
55832: CALL_OW 44
55836: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55837: LD_VAR 0 12
55841: PPUSH
55842: LD_VAR 0 9
55846: PPUSH
55847: LD_INT 0
55849: PPUSH
55850: CALL 57487 0 3
// end ;
55854: GO 55808
55856: POP
55857: POP
// end ;
55858: LD_VAR 0 10
55862: RET
// export function WantHeal ( sci , unit ) ; begin
55863: LD_INT 0
55865: PPUSH
// if GetTaskList ( sci ) > 0 then
55866: LD_VAR 0 1
55870: PPUSH
55871: CALL_OW 437
55875: PUSH
55876: LD_INT 0
55878: GREATER
55879: IFFALSE 55949
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55881: LD_VAR 0 1
55885: PPUSH
55886: CALL_OW 437
55890: PUSH
55891: LD_INT 1
55893: ARRAY
55894: PUSH
55895: LD_INT 1
55897: ARRAY
55898: PUSH
55899: LD_STRING l
55901: EQUAL
55902: PUSH
55903: LD_VAR 0 1
55907: PPUSH
55908: CALL_OW 437
55912: PUSH
55913: LD_INT 1
55915: ARRAY
55916: PUSH
55917: LD_INT 4
55919: ARRAY
55920: PUSH
55921: LD_VAR 0 2
55925: EQUAL
55926: AND
55927: IFFALSE 55939
// result := true else
55929: LD_ADDR_VAR 0 3
55933: PUSH
55934: LD_INT 1
55936: ST_TO_ADDR
55937: GO 55947
// result := false ;
55939: LD_ADDR_VAR 0 3
55943: PUSH
55944: LD_INT 0
55946: ST_TO_ADDR
// end else
55947: GO 55957
// result := false ;
55949: LD_ADDR_VAR 0 3
55953: PUSH
55954: LD_INT 0
55956: ST_TO_ADDR
// end ;
55957: LD_VAR 0 3
55961: RET
// export function HealTarget ( sci ) ; begin
55962: LD_INT 0
55964: PPUSH
// if not sci then
55965: LD_VAR 0 1
55969: NOT
55970: IFFALSE 55974
// exit ;
55972: GO 56039
// result := 0 ;
55974: LD_ADDR_VAR 0 2
55978: PUSH
55979: LD_INT 0
55981: ST_TO_ADDR
// if GetTaskList ( sci ) then
55982: LD_VAR 0 1
55986: PPUSH
55987: CALL_OW 437
55991: IFFALSE 56039
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55993: LD_VAR 0 1
55997: PPUSH
55998: CALL_OW 437
56002: PUSH
56003: LD_INT 1
56005: ARRAY
56006: PUSH
56007: LD_INT 1
56009: ARRAY
56010: PUSH
56011: LD_STRING l
56013: EQUAL
56014: IFFALSE 56039
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56016: LD_ADDR_VAR 0 2
56020: PUSH
56021: LD_VAR 0 1
56025: PPUSH
56026: CALL_OW 437
56030: PUSH
56031: LD_INT 1
56033: ARRAY
56034: PUSH
56035: LD_INT 4
56037: ARRAY
56038: ST_TO_ADDR
// end ;
56039: LD_VAR 0 2
56043: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56044: LD_INT 0
56046: PPUSH
56047: PPUSH
56048: PPUSH
56049: PPUSH
// if not base_units then
56050: LD_VAR 0 1
56054: NOT
56055: IFFALSE 56059
// exit ;
56057: GO 56146
// result := false ;
56059: LD_ADDR_VAR 0 2
56063: PUSH
56064: LD_INT 0
56066: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56067: LD_ADDR_VAR 0 5
56071: PUSH
56072: LD_VAR 0 1
56076: PPUSH
56077: LD_INT 21
56079: PUSH
56080: LD_INT 3
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: PPUSH
56087: CALL_OW 72
56091: ST_TO_ADDR
// if not tmp then
56092: LD_VAR 0 5
56096: NOT
56097: IFFALSE 56101
// exit ;
56099: GO 56146
// for i in tmp do
56101: LD_ADDR_VAR 0 3
56105: PUSH
56106: LD_VAR 0 5
56110: PUSH
56111: FOR_IN
56112: IFFALSE 56144
// begin result := EnemyInRange ( i , 22 ) ;
56114: LD_ADDR_VAR 0 2
56118: PUSH
56119: LD_VAR 0 3
56123: PPUSH
56124: LD_INT 22
56126: PPUSH
56127: CALL 53733 0 2
56131: ST_TO_ADDR
// if result then
56132: LD_VAR 0 2
56136: IFFALSE 56142
// exit ;
56138: POP
56139: POP
56140: GO 56146
// end ;
56142: GO 56111
56144: POP
56145: POP
// end ;
56146: LD_VAR 0 2
56150: RET
// export function FilterByTag ( units , tag ) ; begin
56151: LD_INT 0
56153: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
56154: LD_ADDR_VAR 0 3
56158: PUSH
56159: LD_VAR 0 1
56163: PPUSH
56164: LD_INT 120
56166: PUSH
56167: LD_VAR 0 2
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PPUSH
56176: CALL_OW 72
56180: ST_TO_ADDR
// end ;
56181: LD_VAR 0 3
56185: RET
// export function IsDriver ( un ) ; begin
56186: LD_INT 0
56188: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56189: LD_ADDR_VAR 0 2
56193: PUSH
56194: LD_VAR 0 1
56198: PUSH
56199: LD_INT 55
56201: PUSH
56202: EMPTY
56203: LIST
56204: PPUSH
56205: CALL_OW 69
56209: IN
56210: ST_TO_ADDR
// end ;
56211: LD_VAR 0 2
56215: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56216: LD_INT 0
56218: PPUSH
56219: PPUSH
// list := [ ] ;
56220: LD_ADDR_VAR 0 5
56224: PUSH
56225: EMPTY
56226: ST_TO_ADDR
// case d of 0 :
56227: LD_VAR 0 3
56231: PUSH
56232: LD_INT 0
56234: DOUBLE
56235: EQUAL
56236: IFTRUE 56240
56238: GO 56373
56240: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56241: LD_ADDR_VAR 0 5
56245: PUSH
56246: LD_VAR 0 1
56250: PUSH
56251: LD_INT 4
56253: MINUS
56254: PUSH
56255: LD_VAR 0 2
56259: PUSH
56260: LD_INT 4
56262: MINUS
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: PUSH
56272: LD_VAR 0 1
56276: PUSH
56277: LD_INT 3
56279: MINUS
56280: PUSH
56281: LD_VAR 0 2
56285: PUSH
56286: LD_INT 1
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: PUSH
56294: LD_VAR 0 1
56298: PUSH
56299: LD_INT 4
56301: PLUS
56302: PUSH
56303: LD_VAR 0 2
56307: PUSH
56308: LD_INT 4
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: PUSH
56316: LD_VAR 0 1
56320: PUSH
56321: LD_INT 3
56323: PLUS
56324: PUSH
56325: LD_VAR 0 2
56329: PUSH
56330: LD_INT 3
56332: PLUS
56333: PUSH
56334: LD_INT 5
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: PUSH
56342: LD_VAR 0 1
56346: PUSH
56347: LD_VAR 0 2
56351: PUSH
56352: LD_INT 4
56354: PLUS
56355: PUSH
56356: LD_INT 0
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: PUSH
56364: EMPTY
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: ST_TO_ADDR
// end ; 1 :
56371: GO 57071
56373: LD_INT 1
56375: DOUBLE
56376: EQUAL
56377: IFTRUE 56381
56379: GO 56514
56381: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56382: LD_ADDR_VAR 0 5
56386: PUSH
56387: LD_VAR 0 1
56391: PUSH
56392: LD_VAR 0 2
56396: PUSH
56397: LD_INT 4
56399: MINUS
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: PUSH
56409: LD_VAR 0 1
56413: PUSH
56414: LD_INT 3
56416: MINUS
56417: PUSH
56418: LD_VAR 0 2
56422: PUSH
56423: LD_INT 3
56425: MINUS
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: PUSH
56435: LD_VAR 0 1
56439: PUSH
56440: LD_INT 4
56442: MINUS
56443: PUSH
56444: LD_VAR 0 2
56448: PUSH
56449: LD_INT 1
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: PUSH
56457: LD_VAR 0 1
56461: PUSH
56462: LD_VAR 0 2
56466: PUSH
56467: LD_INT 3
56469: PLUS
56470: PUSH
56471: LD_INT 0
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: LIST
56478: PUSH
56479: LD_VAR 0 1
56483: PUSH
56484: LD_INT 4
56486: PLUS
56487: PUSH
56488: LD_VAR 0 2
56492: PUSH
56493: LD_INT 4
56495: PLUS
56496: PUSH
56497: LD_INT 5
56499: PUSH
56500: EMPTY
56501: LIST
56502: LIST
56503: LIST
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: LIST
56509: LIST
56510: LIST
56511: ST_TO_ADDR
// end ; 2 :
56512: GO 57071
56514: LD_INT 2
56516: DOUBLE
56517: EQUAL
56518: IFTRUE 56522
56520: GO 56651
56522: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56523: LD_ADDR_VAR 0 5
56527: PUSH
56528: LD_VAR 0 1
56532: PUSH
56533: LD_VAR 0 2
56537: PUSH
56538: LD_INT 3
56540: MINUS
56541: PUSH
56542: LD_INT 3
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: PUSH
56550: LD_VAR 0 1
56554: PUSH
56555: LD_INT 4
56557: PLUS
56558: PUSH
56559: LD_VAR 0 2
56563: PUSH
56564: LD_INT 4
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: PUSH
56572: LD_VAR 0 1
56576: PUSH
56577: LD_VAR 0 2
56581: PUSH
56582: LD_INT 4
56584: PLUS
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: LIST
56593: PUSH
56594: LD_VAR 0 1
56598: PUSH
56599: LD_INT 3
56601: MINUS
56602: PUSH
56603: LD_VAR 0 2
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: LIST
56615: PUSH
56616: LD_VAR 0 1
56620: PUSH
56621: LD_INT 4
56623: MINUS
56624: PUSH
56625: LD_VAR 0 2
56629: PUSH
56630: LD_INT 4
56632: MINUS
56633: PUSH
56634: LD_INT 2
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: LIST
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: ST_TO_ADDR
// end ; 3 :
56649: GO 57071
56651: LD_INT 3
56653: DOUBLE
56654: EQUAL
56655: IFTRUE 56659
56657: GO 56792
56659: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56660: LD_ADDR_VAR 0 5
56664: PUSH
56665: LD_VAR 0 1
56669: PUSH
56670: LD_INT 3
56672: PLUS
56673: PUSH
56674: LD_VAR 0 2
56678: PUSH
56679: LD_INT 4
56681: PUSH
56682: EMPTY
56683: LIST
56684: LIST
56685: LIST
56686: PUSH
56687: LD_VAR 0 1
56691: PUSH
56692: LD_INT 4
56694: PLUS
56695: PUSH
56696: LD_VAR 0 2
56700: PUSH
56701: LD_INT 4
56703: PLUS
56704: PUSH
56705: LD_INT 5
56707: PUSH
56708: EMPTY
56709: LIST
56710: LIST
56711: LIST
56712: PUSH
56713: LD_VAR 0 1
56717: PUSH
56718: LD_INT 4
56720: MINUS
56721: PUSH
56722: LD_VAR 0 2
56726: PUSH
56727: LD_INT 1
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: PUSH
56735: LD_VAR 0 1
56739: PUSH
56740: LD_VAR 0 2
56744: PUSH
56745: LD_INT 4
56747: MINUS
56748: PUSH
56749: LD_INT 3
56751: PUSH
56752: EMPTY
56753: LIST
56754: LIST
56755: LIST
56756: PUSH
56757: LD_VAR 0 1
56761: PUSH
56762: LD_INT 3
56764: MINUS
56765: PUSH
56766: LD_VAR 0 2
56770: PUSH
56771: LD_INT 3
56773: MINUS
56774: PUSH
56775: LD_INT 2
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: LIST
56782: PUSH
56783: EMPTY
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: ST_TO_ADDR
// end ; 4 :
56790: GO 57071
56792: LD_INT 4
56794: DOUBLE
56795: EQUAL
56796: IFTRUE 56800
56798: GO 56933
56800: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56801: LD_ADDR_VAR 0 5
56805: PUSH
56806: LD_VAR 0 1
56810: PUSH
56811: LD_VAR 0 2
56815: PUSH
56816: LD_INT 4
56818: PLUS
56819: PUSH
56820: LD_INT 0
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: LIST
56827: PUSH
56828: LD_VAR 0 1
56832: PUSH
56833: LD_INT 3
56835: PLUS
56836: PUSH
56837: LD_VAR 0 2
56841: PUSH
56842: LD_INT 3
56844: PLUS
56845: PUSH
56846: LD_INT 5
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: LIST
56853: PUSH
56854: LD_VAR 0 1
56858: PUSH
56859: LD_INT 4
56861: PLUS
56862: PUSH
56863: LD_VAR 0 2
56867: PUSH
56868: LD_INT 4
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: PUSH
56876: LD_VAR 0 1
56880: PUSH
56881: LD_VAR 0 2
56885: PUSH
56886: LD_INT 3
56888: MINUS
56889: PUSH
56890: LD_INT 3
56892: PUSH
56893: EMPTY
56894: LIST
56895: LIST
56896: LIST
56897: PUSH
56898: LD_VAR 0 1
56902: PUSH
56903: LD_INT 4
56905: MINUS
56906: PUSH
56907: LD_VAR 0 2
56911: PUSH
56912: LD_INT 4
56914: MINUS
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: PUSH
56924: EMPTY
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: ST_TO_ADDR
// end ; 5 :
56931: GO 57071
56933: LD_INT 5
56935: DOUBLE
56936: EQUAL
56937: IFTRUE 56941
56939: GO 57070
56941: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56942: LD_ADDR_VAR 0 5
56946: PUSH
56947: LD_VAR 0 1
56951: PUSH
56952: LD_INT 4
56954: MINUS
56955: PUSH
56956: LD_VAR 0 2
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: EMPTY
56965: LIST
56966: LIST
56967: LIST
56968: PUSH
56969: LD_VAR 0 1
56973: PUSH
56974: LD_VAR 0 2
56978: PUSH
56979: LD_INT 4
56981: MINUS
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: LIST
56990: PUSH
56991: LD_VAR 0 1
56995: PUSH
56996: LD_INT 4
56998: PLUS
56999: PUSH
57000: LD_VAR 0 2
57004: PUSH
57005: LD_INT 4
57007: PLUS
57008: PUSH
57009: LD_INT 5
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: PUSH
57017: LD_VAR 0 1
57021: PUSH
57022: LD_INT 3
57024: PLUS
57025: PUSH
57026: LD_VAR 0 2
57030: PUSH
57031: LD_INT 4
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: LIST
57038: PUSH
57039: LD_VAR 0 1
57043: PUSH
57044: LD_VAR 0 2
57048: PUSH
57049: LD_INT 3
57051: PLUS
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// end ; end ;
57068: GO 57071
57070: POP
// result := list ;
57071: LD_ADDR_VAR 0 4
57075: PUSH
57076: LD_VAR 0 5
57080: ST_TO_ADDR
// end ;
57081: LD_VAR 0 4
57085: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57086: LD_INT 0
57088: PPUSH
57089: PPUSH
57090: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57091: LD_VAR 0 1
57095: NOT
57096: PUSH
57097: LD_VAR 0 2
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 2
57107: PUSH
57108: LD_INT 3
57110: PUSH
57111: LD_INT 4
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: IN
57120: NOT
57121: OR
57122: IFFALSE 57126
// exit ;
57124: GO 57209
// tmp := [ ] ;
57126: LD_ADDR_VAR 0 5
57130: PUSH
57131: EMPTY
57132: ST_TO_ADDR
// for i in units do
57133: LD_ADDR_VAR 0 4
57137: PUSH
57138: LD_VAR 0 1
57142: PUSH
57143: FOR_IN
57144: IFFALSE 57178
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
57146: LD_ADDR_VAR 0 5
57150: PUSH
57151: LD_VAR 0 5
57155: PPUSH
57156: LD_VAR 0 4
57160: PPUSH
57161: LD_VAR 0 2
57165: PPUSH
57166: CALL_OW 259
57170: PPUSH
57171: CALL 58569 0 2
57175: ST_TO_ADDR
57176: GO 57143
57178: POP
57179: POP
// if not tmp then
57180: LD_VAR 0 5
57184: NOT
57185: IFFALSE 57189
// exit ;
57187: GO 57209
// result := SortListByListDesc ( units , tmp ) ;
57189: LD_ADDR_VAR 0 3
57193: PUSH
57194: LD_VAR 0 1
57198: PPUSH
57199: LD_VAR 0 5
57203: PPUSH
57204: CALL_OW 77
57208: ST_TO_ADDR
// end ;
57209: LD_VAR 0 3
57213: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57214: LD_INT 0
57216: PPUSH
57217: PPUSH
57218: PPUSH
// result := false ;
57219: LD_ADDR_VAR 0 3
57223: PUSH
57224: LD_INT 0
57226: ST_TO_ADDR
// if not building then
57227: LD_VAR 0 2
57231: NOT
57232: IFFALSE 57236
// exit ;
57234: GO 57374
// x := GetX ( building ) ;
57236: LD_ADDR_VAR 0 4
57240: PUSH
57241: LD_VAR 0 2
57245: PPUSH
57246: CALL_OW 250
57250: ST_TO_ADDR
// y := GetY ( building ) ;
57251: LD_ADDR_VAR 0 5
57255: PUSH
57256: LD_VAR 0 2
57260: PPUSH
57261: CALL_OW 251
57265: ST_TO_ADDR
// if not x or not y then
57266: LD_VAR 0 4
57270: NOT
57271: PUSH
57272: LD_VAR 0 5
57276: NOT
57277: OR
57278: IFFALSE 57282
// exit ;
57280: GO 57374
// if GetTaskList ( unit ) then
57282: LD_VAR 0 1
57286: PPUSH
57287: CALL_OW 437
57291: IFFALSE 57374
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57293: LD_STRING e
57295: PUSH
57296: LD_VAR 0 1
57300: PPUSH
57301: CALL_OW 437
57305: PUSH
57306: LD_INT 1
57308: ARRAY
57309: PUSH
57310: LD_INT 1
57312: ARRAY
57313: EQUAL
57314: PUSH
57315: LD_VAR 0 4
57319: PUSH
57320: LD_VAR 0 1
57324: PPUSH
57325: CALL_OW 437
57329: PUSH
57330: LD_INT 1
57332: ARRAY
57333: PUSH
57334: LD_INT 2
57336: ARRAY
57337: EQUAL
57338: AND
57339: PUSH
57340: LD_VAR 0 5
57344: PUSH
57345: LD_VAR 0 1
57349: PPUSH
57350: CALL_OW 437
57354: PUSH
57355: LD_INT 1
57357: ARRAY
57358: PUSH
57359: LD_INT 3
57361: ARRAY
57362: EQUAL
57363: AND
57364: IFFALSE 57374
// result := true end ;
57366: LD_ADDR_VAR 0 3
57370: PUSH
57371: LD_INT 1
57373: ST_TO_ADDR
// end ;
57374: LD_VAR 0 3
57378: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57379: LD_INT 0
57381: PPUSH
// result := false ;
57382: LD_ADDR_VAR 0 4
57386: PUSH
57387: LD_INT 0
57389: ST_TO_ADDR
// if GetTaskList ( unit ) then
57390: LD_VAR 0 1
57394: PPUSH
57395: CALL_OW 437
57399: IFFALSE 57482
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57401: LD_STRING M
57403: PUSH
57404: LD_VAR 0 1
57408: PPUSH
57409: CALL_OW 437
57413: PUSH
57414: LD_INT 1
57416: ARRAY
57417: PUSH
57418: LD_INT 1
57420: ARRAY
57421: EQUAL
57422: PUSH
57423: LD_VAR 0 2
57427: PUSH
57428: LD_VAR 0 1
57432: PPUSH
57433: CALL_OW 437
57437: PUSH
57438: LD_INT 1
57440: ARRAY
57441: PUSH
57442: LD_INT 2
57444: ARRAY
57445: EQUAL
57446: AND
57447: PUSH
57448: LD_VAR 0 3
57452: PUSH
57453: LD_VAR 0 1
57457: PPUSH
57458: CALL_OW 437
57462: PUSH
57463: LD_INT 1
57465: ARRAY
57466: PUSH
57467: LD_INT 3
57469: ARRAY
57470: EQUAL
57471: AND
57472: IFFALSE 57482
// result := true ;
57474: LD_ADDR_VAR 0 4
57478: PUSH
57479: LD_INT 1
57481: ST_TO_ADDR
// end ; end ;
57482: LD_VAR 0 4
57486: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57487: LD_INT 0
57489: PPUSH
57490: PPUSH
57491: PPUSH
57492: PPUSH
// if not unit or not area then
57493: LD_VAR 0 1
57497: NOT
57498: PUSH
57499: LD_VAR 0 2
57503: NOT
57504: OR
57505: IFFALSE 57509
// exit ;
57507: GO 57672
// tmp := AreaToList ( area , i ) ;
57509: LD_ADDR_VAR 0 6
57513: PUSH
57514: LD_VAR 0 2
57518: PPUSH
57519: LD_VAR 0 5
57523: PPUSH
57524: CALL_OW 517
57528: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57529: LD_ADDR_VAR 0 5
57533: PUSH
57534: DOUBLE
57535: LD_INT 1
57537: DEC
57538: ST_TO_ADDR
57539: LD_VAR 0 6
57543: PUSH
57544: LD_INT 1
57546: ARRAY
57547: PUSH
57548: FOR_TO
57549: IFFALSE 57670
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57551: LD_ADDR_VAR 0 7
57555: PUSH
57556: LD_VAR 0 6
57560: PUSH
57561: LD_INT 1
57563: ARRAY
57564: PUSH
57565: LD_VAR 0 5
57569: ARRAY
57570: PUSH
57571: LD_VAR 0 6
57575: PUSH
57576: LD_INT 2
57578: ARRAY
57579: PUSH
57580: LD_VAR 0 5
57584: ARRAY
57585: PUSH
57586: EMPTY
57587: LIST
57588: LIST
57589: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
57590: LD_INT 92
57592: PUSH
57593: LD_VAR 0 7
57597: PUSH
57598: LD_INT 1
57600: ARRAY
57601: PUSH
57602: LD_VAR 0 7
57606: PUSH
57607: LD_INT 2
57609: ARRAY
57610: PUSH
57611: LD_INT 3
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: PPUSH
57620: CALL_OW 69
57624: PUSH
57625: LD_INT 0
57627: EQUAL
57628: IFFALSE 57668
// begin PlaceUnitArea ( unit , area , mode ) ;
57630: LD_VAR 0 1
57634: PPUSH
57635: LD_VAR 0 2
57639: PPUSH
57640: LD_VAR 0 3
57644: PPUSH
57645: CALL_OW 49
// result := IsPlaced ( unit ) ;
57649: LD_ADDR_VAR 0 4
57653: PUSH
57654: LD_VAR 0 1
57658: PPUSH
57659: CALL_OW 305
57663: ST_TO_ADDR
// exit ;
57664: POP
57665: POP
57666: GO 57672
// end ; end ;
57668: GO 57548
57670: POP
57671: POP
// end ;
57672: LD_VAR 0 4
57676: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57677: LD_INT 0
57679: PPUSH
57680: PPUSH
57681: PPUSH
// if not side or side > 8 then
57682: LD_VAR 0 1
57686: NOT
57687: PUSH
57688: LD_VAR 0 1
57692: PUSH
57693: LD_INT 8
57695: GREATER
57696: OR
57697: IFFALSE 57701
// exit ;
57699: GO 57888
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57701: LD_ADDR_VAR 0 4
57705: PUSH
57706: LD_INT 22
57708: PUSH
57709: LD_VAR 0 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 21
57720: PUSH
57721: LD_INT 3
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: PUSH
57728: EMPTY
57729: LIST
57730: LIST
57731: PPUSH
57732: CALL_OW 69
57736: ST_TO_ADDR
// if not tmp then
57737: LD_VAR 0 4
57741: NOT
57742: IFFALSE 57746
// exit ;
57744: GO 57888
// enable_addtolog := true ;
57746: LD_ADDR_OWVAR 81
57750: PUSH
57751: LD_INT 1
57753: ST_TO_ADDR
// AddToLog ( [ ) ;
57754: LD_STRING [
57756: PPUSH
57757: CALL_OW 561
// for i in tmp do
57761: LD_ADDR_VAR 0 3
57765: PUSH
57766: LD_VAR 0 4
57770: PUSH
57771: FOR_IN
57772: IFFALSE 57879
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57774: LD_STRING [
57776: PUSH
57777: LD_VAR 0 3
57781: PPUSH
57782: CALL_OW 266
57786: STR
57787: PUSH
57788: LD_STRING , 
57790: STR
57791: PUSH
57792: LD_VAR 0 3
57796: PPUSH
57797: CALL_OW 250
57801: STR
57802: PUSH
57803: LD_STRING , 
57805: STR
57806: PUSH
57807: LD_VAR 0 3
57811: PPUSH
57812: CALL_OW 251
57816: STR
57817: PUSH
57818: LD_STRING , 
57820: STR
57821: PUSH
57822: LD_VAR 0 3
57826: PPUSH
57827: CALL_OW 254
57831: STR
57832: PUSH
57833: LD_STRING , 
57835: STR
57836: PUSH
57837: LD_VAR 0 3
57841: PPUSH
57842: LD_INT 1
57844: PPUSH
57845: CALL_OW 268
57849: STR
57850: PUSH
57851: LD_STRING , 
57853: STR
57854: PUSH
57855: LD_VAR 0 3
57859: PPUSH
57860: LD_INT 2
57862: PPUSH
57863: CALL_OW 268
57867: STR
57868: PUSH
57869: LD_STRING ],
57871: STR
57872: PPUSH
57873: CALL_OW 561
// end ;
57877: GO 57771
57879: POP
57880: POP
// AddToLog ( ]; ) ;
57881: LD_STRING ];
57883: PPUSH
57884: CALL_OW 561
// end ;
57888: LD_VAR 0 2
57892: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57893: LD_INT 0
57895: PPUSH
57896: PPUSH
57897: PPUSH
57898: PPUSH
57899: PPUSH
// if not area or not rate or not max then
57900: LD_VAR 0 1
57904: NOT
57905: PUSH
57906: LD_VAR 0 2
57910: NOT
57911: OR
57912: PUSH
57913: LD_VAR 0 4
57917: NOT
57918: OR
57919: IFFALSE 57923
// exit ;
57921: GO 58112
// while 1 do
57923: LD_INT 1
57925: IFFALSE 58112
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57927: LD_ADDR_VAR 0 9
57931: PUSH
57932: LD_VAR 0 1
57936: PPUSH
57937: LD_INT 1
57939: PPUSH
57940: CALL_OW 287
57944: PUSH
57945: LD_INT 10
57947: MUL
57948: ST_TO_ADDR
// r := rate / 10 ;
57949: LD_ADDR_VAR 0 7
57953: PUSH
57954: LD_VAR 0 2
57958: PUSH
57959: LD_INT 10
57961: DIVREAL
57962: ST_TO_ADDR
// time := 1 1$00 ;
57963: LD_ADDR_VAR 0 8
57967: PUSH
57968: LD_INT 2100
57970: ST_TO_ADDR
// if amount < min then
57971: LD_VAR 0 9
57975: PUSH
57976: LD_VAR 0 3
57980: LESS
57981: IFFALSE 57999
// r := r * 2 else
57983: LD_ADDR_VAR 0 7
57987: PUSH
57988: LD_VAR 0 7
57992: PUSH
57993: LD_INT 2
57995: MUL
57996: ST_TO_ADDR
57997: GO 58025
// if amount > max then
57999: LD_VAR 0 9
58003: PUSH
58004: LD_VAR 0 4
58008: GREATER
58009: IFFALSE 58025
// r := r / 2 ;
58011: LD_ADDR_VAR 0 7
58015: PUSH
58016: LD_VAR 0 7
58020: PUSH
58021: LD_INT 2
58023: DIVREAL
58024: ST_TO_ADDR
// time := time / r ;
58025: LD_ADDR_VAR 0 8
58029: PUSH
58030: LD_VAR 0 8
58034: PUSH
58035: LD_VAR 0 7
58039: DIVREAL
58040: ST_TO_ADDR
// if time < 0 then
58041: LD_VAR 0 8
58045: PUSH
58046: LD_INT 0
58048: LESS
58049: IFFALSE 58066
// time := time * - 1 ;
58051: LD_ADDR_VAR 0 8
58055: PUSH
58056: LD_VAR 0 8
58060: PUSH
58061: LD_INT 1
58063: NEG
58064: MUL
58065: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
58066: LD_VAR 0 8
58070: PUSH
58071: LD_INT 35
58073: PPUSH
58074: LD_INT 875
58076: PPUSH
58077: CALL_OW 12
58081: PLUS
58082: PPUSH
58083: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58087: LD_INT 1
58089: PPUSH
58090: LD_INT 5
58092: PPUSH
58093: CALL_OW 12
58097: PPUSH
58098: LD_VAR 0 1
58102: PPUSH
58103: LD_INT 1
58105: PPUSH
58106: CALL_OW 55
// end ;
58110: GO 57923
// end ;
58112: LD_VAR 0 5
58116: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58117: LD_INT 0
58119: PPUSH
58120: PPUSH
58121: PPUSH
58122: PPUSH
58123: PPUSH
58124: PPUSH
58125: PPUSH
58126: PPUSH
// if not turrets or not factories then
58127: LD_VAR 0 1
58131: NOT
58132: PUSH
58133: LD_VAR 0 2
58137: NOT
58138: OR
58139: IFFALSE 58143
// exit ;
58141: GO 58450
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58143: LD_ADDR_VAR 0 10
58147: PUSH
58148: LD_INT 5
58150: PUSH
58151: LD_INT 6
58153: PUSH
58154: EMPTY
58155: LIST
58156: LIST
58157: PUSH
58158: LD_INT 2
58160: PUSH
58161: LD_INT 4
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 3
58170: PUSH
58171: LD_INT 5
58173: PUSH
58174: EMPTY
58175: LIST
58176: LIST
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: PUSH
58183: LD_INT 24
58185: PUSH
58186: LD_INT 25
58188: PUSH
58189: EMPTY
58190: LIST
58191: LIST
58192: PUSH
58193: LD_INT 23
58195: PUSH
58196: LD_INT 27
58198: PUSH
58199: EMPTY
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: LD_INT 42
58209: PUSH
58210: LD_INT 43
58212: PUSH
58213: EMPTY
58214: LIST
58215: LIST
58216: PUSH
58217: LD_INT 44
58219: PUSH
58220: LD_INT 46
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: PUSH
58227: LD_INT 45
58229: PUSH
58230: LD_INT 47
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: LIST
58246: ST_TO_ADDR
// result := [ ] ;
58247: LD_ADDR_VAR 0 3
58251: PUSH
58252: EMPTY
58253: ST_TO_ADDR
// for i in turrets do
58254: LD_ADDR_VAR 0 4
58258: PUSH
58259: LD_VAR 0 1
58263: PUSH
58264: FOR_IN
58265: IFFALSE 58448
// begin nat := GetNation ( i ) ;
58267: LD_ADDR_VAR 0 7
58271: PUSH
58272: LD_VAR 0 4
58276: PPUSH
58277: CALL_OW 248
58281: ST_TO_ADDR
// weapon := 0 ;
58282: LD_ADDR_VAR 0 8
58286: PUSH
58287: LD_INT 0
58289: ST_TO_ADDR
// if not nat then
58290: LD_VAR 0 7
58294: NOT
58295: IFFALSE 58299
// continue ;
58297: GO 58264
// for j in list [ nat ] do
58299: LD_ADDR_VAR 0 5
58303: PUSH
58304: LD_VAR 0 10
58308: PUSH
58309: LD_VAR 0 7
58313: ARRAY
58314: PUSH
58315: FOR_IN
58316: IFFALSE 58357
// if GetBWeapon ( i ) = j [ 1 ] then
58318: LD_VAR 0 4
58322: PPUSH
58323: CALL_OW 269
58327: PUSH
58328: LD_VAR 0 5
58332: PUSH
58333: LD_INT 1
58335: ARRAY
58336: EQUAL
58337: IFFALSE 58355
// begin weapon := j [ 2 ] ;
58339: LD_ADDR_VAR 0 8
58343: PUSH
58344: LD_VAR 0 5
58348: PUSH
58349: LD_INT 2
58351: ARRAY
58352: ST_TO_ADDR
// break ;
58353: GO 58357
// end ;
58355: GO 58315
58357: POP
58358: POP
// if not weapon then
58359: LD_VAR 0 8
58363: NOT
58364: IFFALSE 58368
// continue ;
58366: GO 58264
// for k in factories do
58368: LD_ADDR_VAR 0 6
58372: PUSH
58373: LD_VAR 0 2
58377: PUSH
58378: FOR_IN
58379: IFFALSE 58444
// begin weapons := AvailableWeaponList ( k ) ;
58381: LD_ADDR_VAR 0 9
58385: PUSH
58386: LD_VAR 0 6
58390: PPUSH
58391: CALL_OW 478
58395: ST_TO_ADDR
// if not weapons then
58396: LD_VAR 0 9
58400: NOT
58401: IFFALSE 58405
// continue ;
58403: GO 58378
// if weapon in weapons then
58405: LD_VAR 0 8
58409: PUSH
58410: LD_VAR 0 9
58414: IN
58415: IFFALSE 58442
// begin result := [ i , weapon ] ;
58417: LD_ADDR_VAR 0 3
58421: PUSH
58422: LD_VAR 0 4
58426: PUSH
58427: LD_VAR 0 8
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: ST_TO_ADDR
// exit ;
58436: POP
58437: POP
58438: POP
58439: POP
58440: GO 58450
// end ; end ;
58442: GO 58378
58444: POP
58445: POP
// end ;
58446: GO 58264
58448: POP
58449: POP
// end ;
58450: LD_VAR 0 3
58454: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58455: LD_INT 0
58457: PPUSH
// if not side or side > 8 then
58458: LD_VAR 0 3
58462: NOT
58463: PUSH
58464: LD_VAR 0 3
58468: PUSH
58469: LD_INT 8
58471: GREATER
58472: OR
58473: IFFALSE 58477
// exit ;
58475: GO 58536
// if not range then
58477: LD_VAR 0 4
58481: NOT
58482: IFFALSE 58493
// range := - 12 ;
58484: LD_ADDR_VAR 0 4
58488: PUSH
58489: LD_INT 12
58491: NEG
58492: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58493: LD_VAR 0 1
58497: PPUSH
58498: LD_VAR 0 2
58502: PPUSH
58503: LD_VAR 0 3
58507: PPUSH
58508: LD_VAR 0 4
58512: PPUSH
58513: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58517: LD_VAR 0 1
58521: PPUSH
58522: LD_VAR 0 2
58526: PPUSH
58527: LD_VAR 0 3
58531: PPUSH
58532: CALL_OW 331
// end ;
58536: LD_VAR 0 5
58540: RET
// export function Video ( mode ) ; begin
58541: LD_INT 0
58543: PPUSH
// ingame_video = mode ;
58544: LD_ADDR_OWVAR 52
58548: PUSH
58549: LD_VAR 0 1
58553: ST_TO_ADDR
// interface_hidden = mode ;
58554: LD_ADDR_OWVAR 54
58558: PUSH
58559: LD_VAR 0 1
58563: ST_TO_ADDR
// end ;
58564: LD_VAR 0 2
58568: RET
// export function Join ( array , element ) ; begin
58569: LD_INT 0
58571: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58572: LD_ADDR_VAR 0 3
58576: PUSH
58577: LD_VAR 0 1
58581: PPUSH
58582: LD_VAR 0 1
58586: PUSH
58587: LD_INT 1
58589: PLUS
58590: PPUSH
58591: LD_VAR 0 2
58595: PPUSH
58596: CALL_OW 1
58600: ST_TO_ADDR
// end ;
58601: LD_VAR 0 3
58605: RET
// export function JoinUnion ( array , element ) ; begin
58606: LD_INT 0
58608: PPUSH
// result := array union element ;
58609: LD_ADDR_VAR 0 3
58613: PUSH
58614: LD_VAR 0 1
58618: PUSH
58619: LD_VAR 0 2
58623: UNION
58624: ST_TO_ADDR
// end ;
58625: LD_VAR 0 3
58629: RET
// export function GetBehemoths ( side ) ; begin
58630: LD_INT 0
58632: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
58633: LD_ADDR_VAR 0 2
58637: PUSH
58638: LD_INT 22
58640: PUSH
58641: LD_VAR 0 1
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 31
58652: PUSH
58653: LD_INT 25
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: PUSH
58660: EMPTY
58661: LIST
58662: LIST
58663: PPUSH
58664: CALL_OW 69
58668: ST_TO_ADDR
// end ;
58669: LD_VAR 0 2
58673: RET
// export function Shuffle ( array ) ; var i , index ; begin
58674: LD_INT 0
58676: PPUSH
58677: PPUSH
58678: PPUSH
// result := [ ] ;
58679: LD_ADDR_VAR 0 2
58683: PUSH
58684: EMPTY
58685: ST_TO_ADDR
// if not array then
58686: LD_VAR 0 1
58690: NOT
58691: IFFALSE 58695
// exit ;
58693: GO 58794
// Randomize ;
58695: CALL_OW 10
// for i = array downto 1 do
58699: LD_ADDR_VAR 0 3
58703: PUSH
58704: DOUBLE
58705: LD_VAR 0 1
58709: INC
58710: ST_TO_ADDR
58711: LD_INT 1
58713: PUSH
58714: FOR_DOWNTO
58715: IFFALSE 58792
// begin index := rand ( 1 , array ) ;
58717: LD_ADDR_VAR 0 4
58721: PUSH
58722: LD_INT 1
58724: PPUSH
58725: LD_VAR 0 1
58729: PPUSH
58730: CALL_OW 12
58734: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58735: LD_ADDR_VAR 0 2
58739: PUSH
58740: LD_VAR 0 2
58744: PPUSH
58745: LD_VAR 0 2
58749: PUSH
58750: LD_INT 1
58752: PLUS
58753: PPUSH
58754: LD_VAR 0 1
58758: PUSH
58759: LD_VAR 0 4
58763: ARRAY
58764: PPUSH
58765: CALL_OW 2
58769: ST_TO_ADDR
// array := Delete ( array , index ) ;
58770: LD_ADDR_VAR 0 1
58774: PUSH
58775: LD_VAR 0 1
58779: PPUSH
58780: LD_VAR 0 4
58784: PPUSH
58785: CALL_OW 3
58789: ST_TO_ADDR
// end ;
58790: GO 58714
58792: POP
58793: POP
// end ;
58794: LD_VAR 0 2
58798: RET
// export function GetBaseMaterials ( base ) ; begin
58799: LD_INT 0
58801: PPUSH
// result := [ 0 , 0 , 0 ] ;
58802: LD_ADDR_VAR 0 2
58806: PUSH
58807: LD_INT 0
58809: PUSH
58810: LD_INT 0
58812: PUSH
58813: LD_INT 0
58815: PUSH
58816: EMPTY
58817: LIST
58818: LIST
58819: LIST
58820: ST_TO_ADDR
// if not base then
58821: LD_VAR 0 1
58825: NOT
58826: IFFALSE 58830
// exit ;
58828: GO 58879
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58830: LD_ADDR_VAR 0 2
58834: PUSH
58835: LD_VAR 0 1
58839: PPUSH
58840: LD_INT 1
58842: PPUSH
58843: CALL_OW 275
58847: PUSH
58848: LD_VAR 0 1
58852: PPUSH
58853: LD_INT 2
58855: PPUSH
58856: CALL_OW 275
58860: PUSH
58861: LD_VAR 0 1
58865: PPUSH
58866: LD_INT 3
58868: PPUSH
58869: CALL_OW 275
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: LIST
58878: ST_TO_ADDR
// end ;
58879: LD_VAR 0 2
58883: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58884: LD_INT 0
58886: PPUSH
58887: PPUSH
// result := array ;
58888: LD_ADDR_VAR 0 3
58892: PUSH
58893: LD_VAR 0 1
58897: ST_TO_ADDR
// if size >= result then
58898: LD_VAR 0 2
58902: PUSH
58903: LD_VAR 0 3
58907: GREATEREQUAL
58908: IFFALSE 58912
// exit ;
58910: GO 58962
// if size then
58912: LD_VAR 0 2
58916: IFFALSE 58962
// for i := array downto size do
58918: LD_ADDR_VAR 0 4
58922: PUSH
58923: DOUBLE
58924: LD_VAR 0 1
58928: INC
58929: ST_TO_ADDR
58930: LD_VAR 0 2
58934: PUSH
58935: FOR_DOWNTO
58936: IFFALSE 58960
// result := Delete ( result , result ) ;
58938: LD_ADDR_VAR 0 3
58942: PUSH
58943: LD_VAR 0 3
58947: PPUSH
58948: LD_VAR 0 3
58952: PPUSH
58953: CALL_OW 3
58957: ST_TO_ADDR
58958: GO 58935
58960: POP
58961: POP
// end ;
58962: LD_VAR 0 3
58966: RET
// export function ComExit ( unit ) ; var tmp ; begin
58967: LD_INT 0
58969: PPUSH
58970: PPUSH
// if not IsInUnit ( unit ) then
58971: LD_VAR 0 1
58975: PPUSH
58976: CALL_OW 310
58980: NOT
58981: IFFALSE 58985
// exit ;
58983: GO 59045
// tmp := IsInUnit ( unit ) ;
58985: LD_ADDR_VAR 0 3
58989: PUSH
58990: LD_VAR 0 1
58994: PPUSH
58995: CALL_OW 310
58999: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59000: LD_VAR 0 3
59004: PPUSH
59005: CALL_OW 247
59009: PUSH
59010: LD_INT 2
59012: EQUAL
59013: IFFALSE 59026
// ComExitVehicle ( unit ) else
59015: LD_VAR 0 1
59019: PPUSH
59020: CALL_OW 121
59024: GO 59035
// ComExitBuilding ( unit ) ;
59026: LD_VAR 0 1
59030: PPUSH
59031: CALL_OW 122
// result := tmp ;
59035: LD_ADDR_VAR 0 2
59039: PUSH
59040: LD_VAR 0 3
59044: ST_TO_ADDR
// end ;
59045: LD_VAR 0 2
59049: RET
// export function ComExitAll ( units ) ; var i ; begin
59050: LD_INT 0
59052: PPUSH
59053: PPUSH
// if not units then
59054: LD_VAR 0 1
59058: NOT
59059: IFFALSE 59063
// exit ;
59061: GO 59089
// for i in units do
59063: LD_ADDR_VAR 0 3
59067: PUSH
59068: LD_VAR 0 1
59072: PUSH
59073: FOR_IN
59074: IFFALSE 59087
// ComExit ( i ) ;
59076: LD_VAR 0 3
59080: PPUSH
59081: CALL 58967 0 1
59085: GO 59073
59087: POP
59088: POP
// end ;
59089: LD_VAR 0 2
59093: RET
// export function ResetHc ; begin
59094: LD_INT 0
59096: PPUSH
// InitHc ;
59097: CALL_OW 19
// hc_importance := 0 ;
59101: LD_ADDR_OWVAR 32
59105: PUSH
59106: LD_INT 0
59108: ST_TO_ADDR
// end ;
59109: LD_VAR 0 1
59113: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59114: LD_INT 0
59116: PPUSH
59117: PPUSH
59118: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59119: LD_ADDR_VAR 0 6
59123: PUSH
59124: LD_VAR 0 1
59128: PUSH
59129: LD_VAR 0 3
59133: PLUS
59134: PUSH
59135: LD_INT 2
59137: DIV
59138: ST_TO_ADDR
// if _x < 0 then
59139: LD_VAR 0 6
59143: PUSH
59144: LD_INT 0
59146: LESS
59147: IFFALSE 59164
// _x := _x * - 1 ;
59149: LD_ADDR_VAR 0 6
59153: PUSH
59154: LD_VAR 0 6
59158: PUSH
59159: LD_INT 1
59161: NEG
59162: MUL
59163: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59164: LD_ADDR_VAR 0 7
59168: PUSH
59169: LD_VAR 0 2
59173: PUSH
59174: LD_VAR 0 4
59178: PLUS
59179: PUSH
59180: LD_INT 2
59182: DIV
59183: ST_TO_ADDR
// if _y < 0 then
59184: LD_VAR 0 7
59188: PUSH
59189: LD_INT 0
59191: LESS
59192: IFFALSE 59209
// _y := _y * - 1 ;
59194: LD_ADDR_VAR 0 7
59198: PUSH
59199: LD_VAR 0 7
59203: PUSH
59204: LD_INT 1
59206: NEG
59207: MUL
59208: ST_TO_ADDR
// result := [ _x , _y ] ;
59209: LD_ADDR_VAR 0 5
59213: PUSH
59214: LD_VAR 0 6
59218: PUSH
59219: LD_VAR 0 7
59223: PUSH
59224: EMPTY
59225: LIST
59226: LIST
59227: ST_TO_ADDR
// end ;
59228: LD_VAR 0 5
59232: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59233: LD_INT 0
59235: PPUSH
59236: PPUSH
59237: PPUSH
59238: PPUSH
// task := GetTaskList ( unit ) ;
59239: LD_ADDR_VAR 0 7
59243: PUSH
59244: LD_VAR 0 1
59248: PPUSH
59249: CALL_OW 437
59253: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59254: LD_VAR 0 7
59258: NOT
59259: PUSH
59260: LD_VAR 0 1
59264: PPUSH
59265: LD_VAR 0 2
59269: PPUSH
59270: CALL_OW 308
59274: NOT
59275: AND
59276: IFFALSE 59280
// exit ;
59278: GO 59398
// if IsInArea ( unit , area ) then
59280: LD_VAR 0 1
59284: PPUSH
59285: LD_VAR 0 2
59289: PPUSH
59290: CALL_OW 308
59294: IFFALSE 59312
// begin ComMoveToArea ( unit , goAway ) ;
59296: LD_VAR 0 1
59300: PPUSH
59301: LD_VAR 0 3
59305: PPUSH
59306: CALL_OW 113
// exit ;
59310: GO 59398
// end ; if task [ 1 ] [ 1 ] <> M then
59312: LD_VAR 0 7
59316: PUSH
59317: LD_INT 1
59319: ARRAY
59320: PUSH
59321: LD_INT 1
59323: ARRAY
59324: PUSH
59325: LD_STRING M
59327: NONEQUAL
59328: IFFALSE 59332
// exit ;
59330: GO 59398
// x := task [ 1 ] [ 2 ] ;
59332: LD_ADDR_VAR 0 5
59336: PUSH
59337: LD_VAR 0 7
59341: PUSH
59342: LD_INT 1
59344: ARRAY
59345: PUSH
59346: LD_INT 2
59348: ARRAY
59349: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59350: LD_ADDR_VAR 0 6
59354: PUSH
59355: LD_VAR 0 7
59359: PUSH
59360: LD_INT 1
59362: ARRAY
59363: PUSH
59364: LD_INT 3
59366: ARRAY
59367: ST_TO_ADDR
// if InArea ( x , y , area ) then
59368: LD_VAR 0 5
59372: PPUSH
59373: LD_VAR 0 6
59377: PPUSH
59378: LD_VAR 0 2
59382: PPUSH
59383: CALL_OW 309
59387: IFFALSE 59398
// ComStop ( unit ) ;
59389: LD_VAR 0 1
59393: PPUSH
59394: CALL_OW 141
// end ;
59398: LD_VAR 0 4
59402: RET
// export function Abs ( value ) ; begin
59403: LD_INT 0
59405: PPUSH
// result := value ;
59406: LD_ADDR_VAR 0 2
59410: PUSH
59411: LD_VAR 0 1
59415: ST_TO_ADDR
// if value < 0 then
59416: LD_VAR 0 1
59420: PUSH
59421: LD_INT 0
59423: LESS
59424: IFFALSE 59441
// result := value * - 1 ;
59426: LD_ADDR_VAR 0 2
59430: PUSH
59431: LD_VAR 0 1
59435: PUSH
59436: LD_INT 1
59438: NEG
59439: MUL
59440: ST_TO_ADDR
// end ;
59441: LD_VAR 0 2
59445: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59446: LD_INT 0
59448: PPUSH
59449: PPUSH
59450: PPUSH
59451: PPUSH
59452: PPUSH
59453: PPUSH
59454: PPUSH
59455: PPUSH
// if not unit or not building then
59456: LD_VAR 0 1
59460: NOT
59461: PUSH
59462: LD_VAR 0 2
59466: NOT
59467: OR
59468: IFFALSE 59472
// exit ;
59470: GO 59698
// x := GetX ( building ) ;
59472: LD_ADDR_VAR 0 4
59476: PUSH
59477: LD_VAR 0 2
59481: PPUSH
59482: CALL_OW 250
59486: ST_TO_ADDR
// y := GetY ( building ) ;
59487: LD_ADDR_VAR 0 6
59491: PUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: CALL_OW 251
59501: ST_TO_ADDR
// d := GetDir ( building ) ;
59502: LD_ADDR_VAR 0 8
59506: PUSH
59507: LD_VAR 0 2
59511: PPUSH
59512: CALL_OW 254
59516: ST_TO_ADDR
// r := 4 ;
59517: LD_ADDR_VAR 0 9
59521: PUSH
59522: LD_INT 4
59524: ST_TO_ADDR
// for i := 1 to 5 do
59525: LD_ADDR_VAR 0 10
59529: PUSH
59530: DOUBLE
59531: LD_INT 1
59533: DEC
59534: ST_TO_ADDR
59535: LD_INT 5
59537: PUSH
59538: FOR_TO
59539: IFFALSE 59696
// begin _x := ShiftX ( x , d , r + i ) ;
59541: LD_ADDR_VAR 0 5
59545: PUSH
59546: LD_VAR 0 4
59550: PPUSH
59551: LD_VAR 0 8
59555: PPUSH
59556: LD_VAR 0 9
59560: PUSH
59561: LD_VAR 0 10
59565: PLUS
59566: PPUSH
59567: CALL_OW 272
59571: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59572: LD_ADDR_VAR 0 7
59576: PUSH
59577: LD_VAR 0 6
59581: PPUSH
59582: LD_VAR 0 8
59586: PPUSH
59587: LD_VAR 0 9
59591: PUSH
59592: LD_VAR 0 10
59596: PLUS
59597: PPUSH
59598: CALL_OW 273
59602: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59603: LD_VAR 0 5
59607: PPUSH
59608: LD_VAR 0 7
59612: PPUSH
59613: CALL_OW 488
59617: PUSH
59618: LD_VAR 0 5
59622: PPUSH
59623: LD_VAR 0 7
59627: PPUSH
59628: CALL_OW 428
59632: PPUSH
59633: CALL_OW 247
59637: PUSH
59638: LD_INT 3
59640: PUSH
59641: LD_INT 2
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: IN
59648: NOT
59649: AND
59650: IFFALSE 59694
// begin ComMoveXY ( unit , _x , _y ) ;
59652: LD_VAR 0 1
59656: PPUSH
59657: LD_VAR 0 5
59661: PPUSH
59662: LD_VAR 0 7
59666: PPUSH
59667: CALL_OW 111
// result := [ _x , _y ] ;
59671: LD_ADDR_VAR 0 3
59675: PUSH
59676: LD_VAR 0 5
59680: PUSH
59681: LD_VAR 0 7
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: ST_TO_ADDR
// exit ;
59690: POP
59691: POP
59692: GO 59698
// end ; end ;
59694: GO 59538
59696: POP
59697: POP
// end ;
59698: LD_VAR 0 3
59702: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59703: LD_INT 0
59705: PPUSH
59706: PPUSH
59707: PPUSH
// result := 0 ;
59708: LD_ADDR_VAR 0 3
59712: PUSH
59713: LD_INT 0
59715: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59716: LD_VAR 0 1
59720: PUSH
59721: LD_INT 0
59723: LESS
59724: PUSH
59725: LD_VAR 0 1
59729: PUSH
59730: LD_INT 8
59732: GREATER
59733: OR
59734: PUSH
59735: LD_VAR 0 2
59739: PUSH
59740: LD_INT 0
59742: LESS
59743: OR
59744: PUSH
59745: LD_VAR 0 2
59749: PUSH
59750: LD_INT 8
59752: GREATER
59753: OR
59754: IFFALSE 59758
// exit ;
59756: GO 59833
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59758: LD_ADDR_VAR 0 4
59762: PUSH
59763: LD_INT 22
59765: PUSH
59766: LD_VAR 0 2
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PPUSH
59775: CALL_OW 69
59779: PUSH
59780: FOR_IN
59781: IFFALSE 59831
// begin un := UnitShoot ( i ) ;
59783: LD_ADDR_VAR 0 5
59787: PUSH
59788: LD_VAR 0 4
59792: PPUSH
59793: CALL_OW 504
59797: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59798: LD_VAR 0 5
59802: PPUSH
59803: CALL_OW 255
59807: PUSH
59808: LD_VAR 0 1
59812: EQUAL
59813: IFFALSE 59829
// begin result := un ;
59815: LD_ADDR_VAR 0 3
59819: PUSH
59820: LD_VAR 0 5
59824: ST_TO_ADDR
// exit ;
59825: POP
59826: POP
59827: GO 59833
// end ; end ;
59829: GO 59780
59831: POP
59832: POP
// end ;
59833: LD_VAR 0 3
59837: RET
// export function GetCargoBay ( units ) ; begin
59838: LD_INT 0
59840: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59841: LD_ADDR_VAR 0 2
59845: PUSH
59846: LD_VAR 0 1
59850: PPUSH
59851: LD_INT 2
59853: PUSH
59854: LD_INT 34
59856: PUSH
59857: LD_INT 12
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: PUSH
59864: LD_INT 34
59866: PUSH
59867: LD_INT 51
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 34
59876: PUSH
59877: LD_INT 32
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: PUSH
59884: LD_INT 34
59886: PUSH
59887: LD_INT 89
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PUSH
59894: EMPTY
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: PPUSH
59901: CALL_OW 72
59905: ST_TO_ADDR
// end ;
59906: LD_VAR 0 2
59910: RET
// export function Negate ( value ) ; begin
59911: LD_INT 0
59913: PPUSH
// result := not value ;
59914: LD_ADDR_VAR 0 2
59918: PUSH
59919: LD_VAR 0 1
59923: NOT
59924: ST_TO_ADDR
// end ;
59925: LD_VAR 0 2
59929: RET
// export function Inc ( value ) ; begin
59930: LD_INT 0
59932: PPUSH
// result := value + 1 ;
59933: LD_ADDR_VAR 0 2
59937: PUSH
59938: LD_VAR 0 1
59942: PUSH
59943: LD_INT 1
59945: PLUS
59946: ST_TO_ADDR
// end ;
59947: LD_VAR 0 2
59951: RET
// export function Dec ( value ) ; begin
59952: LD_INT 0
59954: PPUSH
// result := value - 1 ;
59955: LD_ADDR_VAR 0 2
59959: PUSH
59960: LD_VAR 0 1
59964: PUSH
59965: LD_INT 1
59967: MINUS
59968: ST_TO_ADDR
// end ;
59969: LD_VAR 0 2
59973: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59974: LD_INT 0
59976: PPUSH
59977: PPUSH
59978: PPUSH
59979: PPUSH
59980: PPUSH
59981: PPUSH
59982: PPUSH
59983: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59984: LD_VAR 0 1
59988: PPUSH
59989: LD_VAR 0 2
59993: PPUSH
59994: CALL_OW 488
59998: NOT
59999: PUSH
60000: LD_VAR 0 3
60004: PPUSH
60005: LD_VAR 0 4
60009: PPUSH
60010: CALL_OW 488
60014: NOT
60015: OR
60016: IFFALSE 60029
// begin result := - 1 ;
60018: LD_ADDR_VAR 0 5
60022: PUSH
60023: LD_INT 1
60025: NEG
60026: ST_TO_ADDR
// exit ;
60027: GO 60264
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60029: LD_ADDR_VAR 0 12
60033: PUSH
60034: LD_VAR 0 1
60038: PPUSH
60039: LD_VAR 0 2
60043: PPUSH
60044: LD_VAR 0 3
60048: PPUSH
60049: LD_VAR 0 4
60053: PPUSH
60054: CALL 59114 0 4
60058: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60059: LD_ADDR_VAR 0 11
60063: PUSH
60064: LD_VAR 0 1
60068: PPUSH
60069: LD_VAR 0 2
60073: PPUSH
60074: LD_VAR 0 12
60078: PUSH
60079: LD_INT 1
60081: ARRAY
60082: PPUSH
60083: LD_VAR 0 12
60087: PUSH
60088: LD_INT 2
60090: ARRAY
60091: PPUSH
60092: CALL_OW 298
60096: ST_TO_ADDR
// distance := 9999 ;
60097: LD_ADDR_VAR 0 10
60101: PUSH
60102: LD_INT 9999
60104: ST_TO_ADDR
// for i := 0 to 5 do
60105: LD_ADDR_VAR 0 6
60109: PUSH
60110: DOUBLE
60111: LD_INT 0
60113: DEC
60114: ST_TO_ADDR
60115: LD_INT 5
60117: PUSH
60118: FOR_TO
60119: IFFALSE 60262
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60121: LD_ADDR_VAR 0 7
60125: PUSH
60126: LD_VAR 0 1
60130: PPUSH
60131: LD_VAR 0 6
60135: PPUSH
60136: LD_VAR 0 11
60140: PPUSH
60141: CALL_OW 272
60145: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60146: LD_ADDR_VAR 0 8
60150: PUSH
60151: LD_VAR 0 2
60155: PPUSH
60156: LD_VAR 0 6
60160: PPUSH
60161: LD_VAR 0 11
60165: PPUSH
60166: CALL_OW 273
60170: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60171: LD_VAR 0 7
60175: PPUSH
60176: LD_VAR 0 8
60180: PPUSH
60181: CALL_OW 488
60185: NOT
60186: IFFALSE 60190
// continue ;
60188: GO 60118
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60190: LD_ADDR_VAR 0 9
60194: PUSH
60195: LD_VAR 0 12
60199: PUSH
60200: LD_INT 1
60202: ARRAY
60203: PPUSH
60204: LD_VAR 0 12
60208: PUSH
60209: LD_INT 2
60211: ARRAY
60212: PPUSH
60213: LD_VAR 0 7
60217: PPUSH
60218: LD_VAR 0 8
60222: PPUSH
60223: CALL_OW 298
60227: ST_TO_ADDR
// if tmp < distance then
60228: LD_VAR 0 9
60232: PUSH
60233: LD_VAR 0 10
60237: LESS
60238: IFFALSE 60260
// begin result := i ;
60240: LD_ADDR_VAR 0 5
60244: PUSH
60245: LD_VAR 0 6
60249: ST_TO_ADDR
// distance := tmp ;
60250: LD_ADDR_VAR 0 10
60254: PUSH
60255: LD_VAR 0 9
60259: ST_TO_ADDR
// end ; end ;
60260: GO 60118
60262: POP
60263: POP
// end ;
60264: LD_VAR 0 5
60268: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60269: LD_INT 0
60271: PPUSH
60272: PPUSH
// if not driver or not IsInUnit ( driver ) then
60273: LD_VAR 0 1
60277: NOT
60278: PUSH
60279: LD_VAR 0 1
60283: PPUSH
60284: CALL_OW 310
60288: NOT
60289: OR
60290: IFFALSE 60294
// exit ;
60292: GO 60384
// vehicle := IsInUnit ( driver ) ;
60294: LD_ADDR_VAR 0 3
60298: PUSH
60299: LD_VAR 0 1
60303: PPUSH
60304: CALL_OW 310
60308: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60309: LD_VAR 0 1
60313: PPUSH
60314: LD_STRING \
60316: PUSH
60317: LD_INT 0
60319: PUSH
60320: LD_INT 0
60322: PUSH
60323: LD_INT 0
60325: PUSH
60326: LD_INT 0
60328: PUSH
60329: LD_INT 0
60331: PUSH
60332: LD_INT 0
60334: PUSH
60335: EMPTY
60336: LIST
60337: LIST
60338: LIST
60339: LIST
60340: LIST
60341: LIST
60342: LIST
60343: PUSH
60344: LD_STRING E
60346: PUSH
60347: LD_INT 0
60349: PUSH
60350: LD_INT 0
60352: PUSH
60353: LD_VAR 0 3
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: LD_INT 0
60366: PUSH
60367: EMPTY
60368: LIST
60369: LIST
60370: LIST
60371: LIST
60372: LIST
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PPUSH
60380: CALL_OW 446
// end ;
60384: LD_VAR 0 2
60388: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60389: LD_INT 0
60391: PPUSH
60392: PPUSH
// if not driver or not IsInUnit ( driver ) then
60393: LD_VAR 0 1
60397: NOT
60398: PUSH
60399: LD_VAR 0 1
60403: PPUSH
60404: CALL_OW 310
60408: NOT
60409: OR
60410: IFFALSE 60414
// exit ;
60412: GO 60504
// vehicle := IsInUnit ( driver ) ;
60414: LD_ADDR_VAR 0 3
60418: PUSH
60419: LD_VAR 0 1
60423: PPUSH
60424: CALL_OW 310
60428: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60429: LD_VAR 0 1
60433: PPUSH
60434: LD_STRING \
60436: PUSH
60437: LD_INT 0
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: LD_INT 0
60448: PUSH
60449: LD_INT 0
60451: PUSH
60452: LD_INT 0
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: PUSH
60464: LD_STRING E
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: LD_INT 0
60472: PUSH
60473: LD_VAR 0 3
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_INT 0
60483: PUSH
60484: LD_INT 0
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: LIST
60495: PUSH
60496: EMPTY
60497: LIST
60498: LIST
60499: PPUSH
60500: CALL_OW 447
// end ;
60504: LD_VAR 0 2
60508: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60509: LD_INT 0
60511: PPUSH
60512: PPUSH
60513: PPUSH
// tmp := [ ] ;
60514: LD_ADDR_VAR 0 5
60518: PUSH
60519: EMPTY
60520: ST_TO_ADDR
// for i in units do
60521: LD_ADDR_VAR 0 4
60525: PUSH
60526: LD_VAR 0 1
60530: PUSH
60531: FOR_IN
60532: IFFALSE 60570
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60534: LD_ADDR_VAR 0 5
60538: PUSH
60539: LD_VAR 0 5
60543: PPUSH
60544: LD_VAR 0 5
60548: PUSH
60549: LD_INT 1
60551: PLUS
60552: PPUSH
60553: LD_VAR 0 4
60557: PPUSH
60558: CALL_OW 256
60562: PPUSH
60563: CALL_OW 2
60567: ST_TO_ADDR
60568: GO 60531
60570: POP
60571: POP
// if not tmp then
60572: LD_VAR 0 5
60576: NOT
60577: IFFALSE 60581
// exit ;
60579: GO 60629
// if asc then
60581: LD_VAR 0 2
60585: IFFALSE 60609
// result := SortListByListAsc ( units , tmp ) else
60587: LD_ADDR_VAR 0 3
60591: PUSH
60592: LD_VAR 0 1
60596: PPUSH
60597: LD_VAR 0 5
60601: PPUSH
60602: CALL_OW 76
60606: ST_TO_ADDR
60607: GO 60629
// result := SortListByListDesc ( units , tmp ) ;
60609: LD_ADDR_VAR 0 3
60613: PUSH
60614: LD_VAR 0 1
60618: PPUSH
60619: LD_VAR 0 5
60623: PPUSH
60624: CALL_OW 77
60628: ST_TO_ADDR
// end ;
60629: LD_VAR 0 3
60633: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60634: LD_INT 0
60636: PPUSH
60637: PPUSH
// task := GetTaskList ( mech ) ;
60638: LD_ADDR_VAR 0 4
60642: PUSH
60643: LD_VAR 0 1
60647: PPUSH
60648: CALL_OW 437
60652: ST_TO_ADDR
// if not task then
60653: LD_VAR 0 4
60657: NOT
60658: IFFALSE 60662
// exit ;
60660: GO 60704
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60662: LD_ADDR_VAR 0 3
60666: PUSH
60667: LD_VAR 0 4
60671: PUSH
60672: LD_INT 1
60674: ARRAY
60675: PUSH
60676: LD_INT 1
60678: ARRAY
60679: PUSH
60680: LD_STRING r
60682: EQUAL
60683: PUSH
60684: LD_VAR 0 4
60688: PUSH
60689: LD_INT 1
60691: ARRAY
60692: PUSH
60693: LD_INT 4
60695: ARRAY
60696: PUSH
60697: LD_VAR 0 2
60701: EQUAL
60702: AND
60703: ST_TO_ADDR
// end ;
60704: LD_VAR 0 3
60708: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60709: LD_INT 0
60711: PPUSH
// SetDir ( unit , d ) ;
60712: LD_VAR 0 1
60716: PPUSH
60717: LD_VAR 0 4
60721: PPUSH
60722: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60726: LD_VAR 0 1
60730: PPUSH
60731: LD_VAR 0 2
60735: PPUSH
60736: LD_VAR 0 3
60740: PPUSH
60741: LD_VAR 0 5
60745: PPUSH
60746: CALL_OW 48
// end ;
60750: LD_VAR 0 6
60754: RET
// export function ToNaturalNumber ( number ) ; begin
60755: LD_INT 0
60757: PPUSH
// result := number div 1 ;
60758: LD_ADDR_VAR 0 2
60762: PUSH
60763: LD_VAR 0 1
60767: PUSH
60768: LD_INT 1
60770: DIV
60771: ST_TO_ADDR
// if number < 0 then
60772: LD_VAR 0 1
60776: PUSH
60777: LD_INT 0
60779: LESS
60780: IFFALSE 60790
// result := 0 ;
60782: LD_ADDR_VAR 0 2
60786: PUSH
60787: LD_INT 0
60789: ST_TO_ADDR
// end ;
60790: LD_VAR 0 2
60794: RET
// export function SortByClass ( units , class ) ; var un ; begin
60795: LD_INT 0
60797: PPUSH
60798: PPUSH
// if not units or not class then
60799: LD_VAR 0 1
60803: NOT
60804: PUSH
60805: LD_VAR 0 2
60809: NOT
60810: OR
60811: IFFALSE 60815
// exit ;
60813: GO 60910
// result := [ ] ;
60815: LD_ADDR_VAR 0 3
60819: PUSH
60820: EMPTY
60821: ST_TO_ADDR
// for un in units do
60822: LD_ADDR_VAR 0 4
60826: PUSH
60827: LD_VAR 0 1
60831: PUSH
60832: FOR_IN
60833: IFFALSE 60908
// if GetClass ( un ) = class then
60835: LD_VAR 0 4
60839: PPUSH
60840: CALL_OW 257
60844: PUSH
60845: LD_VAR 0 2
60849: EQUAL
60850: IFFALSE 60877
// result := Insert ( result , 1 , un ) else
60852: LD_ADDR_VAR 0 3
60856: PUSH
60857: LD_VAR 0 3
60861: PPUSH
60862: LD_INT 1
60864: PPUSH
60865: LD_VAR 0 4
60869: PPUSH
60870: CALL_OW 2
60874: ST_TO_ADDR
60875: GO 60906
// result := Replace ( result , result + 1 , un ) ;
60877: LD_ADDR_VAR 0 3
60881: PUSH
60882: LD_VAR 0 3
60886: PPUSH
60887: LD_VAR 0 3
60891: PUSH
60892: LD_INT 1
60894: PLUS
60895: PPUSH
60896: LD_VAR 0 4
60900: PPUSH
60901: CALL_OW 1
60905: ST_TO_ADDR
60906: GO 60832
60908: POP
60909: POP
// end ;
60910: LD_VAR 0 3
60914: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60915: LD_INT 0
60917: PPUSH
60918: PPUSH
60919: PPUSH
60920: PPUSH
60921: PPUSH
60922: PPUSH
60923: PPUSH
// result := [ ] ;
60924: LD_ADDR_VAR 0 4
60928: PUSH
60929: EMPTY
60930: ST_TO_ADDR
// if x - r < 0 then
60931: LD_VAR 0 1
60935: PUSH
60936: LD_VAR 0 3
60940: MINUS
60941: PUSH
60942: LD_INT 0
60944: LESS
60945: IFFALSE 60957
// min_x := 0 else
60947: LD_ADDR_VAR 0 8
60951: PUSH
60952: LD_INT 0
60954: ST_TO_ADDR
60955: GO 60973
// min_x := x - r ;
60957: LD_ADDR_VAR 0 8
60961: PUSH
60962: LD_VAR 0 1
60966: PUSH
60967: LD_VAR 0 3
60971: MINUS
60972: ST_TO_ADDR
// if y - r < 0 then
60973: LD_VAR 0 2
60977: PUSH
60978: LD_VAR 0 3
60982: MINUS
60983: PUSH
60984: LD_INT 0
60986: LESS
60987: IFFALSE 60999
// min_y := 0 else
60989: LD_ADDR_VAR 0 7
60993: PUSH
60994: LD_INT 0
60996: ST_TO_ADDR
60997: GO 61015
// min_y := y - r ;
60999: LD_ADDR_VAR 0 7
61003: PUSH
61004: LD_VAR 0 2
61008: PUSH
61009: LD_VAR 0 3
61013: MINUS
61014: ST_TO_ADDR
// max_x := x + r ;
61015: LD_ADDR_VAR 0 9
61019: PUSH
61020: LD_VAR 0 1
61024: PUSH
61025: LD_VAR 0 3
61029: PLUS
61030: ST_TO_ADDR
// max_y := y + r ;
61031: LD_ADDR_VAR 0 10
61035: PUSH
61036: LD_VAR 0 2
61040: PUSH
61041: LD_VAR 0 3
61045: PLUS
61046: ST_TO_ADDR
// for _x = min_x to max_x do
61047: LD_ADDR_VAR 0 5
61051: PUSH
61052: DOUBLE
61053: LD_VAR 0 8
61057: DEC
61058: ST_TO_ADDR
61059: LD_VAR 0 9
61063: PUSH
61064: FOR_TO
61065: IFFALSE 61166
// for _y = min_y to max_y do
61067: LD_ADDR_VAR 0 6
61071: PUSH
61072: DOUBLE
61073: LD_VAR 0 7
61077: DEC
61078: ST_TO_ADDR
61079: LD_VAR 0 10
61083: PUSH
61084: FOR_TO
61085: IFFALSE 61162
// begin if not ValidHex ( _x , _y ) then
61087: LD_VAR 0 5
61091: PPUSH
61092: LD_VAR 0 6
61096: PPUSH
61097: CALL_OW 488
61101: NOT
61102: IFFALSE 61106
// continue ;
61104: GO 61084
// if GetResourceTypeXY ( _x , _y ) then
61106: LD_VAR 0 5
61110: PPUSH
61111: LD_VAR 0 6
61115: PPUSH
61116: CALL_OW 283
61120: IFFALSE 61160
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61122: LD_ADDR_VAR 0 4
61126: PUSH
61127: LD_VAR 0 4
61131: PPUSH
61132: LD_VAR 0 4
61136: PUSH
61137: LD_INT 1
61139: PLUS
61140: PPUSH
61141: LD_VAR 0 5
61145: PUSH
61146: LD_VAR 0 6
61150: PUSH
61151: EMPTY
61152: LIST
61153: LIST
61154: PPUSH
61155: CALL_OW 1
61159: ST_TO_ADDR
// end ;
61160: GO 61084
61162: POP
61163: POP
61164: GO 61064
61166: POP
61167: POP
// end ;
61168: LD_VAR 0 4
61172: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61173: LD_INT 0
61175: PPUSH
61176: PPUSH
61177: PPUSH
61178: PPUSH
61179: PPUSH
61180: PPUSH
61181: PPUSH
61182: PPUSH
// if not units then
61183: LD_VAR 0 1
61187: NOT
61188: IFFALSE 61192
// exit ;
61190: GO 61716
// result := UnitFilter ( units , [ f_ok ] ) ;
61192: LD_ADDR_VAR 0 3
61196: PUSH
61197: LD_VAR 0 1
61201: PPUSH
61202: LD_INT 50
61204: PUSH
61205: EMPTY
61206: LIST
61207: PPUSH
61208: CALL_OW 72
61212: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61213: LD_ADDR_VAR 0 8
61217: PUSH
61218: LD_VAR 0 1
61222: PUSH
61223: LD_INT 1
61225: ARRAY
61226: PPUSH
61227: CALL_OW 255
61231: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
61232: LD_ADDR_VAR 0 10
61236: PUSH
61237: LD_INT 29
61239: PUSH
61240: LD_INT 91
61242: PUSH
61243: LD_INT 49
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: LIST
61250: ST_TO_ADDR
// if not result then
61251: LD_VAR 0 3
61255: NOT
61256: IFFALSE 61260
// exit ;
61258: GO 61716
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61260: LD_ADDR_VAR 0 5
61264: PUSH
61265: LD_INT 81
61267: PUSH
61268: LD_VAR 0 8
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PPUSH
61277: CALL_OW 69
61281: ST_TO_ADDR
// for i in result do
61282: LD_ADDR_VAR 0 4
61286: PUSH
61287: LD_VAR 0 3
61291: PUSH
61292: FOR_IN
61293: IFFALSE 61714
// begin tag := GetTag ( i ) + 1 ;
61295: LD_ADDR_VAR 0 9
61299: PUSH
61300: LD_VAR 0 4
61304: PPUSH
61305: CALL_OW 110
61309: PUSH
61310: LD_INT 1
61312: PLUS
61313: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61314: LD_ADDR_VAR 0 7
61318: PUSH
61319: LD_VAR 0 4
61323: PPUSH
61324: CALL_OW 250
61328: PPUSH
61329: LD_VAR 0 4
61333: PPUSH
61334: CALL_OW 251
61338: PPUSH
61339: LD_INT 6
61341: PPUSH
61342: CALL 60915 0 3
61346: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
61347: LD_VAR 0 4
61351: PPUSH
61352: CALL_OW 247
61356: PUSH
61357: LD_INT 2
61359: EQUAL
61360: PUSH
61361: LD_VAR 0 7
61365: AND
61366: PUSH
61367: LD_VAR 0 4
61371: PPUSH
61372: CALL_OW 264
61376: PUSH
61377: LD_VAR 0 10
61381: IN
61382: NOT
61383: AND
61384: IFFALSE 61423
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61386: LD_VAR 0 4
61390: PPUSH
61391: LD_VAR 0 7
61395: PUSH
61396: LD_INT 1
61398: ARRAY
61399: PUSH
61400: LD_INT 1
61402: ARRAY
61403: PPUSH
61404: LD_VAR 0 7
61408: PUSH
61409: LD_INT 1
61411: ARRAY
61412: PUSH
61413: LD_INT 2
61415: ARRAY
61416: PPUSH
61417: CALL_OW 116
61421: GO 61712
// if path > tag then
61423: LD_VAR 0 2
61427: PUSH
61428: LD_VAR 0 9
61432: GREATER
61433: IFFALSE 61641
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
61435: LD_ADDR_VAR 0 6
61439: PUSH
61440: LD_VAR 0 5
61444: PPUSH
61445: LD_INT 91
61447: PUSH
61448: LD_VAR 0 4
61452: PUSH
61453: LD_INT 8
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: LIST
61460: PPUSH
61461: CALL_OW 72
61465: ST_TO_ADDR
// if nearEnemy then
61466: LD_VAR 0 6
61470: IFFALSE 61539
// begin if GetWeapon ( i ) = ru_time_lapser then
61472: LD_VAR 0 4
61476: PPUSH
61477: CALL_OW 264
61481: PUSH
61482: LD_INT 49
61484: EQUAL
61485: IFFALSE 61513
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
61487: LD_VAR 0 4
61491: PPUSH
61492: LD_VAR 0 6
61496: PPUSH
61497: LD_VAR 0 4
61501: PPUSH
61502: CALL_OW 74
61506: PPUSH
61507: CALL_OW 112
61511: GO 61537
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
61513: LD_VAR 0 4
61517: PPUSH
61518: LD_VAR 0 6
61522: PPUSH
61523: LD_VAR 0 4
61527: PPUSH
61528: CALL_OW 74
61532: PPUSH
61533: NOP4
// end else
61537: GO 61639
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61539: LD_VAR 0 4
61543: PPUSH
61544: LD_VAR 0 2
61548: PUSH
61549: LD_VAR 0 9
61553: ARRAY
61554: PUSH
61555: LD_INT 1
61557: ARRAY
61558: PPUSH
61559: LD_VAR 0 2
61563: PUSH
61564: LD_VAR 0 9
61568: ARRAY
61569: PUSH
61570: LD_INT 2
61572: ARRAY
61573: PPUSH
61574: CALL_OW 297
61578: PUSH
61579: LD_INT 6
61581: GREATER
61582: IFFALSE 61625
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61584: LD_VAR 0 4
61588: PPUSH
61589: LD_VAR 0 2
61593: PUSH
61594: LD_VAR 0 9
61598: ARRAY
61599: PUSH
61600: LD_INT 1
61602: ARRAY
61603: PPUSH
61604: LD_VAR 0 2
61608: PUSH
61609: LD_VAR 0 9
61613: ARRAY
61614: PUSH
61615: LD_INT 2
61617: ARRAY
61618: PPUSH
61619: CALL_OW 114
61623: GO 61639
// SetTag ( i , tag ) ;
61625: LD_VAR 0 4
61629: PPUSH
61630: LD_VAR 0 9
61634: PPUSH
61635: CALL_OW 109
// end else
61639: GO 61712
// if enemy then
61641: LD_VAR 0 5
61645: IFFALSE 61712
// begin if GetWeapon ( i ) = ru_time_lapser then
61647: LD_VAR 0 4
61651: PPUSH
61652: CALL_OW 264
61656: PUSH
61657: LD_INT 49
61659: EQUAL
61660: IFFALSE 61688
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61662: LD_VAR 0 4
61666: PPUSH
61667: LD_VAR 0 5
61671: PPUSH
61672: LD_VAR 0 4
61676: PPUSH
61677: CALL_OW 74
61681: PPUSH
61682: CALL_OW 112
61686: GO 61712
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61688: LD_VAR 0 4
61692: PPUSH
61693: LD_VAR 0 5
61697: PPUSH
61698: LD_VAR 0 4
61702: PPUSH
61703: CALL_OW 74
61707: PPUSH
61708: NOP4
// end ; end ;
61712: GO 61292
61714: POP
61715: POP
// end ;
61716: LD_VAR 0 3
61720: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61721: LD_INT 0
61723: PPUSH
61724: PPUSH
61725: PPUSH
// if not unit or IsInUnit ( unit ) then
61726: LD_VAR 0 1
61730: NOT
61731: PUSH
61732: LD_VAR 0 1
61736: PPUSH
61737: CALL_OW 310
61741: OR
61742: IFFALSE 61746
// exit ;
61744: GO 61837
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61746: LD_ADDR_VAR 0 4
61750: PUSH
61751: LD_VAR 0 1
61755: PPUSH
61756: CALL_OW 250
61760: PPUSH
61761: LD_VAR 0 2
61765: PPUSH
61766: LD_INT 1
61768: PPUSH
61769: CALL_OW 272
61773: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61774: LD_ADDR_VAR 0 5
61778: PUSH
61779: LD_VAR 0 1
61783: PPUSH
61784: CALL_OW 251
61788: PPUSH
61789: LD_VAR 0 2
61793: PPUSH
61794: LD_INT 1
61796: PPUSH
61797: CALL_OW 273
61801: ST_TO_ADDR
// if ValidHex ( x , y ) then
61802: LD_VAR 0 4
61806: PPUSH
61807: LD_VAR 0 5
61811: PPUSH
61812: CALL_OW 488
61816: IFFALSE 61837
// ComTurnXY ( unit , x , y ) ;
61818: LD_VAR 0 1
61822: PPUSH
61823: LD_VAR 0 4
61827: PPUSH
61828: LD_VAR 0 5
61832: PPUSH
61833: CALL_OW 118
// end ;
61837: LD_VAR 0 3
61841: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61842: LD_INT 0
61844: PPUSH
61845: PPUSH
// result := false ;
61846: LD_ADDR_VAR 0 3
61850: PUSH
61851: LD_INT 0
61853: ST_TO_ADDR
// if not units then
61854: LD_VAR 0 2
61858: NOT
61859: IFFALSE 61863
// exit ;
61861: GO 61908
// for i in units do
61863: LD_ADDR_VAR 0 4
61867: PUSH
61868: LD_VAR 0 2
61872: PUSH
61873: FOR_IN
61874: IFFALSE 61906
// if See ( side , i ) then
61876: LD_VAR 0 1
61880: PPUSH
61881: LD_VAR 0 4
61885: PPUSH
61886: CALL_OW 292
61890: IFFALSE 61904
// begin result := true ;
61892: LD_ADDR_VAR 0 3
61896: PUSH
61897: LD_INT 1
61899: ST_TO_ADDR
// exit ;
61900: POP
61901: POP
61902: GO 61908
// end ;
61904: GO 61873
61906: POP
61907: POP
// end ;
61908: LD_VAR 0 3
61912: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61913: LD_INT 0
61915: PPUSH
61916: PPUSH
61917: PPUSH
61918: PPUSH
// if not unit or not points then
61919: LD_VAR 0 1
61923: NOT
61924: PUSH
61925: LD_VAR 0 2
61929: NOT
61930: OR
61931: IFFALSE 61935
// exit ;
61933: GO 62025
// dist := 99999 ;
61935: LD_ADDR_VAR 0 5
61939: PUSH
61940: LD_INT 99999
61942: ST_TO_ADDR
// for i in points do
61943: LD_ADDR_VAR 0 4
61947: PUSH
61948: LD_VAR 0 2
61952: PUSH
61953: FOR_IN
61954: IFFALSE 62023
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61956: LD_ADDR_VAR 0 6
61960: PUSH
61961: LD_VAR 0 1
61965: PPUSH
61966: LD_VAR 0 4
61970: PUSH
61971: LD_INT 1
61973: ARRAY
61974: PPUSH
61975: LD_VAR 0 4
61979: PUSH
61980: LD_INT 2
61982: ARRAY
61983: PPUSH
61984: CALL_OW 297
61988: ST_TO_ADDR
// if tmpDist < dist then
61989: LD_VAR 0 6
61993: PUSH
61994: LD_VAR 0 5
61998: LESS
61999: IFFALSE 62021
// begin result := i ;
62001: LD_ADDR_VAR 0 3
62005: PUSH
62006: LD_VAR 0 4
62010: ST_TO_ADDR
// dist := tmpDist ;
62011: LD_ADDR_VAR 0 5
62015: PUSH
62016: LD_VAR 0 6
62020: ST_TO_ADDR
// end ; end ;
62021: GO 61953
62023: POP
62024: POP
// end ;
62025: LD_VAR 0 3
62029: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
62030: LD_INT 0
62032: PPUSH
// uc_side := side ;
62033: LD_ADDR_OWVAR 20
62037: PUSH
62038: LD_VAR 0 1
62042: ST_TO_ADDR
// uc_nation := 3 ;
62043: LD_ADDR_OWVAR 21
62047: PUSH
62048: LD_INT 3
62050: ST_TO_ADDR
// vc_chassis := 25 ;
62051: LD_ADDR_OWVAR 37
62055: PUSH
62056: LD_INT 25
62058: ST_TO_ADDR
// vc_engine := engine_siberite ;
62059: LD_ADDR_OWVAR 39
62063: PUSH
62064: LD_INT 3
62066: ST_TO_ADDR
// vc_control := control_computer ;
62067: LD_ADDR_OWVAR 38
62071: PUSH
62072: LD_INT 3
62074: ST_TO_ADDR
// vc_weapon := 59 ;
62075: LD_ADDR_OWVAR 40
62079: PUSH
62080: LD_INT 59
62082: ST_TO_ADDR
// result := CreateVehicle ;
62083: LD_ADDR_VAR 0 5
62087: PUSH
62088: CALL_OW 45
62092: ST_TO_ADDR
// SetDir ( result , d ) ;
62093: LD_VAR 0 5
62097: PPUSH
62098: LD_VAR 0 4
62102: PPUSH
62103: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
62107: LD_VAR 0 5
62111: PPUSH
62112: LD_VAR 0 2
62116: PPUSH
62117: LD_VAR 0 3
62121: PPUSH
62122: LD_INT 0
62124: PPUSH
62125: CALL_OW 48
// end ;
62129: LD_VAR 0 5
62133: RET
// export function GetMultiCargo ( export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
62134: LD_INT 0
62136: PPUSH
62137: PPUSH
62138: PPUSH
62139: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
62140: LD_VAR 0 1
62144: PPUSH
62145: CALL_OW 264
62149: PUSH
62150: LD_INT 91
62152: EQUAL
62153: IFFALSE 62225
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
62155: LD_INT 68
62157: PPUSH
62158: LD_VAR 0 1
62162: PPUSH
62163: CALL_OW 255
62167: PPUSH
62168: CALL_OW 321
62172: PUSH
62173: LD_INT 2
62175: EQUAL
62176: IFFALSE 62188
// eff := 70 else
62178: LD_ADDR_VAR 0 4
62182: PUSH
62183: LD_INT 70
62185: ST_TO_ADDR
62186: GO 62196
// eff := 30 ;
62188: LD_ADDR_VAR 0 4
62192: PUSH
62193: LD_INT 30
62195: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
62196: LD_VAR 0 1
62200: PPUSH
62201: CALL_OW 250
62205: PPUSH
62206: LD_VAR 0 1
62210: PPUSH
62211: CALL_OW 251
62215: PPUSH
62216: LD_VAR 0 4
62220: PPUSH
62221: CALL_OW 495
// end ; end ;
62225: LD_VAR 0 2
62229: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
62230: LD_INT 0
62232: PPUSH
// end ;
62233: LD_VAR 0 4
62237: RET
// export function SOS_Command ( cmd ) ; begin
62238: LD_INT 0
62240: PPUSH
// end ;
62241: LD_VAR 0 2
62245: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
62246: LD_INT 0
62248: PPUSH
// end ;
62249: LD_VAR 0 6
62253: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
62254: LD_INT 0
62256: PPUSH
62257: PPUSH
// if not vehicle or not factory then
62258: LD_VAR 0 1
62262: NOT
62263: PUSH
62264: LD_VAR 0 2
62268: NOT
62269: OR
62270: IFFALSE 62274
// exit ;
62272: GO 62505
// if factoryWaypoints >= factory then
62274: LD_EXP 128
62278: PUSH
62279: LD_VAR 0 2
62283: GREATEREQUAL
62284: IFFALSE 62505
// if factoryWaypoints [ factory ] then
62286: LD_EXP 128
62290: PUSH
62291: LD_VAR 0 2
62295: ARRAY
62296: IFFALSE 62505
// begin if GetControl ( vehicle ) = control_manual then
62298: LD_VAR 0 1
62302: PPUSH
62303: CALL_OW 263
62307: PUSH
62308: LD_INT 1
62310: EQUAL
62311: IFFALSE 62392
// begin driver := IsDrivenBy ( vehicle ) ;
62313: LD_ADDR_VAR 0 4
62317: PUSH
62318: LD_VAR 0 1
62322: PPUSH
62323: CALL_OW 311
62327: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62328: LD_VAR 0 4
62332: PPUSH
62333: LD_EXP 128
62337: PUSH
62338: LD_VAR 0 2
62342: ARRAY
62343: PUSH
62344: LD_INT 3
62346: ARRAY
62347: PPUSH
62348: LD_EXP 128
62352: PUSH
62353: LD_VAR 0 2
62357: ARRAY
62358: PUSH
62359: LD_INT 4
62361: ARRAY
62362: PPUSH
62363: CALL_OW 171
// AddComExitVehicle ( driver ) ;
62367: LD_VAR 0 4
62371: PPUSH
62372: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
62376: LD_VAR 0 4
62380: PPUSH
62381: LD_VAR 0 2
62385: PPUSH
62386: CALL_OW 180
// end else
62390: GO 62505
// if GetControl ( vehicle ) = control_remote then
62392: LD_VAR 0 1
62396: PPUSH
62397: CALL_OW 263
62401: PUSH
62402: LD_INT 2
62404: EQUAL
62405: IFFALSE 62466
// begin wait ( 0 0$2 ) ;
62407: LD_INT 70
62409: PPUSH
62410: CALL_OW 67
// if Connect ( vehicle ) then
62414: LD_VAR 0 1
62418: PPUSH
62419: CALL 29188 0 1
62423: IFFALSE 62464
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62425: LD_VAR 0 1
62429: PPUSH
62430: LD_EXP 128
62434: PUSH
62435: LD_VAR 0 2
62439: ARRAY
62440: PUSH
62441: LD_INT 3
62443: ARRAY
62444: PPUSH
62445: LD_EXP 128
62449: PUSH
62450: LD_VAR 0 2
62454: ARRAY
62455: PUSH
62456: LD_INT 4
62458: ARRAY
62459: PPUSH
62460: CALL_OW 171
// end else
62464: GO 62505
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
62466: LD_VAR 0 1
62470: PPUSH
62471: LD_EXP 128
62475: PUSH
62476: LD_VAR 0 2
62480: ARRAY
62481: PUSH
62482: LD_INT 3
62484: ARRAY
62485: PPUSH
62486: LD_EXP 128
62490: PUSH
62491: LD_VAR 0 2
62495: ARRAY
62496: PUSH
62497: LD_INT 4
62499: ARRAY
62500: PPUSH
62501: CALL_OW 171
// end ; end ;
62505: LD_VAR 0 3
62509: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
62510: LD_INT 0
62512: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
62513: LD_VAR 0 1
62517: PUSH
62518: LD_INT 250
62520: EQUAL
62521: PUSH
62522: LD_VAR 0 2
62526: PPUSH
62527: CALL_OW 264
62531: PUSH
62532: LD_INT 81
62534: EQUAL
62535: AND
62536: IFFALSE 62557
// MinerPlaceMine ( unit , x , y ) ;
62538: LD_VAR 0 2
62542: PPUSH
62543: LD_VAR 0 4
62547: PPUSH
62548: LD_VAR 0 5
62552: PPUSH
62553: CALL 64942 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
62557: LD_VAR 0 1
62561: PUSH
62562: LD_INT 251
62564: EQUAL
62565: PUSH
62566: LD_VAR 0 2
62570: PPUSH
62571: CALL_OW 264
62575: PUSH
62576: LD_INT 81
62578: EQUAL
62579: AND
62580: IFFALSE 62601
// MinerDetonateMine ( unit , x , y ) ;
62582: LD_VAR 0 2
62586: PPUSH
62587: LD_VAR 0 4
62591: PPUSH
62592: LD_VAR 0 5
62596: PPUSH
62597: CALL 65217 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
62601: LD_VAR 0 1
62605: PUSH
62606: LD_INT 252
62608: EQUAL
62609: PUSH
62610: LD_VAR 0 2
62614: PPUSH
62615: CALL_OW 264
62619: PUSH
62620: LD_INT 81
62622: EQUAL
62623: AND
62624: IFFALSE 62645
// MinerCreateMinefield ( unit , x , y ) ;
62626: LD_VAR 0 2
62630: PPUSH
62631: LD_VAR 0 4
62635: PPUSH
62636: LD_VAR 0 5
62640: PPUSH
62641: CALL 65634 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
62645: LD_VAR 0 1
62649: PUSH
62650: LD_INT 253
62652: EQUAL
62653: PUSH
62654: LD_VAR 0 2
62658: PPUSH
62659: CALL_OW 257
62663: PUSH
62664: LD_INT 5
62666: EQUAL
62667: AND
62668: IFFALSE 62689
// ComBinocular ( unit , x , y ) ;
62670: LD_VAR 0 2
62674: PPUSH
62675: LD_VAR 0 4
62679: PPUSH
62680: LD_VAR 0 5
62684: PPUSH
62685: CALL 66003 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
62689: LD_VAR 0 1
62693: PUSH
62694: LD_INT 254
62696: EQUAL
62697: PUSH
62698: LD_VAR 0 2
62702: PPUSH
62703: CALL_OW 264
62707: PUSH
62708: LD_INT 99
62710: EQUAL
62711: AND
62712: PUSH
62713: LD_VAR 0 3
62717: PPUSH
62718: CALL_OW 263
62722: PUSH
62723: LD_INT 3
62725: EQUAL
62726: AND
62727: IFFALSE 62743
// HackDestroyVehicle ( unit , selectedUnit ) ;
62729: LD_VAR 0 2
62733: PPUSH
62734: LD_VAR 0 3
62738: PPUSH
62739: CALL 64306 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
62743: LD_VAR 0 1
62747: PUSH
62748: LD_INT 255
62750: EQUAL
62751: PUSH
62752: LD_VAR 0 2
62756: PPUSH
62757: CALL_OW 264
62761: PUSH
62762: LD_INT 14
62764: PUSH
62765: LD_INT 53
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: IN
62772: AND
62773: PUSH
62774: LD_VAR 0 4
62778: PPUSH
62779: LD_VAR 0 5
62783: PPUSH
62784: CALL_OW 488
62788: AND
62789: IFFALSE 62813
// CutTreeXYR ( unit , x , y , 12 ) ;
62791: LD_VAR 0 2
62795: PPUSH
62796: LD_VAR 0 4
62800: PPUSH
62801: LD_VAR 0 5
62805: PPUSH
62806: LD_INT 12
62808: PPUSH
62809: CALL 62876 0 4
// if cmd = 256 then
62813: LD_VAR 0 1
62817: PUSH
62818: LD_INT 256
62820: EQUAL
62821: IFFALSE 62842
// SetFactoryWaypoint ( unit , x , y ) ;
62823: LD_VAR 0 2
62827: PPUSH
62828: LD_VAR 0 4
62832: PPUSH
62833: LD_VAR 0 5
62837: PPUSH
62838: CALL 80914 0 3
// if cmd = 257 then
62842: LD_VAR 0 1
62846: PUSH
62847: LD_INT 257
62849: EQUAL
62850: IFFALSE 62871
// SetWarehouseGatheringPoint ( unit , x , y ) ;
62852: LD_VAR 0 2
62856: PPUSH
62857: LD_VAR 0 4
62861: PPUSH
62862: LD_VAR 0 5
62866: PPUSH
62867: CALL 81276 0 3
// end ;
62871: LD_VAR 0 6
62875: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
62876: LD_INT 0
62878: PPUSH
62879: PPUSH
62880: PPUSH
62881: PPUSH
62882: PPUSH
62883: PPUSH
62884: PPUSH
62885: PPUSH
62886: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
62887: LD_VAR 0 1
62891: NOT
62892: PUSH
62893: LD_VAR 0 2
62897: PPUSH
62898: LD_VAR 0 3
62902: PPUSH
62903: CALL_OW 488
62907: NOT
62908: OR
62909: PUSH
62910: LD_VAR 0 4
62914: NOT
62915: OR
62916: IFFALSE 62920
// exit ;
62918: GO 63260
// list := [ ] ;
62920: LD_ADDR_VAR 0 13
62924: PUSH
62925: EMPTY
62926: ST_TO_ADDR
// if x - r < 0 then
62927: LD_VAR 0 2
62931: PUSH
62932: LD_VAR 0 4
62936: MINUS
62937: PUSH
62938: LD_INT 0
62940: LESS
62941: IFFALSE 62953
// min_x := 0 else
62943: LD_ADDR_VAR 0 7
62947: PUSH
62948: LD_INT 0
62950: ST_TO_ADDR
62951: GO 62969
// min_x := x - r ;
62953: LD_ADDR_VAR 0 7
62957: PUSH
62958: LD_VAR 0 2
62962: PUSH
62963: LD_VAR 0 4
62967: MINUS
62968: ST_TO_ADDR
// if y - r < 0 then
62969: LD_VAR 0 3
62973: PUSH
62974: LD_VAR 0 4
62978: MINUS
62979: PUSH
62980: LD_INT 0
62982: LESS
62983: IFFALSE 62995
// min_y := 0 else
62985: LD_ADDR_VAR 0 8
62989: PUSH
62990: LD_INT 0
62992: ST_TO_ADDR
62993: GO 63011
// min_y := y - r ;
62995: LD_ADDR_VAR 0 8
62999: PUSH
63000: LD_VAR 0 3
63004: PUSH
63005: LD_VAR 0 4
63009: MINUS
63010: ST_TO_ADDR
// max_x := x + r ;
63011: LD_ADDR_VAR 0 9
63015: PUSH
63016: LD_VAR 0 2
63020: PUSH
63021: LD_VAR 0 4
63025: PLUS
63026: ST_TO_ADDR
// max_y := y + r ;
63027: LD_ADDR_VAR 0 10
63031: PUSH
63032: LD_VAR 0 3
63036: PUSH
63037: LD_VAR 0 4
63041: PLUS
63042: ST_TO_ADDR
// for _x = min_x to max_x do
63043: LD_ADDR_VAR 0 11
63047: PUSH
63048: DOUBLE
63049: LD_VAR 0 7
63053: DEC
63054: ST_TO_ADDR
63055: LD_VAR 0 9
63059: PUSH
63060: FOR_TO
63061: IFFALSE 63178
// for _y = min_y to max_y do
63063: LD_ADDR_VAR 0 12
63067: PUSH
63068: DOUBLE
63069: LD_VAR 0 8
63073: DEC
63074: ST_TO_ADDR
63075: LD_VAR 0 10
63079: PUSH
63080: FOR_TO
63081: IFFALSE 63174
// begin if not ValidHex ( _x , _y ) then
63083: LD_VAR 0 11
63087: PPUSH
63088: LD_VAR 0 12
63092: PPUSH
63093: CALL_OW 488
63097: NOT
63098: IFFALSE 63102
// continue ;
63100: GO 63080
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
63102: LD_VAR 0 11
63106: PPUSH
63107: LD_VAR 0 12
63111: PPUSH
63112: CALL_OW 351
63116: PUSH
63117: LD_VAR 0 11
63121: PPUSH
63122: LD_VAR 0 12
63126: PPUSH
63127: CALL_OW 554
63131: AND
63132: IFFALSE 63172
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
63134: LD_ADDR_VAR 0 13
63138: PUSH
63139: LD_VAR 0 13
63143: PPUSH
63144: LD_VAR 0 13
63148: PUSH
63149: LD_INT 1
63151: PLUS
63152: PPUSH
63153: LD_VAR 0 11
63157: PUSH
63158: LD_VAR 0 12
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PPUSH
63167: CALL_OW 2
63171: ST_TO_ADDR
// end ;
63172: GO 63080
63174: POP
63175: POP
63176: GO 63060
63178: POP
63179: POP
// if not list then
63180: LD_VAR 0 13
63184: NOT
63185: IFFALSE 63189
// exit ;
63187: GO 63260
// for i in list do
63189: LD_ADDR_VAR 0 6
63193: PUSH
63194: LD_VAR 0 13
63198: PUSH
63199: FOR_IN
63200: IFFALSE 63258
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
63202: LD_VAR 0 1
63206: PPUSH
63207: LD_STRING M
63209: PUSH
63210: LD_VAR 0 6
63214: PUSH
63215: LD_INT 1
63217: ARRAY
63218: PUSH
63219: LD_VAR 0 6
63223: PUSH
63224: LD_INT 2
63226: ARRAY
63227: PUSH
63228: LD_INT 0
63230: PUSH
63231: LD_INT 0
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: LD_INT 0
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: LIST
63244: LIST
63245: LIST
63246: LIST
63247: LIST
63248: PUSH
63249: EMPTY
63250: LIST
63251: PPUSH
63252: CALL_OW 447
63256: GO 63199
63258: POP
63259: POP
// end ;
63260: LD_VAR 0 5
63264: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
63265: LD_EXP 59
63269: NOT
63270: IFFALSE 63320
63272: GO 63274
63274: DISABLE
// begin initHack := true ;
63275: LD_ADDR_EXP 59
63279: PUSH
63280: LD_INT 1
63282: ST_TO_ADDR
// hackTanks := [ ] ;
63283: LD_ADDR_EXP 60
63287: PUSH
63288: EMPTY
63289: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
63290: LD_ADDR_EXP 61
63294: PUSH
63295: EMPTY
63296: ST_TO_ADDR
// hackLimit := 3 ;
63297: LD_ADDR_EXP 62
63301: PUSH
63302: LD_INT 3
63304: ST_TO_ADDR
// hackDist := 12 ;
63305: LD_ADDR_EXP 63
63309: PUSH
63310: LD_INT 12
63312: ST_TO_ADDR
// hackCounter := [ ] ;
63313: LD_ADDR_EXP 64
63317: PUSH
63318: EMPTY
63319: ST_TO_ADDR
// end ;
63320: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
63321: LD_EXP 59
63325: PUSH
63326: LD_INT 34
63328: PUSH
63329: LD_INT 99
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PPUSH
63336: CALL_OW 69
63340: AND
63341: IFFALSE 63594
63343: GO 63345
63345: DISABLE
63346: LD_INT 0
63348: PPUSH
63349: PPUSH
// begin enable ;
63350: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
63351: LD_ADDR_VAR 0 1
63355: PUSH
63356: LD_INT 34
63358: PUSH
63359: LD_INT 99
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PPUSH
63366: CALL_OW 69
63370: PUSH
63371: FOR_IN
63372: IFFALSE 63592
// begin if not i in hackTanks then
63374: LD_VAR 0 1
63378: PUSH
63379: LD_EXP 60
63383: IN
63384: NOT
63385: IFFALSE 63468
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
63387: LD_ADDR_EXP 60
63391: PUSH
63392: LD_EXP 60
63396: PPUSH
63397: LD_EXP 60
63401: PUSH
63402: LD_INT 1
63404: PLUS
63405: PPUSH
63406: LD_VAR 0 1
63410: PPUSH
63411: CALL_OW 1
63415: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
63416: LD_ADDR_EXP 61
63420: PUSH
63421: LD_EXP 61
63425: PPUSH
63426: LD_EXP 61
63430: PUSH
63431: LD_INT 1
63433: PLUS
63434: PPUSH
63435: EMPTY
63436: PPUSH
63437: CALL_OW 1
63441: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
63442: LD_ADDR_EXP 64
63446: PUSH
63447: LD_EXP 64
63451: PPUSH
63452: LD_EXP 64
63456: PUSH
63457: LD_INT 1
63459: PLUS
63460: PPUSH
63461: EMPTY
63462: PPUSH
63463: CALL_OW 1
63467: ST_TO_ADDR
// end ; if not IsOk ( i ) then
63468: LD_VAR 0 1
63472: PPUSH
63473: CALL_OW 302
63477: NOT
63478: IFFALSE 63491
// begin HackUnlinkAll ( i ) ;
63480: LD_VAR 0 1
63484: PPUSH
63485: CALL 63597 0 1
// continue ;
63489: GO 63371
// end ; HackCheckCapturedStatus ( i ) ;
63491: LD_VAR 0 1
63495: PPUSH
63496: CALL 64040 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
63500: LD_ADDR_VAR 0 2
63504: PUSH
63505: LD_INT 81
63507: PUSH
63508: LD_VAR 0 1
63512: PPUSH
63513: CALL_OW 255
63517: PUSH
63518: EMPTY
63519: LIST
63520: LIST
63521: PUSH
63522: LD_INT 33
63524: PUSH
63525: LD_INT 3
63527: PUSH
63528: EMPTY
63529: LIST
63530: LIST
63531: PUSH
63532: LD_INT 91
63534: PUSH
63535: LD_VAR 0 1
63539: PUSH
63540: LD_EXP 63
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: LIST
63549: PUSH
63550: LD_INT 50
63552: PUSH
63553: EMPTY
63554: LIST
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: PPUSH
63562: CALL_OW 69
63566: ST_TO_ADDR
// if not tmp then
63567: LD_VAR 0 2
63571: NOT
63572: IFFALSE 63576
// continue ;
63574: GO 63371
// HackLink ( i , tmp ) ;
63576: LD_VAR 0 1
63580: PPUSH
63581: LD_VAR 0 2
63585: PPUSH
63586: CALL 63733 0 2
// end ;
63590: GO 63371
63592: POP
63593: POP
// end ;
63594: PPOPN 2
63596: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
63597: LD_INT 0
63599: PPUSH
63600: PPUSH
63601: PPUSH
// if not hack in hackTanks then
63602: LD_VAR 0 1
63606: PUSH
63607: LD_EXP 60
63611: IN
63612: NOT
63613: IFFALSE 63617
// exit ;
63615: GO 63728
// index := GetElementIndex ( hackTanks , hack ) ;
63617: LD_ADDR_VAR 0 4
63621: PUSH
63622: LD_EXP 60
63626: PPUSH
63627: LD_VAR 0 1
63631: PPUSH
63632: CALL 25995 0 2
63636: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
63637: LD_EXP 61
63641: PUSH
63642: LD_VAR 0 4
63646: ARRAY
63647: IFFALSE 63728
// begin for i in hackTanksCaptured [ index ] do
63649: LD_ADDR_VAR 0 3
63653: PUSH
63654: LD_EXP 61
63658: PUSH
63659: LD_VAR 0 4
63663: ARRAY
63664: PUSH
63665: FOR_IN
63666: IFFALSE 63692
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
63668: LD_VAR 0 3
63672: PUSH
63673: LD_INT 1
63675: ARRAY
63676: PPUSH
63677: LD_VAR 0 3
63681: PUSH
63682: LD_INT 2
63684: ARRAY
63685: PPUSH
63686: CALL_OW 235
63690: GO 63665
63692: POP
63693: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
63694: LD_ADDR_EXP 61
63698: PUSH
63699: LD_EXP 61
63703: PPUSH
63704: LD_VAR 0 4
63708: PPUSH
63709: EMPTY
63710: PPUSH
63711: CALL_OW 1
63715: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
63716: LD_VAR 0 1
63720: PPUSH
63721: LD_INT 0
63723: PPUSH
63724: CALL_OW 505
// end ; end ;
63728: LD_VAR 0 2
63732: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
63733: LD_INT 0
63735: PPUSH
63736: PPUSH
63737: PPUSH
// if not hack in hackTanks or not vehicles then
63738: LD_VAR 0 1
63742: PUSH
63743: LD_EXP 60
63747: IN
63748: NOT
63749: PUSH
63750: LD_VAR 0 2
63754: NOT
63755: OR
63756: IFFALSE 63760
// exit ;
63758: GO 64035
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
63760: LD_ADDR_VAR 0 2
63764: PUSH
63765: LD_VAR 0 1
63769: PPUSH
63770: LD_VAR 0 2
63774: PPUSH
63775: LD_INT 1
63777: PPUSH
63778: LD_INT 1
63780: PPUSH
63781: CALL 26645 0 4
63785: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
63786: LD_ADDR_VAR 0 5
63790: PUSH
63791: LD_EXP 60
63795: PPUSH
63796: LD_VAR 0 1
63800: PPUSH
63801: CALL 25995 0 2
63805: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
63806: LD_EXP 61
63810: PUSH
63811: LD_VAR 0 5
63815: ARRAY
63816: PUSH
63817: LD_EXP 62
63821: LESS
63822: IFFALSE 64011
// begin for i := 1 to vehicles do
63824: LD_ADDR_VAR 0 4
63828: PUSH
63829: DOUBLE
63830: LD_INT 1
63832: DEC
63833: ST_TO_ADDR
63834: LD_VAR 0 2
63838: PUSH
63839: FOR_TO
63840: IFFALSE 64009
// begin if hackTanksCaptured [ index ] = hackLimit then
63842: LD_EXP 61
63846: PUSH
63847: LD_VAR 0 5
63851: ARRAY
63852: PUSH
63853: LD_EXP 62
63857: EQUAL
63858: IFFALSE 63862
// break ;
63860: GO 64009
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
63862: LD_ADDR_EXP 64
63866: PUSH
63867: LD_EXP 64
63871: PPUSH
63872: LD_VAR 0 5
63876: PPUSH
63877: LD_EXP 64
63881: PUSH
63882: LD_VAR 0 5
63886: ARRAY
63887: PUSH
63888: LD_INT 1
63890: PLUS
63891: PPUSH
63892: CALL_OW 1
63896: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
63897: LD_ADDR_EXP 61
63901: PUSH
63902: LD_EXP 61
63906: PPUSH
63907: LD_VAR 0 5
63911: PUSH
63912: LD_EXP 61
63916: PUSH
63917: LD_VAR 0 5
63921: ARRAY
63922: PUSH
63923: LD_INT 1
63925: PLUS
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PPUSH
63931: LD_VAR 0 2
63935: PUSH
63936: LD_VAR 0 4
63940: ARRAY
63941: PUSH
63942: LD_VAR 0 2
63946: PUSH
63947: LD_VAR 0 4
63951: ARRAY
63952: PPUSH
63953: CALL_OW 255
63957: PUSH
63958: EMPTY
63959: LIST
63960: LIST
63961: PPUSH
63962: CALL 26210 0 3
63966: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
63967: LD_VAR 0 2
63971: PUSH
63972: LD_VAR 0 4
63976: ARRAY
63977: PPUSH
63978: LD_VAR 0 1
63982: PPUSH
63983: CALL_OW 255
63987: PPUSH
63988: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
63992: LD_VAR 0 2
63996: PUSH
63997: LD_VAR 0 4
64001: ARRAY
64002: PPUSH
64003: CALL_OW 141
// end ;
64007: GO 63839
64009: POP
64010: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64011: LD_VAR 0 1
64015: PPUSH
64016: LD_EXP 61
64020: PUSH
64021: LD_VAR 0 5
64025: ARRAY
64026: PUSH
64027: LD_INT 0
64029: PLUS
64030: PPUSH
64031: CALL_OW 505
// end ;
64035: LD_VAR 0 3
64039: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
64040: LD_INT 0
64042: PPUSH
64043: PPUSH
64044: PPUSH
64045: PPUSH
// if not hack in hackTanks then
64046: LD_VAR 0 1
64050: PUSH
64051: LD_EXP 60
64055: IN
64056: NOT
64057: IFFALSE 64061
// exit ;
64059: GO 64301
// index := GetElementIndex ( hackTanks , hack ) ;
64061: LD_ADDR_VAR 0 4
64065: PUSH
64066: LD_EXP 60
64070: PPUSH
64071: LD_VAR 0 1
64075: PPUSH
64076: CALL 25995 0 2
64080: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
64081: LD_ADDR_VAR 0 3
64085: PUSH
64086: DOUBLE
64087: LD_EXP 61
64091: PUSH
64092: LD_VAR 0 4
64096: ARRAY
64097: INC
64098: ST_TO_ADDR
64099: LD_INT 1
64101: PUSH
64102: FOR_DOWNTO
64103: IFFALSE 64275
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
64105: LD_ADDR_VAR 0 5
64109: PUSH
64110: LD_EXP 61
64114: PUSH
64115: LD_VAR 0 4
64119: ARRAY
64120: PUSH
64121: LD_VAR 0 3
64125: ARRAY
64126: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
64127: LD_VAR 0 5
64131: PUSH
64132: LD_INT 1
64134: ARRAY
64135: PPUSH
64136: CALL_OW 302
64140: NOT
64141: PUSH
64142: LD_VAR 0 5
64146: PUSH
64147: LD_INT 1
64149: ARRAY
64150: PPUSH
64151: CALL_OW 255
64155: PUSH
64156: LD_VAR 0 1
64160: PPUSH
64161: CALL_OW 255
64165: NONEQUAL
64166: OR
64167: IFFALSE 64273
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
64169: LD_VAR 0 5
64173: PUSH
64174: LD_INT 1
64176: ARRAY
64177: PPUSH
64178: CALL_OW 305
64182: PUSH
64183: LD_VAR 0 5
64187: PUSH
64188: LD_INT 1
64190: ARRAY
64191: PPUSH
64192: CALL_OW 255
64196: PUSH
64197: LD_VAR 0 1
64201: PPUSH
64202: CALL_OW 255
64206: EQUAL
64207: AND
64208: IFFALSE 64232
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
64210: LD_VAR 0 5
64214: PUSH
64215: LD_INT 1
64217: ARRAY
64218: PPUSH
64219: LD_VAR 0 5
64223: PUSH
64224: LD_INT 2
64226: ARRAY
64227: PPUSH
64228: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
64232: LD_ADDR_EXP 61
64236: PUSH
64237: LD_EXP 61
64241: PPUSH
64242: LD_VAR 0 4
64246: PPUSH
64247: LD_EXP 61
64251: PUSH
64252: LD_VAR 0 4
64256: ARRAY
64257: PPUSH
64258: LD_VAR 0 3
64262: PPUSH
64263: CALL_OW 3
64267: PPUSH
64268: CALL_OW 1
64272: ST_TO_ADDR
// end ; end ;
64273: GO 64102
64275: POP
64276: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
64277: LD_VAR 0 1
64281: PPUSH
64282: LD_EXP 61
64286: PUSH
64287: LD_VAR 0 4
64291: ARRAY
64292: PUSH
64293: LD_INT 0
64295: PLUS
64296: PPUSH
64297: CALL_OW 505
// end ;
64301: LD_VAR 0 2
64305: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
64306: LD_INT 0
64308: PPUSH
64309: PPUSH
64310: PPUSH
64311: PPUSH
// if not hack in hackTanks then
64312: LD_VAR 0 1
64316: PUSH
64317: LD_EXP 60
64321: IN
64322: NOT
64323: IFFALSE 64327
// exit ;
64325: GO 64412
// index := GetElementIndex ( hackTanks , hack ) ;
64327: LD_ADDR_VAR 0 5
64331: PUSH
64332: LD_EXP 60
64336: PPUSH
64337: LD_VAR 0 1
64341: PPUSH
64342: CALL 25995 0 2
64346: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
64347: LD_ADDR_VAR 0 4
64351: PUSH
64352: DOUBLE
64353: LD_INT 1
64355: DEC
64356: ST_TO_ADDR
64357: LD_EXP 61
64361: PUSH
64362: LD_VAR 0 5
64366: ARRAY
64367: PUSH
64368: FOR_TO
64369: IFFALSE 64410
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
64371: LD_EXP 61
64375: PUSH
64376: LD_VAR 0 5
64380: ARRAY
64381: PUSH
64382: LD_VAR 0 4
64386: ARRAY
64387: PUSH
64388: LD_INT 1
64390: ARRAY
64391: PUSH
64392: LD_VAR 0 2
64396: EQUAL
64397: IFFALSE 64408
// KillUnit ( vehicle ) ;
64399: LD_VAR 0 2
64403: PPUSH
64404: CALL_OW 66
64408: GO 64368
64410: POP
64411: POP
// end ;
64412: LD_VAR 0 3
64416: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
64417: LD_EXP 65
64421: NOT
64422: IFFALSE 64457
64424: GO 64426
64426: DISABLE
// begin initMiner := true ;
64427: LD_ADDR_EXP 65
64431: PUSH
64432: LD_INT 1
64434: ST_TO_ADDR
// minersList := [ ] ;
64435: LD_ADDR_EXP 66
64439: PUSH
64440: EMPTY
64441: ST_TO_ADDR
// minerMinesList := [ ] ;
64442: LD_ADDR_EXP 67
64446: PUSH
64447: EMPTY
64448: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
64449: LD_ADDR_EXP 68
64453: PUSH
64454: LD_INT 5
64456: ST_TO_ADDR
// end ;
64457: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
64458: LD_EXP 65
64462: PUSH
64463: LD_INT 34
64465: PUSH
64466: LD_INT 81
64468: PUSH
64469: EMPTY
64470: LIST
64471: LIST
64472: PPUSH
64473: CALL_OW 69
64477: AND
64478: IFFALSE 64939
64480: GO 64482
64482: DISABLE
64483: LD_INT 0
64485: PPUSH
64486: PPUSH
64487: PPUSH
64488: PPUSH
// begin enable ;
64489: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
64490: LD_ADDR_VAR 0 1
64494: PUSH
64495: LD_INT 34
64497: PUSH
64498: LD_INT 81
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PPUSH
64505: CALL_OW 69
64509: PUSH
64510: FOR_IN
64511: IFFALSE 64583
// begin if not i in minersList then
64513: LD_VAR 0 1
64517: PUSH
64518: LD_EXP 66
64522: IN
64523: NOT
64524: IFFALSE 64581
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
64526: LD_ADDR_EXP 66
64530: PUSH
64531: LD_EXP 66
64535: PPUSH
64536: LD_EXP 66
64540: PUSH
64541: LD_INT 1
64543: PLUS
64544: PPUSH
64545: LD_VAR 0 1
64549: PPUSH
64550: CALL_OW 1
64554: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
64555: LD_ADDR_EXP 67
64559: PUSH
64560: LD_EXP 67
64564: PPUSH
64565: LD_EXP 67
64569: PUSH
64570: LD_INT 1
64572: PLUS
64573: PPUSH
64574: EMPTY
64575: PPUSH
64576: CALL_OW 1
64580: ST_TO_ADDR
// end end ;
64581: GO 64510
64583: POP
64584: POP
// for i := minerMinesList downto 1 do
64585: LD_ADDR_VAR 0 1
64589: PUSH
64590: DOUBLE
64591: LD_EXP 67
64595: INC
64596: ST_TO_ADDR
64597: LD_INT 1
64599: PUSH
64600: FOR_DOWNTO
64601: IFFALSE 64937
// begin if IsLive ( minersList [ i ] ) then
64603: LD_EXP 66
64607: PUSH
64608: LD_VAR 0 1
64612: ARRAY
64613: PPUSH
64614: CALL_OW 300
64618: IFFALSE 64646
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
64620: LD_EXP 66
64624: PUSH
64625: LD_VAR 0 1
64629: ARRAY
64630: PPUSH
64631: LD_EXP 67
64635: PUSH
64636: LD_VAR 0 1
64640: ARRAY
64641: PPUSH
64642: CALL_OW 505
// if not minerMinesList [ i ] then
64646: LD_EXP 67
64650: PUSH
64651: LD_VAR 0 1
64655: ARRAY
64656: NOT
64657: IFFALSE 64661
// continue ;
64659: GO 64600
// for j := minerMinesList [ i ] downto 1 do
64661: LD_ADDR_VAR 0 2
64665: PUSH
64666: DOUBLE
64667: LD_EXP 67
64671: PUSH
64672: LD_VAR 0 1
64676: ARRAY
64677: INC
64678: ST_TO_ADDR
64679: LD_INT 1
64681: PUSH
64682: FOR_DOWNTO
64683: IFFALSE 64933
// begin side := GetSide ( minersList [ i ] ) ;
64685: LD_ADDR_VAR 0 3
64689: PUSH
64690: LD_EXP 66
64694: PUSH
64695: LD_VAR 0 1
64699: ARRAY
64700: PPUSH
64701: CALL_OW 255
64705: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
64706: LD_ADDR_VAR 0 4
64710: PUSH
64711: LD_EXP 67
64715: PUSH
64716: LD_VAR 0 1
64720: ARRAY
64721: PUSH
64722: LD_VAR 0 2
64726: ARRAY
64727: PUSH
64728: LD_INT 1
64730: ARRAY
64731: PPUSH
64732: LD_EXP 67
64736: PUSH
64737: LD_VAR 0 1
64741: ARRAY
64742: PUSH
64743: LD_VAR 0 2
64747: ARRAY
64748: PUSH
64749: LD_INT 2
64751: ARRAY
64752: PPUSH
64753: CALL_OW 428
64757: ST_TO_ADDR
// if not tmp then
64758: LD_VAR 0 4
64762: NOT
64763: IFFALSE 64767
// continue ;
64765: GO 64682
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
64767: LD_VAR 0 4
64771: PUSH
64772: LD_INT 81
64774: PUSH
64775: LD_VAR 0 3
64779: PUSH
64780: EMPTY
64781: LIST
64782: LIST
64783: PPUSH
64784: CALL_OW 69
64788: IN
64789: PUSH
64790: LD_EXP 67
64794: PUSH
64795: LD_VAR 0 1
64799: ARRAY
64800: PUSH
64801: LD_VAR 0 2
64805: ARRAY
64806: PUSH
64807: LD_INT 1
64809: ARRAY
64810: PPUSH
64811: LD_EXP 67
64815: PUSH
64816: LD_VAR 0 1
64820: ARRAY
64821: PUSH
64822: LD_VAR 0 2
64826: ARRAY
64827: PUSH
64828: LD_INT 2
64830: ARRAY
64831: PPUSH
64832: CALL_OW 458
64836: AND
64837: IFFALSE 64931
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
64839: LD_EXP 67
64843: PUSH
64844: LD_VAR 0 1
64848: ARRAY
64849: PUSH
64850: LD_VAR 0 2
64854: ARRAY
64855: PUSH
64856: LD_INT 1
64858: ARRAY
64859: PPUSH
64860: LD_EXP 67
64864: PUSH
64865: LD_VAR 0 1
64869: ARRAY
64870: PUSH
64871: LD_VAR 0 2
64875: ARRAY
64876: PUSH
64877: LD_INT 2
64879: ARRAY
64880: PPUSH
64881: LD_VAR 0 3
64885: PPUSH
64886: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
64890: LD_ADDR_EXP 67
64894: PUSH
64895: LD_EXP 67
64899: PPUSH
64900: LD_VAR 0 1
64904: PPUSH
64905: LD_EXP 67
64909: PUSH
64910: LD_VAR 0 1
64914: ARRAY
64915: PPUSH
64916: LD_VAR 0 2
64920: PPUSH
64921: CALL_OW 3
64925: PPUSH
64926: CALL_OW 1
64930: ST_TO_ADDR
// end ; end ;
64931: GO 64682
64933: POP
64934: POP
// end ;
64935: GO 64600
64937: POP
64938: POP
// end ;
64939: PPOPN 4
64941: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
64942: LD_INT 0
64944: PPUSH
64945: PPUSH
// result := false ;
64946: LD_ADDR_VAR 0 4
64950: PUSH
64951: LD_INT 0
64953: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
64954: LD_VAR 0 1
64958: PPUSH
64959: CALL_OW 264
64963: PUSH
64964: LD_INT 81
64966: EQUAL
64967: NOT
64968: IFFALSE 64972
// exit ;
64970: GO 65212
// index := GetElementIndex ( minersList , unit ) ;
64972: LD_ADDR_VAR 0 5
64976: PUSH
64977: LD_EXP 66
64981: PPUSH
64982: LD_VAR 0 1
64986: PPUSH
64987: CALL 25995 0 2
64991: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
64992: LD_EXP 67
64996: PUSH
64997: LD_VAR 0 5
65001: ARRAY
65002: PUSH
65003: LD_EXP 68
65007: GREATEREQUAL
65008: IFFALSE 65012
// exit ;
65010: GO 65212
// ComMoveXY ( unit , x , y ) ;
65012: LD_VAR 0 1
65016: PPUSH
65017: LD_VAR 0 2
65021: PPUSH
65022: LD_VAR 0 3
65026: PPUSH
65027: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
65031: LD_INT 35
65033: PPUSH
65034: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
65038: LD_VAR 0 1
65042: PPUSH
65043: LD_VAR 0 2
65047: PPUSH
65048: LD_VAR 0 3
65052: PPUSH
65053: CALL 57379 0 3
65057: NOT
65058: PUSH
65059: LD_VAR 0 1
65063: PPUSH
65064: CALL_OW 314
65068: AND
65069: IFFALSE 65073
// exit ;
65071: GO 65212
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
65073: LD_VAR 0 2
65077: PPUSH
65078: LD_VAR 0 3
65082: PPUSH
65083: CALL_OW 428
65087: PUSH
65088: LD_VAR 0 1
65092: EQUAL
65093: PUSH
65094: LD_VAR 0 1
65098: PPUSH
65099: CALL_OW 314
65103: NOT
65104: AND
65105: IFFALSE 65031
// PlaySoundXY ( x , y , PlantMine ) ;
65107: LD_VAR 0 2
65111: PPUSH
65112: LD_VAR 0 3
65116: PPUSH
65117: LD_STRING PlantMine
65119: PPUSH
65120: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
65124: LD_VAR 0 2
65128: PPUSH
65129: LD_VAR 0 3
65133: PPUSH
65134: LD_VAR 0 1
65138: PPUSH
65139: CALL_OW 255
65143: PPUSH
65144: LD_INT 0
65146: PPUSH
65147: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
65151: LD_ADDR_EXP 67
65155: PUSH
65156: LD_EXP 67
65160: PPUSH
65161: LD_VAR 0 5
65165: PUSH
65166: LD_EXP 67
65170: PUSH
65171: LD_VAR 0 5
65175: ARRAY
65176: PUSH
65177: LD_INT 1
65179: PLUS
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PPUSH
65185: LD_VAR 0 2
65189: PUSH
65190: LD_VAR 0 3
65194: PUSH
65195: EMPTY
65196: LIST
65197: LIST
65198: PPUSH
65199: CALL 26210 0 3
65203: ST_TO_ADDR
// result := true ;
65204: LD_ADDR_VAR 0 4
65208: PUSH
65209: LD_INT 1
65211: ST_TO_ADDR
// end ;
65212: LD_VAR 0 4
65216: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
65217: LD_INT 0
65219: PPUSH
65220: PPUSH
65221: PPUSH
// if not unit in minersList then
65222: LD_VAR 0 1
65226: PUSH
65227: LD_EXP 66
65231: IN
65232: NOT
65233: IFFALSE 65237
// exit ;
65235: GO 65629
// index := GetElementIndex ( minersList , unit ) ;
65237: LD_ADDR_VAR 0 6
65241: PUSH
65242: LD_EXP 66
65246: PPUSH
65247: LD_VAR 0 1
65251: PPUSH
65252: CALL 25995 0 2
65256: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
65257: LD_ADDR_VAR 0 5
65261: PUSH
65262: DOUBLE
65263: LD_EXP 67
65267: PUSH
65268: LD_VAR 0 6
65272: ARRAY
65273: INC
65274: ST_TO_ADDR
65275: LD_INT 1
65277: PUSH
65278: FOR_DOWNTO
65279: IFFALSE 65440
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
65281: LD_EXP 67
65285: PUSH
65286: LD_VAR 0 6
65290: ARRAY
65291: PUSH
65292: LD_VAR 0 5
65296: ARRAY
65297: PUSH
65298: LD_INT 1
65300: ARRAY
65301: PUSH
65302: LD_VAR 0 2
65306: EQUAL
65307: PUSH
65308: LD_EXP 67
65312: PUSH
65313: LD_VAR 0 6
65317: ARRAY
65318: PUSH
65319: LD_VAR 0 5
65323: ARRAY
65324: PUSH
65325: LD_INT 2
65327: ARRAY
65328: PUSH
65329: LD_VAR 0 3
65333: EQUAL
65334: AND
65335: IFFALSE 65438
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65337: LD_EXP 67
65341: PUSH
65342: LD_VAR 0 6
65346: ARRAY
65347: PUSH
65348: LD_VAR 0 5
65352: ARRAY
65353: PUSH
65354: LD_INT 1
65356: ARRAY
65357: PPUSH
65358: LD_EXP 67
65362: PUSH
65363: LD_VAR 0 6
65367: ARRAY
65368: PUSH
65369: LD_VAR 0 5
65373: ARRAY
65374: PUSH
65375: LD_INT 2
65377: ARRAY
65378: PPUSH
65379: LD_VAR 0 1
65383: PPUSH
65384: CALL_OW 255
65388: PPUSH
65389: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65393: LD_ADDR_EXP 67
65397: PUSH
65398: LD_EXP 67
65402: PPUSH
65403: LD_VAR 0 6
65407: PPUSH
65408: LD_EXP 67
65412: PUSH
65413: LD_VAR 0 6
65417: ARRAY
65418: PPUSH
65419: LD_VAR 0 5
65423: PPUSH
65424: CALL_OW 3
65428: PPUSH
65429: CALL_OW 1
65433: ST_TO_ADDR
// exit ;
65434: POP
65435: POP
65436: GO 65629
// end ; end ;
65438: GO 65278
65440: POP
65441: POP
// for i := minerMinesList [ index ] downto 1 do
65442: LD_ADDR_VAR 0 5
65446: PUSH
65447: DOUBLE
65448: LD_EXP 67
65452: PUSH
65453: LD_VAR 0 6
65457: ARRAY
65458: INC
65459: ST_TO_ADDR
65460: LD_INT 1
65462: PUSH
65463: FOR_DOWNTO
65464: IFFALSE 65627
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
65466: LD_EXP 67
65470: PUSH
65471: LD_VAR 0 6
65475: ARRAY
65476: PUSH
65477: LD_VAR 0 5
65481: ARRAY
65482: PUSH
65483: LD_INT 1
65485: ARRAY
65486: PPUSH
65487: LD_EXP 67
65491: PUSH
65492: LD_VAR 0 6
65496: ARRAY
65497: PUSH
65498: LD_VAR 0 5
65502: ARRAY
65503: PUSH
65504: LD_INT 2
65506: ARRAY
65507: PPUSH
65508: LD_VAR 0 2
65512: PPUSH
65513: LD_VAR 0 3
65517: PPUSH
65518: CALL_OW 298
65522: PUSH
65523: LD_INT 6
65525: LESS
65526: IFFALSE 65625
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
65528: LD_EXP 67
65532: PUSH
65533: LD_VAR 0 6
65537: ARRAY
65538: PUSH
65539: LD_VAR 0 5
65543: ARRAY
65544: PUSH
65545: LD_INT 1
65547: ARRAY
65548: PPUSH
65549: LD_EXP 67
65553: PUSH
65554: LD_VAR 0 6
65558: ARRAY
65559: PUSH
65560: LD_VAR 0 5
65564: ARRAY
65565: PUSH
65566: LD_INT 2
65568: ARRAY
65569: PPUSH
65570: LD_VAR 0 1
65574: PPUSH
65575: CALL_OW 255
65579: PPUSH
65580: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
65584: LD_ADDR_EXP 67
65588: PUSH
65589: LD_EXP 67
65593: PPUSH
65594: LD_VAR 0 6
65598: PPUSH
65599: LD_EXP 67
65603: PUSH
65604: LD_VAR 0 6
65608: ARRAY
65609: PPUSH
65610: LD_VAR 0 5
65614: PPUSH
65615: CALL_OW 3
65619: PPUSH
65620: CALL_OW 1
65624: ST_TO_ADDR
// end ; end ;
65625: GO 65463
65627: POP
65628: POP
// end ;
65629: LD_VAR 0 4
65633: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
65634: LD_INT 0
65636: PPUSH
65637: PPUSH
65638: PPUSH
65639: PPUSH
65640: PPUSH
65641: PPUSH
65642: PPUSH
65643: PPUSH
65644: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
65645: LD_VAR 0 1
65649: PPUSH
65650: CALL_OW 264
65654: PUSH
65655: LD_INT 81
65657: EQUAL
65658: NOT
65659: PUSH
65660: LD_VAR 0 1
65664: PUSH
65665: LD_EXP 66
65669: IN
65670: NOT
65671: OR
65672: IFFALSE 65676
// exit ;
65674: GO 65998
// index := GetElementIndex ( minersList , unit ) ;
65676: LD_ADDR_VAR 0 6
65680: PUSH
65681: LD_EXP 66
65685: PPUSH
65686: LD_VAR 0 1
65690: PPUSH
65691: CALL 25995 0 2
65695: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
65696: LD_ADDR_VAR 0 8
65700: PUSH
65701: LD_EXP 68
65705: PUSH
65706: LD_EXP 67
65710: PUSH
65711: LD_VAR 0 6
65715: ARRAY
65716: MINUS
65717: ST_TO_ADDR
// if not minesFreeAmount then
65718: LD_VAR 0 8
65722: NOT
65723: IFFALSE 65727
// exit ;
65725: GO 65998
// tmp := [ ] ;
65727: LD_ADDR_VAR 0 7
65731: PUSH
65732: EMPTY
65733: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
65734: LD_ADDR_VAR 0 5
65738: PUSH
65739: DOUBLE
65740: LD_INT 1
65742: DEC
65743: ST_TO_ADDR
65744: LD_VAR 0 8
65748: PUSH
65749: FOR_TO
65750: IFFALSE 65945
// begin _d := rand ( 0 , 5 ) ;
65752: LD_ADDR_VAR 0 11
65756: PUSH
65757: LD_INT 0
65759: PPUSH
65760: LD_INT 5
65762: PPUSH
65763: CALL_OW 12
65767: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
65768: LD_ADDR_VAR 0 12
65772: PUSH
65773: LD_INT 2
65775: PPUSH
65776: LD_INT 6
65778: PPUSH
65779: CALL_OW 12
65783: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
65784: LD_ADDR_VAR 0 9
65788: PUSH
65789: LD_VAR 0 2
65793: PPUSH
65794: LD_VAR 0 11
65798: PPUSH
65799: LD_VAR 0 12
65803: PPUSH
65804: CALL_OW 272
65808: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
65809: LD_ADDR_VAR 0 10
65813: PUSH
65814: LD_VAR 0 3
65818: PPUSH
65819: LD_VAR 0 11
65823: PPUSH
65824: LD_VAR 0 12
65828: PPUSH
65829: CALL_OW 273
65833: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
65834: LD_VAR 0 9
65838: PPUSH
65839: LD_VAR 0 10
65843: PPUSH
65844: CALL_OW 488
65848: PUSH
65849: LD_VAR 0 9
65853: PUSH
65854: LD_VAR 0 10
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_VAR 0 7
65867: IN
65868: NOT
65869: AND
65870: PUSH
65871: LD_VAR 0 9
65875: PPUSH
65876: LD_VAR 0 10
65880: PPUSH
65881: CALL_OW 458
65885: NOT
65886: AND
65887: IFFALSE 65929
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
65889: LD_ADDR_VAR 0 7
65893: PUSH
65894: LD_VAR 0 7
65898: PPUSH
65899: LD_VAR 0 7
65903: PUSH
65904: LD_INT 1
65906: PLUS
65907: PPUSH
65908: LD_VAR 0 9
65912: PUSH
65913: LD_VAR 0 10
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PPUSH
65922: CALL_OW 1
65926: ST_TO_ADDR
65927: GO 65943
// i := i - 1 ;
65929: LD_ADDR_VAR 0 5
65933: PUSH
65934: LD_VAR 0 5
65938: PUSH
65939: LD_INT 1
65941: MINUS
65942: ST_TO_ADDR
// end ;
65943: GO 65749
65945: POP
65946: POP
// for i in tmp do
65947: LD_ADDR_VAR 0 5
65951: PUSH
65952: LD_VAR 0 7
65956: PUSH
65957: FOR_IN
65958: IFFALSE 65996
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
65960: LD_VAR 0 1
65964: PPUSH
65965: LD_VAR 0 5
65969: PUSH
65970: LD_INT 1
65972: ARRAY
65973: PPUSH
65974: LD_VAR 0 5
65978: PUSH
65979: LD_INT 2
65981: ARRAY
65982: PPUSH
65983: CALL 64942 0 3
65987: NOT
65988: IFFALSE 65994
// exit ;
65990: POP
65991: POP
65992: GO 65998
65994: GO 65957
65996: POP
65997: POP
// end ;
65998: LD_VAR 0 4
66002: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
66003: LD_INT 0
66005: PPUSH
66006: PPUSH
66007: PPUSH
66008: PPUSH
66009: PPUSH
66010: PPUSH
66011: PPUSH
// if not GetClass ( unit ) = class_sniper then
66012: LD_VAR 0 1
66016: PPUSH
66017: CALL_OW 257
66021: PUSH
66022: LD_INT 5
66024: EQUAL
66025: NOT
66026: IFFALSE 66030
// exit ;
66028: GO 66418
// dist := 8 ;
66030: LD_ADDR_VAR 0 5
66034: PUSH
66035: LD_INT 8
66037: ST_TO_ADDR
// viewRange := 12 ;
66038: LD_ADDR_VAR 0 7
66042: PUSH
66043: LD_INT 12
66045: ST_TO_ADDR
// side := GetSide ( unit ) ;
66046: LD_ADDR_VAR 0 6
66050: PUSH
66051: LD_VAR 0 1
66055: PPUSH
66056: CALL_OW 255
66060: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
66061: LD_INT 61
66063: PPUSH
66064: LD_VAR 0 6
66068: PPUSH
66069: CALL_OW 321
66073: PUSH
66074: LD_INT 2
66076: EQUAL
66077: IFFALSE 66087
// viewRange := 16 ;
66079: LD_ADDR_VAR 0 7
66083: PUSH
66084: LD_INT 16
66086: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
66087: LD_VAR 0 1
66091: PPUSH
66092: LD_VAR 0 2
66096: PPUSH
66097: LD_VAR 0 3
66101: PPUSH
66102: CALL_OW 297
66106: PUSH
66107: LD_VAR 0 5
66111: GREATER
66112: IFFALSE 66191
// begin ComMoveXY ( unit , x , y ) ;
66114: LD_VAR 0 1
66118: PPUSH
66119: LD_VAR 0 2
66123: PPUSH
66124: LD_VAR 0 3
66128: PPUSH
66129: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
66133: LD_INT 35
66135: PPUSH
66136: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
66140: LD_VAR 0 1
66144: PPUSH
66145: LD_VAR 0 2
66149: PPUSH
66150: LD_VAR 0 3
66154: PPUSH
66155: CALL 57379 0 3
66159: NOT
66160: IFFALSE 66164
// exit ;
66162: GO 66418
// until GetDistUnitXY ( unit , x , y ) < dist ;
66164: LD_VAR 0 1
66168: PPUSH
66169: LD_VAR 0 2
66173: PPUSH
66174: LD_VAR 0 3
66178: PPUSH
66179: CALL_OW 297
66183: PUSH
66184: LD_VAR 0 5
66188: LESS
66189: IFFALSE 66133
// end ; ComTurnXY ( unit , x , y ) ;
66191: LD_VAR 0 1
66195: PPUSH
66196: LD_VAR 0 2
66200: PPUSH
66201: LD_VAR 0 3
66205: PPUSH
66206: CALL_OW 118
// wait ( 5 ) ;
66210: LD_INT 5
66212: PPUSH
66213: CALL_OW 67
// _d := GetDir ( unit ) ;
66217: LD_ADDR_VAR 0 10
66221: PUSH
66222: LD_VAR 0 1
66226: PPUSH
66227: CALL_OW 254
66231: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
66232: LD_ADDR_VAR 0 8
66236: PUSH
66237: LD_VAR 0 1
66241: PPUSH
66242: CALL_OW 250
66246: PPUSH
66247: LD_VAR 0 10
66251: PPUSH
66252: LD_VAR 0 5
66256: PPUSH
66257: CALL_OW 272
66261: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
66262: LD_ADDR_VAR 0 9
66266: PUSH
66267: LD_VAR 0 1
66271: PPUSH
66272: CALL_OW 251
66276: PPUSH
66277: LD_VAR 0 10
66281: PPUSH
66282: LD_VAR 0 5
66286: PPUSH
66287: CALL_OW 273
66291: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66292: LD_VAR 0 8
66296: PPUSH
66297: LD_VAR 0 9
66301: PPUSH
66302: CALL_OW 488
66306: NOT
66307: IFFALSE 66311
// exit ;
66309: GO 66418
// ComAnimCustom ( unit , 1 ) ;
66311: LD_VAR 0 1
66315: PPUSH
66316: LD_INT 1
66318: PPUSH
66319: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
66323: LD_VAR 0 8
66327: PPUSH
66328: LD_VAR 0 9
66332: PPUSH
66333: LD_VAR 0 6
66337: PPUSH
66338: LD_VAR 0 7
66342: PPUSH
66343: CALL_OW 330
// repeat wait ( 1 ) ;
66347: LD_INT 1
66349: PPUSH
66350: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
66354: LD_VAR 0 1
66358: PPUSH
66359: CALL_OW 316
66363: PUSH
66364: LD_VAR 0 1
66368: PPUSH
66369: CALL_OW 314
66373: OR
66374: PUSH
66375: LD_VAR 0 1
66379: PPUSH
66380: CALL_OW 302
66384: NOT
66385: OR
66386: PUSH
66387: LD_VAR 0 1
66391: PPUSH
66392: CALL_OW 301
66396: OR
66397: IFFALSE 66347
// RemoveSeeing ( _x , _y , side ) ;
66399: LD_VAR 0 8
66403: PPUSH
66404: LD_VAR 0 9
66408: PPUSH
66409: LD_VAR 0 6
66413: PPUSH
66414: CALL_OW 331
// end ; end_of_file
66418: LD_VAR 0 4
66422: RET
// export globalGameSaveCounter ; every 0 0$1 do
66423: GO 66425
66425: DISABLE
// begin enable ;
66426: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
66427: LD_STRING updateTimer(
66429: PUSH
66430: LD_OWVAR 1
66434: STR
66435: PUSH
66436: LD_STRING );
66438: STR
66439: PPUSH
66440: CALL_OW 559
// end ;
66444: END
// every 0 0$1 do
66445: GO 66447
66447: DISABLE
// begin globalGameSaveCounter := 0 ;
66448: LD_ADDR_EXP 69
66452: PUSH
66453: LD_INT 0
66455: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
66456: LD_STRING setGameSaveCounter(0)
66458: PPUSH
66459: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
66463: LD_STRING initStreamRollete();
66465: PPUSH
66466: CALL_OW 559
// InitStreamMode ;
66470: CALL 67796 0 0
// DefineStreamItems ( false ) ;
66474: LD_INT 0
66476: PPUSH
66477: CALL 68260 0 1
// end ;
66481: END
// export function SOS_MapStart ( ) ; begin
66482: LD_INT 0
66484: PPUSH
// if streamModeActive then
66485: LD_EXP 70
66489: IFFALSE 66498
// DefineStreamItems ( true ) ;
66491: LD_INT 1
66493: PPUSH
66494: CALL 68260 0 1
// UpdateLuaVariables ( ) ;
66498: CALL 66515 0 0
// UpdateFactoryWaypoints ( ) ;
66502: CALL 81129 0 0
// UpdateWarehouseGatheringPoints ( ) ;
66506: CALL 81386 0 0
// end ;
66510: LD_VAR 0 1
66514: RET
// function UpdateLuaVariables ( ) ; begin
66515: LD_INT 0
66517: PPUSH
// if globalGameSaveCounter then
66518: LD_EXP 69
66522: IFFALSE 66556
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
66524: LD_ADDR_EXP 69
66528: PUSH
66529: LD_EXP 69
66533: PPUSH
66534: CALL 59930 0 1
66538: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
66539: LD_STRING setGameSaveCounter(
66541: PUSH
66542: LD_EXP 69
66546: STR
66547: PUSH
66548: LD_STRING )
66550: STR
66551: PPUSH
66552: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
66556: LD_STRING setGameDifficulty(
66558: PUSH
66559: LD_OWVAR 67
66563: STR
66564: PUSH
66565: LD_STRING )
66567: STR
66568: PPUSH
66569: CALL_OW 559
// end ;
66573: LD_VAR 0 1
66577: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66578: LD_INT 0
66580: PPUSH
// if p2 = stream_mode then
66581: LD_VAR 0 2
66585: PUSH
66586: LD_INT 100
66588: EQUAL
66589: IFFALSE 67592
// begin if not StreamModeActive then
66591: LD_EXP 70
66595: NOT
66596: IFFALSE 66606
// StreamModeActive := true ;
66598: LD_ADDR_EXP 70
66602: PUSH
66603: LD_INT 1
66605: ST_TO_ADDR
// if p3 = 0 then
66606: LD_VAR 0 3
66610: PUSH
66611: LD_INT 0
66613: EQUAL
66614: IFFALSE 66620
// InitStreamMode ;
66616: CALL 67796 0 0
// if p3 = 1 then
66620: LD_VAR 0 3
66624: PUSH
66625: LD_INT 1
66627: EQUAL
66628: IFFALSE 66638
// sRocket := true ;
66630: LD_ADDR_EXP 75
66634: PUSH
66635: LD_INT 1
66637: ST_TO_ADDR
// if p3 = 2 then
66638: LD_VAR 0 3
66642: PUSH
66643: LD_INT 2
66645: EQUAL
66646: IFFALSE 66656
// sSpeed := true ;
66648: LD_ADDR_EXP 74
66652: PUSH
66653: LD_INT 1
66655: ST_TO_ADDR
// if p3 = 3 then
66656: LD_VAR 0 3
66660: PUSH
66661: LD_INT 3
66663: EQUAL
66664: IFFALSE 66674
// sEngine := true ;
66666: LD_ADDR_EXP 76
66670: PUSH
66671: LD_INT 1
66673: ST_TO_ADDR
// if p3 = 4 then
66674: LD_VAR 0 3
66678: PUSH
66679: LD_INT 4
66681: EQUAL
66682: IFFALSE 66692
// sSpec := true ;
66684: LD_ADDR_EXP 73
66688: PUSH
66689: LD_INT 1
66691: ST_TO_ADDR
// if p3 = 5 then
66692: LD_VAR 0 3
66696: PUSH
66697: LD_INT 5
66699: EQUAL
66700: IFFALSE 66710
// sLevel := true ;
66702: LD_ADDR_EXP 77
66706: PUSH
66707: LD_INT 1
66709: ST_TO_ADDR
// if p3 = 6 then
66710: LD_VAR 0 3
66714: PUSH
66715: LD_INT 6
66717: EQUAL
66718: IFFALSE 66728
// sArmoury := true ;
66720: LD_ADDR_EXP 78
66724: PUSH
66725: LD_INT 1
66727: ST_TO_ADDR
// if p3 = 7 then
66728: LD_VAR 0 3
66732: PUSH
66733: LD_INT 7
66735: EQUAL
66736: IFFALSE 66746
// sRadar := true ;
66738: LD_ADDR_EXP 79
66742: PUSH
66743: LD_INT 1
66745: ST_TO_ADDR
// if p3 = 8 then
66746: LD_VAR 0 3
66750: PUSH
66751: LD_INT 8
66753: EQUAL
66754: IFFALSE 66764
// sBunker := true ;
66756: LD_ADDR_EXP 80
66760: PUSH
66761: LD_INT 1
66763: ST_TO_ADDR
// if p3 = 9 then
66764: LD_VAR 0 3
66768: PUSH
66769: LD_INT 9
66771: EQUAL
66772: IFFALSE 66782
// sHack := true ;
66774: LD_ADDR_EXP 81
66778: PUSH
66779: LD_INT 1
66781: ST_TO_ADDR
// if p3 = 10 then
66782: LD_VAR 0 3
66786: PUSH
66787: LD_INT 10
66789: EQUAL
66790: IFFALSE 66800
// sFire := true ;
66792: LD_ADDR_EXP 82
66796: PUSH
66797: LD_INT 1
66799: ST_TO_ADDR
// if p3 = 11 then
66800: LD_VAR 0 3
66804: PUSH
66805: LD_INT 11
66807: EQUAL
66808: IFFALSE 66818
// sRefresh := true ;
66810: LD_ADDR_EXP 83
66814: PUSH
66815: LD_INT 1
66817: ST_TO_ADDR
// if p3 = 12 then
66818: LD_VAR 0 3
66822: PUSH
66823: LD_INT 12
66825: EQUAL
66826: IFFALSE 66836
// sExp := true ;
66828: LD_ADDR_EXP 84
66832: PUSH
66833: LD_INT 1
66835: ST_TO_ADDR
// if p3 = 13 then
66836: LD_VAR 0 3
66840: PUSH
66841: LD_INT 13
66843: EQUAL
66844: IFFALSE 66854
// sDepot := true ;
66846: LD_ADDR_EXP 85
66850: PUSH
66851: LD_INT 1
66853: ST_TO_ADDR
// if p3 = 14 then
66854: LD_VAR 0 3
66858: PUSH
66859: LD_INT 14
66861: EQUAL
66862: IFFALSE 66872
// sFlag := true ;
66864: LD_ADDR_EXP 86
66868: PUSH
66869: LD_INT 1
66871: ST_TO_ADDR
// if p3 = 15 then
66872: LD_VAR 0 3
66876: PUSH
66877: LD_INT 15
66879: EQUAL
66880: IFFALSE 66890
// sKamikadze := true ;
66882: LD_ADDR_EXP 94
66886: PUSH
66887: LD_INT 1
66889: ST_TO_ADDR
// if p3 = 16 then
66890: LD_VAR 0 3
66894: PUSH
66895: LD_INT 16
66897: EQUAL
66898: IFFALSE 66908
// sTroll := true ;
66900: LD_ADDR_EXP 95
66904: PUSH
66905: LD_INT 1
66907: ST_TO_ADDR
// if p3 = 17 then
66908: LD_VAR 0 3
66912: PUSH
66913: LD_INT 17
66915: EQUAL
66916: IFFALSE 66926
// sSlow := true ;
66918: LD_ADDR_EXP 96
66922: PUSH
66923: LD_INT 1
66925: ST_TO_ADDR
// if p3 = 18 then
66926: LD_VAR 0 3
66930: PUSH
66931: LD_INT 18
66933: EQUAL
66934: IFFALSE 66944
// sLack := true ;
66936: LD_ADDR_EXP 97
66940: PUSH
66941: LD_INT 1
66943: ST_TO_ADDR
// if p3 = 19 then
66944: LD_VAR 0 3
66948: PUSH
66949: LD_INT 19
66951: EQUAL
66952: IFFALSE 66962
// sTank := true ;
66954: LD_ADDR_EXP 99
66958: PUSH
66959: LD_INT 1
66961: ST_TO_ADDR
// if p3 = 20 then
66962: LD_VAR 0 3
66966: PUSH
66967: LD_INT 20
66969: EQUAL
66970: IFFALSE 66980
// sRemote := true ;
66972: LD_ADDR_EXP 100
66976: PUSH
66977: LD_INT 1
66979: ST_TO_ADDR
// if p3 = 21 then
66980: LD_VAR 0 3
66984: PUSH
66985: LD_INT 21
66987: EQUAL
66988: IFFALSE 66998
// sPowell := true ;
66990: LD_ADDR_EXP 101
66994: PUSH
66995: LD_INT 1
66997: ST_TO_ADDR
// if p3 = 22 then
66998: LD_VAR 0 3
67002: PUSH
67003: LD_INT 22
67005: EQUAL
67006: IFFALSE 67016
// sTeleport := true ;
67008: LD_ADDR_EXP 104
67012: PUSH
67013: LD_INT 1
67015: ST_TO_ADDR
// if p3 = 23 then
67016: LD_VAR 0 3
67020: PUSH
67021: LD_INT 23
67023: EQUAL
67024: IFFALSE 67034
// sOilTower := true ;
67026: LD_ADDR_EXP 106
67030: PUSH
67031: LD_INT 1
67033: ST_TO_ADDR
// if p3 = 24 then
67034: LD_VAR 0 3
67038: PUSH
67039: LD_INT 24
67041: EQUAL
67042: IFFALSE 67052
// sShovel := true ;
67044: LD_ADDR_EXP 107
67048: PUSH
67049: LD_INT 1
67051: ST_TO_ADDR
// if p3 = 25 then
67052: LD_VAR 0 3
67056: PUSH
67057: LD_INT 25
67059: EQUAL
67060: IFFALSE 67070
// sSheik := true ;
67062: LD_ADDR_EXP 108
67066: PUSH
67067: LD_INT 1
67069: ST_TO_ADDR
// if p3 = 26 then
67070: LD_VAR 0 3
67074: PUSH
67075: LD_INT 26
67077: EQUAL
67078: IFFALSE 67088
// sEarthquake := true ;
67080: LD_ADDR_EXP 110
67084: PUSH
67085: LD_INT 1
67087: ST_TO_ADDR
// if p3 = 27 then
67088: LD_VAR 0 3
67092: PUSH
67093: LD_INT 27
67095: EQUAL
67096: IFFALSE 67106
// sAI := true ;
67098: LD_ADDR_EXP 111
67102: PUSH
67103: LD_INT 1
67105: ST_TO_ADDR
// if p3 = 28 then
67106: LD_VAR 0 3
67110: PUSH
67111: LD_INT 28
67113: EQUAL
67114: IFFALSE 67124
// sCargo := true ;
67116: LD_ADDR_EXP 114
67120: PUSH
67121: LD_INT 1
67123: ST_TO_ADDR
// if p3 = 29 then
67124: LD_VAR 0 3
67128: PUSH
67129: LD_INT 29
67131: EQUAL
67132: IFFALSE 67142
// sDLaser := true ;
67134: LD_ADDR_EXP 115
67138: PUSH
67139: LD_INT 1
67141: ST_TO_ADDR
// if p3 = 30 then
67142: LD_VAR 0 3
67146: PUSH
67147: LD_INT 30
67149: EQUAL
67150: IFFALSE 67160
// sExchange := true ;
67152: LD_ADDR_EXP 116
67156: PUSH
67157: LD_INT 1
67159: ST_TO_ADDR
// if p3 = 31 then
67160: LD_VAR 0 3
67164: PUSH
67165: LD_INT 31
67167: EQUAL
67168: IFFALSE 67178
// sFac := true ;
67170: LD_ADDR_EXP 117
67174: PUSH
67175: LD_INT 1
67177: ST_TO_ADDR
// if p3 = 32 then
67178: LD_VAR 0 3
67182: PUSH
67183: LD_INT 32
67185: EQUAL
67186: IFFALSE 67196
// sPower := true ;
67188: LD_ADDR_EXP 118
67192: PUSH
67193: LD_INT 1
67195: ST_TO_ADDR
// if p3 = 33 then
67196: LD_VAR 0 3
67200: PUSH
67201: LD_INT 33
67203: EQUAL
67204: IFFALSE 67214
// sRandom := true ;
67206: LD_ADDR_EXP 119
67210: PUSH
67211: LD_INT 1
67213: ST_TO_ADDR
// if p3 = 34 then
67214: LD_VAR 0 3
67218: PUSH
67219: LD_INT 34
67221: EQUAL
67222: IFFALSE 67232
// sShield := true ;
67224: LD_ADDR_EXP 120
67228: PUSH
67229: LD_INT 1
67231: ST_TO_ADDR
// if p3 = 35 then
67232: LD_VAR 0 3
67236: PUSH
67237: LD_INT 35
67239: EQUAL
67240: IFFALSE 67250
// sTime := true ;
67242: LD_ADDR_EXP 121
67246: PUSH
67247: LD_INT 1
67249: ST_TO_ADDR
// if p3 = 36 then
67250: LD_VAR 0 3
67254: PUSH
67255: LD_INT 36
67257: EQUAL
67258: IFFALSE 67268
// sTools := true ;
67260: LD_ADDR_EXP 122
67264: PUSH
67265: LD_INT 1
67267: ST_TO_ADDR
// if p3 = 101 then
67268: LD_VAR 0 3
67272: PUSH
67273: LD_INT 101
67275: EQUAL
67276: IFFALSE 67286
// sSold := true ;
67278: LD_ADDR_EXP 87
67282: PUSH
67283: LD_INT 1
67285: ST_TO_ADDR
// if p3 = 102 then
67286: LD_VAR 0 3
67290: PUSH
67291: LD_INT 102
67293: EQUAL
67294: IFFALSE 67304
// sDiff := true ;
67296: LD_ADDR_EXP 88
67300: PUSH
67301: LD_INT 1
67303: ST_TO_ADDR
// if p3 = 103 then
67304: LD_VAR 0 3
67308: PUSH
67309: LD_INT 103
67311: EQUAL
67312: IFFALSE 67322
// sFog := true ;
67314: LD_ADDR_EXP 91
67318: PUSH
67319: LD_INT 1
67321: ST_TO_ADDR
// if p3 = 104 then
67322: LD_VAR 0 3
67326: PUSH
67327: LD_INT 104
67329: EQUAL
67330: IFFALSE 67340
// sReset := true ;
67332: LD_ADDR_EXP 92
67336: PUSH
67337: LD_INT 1
67339: ST_TO_ADDR
// if p3 = 105 then
67340: LD_VAR 0 3
67344: PUSH
67345: LD_INT 105
67347: EQUAL
67348: IFFALSE 67358
// sSun := true ;
67350: LD_ADDR_EXP 93
67354: PUSH
67355: LD_INT 1
67357: ST_TO_ADDR
// if p3 = 106 then
67358: LD_VAR 0 3
67362: PUSH
67363: LD_INT 106
67365: EQUAL
67366: IFFALSE 67376
// sTiger := true ;
67368: LD_ADDR_EXP 89
67372: PUSH
67373: LD_INT 1
67375: ST_TO_ADDR
// if p3 = 107 then
67376: LD_VAR 0 3
67380: PUSH
67381: LD_INT 107
67383: EQUAL
67384: IFFALSE 67394
// sBomb := true ;
67386: LD_ADDR_EXP 90
67390: PUSH
67391: LD_INT 1
67393: ST_TO_ADDR
// if p3 = 108 then
67394: LD_VAR 0 3
67398: PUSH
67399: LD_INT 108
67401: EQUAL
67402: IFFALSE 67412
// sWound := true ;
67404: LD_ADDR_EXP 98
67408: PUSH
67409: LD_INT 1
67411: ST_TO_ADDR
// if p3 = 109 then
67412: LD_VAR 0 3
67416: PUSH
67417: LD_INT 109
67419: EQUAL
67420: IFFALSE 67430
// sBetray := true ;
67422: LD_ADDR_EXP 102
67426: PUSH
67427: LD_INT 1
67429: ST_TO_ADDR
// if p3 = 110 then
67430: LD_VAR 0 3
67434: PUSH
67435: LD_INT 110
67437: EQUAL
67438: IFFALSE 67448
// sContamin := true ;
67440: LD_ADDR_EXP 103
67444: PUSH
67445: LD_INT 1
67447: ST_TO_ADDR
// if p3 = 111 then
67448: LD_VAR 0 3
67452: PUSH
67453: LD_INT 111
67455: EQUAL
67456: IFFALSE 67466
// sOil := true ;
67458: LD_ADDR_EXP 105
67462: PUSH
67463: LD_INT 1
67465: ST_TO_ADDR
// if p3 = 112 then
67466: LD_VAR 0 3
67470: PUSH
67471: LD_INT 112
67473: EQUAL
67474: IFFALSE 67484
// sStu := true ;
67476: LD_ADDR_EXP 109
67480: PUSH
67481: LD_INT 1
67483: ST_TO_ADDR
// if p3 = 113 then
67484: LD_VAR 0 3
67488: PUSH
67489: LD_INT 113
67491: EQUAL
67492: IFFALSE 67502
// sBazooka := true ;
67494: LD_ADDR_EXP 112
67498: PUSH
67499: LD_INT 1
67501: ST_TO_ADDR
// if p3 = 114 then
67502: LD_VAR 0 3
67506: PUSH
67507: LD_INT 114
67509: EQUAL
67510: IFFALSE 67520
// sMortar := true ;
67512: LD_ADDR_EXP 113
67516: PUSH
67517: LD_INT 1
67519: ST_TO_ADDR
// if p3 = 115 then
67520: LD_VAR 0 3
67524: PUSH
67525: LD_INT 115
67527: EQUAL
67528: IFFALSE 67538
// sRanger := true ;
67530: LD_ADDR_EXP 123
67534: PUSH
67535: LD_INT 1
67537: ST_TO_ADDR
// if p3 = 116 then
67538: LD_VAR 0 3
67542: PUSH
67543: LD_INT 116
67545: EQUAL
67546: IFFALSE 67556
// sComputer := true ;
67548: LD_ADDR_EXP 124
67552: PUSH
67553: LD_INT 1
67555: ST_TO_ADDR
// if p3 = 117 then
67556: LD_VAR 0 3
67560: PUSH
67561: LD_INT 117
67563: EQUAL
67564: IFFALSE 67574
// s30 := true ;
67566: LD_ADDR_EXP 125
67570: PUSH
67571: LD_INT 1
67573: ST_TO_ADDR
// if p3 = 118 then
67574: LD_VAR 0 3
67578: PUSH
67579: LD_INT 118
67581: EQUAL
67582: IFFALSE 67592
// s60 := true ;
67584: LD_ADDR_EXP 126
67588: PUSH
67589: LD_INT 1
67591: ST_TO_ADDR
// end ; if p2 = hack_mode then
67592: LD_VAR 0 2
67596: PUSH
67597: LD_INT 101
67599: EQUAL
67600: IFFALSE 67728
// begin case p3 of 1 :
67602: LD_VAR 0 3
67606: PUSH
67607: LD_INT 1
67609: DOUBLE
67610: EQUAL
67611: IFTRUE 67615
67613: GO 67622
67615: POP
// hHackUnlimitedResources ; 2 :
67616: CALL 79875 0 0
67620: GO 67728
67622: LD_INT 2
67624: DOUBLE
67625: EQUAL
67626: IFTRUE 67630
67628: GO 67637
67630: POP
// hHackSetLevel10 ; 3 :
67631: CALL 80008 0 0
67635: GO 67728
67637: LD_INT 3
67639: DOUBLE
67640: EQUAL
67641: IFTRUE 67645
67643: GO 67652
67645: POP
// hHackSetLevel10YourUnits ; 4 :
67646: CALL 80093 0 0
67650: GO 67728
67652: LD_INT 4
67654: DOUBLE
67655: EQUAL
67656: IFTRUE 67660
67658: GO 67667
67660: POP
// hHackInvincible ; 5 :
67661: CALL 80541 0 0
67665: GO 67728
67667: LD_INT 5
67669: DOUBLE
67670: EQUAL
67671: IFTRUE 67675
67673: GO 67682
67675: POP
// hHackInvisible ; 6 :
67676: CALL 80652 0 0
67680: GO 67728
67682: LD_INT 6
67684: DOUBLE
67685: EQUAL
67686: IFTRUE 67690
67688: GO 67697
67690: POP
// hHackChangeYourSide ; 7 :
67691: CALL 80709 0 0
67695: GO 67728
67697: LD_INT 7
67699: DOUBLE
67700: EQUAL
67701: IFTRUE 67705
67703: GO 67712
67705: POP
// hHackChangeUnitSide ; 8 :
67706: CALL 80751 0 0
67710: GO 67728
67712: LD_INT 8
67714: DOUBLE
67715: EQUAL
67716: IFTRUE 67720
67718: GO 67727
67720: POP
// hHackFog ; end ;
67721: CALL 80852 0 0
67725: GO 67728
67727: POP
// end ; if p2 = game_save_mode then
67728: LD_VAR 0 2
67732: PUSH
67733: LD_INT 102
67735: EQUAL
67736: IFFALSE 67791
// begin if p3 = 1 then
67738: LD_VAR 0 3
67742: PUSH
67743: LD_INT 1
67745: EQUAL
67746: IFFALSE 67758
// globalGameSaveCounter := p4 ;
67748: LD_ADDR_EXP 69
67752: PUSH
67753: LD_VAR 0 4
67757: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
67758: LD_VAR 0 3
67762: PUSH
67763: LD_INT 2
67765: EQUAL
67766: PUSH
67767: LD_EXP 69
67771: AND
67772: IFFALSE 67791
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
67774: LD_STRING setGameSaveCounter(
67776: PUSH
67777: LD_EXP 69
67781: STR
67782: PUSH
67783: LD_STRING )
67785: STR
67786: PPUSH
67787: CALL_OW 559
// end ; end ;
67791: LD_VAR 0 7
67795: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
67796: LD_INT 0
67798: PPUSH
// streamModeActive := false ;
67799: LD_ADDR_EXP 70
67803: PUSH
67804: LD_INT 0
67806: ST_TO_ADDR
// normalCounter := 36 ;
67807: LD_ADDR_EXP 71
67811: PUSH
67812: LD_INT 36
67814: ST_TO_ADDR
// hardcoreCounter := 18 ;
67815: LD_ADDR_EXP 72
67819: PUSH
67820: LD_INT 18
67822: ST_TO_ADDR
// sRocket := false ;
67823: LD_ADDR_EXP 75
67827: PUSH
67828: LD_INT 0
67830: ST_TO_ADDR
// sSpeed := false ;
67831: LD_ADDR_EXP 74
67835: PUSH
67836: LD_INT 0
67838: ST_TO_ADDR
// sEngine := false ;
67839: LD_ADDR_EXP 76
67843: PUSH
67844: LD_INT 0
67846: ST_TO_ADDR
// sSpec := false ;
67847: LD_ADDR_EXP 73
67851: PUSH
67852: LD_INT 0
67854: ST_TO_ADDR
// sLevel := false ;
67855: LD_ADDR_EXP 77
67859: PUSH
67860: LD_INT 0
67862: ST_TO_ADDR
// sArmoury := false ;
67863: LD_ADDR_EXP 78
67867: PUSH
67868: LD_INT 0
67870: ST_TO_ADDR
// sRadar := false ;
67871: LD_ADDR_EXP 79
67875: PUSH
67876: LD_INT 0
67878: ST_TO_ADDR
// sBunker := false ;
67879: LD_ADDR_EXP 80
67883: PUSH
67884: LD_INT 0
67886: ST_TO_ADDR
// sHack := false ;
67887: LD_ADDR_EXP 81
67891: PUSH
67892: LD_INT 0
67894: ST_TO_ADDR
// sFire := false ;
67895: LD_ADDR_EXP 82
67899: PUSH
67900: LD_INT 0
67902: ST_TO_ADDR
// sRefresh := false ;
67903: LD_ADDR_EXP 83
67907: PUSH
67908: LD_INT 0
67910: ST_TO_ADDR
// sExp := false ;
67911: LD_ADDR_EXP 84
67915: PUSH
67916: LD_INT 0
67918: ST_TO_ADDR
// sDepot := false ;
67919: LD_ADDR_EXP 85
67923: PUSH
67924: LD_INT 0
67926: ST_TO_ADDR
// sFlag := false ;
67927: LD_ADDR_EXP 86
67931: PUSH
67932: LD_INT 0
67934: ST_TO_ADDR
// sKamikadze := false ;
67935: LD_ADDR_EXP 94
67939: PUSH
67940: LD_INT 0
67942: ST_TO_ADDR
// sTroll := false ;
67943: LD_ADDR_EXP 95
67947: PUSH
67948: LD_INT 0
67950: ST_TO_ADDR
// sSlow := false ;
67951: LD_ADDR_EXP 96
67955: PUSH
67956: LD_INT 0
67958: ST_TO_ADDR
// sLack := false ;
67959: LD_ADDR_EXP 97
67963: PUSH
67964: LD_INT 0
67966: ST_TO_ADDR
// sTank := false ;
67967: LD_ADDR_EXP 99
67971: PUSH
67972: LD_INT 0
67974: ST_TO_ADDR
// sRemote := false ;
67975: LD_ADDR_EXP 100
67979: PUSH
67980: LD_INT 0
67982: ST_TO_ADDR
// sPowell := false ;
67983: LD_ADDR_EXP 101
67987: PUSH
67988: LD_INT 0
67990: ST_TO_ADDR
// sTeleport := false ;
67991: LD_ADDR_EXP 104
67995: PUSH
67996: LD_INT 0
67998: ST_TO_ADDR
// sOilTower := false ;
67999: LD_ADDR_EXP 106
68003: PUSH
68004: LD_INT 0
68006: ST_TO_ADDR
// sShovel := false ;
68007: LD_ADDR_EXP 107
68011: PUSH
68012: LD_INT 0
68014: ST_TO_ADDR
// sSheik := false ;
68015: LD_ADDR_EXP 108
68019: PUSH
68020: LD_INT 0
68022: ST_TO_ADDR
// sEarthquake := false ;
68023: LD_ADDR_EXP 110
68027: PUSH
68028: LD_INT 0
68030: ST_TO_ADDR
// sAI := false ;
68031: LD_ADDR_EXP 111
68035: PUSH
68036: LD_INT 0
68038: ST_TO_ADDR
// sCargo := false ;
68039: LD_ADDR_EXP 114
68043: PUSH
68044: LD_INT 0
68046: ST_TO_ADDR
// sDLaser := false ;
68047: LD_ADDR_EXP 115
68051: PUSH
68052: LD_INT 0
68054: ST_TO_ADDR
// sExchange := false ;
68055: LD_ADDR_EXP 116
68059: PUSH
68060: LD_INT 0
68062: ST_TO_ADDR
// sFac := false ;
68063: LD_ADDR_EXP 117
68067: PUSH
68068: LD_INT 0
68070: ST_TO_ADDR
// sPower := false ;
68071: LD_ADDR_EXP 118
68075: PUSH
68076: LD_INT 0
68078: ST_TO_ADDR
// sRandom := false ;
68079: LD_ADDR_EXP 119
68083: PUSH
68084: LD_INT 0
68086: ST_TO_ADDR
// sShield := false ;
68087: LD_ADDR_EXP 120
68091: PUSH
68092: LD_INT 0
68094: ST_TO_ADDR
// sTime := false ;
68095: LD_ADDR_EXP 121
68099: PUSH
68100: LD_INT 0
68102: ST_TO_ADDR
// sTools := false ;
68103: LD_ADDR_EXP 122
68107: PUSH
68108: LD_INT 0
68110: ST_TO_ADDR
// sSold := false ;
68111: LD_ADDR_EXP 87
68115: PUSH
68116: LD_INT 0
68118: ST_TO_ADDR
// sDiff := false ;
68119: LD_ADDR_EXP 88
68123: PUSH
68124: LD_INT 0
68126: ST_TO_ADDR
// sFog := false ;
68127: LD_ADDR_EXP 91
68131: PUSH
68132: LD_INT 0
68134: ST_TO_ADDR
// sReset := false ;
68135: LD_ADDR_EXP 92
68139: PUSH
68140: LD_INT 0
68142: ST_TO_ADDR
// sSun := false ;
68143: LD_ADDR_EXP 93
68147: PUSH
68148: LD_INT 0
68150: ST_TO_ADDR
// sTiger := false ;
68151: LD_ADDR_EXP 89
68155: PUSH
68156: LD_INT 0
68158: ST_TO_ADDR
// sBomb := false ;
68159: LD_ADDR_EXP 90
68163: PUSH
68164: LD_INT 0
68166: ST_TO_ADDR
// sWound := false ;
68167: LD_ADDR_EXP 98
68171: PUSH
68172: LD_INT 0
68174: ST_TO_ADDR
// sBetray := false ;
68175: LD_ADDR_EXP 102
68179: PUSH
68180: LD_INT 0
68182: ST_TO_ADDR
// sContamin := false ;
68183: LD_ADDR_EXP 103
68187: PUSH
68188: LD_INT 0
68190: ST_TO_ADDR
// sOil := false ;
68191: LD_ADDR_EXP 105
68195: PUSH
68196: LD_INT 0
68198: ST_TO_ADDR
// sStu := false ;
68199: LD_ADDR_EXP 109
68203: PUSH
68204: LD_INT 0
68206: ST_TO_ADDR
// sBazooka := false ;
68207: LD_ADDR_EXP 112
68211: PUSH
68212: LD_INT 0
68214: ST_TO_ADDR
// sMortar := false ;
68215: LD_ADDR_EXP 113
68219: PUSH
68220: LD_INT 0
68222: ST_TO_ADDR
// sRanger := false ;
68223: LD_ADDR_EXP 123
68227: PUSH
68228: LD_INT 0
68230: ST_TO_ADDR
// sComputer := false ;
68231: LD_ADDR_EXP 124
68235: PUSH
68236: LD_INT 0
68238: ST_TO_ADDR
// s30 := false ;
68239: LD_ADDR_EXP 125
68243: PUSH
68244: LD_INT 0
68246: ST_TO_ADDR
// s60 := false ;
68247: LD_ADDR_EXP 126
68251: PUSH
68252: LD_INT 0
68254: ST_TO_ADDR
// end ;
68255: LD_VAR 0 1
68259: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
68260: LD_INT 0
68262: PPUSH
68263: PPUSH
68264: PPUSH
68265: PPUSH
68266: PPUSH
68267: PPUSH
68268: PPUSH
// result := [ ] ;
68269: LD_ADDR_VAR 0 2
68273: PUSH
68274: EMPTY
68275: ST_TO_ADDR
// if campaign_id = 1 then
68276: LD_OWVAR 69
68280: PUSH
68281: LD_INT 1
68283: EQUAL
68284: IFFALSE 71450
// begin case mission_number of 1 :
68286: LD_OWVAR 70
68290: PUSH
68291: LD_INT 1
68293: DOUBLE
68294: EQUAL
68295: IFTRUE 68299
68297: GO 68375
68299: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
68300: LD_ADDR_VAR 0 2
68304: PUSH
68305: LD_INT 2
68307: PUSH
68308: LD_INT 4
68310: PUSH
68311: LD_INT 11
68313: PUSH
68314: LD_INT 12
68316: PUSH
68317: LD_INT 15
68319: PUSH
68320: LD_INT 16
68322: PUSH
68323: LD_INT 22
68325: PUSH
68326: LD_INT 23
68328: PUSH
68329: LD_INT 26
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: PUSH
68343: LD_INT 101
68345: PUSH
68346: LD_INT 102
68348: PUSH
68349: LD_INT 106
68351: PUSH
68352: LD_INT 116
68354: PUSH
68355: LD_INT 117
68357: PUSH
68358: LD_INT 118
68360: PUSH
68361: EMPTY
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: ST_TO_ADDR
68373: GO 71448
68375: LD_INT 2
68377: DOUBLE
68378: EQUAL
68379: IFTRUE 68383
68381: GO 68467
68383: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
68384: LD_ADDR_VAR 0 2
68388: PUSH
68389: LD_INT 2
68391: PUSH
68392: LD_INT 4
68394: PUSH
68395: LD_INT 11
68397: PUSH
68398: LD_INT 12
68400: PUSH
68401: LD_INT 15
68403: PUSH
68404: LD_INT 16
68406: PUSH
68407: LD_INT 22
68409: PUSH
68410: LD_INT 23
68412: PUSH
68413: LD_INT 26
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: PUSH
68427: LD_INT 101
68429: PUSH
68430: LD_INT 102
68432: PUSH
68433: LD_INT 105
68435: PUSH
68436: LD_INT 106
68438: PUSH
68439: LD_INT 108
68441: PUSH
68442: LD_INT 116
68444: PUSH
68445: LD_INT 117
68447: PUSH
68448: LD_INT 118
68450: PUSH
68451: EMPTY
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: PUSH
68461: EMPTY
68462: LIST
68463: LIST
68464: ST_TO_ADDR
68465: GO 71448
68467: LD_INT 3
68469: DOUBLE
68470: EQUAL
68471: IFTRUE 68475
68473: GO 68563
68475: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
68476: LD_ADDR_VAR 0 2
68480: PUSH
68481: LD_INT 2
68483: PUSH
68484: LD_INT 4
68486: PUSH
68487: LD_INT 5
68489: PUSH
68490: LD_INT 11
68492: PUSH
68493: LD_INT 12
68495: PUSH
68496: LD_INT 15
68498: PUSH
68499: LD_INT 16
68501: PUSH
68502: LD_INT 22
68504: PUSH
68505: LD_INT 26
68507: PUSH
68508: LD_INT 36
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: LIST
68515: LIST
68516: LIST
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: PUSH
68523: LD_INT 101
68525: PUSH
68526: LD_INT 102
68528: PUSH
68529: LD_INT 105
68531: PUSH
68532: LD_INT 106
68534: PUSH
68535: LD_INT 108
68537: PUSH
68538: LD_INT 116
68540: PUSH
68541: LD_INT 117
68543: PUSH
68544: LD_INT 118
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: LIST
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: PUSH
68557: EMPTY
68558: LIST
68559: LIST
68560: ST_TO_ADDR
68561: GO 71448
68563: LD_INT 4
68565: DOUBLE
68566: EQUAL
68567: IFTRUE 68571
68569: GO 68667
68571: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
68572: LD_ADDR_VAR 0 2
68576: PUSH
68577: LD_INT 2
68579: PUSH
68580: LD_INT 4
68582: PUSH
68583: LD_INT 5
68585: PUSH
68586: LD_INT 8
68588: PUSH
68589: LD_INT 11
68591: PUSH
68592: LD_INT 12
68594: PUSH
68595: LD_INT 15
68597: PUSH
68598: LD_INT 16
68600: PUSH
68601: LD_INT 22
68603: PUSH
68604: LD_INT 23
68606: PUSH
68607: LD_INT 26
68609: PUSH
68610: LD_INT 36
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: PUSH
68627: LD_INT 101
68629: PUSH
68630: LD_INT 102
68632: PUSH
68633: LD_INT 105
68635: PUSH
68636: LD_INT 106
68638: PUSH
68639: LD_INT 108
68641: PUSH
68642: LD_INT 116
68644: PUSH
68645: LD_INT 117
68647: PUSH
68648: LD_INT 118
68650: PUSH
68651: EMPTY
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: PUSH
68661: EMPTY
68662: LIST
68663: LIST
68664: ST_TO_ADDR
68665: GO 71448
68667: LD_INT 5
68669: DOUBLE
68670: EQUAL
68671: IFTRUE 68675
68673: GO 68787
68675: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
68676: LD_ADDR_VAR 0 2
68680: PUSH
68681: LD_INT 2
68683: PUSH
68684: LD_INT 4
68686: PUSH
68687: LD_INT 5
68689: PUSH
68690: LD_INT 6
68692: PUSH
68693: LD_INT 8
68695: PUSH
68696: LD_INT 11
68698: PUSH
68699: LD_INT 12
68701: PUSH
68702: LD_INT 15
68704: PUSH
68705: LD_INT 16
68707: PUSH
68708: LD_INT 22
68710: PUSH
68711: LD_INT 23
68713: PUSH
68714: LD_INT 25
68716: PUSH
68717: LD_INT 26
68719: PUSH
68720: LD_INT 36
68722: PUSH
68723: EMPTY
68724: LIST
68725: LIST
68726: LIST
68727: LIST
68728: LIST
68729: LIST
68730: LIST
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 101
68741: PUSH
68742: LD_INT 102
68744: PUSH
68745: LD_INT 105
68747: PUSH
68748: LD_INT 106
68750: PUSH
68751: LD_INT 108
68753: PUSH
68754: LD_INT 109
68756: PUSH
68757: LD_INT 112
68759: PUSH
68760: LD_INT 116
68762: PUSH
68763: LD_INT 117
68765: PUSH
68766: LD_INT 118
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: LIST
68778: LIST
68779: LIST
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: ST_TO_ADDR
68785: GO 71448
68787: LD_INT 6
68789: DOUBLE
68790: EQUAL
68791: IFTRUE 68795
68793: GO 68927
68795: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
68796: LD_ADDR_VAR 0 2
68800: PUSH
68801: LD_INT 2
68803: PUSH
68804: LD_INT 4
68806: PUSH
68807: LD_INT 5
68809: PUSH
68810: LD_INT 6
68812: PUSH
68813: LD_INT 8
68815: PUSH
68816: LD_INT 11
68818: PUSH
68819: LD_INT 12
68821: PUSH
68822: LD_INT 15
68824: PUSH
68825: LD_INT 16
68827: PUSH
68828: LD_INT 20
68830: PUSH
68831: LD_INT 21
68833: PUSH
68834: LD_INT 22
68836: PUSH
68837: LD_INT 23
68839: PUSH
68840: LD_INT 25
68842: PUSH
68843: LD_INT 26
68845: PUSH
68846: LD_INT 30
68848: PUSH
68849: LD_INT 31
68851: PUSH
68852: LD_INT 32
68854: PUSH
68855: LD_INT 36
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: LIST
68864: LIST
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 101
68881: PUSH
68882: LD_INT 102
68884: PUSH
68885: LD_INT 105
68887: PUSH
68888: LD_INT 106
68890: PUSH
68891: LD_INT 108
68893: PUSH
68894: LD_INT 109
68896: PUSH
68897: LD_INT 112
68899: PUSH
68900: LD_INT 116
68902: PUSH
68903: LD_INT 117
68905: PUSH
68906: LD_INT 118
68908: PUSH
68909: EMPTY
68910: LIST
68911: LIST
68912: LIST
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: PUSH
68921: EMPTY
68922: LIST
68923: LIST
68924: ST_TO_ADDR
68925: GO 71448
68927: LD_INT 7
68929: DOUBLE
68930: EQUAL
68931: IFTRUE 68935
68933: GO 69047
68935: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
68936: LD_ADDR_VAR 0 2
68940: PUSH
68941: LD_INT 2
68943: PUSH
68944: LD_INT 4
68946: PUSH
68947: LD_INT 5
68949: PUSH
68950: LD_INT 7
68952: PUSH
68953: LD_INT 11
68955: PUSH
68956: LD_INT 12
68958: PUSH
68959: LD_INT 15
68961: PUSH
68962: LD_INT 16
68964: PUSH
68965: LD_INT 20
68967: PUSH
68968: LD_INT 21
68970: PUSH
68971: LD_INT 22
68973: PUSH
68974: LD_INT 23
68976: PUSH
68977: LD_INT 25
68979: PUSH
68980: LD_INT 26
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: LIST
68993: LIST
68994: LIST
68995: LIST
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 101
69001: PUSH
69002: LD_INT 102
69004: PUSH
69005: LD_INT 103
69007: PUSH
69008: LD_INT 105
69010: PUSH
69011: LD_INT 106
69013: PUSH
69014: LD_INT 108
69016: PUSH
69017: LD_INT 112
69019: PUSH
69020: LD_INT 116
69022: PUSH
69023: LD_INT 117
69025: PUSH
69026: LD_INT 118
69028: PUSH
69029: EMPTY
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: ST_TO_ADDR
69045: GO 71448
69047: LD_INT 8
69049: DOUBLE
69050: EQUAL
69051: IFTRUE 69055
69053: GO 69195
69055: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
69056: LD_ADDR_VAR 0 2
69060: PUSH
69061: LD_INT 2
69063: PUSH
69064: LD_INT 4
69066: PUSH
69067: LD_INT 5
69069: PUSH
69070: LD_INT 6
69072: PUSH
69073: LD_INT 7
69075: PUSH
69076: LD_INT 8
69078: PUSH
69079: LD_INT 11
69081: PUSH
69082: LD_INT 12
69084: PUSH
69085: LD_INT 15
69087: PUSH
69088: LD_INT 16
69090: PUSH
69091: LD_INT 20
69093: PUSH
69094: LD_INT 21
69096: PUSH
69097: LD_INT 22
69099: PUSH
69100: LD_INT 23
69102: PUSH
69103: LD_INT 25
69105: PUSH
69106: LD_INT 26
69108: PUSH
69109: LD_INT 30
69111: PUSH
69112: LD_INT 31
69114: PUSH
69115: LD_INT 32
69117: PUSH
69118: LD_INT 36
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: LIST
69132: LIST
69133: LIST
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: PUSH
69143: LD_INT 101
69145: PUSH
69146: LD_INT 102
69148: PUSH
69149: LD_INT 103
69151: PUSH
69152: LD_INT 105
69154: PUSH
69155: LD_INT 106
69157: PUSH
69158: LD_INT 108
69160: PUSH
69161: LD_INT 109
69163: PUSH
69164: LD_INT 112
69166: PUSH
69167: LD_INT 116
69169: PUSH
69170: LD_INT 117
69172: PUSH
69173: LD_INT 118
69175: PUSH
69176: EMPTY
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: LIST
69187: LIST
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: ST_TO_ADDR
69193: GO 71448
69195: LD_INT 9
69197: DOUBLE
69198: EQUAL
69199: IFTRUE 69203
69201: GO 69351
69203: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
69204: LD_ADDR_VAR 0 2
69208: PUSH
69209: LD_INT 2
69211: PUSH
69212: LD_INT 4
69214: PUSH
69215: LD_INT 5
69217: PUSH
69218: LD_INT 6
69220: PUSH
69221: LD_INT 7
69223: PUSH
69224: LD_INT 8
69226: PUSH
69227: LD_INT 11
69229: PUSH
69230: LD_INT 12
69232: PUSH
69233: LD_INT 15
69235: PUSH
69236: LD_INT 16
69238: PUSH
69239: LD_INT 20
69241: PUSH
69242: LD_INT 21
69244: PUSH
69245: LD_INT 22
69247: PUSH
69248: LD_INT 23
69250: PUSH
69251: LD_INT 25
69253: PUSH
69254: LD_INT 26
69256: PUSH
69257: LD_INT 28
69259: PUSH
69260: LD_INT 30
69262: PUSH
69263: LD_INT 31
69265: PUSH
69266: LD_INT 32
69268: PUSH
69269: LD_INT 36
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: LIST
69280: LIST
69281: LIST
69282: LIST
69283: LIST
69284: LIST
69285: LIST
69286: LIST
69287: LIST
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 101
69297: PUSH
69298: LD_INT 102
69300: PUSH
69301: LD_INT 103
69303: PUSH
69304: LD_INT 105
69306: PUSH
69307: LD_INT 106
69309: PUSH
69310: LD_INT 108
69312: PUSH
69313: LD_INT 109
69315: PUSH
69316: LD_INT 112
69318: PUSH
69319: LD_INT 114
69321: PUSH
69322: LD_INT 116
69324: PUSH
69325: LD_INT 117
69327: PUSH
69328: LD_INT 118
69330: PUSH
69331: EMPTY
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: PUSH
69345: EMPTY
69346: LIST
69347: LIST
69348: ST_TO_ADDR
69349: GO 71448
69351: LD_INT 10
69353: DOUBLE
69354: EQUAL
69355: IFTRUE 69359
69357: GO 69555
69359: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
69360: LD_ADDR_VAR 0 2
69364: PUSH
69365: LD_INT 2
69367: PUSH
69368: LD_INT 4
69370: PUSH
69371: LD_INT 5
69373: PUSH
69374: LD_INT 6
69376: PUSH
69377: LD_INT 7
69379: PUSH
69380: LD_INT 8
69382: PUSH
69383: LD_INT 9
69385: PUSH
69386: LD_INT 10
69388: PUSH
69389: LD_INT 11
69391: PUSH
69392: LD_INT 12
69394: PUSH
69395: LD_INT 13
69397: PUSH
69398: LD_INT 14
69400: PUSH
69401: LD_INT 15
69403: PUSH
69404: LD_INT 16
69406: PUSH
69407: LD_INT 17
69409: PUSH
69410: LD_INT 18
69412: PUSH
69413: LD_INT 19
69415: PUSH
69416: LD_INT 20
69418: PUSH
69419: LD_INT 21
69421: PUSH
69422: LD_INT 22
69424: PUSH
69425: LD_INT 23
69427: PUSH
69428: LD_INT 24
69430: PUSH
69431: LD_INT 25
69433: PUSH
69434: LD_INT 26
69436: PUSH
69437: LD_INT 28
69439: PUSH
69440: LD_INT 30
69442: PUSH
69443: LD_INT 31
69445: PUSH
69446: LD_INT 32
69448: PUSH
69449: LD_INT 36
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: LIST
69471: LIST
69472: LIST
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: PUSH
69483: LD_INT 101
69485: PUSH
69486: LD_INT 102
69488: PUSH
69489: LD_INT 103
69491: PUSH
69492: LD_INT 104
69494: PUSH
69495: LD_INT 105
69497: PUSH
69498: LD_INT 106
69500: PUSH
69501: LD_INT 107
69503: PUSH
69504: LD_INT 108
69506: PUSH
69507: LD_INT 109
69509: PUSH
69510: LD_INT 110
69512: PUSH
69513: LD_INT 111
69515: PUSH
69516: LD_INT 112
69518: PUSH
69519: LD_INT 114
69521: PUSH
69522: LD_INT 116
69524: PUSH
69525: LD_INT 117
69527: PUSH
69528: LD_INT 118
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: ST_TO_ADDR
69553: GO 71448
69555: LD_INT 11
69557: DOUBLE
69558: EQUAL
69559: IFTRUE 69563
69561: GO 69767
69563: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
69564: LD_ADDR_VAR 0 2
69568: PUSH
69569: LD_INT 2
69571: PUSH
69572: LD_INT 3
69574: PUSH
69575: LD_INT 4
69577: PUSH
69578: LD_INT 5
69580: PUSH
69581: LD_INT 6
69583: PUSH
69584: LD_INT 7
69586: PUSH
69587: LD_INT 8
69589: PUSH
69590: LD_INT 9
69592: PUSH
69593: LD_INT 10
69595: PUSH
69596: LD_INT 11
69598: PUSH
69599: LD_INT 12
69601: PUSH
69602: LD_INT 13
69604: PUSH
69605: LD_INT 14
69607: PUSH
69608: LD_INT 15
69610: PUSH
69611: LD_INT 16
69613: PUSH
69614: LD_INT 17
69616: PUSH
69617: LD_INT 18
69619: PUSH
69620: LD_INT 19
69622: PUSH
69623: LD_INT 20
69625: PUSH
69626: LD_INT 21
69628: PUSH
69629: LD_INT 22
69631: PUSH
69632: LD_INT 23
69634: PUSH
69635: LD_INT 24
69637: PUSH
69638: LD_INT 25
69640: PUSH
69641: LD_INT 26
69643: PUSH
69644: LD_INT 28
69646: PUSH
69647: LD_INT 30
69649: PUSH
69650: LD_INT 31
69652: PUSH
69653: LD_INT 32
69655: PUSH
69656: LD_INT 34
69658: PUSH
69659: LD_INT 36
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 101
69697: PUSH
69698: LD_INT 102
69700: PUSH
69701: LD_INT 103
69703: PUSH
69704: LD_INT 104
69706: PUSH
69707: LD_INT 105
69709: PUSH
69710: LD_INT 106
69712: PUSH
69713: LD_INT 107
69715: PUSH
69716: LD_INT 108
69718: PUSH
69719: LD_INT 109
69721: PUSH
69722: LD_INT 110
69724: PUSH
69725: LD_INT 111
69727: PUSH
69728: LD_INT 112
69730: PUSH
69731: LD_INT 114
69733: PUSH
69734: LD_INT 116
69736: PUSH
69737: LD_INT 117
69739: PUSH
69740: LD_INT 118
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: LIST
69750: LIST
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: ST_TO_ADDR
69765: GO 71448
69767: LD_INT 12
69769: DOUBLE
69770: EQUAL
69771: IFTRUE 69775
69773: GO 69995
69775: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
69776: LD_ADDR_VAR 0 2
69780: PUSH
69781: LD_INT 1
69783: PUSH
69784: LD_INT 2
69786: PUSH
69787: LD_INT 3
69789: PUSH
69790: LD_INT 4
69792: PUSH
69793: LD_INT 5
69795: PUSH
69796: LD_INT 6
69798: PUSH
69799: LD_INT 7
69801: PUSH
69802: LD_INT 8
69804: PUSH
69805: LD_INT 9
69807: PUSH
69808: LD_INT 10
69810: PUSH
69811: LD_INT 11
69813: PUSH
69814: LD_INT 12
69816: PUSH
69817: LD_INT 13
69819: PUSH
69820: LD_INT 14
69822: PUSH
69823: LD_INT 15
69825: PUSH
69826: LD_INT 16
69828: PUSH
69829: LD_INT 17
69831: PUSH
69832: LD_INT 18
69834: PUSH
69835: LD_INT 19
69837: PUSH
69838: LD_INT 20
69840: PUSH
69841: LD_INT 21
69843: PUSH
69844: LD_INT 22
69846: PUSH
69847: LD_INT 23
69849: PUSH
69850: LD_INT 24
69852: PUSH
69853: LD_INT 25
69855: PUSH
69856: LD_INT 26
69858: PUSH
69859: LD_INT 27
69861: PUSH
69862: LD_INT 28
69864: PUSH
69865: LD_INT 30
69867: PUSH
69868: LD_INT 31
69870: PUSH
69871: LD_INT 32
69873: PUSH
69874: LD_INT 33
69876: PUSH
69877: LD_INT 34
69879: PUSH
69880: LD_INT 36
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: LIST
69897: LIST
69898: LIST
69899: LIST
69900: LIST
69901: LIST
69902: LIST
69903: LIST
69904: LIST
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 101
69921: PUSH
69922: LD_INT 102
69924: PUSH
69925: LD_INT 103
69927: PUSH
69928: LD_INT 104
69930: PUSH
69931: LD_INT 105
69933: PUSH
69934: LD_INT 106
69936: PUSH
69937: LD_INT 107
69939: PUSH
69940: LD_INT 108
69942: PUSH
69943: LD_INT 109
69945: PUSH
69946: LD_INT 110
69948: PUSH
69949: LD_INT 111
69951: PUSH
69952: LD_INT 112
69954: PUSH
69955: LD_INT 113
69957: PUSH
69958: LD_INT 114
69960: PUSH
69961: LD_INT 116
69963: PUSH
69964: LD_INT 117
69966: PUSH
69967: LD_INT 118
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: LIST
69974: LIST
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: ST_TO_ADDR
69993: GO 71448
69995: LD_INT 13
69997: DOUBLE
69998: EQUAL
69999: IFTRUE 70003
70001: GO 70211
70003: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
70004: LD_ADDR_VAR 0 2
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: LD_INT 2
70014: PUSH
70015: LD_INT 3
70017: PUSH
70018: LD_INT 4
70020: PUSH
70021: LD_INT 5
70023: PUSH
70024: LD_INT 8
70026: PUSH
70027: LD_INT 9
70029: PUSH
70030: LD_INT 10
70032: PUSH
70033: LD_INT 11
70035: PUSH
70036: LD_INT 12
70038: PUSH
70039: LD_INT 14
70041: PUSH
70042: LD_INT 15
70044: PUSH
70045: LD_INT 16
70047: PUSH
70048: LD_INT 17
70050: PUSH
70051: LD_INT 18
70053: PUSH
70054: LD_INT 19
70056: PUSH
70057: LD_INT 20
70059: PUSH
70060: LD_INT 21
70062: PUSH
70063: LD_INT 22
70065: PUSH
70066: LD_INT 23
70068: PUSH
70069: LD_INT 24
70071: PUSH
70072: LD_INT 25
70074: PUSH
70075: LD_INT 26
70077: PUSH
70078: LD_INT 27
70080: PUSH
70081: LD_INT 28
70083: PUSH
70084: LD_INT 30
70086: PUSH
70087: LD_INT 31
70089: PUSH
70090: LD_INT 32
70092: PUSH
70093: LD_INT 33
70095: PUSH
70096: LD_INT 34
70098: PUSH
70099: LD_INT 36
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: LIST
70111: LIST
70112: LIST
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 101
70137: PUSH
70138: LD_INT 102
70140: PUSH
70141: LD_INT 103
70143: PUSH
70144: LD_INT 104
70146: PUSH
70147: LD_INT 105
70149: PUSH
70150: LD_INT 106
70152: PUSH
70153: LD_INT 107
70155: PUSH
70156: LD_INT 108
70158: PUSH
70159: LD_INT 109
70161: PUSH
70162: LD_INT 110
70164: PUSH
70165: LD_INT 111
70167: PUSH
70168: LD_INT 112
70170: PUSH
70171: LD_INT 113
70173: PUSH
70174: LD_INT 114
70176: PUSH
70177: LD_INT 116
70179: PUSH
70180: LD_INT 117
70182: PUSH
70183: LD_INT 118
70185: PUSH
70186: EMPTY
70187: LIST
70188: LIST
70189: LIST
70190: LIST
70191: LIST
70192: LIST
70193: LIST
70194: LIST
70195: LIST
70196: LIST
70197: LIST
70198: LIST
70199: LIST
70200: LIST
70201: LIST
70202: LIST
70203: LIST
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: ST_TO_ADDR
70209: GO 71448
70211: LD_INT 14
70213: DOUBLE
70214: EQUAL
70215: IFTRUE 70219
70217: GO 70443
70219: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
70220: LD_ADDR_VAR 0 2
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: LD_INT 2
70230: PUSH
70231: LD_INT 3
70233: PUSH
70234: LD_INT 4
70236: PUSH
70237: LD_INT 5
70239: PUSH
70240: LD_INT 6
70242: PUSH
70243: LD_INT 7
70245: PUSH
70246: LD_INT 8
70248: PUSH
70249: LD_INT 9
70251: PUSH
70252: LD_INT 10
70254: PUSH
70255: LD_INT 11
70257: PUSH
70258: LD_INT 12
70260: PUSH
70261: LD_INT 13
70263: PUSH
70264: LD_INT 14
70266: PUSH
70267: LD_INT 15
70269: PUSH
70270: LD_INT 16
70272: PUSH
70273: LD_INT 17
70275: PUSH
70276: LD_INT 18
70278: PUSH
70279: LD_INT 19
70281: PUSH
70282: LD_INT 20
70284: PUSH
70285: LD_INT 21
70287: PUSH
70288: LD_INT 22
70290: PUSH
70291: LD_INT 23
70293: PUSH
70294: LD_INT 24
70296: PUSH
70297: LD_INT 25
70299: PUSH
70300: LD_INT 26
70302: PUSH
70303: LD_INT 27
70305: PUSH
70306: LD_INT 28
70308: PUSH
70309: LD_INT 29
70311: PUSH
70312: LD_INT 30
70314: PUSH
70315: LD_INT 31
70317: PUSH
70318: LD_INT 32
70320: PUSH
70321: LD_INT 33
70323: PUSH
70324: LD_INT 34
70326: PUSH
70327: LD_INT 36
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: LIST
70334: LIST
70335: LIST
70336: LIST
70337: LIST
70338: LIST
70339: LIST
70340: LIST
70341: LIST
70342: LIST
70343: LIST
70344: LIST
70345: LIST
70346: LIST
70347: LIST
70348: LIST
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: LIST
70359: LIST
70360: LIST
70361: LIST
70362: LIST
70363: LIST
70364: LIST
70365: LIST
70366: PUSH
70367: LD_INT 101
70369: PUSH
70370: LD_INT 102
70372: PUSH
70373: LD_INT 103
70375: PUSH
70376: LD_INT 104
70378: PUSH
70379: LD_INT 105
70381: PUSH
70382: LD_INT 106
70384: PUSH
70385: LD_INT 107
70387: PUSH
70388: LD_INT 108
70390: PUSH
70391: LD_INT 109
70393: PUSH
70394: LD_INT 110
70396: PUSH
70397: LD_INT 111
70399: PUSH
70400: LD_INT 112
70402: PUSH
70403: LD_INT 113
70405: PUSH
70406: LD_INT 114
70408: PUSH
70409: LD_INT 116
70411: PUSH
70412: LD_INT 117
70414: PUSH
70415: LD_INT 118
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: ST_TO_ADDR
70441: GO 71448
70443: LD_INT 15
70445: DOUBLE
70446: EQUAL
70447: IFTRUE 70451
70449: GO 70675
70451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
70452: LD_ADDR_VAR 0 2
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: LD_INT 2
70462: PUSH
70463: LD_INT 3
70465: PUSH
70466: LD_INT 4
70468: PUSH
70469: LD_INT 5
70471: PUSH
70472: LD_INT 6
70474: PUSH
70475: LD_INT 7
70477: PUSH
70478: LD_INT 8
70480: PUSH
70481: LD_INT 9
70483: PUSH
70484: LD_INT 10
70486: PUSH
70487: LD_INT 11
70489: PUSH
70490: LD_INT 12
70492: PUSH
70493: LD_INT 13
70495: PUSH
70496: LD_INT 14
70498: PUSH
70499: LD_INT 15
70501: PUSH
70502: LD_INT 16
70504: PUSH
70505: LD_INT 17
70507: PUSH
70508: LD_INT 18
70510: PUSH
70511: LD_INT 19
70513: PUSH
70514: LD_INT 20
70516: PUSH
70517: LD_INT 21
70519: PUSH
70520: LD_INT 22
70522: PUSH
70523: LD_INT 23
70525: PUSH
70526: LD_INT 24
70528: PUSH
70529: LD_INT 25
70531: PUSH
70532: LD_INT 26
70534: PUSH
70535: LD_INT 27
70537: PUSH
70538: LD_INT 28
70540: PUSH
70541: LD_INT 29
70543: PUSH
70544: LD_INT 30
70546: PUSH
70547: LD_INT 31
70549: PUSH
70550: LD_INT 32
70552: PUSH
70553: LD_INT 33
70555: PUSH
70556: LD_INT 34
70558: PUSH
70559: LD_INT 36
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: LIST
70584: LIST
70585: LIST
70586: LIST
70587: LIST
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 101
70601: PUSH
70602: LD_INT 102
70604: PUSH
70605: LD_INT 103
70607: PUSH
70608: LD_INT 104
70610: PUSH
70611: LD_INT 105
70613: PUSH
70614: LD_INT 106
70616: PUSH
70617: LD_INT 107
70619: PUSH
70620: LD_INT 108
70622: PUSH
70623: LD_INT 109
70625: PUSH
70626: LD_INT 110
70628: PUSH
70629: LD_INT 111
70631: PUSH
70632: LD_INT 112
70634: PUSH
70635: LD_INT 113
70637: PUSH
70638: LD_INT 114
70640: PUSH
70641: LD_INT 116
70643: PUSH
70644: LD_INT 117
70646: PUSH
70647: LD_INT 118
70649: PUSH
70650: EMPTY
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: ST_TO_ADDR
70673: GO 71448
70675: LD_INT 16
70677: DOUBLE
70678: EQUAL
70679: IFTRUE 70683
70681: GO 70819
70683: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
70684: LD_ADDR_VAR 0 2
70688: PUSH
70689: LD_INT 2
70691: PUSH
70692: LD_INT 4
70694: PUSH
70695: LD_INT 5
70697: PUSH
70698: LD_INT 7
70700: PUSH
70701: LD_INT 11
70703: PUSH
70704: LD_INT 12
70706: PUSH
70707: LD_INT 15
70709: PUSH
70710: LD_INT 16
70712: PUSH
70713: LD_INT 20
70715: PUSH
70716: LD_INT 21
70718: PUSH
70719: LD_INT 22
70721: PUSH
70722: LD_INT 23
70724: PUSH
70725: LD_INT 25
70727: PUSH
70728: LD_INT 26
70730: PUSH
70731: LD_INT 30
70733: PUSH
70734: LD_INT 31
70736: PUSH
70737: LD_INT 32
70739: PUSH
70740: LD_INT 33
70742: PUSH
70743: LD_INT 34
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: LIST
70750: LIST
70751: LIST
70752: LIST
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 101
70769: PUSH
70770: LD_INT 102
70772: PUSH
70773: LD_INT 103
70775: PUSH
70776: LD_INT 106
70778: PUSH
70779: LD_INT 108
70781: PUSH
70782: LD_INT 112
70784: PUSH
70785: LD_INT 113
70787: PUSH
70788: LD_INT 114
70790: PUSH
70791: LD_INT 116
70793: PUSH
70794: LD_INT 117
70796: PUSH
70797: LD_INT 118
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: LIST
70807: LIST
70808: LIST
70809: LIST
70810: LIST
70811: LIST
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: ST_TO_ADDR
70817: GO 71448
70819: LD_INT 17
70821: DOUBLE
70822: EQUAL
70823: IFTRUE 70827
70825: GO 71051
70827: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
70828: LD_ADDR_VAR 0 2
70832: PUSH
70833: LD_INT 1
70835: PUSH
70836: LD_INT 2
70838: PUSH
70839: LD_INT 3
70841: PUSH
70842: LD_INT 4
70844: PUSH
70845: LD_INT 5
70847: PUSH
70848: LD_INT 6
70850: PUSH
70851: LD_INT 7
70853: PUSH
70854: LD_INT 8
70856: PUSH
70857: LD_INT 9
70859: PUSH
70860: LD_INT 10
70862: PUSH
70863: LD_INT 11
70865: PUSH
70866: LD_INT 12
70868: PUSH
70869: LD_INT 13
70871: PUSH
70872: LD_INT 14
70874: PUSH
70875: LD_INT 15
70877: PUSH
70878: LD_INT 16
70880: PUSH
70881: LD_INT 17
70883: PUSH
70884: LD_INT 18
70886: PUSH
70887: LD_INT 19
70889: PUSH
70890: LD_INT 20
70892: PUSH
70893: LD_INT 21
70895: PUSH
70896: LD_INT 22
70898: PUSH
70899: LD_INT 23
70901: PUSH
70902: LD_INT 24
70904: PUSH
70905: LD_INT 25
70907: PUSH
70908: LD_INT 26
70910: PUSH
70911: LD_INT 27
70913: PUSH
70914: LD_INT 28
70916: PUSH
70917: LD_INT 29
70919: PUSH
70920: LD_INT 30
70922: PUSH
70923: LD_INT 31
70925: PUSH
70926: LD_INT 32
70928: PUSH
70929: LD_INT 33
70931: PUSH
70932: LD_INT 34
70934: PUSH
70935: LD_INT 36
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: LIST
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: LIST
70970: LIST
70971: LIST
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 101
70977: PUSH
70978: LD_INT 102
70980: PUSH
70981: LD_INT 103
70983: PUSH
70984: LD_INT 104
70986: PUSH
70987: LD_INT 105
70989: PUSH
70990: LD_INT 106
70992: PUSH
70993: LD_INT 107
70995: PUSH
70996: LD_INT 108
70998: PUSH
70999: LD_INT 109
71001: PUSH
71002: LD_INT 110
71004: PUSH
71005: LD_INT 111
71007: PUSH
71008: LD_INT 112
71010: PUSH
71011: LD_INT 113
71013: PUSH
71014: LD_INT 114
71016: PUSH
71017: LD_INT 116
71019: PUSH
71020: LD_INT 117
71022: PUSH
71023: LD_INT 118
71025: PUSH
71026: EMPTY
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: LIST
71033: LIST
71034: LIST
71035: LIST
71036: LIST
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: ST_TO_ADDR
71049: GO 71448
71051: LD_INT 18
71053: DOUBLE
71054: EQUAL
71055: IFTRUE 71059
71057: GO 71207
71059: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
71060: LD_ADDR_VAR 0 2
71064: PUSH
71065: LD_INT 2
71067: PUSH
71068: LD_INT 4
71070: PUSH
71071: LD_INT 5
71073: PUSH
71074: LD_INT 7
71076: PUSH
71077: LD_INT 11
71079: PUSH
71080: LD_INT 12
71082: PUSH
71083: LD_INT 15
71085: PUSH
71086: LD_INT 16
71088: PUSH
71089: LD_INT 20
71091: PUSH
71092: LD_INT 21
71094: PUSH
71095: LD_INT 22
71097: PUSH
71098: LD_INT 23
71100: PUSH
71101: LD_INT 25
71103: PUSH
71104: LD_INT 26
71106: PUSH
71107: LD_INT 30
71109: PUSH
71110: LD_INT 31
71112: PUSH
71113: LD_INT 32
71115: PUSH
71116: LD_INT 33
71118: PUSH
71119: LD_INT 34
71121: PUSH
71122: LD_INT 35
71124: PUSH
71125: LD_INT 36
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: LIST
71132: LIST
71133: LIST
71134: LIST
71135: LIST
71136: LIST
71137: LIST
71138: LIST
71139: LIST
71140: LIST
71141: LIST
71142: LIST
71143: LIST
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 101
71153: PUSH
71154: LD_INT 102
71156: PUSH
71157: LD_INT 103
71159: PUSH
71160: LD_INT 106
71162: PUSH
71163: LD_INT 108
71165: PUSH
71166: LD_INT 112
71168: PUSH
71169: LD_INT 113
71171: PUSH
71172: LD_INT 114
71174: PUSH
71175: LD_INT 115
71177: PUSH
71178: LD_INT 116
71180: PUSH
71181: LD_INT 117
71183: PUSH
71184: LD_INT 118
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: ST_TO_ADDR
71205: GO 71448
71207: LD_INT 19
71209: DOUBLE
71210: EQUAL
71211: IFTRUE 71215
71213: GO 71447
71215: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
71216: LD_ADDR_VAR 0 2
71220: PUSH
71221: LD_INT 1
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: LD_INT 3
71229: PUSH
71230: LD_INT 4
71232: PUSH
71233: LD_INT 5
71235: PUSH
71236: LD_INT 6
71238: PUSH
71239: LD_INT 7
71241: PUSH
71242: LD_INT 8
71244: PUSH
71245: LD_INT 9
71247: PUSH
71248: LD_INT 10
71250: PUSH
71251: LD_INT 11
71253: PUSH
71254: LD_INT 12
71256: PUSH
71257: LD_INT 13
71259: PUSH
71260: LD_INT 14
71262: PUSH
71263: LD_INT 15
71265: PUSH
71266: LD_INT 16
71268: PUSH
71269: LD_INT 17
71271: PUSH
71272: LD_INT 18
71274: PUSH
71275: LD_INT 19
71277: PUSH
71278: LD_INT 20
71280: PUSH
71281: LD_INT 21
71283: PUSH
71284: LD_INT 22
71286: PUSH
71287: LD_INT 23
71289: PUSH
71290: LD_INT 24
71292: PUSH
71293: LD_INT 25
71295: PUSH
71296: LD_INT 26
71298: PUSH
71299: LD_INT 27
71301: PUSH
71302: LD_INT 28
71304: PUSH
71305: LD_INT 29
71307: PUSH
71308: LD_INT 30
71310: PUSH
71311: LD_INT 31
71313: PUSH
71314: LD_INT 32
71316: PUSH
71317: LD_INT 33
71319: PUSH
71320: LD_INT 34
71322: PUSH
71323: LD_INT 35
71325: PUSH
71326: LD_INT 36
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: LIST
71353: LIST
71354: LIST
71355: LIST
71356: LIST
71357: LIST
71358: LIST
71359: LIST
71360: LIST
71361: LIST
71362: LIST
71363: LIST
71364: LIST
71365: LIST
71366: PUSH
71367: LD_INT 101
71369: PUSH
71370: LD_INT 102
71372: PUSH
71373: LD_INT 103
71375: PUSH
71376: LD_INT 104
71378: PUSH
71379: LD_INT 105
71381: PUSH
71382: LD_INT 106
71384: PUSH
71385: LD_INT 107
71387: PUSH
71388: LD_INT 108
71390: PUSH
71391: LD_INT 109
71393: PUSH
71394: LD_INT 110
71396: PUSH
71397: LD_INT 111
71399: PUSH
71400: LD_INT 112
71402: PUSH
71403: LD_INT 113
71405: PUSH
71406: LD_INT 114
71408: PUSH
71409: LD_INT 115
71411: PUSH
71412: LD_INT 116
71414: PUSH
71415: LD_INT 117
71417: PUSH
71418: LD_INT 118
71420: PUSH
71421: EMPTY
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: ST_TO_ADDR
71445: GO 71448
71447: POP
// end else
71448: GO 71679
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
71450: LD_ADDR_VAR 0 2
71454: PUSH
71455: LD_INT 1
71457: PUSH
71458: LD_INT 2
71460: PUSH
71461: LD_INT 3
71463: PUSH
71464: LD_INT 4
71466: PUSH
71467: LD_INT 5
71469: PUSH
71470: LD_INT 6
71472: PUSH
71473: LD_INT 7
71475: PUSH
71476: LD_INT 8
71478: PUSH
71479: LD_INT 9
71481: PUSH
71482: LD_INT 10
71484: PUSH
71485: LD_INT 11
71487: PUSH
71488: LD_INT 12
71490: PUSH
71491: LD_INT 13
71493: PUSH
71494: LD_INT 14
71496: PUSH
71497: LD_INT 15
71499: PUSH
71500: LD_INT 16
71502: PUSH
71503: LD_INT 17
71505: PUSH
71506: LD_INT 18
71508: PUSH
71509: LD_INT 19
71511: PUSH
71512: LD_INT 20
71514: PUSH
71515: LD_INT 21
71517: PUSH
71518: LD_INT 22
71520: PUSH
71521: LD_INT 23
71523: PUSH
71524: LD_INT 24
71526: PUSH
71527: LD_INT 25
71529: PUSH
71530: LD_INT 26
71532: PUSH
71533: LD_INT 27
71535: PUSH
71536: LD_INT 28
71538: PUSH
71539: LD_INT 29
71541: PUSH
71542: LD_INT 30
71544: PUSH
71545: LD_INT 31
71547: PUSH
71548: LD_INT 32
71550: PUSH
71551: LD_INT 33
71553: PUSH
71554: LD_INT 34
71556: PUSH
71557: LD_INT 35
71559: PUSH
71560: LD_INT 36
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: LIST
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: PUSH
71601: LD_INT 101
71603: PUSH
71604: LD_INT 102
71606: PUSH
71607: LD_INT 103
71609: PUSH
71610: LD_INT 104
71612: PUSH
71613: LD_INT 105
71615: PUSH
71616: LD_INT 106
71618: PUSH
71619: LD_INT 107
71621: PUSH
71622: LD_INT 108
71624: PUSH
71625: LD_INT 109
71627: PUSH
71628: LD_INT 110
71630: PUSH
71631: LD_INT 111
71633: PUSH
71634: LD_INT 112
71636: PUSH
71637: LD_INT 113
71639: PUSH
71640: LD_INT 114
71642: PUSH
71643: LD_INT 115
71645: PUSH
71646: LD_INT 116
71648: PUSH
71649: LD_INT 117
71651: PUSH
71652: LD_INT 118
71654: PUSH
71655: EMPTY
71656: LIST
71657: LIST
71658: LIST
71659: LIST
71660: LIST
71661: LIST
71662: LIST
71663: LIST
71664: LIST
71665: LIST
71666: LIST
71667: LIST
71668: LIST
71669: LIST
71670: LIST
71671: LIST
71672: LIST
71673: LIST
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: ST_TO_ADDR
// if result then
71679: LD_VAR 0 2
71683: IFFALSE 72469
// begin normal :=  ;
71685: LD_ADDR_VAR 0 5
71689: PUSH
71690: LD_STRING 
71692: ST_TO_ADDR
// hardcore :=  ;
71693: LD_ADDR_VAR 0 6
71697: PUSH
71698: LD_STRING 
71700: ST_TO_ADDR
// active :=  ;
71701: LD_ADDR_VAR 0 7
71705: PUSH
71706: LD_STRING 
71708: ST_TO_ADDR
// for i = 1 to normalCounter do
71709: LD_ADDR_VAR 0 8
71713: PUSH
71714: DOUBLE
71715: LD_INT 1
71717: DEC
71718: ST_TO_ADDR
71719: LD_EXP 71
71723: PUSH
71724: FOR_TO
71725: IFFALSE 71826
// begin tmp := 0 ;
71727: LD_ADDR_VAR 0 3
71731: PUSH
71732: LD_STRING 0
71734: ST_TO_ADDR
// if result [ 1 ] then
71735: LD_VAR 0 2
71739: PUSH
71740: LD_INT 1
71742: ARRAY
71743: IFFALSE 71808
// if result [ 1 ] [ 1 ] = i then
71745: LD_VAR 0 2
71749: PUSH
71750: LD_INT 1
71752: ARRAY
71753: PUSH
71754: LD_INT 1
71756: ARRAY
71757: PUSH
71758: LD_VAR 0 8
71762: EQUAL
71763: IFFALSE 71808
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
71765: LD_ADDR_VAR 0 2
71769: PUSH
71770: LD_VAR 0 2
71774: PPUSH
71775: LD_INT 1
71777: PPUSH
71778: LD_VAR 0 2
71782: PUSH
71783: LD_INT 1
71785: ARRAY
71786: PPUSH
71787: LD_INT 1
71789: PPUSH
71790: CALL_OW 3
71794: PPUSH
71795: CALL_OW 1
71799: ST_TO_ADDR
// tmp := 1 ;
71800: LD_ADDR_VAR 0 3
71804: PUSH
71805: LD_STRING 1
71807: ST_TO_ADDR
// end ; normal := normal & tmp ;
71808: LD_ADDR_VAR 0 5
71812: PUSH
71813: LD_VAR 0 5
71817: PUSH
71818: LD_VAR 0 3
71822: STR
71823: ST_TO_ADDR
// end ;
71824: GO 71724
71826: POP
71827: POP
// for i = 1 to hardcoreCounter do
71828: LD_ADDR_VAR 0 8
71832: PUSH
71833: DOUBLE
71834: LD_INT 1
71836: DEC
71837: ST_TO_ADDR
71838: LD_EXP 72
71842: PUSH
71843: FOR_TO
71844: IFFALSE 71949
// begin tmp := 0 ;
71846: LD_ADDR_VAR 0 3
71850: PUSH
71851: LD_STRING 0
71853: ST_TO_ADDR
// if result [ 2 ] then
71854: LD_VAR 0 2
71858: PUSH
71859: LD_INT 2
71861: ARRAY
71862: IFFALSE 71931
// if result [ 2 ] [ 1 ] = 100 + i then
71864: LD_VAR 0 2
71868: PUSH
71869: LD_INT 2
71871: ARRAY
71872: PUSH
71873: LD_INT 1
71875: ARRAY
71876: PUSH
71877: LD_INT 100
71879: PUSH
71880: LD_VAR 0 8
71884: PLUS
71885: EQUAL
71886: IFFALSE 71931
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
71888: LD_ADDR_VAR 0 2
71892: PUSH
71893: LD_VAR 0 2
71897: PPUSH
71898: LD_INT 2
71900: PPUSH
71901: LD_VAR 0 2
71905: PUSH
71906: LD_INT 2
71908: ARRAY
71909: PPUSH
71910: LD_INT 1
71912: PPUSH
71913: CALL_OW 3
71917: PPUSH
71918: CALL_OW 1
71922: ST_TO_ADDR
// tmp := 1 ;
71923: LD_ADDR_VAR 0 3
71927: PUSH
71928: LD_STRING 1
71930: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
71931: LD_ADDR_VAR 0 6
71935: PUSH
71936: LD_VAR 0 6
71940: PUSH
71941: LD_VAR 0 3
71945: STR
71946: ST_TO_ADDR
// end ;
71947: GO 71843
71949: POP
71950: POP
// if isGameLoad then
71951: LD_VAR 0 1
71955: IFFALSE 72430
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
71957: LD_ADDR_VAR 0 4
71961: PUSH
71962: LD_EXP 75
71966: PUSH
71967: LD_EXP 74
71971: PUSH
71972: LD_EXP 76
71976: PUSH
71977: LD_EXP 73
71981: PUSH
71982: LD_EXP 77
71986: PUSH
71987: LD_EXP 78
71991: PUSH
71992: LD_EXP 79
71996: PUSH
71997: LD_EXP 80
72001: PUSH
72002: LD_EXP 81
72006: PUSH
72007: LD_EXP 82
72011: PUSH
72012: LD_EXP 83
72016: PUSH
72017: LD_EXP 84
72021: PUSH
72022: LD_EXP 85
72026: PUSH
72027: LD_EXP 86
72031: PUSH
72032: LD_EXP 94
72036: PUSH
72037: LD_EXP 95
72041: PUSH
72042: LD_EXP 96
72046: PUSH
72047: LD_EXP 97
72051: PUSH
72052: LD_EXP 99
72056: PUSH
72057: LD_EXP 100
72061: PUSH
72062: LD_EXP 101
72066: PUSH
72067: LD_EXP 104
72071: PUSH
72072: LD_EXP 106
72076: PUSH
72077: LD_EXP 107
72081: PUSH
72082: LD_EXP 108
72086: PUSH
72087: LD_EXP 110
72091: PUSH
72092: LD_EXP 111
72096: PUSH
72097: LD_EXP 114
72101: PUSH
72102: LD_EXP 115
72106: PUSH
72107: LD_EXP 116
72111: PUSH
72112: LD_EXP 117
72116: PUSH
72117: LD_EXP 118
72121: PUSH
72122: LD_EXP 119
72126: PUSH
72127: LD_EXP 120
72131: PUSH
72132: LD_EXP 121
72136: PUSH
72137: LD_EXP 122
72141: PUSH
72142: LD_EXP 87
72146: PUSH
72147: LD_EXP 88
72151: PUSH
72152: LD_EXP 91
72156: PUSH
72157: LD_EXP 92
72161: PUSH
72162: LD_EXP 93
72166: PUSH
72167: LD_EXP 89
72171: PUSH
72172: LD_EXP 90
72176: PUSH
72177: LD_EXP 98
72181: PUSH
72182: LD_EXP 102
72186: PUSH
72187: LD_EXP 103
72191: PUSH
72192: LD_EXP 105
72196: PUSH
72197: LD_EXP 109
72201: PUSH
72202: LD_EXP 112
72206: PUSH
72207: LD_EXP 113
72211: PUSH
72212: LD_EXP 123
72216: PUSH
72217: LD_EXP 124
72221: PUSH
72222: LD_EXP 125
72226: PUSH
72227: LD_EXP 126
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: LIST
72259: LIST
72260: LIST
72261: LIST
72262: LIST
72263: LIST
72264: LIST
72265: LIST
72266: LIST
72267: LIST
72268: LIST
72269: LIST
72270: LIST
72271: LIST
72272: LIST
72273: LIST
72274: LIST
72275: LIST
72276: LIST
72277: LIST
72278: LIST
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: ST_TO_ADDR
// tmp :=  ;
72288: LD_ADDR_VAR 0 3
72292: PUSH
72293: LD_STRING 
72295: ST_TO_ADDR
// for i = 1 to normalCounter do
72296: LD_ADDR_VAR 0 8
72300: PUSH
72301: DOUBLE
72302: LD_INT 1
72304: DEC
72305: ST_TO_ADDR
72306: LD_EXP 71
72310: PUSH
72311: FOR_TO
72312: IFFALSE 72348
// begin if flags [ i ] then
72314: LD_VAR 0 4
72318: PUSH
72319: LD_VAR 0 8
72323: ARRAY
72324: IFFALSE 72346
// tmp := tmp & i & ; ;
72326: LD_ADDR_VAR 0 3
72330: PUSH
72331: LD_VAR 0 3
72335: PUSH
72336: LD_VAR 0 8
72340: STR
72341: PUSH
72342: LD_STRING ;
72344: STR
72345: ST_TO_ADDR
// end ;
72346: GO 72311
72348: POP
72349: POP
// for i = 1 to hardcoreCounter do
72350: LD_ADDR_VAR 0 8
72354: PUSH
72355: DOUBLE
72356: LD_INT 1
72358: DEC
72359: ST_TO_ADDR
72360: LD_EXP 72
72364: PUSH
72365: FOR_TO
72366: IFFALSE 72412
// begin if flags [ normalCounter + i ] then
72368: LD_VAR 0 4
72372: PUSH
72373: LD_EXP 71
72377: PUSH
72378: LD_VAR 0 8
72382: PLUS
72383: ARRAY
72384: IFFALSE 72410
// tmp := tmp & ( 100 + i ) & ; ;
72386: LD_ADDR_VAR 0 3
72390: PUSH
72391: LD_VAR 0 3
72395: PUSH
72396: LD_INT 100
72398: PUSH
72399: LD_VAR 0 8
72403: PLUS
72404: STR
72405: PUSH
72406: LD_STRING ;
72408: STR
72409: ST_TO_ADDR
// end ;
72410: GO 72365
72412: POP
72413: POP
// if tmp then
72414: LD_VAR 0 3
72418: IFFALSE 72430
// active := tmp ;
72420: LD_ADDR_VAR 0 7
72424: PUSH
72425: LD_VAR 0 3
72429: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
72430: LD_STRING getStreamItemsFromMission("
72432: PUSH
72433: LD_VAR 0 5
72437: STR
72438: PUSH
72439: LD_STRING ","
72441: STR
72442: PUSH
72443: LD_VAR 0 6
72447: STR
72448: PUSH
72449: LD_STRING ","
72451: STR
72452: PUSH
72453: LD_VAR 0 7
72457: STR
72458: PUSH
72459: LD_STRING ")
72461: STR
72462: PPUSH
72463: CALL_OW 559
// end else
72467: GO 72476
// ToLua ( getStreamItemsFromMission("","","") ) ;
72469: LD_STRING getStreamItemsFromMission("","","")
72471: PPUSH
72472: CALL_OW 559
// end ;
72476: LD_VAR 0 2
72480: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
72481: LD_EXP 70
72485: PUSH
72486: LD_EXP 75
72490: AND
72491: IFFALSE 72615
72493: GO 72495
72495: DISABLE
72496: LD_INT 0
72498: PPUSH
72499: PPUSH
// begin enable ;
72500: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
72501: LD_ADDR_VAR 0 2
72505: PUSH
72506: LD_INT 22
72508: PUSH
72509: LD_OWVAR 2
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 2
72520: PUSH
72521: LD_INT 34
72523: PUSH
72524: LD_INT 7
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: LD_INT 34
72533: PUSH
72534: LD_INT 45
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 34
72543: PUSH
72544: LD_INT 28
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 34
72553: PUSH
72554: LD_INT 47
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: LIST
72565: LIST
72566: LIST
72567: PUSH
72568: EMPTY
72569: LIST
72570: LIST
72571: PPUSH
72572: CALL_OW 69
72576: ST_TO_ADDR
// if not tmp then
72577: LD_VAR 0 2
72581: NOT
72582: IFFALSE 72586
// exit ;
72584: GO 72615
// for i in tmp do
72586: LD_ADDR_VAR 0 1
72590: PUSH
72591: LD_VAR 0 2
72595: PUSH
72596: FOR_IN
72597: IFFALSE 72613
// begin SetLives ( i , 0 ) ;
72599: LD_VAR 0 1
72603: PPUSH
72604: LD_INT 0
72606: PPUSH
72607: CALL_OW 234
// end ;
72611: GO 72596
72613: POP
72614: POP
// end ;
72615: PPOPN 2
72617: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
72618: LD_EXP 70
72622: PUSH
72623: LD_EXP 76
72627: AND
72628: IFFALSE 72712
72630: GO 72632
72632: DISABLE
72633: LD_INT 0
72635: PPUSH
72636: PPUSH
// begin enable ;
72637: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
72638: LD_ADDR_VAR 0 2
72642: PUSH
72643: LD_INT 22
72645: PUSH
72646: LD_OWVAR 2
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: PUSH
72655: LD_INT 32
72657: PUSH
72658: LD_INT 3
72660: PUSH
72661: EMPTY
72662: LIST
72663: LIST
72664: PUSH
72665: EMPTY
72666: LIST
72667: LIST
72668: PPUSH
72669: CALL_OW 69
72673: ST_TO_ADDR
// if not tmp then
72674: LD_VAR 0 2
72678: NOT
72679: IFFALSE 72683
// exit ;
72681: GO 72712
// for i in tmp do
72683: LD_ADDR_VAR 0 1
72687: PUSH
72688: LD_VAR 0 2
72692: PUSH
72693: FOR_IN
72694: IFFALSE 72710
// begin SetLives ( i , 0 ) ;
72696: LD_VAR 0 1
72700: PPUSH
72701: LD_INT 0
72703: PPUSH
72704: CALL_OW 234
// end ;
72708: GO 72693
72710: POP
72711: POP
// end ;
72712: PPOPN 2
72714: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
72715: LD_EXP 70
72719: PUSH
72720: LD_EXP 73
72724: AND
72725: IFFALSE 72818
72727: GO 72729
72729: DISABLE
72730: LD_INT 0
72732: PPUSH
// begin enable ;
72733: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
72734: LD_ADDR_VAR 0 1
72738: PUSH
72739: LD_INT 22
72741: PUSH
72742: LD_OWVAR 2
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 2
72753: PUSH
72754: LD_INT 25
72756: PUSH
72757: LD_INT 5
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 25
72766: PUSH
72767: LD_INT 9
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 25
72776: PUSH
72777: LD_INT 8
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PPUSH
72794: CALL_OW 69
72798: PUSH
72799: FOR_IN
72800: IFFALSE 72816
// begin SetClass ( i , 1 ) ;
72802: LD_VAR 0 1
72806: PPUSH
72807: LD_INT 1
72809: PPUSH
72810: CALL_OW 336
// end ;
72814: GO 72799
72816: POP
72817: POP
// end ;
72818: PPOPN 1
72820: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
72821: LD_EXP 70
72825: PUSH
72826: LD_EXP 74
72830: AND
72831: PUSH
72832: LD_OWVAR 65
72836: PUSH
72837: LD_INT 7
72839: LESS
72840: AND
72841: IFFALSE 72855
72843: GO 72845
72845: DISABLE
// begin enable ;
72846: ENABLE
// game_speed := 7 ;
72847: LD_ADDR_OWVAR 65
72851: PUSH
72852: LD_INT 7
72854: ST_TO_ADDR
// end ;
72855: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
72856: LD_EXP 70
72860: PUSH
72861: LD_EXP 77
72865: AND
72866: IFFALSE 73068
72868: GO 72870
72870: DISABLE
72871: LD_INT 0
72873: PPUSH
72874: PPUSH
72875: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
72876: LD_ADDR_VAR 0 3
72880: PUSH
72881: LD_INT 81
72883: PUSH
72884: LD_OWVAR 2
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 21
72895: PUSH
72896: LD_INT 1
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PPUSH
72907: CALL_OW 69
72911: ST_TO_ADDR
// if not tmp then
72912: LD_VAR 0 3
72916: NOT
72917: IFFALSE 72921
// exit ;
72919: GO 73068
// if tmp > 5 then
72921: LD_VAR 0 3
72925: PUSH
72926: LD_INT 5
72928: GREATER
72929: IFFALSE 72941
// k := 5 else
72931: LD_ADDR_VAR 0 2
72935: PUSH
72936: LD_INT 5
72938: ST_TO_ADDR
72939: GO 72951
// k := tmp ;
72941: LD_ADDR_VAR 0 2
72945: PUSH
72946: LD_VAR 0 3
72950: ST_TO_ADDR
// for i := 1 to k do
72951: LD_ADDR_VAR 0 1
72955: PUSH
72956: DOUBLE
72957: LD_INT 1
72959: DEC
72960: ST_TO_ADDR
72961: LD_VAR 0 2
72965: PUSH
72966: FOR_TO
72967: IFFALSE 73066
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
72969: LD_VAR 0 3
72973: PUSH
72974: LD_VAR 0 1
72978: ARRAY
72979: PPUSH
72980: LD_VAR 0 1
72984: PUSH
72985: LD_INT 4
72987: MOD
72988: PUSH
72989: LD_INT 1
72991: PLUS
72992: PPUSH
72993: CALL_OW 259
72997: PUSH
72998: LD_INT 10
73000: LESS
73001: IFFALSE 73064
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
73003: LD_VAR 0 3
73007: PUSH
73008: LD_VAR 0 1
73012: ARRAY
73013: PPUSH
73014: LD_VAR 0 1
73018: PUSH
73019: LD_INT 4
73021: MOD
73022: PUSH
73023: LD_INT 1
73025: PLUS
73026: PPUSH
73027: LD_VAR 0 3
73031: PUSH
73032: LD_VAR 0 1
73036: ARRAY
73037: PPUSH
73038: LD_VAR 0 1
73042: PUSH
73043: LD_INT 4
73045: MOD
73046: PUSH
73047: LD_INT 1
73049: PLUS
73050: PPUSH
73051: CALL_OW 259
73055: PUSH
73056: LD_INT 1
73058: PLUS
73059: PPUSH
73060: CALL_OW 237
73064: GO 72966
73066: POP
73067: POP
// end ;
73068: PPOPN 3
73070: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
73071: LD_EXP 70
73075: PUSH
73076: LD_EXP 78
73080: AND
73081: IFFALSE 73101
73083: GO 73085
73085: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
73086: LD_INT 4
73088: PPUSH
73089: LD_OWVAR 2
73093: PPUSH
73094: LD_INT 0
73096: PPUSH
73097: CALL_OW 324
73101: END
// every 0 0$1 trigger StreamModeActive and sShovel do
73102: LD_EXP 70
73106: PUSH
73107: LD_EXP 107
73111: AND
73112: IFFALSE 73132
73114: GO 73116
73116: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
73117: LD_INT 19
73119: PPUSH
73120: LD_OWVAR 2
73124: PPUSH
73125: LD_INT 0
73127: PPUSH
73128: CALL_OW 324
73132: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
73133: LD_EXP 70
73137: PUSH
73138: LD_EXP 79
73142: AND
73143: IFFALSE 73245
73145: GO 73147
73147: DISABLE
73148: LD_INT 0
73150: PPUSH
73151: PPUSH
// begin enable ;
73152: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
73153: LD_ADDR_VAR 0 2
73157: PUSH
73158: LD_INT 22
73160: PUSH
73161: LD_OWVAR 2
73165: PUSH
73166: EMPTY
73167: LIST
73168: LIST
73169: PUSH
73170: LD_INT 2
73172: PUSH
73173: LD_INT 34
73175: PUSH
73176: LD_INT 11
73178: PUSH
73179: EMPTY
73180: LIST
73181: LIST
73182: PUSH
73183: LD_INT 34
73185: PUSH
73186: LD_INT 30
73188: PUSH
73189: EMPTY
73190: LIST
73191: LIST
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: LIST
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PPUSH
73202: CALL_OW 69
73206: ST_TO_ADDR
// if not tmp then
73207: LD_VAR 0 2
73211: NOT
73212: IFFALSE 73216
// exit ;
73214: GO 73245
// for i in tmp do
73216: LD_ADDR_VAR 0 1
73220: PUSH
73221: LD_VAR 0 2
73225: PUSH
73226: FOR_IN
73227: IFFALSE 73243
// begin SetLives ( i , 0 ) ;
73229: LD_VAR 0 1
73233: PPUSH
73234: LD_INT 0
73236: PPUSH
73237: CALL_OW 234
// end ;
73241: GO 73226
73243: POP
73244: POP
// end ;
73245: PPOPN 2
73247: END
// every 0 0$1 trigger StreamModeActive and sBunker do
73248: LD_EXP 70
73252: PUSH
73253: LD_EXP 80
73257: AND
73258: IFFALSE 73278
73260: GO 73262
73262: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
73263: LD_INT 32
73265: PPUSH
73266: LD_OWVAR 2
73270: PPUSH
73271: LD_INT 0
73273: PPUSH
73274: CALL_OW 324
73278: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
73279: LD_EXP 70
73283: PUSH
73284: LD_EXP 81
73288: AND
73289: IFFALSE 73470
73291: GO 73293
73293: DISABLE
73294: LD_INT 0
73296: PPUSH
73297: PPUSH
73298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
73299: LD_ADDR_VAR 0 2
73303: PUSH
73304: LD_INT 22
73306: PUSH
73307: LD_OWVAR 2
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 33
73318: PUSH
73319: LD_INT 3
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PPUSH
73330: CALL_OW 69
73334: ST_TO_ADDR
// if not tmp then
73335: LD_VAR 0 2
73339: NOT
73340: IFFALSE 73344
// exit ;
73342: GO 73470
// side := 0 ;
73344: LD_ADDR_VAR 0 3
73348: PUSH
73349: LD_INT 0
73351: ST_TO_ADDR
// for i := 1 to 8 do
73352: LD_ADDR_VAR 0 1
73356: PUSH
73357: DOUBLE
73358: LD_INT 1
73360: DEC
73361: ST_TO_ADDR
73362: LD_INT 8
73364: PUSH
73365: FOR_TO
73366: IFFALSE 73414
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
73368: LD_OWVAR 2
73372: PUSH
73373: LD_VAR 0 1
73377: NONEQUAL
73378: PUSH
73379: LD_OWVAR 2
73383: PPUSH
73384: LD_VAR 0 1
73388: PPUSH
73389: CALL_OW 81
73393: PUSH
73394: LD_INT 2
73396: EQUAL
73397: AND
73398: IFFALSE 73412
// begin side := i ;
73400: LD_ADDR_VAR 0 3
73404: PUSH
73405: LD_VAR 0 1
73409: ST_TO_ADDR
// break ;
73410: GO 73414
// end ;
73412: GO 73365
73414: POP
73415: POP
// if not side then
73416: LD_VAR 0 3
73420: NOT
73421: IFFALSE 73425
// exit ;
73423: GO 73470
// for i := 1 to tmp do
73425: LD_ADDR_VAR 0 1
73429: PUSH
73430: DOUBLE
73431: LD_INT 1
73433: DEC
73434: ST_TO_ADDR
73435: LD_VAR 0 2
73439: PUSH
73440: FOR_TO
73441: IFFALSE 73468
// if Prob ( 60 ) then
73443: LD_INT 60
73445: PPUSH
73446: CALL_OW 13
73450: IFFALSE 73466
// SetSide ( i , side ) ;
73452: LD_VAR 0 1
73456: PPUSH
73457: LD_VAR 0 3
73461: PPUSH
73462: CALL_OW 235
73466: GO 73440
73468: POP
73469: POP
// end ;
73470: PPOPN 3
73472: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
73473: LD_EXP 70
73477: PUSH
73478: LD_EXP 83
73482: AND
73483: IFFALSE 73602
73485: GO 73487
73487: DISABLE
73488: LD_INT 0
73490: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
73491: LD_ADDR_VAR 0 1
73495: PUSH
73496: LD_INT 22
73498: PUSH
73499: LD_OWVAR 2
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 21
73510: PUSH
73511: LD_INT 1
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 3
73520: PUSH
73521: LD_INT 23
73523: PUSH
73524: LD_INT 0
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: LIST
73539: PPUSH
73540: CALL_OW 69
73544: PUSH
73545: FOR_IN
73546: IFFALSE 73600
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
73548: LD_VAR 0 1
73552: PPUSH
73553: CALL_OW 257
73557: PUSH
73558: LD_INT 1
73560: PUSH
73561: LD_INT 2
73563: PUSH
73564: LD_INT 3
73566: PUSH
73567: LD_INT 4
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: IN
73576: IFFALSE 73598
// SetClass ( un , rand ( 1 , 4 ) ) ;
73578: LD_VAR 0 1
73582: PPUSH
73583: LD_INT 1
73585: PPUSH
73586: LD_INT 4
73588: PPUSH
73589: CALL_OW 12
73593: PPUSH
73594: CALL_OW 336
73598: GO 73545
73600: POP
73601: POP
// end ;
73602: PPOPN 1
73604: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
73605: LD_EXP 70
73609: PUSH
73610: LD_EXP 82
73614: AND
73615: IFFALSE 73694
73617: GO 73619
73619: DISABLE
73620: LD_INT 0
73622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73623: LD_ADDR_VAR 0 1
73627: PUSH
73628: LD_INT 22
73630: PUSH
73631: LD_OWVAR 2
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: PUSH
73640: LD_INT 21
73642: PUSH
73643: LD_INT 3
73645: PUSH
73646: EMPTY
73647: LIST
73648: LIST
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PPUSH
73654: CALL_OW 69
73658: ST_TO_ADDR
// if not tmp then
73659: LD_VAR 0 1
73663: NOT
73664: IFFALSE 73668
// exit ;
73666: GO 73694
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
73668: LD_VAR 0 1
73672: PUSH
73673: LD_INT 1
73675: PPUSH
73676: LD_VAR 0 1
73680: PPUSH
73681: CALL_OW 12
73685: ARRAY
73686: PPUSH
73687: LD_INT 100
73689: PPUSH
73690: CALL_OW 234
// end ;
73694: PPOPN 1
73696: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
73697: LD_EXP 70
73701: PUSH
73702: LD_EXP 84
73706: AND
73707: IFFALSE 73805
73709: GO 73711
73711: DISABLE
73712: LD_INT 0
73714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
73715: LD_ADDR_VAR 0 1
73719: PUSH
73720: LD_INT 22
73722: PUSH
73723: LD_OWVAR 2
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 21
73734: PUSH
73735: LD_INT 1
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PPUSH
73746: CALL_OW 69
73750: ST_TO_ADDR
// if not tmp then
73751: LD_VAR 0 1
73755: NOT
73756: IFFALSE 73760
// exit ;
73758: GO 73805
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
73760: LD_VAR 0 1
73764: PUSH
73765: LD_INT 1
73767: PPUSH
73768: LD_VAR 0 1
73772: PPUSH
73773: CALL_OW 12
73777: ARRAY
73778: PPUSH
73779: LD_INT 1
73781: PPUSH
73782: LD_INT 4
73784: PPUSH
73785: CALL_OW 12
73789: PPUSH
73790: LD_INT 3000
73792: PPUSH
73793: LD_INT 9000
73795: PPUSH
73796: CALL_OW 12
73800: PPUSH
73801: CALL_OW 492
// end ;
73805: PPOPN 1
73807: END
// every 0 0$1 trigger StreamModeActive and sDepot do
73808: LD_EXP 70
73812: PUSH
73813: LD_EXP 85
73817: AND
73818: IFFALSE 73838
73820: GO 73822
73822: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
73823: LD_INT 1
73825: PPUSH
73826: LD_OWVAR 2
73830: PPUSH
73831: LD_INT 0
73833: PPUSH
73834: CALL_OW 324
73838: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
73839: LD_EXP 70
73843: PUSH
73844: LD_EXP 86
73848: AND
73849: IFFALSE 73932
73851: GO 73853
73853: DISABLE
73854: LD_INT 0
73856: PPUSH
73857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
73858: LD_ADDR_VAR 0 2
73862: PUSH
73863: LD_INT 22
73865: PUSH
73866: LD_OWVAR 2
73870: PUSH
73871: EMPTY
73872: LIST
73873: LIST
73874: PUSH
73875: LD_INT 21
73877: PUSH
73878: LD_INT 3
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PPUSH
73889: CALL_OW 69
73893: ST_TO_ADDR
// if not tmp then
73894: LD_VAR 0 2
73898: NOT
73899: IFFALSE 73903
// exit ;
73901: GO 73932
// for i in tmp do
73903: LD_ADDR_VAR 0 1
73907: PUSH
73908: LD_VAR 0 2
73912: PUSH
73913: FOR_IN
73914: IFFALSE 73930
// SetBLevel ( i , 10 ) ;
73916: LD_VAR 0 1
73920: PPUSH
73921: LD_INT 10
73923: PPUSH
73924: CALL_OW 241
73928: GO 73913
73930: POP
73931: POP
// end ;
73932: PPOPN 2
73934: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
73935: LD_EXP 70
73939: PUSH
73940: LD_EXP 87
73944: AND
73945: IFFALSE 74056
73947: GO 73949
73949: DISABLE
73950: LD_INT 0
73952: PPUSH
73953: PPUSH
73954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
73955: LD_ADDR_VAR 0 3
73959: PUSH
73960: LD_INT 22
73962: PUSH
73963: LD_OWVAR 2
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 25
73974: PUSH
73975: LD_INT 1
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PPUSH
73986: CALL_OW 69
73990: ST_TO_ADDR
// if not tmp then
73991: LD_VAR 0 3
73995: NOT
73996: IFFALSE 74000
// exit ;
73998: GO 74056
// un := tmp [ rand ( 1 , tmp ) ] ;
74000: LD_ADDR_VAR 0 2
74004: PUSH
74005: LD_VAR 0 3
74009: PUSH
74010: LD_INT 1
74012: PPUSH
74013: LD_VAR 0 3
74017: PPUSH
74018: CALL_OW 12
74022: ARRAY
74023: ST_TO_ADDR
// if Crawls ( un ) then
74024: LD_VAR 0 2
74028: PPUSH
74029: CALL_OW 318
74033: IFFALSE 74044
// ComWalk ( un ) ;
74035: LD_VAR 0 2
74039: PPUSH
74040: CALL_OW 138
// SetClass ( un , class_sniper ) ;
74044: LD_VAR 0 2
74048: PPUSH
74049: LD_INT 5
74051: PPUSH
74052: CALL_OW 336
// end ;
74056: PPOPN 3
74058: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
74059: LD_EXP 70
74063: PUSH
74064: LD_EXP 88
74068: AND
74069: PUSH
74070: LD_OWVAR 67
74074: PUSH
74075: LD_INT 4
74077: LESS
74078: AND
74079: IFFALSE 74098
74081: GO 74083
74083: DISABLE
// begin Difficulty := Difficulty + 1 ;
74084: LD_ADDR_OWVAR 67
74088: PUSH
74089: LD_OWVAR 67
74093: PUSH
74094: LD_INT 1
74096: PLUS
74097: ST_TO_ADDR
// end ;
74098: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
74099: LD_EXP 70
74103: PUSH
74104: LD_EXP 89
74108: AND
74109: IFFALSE 74212
74111: GO 74113
74113: DISABLE
74114: LD_INT 0
74116: PPUSH
// begin for i := 1 to 5 do
74117: LD_ADDR_VAR 0 1
74121: PUSH
74122: DOUBLE
74123: LD_INT 1
74125: DEC
74126: ST_TO_ADDR
74127: LD_INT 5
74129: PUSH
74130: FOR_TO
74131: IFFALSE 74210
// begin uc_nation := nation_nature ;
74133: LD_ADDR_OWVAR 21
74137: PUSH
74138: LD_INT 0
74140: ST_TO_ADDR
// uc_side := 0 ;
74141: LD_ADDR_OWVAR 20
74145: PUSH
74146: LD_INT 0
74148: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74149: LD_ADDR_OWVAR 29
74153: PUSH
74154: LD_INT 12
74156: PUSH
74157: LD_INT 12
74159: PUSH
74160: EMPTY
74161: LIST
74162: LIST
74163: ST_TO_ADDR
// hc_agressivity := 20 ;
74164: LD_ADDR_OWVAR 35
74168: PUSH
74169: LD_INT 20
74171: ST_TO_ADDR
// hc_class := class_tiger ;
74172: LD_ADDR_OWVAR 28
74176: PUSH
74177: LD_INT 14
74179: ST_TO_ADDR
// hc_gallery :=  ;
74180: LD_ADDR_OWVAR 33
74184: PUSH
74185: LD_STRING 
74187: ST_TO_ADDR
// hc_name :=  ;
74188: LD_ADDR_OWVAR 26
74192: PUSH
74193: LD_STRING 
74195: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
74196: CALL_OW 44
74200: PPUSH
74201: LD_INT 0
74203: PPUSH
74204: CALL_OW 51
// end ;
74208: GO 74130
74210: POP
74211: POP
// end ;
74212: PPOPN 1
74214: END
// every 0 0$1 trigger StreamModeActive and sBomb do
74215: LD_EXP 70
74219: PUSH
74220: LD_EXP 90
74224: AND
74225: IFFALSE 74234
74227: GO 74229
74229: DISABLE
// StreamSibBomb ;
74230: CALL 74235 0 0
74234: END
// export function StreamSibBomb ; var i , x , y ; begin
74235: LD_INT 0
74237: PPUSH
74238: PPUSH
74239: PPUSH
74240: PPUSH
// result := false ;
74241: LD_ADDR_VAR 0 1
74245: PUSH
74246: LD_INT 0
74248: ST_TO_ADDR
// for i := 1 to 16 do
74249: LD_ADDR_VAR 0 2
74253: PUSH
74254: DOUBLE
74255: LD_INT 1
74257: DEC
74258: ST_TO_ADDR
74259: LD_INT 16
74261: PUSH
74262: FOR_TO
74263: IFFALSE 74462
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74265: LD_ADDR_VAR 0 3
74269: PUSH
74270: LD_INT 10
74272: PUSH
74273: LD_INT 20
74275: PUSH
74276: LD_INT 30
74278: PUSH
74279: LD_INT 40
74281: PUSH
74282: LD_INT 50
74284: PUSH
74285: LD_INT 60
74287: PUSH
74288: LD_INT 70
74290: PUSH
74291: LD_INT 80
74293: PUSH
74294: LD_INT 90
74296: PUSH
74297: LD_INT 100
74299: PUSH
74300: LD_INT 110
74302: PUSH
74303: LD_INT 120
74305: PUSH
74306: LD_INT 130
74308: PUSH
74309: LD_INT 140
74311: PUSH
74312: LD_INT 150
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: LIST
74321: LIST
74322: LIST
74323: LIST
74324: LIST
74325: LIST
74326: LIST
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: PUSH
74332: LD_INT 1
74334: PPUSH
74335: LD_INT 15
74337: PPUSH
74338: CALL_OW 12
74342: ARRAY
74343: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
74344: LD_ADDR_VAR 0 4
74348: PUSH
74349: LD_INT 10
74351: PUSH
74352: LD_INT 20
74354: PUSH
74355: LD_INT 30
74357: PUSH
74358: LD_INT 40
74360: PUSH
74361: LD_INT 50
74363: PUSH
74364: LD_INT 60
74366: PUSH
74367: LD_INT 70
74369: PUSH
74370: LD_INT 80
74372: PUSH
74373: LD_INT 90
74375: PUSH
74376: LD_INT 100
74378: PUSH
74379: LD_INT 110
74381: PUSH
74382: LD_INT 120
74384: PUSH
74385: LD_INT 130
74387: PUSH
74388: LD_INT 140
74390: PUSH
74391: LD_INT 150
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 1
74413: PPUSH
74414: LD_INT 15
74416: PPUSH
74417: CALL_OW 12
74421: ARRAY
74422: ST_TO_ADDR
// if ValidHex ( x , y ) then
74423: LD_VAR 0 3
74427: PPUSH
74428: LD_VAR 0 4
74432: PPUSH
74433: CALL_OW 488
74437: IFFALSE 74460
// begin result := [ x , y ] ;
74439: LD_ADDR_VAR 0 1
74443: PUSH
74444: LD_VAR 0 3
74448: PUSH
74449: LD_VAR 0 4
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: ST_TO_ADDR
// break ;
74458: GO 74462
// end ; end ;
74460: GO 74262
74462: POP
74463: POP
// if result then
74464: LD_VAR 0 1
74468: IFFALSE 74528
// begin ToLua ( playSibBomb() ) ;
74470: LD_STRING playSibBomb()
74472: PPUSH
74473: CALL_OW 559
// wait ( 0 0$14 ) ;
74477: LD_INT 490
74479: PPUSH
74480: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
74484: LD_VAR 0 1
74488: PUSH
74489: LD_INT 1
74491: ARRAY
74492: PPUSH
74493: LD_VAR 0 1
74497: PUSH
74498: LD_INT 2
74500: ARRAY
74501: PPUSH
74502: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
74506: LD_VAR 0 1
74510: PUSH
74511: LD_INT 1
74513: ARRAY
74514: PPUSH
74515: LD_VAR 0 1
74519: PUSH
74520: LD_INT 2
74522: ARRAY
74523: PPUSH
74524: CALL_OW 429
// end ; end ;
74528: LD_VAR 0 1
74532: RET
// every 0 0$1 trigger StreamModeActive and sReset do
74533: LD_EXP 70
74537: PUSH
74538: LD_EXP 92
74542: AND
74543: IFFALSE 74555
74545: GO 74547
74547: DISABLE
// YouLost (  ) ;
74548: LD_STRING 
74550: PPUSH
74551: CALL_OW 104
74555: END
// every 0 0$1 trigger StreamModeActive and sFog do
74556: LD_EXP 70
74560: PUSH
74561: LD_EXP 91
74565: AND
74566: IFFALSE 74580
74568: GO 74570
74570: DISABLE
// FogOff ( your_side ) ;
74571: LD_OWVAR 2
74575: PPUSH
74576: CALL_OW 344
74580: END
// every 0 0$1 trigger StreamModeActive and sSun do
74581: LD_EXP 70
74585: PUSH
74586: LD_EXP 93
74590: AND
74591: IFFALSE 74619
74593: GO 74595
74595: DISABLE
// begin solar_recharge_percent := 0 ;
74596: LD_ADDR_OWVAR 79
74600: PUSH
74601: LD_INT 0
74603: ST_TO_ADDR
// wait ( 5 5$00 ) ;
74604: LD_INT 10500
74606: PPUSH
74607: CALL_OW 67
// solar_recharge_percent := 100 ;
74611: LD_ADDR_OWVAR 79
74615: PUSH
74616: LD_INT 100
74618: ST_TO_ADDR
// end ;
74619: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
74620: LD_EXP 70
74624: PUSH
74625: LD_EXP 94
74629: AND
74630: IFFALSE 74869
74632: GO 74634
74634: DISABLE
74635: LD_INT 0
74637: PPUSH
74638: PPUSH
74639: PPUSH
// begin tmp := [ ] ;
74640: LD_ADDR_VAR 0 3
74644: PUSH
74645: EMPTY
74646: ST_TO_ADDR
// for i := 1 to 6 do
74647: LD_ADDR_VAR 0 1
74651: PUSH
74652: DOUBLE
74653: LD_INT 1
74655: DEC
74656: ST_TO_ADDR
74657: LD_INT 6
74659: PUSH
74660: FOR_TO
74661: IFFALSE 74766
// begin uc_nation := nation_nature ;
74663: LD_ADDR_OWVAR 21
74667: PUSH
74668: LD_INT 0
74670: ST_TO_ADDR
// uc_side := 0 ;
74671: LD_ADDR_OWVAR 20
74675: PUSH
74676: LD_INT 0
74678: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
74679: LD_ADDR_OWVAR 29
74683: PUSH
74684: LD_INT 12
74686: PUSH
74687: LD_INT 12
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: ST_TO_ADDR
// hc_agressivity := 20 ;
74694: LD_ADDR_OWVAR 35
74698: PUSH
74699: LD_INT 20
74701: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
74702: LD_ADDR_OWVAR 28
74706: PUSH
74707: LD_INT 17
74709: ST_TO_ADDR
// hc_gallery :=  ;
74710: LD_ADDR_OWVAR 33
74714: PUSH
74715: LD_STRING 
74717: ST_TO_ADDR
// hc_name :=  ;
74718: LD_ADDR_OWVAR 26
74722: PUSH
74723: LD_STRING 
74725: ST_TO_ADDR
// un := CreateHuman ;
74726: LD_ADDR_VAR 0 2
74730: PUSH
74731: CALL_OW 44
74735: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
74736: LD_VAR 0 2
74740: PPUSH
74741: LD_INT 1
74743: PPUSH
74744: CALL_OW 51
// tmp := tmp ^ un ;
74748: LD_ADDR_VAR 0 3
74752: PUSH
74753: LD_VAR 0 3
74757: PUSH
74758: LD_VAR 0 2
74762: ADD
74763: ST_TO_ADDR
// end ;
74764: GO 74660
74766: POP
74767: POP
// repeat wait ( 0 0$1 ) ;
74768: LD_INT 35
74770: PPUSH
74771: CALL_OW 67
// for un in tmp do
74775: LD_ADDR_VAR 0 2
74779: PUSH
74780: LD_VAR 0 3
74784: PUSH
74785: FOR_IN
74786: IFFALSE 74860
// begin if IsDead ( un ) then
74788: LD_VAR 0 2
74792: PPUSH
74793: CALL_OW 301
74797: IFFALSE 74817
// begin tmp := tmp diff un ;
74799: LD_ADDR_VAR 0 3
74803: PUSH
74804: LD_VAR 0 3
74808: PUSH
74809: LD_VAR 0 2
74813: DIFF
74814: ST_TO_ADDR
// continue ;
74815: GO 74785
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
74817: LD_VAR 0 2
74821: PPUSH
74822: LD_INT 3
74824: PUSH
74825: LD_INT 22
74827: PUSH
74828: LD_INT 0
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: PUSH
74835: EMPTY
74836: LIST
74837: LIST
74838: PPUSH
74839: CALL_OW 69
74843: PPUSH
74844: LD_VAR 0 2
74848: PPUSH
74849: CALL_OW 74
74853: PPUSH
74854: CALL_OW 115
// end ;
74858: GO 74785
74860: POP
74861: POP
// until not tmp ;
74862: LD_VAR 0 3
74866: NOT
74867: IFFALSE 74768
// end ;
74869: PPOPN 3
74871: END
// every 0 0$1 trigger StreamModeActive and sTroll do
74872: LD_EXP 70
74876: PUSH
74877: LD_EXP 95
74881: AND
74882: IFFALSE 74936
74884: GO 74886
74886: DISABLE
// begin ToLua ( displayTroll(); ) ;
74887: LD_STRING displayTroll();
74889: PPUSH
74890: CALL_OW 559
// wait ( 3 3$00 ) ;
74894: LD_INT 6300
74896: PPUSH
74897: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74901: LD_STRING hideTroll();
74903: PPUSH
74904: CALL_OW 559
// wait ( 1 1$00 ) ;
74908: LD_INT 2100
74910: PPUSH
74911: CALL_OW 67
// ToLua ( displayTroll(); ) ;
74915: LD_STRING displayTroll();
74917: PPUSH
74918: CALL_OW 559
// wait ( 1 1$00 ) ;
74922: LD_INT 2100
74924: PPUSH
74925: CALL_OW 67
// ToLua ( hideTroll(); ) ;
74929: LD_STRING hideTroll();
74931: PPUSH
74932: CALL_OW 559
// end ;
74936: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
74937: LD_EXP 70
74941: PUSH
74942: LD_EXP 96
74946: AND
74947: IFFALSE 75010
74949: GO 74951
74951: DISABLE
74952: LD_INT 0
74954: PPUSH
// begin p := 0 ;
74955: LD_ADDR_VAR 0 1
74959: PUSH
74960: LD_INT 0
74962: ST_TO_ADDR
// repeat game_speed := 1 ;
74963: LD_ADDR_OWVAR 65
74967: PUSH
74968: LD_INT 1
74970: ST_TO_ADDR
// wait ( 0 0$1 ) ;
74971: LD_INT 35
74973: PPUSH
74974: CALL_OW 67
// p := p + 1 ;
74978: LD_ADDR_VAR 0 1
74982: PUSH
74983: LD_VAR 0 1
74987: PUSH
74988: LD_INT 1
74990: PLUS
74991: ST_TO_ADDR
// until p >= 60 ;
74992: LD_VAR 0 1
74996: PUSH
74997: LD_INT 60
74999: GREATEREQUAL
75000: IFFALSE 74963
// game_speed := 4 ;
75002: LD_ADDR_OWVAR 65
75006: PUSH
75007: LD_INT 4
75009: ST_TO_ADDR
// end ;
75010: PPOPN 1
75012: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
75013: LD_EXP 70
75017: PUSH
75018: LD_EXP 97
75022: AND
75023: IFFALSE 75169
75025: GO 75027
75027: DISABLE
75028: LD_INT 0
75030: PPUSH
75031: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75032: LD_ADDR_VAR 0 1
75036: PUSH
75037: LD_INT 22
75039: PUSH
75040: LD_OWVAR 2
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: LD_INT 2
75051: PUSH
75052: LD_INT 30
75054: PUSH
75055: LD_INT 0
75057: PUSH
75058: EMPTY
75059: LIST
75060: LIST
75061: PUSH
75062: LD_INT 30
75064: PUSH
75065: LD_INT 1
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: EMPTY
75073: LIST
75074: LIST
75075: LIST
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PPUSH
75081: CALL_OW 69
75085: ST_TO_ADDR
// if not depot then
75086: LD_VAR 0 1
75090: NOT
75091: IFFALSE 75095
// exit ;
75093: GO 75169
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
75095: LD_ADDR_VAR 0 2
75099: PUSH
75100: LD_VAR 0 1
75104: PUSH
75105: LD_INT 1
75107: PPUSH
75108: LD_VAR 0 1
75112: PPUSH
75113: CALL_OW 12
75117: ARRAY
75118: PPUSH
75119: CALL_OW 274
75123: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
75124: LD_VAR 0 2
75128: PPUSH
75129: LD_INT 1
75131: PPUSH
75132: LD_INT 0
75134: PPUSH
75135: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
75139: LD_VAR 0 2
75143: PPUSH
75144: LD_INT 2
75146: PPUSH
75147: LD_INT 0
75149: PPUSH
75150: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
75154: LD_VAR 0 2
75158: PPUSH
75159: LD_INT 3
75161: PPUSH
75162: LD_INT 0
75164: PPUSH
75165: CALL_OW 277
// end ;
75169: PPOPN 2
75171: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
75172: LD_EXP 70
75176: PUSH
75177: LD_EXP 98
75181: AND
75182: IFFALSE 75279
75184: GO 75186
75186: DISABLE
75187: LD_INT 0
75189: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
75190: LD_ADDR_VAR 0 1
75194: PUSH
75195: LD_INT 22
75197: PUSH
75198: LD_OWVAR 2
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: PUSH
75207: LD_INT 21
75209: PUSH
75210: LD_INT 1
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: PUSH
75217: LD_INT 3
75219: PUSH
75220: LD_INT 23
75222: PUSH
75223: LD_INT 0
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: EMPTY
75235: LIST
75236: LIST
75237: LIST
75238: PPUSH
75239: CALL_OW 69
75243: ST_TO_ADDR
// if not tmp then
75244: LD_VAR 0 1
75248: NOT
75249: IFFALSE 75253
// exit ;
75251: GO 75279
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
75253: LD_VAR 0 1
75257: PUSH
75258: LD_INT 1
75260: PPUSH
75261: LD_VAR 0 1
75265: PPUSH
75266: CALL_OW 12
75270: ARRAY
75271: PPUSH
75272: LD_INT 200
75274: PPUSH
75275: CALL_OW 234
// end ;
75279: PPOPN 1
75281: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
75282: LD_EXP 70
75286: PUSH
75287: LD_EXP 99
75291: AND
75292: IFFALSE 75371
75294: GO 75296
75296: DISABLE
75297: LD_INT 0
75299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
75300: LD_ADDR_VAR 0 1
75304: PUSH
75305: LD_INT 22
75307: PUSH
75308: LD_OWVAR 2
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 21
75319: PUSH
75320: LD_INT 2
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PPUSH
75331: CALL_OW 69
75335: ST_TO_ADDR
// if not tmp then
75336: LD_VAR 0 1
75340: NOT
75341: IFFALSE 75345
// exit ;
75343: GO 75371
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
75345: LD_VAR 0 1
75349: PUSH
75350: LD_INT 1
75352: PPUSH
75353: LD_VAR 0 1
75357: PPUSH
75358: CALL_OW 12
75362: ARRAY
75363: PPUSH
75364: LD_INT 60
75366: PPUSH
75367: CALL_OW 234
// end ;
75371: PPOPN 1
75373: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
75374: LD_EXP 70
75378: PUSH
75379: LD_EXP 100
75383: AND
75384: IFFALSE 75483
75386: GO 75388
75388: DISABLE
75389: LD_INT 0
75391: PPUSH
75392: PPUSH
// begin enable ;
75393: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
75394: LD_ADDR_VAR 0 1
75398: PUSH
75399: LD_INT 22
75401: PUSH
75402: LD_OWVAR 2
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 61
75413: PUSH
75414: EMPTY
75415: LIST
75416: PUSH
75417: LD_INT 33
75419: PUSH
75420: LD_INT 2
75422: PUSH
75423: EMPTY
75424: LIST
75425: LIST
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: LIST
75431: PPUSH
75432: CALL_OW 69
75436: ST_TO_ADDR
// if not tmp then
75437: LD_VAR 0 1
75441: NOT
75442: IFFALSE 75446
// exit ;
75444: GO 75483
// for i in tmp do
75446: LD_ADDR_VAR 0 2
75450: PUSH
75451: LD_VAR 0 1
75455: PUSH
75456: FOR_IN
75457: IFFALSE 75481
// if IsControledBy ( i ) then
75459: LD_VAR 0 2
75463: PPUSH
75464: CALL_OW 312
75468: IFFALSE 75479
// ComUnlink ( i ) ;
75470: LD_VAR 0 2
75474: PPUSH
75475: CALL_OW 136
75479: GO 75456
75481: POP
75482: POP
// end ;
75483: PPOPN 2
75485: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
75486: LD_EXP 70
75490: PUSH
75491: LD_EXP 101
75495: AND
75496: IFFALSE 75636
75498: GO 75500
75500: DISABLE
75501: LD_INT 0
75503: PPUSH
75504: PPUSH
// begin ToLua ( displayPowell(); ) ;
75505: LD_STRING displayPowell();
75507: PPUSH
75508: CALL_OW 559
// uc_side := 0 ;
75512: LD_ADDR_OWVAR 20
75516: PUSH
75517: LD_INT 0
75519: ST_TO_ADDR
// uc_nation := 2 ;
75520: LD_ADDR_OWVAR 21
75524: PUSH
75525: LD_INT 2
75527: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
75528: LD_ADDR_OWVAR 37
75532: PUSH
75533: LD_INT 14
75535: ST_TO_ADDR
// vc_engine := engine_siberite ;
75536: LD_ADDR_OWVAR 39
75540: PUSH
75541: LD_INT 3
75543: ST_TO_ADDR
// vc_control := control_apeman ;
75544: LD_ADDR_OWVAR 38
75548: PUSH
75549: LD_INT 5
75551: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
75552: LD_ADDR_OWVAR 40
75556: PUSH
75557: LD_INT 29
75559: ST_TO_ADDR
// un := CreateVehicle ;
75560: LD_ADDR_VAR 0 2
75564: PUSH
75565: CALL_OW 45
75569: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
75570: LD_VAR 0 2
75574: PPUSH
75575: LD_INT 1
75577: PPUSH
75578: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
75582: LD_INT 35
75584: PPUSH
75585: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
75589: LD_VAR 0 2
75593: PPUSH
75594: LD_INT 22
75596: PUSH
75597: LD_OWVAR 2
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: PPUSH
75606: CALL_OW 69
75610: PPUSH
75611: LD_VAR 0 2
75615: PPUSH
75616: CALL_OW 74
75620: PPUSH
75621: CALL_OW 115
// until IsDead ( un ) ;
75625: LD_VAR 0 2
75629: PPUSH
75630: CALL_OW 301
75634: IFFALSE 75582
// end ;
75636: PPOPN 2
75638: END
// every 0 0$1 trigger StreamModeActive and sStu do
75639: LD_EXP 70
75643: PUSH
75644: LD_EXP 109
75648: AND
75649: IFFALSE 75665
75651: GO 75653
75653: DISABLE
// begin ToLua ( displayStucuk(); ) ;
75654: LD_STRING displayStucuk();
75656: PPUSH
75657: CALL_OW 559
// ResetFog ;
75661: CALL_OW 335
// end ;
75665: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
75666: LD_EXP 70
75670: PUSH
75671: LD_EXP 102
75675: AND
75676: IFFALSE 75817
75678: GO 75680
75680: DISABLE
75681: LD_INT 0
75683: PPUSH
75684: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75685: LD_ADDR_VAR 0 2
75689: PUSH
75690: LD_INT 22
75692: PUSH
75693: LD_OWVAR 2
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: PUSH
75702: LD_INT 21
75704: PUSH
75705: LD_INT 1
75707: PUSH
75708: EMPTY
75709: LIST
75710: LIST
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: PPUSH
75716: CALL_OW 69
75720: ST_TO_ADDR
// if not tmp then
75721: LD_VAR 0 2
75725: NOT
75726: IFFALSE 75730
// exit ;
75728: GO 75817
// un := tmp [ rand ( 1 , tmp ) ] ;
75730: LD_ADDR_VAR 0 1
75734: PUSH
75735: LD_VAR 0 2
75739: PUSH
75740: LD_INT 1
75742: PPUSH
75743: LD_VAR 0 2
75747: PPUSH
75748: CALL_OW 12
75752: ARRAY
75753: ST_TO_ADDR
// SetSide ( un , 0 ) ;
75754: LD_VAR 0 1
75758: PPUSH
75759: LD_INT 0
75761: PPUSH
75762: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
75766: LD_VAR 0 1
75770: PPUSH
75771: LD_OWVAR 3
75775: PUSH
75776: LD_VAR 0 1
75780: DIFF
75781: PPUSH
75782: LD_VAR 0 1
75786: PPUSH
75787: CALL_OW 74
75791: PPUSH
75792: CALL_OW 115
// wait ( 0 0$20 ) ;
75796: LD_INT 700
75798: PPUSH
75799: CALL_OW 67
// SetSide ( un , your_side ) ;
75803: LD_VAR 0 1
75807: PPUSH
75808: LD_OWVAR 2
75812: PPUSH
75813: CALL_OW 235
// end ;
75817: PPOPN 2
75819: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
75820: LD_EXP 70
75824: PUSH
75825: LD_EXP 103
75829: AND
75830: IFFALSE 75936
75832: GO 75834
75834: DISABLE
75835: LD_INT 0
75837: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
75838: LD_ADDR_VAR 0 1
75842: PUSH
75843: LD_INT 22
75845: PUSH
75846: LD_OWVAR 2
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PUSH
75855: LD_INT 2
75857: PUSH
75858: LD_INT 30
75860: PUSH
75861: LD_INT 0
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: LD_INT 30
75870: PUSH
75871: LD_INT 1
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: EMPTY
75879: LIST
75880: LIST
75881: LIST
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PPUSH
75887: CALL_OW 69
75891: ST_TO_ADDR
// if not depot then
75892: LD_VAR 0 1
75896: NOT
75897: IFFALSE 75901
// exit ;
75899: GO 75936
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
75901: LD_VAR 0 1
75905: PUSH
75906: LD_INT 1
75908: ARRAY
75909: PPUSH
75910: CALL_OW 250
75914: PPUSH
75915: LD_VAR 0 1
75919: PUSH
75920: LD_INT 1
75922: ARRAY
75923: PPUSH
75924: CALL_OW 251
75928: PPUSH
75929: LD_INT 70
75931: PPUSH
75932: CALL_OW 495
// end ;
75936: PPOPN 1
75938: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
75939: LD_EXP 70
75943: PUSH
75944: LD_EXP 104
75948: AND
75949: IFFALSE 76160
75951: GO 75953
75953: DISABLE
75954: LD_INT 0
75956: PPUSH
75957: PPUSH
75958: PPUSH
75959: PPUSH
75960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
75961: LD_ADDR_VAR 0 5
75965: PUSH
75966: LD_INT 22
75968: PUSH
75969: LD_OWVAR 2
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: PUSH
75978: LD_INT 21
75980: PUSH
75981: LD_INT 1
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: PPUSH
75992: CALL_OW 69
75996: ST_TO_ADDR
// if not tmp then
75997: LD_VAR 0 5
76001: NOT
76002: IFFALSE 76006
// exit ;
76004: GO 76160
// for i in tmp do
76006: LD_ADDR_VAR 0 1
76010: PUSH
76011: LD_VAR 0 5
76015: PUSH
76016: FOR_IN
76017: IFFALSE 76158
// begin d := rand ( 0 , 5 ) ;
76019: LD_ADDR_VAR 0 4
76023: PUSH
76024: LD_INT 0
76026: PPUSH
76027: LD_INT 5
76029: PPUSH
76030: CALL_OW 12
76034: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
76035: LD_ADDR_VAR 0 2
76039: PUSH
76040: LD_VAR 0 1
76044: PPUSH
76045: CALL_OW 250
76049: PPUSH
76050: LD_VAR 0 4
76054: PPUSH
76055: LD_INT 3
76057: PPUSH
76058: LD_INT 12
76060: PPUSH
76061: CALL_OW 12
76065: PPUSH
76066: CALL_OW 272
76070: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
76071: LD_ADDR_VAR 0 3
76075: PUSH
76076: LD_VAR 0 1
76080: PPUSH
76081: CALL_OW 251
76085: PPUSH
76086: LD_VAR 0 4
76090: PPUSH
76091: LD_INT 3
76093: PPUSH
76094: LD_INT 12
76096: PPUSH
76097: CALL_OW 12
76101: PPUSH
76102: CALL_OW 273
76106: ST_TO_ADDR
// if ValidHex ( x , y ) then
76107: LD_VAR 0 2
76111: PPUSH
76112: LD_VAR 0 3
76116: PPUSH
76117: CALL_OW 488
76121: IFFALSE 76156
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
76123: LD_VAR 0 1
76127: PPUSH
76128: LD_VAR 0 2
76132: PPUSH
76133: LD_VAR 0 3
76137: PPUSH
76138: LD_INT 3
76140: PPUSH
76141: LD_INT 6
76143: PPUSH
76144: CALL_OW 12
76148: PPUSH
76149: LD_INT 1
76151: PPUSH
76152: CALL_OW 483
// end ;
76156: GO 76016
76158: POP
76159: POP
// end ;
76160: PPOPN 5
76162: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
76163: LD_EXP 70
76167: PUSH
76168: LD_EXP 105
76172: AND
76173: IFFALSE 76267
76175: GO 76177
76177: DISABLE
76178: LD_INT 0
76180: PPUSH
76181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
76182: LD_ADDR_VAR 0 2
76186: PUSH
76187: LD_INT 22
76189: PUSH
76190: LD_OWVAR 2
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: LD_INT 32
76201: PUSH
76202: LD_INT 1
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: PUSH
76209: LD_INT 21
76211: PUSH
76212: LD_INT 2
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: EMPTY
76220: LIST
76221: LIST
76222: LIST
76223: PPUSH
76224: CALL_OW 69
76228: ST_TO_ADDR
// if not tmp then
76229: LD_VAR 0 2
76233: NOT
76234: IFFALSE 76238
// exit ;
76236: GO 76267
// for i in tmp do
76238: LD_ADDR_VAR 0 1
76242: PUSH
76243: LD_VAR 0 2
76247: PUSH
76248: FOR_IN
76249: IFFALSE 76265
// SetFuel ( i , 0 ) ;
76251: LD_VAR 0 1
76255: PPUSH
76256: LD_INT 0
76258: PPUSH
76259: CALL_OW 240
76263: GO 76248
76265: POP
76266: POP
// end ;
76267: PPOPN 2
76269: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
76270: LD_EXP 70
76274: PUSH
76275: LD_EXP 106
76279: AND
76280: IFFALSE 76346
76282: GO 76284
76284: DISABLE
76285: LD_INT 0
76287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
76288: LD_ADDR_VAR 0 1
76292: PUSH
76293: LD_INT 22
76295: PUSH
76296: LD_OWVAR 2
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: LD_INT 30
76307: PUSH
76308: LD_INT 29
76310: PUSH
76311: EMPTY
76312: LIST
76313: LIST
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PPUSH
76319: CALL_OW 69
76323: ST_TO_ADDR
// if not tmp then
76324: LD_VAR 0 1
76328: NOT
76329: IFFALSE 76333
// exit ;
76331: GO 76346
// DestroyUnit ( tmp [ 1 ] ) ;
76333: LD_VAR 0 1
76337: PUSH
76338: LD_INT 1
76340: ARRAY
76341: PPUSH
76342: CALL_OW 65
// end ;
76346: PPOPN 1
76348: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
76349: LD_EXP 70
76353: PUSH
76354: LD_EXP 108
76358: AND
76359: IFFALSE 76488
76361: GO 76363
76363: DISABLE
76364: LD_INT 0
76366: PPUSH
// begin uc_side := 0 ;
76367: LD_ADDR_OWVAR 20
76371: PUSH
76372: LD_INT 0
76374: ST_TO_ADDR
// uc_nation := nation_arabian ;
76375: LD_ADDR_OWVAR 21
76379: PUSH
76380: LD_INT 2
76382: ST_TO_ADDR
// hc_gallery :=  ;
76383: LD_ADDR_OWVAR 33
76387: PUSH
76388: LD_STRING 
76390: ST_TO_ADDR
// hc_name :=  ;
76391: LD_ADDR_OWVAR 26
76395: PUSH
76396: LD_STRING 
76398: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
76399: LD_INT 1
76401: PPUSH
76402: LD_INT 11
76404: PPUSH
76405: LD_INT 10
76407: PPUSH
76408: CALL_OW 380
// un := CreateHuman ;
76412: LD_ADDR_VAR 0 1
76416: PUSH
76417: CALL_OW 44
76421: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
76422: LD_VAR 0 1
76426: PPUSH
76427: LD_INT 1
76429: PPUSH
76430: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
76434: LD_INT 35
76436: PPUSH
76437: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
76441: LD_VAR 0 1
76445: PPUSH
76446: LD_INT 22
76448: PUSH
76449: LD_OWVAR 2
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PPUSH
76458: CALL_OW 69
76462: PPUSH
76463: LD_VAR 0 1
76467: PPUSH
76468: CALL_OW 74
76472: PPUSH
76473: CALL_OW 115
// until IsDead ( un ) ;
76477: LD_VAR 0 1
76481: PPUSH
76482: CALL_OW 301
76486: IFFALSE 76434
// end ;
76488: PPOPN 1
76490: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
76491: LD_EXP 70
76495: PUSH
76496: LD_EXP 110
76500: AND
76501: IFFALSE 76513
76503: GO 76505
76505: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
76506: LD_STRING earthquake(getX(game), 0, 32)
76508: PPUSH
76509: CALL_OW 559
76513: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
76514: LD_EXP 70
76518: PUSH
76519: LD_EXP 111
76523: AND
76524: IFFALSE 76615
76526: GO 76528
76528: DISABLE
76529: LD_INT 0
76531: PPUSH
// begin enable ;
76532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
76533: LD_ADDR_VAR 0 1
76537: PUSH
76538: LD_INT 22
76540: PUSH
76541: LD_OWVAR 2
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 21
76552: PUSH
76553: LD_INT 2
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 33
76562: PUSH
76563: LD_INT 3
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: LIST
76574: PPUSH
76575: CALL_OW 69
76579: ST_TO_ADDR
// if not tmp then
76580: LD_VAR 0 1
76584: NOT
76585: IFFALSE 76589
// exit ;
76587: GO 76615
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
76589: LD_VAR 0 1
76593: PUSH
76594: LD_INT 1
76596: PPUSH
76597: LD_VAR 0 1
76601: PPUSH
76602: CALL_OW 12
76606: ARRAY
76607: PPUSH
76608: LD_INT 1
76610: PPUSH
76611: CALL_OW 234
// end ;
76615: PPOPN 1
76617: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
76618: LD_EXP 70
76622: PUSH
76623: LD_EXP 112
76627: AND
76628: IFFALSE 76769
76630: GO 76632
76632: DISABLE
76633: LD_INT 0
76635: PPUSH
76636: PPUSH
76637: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76638: LD_ADDR_VAR 0 3
76642: PUSH
76643: LD_INT 22
76645: PUSH
76646: LD_OWVAR 2
76650: PUSH
76651: EMPTY
76652: LIST
76653: LIST
76654: PUSH
76655: LD_INT 25
76657: PUSH
76658: LD_INT 1
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: PPUSH
76669: CALL_OW 69
76673: ST_TO_ADDR
// if not tmp then
76674: LD_VAR 0 3
76678: NOT
76679: IFFALSE 76683
// exit ;
76681: GO 76769
// un := tmp [ rand ( 1 , tmp ) ] ;
76683: LD_ADDR_VAR 0 2
76687: PUSH
76688: LD_VAR 0 3
76692: PUSH
76693: LD_INT 1
76695: PPUSH
76696: LD_VAR 0 3
76700: PPUSH
76701: CALL_OW 12
76705: ARRAY
76706: ST_TO_ADDR
// if Crawls ( un ) then
76707: LD_VAR 0 2
76711: PPUSH
76712: CALL_OW 318
76716: IFFALSE 76727
// ComWalk ( un ) ;
76718: LD_VAR 0 2
76722: PPUSH
76723: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
76727: LD_VAR 0 2
76731: PPUSH
76732: LD_INT 9
76734: PPUSH
76735: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
76739: LD_INT 28
76741: PPUSH
76742: LD_OWVAR 2
76746: PPUSH
76747: LD_INT 2
76749: PPUSH
76750: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
76754: LD_INT 29
76756: PPUSH
76757: LD_OWVAR 2
76761: PPUSH
76762: LD_INT 2
76764: PPUSH
76765: CALL_OW 322
// end ;
76769: PPOPN 3
76771: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
76772: LD_EXP 70
76776: PUSH
76777: LD_EXP 113
76781: AND
76782: IFFALSE 76893
76784: GO 76786
76786: DISABLE
76787: LD_INT 0
76789: PPUSH
76790: PPUSH
76791: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
76792: LD_ADDR_VAR 0 3
76796: PUSH
76797: LD_INT 22
76799: PUSH
76800: LD_OWVAR 2
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 25
76811: PUSH
76812: LD_INT 1
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: EMPTY
76820: LIST
76821: LIST
76822: PPUSH
76823: CALL_OW 69
76827: ST_TO_ADDR
// if not tmp then
76828: LD_VAR 0 3
76832: NOT
76833: IFFALSE 76837
// exit ;
76835: GO 76893
// un := tmp [ rand ( 1 , tmp ) ] ;
76837: LD_ADDR_VAR 0 2
76841: PUSH
76842: LD_VAR 0 3
76846: PUSH
76847: LD_INT 1
76849: PPUSH
76850: LD_VAR 0 3
76854: PPUSH
76855: CALL_OW 12
76859: ARRAY
76860: ST_TO_ADDR
// if Crawls ( un ) then
76861: LD_VAR 0 2
76865: PPUSH
76866: CALL_OW 318
76870: IFFALSE 76881
// ComWalk ( un ) ;
76872: LD_VAR 0 2
76876: PPUSH
76877: CALL_OW 138
// SetClass ( un , class_mortar ) ;
76881: LD_VAR 0 2
76885: PPUSH
76886: LD_INT 8
76888: PPUSH
76889: CALL_OW 336
// end ;
76893: PPOPN 3
76895: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
76896: LD_EXP 70
76900: PUSH
76901: LD_EXP 114
76905: AND
76906: IFFALSE 77050
76908: GO 76910
76910: DISABLE
76911: LD_INT 0
76913: PPUSH
76914: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
76915: LD_ADDR_VAR 0 2
76919: PUSH
76920: LD_INT 22
76922: PUSH
76923: LD_OWVAR 2
76927: PUSH
76928: EMPTY
76929: LIST
76930: LIST
76931: PUSH
76932: LD_INT 21
76934: PUSH
76935: LD_INT 2
76937: PUSH
76938: EMPTY
76939: LIST
76940: LIST
76941: PUSH
76942: LD_INT 2
76944: PUSH
76945: LD_INT 34
76947: PUSH
76948: LD_INT 12
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: PUSH
76955: LD_INT 34
76957: PUSH
76958: LD_INT 51
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: LD_INT 34
76967: PUSH
76968: LD_INT 32
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: LIST
76985: PPUSH
76986: CALL_OW 69
76990: ST_TO_ADDR
// if not tmp then
76991: LD_VAR 0 2
76995: NOT
76996: IFFALSE 77000
// exit ;
76998: GO 77050
// for i in tmp do
77000: LD_ADDR_VAR 0 1
77004: PUSH
77005: LD_VAR 0 2
77009: PUSH
77010: FOR_IN
77011: IFFALSE 77048
// if GetCargo ( i , mat_artifact ) = 0 then
77013: LD_VAR 0 1
77017: PPUSH
77018: LD_INT 4
77020: PPUSH
77021: CALL_OW 289
77025: PUSH
77026: LD_INT 0
77028: EQUAL
77029: IFFALSE 77046
// SetCargo ( i , mat_siberit , 100 ) ;
77031: LD_VAR 0 1
77035: PPUSH
77036: LD_INT 3
77038: PPUSH
77039: LD_INT 100
77041: PPUSH
77042: CALL_OW 290
77046: GO 77010
77048: POP
77049: POP
// end ;
77050: PPOPN 2
77052: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
77053: LD_EXP 70
77057: PUSH
77058: LD_EXP 115
77062: AND
77063: IFFALSE 77246
77065: GO 77067
77067: DISABLE
77068: LD_INT 0
77070: PPUSH
77071: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
77072: LD_ADDR_VAR 0 2
77076: PUSH
77077: LD_INT 22
77079: PUSH
77080: LD_OWVAR 2
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PPUSH
77089: CALL_OW 69
77093: ST_TO_ADDR
// if not tmp then
77094: LD_VAR 0 2
77098: NOT
77099: IFFALSE 77103
// exit ;
77101: GO 77246
// for i := 1 to 2 do
77103: LD_ADDR_VAR 0 1
77107: PUSH
77108: DOUBLE
77109: LD_INT 1
77111: DEC
77112: ST_TO_ADDR
77113: LD_INT 2
77115: PUSH
77116: FOR_TO
77117: IFFALSE 77244
// begin uc_side := your_side ;
77119: LD_ADDR_OWVAR 20
77123: PUSH
77124: LD_OWVAR 2
77128: ST_TO_ADDR
// uc_nation := nation_american ;
77129: LD_ADDR_OWVAR 21
77133: PUSH
77134: LD_INT 1
77136: ST_TO_ADDR
// vc_chassis := us_morphling ;
77137: LD_ADDR_OWVAR 37
77141: PUSH
77142: LD_INT 5
77144: ST_TO_ADDR
// vc_engine := engine_siberite ;
77145: LD_ADDR_OWVAR 39
77149: PUSH
77150: LD_INT 3
77152: ST_TO_ADDR
// vc_control := control_computer ;
77153: LD_ADDR_OWVAR 38
77157: PUSH
77158: LD_INT 3
77160: ST_TO_ADDR
// vc_weapon := us_double_laser ;
77161: LD_ADDR_OWVAR 40
77165: PUSH
77166: LD_INT 10
77168: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
77169: LD_VAR 0 2
77173: PUSH
77174: LD_INT 1
77176: ARRAY
77177: PPUSH
77178: CALL_OW 310
77182: NOT
77183: IFFALSE 77230
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
77185: CALL_OW 45
77189: PPUSH
77190: LD_VAR 0 2
77194: PUSH
77195: LD_INT 1
77197: ARRAY
77198: PPUSH
77199: CALL_OW 250
77203: PPUSH
77204: LD_VAR 0 2
77208: PUSH
77209: LD_INT 1
77211: ARRAY
77212: PPUSH
77213: CALL_OW 251
77217: PPUSH
77218: LD_INT 12
77220: PPUSH
77221: LD_INT 1
77223: PPUSH
77224: CALL_OW 50
77228: GO 77242
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
77230: CALL_OW 45
77234: PPUSH
77235: LD_INT 1
77237: PPUSH
77238: CALL_OW 51
// end ;
77242: GO 77116
77244: POP
77245: POP
// end ;
77246: PPOPN 2
77248: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
77249: LD_EXP 70
77253: PUSH
77254: LD_EXP 116
77258: AND
77259: IFFALSE 77481
77261: GO 77263
77263: DISABLE
77264: LD_INT 0
77266: PPUSH
77267: PPUSH
77268: PPUSH
77269: PPUSH
77270: PPUSH
77271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
77272: LD_ADDR_VAR 0 6
77276: PUSH
77277: LD_INT 22
77279: PUSH
77280: LD_OWVAR 2
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 21
77291: PUSH
77292: LD_INT 1
77294: PUSH
77295: EMPTY
77296: LIST
77297: LIST
77298: PUSH
77299: LD_INT 3
77301: PUSH
77302: LD_INT 23
77304: PUSH
77305: LD_INT 0
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: PUSH
77316: EMPTY
77317: LIST
77318: LIST
77319: LIST
77320: PPUSH
77321: CALL_OW 69
77325: ST_TO_ADDR
// if not tmp then
77326: LD_VAR 0 6
77330: NOT
77331: IFFALSE 77335
// exit ;
77333: GO 77481
// s1 := rand ( 1 , 4 ) ;
77335: LD_ADDR_VAR 0 2
77339: PUSH
77340: LD_INT 1
77342: PPUSH
77343: LD_INT 4
77345: PPUSH
77346: CALL_OW 12
77350: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
77351: LD_ADDR_VAR 0 4
77355: PUSH
77356: LD_VAR 0 6
77360: PUSH
77361: LD_INT 1
77363: ARRAY
77364: PPUSH
77365: LD_VAR 0 2
77369: PPUSH
77370: CALL_OW 259
77374: ST_TO_ADDR
// if s1 = 1 then
77375: LD_VAR 0 2
77379: PUSH
77380: LD_INT 1
77382: EQUAL
77383: IFFALSE 77403
// s2 := rand ( 2 , 4 ) else
77385: LD_ADDR_VAR 0 3
77389: PUSH
77390: LD_INT 2
77392: PPUSH
77393: LD_INT 4
77395: PPUSH
77396: CALL_OW 12
77400: ST_TO_ADDR
77401: GO 77411
// s2 := 1 ;
77403: LD_ADDR_VAR 0 3
77407: PUSH
77408: LD_INT 1
77410: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
77411: LD_ADDR_VAR 0 5
77415: PUSH
77416: LD_VAR 0 6
77420: PUSH
77421: LD_INT 1
77423: ARRAY
77424: PPUSH
77425: LD_VAR 0 3
77429: PPUSH
77430: CALL_OW 259
77434: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
77435: LD_VAR 0 6
77439: PUSH
77440: LD_INT 1
77442: ARRAY
77443: PPUSH
77444: LD_VAR 0 2
77448: PPUSH
77449: LD_VAR 0 5
77453: PPUSH
77454: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
77458: LD_VAR 0 6
77462: PUSH
77463: LD_INT 1
77465: ARRAY
77466: PPUSH
77467: LD_VAR 0 3
77471: PPUSH
77472: LD_VAR 0 4
77476: PPUSH
77477: CALL_OW 237
// end ;
77481: PPOPN 6
77483: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
77484: LD_EXP 70
77488: PUSH
77489: LD_EXP 117
77493: AND
77494: IFFALSE 77573
77496: GO 77498
77498: DISABLE
77499: LD_INT 0
77501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
77502: LD_ADDR_VAR 0 1
77506: PUSH
77507: LD_INT 22
77509: PUSH
77510: LD_OWVAR 2
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 30
77521: PUSH
77522: LD_INT 3
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PUSH
77529: EMPTY
77530: LIST
77531: LIST
77532: PPUSH
77533: CALL_OW 69
77537: ST_TO_ADDR
// if not tmp then
77538: LD_VAR 0 1
77542: NOT
77543: IFFALSE 77547
// exit ;
77545: GO 77573
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
77547: LD_VAR 0 1
77551: PUSH
77552: LD_INT 1
77554: PPUSH
77555: LD_VAR 0 1
77559: PPUSH
77560: CALL_OW 12
77564: ARRAY
77565: PPUSH
77566: LD_INT 1
77568: PPUSH
77569: CALL_OW 234
// end ;
77573: PPOPN 1
77575: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
77576: LD_EXP 70
77580: PUSH
77581: LD_EXP 118
77585: AND
77586: IFFALSE 77698
77588: GO 77590
77590: DISABLE
77591: LD_INT 0
77593: PPUSH
77594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
77595: LD_ADDR_VAR 0 2
77599: PUSH
77600: LD_INT 22
77602: PUSH
77603: LD_OWVAR 2
77607: PUSH
77608: EMPTY
77609: LIST
77610: LIST
77611: PUSH
77612: LD_INT 2
77614: PUSH
77615: LD_INT 30
77617: PUSH
77618: LD_INT 27
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PUSH
77625: LD_INT 30
77627: PUSH
77628: LD_INT 26
77630: PUSH
77631: EMPTY
77632: LIST
77633: LIST
77634: PUSH
77635: LD_INT 30
77637: PUSH
77638: LD_INT 28
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: LIST
77649: LIST
77650: PUSH
77651: EMPTY
77652: LIST
77653: LIST
77654: PPUSH
77655: CALL_OW 69
77659: ST_TO_ADDR
// if not tmp then
77660: LD_VAR 0 2
77664: NOT
77665: IFFALSE 77669
// exit ;
77667: GO 77698
// for i in tmp do
77669: LD_ADDR_VAR 0 1
77673: PUSH
77674: LD_VAR 0 2
77678: PUSH
77679: FOR_IN
77680: IFFALSE 77696
// SetLives ( i , 1 ) ;
77682: LD_VAR 0 1
77686: PPUSH
77687: LD_INT 1
77689: PPUSH
77690: CALL_OW 234
77694: GO 77679
77696: POP
77697: POP
// end ;
77698: PPOPN 2
77700: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
77701: LD_EXP 70
77705: PUSH
77706: LD_EXP 119
77710: AND
77711: IFFALSE 77998
77713: GO 77715
77715: DISABLE
77716: LD_INT 0
77718: PPUSH
77719: PPUSH
77720: PPUSH
// begin i := rand ( 1 , 7 ) ;
77721: LD_ADDR_VAR 0 1
77725: PUSH
77726: LD_INT 1
77728: PPUSH
77729: LD_INT 7
77731: PPUSH
77732: CALL_OW 12
77736: ST_TO_ADDR
// case i of 1 :
77737: LD_VAR 0 1
77741: PUSH
77742: LD_INT 1
77744: DOUBLE
77745: EQUAL
77746: IFTRUE 77750
77748: GO 77760
77750: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
77751: LD_STRING earthquake(getX(game), 0, 32)
77753: PPUSH
77754: CALL_OW 559
77758: GO 77998
77760: LD_INT 2
77762: DOUBLE
77763: EQUAL
77764: IFTRUE 77768
77766: GO 77782
77768: POP
// begin ToLua ( displayStucuk(); ) ;
77769: LD_STRING displayStucuk();
77771: PPUSH
77772: CALL_OW 559
// ResetFog ;
77776: CALL_OW 335
// end ; 3 :
77780: GO 77998
77782: LD_INT 3
77784: DOUBLE
77785: EQUAL
77786: IFTRUE 77790
77788: GO 77894
77790: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
77791: LD_ADDR_VAR 0 2
77795: PUSH
77796: LD_INT 22
77798: PUSH
77799: LD_OWVAR 2
77803: PUSH
77804: EMPTY
77805: LIST
77806: LIST
77807: PUSH
77808: LD_INT 25
77810: PUSH
77811: LD_INT 1
77813: PUSH
77814: EMPTY
77815: LIST
77816: LIST
77817: PUSH
77818: EMPTY
77819: LIST
77820: LIST
77821: PPUSH
77822: CALL_OW 69
77826: ST_TO_ADDR
// if not tmp then
77827: LD_VAR 0 2
77831: NOT
77832: IFFALSE 77836
// exit ;
77834: GO 77998
// un := tmp [ rand ( 1 , tmp ) ] ;
77836: LD_ADDR_VAR 0 3
77840: PUSH
77841: LD_VAR 0 2
77845: PUSH
77846: LD_INT 1
77848: PPUSH
77849: LD_VAR 0 2
77853: PPUSH
77854: CALL_OW 12
77858: ARRAY
77859: ST_TO_ADDR
// if Crawls ( un ) then
77860: LD_VAR 0 3
77864: PPUSH
77865: CALL_OW 318
77869: IFFALSE 77880
// ComWalk ( un ) ;
77871: LD_VAR 0 3
77875: PPUSH
77876: CALL_OW 138
// SetClass ( un , class_mortar ) ;
77880: LD_VAR 0 3
77884: PPUSH
77885: LD_INT 8
77887: PPUSH
77888: CALL_OW 336
// end ; 4 :
77892: GO 77998
77894: LD_INT 4
77896: DOUBLE
77897: EQUAL
77898: IFTRUE 77902
77900: GO 77976
77902: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
77903: LD_ADDR_VAR 0 2
77907: PUSH
77908: LD_INT 22
77910: PUSH
77911: LD_OWVAR 2
77915: PUSH
77916: EMPTY
77917: LIST
77918: LIST
77919: PUSH
77920: LD_INT 30
77922: PUSH
77923: LD_INT 29
77925: PUSH
77926: EMPTY
77927: LIST
77928: LIST
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: PPUSH
77934: CALL_OW 69
77938: ST_TO_ADDR
// if not tmp then
77939: LD_VAR 0 2
77943: NOT
77944: IFFALSE 77948
// exit ;
77946: GO 77998
// CenterNowOnUnits ( tmp [ 1 ] ) ;
77948: LD_VAR 0 2
77952: PUSH
77953: LD_INT 1
77955: ARRAY
77956: PPUSH
77957: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
77961: LD_VAR 0 2
77965: PUSH
77966: LD_INT 1
77968: ARRAY
77969: PPUSH
77970: CALL_OW 65
// end ; 5 .. 7 :
77974: GO 77998
77976: LD_INT 5
77978: DOUBLE
77979: GREATEREQUAL
77980: IFFALSE 77988
77982: LD_INT 7
77984: DOUBLE
77985: LESSEQUAL
77986: IFTRUE 77990
77988: GO 77997
77990: POP
// StreamSibBomb ; end ;
77991: CALL 74235 0 0
77995: GO 77998
77997: POP
// end ;
77998: PPOPN 3
78000: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
78001: LD_EXP 70
78005: PUSH
78006: LD_EXP 120
78010: AND
78011: IFFALSE 78167
78013: GO 78015
78015: DISABLE
78016: LD_INT 0
78018: PPUSH
78019: PPUSH
78020: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
78021: LD_ADDR_VAR 0 2
78025: PUSH
78026: LD_INT 81
78028: PUSH
78029: LD_OWVAR 2
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: LD_INT 2
78040: PUSH
78041: LD_INT 21
78043: PUSH
78044: LD_INT 1
78046: PUSH
78047: EMPTY
78048: LIST
78049: LIST
78050: PUSH
78051: LD_INT 21
78053: PUSH
78054: LD_INT 2
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: PUSH
78061: EMPTY
78062: LIST
78063: LIST
78064: LIST
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PPUSH
78070: CALL_OW 69
78074: ST_TO_ADDR
// if not tmp then
78075: LD_VAR 0 2
78079: NOT
78080: IFFALSE 78084
// exit ;
78082: GO 78167
// p := 0 ;
78084: LD_ADDR_VAR 0 3
78088: PUSH
78089: LD_INT 0
78091: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78092: LD_INT 35
78094: PPUSH
78095: CALL_OW 67
// p := p + 1 ;
78099: LD_ADDR_VAR 0 3
78103: PUSH
78104: LD_VAR 0 3
78108: PUSH
78109: LD_INT 1
78111: PLUS
78112: ST_TO_ADDR
// for i in tmp do
78113: LD_ADDR_VAR 0 1
78117: PUSH
78118: LD_VAR 0 2
78122: PUSH
78123: FOR_IN
78124: IFFALSE 78155
// if GetLives ( i ) < 1000 then
78126: LD_VAR 0 1
78130: PPUSH
78131: CALL_OW 256
78135: PUSH
78136: LD_INT 1000
78138: LESS
78139: IFFALSE 78153
// SetLives ( i , 1000 ) ;
78141: LD_VAR 0 1
78145: PPUSH
78146: LD_INT 1000
78148: PPUSH
78149: CALL_OW 234
78153: GO 78123
78155: POP
78156: POP
// until p > 20 ;
78157: LD_VAR 0 3
78161: PUSH
78162: LD_INT 20
78164: GREATER
78165: IFFALSE 78092
// end ;
78167: PPOPN 3
78169: END
// every 0 0$1 trigger StreamModeActive and sTime do
78170: LD_EXP 70
78174: PUSH
78175: LD_EXP 121
78179: AND
78180: IFFALSE 78215
78182: GO 78184
78184: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
78185: LD_INT 28
78187: PPUSH
78188: LD_OWVAR 2
78192: PPUSH
78193: LD_INT 2
78195: PPUSH
78196: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
78200: LD_INT 30
78202: PPUSH
78203: LD_OWVAR 2
78207: PPUSH
78208: LD_INT 2
78210: PPUSH
78211: CALL_OW 322
// end ;
78215: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
78216: LD_EXP 70
78220: PUSH
78221: LD_EXP 122
78225: AND
78226: IFFALSE 78347
78228: GO 78230
78230: DISABLE
78231: LD_INT 0
78233: PPUSH
78234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
78235: LD_ADDR_VAR 0 2
78239: PUSH
78240: LD_INT 22
78242: PUSH
78243: LD_OWVAR 2
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: PUSH
78252: LD_INT 21
78254: PUSH
78255: LD_INT 1
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: PUSH
78262: LD_INT 3
78264: PUSH
78265: LD_INT 23
78267: PUSH
78268: LD_INT 0
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: LIST
78283: PPUSH
78284: CALL_OW 69
78288: ST_TO_ADDR
// if not tmp then
78289: LD_VAR 0 2
78293: NOT
78294: IFFALSE 78298
// exit ;
78296: GO 78347
// for i in tmp do
78298: LD_ADDR_VAR 0 1
78302: PUSH
78303: LD_VAR 0 2
78307: PUSH
78308: FOR_IN
78309: IFFALSE 78345
// begin if Crawls ( i ) then
78311: LD_VAR 0 1
78315: PPUSH
78316: CALL_OW 318
78320: IFFALSE 78331
// ComWalk ( i ) ;
78322: LD_VAR 0 1
78326: PPUSH
78327: CALL_OW 138
// SetClass ( i , 2 ) ;
78331: LD_VAR 0 1
78335: PPUSH
78336: LD_INT 2
78338: PPUSH
78339: CALL_OW 336
// end ;
78343: GO 78308
78345: POP
78346: POP
// end ;
78347: PPOPN 2
78349: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
78350: LD_EXP 70
78354: PUSH
78355: LD_EXP 123
78359: AND
78360: IFFALSE 78648
78362: GO 78364
78364: DISABLE
78365: LD_INT 0
78367: PPUSH
78368: PPUSH
78369: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
78370: LD_OWVAR 2
78374: PPUSH
78375: LD_INT 9
78377: PPUSH
78378: LD_INT 1
78380: PPUSH
78381: LD_INT 1
78383: PPUSH
78384: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
78388: LD_INT 9
78390: PPUSH
78391: LD_OWVAR 2
78395: PPUSH
78396: CALL_OW 343
// uc_side := 9 ;
78400: LD_ADDR_OWVAR 20
78404: PUSH
78405: LD_INT 9
78407: ST_TO_ADDR
// uc_nation := 2 ;
78408: LD_ADDR_OWVAR 21
78412: PUSH
78413: LD_INT 2
78415: ST_TO_ADDR
// hc_name := Dark Warrior ;
78416: LD_ADDR_OWVAR 26
78420: PUSH
78421: LD_STRING Dark Warrior
78423: ST_TO_ADDR
// hc_gallery :=  ;
78424: LD_ADDR_OWVAR 33
78428: PUSH
78429: LD_STRING 
78431: ST_TO_ADDR
// hc_noskilllimit := true ;
78432: LD_ADDR_OWVAR 76
78436: PUSH
78437: LD_INT 1
78439: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
78440: LD_ADDR_OWVAR 31
78444: PUSH
78445: LD_INT 30
78447: PUSH
78448: LD_INT 30
78450: PUSH
78451: LD_INT 30
78453: PUSH
78454: LD_INT 30
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: LIST
78461: LIST
78462: ST_TO_ADDR
// un := CreateHuman ;
78463: LD_ADDR_VAR 0 3
78467: PUSH
78468: CALL_OW 44
78472: ST_TO_ADDR
// hc_noskilllimit := false ;
78473: LD_ADDR_OWVAR 76
78477: PUSH
78478: LD_INT 0
78480: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
78481: LD_VAR 0 3
78485: PPUSH
78486: LD_INT 1
78488: PPUSH
78489: CALL_OW 51
// ToLua ( playRanger() ) ;
78493: LD_STRING playRanger()
78495: PPUSH
78496: CALL_OW 559
// p := 0 ;
78500: LD_ADDR_VAR 0 2
78504: PUSH
78505: LD_INT 0
78507: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
78508: LD_INT 35
78510: PPUSH
78511: CALL_OW 67
// p := p + 1 ;
78515: LD_ADDR_VAR 0 2
78519: PUSH
78520: LD_VAR 0 2
78524: PUSH
78525: LD_INT 1
78527: PLUS
78528: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
78529: LD_VAR 0 3
78533: PPUSH
78534: CALL_OW 256
78538: PUSH
78539: LD_INT 1000
78541: LESS
78542: IFFALSE 78556
// SetLives ( un , 1000 ) ;
78544: LD_VAR 0 3
78548: PPUSH
78549: LD_INT 1000
78551: PPUSH
78552: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
78556: LD_VAR 0 3
78560: PPUSH
78561: LD_INT 81
78563: PUSH
78564: LD_OWVAR 2
78568: PUSH
78569: EMPTY
78570: LIST
78571: LIST
78572: PUSH
78573: LD_INT 91
78575: PUSH
78576: LD_VAR 0 3
78580: PUSH
78581: LD_INT 30
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: LIST
78588: PUSH
78589: EMPTY
78590: LIST
78591: LIST
78592: PPUSH
78593: CALL_OW 69
78597: PPUSH
78598: LD_VAR 0 3
78602: PPUSH
78603: CALL_OW 74
78607: PPUSH
78608: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
78612: LD_VAR 0 2
78616: PUSH
78617: LD_INT 80
78619: GREATER
78620: PUSH
78621: LD_VAR 0 3
78625: PPUSH
78626: CALL_OW 301
78630: OR
78631: IFFALSE 78508
// if un then
78633: LD_VAR 0 3
78637: IFFALSE 78648
// RemoveUnit ( un ) ;
78639: LD_VAR 0 3
78643: PPUSH
78644: CALL_OW 64
// end ;
78648: PPOPN 3
78650: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
78651: LD_EXP 124
78655: IFFALSE 78771
78657: GO 78659
78659: DISABLE
78660: LD_INT 0
78662: PPUSH
78663: PPUSH
78664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
78665: LD_ADDR_VAR 0 2
78669: PUSH
78670: LD_INT 81
78672: PUSH
78673: LD_OWVAR 2
78677: PUSH
78678: EMPTY
78679: LIST
78680: LIST
78681: PUSH
78682: LD_INT 21
78684: PUSH
78685: LD_INT 1
78687: PUSH
78688: EMPTY
78689: LIST
78690: LIST
78691: PUSH
78692: EMPTY
78693: LIST
78694: LIST
78695: PPUSH
78696: CALL_OW 69
78700: ST_TO_ADDR
// ToLua ( playComputer() ) ;
78701: LD_STRING playComputer()
78703: PPUSH
78704: CALL_OW 559
// if not tmp then
78708: LD_VAR 0 2
78712: NOT
78713: IFFALSE 78717
// exit ;
78715: GO 78771
// for i in tmp do
78717: LD_ADDR_VAR 0 1
78721: PUSH
78722: LD_VAR 0 2
78726: PUSH
78727: FOR_IN
78728: IFFALSE 78769
// for j := 1 to 4 do
78730: LD_ADDR_VAR 0 3
78734: PUSH
78735: DOUBLE
78736: LD_INT 1
78738: DEC
78739: ST_TO_ADDR
78740: LD_INT 4
78742: PUSH
78743: FOR_TO
78744: IFFALSE 78765
// SetSkill ( i , j , 10 ) ;
78746: LD_VAR 0 1
78750: PPUSH
78751: LD_VAR 0 3
78755: PPUSH
78756: LD_INT 10
78758: PPUSH
78759: CALL_OW 237
78763: GO 78743
78765: POP
78766: POP
78767: GO 78727
78769: POP
78770: POP
// end ;
78771: PPOPN 3
78773: END
// every 0 0$1 trigger s30 do var i , tmp ;
78774: LD_EXP 125
78778: IFFALSE 78847
78780: GO 78782
78782: DISABLE
78783: LD_INT 0
78785: PPUSH
78786: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78787: LD_ADDR_VAR 0 2
78791: PUSH
78792: LD_INT 22
78794: PUSH
78795: LD_OWVAR 2
78799: PUSH
78800: EMPTY
78801: LIST
78802: LIST
78803: PPUSH
78804: CALL_OW 69
78808: ST_TO_ADDR
// if not tmp then
78809: LD_VAR 0 2
78813: NOT
78814: IFFALSE 78818
// exit ;
78816: GO 78847
// for i in tmp do
78818: LD_ADDR_VAR 0 1
78822: PUSH
78823: LD_VAR 0 2
78827: PUSH
78828: FOR_IN
78829: IFFALSE 78845
// SetLives ( i , 300 ) ;
78831: LD_VAR 0 1
78835: PPUSH
78836: LD_INT 300
78838: PPUSH
78839: CALL_OW 234
78843: GO 78828
78845: POP
78846: POP
// end ;
78847: PPOPN 2
78849: END
// every 0 0$1 trigger s60 do var i , tmp ;
78850: LD_EXP 126
78854: IFFALSE 78923
78856: GO 78858
78858: DISABLE
78859: LD_INT 0
78861: PPUSH
78862: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
78863: LD_ADDR_VAR 0 2
78867: PUSH
78868: LD_INT 22
78870: PUSH
78871: LD_OWVAR 2
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PPUSH
78880: CALL_OW 69
78884: ST_TO_ADDR
// if not tmp then
78885: LD_VAR 0 2
78889: NOT
78890: IFFALSE 78894
// exit ;
78892: GO 78923
// for i in tmp do
78894: LD_ADDR_VAR 0 1
78898: PUSH
78899: LD_VAR 0 2
78903: PUSH
78904: FOR_IN
78905: IFFALSE 78921
// SetLives ( i , 600 ) ;
78907: LD_VAR 0 1
78911: PPUSH
78912: LD_INT 600
78914: PPUSH
78915: CALL_OW 234
78919: GO 78904
78921: POP
78922: POP
// end ;
78923: PPOPN 2
78925: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
78926: LD_INT 0
78928: PPUSH
// case cmd of 301 :
78929: LD_VAR 0 1
78933: PUSH
78934: LD_INT 301
78936: DOUBLE
78937: EQUAL
78938: IFTRUE 78942
78940: GO 78974
78942: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
78943: LD_VAR 0 6
78947: PPUSH
78948: LD_VAR 0 7
78952: PPUSH
78953: LD_VAR 0 8
78957: PPUSH
78958: LD_VAR 0 4
78962: PPUSH
78963: LD_VAR 0 5
78967: PPUSH
78968: CALL 80183 0 5
78972: GO 79095
78974: LD_INT 302
78976: DOUBLE
78977: EQUAL
78978: IFTRUE 78982
78980: GO 79019
78982: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
78983: LD_VAR 0 6
78987: PPUSH
78988: LD_VAR 0 7
78992: PPUSH
78993: LD_VAR 0 8
78997: PPUSH
78998: LD_VAR 0 9
79002: PPUSH
79003: LD_VAR 0 4
79007: PPUSH
79008: LD_VAR 0 5
79012: PPUSH
79013: CALL 80274 0 6
79017: GO 79095
79019: LD_INT 303
79021: DOUBLE
79022: EQUAL
79023: IFTRUE 79027
79025: GO 79064
79027: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
79028: LD_VAR 0 6
79032: PPUSH
79033: LD_VAR 0 7
79037: PPUSH
79038: LD_VAR 0 8
79042: PPUSH
79043: LD_VAR 0 9
79047: PPUSH
79048: LD_VAR 0 4
79052: PPUSH
79053: LD_VAR 0 5
79057: PPUSH
79058: CALL 79100 0 6
79062: GO 79095
79064: LD_INT 304
79066: DOUBLE
79067: EQUAL
79068: IFTRUE 79072
79070: GO 79094
79072: POP
// hHackTeleport ( unit , x , y ) ; end ;
79073: LD_VAR 0 2
79077: PPUSH
79078: LD_VAR 0 4
79082: PPUSH
79083: LD_VAR 0 5
79087: PPUSH
79088: CALL 80867 0 3
79092: GO 79095
79094: POP
// end ;
79095: LD_VAR 0 12
79099: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
79100: LD_INT 0
79102: PPUSH
79103: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
79104: LD_VAR 0 1
79108: PUSH
79109: LD_INT 1
79111: LESS
79112: PUSH
79113: LD_VAR 0 1
79117: PUSH
79118: LD_INT 3
79120: GREATER
79121: OR
79122: PUSH
79123: LD_VAR 0 5
79127: PPUSH
79128: LD_VAR 0 6
79132: PPUSH
79133: CALL_OW 428
79137: OR
79138: IFFALSE 79142
// exit ;
79140: GO 79870
// uc_side := your_side ;
79142: LD_ADDR_OWVAR 20
79146: PUSH
79147: LD_OWVAR 2
79151: ST_TO_ADDR
// uc_nation := nation ;
79152: LD_ADDR_OWVAR 21
79156: PUSH
79157: LD_VAR 0 1
79161: ST_TO_ADDR
// bc_level = 1 ;
79162: LD_ADDR_OWVAR 43
79166: PUSH
79167: LD_INT 1
79169: ST_TO_ADDR
// case btype of 1 :
79170: LD_VAR 0 2
79174: PUSH
79175: LD_INT 1
79177: DOUBLE
79178: EQUAL
79179: IFTRUE 79183
79181: GO 79194
79183: POP
// bc_type := b_depot ; 2 :
79184: LD_ADDR_OWVAR 42
79188: PUSH
79189: LD_INT 0
79191: ST_TO_ADDR
79192: GO 79814
79194: LD_INT 2
79196: DOUBLE
79197: EQUAL
79198: IFTRUE 79202
79200: GO 79213
79202: POP
// bc_type := b_warehouse ; 3 :
79203: LD_ADDR_OWVAR 42
79207: PUSH
79208: LD_INT 1
79210: ST_TO_ADDR
79211: GO 79814
79213: LD_INT 3
79215: DOUBLE
79216: EQUAL
79217: IFTRUE 79221
79219: GO 79232
79221: POP
// bc_type := b_lab ; 4 .. 9 :
79222: LD_ADDR_OWVAR 42
79226: PUSH
79227: LD_INT 6
79229: ST_TO_ADDR
79230: GO 79814
79232: LD_INT 4
79234: DOUBLE
79235: GREATEREQUAL
79236: IFFALSE 79244
79238: LD_INT 9
79240: DOUBLE
79241: LESSEQUAL
79242: IFTRUE 79246
79244: GO 79306
79246: POP
// begin bc_type := b_lab_half ;
79247: LD_ADDR_OWVAR 42
79251: PUSH
79252: LD_INT 7
79254: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
79255: LD_ADDR_OWVAR 44
79259: PUSH
79260: LD_INT 10
79262: PUSH
79263: LD_INT 11
79265: PUSH
79266: LD_INT 12
79268: PUSH
79269: LD_INT 15
79271: PUSH
79272: LD_INT 14
79274: PUSH
79275: LD_INT 13
79277: PUSH
79278: EMPTY
79279: LIST
79280: LIST
79281: LIST
79282: LIST
79283: LIST
79284: LIST
79285: PUSH
79286: LD_VAR 0 2
79290: PUSH
79291: LD_INT 3
79293: MINUS
79294: ARRAY
79295: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
79296: LD_ADDR_OWVAR 45
79300: PUSH
79301: LD_INT 9
79303: ST_TO_ADDR
// end ; 10 .. 13 :
79304: GO 79814
79306: LD_INT 10
79308: DOUBLE
79309: GREATEREQUAL
79310: IFFALSE 79318
79312: LD_INT 13
79314: DOUBLE
79315: LESSEQUAL
79316: IFTRUE 79320
79318: GO 79397
79320: POP
// begin bc_type := b_lab_full ;
79321: LD_ADDR_OWVAR 42
79325: PUSH
79326: LD_INT 8
79328: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
79329: LD_ADDR_OWVAR 44
79333: PUSH
79334: LD_INT 10
79336: PUSH
79337: LD_INT 12
79339: PUSH
79340: LD_INT 14
79342: PUSH
79343: LD_INT 13
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: PUSH
79352: LD_VAR 0 2
79356: PUSH
79357: LD_INT 9
79359: MINUS
79360: ARRAY
79361: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
79362: LD_ADDR_OWVAR 45
79366: PUSH
79367: LD_INT 11
79369: PUSH
79370: LD_INT 15
79372: PUSH
79373: LD_INT 12
79375: PUSH
79376: LD_INT 15
79378: PUSH
79379: EMPTY
79380: LIST
79381: LIST
79382: LIST
79383: LIST
79384: PUSH
79385: LD_VAR 0 2
79389: PUSH
79390: LD_INT 9
79392: MINUS
79393: ARRAY
79394: ST_TO_ADDR
// end ; 14 :
79395: GO 79814
79397: LD_INT 14
79399: DOUBLE
79400: EQUAL
79401: IFTRUE 79405
79403: GO 79416
79405: POP
// bc_type := b_workshop ; 15 :
79406: LD_ADDR_OWVAR 42
79410: PUSH
79411: LD_INT 2
79413: ST_TO_ADDR
79414: GO 79814
79416: LD_INT 15
79418: DOUBLE
79419: EQUAL
79420: IFTRUE 79424
79422: GO 79435
79424: POP
// bc_type := b_factory ; 16 :
79425: LD_ADDR_OWVAR 42
79429: PUSH
79430: LD_INT 3
79432: ST_TO_ADDR
79433: GO 79814
79435: LD_INT 16
79437: DOUBLE
79438: EQUAL
79439: IFTRUE 79443
79441: GO 79454
79443: POP
// bc_type := b_ext_gun ; 17 :
79444: LD_ADDR_OWVAR 42
79448: PUSH
79449: LD_INT 17
79451: ST_TO_ADDR
79452: GO 79814
79454: LD_INT 17
79456: DOUBLE
79457: EQUAL
79458: IFTRUE 79462
79460: GO 79490
79462: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
79463: LD_ADDR_OWVAR 42
79467: PUSH
79468: LD_INT 19
79470: PUSH
79471: LD_INT 23
79473: PUSH
79474: LD_INT 19
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: LIST
79481: PUSH
79482: LD_VAR 0 1
79486: ARRAY
79487: ST_TO_ADDR
79488: GO 79814
79490: LD_INT 18
79492: DOUBLE
79493: EQUAL
79494: IFTRUE 79498
79496: GO 79509
79498: POP
// bc_type := b_ext_radar ; 19 :
79499: LD_ADDR_OWVAR 42
79503: PUSH
79504: LD_INT 20
79506: ST_TO_ADDR
79507: GO 79814
79509: LD_INT 19
79511: DOUBLE
79512: EQUAL
79513: IFTRUE 79517
79515: GO 79528
79517: POP
// bc_type := b_ext_radio ; 20 :
79518: LD_ADDR_OWVAR 42
79522: PUSH
79523: LD_INT 22
79525: ST_TO_ADDR
79526: GO 79814
79528: LD_INT 20
79530: DOUBLE
79531: EQUAL
79532: IFTRUE 79536
79534: GO 79547
79536: POP
// bc_type := b_ext_siberium ; 21 :
79537: LD_ADDR_OWVAR 42
79541: PUSH
79542: LD_INT 21
79544: ST_TO_ADDR
79545: GO 79814
79547: LD_INT 21
79549: DOUBLE
79550: EQUAL
79551: IFTRUE 79555
79553: GO 79566
79555: POP
// bc_type := b_ext_computer ; 22 :
79556: LD_ADDR_OWVAR 42
79560: PUSH
79561: LD_INT 24
79563: ST_TO_ADDR
79564: GO 79814
79566: LD_INT 22
79568: DOUBLE
79569: EQUAL
79570: IFTRUE 79574
79572: GO 79585
79574: POP
// bc_type := b_ext_track ; 23 :
79575: LD_ADDR_OWVAR 42
79579: PUSH
79580: LD_INT 16
79582: ST_TO_ADDR
79583: GO 79814
79585: LD_INT 23
79587: DOUBLE
79588: EQUAL
79589: IFTRUE 79593
79591: GO 79604
79593: POP
// bc_type := b_ext_laser ; 24 :
79594: LD_ADDR_OWVAR 42
79598: PUSH
79599: LD_INT 25
79601: ST_TO_ADDR
79602: GO 79814
79604: LD_INT 24
79606: DOUBLE
79607: EQUAL
79608: IFTRUE 79612
79610: GO 79623
79612: POP
// bc_type := b_control_tower ; 25 :
79613: LD_ADDR_OWVAR 42
79617: PUSH
79618: LD_INT 36
79620: ST_TO_ADDR
79621: GO 79814
79623: LD_INT 25
79625: DOUBLE
79626: EQUAL
79627: IFTRUE 79631
79629: GO 79642
79631: POP
// bc_type := b_breastwork ; 26 :
79632: LD_ADDR_OWVAR 42
79636: PUSH
79637: LD_INT 31
79639: ST_TO_ADDR
79640: GO 79814
79642: LD_INT 26
79644: DOUBLE
79645: EQUAL
79646: IFTRUE 79650
79648: GO 79661
79650: POP
// bc_type := b_bunker ; 27 :
79651: LD_ADDR_OWVAR 42
79655: PUSH
79656: LD_INT 32
79658: ST_TO_ADDR
79659: GO 79814
79661: LD_INT 27
79663: DOUBLE
79664: EQUAL
79665: IFTRUE 79669
79667: GO 79680
79669: POP
// bc_type := b_turret ; 28 :
79670: LD_ADDR_OWVAR 42
79674: PUSH
79675: LD_INT 33
79677: ST_TO_ADDR
79678: GO 79814
79680: LD_INT 28
79682: DOUBLE
79683: EQUAL
79684: IFTRUE 79688
79686: GO 79699
79688: POP
// bc_type := b_armoury ; 29 :
79689: LD_ADDR_OWVAR 42
79693: PUSH
79694: LD_INT 4
79696: ST_TO_ADDR
79697: GO 79814
79699: LD_INT 29
79701: DOUBLE
79702: EQUAL
79703: IFTRUE 79707
79705: GO 79718
79707: POP
// bc_type := b_barracks ; 30 :
79708: LD_ADDR_OWVAR 42
79712: PUSH
79713: LD_INT 5
79715: ST_TO_ADDR
79716: GO 79814
79718: LD_INT 30
79720: DOUBLE
79721: EQUAL
79722: IFTRUE 79726
79724: GO 79737
79726: POP
// bc_type := b_solar_power ; 31 :
79727: LD_ADDR_OWVAR 42
79731: PUSH
79732: LD_INT 27
79734: ST_TO_ADDR
79735: GO 79814
79737: LD_INT 31
79739: DOUBLE
79740: EQUAL
79741: IFTRUE 79745
79743: GO 79756
79745: POP
// bc_type := b_oil_power ; 32 :
79746: LD_ADDR_OWVAR 42
79750: PUSH
79751: LD_INT 26
79753: ST_TO_ADDR
79754: GO 79814
79756: LD_INT 32
79758: DOUBLE
79759: EQUAL
79760: IFTRUE 79764
79762: GO 79775
79764: POP
// bc_type := b_siberite_power ; 33 :
79765: LD_ADDR_OWVAR 42
79769: PUSH
79770: LD_INT 28
79772: ST_TO_ADDR
79773: GO 79814
79775: LD_INT 33
79777: DOUBLE
79778: EQUAL
79779: IFTRUE 79783
79781: GO 79794
79783: POP
// bc_type := b_oil_mine ; 34 :
79784: LD_ADDR_OWVAR 42
79788: PUSH
79789: LD_INT 29
79791: ST_TO_ADDR
79792: GO 79814
79794: LD_INT 34
79796: DOUBLE
79797: EQUAL
79798: IFTRUE 79802
79800: GO 79813
79802: POP
// bc_type := b_siberite_mine ; end ;
79803: LD_ADDR_OWVAR 42
79807: PUSH
79808: LD_INT 30
79810: ST_TO_ADDR
79811: GO 79814
79813: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
79814: LD_ADDR_VAR 0 8
79818: PUSH
79819: LD_VAR 0 5
79823: PPUSH
79824: LD_VAR 0 6
79828: PPUSH
79829: LD_VAR 0 3
79833: PPUSH
79834: CALL_OW 47
79838: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
79839: LD_OWVAR 42
79843: PUSH
79844: LD_INT 32
79846: PUSH
79847: LD_INT 33
79849: PUSH
79850: EMPTY
79851: LIST
79852: LIST
79853: IN
79854: IFFALSE 79870
// PlaceWeaponTurret ( b , weapon ) ;
79856: LD_VAR 0 8
79860: PPUSH
79861: LD_VAR 0 4
79865: PPUSH
79866: CALL_OW 431
// end ;
79870: LD_VAR 0 7
79874: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
79875: LD_INT 0
79877: PPUSH
79878: PPUSH
79879: PPUSH
79880: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
79881: LD_ADDR_VAR 0 4
79885: PUSH
79886: LD_INT 22
79888: PUSH
79889: LD_OWVAR 2
79893: PUSH
79894: EMPTY
79895: LIST
79896: LIST
79897: PUSH
79898: LD_INT 2
79900: PUSH
79901: LD_INT 30
79903: PUSH
79904: LD_INT 0
79906: PUSH
79907: EMPTY
79908: LIST
79909: LIST
79910: PUSH
79911: LD_INT 30
79913: PUSH
79914: LD_INT 1
79916: PUSH
79917: EMPTY
79918: LIST
79919: LIST
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: LIST
79925: PUSH
79926: EMPTY
79927: LIST
79928: LIST
79929: PPUSH
79930: CALL_OW 69
79934: ST_TO_ADDR
// if not tmp then
79935: LD_VAR 0 4
79939: NOT
79940: IFFALSE 79944
// exit ;
79942: GO 80003
// for i in tmp do
79944: LD_ADDR_VAR 0 2
79948: PUSH
79949: LD_VAR 0 4
79953: PUSH
79954: FOR_IN
79955: IFFALSE 80001
// for j = 1 to 3 do
79957: LD_ADDR_VAR 0 3
79961: PUSH
79962: DOUBLE
79963: LD_INT 1
79965: DEC
79966: ST_TO_ADDR
79967: LD_INT 3
79969: PUSH
79970: FOR_TO
79971: IFFALSE 79997
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
79973: LD_VAR 0 2
79977: PPUSH
79978: CALL_OW 274
79982: PPUSH
79983: LD_VAR 0 3
79987: PPUSH
79988: LD_INT 99999
79990: PPUSH
79991: CALL_OW 277
79995: GO 79970
79997: POP
79998: POP
79999: GO 79954
80001: POP
80002: POP
// end ;
80003: LD_VAR 0 1
80007: RET
// export function hHackSetLevel10 ; var i , j ; begin
80008: LD_INT 0
80010: PPUSH
80011: PPUSH
80012: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80013: LD_ADDR_VAR 0 2
80017: PUSH
80018: LD_INT 21
80020: PUSH
80021: LD_INT 1
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PPUSH
80028: CALL_OW 69
80032: PUSH
80033: FOR_IN
80034: IFFALSE 80086
// if IsSelected ( i ) then
80036: LD_VAR 0 2
80040: PPUSH
80041: CALL_OW 306
80045: IFFALSE 80084
// begin for j := 1 to 4 do
80047: LD_ADDR_VAR 0 3
80051: PUSH
80052: DOUBLE
80053: LD_INT 1
80055: DEC
80056: ST_TO_ADDR
80057: LD_INT 4
80059: PUSH
80060: FOR_TO
80061: IFFALSE 80082
// SetSkill ( i , j , 10 ) ;
80063: LD_VAR 0 2
80067: PPUSH
80068: LD_VAR 0 3
80072: PPUSH
80073: LD_INT 10
80075: PPUSH
80076: CALL_OW 237
80080: GO 80060
80082: POP
80083: POP
// end ;
80084: GO 80033
80086: POP
80087: POP
// end ;
80088: LD_VAR 0 1
80092: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
80093: LD_INT 0
80095: PPUSH
80096: PPUSH
80097: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
80098: LD_ADDR_VAR 0 2
80102: PUSH
80103: LD_INT 22
80105: PUSH
80106: LD_OWVAR 2
80110: PUSH
80111: EMPTY
80112: LIST
80113: LIST
80114: PUSH
80115: LD_INT 21
80117: PUSH
80118: LD_INT 1
80120: PUSH
80121: EMPTY
80122: LIST
80123: LIST
80124: PUSH
80125: EMPTY
80126: LIST
80127: LIST
80128: PPUSH
80129: CALL_OW 69
80133: PUSH
80134: FOR_IN
80135: IFFALSE 80176
// begin for j := 1 to 4 do
80137: LD_ADDR_VAR 0 3
80141: PUSH
80142: DOUBLE
80143: LD_INT 1
80145: DEC
80146: ST_TO_ADDR
80147: LD_INT 4
80149: PUSH
80150: FOR_TO
80151: IFFALSE 80172
// SetSkill ( i , j , 10 ) ;
80153: LD_VAR 0 2
80157: PPUSH
80158: LD_VAR 0 3
80162: PPUSH
80163: LD_INT 10
80165: PPUSH
80166: CALL_OW 237
80170: GO 80150
80172: POP
80173: POP
// end ;
80174: GO 80134
80176: POP
80177: POP
// end ;
80178: LD_VAR 0 1
80182: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
80183: LD_INT 0
80185: PPUSH
// uc_side := your_side ;
80186: LD_ADDR_OWVAR 20
80190: PUSH
80191: LD_OWVAR 2
80195: ST_TO_ADDR
// uc_nation := nation ;
80196: LD_ADDR_OWVAR 21
80200: PUSH
80201: LD_VAR 0 1
80205: ST_TO_ADDR
// InitHc ;
80206: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
80210: LD_INT 0
80212: PPUSH
80213: LD_VAR 0 2
80217: PPUSH
80218: LD_VAR 0 3
80222: PPUSH
80223: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
80227: LD_VAR 0 4
80231: PPUSH
80232: LD_VAR 0 5
80236: PPUSH
80237: CALL_OW 428
80241: PUSH
80242: LD_INT 0
80244: EQUAL
80245: IFFALSE 80269
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
80247: CALL_OW 44
80251: PPUSH
80252: LD_VAR 0 4
80256: PPUSH
80257: LD_VAR 0 5
80261: PPUSH
80262: LD_INT 1
80264: PPUSH
80265: CALL_OW 48
// end ;
80269: LD_VAR 0 6
80273: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
80274: LD_INT 0
80276: PPUSH
80277: PPUSH
// uc_side := your_side ;
80278: LD_ADDR_OWVAR 20
80282: PUSH
80283: LD_OWVAR 2
80287: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
80288: LD_VAR 0 1
80292: PUSH
80293: LD_INT 1
80295: PUSH
80296: LD_INT 2
80298: PUSH
80299: LD_INT 3
80301: PUSH
80302: LD_INT 4
80304: PUSH
80305: LD_INT 5
80307: PUSH
80308: EMPTY
80309: LIST
80310: LIST
80311: LIST
80312: LIST
80313: LIST
80314: IN
80315: IFFALSE 80327
// uc_nation := nation_american else
80317: LD_ADDR_OWVAR 21
80321: PUSH
80322: LD_INT 1
80324: ST_TO_ADDR
80325: GO 80370
// if chassis in [ 11 , 12 , 13 , 14 ] then
80327: LD_VAR 0 1
80331: PUSH
80332: LD_INT 11
80334: PUSH
80335: LD_INT 12
80337: PUSH
80338: LD_INT 13
80340: PUSH
80341: LD_INT 14
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: LIST
80348: LIST
80349: IN
80350: IFFALSE 80362
// uc_nation := nation_arabian else
80352: LD_ADDR_OWVAR 21
80356: PUSH
80357: LD_INT 2
80359: ST_TO_ADDR
80360: GO 80370
// uc_nation := nation_russian ;
80362: LD_ADDR_OWVAR 21
80366: PUSH
80367: LD_INT 3
80369: ST_TO_ADDR
// vc_chassis := chassis ;
80370: LD_ADDR_OWVAR 37
80374: PUSH
80375: LD_VAR 0 1
80379: ST_TO_ADDR
// vc_engine := engine ;
80380: LD_ADDR_OWVAR 39
80384: PUSH
80385: LD_VAR 0 2
80389: ST_TO_ADDR
// vc_control := control ;
80390: LD_ADDR_OWVAR 38
80394: PUSH
80395: LD_VAR 0 3
80399: ST_TO_ADDR
// vc_weapon := weapon ;
80400: LD_ADDR_OWVAR 40
80404: PUSH
80405: LD_VAR 0 4
80409: ST_TO_ADDR
// un := CreateVehicle ;
80410: LD_ADDR_VAR 0 8
80414: PUSH
80415: CALL_OW 45
80419: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
80420: LD_VAR 0 8
80424: PPUSH
80425: LD_INT 0
80427: PPUSH
80428: LD_INT 5
80430: PPUSH
80431: CALL_OW 12
80435: PPUSH
80436: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
80440: LD_VAR 0 8
80444: PPUSH
80445: LD_VAR 0 5
80449: PPUSH
80450: LD_VAR 0 6
80454: PPUSH
80455: LD_INT 1
80457: PPUSH
80458: CALL_OW 48
// end ;
80462: LD_VAR 0 7
80466: RET
// export hInvincible ; every 1 do
80467: GO 80469
80469: DISABLE
// hInvincible := [ ] ;
80470: LD_ADDR_EXP 127
80474: PUSH
80475: EMPTY
80476: ST_TO_ADDR
80477: END
// every 10 do var i ;
80478: GO 80480
80480: DISABLE
80481: LD_INT 0
80483: PPUSH
// begin enable ;
80484: ENABLE
// if not hInvincible then
80485: LD_EXP 127
80489: NOT
80490: IFFALSE 80494
// exit ;
80492: GO 80538
// for i in hInvincible do
80494: LD_ADDR_VAR 0 1
80498: PUSH
80499: LD_EXP 127
80503: PUSH
80504: FOR_IN
80505: IFFALSE 80536
// if GetLives ( i ) < 1000 then
80507: LD_VAR 0 1
80511: PPUSH
80512: CALL_OW 256
80516: PUSH
80517: LD_INT 1000
80519: LESS
80520: IFFALSE 80534
// SetLives ( i , 1000 ) ;
80522: LD_VAR 0 1
80526: PPUSH
80527: LD_INT 1000
80529: PPUSH
80530: CALL_OW 234
80534: GO 80504
80536: POP
80537: POP
// end ;
80538: PPOPN 1
80540: END
// export function hHackInvincible ; var i ; begin
80541: LD_INT 0
80543: PPUSH
80544: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
80545: LD_ADDR_VAR 0 2
80549: PUSH
80550: LD_INT 2
80552: PUSH
80553: LD_INT 21
80555: PUSH
80556: LD_INT 1
80558: PUSH
80559: EMPTY
80560: LIST
80561: LIST
80562: PUSH
80563: LD_INT 21
80565: PUSH
80566: LD_INT 2
80568: PUSH
80569: EMPTY
80570: LIST
80571: LIST
80572: PUSH
80573: EMPTY
80574: LIST
80575: LIST
80576: LIST
80577: PPUSH
80578: CALL_OW 69
80582: PUSH
80583: FOR_IN
80584: IFFALSE 80645
// if IsSelected ( i ) then
80586: LD_VAR 0 2
80590: PPUSH
80591: CALL_OW 306
80595: IFFALSE 80643
// begin if i in hInvincible then
80597: LD_VAR 0 2
80601: PUSH
80602: LD_EXP 127
80606: IN
80607: IFFALSE 80627
// hInvincible := hInvincible diff i else
80609: LD_ADDR_EXP 127
80613: PUSH
80614: LD_EXP 127
80618: PUSH
80619: LD_VAR 0 2
80623: DIFF
80624: ST_TO_ADDR
80625: GO 80643
// hInvincible := hInvincible union i ;
80627: LD_ADDR_EXP 127
80631: PUSH
80632: LD_EXP 127
80636: PUSH
80637: LD_VAR 0 2
80641: UNION
80642: ST_TO_ADDR
// end ;
80643: GO 80583
80645: POP
80646: POP
// end ;
80647: LD_VAR 0 1
80651: RET
// export function hHackInvisible ; var i , j ; begin
80652: LD_INT 0
80654: PPUSH
80655: PPUSH
80656: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
80657: LD_ADDR_VAR 0 2
80661: PUSH
80662: LD_INT 21
80664: PUSH
80665: LD_INT 1
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: PPUSH
80672: CALL_OW 69
80676: PUSH
80677: FOR_IN
80678: IFFALSE 80702
// if IsSelected ( i ) then
80680: LD_VAR 0 2
80684: PPUSH
80685: CALL_OW 306
80689: IFFALSE 80700
// ComForceInvisible ( i ) ;
80691: LD_VAR 0 2
80695: PPUSH
80696: CALL_OW 496
80700: GO 80677
80702: POP
80703: POP
// end ;
80704: LD_VAR 0 1
80708: RET
// export function hHackChangeYourSide ; begin
80709: LD_INT 0
80711: PPUSH
// if your_side = 8 then
80712: LD_OWVAR 2
80716: PUSH
80717: LD_INT 8
80719: EQUAL
80720: IFFALSE 80732
// your_side := 0 else
80722: LD_ADDR_OWVAR 2
80726: PUSH
80727: LD_INT 0
80729: ST_TO_ADDR
80730: GO 80746
// your_side := your_side + 1 ;
80732: LD_ADDR_OWVAR 2
80736: PUSH
80737: LD_OWVAR 2
80741: PUSH
80742: LD_INT 1
80744: PLUS
80745: ST_TO_ADDR
// end ;
80746: LD_VAR 0 1
80750: RET
// export function hHackChangeUnitSide ; var i , j ; begin
80751: LD_INT 0
80753: PPUSH
80754: PPUSH
80755: PPUSH
// for i in all_units do
80756: LD_ADDR_VAR 0 2
80760: PUSH
80761: LD_OWVAR 3
80765: PUSH
80766: FOR_IN
80767: IFFALSE 80845
// if IsSelected ( i ) then
80769: LD_VAR 0 2
80773: PPUSH
80774: CALL_OW 306
80778: IFFALSE 80843
// begin j := GetSide ( i ) ;
80780: LD_ADDR_VAR 0 3
80784: PUSH
80785: LD_VAR 0 2
80789: PPUSH
80790: CALL_OW 255
80794: ST_TO_ADDR
// if j = 8 then
80795: LD_VAR 0 3
80799: PUSH
80800: LD_INT 8
80802: EQUAL
80803: IFFALSE 80815
// j := 0 else
80805: LD_ADDR_VAR 0 3
80809: PUSH
80810: LD_INT 0
80812: ST_TO_ADDR
80813: GO 80829
// j := j + 1 ;
80815: LD_ADDR_VAR 0 3
80819: PUSH
80820: LD_VAR 0 3
80824: PUSH
80825: LD_INT 1
80827: PLUS
80828: ST_TO_ADDR
// SetSide ( i , j ) ;
80829: LD_VAR 0 2
80833: PPUSH
80834: LD_VAR 0 3
80838: PPUSH
80839: CALL_OW 235
// end ;
80843: GO 80766
80845: POP
80846: POP
// end ;
80847: LD_VAR 0 1
80851: RET
// export function hHackFog ; begin
80852: LD_INT 0
80854: PPUSH
// FogOff ( true ) ;
80855: LD_INT 1
80857: PPUSH
80858: CALL_OW 344
// end ;
80862: LD_VAR 0 1
80866: RET
// export function hHackTeleport ( unit , x , y ) ; begin
80867: LD_INT 0
80869: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
80870: LD_VAR 0 1
80874: PPUSH
80875: LD_VAR 0 2
80879: PPUSH
80880: LD_VAR 0 3
80884: PPUSH
80885: LD_INT 1
80887: PPUSH
80888: LD_INT 1
80890: PPUSH
80891: CALL_OW 483
// CenterOnXY ( x , y ) ;
80895: LD_VAR 0 2
80899: PPUSH
80900: LD_VAR 0 3
80904: PPUSH
80905: CALL_OW 84
// end ;
80909: LD_VAR 0 4
80913: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
80914: LD_INT 0
80916: PPUSH
80917: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
80918: LD_VAR 0 1
80922: NOT
80923: PUSH
80924: LD_VAR 0 2
80928: PPUSH
80929: LD_VAR 0 3
80933: PPUSH
80934: CALL_OW 488
80938: NOT
80939: OR
80940: PUSH
80941: LD_VAR 0 1
80945: PPUSH
80946: CALL_OW 266
80950: PUSH
80951: LD_INT 3
80953: NONEQUAL
80954: PUSH
80955: LD_VAR 0 1
80959: PPUSH
80960: CALL_OW 247
80964: PUSH
80965: LD_INT 1
80967: EQUAL
80968: NOT
80969: AND
80970: OR
80971: IFFALSE 80975
// exit ;
80973: GO 81124
// if GetType ( factory ) = unit_human then
80975: LD_VAR 0 1
80979: PPUSH
80980: CALL_OW 247
80984: PUSH
80985: LD_INT 1
80987: EQUAL
80988: IFFALSE 81005
// factory := IsInUnit ( factory ) ;
80990: LD_ADDR_VAR 0 1
80994: PUSH
80995: LD_VAR 0 1
80999: PPUSH
81000: CALL_OW 310
81004: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
81005: LD_VAR 0 1
81009: PPUSH
81010: CALL_OW 266
81014: PUSH
81015: LD_INT 3
81017: NONEQUAL
81018: IFFALSE 81022
// exit ;
81020: GO 81124
// if HexInfo ( x , y ) = factory then
81022: LD_VAR 0 2
81026: PPUSH
81027: LD_VAR 0 3
81031: PPUSH
81032: CALL_OW 428
81036: PUSH
81037: LD_VAR 0 1
81041: EQUAL
81042: IFFALSE 81069
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
81044: LD_ADDR_EXP 128
81048: PUSH
81049: LD_EXP 128
81053: PPUSH
81054: LD_VAR 0 1
81058: PPUSH
81059: LD_INT 0
81061: PPUSH
81062: CALL_OW 1
81066: ST_TO_ADDR
81067: GO 81120
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
81069: LD_ADDR_EXP 128
81073: PUSH
81074: LD_EXP 128
81078: PPUSH
81079: LD_VAR 0 1
81083: PPUSH
81084: LD_VAR 0 1
81088: PPUSH
81089: CALL_OW 255
81093: PUSH
81094: LD_VAR 0 1
81098: PUSH
81099: LD_VAR 0 2
81103: PUSH
81104: LD_VAR 0 3
81108: PUSH
81109: EMPTY
81110: LIST
81111: LIST
81112: LIST
81113: LIST
81114: PPUSH
81115: CALL_OW 1
81119: ST_TO_ADDR
// UpdateFactoryWaypoints ;
81120: CALL 81129 0 0
// end ;
81124: LD_VAR 0 4
81128: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
81129: LD_INT 0
81131: PPUSH
81132: PPUSH
81133: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
81134: LD_STRING resetFactoryWaypoint();
81136: PPUSH
81137: CALL_OW 559
// if factoryWaypoints then
81141: LD_EXP 128
81145: IFFALSE 81271
// begin list := PrepareArray ( factoryWaypoints ) ;
81147: LD_ADDR_VAR 0 3
81151: PUSH
81152: LD_EXP 128
81156: PPUSH
81157: NOP4
81161: ST_TO_ADDR
// for i := 1 to list do
81162: LD_ADDR_VAR 0 2
81166: PUSH
81167: DOUBLE
81168: LD_INT 1
81170: DEC
81171: ST_TO_ADDR
81172: LD_VAR 0 3
81176: PUSH
81177: FOR_TO
81178: IFFALSE 81269
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81180: LD_STRING setFactoryWaypointXY(
81182: PUSH
81183: LD_VAR 0 3
81187: PUSH
81188: LD_VAR 0 2
81192: ARRAY
81193: PUSH
81194: LD_INT 1
81196: ARRAY
81197: STR
81198: PUSH
81199: LD_STRING ,
81201: STR
81202: PUSH
81203: LD_VAR 0 3
81207: PUSH
81208: LD_VAR 0 2
81212: ARRAY
81213: PUSH
81214: LD_INT 2
81216: ARRAY
81217: STR
81218: PUSH
81219: LD_STRING ,
81221: STR
81222: PUSH
81223: LD_VAR 0 3
81227: PUSH
81228: LD_VAR 0 2
81232: ARRAY
81233: PUSH
81234: LD_INT 3
81236: ARRAY
81237: STR
81238: PUSH
81239: LD_STRING ,
81241: STR
81242: PUSH
81243: LD_VAR 0 3
81247: PUSH
81248: LD_VAR 0 2
81252: ARRAY
81253: PUSH
81254: LD_INT 4
81256: ARRAY
81257: STR
81258: PUSH
81259: LD_STRING )
81261: STR
81262: PPUSH
81263: CALL_OW 559
81267: GO 81177
81269: POP
81270: POP
// end ; end ;
81271: LD_VAR 0 1
81275: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
81276: LD_INT 0
81278: PPUSH
// if HexInfo ( x , y ) = warehouse then
81279: LD_VAR 0 2
81283: PPUSH
81284: LD_VAR 0 3
81288: PPUSH
81289: CALL_OW 428
81293: PUSH
81294: LD_VAR 0 1
81298: EQUAL
81299: IFFALSE 81326
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
81301: LD_ADDR_EXP 129
81305: PUSH
81306: LD_EXP 129
81310: PPUSH
81311: LD_VAR 0 1
81315: PPUSH
81316: LD_INT 0
81318: PPUSH
81319: CALL_OW 1
81323: ST_TO_ADDR
81324: GO 81377
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
81326: LD_ADDR_EXP 129
81330: PUSH
81331: LD_EXP 129
81335: PPUSH
81336: LD_VAR 0 1
81340: PPUSH
81341: LD_VAR 0 1
81345: PPUSH
81346: CALL_OW 255
81350: PUSH
81351: LD_VAR 0 1
81355: PUSH
81356: LD_VAR 0 2
81360: PUSH
81361: LD_VAR 0 3
81365: PUSH
81366: EMPTY
81367: LIST
81368: LIST
81369: LIST
81370: LIST
81371: PPUSH
81372: CALL_OW 1
81376: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
81377: CALL 81386 0 0
// end ;
81381: LD_VAR 0 4
81385: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
81386: LD_INT 0
81388: PPUSH
81389: PPUSH
81390: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
81391: LD_STRING resetWarehouseGatheringPoints();
81393: PPUSH
81394: CALL_OW 559
// if warehouseGatheringPoints then
81398: LD_EXP 129
81402: IFFALSE 81528
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
81404: LD_ADDR_VAR 0 3
81408: PUSH
81409: LD_EXP 129
81413: PPUSH
81414: NOP4
81418: ST_TO_ADDR
// for i := 1 to list do
81419: LD_ADDR_VAR 0 2
81423: PUSH
81424: DOUBLE
81425: LD_INT 1
81427: DEC
81428: ST_TO_ADDR
81429: LD_VAR 0 3
81433: PUSH
81434: FOR_TO
81435: IFFALSE 81526
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
81437: LD_STRING setWarehouseGatheringPointXY(
81439: PUSH
81440: LD_VAR 0 3
81444: PUSH
81445: LD_VAR 0 2
81449: ARRAY
81450: PUSH
81451: LD_INT 1
81453: ARRAY
81454: STR
81455: PUSH
81456: LD_STRING ,
81458: STR
81459: PUSH
81460: LD_VAR 0 3
81464: PUSH
81465: LD_VAR 0 2
81469: ARRAY
81470: PUSH
81471: LD_INT 2
81473: ARRAY
81474: STR
81475: PUSH
81476: LD_STRING ,
81478: STR
81479: PUSH
81480: LD_VAR 0 3
81484: PUSH
81485: LD_VAR 0 2
81489: ARRAY
81490: PUSH
81491: LD_INT 3
81493: ARRAY
81494: STR
81495: PUSH
81496: LD_STRING ,
81498: STR
81499: PUSH
81500: LD_VAR 0 3
81504: PUSH
81505: LD_VAR 0 2
81509: ARRAY
81510: PUSH
81511: LD_INT 4
81513: ARRAY
81514: STR
81515: PUSH
81516: LD_STRING )
81518: STR
81519: PPUSH
81520: CALL_OW 559
81524: GO 81434
81526: POP
81527: POP
// end ; end ;
81528: LD_VAR 0 1
81532: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
81533: LD_EXP 129
81537: IFFALSE 82222
81539: GO 81541
81541: DISABLE
81542: LD_INT 0
81544: PPUSH
81545: PPUSH
81546: PPUSH
81547: PPUSH
81548: PPUSH
81549: PPUSH
81550: PPUSH
81551: PPUSH
81552: PPUSH
// begin enable ;
81553: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
81554: LD_ADDR_VAR 0 3
81558: PUSH
81559: LD_EXP 129
81563: PPUSH
81564: NOP4
81568: ST_TO_ADDR
// if not list then
81569: LD_VAR 0 3
81573: NOT
81574: IFFALSE 81578
// exit ;
81576: GO 82222
// for i := 1 to list do
81578: LD_ADDR_VAR 0 1
81582: PUSH
81583: DOUBLE
81584: LD_INT 1
81586: DEC
81587: ST_TO_ADDR
81588: LD_VAR 0 3
81592: PUSH
81593: FOR_TO
81594: IFFALSE 82220
// begin depot := list [ i ] [ 2 ] ;
81596: LD_ADDR_VAR 0 8
81600: PUSH
81601: LD_VAR 0 3
81605: PUSH
81606: LD_VAR 0 1
81610: ARRAY
81611: PUSH
81612: LD_INT 2
81614: ARRAY
81615: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
81616: LD_ADDR_VAR 0 5
81620: PUSH
81621: LD_VAR 0 3
81625: PUSH
81626: LD_VAR 0 1
81630: ARRAY
81631: PUSH
81632: LD_INT 1
81634: ARRAY
81635: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
81636: LD_VAR 0 8
81640: PPUSH
81641: CALL_OW 301
81645: PUSH
81646: LD_VAR 0 5
81650: PUSH
81651: LD_VAR 0 8
81655: PPUSH
81656: CALL_OW 255
81660: NONEQUAL
81661: OR
81662: IFFALSE 81691
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
81664: LD_ADDR_EXP 129
81668: PUSH
81669: LD_EXP 129
81673: PPUSH
81674: LD_VAR 0 8
81678: PPUSH
81679: LD_INT 0
81681: PPUSH
81682: CALL_OW 1
81686: ST_TO_ADDR
// exit ;
81687: POP
81688: POP
81689: GO 82222
// end ; x := list [ i ] [ 3 ] ;
81691: LD_ADDR_VAR 0 6
81695: PUSH
81696: LD_VAR 0 3
81700: PUSH
81701: LD_VAR 0 1
81705: ARRAY
81706: PUSH
81707: LD_INT 3
81709: ARRAY
81710: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
81711: LD_ADDR_VAR 0 7
81715: PUSH
81716: LD_VAR 0 3
81720: PUSH
81721: LD_VAR 0 1
81725: ARRAY
81726: PUSH
81727: LD_INT 4
81729: ARRAY
81730: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
81731: LD_ADDR_VAR 0 9
81735: PUSH
81736: LD_VAR 0 6
81740: PPUSH
81741: LD_VAR 0 7
81745: PPUSH
81746: LD_INT 16
81748: PPUSH
81749: CALL 60915 0 3
81753: ST_TO_ADDR
// if not cratesNearbyPoint then
81754: LD_VAR 0 9
81758: NOT
81759: IFFALSE 81765
// exit ;
81761: POP
81762: POP
81763: GO 82222
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
81765: LD_ADDR_VAR 0 4
81769: PUSH
81770: LD_INT 22
81772: PUSH
81773: LD_VAR 0 5
81777: PUSH
81778: EMPTY
81779: LIST
81780: LIST
81781: PUSH
81782: LD_INT 3
81784: PUSH
81785: LD_INT 60
81787: PUSH
81788: EMPTY
81789: LIST
81790: PUSH
81791: EMPTY
81792: LIST
81793: LIST
81794: PUSH
81795: LD_INT 91
81797: PUSH
81798: LD_VAR 0 8
81802: PUSH
81803: LD_INT 6
81805: PUSH
81806: EMPTY
81807: LIST
81808: LIST
81809: LIST
81810: PUSH
81811: LD_INT 2
81813: PUSH
81814: LD_INT 25
81816: PUSH
81817: LD_INT 2
81819: PUSH
81820: EMPTY
81821: LIST
81822: LIST
81823: PUSH
81824: LD_INT 25
81826: PUSH
81827: LD_INT 16
81829: PUSH
81830: EMPTY
81831: LIST
81832: LIST
81833: PUSH
81834: EMPTY
81835: LIST
81836: LIST
81837: LIST
81838: PUSH
81839: EMPTY
81840: LIST
81841: LIST
81842: LIST
81843: LIST
81844: PPUSH
81845: CALL_OW 69
81849: PUSH
81850: LD_VAR 0 8
81854: PPUSH
81855: CALL_OW 313
81859: PPUSH
81860: LD_INT 3
81862: PUSH
81863: LD_INT 60
81865: PUSH
81866: EMPTY
81867: LIST
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PUSH
81873: LD_INT 2
81875: PUSH
81876: LD_INT 25
81878: PUSH
81879: LD_INT 2
81881: PUSH
81882: EMPTY
81883: LIST
81884: LIST
81885: PUSH
81886: LD_INT 25
81888: PUSH
81889: LD_INT 16
81891: PUSH
81892: EMPTY
81893: LIST
81894: LIST
81895: PUSH
81896: EMPTY
81897: LIST
81898: LIST
81899: LIST
81900: PUSH
81901: EMPTY
81902: LIST
81903: LIST
81904: PPUSH
81905: CALL_OW 72
81909: UNION
81910: ST_TO_ADDR
// if tmp then
81911: LD_VAR 0 4
81915: IFFALSE 81995
// begin tmp := ShrinkArray ( tmp , 3 ) ;
81917: LD_ADDR_VAR 0 4
81921: PUSH
81922: LD_VAR 0 4
81926: PPUSH
81927: LD_INT 3
81929: PPUSH
81930: CALL 58884 0 2
81934: ST_TO_ADDR
// for j in tmp do
81935: LD_ADDR_VAR 0 2
81939: PUSH
81940: LD_VAR 0 4
81944: PUSH
81945: FOR_IN
81946: IFFALSE 81989
// begin if IsInUnit ( j ) then
81948: LD_VAR 0 2
81952: PPUSH
81953: CALL_OW 310
81957: IFFALSE 81968
// ComExit ( j ) ;
81959: LD_VAR 0 2
81963: PPUSH
81964: CALL 58967 0 1
// AddComCollect ( j , x , y ) ;
81968: LD_VAR 0 2
81972: PPUSH
81973: LD_VAR 0 6
81977: PPUSH
81978: LD_VAR 0 7
81982: PPUSH
81983: CALL_OW 177
// end ;
81987: GO 81945
81989: POP
81990: POP
// exit ;
81991: POP
81992: POP
81993: GO 82222
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
81995: LD_ADDR_VAR 0 4
81999: PUSH
82000: LD_INT 22
82002: PUSH
82003: LD_VAR 0 5
82007: PUSH
82008: EMPTY
82009: LIST
82010: LIST
82011: PUSH
82012: LD_INT 91
82014: PUSH
82015: LD_VAR 0 8
82019: PUSH
82020: LD_INT 8
82022: PUSH
82023: EMPTY
82024: LIST
82025: LIST
82026: LIST
82027: PUSH
82028: LD_INT 2
82030: PUSH
82031: LD_INT 34
82033: PUSH
82034: LD_INT 12
82036: PUSH
82037: EMPTY
82038: LIST
82039: LIST
82040: PUSH
82041: LD_INT 34
82043: PUSH
82044: LD_INT 51
82046: PUSH
82047: EMPTY
82048: LIST
82049: LIST
82050: PUSH
82051: LD_INT 34
82053: PUSH
82054: LD_INT 32
82056: PUSH
82057: EMPTY
82058: LIST
82059: LIST
82060: PUSH
82061: LD_INT 34
82063: PUSH
82064: LD_INT 89
82066: PUSH
82067: EMPTY
82068: LIST
82069: LIST
82070: PUSH
82071: EMPTY
82072: LIST
82073: LIST
82074: LIST
82075: LIST
82076: LIST
82077: PUSH
82078: EMPTY
82079: LIST
82080: LIST
82081: LIST
82082: PPUSH
82083: CALL_OW 69
82087: ST_TO_ADDR
// if tmp then
82088: LD_VAR 0 4
82092: IFFALSE 82218
// begin for j in tmp do
82094: LD_ADDR_VAR 0 2
82098: PUSH
82099: LD_VAR 0 4
82103: PUSH
82104: FOR_IN
82105: IFFALSE 82216
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
82107: LD_VAR 0 2
82111: PPUSH
82112: CALL_OW 262
82116: PUSH
82117: LD_INT 3
82119: EQUAL
82120: PUSH
82121: LD_VAR 0 2
82125: PPUSH
82126: CALL_OW 261
82130: PUSH
82131: LD_INT 20
82133: GREATER
82134: OR
82135: PUSH
82136: LD_VAR 0 2
82140: PPUSH
82141: CALL_OW 314
82145: NOT
82146: AND
82147: PUSH
82148: LD_VAR 0 2
82152: PPUSH
82153: CALL_OW 263
82157: PUSH
82158: LD_INT 1
82160: NONEQUAL
82161: PUSH
82162: LD_VAR 0 2
82166: PPUSH
82167: CALL_OW 311
82171: OR
82172: AND
82173: IFFALSE 82214
// begin ComCollect ( j , x , y ) ;
82175: LD_VAR 0 2
82179: PPUSH
82180: LD_VAR 0 6
82184: PPUSH
82185: LD_VAR 0 7
82189: PPUSH
82190: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
82194: LD_VAR 0 2
82198: PPUSH
82199: LD_VAR 0 8
82203: PPUSH
82204: CALL_OW 172
// exit ;
82208: POP
82209: POP
82210: POP
82211: POP
82212: GO 82222
// end ;
82214: GO 82104
82216: POP
82217: POP
// end ; end ;
82218: GO 81593
82220: POP
82221: POP
// end ; end_of_file
82222: PPOPN 9
82224: END
// export ru_radar on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
82225: LD_VAR 0 1
82229: PUSH
82230: LD_INT 200
82232: DOUBLE
82233: GREATEREQUAL
82234: IFFALSE 82242
82236: LD_INT 299
82238: DOUBLE
82239: LESSEQUAL
82240: IFTRUE 82244
82242: GO 82276
82244: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
82245: LD_VAR 0 1
82249: PPUSH
82250: LD_VAR 0 2
82254: PPUSH
82255: LD_VAR 0 3
82259: PPUSH
82260: LD_VAR 0 4
82264: PPUSH
82265: LD_VAR 0 5
82269: PPUSH
82270: CALL 62510 0 5
82274: GO 82353
82276: LD_INT 300
82278: DOUBLE
82279: GREATEREQUAL
82280: IFFALSE 82288
82282: LD_INT 399
82284: DOUBLE
82285: LESSEQUAL
82286: IFTRUE 82290
82288: GO 82352
82290: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
82291: LD_VAR 0 1
82295: PPUSH
82296: LD_VAR 0 2
82300: PPUSH
82301: LD_VAR 0 3
82305: PPUSH
82306: LD_VAR 0 4
82310: PPUSH
82311: LD_VAR 0 5
82315: PPUSH
82316: LD_VAR 0 6
82320: PPUSH
82321: LD_VAR 0 7
82325: PPUSH
82326: LD_VAR 0 8
82330: PPUSH
82331: LD_VAR 0 9
82335: PPUSH
82336: LD_VAR 0 10
82340: PPUSH
82341: LD_VAR 0 11
82345: PPUSH
82346: CALL 78926 0 11
82350: GO 82353
82352: POP
// end ;
82353: PPOPN 11
82355: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
82356: LD_VAR 0 1
82360: PPUSH
82361: LD_VAR 0 2
82365: PPUSH
82366: LD_VAR 0 3
82370: PPUSH
82371: LD_VAR 0 4
82375: PPUSH
82376: LD_VAR 0 5
82380: PPUSH
82381: CALL 62246 0 5
// end ;
82385: PPOPN 5
82387: END
