// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 9694 0 0
// PrepareAmerican ;
  12: CALL 720 0 0
// PrepareRussian ;
  16: CALL 278 0 0
// Action ;
  20: CALL 1986 0 0
// end ;
  24: END
// export debug , currentMissionPrefix ; export joinedToBelkov , hasGnyevko , hasKirilenkova , apeSpotted , attackedByApe , waterfallSpotted , apeRadioKilled , americansDefeated , gnyevkoMeetPokryshkin , followPokryshkin , attackedAllied , burlakAsCommander , activeAmericanScript , gladstoneEscaped , hollandEscaped , frankEscaped , canEnd , loseCounter , someoneGetsHurt ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// currentMissionPrefix := 01_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 01_
  57: ST_TO_ADDR
// waterfallSpotted := false ;
  58: LD_ADDR_EXP 8
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// joinedToBelkov := false ;
  66: LD_ADDR_EXP 3
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// apeSpotted := false ;
  74: LD_ADDR_EXP 6
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// attackedByApe := false ;
  82: LD_ADDR_EXP 7
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// hasGnyevko := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// hasKirilenkova := false ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// apeRadioKilled := false ;
 106: LD_ADDR_EXP 9
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// americansDefeated := false ;
 114: LD_ADDR_EXP 10
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gnyevkoMeetPokryshkin := false ;
 122: LD_ADDR_EXP 11
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// followPokryshkin := false ;
 130: LD_ADDR_EXP 12
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// attackedAllied := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// burlakAsCommander := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// activeAmericanScript := false ;
 154: LD_ADDR_EXP 15
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// gladstoneEscaped := false ;
 162: LD_ADDR_EXP 16
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hollandEscaped := false ;
 170: LD_ADDR_EXP 17
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// frankEscaped := false ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canEnd := false ;
 186: LD_ADDR_EXP 19
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// loseCounter := 0 ;
 194: LD_ADDR_EXP 20
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// someoneGetsHurt := false ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_not , [ f_class , class_fish ] ] ] ) = 0 do
 215: LD_INT 22
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 23
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 25
 240: PUSH
 241: LD_INT 20
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PUSH
 262: LD_INT 0
 264: EQUAL
 265: IFFALSE 277
 267: GO 269
 269: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
 270: LD_STRING ACH_NATURE
 272: PPUSH
 273: CALL_OW 543
 277: END
// export Burlak , Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kurin , Gnyevko , Kirilenkova ; export function PrepareRussian ; var i , tmp ; begin
 278: LD_INT 0
 280: PPUSH
 281: PPUSH
 282: PPUSH
// uc_side := 3 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 3
 290: ST_TO_ADDR
// uc_nation := nation_russian ;
 291: LD_ADDR_OWVAR 21
 295: PUSH
 296: LD_INT 3
 298: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: LD_STRING Burlak
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: LD_STRING 
 312: PPUSH
 313: CALL 10073 0 3
 317: ST_TO_ADDR
// uc_side := 6 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 6
 325: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
 326: LD_ADDR_EXP 29
 330: PUSH
 331: LD_STRING Kurin
 333: PPUSH
 334: LD_INT 0
 336: PPUSH
 337: LD_STRING 
 339: PPUSH
 340: CALL 10073 0 3
 344: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
 345: LD_ADDR_EXP 23
 349: PUSH
 350: LD_STRING Pokryshkin
 352: PPUSH
 353: LD_INT 0
 355: PPUSH
 356: LD_STRING 
 358: PPUSH
 359: CALL 10073 0 3
 363: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ,  ) ;
 364: LD_ADDR_EXP 24
 368: PUSH
 369: LD_STRING Saseda
 371: PPUSH
 372: LD_INT 0
 374: PPUSH
 375: LD_STRING 
 377: PPUSH
 378: CALL 10073 0 3
 382: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ,  ) ;
 383: LD_ADDR_EXP 25
 387: PUSH
 388: LD_STRING Jaworska
 390: PPUSH
 391: LD_INT 0
 393: PPUSH
 394: LD_STRING 
 396: PPUSH
 397: CALL 10073 0 3
 401: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ,  ) ;
 402: LD_ADDR_EXP 26
 406: PUSH
 407: LD_STRING Balei
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 10073 0 3
 420: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
 421: LD_ADDR_EXP 27
 425: PUSH
 426: LD_STRING Belkov
 428: PPUSH
 429: LD_INT 0
 431: PPUSH
 432: LD_STRING 
 434: PPUSH
 435: CALL 10073 0 3
 439: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ,  ) ;
 440: LD_ADDR_EXP 28
 444: PUSH
 445: LD_STRING Jaunzeme
 447: PPUSH
 448: LD_INT 0
 450: PPUSH
 451: LD_STRING 
 453: PPUSH
 454: CALL 10073 0 3
 458: ST_TO_ADDR
// uc_side := 5 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 5
 466: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
 467: LD_ADDR_EXP 30
 471: PUSH
 472: LD_STRING Gnyevko
 474: PPUSH
 475: LD_INT 0
 477: PPUSH
 478: LD_STRING 
 480: PPUSH
 481: CALL 10073 0 3
 485: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ,  ) ;
 486: LD_ADDR_EXP 31
 490: PUSH
 491: LD_STRING Kirilenkova
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_STRING 
 499: PPUSH
 500: CALL 10073 0 3
 504: ST_TO_ADDR
// tmp := [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] ;
 505: LD_ADDR_VAR 0 3
 509: PUSH
 510: LD_EXP 24
 514: PUSH
 515: LD_EXP 25
 519: PUSH
 520: LD_EXP 26
 524: PUSH
 525: LD_EXP 27
 529: PUSH
 530: LD_EXP 28
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: ST_TO_ADDR
// if Difficulty > 1 then
 542: LD_OWVAR 67
 546: PUSH
 547: LD_INT 1
 549: GREATER
 550: IFFALSE 568
// tmp := tmp diff Jaunzeme ;
 552: LD_ADDR_VAR 0 3
 556: PUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_EXP 28
 566: DIFF
 567: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , pokryshkinSpawnArea , false ) ;
 568: LD_EXP 23
 572: PPUSH
 573: LD_INT 5
 575: PPUSH
 576: LD_INT 0
 578: PPUSH
 579: CALL_OW 49
// ComHold ( Pokryshkin ) ;
 583: LD_EXP 23
 587: PPUSH
 588: CALL_OW 140
// for i in tmp do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_VAR 0 3
 601: PUSH
 602: FOR_IN
 603: IFFALSE 655
// begin if not PlaceUnitArea ( i , pokryshkinGuardArea , false ) then
 605: LD_VAR 0 2
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
 620: NOT
 621: IFFALSE 644
// PlaceUnitXYR ( i , 78 , 55 , 3 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 78
 630: PPUSH
 631: LD_INT 55
 633: PPUSH
 634: LD_INT 3
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 50
// ComHold ( i ) ;
 644: LD_VAR 0 2
 648: PPUSH
 649: CALL_OW 140
// end ;
 653: GO 602
 655: POP
 656: POP
// PlaceUnitArea ( Gnyevko , [ gnyevko1Spawn , gnyevko2Spawn , gnyevko3Spawn , gnyevko3Spawn ] [ Difficulty ] , false ) ;
 657: LD_EXP 30
 661: PPUSH
 662: LD_INT 9
 664: PUSH
 665: LD_INT 10
 667: PUSH
 668: LD_INT 11
 670: PUSH
 671: LD_INT 11
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: LD_OWVAR 67
 684: ARRAY
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: CALL_OW 49
// SetLives ( Gnyevko , 500 - ( 50 * Difficulty ) ) ;
 693: LD_EXP 30
 697: PPUSH
 698: LD_INT 500
 700: PUSH
 701: LD_INT 50
 703: PUSH
 704: LD_OWVAR 67
 708: MUL
 709: MINUS
 710: PPUSH
 711: CALL_OW 234
// end ; end_of_file
 715: LD_VAR 0 1
 719: RET
// export Brown , Gladstone , Holland , Frank ; export amApes ; export function PrepareAmerican ; var i , ape ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
 724: PPUSH
// uc_side := 1 ;
 725: LD_ADDR_OWVAR 20
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// uc_nation := nation_american ;
 733: LD_ADDR_OWVAR 21
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// hc_class := class_soldier ;
 741: LD_ADDR_OWVAR 28
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// hc_sex := sex_male ;
 749: LD_ADDR_OWVAR 27
 753: PUSH
 754: LD_INT 1
 756: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 757: LD_ADDR_OWVAR 33
 761: PUSH
 762: LD_STRING AmGalRemake
 764: ST_TO_ADDR
// hc_face_number := 1 ;
 765: LD_ADDR_OWVAR 34
 769: PUSH
 770: LD_INT 1
 772: ST_TO_ADDR
// hc_name := Charles Brown ;
 773: LD_ADDR_OWVAR 26
 777: PUSH
 778: LD_STRING Charles Brown
 780: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
 781: LD_ADDR_OWVAR 29
 785: PUSH
 786: LD_INT 12
 788: PUSH
 789: LD_INT 11
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
 796: LD_ADDR_OWVAR 30
 800: PUSH
 801: LD_INT 3
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
 819: LD_ADDR_OWVAR 31
 823: PUSH
 824: LD_INT 3
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// Brown := CreateHuman ;
 842: LD_ADDR_EXP 32
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// hc_sex := sex_female ;
 852: LD_ADDR_OWVAR 27
 856: PUSH
 857: LD_INT 2
 859: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 860: LD_ADDR_OWVAR 33
 864: PUSH
 865: LD_STRING AmGalRemake
 867: ST_TO_ADDR
// hc_face_number := 2 ;
 868: LD_ADDR_OWVAR 34
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// hc_name := Johanna Holland ;
 876: LD_ADDR_OWVAR 26
 880: PUSH
 881: LD_STRING Johanna Holland
 883: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 884: LD_ADDR_OWVAR 29
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 10
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
 899: LD_ADDR_OWVAR 30
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: LD_INT 0
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: ST_TO_ADDR
// hc_skills := [ Difficulty , 0 , 1 , 2 ] ;
 922: LD_ADDR_OWVAR 31
 926: PUSH
 927: LD_OWVAR 67
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 2
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: ST_TO_ADDR
// Holland := CreateHuman ;
 947: LD_ADDR_EXP 34
 951: PUSH
 952: CALL_OW 44
 956: ST_TO_ADDR
// SetDir ( Holland , 2 ) ;
 957: LD_EXP 34
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: CALL_OW 233
// PlaceHumanInUnit ( Holland , usBun1 ) ;
 969: LD_EXP 34
 973: PPUSH
 974: LD_INT 3
 976: PPUSH
 977: CALL_OW 52
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_STRING Gladstone
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: LD_STRING 
 994: PPUSH
 995: CALL 10073 0 3
 999: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , usLab ) ;
1000: LD_EXP 33
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: CALL_OW 52
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: DOUBLE
1018: LD_INT 1
1020: DEC
1021: ST_TO_ADDR
1022: LD_INT 4
1024: PUSH
1025: LD_INT 5
1027: PUSH
1028: LD_INT 6
1030: PUSH
1031: LD_INT 7
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_OWVAR 67
1044: ARRAY
1045: PUSH
1046: FOR_TO
1047: IFFALSE 1100
// begin PrepareApemanEngineer ( ) ;
1049: CALL 44045 0 0
// ape := CreateHuman ;
1053: LD_ADDR_VAR 0 3
1057: PUSH
1058: CALL_OW 44
1062: ST_TO_ADDR
// PlaceUnitArea ( ape , usApeSpawn , false ) ;
1063: LD_VAR 0 3
1067: PPUSH
1068: LD_INT 13
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 49
// amApes := Join ( amApes , ape ) ;
1078: LD_ADDR_EXP 36
1082: PUSH
1083: LD_EXP 36
1087: PPUSH
1088: LD_VAR 0 3
1092: PPUSH
1093: CALL 47940 0 2
1097: ST_TO_ADDR
// end ;
1098: GO 1046
1100: POP
1101: POP
// SetTag ( amApes [ 1 ] , tApeEng ) ;
1102: LD_EXP 36
1106: PUSH
1107: LD_INT 1
1109: ARRAY
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 109
// end ;
1118: LD_VAR 0 1
1122: RET
// every 0 0$20 trigger Difficulty > 2 and burlakAsCommander do
1123: LD_OWVAR 67
1127: PUSH
1128: LD_INT 2
1130: GREATER
1131: PUSH
1132: LD_EXP 14
1136: AND
1137: IFFALSE 1311
1139: GO 1141
1141: DISABLE
// begin uc_side := 1 ;
1142: LD_ADDR_OWVAR 20
1146: PUSH
1147: LD_INT 1
1149: ST_TO_ADDR
// uc_nation := nation_american ;
1150: LD_ADDR_OWVAR 21
1154: PUSH
1155: LD_INT 1
1157: ST_TO_ADDR
// hc_class := class_soldier ;
1158: LD_ADDR_OWVAR 28
1162: PUSH
1163: LD_INT 1
1165: ST_TO_ADDR
// hc_sex := sex_male ;
1166: LD_ADDR_OWVAR 27
1170: PUSH
1171: LD_INT 1
1173: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1174: LD_ADDR_OWVAR 33
1178: PUSH
1179: LD_STRING SecondCharsGal
1181: ST_TO_ADDR
// hc_face_number := 50 ;
1182: LD_ADDR_OWVAR 34
1186: PUSH
1187: LD_INT 50
1189: ST_TO_ADDR
// hc_name := Frank Hughes ;
1190: LD_ADDR_OWVAR 26
1194: PUSH
1195: LD_STRING Frank Hughes
1197: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
1198: LD_ADDR_OWVAR 29
1202: PUSH
1203: LD_INT 10
1205: PUSH
1206: LD_INT 10
1208: PUSH
1209: EMPTY
1210: LIST
1211: LIST
1212: ST_TO_ADDR
// hc_basic_skills := [ 1 , 2 , 0 , 0 ] ;
1213: LD_ADDR_OWVAR 30
1217: PUSH
1218: LD_INT 1
1220: PUSH
1221: LD_INT 2
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: LD_INT 0
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: LIST
1234: LIST
1235: ST_TO_ADDR
// hc_skills := [ Difficulty , 2 , 0 , 0 ] ;
1236: LD_ADDR_OWVAR 31
1240: PUSH
1241: LD_OWVAR 67
1245: PUSH
1246: LD_INT 2
1248: PUSH
1249: LD_INT 0
1251: PUSH
1252: LD_INT 0
1254: PUSH
1255: EMPTY
1256: LIST
1257: LIST
1258: LIST
1259: LIST
1260: ST_TO_ADDR
// Frank := CreateHuman ;
1261: LD_ADDR_EXP 35
1265: PUSH
1266: CALL_OW 44
1270: ST_TO_ADDR
// PlaceUnitXY ( Frank , 77 , 19 , true ) ;
1271: LD_EXP 35
1275: PPUSH
1276: LD_INT 77
1278: PPUSH
1279: LD_INT 19
1281: PPUSH
1282: LD_INT 1
1284: PPUSH
1285: CALL_OW 48
// wait ( 0 0$2 ) ;
1289: LD_INT 70
1291: PPUSH
1292: CALL_OW 67
// ComAgressiveMove ( Frank , 50 , 21 ) ;
1296: LD_EXP 35
1300: PPUSH
1301: LD_INT 50
1303: PPUSH
1304: LD_INT 21
1306: PPUSH
1307: CALL_OW 114
// end ;
1311: END
// every 10 trigger activeAmericanScript do var i , eng , enemyInRange , tmp ;
1312: LD_EXP 15
1316: IFFALSE 1764
1318: GO 1320
1320: DISABLE
1321: LD_INT 0
1323: PPUSH
1324: PPUSH
1325: PPUSH
1326: PPUSH
// begin enable ;
1327: ENABLE
// tmp := UnitFilter ( amApes , [ [ f_not , [ f_tag , tApeEng ] ] ] ) ;
1328: LD_ADDR_VAR 0 4
1332: PUSH
1333: LD_EXP 36
1337: PPUSH
1338: LD_INT 3
1340: PUSH
1341: LD_INT 120
1343: PUSH
1344: LD_INT 2
1346: PUSH
1347: EMPTY
1348: LIST
1349: LIST
1350: PUSH
1351: EMPTY
1352: LIST
1353: LIST
1354: PUSH
1355: EMPTY
1356: LIST
1357: PPUSH
1358: CALL_OW 72
1362: ST_TO_ADDR
// eng := UnitFilter ( amApes , [ f_tag , tApeEng ] ) ;
1363: LD_ADDR_VAR 0 2
1367: PUSH
1368: LD_EXP 36
1372: PPUSH
1373: LD_INT 120
1375: PUSH
1376: LD_INT 2
1378: PUSH
1379: EMPTY
1380: LIST
1381: LIST
1382: PPUSH
1383: CALL_OW 72
1387: ST_TO_ADDR
// enemyInRange := FilterUnitsInArea ( amBaseArea , [ f_side , 3 ] ) ;
1388: LD_ADDR_VAR 0 3
1392: PUSH
1393: LD_INT 17
1395: PPUSH
1396: LD_INT 22
1398: PUSH
1399: LD_INT 3
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PPUSH
1406: CALL_OW 70
1410: ST_TO_ADDR
// if IsOk ( Frank ) then
1411: LD_EXP 35
1415: PPUSH
1416: CALL_OW 302
1420: IFFALSE 1442
// tmp := Join ( tmp , Frank ) ;
1422: LD_ADDR_VAR 0 4
1426: PUSH
1427: LD_VAR 0 4
1431: PPUSH
1432: LD_EXP 35
1436: PPUSH
1437: CALL 47940 0 2
1441: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
1442: LD_VAR 0 4
1446: PPUSH
1447: LD_INT 3
1449: PUSH
1450: LD_INT 24
1452: PUSH
1453: LD_INT 1000
1455: PUSH
1456: EMPTY
1457: LIST
1458: LIST
1459: PUSH
1460: EMPTY
1461: LIST
1462: LIST
1463: PPUSH
1464: CALL_OW 72
1468: IFFALSE 1507
// begin if IsInUnit ( Gladstone ) then
1470: LD_EXP 33
1474: PPUSH
1475: CALL_OW 310
1479: IFFALSE 1505
// begin ComExitBuilding ( Gladstone ) ;
1481: LD_EXP 33
1485: PPUSH
1486: CALL_OW 122
// AddComMoveXY ( Gladstone , 39 , 7 ) ;
1490: LD_EXP 33
1494: PPUSH
1495: LD_INT 39
1497: PPUSH
1498: LD_INT 7
1500: PPUSH
1501: CALL_OW 171
// end ; end else
1505: GO 1531
// if not IsInUnit ( Gladstone ) then
1507: LD_EXP 33
1511: PPUSH
1512: CALL_OW 310
1516: NOT
1517: IFFALSE 1531
// ComEnterUnit ( Gladstone , usLab ) ;
1519: LD_EXP 33
1523: PPUSH
1524: LD_INT 2
1526: PPUSH
1527: CALL_OW 120
// if eng then
1531: LD_VAR 0 2
1535: IFFALSE 1604
// if GetLives ( usBun1 ) < 1000 then
1537: LD_INT 3
1539: PPUSH
1540: CALL_OW 256
1544: PUSH
1545: LD_INT 1000
1547: LESS
1548: IFFALSE 1564
// ComRepairBuilding ( eng , usBun1 ) else
1550: LD_VAR 0 2
1554: PPUSH
1555: LD_INT 3
1557: PPUSH
1558: CALL_OW 130
1562: GO 1604
// if GetDistUnitXY ( eng [ 1 ] , 37 , 9 ) > 5 then
1564: LD_VAR 0 2
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_INT 37
1575: PPUSH
1576: LD_INT 9
1578: PPUSH
1579: CALL_OW 297
1583: PUSH
1584: LD_INT 5
1586: GREATER
1587: IFFALSE 1604
// ComMoveXY ( eng , 37 , 9 ) ;
1589: LD_VAR 0 2
1593: PPUSH
1594: LD_INT 37
1596: PPUSH
1597: LD_INT 9
1599: PPUSH
1600: CALL_OW 111
// for i in tmp do
1604: LD_ADDR_VAR 0 1
1608: PUSH
1609: LD_VAR 0 4
1613: PUSH
1614: FOR_IN
1615: IFFALSE 1762
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1617: LD_VAR 0 1
1621: PPUSH
1622: CALL_OW 256
1626: PUSH
1627: LD_INT 600
1629: LESS
1630: PUSH
1631: LD_VAR 0 1
1635: PPUSH
1636: LD_INT 37
1638: PPUSH
1639: LD_INT 9
1641: PPUSH
1642: CALL_OW 297
1646: PUSH
1647: LD_INT 5
1649: GREATER
1650: AND
1651: IFFALSE 1670
// begin ComMoveXY ( i , 37 , 9 ) ;
1653: LD_VAR 0 1
1657: PPUSH
1658: LD_INT 37
1660: PPUSH
1661: LD_INT 9
1663: PPUSH
1664: CALL_OW 111
// continue ;
1668: GO 1614
// end ; if not enemyInRange and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1670: LD_VAR 0 3
1674: NOT
1675: PUSH
1676: LD_VAR 0 1
1680: PPUSH
1681: LD_INT 37
1683: PPUSH
1684: LD_INT 9
1686: PPUSH
1687: CALL_OW 297
1691: PUSH
1692: LD_INT 5
1694: GREATER
1695: AND
1696: IFFALSE 1715
// begin ComMoveXY ( i , 37 , 9 ) ;
1698: LD_VAR 0 1
1702: PPUSH
1703: LD_INT 37
1705: PPUSH
1706: LD_INT 9
1708: PPUSH
1709: CALL_OW 111
// continue ;
1713: GO 1614
// end ; if enemyInRange and GetLives ( i ) = 1000 then
1715: LD_VAR 0 3
1719: PUSH
1720: LD_VAR 0 1
1724: PPUSH
1725: CALL_OW 256
1729: PUSH
1730: LD_INT 1000
1732: EQUAL
1733: AND
1734: IFFALSE 1760
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInRange , i ) ) ;
1736: LD_VAR 0 1
1740: PPUSH
1741: LD_VAR 0 3
1745: PPUSH
1746: LD_VAR 0 1
1750: PPUSH
1751: CALL_OW 74
1755: PPUSH
1756: CALL_OW 115
// end ;
1760: GO 1614
1762: POP
1763: POP
// end ; end_of_file
1764: PPOPN 4
1766: END
// every 0 0$1 trigger not attackedByApe do var un ;
1767: LD_EXP 7
1771: NOT
1772: IFFALSE 1846
1774: GO 1776
1776: DISABLE
1777: LD_INT 0
1779: PPUSH
// begin enable ;
1780: ENABLE
// un := UnitShoot ( Burlak ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_EXP 22
1790: PPUSH
1791: CALL_OW 504
1795: ST_TO_ADDR
// if un > - 1 then
1796: LD_VAR 0 1
1800: PUSH
1801: LD_INT 1
1803: NEG
1804: GREATER
1805: IFFALSE 1846
// if GetSide ( un ) = 0 and GetClass ( un ) = class_apeman then
1807: LD_VAR 0 1
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 0
1819: EQUAL
1820: PUSH
1821: LD_VAR 0 1
1825: PPUSH
1826: CALL_OW 257
1830: PUSH
1831: LD_INT 12
1833: EQUAL
1834: AND
1835: IFFALSE 1846
// begin attackedByApe := true ;
1837: LD_ADDR_EXP 7
1841: PUSH
1842: LD_INT 1
1844: ST_TO_ADDR
// disable ;
1845: DISABLE
// end ; end ;
1846: PPOPN 1
1848: END
// on UnitDestroyed ( un ) do begin if not apeRadioKilled and GetTag ( un ) = tApeRadio then
1849: LD_EXP 9
1853: NOT
1854: PUSH
1855: LD_VAR 0 1
1859: PPUSH
1860: CALL_OW 110
1864: PUSH
1865: LD_INT 1
1867: EQUAL
1868: AND
1869: IFFALSE 1881
// apeRadioKilled := un ;
1871: LD_ADDR_EXP 9
1875: PUSH
1876: LD_VAR 0 1
1880: ST_TO_ADDR
// if GetSide ( un ) = 3 and GetType ( un ) = unit_human then
1881: LD_VAR 0 1
1885: PPUSH
1886: CALL_OW 255
1890: PUSH
1891: LD_INT 3
1893: EQUAL
1894: PUSH
1895: LD_VAR 0 1
1899: PPUSH
1900: CALL_OW 247
1904: PUSH
1905: LD_INT 1
1907: EQUAL
1908: AND
1909: IFFALSE 1926
// loseCounter := Inc ( loseCounter ) ;
1911: LD_ADDR_EXP 20
1915: PUSH
1916: LD_EXP 20
1920: PPUSH
1921: CALL 49301 0 1
1925: ST_TO_ADDR
// end ;
1926: PPOPN 1
1928: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 then
1929: LD_VAR 0 1
1933: PPUSH
1934: CALL_OW 255
1938: PUSH
1939: LD_INT 3
1941: EQUAL
1942: IFFALSE 1952
// someoneGetsHurt := true ;
1944: LD_ADDR_EXP 21
1948: PUSH
1949: LD_INT 1
1951: ST_TO_ADDR
// end ;
1952: PPOPN 1
1954: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
1955: LD_VAR 0 1
1959: PUSH
1960: LD_INT 3
1962: EQUAL
1963: PUSH
1964: LD_VAR 0 2
1968: PUSH
1969: LD_INT 6
1971: EQUAL
1972: AND
1973: IFFALSE 1983
// attackedAllied := true ;
1975: LD_ADDR_EXP 13
1979: PUSH
1980: LD_INT 1
1982: ST_TO_ADDR
// end ; end_of_file
1983: PPOPN 2
1985: END
// export function Action ; begin
1986: LD_INT 0
1988: PPUSH
// InGameOn ;
1989: CALL_OW 8
// CenterNowOnXY ( 78 , 85 ) ;
1993: LD_INT 78
1995: PPUSH
1996: LD_INT 85
1998: PPUSH
1999: CALL_OW 86
// wait ( 0 0$2 ) ;
2003: LD_INT 70
2005: PPUSH
2006: CALL_OW 67
// PlaceUnitXYD ( Burlak , 78 , 85 , 2 , true ) ;
2010: LD_EXP 22
2014: PPUSH
2015: LD_INT 78
2017: PPUSH
2018: LD_INT 85
2020: PPUSH
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL 50080 0 5
// ComHold ( Burlak ) ;
2031: LD_EXP 22
2035: PPUSH
2036: CALL_OW 140
// wait ( 0 0$3 ) ;
2040: LD_INT 105
2042: PPUSH
2043: CALL_OW 67
// ComMoveXY ( Burlak , 79 , 89 ) ;
2047: LD_EXP 22
2051: PPUSH
2052: LD_INT 79
2054: PPUSH
2055: LD_INT 89
2057: PPUSH
2058: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2062: LD_INT 18
2064: PPUSH
2065: CALL_OW 67
// Say ( Burlak , D1-Bur-1 ) ;
2069: LD_EXP 22
2073: PPUSH
2074: LD_STRING D1-Bur-1
2076: PPUSH
2077: CALL_OW 88
// ComMoveXY ( Burlak , 81 , 87 ) ;
2081: LD_EXP 22
2085: PPUSH
2086: LD_INT 81
2088: PPUSH
2089: LD_INT 87
2091: PPUSH
2092: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2096: LD_INT 10
2098: PPUSH
2099: CALL_OW 67
// Say ( Burlak , D1-Bur-1a ) ;
2103: LD_EXP 22
2107: PPUSH
2108: LD_STRING D1-Bur-1a
2110: PPUSH
2111: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 90 ) ;
2115: LD_EXP 22
2119: PPUSH
2120: LD_INT 85
2122: PPUSH
2123: LD_INT 90
2125: PPUSH
2126: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2130: LD_INT 18
2132: PPUSH
2133: CALL_OW 67
// Say ( Burlak , D1-Bur-1b ) ;
2137: LD_EXP 22
2141: PPUSH
2142: LD_STRING D1-Bur-1b
2144: PPUSH
2145: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 87 ) ;
2149: LD_EXP 22
2153: PPUSH
2154: LD_INT 85
2156: PPUSH
2157: LD_INT 87
2159: PPUSH
2160: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2164: LD_INT 10
2166: PPUSH
2167: CALL_OW 67
// InGameOff ;
2171: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2175: LD_STRING M1
2177: PPUSH
2178: CALL_OW 337
// SaveForQuickRestart ;
2182: CALL_OW 22
// if debug then
2186: LD_EXP 1
2190: IFFALSE 2199
// FogOff ( 3 ) ;
2192: LD_INT 3
2194: PPUSH
2195: CALL_OW 344
// wait ( 0 0$10 - ( 0 0$2 * Difficulty ) ) ;
2199: LD_INT 350
2201: PUSH
2202: LD_INT 70
2204: PUSH
2205: LD_OWVAR 67
2209: MUL
2210: MINUS
2211: PPUSH
2212: CALL_OW 67
// if GetDistUnitXY ( Burlak , 80 , 87 ) < 8 then
2216: LD_EXP 22
2220: PPUSH
2221: LD_INT 80
2223: PPUSH
2224: LD_INT 87
2226: PPUSH
2227: CALL_OW 297
2231: PUSH
2232: LD_INT 8
2234: LESS
2235: IFFALSE 2241
// SendApemanAttack ;
2237: CALL 9425 0 0
// end ;
2241: LD_VAR 0 1
2245: RET
// every 0 0$2 trigger IsInArea ( Burlak , waterfallArea ) do
2246: LD_EXP 22
2250: PPUSH
2251: LD_INT 6
2253: PPUSH
2254: CALL_OW 308
2258: IFFALSE 2300
2260: GO 2262
2262: DISABLE
// begin waterfallSpotted := true ;
2263: LD_ADDR_EXP 8
2267: PUSH
2268: LD_INT 1
2270: ST_TO_ADDR
// CenterOnXY ( 75 , 89 ) ;
2271: LD_INT 75
2273: PPUSH
2274: LD_INT 89
2276: PPUSH
2277: CALL_OW 84
// wait ( 0 0$0.2 ) ;
2281: LD_INT 7
2283: PPUSH
2284: CALL_OW 67
// Say ( Burlak , DWaterfall-Bur-1 ) ;
2288: LD_EXP 22
2292: PPUSH
2293: LD_STRING DWaterfall-Bur-1
2295: PPUSH
2296: CALL_OW 88
// end ;
2300: END
// every 0 0$1 trigger GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) < 6 do
2301: LD_EXP 22
2305: PPUSH
2306: LD_INT 25
2308: PUSH
2309: LD_INT 12
2311: PUSH
2312: EMPTY
2313: LIST
2314: LIST
2315: PPUSH
2316: CALL_OW 69
2320: PPUSH
2321: LD_EXP 22
2325: PPUSH
2326: CALL_OW 74
2330: PPUSH
2331: CALL_OW 296
2335: PUSH
2336: LD_INT 6
2338: LESS
2339: IFFALSE 2430
2341: GO 2343
2343: DISABLE
// begin apeSpotted := true ;
2344: LD_ADDR_EXP 6
2348: PUSH
2349: LD_INT 1
2351: ST_TO_ADDR
// if joinedToBelkov then
2352: LD_EXP 3
2356: IFFALSE 2360
// exit ;
2358: GO 2430
// ComTurnUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) ;
2360: LD_EXP 22
2364: PPUSH
2365: LD_INT 25
2367: PUSH
2368: LD_INT 12
2370: PUSH
2371: EMPTY
2372: LIST
2373: LIST
2374: PPUSH
2375: CALL_OW 69
2379: PPUSH
2380: LD_EXP 22
2384: PPUSH
2385: CALL_OW 74
2389: PPUSH
2390: CALL_OW 119
// wait ( 0 0$0.3 ) ;
2394: LD_INT 10
2396: PPUSH
2397: CALL_OW 67
// DialogueOn ;
2401: CALL_OW 6
// CenterNowOnUnits ( Burlak ) ;
2405: LD_EXP 22
2409: PPUSH
2410: CALL_OW 87
// Say ( Burlak , D2-Bur-1 ) ;
2414: LD_EXP 22
2418: PPUSH
2419: LD_STRING D2-Bur-1
2421: PPUSH
2422: CALL_OW 88
// DialogueOff ;
2426: CALL_OW 7
// end ;
2430: END
// every 0 0$1 trigger attackedByApe do
2431: LD_EXP 7
2435: IFFALSE 2459
2437: GO 2439
2439: DISABLE
// begin wait ( 0 0$0.3 ) ;
2440: LD_INT 10
2442: PPUSH
2443: CALL_OW 67
// Say ( Burlak , D2-Bur-1a ) ;
2447: LD_EXP 22
2451: PPUSH
2452: LD_STRING D2-Bur-1a
2454: PPUSH
2455: CALL_OW 88
// end ;
2459: END
// every 0 0$2 trigger SeeXY ( 3 , 130 , 97 ) and GetDistUnitXY ( Burlak , 130 , 97 ) < 6 and not joinedToBelkov and not hasGnyevko do
2460: LD_INT 3
2462: PPUSH
2463: LD_INT 130
2465: PPUSH
2466: LD_INT 97
2468: PPUSH
2469: CALL_OW 293
2473: PUSH
2474: LD_EXP 22
2478: PPUSH
2479: LD_INT 130
2481: PPUSH
2482: LD_INT 97
2484: PPUSH
2485: CALL_OW 297
2489: PUSH
2490: LD_INT 6
2492: LESS
2493: AND
2494: PUSH
2495: LD_EXP 3
2499: NOT
2500: AND
2501: PUSH
2502: LD_EXP 4
2506: NOT
2507: AND
2508: IFFALSE 2533
2510: GO 2512
2512: DISABLE
// begin DialogueOn ;
2513: CALL_OW 6
// Say ( Burlak , DCorpse-Bur-1 ) ;
2517: LD_EXP 22
2521: PPUSH
2522: LD_STRING DCorpse-Bur-1
2524: PPUSH
2525: CALL_OW 88
// DialogueOff ;
2529: CALL_OW 7
// end ;
2533: END
// every 0 0$1 trigger apeRadioKilled do var un , tmp , tmp2 ;
2534: LD_EXP 9
2538: IFFALSE 2920
2540: GO 2542
2542: DISABLE
2543: LD_INT 0
2545: PPUSH
2546: PPUSH
2547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , apeRadioKilled , 12 ] ] ) ;
2548: LD_ADDR_VAR 0 2
2552: PUSH
2553: LD_INT 22
2555: PUSH
2556: LD_INT 3
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: PUSH
2563: LD_INT 21
2565: PUSH
2566: LD_INT 1
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 91
2575: PUSH
2576: LD_EXP 9
2580: PUSH
2581: LD_INT 12
2583: PUSH
2584: EMPTY
2585: LIST
2586: LIST
2587: LIST
2588: PUSH
2589: EMPTY
2590: LIST
2591: LIST
2592: LIST
2593: PPUSH
2594: CALL_OW 69
2598: ST_TO_ADDR
// if not tmp or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
2599: LD_VAR 0 2
2603: NOT
2604: PUSH
2605: LD_INT 22
2607: PUSH
2608: LD_INT 3
2610: PUSH
2611: EMPTY
2612: LIST
2613: LIST
2614: PUSH
2615: LD_INT 21
2617: PUSH
2618: LD_INT 1
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PPUSH
2629: CALL_OW 69
2633: PUSH
2634: LD_INT 1
2636: EQUAL
2637: OR
2638: IFFALSE 2642
// exit ;
2640: GO 2920
// tmp2 := [ Kirilenkova , Belkov , Saseda , Jaworska ] ;
2642: LD_ADDR_VAR 0 3
2646: PUSH
2647: LD_EXP 31
2651: PUSH
2652: LD_EXP 27
2656: PUSH
2657: LD_EXP 24
2661: PUSH
2662: LD_EXP 25
2666: PUSH
2667: EMPTY
2668: LIST
2669: LIST
2670: LIST
2671: LIST
2672: ST_TO_ADDR
// Randomize ;
2673: CALL_OW 10
// un := tmp2 [ rand ( 1 , Count ( tmp2 ) ) ] ;
2677: LD_ADDR_VAR 0 1
2681: PUSH
2682: LD_VAR 0 3
2686: PUSH
2687: LD_INT 1
2689: PPUSH
2690: LD_VAR 0 3
2694: PPUSH
2695: CALL 12259 0 1
2699: PPUSH
2700: CALL_OW 12
2704: ARRAY
2705: ST_TO_ADDR
// if not un in tmp then
2706: LD_VAR 0 1
2710: PUSH
2711: LD_VAR 0 2
2715: IN
2716: NOT
2717: IFFALSE 2729
// un := Burlak ;
2719: LD_ADDR_VAR 0 1
2723: PUSH
2724: LD_EXP 22
2728: ST_TO_ADDR
// DialogueOn ;
2729: CALL_OW 6
// CenterNowOnUnits ( apeRadioKilled ) ;
2733: LD_EXP 9
2737: PPUSH
2738: CALL_OW 87
// case un of Kirilenkova :
2742: LD_VAR 0 1
2746: PUSH
2747: LD_EXP 31
2751: DOUBLE
2752: EQUAL
2753: IFTRUE 2757
2755: GO 2772
2757: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; Belkov :
2758: LD_EXP 31
2762: PPUSH
2763: LD_STRING D2a-Kir-1
2765: PPUSH
2766: CALL_OW 88
2770: GO 2873
2772: LD_EXP 27
2776: DOUBLE
2777: EQUAL
2778: IFTRUE 2782
2780: GO 2797
2782: POP
// Say ( Belkov , D2a-Bel-1 ) ; Burlak :
2783: LD_EXP 27
2787: PPUSH
2788: LD_STRING D2a-Bel-1
2790: PPUSH
2791: CALL_OW 88
2795: GO 2873
2797: LD_EXP 22
2801: DOUBLE
2802: EQUAL
2803: IFTRUE 2807
2805: GO 2822
2807: POP
// Say ( Burlak , D2a-Bur-1 ) ; Jaworska :
2808: LD_EXP 22
2812: PPUSH
2813: LD_STRING D2a-Bur-1
2815: PPUSH
2816: CALL_OW 88
2820: GO 2873
2822: LD_EXP 25
2826: DOUBLE
2827: EQUAL
2828: IFTRUE 2832
2830: GO 2847
2832: POP
// Say ( Jaworska , D2a-RFSol1-1 ) ; Saseda :
2833: LD_EXP 25
2837: PPUSH
2838: LD_STRING D2a-RFSol1-1
2840: PPUSH
2841: CALL_OW 88
2845: GO 2873
2847: LD_EXP 24
2851: DOUBLE
2852: EQUAL
2853: IFTRUE 2857
2855: GO 2872
2857: POP
// Say ( Saseda , D2a-RSol1-1 ) ; end ;
2858: LD_EXP 24
2862: PPUSH
2863: LD_STRING D2a-RSol1-1
2865: PPUSH
2866: CALL_OW 88
2870: GO 2873
2872: POP
// if hasGnyevko then
2873: LD_EXP 4
2877: IFFALSE 2904
// begin if IsOk ( Gnyevko ) then
2879: LD_EXP 30
2883: PPUSH
2884: CALL_OW 302
2888: IFFALSE 2902
// Say ( Gnyevko , D2a-Gny-1 ) ;
2890: LD_EXP 30
2894: PPUSH
2895: LD_STRING D2a-Gny-1
2897: PPUSH
2898: CALL_OW 88
// end else
2902: GO 2916
// Say ( Burlak , D2a-Bur-2 ) ;
2904: LD_EXP 22
2908: PPUSH
2909: LD_STRING D2a-Bur-2
2911: PPUSH
2912: CALL_OW 88
// DialogueOff ;
2916: CALL_OW 7
// end ;
2920: PPOPN 3
2922: END
// every 0 0$1 do var un , tmp ;
2923: GO 2925
2925: DISABLE
2926: LD_INT 0
2928: PPUSH
2929: PPUSH
// begin if Difficulty = 1 then
2930: LD_OWVAR 67
2934: PUSH
2935: LD_INT 1
2937: EQUAL
2938: IFFALSE 2942
// exit ;
2940: GO 3083
// wait ( 7 7$00 - ( 1 1$00 * Difficulty ) ) ;
2942: LD_INT 14700
2944: PUSH
2945: LD_INT 2100
2947: PUSH
2948: LD_OWVAR 67
2952: MUL
2953: MINUS
2954: PPUSH
2955: CALL_OW 67
// if hasGnyevko then
2959: LD_EXP 4
2963: IFFALSE 2967
// exit ;
2965: GO 3083
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) ;
2967: LD_ADDR_VAR 0 2
2971: PUSH
2972: LD_INT 22
2974: PUSH
2975: LD_INT 0
2977: PUSH
2978: EMPTY
2979: LIST
2980: LIST
2981: PUSH
2982: LD_INT 25
2984: PUSH
2985: LD_INT 14
2987: PUSH
2988: EMPTY
2989: LIST
2990: LIST
2991: PUSH
2992: EMPTY
2993: LIST
2994: LIST
2995: PPUSH
2996: CALL_OW 69
3000: ST_TO_ADDR
// un := NearestUnitToUnit ( tmp , Gnyevko ) ;
3001: LD_ADDR_VAR 0 1
3005: PUSH
3006: LD_VAR 0 2
3010: PPUSH
3011: LD_EXP 30
3015: PPUSH
3016: CALL_OW 74
3020: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3021: LD_INT 35
3023: PPUSH
3024: CALL_OW 67
// if hasGnyevko then
3028: LD_EXP 4
3032: IFFALSE 3045
// begin ComFree ( un ) ;
3034: LD_VAR 0 1
3038: PPUSH
3039: CALL_OW 139
// exit ;
3043: GO 3083
// end ; if not HasTask ( un ) then
3045: LD_VAR 0 1
3049: PPUSH
3050: CALL_OW 314
3054: NOT
3055: IFFALSE 3071
// ComAttackUnit ( un , Gnyevko ) ;
3057: LD_VAR 0 1
3061: PPUSH
3062: LD_EXP 30
3066: PPUSH
3067: CALL_OW 115
// until not IsOk ( un ) ;
3071: LD_VAR 0 1
3075: PPUSH
3076: CALL_OW 302
3080: NOT
3081: IFFALSE 3021
// end ;
3083: PPOPN 2
3085: END
// every 0 0$2 trigger See ( 3 , Gnyevko ) and IsOk ( Gnyevko ) and not hasGnyevko do var un ;
3086: LD_INT 3
3088: PPUSH
3089: LD_EXP 30
3093: PPUSH
3094: CALL_OW 292
3098: PUSH
3099: LD_EXP 30
3103: PPUSH
3104: CALL_OW 302
3108: AND
3109: PUSH
3110: LD_EXP 4
3114: NOT
3115: AND
3116: IFFALSE 3539
3118: GO 3120
3120: DISABLE
3121: LD_INT 0
3123: PPUSH
// begin hasGnyevko := true ;
3124: LD_ADDR_EXP 4
3128: PUSH
3129: LD_INT 1
3131: ST_TO_ADDR
// un := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
3132: LD_ADDR_VAR 0 1
3136: PUSH
3137: LD_INT 22
3139: PUSH
3140: LD_INT 3
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: PUSH
3147: LD_INT 21
3149: PUSH
3150: LD_INT 1
3152: PUSH
3153: EMPTY
3154: LIST
3155: LIST
3156: PUSH
3157: EMPTY
3158: LIST
3159: LIST
3160: PPUSH
3161: CALL_OW 69
3165: PPUSH
3166: LD_EXP 30
3170: PPUSH
3171: CALL_OW 74
3175: ST_TO_ADDR
// if not un in [ Burlak , Saseda , Jaworska ] then
3176: LD_VAR 0 1
3180: PUSH
3181: LD_EXP 22
3185: PUSH
3186: LD_EXP 24
3190: PUSH
3191: LD_EXP 25
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: LIST
3200: IN
3201: NOT
3202: IFFALSE 3214
// un := Burlak ;
3204: LD_ADDR_VAR 0 1
3208: PUSH
3209: LD_EXP 22
3213: ST_TO_ADDR
// ComTurnUnit ( Gnyevko , un ) ;
3214: LD_EXP 30
3218: PPUSH
3219: LD_VAR 0 1
3223: PPUSH
3224: CALL_OW 119
// wait ( 0 0$0.3 ) ;
3228: LD_INT 10
3230: PPUSH
3231: CALL_OW 67
// DialogueOn ;
3235: CALL_OW 6
// CenterNowOnUnits ( Gnyevko ) ;
3239: LD_EXP 30
3243: PPUSH
3244: CALL_OW 87
// case un of Burlak :
3248: LD_VAR 0 1
3252: PUSH
3253: LD_EXP 22
3257: DOUBLE
3258: EQUAL
3259: IFTRUE 3263
3261: GO 3278
3263: POP
// Say ( Burlak , D3-Bur-1 ) ; Saseda :
3264: LD_EXP 22
3268: PPUSH
3269: LD_STRING D3-Bur-1
3271: PPUSH
3272: CALL_OW 88
3276: GO 3329
3278: LD_EXP 24
3282: DOUBLE
3283: EQUAL
3284: IFTRUE 3288
3286: GO 3303
3288: POP
// Say ( Saseda , D3-RSol1-1 ) ; Jaworska :
3289: LD_EXP 24
3293: PPUSH
3294: LD_STRING D3-RSol1-1
3296: PPUSH
3297: CALL_OW 88
3301: GO 3329
3303: LD_EXP 25
3307: DOUBLE
3308: EQUAL
3309: IFTRUE 3313
3311: GO 3328
3313: POP
// Say ( Jaworska , D3-RFSol1-1 ) ; end ;
3314: LD_EXP 25
3318: PPUSH
3319: LD_STRING D3-RFSol1-1
3321: PPUSH
3322: CALL_OW 88
3326: GO 3329
3328: POP
// Say ( Gnyevko , D3-Gny-1 ) ;
3329: LD_EXP 30
3333: PPUSH
3334: LD_STRING D3-Gny-1
3336: PPUSH
3337: CALL_OW 88
// if un = Burlak then
3341: LD_VAR 0 1
3345: PUSH
3346: LD_EXP 22
3350: EQUAL
3351: IFFALSE 3473
// begin if attackedByApe then
3353: LD_EXP 7
3357: IFFALSE 3373
// Say ( Burlak , D3-Bur-2 ) else
3359: LD_EXP 22
3363: PPUSH
3364: LD_STRING D3-Bur-2
3366: PPUSH
3367: CALL_OW 88
3371: GO 3405
// if apeRadioKilled then
3373: LD_EXP 9
3377: IFFALSE 3393
// Say ( Burlak , D3-Bur-2a ) else
3379: LD_EXP 22
3383: PPUSH
3384: LD_STRING D3-Bur-2a
3386: PPUSH
3387: CALL_OW 88
3391: GO 3405
// Say ( Burlak , D3-Bur-2b ) ;
3393: LD_EXP 22
3397: PPUSH
3398: LD_STRING D3-Bur-2b
3400: PPUSH
3401: CALL_OW 88
// if not joinedToBelkov then
3405: LD_EXP 3
3409: NOT
3410: IFFALSE 3426
// Say ( Burlak , D3-Bur-2c ) else
3412: LD_EXP 22
3416: PPUSH
3417: LD_STRING D3-Bur-2c
3419: PPUSH
3420: CALL_OW 88
3424: GO 3459
// if not americansDefeated then
3426: LD_EXP 10
3430: NOT
3431: IFFALSE 3447
// Say ( Burlak , D3-Bur-2d ) else
3433: LD_EXP 22
3437: PPUSH
3438: LD_STRING D3-Bur-2d
3440: PPUSH
3441: CALL_OW 88
3445: GO 3459
// Say ( Burlak , D3-Bur-2e ) ;
3447: LD_EXP 22
3451: PPUSH
3452: LD_STRING D3-Bur-2e
3454: PPUSH
3455: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
3459: LD_EXP 30
3463: PPUSH
3464: LD_STRING D3-Gny-2
3466: PPUSH
3467: CALL_OW 88
// end else
3471: GO 3523
// begin if un = Saseda then
3473: LD_VAR 0 1
3477: PUSH
3478: LD_EXP 24
3482: EQUAL
3483: IFFALSE 3499
// Say ( Saseda , D3-RSol1-2 ) else
3485: LD_EXP 24
3489: PPUSH
3490: LD_STRING D3-RSol1-2
3492: PPUSH
3493: CALL_OW 88
3497: GO 3511
// Say ( Jaworska , D3-RFSol1-2 ) ;
3499: LD_EXP 25
3503: PPUSH
3504: LD_STRING D3-RFSol1-2
3506: PPUSH
3507: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
3511: LD_EXP 30
3515: PPUSH
3516: LD_STRING D3-Gny-2a
3518: PPUSH
3519: CALL_OW 88
// end ; DialogueOff ;
3523: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
3527: LD_EXP 30
3531: PPUSH
3532: LD_INT 3
3534: PPUSH
3535: CALL_OW 235
// end ;
3539: PPOPN 1
3541: END
// function GnyevkoPokryshkinScene ; begin
3542: LD_INT 0
3544: PPUSH
// gnyevkoMeetPokryshkin := true ;
3545: LD_ADDR_EXP 11
3549: PUSH
3550: LD_INT 1
3552: ST_TO_ADDR
// ComHold ( Burlak ) ;
3553: LD_EXP 22
3557: PPUSH
3558: CALL_OW 140
// InGameOn ;
3562: CALL_OW 8
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3566: LD_INT 76
3568: PPUSH
3569: LD_INT 56
3571: PPUSH
3572: LD_INT 3
3574: PPUSH
3575: LD_INT 12
3577: PPUSH
3578: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3582: LD_EXP 23
3586: PPUSH
3587: CALL_OW 85
// SetSide ( Gnyevko , 6 ) ;
3591: LD_EXP 30
3595: PPUSH
3596: LD_INT 6
3598: PPUSH
3599: CALL_OW 235
// ComMoveXY ( Gnyevko , 79 , 56 ) ;
3603: LD_EXP 30
3607: PPUSH
3608: LD_INT 79
3610: PPUSH
3611: LD_INT 56
3613: PPUSH
3614: CALL_OW 111
// Say ( Pokryshkin , D4-Pok-1 ) ;
3618: LD_EXP 23
3622: PPUSH
3623: LD_STRING D4-Pok-1
3625: PPUSH
3626: CALL_OW 88
// Say ( Gnyevko , D4-Gny-1a ) ;
3630: LD_EXP 30
3634: PPUSH
3635: LD_STRING D4-Gny-1a
3637: PPUSH
3638: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3642: LD_EXP 30
3646: PPUSH
3647: LD_STRING D4-Gny-2
3649: PPUSH
3650: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3654: LD_EXP 23
3658: PPUSH
3659: LD_STRING D4-Pok-3
3661: PPUSH
3662: CALL_OW 88
// RemoveSeeing ( 76 , 56 , 3 ) ;
3666: LD_INT 76
3668: PPUSH
3669: LD_INT 56
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: CALL_OW 331
// CenterNowOnUnits ( Burlak ) ;
3679: LD_EXP 22
3683: PPUSH
3684: CALL_OW 87
// InGameOff ;
3688: CALL_OW 9
// ComFree ( Burlak ) ;
3692: LD_EXP 22
3696: PPUSH
3697: CALL_OW 139
// end ;
3701: LD_VAR 0 1
3705: RET
// every 0 0$2 trigger UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_see , 3 ] ) do
3706: LD_EXP 24
3710: PUSH
3711: LD_EXP 25
3715: PUSH
3716: LD_EXP 26
3720: PUSH
3721: LD_EXP 27
3725: PUSH
3726: LD_EXP 28
3730: PUSH
3731: EMPTY
3732: LIST
3733: LIST
3734: LIST
3735: LIST
3736: LIST
3737: PPUSH
3738: LD_INT 101
3740: PUSH
3741: LD_INT 3
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: PPUSH
3748: CALL_OW 72
3752: IFFALSE 5332
3754: GO 3756
3756: DISABLE
// begin if hasGnyevko then
3757: LD_EXP 4
3761: IFFALSE 3837
// begin if GetDistUnits ( Burlak , Gnyevko ) > 4 and See ( 6 , Gnyevko ) and not See ( 6 , Burlak ) then
3763: LD_EXP 22
3767: PPUSH
3768: LD_EXP 30
3772: PPUSH
3773: CALL_OW 296
3777: PUSH
3778: LD_INT 4
3780: GREATER
3781: PUSH
3782: LD_INT 6
3784: PPUSH
3785: LD_EXP 30
3789: PPUSH
3790: CALL_OW 292
3794: AND
3795: PUSH
3796: LD_INT 6
3798: PPUSH
3799: LD_EXP 22
3803: PPUSH
3804: CALL_OW 292
3808: NOT
3809: AND
3810: IFFALSE 3837
// begin GnyevkoPokryshkinScene ;
3812: CALL 3542 0 0
// repeat wait ( 0 0$1 ) ;
3816: LD_INT 35
3818: PPUSH
3819: CALL_OW 67
// until See ( 6 , Burlak ) ;
3823: LD_INT 6
3825: PPUSH
3826: LD_EXP 22
3830: PPUSH
3831: CALL_OW 292
3835: IFFALSE 3816
// end ; end ; joinedToBelkov := true ;
3837: LD_ADDR_EXP 3
3841: PUSH
3842: LD_INT 1
3844: ST_TO_ADDR
// Video ( true ) ;
3845: LD_INT 1
3847: PPUSH
3848: CALL 47912 0 1
// ChangeSideFog ( 6 , 3 ) ;
3852: LD_INT 6
3854: PPUSH
3855: LD_INT 3
3857: PPUSH
3858: CALL_OW 343
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3862: LD_INT 76
3864: PPUSH
3865: LD_INT 56
3867: PPUSH
3868: LD_INT 3
3870: PPUSH
3871: LD_INT 12
3873: PPUSH
3874: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3878: LD_EXP 23
3882: PPUSH
3883: CALL_OW 85
// ComMoveUnit ( Pokryshkin , Burlak ) ;
3887: LD_EXP 23
3891: PPUSH
3892: LD_EXP 22
3896: PPUSH
3897: CALL_OW 112
// Say ( Pokryshkin , D4-Pok-1 ) ;
3901: LD_EXP 23
3905: PPUSH
3906: LD_STRING D4-Pok-1
3908: PPUSH
3909: CALL_OW 88
// if gnyevkoMeetPokryshkin then
3913: LD_EXP 11
3917: IFFALSE 3933
// Say ( Gnyevko , D4-Gny-3 ) else
3919: LD_EXP 30
3923: PPUSH
3924: LD_STRING D4-Gny-3
3926: PPUSH
3927: CALL_OW 88
3931: GO 3989
// if hasGnyevko and IsOk ( Gnyevko ) then
3933: LD_EXP 4
3937: PUSH
3938: LD_EXP 30
3942: PPUSH
3943: CALL_OW 302
3947: AND
3948: IFFALSE 3989
// begin SetSide ( Gnyevko , 6 ) ;
3950: LD_EXP 30
3954: PPUSH
3955: LD_INT 6
3957: PPUSH
3958: CALL_OW 235
// Say ( Gnyevko , D4-Gny-1 ) ;
3962: LD_EXP 30
3966: PPUSH
3967: LD_STRING D4-Gny-1
3969: PPUSH
3970: CALL_OW 88
// ComMoveXY ( Gnyevko , 83 , 60 ) ;
3974: LD_EXP 30
3978: PPUSH
3979: LD_INT 83
3981: PPUSH
3982: LD_INT 60
3984: PPUSH
3985: CALL_OW 111
// end ; ComMoveUnit ( Burlak , Pokryshkin ) ;
3989: LD_EXP 22
3993: PPUSH
3994: LD_EXP 23
3998: PPUSH
3999: CALL_OW 112
// repeat wait ( 3 ) ;
4003: LD_INT 3
4005: PPUSH
4006: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 5 ;
4010: LD_EXP 22
4014: PPUSH
4015: LD_EXP 23
4019: PPUSH
4020: CALL_OW 296
4024: PUSH
4025: LD_INT 5
4027: LESS
4028: IFFALSE 4003
// ComTurnUnit ( Pokryshkin , Burlak ) ;
4030: LD_EXP 23
4034: PPUSH
4035: LD_EXP 22
4039: PPUSH
4040: CALL_OW 119
// ComTurnUnit ( Burlak , Pokryshkin ) ;
4044: LD_EXP 22
4048: PPUSH
4049: LD_EXP 23
4053: PPUSH
4054: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
4058: LD_EXP 22
4062: PPUSH
4063: LD_STRING D4-Bur-3
4065: PPUSH
4066: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
4070: LD_EXP 23
4074: PPUSH
4075: LD_STRING D4-Pok-4
4077: PPUSH
4078: CALL_OW 88
// PlaceUnitXY ( Brown , 31 , 51 , true ) ;
4082: LD_EXP 32
4086: PPUSH
4087: LD_INT 31
4089: PPUSH
4090: LD_INT 51
4092: PPUSH
4093: LD_INT 1
4095: PPUSH
4096: CALL_OW 48
// wait ( 0 0$2 ) ;
4100: LD_INT 70
4102: PPUSH
4103: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
4107: LD_EXP 22
4111: PPUSH
4112: LD_STRING D4-Bur-4
4114: PPUSH
4115: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
4119: LD_EXP 23
4123: PPUSH
4124: LD_STRING D4-Pok-5
4126: PPUSH
4127: CALL_OW 88
// SayRadioNoFace ( Brown , D4-Sol1-5 ) ;
4131: LD_EXP 32
4135: PPUSH
4136: LD_STRING D4-Sol1-5
4138: PPUSH
4139: CALL_OW 586
// Say ( Pokryshkin , D4-Pok-6 ) ;
4143: LD_EXP 23
4147: PPUSH
4148: LD_STRING D4-Pok-6
4150: PPUSH
4151: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-6a ) ;
4155: LD_EXP 23
4159: PPUSH
4160: LD_STRING D4-Pok-6a
4162: PPUSH
4163: CALL_OW 88
// Say ( Burlak , D4-Bur-6 ) ;
4167: LD_EXP 22
4171: PPUSH
4172: LD_STRING D4-Bur-6
4174: PPUSH
4175: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
4179: LD_EXP 23
4183: PPUSH
4184: LD_STRING D4-Pok-7
4186: PPUSH
4187: CALL_OW 88
// Video ( false ) ;
4191: LD_INT 0
4193: PPUSH
4194: CALL 47912 0 1
// RemoveSeeing ( 76 , 56 , 3 ) ;
4198: LD_INT 76
4200: PPUSH
4201: LD_INT 56
4203: PPUSH
4204: LD_INT 3
4206: PPUSH
4207: CALL_OW 331
// ChangeMissionObjectives ( M2 ) ;
4211: LD_STRING M2
4213: PPUSH
4214: CALL_OW 337
// ComFree ( Burlak ) ;
4218: LD_EXP 22
4222: PPUSH
4223: CALL_OW 139
// followPokryshkin := true ;
4227: LD_ADDR_EXP 12
4231: PUSH
4232: LD_INT 1
4234: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4235: LD_INT 70
4237: PPUSH
4238: CALL_OW 67
// MoveToHill ;
4242: CALL 9880 0 0
// PlaceSeeing ( 65 , 57 , 3 , - 9 ) ;
4246: LD_INT 65
4248: PPUSH
4249: LD_INT 57
4251: PPUSH
4252: LD_INT 3
4254: PPUSH
4255: LD_INT 9
4257: NEG
4258: PPUSH
4259: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4263: LD_INT 35
4265: PPUSH
4266: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 5 ;
4270: LD_EXP 23
4274: PPUSH
4275: LD_INT 65
4277: PPUSH
4278: LD_INT 59
4280: PPUSH
4281: CALL_OW 297
4285: PUSH
4286: LD_INT 5
4288: LESS
4289: IFFALSE 4263
// followPokryshkin := false ;
4291: LD_ADDR_EXP 12
4295: PUSH
4296: LD_INT 0
4298: ST_TO_ADDR
// InGameOn ;
4299: CALL_OW 8
// CenterOnUnits ( Pokryshkin ) ;
4303: LD_EXP 23
4307: PPUSH
4308: CALL_OW 85
// ComMoveXY ( Burlak , 69 , 65 ) ;
4312: LD_EXP 22
4316: PPUSH
4317: LD_INT 69
4319: PPUSH
4320: LD_INT 65
4322: PPUSH
4323: CALL_OW 111
// ComMoveXY ( Brown , 58 , 57 ) ;
4327: LD_EXP 32
4331: PPUSH
4332: LD_INT 58
4334: PPUSH
4335: LD_INT 57
4337: PPUSH
4338: CALL_OW 111
// repeat wait ( 3 ) ;
4342: LD_INT 3
4344: PPUSH
4345: CALL_OW 67
// until GetDistUnitXY ( Brown , 58 , 57 ) < 4 ;
4349: LD_EXP 32
4353: PPUSH
4354: LD_INT 58
4356: PPUSH
4357: LD_INT 57
4359: PPUSH
4360: CALL_OW 297
4364: PUSH
4365: LD_INT 4
4367: LESS
4368: IFFALSE 4342
// SetLives ( Brown , 300 ) ;
4370: LD_EXP 32
4374: PPUSH
4375: LD_INT 300
4377: PPUSH
4378: CALL_OW 234
// Say ( Brown , D5-Sol1-1 ) ;
4382: LD_EXP 32
4386: PPUSH
4387: LD_STRING D5-Sol1-1
4389: PPUSH
4390: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4394: LD_EXP 23
4398: PPUSH
4399: LD_STRING D5-Pok-1
4401: PPUSH
4402: CALL_OW 88
// ComAttackUnit ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] , Brown ) ;
4406: LD_EXP 23
4410: PUSH
4411: LD_EXP 27
4415: PUSH
4416: LD_EXP 26
4420: PUSH
4421: LD_EXP 25
4425: PUSH
4426: LD_EXP 24
4430: PUSH
4431: LD_EXP 28
4435: PUSH
4436: EMPTY
4437: LIST
4438: LIST
4439: LIST
4440: LIST
4441: LIST
4442: LIST
4443: PPUSH
4444: LD_EXP 32
4448: PPUSH
4449: CALL_OW 115
// ForceSay ( Brown , D5-Sol1-2 ) ;
4453: LD_EXP 32
4457: PPUSH
4458: LD_STRING D5-Sol1-2
4460: PPUSH
4461: CALL_OW 91
// KillUnit ( Brown ) ;
4465: LD_EXP 32
4469: PPUSH
4470: CALL_OW 66
// ComWalk ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] ) ;
4474: LD_EXP 23
4478: PUSH
4479: LD_EXP 27
4483: PUSH
4484: LD_EXP 26
4488: PUSH
4489: LD_EXP 25
4493: PUSH
4494: LD_EXP 24
4498: PUSH
4499: LD_EXP 28
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: LIST
4510: LIST
4511: PPUSH
4512: CALL_OW 138
// if hasGnyevko then
4516: LD_EXP 4
4520: IFFALSE 4531
// ComWalk ( Gnyevko ) ;
4522: LD_EXP 30
4526: PPUSH
4527: CALL_OW 138
// AddComMoveXY ( Pokryshkin , 60 , 56 ) ;
4531: LD_EXP 23
4535: PPUSH
4536: LD_INT 60
4538: PPUSH
4539: LD_INT 56
4541: PPUSH
4542: CALL_OW 171
// wait ( 0 0$0.5 ) ;
4546: LD_INT 18
4548: PPUSH
4549: CALL_OW 67
// AddComMoveXY ( Belkov , 61 , 59 ) ;
4553: LD_EXP 27
4557: PPUSH
4558: LD_INT 61
4560: PPUSH
4561: LD_INT 59
4563: PPUSH
4564: CALL_OW 171
// AddComTurnXY ( Pokryshkin , 58 , 57 ) ;
4568: LD_EXP 23
4572: PPUSH
4573: LD_INT 58
4575: PPUSH
4576: LD_INT 57
4578: PPUSH
4579: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4583: LD_EXP 27
4587: PPUSH
4588: LD_INT 58
4590: PPUSH
4591: LD_INT 57
4593: PPUSH
4594: CALL_OW 178
// ComMoveXY ( Burlak , 62 , 58 ) ;
4598: LD_EXP 22
4602: PPUSH
4603: LD_INT 62
4605: PPUSH
4606: LD_INT 58
4608: PPUSH
4609: CALL_OW 111
// AddComTurnXY ( Burlak , 61 , 58 ) ;
4613: LD_EXP 22
4617: PPUSH
4618: LD_INT 61
4620: PPUSH
4621: LD_INT 58
4623: PPUSH
4624: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4628: LD_EXP 27
4632: PPUSH
4633: LD_INT 58
4635: PPUSH
4636: LD_INT 57
4638: PPUSH
4639: CALL_OW 178
// Say ( Pokryshkin , D4-Pok-2 ) ;
4643: LD_EXP 23
4647: PPUSH
4648: LD_STRING D4-Pok-2
4650: PPUSH
4651: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4655: LD_INT 10
4657: PPUSH
4658: CALL_OW 67
// Say ( Burlak , D5-Bur-2 ) ;
4662: LD_EXP 22
4666: PPUSH
4667: LD_STRING D5-Bur-2
4669: PPUSH
4670: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4674: LD_EXP 23
4678: PPUSH
4679: LD_STRING D5-Pok-2
4681: PPUSH
4682: CALL_OW 88
// ComTurnUnit ( Belkov , Burlak ) ;
4686: LD_EXP 27
4690: PPUSH
4691: LD_EXP 22
4695: PPUSH
4696: CALL_OW 119
// Say ( Belkov , D5-Bel-2 ) ;
4700: LD_EXP 27
4704: PPUSH
4705: LD_STRING D5-Bel-2
4707: PPUSH
4708: CALL_OW 88
// ComTurnUnit ( Pokryshkin , Belkov ) ;
4712: LD_EXP 23
4716: PPUSH
4717: LD_EXP 27
4721: PPUSH
4722: CALL_OW 119
// Say ( Pokryshkin , D5-Pok-3 ) ;
4726: LD_EXP 23
4730: PPUSH
4731: LD_STRING D5-Pok-3
4733: PPUSH
4734: CALL_OW 88
// if hasGnyevko then
4738: LD_EXP 4
4742: IFFALSE 4770
// begin ComTurnUnit ( Gnyevko , Burlak ) ;
4744: LD_EXP 30
4748: PPUSH
4749: LD_EXP 22
4753: PPUSH
4754: CALL_OW 119
// Say ( Gnyevko , D5-Gny-3 ) ;
4758: LD_EXP 30
4762: PPUSH
4763: LD_STRING D5-Gny-3
4765: PPUSH
4766: CALL_OW 88
// end ; Say ( Burlak , D5-Bur-3 ) ;
4770: LD_EXP 22
4774: PPUSH
4775: LD_STRING D5-Bur-3
4777: PPUSH
4778: CALL_OW 88
// wait ( 0 0$2 ) ;
4782: LD_INT 70
4784: PPUSH
4785: CALL_OW 67
// ComMoveXY ( Pokryshkin , 78 , 57 ) ;
4789: LD_EXP 23
4793: PPUSH
4794: LD_INT 78
4796: PPUSH
4797: LD_INT 57
4799: PPUSH
4800: CALL_OW 111
// Say ( Pokryshkin , D6-Pok-1 ) ;
4804: LD_EXP 23
4808: PPUSH
4809: LD_STRING D6-Pok-1
4811: PPUSH
4812: CALL_OW 88
// ComMoveXY ( Burlak , 75 , 56 ) ;
4816: LD_EXP 22
4820: PPUSH
4821: LD_INT 75
4823: PPUSH
4824: LD_INT 56
4826: PPUSH
4827: CALL_OW 111
// AddComMoveXY ( Burlak , 83 , 62 ) ;
4831: LD_EXP 22
4835: PPUSH
4836: LD_INT 83
4838: PPUSH
4839: LD_INT 62
4841: PPUSH
4842: CALL_OW 171
// ComMoveXY ( Belkov , 80 , 64 ) ;
4846: LD_EXP 27
4850: PPUSH
4851: LD_INT 80
4853: PPUSH
4854: LD_INT 64
4856: PPUSH
4857: CALL_OW 111
// ComMoveXY ( Jaworska , 83 , 67 ) ;
4861: LD_EXP 25
4865: PPUSH
4866: LD_INT 83
4868: PPUSH
4869: LD_INT 67
4871: PPUSH
4872: CALL_OW 111
// ComMoveXY ( Balei , 81 , 52 ) ;
4876: LD_EXP 26
4880: PPUSH
4881: LD_INT 81
4883: PPUSH
4884: LD_INT 52
4886: PPUSH
4887: CALL_OW 111
// ComMoveXY ( Saseda , 78 , 54 ) ;
4891: LD_EXP 24
4895: PPUSH
4896: LD_INT 78
4898: PPUSH
4899: LD_INT 54
4901: PPUSH
4902: CALL_OW 111
// ComMoveXY ( Jaunzeme , 75 , 62 ) ;
4906: LD_EXP 28
4910: PPUSH
4911: LD_INT 75
4913: PPUSH
4914: LD_INT 62
4916: PPUSH
4917: CALL_OW 111
// if hasGnyevko then
4921: LD_EXP 4
4925: IFFALSE 4956
// begin ComMoveXY ( Gnyevko , 77 , 60 ) ;
4927: LD_EXP 30
4931: PPUSH
4932: LD_INT 77
4934: PPUSH
4935: LD_INT 60
4937: PPUSH
4938: CALL_OW 111
// AddComMoveUnit ( Gnyevko , Burlak ) ;
4942: LD_EXP 30
4946: PPUSH
4947: LD_EXP 22
4951: PPUSH
4952: CALL_OW 172
// end ; Say ( Burlak , D6-Bur-1 ) ;
4956: LD_EXP 22
4960: PPUSH
4961: LD_STRING D6-Bur-1
4963: PPUSH
4964: CALL_OW 88
// RemoveSeeing ( 65 , 57 , 3 ) ;
4968: LD_INT 65
4970: PPUSH
4971: LD_INT 57
4973: PPUSH
4974: LD_INT 3
4976: PPUSH
4977: CALL_OW 331
// AddComMoveXY ( Pokryshkin , 87 , 66 ) ;
4981: LD_EXP 23
4985: PPUSH
4986: LD_INT 87
4988: PPUSH
4989: LD_INT 66
4991: PPUSH
4992: CALL_OW 171
// AddComMoveXY ( Balei , 92 , 60 ) ;
4996: LD_EXP 26
5000: PPUSH
5001: LD_INT 92
5003: PPUSH
5004: LD_INT 60
5006: PPUSH
5007: CALL_OW 171
// AddComMoveXY ( Saseda , 90 , 64 ) ;
5011: LD_EXP 24
5015: PPUSH
5016: LD_INT 90
5018: PPUSH
5019: LD_INT 64
5021: PPUSH
5022: CALL_OW 171
// AddComMoveXY ( Jaworska , 87 , 73 ) ;
5026: LD_EXP 25
5030: PPUSH
5031: LD_INT 87
5033: PPUSH
5034: LD_INT 73
5036: PPUSH
5037: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 87 , 69 ) ;
5041: LD_EXP 28
5045: PPUSH
5046: LD_INT 87
5048: PPUSH
5049: LD_INT 69
5051: PPUSH
5052: CALL_OW 171
// AddComMoveXY ( Belkov , 90 , 71 ) ;
5056: LD_EXP 27
5060: PPUSH
5061: LD_INT 90
5063: PPUSH
5064: LD_INT 71
5066: PPUSH
5067: CALL_OW 171
// CenterOnXY ( 84 , 64 ) ;
5071: LD_INT 84
5073: PPUSH
5074: LD_INT 64
5076: PPUSH
5077: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-2 ) ;
5081: LD_EXP 23
5085: PPUSH
5086: LD_STRING D6-Pok-2
5088: PPUSH
5089: CALL_OW 88
// AddComMoveXY ( Jaworska , 113 , 104 ) ;
5093: LD_EXP 25
5097: PPUSH
5098: LD_INT 113
5100: PPUSH
5101: LD_INT 104
5103: PPUSH
5104: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 107 , 106 ) ;
5108: LD_EXP 28
5112: PPUSH
5113: LD_INT 107
5115: PPUSH
5116: LD_INT 106
5118: PPUSH
5119: CALL_OW 171
// AddComMoveXY ( Saseda , 125 , 97 ) ;
5123: LD_EXP 24
5127: PPUSH
5128: LD_INT 125
5130: PPUSH
5131: LD_INT 97
5133: PPUSH
5134: CALL_OW 171
// AddComMoveXY ( Balei , 124 , 101 ) ;
5138: LD_EXP 26
5142: PPUSH
5143: LD_INT 124
5145: PPUSH
5146: LD_INT 101
5148: PPUSH
5149: CALL_OW 171
// AddComMoveXY ( Belkov , 119 , 101 ) ;
5153: LD_EXP 27
5157: PPUSH
5158: LD_INT 119
5160: PPUSH
5161: LD_INT 101
5163: PPUSH
5164: CALL_OW 171
// ComMoveUnit ( Burlak , Pokryshkin ) ;
5168: LD_EXP 22
5172: PPUSH
5173: LD_EXP 23
5177: PPUSH
5178: CALL_OW 112
// Say ( Belkov , D6-Bel-2 ) ;
5182: LD_EXP 27
5186: PPUSH
5187: LD_STRING D6-Bel-2
5189: PPUSH
5190: CALL_OW 88
// AddComMoveXY ( Pokryshkin , 119 , 93 ) ;
5194: LD_EXP 23
5198: PPUSH
5199: LD_INT 119
5201: PPUSH
5202: LD_INT 93
5204: PPUSH
5205: CALL_OW 171
// Say ( Burlak , D6-Bur-2 ) ;
5209: LD_EXP 22
5213: PPUSH
5214: LD_STRING D6-Bur-2
5216: PPUSH
5217: CALL_OW 88
// CenterOnXY ( 105 , 82 ) ;
5221: LD_INT 105
5223: PPUSH
5224: LD_INT 82
5226: PPUSH
5227: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-3 ) ;
5231: LD_EXP 23
5235: PPUSH
5236: LD_STRING D6-Pok-3
5238: PPUSH
5239: CALL_OW 88
// ComHold ( Pokryshkin ) ;
5243: LD_EXP 23
5247: PPUSH
5248: CALL_OW 140
// SayRadio ( Kurin , D6-Kur-3 ) ;
5252: LD_EXP 29
5256: PPUSH
5257: LD_STRING D6-Kur-3
5259: PPUSH
5260: CALL_OW 94
// ComHold ( [ Jaworska , Belkov , Saseda , Burlak , Balei , Jaunzeme , Gnyevko ] ) ;
5264: LD_EXP 25
5268: PUSH
5269: LD_EXP 27
5273: PUSH
5274: LD_EXP 24
5278: PUSH
5279: LD_EXP 22
5283: PUSH
5284: LD_EXP 26
5288: PUSH
5289: LD_EXP 28
5293: PUSH
5294: LD_EXP 30
5298: PUSH
5299: EMPTY
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: PPUSH
5308: CALL_OW 140
// Say ( Pokryshkin , D6-Pok-4 ) ;
5312: LD_EXP 23
5316: PPUSH
5317: LD_STRING D6-Pok-4
5319: PPUSH
5320: CALL_OW 88
// InGameOff ;
5324: CALL_OW 9
// AttackOnTimsBase ;
5328: CALL 5333 0 0
// end ;
5332: END
// function AttackOnTimsBase ; var i , tmp ; begin
5333: LD_INT 0
5335: PPUSH
5336: PPUSH
5337: PPUSH
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
5338: LD_INT 6
5340: PPUSH
5341: LD_INT 1
5343: PPUSH
5344: LD_INT 2
5346: PPUSH
5347: LD_INT 1
5349: PPUSH
5350: CALL_OW 80
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
5354: LD_INT 3
5356: PPUSH
5357: LD_INT 1
5359: PPUSH
5360: LD_INT 2
5362: PPUSH
5363: LD_INT 1
5365: PPUSH
5366: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin ;
5370: LD_ADDR_VAR 0 3
5374: PUSH
5375: LD_INT 22
5377: PUSH
5378: LD_INT 6
5380: PUSH
5381: EMPTY
5382: LIST
5383: LIST
5384: PUSH
5385: LD_INT 21
5387: PUSH
5388: LD_INT 1
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: PUSH
5395: EMPTY
5396: LIST
5397: LIST
5398: PPUSH
5399: CALL_OW 69
5403: PUSH
5404: LD_EXP 23
5408: DIFF
5409: ST_TO_ADDR
// for i in tmp do
5410: LD_ADDR_VAR 0 2
5414: PUSH
5415: LD_VAR 0 3
5419: PUSH
5420: FOR_IN
5421: IFFALSE 5437
// DoNotAttack ( 1 , i ) ;
5423: LD_INT 1
5425: PPUSH
5426: LD_VAR 0 2
5430: PPUSH
5431: CALL_OW 471
5435: GO 5420
5437: POP
5438: POP
// ComMoveXY ( Pokryshkin , 65 , 40 ) ;
5439: LD_EXP 23
5443: PPUSH
5444: LD_INT 65
5446: PPUSH
5447: LD_INT 40
5449: PPUSH
5450: CALL_OW 111
// ComMoveXY ( tmp , 75 , 51 ) ;
5454: LD_VAR 0 3
5458: PPUSH
5459: LD_INT 75
5461: PPUSH
5462: LD_INT 51
5464: PPUSH
5465: CALL_OW 111
// Say ( Belkov , D6-Bel-4 ) ;
5469: LD_EXP 27
5473: PPUSH
5474: LD_STRING D6-Bel-4
5476: PPUSH
5477: CALL_OW 88
// AddComAgressiveMove ( Pokryshkin , 57 , 30 ) ;
5481: LD_EXP 23
5485: PPUSH
5486: LD_INT 57
5488: PPUSH
5489: LD_INT 30
5491: PPUSH
5492: CALL_OW 174
// AddComAgressiveMove ( tmp , 60 , 35 ) ;
5496: LD_VAR 0 3
5500: PPUSH
5501: LD_INT 60
5503: PPUSH
5504: LD_INT 35
5506: PPUSH
5507: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
5511: LD_INT 35
5513: PPUSH
5514: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 40 ) < 4 ;
5518: LD_EXP 23
5522: PPUSH
5523: LD_INT 65
5525: PPUSH
5526: LD_INT 40
5528: PPUSH
5529: CALL_OW 297
5533: PUSH
5534: LD_INT 4
5536: LESS
5537: IFFALSE 5511
// Say ( Pokryshkin , D7-Pok-1 ) ;
5539: LD_EXP 23
5543: PPUSH
5544: LD_STRING D7-Pok-1
5546: PPUSH
5547: CALL_OW 88
// wait ( 0 0$0.3 ) ;
5551: LD_INT 10
5553: PPUSH
5554: CALL_OW 67
// async ;
5558: ASYNC
// Say ( Holland , D7-FSol1-1 ) ;
5559: LD_EXP 34
5563: PPUSH
5564: LD_STRING D7-FSol1-1
5566: PPUSH
5567: CALL_OW 88
// sync ;
5571: SYNC
// repeat wait ( 0 0$1 ) ;
5572: LD_INT 35
5574: PPUSH
5575: CALL_OW 67
// until not IsOk ( Pokryshkin ) ;
5579: LD_EXP 23
5583: PPUSH
5584: CALL_OW 302
5588: NOT
5589: IFFALSE 5572
// Say ( Belkov , D7a-Bel-1 ) ;
5591: LD_EXP 27
5595: PPUSH
5596: LD_STRING D7a-Bel-1
5598: PPUSH
5599: CALL_OW 88
// ComMoveXY ( tmp , 85 , 63 ) ;
5603: LD_VAR 0 3
5607: PPUSH
5608: LD_INT 85
5610: PPUSH
5611: LD_INT 63
5613: PPUSH
5614: CALL_OW 111
// Say ( Saseda , D7a-RSol1-1 ) ;
5618: LD_EXP 24
5622: PPUSH
5623: LD_STRING D7a-RSol1-1
5625: PPUSH
5626: CALL_OW 88
// Say ( Holland , D7a-FSol1-1 ) ;
5630: LD_EXP 34
5634: PPUSH
5635: LD_STRING D7a-FSol1-1
5637: PPUSH
5638: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5642: LD_INT 35
5644: PPUSH
5645: CALL_OW 67
// until GetDistUnitXY ( Belkov , 85 , 63 ) < 8 ;
5649: LD_EXP 27
5653: PPUSH
5654: LD_INT 85
5656: PPUSH
5657: LD_INT 63
5659: PPUSH
5660: CALL_OW 297
5664: PUSH
5665: LD_INT 8
5667: LESS
5668: IFFALSE 5642
// for i in tmp do
5670: LD_ADDR_VAR 0 2
5674: PUSH
5675: LD_VAR 0 3
5679: PUSH
5680: FOR_IN
5681: IFFALSE 5697
// NormalAttack ( 1 , i ) ;
5683: LD_INT 1
5685: PPUSH
5686: LD_VAR 0 2
5690: PPUSH
5691: CALL_OW 472
5695: GO 5680
5697: POP
5698: POP
// InGameOn ;
5699: CALL_OW 8
// CenterNowOnUnits ( Belkov ) ;
5703: LD_EXP 27
5707: PPUSH
5708: CALL_OW 87
// Say ( Belkov , D7b-Bel-1 ) ;
5712: LD_EXP 27
5716: PPUSH
5717: LD_STRING D7b-Bel-1
5719: PPUSH
5720: CALL_OW 88
// ComTurnUnit ( Belkov , Jaworska ) ;
5724: LD_EXP 27
5728: PPUSH
5729: LD_EXP 25
5733: PPUSH
5734: CALL_OW 119
// for i in tmp diff Belkov do
5738: LD_ADDR_VAR 0 2
5742: PUSH
5743: LD_VAR 0 3
5747: PUSH
5748: LD_EXP 27
5752: DIFF
5753: PUSH
5754: FOR_IN
5755: IFFALSE 5773
// ComTurnUnit ( i , Belkov ) ;
5757: LD_VAR 0 2
5761: PPUSH
5762: LD_EXP 27
5766: PPUSH
5767: CALL_OW 119
5771: GO 5754
5773: POP
5774: POP
// Say ( Jaworska , D7b-FSol1-1 ) ;
5775: LD_EXP 25
5779: PPUSH
5780: LD_STRING D7b-FSol1-1
5782: PPUSH
5783: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5787: LD_EXP 27
5791: PPUSH
5792: LD_STRING D7b-Bel-2
5794: PPUSH
5795: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5799: LD_EXP 24
5803: PPUSH
5804: LD_STRING D7b-RSol1-2
5806: PPUSH
5807: CALL_OW 88
// if GetDistUnits ( Belkov , Burlak ) > 10 then
5811: LD_EXP 27
5815: PPUSH
5816: LD_EXP 22
5820: PPUSH
5821: CALL_OW 296
5825: PUSH
5826: LD_INT 10
5828: GREATER
5829: IFFALSE 5927
// begin Say ( Belkov , D7b-Bel-3 ) ;
5831: LD_EXP 27
5835: PPUSH
5836: LD_STRING D7b-Bel-3
5838: PPUSH
5839: CALL_OW 88
// InGameOff ;
5843: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
5847: LD_INT 35
5849: PPUSH
5850: CALL_OW 67
// until GetDistUnits ( Burlak , Belkov ) <= 10 ;
5854: LD_EXP 22
5858: PPUSH
5859: LD_EXP 27
5863: PPUSH
5864: CALL_OW 296
5868: PUSH
5869: LD_INT 10
5871: LESSEQUAL
5872: IFFALSE 5847
// InGameOn ;
5874: CALL_OW 8
// CenterOnUnits ( Burlak ) ;
5878: LD_EXP 22
5882: PPUSH
5883: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
5887: LD_EXP 22
5891: PPUSH
5892: LD_EXP 27
5896: PPUSH
5897: CALL_OW 112
// ComTurnUnit ( Belkov , Burlak ) ;
5901: LD_EXP 27
5905: PPUSH
5906: LD_EXP 22
5910: PPUSH
5911: CALL_OW 119
// Say ( Belkov , D7b-Bel-3a ) ;
5915: LD_EXP 27
5919: PPUSH
5920: LD_STRING D7b-Bel-3a
5922: PPUSH
5923: CALL_OW 88
// end ; CenterOnUnits ( Burlak ) ;
5927: LD_EXP 22
5931: PPUSH
5932: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
5936: LD_EXP 22
5940: PPUSH
5941: LD_EXP 27
5945: PPUSH
5946: CALL_OW 112
// Say ( Burlak , D7b-Bur-3 ) ;
5950: LD_EXP 22
5954: PPUSH
5955: LD_STRING D7b-Bur-3
5957: PPUSH
5958: CALL_OW 88
// ComTurnUnit ( Burlak , Belkov ) ;
5962: LD_EXP 22
5966: PPUSH
5967: LD_EXP 27
5971: PPUSH
5972: CALL_OW 119
// ComTurnUnit ( tmp , Burlak ) ;
5976: LD_VAR 0 3
5980: PPUSH
5981: LD_EXP 22
5985: PPUSH
5986: CALL_OW 119
// Say ( Belkov , D7b-Bel-4 ) ;
5990: LD_EXP 27
5994: PPUSH
5995: LD_STRING D7b-Bel-4
5997: PPUSH
5998: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
6002: LD_EXP 22
6006: PPUSH
6007: LD_STRING D7b-Bur-4
6009: PPUSH
6010: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
6014: LD_EXP 27
6018: PPUSH
6019: LD_STRING D7b-Bel-5
6021: PPUSH
6022: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
6026: LD_EXP 25
6030: PPUSH
6031: LD_STRING D7b-FSol1-5
6033: PPUSH
6034: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
6038: LD_EXP 27
6042: PPUSH
6043: LD_STRING D7b-Bel-6
6045: PPUSH
6046: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
6050: LD_EXP 22
6054: PPUSH
6055: LD_STRING D7b-Bur-6
6057: PPUSH
6058: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
6062: LD_EXP 24
6066: PPUSH
6067: LD_STRING D7b-RSol1-6
6069: PPUSH
6070: CALL_OW 88
// InGameOff ;
6074: CALL_OW 9
// for i in tmp do
6078: LD_ADDR_VAR 0 2
6082: PUSH
6083: LD_VAR 0 3
6087: PUSH
6088: FOR_IN
6089: IFFALSE 6105
// SetSide ( i , 3 ) ;
6091: LD_VAR 0 2
6095: PPUSH
6096: LD_INT 3
6098: PPUSH
6099: CALL_OW 235
6103: GO 6088
6105: POP
6106: POP
// ChangeMissionObjectives ( M3 ) ;
6107: LD_STRING M3
6109: PPUSH
6110: CALL_OW 337
// burlakAsCommander := true ;
6114: LD_ADDR_EXP 14
6118: PUSH
6119: LD_INT 1
6121: ST_TO_ADDR
// end ;
6122: LD_VAR 0 1
6126: RET
// every 0 0$1 trigger followPokryshkin and GetDistUnits ( Pokryshkin , Burlak ) > 10 do
6127: LD_EXP 12
6131: PUSH
6132: LD_EXP 23
6136: PPUSH
6137: LD_EXP 22
6141: PPUSH
6142: CALL_OW 296
6146: PUSH
6147: LD_INT 10
6149: GREATER
6150: AND
6151: IFFALSE 6297
6153: GO 6155
6155: DISABLE
// begin InGameOn ;
6156: CALL_OW 8
// ComTurnUnit ( Pokryshkin , Burlak ) ;
6160: LD_EXP 23
6164: PPUSH
6165: LD_EXP 22
6169: PPUSH
6170: CALL_OW 119
// ComHold ( Burlak ) ;
6174: LD_EXP 22
6178: PPUSH
6179: CALL_OW 140
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
6183: LD_EXP 23
6187: PPUSH
6188: LD_STRING DSplit-Pok-1
6190: PPUSH
6191: CALL_OW 88
// ComMoveUnit ( Burlak , Pokryshkin ) ;
6195: LD_EXP 22
6199: PPUSH
6200: LD_EXP 23
6204: PPUSH
6205: CALL_OW 112
// Say ( Burlak , DSplit-Bur-1 ) ;
6209: LD_EXP 22
6213: PPUSH
6214: LD_STRING DSplit-Bur-1
6216: PPUSH
6217: CALL_OW 88
// repeat wait ( 3 ) ;
6221: LD_INT 3
6223: PPUSH
6224: CALL_OW 67
// until GetDistUnits ( Pokryshkin , Burlak ) < 6 ;
6228: LD_EXP 23
6232: PPUSH
6233: LD_EXP 22
6237: PPUSH
6238: CALL_OW 296
6242: PUSH
6243: LD_INT 6
6245: LESS
6246: IFFALSE 6221
// InGameOff ;
6248: CALL_OW 9
// ComFree ( Burlak ) ;
6252: LD_EXP 22
6256: PPUSH
6257: CALL_OW 139
// if IsOk ( Brown ) then
6261: LD_EXP 32
6265: PPUSH
6266: CALL_OW 302
6270: IFFALSE 6296
// begin ComMoveXY ( Pokryshkin , 65 , 59 ) ;
6272: LD_EXP 23
6276: PPUSH
6277: LD_INT 65
6279: PPUSH
6280: LD_INT 59
6282: PPUSH
6283: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6287: LD_EXP 23
6291: PPUSH
6292: CALL_OW 197
// end ; enable ;
6296: ENABLE
// end ;
6297: END
// every 0 0$1 trigger attackedAllied and IsOk ( Pokryshkin ) and joinedToBelkov do
6298: LD_EXP 13
6302: PUSH
6303: LD_EXP 23
6307: PPUSH
6308: CALL_OW 302
6312: AND
6313: PUSH
6314: LD_EXP 3
6318: AND
6319: IFFALSE 6351
6321: GO 6323
6323: DISABLE
// begin DialogueOn ;
6324: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
6328: LD_EXP 23
6332: PPUSH
6333: LD_STRING DAttack-Pok-1
6335: PPUSH
6336: CALL_OW 88
// DialogueOff ;
6340: CALL_OW 7
// YouLost ( Ally ) ;
6344: LD_STRING Ally
6346: PPUSH
6347: CALL_OW 104
// end ;
6351: END
// every 0 0$2 trigger FilterUnitsInArea ( backwardEntranceArea , [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) and IsOk ( usBun1 ) do
6352: LD_INT 18
6354: PPUSH
6355: LD_INT 22
6357: PUSH
6358: LD_INT 3
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 25
6367: PUSH
6368: LD_INT 1
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 70
6383: PUSH
6384: LD_INT 3
6386: PPUSH
6387: CALL_OW 302
6391: AND
6392: IFFALSE 6404
6394: GO 6396
6396: DISABLE
// SetAchievement ( ACH_BACKENTRANCE ) ;
6397: LD_STRING ACH_BACKENTRANCE
6399: PPUSH
6400: CALL_OW 543
6404: END
// every 0 0$1 trigger burlakAsCommander do
6405: LD_EXP 14
6409: IFFALSE 6573
6411: GO 6413
6413: DISABLE
// begin if Difficulty > 1 then
6414: LD_OWVAR 67
6418: PUSH
6419: LD_INT 1
6421: GREATER
6422: IFFALSE 6434
// SetLives ( usBun1 , 1000 ) ;
6424: LD_INT 3
6426: PPUSH
6427: LD_INT 1000
6429: PPUSH
6430: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
6434: LD_INT 35
6436: PPUSH
6437: CALL_OW 67
// until SeeUnits ( 1 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
6441: LD_INT 1
6443: PPUSH
6444: LD_INT 22
6446: PUSH
6447: LD_INT 3
6449: PUSH
6450: EMPTY
6451: LIST
6452: LIST
6453: PUSH
6454: LD_INT 21
6456: PUSH
6457: LD_INT 1
6459: PUSH
6460: EMPTY
6461: LIST
6462: LIST
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PPUSH
6468: CALL_OW 69
6472: PPUSH
6473: CALL 51223 0 2
6477: IFFALSE 6434
// Say ( Holland , D8-FSol1-1 ) ;
6479: LD_EXP 34
6483: PPUSH
6484: LD_STRING D8-FSol1-1
6486: PPUSH
6487: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6491: LD_EXP 33
6495: PPUSH
6496: LD_STRING D8-Glad-1
6498: PPUSH
6499: CALL_OW 88
// activeAmericanScript := true ;
6503: LD_ADDR_EXP 15
6507: PUSH
6508: LD_INT 1
6510: ST_TO_ADDR
// Say ( Burlak , D8-Bur-1 ) ;
6511: LD_EXP 22
6515: PPUSH
6516: LD_STRING D8-Bur-1
6518: PPUSH
6519: CALL_OW 88
// repeat wait ( 0 0$2 ) ;
6523: LD_INT 70
6525: PPUSH
6526: CALL_OW 67
// if not IsOk ( usBun1 ) then
6530: LD_INT 3
6532: PPUSH
6533: CALL_OW 302
6537: NOT
6538: IFFALSE 6542
// exit ;
6540: GO 6573
// until FilterUnitsInArea ( behindTreesArea , [ f_side , 3 ] ) ;
6542: LD_INT 14
6544: PPUSH
6545: LD_INT 22
6547: PUSH
6548: LD_INT 3
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PPUSH
6555: CALL_OW 70
6559: IFFALSE 6523
// Say ( Holland , D8-FSol1-2 ) ;
6561: LD_EXP 34
6565: PPUSH
6566: LD_STRING D8-FSol1-2
6568: PPUSH
6569: CALL_OW 88
// end ;
6573: END
// every 0 0$1 trigger IsInArea ( Gladstone , escapeArea ) or IsAt ( Gladstone , 71 , 1 ) do
6574: LD_EXP 33
6578: PPUSH
6579: LD_INT 15
6581: PPUSH
6582: CALL_OW 308
6586: PUSH
6587: LD_EXP 33
6591: PPUSH
6592: LD_INT 71
6594: PPUSH
6595: LD_INT 1
6597: PPUSH
6598: CALL_OW 307
6602: OR
6603: IFFALSE 6635
6605: GO 6607
6607: DISABLE
// begin RemoveUnit ( Gladstone ) ;
6608: LD_EXP 33
6612: PPUSH
6613: CALL_OW 64
// gladstoneEscaped := true ;
6617: LD_ADDR_EXP 16
6621: PUSH
6622: LD_INT 1
6624: ST_TO_ADDR
// SaveVariable ( 1 , 01_GladstoneEscaped ) ;
6625: LD_INT 1
6627: PPUSH
6628: LD_STRING 01_GladstoneEscaped
6630: PPUSH
6631: CALL_OW 39
// end ;
6635: END
// every 0 0$1 trigger IsInArea ( Holland , escapeArea ) or IsAt ( Holland , 72 , 1 ) do
6636: LD_EXP 34
6640: PPUSH
6641: LD_INT 15
6643: PPUSH
6644: CALL_OW 308
6648: PUSH
6649: LD_EXP 34
6653: PPUSH
6654: LD_INT 72
6656: PPUSH
6657: LD_INT 1
6659: PPUSH
6660: CALL_OW 307
6664: OR
6665: IFFALSE 6697
6667: GO 6669
6669: DISABLE
// begin RemoveUnit ( Holland ) ;
6670: LD_EXP 34
6674: PPUSH
6675: CALL_OW 64
// hollandEscaped := true ;
6679: LD_ADDR_EXP 17
6683: PUSH
6684: LD_INT 1
6686: ST_TO_ADDR
// SaveVariable ( 1 , 01_HollandEscaped ) ;
6687: LD_INT 1
6689: PPUSH
6690: LD_STRING 01_HollandEscaped
6692: PPUSH
6693: CALL_OW 39
// end ;
6697: END
// every 0 0$1 trigger IsInArea ( Frank , escapeArea ) or IsAt ( Frank , 70 , 1 ) do
6698: LD_EXP 35
6702: PPUSH
6703: LD_INT 15
6705: PPUSH
6706: CALL_OW 308
6710: PUSH
6711: LD_EXP 35
6715: PPUSH
6716: LD_INT 70
6718: PPUSH
6719: LD_INT 1
6721: PPUSH
6722: CALL_OW 307
6726: OR
6727: IFFALSE 6759
6729: GO 6731
6731: DISABLE
// begin RemoveUnit ( Frank ) ;
6732: LD_EXP 35
6736: PPUSH
6737: CALL_OW 64
// frankEscaped := true ;
6741: LD_ADDR_EXP 18
6745: PUSH
6746: LD_INT 1
6748: ST_TO_ADDR
// SaveVariable ( 1 , 01_FrankEscaped ) ;
6749: LD_INT 1
6751: PPUSH
6752: LD_STRING 01_FrankEscaped
6754: PPUSH
6755: CALL_OW 39
// end ;
6759: END
// every 0 0$1 trigger not IsOk ( usBun1 ) do var tmp , ape , p ;
6760: LD_INT 3
6762: PPUSH
6763: CALL_OW 302
6767: NOT
6768: IFFALSE 8409
6770: GO 6772
6772: DISABLE
6773: LD_INT 0
6775: PPUSH
6776: PPUSH
6777: PPUSH
// begin activeAmericanScript := false ;
6778: LD_ADDR_EXP 15
6782: PUSH
6783: LD_INT 0
6785: ST_TO_ADDR
// if IsInUnit ( Gladstone ) then
6786: LD_EXP 33
6790: PPUSH
6791: CALL_OW 310
6795: IFFALSE 6806
// ComExitBuilding ( Gladstone ) ;
6797: LD_EXP 33
6801: PPUSH
6802: CALL_OW 122
// AddComMoveXY ( Gladstone , 71 , 1 ) ;
6806: LD_EXP 33
6810: PPUSH
6811: LD_INT 71
6813: PPUSH
6814: LD_INT 1
6816: PPUSH
6817: CALL_OW 171
// ComMoveXY ( Holland , 72 , 1 ) ;
6821: LD_EXP 34
6825: PPUSH
6826: LD_INT 72
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: CALL_OW 111
// ComMoveXY ( Frank , 70 , 1 ) ;
6836: LD_EXP 35
6840: PPUSH
6841: LD_INT 70
6843: PPUSH
6844: LD_INT 1
6846: PPUSH
6847: CALL_OW 111
// Say ( Holland , D8-FSol1-2a ) ;
6851: LD_EXP 34
6855: PPUSH
6856: LD_STRING D8-FSol1-2a
6858: PPUSH
6859: CALL_OW 88
// Say ( Gladstone , D8-Glad-2 ) ;
6863: LD_EXP 33
6867: PPUSH
6868: LD_STRING D8-Glad-2
6870: PPUSH
6871: CALL_OW 88
// wait ( 0 0$1 ) ;
6875: LD_INT 35
6877: PPUSH
6878: CALL_OW 67
// DialogueOn ;
6882: CALL_OW 6
// PlaceSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 , - 3 ) ;
6886: LD_EXP 33
6890: PPUSH
6891: CALL_OW 250
6895: PPUSH
6896: LD_EXP 33
6900: PPUSH
6901: CALL_OW 251
6905: PPUSH
6906: LD_INT 3
6908: PPUSH
6909: LD_INT 3
6911: NEG
6912: PPUSH
6913: CALL_OW 330
// CenterNowOnUnits ( Gladstone ) ;
6917: LD_EXP 33
6921: PPUSH
6922: CALL_OW 87
// Say ( Burlak , D8-Bur-2 ) ;
6926: LD_EXP 22
6930: PPUSH
6931: LD_STRING D8-Bur-2
6933: PPUSH
6934: CALL_OW 88
// RemoveSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 ) ;
6938: LD_EXP 33
6942: PPUSH
6943: CALL_OW 250
6947: PPUSH
6948: LD_EXP 33
6952: PPUSH
6953: CALL_OW 251
6957: PPUSH
6958: LD_INT 3
6960: PPUSH
6961: CALL_OW 331
// DialogueOff ;
6965: CALL_OW 7
// repeat wait ( 0 0$1 ) ;
6969: LD_INT 35
6971: PPUSH
6972: CALL_OW 67
// until not IsOk ( Gladstone ) and not IsOk ( Holland ) ;
6976: LD_EXP 33
6980: PPUSH
6981: CALL_OW 302
6985: NOT
6986: PUSH
6987: LD_EXP 34
6991: PPUSH
6992: CALL_OW 302
6996: NOT
6997: AND
6998: IFFALSE 6969
// if gladstoneEscaped and hollandEscaped then
7000: LD_EXP 16
7004: PUSH
7005: LD_EXP 17
7009: AND
7010: IFFALSE 7026
// Say ( Burlak , D9-Bur-1c ) else
7012: LD_EXP 22
7016: PPUSH
7017: LD_STRING D9-Bur-1c
7019: PPUSH
7020: CALL_OW 88
7024: GO 7078
// if hollandEscaped then
7026: LD_EXP 17
7030: IFFALSE 7046
// Say ( Burlak , D9-Bur-1b ) else
7032: LD_EXP 22
7036: PPUSH
7037: LD_STRING D9-Bur-1b
7039: PPUSH
7040: CALL_OW 88
7044: GO 7078
// if gladstoneEscaped then
7046: LD_EXP 16
7050: IFFALSE 7066
// Say ( Burlak , D9-Bur-1a ) else
7052: LD_EXP 22
7056: PPUSH
7057: LD_STRING D9-Bur-1a
7059: PPUSH
7060: CALL_OW 88
7064: GO 7078
// Say ( Burlak , D9-Bur-1 ) ;
7066: LD_EXP 22
7070: PPUSH
7071: LD_STRING D9-Bur-1
7073: PPUSH
7074: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7078: LD_INT 35
7080: PPUSH
7081: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
7085: LD_INT 22
7087: PUSH
7088: LD_INT 1
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: PUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PUSH
7101: EMPTY
7102: LIST
7103: LIST
7104: PPUSH
7105: CALL_OW 69
7109: NOT
7110: IFFALSE 7078
// DialogueOn ;
7112: CALL_OW 6
// Say ( Belkov , D10-Bel-1 ) ;
7116: LD_EXP 27
7120: PPUSH
7121: LD_STRING D10-Bel-1
7123: PPUSH
7124: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
7128: LD_EXP 22
7132: PPUSH
7133: LD_STRING D10-Bur-1
7135: PPUSH
7136: CALL_OW 88
// if IsOk ( Belkov ) then
7140: LD_EXP 27
7144: PPUSH
7145: CALL_OW 302
7149: IFFALSE 7165
// Say ( Belkov , D10-Bel-1a ) else
7151: LD_EXP 27
7155: PPUSH
7156: LD_STRING D10-Bel-1a
7158: PPUSH
7159: CALL_OW 88
7163: GO 7238
// if IsOk ( Saseda ) then
7165: LD_EXP 24
7169: PPUSH
7170: CALL_OW 302
7174: IFFALSE 7190
// Say ( Saseda , D10-RSol1-1 ) else
7176: LD_EXP 24
7180: PPUSH
7181: LD_STRING D10-RSol1-1
7183: PPUSH
7184: CALL_OW 88
7188: GO 7238
// if IsOk ( Balei ) then
7190: LD_EXP 26
7194: PPUSH
7195: CALL_OW 302
7199: IFFALSE 7215
// Say ( Balei , D10-RSol1-1 ) else
7201: LD_EXP 26
7205: PPUSH
7206: LD_STRING D10-RSol1-1
7208: PPUSH
7209: CALL_OW 88
7213: GO 7238
// if IsOk ( Jaunzeme ) then
7215: LD_EXP 28
7219: PPUSH
7220: CALL_OW 302
7224: IFFALSE 7238
// Say ( Jaunzeme , D10-RSol1-1 ) ;
7226: LD_EXP 28
7230: PPUSH
7231: LD_STRING D10-RSol1-1
7233: PPUSH
7234: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko ] ;
7238: LD_ADDR_VAR 0 1
7242: PUSH
7243: LD_INT 22
7245: PUSH
7246: LD_INT 3
7248: PUSH
7249: EMPTY
7250: LIST
7251: LIST
7252: PUSH
7253: LD_INT 25
7255: PUSH
7256: LD_INT 1
7258: PUSH
7259: EMPTY
7260: LIST
7261: LIST
7262: PUSH
7263: LD_INT 26
7265: PUSH
7266: LD_INT 1
7268: PUSH
7269: EMPTY
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: PPUSH
7278: CALL_OW 69
7282: PUSH
7283: LD_EXP 22
7287: PUSH
7288: LD_EXP 30
7292: PUSH
7293: EMPTY
7294: LIST
7295: LIST
7296: DIFF
7297: ST_TO_ADDR
// if tmp then
7298: LD_VAR 0 1
7302: IFFALSE 7316
// Say ( Burlak , D10-Bur-2 ) ;
7304: LD_EXP 22
7308: PPUSH
7309: LD_STRING D10-Bur-2
7311: PPUSH
7312: CALL_OW 88
// DialogueOff ;
7316: CALL_OW 7
// if gladstoneEscaped or hollandEscaped then
7320: LD_EXP 16
7324: PUSH
7325: LD_EXP 17
7329: OR
7330: IFFALSE 7341
// ChangeMissionObjectives ( M4b ) else
7332: LD_STRING M4b
7334: PPUSH
7335: CALL_OW 337
7339: GO 7348
// ChangeMissionObjectives ( M4a ) ;
7341: LD_STRING M4a
7343: PPUSH
7344: CALL_OW 337
// canEnd := true ;
7348: LD_ADDR_EXP 19
7352: PUSH
7353: LD_INT 1
7355: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
7356: LD_INT 16
7358: PPUSH
7359: LD_INT 1
7361: PPUSH
7362: CALL_OW 424
// wait ( rand ( 0 0$20 , 0 0$40 ) ) ;
7366: LD_INT 700
7368: PPUSH
7369: LD_INT 1400
7371: PPUSH
7372: CALL_OW 12
7376: PPUSH
7377: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7381: LD_INT 35
7383: PPUSH
7384: CALL_OW 67
// until PlaceUnitArea ( Kirilenkova , kirilenkovaSpawn , true ) ;
7388: LD_EXP 31
7392: PPUSH
7393: LD_INT 12
7395: PPUSH
7396: LD_INT 1
7398: PPUSH
7399: CALL_OW 49
7403: IFFALSE 7381
// wait ( 0 0$2 ) ;
7405: LD_INT 70
7407: PPUSH
7408: CALL_OW 67
// if not See ( 3 , Kirilenkova ) then
7412: LD_INT 3
7414: PPUSH
7415: LD_EXP 31
7419: PPUSH
7420: CALL_OW 292
7424: NOT
7425: IFFALSE 7876
// begin DialogueOn ;
7427: CALL_OW 6
// InGameOn ;
7431: CALL_OW 8
// SayRadioNoFace ( Kirilenkova , D11b-Kir-1 ) ;
7435: LD_EXP 31
7439: PPUSH
7440: LD_STRING D11b-Kir-1
7442: PPUSH
7443: CALL_OW 586
// if IsOk ( Belkov ) then
7447: LD_EXP 27
7451: PPUSH
7452: CALL_OW 302
7456: IFFALSE 7484
// begin Say ( Belkov , D11b-Bel-1 ) ;
7458: LD_EXP 27
7462: PPUSH
7463: LD_STRING D11b-Bel-1
7465: PPUSH
7466: CALL_OW 88
// Say ( Belkov , D11b-Bel-1a ) ;
7470: LD_EXP 27
7474: PPUSH
7475: LD_STRING D11b-Bel-1a
7477: PPUSH
7478: CALL_OW 88
// end else
7482: GO 7557
// if IsOk ( Jaworska ) then
7484: LD_EXP 25
7488: PPUSH
7489: CALL_OW 302
7493: IFFALSE 7509
// Say ( Jaworska , D11b-RFSol1-1 ) else
7495: LD_EXP 25
7499: PPUSH
7500: LD_STRING D11b-RFSol1-1
7502: PPUSH
7503: CALL_OW 88
7507: GO 7557
// if IsOk ( Saseda ) then
7509: LD_EXP 24
7513: PPUSH
7514: CALL_OW 302
7518: IFFALSE 7534
// Say ( Saseda , D11b-RSol1-1 ) else
7520: LD_EXP 24
7524: PPUSH
7525: LD_STRING D11b-RSol1-1
7527: PPUSH
7528: CALL_OW 88
7532: GO 7557
// if IsOk ( Balei ) then
7534: LD_EXP 26
7538: PPUSH
7539: CALL_OW 302
7543: IFFALSE 7557
// Say ( Balei , D11b-RSol1-1 ) ;
7545: LD_EXP 26
7549: PPUSH
7550: LD_STRING D11b-RSol1-1
7552: PPUSH
7553: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , Kirilenkova , 12 ] ] ) then
7557: LD_INT 22
7559: PUSH
7560: LD_INT 0
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 25
7569: PUSH
7570: LD_INT 12
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 91
7579: PUSH
7580: LD_EXP 31
7584: PUSH
7585: LD_INT 12
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: PUSH
7593: EMPTY
7594: LIST
7595: LIST
7596: LIST
7597: PPUSH
7598: CALL_OW 69
7602: IFFALSE 7680
// begin SayRadioNoFace ( Kirilenkova , D11b1-Kir-1 ) ;
7604: LD_EXP 31
7608: PPUSH
7609: LD_STRING D11b1-Kir-1
7611: PPUSH
7612: CALL_OW 586
// if attackedByApe then
7616: LD_EXP 7
7620: IFFALSE 7648
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7622: LD_EXP 22
7626: PPUSH
7627: LD_STRING D11b1-Bur-1
7629: PPUSH
7630: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7634: LD_EXP 27
7638: PPUSH
7639: LD_STRING D11b2-Bel-1
7641: PPUSH
7642: CALL_OW 88
// end else
7646: GO 7678
// if waterfallSpotted then
7648: LD_EXP 8
7652: IFFALSE 7678
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7654: LD_EXP 22
7658: PPUSH
7659: LD_STRING D11b1-Bur-1a
7661: PPUSH
7662: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7666: LD_EXP 27
7670: PPUSH
7671: LD_STRING D11b2-Bel-1
7673: PPUSH
7674: CALL_OW 88
// end ; end else
7678: GO 7722
// begin SayRadioNoFace ( Kirilenkova , D11b2-Kir-1 ) ;
7680: LD_EXP 31
7684: PPUSH
7685: LD_STRING D11b2-Kir-1
7687: PPUSH
7688: CALL_OW 586
// if waterfallSpotted then
7692: LD_EXP 8
7696: IFFALSE 7722
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7698: LD_EXP 22
7702: PPUSH
7703: LD_STRING D11b1-Bur-1a
7705: PPUSH
7706: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7710: LD_EXP 27
7714: PPUSH
7715: LD_STRING D11b2-Bel-1
7717: PPUSH
7718: CALL_OW 88
// end ; end ; if not waterfallSpotted and not attackedByApe then
7722: LD_EXP 8
7726: NOT
7727: PUSH
7728: LD_EXP 7
7732: NOT
7733: AND
7734: IFFALSE 7834
// begin if IsOk ( Belkov ) then
7736: LD_EXP 27
7740: PPUSH
7741: CALL_OW 302
7745: IFFALSE 7761
// Say ( Belkov , D11b1-Bel-1 ) else
7747: LD_EXP 27
7751: PPUSH
7752: LD_STRING D11b1-Bel-1
7754: PPUSH
7755: CALL_OW 88
7759: GO 7834
// if IsOk ( Saseda ) then
7761: LD_EXP 24
7765: PPUSH
7766: CALL_OW 302
7770: IFFALSE 7786
// Say ( Saseda , D11b1-RSol1-1 ) else
7772: LD_EXP 24
7776: PPUSH
7777: LD_STRING D11b1-RSol1-1
7779: PPUSH
7780: CALL_OW 88
7784: GO 7834
// if IsOk ( Jaworska ) then
7786: LD_EXP 25
7790: PPUSH
7791: CALL_OW 302
7795: IFFALSE 7811
// Say ( Jaworska , D11b1-RFSol1-1 ) else
7797: LD_EXP 25
7801: PPUSH
7802: LD_STRING D11b1-RFSol1-1
7804: PPUSH
7805: CALL_OW 88
7809: GO 7834
// if IsOk ( Balei ) then
7811: LD_EXP 26
7815: PPUSH
7816: CALL_OW 302
7820: IFFALSE 7834
// Say ( Balei , D11b1-RSol1-1 ) ;
7822: LD_EXP 26
7826: PPUSH
7827: LD_STRING D11b1-RSol1-1
7829: PPUSH
7830: CALL_OW 88
// end ; DialogueOff ;
7834: CALL_OW 7
// InGameOff ;
7838: CALL_OW 9
// wait ( 1 1$00 - ( 0 0$10 * Difficulty ) ) ;
7842: LD_INT 2100
7844: PUSH
7845: LD_INT 350
7847: PUSH
7848: LD_OWVAR 67
7852: MUL
7853: MINUS
7854: PPUSH
7855: CALL_OW 67
// ComMoveXY ( Kirilenkova , 75 , 95 ) ;
7859: LD_EXP 31
7863: PPUSH
7864: LD_INT 75
7866: PPUSH
7867: LD_INT 95
7869: PPUSH
7870: CALL_OW 111
// end else
7874: GO 8112
// begin DialogueOn ;
7876: CALL_OW 6
// SetSide ( Kirilenkova , 3 ) ;
7880: LD_EXP 31
7884: PPUSH
7885: LD_INT 3
7887: PPUSH
7888: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
7892: LD_EXP 31
7896: PPUSH
7897: CALL_OW 87
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7901: LD_EXP 31
7905: PPUSH
7906: LD_STRING D11a-Kir-1
7908: PPUSH
7909: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
7913: LD_EXP 31
7917: PPUSH
7918: LD_EXP 27
7922: PPUSH
7923: CALL_OW 296
7927: PUSH
7928: LD_INT 8
7930: LESS
7931: IFFALSE 7945
// Say ( Belkov , D11a-Bel-1 ) ;
7933: LD_EXP 27
7937: PPUSH
7938: LD_STRING D11a-Bel-1
7940: PPUSH
7941: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7945: LD_EXP 31
7949: PPUSH
7950: LD_STRING D11a-Kir-2
7952: PPUSH
7953: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
7957: LD_EXP 31
7961: PPUSH
7962: LD_EXP 27
7966: PPUSH
7967: CALL_OW 296
7971: PUSH
7972: LD_INT 8
7974: LESS
7975: IFFALSE 7991
// Say ( Belkov , D11a-Bel-2 ) else
7977: LD_EXP 27
7981: PPUSH
7982: LD_STRING D11a-Bel-2
7984: PPUSH
7985: CALL_OW 88
7989: GO 8091
// if GetDistUnits ( Kirilenkova , Saseda ) < 8 then
7991: LD_EXP 31
7995: PPUSH
7996: LD_EXP 24
8000: PPUSH
8001: CALL_OW 296
8005: PUSH
8006: LD_INT 8
8008: LESS
8009: IFFALSE 8025
// Say ( Saseda , D11a-RSol1-2 ) else
8011: LD_EXP 24
8015: PPUSH
8016: LD_STRING D11a-RSol1-2
8018: PPUSH
8019: CALL_OW 88
8023: GO 8091
// if GetDistUnits ( Kirilenkova , Jaworska ) < 8 then
8025: LD_EXP 31
8029: PPUSH
8030: LD_EXP 25
8034: PPUSH
8035: CALL_OW 296
8039: PUSH
8040: LD_INT 8
8042: LESS
8043: IFFALSE 8059
// Say ( Jaworska , D11a-RFSol1-2 ) else
8045: LD_EXP 25
8049: PPUSH
8050: LD_STRING D11a-RFSol1-2
8052: PPUSH
8053: CALL_OW 88
8057: GO 8091
// if GetDistUnits ( Kirilenkova , Balei ) < 8 then
8059: LD_EXP 31
8063: PPUSH
8064: LD_EXP 26
8068: PPUSH
8069: CALL_OW 296
8073: PUSH
8074: LD_INT 8
8076: LESS
8077: IFFALSE 8091
// Say ( Balei , D11a-RSol1-2 ) ;
8079: LD_EXP 26
8083: PPUSH
8084: LD_STRING D11a-RSol1-2
8086: PPUSH
8087: CALL_OW 88
// DialogueOff ;
8091: CALL_OW 7
// SetAchievement ( ACH_YELENA ) ;
8095: LD_STRING ACH_YELENA
8097: PPUSH
8098: CALL_OW 543
// hasKirilenkova := true ;
8102: LD_ADDR_EXP 5
8106: PUSH
8107: LD_INT 1
8109: ST_TO_ADDR
// exit ;
8110: GO 8409
// end ; p := 0 ;
8112: LD_ADDR_VAR 0 3
8116: PUSH
8117: LD_INT 0
8119: ST_TO_ADDR
// if Difficulty > 2 then
8120: LD_OWVAR 67
8124: PUSH
8125: LD_INT 2
8127: GREATER
8128: IFFALSE 8208
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
8130: LD_INT 5
8132: NEG
8133: PUSH
8134: LD_INT 8
8136: NEG
8137: PUSH
8138: LD_INT 10
8140: NEG
8141: PUSH
8142: LD_INT 12
8144: NEG
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: PUSH
8152: LD_OWVAR 67
8156: ARRAY
8157: PPUSH
8158: CALL 44132 0 1
// ape := CreateHuman ;
8162: LD_ADDR_VAR 0 2
8166: PUSH
8167: CALL_OW 44
8171: ST_TO_ADDR
// PlaceUnitXYR ( ape , 65 , 89 , 2 , false ) ;
8172: LD_VAR 0 2
8176: PPUSH
8177: LD_INT 65
8179: PPUSH
8180: LD_INT 89
8182: PPUSH
8183: LD_INT 2
8185: PPUSH
8186: LD_INT 0
8188: PPUSH
8189: CALL_OW 50
// ComMoveXY ( ape , 74 , 94 ) ;
8193: LD_VAR 0 2
8197: PPUSH
8198: LD_INT 74
8200: PPUSH
8201: LD_INT 94
8203: PPUSH
8204: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
8208: LD_INT 35
8210: PPUSH
8211: CALL_OW 67
// p := Inc ( p ) ;
8215: LD_ADDR_VAR 0 3
8219: PUSH
8220: LD_VAR 0 3
8224: PPUSH
8225: CALL 49301 0 1
8229: ST_TO_ADDR
// if p > 120 and IsOk ( ape ) and not HasTask ( ape ) then
8230: LD_VAR 0 3
8234: PUSH
8235: LD_INT 120
8237: GREATER
8238: PUSH
8239: LD_VAR 0 2
8243: PPUSH
8244: CALL_OW 302
8248: AND
8249: PUSH
8250: LD_VAR 0 2
8254: PPUSH
8255: CALL_OW 314
8259: NOT
8260: AND
8261: IFFALSE 8277
// ComAttackUnit ( ape , Kirilenkova ) ;
8263: LD_VAR 0 2
8267: PPUSH
8268: LD_EXP 31
8272: PPUSH
8273: CALL_OW 115
// until See ( 3 , Kirilenkova ) and IsOk ( Kirilenkova ) ;
8277: LD_INT 3
8279: PPUSH
8280: LD_EXP 31
8284: PPUSH
8285: CALL_OW 292
8289: PUSH
8290: LD_EXP 31
8294: PPUSH
8295: CALL_OW 302
8299: AND
8300: IFFALSE 8208
// if p < 15 then
8302: LD_VAR 0 3
8306: PUSH
8307: LD_INT 15
8309: LESS
8310: IFFALSE 8319
// SetAchievement ( ACH_YELENA ) ;
8312: LD_STRING ACH_YELENA
8314: PPUSH
8315: CALL_OW 543
// ComTurnUnit ( Kirilenkova , Burlak ) ;
8319: LD_EXP 31
8323: PPUSH
8324: LD_EXP 22
8328: PPUSH
8329: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8333: LD_INT 10
8335: PPUSH
8336: CALL_OW 67
// DialogueOn ;
8340: CALL_OW 6
// InGameOn ;
8344: CALL_OW 8
// SetSide ( Kirilenkova , 3 ) ;
8348: LD_EXP 31
8352: PPUSH
8353: LD_INT 3
8355: PPUSH
8356: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8360: LD_EXP 31
8364: PPUSH
8365: CALL_OW 87
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8369: LD_EXP 31
8373: PPUSH
8374: LD_STRING D11c-Kir-1
8376: PPUSH
8377: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8381: LD_EXP 22
8385: PPUSH
8386: LD_STRING D11c-Bur-1
8388: PPUSH
8389: CALL_OW 88
// DialogueOff ;
8393: CALL_OW 7
// InGameOff ;
8397: CALL_OW 9
// hasKirilenkova := true ;
8401: LD_ADDR_EXP 5
8405: PUSH
8406: LD_INT 1
8408: ST_TO_ADDR
// end ;
8409: PPOPN 3
8411: END
// every 0 0$1 trigger joinedToBelkov and not UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_alive ] ) do
8412: LD_EXP 3
8416: PUSH
8417: LD_EXP 24
8421: PUSH
8422: LD_EXP 25
8426: PUSH
8427: LD_EXP 26
8431: PUSH
8432: LD_EXP 27
8436: PUSH
8437: LD_EXP 28
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: LIST
8448: PPUSH
8449: LD_INT 51
8451: PUSH
8452: EMPTY
8453: LIST
8454: PPUSH
8455: CALL_OW 72
8459: NOT
8460: AND
8461: IFFALSE 8473
8463: GO 8465
8465: DISABLE
// begin YouLost ( Comrades ) ;
8466: LD_STRING Comrades
8468: PPUSH
8469: CALL_OW 104
// end ;
8473: END
// every 0 0$1 trigger canEnd and IsInArea ( Burlak , exitArea ) do
8474: LD_EXP 19
8478: PUSH
8479: LD_EXP 22
8483: PPUSH
8484: LD_INT 16
8486: PPUSH
8487: CALL_OW 308
8491: AND
8492: IFFALSE 8877
8494: GO 8496
8496: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8497: LD_INT 22
8499: PUSH
8500: LD_INT 3
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PUSH
8507: LD_INT 21
8509: PUSH
8510: LD_INT 1
8512: PUSH
8513: EMPTY
8514: LIST
8515: LIST
8516: PUSH
8517: LD_INT 50
8519: PUSH
8520: EMPTY
8521: LIST
8522: PUSH
8523: LD_INT 3
8525: PUSH
8526: LD_INT 95
8528: PUSH
8529: LD_INT 16
8531: PUSH
8532: EMPTY
8533: LIST
8534: LIST
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 69
8550: IFFALSE 8559
// Query ( QExit1 ) ;
8552: LD_STRING QExit1
8554: PPUSH
8555: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
8559: LD_INT 35
8561: PPUSH
8562: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) ;
8566: LD_INT 22
8568: PUSH
8569: LD_INT 3
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PUSH
8576: LD_INT 21
8578: PUSH
8579: LD_INT 1
8581: PUSH
8582: EMPTY
8583: LIST
8584: LIST
8585: PUSH
8586: LD_INT 50
8588: PUSH
8589: EMPTY
8590: LIST
8591: PUSH
8592: LD_INT 3
8594: PUSH
8595: LD_INT 95
8597: PUSH
8598: LD_INT 16
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: PUSH
8605: EMPTY
8606: LIST
8607: LIST
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: NOT
8620: IFFALSE 8559
// if NearestUnitToXY ( [ Belkov , Saseda ] , 157 , 118 ) = Belkov and IsOk ( Belkov ) then
8622: LD_EXP 27
8626: PUSH
8627: LD_EXP 24
8631: PUSH
8632: EMPTY
8633: LIST
8634: LIST
8635: PPUSH
8636: LD_INT 157
8638: PPUSH
8639: LD_INT 118
8641: PPUSH
8642: CALL_OW 73
8646: PUSH
8647: LD_EXP 27
8651: EQUAL
8652: PUSH
8653: LD_EXP 27
8657: PPUSH
8658: CALL_OW 302
8662: AND
8663: IFFALSE 8679
// Say ( Belkov , D12-Bel-1 ) else
8665: LD_EXP 27
8669: PPUSH
8670: LD_STRING D12-Bel-1
8672: PPUSH
8673: CALL_OW 88
8677: GO 8727
// if IsOk ( Saseda ) then
8679: LD_EXP 24
8683: PPUSH
8684: CALL_OW 302
8688: IFFALSE 8704
// Say ( Saseda , D12-RSol1-1 ) else
8690: LD_EXP 24
8694: PPUSH
8695: LD_STRING D12-RSol1-1
8697: PPUSH
8698: CALL_OW 88
8702: GO 8727
// if IsOk ( Balei ) then
8704: LD_EXP 26
8708: PPUSH
8709: CALL_OW 302
8713: IFFALSE 8727
// Say ( Balei , D12-RSol1-1 ) ;
8715: LD_EXP 26
8719: PPUSH
8720: LD_STRING D12-RSol1-1
8722: PPUSH
8723: CALL_OW 88
// if apeRadioKilled and not hasGnyevko then
8727: LD_EXP 9
8731: PUSH
8732: LD_EXP 4
8736: NOT
8737: AND
8738: IFFALSE 8873
// begin DialogueOn ;
8740: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
8744: LD_EXP 22
8748: PPUSH
8749: LD_STRING D12-Bur-1
8751: PPUSH
8752: CALL_OW 88
// Say ( Belkov , D12-Bel-2 ) ;
8756: LD_EXP 27
8760: PPUSH
8761: LD_STRING D12-Bel-2
8763: PPUSH
8764: CALL_OW 88
// DialogueOff ;
8768: CALL_OW 7
// if Query ( QExit2 ) = 1 then
8772: LD_STRING QExit2
8774: PPUSH
8775: CALL_OW 97
8779: PUSH
8780: LD_INT 1
8782: EQUAL
8783: IFFALSE 8791
// begin FinishMission ;
8785: CALL 8878 0 0
// exit ;
8789: GO 8877
// end ; repeat wait ( 0 0$3 ) ;
8791: LD_INT 105
8793: PPUSH
8794: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8798: LD_INT 22
8800: PUSH
8801: LD_INT 3
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: LD_INT 21
8810: PUSH
8811: LD_INT 1
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: PUSH
8818: LD_INT 50
8820: PUSH
8821: EMPTY
8822: LIST
8823: PUSH
8824: LD_INT 3
8826: PUSH
8827: LD_INT 95
8829: PUSH
8830: LD_INT 16
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: PPUSH
8847: CALL_OW 69
8851: NOT
8852: IFFALSE 8869
// if Query ( QExit2 ) = 1 then
8854: LD_STRING QExit2
8856: PPUSH
8857: CALL_OW 97
8861: PUSH
8862: LD_INT 1
8864: EQUAL
8865: IFFALSE 8869
// break ;
8867: GO 8873
// until false ;
8869: LD_INT 0
8871: IFFALSE 8791
// end ; FinishMission ;
8873: CALL 8878 0 0
// end ;
8877: END
// function FinishMission ; begin
8878: LD_INT 0
8880: PPUSH
// if tick <= 4 4$00 then
8881: LD_OWVAR 1
8885: PUSH
8886: LD_INT 8400
8888: LESSEQUAL
8889: IFFALSE 8898
// SetAchievement ( ACH_RSPEED_1 ) ;
8891: LD_STRING ACH_RSPEED_1
8893: PPUSH
8894: CALL_OW 543
// if not someoneGetsHurt then
8898: LD_EXP 21
8902: NOT
8903: IFFALSE 8912
// SetAchievement ( ACH_BANDAGE ) ;
8905: LD_STRING ACH_BANDAGE
8907: PPUSH
8908: CALL_OW 543
// if gladstoneEscaped and ( hollandEscaped or frankEscaped ) then
8912: LD_EXP 16
8916: PUSH
8917: LD_EXP 17
8921: PUSH
8922: LD_EXP 18
8926: OR
8927: AND
8928: IFFALSE 8943
// AddMedal ( NoEscape , - 3 ) else
8930: LD_STRING NoEscape
8932: PPUSH
8933: LD_INT 3
8935: NEG
8936: PPUSH
8937: CALL_OW 101
8941: GO 8997
// if gladstoneEscaped then
8943: LD_EXP 16
8947: IFFALSE 8962
// AddMedal ( NoEscape , - 1 ) else
8949: LD_STRING NoEscape
8951: PPUSH
8952: LD_INT 1
8954: NEG
8955: PPUSH
8956: CALL_OW 101
8960: GO 8997
// if hollandEscaped or frankEscaped then
8962: LD_EXP 17
8966: PUSH
8967: LD_EXP 18
8971: OR
8972: IFFALSE 8987
// AddMedal ( NoEscape , - 2 ) else
8974: LD_STRING NoEscape
8976: PPUSH
8977: LD_INT 2
8979: NEG
8980: PPUSH
8981: CALL_OW 101
8985: GO 8997
// AddMedal ( NoEscape , 1 ) ;
8987: LD_STRING NoEscape
8989: PPUSH
8990: LD_INT 1
8992: PPUSH
8993: CALL_OW 101
// if hasGnyevko and IsOk ( Gnyevko ) and hasKirilenkova and IsOk ( Kirilenkova ) then
8997: LD_EXP 4
9001: PUSH
9002: LD_EXP 30
9006: PPUSH
9007: CALL_OW 302
9011: AND
9012: PUSH
9013: LD_EXP 5
9017: AND
9018: PUSH
9019: LD_EXP 31
9023: PPUSH
9024: CALL_OW 302
9028: AND
9029: IFFALSE 9043
// AddMedal ( Gnyevko , 1 ) else
9031: LD_STRING Gnyevko
9033: PPUSH
9034: LD_INT 1
9036: PPUSH
9037: CALL_OW 101
9041: GO 9142
// if not IsOk ( Gnyevko ) and not IsOk ( Kirilenkova ) then
9043: LD_EXP 30
9047: PPUSH
9048: CALL_OW 302
9052: NOT
9053: PUSH
9054: LD_EXP 31
9058: PPUSH
9059: CALL_OW 302
9063: NOT
9064: AND
9065: IFFALSE 9080
// AddMedal ( Gnyevko , - 3 ) else
9067: LD_STRING Gnyevko
9069: PPUSH
9070: LD_INT 3
9072: NEG
9073: PPUSH
9074: CALL_OW 101
9078: GO 9142
// if not hasGnyevko then
9080: LD_EXP 4
9084: NOT
9085: IFFALSE 9100
// AddMedal ( Gnyevko , - 1 ) else
9087: LD_STRING Gnyevko
9089: PPUSH
9090: LD_INT 1
9092: NEG
9093: PPUSH
9094: CALL_OW 101
9098: GO 9142
// if not IsOk ( Gnyevko ) or not IsOk ( Kirilenkova ) or not hasKirilenkova then
9100: LD_EXP 30
9104: PPUSH
9105: CALL_OW 302
9109: NOT
9110: PUSH
9111: LD_EXP 31
9115: PPUSH
9116: CALL_OW 302
9120: NOT
9121: OR
9122: PUSH
9123: LD_EXP 5
9127: NOT
9128: OR
9129: IFFALSE 9142
// AddMedal ( Gnyevko , - 2 ) ;
9131: LD_STRING Gnyevko
9133: PPUSH
9134: LD_INT 2
9136: NEG
9137: PPUSH
9138: CALL_OW 101
// if loseCounter then
9142: LD_EXP 20
9146: IFFALSE 9161
// AddMedal ( NoLosses , - 1 ) else
9148: LD_STRING NoLosses
9150: PPUSH
9151: LD_INT 1
9153: NEG
9154: PPUSH
9155: CALL_OW 101
9159: GO 9171
// AddMedal ( NoLosses , 1 ) ;
9161: LD_STRING NoLosses
9163: PPUSH
9164: LD_INT 1
9166: PPUSH
9167: CALL_OW 101
// GiveMedals ( MAIN ) ;
9171: LD_STRING MAIN
9173: PPUSH
9174: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) ;
9178: LD_INT 22
9180: PUSH
9181: LD_INT 3
9183: PUSH
9184: EMPTY
9185: LIST
9186: LIST
9187: PUSH
9188: LD_INT 21
9190: PUSH
9191: LD_INT 1
9193: PUSH
9194: EMPTY
9195: LIST
9196: LIST
9197: PUSH
9198: LD_INT 50
9200: PUSH
9201: EMPTY
9202: LIST
9203: PUSH
9204: LD_INT 23
9206: PUSH
9207: LD_INT 3
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: EMPTY
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: PPUSH
9220: CALL_OW 69
9224: PPUSH
9225: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
9229: LD_EXP 22
9233: PPUSH
9234: LD_EXP 2
9238: PUSH
9239: LD_STRING Burlak
9241: STR
9242: PPUSH
9243: CALL_OW 38
// if IsOk ( Gnyevko ) and hasGnyevko then
9247: LD_EXP 30
9251: PPUSH
9252: CALL_OW 302
9256: PUSH
9257: LD_EXP 4
9261: AND
9262: IFFALSE 9282
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
9264: LD_EXP 30
9268: PPUSH
9269: LD_EXP 2
9273: PUSH
9274: LD_STRING Gnyevko
9276: STR
9277: PPUSH
9278: CALL_OW 38
// if IsOk ( Belkov ) then
9282: LD_EXP 27
9286: PPUSH
9287: CALL_OW 302
9291: IFFALSE 9311
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
9293: LD_EXP 27
9297: PPUSH
9298: LD_EXP 2
9302: PUSH
9303: LD_STRING Belkov
9305: STR
9306: PPUSH
9307: CALL_OW 38
// if IsOk ( Kirilenkova ) and hasKirilenkova then
9311: LD_EXP 31
9315: PPUSH
9316: CALL_OW 302
9320: PUSH
9321: LD_EXP 5
9325: AND
9326: IFFALSE 9346
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
9328: LD_EXP 31
9332: PPUSH
9333: LD_EXP 2
9337: PUSH
9338: LD_STRING Kirilenkova
9340: STR
9341: PPUSH
9342: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] , 01_belkovTeam ) ;
9346: LD_INT 22
9348: PUSH
9349: LD_INT 3
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PUSH
9356: LD_INT 50
9358: PUSH
9359: EMPTY
9360: LIST
9361: PUSH
9362: LD_INT 21
9364: PUSH
9365: LD_INT 1
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: PUSH
9372: EMPTY
9373: LIST
9374: LIST
9375: LIST
9376: PPUSH
9377: CALL_OW 69
9381: PUSH
9382: LD_EXP 22
9386: PUSH
9387: LD_EXP 30
9391: PUSH
9392: LD_EXP 27
9396: PUSH
9397: LD_EXP 31
9401: PUSH
9402: EMPTY
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: DIFF
9408: PPUSH
9409: LD_STRING 01_belkovTeam
9411: PPUSH
9412: CALL_OW 38
// YouWin ;
9416: CALL_OW 103
// end ; end_of_file
9420: LD_VAR 0 1
9424: RET
// export function SendApemanAttack ; var ape ; begin
9425: LD_INT 0
9427: PPUSH
9428: PPUSH
// PrepareApeman ( 0 ) ;
9429: LD_INT 0
9431: PPUSH
9432: CALL 44132 0 1
// ape := CreateHuman ;
9436: LD_ADDR_VAR 0 2
9440: PUSH
9441: CALL_OW 44
9445: ST_TO_ADDR
// PlaceUnitXY ( ape , 65 , 89 , false ) ;
9446: LD_VAR 0 2
9450: PPUSH
9451: LD_INT 65
9453: PPUSH
9454: LD_INT 89
9456: PPUSH
9457: LD_INT 0
9459: PPUSH
9460: CALL_OW 48
// ComMoveUnit ( ape , Burlak ) ;
9464: LD_VAR 0 2
9468: PPUSH
9469: LD_EXP 22
9473: PPUSH
9474: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9478: LD_INT 35
9480: PPUSH
9481: CALL_OW 67
// if joinedToBelkov then
9485: LD_EXP 3
9489: IFFALSE 9508
// begin ComMoveXY ( ape , 66 , 90 ) ;
9491: LD_VAR 0 2
9495: PPUSH
9496: LD_INT 66
9498: PPUSH
9499: LD_INT 90
9501: PPUSH
9502: CALL_OW 111
// exit ;
9506: GO 9689
// end ; until GetDistUnits ( ape , Burlak ) < 5 ;
9508: LD_VAR 0 2
9512: PPUSH
9513: LD_EXP 22
9517: PPUSH
9518: CALL_OW 296
9522: PUSH
9523: LD_INT 5
9525: LESS
9526: IFFALSE 9478
// wait ( 0 0$0.3 ) ;
9528: LD_INT 10
9530: PPUSH
9531: CALL_OW 67
// ComTurnUnit ( ape , Burlak ) ;
9535: LD_VAR 0 2
9539: PPUSH
9540: LD_EXP 22
9544: PPUSH
9545: CALL_OW 119
// if HasTask ( Burlak ) then
9549: LD_EXP 22
9553: PPUSH
9554: CALL_OW 314
9558: IFFALSE 9569
// wait ( 0 0$3 ) else
9560: LD_INT 105
9562: PPUSH
9563: CALL_OW 67
9567: GO 9576
// wait ( 0 0$10 ) ;
9569: LD_INT 350
9571: PPUSH
9572: CALL_OW 67
// if See ( 6 , ape ) or joinedToBelkov then
9576: LD_INT 6
9578: PPUSH
9579: LD_VAR 0 2
9583: PPUSH
9584: CALL_OW 292
9588: PUSH
9589: LD_EXP 3
9593: OR
9594: IFFALSE 9613
// begin ComMoveXY ( ape , 66 , 90 ) ;
9596: LD_VAR 0 2
9600: PPUSH
9601: LD_INT 66
9603: PPUSH
9604: LD_INT 90
9606: PPUSH
9607: CALL_OW 111
// exit ;
9611: GO 9689
// end ; ComAttackUnit ( ape , Burlak ) ;
9613: LD_VAR 0 2
9617: PPUSH
9618: LD_EXP 22
9622: PPUSH
9623: CALL_OW 115
// repeat wait ( 1 ) ;
9627: LD_INT 1
9629: PPUSH
9630: CALL_OW 67
// until GetLives ( ape ) < 980 and UnitShoot ( ape ) = Burlak and UnitInBattle ( ape ) ;
9634: LD_VAR 0 2
9638: PPUSH
9639: CALL_OW 256
9643: PUSH
9644: LD_INT 980
9646: LESS
9647: PUSH
9648: LD_VAR 0 2
9652: PPUSH
9653: CALL_OW 504
9657: PUSH
9658: LD_EXP 22
9662: EQUAL
9663: AND
9664: PUSH
9665: LD_VAR 0 2
9669: PPUSH
9670: CALL_OW 583
9674: AND
9675: IFFALSE 9627
// SetLives ( ape , 200 ) ;
9677: LD_VAR 0 2
9681: PPUSH
9682: LD_INT 200
9684: PPUSH
9685: CALL_OW 234
// end ;
9689: LD_VAR 0 1
9693: RET
// export function CreateNature ; var i , ape , r ; begin
9694: LD_INT 0
9696: PPUSH
9697: PPUSH
9698: PPUSH
9699: PPUSH
// PrepareNature ( 5 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 5 , 1 , 0 , 3 , natureArea , waterArea ) ;
9700: LD_INT 5
9702: PPUSH
9703: LD_INT 3
9705: PUSH
9706: LD_INT 4
9708: PUSH
9709: LD_INT 5
9711: PUSH
9712: LD_INT 6
9714: PUSH
9715: EMPTY
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: PUSH
9721: LD_OWVAR 67
9725: ARRAY
9726: PPUSH
9727: LD_INT 0
9729: PPUSH
9730: LD_INT 5
9732: PPUSH
9733: LD_INT 1
9735: PPUSH
9736: LD_INT 0
9738: PPUSH
9739: LD_INT 3
9741: PPUSH
9742: LD_INT 7
9744: PPUSH
9745: LD_INT 8
9747: PPUSH
9748: CALL 44617 0 9
// r := rand ( 1 , 3 ) ;
9752: LD_ADDR_VAR 0 4
9756: PUSH
9757: LD_INT 1
9759: PPUSH
9760: LD_INT 3
9762: PPUSH
9763: CALL_OW 12
9767: ST_TO_ADDR
// for i := 1 to 3 do
9768: LD_ADDR_VAR 0 2
9772: PUSH
9773: DOUBLE
9774: LD_INT 1
9776: DEC
9777: ST_TO_ADDR
9778: LD_INT 3
9780: PUSH
9781: FOR_TO
9782: IFFALSE 9873
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
9784: LD_INT 5
9786: NEG
9787: PUSH
9788: LD_INT 8
9790: NEG
9791: PUSH
9792: LD_INT 10
9794: NEG
9795: PUSH
9796: LD_INT 12
9798: NEG
9799: PUSH
9800: EMPTY
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: PUSH
9806: LD_OWVAR 67
9810: ARRAY
9811: PPUSH
9812: CALL 44132 0 1
// ape := CreateHuman ;
9816: LD_ADDR_VAR 0 3
9820: PUSH
9821: CALL_OW 44
9825: ST_TO_ADDR
// if i = r then
9826: LD_VAR 0 2
9830: PUSH
9831: LD_VAR 0 4
9835: EQUAL
9836: IFFALSE 9850
// SetTag ( i , tApeRadio ) ;
9838: LD_VAR 0 2
9842: PPUSH
9843: LD_INT 1
9845: PPUSH
9846: CALL_OW 109
// PlaceUnitXYR ( ape , 66 , 92 , 3 , false ) ;
9850: LD_VAR 0 3
9854: PPUSH
9855: LD_INT 66
9857: PPUSH
9858: LD_INT 92
9860: PPUSH
9861: LD_INT 3
9863: PPUSH
9864: LD_INT 0
9866: PPUSH
9867: CALL_OW 50
// end ;
9871: GO 9781
9873: POP
9874: POP
// end ;
9875: LD_VAR 0 1
9879: RET
// export function MoveToHill ; begin
9880: LD_INT 0
9882: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
9883: LD_EXP 23
9887: PPUSH
9888: LD_INT 65
9890: PPUSH
9891: LD_INT 59
9893: PPUSH
9894: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
9898: LD_EXP 23
9902: PPUSH
9903: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
9907: LD_EXP 24
9911: PPUSH
9912: LD_INT 65
9914: PPUSH
9915: LD_INT 58
9917: PPUSH
9918: CALL_OW 111
// AddComCrawl ( Saseda ) ;
9922: LD_EXP 24
9926: PPUSH
9927: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
9931: LD_EXP 25
9935: PPUSH
9936: LD_INT 64
9938: PPUSH
9939: LD_INT 57
9941: PPUSH
9942: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
9946: LD_EXP 25
9950: PPUSH
9951: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
9955: LD_EXP 26
9959: PPUSH
9960: LD_INT 64
9962: PPUSH
9963: LD_INT 56
9965: PPUSH
9966: CALL_OW 111
// AddComCrawl ( Balei ) ;
9970: LD_EXP 26
9974: PPUSH
9975: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
9979: LD_EXP 27
9983: PPUSH
9984: LD_INT 63
9986: PPUSH
9987: LD_INT 55
9989: PPUSH
9990: CALL_OW 111
// AddComCrawl ( Belkov ) ;
9994: LD_EXP 27
9998: PPUSH
9999: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10003: LD_EXP 28
10007: PPUSH
10008: LD_INT 66
10010: PPUSH
10011: LD_INT 58
10013: PPUSH
10014: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10018: LD_EXP 28
10022: PPUSH
10023: CALL_OW 197
// if hasGnyevko and IsOk ( Gnyevko ) then
10027: LD_EXP 4
10031: PUSH
10032: LD_EXP 30
10036: PPUSH
10037: CALL_OW 302
10041: AND
10042: IFFALSE 10068
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10044: LD_EXP 30
10048: PPUSH
10049: LD_INT 63
10051: PPUSH
10052: LD_INT 54
10054: PPUSH
10055: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10059: LD_EXP 30
10063: PPUSH
10064: CALL_OW 197
// end ; end ; end_of_file
10068: LD_VAR 0 1
10072: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10073: LD_INT 0
10075: PPUSH
10076: PPUSH
// if exist_mode then
10077: LD_VAR 0 2
10081: IFFALSE 10127
// begin unit := CreateCharacter ( prefix & ident ) ;
10083: LD_ADDR_VAR 0 5
10087: PUSH
10088: LD_VAR 0 3
10092: PUSH
10093: LD_VAR 0 1
10097: STR
10098: PPUSH
10099: CALL_OW 34
10103: ST_TO_ADDR
// if unit then
10104: LD_VAR 0 5
10108: IFFALSE 10125
// DeleteCharacters ( prefix & ident ) ;
10110: LD_VAR 0 3
10114: PUSH
10115: LD_VAR 0 1
10119: STR
10120: PPUSH
10121: CALL_OW 40
// end else
10125: GO 10142
// unit := NewCharacter ( ident ) ;
10127: LD_ADDR_VAR 0 5
10131: PUSH
10132: LD_VAR 0 1
10136: PPUSH
10137: CALL_OW 25
10141: ST_TO_ADDR
// result := unit ;
10142: LD_ADDR_VAR 0 4
10146: PUSH
10147: LD_VAR 0 5
10151: ST_TO_ADDR
// end ;
10152: LD_VAR 0 4
10156: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10157: LD_INT 0
10159: PPUSH
10160: PPUSH
// if exist_mode then
10161: LD_VAR 0 2
10165: IFFALSE 10190
// unit := CreateCharacter ( prefix & ident ) else
10167: LD_ADDR_VAR 0 5
10171: PUSH
10172: LD_VAR 0 3
10176: PUSH
10177: LD_VAR 0 1
10181: STR
10182: PPUSH
10183: CALL_OW 34
10187: ST_TO_ADDR
10188: GO 10205
// unit := NewCharacter ( ident ) ;
10190: LD_ADDR_VAR 0 5
10194: PUSH
10195: LD_VAR 0 1
10199: PPUSH
10200: CALL_OW 25
10204: ST_TO_ADDR
// result := unit ;
10205: LD_ADDR_VAR 0 4
10209: PUSH
10210: LD_VAR 0 5
10214: ST_TO_ADDR
// end ;
10215: LD_VAR 0 4
10219: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10220: LD_INT 0
10222: PPUSH
10223: PPUSH
// if not side or not nation then
10224: LD_VAR 0 1
10228: NOT
10229: PUSH
10230: LD_VAR 0 2
10234: NOT
10235: OR
10236: IFFALSE 10240
// exit ;
10238: GO 11008
// case nation of nation_american :
10240: LD_VAR 0 2
10244: PUSH
10245: LD_INT 1
10247: DOUBLE
10248: EQUAL
10249: IFTRUE 10253
10251: GO 10467
10253: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
10254: LD_ADDR_VAR 0 4
10258: PUSH
10259: LD_INT 35
10261: PUSH
10262: LD_INT 45
10264: PUSH
10265: LD_INT 46
10267: PUSH
10268: LD_INT 47
10270: PUSH
10271: LD_INT 82
10273: PUSH
10274: LD_INT 83
10276: PUSH
10277: LD_INT 84
10279: PUSH
10280: LD_INT 85
10282: PUSH
10283: LD_INT 86
10285: PUSH
10286: LD_INT 1
10288: PUSH
10289: LD_INT 2
10291: PUSH
10292: LD_INT 6
10294: PUSH
10295: LD_INT 15
10297: PUSH
10298: LD_INT 16
10300: PUSH
10301: LD_INT 7
10303: PUSH
10304: LD_INT 12
10306: PUSH
10307: LD_INT 13
10309: PUSH
10310: LD_INT 10
10312: PUSH
10313: LD_INT 14
10315: PUSH
10316: LD_INT 20
10318: PUSH
10319: LD_INT 21
10321: PUSH
10322: LD_INT 22
10324: PUSH
10325: LD_INT 25
10327: PUSH
10328: LD_INT 32
10330: PUSH
10331: LD_INT 27
10333: PUSH
10334: LD_INT 36
10336: PUSH
10337: LD_INT 69
10339: PUSH
10340: LD_INT 39
10342: PUSH
10343: LD_INT 34
10345: PUSH
10346: LD_INT 40
10348: PUSH
10349: LD_INT 48
10351: PUSH
10352: LD_INT 49
10354: PUSH
10355: LD_INT 50
10357: PUSH
10358: LD_INT 51
10360: PUSH
10361: LD_INT 52
10363: PUSH
10364: LD_INT 53
10366: PUSH
10367: LD_INT 54
10369: PUSH
10370: LD_INT 55
10372: PUSH
10373: LD_INT 56
10375: PUSH
10376: LD_INT 57
10378: PUSH
10379: LD_INT 58
10381: PUSH
10382: LD_INT 59
10384: PUSH
10385: LD_INT 60
10387: PUSH
10388: LD_INT 61
10390: PUSH
10391: LD_INT 62
10393: PUSH
10394: LD_INT 80
10396: PUSH
10397: LD_INT 82
10399: PUSH
10400: LD_INT 83
10402: PUSH
10403: LD_INT 84
10405: PUSH
10406: LD_INT 85
10408: PUSH
10409: LD_INT 86
10411: PUSH
10412: EMPTY
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: ST_TO_ADDR
10465: GO 10932
10467: LD_INT 2
10469: DOUBLE
10470: EQUAL
10471: IFTRUE 10475
10473: GO 10701
10475: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
10476: LD_ADDR_VAR 0 4
10480: PUSH
10481: LD_INT 35
10483: PUSH
10484: LD_INT 45
10486: PUSH
10487: LD_INT 46
10489: PUSH
10490: LD_INT 47
10492: PUSH
10493: LD_INT 82
10495: PUSH
10496: LD_INT 83
10498: PUSH
10499: LD_INT 84
10501: PUSH
10502: LD_INT 85
10504: PUSH
10505: LD_INT 87
10507: PUSH
10508: LD_INT 70
10510: PUSH
10511: LD_INT 1
10513: PUSH
10514: LD_INT 11
10516: PUSH
10517: LD_INT 3
10519: PUSH
10520: LD_INT 4
10522: PUSH
10523: LD_INT 5
10525: PUSH
10526: LD_INT 6
10528: PUSH
10529: LD_INT 15
10531: PUSH
10532: LD_INT 18
10534: PUSH
10535: LD_INT 7
10537: PUSH
10538: LD_INT 17
10540: PUSH
10541: LD_INT 8
10543: PUSH
10544: LD_INT 20
10546: PUSH
10547: LD_INT 21
10549: PUSH
10550: LD_INT 22
10552: PUSH
10553: LD_INT 72
10555: PUSH
10556: LD_INT 26
10558: PUSH
10559: LD_INT 69
10561: PUSH
10562: LD_INT 39
10564: PUSH
10565: LD_INT 40
10567: PUSH
10568: LD_INT 41
10570: PUSH
10571: LD_INT 42
10573: PUSH
10574: LD_INT 43
10576: PUSH
10577: LD_INT 48
10579: PUSH
10580: LD_INT 49
10582: PUSH
10583: LD_INT 50
10585: PUSH
10586: LD_INT 51
10588: PUSH
10589: LD_INT 52
10591: PUSH
10592: LD_INT 53
10594: PUSH
10595: LD_INT 54
10597: PUSH
10598: LD_INT 55
10600: PUSH
10601: LD_INT 56
10603: PUSH
10604: LD_INT 60
10606: PUSH
10607: LD_INT 61
10609: PUSH
10610: LD_INT 62
10612: PUSH
10613: LD_INT 66
10615: PUSH
10616: LD_INT 67
10618: PUSH
10619: LD_INT 68
10621: PUSH
10622: LD_INT 81
10624: PUSH
10625: LD_INT 82
10627: PUSH
10628: LD_INT 83
10630: PUSH
10631: LD_INT 84
10633: PUSH
10634: LD_INT 85
10636: PUSH
10637: LD_INT 87
10639: PUSH
10640: LD_INT 88
10642: PUSH
10643: EMPTY
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: ST_TO_ADDR
10699: GO 10932
10701: LD_INT 3
10703: DOUBLE
10704: EQUAL
10705: IFTRUE 10709
10707: GO 10931
10709: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
10710: LD_ADDR_VAR 0 4
10714: PUSH
10715: LD_INT 46
10717: PUSH
10718: LD_INT 47
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: LD_INT 2
10726: PUSH
10727: LD_INT 82
10729: PUSH
10730: LD_INT 83
10732: PUSH
10733: LD_INT 84
10735: PUSH
10736: LD_INT 85
10738: PUSH
10739: LD_INT 86
10741: PUSH
10742: LD_INT 11
10744: PUSH
10745: LD_INT 9
10747: PUSH
10748: LD_INT 20
10750: PUSH
10751: LD_INT 19
10753: PUSH
10754: LD_INT 21
10756: PUSH
10757: LD_INT 24
10759: PUSH
10760: LD_INT 22
10762: PUSH
10763: LD_INT 25
10765: PUSH
10766: LD_INT 28
10768: PUSH
10769: LD_INT 29
10771: PUSH
10772: LD_INT 30
10774: PUSH
10775: LD_INT 31
10777: PUSH
10778: LD_INT 37
10780: PUSH
10781: LD_INT 38
10783: PUSH
10784: LD_INT 32
10786: PUSH
10787: LD_INT 27
10789: PUSH
10790: LD_INT 33
10792: PUSH
10793: LD_INT 69
10795: PUSH
10796: LD_INT 39
10798: PUSH
10799: LD_INT 34
10801: PUSH
10802: LD_INT 40
10804: PUSH
10805: LD_INT 71
10807: PUSH
10808: LD_INT 23
10810: PUSH
10811: LD_INT 44
10813: PUSH
10814: LD_INT 48
10816: PUSH
10817: LD_INT 49
10819: PUSH
10820: LD_INT 50
10822: PUSH
10823: LD_INT 51
10825: PUSH
10826: LD_INT 52
10828: PUSH
10829: LD_INT 53
10831: PUSH
10832: LD_INT 54
10834: PUSH
10835: LD_INT 55
10837: PUSH
10838: LD_INT 56
10840: PUSH
10841: LD_INT 57
10843: PUSH
10844: LD_INT 58
10846: PUSH
10847: LD_INT 59
10849: PUSH
10850: LD_INT 63
10852: PUSH
10853: LD_INT 64
10855: PUSH
10856: LD_INT 65
10858: PUSH
10859: LD_INT 82
10861: PUSH
10862: LD_INT 83
10864: PUSH
10865: LD_INT 84
10867: PUSH
10868: LD_INT 85
10870: PUSH
10871: LD_INT 86
10873: PUSH
10874: EMPTY
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: ST_TO_ADDR
10929: GO 10932
10931: POP
// if state > - 1 and state < 3 then
10932: LD_VAR 0 3
10936: PUSH
10937: LD_INT 1
10939: NEG
10940: GREATER
10941: PUSH
10942: LD_VAR 0 3
10946: PUSH
10947: LD_INT 3
10949: LESS
10950: AND
10951: IFFALSE 11008
// for i in result do
10953: LD_ADDR_VAR 0 5
10957: PUSH
10958: LD_VAR 0 4
10962: PUSH
10963: FOR_IN
10964: IFFALSE 11006
// if GetTech ( i , side ) <> state then
10966: LD_VAR 0 5
10970: PPUSH
10971: LD_VAR 0 1
10975: PPUSH
10976: CALL_OW 321
10980: PUSH
10981: LD_VAR 0 3
10985: NONEQUAL
10986: IFFALSE 11004
// result := result diff i ;
10988: LD_ADDR_VAR 0 4
10992: PUSH
10993: LD_VAR 0 4
10997: PUSH
10998: LD_VAR 0 5
11002: DIFF
11003: ST_TO_ADDR
11004: GO 10963
11006: POP
11007: POP
// end ;
11008: LD_VAR 0 4
11012: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11013: LD_INT 0
11015: PPUSH
11016: PPUSH
11017: PPUSH
// result := true ;
11018: LD_ADDR_VAR 0 3
11022: PUSH
11023: LD_INT 1
11025: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11026: LD_ADDR_VAR 0 5
11030: PUSH
11031: LD_VAR 0 2
11035: PPUSH
11036: CALL_OW 480
11040: ST_TO_ADDR
// if not tmp then
11041: LD_VAR 0 5
11045: NOT
11046: IFFALSE 11050
// exit ;
11048: GO 11099
// for i in tmp do
11050: LD_ADDR_VAR 0 4
11054: PUSH
11055: LD_VAR 0 5
11059: PUSH
11060: FOR_IN
11061: IFFALSE 11097
// if GetTech ( i , side ) <> state_researched then
11063: LD_VAR 0 4
11067: PPUSH
11068: LD_VAR 0 1
11072: PPUSH
11073: CALL_OW 321
11077: PUSH
11078: LD_INT 2
11080: NONEQUAL
11081: IFFALSE 11095
// begin result := false ;
11083: LD_ADDR_VAR 0 3
11087: PUSH
11088: LD_INT 0
11090: ST_TO_ADDR
// exit ;
11091: POP
11092: POP
11093: GO 11099
// end ;
11095: GO 11060
11097: POP
11098: POP
// end ;
11099: LD_VAR 0 3
11103: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11104: LD_INT 0
11106: PPUSH
11107: PPUSH
11108: PPUSH
11109: PPUSH
11110: PPUSH
11111: PPUSH
11112: PPUSH
11113: PPUSH
11114: PPUSH
11115: PPUSH
11116: PPUSH
11117: PPUSH
11118: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11119: LD_VAR 0 1
11123: NOT
11124: PUSH
11125: LD_VAR 0 1
11129: PPUSH
11130: CALL_OW 257
11134: PUSH
11135: LD_INT 9
11137: NONEQUAL
11138: OR
11139: IFFALSE 11143
// exit ;
11141: GO 11716
// side := GetSide ( unit ) ;
11143: LD_ADDR_VAR 0 9
11147: PUSH
11148: LD_VAR 0 1
11152: PPUSH
11153: CALL_OW 255
11157: ST_TO_ADDR
// tech_space := tech_spacanom ;
11158: LD_ADDR_VAR 0 12
11162: PUSH
11163: LD_INT 29
11165: ST_TO_ADDR
// tech_time := tech_taurad ;
11166: LD_ADDR_VAR 0 13
11170: PUSH
11171: LD_INT 28
11173: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11174: LD_ADDR_VAR 0 11
11178: PUSH
11179: LD_VAR 0 1
11183: PPUSH
11184: CALL_OW 310
11188: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11189: LD_VAR 0 11
11193: PPUSH
11194: CALL_OW 247
11198: PUSH
11199: LD_INT 2
11201: EQUAL
11202: IFFALSE 11206
// exit ;
11204: GO 11716
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11206: LD_ADDR_VAR 0 8
11210: PUSH
11211: LD_INT 81
11213: PUSH
11214: LD_VAR 0 9
11218: PUSH
11219: EMPTY
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 3
11225: PUSH
11226: LD_INT 21
11228: PUSH
11229: LD_INT 3
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: PUSH
11236: EMPTY
11237: LIST
11238: LIST
11239: PUSH
11240: EMPTY
11241: LIST
11242: LIST
11243: PPUSH
11244: CALL_OW 69
11248: ST_TO_ADDR
// if not tmp then
11249: LD_VAR 0 8
11253: NOT
11254: IFFALSE 11258
// exit ;
11256: GO 11716
// if in_unit then
11258: LD_VAR 0 11
11262: IFFALSE 11286
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11264: LD_ADDR_VAR 0 10
11268: PUSH
11269: LD_VAR 0 8
11273: PPUSH
11274: LD_VAR 0 11
11278: PPUSH
11279: CALL_OW 74
11283: ST_TO_ADDR
11284: GO 11306
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11286: LD_ADDR_VAR 0 10
11290: PUSH
11291: LD_VAR 0 8
11295: PPUSH
11296: LD_VAR 0 1
11300: PPUSH
11301: CALL_OW 74
11305: ST_TO_ADDR
// if not enemy then
11306: LD_VAR 0 10
11310: NOT
11311: IFFALSE 11315
// exit ;
11313: GO 11716
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11315: LD_VAR 0 11
11319: PUSH
11320: LD_VAR 0 11
11324: PPUSH
11325: LD_VAR 0 10
11329: PPUSH
11330: CALL_OW 296
11334: PUSH
11335: LD_INT 13
11337: GREATER
11338: AND
11339: PUSH
11340: LD_VAR 0 1
11344: PPUSH
11345: LD_VAR 0 10
11349: PPUSH
11350: CALL_OW 296
11354: PUSH
11355: LD_INT 12
11357: GREATER
11358: OR
11359: IFFALSE 11363
// exit ;
11361: GO 11716
// missile := [ 1 ] ;
11363: LD_ADDR_VAR 0 14
11367: PUSH
11368: LD_INT 1
11370: PUSH
11371: EMPTY
11372: LIST
11373: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11374: LD_VAR 0 9
11378: PPUSH
11379: LD_VAR 0 12
11383: PPUSH
11384: CALL_OW 325
11388: IFFALSE 11417
// missile := Replace ( missile , missile + 1 , 2 ) ;
11390: LD_ADDR_VAR 0 14
11394: PUSH
11395: LD_VAR 0 14
11399: PPUSH
11400: LD_VAR 0 14
11404: PUSH
11405: LD_INT 1
11407: PLUS
11408: PPUSH
11409: LD_INT 2
11411: PPUSH
11412: CALL_OW 1
11416: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11417: LD_VAR 0 9
11421: PPUSH
11422: LD_VAR 0 13
11426: PPUSH
11427: CALL_OW 325
11431: PUSH
11432: LD_VAR 0 10
11436: PPUSH
11437: CALL_OW 255
11441: PPUSH
11442: LD_VAR 0 13
11446: PPUSH
11447: CALL_OW 325
11451: NOT
11452: AND
11453: IFFALSE 11482
// missile := Replace ( missile , missile + 1 , 3 ) ;
11455: LD_ADDR_VAR 0 14
11459: PUSH
11460: LD_VAR 0 14
11464: PPUSH
11465: LD_VAR 0 14
11469: PUSH
11470: LD_INT 1
11472: PLUS
11473: PPUSH
11474: LD_INT 3
11476: PPUSH
11477: CALL_OW 1
11481: ST_TO_ADDR
// if missile < 2 then
11482: LD_VAR 0 14
11486: PUSH
11487: LD_INT 2
11489: LESS
11490: IFFALSE 11494
// exit ;
11492: GO 11716
// x := GetX ( enemy ) ;
11494: LD_ADDR_VAR 0 4
11498: PUSH
11499: LD_VAR 0 10
11503: PPUSH
11504: CALL_OW 250
11508: ST_TO_ADDR
// y := GetY ( enemy ) ;
11509: LD_ADDR_VAR 0 5
11513: PUSH
11514: LD_VAR 0 10
11518: PPUSH
11519: CALL_OW 251
11523: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11524: LD_ADDR_VAR 0 6
11528: PUSH
11529: LD_VAR 0 4
11533: PUSH
11534: LD_INT 1
11536: NEG
11537: PPUSH
11538: LD_INT 1
11540: PPUSH
11541: CALL_OW 12
11545: PLUS
11546: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11547: LD_ADDR_VAR 0 7
11551: PUSH
11552: LD_VAR 0 5
11556: PUSH
11557: LD_INT 1
11559: NEG
11560: PPUSH
11561: LD_INT 1
11563: PPUSH
11564: CALL_OW 12
11568: PLUS
11569: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11570: LD_VAR 0 6
11574: PPUSH
11575: LD_VAR 0 7
11579: PPUSH
11580: CALL_OW 488
11584: NOT
11585: IFFALSE 11607
// begin _x := x ;
11587: LD_ADDR_VAR 0 6
11591: PUSH
11592: LD_VAR 0 4
11596: ST_TO_ADDR
// _y := y ;
11597: LD_ADDR_VAR 0 7
11601: PUSH
11602: LD_VAR 0 5
11606: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11607: LD_ADDR_VAR 0 3
11611: PUSH
11612: LD_INT 1
11614: PPUSH
11615: LD_VAR 0 14
11619: PPUSH
11620: CALL_OW 12
11624: ST_TO_ADDR
// case i of 1 :
11625: LD_VAR 0 3
11629: PUSH
11630: LD_INT 1
11632: DOUBLE
11633: EQUAL
11634: IFTRUE 11638
11636: GO 11655
11638: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11639: LD_VAR 0 1
11643: PPUSH
11644: LD_VAR 0 10
11648: PPUSH
11649: CALL_OW 115
11653: GO 11716
11655: LD_INT 2
11657: DOUBLE
11658: EQUAL
11659: IFTRUE 11663
11661: GO 11685
11663: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11664: LD_VAR 0 1
11668: PPUSH
11669: LD_VAR 0 6
11673: PPUSH
11674: LD_VAR 0 7
11678: PPUSH
11679: CALL_OW 153
11683: GO 11716
11685: LD_INT 3
11687: DOUBLE
11688: EQUAL
11689: IFTRUE 11693
11691: GO 11715
11693: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11694: LD_VAR 0 1
11698: PPUSH
11699: LD_VAR 0 6
11703: PPUSH
11704: LD_VAR 0 7
11708: PPUSH
11709: CALL_OW 154
11713: GO 11716
11715: POP
// end ;
11716: LD_VAR 0 2
11720: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11721: LD_INT 0
11723: PPUSH
11724: PPUSH
11725: PPUSH
11726: PPUSH
11727: PPUSH
11728: PPUSH
// if not unit or not building then
11729: LD_VAR 0 1
11733: NOT
11734: PUSH
11735: LD_VAR 0 2
11739: NOT
11740: OR
11741: IFFALSE 11745
// exit ;
11743: GO 11903
// x := GetX ( building ) ;
11745: LD_ADDR_VAR 0 5
11749: PUSH
11750: LD_VAR 0 2
11754: PPUSH
11755: CALL_OW 250
11759: ST_TO_ADDR
// y := GetY ( building ) ;
11760: LD_ADDR_VAR 0 6
11764: PUSH
11765: LD_VAR 0 2
11769: PPUSH
11770: CALL_OW 251
11774: ST_TO_ADDR
// for i = 0 to 5 do
11775: LD_ADDR_VAR 0 4
11779: PUSH
11780: DOUBLE
11781: LD_INT 0
11783: DEC
11784: ST_TO_ADDR
11785: LD_INT 5
11787: PUSH
11788: FOR_TO
11789: IFFALSE 11901
// begin _x := ShiftX ( x , i , 3 ) ;
11791: LD_ADDR_VAR 0 7
11795: PUSH
11796: LD_VAR 0 5
11800: PPUSH
11801: LD_VAR 0 4
11805: PPUSH
11806: LD_INT 3
11808: PPUSH
11809: CALL_OW 272
11813: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
11814: LD_ADDR_VAR 0 8
11818: PUSH
11819: LD_VAR 0 6
11823: PPUSH
11824: LD_VAR 0 4
11828: PPUSH
11829: LD_INT 3
11831: PPUSH
11832: CALL_OW 273
11836: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11837: LD_VAR 0 7
11841: PPUSH
11842: LD_VAR 0 8
11846: PPUSH
11847: CALL_OW 488
11851: NOT
11852: IFFALSE 11856
// continue ;
11854: GO 11788
// if HexInfo ( _x , _y ) = 0 then
11856: LD_VAR 0 7
11860: PPUSH
11861: LD_VAR 0 8
11865: PPUSH
11866: CALL_OW 428
11870: PUSH
11871: LD_INT 0
11873: EQUAL
11874: IFFALSE 11899
// begin ComMoveXY ( unit , _x , _y ) ;
11876: LD_VAR 0 1
11880: PPUSH
11881: LD_VAR 0 7
11885: PPUSH
11886: LD_VAR 0 8
11890: PPUSH
11891: CALL_OW 111
// exit ;
11895: POP
11896: POP
11897: GO 11903
// end ; end ;
11899: GO 11788
11901: POP
11902: POP
// end ;
11903: LD_VAR 0 3
11907: RET
// export function ScanBase ( side , base_area ) ; begin
11908: LD_INT 0
11910: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11911: LD_ADDR_VAR 0 3
11915: PUSH
11916: LD_VAR 0 2
11920: PPUSH
11921: LD_INT 81
11923: PUSH
11924: LD_VAR 0 1
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: PPUSH
11933: CALL_OW 70
11937: ST_TO_ADDR
// end ;
11938: LD_VAR 0 3
11942: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11943: LD_INT 0
11945: PPUSH
11946: PPUSH
11947: PPUSH
11948: PPUSH
// result := false ;
11949: LD_ADDR_VAR 0 2
11953: PUSH
11954: LD_INT 0
11956: ST_TO_ADDR
// side := GetSide ( unit ) ;
11957: LD_ADDR_VAR 0 3
11961: PUSH
11962: LD_VAR 0 1
11966: PPUSH
11967: CALL_OW 255
11971: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11972: LD_ADDR_VAR 0 4
11976: PUSH
11977: LD_VAR 0 1
11981: PPUSH
11982: CALL_OW 248
11986: ST_TO_ADDR
// case nat of 1 :
11987: LD_VAR 0 4
11991: PUSH
11992: LD_INT 1
11994: DOUBLE
11995: EQUAL
11996: IFTRUE 12000
11998: GO 12011
12000: POP
// tech := tech_lassight ; 2 :
12001: LD_ADDR_VAR 0 5
12005: PUSH
12006: LD_INT 12
12008: ST_TO_ADDR
12009: GO 12050
12011: LD_INT 2
12013: DOUBLE
12014: EQUAL
12015: IFTRUE 12019
12017: GO 12030
12019: POP
// tech := tech_mortar ; 3 :
12020: LD_ADDR_VAR 0 5
12024: PUSH
12025: LD_INT 41
12027: ST_TO_ADDR
12028: GO 12050
12030: LD_INT 3
12032: DOUBLE
12033: EQUAL
12034: IFTRUE 12038
12036: GO 12049
12038: POP
// tech := tech_bazooka ; end ;
12039: LD_ADDR_VAR 0 5
12043: PUSH
12044: LD_INT 44
12046: ST_TO_ADDR
12047: GO 12050
12049: POP
// if Researched ( side , tech ) then
12050: LD_VAR 0 3
12054: PPUSH
12055: LD_VAR 0 5
12059: PPUSH
12060: CALL_OW 325
12064: IFFALSE 12091
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12066: LD_ADDR_VAR 0 2
12070: PUSH
12071: LD_INT 5
12073: PUSH
12074: LD_INT 8
12076: PUSH
12077: LD_INT 9
12079: PUSH
12080: EMPTY
12081: LIST
12082: LIST
12083: LIST
12084: PUSH
12085: LD_VAR 0 4
12089: ARRAY
12090: ST_TO_ADDR
// end ;
12091: LD_VAR 0 2
12095: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12096: LD_INT 0
12098: PPUSH
12099: PPUSH
12100: PPUSH
// if not mines then
12101: LD_VAR 0 2
12105: NOT
12106: IFFALSE 12110
// exit ;
12108: GO 12254
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12110: LD_ADDR_VAR 0 5
12114: PUSH
12115: LD_INT 81
12117: PUSH
12118: LD_VAR 0 1
12122: PUSH
12123: EMPTY
12124: LIST
12125: LIST
12126: PUSH
12127: LD_INT 3
12129: PUSH
12130: LD_INT 21
12132: PUSH
12133: LD_INT 3
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: PPUSH
12148: CALL_OW 69
12152: ST_TO_ADDR
// for i in mines do
12153: LD_ADDR_VAR 0 4
12157: PUSH
12158: LD_VAR 0 2
12162: PUSH
12163: FOR_IN
12164: IFFALSE 12252
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12166: LD_VAR 0 4
12170: PUSH
12171: LD_INT 1
12173: ARRAY
12174: PPUSH
12175: LD_VAR 0 4
12179: PUSH
12180: LD_INT 2
12182: ARRAY
12183: PPUSH
12184: CALL_OW 458
12188: NOT
12189: IFFALSE 12193
// continue ;
12191: GO 12163
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12193: LD_VAR 0 4
12197: PUSH
12198: LD_INT 1
12200: ARRAY
12201: PPUSH
12202: LD_VAR 0 4
12206: PUSH
12207: LD_INT 2
12209: ARRAY
12210: PPUSH
12211: CALL_OW 428
12215: PUSH
12216: LD_VAR 0 5
12220: IN
12221: IFFALSE 12250
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12223: LD_VAR 0 4
12227: PUSH
12228: LD_INT 1
12230: ARRAY
12231: PPUSH
12232: LD_VAR 0 4
12236: PUSH
12237: LD_INT 2
12239: ARRAY
12240: PPUSH
12241: LD_VAR 0 1
12245: PPUSH
12246: CALL_OW 456
// end ;
12250: GO 12163
12252: POP
12253: POP
// end ;
12254: LD_VAR 0 3
12258: RET
// export function Count ( array ) ; begin
12259: LD_INT 0
12261: PPUSH
// result := array + 0 ;
12262: LD_ADDR_VAR 0 2
12266: PUSH
12267: LD_VAR 0 1
12271: PUSH
12272: LD_INT 0
12274: PLUS
12275: ST_TO_ADDR
// end ;
12276: LD_VAR 0 2
12280: RET
// export function IsEmpty ( building ) ; begin
12281: LD_INT 0
12283: PPUSH
// if not building then
12284: LD_VAR 0 1
12288: NOT
12289: IFFALSE 12293
// exit ;
12291: GO 12336
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12293: LD_ADDR_VAR 0 2
12297: PUSH
12298: LD_VAR 0 1
12302: PUSH
12303: LD_INT 22
12305: PUSH
12306: LD_VAR 0 1
12310: PPUSH
12311: CALL_OW 255
12315: PUSH
12316: EMPTY
12317: LIST
12318: LIST
12319: PUSH
12320: LD_INT 58
12322: PUSH
12323: EMPTY
12324: LIST
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: PPUSH
12330: CALL_OW 69
12334: IN
12335: ST_TO_ADDR
// end ;
12336: LD_VAR 0 2
12340: RET
// export function IsNotFull ( building ) ; var places ; begin
12341: LD_INT 0
12343: PPUSH
12344: PPUSH
// if not building then
12345: LD_VAR 0 1
12349: NOT
12350: IFFALSE 12354
// exit ;
12352: GO 12382
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12354: LD_ADDR_VAR 0 2
12358: PUSH
12359: LD_VAR 0 1
12363: PPUSH
12364: LD_INT 3
12366: PUSH
12367: LD_INT 62
12369: PUSH
12370: EMPTY
12371: LIST
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 72
12381: ST_TO_ADDR
// end ;
12382: LD_VAR 0 2
12386: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12387: LD_INT 0
12389: PPUSH
12390: PPUSH
12391: PPUSH
12392: PPUSH
// tmp := [ ] ;
12393: LD_ADDR_VAR 0 3
12397: PUSH
12398: EMPTY
12399: ST_TO_ADDR
// list := [ ] ;
12400: LD_ADDR_VAR 0 5
12404: PUSH
12405: EMPTY
12406: ST_TO_ADDR
// for i = 16 to 25 do
12407: LD_ADDR_VAR 0 4
12411: PUSH
12412: DOUBLE
12413: LD_INT 16
12415: DEC
12416: ST_TO_ADDR
12417: LD_INT 25
12419: PUSH
12420: FOR_TO
12421: IFFALSE 12494
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12423: LD_ADDR_VAR 0 3
12427: PUSH
12428: LD_VAR 0 3
12432: PUSH
12433: LD_INT 22
12435: PUSH
12436: LD_VAR 0 1
12440: PPUSH
12441: CALL_OW 255
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: PUSH
12450: LD_INT 91
12452: PUSH
12453: LD_VAR 0 1
12457: PUSH
12458: LD_INT 6
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: LIST
12465: PUSH
12466: LD_INT 30
12468: PUSH
12469: LD_VAR 0 4
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: PUSH
12478: EMPTY
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: EMPTY
12484: LIST
12485: PPUSH
12486: CALL_OW 69
12490: ADD
12491: ST_TO_ADDR
12492: GO 12420
12494: POP
12495: POP
// for i = 1 to tmp do
12496: LD_ADDR_VAR 0 4
12500: PUSH
12501: DOUBLE
12502: LD_INT 1
12504: DEC
12505: ST_TO_ADDR
12506: LD_VAR 0 3
12510: PUSH
12511: FOR_TO
12512: IFFALSE 12600
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12514: LD_ADDR_VAR 0 5
12518: PUSH
12519: LD_VAR 0 5
12523: PUSH
12524: LD_VAR 0 3
12528: PUSH
12529: LD_VAR 0 4
12533: ARRAY
12534: PPUSH
12535: CALL_OW 266
12539: PUSH
12540: LD_VAR 0 3
12544: PUSH
12545: LD_VAR 0 4
12549: ARRAY
12550: PPUSH
12551: CALL_OW 250
12555: PUSH
12556: LD_VAR 0 3
12560: PUSH
12561: LD_VAR 0 4
12565: ARRAY
12566: PPUSH
12567: CALL_OW 251
12571: PUSH
12572: LD_VAR 0 3
12576: PUSH
12577: LD_VAR 0 4
12581: ARRAY
12582: PPUSH
12583: CALL_OW 254
12587: PUSH
12588: EMPTY
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: PUSH
12594: EMPTY
12595: LIST
12596: ADD
12597: ST_TO_ADDR
12598: GO 12511
12600: POP
12601: POP
// result := list ;
12602: LD_ADDR_VAR 0 2
12606: PUSH
12607: LD_VAR 0 5
12611: ST_TO_ADDR
// end ;
12612: LD_VAR 0 2
12616: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12617: LD_INT 0
12619: PPUSH
12620: PPUSH
12621: PPUSH
12622: PPUSH
12623: PPUSH
12624: PPUSH
12625: PPUSH
// if not factory then
12626: LD_VAR 0 1
12630: NOT
12631: IFFALSE 12635
// exit ;
12633: GO 13228
// if control = control_apeman then
12635: LD_VAR 0 4
12639: PUSH
12640: LD_INT 5
12642: EQUAL
12643: IFFALSE 12752
// begin tmp := UnitsInside ( factory ) ;
12645: LD_ADDR_VAR 0 8
12649: PUSH
12650: LD_VAR 0 1
12654: PPUSH
12655: CALL_OW 313
12659: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12660: LD_VAR 0 8
12664: PPUSH
12665: LD_INT 25
12667: PUSH
12668: LD_INT 12
12670: PUSH
12671: EMPTY
12672: LIST
12673: LIST
12674: PPUSH
12675: CALL_OW 72
12679: NOT
12680: IFFALSE 12690
// control := control_manual ;
12682: LD_ADDR_VAR 0 4
12686: PUSH
12687: LD_INT 1
12689: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12690: LD_ADDR_VAR 0 8
12694: PUSH
12695: LD_VAR 0 1
12699: PPUSH
12700: CALL 12387 0 1
12704: ST_TO_ADDR
// if tmp then
12705: LD_VAR 0 8
12709: IFFALSE 12752
// begin for i in tmp do
12711: LD_ADDR_VAR 0 7
12715: PUSH
12716: LD_VAR 0 8
12720: PUSH
12721: FOR_IN
12722: IFFALSE 12750
// if i [ 1 ] = b_ext_radio then
12724: LD_VAR 0 7
12728: PUSH
12729: LD_INT 1
12731: ARRAY
12732: PUSH
12733: LD_INT 22
12735: EQUAL
12736: IFFALSE 12748
// begin control := control_remote ;
12738: LD_ADDR_VAR 0 4
12742: PUSH
12743: LD_INT 2
12745: ST_TO_ADDR
// break ;
12746: GO 12750
// end ;
12748: GO 12721
12750: POP
12751: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_VAR 0 2
12761: PPUSH
12762: LD_VAR 0 3
12766: PPUSH
12767: LD_VAR 0 4
12771: PPUSH
12772: LD_VAR 0 5
12776: PPUSH
12777: CALL_OW 448
12781: IFFALSE 12816
// begin result := [ chassis , engine , control , weapon ] ;
12783: LD_ADDR_VAR 0 6
12787: PUSH
12788: LD_VAR 0 2
12792: PUSH
12793: LD_VAR 0 3
12797: PUSH
12798: LD_VAR 0 4
12802: PUSH
12803: LD_VAR 0 5
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: ST_TO_ADDR
// exit ;
12814: GO 13228
// end ; _chassis := AvailableChassisList ( factory ) ;
12816: LD_ADDR_VAR 0 9
12820: PUSH
12821: LD_VAR 0 1
12825: PPUSH
12826: CALL_OW 475
12830: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12831: LD_ADDR_VAR 0 11
12835: PUSH
12836: LD_VAR 0 1
12840: PPUSH
12841: CALL_OW 476
12845: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12846: LD_ADDR_VAR 0 12
12850: PUSH
12851: LD_VAR 0 1
12855: PPUSH
12856: CALL_OW 477
12860: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12861: LD_ADDR_VAR 0 10
12865: PUSH
12866: LD_VAR 0 1
12870: PPUSH
12871: CALL_OW 478
12875: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12876: LD_VAR 0 9
12880: NOT
12881: PUSH
12882: LD_VAR 0 11
12886: NOT
12887: OR
12888: PUSH
12889: LD_VAR 0 12
12893: NOT
12894: OR
12895: PUSH
12896: LD_VAR 0 10
12900: NOT
12901: OR
12902: IFFALSE 12937
// begin result := [ chassis , engine , control , weapon ] ;
12904: LD_ADDR_VAR 0 6
12908: PUSH
12909: LD_VAR 0 2
12913: PUSH
12914: LD_VAR 0 3
12918: PUSH
12919: LD_VAR 0 4
12923: PUSH
12924: LD_VAR 0 5
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: ST_TO_ADDR
// exit ;
12935: GO 13228
// end ; if not chassis in _chassis then
12937: LD_VAR 0 2
12941: PUSH
12942: LD_VAR 0 9
12946: IN
12947: NOT
12948: IFFALSE 12974
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12950: LD_ADDR_VAR 0 2
12954: PUSH
12955: LD_VAR 0 9
12959: PUSH
12960: LD_INT 1
12962: PPUSH
12963: LD_VAR 0 9
12967: PPUSH
12968: CALL_OW 12
12972: ARRAY
12973: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12974: LD_VAR 0 2
12978: PPUSH
12979: LD_VAR 0 3
12983: PPUSH
12984: CALL 13233 0 2
12988: NOT
12989: IFFALSE 13048
// repeat engine := _engine [ 1 ] ;
12991: LD_ADDR_VAR 0 3
12995: PUSH
12996: LD_VAR 0 11
13000: PUSH
13001: LD_INT 1
13003: ARRAY
13004: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13005: LD_ADDR_VAR 0 11
13009: PUSH
13010: LD_VAR 0 11
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: CALL_OW 3
13022: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13023: LD_VAR 0 2
13027: PPUSH
13028: LD_VAR 0 3
13032: PPUSH
13033: CALL 13233 0 2
13037: PUSH
13038: LD_VAR 0 11
13042: PUSH
13043: EMPTY
13044: EQUAL
13045: OR
13046: IFFALSE 12991
// if not control in _control then
13048: LD_VAR 0 4
13052: PUSH
13053: LD_VAR 0 12
13057: IN
13058: NOT
13059: IFFALSE 13085
// control := _control [ rand ( 1 , _control ) ] ;
13061: LD_ADDR_VAR 0 4
13065: PUSH
13066: LD_VAR 0 12
13070: PUSH
13071: LD_INT 1
13073: PPUSH
13074: LD_VAR 0 12
13078: PPUSH
13079: CALL_OW 12
13083: ARRAY
13084: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13085: LD_VAR 0 2
13089: PPUSH
13090: LD_VAR 0 5
13094: PPUSH
13095: CALL 13453 0 2
13099: NOT
13100: IFFALSE 13159
// repeat weapon := _weapon [ 1 ] ;
13102: LD_ADDR_VAR 0 5
13106: PUSH
13107: LD_VAR 0 10
13111: PUSH
13112: LD_INT 1
13114: ARRAY
13115: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13116: LD_ADDR_VAR 0 10
13120: PUSH
13121: LD_VAR 0 10
13125: PPUSH
13126: LD_INT 1
13128: PPUSH
13129: CALL_OW 3
13133: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13134: LD_VAR 0 2
13138: PPUSH
13139: LD_VAR 0 5
13143: PPUSH
13144: CALL 13453 0 2
13148: PUSH
13149: LD_VAR 0 10
13153: PUSH
13154: EMPTY
13155: EQUAL
13156: OR
13157: IFFALSE 13102
// result := [ ] ;
13159: LD_ADDR_VAR 0 6
13163: PUSH
13164: EMPTY
13165: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13166: LD_VAR 0 1
13170: PPUSH
13171: LD_VAR 0 2
13175: PPUSH
13176: LD_VAR 0 3
13180: PPUSH
13181: LD_VAR 0 4
13185: PPUSH
13186: LD_VAR 0 5
13190: PPUSH
13191: CALL_OW 448
13195: IFFALSE 13228
// result := [ chassis , engine , control , weapon ] ;
13197: LD_ADDR_VAR 0 6
13201: PUSH
13202: LD_VAR 0 2
13206: PUSH
13207: LD_VAR 0 3
13211: PUSH
13212: LD_VAR 0 4
13216: PUSH
13217: LD_VAR 0 5
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: LIST
13226: LIST
13227: ST_TO_ADDR
// end ;
13228: LD_VAR 0 6
13232: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13233: LD_INT 0
13235: PPUSH
// if not chassis or not engine then
13236: LD_VAR 0 1
13240: NOT
13241: PUSH
13242: LD_VAR 0 2
13246: NOT
13247: OR
13248: IFFALSE 13252
// exit ;
13250: GO 13448
// case engine of engine_solar :
13252: LD_VAR 0 2
13256: PUSH
13257: LD_INT 2
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13303
13265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13266: LD_ADDR_VAR 0 3
13270: PUSH
13271: LD_INT 11
13273: PUSH
13274: LD_INT 12
13276: PUSH
13277: LD_INT 13
13279: PUSH
13280: LD_INT 14
13282: PUSH
13283: LD_INT 1
13285: PUSH
13286: LD_INT 2
13288: PUSH
13289: LD_INT 3
13291: PUSH
13292: EMPTY
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: ST_TO_ADDR
13301: GO 13432
13303: LD_INT 1
13305: DOUBLE
13306: EQUAL
13307: IFTRUE 13311
13309: GO 13373
13311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13312: LD_ADDR_VAR 0 3
13316: PUSH
13317: LD_INT 11
13319: PUSH
13320: LD_INT 12
13322: PUSH
13323: LD_INT 13
13325: PUSH
13326: LD_INT 14
13328: PUSH
13329: LD_INT 1
13331: PUSH
13332: LD_INT 2
13334: PUSH
13335: LD_INT 3
13337: PUSH
13338: LD_INT 4
13340: PUSH
13341: LD_INT 5
13343: PUSH
13344: LD_INT 21
13346: PUSH
13347: LD_INT 23
13349: PUSH
13350: LD_INT 22
13352: PUSH
13353: LD_INT 24
13355: PUSH
13356: EMPTY
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: ST_TO_ADDR
13371: GO 13432
13373: LD_INT 3
13375: DOUBLE
13376: EQUAL
13377: IFTRUE 13381
13379: GO 13431
13381: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13382: LD_ADDR_VAR 0 3
13386: PUSH
13387: LD_INT 13
13389: PUSH
13390: LD_INT 14
13392: PUSH
13393: LD_INT 2
13395: PUSH
13396: LD_INT 3
13398: PUSH
13399: LD_INT 4
13401: PUSH
13402: LD_INT 5
13404: PUSH
13405: LD_INT 21
13407: PUSH
13408: LD_INT 22
13410: PUSH
13411: LD_INT 23
13413: PUSH
13414: LD_INT 24
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: ST_TO_ADDR
13429: GO 13432
13431: POP
// result := ( chassis in result ) ;
13432: LD_ADDR_VAR 0 3
13436: PUSH
13437: LD_VAR 0 1
13441: PUSH
13442: LD_VAR 0 3
13446: IN
13447: ST_TO_ADDR
// end ;
13448: LD_VAR 0 3
13452: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13453: LD_INT 0
13455: PPUSH
// if not chassis or not weapon then
13456: LD_VAR 0 1
13460: NOT
13461: PUSH
13462: LD_VAR 0 2
13466: NOT
13467: OR
13468: IFFALSE 13472
// exit ;
13470: GO 14532
// case weapon of us_machine_gun :
13472: LD_VAR 0 2
13476: PUSH
13477: LD_INT 2
13479: DOUBLE
13480: EQUAL
13481: IFTRUE 13485
13483: GO 13515
13485: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13486: LD_ADDR_VAR 0 3
13490: PUSH
13491: LD_INT 1
13493: PUSH
13494: LD_INT 2
13496: PUSH
13497: LD_INT 3
13499: PUSH
13500: LD_INT 4
13502: PUSH
13503: LD_INT 5
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: ST_TO_ADDR
13513: GO 14516
13515: LD_INT 3
13517: DOUBLE
13518: EQUAL
13519: IFTRUE 13523
13521: GO 13553
13523: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13524: LD_ADDR_VAR 0 3
13528: PUSH
13529: LD_INT 1
13531: PUSH
13532: LD_INT 2
13534: PUSH
13535: LD_INT 3
13537: PUSH
13538: LD_INT 4
13540: PUSH
13541: LD_INT 5
13543: PUSH
13544: EMPTY
13545: LIST
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: ST_TO_ADDR
13551: GO 14516
13553: LD_INT 11
13555: DOUBLE
13556: EQUAL
13557: IFTRUE 13561
13559: GO 13591
13561: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13562: LD_ADDR_VAR 0 3
13566: PUSH
13567: LD_INT 1
13569: PUSH
13570: LD_INT 2
13572: PUSH
13573: LD_INT 3
13575: PUSH
13576: LD_INT 4
13578: PUSH
13579: LD_INT 5
13581: PUSH
13582: EMPTY
13583: LIST
13584: LIST
13585: LIST
13586: LIST
13587: LIST
13588: ST_TO_ADDR
13589: GO 14516
13591: LD_INT 4
13593: DOUBLE
13594: EQUAL
13595: IFTRUE 13599
13597: GO 13625
13599: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13600: LD_ADDR_VAR 0 3
13604: PUSH
13605: LD_INT 2
13607: PUSH
13608: LD_INT 3
13610: PUSH
13611: LD_INT 4
13613: PUSH
13614: LD_INT 5
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: ST_TO_ADDR
13623: GO 14516
13625: LD_INT 5
13627: DOUBLE
13628: EQUAL
13629: IFTRUE 13633
13631: GO 13659
13633: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13634: LD_ADDR_VAR 0 3
13638: PUSH
13639: LD_INT 2
13641: PUSH
13642: LD_INT 3
13644: PUSH
13645: LD_INT 4
13647: PUSH
13648: LD_INT 5
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: ST_TO_ADDR
13657: GO 14516
13659: LD_INT 9
13661: DOUBLE
13662: EQUAL
13663: IFTRUE 13667
13665: GO 13693
13667: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13668: LD_ADDR_VAR 0 3
13672: PUSH
13673: LD_INT 2
13675: PUSH
13676: LD_INT 3
13678: PUSH
13679: LD_INT 4
13681: PUSH
13682: LD_INT 5
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: ST_TO_ADDR
13691: GO 14516
13693: LD_INT 7
13695: DOUBLE
13696: EQUAL
13697: IFTRUE 13701
13699: GO 13727
13701: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13702: LD_ADDR_VAR 0 3
13706: PUSH
13707: LD_INT 2
13709: PUSH
13710: LD_INT 3
13712: PUSH
13713: LD_INT 4
13715: PUSH
13716: LD_INT 5
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: ST_TO_ADDR
13725: GO 14516
13727: LD_INT 12
13729: DOUBLE
13730: EQUAL
13731: IFTRUE 13735
13733: GO 13761
13735: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13736: LD_ADDR_VAR 0 3
13740: PUSH
13741: LD_INT 2
13743: PUSH
13744: LD_INT 3
13746: PUSH
13747: LD_INT 4
13749: PUSH
13750: LD_INT 5
13752: PUSH
13753: EMPTY
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: ST_TO_ADDR
13759: GO 14516
13761: LD_INT 13
13763: DOUBLE
13764: EQUAL
13765: IFTRUE 13769
13767: GO 13795
13769: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13770: LD_ADDR_VAR 0 3
13774: PUSH
13775: LD_INT 2
13777: PUSH
13778: LD_INT 3
13780: PUSH
13781: LD_INT 4
13783: PUSH
13784: LD_INT 5
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: LIST
13791: LIST
13792: ST_TO_ADDR
13793: GO 14516
13795: LD_INT 14
13797: DOUBLE
13798: EQUAL
13799: IFTRUE 13803
13801: GO 13821
13803: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13804: LD_ADDR_VAR 0 3
13808: PUSH
13809: LD_INT 4
13811: PUSH
13812: LD_INT 5
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: ST_TO_ADDR
13819: GO 14516
13821: LD_INT 6
13823: DOUBLE
13824: EQUAL
13825: IFTRUE 13829
13827: GO 13847
13829: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13830: LD_ADDR_VAR 0 3
13834: PUSH
13835: LD_INT 4
13837: PUSH
13838: LD_INT 5
13840: PUSH
13841: EMPTY
13842: LIST
13843: LIST
13844: ST_TO_ADDR
13845: GO 14516
13847: LD_INT 10
13849: DOUBLE
13850: EQUAL
13851: IFTRUE 13855
13853: GO 13873
13855: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13856: LD_ADDR_VAR 0 3
13860: PUSH
13861: LD_INT 4
13863: PUSH
13864: LD_INT 5
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: ST_TO_ADDR
13871: GO 14516
13873: LD_INT 22
13875: DOUBLE
13876: EQUAL
13877: IFTRUE 13881
13879: GO 13907
13881: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13882: LD_ADDR_VAR 0 3
13886: PUSH
13887: LD_INT 11
13889: PUSH
13890: LD_INT 12
13892: PUSH
13893: LD_INT 13
13895: PUSH
13896: LD_INT 14
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: LIST
13903: LIST
13904: ST_TO_ADDR
13905: GO 14516
13907: LD_INT 23
13909: DOUBLE
13910: EQUAL
13911: IFTRUE 13915
13913: GO 13941
13915: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13916: LD_ADDR_VAR 0 3
13920: PUSH
13921: LD_INT 11
13923: PUSH
13924: LD_INT 12
13926: PUSH
13927: LD_INT 13
13929: PUSH
13930: LD_INT 14
13932: PUSH
13933: EMPTY
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: ST_TO_ADDR
13939: GO 14516
13941: LD_INT 24
13943: DOUBLE
13944: EQUAL
13945: IFTRUE 13949
13947: GO 13975
13949: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13950: LD_ADDR_VAR 0 3
13954: PUSH
13955: LD_INT 11
13957: PUSH
13958: LD_INT 12
13960: PUSH
13961: LD_INT 13
13963: PUSH
13964: LD_INT 14
13966: PUSH
13967: EMPTY
13968: LIST
13969: LIST
13970: LIST
13971: LIST
13972: ST_TO_ADDR
13973: GO 14516
13975: LD_INT 30
13977: DOUBLE
13978: EQUAL
13979: IFTRUE 13983
13981: GO 14009
13983: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13984: LD_ADDR_VAR 0 3
13988: PUSH
13989: LD_INT 11
13991: PUSH
13992: LD_INT 12
13994: PUSH
13995: LD_INT 13
13997: PUSH
13998: LD_INT 14
14000: PUSH
14001: EMPTY
14002: LIST
14003: LIST
14004: LIST
14005: LIST
14006: ST_TO_ADDR
14007: GO 14516
14009: LD_INT 25
14011: DOUBLE
14012: EQUAL
14013: IFTRUE 14017
14015: GO 14035
14017: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14018: LD_ADDR_VAR 0 3
14022: PUSH
14023: LD_INT 13
14025: PUSH
14026: LD_INT 14
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: ST_TO_ADDR
14033: GO 14516
14035: LD_INT 27
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14061
14043: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14044: LD_ADDR_VAR 0 3
14048: PUSH
14049: LD_INT 13
14051: PUSH
14052: LD_INT 14
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: ST_TO_ADDR
14059: GO 14516
14061: LD_INT 92
14063: DOUBLE
14064: EQUAL
14065: IFTRUE 14069
14067: GO 14095
14069: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14070: LD_ADDR_VAR 0 3
14074: PUSH
14075: LD_INT 11
14077: PUSH
14078: LD_INT 12
14080: PUSH
14081: LD_INT 13
14083: PUSH
14084: LD_INT 14
14086: PUSH
14087: EMPTY
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: ST_TO_ADDR
14093: GO 14516
14095: LD_INT 28
14097: DOUBLE
14098: EQUAL
14099: IFTRUE 14103
14101: GO 14121
14103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_INT 13
14111: PUSH
14112: LD_INT 14
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: ST_TO_ADDR
14119: GO 14516
14121: LD_INT 29
14123: DOUBLE
14124: EQUAL
14125: IFTRUE 14129
14127: GO 14147
14129: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14130: LD_ADDR_VAR 0 3
14134: PUSH
14135: LD_INT 13
14137: PUSH
14138: LD_INT 14
14140: PUSH
14141: EMPTY
14142: LIST
14143: LIST
14144: ST_TO_ADDR
14145: GO 14516
14147: LD_INT 31
14149: DOUBLE
14150: EQUAL
14151: IFTRUE 14155
14153: GO 14173
14155: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14156: LD_ADDR_VAR 0 3
14160: PUSH
14161: LD_INT 13
14163: PUSH
14164: LD_INT 14
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: ST_TO_ADDR
14171: GO 14516
14173: LD_INT 26
14175: DOUBLE
14176: EQUAL
14177: IFTRUE 14181
14179: GO 14199
14181: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14182: LD_ADDR_VAR 0 3
14186: PUSH
14187: LD_INT 13
14189: PUSH
14190: LD_INT 14
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: ST_TO_ADDR
14197: GO 14516
14199: LD_INT 42
14201: DOUBLE
14202: EQUAL
14203: IFTRUE 14207
14205: GO 14233
14207: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14208: LD_ADDR_VAR 0 3
14212: PUSH
14213: LD_INT 21
14215: PUSH
14216: LD_INT 22
14218: PUSH
14219: LD_INT 23
14221: PUSH
14222: LD_INT 24
14224: PUSH
14225: EMPTY
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: ST_TO_ADDR
14231: GO 14516
14233: LD_INT 43
14235: DOUBLE
14236: EQUAL
14237: IFTRUE 14241
14239: GO 14267
14241: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14242: LD_ADDR_VAR 0 3
14246: PUSH
14247: LD_INT 21
14249: PUSH
14250: LD_INT 22
14252: PUSH
14253: LD_INT 23
14255: PUSH
14256: LD_INT 24
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: ST_TO_ADDR
14265: GO 14516
14267: LD_INT 44
14269: DOUBLE
14270: EQUAL
14271: IFTRUE 14275
14273: GO 14301
14275: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14276: LD_ADDR_VAR 0 3
14280: PUSH
14281: LD_INT 21
14283: PUSH
14284: LD_INT 22
14286: PUSH
14287: LD_INT 23
14289: PUSH
14290: LD_INT 24
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: LIST
14297: LIST
14298: ST_TO_ADDR
14299: GO 14516
14301: LD_INT 45
14303: DOUBLE
14304: EQUAL
14305: IFTRUE 14309
14307: GO 14335
14309: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14310: LD_ADDR_VAR 0 3
14314: PUSH
14315: LD_INT 21
14317: PUSH
14318: LD_INT 22
14320: PUSH
14321: LD_INT 23
14323: PUSH
14324: LD_INT 24
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: ST_TO_ADDR
14333: GO 14516
14335: LD_INT 49
14337: DOUBLE
14338: EQUAL
14339: IFTRUE 14343
14341: GO 14369
14343: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14344: LD_ADDR_VAR 0 3
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 22
14354: PUSH
14355: LD_INT 23
14357: PUSH
14358: LD_INT 24
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: ST_TO_ADDR
14367: GO 14516
14369: LD_INT 51
14371: DOUBLE
14372: EQUAL
14373: IFTRUE 14377
14375: GO 14403
14377: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14378: LD_ADDR_VAR 0 3
14382: PUSH
14383: LD_INT 21
14385: PUSH
14386: LD_INT 22
14388: PUSH
14389: LD_INT 23
14391: PUSH
14392: LD_INT 24
14394: PUSH
14395: EMPTY
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: ST_TO_ADDR
14401: GO 14516
14403: LD_INT 52
14405: DOUBLE
14406: EQUAL
14407: IFTRUE 14411
14409: GO 14437
14411: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14412: LD_ADDR_VAR 0 3
14416: PUSH
14417: LD_INT 21
14419: PUSH
14420: LD_INT 22
14422: PUSH
14423: LD_INT 23
14425: PUSH
14426: LD_INT 24
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: ST_TO_ADDR
14435: GO 14516
14437: LD_INT 53
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14463
14445: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_INT 23
14453: PUSH
14454: LD_INT 24
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: ST_TO_ADDR
14461: GO 14516
14463: LD_INT 46
14465: DOUBLE
14466: EQUAL
14467: IFTRUE 14471
14469: GO 14489
14471: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14472: LD_ADDR_VAR 0 3
14476: PUSH
14477: LD_INT 23
14479: PUSH
14480: LD_INT 24
14482: PUSH
14483: EMPTY
14484: LIST
14485: LIST
14486: ST_TO_ADDR
14487: GO 14516
14489: LD_INT 47
14491: DOUBLE
14492: EQUAL
14493: IFTRUE 14497
14495: GO 14515
14497: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14498: LD_ADDR_VAR 0 3
14502: PUSH
14503: LD_INT 23
14505: PUSH
14506: LD_INT 24
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: ST_TO_ADDR
14513: GO 14516
14515: POP
// result := ( chassis in result ) ;
14516: LD_ADDR_VAR 0 3
14520: PUSH
14521: LD_VAR 0 1
14525: PUSH
14526: LD_VAR 0 3
14530: IN
14531: ST_TO_ADDR
// end ;
14532: LD_VAR 0 3
14536: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14537: LD_INT 0
14539: PPUSH
14540: PPUSH
14541: PPUSH
14542: PPUSH
14543: PPUSH
14544: PPUSH
14545: PPUSH
// result := array ;
14546: LD_ADDR_VAR 0 5
14550: PUSH
14551: LD_VAR 0 1
14555: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14556: LD_VAR 0 1
14560: NOT
14561: PUSH
14562: LD_VAR 0 2
14566: NOT
14567: OR
14568: PUSH
14569: LD_VAR 0 3
14573: NOT
14574: OR
14575: PUSH
14576: LD_VAR 0 2
14580: PUSH
14581: LD_VAR 0 1
14585: GREATER
14586: OR
14587: PUSH
14588: LD_VAR 0 3
14592: PUSH
14593: LD_VAR 0 1
14597: GREATER
14598: OR
14599: IFFALSE 14603
// exit ;
14601: GO 14899
// if direction then
14603: LD_VAR 0 4
14607: IFFALSE 14671
// begin d := 1 ;
14609: LD_ADDR_VAR 0 9
14613: PUSH
14614: LD_INT 1
14616: ST_TO_ADDR
// if i_from > i_to then
14617: LD_VAR 0 2
14621: PUSH
14622: LD_VAR 0 3
14626: GREATER
14627: IFFALSE 14653
// length := ( array - i_from ) + i_to else
14629: LD_ADDR_VAR 0 11
14633: PUSH
14634: LD_VAR 0 1
14638: PUSH
14639: LD_VAR 0 2
14643: MINUS
14644: PUSH
14645: LD_VAR 0 3
14649: PLUS
14650: ST_TO_ADDR
14651: GO 14669
// length := i_to - i_from ;
14653: LD_ADDR_VAR 0 11
14657: PUSH
14658: LD_VAR 0 3
14662: PUSH
14663: LD_VAR 0 2
14667: MINUS
14668: ST_TO_ADDR
// end else
14669: GO 14732
// begin d := - 1 ;
14671: LD_ADDR_VAR 0 9
14675: PUSH
14676: LD_INT 1
14678: NEG
14679: ST_TO_ADDR
// if i_from > i_to then
14680: LD_VAR 0 2
14684: PUSH
14685: LD_VAR 0 3
14689: GREATER
14690: IFFALSE 14710
// length := i_from - i_to else
14692: LD_ADDR_VAR 0 11
14696: PUSH
14697: LD_VAR 0 2
14701: PUSH
14702: LD_VAR 0 3
14706: MINUS
14707: ST_TO_ADDR
14708: GO 14732
// length := ( array - i_to ) + i_from ;
14710: LD_ADDR_VAR 0 11
14714: PUSH
14715: LD_VAR 0 1
14719: PUSH
14720: LD_VAR 0 3
14724: MINUS
14725: PUSH
14726: LD_VAR 0 2
14730: PLUS
14731: ST_TO_ADDR
// end ; if not length then
14732: LD_VAR 0 11
14736: NOT
14737: IFFALSE 14741
// exit ;
14739: GO 14899
// tmp := array ;
14741: LD_ADDR_VAR 0 10
14745: PUSH
14746: LD_VAR 0 1
14750: ST_TO_ADDR
// for i = 1 to length do
14751: LD_ADDR_VAR 0 6
14755: PUSH
14756: DOUBLE
14757: LD_INT 1
14759: DEC
14760: ST_TO_ADDR
14761: LD_VAR 0 11
14765: PUSH
14766: FOR_TO
14767: IFFALSE 14887
// begin for j = 1 to array do
14769: LD_ADDR_VAR 0 7
14773: PUSH
14774: DOUBLE
14775: LD_INT 1
14777: DEC
14778: ST_TO_ADDR
14779: LD_VAR 0 1
14783: PUSH
14784: FOR_TO
14785: IFFALSE 14873
// begin k := j + d ;
14787: LD_ADDR_VAR 0 8
14791: PUSH
14792: LD_VAR 0 7
14796: PUSH
14797: LD_VAR 0 9
14801: PLUS
14802: ST_TO_ADDR
// if k > array then
14803: LD_VAR 0 8
14807: PUSH
14808: LD_VAR 0 1
14812: GREATER
14813: IFFALSE 14823
// k := 1 ;
14815: LD_ADDR_VAR 0 8
14819: PUSH
14820: LD_INT 1
14822: ST_TO_ADDR
// if not k then
14823: LD_VAR 0 8
14827: NOT
14828: IFFALSE 14840
// k := array ;
14830: LD_ADDR_VAR 0 8
14834: PUSH
14835: LD_VAR 0 1
14839: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14840: LD_ADDR_VAR 0 10
14844: PUSH
14845: LD_VAR 0 10
14849: PPUSH
14850: LD_VAR 0 8
14854: PPUSH
14855: LD_VAR 0 1
14859: PUSH
14860: LD_VAR 0 7
14864: ARRAY
14865: PPUSH
14866: CALL_OW 1
14870: ST_TO_ADDR
// end ;
14871: GO 14784
14873: POP
14874: POP
// array := tmp ;
14875: LD_ADDR_VAR 0 1
14879: PUSH
14880: LD_VAR 0 10
14884: ST_TO_ADDR
// end ;
14885: GO 14766
14887: POP
14888: POP
// result := array ;
14889: LD_ADDR_VAR 0 5
14893: PUSH
14894: LD_VAR 0 1
14898: ST_TO_ADDR
// end ;
14899: LD_VAR 0 5
14903: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14904: LD_INT 0
14906: PPUSH
14907: PPUSH
// result := 0 ;
14908: LD_ADDR_VAR 0 3
14912: PUSH
14913: LD_INT 0
14915: ST_TO_ADDR
// if not array or not value in array then
14916: LD_VAR 0 1
14920: NOT
14921: PUSH
14922: LD_VAR 0 2
14926: PUSH
14927: LD_VAR 0 1
14931: IN
14932: NOT
14933: OR
14934: IFFALSE 14938
// exit ;
14936: GO 14992
// for i = 1 to array do
14938: LD_ADDR_VAR 0 4
14942: PUSH
14943: DOUBLE
14944: LD_INT 1
14946: DEC
14947: ST_TO_ADDR
14948: LD_VAR 0 1
14952: PUSH
14953: FOR_TO
14954: IFFALSE 14990
// if value = array [ i ] then
14956: LD_VAR 0 2
14960: PUSH
14961: LD_VAR 0 1
14965: PUSH
14966: LD_VAR 0 4
14970: ARRAY
14971: EQUAL
14972: IFFALSE 14988
// begin result := i ;
14974: LD_ADDR_VAR 0 3
14978: PUSH
14979: LD_VAR 0 4
14983: ST_TO_ADDR
// exit ;
14984: POP
14985: POP
14986: GO 14992
// end ;
14988: GO 14953
14990: POP
14991: POP
// end ;
14992: LD_VAR 0 3
14996: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14997: LD_INT 0
14999: PPUSH
// vc_chassis := chassis ;
15000: LD_ADDR_OWVAR 37
15004: PUSH
15005: LD_VAR 0 1
15009: ST_TO_ADDR
// vc_engine := engine ;
15010: LD_ADDR_OWVAR 39
15014: PUSH
15015: LD_VAR 0 2
15019: ST_TO_ADDR
// vc_control := control ;
15020: LD_ADDR_OWVAR 38
15024: PUSH
15025: LD_VAR 0 3
15029: ST_TO_ADDR
// vc_weapon := weapon ;
15030: LD_ADDR_OWVAR 40
15034: PUSH
15035: LD_VAR 0 4
15039: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15040: LD_ADDR_OWVAR 41
15044: PUSH
15045: LD_VAR 0 5
15049: ST_TO_ADDR
// end ;
15050: LD_VAR 0 6
15054: RET
// export function WantPlant ( unit ) ; var task ; begin
15055: LD_INT 0
15057: PPUSH
15058: PPUSH
// result := false ;
15059: LD_ADDR_VAR 0 2
15063: PUSH
15064: LD_INT 0
15066: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15067: LD_ADDR_VAR 0 3
15071: PUSH
15072: LD_VAR 0 1
15076: PPUSH
15077: CALL_OW 437
15081: ST_TO_ADDR
// if task then
15082: LD_VAR 0 3
15086: IFFALSE 15114
// if task [ 1 ] [ 1 ] = p then
15088: LD_VAR 0 3
15092: PUSH
15093: LD_INT 1
15095: ARRAY
15096: PUSH
15097: LD_INT 1
15099: ARRAY
15100: PUSH
15101: LD_STRING p
15103: EQUAL
15104: IFFALSE 15114
// result := true ;
15106: LD_ADDR_VAR 0 2
15110: PUSH
15111: LD_INT 1
15113: ST_TO_ADDR
// end ;
15114: LD_VAR 0 2
15118: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15119: LD_INT 0
15121: PPUSH
15122: PPUSH
15123: PPUSH
15124: PPUSH
// if pos < 1 then
15125: LD_VAR 0 2
15129: PUSH
15130: LD_INT 1
15132: LESS
15133: IFFALSE 15137
// exit ;
15135: GO 15440
// if pos = 1 then
15137: LD_VAR 0 2
15141: PUSH
15142: LD_INT 1
15144: EQUAL
15145: IFFALSE 15178
// result := Replace ( arr , pos [ 1 ] , value ) else
15147: LD_ADDR_VAR 0 4
15151: PUSH
15152: LD_VAR 0 1
15156: PPUSH
15157: LD_VAR 0 2
15161: PUSH
15162: LD_INT 1
15164: ARRAY
15165: PPUSH
15166: LD_VAR 0 3
15170: PPUSH
15171: CALL_OW 1
15175: ST_TO_ADDR
15176: GO 15440
// begin tmp := arr ;
15178: LD_ADDR_VAR 0 6
15182: PUSH
15183: LD_VAR 0 1
15187: ST_TO_ADDR
// s_arr := [ tmp ] ;
15188: LD_ADDR_VAR 0 7
15192: PUSH
15193: LD_VAR 0 6
15197: PUSH
15198: EMPTY
15199: LIST
15200: ST_TO_ADDR
// for i = 1 to pos - 1 do
15201: LD_ADDR_VAR 0 5
15205: PUSH
15206: DOUBLE
15207: LD_INT 1
15209: DEC
15210: ST_TO_ADDR
15211: LD_VAR 0 2
15215: PUSH
15216: LD_INT 1
15218: MINUS
15219: PUSH
15220: FOR_TO
15221: IFFALSE 15266
// begin tmp := tmp [ pos [ i ] ] ;
15223: LD_ADDR_VAR 0 6
15227: PUSH
15228: LD_VAR 0 6
15232: PUSH
15233: LD_VAR 0 2
15237: PUSH
15238: LD_VAR 0 5
15242: ARRAY
15243: ARRAY
15244: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15245: LD_ADDR_VAR 0 7
15249: PUSH
15250: LD_VAR 0 7
15254: PUSH
15255: LD_VAR 0 6
15259: PUSH
15260: EMPTY
15261: LIST
15262: ADD
15263: ST_TO_ADDR
// end ;
15264: GO 15220
15266: POP
15267: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15268: LD_ADDR_VAR 0 6
15272: PUSH
15273: LD_VAR 0 6
15277: PPUSH
15278: LD_VAR 0 2
15282: PUSH
15283: LD_VAR 0 2
15287: ARRAY
15288: PPUSH
15289: LD_VAR 0 3
15293: PPUSH
15294: CALL_OW 1
15298: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15299: LD_ADDR_VAR 0 7
15303: PUSH
15304: LD_VAR 0 7
15308: PPUSH
15309: LD_VAR 0 7
15313: PPUSH
15314: LD_VAR 0 6
15318: PPUSH
15319: CALL_OW 1
15323: ST_TO_ADDR
// for i = s_arr downto 2 do
15324: LD_ADDR_VAR 0 5
15328: PUSH
15329: DOUBLE
15330: LD_VAR 0 7
15334: INC
15335: ST_TO_ADDR
15336: LD_INT 2
15338: PUSH
15339: FOR_DOWNTO
15340: IFFALSE 15424
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15342: LD_ADDR_VAR 0 6
15346: PUSH
15347: LD_VAR 0 7
15351: PUSH
15352: LD_VAR 0 5
15356: PUSH
15357: LD_INT 1
15359: MINUS
15360: ARRAY
15361: PPUSH
15362: LD_VAR 0 2
15366: PUSH
15367: LD_VAR 0 5
15371: PUSH
15372: LD_INT 1
15374: MINUS
15375: ARRAY
15376: PPUSH
15377: LD_VAR 0 7
15381: PUSH
15382: LD_VAR 0 5
15386: ARRAY
15387: PPUSH
15388: CALL_OW 1
15392: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15393: LD_ADDR_VAR 0 7
15397: PUSH
15398: LD_VAR 0 7
15402: PPUSH
15403: LD_VAR 0 5
15407: PUSH
15408: LD_INT 1
15410: MINUS
15411: PPUSH
15412: LD_VAR 0 6
15416: PPUSH
15417: CALL_OW 1
15421: ST_TO_ADDR
// end ;
15422: GO 15339
15424: POP
15425: POP
// result := s_arr [ 1 ] ;
15426: LD_ADDR_VAR 0 4
15430: PUSH
15431: LD_VAR 0 7
15435: PUSH
15436: LD_INT 1
15438: ARRAY
15439: ST_TO_ADDR
// end ; end ;
15440: LD_VAR 0 4
15444: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15445: LD_INT 0
15447: PPUSH
15448: PPUSH
// if not list then
15449: LD_VAR 0 1
15453: NOT
15454: IFFALSE 15458
// exit ;
15456: GO 15549
// i := list [ pos1 ] ;
15458: LD_ADDR_VAR 0 5
15462: PUSH
15463: LD_VAR 0 1
15467: PUSH
15468: LD_VAR 0 2
15472: ARRAY
15473: ST_TO_ADDR
// if not i then
15474: LD_VAR 0 5
15478: NOT
15479: IFFALSE 15483
// exit ;
15481: GO 15549
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15483: LD_ADDR_VAR 0 1
15487: PUSH
15488: LD_VAR 0 1
15492: PPUSH
15493: LD_VAR 0 2
15497: PPUSH
15498: LD_VAR 0 1
15502: PUSH
15503: LD_VAR 0 3
15507: ARRAY
15508: PPUSH
15509: CALL_OW 1
15513: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15514: LD_ADDR_VAR 0 1
15518: PUSH
15519: LD_VAR 0 1
15523: PPUSH
15524: LD_VAR 0 3
15528: PPUSH
15529: LD_VAR 0 5
15533: PPUSH
15534: CALL_OW 1
15538: ST_TO_ADDR
// result := list ;
15539: LD_ADDR_VAR 0 4
15543: PUSH
15544: LD_VAR 0 1
15548: ST_TO_ADDR
// end ;
15549: LD_VAR 0 4
15553: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15554: LD_INT 0
15556: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15557: LD_ADDR_VAR 0 5
15561: PUSH
15562: LD_VAR 0 1
15566: PPUSH
15567: CALL_OW 250
15571: PPUSH
15572: LD_VAR 0 1
15576: PPUSH
15577: CALL_OW 251
15581: PPUSH
15582: LD_VAR 0 2
15586: PPUSH
15587: LD_VAR 0 3
15591: PPUSH
15592: LD_VAR 0 4
15596: PPUSH
15597: CALL 15975 0 5
15601: ST_TO_ADDR
// end ;
15602: LD_VAR 0 5
15606: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15607: LD_INT 0
15609: PPUSH
15610: PPUSH
15611: PPUSH
15612: PPUSH
// if not list or not unit then
15613: LD_VAR 0 2
15617: NOT
15618: PUSH
15619: LD_VAR 0 1
15623: NOT
15624: OR
15625: IFFALSE 15629
// exit ;
15627: GO 15970
// result := [ ] ;
15629: LD_ADDR_VAR 0 5
15633: PUSH
15634: EMPTY
15635: ST_TO_ADDR
// for i in list do
15636: LD_ADDR_VAR 0 6
15640: PUSH
15641: LD_VAR 0 2
15645: PUSH
15646: FOR_IN
15647: IFFALSE 15865
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15649: LD_ADDR_VAR 0 8
15653: PUSH
15654: LD_VAR 0 1
15658: PPUSH
15659: LD_VAR 0 6
15663: PUSH
15664: LD_INT 1
15666: ARRAY
15667: PPUSH
15668: LD_VAR 0 6
15672: PUSH
15673: LD_INT 2
15675: ARRAY
15676: PPUSH
15677: CALL_OW 297
15681: ST_TO_ADDR
// if not Count ( result ) then
15682: LD_VAR 0 5
15686: PPUSH
15687: CALL 12259 0 1
15691: NOT
15692: IFFALSE 15725
// begin result := Join ( result , [ i , tmp ] ) ;
15694: LD_ADDR_VAR 0 5
15698: PUSH
15699: LD_VAR 0 5
15703: PPUSH
15704: LD_VAR 0 6
15708: PUSH
15709: LD_VAR 0 8
15713: PUSH
15714: EMPTY
15715: LIST
15716: LIST
15717: PPUSH
15718: CALL 47940 0 2
15722: ST_TO_ADDR
// continue ;
15723: GO 15646
// end ; if result [ result ] [ 2 ] <= tmp then
15725: LD_VAR 0 5
15729: PUSH
15730: LD_VAR 0 5
15734: ARRAY
15735: PUSH
15736: LD_INT 2
15738: ARRAY
15739: PUSH
15740: LD_VAR 0 8
15744: LESSEQUAL
15745: IFFALSE 15778
// result := Join ( result , [ i , tmp ] ) else
15747: LD_ADDR_VAR 0 5
15751: PUSH
15752: LD_VAR 0 5
15756: PPUSH
15757: LD_VAR 0 6
15761: PUSH
15762: LD_VAR 0 8
15766: PUSH
15767: EMPTY
15768: LIST
15769: LIST
15770: PPUSH
15771: CALL 47940 0 2
15775: ST_TO_ADDR
15776: GO 15863
// begin for j := 1 to Count ( result ) do
15778: LD_ADDR_VAR 0 7
15782: PUSH
15783: DOUBLE
15784: LD_INT 1
15786: DEC
15787: ST_TO_ADDR
15788: LD_VAR 0 5
15792: PPUSH
15793: CALL 12259 0 1
15797: PUSH
15798: FOR_TO
15799: IFFALSE 15861
// begin if tmp < result [ j ] [ 2 ] then
15801: LD_VAR 0 8
15805: PUSH
15806: LD_VAR 0 5
15810: PUSH
15811: LD_VAR 0 7
15815: ARRAY
15816: PUSH
15817: LD_INT 2
15819: ARRAY
15820: LESS
15821: IFFALSE 15859
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15823: LD_ADDR_VAR 0 5
15827: PUSH
15828: LD_VAR 0 5
15832: PPUSH
15833: LD_VAR 0 7
15837: PPUSH
15838: LD_VAR 0 6
15842: PUSH
15843: LD_VAR 0 8
15847: PUSH
15848: EMPTY
15849: LIST
15850: LIST
15851: PPUSH
15852: CALL_OW 2
15856: ST_TO_ADDR
// break ;
15857: GO 15861
// end ; end ;
15859: GO 15798
15861: POP
15862: POP
// end ; end ;
15863: GO 15646
15865: POP
15866: POP
// if result and not asc then
15867: LD_VAR 0 5
15871: PUSH
15872: LD_VAR 0 3
15876: NOT
15877: AND
15878: IFFALSE 15895
// result := ReverseArray ( result ) ;
15880: LD_ADDR_VAR 0 5
15884: PUSH
15885: LD_VAR 0 5
15889: PPUSH
15890: CALL 43135 0 1
15894: ST_TO_ADDR
// tmp := [ ] ;
15895: LD_ADDR_VAR 0 8
15899: PUSH
15900: EMPTY
15901: ST_TO_ADDR
// if mode then
15902: LD_VAR 0 4
15906: IFFALSE 15970
// begin for i := 1 to result do
15908: LD_ADDR_VAR 0 6
15912: PUSH
15913: DOUBLE
15914: LD_INT 1
15916: DEC
15917: ST_TO_ADDR
15918: LD_VAR 0 5
15922: PUSH
15923: FOR_TO
15924: IFFALSE 15958
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
15926: LD_ADDR_VAR 0 8
15930: PUSH
15931: LD_VAR 0 8
15935: PPUSH
15936: LD_VAR 0 5
15940: PUSH
15941: LD_VAR 0 6
15945: ARRAY
15946: PUSH
15947: LD_INT 1
15949: ARRAY
15950: PPUSH
15951: CALL 47940 0 2
15955: ST_TO_ADDR
15956: GO 15923
15958: POP
15959: POP
// result := tmp ;
15960: LD_ADDR_VAR 0 5
15964: PUSH
15965: LD_VAR 0 8
15969: ST_TO_ADDR
// end ; end ;
15970: LD_VAR 0 5
15974: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
15975: LD_INT 0
15977: PPUSH
15978: PPUSH
15979: PPUSH
15980: PPUSH
// if not list then
15981: LD_VAR 0 3
15985: NOT
15986: IFFALSE 15990
// exit ;
15988: GO 16378
// result := [ ] ;
15990: LD_ADDR_VAR 0 6
15994: PUSH
15995: EMPTY
15996: ST_TO_ADDR
// for i in list do
15997: LD_ADDR_VAR 0 7
16001: PUSH
16002: LD_VAR 0 3
16006: PUSH
16007: FOR_IN
16008: IFFALSE 16210
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16010: LD_ADDR_VAR 0 9
16014: PUSH
16015: LD_VAR 0 7
16019: PPUSH
16020: LD_VAR 0 1
16024: PPUSH
16025: LD_VAR 0 2
16029: PPUSH
16030: CALL_OW 297
16034: ST_TO_ADDR
// if not result then
16035: LD_VAR 0 6
16039: NOT
16040: IFFALSE 16066
// result := [ [ i , tmp ] ] else
16042: LD_ADDR_VAR 0 6
16046: PUSH
16047: LD_VAR 0 7
16051: PUSH
16052: LD_VAR 0 9
16056: PUSH
16057: EMPTY
16058: LIST
16059: LIST
16060: PUSH
16061: EMPTY
16062: LIST
16063: ST_TO_ADDR
16064: GO 16208
// begin if result [ result ] [ 2 ] <= tmp then
16066: LD_VAR 0 6
16070: PUSH
16071: LD_VAR 0 6
16075: ARRAY
16076: PUSH
16077: LD_INT 2
16079: ARRAY
16080: PUSH
16081: LD_VAR 0 9
16085: LESSEQUAL
16086: IFFALSE 16128
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16088: LD_ADDR_VAR 0 6
16092: PUSH
16093: LD_VAR 0 6
16097: PPUSH
16098: LD_VAR 0 6
16102: PUSH
16103: LD_INT 1
16105: PLUS
16106: PPUSH
16107: LD_VAR 0 7
16111: PUSH
16112: LD_VAR 0 9
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 2
16125: ST_TO_ADDR
16126: GO 16208
// for j := 1 to result do
16128: LD_ADDR_VAR 0 8
16132: PUSH
16133: DOUBLE
16134: LD_INT 1
16136: DEC
16137: ST_TO_ADDR
16138: LD_VAR 0 6
16142: PUSH
16143: FOR_TO
16144: IFFALSE 16206
// begin if tmp < result [ j ] [ 2 ] then
16146: LD_VAR 0 9
16150: PUSH
16151: LD_VAR 0 6
16155: PUSH
16156: LD_VAR 0 8
16160: ARRAY
16161: PUSH
16162: LD_INT 2
16164: ARRAY
16165: LESS
16166: IFFALSE 16204
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16168: LD_ADDR_VAR 0 6
16172: PUSH
16173: LD_VAR 0 6
16177: PPUSH
16178: LD_VAR 0 8
16182: PPUSH
16183: LD_VAR 0 7
16187: PUSH
16188: LD_VAR 0 9
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PPUSH
16197: CALL_OW 2
16201: ST_TO_ADDR
// break ;
16202: GO 16206
// end ; end ;
16204: GO 16143
16206: POP
16207: POP
// end ; end ;
16208: GO 16007
16210: POP
16211: POP
// if result and not asc then
16212: LD_VAR 0 6
16216: PUSH
16217: LD_VAR 0 4
16221: NOT
16222: AND
16223: IFFALSE 16298
// begin tmp := result ;
16225: LD_ADDR_VAR 0 9
16229: PUSH
16230: LD_VAR 0 6
16234: ST_TO_ADDR
// for i = tmp downto 1 do
16235: LD_ADDR_VAR 0 7
16239: PUSH
16240: DOUBLE
16241: LD_VAR 0 9
16245: INC
16246: ST_TO_ADDR
16247: LD_INT 1
16249: PUSH
16250: FOR_DOWNTO
16251: IFFALSE 16296
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16253: LD_ADDR_VAR 0 6
16257: PUSH
16258: LD_VAR 0 6
16262: PPUSH
16263: LD_VAR 0 9
16267: PUSH
16268: LD_VAR 0 7
16272: MINUS
16273: PUSH
16274: LD_INT 1
16276: PLUS
16277: PPUSH
16278: LD_VAR 0 9
16282: PUSH
16283: LD_VAR 0 7
16287: ARRAY
16288: PPUSH
16289: CALL_OW 1
16293: ST_TO_ADDR
16294: GO 16250
16296: POP
16297: POP
// end ; tmp := [ ] ;
16298: LD_ADDR_VAR 0 9
16302: PUSH
16303: EMPTY
16304: ST_TO_ADDR
// if mode then
16305: LD_VAR 0 5
16309: IFFALSE 16378
// begin for i = 1 to result do
16311: LD_ADDR_VAR 0 7
16315: PUSH
16316: DOUBLE
16317: LD_INT 1
16319: DEC
16320: ST_TO_ADDR
16321: LD_VAR 0 6
16325: PUSH
16326: FOR_TO
16327: IFFALSE 16366
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16329: LD_ADDR_VAR 0 9
16333: PUSH
16334: LD_VAR 0 9
16338: PPUSH
16339: LD_VAR 0 7
16343: PPUSH
16344: LD_VAR 0 6
16348: PUSH
16349: LD_VAR 0 7
16353: ARRAY
16354: PUSH
16355: LD_INT 1
16357: ARRAY
16358: PPUSH
16359: CALL_OW 1
16363: ST_TO_ADDR
16364: GO 16326
16366: POP
16367: POP
// result := tmp ;
16368: LD_ADDR_VAR 0 6
16372: PUSH
16373: LD_VAR 0 9
16377: ST_TO_ADDR
// end ; end ;
16378: LD_VAR 0 6
16382: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16383: LD_INT 0
16385: PPUSH
16386: PPUSH
16387: PPUSH
16388: PPUSH
16389: PPUSH
16390: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16391: LD_ADDR_VAR 0 5
16395: PUSH
16396: LD_INT 0
16398: PUSH
16399: LD_INT 0
16401: PUSH
16402: LD_INT 0
16404: PUSH
16405: EMPTY
16406: PUSH
16407: EMPTY
16408: LIST
16409: LIST
16410: LIST
16411: LIST
16412: ST_TO_ADDR
// if not x or not y then
16413: LD_VAR 0 2
16417: NOT
16418: PUSH
16419: LD_VAR 0 3
16423: NOT
16424: OR
16425: IFFALSE 16429
// exit ;
16427: GO 18079
// if not range then
16429: LD_VAR 0 4
16433: NOT
16434: IFFALSE 16444
// range := 10 ;
16436: LD_ADDR_VAR 0 4
16440: PUSH
16441: LD_INT 10
16443: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16444: LD_ADDR_VAR 0 8
16448: PUSH
16449: LD_INT 81
16451: PUSH
16452: LD_VAR 0 1
16456: PUSH
16457: EMPTY
16458: LIST
16459: LIST
16460: PUSH
16461: LD_INT 92
16463: PUSH
16464: LD_VAR 0 2
16468: PUSH
16469: LD_VAR 0 3
16473: PUSH
16474: LD_VAR 0 4
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: PUSH
16485: LD_INT 3
16487: PUSH
16488: LD_INT 21
16490: PUSH
16491: LD_INT 3
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: PPUSH
16507: CALL_OW 69
16511: ST_TO_ADDR
// if not tmp then
16512: LD_VAR 0 8
16516: NOT
16517: IFFALSE 16521
// exit ;
16519: GO 18079
// for i in tmp do
16521: LD_ADDR_VAR 0 6
16525: PUSH
16526: LD_VAR 0 8
16530: PUSH
16531: FOR_IN
16532: IFFALSE 18054
// begin points := [ 0 , 0 , 0 ] ;
16534: LD_ADDR_VAR 0 9
16538: PUSH
16539: LD_INT 0
16541: PUSH
16542: LD_INT 0
16544: PUSH
16545: LD_INT 0
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: ST_TO_ADDR
// bpoints := 1 ;
16553: LD_ADDR_VAR 0 10
16557: PUSH
16558: LD_INT 1
16560: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16561: LD_VAR 0 6
16565: PPUSH
16566: CALL_OW 247
16570: PUSH
16571: LD_INT 1
16573: DOUBLE
16574: EQUAL
16575: IFTRUE 16579
16577: GO 17157
16579: POP
// begin if GetClass ( i ) = 1 then
16580: LD_VAR 0 6
16584: PPUSH
16585: CALL_OW 257
16589: PUSH
16590: LD_INT 1
16592: EQUAL
16593: IFFALSE 16614
// points := [ 10 , 5 , 3 ] ;
16595: LD_ADDR_VAR 0 9
16599: PUSH
16600: LD_INT 10
16602: PUSH
16603: LD_INT 5
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: LIST
16613: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16614: LD_VAR 0 6
16618: PPUSH
16619: CALL_OW 257
16623: PUSH
16624: LD_INT 2
16626: PUSH
16627: LD_INT 3
16629: PUSH
16630: LD_INT 4
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: LIST
16637: IN
16638: IFFALSE 16659
// points := [ 3 , 2 , 1 ] ;
16640: LD_ADDR_VAR 0 9
16644: PUSH
16645: LD_INT 3
16647: PUSH
16648: LD_INT 2
16650: PUSH
16651: LD_INT 1
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16659: LD_VAR 0 6
16663: PPUSH
16664: CALL_OW 257
16668: PUSH
16669: LD_INT 5
16671: EQUAL
16672: IFFALSE 16693
// points := [ 130 , 5 , 2 ] ;
16674: LD_ADDR_VAR 0 9
16678: PUSH
16679: LD_INT 130
16681: PUSH
16682: LD_INT 5
16684: PUSH
16685: LD_INT 2
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: ST_TO_ADDR
// if GetClass ( i ) = 8 then
16693: LD_VAR 0 6
16697: PPUSH
16698: CALL_OW 257
16702: PUSH
16703: LD_INT 8
16705: EQUAL
16706: IFFALSE 16727
// points := [ 35 , 35 , 30 ] ;
16708: LD_ADDR_VAR 0 9
16712: PUSH
16713: LD_INT 35
16715: PUSH
16716: LD_INT 35
16718: PUSH
16719: LD_INT 30
16721: PUSH
16722: EMPTY
16723: LIST
16724: LIST
16725: LIST
16726: ST_TO_ADDR
// if GetClass ( i ) = 9 then
16727: LD_VAR 0 6
16731: PPUSH
16732: CALL_OW 257
16736: PUSH
16737: LD_INT 9
16739: EQUAL
16740: IFFALSE 16761
// points := [ 20 , 55 , 40 ] ;
16742: LD_ADDR_VAR 0 9
16746: PUSH
16747: LD_INT 20
16749: PUSH
16750: LD_INT 55
16752: PUSH
16753: LD_INT 40
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: LIST
16760: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
16761: LD_VAR 0 6
16765: PPUSH
16766: CALL_OW 257
16770: PUSH
16771: LD_INT 12
16773: PUSH
16774: LD_INT 16
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: IN
16781: IFFALSE 16802
// points := [ 5 , 3 , 2 ] ;
16783: LD_ADDR_VAR 0 9
16787: PUSH
16788: LD_INT 5
16790: PUSH
16791: LD_INT 3
16793: PUSH
16794: LD_INT 2
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: ST_TO_ADDR
// if GetClass ( i ) = 17 then
16802: LD_VAR 0 6
16806: PPUSH
16807: CALL_OW 257
16811: PUSH
16812: LD_INT 17
16814: EQUAL
16815: IFFALSE 16836
// points := [ 100 , 50 , 75 ] ;
16817: LD_ADDR_VAR 0 9
16821: PUSH
16822: LD_INT 100
16824: PUSH
16825: LD_INT 50
16827: PUSH
16828: LD_INT 75
16830: PUSH
16831: EMPTY
16832: LIST
16833: LIST
16834: LIST
16835: ST_TO_ADDR
// if GetClass ( i ) = 15 then
16836: LD_VAR 0 6
16840: PPUSH
16841: CALL_OW 257
16845: PUSH
16846: LD_INT 15
16848: EQUAL
16849: IFFALSE 16870
// points := [ 10 , 5 , 3 ] ;
16851: LD_ADDR_VAR 0 9
16855: PUSH
16856: LD_INT 10
16858: PUSH
16859: LD_INT 5
16861: PUSH
16862: LD_INT 3
16864: PUSH
16865: EMPTY
16866: LIST
16867: LIST
16868: LIST
16869: ST_TO_ADDR
// if GetClass ( i ) = 14 then
16870: LD_VAR 0 6
16874: PPUSH
16875: CALL_OW 257
16879: PUSH
16880: LD_INT 14
16882: EQUAL
16883: IFFALSE 16904
// points := [ 10 , 0 , 0 ] ;
16885: LD_ADDR_VAR 0 9
16889: PUSH
16890: LD_INT 10
16892: PUSH
16893: LD_INT 0
16895: PUSH
16896: LD_INT 0
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: ST_TO_ADDR
// if GetClass ( i ) = 11 then
16904: LD_VAR 0 6
16908: PPUSH
16909: CALL_OW 257
16913: PUSH
16914: LD_INT 11
16916: EQUAL
16917: IFFALSE 16938
// points := [ 30 , 10 , 5 ] ;
16919: LD_ADDR_VAR 0 9
16923: PUSH
16924: LD_INT 30
16926: PUSH
16927: LD_INT 10
16929: PUSH
16930: LD_INT 5
16932: PUSH
16933: EMPTY
16934: LIST
16935: LIST
16936: LIST
16937: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
16938: LD_VAR 0 1
16942: PPUSH
16943: LD_INT 5
16945: PPUSH
16946: CALL_OW 321
16950: PUSH
16951: LD_INT 2
16953: EQUAL
16954: IFFALSE 16971
// bpoints := bpoints * 1.8 ;
16956: LD_ADDR_VAR 0 10
16960: PUSH
16961: LD_VAR 0 10
16965: PUSH
16966: LD_REAL  1.80000000000000E+0000
16969: MUL
16970: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
16971: LD_VAR 0 6
16975: PPUSH
16976: CALL_OW 257
16980: PUSH
16981: LD_INT 1
16983: PUSH
16984: LD_INT 2
16986: PUSH
16987: LD_INT 3
16989: PUSH
16990: LD_INT 4
16992: PUSH
16993: EMPTY
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: IN
16999: PUSH
17000: LD_VAR 0 1
17004: PPUSH
17005: LD_INT 51
17007: PPUSH
17008: CALL_OW 321
17012: PUSH
17013: LD_INT 2
17015: EQUAL
17016: AND
17017: IFFALSE 17034
// bpoints := bpoints * 1.2 ;
17019: LD_ADDR_VAR 0 10
17023: PUSH
17024: LD_VAR 0 10
17028: PUSH
17029: LD_REAL  1.20000000000000E+0000
17032: MUL
17033: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17034: LD_VAR 0 6
17038: PPUSH
17039: CALL_OW 257
17043: PUSH
17044: LD_INT 5
17046: PUSH
17047: LD_INT 7
17049: PUSH
17050: LD_INT 9
17052: PUSH
17053: EMPTY
17054: LIST
17055: LIST
17056: LIST
17057: IN
17058: PUSH
17059: LD_VAR 0 1
17063: PPUSH
17064: LD_INT 52
17066: PPUSH
17067: CALL_OW 321
17071: PUSH
17072: LD_INT 2
17074: EQUAL
17075: AND
17076: IFFALSE 17093
// bpoints := bpoints * 1.5 ;
17078: LD_ADDR_VAR 0 10
17082: PUSH
17083: LD_VAR 0 10
17087: PUSH
17088: LD_REAL  1.50000000000000E+0000
17091: MUL
17092: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17093: LD_VAR 0 1
17097: PPUSH
17098: LD_INT 66
17100: PPUSH
17101: CALL_OW 321
17105: PUSH
17106: LD_INT 2
17108: EQUAL
17109: IFFALSE 17126
// bpoints := bpoints * 1.1 ;
17111: LD_ADDR_VAR 0 10
17115: PUSH
17116: LD_VAR 0 10
17120: PUSH
17121: LD_REAL  1.10000000000000E+0000
17124: MUL
17125: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17126: LD_ADDR_VAR 0 10
17130: PUSH
17131: LD_VAR 0 10
17135: PUSH
17136: LD_VAR 0 6
17140: PPUSH
17141: LD_INT 1
17143: PPUSH
17144: CALL_OW 259
17148: PUSH
17149: LD_REAL  1.15000000000000E+0000
17152: MUL
17153: MUL
17154: ST_TO_ADDR
// end ; unit_vehicle :
17155: GO 17983
17157: LD_INT 2
17159: DOUBLE
17160: EQUAL
17161: IFTRUE 17165
17163: GO 17971
17165: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17166: LD_VAR 0 6
17170: PPUSH
17171: CALL_OW 264
17175: PUSH
17176: LD_INT 2
17178: PUSH
17179: LD_INT 42
17181: PUSH
17182: LD_INT 24
17184: PUSH
17185: EMPTY
17186: LIST
17187: LIST
17188: LIST
17189: IN
17190: IFFALSE 17211
// points := [ 25 , 5 , 3 ] ;
17192: LD_ADDR_VAR 0 9
17196: PUSH
17197: LD_INT 25
17199: PUSH
17200: LD_INT 5
17202: PUSH
17203: LD_INT 3
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: LIST
17210: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17211: LD_VAR 0 6
17215: PPUSH
17216: CALL_OW 264
17220: PUSH
17221: LD_INT 4
17223: PUSH
17224: LD_INT 43
17226: PUSH
17227: LD_INT 25
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: LIST
17234: IN
17235: IFFALSE 17256
// points := [ 40 , 15 , 5 ] ;
17237: LD_ADDR_VAR 0 9
17241: PUSH
17242: LD_INT 40
17244: PUSH
17245: LD_INT 15
17247: PUSH
17248: LD_INT 5
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: LIST
17255: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17256: LD_VAR 0 6
17260: PPUSH
17261: CALL_OW 264
17265: PUSH
17266: LD_INT 3
17268: PUSH
17269: LD_INT 23
17271: PUSH
17272: EMPTY
17273: LIST
17274: LIST
17275: IN
17276: IFFALSE 17297
// points := [ 7 , 25 , 8 ] ;
17278: LD_ADDR_VAR 0 9
17282: PUSH
17283: LD_INT 7
17285: PUSH
17286: LD_INT 25
17288: PUSH
17289: LD_INT 8
17291: PUSH
17292: EMPTY
17293: LIST
17294: LIST
17295: LIST
17296: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17297: LD_VAR 0 6
17301: PPUSH
17302: CALL_OW 264
17306: PUSH
17307: LD_INT 5
17309: PUSH
17310: LD_INT 27
17312: PUSH
17313: LD_INT 44
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: LIST
17320: IN
17321: IFFALSE 17342
// points := [ 14 , 50 , 16 ] ;
17323: LD_ADDR_VAR 0 9
17327: PUSH
17328: LD_INT 14
17330: PUSH
17331: LD_INT 50
17333: PUSH
17334: LD_INT 16
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17342: LD_VAR 0 6
17346: PPUSH
17347: CALL_OW 264
17351: PUSH
17352: LD_INT 6
17354: PUSH
17355: LD_INT 46
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: IN
17362: IFFALSE 17383
// points := [ 32 , 120 , 70 ] ;
17364: LD_ADDR_VAR 0 9
17368: PUSH
17369: LD_INT 32
17371: PUSH
17372: LD_INT 120
17374: PUSH
17375: LD_INT 70
17377: PUSH
17378: EMPTY
17379: LIST
17380: LIST
17381: LIST
17382: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17383: LD_VAR 0 6
17387: PPUSH
17388: CALL_OW 264
17392: PUSH
17393: LD_INT 7
17395: PUSH
17396: LD_INT 28
17398: PUSH
17399: LD_INT 45
17401: PUSH
17402: LD_INT 92
17404: PUSH
17405: EMPTY
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: IN
17411: IFFALSE 17432
// points := [ 35 , 20 , 45 ] ;
17413: LD_ADDR_VAR 0 9
17417: PUSH
17418: LD_INT 35
17420: PUSH
17421: LD_INT 20
17423: PUSH
17424: LD_INT 45
17426: PUSH
17427: EMPTY
17428: LIST
17429: LIST
17430: LIST
17431: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17432: LD_VAR 0 6
17436: PPUSH
17437: CALL_OW 264
17441: PUSH
17442: LD_INT 47
17444: PUSH
17445: EMPTY
17446: LIST
17447: IN
17448: IFFALSE 17469
// points := [ 67 , 45 , 75 ] ;
17450: LD_ADDR_VAR 0 9
17454: PUSH
17455: LD_INT 67
17457: PUSH
17458: LD_INT 45
17460: PUSH
17461: LD_INT 75
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17469: LD_VAR 0 6
17473: PPUSH
17474: CALL_OW 264
17478: PUSH
17479: LD_INT 26
17481: PUSH
17482: EMPTY
17483: LIST
17484: IN
17485: IFFALSE 17506
// points := [ 120 , 30 , 80 ] ;
17487: LD_ADDR_VAR 0 9
17491: PUSH
17492: LD_INT 120
17494: PUSH
17495: LD_INT 30
17497: PUSH
17498: LD_INT 80
17500: PUSH
17501: EMPTY
17502: LIST
17503: LIST
17504: LIST
17505: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17506: LD_VAR 0 6
17510: PPUSH
17511: CALL_OW 264
17515: PUSH
17516: LD_INT 22
17518: PUSH
17519: EMPTY
17520: LIST
17521: IN
17522: IFFALSE 17543
// points := [ 40 , 1 , 1 ] ;
17524: LD_ADDR_VAR 0 9
17528: PUSH
17529: LD_INT 40
17531: PUSH
17532: LD_INT 1
17534: PUSH
17535: LD_INT 1
17537: PUSH
17538: EMPTY
17539: LIST
17540: LIST
17541: LIST
17542: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17543: LD_VAR 0 6
17547: PPUSH
17548: CALL_OW 264
17552: PUSH
17553: LD_INT 29
17555: PUSH
17556: EMPTY
17557: LIST
17558: IN
17559: IFFALSE 17580
// points := [ 70 , 200 , 400 ] ;
17561: LD_ADDR_VAR 0 9
17565: PUSH
17566: LD_INT 70
17568: PUSH
17569: LD_INT 200
17571: PUSH
17572: LD_INT 400
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: LIST
17579: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17580: LD_VAR 0 6
17584: PPUSH
17585: CALL_OW 264
17589: PUSH
17590: LD_INT 14
17592: PUSH
17593: LD_INT 53
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: IN
17600: IFFALSE 17621
// points := [ 40 , 10 , 20 ] ;
17602: LD_ADDR_VAR 0 9
17606: PUSH
17607: LD_INT 40
17609: PUSH
17610: LD_INT 10
17612: PUSH
17613: LD_INT 20
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: LIST
17620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17621: LD_VAR 0 6
17625: PPUSH
17626: CALL_OW 264
17630: PUSH
17631: LD_INT 9
17633: PUSH
17634: EMPTY
17635: LIST
17636: IN
17637: IFFALSE 17658
// points := [ 5 , 70 , 20 ] ;
17639: LD_ADDR_VAR 0 9
17643: PUSH
17644: LD_INT 5
17646: PUSH
17647: LD_INT 70
17649: PUSH
17650: LD_INT 20
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: LIST
17657: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17658: LD_VAR 0 6
17662: PPUSH
17663: CALL_OW 264
17667: PUSH
17668: LD_INT 10
17670: PUSH
17671: EMPTY
17672: LIST
17673: IN
17674: IFFALSE 17695
// points := [ 35 , 110 , 70 ] ;
17676: LD_ADDR_VAR 0 9
17680: PUSH
17681: LD_INT 35
17683: PUSH
17684: LD_INT 110
17686: PUSH
17687: LD_INT 70
17689: PUSH
17690: EMPTY
17691: LIST
17692: LIST
17693: LIST
17694: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
17695: LD_VAR 0 6
17699: PPUSH
17700: CALL_OW 265
17704: PUSH
17705: LD_INT 25
17707: EQUAL
17708: IFFALSE 17729
// points := [ 80 , 65 , 100 ] ;
17710: LD_ADDR_VAR 0 9
17714: PUSH
17715: LD_INT 80
17717: PUSH
17718: LD_INT 65
17720: PUSH
17721: LD_INT 100
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
17729: LD_VAR 0 6
17733: PPUSH
17734: CALL_OW 263
17738: PUSH
17739: LD_INT 1
17741: EQUAL
17742: IFFALSE 17777
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
17744: LD_ADDR_VAR 0 10
17748: PUSH
17749: LD_VAR 0 10
17753: PUSH
17754: LD_VAR 0 6
17758: PPUSH
17759: CALL_OW 311
17763: PPUSH
17764: LD_INT 3
17766: PPUSH
17767: CALL_OW 259
17771: PUSH
17772: LD_INT 4
17774: MUL
17775: MUL
17776: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
17777: LD_VAR 0 6
17781: PPUSH
17782: CALL_OW 263
17786: PUSH
17787: LD_INT 2
17789: EQUAL
17790: IFFALSE 17841
// begin j := IsControledBy ( i ) ;
17792: LD_ADDR_VAR 0 7
17796: PUSH
17797: LD_VAR 0 6
17801: PPUSH
17802: CALL_OW 312
17806: ST_TO_ADDR
// if j then
17807: LD_VAR 0 7
17811: IFFALSE 17841
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
17813: LD_ADDR_VAR 0 10
17817: PUSH
17818: LD_VAR 0 10
17822: PUSH
17823: LD_VAR 0 7
17827: PPUSH
17828: LD_INT 3
17830: PPUSH
17831: CALL_OW 259
17835: PUSH
17836: LD_INT 3
17838: MUL
17839: MUL
17840: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
17841: LD_VAR 0 6
17845: PPUSH
17846: CALL_OW 264
17850: PUSH
17851: LD_INT 5
17853: PUSH
17854: LD_INT 6
17856: PUSH
17857: LD_INT 46
17859: PUSH
17860: LD_INT 44
17862: PUSH
17863: LD_INT 47
17865: PUSH
17866: LD_INT 45
17868: PUSH
17869: LD_INT 28
17871: PUSH
17872: LD_INT 7
17874: PUSH
17875: LD_INT 27
17877: PUSH
17878: LD_INT 29
17880: PUSH
17881: EMPTY
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: IN
17893: PUSH
17894: LD_VAR 0 1
17898: PPUSH
17899: LD_INT 52
17901: PPUSH
17902: CALL_OW 321
17906: PUSH
17907: LD_INT 2
17909: EQUAL
17910: AND
17911: IFFALSE 17928
// bpoints := bpoints * 1.2 ;
17913: LD_ADDR_VAR 0 10
17917: PUSH
17918: LD_VAR 0 10
17922: PUSH
17923: LD_REAL  1.20000000000000E+0000
17926: MUL
17927: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
17928: LD_VAR 0 6
17932: PPUSH
17933: CALL_OW 264
17937: PUSH
17938: LD_INT 6
17940: PUSH
17941: LD_INT 46
17943: PUSH
17944: LD_INT 47
17946: PUSH
17947: EMPTY
17948: LIST
17949: LIST
17950: LIST
17951: IN
17952: IFFALSE 17969
// bpoints := bpoints * 1.2 ;
17954: LD_ADDR_VAR 0 10
17958: PUSH
17959: LD_VAR 0 10
17963: PUSH
17964: LD_REAL  1.20000000000000E+0000
17967: MUL
17968: ST_TO_ADDR
// end ; unit_building :
17969: GO 17983
17971: LD_INT 3
17973: DOUBLE
17974: EQUAL
17975: IFTRUE 17979
17977: GO 17982
17979: POP
// ; end ;
17980: GO 17983
17982: POP
// for j = 1 to 3 do
17983: LD_ADDR_VAR 0 7
17987: PUSH
17988: DOUBLE
17989: LD_INT 1
17991: DEC
17992: ST_TO_ADDR
17993: LD_INT 3
17995: PUSH
17996: FOR_TO
17997: IFFALSE 18050
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
17999: LD_ADDR_VAR 0 5
18003: PUSH
18004: LD_VAR 0 5
18008: PPUSH
18009: LD_VAR 0 7
18013: PPUSH
18014: LD_VAR 0 5
18018: PUSH
18019: LD_VAR 0 7
18023: ARRAY
18024: PUSH
18025: LD_VAR 0 9
18029: PUSH
18030: LD_VAR 0 7
18034: ARRAY
18035: PUSH
18036: LD_VAR 0 10
18040: MUL
18041: PLUS
18042: PPUSH
18043: CALL_OW 1
18047: ST_TO_ADDR
18048: GO 17996
18050: POP
18051: POP
// end ;
18052: GO 16531
18054: POP
18055: POP
// result := Replace ( result , 4 , tmp ) ;
18056: LD_ADDR_VAR 0 5
18060: PUSH
18061: LD_VAR 0 5
18065: PPUSH
18066: LD_INT 4
18068: PPUSH
18069: LD_VAR 0 8
18073: PPUSH
18074: CALL_OW 1
18078: ST_TO_ADDR
// end ;
18079: LD_VAR 0 5
18083: RET
// export function DangerAtRange ( unit , range ) ; begin
18084: LD_INT 0
18086: PPUSH
// if not unit then
18087: LD_VAR 0 1
18091: NOT
18092: IFFALSE 18096
// exit ;
18094: GO 18141
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18096: LD_ADDR_VAR 0 3
18100: PUSH
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 255
18110: PPUSH
18111: LD_VAR 0 1
18115: PPUSH
18116: CALL_OW 250
18120: PPUSH
18121: LD_VAR 0 1
18125: PPUSH
18126: CALL_OW 251
18130: PPUSH
18131: LD_VAR 0 2
18135: PPUSH
18136: CALL 16383 0 4
18140: ST_TO_ADDR
// end ;
18141: LD_VAR 0 3
18145: RET
// export function DangerInArea ( side , area ) ; begin
18146: LD_INT 0
18148: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18149: LD_ADDR_VAR 0 3
18153: PUSH
18154: LD_VAR 0 2
18158: PPUSH
18159: LD_INT 81
18161: PUSH
18162: LD_VAR 0 1
18166: PUSH
18167: EMPTY
18168: LIST
18169: LIST
18170: PPUSH
18171: CALL_OW 70
18175: ST_TO_ADDR
// end ;
18176: LD_VAR 0 3
18180: RET
// export function IsExtension ( b ) ; begin
18181: LD_INT 0
18183: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18184: LD_ADDR_VAR 0 2
18188: PUSH
18189: LD_VAR 0 1
18193: PUSH
18194: LD_INT 23
18196: PUSH
18197: LD_INT 20
18199: PUSH
18200: LD_INT 22
18202: PUSH
18203: LD_INT 17
18205: PUSH
18206: LD_INT 24
18208: PUSH
18209: LD_INT 21
18211: PUSH
18212: LD_INT 19
18214: PUSH
18215: LD_INT 16
18217: PUSH
18218: LD_INT 25
18220: PUSH
18221: LD_INT 18
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: LIST
18232: LIST
18233: LIST
18234: LIST
18235: IN
18236: ST_TO_ADDR
// end ;
18237: LD_VAR 0 2
18241: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18242: LD_INT 0
18244: PPUSH
18245: PPUSH
18246: PPUSH
// result := [ ] ;
18247: LD_ADDR_VAR 0 4
18251: PUSH
18252: EMPTY
18253: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18254: LD_ADDR_VAR 0 5
18258: PUSH
18259: LD_VAR 0 2
18263: PPUSH
18264: LD_INT 21
18266: PUSH
18267: LD_INT 3
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: PPUSH
18274: CALL_OW 70
18278: ST_TO_ADDR
// if not tmp then
18279: LD_VAR 0 5
18283: NOT
18284: IFFALSE 18288
// exit ;
18286: GO 18352
// if checkLink then
18288: LD_VAR 0 3
18292: IFFALSE 18342
// begin for i in tmp do
18294: LD_ADDR_VAR 0 6
18298: PUSH
18299: LD_VAR 0 5
18303: PUSH
18304: FOR_IN
18305: IFFALSE 18340
// if GetBase ( i ) <> base then
18307: LD_VAR 0 6
18311: PPUSH
18312: CALL_OW 274
18316: PUSH
18317: LD_VAR 0 1
18321: NONEQUAL
18322: IFFALSE 18338
// ComLinkToBase ( base , i ) ;
18324: LD_VAR 0 1
18328: PPUSH
18329: LD_VAR 0 6
18333: PPUSH
18334: CALL_OW 169
18338: GO 18304
18340: POP
18341: POP
// end ; result := tmp ;
18342: LD_ADDR_VAR 0 4
18346: PUSH
18347: LD_VAR 0 5
18351: ST_TO_ADDR
// end ;
18352: LD_VAR 0 4
18356: RET
// export function ComComplete ( units , b ) ; var i ; begin
18357: LD_INT 0
18359: PPUSH
18360: PPUSH
// if not units then
18361: LD_VAR 0 1
18365: NOT
18366: IFFALSE 18370
// exit ;
18368: GO 18460
// for i in units do
18370: LD_ADDR_VAR 0 4
18374: PUSH
18375: LD_VAR 0 1
18379: PUSH
18380: FOR_IN
18381: IFFALSE 18458
// if BuildingStatus ( b ) = bs_build then
18383: LD_VAR 0 2
18387: PPUSH
18388: CALL_OW 461
18392: PUSH
18393: LD_INT 1
18395: EQUAL
18396: IFFALSE 18456
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18398: LD_VAR 0 4
18402: PPUSH
18403: LD_STRING h
18405: PUSH
18406: LD_VAR 0 2
18410: PPUSH
18411: CALL_OW 250
18415: PUSH
18416: LD_VAR 0 2
18420: PPUSH
18421: CALL_OW 251
18425: PUSH
18426: LD_VAR 0 2
18430: PUSH
18431: LD_INT 0
18433: PUSH
18434: LD_INT 0
18436: PUSH
18437: LD_INT 0
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: LIST
18445: LIST
18446: LIST
18447: LIST
18448: PUSH
18449: EMPTY
18450: LIST
18451: PPUSH
18452: CALL_OW 446
18456: GO 18380
18458: POP
18459: POP
// end ;
18460: LD_VAR 0 3
18464: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18465: LD_INT 0
18467: PPUSH
18468: PPUSH
18469: PPUSH
18470: PPUSH
18471: PPUSH
18472: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18473: LD_VAR 0 1
18477: NOT
18478: PUSH
18479: LD_VAR 0 1
18483: PPUSH
18484: CALL_OW 263
18488: PUSH
18489: LD_INT 2
18491: NONEQUAL
18492: OR
18493: IFFALSE 18497
// exit ;
18495: GO 18813
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18497: LD_ADDR_VAR 0 6
18501: PUSH
18502: LD_INT 22
18504: PUSH
18505: LD_VAR 0 1
18509: PPUSH
18510: CALL_OW 255
18514: PUSH
18515: EMPTY
18516: LIST
18517: LIST
18518: PUSH
18519: LD_INT 2
18521: PUSH
18522: LD_INT 30
18524: PUSH
18525: LD_INT 36
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 34
18534: PUSH
18535: LD_INT 31
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: PPUSH
18551: CALL_OW 69
18555: ST_TO_ADDR
// if not tmp then
18556: LD_VAR 0 6
18560: NOT
18561: IFFALSE 18565
// exit ;
18563: GO 18813
// result := [ ] ;
18565: LD_ADDR_VAR 0 2
18569: PUSH
18570: EMPTY
18571: ST_TO_ADDR
// for i in tmp do
18572: LD_ADDR_VAR 0 3
18576: PUSH
18577: LD_VAR 0 6
18581: PUSH
18582: FOR_IN
18583: IFFALSE 18654
// begin t := UnitsInside ( i ) ;
18585: LD_ADDR_VAR 0 4
18589: PUSH
18590: LD_VAR 0 3
18594: PPUSH
18595: CALL_OW 313
18599: ST_TO_ADDR
// if t then
18600: LD_VAR 0 4
18604: IFFALSE 18652
// for j in t do
18606: LD_ADDR_VAR 0 7
18610: PUSH
18611: LD_VAR 0 4
18615: PUSH
18616: FOR_IN
18617: IFFALSE 18650
// result := Replace ( result , result + 1 , j ) ;
18619: LD_ADDR_VAR 0 2
18623: PUSH
18624: LD_VAR 0 2
18628: PPUSH
18629: LD_VAR 0 2
18633: PUSH
18634: LD_INT 1
18636: PLUS
18637: PPUSH
18638: LD_VAR 0 7
18642: PPUSH
18643: CALL_OW 1
18647: ST_TO_ADDR
18648: GO 18616
18650: POP
18651: POP
// end ;
18652: GO 18582
18654: POP
18655: POP
// if not result then
18656: LD_VAR 0 2
18660: NOT
18661: IFFALSE 18665
// exit ;
18663: GO 18813
// mech := result [ 1 ] ;
18665: LD_ADDR_VAR 0 5
18669: PUSH
18670: LD_VAR 0 2
18674: PUSH
18675: LD_INT 1
18677: ARRAY
18678: ST_TO_ADDR
// if result > 1 then
18679: LD_VAR 0 2
18683: PUSH
18684: LD_INT 1
18686: GREATER
18687: IFFALSE 18799
// begin for i = 2 to result do
18689: LD_ADDR_VAR 0 3
18693: PUSH
18694: DOUBLE
18695: LD_INT 2
18697: DEC
18698: ST_TO_ADDR
18699: LD_VAR 0 2
18703: PUSH
18704: FOR_TO
18705: IFFALSE 18797
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
18707: LD_ADDR_VAR 0 4
18711: PUSH
18712: LD_VAR 0 2
18716: PUSH
18717: LD_VAR 0 3
18721: ARRAY
18722: PPUSH
18723: LD_INT 3
18725: PPUSH
18726: CALL_OW 259
18730: PUSH
18731: LD_VAR 0 2
18735: PUSH
18736: LD_VAR 0 3
18740: ARRAY
18741: PPUSH
18742: CALL_OW 432
18746: MINUS
18747: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
18748: LD_VAR 0 4
18752: PUSH
18753: LD_VAR 0 5
18757: PPUSH
18758: LD_INT 3
18760: PPUSH
18761: CALL_OW 259
18765: PUSH
18766: LD_VAR 0 5
18770: PPUSH
18771: CALL_OW 432
18775: MINUS
18776: GREATEREQUAL
18777: IFFALSE 18795
// mech := result [ i ] ;
18779: LD_ADDR_VAR 0 5
18783: PUSH
18784: LD_VAR 0 2
18788: PUSH
18789: LD_VAR 0 3
18793: ARRAY
18794: ST_TO_ADDR
// end ;
18795: GO 18704
18797: POP
18798: POP
// end ; ComLinkTo ( vehicle , mech ) ;
18799: LD_VAR 0 1
18803: PPUSH
18804: LD_VAR 0 5
18808: PPUSH
18809: CALL_OW 135
// end ;
18813: LD_VAR 0 2
18817: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
18818: LD_INT 0
18820: PPUSH
18821: PPUSH
18822: PPUSH
18823: PPUSH
18824: PPUSH
18825: PPUSH
18826: PPUSH
18827: PPUSH
18828: PPUSH
18829: PPUSH
18830: PPUSH
18831: PPUSH
18832: PPUSH
// result := [ ] ;
18833: LD_ADDR_VAR 0 7
18837: PUSH
18838: EMPTY
18839: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
18840: LD_VAR 0 1
18844: PPUSH
18845: CALL_OW 266
18849: PUSH
18850: LD_INT 0
18852: PUSH
18853: LD_INT 1
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: IN
18860: NOT
18861: IFFALSE 18865
// exit ;
18863: GO 20499
// if name then
18865: LD_VAR 0 3
18869: IFFALSE 18885
// SetBName ( base_dep , name ) ;
18871: LD_VAR 0 1
18875: PPUSH
18876: LD_VAR 0 3
18880: PPUSH
18881: CALL_OW 500
// base := GetBase ( base_dep ) ;
18885: LD_ADDR_VAR 0 15
18889: PUSH
18890: LD_VAR 0 1
18894: PPUSH
18895: CALL_OW 274
18899: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
18900: LD_ADDR_VAR 0 16
18904: PUSH
18905: LD_VAR 0 1
18909: PPUSH
18910: CALL_OW 255
18914: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
18915: LD_ADDR_VAR 0 17
18919: PUSH
18920: LD_VAR 0 1
18924: PPUSH
18925: CALL_OW 248
18929: ST_TO_ADDR
// if sources then
18930: LD_VAR 0 5
18934: IFFALSE 18981
// for i = 1 to 3 do
18936: LD_ADDR_VAR 0 8
18940: PUSH
18941: DOUBLE
18942: LD_INT 1
18944: DEC
18945: ST_TO_ADDR
18946: LD_INT 3
18948: PUSH
18949: FOR_TO
18950: IFFALSE 18979
// AddResourceType ( base , i , sources [ i ] ) ;
18952: LD_VAR 0 15
18956: PPUSH
18957: LD_VAR 0 8
18961: PPUSH
18962: LD_VAR 0 5
18966: PUSH
18967: LD_VAR 0 8
18971: ARRAY
18972: PPUSH
18973: CALL_OW 276
18977: GO 18949
18979: POP
18980: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
18981: LD_ADDR_VAR 0 18
18985: PUSH
18986: LD_VAR 0 15
18990: PPUSH
18991: LD_VAR 0 2
18995: PPUSH
18996: LD_INT 1
18998: PPUSH
18999: CALL 18242 0 3
19003: ST_TO_ADDR
// InitHc ;
19004: CALL_OW 19
// InitUc ;
19008: CALL_OW 18
// uc_side := side ;
19012: LD_ADDR_OWVAR 20
19016: PUSH
19017: LD_VAR 0 16
19021: ST_TO_ADDR
// uc_nation := nation ;
19022: LD_ADDR_OWVAR 21
19026: PUSH
19027: LD_VAR 0 17
19031: ST_TO_ADDR
// if buildings then
19032: LD_VAR 0 18
19036: IFFALSE 20358
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19038: LD_ADDR_VAR 0 19
19042: PUSH
19043: LD_VAR 0 18
19047: PPUSH
19048: LD_INT 2
19050: PUSH
19051: LD_INT 30
19053: PUSH
19054: LD_INT 29
19056: PUSH
19057: EMPTY
19058: LIST
19059: LIST
19060: PUSH
19061: LD_INT 30
19063: PUSH
19064: LD_INT 30
19066: PUSH
19067: EMPTY
19068: LIST
19069: LIST
19070: PUSH
19071: EMPTY
19072: LIST
19073: LIST
19074: LIST
19075: PPUSH
19076: CALL_OW 72
19080: ST_TO_ADDR
// if tmp then
19081: LD_VAR 0 19
19085: IFFALSE 19133
// for i in tmp do
19087: LD_ADDR_VAR 0 8
19091: PUSH
19092: LD_VAR 0 19
19096: PUSH
19097: FOR_IN
19098: IFFALSE 19131
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19100: LD_VAR 0 8
19104: PPUSH
19105: CALL_OW 250
19109: PPUSH
19110: LD_VAR 0 8
19114: PPUSH
19115: CALL_OW 251
19119: PPUSH
19120: LD_VAR 0 16
19124: PPUSH
19125: CALL_OW 441
19129: GO 19097
19131: POP
19132: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19133: LD_VAR 0 18
19137: PPUSH
19138: LD_INT 2
19140: PUSH
19141: LD_INT 30
19143: PUSH
19144: LD_INT 32
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: PUSH
19151: LD_INT 30
19153: PUSH
19154: LD_INT 33
19156: PUSH
19157: EMPTY
19158: LIST
19159: LIST
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: LIST
19165: PPUSH
19166: CALL_OW 72
19170: IFFALSE 19258
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19172: LD_ADDR_VAR 0 8
19176: PUSH
19177: LD_VAR 0 18
19181: PPUSH
19182: LD_INT 2
19184: PUSH
19185: LD_INT 30
19187: PUSH
19188: LD_INT 32
19190: PUSH
19191: EMPTY
19192: LIST
19193: LIST
19194: PUSH
19195: LD_INT 30
19197: PUSH
19198: LD_INT 33
19200: PUSH
19201: EMPTY
19202: LIST
19203: LIST
19204: PUSH
19205: EMPTY
19206: LIST
19207: LIST
19208: LIST
19209: PPUSH
19210: CALL_OW 72
19214: PUSH
19215: FOR_IN
19216: IFFALSE 19256
// begin if not GetBWeapon ( i ) then
19218: LD_VAR 0 8
19222: PPUSH
19223: CALL_OW 269
19227: NOT
19228: IFFALSE 19254
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19230: LD_VAR 0 8
19234: PPUSH
19235: LD_VAR 0 8
19239: PPUSH
19240: LD_VAR 0 2
19244: PPUSH
19245: CALL 20504 0 2
19249: PPUSH
19250: CALL_OW 431
// end ;
19254: GO 19215
19256: POP
19257: POP
// end ; for i = 1 to personel do
19258: LD_ADDR_VAR 0 8
19262: PUSH
19263: DOUBLE
19264: LD_INT 1
19266: DEC
19267: ST_TO_ADDR
19268: LD_VAR 0 6
19272: PUSH
19273: FOR_TO
19274: IFFALSE 20338
// begin if i > 4 then
19276: LD_VAR 0 8
19280: PUSH
19281: LD_INT 4
19283: GREATER
19284: IFFALSE 19288
// break ;
19286: GO 20338
// case i of 1 :
19288: LD_VAR 0 8
19292: PUSH
19293: LD_INT 1
19295: DOUBLE
19296: EQUAL
19297: IFTRUE 19301
19299: GO 19381
19301: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19302: LD_ADDR_VAR 0 12
19306: PUSH
19307: LD_VAR 0 18
19311: PPUSH
19312: LD_INT 22
19314: PUSH
19315: LD_VAR 0 16
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: LD_INT 58
19326: PUSH
19327: EMPTY
19328: LIST
19329: PUSH
19330: LD_INT 2
19332: PUSH
19333: LD_INT 30
19335: PUSH
19336: LD_INT 32
19338: PUSH
19339: EMPTY
19340: LIST
19341: LIST
19342: PUSH
19343: LD_INT 30
19345: PUSH
19346: LD_INT 4
19348: PUSH
19349: EMPTY
19350: LIST
19351: LIST
19352: PUSH
19353: LD_INT 30
19355: PUSH
19356: LD_INT 5
19358: PUSH
19359: EMPTY
19360: LIST
19361: LIST
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: LIST
19367: LIST
19368: PUSH
19369: EMPTY
19370: LIST
19371: LIST
19372: LIST
19373: PPUSH
19374: CALL_OW 72
19378: ST_TO_ADDR
19379: GO 19603
19381: LD_INT 2
19383: DOUBLE
19384: EQUAL
19385: IFTRUE 19389
19387: GO 19451
19389: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19390: LD_ADDR_VAR 0 12
19394: PUSH
19395: LD_VAR 0 18
19399: PPUSH
19400: LD_INT 22
19402: PUSH
19403: LD_VAR 0 16
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PUSH
19412: LD_INT 2
19414: PUSH
19415: LD_INT 30
19417: PUSH
19418: LD_INT 0
19420: PUSH
19421: EMPTY
19422: LIST
19423: LIST
19424: PUSH
19425: LD_INT 30
19427: PUSH
19428: LD_INT 1
19430: PUSH
19431: EMPTY
19432: LIST
19433: LIST
19434: PUSH
19435: EMPTY
19436: LIST
19437: LIST
19438: LIST
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PPUSH
19444: CALL_OW 72
19448: ST_TO_ADDR
19449: GO 19603
19451: LD_INT 3
19453: DOUBLE
19454: EQUAL
19455: IFTRUE 19459
19457: GO 19521
19459: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19460: LD_ADDR_VAR 0 12
19464: PUSH
19465: LD_VAR 0 18
19469: PPUSH
19470: LD_INT 22
19472: PUSH
19473: LD_VAR 0 16
19477: PUSH
19478: EMPTY
19479: LIST
19480: LIST
19481: PUSH
19482: LD_INT 2
19484: PUSH
19485: LD_INT 30
19487: PUSH
19488: LD_INT 2
19490: PUSH
19491: EMPTY
19492: LIST
19493: LIST
19494: PUSH
19495: LD_INT 30
19497: PUSH
19498: LD_INT 3
19500: PUSH
19501: EMPTY
19502: LIST
19503: LIST
19504: PUSH
19505: EMPTY
19506: LIST
19507: LIST
19508: LIST
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PPUSH
19514: CALL_OW 72
19518: ST_TO_ADDR
19519: GO 19603
19521: LD_INT 4
19523: DOUBLE
19524: EQUAL
19525: IFTRUE 19529
19527: GO 19602
19529: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19530: LD_ADDR_VAR 0 12
19534: PUSH
19535: LD_VAR 0 18
19539: PPUSH
19540: LD_INT 22
19542: PUSH
19543: LD_VAR 0 16
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: PUSH
19552: LD_INT 2
19554: PUSH
19555: LD_INT 30
19557: PUSH
19558: LD_INT 6
19560: PUSH
19561: EMPTY
19562: LIST
19563: LIST
19564: PUSH
19565: LD_INT 30
19567: PUSH
19568: LD_INT 7
19570: PUSH
19571: EMPTY
19572: LIST
19573: LIST
19574: PUSH
19575: LD_INT 30
19577: PUSH
19578: LD_INT 8
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: PUSH
19585: EMPTY
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PPUSH
19595: CALL_OW 72
19599: ST_TO_ADDR
19600: GO 19603
19602: POP
// if i = 1 then
19603: LD_VAR 0 8
19607: PUSH
19608: LD_INT 1
19610: EQUAL
19611: IFFALSE 19722
// begin tmp := [ ] ;
19613: LD_ADDR_VAR 0 19
19617: PUSH
19618: EMPTY
19619: ST_TO_ADDR
// for j in f do
19620: LD_ADDR_VAR 0 9
19624: PUSH
19625: LD_VAR 0 12
19629: PUSH
19630: FOR_IN
19631: IFFALSE 19704
// if GetBType ( j ) = b_bunker then
19633: LD_VAR 0 9
19637: PPUSH
19638: CALL_OW 266
19642: PUSH
19643: LD_INT 32
19645: EQUAL
19646: IFFALSE 19673
// tmp := Insert ( tmp , 1 , j ) else
19648: LD_ADDR_VAR 0 19
19652: PUSH
19653: LD_VAR 0 19
19657: PPUSH
19658: LD_INT 1
19660: PPUSH
19661: LD_VAR 0 9
19665: PPUSH
19666: CALL_OW 2
19670: ST_TO_ADDR
19671: GO 19702
// tmp := Insert ( tmp , tmp + 1 , j ) ;
19673: LD_ADDR_VAR 0 19
19677: PUSH
19678: LD_VAR 0 19
19682: PPUSH
19683: LD_VAR 0 19
19687: PUSH
19688: LD_INT 1
19690: PLUS
19691: PPUSH
19692: LD_VAR 0 9
19696: PPUSH
19697: CALL_OW 2
19701: ST_TO_ADDR
19702: GO 19630
19704: POP
19705: POP
// if tmp then
19706: LD_VAR 0 19
19710: IFFALSE 19722
// f := tmp ;
19712: LD_ADDR_VAR 0 12
19716: PUSH
19717: LD_VAR 0 19
19721: ST_TO_ADDR
// end ; x := personel [ i ] ;
19722: LD_ADDR_VAR 0 13
19726: PUSH
19727: LD_VAR 0 6
19731: PUSH
19732: LD_VAR 0 8
19736: ARRAY
19737: ST_TO_ADDR
// if x = - 1 then
19738: LD_VAR 0 13
19742: PUSH
19743: LD_INT 1
19745: NEG
19746: EQUAL
19747: IFFALSE 19956
// begin for j in f do
19749: LD_ADDR_VAR 0 9
19753: PUSH
19754: LD_VAR 0 12
19758: PUSH
19759: FOR_IN
19760: IFFALSE 19952
// repeat InitHc ;
19762: CALL_OW 19
// if GetBType ( j ) = b_barracks then
19766: LD_VAR 0 9
19770: PPUSH
19771: CALL_OW 266
19775: PUSH
19776: LD_INT 5
19778: EQUAL
19779: IFFALSE 19849
// begin if UnitsInside ( j ) < 3 then
19781: LD_VAR 0 9
19785: PPUSH
19786: CALL_OW 313
19790: PUSH
19791: LD_INT 3
19793: LESS
19794: IFFALSE 19830
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19796: LD_INT 0
19798: PPUSH
19799: LD_INT 5
19801: PUSH
19802: LD_INT 8
19804: PUSH
19805: LD_INT 9
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: PUSH
19813: LD_VAR 0 17
19817: ARRAY
19818: PPUSH
19819: LD_VAR 0 4
19823: PPUSH
19824: CALL_OW 380
19828: GO 19847
// PrepareHuman ( false , i , skill ) ;
19830: LD_INT 0
19832: PPUSH
19833: LD_VAR 0 8
19837: PPUSH
19838: LD_VAR 0 4
19842: PPUSH
19843: CALL_OW 380
// end else
19847: GO 19866
// PrepareHuman ( false , i , skill ) ;
19849: LD_INT 0
19851: PPUSH
19852: LD_VAR 0 8
19856: PPUSH
19857: LD_VAR 0 4
19861: PPUSH
19862: CALL_OW 380
// un := CreateHuman ;
19866: LD_ADDR_VAR 0 14
19870: PUSH
19871: CALL_OW 44
19875: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19876: LD_ADDR_VAR 0 7
19880: PUSH
19881: LD_VAR 0 7
19885: PPUSH
19886: LD_INT 1
19888: PPUSH
19889: LD_VAR 0 14
19893: PPUSH
19894: CALL_OW 2
19898: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
19899: LD_VAR 0 14
19903: PPUSH
19904: LD_VAR 0 9
19908: PPUSH
19909: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
19913: LD_VAR 0 9
19917: PPUSH
19918: CALL_OW 313
19922: PUSH
19923: LD_INT 6
19925: EQUAL
19926: PUSH
19927: LD_VAR 0 9
19931: PPUSH
19932: CALL_OW 266
19936: PUSH
19937: LD_INT 32
19939: PUSH
19940: LD_INT 31
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: IN
19947: OR
19948: IFFALSE 19762
19950: GO 19759
19952: POP
19953: POP
// end else
19954: GO 20336
// for j = 1 to x do
19956: LD_ADDR_VAR 0 9
19960: PUSH
19961: DOUBLE
19962: LD_INT 1
19964: DEC
19965: ST_TO_ADDR
19966: LD_VAR 0 13
19970: PUSH
19971: FOR_TO
19972: IFFALSE 20334
// begin InitHc ;
19974: CALL_OW 19
// if not f then
19978: LD_VAR 0 12
19982: NOT
19983: IFFALSE 20072
// begin PrepareHuman ( false , i , skill ) ;
19985: LD_INT 0
19987: PPUSH
19988: LD_VAR 0 8
19992: PPUSH
19993: LD_VAR 0 4
19997: PPUSH
19998: CALL_OW 380
// un := CreateHuman ;
20002: LD_ADDR_VAR 0 14
20006: PUSH
20007: CALL_OW 44
20011: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20012: LD_ADDR_VAR 0 7
20016: PUSH
20017: LD_VAR 0 7
20021: PPUSH
20022: LD_INT 1
20024: PPUSH
20025: LD_VAR 0 14
20029: PPUSH
20030: CALL_OW 2
20034: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20035: LD_VAR 0 14
20039: PPUSH
20040: LD_VAR 0 1
20044: PPUSH
20045: CALL_OW 250
20049: PPUSH
20050: LD_VAR 0 1
20054: PPUSH
20055: CALL_OW 251
20059: PPUSH
20060: LD_INT 10
20062: PPUSH
20063: LD_INT 0
20065: PPUSH
20066: CALL_OW 50
// continue ;
20070: GO 19971
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20072: LD_VAR 0 12
20076: PUSH
20077: LD_INT 1
20079: ARRAY
20080: PPUSH
20081: CALL_OW 313
20085: PUSH
20086: LD_VAR 0 12
20090: PUSH
20091: LD_INT 1
20093: ARRAY
20094: PPUSH
20095: CALL_OW 266
20099: PUSH
20100: LD_INT 32
20102: PUSH
20103: LD_INT 31
20105: PUSH
20106: EMPTY
20107: LIST
20108: LIST
20109: IN
20110: AND
20111: PUSH
20112: LD_VAR 0 12
20116: PUSH
20117: LD_INT 1
20119: ARRAY
20120: PPUSH
20121: CALL_OW 313
20125: PUSH
20126: LD_INT 6
20128: EQUAL
20129: OR
20130: IFFALSE 20150
// f := Delete ( f , 1 ) ;
20132: LD_ADDR_VAR 0 12
20136: PUSH
20137: LD_VAR 0 12
20141: PPUSH
20142: LD_INT 1
20144: PPUSH
20145: CALL_OW 3
20149: ST_TO_ADDR
// if not f then
20150: LD_VAR 0 12
20154: NOT
20155: IFFALSE 20173
// begin x := x + 2 ;
20157: LD_ADDR_VAR 0 13
20161: PUSH
20162: LD_VAR 0 13
20166: PUSH
20167: LD_INT 2
20169: PLUS
20170: ST_TO_ADDR
// continue ;
20171: GO 19971
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20173: LD_VAR 0 12
20177: PUSH
20178: LD_INT 1
20180: ARRAY
20181: PPUSH
20182: CALL_OW 266
20186: PUSH
20187: LD_INT 5
20189: EQUAL
20190: IFFALSE 20264
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20192: LD_VAR 0 12
20196: PUSH
20197: LD_INT 1
20199: ARRAY
20200: PPUSH
20201: CALL_OW 313
20205: PUSH
20206: LD_INT 3
20208: LESS
20209: IFFALSE 20245
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20211: LD_INT 0
20213: PPUSH
20214: LD_INT 5
20216: PUSH
20217: LD_INT 8
20219: PUSH
20220: LD_INT 9
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: LIST
20227: PUSH
20228: LD_VAR 0 17
20232: ARRAY
20233: PPUSH
20234: LD_VAR 0 4
20238: PPUSH
20239: CALL_OW 380
20243: GO 20262
// PrepareHuman ( false , i , skill ) ;
20245: LD_INT 0
20247: PPUSH
20248: LD_VAR 0 8
20252: PPUSH
20253: LD_VAR 0 4
20257: PPUSH
20258: CALL_OW 380
// end else
20262: GO 20281
// PrepareHuman ( false , i , skill ) ;
20264: LD_INT 0
20266: PPUSH
20267: LD_VAR 0 8
20271: PPUSH
20272: LD_VAR 0 4
20276: PPUSH
20277: CALL_OW 380
// un := CreateHuman ;
20281: LD_ADDR_VAR 0 14
20285: PUSH
20286: CALL_OW 44
20290: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20291: LD_ADDR_VAR 0 7
20295: PUSH
20296: LD_VAR 0 7
20300: PPUSH
20301: LD_INT 1
20303: PPUSH
20304: LD_VAR 0 14
20308: PPUSH
20309: CALL_OW 2
20313: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20314: LD_VAR 0 14
20318: PPUSH
20319: LD_VAR 0 12
20323: PUSH
20324: LD_INT 1
20326: ARRAY
20327: PPUSH
20328: CALL_OW 52
// end ;
20332: GO 19971
20334: POP
20335: POP
// end ;
20336: GO 19273
20338: POP
20339: POP
// result := result ^ buildings ;
20340: LD_ADDR_VAR 0 7
20344: PUSH
20345: LD_VAR 0 7
20349: PUSH
20350: LD_VAR 0 18
20354: ADD
20355: ST_TO_ADDR
// end else
20356: GO 20499
// begin for i = 1 to personel do
20358: LD_ADDR_VAR 0 8
20362: PUSH
20363: DOUBLE
20364: LD_INT 1
20366: DEC
20367: ST_TO_ADDR
20368: LD_VAR 0 6
20372: PUSH
20373: FOR_TO
20374: IFFALSE 20497
// begin if i > 4 then
20376: LD_VAR 0 8
20380: PUSH
20381: LD_INT 4
20383: GREATER
20384: IFFALSE 20388
// break ;
20386: GO 20497
// x := personel [ i ] ;
20388: LD_ADDR_VAR 0 13
20392: PUSH
20393: LD_VAR 0 6
20397: PUSH
20398: LD_VAR 0 8
20402: ARRAY
20403: ST_TO_ADDR
// if x = - 1 then
20404: LD_VAR 0 13
20408: PUSH
20409: LD_INT 1
20411: NEG
20412: EQUAL
20413: IFFALSE 20417
// continue ;
20415: GO 20373
// PrepareHuman ( false , i , skill ) ;
20417: LD_INT 0
20419: PPUSH
20420: LD_VAR 0 8
20424: PPUSH
20425: LD_VAR 0 4
20429: PPUSH
20430: CALL_OW 380
// un := CreateHuman ;
20434: LD_ADDR_VAR 0 14
20438: PUSH
20439: CALL_OW 44
20443: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20444: LD_VAR 0 14
20448: PPUSH
20449: LD_VAR 0 1
20453: PPUSH
20454: CALL_OW 250
20458: PPUSH
20459: LD_VAR 0 1
20463: PPUSH
20464: CALL_OW 251
20468: PPUSH
20469: LD_INT 10
20471: PPUSH
20472: LD_INT 0
20474: PPUSH
20475: CALL_OW 50
// result := result ^ un ;
20479: LD_ADDR_VAR 0 7
20483: PUSH
20484: LD_VAR 0 7
20488: PUSH
20489: LD_VAR 0 14
20493: ADD
20494: ST_TO_ADDR
// end ;
20495: GO 20373
20497: POP
20498: POP
// end ; end ;
20499: LD_VAR 0 7
20503: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20504: LD_INT 0
20506: PPUSH
20507: PPUSH
20508: PPUSH
20509: PPUSH
20510: PPUSH
20511: PPUSH
20512: PPUSH
20513: PPUSH
20514: PPUSH
20515: PPUSH
20516: PPUSH
20517: PPUSH
20518: PPUSH
20519: PPUSH
20520: PPUSH
20521: PPUSH
// result := false ;
20522: LD_ADDR_VAR 0 3
20526: PUSH
20527: LD_INT 0
20529: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20530: LD_VAR 0 1
20534: NOT
20535: PUSH
20536: LD_VAR 0 1
20540: PPUSH
20541: CALL_OW 266
20545: PUSH
20546: LD_INT 32
20548: PUSH
20549: LD_INT 33
20551: PUSH
20552: EMPTY
20553: LIST
20554: LIST
20555: IN
20556: NOT
20557: OR
20558: IFFALSE 20562
// exit ;
20560: GO 21671
// nat := GetNation ( tower ) ;
20562: LD_ADDR_VAR 0 12
20566: PUSH
20567: LD_VAR 0 1
20571: PPUSH
20572: CALL_OW 248
20576: ST_TO_ADDR
// side := GetSide ( tower ) ;
20577: LD_ADDR_VAR 0 16
20581: PUSH
20582: LD_VAR 0 1
20586: PPUSH
20587: CALL_OW 255
20591: ST_TO_ADDR
// x := GetX ( tower ) ;
20592: LD_ADDR_VAR 0 10
20596: PUSH
20597: LD_VAR 0 1
20601: PPUSH
20602: CALL_OW 250
20606: ST_TO_ADDR
// y := GetY ( tower ) ;
20607: LD_ADDR_VAR 0 11
20611: PUSH
20612: LD_VAR 0 1
20616: PPUSH
20617: CALL_OW 251
20621: ST_TO_ADDR
// if not x or not y then
20622: LD_VAR 0 10
20626: NOT
20627: PUSH
20628: LD_VAR 0 11
20632: NOT
20633: OR
20634: IFFALSE 20638
// exit ;
20636: GO 21671
// weapon := 0 ;
20638: LD_ADDR_VAR 0 18
20642: PUSH
20643: LD_INT 0
20645: ST_TO_ADDR
// fac_list := [ ] ;
20646: LD_ADDR_VAR 0 17
20650: PUSH
20651: EMPTY
20652: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
20653: LD_ADDR_VAR 0 6
20657: PUSH
20658: LD_VAR 0 1
20662: PPUSH
20663: CALL_OW 274
20667: PPUSH
20668: LD_VAR 0 2
20672: PPUSH
20673: LD_INT 0
20675: PPUSH
20676: CALL 18242 0 3
20680: PPUSH
20681: LD_INT 30
20683: PUSH
20684: LD_INT 3
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 72
20695: ST_TO_ADDR
// if not factories then
20696: LD_VAR 0 6
20700: NOT
20701: IFFALSE 20705
// exit ;
20703: GO 21671
// for i in factories do
20705: LD_ADDR_VAR 0 8
20709: PUSH
20710: LD_VAR 0 6
20714: PUSH
20715: FOR_IN
20716: IFFALSE 20741
// fac_list := fac_list union AvailableWeaponList ( i ) ;
20718: LD_ADDR_VAR 0 17
20722: PUSH
20723: LD_VAR 0 17
20727: PUSH
20728: LD_VAR 0 8
20732: PPUSH
20733: CALL_OW 478
20737: UNION
20738: ST_TO_ADDR
20739: GO 20715
20741: POP
20742: POP
// if not fac_list then
20743: LD_VAR 0 17
20747: NOT
20748: IFFALSE 20752
// exit ;
20750: GO 21671
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
20752: LD_ADDR_VAR 0 5
20756: PUSH
20757: LD_INT 4
20759: PUSH
20760: LD_INT 5
20762: PUSH
20763: LD_INT 9
20765: PUSH
20766: LD_INT 10
20768: PUSH
20769: LD_INT 6
20771: PUSH
20772: LD_INT 7
20774: PUSH
20775: LD_INT 11
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: LIST
20782: LIST
20783: LIST
20784: LIST
20785: LIST
20786: PUSH
20787: LD_INT 27
20789: PUSH
20790: LD_INT 28
20792: PUSH
20793: LD_INT 26
20795: PUSH
20796: LD_INT 30
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: LIST
20804: PUSH
20805: LD_INT 43
20807: PUSH
20808: LD_INT 44
20810: PUSH
20811: LD_INT 46
20813: PUSH
20814: LD_INT 45
20816: PUSH
20817: LD_INT 47
20819: PUSH
20820: LD_INT 49
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: LIST
20835: PUSH
20836: LD_VAR 0 12
20840: ARRAY
20841: ST_TO_ADDR
// list := list isect fac_list ;
20842: LD_ADDR_VAR 0 5
20846: PUSH
20847: LD_VAR 0 5
20851: PUSH
20852: LD_VAR 0 17
20856: ISECT
20857: ST_TO_ADDR
// if not list then
20858: LD_VAR 0 5
20862: NOT
20863: IFFALSE 20867
// exit ;
20865: GO 21671
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
20867: LD_VAR 0 12
20871: PUSH
20872: LD_INT 3
20874: EQUAL
20875: PUSH
20876: LD_INT 49
20878: PUSH
20879: LD_VAR 0 5
20883: IN
20884: AND
20885: PUSH
20886: LD_INT 31
20888: PPUSH
20889: LD_VAR 0 16
20893: PPUSH
20894: CALL_OW 321
20898: PUSH
20899: LD_INT 2
20901: EQUAL
20902: AND
20903: IFFALSE 20963
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
20905: LD_INT 22
20907: PUSH
20908: LD_VAR 0 16
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 35
20919: PUSH
20920: LD_INT 49
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: LD_INT 91
20929: PUSH
20930: LD_VAR 0 1
20934: PUSH
20935: LD_INT 10
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: LIST
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: LIST
20947: PPUSH
20948: CALL_OW 69
20952: NOT
20953: IFFALSE 20963
// weapon := ru_time_lapser ;
20955: LD_ADDR_VAR 0 18
20959: PUSH
20960: LD_INT 49
20962: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
20963: LD_VAR 0 12
20967: PUSH
20968: LD_INT 1
20970: PUSH
20971: LD_INT 2
20973: PUSH
20974: EMPTY
20975: LIST
20976: LIST
20977: IN
20978: PUSH
20979: LD_INT 11
20981: PUSH
20982: LD_VAR 0 5
20986: IN
20987: PUSH
20988: LD_INT 30
20990: PUSH
20991: LD_VAR 0 5
20995: IN
20996: OR
20997: AND
20998: PUSH
20999: LD_INT 6
21001: PPUSH
21002: LD_VAR 0 16
21006: PPUSH
21007: CALL_OW 321
21011: PUSH
21012: LD_INT 2
21014: EQUAL
21015: AND
21016: IFFALSE 21181
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21018: LD_INT 22
21020: PUSH
21021: LD_VAR 0 16
21025: PUSH
21026: EMPTY
21027: LIST
21028: LIST
21029: PUSH
21030: LD_INT 2
21032: PUSH
21033: LD_INT 35
21035: PUSH
21036: LD_INT 11
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 35
21045: PUSH
21046: LD_INT 30
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: PUSH
21058: LD_INT 91
21060: PUSH
21061: LD_VAR 0 1
21065: PUSH
21066: LD_INT 18
21068: PUSH
21069: EMPTY
21070: LIST
21071: LIST
21072: LIST
21073: PUSH
21074: EMPTY
21075: LIST
21076: LIST
21077: LIST
21078: PPUSH
21079: CALL_OW 69
21083: NOT
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_VAR 0 16
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 30
21102: PUSH
21103: LD_INT 32
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: PUSH
21110: LD_INT 30
21112: PUSH
21113: LD_INT 33
21115: PUSH
21116: EMPTY
21117: LIST
21118: LIST
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: LIST
21124: PUSH
21125: LD_INT 91
21127: PUSH
21128: LD_VAR 0 1
21132: PUSH
21133: LD_INT 12
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: LIST
21140: PUSH
21141: EMPTY
21142: LIST
21143: LIST
21144: LIST
21145: PUSH
21146: EMPTY
21147: LIST
21148: PPUSH
21149: CALL_OW 69
21153: PUSH
21154: LD_INT 2
21156: GREATER
21157: AND
21158: IFFALSE 21181
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21160: LD_ADDR_VAR 0 18
21164: PUSH
21165: LD_INT 11
21167: PUSH
21168: LD_INT 30
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_VAR 0 12
21179: ARRAY
21180: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21181: LD_VAR 0 18
21185: NOT
21186: PUSH
21187: LD_INT 40
21189: PPUSH
21190: LD_VAR 0 16
21194: PPUSH
21195: CALL_OW 321
21199: PUSH
21200: LD_INT 2
21202: EQUAL
21203: AND
21204: PUSH
21205: LD_INT 7
21207: PUSH
21208: LD_VAR 0 5
21212: IN
21213: PUSH
21214: LD_INT 28
21216: PUSH
21217: LD_VAR 0 5
21221: IN
21222: OR
21223: PUSH
21224: LD_INT 45
21226: PUSH
21227: LD_VAR 0 5
21231: IN
21232: OR
21233: AND
21234: IFFALSE 21488
// begin hex := GetHexInfo ( x , y ) ;
21236: LD_ADDR_VAR 0 4
21240: PUSH
21241: LD_VAR 0 10
21245: PPUSH
21246: LD_VAR 0 11
21250: PPUSH
21251: CALL_OW 546
21255: ST_TO_ADDR
// if hex [ 1 ] then
21256: LD_VAR 0 4
21260: PUSH
21261: LD_INT 1
21263: ARRAY
21264: IFFALSE 21268
// exit ;
21266: GO 21671
// height := hex [ 2 ] ;
21268: LD_ADDR_VAR 0 15
21272: PUSH
21273: LD_VAR 0 4
21277: PUSH
21278: LD_INT 2
21280: ARRAY
21281: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21282: LD_ADDR_VAR 0 14
21286: PUSH
21287: LD_INT 0
21289: PUSH
21290: LD_INT 2
21292: PUSH
21293: LD_INT 3
21295: PUSH
21296: LD_INT 5
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: ST_TO_ADDR
// for i in tmp do
21305: LD_ADDR_VAR 0 8
21309: PUSH
21310: LD_VAR 0 14
21314: PUSH
21315: FOR_IN
21316: IFFALSE 21486
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21318: LD_ADDR_VAR 0 9
21322: PUSH
21323: LD_VAR 0 10
21327: PPUSH
21328: LD_VAR 0 8
21332: PPUSH
21333: LD_INT 5
21335: PPUSH
21336: CALL_OW 272
21340: PUSH
21341: LD_VAR 0 11
21345: PPUSH
21346: LD_VAR 0 8
21350: PPUSH
21351: LD_INT 5
21353: PPUSH
21354: CALL_OW 273
21358: PUSH
21359: EMPTY
21360: LIST
21361: LIST
21362: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21363: LD_VAR 0 9
21367: PUSH
21368: LD_INT 1
21370: ARRAY
21371: PPUSH
21372: LD_VAR 0 9
21376: PUSH
21377: LD_INT 2
21379: ARRAY
21380: PPUSH
21381: CALL_OW 488
21385: IFFALSE 21484
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21387: LD_ADDR_VAR 0 4
21391: PUSH
21392: LD_VAR 0 9
21396: PUSH
21397: LD_INT 1
21399: ARRAY
21400: PPUSH
21401: LD_VAR 0 9
21405: PUSH
21406: LD_INT 2
21408: ARRAY
21409: PPUSH
21410: CALL_OW 546
21414: ST_TO_ADDR
// if hex [ 1 ] then
21415: LD_VAR 0 4
21419: PUSH
21420: LD_INT 1
21422: ARRAY
21423: IFFALSE 21427
// continue ;
21425: GO 21315
// h := hex [ 2 ] ;
21427: LD_ADDR_VAR 0 13
21431: PUSH
21432: LD_VAR 0 4
21436: PUSH
21437: LD_INT 2
21439: ARRAY
21440: ST_TO_ADDR
// if h + 7 < height then
21441: LD_VAR 0 13
21445: PUSH
21446: LD_INT 7
21448: PLUS
21449: PUSH
21450: LD_VAR 0 15
21454: LESS
21455: IFFALSE 21484
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21457: LD_ADDR_VAR 0 18
21461: PUSH
21462: LD_INT 7
21464: PUSH
21465: LD_INT 28
21467: PUSH
21468: LD_INT 45
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: LIST
21475: PUSH
21476: LD_VAR 0 12
21480: ARRAY
21481: ST_TO_ADDR
// break ;
21482: GO 21486
// end ; end ; end ;
21484: GO 21315
21486: POP
21487: POP
// end ; if not weapon then
21488: LD_VAR 0 18
21492: NOT
21493: IFFALSE 21553
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21495: LD_ADDR_VAR 0 5
21499: PUSH
21500: LD_VAR 0 5
21504: PUSH
21505: LD_INT 11
21507: PUSH
21508: LD_INT 30
21510: PUSH
21511: LD_INT 49
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: LIST
21518: DIFF
21519: ST_TO_ADDR
// if not list then
21520: LD_VAR 0 5
21524: NOT
21525: IFFALSE 21529
// exit ;
21527: GO 21671
// weapon := list [ rand ( 1 , list ) ] ;
21529: LD_ADDR_VAR 0 18
21533: PUSH
21534: LD_VAR 0 5
21538: PUSH
21539: LD_INT 1
21541: PPUSH
21542: LD_VAR 0 5
21546: PPUSH
21547: CALL_OW 12
21551: ARRAY
21552: ST_TO_ADDR
// end ; if weapon then
21553: LD_VAR 0 18
21557: IFFALSE 21671
// begin tmp := CostOfWeapon ( weapon ) ;
21559: LD_ADDR_VAR 0 14
21563: PUSH
21564: LD_VAR 0 18
21568: PPUSH
21569: CALL_OW 451
21573: ST_TO_ADDR
// j := GetBase ( tower ) ;
21574: LD_ADDR_VAR 0 9
21578: PUSH
21579: LD_VAR 0 1
21583: PPUSH
21584: CALL_OW 274
21588: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21589: LD_VAR 0 9
21593: PPUSH
21594: LD_INT 1
21596: PPUSH
21597: CALL_OW 275
21601: PUSH
21602: LD_VAR 0 14
21606: PUSH
21607: LD_INT 1
21609: ARRAY
21610: GREATEREQUAL
21611: PUSH
21612: LD_VAR 0 9
21616: PPUSH
21617: LD_INT 2
21619: PPUSH
21620: CALL_OW 275
21624: PUSH
21625: LD_VAR 0 14
21629: PUSH
21630: LD_INT 2
21632: ARRAY
21633: GREATEREQUAL
21634: AND
21635: PUSH
21636: LD_VAR 0 9
21640: PPUSH
21641: LD_INT 3
21643: PPUSH
21644: CALL_OW 275
21648: PUSH
21649: LD_VAR 0 14
21653: PUSH
21654: LD_INT 3
21656: ARRAY
21657: GREATEREQUAL
21658: AND
21659: IFFALSE 21671
// result := weapon ;
21661: LD_ADDR_VAR 0 3
21665: PUSH
21666: LD_VAR 0 18
21670: ST_TO_ADDR
// end ; end ;
21671: LD_VAR 0 3
21675: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
21676: LD_INT 0
21678: PPUSH
21679: PPUSH
// result := true ;
21680: LD_ADDR_VAR 0 3
21684: PUSH
21685: LD_INT 1
21687: ST_TO_ADDR
// if array1 = array2 then
21688: LD_VAR 0 1
21692: PUSH
21693: LD_VAR 0 2
21697: EQUAL
21698: IFFALSE 21758
// begin for i = 1 to array1 do
21700: LD_ADDR_VAR 0 4
21704: PUSH
21705: DOUBLE
21706: LD_INT 1
21708: DEC
21709: ST_TO_ADDR
21710: LD_VAR 0 1
21714: PUSH
21715: FOR_TO
21716: IFFALSE 21754
// if array1 [ i ] <> array2 [ i ] then
21718: LD_VAR 0 1
21722: PUSH
21723: LD_VAR 0 4
21727: ARRAY
21728: PUSH
21729: LD_VAR 0 2
21733: PUSH
21734: LD_VAR 0 4
21738: ARRAY
21739: NONEQUAL
21740: IFFALSE 21752
// begin result := false ;
21742: LD_ADDR_VAR 0 3
21746: PUSH
21747: LD_INT 0
21749: ST_TO_ADDR
// break ;
21750: GO 21754
// end ;
21752: GO 21715
21754: POP
21755: POP
// end else
21756: GO 21766
// result := false ;
21758: LD_ADDR_VAR 0 3
21762: PUSH
21763: LD_INT 0
21765: ST_TO_ADDR
// end ;
21766: LD_VAR 0 3
21770: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
21771: LD_INT 0
21773: PPUSH
21774: PPUSH
// if not array1 or not array2 then
21775: LD_VAR 0 1
21779: NOT
21780: PUSH
21781: LD_VAR 0 2
21785: NOT
21786: OR
21787: IFFALSE 21791
// exit ;
21789: GO 21855
// result := true ;
21791: LD_ADDR_VAR 0 3
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// for i = 1 to array1 do
21799: LD_ADDR_VAR 0 4
21803: PUSH
21804: DOUBLE
21805: LD_INT 1
21807: DEC
21808: ST_TO_ADDR
21809: LD_VAR 0 1
21813: PUSH
21814: FOR_TO
21815: IFFALSE 21853
// if array1 [ i ] <> array2 [ i ] then
21817: LD_VAR 0 1
21821: PUSH
21822: LD_VAR 0 4
21826: ARRAY
21827: PUSH
21828: LD_VAR 0 2
21832: PUSH
21833: LD_VAR 0 4
21837: ARRAY
21838: NONEQUAL
21839: IFFALSE 21851
// begin result := false ;
21841: LD_ADDR_VAR 0 3
21845: PUSH
21846: LD_INT 0
21848: ST_TO_ADDR
// break ;
21849: GO 21853
// end ;
21851: GO 21814
21853: POP
21854: POP
// end ;
21855: LD_VAR 0 3
21859: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
21860: LD_INT 0
21862: PPUSH
21863: PPUSH
21864: PPUSH
// pom := GetBase ( fac ) ;
21865: LD_ADDR_VAR 0 5
21869: PUSH
21870: LD_VAR 0 1
21874: PPUSH
21875: CALL_OW 274
21879: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
21880: LD_ADDR_VAR 0 4
21884: PUSH
21885: LD_VAR 0 2
21889: PUSH
21890: LD_INT 1
21892: ARRAY
21893: PPUSH
21894: LD_VAR 0 2
21898: PUSH
21899: LD_INT 2
21901: ARRAY
21902: PPUSH
21903: LD_VAR 0 2
21907: PUSH
21908: LD_INT 3
21910: ARRAY
21911: PPUSH
21912: LD_VAR 0 2
21916: PUSH
21917: LD_INT 4
21919: ARRAY
21920: PPUSH
21921: CALL_OW 449
21925: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21926: LD_ADDR_VAR 0 3
21930: PUSH
21931: LD_VAR 0 5
21935: PPUSH
21936: LD_INT 1
21938: PPUSH
21939: CALL_OW 275
21943: PUSH
21944: LD_VAR 0 4
21948: PUSH
21949: LD_INT 1
21951: ARRAY
21952: GREATEREQUAL
21953: PUSH
21954: LD_VAR 0 5
21958: PPUSH
21959: LD_INT 2
21961: PPUSH
21962: CALL_OW 275
21966: PUSH
21967: LD_VAR 0 4
21971: PUSH
21972: LD_INT 2
21974: ARRAY
21975: GREATEREQUAL
21976: AND
21977: PUSH
21978: LD_VAR 0 5
21982: PPUSH
21983: LD_INT 3
21985: PPUSH
21986: CALL_OW 275
21990: PUSH
21991: LD_VAR 0 4
21995: PUSH
21996: LD_INT 3
21998: ARRAY
21999: GREATEREQUAL
22000: AND
22001: ST_TO_ADDR
// end ;
22002: LD_VAR 0 3
22006: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22007: LD_INT 0
22009: PPUSH
22010: PPUSH
22011: PPUSH
22012: PPUSH
// pom := GetBase ( building ) ;
22013: LD_ADDR_VAR 0 3
22017: PUSH
22018: LD_VAR 0 1
22022: PPUSH
22023: CALL_OW 274
22027: ST_TO_ADDR
// if not pom then
22028: LD_VAR 0 3
22032: NOT
22033: IFFALSE 22037
// exit ;
22035: GO 22207
// btype := GetBType ( building ) ;
22037: LD_ADDR_VAR 0 5
22041: PUSH
22042: LD_VAR 0 1
22046: PPUSH
22047: CALL_OW 266
22051: ST_TO_ADDR
// if btype = b_armoury then
22052: LD_VAR 0 5
22056: PUSH
22057: LD_INT 4
22059: EQUAL
22060: IFFALSE 22070
// btype := b_barracks ;
22062: LD_ADDR_VAR 0 5
22066: PUSH
22067: LD_INT 5
22069: ST_TO_ADDR
// if btype = b_depot then
22070: LD_VAR 0 5
22074: PUSH
22075: LD_INT 0
22077: EQUAL
22078: IFFALSE 22088
// btype := b_warehouse ;
22080: LD_ADDR_VAR 0 5
22084: PUSH
22085: LD_INT 1
22087: ST_TO_ADDR
// if btype = b_workshop then
22088: LD_VAR 0 5
22092: PUSH
22093: LD_INT 2
22095: EQUAL
22096: IFFALSE 22106
// btype := b_factory ;
22098: LD_ADDR_VAR 0 5
22102: PUSH
22103: LD_INT 3
22105: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22106: LD_ADDR_VAR 0 4
22110: PUSH
22111: LD_VAR 0 5
22115: PPUSH
22116: LD_VAR 0 1
22120: PPUSH
22121: CALL_OW 248
22125: PPUSH
22126: CALL_OW 450
22130: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22131: LD_ADDR_VAR 0 2
22135: PUSH
22136: LD_VAR 0 3
22140: PPUSH
22141: LD_INT 1
22143: PPUSH
22144: CALL_OW 275
22148: PUSH
22149: LD_VAR 0 4
22153: PUSH
22154: LD_INT 1
22156: ARRAY
22157: GREATEREQUAL
22158: PUSH
22159: LD_VAR 0 3
22163: PPUSH
22164: LD_INT 2
22166: PPUSH
22167: CALL_OW 275
22171: PUSH
22172: LD_VAR 0 4
22176: PUSH
22177: LD_INT 2
22179: ARRAY
22180: GREATEREQUAL
22181: AND
22182: PUSH
22183: LD_VAR 0 3
22187: PPUSH
22188: LD_INT 3
22190: PPUSH
22191: CALL_OW 275
22195: PUSH
22196: LD_VAR 0 4
22200: PUSH
22201: LD_INT 3
22203: ARRAY
22204: GREATEREQUAL
22205: AND
22206: ST_TO_ADDR
// end ;
22207: LD_VAR 0 2
22211: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22212: LD_INT 0
22214: PPUSH
22215: PPUSH
22216: PPUSH
// pom := GetBase ( building ) ;
22217: LD_ADDR_VAR 0 4
22221: PUSH
22222: LD_VAR 0 1
22226: PPUSH
22227: CALL_OW 274
22231: ST_TO_ADDR
// if not pom then
22232: LD_VAR 0 4
22236: NOT
22237: IFFALSE 22241
// exit ;
22239: GO 22342
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22241: LD_ADDR_VAR 0 5
22245: PUSH
22246: LD_VAR 0 2
22250: PPUSH
22251: LD_VAR 0 1
22255: PPUSH
22256: CALL_OW 248
22260: PPUSH
22261: CALL_OW 450
22265: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22266: LD_ADDR_VAR 0 3
22270: PUSH
22271: LD_VAR 0 4
22275: PPUSH
22276: LD_INT 1
22278: PPUSH
22279: CALL_OW 275
22283: PUSH
22284: LD_VAR 0 5
22288: PUSH
22289: LD_INT 1
22291: ARRAY
22292: GREATEREQUAL
22293: PUSH
22294: LD_VAR 0 4
22298: PPUSH
22299: LD_INT 2
22301: PPUSH
22302: CALL_OW 275
22306: PUSH
22307: LD_VAR 0 5
22311: PUSH
22312: LD_INT 2
22314: ARRAY
22315: GREATEREQUAL
22316: AND
22317: PUSH
22318: LD_VAR 0 4
22322: PPUSH
22323: LD_INT 3
22325: PPUSH
22326: CALL_OW 275
22330: PUSH
22331: LD_VAR 0 5
22335: PUSH
22336: LD_INT 3
22338: ARRAY
22339: GREATEREQUAL
22340: AND
22341: ST_TO_ADDR
// end ;
22342: LD_VAR 0 3
22346: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22347: LD_INT 0
22349: PPUSH
22350: PPUSH
22351: PPUSH
22352: PPUSH
22353: PPUSH
22354: PPUSH
22355: PPUSH
22356: PPUSH
22357: PPUSH
22358: PPUSH
22359: PPUSH
// result := false ;
22360: LD_ADDR_VAR 0 8
22364: PUSH
22365: LD_INT 0
22367: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22368: LD_VAR 0 5
22372: NOT
22373: PUSH
22374: LD_VAR 0 1
22378: NOT
22379: OR
22380: PUSH
22381: LD_VAR 0 2
22385: NOT
22386: OR
22387: PUSH
22388: LD_VAR 0 3
22392: NOT
22393: OR
22394: IFFALSE 22398
// exit ;
22396: GO 23212
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22398: LD_ADDR_VAR 0 14
22402: PUSH
22403: LD_VAR 0 1
22407: PPUSH
22408: LD_VAR 0 2
22412: PPUSH
22413: LD_VAR 0 3
22417: PPUSH
22418: LD_VAR 0 4
22422: PPUSH
22423: LD_VAR 0 5
22427: PUSH
22428: LD_INT 1
22430: ARRAY
22431: PPUSH
22432: CALL_OW 248
22436: PPUSH
22437: LD_INT 0
22439: PPUSH
22440: CALL 24465 0 6
22444: ST_TO_ADDR
// if not hexes then
22445: LD_VAR 0 14
22449: NOT
22450: IFFALSE 22454
// exit ;
22452: GO 23212
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22454: LD_ADDR_VAR 0 17
22458: PUSH
22459: LD_VAR 0 5
22463: PPUSH
22464: LD_INT 22
22466: PUSH
22467: LD_VAR 0 13
22471: PPUSH
22472: CALL_OW 255
22476: PUSH
22477: EMPTY
22478: LIST
22479: LIST
22480: PUSH
22481: LD_INT 2
22483: PUSH
22484: LD_INT 30
22486: PUSH
22487: LD_INT 0
22489: PUSH
22490: EMPTY
22491: LIST
22492: LIST
22493: PUSH
22494: LD_INT 30
22496: PUSH
22497: LD_INT 1
22499: PUSH
22500: EMPTY
22501: LIST
22502: LIST
22503: PUSH
22504: EMPTY
22505: LIST
22506: LIST
22507: LIST
22508: PUSH
22509: EMPTY
22510: LIST
22511: LIST
22512: PPUSH
22513: CALL_OW 72
22517: ST_TO_ADDR
// for i = 1 to hexes do
22518: LD_ADDR_VAR 0 9
22522: PUSH
22523: DOUBLE
22524: LD_INT 1
22526: DEC
22527: ST_TO_ADDR
22528: LD_VAR 0 14
22532: PUSH
22533: FOR_TO
22534: IFFALSE 23210
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22536: LD_ADDR_VAR 0 13
22540: PUSH
22541: LD_VAR 0 14
22545: PUSH
22546: LD_VAR 0 9
22550: ARRAY
22551: PUSH
22552: LD_INT 1
22554: ARRAY
22555: PPUSH
22556: LD_VAR 0 14
22560: PUSH
22561: LD_VAR 0 9
22565: ARRAY
22566: PUSH
22567: LD_INT 2
22569: ARRAY
22570: PPUSH
22571: CALL_OW 428
22575: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22576: LD_VAR 0 14
22580: PUSH
22581: LD_VAR 0 9
22585: ARRAY
22586: PUSH
22587: LD_INT 1
22589: ARRAY
22590: PPUSH
22591: LD_VAR 0 14
22595: PUSH
22596: LD_VAR 0 9
22600: ARRAY
22601: PUSH
22602: LD_INT 2
22604: ARRAY
22605: PPUSH
22606: CALL_OW 351
22610: PUSH
22611: LD_VAR 0 14
22615: PUSH
22616: LD_VAR 0 9
22620: ARRAY
22621: PUSH
22622: LD_INT 1
22624: ARRAY
22625: PPUSH
22626: LD_VAR 0 14
22630: PUSH
22631: LD_VAR 0 9
22635: ARRAY
22636: PUSH
22637: LD_INT 2
22639: ARRAY
22640: PPUSH
22641: CALL_OW 488
22645: NOT
22646: OR
22647: PUSH
22648: LD_VAR 0 13
22652: PPUSH
22653: CALL_OW 247
22657: PUSH
22658: LD_INT 3
22660: EQUAL
22661: OR
22662: IFFALSE 22668
// exit ;
22664: POP
22665: POP
22666: GO 23212
// if not tmp then
22668: LD_VAR 0 13
22672: NOT
22673: IFFALSE 22677
// continue ;
22675: GO 22533
// result := true ;
22677: LD_ADDR_VAR 0 8
22681: PUSH
22682: LD_INT 1
22684: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
22685: LD_VAR 0 6
22689: PUSH
22690: LD_VAR 0 13
22694: PPUSH
22695: CALL_OW 247
22699: PUSH
22700: LD_INT 2
22702: EQUAL
22703: AND
22704: PUSH
22705: LD_VAR 0 13
22709: PPUSH
22710: CALL_OW 263
22714: PUSH
22715: LD_INT 1
22717: EQUAL
22718: AND
22719: IFFALSE 22883
// begin if IsDrivenBy ( tmp ) then
22721: LD_VAR 0 13
22725: PPUSH
22726: CALL_OW 311
22730: IFFALSE 22734
// continue ;
22732: GO 22533
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
22734: LD_VAR 0 6
22738: PPUSH
22739: LD_INT 3
22741: PUSH
22742: LD_INT 60
22744: PUSH
22745: EMPTY
22746: LIST
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: LD_INT 3
22754: PUSH
22755: LD_INT 55
22757: PUSH
22758: EMPTY
22759: LIST
22760: PUSH
22761: EMPTY
22762: LIST
22763: LIST
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PPUSH
22769: CALL_OW 72
22773: IFFALSE 22881
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
22775: LD_ADDR_VAR 0 18
22779: PUSH
22780: LD_VAR 0 6
22784: PPUSH
22785: LD_INT 3
22787: PUSH
22788: LD_INT 60
22790: PUSH
22791: EMPTY
22792: LIST
22793: PUSH
22794: EMPTY
22795: LIST
22796: LIST
22797: PUSH
22798: LD_INT 3
22800: PUSH
22801: LD_INT 55
22803: PUSH
22804: EMPTY
22805: LIST
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: PPUSH
22815: CALL_OW 72
22819: PUSH
22820: LD_INT 1
22822: ARRAY
22823: ST_TO_ADDR
// if IsInUnit ( driver ) then
22824: LD_VAR 0 18
22828: PPUSH
22829: CALL_OW 310
22833: IFFALSE 22844
// ComExit ( driver ) ;
22835: LD_VAR 0 18
22839: PPUSH
22840: CALL 48338 0 1
// AddComEnterUnit ( driver , tmp ) ;
22844: LD_VAR 0 18
22848: PPUSH
22849: LD_VAR 0 13
22853: PPUSH
22854: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
22858: LD_VAR 0 18
22862: PPUSH
22863: LD_VAR 0 7
22867: PPUSH
22868: CALL_OW 173
// AddComExitVehicle ( driver ) ;
22872: LD_VAR 0 18
22876: PPUSH
22877: CALL_OW 181
// end ; continue ;
22881: GO 22533
// end ; if not cleaners or not tmp in cleaners then
22883: LD_VAR 0 6
22887: NOT
22888: PUSH
22889: LD_VAR 0 13
22893: PUSH
22894: LD_VAR 0 6
22898: IN
22899: NOT
22900: OR
22901: IFFALSE 23208
// begin if dep then
22903: LD_VAR 0 17
22907: IFFALSE 23043
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
22909: LD_ADDR_VAR 0 16
22913: PUSH
22914: LD_VAR 0 17
22918: PUSH
22919: LD_INT 1
22921: ARRAY
22922: PPUSH
22923: CALL_OW 250
22927: PPUSH
22928: LD_VAR 0 17
22932: PUSH
22933: LD_INT 1
22935: ARRAY
22936: PPUSH
22937: CALL_OW 254
22941: PPUSH
22942: LD_INT 5
22944: PPUSH
22945: CALL_OW 272
22949: PUSH
22950: LD_VAR 0 17
22954: PUSH
22955: LD_INT 1
22957: ARRAY
22958: PPUSH
22959: CALL_OW 251
22963: PPUSH
22964: LD_VAR 0 17
22968: PUSH
22969: LD_INT 1
22971: ARRAY
22972: PPUSH
22973: CALL_OW 254
22977: PPUSH
22978: LD_INT 5
22980: PPUSH
22981: CALL_OW 273
22985: PUSH
22986: EMPTY
22987: LIST
22988: LIST
22989: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
22990: LD_VAR 0 16
22994: PUSH
22995: LD_INT 1
22997: ARRAY
22998: PPUSH
22999: LD_VAR 0 16
23003: PUSH
23004: LD_INT 2
23006: ARRAY
23007: PPUSH
23008: CALL_OW 488
23012: IFFALSE 23043
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23014: LD_VAR 0 13
23018: PPUSH
23019: LD_VAR 0 16
23023: PUSH
23024: LD_INT 1
23026: ARRAY
23027: PPUSH
23028: LD_VAR 0 16
23032: PUSH
23033: LD_INT 2
23035: ARRAY
23036: PPUSH
23037: CALL_OW 111
// continue ;
23041: GO 22533
// end ; end ; r := GetDir ( tmp ) ;
23043: LD_ADDR_VAR 0 15
23047: PUSH
23048: LD_VAR 0 13
23052: PPUSH
23053: CALL_OW 254
23057: ST_TO_ADDR
// if r = 5 then
23058: LD_VAR 0 15
23062: PUSH
23063: LD_INT 5
23065: EQUAL
23066: IFFALSE 23076
// r := 0 ;
23068: LD_ADDR_VAR 0 15
23072: PUSH
23073: LD_INT 0
23075: ST_TO_ADDR
// for j = r to 5 do
23076: LD_ADDR_VAR 0 10
23080: PUSH
23081: DOUBLE
23082: LD_VAR 0 15
23086: DEC
23087: ST_TO_ADDR
23088: LD_INT 5
23090: PUSH
23091: FOR_TO
23092: IFFALSE 23206
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23094: LD_ADDR_VAR 0 11
23098: PUSH
23099: LD_VAR 0 13
23103: PPUSH
23104: CALL_OW 250
23108: PPUSH
23109: LD_VAR 0 10
23113: PPUSH
23114: LD_INT 2
23116: PPUSH
23117: CALL_OW 272
23121: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23122: LD_ADDR_VAR 0 12
23126: PUSH
23127: LD_VAR 0 13
23131: PPUSH
23132: CALL_OW 251
23136: PPUSH
23137: LD_VAR 0 10
23141: PPUSH
23142: LD_INT 2
23144: PPUSH
23145: CALL_OW 273
23149: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23150: LD_VAR 0 11
23154: PPUSH
23155: LD_VAR 0 12
23159: PPUSH
23160: CALL_OW 488
23164: PUSH
23165: LD_VAR 0 11
23169: PPUSH
23170: LD_VAR 0 12
23174: PPUSH
23175: CALL_OW 428
23179: NOT
23180: AND
23181: IFFALSE 23204
// begin ComMoveXY ( tmp , _x , _y ) ;
23183: LD_VAR 0 13
23187: PPUSH
23188: LD_VAR 0 11
23192: PPUSH
23193: LD_VAR 0 12
23197: PPUSH
23198: CALL_OW 111
// break ;
23202: GO 23206
// end ; end ;
23204: GO 23091
23206: POP
23207: POP
// end ; end ;
23208: GO 22533
23210: POP
23211: POP
// end ;
23212: LD_VAR 0 8
23216: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23217: LD_INT 0
23219: PPUSH
// result := true ;
23220: LD_ADDR_VAR 0 3
23224: PUSH
23225: LD_INT 1
23227: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23228: LD_VAR 0 2
23232: PUSH
23233: LD_INT 24
23235: DOUBLE
23236: EQUAL
23237: IFTRUE 23247
23239: LD_INT 33
23241: DOUBLE
23242: EQUAL
23243: IFTRUE 23247
23245: GO 23272
23247: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23248: LD_ADDR_VAR 0 3
23252: PUSH
23253: LD_INT 32
23255: PPUSH
23256: LD_VAR 0 1
23260: PPUSH
23261: CALL_OW 321
23265: PUSH
23266: LD_INT 2
23268: EQUAL
23269: ST_TO_ADDR
23270: GO 23588
23272: LD_INT 20
23274: DOUBLE
23275: EQUAL
23276: IFTRUE 23280
23278: GO 23305
23280: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23281: LD_ADDR_VAR 0 3
23285: PUSH
23286: LD_INT 6
23288: PPUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: CALL_OW 321
23298: PUSH
23299: LD_INT 2
23301: EQUAL
23302: ST_TO_ADDR
23303: GO 23588
23305: LD_INT 22
23307: DOUBLE
23308: EQUAL
23309: IFTRUE 23319
23311: LD_INT 36
23313: DOUBLE
23314: EQUAL
23315: IFTRUE 23319
23317: GO 23344
23319: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23320: LD_ADDR_VAR 0 3
23324: PUSH
23325: LD_INT 15
23327: PPUSH
23328: LD_VAR 0 1
23332: PPUSH
23333: CALL_OW 321
23337: PUSH
23338: LD_INT 2
23340: EQUAL
23341: ST_TO_ADDR
23342: GO 23588
23344: LD_INT 30
23346: DOUBLE
23347: EQUAL
23348: IFTRUE 23352
23350: GO 23377
23352: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23353: LD_ADDR_VAR 0 3
23357: PUSH
23358: LD_INT 20
23360: PPUSH
23361: LD_VAR 0 1
23365: PPUSH
23366: CALL_OW 321
23370: PUSH
23371: LD_INT 2
23373: EQUAL
23374: ST_TO_ADDR
23375: GO 23588
23377: LD_INT 28
23379: DOUBLE
23380: EQUAL
23381: IFTRUE 23391
23383: LD_INT 21
23385: DOUBLE
23386: EQUAL
23387: IFTRUE 23391
23389: GO 23416
23391: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23392: LD_ADDR_VAR 0 3
23396: PUSH
23397: LD_INT 21
23399: PPUSH
23400: LD_VAR 0 1
23404: PPUSH
23405: CALL_OW 321
23409: PUSH
23410: LD_INT 2
23412: EQUAL
23413: ST_TO_ADDR
23414: GO 23588
23416: LD_INT 16
23418: DOUBLE
23419: EQUAL
23420: IFTRUE 23424
23422: GO 23449
23424: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23425: LD_ADDR_VAR 0 3
23429: PUSH
23430: LD_INT 84
23432: PPUSH
23433: LD_VAR 0 1
23437: PPUSH
23438: CALL_OW 321
23442: PUSH
23443: LD_INT 2
23445: EQUAL
23446: ST_TO_ADDR
23447: GO 23588
23449: LD_INT 19
23451: DOUBLE
23452: EQUAL
23453: IFTRUE 23463
23455: LD_INT 23
23457: DOUBLE
23458: EQUAL
23459: IFTRUE 23463
23461: GO 23488
23463: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23464: LD_ADDR_VAR 0 3
23468: PUSH
23469: LD_INT 83
23471: PPUSH
23472: LD_VAR 0 1
23476: PPUSH
23477: CALL_OW 321
23481: PUSH
23482: LD_INT 2
23484: EQUAL
23485: ST_TO_ADDR
23486: GO 23588
23488: LD_INT 17
23490: DOUBLE
23491: EQUAL
23492: IFTRUE 23496
23494: GO 23521
23496: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23497: LD_ADDR_VAR 0 3
23501: PUSH
23502: LD_INT 39
23504: PPUSH
23505: LD_VAR 0 1
23509: PPUSH
23510: CALL_OW 321
23514: PUSH
23515: LD_INT 2
23517: EQUAL
23518: ST_TO_ADDR
23519: GO 23588
23521: LD_INT 18
23523: DOUBLE
23524: EQUAL
23525: IFTRUE 23529
23527: GO 23554
23529: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23530: LD_ADDR_VAR 0 3
23534: PUSH
23535: LD_INT 40
23537: PPUSH
23538: LD_VAR 0 1
23542: PPUSH
23543: CALL_OW 321
23547: PUSH
23548: LD_INT 2
23550: EQUAL
23551: ST_TO_ADDR
23552: GO 23588
23554: LD_INT 27
23556: DOUBLE
23557: EQUAL
23558: IFTRUE 23562
23560: GO 23587
23562: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23563: LD_ADDR_VAR 0 3
23567: PUSH
23568: LD_INT 35
23570: PPUSH
23571: LD_VAR 0 1
23575: PPUSH
23576: CALL_OW 321
23580: PUSH
23581: LD_INT 2
23583: EQUAL
23584: ST_TO_ADDR
23585: GO 23588
23587: POP
// end ;
23588: LD_VAR 0 3
23592: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
23593: LD_INT 0
23595: PPUSH
23596: PPUSH
23597: PPUSH
23598: PPUSH
23599: PPUSH
23600: PPUSH
23601: PPUSH
23602: PPUSH
23603: PPUSH
23604: PPUSH
23605: PPUSH
// result := false ;
23606: LD_ADDR_VAR 0 6
23610: PUSH
23611: LD_INT 0
23613: ST_TO_ADDR
// if btype = b_depot then
23614: LD_VAR 0 2
23618: PUSH
23619: LD_INT 0
23621: EQUAL
23622: IFFALSE 23634
// begin result := true ;
23624: LD_ADDR_VAR 0 6
23628: PUSH
23629: LD_INT 1
23631: ST_TO_ADDR
// exit ;
23632: GO 24460
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
23634: LD_VAR 0 1
23638: NOT
23639: PUSH
23640: LD_VAR 0 1
23644: PPUSH
23645: CALL_OW 266
23649: PUSH
23650: LD_INT 0
23652: PUSH
23653: LD_INT 1
23655: PUSH
23656: EMPTY
23657: LIST
23658: LIST
23659: IN
23660: NOT
23661: OR
23662: PUSH
23663: LD_VAR 0 2
23667: NOT
23668: OR
23669: PUSH
23670: LD_VAR 0 5
23674: PUSH
23675: LD_INT 0
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 2
23683: PUSH
23684: LD_INT 3
23686: PUSH
23687: LD_INT 4
23689: PUSH
23690: LD_INT 5
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: LIST
23697: LIST
23698: LIST
23699: LIST
23700: IN
23701: NOT
23702: OR
23703: PUSH
23704: LD_VAR 0 3
23708: PPUSH
23709: LD_VAR 0 4
23713: PPUSH
23714: CALL_OW 488
23718: NOT
23719: OR
23720: IFFALSE 23724
// exit ;
23722: GO 24460
// side := GetSide ( depot ) ;
23724: LD_ADDR_VAR 0 9
23728: PUSH
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 255
23738: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
23739: LD_VAR 0 9
23743: PPUSH
23744: LD_VAR 0 2
23748: PPUSH
23749: CALL 23217 0 2
23753: NOT
23754: IFFALSE 23758
// exit ;
23756: GO 24460
// pom := GetBase ( depot ) ;
23758: LD_ADDR_VAR 0 10
23762: PUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL_OW 274
23772: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
23773: LD_ADDR_VAR 0 11
23777: PUSH
23778: LD_VAR 0 2
23782: PPUSH
23783: LD_VAR 0 1
23787: PPUSH
23788: CALL_OW 248
23792: PPUSH
23793: CALL_OW 450
23797: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
23798: LD_VAR 0 10
23802: PPUSH
23803: LD_INT 1
23805: PPUSH
23806: CALL_OW 275
23810: PUSH
23811: LD_VAR 0 11
23815: PUSH
23816: LD_INT 1
23818: ARRAY
23819: GREATEREQUAL
23820: PUSH
23821: LD_VAR 0 10
23825: PPUSH
23826: LD_INT 2
23828: PPUSH
23829: CALL_OW 275
23833: PUSH
23834: LD_VAR 0 11
23838: PUSH
23839: LD_INT 2
23841: ARRAY
23842: GREATEREQUAL
23843: AND
23844: PUSH
23845: LD_VAR 0 10
23849: PPUSH
23850: LD_INT 3
23852: PPUSH
23853: CALL_OW 275
23857: PUSH
23858: LD_VAR 0 11
23862: PUSH
23863: LD_INT 3
23865: ARRAY
23866: GREATEREQUAL
23867: AND
23868: NOT
23869: IFFALSE 23873
// exit ;
23871: GO 24460
// if GetBType ( depot ) = b_depot then
23873: LD_VAR 0 1
23877: PPUSH
23878: CALL_OW 266
23882: PUSH
23883: LD_INT 0
23885: EQUAL
23886: IFFALSE 23898
// dist := 28 else
23888: LD_ADDR_VAR 0 14
23892: PUSH
23893: LD_INT 28
23895: ST_TO_ADDR
23896: GO 23906
// dist := 36 ;
23898: LD_ADDR_VAR 0 14
23902: PUSH
23903: LD_INT 36
23905: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
23906: LD_VAR 0 1
23910: PPUSH
23911: LD_VAR 0 3
23915: PPUSH
23916: LD_VAR 0 4
23920: PPUSH
23921: CALL_OW 297
23925: PUSH
23926: LD_VAR 0 14
23930: GREATER
23931: IFFALSE 23935
// exit ;
23933: GO 24460
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
23935: LD_ADDR_VAR 0 12
23939: PUSH
23940: LD_VAR 0 2
23944: PPUSH
23945: LD_VAR 0 3
23949: PPUSH
23950: LD_VAR 0 4
23954: PPUSH
23955: LD_VAR 0 5
23959: PPUSH
23960: LD_VAR 0 1
23964: PPUSH
23965: CALL_OW 248
23969: PPUSH
23970: LD_INT 0
23972: PPUSH
23973: CALL 24465 0 6
23977: ST_TO_ADDR
// if not hexes then
23978: LD_VAR 0 12
23982: NOT
23983: IFFALSE 23987
// exit ;
23985: GO 24460
// hex := GetHexInfo ( x , y ) ;
23987: LD_ADDR_VAR 0 15
23991: PUSH
23992: LD_VAR 0 3
23996: PPUSH
23997: LD_VAR 0 4
24001: PPUSH
24002: CALL_OW 546
24006: ST_TO_ADDR
// if hex [ 1 ] then
24007: LD_VAR 0 15
24011: PUSH
24012: LD_INT 1
24014: ARRAY
24015: IFFALSE 24019
// exit ;
24017: GO 24460
// height := hex [ 2 ] ;
24019: LD_ADDR_VAR 0 13
24023: PUSH
24024: LD_VAR 0 15
24028: PUSH
24029: LD_INT 2
24031: ARRAY
24032: ST_TO_ADDR
// for i = 1 to hexes do
24033: LD_ADDR_VAR 0 7
24037: PUSH
24038: DOUBLE
24039: LD_INT 1
24041: DEC
24042: ST_TO_ADDR
24043: LD_VAR 0 12
24047: PUSH
24048: FOR_TO
24049: IFFALSE 24379
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24051: LD_VAR 0 12
24055: PUSH
24056: LD_VAR 0 7
24060: ARRAY
24061: PUSH
24062: LD_INT 1
24064: ARRAY
24065: PPUSH
24066: LD_VAR 0 12
24070: PUSH
24071: LD_VAR 0 7
24075: ARRAY
24076: PUSH
24077: LD_INT 2
24079: ARRAY
24080: PPUSH
24081: CALL_OW 488
24085: NOT
24086: PUSH
24087: LD_VAR 0 12
24091: PUSH
24092: LD_VAR 0 7
24096: ARRAY
24097: PUSH
24098: LD_INT 1
24100: ARRAY
24101: PPUSH
24102: LD_VAR 0 12
24106: PUSH
24107: LD_VAR 0 7
24111: ARRAY
24112: PUSH
24113: LD_INT 2
24115: ARRAY
24116: PPUSH
24117: CALL_OW 428
24121: PUSH
24122: LD_INT 0
24124: GREATER
24125: OR
24126: PUSH
24127: LD_VAR 0 12
24131: PUSH
24132: LD_VAR 0 7
24136: ARRAY
24137: PUSH
24138: LD_INT 1
24140: ARRAY
24141: PPUSH
24142: LD_VAR 0 12
24146: PUSH
24147: LD_VAR 0 7
24151: ARRAY
24152: PUSH
24153: LD_INT 2
24155: ARRAY
24156: PPUSH
24157: CALL_OW 351
24161: OR
24162: IFFALSE 24168
// exit ;
24164: POP
24165: POP
24166: GO 24460
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24168: LD_ADDR_VAR 0 8
24172: PUSH
24173: LD_VAR 0 12
24177: PUSH
24178: LD_VAR 0 7
24182: ARRAY
24183: PUSH
24184: LD_INT 1
24186: ARRAY
24187: PPUSH
24188: LD_VAR 0 12
24192: PUSH
24193: LD_VAR 0 7
24197: ARRAY
24198: PUSH
24199: LD_INT 2
24201: ARRAY
24202: PPUSH
24203: CALL_OW 546
24207: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24208: LD_VAR 0 8
24212: PUSH
24213: LD_INT 1
24215: ARRAY
24216: PUSH
24217: LD_VAR 0 8
24221: PUSH
24222: LD_INT 2
24224: ARRAY
24225: PUSH
24226: LD_VAR 0 13
24230: PUSH
24231: LD_INT 2
24233: PLUS
24234: GREATER
24235: OR
24236: PUSH
24237: LD_VAR 0 8
24241: PUSH
24242: LD_INT 2
24244: ARRAY
24245: PUSH
24246: LD_VAR 0 13
24250: PUSH
24251: LD_INT 2
24253: MINUS
24254: LESS
24255: OR
24256: PUSH
24257: LD_VAR 0 8
24261: PUSH
24262: LD_INT 3
24264: ARRAY
24265: PUSH
24266: LD_INT 0
24268: PUSH
24269: LD_INT 8
24271: PUSH
24272: LD_INT 9
24274: PUSH
24275: LD_INT 10
24277: PUSH
24278: LD_INT 11
24280: PUSH
24281: LD_INT 12
24283: PUSH
24284: LD_INT 13
24286: PUSH
24287: LD_INT 16
24289: PUSH
24290: LD_INT 17
24292: PUSH
24293: LD_INT 18
24295: PUSH
24296: LD_INT 19
24298: PUSH
24299: LD_INT 20
24301: PUSH
24302: LD_INT 21
24304: PUSH
24305: EMPTY
24306: LIST
24307: LIST
24308: LIST
24309: LIST
24310: LIST
24311: LIST
24312: LIST
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: IN
24320: NOT
24321: OR
24322: PUSH
24323: LD_VAR 0 8
24327: PUSH
24328: LD_INT 5
24330: ARRAY
24331: NOT
24332: OR
24333: PUSH
24334: LD_VAR 0 8
24338: PUSH
24339: LD_INT 6
24341: ARRAY
24342: PUSH
24343: LD_INT 1
24345: PUSH
24346: LD_INT 2
24348: PUSH
24349: LD_INT 7
24351: PUSH
24352: LD_INT 9
24354: PUSH
24355: LD_INT 10
24357: PUSH
24358: LD_INT 11
24360: PUSH
24361: EMPTY
24362: LIST
24363: LIST
24364: LIST
24365: LIST
24366: LIST
24367: LIST
24368: IN
24369: NOT
24370: OR
24371: IFFALSE 24377
// exit ;
24373: POP
24374: POP
24375: GO 24460
// end ;
24377: GO 24048
24379: POP
24380: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24381: LD_VAR 0 9
24385: PPUSH
24386: LD_VAR 0 3
24390: PPUSH
24391: LD_VAR 0 4
24395: PPUSH
24396: LD_INT 20
24398: PPUSH
24399: CALL 16383 0 4
24403: PUSH
24404: LD_INT 4
24406: ARRAY
24407: IFFALSE 24411
// exit ;
24409: GO 24460
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24411: LD_VAR 0 2
24415: PUSH
24416: LD_INT 29
24418: PUSH
24419: LD_INT 30
24421: PUSH
24422: EMPTY
24423: LIST
24424: LIST
24425: IN
24426: PUSH
24427: LD_VAR 0 3
24431: PPUSH
24432: LD_VAR 0 4
24436: PPUSH
24437: LD_VAR 0 9
24441: PPUSH
24442: CALL_OW 440
24446: NOT
24447: AND
24448: IFFALSE 24452
// exit ;
24450: GO 24460
// result := true ;
24452: LD_ADDR_VAR 0 6
24456: PUSH
24457: LD_INT 1
24459: ST_TO_ADDR
// end ;
24460: LD_VAR 0 6
24464: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24465: LD_INT 0
24467: PPUSH
24468: PPUSH
24469: PPUSH
24470: PPUSH
24471: PPUSH
24472: PPUSH
24473: PPUSH
24474: PPUSH
24475: PPUSH
24476: PPUSH
24477: PPUSH
24478: PPUSH
24479: PPUSH
24480: PPUSH
24481: PPUSH
24482: PPUSH
24483: PPUSH
24484: PPUSH
24485: PPUSH
24486: PPUSH
24487: PPUSH
24488: PPUSH
24489: PPUSH
24490: PPUSH
24491: PPUSH
24492: PPUSH
24493: PPUSH
24494: PPUSH
24495: PPUSH
24496: PPUSH
24497: PPUSH
24498: PPUSH
24499: PPUSH
24500: PPUSH
24501: PPUSH
24502: PPUSH
24503: PPUSH
24504: PPUSH
24505: PPUSH
24506: PPUSH
24507: PPUSH
24508: PPUSH
24509: PPUSH
24510: PPUSH
24511: PPUSH
24512: PPUSH
24513: PPUSH
24514: PPUSH
24515: PPUSH
24516: PPUSH
24517: PPUSH
24518: PPUSH
24519: PPUSH
24520: PPUSH
24521: PPUSH
24522: PPUSH
24523: PPUSH
24524: PPUSH
// result = [ ] ;
24525: LD_ADDR_VAR 0 7
24529: PUSH
24530: EMPTY
24531: ST_TO_ADDR
// temp_list = [ ] ;
24532: LD_ADDR_VAR 0 9
24536: PUSH
24537: EMPTY
24538: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24539: LD_VAR 0 4
24543: PUSH
24544: LD_INT 0
24546: PUSH
24547: LD_INT 1
24549: PUSH
24550: LD_INT 2
24552: PUSH
24553: LD_INT 3
24555: PUSH
24556: LD_INT 4
24558: PUSH
24559: LD_INT 5
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: LIST
24568: LIST
24569: IN
24570: NOT
24571: PUSH
24572: LD_VAR 0 1
24576: PUSH
24577: LD_INT 0
24579: PUSH
24580: LD_INT 1
24582: PUSH
24583: EMPTY
24584: LIST
24585: LIST
24586: IN
24587: PUSH
24588: LD_VAR 0 5
24592: PUSH
24593: LD_INT 1
24595: PUSH
24596: LD_INT 2
24598: PUSH
24599: LD_INT 3
24601: PUSH
24602: EMPTY
24603: LIST
24604: LIST
24605: LIST
24606: IN
24607: NOT
24608: AND
24609: OR
24610: IFFALSE 24614
// exit ;
24612: GO 43005
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
24614: LD_VAR 0 1
24618: PUSH
24619: LD_INT 6
24621: PUSH
24622: LD_INT 7
24624: PUSH
24625: LD_INT 8
24627: PUSH
24628: LD_INT 13
24630: PUSH
24631: LD_INT 12
24633: PUSH
24634: LD_INT 15
24636: PUSH
24637: LD_INT 11
24639: PUSH
24640: LD_INT 14
24642: PUSH
24643: LD_INT 10
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: IN
24657: IFFALSE 24667
// btype = b_lab ;
24659: LD_ADDR_VAR 0 1
24663: PUSH
24664: LD_INT 6
24666: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
24667: LD_VAR 0 6
24671: PUSH
24672: LD_INT 0
24674: PUSH
24675: LD_INT 1
24677: PUSH
24678: LD_INT 2
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: LIST
24685: IN
24686: NOT
24687: PUSH
24688: LD_VAR 0 1
24692: PUSH
24693: LD_INT 0
24695: PUSH
24696: LD_INT 1
24698: PUSH
24699: LD_INT 2
24701: PUSH
24702: LD_INT 3
24704: PUSH
24705: LD_INT 6
24707: PUSH
24708: LD_INT 36
24710: PUSH
24711: LD_INT 4
24713: PUSH
24714: LD_INT 5
24716: PUSH
24717: LD_INT 31
24719: PUSH
24720: LD_INT 32
24722: PUSH
24723: LD_INT 33
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: IN
24739: NOT
24740: PUSH
24741: LD_VAR 0 6
24745: PUSH
24746: LD_INT 1
24748: EQUAL
24749: AND
24750: OR
24751: PUSH
24752: LD_VAR 0 1
24756: PUSH
24757: LD_INT 2
24759: PUSH
24760: LD_INT 3
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: IN
24767: NOT
24768: PUSH
24769: LD_VAR 0 6
24773: PUSH
24774: LD_INT 2
24776: EQUAL
24777: AND
24778: OR
24779: IFFALSE 24789
// mode = 0 ;
24781: LD_ADDR_VAR 0 6
24785: PUSH
24786: LD_INT 0
24788: ST_TO_ADDR
// case mode of 0 :
24789: LD_VAR 0 6
24793: PUSH
24794: LD_INT 0
24796: DOUBLE
24797: EQUAL
24798: IFTRUE 24802
24800: GO 36255
24802: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
24803: LD_ADDR_VAR 0 11
24807: PUSH
24808: LD_INT 0
24810: PUSH
24811: LD_INT 0
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: PUSH
24818: LD_INT 0
24820: PUSH
24821: LD_INT 1
24823: NEG
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PUSH
24829: LD_INT 1
24831: PUSH
24832: LD_INT 0
24834: PUSH
24835: EMPTY
24836: LIST
24837: LIST
24838: PUSH
24839: LD_INT 1
24841: PUSH
24842: LD_INT 1
24844: PUSH
24845: EMPTY
24846: LIST
24847: LIST
24848: PUSH
24849: LD_INT 0
24851: PUSH
24852: LD_INT 1
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 1
24861: NEG
24862: PUSH
24863: LD_INT 0
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 1
24872: NEG
24873: PUSH
24874: LD_INT 1
24876: NEG
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: LD_INT 1
24884: NEG
24885: PUSH
24886: LD_INT 2
24888: NEG
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: LD_INT 0
24896: PUSH
24897: LD_INT 2
24899: NEG
24900: PUSH
24901: EMPTY
24902: LIST
24903: LIST
24904: PUSH
24905: LD_INT 1
24907: PUSH
24908: LD_INT 1
24910: NEG
24911: PUSH
24912: EMPTY
24913: LIST
24914: LIST
24915: PUSH
24916: LD_INT 1
24918: PUSH
24919: LD_INT 2
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 0
24928: PUSH
24929: LD_INT 2
24931: PUSH
24932: EMPTY
24933: LIST
24934: LIST
24935: PUSH
24936: LD_INT 1
24938: NEG
24939: PUSH
24940: LD_INT 1
24942: PUSH
24943: EMPTY
24944: LIST
24945: LIST
24946: PUSH
24947: LD_INT 1
24949: PUSH
24950: LD_INT 3
24952: PUSH
24953: EMPTY
24954: LIST
24955: LIST
24956: PUSH
24957: LD_INT 0
24959: PUSH
24960: LD_INT 3
24962: PUSH
24963: EMPTY
24964: LIST
24965: LIST
24966: PUSH
24967: LD_INT 1
24969: NEG
24970: PUSH
24971: LD_INT 2
24973: PUSH
24974: EMPTY
24975: LIST
24976: LIST
24977: PUSH
24978: EMPTY
24979: LIST
24980: LIST
24981: LIST
24982: LIST
24983: LIST
24984: LIST
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: LIST
24990: LIST
24991: LIST
24992: LIST
24993: LIST
24994: LIST
24995: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
24996: LD_ADDR_VAR 0 12
25000: PUSH
25001: LD_INT 0
25003: PUSH
25004: LD_INT 0
25006: PUSH
25007: EMPTY
25008: LIST
25009: LIST
25010: PUSH
25011: LD_INT 0
25013: PUSH
25014: LD_INT 1
25016: NEG
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 1
25024: PUSH
25025: LD_INT 0
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: LD_INT 1
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: PUSH
25042: LD_INT 0
25044: PUSH
25045: LD_INT 1
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: LD_INT 1
25054: NEG
25055: PUSH
25056: LD_INT 0
25058: PUSH
25059: EMPTY
25060: LIST
25061: LIST
25062: PUSH
25063: LD_INT 1
25065: NEG
25066: PUSH
25067: LD_INT 1
25069: NEG
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: PUSH
25078: LD_INT 1
25080: NEG
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 2
25088: PUSH
25089: LD_INT 0
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: PUSH
25096: LD_INT 2
25098: PUSH
25099: LD_INT 1
25101: PUSH
25102: EMPTY
25103: LIST
25104: LIST
25105: PUSH
25106: LD_INT 1
25108: NEG
25109: PUSH
25110: LD_INT 1
25112: PUSH
25113: EMPTY
25114: LIST
25115: LIST
25116: PUSH
25117: LD_INT 2
25119: NEG
25120: PUSH
25121: LD_INT 0
25123: PUSH
25124: EMPTY
25125: LIST
25126: LIST
25127: PUSH
25128: LD_INT 2
25130: NEG
25131: PUSH
25132: LD_INT 1
25134: NEG
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: NEG
25143: PUSH
25144: LD_INT 1
25146: PUSH
25147: EMPTY
25148: LIST
25149: LIST
25150: PUSH
25151: LD_INT 3
25153: NEG
25154: PUSH
25155: LD_INT 0
25157: PUSH
25158: EMPTY
25159: LIST
25160: LIST
25161: PUSH
25162: LD_INT 3
25164: NEG
25165: PUSH
25166: LD_INT 1
25168: NEG
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25192: LD_ADDR_VAR 0 13
25196: PUSH
25197: LD_INT 0
25199: PUSH
25200: LD_INT 0
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: PUSH
25207: LD_INT 0
25209: PUSH
25210: LD_INT 1
25212: NEG
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: EMPTY
25225: LIST
25226: LIST
25227: PUSH
25228: LD_INT 1
25230: PUSH
25231: LD_INT 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: LD_INT 0
25240: PUSH
25241: LD_INT 1
25243: PUSH
25244: EMPTY
25245: LIST
25246: LIST
25247: PUSH
25248: LD_INT 1
25250: NEG
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 1
25261: NEG
25262: PUSH
25263: LD_INT 1
25265: NEG
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: LD_INT 1
25273: NEG
25274: PUSH
25275: LD_INT 2
25277: NEG
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: LD_INT 2
25285: PUSH
25286: LD_INT 1
25288: PUSH
25289: EMPTY
25290: LIST
25291: LIST
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 2
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PUSH
25303: LD_INT 1
25305: PUSH
25306: LD_INT 2
25308: PUSH
25309: EMPTY
25310: LIST
25311: LIST
25312: PUSH
25313: LD_INT 2
25315: NEG
25316: PUSH
25317: LD_INT 1
25319: NEG
25320: PUSH
25321: EMPTY
25322: LIST
25323: LIST
25324: PUSH
25325: LD_INT 2
25327: NEG
25328: PUSH
25329: LD_INT 2
25331: NEG
25332: PUSH
25333: EMPTY
25334: LIST
25335: LIST
25336: PUSH
25337: LD_INT 2
25339: NEG
25340: PUSH
25341: LD_INT 3
25343: NEG
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 3
25351: NEG
25352: PUSH
25353: LD_INT 2
25355: NEG
25356: PUSH
25357: EMPTY
25358: LIST
25359: LIST
25360: PUSH
25361: LD_INT 3
25363: NEG
25364: PUSH
25365: LD_INT 3
25367: NEG
25368: PUSH
25369: EMPTY
25370: LIST
25371: LIST
25372: PUSH
25373: EMPTY
25374: LIST
25375: LIST
25376: LIST
25377: LIST
25378: LIST
25379: LIST
25380: LIST
25381: LIST
25382: LIST
25383: LIST
25384: LIST
25385: LIST
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25391: LD_ADDR_VAR 0 14
25395: PUSH
25396: LD_INT 0
25398: PUSH
25399: LD_INT 0
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: LD_INT 1
25411: NEG
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: LD_INT 1
25419: PUSH
25420: LD_INT 0
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 1
25429: PUSH
25430: LD_INT 1
25432: PUSH
25433: EMPTY
25434: LIST
25435: LIST
25436: PUSH
25437: LD_INT 0
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 1
25449: NEG
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: NEG
25461: PUSH
25462: LD_INT 1
25464: NEG
25465: PUSH
25466: EMPTY
25467: LIST
25468: LIST
25469: PUSH
25470: LD_INT 1
25472: NEG
25473: PUSH
25474: LD_INT 2
25476: NEG
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: LD_INT 2
25487: NEG
25488: PUSH
25489: EMPTY
25490: LIST
25491: LIST
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: LD_INT 1
25498: NEG
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PUSH
25504: LD_INT 1
25506: PUSH
25507: LD_INT 2
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PUSH
25514: LD_INT 0
25516: PUSH
25517: LD_INT 2
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: NEG
25527: PUSH
25528: LD_INT 1
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: LD_INT 3
25541: NEG
25542: PUSH
25543: EMPTY
25544: LIST
25545: LIST
25546: PUSH
25547: LD_INT 0
25549: PUSH
25550: LD_INT 3
25552: NEG
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: LD_INT 1
25560: PUSH
25561: LD_INT 2
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: EMPTY
25570: LIST
25571: LIST
25572: LIST
25573: LIST
25574: LIST
25575: LIST
25576: LIST
25577: LIST
25578: LIST
25579: LIST
25580: LIST
25581: LIST
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
25587: LD_ADDR_VAR 0 15
25591: PUSH
25592: LD_INT 0
25594: PUSH
25595: LD_INT 0
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: PUSH
25602: LD_INT 0
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PUSH
25613: LD_INT 1
25615: PUSH
25616: LD_INT 0
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 1
25625: PUSH
25626: LD_INT 1
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 0
25635: PUSH
25636: LD_INT 1
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 1
25645: NEG
25646: PUSH
25647: LD_INT 0
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: LD_INT 1
25656: NEG
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: EMPTY
25663: LIST
25664: LIST
25665: PUSH
25666: LD_INT 1
25668: PUSH
25669: LD_INT 1
25671: NEG
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 2
25679: PUSH
25680: LD_INT 0
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 2
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 1
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 2
25710: NEG
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PUSH
25719: LD_INT 2
25721: NEG
25722: PUSH
25723: LD_INT 1
25725: NEG
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 2
25733: PUSH
25734: LD_INT 1
25736: NEG
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 3
25744: PUSH
25745: LD_INT 0
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 3
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: EMPTY
25763: LIST
25764: LIST
25765: LIST
25766: LIST
25767: LIST
25768: LIST
25769: LIST
25770: LIST
25771: LIST
25772: LIST
25773: LIST
25774: LIST
25775: LIST
25776: LIST
25777: LIST
25778: LIST
25779: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
25780: LD_ADDR_VAR 0 16
25784: PUSH
25785: LD_INT 0
25787: PUSH
25788: LD_INT 0
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PUSH
25795: LD_INT 0
25797: PUSH
25798: LD_INT 1
25800: NEG
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: PUSH
25806: LD_INT 1
25808: PUSH
25809: LD_INT 0
25811: PUSH
25812: EMPTY
25813: LIST
25814: LIST
25815: PUSH
25816: LD_INT 1
25818: PUSH
25819: LD_INT 1
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: PUSH
25826: LD_INT 0
25828: PUSH
25829: LD_INT 1
25831: PUSH
25832: EMPTY
25833: LIST
25834: LIST
25835: PUSH
25836: LD_INT 1
25838: NEG
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 1
25849: NEG
25850: PUSH
25851: LD_INT 1
25853: NEG
25854: PUSH
25855: EMPTY
25856: LIST
25857: LIST
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: LD_INT 2
25865: NEG
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: LD_INT 2
25873: PUSH
25874: LD_INT 1
25876: PUSH
25877: EMPTY
25878: LIST
25879: LIST
25880: PUSH
25881: LD_INT 2
25883: PUSH
25884: LD_INT 2
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 1
25893: PUSH
25894: LD_INT 2
25896: PUSH
25897: EMPTY
25898: LIST
25899: LIST
25900: PUSH
25901: LD_INT 2
25903: NEG
25904: PUSH
25905: LD_INT 1
25907: NEG
25908: PUSH
25909: EMPTY
25910: LIST
25911: LIST
25912: PUSH
25913: LD_INT 2
25915: NEG
25916: PUSH
25917: LD_INT 2
25919: NEG
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 3
25927: PUSH
25928: LD_INT 2
25930: PUSH
25931: EMPTY
25932: LIST
25933: LIST
25934: PUSH
25935: LD_INT 3
25937: PUSH
25938: LD_INT 3
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: LD_INT 3
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: LIST
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: LIST
25965: LIST
25966: LIST
25967: LIST
25968: LIST
25969: LIST
25970: LIST
25971: LIST
25972: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25973: LD_ADDR_VAR 0 17
25977: PUSH
25978: LD_INT 0
25980: PUSH
25981: LD_INT 0
25983: PUSH
25984: EMPTY
25985: LIST
25986: LIST
25987: PUSH
25988: LD_INT 0
25990: PUSH
25991: LD_INT 1
25993: NEG
25994: PUSH
25995: EMPTY
25996: LIST
25997: LIST
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: LD_INT 0
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 1
26011: PUSH
26012: LD_INT 1
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 0
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 1
26031: NEG
26032: PUSH
26033: LD_INT 0
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: PUSH
26040: LD_INT 1
26042: NEG
26043: PUSH
26044: LD_INT 1
26046: NEG
26047: PUSH
26048: EMPTY
26049: LIST
26050: LIST
26051: PUSH
26052: LD_INT 1
26054: NEG
26055: PUSH
26056: LD_INT 2
26058: NEG
26059: PUSH
26060: EMPTY
26061: LIST
26062: LIST
26063: PUSH
26064: LD_INT 0
26066: PUSH
26067: LD_INT 2
26069: NEG
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: LD_INT 1
26080: NEG
26081: PUSH
26082: EMPTY
26083: LIST
26084: LIST
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PUSH
26096: LD_INT 2
26098: PUSH
26099: LD_INT 1
26101: PUSH
26102: EMPTY
26103: LIST
26104: LIST
26105: PUSH
26106: LD_INT 2
26108: PUSH
26109: LD_INT 2
26111: PUSH
26112: EMPTY
26113: LIST
26114: LIST
26115: PUSH
26116: LD_INT 1
26118: PUSH
26119: LD_INT 2
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 0
26128: PUSH
26129: LD_INT 2
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 1
26138: NEG
26139: PUSH
26140: LD_INT 1
26142: PUSH
26143: EMPTY
26144: LIST
26145: LIST
26146: PUSH
26147: LD_INT 2
26149: NEG
26150: PUSH
26151: LD_INT 0
26153: PUSH
26154: EMPTY
26155: LIST
26156: LIST
26157: PUSH
26158: LD_INT 2
26160: NEG
26161: PUSH
26162: LD_INT 1
26164: NEG
26165: PUSH
26166: EMPTY
26167: LIST
26168: LIST
26169: PUSH
26170: LD_INT 2
26172: NEG
26173: PUSH
26174: LD_INT 2
26176: NEG
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: LIST
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: LIST
26191: LIST
26192: LIST
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: LIST
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26203: LD_ADDR_VAR 0 18
26207: PUSH
26208: LD_INT 0
26210: PUSH
26211: LD_INT 0
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: PUSH
26218: LD_INT 0
26220: PUSH
26221: LD_INT 1
26223: NEG
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: LD_INT 0
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: PUSH
26242: LD_INT 1
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 0
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 1
26261: NEG
26262: PUSH
26263: LD_INT 0
26265: PUSH
26266: EMPTY
26267: LIST
26268: LIST
26269: PUSH
26270: LD_INT 1
26272: NEG
26273: PUSH
26274: LD_INT 1
26276: NEG
26277: PUSH
26278: EMPTY
26279: LIST
26280: LIST
26281: PUSH
26282: LD_INT 1
26284: NEG
26285: PUSH
26286: LD_INT 2
26288: NEG
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 0
26296: PUSH
26297: LD_INT 2
26299: NEG
26300: PUSH
26301: EMPTY
26302: LIST
26303: LIST
26304: PUSH
26305: LD_INT 1
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: EMPTY
26313: LIST
26314: LIST
26315: PUSH
26316: LD_INT 2
26318: PUSH
26319: LD_INT 0
26321: PUSH
26322: EMPTY
26323: LIST
26324: LIST
26325: PUSH
26326: LD_INT 2
26328: PUSH
26329: LD_INT 1
26331: PUSH
26332: EMPTY
26333: LIST
26334: LIST
26335: PUSH
26336: LD_INT 2
26338: PUSH
26339: LD_INT 2
26341: PUSH
26342: EMPTY
26343: LIST
26344: LIST
26345: PUSH
26346: LD_INT 1
26348: PUSH
26349: LD_INT 2
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PUSH
26356: LD_INT 0
26358: PUSH
26359: LD_INT 2
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: NEG
26369: PUSH
26370: LD_INT 1
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: PUSH
26377: LD_INT 2
26379: NEG
26380: PUSH
26381: LD_INT 0
26383: PUSH
26384: EMPTY
26385: LIST
26386: LIST
26387: PUSH
26388: LD_INT 2
26390: NEG
26391: PUSH
26392: LD_INT 1
26394: NEG
26395: PUSH
26396: EMPTY
26397: LIST
26398: LIST
26399: PUSH
26400: LD_INT 2
26402: NEG
26403: PUSH
26404: LD_INT 2
26406: NEG
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: PUSH
26412: EMPTY
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: LIST
26422: LIST
26423: LIST
26424: LIST
26425: LIST
26426: LIST
26427: LIST
26428: LIST
26429: LIST
26430: LIST
26431: LIST
26432: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26433: LD_ADDR_VAR 0 19
26437: PUSH
26438: LD_INT 0
26440: PUSH
26441: LD_INT 0
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 0
26450: PUSH
26451: LD_INT 1
26453: NEG
26454: PUSH
26455: EMPTY
26456: LIST
26457: LIST
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: LD_INT 0
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: PUSH
26469: LD_INT 1
26471: PUSH
26472: LD_INT 1
26474: PUSH
26475: EMPTY
26476: LIST
26477: LIST
26478: PUSH
26479: LD_INT 0
26481: PUSH
26482: LD_INT 1
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: LD_INT 0
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PUSH
26500: LD_INT 1
26502: NEG
26503: PUSH
26504: LD_INT 1
26506: NEG
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PUSH
26512: LD_INT 1
26514: NEG
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 0
26526: PUSH
26527: LD_INT 2
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 1
26537: PUSH
26538: LD_INT 1
26540: NEG
26541: PUSH
26542: EMPTY
26543: LIST
26544: LIST
26545: PUSH
26546: LD_INT 2
26548: PUSH
26549: LD_INT 0
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: PUSH
26556: LD_INT 2
26558: PUSH
26559: LD_INT 1
26561: PUSH
26562: EMPTY
26563: LIST
26564: LIST
26565: PUSH
26566: LD_INT 2
26568: PUSH
26569: LD_INT 2
26571: PUSH
26572: EMPTY
26573: LIST
26574: LIST
26575: PUSH
26576: LD_INT 1
26578: PUSH
26579: LD_INT 2
26581: PUSH
26582: EMPTY
26583: LIST
26584: LIST
26585: PUSH
26586: LD_INT 0
26588: PUSH
26589: LD_INT 2
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 1
26598: NEG
26599: PUSH
26600: LD_INT 1
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: LD_INT 0
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: LD_INT 1
26624: NEG
26625: PUSH
26626: EMPTY
26627: LIST
26628: LIST
26629: PUSH
26630: LD_INT 2
26632: NEG
26633: PUSH
26634: LD_INT 2
26636: NEG
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: LIST
26652: LIST
26653: LIST
26654: LIST
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26663: LD_ADDR_VAR 0 20
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 0
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 0
26680: PUSH
26681: LD_INT 1
26683: NEG
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 1
26691: PUSH
26692: LD_INT 0
26694: PUSH
26695: EMPTY
26696: LIST
26697: LIST
26698: PUSH
26699: LD_INT 1
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 0
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 0
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: LD_INT 1
26732: NEG
26733: PUSH
26734: LD_INT 1
26736: NEG
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 1
26744: NEG
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 0
26756: PUSH
26757: LD_INT 2
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 1
26767: PUSH
26768: LD_INT 1
26770: NEG
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: PUSH
26776: LD_INT 2
26778: PUSH
26779: LD_INT 0
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: PUSH
26786: LD_INT 2
26788: PUSH
26789: LD_INT 1
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: PUSH
26796: LD_INT 2
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: EMPTY
26803: LIST
26804: LIST
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: LD_INT 2
26811: PUSH
26812: EMPTY
26813: LIST
26814: LIST
26815: PUSH
26816: LD_INT 0
26818: PUSH
26819: LD_INT 2
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 1
26828: NEG
26829: PUSH
26830: LD_INT 1
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: LD_INT 0
26843: PUSH
26844: EMPTY
26845: LIST
26846: LIST
26847: PUSH
26848: LD_INT 2
26850: NEG
26851: PUSH
26852: LD_INT 1
26854: NEG
26855: PUSH
26856: EMPTY
26857: LIST
26858: LIST
26859: PUSH
26860: LD_INT 2
26862: NEG
26863: PUSH
26864: LD_INT 2
26866: NEG
26867: PUSH
26868: EMPTY
26869: LIST
26870: LIST
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: LIST
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26893: LD_ADDR_VAR 0 21
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: LD_INT 0
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: LD_INT 1
26913: NEG
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: LD_INT 0
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: PUSH
26929: LD_INT 1
26931: PUSH
26932: LD_INT 1
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 1
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: LD_INT 0
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: LD_INT 1
26962: NEG
26963: PUSH
26964: LD_INT 1
26966: NEG
26967: PUSH
26968: EMPTY
26969: LIST
26970: LIST
26971: PUSH
26972: LD_INT 1
26974: NEG
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 0
26986: PUSH
26987: LD_INT 2
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: LD_INT 1
27000: NEG
27001: PUSH
27002: EMPTY
27003: LIST
27004: LIST
27005: PUSH
27006: LD_INT 2
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: PUSH
27016: LD_INT 2
27018: PUSH
27019: LD_INT 1
27021: PUSH
27022: EMPTY
27023: LIST
27024: LIST
27025: PUSH
27026: LD_INT 2
27028: PUSH
27029: LD_INT 2
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: PUSH
27036: LD_INT 1
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 0
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 1
27058: NEG
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 0
27073: PUSH
27074: EMPTY
27075: LIST
27076: LIST
27077: PUSH
27078: LD_INT 2
27080: NEG
27081: PUSH
27082: LD_INT 1
27084: NEG
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: PUSH
27090: LD_INT 2
27092: NEG
27093: PUSH
27094: LD_INT 2
27096: NEG
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27123: LD_ADDR_VAR 0 22
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 0
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 0
27140: PUSH
27141: LD_INT 1
27143: NEG
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 1
27151: PUSH
27152: LD_INT 0
27154: PUSH
27155: EMPTY
27156: LIST
27157: LIST
27158: PUSH
27159: LD_INT 1
27161: PUSH
27162: LD_INT 1
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 0
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: LD_INT 0
27185: PUSH
27186: EMPTY
27187: LIST
27188: LIST
27189: PUSH
27190: LD_INT 1
27192: NEG
27193: PUSH
27194: LD_INT 1
27196: NEG
27197: PUSH
27198: EMPTY
27199: LIST
27200: LIST
27201: PUSH
27202: LD_INT 1
27204: NEG
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 0
27216: PUSH
27217: LD_INT 2
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 1
27227: PUSH
27228: LD_INT 1
27230: NEG
27231: PUSH
27232: EMPTY
27233: LIST
27234: LIST
27235: PUSH
27236: LD_INT 2
27238: PUSH
27239: LD_INT 0
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PUSH
27246: LD_INT 2
27248: PUSH
27249: LD_INT 1
27251: PUSH
27252: EMPTY
27253: LIST
27254: LIST
27255: PUSH
27256: LD_INT 2
27258: PUSH
27259: LD_INT 2
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: PUSH
27266: LD_INT 1
27268: PUSH
27269: LD_INT 2
27271: PUSH
27272: EMPTY
27273: LIST
27274: LIST
27275: PUSH
27276: LD_INT 0
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 1
27288: NEG
27289: PUSH
27290: LD_INT 1
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: LD_INT 0
27303: PUSH
27304: EMPTY
27305: LIST
27306: LIST
27307: PUSH
27308: LD_INT 2
27310: NEG
27311: PUSH
27312: LD_INT 1
27314: NEG
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: PUSH
27320: LD_INT 2
27322: NEG
27323: PUSH
27324: LD_INT 2
27326: NEG
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: LIST
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: LIST
27347: LIST
27348: LIST
27349: LIST
27350: LIST
27351: LIST
27352: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27353: LD_ADDR_VAR 0 23
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 0
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 0
27370: PUSH
27371: LD_INT 1
27373: NEG
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 1
27381: PUSH
27382: LD_INT 0
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: PUSH
27389: LD_INT 1
27391: PUSH
27392: LD_INT 1
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: PUSH
27399: LD_INT 0
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: NEG
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: EMPTY
27417: LIST
27418: LIST
27419: PUSH
27420: LD_INT 1
27422: NEG
27423: PUSH
27424: LD_INT 1
27426: NEG
27427: PUSH
27428: EMPTY
27429: LIST
27430: LIST
27431: PUSH
27432: LD_INT 1
27434: NEG
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 2
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 1
27457: PUSH
27458: LD_INT 1
27460: NEG
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: PUSH
27466: LD_INT 2
27468: PUSH
27469: LD_INT 0
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 2
27478: PUSH
27479: LD_INT 1
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: LD_INT 2
27488: PUSH
27489: LD_INT 2
27491: PUSH
27492: EMPTY
27493: LIST
27494: LIST
27495: PUSH
27496: LD_INT 1
27498: PUSH
27499: LD_INT 2
27501: PUSH
27502: EMPTY
27503: LIST
27504: LIST
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: LD_INT 2
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 1
27518: NEG
27519: PUSH
27520: LD_INT 1
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: LD_INT 0
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 2
27540: NEG
27541: PUSH
27542: LD_INT 1
27544: NEG
27545: PUSH
27546: EMPTY
27547: LIST
27548: LIST
27549: PUSH
27550: LD_INT 2
27552: NEG
27553: PUSH
27554: LD_INT 2
27556: NEG
27557: PUSH
27558: EMPTY
27559: LIST
27560: LIST
27561: PUSH
27562: LD_INT 2
27564: NEG
27565: PUSH
27566: LD_INT 3
27568: NEG
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 1
27576: NEG
27577: PUSH
27578: LD_INT 3
27580: NEG
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: PUSH
27586: LD_INT 1
27588: PUSH
27589: LD_INT 2
27591: NEG
27592: PUSH
27593: EMPTY
27594: LIST
27595: LIST
27596: PUSH
27597: LD_INT 2
27599: PUSH
27600: LD_INT 1
27602: NEG
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
27633: LD_ADDR_VAR 0 24
27637: PUSH
27638: LD_INT 0
27640: PUSH
27641: LD_INT 0
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: LD_INT 0
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: EMPTY
27656: LIST
27657: LIST
27658: PUSH
27659: LD_INT 1
27661: PUSH
27662: LD_INT 0
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PUSH
27669: LD_INT 1
27671: PUSH
27672: LD_INT 1
27674: PUSH
27675: EMPTY
27676: LIST
27677: LIST
27678: PUSH
27679: LD_INT 0
27681: PUSH
27682: LD_INT 1
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: PUSH
27689: LD_INT 1
27691: NEG
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: PUSH
27700: LD_INT 1
27702: NEG
27703: PUSH
27704: LD_INT 1
27706: NEG
27707: PUSH
27708: EMPTY
27709: LIST
27710: LIST
27711: PUSH
27712: LD_INT 1
27714: NEG
27715: PUSH
27716: LD_INT 2
27718: NEG
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 2
27729: NEG
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: PUSH
27738: LD_INT 1
27740: NEG
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 2
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 2
27758: PUSH
27759: LD_INT 1
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 2
27768: PUSH
27769: LD_INT 2
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 1
27778: PUSH
27779: LD_INT 2
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: LD_INT 0
27788: PUSH
27789: LD_INT 2
27791: PUSH
27792: EMPTY
27793: LIST
27794: LIST
27795: PUSH
27796: LD_INT 1
27798: NEG
27799: PUSH
27800: LD_INT 1
27802: PUSH
27803: EMPTY
27804: LIST
27805: LIST
27806: PUSH
27807: LD_INT 2
27809: NEG
27810: PUSH
27811: LD_INT 0
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 2
27820: NEG
27821: PUSH
27822: LD_INT 1
27824: NEG
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 2
27832: NEG
27833: PUSH
27834: LD_INT 2
27836: NEG
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: PUSH
27842: LD_INT 1
27844: PUSH
27845: LD_INT 2
27847: NEG
27848: PUSH
27849: EMPTY
27850: LIST
27851: LIST
27852: PUSH
27853: LD_INT 2
27855: PUSH
27856: LD_INT 1
27858: NEG
27859: PUSH
27860: EMPTY
27861: LIST
27862: LIST
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: LD_INT 1
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: LD_INT 3
27876: PUSH
27877: LD_INT 2
27879: PUSH
27880: EMPTY
27881: LIST
27882: LIST
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
27909: LD_ADDR_VAR 0 25
27913: PUSH
27914: LD_INT 0
27916: PUSH
27917: LD_INT 0
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: LD_INT 1
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 1
27937: PUSH
27938: LD_INT 0
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: LD_INT 1
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 1
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: LD_INT 0
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 1
27978: NEG
27979: PUSH
27980: LD_INT 1
27982: NEG
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: PUSH
27988: LD_INT 1
27990: NEG
27991: PUSH
27992: LD_INT 2
27994: NEG
27995: PUSH
27996: EMPTY
27997: LIST
27998: LIST
27999: PUSH
28000: LD_INT 0
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 1
28013: PUSH
28014: LD_INT 1
28016: NEG
28017: PUSH
28018: EMPTY
28019: LIST
28020: LIST
28021: PUSH
28022: LD_INT 2
28024: PUSH
28025: LD_INT 0
28027: PUSH
28028: EMPTY
28029: LIST
28030: LIST
28031: PUSH
28032: LD_INT 2
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: PUSH
28042: LD_INT 2
28044: PUSH
28045: LD_INT 2
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: PUSH
28052: LD_INT 1
28054: PUSH
28055: LD_INT 2
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 0
28064: PUSH
28065: LD_INT 2
28067: PUSH
28068: EMPTY
28069: LIST
28070: LIST
28071: PUSH
28072: LD_INT 1
28074: NEG
28075: PUSH
28076: LD_INT 1
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: NEG
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: EMPTY
28091: LIST
28092: LIST
28093: PUSH
28094: LD_INT 2
28096: NEG
28097: PUSH
28098: LD_INT 1
28100: NEG
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: PUSH
28106: LD_INT 2
28108: NEG
28109: PUSH
28110: LD_INT 2
28112: NEG
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 3
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 3
28130: PUSH
28131: LD_INT 2
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 2
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 1
28150: PUSH
28151: LD_INT 3
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: LIST
28175: LIST
28176: LIST
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: LIST
28182: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28183: LD_ADDR_VAR 0 26
28187: PUSH
28188: LD_INT 0
28190: PUSH
28191: LD_INT 0
28193: PUSH
28194: EMPTY
28195: LIST
28196: LIST
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: LD_INT 1
28203: NEG
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: LD_INT 0
28214: PUSH
28215: EMPTY
28216: LIST
28217: LIST
28218: PUSH
28219: LD_INT 1
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 0
28231: PUSH
28232: LD_INT 1
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 1
28241: NEG
28242: PUSH
28243: LD_INT 0
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PUSH
28250: LD_INT 1
28252: NEG
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: EMPTY
28259: LIST
28260: LIST
28261: PUSH
28262: LD_INT 1
28264: NEG
28265: PUSH
28266: LD_INT 2
28268: NEG
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: PUSH
28274: LD_INT 0
28276: PUSH
28277: LD_INT 2
28279: NEG
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: LD_INT 1
28290: NEG
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: PUSH
28296: LD_INT 2
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 2
28308: PUSH
28309: LD_INT 1
28311: PUSH
28312: EMPTY
28313: LIST
28314: LIST
28315: PUSH
28316: LD_INT 2
28318: PUSH
28319: LD_INT 2
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: LD_INT 2
28331: PUSH
28332: EMPTY
28333: LIST
28334: LIST
28335: PUSH
28336: LD_INT 0
28338: PUSH
28339: LD_INT 2
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: PUSH
28346: LD_INT 1
28348: NEG
28349: PUSH
28350: LD_INT 1
28352: PUSH
28353: EMPTY
28354: LIST
28355: LIST
28356: PUSH
28357: LD_INT 2
28359: NEG
28360: PUSH
28361: LD_INT 0
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: PUSH
28368: LD_INT 2
28370: NEG
28371: PUSH
28372: LD_INT 1
28374: NEG
28375: PUSH
28376: EMPTY
28377: LIST
28378: LIST
28379: PUSH
28380: LD_INT 2
28382: NEG
28383: PUSH
28384: LD_INT 2
28386: NEG
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 2
28394: PUSH
28395: LD_INT 3
28397: PUSH
28398: EMPTY
28399: LIST
28400: LIST
28401: PUSH
28402: LD_INT 1
28404: PUSH
28405: LD_INT 3
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: PUSH
28412: LD_INT 1
28414: NEG
28415: PUSH
28416: LD_INT 2
28418: PUSH
28419: EMPTY
28420: LIST
28421: LIST
28422: PUSH
28423: LD_INT 2
28425: NEG
28426: PUSH
28427: LD_INT 1
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: LIST
28457: LIST
28458: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28459: LD_ADDR_VAR 0 27
28463: PUSH
28464: LD_INT 0
28466: PUSH
28467: LD_INT 0
28469: PUSH
28470: EMPTY
28471: LIST
28472: LIST
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: LD_INT 1
28479: NEG
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 1
28487: PUSH
28488: LD_INT 0
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 1
28497: PUSH
28498: LD_INT 1
28500: PUSH
28501: EMPTY
28502: LIST
28503: LIST
28504: PUSH
28505: LD_INT 0
28507: PUSH
28508: LD_INT 1
28510: PUSH
28511: EMPTY
28512: LIST
28513: LIST
28514: PUSH
28515: LD_INT 1
28517: NEG
28518: PUSH
28519: LD_INT 0
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 1
28528: NEG
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 1
28540: NEG
28541: PUSH
28542: LD_INT 2
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 0
28552: PUSH
28553: LD_INT 2
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: LD_INT 1
28566: NEG
28567: PUSH
28568: EMPTY
28569: LIST
28570: LIST
28571: PUSH
28572: LD_INT 2
28574: PUSH
28575: LD_INT 0
28577: PUSH
28578: EMPTY
28579: LIST
28580: LIST
28581: PUSH
28582: LD_INT 2
28584: PUSH
28585: LD_INT 1
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 2
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 1
28604: PUSH
28605: LD_INT 2
28607: PUSH
28608: EMPTY
28609: LIST
28610: LIST
28611: PUSH
28612: LD_INT 0
28614: PUSH
28615: LD_INT 2
28617: PUSH
28618: EMPTY
28619: LIST
28620: LIST
28621: PUSH
28622: LD_INT 1
28624: NEG
28625: PUSH
28626: LD_INT 1
28628: PUSH
28629: EMPTY
28630: LIST
28631: LIST
28632: PUSH
28633: LD_INT 2
28635: NEG
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 2
28646: NEG
28647: PUSH
28648: LD_INT 1
28650: NEG
28651: PUSH
28652: EMPTY
28653: LIST
28654: LIST
28655: PUSH
28656: LD_INT 2
28658: NEG
28659: PUSH
28660: LD_INT 2
28662: NEG
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: NEG
28671: PUSH
28672: LD_INT 2
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 2
28681: NEG
28682: PUSH
28683: LD_INT 1
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 3
28692: NEG
28693: PUSH
28694: LD_INT 1
28696: NEG
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 3
28704: NEG
28705: PUSH
28706: LD_INT 2
28708: NEG
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: LIST
28729: LIST
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: LIST
28735: LIST
28736: LIST
28737: LIST
28738: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28739: LD_ADDR_VAR 0 28
28743: PUSH
28744: LD_INT 0
28746: PUSH
28747: LD_INT 0
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: LD_INT 1
28759: NEG
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 1
28767: PUSH
28768: LD_INT 0
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 1
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 1
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: LD_INT 0
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 1
28808: NEG
28809: PUSH
28810: LD_INT 1
28812: NEG
28813: PUSH
28814: EMPTY
28815: LIST
28816: LIST
28817: PUSH
28818: LD_INT 1
28820: NEG
28821: PUSH
28822: LD_INT 2
28824: NEG
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 0
28832: PUSH
28833: LD_INT 2
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 1
28843: PUSH
28844: LD_INT 1
28846: NEG
28847: PUSH
28848: EMPTY
28849: LIST
28850: LIST
28851: PUSH
28852: LD_INT 2
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 2
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 2
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: LD_INT 1
28884: PUSH
28885: LD_INT 2
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PUSH
28892: LD_INT 0
28894: PUSH
28895: LD_INT 2
28897: PUSH
28898: EMPTY
28899: LIST
28900: LIST
28901: PUSH
28902: LD_INT 1
28904: NEG
28905: PUSH
28906: LD_INT 1
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: PUSH
28913: LD_INT 2
28915: NEG
28916: PUSH
28917: LD_INT 0
28919: PUSH
28920: EMPTY
28921: LIST
28922: LIST
28923: PUSH
28924: LD_INT 2
28926: NEG
28927: PUSH
28928: LD_INT 1
28930: NEG
28931: PUSH
28932: EMPTY
28933: LIST
28934: LIST
28935: PUSH
28936: LD_INT 2
28938: NEG
28939: PUSH
28940: LD_INT 2
28942: NEG
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 2
28950: NEG
28951: PUSH
28952: LD_INT 3
28954: NEG
28955: PUSH
28956: EMPTY
28957: LIST
28958: LIST
28959: PUSH
28960: LD_INT 1
28962: NEG
28963: PUSH
28964: LD_INT 3
28966: NEG
28967: PUSH
28968: EMPTY
28969: LIST
28970: LIST
28971: PUSH
28972: LD_INT 3
28974: NEG
28975: PUSH
28976: LD_INT 1
28978: NEG
28979: PUSH
28980: EMPTY
28981: LIST
28982: LIST
28983: PUSH
28984: LD_INT 3
28986: NEG
28987: PUSH
28988: LD_INT 2
28990: NEG
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: EMPTY
28997: LIST
28998: LIST
28999: LIST
29000: LIST
29001: LIST
29002: LIST
29003: LIST
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: LIST
29009: LIST
29010: LIST
29011: LIST
29012: LIST
29013: LIST
29014: LIST
29015: LIST
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29021: LD_ADDR_VAR 0 29
29025: PUSH
29026: LD_INT 0
29028: PUSH
29029: LD_INT 0
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 0
29038: PUSH
29039: LD_INT 1
29041: NEG
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 1
29049: PUSH
29050: LD_INT 0
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: PUSH
29060: LD_INT 1
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: PUSH
29067: LD_INT 0
29069: PUSH
29070: LD_INT 1
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PUSH
29077: LD_INT 1
29079: NEG
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 1
29090: NEG
29091: PUSH
29092: LD_INT 1
29094: NEG
29095: PUSH
29096: EMPTY
29097: LIST
29098: LIST
29099: PUSH
29100: LD_INT 1
29102: NEG
29103: PUSH
29104: LD_INT 2
29106: NEG
29107: PUSH
29108: EMPTY
29109: LIST
29110: LIST
29111: PUSH
29112: LD_INT 0
29114: PUSH
29115: LD_INT 2
29117: NEG
29118: PUSH
29119: EMPTY
29120: LIST
29121: LIST
29122: PUSH
29123: LD_INT 1
29125: PUSH
29126: LD_INT 1
29128: NEG
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: LD_INT 0
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 2
29146: PUSH
29147: LD_INT 1
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 1
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 0
29166: PUSH
29167: LD_INT 2
29169: PUSH
29170: EMPTY
29171: LIST
29172: LIST
29173: PUSH
29174: LD_INT 1
29176: NEG
29177: PUSH
29178: LD_INT 1
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: NEG
29188: PUSH
29189: LD_INT 1
29191: NEG
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PUSH
29197: LD_INT 2
29199: NEG
29200: PUSH
29201: LD_INT 2
29203: NEG
29204: PUSH
29205: EMPTY
29206: LIST
29207: LIST
29208: PUSH
29209: LD_INT 2
29211: NEG
29212: PUSH
29213: LD_INT 3
29215: NEG
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 2
29223: PUSH
29224: LD_INT 1
29226: NEG
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 3
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: PUSH
29245: LD_INT 3
29247: PUSH
29248: EMPTY
29249: LIST
29250: LIST
29251: PUSH
29252: LD_INT 1
29254: NEG
29255: PUSH
29256: LD_INT 2
29258: PUSH
29259: EMPTY
29260: LIST
29261: LIST
29262: PUSH
29263: LD_INT 3
29265: NEG
29266: PUSH
29267: LD_INT 2
29269: NEG
29270: PUSH
29271: EMPTY
29272: LIST
29273: LIST
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: LIST
29295: LIST
29296: LIST
29297: LIST
29298: LIST
29299: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29300: LD_ADDR_VAR 0 30
29304: PUSH
29305: LD_INT 0
29307: PUSH
29308: LD_INT 0
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 0
29317: PUSH
29318: LD_INT 1
29320: NEG
29321: PUSH
29322: EMPTY
29323: LIST
29324: LIST
29325: PUSH
29326: LD_INT 1
29328: PUSH
29329: LD_INT 0
29331: PUSH
29332: EMPTY
29333: LIST
29334: LIST
29335: PUSH
29336: LD_INT 1
29338: PUSH
29339: LD_INT 1
29341: PUSH
29342: EMPTY
29343: LIST
29344: LIST
29345: PUSH
29346: LD_INT 0
29348: PUSH
29349: LD_INT 1
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 1
29358: NEG
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 1
29369: NEG
29370: PUSH
29371: LD_INT 1
29373: NEG
29374: PUSH
29375: EMPTY
29376: LIST
29377: LIST
29378: PUSH
29379: LD_INT 1
29381: NEG
29382: PUSH
29383: LD_INT 2
29385: NEG
29386: PUSH
29387: EMPTY
29388: LIST
29389: LIST
29390: PUSH
29391: LD_INT 0
29393: PUSH
29394: LD_INT 2
29396: NEG
29397: PUSH
29398: EMPTY
29399: LIST
29400: LIST
29401: PUSH
29402: LD_INT 1
29404: PUSH
29405: LD_INT 1
29407: NEG
29408: PUSH
29409: EMPTY
29410: LIST
29411: LIST
29412: PUSH
29413: LD_INT 2
29415: PUSH
29416: LD_INT 0
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 2
29425: PUSH
29426: LD_INT 1
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 2
29435: PUSH
29436: LD_INT 2
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 1
29445: PUSH
29446: LD_INT 2
29448: PUSH
29449: EMPTY
29450: LIST
29451: LIST
29452: PUSH
29453: LD_INT 1
29455: NEG
29456: PUSH
29457: LD_INT 1
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: LD_INT 2
29466: NEG
29467: PUSH
29468: LD_INT 0
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 2
29477: NEG
29478: PUSH
29479: LD_INT 1
29481: NEG
29482: PUSH
29483: EMPTY
29484: LIST
29485: LIST
29486: PUSH
29487: LD_INT 1
29489: NEG
29490: PUSH
29491: LD_INT 3
29493: NEG
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: LD_INT 2
29504: NEG
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: LD_INT 3
29512: PUSH
29513: LD_INT 2
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: PUSH
29520: LD_INT 2
29522: PUSH
29523: LD_INT 3
29525: PUSH
29526: EMPTY
29527: LIST
29528: LIST
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: LD_INT 1
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 3
29543: NEG
29544: PUSH
29545: LD_INT 1
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: EMPTY
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: LIST
29563: LIST
29564: LIST
29565: LIST
29566: LIST
29567: LIST
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29578: LD_ADDR_VAR 0 31
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: NEG
29660: PUSH
29661: LD_INT 2
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: LD_INT 1
29674: NEG
29675: PUSH
29676: EMPTY
29677: LIST
29678: LIST
29679: PUSH
29680: LD_INT 2
29682: PUSH
29683: LD_INT 0
29685: PUSH
29686: EMPTY
29687: LIST
29688: LIST
29689: PUSH
29690: LD_INT 2
29692: PUSH
29693: LD_INT 1
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PUSH
29710: LD_INT 1
29712: PUSH
29713: LD_INT 2
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: PUSH
29720: LD_INT 0
29722: PUSH
29723: LD_INT 2
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: PUSH
29730: LD_INT 1
29732: NEG
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 2
29743: NEG
29744: PUSH
29745: LD_INT 1
29747: NEG
29748: PUSH
29749: EMPTY
29750: LIST
29751: LIST
29752: PUSH
29753: LD_INT 2
29755: NEG
29756: PUSH
29757: LD_INT 2
29759: NEG
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 2
29767: NEG
29768: PUSH
29769: LD_INT 3
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 2
29779: PUSH
29780: LD_INT 1
29782: NEG
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 3
29790: PUSH
29791: LD_INT 1
29793: PUSH
29794: EMPTY
29795: LIST
29796: LIST
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: LD_INT 3
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: LD_INT 1
29810: NEG
29811: PUSH
29812: LD_INT 2
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 3
29821: NEG
29822: PUSH
29823: LD_INT 2
29825: NEG
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: LIST
29842: LIST
29843: LIST
29844: LIST
29845: LIST
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29856: LD_ADDR_VAR 0 32
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: NEG
29938: PUSH
29939: LD_INT 2
29941: NEG
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 0
29949: PUSH
29950: LD_INT 2
29952: NEG
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: PUSH
29961: LD_INT 1
29963: NEG
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 1
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: PUSH
29982: LD_INT 2
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: PUSH
29989: LD_INT 1
29991: PUSH
29992: LD_INT 2
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 0
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 1
30011: NEG
30012: PUSH
30013: LD_INT 1
30015: PUSH
30016: EMPTY
30017: LIST
30018: LIST
30019: PUSH
30020: LD_INT 2
30022: NEG
30023: PUSH
30024: LD_INT 0
30026: PUSH
30027: EMPTY
30028: LIST
30029: LIST
30030: PUSH
30031: LD_INT 2
30033: NEG
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: PUSH
30043: LD_INT 1
30045: NEG
30046: PUSH
30047: LD_INT 3
30049: NEG
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 1
30057: PUSH
30058: LD_INT 2
30060: NEG
30061: PUSH
30062: EMPTY
30063: LIST
30064: LIST
30065: PUSH
30066: LD_INT 3
30068: PUSH
30069: LD_INT 2
30071: PUSH
30072: EMPTY
30073: LIST
30074: LIST
30075: PUSH
30076: LD_INT 2
30078: PUSH
30079: LD_INT 3
30081: PUSH
30082: EMPTY
30083: LIST
30084: LIST
30085: PUSH
30086: LD_INT 2
30088: NEG
30089: PUSH
30090: LD_INT 1
30092: PUSH
30093: EMPTY
30094: LIST
30095: LIST
30096: PUSH
30097: LD_INT 3
30099: NEG
30100: PUSH
30101: LD_INT 1
30103: NEG
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: LIST
30120: LIST
30121: LIST
30122: LIST
30123: LIST
30124: LIST
30125: LIST
30126: LIST
30127: LIST
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30134: LD_ADDR_VAR 0 33
30138: PUSH
30139: LD_INT 0
30141: PUSH
30142: LD_INT 0
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: LD_INT 1
30154: NEG
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: PUSH
30160: LD_INT 1
30162: PUSH
30163: LD_INT 0
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 1
30172: PUSH
30173: LD_INT 1
30175: PUSH
30176: EMPTY
30177: LIST
30178: LIST
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 1
30192: NEG
30193: PUSH
30194: LD_INT 0
30196: PUSH
30197: EMPTY
30198: LIST
30199: LIST
30200: PUSH
30201: LD_INT 1
30203: NEG
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: PUSH
30213: LD_INT 1
30215: NEG
30216: PUSH
30217: LD_INT 2
30219: NEG
30220: PUSH
30221: EMPTY
30222: LIST
30223: LIST
30224: PUSH
30225: LD_INT 1
30227: PUSH
30228: LD_INT 1
30230: NEG
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 0
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: LD_INT 2
30248: PUSH
30249: LD_INT 1
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 1
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 0
30268: PUSH
30269: LD_INT 2
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 1
30278: NEG
30279: PUSH
30280: LD_INT 1
30282: PUSH
30283: EMPTY
30284: LIST
30285: LIST
30286: PUSH
30287: LD_INT 2
30289: NEG
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 2
30300: NEG
30301: PUSH
30302: LD_INT 1
30304: NEG
30305: PUSH
30306: EMPTY
30307: LIST
30308: LIST
30309: PUSH
30310: LD_INT 2
30312: NEG
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 2
30324: NEG
30325: PUSH
30326: LD_INT 3
30328: NEG
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: LD_INT 1
30339: NEG
30340: PUSH
30341: EMPTY
30342: LIST
30343: LIST
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: LD_INT 1
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: PUSH
30355: LD_INT 1
30357: PUSH
30358: LD_INT 3
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 2
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 3
30378: NEG
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: LIST
30398: LIST
30399: LIST
30400: LIST
30401: LIST
30402: LIST
30403: LIST
30404: LIST
30405: LIST
30406: LIST
30407: LIST
30408: LIST
30409: LIST
30410: LIST
30411: LIST
30412: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30413: LD_ADDR_VAR 0 34
30417: PUSH
30418: LD_INT 0
30420: PUSH
30421: LD_INT 0
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 0
30430: PUSH
30431: LD_INT 1
30433: NEG
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: PUSH
30439: LD_INT 1
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: EMPTY
30446: LIST
30447: LIST
30448: PUSH
30449: LD_INT 1
30451: PUSH
30452: LD_INT 1
30454: PUSH
30455: EMPTY
30456: LIST
30457: LIST
30458: PUSH
30459: LD_INT 0
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 1
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 2
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 0
30506: PUSH
30507: LD_INT 2
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 1
30517: PUSH
30518: LD_INT 1
30520: NEG
30521: PUSH
30522: EMPTY
30523: LIST
30524: LIST
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: LD_INT 1
30531: PUSH
30532: EMPTY
30533: LIST
30534: LIST
30535: PUSH
30536: LD_INT 2
30538: PUSH
30539: LD_INT 2
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 1
30548: PUSH
30549: LD_INT 2
30551: PUSH
30552: EMPTY
30553: LIST
30554: LIST
30555: PUSH
30556: LD_INT 1
30558: NEG
30559: PUSH
30560: LD_INT 1
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 2
30569: NEG
30570: PUSH
30571: LD_INT 0
30573: PUSH
30574: EMPTY
30575: LIST
30576: LIST
30577: PUSH
30578: LD_INT 2
30580: NEG
30581: PUSH
30582: LD_INT 1
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 2
30592: NEG
30593: PUSH
30594: LD_INT 2
30596: NEG
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 1
30604: NEG
30605: PUSH
30606: LD_INT 3
30608: NEG
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 1
30616: PUSH
30617: LD_INT 2
30619: NEG
30620: PUSH
30621: EMPTY
30622: LIST
30623: LIST
30624: PUSH
30625: LD_INT 3
30627: PUSH
30628: LD_INT 2
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: PUSH
30635: LD_INT 2
30637: PUSH
30638: LD_INT 3
30640: PUSH
30641: EMPTY
30642: LIST
30643: LIST
30644: PUSH
30645: LD_INT 2
30647: NEG
30648: PUSH
30649: LD_INT 1
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: PUSH
30656: LD_INT 3
30658: NEG
30659: PUSH
30660: LD_INT 1
30662: NEG
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: EMPTY
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: LIST
30676: LIST
30677: LIST
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: LIST
30683: LIST
30684: LIST
30685: LIST
30686: LIST
30687: LIST
30688: LIST
30689: LIST
30690: LIST
30691: LIST
30692: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
30693: LD_ADDR_VAR 0 35
30697: PUSH
30698: LD_INT 0
30700: PUSH
30701: LD_INT 0
30703: PUSH
30704: EMPTY
30705: LIST
30706: LIST
30707: PUSH
30708: LD_INT 0
30710: PUSH
30711: LD_INT 1
30713: NEG
30714: PUSH
30715: EMPTY
30716: LIST
30717: LIST
30718: PUSH
30719: LD_INT 1
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 0
30741: PUSH
30742: LD_INT 1
30744: PUSH
30745: EMPTY
30746: LIST
30747: LIST
30748: PUSH
30749: LD_INT 1
30751: NEG
30752: PUSH
30753: LD_INT 0
30755: PUSH
30756: EMPTY
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 1
30762: NEG
30763: PUSH
30764: LD_INT 1
30766: NEG
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 2
30774: PUSH
30775: LD_INT 1
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 2
30784: NEG
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: LIST
30798: LIST
30799: LIST
30800: LIST
30801: LIST
30802: LIST
30803: LIST
30804: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30805: LD_ADDR_VAR 0 36
30809: PUSH
30810: LD_INT 0
30812: PUSH
30813: LD_INT 0
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 0
30822: PUSH
30823: LD_INT 1
30825: NEG
30826: PUSH
30827: EMPTY
30828: LIST
30829: LIST
30830: PUSH
30831: LD_INT 1
30833: PUSH
30834: LD_INT 0
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: PUSH
30841: LD_INT 1
30843: PUSH
30844: LD_INT 1
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: PUSH
30851: LD_INT 0
30853: PUSH
30854: LD_INT 1
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: PUSH
30861: LD_INT 1
30863: NEG
30864: PUSH
30865: LD_INT 0
30867: PUSH
30868: EMPTY
30869: LIST
30870: LIST
30871: PUSH
30872: LD_INT 1
30874: NEG
30875: PUSH
30876: LD_INT 1
30878: NEG
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 1
30886: NEG
30887: PUSH
30888: LD_INT 2
30890: NEG
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: PUSH
30896: LD_INT 1
30898: PUSH
30899: LD_INT 2
30901: PUSH
30902: EMPTY
30903: LIST
30904: LIST
30905: PUSH
30906: EMPTY
30907: LIST
30908: LIST
30909: LIST
30910: LIST
30911: LIST
30912: LIST
30913: LIST
30914: LIST
30915: LIST
30916: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30917: LD_ADDR_VAR 0 37
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: LD_INT 0
30927: PUSH
30928: EMPTY
30929: LIST
30930: LIST
30931: PUSH
30932: LD_INT 0
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: EMPTY
30940: LIST
30941: LIST
30942: PUSH
30943: LD_INT 1
30945: PUSH
30946: LD_INT 0
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 1
30955: PUSH
30956: LD_INT 1
30958: PUSH
30959: EMPTY
30960: LIST
30961: LIST
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: LD_INT 1
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: LD_INT 0
30979: PUSH
30980: EMPTY
30981: LIST
30982: LIST
30983: PUSH
30984: LD_INT 1
30986: NEG
30987: PUSH
30988: LD_INT 1
30990: NEG
30991: PUSH
30992: EMPTY
30993: LIST
30994: LIST
30995: PUSH
30996: LD_INT 1
30998: PUSH
30999: LD_INT 1
31001: NEG
31002: PUSH
31003: EMPTY
31004: LIST
31005: LIST
31006: PUSH
31007: LD_INT 1
31009: NEG
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: EMPTY
31015: LIST
31016: LIST
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: LIST
31026: LIST
31027: LIST
31028: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31029: LD_ADDR_VAR 0 38
31033: PUSH
31034: LD_INT 0
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: EMPTY
31041: LIST
31042: LIST
31043: PUSH
31044: LD_INT 0
31046: PUSH
31047: LD_INT 1
31049: NEG
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PUSH
31055: LD_INT 1
31057: PUSH
31058: LD_INT 0
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 1
31067: PUSH
31068: LD_INT 1
31070: PUSH
31071: EMPTY
31072: LIST
31073: LIST
31074: PUSH
31075: LD_INT 0
31077: PUSH
31078: LD_INT 1
31080: PUSH
31081: EMPTY
31082: LIST
31083: LIST
31084: PUSH
31085: LD_INT 1
31087: NEG
31088: PUSH
31089: LD_INT 0
31091: PUSH
31092: EMPTY
31093: LIST
31094: LIST
31095: PUSH
31096: LD_INT 1
31098: NEG
31099: PUSH
31100: LD_INT 1
31102: NEG
31103: PUSH
31104: EMPTY
31105: LIST
31106: LIST
31107: PUSH
31108: LD_INT 2
31110: PUSH
31111: LD_INT 1
31113: PUSH
31114: EMPTY
31115: LIST
31116: LIST
31117: PUSH
31118: LD_INT 2
31120: NEG
31121: PUSH
31122: LD_INT 1
31124: NEG
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31141: LD_ADDR_VAR 0 39
31145: PUSH
31146: LD_INT 0
31148: PUSH
31149: LD_INT 0
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 0
31158: PUSH
31159: LD_INT 1
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 1
31169: PUSH
31170: LD_INT 0
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: PUSH
31180: LD_INT 1
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 0
31189: PUSH
31190: LD_INT 1
31192: PUSH
31193: EMPTY
31194: LIST
31195: LIST
31196: PUSH
31197: LD_INT 1
31199: NEG
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: LD_INT 1
31210: NEG
31211: PUSH
31212: LD_INT 1
31214: NEG
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 1
31222: NEG
31223: PUSH
31224: LD_INT 2
31226: NEG
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 1
31234: PUSH
31235: LD_INT 2
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31253: LD_ADDR_VAR 0 40
31257: PUSH
31258: LD_INT 0
31260: PUSH
31261: LD_INT 0
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PUSH
31268: LD_INT 0
31270: PUSH
31271: LD_INT 1
31273: NEG
31274: PUSH
31275: EMPTY
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: LD_INT 0
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: PUSH
31289: LD_INT 1
31291: PUSH
31292: LD_INT 1
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: PUSH
31299: LD_INT 0
31301: PUSH
31302: LD_INT 1
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 1
31311: NEG
31312: PUSH
31313: LD_INT 0
31315: PUSH
31316: EMPTY
31317: LIST
31318: LIST
31319: PUSH
31320: LD_INT 1
31322: NEG
31323: PUSH
31324: LD_INT 1
31326: NEG
31327: PUSH
31328: EMPTY
31329: LIST
31330: LIST
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: LD_INT 1
31337: NEG
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 1
31345: NEG
31346: PUSH
31347: LD_INT 1
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: EMPTY
31355: LIST
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31365: LD_ADDR_VAR 0 41
31369: PUSH
31370: LD_INT 0
31372: PUSH
31373: LD_INT 0
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 0
31382: PUSH
31383: LD_INT 1
31385: NEG
31386: PUSH
31387: EMPTY
31388: LIST
31389: LIST
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: LD_INT 0
31396: PUSH
31397: EMPTY
31398: LIST
31399: LIST
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: LD_INT 1
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PUSH
31411: LD_INT 0
31413: PUSH
31414: LD_INT 1
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: PUSH
31421: LD_INT 1
31423: NEG
31424: PUSH
31425: LD_INT 0
31427: PUSH
31428: EMPTY
31429: LIST
31430: LIST
31431: PUSH
31432: LD_INT 1
31434: NEG
31435: PUSH
31436: LD_INT 1
31438: NEG
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PUSH
31444: LD_INT 1
31446: NEG
31447: PUSH
31448: LD_INT 2
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: PUSH
31459: LD_INT 1
31461: NEG
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: LD_INT 2
31469: PUSH
31470: LD_INT 0
31472: PUSH
31473: EMPTY
31474: LIST
31475: LIST
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: LD_INT 1
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: LD_INT 2
31492: PUSH
31493: EMPTY
31494: LIST
31495: LIST
31496: PUSH
31497: LD_INT 1
31499: PUSH
31500: LD_INT 2
31502: PUSH
31503: EMPTY
31504: LIST
31505: LIST
31506: PUSH
31507: LD_INT 1
31509: NEG
31510: PUSH
31511: LD_INT 1
31513: PUSH
31514: EMPTY
31515: LIST
31516: LIST
31517: PUSH
31518: LD_INT 2
31520: NEG
31521: PUSH
31522: LD_INT 0
31524: PUSH
31525: EMPTY
31526: LIST
31527: LIST
31528: PUSH
31529: LD_INT 2
31531: NEG
31532: PUSH
31533: LD_INT 1
31535: NEG
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: LD_INT 2
31543: NEG
31544: PUSH
31545: LD_INT 2
31547: NEG
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PUSH
31553: LD_INT 2
31555: NEG
31556: PUSH
31557: LD_INT 3
31559: NEG
31560: PUSH
31561: EMPTY
31562: LIST
31563: LIST
31564: PUSH
31565: LD_INT 2
31567: PUSH
31568: LD_INT 1
31570: NEG
31571: PUSH
31572: EMPTY
31573: LIST
31574: LIST
31575: PUSH
31576: LD_INT 3
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 3
31588: PUSH
31589: LD_INT 1
31591: PUSH
31592: EMPTY
31593: LIST
31594: LIST
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: LD_INT 2
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: LD_INT 3
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 2
31618: PUSH
31619: LD_INT 3
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 2
31628: NEG
31629: PUSH
31630: LD_INT 1
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 3
31639: NEG
31640: PUSH
31641: LD_INT 0
31643: PUSH
31644: EMPTY
31645: LIST
31646: LIST
31647: PUSH
31648: LD_INT 3
31650: NEG
31651: PUSH
31652: LD_INT 1
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 3
31662: NEG
31663: PUSH
31664: LD_INT 2
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 3
31674: NEG
31675: PUSH
31676: LD_INT 3
31678: NEG
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PUSH
31684: EMPTY
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: LIST
31708: LIST
31709: LIST
31710: LIST
31711: LIST
31712: LIST
31713: LIST
31714: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31715: LD_ADDR_VAR 0 42
31719: PUSH
31720: LD_INT 0
31722: PUSH
31723: LD_INT 0
31725: PUSH
31726: EMPTY
31727: LIST
31728: LIST
31729: PUSH
31730: LD_INT 0
31732: PUSH
31733: LD_INT 1
31735: NEG
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: LD_INT 0
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: LD_INT 1
31756: PUSH
31757: EMPTY
31758: LIST
31759: LIST
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: LD_INT 1
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: PUSH
31771: LD_INT 1
31773: NEG
31774: PUSH
31775: LD_INT 0
31777: PUSH
31778: EMPTY
31779: LIST
31780: LIST
31781: PUSH
31782: LD_INT 1
31784: NEG
31785: PUSH
31786: LD_INT 1
31788: NEG
31789: PUSH
31790: EMPTY
31791: LIST
31792: LIST
31793: PUSH
31794: LD_INT 1
31796: NEG
31797: PUSH
31798: LD_INT 2
31800: NEG
31801: PUSH
31802: EMPTY
31803: LIST
31804: LIST
31805: PUSH
31806: LD_INT 0
31808: PUSH
31809: LD_INT 2
31811: NEG
31812: PUSH
31813: EMPTY
31814: LIST
31815: LIST
31816: PUSH
31817: LD_INT 1
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: EMPTY
31825: LIST
31826: LIST
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: EMPTY
31835: LIST
31836: LIST
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: LD_INT 2
31843: PUSH
31844: EMPTY
31845: LIST
31846: LIST
31847: PUSH
31848: LD_INT 1
31850: PUSH
31851: LD_INT 2
31853: PUSH
31854: EMPTY
31855: LIST
31856: LIST
31857: PUSH
31858: LD_INT 0
31860: PUSH
31861: LD_INT 2
31863: PUSH
31864: EMPTY
31865: LIST
31866: LIST
31867: PUSH
31868: LD_INT 1
31870: NEG
31871: PUSH
31872: LD_INT 1
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 2
31881: NEG
31882: PUSH
31883: LD_INT 1
31885: NEG
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PUSH
31891: LD_INT 2
31893: NEG
31894: PUSH
31895: LD_INT 2
31897: NEG
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: PUSH
31903: LD_INT 2
31905: NEG
31906: PUSH
31907: LD_INT 3
31909: NEG
31910: PUSH
31911: EMPTY
31912: LIST
31913: LIST
31914: PUSH
31915: LD_INT 1
31917: NEG
31918: PUSH
31919: LD_INT 3
31921: NEG
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: PUSH
31927: LD_INT 0
31929: PUSH
31930: LD_INT 3
31932: NEG
31933: PUSH
31934: EMPTY
31935: LIST
31936: LIST
31937: PUSH
31938: LD_INT 1
31940: PUSH
31941: LD_INT 2
31943: NEG
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: LD_INT 2
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: LD_INT 3
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: PUSH
31969: LD_INT 2
31971: PUSH
31972: LD_INT 3
31974: PUSH
31975: EMPTY
31976: LIST
31977: LIST
31978: PUSH
31979: LD_INT 1
31981: PUSH
31982: LD_INT 3
31984: PUSH
31985: EMPTY
31986: LIST
31987: LIST
31988: PUSH
31989: LD_INT 0
31991: PUSH
31992: LD_INT 3
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 1
32001: NEG
32002: PUSH
32003: LD_INT 2
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 3
32012: NEG
32013: PUSH
32014: LD_INT 2
32016: NEG
32017: PUSH
32018: EMPTY
32019: LIST
32020: LIST
32021: PUSH
32022: LD_INT 3
32024: NEG
32025: PUSH
32026: LD_INT 3
32028: NEG
32029: PUSH
32030: EMPTY
32031: LIST
32032: LIST
32033: PUSH
32034: EMPTY
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32065: LD_ADDR_VAR 0 43
32069: PUSH
32070: LD_INT 0
32072: PUSH
32073: LD_INT 0
32075: PUSH
32076: EMPTY
32077: LIST
32078: LIST
32079: PUSH
32080: LD_INT 0
32082: PUSH
32083: LD_INT 1
32085: NEG
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: LD_INT 0
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: LD_INT 1
32106: PUSH
32107: EMPTY
32108: LIST
32109: LIST
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 1
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 1
32123: NEG
32124: PUSH
32125: LD_INT 0
32127: PUSH
32128: EMPTY
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 1
32134: NEG
32135: PUSH
32136: LD_INT 1
32138: NEG
32139: PUSH
32140: EMPTY
32141: LIST
32142: LIST
32143: PUSH
32144: LD_INT 1
32146: NEG
32147: PUSH
32148: LD_INT 2
32150: NEG
32151: PUSH
32152: EMPTY
32153: LIST
32154: LIST
32155: PUSH
32156: LD_INT 0
32158: PUSH
32159: LD_INT 2
32161: NEG
32162: PUSH
32163: EMPTY
32164: LIST
32165: LIST
32166: PUSH
32167: LD_INT 1
32169: PUSH
32170: LD_INT 1
32172: NEG
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: PUSH
32178: LD_INT 2
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: EMPTY
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: LD_INT 1
32193: PUSH
32194: EMPTY
32195: LIST
32196: LIST
32197: PUSH
32198: LD_INT 1
32200: PUSH
32201: LD_INT 2
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: PUSH
32208: LD_INT 0
32210: PUSH
32211: LD_INT 2
32213: PUSH
32214: EMPTY
32215: LIST
32216: LIST
32217: PUSH
32218: LD_INT 1
32220: NEG
32221: PUSH
32222: LD_INT 1
32224: PUSH
32225: EMPTY
32226: LIST
32227: LIST
32228: PUSH
32229: LD_INT 2
32231: NEG
32232: PUSH
32233: LD_INT 0
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 2
32242: NEG
32243: PUSH
32244: LD_INT 1
32246: NEG
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: LD_INT 3
32258: NEG
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 0
32266: PUSH
32267: LD_INT 3
32269: NEG
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: PUSH
32275: LD_INT 1
32277: PUSH
32278: LD_INT 2
32280: NEG
32281: PUSH
32282: EMPTY
32283: LIST
32284: LIST
32285: PUSH
32286: LD_INT 2
32288: PUSH
32289: LD_INT 1
32291: NEG
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 3
32299: PUSH
32300: LD_INT 0
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: LD_INT 1
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: PUSH
32320: LD_INT 3
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 0
32329: PUSH
32330: LD_INT 3
32332: PUSH
32333: EMPTY
32334: LIST
32335: LIST
32336: PUSH
32337: LD_INT 1
32339: NEG
32340: PUSH
32341: LD_INT 2
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 2
32350: NEG
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 3
32361: NEG
32362: PUSH
32363: LD_INT 0
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 3
32372: NEG
32373: PUSH
32374: LD_INT 1
32376: NEG
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: EMPTY
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: LIST
32400: LIST
32401: LIST
32402: LIST
32403: LIST
32404: LIST
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32413: LD_ADDR_VAR 0 44
32417: PUSH
32418: LD_INT 0
32420: PUSH
32421: LD_INT 0
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 0
32430: PUSH
32431: LD_INT 1
32433: NEG
32434: PUSH
32435: EMPTY
32436: LIST
32437: LIST
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: LD_INT 0
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: LD_INT 1
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 0
32461: PUSH
32462: LD_INT 1
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 0
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: NEG
32483: PUSH
32484: LD_INT 1
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 1
32494: NEG
32495: PUSH
32496: LD_INT 2
32498: NEG
32499: PUSH
32500: EMPTY
32501: LIST
32502: LIST
32503: PUSH
32504: LD_INT 1
32506: PUSH
32507: LD_INT 1
32509: NEG
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: LD_INT 0
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: PUSH
32528: LD_INT 1
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PUSH
32535: LD_INT 2
32537: PUSH
32538: LD_INT 2
32540: PUSH
32541: EMPTY
32542: LIST
32543: LIST
32544: PUSH
32545: LD_INT 1
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: EMPTY
32552: LIST
32553: LIST
32554: PUSH
32555: LD_INT 1
32557: NEG
32558: PUSH
32559: LD_INT 1
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 2
32568: NEG
32569: PUSH
32570: LD_INT 0
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 2
32579: NEG
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: EMPTY
32586: LIST
32587: LIST
32588: PUSH
32589: LD_INT 2
32591: NEG
32592: PUSH
32593: LD_INT 2
32595: NEG
32596: PUSH
32597: EMPTY
32598: LIST
32599: LIST
32600: PUSH
32601: LD_INT 2
32603: NEG
32604: PUSH
32605: LD_INT 3
32607: NEG
32608: PUSH
32609: EMPTY
32610: LIST
32611: LIST
32612: PUSH
32613: LD_INT 2
32615: PUSH
32616: LD_INT 1
32618: NEG
32619: PUSH
32620: EMPTY
32621: LIST
32622: LIST
32623: PUSH
32624: LD_INT 3
32626: PUSH
32627: LD_INT 0
32629: PUSH
32630: EMPTY
32631: LIST
32632: LIST
32633: PUSH
32634: LD_INT 3
32636: PUSH
32637: LD_INT 1
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: LD_INT 3
32646: PUSH
32647: LD_INT 2
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: PUSH
32654: LD_INT 3
32656: PUSH
32657: LD_INT 3
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: LD_INT 3
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 2
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: PUSH
32685: LD_INT 3
32687: NEG
32688: PUSH
32689: LD_INT 0
32691: PUSH
32692: EMPTY
32693: LIST
32694: LIST
32695: PUSH
32696: LD_INT 3
32698: NEG
32699: PUSH
32700: LD_INT 1
32702: NEG
32703: PUSH
32704: EMPTY
32705: LIST
32706: LIST
32707: PUSH
32708: LD_INT 3
32710: NEG
32711: PUSH
32712: LD_INT 2
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 3
32722: NEG
32723: PUSH
32724: LD_INT 3
32726: NEG
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: EMPTY
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: LIST
32750: LIST
32751: LIST
32752: LIST
32753: LIST
32754: LIST
32755: LIST
32756: LIST
32757: LIST
32758: LIST
32759: LIST
32760: LIST
32761: LIST
32762: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32763: LD_ADDR_VAR 0 45
32767: PUSH
32768: LD_INT 0
32770: PUSH
32771: LD_INT 0
32773: PUSH
32774: EMPTY
32775: LIST
32776: LIST
32777: PUSH
32778: LD_INT 0
32780: PUSH
32781: LD_INT 1
32783: NEG
32784: PUSH
32785: EMPTY
32786: LIST
32787: LIST
32788: PUSH
32789: LD_INT 1
32791: PUSH
32792: LD_INT 0
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 1
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 1
32821: NEG
32822: PUSH
32823: LD_INT 0
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: NEG
32833: PUSH
32834: LD_INT 1
32836: NEG
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 1
32844: NEG
32845: PUSH
32846: LD_INT 2
32848: NEG
32849: PUSH
32850: EMPTY
32851: LIST
32852: LIST
32853: PUSH
32854: LD_INT 0
32856: PUSH
32857: LD_INT 2
32859: NEG
32860: PUSH
32861: EMPTY
32862: LIST
32863: LIST
32864: PUSH
32865: LD_INT 1
32867: PUSH
32868: LD_INT 1
32870: NEG
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 2
32878: PUSH
32879: LD_INT 1
32881: PUSH
32882: EMPTY
32883: LIST
32884: LIST
32885: PUSH
32886: LD_INT 2
32888: PUSH
32889: LD_INT 2
32891: PUSH
32892: EMPTY
32893: LIST
32894: LIST
32895: PUSH
32896: LD_INT 1
32898: PUSH
32899: LD_INT 2
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 0
32908: PUSH
32909: LD_INT 2
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: LD_INT 1
32918: NEG
32919: PUSH
32920: LD_INT 1
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 2
32929: NEG
32930: PUSH
32931: LD_INT 1
32933: NEG
32934: PUSH
32935: EMPTY
32936: LIST
32937: LIST
32938: PUSH
32939: LD_INT 2
32941: NEG
32942: PUSH
32943: LD_INT 2
32945: NEG
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 2
32953: NEG
32954: PUSH
32955: LD_INT 3
32957: NEG
32958: PUSH
32959: EMPTY
32960: LIST
32961: LIST
32962: PUSH
32963: LD_INT 1
32965: NEG
32966: PUSH
32967: LD_INT 3
32969: NEG
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: LD_INT 3
32980: NEG
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: LD_INT 1
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: EMPTY
32994: LIST
32995: LIST
32996: PUSH
32997: LD_INT 3
32999: PUSH
33000: LD_INT 2
33002: PUSH
33003: EMPTY
33004: LIST
33005: LIST
33006: PUSH
33007: LD_INT 3
33009: PUSH
33010: LD_INT 3
33012: PUSH
33013: EMPTY
33014: LIST
33015: LIST
33016: PUSH
33017: LD_INT 2
33019: PUSH
33020: LD_INT 3
33022: PUSH
33023: EMPTY
33024: LIST
33025: LIST
33026: PUSH
33027: LD_INT 1
33029: PUSH
33030: LD_INT 3
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 3
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: LD_INT 1
33049: NEG
33050: PUSH
33051: LD_INT 2
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 3
33060: NEG
33061: PUSH
33062: LD_INT 2
33064: NEG
33065: PUSH
33066: EMPTY
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 3
33072: NEG
33073: PUSH
33074: LD_INT 3
33076: NEG
33077: PUSH
33078: EMPTY
33079: LIST
33080: LIST
33081: PUSH
33082: EMPTY
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33113: LD_ADDR_VAR 0 46
33117: PUSH
33118: LD_INT 0
33120: PUSH
33121: LD_INT 0
33123: PUSH
33124: EMPTY
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 0
33130: PUSH
33131: LD_INT 1
33133: NEG
33134: PUSH
33135: EMPTY
33136: LIST
33137: LIST
33138: PUSH
33139: LD_INT 1
33141: PUSH
33142: LD_INT 0
33144: PUSH
33145: EMPTY
33146: LIST
33147: LIST
33148: PUSH
33149: LD_INT 1
33151: PUSH
33152: LD_INT 1
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 0
33161: PUSH
33162: LD_INT 1
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 1
33171: NEG
33172: PUSH
33173: LD_INT 0
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 1
33182: NEG
33183: PUSH
33184: LD_INT 1
33186: NEG
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 1
33194: NEG
33195: PUSH
33196: LD_INT 2
33198: NEG
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: PUSH
33204: LD_INT 0
33206: PUSH
33207: LD_INT 2
33209: NEG
33210: PUSH
33211: EMPTY
33212: LIST
33213: LIST
33214: PUSH
33215: LD_INT 1
33217: PUSH
33218: LD_INT 1
33220: NEG
33221: PUSH
33222: EMPTY
33223: LIST
33224: LIST
33225: PUSH
33226: LD_INT 2
33228: PUSH
33229: LD_INT 0
33231: PUSH
33232: EMPTY
33233: LIST
33234: LIST
33235: PUSH
33236: LD_INT 2
33238: PUSH
33239: LD_INT 1
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 1
33248: PUSH
33249: LD_INT 2
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: LD_INT 2
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: PUSH
33266: LD_INT 1
33268: NEG
33269: PUSH
33270: LD_INT 1
33272: PUSH
33273: EMPTY
33274: LIST
33275: LIST
33276: PUSH
33277: LD_INT 2
33279: NEG
33280: PUSH
33281: LD_INT 0
33283: PUSH
33284: EMPTY
33285: LIST
33286: LIST
33287: PUSH
33288: LD_INT 2
33290: NEG
33291: PUSH
33292: LD_INT 1
33294: NEG
33295: PUSH
33296: EMPTY
33297: LIST
33298: LIST
33299: PUSH
33300: LD_INT 1
33302: NEG
33303: PUSH
33304: LD_INT 3
33306: NEG
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 0
33314: PUSH
33315: LD_INT 3
33317: NEG
33318: PUSH
33319: EMPTY
33320: LIST
33321: LIST
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: LD_INT 2
33328: NEG
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: PUSH
33334: LD_INT 2
33336: PUSH
33337: LD_INT 1
33339: NEG
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 3
33347: PUSH
33348: LD_INT 0
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 3
33357: PUSH
33358: LD_INT 1
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: PUSH
33368: LD_INT 3
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 3
33380: PUSH
33381: EMPTY
33382: LIST
33383: LIST
33384: PUSH
33385: LD_INT 1
33387: NEG
33388: PUSH
33389: LD_INT 2
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 2
33398: NEG
33399: PUSH
33400: LD_INT 1
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 3
33409: NEG
33410: PUSH
33411: LD_INT 0
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 3
33420: NEG
33421: PUSH
33422: LD_INT 1
33424: NEG
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: LIST
33448: LIST
33449: LIST
33450: LIST
33451: LIST
33452: LIST
33453: LIST
33454: LIST
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33461: LD_ADDR_VAR 0 47
33465: PUSH
33466: LD_INT 0
33468: PUSH
33469: LD_INT 0
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 0
33478: PUSH
33479: LD_INT 1
33481: NEG
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 1
33489: PUSH
33490: LD_INT 0
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: LD_INT 1
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: LD_INT 1
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: LD_INT 0
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: NEG
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: NEG
33543: PUSH
33544: LD_INT 2
33546: NEG
33547: PUSH
33548: EMPTY
33549: LIST
33550: LIST
33551: PUSH
33552: LD_INT 0
33554: PUSH
33555: LD_INT 2
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: LD_INT 1
33568: NEG
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: NEG
33581: PUSH
33582: EMPTY
33583: LIST
33584: LIST
33585: PUSH
33586: LD_INT 2
33588: NEG
33589: PUSH
33590: LD_INT 2
33592: NEG
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: EMPTY
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: LIST
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: LIST
33611: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
33612: LD_ADDR_VAR 0 48
33616: PUSH
33617: LD_INT 0
33619: PUSH
33620: LD_INT 0
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 0
33629: PUSH
33630: LD_INT 1
33632: NEG
33633: PUSH
33634: EMPTY
33635: LIST
33636: LIST
33637: PUSH
33638: LD_INT 1
33640: PUSH
33641: LD_INT 0
33643: PUSH
33644: EMPTY
33645: LIST
33646: LIST
33647: PUSH
33648: LD_INT 1
33650: PUSH
33651: LD_INT 1
33653: PUSH
33654: EMPTY
33655: LIST
33656: LIST
33657: PUSH
33658: LD_INT 0
33660: PUSH
33661: LD_INT 1
33663: PUSH
33664: EMPTY
33665: LIST
33666: LIST
33667: PUSH
33668: LD_INT 1
33670: NEG
33671: PUSH
33672: LD_INT 0
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: PUSH
33679: LD_INT 1
33681: NEG
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: NEG
33694: PUSH
33695: LD_INT 2
33697: NEG
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: PUSH
33703: LD_INT 0
33705: PUSH
33706: LD_INT 2
33708: NEG
33709: PUSH
33710: EMPTY
33711: LIST
33712: LIST
33713: PUSH
33714: LD_INT 1
33716: PUSH
33717: LD_INT 1
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 2
33727: PUSH
33728: LD_INT 0
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: PUSH
33735: LD_INT 2
33737: PUSH
33738: LD_INT 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: LIST
33758: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
33759: LD_ADDR_VAR 0 49
33763: PUSH
33764: LD_INT 0
33766: PUSH
33767: LD_INT 0
33769: PUSH
33770: EMPTY
33771: LIST
33772: LIST
33773: PUSH
33774: LD_INT 0
33776: PUSH
33777: LD_INT 1
33779: NEG
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: PUSH
33785: LD_INT 1
33787: PUSH
33788: LD_INT 0
33790: PUSH
33791: EMPTY
33792: LIST
33793: LIST
33794: PUSH
33795: LD_INT 1
33797: PUSH
33798: LD_INT 1
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: PUSH
33805: LD_INT 0
33807: PUSH
33808: LD_INT 1
33810: PUSH
33811: EMPTY
33812: LIST
33813: LIST
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: LD_INT 0
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: LD_INT 1
33832: NEG
33833: PUSH
33834: EMPTY
33835: LIST
33836: LIST
33837: PUSH
33838: LD_INT 1
33840: PUSH
33841: LD_INT 1
33843: NEG
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: PUSH
33849: LD_INT 2
33851: PUSH
33852: LD_INT 0
33854: PUSH
33855: EMPTY
33856: LIST
33857: LIST
33858: PUSH
33859: LD_INT 2
33861: PUSH
33862: LD_INT 1
33864: PUSH
33865: EMPTY
33866: LIST
33867: LIST
33868: PUSH
33869: LD_INT 2
33871: PUSH
33872: LD_INT 2
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 1
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: PUSH
33889: EMPTY
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
33903: LD_ADDR_VAR 0 50
33907: PUSH
33908: LD_INT 0
33910: PUSH
33911: LD_INT 0
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: LD_INT 1
33923: NEG
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 1
33931: PUSH
33932: LD_INT 0
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 1
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 0
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: EMPTY
33956: LIST
33957: LIST
33958: PUSH
33959: LD_INT 1
33961: NEG
33962: PUSH
33963: LD_INT 0
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 1
33972: NEG
33973: PUSH
33974: LD_INT 1
33976: NEG
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 2
33984: PUSH
33985: LD_INT 1
33987: PUSH
33988: EMPTY
33989: LIST
33990: LIST
33991: PUSH
33992: LD_INT 2
33994: PUSH
33995: LD_INT 2
33997: PUSH
33998: EMPTY
33999: LIST
34000: LIST
34001: PUSH
34002: LD_INT 1
34004: PUSH
34005: LD_INT 2
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: LD_INT 2
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 1
34024: NEG
34025: PUSH
34026: LD_INT 1
34028: PUSH
34029: EMPTY
34030: LIST
34031: LIST
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34047: LD_ADDR_VAR 0 51
34051: PUSH
34052: LD_INT 0
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: EMPTY
34059: LIST
34060: LIST
34061: PUSH
34062: LD_INT 0
34064: PUSH
34065: LD_INT 1
34067: NEG
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: EMPTY
34080: LIST
34081: LIST
34082: PUSH
34083: LD_INT 1
34085: PUSH
34086: LD_INT 1
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: PUSH
34093: LD_INT 0
34095: PUSH
34096: LD_INT 1
34098: PUSH
34099: EMPTY
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 1
34105: NEG
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: EMPTY
34111: LIST
34112: LIST
34113: PUSH
34114: LD_INT 1
34116: NEG
34117: PUSH
34118: LD_INT 1
34120: NEG
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: PUSH
34126: LD_INT 1
34128: PUSH
34129: LD_INT 2
34131: PUSH
34132: EMPTY
34133: LIST
34134: LIST
34135: PUSH
34136: LD_INT 0
34138: PUSH
34139: LD_INT 2
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 1
34148: NEG
34149: PUSH
34150: LD_INT 1
34152: PUSH
34153: EMPTY
34154: LIST
34155: LIST
34156: PUSH
34157: LD_INT 2
34159: NEG
34160: PUSH
34161: LD_INT 0
34163: PUSH
34164: EMPTY
34165: LIST
34166: LIST
34167: PUSH
34168: LD_INT 2
34170: NEG
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34194: LD_ADDR_VAR 0 52
34198: PUSH
34199: LD_INT 0
34201: PUSH
34202: LD_INT 0
34204: PUSH
34205: EMPTY
34206: LIST
34207: LIST
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 1
34214: NEG
34215: PUSH
34216: EMPTY
34217: LIST
34218: LIST
34219: PUSH
34220: LD_INT 1
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 1
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 1
34252: NEG
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: PUSH
34261: LD_INT 1
34263: NEG
34264: PUSH
34265: LD_INT 1
34267: NEG
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_INT 1
34275: NEG
34276: PUSH
34277: LD_INT 2
34279: NEG
34280: PUSH
34281: EMPTY
34282: LIST
34283: LIST
34284: PUSH
34285: LD_INT 1
34287: NEG
34288: PUSH
34289: LD_INT 1
34291: PUSH
34292: EMPTY
34293: LIST
34294: LIST
34295: PUSH
34296: LD_INT 2
34298: NEG
34299: PUSH
34300: LD_INT 0
34302: PUSH
34303: EMPTY
34304: LIST
34305: LIST
34306: PUSH
34307: LD_INT 2
34309: NEG
34310: PUSH
34311: LD_INT 1
34313: NEG
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 2
34321: NEG
34322: PUSH
34323: LD_INT 2
34325: NEG
34326: PUSH
34327: EMPTY
34328: LIST
34329: LIST
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34345: LD_ADDR_VAR 0 53
34349: PUSH
34350: LD_INT 0
34352: PUSH
34353: LD_INT 0
34355: PUSH
34356: EMPTY
34357: LIST
34358: LIST
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: LD_INT 1
34365: NEG
34366: PUSH
34367: EMPTY
34368: LIST
34369: LIST
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: LD_INT 0
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 1
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 0
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 1
34403: NEG
34404: PUSH
34405: LD_INT 0
34407: PUSH
34408: EMPTY
34409: LIST
34410: LIST
34411: PUSH
34412: LD_INT 1
34414: NEG
34415: PUSH
34416: LD_INT 1
34418: NEG
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: PUSH
34424: LD_INT 1
34426: NEG
34427: PUSH
34428: LD_INT 2
34430: NEG
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 0
34438: PUSH
34439: LD_INT 2
34441: NEG
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PUSH
34447: LD_INT 1
34449: PUSH
34450: LD_INT 1
34452: NEG
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 2
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: EMPTY
34475: LIST
34476: LIST
34477: PUSH
34478: LD_INT 2
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 1
34490: PUSH
34491: LD_INT 2
34493: PUSH
34494: EMPTY
34495: LIST
34496: LIST
34497: PUSH
34498: LD_INT 0
34500: PUSH
34501: LD_INT 2
34503: PUSH
34504: EMPTY
34505: LIST
34506: LIST
34507: PUSH
34508: LD_INT 1
34510: NEG
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 2
34521: NEG
34522: PUSH
34523: LD_INT 0
34525: PUSH
34526: EMPTY
34527: LIST
34528: LIST
34529: PUSH
34530: LD_INT 2
34532: NEG
34533: PUSH
34534: LD_INT 1
34536: NEG
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 2
34544: NEG
34545: PUSH
34546: LD_INT 2
34548: NEG
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: EMPTY
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34575: LD_ADDR_VAR 0 54
34579: PUSH
34580: LD_INT 0
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 0
34592: PUSH
34593: LD_INT 1
34595: NEG
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: EMPTY
34608: LIST
34609: LIST
34610: PUSH
34611: LD_INT 1
34613: PUSH
34614: LD_INT 1
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 0
34623: PUSH
34624: LD_INT 1
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 1
34648: NEG
34649: PUSH
34650: EMPTY
34651: LIST
34652: LIST
34653: PUSH
34654: LD_INT 1
34656: NEG
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 0
34668: PUSH
34669: LD_INT 2
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 1
34682: NEG
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 2
34690: PUSH
34691: LD_INT 0
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 2
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 2
34710: PUSH
34711: LD_INT 2
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 1
34720: PUSH
34721: LD_INT 2
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 0
34730: PUSH
34731: LD_INT 2
34733: PUSH
34734: EMPTY
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 1
34740: NEG
34741: PUSH
34742: LD_INT 1
34744: PUSH
34745: EMPTY
34746: LIST
34747: LIST
34748: PUSH
34749: LD_INT 2
34751: NEG
34752: PUSH
34753: LD_INT 0
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: PUSH
34760: LD_INT 2
34762: NEG
34763: PUSH
34764: LD_INT 1
34766: NEG
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: LD_INT 2
34778: NEG
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34805: LD_ADDR_VAR 0 55
34809: PUSH
34810: LD_INT 0
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 0
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: LD_INT 0
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 1
34843: PUSH
34844: LD_INT 1
34846: PUSH
34847: EMPTY
34848: LIST
34849: LIST
34850: PUSH
34851: LD_INT 0
34853: PUSH
34854: LD_INT 1
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 1
34874: NEG
34875: PUSH
34876: LD_INT 1
34878: NEG
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: NEG
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 2
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: PUSH
34910: LD_INT 1
34912: NEG
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: PUSH
34918: LD_INT 2
34920: PUSH
34921: LD_INT 0
34923: PUSH
34924: EMPTY
34925: LIST
34926: LIST
34927: PUSH
34928: LD_INT 2
34930: PUSH
34931: LD_INT 1
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 2
34940: PUSH
34941: LD_INT 2
34943: PUSH
34944: EMPTY
34945: LIST
34946: LIST
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: EMPTY
34955: LIST
34956: LIST
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 2
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 1
34970: NEG
34971: PUSH
34972: LD_INT 1
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 0
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: PUSH
34990: LD_INT 2
34992: NEG
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: EMPTY
34999: LIST
35000: LIST
35001: PUSH
35002: LD_INT 2
35004: NEG
35005: PUSH
35006: LD_INT 2
35008: NEG
35009: PUSH
35010: EMPTY
35011: LIST
35012: LIST
35013: PUSH
35014: EMPTY
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35035: LD_ADDR_VAR 0 56
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 0
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 0
35052: PUSH
35053: LD_INT 1
35055: NEG
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 1
35063: PUSH
35064: LD_INT 0
35066: PUSH
35067: EMPTY
35068: LIST
35069: LIST
35070: PUSH
35071: LD_INT 1
35073: PUSH
35074: LD_INT 1
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 0
35083: PUSH
35084: LD_INT 1
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: LD_INT 0
35097: PUSH
35098: EMPTY
35099: LIST
35100: LIST
35101: PUSH
35102: LD_INT 1
35104: NEG
35105: PUSH
35106: LD_INT 1
35108: NEG
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 1
35116: NEG
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 0
35128: PUSH
35129: LD_INT 2
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 1
35139: PUSH
35140: LD_INT 1
35142: NEG
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: PUSH
35148: LD_INT 2
35150: PUSH
35151: LD_INT 0
35153: PUSH
35154: EMPTY
35155: LIST
35156: LIST
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: LD_INT 1
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 2
35170: PUSH
35171: LD_INT 2
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 2
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 1
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: LD_INT 0
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 2
35222: NEG
35223: PUSH
35224: LD_INT 1
35226: NEG
35227: PUSH
35228: EMPTY
35229: LIST
35230: LIST
35231: PUSH
35232: LD_INT 2
35234: NEG
35235: PUSH
35236: LD_INT 2
35238: NEG
35239: PUSH
35240: EMPTY
35241: LIST
35242: LIST
35243: PUSH
35244: EMPTY
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35265: LD_ADDR_VAR 0 57
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 0
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 0
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 1
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 1
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 0
35313: PUSH
35314: LD_INT 1
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 0
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: LD_INT 1
35334: NEG
35335: PUSH
35336: LD_INT 1
35338: NEG
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 1
35346: NEG
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: LD_INT 2
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 1
35369: PUSH
35370: LD_INT 1
35372: NEG
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: EMPTY
35385: LIST
35386: LIST
35387: PUSH
35388: LD_INT 2
35390: PUSH
35391: LD_INT 1
35393: PUSH
35394: EMPTY
35395: LIST
35396: LIST
35397: PUSH
35398: LD_INT 2
35400: PUSH
35401: LD_INT 2
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: LD_INT 1
35410: PUSH
35411: LD_INT 2
35413: PUSH
35414: EMPTY
35415: LIST
35416: LIST
35417: PUSH
35418: LD_INT 0
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 1
35430: NEG
35431: PUSH
35432: LD_INT 1
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: EMPTY
35447: LIST
35448: LIST
35449: PUSH
35450: LD_INT 2
35452: NEG
35453: PUSH
35454: LD_INT 1
35456: NEG
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 2
35464: NEG
35465: PUSH
35466: LD_INT 2
35468: NEG
35469: PUSH
35470: EMPTY
35471: LIST
35472: LIST
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: LIST
35491: LIST
35492: LIST
35493: LIST
35494: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35495: LD_ADDR_VAR 0 58
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: LD_INT 0
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 0
35512: PUSH
35513: LD_INT 1
35515: NEG
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 1
35523: PUSH
35524: LD_INT 0
35526: PUSH
35527: EMPTY
35528: LIST
35529: LIST
35530: PUSH
35531: LD_INT 1
35533: PUSH
35534: LD_INT 1
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 0
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: NEG
35554: PUSH
35555: LD_INT 0
35557: PUSH
35558: EMPTY
35559: LIST
35560: LIST
35561: PUSH
35562: LD_INT 1
35564: NEG
35565: PUSH
35566: LD_INT 1
35568: NEG
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: LD_INT 1
35576: NEG
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 0
35588: PUSH
35589: LD_INT 2
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: PUSH
35600: LD_INT 1
35602: NEG
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 2
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: EMPTY
35615: LIST
35616: LIST
35617: PUSH
35618: LD_INT 2
35620: PUSH
35621: LD_INT 1
35623: PUSH
35624: EMPTY
35625: LIST
35626: LIST
35627: PUSH
35628: LD_INT 2
35630: PUSH
35631: LD_INT 2
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: PUSH
35638: LD_INT 1
35640: PUSH
35641: LD_INT 2
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 2
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 1
35660: NEG
35661: PUSH
35662: LD_INT 1
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: NEG
35672: PUSH
35673: LD_INT 0
35675: PUSH
35676: EMPTY
35677: LIST
35678: LIST
35679: PUSH
35680: LD_INT 2
35682: NEG
35683: PUSH
35684: LD_INT 1
35686: NEG
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 2
35694: NEG
35695: PUSH
35696: LD_INT 2
35698: NEG
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: LIST
35715: LIST
35716: LIST
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35725: LD_ADDR_VAR 0 59
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 0
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 0
35742: PUSH
35743: LD_INT 1
35745: NEG
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 1
35753: PUSH
35754: LD_INT 0
35756: PUSH
35757: EMPTY
35758: LIST
35759: LIST
35760: PUSH
35761: LD_INT 1
35763: PUSH
35764: LD_INT 1
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 0
35773: PUSH
35774: LD_INT 1
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 0
35787: PUSH
35788: EMPTY
35789: LIST
35790: LIST
35791: PUSH
35792: LD_INT 1
35794: NEG
35795: PUSH
35796: LD_INT 1
35798: NEG
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: LIST
35812: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35813: LD_ADDR_VAR 0 60
35817: PUSH
35818: LD_INT 0
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 0
35830: PUSH
35831: LD_INT 1
35833: NEG
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 1
35841: PUSH
35842: LD_INT 0
35844: PUSH
35845: EMPTY
35846: LIST
35847: LIST
35848: PUSH
35849: LD_INT 1
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 0
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: PUSH
35869: LD_INT 1
35871: NEG
35872: PUSH
35873: LD_INT 0
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: PUSH
35880: LD_INT 1
35882: NEG
35883: PUSH
35884: LD_INT 1
35886: NEG
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: LIST
35899: LIST
35900: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35901: LD_ADDR_VAR 0 61
35905: PUSH
35906: LD_INT 0
35908: PUSH
35909: LD_INT 0
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 0
35918: PUSH
35919: LD_INT 1
35921: NEG
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: PUSH
35927: LD_INT 1
35929: PUSH
35930: LD_INT 0
35932: PUSH
35933: EMPTY
35934: LIST
35935: LIST
35936: PUSH
35937: LD_INT 1
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 0
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 1
35959: NEG
35960: PUSH
35961: LD_INT 0
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: LD_INT 1
35974: NEG
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: EMPTY
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35989: LD_ADDR_VAR 0 62
35993: PUSH
35994: LD_INT 0
35996: PUSH
35997: LD_INT 0
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: LD_INT 1
36009: NEG
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 1
36017: PUSH
36018: LD_INT 0
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: LD_INT 1
36027: PUSH
36028: LD_INT 1
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 1
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 1
36047: NEG
36048: PUSH
36049: LD_INT 0
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 1
36062: NEG
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36077: LD_ADDR_VAR 0 63
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 0
36094: PUSH
36095: LD_INT 1
36097: NEG
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: PUSH
36106: LD_INT 0
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 1
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 0
36125: PUSH
36126: LD_INT 1
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: LD_INT 0
36139: PUSH
36140: EMPTY
36141: LIST
36142: LIST
36143: PUSH
36144: LD_INT 1
36146: NEG
36147: PUSH
36148: LD_INT 1
36150: NEG
36151: PUSH
36152: EMPTY
36153: LIST
36154: LIST
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36165: LD_ADDR_VAR 0 64
36169: PUSH
36170: LD_INT 0
36172: PUSH
36173: LD_INT 0
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 0
36182: PUSH
36183: LD_INT 1
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 1
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 1
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 0
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PUSH
36221: LD_INT 1
36223: NEG
36224: PUSH
36225: LD_INT 0
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: PUSH
36232: LD_INT 1
36234: NEG
36235: PUSH
36236: LD_INT 1
36238: NEG
36239: PUSH
36240: EMPTY
36241: LIST
36242: LIST
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: ST_TO_ADDR
// end ; 1 :
36253: GO 42150
36255: LD_INT 1
36257: DOUBLE
36258: EQUAL
36259: IFTRUE 36263
36261: GO 38886
36263: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36264: LD_ADDR_VAR 0 11
36268: PUSH
36269: LD_INT 1
36271: NEG
36272: PUSH
36273: LD_INT 3
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: LD_INT 3
36286: NEG
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 2
36297: NEG
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: LIST
36307: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36308: LD_ADDR_VAR 0 12
36312: PUSH
36313: LD_INT 2
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 3
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 3
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: EMPTY
36345: LIST
36346: LIST
36347: LIST
36348: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36349: LD_ADDR_VAR 0 13
36353: PUSH
36354: LD_INT 3
36356: PUSH
36357: LD_INT 2
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 3
36366: PUSH
36367: LD_INT 3
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 2
36376: PUSH
36377: LD_INT 3
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36389: LD_ADDR_VAR 0 14
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: LD_INT 3
36399: PUSH
36400: EMPTY
36401: LIST
36402: LIST
36403: PUSH
36404: LD_INT 0
36406: PUSH
36407: LD_INT 3
36409: PUSH
36410: EMPTY
36411: LIST
36412: LIST
36413: PUSH
36414: LD_INT 1
36416: NEG
36417: PUSH
36418: LD_INT 2
36420: PUSH
36421: EMPTY
36422: LIST
36423: LIST
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: LIST
36429: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36430: LD_ADDR_VAR 0 15
36434: PUSH
36435: LD_INT 2
36437: NEG
36438: PUSH
36439: LD_INT 1
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 3
36448: NEG
36449: PUSH
36450: LD_INT 0
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: LD_INT 3
36459: NEG
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: LIST
36473: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36474: LD_ADDR_VAR 0 16
36478: PUSH
36479: LD_INT 2
36481: NEG
36482: PUSH
36483: LD_INT 3
36485: NEG
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 3
36493: NEG
36494: PUSH
36495: LD_INT 2
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 3
36505: NEG
36506: PUSH
36507: LD_INT 3
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: EMPTY
36516: LIST
36517: LIST
36518: LIST
36519: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36520: LD_ADDR_VAR 0 17
36524: PUSH
36525: LD_INT 1
36527: NEG
36528: PUSH
36529: LD_INT 3
36531: NEG
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 0
36539: PUSH
36540: LD_INT 3
36542: NEG
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 1
36550: PUSH
36551: LD_INT 2
36553: NEG
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: EMPTY
36560: LIST
36561: LIST
36562: LIST
36563: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36564: LD_ADDR_VAR 0 18
36568: PUSH
36569: LD_INT 2
36571: PUSH
36572: LD_INT 1
36574: NEG
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: PUSH
36580: LD_INT 3
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 3
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36605: LD_ADDR_VAR 0 19
36609: PUSH
36610: LD_INT 3
36612: PUSH
36613: LD_INT 2
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: LD_INT 3
36622: PUSH
36623: LD_INT 3
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 2
36632: PUSH
36633: LD_INT 3
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: LIST
36644: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36645: LD_ADDR_VAR 0 20
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: LD_INT 3
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: LD_INT 3
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: LD_INT 2
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: LIST
36685: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36686: LD_ADDR_VAR 0 21
36690: PUSH
36691: LD_INT 2
36693: NEG
36694: PUSH
36695: LD_INT 1
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: PUSH
36702: LD_INT 3
36704: NEG
36705: PUSH
36706: LD_INT 0
36708: PUSH
36709: EMPTY
36710: LIST
36711: LIST
36712: PUSH
36713: LD_INT 3
36715: NEG
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: EMPTY
36722: LIST
36723: LIST
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: LIST
36729: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36730: LD_ADDR_VAR 0 22
36734: PUSH
36735: LD_INT 2
36737: NEG
36738: PUSH
36739: LD_INT 3
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 3
36749: NEG
36750: PUSH
36751: LD_INT 2
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 3
36761: NEG
36762: PUSH
36763: LD_INT 3
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
36776: LD_ADDR_VAR 0 23
36780: PUSH
36781: LD_INT 0
36783: PUSH
36784: LD_INT 3
36786: NEG
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: LD_INT 1
36794: NEG
36795: PUSH
36796: LD_INT 4
36798: NEG
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: PUSH
36804: LD_INT 1
36806: PUSH
36807: LD_INT 3
36809: NEG
36810: PUSH
36811: EMPTY
36812: LIST
36813: LIST
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: LIST
36819: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
36820: LD_ADDR_VAR 0 24
36824: PUSH
36825: LD_INT 3
36827: PUSH
36828: LD_INT 0
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 3
36837: PUSH
36838: LD_INT 1
36840: NEG
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 4
36848: PUSH
36849: LD_INT 1
36851: PUSH
36852: EMPTY
36853: LIST
36854: LIST
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: LIST
36860: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
36861: LD_ADDR_VAR 0 25
36865: PUSH
36866: LD_INT 3
36868: PUSH
36869: LD_INT 3
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 4
36878: PUSH
36879: LD_INT 3
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 3
36888: PUSH
36889: LD_INT 4
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: LIST
36900: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
36901: LD_ADDR_VAR 0 26
36905: PUSH
36906: LD_INT 0
36908: PUSH
36909: LD_INT 3
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 1
36918: PUSH
36919: LD_INT 4
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 1
36928: NEG
36929: PUSH
36930: LD_INT 3
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PUSH
36937: EMPTY
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
36942: LD_ADDR_VAR 0 27
36946: PUSH
36947: LD_INT 3
36949: NEG
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: LD_INT 3
36960: NEG
36961: PUSH
36962: LD_INT 1
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 4
36971: NEG
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: LIST
36985: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
36986: LD_ADDR_VAR 0 28
36990: PUSH
36991: LD_INT 3
36993: NEG
36994: PUSH
36995: LD_INT 3
36997: NEG
36998: PUSH
36999: EMPTY
37000: LIST
37001: LIST
37002: PUSH
37003: LD_INT 3
37005: NEG
37006: PUSH
37007: LD_INT 4
37009: NEG
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: PUSH
37015: LD_INT 4
37017: NEG
37018: PUSH
37019: LD_INT 3
37021: NEG
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37032: LD_ADDR_VAR 0 29
37036: PUSH
37037: LD_INT 1
37039: NEG
37040: PUSH
37041: LD_INT 3
37043: NEG
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 0
37051: PUSH
37052: LD_INT 3
37054: NEG
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: LD_INT 2
37065: NEG
37066: PUSH
37067: EMPTY
37068: LIST
37069: LIST
37070: PUSH
37071: LD_INT 1
37073: NEG
37074: PUSH
37075: LD_INT 4
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 0
37085: PUSH
37086: LD_INT 4
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: LD_INT 1
37096: PUSH
37097: LD_INT 3
37099: NEG
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 1
37107: NEG
37108: PUSH
37109: LD_INT 5
37111: NEG
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 5
37122: NEG
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 1
37130: PUSH
37131: LD_INT 4
37133: NEG
37134: PUSH
37135: EMPTY
37136: LIST
37137: LIST
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: LD_INT 6
37145: NEG
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: LD_INT 6
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: LD_INT 5
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37187: LD_ADDR_VAR 0 30
37191: PUSH
37192: LD_INT 2
37194: PUSH
37195: LD_INT 1
37197: NEG
37198: PUSH
37199: EMPTY
37200: LIST
37201: LIST
37202: PUSH
37203: LD_INT 3
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: EMPTY
37210: LIST
37211: LIST
37212: PUSH
37213: LD_INT 3
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: LD_INT 3
37225: PUSH
37226: LD_INT 1
37228: NEG
37229: PUSH
37230: EMPTY
37231: LIST
37232: LIST
37233: PUSH
37234: LD_INT 4
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 4
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 4
37256: PUSH
37257: LD_INT 1
37259: NEG
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 5
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: EMPTY
37272: LIST
37273: LIST
37274: PUSH
37275: LD_INT 5
37277: PUSH
37278: LD_INT 1
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 5
37287: PUSH
37288: LD_INT 1
37290: NEG
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: LD_INT 6
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 6
37308: PUSH
37309: LD_INT 1
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: LIST
37328: LIST
37329: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37330: LD_ADDR_VAR 0 31
37334: PUSH
37335: LD_INT 3
37337: PUSH
37338: LD_INT 2
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: LD_INT 3
37347: PUSH
37348: LD_INT 3
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: PUSH
37355: LD_INT 2
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 4
37367: PUSH
37368: LD_INT 3
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 4
37377: PUSH
37378: LD_INT 4
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 3
37387: PUSH
37388: LD_INT 4
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 5
37397: PUSH
37398: LD_INT 4
37400: PUSH
37401: EMPTY
37402: LIST
37403: LIST
37404: PUSH
37405: LD_INT 5
37407: PUSH
37408: LD_INT 5
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 4
37417: PUSH
37418: LD_INT 5
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: PUSH
37425: LD_INT 6
37427: PUSH
37428: LD_INT 5
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 6
37437: PUSH
37438: LD_INT 6
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 5
37447: PUSH
37448: LD_INT 6
37450: PUSH
37451: EMPTY
37452: LIST
37453: LIST
37454: PUSH
37455: EMPTY
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37469: LD_ADDR_VAR 0 32
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: LD_INT 3
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 3
37489: PUSH
37490: EMPTY
37491: LIST
37492: LIST
37493: PUSH
37494: LD_INT 1
37496: NEG
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: EMPTY
37502: LIST
37503: LIST
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 4
37510: PUSH
37511: EMPTY
37512: LIST
37513: LIST
37514: PUSH
37515: LD_INT 0
37517: PUSH
37518: LD_INT 4
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: PUSH
37529: LD_INT 3
37531: PUSH
37532: EMPTY
37533: LIST
37534: LIST
37535: PUSH
37536: LD_INT 1
37538: PUSH
37539: LD_INT 5
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: LD_INT 5
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: LD_INT 1
37558: NEG
37559: PUSH
37560: LD_INT 4
37562: PUSH
37563: EMPTY
37564: LIST
37565: LIST
37566: PUSH
37567: LD_INT 1
37569: PUSH
37570: LD_INT 6
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 0
37579: PUSH
37580: LD_INT 6
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 1
37589: NEG
37590: PUSH
37591: LD_INT 5
37593: PUSH
37594: EMPTY
37595: LIST
37596: LIST
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
37612: LD_ADDR_VAR 0 33
37616: PUSH
37617: LD_INT 2
37619: NEG
37620: PUSH
37621: LD_INT 1
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 3
37630: NEG
37631: PUSH
37632: LD_INT 0
37634: PUSH
37635: EMPTY
37636: LIST
37637: LIST
37638: PUSH
37639: LD_INT 3
37641: NEG
37642: PUSH
37643: LD_INT 1
37645: NEG
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 3
37653: NEG
37654: PUSH
37655: LD_INT 1
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 4
37664: NEG
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 4
37675: NEG
37676: PUSH
37677: LD_INT 1
37679: NEG
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 4
37687: NEG
37688: PUSH
37689: LD_INT 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 5
37698: NEG
37699: PUSH
37700: LD_INT 0
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 5
37709: NEG
37710: PUSH
37711: LD_INT 1
37713: NEG
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 5
37721: NEG
37722: PUSH
37723: LD_INT 1
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 6
37732: NEG
37733: PUSH
37734: LD_INT 0
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: PUSH
37741: LD_INT 6
37743: NEG
37744: PUSH
37745: LD_INT 1
37747: NEG
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
37767: LD_ADDR_VAR 0 34
37771: PUSH
37772: LD_INT 2
37774: NEG
37775: PUSH
37776: LD_INT 3
37778: NEG
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 3
37786: NEG
37787: PUSH
37788: LD_INT 2
37790: NEG
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 3
37798: NEG
37799: PUSH
37800: LD_INT 3
37802: NEG
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: PUSH
37808: LD_INT 3
37810: NEG
37811: PUSH
37812: LD_INT 4
37814: NEG
37815: PUSH
37816: EMPTY
37817: LIST
37818: LIST
37819: PUSH
37820: LD_INT 4
37822: NEG
37823: PUSH
37824: LD_INT 3
37826: NEG
37827: PUSH
37828: EMPTY
37829: LIST
37830: LIST
37831: PUSH
37832: LD_INT 4
37834: NEG
37835: PUSH
37836: LD_INT 4
37838: NEG
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 4
37846: NEG
37847: PUSH
37848: LD_INT 5
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 5
37858: NEG
37859: PUSH
37860: LD_INT 4
37862: NEG
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 5
37870: NEG
37871: PUSH
37872: LD_INT 5
37874: NEG
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 5
37882: NEG
37883: PUSH
37884: LD_INT 6
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 6
37894: NEG
37895: PUSH
37896: LD_INT 5
37898: NEG
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: LD_INT 6
37906: NEG
37907: PUSH
37908: LD_INT 6
37910: NEG
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
37930: LD_ADDR_VAR 0 41
37934: PUSH
37935: LD_INT 0
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 1
37948: NEG
37949: PUSH
37950: LD_INT 3
37952: NEG
37953: PUSH
37954: EMPTY
37955: LIST
37956: LIST
37957: PUSH
37958: LD_INT 1
37960: PUSH
37961: LD_INT 2
37963: NEG
37964: PUSH
37965: EMPTY
37966: LIST
37967: LIST
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: LIST
37973: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
37974: LD_ADDR_VAR 0 42
37978: PUSH
37979: LD_INT 2
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 2
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 3
38002: PUSH
38003: LD_INT 1
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: LIST
38014: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38015: LD_ADDR_VAR 0 43
38019: PUSH
38020: LD_INT 2
38022: PUSH
38023: LD_INT 2
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 3
38032: PUSH
38033: LD_INT 2
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: LIST
38054: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38055: LD_ADDR_VAR 0 44
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: LD_INT 2
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: LD_INT 3
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 1
38082: NEG
38083: PUSH
38084: LD_INT 2
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: LIST
38095: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38096: LD_ADDR_VAR 0 45
38100: PUSH
38101: LD_INT 2
38103: NEG
38104: PUSH
38105: LD_INT 0
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: PUSH
38112: LD_INT 2
38114: NEG
38115: PUSH
38116: LD_INT 1
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 3
38125: NEG
38126: PUSH
38127: LD_INT 1
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: EMPTY
38136: LIST
38137: LIST
38138: LIST
38139: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38140: LD_ADDR_VAR 0 46
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: LD_INT 2
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: NEG
38160: PUSH
38161: LD_INT 3
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 3
38171: NEG
38172: PUSH
38173: LD_INT 2
38175: NEG
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: EMPTY
38182: LIST
38183: LIST
38184: LIST
38185: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38186: LD_ADDR_VAR 0 47
38190: PUSH
38191: LD_INT 2
38193: NEG
38194: PUSH
38195: LD_INT 3
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: LD_INT 3
38209: NEG
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38219: LD_ADDR_VAR 0 48
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: LD_INT 2
38229: NEG
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38250: LD_ADDR_VAR 0 49
38254: PUSH
38255: LD_INT 3
38257: PUSH
38258: LD_INT 1
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 3
38267: PUSH
38268: LD_INT 2
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38279: LD_ADDR_VAR 0 50
38283: PUSH
38284: LD_INT 2
38286: PUSH
38287: LD_INT 3
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 3
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: EMPTY
38305: LIST
38306: LIST
38307: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38308: LD_ADDR_VAR 0 51
38312: PUSH
38313: LD_INT 1
38315: NEG
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 2
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38339: LD_ADDR_VAR 0 52
38343: PUSH
38344: LD_INT 3
38346: NEG
38347: PUSH
38348: LD_INT 1
38350: NEG
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 3
38358: NEG
38359: PUSH
38360: LD_INT 2
38362: NEG
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38372: LD_ADDR_VAR 0 53
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 3
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 0
38391: PUSH
38392: LD_INT 3
38394: NEG
38395: PUSH
38396: EMPTY
38397: LIST
38398: LIST
38399: PUSH
38400: LD_INT 1
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: EMPTY
38408: LIST
38409: LIST
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: LIST
38415: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38416: LD_ADDR_VAR 0 54
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 1
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: LD_INT 3
38444: PUSH
38445: LD_INT 1
38447: PUSH
38448: EMPTY
38449: LIST
38450: LIST
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: LIST
38456: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38457: LD_ADDR_VAR 0 55
38461: PUSH
38462: LD_INT 3
38464: PUSH
38465: LD_INT 2
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: PUSH
38472: LD_INT 3
38474: PUSH
38475: LD_INT 3
38477: PUSH
38478: EMPTY
38479: LIST
38480: LIST
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: LD_INT 3
38487: PUSH
38488: EMPTY
38489: LIST
38490: LIST
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38497: LD_ADDR_VAR 0 56
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: LD_INT 3
38507: PUSH
38508: EMPTY
38509: LIST
38510: LIST
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 3
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: NEG
38525: PUSH
38526: LD_INT 2
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: EMPTY
38534: LIST
38535: LIST
38536: LIST
38537: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38538: LD_ADDR_VAR 0 57
38542: PUSH
38543: LD_INT 2
38545: NEG
38546: PUSH
38547: LD_INT 1
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 3
38556: NEG
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 3
38567: NEG
38568: PUSH
38569: LD_INT 1
38571: NEG
38572: PUSH
38573: EMPTY
38574: LIST
38575: LIST
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: LIST
38581: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38582: LD_ADDR_VAR 0 58
38586: PUSH
38587: LD_INT 2
38589: NEG
38590: PUSH
38591: LD_INT 3
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 3
38601: NEG
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: EMPTY
38608: LIST
38609: LIST
38610: PUSH
38611: LD_INT 3
38613: NEG
38614: PUSH
38615: LD_INT 3
38617: NEG
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: LIST
38627: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
38628: LD_ADDR_VAR 0 59
38632: PUSH
38633: LD_INT 1
38635: NEG
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: EMPTY
38642: LIST
38643: LIST
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 1
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: EMPTY
38664: LIST
38665: LIST
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: LIST
38671: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38672: LD_ADDR_VAR 0 60
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 2
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: EMPTY
38709: LIST
38710: LIST
38711: LIST
38712: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38713: LD_ADDR_VAR 0 61
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: LD_INT 1
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 2
38730: PUSH
38731: LD_INT 2
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: PUSH
38738: LD_INT 1
38740: PUSH
38741: LD_INT 2
38743: PUSH
38744: EMPTY
38745: LIST
38746: LIST
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38753: LD_ADDR_VAR 0 62
38757: PUSH
38758: LD_INT 1
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: NEG
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: LIST
38793: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38794: LD_ADDR_VAR 0 63
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 2
38812: NEG
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: NEG
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38838: LD_ADDR_VAR 0 64
38842: PUSH
38843: LD_INT 1
38845: NEG
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: EMPTY
38852: LIST
38853: LIST
38854: PUSH
38855: LD_INT 2
38857: NEG
38858: PUSH
38859: LD_INT 1
38861: NEG
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 2
38869: NEG
38870: PUSH
38871: LD_INT 2
38873: NEG
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: LIST
38883: ST_TO_ADDR
// end ; 2 :
38884: GO 42150
38886: LD_INT 2
38888: DOUBLE
38889: EQUAL
38890: IFTRUE 38894
38892: GO 42149
38894: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
38895: LD_ADDR_VAR 0 29
38899: PUSH
38900: LD_INT 4
38902: PUSH
38903: LD_INT 0
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: LD_INT 4
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 5
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 5
38933: PUSH
38934: LD_INT 1
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: LD_INT 4
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 3
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 3
38963: PUSH
38964: LD_INT 1
38966: NEG
38967: PUSH
38968: EMPTY
38969: LIST
38970: LIST
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: LD_INT 2
38977: NEG
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 5
38985: PUSH
38986: LD_INT 2
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 3
38995: PUSH
38996: LD_INT 3
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 3
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 4
39015: PUSH
39016: LD_INT 3
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 4
39025: PUSH
39026: LD_INT 4
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 3
39035: PUSH
39036: LD_INT 4
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: LD_INT 3
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: LD_INT 2
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 4
39065: PUSH
39066: LD_INT 2
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: LD_INT 4
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 0
39085: PUSH
39086: LD_INT 4
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 0
39095: PUSH
39096: LD_INT 3
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 1
39105: PUSH
39106: LD_INT 4
39108: PUSH
39109: EMPTY
39110: LIST
39111: LIST
39112: PUSH
39113: LD_INT 1
39115: PUSH
39116: LD_INT 5
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 0
39125: PUSH
39126: LD_INT 5
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: LD_INT 4
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 1
39146: NEG
39147: PUSH
39148: LD_INT 3
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: LD_INT 5
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: LD_INT 3
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 3
39178: NEG
39179: PUSH
39180: LD_INT 0
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 3
39189: NEG
39190: PUSH
39191: LD_INT 1
39193: NEG
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 2
39201: NEG
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: LD_INT 1
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: PUSH
39221: LD_INT 3
39223: NEG
39224: PUSH
39225: LD_INT 1
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 4
39234: NEG
39235: PUSH
39236: LD_INT 0
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 4
39245: NEG
39246: PUSH
39247: LD_INT 1
39249: NEG
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 4
39257: NEG
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: EMPTY
39264: LIST
39265: LIST
39266: PUSH
39267: LD_INT 2
39269: NEG
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 4
39280: NEG
39281: PUSH
39282: LD_INT 4
39284: NEG
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: LD_INT 4
39292: NEG
39293: PUSH
39294: LD_INT 5
39296: NEG
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 3
39304: NEG
39305: PUSH
39306: LD_INT 4
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 3
39316: NEG
39317: PUSH
39318: LD_INT 3
39320: NEG
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: PUSH
39326: LD_INT 4
39328: NEG
39329: PUSH
39330: LD_INT 3
39332: NEG
39333: PUSH
39334: EMPTY
39335: LIST
39336: LIST
39337: PUSH
39338: LD_INT 5
39340: NEG
39341: PUSH
39342: LD_INT 4
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 5
39352: NEG
39353: PUSH
39354: LD_INT 5
39356: NEG
39357: PUSH
39358: EMPTY
39359: LIST
39360: LIST
39361: PUSH
39362: LD_INT 3
39364: NEG
39365: PUSH
39366: LD_INT 5
39368: NEG
39369: PUSH
39370: EMPTY
39371: LIST
39372: LIST
39373: PUSH
39374: LD_INT 5
39376: NEG
39377: PUSH
39378: LD_INT 3
39380: NEG
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39433: LD_ADDR_VAR 0 30
39437: PUSH
39438: LD_INT 4
39440: PUSH
39441: LD_INT 4
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 4
39450: PUSH
39451: LD_INT 3
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 5
39460: PUSH
39461: LD_INT 4
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 5
39470: PUSH
39471: LD_INT 5
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 4
39480: PUSH
39481: LD_INT 5
39483: PUSH
39484: EMPTY
39485: LIST
39486: LIST
39487: PUSH
39488: LD_INT 3
39490: PUSH
39491: LD_INT 4
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 3
39500: PUSH
39501: LD_INT 3
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 5
39510: PUSH
39511: LD_INT 3
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 3
39520: PUSH
39521: LD_INT 5
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: PUSH
39528: LD_INT 0
39530: PUSH
39531: LD_INT 3
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: LD_INT 2
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: LD_INT 3
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 1
39560: PUSH
39561: LD_INT 4
39563: PUSH
39564: EMPTY
39565: LIST
39566: LIST
39567: PUSH
39568: LD_INT 0
39570: PUSH
39571: LD_INT 4
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 3
39584: PUSH
39585: EMPTY
39586: LIST
39587: LIST
39588: PUSH
39589: LD_INT 1
39591: NEG
39592: PUSH
39593: LD_INT 2
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: PUSH
39603: LD_INT 4
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: LD_INT 2
39616: PUSH
39617: EMPTY
39618: LIST
39619: LIST
39620: PUSH
39621: LD_INT 4
39623: NEG
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 4
39634: NEG
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 3
39646: NEG
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 3
39657: NEG
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 4
39668: NEG
39669: PUSH
39670: LD_INT 1
39672: PUSH
39673: EMPTY
39674: LIST
39675: LIST
39676: PUSH
39677: LD_INT 5
39679: NEG
39680: PUSH
39681: LD_INT 0
39683: PUSH
39684: EMPTY
39685: LIST
39686: LIST
39687: PUSH
39688: LD_INT 5
39690: NEG
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 5
39702: NEG
39703: PUSH
39704: LD_INT 2
39706: NEG
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 3
39714: NEG
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 3
39725: NEG
39726: PUSH
39727: LD_INT 3
39729: NEG
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 3
39737: NEG
39738: PUSH
39739: LD_INT 4
39741: NEG
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 2
39749: NEG
39750: PUSH
39751: LD_INT 3
39753: NEG
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 2
39761: NEG
39762: PUSH
39763: LD_INT 2
39765: NEG
39766: PUSH
39767: EMPTY
39768: LIST
39769: LIST
39770: PUSH
39771: LD_INT 3
39773: NEG
39774: PUSH
39775: LD_INT 2
39777: NEG
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 4
39785: NEG
39786: PUSH
39787: LD_INT 3
39789: NEG
39790: PUSH
39791: EMPTY
39792: LIST
39793: LIST
39794: PUSH
39795: LD_INT 4
39797: NEG
39798: PUSH
39799: LD_INT 4
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 2
39809: NEG
39810: PUSH
39811: LD_INT 4
39813: NEG
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 4
39821: NEG
39822: PUSH
39823: LD_INT 2
39825: NEG
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 4
39836: NEG
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 0
39844: PUSH
39845: LD_INT 5
39847: NEG
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 1
39855: PUSH
39856: LD_INT 4
39858: NEG
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 1
39866: PUSH
39867: LD_INT 3
39869: NEG
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 3
39880: NEG
39881: PUSH
39882: EMPTY
39883: LIST
39884: LIST
39885: PUSH
39886: LD_INT 1
39888: NEG
39889: PUSH
39890: LD_INT 4
39892: NEG
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 1
39900: NEG
39901: PUSH
39902: LD_INT 5
39904: NEG
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 2
39912: PUSH
39913: LD_INT 3
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: LD_INT 5
39927: NEG
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
39980: LD_ADDR_VAR 0 31
39984: PUSH
39985: LD_INT 0
39987: PUSH
39988: LD_INT 4
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 0
39997: PUSH
39998: LD_INT 3
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 4
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 5
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 5
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 4
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 3
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 2
40059: PUSH
40060: LD_INT 5
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: LD_INT 3
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 3
40080: NEG
40081: PUSH
40082: LD_INT 0
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 3
40091: NEG
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: NEG
40104: PUSH
40105: LD_INT 0
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 2
40114: NEG
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 3
40125: NEG
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 4
40136: NEG
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 4
40147: NEG
40148: PUSH
40149: LD_INT 1
40151: NEG
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 4
40159: NEG
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: NEG
40172: PUSH
40173: LD_INT 2
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: LD_INT 4
40182: NEG
40183: PUSH
40184: LD_INT 4
40186: NEG
40187: PUSH
40188: EMPTY
40189: LIST
40190: LIST
40191: PUSH
40192: LD_INT 4
40194: NEG
40195: PUSH
40196: LD_INT 5
40198: NEG
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 3
40206: NEG
40207: PUSH
40208: LD_INT 4
40210: NEG
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 3
40218: NEG
40219: PUSH
40220: LD_INT 3
40222: NEG
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 4
40230: NEG
40231: PUSH
40232: LD_INT 3
40234: NEG
40235: PUSH
40236: EMPTY
40237: LIST
40238: LIST
40239: PUSH
40240: LD_INT 5
40242: NEG
40243: PUSH
40244: LD_INT 4
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 5
40254: NEG
40255: PUSH
40256: LD_INT 5
40258: NEG
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: LD_INT 3
40266: NEG
40267: PUSH
40268: LD_INT 5
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 5
40278: NEG
40279: PUSH
40280: LD_INT 3
40282: NEG
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 3
40293: NEG
40294: PUSH
40295: EMPTY
40296: LIST
40297: LIST
40298: PUSH
40299: LD_INT 0
40301: PUSH
40302: LD_INT 4
40304: NEG
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 1
40312: PUSH
40313: LD_INT 3
40315: NEG
40316: PUSH
40317: EMPTY
40318: LIST
40319: LIST
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: LD_INT 2
40326: NEG
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 2
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 3
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 1
40357: NEG
40358: PUSH
40359: LD_INT 4
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: PUSH
40370: LD_INT 2
40372: NEG
40373: PUSH
40374: EMPTY
40375: LIST
40376: LIST
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: LD_INT 4
40384: NEG
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 4
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 4
40402: PUSH
40403: LD_INT 1
40405: NEG
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 5
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 5
40423: PUSH
40424: LD_INT 1
40426: PUSH
40427: EMPTY
40428: LIST
40429: LIST
40430: PUSH
40431: LD_INT 4
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 3
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 3
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 3
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 5
40475: PUSH
40476: LD_INT 2
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40530: LD_ADDR_VAR 0 32
40534: PUSH
40535: LD_INT 4
40537: NEG
40538: PUSH
40539: LD_INT 0
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 4
40548: NEG
40549: PUSH
40550: LD_INT 1
40552: NEG
40553: PUSH
40554: EMPTY
40555: LIST
40556: LIST
40557: PUSH
40558: LD_INT 3
40560: NEG
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 3
40571: NEG
40572: PUSH
40573: LD_INT 1
40575: PUSH
40576: EMPTY
40577: LIST
40578: LIST
40579: PUSH
40580: LD_INT 4
40582: NEG
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 5
40593: NEG
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 5
40604: NEG
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 5
40616: NEG
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 3
40628: NEG
40629: PUSH
40630: LD_INT 2
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 3
40639: NEG
40640: PUSH
40641: LD_INT 3
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: LD_INT 4
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 2
40663: NEG
40664: PUSH
40665: LD_INT 3
40667: NEG
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 2
40675: NEG
40676: PUSH
40677: LD_INT 2
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 3
40687: NEG
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 4
40699: NEG
40700: PUSH
40701: LD_INT 3
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 4
40711: NEG
40712: PUSH
40713: LD_INT 4
40715: NEG
40716: PUSH
40717: EMPTY
40718: LIST
40719: LIST
40720: PUSH
40721: LD_INT 2
40723: NEG
40724: PUSH
40725: LD_INT 4
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 4
40735: NEG
40736: PUSH
40737: LD_INT 2
40739: NEG
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: LD_INT 4
40750: NEG
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: LD_INT 5
40761: NEG
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 4
40772: NEG
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: PUSH
40781: LD_INT 3
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: LD_INT 0
40791: PUSH
40792: LD_INT 3
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: LD_INT 1
40802: NEG
40803: PUSH
40804: LD_INT 4
40806: NEG
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 1
40814: NEG
40815: PUSH
40816: LD_INT 5
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 3
40829: NEG
40830: PUSH
40831: EMPTY
40832: LIST
40833: LIST
40834: PUSH
40835: LD_INT 2
40837: NEG
40838: PUSH
40839: LD_INT 5
40841: NEG
40842: PUSH
40843: EMPTY
40844: LIST
40845: LIST
40846: PUSH
40847: LD_INT 3
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 3
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 4
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 4
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 3
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 2
40900: PUSH
40901: LD_INT 0
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: LD_INT 1
40913: NEG
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: LD_INT 2
40921: PUSH
40922: LD_INT 2
40924: NEG
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 4
40932: PUSH
40933: LD_INT 2
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 4
40942: PUSH
40943: LD_INT 4
40945: PUSH
40946: EMPTY
40947: LIST
40948: LIST
40949: PUSH
40950: LD_INT 4
40952: PUSH
40953: LD_INT 3
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 5
40962: PUSH
40963: LD_INT 4
40965: PUSH
40966: EMPTY
40967: LIST
40968: LIST
40969: PUSH
40970: LD_INT 5
40972: PUSH
40973: LD_INT 5
40975: PUSH
40976: EMPTY
40977: LIST
40978: LIST
40979: PUSH
40980: LD_INT 4
40982: PUSH
40983: LD_INT 5
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 3
40992: PUSH
40993: LD_INT 4
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 3
41002: PUSH
41003: LD_INT 3
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 5
41012: PUSH
41013: LD_INT 3
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 3
41022: PUSH
41023: LD_INT 5
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41077: LD_ADDR_VAR 0 33
41081: PUSH
41082: LD_INT 4
41084: NEG
41085: PUSH
41086: LD_INT 4
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 4
41096: NEG
41097: PUSH
41098: LD_INT 5
41100: NEG
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 3
41108: NEG
41109: PUSH
41110: LD_INT 4
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 3
41120: NEG
41121: PUSH
41122: LD_INT 3
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 4
41132: NEG
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 5
41144: NEG
41145: PUSH
41146: LD_INT 4
41148: NEG
41149: PUSH
41150: EMPTY
41151: LIST
41152: LIST
41153: PUSH
41154: LD_INT 5
41156: NEG
41157: PUSH
41158: LD_INT 5
41160: NEG
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 3
41168: NEG
41169: PUSH
41170: LD_INT 5
41172: NEG
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 5
41180: NEG
41181: PUSH
41182: LD_INT 3
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 0
41192: PUSH
41193: LD_INT 3
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 0
41203: PUSH
41204: LD_INT 4
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: PUSH
41215: LD_INT 3
41217: NEG
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 1
41225: PUSH
41226: LD_INT 2
41228: NEG
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 0
41236: PUSH
41237: LD_INT 2
41239: NEG
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 3
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: LD_INT 4
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 2
41282: NEG
41283: PUSH
41284: LD_INT 4
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 4
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 4
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 5
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 5
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 4
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 3
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: LD_INT 3
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 3
41366: PUSH
41367: LD_INT 2
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 5
41377: PUSH
41378: LD_INT 2
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 3
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 3
41397: PUSH
41398: LD_INT 2
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: LD_INT 4
41407: PUSH
41408: LD_INT 3
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 4
41417: PUSH
41418: LD_INT 4
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 3
41427: PUSH
41428: LD_INT 4
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: PUSH
41438: LD_INT 3
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 2
41447: PUSH
41448: LD_INT 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 4
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: LD_INT 4
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 0
41477: PUSH
41478: LD_INT 4
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 0
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: PUSH
41498: LD_INT 4
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: LD_INT 5
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: LD_INT 5
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 4
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: LD_INT 1
41538: NEG
41539: PUSH
41540: LD_INT 3
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 2
41549: PUSH
41550: LD_INT 5
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 2
41559: NEG
41560: PUSH
41561: LD_INT 3
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
41615: LD_ADDR_VAR 0 34
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 4
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 0
41633: PUSH
41634: LD_INT 5
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 4
41647: NEG
41648: PUSH
41649: EMPTY
41650: LIST
41651: LIST
41652: PUSH
41653: LD_INT 1
41655: PUSH
41656: LD_INT 3
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 3
41669: NEG
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 1
41677: NEG
41678: PUSH
41679: LD_INT 4
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 5
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 2
41701: PUSH
41702: LD_INT 3
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: LD_INT 5
41716: NEG
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 3
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 3
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 4
41745: PUSH
41746: LD_INT 0
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 4
41755: PUSH
41756: LD_INT 1
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 3
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 2
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 2
41785: PUSH
41786: LD_INT 1
41788: NEG
41789: PUSH
41790: EMPTY
41791: LIST
41792: LIST
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: LD_INT 2
41799: NEG
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 4
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 4
41817: PUSH
41818: LD_INT 4
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 4
41827: PUSH
41828: LD_INT 3
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 5
41837: PUSH
41838: LD_INT 4
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 5
41847: PUSH
41848: LD_INT 5
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 4
41857: PUSH
41858: LD_INT 5
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: LD_INT 4
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: LD_INT 3
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 5
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: LD_INT 5
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 3
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 0
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: EMPTY
41922: LIST
41923: LIST
41924: PUSH
41925: LD_INT 1
41927: PUSH
41928: LD_INT 3
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 1
41937: PUSH
41938: LD_INT 4
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 4
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: NEG
41958: PUSH
41959: LD_INT 3
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 2
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 4
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: NEG
41990: PUSH
41991: LD_INT 2
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: LD_INT 4
42000: NEG
42001: PUSH
42002: LD_INT 0
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 4
42011: NEG
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 3
42023: NEG
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 3
42034: NEG
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 4
42045: NEG
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 5
42056: NEG
42057: PUSH
42058: LD_INT 0
42060: PUSH
42061: EMPTY
42062: LIST
42063: LIST
42064: PUSH
42065: LD_INT 5
42067: NEG
42068: PUSH
42069: LD_INT 1
42071: NEG
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 5
42079: NEG
42080: PUSH
42081: LD_INT 2
42083: NEG
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 3
42091: NEG
42092: PUSH
42093: LD_INT 2
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: ST_TO_ADDR
// end ; end ;
42147: GO 42150
42149: POP
// case btype of b_depot , b_warehouse :
42150: LD_VAR 0 1
42154: PUSH
42155: LD_INT 0
42157: DOUBLE
42158: EQUAL
42159: IFTRUE 42169
42161: LD_INT 1
42163: DOUBLE
42164: EQUAL
42165: IFTRUE 42169
42167: GO 42370
42169: POP
// case nation of nation_american :
42170: LD_VAR 0 5
42174: PUSH
42175: LD_INT 1
42177: DOUBLE
42178: EQUAL
42179: IFTRUE 42183
42181: GO 42239
42183: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42184: LD_ADDR_VAR 0 9
42188: PUSH
42189: LD_VAR 0 11
42193: PUSH
42194: LD_VAR 0 12
42198: PUSH
42199: LD_VAR 0 13
42203: PUSH
42204: LD_VAR 0 14
42208: PUSH
42209: LD_VAR 0 15
42213: PUSH
42214: LD_VAR 0 16
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: PUSH
42227: LD_VAR 0 4
42231: PUSH
42232: LD_INT 1
42234: PLUS
42235: ARRAY
42236: ST_TO_ADDR
42237: GO 42368
42239: LD_INT 2
42241: DOUBLE
42242: EQUAL
42243: IFTRUE 42247
42245: GO 42303
42247: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42248: LD_ADDR_VAR 0 9
42252: PUSH
42253: LD_VAR 0 17
42257: PUSH
42258: LD_VAR 0 18
42262: PUSH
42263: LD_VAR 0 19
42267: PUSH
42268: LD_VAR 0 20
42272: PUSH
42273: LD_VAR 0 21
42277: PUSH
42278: LD_VAR 0 22
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: LIST
42287: LIST
42288: LIST
42289: LIST
42290: PUSH
42291: LD_VAR 0 4
42295: PUSH
42296: LD_INT 1
42298: PLUS
42299: ARRAY
42300: ST_TO_ADDR
42301: GO 42368
42303: LD_INT 3
42305: DOUBLE
42306: EQUAL
42307: IFTRUE 42311
42309: GO 42367
42311: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42312: LD_ADDR_VAR 0 9
42316: PUSH
42317: LD_VAR 0 23
42321: PUSH
42322: LD_VAR 0 24
42326: PUSH
42327: LD_VAR 0 25
42331: PUSH
42332: LD_VAR 0 26
42336: PUSH
42337: LD_VAR 0 27
42341: PUSH
42342: LD_VAR 0 28
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: LIST
42351: LIST
42352: LIST
42353: LIST
42354: PUSH
42355: LD_VAR 0 4
42359: PUSH
42360: LD_INT 1
42362: PLUS
42363: ARRAY
42364: ST_TO_ADDR
42365: GO 42368
42367: POP
42368: GO 42923
42370: LD_INT 2
42372: DOUBLE
42373: EQUAL
42374: IFTRUE 42384
42376: LD_INT 3
42378: DOUBLE
42379: EQUAL
42380: IFTRUE 42384
42382: GO 42440
42384: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42385: LD_ADDR_VAR 0 9
42389: PUSH
42390: LD_VAR 0 29
42394: PUSH
42395: LD_VAR 0 30
42399: PUSH
42400: LD_VAR 0 31
42404: PUSH
42405: LD_VAR 0 32
42409: PUSH
42410: LD_VAR 0 33
42414: PUSH
42415: LD_VAR 0 34
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: LIST
42427: PUSH
42428: LD_VAR 0 4
42432: PUSH
42433: LD_INT 1
42435: PLUS
42436: ARRAY
42437: ST_TO_ADDR
42438: GO 42923
42440: LD_INT 16
42442: DOUBLE
42443: EQUAL
42444: IFTRUE 42502
42446: LD_INT 17
42448: DOUBLE
42449: EQUAL
42450: IFTRUE 42502
42452: LD_INT 18
42454: DOUBLE
42455: EQUAL
42456: IFTRUE 42502
42458: LD_INT 19
42460: DOUBLE
42461: EQUAL
42462: IFTRUE 42502
42464: LD_INT 22
42466: DOUBLE
42467: EQUAL
42468: IFTRUE 42502
42470: LD_INT 20
42472: DOUBLE
42473: EQUAL
42474: IFTRUE 42502
42476: LD_INT 21
42478: DOUBLE
42479: EQUAL
42480: IFTRUE 42502
42482: LD_INT 23
42484: DOUBLE
42485: EQUAL
42486: IFTRUE 42502
42488: LD_INT 24
42490: DOUBLE
42491: EQUAL
42492: IFTRUE 42502
42494: LD_INT 25
42496: DOUBLE
42497: EQUAL
42498: IFTRUE 42502
42500: GO 42558
42502: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42503: LD_ADDR_VAR 0 9
42507: PUSH
42508: LD_VAR 0 35
42512: PUSH
42513: LD_VAR 0 36
42517: PUSH
42518: LD_VAR 0 37
42522: PUSH
42523: LD_VAR 0 38
42527: PUSH
42528: LD_VAR 0 39
42532: PUSH
42533: LD_VAR 0 40
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: PUSH
42546: LD_VAR 0 4
42550: PUSH
42551: LD_INT 1
42553: PLUS
42554: ARRAY
42555: ST_TO_ADDR
42556: GO 42923
42558: LD_INT 6
42560: DOUBLE
42561: EQUAL
42562: IFTRUE 42614
42564: LD_INT 7
42566: DOUBLE
42567: EQUAL
42568: IFTRUE 42614
42570: LD_INT 8
42572: DOUBLE
42573: EQUAL
42574: IFTRUE 42614
42576: LD_INT 13
42578: DOUBLE
42579: EQUAL
42580: IFTRUE 42614
42582: LD_INT 12
42584: DOUBLE
42585: EQUAL
42586: IFTRUE 42614
42588: LD_INT 15
42590: DOUBLE
42591: EQUAL
42592: IFTRUE 42614
42594: LD_INT 11
42596: DOUBLE
42597: EQUAL
42598: IFTRUE 42614
42600: LD_INT 14
42602: DOUBLE
42603: EQUAL
42604: IFTRUE 42614
42606: LD_INT 10
42608: DOUBLE
42609: EQUAL
42610: IFTRUE 42614
42612: GO 42670
42614: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
42615: LD_ADDR_VAR 0 9
42619: PUSH
42620: LD_VAR 0 41
42624: PUSH
42625: LD_VAR 0 42
42629: PUSH
42630: LD_VAR 0 43
42634: PUSH
42635: LD_VAR 0 44
42639: PUSH
42640: LD_VAR 0 45
42644: PUSH
42645: LD_VAR 0 46
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: PUSH
42658: LD_VAR 0 4
42662: PUSH
42663: LD_INT 1
42665: PLUS
42666: ARRAY
42667: ST_TO_ADDR
42668: GO 42923
42670: LD_INT 36
42672: DOUBLE
42673: EQUAL
42674: IFTRUE 42678
42676: GO 42734
42678: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
42679: LD_ADDR_VAR 0 9
42683: PUSH
42684: LD_VAR 0 47
42688: PUSH
42689: LD_VAR 0 48
42693: PUSH
42694: LD_VAR 0 49
42698: PUSH
42699: LD_VAR 0 50
42703: PUSH
42704: LD_VAR 0 51
42708: PUSH
42709: LD_VAR 0 52
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: LIST
42718: LIST
42719: LIST
42720: LIST
42721: PUSH
42722: LD_VAR 0 4
42726: PUSH
42727: LD_INT 1
42729: PLUS
42730: ARRAY
42731: ST_TO_ADDR
42732: GO 42923
42734: LD_INT 4
42736: DOUBLE
42737: EQUAL
42738: IFTRUE 42760
42740: LD_INT 5
42742: DOUBLE
42743: EQUAL
42744: IFTRUE 42760
42746: LD_INT 34
42748: DOUBLE
42749: EQUAL
42750: IFTRUE 42760
42752: LD_INT 37
42754: DOUBLE
42755: EQUAL
42756: IFTRUE 42760
42758: GO 42816
42760: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
42761: LD_ADDR_VAR 0 9
42765: PUSH
42766: LD_VAR 0 53
42770: PUSH
42771: LD_VAR 0 54
42775: PUSH
42776: LD_VAR 0 55
42780: PUSH
42781: LD_VAR 0 56
42785: PUSH
42786: LD_VAR 0 57
42790: PUSH
42791: LD_VAR 0 58
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: PUSH
42804: LD_VAR 0 4
42808: PUSH
42809: LD_INT 1
42811: PLUS
42812: ARRAY
42813: ST_TO_ADDR
42814: GO 42923
42816: LD_INT 31
42818: DOUBLE
42819: EQUAL
42820: IFTRUE 42866
42822: LD_INT 32
42824: DOUBLE
42825: EQUAL
42826: IFTRUE 42866
42828: LD_INT 33
42830: DOUBLE
42831: EQUAL
42832: IFTRUE 42866
42834: LD_INT 27
42836: DOUBLE
42837: EQUAL
42838: IFTRUE 42866
42840: LD_INT 26
42842: DOUBLE
42843: EQUAL
42844: IFTRUE 42866
42846: LD_INT 28
42848: DOUBLE
42849: EQUAL
42850: IFTRUE 42866
42852: LD_INT 29
42854: DOUBLE
42855: EQUAL
42856: IFTRUE 42866
42858: LD_INT 30
42860: DOUBLE
42861: EQUAL
42862: IFTRUE 42866
42864: GO 42922
42866: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
42867: LD_ADDR_VAR 0 9
42871: PUSH
42872: LD_VAR 0 59
42876: PUSH
42877: LD_VAR 0 60
42881: PUSH
42882: LD_VAR 0 61
42886: PUSH
42887: LD_VAR 0 62
42891: PUSH
42892: LD_VAR 0 63
42896: PUSH
42897: LD_VAR 0 64
42901: PUSH
42902: EMPTY
42903: LIST
42904: LIST
42905: LIST
42906: LIST
42907: LIST
42908: LIST
42909: PUSH
42910: LD_VAR 0 4
42914: PUSH
42915: LD_INT 1
42917: PLUS
42918: ARRAY
42919: ST_TO_ADDR
42920: GO 42923
42922: POP
// temp_list2 = [ ] ;
42923: LD_ADDR_VAR 0 10
42927: PUSH
42928: EMPTY
42929: ST_TO_ADDR
// for i in temp_list do
42930: LD_ADDR_VAR 0 8
42934: PUSH
42935: LD_VAR 0 9
42939: PUSH
42940: FOR_IN
42941: IFFALSE 42993
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
42943: LD_ADDR_VAR 0 10
42947: PUSH
42948: LD_VAR 0 10
42952: PUSH
42953: LD_VAR 0 8
42957: PUSH
42958: LD_INT 1
42960: ARRAY
42961: PUSH
42962: LD_VAR 0 2
42966: PLUS
42967: PUSH
42968: LD_VAR 0 8
42972: PUSH
42973: LD_INT 2
42975: ARRAY
42976: PUSH
42977: LD_VAR 0 3
42981: PLUS
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: EMPTY
42988: LIST
42989: ADD
42990: ST_TO_ADDR
42991: GO 42940
42993: POP
42994: POP
// result = temp_list2 ;
42995: LD_ADDR_VAR 0 7
42999: PUSH
43000: LD_VAR 0 10
43004: ST_TO_ADDR
// end ;
43005: LD_VAR 0 7
43009: RET
// export function EnemyInRange ( unit , dist ) ; begin
43010: LD_INT 0
43012: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43013: LD_ADDR_VAR 0 3
43017: PUSH
43018: LD_VAR 0 1
43022: PPUSH
43023: CALL_OW 255
43027: PPUSH
43028: LD_VAR 0 1
43032: PPUSH
43033: CALL_OW 250
43037: PPUSH
43038: LD_VAR 0 1
43042: PPUSH
43043: CALL_OW 251
43047: PPUSH
43048: LD_VAR 0 2
43052: PPUSH
43053: CALL 16383 0 4
43057: PUSH
43058: LD_INT 4
43060: ARRAY
43061: ST_TO_ADDR
// end ;
43062: LD_VAR 0 3
43066: RET
// export function PlayerSeeMe ( unit ) ; begin
43067: LD_INT 0
43069: PPUSH
// result := See ( your_side , unit ) ;
43070: LD_ADDR_VAR 0 2
43074: PUSH
43075: LD_OWVAR 2
43079: PPUSH
43080: LD_VAR 0 1
43084: PPUSH
43085: CALL_OW 292
43089: ST_TO_ADDR
// end ;
43090: LD_VAR 0 2
43094: RET
// export function ReverseDir ( unit ) ; begin
43095: LD_INT 0
43097: PPUSH
// if not unit then
43098: LD_VAR 0 1
43102: NOT
43103: IFFALSE 43107
// exit ;
43105: GO 43130
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43107: LD_ADDR_VAR 0 2
43111: PUSH
43112: LD_VAR 0 1
43116: PPUSH
43117: CALL_OW 254
43121: PUSH
43122: LD_INT 3
43124: PLUS
43125: PUSH
43126: LD_INT 6
43128: MOD
43129: ST_TO_ADDR
// end ;
43130: LD_VAR 0 2
43134: RET
// export function ReverseArray ( array ) ; var i ; begin
43135: LD_INT 0
43137: PPUSH
43138: PPUSH
// if not array then
43139: LD_VAR 0 1
43143: NOT
43144: IFFALSE 43148
// exit ;
43146: GO 43203
// result := [ ] ;
43148: LD_ADDR_VAR 0 2
43152: PUSH
43153: EMPTY
43154: ST_TO_ADDR
// for i := array downto 1 do
43155: LD_ADDR_VAR 0 3
43159: PUSH
43160: DOUBLE
43161: LD_VAR 0 1
43165: INC
43166: ST_TO_ADDR
43167: LD_INT 1
43169: PUSH
43170: FOR_DOWNTO
43171: IFFALSE 43201
// result := Join ( result , array [ i ] ) ;
43173: LD_ADDR_VAR 0 2
43177: PUSH
43178: LD_VAR 0 2
43182: PPUSH
43183: LD_VAR 0 1
43187: PUSH
43188: LD_VAR 0 3
43192: ARRAY
43193: PPUSH
43194: CALL 47940 0 2
43198: ST_TO_ADDR
43199: GO 43170
43201: POP
43202: POP
// end ;
43203: LD_VAR 0 2
43207: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43208: LD_INT 0
43210: PPUSH
43211: PPUSH
43212: PPUSH
43213: PPUSH
43214: PPUSH
43215: PPUSH
// if not unit or not hexes then
43216: LD_VAR 0 1
43220: NOT
43221: PUSH
43222: LD_VAR 0 2
43226: NOT
43227: OR
43228: IFFALSE 43232
// exit ;
43230: GO 43355
// dist := 9999 ;
43232: LD_ADDR_VAR 0 5
43236: PUSH
43237: LD_INT 9999
43239: ST_TO_ADDR
// for i = 1 to hexes do
43240: LD_ADDR_VAR 0 4
43244: PUSH
43245: DOUBLE
43246: LD_INT 1
43248: DEC
43249: ST_TO_ADDR
43250: LD_VAR 0 2
43254: PUSH
43255: FOR_TO
43256: IFFALSE 43343
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43258: LD_ADDR_VAR 0 6
43262: PUSH
43263: LD_VAR 0 1
43267: PPUSH
43268: LD_VAR 0 2
43272: PUSH
43273: LD_VAR 0 4
43277: ARRAY
43278: PUSH
43279: LD_INT 1
43281: ARRAY
43282: PPUSH
43283: LD_VAR 0 2
43287: PUSH
43288: LD_VAR 0 4
43292: ARRAY
43293: PUSH
43294: LD_INT 2
43296: ARRAY
43297: PPUSH
43298: CALL_OW 297
43302: ST_TO_ADDR
// if tdist < dist then
43303: LD_VAR 0 6
43307: PUSH
43308: LD_VAR 0 5
43312: LESS
43313: IFFALSE 43341
// begin hex := hexes [ i ] ;
43315: LD_ADDR_VAR 0 8
43319: PUSH
43320: LD_VAR 0 2
43324: PUSH
43325: LD_VAR 0 4
43329: ARRAY
43330: ST_TO_ADDR
// dist := tdist ;
43331: LD_ADDR_VAR 0 5
43335: PUSH
43336: LD_VAR 0 6
43340: ST_TO_ADDR
// end ; end ;
43341: GO 43255
43343: POP
43344: POP
// result := hex ;
43345: LD_ADDR_VAR 0 3
43349: PUSH
43350: LD_VAR 0 8
43354: ST_TO_ADDR
// end ;
43355: LD_VAR 0 3
43359: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43360: LD_INT 0
43362: PPUSH
43363: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43364: LD_VAR 0 1
43368: NOT
43369: PUSH
43370: LD_VAR 0 1
43374: PUSH
43375: LD_INT 21
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 23
43387: PUSH
43388: LD_INT 2
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PPUSH
43399: CALL_OW 69
43403: IN
43404: NOT
43405: OR
43406: IFFALSE 43410
// exit ;
43408: GO 43457
// for i = 1 to 3 do
43410: LD_ADDR_VAR 0 3
43414: PUSH
43415: DOUBLE
43416: LD_INT 1
43418: DEC
43419: ST_TO_ADDR
43420: LD_INT 3
43422: PUSH
43423: FOR_TO
43424: IFFALSE 43455
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43426: LD_VAR 0 1
43430: PPUSH
43431: CALL_OW 250
43435: PPUSH
43436: LD_VAR 0 1
43440: PPUSH
43441: CALL_OW 251
43445: PPUSH
43446: LD_INT 1
43448: PPUSH
43449: CALL_OW 453
43453: GO 43423
43455: POP
43456: POP
// end ;
43457: LD_VAR 0 2
43461: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43462: LD_INT 0
43464: PPUSH
43465: PPUSH
43466: PPUSH
43467: PPUSH
43468: PPUSH
43469: PPUSH
// if not unit or not enemy_unit then
43470: LD_VAR 0 1
43474: NOT
43475: PUSH
43476: LD_VAR 0 2
43480: NOT
43481: OR
43482: IFFALSE 43486
// exit ;
43484: GO 43953
// if GetLives ( i ) < 250 then
43486: LD_VAR 0 4
43490: PPUSH
43491: CALL_OW 256
43495: PUSH
43496: LD_INT 250
43498: LESS
43499: IFFALSE 43512
// begin ComAutodestruct ( i ) ;
43501: LD_VAR 0 4
43505: PPUSH
43506: CALL 43360 0 1
// exit ;
43510: GO 43953
// end ; x := GetX ( enemy_unit ) ;
43512: LD_ADDR_VAR 0 7
43516: PUSH
43517: LD_VAR 0 2
43521: PPUSH
43522: CALL_OW 250
43526: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43527: LD_ADDR_VAR 0 8
43531: PUSH
43532: LD_VAR 0 2
43536: PPUSH
43537: CALL_OW 251
43541: ST_TO_ADDR
// if not x or not y then
43542: LD_VAR 0 7
43546: NOT
43547: PUSH
43548: LD_VAR 0 8
43552: NOT
43553: OR
43554: IFFALSE 43558
// exit ;
43556: GO 43953
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
43558: LD_ADDR_VAR 0 6
43562: PUSH
43563: LD_VAR 0 7
43567: PPUSH
43568: LD_INT 0
43570: PPUSH
43571: LD_INT 4
43573: PPUSH
43574: CALL_OW 272
43578: PUSH
43579: LD_VAR 0 8
43583: PPUSH
43584: LD_INT 0
43586: PPUSH
43587: LD_INT 4
43589: PPUSH
43590: CALL_OW 273
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_VAR 0 7
43603: PPUSH
43604: LD_INT 1
43606: PPUSH
43607: LD_INT 4
43609: PPUSH
43610: CALL_OW 272
43614: PUSH
43615: LD_VAR 0 8
43619: PPUSH
43620: LD_INT 1
43622: PPUSH
43623: LD_INT 4
43625: PPUSH
43626: CALL_OW 273
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_VAR 0 7
43639: PPUSH
43640: LD_INT 2
43642: PPUSH
43643: LD_INT 4
43645: PPUSH
43646: CALL_OW 272
43650: PUSH
43651: LD_VAR 0 8
43655: PPUSH
43656: LD_INT 2
43658: PPUSH
43659: LD_INT 4
43661: PPUSH
43662: CALL_OW 273
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: LD_VAR 0 7
43675: PPUSH
43676: LD_INT 3
43678: PPUSH
43679: LD_INT 4
43681: PPUSH
43682: CALL_OW 272
43686: PUSH
43687: LD_VAR 0 8
43691: PPUSH
43692: LD_INT 3
43694: PPUSH
43695: LD_INT 4
43697: PPUSH
43698: CALL_OW 273
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_VAR 0 7
43711: PPUSH
43712: LD_INT 4
43714: PPUSH
43715: LD_INT 4
43717: PPUSH
43718: CALL_OW 272
43722: PUSH
43723: LD_VAR 0 8
43727: PPUSH
43728: LD_INT 4
43730: PPUSH
43731: LD_INT 4
43733: PPUSH
43734: CALL_OW 273
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_VAR 0 7
43747: PPUSH
43748: LD_INT 5
43750: PPUSH
43751: LD_INT 4
43753: PPUSH
43754: CALL_OW 272
43758: PUSH
43759: LD_VAR 0 8
43763: PPUSH
43764: LD_INT 5
43766: PPUSH
43767: LD_INT 4
43769: PPUSH
43770: CALL_OW 273
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: ST_TO_ADDR
// for i = tmp downto 1 do
43787: LD_ADDR_VAR 0 4
43791: PUSH
43792: DOUBLE
43793: LD_VAR 0 6
43797: INC
43798: ST_TO_ADDR
43799: LD_INT 1
43801: PUSH
43802: FOR_DOWNTO
43803: IFFALSE 43904
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
43805: LD_VAR 0 6
43809: PUSH
43810: LD_VAR 0 4
43814: ARRAY
43815: PUSH
43816: LD_INT 1
43818: ARRAY
43819: PPUSH
43820: LD_VAR 0 6
43824: PUSH
43825: LD_VAR 0 4
43829: ARRAY
43830: PUSH
43831: LD_INT 2
43833: ARRAY
43834: PPUSH
43835: CALL_OW 488
43839: NOT
43840: PUSH
43841: LD_VAR 0 6
43845: PUSH
43846: LD_VAR 0 4
43850: ARRAY
43851: PUSH
43852: LD_INT 1
43854: ARRAY
43855: PPUSH
43856: LD_VAR 0 6
43860: PUSH
43861: LD_VAR 0 4
43865: ARRAY
43866: PUSH
43867: LD_INT 2
43869: ARRAY
43870: PPUSH
43871: CALL_OW 428
43875: PUSH
43876: LD_INT 0
43878: NONEQUAL
43879: OR
43880: IFFALSE 43902
// tmp := Delete ( tmp , i ) ;
43882: LD_ADDR_VAR 0 6
43886: PUSH
43887: LD_VAR 0 6
43891: PPUSH
43892: LD_VAR 0 4
43896: PPUSH
43897: CALL_OW 3
43901: ST_TO_ADDR
43902: GO 43802
43904: POP
43905: POP
// j := GetClosestHex ( unit , tmp ) ;
43906: LD_ADDR_VAR 0 5
43910: PUSH
43911: LD_VAR 0 1
43915: PPUSH
43916: LD_VAR 0 6
43920: PPUSH
43921: CALL 43208 0 2
43925: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
43926: LD_VAR 0 1
43930: PPUSH
43931: LD_VAR 0 5
43935: PUSH
43936: LD_INT 1
43938: ARRAY
43939: PPUSH
43940: LD_VAR 0 5
43944: PUSH
43945: LD_INT 2
43947: ARRAY
43948: PPUSH
43949: CALL_OW 111
// end ;
43953: LD_VAR 0 3
43957: RET
// export function PrepareApemanSoldier ( ) ; begin
43958: LD_INT 0
43960: PPUSH
// uc_nation := 0 ;
43961: LD_ADDR_OWVAR 21
43965: PUSH
43966: LD_INT 0
43968: ST_TO_ADDR
// hc_sex := sex_male ;
43969: LD_ADDR_OWVAR 27
43973: PUSH
43974: LD_INT 1
43976: ST_TO_ADDR
// hc_name :=  ;
43977: LD_ADDR_OWVAR 26
43981: PUSH
43982: LD_STRING 
43984: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
43985: LD_ADDR_OWVAR 28
43989: PUSH
43990: LD_INT 15
43992: ST_TO_ADDR
// hc_gallery :=  ;
43993: LD_ADDR_OWVAR 33
43997: PUSH
43998: LD_STRING 
44000: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44001: LD_ADDR_OWVAR 31
44005: PUSH
44006: LD_INT 0
44008: PPUSH
44009: LD_INT 3
44011: PPUSH
44012: CALL_OW 12
44016: PUSH
44017: LD_INT 0
44019: PPUSH
44020: LD_INT 3
44022: PPUSH
44023: CALL_OW 12
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 0
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: ST_TO_ADDR
// end ;
44040: LD_VAR 0 1
44044: RET
// export function PrepareApemanEngineer ( ) ; begin
44045: LD_INT 0
44047: PPUSH
// uc_nation := 0 ;
44048: LD_ADDR_OWVAR 21
44052: PUSH
44053: LD_INT 0
44055: ST_TO_ADDR
// hc_sex := sex_male ;
44056: LD_ADDR_OWVAR 27
44060: PUSH
44061: LD_INT 1
44063: ST_TO_ADDR
// hc_name :=  ;
44064: LD_ADDR_OWVAR 26
44068: PUSH
44069: LD_STRING 
44071: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44072: LD_ADDR_OWVAR 28
44076: PUSH
44077: LD_INT 16
44079: ST_TO_ADDR
// hc_gallery :=  ;
44080: LD_ADDR_OWVAR 33
44084: PUSH
44085: LD_STRING 
44087: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44088: LD_ADDR_OWVAR 31
44092: PUSH
44093: LD_INT 0
44095: PPUSH
44096: LD_INT 3
44098: PPUSH
44099: CALL_OW 12
44103: PUSH
44104: LD_INT 0
44106: PPUSH
44107: LD_INT 3
44109: PPUSH
44110: CALL_OW 12
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: LD_INT 0
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: LIST
44126: ST_TO_ADDR
// end ;
44127: LD_VAR 0 1
44131: RET
// export function PrepareApeman ( agressivity ) ; begin
44132: LD_INT 0
44134: PPUSH
// uc_side := 0 ;
44135: LD_ADDR_OWVAR 20
44139: PUSH
44140: LD_INT 0
44142: ST_TO_ADDR
// uc_nation := 0 ;
44143: LD_ADDR_OWVAR 21
44147: PUSH
44148: LD_INT 0
44150: ST_TO_ADDR
// hc_sex := sex_male ;
44151: LD_ADDR_OWVAR 27
44155: PUSH
44156: LD_INT 1
44158: ST_TO_ADDR
// hc_class := class_apeman ;
44159: LD_ADDR_OWVAR 28
44163: PUSH
44164: LD_INT 12
44166: ST_TO_ADDR
// hc_gallery :=  ;
44167: LD_ADDR_OWVAR 33
44171: PUSH
44172: LD_STRING 
44174: ST_TO_ADDR
// hc_name :=  ;
44175: LD_ADDR_OWVAR 26
44179: PUSH
44180: LD_STRING 
44182: ST_TO_ADDR
// if agressivity = 0 then
44183: LD_VAR 0 1
44187: PUSH
44188: LD_INT 0
44190: EQUAL
44191: IFFALSE 44203
// hc_agressivity := 0 else
44193: LD_ADDR_OWVAR 35
44197: PUSH
44198: LD_INT 0
44200: ST_TO_ADDR
44201: GO 44224
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44203: LD_ADDR_OWVAR 35
44207: PUSH
44208: LD_VAR 0 1
44212: NEG
44213: PPUSH
44214: LD_VAR 0 1
44218: PPUSH
44219: CALL_OW 12
44223: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44224: LD_ADDR_OWVAR 31
44228: PUSH
44229: LD_INT 0
44231: PPUSH
44232: LD_INT 3
44234: PPUSH
44235: CALL_OW 12
44239: PUSH
44240: LD_INT 0
44242: PPUSH
44243: LD_INT 3
44245: PPUSH
44246: CALL_OW 12
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 0
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: ST_TO_ADDR
// end ;
44263: LD_VAR 0 2
44267: RET
// export function PrepareTiger ( agressivity ) ; begin
44268: LD_INT 0
44270: PPUSH
// uc_side := 0 ;
44271: LD_ADDR_OWVAR 20
44275: PUSH
44276: LD_INT 0
44278: ST_TO_ADDR
// uc_nation := 0 ;
44279: LD_ADDR_OWVAR 21
44283: PUSH
44284: LD_INT 0
44286: ST_TO_ADDR
// hc_class := class_tiger ;
44287: LD_ADDR_OWVAR 28
44291: PUSH
44292: LD_INT 14
44294: ST_TO_ADDR
// hc_gallery :=  ;
44295: LD_ADDR_OWVAR 33
44299: PUSH
44300: LD_STRING 
44302: ST_TO_ADDR
// hc_name :=  ;
44303: LD_ADDR_OWVAR 26
44307: PUSH
44308: LD_STRING 
44310: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44311: LD_ADDR_OWVAR 35
44315: PUSH
44316: LD_VAR 0 1
44320: NEG
44321: PPUSH
44322: LD_VAR 0 1
44326: PPUSH
44327: CALL_OW 12
44331: ST_TO_ADDR
// end ;
44332: LD_VAR 0 2
44336: RET
// export function PrepareEnchidna ( ) ; begin
44337: LD_INT 0
44339: PPUSH
// uc_side := 0 ;
44340: LD_ADDR_OWVAR 20
44344: PUSH
44345: LD_INT 0
44347: ST_TO_ADDR
// uc_nation := 0 ;
44348: LD_ADDR_OWVAR 21
44352: PUSH
44353: LD_INT 0
44355: ST_TO_ADDR
// hc_class := class_baggie ;
44356: LD_ADDR_OWVAR 28
44360: PUSH
44361: LD_INT 13
44363: ST_TO_ADDR
// hc_gallery :=  ;
44364: LD_ADDR_OWVAR 33
44368: PUSH
44369: LD_STRING 
44371: ST_TO_ADDR
// hc_name :=  ;
44372: LD_ADDR_OWVAR 26
44376: PUSH
44377: LD_STRING 
44379: ST_TO_ADDR
// end ;
44380: LD_VAR 0 1
44384: RET
// export function PrepareFrog ( ) ; begin
44385: LD_INT 0
44387: PPUSH
// uc_side := 0 ;
44388: LD_ADDR_OWVAR 20
44392: PUSH
44393: LD_INT 0
44395: ST_TO_ADDR
// uc_nation := 0 ;
44396: LD_ADDR_OWVAR 21
44400: PUSH
44401: LD_INT 0
44403: ST_TO_ADDR
// hc_class := class_frog ;
44404: LD_ADDR_OWVAR 28
44408: PUSH
44409: LD_INT 19
44411: ST_TO_ADDR
// hc_gallery :=  ;
44412: LD_ADDR_OWVAR 33
44416: PUSH
44417: LD_STRING 
44419: ST_TO_ADDR
// hc_name :=  ;
44420: LD_ADDR_OWVAR 26
44424: PUSH
44425: LD_STRING 
44427: ST_TO_ADDR
// end ;
44428: LD_VAR 0 1
44432: RET
// export function PrepareFish ( ) ; begin
44433: LD_INT 0
44435: PPUSH
// uc_side := 0 ;
44436: LD_ADDR_OWVAR 20
44440: PUSH
44441: LD_INT 0
44443: ST_TO_ADDR
// uc_nation := 0 ;
44444: LD_ADDR_OWVAR 21
44448: PUSH
44449: LD_INT 0
44451: ST_TO_ADDR
// hc_class := class_fish ;
44452: LD_ADDR_OWVAR 28
44456: PUSH
44457: LD_INT 20
44459: ST_TO_ADDR
// hc_gallery :=  ;
44460: LD_ADDR_OWVAR 33
44464: PUSH
44465: LD_STRING 
44467: ST_TO_ADDR
// hc_name :=  ;
44468: LD_ADDR_OWVAR 26
44472: PUSH
44473: LD_STRING 
44475: ST_TO_ADDR
// end ;
44476: LD_VAR 0 1
44480: RET
// export function PrepareBird ( ) ; begin
44481: LD_INT 0
44483: PPUSH
// uc_side := 0 ;
44484: LD_ADDR_OWVAR 20
44488: PUSH
44489: LD_INT 0
44491: ST_TO_ADDR
// uc_nation := 0 ;
44492: LD_ADDR_OWVAR 21
44496: PUSH
44497: LD_INT 0
44499: ST_TO_ADDR
// hc_class := class_phororhacos ;
44500: LD_ADDR_OWVAR 28
44504: PUSH
44505: LD_INT 18
44507: ST_TO_ADDR
// hc_gallery :=  ;
44508: LD_ADDR_OWVAR 33
44512: PUSH
44513: LD_STRING 
44515: ST_TO_ADDR
// hc_name :=  ;
44516: LD_ADDR_OWVAR 26
44520: PUSH
44521: LD_STRING 
44523: ST_TO_ADDR
// end ;
44524: LD_VAR 0 1
44528: RET
// export function PrepareHorse ( ) ; begin
44529: LD_INT 0
44531: PPUSH
// uc_side := 0 ;
44532: LD_ADDR_OWVAR 20
44536: PUSH
44537: LD_INT 0
44539: ST_TO_ADDR
// uc_nation := 0 ;
44540: LD_ADDR_OWVAR 21
44544: PUSH
44545: LD_INT 0
44547: ST_TO_ADDR
// hc_class := class_horse ;
44548: LD_ADDR_OWVAR 28
44552: PUSH
44553: LD_INT 21
44555: ST_TO_ADDR
// hc_gallery :=  ;
44556: LD_ADDR_OWVAR 33
44560: PUSH
44561: LD_STRING 
44563: ST_TO_ADDR
// hc_name :=  ;
44564: LD_ADDR_OWVAR 26
44568: PUSH
44569: LD_STRING 
44571: ST_TO_ADDR
// end ;
44572: LD_VAR 0 1
44576: RET
// export function PrepareMastodont ( ) ; begin
44577: LD_INT 0
44579: PPUSH
// uc_side := 0 ;
44580: LD_ADDR_OWVAR 20
44584: PUSH
44585: LD_INT 0
44587: ST_TO_ADDR
// uc_nation := 0 ;
44588: LD_ADDR_OWVAR 21
44592: PUSH
44593: LD_INT 0
44595: ST_TO_ADDR
// vc_chassis := class_mastodont ;
44596: LD_ADDR_OWVAR 37
44600: PUSH
44601: LD_INT 31
44603: ST_TO_ADDR
// vc_control := control_rider ;
44604: LD_ADDR_OWVAR 38
44608: PUSH
44609: LD_INT 4
44611: ST_TO_ADDR
// end ;
44612: LD_VAR 0 1
44616: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
44617: LD_INT 0
44619: PPUSH
44620: PPUSH
44621: PPUSH
// uc_side = 0 ;
44622: LD_ADDR_OWVAR 20
44626: PUSH
44627: LD_INT 0
44629: ST_TO_ADDR
// uc_nation = 0 ;
44630: LD_ADDR_OWVAR 21
44634: PUSH
44635: LD_INT 0
44637: ST_TO_ADDR
// InitHc_All ( ) ;
44638: CALL_OW 584
// InitVc ;
44642: CALL_OW 20
// if mastodonts then
44646: LD_VAR 0 6
44650: IFFALSE 44717
// for i = 1 to mastodonts do
44652: LD_ADDR_VAR 0 11
44656: PUSH
44657: DOUBLE
44658: LD_INT 1
44660: DEC
44661: ST_TO_ADDR
44662: LD_VAR 0 6
44666: PUSH
44667: FOR_TO
44668: IFFALSE 44715
// begin vc_chassis := 31 ;
44670: LD_ADDR_OWVAR 37
44674: PUSH
44675: LD_INT 31
44677: ST_TO_ADDR
// vc_control := control_rider ;
44678: LD_ADDR_OWVAR 38
44682: PUSH
44683: LD_INT 4
44685: ST_TO_ADDR
// animal := CreateVehicle ;
44686: LD_ADDR_VAR 0 12
44690: PUSH
44691: CALL_OW 45
44695: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44696: LD_VAR 0 12
44700: PPUSH
44701: LD_VAR 0 8
44705: PPUSH
44706: LD_INT 0
44708: PPUSH
44709: CALL 46845 0 3
// end ;
44713: GO 44667
44715: POP
44716: POP
// if horses then
44717: LD_VAR 0 5
44721: IFFALSE 44788
// for i = 1 to horses do
44723: LD_ADDR_VAR 0 11
44727: PUSH
44728: DOUBLE
44729: LD_INT 1
44731: DEC
44732: ST_TO_ADDR
44733: LD_VAR 0 5
44737: PUSH
44738: FOR_TO
44739: IFFALSE 44786
// begin hc_class := 21 ;
44741: LD_ADDR_OWVAR 28
44745: PUSH
44746: LD_INT 21
44748: ST_TO_ADDR
// hc_gallery :=  ;
44749: LD_ADDR_OWVAR 33
44753: PUSH
44754: LD_STRING 
44756: ST_TO_ADDR
// animal := CreateHuman ;
44757: LD_ADDR_VAR 0 12
44761: PUSH
44762: CALL_OW 44
44766: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44767: LD_VAR 0 12
44771: PPUSH
44772: LD_VAR 0 8
44776: PPUSH
44777: LD_INT 0
44779: PPUSH
44780: CALL 46845 0 3
// end ;
44784: GO 44738
44786: POP
44787: POP
// if birds then
44788: LD_VAR 0 1
44792: IFFALSE 44859
// for i = 1 to birds do
44794: LD_ADDR_VAR 0 11
44798: PUSH
44799: DOUBLE
44800: LD_INT 1
44802: DEC
44803: ST_TO_ADDR
44804: LD_VAR 0 1
44808: PUSH
44809: FOR_TO
44810: IFFALSE 44857
// begin hc_class := 18 ;
44812: LD_ADDR_OWVAR 28
44816: PUSH
44817: LD_INT 18
44819: ST_TO_ADDR
// hc_gallery =  ;
44820: LD_ADDR_OWVAR 33
44824: PUSH
44825: LD_STRING 
44827: ST_TO_ADDR
// animal := CreateHuman ;
44828: LD_ADDR_VAR 0 12
44832: PUSH
44833: CALL_OW 44
44837: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44838: LD_VAR 0 12
44842: PPUSH
44843: LD_VAR 0 8
44847: PPUSH
44848: LD_INT 0
44850: PPUSH
44851: CALL 46845 0 3
// end ;
44855: GO 44809
44857: POP
44858: POP
// if tigers then
44859: LD_VAR 0 2
44863: IFFALSE 44947
// for i = 1 to tigers do
44865: LD_ADDR_VAR 0 11
44869: PUSH
44870: DOUBLE
44871: LD_INT 1
44873: DEC
44874: ST_TO_ADDR
44875: LD_VAR 0 2
44879: PUSH
44880: FOR_TO
44881: IFFALSE 44945
// begin hc_class = class_tiger ;
44883: LD_ADDR_OWVAR 28
44887: PUSH
44888: LD_INT 14
44890: ST_TO_ADDR
// hc_gallery =  ;
44891: LD_ADDR_OWVAR 33
44895: PUSH
44896: LD_STRING 
44898: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
44899: LD_ADDR_OWVAR 35
44903: PUSH
44904: LD_INT 7
44906: NEG
44907: PPUSH
44908: LD_INT 7
44910: PPUSH
44911: CALL_OW 12
44915: ST_TO_ADDR
// animal := CreateHuman ;
44916: LD_ADDR_VAR 0 12
44920: PUSH
44921: CALL_OW 44
44925: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
44926: LD_VAR 0 12
44930: PPUSH
44931: LD_VAR 0 8
44935: PPUSH
44936: LD_INT 0
44938: PPUSH
44939: CALL 46845 0 3
// end ;
44943: GO 44880
44945: POP
44946: POP
// if apemans then
44947: LD_VAR 0 3
44951: IFFALSE 45074
// for i = 1 to apemans do
44953: LD_ADDR_VAR 0 11
44957: PUSH
44958: DOUBLE
44959: LD_INT 1
44961: DEC
44962: ST_TO_ADDR
44963: LD_VAR 0 3
44967: PUSH
44968: FOR_TO
44969: IFFALSE 45072
// begin hc_class = class_apeman ;
44971: LD_ADDR_OWVAR 28
44975: PUSH
44976: LD_INT 12
44978: ST_TO_ADDR
// hc_gallery =  ;
44979: LD_ADDR_OWVAR 33
44983: PUSH
44984: LD_STRING 
44986: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
44987: LD_ADDR_OWVAR 35
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PPUSH
44996: LD_INT 2
44998: PPUSH
44999: CALL_OW 12
45003: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45004: LD_ADDR_OWVAR 31
45008: PUSH
45009: LD_INT 1
45011: PPUSH
45012: LD_INT 3
45014: PPUSH
45015: CALL_OW 12
45019: PUSH
45020: LD_INT 1
45022: PPUSH
45023: LD_INT 3
45025: PPUSH
45026: CALL_OW 12
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: LIST
45041: LIST
45042: ST_TO_ADDR
// animal := CreateHuman ;
45043: LD_ADDR_VAR 0 12
45047: PUSH
45048: CALL_OW 44
45052: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45053: LD_VAR 0 12
45057: PPUSH
45058: LD_VAR 0 8
45062: PPUSH
45063: LD_INT 0
45065: PPUSH
45066: CALL 46845 0 3
// end ;
45070: GO 44968
45072: POP
45073: POP
// if enchidnas then
45074: LD_VAR 0 4
45078: IFFALSE 45145
// for i = 1 to enchidnas do
45080: LD_ADDR_VAR 0 11
45084: PUSH
45085: DOUBLE
45086: LD_INT 1
45088: DEC
45089: ST_TO_ADDR
45090: LD_VAR 0 4
45094: PUSH
45095: FOR_TO
45096: IFFALSE 45143
// begin hc_class = 13 ;
45098: LD_ADDR_OWVAR 28
45102: PUSH
45103: LD_INT 13
45105: ST_TO_ADDR
// hc_gallery =  ;
45106: LD_ADDR_OWVAR 33
45110: PUSH
45111: LD_STRING 
45113: ST_TO_ADDR
// animal := CreateHuman ;
45114: LD_ADDR_VAR 0 12
45118: PUSH
45119: CALL_OW 44
45123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45124: LD_VAR 0 12
45128: PPUSH
45129: LD_VAR 0 8
45133: PPUSH
45134: LD_INT 0
45136: PPUSH
45137: CALL 46845 0 3
// end ;
45141: GO 45095
45143: POP
45144: POP
// if fishes then
45145: LD_VAR 0 7
45149: IFFALSE 45216
// for i = 1 to fishes do
45151: LD_ADDR_VAR 0 11
45155: PUSH
45156: DOUBLE
45157: LD_INT 1
45159: DEC
45160: ST_TO_ADDR
45161: LD_VAR 0 7
45165: PUSH
45166: FOR_TO
45167: IFFALSE 45214
// begin hc_class = 20 ;
45169: LD_ADDR_OWVAR 28
45173: PUSH
45174: LD_INT 20
45176: ST_TO_ADDR
// hc_gallery =  ;
45177: LD_ADDR_OWVAR 33
45181: PUSH
45182: LD_STRING 
45184: ST_TO_ADDR
// animal := CreateHuman ;
45185: LD_ADDR_VAR 0 12
45189: PUSH
45190: CALL_OW 44
45194: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45195: LD_VAR 0 12
45199: PPUSH
45200: LD_VAR 0 9
45204: PPUSH
45205: LD_INT 0
45207: PPUSH
45208: CALL 46845 0 3
// end ;
45212: GO 45166
45214: POP
45215: POP
// end ;
45216: LD_VAR 0 10
45220: RET
// export function WantHeal ( sci , unit ) ; begin
45221: LD_INT 0
45223: PPUSH
// if GetTaskList ( sci ) > 0 then
45224: LD_VAR 0 1
45228: PPUSH
45229: CALL_OW 437
45233: PUSH
45234: LD_INT 0
45236: GREATER
45237: IFFALSE 45307
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45239: LD_VAR 0 1
45243: PPUSH
45244: CALL_OW 437
45248: PUSH
45249: LD_INT 1
45251: ARRAY
45252: PUSH
45253: LD_INT 1
45255: ARRAY
45256: PUSH
45257: LD_STRING l
45259: EQUAL
45260: PUSH
45261: LD_VAR 0 1
45265: PPUSH
45266: CALL_OW 437
45270: PUSH
45271: LD_INT 1
45273: ARRAY
45274: PUSH
45275: LD_INT 4
45277: ARRAY
45278: PUSH
45279: LD_VAR 0 2
45283: EQUAL
45284: AND
45285: IFFALSE 45297
// result := true else
45287: LD_ADDR_VAR 0 3
45291: PUSH
45292: LD_INT 1
45294: ST_TO_ADDR
45295: GO 45305
// result := false ;
45297: LD_ADDR_VAR 0 3
45301: PUSH
45302: LD_INT 0
45304: ST_TO_ADDR
// end else
45305: GO 45315
// result := false ;
45307: LD_ADDR_VAR 0 3
45311: PUSH
45312: LD_INT 0
45314: ST_TO_ADDR
// end ;
45315: LD_VAR 0 3
45319: RET
// export function HealTarget ( sci ) ; begin
45320: LD_INT 0
45322: PPUSH
// if not sci then
45323: LD_VAR 0 1
45327: NOT
45328: IFFALSE 45332
// exit ;
45330: GO 45397
// result := 0 ;
45332: LD_ADDR_VAR 0 2
45336: PUSH
45337: LD_INT 0
45339: ST_TO_ADDR
// if GetTaskList ( sci ) then
45340: LD_VAR 0 1
45344: PPUSH
45345: CALL_OW 437
45349: IFFALSE 45397
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45351: LD_VAR 0 1
45355: PPUSH
45356: CALL_OW 437
45360: PUSH
45361: LD_INT 1
45363: ARRAY
45364: PUSH
45365: LD_INT 1
45367: ARRAY
45368: PUSH
45369: LD_STRING l
45371: EQUAL
45372: IFFALSE 45397
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45374: LD_ADDR_VAR 0 2
45378: PUSH
45379: LD_VAR 0 1
45383: PPUSH
45384: CALL_OW 437
45388: PUSH
45389: LD_INT 1
45391: ARRAY
45392: PUSH
45393: LD_INT 4
45395: ARRAY
45396: ST_TO_ADDR
// end ;
45397: LD_VAR 0 2
45401: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45402: LD_INT 0
45404: PPUSH
45405: PPUSH
45406: PPUSH
45407: PPUSH
// if not base_units then
45408: LD_VAR 0 1
45412: NOT
45413: IFFALSE 45417
// exit ;
45415: GO 45504
// result := false ;
45417: LD_ADDR_VAR 0 2
45421: PUSH
45422: LD_INT 0
45424: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45425: LD_ADDR_VAR 0 5
45429: PUSH
45430: LD_VAR 0 1
45434: PPUSH
45435: LD_INT 21
45437: PUSH
45438: LD_INT 3
45440: PUSH
45441: EMPTY
45442: LIST
45443: LIST
45444: PPUSH
45445: CALL_OW 72
45449: ST_TO_ADDR
// if not tmp then
45450: LD_VAR 0 5
45454: NOT
45455: IFFALSE 45459
// exit ;
45457: GO 45504
// for i in tmp do
45459: LD_ADDR_VAR 0 3
45463: PUSH
45464: LD_VAR 0 5
45468: PUSH
45469: FOR_IN
45470: IFFALSE 45502
// begin result := EnemyInRange ( i , 22 ) ;
45472: LD_ADDR_VAR 0 2
45476: PUSH
45477: LD_VAR 0 3
45481: PPUSH
45482: LD_INT 22
45484: PPUSH
45485: CALL 43010 0 2
45489: ST_TO_ADDR
// if result then
45490: LD_VAR 0 2
45494: IFFALSE 45500
// exit ;
45496: POP
45497: POP
45498: GO 45504
// end ;
45500: GO 45469
45502: POP
45503: POP
// end ;
45504: LD_VAR 0 2
45508: RET
// export function FilterByTag ( units , tag ) ; begin
45509: LD_INT 0
45511: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
45512: LD_ADDR_VAR 0 3
45516: PUSH
45517: LD_VAR 0 1
45521: PPUSH
45522: LD_INT 120
45524: PUSH
45525: LD_VAR 0 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PPUSH
45534: CALL_OW 72
45538: ST_TO_ADDR
// end ;
45539: LD_VAR 0 3
45543: RET
// export function IsDriver ( un ) ; begin
45544: LD_INT 0
45546: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
45547: LD_ADDR_VAR 0 2
45551: PUSH
45552: LD_VAR 0 1
45556: PUSH
45557: LD_INT 55
45559: PUSH
45560: EMPTY
45561: LIST
45562: PPUSH
45563: CALL_OW 69
45567: IN
45568: ST_TO_ADDR
// end ;
45569: LD_VAR 0 2
45573: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
45574: LD_INT 0
45576: PPUSH
45577: PPUSH
// list := [ ] ;
45578: LD_ADDR_VAR 0 5
45582: PUSH
45583: EMPTY
45584: ST_TO_ADDR
// case d of 0 :
45585: LD_VAR 0 3
45589: PUSH
45590: LD_INT 0
45592: DOUBLE
45593: EQUAL
45594: IFTRUE 45598
45596: GO 45731
45598: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
45599: LD_ADDR_VAR 0 5
45603: PUSH
45604: LD_VAR 0 1
45608: PUSH
45609: LD_INT 4
45611: MINUS
45612: PUSH
45613: LD_VAR 0 2
45617: PUSH
45618: LD_INT 4
45620: MINUS
45621: PUSH
45622: LD_INT 2
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: LIST
45629: PUSH
45630: LD_VAR 0 1
45634: PUSH
45635: LD_INT 3
45637: MINUS
45638: PUSH
45639: LD_VAR 0 2
45643: PUSH
45644: LD_INT 1
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: PUSH
45652: LD_VAR 0 1
45656: PUSH
45657: LD_INT 4
45659: PLUS
45660: PUSH
45661: LD_VAR 0 2
45665: PUSH
45666: LD_INT 4
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: LIST
45673: PUSH
45674: LD_VAR 0 1
45678: PUSH
45679: LD_INT 3
45681: PLUS
45682: PUSH
45683: LD_VAR 0 2
45687: PUSH
45688: LD_INT 3
45690: PLUS
45691: PUSH
45692: LD_INT 5
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: PUSH
45700: LD_VAR 0 1
45704: PUSH
45705: LD_VAR 0 2
45709: PUSH
45710: LD_INT 4
45712: PLUS
45713: PUSH
45714: LD_INT 0
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: ST_TO_ADDR
// end ; 1 :
45729: GO 46429
45731: LD_INT 1
45733: DOUBLE
45734: EQUAL
45735: IFTRUE 45739
45737: GO 45872
45739: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
45740: LD_ADDR_VAR 0 5
45744: PUSH
45745: LD_VAR 0 1
45749: PUSH
45750: LD_VAR 0 2
45754: PUSH
45755: LD_INT 4
45757: MINUS
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: PUSH
45767: LD_VAR 0 1
45771: PUSH
45772: LD_INT 3
45774: MINUS
45775: PUSH
45776: LD_VAR 0 2
45780: PUSH
45781: LD_INT 3
45783: MINUS
45784: PUSH
45785: LD_INT 2
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: LIST
45792: PUSH
45793: LD_VAR 0 1
45797: PUSH
45798: LD_INT 4
45800: MINUS
45801: PUSH
45802: LD_VAR 0 2
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: PUSH
45815: LD_VAR 0 1
45819: PUSH
45820: LD_VAR 0 2
45824: PUSH
45825: LD_INT 3
45827: PLUS
45828: PUSH
45829: LD_INT 0
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: LIST
45836: PUSH
45837: LD_VAR 0 1
45841: PUSH
45842: LD_INT 4
45844: PLUS
45845: PUSH
45846: LD_VAR 0 2
45850: PUSH
45851: LD_INT 4
45853: PLUS
45854: PUSH
45855: LD_INT 5
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: LIST
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// end ; 2 :
45870: GO 46429
45872: LD_INT 2
45874: DOUBLE
45875: EQUAL
45876: IFTRUE 45880
45878: GO 46009
45880: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
45881: LD_ADDR_VAR 0 5
45885: PUSH
45886: LD_VAR 0 1
45890: PUSH
45891: LD_VAR 0 2
45895: PUSH
45896: LD_INT 3
45898: MINUS
45899: PUSH
45900: LD_INT 3
45902: PUSH
45903: EMPTY
45904: LIST
45905: LIST
45906: LIST
45907: PUSH
45908: LD_VAR 0 1
45912: PUSH
45913: LD_INT 4
45915: PLUS
45916: PUSH
45917: LD_VAR 0 2
45921: PUSH
45922: LD_INT 4
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: PUSH
45930: LD_VAR 0 1
45934: PUSH
45935: LD_VAR 0 2
45939: PUSH
45940: LD_INT 4
45942: PLUS
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: LIST
45951: PUSH
45952: LD_VAR 0 1
45956: PUSH
45957: LD_INT 3
45959: MINUS
45960: PUSH
45961: LD_VAR 0 2
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: EMPTY
45970: LIST
45971: LIST
45972: LIST
45973: PUSH
45974: LD_VAR 0 1
45978: PUSH
45979: LD_INT 4
45981: MINUS
45982: PUSH
45983: LD_VAR 0 2
45987: PUSH
45988: LD_INT 4
45990: MINUS
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: LIST
45999: PUSH
46000: EMPTY
46001: LIST
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// end ; 3 :
46007: GO 46429
46009: LD_INT 3
46011: DOUBLE
46012: EQUAL
46013: IFTRUE 46017
46015: GO 46150
46017: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46018: LD_ADDR_VAR 0 5
46022: PUSH
46023: LD_VAR 0 1
46027: PUSH
46028: LD_INT 3
46030: PLUS
46031: PUSH
46032: LD_VAR 0 2
46036: PUSH
46037: LD_INT 4
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: LIST
46044: PUSH
46045: LD_VAR 0 1
46049: PUSH
46050: LD_INT 4
46052: PLUS
46053: PUSH
46054: LD_VAR 0 2
46058: PUSH
46059: LD_INT 4
46061: PLUS
46062: PUSH
46063: LD_INT 5
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: LIST
46070: PUSH
46071: LD_VAR 0 1
46075: PUSH
46076: LD_INT 4
46078: MINUS
46079: PUSH
46080: LD_VAR 0 2
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: LIST
46092: PUSH
46093: LD_VAR 0 1
46097: PUSH
46098: LD_VAR 0 2
46102: PUSH
46103: LD_INT 4
46105: MINUS
46106: PUSH
46107: LD_INT 3
46109: PUSH
46110: EMPTY
46111: LIST
46112: LIST
46113: LIST
46114: PUSH
46115: LD_VAR 0 1
46119: PUSH
46120: LD_INT 3
46122: MINUS
46123: PUSH
46124: LD_VAR 0 2
46128: PUSH
46129: LD_INT 3
46131: MINUS
46132: PUSH
46133: LD_INT 2
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: LIST
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: ST_TO_ADDR
// end ; 4 :
46148: GO 46429
46150: LD_INT 4
46152: DOUBLE
46153: EQUAL
46154: IFTRUE 46158
46156: GO 46291
46158: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46159: LD_ADDR_VAR 0 5
46163: PUSH
46164: LD_VAR 0 1
46168: PUSH
46169: LD_VAR 0 2
46173: PUSH
46174: LD_INT 4
46176: PLUS
46177: PUSH
46178: LD_INT 0
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: PUSH
46186: LD_VAR 0 1
46190: PUSH
46191: LD_INT 3
46193: PLUS
46194: PUSH
46195: LD_VAR 0 2
46199: PUSH
46200: LD_INT 3
46202: PLUS
46203: PUSH
46204: LD_INT 5
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: PUSH
46212: LD_VAR 0 1
46216: PUSH
46217: LD_INT 4
46219: PLUS
46220: PUSH
46221: LD_VAR 0 2
46225: PUSH
46226: LD_INT 4
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: LIST
46233: PUSH
46234: LD_VAR 0 1
46238: PUSH
46239: LD_VAR 0 2
46243: PUSH
46244: LD_INT 3
46246: MINUS
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: EMPTY
46252: LIST
46253: LIST
46254: LIST
46255: PUSH
46256: LD_VAR 0 1
46260: PUSH
46261: LD_INT 4
46263: MINUS
46264: PUSH
46265: LD_VAR 0 2
46269: PUSH
46270: LD_INT 4
46272: MINUS
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: ST_TO_ADDR
// end ; 5 :
46289: GO 46429
46291: LD_INT 5
46293: DOUBLE
46294: EQUAL
46295: IFTRUE 46299
46297: GO 46428
46299: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46300: LD_ADDR_VAR 0 5
46304: PUSH
46305: LD_VAR 0 1
46309: PUSH
46310: LD_INT 4
46312: MINUS
46313: PUSH
46314: LD_VAR 0 2
46318: PUSH
46319: LD_INT 1
46321: PUSH
46322: EMPTY
46323: LIST
46324: LIST
46325: LIST
46326: PUSH
46327: LD_VAR 0 1
46331: PUSH
46332: LD_VAR 0 2
46336: PUSH
46337: LD_INT 4
46339: MINUS
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: LIST
46348: PUSH
46349: LD_VAR 0 1
46353: PUSH
46354: LD_INT 4
46356: PLUS
46357: PUSH
46358: LD_VAR 0 2
46362: PUSH
46363: LD_INT 4
46365: PLUS
46366: PUSH
46367: LD_INT 5
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: PUSH
46375: LD_VAR 0 1
46379: PUSH
46380: LD_INT 3
46382: PLUS
46383: PUSH
46384: LD_VAR 0 2
46388: PUSH
46389: LD_INT 4
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: LIST
46396: PUSH
46397: LD_VAR 0 1
46401: PUSH
46402: LD_VAR 0 2
46406: PUSH
46407: LD_INT 3
46409: PLUS
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: EMPTY
46415: LIST
46416: LIST
46417: LIST
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: LIST
46425: ST_TO_ADDR
// end ; end ;
46426: GO 46429
46428: POP
// result := list ;
46429: LD_ADDR_VAR 0 4
46433: PUSH
46434: LD_VAR 0 5
46438: ST_TO_ADDR
// end ;
46439: LD_VAR 0 4
46443: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46444: LD_INT 0
46446: PPUSH
46447: PPUSH
46448: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46449: LD_VAR 0 1
46453: NOT
46454: PUSH
46455: LD_VAR 0 2
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 3
46468: PUSH
46469: LD_INT 4
46471: PUSH
46472: EMPTY
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: IN
46478: NOT
46479: OR
46480: IFFALSE 46484
// exit ;
46482: GO 46567
// tmp := [ ] ;
46484: LD_ADDR_VAR 0 5
46488: PUSH
46489: EMPTY
46490: ST_TO_ADDR
// for i in units do
46491: LD_ADDR_VAR 0 4
46495: PUSH
46496: LD_VAR 0 1
46500: PUSH
46501: FOR_IN
46502: IFFALSE 46536
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
46504: LD_ADDR_VAR 0 5
46508: PUSH
46509: LD_VAR 0 5
46513: PPUSH
46514: LD_VAR 0 4
46518: PPUSH
46519: LD_VAR 0 2
46523: PPUSH
46524: CALL_OW 259
46528: PPUSH
46529: CALL 47940 0 2
46533: ST_TO_ADDR
46534: GO 46501
46536: POP
46537: POP
// if not tmp then
46538: LD_VAR 0 5
46542: NOT
46543: IFFALSE 46547
// exit ;
46545: GO 46567
// result := SortListByListDesc ( units , tmp ) ;
46547: LD_ADDR_VAR 0 3
46551: PUSH
46552: LD_VAR 0 1
46556: PPUSH
46557: LD_VAR 0 5
46561: PPUSH
46562: CALL_OW 77
46566: ST_TO_ADDR
// end ;
46567: LD_VAR 0 3
46571: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
46572: LD_INT 0
46574: PPUSH
46575: PPUSH
46576: PPUSH
// result := false ;
46577: LD_ADDR_VAR 0 3
46581: PUSH
46582: LD_INT 0
46584: ST_TO_ADDR
// if not building then
46585: LD_VAR 0 2
46589: NOT
46590: IFFALSE 46594
// exit ;
46592: GO 46732
// x := GetX ( building ) ;
46594: LD_ADDR_VAR 0 4
46598: PUSH
46599: LD_VAR 0 2
46603: PPUSH
46604: CALL_OW 250
46608: ST_TO_ADDR
// y := GetY ( building ) ;
46609: LD_ADDR_VAR 0 5
46613: PUSH
46614: LD_VAR 0 2
46618: PPUSH
46619: CALL_OW 251
46623: ST_TO_ADDR
// if not x or not y then
46624: LD_VAR 0 4
46628: NOT
46629: PUSH
46630: LD_VAR 0 5
46634: NOT
46635: OR
46636: IFFALSE 46640
// exit ;
46638: GO 46732
// if GetTaskList ( unit ) then
46640: LD_VAR 0 1
46644: PPUSH
46645: CALL_OW 437
46649: IFFALSE 46732
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46651: LD_STRING e
46653: PUSH
46654: LD_VAR 0 1
46658: PPUSH
46659: CALL_OW 437
46663: PUSH
46664: LD_INT 1
46666: ARRAY
46667: PUSH
46668: LD_INT 1
46670: ARRAY
46671: EQUAL
46672: PUSH
46673: LD_VAR 0 4
46677: PUSH
46678: LD_VAR 0 1
46682: PPUSH
46683: CALL_OW 437
46687: PUSH
46688: LD_INT 1
46690: ARRAY
46691: PUSH
46692: LD_INT 2
46694: ARRAY
46695: EQUAL
46696: AND
46697: PUSH
46698: LD_VAR 0 5
46702: PUSH
46703: LD_VAR 0 1
46707: PPUSH
46708: CALL_OW 437
46712: PUSH
46713: LD_INT 1
46715: ARRAY
46716: PUSH
46717: LD_INT 3
46719: ARRAY
46720: EQUAL
46721: AND
46722: IFFALSE 46732
// result := true end ;
46724: LD_ADDR_VAR 0 3
46728: PUSH
46729: LD_INT 1
46731: ST_TO_ADDR
// end ;
46732: LD_VAR 0 3
46736: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
46737: LD_INT 0
46739: PPUSH
// result := false ;
46740: LD_ADDR_VAR 0 4
46744: PUSH
46745: LD_INT 0
46747: ST_TO_ADDR
// if GetTaskList ( unit ) then
46748: LD_VAR 0 1
46752: PPUSH
46753: CALL_OW 437
46757: IFFALSE 46840
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
46759: LD_STRING M
46761: PUSH
46762: LD_VAR 0 1
46766: PPUSH
46767: CALL_OW 437
46771: PUSH
46772: LD_INT 1
46774: ARRAY
46775: PUSH
46776: LD_INT 1
46778: ARRAY
46779: EQUAL
46780: PUSH
46781: LD_VAR 0 2
46785: PUSH
46786: LD_VAR 0 1
46790: PPUSH
46791: CALL_OW 437
46795: PUSH
46796: LD_INT 1
46798: ARRAY
46799: PUSH
46800: LD_INT 2
46802: ARRAY
46803: EQUAL
46804: AND
46805: PUSH
46806: LD_VAR 0 3
46810: PUSH
46811: LD_VAR 0 1
46815: PPUSH
46816: CALL_OW 437
46820: PUSH
46821: LD_INT 1
46823: ARRAY
46824: PUSH
46825: LD_INT 3
46827: ARRAY
46828: EQUAL
46829: AND
46830: IFFALSE 46840
// result := true ;
46832: LD_ADDR_VAR 0 4
46836: PUSH
46837: LD_INT 1
46839: ST_TO_ADDR
// end ; end ;
46840: LD_VAR 0 4
46844: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
46845: LD_INT 0
46847: PPUSH
46848: PPUSH
46849: PPUSH
46850: PPUSH
// if not unit or not area then
46851: LD_VAR 0 1
46855: NOT
46856: PUSH
46857: LD_VAR 0 2
46861: NOT
46862: OR
46863: IFFALSE 46867
// exit ;
46865: GO 47043
// tmp := AreaToList ( area , i ) ;
46867: LD_ADDR_VAR 0 6
46871: PUSH
46872: LD_VAR 0 2
46876: PPUSH
46877: LD_VAR 0 5
46881: PPUSH
46882: CALL_OW 517
46886: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
46887: LD_ADDR_VAR 0 5
46891: PUSH
46892: DOUBLE
46893: LD_INT 1
46895: DEC
46896: ST_TO_ADDR
46897: LD_VAR 0 6
46901: PUSH
46902: LD_INT 1
46904: ARRAY
46905: PUSH
46906: FOR_TO
46907: IFFALSE 47041
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
46909: LD_ADDR_VAR 0 7
46913: PUSH
46914: LD_VAR 0 6
46918: PUSH
46919: LD_INT 1
46921: ARRAY
46922: PUSH
46923: LD_VAR 0 5
46927: ARRAY
46928: PUSH
46929: LD_VAR 0 6
46933: PUSH
46934: LD_INT 2
46936: ARRAY
46937: PUSH
46938: LD_VAR 0 5
46942: ARRAY
46943: PUSH
46944: EMPTY
46945: LIST
46946: LIST
46947: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
46948: LD_INT 92
46950: PUSH
46951: LD_VAR 0 7
46955: PUSH
46956: LD_INT 1
46958: ARRAY
46959: PUSH
46960: LD_VAR 0 7
46964: PUSH
46965: LD_INT 2
46967: ARRAY
46968: PUSH
46969: LD_INT 2
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: PPUSH
46978: CALL_OW 69
46982: PUSH
46983: LD_INT 0
46985: EQUAL
46986: IFFALSE 47039
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
46988: LD_VAR 0 1
46992: PPUSH
46993: LD_VAR 0 7
46997: PUSH
46998: LD_INT 1
47000: ARRAY
47001: PPUSH
47002: LD_VAR 0 7
47006: PUSH
47007: LD_INT 2
47009: ARRAY
47010: PPUSH
47011: LD_VAR 0 3
47015: PPUSH
47016: CALL_OW 48
// result := IsPlaced ( unit ) ;
47020: LD_ADDR_VAR 0 4
47024: PUSH
47025: LD_VAR 0 1
47029: PPUSH
47030: CALL_OW 305
47034: ST_TO_ADDR
// exit ;
47035: POP
47036: POP
47037: GO 47043
// end ; end ;
47039: GO 46906
47041: POP
47042: POP
// end ;
47043: LD_VAR 0 4
47047: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47048: LD_INT 0
47050: PPUSH
47051: PPUSH
47052: PPUSH
// if not side or side > 8 then
47053: LD_VAR 0 1
47057: NOT
47058: PUSH
47059: LD_VAR 0 1
47063: PUSH
47064: LD_INT 8
47066: GREATER
47067: OR
47068: IFFALSE 47072
// exit ;
47070: GO 47259
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47072: LD_ADDR_VAR 0 4
47076: PUSH
47077: LD_INT 22
47079: PUSH
47080: LD_VAR 0 1
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 21
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PPUSH
47103: CALL_OW 69
47107: ST_TO_ADDR
// if not tmp then
47108: LD_VAR 0 4
47112: NOT
47113: IFFALSE 47117
// exit ;
47115: GO 47259
// enable_addtolog := true ;
47117: LD_ADDR_OWVAR 81
47121: PUSH
47122: LD_INT 1
47124: ST_TO_ADDR
// AddToLog ( [ ) ;
47125: LD_STRING [
47127: PPUSH
47128: CALL_OW 561
// for i in tmp do
47132: LD_ADDR_VAR 0 3
47136: PUSH
47137: LD_VAR 0 4
47141: PUSH
47142: FOR_IN
47143: IFFALSE 47250
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47145: LD_STRING [
47147: PUSH
47148: LD_VAR 0 3
47152: PPUSH
47153: CALL_OW 266
47157: STR
47158: PUSH
47159: LD_STRING , 
47161: STR
47162: PUSH
47163: LD_VAR 0 3
47167: PPUSH
47168: CALL_OW 250
47172: STR
47173: PUSH
47174: LD_STRING , 
47176: STR
47177: PUSH
47178: LD_VAR 0 3
47182: PPUSH
47183: CALL_OW 251
47187: STR
47188: PUSH
47189: LD_STRING , 
47191: STR
47192: PUSH
47193: LD_VAR 0 3
47197: PPUSH
47198: CALL_OW 254
47202: STR
47203: PUSH
47204: LD_STRING , 
47206: STR
47207: PUSH
47208: LD_VAR 0 3
47212: PPUSH
47213: LD_INT 1
47215: PPUSH
47216: CALL_OW 268
47220: STR
47221: PUSH
47222: LD_STRING , 
47224: STR
47225: PUSH
47226: LD_VAR 0 3
47230: PPUSH
47231: LD_INT 2
47233: PPUSH
47234: CALL_OW 268
47238: STR
47239: PUSH
47240: LD_STRING ],
47242: STR
47243: PPUSH
47244: CALL_OW 561
// end ;
47248: GO 47142
47250: POP
47251: POP
// AddToLog ( ]; ) ;
47252: LD_STRING ];
47254: PPUSH
47255: CALL_OW 561
// end ;
47259: LD_VAR 0 2
47263: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47264: LD_INT 0
47266: PPUSH
47267: PPUSH
47268: PPUSH
47269: PPUSH
47270: PPUSH
// if not area or not rate or not max then
47271: LD_VAR 0 1
47275: NOT
47276: PUSH
47277: LD_VAR 0 2
47281: NOT
47282: OR
47283: PUSH
47284: LD_VAR 0 4
47288: NOT
47289: OR
47290: IFFALSE 47294
// exit ;
47292: GO 47483
// while 1 do
47294: LD_INT 1
47296: IFFALSE 47483
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47298: LD_ADDR_VAR 0 9
47302: PUSH
47303: LD_VAR 0 1
47307: PPUSH
47308: LD_INT 1
47310: PPUSH
47311: CALL_OW 287
47315: PUSH
47316: LD_INT 10
47318: MUL
47319: ST_TO_ADDR
// r := rate / 10 ;
47320: LD_ADDR_VAR 0 7
47324: PUSH
47325: LD_VAR 0 2
47329: PUSH
47330: LD_INT 10
47332: DIVREAL
47333: ST_TO_ADDR
// time := 1 1$00 ;
47334: LD_ADDR_VAR 0 8
47338: PUSH
47339: LD_INT 2100
47341: ST_TO_ADDR
// if amount < min then
47342: LD_VAR 0 9
47346: PUSH
47347: LD_VAR 0 3
47351: LESS
47352: IFFALSE 47370
// r := r * 2 else
47354: LD_ADDR_VAR 0 7
47358: PUSH
47359: LD_VAR 0 7
47363: PUSH
47364: LD_INT 2
47366: MUL
47367: ST_TO_ADDR
47368: GO 47396
// if amount > max then
47370: LD_VAR 0 9
47374: PUSH
47375: LD_VAR 0 4
47379: GREATER
47380: IFFALSE 47396
// r := r / 2 ;
47382: LD_ADDR_VAR 0 7
47386: PUSH
47387: LD_VAR 0 7
47391: PUSH
47392: LD_INT 2
47394: DIVREAL
47395: ST_TO_ADDR
// time := time / r ;
47396: LD_ADDR_VAR 0 8
47400: PUSH
47401: LD_VAR 0 8
47405: PUSH
47406: LD_VAR 0 7
47410: DIVREAL
47411: ST_TO_ADDR
// if time < 0 then
47412: LD_VAR 0 8
47416: PUSH
47417: LD_INT 0
47419: LESS
47420: IFFALSE 47437
// time := time * - 1 ;
47422: LD_ADDR_VAR 0 8
47426: PUSH
47427: LD_VAR 0 8
47431: PUSH
47432: LD_INT 1
47434: NEG
47435: MUL
47436: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47437: LD_VAR 0 8
47441: PUSH
47442: LD_INT 35
47444: PPUSH
47445: LD_INT 875
47447: PPUSH
47448: CALL_OW 12
47452: PLUS
47453: PPUSH
47454: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
47458: LD_INT 1
47460: PPUSH
47461: LD_INT 5
47463: PPUSH
47464: CALL_OW 12
47468: PPUSH
47469: LD_VAR 0 1
47473: PPUSH
47474: LD_INT 1
47476: PPUSH
47477: CALL_OW 55
// end ;
47481: GO 47294
// end ;
47483: LD_VAR 0 5
47487: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
47488: LD_INT 0
47490: PPUSH
47491: PPUSH
47492: PPUSH
47493: PPUSH
47494: PPUSH
47495: PPUSH
47496: PPUSH
47497: PPUSH
// if not turrets or not factories then
47498: LD_VAR 0 1
47502: NOT
47503: PUSH
47504: LD_VAR 0 2
47508: NOT
47509: OR
47510: IFFALSE 47514
// exit ;
47512: GO 47821
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
47514: LD_ADDR_VAR 0 10
47518: PUSH
47519: LD_INT 5
47521: PUSH
47522: LD_INT 6
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 2
47531: PUSH
47532: LD_INT 4
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 3
47541: PUSH
47542: LD_INT 5
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: EMPTY
47550: LIST
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 24
47556: PUSH
47557: LD_INT 25
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 23
47566: PUSH
47567: LD_INT 27
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: PUSH
47578: LD_INT 42
47580: PUSH
47581: LD_INT 43
47583: PUSH
47584: EMPTY
47585: LIST
47586: LIST
47587: PUSH
47588: LD_INT 44
47590: PUSH
47591: LD_INT 46
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 45
47600: PUSH
47601: LD_INT 47
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: LIST
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: LIST
47617: ST_TO_ADDR
// result := [ ] ;
47618: LD_ADDR_VAR 0 3
47622: PUSH
47623: EMPTY
47624: ST_TO_ADDR
// for i in turrets do
47625: LD_ADDR_VAR 0 4
47629: PUSH
47630: LD_VAR 0 1
47634: PUSH
47635: FOR_IN
47636: IFFALSE 47819
// begin nat := GetNation ( i ) ;
47638: LD_ADDR_VAR 0 7
47642: PUSH
47643: LD_VAR 0 4
47647: PPUSH
47648: CALL_OW 248
47652: ST_TO_ADDR
// weapon := 0 ;
47653: LD_ADDR_VAR 0 8
47657: PUSH
47658: LD_INT 0
47660: ST_TO_ADDR
// if not nat then
47661: LD_VAR 0 7
47665: NOT
47666: IFFALSE 47670
// continue ;
47668: GO 47635
// for j in list [ nat ] do
47670: LD_ADDR_VAR 0 5
47674: PUSH
47675: LD_VAR 0 10
47679: PUSH
47680: LD_VAR 0 7
47684: ARRAY
47685: PUSH
47686: FOR_IN
47687: IFFALSE 47728
// if GetBWeapon ( i ) = j [ 1 ] then
47689: LD_VAR 0 4
47693: PPUSH
47694: CALL_OW 269
47698: PUSH
47699: LD_VAR 0 5
47703: PUSH
47704: LD_INT 1
47706: ARRAY
47707: EQUAL
47708: IFFALSE 47726
// begin weapon := j [ 2 ] ;
47710: LD_ADDR_VAR 0 8
47714: PUSH
47715: LD_VAR 0 5
47719: PUSH
47720: LD_INT 2
47722: ARRAY
47723: ST_TO_ADDR
// break ;
47724: GO 47728
// end ;
47726: GO 47686
47728: POP
47729: POP
// if not weapon then
47730: LD_VAR 0 8
47734: NOT
47735: IFFALSE 47739
// continue ;
47737: GO 47635
// for k in factories do
47739: LD_ADDR_VAR 0 6
47743: PUSH
47744: LD_VAR 0 2
47748: PUSH
47749: FOR_IN
47750: IFFALSE 47815
// begin weapons := AvailableWeaponList ( k ) ;
47752: LD_ADDR_VAR 0 9
47756: PUSH
47757: LD_VAR 0 6
47761: PPUSH
47762: CALL_OW 478
47766: ST_TO_ADDR
// if not weapons then
47767: LD_VAR 0 9
47771: NOT
47772: IFFALSE 47776
// continue ;
47774: GO 47749
// if weapon in weapons then
47776: LD_VAR 0 8
47780: PUSH
47781: LD_VAR 0 9
47785: IN
47786: IFFALSE 47813
// begin result := [ i , weapon ] ;
47788: LD_ADDR_VAR 0 3
47792: PUSH
47793: LD_VAR 0 4
47797: PUSH
47798: LD_VAR 0 8
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: ST_TO_ADDR
// exit ;
47807: POP
47808: POP
47809: POP
47810: POP
47811: GO 47821
// end ; end ;
47813: GO 47749
47815: POP
47816: POP
// end ;
47817: GO 47635
47819: POP
47820: POP
// end ;
47821: LD_VAR 0 3
47825: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
47826: LD_INT 0
47828: PPUSH
// if not side or side > 8 then
47829: LD_VAR 0 3
47833: NOT
47834: PUSH
47835: LD_VAR 0 3
47839: PUSH
47840: LD_INT 8
47842: GREATER
47843: OR
47844: IFFALSE 47848
// exit ;
47846: GO 47907
// if not range then
47848: LD_VAR 0 4
47852: NOT
47853: IFFALSE 47864
// range := - 12 ;
47855: LD_ADDR_VAR 0 4
47859: PUSH
47860: LD_INT 12
47862: NEG
47863: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
47864: LD_VAR 0 1
47868: PPUSH
47869: LD_VAR 0 2
47873: PPUSH
47874: LD_VAR 0 3
47878: PPUSH
47879: LD_VAR 0 4
47883: PPUSH
47884: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
47888: LD_VAR 0 1
47892: PPUSH
47893: LD_VAR 0 2
47897: PPUSH
47898: LD_VAR 0 3
47902: PPUSH
47903: CALL_OW 331
// end ;
47907: LD_VAR 0 5
47911: RET
// export function Video ( mode ) ; begin
47912: LD_INT 0
47914: PPUSH
// ingame_video = mode ;
47915: LD_ADDR_OWVAR 52
47919: PUSH
47920: LD_VAR 0 1
47924: ST_TO_ADDR
// interface_hidden = mode ;
47925: LD_ADDR_OWVAR 54
47929: PUSH
47930: LD_VAR 0 1
47934: ST_TO_ADDR
// end ;
47935: LD_VAR 0 2
47939: RET
// export function Join ( array , element ) ; begin
47940: LD_INT 0
47942: PPUSH
// result := Replace ( array , array + 1 , element ) ;
47943: LD_ADDR_VAR 0 3
47947: PUSH
47948: LD_VAR 0 1
47952: PPUSH
47953: LD_VAR 0 1
47957: PUSH
47958: LD_INT 1
47960: PLUS
47961: PPUSH
47962: LD_VAR 0 2
47966: PPUSH
47967: CALL_OW 1
47971: ST_TO_ADDR
// end ;
47972: LD_VAR 0 3
47976: RET
// export function JoinUnion ( array , element ) ; begin
47977: LD_INT 0
47979: PPUSH
// result := array union element ;
47980: LD_ADDR_VAR 0 3
47984: PUSH
47985: LD_VAR 0 1
47989: PUSH
47990: LD_VAR 0 2
47994: UNION
47995: ST_TO_ADDR
// end ;
47996: LD_VAR 0 3
48000: RET
// export function GetBehemoths ( side ) ; begin
48001: LD_INT 0
48003: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48004: LD_ADDR_VAR 0 2
48008: PUSH
48009: LD_INT 22
48011: PUSH
48012: LD_VAR 0 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 31
48023: PUSH
48024: LD_INT 25
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PPUSH
48035: CALL_OW 69
48039: ST_TO_ADDR
// end ;
48040: LD_VAR 0 2
48044: RET
// export function Shuffle ( array ) ; var i , index ; begin
48045: LD_INT 0
48047: PPUSH
48048: PPUSH
48049: PPUSH
// result := [ ] ;
48050: LD_ADDR_VAR 0 2
48054: PUSH
48055: EMPTY
48056: ST_TO_ADDR
// if not array then
48057: LD_VAR 0 1
48061: NOT
48062: IFFALSE 48066
// exit ;
48064: GO 48165
// Randomize ;
48066: CALL_OW 10
// for i = array downto 1 do
48070: LD_ADDR_VAR 0 3
48074: PUSH
48075: DOUBLE
48076: LD_VAR 0 1
48080: INC
48081: ST_TO_ADDR
48082: LD_INT 1
48084: PUSH
48085: FOR_DOWNTO
48086: IFFALSE 48163
// begin index := rand ( 1 , array ) ;
48088: LD_ADDR_VAR 0 4
48092: PUSH
48093: LD_INT 1
48095: PPUSH
48096: LD_VAR 0 1
48100: PPUSH
48101: CALL_OW 12
48105: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48106: LD_ADDR_VAR 0 2
48110: PUSH
48111: LD_VAR 0 2
48115: PPUSH
48116: LD_VAR 0 2
48120: PUSH
48121: LD_INT 1
48123: PLUS
48124: PPUSH
48125: LD_VAR 0 1
48129: PUSH
48130: LD_VAR 0 4
48134: ARRAY
48135: PPUSH
48136: CALL_OW 2
48140: ST_TO_ADDR
// array := Delete ( array , index ) ;
48141: LD_ADDR_VAR 0 1
48145: PUSH
48146: LD_VAR 0 1
48150: PPUSH
48151: LD_VAR 0 4
48155: PPUSH
48156: CALL_OW 3
48160: ST_TO_ADDR
// end ;
48161: GO 48085
48163: POP
48164: POP
// end ;
48165: LD_VAR 0 2
48169: RET
// export function GetBaseMaterials ( base ) ; begin
48170: LD_INT 0
48172: PPUSH
// result := [ 0 , 0 , 0 ] ;
48173: LD_ADDR_VAR 0 2
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: LD_INT 0
48186: PUSH
48187: EMPTY
48188: LIST
48189: LIST
48190: LIST
48191: ST_TO_ADDR
// if not base then
48192: LD_VAR 0 1
48196: NOT
48197: IFFALSE 48201
// exit ;
48199: GO 48250
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48201: LD_ADDR_VAR 0 2
48205: PUSH
48206: LD_VAR 0 1
48210: PPUSH
48211: LD_INT 1
48213: PPUSH
48214: CALL_OW 275
48218: PUSH
48219: LD_VAR 0 1
48223: PPUSH
48224: LD_INT 2
48226: PPUSH
48227: CALL_OW 275
48231: PUSH
48232: LD_VAR 0 1
48236: PPUSH
48237: LD_INT 3
48239: PPUSH
48240: CALL_OW 275
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: LIST
48249: ST_TO_ADDR
// end ;
48250: LD_VAR 0 2
48254: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48255: LD_INT 0
48257: PPUSH
48258: PPUSH
// result := array ;
48259: LD_ADDR_VAR 0 3
48263: PUSH
48264: LD_VAR 0 1
48268: ST_TO_ADDR
// if size >= result then
48269: LD_VAR 0 2
48273: PUSH
48274: LD_VAR 0 3
48278: GREATEREQUAL
48279: IFFALSE 48283
// exit ;
48281: GO 48333
// if size then
48283: LD_VAR 0 2
48287: IFFALSE 48333
// for i := array downto size do
48289: LD_ADDR_VAR 0 4
48293: PUSH
48294: DOUBLE
48295: LD_VAR 0 1
48299: INC
48300: ST_TO_ADDR
48301: LD_VAR 0 2
48305: PUSH
48306: FOR_DOWNTO
48307: IFFALSE 48331
// result := Delete ( result , result ) ;
48309: LD_ADDR_VAR 0 3
48313: PUSH
48314: LD_VAR 0 3
48318: PPUSH
48319: LD_VAR 0 3
48323: PPUSH
48324: CALL_OW 3
48328: ST_TO_ADDR
48329: GO 48306
48331: POP
48332: POP
// end ;
48333: LD_VAR 0 3
48337: RET
// export function ComExit ( unit ) ; var tmp ; begin
48338: LD_INT 0
48340: PPUSH
48341: PPUSH
// if not IsInUnit ( unit ) then
48342: LD_VAR 0 1
48346: PPUSH
48347: CALL_OW 310
48351: NOT
48352: IFFALSE 48356
// exit ;
48354: GO 48416
// tmp := IsInUnit ( unit ) ;
48356: LD_ADDR_VAR 0 3
48360: PUSH
48361: LD_VAR 0 1
48365: PPUSH
48366: CALL_OW 310
48370: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48371: LD_VAR 0 3
48375: PPUSH
48376: CALL_OW 247
48380: PUSH
48381: LD_INT 2
48383: EQUAL
48384: IFFALSE 48397
// ComExitVehicle ( unit ) else
48386: LD_VAR 0 1
48390: PPUSH
48391: CALL_OW 121
48395: GO 48406
// ComExitBuilding ( unit ) ;
48397: LD_VAR 0 1
48401: PPUSH
48402: CALL_OW 122
// result := tmp ;
48406: LD_ADDR_VAR 0 2
48410: PUSH
48411: LD_VAR 0 3
48415: ST_TO_ADDR
// end ;
48416: LD_VAR 0 2
48420: RET
// export function ComExitAll ( units ) ; var i ; begin
48421: LD_INT 0
48423: PPUSH
48424: PPUSH
// if not units then
48425: LD_VAR 0 1
48429: NOT
48430: IFFALSE 48434
// exit ;
48432: GO 48460
// for i in units do
48434: LD_ADDR_VAR 0 3
48438: PUSH
48439: LD_VAR 0 1
48443: PUSH
48444: FOR_IN
48445: IFFALSE 48458
// ComExit ( i ) ;
48447: LD_VAR 0 3
48451: PPUSH
48452: CALL 48338 0 1
48456: GO 48444
48458: POP
48459: POP
// end ;
48460: LD_VAR 0 2
48464: RET
// export function ResetHc ; begin
48465: LD_INT 0
48467: PPUSH
// InitHc ;
48468: CALL_OW 19
// hc_importance := 0 ;
48472: LD_ADDR_OWVAR 32
48476: PUSH
48477: LD_INT 0
48479: ST_TO_ADDR
// end ;
48480: LD_VAR 0 1
48484: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
48485: LD_INT 0
48487: PPUSH
48488: PPUSH
48489: PPUSH
// _x := ( x1 + x2 ) div 2 ;
48490: LD_ADDR_VAR 0 6
48494: PUSH
48495: LD_VAR 0 1
48499: PUSH
48500: LD_VAR 0 3
48504: PLUS
48505: PUSH
48506: LD_INT 2
48508: DIV
48509: ST_TO_ADDR
// if _x < 0 then
48510: LD_VAR 0 6
48514: PUSH
48515: LD_INT 0
48517: LESS
48518: IFFALSE 48535
// _x := _x * - 1 ;
48520: LD_ADDR_VAR 0 6
48524: PUSH
48525: LD_VAR 0 6
48529: PUSH
48530: LD_INT 1
48532: NEG
48533: MUL
48534: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
48535: LD_ADDR_VAR 0 7
48539: PUSH
48540: LD_VAR 0 2
48544: PUSH
48545: LD_VAR 0 4
48549: PLUS
48550: PUSH
48551: LD_INT 2
48553: DIV
48554: ST_TO_ADDR
// if _y < 0 then
48555: LD_VAR 0 7
48559: PUSH
48560: LD_INT 0
48562: LESS
48563: IFFALSE 48580
// _y := _y * - 1 ;
48565: LD_ADDR_VAR 0 7
48569: PUSH
48570: LD_VAR 0 7
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: MUL
48579: ST_TO_ADDR
// result := [ _x , _y ] ;
48580: LD_ADDR_VAR 0 5
48584: PUSH
48585: LD_VAR 0 6
48589: PUSH
48590: LD_VAR 0 7
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: ST_TO_ADDR
// end ;
48599: LD_VAR 0 5
48603: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
48604: LD_INT 0
48606: PPUSH
48607: PPUSH
48608: PPUSH
48609: PPUSH
// task := GetTaskList ( unit ) ;
48610: LD_ADDR_VAR 0 7
48614: PUSH
48615: LD_VAR 0 1
48619: PPUSH
48620: CALL_OW 437
48624: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
48625: LD_VAR 0 7
48629: NOT
48630: PUSH
48631: LD_VAR 0 1
48635: PPUSH
48636: LD_VAR 0 2
48640: PPUSH
48641: CALL_OW 308
48645: NOT
48646: AND
48647: IFFALSE 48651
// exit ;
48649: GO 48769
// if IsInArea ( unit , area ) then
48651: LD_VAR 0 1
48655: PPUSH
48656: LD_VAR 0 2
48660: PPUSH
48661: CALL_OW 308
48665: IFFALSE 48683
// begin ComMoveToArea ( unit , goAway ) ;
48667: LD_VAR 0 1
48671: PPUSH
48672: LD_VAR 0 3
48676: PPUSH
48677: CALL_OW 113
// exit ;
48681: GO 48769
// end ; if task [ 1 ] [ 1 ] <> M then
48683: LD_VAR 0 7
48687: PUSH
48688: LD_INT 1
48690: ARRAY
48691: PUSH
48692: LD_INT 1
48694: ARRAY
48695: PUSH
48696: LD_STRING M
48698: NONEQUAL
48699: IFFALSE 48703
// exit ;
48701: GO 48769
// x := task [ 1 ] [ 2 ] ;
48703: LD_ADDR_VAR 0 5
48707: PUSH
48708: LD_VAR 0 7
48712: PUSH
48713: LD_INT 1
48715: ARRAY
48716: PUSH
48717: LD_INT 2
48719: ARRAY
48720: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
48721: LD_ADDR_VAR 0 6
48725: PUSH
48726: LD_VAR 0 7
48730: PUSH
48731: LD_INT 1
48733: ARRAY
48734: PUSH
48735: LD_INT 3
48737: ARRAY
48738: ST_TO_ADDR
// if InArea ( x , y , area ) then
48739: LD_VAR 0 5
48743: PPUSH
48744: LD_VAR 0 6
48748: PPUSH
48749: LD_VAR 0 2
48753: PPUSH
48754: CALL_OW 309
48758: IFFALSE 48769
// ComStop ( unit ) ;
48760: LD_VAR 0 1
48764: PPUSH
48765: CALL_OW 141
// end ;
48769: LD_VAR 0 4
48773: RET
// export function Abs ( value ) ; begin
48774: LD_INT 0
48776: PPUSH
// result := value ;
48777: LD_ADDR_VAR 0 2
48781: PUSH
48782: LD_VAR 0 1
48786: ST_TO_ADDR
// if value < 0 then
48787: LD_VAR 0 1
48791: PUSH
48792: LD_INT 0
48794: LESS
48795: IFFALSE 48812
// result := value * - 1 ;
48797: LD_ADDR_VAR 0 2
48801: PUSH
48802: LD_VAR 0 1
48806: PUSH
48807: LD_INT 1
48809: NEG
48810: MUL
48811: ST_TO_ADDR
// end ;
48812: LD_VAR 0 2
48816: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
48817: LD_INT 0
48819: PPUSH
48820: PPUSH
48821: PPUSH
48822: PPUSH
48823: PPUSH
48824: PPUSH
48825: PPUSH
48826: PPUSH
// if not unit or not building then
48827: LD_VAR 0 1
48831: NOT
48832: PUSH
48833: LD_VAR 0 2
48837: NOT
48838: OR
48839: IFFALSE 48843
// exit ;
48841: GO 49069
// x := GetX ( building ) ;
48843: LD_ADDR_VAR 0 4
48847: PUSH
48848: LD_VAR 0 2
48852: PPUSH
48853: CALL_OW 250
48857: ST_TO_ADDR
// y := GetY ( building ) ;
48858: LD_ADDR_VAR 0 6
48862: PUSH
48863: LD_VAR 0 2
48867: PPUSH
48868: CALL_OW 251
48872: ST_TO_ADDR
// d := GetDir ( building ) ;
48873: LD_ADDR_VAR 0 8
48877: PUSH
48878: LD_VAR 0 2
48882: PPUSH
48883: CALL_OW 254
48887: ST_TO_ADDR
// r := 4 ;
48888: LD_ADDR_VAR 0 9
48892: PUSH
48893: LD_INT 4
48895: ST_TO_ADDR
// for i := 1 to 5 do
48896: LD_ADDR_VAR 0 10
48900: PUSH
48901: DOUBLE
48902: LD_INT 1
48904: DEC
48905: ST_TO_ADDR
48906: LD_INT 5
48908: PUSH
48909: FOR_TO
48910: IFFALSE 49067
// begin _x := ShiftX ( x , d , r + i ) ;
48912: LD_ADDR_VAR 0 5
48916: PUSH
48917: LD_VAR 0 4
48921: PPUSH
48922: LD_VAR 0 8
48926: PPUSH
48927: LD_VAR 0 9
48931: PUSH
48932: LD_VAR 0 10
48936: PLUS
48937: PPUSH
48938: CALL_OW 272
48942: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
48943: LD_ADDR_VAR 0 7
48947: PUSH
48948: LD_VAR 0 6
48952: PPUSH
48953: LD_VAR 0 8
48957: PPUSH
48958: LD_VAR 0 9
48962: PUSH
48963: LD_VAR 0 10
48967: PLUS
48968: PPUSH
48969: CALL_OW 273
48973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
48974: LD_VAR 0 5
48978: PPUSH
48979: LD_VAR 0 7
48983: PPUSH
48984: CALL_OW 488
48988: PUSH
48989: LD_VAR 0 5
48993: PPUSH
48994: LD_VAR 0 7
48998: PPUSH
48999: CALL_OW 428
49003: PPUSH
49004: CALL_OW 247
49008: PUSH
49009: LD_INT 3
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: IN
49019: NOT
49020: AND
49021: IFFALSE 49065
// begin ComMoveXY ( unit , _x , _y ) ;
49023: LD_VAR 0 1
49027: PPUSH
49028: LD_VAR 0 5
49032: PPUSH
49033: LD_VAR 0 7
49037: PPUSH
49038: CALL_OW 111
// result := [ _x , _y ] ;
49042: LD_ADDR_VAR 0 3
49046: PUSH
49047: LD_VAR 0 5
49051: PUSH
49052: LD_VAR 0 7
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: ST_TO_ADDR
// exit ;
49061: POP
49062: POP
49063: GO 49069
// end ; end ;
49065: GO 48909
49067: POP
49068: POP
// end ;
49069: LD_VAR 0 3
49073: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49074: LD_INT 0
49076: PPUSH
49077: PPUSH
49078: PPUSH
// result := 0 ;
49079: LD_ADDR_VAR 0 3
49083: PUSH
49084: LD_INT 0
49086: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49087: LD_VAR 0 1
49091: PUSH
49092: LD_INT 0
49094: LESS
49095: PUSH
49096: LD_VAR 0 1
49100: PUSH
49101: LD_INT 8
49103: GREATER
49104: OR
49105: PUSH
49106: LD_VAR 0 2
49110: PUSH
49111: LD_INT 0
49113: LESS
49114: OR
49115: PUSH
49116: LD_VAR 0 2
49120: PUSH
49121: LD_INT 8
49123: GREATER
49124: OR
49125: IFFALSE 49129
// exit ;
49127: GO 49204
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49129: LD_ADDR_VAR 0 4
49133: PUSH
49134: LD_INT 22
49136: PUSH
49137: LD_VAR 0 2
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PPUSH
49146: CALL_OW 69
49150: PUSH
49151: FOR_IN
49152: IFFALSE 49202
// begin un := UnitShoot ( i ) ;
49154: LD_ADDR_VAR 0 5
49158: PUSH
49159: LD_VAR 0 4
49163: PPUSH
49164: CALL_OW 504
49168: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49169: LD_VAR 0 5
49173: PPUSH
49174: CALL_OW 255
49178: PUSH
49179: LD_VAR 0 1
49183: EQUAL
49184: IFFALSE 49200
// begin result := un ;
49186: LD_ADDR_VAR 0 3
49190: PUSH
49191: LD_VAR 0 5
49195: ST_TO_ADDR
// exit ;
49196: POP
49197: POP
49198: GO 49204
// end ; end ;
49200: GO 49151
49202: POP
49203: POP
// end ;
49204: LD_VAR 0 3
49208: RET
// export function GetCargoBay ( units ) ; begin
49209: LD_INT 0
49211: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49212: LD_ADDR_VAR 0 2
49216: PUSH
49217: LD_VAR 0 1
49221: PPUSH
49222: LD_INT 2
49224: PUSH
49225: LD_INT 34
49227: PUSH
49228: LD_INT 12
49230: PUSH
49231: EMPTY
49232: LIST
49233: LIST
49234: PUSH
49235: LD_INT 34
49237: PUSH
49238: LD_INT 51
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: PUSH
49245: LD_INT 34
49247: PUSH
49248: LD_INT 32
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 34
49257: PUSH
49258: LD_INT 89
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: LIST
49269: LIST
49270: LIST
49271: PPUSH
49272: CALL_OW 72
49276: ST_TO_ADDR
// end ;
49277: LD_VAR 0 2
49281: RET
// export function Negate ( value ) ; begin
49282: LD_INT 0
49284: PPUSH
// result := not value ;
49285: LD_ADDR_VAR 0 2
49289: PUSH
49290: LD_VAR 0 1
49294: NOT
49295: ST_TO_ADDR
// end ;
49296: LD_VAR 0 2
49300: RET
// export function Inc ( value ) ; begin
49301: LD_INT 0
49303: PPUSH
// result := value + 1 ;
49304: LD_ADDR_VAR 0 2
49308: PUSH
49309: LD_VAR 0 1
49313: PUSH
49314: LD_INT 1
49316: PLUS
49317: ST_TO_ADDR
// end ;
49318: LD_VAR 0 2
49322: RET
// export function Dec ( value ) ; begin
49323: LD_INT 0
49325: PPUSH
// result := value - 1 ;
49326: LD_ADDR_VAR 0 2
49330: PUSH
49331: LD_VAR 0 1
49335: PUSH
49336: LD_INT 1
49338: MINUS
49339: ST_TO_ADDR
// end ;
49340: LD_VAR 0 2
49344: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49345: LD_INT 0
49347: PPUSH
49348: PPUSH
49349: PPUSH
49350: PPUSH
49351: PPUSH
49352: PPUSH
49353: PPUSH
49354: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49355: LD_VAR 0 1
49359: PPUSH
49360: LD_VAR 0 2
49364: PPUSH
49365: CALL_OW 488
49369: NOT
49370: PUSH
49371: LD_VAR 0 3
49375: PPUSH
49376: LD_VAR 0 4
49380: PPUSH
49381: CALL_OW 488
49385: NOT
49386: OR
49387: IFFALSE 49400
// begin result := - 1 ;
49389: LD_ADDR_VAR 0 5
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: ST_TO_ADDR
// exit ;
49398: GO 49635
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49400: LD_ADDR_VAR 0 12
49404: PUSH
49405: LD_VAR 0 1
49409: PPUSH
49410: LD_VAR 0 2
49414: PPUSH
49415: LD_VAR 0 3
49419: PPUSH
49420: LD_VAR 0 4
49424: PPUSH
49425: CALL 48485 0 4
49429: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
49430: LD_ADDR_VAR 0 11
49434: PUSH
49435: LD_VAR 0 1
49439: PPUSH
49440: LD_VAR 0 2
49444: PPUSH
49445: LD_VAR 0 12
49449: PUSH
49450: LD_INT 1
49452: ARRAY
49453: PPUSH
49454: LD_VAR 0 12
49458: PUSH
49459: LD_INT 2
49461: ARRAY
49462: PPUSH
49463: CALL_OW 298
49467: ST_TO_ADDR
// distance := 9999 ;
49468: LD_ADDR_VAR 0 10
49472: PUSH
49473: LD_INT 9999
49475: ST_TO_ADDR
// for i := 0 to 5 do
49476: LD_ADDR_VAR 0 6
49480: PUSH
49481: DOUBLE
49482: LD_INT 0
49484: DEC
49485: ST_TO_ADDR
49486: LD_INT 5
49488: PUSH
49489: FOR_TO
49490: IFFALSE 49633
// begin _x := ShiftX ( x1 , i , centerDist ) ;
49492: LD_ADDR_VAR 0 7
49496: PUSH
49497: LD_VAR 0 1
49501: PPUSH
49502: LD_VAR 0 6
49506: PPUSH
49507: LD_VAR 0 11
49511: PPUSH
49512: CALL_OW 272
49516: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
49517: LD_ADDR_VAR 0 8
49521: PUSH
49522: LD_VAR 0 2
49526: PPUSH
49527: LD_VAR 0 6
49531: PPUSH
49532: LD_VAR 0 11
49536: PPUSH
49537: CALL_OW 273
49541: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49542: LD_VAR 0 7
49546: PPUSH
49547: LD_VAR 0 8
49551: PPUSH
49552: CALL_OW 488
49556: NOT
49557: IFFALSE 49561
// continue ;
49559: GO 49489
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
49561: LD_ADDR_VAR 0 9
49565: PUSH
49566: LD_VAR 0 12
49570: PUSH
49571: LD_INT 1
49573: ARRAY
49574: PPUSH
49575: LD_VAR 0 12
49579: PUSH
49580: LD_INT 2
49582: ARRAY
49583: PPUSH
49584: LD_VAR 0 7
49588: PPUSH
49589: LD_VAR 0 8
49593: PPUSH
49594: CALL_OW 298
49598: ST_TO_ADDR
// if tmp < distance then
49599: LD_VAR 0 9
49603: PUSH
49604: LD_VAR 0 10
49608: LESS
49609: IFFALSE 49631
// begin result := i ;
49611: LD_ADDR_VAR 0 5
49615: PUSH
49616: LD_VAR 0 6
49620: ST_TO_ADDR
// distance := tmp ;
49621: LD_ADDR_VAR 0 10
49625: PUSH
49626: LD_VAR 0 9
49630: ST_TO_ADDR
// end ; end ;
49631: GO 49489
49633: POP
49634: POP
// end ;
49635: LD_VAR 0 5
49639: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49640: LD_INT 0
49642: PPUSH
49643: PPUSH
// if not driver or not IsInUnit ( driver ) then
49644: LD_VAR 0 1
49648: NOT
49649: PUSH
49650: LD_VAR 0 1
49654: PPUSH
49655: CALL_OW 310
49659: NOT
49660: OR
49661: IFFALSE 49665
// exit ;
49663: GO 49755
// vehicle := IsInUnit ( driver ) ;
49665: LD_ADDR_VAR 0 3
49669: PUSH
49670: LD_VAR 0 1
49674: PPUSH
49675: CALL_OW 310
49679: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49680: LD_VAR 0 1
49684: PPUSH
49685: LD_STRING \
49687: PUSH
49688: LD_INT 0
49690: PUSH
49691: LD_INT 0
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: LD_INT 0
49702: PUSH
49703: LD_INT 0
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: PUSH
49715: LD_STRING E
49717: PUSH
49718: LD_INT 0
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_VAR 0 3
49728: PUSH
49729: LD_INT 0
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: LD_INT 0
49737: PUSH
49738: EMPTY
49739: LIST
49740: LIST
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PPUSH
49751: CALL_OW 446
// end ;
49755: LD_VAR 0 2
49759: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
49760: LD_INT 0
49762: PPUSH
49763: PPUSH
// if not driver or not IsInUnit ( driver ) then
49764: LD_VAR 0 1
49768: NOT
49769: PUSH
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 310
49779: NOT
49780: OR
49781: IFFALSE 49785
// exit ;
49783: GO 49875
// vehicle := IsInUnit ( driver ) ;
49785: LD_ADDR_VAR 0 3
49789: PUSH
49790: LD_VAR 0 1
49794: PPUSH
49795: CALL_OW 310
49799: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
49800: LD_VAR 0 1
49804: PPUSH
49805: LD_STRING \
49807: PUSH
49808: LD_INT 0
49810: PUSH
49811: LD_INT 0
49813: PUSH
49814: LD_INT 0
49816: PUSH
49817: LD_INT 0
49819: PUSH
49820: LD_INT 0
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: PUSH
49835: LD_STRING E
49837: PUSH
49838: LD_INT 0
49840: PUSH
49841: LD_INT 0
49843: PUSH
49844: LD_VAR 0 3
49848: PUSH
49849: LD_INT 0
49851: PUSH
49852: LD_INT 0
49854: PUSH
49855: LD_INT 0
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PPUSH
49871: CALL_OW 447
// end ;
49875: LD_VAR 0 2
49879: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
49880: LD_INT 0
49882: PPUSH
49883: PPUSH
49884: PPUSH
// tmp := [ ] ;
49885: LD_ADDR_VAR 0 5
49889: PUSH
49890: EMPTY
49891: ST_TO_ADDR
// for i in units do
49892: LD_ADDR_VAR 0 4
49896: PUSH
49897: LD_VAR 0 1
49901: PUSH
49902: FOR_IN
49903: IFFALSE 49941
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
49905: LD_ADDR_VAR 0 5
49909: PUSH
49910: LD_VAR 0 5
49914: PPUSH
49915: LD_VAR 0 5
49919: PUSH
49920: LD_INT 1
49922: PLUS
49923: PPUSH
49924: LD_VAR 0 4
49928: PPUSH
49929: CALL_OW 256
49933: PPUSH
49934: CALL_OW 2
49938: ST_TO_ADDR
49939: GO 49902
49941: POP
49942: POP
// if not tmp then
49943: LD_VAR 0 5
49947: NOT
49948: IFFALSE 49952
// exit ;
49950: GO 50000
// if asc then
49952: LD_VAR 0 2
49956: IFFALSE 49980
// result := SortListByListAsc ( units , tmp ) else
49958: LD_ADDR_VAR 0 3
49962: PUSH
49963: LD_VAR 0 1
49967: PPUSH
49968: LD_VAR 0 5
49972: PPUSH
49973: CALL_OW 76
49977: ST_TO_ADDR
49978: GO 50000
// result := SortListByListDesc ( units , tmp ) ;
49980: LD_ADDR_VAR 0 3
49984: PUSH
49985: LD_VAR 0 1
49989: PPUSH
49990: LD_VAR 0 5
49994: PPUSH
49995: CALL_OW 77
49999: ST_TO_ADDR
// end ;
50000: LD_VAR 0 3
50004: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50005: LD_INT 0
50007: PPUSH
50008: PPUSH
// task := GetTaskList ( mech ) ;
50009: LD_ADDR_VAR 0 4
50013: PUSH
50014: LD_VAR 0 1
50018: PPUSH
50019: CALL_OW 437
50023: ST_TO_ADDR
// if not task then
50024: LD_VAR 0 4
50028: NOT
50029: IFFALSE 50033
// exit ;
50031: GO 50075
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50033: LD_ADDR_VAR 0 3
50037: PUSH
50038: LD_VAR 0 4
50042: PUSH
50043: LD_INT 1
50045: ARRAY
50046: PUSH
50047: LD_INT 1
50049: ARRAY
50050: PUSH
50051: LD_STRING r
50053: EQUAL
50054: PUSH
50055: LD_VAR 0 4
50059: PUSH
50060: LD_INT 1
50062: ARRAY
50063: PUSH
50064: LD_INT 4
50066: ARRAY
50067: PUSH
50068: LD_VAR 0 2
50072: EQUAL
50073: AND
50074: ST_TO_ADDR
// end ;
50075: LD_VAR 0 3
50079: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50080: LD_INT 0
50082: PPUSH
// SetDir ( unit , d ) ;
50083: LD_VAR 0 1
50087: PPUSH
50088: LD_VAR 0 4
50092: PPUSH
50093: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50097: LD_ADDR_VAR 0 6
50101: PUSH
50102: LD_VAR 0 1
50106: PPUSH
50107: LD_VAR 0 2
50111: PPUSH
50112: LD_VAR 0 3
50116: PPUSH
50117: LD_VAR 0 5
50121: PPUSH
50122: CALL_OW 48
50126: ST_TO_ADDR
// end ;
50127: LD_VAR 0 6
50131: RET
// export function ToNaturalNumber ( number ) ; begin
50132: LD_INT 0
50134: PPUSH
// result := number div 1 ;
50135: LD_ADDR_VAR 0 2
50139: PUSH
50140: LD_VAR 0 1
50144: PUSH
50145: LD_INT 1
50147: DIV
50148: ST_TO_ADDR
// if number < 0 then
50149: LD_VAR 0 1
50153: PUSH
50154: LD_INT 0
50156: LESS
50157: IFFALSE 50167
// result := 0 ;
50159: LD_ADDR_VAR 0 2
50163: PUSH
50164: LD_INT 0
50166: ST_TO_ADDR
// end ;
50167: LD_VAR 0 2
50171: RET
// export function SortByClass ( units , class ) ; var un ; begin
50172: LD_INT 0
50174: PPUSH
50175: PPUSH
// if not units or not class then
50176: LD_VAR 0 1
50180: NOT
50181: PUSH
50182: LD_VAR 0 2
50186: NOT
50187: OR
50188: IFFALSE 50192
// exit ;
50190: GO 50287
// result := [ ] ;
50192: LD_ADDR_VAR 0 3
50196: PUSH
50197: EMPTY
50198: ST_TO_ADDR
// for un in units do
50199: LD_ADDR_VAR 0 4
50203: PUSH
50204: LD_VAR 0 1
50208: PUSH
50209: FOR_IN
50210: IFFALSE 50285
// if GetClass ( un ) = class then
50212: LD_VAR 0 4
50216: PPUSH
50217: CALL_OW 257
50221: PUSH
50222: LD_VAR 0 2
50226: EQUAL
50227: IFFALSE 50254
// result := Insert ( result , 1 , un ) else
50229: LD_ADDR_VAR 0 3
50233: PUSH
50234: LD_VAR 0 3
50238: PPUSH
50239: LD_INT 1
50241: PPUSH
50242: LD_VAR 0 4
50246: PPUSH
50247: CALL_OW 2
50251: ST_TO_ADDR
50252: GO 50283
// result := Replace ( result , result + 1 , un ) ;
50254: LD_ADDR_VAR 0 3
50258: PUSH
50259: LD_VAR 0 3
50263: PPUSH
50264: LD_VAR 0 3
50268: PUSH
50269: LD_INT 1
50271: PLUS
50272: PPUSH
50273: LD_VAR 0 4
50277: PPUSH
50278: CALL_OW 1
50282: ST_TO_ADDR
50283: GO 50209
50285: POP
50286: POP
// end ;
50287: LD_VAR 0 3
50291: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
50292: LD_INT 0
50294: PPUSH
50295: PPUSH
50296: PPUSH
50297: PPUSH
50298: PPUSH
50299: PPUSH
50300: PPUSH
// result := [ ] ;
50301: LD_ADDR_VAR 0 4
50305: PUSH
50306: EMPTY
50307: ST_TO_ADDR
// if x - r < 0 then
50308: LD_VAR 0 1
50312: PUSH
50313: LD_VAR 0 3
50317: MINUS
50318: PUSH
50319: LD_INT 0
50321: LESS
50322: IFFALSE 50334
// min_x := 0 else
50324: LD_ADDR_VAR 0 8
50328: PUSH
50329: LD_INT 0
50331: ST_TO_ADDR
50332: GO 50350
// min_x := x - r ;
50334: LD_ADDR_VAR 0 8
50338: PUSH
50339: LD_VAR 0 1
50343: PUSH
50344: LD_VAR 0 3
50348: MINUS
50349: ST_TO_ADDR
// if y - r < 0 then
50350: LD_VAR 0 2
50354: PUSH
50355: LD_VAR 0 3
50359: MINUS
50360: PUSH
50361: LD_INT 0
50363: LESS
50364: IFFALSE 50376
// min_y := 0 else
50366: LD_ADDR_VAR 0 7
50370: PUSH
50371: LD_INT 0
50373: ST_TO_ADDR
50374: GO 50392
// min_y := y - r ;
50376: LD_ADDR_VAR 0 7
50380: PUSH
50381: LD_VAR 0 2
50385: PUSH
50386: LD_VAR 0 3
50390: MINUS
50391: ST_TO_ADDR
// max_x := x + r ;
50392: LD_ADDR_VAR 0 9
50396: PUSH
50397: LD_VAR 0 1
50401: PUSH
50402: LD_VAR 0 3
50406: PLUS
50407: ST_TO_ADDR
// max_y := y + r ;
50408: LD_ADDR_VAR 0 10
50412: PUSH
50413: LD_VAR 0 2
50417: PUSH
50418: LD_VAR 0 3
50422: PLUS
50423: ST_TO_ADDR
// for _x = min_x to max_x do
50424: LD_ADDR_VAR 0 5
50428: PUSH
50429: DOUBLE
50430: LD_VAR 0 8
50434: DEC
50435: ST_TO_ADDR
50436: LD_VAR 0 9
50440: PUSH
50441: FOR_TO
50442: IFFALSE 50543
// for _y = min_y to max_y do
50444: LD_ADDR_VAR 0 6
50448: PUSH
50449: DOUBLE
50450: LD_VAR 0 7
50454: DEC
50455: ST_TO_ADDR
50456: LD_VAR 0 10
50460: PUSH
50461: FOR_TO
50462: IFFALSE 50539
// begin if not ValidHex ( _x , _y ) then
50464: LD_VAR 0 5
50468: PPUSH
50469: LD_VAR 0 6
50473: PPUSH
50474: CALL_OW 488
50478: NOT
50479: IFFALSE 50483
// continue ;
50481: GO 50461
// if GetResourceTypeXY ( _x , _y ) then
50483: LD_VAR 0 5
50487: PPUSH
50488: LD_VAR 0 6
50492: PPUSH
50493: CALL_OW 283
50497: IFFALSE 50537
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
50499: LD_ADDR_VAR 0 4
50503: PUSH
50504: LD_VAR 0 4
50508: PPUSH
50509: LD_VAR 0 4
50513: PUSH
50514: LD_INT 1
50516: PLUS
50517: PPUSH
50518: LD_VAR 0 5
50522: PUSH
50523: LD_VAR 0 6
50527: PUSH
50528: EMPTY
50529: LIST
50530: LIST
50531: PPUSH
50532: CALL_OW 1
50536: ST_TO_ADDR
// end ;
50537: GO 50461
50539: POP
50540: POP
50541: GO 50441
50543: POP
50544: POP
// end ;
50545: LD_VAR 0 4
50549: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
50550: LD_INT 0
50552: PPUSH
50553: PPUSH
50554: PPUSH
50555: PPUSH
50556: PPUSH
50557: PPUSH
50558: PPUSH
50559: PPUSH
// if not units then
50560: LD_VAR 0 1
50564: NOT
50565: IFFALSE 50569
// exit ;
50567: GO 51097
// result := UnitFilter ( units , [ f_ok ] ) ;
50569: LD_ADDR_VAR 0 3
50573: PUSH
50574: LD_VAR 0 1
50578: PPUSH
50579: LD_INT 50
50581: PUSH
50582: EMPTY
50583: LIST
50584: PPUSH
50585: CALL_OW 72
50589: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
50590: LD_ADDR_VAR 0 8
50594: PUSH
50595: LD_VAR 0 1
50599: PUSH
50600: LD_INT 1
50602: ARRAY
50603: PPUSH
50604: CALL_OW 255
50608: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
50609: LD_ADDR_VAR 0 10
50613: PUSH
50614: LD_INT 29
50616: PUSH
50617: LD_INT 91
50619: PUSH
50620: LD_INT 49
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: ST_TO_ADDR
// if not result then
50628: LD_VAR 0 3
50632: NOT
50633: IFFALSE 50637
// exit ;
50635: GO 51097
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
50637: LD_ADDR_VAR 0 5
50641: PUSH
50642: LD_INT 81
50644: PUSH
50645: LD_VAR 0 8
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PPUSH
50654: CALL_OW 69
50658: ST_TO_ADDR
// for i in result do
50659: LD_ADDR_VAR 0 4
50663: PUSH
50664: LD_VAR 0 3
50668: PUSH
50669: FOR_IN
50670: IFFALSE 51095
// begin tag := GetTag ( i ) + 1 ;
50672: LD_ADDR_VAR 0 9
50676: PUSH
50677: LD_VAR 0 4
50681: PPUSH
50682: CALL_OW 110
50686: PUSH
50687: LD_INT 1
50689: PLUS
50690: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
50691: LD_ADDR_VAR 0 7
50695: PUSH
50696: LD_VAR 0 4
50700: PPUSH
50701: CALL_OW 250
50705: PPUSH
50706: LD_VAR 0 4
50710: PPUSH
50711: CALL_OW 251
50715: PPUSH
50716: LD_INT 4
50718: PPUSH
50719: CALL 50292 0 3
50723: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
50724: LD_VAR 0 4
50728: PPUSH
50729: CALL_OW 247
50733: PUSH
50734: LD_INT 2
50736: EQUAL
50737: PUSH
50738: LD_VAR 0 7
50742: PUSH
50743: LD_INT 2
50745: GREATER
50746: AND
50747: PUSH
50748: LD_VAR 0 4
50752: PPUSH
50753: CALL_OW 264
50757: PUSH
50758: LD_VAR 0 10
50762: IN
50763: NOT
50764: AND
50765: IFFALSE 50804
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
50767: LD_VAR 0 4
50771: PPUSH
50772: LD_VAR 0 7
50776: PUSH
50777: LD_INT 1
50779: ARRAY
50780: PUSH
50781: LD_INT 1
50783: ARRAY
50784: PPUSH
50785: LD_VAR 0 7
50789: PUSH
50790: LD_INT 1
50792: ARRAY
50793: PUSH
50794: LD_INT 2
50796: ARRAY
50797: PPUSH
50798: CALL_OW 116
50802: GO 51093
// if path > tag then
50804: LD_VAR 0 2
50808: PUSH
50809: LD_VAR 0 9
50813: GREATER
50814: IFFALSE 51022
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
50816: LD_ADDR_VAR 0 6
50820: PUSH
50821: LD_VAR 0 5
50825: PPUSH
50826: LD_INT 91
50828: PUSH
50829: LD_VAR 0 4
50833: PUSH
50834: LD_INT 8
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: PPUSH
50842: CALL_OW 72
50846: ST_TO_ADDR
// if nearEnemy then
50847: LD_VAR 0 6
50851: IFFALSE 50920
// begin if GetWeapon ( i ) = ru_time_lapser then
50853: LD_VAR 0 4
50857: PPUSH
50858: CALL_OW 264
50862: PUSH
50863: LD_INT 49
50865: EQUAL
50866: IFFALSE 50894
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
50868: LD_VAR 0 4
50872: PPUSH
50873: LD_VAR 0 6
50877: PPUSH
50878: LD_VAR 0 4
50882: PPUSH
50883: CALL_OW 74
50887: PPUSH
50888: CALL_OW 112
50892: GO 50918
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
50894: LD_VAR 0 4
50898: PPUSH
50899: LD_VAR 0 6
50903: PPUSH
50904: LD_VAR 0 4
50908: PPUSH
50909: CALL_OW 74
50913: PPUSH
50914: CALL 52168 0 2
// end else
50918: GO 51020
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
50920: LD_VAR 0 4
50924: PPUSH
50925: LD_VAR 0 2
50929: PUSH
50930: LD_VAR 0 9
50934: ARRAY
50935: PUSH
50936: LD_INT 1
50938: ARRAY
50939: PPUSH
50940: LD_VAR 0 2
50944: PUSH
50945: LD_VAR 0 9
50949: ARRAY
50950: PUSH
50951: LD_INT 2
50953: ARRAY
50954: PPUSH
50955: CALL_OW 297
50959: PUSH
50960: LD_INT 6
50962: GREATER
50963: IFFALSE 51006
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
50965: LD_VAR 0 4
50969: PPUSH
50970: LD_VAR 0 2
50974: PUSH
50975: LD_VAR 0 9
50979: ARRAY
50980: PUSH
50981: LD_INT 1
50983: ARRAY
50984: PPUSH
50985: LD_VAR 0 2
50989: PUSH
50990: LD_VAR 0 9
50994: ARRAY
50995: PUSH
50996: LD_INT 2
50998: ARRAY
50999: PPUSH
51000: CALL_OW 114
51004: GO 51020
// SetTag ( i , tag ) ;
51006: LD_VAR 0 4
51010: PPUSH
51011: LD_VAR 0 9
51015: PPUSH
51016: CALL_OW 109
// end else
51020: GO 51093
// if enemy then
51022: LD_VAR 0 5
51026: IFFALSE 51093
// begin if GetWeapon ( i ) = ru_time_lapser then
51028: LD_VAR 0 4
51032: PPUSH
51033: CALL_OW 264
51037: PUSH
51038: LD_INT 49
51040: EQUAL
51041: IFFALSE 51069
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51043: LD_VAR 0 4
51047: PPUSH
51048: LD_VAR 0 5
51052: PPUSH
51053: LD_VAR 0 4
51057: PPUSH
51058: CALL_OW 74
51062: PPUSH
51063: CALL_OW 112
51067: GO 51093
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51069: LD_VAR 0 4
51073: PPUSH
51074: LD_VAR 0 5
51078: PPUSH
51079: LD_VAR 0 4
51083: PPUSH
51084: CALL_OW 74
51088: PPUSH
51089: CALL 52168 0 2
// end ; end ;
51093: GO 50669
51095: POP
51096: POP
// end ;
51097: LD_VAR 0 3
51101: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51102: LD_INT 0
51104: PPUSH
51105: PPUSH
51106: PPUSH
// if not unit or IsInUnit ( unit ) then
51107: LD_VAR 0 1
51111: NOT
51112: PUSH
51113: LD_VAR 0 1
51117: PPUSH
51118: CALL_OW 310
51122: OR
51123: IFFALSE 51127
// exit ;
51125: GO 51218
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51127: LD_ADDR_VAR 0 4
51131: PUSH
51132: LD_VAR 0 1
51136: PPUSH
51137: CALL_OW 250
51141: PPUSH
51142: LD_VAR 0 2
51146: PPUSH
51147: LD_INT 1
51149: PPUSH
51150: CALL_OW 272
51154: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51155: LD_ADDR_VAR 0 5
51159: PUSH
51160: LD_VAR 0 1
51164: PPUSH
51165: CALL_OW 251
51169: PPUSH
51170: LD_VAR 0 2
51174: PPUSH
51175: LD_INT 1
51177: PPUSH
51178: CALL_OW 273
51182: ST_TO_ADDR
// if ValidHex ( x , y ) then
51183: LD_VAR 0 4
51187: PPUSH
51188: LD_VAR 0 5
51192: PPUSH
51193: CALL_OW 488
51197: IFFALSE 51218
// ComTurnXY ( unit , x , y ) ;
51199: LD_VAR 0 1
51203: PPUSH
51204: LD_VAR 0 4
51208: PPUSH
51209: LD_VAR 0 5
51213: PPUSH
51214: CALL_OW 118
// end ;
51218: LD_VAR 0 3
51222: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51223: LD_INT 0
51225: PPUSH
51226: PPUSH
// result := false ;
51227: LD_ADDR_VAR 0 3
51231: PUSH
51232: LD_INT 0
51234: ST_TO_ADDR
// if not units then
51235: LD_VAR 0 2
51239: NOT
51240: IFFALSE 51244
// exit ;
51242: GO 51289
// for i in units do
51244: LD_ADDR_VAR 0 4
51248: PUSH
51249: LD_VAR 0 2
51253: PUSH
51254: FOR_IN
51255: IFFALSE 51287
// if See ( side , i ) then
51257: LD_VAR 0 1
51261: PPUSH
51262: LD_VAR 0 4
51266: PPUSH
51267: CALL_OW 292
51271: IFFALSE 51285
// begin result := true ;
51273: LD_ADDR_VAR 0 3
51277: PUSH
51278: LD_INT 1
51280: ST_TO_ADDR
// exit ;
51281: POP
51282: POP
51283: GO 51289
// end ;
51285: GO 51254
51287: POP
51288: POP
// end ;
51289: LD_VAR 0 3
51293: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
51294: LD_INT 0
51296: PPUSH
51297: PPUSH
51298: PPUSH
51299: PPUSH
// if not unit or not points then
51300: LD_VAR 0 1
51304: NOT
51305: PUSH
51306: LD_VAR 0 2
51310: NOT
51311: OR
51312: IFFALSE 51316
// exit ;
51314: GO 51406
// dist := 99999 ;
51316: LD_ADDR_VAR 0 5
51320: PUSH
51321: LD_INT 99999
51323: ST_TO_ADDR
// for i in points do
51324: LD_ADDR_VAR 0 4
51328: PUSH
51329: LD_VAR 0 2
51333: PUSH
51334: FOR_IN
51335: IFFALSE 51404
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
51337: LD_ADDR_VAR 0 6
51341: PUSH
51342: LD_VAR 0 1
51346: PPUSH
51347: LD_VAR 0 4
51351: PUSH
51352: LD_INT 1
51354: ARRAY
51355: PPUSH
51356: LD_VAR 0 4
51360: PUSH
51361: LD_INT 2
51363: ARRAY
51364: PPUSH
51365: CALL_OW 297
51369: ST_TO_ADDR
// if tmpDist < dist then
51370: LD_VAR 0 6
51374: PUSH
51375: LD_VAR 0 5
51379: LESS
51380: IFFALSE 51402
// begin result := i ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_VAR 0 4
51391: ST_TO_ADDR
// dist := tmpDist ;
51392: LD_ADDR_VAR 0 5
51396: PUSH
51397: LD_VAR 0 6
51401: ST_TO_ADDR
// end ; end ;
51402: GO 51334
51404: POP
51405: POP
// end ;
51406: LD_VAR 0 3
51410: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
51411: LD_INT 0
51413: PPUSH
// uc_side := side ;
51414: LD_ADDR_OWVAR 20
51418: PUSH
51419: LD_VAR 0 1
51423: ST_TO_ADDR
// uc_nation := 3 ;
51424: LD_ADDR_OWVAR 21
51428: PUSH
51429: LD_INT 3
51431: ST_TO_ADDR
// vc_chassis := 25 ;
51432: LD_ADDR_OWVAR 37
51436: PUSH
51437: LD_INT 25
51439: ST_TO_ADDR
// vc_engine := engine_siberite ;
51440: LD_ADDR_OWVAR 39
51444: PUSH
51445: LD_INT 3
51447: ST_TO_ADDR
// vc_control := control_computer ;
51448: LD_ADDR_OWVAR 38
51452: PUSH
51453: LD_INT 3
51455: ST_TO_ADDR
// vc_weapon := 59 ;
51456: LD_ADDR_OWVAR 40
51460: PUSH
51461: LD_INT 59
51463: ST_TO_ADDR
// result := CreateVehicle ;
51464: LD_ADDR_VAR 0 5
51468: PUSH
51469: CALL_OW 45
51473: ST_TO_ADDR
// SetDir ( result , d ) ;
51474: LD_VAR 0 5
51478: PPUSH
51479: LD_VAR 0 4
51483: PPUSH
51484: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
51488: LD_VAR 0 5
51492: PPUSH
51493: LD_VAR 0 2
51497: PPUSH
51498: LD_VAR 0 3
51502: PPUSH
51503: LD_INT 0
51505: PPUSH
51506: CALL_OW 48
// end ;
51510: LD_VAR 0 5
51514: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
51515: LD_INT 0
51517: PPUSH
51518: PPUSH
51519: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
51520: LD_ADDR_VAR 0 2
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 0
51530: PUSH
51531: LD_INT 0
51533: PUSH
51534: LD_INT 0
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: LIST
51541: LIST
51542: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
51543: LD_VAR 0 1
51547: NOT
51548: PUSH
51549: LD_VAR 0 1
51553: PPUSH
51554: CALL_OW 264
51558: PUSH
51559: LD_INT 12
51561: PUSH
51562: LD_INT 51
51564: PUSH
51565: LD_INT 32
51567: PUSH
51568: LD_INT 89
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: LIST
51575: LIST
51576: IN
51577: NOT
51578: OR
51579: IFFALSE 51583
// exit ;
51581: GO 51681
// for i := 1 to 3 do
51583: LD_ADDR_VAR 0 3
51587: PUSH
51588: DOUBLE
51589: LD_INT 1
51591: DEC
51592: ST_TO_ADDR
51593: LD_INT 3
51595: PUSH
51596: FOR_TO
51597: IFFALSE 51679
// begin tmp := GetCargo ( cargo , i ) ;
51599: LD_ADDR_VAR 0 4
51603: PUSH
51604: LD_VAR 0 1
51608: PPUSH
51609: LD_VAR 0 3
51613: PPUSH
51614: CALL_OW 289
51618: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
51619: LD_ADDR_VAR 0 2
51623: PUSH
51624: LD_VAR 0 2
51628: PPUSH
51629: LD_VAR 0 3
51633: PPUSH
51634: LD_VAR 0 4
51638: PPUSH
51639: CALL_OW 1
51643: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
51644: LD_ADDR_VAR 0 2
51648: PUSH
51649: LD_VAR 0 2
51653: PPUSH
51654: LD_INT 4
51656: PPUSH
51657: LD_VAR 0 2
51661: PUSH
51662: LD_INT 4
51664: ARRAY
51665: PUSH
51666: LD_VAR 0 4
51670: PLUS
51671: PPUSH
51672: CALL_OW 1
51676: ST_TO_ADDR
// end ;
51677: GO 51596
51679: POP
51680: POP
// end ;
51681: LD_VAR 0 2
51685: RET
// export function Length ( array ) ; begin
51686: LD_INT 0
51688: PPUSH
// result := array + 0 ;
51689: LD_ADDR_VAR 0 2
51693: PUSH
51694: LD_VAR 0 1
51698: PUSH
51699: LD_INT 0
51701: PLUS
51702: ST_TO_ADDR
// end ;
51703: LD_VAR 0 2
51707: RET
// export function PrepareArray ( array ) ; begin
51708: LD_INT 0
51710: PPUSH
// result := array diff 0 ;
51711: LD_ADDR_VAR 0 2
51715: PUSH
51716: LD_VAR 0 1
51720: PUSH
51721: LD_INT 0
51723: DIFF
51724: ST_TO_ADDR
// if not result [ 1 ] then
51725: LD_VAR 0 2
51729: PUSH
51730: LD_INT 1
51732: ARRAY
51733: NOT
51734: IFFALSE 51754
// result := Delete ( result , 1 ) ;
51736: LD_ADDR_VAR 0 2
51740: PUSH
51741: LD_VAR 0 2
51745: PPUSH
51746: LD_INT 1
51748: PPUSH
51749: CALL_OW 3
51753: ST_TO_ADDR
// end ;
51754: LD_VAR 0 2
51758: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
51759: LD_INT 0
51761: PPUSH
51762: PPUSH
51763: PPUSH
51764: PPUSH
// sibRocketRange := 25 ;
51765: LD_ADDR_VAR 0 6
51769: PUSH
51770: LD_INT 25
51772: ST_TO_ADDR
// result := false ;
51773: LD_ADDR_VAR 0 4
51777: PUSH
51778: LD_INT 0
51780: ST_TO_ADDR
// for i := 0 to 5 do
51781: LD_ADDR_VAR 0 5
51785: PUSH
51786: DOUBLE
51787: LD_INT 0
51789: DEC
51790: ST_TO_ADDR
51791: LD_INT 5
51793: PUSH
51794: FOR_TO
51795: IFFALSE 51862
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
51797: LD_VAR 0 1
51801: PPUSH
51802: LD_VAR 0 5
51806: PPUSH
51807: LD_VAR 0 6
51811: PPUSH
51812: CALL_OW 272
51816: PPUSH
51817: LD_VAR 0 2
51821: PPUSH
51822: LD_VAR 0 5
51826: PPUSH
51827: LD_VAR 0 6
51831: PPUSH
51832: CALL_OW 273
51836: PPUSH
51837: LD_VAR 0 3
51841: PPUSH
51842: CALL_OW 309
51846: IFFALSE 51860
// begin result := true ;
51848: LD_ADDR_VAR 0 4
51852: PUSH
51853: LD_INT 1
51855: ST_TO_ADDR
// exit ;
51856: POP
51857: POP
51858: GO 51864
// end ;
51860: GO 51794
51862: POP
51863: POP
// end ;
51864: LD_VAR 0 4
51868: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
51869: LD_INT 0
51871: PPUSH
51872: PPUSH
51873: PPUSH
// if btype = b_depot then
51874: LD_VAR 0 2
51878: PUSH
51879: LD_INT 0
51881: EQUAL
51882: IFFALSE 51894
// begin result := true ;
51884: LD_ADDR_VAR 0 3
51888: PUSH
51889: LD_INT 1
51891: ST_TO_ADDR
// exit ;
51892: GO 52010
// end ; pom := GetBase ( depot ) ;
51894: LD_ADDR_VAR 0 4
51898: PUSH
51899: LD_VAR 0 1
51903: PPUSH
51904: CALL_OW 274
51908: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
51909: LD_ADDR_VAR 0 5
51913: PUSH
51914: LD_VAR 0 2
51918: PPUSH
51919: LD_VAR 0 1
51923: PPUSH
51924: CALL_OW 248
51928: PPUSH
51929: CALL_OW 450
51933: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
51934: LD_ADDR_VAR 0 3
51938: PUSH
51939: LD_VAR 0 4
51943: PPUSH
51944: LD_INT 1
51946: PPUSH
51947: CALL_OW 275
51951: PUSH
51952: LD_VAR 0 5
51956: PUSH
51957: LD_INT 1
51959: ARRAY
51960: GREATEREQUAL
51961: PUSH
51962: LD_VAR 0 4
51966: PPUSH
51967: LD_INT 2
51969: PPUSH
51970: CALL_OW 275
51974: PUSH
51975: LD_VAR 0 5
51979: PUSH
51980: LD_INT 2
51982: ARRAY
51983: GREATEREQUAL
51984: AND
51985: PUSH
51986: LD_VAR 0 4
51990: PPUSH
51991: LD_INT 3
51993: PPUSH
51994: CALL_OW 275
51998: PUSH
51999: LD_VAR 0 5
52003: PUSH
52004: LD_INT 3
52006: ARRAY
52007: GREATEREQUAL
52008: AND
52009: ST_TO_ADDR
// end ;
52010: LD_VAR 0 3
52014: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52015: LD_INT 0
52017: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52018: LD_VAR 0 1
52022: PPUSH
52023: LD_VAR 0 2
52027: PPUSH
52028: LD_INT 0
52030: PPUSH
52031: LD_INT 0
52033: PPUSH
52034: LD_INT 1
52036: PPUSH
52037: LD_INT 0
52039: PPUSH
52040: CALL_OW 587
// end ;
52044: LD_VAR 0 3
52048: RET
// export function CenterOnNow ( unit ) ; begin
52049: LD_INT 0
52051: PPUSH
// result := IsInUnit ( unit ) ;
52052: LD_ADDR_VAR 0 2
52056: PUSH
52057: LD_VAR 0 1
52061: PPUSH
52062: CALL_OW 310
52066: ST_TO_ADDR
// if not result then
52067: LD_VAR 0 2
52071: NOT
52072: IFFALSE 52084
// result := unit ;
52074: LD_ADDR_VAR 0 2
52078: PUSH
52079: LD_VAR 0 1
52083: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52084: LD_VAR 0 1
52088: PPUSH
52089: CALL_OW 87
// end ;
52093: LD_VAR 0 2
52097: RET
// export function ComMoveHex ( unit , hex ) ; begin
52098: LD_INT 0
52100: PPUSH
// if not hex then
52101: LD_VAR 0 2
52105: NOT
52106: IFFALSE 52110
// exit ;
52108: GO 52163
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52110: LD_VAR 0 2
52114: PUSH
52115: LD_INT 1
52117: ARRAY
52118: PPUSH
52119: LD_VAR 0 2
52123: PUSH
52124: LD_INT 2
52126: ARRAY
52127: PPUSH
52128: CALL_OW 428
52132: IFFALSE 52136
// exit ;
52134: GO 52163
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52136: LD_VAR 0 1
52140: PPUSH
52141: LD_VAR 0 2
52145: PUSH
52146: LD_INT 1
52148: ARRAY
52149: PPUSH
52150: LD_VAR 0 2
52154: PUSH
52155: LD_INT 2
52157: ARRAY
52158: PPUSH
52159: CALL_OW 111
// end ;
52163: LD_VAR 0 3
52167: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52168: LD_INT 0
52170: PPUSH
52171: PPUSH
52172: PPUSH
// if not unit or not enemy then
52173: LD_VAR 0 1
52177: NOT
52178: PUSH
52179: LD_VAR 0 2
52183: NOT
52184: OR
52185: IFFALSE 52189
// exit ;
52187: GO 52313
// x := GetX ( enemy ) ;
52189: LD_ADDR_VAR 0 4
52193: PUSH
52194: LD_VAR 0 2
52198: PPUSH
52199: CALL_OW 250
52203: ST_TO_ADDR
// y := GetY ( enemy ) ;
52204: LD_ADDR_VAR 0 5
52208: PUSH
52209: LD_VAR 0 2
52213: PPUSH
52214: CALL_OW 251
52218: ST_TO_ADDR
// if ValidHex ( x , y ) then
52219: LD_VAR 0 4
52223: PPUSH
52224: LD_VAR 0 5
52228: PPUSH
52229: CALL_OW 488
52233: IFFALSE 52313
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52235: LD_VAR 0 2
52239: PPUSH
52240: CALL_OW 247
52244: PUSH
52245: LD_INT 3
52247: PUSH
52248: LD_INT 2
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: IN
52255: PUSH
52256: LD_VAR 0 1
52260: PPUSH
52261: CALL_OW 255
52265: PPUSH
52266: LD_VAR 0 2
52270: PPUSH
52271: CALL_OW 292
52275: OR
52276: IFFALSE 52294
// ComAttackUnit ( unit , enemy ) else
52278: LD_VAR 0 1
52282: PPUSH
52283: LD_VAR 0 2
52287: PPUSH
52288: CALL_OW 115
52292: GO 52313
// ComAgressiveMove ( unit , x , y ) ;
52294: LD_VAR 0 1
52298: PPUSH
52299: LD_VAR 0 4
52303: PPUSH
52304: LD_VAR 0 5
52308: PPUSH
52309: CALL_OW 114
// end ;
52313: LD_VAR 0 3
52317: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
52318: LD_INT 0
52320: PPUSH
52321: PPUSH
52322: PPUSH
// list := AreaToList ( area , 0 ) ;
52323: LD_ADDR_VAR 0 5
52327: PUSH
52328: LD_VAR 0 1
52332: PPUSH
52333: LD_INT 0
52335: PPUSH
52336: CALL_OW 517
52340: ST_TO_ADDR
// if not list then
52341: LD_VAR 0 5
52345: NOT
52346: IFFALSE 52350
// exit ;
52348: GO 52480
// if all then
52350: LD_VAR 0 2
52354: IFFALSE 52442
// begin for i := 1 to list [ 1 ] do
52356: LD_ADDR_VAR 0 4
52360: PUSH
52361: DOUBLE
52362: LD_INT 1
52364: DEC
52365: ST_TO_ADDR
52366: LD_VAR 0 5
52370: PUSH
52371: LD_INT 1
52373: ARRAY
52374: PUSH
52375: FOR_TO
52376: IFFALSE 52438
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
52378: LD_ADDR_VAR 0 3
52382: PUSH
52383: LD_VAR 0 3
52387: PPUSH
52388: LD_VAR 0 3
52392: PUSH
52393: LD_INT 1
52395: PLUS
52396: PPUSH
52397: LD_VAR 0 5
52401: PUSH
52402: LD_INT 1
52404: ARRAY
52405: PUSH
52406: LD_VAR 0 4
52410: ARRAY
52411: PUSH
52412: LD_VAR 0 5
52416: PUSH
52417: LD_INT 2
52419: ARRAY
52420: PUSH
52421: LD_VAR 0 4
52425: ARRAY
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PPUSH
52431: CALL_OW 1
52435: ST_TO_ADDR
52436: GO 52375
52438: POP
52439: POP
// exit ;
52440: GO 52480
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
52442: LD_ADDR_VAR 0 3
52446: PUSH
52447: LD_VAR 0 5
52451: PUSH
52452: LD_INT 1
52454: ARRAY
52455: PUSH
52456: LD_INT 1
52458: ARRAY
52459: PUSH
52460: LD_VAR 0 5
52464: PUSH
52465: LD_INT 2
52467: ARRAY
52468: PUSH
52469: LD_INT 1
52471: ARRAY
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: EMPTY
52478: LIST
52479: ST_TO_ADDR
// end ;
52480: LD_VAR 0 3
52484: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
52485: LD_INT 0
52487: PPUSH
52488: PPUSH
// list := AreaToList ( area , 0 ) ;
52489: LD_ADDR_VAR 0 4
52493: PUSH
52494: LD_VAR 0 1
52498: PPUSH
52499: LD_INT 0
52501: PPUSH
52502: CALL_OW 517
52506: ST_TO_ADDR
// if not list then
52507: LD_VAR 0 4
52511: NOT
52512: IFFALSE 52516
// exit ;
52514: GO 52557
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
52516: LD_ADDR_VAR 0 3
52520: PUSH
52521: LD_VAR 0 4
52525: PUSH
52526: LD_INT 1
52528: ARRAY
52529: PUSH
52530: LD_INT 1
52532: ARRAY
52533: PUSH
52534: LD_VAR 0 4
52538: PUSH
52539: LD_INT 2
52541: ARRAY
52542: PUSH
52543: LD_INT 1
52545: ARRAY
52546: PUSH
52547: LD_VAR 0 2
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: ST_TO_ADDR
// end ;
52557: LD_VAR 0 3
52561: RET
// export function First ( array ) ; begin
52562: LD_INT 0
52564: PPUSH
// if not array then
52565: LD_VAR 0 1
52569: NOT
52570: IFFALSE 52574
// exit ;
52572: GO 52588
// result := array [ 1 ] ;
52574: LD_ADDR_VAR 0 2
52578: PUSH
52579: LD_VAR 0 1
52583: PUSH
52584: LD_INT 1
52586: ARRAY
52587: ST_TO_ADDR
// end ;
52588: LD_VAR 0 2
52592: RET
// export function Last ( array ) ; begin
52593: LD_INT 0
52595: PPUSH
// if not array then
52596: LD_VAR 0 1
52600: NOT
52601: IFFALSE 52605
// exit ;
52603: GO 52621
// result := array [ array ] ;
52605: LD_ADDR_VAR 0 2
52609: PUSH
52610: LD_VAR 0 1
52614: PUSH
52615: LD_VAR 0 1
52619: ARRAY
52620: ST_TO_ADDR
// end ;
52621: LD_VAR 0 2
52625: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
52626: LD_INT 0
52628: PPUSH
52629: PPUSH
// result := [ ] ;
52630: LD_ADDR_VAR 0 5
52634: PUSH
52635: EMPTY
52636: ST_TO_ADDR
// if not array then
52637: LD_VAR 0 1
52641: NOT
52642: IFFALSE 52646
// exit ;
52644: GO 52758
// for i := 1 to array do
52646: LD_ADDR_VAR 0 6
52650: PUSH
52651: DOUBLE
52652: LD_INT 1
52654: DEC
52655: ST_TO_ADDR
52656: LD_VAR 0 1
52660: PUSH
52661: FOR_TO
52662: IFFALSE 52756
// if array [ i ] [ index ] = value then
52664: LD_VAR 0 1
52668: PUSH
52669: LD_VAR 0 6
52673: ARRAY
52674: PUSH
52675: LD_VAR 0 2
52679: ARRAY
52680: PUSH
52681: LD_VAR 0 3
52685: EQUAL
52686: IFFALSE 52754
// begin if indexColumn then
52688: LD_VAR 0 4
52692: IFFALSE 52728
// result := Join ( result , array [ i ] [ indexColumn ] ) else
52694: LD_ADDR_VAR 0 5
52698: PUSH
52699: LD_VAR 0 5
52703: PPUSH
52704: LD_VAR 0 1
52708: PUSH
52709: LD_VAR 0 6
52713: ARRAY
52714: PUSH
52715: LD_VAR 0 4
52719: ARRAY
52720: PPUSH
52721: CALL 47940 0 2
52725: ST_TO_ADDR
52726: GO 52754
// result := Join ( result , array [ i ] ) ;
52728: LD_ADDR_VAR 0 5
52732: PUSH
52733: LD_VAR 0 5
52737: PPUSH
52738: LD_VAR 0 1
52742: PUSH
52743: LD_VAR 0 6
52747: ARRAY
52748: PPUSH
52749: CALL 47940 0 2
52753: ST_TO_ADDR
// end ;
52754: GO 52661
52756: POP
52757: POP
// end ;
52758: LD_VAR 0 5
52762: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
52763: LD_INT 0
52765: PPUSH
// if not vehicles or not parkingPoint then
52766: LD_VAR 0 1
52770: NOT
52771: PUSH
52772: LD_VAR 0 2
52776: NOT
52777: OR
52778: IFFALSE 52782
// exit ;
52780: GO 52880
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
52782: LD_ADDR_VAR 0 1
52786: PUSH
52787: LD_VAR 0 1
52791: PPUSH
52792: LD_INT 50
52794: PUSH
52795: EMPTY
52796: LIST
52797: PUSH
52798: LD_INT 3
52800: PUSH
52801: LD_INT 92
52803: PUSH
52804: LD_VAR 0 2
52808: PUSH
52809: LD_INT 1
52811: ARRAY
52812: PUSH
52813: LD_VAR 0 2
52817: PUSH
52818: LD_INT 2
52820: ARRAY
52821: PUSH
52822: LD_INT 8
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: LIST
52829: LIST
52830: PUSH
52831: EMPTY
52832: LIST
52833: LIST
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PPUSH
52839: CALL_OW 72
52843: ST_TO_ADDR
// if not vehicles then
52844: LD_VAR 0 1
52848: NOT
52849: IFFALSE 52853
// exit ;
52851: GO 52880
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
52853: LD_VAR 0 1
52857: PPUSH
52858: LD_VAR 0 2
52862: PUSH
52863: LD_INT 1
52865: ARRAY
52866: PPUSH
52867: LD_VAR 0 2
52871: PUSH
52872: LD_INT 2
52874: ARRAY
52875: PPUSH
52876: CALL_OW 111
// end ;
52880: LD_VAR 0 3
52884: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
52885: LD_INT 0
52887: PPUSH
52888: PPUSH
52889: PPUSH
// if not side or not area then
52890: LD_VAR 0 1
52894: NOT
52895: PUSH
52896: LD_VAR 0 2
52900: NOT
52901: OR
52902: IFFALSE 52906
// exit ;
52904: GO 53025
// tmp := AreaToList ( area , 0 ) ;
52906: LD_ADDR_VAR 0 5
52910: PUSH
52911: LD_VAR 0 2
52915: PPUSH
52916: LD_INT 0
52918: PPUSH
52919: CALL_OW 517
52923: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
52924: LD_ADDR_VAR 0 4
52928: PUSH
52929: DOUBLE
52930: LD_INT 1
52932: DEC
52933: ST_TO_ADDR
52934: LD_VAR 0 5
52938: PUSH
52939: LD_INT 1
52941: ARRAY
52942: PUSH
52943: FOR_TO
52944: IFFALSE 53023
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
52946: LD_VAR 0 5
52950: PUSH
52951: LD_INT 1
52953: ARRAY
52954: PUSH
52955: LD_VAR 0 4
52959: ARRAY
52960: PPUSH
52961: LD_VAR 0 5
52965: PUSH
52966: LD_INT 2
52968: ARRAY
52969: PUSH
52970: LD_VAR 0 4
52974: ARRAY
52975: PPUSH
52976: CALL_OW 351
52980: IFFALSE 53021
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
52982: LD_VAR 0 5
52986: PUSH
52987: LD_INT 1
52989: ARRAY
52990: PUSH
52991: LD_VAR 0 4
52995: ARRAY
52996: PPUSH
52997: LD_VAR 0 5
53001: PUSH
53002: LD_INT 2
53004: ARRAY
53005: PUSH
53006: LD_VAR 0 4
53010: ARRAY
53011: PPUSH
53012: LD_VAR 0 1
53016: PPUSH
53017: CALL_OW 244
// end ;
53021: GO 52943
53023: POP
53024: POP
// end ; end_of_file end_of_file
53025: LD_VAR 0 3
53029: RET
// export globalGameSaveCounter ; every 0 0$1 do
53030: GO 53032
53032: DISABLE
// begin enable ;
53033: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53034: LD_STRING updateTimer(
53036: PUSH
53037: LD_OWVAR 1
53041: STR
53042: PUSH
53043: LD_STRING );
53045: STR
53046: PPUSH
53047: CALL_OW 559
// end ;
53051: END
// every 0 0$1 do
53052: GO 53054
53054: DISABLE
// begin globalGameSaveCounter := 0 ;
53055: LD_ADDR_EXP 37
53059: PUSH
53060: LD_INT 0
53062: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53063: LD_STRING setGameSaveCounter(0)
53065: PPUSH
53066: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53070: LD_STRING initStreamRollete();
53072: PPUSH
53073: CALL_OW 559
// InitStreamMode ;
53077: CALL 54420 0 0
// DefineStreamItems ( false ) ;
53081: LD_INT 0
53083: PPUSH
53084: CALL 54884 0 1
// end ;
53088: END
// export function SOS_MapStart ( ) ; begin
53089: LD_INT 0
53091: PPUSH
// if streamModeActive then
53092: LD_EXP 38
53096: IFFALSE 53105
// DefineStreamItems ( true ) ;
53098: LD_INT 1
53100: PPUSH
53101: CALL 54884 0 1
// UpdateLuaVariables ( ) ;
53105: CALL 53122 0 0
// UpdateFactoryWaypoints ( ) ;
53109: CALL 67886 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53113: CALL 68138 0 0
// end ;
53117: LD_VAR 0 1
53121: RET
// function UpdateLuaVariables ( ) ; begin
53122: LD_INT 0
53124: PPUSH
// if globalGameSaveCounter then
53125: LD_EXP 37
53129: IFFALSE 53163
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53131: LD_ADDR_EXP 37
53135: PUSH
53136: LD_EXP 37
53140: PPUSH
53141: CALL 49301 0 1
53145: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53146: LD_STRING setGameSaveCounter(
53148: PUSH
53149: LD_EXP 37
53153: STR
53154: PUSH
53155: LD_STRING )
53157: STR
53158: PPUSH
53159: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53163: LD_STRING setGameDifficulty(
53165: PUSH
53166: LD_OWVAR 67
53170: STR
53171: PUSH
53172: LD_STRING )
53174: STR
53175: PPUSH
53176: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
53180: LD_STRING displayDifficulty(
53182: PUSH
53183: LD_OWVAR 67
53187: STR
53188: PUSH
53189: LD_STRING )
53191: STR
53192: PPUSH
53193: CALL_OW 559
// end ;
53197: LD_VAR 0 1
53201: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
53202: LD_INT 0
53204: PPUSH
// if p2 = stream_mode then
53205: LD_VAR 0 2
53209: PUSH
53210: LD_INT 100
53212: EQUAL
53213: IFFALSE 54216
// begin if not StreamModeActive then
53215: LD_EXP 38
53219: NOT
53220: IFFALSE 53230
// StreamModeActive := true ;
53222: LD_ADDR_EXP 38
53226: PUSH
53227: LD_INT 1
53229: ST_TO_ADDR
// if p3 = 0 then
53230: LD_VAR 0 3
53234: PUSH
53235: LD_INT 0
53237: EQUAL
53238: IFFALSE 53244
// InitStreamMode ;
53240: CALL 54420 0 0
// if p3 = 1 then
53244: LD_VAR 0 3
53248: PUSH
53249: LD_INT 1
53251: EQUAL
53252: IFFALSE 53262
// sRocket := true ;
53254: LD_ADDR_EXP 43
53258: PUSH
53259: LD_INT 1
53261: ST_TO_ADDR
// if p3 = 2 then
53262: LD_VAR 0 3
53266: PUSH
53267: LD_INT 2
53269: EQUAL
53270: IFFALSE 53280
// sSpeed := true ;
53272: LD_ADDR_EXP 42
53276: PUSH
53277: LD_INT 1
53279: ST_TO_ADDR
// if p3 = 3 then
53280: LD_VAR 0 3
53284: PUSH
53285: LD_INT 3
53287: EQUAL
53288: IFFALSE 53298
// sEngine := true ;
53290: LD_ADDR_EXP 44
53294: PUSH
53295: LD_INT 1
53297: ST_TO_ADDR
// if p3 = 4 then
53298: LD_VAR 0 3
53302: PUSH
53303: LD_INT 4
53305: EQUAL
53306: IFFALSE 53316
// sSpec := true ;
53308: LD_ADDR_EXP 41
53312: PUSH
53313: LD_INT 1
53315: ST_TO_ADDR
// if p3 = 5 then
53316: LD_VAR 0 3
53320: PUSH
53321: LD_INT 5
53323: EQUAL
53324: IFFALSE 53334
// sLevel := true ;
53326: LD_ADDR_EXP 45
53330: PUSH
53331: LD_INT 1
53333: ST_TO_ADDR
// if p3 = 6 then
53334: LD_VAR 0 3
53338: PUSH
53339: LD_INT 6
53341: EQUAL
53342: IFFALSE 53352
// sArmoury := true ;
53344: LD_ADDR_EXP 46
53348: PUSH
53349: LD_INT 1
53351: ST_TO_ADDR
// if p3 = 7 then
53352: LD_VAR 0 3
53356: PUSH
53357: LD_INT 7
53359: EQUAL
53360: IFFALSE 53370
// sRadar := true ;
53362: LD_ADDR_EXP 47
53366: PUSH
53367: LD_INT 1
53369: ST_TO_ADDR
// if p3 = 8 then
53370: LD_VAR 0 3
53374: PUSH
53375: LD_INT 8
53377: EQUAL
53378: IFFALSE 53388
// sBunker := true ;
53380: LD_ADDR_EXP 48
53384: PUSH
53385: LD_INT 1
53387: ST_TO_ADDR
// if p3 = 9 then
53388: LD_VAR 0 3
53392: PUSH
53393: LD_INT 9
53395: EQUAL
53396: IFFALSE 53406
// sHack := true ;
53398: LD_ADDR_EXP 49
53402: PUSH
53403: LD_INT 1
53405: ST_TO_ADDR
// if p3 = 10 then
53406: LD_VAR 0 3
53410: PUSH
53411: LD_INT 10
53413: EQUAL
53414: IFFALSE 53424
// sFire := true ;
53416: LD_ADDR_EXP 50
53420: PUSH
53421: LD_INT 1
53423: ST_TO_ADDR
// if p3 = 11 then
53424: LD_VAR 0 3
53428: PUSH
53429: LD_INT 11
53431: EQUAL
53432: IFFALSE 53442
// sRefresh := true ;
53434: LD_ADDR_EXP 51
53438: PUSH
53439: LD_INT 1
53441: ST_TO_ADDR
// if p3 = 12 then
53442: LD_VAR 0 3
53446: PUSH
53447: LD_INT 12
53449: EQUAL
53450: IFFALSE 53460
// sExp := true ;
53452: LD_ADDR_EXP 52
53456: PUSH
53457: LD_INT 1
53459: ST_TO_ADDR
// if p3 = 13 then
53460: LD_VAR 0 3
53464: PUSH
53465: LD_INT 13
53467: EQUAL
53468: IFFALSE 53478
// sDepot := true ;
53470: LD_ADDR_EXP 53
53474: PUSH
53475: LD_INT 1
53477: ST_TO_ADDR
// if p3 = 14 then
53478: LD_VAR 0 3
53482: PUSH
53483: LD_INT 14
53485: EQUAL
53486: IFFALSE 53496
// sFlag := true ;
53488: LD_ADDR_EXP 54
53492: PUSH
53493: LD_INT 1
53495: ST_TO_ADDR
// if p3 = 15 then
53496: LD_VAR 0 3
53500: PUSH
53501: LD_INT 15
53503: EQUAL
53504: IFFALSE 53514
// sKamikadze := true ;
53506: LD_ADDR_EXP 62
53510: PUSH
53511: LD_INT 1
53513: ST_TO_ADDR
// if p3 = 16 then
53514: LD_VAR 0 3
53518: PUSH
53519: LD_INT 16
53521: EQUAL
53522: IFFALSE 53532
// sTroll := true ;
53524: LD_ADDR_EXP 63
53528: PUSH
53529: LD_INT 1
53531: ST_TO_ADDR
// if p3 = 17 then
53532: LD_VAR 0 3
53536: PUSH
53537: LD_INT 17
53539: EQUAL
53540: IFFALSE 53550
// sSlow := true ;
53542: LD_ADDR_EXP 64
53546: PUSH
53547: LD_INT 1
53549: ST_TO_ADDR
// if p3 = 18 then
53550: LD_VAR 0 3
53554: PUSH
53555: LD_INT 18
53557: EQUAL
53558: IFFALSE 53568
// sLack := true ;
53560: LD_ADDR_EXP 65
53564: PUSH
53565: LD_INT 1
53567: ST_TO_ADDR
// if p3 = 19 then
53568: LD_VAR 0 3
53572: PUSH
53573: LD_INT 19
53575: EQUAL
53576: IFFALSE 53586
// sTank := true ;
53578: LD_ADDR_EXP 67
53582: PUSH
53583: LD_INT 1
53585: ST_TO_ADDR
// if p3 = 20 then
53586: LD_VAR 0 3
53590: PUSH
53591: LD_INT 20
53593: EQUAL
53594: IFFALSE 53604
// sRemote := true ;
53596: LD_ADDR_EXP 68
53600: PUSH
53601: LD_INT 1
53603: ST_TO_ADDR
// if p3 = 21 then
53604: LD_VAR 0 3
53608: PUSH
53609: LD_INT 21
53611: EQUAL
53612: IFFALSE 53622
// sPowell := true ;
53614: LD_ADDR_EXP 69
53618: PUSH
53619: LD_INT 1
53621: ST_TO_ADDR
// if p3 = 22 then
53622: LD_VAR 0 3
53626: PUSH
53627: LD_INT 22
53629: EQUAL
53630: IFFALSE 53640
// sTeleport := true ;
53632: LD_ADDR_EXP 72
53636: PUSH
53637: LD_INT 1
53639: ST_TO_ADDR
// if p3 = 23 then
53640: LD_VAR 0 3
53644: PUSH
53645: LD_INT 23
53647: EQUAL
53648: IFFALSE 53658
// sOilTower := true ;
53650: LD_ADDR_EXP 74
53654: PUSH
53655: LD_INT 1
53657: ST_TO_ADDR
// if p3 = 24 then
53658: LD_VAR 0 3
53662: PUSH
53663: LD_INT 24
53665: EQUAL
53666: IFFALSE 53676
// sShovel := true ;
53668: LD_ADDR_EXP 75
53672: PUSH
53673: LD_INT 1
53675: ST_TO_ADDR
// if p3 = 25 then
53676: LD_VAR 0 3
53680: PUSH
53681: LD_INT 25
53683: EQUAL
53684: IFFALSE 53694
// sSheik := true ;
53686: LD_ADDR_EXP 76
53690: PUSH
53691: LD_INT 1
53693: ST_TO_ADDR
// if p3 = 26 then
53694: LD_VAR 0 3
53698: PUSH
53699: LD_INT 26
53701: EQUAL
53702: IFFALSE 53712
// sEarthquake := true ;
53704: LD_ADDR_EXP 78
53708: PUSH
53709: LD_INT 1
53711: ST_TO_ADDR
// if p3 = 27 then
53712: LD_VAR 0 3
53716: PUSH
53717: LD_INT 27
53719: EQUAL
53720: IFFALSE 53730
// sAI := true ;
53722: LD_ADDR_EXP 79
53726: PUSH
53727: LD_INT 1
53729: ST_TO_ADDR
// if p3 = 28 then
53730: LD_VAR 0 3
53734: PUSH
53735: LD_INT 28
53737: EQUAL
53738: IFFALSE 53748
// sCargo := true ;
53740: LD_ADDR_EXP 82
53744: PUSH
53745: LD_INT 1
53747: ST_TO_ADDR
// if p3 = 29 then
53748: LD_VAR 0 3
53752: PUSH
53753: LD_INT 29
53755: EQUAL
53756: IFFALSE 53766
// sDLaser := true ;
53758: LD_ADDR_EXP 83
53762: PUSH
53763: LD_INT 1
53765: ST_TO_ADDR
// if p3 = 30 then
53766: LD_VAR 0 3
53770: PUSH
53771: LD_INT 30
53773: EQUAL
53774: IFFALSE 53784
// sExchange := true ;
53776: LD_ADDR_EXP 84
53780: PUSH
53781: LD_INT 1
53783: ST_TO_ADDR
// if p3 = 31 then
53784: LD_VAR 0 3
53788: PUSH
53789: LD_INT 31
53791: EQUAL
53792: IFFALSE 53802
// sFac := true ;
53794: LD_ADDR_EXP 85
53798: PUSH
53799: LD_INT 1
53801: ST_TO_ADDR
// if p3 = 32 then
53802: LD_VAR 0 3
53806: PUSH
53807: LD_INT 32
53809: EQUAL
53810: IFFALSE 53820
// sPower := true ;
53812: LD_ADDR_EXP 86
53816: PUSH
53817: LD_INT 1
53819: ST_TO_ADDR
// if p3 = 33 then
53820: LD_VAR 0 3
53824: PUSH
53825: LD_INT 33
53827: EQUAL
53828: IFFALSE 53838
// sRandom := true ;
53830: LD_ADDR_EXP 87
53834: PUSH
53835: LD_INT 1
53837: ST_TO_ADDR
// if p3 = 34 then
53838: LD_VAR 0 3
53842: PUSH
53843: LD_INT 34
53845: EQUAL
53846: IFFALSE 53856
// sShield := true ;
53848: LD_ADDR_EXP 88
53852: PUSH
53853: LD_INT 1
53855: ST_TO_ADDR
// if p3 = 35 then
53856: LD_VAR 0 3
53860: PUSH
53861: LD_INT 35
53863: EQUAL
53864: IFFALSE 53874
// sTime := true ;
53866: LD_ADDR_EXP 89
53870: PUSH
53871: LD_INT 1
53873: ST_TO_ADDR
// if p3 = 36 then
53874: LD_VAR 0 3
53878: PUSH
53879: LD_INT 36
53881: EQUAL
53882: IFFALSE 53892
// sTools := true ;
53884: LD_ADDR_EXP 90
53888: PUSH
53889: LD_INT 1
53891: ST_TO_ADDR
// if p3 = 101 then
53892: LD_VAR 0 3
53896: PUSH
53897: LD_INT 101
53899: EQUAL
53900: IFFALSE 53910
// sSold := true ;
53902: LD_ADDR_EXP 55
53906: PUSH
53907: LD_INT 1
53909: ST_TO_ADDR
// if p3 = 102 then
53910: LD_VAR 0 3
53914: PUSH
53915: LD_INT 102
53917: EQUAL
53918: IFFALSE 53928
// sDiff := true ;
53920: LD_ADDR_EXP 56
53924: PUSH
53925: LD_INT 1
53927: ST_TO_ADDR
// if p3 = 103 then
53928: LD_VAR 0 3
53932: PUSH
53933: LD_INT 103
53935: EQUAL
53936: IFFALSE 53946
// sFog := true ;
53938: LD_ADDR_EXP 59
53942: PUSH
53943: LD_INT 1
53945: ST_TO_ADDR
// if p3 = 104 then
53946: LD_VAR 0 3
53950: PUSH
53951: LD_INT 104
53953: EQUAL
53954: IFFALSE 53964
// sReset := true ;
53956: LD_ADDR_EXP 60
53960: PUSH
53961: LD_INT 1
53963: ST_TO_ADDR
// if p3 = 105 then
53964: LD_VAR 0 3
53968: PUSH
53969: LD_INT 105
53971: EQUAL
53972: IFFALSE 53982
// sSun := true ;
53974: LD_ADDR_EXP 61
53978: PUSH
53979: LD_INT 1
53981: ST_TO_ADDR
// if p3 = 106 then
53982: LD_VAR 0 3
53986: PUSH
53987: LD_INT 106
53989: EQUAL
53990: IFFALSE 54000
// sTiger := true ;
53992: LD_ADDR_EXP 57
53996: PUSH
53997: LD_INT 1
53999: ST_TO_ADDR
// if p3 = 107 then
54000: LD_VAR 0 3
54004: PUSH
54005: LD_INT 107
54007: EQUAL
54008: IFFALSE 54018
// sBomb := true ;
54010: LD_ADDR_EXP 58
54014: PUSH
54015: LD_INT 1
54017: ST_TO_ADDR
// if p3 = 108 then
54018: LD_VAR 0 3
54022: PUSH
54023: LD_INT 108
54025: EQUAL
54026: IFFALSE 54036
// sWound := true ;
54028: LD_ADDR_EXP 66
54032: PUSH
54033: LD_INT 1
54035: ST_TO_ADDR
// if p3 = 109 then
54036: LD_VAR 0 3
54040: PUSH
54041: LD_INT 109
54043: EQUAL
54044: IFFALSE 54054
// sBetray := true ;
54046: LD_ADDR_EXP 70
54050: PUSH
54051: LD_INT 1
54053: ST_TO_ADDR
// if p3 = 110 then
54054: LD_VAR 0 3
54058: PUSH
54059: LD_INT 110
54061: EQUAL
54062: IFFALSE 54072
// sContamin := true ;
54064: LD_ADDR_EXP 71
54068: PUSH
54069: LD_INT 1
54071: ST_TO_ADDR
// if p3 = 111 then
54072: LD_VAR 0 3
54076: PUSH
54077: LD_INT 111
54079: EQUAL
54080: IFFALSE 54090
// sOil := true ;
54082: LD_ADDR_EXP 73
54086: PUSH
54087: LD_INT 1
54089: ST_TO_ADDR
// if p3 = 112 then
54090: LD_VAR 0 3
54094: PUSH
54095: LD_INT 112
54097: EQUAL
54098: IFFALSE 54108
// sStu := true ;
54100: LD_ADDR_EXP 77
54104: PUSH
54105: LD_INT 1
54107: ST_TO_ADDR
// if p3 = 113 then
54108: LD_VAR 0 3
54112: PUSH
54113: LD_INT 113
54115: EQUAL
54116: IFFALSE 54126
// sBazooka := true ;
54118: LD_ADDR_EXP 80
54122: PUSH
54123: LD_INT 1
54125: ST_TO_ADDR
// if p3 = 114 then
54126: LD_VAR 0 3
54130: PUSH
54131: LD_INT 114
54133: EQUAL
54134: IFFALSE 54144
// sMortar := true ;
54136: LD_ADDR_EXP 81
54140: PUSH
54141: LD_INT 1
54143: ST_TO_ADDR
// if p3 = 115 then
54144: LD_VAR 0 3
54148: PUSH
54149: LD_INT 115
54151: EQUAL
54152: IFFALSE 54162
// sRanger := true ;
54154: LD_ADDR_EXP 91
54158: PUSH
54159: LD_INT 1
54161: ST_TO_ADDR
// if p3 = 116 then
54162: LD_VAR 0 3
54166: PUSH
54167: LD_INT 116
54169: EQUAL
54170: IFFALSE 54180
// sComputer := true ;
54172: LD_ADDR_EXP 92
54176: PUSH
54177: LD_INT 1
54179: ST_TO_ADDR
// if p3 = 117 then
54180: LD_VAR 0 3
54184: PUSH
54185: LD_INT 117
54187: EQUAL
54188: IFFALSE 54198
// s30 := true ;
54190: LD_ADDR_EXP 93
54194: PUSH
54195: LD_INT 1
54197: ST_TO_ADDR
// if p3 = 118 then
54198: LD_VAR 0 3
54202: PUSH
54203: LD_INT 118
54205: EQUAL
54206: IFFALSE 54216
// s60 := true ;
54208: LD_ADDR_EXP 94
54212: PUSH
54213: LD_INT 1
54215: ST_TO_ADDR
// end ; if p2 = hack_mode then
54216: LD_VAR 0 2
54220: PUSH
54221: LD_INT 101
54223: EQUAL
54224: IFFALSE 54352
// begin case p3 of 1 :
54226: LD_VAR 0 3
54230: PUSH
54231: LD_INT 1
54233: DOUBLE
54234: EQUAL
54235: IFTRUE 54239
54237: GO 54246
54239: POP
// hHackUnlimitedResources ; 2 :
54240: CALL 66499 0 0
54244: GO 54352
54246: LD_INT 2
54248: DOUBLE
54249: EQUAL
54250: IFTRUE 54254
54252: GO 54261
54254: POP
// hHackSetLevel10 ; 3 :
54255: CALL 66632 0 0
54259: GO 54352
54261: LD_INT 3
54263: DOUBLE
54264: EQUAL
54265: IFTRUE 54269
54267: GO 54276
54269: POP
// hHackSetLevel10YourUnits ; 4 :
54270: CALL 66717 0 0
54274: GO 54352
54276: LD_INT 4
54278: DOUBLE
54279: EQUAL
54280: IFTRUE 54284
54282: GO 54291
54284: POP
// hHackInvincible ; 5 :
54285: CALL 67165 0 0
54289: GO 54352
54291: LD_INT 5
54293: DOUBLE
54294: EQUAL
54295: IFTRUE 54299
54297: GO 54306
54299: POP
// hHackInvisible ; 6 :
54300: CALL 67276 0 0
54304: GO 54352
54306: LD_INT 6
54308: DOUBLE
54309: EQUAL
54310: IFTRUE 54314
54312: GO 54321
54314: POP
// hHackChangeYourSide ; 7 :
54315: CALL 67333 0 0
54319: GO 54352
54321: LD_INT 7
54323: DOUBLE
54324: EQUAL
54325: IFTRUE 54329
54327: GO 54336
54329: POP
// hHackChangeUnitSide ; 8 :
54330: CALL 67375 0 0
54334: GO 54352
54336: LD_INT 8
54338: DOUBLE
54339: EQUAL
54340: IFTRUE 54344
54342: GO 54351
54344: POP
// hHackFog ; end ;
54345: CALL 67476 0 0
54349: GO 54352
54351: POP
// end ; if p2 = game_save_mode then
54352: LD_VAR 0 2
54356: PUSH
54357: LD_INT 102
54359: EQUAL
54360: IFFALSE 54415
// begin if p3 = 1 then
54362: LD_VAR 0 3
54366: PUSH
54367: LD_INT 1
54369: EQUAL
54370: IFFALSE 54382
// globalGameSaveCounter := p4 ;
54372: LD_ADDR_EXP 37
54376: PUSH
54377: LD_VAR 0 4
54381: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
54382: LD_VAR 0 3
54386: PUSH
54387: LD_INT 2
54389: EQUAL
54390: PUSH
54391: LD_EXP 37
54395: AND
54396: IFFALSE 54415
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54398: LD_STRING setGameSaveCounter(
54400: PUSH
54401: LD_EXP 37
54405: STR
54406: PUSH
54407: LD_STRING )
54409: STR
54410: PPUSH
54411: CALL_OW 559
// end ; end ;
54415: LD_VAR 0 7
54419: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
54420: LD_INT 0
54422: PPUSH
// streamModeActive := false ;
54423: LD_ADDR_EXP 38
54427: PUSH
54428: LD_INT 0
54430: ST_TO_ADDR
// normalCounter := 36 ;
54431: LD_ADDR_EXP 39
54435: PUSH
54436: LD_INT 36
54438: ST_TO_ADDR
// hardcoreCounter := 18 ;
54439: LD_ADDR_EXP 40
54443: PUSH
54444: LD_INT 18
54446: ST_TO_ADDR
// sRocket := false ;
54447: LD_ADDR_EXP 43
54451: PUSH
54452: LD_INT 0
54454: ST_TO_ADDR
// sSpeed := false ;
54455: LD_ADDR_EXP 42
54459: PUSH
54460: LD_INT 0
54462: ST_TO_ADDR
// sEngine := false ;
54463: LD_ADDR_EXP 44
54467: PUSH
54468: LD_INT 0
54470: ST_TO_ADDR
// sSpec := false ;
54471: LD_ADDR_EXP 41
54475: PUSH
54476: LD_INT 0
54478: ST_TO_ADDR
// sLevel := false ;
54479: LD_ADDR_EXP 45
54483: PUSH
54484: LD_INT 0
54486: ST_TO_ADDR
// sArmoury := false ;
54487: LD_ADDR_EXP 46
54491: PUSH
54492: LD_INT 0
54494: ST_TO_ADDR
// sRadar := false ;
54495: LD_ADDR_EXP 47
54499: PUSH
54500: LD_INT 0
54502: ST_TO_ADDR
// sBunker := false ;
54503: LD_ADDR_EXP 48
54507: PUSH
54508: LD_INT 0
54510: ST_TO_ADDR
// sHack := false ;
54511: LD_ADDR_EXP 49
54515: PUSH
54516: LD_INT 0
54518: ST_TO_ADDR
// sFire := false ;
54519: LD_ADDR_EXP 50
54523: PUSH
54524: LD_INT 0
54526: ST_TO_ADDR
// sRefresh := false ;
54527: LD_ADDR_EXP 51
54531: PUSH
54532: LD_INT 0
54534: ST_TO_ADDR
// sExp := false ;
54535: LD_ADDR_EXP 52
54539: PUSH
54540: LD_INT 0
54542: ST_TO_ADDR
// sDepot := false ;
54543: LD_ADDR_EXP 53
54547: PUSH
54548: LD_INT 0
54550: ST_TO_ADDR
// sFlag := false ;
54551: LD_ADDR_EXP 54
54555: PUSH
54556: LD_INT 0
54558: ST_TO_ADDR
// sKamikadze := false ;
54559: LD_ADDR_EXP 62
54563: PUSH
54564: LD_INT 0
54566: ST_TO_ADDR
// sTroll := false ;
54567: LD_ADDR_EXP 63
54571: PUSH
54572: LD_INT 0
54574: ST_TO_ADDR
// sSlow := false ;
54575: LD_ADDR_EXP 64
54579: PUSH
54580: LD_INT 0
54582: ST_TO_ADDR
// sLack := false ;
54583: LD_ADDR_EXP 65
54587: PUSH
54588: LD_INT 0
54590: ST_TO_ADDR
// sTank := false ;
54591: LD_ADDR_EXP 67
54595: PUSH
54596: LD_INT 0
54598: ST_TO_ADDR
// sRemote := false ;
54599: LD_ADDR_EXP 68
54603: PUSH
54604: LD_INT 0
54606: ST_TO_ADDR
// sPowell := false ;
54607: LD_ADDR_EXP 69
54611: PUSH
54612: LD_INT 0
54614: ST_TO_ADDR
// sTeleport := false ;
54615: LD_ADDR_EXP 72
54619: PUSH
54620: LD_INT 0
54622: ST_TO_ADDR
// sOilTower := false ;
54623: LD_ADDR_EXP 74
54627: PUSH
54628: LD_INT 0
54630: ST_TO_ADDR
// sShovel := false ;
54631: LD_ADDR_EXP 75
54635: PUSH
54636: LD_INT 0
54638: ST_TO_ADDR
// sSheik := false ;
54639: LD_ADDR_EXP 76
54643: PUSH
54644: LD_INT 0
54646: ST_TO_ADDR
// sEarthquake := false ;
54647: LD_ADDR_EXP 78
54651: PUSH
54652: LD_INT 0
54654: ST_TO_ADDR
// sAI := false ;
54655: LD_ADDR_EXP 79
54659: PUSH
54660: LD_INT 0
54662: ST_TO_ADDR
// sCargo := false ;
54663: LD_ADDR_EXP 82
54667: PUSH
54668: LD_INT 0
54670: ST_TO_ADDR
// sDLaser := false ;
54671: LD_ADDR_EXP 83
54675: PUSH
54676: LD_INT 0
54678: ST_TO_ADDR
// sExchange := false ;
54679: LD_ADDR_EXP 84
54683: PUSH
54684: LD_INT 0
54686: ST_TO_ADDR
// sFac := false ;
54687: LD_ADDR_EXP 85
54691: PUSH
54692: LD_INT 0
54694: ST_TO_ADDR
// sPower := false ;
54695: LD_ADDR_EXP 86
54699: PUSH
54700: LD_INT 0
54702: ST_TO_ADDR
// sRandom := false ;
54703: LD_ADDR_EXP 87
54707: PUSH
54708: LD_INT 0
54710: ST_TO_ADDR
// sShield := false ;
54711: LD_ADDR_EXP 88
54715: PUSH
54716: LD_INT 0
54718: ST_TO_ADDR
// sTime := false ;
54719: LD_ADDR_EXP 89
54723: PUSH
54724: LD_INT 0
54726: ST_TO_ADDR
// sTools := false ;
54727: LD_ADDR_EXP 90
54731: PUSH
54732: LD_INT 0
54734: ST_TO_ADDR
// sSold := false ;
54735: LD_ADDR_EXP 55
54739: PUSH
54740: LD_INT 0
54742: ST_TO_ADDR
// sDiff := false ;
54743: LD_ADDR_EXP 56
54747: PUSH
54748: LD_INT 0
54750: ST_TO_ADDR
// sFog := false ;
54751: LD_ADDR_EXP 59
54755: PUSH
54756: LD_INT 0
54758: ST_TO_ADDR
// sReset := false ;
54759: LD_ADDR_EXP 60
54763: PUSH
54764: LD_INT 0
54766: ST_TO_ADDR
// sSun := false ;
54767: LD_ADDR_EXP 61
54771: PUSH
54772: LD_INT 0
54774: ST_TO_ADDR
// sTiger := false ;
54775: LD_ADDR_EXP 57
54779: PUSH
54780: LD_INT 0
54782: ST_TO_ADDR
// sBomb := false ;
54783: LD_ADDR_EXP 58
54787: PUSH
54788: LD_INT 0
54790: ST_TO_ADDR
// sWound := false ;
54791: LD_ADDR_EXP 66
54795: PUSH
54796: LD_INT 0
54798: ST_TO_ADDR
// sBetray := false ;
54799: LD_ADDR_EXP 70
54803: PUSH
54804: LD_INT 0
54806: ST_TO_ADDR
// sContamin := false ;
54807: LD_ADDR_EXP 71
54811: PUSH
54812: LD_INT 0
54814: ST_TO_ADDR
// sOil := false ;
54815: LD_ADDR_EXP 73
54819: PUSH
54820: LD_INT 0
54822: ST_TO_ADDR
// sStu := false ;
54823: LD_ADDR_EXP 77
54827: PUSH
54828: LD_INT 0
54830: ST_TO_ADDR
// sBazooka := false ;
54831: LD_ADDR_EXP 80
54835: PUSH
54836: LD_INT 0
54838: ST_TO_ADDR
// sMortar := false ;
54839: LD_ADDR_EXP 81
54843: PUSH
54844: LD_INT 0
54846: ST_TO_ADDR
// sRanger := false ;
54847: LD_ADDR_EXP 91
54851: PUSH
54852: LD_INT 0
54854: ST_TO_ADDR
// sComputer := false ;
54855: LD_ADDR_EXP 92
54859: PUSH
54860: LD_INT 0
54862: ST_TO_ADDR
// s30 := false ;
54863: LD_ADDR_EXP 93
54867: PUSH
54868: LD_INT 0
54870: ST_TO_ADDR
// s60 := false ;
54871: LD_ADDR_EXP 94
54875: PUSH
54876: LD_INT 0
54878: ST_TO_ADDR
// end ;
54879: LD_VAR 0 1
54883: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
54884: LD_INT 0
54886: PPUSH
54887: PPUSH
54888: PPUSH
54889: PPUSH
54890: PPUSH
54891: PPUSH
54892: PPUSH
// result := [ ] ;
54893: LD_ADDR_VAR 0 2
54897: PUSH
54898: EMPTY
54899: ST_TO_ADDR
// if campaign_id = 1 then
54900: LD_OWVAR 69
54904: PUSH
54905: LD_INT 1
54907: EQUAL
54908: IFFALSE 58074
// begin case mission_number of 1 :
54910: LD_OWVAR 70
54914: PUSH
54915: LD_INT 1
54917: DOUBLE
54918: EQUAL
54919: IFTRUE 54923
54921: GO 54999
54923: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
54924: LD_ADDR_VAR 0 2
54928: PUSH
54929: LD_INT 2
54931: PUSH
54932: LD_INT 4
54934: PUSH
54935: LD_INT 11
54937: PUSH
54938: LD_INT 12
54940: PUSH
54941: LD_INT 15
54943: PUSH
54944: LD_INT 16
54946: PUSH
54947: LD_INT 22
54949: PUSH
54950: LD_INT 23
54952: PUSH
54953: LD_INT 26
54955: PUSH
54956: EMPTY
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 101
54969: PUSH
54970: LD_INT 102
54972: PUSH
54973: LD_INT 106
54975: PUSH
54976: LD_INT 116
54978: PUSH
54979: LD_INT 117
54981: PUSH
54982: LD_INT 118
54984: PUSH
54985: EMPTY
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: ST_TO_ADDR
54997: GO 58072
54999: LD_INT 2
55001: DOUBLE
55002: EQUAL
55003: IFTRUE 55007
55005: GO 55091
55007: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55008: LD_ADDR_VAR 0 2
55012: PUSH
55013: LD_INT 2
55015: PUSH
55016: LD_INT 4
55018: PUSH
55019: LD_INT 11
55021: PUSH
55022: LD_INT 12
55024: PUSH
55025: LD_INT 15
55027: PUSH
55028: LD_INT 16
55030: PUSH
55031: LD_INT 22
55033: PUSH
55034: LD_INT 23
55036: PUSH
55037: LD_INT 26
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: PUSH
55051: LD_INT 101
55053: PUSH
55054: LD_INT 102
55056: PUSH
55057: LD_INT 105
55059: PUSH
55060: LD_INT 106
55062: PUSH
55063: LD_INT 108
55065: PUSH
55066: LD_INT 116
55068: PUSH
55069: LD_INT 117
55071: PUSH
55072: LD_INT 118
55074: PUSH
55075: EMPTY
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: ST_TO_ADDR
55089: GO 58072
55091: LD_INT 3
55093: DOUBLE
55094: EQUAL
55095: IFTRUE 55099
55097: GO 55187
55099: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55100: LD_ADDR_VAR 0 2
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: LD_INT 4
55110: PUSH
55111: LD_INT 5
55113: PUSH
55114: LD_INT 11
55116: PUSH
55117: LD_INT 12
55119: PUSH
55120: LD_INT 15
55122: PUSH
55123: LD_INT 16
55125: PUSH
55126: LD_INT 22
55128: PUSH
55129: LD_INT 26
55131: PUSH
55132: LD_INT 36
55134: PUSH
55135: EMPTY
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: PUSH
55147: LD_INT 101
55149: PUSH
55150: LD_INT 102
55152: PUSH
55153: LD_INT 105
55155: PUSH
55156: LD_INT 106
55158: PUSH
55159: LD_INT 108
55161: PUSH
55162: LD_INT 116
55164: PUSH
55165: LD_INT 117
55167: PUSH
55168: LD_INT 118
55170: PUSH
55171: EMPTY
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: PUSH
55181: EMPTY
55182: LIST
55183: LIST
55184: ST_TO_ADDR
55185: GO 58072
55187: LD_INT 4
55189: DOUBLE
55190: EQUAL
55191: IFTRUE 55195
55193: GO 55291
55195: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
55196: LD_ADDR_VAR 0 2
55200: PUSH
55201: LD_INT 2
55203: PUSH
55204: LD_INT 4
55206: PUSH
55207: LD_INT 5
55209: PUSH
55210: LD_INT 8
55212: PUSH
55213: LD_INT 11
55215: PUSH
55216: LD_INT 12
55218: PUSH
55219: LD_INT 15
55221: PUSH
55222: LD_INT 16
55224: PUSH
55225: LD_INT 22
55227: PUSH
55228: LD_INT 23
55230: PUSH
55231: LD_INT 26
55233: PUSH
55234: LD_INT 36
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: PUSH
55251: LD_INT 101
55253: PUSH
55254: LD_INT 102
55256: PUSH
55257: LD_INT 105
55259: PUSH
55260: LD_INT 106
55262: PUSH
55263: LD_INT 108
55265: PUSH
55266: LD_INT 116
55268: PUSH
55269: LD_INT 117
55271: PUSH
55272: LD_INT 118
55274: PUSH
55275: EMPTY
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: PUSH
55285: EMPTY
55286: LIST
55287: LIST
55288: ST_TO_ADDR
55289: GO 58072
55291: LD_INT 5
55293: DOUBLE
55294: EQUAL
55295: IFTRUE 55299
55297: GO 55411
55299: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
55300: LD_ADDR_VAR 0 2
55304: PUSH
55305: LD_INT 2
55307: PUSH
55308: LD_INT 4
55310: PUSH
55311: LD_INT 5
55313: PUSH
55314: LD_INT 6
55316: PUSH
55317: LD_INT 8
55319: PUSH
55320: LD_INT 11
55322: PUSH
55323: LD_INT 12
55325: PUSH
55326: LD_INT 15
55328: PUSH
55329: LD_INT 16
55331: PUSH
55332: LD_INT 22
55334: PUSH
55335: LD_INT 23
55337: PUSH
55338: LD_INT 25
55340: PUSH
55341: LD_INT 26
55343: PUSH
55344: LD_INT 36
55346: PUSH
55347: EMPTY
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: PUSH
55363: LD_INT 101
55365: PUSH
55366: LD_INT 102
55368: PUSH
55369: LD_INT 105
55371: PUSH
55372: LD_INT 106
55374: PUSH
55375: LD_INT 108
55377: PUSH
55378: LD_INT 109
55380: PUSH
55381: LD_INT 112
55383: PUSH
55384: LD_INT 116
55386: PUSH
55387: LD_INT 117
55389: PUSH
55390: LD_INT 118
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: ST_TO_ADDR
55409: GO 58072
55411: LD_INT 6
55413: DOUBLE
55414: EQUAL
55415: IFTRUE 55419
55417: GO 55551
55419: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
55420: LD_ADDR_VAR 0 2
55424: PUSH
55425: LD_INT 2
55427: PUSH
55428: LD_INT 4
55430: PUSH
55431: LD_INT 5
55433: PUSH
55434: LD_INT 6
55436: PUSH
55437: LD_INT 8
55439: PUSH
55440: LD_INT 11
55442: PUSH
55443: LD_INT 12
55445: PUSH
55446: LD_INT 15
55448: PUSH
55449: LD_INT 16
55451: PUSH
55452: LD_INT 20
55454: PUSH
55455: LD_INT 21
55457: PUSH
55458: LD_INT 22
55460: PUSH
55461: LD_INT 23
55463: PUSH
55464: LD_INT 25
55466: PUSH
55467: LD_INT 26
55469: PUSH
55470: LD_INT 30
55472: PUSH
55473: LD_INT 31
55475: PUSH
55476: LD_INT 32
55478: PUSH
55479: LD_INT 36
55481: PUSH
55482: EMPTY
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: PUSH
55503: LD_INT 101
55505: PUSH
55506: LD_INT 102
55508: PUSH
55509: LD_INT 105
55511: PUSH
55512: LD_INT 106
55514: PUSH
55515: LD_INT 108
55517: PUSH
55518: LD_INT 109
55520: PUSH
55521: LD_INT 112
55523: PUSH
55524: LD_INT 116
55526: PUSH
55527: LD_INT 117
55529: PUSH
55530: LD_INT 118
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: LIST
55539: LIST
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: PUSH
55545: EMPTY
55546: LIST
55547: LIST
55548: ST_TO_ADDR
55549: GO 58072
55551: LD_INT 7
55553: DOUBLE
55554: EQUAL
55555: IFTRUE 55559
55557: GO 55671
55559: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
55560: LD_ADDR_VAR 0 2
55564: PUSH
55565: LD_INT 2
55567: PUSH
55568: LD_INT 4
55570: PUSH
55571: LD_INT 5
55573: PUSH
55574: LD_INT 7
55576: PUSH
55577: LD_INT 11
55579: PUSH
55580: LD_INT 12
55582: PUSH
55583: LD_INT 15
55585: PUSH
55586: LD_INT 16
55588: PUSH
55589: LD_INT 20
55591: PUSH
55592: LD_INT 21
55594: PUSH
55595: LD_INT 22
55597: PUSH
55598: LD_INT 23
55600: PUSH
55601: LD_INT 25
55603: PUSH
55604: LD_INT 26
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: LIST
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: PUSH
55623: LD_INT 101
55625: PUSH
55626: LD_INT 102
55628: PUSH
55629: LD_INT 103
55631: PUSH
55632: LD_INT 105
55634: PUSH
55635: LD_INT 106
55637: PUSH
55638: LD_INT 108
55640: PUSH
55641: LD_INT 112
55643: PUSH
55644: LD_INT 116
55646: PUSH
55647: LD_INT 117
55649: PUSH
55650: LD_INT 118
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: ST_TO_ADDR
55669: GO 58072
55671: LD_INT 8
55673: DOUBLE
55674: EQUAL
55675: IFTRUE 55679
55677: GO 55819
55679: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
55680: LD_ADDR_VAR 0 2
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: LD_INT 4
55690: PUSH
55691: LD_INT 5
55693: PUSH
55694: LD_INT 6
55696: PUSH
55697: LD_INT 7
55699: PUSH
55700: LD_INT 8
55702: PUSH
55703: LD_INT 11
55705: PUSH
55706: LD_INT 12
55708: PUSH
55709: LD_INT 15
55711: PUSH
55712: LD_INT 16
55714: PUSH
55715: LD_INT 20
55717: PUSH
55718: LD_INT 21
55720: PUSH
55721: LD_INT 22
55723: PUSH
55724: LD_INT 23
55726: PUSH
55727: LD_INT 25
55729: PUSH
55730: LD_INT 26
55732: PUSH
55733: LD_INT 30
55735: PUSH
55736: LD_INT 31
55738: PUSH
55739: LD_INT 32
55741: PUSH
55742: LD_INT 36
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: PUSH
55767: LD_INT 101
55769: PUSH
55770: LD_INT 102
55772: PUSH
55773: LD_INT 103
55775: PUSH
55776: LD_INT 105
55778: PUSH
55779: LD_INT 106
55781: PUSH
55782: LD_INT 108
55784: PUSH
55785: LD_INT 109
55787: PUSH
55788: LD_INT 112
55790: PUSH
55791: LD_INT 116
55793: PUSH
55794: LD_INT 117
55796: PUSH
55797: LD_INT 118
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: LIST
55805: LIST
55806: LIST
55807: LIST
55808: LIST
55809: LIST
55810: LIST
55811: LIST
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: ST_TO_ADDR
55817: GO 58072
55819: LD_INT 9
55821: DOUBLE
55822: EQUAL
55823: IFTRUE 55827
55825: GO 55975
55827: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
55828: LD_ADDR_VAR 0 2
55832: PUSH
55833: LD_INT 2
55835: PUSH
55836: LD_INT 4
55838: PUSH
55839: LD_INT 5
55841: PUSH
55842: LD_INT 6
55844: PUSH
55845: LD_INT 7
55847: PUSH
55848: LD_INT 8
55850: PUSH
55851: LD_INT 11
55853: PUSH
55854: LD_INT 12
55856: PUSH
55857: LD_INT 15
55859: PUSH
55860: LD_INT 16
55862: PUSH
55863: LD_INT 20
55865: PUSH
55866: LD_INT 21
55868: PUSH
55869: LD_INT 22
55871: PUSH
55872: LD_INT 23
55874: PUSH
55875: LD_INT 25
55877: PUSH
55878: LD_INT 26
55880: PUSH
55881: LD_INT 28
55883: PUSH
55884: LD_INT 30
55886: PUSH
55887: LD_INT 31
55889: PUSH
55890: LD_INT 32
55892: PUSH
55893: LD_INT 36
55895: PUSH
55896: EMPTY
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 101
55921: PUSH
55922: LD_INT 102
55924: PUSH
55925: LD_INT 103
55927: PUSH
55928: LD_INT 105
55930: PUSH
55931: LD_INT 106
55933: PUSH
55934: LD_INT 108
55936: PUSH
55937: LD_INT 109
55939: PUSH
55940: LD_INT 112
55942: PUSH
55943: LD_INT 114
55945: PUSH
55946: LD_INT 116
55948: PUSH
55949: LD_INT 117
55951: PUSH
55952: LD_INT 118
55954: PUSH
55955: EMPTY
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: PUSH
55969: EMPTY
55970: LIST
55971: LIST
55972: ST_TO_ADDR
55973: GO 58072
55975: LD_INT 10
55977: DOUBLE
55978: EQUAL
55979: IFTRUE 55983
55981: GO 56179
55983: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
55984: LD_ADDR_VAR 0 2
55988: PUSH
55989: LD_INT 2
55991: PUSH
55992: LD_INT 4
55994: PUSH
55995: LD_INT 5
55997: PUSH
55998: LD_INT 6
56000: PUSH
56001: LD_INT 7
56003: PUSH
56004: LD_INT 8
56006: PUSH
56007: LD_INT 9
56009: PUSH
56010: LD_INT 10
56012: PUSH
56013: LD_INT 11
56015: PUSH
56016: LD_INT 12
56018: PUSH
56019: LD_INT 13
56021: PUSH
56022: LD_INT 14
56024: PUSH
56025: LD_INT 15
56027: PUSH
56028: LD_INT 16
56030: PUSH
56031: LD_INT 17
56033: PUSH
56034: LD_INT 18
56036: PUSH
56037: LD_INT 19
56039: PUSH
56040: LD_INT 20
56042: PUSH
56043: LD_INT 21
56045: PUSH
56046: LD_INT 22
56048: PUSH
56049: LD_INT 23
56051: PUSH
56052: LD_INT 24
56054: PUSH
56055: LD_INT 25
56057: PUSH
56058: LD_INT 26
56060: PUSH
56061: LD_INT 28
56063: PUSH
56064: LD_INT 30
56066: PUSH
56067: LD_INT 31
56069: PUSH
56070: LD_INT 32
56072: PUSH
56073: LD_INT 36
56075: PUSH
56076: EMPTY
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: LIST
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 101
56109: PUSH
56110: LD_INT 102
56112: PUSH
56113: LD_INT 103
56115: PUSH
56116: LD_INT 104
56118: PUSH
56119: LD_INT 105
56121: PUSH
56122: LD_INT 106
56124: PUSH
56125: LD_INT 107
56127: PUSH
56128: LD_INT 108
56130: PUSH
56131: LD_INT 109
56133: PUSH
56134: LD_INT 110
56136: PUSH
56137: LD_INT 111
56139: PUSH
56140: LD_INT 112
56142: PUSH
56143: LD_INT 114
56145: PUSH
56146: LD_INT 116
56148: PUSH
56149: LD_INT 117
56151: PUSH
56152: LD_INT 118
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: PUSH
56173: EMPTY
56174: LIST
56175: LIST
56176: ST_TO_ADDR
56177: GO 58072
56179: LD_INT 11
56181: DOUBLE
56182: EQUAL
56183: IFTRUE 56187
56185: GO 56391
56187: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
56188: LD_ADDR_VAR 0 2
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 3
56198: PUSH
56199: LD_INT 4
56201: PUSH
56202: LD_INT 5
56204: PUSH
56205: LD_INT 6
56207: PUSH
56208: LD_INT 7
56210: PUSH
56211: LD_INT 8
56213: PUSH
56214: LD_INT 9
56216: PUSH
56217: LD_INT 10
56219: PUSH
56220: LD_INT 11
56222: PUSH
56223: LD_INT 12
56225: PUSH
56226: LD_INT 13
56228: PUSH
56229: LD_INT 14
56231: PUSH
56232: LD_INT 15
56234: PUSH
56235: LD_INT 16
56237: PUSH
56238: LD_INT 17
56240: PUSH
56241: LD_INT 18
56243: PUSH
56244: LD_INT 19
56246: PUSH
56247: LD_INT 20
56249: PUSH
56250: LD_INT 21
56252: PUSH
56253: LD_INT 22
56255: PUSH
56256: LD_INT 23
56258: PUSH
56259: LD_INT 24
56261: PUSH
56262: LD_INT 25
56264: PUSH
56265: LD_INT 26
56267: PUSH
56268: LD_INT 28
56270: PUSH
56271: LD_INT 30
56273: PUSH
56274: LD_INT 31
56276: PUSH
56277: LD_INT 32
56279: PUSH
56280: LD_INT 34
56282: PUSH
56283: LD_INT 36
56285: PUSH
56286: EMPTY
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: LIST
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: LIST
56317: LIST
56318: PUSH
56319: LD_INT 101
56321: PUSH
56322: LD_INT 102
56324: PUSH
56325: LD_INT 103
56327: PUSH
56328: LD_INT 104
56330: PUSH
56331: LD_INT 105
56333: PUSH
56334: LD_INT 106
56336: PUSH
56337: LD_INT 107
56339: PUSH
56340: LD_INT 108
56342: PUSH
56343: LD_INT 109
56345: PUSH
56346: LD_INT 110
56348: PUSH
56349: LD_INT 111
56351: PUSH
56352: LD_INT 112
56354: PUSH
56355: LD_INT 114
56357: PUSH
56358: LD_INT 116
56360: PUSH
56361: LD_INT 117
56363: PUSH
56364: LD_INT 118
56366: PUSH
56367: EMPTY
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: LIST
56382: LIST
56383: LIST
56384: PUSH
56385: EMPTY
56386: LIST
56387: LIST
56388: ST_TO_ADDR
56389: GO 58072
56391: LD_INT 12
56393: DOUBLE
56394: EQUAL
56395: IFTRUE 56399
56397: GO 56619
56399: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
56400: LD_ADDR_VAR 0 2
56404: PUSH
56405: LD_INT 1
56407: PUSH
56408: LD_INT 2
56410: PUSH
56411: LD_INT 3
56413: PUSH
56414: LD_INT 4
56416: PUSH
56417: LD_INT 5
56419: PUSH
56420: LD_INT 6
56422: PUSH
56423: LD_INT 7
56425: PUSH
56426: LD_INT 8
56428: PUSH
56429: LD_INT 9
56431: PUSH
56432: LD_INT 10
56434: PUSH
56435: LD_INT 11
56437: PUSH
56438: LD_INT 12
56440: PUSH
56441: LD_INT 13
56443: PUSH
56444: LD_INT 14
56446: PUSH
56447: LD_INT 15
56449: PUSH
56450: LD_INT 16
56452: PUSH
56453: LD_INT 17
56455: PUSH
56456: LD_INT 18
56458: PUSH
56459: LD_INT 19
56461: PUSH
56462: LD_INT 20
56464: PUSH
56465: LD_INT 21
56467: PUSH
56468: LD_INT 22
56470: PUSH
56471: LD_INT 23
56473: PUSH
56474: LD_INT 24
56476: PUSH
56477: LD_INT 25
56479: PUSH
56480: LD_INT 26
56482: PUSH
56483: LD_INT 27
56485: PUSH
56486: LD_INT 28
56488: PUSH
56489: LD_INT 30
56491: PUSH
56492: LD_INT 31
56494: PUSH
56495: LD_INT 32
56497: PUSH
56498: LD_INT 33
56500: PUSH
56501: LD_INT 34
56503: PUSH
56504: LD_INT 36
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: LIST
56529: LIST
56530: LIST
56531: LIST
56532: LIST
56533: LIST
56534: LIST
56535: LIST
56536: LIST
56537: LIST
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 101
56545: PUSH
56546: LD_INT 102
56548: PUSH
56549: LD_INT 103
56551: PUSH
56552: LD_INT 104
56554: PUSH
56555: LD_INT 105
56557: PUSH
56558: LD_INT 106
56560: PUSH
56561: LD_INT 107
56563: PUSH
56564: LD_INT 108
56566: PUSH
56567: LD_INT 109
56569: PUSH
56570: LD_INT 110
56572: PUSH
56573: LD_INT 111
56575: PUSH
56576: LD_INT 112
56578: PUSH
56579: LD_INT 113
56581: PUSH
56582: LD_INT 114
56584: PUSH
56585: LD_INT 116
56587: PUSH
56588: LD_INT 117
56590: PUSH
56591: LD_INT 118
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: LIST
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: LIST
56609: LIST
56610: LIST
56611: LIST
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: ST_TO_ADDR
56617: GO 58072
56619: LD_INT 13
56621: DOUBLE
56622: EQUAL
56623: IFTRUE 56627
56625: GO 56835
56627: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
56628: LD_ADDR_VAR 0 2
56632: PUSH
56633: LD_INT 1
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: LD_INT 3
56641: PUSH
56642: LD_INT 4
56644: PUSH
56645: LD_INT 5
56647: PUSH
56648: LD_INT 8
56650: PUSH
56651: LD_INT 9
56653: PUSH
56654: LD_INT 10
56656: PUSH
56657: LD_INT 11
56659: PUSH
56660: LD_INT 12
56662: PUSH
56663: LD_INT 14
56665: PUSH
56666: LD_INT 15
56668: PUSH
56669: LD_INT 16
56671: PUSH
56672: LD_INT 17
56674: PUSH
56675: LD_INT 18
56677: PUSH
56678: LD_INT 19
56680: PUSH
56681: LD_INT 20
56683: PUSH
56684: LD_INT 21
56686: PUSH
56687: LD_INT 22
56689: PUSH
56690: LD_INT 23
56692: PUSH
56693: LD_INT 24
56695: PUSH
56696: LD_INT 25
56698: PUSH
56699: LD_INT 26
56701: PUSH
56702: LD_INT 27
56704: PUSH
56705: LD_INT 28
56707: PUSH
56708: LD_INT 30
56710: PUSH
56711: LD_INT 31
56713: PUSH
56714: LD_INT 32
56716: PUSH
56717: LD_INT 33
56719: PUSH
56720: LD_INT 34
56722: PUSH
56723: LD_INT 36
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: PUSH
56759: LD_INT 101
56761: PUSH
56762: LD_INT 102
56764: PUSH
56765: LD_INT 103
56767: PUSH
56768: LD_INT 104
56770: PUSH
56771: LD_INT 105
56773: PUSH
56774: LD_INT 106
56776: PUSH
56777: LD_INT 107
56779: PUSH
56780: LD_INT 108
56782: PUSH
56783: LD_INT 109
56785: PUSH
56786: LD_INT 110
56788: PUSH
56789: LD_INT 111
56791: PUSH
56792: LD_INT 112
56794: PUSH
56795: LD_INT 113
56797: PUSH
56798: LD_INT 114
56800: PUSH
56801: LD_INT 116
56803: PUSH
56804: LD_INT 117
56806: PUSH
56807: LD_INT 118
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: LIST
56814: LIST
56815: LIST
56816: LIST
56817: LIST
56818: LIST
56819: LIST
56820: LIST
56821: LIST
56822: LIST
56823: LIST
56824: LIST
56825: LIST
56826: LIST
56827: LIST
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: ST_TO_ADDR
56833: GO 58072
56835: LD_INT 14
56837: DOUBLE
56838: EQUAL
56839: IFTRUE 56843
56841: GO 57067
56843: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
56844: LD_ADDR_VAR 0 2
56848: PUSH
56849: LD_INT 1
56851: PUSH
56852: LD_INT 2
56854: PUSH
56855: LD_INT 3
56857: PUSH
56858: LD_INT 4
56860: PUSH
56861: LD_INT 5
56863: PUSH
56864: LD_INT 6
56866: PUSH
56867: LD_INT 7
56869: PUSH
56870: LD_INT 8
56872: PUSH
56873: LD_INT 9
56875: PUSH
56876: LD_INT 10
56878: PUSH
56879: LD_INT 11
56881: PUSH
56882: LD_INT 12
56884: PUSH
56885: LD_INT 13
56887: PUSH
56888: LD_INT 14
56890: PUSH
56891: LD_INT 15
56893: PUSH
56894: LD_INT 16
56896: PUSH
56897: LD_INT 17
56899: PUSH
56900: LD_INT 18
56902: PUSH
56903: LD_INT 19
56905: PUSH
56906: LD_INT 20
56908: PUSH
56909: LD_INT 21
56911: PUSH
56912: LD_INT 22
56914: PUSH
56915: LD_INT 23
56917: PUSH
56918: LD_INT 24
56920: PUSH
56921: LD_INT 25
56923: PUSH
56924: LD_INT 26
56926: PUSH
56927: LD_INT 27
56929: PUSH
56930: LD_INT 28
56932: PUSH
56933: LD_INT 29
56935: PUSH
56936: LD_INT 30
56938: PUSH
56939: LD_INT 31
56941: PUSH
56942: LD_INT 32
56944: PUSH
56945: LD_INT 33
56947: PUSH
56948: LD_INT 34
56950: PUSH
56951: LD_INT 36
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: LIST
56959: LIST
56960: LIST
56961: LIST
56962: LIST
56963: LIST
56964: LIST
56965: LIST
56966: LIST
56967: LIST
56968: LIST
56969: LIST
56970: LIST
56971: LIST
56972: LIST
56973: LIST
56974: LIST
56975: LIST
56976: LIST
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 101
56993: PUSH
56994: LD_INT 102
56996: PUSH
56997: LD_INT 103
56999: PUSH
57000: LD_INT 104
57002: PUSH
57003: LD_INT 105
57005: PUSH
57006: LD_INT 106
57008: PUSH
57009: LD_INT 107
57011: PUSH
57012: LD_INT 108
57014: PUSH
57015: LD_INT 109
57017: PUSH
57018: LD_INT 110
57020: PUSH
57021: LD_INT 111
57023: PUSH
57024: LD_INT 112
57026: PUSH
57027: LD_INT 113
57029: PUSH
57030: LD_INT 114
57032: PUSH
57033: LD_INT 116
57035: PUSH
57036: LD_INT 117
57038: PUSH
57039: LD_INT 118
57041: PUSH
57042: EMPTY
57043: LIST
57044: LIST
57045: LIST
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: ST_TO_ADDR
57065: GO 58072
57067: LD_INT 15
57069: DOUBLE
57070: EQUAL
57071: IFTRUE 57075
57073: GO 57299
57075: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57076: LD_ADDR_VAR 0 2
57080: PUSH
57081: LD_INT 1
57083: PUSH
57084: LD_INT 2
57086: PUSH
57087: LD_INT 3
57089: PUSH
57090: LD_INT 4
57092: PUSH
57093: LD_INT 5
57095: PUSH
57096: LD_INT 6
57098: PUSH
57099: LD_INT 7
57101: PUSH
57102: LD_INT 8
57104: PUSH
57105: LD_INT 9
57107: PUSH
57108: LD_INT 10
57110: PUSH
57111: LD_INT 11
57113: PUSH
57114: LD_INT 12
57116: PUSH
57117: LD_INT 13
57119: PUSH
57120: LD_INT 14
57122: PUSH
57123: LD_INT 15
57125: PUSH
57126: LD_INT 16
57128: PUSH
57129: LD_INT 17
57131: PUSH
57132: LD_INT 18
57134: PUSH
57135: LD_INT 19
57137: PUSH
57138: LD_INT 20
57140: PUSH
57141: LD_INT 21
57143: PUSH
57144: LD_INT 22
57146: PUSH
57147: LD_INT 23
57149: PUSH
57150: LD_INT 24
57152: PUSH
57153: LD_INT 25
57155: PUSH
57156: LD_INT 26
57158: PUSH
57159: LD_INT 27
57161: PUSH
57162: LD_INT 28
57164: PUSH
57165: LD_INT 29
57167: PUSH
57168: LD_INT 30
57170: PUSH
57171: LD_INT 31
57173: PUSH
57174: LD_INT 32
57176: PUSH
57177: LD_INT 33
57179: PUSH
57180: LD_INT 34
57182: PUSH
57183: LD_INT 36
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: LIST
57190: LIST
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: LIST
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: LIST
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 101
57225: PUSH
57226: LD_INT 102
57228: PUSH
57229: LD_INT 103
57231: PUSH
57232: LD_INT 104
57234: PUSH
57235: LD_INT 105
57237: PUSH
57238: LD_INT 106
57240: PUSH
57241: LD_INT 107
57243: PUSH
57244: LD_INT 108
57246: PUSH
57247: LD_INT 109
57249: PUSH
57250: LD_INT 110
57252: PUSH
57253: LD_INT 111
57255: PUSH
57256: LD_INT 112
57258: PUSH
57259: LD_INT 113
57261: PUSH
57262: LD_INT 114
57264: PUSH
57265: LD_INT 116
57267: PUSH
57268: LD_INT 117
57270: PUSH
57271: LD_INT 118
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: LIST
57287: LIST
57288: LIST
57289: LIST
57290: LIST
57291: LIST
57292: PUSH
57293: EMPTY
57294: LIST
57295: LIST
57296: ST_TO_ADDR
57297: GO 58072
57299: LD_INT 16
57301: DOUBLE
57302: EQUAL
57303: IFTRUE 57307
57305: GO 57443
57307: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
57308: LD_ADDR_VAR 0 2
57312: PUSH
57313: LD_INT 2
57315: PUSH
57316: LD_INT 4
57318: PUSH
57319: LD_INT 5
57321: PUSH
57322: LD_INT 7
57324: PUSH
57325: LD_INT 11
57327: PUSH
57328: LD_INT 12
57330: PUSH
57331: LD_INT 15
57333: PUSH
57334: LD_INT 16
57336: PUSH
57337: LD_INT 20
57339: PUSH
57340: LD_INT 21
57342: PUSH
57343: LD_INT 22
57345: PUSH
57346: LD_INT 23
57348: PUSH
57349: LD_INT 25
57351: PUSH
57352: LD_INT 26
57354: PUSH
57355: LD_INT 30
57357: PUSH
57358: LD_INT 31
57360: PUSH
57361: LD_INT 32
57363: PUSH
57364: LD_INT 33
57366: PUSH
57367: LD_INT 34
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: PUSH
57391: LD_INT 101
57393: PUSH
57394: LD_INT 102
57396: PUSH
57397: LD_INT 103
57399: PUSH
57400: LD_INT 106
57402: PUSH
57403: LD_INT 108
57405: PUSH
57406: LD_INT 112
57408: PUSH
57409: LD_INT 113
57411: PUSH
57412: LD_INT 114
57414: PUSH
57415: LD_INT 116
57417: PUSH
57418: LD_INT 117
57420: PUSH
57421: LD_INT 118
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: LIST
57429: LIST
57430: LIST
57431: LIST
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: ST_TO_ADDR
57441: GO 58072
57443: LD_INT 17
57445: DOUBLE
57446: EQUAL
57447: IFTRUE 57451
57449: GO 57675
57451: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
57452: LD_ADDR_VAR 0 2
57456: PUSH
57457: LD_INT 1
57459: PUSH
57460: LD_INT 2
57462: PUSH
57463: LD_INT 3
57465: PUSH
57466: LD_INT 4
57468: PUSH
57469: LD_INT 5
57471: PUSH
57472: LD_INT 6
57474: PUSH
57475: LD_INT 7
57477: PUSH
57478: LD_INT 8
57480: PUSH
57481: LD_INT 9
57483: PUSH
57484: LD_INT 10
57486: PUSH
57487: LD_INT 11
57489: PUSH
57490: LD_INT 12
57492: PUSH
57493: LD_INT 13
57495: PUSH
57496: LD_INT 14
57498: PUSH
57499: LD_INT 15
57501: PUSH
57502: LD_INT 16
57504: PUSH
57505: LD_INT 17
57507: PUSH
57508: LD_INT 18
57510: PUSH
57511: LD_INT 19
57513: PUSH
57514: LD_INT 20
57516: PUSH
57517: LD_INT 21
57519: PUSH
57520: LD_INT 22
57522: PUSH
57523: LD_INT 23
57525: PUSH
57526: LD_INT 24
57528: PUSH
57529: LD_INT 25
57531: PUSH
57532: LD_INT 26
57534: PUSH
57535: LD_INT 27
57537: PUSH
57538: LD_INT 28
57540: PUSH
57541: LD_INT 29
57543: PUSH
57544: LD_INT 30
57546: PUSH
57547: LD_INT 31
57549: PUSH
57550: LD_INT 32
57552: PUSH
57553: LD_INT 33
57555: PUSH
57556: LD_INT 34
57558: PUSH
57559: LD_INT 36
57561: PUSH
57562: EMPTY
57563: LIST
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: PUSH
57599: LD_INT 101
57601: PUSH
57602: LD_INT 102
57604: PUSH
57605: LD_INT 103
57607: PUSH
57608: LD_INT 104
57610: PUSH
57611: LD_INT 105
57613: PUSH
57614: LD_INT 106
57616: PUSH
57617: LD_INT 107
57619: PUSH
57620: LD_INT 108
57622: PUSH
57623: LD_INT 109
57625: PUSH
57626: LD_INT 110
57628: PUSH
57629: LD_INT 111
57631: PUSH
57632: LD_INT 112
57634: PUSH
57635: LD_INT 113
57637: PUSH
57638: LD_INT 114
57640: PUSH
57641: LD_INT 116
57643: PUSH
57644: LD_INT 117
57646: PUSH
57647: LD_INT 118
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: ST_TO_ADDR
57673: GO 58072
57675: LD_INT 18
57677: DOUBLE
57678: EQUAL
57679: IFTRUE 57683
57681: GO 57831
57683: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
57684: LD_ADDR_VAR 0 2
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 4
57694: PUSH
57695: LD_INT 5
57697: PUSH
57698: LD_INT 7
57700: PUSH
57701: LD_INT 11
57703: PUSH
57704: LD_INT 12
57706: PUSH
57707: LD_INT 15
57709: PUSH
57710: LD_INT 16
57712: PUSH
57713: LD_INT 20
57715: PUSH
57716: LD_INT 21
57718: PUSH
57719: LD_INT 22
57721: PUSH
57722: LD_INT 23
57724: PUSH
57725: LD_INT 25
57727: PUSH
57728: LD_INT 26
57730: PUSH
57731: LD_INT 30
57733: PUSH
57734: LD_INT 31
57736: PUSH
57737: LD_INT 32
57739: PUSH
57740: LD_INT 33
57742: PUSH
57743: LD_INT 34
57745: PUSH
57746: LD_INT 35
57748: PUSH
57749: LD_INT 36
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: PUSH
57775: LD_INT 101
57777: PUSH
57778: LD_INT 102
57780: PUSH
57781: LD_INT 103
57783: PUSH
57784: LD_INT 106
57786: PUSH
57787: LD_INT 108
57789: PUSH
57790: LD_INT 112
57792: PUSH
57793: LD_INT 113
57795: PUSH
57796: LD_INT 114
57798: PUSH
57799: LD_INT 115
57801: PUSH
57802: LD_INT 116
57804: PUSH
57805: LD_INT 117
57807: PUSH
57808: LD_INT 118
57810: PUSH
57811: EMPTY
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: PUSH
57825: EMPTY
57826: LIST
57827: LIST
57828: ST_TO_ADDR
57829: GO 58072
57831: LD_INT 19
57833: DOUBLE
57834: EQUAL
57835: IFTRUE 57839
57837: GO 58071
57839: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
57840: LD_ADDR_VAR 0 2
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 2
57850: PUSH
57851: LD_INT 3
57853: PUSH
57854: LD_INT 4
57856: PUSH
57857: LD_INT 5
57859: PUSH
57860: LD_INT 6
57862: PUSH
57863: LD_INT 7
57865: PUSH
57866: LD_INT 8
57868: PUSH
57869: LD_INT 9
57871: PUSH
57872: LD_INT 10
57874: PUSH
57875: LD_INT 11
57877: PUSH
57878: LD_INT 12
57880: PUSH
57881: LD_INT 13
57883: PUSH
57884: LD_INT 14
57886: PUSH
57887: LD_INT 15
57889: PUSH
57890: LD_INT 16
57892: PUSH
57893: LD_INT 17
57895: PUSH
57896: LD_INT 18
57898: PUSH
57899: LD_INT 19
57901: PUSH
57902: LD_INT 20
57904: PUSH
57905: LD_INT 21
57907: PUSH
57908: LD_INT 22
57910: PUSH
57911: LD_INT 23
57913: PUSH
57914: LD_INT 24
57916: PUSH
57917: LD_INT 25
57919: PUSH
57920: LD_INT 26
57922: PUSH
57923: LD_INT 27
57925: PUSH
57926: LD_INT 28
57928: PUSH
57929: LD_INT 29
57931: PUSH
57932: LD_INT 30
57934: PUSH
57935: LD_INT 31
57937: PUSH
57938: LD_INT 32
57940: PUSH
57941: LD_INT 33
57943: PUSH
57944: LD_INT 34
57946: PUSH
57947: LD_INT 35
57949: PUSH
57950: LD_INT 36
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: LIST
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: PUSH
57991: LD_INT 101
57993: PUSH
57994: LD_INT 102
57996: PUSH
57997: LD_INT 103
57999: PUSH
58000: LD_INT 104
58002: PUSH
58003: LD_INT 105
58005: PUSH
58006: LD_INT 106
58008: PUSH
58009: LD_INT 107
58011: PUSH
58012: LD_INT 108
58014: PUSH
58015: LD_INT 109
58017: PUSH
58018: LD_INT 110
58020: PUSH
58021: LD_INT 111
58023: PUSH
58024: LD_INT 112
58026: PUSH
58027: LD_INT 113
58029: PUSH
58030: LD_INT 114
58032: PUSH
58033: LD_INT 115
58035: PUSH
58036: LD_INT 116
58038: PUSH
58039: LD_INT 117
58041: PUSH
58042: LD_INT 118
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: LIST
58060: LIST
58061: LIST
58062: LIST
58063: LIST
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: ST_TO_ADDR
58069: GO 58072
58071: POP
// end else
58072: GO 58303
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58074: LD_ADDR_VAR 0 2
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: LD_INT 2
58084: PUSH
58085: LD_INT 3
58087: PUSH
58088: LD_INT 4
58090: PUSH
58091: LD_INT 5
58093: PUSH
58094: LD_INT 6
58096: PUSH
58097: LD_INT 7
58099: PUSH
58100: LD_INT 8
58102: PUSH
58103: LD_INT 9
58105: PUSH
58106: LD_INT 10
58108: PUSH
58109: LD_INT 11
58111: PUSH
58112: LD_INT 12
58114: PUSH
58115: LD_INT 13
58117: PUSH
58118: LD_INT 14
58120: PUSH
58121: LD_INT 15
58123: PUSH
58124: LD_INT 16
58126: PUSH
58127: LD_INT 17
58129: PUSH
58130: LD_INT 18
58132: PUSH
58133: LD_INT 19
58135: PUSH
58136: LD_INT 20
58138: PUSH
58139: LD_INT 21
58141: PUSH
58142: LD_INT 22
58144: PUSH
58145: LD_INT 23
58147: PUSH
58148: LD_INT 24
58150: PUSH
58151: LD_INT 25
58153: PUSH
58154: LD_INT 26
58156: PUSH
58157: LD_INT 27
58159: PUSH
58160: LD_INT 28
58162: PUSH
58163: LD_INT 29
58165: PUSH
58166: LD_INT 30
58168: PUSH
58169: LD_INT 31
58171: PUSH
58172: LD_INT 32
58174: PUSH
58175: LD_INT 33
58177: PUSH
58178: LD_INT 34
58180: PUSH
58181: LD_INT 35
58183: PUSH
58184: LD_INT 36
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: LIST
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: PUSH
58225: LD_INT 101
58227: PUSH
58228: LD_INT 102
58230: PUSH
58231: LD_INT 103
58233: PUSH
58234: LD_INT 104
58236: PUSH
58237: LD_INT 105
58239: PUSH
58240: LD_INT 106
58242: PUSH
58243: LD_INT 107
58245: PUSH
58246: LD_INT 108
58248: PUSH
58249: LD_INT 109
58251: PUSH
58252: LD_INT 110
58254: PUSH
58255: LD_INT 111
58257: PUSH
58258: LD_INT 112
58260: PUSH
58261: LD_INT 113
58263: PUSH
58264: LD_INT 114
58266: PUSH
58267: LD_INT 115
58269: PUSH
58270: LD_INT 116
58272: PUSH
58273: LD_INT 117
58275: PUSH
58276: LD_INT 118
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: LIST
58289: LIST
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: LIST
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: ST_TO_ADDR
// if result then
58303: LD_VAR 0 2
58307: IFFALSE 59093
// begin normal :=  ;
58309: LD_ADDR_VAR 0 5
58313: PUSH
58314: LD_STRING 
58316: ST_TO_ADDR
// hardcore :=  ;
58317: LD_ADDR_VAR 0 6
58321: PUSH
58322: LD_STRING 
58324: ST_TO_ADDR
// active :=  ;
58325: LD_ADDR_VAR 0 7
58329: PUSH
58330: LD_STRING 
58332: ST_TO_ADDR
// for i = 1 to normalCounter do
58333: LD_ADDR_VAR 0 8
58337: PUSH
58338: DOUBLE
58339: LD_INT 1
58341: DEC
58342: ST_TO_ADDR
58343: LD_EXP 39
58347: PUSH
58348: FOR_TO
58349: IFFALSE 58450
// begin tmp := 0 ;
58351: LD_ADDR_VAR 0 3
58355: PUSH
58356: LD_STRING 0
58358: ST_TO_ADDR
// if result [ 1 ] then
58359: LD_VAR 0 2
58363: PUSH
58364: LD_INT 1
58366: ARRAY
58367: IFFALSE 58432
// if result [ 1 ] [ 1 ] = i then
58369: LD_VAR 0 2
58373: PUSH
58374: LD_INT 1
58376: ARRAY
58377: PUSH
58378: LD_INT 1
58380: ARRAY
58381: PUSH
58382: LD_VAR 0 8
58386: EQUAL
58387: IFFALSE 58432
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
58389: LD_ADDR_VAR 0 2
58393: PUSH
58394: LD_VAR 0 2
58398: PPUSH
58399: LD_INT 1
58401: PPUSH
58402: LD_VAR 0 2
58406: PUSH
58407: LD_INT 1
58409: ARRAY
58410: PPUSH
58411: LD_INT 1
58413: PPUSH
58414: CALL_OW 3
58418: PPUSH
58419: CALL_OW 1
58423: ST_TO_ADDR
// tmp := 1 ;
58424: LD_ADDR_VAR 0 3
58428: PUSH
58429: LD_STRING 1
58431: ST_TO_ADDR
// end ; normal := normal & tmp ;
58432: LD_ADDR_VAR 0 5
58436: PUSH
58437: LD_VAR 0 5
58441: PUSH
58442: LD_VAR 0 3
58446: STR
58447: ST_TO_ADDR
// end ;
58448: GO 58348
58450: POP
58451: POP
// for i = 1 to hardcoreCounter do
58452: LD_ADDR_VAR 0 8
58456: PUSH
58457: DOUBLE
58458: LD_INT 1
58460: DEC
58461: ST_TO_ADDR
58462: LD_EXP 40
58466: PUSH
58467: FOR_TO
58468: IFFALSE 58573
// begin tmp := 0 ;
58470: LD_ADDR_VAR 0 3
58474: PUSH
58475: LD_STRING 0
58477: ST_TO_ADDR
// if result [ 2 ] then
58478: LD_VAR 0 2
58482: PUSH
58483: LD_INT 2
58485: ARRAY
58486: IFFALSE 58555
// if result [ 2 ] [ 1 ] = 100 + i then
58488: LD_VAR 0 2
58492: PUSH
58493: LD_INT 2
58495: ARRAY
58496: PUSH
58497: LD_INT 1
58499: ARRAY
58500: PUSH
58501: LD_INT 100
58503: PUSH
58504: LD_VAR 0 8
58508: PLUS
58509: EQUAL
58510: IFFALSE 58555
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
58512: LD_ADDR_VAR 0 2
58516: PUSH
58517: LD_VAR 0 2
58521: PPUSH
58522: LD_INT 2
58524: PPUSH
58525: LD_VAR 0 2
58529: PUSH
58530: LD_INT 2
58532: ARRAY
58533: PPUSH
58534: LD_INT 1
58536: PPUSH
58537: CALL_OW 3
58541: PPUSH
58542: CALL_OW 1
58546: ST_TO_ADDR
// tmp := 1 ;
58547: LD_ADDR_VAR 0 3
58551: PUSH
58552: LD_STRING 1
58554: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
58555: LD_ADDR_VAR 0 6
58559: PUSH
58560: LD_VAR 0 6
58564: PUSH
58565: LD_VAR 0 3
58569: STR
58570: ST_TO_ADDR
// end ;
58571: GO 58467
58573: POP
58574: POP
// if isGameLoad then
58575: LD_VAR 0 1
58579: IFFALSE 59054
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
58581: LD_ADDR_VAR 0 4
58585: PUSH
58586: LD_EXP 43
58590: PUSH
58591: LD_EXP 42
58595: PUSH
58596: LD_EXP 44
58600: PUSH
58601: LD_EXP 41
58605: PUSH
58606: LD_EXP 45
58610: PUSH
58611: LD_EXP 46
58615: PUSH
58616: LD_EXP 47
58620: PUSH
58621: LD_EXP 48
58625: PUSH
58626: LD_EXP 49
58630: PUSH
58631: LD_EXP 50
58635: PUSH
58636: LD_EXP 51
58640: PUSH
58641: LD_EXP 52
58645: PUSH
58646: LD_EXP 53
58650: PUSH
58651: LD_EXP 54
58655: PUSH
58656: LD_EXP 62
58660: PUSH
58661: LD_EXP 63
58665: PUSH
58666: LD_EXP 64
58670: PUSH
58671: LD_EXP 65
58675: PUSH
58676: LD_EXP 67
58680: PUSH
58681: LD_EXP 68
58685: PUSH
58686: LD_EXP 69
58690: PUSH
58691: LD_EXP 72
58695: PUSH
58696: LD_EXP 74
58700: PUSH
58701: LD_EXP 75
58705: PUSH
58706: LD_EXP 76
58710: PUSH
58711: LD_EXP 78
58715: PUSH
58716: LD_EXP 79
58720: PUSH
58721: LD_EXP 82
58725: PUSH
58726: LD_EXP 83
58730: PUSH
58731: LD_EXP 84
58735: PUSH
58736: LD_EXP 85
58740: PUSH
58741: LD_EXP 86
58745: PUSH
58746: LD_EXP 87
58750: PUSH
58751: LD_EXP 88
58755: PUSH
58756: LD_EXP 89
58760: PUSH
58761: LD_EXP 90
58765: PUSH
58766: LD_EXP 55
58770: PUSH
58771: LD_EXP 56
58775: PUSH
58776: LD_EXP 59
58780: PUSH
58781: LD_EXP 60
58785: PUSH
58786: LD_EXP 61
58790: PUSH
58791: LD_EXP 57
58795: PUSH
58796: LD_EXP 58
58800: PUSH
58801: LD_EXP 66
58805: PUSH
58806: LD_EXP 70
58810: PUSH
58811: LD_EXP 71
58815: PUSH
58816: LD_EXP 73
58820: PUSH
58821: LD_EXP 77
58825: PUSH
58826: LD_EXP 80
58830: PUSH
58831: LD_EXP 81
58835: PUSH
58836: LD_EXP 91
58840: PUSH
58841: LD_EXP 92
58845: PUSH
58846: LD_EXP 93
58850: PUSH
58851: LD_EXP 94
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: LIST
58880: LIST
58881: LIST
58882: LIST
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: ST_TO_ADDR
// tmp :=  ;
58912: LD_ADDR_VAR 0 3
58916: PUSH
58917: LD_STRING 
58919: ST_TO_ADDR
// for i = 1 to normalCounter do
58920: LD_ADDR_VAR 0 8
58924: PUSH
58925: DOUBLE
58926: LD_INT 1
58928: DEC
58929: ST_TO_ADDR
58930: LD_EXP 39
58934: PUSH
58935: FOR_TO
58936: IFFALSE 58972
// begin if flags [ i ] then
58938: LD_VAR 0 4
58942: PUSH
58943: LD_VAR 0 8
58947: ARRAY
58948: IFFALSE 58970
// tmp := tmp & i & ; ;
58950: LD_ADDR_VAR 0 3
58954: PUSH
58955: LD_VAR 0 3
58959: PUSH
58960: LD_VAR 0 8
58964: STR
58965: PUSH
58966: LD_STRING ;
58968: STR
58969: ST_TO_ADDR
// end ;
58970: GO 58935
58972: POP
58973: POP
// for i = 1 to hardcoreCounter do
58974: LD_ADDR_VAR 0 8
58978: PUSH
58979: DOUBLE
58980: LD_INT 1
58982: DEC
58983: ST_TO_ADDR
58984: LD_EXP 40
58988: PUSH
58989: FOR_TO
58990: IFFALSE 59036
// begin if flags [ normalCounter + i ] then
58992: LD_VAR 0 4
58996: PUSH
58997: LD_EXP 39
59001: PUSH
59002: LD_VAR 0 8
59006: PLUS
59007: ARRAY
59008: IFFALSE 59034
// tmp := tmp & ( 100 + i ) & ; ;
59010: LD_ADDR_VAR 0 3
59014: PUSH
59015: LD_VAR 0 3
59019: PUSH
59020: LD_INT 100
59022: PUSH
59023: LD_VAR 0 8
59027: PLUS
59028: STR
59029: PUSH
59030: LD_STRING ;
59032: STR
59033: ST_TO_ADDR
// end ;
59034: GO 58989
59036: POP
59037: POP
// if tmp then
59038: LD_VAR 0 3
59042: IFFALSE 59054
// active := tmp ;
59044: LD_ADDR_VAR 0 7
59048: PUSH
59049: LD_VAR 0 3
59053: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59054: LD_STRING getStreamItemsFromMission("
59056: PUSH
59057: LD_VAR 0 5
59061: STR
59062: PUSH
59063: LD_STRING ","
59065: STR
59066: PUSH
59067: LD_VAR 0 6
59071: STR
59072: PUSH
59073: LD_STRING ","
59075: STR
59076: PUSH
59077: LD_VAR 0 7
59081: STR
59082: PUSH
59083: LD_STRING ")
59085: STR
59086: PPUSH
59087: CALL_OW 559
// end else
59091: GO 59100
// ToLua ( getStreamItemsFromMission("","","") ) ;
59093: LD_STRING getStreamItemsFromMission("","","")
59095: PPUSH
59096: CALL_OW 559
// end ;
59100: LD_VAR 0 2
59104: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59105: LD_EXP 38
59109: PUSH
59110: LD_EXP 43
59114: AND
59115: IFFALSE 59239
59117: GO 59119
59119: DISABLE
59120: LD_INT 0
59122: PPUSH
59123: PPUSH
// begin enable ;
59124: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59125: LD_ADDR_VAR 0 2
59129: PUSH
59130: LD_INT 22
59132: PUSH
59133: LD_OWVAR 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: PUSH
59142: LD_INT 2
59144: PUSH
59145: LD_INT 34
59147: PUSH
59148: LD_INT 7
59150: PUSH
59151: EMPTY
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 34
59157: PUSH
59158: LD_INT 45
59160: PUSH
59161: EMPTY
59162: LIST
59163: LIST
59164: PUSH
59165: LD_INT 34
59167: PUSH
59168: LD_INT 28
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 34
59177: PUSH
59178: LD_INT 47
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: LIST
59189: LIST
59190: LIST
59191: PUSH
59192: EMPTY
59193: LIST
59194: LIST
59195: PPUSH
59196: CALL_OW 69
59200: ST_TO_ADDR
// if not tmp then
59201: LD_VAR 0 2
59205: NOT
59206: IFFALSE 59210
// exit ;
59208: GO 59239
// for i in tmp do
59210: LD_ADDR_VAR 0 1
59214: PUSH
59215: LD_VAR 0 2
59219: PUSH
59220: FOR_IN
59221: IFFALSE 59237
// begin SetLives ( i , 0 ) ;
59223: LD_VAR 0 1
59227: PPUSH
59228: LD_INT 0
59230: PPUSH
59231: CALL_OW 234
// end ;
59235: GO 59220
59237: POP
59238: POP
// end ;
59239: PPOPN 2
59241: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
59242: LD_EXP 38
59246: PUSH
59247: LD_EXP 44
59251: AND
59252: IFFALSE 59336
59254: GO 59256
59256: DISABLE
59257: LD_INT 0
59259: PPUSH
59260: PPUSH
// begin enable ;
59261: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
59262: LD_ADDR_VAR 0 2
59266: PUSH
59267: LD_INT 22
59269: PUSH
59270: LD_OWVAR 2
59274: PUSH
59275: EMPTY
59276: LIST
59277: LIST
59278: PUSH
59279: LD_INT 32
59281: PUSH
59282: LD_INT 3
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PPUSH
59293: CALL_OW 69
59297: ST_TO_ADDR
// if not tmp then
59298: LD_VAR 0 2
59302: NOT
59303: IFFALSE 59307
// exit ;
59305: GO 59336
// for i in tmp do
59307: LD_ADDR_VAR 0 1
59311: PUSH
59312: LD_VAR 0 2
59316: PUSH
59317: FOR_IN
59318: IFFALSE 59334
// begin SetLives ( i , 0 ) ;
59320: LD_VAR 0 1
59324: PPUSH
59325: LD_INT 0
59327: PPUSH
59328: CALL_OW 234
// end ;
59332: GO 59317
59334: POP
59335: POP
// end ;
59336: PPOPN 2
59338: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
59339: LD_EXP 38
59343: PUSH
59344: LD_EXP 41
59348: AND
59349: IFFALSE 59442
59351: GO 59353
59353: DISABLE
59354: LD_INT 0
59356: PPUSH
// begin enable ;
59357: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
59358: LD_ADDR_VAR 0 1
59362: PUSH
59363: LD_INT 22
59365: PUSH
59366: LD_OWVAR 2
59370: PUSH
59371: EMPTY
59372: LIST
59373: LIST
59374: PUSH
59375: LD_INT 2
59377: PUSH
59378: LD_INT 25
59380: PUSH
59381: LD_INT 5
59383: PUSH
59384: EMPTY
59385: LIST
59386: LIST
59387: PUSH
59388: LD_INT 25
59390: PUSH
59391: LD_INT 9
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 25
59400: PUSH
59401: LD_INT 8
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: PUSH
59414: EMPTY
59415: LIST
59416: LIST
59417: PPUSH
59418: CALL_OW 69
59422: PUSH
59423: FOR_IN
59424: IFFALSE 59440
// begin SetClass ( i , 1 ) ;
59426: LD_VAR 0 1
59430: PPUSH
59431: LD_INT 1
59433: PPUSH
59434: CALL_OW 336
// end ;
59438: GO 59423
59440: POP
59441: POP
// end ;
59442: PPOPN 1
59444: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
59445: LD_EXP 38
59449: PUSH
59450: LD_EXP 42
59454: AND
59455: PUSH
59456: LD_OWVAR 65
59460: PUSH
59461: LD_INT 7
59463: LESS
59464: AND
59465: IFFALSE 59479
59467: GO 59469
59469: DISABLE
// begin enable ;
59470: ENABLE
// game_speed := 7 ;
59471: LD_ADDR_OWVAR 65
59475: PUSH
59476: LD_INT 7
59478: ST_TO_ADDR
// end ;
59479: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
59480: LD_EXP 38
59484: PUSH
59485: LD_EXP 45
59489: AND
59490: IFFALSE 59692
59492: GO 59494
59494: DISABLE
59495: LD_INT 0
59497: PPUSH
59498: PPUSH
59499: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
59500: LD_ADDR_VAR 0 3
59504: PUSH
59505: LD_INT 81
59507: PUSH
59508: LD_OWVAR 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 21
59519: PUSH
59520: LD_INT 1
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PPUSH
59531: CALL_OW 69
59535: ST_TO_ADDR
// if not tmp then
59536: LD_VAR 0 3
59540: NOT
59541: IFFALSE 59545
// exit ;
59543: GO 59692
// if tmp > 5 then
59545: LD_VAR 0 3
59549: PUSH
59550: LD_INT 5
59552: GREATER
59553: IFFALSE 59565
// k := 5 else
59555: LD_ADDR_VAR 0 2
59559: PUSH
59560: LD_INT 5
59562: ST_TO_ADDR
59563: GO 59575
// k := tmp ;
59565: LD_ADDR_VAR 0 2
59569: PUSH
59570: LD_VAR 0 3
59574: ST_TO_ADDR
// for i := 1 to k do
59575: LD_ADDR_VAR 0 1
59579: PUSH
59580: DOUBLE
59581: LD_INT 1
59583: DEC
59584: ST_TO_ADDR
59585: LD_VAR 0 2
59589: PUSH
59590: FOR_TO
59591: IFFALSE 59690
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
59593: LD_VAR 0 3
59597: PUSH
59598: LD_VAR 0 1
59602: ARRAY
59603: PPUSH
59604: LD_VAR 0 1
59608: PUSH
59609: LD_INT 4
59611: MOD
59612: PUSH
59613: LD_INT 1
59615: PLUS
59616: PPUSH
59617: CALL_OW 259
59621: PUSH
59622: LD_INT 10
59624: LESS
59625: IFFALSE 59688
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
59627: LD_VAR 0 3
59631: PUSH
59632: LD_VAR 0 1
59636: ARRAY
59637: PPUSH
59638: LD_VAR 0 1
59642: PUSH
59643: LD_INT 4
59645: MOD
59646: PUSH
59647: LD_INT 1
59649: PLUS
59650: PPUSH
59651: LD_VAR 0 3
59655: PUSH
59656: LD_VAR 0 1
59660: ARRAY
59661: PPUSH
59662: LD_VAR 0 1
59666: PUSH
59667: LD_INT 4
59669: MOD
59670: PUSH
59671: LD_INT 1
59673: PLUS
59674: PPUSH
59675: CALL_OW 259
59679: PUSH
59680: LD_INT 1
59682: PLUS
59683: PPUSH
59684: CALL_OW 237
59688: GO 59590
59690: POP
59691: POP
// end ;
59692: PPOPN 3
59694: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
59695: LD_EXP 38
59699: PUSH
59700: LD_EXP 46
59704: AND
59705: IFFALSE 59725
59707: GO 59709
59709: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
59710: LD_INT 4
59712: PPUSH
59713: LD_OWVAR 2
59717: PPUSH
59718: LD_INT 0
59720: PPUSH
59721: CALL_OW 324
59725: END
// every 0 0$1 trigger StreamModeActive and sShovel do
59726: LD_EXP 38
59730: PUSH
59731: LD_EXP 75
59735: AND
59736: IFFALSE 59756
59738: GO 59740
59740: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
59741: LD_INT 19
59743: PPUSH
59744: LD_OWVAR 2
59748: PPUSH
59749: LD_INT 0
59751: PPUSH
59752: CALL_OW 324
59756: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
59757: LD_EXP 38
59761: PUSH
59762: LD_EXP 47
59766: AND
59767: IFFALSE 59869
59769: GO 59771
59771: DISABLE
59772: LD_INT 0
59774: PPUSH
59775: PPUSH
// begin enable ;
59776: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
59777: LD_ADDR_VAR 0 2
59781: PUSH
59782: LD_INT 22
59784: PUSH
59785: LD_OWVAR 2
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 2
59796: PUSH
59797: LD_INT 34
59799: PUSH
59800: LD_INT 11
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: PUSH
59807: LD_INT 34
59809: PUSH
59810: LD_INT 30
59812: PUSH
59813: EMPTY
59814: LIST
59815: LIST
59816: PUSH
59817: EMPTY
59818: LIST
59819: LIST
59820: LIST
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PPUSH
59826: CALL_OW 69
59830: ST_TO_ADDR
// if not tmp then
59831: LD_VAR 0 2
59835: NOT
59836: IFFALSE 59840
// exit ;
59838: GO 59869
// for i in tmp do
59840: LD_ADDR_VAR 0 1
59844: PUSH
59845: LD_VAR 0 2
59849: PUSH
59850: FOR_IN
59851: IFFALSE 59867
// begin SetLives ( i , 0 ) ;
59853: LD_VAR 0 1
59857: PPUSH
59858: LD_INT 0
59860: PPUSH
59861: CALL_OW 234
// end ;
59865: GO 59850
59867: POP
59868: POP
// end ;
59869: PPOPN 2
59871: END
// every 0 0$1 trigger StreamModeActive and sBunker do
59872: LD_EXP 38
59876: PUSH
59877: LD_EXP 48
59881: AND
59882: IFFALSE 59902
59884: GO 59886
59886: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
59887: LD_INT 32
59889: PPUSH
59890: LD_OWVAR 2
59894: PPUSH
59895: LD_INT 0
59897: PPUSH
59898: CALL_OW 324
59902: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
59903: LD_EXP 38
59907: PUSH
59908: LD_EXP 49
59912: AND
59913: IFFALSE 60094
59915: GO 59917
59917: DISABLE
59918: LD_INT 0
59920: PPUSH
59921: PPUSH
59922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
59923: LD_ADDR_VAR 0 2
59927: PUSH
59928: LD_INT 22
59930: PUSH
59931: LD_OWVAR 2
59935: PUSH
59936: EMPTY
59937: LIST
59938: LIST
59939: PUSH
59940: LD_INT 33
59942: PUSH
59943: LD_INT 3
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: EMPTY
59951: LIST
59952: LIST
59953: PPUSH
59954: CALL_OW 69
59958: ST_TO_ADDR
// if not tmp then
59959: LD_VAR 0 2
59963: NOT
59964: IFFALSE 59968
// exit ;
59966: GO 60094
// side := 0 ;
59968: LD_ADDR_VAR 0 3
59972: PUSH
59973: LD_INT 0
59975: ST_TO_ADDR
// for i := 1 to 8 do
59976: LD_ADDR_VAR 0 1
59980: PUSH
59981: DOUBLE
59982: LD_INT 1
59984: DEC
59985: ST_TO_ADDR
59986: LD_INT 8
59988: PUSH
59989: FOR_TO
59990: IFFALSE 60038
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
59992: LD_OWVAR 2
59996: PUSH
59997: LD_VAR 0 1
60001: NONEQUAL
60002: PUSH
60003: LD_OWVAR 2
60007: PPUSH
60008: LD_VAR 0 1
60012: PPUSH
60013: CALL_OW 81
60017: PUSH
60018: LD_INT 2
60020: EQUAL
60021: AND
60022: IFFALSE 60036
// begin side := i ;
60024: LD_ADDR_VAR 0 3
60028: PUSH
60029: LD_VAR 0 1
60033: ST_TO_ADDR
// break ;
60034: GO 60038
// end ;
60036: GO 59989
60038: POP
60039: POP
// if not side then
60040: LD_VAR 0 3
60044: NOT
60045: IFFALSE 60049
// exit ;
60047: GO 60094
// for i := 1 to tmp do
60049: LD_ADDR_VAR 0 1
60053: PUSH
60054: DOUBLE
60055: LD_INT 1
60057: DEC
60058: ST_TO_ADDR
60059: LD_VAR 0 2
60063: PUSH
60064: FOR_TO
60065: IFFALSE 60092
// if Prob ( 60 ) then
60067: LD_INT 60
60069: PPUSH
60070: CALL_OW 13
60074: IFFALSE 60090
// SetSide ( i , side ) ;
60076: LD_VAR 0 1
60080: PPUSH
60081: LD_VAR 0 3
60085: PPUSH
60086: CALL_OW 235
60090: GO 60064
60092: POP
60093: POP
// end ;
60094: PPOPN 3
60096: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60097: LD_EXP 38
60101: PUSH
60102: LD_EXP 51
60106: AND
60107: IFFALSE 60226
60109: GO 60111
60111: DISABLE
60112: LD_INT 0
60114: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60115: LD_ADDR_VAR 0 1
60119: PUSH
60120: LD_INT 22
60122: PUSH
60123: LD_OWVAR 2
60127: PUSH
60128: EMPTY
60129: LIST
60130: LIST
60131: PUSH
60132: LD_INT 21
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: PUSH
60142: LD_INT 3
60144: PUSH
60145: LD_INT 23
60147: PUSH
60148: LD_INT 0
60150: PUSH
60151: EMPTY
60152: LIST
60153: LIST
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: LIST
60163: PPUSH
60164: CALL_OW 69
60168: PUSH
60169: FOR_IN
60170: IFFALSE 60224
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
60172: LD_VAR 0 1
60176: PPUSH
60177: CALL_OW 257
60181: PUSH
60182: LD_INT 1
60184: PUSH
60185: LD_INT 2
60187: PUSH
60188: LD_INT 3
60190: PUSH
60191: LD_INT 4
60193: PUSH
60194: EMPTY
60195: LIST
60196: LIST
60197: LIST
60198: LIST
60199: IN
60200: IFFALSE 60222
// SetClass ( un , rand ( 1 , 4 ) ) ;
60202: LD_VAR 0 1
60206: PPUSH
60207: LD_INT 1
60209: PPUSH
60210: LD_INT 4
60212: PPUSH
60213: CALL_OW 12
60217: PPUSH
60218: CALL_OW 336
60222: GO 60169
60224: POP
60225: POP
// end ;
60226: PPOPN 1
60228: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
60229: LD_EXP 38
60233: PUSH
60234: LD_EXP 50
60238: AND
60239: IFFALSE 60318
60241: GO 60243
60243: DISABLE
60244: LD_INT 0
60246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60247: LD_ADDR_VAR 0 1
60251: PUSH
60252: LD_INT 22
60254: PUSH
60255: LD_OWVAR 2
60259: PUSH
60260: EMPTY
60261: LIST
60262: LIST
60263: PUSH
60264: LD_INT 21
60266: PUSH
60267: LD_INT 3
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PPUSH
60278: CALL_OW 69
60282: ST_TO_ADDR
// if not tmp then
60283: LD_VAR 0 1
60287: NOT
60288: IFFALSE 60292
// exit ;
60290: GO 60318
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
60292: LD_VAR 0 1
60296: PUSH
60297: LD_INT 1
60299: PPUSH
60300: LD_VAR 0 1
60304: PPUSH
60305: CALL_OW 12
60309: ARRAY
60310: PPUSH
60311: LD_INT 100
60313: PPUSH
60314: CALL_OW 234
// end ;
60318: PPOPN 1
60320: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
60321: LD_EXP 38
60325: PUSH
60326: LD_EXP 52
60330: AND
60331: IFFALSE 60429
60333: GO 60335
60335: DISABLE
60336: LD_INT 0
60338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
60339: LD_ADDR_VAR 0 1
60343: PUSH
60344: LD_INT 22
60346: PUSH
60347: LD_OWVAR 2
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: LD_INT 21
60358: PUSH
60359: LD_INT 1
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PPUSH
60370: CALL_OW 69
60374: ST_TO_ADDR
// if not tmp then
60375: LD_VAR 0 1
60379: NOT
60380: IFFALSE 60384
// exit ;
60382: GO 60429
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
60384: LD_VAR 0 1
60388: PUSH
60389: LD_INT 1
60391: PPUSH
60392: LD_VAR 0 1
60396: PPUSH
60397: CALL_OW 12
60401: ARRAY
60402: PPUSH
60403: LD_INT 1
60405: PPUSH
60406: LD_INT 4
60408: PPUSH
60409: CALL_OW 12
60413: PPUSH
60414: LD_INT 3000
60416: PPUSH
60417: LD_INT 9000
60419: PPUSH
60420: CALL_OW 12
60424: PPUSH
60425: CALL_OW 492
// end ;
60429: PPOPN 1
60431: END
// every 0 0$1 trigger StreamModeActive and sDepot do
60432: LD_EXP 38
60436: PUSH
60437: LD_EXP 53
60441: AND
60442: IFFALSE 60462
60444: GO 60446
60446: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
60447: LD_INT 1
60449: PPUSH
60450: LD_OWVAR 2
60454: PPUSH
60455: LD_INT 0
60457: PPUSH
60458: CALL_OW 324
60462: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
60463: LD_EXP 38
60467: PUSH
60468: LD_EXP 54
60472: AND
60473: IFFALSE 60556
60475: GO 60477
60477: DISABLE
60478: LD_INT 0
60480: PPUSH
60481: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
60482: LD_ADDR_VAR 0 2
60486: PUSH
60487: LD_INT 22
60489: PUSH
60490: LD_OWVAR 2
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 21
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PPUSH
60513: CALL_OW 69
60517: ST_TO_ADDR
// if not tmp then
60518: LD_VAR 0 2
60522: NOT
60523: IFFALSE 60527
// exit ;
60525: GO 60556
// for i in tmp do
60527: LD_ADDR_VAR 0 1
60531: PUSH
60532: LD_VAR 0 2
60536: PUSH
60537: FOR_IN
60538: IFFALSE 60554
// SetBLevel ( i , 10 ) ;
60540: LD_VAR 0 1
60544: PPUSH
60545: LD_INT 10
60547: PPUSH
60548: CALL_OW 241
60552: GO 60537
60554: POP
60555: POP
// end ;
60556: PPOPN 2
60558: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
60559: LD_EXP 38
60563: PUSH
60564: LD_EXP 55
60568: AND
60569: IFFALSE 60680
60571: GO 60573
60573: DISABLE
60574: LD_INT 0
60576: PPUSH
60577: PPUSH
60578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60579: LD_ADDR_VAR 0 3
60583: PUSH
60584: LD_INT 22
60586: PUSH
60587: LD_OWVAR 2
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: LD_INT 25
60598: PUSH
60599: LD_INT 1
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: PPUSH
60610: CALL_OW 69
60614: ST_TO_ADDR
// if not tmp then
60615: LD_VAR 0 3
60619: NOT
60620: IFFALSE 60624
// exit ;
60622: GO 60680
// un := tmp [ rand ( 1 , tmp ) ] ;
60624: LD_ADDR_VAR 0 2
60628: PUSH
60629: LD_VAR 0 3
60633: PUSH
60634: LD_INT 1
60636: PPUSH
60637: LD_VAR 0 3
60641: PPUSH
60642: CALL_OW 12
60646: ARRAY
60647: ST_TO_ADDR
// if Crawls ( un ) then
60648: LD_VAR 0 2
60652: PPUSH
60653: CALL_OW 318
60657: IFFALSE 60668
// ComWalk ( un ) ;
60659: LD_VAR 0 2
60663: PPUSH
60664: CALL_OW 138
// SetClass ( un , class_sniper ) ;
60668: LD_VAR 0 2
60672: PPUSH
60673: LD_INT 5
60675: PPUSH
60676: CALL_OW 336
// end ;
60680: PPOPN 3
60682: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
60683: LD_EXP 38
60687: PUSH
60688: LD_EXP 56
60692: AND
60693: PUSH
60694: LD_OWVAR 67
60698: PUSH
60699: LD_INT 4
60701: LESS
60702: AND
60703: IFFALSE 60722
60705: GO 60707
60707: DISABLE
// begin Difficulty := Difficulty + 1 ;
60708: LD_ADDR_OWVAR 67
60712: PUSH
60713: LD_OWVAR 67
60717: PUSH
60718: LD_INT 1
60720: PLUS
60721: ST_TO_ADDR
// end ;
60722: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
60723: LD_EXP 38
60727: PUSH
60728: LD_EXP 57
60732: AND
60733: IFFALSE 60836
60735: GO 60737
60737: DISABLE
60738: LD_INT 0
60740: PPUSH
// begin for i := 1 to 5 do
60741: LD_ADDR_VAR 0 1
60745: PUSH
60746: DOUBLE
60747: LD_INT 1
60749: DEC
60750: ST_TO_ADDR
60751: LD_INT 5
60753: PUSH
60754: FOR_TO
60755: IFFALSE 60834
// begin uc_nation := nation_nature ;
60757: LD_ADDR_OWVAR 21
60761: PUSH
60762: LD_INT 0
60764: ST_TO_ADDR
// uc_side := 0 ;
60765: LD_ADDR_OWVAR 20
60769: PUSH
60770: LD_INT 0
60772: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60773: LD_ADDR_OWVAR 29
60777: PUSH
60778: LD_INT 12
60780: PUSH
60781: LD_INT 12
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: ST_TO_ADDR
// hc_agressivity := 20 ;
60788: LD_ADDR_OWVAR 35
60792: PUSH
60793: LD_INT 20
60795: ST_TO_ADDR
// hc_class := class_tiger ;
60796: LD_ADDR_OWVAR 28
60800: PUSH
60801: LD_INT 14
60803: ST_TO_ADDR
// hc_gallery :=  ;
60804: LD_ADDR_OWVAR 33
60808: PUSH
60809: LD_STRING 
60811: ST_TO_ADDR
// hc_name :=  ;
60812: LD_ADDR_OWVAR 26
60816: PUSH
60817: LD_STRING 
60819: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
60820: CALL_OW 44
60824: PPUSH
60825: LD_INT 0
60827: PPUSH
60828: CALL_OW 51
// end ;
60832: GO 60754
60834: POP
60835: POP
// end ;
60836: PPOPN 1
60838: END
// every 0 0$1 trigger StreamModeActive and sBomb do
60839: LD_EXP 38
60843: PUSH
60844: LD_EXP 58
60848: AND
60849: IFFALSE 60858
60851: GO 60853
60853: DISABLE
// StreamSibBomb ;
60854: CALL 60859 0 0
60858: END
// export function StreamSibBomb ; var i , x , y ; begin
60859: LD_INT 0
60861: PPUSH
60862: PPUSH
60863: PPUSH
60864: PPUSH
// result := false ;
60865: LD_ADDR_VAR 0 1
60869: PUSH
60870: LD_INT 0
60872: ST_TO_ADDR
// for i := 1 to 16 do
60873: LD_ADDR_VAR 0 2
60877: PUSH
60878: DOUBLE
60879: LD_INT 1
60881: DEC
60882: ST_TO_ADDR
60883: LD_INT 16
60885: PUSH
60886: FOR_TO
60887: IFFALSE 61086
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60889: LD_ADDR_VAR 0 3
60893: PUSH
60894: LD_INT 10
60896: PUSH
60897: LD_INT 20
60899: PUSH
60900: LD_INT 30
60902: PUSH
60903: LD_INT 40
60905: PUSH
60906: LD_INT 50
60908: PUSH
60909: LD_INT 60
60911: PUSH
60912: LD_INT 70
60914: PUSH
60915: LD_INT 80
60917: PUSH
60918: LD_INT 90
60920: PUSH
60921: LD_INT 100
60923: PUSH
60924: LD_INT 110
60926: PUSH
60927: LD_INT 120
60929: PUSH
60930: LD_INT 130
60932: PUSH
60933: LD_INT 140
60935: PUSH
60936: LD_INT 150
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: LIST
60945: LIST
60946: LIST
60947: LIST
60948: LIST
60949: LIST
60950: LIST
60951: LIST
60952: LIST
60953: LIST
60954: LIST
60955: PUSH
60956: LD_INT 1
60958: PPUSH
60959: LD_INT 15
60961: PPUSH
60962: CALL_OW 12
60966: ARRAY
60967: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
60968: LD_ADDR_VAR 0 4
60972: PUSH
60973: LD_INT 10
60975: PUSH
60976: LD_INT 20
60978: PUSH
60979: LD_INT 30
60981: PUSH
60982: LD_INT 40
60984: PUSH
60985: LD_INT 50
60987: PUSH
60988: LD_INT 60
60990: PUSH
60991: LD_INT 70
60993: PUSH
60994: LD_INT 80
60996: PUSH
60997: LD_INT 90
60999: PUSH
61000: LD_INT 100
61002: PUSH
61003: LD_INT 110
61005: PUSH
61006: LD_INT 120
61008: PUSH
61009: LD_INT 130
61011: PUSH
61012: LD_INT 140
61014: PUSH
61015: LD_INT 150
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: LIST
61034: PUSH
61035: LD_INT 1
61037: PPUSH
61038: LD_INT 15
61040: PPUSH
61041: CALL_OW 12
61045: ARRAY
61046: ST_TO_ADDR
// if ValidHex ( x , y ) then
61047: LD_VAR 0 3
61051: PPUSH
61052: LD_VAR 0 4
61056: PPUSH
61057: CALL_OW 488
61061: IFFALSE 61084
// begin result := [ x , y ] ;
61063: LD_ADDR_VAR 0 1
61067: PUSH
61068: LD_VAR 0 3
61072: PUSH
61073: LD_VAR 0 4
61077: PUSH
61078: EMPTY
61079: LIST
61080: LIST
61081: ST_TO_ADDR
// break ;
61082: GO 61086
// end ; end ;
61084: GO 60886
61086: POP
61087: POP
// if result then
61088: LD_VAR 0 1
61092: IFFALSE 61152
// begin ToLua ( playSibBomb() ) ;
61094: LD_STRING playSibBomb()
61096: PPUSH
61097: CALL_OW 559
// wait ( 0 0$14 ) ;
61101: LD_INT 490
61103: PPUSH
61104: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61108: LD_VAR 0 1
61112: PUSH
61113: LD_INT 1
61115: ARRAY
61116: PPUSH
61117: LD_VAR 0 1
61121: PUSH
61122: LD_INT 2
61124: ARRAY
61125: PPUSH
61126: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
61130: LD_VAR 0 1
61134: PUSH
61135: LD_INT 1
61137: ARRAY
61138: PPUSH
61139: LD_VAR 0 1
61143: PUSH
61144: LD_INT 2
61146: ARRAY
61147: PPUSH
61148: CALL_OW 429
// end ; end ;
61152: LD_VAR 0 1
61156: RET
// every 0 0$1 trigger StreamModeActive and sReset do
61157: LD_EXP 38
61161: PUSH
61162: LD_EXP 60
61166: AND
61167: IFFALSE 61179
61169: GO 61171
61171: DISABLE
// YouLost (  ) ;
61172: LD_STRING 
61174: PPUSH
61175: CALL_OW 104
61179: END
// every 0 0$1 trigger StreamModeActive and sFog do
61180: LD_EXP 38
61184: PUSH
61185: LD_EXP 59
61189: AND
61190: IFFALSE 61204
61192: GO 61194
61194: DISABLE
// FogOff ( your_side ) ;
61195: LD_OWVAR 2
61199: PPUSH
61200: CALL_OW 344
61204: END
// every 0 0$1 trigger StreamModeActive and sSun do
61205: LD_EXP 38
61209: PUSH
61210: LD_EXP 61
61214: AND
61215: IFFALSE 61243
61217: GO 61219
61219: DISABLE
// begin solar_recharge_percent := 0 ;
61220: LD_ADDR_OWVAR 79
61224: PUSH
61225: LD_INT 0
61227: ST_TO_ADDR
// wait ( 5 5$00 ) ;
61228: LD_INT 10500
61230: PPUSH
61231: CALL_OW 67
// solar_recharge_percent := 100 ;
61235: LD_ADDR_OWVAR 79
61239: PUSH
61240: LD_INT 100
61242: ST_TO_ADDR
// end ;
61243: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
61244: LD_EXP 38
61248: PUSH
61249: LD_EXP 62
61253: AND
61254: IFFALSE 61493
61256: GO 61258
61258: DISABLE
61259: LD_INT 0
61261: PPUSH
61262: PPUSH
61263: PPUSH
// begin tmp := [ ] ;
61264: LD_ADDR_VAR 0 3
61268: PUSH
61269: EMPTY
61270: ST_TO_ADDR
// for i := 1 to 6 do
61271: LD_ADDR_VAR 0 1
61275: PUSH
61276: DOUBLE
61277: LD_INT 1
61279: DEC
61280: ST_TO_ADDR
61281: LD_INT 6
61283: PUSH
61284: FOR_TO
61285: IFFALSE 61390
// begin uc_nation := nation_nature ;
61287: LD_ADDR_OWVAR 21
61291: PUSH
61292: LD_INT 0
61294: ST_TO_ADDR
// uc_side := 0 ;
61295: LD_ADDR_OWVAR 20
61299: PUSH
61300: LD_INT 0
61302: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61303: LD_ADDR_OWVAR 29
61307: PUSH
61308: LD_INT 12
61310: PUSH
61311: LD_INT 12
61313: PUSH
61314: EMPTY
61315: LIST
61316: LIST
61317: ST_TO_ADDR
// hc_agressivity := 20 ;
61318: LD_ADDR_OWVAR 35
61322: PUSH
61323: LD_INT 20
61325: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
61326: LD_ADDR_OWVAR 28
61330: PUSH
61331: LD_INT 17
61333: ST_TO_ADDR
// hc_gallery :=  ;
61334: LD_ADDR_OWVAR 33
61338: PUSH
61339: LD_STRING 
61341: ST_TO_ADDR
// hc_name :=  ;
61342: LD_ADDR_OWVAR 26
61346: PUSH
61347: LD_STRING 
61349: ST_TO_ADDR
// un := CreateHuman ;
61350: LD_ADDR_VAR 0 2
61354: PUSH
61355: CALL_OW 44
61359: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
61360: LD_VAR 0 2
61364: PPUSH
61365: LD_INT 1
61367: PPUSH
61368: CALL_OW 51
// tmp := tmp ^ un ;
61372: LD_ADDR_VAR 0 3
61376: PUSH
61377: LD_VAR 0 3
61381: PUSH
61382: LD_VAR 0 2
61386: ADD
61387: ST_TO_ADDR
// end ;
61388: GO 61284
61390: POP
61391: POP
// repeat wait ( 0 0$1 ) ;
61392: LD_INT 35
61394: PPUSH
61395: CALL_OW 67
// for un in tmp do
61399: LD_ADDR_VAR 0 2
61403: PUSH
61404: LD_VAR 0 3
61408: PUSH
61409: FOR_IN
61410: IFFALSE 61484
// begin if IsDead ( un ) then
61412: LD_VAR 0 2
61416: PPUSH
61417: CALL_OW 301
61421: IFFALSE 61441
// begin tmp := tmp diff un ;
61423: LD_ADDR_VAR 0 3
61427: PUSH
61428: LD_VAR 0 3
61432: PUSH
61433: LD_VAR 0 2
61437: DIFF
61438: ST_TO_ADDR
// continue ;
61439: GO 61409
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
61441: LD_VAR 0 2
61445: PPUSH
61446: LD_INT 3
61448: PUSH
61449: LD_INT 22
61451: PUSH
61452: LD_INT 0
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PPUSH
61463: CALL_OW 69
61467: PPUSH
61468: LD_VAR 0 2
61472: PPUSH
61473: CALL_OW 74
61477: PPUSH
61478: CALL_OW 115
// end ;
61482: GO 61409
61484: POP
61485: POP
// until not tmp ;
61486: LD_VAR 0 3
61490: NOT
61491: IFFALSE 61392
// end ;
61493: PPOPN 3
61495: END
// every 0 0$1 trigger StreamModeActive and sTroll do
61496: LD_EXP 38
61500: PUSH
61501: LD_EXP 63
61505: AND
61506: IFFALSE 61560
61508: GO 61510
61510: DISABLE
// begin ToLua ( displayTroll(); ) ;
61511: LD_STRING displayTroll();
61513: PPUSH
61514: CALL_OW 559
// wait ( 3 3$00 ) ;
61518: LD_INT 6300
61520: PPUSH
61521: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61525: LD_STRING hideTroll();
61527: PPUSH
61528: CALL_OW 559
// wait ( 1 1$00 ) ;
61532: LD_INT 2100
61534: PPUSH
61535: CALL_OW 67
// ToLua ( displayTroll(); ) ;
61539: LD_STRING displayTroll();
61541: PPUSH
61542: CALL_OW 559
// wait ( 1 1$00 ) ;
61546: LD_INT 2100
61548: PPUSH
61549: CALL_OW 67
// ToLua ( hideTroll(); ) ;
61553: LD_STRING hideTroll();
61555: PPUSH
61556: CALL_OW 559
// end ;
61560: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
61561: LD_EXP 38
61565: PUSH
61566: LD_EXP 64
61570: AND
61571: IFFALSE 61634
61573: GO 61575
61575: DISABLE
61576: LD_INT 0
61578: PPUSH
// begin p := 0 ;
61579: LD_ADDR_VAR 0 1
61583: PUSH
61584: LD_INT 0
61586: ST_TO_ADDR
// repeat game_speed := 1 ;
61587: LD_ADDR_OWVAR 65
61591: PUSH
61592: LD_INT 1
61594: ST_TO_ADDR
// wait ( 0 0$1 ) ;
61595: LD_INT 35
61597: PPUSH
61598: CALL_OW 67
// p := p + 1 ;
61602: LD_ADDR_VAR 0 1
61606: PUSH
61607: LD_VAR 0 1
61611: PUSH
61612: LD_INT 1
61614: PLUS
61615: ST_TO_ADDR
// until p >= 60 ;
61616: LD_VAR 0 1
61620: PUSH
61621: LD_INT 60
61623: GREATEREQUAL
61624: IFFALSE 61587
// game_speed := 4 ;
61626: LD_ADDR_OWVAR 65
61630: PUSH
61631: LD_INT 4
61633: ST_TO_ADDR
// end ;
61634: PPOPN 1
61636: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
61637: LD_EXP 38
61641: PUSH
61642: LD_EXP 65
61646: AND
61647: IFFALSE 61793
61649: GO 61651
61651: DISABLE
61652: LD_INT 0
61654: PPUSH
61655: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61656: LD_ADDR_VAR 0 1
61660: PUSH
61661: LD_INT 22
61663: PUSH
61664: LD_OWVAR 2
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: PUSH
61673: LD_INT 2
61675: PUSH
61676: LD_INT 30
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: EMPTY
61683: LIST
61684: LIST
61685: PUSH
61686: LD_INT 30
61688: PUSH
61689: LD_INT 1
61691: PUSH
61692: EMPTY
61693: LIST
61694: LIST
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: LIST
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PPUSH
61705: CALL_OW 69
61709: ST_TO_ADDR
// if not depot then
61710: LD_VAR 0 1
61714: NOT
61715: IFFALSE 61719
// exit ;
61717: GO 61793
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
61719: LD_ADDR_VAR 0 2
61723: PUSH
61724: LD_VAR 0 1
61728: PUSH
61729: LD_INT 1
61731: PPUSH
61732: LD_VAR 0 1
61736: PPUSH
61737: CALL_OW 12
61741: ARRAY
61742: PPUSH
61743: CALL_OW 274
61747: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
61748: LD_VAR 0 2
61752: PPUSH
61753: LD_INT 1
61755: PPUSH
61756: LD_INT 0
61758: PPUSH
61759: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
61763: LD_VAR 0 2
61767: PPUSH
61768: LD_INT 2
61770: PPUSH
61771: LD_INT 0
61773: PPUSH
61774: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
61778: LD_VAR 0 2
61782: PPUSH
61783: LD_INT 3
61785: PPUSH
61786: LD_INT 0
61788: PPUSH
61789: CALL_OW 277
// end ;
61793: PPOPN 2
61795: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
61796: LD_EXP 38
61800: PUSH
61801: LD_EXP 66
61805: AND
61806: IFFALSE 61903
61808: GO 61810
61810: DISABLE
61811: LD_INT 0
61813: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61814: LD_ADDR_VAR 0 1
61818: PUSH
61819: LD_INT 22
61821: PUSH
61822: LD_OWVAR 2
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 21
61833: PUSH
61834: LD_INT 1
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PUSH
61841: LD_INT 3
61843: PUSH
61844: LD_INT 23
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: EMPTY
61851: LIST
61852: LIST
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: EMPTY
61859: LIST
61860: LIST
61861: LIST
61862: PPUSH
61863: CALL_OW 69
61867: ST_TO_ADDR
// if not tmp then
61868: LD_VAR 0 1
61872: NOT
61873: IFFALSE 61877
// exit ;
61875: GO 61903
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
61877: LD_VAR 0 1
61881: PUSH
61882: LD_INT 1
61884: PPUSH
61885: LD_VAR 0 1
61889: PPUSH
61890: CALL_OW 12
61894: ARRAY
61895: PPUSH
61896: LD_INT 200
61898: PPUSH
61899: CALL_OW 234
// end ;
61903: PPOPN 1
61905: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
61906: LD_EXP 38
61910: PUSH
61911: LD_EXP 67
61915: AND
61916: IFFALSE 61995
61918: GO 61920
61920: DISABLE
61921: LD_INT 0
61923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
61924: LD_ADDR_VAR 0 1
61928: PUSH
61929: LD_INT 22
61931: PUSH
61932: LD_OWVAR 2
61936: PUSH
61937: EMPTY
61938: LIST
61939: LIST
61940: PUSH
61941: LD_INT 21
61943: PUSH
61944: LD_INT 2
61946: PUSH
61947: EMPTY
61948: LIST
61949: LIST
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PPUSH
61955: CALL_OW 69
61959: ST_TO_ADDR
// if not tmp then
61960: LD_VAR 0 1
61964: NOT
61965: IFFALSE 61969
// exit ;
61967: GO 61995
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
61969: LD_VAR 0 1
61973: PUSH
61974: LD_INT 1
61976: PPUSH
61977: LD_VAR 0 1
61981: PPUSH
61982: CALL_OW 12
61986: ARRAY
61987: PPUSH
61988: LD_INT 60
61990: PPUSH
61991: CALL_OW 234
// end ;
61995: PPOPN 1
61997: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
61998: LD_EXP 38
62002: PUSH
62003: LD_EXP 68
62007: AND
62008: IFFALSE 62107
62010: GO 62012
62012: DISABLE
62013: LD_INT 0
62015: PPUSH
62016: PPUSH
// begin enable ;
62017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62018: LD_ADDR_VAR 0 1
62022: PUSH
62023: LD_INT 22
62025: PUSH
62026: LD_OWVAR 2
62030: PUSH
62031: EMPTY
62032: LIST
62033: LIST
62034: PUSH
62035: LD_INT 61
62037: PUSH
62038: EMPTY
62039: LIST
62040: PUSH
62041: LD_INT 33
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: LIST
62055: PPUSH
62056: CALL_OW 69
62060: ST_TO_ADDR
// if not tmp then
62061: LD_VAR 0 1
62065: NOT
62066: IFFALSE 62070
// exit ;
62068: GO 62107
// for i in tmp do
62070: LD_ADDR_VAR 0 2
62074: PUSH
62075: LD_VAR 0 1
62079: PUSH
62080: FOR_IN
62081: IFFALSE 62105
// if IsControledBy ( i ) then
62083: LD_VAR 0 2
62087: PPUSH
62088: CALL_OW 312
62092: IFFALSE 62103
// ComUnlink ( i ) ;
62094: LD_VAR 0 2
62098: PPUSH
62099: CALL_OW 136
62103: GO 62080
62105: POP
62106: POP
// end ;
62107: PPOPN 2
62109: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
62110: LD_EXP 38
62114: PUSH
62115: LD_EXP 69
62119: AND
62120: IFFALSE 62260
62122: GO 62124
62124: DISABLE
62125: LD_INT 0
62127: PPUSH
62128: PPUSH
// begin ToLua ( displayPowell(); ) ;
62129: LD_STRING displayPowell();
62131: PPUSH
62132: CALL_OW 559
// uc_side := 0 ;
62136: LD_ADDR_OWVAR 20
62140: PUSH
62141: LD_INT 0
62143: ST_TO_ADDR
// uc_nation := 2 ;
62144: LD_ADDR_OWVAR 21
62148: PUSH
62149: LD_INT 2
62151: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
62152: LD_ADDR_OWVAR 37
62156: PUSH
62157: LD_INT 14
62159: ST_TO_ADDR
// vc_engine := engine_siberite ;
62160: LD_ADDR_OWVAR 39
62164: PUSH
62165: LD_INT 3
62167: ST_TO_ADDR
// vc_control := control_apeman ;
62168: LD_ADDR_OWVAR 38
62172: PUSH
62173: LD_INT 5
62175: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
62176: LD_ADDR_OWVAR 40
62180: PUSH
62181: LD_INT 29
62183: ST_TO_ADDR
// un := CreateVehicle ;
62184: LD_ADDR_VAR 0 2
62188: PUSH
62189: CALL_OW 45
62193: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62194: LD_VAR 0 2
62198: PPUSH
62199: LD_INT 1
62201: PPUSH
62202: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
62206: LD_INT 35
62208: PPUSH
62209: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
62213: LD_VAR 0 2
62217: PPUSH
62218: LD_INT 22
62220: PUSH
62221: LD_OWVAR 2
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PPUSH
62230: CALL_OW 69
62234: PPUSH
62235: LD_VAR 0 2
62239: PPUSH
62240: CALL_OW 74
62244: PPUSH
62245: CALL_OW 115
// until IsDead ( un ) ;
62249: LD_VAR 0 2
62253: PPUSH
62254: CALL_OW 301
62258: IFFALSE 62206
// end ;
62260: PPOPN 2
62262: END
// every 0 0$1 trigger StreamModeActive and sStu do
62263: LD_EXP 38
62267: PUSH
62268: LD_EXP 77
62272: AND
62273: IFFALSE 62289
62275: GO 62277
62277: DISABLE
// begin ToLua ( displayStucuk(); ) ;
62278: LD_STRING displayStucuk();
62280: PPUSH
62281: CALL_OW 559
// ResetFog ;
62285: CALL_OW 335
// end ;
62289: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
62290: LD_EXP 38
62294: PUSH
62295: LD_EXP 70
62299: AND
62300: IFFALSE 62441
62302: GO 62304
62304: DISABLE
62305: LD_INT 0
62307: PPUSH
62308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62309: LD_ADDR_VAR 0 2
62313: PUSH
62314: LD_INT 22
62316: PUSH
62317: LD_OWVAR 2
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 21
62328: PUSH
62329: LD_INT 1
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: EMPTY
62337: LIST
62338: LIST
62339: PPUSH
62340: CALL_OW 69
62344: ST_TO_ADDR
// if not tmp then
62345: LD_VAR 0 2
62349: NOT
62350: IFFALSE 62354
// exit ;
62352: GO 62441
// un := tmp [ rand ( 1 , tmp ) ] ;
62354: LD_ADDR_VAR 0 1
62358: PUSH
62359: LD_VAR 0 2
62363: PUSH
62364: LD_INT 1
62366: PPUSH
62367: LD_VAR 0 2
62371: PPUSH
62372: CALL_OW 12
62376: ARRAY
62377: ST_TO_ADDR
// SetSide ( un , 0 ) ;
62378: LD_VAR 0 1
62382: PPUSH
62383: LD_INT 0
62385: PPUSH
62386: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
62390: LD_VAR 0 1
62394: PPUSH
62395: LD_OWVAR 3
62399: PUSH
62400: LD_VAR 0 1
62404: DIFF
62405: PPUSH
62406: LD_VAR 0 1
62410: PPUSH
62411: CALL_OW 74
62415: PPUSH
62416: CALL_OW 115
// wait ( 0 0$20 ) ;
62420: LD_INT 700
62422: PPUSH
62423: CALL_OW 67
// SetSide ( un , your_side ) ;
62427: LD_VAR 0 1
62431: PPUSH
62432: LD_OWVAR 2
62436: PPUSH
62437: CALL_OW 235
// end ;
62441: PPOPN 2
62443: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
62444: LD_EXP 38
62448: PUSH
62449: LD_EXP 71
62453: AND
62454: IFFALSE 62560
62456: GO 62458
62458: DISABLE
62459: LD_INT 0
62461: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62462: LD_ADDR_VAR 0 1
62466: PUSH
62467: LD_INT 22
62469: PUSH
62470: LD_OWVAR 2
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: LD_INT 30
62484: PUSH
62485: LD_INT 0
62487: PUSH
62488: EMPTY
62489: LIST
62490: LIST
62491: PUSH
62492: LD_INT 30
62494: PUSH
62495: LD_INT 1
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PPUSH
62511: CALL_OW 69
62515: ST_TO_ADDR
// if not depot then
62516: LD_VAR 0 1
62520: NOT
62521: IFFALSE 62525
// exit ;
62523: GO 62560
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
62525: LD_VAR 0 1
62529: PUSH
62530: LD_INT 1
62532: ARRAY
62533: PPUSH
62534: CALL_OW 250
62538: PPUSH
62539: LD_VAR 0 1
62543: PUSH
62544: LD_INT 1
62546: ARRAY
62547: PPUSH
62548: CALL_OW 251
62552: PPUSH
62553: LD_INT 70
62555: PPUSH
62556: CALL_OW 495
// end ;
62560: PPOPN 1
62562: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
62563: LD_EXP 38
62567: PUSH
62568: LD_EXP 72
62572: AND
62573: IFFALSE 62784
62575: GO 62577
62577: DISABLE
62578: LD_INT 0
62580: PPUSH
62581: PPUSH
62582: PPUSH
62583: PPUSH
62584: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
62585: LD_ADDR_VAR 0 5
62589: PUSH
62590: LD_INT 22
62592: PUSH
62593: LD_OWVAR 2
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: LD_INT 21
62604: PUSH
62605: LD_INT 1
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: EMPTY
62613: LIST
62614: LIST
62615: PPUSH
62616: CALL_OW 69
62620: ST_TO_ADDR
// if not tmp then
62621: LD_VAR 0 5
62625: NOT
62626: IFFALSE 62630
// exit ;
62628: GO 62784
// for i in tmp do
62630: LD_ADDR_VAR 0 1
62634: PUSH
62635: LD_VAR 0 5
62639: PUSH
62640: FOR_IN
62641: IFFALSE 62782
// begin d := rand ( 0 , 5 ) ;
62643: LD_ADDR_VAR 0 4
62647: PUSH
62648: LD_INT 0
62650: PPUSH
62651: LD_INT 5
62653: PPUSH
62654: CALL_OW 12
62658: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
62659: LD_ADDR_VAR 0 2
62663: PUSH
62664: LD_VAR 0 1
62668: PPUSH
62669: CALL_OW 250
62673: PPUSH
62674: LD_VAR 0 4
62678: PPUSH
62679: LD_INT 3
62681: PPUSH
62682: LD_INT 12
62684: PPUSH
62685: CALL_OW 12
62689: PPUSH
62690: CALL_OW 272
62694: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
62695: LD_ADDR_VAR 0 3
62699: PUSH
62700: LD_VAR 0 1
62704: PPUSH
62705: CALL_OW 251
62709: PPUSH
62710: LD_VAR 0 4
62714: PPUSH
62715: LD_INT 3
62717: PPUSH
62718: LD_INT 12
62720: PPUSH
62721: CALL_OW 12
62725: PPUSH
62726: CALL_OW 273
62730: ST_TO_ADDR
// if ValidHex ( x , y ) then
62731: LD_VAR 0 2
62735: PPUSH
62736: LD_VAR 0 3
62740: PPUSH
62741: CALL_OW 488
62745: IFFALSE 62780
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
62747: LD_VAR 0 1
62751: PPUSH
62752: LD_VAR 0 2
62756: PPUSH
62757: LD_VAR 0 3
62761: PPUSH
62762: LD_INT 3
62764: PPUSH
62765: LD_INT 6
62767: PPUSH
62768: CALL_OW 12
62772: PPUSH
62773: LD_INT 1
62775: PPUSH
62776: CALL_OW 483
// end ;
62780: GO 62640
62782: POP
62783: POP
// end ;
62784: PPOPN 5
62786: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
62787: LD_EXP 38
62791: PUSH
62792: LD_EXP 73
62796: AND
62797: IFFALSE 62891
62799: GO 62801
62801: DISABLE
62802: LD_INT 0
62804: PPUSH
62805: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
62806: LD_ADDR_VAR 0 2
62810: PUSH
62811: LD_INT 22
62813: PUSH
62814: LD_OWVAR 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: LD_INT 32
62825: PUSH
62826: LD_INT 1
62828: PUSH
62829: EMPTY
62830: LIST
62831: LIST
62832: PUSH
62833: LD_INT 21
62835: PUSH
62836: LD_INT 2
62838: PUSH
62839: EMPTY
62840: LIST
62841: LIST
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: PPUSH
62848: CALL_OW 69
62852: ST_TO_ADDR
// if not tmp then
62853: LD_VAR 0 2
62857: NOT
62858: IFFALSE 62862
// exit ;
62860: GO 62891
// for i in tmp do
62862: LD_ADDR_VAR 0 1
62866: PUSH
62867: LD_VAR 0 2
62871: PUSH
62872: FOR_IN
62873: IFFALSE 62889
// SetFuel ( i , 0 ) ;
62875: LD_VAR 0 1
62879: PPUSH
62880: LD_INT 0
62882: PPUSH
62883: CALL_OW 240
62887: GO 62872
62889: POP
62890: POP
// end ;
62891: PPOPN 2
62893: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
62894: LD_EXP 38
62898: PUSH
62899: LD_EXP 74
62903: AND
62904: IFFALSE 62970
62906: GO 62908
62908: DISABLE
62909: LD_INT 0
62911: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
62912: LD_ADDR_VAR 0 1
62916: PUSH
62917: LD_INT 22
62919: PUSH
62920: LD_OWVAR 2
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 30
62931: PUSH
62932: LD_INT 29
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PPUSH
62943: CALL_OW 69
62947: ST_TO_ADDR
// if not tmp then
62948: LD_VAR 0 1
62952: NOT
62953: IFFALSE 62957
// exit ;
62955: GO 62970
// DestroyUnit ( tmp [ 1 ] ) ;
62957: LD_VAR 0 1
62961: PUSH
62962: LD_INT 1
62964: ARRAY
62965: PPUSH
62966: CALL_OW 65
// end ;
62970: PPOPN 1
62972: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
62973: LD_EXP 38
62977: PUSH
62978: LD_EXP 76
62982: AND
62983: IFFALSE 63112
62985: GO 62987
62987: DISABLE
62988: LD_INT 0
62990: PPUSH
// begin uc_side := 0 ;
62991: LD_ADDR_OWVAR 20
62995: PUSH
62996: LD_INT 0
62998: ST_TO_ADDR
// uc_nation := nation_arabian ;
62999: LD_ADDR_OWVAR 21
63003: PUSH
63004: LD_INT 2
63006: ST_TO_ADDR
// hc_gallery :=  ;
63007: LD_ADDR_OWVAR 33
63011: PUSH
63012: LD_STRING 
63014: ST_TO_ADDR
// hc_name :=  ;
63015: LD_ADDR_OWVAR 26
63019: PUSH
63020: LD_STRING 
63022: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63023: LD_INT 1
63025: PPUSH
63026: LD_INT 11
63028: PPUSH
63029: LD_INT 10
63031: PPUSH
63032: CALL_OW 380
// un := CreateHuman ;
63036: LD_ADDR_VAR 0 1
63040: PUSH
63041: CALL_OW 44
63045: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63046: LD_VAR 0 1
63050: PPUSH
63051: LD_INT 1
63053: PPUSH
63054: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63058: LD_INT 35
63060: PPUSH
63061: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63065: LD_VAR 0 1
63069: PPUSH
63070: LD_INT 22
63072: PUSH
63073: LD_OWVAR 2
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PPUSH
63082: CALL_OW 69
63086: PPUSH
63087: LD_VAR 0 1
63091: PPUSH
63092: CALL_OW 74
63096: PPUSH
63097: CALL_OW 115
// until IsDead ( un ) ;
63101: LD_VAR 0 1
63105: PPUSH
63106: CALL_OW 301
63110: IFFALSE 63058
// end ;
63112: PPOPN 1
63114: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
63115: LD_EXP 38
63119: PUSH
63120: LD_EXP 78
63124: AND
63125: IFFALSE 63137
63127: GO 63129
63129: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
63130: LD_STRING earthquake(getX(game), 0, 32)
63132: PPUSH
63133: CALL_OW 559
63137: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
63138: LD_EXP 38
63142: PUSH
63143: LD_EXP 79
63147: AND
63148: IFFALSE 63239
63150: GO 63152
63152: DISABLE
63153: LD_INT 0
63155: PPUSH
// begin enable ;
63156: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
63157: LD_ADDR_VAR 0 1
63161: PUSH
63162: LD_INT 22
63164: PUSH
63165: LD_OWVAR 2
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 21
63176: PUSH
63177: LD_INT 2
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: LD_INT 33
63186: PUSH
63187: LD_INT 3
63189: PUSH
63190: EMPTY
63191: LIST
63192: LIST
63193: PUSH
63194: EMPTY
63195: LIST
63196: LIST
63197: LIST
63198: PPUSH
63199: CALL_OW 69
63203: ST_TO_ADDR
// if not tmp then
63204: LD_VAR 0 1
63208: NOT
63209: IFFALSE 63213
// exit ;
63211: GO 63239
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
63213: LD_VAR 0 1
63217: PUSH
63218: LD_INT 1
63220: PPUSH
63221: LD_VAR 0 1
63225: PPUSH
63226: CALL_OW 12
63230: ARRAY
63231: PPUSH
63232: LD_INT 1
63234: PPUSH
63235: CALL_OW 234
// end ;
63239: PPOPN 1
63241: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
63242: LD_EXP 38
63246: PUSH
63247: LD_EXP 80
63251: AND
63252: IFFALSE 63393
63254: GO 63256
63256: DISABLE
63257: LD_INT 0
63259: PPUSH
63260: PPUSH
63261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63262: LD_ADDR_VAR 0 3
63266: PUSH
63267: LD_INT 22
63269: PUSH
63270: LD_OWVAR 2
63274: PUSH
63275: EMPTY
63276: LIST
63277: LIST
63278: PUSH
63279: LD_INT 25
63281: PUSH
63282: LD_INT 1
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PPUSH
63293: CALL_OW 69
63297: ST_TO_ADDR
// if not tmp then
63298: LD_VAR 0 3
63302: NOT
63303: IFFALSE 63307
// exit ;
63305: GO 63393
// un := tmp [ rand ( 1 , tmp ) ] ;
63307: LD_ADDR_VAR 0 2
63311: PUSH
63312: LD_VAR 0 3
63316: PUSH
63317: LD_INT 1
63319: PPUSH
63320: LD_VAR 0 3
63324: PPUSH
63325: CALL_OW 12
63329: ARRAY
63330: ST_TO_ADDR
// if Crawls ( un ) then
63331: LD_VAR 0 2
63335: PPUSH
63336: CALL_OW 318
63340: IFFALSE 63351
// ComWalk ( un ) ;
63342: LD_VAR 0 2
63346: PPUSH
63347: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
63351: LD_VAR 0 2
63355: PPUSH
63356: LD_INT 9
63358: PPUSH
63359: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
63363: LD_INT 28
63365: PPUSH
63366: LD_OWVAR 2
63370: PPUSH
63371: LD_INT 2
63373: PPUSH
63374: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
63378: LD_INT 29
63380: PPUSH
63381: LD_OWVAR 2
63385: PPUSH
63386: LD_INT 2
63388: PPUSH
63389: CALL_OW 322
// end ;
63393: PPOPN 3
63395: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
63396: LD_EXP 38
63400: PUSH
63401: LD_EXP 81
63405: AND
63406: IFFALSE 63517
63408: GO 63410
63410: DISABLE
63411: LD_INT 0
63413: PPUSH
63414: PPUSH
63415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
63416: LD_ADDR_VAR 0 3
63420: PUSH
63421: LD_INT 22
63423: PUSH
63424: LD_OWVAR 2
63428: PUSH
63429: EMPTY
63430: LIST
63431: LIST
63432: PUSH
63433: LD_INT 25
63435: PUSH
63436: LD_INT 1
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: PUSH
63443: EMPTY
63444: LIST
63445: LIST
63446: PPUSH
63447: CALL_OW 69
63451: ST_TO_ADDR
// if not tmp then
63452: LD_VAR 0 3
63456: NOT
63457: IFFALSE 63461
// exit ;
63459: GO 63517
// un := tmp [ rand ( 1 , tmp ) ] ;
63461: LD_ADDR_VAR 0 2
63465: PUSH
63466: LD_VAR 0 3
63470: PUSH
63471: LD_INT 1
63473: PPUSH
63474: LD_VAR 0 3
63478: PPUSH
63479: CALL_OW 12
63483: ARRAY
63484: ST_TO_ADDR
// if Crawls ( un ) then
63485: LD_VAR 0 2
63489: PPUSH
63490: CALL_OW 318
63494: IFFALSE 63505
// ComWalk ( un ) ;
63496: LD_VAR 0 2
63500: PPUSH
63501: CALL_OW 138
// SetClass ( un , class_mortar ) ;
63505: LD_VAR 0 2
63509: PPUSH
63510: LD_INT 8
63512: PPUSH
63513: CALL_OW 336
// end ;
63517: PPOPN 3
63519: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
63520: LD_EXP 38
63524: PUSH
63525: LD_EXP 82
63529: AND
63530: IFFALSE 63674
63532: GO 63534
63534: DISABLE
63535: LD_INT 0
63537: PPUSH
63538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
63539: LD_ADDR_VAR 0 2
63543: PUSH
63544: LD_INT 22
63546: PUSH
63547: LD_OWVAR 2
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 21
63558: PUSH
63559: LD_INT 2
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 2
63568: PUSH
63569: LD_INT 34
63571: PUSH
63572: LD_INT 12
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 34
63581: PUSH
63582: LD_INT 51
63584: PUSH
63585: EMPTY
63586: LIST
63587: LIST
63588: PUSH
63589: LD_INT 34
63591: PUSH
63592: LD_INT 32
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: LIST
63609: PPUSH
63610: CALL_OW 69
63614: ST_TO_ADDR
// if not tmp then
63615: LD_VAR 0 2
63619: NOT
63620: IFFALSE 63624
// exit ;
63622: GO 63674
// for i in tmp do
63624: LD_ADDR_VAR 0 1
63628: PUSH
63629: LD_VAR 0 2
63633: PUSH
63634: FOR_IN
63635: IFFALSE 63672
// if GetCargo ( i , mat_artifact ) = 0 then
63637: LD_VAR 0 1
63641: PPUSH
63642: LD_INT 4
63644: PPUSH
63645: CALL_OW 289
63649: PUSH
63650: LD_INT 0
63652: EQUAL
63653: IFFALSE 63670
// SetCargo ( i , mat_siberit , 100 ) ;
63655: LD_VAR 0 1
63659: PPUSH
63660: LD_INT 3
63662: PPUSH
63663: LD_INT 100
63665: PPUSH
63666: CALL_OW 290
63670: GO 63634
63672: POP
63673: POP
// end ;
63674: PPOPN 2
63676: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
63677: LD_EXP 38
63681: PUSH
63682: LD_EXP 83
63686: AND
63687: IFFALSE 63870
63689: GO 63691
63691: DISABLE
63692: LD_INT 0
63694: PPUSH
63695: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
63696: LD_ADDR_VAR 0 2
63700: PUSH
63701: LD_INT 22
63703: PUSH
63704: LD_OWVAR 2
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PPUSH
63713: CALL_OW 69
63717: ST_TO_ADDR
// if not tmp then
63718: LD_VAR 0 2
63722: NOT
63723: IFFALSE 63727
// exit ;
63725: GO 63870
// for i := 1 to 2 do
63727: LD_ADDR_VAR 0 1
63731: PUSH
63732: DOUBLE
63733: LD_INT 1
63735: DEC
63736: ST_TO_ADDR
63737: LD_INT 2
63739: PUSH
63740: FOR_TO
63741: IFFALSE 63868
// begin uc_side := your_side ;
63743: LD_ADDR_OWVAR 20
63747: PUSH
63748: LD_OWVAR 2
63752: ST_TO_ADDR
// uc_nation := nation_american ;
63753: LD_ADDR_OWVAR 21
63757: PUSH
63758: LD_INT 1
63760: ST_TO_ADDR
// vc_chassis := us_morphling ;
63761: LD_ADDR_OWVAR 37
63765: PUSH
63766: LD_INT 5
63768: ST_TO_ADDR
// vc_engine := engine_siberite ;
63769: LD_ADDR_OWVAR 39
63773: PUSH
63774: LD_INT 3
63776: ST_TO_ADDR
// vc_control := control_computer ;
63777: LD_ADDR_OWVAR 38
63781: PUSH
63782: LD_INT 3
63784: ST_TO_ADDR
// vc_weapon := us_double_laser ;
63785: LD_ADDR_OWVAR 40
63789: PUSH
63790: LD_INT 10
63792: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
63793: LD_VAR 0 2
63797: PUSH
63798: LD_INT 1
63800: ARRAY
63801: PPUSH
63802: CALL_OW 310
63806: NOT
63807: IFFALSE 63854
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
63809: CALL_OW 45
63813: PPUSH
63814: LD_VAR 0 2
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PPUSH
63823: CALL_OW 250
63827: PPUSH
63828: LD_VAR 0 2
63832: PUSH
63833: LD_INT 1
63835: ARRAY
63836: PPUSH
63837: CALL_OW 251
63841: PPUSH
63842: LD_INT 12
63844: PPUSH
63845: LD_INT 1
63847: PPUSH
63848: CALL_OW 50
63852: GO 63866
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
63854: CALL_OW 45
63858: PPUSH
63859: LD_INT 1
63861: PPUSH
63862: CALL_OW 51
// end ;
63866: GO 63740
63868: POP
63869: POP
// end ;
63870: PPOPN 2
63872: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
63873: LD_EXP 38
63877: PUSH
63878: LD_EXP 84
63882: AND
63883: IFFALSE 64105
63885: GO 63887
63887: DISABLE
63888: LD_INT 0
63890: PPUSH
63891: PPUSH
63892: PPUSH
63893: PPUSH
63894: PPUSH
63895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
63896: LD_ADDR_VAR 0 6
63900: PUSH
63901: LD_INT 22
63903: PUSH
63904: LD_OWVAR 2
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 21
63915: PUSH
63916: LD_INT 1
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 3
63925: PUSH
63926: LD_INT 23
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: LIST
63944: PPUSH
63945: CALL_OW 69
63949: ST_TO_ADDR
// if not tmp then
63950: LD_VAR 0 6
63954: NOT
63955: IFFALSE 63959
// exit ;
63957: GO 64105
// s1 := rand ( 1 , 4 ) ;
63959: LD_ADDR_VAR 0 2
63963: PUSH
63964: LD_INT 1
63966: PPUSH
63967: LD_INT 4
63969: PPUSH
63970: CALL_OW 12
63974: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
63975: LD_ADDR_VAR 0 4
63979: PUSH
63980: LD_VAR 0 6
63984: PUSH
63985: LD_INT 1
63987: ARRAY
63988: PPUSH
63989: LD_VAR 0 2
63993: PPUSH
63994: CALL_OW 259
63998: ST_TO_ADDR
// if s1 = 1 then
63999: LD_VAR 0 2
64003: PUSH
64004: LD_INT 1
64006: EQUAL
64007: IFFALSE 64027
// s2 := rand ( 2 , 4 ) else
64009: LD_ADDR_VAR 0 3
64013: PUSH
64014: LD_INT 2
64016: PPUSH
64017: LD_INT 4
64019: PPUSH
64020: CALL_OW 12
64024: ST_TO_ADDR
64025: GO 64035
// s2 := 1 ;
64027: LD_ADDR_VAR 0 3
64031: PUSH
64032: LD_INT 1
64034: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64035: LD_ADDR_VAR 0 5
64039: PUSH
64040: LD_VAR 0 6
64044: PUSH
64045: LD_INT 1
64047: ARRAY
64048: PPUSH
64049: LD_VAR 0 3
64053: PPUSH
64054: CALL_OW 259
64058: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64059: LD_VAR 0 6
64063: PUSH
64064: LD_INT 1
64066: ARRAY
64067: PPUSH
64068: LD_VAR 0 2
64072: PPUSH
64073: LD_VAR 0 5
64077: PPUSH
64078: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
64082: LD_VAR 0 6
64086: PUSH
64087: LD_INT 1
64089: ARRAY
64090: PPUSH
64091: LD_VAR 0 3
64095: PPUSH
64096: LD_VAR 0 4
64100: PPUSH
64101: CALL_OW 237
// end ;
64105: PPOPN 6
64107: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
64108: LD_EXP 38
64112: PUSH
64113: LD_EXP 85
64117: AND
64118: IFFALSE 64197
64120: GO 64122
64122: DISABLE
64123: LD_INT 0
64125: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
64126: LD_ADDR_VAR 0 1
64130: PUSH
64131: LD_INT 22
64133: PUSH
64134: LD_OWVAR 2
64138: PUSH
64139: EMPTY
64140: LIST
64141: LIST
64142: PUSH
64143: LD_INT 30
64145: PUSH
64146: LD_INT 3
64148: PUSH
64149: EMPTY
64150: LIST
64151: LIST
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PPUSH
64157: CALL_OW 69
64161: ST_TO_ADDR
// if not tmp then
64162: LD_VAR 0 1
64166: NOT
64167: IFFALSE 64171
// exit ;
64169: GO 64197
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64171: LD_VAR 0 1
64175: PUSH
64176: LD_INT 1
64178: PPUSH
64179: LD_VAR 0 1
64183: PPUSH
64184: CALL_OW 12
64188: ARRAY
64189: PPUSH
64190: LD_INT 1
64192: PPUSH
64193: CALL_OW 234
// end ;
64197: PPOPN 1
64199: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
64200: LD_EXP 38
64204: PUSH
64205: LD_EXP 86
64209: AND
64210: IFFALSE 64322
64212: GO 64214
64214: DISABLE
64215: LD_INT 0
64217: PPUSH
64218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
64219: LD_ADDR_VAR 0 2
64223: PUSH
64224: LD_INT 22
64226: PUSH
64227: LD_OWVAR 2
64231: PUSH
64232: EMPTY
64233: LIST
64234: LIST
64235: PUSH
64236: LD_INT 2
64238: PUSH
64239: LD_INT 30
64241: PUSH
64242: LD_INT 27
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 30
64251: PUSH
64252: LD_INT 26
64254: PUSH
64255: EMPTY
64256: LIST
64257: LIST
64258: PUSH
64259: LD_INT 30
64261: PUSH
64262: LD_INT 28
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: LIST
64273: LIST
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: PPUSH
64279: CALL_OW 69
64283: ST_TO_ADDR
// if not tmp then
64284: LD_VAR 0 2
64288: NOT
64289: IFFALSE 64293
// exit ;
64291: GO 64322
// for i in tmp do
64293: LD_ADDR_VAR 0 1
64297: PUSH
64298: LD_VAR 0 2
64302: PUSH
64303: FOR_IN
64304: IFFALSE 64320
// SetLives ( i , 1 ) ;
64306: LD_VAR 0 1
64310: PPUSH
64311: LD_INT 1
64313: PPUSH
64314: CALL_OW 234
64318: GO 64303
64320: POP
64321: POP
// end ;
64322: PPOPN 2
64324: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
64325: LD_EXP 38
64329: PUSH
64330: LD_EXP 87
64334: AND
64335: IFFALSE 64622
64337: GO 64339
64339: DISABLE
64340: LD_INT 0
64342: PPUSH
64343: PPUSH
64344: PPUSH
// begin i := rand ( 1 , 7 ) ;
64345: LD_ADDR_VAR 0 1
64349: PUSH
64350: LD_INT 1
64352: PPUSH
64353: LD_INT 7
64355: PPUSH
64356: CALL_OW 12
64360: ST_TO_ADDR
// case i of 1 :
64361: LD_VAR 0 1
64365: PUSH
64366: LD_INT 1
64368: DOUBLE
64369: EQUAL
64370: IFTRUE 64374
64372: GO 64384
64374: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
64375: LD_STRING earthquake(getX(game), 0, 32)
64377: PPUSH
64378: CALL_OW 559
64382: GO 64622
64384: LD_INT 2
64386: DOUBLE
64387: EQUAL
64388: IFTRUE 64392
64390: GO 64406
64392: POP
// begin ToLua ( displayStucuk(); ) ;
64393: LD_STRING displayStucuk();
64395: PPUSH
64396: CALL_OW 559
// ResetFog ;
64400: CALL_OW 335
// end ; 3 :
64404: GO 64622
64406: LD_INT 3
64408: DOUBLE
64409: EQUAL
64410: IFTRUE 64414
64412: GO 64518
64414: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64415: LD_ADDR_VAR 0 2
64419: PUSH
64420: LD_INT 22
64422: PUSH
64423: LD_OWVAR 2
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 25
64434: PUSH
64435: LD_INT 1
64437: PUSH
64438: EMPTY
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: PPUSH
64446: CALL_OW 69
64450: ST_TO_ADDR
// if not tmp then
64451: LD_VAR 0 2
64455: NOT
64456: IFFALSE 64460
// exit ;
64458: GO 64622
// un := tmp [ rand ( 1 , tmp ) ] ;
64460: LD_ADDR_VAR 0 3
64464: PUSH
64465: LD_VAR 0 2
64469: PUSH
64470: LD_INT 1
64472: PPUSH
64473: LD_VAR 0 2
64477: PPUSH
64478: CALL_OW 12
64482: ARRAY
64483: ST_TO_ADDR
// if Crawls ( un ) then
64484: LD_VAR 0 3
64488: PPUSH
64489: CALL_OW 318
64493: IFFALSE 64504
// ComWalk ( un ) ;
64495: LD_VAR 0 3
64499: PPUSH
64500: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64504: LD_VAR 0 3
64508: PPUSH
64509: LD_INT 8
64511: PPUSH
64512: CALL_OW 336
// end ; 4 :
64516: GO 64622
64518: LD_INT 4
64520: DOUBLE
64521: EQUAL
64522: IFTRUE 64526
64524: GO 64600
64526: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
64527: LD_ADDR_VAR 0 2
64531: PUSH
64532: LD_INT 22
64534: PUSH
64535: LD_OWVAR 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 30
64546: PUSH
64547: LD_INT 29
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PPUSH
64558: CALL_OW 69
64562: ST_TO_ADDR
// if not tmp then
64563: LD_VAR 0 2
64567: NOT
64568: IFFALSE 64572
// exit ;
64570: GO 64622
// CenterNowOnUnits ( tmp [ 1 ] ) ;
64572: LD_VAR 0 2
64576: PUSH
64577: LD_INT 1
64579: ARRAY
64580: PPUSH
64581: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
64585: LD_VAR 0 2
64589: PUSH
64590: LD_INT 1
64592: ARRAY
64593: PPUSH
64594: CALL_OW 65
// end ; 5 .. 7 :
64598: GO 64622
64600: LD_INT 5
64602: DOUBLE
64603: GREATEREQUAL
64604: IFFALSE 64612
64606: LD_INT 7
64608: DOUBLE
64609: LESSEQUAL
64610: IFTRUE 64614
64612: GO 64621
64614: POP
// StreamSibBomb ; end ;
64615: CALL 60859 0 0
64619: GO 64622
64621: POP
// end ;
64622: PPOPN 3
64624: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
64625: LD_EXP 38
64629: PUSH
64630: LD_EXP 88
64634: AND
64635: IFFALSE 64791
64637: GO 64639
64639: DISABLE
64640: LD_INT 0
64642: PPUSH
64643: PPUSH
64644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
64645: LD_ADDR_VAR 0 2
64649: PUSH
64650: LD_INT 81
64652: PUSH
64653: LD_OWVAR 2
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 2
64664: PUSH
64665: LD_INT 21
64667: PUSH
64668: LD_INT 1
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 21
64677: PUSH
64678: LD_INT 2
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: PUSH
64685: EMPTY
64686: LIST
64687: LIST
64688: LIST
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PPUSH
64694: CALL_OW 69
64698: ST_TO_ADDR
// if not tmp then
64699: LD_VAR 0 2
64703: NOT
64704: IFFALSE 64708
// exit ;
64706: GO 64791
// p := 0 ;
64708: LD_ADDR_VAR 0 3
64712: PUSH
64713: LD_INT 0
64715: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
64716: LD_INT 35
64718: PPUSH
64719: CALL_OW 67
// p := p + 1 ;
64723: LD_ADDR_VAR 0 3
64727: PUSH
64728: LD_VAR 0 3
64732: PUSH
64733: LD_INT 1
64735: PLUS
64736: ST_TO_ADDR
// for i in tmp do
64737: LD_ADDR_VAR 0 1
64741: PUSH
64742: LD_VAR 0 2
64746: PUSH
64747: FOR_IN
64748: IFFALSE 64779
// if GetLives ( i ) < 1000 then
64750: LD_VAR 0 1
64754: PPUSH
64755: CALL_OW 256
64759: PUSH
64760: LD_INT 1000
64762: LESS
64763: IFFALSE 64777
// SetLives ( i , 1000 ) ;
64765: LD_VAR 0 1
64769: PPUSH
64770: LD_INT 1000
64772: PPUSH
64773: CALL_OW 234
64777: GO 64747
64779: POP
64780: POP
// until p > 20 ;
64781: LD_VAR 0 3
64785: PUSH
64786: LD_INT 20
64788: GREATER
64789: IFFALSE 64716
// end ;
64791: PPOPN 3
64793: END
// every 0 0$1 trigger StreamModeActive and sTime do
64794: LD_EXP 38
64798: PUSH
64799: LD_EXP 89
64803: AND
64804: IFFALSE 64839
64806: GO 64808
64808: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
64809: LD_INT 28
64811: PPUSH
64812: LD_OWVAR 2
64816: PPUSH
64817: LD_INT 2
64819: PPUSH
64820: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
64824: LD_INT 30
64826: PPUSH
64827: LD_OWVAR 2
64831: PPUSH
64832: LD_INT 2
64834: PPUSH
64835: CALL_OW 322
// end ;
64839: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
64840: LD_EXP 38
64844: PUSH
64845: LD_EXP 90
64849: AND
64850: IFFALSE 64971
64852: GO 64854
64854: DISABLE
64855: LD_INT 0
64857: PPUSH
64858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64859: LD_ADDR_VAR 0 2
64863: PUSH
64864: LD_INT 22
64866: PUSH
64867: LD_OWVAR 2
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 21
64878: PUSH
64879: LD_INT 1
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 3
64888: PUSH
64889: LD_INT 23
64891: PUSH
64892: LD_INT 0
64894: PUSH
64895: EMPTY
64896: LIST
64897: LIST
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: LIST
64907: PPUSH
64908: CALL_OW 69
64912: ST_TO_ADDR
// if not tmp then
64913: LD_VAR 0 2
64917: NOT
64918: IFFALSE 64922
// exit ;
64920: GO 64971
// for i in tmp do
64922: LD_ADDR_VAR 0 1
64926: PUSH
64927: LD_VAR 0 2
64931: PUSH
64932: FOR_IN
64933: IFFALSE 64969
// begin if Crawls ( i ) then
64935: LD_VAR 0 1
64939: PPUSH
64940: CALL_OW 318
64944: IFFALSE 64955
// ComWalk ( i ) ;
64946: LD_VAR 0 1
64950: PPUSH
64951: CALL_OW 138
// SetClass ( i , 2 ) ;
64955: LD_VAR 0 1
64959: PPUSH
64960: LD_INT 2
64962: PPUSH
64963: CALL_OW 336
// end ;
64967: GO 64932
64969: POP
64970: POP
// end ;
64971: PPOPN 2
64973: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
64974: LD_EXP 38
64978: PUSH
64979: LD_EXP 91
64983: AND
64984: IFFALSE 65272
64986: GO 64988
64988: DISABLE
64989: LD_INT 0
64991: PPUSH
64992: PPUSH
64993: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
64994: LD_OWVAR 2
64998: PPUSH
64999: LD_INT 9
65001: PPUSH
65002: LD_INT 1
65004: PPUSH
65005: LD_INT 1
65007: PPUSH
65008: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65012: LD_INT 9
65014: PPUSH
65015: LD_OWVAR 2
65019: PPUSH
65020: CALL_OW 343
// uc_side := 9 ;
65024: LD_ADDR_OWVAR 20
65028: PUSH
65029: LD_INT 9
65031: ST_TO_ADDR
// uc_nation := 2 ;
65032: LD_ADDR_OWVAR 21
65036: PUSH
65037: LD_INT 2
65039: ST_TO_ADDR
// hc_name := Dark Warrior ;
65040: LD_ADDR_OWVAR 26
65044: PUSH
65045: LD_STRING Dark Warrior
65047: ST_TO_ADDR
// hc_gallery :=  ;
65048: LD_ADDR_OWVAR 33
65052: PUSH
65053: LD_STRING 
65055: ST_TO_ADDR
// hc_noskilllimit := true ;
65056: LD_ADDR_OWVAR 76
65060: PUSH
65061: LD_INT 1
65063: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
65064: LD_ADDR_OWVAR 31
65068: PUSH
65069: LD_INT 30
65071: PUSH
65072: LD_INT 30
65074: PUSH
65075: LD_INT 30
65077: PUSH
65078: LD_INT 30
65080: PUSH
65081: EMPTY
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: ST_TO_ADDR
// un := CreateHuman ;
65087: LD_ADDR_VAR 0 3
65091: PUSH
65092: CALL_OW 44
65096: ST_TO_ADDR
// hc_noskilllimit := false ;
65097: LD_ADDR_OWVAR 76
65101: PUSH
65102: LD_INT 0
65104: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
65105: LD_VAR 0 3
65109: PPUSH
65110: LD_INT 1
65112: PPUSH
65113: CALL_OW 51
// ToLua ( playRanger() ) ;
65117: LD_STRING playRanger()
65119: PPUSH
65120: CALL_OW 559
// p := 0 ;
65124: LD_ADDR_VAR 0 2
65128: PUSH
65129: LD_INT 0
65131: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65132: LD_INT 35
65134: PPUSH
65135: CALL_OW 67
// p := p + 1 ;
65139: LD_ADDR_VAR 0 2
65143: PUSH
65144: LD_VAR 0 2
65148: PUSH
65149: LD_INT 1
65151: PLUS
65152: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
65153: LD_VAR 0 3
65157: PPUSH
65158: CALL_OW 256
65162: PUSH
65163: LD_INT 1000
65165: LESS
65166: IFFALSE 65180
// SetLives ( un , 1000 ) ;
65168: LD_VAR 0 3
65172: PPUSH
65173: LD_INT 1000
65175: PPUSH
65176: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
65180: LD_VAR 0 3
65184: PPUSH
65185: LD_INT 81
65187: PUSH
65188: LD_OWVAR 2
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 91
65199: PUSH
65200: LD_VAR 0 3
65204: PUSH
65205: LD_INT 30
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: LIST
65212: PUSH
65213: EMPTY
65214: LIST
65215: LIST
65216: PPUSH
65217: CALL_OW 69
65221: PPUSH
65222: LD_VAR 0 3
65226: PPUSH
65227: CALL_OW 74
65231: PPUSH
65232: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
65236: LD_VAR 0 2
65240: PUSH
65241: LD_INT 80
65243: GREATER
65244: PUSH
65245: LD_VAR 0 3
65249: PPUSH
65250: CALL_OW 301
65254: OR
65255: IFFALSE 65132
// if un then
65257: LD_VAR 0 3
65261: IFFALSE 65272
// RemoveUnit ( un ) ;
65263: LD_VAR 0 3
65267: PPUSH
65268: CALL_OW 64
// end ;
65272: PPOPN 3
65274: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
65275: LD_EXP 92
65279: IFFALSE 65395
65281: GO 65283
65283: DISABLE
65284: LD_INT 0
65286: PPUSH
65287: PPUSH
65288: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
65289: LD_ADDR_VAR 0 2
65293: PUSH
65294: LD_INT 81
65296: PUSH
65297: LD_OWVAR 2
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 21
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PPUSH
65320: CALL_OW 69
65324: ST_TO_ADDR
// ToLua ( playComputer() ) ;
65325: LD_STRING playComputer()
65327: PPUSH
65328: CALL_OW 559
// if not tmp then
65332: LD_VAR 0 2
65336: NOT
65337: IFFALSE 65341
// exit ;
65339: GO 65395
// for i in tmp do
65341: LD_ADDR_VAR 0 1
65345: PUSH
65346: LD_VAR 0 2
65350: PUSH
65351: FOR_IN
65352: IFFALSE 65393
// for j := 1 to 4 do
65354: LD_ADDR_VAR 0 3
65358: PUSH
65359: DOUBLE
65360: LD_INT 1
65362: DEC
65363: ST_TO_ADDR
65364: LD_INT 4
65366: PUSH
65367: FOR_TO
65368: IFFALSE 65389
// SetSkill ( i , j , 10 ) ;
65370: LD_VAR 0 1
65374: PPUSH
65375: LD_VAR 0 3
65379: PPUSH
65380: LD_INT 10
65382: PPUSH
65383: CALL_OW 237
65387: GO 65367
65389: POP
65390: POP
65391: GO 65351
65393: POP
65394: POP
// end ;
65395: PPOPN 3
65397: END
// every 0 0$1 trigger s30 do var i , tmp ;
65398: LD_EXP 93
65402: IFFALSE 65471
65404: GO 65406
65406: DISABLE
65407: LD_INT 0
65409: PPUSH
65410: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65411: LD_ADDR_VAR 0 2
65415: PUSH
65416: LD_INT 22
65418: PUSH
65419: LD_OWVAR 2
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: PPUSH
65428: CALL_OW 69
65432: ST_TO_ADDR
// if not tmp then
65433: LD_VAR 0 2
65437: NOT
65438: IFFALSE 65442
// exit ;
65440: GO 65471
// for i in tmp do
65442: LD_ADDR_VAR 0 1
65446: PUSH
65447: LD_VAR 0 2
65451: PUSH
65452: FOR_IN
65453: IFFALSE 65469
// SetLives ( i , 300 ) ;
65455: LD_VAR 0 1
65459: PPUSH
65460: LD_INT 300
65462: PPUSH
65463: CALL_OW 234
65467: GO 65452
65469: POP
65470: POP
// end ;
65471: PPOPN 2
65473: END
// every 0 0$1 trigger s60 do var i , tmp ;
65474: LD_EXP 94
65478: IFFALSE 65547
65480: GO 65482
65482: DISABLE
65483: LD_INT 0
65485: PPUSH
65486: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
65487: LD_ADDR_VAR 0 2
65491: PUSH
65492: LD_INT 22
65494: PUSH
65495: LD_OWVAR 2
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PPUSH
65504: CALL_OW 69
65508: ST_TO_ADDR
// if not tmp then
65509: LD_VAR 0 2
65513: NOT
65514: IFFALSE 65518
// exit ;
65516: GO 65547
// for i in tmp do
65518: LD_ADDR_VAR 0 1
65522: PUSH
65523: LD_VAR 0 2
65527: PUSH
65528: FOR_IN
65529: IFFALSE 65545
// SetLives ( i , 600 ) ;
65531: LD_VAR 0 1
65535: PPUSH
65536: LD_INT 600
65538: PPUSH
65539: CALL_OW 234
65543: GO 65528
65545: POP
65546: POP
// end ;
65547: PPOPN 2
65549: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
65550: LD_INT 0
65552: PPUSH
// case cmd of 301 :
65553: LD_VAR 0 1
65557: PUSH
65558: LD_INT 301
65560: DOUBLE
65561: EQUAL
65562: IFTRUE 65566
65564: GO 65598
65566: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
65567: LD_VAR 0 6
65571: PPUSH
65572: LD_VAR 0 7
65576: PPUSH
65577: LD_VAR 0 8
65581: PPUSH
65582: LD_VAR 0 4
65586: PPUSH
65587: LD_VAR 0 5
65591: PPUSH
65592: CALL 66807 0 5
65596: GO 65719
65598: LD_INT 302
65600: DOUBLE
65601: EQUAL
65602: IFTRUE 65606
65604: GO 65643
65606: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
65607: LD_VAR 0 6
65611: PPUSH
65612: LD_VAR 0 7
65616: PPUSH
65617: LD_VAR 0 8
65621: PPUSH
65622: LD_VAR 0 9
65626: PPUSH
65627: LD_VAR 0 4
65631: PPUSH
65632: LD_VAR 0 5
65636: PPUSH
65637: CALL 66898 0 6
65641: GO 65719
65643: LD_INT 303
65645: DOUBLE
65646: EQUAL
65647: IFTRUE 65651
65649: GO 65688
65651: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
65652: LD_VAR 0 6
65656: PPUSH
65657: LD_VAR 0 7
65661: PPUSH
65662: LD_VAR 0 8
65666: PPUSH
65667: LD_VAR 0 9
65671: PPUSH
65672: LD_VAR 0 4
65676: PPUSH
65677: LD_VAR 0 5
65681: PPUSH
65682: CALL 65724 0 6
65686: GO 65719
65688: LD_INT 304
65690: DOUBLE
65691: EQUAL
65692: IFTRUE 65696
65694: GO 65718
65696: POP
// hHackTeleport ( unit , x , y ) ; end ;
65697: LD_VAR 0 2
65701: PPUSH
65702: LD_VAR 0 4
65706: PPUSH
65707: LD_VAR 0 5
65711: PPUSH
65712: CALL 67491 0 3
65716: GO 65719
65718: POP
// end ;
65719: LD_VAR 0 12
65723: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
65724: LD_INT 0
65726: PPUSH
65727: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
65728: LD_VAR 0 1
65732: PUSH
65733: LD_INT 1
65735: LESS
65736: PUSH
65737: LD_VAR 0 1
65741: PUSH
65742: LD_INT 3
65744: GREATER
65745: OR
65746: PUSH
65747: LD_VAR 0 5
65751: PPUSH
65752: LD_VAR 0 6
65756: PPUSH
65757: CALL_OW 428
65761: OR
65762: IFFALSE 65766
// exit ;
65764: GO 66494
// uc_side := your_side ;
65766: LD_ADDR_OWVAR 20
65770: PUSH
65771: LD_OWVAR 2
65775: ST_TO_ADDR
// uc_nation := nation ;
65776: LD_ADDR_OWVAR 21
65780: PUSH
65781: LD_VAR 0 1
65785: ST_TO_ADDR
// bc_level = 1 ;
65786: LD_ADDR_OWVAR 43
65790: PUSH
65791: LD_INT 1
65793: ST_TO_ADDR
// case btype of 1 :
65794: LD_VAR 0 2
65798: PUSH
65799: LD_INT 1
65801: DOUBLE
65802: EQUAL
65803: IFTRUE 65807
65805: GO 65818
65807: POP
// bc_type := b_depot ; 2 :
65808: LD_ADDR_OWVAR 42
65812: PUSH
65813: LD_INT 0
65815: ST_TO_ADDR
65816: GO 66438
65818: LD_INT 2
65820: DOUBLE
65821: EQUAL
65822: IFTRUE 65826
65824: GO 65837
65826: POP
// bc_type := b_warehouse ; 3 :
65827: LD_ADDR_OWVAR 42
65831: PUSH
65832: LD_INT 1
65834: ST_TO_ADDR
65835: GO 66438
65837: LD_INT 3
65839: DOUBLE
65840: EQUAL
65841: IFTRUE 65845
65843: GO 65856
65845: POP
// bc_type := b_lab ; 4 .. 9 :
65846: LD_ADDR_OWVAR 42
65850: PUSH
65851: LD_INT 6
65853: ST_TO_ADDR
65854: GO 66438
65856: LD_INT 4
65858: DOUBLE
65859: GREATEREQUAL
65860: IFFALSE 65868
65862: LD_INT 9
65864: DOUBLE
65865: LESSEQUAL
65866: IFTRUE 65870
65868: GO 65930
65870: POP
// begin bc_type := b_lab_half ;
65871: LD_ADDR_OWVAR 42
65875: PUSH
65876: LD_INT 7
65878: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
65879: LD_ADDR_OWVAR 44
65883: PUSH
65884: LD_INT 10
65886: PUSH
65887: LD_INT 11
65889: PUSH
65890: LD_INT 12
65892: PUSH
65893: LD_INT 15
65895: PUSH
65896: LD_INT 14
65898: PUSH
65899: LD_INT 13
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: LIST
65906: LIST
65907: LIST
65908: LIST
65909: PUSH
65910: LD_VAR 0 2
65914: PUSH
65915: LD_INT 3
65917: MINUS
65918: ARRAY
65919: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
65920: LD_ADDR_OWVAR 45
65924: PUSH
65925: LD_INT 9
65927: ST_TO_ADDR
// end ; 10 .. 13 :
65928: GO 66438
65930: LD_INT 10
65932: DOUBLE
65933: GREATEREQUAL
65934: IFFALSE 65942
65936: LD_INT 13
65938: DOUBLE
65939: LESSEQUAL
65940: IFTRUE 65944
65942: GO 66021
65944: POP
// begin bc_type := b_lab_full ;
65945: LD_ADDR_OWVAR 42
65949: PUSH
65950: LD_INT 8
65952: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
65953: LD_ADDR_OWVAR 44
65957: PUSH
65958: LD_INT 10
65960: PUSH
65961: LD_INT 12
65963: PUSH
65964: LD_INT 14
65966: PUSH
65967: LD_INT 13
65969: PUSH
65970: EMPTY
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: PUSH
65976: LD_VAR 0 2
65980: PUSH
65981: LD_INT 9
65983: MINUS
65984: ARRAY
65985: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
65986: LD_ADDR_OWVAR 45
65990: PUSH
65991: LD_INT 11
65993: PUSH
65994: LD_INT 15
65996: PUSH
65997: LD_INT 12
65999: PUSH
66000: LD_INT 15
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: LIST
66007: LIST
66008: PUSH
66009: LD_VAR 0 2
66013: PUSH
66014: LD_INT 9
66016: MINUS
66017: ARRAY
66018: ST_TO_ADDR
// end ; 14 :
66019: GO 66438
66021: LD_INT 14
66023: DOUBLE
66024: EQUAL
66025: IFTRUE 66029
66027: GO 66040
66029: POP
// bc_type := b_workshop ; 15 :
66030: LD_ADDR_OWVAR 42
66034: PUSH
66035: LD_INT 2
66037: ST_TO_ADDR
66038: GO 66438
66040: LD_INT 15
66042: DOUBLE
66043: EQUAL
66044: IFTRUE 66048
66046: GO 66059
66048: POP
// bc_type := b_factory ; 16 :
66049: LD_ADDR_OWVAR 42
66053: PUSH
66054: LD_INT 3
66056: ST_TO_ADDR
66057: GO 66438
66059: LD_INT 16
66061: DOUBLE
66062: EQUAL
66063: IFTRUE 66067
66065: GO 66078
66067: POP
// bc_type := b_ext_gun ; 17 :
66068: LD_ADDR_OWVAR 42
66072: PUSH
66073: LD_INT 17
66075: ST_TO_ADDR
66076: GO 66438
66078: LD_INT 17
66080: DOUBLE
66081: EQUAL
66082: IFTRUE 66086
66084: GO 66114
66086: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
66087: LD_ADDR_OWVAR 42
66091: PUSH
66092: LD_INT 19
66094: PUSH
66095: LD_INT 23
66097: PUSH
66098: LD_INT 19
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: LIST
66105: PUSH
66106: LD_VAR 0 1
66110: ARRAY
66111: ST_TO_ADDR
66112: GO 66438
66114: LD_INT 18
66116: DOUBLE
66117: EQUAL
66118: IFTRUE 66122
66120: GO 66133
66122: POP
// bc_type := b_ext_radar ; 19 :
66123: LD_ADDR_OWVAR 42
66127: PUSH
66128: LD_INT 20
66130: ST_TO_ADDR
66131: GO 66438
66133: LD_INT 19
66135: DOUBLE
66136: EQUAL
66137: IFTRUE 66141
66139: GO 66152
66141: POP
// bc_type := b_ext_radio ; 20 :
66142: LD_ADDR_OWVAR 42
66146: PUSH
66147: LD_INT 22
66149: ST_TO_ADDR
66150: GO 66438
66152: LD_INT 20
66154: DOUBLE
66155: EQUAL
66156: IFTRUE 66160
66158: GO 66171
66160: POP
// bc_type := b_ext_siberium ; 21 :
66161: LD_ADDR_OWVAR 42
66165: PUSH
66166: LD_INT 21
66168: ST_TO_ADDR
66169: GO 66438
66171: LD_INT 21
66173: DOUBLE
66174: EQUAL
66175: IFTRUE 66179
66177: GO 66190
66179: POP
// bc_type := b_ext_computer ; 22 :
66180: LD_ADDR_OWVAR 42
66184: PUSH
66185: LD_INT 24
66187: ST_TO_ADDR
66188: GO 66438
66190: LD_INT 22
66192: DOUBLE
66193: EQUAL
66194: IFTRUE 66198
66196: GO 66209
66198: POP
// bc_type := b_ext_track ; 23 :
66199: LD_ADDR_OWVAR 42
66203: PUSH
66204: LD_INT 16
66206: ST_TO_ADDR
66207: GO 66438
66209: LD_INT 23
66211: DOUBLE
66212: EQUAL
66213: IFTRUE 66217
66215: GO 66228
66217: POP
// bc_type := b_ext_laser ; 24 :
66218: LD_ADDR_OWVAR 42
66222: PUSH
66223: LD_INT 25
66225: ST_TO_ADDR
66226: GO 66438
66228: LD_INT 24
66230: DOUBLE
66231: EQUAL
66232: IFTRUE 66236
66234: GO 66247
66236: POP
// bc_type := b_control_tower ; 25 :
66237: LD_ADDR_OWVAR 42
66241: PUSH
66242: LD_INT 36
66244: ST_TO_ADDR
66245: GO 66438
66247: LD_INT 25
66249: DOUBLE
66250: EQUAL
66251: IFTRUE 66255
66253: GO 66266
66255: POP
// bc_type := b_breastwork ; 26 :
66256: LD_ADDR_OWVAR 42
66260: PUSH
66261: LD_INT 31
66263: ST_TO_ADDR
66264: GO 66438
66266: LD_INT 26
66268: DOUBLE
66269: EQUAL
66270: IFTRUE 66274
66272: GO 66285
66274: POP
// bc_type := b_bunker ; 27 :
66275: LD_ADDR_OWVAR 42
66279: PUSH
66280: LD_INT 32
66282: ST_TO_ADDR
66283: GO 66438
66285: LD_INT 27
66287: DOUBLE
66288: EQUAL
66289: IFTRUE 66293
66291: GO 66304
66293: POP
// bc_type := b_turret ; 28 :
66294: LD_ADDR_OWVAR 42
66298: PUSH
66299: LD_INT 33
66301: ST_TO_ADDR
66302: GO 66438
66304: LD_INT 28
66306: DOUBLE
66307: EQUAL
66308: IFTRUE 66312
66310: GO 66323
66312: POP
// bc_type := b_armoury ; 29 :
66313: LD_ADDR_OWVAR 42
66317: PUSH
66318: LD_INT 4
66320: ST_TO_ADDR
66321: GO 66438
66323: LD_INT 29
66325: DOUBLE
66326: EQUAL
66327: IFTRUE 66331
66329: GO 66342
66331: POP
// bc_type := b_barracks ; 30 :
66332: LD_ADDR_OWVAR 42
66336: PUSH
66337: LD_INT 5
66339: ST_TO_ADDR
66340: GO 66438
66342: LD_INT 30
66344: DOUBLE
66345: EQUAL
66346: IFTRUE 66350
66348: GO 66361
66350: POP
// bc_type := b_solar_power ; 31 :
66351: LD_ADDR_OWVAR 42
66355: PUSH
66356: LD_INT 27
66358: ST_TO_ADDR
66359: GO 66438
66361: LD_INT 31
66363: DOUBLE
66364: EQUAL
66365: IFTRUE 66369
66367: GO 66380
66369: POP
// bc_type := b_oil_power ; 32 :
66370: LD_ADDR_OWVAR 42
66374: PUSH
66375: LD_INT 26
66377: ST_TO_ADDR
66378: GO 66438
66380: LD_INT 32
66382: DOUBLE
66383: EQUAL
66384: IFTRUE 66388
66386: GO 66399
66388: POP
// bc_type := b_siberite_power ; 33 :
66389: LD_ADDR_OWVAR 42
66393: PUSH
66394: LD_INT 28
66396: ST_TO_ADDR
66397: GO 66438
66399: LD_INT 33
66401: DOUBLE
66402: EQUAL
66403: IFTRUE 66407
66405: GO 66418
66407: POP
// bc_type := b_oil_mine ; 34 :
66408: LD_ADDR_OWVAR 42
66412: PUSH
66413: LD_INT 29
66415: ST_TO_ADDR
66416: GO 66438
66418: LD_INT 34
66420: DOUBLE
66421: EQUAL
66422: IFTRUE 66426
66424: GO 66437
66426: POP
// bc_type := b_siberite_mine ; end ;
66427: LD_ADDR_OWVAR 42
66431: PUSH
66432: LD_INT 30
66434: ST_TO_ADDR
66435: GO 66438
66437: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
66438: LD_ADDR_VAR 0 8
66442: PUSH
66443: LD_VAR 0 5
66447: PPUSH
66448: LD_VAR 0 6
66452: PPUSH
66453: LD_VAR 0 3
66457: PPUSH
66458: CALL_OW 47
66462: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
66463: LD_OWVAR 42
66467: PUSH
66468: LD_INT 32
66470: PUSH
66471: LD_INT 33
66473: PUSH
66474: EMPTY
66475: LIST
66476: LIST
66477: IN
66478: IFFALSE 66494
// PlaceWeaponTurret ( b , weapon ) ;
66480: LD_VAR 0 8
66484: PPUSH
66485: LD_VAR 0 4
66489: PPUSH
66490: CALL_OW 431
// end ;
66494: LD_VAR 0 7
66498: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
66499: LD_INT 0
66501: PPUSH
66502: PPUSH
66503: PPUSH
66504: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66505: LD_ADDR_VAR 0 4
66509: PUSH
66510: LD_INT 22
66512: PUSH
66513: LD_OWVAR 2
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: LD_INT 30
66527: PUSH
66528: LD_INT 0
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: PUSH
66535: LD_INT 30
66537: PUSH
66538: LD_INT 1
66540: PUSH
66541: EMPTY
66542: LIST
66543: LIST
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: LIST
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PPUSH
66554: CALL_OW 69
66558: ST_TO_ADDR
// if not tmp then
66559: LD_VAR 0 4
66563: NOT
66564: IFFALSE 66568
// exit ;
66566: GO 66627
// for i in tmp do
66568: LD_ADDR_VAR 0 2
66572: PUSH
66573: LD_VAR 0 4
66577: PUSH
66578: FOR_IN
66579: IFFALSE 66625
// for j = 1 to 3 do
66581: LD_ADDR_VAR 0 3
66585: PUSH
66586: DOUBLE
66587: LD_INT 1
66589: DEC
66590: ST_TO_ADDR
66591: LD_INT 3
66593: PUSH
66594: FOR_TO
66595: IFFALSE 66621
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
66597: LD_VAR 0 2
66601: PPUSH
66602: CALL_OW 274
66606: PPUSH
66607: LD_VAR 0 3
66611: PPUSH
66612: LD_INT 99999
66614: PPUSH
66615: CALL_OW 277
66619: GO 66594
66621: POP
66622: POP
66623: GO 66578
66625: POP
66626: POP
// end ;
66627: LD_VAR 0 1
66631: RET
// export function hHackSetLevel10 ; var i , j ; begin
66632: LD_INT 0
66634: PPUSH
66635: PPUSH
66636: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
66637: LD_ADDR_VAR 0 2
66641: PUSH
66642: LD_INT 21
66644: PUSH
66645: LD_INT 1
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PPUSH
66652: CALL_OW 69
66656: PUSH
66657: FOR_IN
66658: IFFALSE 66710
// if IsSelected ( i ) then
66660: LD_VAR 0 2
66664: PPUSH
66665: CALL_OW 306
66669: IFFALSE 66708
// begin for j := 1 to 4 do
66671: LD_ADDR_VAR 0 3
66675: PUSH
66676: DOUBLE
66677: LD_INT 1
66679: DEC
66680: ST_TO_ADDR
66681: LD_INT 4
66683: PUSH
66684: FOR_TO
66685: IFFALSE 66706
// SetSkill ( i , j , 10 ) ;
66687: LD_VAR 0 2
66691: PPUSH
66692: LD_VAR 0 3
66696: PPUSH
66697: LD_INT 10
66699: PPUSH
66700: CALL_OW 237
66704: GO 66684
66706: POP
66707: POP
// end ;
66708: GO 66657
66710: POP
66711: POP
// end ;
66712: LD_VAR 0 1
66716: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
66717: LD_INT 0
66719: PPUSH
66720: PPUSH
66721: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
66722: LD_ADDR_VAR 0 2
66726: PUSH
66727: LD_INT 22
66729: PUSH
66730: LD_OWVAR 2
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 21
66741: PUSH
66742: LD_INT 1
66744: PUSH
66745: EMPTY
66746: LIST
66747: LIST
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PPUSH
66753: CALL_OW 69
66757: PUSH
66758: FOR_IN
66759: IFFALSE 66800
// begin for j := 1 to 4 do
66761: LD_ADDR_VAR 0 3
66765: PUSH
66766: DOUBLE
66767: LD_INT 1
66769: DEC
66770: ST_TO_ADDR
66771: LD_INT 4
66773: PUSH
66774: FOR_TO
66775: IFFALSE 66796
// SetSkill ( i , j , 10 ) ;
66777: LD_VAR 0 2
66781: PPUSH
66782: LD_VAR 0 3
66786: PPUSH
66787: LD_INT 10
66789: PPUSH
66790: CALL_OW 237
66794: GO 66774
66796: POP
66797: POP
// end ;
66798: GO 66758
66800: POP
66801: POP
// end ;
66802: LD_VAR 0 1
66806: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
66807: LD_INT 0
66809: PPUSH
// uc_side := your_side ;
66810: LD_ADDR_OWVAR 20
66814: PUSH
66815: LD_OWVAR 2
66819: ST_TO_ADDR
// uc_nation := nation ;
66820: LD_ADDR_OWVAR 21
66824: PUSH
66825: LD_VAR 0 1
66829: ST_TO_ADDR
// InitHc ;
66830: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
66834: LD_INT 0
66836: PPUSH
66837: LD_VAR 0 2
66841: PPUSH
66842: LD_VAR 0 3
66846: PPUSH
66847: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
66851: LD_VAR 0 4
66855: PPUSH
66856: LD_VAR 0 5
66860: PPUSH
66861: CALL_OW 428
66865: PUSH
66866: LD_INT 0
66868: EQUAL
66869: IFFALSE 66893
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
66871: CALL_OW 44
66875: PPUSH
66876: LD_VAR 0 4
66880: PPUSH
66881: LD_VAR 0 5
66885: PPUSH
66886: LD_INT 1
66888: PPUSH
66889: CALL_OW 48
// end ;
66893: LD_VAR 0 6
66897: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
66898: LD_INT 0
66900: PPUSH
66901: PPUSH
// uc_side := your_side ;
66902: LD_ADDR_OWVAR 20
66906: PUSH
66907: LD_OWVAR 2
66911: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
66912: LD_VAR 0 1
66916: PUSH
66917: LD_INT 1
66919: PUSH
66920: LD_INT 2
66922: PUSH
66923: LD_INT 3
66925: PUSH
66926: LD_INT 4
66928: PUSH
66929: LD_INT 5
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: IN
66939: IFFALSE 66951
// uc_nation := nation_american else
66941: LD_ADDR_OWVAR 21
66945: PUSH
66946: LD_INT 1
66948: ST_TO_ADDR
66949: GO 66994
// if chassis in [ 11 , 12 , 13 , 14 ] then
66951: LD_VAR 0 1
66955: PUSH
66956: LD_INT 11
66958: PUSH
66959: LD_INT 12
66961: PUSH
66962: LD_INT 13
66964: PUSH
66965: LD_INT 14
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: LIST
66972: LIST
66973: IN
66974: IFFALSE 66986
// uc_nation := nation_arabian else
66976: LD_ADDR_OWVAR 21
66980: PUSH
66981: LD_INT 2
66983: ST_TO_ADDR
66984: GO 66994
// uc_nation := nation_russian ;
66986: LD_ADDR_OWVAR 21
66990: PUSH
66991: LD_INT 3
66993: ST_TO_ADDR
// vc_chassis := chassis ;
66994: LD_ADDR_OWVAR 37
66998: PUSH
66999: LD_VAR 0 1
67003: ST_TO_ADDR
// vc_engine := engine ;
67004: LD_ADDR_OWVAR 39
67008: PUSH
67009: LD_VAR 0 2
67013: ST_TO_ADDR
// vc_control := control ;
67014: LD_ADDR_OWVAR 38
67018: PUSH
67019: LD_VAR 0 3
67023: ST_TO_ADDR
// vc_weapon := weapon ;
67024: LD_ADDR_OWVAR 40
67028: PUSH
67029: LD_VAR 0 4
67033: ST_TO_ADDR
// un := CreateVehicle ;
67034: LD_ADDR_VAR 0 8
67038: PUSH
67039: CALL_OW 45
67043: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67044: LD_VAR 0 8
67048: PPUSH
67049: LD_INT 0
67051: PPUSH
67052: LD_INT 5
67054: PPUSH
67055: CALL_OW 12
67059: PPUSH
67060: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
67064: LD_VAR 0 8
67068: PPUSH
67069: LD_VAR 0 5
67073: PPUSH
67074: LD_VAR 0 6
67078: PPUSH
67079: LD_INT 1
67081: PPUSH
67082: CALL_OW 48
// end ;
67086: LD_VAR 0 7
67090: RET
// export hInvincible ; every 1 do
67091: GO 67093
67093: DISABLE
// hInvincible := [ ] ;
67094: LD_ADDR_EXP 95
67098: PUSH
67099: EMPTY
67100: ST_TO_ADDR
67101: END
// every 10 do var i ;
67102: GO 67104
67104: DISABLE
67105: LD_INT 0
67107: PPUSH
// begin enable ;
67108: ENABLE
// if not hInvincible then
67109: LD_EXP 95
67113: NOT
67114: IFFALSE 67118
// exit ;
67116: GO 67162
// for i in hInvincible do
67118: LD_ADDR_VAR 0 1
67122: PUSH
67123: LD_EXP 95
67127: PUSH
67128: FOR_IN
67129: IFFALSE 67160
// if GetLives ( i ) < 1000 then
67131: LD_VAR 0 1
67135: PPUSH
67136: CALL_OW 256
67140: PUSH
67141: LD_INT 1000
67143: LESS
67144: IFFALSE 67158
// SetLives ( i , 1000 ) ;
67146: LD_VAR 0 1
67150: PPUSH
67151: LD_INT 1000
67153: PPUSH
67154: CALL_OW 234
67158: GO 67128
67160: POP
67161: POP
// end ;
67162: PPOPN 1
67164: END
// export function hHackInvincible ; var i ; begin
67165: LD_INT 0
67167: PPUSH
67168: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
67169: LD_ADDR_VAR 0 2
67173: PUSH
67174: LD_INT 2
67176: PUSH
67177: LD_INT 21
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 21
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: LIST
67201: PPUSH
67202: CALL_OW 69
67206: PUSH
67207: FOR_IN
67208: IFFALSE 67269
// if IsSelected ( i ) then
67210: LD_VAR 0 2
67214: PPUSH
67215: CALL_OW 306
67219: IFFALSE 67267
// begin if i in hInvincible then
67221: LD_VAR 0 2
67225: PUSH
67226: LD_EXP 95
67230: IN
67231: IFFALSE 67251
// hInvincible := hInvincible diff i else
67233: LD_ADDR_EXP 95
67237: PUSH
67238: LD_EXP 95
67242: PUSH
67243: LD_VAR 0 2
67247: DIFF
67248: ST_TO_ADDR
67249: GO 67267
// hInvincible := hInvincible union i ;
67251: LD_ADDR_EXP 95
67255: PUSH
67256: LD_EXP 95
67260: PUSH
67261: LD_VAR 0 2
67265: UNION
67266: ST_TO_ADDR
// end ;
67267: GO 67207
67269: POP
67270: POP
// end ;
67271: LD_VAR 0 1
67275: RET
// export function hHackInvisible ; var i , j ; begin
67276: LD_INT 0
67278: PPUSH
67279: PPUSH
67280: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67281: LD_ADDR_VAR 0 2
67285: PUSH
67286: LD_INT 21
67288: PUSH
67289: LD_INT 1
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PPUSH
67296: CALL_OW 69
67300: PUSH
67301: FOR_IN
67302: IFFALSE 67326
// if IsSelected ( i ) then
67304: LD_VAR 0 2
67308: PPUSH
67309: CALL_OW 306
67313: IFFALSE 67324
// ComForceInvisible ( i ) ;
67315: LD_VAR 0 2
67319: PPUSH
67320: CALL_OW 496
67324: GO 67301
67326: POP
67327: POP
// end ;
67328: LD_VAR 0 1
67332: RET
// export function hHackChangeYourSide ; begin
67333: LD_INT 0
67335: PPUSH
// if your_side = 8 then
67336: LD_OWVAR 2
67340: PUSH
67341: LD_INT 8
67343: EQUAL
67344: IFFALSE 67356
// your_side := 0 else
67346: LD_ADDR_OWVAR 2
67350: PUSH
67351: LD_INT 0
67353: ST_TO_ADDR
67354: GO 67370
// your_side := your_side + 1 ;
67356: LD_ADDR_OWVAR 2
67360: PUSH
67361: LD_OWVAR 2
67365: PUSH
67366: LD_INT 1
67368: PLUS
67369: ST_TO_ADDR
// end ;
67370: LD_VAR 0 1
67374: RET
// export function hHackChangeUnitSide ; var i , j ; begin
67375: LD_INT 0
67377: PPUSH
67378: PPUSH
67379: PPUSH
// for i in all_units do
67380: LD_ADDR_VAR 0 2
67384: PUSH
67385: LD_OWVAR 3
67389: PUSH
67390: FOR_IN
67391: IFFALSE 67469
// if IsSelected ( i ) then
67393: LD_VAR 0 2
67397: PPUSH
67398: CALL_OW 306
67402: IFFALSE 67467
// begin j := GetSide ( i ) ;
67404: LD_ADDR_VAR 0 3
67408: PUSH
67409: LD_VAR 0 2
67413: PPUSH
67414: CALL_OW 255
67418: ST_TO_ADDR
// if j = 8 then
67419: LD_VAR 0 3
67423: PUSH
67424: LD_INT 8
67426: EQUAL
67427: IFFALSE 67439
// j := 0 else
67429: LD_ADDR_VAR 0 3
67433: PUSH
67434: LD_INT 0
67436: ST_TO_ADDR
67437: GO 67453
// j := j + 1 ;
67439: LD_ADDR_VAR 0 3
67443: PUSH
67444: LD_VAR 0 3
67448: PUSH
67449: LD_INT 1
67451: PLUS
67452: ST_TO_ADDR
// SetSide ( i , j ) ;
67453: LD_VAR 0 2
67457: PPUSH
67458: LD_VAR 0 3
67462: PPUSH
67463: CALL_OW 235
// end ;
67467: GO 67390
67469: POP
67470: POP
// end ;
67471: LD_VAR 0 1
67475: RET
// export function hHackFog ; begin
67476: LD_INT 0
67478: PPUSH
// FogOff ( true ) ;
67479: LD_INT 1
67481: PPUSH
67482: CALL_OW 344
// end ;
67486: LD_VAR 0 1
67490: RET
// export function hHackTeleport ( unit , x , y ) ; begin
67491: LD_INT 0
67493: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
67494: LD_VAR 0 1
67498: PPUSH
67499: LD_VAR 0 2
67503: PPUSH
67504: LD_VAR 0 3
67508: PPUSH
67509: LD_INT 1
67511: PPUSH
67512: LD_INT 1
67514: PPUSH
67515: CALL_OW 483
// CenterOnXY ( x , y ) ;
67519: LD_VAR 0 2
67523: PPUSH
67524: LD_VAR 0 3
67528: PPUSH
67529: CALL_OW 84
// end ;
67533: LD_VAR 0 4
67537: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
67538: LD_INT 0
67540: PPUSH
67541: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
67542: LD_VAR 0 1
67546: NOT
67547: PUSH
67548: LD_VAR 0 2
67552: PPUSH
67553: LD_VAR 0 3
67557: PPUSH
67558: CALL_OW 488
67562: NOT
67563: OR
67564: PUSH
67565: LD_VAR 0 1
67569: PPUSH
67570: CALL_OW 266
67574: PUSH
67575: LD_INT 3
67577: NONEQUAL
67578: PUSH
67579: LD_VAR 0 1
67583: PPUSH
67584: CALL_OW 247
67588: PUSH
67589: LD_INT 1
67591: EQUAL
67592: NOT
67593: AND
67594: OR
67595: IFFALSE 67599
// exit ;
67597: GO 67881
// if GetType ( factory ) = unit_human then
67599: LD_VAR 0 1
67603: PPUSH
67604: CALL_OW 247
67608: PUSH
67609: LD_INT 1
67611: EQUAL
67612: IFFALSE 67629
// factory := IsInUnit ( factory ) ;
67614: LD_ADDR_VAR 0 1
67618: PUSH
67619: LD_VAR 0 1
67623: PPUSH
67624: CALL_OW 310
67628: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
67629: LD_VAR 0 1
67633: PPUSH
67634: CALL_OW 266
67638: PUSH
67639: LD_INT 3
67641: NONEQUAL
67642: IFFALSE 67646
// exit ;
67644: GO 67881
// for i := 1 to Count ( factoryWaypoints ) do
67646: LD_ADDR_VAR 0 5
67650: PUSH
67651: DOUBLE
67652: LD_INT 1
67654: DEC
67655: ST_TO_ADDR
67656: LD_EXP 96
67660: PPUSH
67661: CALL 12259 0 1
67665: PUSH
67666: FOR_TO
67667: IFFALSE 67829
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
67669: LD_VAR 0 2
67673: PPUSH
67674: LD_VAR 0 3
67678: PPUSH
67679: CALL_OW 428
67683: PUSH
67684: LD_EXP 96
67688: PUSH
67689: LD_VAR 0 5
67693: ARRAY
67694: PUSH
67695: LD_INT 2
67697: ARRAY
67698: EQUAL
67699: IFFALSE 67731
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67701: LD_ADDR_EXP 96
67705: PUSH
67706: LD_EXP 96
67710: PPUSH
67711: LD_VAR 0 5
67715: PPUSH
67716: CALL_OW 3
67720: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67721: CALL 67886 0 0
// exit ;
67725: POP
67726: POP
67727: GO 67881
// end else
67729: GO 67827
// if factory = factoryWaypoints [ i ] [ 2 ] then
67731: LD_VAR 0 1
67735: PUSH
67736: LD_EXP 96
67740: PUSH
67741: LD_VAR 0 5
67745: ARRAY
67746: PUSH
67747: LD_INT 2
67749: ARRAY
67750: EQUAL
67751: IFFALSE 67827
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
67753: LD_ADDR_EXP 96
67757: PUSH
67758: LD_EXP 96
67762: PPUSH
67763: LD_VAR 0 5
67767: PPUSH
67768: CALL_OW 3
67772: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67773: LD_ADDR_EXP 96
67777: PUSH
67778: LD_EXP 96
67782: PPUSH
67783: LD_VAR 0 1
67787: PPUSH
67788: CALL_OW 255
67792: PUSH
67793: LD_VAR 0 1
67797: PUSH
67798: LD_VAR 0 2
67802: PUSH
67803: LD_VAR 0 3
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: PPUSH
67814: CALL 47940 0 2
67818: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67819: CALL 67886 0 0
// exit ;
67823: POP
67824: POP
67825: GO 67881
// end ; end ;
67827: GO 67666
67829: POP
67830: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
67831: LD_ADDR_EXP 96
67835: PUSH
67836: LD_EXP 96
67840: PPUSH
67841: LD_VAR 0 1
67845: PPUSH
67846: CALL_OW 255
67850: PUSH
67851: LD_VAR 0 1
67855: PUSH
67856: LD_VAR 0 2
67860: PUSH
67861: LD_VAR 0 3
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: LIST
67870: LIST
67871: PPUSH
67872: CALL 47940 0 2
67876: ST_TO_ADDR
// UpdateFactoryWaypoints ;
67877: CALL 67886 0 0
// end ;
67881: LD_VAR 0 4
67885: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
67886: LD_INT 0
67888: PPUSH
67889: PPUSH
67890: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
67891: LD_STRING resetFactoryWaypoint();
67893: PPUSH
67894: CALL_OW 559
// if factoryWaypoints then
67898: LD_EXP 96
67902: IFFALSE 68023
// begin list := factoryWaypoints ;
67904: LD_ADDR_VAR 0 3
67908: PUSH
67909: LD_EXP 96
67913: ST_TO_ADDR
// for i := 1 to list do
67914: LD_ADDR_VAR 0 2
67918: PUSH
67919: DOUBLE
67920: LD_INT 1
67922: DEC
67923: ST_TO_ADDR
67924: LD_VAR 0 3
67928: PUSH
67929: FOR_TO
67930: IFFALSE 68021
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
67932: LD_STRING setFactoryWaypointXY(
67934: PUSH
67935: LD_VAR 0 3
67939: PUSH
67940: LD_VAR 0 2
67944: ARRAY
67945: PUSH
67946: LD_INT 1
67948: ARRAY
67949: STR
67950: PUSH
67951: LD_STRING ,
67953: STR
67954: PUSH
67955: LD_VAR 0 3
67959: PUSH
67960: LD_VAR 0 2
67964: ARRAY
67965: PUSH
67966: LD_INT 2
67968: ARRAY
67969: STR
67970: PUSH
67971: LD_STRING ,
67973: STR
67974: PUSH
67975: LD_VAR 0 3
67979: PUSH
67980: LD_VAR 0 2
67984: ARRAY
67985: PUSH
67986: LD_INT 3
67988: ARRAY
67989: STR
67990: PUSH
67991: LD_STRING ,
67993: STR
67994: PUSH
67995: LD_VAR 0 3
67999: PUSH
68000: LD_VAR 0 2
68004: ARRAY
68005: PUSH
68006: LD_INT 4
68008: ARRAY
68009: STR
68010: PUSH
68011: LD_STRING )
68013: STR
68014: PPUSH
68015: CALL_OW 559
68019: GO 67929
68021: POP
68022: POP
// end ; end ;
68023: LD_VAR 0 1
68027: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68028: LD_INT 0
68030: PPUSH
// if HexInfo ( x , y ) = warehouse then
68031: LD_VAR 0 2
68035: PPUSH
68036: LD_VAR 0 3
68040: PPUSH
68041: CALL_OW 428
68045: PUSH
68046: LD_VAR 0 1
68050: EQUAL
68051: IFFALSE 68078
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
68053: LD_ADDR_EXP 98
68057: PUSH
68058: LD_EXP 98
68062: PPUSH
68063: LD_VAR 0 1
68067: PPUSH
68068: LD_INT 0
68070: PPUSH
68071: CALL_OW 1
68075: ST_TO_ADDR
68076: GO 68129
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
68078: LD_ADDR_EXP 98
68082: PUSH
68083: LD_EXP 98
68087: PPUSH
68088: LD_VAR 0 1
68092: PPUSH
68093: LD_VAR 0 1
68097: PPUSH
68098: CALL_OW 255
68102: PUSH
68103: LD_VAR 0 1
68107: PUSH
68108: LD_VAR 0 2
68112: PUSH
68113: LD_VAR 0 3
68117: PUSH
68118: EMPTY
68119: LIST
68120: LIST
68121: LIST
68122: LIST
68123: PPUSH
68124: CALL_OW 1
68128: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
68129: CALL 68138 0 0
// end ;
68133: LD_VAR 0 4
68137: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
68138: LD_INT 0
68140: PPUSH
68141: PPUSH
68142: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
68143: LD_STRING resetWarehouseGatheringPoints();
68145: PPUSH
68146: CALL_OW 559
// if warehouseGatheringPoints then
68150: LD_EXP 98
68154: IFFALSE 68280
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
68156: LD_ADDR_VAR 0 3
68160: PUSH
68161: LD_EXP 98
68165: PPUSH
68166: CALL 51708 0 1
68170: ST_TO_ADDR
// for i := 1 to list do
68171: LD_ADDR_VAR 0 2
68175: PUSH
68176: DOUBLE
68177: LD_INT 1
68179: DEC
68180: ST_TO_ADDR
68181: LD_VAR 0 3
68185: PUSH
68186: FOR_TO
68187: IFFALSE 68278
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68189: LD_STRING setWarehouseGatheringPointXY(
68191: PUSH
68192: LD_VAR 0 3
68196: PUSH
68197: LD_VAR 0 2
68201: ARRAY
68202: PUSH
68203: LD_INT 1
68205: ARRAY
68206: STR
68207: PUSH
68208: LD_STRING ,
68210: STR
68211: PUSH
68212: LD_VAR 0 3
68216: PUSH
68217: LD_VAR 0 2
68221: ARRAY
68222: PUSH
68223: LD_INT 2
68225: ARRAY
68226: STR
68227: PUSH
68228: LD_STRING ,
68230: STR
68231: PUSH
68232: LD_VAR 0 3
68236: PUSH
68237: LD_VAR 0 2
68241: ARRAY
68242: PUSH
68243: LD_INT 3
68245: ARRAY
68246: STR
68247: PUSH
68248: LD_STRING ,
68250: STR
68251: PUSH
68252: LD_VAR 0 3
68256: PUSH
68257: LD_VAR 0 2
68261: ARRAY
68262: PUSH
68263: LD_INT 4
68265: ARRAY
68266: STR
68267: PUSH
68268: LD_STRING )
68270: STR
68271: PPUSH
68272: CALL_OW 559
68276: GO 68186
68278: POP
68279: POP
// end ; end ;
68280: LD_VAR 0 1
68284: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
68285: LD_EXP 98
68289: IFFALSE 68974
68291: GO 68293
68293: DISABLE
68294: LD_INT 0
68296: PPUSH
68297: PPUSH
68298: PPUSH
68299: PPUSH
68300: PPUSH
68301: PPUSH
68302: PPUSH
68303: PPUSH
68304: PPUSH
// begin enable ;
68305: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
68306: LD_ADDR_VAR 0 3
68310: PUSH
68311: LD_EXP 98
68315: PPUSH
68316: CALL 51708 0 1
68320: ST_TO_ADDR
// if not list then
68321: LD_VAR 0 3
68325: NOT
68326: IFFALSE 68330
// exit ;
68328: GO 68974
// for i := 1 to list do
68330: LD_ADDR_VAR 0 1
68334: PUSH
68335: DOUBLE
68336: LD_INT 1
68338: DEC
68339: ST_TO_ADDR
68340: LD_VAR 0 3
68344: PUSH
68345: FOR_TO
68346: IFFALSE 68972
// begin depot := list [ i ] [ 2 ] ;
68348: LD_ADDR_VAR 0 8
68352: PUSH
68353: LD_VAR 0 3
68357: PUSH
68358: LD_VAR 0 1
68362: ARRAY
68363: PUSH
68364: LD_INT 2
68366: ARRAY
68367: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
68368: LD_ADDR_VAR 0 5
68372: PUSH
68373: LD_VAR 0 3
68377: PUSH
68378: LD_VAR 0 1
68382: ARRAY
68383: PUSH
68384: LD_INT 1
68386: ARRAY
68387: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
68388: LD_VAR 0 8
68392: PPUSH
68393: CALL_OW 301
68397: PUSH
68398: LD_VAR 0 5
68402: PUSH
68403: LD_VAR 0 8
68407: PPUSH
68408: CALL_OW 255
68412: NONEQUAL
68413: OR
68414: IFFALSE 68443
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
68416: LD_ADDR_EXP 98
68420: PUSH
68421: LD_EXP 98
68425: PPUSH
68426: LD_VAR 0 8
68430: PPUSH
68431: LD_INT 0
68433: PPUSH
68434: CALL_OW 1
68438: ST_TO_ADDR
// exit ;
68439: POP
68440: POP
68441: GO 68974
// end ; x := list [ i ] [ 3 ] ;
68443: LD_ADDR_VAR 0 6
68447: PUSH
68448: LD_VAR 0 3
68452: PUSH
68453: LD_VAR 0 1
68457: ARRAY
68458: PUSH
68459: LD_INT 3
68461: ARRAY
68462: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
68463: LD_ADDR_VAR 0 7
68467: PUSH
68468: LD_VAR 0 3
68472: PUSH
68473: LD_VAR 0 1
68477: ARRAY
68478: PUSH
68479: LD_INT 4
68481: ARRAY
68482: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
68483: LD_ADDR_VAR 0 9
68487: PUSH
68488: LD_VAR 0 6
68492: PPUSH
68493: LD_VAR 0 7
68497: PPUSH
68498: LD_INT 16
68500: PPUSH
68501: CALL 50292 0 3
68505: ST_TO_ADDR
// if not cratesNearbyPoint then
68506: LD_VAR 0 9
68510: NOT
68511: IFFALSE 68517
// exit ;
68513: POP
68514: POP
68515: GO 68974
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
68517: LD_ADDR_VAR 0 4
68521: PUSH
68522: LD_INT 22
68524: PUSH
68525: LD_VAR 0 5
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 3
68536: PUSH
68537: LD_INT 60
68539: PUSH
68540: EMPTY
68541: LIST
68542: PUSH
68543: EMPTY
68544: LIST
68545: LIST
68546: PUSH
68547: LD_INT 91
68549: PUSH
68550: LD_VAR 0 8
68554: PUSH
68555: LD_INT 6
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 2
68565: PUSH
68566: LD_INT 25
68568: PUSH
68569: LD_INT 2
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 25
68578: PUSH
68579: LD_INT 16
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: LIST
68590: PUSH
68591: EMPTY
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: PPUSH
68597: CALL_OW 69
68601: PUSH
68602: LD_VAR 0 8
68606: PPUSH
68607: CALL_OW 313
68611: PPUSH
68612: LD_INT 3
68614: PUSH
68615: LD_INT 60
68617: PUSH
68618: EMPTY
68619: LIST
68620: PUSH
68621: EMPTY
68622: LIST
68623: LIST
68624: PUSH
68625: LD_INT 2
68627: PUSH
68628: LD_INT 25
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 25
68640: PUSH
68641: LD_INT 16
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: LIST
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: PPUSH
68657: CALL_OW 72
68661: UNION
68662: ST_TO_ADDR
// if tmp then
68663: LD_VAR 0 4
68667: IFFALSE 68747
// begin tmp := ShrinkArray ( tmp , 3 ) ;
68669: LD_ADDR_VAR 0 4
68673: PUSH
68674: LD_VAR 0 4
68678: PPUSH
68679: LD_INT 3
68681: PPUSH
68682: CALL 48255 0 2
68686: ST_TO_ADDR
// for j in tmp do
68687: LD_ADDR_VAR 0 2
68691: PUSH
68692: LD_VAR 0 4
68696: PUSH
68697: FOR_IN
68698: IFFALSE 68741
// begin if IsInUnit ( j ) then
68700: LD_VAR 0 2
68704: PPUSH
68705: CALL_OW 310
68709: IFFALSE 68720
// ComExit ( j ) ;
68711: LD_VAR 0 2
68715: PPUSH
68716: CALL 48338 0 1
// AddComCollect ( j , x , y ) ;
68720: LD_VAR 0 2
68724: PPUSH
68725: LD_VAR 0 6
68729: PPUSH
68730: LD_VAR 0 7
68734: PPUSH
68735: CALL_OW 177
// end ;
68739: GO 68697
68741: POP
68742: POP
// exit ;
68743: POP
68744: POP
68745: GO 68974
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
68747: LD_ADDR_VAR 0 4
68751: PUSH
68752: LD_INT 22
68754: PUSH
68755: LD_VAR 0 5
68759: PUSH
68760: EMPTY
68761: LIST
68762: LIST
68763: PUSH
68764: LD_INT 91
68766: PUSH
68767: LD_VAR 0 8
68771: PUSH
68772: LD_INT 8
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: LIST
68779: PUSH
68780: LD_INT 2
68782: PUSH
68783: LD_INT 34
68785: PUSH
68786: LD_INT 12
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 34
68795: PUSH
68796: LD_INT 51
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 34
68805: PUSH
68806: LD_INT 32
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 34
68815: PUSH
68816: LD_INT 89
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: LIST
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: LIST
68834: PPUSH
68835: CALL_OW 69
68839: ST_TO_ADDR
// if tmp then
68840: LD_VAR 0 4
68844: IFFALSE 68970
// begin for j in tmp do
68846: LD_ADDR_VAR 0 2
68850: PUSH
68851: LD_VAR 0 4
68855: PUSH
68856: FOR_IN
68857: IFFALSE 68968
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
68859: LD_VAR 0 2
68863: PPUSH
68864: CALL_OW 262
68868: PUSH
68869: LD_INT 3
68871: EQUAL
68872: PUSH
68873: LD_VAR 0 2
68877: PPUSH
68878: CALL_OW 261
68882: PUSH
68883: LD_INT 20
68885: GREATER
68886: OR
68887: PUSH
68888: LD_VAR 0 2
68892: PPUSH
68893: CALL_OW 314
68897: NOT
68898: AND
68899: PUSH
68900: LD_VAR 0 2
68904: PPUSH
68905: CALL_OW 263
68909: PUSH
68910: LD_INT 1
68912: NONEQUAL
68913: PUSH
68914: LD_VAR 0 2
68918: PPUSH
68919: CALL_OW 311
68923: OR
68924: AND
68925: IFFALSE 68966
// begin ComCollect ( j , x , y ) ;
68927: LD_VAR 0 2
68931: PPUSH
68932: LD_VAR 0 6
68936: PPUSH
68937: LD_VAR 0 7
68941: PPUSH
68942: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
68946: LD_VAR 0 2
68950: PPUSH
68951: LD_VAR 0 8
68955: PPUSH
68956: CALL_OW 172
// exit ;
68960: POP
68961: POP
68962: POP
68963: POP
68964: GO 68974
// end ;
68966: GO 68856
68968: POP
68969: POP
// end ; end ;
68970: GO 68345
68972: POP
68973: POP
// end ; end_of_file
68974: PPOPN 9
68976: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
68977: LD_VAR 0 1
68981: PPUSH
68982: LD_VAR 0 2
68986: PPUSH
68987: LD_VAR 0 3
68991: PPUSH
68992: LD_VAR 0 4
68996: PPUSH
68997: LD_VAR 0 5
69001: PPUSH
69002: LD_VAR 0 6
69006: PPUSH
69007: CALL 53202 0 6
// end ;
69011: PPOPN 6
69013: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69014: LD_INT 0
69016: PPUSH
// begin if not units then
69017: LD_VAR 0 1
69021: NOT
69022: IFFALSE 69026
// exit ;
69024: GO 69026
// end ;
69026: PPOPN 7
69028: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
69029: CALL 53089 0 0
// end ; end_of_file
69033: PPOPN 1
69035: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
69036: LD_VAR 0 1
69040: PUSH
69041: LD_INT 200
69043: DOUBLE
69044: GREATEREQUAL
69045: IFFALSE 69053
69047: LD_INT 299
69049: DOUBLE
69050: LESSEQUAL
69051: IFTRUE 69055
69053: GO 69087
69055: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
69056: LD_VAR 0 1
69060: PPUSH
69061: LD_VAR 0 2
69065: PPUSH
69066: LD_VAR 0 3
69070: PPUSH
69071: LD_VAR 0 4
69075: PPUSH
69076: LD_VAR 0 5
69080: PPUSH
69081: CALL 69864 0 5
69085: GO 69164
69087: LD_INT 300
69089: DOUBLE
69090: GREATEREQUAL
69091: IFFALSE 69099
69093: LD_INT 399
69095: DOUBLE
69096: LESSEQUAL
69097: IFTRUE 69101
69099: GO 69163
69101: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
69102: LD_VAR 0 1
69106: PPUSH
69107: LD_VAR 0 2
69111: PPUSH
69112: LD_VAR 0 3
69116: PPUSH
69117: LD_VAR 0 4
69121: PPUSH
69122: LD_VAR 0 5
69126: PPUSH
69127: LD_VAR 0 6
69131: PPUSH
69132: LD_VAR 0 7
69136: PPUSH
69137: LD_VAR 0 8
69141: PPUSH
69142: LD_VAR 0 9
69146: PPUSH
69147: LD_VAR 0 10
69151: PPUSH
69152: LD_VAR 0 11
69156: PPUSH
69157: CALL 65550 0 11
69161: GO 69164
69163: POP
// end ;
69164: PPOPN 11
69166: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
69167: LD_VAR 0 1
69171: PPUSH
69172: LD_VAR 0 2
69176: PPUSH
69177: LD_VAR 0 3
69181: PPUSH
69182: LD_VAR 0 4
69186: PPUSH
69187: LD_VAR 0 5
69191: PPUSH
69192: CALL 69249 0 5
// end ; end_of_file
69196: PPOPN 5
69198: END
// export function SOS_UnitDestroyed ( un ) ; begin
69199: LD_INT 0
69201: PPUSH
// ComRadiation ( un ) ;
69202: LD_VAR 0 1
69206: PPUSH
69207: CALL 70268 0 1
// end ;
69211: LD_VAR 0 2
69215: RET
// export function SOS_UnitKamikazed ( un ) ; begin
69216: LD_INT 0
69218: PPUSH
// ComRadiation ( un ) ;
69219: LD_VAR 0 1
69223: PPUSH
69224: CALL 70268 0 1
// end ;
69228: LD_VAR 0 2
69232: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
69233: LD_INT 0
69235: PPUSH
// end ;
69236: LD_VAR 0 4
69240: RET
// export function SOS_Command ( cmd ) ; begin
69241: LD_INT 0
69243: PPUSH
// end ;
69244: LD_VAR 0 2
69248: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
69249: LD_INT 0
69251: PPUSH
// end ;
69252: LD_VAR 0 6
69256: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
69257: LD_INT 0
69259: PPUSH
69260: PPUSH
69261: PPUSH
69262: PPUSH
// if not vehicle or not factory then
69263: LD_VAR 0 1
69267: NOT
69268: PUSH
69269: LD_VAR 0 2
69273: NOT
69274: OR
69275: IFFALSE 69279
// exit ;
69277: GO 69859
// if not factoryWaypoints then
69279: LD_EXP 96
69283: NOT
69284: IFFALSE 69288
// exit ;
69286: GO 69859
// for i := 1 to Count ( factoryWaypoints ) do
69288: LD_ADDR_VAR 0 4
69292: PUSH
69293: DOUBLE
69294: LD_INT 1
69296: DEC
69297: ST_TO_ADDR
69298: LD_EXP 96
69302: PPUSH
69303: CALL 12259 0 1
69307: PUSH
69308: FOR_TO
69309: IFFALSE 69857
// if factoryWaypoints [ i ] [ 2 ] = factory then
69311: LD_EXP 96
69315: PUSH
69316: LD_VAR 0 4
69320: ARRAY
69321: PUSH
69322: LD_INT 2
69324: ARRAY
69325: PUSH
69326: LD_VAR 0 2
69330: EQUAL
69331: IFFALSE 69855
// begin if GetControl ( vehicle ) = control_manual then
69333: LD_VAR 0 1
69337: PPUSH
69338: CALL_OW 263
69342: PUSH
69343: LD_INT 1
69345: EQUAL
69346: IFFALSE 69708
// begin driver := IsDrivenBy ( vehicle ) ;
69348: LD_ADDR_VAR 0 5
69352: PUSH
69353: LD_VAR 0 1
69357: PPUSH
69358: CALL_OW 311
69362: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
69363: LD_VAR 0 5
69367: PUSH
69368: LD_EXP 97
69372: IN
69373: PUSH
69374: LD_VAR 0 1
69378: PUSH
69379: LD_EXP 97
69383: IN
69384: OR
69385: IFFALSE 69391
// exit ;
69387: POP
69388: POP
69389: GO 69859
// if not HasTask ( driver ) then
69391: LD_VAR 0 5
69395: PPUSH
69396: CALL_OW 314
69400: NOT
69401: IFFALSE 69706
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
69403: LD_ADDR_EXP 97
69407: PUSH
69408: LD_EXP 97
69412: PPUSH
69413: LD_VAR 0 5
69417: PPUSH
69418: CALL 47940 0 2
69422: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
69423: LD_ADDR_EXP 97
69427: PUSH
69428: LD_EXP 97
69432: PPUSH
69433: LD_VAR 0 1
69437: PPUSH
69438: CALL 47940 0 2
69442: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69443: LD_ADDR_VAR 0 6
69447: PUSH
69448: LD_EXP 96
69452: PUSH
69453: LD_VAR 0 4
69457: ARRAY
69458: PUSH
69459: LD_INT 3
69461: ARRAY
69462: PPUSH
69463: LD_EXP 96
69467: PUSH
69468: LD_VAR 0 4
69472: ARRAY
69473: PUSH
69474: LD_INT 4
69476: ARRAY
69477: PPUSH
69478: CALL_OW 428
69482: ST_TO_ADDR
// if hex then
69483: LD_VAR 0 6
69487: IFFALSE 69505
// ComMoveUnit ( driver , hex ) else
69489: LD_VAR 0 5
69493: PPUSH
69494: LD_VAR 0 6
69498: PPUSH
69499: CALL_OW 112
69503: GO 69589
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
69505: LD_VAR 0 1
69509: PPUSH
69510: LD_EXP 96
69514: PUSH
69515: LD_VAR 0 4
69519: ARRAY
69520: PUSH
69521: LD_INT 3
69523: ARRAY
69524: PPUSH
69525: LD_EXP 96
69529: PUSH
69530: LD_VAR 0 4
69534: ARRAY
69535: PUSH
69536: LD_INT 4
69538: ARRAY
69539: PPUSH
69540: CALL_OW 297
69544: PUSH
69545: LD_INT 0
69547: GREATER
69548: IFFALSE 69589
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69550: LD_VAR 0 5
69554: PPUSH
69555: LD_EXP 96
69559: PUSH
69560: LD_VAR 0 4
69564: ARRAY
69565: PUSH
69566: LD_INT 3
69568: ARRAY
69569: PPUSH
69570: LD_EXP 96
69574: PUSH
69575: LD_VAR 0 4
69579: ARRAY
69580: PUSH
69581: LD_INT 4
69583: ARRAY
69584: PPUSH
69585: CALL_OW 111
// AddComExitVehicle ( driver ) ;
69589: LD_VAR 0 5
69593: PPUSH
69594: CALL_OW 181
// if Multiplayer then
69598: LD_OWVAR 4
69602: IFFALSE 69651
// begin repeat wait ( 10 ) ;
69604: LD_INT 10
69606: PPUSH
69607: CALL_OW 67
// until not IsInUnit ( driver ) ;
69611: LD_VAR 0 5
69615: PPUSH
69616: CALL_OW 310
69620: NOT
69621: IFFALSE 69604
// if not HasTask ( driver ) then
69623: LD_VAR 0 5
69627: PPUSH
69628: CALL_OW 314
69632: NOT
69633: IFFALSE 69649
// ComEnterUnit ( driver , factory ) ;
69635: LD_VAR 0 5
69639: PPUSH
69640: LD_VAR 0 2
69644: PPUSH
69645: CALL_OW 120
// end else
69649: GO 69665
// AddComEnterUnit ( driver , factory ) ;
69651: LD_VAR 0 5
69655: PPUSH
69656: LD_VAR 0 2
69660: PPUSH
69661: CALL_OW 180
// wait ( 0 0$1 ) ;
69665: LD_INT 35
69667: PPUSH
69668: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
69672: LD_ADDR_EXP 97
69676: PUSH
69677: LD_EXP 97
69681: PUSH
69682: LD_VAR 0 5
69686: DIFF
69687: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
69688: LD_ADDR_EXP 97
69692: PUSH
69693: LD_EXP 97
69697: PUSH
69698: LD_VAR 0 1
69702: DIFF
69703: ST_TO_ADDR
// break ;
69704: GO 69857
// end ; end else
69706: GO 69855
// if GetControl ( vehicle ) = control_remote then
69708: LD_VAR 0 1
69712: PPUSH
69713: CALL_OW 263
69717: PUSH
69718: LD_INT 2
69720: EQUAL
69721: IFFALSE 69807
// begin wait ( 0 0$2 ) ;
69723: LD_INT 70
69725: PPUSH
69726: CALL_OW 67
// repeat wait ( 10 ) ;
69730: LD_INT 10
69732: PPUSH
69733: CALL_OW 67
// Connect ( vehicle ) ;
69737: LD_VAR 0 1
69741: PPUSH
69742: CALL 18465 0 1
// until IsControledBy ( vehicle ) ;
69746: LD_VAR 0 1
69750: PPUSH
69751: CALL_OW 312
69755: IFFALSE 69730
// wait ( 10 ) ;
69757: LD_INT 10
69759: PPUSH
69760: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69764: LD_VAR 0 1
69768: PPUSH
69769: LD_EXP 96
69773: PUSH
69774: LD_VAR 0 4
69778: ARRAY
69779: PUSH
69780: LD_INT 3
69782: ARRAY
69783: PPUSH
69784: LD_EXP 96
69788: PUSH
69789: LD_VAR 0 4
69793: ARRAY
69794: PUSH
69795: LD_INT 4
69797: ARRAY
69798: PPUSH
69799: CALL_OW 111
// break ;
69803: GO 69857
// end else
69805: GO 69855
// begin wait ( 0 0$3 ) ;
69807: LD_INT 105
69809: PPUSH
69810: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
69814: LD_VAR 0 1
69818: PPUSH
69819: LD_EXP 96
69823: PUSH
69824: LD_VAR 0 4
69828: ARRAY
69829: PUSH
69830: LD_INT 3
69832: ARRAY
69833: PPUSH
69834: LD_EXP 96
69838: PUSH
69839: LD_VAR 0 4
69843: ARRAY
69844: PUSH
69845: LD_INT 4
69847: ARRAY
69848: PPUSH
69849: CALL_OW 111
// break ;
69853: GO 69857
// end ; end ;
69855: GO 69308
69857: POP
69858: POP
// end ;
69859: LD_VAR 0 3
69863: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
69864: LD_INT 0
69866: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
69867: LD_VAR 0 1
69871: PUSH
69872: LD_INT 250
69874: EQUAL
69875: PUSH
69876: LD_VAR 0 2
69880: PPUSH
69881: CALL_OW 264
69885: PUSH
69886: LD_INT 81
69888: EQUAL
69889: AND
69890: IFFALSE 69911
// MinerPlaceMine ( unit , x , y ) ;
69892: LD_VAR 0 2
69896: PPUSH
69897: LD_VAR 0 4
69901: PPUSH
69902: LD_VAR 0 5
69906: PPUSH
69907: CALL 73003 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
69911: LD_VAR 0 1
69915: PUSH
69916: LD_INT 251
69918: EQUAL
69919: PUSH
69920: LD_VAR 0 2
69924: PPUSH
69925: CALL_OW 264
69929: PUSH
69930: LD_INT 81
69932: EQUAL
69933: AND
69934: IFFALSE 69955
// MinerDetonateMine ( unit , x , y ) ;
69936: LD_VAR 0 2
69940: PPUSH
69941: LD_VAR 0 4
69945: PPUSH
69946: LD_VAR 0 5
69950: PPUSH
69951: CALL 73278 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
69955: LD_VAR 0 1
69959: PUSH
69960: LD_INT 252
69962: EQUAL
69963: PUSH
69964: LD_VAR 0 2
69968: PPUSH
69969: CALL_OW 264
69973: PUSH
69974: LD_INT 81
69976: EQUAL
69977: AND
69978: IFFALSE 69999
// MinerCreateMinefield ( unit , x , y ) ;
69980: LD_VAR 0 2
69984: PPUSH
69985: LD_VAR 0 4
69989: PPUSH
69990: LD_VAR 0 5
69994: PPUSH
69995: CALL 73695 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
69999: LD_VAR 0 1
70003: PUSH
70004: LD_INT 253
70006: EQUAL
70007: PUSH
70008: LD_VAR 0 2
70012: PPUSH
70013: CALL_OW 257
70017: PUSH
70018: LD_INT 5
70020: EQUAL
70021: AND
70022: IFFALSE 70043
// ComBinocular ( unit , x , y ) ;
70024: LD_VAR 0 2
70028: PPUSH
70029: LD_VAR 0 4
70033: PPUSH
70034: LD_VAR 0 5
70038: PPUSH
70039: CALL 74064 0 3
// if selectedUnit then
70043: LD_VAR 0 3
70047: IFFALSE 70103
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
70049: LD_VAR 0 1
70053: PUSH
70054: LD_INT 254
70056: EQUAL
70057: PUSH
70058: LD_VAR 0 2
70062: PPUSH
70063: CALL_OW 264
70067: PUSH
70068: LD_INT 99
70070: EQUAL
70071: AND
70072: PUSH
70073: LD_VAR 0 3
70077: PPUSH
70078: CALL_OW 263
70082: PUSH
70083: LD_INT 3
70085: EQUAL
70086: AND
70087: IFFALSE 70103
// HackDestroyVehicle ( unit , selectedUnit ) ;
70089: LD_VAR 0 2
70093: PPUSH
70094: LD_VAR 0 3
70098: PPUSH
70099: CALL 72367 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
70103: LD_VAR 0 1
70107: PUSH
70108: LD_INT 255
70110: EQUAL
70111: PUSH
70112: LD_VAR 0 2
70116: PPUSH
70117: CALL_OW 264
70121: PUSH
70122: LD_INT 14
70124: PUSH
70125: LD_INT 53
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: IN
70132: AND
70133: PUSH
70134: LD_VAR 0 4
70138: PPUSH
70139: LD_VAR 0 5
70143: PPUSH
70144: CALL_OW 488
70148: AND
70149: IFFALSE 70173
// CutTreeXYR ( unit , x , y , 12 ) ;
70151: LD_VAR 0 2
70155: PPUSH
70156: LD_VAR 0 4
70160: PPUSH
70161: LD_VAR 0 5
70165: PPUSH
70166: LD_INT 12
70168: PPUSH
70169: CALL 70364 0 4
// if cmd = 256 then
70173: LD_VAR 0 1
70177: PUSH
70178: LD_INT 256
70180: EQUAL
70181: IFFALSE 70202
// SetFactoryWaypoint ( unit , x , y ) ;
70183: LD_VAR 0 2
70187: PPUSH
70188: LD_VAR 0 4
70192: PPUSH
70193: LD_VAR 0 5
70197: PPUSH
70198: CALL 67538 0 3
// if cmd = 257 then
70202: LD_VAR 0 1
70206: PUSH
70207: LD_INT 257
70209: EQUAL
70210: IFFALSE 70231
// SetWarehouseGatheringPoint ( unit , x , y ) ;
70212: LD_VAR 0 2
70216: PPUSH
70217: LD_VAR 0 4
70221: PPUSH
70222: LD_VAR 0 5
70226: PPUSH
70227: CALL 68028 0 3
// if cmd = 258 then
70231: LD_VAR 0 1
70235: PUSH
70236: LD_INT 258
70238: EQUAL
70239: IFFALSE 70263
// BurnTreeXYR ( unit , x , y , 8 ) ;
70241: LD_VAR 0 2
70245: PPUSH
70246: LD_VAR 0 4
70250: PPUSH
70251: LD_VAR 0 5
70255: PPUSH
70256: LD_INT 8
70258: PPUSH
70259: CALL 70758 0 4
// end ;
70263: LD_VAR 0 6
70267: RET
// export function ComRadiation ( un ) ; var eff ; begin
70268: LD_INT 0
70270: PPUSH
70271: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
70272: LD_VAR 0 1
70276: PPUSH
70277: CALL_OW 264
70281: PUSH
70282: LD_INT 91
70284: NONEQUAL
70285: IFFALSE 70289
// exit ;
70287: GO 70359
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
70289: LD_INT 68
70291: PPUSH
70292: LD_VAR 0 1
70296: PPUSH
70297: CALL_OW 255
70301: PPUSH
70302: CALL_OW 321
70306: PUSH
70307: LD_INT 2
70309: EQUAL
70310: IFFALSE 70322
// eff := 50 else
70312: LD_ADDR_VAR 0 3
70316: PUSH
70317: LD_INT 50
70319: ST_TO_ADDR
70320: GO 70330
// eff := 25 ;
70322: LD_ADDR_VAR 0 3
70326: PUSH
70327: LD_INT 25
70329: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
70330: LD_VAR 0 1
70334: PPUSH
70335: CALL_OW 250
70339: PPUSH
70340: LD_VAR 0 1
70344: PPUSH
70345: CALL_OW 251
70349: PPUSH
70350: LD_VAR 0 3
70354: PPUSH
70355: CALL_OW 495
// end ;
70359: LD_VAR 0 2
70363: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
70364: LD_INT 0
70366: PPUSH
70367: PPUSH
70368: PPUSH
70369: PPUSH
70370: PPUSH
70371: PPUSH
70372: PPUSH
70373: PPUSH
70374: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
70375: LD_VAR 0 1
70379: PPUSH
70380: CALL_OW 302
70384: NOT
70385: PUSH
70386: LD_VAR 0 2
70390: PPUSH
70391: LD_VAR 0 3
70395: PPUSH
70396: CALL_OW 488
70400: NOT
70401: OR
70402: PUSH
70403: LD_VAR 0 4
70407: NOT
70408: OR
70409: IFFALSE 70413
// exit ;
70411: GO 70753
// list := [ ] ;
70413: LD_ADDR_VAR 0 13
70417: PUSH
70418: EMPTY
70419: ST_TO_ADDR
// if x - r < 0 then
70420: LD_VAR 0 2
70424: PUSH
70425: LD_VAR 0 4
70429: MINUS
70430: PUSH
70431: LD_INT 0
70433: LESS
70434: IFFALSE 70446
// min_x := 0 else
70436: LD_ADDR_VAR 0 7
70440: PUSH
70441: LD_INT 0
70443: ST_TO_ADDR
70444: GO 70462
// min_x := x - r ;
70446: LD_ADDR_VAR 0 7
70450: PUSH
70451: LD_VAR 0 2
70455: PUSH
70456: LD_VAR 0 4
70460: MINUS
70461: ST_TO_ADDR
// if y - r < 0 then
70462: LD_VAR 0 3
70466: PUSH
70467: LD_VAR 0 4
70471: MINUS
70472: PUSH
70473: LD_INT 0
70475: LESS
70476: IFFALSE 70488
// min_y := 0 else
70478: LD_ADDR_VAR 0 8
70482: PUSH
70483: LD_INT 0
70485: ST_TO_ADDR
70486: GO 70504
// min_y := y - r ;
70488: LD_ADDR_VAR 0 8
70492: PUSH
70493: LD_VAR 0 3
70497: PUSH
70498: LD_VAR 0 4
70502: MINUS
70503: ST_TO_ADDR
// max_x := x + r ;
70504: LD_ADDR_VAR 0 9
70508: PUSH
70509: LD_VAR 0 2
70513: PUSH
70514: LD_VAR 0 4
70518: PLUS
70519: ST_TO_ADDR
// max_y := y + r ;
70520: LD_ADDR_VAR 0 10
70524: PUSH
70525: LD_VAR 0 3
70529: PUSH
70530: LD_VAR 0 4
70534: PLUS
70535: ST_TO_ADDR
// for _x = min_x to max_x do
70536: LD_ADDR_VAR 0 11
70540: PUSH
70541: DOUBLE
70542: LD_VAR 0 7
70546: DEC
70547: ST_TO_ADDR
70548: LD_VAR 0 9
70552: PUSH
70553: FOR_TO
70554: IFFALSE 70671
// for _y = min_y to max_y do
70556: LD_ADDR_VAR 0 12
70560: PUSH
70561: DOUBLE
70562: LD_VAR 0 8
70566: DEC
70567: ST_TO_ADDR
70568: LD_VAR 0 10
70572: PUSH
70573: FOR_TO
70574: IFFALSE 70667
// begin if not ValidHex ( _x , _y ) then
70576: LD_VAR 0 11
70580: PPUSH
70581: LD_VAR 0 12
70585: PPUSH
70586: CALL_OW 488
70590: NOT
70591: IFFALSE 70595
// continue ;
70593: GO 70573
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70595: LD_VAR 0 11
70599: PPUSH
70600: LD_VAR 0 12
70604: PPUSH
70605: CALL_OW 351
70609: PUSH
70610: LD_VAR 0 11
70614: PPUSH
70615: LD_VAR 0 12
70619: PPUSH
70620: CALL_OW 554
70624: AND
70625: IFFALSE 70665
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
70627: LD_ADDR_VAR 0 13
70631: PUSH
70632: LD_VAR 0 13
70636: PPUSH
70637: LD_VAR 0 13
70641: PUSH
70642: LD_INT 1
70644: PLUS
70645: PPUSH
70646: LD_VAR 0 11
70650: PUSH
70651: LD_VAR 0 12
70655: PUSH
70656: EMPTY
70657: LIST
70658: LIST
70659: PPUSH
70660: CALL_OW 2
70664: ST_TO_ADDR
// end ;
70665: GO 70573
70667: POP
70668: POP
70669: GO 70553
70671: POP
70672: POP
// if not list then
70673: LD_VAR 0 13
70677: NOT
70678: IFFALSE 70682
// exit ;
70680: GO 70753
// for i in list do
70682: LD_ADDR_VAR 0 6
70686: PUSH
70687: LD_VAR 0 13
70691: PUSH
70692: FOR_IN
70693: IFFALSE 70751
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
70695: LD_VAR 0 1
70699: PPUSH
70700: LD_STRING M
70702: PUSH
70703: LD_VAR 0 6
70707: PUSH
70708: LD_INT 1
70710: ARRAY
70711: PUSH
70712: LD_VAR 0 6
70716: PUSH
70717: LD_INT 2
70719: ARRAY
70720: PUSH
70721: LD_INT 0
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: LD_INT 0
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: LIST
70737: LIST
70738: LIST
70739: LIST
70740: LIST
70741: PUSH
70742: EMPTY
70743: LIST
70744: PPUSH
70745: CALL_OW 447
70749: GO 70692
70751: POP
70752: POP
// end ;
70753: LD_VAR 0 5
70757: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
70758: LD_INT 0
70760: PPUSH
70761: PPUSH
70762: PPUSH
70763: PPUSH
70764: PPUSH
70765: PPUSH
70766: PPUSH
70767: PPUSH
70768: PPUSH
70769: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
70770: LD_VAR 0 1
70774: PPUSH
70775: CALL_OW 302
70779: NOT
70780: PUSH
70781: LD_VAR 0 2
70785: PPUSH
70786: LD_VAR 0 3
70790: PPUSH
70791: CALL_OW 488
70795: NOT
70796: OR
70797: PUSH
70798: LD_VAR 0 4
70802: NOT
70803: OR
70804: IFFALSE 70808
// exit ;
70806: GO 71321
// list := [ ] ;
70808: LD_ADDR_VAR 0 13
70812: PUSH
70813: EMPTY
70814: ST_TO_ADDR
// if x - r < 0 then
70815: LD_VAR 0 2
70819: PUSH
70820: LD_VAR 0 4
70824: MINUS
70825: PUSH
70826: LD_INT 0
70828: LESS
70829: IFFALSE 70841
// min_x := 0 else
70831: LD_ADDR_VAR 0 7
70835: PUSH
70836: LD_INT 0
70838: ST_TO_ADDR
70839: GO 70857
// min_x := x - r ;
70841: LD_ADDR_VAR 0 7
70845: PUSH
70846: LD_VAR 0 2
70850: PUSH
70851: LD_VAR 0 4
70855: MINUS
70856: ST_TO_ADDR
// if y - r < 0 then
70857: LD_VAR 0 3
70861: PUSH
70862: LD_VAR 0 4
70866: MINUS
70867: PUSH
70868: LD_INT 0
70870: LESS
70871: IFFALSE 70883
// min_y := 0 else
70873: LD_ADDR_VAR 0 8
70877: PUSH
70878: LD_INT 0
70880: ST_TO_ADDR
70881: GO 70899
// min_y := y - r ;
70883: LD_ADDR_VAR 0 8
70887: PUSH
70888: LD_VAR 0 3
70892: PUSH
70893: LD_VAR 0 4
70897: MINUS
70898: ST_TO_ADDR
// max_x := x + r ;
70899: LD_ADDR_VAR 0 9
70903: PUSH
70904: LD_VAR 0 2
70908: PUSH
70909: LD_VAR 0 4
70913: PLUS
70914: ST_TO_ADDR
// max_y := y + r ;
70915: LD_ADDR_VAR 0 10
70919: PUSH
70920: LD_VAR 0 3
70924: PUSH
70925: LD_VAR 0 4
70929: PLUS
70930: ST_TO_ADDR
// for _x = min_x to max_x do
70931: LD_ADDR_VAR 0 11
70935: PUSH
70936: DOUBLE
70937: LD_VAR 0 7
70941: DEC
70942: ST_TO_ADDR
70943: LD_VAR 0 9
70947: PUSH
70948: FOR_TO
70949: IFFALSE 71066
// for _y = min_y to max_y do
70951: LD_ADDR_VAR 0 12
70955: PUSH
70956: DOUBLE
70957: LD_VAR 0 8
70961: DEC
70962: ST_TO_ADDR
70963: LD_VAR 0 10
70967: PUSH
70968: FOR_TO
70969: IFFALSE 71062
// begin if not ValidHex ( _x , _y ) then
70971: LD_VAR 0 11
70975: PPUSH
70976: LD_VAR 0 12
70980: PPUSH
70981: CALL_OW 488
70985: NOT
70986: IFFALSE 70990
// continue ;
70988: GO 70968
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
70990: LD_VAR 0 11
70994: PPUSH
70995: LD_VAR 0 12
70999: PPUSH
71000: CALL_OW 351
71004: PUSH
71005: LD_VAR 0 11
71009: PPUSH
71010: LD_VAR 0 12
71014: PPUSH
71015: CALL_OW 554
71019: AND
71020: IFFALSE 71060
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71022: LD_ADDR_VAR 0 13
71026: PUSH
71027: LD_VAR 0 13
71031: PPUSH
71032: LD_VAR 0 13
71036: PUSH
71037: LD_INT 1
71039: PLUS
71040: PPUSH
71041: LD_VAR 0 11
71045: PUSH
71046: LD_VAR 0 12
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PPUSH
71055: CALL_OW 2
71059: ST_TO_ADDR
// end ;
71060: GO 70968
71062: POP
71063: POP
71064: GO 70948
71066: POP
71067: POP
// if not list then
71068: LD_VAR 0 13
71072: NOT
71073: IFFALSE 71077
// exit ;
71075: GO 71321
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
71077: LD_ADDR_VAR 0 13
71081: PUSH
71082: LD_VAR 0 1
71086: PPUSH
71087: LD_VAR 0 13
71091: PPUSH
71092: LD_INT 1
71094: PPUSH
71095: LD_INT 1
71097: PPUSH
71098: CALL 15607 0 4
71102: ST_TO_ADDR
// ComStop ( flame ) ;
71103: LD_VAR 0 1
71107: PPUSH
71108: CALL_OW 141
// for i in list do
71112: LD_ADDR_VAR 0 6
71116: PUSH
71117: LD_VAR 0 13
71121: PUSH
71122: FOR_IN
71123: IFFALSE 71154
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
71125: LD_VAR 0 1
71129: PPUSH
71130: LD_VAR 0 6
71134: PUSH
71135: LD_INT 1
71137: ARRAY
71138: PPUSH
71139: LD_VAR 0 6
71143: PUSH
71144: LD_INT 2
71146: ARRAY
71147: PPUSH
71148: CALL_OW 176
71152: GO 71122
71154: POP
71155: POP
// repeat wait ( 0 0$1 ) ;
71156: LD_INT 35
71158: PPUSH
71159: CALL_OW 67
// task := GetTaskList ( flame ) ;
71163: LD_ADDR_VAR 0 14
71167: PUSH
71168: LD_VAR 0 1
71172: PPUSH
71173: CALL_OW 437
71177: ST_TO_ADDR
// if not task then
71178: LD_VAR 0 14
71182: NOT
71183: IFFALSE 71187
// exit ;
71185: GO 71321
// if task [ 1 ] [ 1 ] <> | then
71187: LD_VAR 0 14
71191: PUSH
71192: LD_INT 1
71194: ARRAY
71195: PUSH
71196: LD_INT 1
71198: ARRAY
71199: PUSH
71200: LD_STRING |
71202: NONEQUAL
71203: IFFALSE 71207
// exit ;
71205: GO 71321
// _x := task [ 1 ] [ 2 ] ;
71207: LD_ADDR_VAR 0 11
71211: PUSH
71212: LD_VAR 0 14
71216: PUSH
71217: LD_INT 1
71219: ARRAY
71220: PUSH
71221: LD_INT 2
71223: ARRAY
71224: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
71225: LD_ADDR_VAR 0 12
71229: PUSH
71230: LD_VAR 0 14
71234: PUSH
71235: LD_INT 1
71237: ARRAY
71238: PUSH
71239: LD_INT 3
71241: ARRAY
71242: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
71243: LD_VAR 0 11
71247: PPUSH
71248: LD_VAR 0 12
71252: PPUSH
71253: CALL_OW 351
71257: NOT
71258: PUSH
71259: LD_VAR 0 11
71263: PPUSH
71264: LD_VAR 0 12
71268: PPUSH
71269: CALL_OW 554
71273: NOT
71274: OR
71275: IFFALSE 71309
// begin task := Delete ( task , 1 ) ;
71277: LD_ADDR_VAR 0 14
71281: PUSH
71282: LD_VAR 0 14
71286: PPUSH
71287: LD_INT 1
71289: PPUSH
71290: CALL_OW 3
71294: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
71295: LD_VAR 0 1
71299: PPUSH
71300: LD_VAR 0 14
71304: PPUSH
71305: CALL_OW 446
// end ; until not HasTask ( flame ) ;
71309: LD_VAR 0 1
71313: PPUSH
71314: CALL_OW 314
71318: NOT
71319: IFFALSE 71156
// end ;
71321: LD_VAR 0 5
71325: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
71326: LD_EXP 100
71330: NOT
71331: IFFALSE 71381
71333: GO 71335
71335: DISABLE
// begin initHack := true ;
71336: LD_ADDR_EXP 100
71340: PUSH
71341: LD_INT 1
71343: ST_TO_ADDR
// hackTanks := [ ] ;
71344: LD_ADDR_EXP 101
71348: PUSH
71349: EMPTY
71350: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
71351: LD_ADDR_EXP 102
71355: PUSH
71356: EMPTY
71357: ST_TO_ADDR
// hackLimit := 3 ;
71358: LD_ADDR_EXP 103
71362: PUSH
71363: LD_INT 3
71365: ST_TO_ADDR
// hackDist := 12 ;
71366: LD_ADDR_EXP 104
71370: PUSH
71371: LD_INT 12
71373: ST_TO_ADDR
// hackCounter := [ ] ;
71374: LD_ADDR_EXP 105
71378: PUSH
71379: EMPTY
71380: ST_TO_ADDR
// end ;
71381: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
71382: LD_EXP 100
71386: PUSH
71387: LD_INT 34
71389: PUSH
71390: LD_INT 99
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PPUSH
71397: CALL_OW 69
71401: AND
71402: IFFALSE 71655
71404: GO 71406
71406: DISABLE
71407: LD_INT 0
71409: PPUSH
71410: PPUSH
// begin enable ;
71411: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
71412: LD_ADDR_VAR 0 1
71416: PUSH
71417: LD_INT 34
71419: PUSH
71420: LD_INT 99
71422: PUSH
71423: EMPTY
71424: LIST
71425: LIST
71426: PPUSH
71427: CALL_OW 69
71431: PUSH
71432: FOR_IN
71433: IFFALSE 71653
// begin if not i in hackTanks then
71435: LD_VAR 0 1
71439: PUSH
71440: LD_EXP 101
71444: IN
71445: NOT
71446: IFFALSE 71529
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
71448: LD_ADDR_EXP 101
71452: PUSH
71453: LD_EXP 101
71457: PPUSH
71458: LD_EXP 101
71462: PUSH
71463: LD_INT 1
71465: PLUS
71466: PPUSH
71467: LD_VAR 0 1
71471: PPUSH
71472: CALL_OW 1
71476: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
71477: LD_ADDR_EXP 102
71481: PUSH
71482: LD_EXP 102
71486: PPUSH
71487: LD_EXP 102
71491: PUSH
71492: LD_INT 1
71494: PLUS
71495: PPUSH
71496: EMPTY
71497: PPUSH
71498: CALL_OW 1
71502: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
71503: LD_ADDR_EXP 105
71507: PUSH
71508: LD_EXP 105
71512: PPUSH
71513: LD_EXP 105
71517: PUSH
71518: LD_INT 1
71520: PLUS
71521: PPUSH
71522: EMPTY
71523: PPUSH
71524: CALL_OW 1
71528: ST_TO_ADDR
// end ; if not IsOk ( i ) then
71529: LD_VAR 0 1
71533: PPUSH
71534: CALL_OW 302
71538: NOT
71539: IFFALSE 71552
// begin HackUnlinkAll ( i ) ;
71541: LD_VAR 0 1
71545: PPUSH
71546: CALL 71658 0 1
// continue ;
71550: GO 71432
// end ; HackCheckCapturedStatus ( i ) ;
71552: LD_VAR 0 1
71556: PPUSH
71557: CALL 72101 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
71561: LD_ADDR_VAR 0 2
71565: PUSH
71566: LD_INT 81
71568: PUSH
71569: LD_VAR 0 1
71573: PPUSH
71574: CALL_OW 255
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 33
71585: PUSH
71586: LD_INT 3
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 91
71595: PUSH
71596: LD_VAR 0 1
71600: PUSH
71601: LD_EXP 104
71605: PUSH
71606: EMPTY
71607: LIST
71608: LIST
71609: LIST
71610: PUSH
71611: LD_INT 50
71613: PUSH
71614: EMPTY
71615: LIST
71616: PUSH
71617: EMPTY
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: PPUSH
71623: CALL_OW 69
71627: ST_TO_ADDR
// if not tmp then
71628: LD_VAR 0 2
71632: NOT
71633: IFFALSE 71637
// continue ;
71635: GO 71432
// HackLink ( i , tmp ) ;
71637: LD_VAR 0 1
71641: PPUSH
71642: LD_VAR 0 2
71646: PPUSH
71647: CALL 71794 0 2
// end ;
71651: GO 71432
71653: POP
71654: POP
// end ;
71655: PPOPN 2
71657: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
71658: LD_INT 0
71660: PPUSH
71661: PPUSH
71662: PPUSH
// if not hack in hackTanks then
71663: LD_VAR 0 1
71667: PUSH
71668: LD_EXP 101
71672: IN
71673: NOT
71674: IFFALSE 71678
// exit ;
71676: GO 71789
// index := GetElementIndex ( hackTanks , hack ) ;
71678: LD_ADDR_VAR 0 4
71682: PUSH
71683: LD_EXP 101
71687: PPUSH
71688: LD_VAR 0 1
71692: PPUSH
71693: CALL 14904 0 2
71697: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
71698: LD_EXP 102
71702: PUSH
71703: LD_VAR 0 4
71707: ARRAY
71708: IFFALSE 71789
// begin for i in hackTanksCaptured [ index ] do
71710: LD_ADDR_VAR 0 3
71714: PUSH
71715: LD_EXP 102
71719: PUSH
71720: LD_VAR 0 4
71724: ARRAY
71725: PUSH
71726: FOR_IN
71727: IFFALSE 71753
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
71729: LD_VAR 0 3
71733: PUSH
71734: LD_INT 1
71736: ARRAY
71737: PPUSH
71738: LD_VAR 0 3
71742: PUSH
71743: LD_INT 2
71745: ARRAY
71746: PPUSH
71747: CALL_OW 235
71751: GO 71726
71753: POP
71754: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
71755: LD_ADDR_EXP 102
71759: PUSH
71760: LD_EXP 102
71764: PPUSH
71765: LD_VAR 0 4
71769: PPUSH
71770: EMPTY
71771: PPUSH
71772: CALL_OW 1
71776: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
71777: LD_VAR 0 1
71781: PPUSH
71782: LD_INT 0
71784: PPUSH
71785: CALL_OW 505
// end ; end ;
71789: LD_VAR 0 2
71793: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
71794: LD_INT 0
71796: PPUSH
71797: PPUSH
71798: PPUSH
// if not hack in hackTanks or not vehicles then
71799: LD_VAR 0 1
71803: PUSH
71804: LD_EXP 101
71808: IN
71809: NOT
71810: PUSH
71811: LD_VAR 0 2
71815: NOT
71816: OR
71817: IFFALSE 71821
// exit ;
71819: GO 72096
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
71821: LD_ADDR_VAR 0 2
71825: PUSH
71826: LD_VAR 0 1
71830: PPUSH
71831: LD_VAR 0 2
71835: PPUSH
71836: LD_INT 1
71838: PPUSH
71839: LD_INT 1
71841: PPUSH
71842: CALL 15554 0 4
71846: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
71847: LD_ADDR_VAR 0 5
71851: PUSH
71852: LD_EXP 101
71856: PPUSH
71857: LD_VAR 0 1
71861: PPUSH
71862: CALL 14904 0 2
71866: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
71867: LD_EXP 102
71871: PUSH
71872: LD_VAR 0 5
71876: ARRAY
71877: PUSH
71878: LD_EXP 103
71882: LESS
71883: IFFALSE 72072
// begin for i := 1 to vehicles do
71885: LD_ADDR_VAR 0 4
71889: PUSH
71890: DOUBLE
71891: LD_INT 1
71893: DEC
71894: ST_TO_ADDR
71895: LD_VAR 0 2
71899: PUSH
71900: FOR_TO
71901: IFFALSE 72070
// begin if hackTanksCaptured [ index ] = hackLimit then
71903: LD_EXP 102
71907: PUSH
71908: LD_VAR 0 5
71912: ARRAY
71913: PUSH
71914: LD_EXP 103
71918: EQUAL
71919: IFFALSE 71923
// break ;
71921: GO 72070
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
71923: LD_ADDR_EXP 105
71927: PUSH
71928: LD_EXP 105
71932: PPUSH
71933: LD_VAR 0 5
71937: PPUSH
71938: LD_EXP 105
71942: PUSH
71943: LD_VAR 0 5
71947: ARRAY
71948: PUSH
71949: LD_INT 1
71951: PLUS
71952: PPUSH
71953: CALL_OW 1
71957: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
71958: LD_ADDR_EXP 102
71962: PUSH
71963: LD_EXP 102
71967: PPUSH
71968: LD_VAR 0 5
71972: PUSH
71973: LD_EXP 102
71977: PUSH
71978: LD_VAR 0 5
71982: ARRAY
71983: PUSH
71984: LD_INT 1
71986: PLUS
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PPUSH
71992: LD_VAR 0 2
71996: PUSH
71997: LD_VAR 0 4
72001: ARRAY
72002: PUSH
72003: LD_VAR 0 2
72007: PUSH
72008: LD_VAR 0 4
72012: ARRAY
72013: PPUSH
72014: CALL_OW 255
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PPUSH
72023: CALL 15119 0 3
72027: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
72028: LD_VAR 0 2
72032: PUSH
72033: LD_VAR 0 4
72037: ARRAY
72038: PPUSH
72039: LD_VAR 0 1
72043: PPUSH
72044: CALL_OW 255
72048: PPUSH
72049: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
72053: LD_VAR 0 2
72057: PUSH
72058: LD_VAR 0 4
72062: ARRAY
72063: PPUSH
72064: CALL_OW 141
// end ;
72068: GO 71900
72070: POP
72071: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72072: LD_VAR 0 1
72076: PPUSH
72077: LD_EXP 102
72081: PUSH
72082: LD_VAR 0 5
72086: ARRAY
72087: PUSH
72088: LD_INT 0
72090: PLUS
72091: PPUSH
72092: CALL_OW 505
// end ;
72096: LD_VAR 0 3
72100: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
72101: LD_INT 0
72103: PPUSH
72104: PPUSH
72105: PPUSH
72106: PPUSH
// if not hack in hackTanks then
72107: LD_VAR 0 1
72111: PUSH
72112: LD_EXP 101
72116: IN
72117: NOT
72118: IFFALSE 72122
// exit ;
72120: GO 72362
// index := GetElementIndex ( hackTanks , hack ) ;
72122: LD_ADDR_VAR 0 4
72126: PUSH
72127: LD_EXP 101
72131: PPUSH
72132: LD_VAR 0 1
72136: PPUSH
72137: CALL 14904 0 2
72141: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
72142: LD_ADDR_VAR 0 3
72146: PUSH
72147: DOUBLE
72148: LD_EXP 102
72152: PUSH
72153: LD_VAR 0 4
72157: ARRAY
72158: INC
72159: ST_TO_ADDR
72160: LD_INT 1
72162: PUSH
72163: FOR_DOWNTO
72164: IFFALSE 72336
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
72166: LD_ADDR_VAR 0 5
72170: PUSH
72171: LD_EXP 102
72175: PUSH
72176: LD_VAR 0 4
72180: ARRAY
72181: PUSH
72182: LD_VAR 0 3
72186: ARRAY
72187: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
72188: LD_VAR 0 5
72192: PUSH
72193: LD_INT 1
72195: ARRAY
72196: PPUSH
72197: CALL_OW 302
72201: NOT
72202: PUSH
72203: LD_VAR 0 5
72207: PUSH
72208: LD_INT 1
72210: ARRAY
72211: PPUSH
72212: CALL_OW 255
72216: PUSH
72217: LD_VAR 0 1
72221: PPUSH
72222: CALL_OW 255
72226: NONEQUAL
72227: OR
72228: IFFALSE 72334
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
72230: LD_VAR 0 5
72234: PUSH
72235: LD_INT 1
72237: ARRAY
72238: PPUSH
72239: CALL_OW 305
72243: PUSH
72244: LD_VAR 0 5
72248: PUSH
72249: LD_INT 1
72251: ARRAY
72252: PPUSH
72253: CALL_OW 255
72257: PUSH
72258: LD_VAR 0 1
72262: PPUSH
72263: CALL_OW 255
72267: EQUAL
72268: AND
72269: IFFALSE 72293
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
72271: LD_VAR 0 5
72275: PUSH
72276: LD_INT 1
72278: ARRAY
72279: PPUSH
72280: LD_VAR 0 5
72284: PUSH
72285: LD_INT 2
72287: ARRAY
72288: PPUSH
72289: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
72293: LD_ADDR_EXP 102
72297: PUSH
72298: LD_EXP 102
72302: PPUSH
72303: LD_VAR 0 4
72307: PPUSH
72308: LD_EXP 102
72312: PUSH
72313: LD_VAR 0 4
72317: ARRAY
72318: PPUSH
72319: LD_VAR 0 3
72323: PPUSH
72324: CALL_OW 3
72328: PPUSH
72329: CALL_OW 1
72333: ST_TO_ADDR
// end ; end ;
72334: GO 72163
72336: POP
72337: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
72338: LD_VAR 0 1
72342: PPUSH
72343: LD_EXP 102
72347: PUSH
72348: LD_VAR 0 4
72352: ARRAY
72353: PUSH
72354: LD_INT 0
72356: PLUS
72357: PPUSH
72358: CALL_OW 505
// end ;
72362: LD_VAR 0 2
72366: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
72367: LD_INT 0
72369: PPUSH
72370: PPUSH
72371: PPUSH
72372: PPUSH
// if not hack in hackTanks then
72373: LD_VAR 0 1
72377: PUSH
72378: LD_EXP 101
72382: IN
72383: NOT
72384: IFFALSE 72388
// exit ;
72386: GO 72473
// index := GetElementIndex ( hackTanks , hack ) ;
72388: LD_ADDR_VAR 0 5
72392: PUSH
72393: LD_EXP 101
72397: PPUSH
72398: LD_VAR 0 1
72402: PPUSH
72403: CALL 14904 0 2
72407: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
72408: LD_ADDR_VAR 0 4
72412: PUSH
72413: DOUBLE
72414: LD_INT 1
72416: DEC
72417: ST_TO_ADDR
72418: LD_EXP 102
72422: PUSH
72423: LD_VAR 0 5
72427: ARRAY
72428: PUSH
72429: FOR_TO
72430: IFFALSE 72471
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
72432: LD_EXP 102
72436: PUSH
72437: LD_VAR 0 5
72441: ARRAY
72442: PUSH
72443: LD_VAR 0 4
72447: ARRAY
72448: PUSH
72449: LD_INT 1
72451: ARRAY
72452: PUSH
72453: LD_VAR 0 2
72457: EQUAL
72458: IFFALSE 72469
// KillUnit ( vehicle ) ;
72460: LD_VAR 0 2
72464: PPUSH
72465: CALL_OW 66
72469: GO 72429
72471: POP
72472: POP
// end ;
72473: LD_VAR 0 3
72477: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
72478: LD_EXP 106
72482: NOT
72483: IFFALSE 72518
72485: GO 72487
72487: DISABLE
// begin initMiner := true ;
72488: LD_ADDR_EXP 106
72492: PUSH
72493: LD_INT 1
72495: ST_TO_ADDR
// minersList := [ ] ;
72496: LD_ADDR_EXP 107
72500: PUSH
72501: EMPTY
72502: ST_TO_ADDR
// minerMinesList := [ ] ;
72503: LD_ADDR_EXP 108
72507: PUSH
72508: EMPTY
72509: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
72510: LD_ADDR_EXP 109
72514: PUSH
72515: LD_INT 5
72517: ST_TO_ADDR
// end ;
72518: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
72519: LD_EXP 106
72523: PUSH
72524: LD_INT 34
72526: PUSH
72527: LD_INT 81
72529: PUSH
72530: EMPTY
72531: LIST
72532: LIST
72533: PPUSH
72534: CALL_OW 69
72538: AND
72539: IFFALSE 73000
72541: GO 72543
72543: DISABLE
72544: LD_INT 0
72546: PPUSH
72547: PPUSH
72548: PPUSH
72549: PPUSH
// begin enable ;
72550: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
72551: LD_ADDR_VAR 0 1
72555: PUSH
72556: LD_INT 34
72558: PUSH
72559: LD_INT 81
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PPUSH
72566: CALL_OW 69
72570: PUSH
72571: FOR_IN
72572: IFFALSE 72644
// begin if not i in minersList then
72574: LD_VAR 0 1
72578: PUSH
72579: LD_EXP 107
72583: IN
72584: NOT
72585: IFFALSE 72642
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
72587: LD_ADDR_EXP 107
72591: PUSH
72592: LD_EXP 107
72596: PPUSH
72597: LD_EXP 107
72601: PUSH
72602: LD_INT 1
72604: PLUS
72605: PPUSH
72606: LD_VAR 0 1
72610: PPUSH
72611: CALL_OW 1
72615: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
72616: LD_ADDR_EXP 108
72620: PUSH
72621: LD_EXP 108
72625: PPUSH
72626: LD_EXP 108
72630: PUSH
72631: LD_INT 1
72633: PLUS
72634: PPUSH
72635: EMPTY
72636: PPUSH
72637: CALL_OW 1
72641: ST_TO_ADDR
// end end ;
72642: GO 72571
72644: POP
72645: POP
// for i := minerMinesList downto 1 do
72646: LD_ADDR_VAR 0 1
72650: PUSH
72651: DOUBLE
72652: LD_EXP 108
72656: INC
72657: ST_TO_ADDR
72658: LD_INT 1
72660: PUSH
72661: FOR_DOWNTO
72662: IFFALSE 72998
// begin if IsLive ( minersList [ i ] ) then
72664: LD_EXP 107
72668: PUSH
72669: LD_VAR 0 1
72673: ARRAY
72674: PPUSH
72675: CALL_OW 300
72679: IFFALSE 72707
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
72681: LD_EXP 107
72685: PUSH
72686: LD_VAR 0 1
72690: ARRAY
72691: PPUSH
72692: LD_EXP 108
72696: PUSH
72697: LD_VAR 0 1
72701: ARRAY
72702: PPUSH
72703: CALL_OW 505
// if not minerMinesList [ i ] then
72707: LD_EXP 108
72711: PUSH
72712: LD_VAR 0 1
72716: ARRAY
72717: NOT
72718: IFFALSE 72722
// continue ;
72720: GO 72661
// for j := minerMinesList [ i ] downto 1 do
72722: LD_ADDR_VAR 0 2
72726: PUSH
72727: DOUBLE
72728: LD_EXP 108
72732: PUSH
72733: LD_VAR 0 1
72737: ARRAY
72738: INC
72739: ST_TO_ADDR
72740: LD_INT 1
72742: PUSH
72743: FOR_DOWNTO
72744: IFFALSE 72994
// begin side := GetSide ( minersList [ i ] ) ;
72746: LD_ADDR_VAR 0 3
72750: PUSH
72751: LD_EXP 107
72755: PUSH
72756: LD_VAR 0 1
72760: ARRAY
72761: PPUSH
72762: CALL_OW 255
72766: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
72767: LD_ADDR_VAR 0 4
72771: PUSH
72772: LD_EXP 108
72776: PUSH
72777: LD_VAR 0 1
72781: ARRAY
72782: PUSH
72783: LD_VAR 0 2
72787: ARRAY
72788: PUSH
72789: LD_INT 1
72791: ARRAY
72792: PPUSH
72793: LD_EXP 108
72797: PUSH
72798: LD_VAR 0 1
72802: ARRAY
72803: PUSH
72804: LD_VAR 0 2
72808: ARRAY
72809: PUSH
72810: LD_INT 2
72812: ARRAY
72813: PPUSH
72814: CALL_OW 428
72818: ST_TO_ADDR
// if not tmp then
72819: LD_VAR 0 4
72823: NOT
72824: IFFALSE 72828
// continue ;
72826: GO 72743
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
72828: LD_VAR 0 4
72832: PUSH
72833: LD_INT 81
72835: PUSH
72836: LD_VAR 0 3
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PPUSH
72845: CALL_OW 69
72849: IN
72850: PUSH
72851: LD_EXP 108
72855: PUSH
72856: LD_VAR 0 1
72860: ARRAY
72861: PUSH
72862: LD_VAR 0 2
72866: ARRAY
72867: PUSH
72868: LD_INT 1
72870: ARRAY
72871: PPUSH
72872: LD_EXP 108
72876: PUSH
72877: LD_VAR 0 1
72881: ARRAY
72882: PUSH
72883: LD_VAR 0 2
72887: ARRAY
72888: PUSH
72889: LD_INT 2
72891: ARRAY
72892: PPUSH
72893: CALL_OW 458
72897: AND
72898: IFFALSE 72992
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
72900: LD_EXP 108
72904: PUSH
72905: LD_VAR 0 1
72909: ARRAY
72910: PUSH
72911: LD_VAR 0 2
72915: ARRAY
72916: PUSH
72917: LD_INT 1
72919: ARRAY
72920: PPUSH
72921: LD_EXP 108
72925: PUSH
72926: LD_VAR 0 1
72930: ARRAY
72931: PUSH
72932: LD_VAR 0 2
72936: ARRAY
72937: PUSH
72938: LD_INT 2
72940: ARRAY
72941: PPUSH
72942: LD_VAR 0 3
72946: PPUSH
72947: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
72951: LD_ADDR_EXP 108
72955: PUSH
72956: LD_EXP 108
72960: PPUSH
72961: LD_VAR 0 1
72965: PPUSH
72966: LD_EXP 108
72970: PUSH
72971: LD_VAR 0 1
72975: ARRAY
72976: PPUSH
72977: LD_VAR 0 2
72981: PPUSH
72982: CALL_OW 3
72986: PPUSH
72987: CALL_OW 1
72991: ST_TO_ADDR
// end ; end ;
72992: GO 72743
72994: POP
72995: POP
// end ;
72996: GO 72661
72998: POP
72999: POP
// end ;
73000: PPOPN 4
73002: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
73003: LD_INT 0
73005: PPUSH
73006: PPUSH
// result := false ;
73007: LD_ADDR_VAR 0 4
73011: PUSH
73012: LD_INT 0
73014: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
73015: LD_VAR 0 1
73019: PPUSH
73020: CALL_OW 264
73024: PUSH
73025: LD_INT 81
73027: EQUAL
73028: NOT
73029: IFFALSE 73033
// exit ;
73031: GO 73273
// index := GetElementIndex ( minersList , unit ) ;
73033: LD_ADDR_VAR 0 5
73037: PUSH
73038: LD_EXP 107
73042: PPUSH
73043: LD_VAR 0 1
73047: PPUSH
73048: CALL 14904 0 2
73052: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
73053: LD_EXP 108
73057: PUSH
73058: LD_VAR 0 5
73062: ARRAY
73063: PUSH
73064: LD_EXP 109
73068: GREATEREQUAL
73069: IFFALSE 73073
// exit ;
73071: GO 73273
// ComMoveXY ( unit , x , y ) ;
73073: LD_VAR 0 1
73077: PPUSH
73078: LD_VAR 0 2
73082: PPUSH
73083: LD_VAR 0 3
73087: PPUSH
73088: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
73092: LD_INT 35
73094: PPUSH
73095: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
73099: LD_VAR 0 1
73103: PPUSH
73104: LD_VAR 0 2
73108: PPUSH
73109: LD_VAR 0 3
73113: PPUSH
73114: CALL 46737 0 3
73118: NOT
73119: PUSH
73120: LD_VAR 0 1
73124: PPUSH
73125: CALL_OW 314
73129: AND
73130: IFFALSE 73134
// exit ;
73132: GO 73273
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
73134: LD_VAR 0 2
73138: PPUSH
73139: LD_VAR 0 3
73143: PPUSH
73144: CALL_OW 428
73148: PUSH
73149: LD_VAR 0 1
73153: EQUAL
73154: PUSH
73155: LD_VAR 0 1
73159: PPUSH
73160: CALL_OW 314
73164: NOT
73165: AND
73166: IFFALSE 73092
// PlaySoundXY ( x , y , PlantMine ) ;
73168: LD_VAR 0 2
73172: PPUSH
73173: LD_VAR 0 3
73177: PPUSH
73178: LD_STRING PlantMine
73180: PPUSH
73181: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
73185: LD_VAR 0 2
73189: PPUSH
73190: LD_VAR 0 3
73194: PPUSH
73195: LD_VAR 0 1
73199: PPUSH
73200: CALL_OW 255
73204: PPUSH
73205: LD_INT 0
73207: PPUSH
73208: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
73212: LD_ADDR_EXP 108
73216: PUSH
73217: LD_EXP 108
73221: PPUSH
73222: LD_VAR 0 5
73226: PUSH
73227: LD_EXP 108
73231: PUSH
73232: LD_VAR 0 5
73236: ARRAY
73237: PUSH
73238: LD_INT 1
73240: PLUS
73241: PUSH
73242: EMPTY
73243: LIST
73244: LIST
73245: PPUSH
73246: LD_VAR 0 2
73250: PUSH
73251: LD_VAR 0 3
73255: PUSH
73256: EMPTY
73257: LIST
73258: LIST
73259: PPUSH
73260: CALL 15119 0 3
73264: ST_TO_ADDR
// result := true ;
73265: LD_ADDR_VAR 0 4
73269: PUSH
73270: LD_INT 1
73272: ST_TO_ADDR
// end ;
73273: LD_VAR 0 4
73277: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
73278: LD_INT 0
73280: PPUSH
73281: PPUSH
73282: PPUSH
// if not unit in minersList then
73283: LD_VAR 0 1
73287: PUSH
73288: LD_EXP 107
73292: IN
73293: NOT
73294: IFFALSE 73298
// exit ;
73296: GO 73690
// index := GetElementIndex ( minersList , unit ) ;
73298: LD_ADDR_VAR 0 6
73302: PUSH
73303: LD_EXP 107
73307: PPUSH
73308: LD_VAR 0 1
73312: PPUSH
73313: CALL 14904 0 2
73317: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
73318: LD_ADDR_VAR 0 5
73322: PUSH
73323: DOUBLE
73324: LD_EXP 108
73328: PUSH
73329: LD_VAR 0 6
73333: ARRAY
73334: INC
73335: ST_TO_ADDR
73336: LD_INT 1
73338: PUSH
73339: FOR_DOWNTO
73340: IFFALSE 73501
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
73342: LD_EXP 108
73346: PUSH
73347: LD_VAR 0 6
73351: ARRAY
73352: PUSH
73353: LD_VAR 0 5
73357: ARRAY
73358: PUSH
73359: LD_INT 1
73361: ARRAY
73362: PUSH
73363: LD_VAR 0 2
73367: EQUAL
73368: PUSH
73369: LD_EXP 108
73373: PUSH
73374: LD_VAR 0 6
73378: ARRAY
73379: PUSH
73380: LD_VAR 0 5
73384: ARRAY
73385: PUSH
73386: LD_INT 2
73388: ARRAY
73389: PUSH
73390: LD_VAR 0 3
73394: EQUAL
73395: AND
73396: IFFALSE 73499
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73398: LD_EXP 108
73402: PUSH
73403: LD_VAR 0 6
73407: ARRAY
73408: PUSH
73409: LD_VAR 0 5
73413: ARRAY
73414: PUSH
73415: LD_INT 1
73417: ARRAY
73418: PPUSH
73419: LD_EXP 108
73423: PUSH
73424: LD_VAR 0 6
73428: ARRAY
73429: PUSH
73430: LD_VAR 0 5
73434: ARRAY
73435: PUSH
73436: LD_INT 2
73438: ARRAY
73439: PPUSH
73440: LD_VAR 0 1
73444: PPUSH
73445: CALL_OW 255
73449: PPUSH
73450: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73454: LD_ADDR_EXP 108
73458: PUSH
73459: LD_EXP 108
73463: PPUSH
73464: LD_VAR 0 6
73468: PPUSH
73469: LD_EXP 108
73473: PUSH
73474: LD_VAR 0 6
73478: ARRAY
73479: PPUSH
73480: LD_VAR 0 5
73484: PPUSH
73485: CALL_OW 3
73489: PPUSH
73490: CALL_OW 1
73494: ST_TO_ADDR
// exit ;
73495: POP
73496: POP
73497: GO 73690
// end ; end ;
73499: GO 73339
73501: POP
73502: POP
// for i := minerMinesList [ index ] downto 1 do
73503: LD_ADDR_VAR 0 5
73507: PUSH
73508: DOUBLE
73509: LD_EXP 108
73513: PUSH
73514: LD_VAR 0 6
73518: ARRAY
73519: INC
73520: ST_TO_ADDR
73521: LD_INT 1
73523: PUSH
73524: FOR_DOWNTO
73525: IFFALSE 73688
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
73527: LD_EXP 108
73531: PUSH
73532: LD_VAR 0 6
73536: ARRAY
73537: PUSH
73538: LD_VAR 0 5
73542: ARRAY
73543: PUSH
73544: LD_INT 1
73546: ARRAY
73547: PPUSH
73548: LD_EXP 108
73552: PUSH
73553: LD_VAR 0 6
73557: ARRAY
73558: PUSH
73559: LD_VAR 0 5
73563: ARRAY
73564: PUSH
73565: LD_INT 2
73567: ARRAY
73568: PPUSH
73569: LD_VAR 0 2
73573: PPUSH
73574: LD_VAR 0 3
73578: PPUSH
73579: CALL_OW 298
73583: PUSH
73584: LD_INT 6
73586: LESS
73587: IFFALSE 73686
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
73589: LD_EXP 108
73593: PUSH
73594: LD_VAR 0 6
73598: ARRAY
73599: PUSH
73600: LD_VAR 0 5
73604: ARRAY
73605: PUSH
73606: LD_INT 1
73608: ARRAY
73609: PPUSH
73610: LD_EXP 108
73614: PUSH
73615: LD_VAR 0 6
73619: ARRAY
73620: PUSH
73621: LD_VAR 0 5
73625: ARRAY
73626: PUSH
73627: LD_INT 2
73629: ARRAY
73630: PPUSH
73631: LD_VAR 0 1
73635: PPUSH
73636: CALL_OW 255
73640: PPUSH
73641: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
73645: LD_ADDR_EXP 108
73649: PUSH
73650: LD_EXP 108
73654: PPUSH
73655: LD_VAR 0 6
73659: PPUSH
73660: LD_EXP 108
73664: PUSH
73665: LD_VAR 0 6
73669: ARRAY
73670: PPUSH
73671: LD_VAR 0 5
73675: PPUSH
73676: CALL_OW 3
73680: PPUSH
73681: CALL_OW 1
73685: ST_TO_ADDR
// end ; end ;
73686: GO 73524
73688: POP
73689: POP
// end ;
73690: LD_VAR 0 4
73694: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
73695: LD_INT 0
73697: PPUSH
73698: PPUSH
73699: PPUSH
73700: PPUSH
73701: PPUSH
73702: PPUSH
73703: PPUSH
73704: PPUSH
73705: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
73706: LD_VAR 0 1
73710: PPUSH
73711: CALL_OW 264
73715: PUSH
73716: LD_INT 81
73718: EQUAL
73719: NOT
73720: PUSH
73721: LD_VAR 0 1
73725: PUSH
73726: LD_EXP 107
73730: IN
73731: NOT
73732: OR
73733: IFFALSE 73737
// exit ;
73735: GO 74059
// index := GetElementIndex ( minersList , unit ) ;
73737: LD_ADDR_VAR 0 6
73741: PUSH
73742: LD_EXP 107
73746: PPUSH
73747: LD_VAR 0 1
73751: PPUSH
73752: CALL 14904 0 2
73756: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
73757: LD_ADDR_VAR 0 8
73761: PUSH
73762: LD_EXP 109
73766: PUSH
73767: LD_EXP 108
73771: PUSH
73772: LD_VAR 0 6
73776: ARRAY
73777: MINUS
73778: ST_TO_ADDR
// if not minesFreeAmount then
73779: LD_VAR 0 8
73783: NOT
73784: IFFALSE 73788
// exit ;
73786: GO 74059
// tmp := [ ] ;
73788: LD_ADDR_VAR 0 7
73792: PUSH
73793: EMPTY
73794: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
73795: LD_ADDR_VAR 0 5
73799: PUSH
73800: DOUBLE
73801: LD_INT 1
73803: DEC
73804: ST_TO_ADDR
73805: LD_VAR 0 8
73809: PUSH
73810: FOR_TO
73811: IFFALSE 74006
// begin _d := rand ( 0 , 5 ) ;
73813: LD_ADDR_VAR 0 11
73817: PUSH
73818: LD_INT 0
73820: PPUSH
73821: LD_INT 5
73823: PPUSH
73824: CALL_OW 12
73828: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
73829: LD_ADDR_VAR 0 12
73833: PUSH
73834: LD_INT 2
73836: PPUSH
73837: LD_INT 6
73839: PPUSH
73840: CALL_OW 12
73844: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
73845: LD_ADDR_VAR 0 9
73849: PUSH
73850: LD_VAR 0 2
73854: PPUSH
73855: LD_VAR 0 11
73859: PPUSH
73860: LD_VAR 0 12
73864: PPUSH
73865: CALL_OW 272
73869: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
73870: LD_ADDR_VAR 0 10
73874: PUSH
73875: LD_VAR 0 3
73879: PPUSH
73880: LD_VAR 0 11
73884: PPUSH
73885: LD_VAR 0 12
73889: PPUSH
73890: CALL_OW 273
73894: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
73895: LD_VAR 0 9
73899: PPUSH
73900: LD_VAR 0 10
73904: PPUSH
73905: CALL_OW 488
73909: PUSH
73910: LD_VAR 0 9
73914: PUSH
73915: LD_VAR 0 10
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: PUSH
73924: LD_VAR 0 7
73928: IN
73929: NOT
73930: AND
73931: PUSH
73932: LD_VAR 0 9
73936: PPUSH
73937: LD_VAR 0 10
73941: PPUSH
73942: CALL_OW 458
73946: NOT
73947: AND
73948: IFFALSE 73990
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
73950: LD_ADDR_VAR 0 7
73954: PUSH
73955: LD_VAR 0 7
73959: PPUSH
73960: LD_VAR 0 7
73964: PUSH
73965: LD_INT 1
73967: PLUS
73968: PPUSH
73969: LD_VAR 0 9
73973: PUSH
73974: LD_VAR 0 10
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PPUSH
73983: CALL_OW 1
73987: ST_TO_ADDR
73988: GO 74004
// i := i - 1 ;
73990: LD_ADDR_VAR 0 5
73994: PUSH
73995: LD_VAR 0 5
73999: PUSH
74000: LD_INT 1
74002: MINUS
74003: ST_TO_ADDR
// end ;
74004: GO 73810
74006: POP
74007: POP
// for i in tmp do
74008: LD_ADDR_VAR 0 5
74012: PUSH
74013: LD_VAR 0 7
74017: PUSH
74018: FOR_IN
74019: IFFALSE 74057
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
74021: LD_VAR 0 1
74025: PPUSH
74026: LD_VAR 0 5
74030: PUSH
74031: LD_INT 1
74033: ARRAY
74034: PPUSH
74035: LD_VAR 0 5
74039: PUSH
74040: LD_INT 2
74042: ARRAY
74043: PPUSH
74044: CALL 73003 0 3
74048: NOT
74049: IFFALSE 74055
// exit ;
74051: POP
74052: POP
74053: GO 74059
74055: GO 74018
74057: POP
74058: POP
// end ;
74059: LD_VAR 0 4
74063: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
74064: LD_INT 0
74066: PPUSH
74067: PPUSH
74068: PPUSH
74069: PPUSH
74070: PPUSH
74071: PPUSH
74072: PPUSH
74073: PPUSH
74074: PPUSH
// if GetClass ( unit ) <> class_sniper then
74075: LD_VAR 0 1
74079: PPUSH
74080: CALL_OW 257
74084: PUSH
74085: LD_INT 5
74087: NONEQUAL
74088: IFFALSE 74092
// exit ;
74090: GO 74558
// dist := 8 ;
74092: LD_ADDR_VAR 0 5
74096: PUSH
74097: LD_INT 8
74099: ST_TO_ADDR
// viewRange := 12 ;
74100: LD_ADDR_VAR 0 8
74104: PUSH
74105: LD_INT 12
74107: ST_TO_ADDR
// side := GetSide ( unit ) ;
74108: LD_ADDR_VAR 0 6
74112: PUSH
74113: LD_VAR 0 1
74117: PPUSH
74118: CALL_OW 255
74122: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
74123: LD_INT 61
74125: PPUSH
74126: LD_VAR 0 6
74130: PPUSH
74131: CALL_OW 321
74135: PUSH
74136: LD_INT 2
74138: EQUAL
74139: IFFALSE 74149
// viewRange := 16 ;
74141: LD_ADDR_VAR 0 8
74145: PUSH
74146: LD_INT 16
74148: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
74149: LD_VAR 0 1
74153: PPUSH
74154: LD_VAR 0 2
74158: PPUSH
74159: LD_VAR 0 3
74163: PPUSH
74164: CALL_OW 297
74168: PUSH
74169: LD_VAR 0 5
74173: GREATER
74174: IFFALSE 74253
// begin ComMoveXY ( unit , x , y ) ;
74176: LD_VAR 0 1
74180: PPUSH
74181: LD_VAR 0 2
74185: PPUSH
74186: LD_VAR 0 3
74190: PPUSH
74191: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74195: LD_INT 35
74197: PPUSH
74198: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
74202: LD_VAR 0 1
74206: PPUSH
74207: LD_VAR 0 2
74211: PPUSH
74212: LD_VAR 0 3
74216: PPUSH
74217: CALL 46737 0 3
74221: NOT
74222: IFFALSE 74226
// exit ;
74224: GO 74558
// until GetDistUnitXY ( unit , x , y ) < dist ;
74226: LD_VAR 0 1
74230: PPUSH
74231: LD_VAR 0 2
74235: PPUSH
74236: LD_VAR 0 3
74240: PPUSH
74241: CALL_OW 297
74245: PUSH
74246: LD_VAR 0 5
74250: LESS
74251: IFFALSE 74195
// end ; ComTurnXY ( unit , x , y ) ;
74253: LD_VAR 0 1
74257: PPUSH
74258: LD_VAR 0 2
74262: PPUSH
74263: LD_VAR 0 3
74267: PPUSH
74268: CALL_OW 118
// repeat if Multiplayer then
74272: LD_OWVAR 4
74276: IFFALSE 74287
// wait ( 35 ) else
74278: LD_INT 35
74280: PPUSH
74281: CALL_OW 67
74285: GO 74294
// wait ( 5 ) ;
74287: LD_INT 5
74289: PPUSH
74290: CALL_OW 67
// _d := GetDir ( unit ) ;
74294: LD_ADDR_VAR 0 11
74298: PUSH
74299: LD_VAR 0 1
74303: PPUSH
74304: CALL_OW 254
74308: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
74309: LD_ADDR_VAR 0 7
74313: PUSH
74314: LD_VAR 0 1
74318: PPUSH
74319: CALL_OW 250
74323: PPUSH
74324: LD_VAR 0 1
74328: PPUSH
74329: CALL_OW 251
74333: PPUSH
74334: LD_VAR 0 2
74338: PPUSH
74339: LD_VAR 0 3
74343: PPUSH
74344: CALL 49345 0 4
74348: ST_TO_ADDR
// until dir = _d ;
74349: LD_VAR 0 7
74353: PUSH
74354: LD_VAR 0 11
74358: EQUAL
74359: IFFALSE 74272
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
74361: LD_ADDR_VAR 0 9
74365: PUSH
74366: LD_VAR 0 1
74370: PPUSH
74371: CALL_OW 250
74375: PPUSH
74376: LD_VAR 0 7
74380: PPUSH
74381: LD_VAR 0 5
74385: PPUSH
74386: CALL_OW 272
74390: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
74391: LD_ADDR_VAR 0 10
74395: PUSH
74396: LD_VAR 0 1
74400: PPUSH
74401: CALL_OW 251
74405: PPUSH
74406: LD_VAR 0 7
74410: PPUSH
74411: LD_VAR 0 5
74415: PPUSH
74416: CALL_OW 273
74420: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74421: LD_VAR 0 9
74425: PPUSH
74426: LD_VAR 0 10
74430: PPUSH
74431: CALL_OW 488
74435: NOT
74436: IFFALSE 74440
// exit ;
74438: GO 74558
// ComAnimCustom ( unit , 1 ) ;
74440: LD_VAR 0 1
74444: PPUSH
74445: LD_INT 1
74447: PPUSH
74448: CALL_OW 592
// p := 0 ;
74452: LD_ADDR_VAR 0 12
74456: PUSH
74457: LD_INT 0
74459: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
74460: LD_VAR 0 9
74464: PPUSH
74465: LD_VAR 0 10
74469: PPUSH
74470: LD_VAR 0 6
74474: PPUSH
74475: LD_VAR 0 8
74479: PPUSH
74480: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
74484: LD_INT 35
74486: PPUSH
74487: CALL_OW 67
// p := Inc ( p ) ;
74491: LD_ADDR_VAR 0 12
74495: PUSH
74496: LD_VAR 0 12
74500: PPUSH
74501: CALL 49301 0 1
74505: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
74506: LD_VAR 0 12
74510: PUSH
74511: LD_INT 3
74513: EQUAL
74514: PUSH
74515: LD_VAR 0 1
74519: PPUSH
74520: CALL_OW 302
74524: NOT
74525: OR
74526: PUSH
74527: LD_VAR 0 1
74531: PPUSH
74532: CALL_OW 301
74536: OR
74537: IFFALSE 74484
// RemoveSeeing ( _x , _y , side ) ;
74539: LD_VAR 0 9
74543: PPUSH
74544: LD_VAR 0 10
74548: PPUSH
74549: LD_VAR 0 6
74553: PPUSH
74554: CALL_OW 331
// end ;
74558: LD_VAR 0 4
74562: RET
