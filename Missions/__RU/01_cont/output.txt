// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12582 0 0
// PrepareAmericans ;
  28: CALL 12155 0 0
// PrepareNature ;
  32: CALL 13286 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 34
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 35
 454: PUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_INT 6
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 37
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 38
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 39
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 40
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 32
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 37
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 37
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 46
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 46
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 46
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 46
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 46
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 46
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// end ;
1016: LD_VAR 0 1
1020: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1021: LD_EXP 46
1025: PPUSH
1026: LD_INT 74
1028: PPUSH
1029: LD_INT 88
1031: PPUSH
1032: CALL_OW 297
1036: PUSH
1037: LD_INT 5
1039: LESS
1040: PUSH
1041: LD_EXP 3
1045: AND
1046: IFFALSE 1071
1048: GO 1050
1050: DISABLE
// begin spotWaterfall = true ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1059: LD_EXP 46
1063: PPUSH
1064: LD_STRING DWaterfall-Bur-1
1066: PPUSH
1067: CALL_OW 88
// end ;
1071: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1072: LD_EXP 46
1076: PPUSH
1077: LD_INT 130
1079: PPUSH
1080: LD_INT 96
1082: PPUSH
1083: CALL_OW 297
1087: PUSH
1088: LD_INT 5
1090: LESS
1091: PUSH
1092: LD_EXP 3
1096: AND
1097: IFFALSE 1114
1099: GO 1101
1101: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1102: LD_EXP 46
1106: PPUSH
1107: LD_STRING DCorpse-Bur-1
1109: PPUSH
1110: CALL_OW 88
1114: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1115: LD_EXP 4
1119: NOT
1120: IFFALSE 1214
1122: GO 1124
1124: DISABLE
1125: LD_INT 0
1127: PPUSH
// begin enable ;
1128: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1129: LD_ADDR_VAR 0 1
1133: PUSH
1134: LD_INT 22
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 25
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PPUSH
1158: CALL_OW 69
1162: PUSH
1163: FOR_IN
1164: IFFALSE 1212
// if GetDistUnits ( apeman , Burlak ) < 7 then
1166: LD_VAR 0 1
1170: PPUSH
1171: LD_EXP 46
1175: PPUSH
1176: CALL_OW 296
1180: PUSH
1181: LD_INT 7
1183: LESS
1184: IFFALSE 1210
// begin apemansContact = true ;
1186: LD_ADDR_EXP 4
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1194: LD_EXP 46
1198: PPUSH
1199: LD_STRING D2-Bur-1
1201: PPUSH
1202: CALL_OW 88
// exit ;
1206: POP
1207: POP
1208: GO 1214
// end ;
1210: GO 1163
1212: POP
1213: POP
// end ;
1214: PPOPN 1
1216: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1217: LD_EXP 5
1221: NOT
1222: IFFALSE 1338
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
// begin enable ;
1231: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 0
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 25
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 69
1265: PUSH
1266: FOR_IN
1267: IFFALSE 1336
// if Attacks ( apeman ) then
1269: LD_VAR 0 2
1273: PPUSH
1274: CALL_OW 320
1278: IFFALSE 1334
// if GetSide ( Attacks ( apeman ) ) = 3 then
1280: LD_VAR 0 2
1284: PPUSH
1285: CALL_OW 320
1289: PPUSH
1290: CALL_OW 255
1294: PUSH
1295: LD_INT 3
1297: EQUAL
1298: IFFALSE 1334
// begin attackedByApeman = true ;
1300: LD_ADDR_EXP 5
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1308: LD_ADDR_EXP 8
1312: PUSH
1313: LD_VAR 0 2
1317: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1318: LD_EXP 46
1322: PPUSH
1323: LD_STRING D2-Bur-1a
1325: PPUSH
1326: CALL_OW 88
// exit ;
1330: POP
1331: POP
1332: GO 1338
// end ;
1334: GO 1266
1336: POP
1337: POP
// end ;
1338: PPOPN 2
1340: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1341: LD_EXP 6
1345: NOT
1346: IFFALSE 1443
1348: GO 1350
1350: DISABLE
1351: LD_INT 0
1353: PPUSH
1354: PPUSH
// begin enable ;
1355: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 24
1363: PPUSH
1364: LD_INT 22
1366: PUSH
1367: LD_INT 0
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 25
1376: PUSH
1377: LD_INT 12
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PPUSH
1388: CALL_OW 70
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1441
// if Attacks ( apeman ) then
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 320
1405: IFFALSE 1439
// if GetSide ( Attacks ( apeman ) ) = 3 then
1407: LD_VAR 0 2
1411: PPUSH
1412: CALL_OW 320
1416: PPUSH
1417: CALL_OW 255
1421: PUSH
1422: LD_INT 3
1424: EQUAL
1425: IFFALSE 1439
// begin attackedByApemanNearLake = true ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// exit ;
1435: POP
1436: POP
1437: GO 1443
// end ;
1439: GO 1393
1441: POP
1442: POP
// end ;
1443: PPOPN 2
1445: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1446: LD_EXP 9
1450: PPUSH
1451: CALL_OW 303
1455: IFFALSE 1489
1457: GO 1459
1459: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1460: LD_ADDR_EXP 10
1464: PUSH
1465: LD_EXP 9
1469: PPUSH
1470: CALL_OW 250
1474: PUSH
1475: LD_EXP 9
1479: PPUSH
1480: CALL_OW 251
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: ST_TO_ADDR
1489: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1490: LD_EXP 9
1494: PPUSH
1495: CALL_OW 303
1499: PUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_EXP 10
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: PPUSH
1512: LD_EXP 10
1516: PUSH
1517: LD_INT 2
1519: ARRAY
1520: PPUSH
1521: CALL_OW 293
1525: AND
1526: IFFALSE 1910
1528: GO 1530
1530: DISABLE
1531: LD_INT 0
1533: PPUSH
// begin wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1541: LD_EXP 46
1545: PPUSH
1546: LD_STRING D2a-Bur-1
1548: PPUSH
1549: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1553: LD_INT 22
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 21
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PPUSH
1577: CALL_OW 69
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1601
// Say ( Burlak , D2a-Bur-2 ) else
1587: LD_EXP 46
1591: PPUSH
1592: LD_STRING D2a-Bur-2
1594: PPUSH
1595: CALL_OW 88
1599: GO 1910
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1601: LD_ADDR_VAR 0 1
1605: PUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 69
1634: PUSH
1635: LD_EXP 46
1639: PUSH
1640: LD_EXP 54
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: DIFF
1649: PPUSH
1650: LD_EXP 10
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_EXP 10
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: CALL_OW 73
1672: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1673: LD_ADDR_EXP 11
1677: PUSH
1678: LD_VAR 0 1
1682: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1683: LD_VAR 0 1
1687: PPUSH
1688: LD_EXP 10
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: LD_EXP 10
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PPUSH
1706: CALL_OW 111
// case nearUnit of Belkov :
1710: LD_VAR 0 1
1714: PUSH
1715: LD_EXP 51
1719: DOUBLE
1720: EQUAL
1721: IFTRUE 1725
1723: GO 1740
1725: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1726: LD_EXP 51
1730: PPUSH
1731: LD_STRING D2a-Bel-1
1733: PPUSH
1734: CALL_OW 88
1738: GO 1807
1740: LD_EXP 53
1744: DOUBLE
1745: EQUAL
1746: IFTRUE 1750
1748: GO 1765
1750: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1751: LD_EXP 53
1755: PPUSH
1756: LD_STRING D2a-Kir-1
1758: PPUSH
1759: CALL_OW 88
1763: GO 1807
1765: POP
// if GetSex ( nearUnit ) = sex_male then
1766: LD_VAR 0 1
1770: PPUSH
1771: CALL_OW 258
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1795
// Say ( nearUnit , D2a-RSol1-1 ) else
1781: LD_VAR 0 1
1785: PPUSH
1786: LD_STRING D2a-RSol1-1
1788: PPUSH
1789: CALL_OW 88
1793: GO 1807
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1795: LD_VAR 0 1
1799: PPUSH
1800: LD_STRING D2a-RFSol1-1
1802: PPUSH
1803: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1807: LD_EXP 54
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 3
1819: EQUAL
1820: PUSH
1821: LD_EXP 54
1825: PPUSH
1826: CALL_OW 302
1830: AND
1831: IFFALSE 1845
// Say ( Gnyevko , D2a-Gny-1 ) ;
1833: LD_EXP 54
1837: PPUSH
1838: LD_STRING D2a-Gny-1
1840: PPUSH
1841: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 255
1854: PUSH
1855: LD_INT 8
1857: EQUAL
1858: IFFALSE 1910
// begin Say ( Burlak , D12-Bur-1 ) ;
1860: LD_EXP 46
1864: PPUSH
1865: LD_STRING D12-Bur-1
1867: PPUSH
1868: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1872: LD_EXP 51
1876: PPUSH
1877: CALL_OW 255
1881: PUSH
1882: LD_INT 3
1884: EQUAL
1885: PUSH
1886: LD_EXP 51
1890: PPUSH
1891: CALL_OW 302
1895: AND
1896: IFFALSE 1910
// Say ( Belkov , D12-Bel-2 ) ;
1898: LD_EXP 51
1902: PPUSH
1903: LD_STRING D12-Bel-2
1905: PPUSH
1906: CALL_OW 88
// end ; end ; end ;
1910: PPOPN 1
1912: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1913: LD_EXP 12
1917: NOT
1918: PUSH
1919: LD_EXP 40
1923: PUSH
1924: LD_INT 70
1926: GREATER
1927: AND
1928: IFFALSE 1948
1930: GO 1932
1932: DISABLE
// begin enable ;
1933: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1934: LD_EXP 54
1938: PPUSH
1939: LD_EXP 39
1943: PPUSH
1944: CALL_OW 234
// end ;
1948: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1949: LD_INT 3
1951: PPUSH
1952: LD_EXP 54
1956: PPUSH
1957: CALL_OW 292
1961: IFFALSE 2573
1963: GO 1965
1965: DISABLE
1966: LD_INT 0
1968: PPUSH
1969: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1970: LD_EXP 54
1974: PPUSH
1975: CALL_OW 87
// DialogueOn ;
1979: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1983: LD_ADDR_VAR 0 1
1987: PUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 1
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PPUSH
2017: LD_EXP 54
2021: PPUSH
2022: CALL_OW 74
2026: ST_TO_ADDR
// if nearUnit = Burlak then
2027: LD_VAR 0 1
2031: PUSH
2032: LD_EXP 46
2036: EQUAL
2037: IFFALSE 2399
// begin Say ( Burlak , D3-Bur-1 ) ;
2039: LD_EXP 46
2043: PPUSH
2044: LD_STRING D3-Bur-1
2046: PPUSH
2047: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2051: LD_EXP 54
2055: PPUSH
2056: LD_STRING D3-Gny-1
2058: PPUSH
2059: CALL_OW 88
// if apeWithRadioKiller then
2063: LD_EXP 11
2067: IFFALSE 2107
// begin if apeWithRadioKiller = Burlak then
2069: LD_EXP 11
2073: PUSH
2074: LD_EXP 46
2078: EQUAL
2079: IFFALSE 2095
// Say ( Burlak , D3-Bur-2 ) else
2081: LD_EXP 46
2085: PPUSH
2086: LD_STRING D3-Bur-2
2088: PPUSH
2089: CALL_OW 88
2093: GO 2107
// Say ( Burlak , D3-Bur-2a ) ;
2095: LD_EXP 46
2099: PPUSH
2100: LD_STRING D3-Bur-2a
2102: PPUSH
2103: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2107: LD_EXP 46
2111: PPUSH
2112: LD_STRING D3-Bur-2b
2114: PPUSH
2115: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: EQUAL
2151: PUSH
2152: LD_EXP 14
2156: NOT
2157: AND
2158: IFFALSE 2210
// begin Say ( Burlak , D3-Bur-2c ) ;
2160: LD_EXP 46
2164: PPUSH
2165: LD_STRING D3-Bur-2c
2167: PPUSH
2168: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2172: LD_EXP 54
2176: PPUSH
2177: LD_STRING D3-Gny-2
2179: PPUSH
2180: CALL_OW 88
// DialogueOff ;
2184: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2188: LD_EXP 54
2192: PPUSH
2193: LD_INT 3
2195: PPUSH
2196: CALL_OW 235
// gnyevkoSaved = true ;
2200: LD_ADDR_EXP 12
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// exit ;
2208: GO 2573
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2210: LD_INT 22
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: LD_INT 1
2241: GREATER
2242: PUSH
2243: LD_EXP 14
2247: OR
2248: PUSH
2249: LD_EXP 22
2253: NOT
2254: AND
2255: IFFALSE 2307
// begin Say ( Burlak , D3-Bur-2d ) ;
2257: LD_EXP 46
2261: PPUSH
2262: LD_STRING D3-Bur-2d
2264: PPUSH
2265: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2269: LD_EXP 54
2273: PPUSH
2274: LD_STRING D3-Gny-2
2276: PPUSH
2277: CALL_OW 88
// DialogueOff ;
2281: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2285: LD_EXP 54
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL_OW 235
// gnyevkoSaved = true ;
2297: LD_ADDR_EXP 12
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// exit ;
2305: GO 2573
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2307: LD_INT 22
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 21
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PPUSH
2331: CALL_OW 69
2335: PUSH
2336: LD_INT 1
2338: GREATER
2339: PUSH
2340: LD_EXP 22
2344: AND
2345: IFFALSE 2397
// begin Say ( Burlak , D3-Bur-2e ) ;
2347: LD_EXP 46
2351: PPUSH
2352: LD_STRING D3-Bur-2e
2354: PPUSH
2355: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2359: LD_EXP 54
2363: PPUSH
2364: LD_STRING D3-Gny-2
2366: PPUSH
2367: CALL_OW 88
// DialogueOff ;
2371: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2375: LD_EXP 54
2379: PPUSH
2380: LD_INT 3
2382: PPUSH
2383: CALL_OW 235
// gnyevkoSaved = true ;
2387: LD_ADDR_EXP 12
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// exit ;
2395: GO 2573
// end ; end else
2397: GO 2573
// begin if GetSex ( nearUnit ) = sex_male then
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 258
2408: PUSH
2409: LD_INT 1
2411: EQUAL
2412: IFFALSE 2428
// Say ( nearUnit , D3-RSol1-1 ) else
2414: LD_VAR 0 1
2418: PPUSH
2419: LD_STRING D3-RSol1-1
2421: PPUSH
2422: CALL_OW 88
2426: GO 2440
// Say ( nearUnit , D3-RFSol1-1 ) ;
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_STRING D3-RFSol1-1
2435: PPUSH
2436: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2440: LD_EXP 54
2444: PPUSH
2445: LD_STRING D3-Gny-1
2447: PPUSH
2448: CALL_OW 88
// if apeWithRadioKiller then
2452: LD_EXP 11
2456: IFFALSE 2496
// begin if apeWithRadioKiller = Burlak then
2458: LD_EXP 11
2462: PUSH
2463: LD_EXP 46
2467: EQUAL
2468: IFFALSE 2484
// Say ( Burlak , D3-Bur-2 ) else
2470: LD_EXP 46
2474: PPUSH
2475: LD_STRING D3-Bur-2
2477: PPUSH
2478: CALL_OW 88
2482: GO 2496
// Say ( Burlak , D3-Bur-2a ) ;
2484: LD_EXP 46
2488: PPUSH
2489: LD_STRING D3-Bur-2a
2491: PPUSH
2492: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 258
2505: PUSH
2506: LD_INT 1
2508: EQUAL
2509: IFFALSE 2525
// Say ( nearUnit , D3-RSol1-2 ) else
2511: LD_VAR 0 1
2515: PPUSH
2516: LD_STRING D3-RSol1-2
2518: PPUSH
2519: CALL_OW 88
2523: GO 2537
// Say ( nearUnit , D3-RFSol1-2 ) ;
2525: LD_VAR 0 1
2529: PPUSH
2530: LD_STRING D3-RFSol1-2
2532: PPUSH
2533: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2537: LD_EXP 54
2541: PPUSH
2542: LD_STRING D3-Gny-2a
2544: PPUSH
2545: CALL_OW 88
// DialogueOff ;
2549: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2553: LD_EXP 54
2557: PPUSH
2558: LD_INT 3
2560: PPUSH
2561: CALL_OW 235
// gnyevkoSaved = true ;
2565: LD_ADDR_EXP 12
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// end ; end ;
2573: PPOPN 2
2575: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2576: LD_EXP 12
2580: NOT
2581: PUSH
2582: LD_EXP 21
2586: NOT
2587: OR
2588: IFFALSE 2783
2590: GO 2592
2592: DISABLE
2593: LD_INT 0
2595: PPUSH
// begin enable ;
2596: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2597: LD_EXP 12
2601: NOT
2602: PUSH
2603: LD_EXP 40
2607: PUSH
2608: LD_INT 70
2610: GREATER
2611: AND
2612: IFFALSE 2690
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2614: LD_ADDR_VAR 0 1
2618: PUSH
2619: LD_INT 22
2621: PUSH
2622: LD_INT 0
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 25
2631: PUSH
2632: LD_INT 12
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 69
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2688
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: LD_EXP 54
2660: PPUSH
2661: CALL_OW 250
2665: PPUSH
2666: LD_EXP 54
2670: PPUSH
2671: CALL_OW 251
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL 8446 0 5
2686: GO 2648
2688: POP
2689: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2690: LD_EXP 21
2694: NOT
2695: PUSH
2696: LD_EXP 41
2700: PUSH
2701: LD_INT 70
2703: GREATER
2704: AND
2705: IFFALSE 2783
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 12
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 69
2740: PUSH
2741: FOR_IN
2742: IFFALSE 2781
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2744: LD_VAR 0 1
2748: PPUSH
2749: LD_EXP 53
2753: PPUSH
2754: CALL_OW 250
2758: PPUSH
2759: LD_EXP 53
2763: PPUSH
2764: CALL_OW 251
2768: PPUSH
2769: LD_INT 10
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL 8446 0 5
2779: GO 2741
2781: POP
2782: POP
// end ;
2783: PPOPN 1
2785: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2786: LD_EXP 12
2790: NOT
2791: PUSH
2792: LD_EXP 21
2796: NOT
2797: OR
2798: IFFALSE 2909
2800: GO 2802
2802: DISABLE
// begin enable ;
2803: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2804: LD_EXP 12
2808: NOT
2809: PUSH
2810: LD_EXP 40
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: AND
2819: IFFALSE 2835
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2821: LD_ADDR_EXP 40
2825: PUSH
2826: LD_EXP 40
2830: PUSH
2831: LD_INT 35
2833: MINUS
2834: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2835: LD_EXP 53
2839: PPUSH
2840: CALL_OW 305
2844: PUSH
2845: LD_EXP 21
2849: NOT
2850: AND
2851: PUSH
2852: LD_EXP 41
2856: PUSH
2857: LD_INT 0
2859: GREATER
2860: AND
2861: IFFALSE 2877
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2863: LD_ADDR_EXP 41
2867: PUSH
2868: LD_EXP 41
2872: PUSH
2873: LD_INT 35
2875: MINUS
2876: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2877: LD_EXP 53
2881: PPUSH
2882: CALL_OW 305
2886: PUSH
2887: LD_EXP 21
2891: NOT
2892: AND
2893: IFFALSE 2909
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2895: LD_ADDR_EXP 26
2899: PUSH
2900: LD_EXP 26
2904: PUSH
2905: LD_INT 35
2907: PLUS
2908: ST_TO_ADDR
// end ;
2909: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2910: LD_INT 3
2912: PPUSH
2913: LD_EXP 47
2917: PPUSH
2918: CALL_OW 292
2922: PUSH
2923: LD_INT 6
2925: PPUSH
2926: LD_EXP 46
2930: PPUSH
2931: CALL_OW 292
2935: OR
2936: PUSH
2937: LD_EXP 54
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 3
2949: EQUAL
2950: PUSH
2951: LD_INT 6
2953: PPUSH
2954: LD_EXP 54
2958: PPUSH
2959: CALL_OW 292
2963: AND
2964: OR
2965: PUSH
2966: LD_EXP 14
2970: NOT
2971: AND
2972: IFFALSE 3887
2974: GO 2976
2976: DISABLE
// begin enable ;
2977: ENABLE
// InGameOn ;
2978: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2982: LD_EXP 47
2986: PPUSH
2987: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2991: LD_EXP 54
2995: PPUSH
2996: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3000: LD_EXP 46
3004: PUSH
3005: LD_EXP 54
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 200
// DialogueOn ;
3018: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3022: LD_EXP 13
3026: IFFALSE 3278
// begin meetPokryshkin = true ;
3028: LD_ADDR_EXP 14
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3036: LD_INT 6
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 343
// DialogueOff ;
3046: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3050: LD_EXP 46
3054: PPUSH
3055: LD_EXP 47
3059: PPUSH
3060: CALL_OW 250
3064: PPUSH
3065: LD_EXP 47
3069: PPUSH
3070: CALL_OW 251
3074: PPUSH
3075: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3079: LD_EXP 46
3083: PPUSH
3084: LD_EXP 47
3088: PPUSH
3089: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3093: LD_EXP 47
3097: PPUSH
3098: LD_EXP 46
3102: PPUSH
3103: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3107: LD_EXP 54
3111: PPUSH
3112: LD_STRING D4-Gny-3
3114: PPUSH
3115: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3119: LD_EXP 46
3123: PPUSH
3124: LD_STRING D4-Bur-3
3126: PPUSH
3127: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3131: LD_EXP 47
3135: PPUSH
3136: LD_STRING D4-Pok-4
3138: PPUSH
3139: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3143: LD_EXP 42
3147: PPUSH
3148: LD_INT 18
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: CALL_OW 49
// wait ( 0 0$2 ) ;
3158: LD_INT 70
3160: PPUSH
3161: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3165: LD_EXP 46
3169: PPUSH
3170: LD_STRING D4-Bur-4
3172: PPUSH
3173: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3177: LD_EXP 47
3181: PPUSH
3182: LD_STRING D4-Pok-5
3184: PPUSH
3185: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3189: LD_EXP 42
3193: PPUSH
3194: LD_STRING D4-Sol1-5
3196: PPUSH
3197: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3201: LD_EXP 47
3205: PPUSH
3206: LD_STRING D4-Pok-6
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3213: LD_EXP 47
3217: PPUSH
3218: LD_STRING D4-Pok-6a
3220: PPUSH
3221: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3225: LD_EXP 46
3229: PPUSH
3230: LD_STRING D4-Bur-6
3232: PPUSH
3233: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3237: LD_EXP 47
3241: PPUSH
3242: LD_STRING D4-Pok-7
3244: PPUSH
3245: CALL_OW 88
// DialogueOff ;
3249: CALL_OW 7
// InGameOff ;
3253: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3257: LD_STRING M2
3259: PPUSH
3260: CALL_OW 337
// goToHill = true ;
3264: LD_ADDR_EXP 15
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// MoveToHill ;
3272: CALL 10326 0 0
// exit ;
3276: GO 3887
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3278: LD_EXP 46
3282: PUSH
3283: LD_EXP 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3296: LD_EXP 47
3300: PPUSH
3301: LD_STRING D4-Pok-1
3303: PPUSH
3304: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3308: LD_EXP 54
3312: PPUSH
3313: CALL_OW 255
3317: PUSH
3318: LD_INT 3
3320: EQUAL
3321: PUSH
3322: LD_EXP 54
3326: PPUSH
3327: CALL_OW 302
3331: AND
3332: IFFALSE 3346
// Say ( Gnyevko , D4-Gny-1 ) ;
3334: LD_EXP 54
3338: PPUSH
3339: LD_STRING D4-Gny-1
3341: PPUSH
3342: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3346: LD_EXP 46
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 6
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 21
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: PPUSH
3380: LD_EXP 46
3384: PPUSH
3385: CALL_OW 74
3389: PPUSH
3390: CALL_OW 296
3394: PUSH
3395: LD_INT 8
3397: GREATER
3398: PUSH
3399: LD_EXP 46
3403: PPUSH
3404: LD_EXP 54
3408: PPUSH
3409: CALL_OW 296
3413: PUSH
3414: LD_INT 8
3416: GREATER
3417: AND
3418: PUSH
3419: LD_EXP 54
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: LD_INT 3
3431: EQUAL
3432: AND
3433: PUSH
3434: LD_EXP 54
3438: PPUSH
3439: CALL_OW 302
3443: AND
3444: IFFALSE 3542
// begin ComWalk ( Gnyevko ) ;
3446: LD_EXP 54
3450: PPUSH
3451: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3455: LD_EXP 47
3459: PPUSH
3460: LD_STRING D4-Pok-2
3462: PPUSH
3463: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3467: LD_EXP 54
3471: PPUSH
3472: LD_STRING D4-Gny-2
3474: PPUSH
3475: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3479: LD_EXP 47
3483: PPUSH
3484: LD_STRING D4-Pok-3
3486: PPUSH
3487: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3491: LD_ADDR_EXP 13
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3499: LD_EXP 54
3503: PPUSH
3504: LD_INT 6
3506: PPUSH
3507: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3511: LD_EXP 54
3515: PPUSH
3516: LD_EXP 47
3520: PPUSH
3521: CALL_OW 250
3525: PPUSH
3526: LD_EXP 47
3530: PPUSH
3531: CALL_OW 251
3535: PPUSH
3536: CALL_OW 171
// end else
3540: GO 3879
// begin meetPokryshkin = true ;
3542: LD_ADDR_EXP 14
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3550: LD_INT 6
3552: PPUSH
3553: LD_INT 3
3555: PPUSH
3556: CALL_OW 343
// DialogueOff ;
3560: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3564: LD_EXP 54
3568: PPUSH
3569: CALL_OW 255
3573: PUSH
3574: LD_INT 3
3576: EQUAL
3577: PUSH
3578: LD_EXP 54
3582: PPUSH
3583: CALL_OW 302
3587: AND
3588: IFFALSE 3665
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3590: LD_EXP 46
3594: PUSH
3595: LD_EXP 54
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: LD_EXP 47
3608: PPUSH
3609: CALL_OW 250
3613: PPUSH
3614: LD_EXP 47
3618: PPUSH
3619: CALL_OW 251
3623: PPUSH
3624: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3628: LD_EXP 46
3632: PUSH
3633: LD_EXP 54
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: LD_EXP 47
3646: PPUSH
3647: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3651: LD_EXP 54
3655: PPUSH
3656: LD_INT 6
3658: PPUSH
3659: CALL_OW 235
// end else
3663: GO 3708
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3665: LD_EXP 46
3669: PPUSH
3670: LD_EXP 47
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 47
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_EXP 47
3703: PPUSH
3704: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3708: LD_EXP 47
3712: PPUSH
3713: LD_EXP 46
3717: PPUSH
3718: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3722: LD_EXP 46
3726: PPUSH
3727: LD_STRING D4-Bur-3
3729: PPUSH
3730: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3734: LD_EXP 47
3738: PPUSH
3739: LD_STRING D4-Pok-4
3741: PPUSH
3742: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3746: LD_EXP 42
3750: PPUSH
3751: LD_INT 18
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: CALL_OW 49
// wait ( 0 0$2 ) ;
3761: LD_INT 70
3763: PPUSH
3764: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3768: LD_EXP 46
3772: PPUSH
3773: LD_STRING D4-Bur-4
3775: PPUSH
3776: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3780: LD_EXP 47
3784: PPUSH
3785: LD_STRING D4-Pok-5
3787: PPUSH
3788: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3792: LD_EXP 42
3796: PPUSH
3797: LD_STRING D4-Sol1-5
3799: PPUSH
3800: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3804: LD_EXP 47
3808: PPUSH
3809: LD_STRING D4-Pok-6
3811: PPUSH
3812: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3816: LD_EXP 47
3820: PPUSH
3821: LD_STRING D4-Pok-6a
3823: PPUSH
3824: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3828: LD_EXP 46
3832: PPUSH
3833: LD_STRING D4-Bur-6
3835: PPUSH
3836: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3840: LD_EXP 47
3844: PPUSH
3845: LD_STRING D4-Pok-7
3847: PPUSH
3848: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3852: LD_STRING M2
3854: PPUSH
3855: CALL_OW 337
// goToHill = true ;
3859: LD_ADDR_EXP 15
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// DialogueOff ;
3867: CALL_OW 7
// InGameOff ;
3871: CALL_OW 9
// MoveToHill ;
3875: CALL 10326 0 0
// end ; DialogueOff ;
3879: CALL_OW 7
// InGameOff ;
3883: CALL_OW 9
// end ;
3887: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3888: LD_EXP 46
3892: PPUSH
3893: LD_EXP 47
3897: PPUSH
3898: CALL_OW 296
3902: PUSH
3903: LD_INT 10
3905: GREATER
3906: PUSH
3907: LD_EXP 15
3911: AND
3912: PUSH
3913: LD_EXP 18
3917: NOT
3918: AND
3919: IFFALSE 4120
3921: GO 3923
3923: DISABLE
3924: LD_INT 0
3926: PPUSH
// begin enable ;
3927: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_EXP 47
3937: PUSH
3938: LD_EXP 48
3942: PUSH
3943: LD_EXP 49
3947: PUSH
3948: LD_EXP 50
3952: PUSH
3953: LD_EXP 51
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3965: LD_EXP 54
3969: PPUSH
3970: CALL_OW 255
3974: PUSH
3975: LD_INT 6
3977: EQUAL
3978: PUSH
3979: LD_EXP 12
3983: AND
3984: IFFALSE 4002
// ruSolds = ruSolds ^ Gnyevko ;
3986: LD_ADDR_VAR 0 1
3990: PUSH
3991: LD_VAR 0 1
3995: PUSH
3996: LD_EXP 54
4000: ADD
4001: ST_TO_ADDR
// ComStop ( ruSolds ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
4011: LD_EXP 46
4015: PPUSH
4016: CALL_OW 87
// DialogueOn ;
4020: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4024: LD_EXP 47
4028: PPUSH
4029: LD_STRING DSplit-Pok-1
4031: PPUSH
4032: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4036: LD_EXP 46
4040: PPUSH
4041: LD_STRING DSplit-Bur-1
4043: PPUSH
4044: CALL_OW 88
// DialogueOff ;
4048: CALL_OW 7
// InGameOn ;
4052: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_EXP 47
4065: PPUSH
4066: CALL_OW 250
4070: PPUSH
4071: LD_EXP 47
4075: PPUSH
4076: CALL_OW 251
4080: PPUSH
4081: CALL_OW 111
// wait ( 0 0$1 ) ;
4085: LD_INT 35
4087: PPUSH
4088: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4092: LD_EXP 46
4096: PPUSH
4097: LD_EXP 47
4101: PPUSH
4102: CALL_OW 296
4106: PUSH
4107: LD_INT 6
4109: LESS
4110: IFFALSE 4056
// InGameOff ;
4112: CALL_OW 9
// MoveToHill ;
4116: CALL 10326 0 0
// end ;
4120: PPOPN 1
4122: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
// traitor = true ;
4127: LD_ADDR_EXP 18
4131: PUSH
4132: LD_INT 1
4134: ST_TO_ADDR
// DialogueOn ;
4135: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4139: LD_EXP 47
4143: PPUSH
4144: LD_STRING DAttack-Pok-1
4146: PPUSH
4147: CALL_OW 88
// DialogueOff ;
4151: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4155: LD_INT 3
4157: PPUSH
4158: LD_INT 6
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4171: LD_INT 22
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 1
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 69
4199: PPUSH
4200: LD_EXP 46
4204: PPUSH
4205: CALL_OW 115
// end ;
4209: LD_VAR 0 1
4213: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4214: LD_EXP 47
4218: PPUSH
4219: LD_INT 65
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: CALL_OW 297
4229: PUSH
4230: LD_INT 4
4232: LESS
4233: PUSH
4234: LD_EXP 18
4238: NOT
4239: AND
4240: IFFALSE 4437
4242: GO 4244
4244: DISABLE
// begin InGameOn ;
4245: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4249: LD_INT 55
4251: PPUSH
4252: LD_INT 50
4254: PPUSH
4255: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4259: LD_EXP 46
4263: PPUSH
4264: LD_INT 66
4266: PPUSH
4267: LD_INT 57
4269: PPUSH
4270: CALL_OW 111
// AddComHold ( Burlak ) ;
4274: LD_EXP 46
4278: PPUSH
4279: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4283: LD_EXP 42
4287: PPUSH
4288: LD_INT 59
4290: PPUSH
4291: LD_INT 55
4293: PPUSH
4294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4298: LD_INT 35
4300: PPUSH
4301: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4305: LD_INT 1
4307: PPUSH
4308: LD_EXP 47
4312: PPUSH
4313: CALL_OW 292
4317: IFFALSE 4298
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4319: LD_EXP 42
4323: PUSH
4324: LD_EXP 47
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 87
// ComStop ( Charles ) ;
4337: LD_EXP 42
4341: PPUSH
4342: CALL_OW 141
// AddComHold ( Charles ) ;
4346: LD_EXP 42
4350: PPUSH
4351: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4355: LD_EXP 42
4359: PPUSH
4360: LD_EXP 47
4364: PPUSH
4365: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4369: LD_EXP 42
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4381: LD_EXP 47
4385: PPUSH
4386: LD_STRING D5-Pok-1
4388: PPUSH
4389: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4393: LD_INT 1
4395: PPUSH
4396: LD_INT 6
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4409: LD_INT 1
4411: PPUSH
4412: LD_INT 3
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4425: LD_EXP 42
4429: PPUSH
4430: LD_STRING D5-Sol1-2
4432: PPUSH
4433: CALL_OW 88
// end ;
4437: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4438: LD_EXP 42
4442: PPUSH
4443: CALL_OW 301
4447: PUSH
4448: LD_EXP 15
4452: AND
4453: IFFALSE 5057
4455: GO 4457
4457: DISABLE
4458: LD_INT 0
4460: PPUSH
// begin InGameOn ;
4461: CALL_OW 8
// goToHill = false ;
4465: LD_ADDR_EXP 15
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4473: LD_INT 22
4475: PUSH
4476: LD_INT 6
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PPUSH
4502: CALL_OW 141
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4513: LD_INT 22
4515: PUSH
4516: LD_INT 6
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 1
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PPUSH
4537: CALL_OW 69
4541: PPUSH
4542: CALL_OW 138
// wait ( 0 0$1 ) ;
4546: LD_INT 35
4548: PPUSH
4549: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4553: LD_INT 55
4555: PPUSH
4556: LD_INT 50
4558: PPUSH
4559: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4563: LD_EXP 46
4567: PPUSH
4568: LD_INT 56
4570: PPUSH
4571: LD_INT 56
4573: PPUSH
4574: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4578: LD_INT 22
4580: PUSH
4581: LD_INT 6
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PPUSH
4607: LD_INT 56
4609: PPUSH
4610: LD_INT 56
4612: PPUSH
4613: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4617: LD_EXP 46
4621: PPUSH
4622: LD_STRING D5-Bur-2
4624: PPUSH
4625: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4629: LD_EXP 47
4633: PPUSH
4634: LD_STRING D5-Pok-2
4636: PPUSH
4637: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4641: LD_EXP 51
4645: PPUSH
4646: LD_STRING D5-Bel-2
4648: PPUSH
4649: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_STRING D5-Pok-3
4660: PPUSH
4661: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4665: LD_EXP 54
4669: PPUSH
4670: CALL_OW 255
4674: PUSH
4675: LD_INT 6
4677: EQUAL
4678: IFFALSE 4692
// Say ( Gnyevko , D5-Gny-3 ) ;
4680: LD_EXP 54
4684: PPUSH
4685: LD_STRING D5-Gny-3
4687: PPUSH
4688: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4692: LD_EXP 46
4696: PPUSH
4697: LD_STRING D5-Bur-3
4699: PPUSH
4700: CALL_OW 88
// interface_hidden = true ;
4704: LD_ADDR_OWVAR 54
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// IngameOff ;
4712: CALL_OW 9
// wait ( 0 0$2 ) ;
4716: LD_INT 70
4718: PPUSH
4719: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4723: LD_EXP 46
4727: PPUSH
4728: LD_INT 85
4730: PPUSH
4731: LD_INT 64
4733: PPUSH
4734: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 6
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 21
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PPUSH
4762: CALL_OW 69
4766: PPUSH
4767: LD_INT 85
4769: PPUSH
4770: LD_INT 64
4772: PPUSH
4773: CALL_OW 111
// interface_hidden = false ;
4777: LD_ADDR_OWVAR 54
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// InGameOn ;
4785: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4789: LD_EXP 46
4793: PPUSH
4794: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4798: LD_EXP 47
4802: PPUSH
4803: LD_STRING D6-Pok-1
4805: PPUSH
4806: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4810: LD_EXP 46
4814: PPUSH
4815: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4819: LD_EXP 46
4823: PPUSH
4824: LD_STRING D6-Bur-1
4826: PPUSH
4827: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4831: LD_EXP 46
4835: PPUSH
4836: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4840: LD_EXP 47
4844: PPUSH
4845: LD_STRING D6-Pok-2
4847: PPUSH
4848: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4852: LD_EXP 46
4856: PPUSH
4857: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4861: LD_EXP 51
4865: PPUSH
4866: LD_STRING D6-Bel-2
4868: PPUSH
4869: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4873: LD_EXP 46
4877: PPUSH
4878: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4882: LD_EXP 46
4886: PPUSH
4887: LD_STRING D6-Bur-2
4889: PPUSH
4890: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4894: LD_EXP 46
4898: PPUSH
4899: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4903: LD_EXP 47
4907: PPUSH
4908: LD_STRING D6-Pok-3
4910: PPUSH
4911: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4915: LD_EXP 46
4919: PPUSH
4920: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4924: LD_EXP 55
4928: PPUSH
4929: LD_STRING D6-Kur-3
4931: PPUSH
4932: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4936: LD_EXP 46
4940: PPUSH
4941: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4945: LD_EXP 47
4949: PPUSH
4950: LD_STRING D6-Pok-4
4952: PPUSH
4953: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4957: LD_EXP 46
4961: PPUSH
4962: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4966: LD_EXP 51
4970: PPUSH
4971: LD_STRING D6-Bel-4
4973: PPUSH
4974: CALL_OW 88
// InGameOff ;
4978: CALL_OW 9
// interface_hidden = false ;
4982: LD_ADDR_OWVAR 54
4986: PUSH
4987: LD_INT 0
4989: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4990: LD_EXP 47
4994: PPUSH
4995: LD_INT 23
4997: PPUSH
4998: CALL_OW 115
// wait ( 0 0$5 ) ;
5002: LD_INT 175
5004: PPUSH
5005: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5009: LD_INT 22
5011: PUSH
5012: LD_INT 6
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: PPUSH
5038: LD_INT 23
5040: PPUSH
5041: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5045: LD_INT 1
5047: PPUSH
5048: LD_EXP 54
5052: PPUSH
5053: CALL_OW 471
// end ;
5057: PPOPN 1
5059: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5060: LD_INT 1
5062: PPUSH
5063: LD_EXP 47
5067: PPUSH
5068: CALL_OW 292
5072: PUSH
5073: LD_EXP 42
5077: PPUSH
5078: CALL_OW 301
5082: AND
5083: IFFALSE 5102
5085: GO 5087
5087: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5088: LD_EXP 43
5092: PPUSH
5093: LD_EXP 47
5097: PPUSH
5098: CALL_OW 115
5102: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5103: LD_INT 3
5105: PPUSH
5106: LD_INT 23
5108: PPUSH
5109: CALL_OW 292
5113: IFFALSE 5142
5115: GO 5117
5117: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5118: LD_EXP 47
5122: PPUSH
5123: LD_STRING D7-Pok-1
5125: PPUSH
5126: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5130: LD_EXP 43
5134: PPUSH
5135: LD_STRING D7-FSol1-1
5137: PPUSH
5138: CALL_OW 88
// end ;
5142: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5143: LD_EXP 47
5147: PPUSH
5148: CALL_OW 303
5152: IFFALSE 5684
5154: GO 5156
5156: DISABLE
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 6
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 50
5189: PUSH
5190: EMPTY
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 69
5202: PUSH
5203: LD_EXP 51
5207: DIFF
5208: ST_TO_ADDR
// DialogueOn ;
5209: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5213: LD_EXP 51
5217: PPUSH
5218: LD_STRING D7a-Bel-1
5220: PPUSH
5221: CALL_OW 88
// DialogueOff ;
5225: CALL_OW 7
// for i := 1 to ruSolds do
5229: LD_ADDR_VAR 0 1
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_VAR 0 3
5243: PUSH
5244: FOR_TO
5245: IFFALSE 5303
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5247: LD_VAR 0 3
5251: PUSH
5252: LD_VAR 0 1
5256: ARRAY
5257: PPUSH
5258: LD_INT 87
5260: PUSH
5261: LD_VAR 0 1
5265: PLUS
5266: PPUSH
5267: LD_INT 63
5269: PUSH
5270: LD_VAR 0 1
5274: PLUS
5275: PPUSH
5276: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5280: LD_VAR 0 3
5284: PUSH
5285: LD_VAR 0 1
5289: ARRAY
5290: PPUSH
5291: LD_INT 89
5293: PPUSH
5294: LD_INT 67
5296: PPUSH
5297: CALL_OW 178
// end ;
5301: GO 5244
5303: POP
5304: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5305: LD_EXP 51
5309: PPUSH
5310: LD_INT 89
5312: PPUSH
5313: LD_INT 67
5315: PPUSH
5316: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5320: LD_EXP 51
5324: PPUSH
5325: LD_INT 88
5327: PPUSH
5328: LD_INT 66
5330: PPUSH
5331: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5335: LD_EXP 48
5339: PPUSH
5340: LD_STRING D7a-RSol1-1
5342: PPUSH
5343: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5347: LD_EXP 43
5351: PPUSH
5352: LD_STRING D7a-FSol1-1
5354: PPUSH
5355: CALL_OW 88
// wait ( 0 0$12 ) ;
5359: LD_INT 420
5361: PPUSH
5362: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5366: LD_EXP 51
5370: PPUSH
5371: LD_STRING D7b-Bel-1
5373: PPUSH
5374: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5378: LD_EXP 49
5382: PPUSH
5383: LD_STRING D7b-FSol1-1
5385: PPUSH
5386: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5390: LD_EXP 51
5394: PPUSH
5395: LD_STRING D7b-Bel-2
5397: PPUSH
5398: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5402: LD_EXP 48
5406: PPUSH
5407: LD_STRING D7b-RSol1-2
5409: PPUSH
5410: CALL_OW 88
// for unit in ruSolds do
5414: LD_ADDR_VAR 0 2
5418: PUSH
5419: LD_VAR 0 3
5423: PUSH
5424: FOR_IN
5425: IFFALSE 5658
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5427: LD_EXP 46
5431: PPUSH
5432: LD_VAR 0 2
5436: PPUSH
5437: CALL_OW 296
5441: PUSH
5442: LD_INT 7
5444: LESS
5445: IFFALSE 5656
// begin InGameOn ;
5447: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5451: LD_EXP 51
5455: PUSH
5456: LD_EXP 48
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5469: LD_EXP 46
5473: PPUSH
5474: LD_INT 88
5476: PPUSH
5477: LD_INT 66
5479: PPUSH
5480: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5484: LD_EXP 51
5488: PPUSH
5489: LD_EXP 46
5493: PPUSH
5494: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5498: LD_EXP 46
5502: PPUSH
5503: LD_INT 90
5505: PPUSH
5506: LD_INT 66
5508: PPUSH
5509: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5513: LD_EXP 46
5517: PPUSH
5518: LD_STRING D7b-Bur-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5525: LD_EXP 51
5529: PPUSH
5530: LD_STRING D7b-Bel-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5537: LD_EXP 46
5541: PPUSH
5542: LD_STRING D7b-Bur-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5549: LD_EXP 51
5553: PPUSH
5554: LD_STRING D7b-Bel-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5561: LD_EXP 49
5565: PPUSH
5566: LD_STRING D7b-FSol1-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5573: LD_EXP 51
5577: PPUSH
5578: LD_STRING D7b-Bel-6
5580: PPUSH
5581: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5585: LD_EXP 46
5589: PPUSH
5590: LD_STRING D7b-Bur-6
5592: PPUSH
5593: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5597: LD_EXP 48
5601: PPUSH
5602: LD_STRING D7b-RSol1-6
5604: PPUSH
5605: CALL_OW 88
// InGameOff ;
5609: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 3
5620: PPUSH
5621: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5625: LD_EXP 51
5629: PPUSH
5630: LD_INT 3
5632: PPUSH
5633: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5637: LD_STRING M3
5639: PPUSH
5640: CALL_OW 337
// secondAttack = true ;
5644: LD_ADDR_EXP 17
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// exit ;
5652: POP
5653: POP
5654: GO 5684
// end ;
5656: GO 5424
5658: POP
5659: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5660: LD_EXP 51
5664: PPUSH
5665: LD_STRING D7b-Bel-3
5667: PPUSH
5668: CALL_OW 88
// InGameOff ;
5672: CALL_OW 9
// belkovWaitForGorky = true ;
5676: LD_ADDR_EXP 16
5680: PUSH
5681: LD_INT 1
5683: ST_TO_ADDR
// end ;
5684: PPOPN 3
5686: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5687: LD_EXP 16
5691: PUSH
5692: LD_EXP 18
5696: NOT
5697: AND
5698: IFFALSE 6008
5700: GO 5702
5702: DISABLE
5703: LD_INT 0
5705: PPUSH
5706: PPUSH
// begin enable ;
5707: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5708: LD_ADDR_VAR 0 2
5712: PUSH
5713: LD_INT 22
5715: PUSH
5716: LD_INT 6
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 21
5725: PUSH
5726: LD_INT 1
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PPUSH
5737: CALL_OW 69
5741: ST_TO_ADDR
// for unit in ruSolds do
5742: LD_ADDR_VAR 0 1
5746: PUSH
5747: LD_VAR 0 2
5751: PUSH
5752: FOR_IN
5753: IFFALSE 6006
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5755: LD_EXP 46
5759: PPUSH
5760: LD_VAR 0 1
5764: PPUSH
5765: CALL_OW 296
5769: PUSH
5770: LD_INT 7
5772: LESS
5773: IFFALSE 6004
// begin belkovWaitForGorky = false ;
5775: LD_ADDR_EXP 16
5779: PUSH
5780: LD_INT 0
5782: ST_TO_ADDR
// InGameOn ;
5783: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5787: LD_EXP 51
5791: PUSH
5792: LD_EXP 48
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PPUSH
5801: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5805: LD_EXP 46
5809: PPUSH
5810: LD_INT 88
5812: PPUSH
5813: LD_INT 66
5815: PPUSH
5816: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5820: LD_EXP 51
5824: PPUSH
5825: LD_EXP 46
5829: PPUSH
5830: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5834: LD_EXP 46
5838: PPUSH
5839: LD_INT 90
5841: PPUSH
5842: LD_INT 66
5844: PPUSH
5845: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5849: LD_EXP 51
5853: PPUSH
5854: LD_STRING D7b-Bel-3a
5856: PPUSH
5857: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5861: LD_EXP 46
5865: PPUSH
5866: LD_STRING D7b-Bur-3
5868: PPUSH
5869: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5873: LD_EXP 51
5877: PPUSH
5878: LD_STRING D7b-Bel-4
5880: PPUSH
5881: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5885: LD_EXP 46
5889: PPUSH
5890: LD_STRING D7b-Bur-4
5892: PPUSH
5893: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5897: LD_EXP 51
5901: PPUSH
5902: LD_STRING D7b-Bel-5
5904: PPUSH
5905: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5909: LD_EXP 49
5913: PPUSH
5914: LD_STRING D7b-FSol1-5
5916: PPUSH
5917: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5921: LD_EXP 51
5925: PPUSH
5926: LD_STRING D7b-Bel-6
5928: PPUSH
5929: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5933: LD_EXP 46
5937: PPUSH
5938: LD_STRING D7b-Bur-6
5940: PPUSH
5941: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5945: LD_EXP 48
5949: PPUSH
5950: LD_STRING D7a-RSol1-6
5952: PPUSH
5953: CALL_OW 88
// InGameOff ;
5957: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5961: LD_VAR 0 2
5965: PPUSH
5966: LD_INT 3
5968: PPUSH
5969: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5973: LD_EXP 51
5977: PPUSH
5978: LD_INT 3
5980: PPUSH
5981: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5985: LD_STRING M3
5987: PPUSH
5988: CALL_OW 337
// secondAttack = true ;
5992: LD_ADDR_EXP 17
5996: PUSH
5997: LD_INT 1
5999: ST_TO_ADDR
// exit ;
6000: POP
6001: POP
6002: GO 6008
// end ;
6004: GO 5752
6006: POP
6007: POP
// end ;
6008: PPOPN 2
6010: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
6011: LD_INT 0
6013: PPUSH
6014: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6015: LD_EXP 43
6019: PPUSH
6020: LD_STRING D8-FSol1-1
6022: PPUSH
6023: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6027: LD_EXP 44
6031: PPUSH
6032: LD_STRING D8-Glad-1
6034: PPUSH
6035: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6039: LD_EXP 46
6043: PPUSH
6044: LD_STRING D8-Bur-1
6046: PPUSH
6047: CALL_OW 88
// secondAttack = false ;
6051: LD_ADDR_EXP 17
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6059: LD_ADDR_VAR 0 2
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 3
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 21
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 69
6092: PPUSH
6093: LD_INT 23
6095: PPUSH
6096: CALL_OW 74
6100: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6101: LD_EXP 45
6105: PPUSH
6106: CALL_OW 122
// wait ( 0 0$1 ) ;
6110: LD_INT 35
6112: PPUSH
6113: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6117: LD_EXP 45
6121: PPUSH
6122: LD_VAR 0 2
6126: PPUSH
6127: CALL_OW 175
// end ;
6131: LD_VAR 0 1
6135: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6136: LD_INT 23
6138: PPUSH
6139: CALL_OW 256
6143: PUSH
6144: LD_INT 350
6146: LESS
6147: PUSH
6148: LD_INT 23
6150: PPUSH
6151: CALL_OW 256
6155: PUSH
6156: LD_INT 250
6158: GREATER
6159: AND
6160: PUSH
6161: LD_INT 20
6163: PPUSH
6164: LD_INT 22
6166: PUSH
6167: LD_INT 3
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 21
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 70
6192: PUSH
6193: LD_INT 0
6195: GREATER
6196: AND
6197: PUSH
6198: LD_EXP 24
6202: NOT
6203: AND
6204: IFFALSE 6221
6206: GO 6208
6208: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6209: LD_EXP 43
6213: PPUSH
6214: LD_STRING D8-FSol1-2
6216: PPUSH
6217: CALL_OW 88
6221: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6222: LD_INT 23
6224: PPUSH
6225: CALL_OW 303
6229: PUSH
6230: LD_INT 22
6232: PPUSH
6233: CALL_OW 302
6237: AND
6238: PUSH
6239: LD_EXP 24
6243: NOT
6244: AND
6245: IFFALSE 6315
6247: GO 6249
6249: DISABLE
// begin amRetreat = true ;
6250: LD_ADDR_EXP 24
6254: PUSH
6255: LD_INT 1
6257: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6258: LD_EXP 43
6262: PPUSH
6263: LD_STRING D8-FSol1-2a
6265: PPUSH
6266: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6270: LD_EXP 44
6274: PUSH
6275: LD_EXP 43
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PPUSH
6284: LD_INT 21
6286: PPUSH
6287: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6291: LD_EXP 44
6295: PPUSH
6296: LD_STRING D8-Glad-2
6298: PPUSH
6299: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6303: LD_EXP 46
6307: PPUSH
6308: LD_STRING D8-Bur-2
6310: PPUSH
6311: CALL_OW 88
// end ;
6315: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6316: LD_INT 22
6318: PPUSH
6319: CALL_OW 303
6323: PUSH
6324: LD_INT 23
6326: PPUSH
6327: CALL_OW 302
6331: AND
6332: PUSH
6333: LD_EXP 24
6337: NOT
6338: AND
6339: IFFALSE 6409
6341: GO 6343
6343: DISABLE
// begin amRetreat = true ;
6344: LD_ADDR_EXP 24
6348: PUSH
6349: LD_INT 1
6351: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6352: LD_EXP 43
6356: PPUSH
6357: LD_STRING D8-FSol1-2a
6359: PPUSH
6360: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6364: LD_EXP 44
6368: PUSH
6369: LD_EXP 43
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PPUSH
6378: LD_INT 21
6380: PPUSH
6381: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6385: LD_EXP 44
6389: PPUSH
6390: LD_STRING D8-Glad-2
6392: PPUSH
6393: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6397: LD_EXP 46
6401: PPUSH
6402: LD_STRING D8-Bur-2
6404: PPUSH
6405: CALL_OW 88
// end ;
6409: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6410: LD_INT 23
6412: PPUSH
6413: CALL_OW 256
6417: PUSH
6418: LD_INT 500
6420: LESS
6421: PUSH
6422: LD_OWVAR 67
6426: PUSH
6427: LD_INT 3
6429: EQUAL
6430: AND
6431: PUSH
6432: LD_EXP 24
6436: NOT
6437: AND
6438: IFFALSE 6508
6440: GO 6442
6442: DISABLE
// begin amRetreat = true ;
6443: LD_ADDR_EXP 24
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6451: LD_EXP 43
6455: PPUSH
6456: LD_STRING D8-FSol1-2a
6458: PPUSH
6459: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6463: LD_EXP 44
6467: PUSH
6468: LD_EXP 43
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: LD_INT 21
6479: PPUSH
6480: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6484: LD_EXP 44
6488: PPUSH
6489: LD_STRING D8-Glad-2
6491: PPUSH
6492: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6496: LD_EXP 46
6500: PPUSH
6501: LD_STRING D8-Bur-2
6503: PPUSH
6504: CALL_OW 88
// end ;
6508: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6509: LD_INT 22
6511: PUSH
6512: LD_INT 1
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 21
6521: PUSH
6522: LD_INT 1
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 50
6531: PUSH
6532: EMPTY
6533: LIST
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: PUSH
6545: LD_INT 0
6547: GREATER
6548: IFFALSE 6676
6550: GO 6552
6552: DISABLE
6553: LD_INT 0
6555: PPUSH
// begin enable ;
6556: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6557: LD_ADDR_VAR 0 1
6561: PUSH
6562: LD_INT 21
6564: PPUSH
6565: LD_INT 22
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 21
6577: PUSH
6578: LD_INT 1
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PPUSH
6589: CALL_OW 70
6593: PUSH
6594: FOR_IN
6595: IFFALSE 6674
// begin if unit = Gladstone then
6597: LD_VAR 0 1
6601: PUSH
6602: LD_EXP 44
6606: EQUAL
6607: IFFALSE 6637
// begin gladstoneEscape = true ;
6609: LD_ADDR_EXP 19
6613: PUSH
6614: LD_INT 1
6616: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6617: LD_EXP 44
6621: PPUSH
6622: LD_EXP 30
6626: PUSH
6627: LD_STRING Gladstone
6629: STR
6630: PPUSH
6631: CALL_OW 38
// end else
6635: GO 6663
// begin JohannaEscape = true ;
6637: LD_ADDR_EXP 20
6641: PUSH
6642: LD_INT 1
6644: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6645: LD_EXP 43
6649: PPUSH
6650: LD_EXP 30
6654: PUSH
6655: LD_STRING Johanna
6657: STR
6658: PPUSH
6659: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 64
// end ;
6672: GO 6594
6674: POP
6675: POP
// end ;
6676: PPOPN 1
6678: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6679: LD_EXP 44
6683: PPUSH
6684: CALL_OW 301
6688: PUSH
6689: LD_EXP 43
6693: PPUSH
6694: CALL_OW 301
6698: AND
6699: IFFALSE 6716
6701: GO 6703
6703: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6704: LD_EXP 46
6708: PPUSH
6709: LD_STRING D9-Bur-1
6711: PPUSH
6712: CALL_OW 88
6716: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6717: LD_EXP 43
6721: PPUSH
6722: CALL_OW 301
6726: PUSH
6727: LD_EXP 19
6731: AND
6732: PUSH
6733: LD_EXP 20
6737: NOT
6738: AND
6739: IFFALSE 6756
6741: GO 6743
6743: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6744: LD_EXP 46
6748: PPUSH
6749: LD_STRING D9-Bur-1a
6751: PPUSH
6752: CALL_OW 88
6756: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6757: LD_EXP 44
6761: PPUSH
6762: CALL_OW 301
6766: PUSH
6767: LD_EXP 19
6771: NOT
6772: AND
6773: PUSH
6774: LD_EXP 20
6778: AND
6779: IFFALSE 6796
6781: GO 6783
6783: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6784: LD_EXP 46
6788: PPUSH
6789: LD_STRING D9-Bur-1b
6791: PPUSH
6792: CALL_OW 88
6796: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6797: LD_EXP 19
6801: PUSH
6802: LD_EXP 20
6806: AND
6807: IFFALSE 6824
6809: GO 6811
6811: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6812: LD_EXP 46
6816: PPUSH
6817: LD_STRING D9-Bur-1c
6819: PPUSH
6820: CALL_OW 88
6824: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6825: LD_INT 22
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 21
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 50
6847: PUSH
6848: EMPTY
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: LIST
6855: PPUSH
6856: CALL_OW 69
6860: PUSH
6861: LD_INT 0
6863: EQUAL
6864: IFFALSE 7112
6866: GO 6868
6868: DISABLE
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6873: LD_ADDR_VAR 0 1
6877: PUSH
6878: LD_INT 22
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 21
6890: PUSH
6891: LD_INT 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 50
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: PPUSH
6909: CALL_OW 69
6913: PUSH
6914: LD_EXP 46
6918: PUSH
6919: LD_EXP 54
6923: PUSH
6924: LD_EXP 51
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: DIFF
6934: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6935: LD_ADDR_VAR 0 2
6939: PUSH
6940: LD_VAR 0 1
6944: PPUSH
6945: LD_INT 26
6947: PUSH
6948: LD_INT 1
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PPUSH
6955: CALL_OW 72
6959: ST_TO_ADDR
// DialogueOn ;
6960: CALL_OW 6
// if IsOK ( Belkov ) then
6964: LD_EXP 51
6968: PPUSH
6969: CALL_OW 302
6973: IFFALSE 6987
// Say ( Belkov , D10-Bel-1 ) ;
6975: LD_EXP 51
6979: PPUSH
6980: LD_STRING D10-Bel-1
6982: PPUSH
6983: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6987: LD_VAR 0 1
6991: PUSH
6992: LD_INT 0
6994: GREATER
6995: PUSH
6996: LD_VAR 0 2
7000: PUSH
7001: LD_INT 0
7003: GREATER
7004: PUSH
7005: LD_EXP 51
7009: PPUSH
7010: CALL_OW 302
7014: OR
7015: AND
7016: IFFALSE 7083
// begin Say ( Burlak , D10-Bur-1 ) ;
7018: LD_EXP 46
7022: PPUSH
7023: LD_STRING D10-Bur-1
7025: PPUSH
7026: CALL_OW 88
// if IsOK ( Belkov ) then
7030: LD_EXP 51
7034: PPUSH
7035: CALL_OW 302
7039: IFFALSE 7055
// Say ( Belkov , D10-Bel-1a ) else
7041: LD_EXP 51
7045: PPUSH
7046: LD_STRING D10-Bel-1a
7048: PPUSH
7049: CALL_OW 88
7053: GO 7071
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7055: LD_VAR 0 2
7059: PUSH
7060: LD_INT 1
7062: ARRAY
7063: PPUSH
7064: LD_STRING D10-RSol1-1
7066: PPUSH
7067: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7071: LD_EXP 46
7075: PPUSH
7076: LD_STRING D10-Bur-2
7078: PPUSH
7079: CALL_OW 88
// end ; DialogueOff ;
7083: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7087: LD_STRING M4a
7089: PPUSH
7090: CALL_OW 337
// evacuationAvailable = true ;
7094: LD_ADDR_EXP 22
7098: PUSH
7099: LD_INT 1
7101: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7102: LD_INT 1
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: CALL_OW 424
// end ;
7112: PPOPN 2
7114: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7115: LD_EXP 22
7119: PUSH
7120: LD_EXP 25
7124: NOT
7125: AND
7126: IFFALSE 7736
7128: GO 7130
7130: DISABLE
7131: LD_INT 0
7133: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7134: LD_EXP 53
7138: PPUSH
7139: LD_INT 22
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 49
// wait ( 0 0$3 ) ;
7149: LD_INT 105
7151: PPUSH
7152: CALL_OW 67
// jelenaSpawned = true ;
7156: LD_ADDR_EXP 25
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7164: LD_INT 22
7166: PUSH
7167: LD_INT 3
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 21
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 50
7186: PUSH
7187: EMPTY
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: PPUSH
7195: CALL_OW 69
7199: PPUSH
7200: LD_EXP 53
7204: PPUSH
7205: CALL_OW 74
7209: PPUSH
7210: LD_EXP 53
7214: PPUSH
7215: CALL_OW 296
7219: PUSH
7220: LD_INT 9
7222: LESS
7223: IFFALSE 7227
// exit ;
7225: GO 7736
// DialogueOn ;
7227: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7231: LD_EXP 53
7235: PPUSH
7236: LD_STRING D11b-Kir-1
7238: PPUSH
7239: CALL_OW 94
// if IsOK ( Belkov ) then
7243: LD_EXP 51
7247: PPUSH
7248: CALL_OW 302
7252: IFFALSE 7280
// begin Say ( Belkov , D11b-Bel-1 ) ;
7254: LD_EXP 51
7258: PPUSH
7259: LD_STRING D11b-Bel-1
7261: PPUSH
7262: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7266: LD_EXP 51
7270: PPUSH
7271: LD_STRING D11b-Bel-1a
7273: PPUSH
7274: CALL_OW 94
// end else
7278: GO 7335
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_INT 22
7287: PUSH
7288: LD_INT 3
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 21
7297: PUSH
7298: LD_INT 1
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 50
7307: PUSH
7308: EMPTY
7309: LIST
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 69
7320: PPUSH
7321: LD_STRING D11b-RSol1-1
7323: PPUSH
7324: LD_STRING D11b-RFSol1-1
7326: PPUSH
7327: LD_INT 0
7329: PPUSH
7330: CALL 8113 0 4
7334: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7335: LD_INT 24
7337: PPUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 0
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 25
7350: PUSH
7351: LD_INT 12
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 70
7366: PUSH
7367: LD_INT 0
7369: GREATER
7370: IFFALSE 7386
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7372: LD_EXP 53
7376: PPUSH
7377: LD_STRING D11b1-Kir-1
7379: PPUSH
7380: CALL_OW 94
7384: GO 7398
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7386: LD_EXP 53
7390: PPUSH
7391: LD_STRING D11b2-Kir-1
7393: PPUSH
7394: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7398: LD_EXP 6
7402: PUSH
7403: LD_INT 24
7405: PPUSH
7406: LD_INT 22
7408: PUSH
7409: LD_INT 0
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 25
7418: PUSH
7419: LD_INT 12
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 70
7434: PUSH
7435: LD_INT 0
7437: GREATER
7438: AND
7439: IFFALSE 7574
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7441: LD_EXP 46
7445: PPUSH
7446: LD_STRING D11b1-Bur-1
7448: PPUSH
7449: CALL_OW 88
// if IsOk ( Belkov ) then
7453: LD_EXP 51
7457: PPUSH
7458: CALL_OW 302
7462: IFFALSE 7478
// Say ( Belkov , D11b2-Bel-1 ) else
7464: LD_EXP 51
7468: PPUSH
7469: LD_STRING D11b2-Bel-1
7471: PPUSH
7472: CALL_OW 88
7476: GO 7519
// begin if GetSex ( randomSold ) = sex_male then
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 258
7487: PUSH
7488: LD_INT 1
7490: EQUAL
7491: IFFALSE 7507
// Say ( randomSold , D11b1-RSol1-1 ) else
7493: LD_VAR 0 1
7497: PPUSH
7498: LD_STRING D11b1-RSol1-1
7500: PPUSH
7501: CALL_OW 88
7505: GO 7519
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_STRING D11b1-RFSol1-1
7514: PPUSH
7515: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7519: LD_INT 22
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 50
7541: PUSH
7542: EMPTY
7543: LIST
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: PPUSH
7550: CALL_OW 69
7554: PPUSH
7555: LD_STRING D11b1-RSol1-1
7557: PPUSH
7558: LD_STRING D11b1-RFSol1-1
7560: PPUSH
7561: LD_INT 0
7563: PPUSH
7564: CALL 8113 0 4
// DialogueOff ;
7568: CALL_OW 7
// exit ;
7572: GO 7736
// end ; if spotWaterfall then
7574: LD_EXP 7
7578: IFFALSE 7664
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7580: LD_EXP 46
7584: PPUSH
7585: LD_STRING D11b1-Bur-1a
7587: PPUSH
7588: CALL_OW 88
// if IsOk ( Belkov ) then
7592: LD_EXP 51
7596: PPUSH
7597: CALL_OW 302
7601: IFFALSE 7617
// Say ( Belkov , D11b2-Bel-1 ) else
7603: LD_EXP 51
7607: PPUSH
7608: LD_STRING D11b2-Bel-1
7610: PPUSH
7611: CALL_OW 88
7615: GO 7658
// begin if GetSex ( randomSold ) = sex_male then
7617: LD_VAR 0 1
7621: PPUSH
7622: CALL_OW 258
7626: PUSH
7627: LD_INT 1
7629: EQUAL
7630: IFFALSE 7646
// Say ( randomSold , D11b1-RSol1-1 ) else
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_STRING D11b1-RSol1-1
7639: PPUSH
7640: CALL_OW 88
7644: GO 7658
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7646: LD_VAR 0 1
7650: PPUSH
7651: LD_STRING D11b1-RFSol1-1
7653: PPUSH
7654: CALL_OW 88
// end ; DialogueOff ;
7658: CALL_OW 7
// exit ;
7662: GO 7736
// end ; if IsOk ( Belkov ) then
7664: LD_EXP 51
7668: PPUSH
7669: CALL_OW 302
7673: IFFALSE 7689
// Say ( Belkov , D11b1-Bel-1 ) else
7675: LD_EXP 51
7679: PPUSH
7680: LD_STRING D11b1-Bel-1
7682: PPUSH
7683: CALL_OW 88
7687: GO 7730
// begin if GetSex ( randomSold ) = sex_male then
7689: LD_VAR 0 1
7693: PPUSH
7694: CALL_OW 258
7698: PUSH
7699: LD_INT 1
7701: EQUAL
7702: IFFALSE 7718
// Say ( randomSold , D11b1-RSol1-1 ) else
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_STRING D11b1-RSol1-1
7711: PPUSH
7712: CALL_OW 88
7716: GO 7730
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7718: LD_VAR 0 1
7722: PPUSH
7723: LD_STRING D11b1-RFSol1-1
7725: PPUSH
7726: CALL_OW 88
// end ; DialogueOff ;
7730: CALL_OW 7
// exit ;
7734: GO 7736
// end ;
7736: PPOPN 1
7738: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7739: LD_INT 3
7741: PPUSH
7742: LD_EXP 53
7746: PPUSH
7747: CALL_OW 292
7751: PUSH
7752: LD_EXP 25
7756: AND
7757: IFFALSE 7993
7759: GO 7761
7761: DISABLE
7762: LD_INT 0
7764: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7765: LD_EXP 53
7769: PPUSH
7770: LD_INT 3
7772: PPUSH
7773: CALL_OW 235
// jelenaSaved = true ;
7777: LD_ADDR_EXP 21
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7785: LD_EXP 53
7789: PPUSH
7790: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7794: LD_ADDR_VAR 0 1
7798: PUSH
7799: LD_INT 22
7801: PUSH
7802: LD_INT 3
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 21
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 50
7821: PUSH
7822: EMPTY
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: PUSH
7835: LD_EXP 53
7839: DIFF
7840: PPUSH
7841: LD_EXP 53
7845: PPUSH
7846: CALL_OW 74
7850: ST_TO_ADDR
// DialogueOn ;
7851: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7855: LD_EXP 53
7859: PPUSH
7860: LD_STRING D11a-Kir-1
7862: PPUSH
7863: CALL_OW 88
// if nearUnit = Belkov then
7867: LD_VAR 0 1
7871: PUSH
7872: LD_EXP 51
7876: EQUAL
7877: IFFALSE 7917
// begin Say ( Belkov , D11a-Bel-1 ) ;
7879: LD_EXP 51
7883: PPUSH
7884: LD_STRING D11a-Bel-1
7886: PPUSH
7887: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7891: LD_EXP 53
7895: PPUSH
7896: LD_STRING D11a-Kir-2
7898: PPUSH
7899: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7903: LD_EXP 51
7907: PPUSH
7908: LD_STRING D11a-Bel-2
7910: PPUSH
7911: CALL_OW 88
// end else
7915: GO 7958
// begin if GetSex ( nearUnit ) = sex_male then
7917: LD_VAR 0 1
7921: PPUSH
7922: CALL_OW 258
7926: PUSH
7927: LD_INT 1
7929: EQUAL
7930: IFFALSE 7946
// Say ( nearUnit , D11a-RSol1-2 ) else
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_STRING D11a-RSol1-2
7939: PPUSH
7940: CALL_OW 88
7944: GO 7958
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7946: LD_VAR 0 1
7950: PPUSH
7951: LD_STRING D11a-RFSol1-2
7953: PPUSH
7954: CALL_OW 88
// end ; DialogueOff ;
7958: CALL_OW 7
// wait ( 0 0$5 ) ;
7962: LD_INT 175
7964: PPUSH
7965: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7969: LD_EXP 53
7973: PPUSH
7974: LD_STRING D11c-Kir-1
7976: PPUSH
7977: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7981: LD_EXP 46
7985: PPUSH
7986: LD_STRING D11c-Bur-1
7988: PPUSH
7989: CALL_OW 88
// end ;
7993: PPOPN 1
7995: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7996: LD_EXP 22
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_INT 22
8006: PUSH
8007: LD_INT 3
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 21
8016: PUSH
8017: LD_INT 1
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PPUSH
8028: CALL_OW 70
8032: PUSH
8033: LD_INT 0
8035: GREATER
8036: AND
8037: IFFALSE 8049
8039: GO 8041
8041: DISABLE
// begin Query ( QExit1 ) ;
8042: LD_STRING QExit1
8044: PPUSH
8045: CALL_OW 97
// end ; end_of_file
8049: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// if exist_mode then
8054: LD_VAR 0 2
8058: IFFALSE 8083
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_EXP 31
8069: PUSH
8070: LD_VAR 0 1
8074: STR
8075: PPUSH
8076: CALL_OW 34
8080: ST_TO_ADDR
8081: GO 8098
// unit := NewCharacter ( ident ) ;
8083: LD_ADDR_VAR 0 4
8087: PUSH
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 25
8097: ST_TO_ADDR
// result := unit ;
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_VAR 0 4
8107: ST_TO_ADDR
// end ;
8108: LD_VAR 0 3
8112: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8113: LD_INT 0
8115: PPUSH
8116: PPUSH
8117: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8118: LD_ADDR_VAR 0 1
8122: PUSH
8123: LD_VAR 0 1
8127: PUSH
8128: LD_EXP 46
8132: PUSH
8133: LD_EXP 54
8137: PUSH
8138: LD_EXP 51
8142: PUSH
8143: LD_EXP 53
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: DIFF
8154: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8155: LD_ADDR_VAR 0 7
8159: PUSH
8160: LD_VAR 0 1
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_VAR 0 1
8172: PPUSH
8173: CALL_OW 12
8177: ARRAY
8178: ST_TO_ADDR
// if radio then
8179: LD_VAR 0 4
8183: IFFALSE 8232
// begin if GetSex ( speaker ) = sex_male then
8185: LD_VAR 0 7
8189: PPUSH
8190: CALL_OW 258
8194: PUSH
8195: LD_INT 1
8197: EQUAL
8198: IFFALSE 8216
// SayRadio ( speaker , dialogMID ) else
8200: LD_VAR 0 7
8204: PPUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: CALL_OW 94
8214: GO 8230
// SayRadio ( speaker , dialogFID ) ;
8216: LD_VAR 0 7
8220: PPUSH
8221: LD_VAR 0 3
8225: PPUSH
8226: CALL_OW 94
// end else
8230: GO 8277
// begin if GetSex ( speaker ) = sex_male then
8232: LD_VAR 0 7
8236: PPUSH
8237: CALL_OW 258
8241: PUSH
8242: LD_INT 1
8244: EQUAL
8245: IFFALSE 8263
// Say ( speaker , dialogMID ) else
8247: LD_VAR 0 7
8251: PPUSH
8252: LD_VAR 0 2
8256: PPUSH
8257: CALL_OW 88
8261: GO 8277
// Say ( speaker , dialogFID ) ;
8263: LD_VAR 0 7
8267: PPUSH
8268: LD_VAR 0 3
8272: PPUSH
8273: CALL_OW 88
// end ; result := speaker ;
8277: LD_ADDR_VAR 0 5
8281: PUSH
8282: LD_VAR 0 7
8286: ST_TO_ADDR
// end ;
8287: LD_VAR 0 5
8291: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8292: LD_INT 0
8294: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8295: LD_VAR 0 1
8299: PPUSH
8300: CALL_OW 255
8304: PUSH
8305: LD_OWVAR 2
8309: EQUAL
8310: PUSH
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 302
8320: AND
8321: IFFALSE 8343
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8323: LD_VAR 0 1
8327: PPUSH
8328: LD_EXP 30
8332: PUSH
8333: LD_VAR 0 2
8337: STR
8338: PPUSH
8339: CALL_OW 38
// end ;
8343: LD_VAR 0 3
8347: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8348: LD_INT 0
8350: PPUSH
8351: PPUSH
8352: PPUSH
// resultCharactersToSave = [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for unit in characters do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: LD_VAR 0 1
8369: PUSH
8370: FOR_IN
8371: IFFALSE 8419
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8373: LD_VAR 0 4
8377: PPUSH
8378: CALL_OW 255
8382: PUSH
8383: LD_OWVAR 2
8387: EQUAL
8388: PUSH
8389: LD_VAR 0 4
8393: PPUSH
8394: CALL_OW 302
8398: AND
8399: IFFALSE 8417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8401: LD_ADDR_VAR 0 5
8405: PUSH
8406: LD_VAR 0 5
8410: PUSH
8411: LD_VAR 0 4
8415: ADD
8416: ST_TO_ADDR
8417: GO 8370
8419: POP
8420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8421: LD_VAR 0 5
8425: PPUSH
8426: LD_EXP 30
8430: PUSH
8431: LD_VAR 0 2
8435: STR
8436: PPUSH
8437: CALL_OW 38
// end ;
8441: LD_VAR 0 3
8445: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
8453: PPUSH
8454: PPUSH
8455: PPUSH
8456: PPUSH
8457: PPUSH
8458: PPUSH
8459: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 302
8469: NOT
8470: PUSH
8471: LD_VAR 0 4
8475: PUSH
8476: LD_INT 1
8478: EQUAL
8479: OR
8480: PUSH
8481: LD_VAR 0 2
8485: PPUSH
8486: LD_VAR 0 3
8490: PPUSH
8491: CALL_OW 488
8495: NOT
8496: OR
8497: PUSH
8498: LD_VAR 0 1
8502: PPUSH
8503: LD_VAR 0 2
8507: PPUSH
8508: LD_VAR 0 3
8512: PPUSH
8513: CALL_OW 297
8517: PUSH
8518: LD_VAR 0 4
8522: GREATEREQUAL
8523: OR
8524: PUSH
8525: LD_VAR 0 5
8529: PUSH
8530: LD_INT 1
8532: PUSH
8533: LD_INT 0
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: IN
8540: NOT
8541: OR
8542: IFFALSE 8546
// exit ;
8544: GO 10103
// attempts = 0 ;
8546: LD_ADDR_VAR 0 17
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8554: LD_ADDR_VAR 0 7
8558: PUSH
8559: EMPTY
8560: ST_TO_ADDR
// list_coords = [ ] ;
8561: LD_ADDR_VAR 0 8
8565: PUSH
8566: EMPTY
8567: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8568: LD_ADDR_VAR 0 9
8572: PUSH
8573: LD_VAR 0 2
8577: PPUSH
8578: LD_VAR 0 3
8582: PPUSH
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 250
8592: PPUSH
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 251
8602: PPUSH
8603: CALL 10108 0 4
8607: ST_TO_ADDR
// if attempts = 0 then
8608: LD_VAR 0 17
8612: PUSH
8613: LD_INT 0
8615: EQUAL
8616: IFFALSE 8724
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8618: LD_ADDR_VAR 0 10
8622: PUSH
8623: LD_VAR 0 9
8627: PUSH
8628: LD_VAR 0 9
8632: PUSH
8633: LD_INT 1
8635: PLUS
8636: PUSH
8637: LD_VAR 0 9
8641: PUSH
8642: LD_INT 1
8644: MINUS
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8651: LD_VAR 0 10
8655: PUSH
8656: LD_INT 2
8658: ARRAY
8659: PUSH
8660: LD_INT 6
8662: EQUAL
8663: IFFALSE 8686
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8665: LD_ADDR_VAR 0 10
8669: PUSH
8670: LD_VAR 0 10
8674: PPUSH
8675: LD_INT 2
8677: PPUSH
8678: LD_INT 0
8680: PPUSH
8681: CALL_OW 1
8685: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8686: LD_VAR 0 10
8690: PUSH
8691: LD_INT 3
8693: ARRAY
8694: PUSH
8695: LD_INT 1
8697: NEG
8698: EQUAL
8699: IFFALSE 8722
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8701: LD_ADDR_VAR 0 10
8705: PUSH
8706: LD_VAR 0 10
8710: PPUSH
8711: LD_INT 3
8713: PPUSH
8714: LD_INT 5
8716: PPUSH
8717: CALL_OW 1
8721: ST_TO_ADDR
// end else
8722: GO 8761
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8724: LD_ADDR_VAR 0 10
8728: PUSH
8729: LD_INT 0
8731: PUSH
8732: LD_INT 1
8734: PUSH
8735: LD_INT 2
8737: PUSH
8738: LD_INT 3
8740: PUSH
8741: LD_INT 4
8743: PUSH
8744: LD_INT 5
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: LD_VAR 0 9
8759: DIFF
8760: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8761: LD_ADDR_VAR 0 14
8765: PUSH
8766: DOUBLE
8767: LD_INT 1
8769: DEC
8770: ST_TO_ADDR
8771: LD_VAR 0 10
8775: PUSH
8776: LD_INT 0
8778: PLUS
8779: PUSH
8780: FOR_TO
8781: IFFALSE 9103
// case dir_list [ c ] of 0 :
8783: LD_VAR 0 10
8787: PUSH
8788: LD_VAR 0 14
8792: ARRAY
8793: PUSH
8794: LD_INT 0
8796: DOUBLE
8797: EQUAL
8798: IFTRUE 8802
8800: GO 8843
8802: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8803: LD_ADDR_VAR 0 8
8807: PUSH
8808: LD_VAR 0 8
8812: PPUSH
8813: LD_INT 1
8815: PPUSH
8816: LD_VAR 0 2
8820: PUSH
8821: LD_VAR 0 3
8825: PUSH
8826: LD_VAR 0 4
8830: MINUS
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 2
8840: ST_TO_ADDR
8841: GO 9101
8843: LD_INT 1
8845: DOUBLE
8846: EQUAL
8847: IFTRUE 8851
8849: GO 8892
8851: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8852: LD_ADDR_VAR 0 8
8856: PUSH
8857: LD_VAR 0 8
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: LD_VAR 0 2
8869: PUSH
8870: LD_VAR 0 4
8874: PLUS
8875: PUSH
8876: LD_VAR 0 3
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PPUSH
8885: CALL_OW 2
8889: ST_TO_ADDR
8890: GO 9101
8892: LD_INT 2
8894: DOUBLE
8895: EQUAL
8896: IFTRUE 8900
8898: GO 8947
8900: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8901: LD_ADDR_VAR 0 8
8905: PUSH
8906: LD_VAR 0 8
8910: PPUSH
8911: LD_INT 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: PLUS
8924: PUSH
8925: LD_VAR 0 3
8929: PUSH
8930: LD_VAR 0 4
8934: PLUS
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 2
8944: ST_TO_ADDR
8945: GO 9101
8947: LD_INT 3
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 8996
8955: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8956: LD_ADDR_VAR 0 8
8960: PUSH
8961: LD_VAR 0 8
8965: PPUSH
8966: LD_INT 1
8968: PPUSH
8969: LD_VAR 0 2
8973: PUSH
8974: LD_VAR 0 3
8978: PUSH
8979: LD_VAR 0 4
8983: PLUS
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
8994: GO 9101
8996: LD_INT 4
8998: DOUBLE
8999: EQUAL
9000: IFTRUE 9004
9002: GO 9045
9004: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9005: LD_ADDR_VAR 0 8
9009: PUSH
9010: LD_VAR 0 8
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_VAR 0 2
9022: PUSH
9023: LD_VAR 0 4
9027: MINUS
9028: PUSH
9029: LD_VAR 0 3
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 2
9042: ST_TO_ADDR
9043: GO 9101
9045: LD_INT 5
9047: DOUBLE
9048: EQUAL
9049: IFTRUE 9053
9051: GO 9100
9053: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9054: LD_ADDR_VAR 0 8
9058: PUSH
9059: LD_VAR 0 8
9063: PPUSH
9064: LD_INT 1
9066: PPUSH
9067: LD_VAR 0 2
9071: PUSH
9072: LD_VAR 0 4
9076: MINUS
9077: PUSH
9078: LD_VAR 0 3
9082: PUSH
9083: LD_VAR 0 4
9087: MINUS
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 2
9097: ST_TO_ADDR
9098: GO 9101
9100: POP
9101: GO 8780
9103: POP
9104: POP
// if dist < 30 then
9105: LD_VAR 0 4
9109: PUSH
9110: LD_INT 30
9112: LESS
9113: IFFALSE 9125
// c = 1 else
9115: LD_ADDR_VAR 0 14
9119: PUSH
9120: LD_INT 1
9122: ST_TO_ADDR
9123: GO 9133
// c = 2 ;
9125: LD_ADDR_VAR 0 14
9129: PUSH
9130: LD_INT 2
9132: ST_TO_ADDR
// b = 1 ;
9133: LD_ADDR_VAR 0 11
9137: PUSH
9138: LD_INT 1
9140: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9141: LD_VAR 0 11
9145: PUSH
9146: LD_VAR 0 4
9150: PUSH
9151: LD_INT 1
9153: MINUS
9154: LESSEQUAL
9155: IFFALSE 9583
// begin if 0 in dir_list and 1 in dir_list then
9157: LD_INT 0
9159: PUSH
9160: LD_VAR 0 10
9164: IN
9165: PUSH
9166: LD_INT 1
9168: PUSH
9169: LD_VAR 0 10
9173: IN
9174: AND
9175: IFFALSE 9227
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9177: LD_ADDR_VAR 0 8
9181: PUSH
9182: LD_VAR 0 8
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: LD_VAR 0 2
9194: PUSH
9195: LD_VAR 0 11
9199: PLUS
9200: PUSH
9201: LD_VAR 0 3
9205: PUSH
9206: LD_VAR 0 4
9210: MINUS
9211: PUSH
9212: LD_VAR 0 11
9216: PLUS
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 2
9226: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9227: LD_INT 1
9229: PUSH
9230: LD_VAR 0 10
9234: IN
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: LD_VAR 0 10
9243: IN
9244: AND
9245: IFFALSE 9291
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9247: LD_ADDR_VAR 0 8
9251: PUSH
9252: LD_VAR 0 8
9256: PPUSH
9257: LD_INT 1
9259: PPUSH
9260: LD_VAR 0 2
9264: PUSH
9265: LD_VAR 0 4
9269: PLUS
9270: PUSH
9271: LD_VAR 0 3
9275: PUSH
9276: LD_VAR 0 11
9280: PLUS
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PPUSH
9286: CALL_OW 2
9290: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9291: LD_INT 2
9293: PUSH
9294: LD_VAR 0 10
9298: IN
9299: PUSH
9300: LD_INT 3
9302: PUSH
9303: LD_VAR 0 10
9307: IN
9308: AND
9309: IFFALSE 9361
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9311: LD_ADDR_VAR 0 8
9315: PUSH
9316: LD_VAR 0 8
9320: PPUSH
9321: LD_INT 1
9323: PPUSH
9324: LD_VAR 0 2
9328: PUSH
9329: LD_VAR 0 4
9333: PLUS
9334: PUSH
9335: LD_VAR 0 11
9339: MINUS
9340: PUSH
9341: LD_VAR 0 3
9345: PUSH
9346: LD_VAR 0 4
9350: PLUS
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: CALL_OW 2
9360: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9361: LD_INT 3
9363: PUSH
9364: LD_VAR 0 10
9368: IN
9369: PUSH
9370: LD_INT 4
9372: PUSH
9373: LD_VAR 0 10
9377: IN
9378: AND
9379: IFFALSE 9431
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9381: LD_ADDR_VAR 0 8
9385: PUSH
9386: LD_VAR 0 8
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_VAR 0 2
9398: PUSH
9399: LD_VAR 0 11
9403: MINUS
9404: PUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_VAR 0 4
9414: PLUS
9415: PUSH
9416: LD_VAR 0 11
9420: MINUS
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 2
9430: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9431: LD_INT 4
9433: PUSH
9434: LD_VAR 0 10
9438: IN
9439: PUSH
9440: LD_INT 5
9442: PUSH
9443: LD_VAR 0 10
9447: IN
9448: AND
9449: IFFALSE 9495
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9451: LD_ADDR_VAR 0 8
9455: PUSH
9456: LD_VAR 0 8
9460: PPUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 2
9468: PUSH
9469: LD_VAR 0 4
9473: MINUS
9474: PUSH
9475: LD_VAR 0 3
9479: PUSH
9480: LD_VAR 0 11
9484: MINUS
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 2
9494: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9495: LD_INT 5
9497: PUSH
9498: LD_VAR 0 10
9502: IN
9503: PUSH
9504: LD_INT 0
9506: PUSH
9507: LD_VAR 0 10
9511: IN
9512: AND
9513: IFFALSE 9565
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9515: LD_ADDR_VAR 0 8
9519: PUSH
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 2
9532: PUSH
9533: LD_VAR 0 4
9537: MINUS
9538: PUSH
9539: LD_VAR 0 11
9543: PLUS
9544: PUSH
9545: LD_VAR 0 3
9549: PUSH
9550: LD_VAR 0 4
9554: MINUS
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 2
9564: ST_TO_ADDR
// b = b + c end ;
9565: LD_ADDR_VAR 0 11
9569: PUSH
9570: LD_VAR 0 11
9574: PUSH
9575: LD_VAR 0 14
9579: PLUS
9580: ST_TO_ADDR
9581: GO 9141
// if list_coords = 0 then
9583: LD_VAR 0 8
9587: PUSH
9588: LD_INT 0
9590: EQUAL
9591: IFFALSE 9595
// exit ;
9593: GO 10103
// repeat min_dist = 5000 ;
9595: LD_ADDR_VAR 0 12
9599: PUSH
9600: LD_INT 5000
9602: ST_TO_ADDR
// for b in list_coords do
9603: LD_ADDR_VAR 0 11
9607: PUSH
9608: LD_VAR 0 8
9612: PUSH
9613: FOR_IN
9614: IFFALSE 9673
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9616: LD_ADDR_VAR 0 13
9620: PUSH
9621: LD_VAR 0 1
9625: PPUSH
9626: LD_VAR 0 11
9630: PUSH
9631: LD_INT 1
9633: ARRAY
9634: PPUSH
9635: LD_VAR 0 11
9639: PUSH
9640: LD_INT 2
9642: ARRAY
9643: PPUSH
9644: CALL_OW 297
9648: ST_TO_ADDR
// if temp_dist < min_dist then
9649: LD_VAR 0 13
9653: PUSH
9654: LD_VAR 0 12
9658: LESS
9659: IFFALSE 9671
// min_dist = temp_dist ;
9661: LD_ADDR_VAR 0 12
9665: PUSH
9666: LD_VAR 0 13
9670: ST_TO_ADDR
// end ;
9671: GO 9613
9673: POP
9674: POP
// c = 0 ;
9675: LD_ADDR_VAR 0 14
9679: PUSH
9680: LD_INT 0
9682: ST_TO_ADDR
// repeat c = c + 1 ;
9683: LD_ADDR_VAR 0 14
9687: PUSH
9688: LD_VAR 0 14
9692: PUSH
9693: LD_INT 1
9695: PLUS
9696: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9697: LD_VAR 0 1
9701: PPUSH
9702: LD_VAR 0 8
9706: PUSH
9707: LD_VAR 0 14
9711: ARRAY
9712: PUSH
9713: LD_INT 1
9715: ARRAY
9716: PPUSH
9717: LD_VAR 0 8
9721: PUSH
9722: LD_VAR 0 14
9726: ARRAY
9727: PUSH
9728: LD_INT 2
9730: ARRAY
9731: PPUSH
9732: CALL_OW 297
9736: PUSH
9737: LD_VAR 0 12
9741: EQUAL
9742: IFFALSE 9807
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9744: LD_ADDR_VAR 0 7
9748: PUSH
9749: LD_VAR 0 7
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: LD_VAR 0 8
9761: PUSH
9762: LD_VAR 0 14
9766: ARRAY
9767: PPUSH
9768: CALL_OW 2
9772: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9773: LD_ADDR_VAR 0 8
9777: PUSH
9778: LD_VAR 0 8
9782: PPUSH
9783: LD_VAR 0 14
9787: PPUSH
9788: CALL_OW 3
9792: ST_TO_ADDR
// c = c - 1 ;
9793: LD_ADDR_VAR 0 14
9797: PUSH
9798: LD_VAR 0 14
9802: PUSH
9803: LD_INT 1
9805: MINUS
9806: ST_TO_ADDR
// end ; until c = list_coords ;
9807: LD_VAR 0 14
9811: PUSH
9812: LD_VAR 0 8
9816: EQUAL
9817: IFFALSE 9683
// c = 0 ;
9819: LD_ADDR_VAR 0 14
9823: PUSH
9824: LD_INT 0
9826: ST_TO_ADDR
// if list_nearest > 0 then
9827: LD_VAR 0 7
9831: PUSH
9832: LD_INT 0
9834: GREATER
9835: IFFALSE 9977
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9837: LD_ADDR_VAR 0 15
9841: PUSH
9842: LD_INT 1
9844: PPUSH
9845: LD_VAR 0 7
9849: PPUSH
9850: CALL_OW 12
9854: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9855: LD_ADDR_VAR 0 16
9859: PUSH
9860: LD_VAR 0 7
9864: PUSH
9865: LD_VAR 0 15
9869: ARRAY
9870: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9871: LD_VAR 0 16
9875: PUSH
9876: LD_INT 1
9878: ARRAY
9879: PPUSH
9880: LD_VAR 0 16
9884: PUSH
9885: LD_INT 2
9887: ARRAY
9888: PPUSH
9889: CALL_OW 488
9893: PUSH
9894: LD_INT 0
9896: GREATER
9897: PUSH
9898: LD_VAR 0 16
9902: PUSH
9903: LD_INT 1
9905: ARRAY
9906: PPUSH
9907: LD_VAR 0 16
9911: PUSH
9912: LD_INT 2
9914: ARRAY
9915: PPUSH
9916: CALL_OW 428
9920: PUSH
9921: LD_INT 0
9923: EQUAL
9924: AND
9925: IFFALSE 9937
// c = 1 else
9927: LD_ADDR_VAR 0 14
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
9935: GO 9957
// list_nearest = Delete ( list_nearest , rand_num ) ;
9937: LD_ADDR_VAR 0 7
9941: PUSH
9942: LD_VAR 0 7
9946: PPUSH
9947: LD_VAR 0 15
9951: PPUSH
9952: CALL_OW 3
9956: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9957: LD_VAR 0 14
9961: PUSH
9962: LD_INT 1
9964: EQUAL
9965: PUSH
9966: LD_VAR 0 7
9970: PUSH
9971: LD_INT 0
9973: EQUAL
9974: OR
9975: IFFALSE 9837
// end ; until c = 1 or list_coords = 0 ;
9977: LD_VAR 0 14
9981: PUSH
9982: LD_INT 1
9984: EQUAL
9985: PUSH
9986: LD_VAR 0 8
9990: PUSH
9991: LD_INT 0
9993: EQUAL
9994: OR
9995: IFFALSE 9595
// attempts = attempts + 1 ;
9997: LD_ADDR_VAR 0 17
10001: PUSH
10002: LD_VAR 0 17
10006: PUSH
10007: LD_INT 1
10009: PLUS
10010: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10011: LD_VAR 0 14
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: PUSH
10020: LD_VAR 0 17
10024: PUSH
10025: LD_INT 1
10027: GREATER
10028: OR
10029: IFFALSE 8554
// if c = 1 then
10031: LD_VAR 0 14
10035: PUSH
10036: LD_INT 1
10038: EQUAL
10039: IFFALSE 10103
// if add then
10041: LD_VAR 0 5
10045: IFFALSE 10076
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10047: LD_VAR 0 1
10051: PPUSH
10052: LD_VAR 0 16
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: LD_VAR 0 16
10065: PUSH
10066: LD_INT 2
10068: ARRAY
10069: PPUSH
10070: CALL_OW 171
10074: GO 10103
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10076: LD_VAR 0 1
10080: PPUSH
10081: LD_VAR 0 16
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_VAR 0 16
10094: PUSH
10095: LD_INT 2
10097: ARRAY
10098: PPUSH
10099: CALL_OW 111
// end ;
10103: LD_VAR 0 6
10107: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
10112: PPUSH
10113: PPUSH
10114: PPUSH
10115: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10116: LD_VAR 0 1
10120: PPUSH
10121: LD_VAR 0 2
10125: PPUSH
10126: CALL_OW 488
10130: NOT
10131: PUSH
10132: LD_VAR 0 3
10136: PPUSH
10137: LD_VAR 0 4
10141: PPUSH
10142: CALL_OW 488
10146: NOT
10147: OR
10148: IFFALSE 10161
// begin result = - 1 ;
10150: LD_ADDR_VAR 0 5
10154: PUSH
10155: LD_INT 1
10157: NEG
10158: ST_TO_ADDR
// exit ;
10159: GO 10321
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_VAR 0 2
10175: PPUSH
10176: LD_VAR 0 3
10180: PPUSH
10181: LD_VAR 0 4
10185: PPUSH
10186: CALL_OW 298
10190: ST_TO_ADDR
// dist_2 = 99999 ;
10191: LD_ADDR_VAR 0 7
10195: PUSH
10196: LD_INT 99999
10198: ST_TO_ADDR
// for b = 0 to 5 do
10199: LD_ADDR_VAR 0 8
10203: PUSH
10204: DOUBLE
10205: LD_INT 0
10207: DEC
10208: ST_TO_ADDR
10209: LD_INT 5
10211: PUSH
10212: FOR_TO
10213: IFFALSE 10309
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10215: LD_ADDR_VAR 0 9
10219: PUSH
10220: LD_VAR 0 1
10224: PPUSH
10225: LD_VAR 0 8
10229: PPUSH
10230: LD_VAR 0 6
10234: PPUSH
10235: CALL_OW 272
10239: PPUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: LD_VAR 0 8
10249: PPUSH
10250: LD_VAR 0 6
10254: PPUSH
10255: CALL_OW 273
10259: PPUSH
10260: LD_VAR 0 3
10264: PPUSH
10265: LD_VAR 0 4
10269: PPUSH
10270: CALL_OW 298
10274: ST_TO_ADDR
// if temp_dist < dist_2 then
10275: LD_VAR 0 9
10279: PUSH
10280: LD_VAR 0 7
10284: LESS
10285: IFFALSE 10307
// begin dist_2 = temp_dist ;
10287: LD_ADDR_VAR 0 7
10291: PUSH
10292: LD_VAR 0 9
10296: ST_TO_ADDR
// dir = b ;
10297: LD_ADDR_VAR 0 10
10301: PUSH
10302: LD_VAR 0 8
10306: ST_TO_ADDR
// end ; end ;
10307: GO 10212
10309: POP
10310: POP
// result = dir ;
10311: LD_ADDR_VAR 0 5
10315: PUSH
10316: LD_VAR 0 10
10320: ST_TO_ADDR
// end ;
10321: LD_VAR 0 5
10325: RET
// export function MoveToHill ; begin
10326: LD_INT 0
10328: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10329: LD_EXP 47
10333: PPUSH
10334: LD_INT 65
10336: PPUSH
10337: LD_INT 59
10339: PPUSH
10340: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10344: LD_EXP 47
10348: PPUSH
10349: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10353: LD_EXP 48
10357: PPUSH
10358: LD_INT 65
10360: PPUSH
10361: LD_INT 58
10363: PPUSH
10364: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10368: LD_EXP 48
10372: PPUSH
10373: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10377: LD_EXP 49
10381: PPUSH
10382: LD_INT 64
10384: PPUSH
10385: LD_INT 57
10387: PPUSH
10388: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10392: LD_EXP 49
10396: PPUSH
10397: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10401: LD_EXP 50
10405: PPUSH
10406: LD_INT 64
10408: PPUSH
10409: LD_INT 56
10411: PPUSH
10412: CALL_OW 111
// AddComCrawl ( Balei ) ;
10416: LD_EXP 50
10420: PPUSH
10421: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10425: LD_EXP 51
10429: PPUSH
10430: LD_INT 63
10432: PPUSH
10433: LD_INT 55
10435: PPUSH
10436: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10440: LD_EXP 51
10444: PPUSH
10445: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10449: LD_EXP 52
10453: PPUSH
10454: LD_INT 66
10456: PPUSH
10457: LD_INT 58
10459: PPUSH
10460: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10464: LD_EXP 52
10468: PPUSH
10469: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10473: LD_EXP 54
10477: PPUSH
10478: CALL_OW 255
10482: PUSH
10483: LD_INT 6
10485: EQUAL
10486: PUSH
10487: LD_EXP 12
10491: AND
10492: IFFALSE 10518
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10494: LD_EXP 54
10498: PPUSH
10499: LD_INT 63
10501: PPUSH
10502: LD_INT 54
10504: PPUSH
10505: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10509: LD_EXP 54
10513: PPUSH
10514: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10518: LD_EXP 47
10522: PPUSH
10523: LD_INT 65
10525: PPUSH
10526: LD_INT 59
10528: PPUSH
10529: CALL_OW 297
10533: PUSH
10534: LD_INT 7
10536: LESS
10537: IFFALSE 10563
// begin ComCrawl ( Pokryshkin ) ;
10539: LD_EXP 47
10543: PPUSH
10544: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10548: LD_EXP 47
10552: PPUSH
10553: LD_INT 65
10555: PPUSH
10556: LD_INT 59
10558: PPUSH
10559: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10563: LD_EXP 48
10567: PPUSH
10568: LD_INT 65
10570: PPUSH
10571: LD_INT 58
10573: PPUSH
10574: CALL_OW 297
10578: PUSH
10579: LD_INT 7
10581: LESS
10582: IFFALSE 10608
// begin ComCrawl ( Saseda ) ;
10584: LD_EXP 48
10588: PPUSH
10589: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10593: LD_EXP 48
10597: PPUSH
10598: LD_INT 65
10600: PPUSH
10601: LD_INT 58
10603: PPUSH
10604: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
10608: LD_EXP 49
10612: PPUSH
10613: LD_INT 64
10615: PPUSH
10616: LD_INT 57
10618: PPUSH
10619: CALL_OW 297
10623: PUSH
10624: LD_INT 7
10626: LESS
10627: IFFALSE 10653
// begin ComCrawl ( Jaworska ) ;
10629: LD_EXP 49
10633: PPUSH
10634: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10638: LD_EXP 49
10642: PPUSH
10643: LD_INT 64
10645: PPUSH
10646: LD_INT 57
10648: PPUSH
10649: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
10653: LD_EXP 50
10657: PPUSH
10658: LD_INT 64
10660: PPUSH
10661: LD_INT 56
10663: PPUSH
10664: CALL_OW 297
10668: PUSH
10669: LD_INT 7
10671: LESS
10672: IFFALSE 10698
// begin ComCrawl ( Balei ) ;
10674: LD_EXP 50
10678: PPUSH
10679: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10683: LD_EXP 50
10687: PPUSH
10688: LD_INT 64
10690: PPUSH
10691: LD_INT 56
10693: PPUSH
10694: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
10698: LD_EXP 51
10702: PPUSH
10703: LD_INT 63
10705: PPUSH
10706: LD_INT 55
10708: PPUSH
10709: CALL_OW 297
10713: PUSH
10714: LD_INT 7
10716: LESS
10717: IFFALSE 10743
// begin ComCrawl ( Belkov ) ;
10719: LD_EXP 51
10723: PPUSH
10724: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10728: LD_EXP 51
10732: PPUSH
10733: LD_INT 63
10735: PPUSH
10736: LD_INT 55
10738: PPUSH
10739: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
10743: LD_EXP 52
10747: PPUSH
10748: LD_INT 66
10750: PPUSH
10751: LD_INT 58
10753: PPUSH
10754: CALL_OW 297
10758: PUSH
10759: LD_INT 7
10761: LESS
10762: IFFALSE 10788
// begin ComCrawl ( Jaunzeme ) ;
10764: LD_EXP 52
10768: PPUSH
10769: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10773: LD_EXP 52
10777: PPUSH
10778: LD_INT 66
10780: PPUSH
10781: LD_INT 58
10783: PPUSH
10784: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10788: LD_EXP 54
10792: PPUSH
10793: LD_INT 63
10795: PPUSH
10796: LD_INT 54
10798: PPUSH
10799: CALL_OW 297
10803: PUSH
10804: LD_INT 7
10806: LESS
10807: PUSH
10808: LD_EXP 54
10812: PPUSH
10813: CALL_OW 255
10817: PUSH
10818: LD_INT 6
10820: EQUAL
10821: AND
10822: PUSH
10823: LD_EXP 12
10827: AND
10828: IFFALSE 10854
// begin ComCrawl ( Gnyevko ) ;
10830: LD_EXP 54
10834: PPUSH
10835: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10839: LD_EXP 54
10843: PPUSH
10844: LD_INT 63
10846: PPUSH
10847: LD_INT 54
10849: PPUSH
10850: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10854: LD_INT 35
10856: PPUSH
10857: CALL_OW 67
// until IsDying ( Charles ) or IsDead ( Charles ) ;
10861: LD_EXP 42
10865: PPUSH
10866: CALL_OW 303
10870: PUSH
10871: LD_EXP 42
10875: PPUSH
10876: CALL_OW 301
10880: OR
10881: IFFALSE 10518
// end ;
10883: LD_VAR 0 1
10887: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
10888: LD_EXP 42
10892: PPUSH
10893: CALL_OW 303
10897: NOT
10898: PUSH
10899: LD_EXP 42
10903: PPUSH
10904: CALL_OW 301
10908: NOT
10909: OR
10910: PUSH
10911: LD_EXP 15
10915: AND
10916: IFFALSE 11258
10918: GO 10920
10920: DISABLE
// begin enable ;
10921: ENABLE
// if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10922: LD_EXP 47
10926: PPUSH
10927: LD_INT 65
10929: PPUSH
10930: LD_INT 59
10932: PPUSH
10933: CALL_OW 297
10937: PUSH
10938: LD_INT 7
10940: LESS
10941: IFFALSE 10967
// begin ComCrawl ( Pokryshkin ) ;
10943: LD_EXP 47
10947: PPUSH
10948: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10952: LD_EXP 47
10956: PPUSH
10957: LD_INT 65
10959: PPUSH
10960: LD_INT 59
10962: PPUSH
10963: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10967: LD_EXP 48
10971: PPUSH
10972: LD_INT 65
10974: PPUSH
10975: LD_INT 58
10977: PPUSH
10978: CALL_OW 297
10982: PUSH
10983: LD_INT 7
10985: LESS
10986: IFFALSE 11012
// begin ComCrawl ( Saseda ) ;
10988: LD_EXP 48
10992: PPUSH
10993: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10997: LD_EXP 48
11001: PPUSH
11002: LD_INT 65
11004: PPUSH
11005: LD_INT 58
11007: PPUSH
11008: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11012: LD_EXP 49
11016: PPUSH
11017: LD_INT 64
11019: PPUSH
11020: LD_INT 57
11022: PPUSH
11023: CALL_OW 297
11027: PUSH
11028: LD_INT 7
11030: LESS
11031: IFFALSE 11057
// begin ComCrawl ( Jaworska ) ;
11033: LD_EXP 49
11037: PPUSH
11038: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11042: LD_EXP 49
11046: PPUSH
11047: LD_INT 64
11049: PPUSH
11050: LD_INT 57
11052: PPUSH
11053: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11057: LD_EXP 50
11061: PPUSH
11062: LD_INT 64
11064: PPUSH
11065: LD_INT 56
11067: PPUSH
11068: CALL_OW 297
11072: PUSH
11073: LD_INT 7
11075: LESS
11076: IFFALSE 11102
// begin ComCrawl ( Balei ) ;
11078: LD_EXP 50
11082: PPUSH
11083: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11087: LD_EXP 50
11091: PPUSH
11092: LD_INT 64
11094: PPUSH
11095: LD_INT 56
11097: PPUSH
11098: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11102: LD_EXP 51
11106: PPUSH
11107: LD_INT 63
11109: PPUSH
11110: LD_INT 55
11112: PPUSH
11113: CALL_OW 297
11117: PUSH
11118: LD_INT 7
11120: LESS
11121: IFFALSE 11147
// begin ComCrawl ( Belkov ) ;
11123: LD_EXP 51
11127: PPUSH
11128: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11132: LD_EXP 51
11136: PPUSH
11137: LD_INT 63
11139: PPUSH
11140: LD_INT 55
11142: PPUSH
11143: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11147: LD_EXP 52
11151: PPUSH
11152: LD_INT 66
11154: PPUSH
11155: LD_INT 58
11157: PPUSH
11158: CALL_OW 297
11162: PUSH
11163: LD_INT 7
11165: LESS
11166: IFFALSE 11192
// begin ComCrawl ( Jaunzeme ) ;
11168: LD_EXP 52
11172: PPUSH
11173: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11177: LD_EXP 52
11181: PPUSH
11182: LD_INT 66
11184: PPUSH
11185: LD_INT 58
11187: PPUSH
11188: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11192: LD_EXP 54
11196: PPUSH
11197: LD_INT 63
11199: PPUSH
11200: LD_INT 54
11202: PPUSH
11203: CALL_OW 297
11207: PUSH
11208: LD_INT 7
11210: LESS
11211: PUSH
11212: LD_EXP 54
11216: PPUSH
11217: CALL_OW 255
11221: PUSH
11222: LD_INT 6
11224: EQUAL
11225: AND
11226: PUSH
11227: LD_EXP 12
11231: AND
11232: IFFALSE 11258
// begin ComCrawl ( Gnyevko ) ;
11234: LD_EXP 54
11238: PPUSH
11239: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11243: LD_EXP 54
11247: PPUSH
11248: LD_INT 63
11250: PPUSH
11251: LD_INT 54
11253: PPUSH
11254: CALL_OW 171
// end ; end ; end_of_file
11258: END
// export function BurlakDying ; begin
11259: LD_INT 0
11261: PPUSH
// YouLost ( Burlak ) ;
11262: LD_STRING Burlak
11264: PPUSH
11265: CALL_OW 104
// end ;
11269: LD_VAR 0 1
11273: RET
// every 0 0$1 trigger kirovSolds = 0 do
11274: LD_EXP 56
11278: PUSH
11279: LD_INT 0
11281: EQUAL
11282: IFFALSE 11294
11284: GO 11286
11286: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11287: LD_STRING KirovSoldsDie
11289: PPUSH
11290: CALL_OW 104
11294: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11295: LD_EXP 22
11299: PUSH
11300: LD_INT 1
11302: PPUSH
11303: LD_INT 22
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 21
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 71
11331: PUSH
11332: LD_INT 0
11334: EQUAL
11335: AND
11336: IFFALSE 11615
11338: GO 11340
11340: DISABLE
11341: LD_INT 0
11343: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11344: LD_EXP 53
11348: PPUSH
11349: CALL_OW 302
11353: PUSH
11354: LD_EXP 53
11358: PPUSH
11359: CALL_OW 255
11363: PUSH
11364: LD_INT 8
11366: EQUAL
11367: AND
11368: PUSH
11369: LD_EXP 54
11373: PPUSH
11374: CALL_OW 302
11378: PUSH
11379: LD_EXP 54
11383: PPUSH
11384: CALL_OW 255
11388: PUSH
11389: LD_INT 8
11391: EQUAL
11392: AND
11393: OR
11394: IFFALSE 11526
// begin case Query ( QExit2 ) of 1 :
11396: LD_STRING QExit2
11398: PPUSH
11399: CALL_OW 97
11403: PUSH
11404: LD_INT 1
11406: DOUBLE
11407: EQUAL
11408: IFTRUE 11412
11410: GO 11504
11412: POP
// begin if IsOk ( Belkov ) then
11413: LD_EXP 51
11417: PPUSH
11418: CALL_OW 302
11422: IFFALSE 11438
// Say ( Belkov , D12-Bel-1 ) else
11424: LD_EXP 51
11428: PPUSH
11429: LD_STRING D12-Bel-1
11431: PPUSH
11432: CALL_OW 88
11436: GO 11498
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11438: LD_INT 22
11440: PUSH
11441: LD_INT 3
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 50
11460: PUSH
11461: EMPTY
11462: LIST
11463: PUSH
11464: LD_INT 26
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PPUSH
11480: CALL_OW 69
11484: PPUSH
11485: LD_STRING D12-RSol1-1
11487: PPUSH
11488: LD_STRING 
11490: PPUSH
11491: LD_INT 0
11493: PPUSH
11494: CALL 8113 0 4
// FinishMission ;
11498: CALL 11618 0 0
// end ; 2 :
11502: GO 11524
11504: LD_INT 2
11506: DOUBLE
11507: EQUAL
11508: IFTRUE 11512
11510: GO 11523
11512: POP
// begin wait ( 0 0$5 ) ;
11513: LD_INT 175
11515: PPUSH
11516: CALL_OW 67
// enable ;
11520: ENABLE
// end ; end ;
11521: GO 11524
11523: POP
// end else
11524: GO 11615
// begin if IsOk ( Belkov ) then
11526: LD_EXP 51
11530: PPUSH
11531: CALL_OW 302
11535: IFFALSE 11551
// Say ( Belkov , D12-Bel-1 ) else
11537: LD_EXP 51
11541: PPUSH
11542: LD_STRING D12-Bel-1
11544: PPUSH
11545: CALL_OW 88
11549: GO 11611
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11551: LD_INT 22
11553: PUSH
11554: LD_INT 3
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 21
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 50
11573: PUSH
11574: EMPTY
11575: LIST
11576: PUSH
11577: LD_INT 26
11579: PUSH
11580: LD_INT 1
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: PPUSH
11598: LD_STRING D12-RSol1-1
11600: PPUSH
11601: LD_STRING 
11603: PPUSH
11604: LD_INT 0
11606: PPUSH
11607: CALL 8113 0 4
// FinishMission ;
11611: CALL 11618 0 0
// end ; end ;
11615: PPOPN 1
11617: END
// function FinishMission ; begin
11618: LD_INT 0
11620: PPUSH
// SetRewards ;
11621: CALL 11642 0 0
// SavePlayerCharacters ;
11625: CALL 11993 0 0
// SaveGlobalVariables ;
11629: CALL 12123 0 0
// YouWin ;
11633: CALL_OW 103
// end ;
11637: LD_VAR 0 1
11641: RET
// function SetRewards ; begin
11642: LD_INT 0
11644: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11645: LD_EXP 19
11649: NOT
11650: PUSH
11651: LD_EXP 20
11655: NOT
11656: AND
11657: IFFALSE 11669
// AddMedal ( NoEscape , 1 ) ;
11659: LD_STRING NoEscape
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11669: LD_EXP 19
11673: PUSH
11674: LD_EXP 20
11678: NOT
11679: AND
11680: IFFALSE 11693
// AddMedal ( NoEscape , - 1 ) ;
11682: LD_STRING NoEscape
11684: PPUSH
11685: LD_INT 1
11687: NEG
11688: PPUSH
11689: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11693: LD_EXP 19
11697: NOT
11698: PUSH
11699: LD_EXP 20
11703: AND
11704: IFFALSE 11717
// AddMedal ( NoEscape , - 2 ) ;
11706: LD_STRING NoEscape
11708: PPUSH
11709: LD_INT 2
11711: NEG
11712: PPUSH
11713: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11717: LD_EXP 19
11721: PUSH
11722: LD_EXP 20
11726: AND
11727: IFFALSE 11740
// AddMedal ( NoEscape , - 3 ) ;
11729: LD_STRING NoEscape
11731: PPUSH
11732: LD_INT 3
11734: NEG
11735: PPUSH
11736: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11740: LD_EXP 12
11744: PUSH
11745: LD_EXP 54
11749: PPUSH
11750: CALL_OW 302
11754: AND
11755: PUSH
11756: LD_EXP 21
11760: AND
11761: PUSH
11762: LD_EXP 53
11766: PPUSH
11767: CALL_OW 302
11771: AND
11772: IFFALSE 11784
// AddMedal ( Gnyevko , 1 ) ;
11774: LD_STRING Gnyevko
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11784: LD_EXP 12
11788: NOT
11789: PUSH
11790: LD_EXP 21
11794: AND
11795: PUSH
11796: LD_EXP 53
11800: PPUSH
11801: CALL_OW 302
11805: AND
11806: IFFALSE 11819
// AddMedal ( Gnyevko , - 1 ) ;
11808: LD_STRING Gnyevko
11810: PPUSH
11811: LD_INT 1
11813: NEG
11814: PPUSH
11815: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11819: LD_EXP 12
11823: PUSH
11824: LD_EXP 21
11828: NOT
11829: PUSH
11830: LD_EXP 54
11834: PPUSH
11835: CALL_OW 302
11839: NOT
11840: OR
11841: PUSH
11842: LD_EXP 53
11846: PPUSH
11847: CALL_OW 302
11851: NOT
11852: OR
11853: AND
11854: IFFALSE 11867
// AddMedal ( Gnyevko , - 2 ) ;
11856: LD_STRING Gnyevko
11858: PPUSH
11859: LD_INT 2
11861: NEG
11862: PPUSH
11863: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11867: LD_EXP 12
11871: NOT
11872: PUSH
11873: LD_EXP 21
11877: NOT
11878: AND
11879: PUSH
11880: LD_EXP 54
11884: PPUSH
11885: CALL_OW 302
11889: NOT
11890: PUSH
11891: LD_EXP 53
11895: PPUSH
11896: CALL_OW 302
11900: NOT
11901: AND
11902: OR
11903: IFFALSE 11916
// AddMedal ( Gnyevko , - 3 ) ;
11905: LD_STRING Gnyevko
11907: PPUSH
11908: LD_INT 3
11910: NEG
11911: PPUSH
11912: CALL_OW 101
// if lostComradesCounter = 0 then
11916: LD_EXP 23
11920: PUSH
11921: LD_INT 0
11923: EQUAL
11924: IFFALSE 11938
// AddMedal ( NoLosses , 1 ) else
11926: LD_STRING NoLosses
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 101
11936: GO 11948
// AddMedal ( NoLosses , 0 ) ;
11938: LD_STRING NoLosses
11940: PPUSH
11941: LD_INT 0
11943: PPUSH
11944: CALL_OW 101
// GiveMedals ( Main ) ;
11948: LD_STRING Main
11950: PPUSH
11951: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11955: LD_INT 22
11957: PUSH
11958: LD_INT 3
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 21
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 69
11983: PPUSH
11984: CALL_OW 43
// end ;
11988: LD_VAR 0 1
11992: RET
// function SavePlayerCharacters ; var others ; begin
11993: LD_INT 0
11995: PPUSH
11996: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
11997: LD_EXP 46
12001: PPUSH
12002: LD_STRING Burlak
12004: PPUSH
12005: CALL 8292 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12009: LD_EXP 54
12013: PPUSH
12014: LD_STRING Gnyevko
12016: PPUSH
12017: CALL 8292 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12021: LD_EXP 51
12025: PPUSH
12026: LD_STRING Belkov
12028: PPUSH
12029: CALL 8292 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12033: LD_EXP 53
12037: PPUSH
12038: LD_STRING Kirilenkova
12040: PPUSH
12041: CALL 8292 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12045: LD_ADDR_VAR 0 2
12049: PUSH
12050: LD_INT 22
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 21
12062: PUSH
12063: LD_INT 1
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: PUSH
12079: LD_EXP 46
12083: PUSH
12084: LD_EXP 54
12088: PUSH
12089: LD_EXP 51
12093: PUSH
12094: LD_EXP 53
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: DIFF
12105: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING other_survivors
12113: PPUSH
12114: CALL 8348 0 2
// end ;
12118: LD_VAR 0 1
12122: RET
// function SaveGlobalVariables ; begin
12123: LD_INT 0
12125: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12126: LD_EXP 1
12130: PPUSH
12131: LD_STRING 01_GladstoneStatus
12133: PPUSH
12134: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12138: LD_EXP 2
12142: PPUSH
12143: LD_STRING 01_JohannaStatus
12145: PPUSH
12146: CALL_OW 39
// end ; end_of_file
12150: LD_VAR 0 1
12154: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12155: LD_INT 0
12157: PPUSH
12158: PPUSH
12159: PPUSH
// uc_side = 1 ;
12160: LD_ADDR_OWVAR 20
12164: PUSH
12165: LD_INT 1
12167: ST_TO_ADDR
// hc_class := 1 ;
12168: LD_ADDR_OWVAR 28
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// hc_sex := sex_male ;
12176: LD_ADDR_OWVAR 27
12180: PUSH
12181: LD_INT 1
12183: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12184: LD_ADDR_OWVAR 33
12188: PUSH
12189: LD_STRING AmGalRemake
12191: ST_TO_ADDR
// hc_face_number := 1 ;
12192: LD_ADDR_OWVAR 34
12196: PUSH
12197: LD_INT 1
12199: ST_TO_ADDR
// hc_name := Charles Brown ;
12200: LD_ADDR_OWVAR 26
12204: PUSH
12205: LD_STRING Charles Brown
12207: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12208: LD_ADDR_OWVAR 29
12212: PUSH
12213: LD_INT 12
12215: PUSH
12216: LD_INT 11
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12223: LD_ADDR_OWVAR 31
12227: PUSH
12228: LD_INT 1
12230: PUSH
12231: LD_INT 0
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: ST_TO_ADDR
// Charles = CreateHuman ;
12246: LD_ADDR_EXP 42
12250: PUSH
12251: CALL_OW 44
12255: ST_TO_ADDR
// hc_class := 1 ;
12256: LD_ADDR_OWVAR 28
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// hc_sex := sex_female ;
12264: LD_ADDR_OWVAR 27
12268: PUSH
12269: LD_INT 2
12271: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12272: LD_ADDR_OWVAR 33
12276: PUSH
12277: LD_STRING AmGalRemake
12279: ST_TO_ADDR
// hc_face_number := 2 ;
12280: LD_ADDR_OWVAR 34
12284: PUSH
12285: LD_INT 2
12287: ST_TO_ADDR
// hc_name := Johanna Holland ;
12288: LD_ADDR_OWVAR 26
12292: PUSH
12293: LD_STRING Johanna Holland
12295: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12296: LD_ADDR_OWVAR 29
12300: PUSH
12301: LD_INT 12
12303: PUSH
12304: LD_INT 11
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12311: LD_ADDR_OWVAR 31
12315: PUSH
12316: LD_EXP 36
12320: PUSH
12321: LD_INT 0
12323: PPUSH
12324: LD_INT 2
12326: PPUSH
12327: CALL_OW 12
12331: PUSH
12332: LD_INT 0
12334: PPUSH
12335: LD_INT 2
12337: PPUSH
12338: CALL_OW 12
12342: PUSH
12343: LD_INT 0
12345: PPUSH
12346: LD_INT 2
12348: PPUSH
12349: CALL_OW 12
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: ST_TO_ADDR
// Johanna = CreateHuman ;
12360: LD_ADDR_EXP 43
12364: PUSH
12365: CALL_OW 44
12369: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12370: LD_EXP 43
12374: PPUSH
12375: LD_INT 19
12377: PPUSH
12378: LD_INT 0
12380: PPUSH
12381: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12385: LD_EXP 43
12389: PPUSH
12390: LD_INT 23
12392: PPUSH
12393: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
12397: LD_ADDR_EXP 44
12401: PUSH
12402: LD_STRING Gladstone
12404: PPUSH
12405: LD_INT 0
12407: PPUSH
12408: CALL 8050 0 2
12412: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12413: LD_EXP 44
12417: PPUSH
12418: LD_INT 22
12420: PPUSH
12421: CALL_OW 52
// amApemans = [ ] ;
12425: LD_ADDR_EXP 45
12429: PUSH
12430: EMPTY
12431: ST_TO_ADDR
// for i := 1 to amApeAmount do
12432: LD_ADDR_VAR 0 2
12436: PUSH
12437: DOUBLE
12438: LD_INT 1
12440: DEC
12441: ST_TO_ADDR
12442: LD_EXP 35
12446: PUSH
12447: FOR_TO
12448: IFFALSE 12563
// begin hc_class := class_apeman ;
12450: LD_ADDR_OWVAR 28
12454: PUSH
12455: LD_INT 12
12457: ST_TO_ADDR
// hc_gallery :=  ;
12458: LD_ADDR_OWVAR 33
12462: PUSH
12463: LD_STRING 
12465: ST_TO_ADDR
// hc_name :=  ;
12466: LD_ADDR_OWVAR 26
12470: PUSH
12471: LD_STRING 
12473: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12474: LD_ADDR_OWVAR 31
12478: PUSH
12479: LD_EXP 36
12483: PUSH
12484: LD_INT 0
12486: PPUSH
12487: LD_INT 2
12489: PPUSH
12490: CALL_OW 12
12494: PUSH
12495: LD_INT 0
12497: PPUSH
12498: LD_INT 2
12500: PPUSH
12501: CALL_OW 12
12505: PUSH
12506: LD_INT 0
12508: PPUSH
12509: LD_INT 2
12511: PPUSH
12512: CALL_OW 12
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: ST_TO_ADDR
// ape = CreateHuman ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: CALL_OW 44
12532: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12533: LD_VAR 0 3
12537: PPUSH
12538: LD_INT 22
12540: PPUSH
12541: CALL_OW 52
// amApemans = amApemans ^ ape ;
12545: LD_ADDR_EXP 45
12549: PUSH
12550: LD_EXP 45
12554: PUSH
12555: LD_VAR 0 3
12559: ADD
12560: ST_TO_ADDR
// end ;
12561: GO 12447
12563: POP
12564: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12565: LD_INT 23
12567: PPUSH
12568: LD_EXP 33
12572: PPUSH
12573: CALL_OW 234
// end ; end_of_file
12577: LD_VAR 0 1
12581: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12582: LD_INT 0
12584: PPUSH
// PrepareHero ;
12585: CALL 12610 0 0
// PreparePokryshkinTeams ;
12589: CALL 12704 0 0
// PrepareJelena ;
12593: CALL 12969 0 0
// PrepareGnyevko ;
12597: CALL 13001 0 0
// PrepareKurin ;
12601: CALL 12672 0 0
// end ;
12605: LD_VAR 0 1
12609: RET
// function PrepareHero ; begin
12610: LD_INT 0
12612: PPUSH
// uc_side = 3 ;
12613: LD_ADDR_OWVAR 20
12617: PUSH
12618: LD_INT 3
12620: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
12621: LD_ADDR_EXP 46
12625: PUSH
12626: LD_STRING Burlak
12628: PPUSH
12629: LD_INT 0
12631: PPUSH
12632: CALL 8050 0 2
12636: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12637: LD_EXP 46
12641: PPUSH
12642: LD_EXP 37
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: LD_EXP 37
12655: PUSH
12656: LD_INT 2
12658: ARRAY
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 48
// end ;
12667: LD_VAR 0 1
12671: RET
// function PrepareKurin ; begin
12672: LD_INT 0
12674: PPUSH
// uc_side = 6 ;
12675: LD_ADDR_OWVAR 20
12679: PUSH
12680: LD_INT 6
12682: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
12683: LD_ADDR_EXP 55
12687: PUSH
12688: LD_STRING Kurin
12690: PPUSH
12691: LD_INT 0
12693: PPUSH
12694: CALL 8050 0 2
12698: ST_TO_ADDR
// end ;
12699: LD_VAR 0 1
12703: RET
// function PreparePokryshkinTeams ; begin
12704: LD_INT 0
12706: PPUSH
// uc_side = 6 ;
12707: LD_ADDR_OWVAR 20
12711: PUSH
12712: LD_INT 6
12714: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
12715: LD_ADDR_EXP 47
12719: PUSH
12720: LD_STRING Pokryshkin
12722: PPUSH
12723: LD_INT 0
12725: PPUSH
12726: CALL 8050 0 2
12730: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
12731: LD_ADDR_EXP 48
12735: PUSH
12736: LD_STRING Saseda
12738: PPUSH
12739: LD_INT 0
12741: PPUSH
12742: CALL 8050 0 2
12746: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
12747: LD_ADDR_EXP 49
12751: PUSH
12752: LD_STRING Jaworska
12754: PPUSH
12755: LD_INT 0
12757: PPUSH
12758: CALL 8050 0 2
12762: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
12763: LD_ADDR_EXP 50
12767: PUSH
12768: LD_STRING Balei
12770: PPUSH
12771: LD_INT 0
12773: PPUSH
12774: CALL 8050 0 2
12778: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
12779: LD_ADDR_EXP 51
12783: PUSH
12784: LD_STRING Belkov
12786: PPUSH
12787: LD_INT 0
12789: PPUSH
12790: CALL 8050 0 2
12794: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12795: LD_EXP 47
12799: PPUSH
12800: LD_INT 25
12802: PPUSH
12803: LD_INT 0
12805: PPUSH
12806: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12810: LD_EXP 48
12814: PPUSH
12815: LD_INT 17
12817: PPUSH
12818: LD_INT 0
12820: PPUSH
12821: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12825: LD_EXP 49
12829: PPUSH
12830: LD_INT 17
12832: PPUSH
12833: LD_INT 0
12835: PPUSH
12836: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12840: LD_EXP 50
12844: PPUSH
12845: LD_INT 17
12847: PPUSH
12848: LD_INT 0
12850: PPUSH
12851: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12855: LD_EXP 51
12859: PPUSH
12860: LD_INT 17
12862: PPUSH
12863: LD_INT 0
12865: PPUSH
12866: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12870: LD_ADDR_EXP 56
12874: PUSH
12875: LD_EXP 47
12879: PUSH
12880: LD_EXP 48
12884: PUSH
12885: LD_EXP 50
12889: PUSH
12890: LD_EXP 51
12894: PUSH
12895: LD_EXP 49
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: ST_TO_ADDR
// if Difficulty < 3 then
12907: LD_OWVAR 67
12911: PUSH
12912: LD_INT 3
12914: LESS
12915: IFFALSE 12964
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
12917: LD_ADDR_EXP 52
12921: PUSH
12922: LD_STRING Jaunzeme
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL 8050 0 2
12932: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12933: LD_EXP 52
12937: PPUSH
12938: LD_INT 26
12940: PPUSH
12941: LD_INT 0
12943: PPUSH
12944: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12948: LD_ADDR_EXP 56
12952: PUSH
12953: LD_EXP 56
12957: PUSH
12958: LD_EXP 52
12962: ADD
12963: ST_TO_ADDR
// end ; end ;
12964: LD_VAR 0 1
12968: RET
// function PrepareJelena ; begin
12969: LD_INT 0
12971: PPUSH
// uc_side = 8 ;
12972: LD_ADDR_OWVAR 20
12976: PUSH
12977: LD_INT 8
12979: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
12980: LD_ADDR_EXP 53
12984: PUSH
12985: LD_STRING Kirilenkova
12987: PPUSH
12988: LD_INT 0
12990: PPUSH
12991: CALL 8050 0 2
12995: ST_TO_ADDR
// end ;
12996: LD_VAR 0 1
13000: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13001: LD_INT 0
13003: PPUSH
13004: PPUSH
13005: PPUSH
13006: PPUSH
// uc_side = 8 ;
13007: LD_ADDR_OWVAR 20
13011: PUSH
13012: LD_INT 8
13014: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
13015: LD_ADDR_EXP 54
13019: PUSH
13020: LD_STRING Gnyevko
13022: PPUSH
13023: LD_INT 0
13025: PPUSH
13026: CALL 8050 0 2
13030: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13031: LD_ADDR_VAR 0 4
13035: PUSH
13036: LD_EXP 38
13040: PUSH
13041: LD_INT 1
13043: PPUSH
13044: LD_EXP 38
13048: PPUSH
13049: CALL_OW 12
13053: ARRAY
13054: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13055: LD_EXP 54
13059: PPUSH
13060: LD_VAR 0 4
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: PPUSH
13069: LD_VAR 0 4
13073: PUSH
13074: LD_INT 2
13076: ARRAY
13077: PPUSH
13078: LD_INT 0
13080: PPUSH
13081: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13085: LD_EXP 54
13089: PPUSH
13090: LD_EXP 39
13094: PPUSH
13095: CALL_OW 234
// ComHold ( Gnyevko ) ;
13099: LD_EXP 54
13103: PPUSH
13104: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
13108: LD_ADDR_VAR 0 3
13112: PUSH
13113: DOUBLE
13114: LD_INT 1
13116: DEC
13117: ST_TO_ADDR
13118: LD_EXP 27
13122: PUSH
13123: LD_INT 1
13125: ARRAY
13126: PUSH
13127: LD_INT 3
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: PUSH
13141: LD_OWVAR 67
13145: ARRAY
13146: MINUS
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13279
// begin uc_side = 0 ;
13151: LD_ADDR_OWVAR 20
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// uc_nation = nation_nature ;
13159: LD_ADDR_OWVAR 21
13163: PUSH
13164: LD_INT 0
13166: ST_TO_ADDR
// hc_class = class_apeman ;
13167: LD_ADDR_OWVAR 28
13171: PUSH
13172: LD_INT 12
13174: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13175: LD_ADDR_OWVAR 31
13179: PUSH
13180: LD_EXP 28
13184: PUSH
13185: LD_INT 1
13187: ARRAY
13188: PUSH
13189: LD_EXP 28
13193: PUSH
13194: LD_INT 2
13196: ARRAY
13197: PUSH
13198: LD_EXP 28
13202: PUSH
13203: LD_INT 3
13205: ARRAY
13206: PUSH
13207: LD_EXP 28
13211: PUSH
13212: LD_INT 4
13214: ARRAY
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13222: LD_ADDR_OWVAR 35
13226: PUSH
13227: LD_EXP 34
13231: ST_TO_ADDR
// un = CreateHuman ;
13232: LD_ADDR_VAR 0 2
13236: PUSH
13237: CALL_OW 44
13241: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13242: LD_VAR 0 2
13246: PPUSH
13247: LD_EXP 54
13251: PPUSH
13252: CALL_OW 250
13256: PPUSH
13257: LD_EXP 54
13261: PPUSH
13262: CALL_OW 251
13266: PPUSH
13267: LD_INT 8
13269: PPUSH
13270: LD_INT 0
13272: PPUSH
13273: CALL_OW 50
// end ;
13277: GO 13148
13279: POP
13280: POP
// end ; end_of_file
13281: LD_VAR 0 1
13285: RET
// export function PrepareNature ; var i , un ; begin
13286: LD_INT 0
13288: PPUSH
13289: PPUSH
13290: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13291: LD_ADDR_VAR 0 2
13295: PUSH
13296: DOUBLE
13297: LD_INT 1
13299: DEC
13300: ST_TO_ADDR
13301: LD_EXP 27
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PUSH
13310: FOR_TO
13311: IFFALSE 13421
// begin uc_side = 0 ;
13313: LD_ADDR_OWVAR 20
13317: PUSH
13318: LD_INT 0
13320: ST_TO_ADDR
// uc_nation = nation_nature ;
13321: LD_ADDR_OWVAR 21
13325: PUSH
13326: LD_INT 0
13328: ST_TO_ADDR
// hc_class = class_apeman ;
13329: LD_ADDR_OWVAR 28
13333: PUSH
13334: LD_INT 12
13336: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13337: LD_ADDR_OWVAR 31
13341: PUSH
13342: LD_EXP 28
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PUSH
13351: LD_EXP 28
13355: PUSH
13356: LD_INT 2
13358: ARRAY
13359: PUSH
13360: LD_EXP 28
13364: PUSH
13365: LD_INT 3
13367: ARRAY
13368: PUSH
13369: LD_EXP 28
13373: PUSH
13374: LD_INT 4
13376: ARRAY
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13384: LD_ADDR_OWVAR 35
13388: PUSH
13389: LD_EXP 34
13393: ST_TO_ADDR
// un = CreateHuman ;
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: CALL_OW 44
13403: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13404: LD_VAR 0 3
13408: PPUSH
13409: LD_INT 16
13411: PPUSH
13412: LD_INT 0
13414: PPUSH
13415: CALL_OW 49
// end ;
13419: GO 13310
13421: POP
13422: POP
// for i := 1 to animalsAmount [ 2 ] do
13423: LD_ADDR_VAR 0 2
13427: PUSH
13428: DOUBLE
13429: LD_INT 1
13431: DEC
13432: ST_TO_ADDR
13433: LD_EXP 27
13437: PUSH
13438: LD_INT 2
13440: ARRAY
13441: PUSH
13442: FOR_TO
13443: IFFALSE 13553
// begin uc_side = 0 ;
13445: LD_ADDR_OWVAR 20
13449: PUSH
13450: LD_INT 0
13452: ST_TO_ADDR
// uc_nation = nation_nature ;
13453: LD_ADDR_OWVAR 21
13457: PUSH
13458: LD_INT 0
13460: ST_TO_ADDR
// hc_class = class_phororhacos ;
13461: LD_ADDR_OWVAR 28
13465: PUSH
13466: LD_INT 18
13468: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13469: LD_ADDR_OWVAR 31
13473: PUSH
13474: LD_EXP 28
13478: PUSH
13479: LD_INT 1
13481: ARRAY
13482: PUSH
13483: LD_EXP 28
13487: PUSH
13488: LD_INT 2
13490: ARRAY
13491: PUSH
13492: LD_EXP 28
13496: PUSH
13497: LD_INT 3
13499: ARRAY
13500: PUSH
13501: LD_EXP 28
13505: PUSH
13506: LD_INT 4
13508: ARRAY
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13516: LD_ADDR_OWVAR 35
13520: PUSH
13521: LD_EXP 29
13525: ST_TO_ADDR
// un = CreateHuman ;
13526: LD_ADDR_VAR 0 3
13530: PUSH
13531: CALL_OW 44
13535: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_INT 15
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 49
// end ;
13551: GO 13442
13553: POP
13554: POP
// for i := 1 to animalsAmount [ 3 ] do
13555: LD_ADDR_VAR 0 2
13559: PUSH
13560: DOUBLE
13561: LD_INT 1
13563: DEC
13564: ST_TO_ADDR
13565: LD_EXP 27
13569: PUSH
13570: LD_INT 3
13572: ARRAY
13573: PUSH
13574: FOR_TO
13575: IFFALSE 13685
// begin uc_side = 0 ;
13577: LD_ADDR_OWVAR 20
13581: PUSH
13582: LD_INT 0
13584: ST_TO_ADDR
// uc_nation = nation_nature ;
13585: LD_ADDR_OWVAR 21
13589: PUSH
13590: LD_INT 0
13592: ST_TO_ADDR
// hc_class = class_tiger ;
13593: LD_ADDR_OWVAR 28
13597: PUSH
13598: LD_INT 14
13600: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13601: LD_ADDR_OWVAR 31
13605: PUSH
13606: LD_EXP 28
13610: PUSH
13611: LD_INT 1
13613: ARRAY
13614: PUSH
13615: LD_EXP 28
13619: PUSH
13620: LD_INT 2
13622: ARRAY
13623: PUSH
13624: LD_EXP 28
13628: PUSH
13629: LD_INT 3
13631: ARRAY
13632: PUSH
13633: LD_EXP 28
13637: PUSH
13638: LD_INT 4
13640: ARRAY
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13648: LD_ADDR_OWVAR 35
13652: PUSH
13653: LD_EXP 29
13657: ST_TO_ADDR
// un = CreateHuman ;
13658: LD_ADDR_VAR 0 3
13662: PUSH
13663: CALL_OW 44
13667: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13668: LD_VAR 0 3
13672: PPUSH
13673: LD_INT 15
13675: PPUSH
13676: LD_INT 0
13678: PPUSH
13679: CALL_OW 49
// end ;
13683: GO 13574
13685: POP
13686: POP
// for i := 1 to animalsAmount [ 4 ] do
13687: LD_ADDR_VAR 0 2
13691: PUSH
13692: DOUBLE
13693: LD_INT 1
13695: DEC
13696: ST_TO_ADDR
13697: LD_EXP 27
13701: PUSH
13702: LD_INT 4
13704: ARRAY
13705: PUSH
13706: FOR_TO
13707: IFFALSE 13817
// begin uc_side = 0 ;
13709: LD_ADDR_OWVAR 20
13713: PUSH
13714: LD_INT 0
13716: ST_TO_ADDR
// uc_nation = nation_nature ;
13717: LD_ADDR_OWVAR 21
13721: PUSH
13722: LD_INT 0
13724: ST_TO_ADDR
// hc_class = 21 ;
13725: LD_ADDR_OWVAR 28
13729: PUSH
13730: LD_INT 21
13732: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13733: LD_ADDR_OWVAR 31
13737: PUSH
13738: LD_EXP 28
13742: PUSH
13743: LD_INT 1
13745: ARRAY
13746: PUSH
13747: LD_EXP 28
13751: PUSH
13752: LD_INT 2
13754: ARRAY
13755: PUSH
13756: LD_EXP 28
13760: PUSH
13761: LD_INT 3
13763: ARRAY
13764: PUSH
13765: LD_EXP 28
13769: PUSH
13770: LD_INT 4
13772: ARRAY
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13780: LD_ADDR_OWVAR 35
13784: PUSH
13785: LD_EXP 29
13789: ST_TO_ADDR
// un = CreateHuman ;
13790: LD_ADDR_VAR 0 3
13794: PUSH
13795: CALL_OW 44
13799: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 15
13807: PPUSH
13808: LD_INT 0
13810: PPUSH
13811: CALL_OW 49
// end ;
13815: GO 13706
13817: POP
13818: POP
// end ; end_of_file
13819: LD_VAR 0 1
13823: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13824: LD_VAR 0 1
13828: PUSH
13829: LD_EXP 46
13833: EQUAL
13834: PUSH
13835: LD_EXP 53
13839: PPUSH
13840: CALL_OW 255
13844: PUSH
13845: LD_INT 3
13847: EQUAL
13848: NOT
13849: AND
13850: PUSH
13851: LD_EXP 53
13855: PPUSH
13856: CALL_OW 302
13860: NOT
13861: AND
13862: IFFALSE 13868
// BurlakDying ;
13864: CALL 11259 0 0
// if unit = Gladstone then
13868: LD_VAR 0 1
13872: PUSH
13873: LD_EXP 44
13877: EQUAL
13878: IFFALSE 13888
// gladstoneStatus = 0 ;
13880: LD_ADDR_EXP 1
13884: PUSH
13885: LD_INT 0
13887: ST_TO_ADDR
// if unit = Johanna then
13888: LD_VAR 0 1
13892: PUSH
13893: LD_EXP 43
13897: EQUAL
13898: IFFALSE 13908
// johannaStatus = 0 ;
13900: LD_ADDR_EXP 2
13904: PUSH
13905: LD_INT 0
13907: ST_TO_ADDR
// end ;
13908: PPOPN 1
13910: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13911: LD_VAR 0 1
13915: PUSH
13916: LD_EXP 46
13920: EQUAL
13921: IFFALSE 13927
// BurlakDying ;
13923: CALL 11259 0 0
// if GetSide ( unit ) = 3 then
13927: LD_VAR 0 1
13931: PPUSH
13932: CALL_OW 255
13936: PUSH
13937: LD_INT 3
13939: EQUAL
13940: IFFALSE 13956
// lostComradesCounter = lostComradesCounter + 1 ;
13942: LD_ADDR_EXP 23
13946: PUSH
13947: LD_EXP 23
13951: PUSH
13952: LD_INT 1
13954: PLUS
13955: ST_TO_ADDR
// if unit in kirovSolds then
13956: LD_VAR 0 1
13960: PUSH
13961: LD_EXP 56
13965: IN
13966: IFFALSE 13984
// kirovSolds = kirovSolds diff unit ;
13968: LD_ADDR_EXP 56
13972: PUSH
13973: LD_EXP 56
13977: PUSH
13978: LD_VAR 0 1
13982: DIFF
13983: ST_TO_ADDR
// end ;
13984: PPOPN 1
13986: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
13987: LD_VAR 0 1
13991: PUSH
13992: LD_INT 3
13994: EQUAL
13995: PUSH
13996: LD_VAR 0 2
14000: PUSH
14001: LD_INT 1
14003: EQUAL
14004: AND
14005: PUSH
14006: LD_VAR 0 1
14010: PUSH
14011: LD_INT 1
14013: EQUAL
14014: PUSH
14015: LD_VAR 0 2
14019: PUSH
14020: LD_INT 3
14022: EQUAL
14023: AND
14024: PUSH
14025: LD_EXP 17
14029: PUSH
14030: LD_INT 1
14032: EQUAL
14033: AND
14034: OR
14035: IFFALSE 14041
// Dial_SecondAttack ;
14037: CALL 6011 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14041: LD_VAR 0 1
14045: PUSH
14046: LD_INT 3
14048: EQUAL
14049: PUSH
14050: LD_VAR 0 2
14054: PUSH
14055: LD_INT 6
14057: EQUAL
14058: AND
14059: PUSH
14060: LD_EXP 18
14064: NOT
14065: AND
14066: IFFALSE 14072
// Dialogue_AttackComrade ;
14068: CALL 4123 0 0
// end ; end_of_file
14072: PPOPN 2
14074: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14075: LD_EXP 53
14079: PPUSH
14080: CALL_OW 255
14084: PUSH
14085: LD_INT 3
14087: EQUAL
14088: PUSH
14089: LD_EXP 26
14093: PUSH
14094: LD_INT 525
14096: LESS
14097: AND
14098: IFFALSE 14110
14100: GO 14102
14102: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14103: LD_STRING ACH_YELENA
14105: PPUSH
14106: CALL_OW 543
14110: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14111: LD_INT 23
14113: PUSH
14114: LD_INT 0
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 14
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 18
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 25
14146: PUSH
14147: LD_INT 12
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: NOT
14169: IFFALSE 14181
14171: GO 14173
14173: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14174: LD_STRING ACH_NATURE
14176: PPUSH
14177: CALL_OW 543
14181: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
// if not missionNumber then
14186: LD_VAR 0 2
14190: NOT
14191: IFFALSE 14195
// exit ;
14193: GO 14325
// achiv := false ;
14195: LD_ADDR_VAR 0 7
14199: PUSH
14200: LD_INT 0
14202: ST_TO_ADDR
// case campaignNumber of 1 :
14203: LD_VAR 0 1
14207: PUSH
14208: LD_INT 1
14210: DOUBLE
14211: EQUAL
14212: IFTRUE 14216
14214: GO 14227
14216: POP
// achiv := ACH_GOTA ; 2 :
14217: LD_ADDR_VAR 0 7
14221: PUSH
14222: LD_STRING ACH_GOTA
14224: ST_TO_ADDR
14225: GO 14277
14227: LD_INT 2
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14235
14233: GO 14238
14235: POP
// ; 3 :
14236: GO 14277
14238: LD_INT 3
14240: DOUBLE
14241: EQUAL
14242: IFTRUE 14246
14244: GO 14257
14246: POP
// achiv := ACH_MOTSU ; 4 :
14247: LD_ADDR_VAR 0 7
14251: PUSH
14252: LD_STRING ACH_MOTSU
14254: ST_TO_ADDR
14255: GO 14277
14257: LD_INT 4
14259: DOUBLE
14260: EQUAL
14261: IFTRUE 14265
14263: GO 14276
14265: POP
// achiv := ACH_LOP ; end ;
14266: LD_ADDR_VAR 0 7
14270: PUSH
14271: LD_STRING ACH_LOP
14273: ST_TO_ADDR
14274: GO 14277
14276: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
14277: LD_OWVAR 67
14281: PUSH
14282: LD_INT 3
14284: EQUAL
14285: PUSH
14286: LD_VAR 0 7
14290: AND
14291: PUSH
14292: LD_VAR 0 3
14296: AND
14297: PUSH
14298: LD_VAR 0 4
14302: AND
14303: PUSH
14304: LD_VAR 0 5
14308: AND
14309: IFFALSE 14325
// SetAchievementEX ( achiv , missionNumber ) ;
14311: LD_VAR 0 7
14315: PPUSH
14316: LD_VAR 0 2
14320: PPUSH
14321: CALL_OW 564
// end ;
14325: LD_VAR 0 6
14329: RET
// export function SA_BehemothConstructed ; begin
14330: LD_INT 0
14332: PPUSH
// SetAchievement ( ACH_SMC ) ;
14333: LD_STRING ACH_SMC
14335: PPUSH
14336: CALL_OW 543
// end ; end_of_file
14340: LD_VAR 0 1
14344: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14345: LD_VAR 0 2
14349: PUSH
14350: LD_INT 100
14352: EQUAL
14353: IFFALSE 15302
// begin if not StreamModeActive then
14355: LD_EXP 57
14359: NOT
14360: IFFALSE 14370
// StreamModeActive := true ;
14362: LD_ADDR_EXP 57
14366: PUSH
14367: LD_INT 1
14369: ST_TO_ADDR
// if p3 = 0 then
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 0
14377: EQUAL
14378: IFFALSE 14384
// InitStreamMode ;
14380: CALL 15535 0 0
// if p3 = 1 then
14384: LD_VAR 0 3
14388: PUSH
14389: LD_INT 1
14391: EQUAL
14392: IFFALSE 14402
// sRocket := true ;
14394: LD_ADDR_EXP 62
14398: PUSH
14399: LD_INT 1
14401: ST_TO_ADDR
// if p3 = 2 then
14402: LD_VAR 0 3
14406: PUSH
14407: LD_INT 2
14409: EQUAL
14410: IFFALSE 14420
// sSpeed := true ;
14412: LD_ADDR_EXP 61
14416: PUSH
14417: LD_INT 1
14419: ST_TO_ADDR
// if p3 = 3 then
14420: LD_VAR 0 3
14424: PUSH
14425: LD_INT 3
14427: EQUAL
14428: IFFALSE 14438
// sEngine := true ;
14430: LD_ADDR_EXP 63
14434: PUSH
14435: LD_INT 1
14437: ST_TO_ADDR
// if p3 = 4 then
14438: LD_VAR 0 3
14442: PUSH
14443: LD_INT 4
14445: EQUAL
14446: IFFALSE 14456
// sSpec := true ;
14448: LD_ADDR_EXP 60
14452: PUSH
14453: LD_INT 1
14455: ST_TO_ADDR
// if p3 = 5 then
14456: LD_VAR 0 3
14460: PUSH
14461: LD_INT 5
14463: EQUAL
14464: IFFALSE 14474
// sLevel := true ;
14466: LD_ADDR_EXP 64
14470: PUSH
14471: LD_INT 1
14473: ST_TO_ADDR
// if p3 = 6 then
14474: LD_VAR 0 3
14478: PUSH
14479: LD_INT 6
14481: EQUAL
14482: IFFALSE 14492
// sArmoury := true ;
14484: LD_ADDR_EXP 65
14488: PUSH
14489: LD_INT 1
14491: ST_TO_ADDR
// if p3 = 7 then
14492: LD_VAR 0 3
14496: PUSH
14497: LD_INT 7
14499: EQUAL
14500: IFFALSE 14510
// sRadar := true ;
14502: LD_ADDR_EXP 66
14506: PUSH
14507: LD_INT 1
14509: ST_TO_ADDR
// if p3 = 8 then
14510: LD_VAR 0 3
14514: PUSH
14515: LD_INT 8
14517: EQUAL
14518: IFFALSE 14528
// sBunker := true ;
14520: LD_ADDR_EXP 67
14524: PUSH
14525: LD_INT 1
14527: ST_TO_ADDR
// if p3 = 9 then
14528: LD_VAR 0 3
14532: PUSH
14533: LD_INT 9
14535: EQUAL
14536: IFFALSE 14546
// sHack := true ;
14538: LD_ADDR_EXP 68
14542: PUSH
14543: LD_INT 1
14545: ST_TO_ADDR
// if p3 = 10 then
14546: LD_VAR 0 3
14550: PUSH
14551: LD_INT 10
14553: EQUAL
14554: IFFALSE 14564
// sFire := true ;
14556: LD_ADDR_EXP 69
14560: PUSH
14561: LD_INT 1
14563: ST_TO_ADDR
// if p3 = 11 then
14564: LD_VAR 0 3
14568: PUSH
14569: LD_INT 11
14571: EQUAL
14572: IFFALSE 14582
// sRefresh := true ;
14574: LD_ADDR_EXP 70
14578: PUSH
14579: LD_INT 1
14581: ST_TO_ADDR
// if p3 = 12 then
14582: LD_VAR 0 3
14586: PUSH
14587: LD_INT 12
14589: EQUAL
14590: IFFALSE 14600
// sExp := true ;
14592: LD_ADDR_EXP 71
14596: PUSH
14597: LD_INT 1
14599: ST_TO_ADDR
// if p3 = 13 then
14600: LD_VAR 0 3
14604: PUSH
14605: LD_INT 13
14607: EQUAL
14608: IFFALSE 14618
// sDepot := true ;
14610: LD_ADDR_EXP 72
14614: PUSH
14615: LD_INT 1
14617: ST_TO_ADDR
// if p3 = 14 then
14618: LD_VAR 0 3
14622: PUSH
14623: LD_INT 14
14625: EQUAL
14626: IFFALSE 14636
// sFlag := true ;
14628: LD_ADDR_EXP 73
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// if p3 = 15 then
14636: LD_VAR 0 3
14640: PUSH
14641: LD_INT 15
14643: EQUAL
14644: IFFALSE 14654
// sKamikadze := true ;
14646: LD_ADDR_EXP 81
14650: PUSH
14651: LD_INT 1
14653: ST_TO_ADDR
// if p3 = 16 then
14654: LD_VAR 0 3
14658: PUSH
14659: LD_INT 16
14661: EQUAL
14662: IFFALSE 14672
// sTroll := true ;
14664: LD_ADDR_EXP 82
14668: PUSH
14669: LD_INT 1
14671: ST_TO_ADDR
// if p3 = 17 then
14672: LD_VAR 0 3
14676: PUSH
14677: LD_INT 17
14679: EQUAL
14680: IFFALSE 14690
// sSlow := true ;
14682: LD_ADDR_EXP 83
14686: PUSH
14687: LD_INT 1
14689: ST_TO_ADDR
// if p3 = 18 then
14690: LD_VAR 0 3
14694: PUSH
14695: LD_INT 18
14697: EQUAL
14698: IFFALSE 14708
// sLack := true ;
14700: LD_ADDR_EXP 84
14704: PUSH
14705: LD_INT 1
14707: ST_TO_ADDR
// if p3 = 19 then
14708: LD_VAR 0 3
14712: PUSH
14713: LD_INT 19
14715: EQUAL
14716: IFFALSE 14726
// sTank := true ;
14718: LD_ADDR_EXP 86
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
// if p3 = 20 then
14726: LD_VAR 0 3
14730: PUSH
14731: LD_INT 20
14733: EQUAL
14734: IFFALSE 14744
// sRemote := true ;
14736: LD_ADDR_EXP 87
14740: PUSH
14741: LD_INT 1
14743: ST_TO_ADDR
// if p3 = 21 then
14744: LD_VAR 0 3
14748: PUSH
14749: LD_INT 21
14751: EQUAL
14752: IFFALSE 14762
// sPowell := true ;
14754: LD_ADDR_EXP 88
14758: PUSH
14759: LD_INT 1
14761: ST_TO_ADDR
// if p3 = 22 then
14762: LD_VAR 0 3
14766: PUSH
14767: LD_INT 22
14769: EQUAL
14770: IFFALSE 14780
// sTeleport := true ;
14772: LD_ADDR_EXP 91
14776: PUSH
14777: LD_INT 1
14779: ST_TO_ADDR
// if p3 = 23 then
14780: LD_VAR 0 3
14784: PUSH
14785: LD_INT 23
14787: EQUAL
14788: IFFALSE 14798
// sOilTower := true ;
14790: LD_ADDR_EXP 93
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// if p3 = 24 then
14798: LD_VAR 0 3
14802: PUSH
14803: LD_INT 24
14805: EQUAL
14806: IFFALSE 14816
// sShovel := true ;
14808: LD_ADDR_EXP 94
14812: PUSH
14813: LD_INT 1
14815: ST_TO_ADDR
// if p3 = 25 then
14816: LD_VAR 0 3
14820: PUSH
14821: LD_INT 25
14823: EQUAL
14824: IFFALSE 14834
// sSheik := true ;
14826: LD_ADDR_EXP 95
14830: PUSH
14831: LD_INT 1
14833: ST_TO_ADDR
// if p3 = 26 then
14834: LD_VAR 0 3
14838: PUSH
14839: LD_INT 26
14841: EQUAL
14842: IFFALSE 14852
// sEarthquake := true ;
14844: LD_ADDR_EXP 97
14848: PUSH
14849: LD_INT 1
14851: ST_TO_ADDR
// if p3 = 27 then
14852: LD_VAR 0 3
14856: PUSH
14857: LD_INT 27
14859: EQUAL
14860: IFFALSE 14870
// sAI := true ;
14862: LD_ADDR_EXP 98
14866: PUSH
14867: LD_INT 1
14869: ST_TO_ADDR
// if p3 = 28 then
14870: LD_VAR 0 3
14874: PUSH
14875: LD_INT 28
14877: EQUAL
14878: IFFALSE 14888
// sCargo := true ;
14880: LD_ADDR_EXP 101
14884: PUSH
14885: LD_INT 1
14887: ST_TO_ADDR
// if p3 = 29 then
14888: LD_VAR 0 3
14892: PUSH
14893: LD_INT 29
14895: EQUAL
14896: IFFALSE 14906
// sDLaser := true ;
14898: LD_ADDR_EXP 102
14902: PUSH
14903: LD_INT 1
14905: ST_TO_ADDR
// if p3 = 30 then
14906: LD_VAR 0 3
14910: PUSH
14911: LD_INT 30
14913: EQUAL
14914: IFFALSE 14924
// sExchange := true ;
14916: LD_ADDR_EXP 103
14920: PUSH
14921: LD_INT 1
14923: ST_TO_ADDR
// if p3 = 31 then
14924: LD_VAR 0 3
14928: PUSH
14929: LD_INT 31
14931: EQUAL
14932: IFFALSE 14942
// sFac := true ;
14934: LD_ADDR_EXP 104
14938: PUSH
14939: LD_INT 1
14941: ST_TO_ADDR
// if p3 = 32 then
14942: LD_VAR 0 3
14946: PUSH
14947: LD_INT 32
14949: EQUAL
14950: IFFALSE 14960
// sPower := true ;
14952: LD_ADDR_EXP 105
14956: PUSH
14957: LD_INT 1
14959: ST_TO_ADDR
// if p3 = 33 then
14960: LD_VAR 0 3
14964: PUSH
14965: LD_INT 33
14967: EQUAL
14968: IFFALSE 14978
// sRandom := true ;
14970: LD_ADDR_EXP 106
14974: PUSH
14975: LD_INT 1
14977: ST_TO_ADDR
// if p3 = 34 then
14978: LD_VAR 0 3
14982: PUSH
14983: LD_INT 34
14985: EQUAL
14986: IFFALSE 14996
// sShield := true ;
14988: LD_ADDR_EXP 107
14992: PUSH
14993: LD_INT 1
14995: ST_TO_ADDR
// if p3 = 35 then
14996: LD_VAR 0 3
15000: PUSH
15001: LD_INT 35
15003: EQUAL
15004: IFFALSE 15014
// sTime := true ;
15006: LD_ADDR_EXP 108
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// if p3 = 36 then
15014: LD_VAR 0 3
15018: PUSH
15019: LD_INT 36
15021: EQUAL
15022: IFFALSE 15032
// sTools := true ;
15024: LD_ADDR_EXP 109
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// if p3 = 101 then
15032: LD_VAR 0 3
15036: PUSH
15037: LD_INT 101
15039: EQUAL
15040: IFFALSE 15050
// sSold := true ;
15042: LD_ADDR_EXP 74
15046: PUSH
15047: LD_INT 1
15049: ST_TO_ADDR
// if p3 = 102 then
15050: LD_VAR 0 3
15054: PUSH
15055: LD_INT 102
15057: EQUAL
15058: IFFALSE 15068
// sDiff := true ;
15060: LD_ADDR_EXP 75
15064: PUSH
15065: LD_INT 1
15067: ST_TO_ADDR
// if p3 = 103 then
15068: LD_VAR 0 3
15072: PUSH
15073: LD_INT 103
15075: EQUAL
15076: IFFALSE 15086
// sFog := true ;
15078: LD_ADDR_EXP 78
15082: PUSH
15083: LD_INT 1
15085: ST_TO_ADDR
// if p3 = 104 then
15086: LD_VAR 0 3
15090: PUSH
15091: LD_INT 104
15093: EQUAL
15094: IFFALSE 15104
// sReset := true ;
15096: LD_ADDR_EXP 79
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// if p3 = 105 then
15104: LD_VAR 0 3
15108: PUSH
15109: LD_INT 105
15111: EQUAL
15112: IFFALSE 15122
// sSun := true ;
15114: LD_ADDR_EXP 80
15118: PUSH
15119: LD_INT 1
15121: ST_TO_ADDR
// if p3 = 106 then
15122: LD_VAR 0 3
15126: PUSH
15127: LD_INT 106
15129: EQUAL
15130: IFFALSE 15140
// sTiger := true ;
15132: LD_ADDR_EXP 76
15136: PUSH
15137: LD_INT 1
15139: ST_TO_ADDR
// if p3 = 107 then
15140: LD_VAR 0 3
15144: PUSH
15145: LD_INT 107
15147: EQUAL
15148: IFFALSE 15158
// sBomb := true ;
15150: LD_ADDR_EXP 77
15154: PUSH
15155: LD_INT 1
15157: ST_TO_ADDR
// if p3 = 108 then
15158: LD_VAR 0 3
15162: PUSH
15163: LD_INT 108
15165: EQUAL
15166: IFFALSE 15176
// sWound := true ;
15168: LD_ADDR_EXP 85
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// if p3 = 109 then
15176: LD_VAR 0 3
15180: PUSH
15181: LD_INT 109
15183: EQUAL
15184: IFFALSE 15194
// sBetray := true ;
15186: LD_ADDR_EXP 89
15190: PUSH
15191: LD_INT 1
15193: ST_TO_ADDR
// if p3 = 110 then
15194: LD_VAR 0 3
15198: PUSH
15199: LD_INT 110
15201: EQUAL
15202: IFFALSE 15212
// sContamin := true ;
15204: LD_ADDR_EXP 90
15208: PUSH
15209: LD_INT 1
15211: ST_TO_ADDR
// if p3 = 111 then
15212: LD_VAR 0 3
15216: PUSH
15217: LD_INT 111
15219: EQUAL
15220: IFFALSE 15230
// sOil := true ;
15222: LD_ADDR_EXP 92
15226: PUSH
15227: LD_INT 1
15229: ST_TO_ADDR
// if p3 = 112 then
15230: LD_VAR 0 3
15234: PUSH
15235: LD_INT 112
15237: EQUAL
15238: IFFALSE 15248
// sStu := true ;
15240: LD_ADDR_EXP 96
15244: PUSH
15245: LD_INT 1
15247: ST_TO_ADDR
// if p3 = 113 then
15248: LD_VAR 0 3
15252: PUSH
15253: LD_INT 113
15255: EQUAL
15256: IFFALSE 15266
// sBazooka := true ;
15258: LD_ADDR_EXP 99
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
// if p3 = 114 then
15266: LD_VAR 0 3
15270: PUSH
15271: LD_INT 114
15273: EQUAL
15274: IFFALSE 15284
// sMortar := true ;
15276: LD_ADDR_EXP 100
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// if p3 = 115 then
15284: LD_VAR 0 3
15288: PUSH
15289: LD_INT 115
15291: EQUAL
15292: IFFALSE 15302
// sRanger := true ;
15294: LD_ADDR_EXP 110
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// end ; if p2 = 101 then
15302: LD_VAR 0 2
15306: PUSH
15307: LD_INT 101
15309: EQUAL
15310: IFFALSE 15513
// begin case p3 of 1 :
15312: LD_VAR 0 3
15316: PUSH
15317: LD_INT 1
15319: DOUBLE
15320: EQUAL
15321: IFTRUE 15325
15323: GO 15332
15325: POP
// hHackUnlimitedResources ; 2 :
15326: CALL 25607 0 0
15330: GO 15513
15332: LD_INT 2
15334: DOUBLE
15335: EQUAL
15336: IFTRUE 15340
15338: GO 15347
15340: POP
// hHackSetLevel10 ; 3 :
15341: CALL 25740 0 0
15345: GO 15513
15347: LD_INT 3
15349: DOUBLE
15350: EQUAL
15351: IFTRUE 15355
15353: GO 15362
15355: POP
// hHackSetLevel10YourUnits ; 4 :
15356: CALL 25825 0 0
15360: GO 15513
15362: LD_INT 4
15364: DOUBLE
15365: EQUAL
15366: IFTRUE 15370
15368: GO 15392
15370: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
15371: LD_VAR 0 4
15375: PPUSH
15376: LD_VAR 0 5
15380: PPUSH
15381: LD_VAR 0 6
15385: PPUSH
15386: CALL 25915 0 3
15390: GO 15513
15392: LD_INT 5
15394: DOUBLE
15395: EQUAL
15396: IFTRUE 15400
15398: GO 15407
15400: POP
// hHackSpawnVehicle ; 6 :
15401: CALL 25976 0 0
15405: GO 15513
15407: LD_INT 6
15409: DOUBLE
15410: EQUAL
15411: IFTRUE 15415
15413: GO 15422
15415: POP
// hHackInvincible ; 7 :
15416: CALL 26522 0 0
15420: GO 15513
15422: LD_INT 7
15424: DOUBLE
15425: EQUAL
15426: IFTRUE 15430
15428: GO 15437
15430: POP
// hHackInvisible ; 8 :
15431: CALL 26633 0 0
15435: GO 15513
15437: LD_INT 8
15439: DOUBLE
15440: EQUAL
15441: IFTRUE 15445
15443: GO 15452
15445: POP
// hHackChangeYourSide ; 9 :
15446: CALL 26690 0 0
15450: GO 15513
15452: LD_INT 9
15454: DOUBLE
15455: EQUAL
15456: IFTRUE 15460
15458: GO 15467
15460: POP
// hHackChangeUnitSide ; 10 :
15461: CALL 26732 0 0
15465: GO 15513
15467: LD_INT 10
15469: DOUBLE
15470: EQUAL
15471: IFTRUE 15475
15473: GO 15482
15475: POP
// hHackFog ; 11 :
15476: CALL 26833 0 0
15480: GO 15513
15482: LD_INT 11
15484: DOUBLE
15485: EQUAL
15486: IFTRUE 15490
15488: GO 15497
15490: POP
// hHackApeman ; 12 :
15491: CALL 26848 0 0
15495: GO 15513
15497: LD_INT 12
15499: DOUBLE
15500: EQUAL
15501: IFTRUE 15505
15503: GO 15512
15505: POP
// hHackBoom ; end ;
15506: CALL 26933 0 0
15510: GO 15513
15512: POP
// end ; end ;
15513: PPOPN 6
15515: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15516: GO 15518
15518: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15519: LD_STRING initStreamRollete();
15521: PPUSH
15522: CALL_OW 559
// InitStreamMode ;
15526: CALL 15535 0 0
// DefineStreamItems ( ) ;
15530: CALL 15975 0 0
// end ;
15534: END
// function InitStreamMode ; begin
15535: LD_INT 0
15537: PPUSH
// streamModeActive := false ;
15538: LD_ADDR_EXP 57
15542: PUSH
15543: LD_INT 0
15545: ST_TO_ADDR
// normalCounter := 36 ;
15546: LD_ADDR_EXP 58
15550: PUSH
15551: LD_INT 36
15553: ST_TO_ADDR
// hardcoreCounter := 16 ;
15554: LD_ADDR_EXP 59
15558: PUSH
15559: LD_INT 16
15561: ST_TO_ADDR
// sRocket := false ;
15562: LD_ADDR_EXP 62
15566: PUSH
15567: LD_INT 0
15569: ST_TO_ADDR
// sSpeed := false ;
15570: LD_ADDR_EXP 61
15574: PUSH
15575: LD_INT 0
15577: ST_TO_ADDR
// sEngine := false ;
15578: LD_ADDR_EXP 63
15582: PUSH
15583: LD_INT 0
15585: ST_TO_ADDR
// sSpec := false ;
15586: LD_ADDR_EXP 60
15590: PUSH
15591: LD_INT 0
15593: ST_TO_ADDR
// sLevel := false ;
15594: LD_ADDR_EXP 64
15598: PUSH
15599: LD_INT 0
15601: ST_TO_ADDR
// sArmoury := false ;
15602: LD_ADDR_EXP 65
15606: PUSH
15607: LD_INT 0
15609: ST_TO_ADDR
// sRadar := false ;
15610: LD_ADDR_EXP 66
15614: PUSH
15615: LD_INT 0
15617: ST_TO_ADDR
// sBunker := false ;
15618: LD_ADDR_EXP 67
15622: PUSH
15623: LD_INT 0
15625: ST_TO_ADDR
// sHack := false ;
15626: LD_ADDR_EXP 68
15630: PUSH
15631: LD_INT 0
15633: ST_TO_ADDR
// sFire := false ;
15634: LD_ADDR_EXP 69
15638: PUSH
15639: LD_INT 0
15641: ST_TO_ADDR
// sRefresh := false ;
15642: LD_ADDR_EXP 70
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// sExp := false ;
15650: LD_ADDR_EXP 71
15654: PUSH
15655: LD_INT 0
15657: ST_TO_ADDR
// sDepot := false ;
15658: LD_ADDR_EXP 72
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// sFlag := false ;
15666: LD_ADDR_EXP 73
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// sKamikadze := false ;
15674: LD_ADDR_EXP 81
15678: PUSH
15679: LD_INT 0
15681: ST_TO_ADDR
// sTroll := false ;
15682: LD_ADDR_EXP 82
15686: PUSH
15687: LD_INT 0
15689: ST_TO_ADDR
// sSlow := false ;
15690: LD_ADDR_EXP 83
15694: PUSH
15695: LD_INT 0
15697: ST_TO_ADDR
// sLack := false ;
15698: LD_ADDR_EXP 84
15702: PUSH
15703: LD_INT 0
15705: ST_TO_ADDR
// sTank := false ;
15706: LD_ADDR_EXP 86
15710: PUSH
15711: LD_INT 0
15713: ST_TO_ADDR
// sRemote := false ;
15714: LD_ADDR_EXP 87
15718: PUSH
15719: LD_INT 0
15721: ST_TO_ADDR
// sPowell := false ;
15722: LD_ADDR_EXP 88
15726: PUSH
15727: LD_INT 0
15729: ST_TO_ADDR
// sTeleport := false ;
15730: LD_ADDR_EXP 91
15734: PUSH
15735: LD_INT 0
15737: ST_TO_ADDR
// sOilTower := false ;
15738: LD_ADDR_EXP 93
15742: PUSH
15743: LD_INT 0
15745: ST_TO_ADDR
// sShovel := false ;
15746: LD_ADDR_EXP 94
15750: PUSH
15751: LD_INT 0
15753: ST_TO_ADDR
// sSheik := false ;
15754: LD_ADDR_EXP 95
15758: PUSH
15759: LD_INT 0
15761: ST_TO_ADDR
// sEarthquake := false ;
15762: LD_ADDR_EXP 97
15766: PUSH
15767: LD_INT 0
15769: ST_TO_ADDR
// sAI := false ;
15770: LD_ADDR_EXP 98
15774: PUSH
15775: LD_INT 0
15777: ST_TO_ADDR
// sCargo := false ;
15778: LD_ADDR_EXP 101
15782: PUSH
15783: LD_INT 0
15785: ST_TO_ADDR
// sDLaser := false ;
15786: LD_ADDR_EXP 102
15790: PUSH
15791: LD_INT 0
15793: ST_TO_ADDR
// sExchange := false ;
15794: LD_ADDR_EXP 103
15798: PUSH
15799: LD_INT 0
15801: ST_TO_ADDR
// sFac := false ;
15802: LD_ADDR_EXP 104
15806: PUSH
15807: LD_INT 0
15809: ST_TO_ADDR
// sPower := false ;
15810: LD_ADDR_EXP 105
15814: PUSH
15815: LD_INT 0
15817: ST_TO_ADDR
// sRandom := false ;
15818: LD_ADDR_EXP 106
15822: PUSH
15823: LD_INT 0
15825: ST_TO_ADDR
// sShield := false ;
15826: LD_ADDR_EXP 107
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
// sTime := false ;
15834: LD_ADDR_EXP 108
15838: PUSH
15839: LD_INT 0
15841: ST_TO_ADDR
// sTools := false ;
15842: LD_ADDR_EXP 109
15846: PUSH
15847: LD_INT 0
15849: ST_TO_ADDR
// sSold := false ;
15850: LD_ADDR_EXP 74
15854: PUSH
15855: LD_INT 0
15857: ST_TO_ADDR
// sDiff := false ;
15858: LD_ADDR_EXP 75
15862: PUSH
15863: LD_INT 0
15865: ST_TO_ADDR
// sFog := false ;
15866: LD_ADDR_EXP 78
15870: PUSH
15871: LD_INT 0
15873: ST_TO_ADDR
// sReset := false ;
15874: LD_ADDR_EXP 79
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// sSun := false ;
15882: LD_ADDR_EXP 80
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// sTiger := false ;
15890: LD_ADDR_EXP 76
15894: PUSH
15895: LD_INT 0
15897: ST_TO_ADDR
// sBomb := false ;
15898: LD_ADDR_EXP 77
15902: PUSH
15903: LD_INT 0
15905: ST_TO_ADDR
// sWound := false ;
15906: LD_ADDR_EXP 85
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// sBetray := false ;
15914: LD_ADDR_EXP 89
15918: PUSH
15919: LD_INT 0
15921: ST_TO_ADDR
// sContamin := false ;
15922: LD_ADDR_EXP 90
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// sOil := false ;
15930: LD_ADDR_EXP 92
15934: PUSH
15935: LD_INT 0
15937: ST_TO_ADDR
// sStu := false ;
15938: LD_ADDR_EXP 96
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// sBazooka := false ;
15946: LD_ADDR_EXP 99
15950: PUSH
15951: LD_INT 0
15953: ST_TO_ADDR
// sMortar := false ;
15954: LD_ADDR_EXP 100
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// sRanger := false ;
15962: LD_ADDR_EXP 110
15966: PUSH
15967: LD_INT 0
15969: ST_TO_ADDR
// end ;
15970: LD_VAR 0 1
15974: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
15975: LD_INT 0
15977: PPUSH
15978: PPUSH
15979: PPUSH
15980: PPUSH
15981: PPUSH
// result := [ ] ;
15982: LD_ADDR_VAR 0 1
15986: PUSH
15987: EMPTY
15988: ST_TO_ADDR
// if campaign_id = 1 then
15989: LD_OWVAR 69
15993: PUSH
15994: LD_INT 1
15996: EQUAL
15997: IFFALSE 18935
// begin case mission_number of 1 :
15999: LD_OWVAR 70
16003: PUSH
16004: LD_INT 1
16006: DOUBLE
16007: EQUAL
16008: IFTRUE 16012
16010: GO 16076
16012: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16013: LD_ADDR_VAR 0 1
16017: PUSH
16018: LD_INT 2
16020: PUSH
16021: LD_INT 4
16023: PUSH
16024: LD_INT 11
16026: PUSH
16027: LD_INT 12
16029: PUSH
16030: LD_INT 15
16032: PUSH
16033: LD_INT 16
16035: PUSH
16036: LD_INT 22
16038: PUSH
16039: LD_INT 23
16041: PUSH
16042: LD_INT 26
16044: PUSH
16045: EMPTY
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: LIST
16053: LIST
16054: LIST
16055: PUSH
16056: LD_INT 101
16058: PUSH
16059: LD_INT 102
16061: PUSH
16062: LD_INT 106
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: LIST
16069: PUSH
16070: EMPTY
16071: LIST
16072: LIST
16073: ST_TO_ADDR
16074: GO 18933
16076: LD_INT 2
16078: DOUBLE
16079: EQUAL
16080: IFTRUE 16084
16082: GO 16156
16084: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16085: LD_ADDR_VAR 0 1
16089: PUSH
16090: LD_INT 2
16092: PUSH
16093: LD_INT 4
16095: PUSH
16096: LD_INT 11
16098: PUSH
16099: LD_INT 12
16101: PUSH
16102: LD_INT 15
16104: PUSH
16105: LD_INT 16
16107: PUSH
16108: LD_INT 22
16110: PUSH
16111: LD_INT 23
16113: PUSH
16114: LD_INT 26
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: LIST
16121: LIST
16122: LIST
16123: LIST
16124: LIST
16125: LIST
16126: LIST
16127: PUSH
16128: LD_INT 101
16130: PUSH
16131: LD_INT 102
16133: PUSH
16134: LD_INT 105
16136: PUSH
16137: LD_INT 106
16139: PUSH
16140: LD_INT 108
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: LIST
16147: LIST
16148: LIST
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: ST_TO_ADDR
16154: GO 18933
16156: LD_INT 3
16158: DOUBLE
16159: EQUAL
16160: IFTRUE 16164
16162: GO 16240
16164: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16165: LD_ADDR_VAR 0 1
16169: PUSH
16170: LD_INT 2
16172: PUSH
16173: LD_INT 4
16175: PUSH
16176: LD_INT 5
16178: PUSH
16179: LD_INT 11
16181: PUSH
16182: LD_INT 12
16184: PUSH
16185: LD_INT 15
16187: PUSH
16188: LD_INT 16
16190: PUSH
16191: LD_INT 22
16193: PUSH
16194: LD_INT 26
16196: PUSH
16197: LD_INT 36
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: LIST
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: LIST
16209: LIST
16210: LIST
16211: PUSH
16212: LD_INT 101
16214: PUSH
16215: LD_INT 102
16217: PUSH
16218: LD_INT 105
16220: PUSH
16221: LD_INT 106
16223: PUSH
16224: LD_INT 108
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: LIST
16231: LIST
16232: LIST
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: ST_TO_ADDR
16238: GO 18933
16240: LD_INT 4
16242: DOUBLE
16243: EQUAL
16244: IFTRUE 16248
16246: GO 16332
16248: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16249: LD_ADDR_VAR 0 1
16253: PUSH
16254: LD_INT 2
16256: PUSH
16257: LD_INT 4
16259: PUSH
16260: LD_INT 5
16262: PUSH
16263: LD_INT 8
16265: PUSH
16266: LD_INT 11
16268: PUSH
16269: LD_INT 12
16271: PUSH
16272: LD_INT 15
16274: PUSH
16275: LD_INT 16
16277: PUSH
16278: LD_INT 22
16280: PUSH
16281: LD_INT 23
16283: PUSH
16284: LD_INT 26
16286: PUSH
16287: LD_INT 36
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: LIST
16298: LIST
16299: LIST
16300: LIST
16301: LIST
16302: LIST
16303: PUSH
16304: LD_INT 101
16306: PUSH
16307: LD_INT 102
16309: PUSH
16310: LD_INT 105
16312: PUSH
16313: LD_INT 106
16315: PUSH
16316: LD_INT 108
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: ST_TO_ADDR
16330: GO 18933
16332: LD_INT 5
16334: DOUBLE
16335: EQUAL
16336: IFTRUE 16340
16338: GO 16440
16340: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16341: LD_ADDR_VAR 0 1
16345: PUSH
16346: LD_INT 2
16348: PUSH
16349: LD_INT 4
16351: PUSH
16352: LD_INT 5
16354: PUSH
16355: LD_INT 6
16357: PUSH
16358: LD_INT 8
16360: PUSH
16361: LD_INT 11
16363: PUSH
16364: LD_INT 12
16366: PUSH
16367: LD_INT 15
16369: PUSH
16370: LD_INT 16
16372: PUSH
16373: LD_INT 22
16375: PUSH
16376: LD_INT 23
16378: PUSH
16379: LD_INT 25
16381: PUSH
16382: LD_INT 26
16384: PUSH
16385: LD_INT 36
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: LIST
16400: LIST
16401: LIST
16402: LIST
16403: PUSH
16404: LD_INT 101
16406: PUSH
16407: LD_INT 102
16409: PUSH
16410: LD_INT 105
16412: PUSH
16413: LD_INT 106
16415: PUSH
16416: LD_INT 108
16418: PUSH
16419: LD_INT 109
16421: PUSH
16422: LD_INT 112
16424: PUSH
16425: EMPTY
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: ST_TO_ADDR
16438: GO 18933
16440: LD_INT 6
16442: DOUBLE
16443: EQUAL
16444: IFTRUE 16448
16446: GO 16568
16448: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16449: LD_ADDR_VAR 0 1
16453: PUSH
16454: LD_INT 2
16456: PUSH
16457: LD_INT 4
16459: PUSH
16460: LD_INT 5
16462: PUSH
16463: LD_INT 6
16465: PUSH
16466: LD_INT 8
16468: PUSH
16469: LD_INT 11
16471: PUSH
16472: LD_INT 12
16474: PUSH
16475: LD_INT 15
16477: PUSH
16478: LD_INT 16
16480: PUSH
16481: LD_INT 20
16483: PUSH
16484: LD_INT 21
16486: PUSH
16487: LD_INT 22
16489: PUSH
16490: LD_INT 23
16492: PUSH
16493: LD_INT 25
16495: PUSH
16496: LD_INT 26
16498: PUSH
16499: LD_INT 30
16501: PUSH
16502: LD_INT 31
16504: PUSH
16505: LD_INT 32
16507: PUSH
16508: LD_INT 36
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: LIST
16527: LIST
16528: LIST
16529: LIST
16530: LIST
16531: PUSH
16532: LD_INT 101
16534: PUSH
16535: LD_INT 102
16537: PUSH
16538: LD_INT 105
16540: PUSH
16541: LD_INT 106
16543: PUSH
16544: LD_INT 108
16546: PUSH
16547: LD_INT 109
16549: PUSH
16550: LD_INT 112
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: PUSH
16562: EMPTY
16563: LIST
16564: LIST
16565: ST_TO_ADDR
16566: GO 18933
16568: LD_INT 7
16570: DOUBLE
16571: EQUAL
16572: IFTRUE 16576
16574: GO 16676
16576: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16577: LD_ADDR_VAR 0 1
16581: PUSH
16582: LD_INT 2
16584: PUSH
16585: LD_INT 4
16587: PUSH
16588: LD_INT 5
16590: PUSH
16591: LD_INT 7
16593: PUSH
16594: LD_INT 11
16596: PUSH
16597: LD_INT 12
16599: PUSH
16600: LD_INT 15
16602: PUSH
16603: LD_INT 16
16605: PUSH
16606: LD_INT 20
16608: PUSH
16609: LD_INT 21
16611: PUSH
16612: LD_INT 22
16614: PUSH
16615: LD_INT 23
16617: PUSH
16618: LD_INT 25
16620: PUSH
16621: LD_INT 26
16623: PUSH
16624: EMPTY
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: LIST
16633: LIST
16634: LIST
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: PUSH
16640: LD_INT 101
16642: PUSH
16643: LD_INT 102
16645: PUSH
16646: LD_INT 103
16648: PUSH
16649: LD_INT 105
16651: PUSH
16652: LD_INT 106
16654: PUSH
16655: LD_INT 108
16657: PUSH
16658: LD_INT 112
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: PUSH
16670: EMPTY
16671: LIST
16672: LIST
16673: ST_TO_ADDR
16674: GO 18933
16676: LD_INT 8
16678: DOUBLE
16679: EQUAL
16680: IFTRUE 16684
16682: GO 16812
16684: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16685: LD_ADDR_VAR 0 1
16689: PUSH
16690: LD_INT 2
16692: PUSH
16693: LD_INT 4
16695: PUSH
16696: LD_INT 5
16698: PUSH
16699: LD_INT 6
16701: PUSH
16702: LD_INT 7
16704: PUSH
16705: LD_INT 8
16707: PUSH
16708: LD_INT 11
16710: PUSH
16711: LD_INT 12
16713: PUSH
16714: LD_INT 15
16716: PUSH
16717: LD_INT 16
16719: PUSH
16720: LD_INT 20
16722: PUSH
16723: LD_INT 21
16725: PUSH
16726: LD_INT 22
16728: PUSH
16729: LD_INT 23
16731: PUSH
16732: LD_INT 25
16734: PUSH
16735: LD_INT 26
16737: PUSH
16738: LD_INT 30
16740: PUSH
16741: LD_INT 31
16743: PUSH
16744: LD_INT 32
16746: PUSH
16747: LD_INT 36
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: LIST
16765: LIST
16766: LIST
16767: LIST
16768: LIST
16769: LIST
16770: LIST
16771: PUSH
16772: LD_INT 101
16774: PUSH
16775: LD_INT 102
16777: PUSH
16778: LD_INT 103
16780: PUSH
16781: LD_INT 105
16783: PUSH
16784: LD_INT 106
16786: PUSH
16787: LD_INT 108
16789: PUSH
16790: LD_INT 109
16792: PUSH
16793: LD_INT 112
16795: PUSH
16796: EMPTY
16797: LIST
16798: LIST
16799: LIST
16800: LIST
16801: LIST
16802: LIST
16803: LIST
16804: LIST
16805: PUSH
16806: EMPTY
16807: LIST
16808: LIST
16809: ST_TO_ADDR
16810: GO 18933
16812: LD_INT 9
16814: DOUBLE
16815: EQUAL
16816: IFTRUE 16820
16818: GO 16956
16820: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16821: LD_ADDR_VAR 0 1
16825: PUSH
16826: LD_INT 2
16828: PUSH
16829: LD_INT 4
16831: PUSH
16832: LD_INT 5
16834: PUSH
16835: LD_INT 6
16837: PUSH
16838: LD_INT 7
16840: PUSH
16841: LD_INT 8
16843: PUSH
16844: LD_INT 11
16846: PUSH
16847: LD_INT 12
16849: PUSH
16850: LD_INT 15
16852: PUSH
16853: LD_INT 16
16855: PUSH
16856: LD_INT 20
16858: PUSH
16859: LD_INT 21
16861: PUSH
16862: LD_INT 22
16864: PUSH
16865: LD_INT 23
16867: PUSH
16868: LD_INT 25
16870: PUSH
16871: LD_INT 26
16873: PUSH
16874: LD_INT 28
16876: PUSH
16877: LD_INT 30
16879: PUSH
16880: LD_INT 31
16882: PUSH
16883: LD_INT 32
16885: PUSH
16886: LD_INT 36
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: PUSH
16912: LD_INT 101
16914: PUSH
16915: LD_INT 102
16917: PUSH
16918: LD_INT 103
16920: PUSH
16921: LD_INT 105
16923: PUSH
16924: LD_INT 106
16926: PUSH
16927: LD_INT 108
16929: PUSH
16930: LD_INT 109
16932: PUSH
16933: LD_INT 112
16935: PUSH
16936: LD_INT 114
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: LIST
16943: LIST
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: LIST
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: ST_TO_ADDR
16954: GO 18933
16956: LD_INT 10
16958: DOUBLE
16959: EQUAL
16960: IFTRUE 16964
16962: GO 17148
16964: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
16965: LD_ADDR_VAR 0 1
16969: PUSH
16970: LD_INT 2
16972: PUSH
16973: LD_INT 4
16975: PUSH
16976: LD_INT 5
16978: PUSH
16979: LD_INT 6
16981: PUSH
16982: LD_INT 7
16984: PUSH
16985: LD_INT 8
16987: PUSH
16988: LD_INT 9
16990: PUSH
16991: LD_INT 10
16993: PUSH
16994: LD_INT 11
16996: PUSH
16997: LD_INT 12
16999: PUSH
17000: LD_INT 13
17002: PUSH
17003: LD_INT 14
17005: PUSH
17006: LD_INT 15
17008: PUSH
17009: LD_INT 16
17011: PUSH
17012: LD_INT 17
17014: PUSH
17015: LD_INT 18
17017: PUSH
17018: LD_INT 19
17020: PUSH
17021: LD_INT 20
17023: PUSH
17024: LD_INT 21
17026: PUSH
17027: LD_INT 22
17029: PUSH
17030: LD_INT 23
17032: PUSH
17033: LD_INT 24
17035: PUSH
17036: LD_INT 25
17038: PUSH
17039: LD_INT 26
17041: PUSH
17042: LD_INT 28
17044: PUSH
17045: LD_INT 30
17047: PUSH
17048: LD_INT 31
17050: PUSH
17051: LD_INT 32
17053: PUSH
17054: LD_INT 36
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: LIST
17081: LIST
17082: LIST
17083: LIST
17084: LIST
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 101
17090: PUSH
17091: LD_INT 102
17093: PUSH
17094: LD_INT 103
17096: PUSH
17097: LD_INT 104
17099: PUSH
17100: LD_INT 105
17102: PUSH
17103: LD_INT 106
17105: PUSH
17106: LD_INT 107
17108: PUSH
17109: LD_INT 108
17111: PUSH
17112: LD_INT 109
17114: PUSH
17115: LD_INT 110
17117: PUSH
17118: LD_INT 111
17120: PUSH
17121: LD_INT 112
17123: PUSH
17124: LD_INT 114
17126: PUSH
17127: EMPTY
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: PUSH
17142: EMPTY
17143: LIST
17144: LIST
17145: ST_TO_ADDR
17146: GO 18933
17148: LD_INT 11
17150: DOUBLE
17151: EQUAL
17152: IFTRUE 17156
17154: GO 17348
17156: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17157: LD_ADDR_VAR 0 1
17161: PUSH
17162: LD_INT 2
17164: PUSH
17165: LD_INT 3
17167: PUSH
17168: LD_INT 4
17170: PUSH
17171: LD_INT 5
17173: PUSH
17174: LD_INT 6
17176: PUSH
17177: LD_INT 7
17179: PUSH
17180: LD_INT 8
17182: PUSH
17183: LD_INT 9
17185: PUSH
17186: LD_INT 10
17188: PUSH
17189: LD_INT 11
17191: PUSH
17192: LD_INT 12
17194: PUSH
17195: LD_INT 13
17197: PUSH
17198: LD_INT 14
17200: PUSH
17201: LD_INT 15
17203: PUSH
17204: LD_INT 16
17206: PUSH
17207: LD_INT 17
17209: PUSH
17210: LD_INT 18
17212: PUSH
17213: LD_INT 19
17215: PUSH
17216: LD_INT 20
17218: PUSH
17219: LD_INT 21
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_INT 23
17227: PUSH
17228: LD_INT 24
17230: PUSH
17231: LD_INT 25
17233: PUSH
17234: LD_INT 26
17236: PUSH
17237: LD_INT 28
17239: PUSH
17240: LD_INT 30
17242: PUSH
17243: LD_INT 31
17245: PUSH
17246: LD_INT 32
17248: PUSH
17249: LD_INT 34
17251: PUSH
17252: LD_INT 36
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: LIST
17281: LIST
17282: LIST
17283: LIST
17284: LIST
17285: LIST
17286: LIST
17287: PUSH
17288: LD_INT 101
17290: PUSH
17291: LD_INT 102
17293: PUSH
17294: LD_INT 103
17296: PUSH
17297: LD_INT 104
17299: PUSH
17300: LD_INT 105
17302: PUSH
17303: LD_INT 106
17305: PUSH
17306: LD_INT 107
17308: PUSH
17309: LD_INT 108
17311: PUSH
17312: LD_INT 109
17314: PUSH
17315: LD_INT 110
17317: PUSH
17318: LD_INT 111
17320: PUSH
17321: LD_INT 112
17323: PUSH
17324: LD_INT 114
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: PUSH
17342: EMPTY
17343: LIST
17344: LIST
17345: ST_TO_ADDR
17346: GO 18933
17348: LD_INT 12
17350: DOUBLE
17351: EQUAL
17352: IFTRUE 17356
17354: GO 17564
17356: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17357: LD_ADDR_VAR 0 1
17361: PUSH
17362: LD_INT 1
17364: PUSH
17365: LD_INT 2
17367: PUSH
17368: LD_INT 3
17370: PUSH
17371: LD_INT 4
17373: PUSH
17374: LD_INT 5
17376: PUSH
17377: LD_INT 6
17379: PUSH
17380: LD_INT 7
17382: PUSH
17383: LD_INT 8
17385: PUSH
17386: LD_INT 9
17388: PUSH
17389: LD_INT 10
17391: PUSH
17392: LD_INT 11
17394: PUSH
17395: LD_INT 12
17397: PUSH
17398: LD_INT 13
17400: PUSH
17401: LD_INT 14
17403: PUSH
17404: LD_INT 15
17406: PUSH
17407: LD_INT 16
17409: PUSH
17410: LD_INT 17
17412: PUSH
17413: LD_INT 18
17415: PUSH
17416: LD_INT 19
17418: PUSH
17419: LD_INT 20
17421: PUSH
17422: LD_INT 21
17424: PUSH
17425: LD_INT 22
17427: PUSH
17428: LD_INT 23
17430: PUSH
17431: LD_INT 24
17433: PUSH
17434: LD_INT 25
17436: PUSH
17437: LD_INT 26
17439: PUSH
17440: LD_INT 27
17442: PUSH
17443: LD_INT 28
17445: PUSH
17446: LD_INT 30
17448: PUSH
17449: LD_INT 31
17451: PUSH
17452: LD_INT 32
17454: PUSH
17455: LD_INT 33
17457: PUSH
17458: LD_INT 34
17460: PUSH
17461: LD_INT 36
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: LIST
17493: LIST
17494: LIST
17495: LIST
17496: LIST
17497: LIST
17498: LIST
17499: PUSH
17500: LD_INT 101
17502: PUSH
17503: LD_INT 102
17505: PUSH
17506: LD_INT 103
17508: PUSH
17509: LD_INT 104
17511: PUSH
17512: LD_INT 105
17514: PUSH
17515: LD_INT 106
17517: PUSH
17518: LD_INT 107
17520: PUSH
17521: LD_INT 108
17523: PUSH
17524: LD_INT 109
17526: PUSH
17527: LD_INT 110
17529: PUSH
17530: LD_INT 111
17532: PUSH
17533: LD_INT 112
17535: PUSH
17536: LD_INT 113
17538: PUSH
17539: LD_INT 114
17541: PUSH
17542: EMPTY
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: ST_TO_ADDR
17562: GO 18933
17564: LD_INT 13
17566: DOUBLE
17567: EQUAL
17568: IFTRUE 17572
17570: GO 17768
17572: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17573: LD_ADDR_VAR 0 1
17577: PUSH
17578: LD_INT 1
17580: PUSH
17581: LD_INT 2
17583: PUSH
17584: LD_INT 3
17586: PUSH
17587: LD_INT 4
17589: PUSH
17590: LD_INT 5
17592: PUSH
17593: LD_INT 8
17595: PUSH
17596: LD_INT 9
17598: PUSH
17599: LD_INT 10
17601: PUSH
17602: LD_INT 11
17604: PUSH
17605: LD_INT 12
17607: PUSH
17608: LD_INT 14
17610: PUSH
17611: LD_INT 15
17613: PUSH
17614: LD_INT 16
17616: PUSH
17617: LD_INT 17
17619: PUSH
17620: LD_INT 18
17622: PUSH
17623: LD_INT 19
17625: PUSH
17626: LD_INT 20
17628: PUSH
17629: LD_INT 21
17631: PUSH
17632: LD_INT 22
17634: PUSH
17635: LD_INT 23
17637: PUSH
17638: LD_INT 24
17640: PUSH
17641: LD_INT 25
17643: PUSH
17644: LD_INT 26
17646: PUSH
17647: LD_INT 27
17649: PUSH
17650: LD_INT 28
17652: PUSH
17653: LD_INT 30
17655: PUSH
17656: LD_INT 31
17658: PUSH
17659: LD_INT 32
17661: PUSH
17662: LD_INT 33
17664: PUSH
17665: LD_INT 34
17667: PUSH
17668: LD_INT 36
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: PUSH
17704: LD_INT 101
17706: PUSH
17707: LD_INT 102
17709: PUSH
17710: LD_INT 103
17712: PUSH
17713: LD_INT 104
17715: PUSH
17716: LD_INT 105
17718: PUSH
17719: LD_INT 106
17721: PUSH
17722: LD_INT 107
17724: PUSH
17725: LD_INT 108
17727: PUSH
17728: LD_INT 109
17730: PUSH
17731: LD_INT 110
17733: PUSH
17734: LD_INT 111
17736: PUSH
17737: LD_INT 112
17739: PUSH
17740: LD_INT 113
17742: PUSH
17743: LD_INT 114
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: PUSH
17762: EMPTY
17763: LIST
17764: LIST
17765: ST_TO_ADDR
17766: GO 18933
17768: LD_INT 14
17770: DOUBLE
17771: EQUAL
17772: IFTRUE 17776
17774: GO 17988
17776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17777: LD_ADDR_VAR 0 1
17781: PUSH
17782: LD_INT 1
17784: PUSH
17785: LD_INT 2
17787: PUSH
17788: LD_INT 3
17790: PUSH
17791: LD_INT 4
17793: PUSH
17794: LD_INT 5
17796: PUSH
17797: LD_INT 6
17799: PUSH
17800: LD_INT 7
17802: PUSH
17803: LD_INT 8
17805: PUSH
17806: LD_INT 9
17808: PUSH
17809: LD_INT 10
17811: PUSH
17812: LD_INT 11
17814: PUSH
17815: LD_INT 12
17817: PUSH
17818: LD_INT 13
17820: PUSH
17821: LD_INT 14
17823: PUSH
17824: LD_INT 15
17826: PUSH
17827: LD_INT 16
17829: PUSH
17830: LD_INT 17
17832: PUSH
17833: LD_INT 18
17835: PUSH
17836: LD_INT 19
17838: PUSH
17839: LD_INT 20
17841: PUSH
17842: LD_INT 21
17844: PUSH
17845: LD_INT 22
17847: PUSH
17848: LD_INT 23
17850: PUSH
17851: LD_INT 24
17853: PUSH
17854: LD_INT 25
17856: PUSH
17857: LD_INT 26
17859: PUSH
17860: LD_INT 27
17862: PUSH
17863: LD_INT 28
17865: PUSH
17866: LD_INT 29
17868: PUSH
17869: LD_INT 30
17871: PUSH
17872: LD_INT 31
17874: PUSH
17875: LD_INT 32
17877: PUSH
17878: LD_INT 33
17880: PUSH
17881: LD_INT 34
17883: PUSH
17884: LD_INT 36
17886: PUSH
17887: EMPTY
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: PUSH
17924: LD_INT 101
17926: PUSH
17927: LD_INT 102
17929: PUSH
17930: LD_INT 103
17932: PUSH
17933: LD_INT 104
17935: PUSH
17936: LD_INT 105
17938: PUSH
17939: LD_INT 106
17941: PUSH
17942: LD_INT 107
17944: PUSH
17945: LD_INT 108
17947: PUSH
17948: LD_INT 109
17950: PUSH
17951: LD_INT 110
17953: PUSH
17954: LD_INT 111
17956: PUSH
17957: LD_INT 112
17959: PUSH
17960: LD_INT 113
17962: PUSH
17963: LD_INT 114
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: PUSH
17982: EMPTY
17983: LIST
17984: LIST
17985: ST_TO_ADDR
17986: GO 18933
17988: LD_INT 15
17990: DOUBLE
17991: EQUAL
17992: IFTRUE 17996
17994: GO 18208
17996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
17997: LD_ADDR_VAR 0 1
18001: PUSH
18002: LD_INT 1
18004: PUSH
18005: LD_INT 2
18007: PUSH
18008: LD_INT 3
18010: PUSH
18011: LD_INT 4
18013: PUSH
18014: LD_INT 5
18016: PUSH
18017: LD_INT 6
18019: PUSH
18020: LD_INT 7
18022: PUSH
18023: LD_INT 8
18025: PUSH
18026: LD_INT 9
18028: PUSH
18029: LD_INT 10
18031: PUSH
18032: LD_INT 11
18034: PUSH
18035: LD_INT 12
18037: PUSH
18038: LD_INT 13
18040: PUSH
18041: LD_INT 14
18043: PUSH
18044: LD_INT 15
18046: PUSH
18047: LD_INT 16
18049: PUSH
18050: LD_INT 17
18052: PUSH
18053: LD_INT 18
18055: PUSH
18056: LD_INT 19
18058: PUSH
18059: LD_INT 20
18061: PUSH
18062: LD_INT 21
18064: PUSH
18065: LD_INT 22
18067: PUSH
18068: LD_INT 23
18070: PUSH
18071: LD_INT 24
18073: PUSH
18074: LD_INT 25
18076: PUSH
18077: LD_INT 26
18079: PUSH
18080: LD_INT 27
18082: PUSH
18083: LD_INT 28
18085: PUSH
18086: LD_INT 29
18088: PUSH
18089: LD_INT 30
18091: PUSH
18092: LD_INT 31
18094: PUSH
18095: LD_INT 32
18097: PUSH
18098: LD_INT 33
18100: PUSH
18101: LD_INT 34
18103: PUSH
18104: LD_INT 36
18106: PUSH
18107: EMPTY
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: PUSH
18144: LD_INT 101
18146: PUSH
18147: LD_INT 102
18149: PUSH
18150: LD_INT 103
18152: PUSH
18153: LD_INT 104
18155: PUSH
18156: LD_INT 105
18158: PUSH
18159: LD_INT 106
18161: PUSH
18162: LD_INT 107
18164: PUSH
18165: LD_INT 108
18167: PUSH
18168: LD_INT 109
18170: PUSH
18171: LD_INT 110
18173: PUSH
18174: LD_INT 111
18176: PUSH
18177: LD_INT 112
18179: PUSH
18180: LD_INT 113
18182: PUSH
18183: LD_INT 114
18185: PUSH
18186: EMPTY
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: PUSH
18202: EMPTY
18203: LIST
18204: LIST
18205: ST_TO_ADDR
18206: GO 18933
18208: LD_INT 16
18210: DOUBLE
18211: EQUAL
18212: IFTRUE 18216
18214: GO 18340
18216: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18217: LD_ADDR_VAR 0 1
18221: PUSH
18222: LD_INT 2
18224: PUSH
18225: LD_INT 4
18227: PUSH
18228: LD_INT 5
18230: PUSH
18231: LD_INT 7
18233: PUSH
18234: LD_INT 11
18236: PUSH
18237: LD_INT 12
18239: PUSH
18240: LD_INT 15
18242: PUSH
18243: LD_INT 16
18245: PUSH
18246: LD_INT 20
18248: PUSH
18249: LD_INT 21
18251: PUSH
18252: LD_INT 22
18254: PUSH
18255: LD_INT 23
18257: PUSH
18258: LD_INT 25
18260: PUSH
18261: LD_INT 26
18263: PUSH
18264: LD_INT 30
18266: PUSH
18267: LD_INT 31
18269: PUSH
18270: LD_INT 32
18272: PUSH
18273: LD_INT 33
18275: PUSH
18276: LD_INT 34
18278: PUSH
18279: EMPTY
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: LIST
18293: LIST
18294: LIST
18295: LIST
18296: LIST
18297: LIST
18298: LIST
18299: PUSH
18300: LD_INT 101
18302: PUSH
18303: LD_INT 102
18305: PUSH
18306: LD_INT 103
18308: PUSH
18309: LD_INT 106
18311: PUSH
18312: LD_INT 108
18314: PUSH
18315: LD_INT 112
18317: PUSH
18318: LD_INT 113
18320: PUSH
18321: LD_INT 114
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: PUSH
18334: EMPTY
18335: LIST
18336: LIST
18337: ST_TO_ADDR
18338: GO 18933
18340: LD_INT 17
18342: DOUBLE
18343: EQUAL
18344: IFTRUE 18348
18346: GO 18560
18348: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18349: LD_ADDR_VAR 0 1
18353: PUSH
18354: LD_INT 1
18356: PUSH
18357: LD_INT 2
18359: PUSH
18360: LD_INT 3
18362: PUSH
18363: LD_INT 4
18365: PUSH
18366: LD_INT 5
18368: PUSH
18369: LD_INT 6
18371: PUSH
18372: LD_INT 7
18374: PUSH
18375: LD_INT 8
18377: PUSH
18378: LD_INT 9
18380: PUSH
18381: LD_INT 10
18383: PUSH
18384: LD_INT 11
18386: PUSH
18387: LD_INT 12
18389: PUSH
18390: LD_INT 13
18392: PUSH
18393: LD_INT 14
18395: PUSH
18396: LD_INT 15
18398: PUSH
18399: LD_INT 16
18401: PUSH
18402: LD_INT 17
18404: PUSH
18405: LD_INT 18
18407: PUSH
18408: LD_INT 19
18410: PUSH
18411: LD_INT 20
18413: PUSH
18414: LD_INT 21
18416: PUSH
18417: LD_INT 22
18419: PUSH
18420: LD_INT 23
18422: PUSH
18423: LD_INT 24
18425: PUSH
18426: LD_INT 25
18428: PUSH
18429: LD_INT 26
18431: PUSH
18432: LD_INT 27
18434: PUSH
18435: LD_INT 28
18437: PUSH
18438: LD_INT 29
18440: PUSH
18441: LD_INT 30
18443: PUSH
18444: LD_INT 31
18446: PUSH
18447: LD_INT 32
18449: PUSH
18450: LD_INT 33
18452: PUSH
18453: LD_INT 34
18455: PUSH
18456: LD_INT 36
18458: PUSH
18459: EMPTY
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: LIST
18489: LIST
18490: LIST
18491: LIST
18492: LIST
18493: LIST
18494: LIST
18495: PUSH
18496: LD_INT 101
18498: PUSH
18499: LD_INT 102
18501: PUSH
18502: LD_INT 103
18504: PUSH
18505: LD_INT 104
18507: PUSH
18508: LD_INT 105
18510: PUSH
18511: LD_INT 106
18513: PUSH
18514: LD_INT 107
18516: PUSH
18517: LD_INT 108
18519: PUSH
18520: LD_INT 109
18522: PUSH
18523: LD_INT 110
18525: PUSH
18526: LD_INT 111
18528: PUSH
18529: LD_INT 112
18531: PUSH
18532: LD_INT 113
18534: PUSH
18535: LD_INT 114
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: ST_TO_ADDR
18558: GO 18933
18560: LD_INT 18
18562: DOUBLE
18563: EQUAL
18564: IFTRUE 18568
18566: GO 18704
18568: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18569: LD_ADDR_VAR 0 1
18573: PUSH
18574: LD_INT 2
18576: PUSH
18577: LD_INT 4
18579: PUSH
18580: LD_INT 5
18582: PUSH
18583: LD_INT 7
18585: PUSH
18586: LD_INT 11
18588: PUSH
18589: LD_INT 12
18591: PUSH
18592: LD_INT 15
18594: PUSH
18595: LD_INT 16
18597: PUSH
18598: LD_INT 20
18600: PUSH
18601: LD_INT 21
18603: PUSH
18604: LD_INT 22
18606: PUSH
18607: LD_INT 23
18609: PUSH
18610: LD_INT 25
18612: PUSH
18613: LD_INT 26
18615: PUSH
18616: LD_INT 30
18618: PUSH
18619: LD_INT 31
18621: PUSH
18622: LD_INT 32
18624: PUSH
18625: LD_INT 33
18627: PUSH
18628: LD_INT 34
18630: PUSH
18631: LD_INT 35
18633: PUSH
18634: LD_INT 36
18636: PUSH
18637: EMPTY
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: LIST
18653: LIST
18654: LIST
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: PUSH
18660: LD_INT 101
18662: PUSH
18663: LD_INT 102
18665: PUSH
18666: LD_INT 103
18668: PUSH
18669: LD_INT 106
18671: PUSH
18672: LD_INT 108
18674: PUSH
18675: LD_INT 112
18677: PUSH
18678: LD_INT 113
18680: PUSH
18681: LD_INT 114
18683: PUSH
18684: LD_INT 115
18686: PUSH
18687: EMPTY
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: PUSH
18698: EMPTY
18699: LIST
18700: LIST
18701: ST_TO_ADDR
18702: GO 18933
18704: LD_INT 19
18706: DOUBLE
18707: EQUAL
18708: IFTRUE 18712
18710: GO 18932
18712: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18713: LD_ADDR_VAR 0 1
18717: PUSH
18718: LD_INT 1
18720: PUSH
18721: LD_INT 2
18723: PUSH
18724: LD_INT 3
18726: PUSH
18727: LD_INT 4
18729: PUSH
18730: LD_INT 5
18732: PUSH
18733: LD_INT 6
18735: PUSH
18736: LD_INT 7
18738: PUSH
18739: LD_INT 8
18741: PUSH
18742: LD_INT 9
18744: PUSH
18745: LD_INT 10
18747: PUSH
18748: LD_INT 11
18750: PUSH
18751: LD_INT 12
18753: PUSH
18754: LD_INT 13
18756: PUSH
18757: LD_INT 14
18759: PUSH
18760: LD_INT 15
18762: PUSH
18763: LD_INT 16
18765: PUSH
18766: LD_INT 17
18768: PUSH
18769: LD_INT 18
18771: PUSH
18772: LD_INT 19
18774: PUSH
18775: LD_INT 20
18777: PUSH
18778: LD_INT 21
18780: PUSH
18781: LD_INT 22
18783: PUSH
18784: LD_INT 23
18786: PUSH
18787: LD_INT 24
18789: PUSH
18790: LD_INT 25
18792: PUSH
18793: LD_INT 26
18795: PUSH
18796: LD_INT 27
18798: PUSH
18799: LD_INT 28
18801: PUSH
18802: LD_INT 29
18804: PUSH
18805: LD_INT 30
18807: PUSH
18808: LD_INT 31
18810: PUSH
18811: LD_INT 32
18813: PUSH
18814: LD_INT 33
18816: PUSH
18817: LD_INT 34
18819: PUSH
18820: LD_INT 35
18822: PUSH
18823: LD_INT 36
18825: PUSH
18826: EMPTY
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: LIST
18863: PUSH
18864: LD_INT 101
18866: PUSH
18867: LD_INT 102
18869: PUSH
18870: LD_INT 103
18872: PUSH
18873: LD_INT 104
18875: PUSH
18876: LD_INT 105
18878: PUSH
18879: LD_INT 106
18881: PUSH
18882: LD_INT 107
18884: PUSH
18885: LD_INT 108
18887: PUSH
18888: LD_INT 109
18890: PUSH
18891: LD_INT 110
18893: PUSH
18894: LD_INT 111
18896: PUSH
18897: LD_INT 112
18899: PUSH
18900: LD_INT 113
18902: PUSH
18903: LD_INT 114
18905: PUSH
18906: LD_INT 115
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: ST_TO_ADDR
18930: GO 18933
18932: POP
// end else
18933: GO 19152
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
18935: LD_ADDR_VAR 0 1
18939: PUSH
18940: LD_INT 1
18942: PUSH
18943: LD_INT 2
18945: PUSH
18946: LD_INT 3
18948: PUSH
18949: LD_INT 4
18951: PUSH
18952: LD_INT 5
18954: PUSH
18955: LD_INT 6
18957: PUSH
18958: LD_INT 7
18960: PUSH
18961: LD_INT 8
18963: PUSH
18964: LD_INT 9
18966: PUSH
18967: LD_INT 10
18969: PUSH
18970: LD_INT 11
18972: PUSH
18973: LD_INT 12
18975: PUSH
18976: LD_INT 13
18978: PUSH
18979: LD_INT 14
18981: PUSH
18982: LD_INT 15
18984: PUSH
18985: LD_INT 16
18987: PUSH
18988: LD_INT 17
18990: PUSH
18991: LD_INT 18
18993: PUSH
18994: LD_INT 19
18996: PUSH
18997: LD_INT 20
18999: PUSH
19000: LD_INT 21
19002: PUSH
19003: LD_INT 22
19005: PUSH
19006: LD_INT 23
19008: PUSH
19009: LD_INT 24
19011: PUSH
19012: LD_INT 25
19014: PUSH
19015: LD_INT 26
19017: PUSH
19018: LD_INT 27
19020: PUSH
19021: LD_INT 28
19023: PUSH
19024: LD_INT 29
19026: PUSH
19027: LD_INT 30
19029: PUSH
19030: LD_INT 31
19032: PUSH
19033: LD_INT 32
19035: PUSH
19036: LD_INT 33
19038: PUSH
19039: LD_INT 34
19041: PUSH
19042: LD_INT 35
19044: PUSH
19045: LD_INT 36
19047: PUSH
19048: EMPTY
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: LIST
19079: LIST
19080: LIST
19081: LIST
19082: LIST
19083: LIST
19084: LIST
19085: PUSH
19086: LD_INT 101
19088: PUSH
19089: LD_INT 102
19091: PUSH
19092: LD_INT 103
19094: PUSH
19095: LD_INT 104
19097: PUSH
19098: LD_INT 105
19100: PUSH
19101: LD_INT 106
19103: PUSH
19104: LD_INT 107
19106: PUSH
19107: LD_INT 108
19109: PUSH
19110: LD_INT 109
19112: PUSH
19113: LD_INT 110
19115: PUSH
19116: LD_INT 111
19118: PUSH
19119: LD_INT 112
19121: PUSH
19122: LD_INT 113
19124: PUSH
19125: LD_INT 114
19127: PUSH
19128: LD_INT 115
19130: PUSH
19131: EMPTY
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: ST_TO_ADDR
// if result then
19152: LD_VAR 0 1
19156: IFFALSE 19445
// begin normal :=  ;
19158: LD_ADDR_VAR 0 3
19162: PUSH
19163: LD_STRING 
19165: ST_TO_ADDR
// hardcore :=  ;
19166: LD_ADDR_VAR 0 4
19170: PUSH
19171: LD_STRING 
19173: ST_TO_ADDR
// for i = 1 to normalCounter do
19174: LD_ADDR_VAR 0 5
19178: PUSH
19179: DOUBLE
19180: LD_INT 1
19182: DEC
19183: ST_TO_ADDR
19184: LD_EXP 58
19188: PUSH
19189: FOR_TO
19190: IFFALSE 19291
// begin tmp := 0 ;
19192: LD_ADDR_VAR 0 2
19196: PUSH
19197: LD_STRING 0
19199: ST_TO_ADDR
// if result [ 1 ] then
19200: LD_VAR 0 1
19204: PUSH
19205: LD_INT 1
19207: ARRAY
19208: IFFALSE 19273
// if result [ 1 ] [ 1 ] = i then
19210: LD_VAR 0 1
19214: PUSH
19215: LD_INT 1
19217: ARRAY
19218: PUSH
19219: LD_INT 1
19221: ARRAY
19222: PUSH
19223: LD_VAR 0 5
19227: EQUAL
19228: IFFALSE 19273
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19230: LD_ADDR_VAR 0 1
19234: PUSH
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_INT 1
19242: PPUSH
19243: LD_VAR 0 1
19247: PUSH
19248: LD_INT 1
19250: ARRAY
19251: PPUSH
19252: LD_INT 1
19254: PPUSH
19255: CALL_OW 3
19259: PPUSH
19260: CALL_OW 1
19264: ST_TO_ADDR
// tmp := 1 ;
19265: LD_ADDR_VAR 0 2
19269: PUSH
19270: LD_STRING 1
19272: ST_TO_ADDR
// end ; normal := normal & tmp ;
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: LD_VAR 0 3
19282: PUSH
19283: LD_VAR 0 2
19287: STR
19288: ST_TO_ADDR
// end ;
19289: GO 19189
19291: POP
19292: POP
// for i = 1 to hardcoreCounter do
19293: LD_ADDR_VAR 0 5
19297: PUSH
19298: DOUBLE
19299: LD_INT 1
19301: DEC
19302: ST_TO_ADDR
19303: LD_EXP 59
19307: PUSH
19308: FOR_TO
19309: IFFALSE 19414
// begin tmp := 0 ;
19311: LD_ADDR_VAR 0 2
19315: PUSH
19316: LD_STRING 0
19318: ST_TO_ADDR
// if result [ 2 ] then
19319: LD_VAR 0 1
19323: PUSH
19324: LD_INT 2
19326: ARRAY
19327: IFFALSE 19396
// if result [ 2 ] [ 1 ] = 100 + i then
19329: LD_VAR 0 1
19333: PUSH
19334: LD_INT 2
19336: ARRAY
19337: PUSH
19338: LD_INT 1
19340: ARRAY
19341: PUSH
19342: LD_INT 100
19344: PUSH
19345: LD_VAR 0 5
19349: PLUS
19350: EQUAL
19351: IFFALSE 19396
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: LD_VAR 0 1
19362: PPUSH
19363: LD_INT 2
19365: PPUSH
19366: LD_VAR 0 1
19370: PUSH
19371: LD_INT 2
19373: ARRAY
19374: PPUSH
19375: LD_INT 1
19377: PPUSH
19378: CALL_OW 3
19382: PPUSH
19383: CALL_OW 1
19387: ST_TO_ADDR
// tmp := 1 ;
19388: LD_ADDR_VAR 0 2
19392: PUSH
19393: LD_STRING 1
19395: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19396: LD_ADDR_VAR 0 4
19400: PUSH
19401: LD_VAR 0 4
19405: PUSH
19406: LD_VAR 0 2
19410: STR
19411: ST_TO_ADDR
// end ;
19412: GO 19308
19414: POP
19415: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19416: LD_STRING getStreamItemsFromMission("
19418: PUSH
19419: LD_VAR 0 3
19423: STR
19424: PUSH
19425: LD_STRING ","
19427: STR
19428: PUSH
19429: LD_VAR 0 4
19433: STR
19434: PUSH
19435: LD_STRING ")
19437: STR
19438: PPUSH
19439: CALL_OW 559
// end else
19443: GO 19452
// ToLua ( getStreamItemsFromMission("","") ) ;
19445: LD_STRING getStreamItemsFromMission("","")
19447: PPUSH
19448: CALL_OW 559
// end ;
19452: LD_VAR 0 1
19456: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19457: LD_EXP 57
19461: PUSH
19462: LD_EXP 62
19466: AND
19467: IFFALSE 19591
19469: GO 19471
19471: DISABLE
19472: LD_INT 0
19474: PPUSH
19475: PPUSH
// begin enable ;
19476: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19477: LD_ADDR_VAR 0 2
19481: PUSH
19482: LD_INT 22
19484: PUSH
19485: LD_OWVAR 2
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 2
19496: PUSH
19497: LD_INT 34
19499: PUSH
19500: LD_INT 7
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 34
19509: PUSH
19510: LD_INT 45
19512: PUSH
19513: EMPTY
19514: LIST
19515: LIST
19516: PUSH
19517: LD_INT 34
19519: PUSH
19520: LD_INT 28
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PUSH
19527: LD_INT 34
19529: PUSH
19530: LD_INT 47
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PPUSH
19548: CALL_OW 69
19552: ST_TO_ADDR
// if not tmp then
19553: LD_VAR 0 2
19557: NOT
19558: IFFALSE 19562
// exit ;
19560: GO 19591
// for i in tmp do
19562: LD_ADDR_VAR 0 1
19566: PUSH
19567: LD_VAR 0 2
19571: PUSH
19572: FOR_IN
19573: IFFALSE 19589
// begin SetLives ( i , 0 ) ;
19575: LD_VAR 0 1
19579: PPUSH
19580: LD_INT 0
19582: PPUSH
19583: CALL_OW 234
// end ;
19587: GO 19572
19589: POP
19590: POP
// end ;
19591: PPOPN 2
19593: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19594: LD_EXP 57
19598: PUSH
19599: LD_EXP 63
19603: AND
19604: IFFALSE 19688
19606: GO 19608
19608: DISABLE
19609: LD_INT 0
19611: PPUSH
19612: PPUSH
// begin enable ;
19613: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19614: LD_ADDR_VAR 0 2
19618: PUSH
19619: LD_INT 22
19621: PUSH
19622: LD_OWVAR 2
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 32
19633: PUSH
19634: LD_INT 3
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: PPUSH
19645: CALL_OW 69
19649: ST_TO_ADDR
// if not tmp then
19650: LD_VAR 0 2
19654: NOT
19655: IFFALSE 19659
// exit ;
19657: GO 19688
// for i in tmp do
19659: LD_ADDR_VAR 0 1
19663: PUSH
19664: LD_VAR 0 2
19668: PUSH
19669: FOR_IN
19670: IFFALSE 19686
// begin SetLives ( i , 0 ) ;
19672: LD_VAR 0 1
19676: PPUSH
19677: LD_INT 0
19679: PPUSH
19680: CALL_OW 234
// end ;
19684: GO 19669
19686: POP
19687: POP
// end ;
19688: PPOPN 2
19690: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19691: LD_EXP 57
19695: PUSH
19696: LD_EXP 60
19700: AND
19701: IFFALSE 19794
19703: GO 19705
19705: DISABLE
19706: LD_INT 0
19708: PPUSH
// begin enable ;
19709: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19710: LD_ADDR_VAR 0 1
19714: PUSH
19715: LD_INT 22
19717: PUSH
19718: LD_OWVAR 2
19722: PUSH
19723: EMPTY
19724: LIST
19725: LIST
19726: PUSH
19727: LD_INT 2
19729: PUSH
19730: LD_INT 25
19732: PUSH
19733: LD_INT 5
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: LD_INT 25
19742: PUSH
19743: LD_INT 9
19745: PUSH
19746: EMPTY
19747: LIST
19748: LIST
19749: PUSH
19750: LD_INT 25
19752: PUSH
19753: LD_INT 8
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: EMPTY
19761: LIST
19762: LIST
19763: LIST
19764: LIST
19765: PUSH
19766: EMPTY
19767: LIST
19768: LIST
19769: PPUSH
19770: CALL_OW 69
19774: PUSH
19775: FOR_IN
19776: IFFALSE 19792
// begin SetClass ( i , 1 ) ;
19778: LD_VAR 0 1
19782: PPUSH
19783: LD_INT 1
19785: PPUSH
19786: CALL_OW 336
// end ;
19790: GO 19775
19792: POP
19793: POP
// end ;
19794: PPOPN 1
19796: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19797: LD_EXP 57
19801: PUSH
19802: LD_EXP 61
19806: AND
19807: PUSH
19808: LD_OWVAR 65
19812: PUSH
19813: LD_INT 7
19815: LESS
19816: AND
19817: IFFALSE 19831
19819: GO 19821
19821: DISABLE
// begin enable ;
19822: ENABLE
// game_speed := 7 ;
19823: LD_ADDR_OWVAR 65
19827: PUSH
19828: LD_INT 7
19830: ST_TO_ADDR
// end ;
19831: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19832: LD_EXP 57
19836: PUSH
19837: LD_EXP 64
19841: AND
19842: IFFALSE 20044
19844: GO 19846
19846: DISABLE
19847: LD_INT 0
19849: PPUSH
19850: PPUSH
19851: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19852: LD_ADDR_VAR 0 3
19856: PUSH
19857: LD_INT 81
19859: PUSH
19860: LD_OWVAR 2
19864: PUSH
19865: EMPTY
19866: LIST
19867: LIST
19868: PUSH
19869: LD_INT 21
19871: PUSH
19872: LD_INT 1
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PUSH
19879: EMPTY
19880: LIST
19881: LIST
19882: PPUSH
19883: CALL_OW 69
19887: ST_TO_ADDR
// if not tmp then
19888: LD_VAR 0 3
19892: NOT
19893: IFFALSE 19897
// exit ;
19895: GO 20044
// if tmp > 5 then
19897: LD_VAR 0 3
19901: PUSH
19902: LD_INT 5
19904: GREATER
19905: IFFALSE 19917
// k := 5 else
19907: LD_ADDR_VAR 0 2
19911: PUSH
19912: LD_INT 5
19914: ST_TO_ADDR
19915: GO 19927
// k := tmp ;
19917: LD_ADDR_VAR 0 2
19921: PUSH
19922: LD_VAR 0 3
19926: ST_TO_ADDR
// for i := 1 to k do
19927: LD_ADDR_VAR 0 1
19931: PUSH
19932: DOUBLE
19933: LD_INT 1
19935: DEC
19936: ST_TO_ADDR
19937: LD_VAR 0 2
19941: PUSH
19942: FOR_TO
19943: IFFALSE 20042
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19945: LD_VAR 0 3
19949: PUSH
19950: LD_VAR 0 1
19954: ARRAY
19955: PPUSH
19956: LD_VAR 0 1
19960: PUSH
19961: LD_INT 4
19963: MOD
19964: PUSH
19965: LD_INT 1
19967: PLUS
19968: PPUSH
19969: CALL_OW 259
19973: PUSH
19974: LD_INT 10
19976: LESS
19977: IFFALSE 20040
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19979: LD_VAR 0 3
19983: PUSH
19984: LD_VAR 0 1
19988: ARRAY
19989: PPUSH
19990: LD_VAR 0 1
19994: PUSH
19995: LD_INT 4
19997: MOD
19998: PUSH
19999: LD_INT 1
20001: PLUS
20002: PPUSH
20003: LD_VAR 0 3
20007: PUSH
20008: LD_VAR 0 1
20012: ARRAY
20013: PPUSH
20014: LD_VAR 0 1
20018: PUSH
20019: LD_INT 4
20021: MOD
20022: PUSH
20023: LD_INT 1
20025: PLUS
20026: PPUSH
20027: CALL_OW 259
20031: PUSH
20032: LD_INT 1
20034: PLUS
20035: PPUSH
20036: CALL_OW 237
20040: GO 19942
20042: POP
20043: POP
// end ;
20044: PPOPN 3
20046: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20047: LD_EXP 57
20051: PUSH
20052: LD_EXP 65
20056: AND
20057: IFFALSE 20077
20059: GO 20061
20061: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20062: LD_INT 4
20064: PPUSH
20065: LD_OWVAR 2
20069: PPUSH
20070: LD_INT 0
20072: PPUSH
20073: CALL_OW 324
20077: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20078: LD_EXP 57
20082: PUSH
20083: LD_EXP 94
20087: AND
20088: IFFALSE 20108
20090: GO 20092
20092: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20093: LD_INT 19
20095: PPUSH
20096: LD_OWVAR 2
20100: PPUSH
20101: LD_INT 0
20103: PPUSH
20104: CALL_OW 324
20108: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20109: LD_EXP 57
20113: PUSH
20114: LD_EXP 66
20118: AND
20119: IFFALSE 20221
20121: GO 20123
20123: DISABLE
20124: LD_INT 0
20126: PPUSH
20127: PPUSH
// begin enable ;
20128: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20129: LD_ADDR_VAR 0 2
20133: PUSH
20134: LD_INT 22
20136: PUSH
20137: LD_OWVAR 2
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 2
20148: PUSH
20149: LD_INT 34
20151: PUSH
20152: LD_INT 11
20154: PUSH
20155: EMPTY
20156: LIST
20157: LIST
20158: PUSH
20159: LD_INT 34
20161: PUSH
20162: LD_INT 30
20164: PUSH
20165: EMPTY
20166: LIST
20167: LIST
20168: PUSH
20169: EMPTY
20170: LIST
20171: LIST
20172: LIST
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PPUSH
20178: CALL_OW 69
20182: ST_TO_ADDR
// if not tmp then
20183: LD_VAR 0 2
20187: NOT
20188: IFFALSE 20192
// exit ;
20190: GO 20221
// for i in tmp do
20192: LD_ADDR_VAR 0 1
20196: PUSH
20197: LD_VAR 0 2
20201: PUSH
20202: FOR_IN
20203: IFFALSE 20219
// begin SetLives ( i , 0 ) ;
20205: LD_VAR 0 1
20209: PPUSH
20210: LD_INT 0
20212: PPUSH
20213: CALL_OW 234
// end ;
20217: GO 20202
20219: POP
20220: POP
// end ;
20221: PPOPN 2
20223: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20224: LD_EXP 57
20228: PUSH
20229: LD_EXP 67
20233: AND
20234: IFFALSE 20254
20236: GO 20238
20238: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20239: LD_INT 32
20241: PPUSH
20242: LD_OWVAR 2
20246: PPUSH
20247: LD_INT 0
20249: PPUSH
20250: CALL_OW 324
20254: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20255: LD_EXP 57
20259: PUSH
20260: LD_EXP 68
20264: AND
20265: IFFALSE 20446
20267: GO 20269
20269: DISABLE
20270: LD_INT 0
20272: PPUSH
20273: PPUSH
20274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20275: LD_ADDR_VAR 0 2
20279: PUSH
20280: LD_INT 22
20282: PUSH
20283: LD_OWVAR 2
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: PUSH
20292: LD_INT 33
20294: PUSH
20295: LD_INT 3
20297: PUSH
20298: EMPTY
20299: LIST
20300: LIST
20301: PUSH
20302: EMPTY
20303: LIST
20304: LIST
20305: PPUSH
20306: CALL_OW 69
20310: ST_TO_ADDR
// if not tmp then
20311: LD_VAR 0 2
20315: NOT
20316: IFFALSE 20320
// exit ;
20318: GO 20446
// side := 0 ;
20320: LD_ADDR_VAR 0 3
20324: PUSH
20325: LD_INT 0
20327: ST_TO_ADDR
// for i := 1 to 8 do
20328: LD_ADDR_VAR 0 1
20332: PUSH
20333: DOUBLE
20334: LD_INT 1
20336: DEC
20337: ST_TO_ADDR
20338: LD_INT 8
20340: PUSH
20341: FOR_TO
20342: IFFALSE 20390
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20344: LD_OWVAR 2
20348: PUSH
20349: LD_VAR 0 1
20353: NONEQUAL
20354: PUSH
20355: LD_OWVAR 2
20359: PPUSH
20360: LD_VAR 0 1
20364: PPUSH
20365: CALL_OW 81
20369: PUSH
20370: LD_INT 2
20372: EQUAL
20373: AND
20374: IFFALSE 20388
// begin side := i ;
20376: LD_ADDR_VAR 0 3
20380: PUSH
20381: LD_VAR 0 1
20385: ST_TO_ADDR
// break ;
20386: GO 20390
// end ;
20388: GO 20341
20390: POP
20391: POP
// if not side then
20392: LD_VAR 0 3
20396: NOT
20397: IFFALSE 20401
// exit ;
20399: GO 20446
// for i := 1 to tmp do
20401: LD_ADDR_VAR 0 1
20405: PUSH
20406: DOUBLE
20407: LD_INT 1
20409: DEC
20410: ST_TO_ADDR
20411: LD_VAR 0 2
20415: PUSH
20416: FOR_TO
20417: IFFALSE 20444
// if Prob ( 60 ) then
20419: LD_INT 60
20421: PPUSH
20422: CALL_OW 13
20426: IFFALSE 20442
// SetSide ( i , side ) ;
20428: LD_VAR 0 1
20432: PPUSH
20433: LD_VAR 0 3
20437: PPUSH
20438: CALL_OW 235
20442: GO 20416
20444: POP
20445: POP
// end ;
20446: PPOPN 3
20448: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20449: LD_EXP 57
20453: PUSH
20454: LD_EXP 70
20458: AND
20459: IFFALSE 20578
20461: GO 20463
20463: DISABLE
20464: LD_INT 0
20466: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20467: LD_ADDR_VAR 0 1
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_OWVAR 2
20479: PUSH
20480: EMPTY
20481: LIST
20482: LIST
20483: PUSH
20484: LD_INT 21
20486: PUSH
20487: LD_INT 1
20489: PUSH
20490: EMPTY
20491: LIST
20492: LIST
20493: PUSH
20494: LD_INT 3
20496: PUSH
20497: LD_INT 23
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: PPUSH
20516: CALL_OW 69
20520: PUSH
20521: FOR_IN
20522: IFFALSE 20576
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20524: LD_VAR 0 1
20528: PPUSH
20529: CALL_OW 257
20533: PUSH
20534: LD_INT 1
20536: PUSH
20537: LD_INT 2
20539: PUSH
20540: LD_INT 3
20542: PUSH
20543: LD_INT 4
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: LIST
20550: LIST
20551: IN
20552: IFFALSE 20574
// SetClass ( un , rand ( 1 , 4 ) ) ;
20554: LD_VAR 0 1
20558: PPUSH
20559: LD_INT 1
20561: PPUSH
20562: LD_INT 4
20564: PPUSH
20565: CALL_OW 12
20569: PPUSH
20570: CALL_OW 336
20574: GO 20521
20576: POP
20577: POP
// end ;
20578: PPOPN 1
20580: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20581: LD_EXP 57
20585: PUSH
20586: LD_EXP 69
20590: AND
20591: IFFALSE 20670
20593: GO 20595
20595: DISABLE
20596: LD_INT 0
20598: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20599: LD_ADDR_VAR 0 1
20603: PUSH
20604: LD_INT 22
20606: PUSH
20607: LD_OWVAR 2
20611: PUSH
20612: EMPTY
20613: LIST
20614: LIST
20615: PUSH
20616: LD_INT 21
20618: PUSH
20619: LD_INT 3
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PPUSH
20630: CALL_OW 69
20634: ST_TO_ADDR
// if not tmp then
20635: LD_VAR 0 1
20639: NOT
20640: IFFALSE 20644
// exit ;
20642: GO 20670
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20644: LD_VAR 0 1
20648: PUSH
20649: LD_INT 1
20651: PPUSH
20652: LD_VAR 0 1
20656: PPUSH
20657: CALL_OW 12
20661: ARRAY
20662: PPUSH
20663: LD_INT 100
20665: PPUSH
20666: CALL_OW 234
// end ;
20670: PPOPN 1
20672: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20673: LD_EXP 57
20677: PUSH
20678: LD_EXP 71
20682: AND
20683: IFFALSE 20781
20685: GO 20687
20687: DISABLE
20688: LD_INT 0
20690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20691: LD_ADDR_VAR 0 1
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_OWVAR 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 21
20710: PUSH
20711: LD_INT 1
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PPUSH
20722: CALL_OW 69
20726: ST_TO_ADDR
// if not tmp then
20727: LD_VAR 0 1
20731: NOT
20732: IFFALSE 20736
// exit ;
20734: GO 20781
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20736: LD_VAR 0 1
20740: PUSH
20741: LD_INT 1
20743: PPUSH
20744: LD_VAR 0 1
20748: PPUSH
20749: CALL_OW 12
20753: ARRAY
20754: PPUSH
20755: LD_INT 1
20757: PPUSH
20758: LD_INT 4
20760: PPUSH
20761: CALL_OW 12
20765: PPUSH
20766: LD_INT 3000
20768: PPUSH
20769: LD_INT 9000
20771: PPUSH
20772: CALL_OW 12
20776: PPUSH
20777: CALL_OW 492
// end ;
20781: PPOPN 1
20783: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20784: LD_EXP 57
20788: PUSH
20789: LD_EXP 72
20793: AND
20794: IFFALSE 20814
20796: GO 20798
20798: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20799: LD_INT 1
20801: PPUSH
20802: LD_OWVAR 2
20806: PPUSH
20807: LD_INT 0
20809: PPUSH
20810: CALL_OW 324
20814: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20815: LD_EXP 57
20819: PUSH
20820: LD_EXP 73
20824: AND
20825: IFFALSE 20908
20827: GO 20829
20829: DISABLE
20830: LD_INT 0
20832: PPUSH
20833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20834: LD_ADDR_VAR 0 2
20838: PUSH
20839: LD_INT 22
20841: PUSH
20842: LD_OWVAR 2
20846: PUSH
20847: EMPTY
20848: LIST
20849: LIST
20850: PUSH
20851: LD_INT 21
20853: PUSH
20854: LD_INT 3
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: EMPTY
20862: LIST
20863: LIST
20864: PPUSH
20865: CALL_OW 69
20869: ST_TO_ADDR
// if not tmp then
20870: LD_VAR 0 2
20874: NOT
20875: IFFALSE 20879
// exit ;
20877: GO 20908
// for i in tmp do
20879: LD_ADDR_VAR 0 1
20883: PUSH
20884: LD_VAR 0 2
20888: PUSH
20889: FOR_IN
20890: IFFALSE 20906
// SetBLevel ( i , 10 ) ;
20892: LD_VAR 0 1
20896: PPUSH
20897: LD_INT 10
20899: PPUSH
20900: CALL_OW 241
20904: GO 20889
20906: POP
20907: POP
// end ;
20908: PPOPN 2
20910: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20911: LD_EXP 57
20915: PUSH
20916: LD_EXP 74
20920: AND
20921: IFFALSE 21032
20923: GO 20925
20925: DISABLE
20926: LD_INT 0
20928: PPUSH
20929: PPUSH
20930: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20931: LD_ADDR_VAR 0 3
20935: PUSH
20936: LD_INT 22
20938: PUSH
20939: LD_OWVAR 2
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PUSH
20948: LD_INT 25
20950: PUSH
20951: LD_INT 1
20953: PUSH
20954: EMPTY
20955: LIST
20956: LIST
20957: PUSH
20958: EMPTY
20959: LIST
20960: LIST
20961: PPUSH
20962: CALL_OW 69
20966: ST_TO_ADDR
// if not tmp then
20967: LD_VAR 0 3
20971: NOT
20972: IFFALSE 20976
// exit ;
20974: GO 21032
// un := tmp [ rand ( 1 , tmp ) ] ;
20976: LD_ADDR_VAR 0 2
20980: PUSH
20981: LD_VAR 0 3
20985: PUSH
20986: LD_INT 1
20988: PPUSH
20989: LD_VAR 0 3
20993: PPUSH
20994: CALL_OW 12
20998: ARRAY
20999: ST_TO_ADDR
// if Crawls ( un ) then
21000: LD_VAR 0 2
21004: PPUSH
21005: CALL_OW 318
21009: IFFALSE 21020
// ComWalk ( un ) ;
21011: LD_VAR 0 2
21015: PPUSH
21016: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21020: LD_VAR 0 2
21024: PPUSH
21025: LD_INT 5
21027: PPUSH
21028: CALL_OW 336
// end ;
21032: PPOPN 3
21034: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21035: LD_EXP 57
21039: PUSH
21040: LD_EXP 75
21044: AND
21045: PUSH
21046: LD_OWVAR 67
21050: PUSH
21051: LD_INT 3
21053: LESS
21054: AND
21055: IFFALSE 21074
21057: GO 21059
21059: DISABLE
// Difficulty := Difficulty + 1 ;
21060: LD_ADDR_OWVAR 67
21064: PUSH
21065: LD_OWVAR 67
21069: PUSH
21070: LD_INT 1
21072: PLUS
21073: ST_TO_ADDR
21074: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21075: LD_EXP 57
21079: PUSH
21080: LD_EXP 76
21084: AND
21085: IFFALSE 21188
21087: GO 21089
21089: DISABLE
21090: LD_INT 0
21092: PPUSH
// begin for i := 1 to 5 do
21093: LD_ADDR_VAR 0 1
21097: PUSH
21098: DOUBLE
21099: LD_INT 1
21101: DEC
21102: ST_TO_ADDR
21103: LD_INT 5
21105: PUSH
21106: FOR_TO
21107: IFFALSE 21186
// begin uc_nation := nation_nature ;
21109: LD_ADDR_OWVAR 21
21113: PUSH
21114: LD_INT 0
21116: ST_TO_ADDR
// uc_side := 0 ;
21117: LD_ADDR_OWVAR 20
21121: PUSH
21122: LD_INT 0
21124: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21125: LD_ADDR_OWVAR 29
21129: PUSH
21130: LD_INT 12
21132: PUSH
21133: LD_INT 12
21135: PUSH
21136: EMPTY
21137: LIST
21138: LIST
21139: ST_TO_ADDR
// hc_agressivity := 20 ;
21140: LD_ADDR_OWVAR 35
21144: PUSH
21145: LD_INT 20
21147: ST_TO_ADDR
// hc_class := class_tiger ;
21148: LD_ADDR_OWVAR 28
21152: PUSH
21153: LD_INT 14
21155: ST_TO_ADDR
// hc_gallery :=  ;
21156: LD_ADDR_OWVAR 33
21160: PUSH
21161: LD_STRING 
21163: ST_TO_ADDR
// hc_name :=  ;
21164: LD_ADDR_OWVAR 26
21168: PUSH
21169: LD_STRING 
21171: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21172: CALL_OW 44
21176: PPUSH
21177: LD_INT 0
21179: PPUSH
21180: CALL_OW 51
// end ;
21184: GO 21106
21186: POP
21187: POP
// end ;
21188: PPOPN 1
21190: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21191: LD_EXP 57
21195: PUSH
21196: LD_EXP 77
21200: AND
21201: IFFALSE 21210
21203: GO 21205
21205: DISABLE
// StreamSibBomb ;
21206: CALL 21211 0 0
21210: END
// export function StreamSibBomb ; var i , x , y ; begin
21211: LD_INT 0
21213: PPUSH
21214: PPUSH
21215: PPUSH
21216: PPUSH
// result := false ;
21217: LD_ADDR_VAR 0 1
21221: PUSH
21222: LD_INT 0
21224: ST_TO_ADDR
// for i := 1 to 16 do
21225: LD_ADDR_VAR 0 2
21229: PUSH
21230: DOUBLE
21231: LD_INT 1
21233: DEC
21234: ST_TO_ADDR
21235: LD_INT 16
21237: PUSH
21238: FOR_TO
21239: IFFALSE 21438
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21241: LD_ADDR_VAR 0 3
21245: PUSH
21246: LD_INT 10
21248: PUSH
21249: LD_INT 20
21251: PUSH
21252: LD_INT 30
21254: PUSH
21255: LD_INT 40
21257: PUSH
21258: LD_INT 50
21260: PUSH
21261: LD_INT 60
21263: PUSH
21264: LD_INT 70
21266: PUSH
21267: LD_INT 80
21269: PUSH
21270: LD_INT 90
21272: PUSH
21273: LD_INT 100
21275: PUSH
21276: LD_INT 110
21278: PUSH
21279: LD_INT 120
21281: PUSH
21282: LD_INT 130
21284: PUSH
21285: LD_INT 140
21287: PUSH
21288: LD_INT 150
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: PUSH
21308: LD_INT 1
21310: PPUSH
21311: LD_INT 15
21313: PPUSH
21314: CALL_OW 12
21318: ARRAY
21319: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21320: LD_ADDR_VAR 0 4
21324: PUSH
21325: LD_INT 10
21327: PUSH
21328: LD_INT 20
21330: PUSH
21331: LD_INT 30
21333: PUSH
21334: LD_INT 40
21336: PUSH
21337: LD_INT 50
21339: PUSH
21340: LD_INT 60
21342: PUSH
21343: LD_INT 70
21345: PUSH
21346: LD_INT 80
21348: PUSH
21349: LD_INT 90
21351: PUSH
21352: LD_INT 100
21354: PUSH
21355: LD_INT 110
21357: PUSH
21358: LD_INT 120
21360: PUSH
21361: LD_INT 130
21363: PUSH
21364: LD_INT 140
21366: PUSH
21367: LD_INT 150
21369: PUSH
21370: EMPTY
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: LIST
21380: LIST
21381: LIST
21382: LIST
21383: LIST
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 1
21389: PPUSH
21390: LD_INT 15
21392: PPUSH
21393: CALL_OW 12
21397: ARRAY
21398: ST_TO_ADDR
// if ValidHex ( x , y ) then
21399: LD_VAR 0 3
21403: PPUSH
21404: LD_VAR 0 4
21408: PPUSH
21409: CALL_OW 488
21413: IFFALSE 21436
// begin result := [ x , y ] ;
21415: LD_ADDR_VAR 0 1
21419: PUSH
21420: LD_VAR 0 3
21424: PUSH
21425: LD_VAR 0 4
21429: PUSH
21430: EMPTY
21431: LIST
21432: LIST
21433: ST_TO_ADDR
// break ;
21434: GO 21438
// end ; end ;
21436: GO 21238
21438: POP
21439: POP
// if result then
21440: LD_VAR 0 1
21444: IFFALSE 21504
// begin ToLua ( playSibBomb() ) ;
21446: LD_STRING playSibBomb()
21448: PPUSH
21449: CALL_OW 559
// wait ( 0 0$14 ) ;
21453: LD_INT 490
21455: PPUSH
21456: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21460: LD_VAR 0 1
21464: PUSH
21465: LD_INT 1
21467: ARRAY
21468: PPUSH
21469: LD_VAR 0 1
21473: PUSH
21474: LD_INT 2
21476: ARRAY
21477: PPUSH
21478: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21482: LD_VAR 0 1
21486: PUSH
21487: LD_INT 1
21489: ARRAY
21490: PPUSH
21491: LD_VAR 0 1
21495: PUSH
21496: LD_INT 2
21498: ARRAY
21499: PPUSH
21500: CALL_OW 429
// end ; end ;
21504: LD_VAR 0 1
21508: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21509: LD_EXP 57
21513: PUSH
21514: LD_EXP 79
21518: AND
21519: IFFALSE 21531
21521: GO 21523
21523: DISABLE
// YouLost (  ) ;
21524: LD_STRING 
21526: PPUSH
21527: CALL_OW 104
21531: END
// every 0 0$1 trigger StreamModeActive and sFog do
21532: LD_EXP 57
21536: PUSH
21537: LD_EXP 78
21541: AND
21542: IFFALSE 21556
21544: GO 21546
21546: DISABLE
// FogOff ( your_side ) ;
21547: LD_OWVAR 2
21551: PPUSH
21552: CALL_OW 344
21556: END
// every 0 0$1 trigger StreamModeActive and sSun do
21557: LD_EXP 57
21561: PUSH
21562: LD_EXP 80
21566: AND
21567: IFFALSE 21595
21569: GO 21571
21571: DISABLE
// begin solar_recharge_percent := 0 ;
21572: LD_ADDR_OWVAR 79
21576: PUSH
21577: LD_INT 0
21579: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21580: LD_INT 10500
21582: PPUSH
21583: CALL_OW 67
// solar_recharge_percent := 100 ;
21587: LD_ADDR_OWVAR 79
21591: PUSH
21592: LD_INT 100
21594: ST_TO_ADDR
// end ;
21595: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21596: LD_EXP 57
21600: PUSH
21601: LD_EXP 81
21605: AND
21606: IFFALSE 21845
21608: GO 21610
21610: DISABLE
21611: LD_INT 0
21613: PPUSH
21614: PPUSH
21615: PPUSH
// begin tmp := [ ] ;
21616: LD_ADDR_VAR 0 3
21620: PUSH
21621: EMPTY
21622: ST_TO_ADDR
// for i := 1 to 6 do
21623: LD_ADDR_VAR 0 1
21627: PUSH
21628: DOUBLE
21629: LD_INT 1
21631: DEC
21632: ST_TO_ADDR
21633: LD_INT 6
21635: PUSH
21636: FOR_TO
21637: IFFALSE 21742
// begin uc_nation := nation_nature ;
21639: LD_ADDR_OWVAR 21
21643: PUSH
21644: LD_INT 0
21646: ST_TO_ADDR
// uc_side := 0 ;
21647: LD_ADDR_OWVAR 20
21651: PUSH
21652: LD_INT 0
21654: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21655: LD_ADDR_OWVAR 29
21659: PUSH
21660: LD_INT 12
21662: PUSH
21663: LD_INT 12
21665: PUSH
21666: EMPTY
21667: LIST
21668: LIST
21669: ST_TO_ADDR
// hc_agressivity := 20 ;
21670: LD_ADDR_OWVAR 35
21674: PUSH
21675: LD_INT 20
21677: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21678: LD_ADDR_OWVAR 28
21682: PUSH
21683: LD_INT 17
21685: ST_TO_ADDR
// hc_gallery :=  ;
21686: LD_ADDR_OWVAR 33
21690: PUSH
21691: LD_STRING 
21693: ST_TO_ADDR
// hc_name :=  ;
21694: LD_ADDR_OWVAR 26
21698: PUSH
21699: LD_STRING 
21701: ST_TO_ADDR
// un := CreateHuman ;
21702: LD_ADDR_VAR 0 2
21706: PUSH
21707: CALL_OW 44
21711: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21712: LD_VAR 0 2
21716: PPUSH
21717: LD_INT 1
21719: PPUSH
21720: CALL_OW 51
// tmp := tmp ^ un ;
21724: LD_ADDR_VAR 0 3
21728: PUSH
21729: LD_VAR 0 3
21733: PUSH
21734: LD_VAR 0 2
21738: ADD
21739: ST_TO_ADDR
// end ;
21740: GO 21636
21742: POP
21743: POP
// repeat wait ( 0 0$1 ) ;
21744: LD_INT 35
21746: PPUSH
21747: CALL_OW 67
// for un in tmp do
21751: LD_ADDR_VAR 0 2
21755: PUSH
21756: LD_VAR 0 3
21760: PUSH
21761: FOR_IN
21762: IFFALSE 21836
// begin if IsDead ( un ) then
21764: LD_VAR 0 2
21768: PPUSH
21769: CALL_OW 301
21773: IFFALSE 21793
// begin tmp := tmp diff un ;
21775: LD_ADDR_VAR 0 3
21779: PUSH
21780: LD_VAR 0 3
21784: PUSH
21785: LD_VAR 0 2
21789: DIFF
21790: ST_TO_ADDR
// continue ;
21791: GO 21761
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21793: LD_VAR 0 2
21797: PPUSH
21798: LD_INT 3
21800: PUSH
21801: LD_INT 22
21803: PUSH
21804: LD_INT 0
21806: PUSH
21807: EMPTY
21808: LIST
21809: LIST
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PPUSH
21815: CALL_OW 69
21819: PPUSH
21820: LD_VAR 0 2
21824: PPUSH
21825: CALL_OW 74
21829: PPUSH
21830: CALL_OW 115
// end ;
21834: GO 21761
21836: POP
21837: POP
// until not tmp ;
21838: LD_VAR 0 3
21842: NOT
21843: IFFALSE 21744
// end ;
21845: PPOPN 3
21847: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21848: LD_EXP 57
21852: PUSH
21853: LD_EXP 82
21857: AND
21858: IFFALSE 21912
21860: GO 21862
21862: DISABLE
// begin ToLua ( displayTroll(); ) ;
21863: LD_STRING displayTroll();
21865: PPUSH
21866: CALL_OW 559
// wait ( 3 3$00 ) ;
21870: LD_INT 6300
21872: PPUSH
21873: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21877: LD_STRING hideTroll();
21879: PPUSH
21880: CALL_OW 559
// wait ( 1 1$00 ) ;
21884: LD_INT 2100
21886: PPUSH
21887: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21891: LD_STRING displayTroll();
21893: PPUSH
21894: CALL_OW 559
// wait ( 1 1$00 ) ;
21898: LD_INT 2100
21900: PPUSH
21901: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21905: LD_STRING hideTroll();
21907: PPUSH
21908: CALL_OW 559
// end ;
21912: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21913: LD_EXP 57
21917: PUSH
21918: LD_EXP 83
21922: AND
21923: IFFALSE 21986
21925: GO 21927
21927: DISABLE
21928: LD_INT 0
21930: PPUSH
// begin p := 0 ;
21931: LD_ADDR_VAR 0 1
21935: PUSH
21936: LD_INT 0
21938: ST_TO_ADDR
// repeat game_speed := 1 ;
21939: LD_ADDR_OWVAR 65
21943: PUSH
21944: LD_INT 1
21946: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21947: LD_INT 35
21949: PPUSH
21950: CALL_OW 67
// p := p + 1 ;
21954: LD_ADDR_VAR 0 1
21958: PUSH
21959: LD_VAR 0 1
21963: PUSH
21964: LD_INT 1
21966: PLUS
21967: ST_TO_ADDR
// until p >= 60 ;
21968: LD_VAR 0 1
21972: PUSH
21973: LD_INT 60
21975: GREATEREQUAL
21976: IFFALSE 21939
// game_speed := 4 ;
21978: LD_ADDR_OWVAR 65
21982: PUSH
21983: LD_INT 4
21985: ST_TO_ADDR
// end ;
21986: PPOPN 1
21988: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21989: LD_EXP 57
21993: PUSH
21994: LD_EXP 84
21998: AND
21999: IFFALSE 22145
22001: GO 22003
22003: DISABLE
22004: LD_INT 0
22006: PPUSH
22007: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22008: LD_ADDR_VAR 0 1
22012: PUSH
22013: LD_INT 22
22015: PUSH
22016: LD_OWVAR 2
22020: PUSH
22021: EMPTY
22022: LIST
22023: LIST
22024: PUSH
22025: LD_INT 2
22027: PUSH
22028: LD_INT 30
22030: PUSH
22031: LD_INT 0
22033: PUSH
22034: EMPTY
22035: LIST
22036: LIST
22037: PUSH
22038: LD_INT 30
22040: PUSH
22041: LD_INT 1
22043: PUSH
22044: EMPTY
22045: LIST
22046: LIST
22047: PUSH
22048: EMPTY
22049: LIST
22050: LIST
22051: LIST
22052: PUSH
22053: EMPTY
22054: LIST
22055: LIST
22056: PPUSH
22057: CALL_OW 69
22061: ST_TO_ADDR
// if not depot then
22062: LD_VAR 0 1
22066: NOT
22067: IFFALSE 22071
// exit ;
22069: GO 22145
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22071: LD_ADDR_VAR 0 2
22075: PUSH
22076: LD_VAR 0 1
22080: PUSH
22081: LD_INT 1
22083: PPUSH
22084: LD_VAR 0 1
22088: PPUSH
22089: CALL_OW 12
22093: ARRAY
22094: PPUSH
22095: CALL_OW 274
22099: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22100: LD_VAR 0 2
22104: PPUSH
22105: LD_INT 1
22107: PPUSH
22108: LD_INT 0
22110: PPUSH
22111: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22115: LD_VAR 0 2
22119: PPUSH
22120: LD_INT 2
22122: PPUSH
22123: LD_INT 0
22125: PPUSH
22126: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22130: LD_VAR 0 2
22134: PPUSH
22135: LD_INT 3
22137: PPUSH
22138: LD_INT 0
22140: PPUSH
22141: CALL_OW 277
// end ;
22145: PPOPN 2
22147: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22148: LD_EXP 57
22152: PUSH
22153: LD_EXP 85
22157: AND
22158: IFFALSE 22255
22160: GO 22162
22162: DISABLE
22163: LD_INT 0
22165: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22166: LD_ADDR_VAR 0 1
22170: PUSH
22171: LD_INT 22
22173: PUSH
22174: LD_OWVAR 2
22178: PUSH
22179: EMPTY
22180: LIST
22181: LIST
22182: PUSH
22183: LD_INT 21
22185: PUSH
22186: LD_INT 1
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: PUSH
22193: LD_INT 3
22195: PUSH
22196: LD_INT 23
22198: PUSH
22199: LD_INT 0
22201: PUSH
22202: EMPTY
22203: LIST
22204: LIST
22205: PUSH
22206: EMPTY
22207: LIST
22208: LIST
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: LIST
22214: PPUSH
22215: CALL_OW 69
22219: ST_TO_ADDR
// if not tmp then
22220: LD_VAR 0 1
22224: NOT
22225: IFFALSE 22229
// exit ;
22227: GO 22255
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22229: LD_VAR 0 1
22233: PUSH
22234: LD_INT 1
22236: PPUSH
22237: LD_VAR 0 1
22241: PPUSH
22242: CALL_OW 12
22246: ARRAY
22247: PPUSH
22248: LD_INT 200
22250: PPUSH
22251: CALL_OW 234
// end ;
22255: PPOPN 1
22257: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22258: LD_EXP 57
22262: PUSH
22263: LD_EXP 86
22267: AND
22268: IFFALSE 22347
22270: GO 22272
22272: DISABLE
22273: LD_INT 0
22275: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22276: LD_ADDR_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_OWVAR 2
22288: PUSH
22289: EMPTY
22290: LIST
22291: LIST
22292: PUSH
22293: LD_INT 21
22295: PUSH
22296: LD_INT 2
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: PUSH
22303: EMPTY
22304: LIST
22305: LIST
22306: PPUSH
22307: CALL_OW 69
22311: ST_TO_ADDR
// if not tmp then
22312: LD_VAR 0 1
22316: NOT
22317: IFFALSE 22321
// exit ;
22319: GO 22347
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22321: LD_VAR 0 1
22325: PUSH
22326: LD_INT 1
22328: PPUSH
22329: LD_VAR 0 1
22333: PPUSH
22334: CALL_OW 12
22338: ARRAY
22339: PPUSH
22340: LD_INT 60
22342: PPUSH
22343: CALL_OW 234
// end ;
22347: PPOPN 1
22349: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22350: LD_EXP 57
22354: PUSH
22355: LD_EXP 87
22359: AND
22360: IFFALSE 22459
22362: GO 22364
22364: DISABLE
22365: LD_INT 0
22367: PPUSH
22368: PPUSH
// begin enable ;
22369: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22370: LD_ADDR_VAR 0 1
22374: PUSH
22375: LD_INT 22
22377: PUSH
22378: LD_OWVAR 2
22382: PUSH
22383: EMPTY
22384: LIST
22385: LIST
22386: PUSH
22387: LD_INT 61
22389: PUSH
22390: EMPTY
22391: LIST
22392: PUSH
22393: LD_INT 33
22395: PUSH
22396: LD_INT 2
22398: PUSH
22399: EMPTY
22400: LIST
22401: LIST
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: LIST
22407: PPUSH
22408: CALL_OW 69
22412: ST_TO_ADDR
// if not tmp then
22413: LD_VAR 0 1
22417: NOT
22418: IFFALSE 22422
// exit ;
22420: GO 22459
// for i in tmp do
22422: LD_ADDR_VAR 0 2
22426: PUSH
22427: LD_VAR 0 1
22431: PUSH
22432: FOR_IN
22433: IFFALSE 22457
// if IsControledBy ( i ) then
22435: LD_VAR 0 2
22439: PPUSH
22440: CALL_OW 312
22444: IFFALSE 22455
// ComUnlink ( i ) ;
22446: LD_VAR 0 2
22450: PPUSH
22451: CALL_OW 136
22455: GO 22432
22457: POP
22458: POP
// end ;
22459: PPOPN 2
22461: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22462: LD_EXP 57
22466: PUSH
22467: LD_EXP 88
22471: AND
22472: IFFALSE 22612
22474: GO 22476
22476: DISABLE
22477: LD_INT 0
22479: PPUSH
22480: PPUSH
// begin ToLua ( displayPowell(); ) ;
22481: LD_STRING displayPowell();
22483: PPUSH
22484: CALL_OW 559
// uc_side := 0 ;
22488: LD_ADDR_OWVAR 20
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// uc_nation := 2 ;
22496: LD_ADDR_OWVAR 21
22500: PUSH
22501: LD_INT 2
22503: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22504: LD_ADDR_OWVAR 37
22508: PUSH
22509: LD_INT 14
22511: ST_TO_ADDR
// vc_engine := engine_siberite ;
22512: LD_ADDR_OWVAR 39
22516: PUSH
22517: LD_INT 3
22519: ST_TO_ADDR
// vc_control := control_apeman ;
22520: LD_ADDR_OWVAR 38
22524: PUSH
22525: LD_INT 5
22527: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22528: LD_ADDR_OWVAR 40
22532: PUSH
22533: LD_INT 29
22535: ST_TO_ADDR
// un := CreateVehicle ;
22536: LD_ADDR_VAR 0 2
22540: PUSH
22541: CALL_OW 45
22545: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22546: LD_VAR 0 2
22550: PPUSH
22551: LD_INT 1
22553: PPUSH
22554: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22558: LD_INT 35
22560: PPUSH
22561: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22565: LD_VAR 0 2
22569: PPUSH
22570: LD_INT 22
22572: PUSH
22573: LD_OWVAR 2
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PPUSH
22582: CALL_OW 69
22586: PPUSH
22587: LD_VAR 0 2
22591: PPUSH
22592: CALL_OW 74
22596: PPUSH
22597: CALL_OW 115
// until IsDead ( un ) ;
22601: LD_VAR 0 2
22605: PPUSH
22606: CALL_OW 301
22610: IFFALSE 22558
// end ;
22612: PPOPN 2
22614: END
// every 0 0$1 trigger StreamModeActive and sStu do
22615: LD_EXP 57
22619: PUSH
22620: LD_EXP 96
22624: AND
22625: IFFALSE 22641
22627: GO 22629
22629: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22630: LD_STRING displayStucuk();
22632: PPUSH
22633: CALL_OW 559
// ResetFog ;
22637: CALL_OW 335
// end ;
22641: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22642: LD_EXP 57
22646: PUSH
22647: LD_EXP 89
22651: AND
22652: IFFALSE 22793
22654: GO 22656
22656: DISABLE
22657: LD_INT 0
22659: PPUSH
22660: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22661: LD_ADDR_VAR 0 2
22665: PUSH
22666: LD_INT 22
22668: PUSH
22669: LD_OWVAR 2
22673: PUSH
22674: EMPTY
22675: LIST
22676: LIST
22677: PUSH
22678: LD_INT 21
22680: PUSH
22681: LD_INT 1
22683: PUSH
22684: EMPTY
22685: LIST
22686: LIST
22687: PUSH
22688: EMPTY
22689: LIST
22690: LIST
22691: PPUSH
22692: CALL_OW 69
22696: ST_TO_ADDR
// if not tmp then
22697: LD_VAR 0 2
22701: NOT
22702: IFFALSE 22706
// exit ;
22704: GO 22793
// un := tmp [ rand ( 1 , tmp ) ] ;
22706: LD_ADDR_VAR 0 1
22710: PUSH
22711: LD_VAR 0 2
22715: PUSH
22716: LD_INT 1
22718: PPUSH
22719: LD_VAR 0 2
22723: PPUSH
22724: CALL_OW 12
22728: ARRAY
22729: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22730: LD_VAR 0 1
22734: PPUSH
22735: LD_INT 0
22737: PPUSH
22738: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_OWVAR 3
22751: PUSH
22752: LD_VAR 0 1
22756: DIFF
22757: PPUSH
22758: LD_VAR 0 1
22762: PPUSH
22763: CALL_OW 74
22767: PPUSH
22768: CALL_OW 115
// wait ( 0 0$20 ) ;
22772: LD_INT 700
22774: PPUSH
22775: CALL_OW 67
// SetSide ( un , your_side ) ;
22779: LD_VAR 0 1
22783: PPUSH
22784: LD_OWVAR 2
22788: PPUSH
22789: CALL_OW 235
// end ;
22793: PPOPN 2
22795: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22796: LD_EXP 57
22800: PUSH
22801: LD_EXP 90
22805: AND
22806: IFFALSE 22912
22808: GO 22810
22810: DISABLE
22811: LD_INT 0
22813: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22814: LD_ADDR_VAR 0 1
22818: PUSH
22819: LD_INT 22
22821: PUSH
22822: LD_OWVAR 2
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 0
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 30
22846: PUSH
22847: LD_INT 1
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: CALL_OW 69
22867: ST_TO_ADDR
// if not depot then
22868: LD_VAR 0 1
22872: NOT
22873: IFFALSE 22877
// exit ;
22875: GO 22912
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22877: LD_VAR 0 1
22881: PUSH
22882: LD_INT 1
22884: ARRAY
22885: PPUSH
22886: CALL_OW 250
22890: PPUSH
22891: LD_VAR 0 1
22895: PUSH
22896: LD_INT 1
22898: ARRAY
22899: PPUSH
22900: CALL_OW 251
22904: PPUSH
22905: LD_INT 70
22907: PPUSH
22908: CALL_OW 495
// end ;
22912: PPOPN 1
22914: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22915: LD_EXP 57
22919: PUSH
22920: LD_EXP 91
22924: AND
22925: IFFALSE 23136
22927: GO 22929
22929: DISABLE
22930: LD_INT 0
22932: PPUSH
22933: PPUSH
22934: PPUSH
22935: PPUSH
22936: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22937: LD_ADDR_VAR 0 5
22941: PUSH
22942: LD_INT 22
22944: PUSH
22945: LD_OWVAR 2
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: LD_INT 21
22956: PUSH
22957: LD_INT 1
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: PUSH
22964: EMPTY
22965: LIST
22966: LIST
22967: PPUSH
22968: CALL_OW 69
22972: ST_TO_ADDR
// if not tmp then
22973: LD_VAR 0 5
22977: NOT
22978: IFFALSE 22982
// exit ;
22980: GO 23136
// for i in tmp do
22982: LD_ADDR_VAR 0 1
22986: PUSH
22987: LD_VAR 0 5
22991: PUSH
22992: FOR_IN
22993: IFFALSE 23134
// begin d := rand ( 0 , 5 ) ;
22995: LD_ADDR_VAR 0 4
22999: PUSH
23000: LD_INT 0
23002: PPUSH
23003: LD_INT 5
23005: PPUSH
23006: CALL_OW 12
23010: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23011: LD_ADDR_VAR 0 2
23015: PUSH
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 250
23025: PPUSH
23026: LD_VAR 0 4
23030: PPUSH
23031: LD_INT 3
23033: PPUSH
23034: LD_INT 12
23036: PPUSH
23037: CALL_OW 12
23041: PPUSH
23042: CALL_OW 272
23046: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23047: LD_ADDR_VAR 0 3
23051: PUSH
23052: LD_VAR 0 1
23056: PPUSH
23057: CALL_OW 251
23061: PPUSH
23062: LD_VAR 0 4
23066: PPUSH
23067: LD_INT 3
23069: PPUSH
23070: LD_INT 12
23072: PPUSH
23073: CALL_OW 12
23077: PPUSH
23078: CALL_OW 273
23082: ST_TO_ADDR
// if ValidHex ( x , y ) then
23083: LD_VAR 0 2
23087: PPUSH
23088: LD_VAR 0 3
23092: PPUSH
23093: CALL_OW 488
23097: IFFALSE 23132
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23099: LD_VAR 0 1
23103: PPUSH
23104: LD_VAR 0 2
23108: PPUSH
23109: LD_VAR 0 3
23113: PPUSH
23114: LD_INT 3
23116: PPUSH
23117: LD_INT 6
23119: PPUSH
23120: CALL_OW 12
23124: PPUSH
23125: LD_INT 1
23127: PPUSH
23128: CALL_OW 483
// end ;
23132: GO 22992
23134: POP
23135: POP
// end ;
23136: PPOPN 5
23138: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23139: LD_EXP 57
23143: PUSH
23144: LD_EXP 92
23148: AND
23149: IFFALSE 23243
23151: GO 23153
23153: DISABLE
23154: LD_INT 0
23156: PPUSH
23157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23158: LD_ADDR_VAR 0 2
23162: PUSH
23163: LD_INT 22
23165: PUSH
23166: LD_OWVAR 2
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 32
23177: PUSH
23178: LD_INT 1
23180: PUSH
23181: EMPTY
23182: LIST
23183: LIST
23184: PUSH
23185: LD_INT 21
23187: PUSH
23188: LD_INT 2
23190: PUSH
23191: EMPTY
23192: LIST
23193: LIST
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: LIST
23199: PPUSH
23200: CALL_OW 69
23204: ST_TO_ADDR
// if not tmp then
23205: LD_VAR 0 2
23209: NOT
23210: IFFALSE 23214
// exit ;
23212: GO 23243
// for i in tmp do
23214: LD_ADDR_VAR 0 1
23218: PUSH
23219: LD_VAR 0 2
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23241
// SetFuel ( i , 0 ) ;
23227: LD_VAR 0 1
23231: PPUSH
23232: LD_INT 0
23234: PPUSH
23235: CALL_OW 240
23239: GO 23224
23241: POP
23242: POP
// end ;
23243: PPOPN 2
23245: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23246: LD_EXP 57
23250: PUSH
23251: LD_EXP 93
23255: AND
23256: IFFALSE 23322
23258: GO 23260
23260: DISABLE
23261: LD_INT 0
23263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23264: LD_ADDR_VAR 0 1
23268: PUSH
23269: LD_INT 22
23271: PUSH
23272: LD_OWVAR 2
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 30
23283: PUSH
23284: LD_INT 29
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: EMPTY
23292: LIST
23293: LIST
23294: PPUSH
23295: CALL_OW 69
23299: ST_TO_ADDR
// if not tmp then
23300: LD_VAR 0 1
23304: NOT
23305: IFFALSE 23309
// exit ;
23307: GO 23322
// DestroyUnit ( tmp [ 1 ] ) ;
23309: LD_VAR 0 1
23313: PUSH
23314: LD_INT 1
23316: ARRAY
23317: PPUSH
23318: CALL_OW 65
// end ;
23322: PPOPN 1
23324: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23325: LD_EXP 57
23329: PUSH
23330: LD_EXP 95
23334: AND
23335: IFFALSE 23464
23337: GO 23339
23339: DISABLE
23340: LD_INT 0
23342: PPUSH
// begin uc_side := 0 ;
23343: LD_ADDR_OWVAR 20
23347: PUSH
23348: LD_INT 0
23350: ST_TO_ADDR
// uc_nation := nation_arabian ;
23351: LD_ADDR_OWVAR 21
23355: PUSH
23356: LD_INT 2
23358: ST_TO_ADDR
// hc_gallery :=  ;
23359: LD_ADDR_OWVAR 33
23363: PUSH
23364: LD_STRING 
23366: ST_TO_ADDR
// hc_name :=  ;
23367: LD_ADDR_OWVAR 26
23371: PUSH
23372: LD_STRING 
23374: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23375: LD_INT 1
23377: PPUSH
23378: LD_INT 11
23380: PPUSH
23381: LD_INT 10
23383: PPUSH
23384: CALL_OW 380
// un := CreateHuman ;
23388: LD_ADDR_VAR 0 1
23392: PUSH
23393: CALL_OW 44
23397: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23398: LD_VAR 0 1
23402: PPUSH
23403: LD_INT 1
23405: PPUSH
23406: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23410: LD_INT 35
23412: PPUSH
23413: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23417: LD_VAR 0 1
23421: PPUSH
23422: LD_INT 22
23424: PUSH
23425: LD_OWVAR 2
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PPUSH
23434: CALL_OW 69
23438: PPUSH
23439: LD_VAR 0 1
23443: PPUSH
23444: CALL_OW 74
23448: PPUSH
23449: CALL_OW 115
// until IsDead ( un ) ;
23453: LD_VAR 0 1
23457: PPUSH
23458: CALL_OW 301
23462: IFFALSE 23410
// end ;
23464: PPOPN 1
23466: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23467: LD_EXP 57
23471: PUSH
23472: LD_EXP 97
23476: AND
23477: IFFALSE 23489
23479: GO 23481
23481: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23482: LD_STRING earthquake(getX(game), 0, 32)
23484: PPUSH
23485: CALL_OW 559
23489: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23490: LD_EXP 57
23494: PUSH
23495: LD_EXP 98
23499: AND
23500: IFFALSE 23591
23502: GO 23504
23504: DISABLE
23505: LD_INT 0
23507: PPUSH
// begin enable ;
23508: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23509: LD_ADDR_VAR 0 1
23513: PUSH
23514: LD_INT 22
23516: PUSH
23517: LD_OWVAR 2
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: PUSH
23526: LD_INT 21
23528: PUSH
23529: LD_INT 2
23531: PUSH
23532: EMPTY
23533: LIST
23534: LIST
23535: PUSH
23536: LD_INT 33
23538: PUSH
23539: LD_INT 3
23541: PUSH
23542: EMPTY
23543: LIST
23544: LIST
23545: PUSH
23546: EMPTY
23547: LIST
23548: LIST
23549: LIST
23550: PPUSH
23551: CALL_OW 69
23555: ST_TO_ADDR
// if not tmp then
23556: LD_VAR 0 1
23560: NOT
23561: IFFALSE 23565
// exit ;
23563: GO 23591
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23565: LD_VAR 0 1
23569: PUSH
23570: LD_INT 1
23572: PPUSH
23573: LD_VAR 0 1
23577: PPUSH
23578: CALL_OW 12
23582: ARRAY
23583: PPUSH
23584: LD_INT 1
23586: PPUSH
23587: CALL_OW 234
// end ;
23591: PPOPN 1
23593: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23594: LD_EXP 57
23598: PUSH
23599: LD_EXP 99
23603: AND
23604: IFFALSE 23745
23606: GO 23608
23608: DISABLE
23609: LD_INT 0
23611: PPUSH
23612: PPUSH
23613: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23614: LD_ADDR_VAR 0 3
23618: PUSH
23619: LD_INT 22
23621: PUSH
23622: LD_OWVAR 2
23626: PUSH
23627: EMPTY
23628: LIST
23629: LIST
23630: PUSH
23631: LD_INT 25
23633: PUSH
23634: LD_INT 1
23636: PUSH
23637: EMPTY
23638: LIST
23639: LIST
23640: PUSH
23641: EMPTY
23642: LIST
23643: LIST
23644: PPUSH
23645: CALL_OW 69
23649: ST_TO_ADDR
// if not tmp then
23650: LD_VAR 0 3
23654: NOT
23655: IFFALSE 23659
// exit ;
23657: GO 23745
// un := tmp [ rand ( 1 , tmp ) ] ;
23659: LD_ADDR_VAR 0 2
23663: PUSH
23664: LD_VAR 0 3
23668: PUSH
23669: LD_INT 1
23671: PPUSH
23672: LD_VAR 0 3
23676: PPUSH
23677: CALL_OW 12
23681: ARRAY
23682: ST_TO_ADDR
// if Crawls ( un ) then
23683: LD_VAR 0 2
23687: PPUSH
23688: CALL_OW 318
23692: IFFALSE 23703
// ComWalk ( un ) ;
23694: LD_VAR 0 2
23698: PPUSH
23699: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23703: LD_VAR 0 2
23707: PPUSH
23708: LD_INT 9
23710: PPUSH
23711: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23715: LD_INT 28
23717: PPUSH
23718: LD_OWVAR 2
23722: PPUSH
23723: LD_INT 2
23725: PPUSH
23726: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23730: LD_INT 29
23732: PPUSH
23733: LD_OWVAR 2
23737: PPUSH
23738: LD_INT 2
23740: PPUSH
23741: CALL_OW 322
// end ;
23745: PPOPN 3
23747: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23748: LD_EXP 57
23752: PUSH
23753: LD_EXP 100
23757: AND
23758: IFFALSE 23869
23760: GO 23762
23762: DISABLE
23763: LD_INT 0
23765: PPUSH
23766: PPUSH
23767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23768: LD_ADDR_VAR 0 3
23772: PUSH
23773: LD_INT 22
23775: PUSH
23776: LD_OWVAR 2
23780: PUSH
23781: EMPTY
23782: LIST
23783: LIST
23784: PUSH
23785: LD_INT 25
23787: PUSH
23788: LD_INT 1
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: EMPTY
23796: LIST
23797: LIST
23798: PPUSH
23799: CALL_OW 69
23803: ST_TO_ADDR
// if not tmp then
23804: LD_VAR 0 3
23808: NOT
23809: IFFALSE 23813
// exit ;
23811: GO 23869
// un := tmp [ rand ( 1 , tmp ) ] ;
23813: LD_ADDR_VAR 0 2
23817: PUSH
23818: LD_VAR 0 3
23822: PUSH
23823: LD_INT 1
23825: PPUSH
23826: LD_VAR 0 3
23830: PPUSH
23831: CALL_OW 12
23835: ARRAY
23836: ST_TO_ADDR
// if Crawls ( un ) then
23837: LD_VAR 0 2
23841: PPUSH
23842: CALL_OW 318
23846: IFFALSE 23857
// ComWalk ( un ) ;
23848: LD_VAR 0 2
23852: PPUSH
23853: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23857: LD_VAR 0 2
23861: PPUSH
23862: LD_INT 8
23864: PPUSH
23865: CALL_OW 336
// end ;
23869: PPOPN 3
23871: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23872: LD_EXP 57
23876: PUSH
23877: LD_EXP 101
23881: AND
23882: IFFALSE 24026
23884: GO 23886
23886: DISABLE
23887: LD_INT 0
23889: PPUSH
23890: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23891: LD_ADDR_VAR 0 2
23895: PUSH
23896: LD_INT 22
23898: PUSH
23899: LD_OWVAR 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 21
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 2
23920: PUSH
23921: LD_INT 34
23923: PUSH
23924: LD_INT 12
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 34
23933: PUSH
23934: LD_INT 51
23936: PUSH
23937: EMPTY
23938: LIST
23939: LIST
23940: PUSH
23941: LD_INT 34
23943: PUSH
23944: LD_INT 32
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: LIST
23961: PPUSH
23962: CALL_OW 69
23966: ST_TO_ADDR
// if not tmp then
23967: LD_VAR 0 2
23971: NOT
23972: IFFALSE 23976
// exit ;
23974: GO 24026
// for i in tmp do
23976: LD_ADDR_VAR 0 1
23980: PUSH
23981: LD_VAR 0 2
23985: PUSH
23986: FOR_IN
23987: IFFALSE 24024
// if GetCargo ( i , mat_artifact ) = 0 then
23989: LD_VAR 0 1
23993: PPUSH
23994: LD_INT 4
23996: PPUSH
23997: CALL_OW 289
24001: PUSH
24002: LD_INT 0
24004: EQUAL
24005: IFFALSE 24022
// SetCargo ( i , mat_siberit , 100 ) ;
24007: LD_VAR 0 1
24011: PPUSH
24012: LD_INT 3
24014: PPUSH
24015: LD_INT 100
24017: PPUSH
24018: CALL_OW 290
24022: GO 23986
24024: POP
24025: POP
// end ;
24026: PPOPN 2
24028: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24029: LD_EXP 57
24033: PUSH
24034: LD_EXP 102
24038: AND
24039: IFFALSE 24222
24041: GO 24043
24043: DISABLE
24044: LD_INT 0
24046: PPUSH
24047: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24048: LD_ADDR_VAR 0 2
24052: PUSH
24053: LD_INT 22
24055: PUSH
24056: LD_OWVAR 2
24060: PUSH
24061: EMPTY
24062: LIST
24063: LIST
24064: PPUSH
24065: CALL_OW 69
24069: ST_TO_ADDR
// if not tmp then
24070: LD_VAR 0 2
24074: NOT
24075: IFFALSE 24079
// exit ;
24077: GO 24222
// for i := 1 to 2 do
24079: LD_ADDR_VAR 0 1
24083: PUSH
24084: DOUBLE
24085: LD_INT 1
24087: DEC
24088: ST_TO_ADDR
24089: LD_INT 2
24091: PUSH
24092: FOR_TO
24093: IFFALSE 24220
// begin uc_side := your_side ;
24095: LD_ADDR_OWVAR 20
24099: PUSH
24100: LD_OWVAR 2
24104: ST_TO_ADDR
// uc_nation := nation_american ;
24105: LD_ADDR_OWVAR 21
24109: PUSH
24110: LD_INT 1
24112: ST_TO_ADDR
// vc_chassis := us_morphling ;
24113: LD_ADDR_OWVAR 37
24117: PUSH
24118: LD_INT 5
24120: ST_TO_ADDR
// vc_engine := engine_siberite ;
24121: LD_ADDR_OWVAR 39
24125: PUSH
24126: LD_INT 3
24128: ST_TO_ADDR
// vc_control := control_computer ;
24129: LD_ADDR_OWVAR 38
24133: PUSH
24134: LD_INT 3
24136: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24137: LD_ADDR_OWVAR 40
24141: PUSH
24142: LD_INT 10
24144: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24145: LD_VAR 0 2
24149: PUSH
24150: LD_INT 1
24152: ARRAY
24153: PPUSH
24154: CALL_OW 310
24158: NOT
24159: IFFALSE 24206
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24161: CALL_OW 45
24165: PPUSH
24166: LD_VAR 0 2
24170: PUSH
24171: LD_INT 1
24173: ARRAY
24174: PPUSH
24175: CALL_OW 250
24179: PPUSH
24180: LD_VAR 0 2
24184: PUSH
24185: LD_INT 1
24187: ARRAY
24188: PPUSH
24189: CALL_OW 251
24193: PPUSH
24194: LD_INT 12
24196: PPUSH
24197: LD_INT 1
24199: PPUSH
24200: CALL_OW 50
24204: GO 24218
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24206: CALL_OW 45
24210: PPUSH
24211: LD_INT 1
24213: PPUSH
24214: CALL_OW 51
// end ;
24218: GO 24092
24220: POP
24221: POP
// end ;
24222: PPOPN 2
24224: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24225: LD_EXP 57
24229: PUSH
24230: LD_EXP 103
24234: AND
24235: IFFALSE 24457
24237: GO 24239
24239: DISABLE
24240: LD_INT 0
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
24246: PPUSH
24247: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24248: LD_ADDR_VAR 0 6
24252: PUSH
24253: LD_INT 22
24255: PUSH
24256: LD_OWVAR 2
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: PUSH
24265: LD_INT 21
24267: PUSH
24268: LD_INT 1
24270: PUSH
24271: EMPTY
24272: LIST
24273: LIST
24274: PUSH
24275: LD_INT 3
24277: PUSH
24278: LD_INT 23
24280: PUSH
24281: LD_INT 0
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: EMPTY
24289: LIST
24290: LIST
24291: PUSH
24292: EMPTY
24293: LIST
24294: LIST
24295: LIST
24296: PPUSH
24297: CALL_OW 69
24301: ST_TO_ADDR
// if not tmp then
24302: LD_VAR 0 6
24306: NOT
24307: IFFALSE 24311
// exit ;
24309: GO 24457
// s1 := rand ( 1 , 4 ) ;
24311: LD_ADDR_VAR 0 2
24315: PUSH
24316: LD_INT 1
24318: PPUSH
24319: LD_INT 4
24321: PPUSH
24322: CALL_OW 12
24326: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24327: LD_ADDR_VAR 0 4
24331: PUSH
24332: LD_VAR 0 6
24336: PUSH
24337: LD_INT 1
24339: ARRAY
24340: PPUSH
24341: LD_VAR 0 2
24345: PPUSH
24346: CALL_OW 259
24350: ST_TO_ADDR
// if s1 = 1 then
24351: LD_VAR 0 2
24355: PUSH
24356: LD_INT 1
24358: EQUAL
24359: IFFALSE 24379
// s2 := rand ( 2 , 4 ) else
24361: LD_ADDR_VAR 0 3
24365: PUSH
24366: LD_INT 2
24368: PPUSH
24369: LD_INT 4
24371: PPUSH
24372: CALL_OW 12
24376: ST_TO_ADDR
24377: GO 24387
// s2 := 1 ;
24379: LD_ADDR_VAR 0 3
24383: PUSH
24384: LD_INT 1
24386: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24387: LD_ADDR_VAR 0 5
24391: PUSH
24392: LD_VAR 0 6
24396: PUSH
24397: LD_INT 1
24399: ARRAY
24400: PPUSH
24401: LD_VAR 0 3
24405: PPUSH
24406: CALL_OW 259
24410: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24411: LD_VAR 0 6
24415: PUSH
24416: LD_INT 1
24418: ARRAY
24419: PPUSH
24420: LD_VAR 0 2
24424: PPUSH
24425: LD_VAR 0 5
24429: PPUSH
24430: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24434: LD_VAR 0 6
24438: PUSH
24439: LD_INT 1
24441: ARRAY
24442: PPUSH
24443: LD_VAR 0 3
24447: PPUSH
24448: LD_VAR 0 4
24452: PPUSH
24453: CALL_OW 237
// end ;
24457: PPOPN 6
24459: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24460: LD_EXP 57
24464: PUSH
24465: LD_EXP 104
24469: AND
24470: IFFALSE 24549
24472: GO 24474
24474: DISABLE
24475: LD_INT 0
24477: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24478: LD_ADDR_VAR 0 1
24482: PUSH
24483: LD_INT 22
24485: PUSH
24486: LD_OWVAR 2
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: PUSH
24495: LD_INT 30
24497: PUSH
24498: LD_INT 3
24500: PUSH
24501: EMPTY
24502: LIST
24503: LIST
24504: PUSH
24505: EMPTY
24506: LIST
24507: LIST
24508: PPUSH
24509: CALL_OW 69
24513: ST_TO_ADDR
// if not tmp then
24514: LD_VAR 0 1
24518: NOT
24519: IFFALSE 24523
// exit ;
24521: GO 24549
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24523: LD_VAR 0 1
24527: PUSH
24528: LD_INT 1
24530: PPUSH
24531: LD_VAR 0 1
24535: PPUSH
24536: CALL_OW 12
24540: ARRAY
24541: PPUSH
24542: LD_INT 1
24544: PPUSH
24545: CALL_OW 234
// end ;
24549: PPOPN 1
24551: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24552: LD_EXP 57
24556: PUSH
24557: LD_EXP 105
24561: AND
24562: IFFALSE 24674
24564: GO 24566
24566: DISABLE
24567: LD_INT 0
24569: PPUSH
24570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24571: LD_ADDR_VAR 0 2
24575: PUSH
24576: LD_INT 22
24578: PUSH
24579: LD_OWVAR 2
24583: PUSH
24584: EMPTY
24585: LIST
24586: LIST
24587: PUSH
24588: LD_INT 2
24590: PUSH
24591: LD_INT 30
24593: PUSH
24594: LD_INT 27
24596: PUSH
24597: EMPTY
24598: LIST
24599: LIST
24600: PUSH
24601: LD_INT 30
24603: PUSH
24604: LD_INT 26
24606: PUSH
24607: EMPTY
24608: LIST
24609: LIST
24610: PUSH
24611: LD_INT 30
24613: PUSH
24614: LD_INT 28
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PPUSH
24631: CALL_OW 69
24635: ST_TO_ADDR
// if not tmp then
24636: LD_VAR 0 2
24640: NOT
24641: IFFALSE 24645
// exit ;
24643: GO 24674
// for i in tmp do
24645: LD_ADDR_VAR 0 1
24649: PUSH
24650: LD_VAR 0 2
24654: PUSH
24655: FOR_IN
24656: IFFALSE 24672
// SetLives ( i , 1 ) ;
24658: LD_VAR 0 1
24662: PPUSH
24663: LD_INT 1
24665: PPUSH
24666: CALL_OW 234
24670: GO 24655
24672: POP
24673: POP
// end ;
24674: PPOPN 2
24676: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24677: LD_EXP 57
24681: PUSH
24682: LD_EXP 106
24686: AND
24687: IFFALSE 24961
24689: GO 24691
24691: DISABLE
24692: LD_INT 0
24694: PPUSH
24695: PPUSH
24696: PPUSH
// begin i := rand ( 1 , 7 ) ;
24697: LD_ADDR_VAR 0 1
24701: PUSH
24702: LD_INT 1
24704: PPUSH
24705: LD_INT 7
24707: PPUSH
24708: CALL_OW 12
24712: ST_TO_ADDR
// case i of 1 :
24713: LD_VAR 0 1
24717: PUSH
24718: LD_INT 1
24720: DOUBLE
24721: EQUAL
24722: IFTRUE 24726
24724: GO 24736
24726: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24727: LD_STRING earthquake(getX(game), 0, 32)
24729: PPUSH
24730: CALL_OW 559
24734: GO 24961
24736: LD_INT 2
24738: DOUBLE
24739: EQUAL
24740: IFTRUE 24744
24742: GO 24758
24744: POP
// begin ToLua ( displayStucuk(); ) ;
24745: LD_STRING displayStucuk();
24747: PPUSH
24748: CALL_OW 559
// ResetFog ;
24752: CALL_OW 335
// end ; 3 :
24756: GO 24961
24758: LD_INT 3
24760: DOUBLE
24761: EQUAL
24762: IFTRUE 24766
24764: GO 24870
24766: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24767: LD_ADDR_VAR 0 2
24771: PUSH
24772: LD_INT 22
24774: PUSH
24775: LD_OWVAR 2
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: LD_INT 25
24786: PUSH
24787: LD_INT 1
24789: PUSH
24790: EMPTY
24791: LIST
24792: LIST
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PPUSH
24798: CALL_OW 69
24802: ST_TO_ADDR
// if not tmp then
24803: LD_VAR 0 2
24807: NOT
24808: IFFALSE 24812
// exit ;
24810: GO 24961
// un := tmp [ rand ( 1 , tmp ) ] ;
24812: LD_ADDR_VAR 0 3
24816: PUSH
24817: LD_VAR 0 2
24821: PUSH
24822: LD_INT 1
24824: PPUSH
24825: LD_VAR 0 2
24829: PPUSH
24830: CALL_OW 12
24834: ARRAY
24835: ST_TO_ADDR
// if Crawls ( un ) then
24836: LD_VAR 0 3
24840: PPUSH
24841: CALL_OW 318
24845: IFFALSE 24856
// ComWalk ( un ) ;
24847: LD_VAR 0 3
24851: PPUSH
24852: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24856: LD_VAR 0 3
24860: PPUSH
24861: LD_INT 8
24863: PPUSH
24864: CALL_OW 336
// end ; 4 :
24868: GO 24961
24870: LD_INT 4
24872: DOUBLE
24873: EQUAL
24874: IFTRUE 24878
24876: GO 24939
24878: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24879: LD_ADDR_VAR 0 2
24883: PUSH
24884: LD_INT 22
24886: PUSH
24887: LD_OWVAR 2
24891: PUSH
24892: EMPTY
24893: LIST
24894: LIST
24895: PUSH
24896: LD_INT 30
24898: PUSH
24899: LD_INT 29
24901: PUSH
24902: EMPTY
24903: LIST
24904: LIST
24905: PUSH
24906: EMPTY
24907: LIST
24908: LIST
24909: PPUSH
24910: CALL_OW 69
24914: ST_TO_ADDR
// if not tmp then
24915: LD_VAR 0 2
24919: NOT
24920: IFFALSE 24924
// exit ;
24922: GO 24961
// DestroyUnit ( tmp [ 1 ] ) ;
24924: LD_VAR 0 2
24928: PUSH
24929: LD_INT 1
24931: ARRAY
24932: PPUSH
24933: CALL_OW 65
// end ; 5 .. 7 :
24937: GO 24961
24939: LD_INT 5
24941: DOUBLE
24942: GREATEREQUAL
24943: IFFALSE 24951
24945: LD_INT 7
24947: DOUBLE
24948: LESSEQUAL
24949: IFTRUE 24953
24951: GO 24960
24953: POP
// StreamSibBomb ; end ;
24954: CALL 21211 0 0
24958: GO 24961
24960: POP
// end ;
24961: PPOPN 3
24963: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24964: LD_EXP 57
24968: PUSH
24969: LD_EXP 107
24973: AND
24974: IFFALSE 25130
24976: GO 24978
24978: DISABLE
24979: LD_INT 0
24981: PPUSH
24982: PPUSH
24983: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24984: LD_ADDR_VAR 0 2
24988: PUSH
24989: LD_INT 81
24991: PUSH
24992: LD_OWVAR 2
24996: PUSH
24997: EMPTY
24998: LIST
24999: LIST
25000: PUSH
25001: LD_INT 2
25003: PUSH
25004: LD_INT 21
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 21
25016: PUSH
25017: LD_INT 2
25019: PUSH
25020: EMPTY
25021: LIST
25022: LIST
25023: PUSH
25024: EMPTY
25025: LIST
25026: LIST
25027: LIST
25028: PUSH
25029: EMPTY
25030: LIST
25031: LIST
25032: PPUSH
25033: CALL_OW 69
25037: ST_TO_ADDR
// if not tmp then
25038: LD_VAR 0 2
25042: NOT
25043: IFFALSE 25047
// exit ;
25045: GO 25130
// p := 0 ;
25047: LD_ADDR_VAR 0 3
25051: PUSH
25052: LD_INT 0
25054: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25055: LD_INT 35
25057: PPUSH
25058: CALL_OW 67
// p := p + 1 ;
25062: LD_ADDR_VAR 0 3
25066: PUSH
25067: LD_VAR 0 3
25071: PUSH
25072: LD_INT 1
25074: PLUS
25075: ST_TO_ADDR
// for i in tmp do
25076: LD_ADDR_VAR 0 1
25080: PUSH
25081: LD_VAR 0 2
25085: PUSH
25086: FOR_IN
25087: IFFALSE 25118
// if GetLives ( i ) < 1000 then
25089: LD_VAR 0 1
25093: PPUSH
25094: CALL_OW 256
25098: PUSH
25099: LD_INT 1000
25101: LESS
25102: IFFALSE 25116
// SetLives ( i , 1000 ) ;
25104: LD_VAR 0 1
25108: PPUSH
25109: LD_INT 1000
25111: PPUSH
25112: CALL_OW 234
25116: GO 25086
25118: POP
25119: POP
// until p > 20 ;
25120: LD_VAR 0 3
25124: PUSH
25125: LD_INT 20
25127: GREATER
25128: IFFALSE 25055
// end ;
25130: PPOPN 3
25132: END
// every 0 0$1 trigger StreamModeActive and sTime do
25133: LD_EXP 57
25137: PUSH
25138: LD_EXP 108
25142: AND
25143: IFFALSE 25178
25145: GO 25147
25147: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25148: LD_INT 28
25150: PPUSH
25151: LD_OWVAR 2
25155: PPUSH
25156: LD_INT 2
25158: PPUSH
25159: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25163: LD_INT 30
25165: PPUSH
25166: LD_OWVAR 2
25170: PPUSH
25171: LD_INT 2
25173: PPUSH
25174: CALL_OW 322
// end ;
25178: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25179: LD_EXP 57
25183: PUSH
25184: LD_EXP 109
25188: AND
25189: IFFALSE 25310
25191: GO 25193
25193: DISABLE
25194: LD_INT 0
25196: PPUSH
25197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25198: LD_ADDR_VAR 0 2
25202: PUSH
25203: LD_INT 22
25205: PUSH
25206: LD_OWVAR 2
25210: PUSH
25211: EMPTY
25212: LIST
25213: LIST
25214: PUSH
25215: LD_INT 21
25217: PUSH
25218: LD_INT 1
25220: PUSH
25221: EMPTY
25222: LIST
25223: LIST
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: LD_INT 23
25230: PUSH
25231: LD_INT 0
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: LIST
25246: PPUSH
25247: CALL_OW 69
25251: ST_TO_ADDR
// if not tmp then
25252: LD_VAR 0 2
25256: NOT
25257: IFFALSE 25261
// exit ;
25259: GO 25310
// for i in tmp do
25261: LD_ADDR_VAR 0 1
25265: PUSH
25266: LD_VAR 0 2
25270: PUSH
25271: FOR_IN
25272: IFFALSE 25308
// begin if Crawls ( i ) then
25274: LD_VAR 0 1
25278: PPUSH
25279: CALL_OW 318
25283: IFFALSE 25294
// ComWalk ( i ) ;
25285: LD_VAR 0 1
25289: PPUSH
25290: CALL_OW 138
// SetClass ( i , 2 ) ;
25294: LD_VAR 0 1
25298: PPUSH
25299: LD_INT 2
25301: PPUSH
25302: CALL_OW 336
// end ;
25306: GO 25271
25308: POP
25309: POP
// end ;
25310: PPOPN 2
25312: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25313: LD_EXP 57
25317: PUSH
25318: LD_EXP 110
25322: AND
25323: IFFALSE 25604
25325: GO 25327
25327: DISABLE
25328: LD_INT 0
25330: PPUSH
25331: PPUSH
25332: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25333: LD_OWVAR 2
25337: PPUSH
25338: LD_INT 9
25340: PPUSH
25341: LD_INT 1
25343: PPUSH
25344: LD_INT 1
25346: PPUSH
25347: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25351: LD_INT 9
25353: PPUSH
25354: LD_OWVAR 2
25358: PPUSH
25359: CALL_OW 343
// uc_side := 9 ;
25363: LD_ADDR_OWVAR 20
25367: PUSH
25368: LD_INT 9
25370: ST_TO_ADDR
// uc_nation := 2 ;
25371: LD_ADDR_OWVAR 21
25375: PUSH
25376: LD_INT 2
25378: ST_TO_ADDR
// hc_name := Dark Warrior ;
25379: LD_ADDR_OWVAR 26
25383: PUSH
25384: LD_STRING Dark Warrior
25386: ST_TO_ADDR
// hc_gallery :=  ;
25387: LD_ADDR_OWVAR 33
25391: PUSH
25392: LD_STRING 
25394: ST_TO_ADDR
// hc_noskilllimit := true ;
25395: LD_ADDR_OWVAR 76
25399: PUSH
25400: LD_INT 1
25402: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25403: LD_ADDR_OWVAR 31
25407: PUSH
25408: LD_INT 30
25410: PUSH
25411: LD_INT 30
25413: PUSH
25414: LD_INT 30
25416: PUSH
25417: LD_INT 30
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: ST_TO_ADDR
// un := CreateHuman ;
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: CALL_OW 44
25435: ST_TO_ADDR
// hc_noskilllimit := false ;
25436: LD_ADDR_OWVAR 76
25440: PUSH
25441: LD_INT 0
25443: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25444: LD_VAR 0 3
25448: PPUSH
25449: LD_INT 1
25451: PPUSH
25452: CALL_OW 51
// p := 0 ;
25456: LD_ADDR_VAR 0 2
25460: PUSH
25461: LD_INT 0
25463: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25464: LD_INT 35
25466: PPUSH
25467: CALL_OW 67
// p := p + 1 ;
25471: LD_ADDR_VAR 0 2
25475: PUSH
25476: LD_VAR 0 2
25480: PUSH
25481: LD_INT 1
25483: PLUS
25484: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25485: LD_VAR 0 3
25489: PPUSH
25490: CALL_OW 256
25494: PUSH
25495: LD_INT 1000
25497: LESS
25498: IFFALSE 25512
// SetLives ( un , 1000 ) ;
25500: LD_VAR 0 3
25504: PPUSH
25505: LD_INT 1000
25507: PPUSH
25508: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25512: LD_VAR 0 3
25516: PPUSH
25517: LD_INT 81
25519: PUSH
25520: LD_OWVAR 2
25524: PUSH
25525: EMPTY
25526: LIST
25527: LIST
25528: PUSH
25529: LD_INT 91
25531: PUSH
25532: LD_VAR 0 3
25536: PUSH
25537: LD_INT 30
25539: PUSH
25540: EMPTY
25541: LIST
25542: LIST
25543: LIST
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PPUSH
25549: CALL_OW 69
25553: PPUSH
25554: LD_VAR 0 3
25558: PPUSH
25559: CALL_OW 74
25563: PPUSH
25564: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
25568: LD_VAR 0 2
25572: PUSH
25573: LD_INT 60
25575: GREATER
25576: PUSH
25577: LD_VAR 0 3
25581: PPUSH
25582: CALL_OW 301
25586: OR
25587: IFFALSE 25464
// if un then
25589: LD_VAR 0 3
25593: IFFALSE 25604
// RemoveUnit ( un ) ;
25595: LD_VAR 0 3
25599: PPUSH
25600: CALL_OW 64
// end ;
25604: PPOPN 3
25606: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25607: LD_INT 0
25609: PPUSH
25610: PPUSH
25611: PPUSH
25612: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25613: LD_ADDR_VAR 0 4
25617: PUSH
25618: LD_INT 22
25620: PUSH
25621: LD_OWVAR 2
25625: PUSH
25626: EMPTY
25627: LIST
25628: LIST
25629: PUSH
25630: LD_INT 2
25632: PUSH
25633: LD_INT 30
25635: PUSH
25636: LD_INT 0
25638: PUSH
25639: EMPTY
25640: LIST
25641: LIST
25642: PUSH
25643: LD_INT 30
25645: PUSH
25646: LD_INT 1
25648: PUSH
25649: EMPTY
25650: LIST
25651: LIST
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: LIST
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PPUSH
25662: CALL_OW 69
25666: ST_TO_ADDR
// if not tmp then
25667: LD_VAR 0 4
25671: NOT
25672: IFFALSE 25676
// exit ;
25674: GO 25735
// for i in tmp do
25676: LD_ADDR_VAR 0 2
25680: PUSH
25681: LD_VAR 0 4
25685: PUSH
25686: FOR_IN
25687: IFFALSE 25733
// for j = 1 to 3 do
25689: LD_ADDR_VAR 0 3
25693: PUSH
25694: DOUBLE
25695: LD_INT 1
25697: DEC
25698: ST_TO_ADDR
25699: LD_INT 3
25701: PUSH
25702: FOR_TO
25703: IFFALSE 25729
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25705: LD_VAR 0 2
25709: PPUSH
25710: CALL_OW 274
25714: PPUSH
25715: LD_VAR 0 3
25719: PPUSH
25720: LD_INT 99999
25722: PPUSH
25723: CALL_OW 277
25727: GO 25702
25729: POP
25730: POP
25731: GO 25686
25733: POP
25734: POP
// end ;
25735: LD_VAR 0 1
25739: RET
// export function hHackSetLevel10 ; var i , j ; begin
25740: LD_INT 0
25742: PPUSH
25743: PPUSH
25744: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25745: LD_ADDR_VAR 0 2
25749: PUSH
25750: LD_INT 21
25752: PUSH
25753: LD_INT 1
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PPUSH
25760: CALL_OW 69
25764: PUSH
25765: FOR_IN
25766: IFFALSE 25818
// if IsSelected ( i ) then
25768: LD_VAR 0 2
25772: PPUSH
25773: CALL_OW 306
25777: IFFALSE 25816
// begin for j := 1 to 4 do
25779: LD_ADDR_VAR 0 3
25783: PUSH
25784: DOUBLE
25785: LD_INT 1
25787: DEC
25788: ST_TO_ADDR
25789: LD_INT 4
25791: PUSH
25792: FOR_TO
25793: IFFALSE 25814
// SetSkill ( i , j , 10 ) ;
25795: LD_VAR 0 2
25799: PPUSH
25800: LD_VAR 0 3
25804: PPUSH
25805: LD_INT 10
25807: PPUSH
25808: CALL_OW 237
25812: GO 25792
25814: POP
25815: POP
// end ;
25816: GO 25765
25818: POP
25819: POP
// end ;
25820: LD_VAR 0 1
25824: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25825: LD_INT 0
25827: PPUSH
25828: PPUSH
25829: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25830: LD_ADDR_VAR 0 2
25834: PUSH
25835: LD_INT 22
25837: PUSH
25838: LD_OWVAR 2
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 21
25849: PUSH
25850: LD_INT 1
25852: PUSH
25853: EMPTY
25854: LIST
25855: LIST
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PPUSH
25861: CALL_OW 69
25865: PUSH
25866: FOR_IN
25867: IFFALSE 25908
// begin for j := 1 to 4 do
25869: LD_ADDR_VAR 0 3
25873: PUSH
25874: DOUBLE
25875: LD_INT 1
25877: DEC
25878: ST_TO_ADDR
25879: LD_INT 4
25881: PUSH
25882: FOR_TO
25883: IFFALSE 25904
// SetSkill ( i , j , 10 ) ;
25885: LD_VAR 0 2
25889: PPUSH
25890: LD_VAR 0 3
25894: PPUSH
25895: LD_INT 10
25897: PPUSH
25898: CALL_OW 237
25902: GO 25882
25904: POP
25905: POP
// end ;
25906: GO 25866
25908: POP
25909: POP
// end ;
25910: LD_VAR 0 1
25914: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
25915: LD_INT 0
25917: PPUSH
// uc_side := your_side ;
25918: LD_ADDR_OWVAR 20
25922: PUSH
25923: LD_OWVAR 2
25927: ST_TO_ADDR
// uc_nation := nation ;
25928: LD_ADDR_OWVAR 21
25932: PUSH
25933: LD_VAR 0 1
25937: ST_TO_ADDR
// InitHc ;
25938: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25942: LD_INT 0
25944: PPUSH
25945: LD_VAR 0 2
25949: PPUSH
25950: LD_VAR 0 3
25954: PPUSH
25955: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
25959: CALL_OW 44
25963: PPUSH
25964: LD_INT 1
25966: PPUSH
25967: CALL_OW 51
// end ;
25971: LD_VAR 0 4
25975: RET
// export function hHackSpawnVehicle ; begin
25976: LD_INT 0
25978: PPUSH
// uc_side := your_side ;
25979: LD_ADDR_OWVAR 20
25983: PUSH
25984: LD_OWVAR 2
25988: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
25989: LD_ADDR_OWVAR 21
25993: PUSH
25994: LD_INT 1
25996: PPUSH
25997: LD_INT 3
25999: PPUSH
26000: CALL_OW 12
26004: ST_TO_ADDR
// InitVc ;
26005: CALL_OW 20
// case uc_nation of 1 :
26009: LD_OWVAR 21
26013: PUSH
26014: LD_INT 1
26016: DOUBLE
26017: EQUAL
26018: IFTRUE 26022
26020: GO 26166
26022: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
26023: LD_ADDR_OWVAR 37
26027: PUSH
26028: LD_INT 1
26030: PUSH
26031: LD_INT 2
26033: PUSH
26034: LD_INT 3
26036: PUSH
26037: LD_INT 4
26039: PUSH
26040: LD_INT 5
26042: PUSH
26043: EMPTY
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: PUSH
26050: LD_INT 1
26052: PPUSH
26053: LD_INT 5
26055: PPUSH
26056: CALL_OW 12
26060: ARRAY
26061: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
26062: LD_ADDR_OWVAR 39
26066: PUSH
26067: LD_INT 1
26069: PPUSH
26070: LD_INT 3
26072: PPUSH
26073: CALL_OW 12
26077: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
26078: LD_ADDR_OWVAR 38
26082: PUSH
26083: LD_INT 1
26085: PUSH
26086: LD_INT 2
26088: PUSH
26089: LD_INT 3
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: LIST
26096: PUSH
26097: LD_INT 1
26099: PPUSH
26100: LD_INT 3
26102: PPUSH
26103: CALL_OW 12
26107: ARRAY
26108: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
26109: LD_ADDR_OWVAR 40
26113: PUSH
26114: LD_INT 2
26116: PUSH
26117: LD_INT 4
26119: PUSH
26120: LD_INT 5
26122: PUSH
26123: LD_INT 3
26125: PUSH
26126: LD_INT 7
26128: PUSH
26129: LD_INT 8
26131: PUSH
26132: LD_INT 9
26134: PUSH
26135: LD_INT 10
26137: PUSH
26138: LD_INT 6
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: LIST
26147: LIST
26148: LIST
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: PPUSH
26155: LD_INT 9
26157: PPUSH
26158: CALL_OW 12
26162: ARRAY
26163: ST_TO_ADDR
// end ; 2 :
26164: GO 26431
26166: LD_INT 2
26168: DOUBLE
26169: EQUAL
26170: IFTRUE 26174
26172: GO 26298
26174: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
26175: LD_ADDR_OWVAR 37
26179: PUSH
26180: LD_INT 11
26182: PUSH
26183: LD_INT 12
26185: PUSH
26186: LD_INT 13
26188: PUSH
26189: LD_INT 14
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: LIST
26196: LIST
26197: PUSH
26198: LD_INT 1
26200: PPUSH
26201: LD_INT 4
26203: PPUSH
26204: CALL_OW 12
26208: ARRAY
26209: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
26210: LD_ADDR_OWVAR 39
26214: PUSH
26215: LD_INT 1
26217: PPUSH
26218: LD_INT 3
26220: PPUSH
26221: CALL_OW 12
26225: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
26226: LD_ADDR_OWVAR 38
26230: PUSH
26231: LD_INT 1
26233: PUSH
26234: LD_INT 2
26236: PUSH
26237: LD_INT 5
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: LIST
26244: PUSH
26245: LD_INT 1
26247: PPUSH
26248: LD_INT 3
26250: PPUSH
26251: CALL_OW 12
26255: ARRAY
26256: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
26257: LD_ADDR_OWVAR 40
26261: PUSH
26262: LD_INT 24
26264: PUSH
26265: LD_INT 26
26267: PUSH
26268: LD_INT 27
26270: PUSH
26271: LD_INT 28
26273: PUSH
26274: LD_INT 29
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 1
26286: PPUSH
26287: LD_INT 5
26289: PPUSH
26290: CALL_OW 12
26294: ARRAY
26295: ST_TO_ADDR
// end ; 3 :
26296: GO 26431
26298: LD_INT 3
26300: DOUBLE
26301: EQUAL
26302: IFTRUE 26306
26304: GO 26430
26306: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
26307: LD_ADDR_OWVAR 37
26311: PUSH
26312: LD_INT 21
26314: PUSH
26315: LD_INT 23
26317: PUSH
26318: LD_INT 22
26320: PUSH
26321: LD_INT 24
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 1
26332: PPUSH
26333: LD_INT 4
26335: PPUSH
26336: CALL_OW 12
26340: ARRAY
26341: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
26342: LD_ADDR_OWVAR 39
26346: PUSH
26347: LD_INT 1
26349: PPUSH
26350: LD_INT 3
26352: PPUSH
26353: CALL_OW 12
26357: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
26358: LD_ADDR_OWVAR 38
26362: PUSH
26363: LD_INT 1
26365: PUSH
26366: LD_INT 3
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: PUSH
26373: LD_INT 1
26375: PPUSH
26376: LD_INT 2
26378: PPUSH
26379: CALL_OW 12
26383: ARRAY
26384: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
26385: LD_ADDR_OWVAR 40
26389: PUSH
26390: LD_INT 42
26392: PUSH
26393: LD_INT 43
26395: PUSH
26396: LD_INT 44
26398: PUSH
26399: LD_INT 46
26401: PUSH
26402: LD_INT 48
26404: PUSH
26405: LD_INT 47
26407: PUSH
26408: EMPTY
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: PUSH
26416: LD_INT 1
26418: PPUSH
26419: LD_INT 6
26421: PPUSH
26422: CALL_OW 12
26426: ARRAY
26427: ST_TO_ADDR
// end ; end ;
26428: GO 26431
26430: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26431: CALL_OW 45
26435: PPUSH
26436: LD_INT 1
26438: PPUSH
26439: CALL_OW 51
// end ;
26443: LD_VAR 0 1
26447: RET
// export hInvincible ; every 1 do
26448: GO 26450
26450: DISABLE
// hInvincible := [ ] ;
26451: LD_ADDR_EXP 111
26455: PUSH
26456: EMPTY
26457: ST_TO_ADDR
26458: END
// every 10 do var i ;
26459: GO 26461
26461: DISABLE
26462: LD_INT 0
26464: PPUSH
// begin enable ;
26465: ENABLE
// if not hInvincible then
26466: LD_EXP 111
26470: NOT
26471: IFFALSE 26475
// exit ;
26473: GO 26519
// for i in hInvincible do
26475: LD_ADDR_VAR 0 1
26479: PUSH
26480: LD_EXP 111
26484: PUSH
26485: FOR_IN
26486: IFFALSE 26517
// if GetLives ( i ) < 1000 then
26488: LD_VAR 0 1
26492: PPUSH
26493: CALL_OW 256
26497: PUSH
26498: LD_INT 1000
26500: LESS
26501: IFFALSE 26515
// SetLives ( i , 1000 ) ;
26503: LD_VAR 0 1
26507: PPUSH
26508: LD_INT 1000
26510: PPUSH
26511: CALL_OW 234
26515: GO 26485
26517: POP
26518: POP
// end ;
26519: PPOPN 1
26521: END
// export function hHackInvincible ; var i ; begin
26522: LD_INT 0
26524: PPUSH
26525: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26526: LD_ADDR_VAR 0 2
26530: PUSH
26531: LD_INT 2
26533: PUSH
26534: LD_INT 21
26536: PUSH
26537: LD_INT 1
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PUSH
26544: LD_INT 21
26546: PUSH
26547: LD_INT 2
26549: PUSH
26550: EMPTY
26551: LIST
26552: LIST
26553: PUSH
26554: EMPTY
26555: LIST
26556: LIST
26557: LIST
26558: PPUSH
26559: CALL_OW 69
26563: PUSH
26564: FOR_IN
26565: IFFALSE 26626
// if IsSelected ( i ) then
26567: LD_VAR 0 2
26571: PPUSH
26572: CALL_OW 306
26576: IFFALSE 26624
// begin if i in hInvincible then
26578: LD_VAR 0 2
26582: PUSH
26583: LD_EXP 111
26587: IN
26588: IFFALSE 26608
// hInvincible := hInvincible diff i else
26590: LD_ADDR_EXP 111
26594: PUSH
26595: LD_EXP 111
26599: PUSH
26600: LD_VAR 0 2
26604: DIFF
26605: ST_TO_ADDR
26606: GO 26624
// hInvincible := hInvincible union i ;
26608: LD_ADDR_EXP 111
26612: PUSH
26613: LD_EXP 111
26617: PUSH
26618: LD_VAR 0 2
26622: UNION
26623: ST_TO_ADDR
// end ;
26624: GO 26564
26626: POP
26627: POP
// end ;
26628: LD_VAR 0 1
26632: RET
// export function hHackInvisible ; var i , j ; begin
26633: LD_INT 0
26635: PPUSH
26636: PPUSH
26637: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26638: LD_ADDR_VAR 0 2
26642: PUSH
26643: LD_INT 21
26645: PUSH
26646: LD_INT 1
26648: PUSH
26649: EMPTY
26650: LIST
26651: LIST
26652: PPUSH
26653: CALL_OW 69
26657: PUSH
26658: FOR_IN
26659: IFFALSE 26683
// if IsSelected ( i ) then
26661: LD_VAR 0 2
26665: PPUSH
26666: CALL_OW 306
26670: IFFALSE 26681
// ComForceInvisible ( i ) ;
26672: LD_VAR 0 2
26676: PPUSH
26677: CALL_OW 496
26681: GO 26658
26683: POP
26684: POP
// end ;
26685: LD_VAR 0 1
26689: RET
// export function hHackChangeYourSide ; begin
26690: LD_INT 0
26692: PPUSH
// if your_side = 8 then
26693: LD_OWVAR 2
26697: PUSH
26698: LD_INT 8
26700: EQUAL
26701: IFFALSE 26713
// your_side := 0 else
26703: LD_ADDR_OWVAR 2
26707: PUSH
26708: LD_INT 0
26710: ST_TO_ADDR
26711: GO 26727
// your_side := your_side + 1 ;
26713: LD_ADDR_OWVAR 2
26717: PUSH
26718: LD_OWVAR 2
26722: PUSH
26723: LD_INT 1
26725: PLUS
26726: ST_TO_ADDR
// end ;
26727: LD_VAR 0 1
26731: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26732: LD_INT 0
26734: PPUSH
26735: PPUSH
26736: PPUSH
// for i in all_units do
26737: LD_ADDR_VAR 0 2
26741: PUSH
26742: LD_OWVAR 3
26746: PUSH
26747: FOR_IN
26748: IFFALSE 26826
// if IsSelected ( i ) then
26750: LD_VAR 0 2
26754: PPUSH
26755: CALL_OW 306
26759: IFFALSE 26824
// begin j := GetSide ( i ) ;
26761: LD_ADDR_VAR 0 3
26765: PUSH
26766: LD_VAR 0 2
26770: PPUSH
26771: CALL_OW 255
26775: ST_TO_ADDR
// if j = 8 then
26776: LD_VAR 0 3
26780: PUSH
26781: LD_INT 8
26783: EQUAL
26784: IFFALSE 26796
// j := 0 else
26786: LD_ADDR_VAR 0 3
26790: PUSH
26791: LD_INT 0
26793: ST_TO_ADDR
26794: GO 26810
// j := j + 1 ;
26796: LD_ADDR_VAR 0 3
26800: PUSH
26801: LD_VAR 0 3
26805: PUSH
26806: LD_INT 1
26808: PLUS
26809: ST_TO_ADDR
// SetSide ( i , j ) ;
26810: LD_VAR 0 2
26814: PPUSH
26815: LD_VAR 0 3
26819: PPUSH
26820: CALL_OW 235
// end ;
26824: GO 26747
26826: POP
26827: POP
// end ;
26828: LD_VAR 0 1
26832: RET
// export function hHackFog ; begin
26833: LD_INT 0
26835: PPUSH
// FogOff ( true ) ;
26836: LD_INT 1
26838: PPUSH
26839: CALL_OW 344
// end ;
26843: LD_VAR 0 1
26847: RET
// export function hHackApeman ; begin
26848: LD_INT 0
26850: PPUSH
// uc_side := your_side ;
26851: LD_ADDR_OWVAR 20
26855: PUSH
26856: LD_OWVAR 2
26860: ST_TO_ADDR
// uc_nation := 0 ;
26861: LD_ADDR_OWVAR 21
26865: PUSH
26866: LD_INT 0
26868: ST_TO_ADDR
// hc_name :=  ;
26869: LD_ADDR_OWVAR 26
26873: PUSH
26874: LD_STRING 
26876: ST_TO_ADDR
// hc_gallery :=  ;
26877: LD_ADDR_OWVAR 33
26881: PUSH
26882: LD_STRING 
26884: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
26885: LD_ADDR_OWVAR 31
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 0
26898: PUSH
26899: LD_INT 0
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: ST_TO_ADDR
// hc_class := class_apeman ;
26908: LD_ADDR_OWVAR 28
26912: PUSH
26913: LD_INT 12
26915: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
26916: CALL_OW 44
26920: PPUSH
26921: LD_INT 1
26923: PPUSH
26924: CALL_OW 51
// end ;
26928: LD_VAR 0 1
26932: RET
// export function hHackBoom ; begin
26933: LD_INT 0
26935: PPUSH
// uc_side := your_side ;
26936: LD_ADDR_OWVAR 20
26940: PUSH
26941: LD_OWVAR 2
26945: ST_TO_ADDR
// uc_nation := 1 ;
26946: LD_ADDR_OWVAR 21
26950: PUSH
26951: LD_INT 1
26953: ST_TO_ADDR
// vc_chassis := us_morphling ;
26954: LD_ADDR_OWVAR 37
26958: PUSH
26959: LD_INT 5
26961: ST_TO_ADDR
// vc_engine := engine_siberite ;
26962: LD_ADDR_OWVAR 39
26966: PUSH
26967: LD_INT 3
26969: ST_TO_ADDR
// vc_control := control_computer ;
26970: LD_ADDR_OWVAR 38
26974: PUSH
26975: LD_INT 3
26977: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
26978: LD_ADDR_OWVAR 40
26982: PUSH
26983: LD_INT 8
26985: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26986: CALL_OW 45
26990: PPUSH
26991: LD_INT 1
26993: PPUSH
26994: CALL_OW 51
// end ;
26998: LD_VAR 0 1
27002: RET
