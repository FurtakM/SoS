// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export LakeApes ; export it_is_your ; export your_units ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 13227 0 0
// PrepareAmericans ;
  28: CALL 12789 0 0
// CreateNature ;
  32: CALL 13939 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 29
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 878 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 30
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 31
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 32
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 35
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 33
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 34
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 , 970 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 36
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: LD_INT 970
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: LD_OWVAR 67
 430: ARRAY
 431: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 5
 442: PPUSH
 443: CALL_OW 12
 447: PUSH
 448: LD_OWVAR 67
 452: MUL
 453: ST_TO_ADDR
// amApeAmount = [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 454: LD_ADDR_EXP 38
 458: PUSH
 459: LD_INT 4
 461: PUSH
 462: LD_INT 5
 464: PUSH
 465: LD_INT 6
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_OWVAR 67
 481: ARRAY
 482: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 , 3 ] [ Difficulty ] ;
 483: LD_ADDR_EXP 39
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 512: LD_ADDR_EXP 40
 516: PUSH
 517: LD_INT 78
 519: PUSH
 520: LD_INT 87
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 527: LD_ADDR_EXP 41
 531: PUSH
 532: LD_INT 72
 534: PUSH
 535: LD_INT 115
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 99
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 131
 554: PUSH
 555: LD_INT 81
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 , 300 ] [ Difficulty ] ;
 567: LD_ADDR_EXP 42
 571: PUSH
 572: LD_INT 500
 574: PUSH
 575: LD_INT 400
 577: PUSH
 578: LD_INT 350
 580: PUSH
 581: LD_INT 300
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_OWVAR 67
 594: ARRAY
 595: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 596: LD_ADDR_EXP 43
 600: PUSH
 601: LD_INT 21000
 603: PUSH
 604: LD_INT 16800
 606: PUSH
 607: LD_INT 12600
 609: PUSH
 610: LD_INT 10500
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: LD_OWVAR 67
 623: ARRAY
 624: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$30 ] [ Difficulty ] ;
 625: LD_ADDR_EXP 44
 629: PUSH
 630: LD_INT 6300
 632: PUSH
 633: LD_INT 5250
 635: PUSH
 636: LD_INT 4200
 638: PUSH
 639: LD_INT 3150
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: ST_TO_ADDR
// end ;
 654: LD_VAR 0 1
 658: RET
// every 0 0$1 trigger debugMode do var i ;
 659: LD_EXP 35
 663: IFFALSE 875
 665: GO 667
 667: DISABLE
 668: LD_INT 0
 670: PPUSH
// begin enable ;
 671: ENABLE
// FogOff ( your_side ) ;
 672: LD_OWVAR 2
 676: PPUSH
 677: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 21
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: FOR_IN
 736: IFFALSE 752
// SetLives ( i , 1000 ) ;
 738: LD_VAR 0 1
 742: PPUSH
 743: LD_INT 1000
 745: PPUSH
 746: CALL_OW 234
 750: GO 735
 752: POP
 753: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_OWVAR 2
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 30
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 30
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 274
 840: PPUSH
 841: LD_INT 2
 843: PPUSH
 844: LD_INT 9999
 846: PPUSH
 847: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 274
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 9999
 866: PPUSH
 867: CALL_OW 277
// end ;
 871: GO 808
 873: POP
 874: POP
// end ; end_of_file
 875: PPOPN 1
 877: END
// export function MissionIntro ; begin
 878: LD_INT 0
 880: PPUSH
// InGameOn ;
 881: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 885: LD_EXP 40
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PUSH
 894: LD_INT 8
 896: MINUS
 897: PPUSH
 898: LD_EXP 40
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 8
 909: MINUS
 910: PPUSH
 911: CALL_OW 84
// wait ( 0 0$3 ) ;
 915: LD_INT 105
 917: PPUSH
 918: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 922: LD_EXP 49
 926: PPUSH
 927: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 931: LD_EXP 49
 935: PPUSH
 936: LD_STRING D1-Bur-1
 938: PPUSH
 939: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 943: LD_EXP 49
 947: PPUSH
 948: LD_INT 94
 950: PPUSH
 951: LD_INT 89
 953: PPUSH
 954: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 958: LD_INT 94
 960: PPUSH
 961: LD_INT 89
 963: PPUSH
 964: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 968: LD_EXP 49
 972: PPUSH
 973: LD_STRING D1-Bur-1a
 975: PPUSH
 976: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 980: LD_EXP 49
 984: PPUSH
 985: LD_INT 102
 987: PPUSH
 988: LD_INT 88
 990: PPUSH
 991: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 995: LD_INT 102
 997: PPUSH
 998: LD_INT 88
1000: PPUSH
1001: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
1005: LD_EXP 49
1009: PPUSH
1010: LD_STRING D1-Bur-1b
1012: PPUSH
1013: CALL_OW 88
// InGameOff ;
1017: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1021: LD_STRING M1
1023: PPUSH
1024: CALL_OW 337
// SaveForQuickRestart ;
1028: CALL_OW 22
// introEnd = true ;
1032: LD_ADDR_EXP 3
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// LakeApes = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
1040: LD_ADDR_EXP 26
1044: PUSH
1045: LD_INT 24
1047: PPUSH
1048: LD_INT 22
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 25
1060: PUSH
1061: LD_INT 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 70
1076: ST_TO_ADDR
// end ;
1077: LD_VAR 0 1
1081: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1082: LD_EXP 49
1086: PPUSH
1087: LD_INT 74
1089: PPUSH
1090: LD_INT 88
1092: PPUSH
1093: CALL_OW 297
1097: PUSH
1098: LD_INT 5
1100: LESS
1101: PUSH
1102: LD_EXP 3
1106: AND
1107: IFFALSE 1132
1109: GO 1111
1111: DISABLE
// begin spotWaterfall = true ;
1112: LD_ADDR_EXP 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1120: LD_EXP 49
1124: PPUSH
1125: LD_STRING DWaterfall-Bur-1
1127: PPUSH
1128: CALL_OW 88
// end ;
1132: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1133: LD_EXP 49
1137: PPUSH
1138: LD_INT 130
1140: PPUSH
1141: LD_INT 96
1143: PPUSH
1144: CALL_OW 297
1148: PUSH
1149: LD_INT 5
1151: LESS
1152: PUSH
1153: LD_EXP 3
1157: AND
1158: IFFALSE 1175
1160: GO 1162
1162: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1163: LD_EXP 49
1167: PPUSH
1168: LD_STRING DCorpse-Bur-1
1170: PPUSH
1171: CALL_OW 88
1175: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1176: LD_EXP 4
1180: NOT
1181: IFFALSE 1275
1183: GO 1185
1185: DISABLE
1186: LD_INT 0
1188: PPUSH
// begin enable ;
1189: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1190: LD_ADDR_VAR 0 1
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 25
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: PUSH
1224: FOR_IN
1225: IFFALSE 1273
// if GetDistUnits ( apeman , Burlak ) < 7 then
1227: LD_VAR 0 1
1231: PPUSH
1232: LD_EXP 49
1236: PPUSH
1237: CALL_OW 296
1241: PUSH
1242: LD_INT 7
1244: LESS
1245: IFFALSE 1271
// begin apemansContact = true ;
1247: LD_ADDR_EXP 4
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1255: LD_EXP 49
1259: PPUSH
1260: LD_STRING D2-Bur-1
1262: PPUSH
1263: CALL_OW 88
// exit ;
1267: POP
1268: POP
1269: GO 1275
// end ;
1271: GO 1224
1273: POP
1274: POP
// end ;
1275: PPOPN 1
1277: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1278: LD_EXP 5
1282: NOT
1283: IFFALSE 1399
1285: GO 1287
1287: DISABLE
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
// begin enable ;
1292: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 12
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: PUSH
1327: FOR_IN
1328: IFFALSE 1397
// if Attacks ( apeman ) then
1330: LD_VAR 0 2
1334: PPUSH
1335: CALL_OW 320
1339: IFFALSE 1395
// if GetSide ( Attacks ( apeman ) ) = 3 then
1341: LD_VAR 0 2
1345: PPUSH
1346: CALL_OW 320
1350: PPUSH
1351: CALL_OW 255
1355: PUSH
1356: LD_INT 3
1358: EQUAL
1359: IFFALSE 1395
// begin attackedByApeman = true ;
1361: LD_ADDR_EXP 5
1365: PUSH
1366: LD_INT 1
1368: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1369: LD_ADDR_EXP 8
1373: PUSH
1374: LD_VAR 0 2
1378: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1379: LD_EXP 49
1383: PPUSH
1384: LD_STRING D2-Bur-1a
1386: PPUSH
1387: CALL_OW 88
// exit ;
1391: POP
1392: POP
1393: GO 1399
// end ;
1395: GO 1327
1397: POP
1398: POP
// end ;
1399: PPOPN 2
1401: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1402: LD_EXP 6
1406: NOT
1407: IFFALSE 1504
1409: GO 1411
1411: DISABLE
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
// begin enable ;
1416: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 24
1424: PPUSH
1425: LD_INT 22
1427: PUSH
1428: LD_INT 0
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 25
1437: PUSH
1438: LD_INT 12
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 70
1453: PUSH
1454: FOR_IN
1455: IFFALSE 1502
// if Attacks ( apeman ) then
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 320
1466: IFFALSE 1500
// if GetSide ( Attacks ( apeman ) ) = 3 then
1468: LD_VAR 0 2
1472: PPUSH
1473: CALL_OW 320
1477: PPUSH
1478: CALL_OW 255
1482: PUSH
1483: LD_INT 3
1485: EQUAL
1486: IFFALSE 1500
// begin attackedByApemanNearLake = true ;
1488: LD_ADDR_EXP 6
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// exit ;
1496: POP
1497: POP
1498: GO 1504
// end ;
1500: GO 1454
1502: POP
1503: POP
// end ;
1504: PPOPN 2
1506: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1507: LD_EXP 9
1511: PPUSH
1512: CALL_OW 303
1516: IFFALSE 1550
1518: GO 1520
1520: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1521: LD_ADDR_EXP 10
1525: PUSH
1526: LD_EXP 9
1530: PPUSH
1531: CALL_OW 250
1535: PUSH
1536: LD_EXP 9
1540: PPUSH
1541: CALL_OW 251
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: ST_TO_ADDR
1550: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1551: LD_EXP 9
1555: PPUSH
1556: CALL_OW 303
1560: PUSH
1561: LD_INT 3
1563: PPUSH
1564: LD_EXP 10
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_EXP 10
1577: PUSH
1578: LD_INT 2
1580: ARRAY
1581: PPUSH
1582: CALL_OW 293
1586: AND
1587: IFFALSE 1906
1589: GO 1591
1591: DISABLE
1592: LD_INT 0
1594: PPUSH
// begin wait ( 0 0$2 ) ;
1595: LD_INT 70
1597: PPUSH
1598: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1602: LD_EXP 49
1606: PPUSH
1607: LD_STRING D2a-Bur-1
1609: PPUSH
1610: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1614: LD_INT 22
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 21
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 69
1642: PUSH
1643: LD_INT 1
1645: EQUAL
1646: IFFALSE 1662
// Say ( Burlak , D2a-Bur-2 ) else
1648: LD_EXP 49
1652: PPUSH
1653: LD_STRING D2a-Bur-2
1655: PPUSH
1656: CALL_OW 88
1660: GO 1906
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1662: LD_ADDR_VAR 0 1
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 69
1695: PUSH
1696: LD_EXP 49
1700: PUSH
1701: LD_EXP 57
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: DIFF
1710: PPUSH
1711: LD_EXP 10
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: LD_EXP 10
1724: PUSH
1725: LD_INT 2
1727: ARRAY
1728: PPUSH
1729: CALL_OW 73
1733: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1734: LD_ADDR_EXP 11
1738: PUSH
1739: LD_VAR 0 1
1743: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_EXP 10
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PPUSH
1758: LD_EXP 10
1762: PUSH
1763: LD_INT 2
1765: ARRAY
1766: PPUSH
1767: CALL_OW 111
// case nearUnit of Belkov :
1771: LD_VAR 0 1
1775: PUSH
1776: LD_EXP 54
1780: DOUBLE
1781: EQUAL
1782: IFTRUE 1786
1784: GO 1801
1786: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1787: LD_EXP 54
1791: PPUSH
1792: LD_STRING D2a-Bel-1
1794: PPUSH
1795: CALL_OW 88
1799: GO 1868
1801: LD_EXP 56
1805: DOUBLE
1806: EQUAL
1807: IFTRUE 1811
1809: GO 1826
1811: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1812: LD_EXP 56
1816: PPUSH
1817: LD_STRING D2a-Kir-1
1819: PPUSH
1820: CALL_OW 88
1824: GO 1868
1826: POP
// if GetSex ( nearUnit ) = sex_male then
1827: LD_VAR 0 1
1831: PPUSH
1832: CALL_OW 258
1836: PUSH
1837: LD_INT 1
1839: EQUAL
1840: IFFALSE 1856
// Say ( nearUnit , D2a-RSol1-1 ) else
1842: LD_VAR 0 1
1846: PPUSH
1847: LD_STRING D2a-RSol1-1
1849: PPUSH
1850: CALL_OW 88
1854: GO 1868
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1856: LD_VAR 0 1
1860: PPUSH
1861: LD_STRING D2a-RFSol1-1
1863: PPUSH
1864: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1868: LD_EXP 57
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: PUSH
1882: LD_EXP 57
1886: PPUSH
1887: CALL_OW 302
1891: AND
1892: IFFALSE 1906
// Say ( Gnyevko , D2a-Gny-1 ) ;
1894: LD_EXP 57
1898: PPUSH
1899: LD_STRING D2a-Gny-1
1901: PPUSH
1902: CALL_OW 88
// end ; end ;
1906: PPOPN 1
1908: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1909: LD_EXP 12
1913: NOT
1914: PUSH
1915: LD_EXP 43
1919: PUSH
1920: LD_INT 70
1922: GREATER
1923: AND
1924: IFFALSE 1944
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1930: LD_EXP 57
1934: PPUSH
1935: LD_EXP 42
1939: PPUSH
1940: CALL_OW 234
// end ;
1944: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1945: LD_INT 3
1947: PPUSH
1948: LD_EXP 57
1952: PPUSH
1953: CALL_OW 292
1957: IFFALSE 2569
1959: GO 1961
1961: DISABLE
1962: LD_INT 0
1964: PPUSH
1965: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1966: LD_EXP 57
1970: PPUSH
1971: CALL_OW 87
// DialogueOn ;
1975: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1979: LD_ADDR_VAR 0 1
1983: PUSH
1984: LD_INT 22
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 21
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PPUSH
2008: CALL_OW 69
2012: PPUSH
2013: LD_EXP 57
2017: PPUSH
2018: CALL_OW 74
2022: ST_TO_ADDR
// if nearUnit = Burlak then
2023: LD_VAR 0 1
2027: PUSH
2028: LD_EXP 49
2032: EQUAL
2033: IFFALSE 2395
// begin Say ( Burlak , D3-Bur-1 ) ;
2035: LD_EXP 49
2039: PPUSH
2040: LD_STRING D3-Bur-1
2042: PPUSH
2043: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2047: LD_EXP 57
2051: PPUSH
2052: LD_STRING D3-Gny-1
2054: PPUSH
2055: CALL_OW 88
// if apeWithRadioKiller then
2059: LD_EXP 11
2063: IFFALSE 2103
// begin if apeWithRadioKiller = Burlak then
2065: LD_EXP 11
2069: PUSH
2070: LD_EXP 49
2074: EQUAL
2075: IFFALSE 2091
// Say ( Burlak , D3-Bur-2 ) else
2077: LD_EXP 49
2081: PPUSH
2082: LD_STRING D3-Bur-2
2084: PPUSH
2085: CALL_OW 88
2089: GO 2103
// Say ( Burlak , D3-Bur-2a ) ;
2091: LD_EXP 49
2095: PPUSH
2096: LD_STRING D3-Bur-2a
2098: PPUSH
2099: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2103: LD_EXP 49
2107: PPUSH
2108: LD_STRING D3-Bur-2b
2110: PPUSH
2111: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: EQUAL
2147: PUSH
2148: LD_EXP 14
2152: NOT
2153: AND
2154: IFFALSE 2206
// begin Say ( Burlak , D3-Bur-2c ) ;
2156: LD_EXP 49
2160: PPUSH
2161: LD_STRING D3-Bur-2c
2163: PPUSH
2164: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2168: LD_EXP 57
2172: PPUSH
2173: LD_STRING D3-Gny-2
2175: PPUSH
2176: CALL_OW 88
// DialogueOff ;
2180: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2184: LD_EXP 57
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 235
// gnyevkoSaved = true ;
2196: LD_ADDR_EXP 12
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
// exit ;
2204: GO 2569
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2206: LD_INT 22
2208: PUSH
2209: LD_INT 3
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 21
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PPUSH
2230: CALL_OW 69
2234: PUSH
2235: LD_INT 1
2237: GREATER
2238: PUSH
2239: LD_EXP 14
2243: OR
2244: PUSH
2245: LD_EXP 22
2249: NOT
2250: AND
2251: IFFALSE 2303
// begin Say ( Burlak , D3-Bur-2d ) ;
2253: LD_EXP 49
2257: PPUSH
2258: LD_STRING D3-Bur-2d
2260: PPUSH
2261: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2265: LD_EXP 57
2269: PPUSH
2270: LD_STRING D3-Gny-2
2272: PPUSH
2273: CALL_OW 88
// DialogueOff ;
2277: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2281: LD_EXP 57
2285: PPUSH
2286: LD_INT 3
2288: PPUSH
2289: CALL_OW 235
// gnyevkoSaved = true ;
2293: LD_ADDR_EXP 12
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// exit ;
2301: GO 2569
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2303: LD_INT 22
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 21
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: GREATER
2335: PUSH
2336: LD_EXP 22
2340: AND
2341: IFFALSE 2393
// begin Say ( Burlak , D3-Bur-2e ) ;
2343: LD_EXP 49
2347: PPUSH
2348: LD_STRING D3-Bur-2e
2350: PPUSH
2351: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2355: LD_EXP 57
2359: PPUSH
2360: LD_STRING D3-Gny-2
2362: PPUSH
2363: CALL_OW 88
// DialogueOff ;
2367: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2371: LD_EXP 57
2375: PPUSH
2376: LD_INT 3
2378: PPUSH
2379: CALL_OW 235
// gnyevkoSaved = true ;
2383: LD_ADDR_EXP 12
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// exit ;
2391: GO 2569
// end ; end else
2393: GO 2569
// begin if GetSex ( nearUnit ) = sex_male then
2395: LD_VAR 0 1
2399: PPUSH
2400: CALL_OW 258
2404: PUSH
2405: LD_INT 1
2407: EQUAL
2408: IFFALSE 2424
// Say ( nearUnit , D3-RSol1-1 ) else
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_STRING D3-RSol1-1
2417: PPUSH
2418: CALL_OW 88
2422: GO 2436
// Say ( nearUnit , D3-RFSol1-1 ) ;
2424: LD_VAR 0 1
2428: PPUSH
2429: LD_STRING D3-RFSol1-1
2431: PPUSH
2432: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2436: LD_EXP 57
2440: PPUSH
2441: LD_STRING D3-Gny-1
2443: PPUSH
2444: CALL_OW 88
// if apeWithRadioKiller then
2448: LD_EXP 11
2452: IFFALSE 2492
// begin if apeWithRadioKiller = Burlak then
2454: LD_EXP 11
2458: PUSH
2459: LD_EXP 49
2463: EQUAL
2464: IFFALSE 2480
// Say ( Burlak , D3-Bur-2 ) else
2466: LD_EXP 49
2470: PPUSH
2471: LD_STRING D3-Bur-2
2473: PPUSH
2474: CALL_OW 88
2478: GO 2492
// Say ( Burlak , D3-Bur-2a ) ;
2480: LD_EXP 49
2484: PPUSH
2485: LD_STRING D3-Bur-2a
2487: PPUSH
2488: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 258
2501: PUSH
2502: LD_INT 1
2504: EQUAL
2505: IFFALSE 2521
// Say ( nearUnit , D3-RSol1-2 ) else
2507: LD_VAR 0 1
2511: PPUSH
2512: LD_STRING D3-RSol1-2
2514: PPUSH
2515: CALL_OW 88
2519: GO 2533
// Say ( nearUnit , D3-RFSol1-2 ) ;
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_STRING D3-RFSol1-2
2528: PPUSH
2529: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2533: LD_EXP 57
2537: PPUSH
2538: LD_STRING D3-Gny-2a
2540: PPUSH
2541: CALL_OW 88
// DialogueOff ;
2545: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2549: LD_EXP 57
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL_OW 235
// gnyevkoSaved = true ;
2561: LD_ADDR_EXP 12
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// end ; end ;
2569: PPOPN 2
2571: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2572: LD_EXP 12
2576: NOT
2577: PUSH
2578: LD_EXP 21
2582: NOT
2583: OR
2584: IFFALSE 2779
2586: GO 2588
2588: DISABLE
2589: LD_INT 0
2591: PPUSH
// begin enable ;
2592: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2593: LD_EXP 12
2597: NOT
2598: PUSH
2599: LD_EXP 43
2603: PUSH
2604: LD_INT 70
2606: GREATER
2607: AND
2608: IFFALSE 2686
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2610: LD_ADDR_VAR 0 1
2614: PUSH
2615: LD_INT 22
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 25
2627: PUSH
2628: LD_INT 12
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2684
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_EXP 57
2656: PPUSH
2657: CALL_OW 250
2661: PPUSH
2662: LD_EXP 57
2666: PPUSH
2667: CALL_OW 251
2671: PPUSH
2672: LD_INT 10
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL 9015 0 5
2682: GO 2644
2684: POP
2685: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2686: LD_EXP 21
2690: NOT
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_INT 70
2699: GREATER
2700: AND
2701: IFFALSE 2779
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2703: LD_ADDR_VAR 0 1
2707: PUSH
2708: LD_INT 22
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 25
2720: PUSH
2721: LD_INT 12
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2777
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2740: LD_VAR 0 1
2744: PPUSH
2745: LD_EXP 56
2749: PPUSH
2750: CALL_OW 250
2754: PPUSH
2755: LD_EXP 56
2759: PPUSH
2760: CALL_OW 251
2764: PPUSH
2765: LD_INT 10
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL 9015 0 5
2775: GO 2737
2777: POP
2778: POP
// end ;
2779: PPOPN 1
2781: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2782: LD_EXP 12
2786: NOT
2787: PUSH
2788: LD_EXP 21
2792: NOT
2793: OR
2794: IFFALSE 2905
2796: GO 2798
2798: DISABLE
// begin enable ;
2799: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2800: LD_EXP 12
2804: NOT
2805: PUSH
2806: LD_EXP 43
2810: PUSH
2811: LD_INT 0
2813: GREATER
2814: AND
2815: IFFALSE 2831
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2817: LD_ADDR_EXP 43
2821: PUSH
2822: LD_EXP 43
2826: PUSH
2827: LD_INT 35
2829: MINUS
2830: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2831: LD_EXP 56
2835: PPUSH
2836: CALL_OW 305
2840: PUSH
2841: LD_EXP 21
2845: NOT
2846: AND
2847: PUSH
2848: LD_EXP 44
2852: PUSH
2853: LD_INT 0
2855: GREATER
2856: AND
2857: IFFALSE 2873
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2859: LD_ADDR_EXP 44
2863: PUSH
2864: LD_EXP 44
2868: PUSH
2869: LD_INT 35
2871: MINUS
2872: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2873: LD_EXP 56
2877: PPUSH
2878: CALL_OW 305
2882: PUSH
2883: LD_EXP 21
2887: NOT
2888: AND
2889: IFFALSE 2905
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2891: LD_ADDR_EXP 29
2895: PUSH
2896: LD_EXP 29
2900: PUSH
2901: LD_INT 35
2903: PLUS
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2906: LD_INT 3
2908: PPUSH
2909: LD_EXP 50
2913: PPUSH
2914: CALL_OW 292
2918: PUSH
2919: LD_INT 6
2921: PPUSH
2922: LD_EXP 49
2926: PPUSH
2927: CALL_OW 292
2931: OR
2932: PUSH
2933: LD_EXP 57
2937: PPUSH
2938: CALL_OW 255
2942: PUSH
2943: LD_INT 3
2945: EQUAL
2946: PUSH
2947: LD_INT 6
2949: PPUSH
2950: LD_EXP 57
2954: PPUSH
2955: CALL_OW 292
2959: AND
2960: OR
2961: PUSH
2962: LD_EXP 14
2966: NOT
2967: AND
2968: IFFALSE 3821
2970: GO 2972
2972: DISABLE
// begin enable ;
2973: ENABLE
// InGameOn ;
2974: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2978: LD_EXP 50
2982: PPUSH
2983: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2987: LD_EXP 57
2991: PPUSH
2992: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2996: LD_EXP 49
3000: PUSH
3001: LD_EXP 57
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 200
// DialogueOn ;
3014: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3018: LD_EXP 13
3022: IFFALSE 3286
// begin meetPokryshkin = true ;
3024: LD_ADDR_EXP 14
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3032: LD_INT 6
3034: PPUSH
3035: LD_INT 3
3037: PPUSH
3038: CALL_OW 343
// DialogueOff ;
3042: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3046: LD_EXP 49
3050: PPUSH
3051: LD_EXP 50
3055: PPUSH
3056: CALL_OW 250
3060: PPUSH
3061: LD_EXP 50
3065: PPUSH
3066: CALL_OW 251
3070: PPUSH
3071: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3075: LD_EXP 49
3079: PPUSH
3080: LD_EXP 50
3084: PPUSH
3085: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3089: LD_EXP 50
3093: PPUSH
3094: LD_EXP 49
3098: PPUSH
3099: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3103: LD_EXP 57
3107: PPUSH
3108: LD_STRING D4-Gny-3
3110: PPUSH
3111: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3115: LD_EXP 49
3119: PPUSH
3120: LD_STRING D4-Bur-3
3122: PPUSH
3123: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3127: LD_EXP 50
3131: PPUSH
3132: LD_STRING D4-Pok-4
3134: PPUSH
3135: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3139: LD_EXP 45
3143: PPUSH
3144: LD_INT 18
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 49
// wait ( 0 0$2 ) ;
3154: LD_INT 70
3156: PPUSH
3157: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3161: LD_EXP 49
3165: PPUSH
3166: LD_STRING D4-Bur-4
3168: PPUSH
3169: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3173: LD_EXP 50
3177: PPUSH
3178: LD_STRING D4-Pok-5
3180: PPUSH
3181: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3185: LD_EXP 45
3189: PPUSH
3190: LD_STRING D4-Sol1-5
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3209: LD_EXP 50
3213: PPUSH
3214: LD_STRING D4-Pok-6
3216: PPUSH
3217: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3221: LD_EXP 50
3225: PPUSH
3226: LD_STRING D4-Pok-6a
3228: PPUSH
3229: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3233: LD_EXP 49
3237: PPUSH
3238: LD_STRING D4-Bur-6
3240: PPUSH
3241: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3245: LD_EXP 50
3249: PPUSH
3250: LD_STRING D4-Pok-7
3252: PPUSH
3253: CALL_OW 88
// DialogueOff ;
3257: CALL_OW 7
// InGameOff ;
3261: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3265: LD_STRING M2
3267: PPUSH
3268: CALL_OW 337
// goToHill = true ;
3272: LD_ADDR_EXP 15
3276: PUSH
3277: LD_INT 1
3279: ST_TO_ADDR
// MoveToHill ;
3280: CALL 10895 0 0
// exit ;
3284: GO 3821
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3286: LD_EXP 49
3290: PUSH
3291: LD_EXP 57
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3304: LD_EXP 50
3308: PPUSH
3309: LD_STRING D4-Pok-1
3311: PPUSH
3312: CALL_OW 88
// if GetDistUnits ( Gnyevko , Pokryshkin ) <= 15 and GetDistUnits ( Burlak , Pokryshkin ) > 20 then
3316: LD_EXP 57
3320: PPUSH
3321: LD_EXP 50
3325: PPUSH
3326: CALL_OW 296
3330: PUSH
3331: LD_INT 15
3333: LESSEQUAL
3334: PUSH
3335: LD_EXP 49
3339: PPUSH
3340: LD_EXP 50
3344: PPUSH
3345: CALL_OW 296
3349: PUSH
3350: LD_INT 20
3352: GREATER
3353: AND
3354: IFFALSE 3464
// begin ComWalk ( Gnyevko ) ;
3356: LD_EXP 57
3360: PPUSH
3361: CALL_OW 138
// Say ( Gnyevko , D4-Gny-1 ) ;
3365: LD_EXP 57
3369: PPUSH
3370: LD_STRING D4-Gny-1
3372: PPUSH
3373: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-2 ) ;
3377: LD_EXP 50
3381: PPUSH
3382: LD_STRING D4-Pok-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3389: LD_EXP 57
3393: PPUSH
3394: LD_STRING D4-Gny-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3401: LD_EXP 50
3405: PPUSH
3406: LD_STRING D4-Pok-3
3408: PPUSH
3409: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3413: LD_ADDR_EXP 13
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3421: LD_EXP 57
3425: PPUSH
3426: LD_INT 6
3428: PPUSH
3429: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3433: LD_EXP 57
3437: PPUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_EXP 50
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: CALL_OW 171
// end else
3462: GO 3813
// begin meetPokryshkin = true ;
3464: LD_ADDR_EXP 14
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3472: LD_INT 6
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: CALL_OW 343
// DialogueOff ;
3482: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3486: LD_EXP 57
3490: PPUSH
3491: CALL_OW 255
3495: PUSH
3496: LD_INT 3
3498: EQUAL
3499: PUSH
3500: LD_EXP 57
3504: PPUSH
3505: CALL_OW 302
3509: AND
3510: IFFALSE 3587
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3512: LD_EXP 49
3516: PUSH
3517: LD_EXP 57
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PPUSH
3526: LD_EXP 50
3530: PPUSH
3531: CALL_OW 250
3535: PPUSH
3536: LD_EXP 50
3540: PPUSH
3541: CALL_OW 251
3545: PPUSH
3546: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3550: LD_EXP 49
3554: PUSH
3555: LD_EXP 57
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: LD_EXP 50
3568: PPUSH
3569: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3573: LD_EXP 57
3577: PPUSH
3578: LD_INT 6
3580: PPUSH
3581: CALL_OW 235
// end else
3585: GO 3630
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3587: LD_EXP 49
3591: PPUSH
3592: LD_EXP 50
3596: PPUSH
3597: CALL_OW 250
3601: PPUSH
3602: LD_EXP 50
3606: PPUSH
3607: CALL_OW 251
3611: PPUSH
3612: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3616: LD_EXP 49
3620: PPUSH
3621: LD_EXP 50
3625: PPUSH
3626: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3630: LD_EXP 50
3634: PPUSH
3635: LD_EXP 49
3639: PPUSH
3640: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3644: LD_EXP 49
3648: PPUSH
3649: LD_STRING D4-Bur-3
3651: PPUSH
3652: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3656: LD_EXP 50
3660: PPUSH
3661: LD_STRING D4-Pok-4
3663: PPUSH
3664: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3668: LD_EXP 45
3672: PPUSH
3673: LD_INT 18
3675: PPUSH
3676: LD_INT 1
3678: PPUSH
3679: CALL_OW 49
// wait ( 0 0$2 ) ;
3683: LD_INT 70
3685: PPUSH
3686: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3690: LD_EXP 49
3694: PPUSH
3695: LD_STRING D4-Bur-4
3697: PPUSH
3698: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3702: LD_EXP 50
3706: PPUSH
3707: LD_STRING D4-Pok-5
3709: PPUSH
3710: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3714: LD_EXP 45
3718: PPUSH
3719: LD_STRING D4-Sol1-5
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3738: LD_EXP 50
3742: PPUSH
3743: LD_STRING D4-Pok-6
3745: PPUSH
3746: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3750: LD_EXP 50
3754: PPUSH
3755: LD_STRING D4-Pok-6a
3757: PPUSH
3758: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3762: LD_EXP 49
3766: PPUSH
3767: LD_STRING D4-Bur-6
3769: PPUSH
3770: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3774: LD_EXP 50
3778: PPUSH
3779: LD_STRING D4-Pok-7
3781: PPUSH
3782: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3786: LD_STRING M2
3788: PPUSH
3789: CALL_OW 337
// goToHill = true ;
3793: LD_ADDR_EXP 15
3797: PUSH
3798: LD_INT 1
3800: ST_TO_ADDR
// DialogueOff ;
3801: CALL_OW 7
// InGameOff ;
3805: CALL_OW 9
// MoveToHill ;
3809: CALL 10895 0 0
// end ; DialogueOff ;
3813: CALL_OW 7
// InGameOff ;
3817: CALL_OW 9
// end ;
3821: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3822: LD_EXP 49
3826: PPUSH
3827: LD_EXP 50
3831: PPUSH
3832: CALL_OW 296
3836: PUSH
3837: LD_INT 10
3839: GREATER
3840: PUSH
3841: LD_EXP 15
3845: AND
3846: PUSH
3847: LD_EXP 18
3851: NOT
3852: AND
3853: IFFALSE 4054
3855: GO 3857
3857: DISABLE
3858: LD_INT 0
3860: PPUSH
// begin enable ;
3861: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3862: LD_ADDR_VAR 0 1
3866: PUSH
3867: LD_EXP 50
3871: PUSH
3872: LD_EXP 51
3876: PUSH
3877: LD_EXP 52
3881: PUSH
3882: LD_EXP 53
3886: PUSH
3887: LD_EXP 54
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3899: LD_EXP 57
3903: PPUSH
3904: CALL_OW 255
3908: PUSH
3909: LD_INT 6
3911: EQUAL
3912: PUSH
3913: LD_EXP 12
3917: AND
3918: IFFALSE 3936
// ruSolds = ruSolds ^ Gnyevko ;
3920: LD_ADDR_VAR 0 1
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_EXP 57
3934: ADD
3935: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3945: LD_EXP 49
3949: PPUSH
3950: CALL_OW 87
// DialogueOn ;
3954: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3958: LD_EXP 50
3962: PPUSH
3963: LD_STRING DSplit-Pok-1
3965: PPUSH
3966: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3970: LD_EXP 49
3974: PPUSH
3975: LD_STRING DSplit-Bur-1
3977: PPUSH
3978: CALL_OW 88
// DialogueOff ;
3982: CALL_OW 7
// InGameOn ;
3986: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3990: LD_EXP 49
3994: PPUSH
3995: LD_EXP 50
3999: PPUSH
4000: CALL_OW 250
4004: PPUSH
4005: LD_EXP 50
4009: PPUSH
4010: CALL_OW 251
4014: PPUSH
4015: CALL_OW 111
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4026: LD_EXP 49
4030: PPUSH
4031: LD_EXP 50
4035: PPUSH
4036: CALL_OW 296
4040: PUSH
4041: LD_INT 6
4043: LESS
4044: IFFALSE 3990
// InGameOff ;
4046: CALL_OW 9
// MoveToHill ;
4050: CALL 10895 0 0
// end ;
4054: PPOPN 1
4056: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
// traitor = true ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// DialogueOn ;
4069: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4073: LD_EXP 50
4077: PPUSH
4078: LD_STRING DAttack-Pok-1
4080: PPUSH
4081: CALL_OW 88
// DialogueOff ;
4085: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 6
4094: PPUSH
4095: LD_INT 2
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4105: LD_INT 22
4107: PUSH
4108: LD_INT 6
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PPUSH
4134: LD_EXP 49
4138: PPUSH
4139: CALL_OW 115
// end ;
4143: LD_VAR 0 1
4147: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4148: LD_EXP 50
4152: PPUSH
4153: LD_INT 65
4155: PPUSH
4156: LD_INT 59
4158: PPUSH
4159: CALL_OW 297
4163: PUSH
4164: LD_INT 4
4166: LESS
4167: PUSH
4168: LD_EXP 18
4172: NOT
4173: AND
4174: IFFALSE 4371
4176: GO 4178
4178: DISABLE
// begin InGameOn ;
4179: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4183: LD_INT 55
4185: PPUSH
4186: LD_INT 50
4188: PPUSH
4189: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4193: LD_EXP 49
4197: PPUSH
4198: LD_INT 66
4200: PPUSH
4201: LD_INT 57
4203: PPUSH
4204: CALL_OW 111
// AddComHold ( Burlak ) ;
4208: LD_EXP 49
4212: PPUSH
4213: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4217: LD_EXP 45
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: LD_INT 55
4227: PPUSH
4228: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4232: LD_INT 35
4234: PPUSH
4235: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_EXP 50
4246: PPUSH
4247: CALL_OW 292
4251: IFFALSE 4232
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4253: LD_EXP 45
4257: PUSH
4258: LD_EXP 50
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 87
// ComStop ( Charles ) ;
4271: LD_EXP 45
4275: PPUSH
4276: CALL_OW 141
// AddComHold ( Charles ) ;
4280: LD_EXP 45
4284: PPUSH
4285: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4289: LD_EXP 45
4293: PPUSH
4294: LD_EXP 50
4298: PPUSH
4299: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4303: LD_EXP 45
4307: PPUSH
4308: LD_STRING D5-Sol1-1
4310: PPUSH
4311: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4315: LD_EXP 50
4319: PPUSH
4320: LD_STRING D5-Pok-1
4322: PPUSH
4323: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4327: LD_INT 1
4329: PPUSH
4330: LD_INT 6
4332: PPUSH
4333: LD_INT 2
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4343: LD_INT 1
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: LD_INT 2
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4359: LD_EXP 45
4363: PPUSH
4364: LD_STRING D5-Sol1-2
4366: PPUSH
4367: CALL_OW 88
// end ;
4371: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4372: LD_EXP 45
4376: PPUSH
4377: CALL_OW 301
4381: PUSH
4382: LD_EXP 15
4386: AND
4387: IFFALSE 4978
4389: GO 4391
4391: DISABLE
4392: LD_INT 0
4394: PPUSH
// begin InGameOn ;
4395: CALL_OW 8
// goToHill = false ;
4399: LD_ADDR_EXP 15
4403: PUSH
4404: LD_INT 0
4406: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 6
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PPUSH
4436: CALL_OW 141
// wait ( 0 0$1 ) ;
4440: LD_INT 35
4442: PPUSH
4443: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4447: LD_INT 22
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 21
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PPUSH
4476: CALL_OW 138
// wait ( 0 0$1 ) ;
4480: LD_INT 35
4482: PPUSH
4483: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4487: LD_INT 55
4489: PPUSH
4490: LD_INT 50
4492: PPUSH
4493: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4497: LD_EXP 49
4501: PPUSH
4502: LD_INT 56
4504: PPUSH
4505: LD_INT 56
4507: PPUSH
4508: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4512: LD_INT 22
4514: PUSH
4515: LD_INT 6
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 1
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_INT 56
4543: PPUSH
4544: LD_INT 56
4546: PPUSH
4547: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4551: LD_EXP 49
4555: PPUSH
4556: LD_STRING D5-Bur-2
4558: PPUSH
4559: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4563: LD_EXP 50
4567: PPUSH
4568: LD_STRING D5-Pok-2
4570: PPUSH
4571: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4575: LD_EXP 54
4579: PPUSH
4580: LD_STRING D5-Bel-2
4582: PPUSH
4583: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4587: LD_EXP 50
4591: PPUSH
4592: LD_STRING D5-Pok-3
4594: PPUSH
4595: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4599: LD_EXP 57
4603: PPUSH
4604: CALL_OW 255
4608: PUSH
4609: LD_INT 6
4611: EQUAL
4612: IFFALSE 4626
// Say ( Gnyevko , D5-Gny-3 ) ;
4614: LD_EXP 57
4618: PPUSH
4619: LD_STRING D5-Gny-3
4621: PPUSH
4622: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4626: LD_EXP 49
4630: PPUSH
4631: LD_STRING D5-Bur-3
4633: PPUSH
4634: CALL_OW 88
// interface_hidden = true ;
4638: LD_ADDR_OWVAR 54
4642: PUSH
4643: LD_INT 1
4645: ST_TO_ADDR
// IngameOff ;
4646: CALL_OW 9
// wait ( 0 0$2 ) ;
4650: LD_INT 70
4652: PPUSH
4653: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4657: LD_EXP 49
4661: PPUSH
4662: LD_INT 85
4664: PPUSH
4665: LD_INT 64
4667: PPUSH
4668: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4672: LD_INT 22
4674: PUSH
4675: LD_INT 6
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: PPUSH
4701: LD_INT 85
4703: PPUSH
4704: LD_INT 64
4706: PPUSH
4707: CALL_OW 111
// interface_hidden = false ;
4711: LD_ADDR_OWVAR 54
4715: PUSH
4716: LD_INT 0
4718: ST_TO_ADDR
// InGameOn ;
4719: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4723: LD_EXP 49
4727: PPUSH
4728: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4732: LD_EXP 50
4736: PPUSH
4737: LD_STRING D6-Pok-1
4739: PPUSH
4740: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4744: LD_EXP 49
4748: PPUSH
4749: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4753: LD_EXP 49
4757: PPUSH
4758: LD_STRING D6-Bur-1
4760: PPUSH
4761: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4765: LD_EXP 49
4769: PPUSH
4770: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4774: LD_EXP 50
4778: PPUSH
4779: LD_STRING D6-Pok-2
4781: PPUSH
4782: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4786: LD_EXP 49
4790: PPUSH
4791: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4795: LD_EXP 54
4799: PPUSH
4800: LD_STRING D6-Bel-2
4802: PPUSH
4803: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4807: LD_EXP 49
4811: PPUSH
4812: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4816: LD_EXP 49
4820: PPUSH
4821: LD_STRING D6-Bur-2
4823: PPUSH
4824: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4828: LD_EXP 49
4832: PPUSH
4833: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4837: LD_EXP 50
4841: PPUSH
4842: LD_STRING D6-Pok-3
4844: PPUSH
4845: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4849: LD_EXP 49
4853: PPUSH
4854: CALL_OW 87
// SayRadioNoFace ( Kurin , D6-Kur-3 ) ;
4858: LD_EXP 58
4862: PPUSH
4863: LD_STRING D6-Kur-3
4865: PPUSH
4866: CALL_OW 586
// CenterNowOnUnits ( Burlak ) ;
4870: LD_EXP 49
4874: PPUSH
4875: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING D6-Pok-4
4886: PPUSH
4887: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4891: LD_EXP 49
4895: PPUSH
4896: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4900: LD_EXP 54
4904: PPUSH
4905: LD_STRING D6-Bel-4
4907: PPUSH
4908: CALL_OW 88
// InGameOff ;
4912: CALL_OW 9
// interface_hidden = false ;
4916: LD_ADDR_OWVAR 54
4920: PUSH
4921: LD_INT 0
4923: ST_TO_ADDR
// ComMoveToArea ( Pokryshkin , PokryszkinAttack ) ;
4924: LD_EXP 50
4928: PPUSH
4929: LD_INT 27
4931: PPUSH
4932: CALL_OW 113
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , PokryszkinAttack ) ;
4936: LD_INT 22
4938: PUSH
4939: LD_INT 6
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PPUSH
4960: CALL_OW 69
4964: PUSH
4965: LD_EXP 50
4969: DIFF
4970: PPUSH
4971: LD_INT 27
4973: PPUSH
4974: CALL_OW 113
// end ;
4978: PPOPN 1
4980: END
// every 0 0$1 trigger IsInArea ( Pokryshkin , PokryszkinAttack ) do
4981: LD_EXP 50
4985: PPUSH
4986: LD_INT 27
4988: PPUSH
4989: CALL_OW 308
4993: IFFALSE 5076
4995: GO 4997
4997: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4998: LD_EXP 50
5002: PPUSH
5003: LD_STRING D7-Pok-1
5005: PPUSH
5006: CALL_OW 88
// AddComAttackUnit ( Pokryshkin , am_bun ) ;
5010: LD_EXP 50
5014: PPUSH
5015: LD_INT 23
5017: PPUSH
5018: CALL_OW 175
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , am_bun ) ;
5022: LD_INT 22
5024: PUSH
5025: LD_INT 6
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 21
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: CALL_OW 69
5050: PUSH
5051: LD_EXP 50
5055: DIFF
5056: PPUSH
5057: LD_INT 23
5059: PPUSH
5060: CALL_OW 175
// DoNotAttack ( 1 , Gnyevko ) ;
5064: LD_INT 1
5066: PPUSH
5067: LD_EXP 57
5071: PPUSH
5072: CALL_OW 471
// end ;
5076: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5077: LD_INT 1
5079: PPUSH
5080: LD_EXP 50
5084: PPUSH
5085: CALL_OW 292
5089: PUSH
5090: LD_EXP 45
5094: PPUSH
5095: CALL_OW 301
5099: AND
5100: IFFALSE 5119
5102: GO 5104
5104: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5105: LD_EXP 46
5109: PPUSH
5110: LD_EXP 50
5114: PPUSH
5115: CALL_OW 115
5119: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 23
5125: PPUSH
5126: CALL_OW 292
5130: IFFALSE 5147
5132: GO 5134
5134: DISABLE
// begin Say ( Johanna , D7-FSol1-1 ) ;
5135: LD_EXP 46
5139: PPUSH
5140: LD_STRING D7-FSol1-1
5142: PPUSH
5143: CALL_OW 88
// end ;
5147: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5148: LD_EXP 50
5152: PPUSH
5153: CALL_OW 303
5157: IFFALSE 5689
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 6
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 21
5184: PUSH
5185: LD_INT 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 50
5194: PUSH
5195: EMPTY
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 69
5207: PUSH
5208: LD_EXP 54
5212: DIFF
5213: ST_TO_ADDR
// DialogueOn ;
5214: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5218: LD_EXP 54
5222: PPUSH
5223: LD_STRING D7a-Bel-1
5225: PPUSH
5226: CALL_OW 88
// DialogueOff ;
5230: CALL_OW 7
// for i := 1 to ruSolds do
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5308
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5252: LD_VAR 0 3
5256: PUSH
5257: LD_VAR 0 1
5261: ARRAY
5262: PPUSH
5263: LD_INT 87
5265: PUSH
5266: LD_VAR 0 1
5270: PLUS
5271: PPUSH
5272: LD_INT 63
5274: PUSH
5275: LD_VAR 0 1
5279: PLUS
5280: PPUSH
5281: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5285: LD_VAR 0 3
5289: PUSH
5290: LD_VAR 0 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 89
5298: PPUSH
5299: LD_INT 67
5301: PPUSH
5302: CALL_OW 178
// end ;
5306: GO 5249
5308: POP
5309: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5310: LD_EXP 54
5314: PPUSH
5315: LD_INT 89
5317: PPUSH
5318: LD_INT 67
5320: PPUSH
5321: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5325: LD_EXP 54
5329: PPUSH
5330: LD_INT 88
5332: PPUSH
5333: LD_INT 66
5335: PPUSH
5336: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5340: LD_EXP 51
5344: PPUSH
5345: LD_STRING D7a-RSol1-1
5347: PPUSH
5348: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5352: LD_EXP 46
5356: PPUSH
5357: LD_STRING D7a-FSol1-1
5359: PPUSH
5360: CALL_OW 88
// wait ( 0 0$12 ) ;
5364: LD_INT 420
5366: PPUSH
5367: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5371: LD_EXP 54
5375: PPUSH
5376: LD_STRING D7b-Bel-1
5378: PPUSH
5379: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5383: LD_EXP 52
5387: PPUSH
5388: LD_STRING D7b-FSol1-1
5390: PPUSH
5391: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5395: LD_EXP 54
5399: PPUSH
5400: LD_STRING D7b-Bel-2
5402: PPUSH
5403: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5407: LD_EXP 51
5411: PPUSH
5412: LD_STRING D7b-RSol1-2
5414: PPUSH
5415: CALL_OW 88
// for unit in ruSolds do
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 3
5428: PUSH
5429: FOR_IN
5430: IFFALSE 5663
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5432: LD_EXP 49
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 296
5446: PUSH
5447: LD_INT 7
5449: LESS
5450: IFFALSE 5661
// begin InGameOn ;
5452: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5456: LD_EXP 54
5460: PUSH
5461: LD_EXP 51
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5474: LD_EXP 49
5478: PPUSH
5479: LD_INT 88
5481: PPUSH
5482: LD_INT 66
5484: PPUSH
5485: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5489: LD_EXP 54
5493: PPUSH
5494: LD_EXP 49
5498: PPUSH
5499: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5503: LD_EXP 49
5507: PPUSH
5508: LD_INT 90
5510: PPUSH
5511: LD_INT 66
5513: PPUSH
5514: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5518: LD_EXP 49
5522: PPUSH
5523: LD_STRING D7b-Bur-3
5525: PPUSH
5526: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5530: LD_EXP 54
5534: PPUSH
5535: LD_STRING D7b-Bel-4
5537: PPUSH
5538: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5542: LD_EXP 49
5546: PPUSH
5547: LD_STRING D7b-Bur-4
5549: PPUSH
5550: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5554: LD_EXP 54
5558: PPUSH
5559: LD_STRING D7b-Bel-5
5561: PPUSH
5562: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5566: LD_EXP 52
5570: PPUSH
5571: LD_STRING D7b-FSol1-5
5573: PPUSH
5574: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5578: LD_EXP 54
5582: PPUSH
5583: LD_STRING D7b-Bel-6
5585: PPUSH
5586: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING D7b-Bur-6
5597: PPUSH
5598: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5602: LD_EXP 51
5606: PPUSH
5607: LD_STRING D7b-RSol1-6
5609: PPUSH
5610: CALL_OW 88
// InGameOff ;
5614: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5630: LD_EXP 54
5634: PPUSH
5635: LD_INT 3
5637: PPUSH
5638: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5642: LD_STRING M3
5644: PPUSH
5645: CALL_OW 337
// secondAttack = true ;
5649: LD_ADDR_EXP 17
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// exit ;
5657: POP
5658: POP
5659: GO 5689
// end ;
5661: GO 5429
5663: POP
5664: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5665: LD_EXP 54
5669: PPUSH
5670: LD_STRING D7b-Bel-3
5672: PPUSH
5673: CALL_OW 88
// InGameOff ;
5677: CALL_OW 9
// belkovWaitForGorky = true ;
5681: LD_ADDR_EXP 16
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// end ;
5689: PPOPN 3
5691: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5692: LD_EXP 16
5696: PUSH
5697: LD_EXP 18
5701: NOT
5702: AND
5703: IFFALSE 6013
5705: GO 5707
5707: DISABLE
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
// begin enable ;
5712: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 21
5730: PUSH
5731: LD_INT 1
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PPUSH
5742: CALL_OW 69
5746: ST_TO_ADDR
// for unit in ruSolds do
5747: LD_ADDR_VAR 0 1
5751: PUSH
5752: LD_VAR 0 2
5756: PUSH
5757: FOR_IN
5758: IFFALSE 6011
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5760: LD_EXP 49
5764: PPUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 296
5774: PUSH
5775: LD_INT 7
5777: LESS
5778: IFFALSE 6009
// begin belkovWaitForGorky = false ;
5780: LD_ADDR_EXP 16
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// InGameOn ;
5788: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5792: LD_EXP 54
5796: PUSH
5797: LD_EXP 51
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5810: LD_EXP 49
5814: PPUSH
5815: LD_INT 88
5817: PPUSH
5818: LD_INT 66
5820: PPUSH
5821: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5825: LD_EXP 54
5829: PPUSH
5830: LD_EXP 49
5834: PPUSH
5835: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5839: LD_EXP 49
5843: PPUSH
5844: LD_INT 90
5846: PPUSH
5847: LD_INT 66
5849: PPUSH
5850: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5854: LD_EXP 54
5858: PPUSH
5859: LD_STRING D7b-Bel-3a
5861: PPUSH
5862: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5866: LD_EXP 49
5870: PPUSH
5871: LD_STRING D7b-Bur-3
5873: PPUSH
5874: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5878: LD_EXP 54
5882: PPUSH
5883: LD_STRING D7b-Bel-4
5885: PPUSH
5886: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_STRING D7b-Bur-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5902: LD_EXP 54
5906: PPUSH
5907: LD_STRING D7b-Bel-5
5909: PPUSH
5910: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5914: LD_EXP 52
5918: PPUSH
5919: LD_STRING D7b-FSol1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5926: LD_EXP 54
5930: PPUSH
5931: LD_STRING D7b-Bel-6
5933: PPUSH
5934: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5938: LD_EXP 49
5942: PPUSH
5943: LD_STRING D7b-Bur-6
5945: PPUSH
5946: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5950: LD_EXP 51
5954: PPUSH
5955: LD_STRING D7a-RSol1-6
5957: PPUSH
5958: CALL_OW 88
// InGameOff ;
5962: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5978: LD_EXP 54
5982: PPUSH
5983: LD_INT 3
5985: PPUSH
5986: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5990: LD_STRING M3
5992: PPUSH
5993: CALL_OW 337
// secondAttack = true ;
5997: LD_ADDR_EXP 17
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// exit ;
6005: POP
6006: POP
6007: GO 6013
// end ;
6009: GO 5757
6011: POP
6012: POP
// end ;
6013: PPOPN 2
6015: END
// export function Dial_SecondAttack ; var units , i ; begin
6016: LD_INT 0
6018: PPUSH
6019: PPUSH
6020: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6021: LD_EXP 46
6025: PPUSH
6026: LD_STRING D8-FSol1-1
6028: PPUSH
6029: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6033: LD_EXP 47
6037: PPUSH
6038: LD_STRING D8-Glad-1
6040: PPUSH
6041: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6045: LD_EXP 49
6049: PPUSH
6050: LD_STRING D8-Bur-1
6052: PPUSH
6053: CALL_OW 88
// secondAttack = false ;
6057: LD_ADDR_EXP 17
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// units = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 1
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6099: LD_EXP 48
6103: PPUSH
6104: CALL_OW 122
// wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i in amApemans do
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: LD_EXP 48
6131: PUSH
6132: FOR_IN
6133: IFFALSE 6199
// begin if rand ( 0 , 1 ) then
6135: LD_INT 0
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 12
6145: IFFALSE 6173
// ComAttackUnit ( i , NearestUnitToUnit ( units , i ) ) else
6147: LD_VAR 0 3
6151: PPUSH
6152: LD_VAR 0 2
6156: PPUSH
6157: LD_VAR 0 3
6161: PPUSH
6162: CALL_OW 74
6166: PPUSH
6167: CALL_OW 115
6171: GO 6197
// ComAttackUnit ( i , SecondNearestUnitToUnit ( units , i ) ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_VAR 0 2
6182: PPUSH
6183: LD_VAR 0 3
6187: PPUSH
6188: CALL 6224 0 2
6192: PPUSH
6193: CALL_OW 115
// end ;
6197: GO 6132
6199: POP
6200: POP
// until not UnitFilter ( amApemans , [ f_ok ] ) ;
6201: LD_EXP 48
6205: PPUSH
6206: LD_INT 50
6208: PUSH
6209: EMPTY
6210: LIST
6211: PPUSH
6212: CALL_OW 72
6216: NOT
6217: IFFALSE 6115
// end ;
6219: LD_VAR 0 1
6223: RET
// export function SecondNearestUnitToUnit ( group , unit ) ; var tmp ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// if group < 2 then
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 2
6235: LESS
6236: IFFALSE 6260
// begin result := NearestUnitToUnit ( group , unit ) ;
6238: LD_ADDR_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: CALL_OW 74
6257: ST_TO_ADDR
// exit ;
6258: GO 6306
// end ; tmp := NearestUnitToUnit ( group , unit ) ;
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_VAR 0 2
6274: PPUSH
6275: CALL_OW 74
6279: ST_TO_ADDR
// result := NearestUnitToUnit ( group diff tmp , unit ) ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 4
6294: DIFF
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 74
6305: ST_TO_ADDR
// end ;
6306: LD_VAR 0 3
6310: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6311: LD_INT 23
6313: PPUSH
6314: CALL_OW 256
6318: PUSH
6319: LD_INT 350
6321: LESS
6322: PUSH
6323: LD_INT 23
6325: PPUSH
6326: CALL_OW 256
6330: PUSH
6331: LD_INT 250
6333: GREATER
6334: AND
6335: PUSH
6336: LD_INT 20
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 70
6367: PUSH
6368: LD_INT 0
6370: GREATER
6371: AND
6372: PUSH
6373: LD_EXP 24
6377: NOT
6378: AND
6379: IFFALSE 6396
6381: GO 6383
6383: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING D8-FSol1-2
6391: PPUSH
6392: CALL_OW 88
6396: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6397: LD_INT 23
6399: PPUSH
6400: CALL_OW 303
6404: PUSH
6405: LD_INT 22
6407: PPUSH
6408: CALL_OW 302
6412: AND
6413: PUSH
6414: LD_EXP 24
6418: NOT
6419: AND
6420: IFFALSE 6490
6422: GO 6424
6424: DISABLE
// begin amRetreat = true ;
6425: LD_ADDR_EXP 24
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6433: LD_EXP 46
6437: PPUSH
6438: LD_STRING D8-FSol1-2a
6440: PPUSH
6441: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6445: LD_EXP 47
6449: PUSH
6450: LD_EXP 46
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: LD_INT 21
6461: PPUSH
6462: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6466: LD_EXP 47
6470: PPUSH
6471: LD_STRING D8-Glad-2
6473: PPUSH
6474: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6478: LD_EXP 49
6482: PPUSH
6483: LD_STRING D8-Bur-2
6485: PPUSH
6486: CALL_OW 88
// end ;
6490: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6491: LD_INT 22
6493: PPUSH
6494: CALL_OW 303
6498: PUSH
6499: LD_INT 23
6501: PPUSH
6502: CALL_OW 302
6506: AND
6507: PUSH
6508: LD_EXP 24
6512: NOT
6513: AND
6514: IFFALSE 6584
6516: GO 6518
6518: DISABLE
// begin amRetreat = true ;
6519: LD_ADDR_EXP 24
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6527: LD_EXP 46
6531: PPUSH
6532: LD_STRING D8-FSol1-2a
6534: PPUSH
6535: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6539: LD_EXP 47
6543: PUSH
6544: LD_EXP 46
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: LD_INT 21
6555: PPUSH
6556: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6560: LD_EXP 47
6564: PPUSH
6565: LD_STRING D8-Glad-2
6567: PPUSH
6568: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6572: LD_EXP 49
6576: PPUSH
6577: LD_STRING D8-Bur-2
6579: PPUSH
6580: CALL_OW 88
// end ;
6584: END
// every 0 0$1 trigger ( IsDead ( amApemans ) and Difficulty >= 3 ) and not amRetreat do
6585: LD_EXP 48
6589: PPUSH
6590: CALL_OW 301
6594: PUSH
6595: LD_OWVAR 67
6599: PUSH
6600: LD_INT 3
6602: GREATEREQUAL
6603: AND
6604: PUSH
6605: LD_EXP 24
6609: NOT
6610: AND
6611: IFFALSE 6681
6613: GO 6615
6615: DISABLE
// begin amRetreat = true ;
6616: LD_ADDR_EXP 24
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6624: LD_EXP 46
6628: PPUSH
6629: LD_STRING D8-FSol1-2a
6631: PPUSH
6632: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6636: LD_EXP 47
6640: PUSH
6641: LD_EXP 46
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: LD_INT 21
6652: PPUSH
6653: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6657: LD_EXP 47
6661: PPUSH
6662: LD_STRING D8-Glad-2
6664: PPUSH
6665: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6669: LD_EXP 49
6673: PPUSH
6674: LD_STRING D8-Bur-2
6676: PPUSH
6677: CALL_OW 88
// end ;
6681: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty >= 3 and not amRetreat do
6682: LD_INT 23
6684: PPUSH
6685: CALL_OW 256
6689: PUSH
6690: LD_INT 500
6692: LESS
6693: PUSH
6694: LD_OWVAR 67
6698: PUSH
6699: LD_INT 3
6701: GREATEREQUAL
6702: AND
6703: PUSH
6704: LD_EXP 24
6708: NOT
6709: AND
6710: IFFALSE 6780
6712: GO 6714
6714: DISABLE
// begin amRetreat = true ;
6715: LD_ADDR_EXP 24
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6723: LD_EXP 46
6727: PPUSH
6728: LD_STRING D8-FSol1-2a
6730: PPUSH
6731: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6735: LD_EXP 47
6739: PUSH
6740: LD_EXP 46
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PPUSH
6749: LD_INT 21
6751: PPUSH
6752: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6756: LD_EXP 47
6760: PPUSH
6761: LD_STRING D8-Glad-2
6763: PPUSH
6764: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6768: LD_EXP 49
6772: PPUSH
6773: LD_STRING D8-Bur-2
6775: PPUSH
6776: CALL_OW 88
// end ;
6780: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6781: LD_INT 22
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 1
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 50
6803: PUSH
6804: EMPTY
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PPUSH
6812: CALL_OW 69
6816: PUSH
6817: LD_INT 0
6819: GREATER
6820: IFFALSE 6948
6822: GO 6824
6824: DISABLE
6825: LD_INT 0
6827: PPUSH
// begin enable ;
6828: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: LD_INT 21
6836: PPUSH
6837: LD_INT 22
6839: PUSH
6840: LD_INT 1
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: CALL_OW 70
6865: PUSH
6866: FOR_IN
6867: IFFALSE 6946
// begin if unit = Gladstone then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_EXP 47
6878: EQUAL
6879: IFFALSE 6909
// begin gladstoneEscape = true ;
6881: LD_ADDR_EXP 19
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6889: LD_EXP 47
6893: PPUSH
6894: LD_EXP 33
6898: PUSH
6899: LD_STRING Gladstone
6901: STR
6902: PPUSH
6903: CALL_OW 38
// end else
6907: GO 6935
// begin JohannaEscape = true ;
6909: LD_ADDR_EXP 20
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6917: LD_EXP 46
6921: PPUSH
6922: LD_EXP 33
6926: PUSH
6927: LD_STRING Johanna
6929: STR
6930: PPUSH
6931: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 64
// end ;
6944: GO 6866
6946: POP
6947: POP
// end ;
6948: PPOPN 1
6950: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6951: LD_EXP 47
6955: PPUSH
6956: CALL_OW 301
6960: PUSH
6961: LD_EXP 46
6965: PPUSH
6966: CALL_OW 301
6970: AND
6971: IFFALSE 6988
6973: GO 6975
6975: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6976: LD_EXP 49
6980: PPUSH
6981: LD_STRING D9-Bur-1
6983: PPUSH
6984: CALL_OW 88
6988: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6989: LD_EXP 46
6993: PPUSH
6994: CALL_OW 301
6998: PUSH
6999: LD_EXP 19
7003: AND
7004: PUSH
7005: LD_EXP 20
7009: NOT
7010: AND
7011: IFFALSE 7028
7013: GO 7015
7015: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
7016: LD_EXP 49
7020: PPUSH
7021: LD_STRING D9-Bur-1a
7023: PPUSH
7024: CALL_OW 88
7028: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
7029: LD_EXP 47
7033: PPUSH
7034: CALL_OW 301
7038: PUSH
7039: LD_EXP 19
7043: NOT
7044: AND
7045: PUSH
7046: LD_EXP 20
7050: AND
7051: IFFALSE 7068
7053: GO 7055
7055: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
7056: LD_EXP 49
7060: PPUSH
7061: LD_STRING D9-Bur-1b
7063: PPUSH
7064: CALL_OW 88
7068: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
7069: LD_EXP 19
7073: PUSH
7074: LD_EXP 20
7078: AND
7079: IFFALSE 7096
7081: GO 7083
7083: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
7084: LD_EXP 49
7088: PPUSH
7089: LD_STRING D9-Bur-1c
7091: PPUSH
7092: CALL_OW 88
7096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
7097: LD_INT 22
7099: PUSH
7100: LD_INT 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 50
7119: PUSH
7120: EMPTY
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: IFFALSE 7384
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
7145: LD_ADDR_VAR 0 1
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 21
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 50
7172: PUSH
7173: EMPTY
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: LD_EXP 49
7190: PUSH
7191: LD_EXP 57
7195: PUSH
7196: LD_EXP 54
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: DIFF
7206: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
7207: LD_ADDR_VAR 0 2
7211: PUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 26
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: ST_TO_ADDR
// DialogueOn ;
7232: CALL_OW 6
// if IsOK ( Belkov ) then
7236: LD_EXP 54
7240: PPUSH
7241: CALL_OW 302
7245: IFFALSE 7259
// Say ( Belkov , D10-Bel-1 ) ;
7247: LD_EXP 54
7251: PPUSH
7252: LD_STRING D10-Bel-1
7254: PPUSH
7255: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7259: LD_VAR 0 1
7263: PUSH
7264: LD_INT 0
7266: GREATER
7267: PUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_INT 0
7275: GREATER
7276: PUSH
7277: LD_EXP 54
7281: PPUSH
7282: CALL_OW 302
7286: OR
7287: AND
7288: IFFALSE 7355
// begin Say ( Burlak , D10-Bur-1 ) ;
7290: LD_EXP 49
7294: PPUSH
7295: LD_STRING D10-Bur-1
7297: PPUSH
7298: CALL_OW 88
// if IsOK ( Belkov ) then
7302: LD_EXP 54
7306: PPUSH
7307: CALL_OW 302
7311: IFFALSE 7327
// Say ( Belkov , D10-Bel-1a ) else
7313: LD_EXP 54
7317: PPUSH
7318: LD_STRING D10-Bel-1a
7320: PPUSH
7321: CALL_OW 88
7325: GO 7343
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7327: LD_VAR 0 2
7331: PUSH
7332: LD_INT 1
7334: ARRAY
7335: PPUSH
7336: LD_STRING D10-RSol1-1
7338: PPUSH
7339: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7343: LD_EXP 49
7347: PPUSH
7348: LD_STRING D10-Bur-2
7350: PPUSH
7351: CALL_OW 88
// end ; DialogueOff ;
7355: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7359: LD_STRING M4a
7361: PPUSH
7362: CALL_OW 337
// evacuationAvailable = true ;
7366: LD_ADDR_EXP 22
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7374: LD_INT 1
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL_OW 424
// end ;
7384: PPOPN 2
7386: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7387: LD_EXP 22
7391: PUSH
7392: LD_EXP 25
7396: NOT
7397: AND
7398: IFFALSE 8008
7400: GO 7402
7402: DISABLE
7403: LD_INT 0
7405: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7406: LD_EXP 56
7410: PPUSH
7411: LD_INT 22
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL_OW 49
// wait ( 0 0$3 ) ;
7421: LD_INT 105
7423: PPUSH
7424: CALL_OW 67
// jelenaSpawned = true ;
7428: LD_ADDR_EXP 25
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 20 then
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 50
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 69
7471: PPUSH
7472: LD_EXP 56
7476: PPUSH
7477: CALL_OW 74
7481: PPUSH
7482: LD_EXP 56
7486: PPUSH
7487: CALL_OW 296
7491: PUSH
7492: LD_INT 20
7494: LESS
7495: IFFALSE 7499
// exit ;
7497: GO 8008
// DialogueOn ;
7499: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7503: LD_EXP 56
7507: PPUSH
7508: LD_STRING D11b-Kir-1
7510: PPUSH
7511: CALL_OW 94
// if IsOK ( Belkov ) then
7515: LD_EXP 54
7519: PPUSH
7520: CALL_OW 302
7524: IFFALSE 7552
// begin Say ( Belkov , D11b-Bel-1 ) ;
7526: LD_EXP 54
7530: PPUSH
7531: LD_STRING D11b-Bel-1
7533: PPUSH
7534: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7538: LD_EXP 54
7542: PPUSH
7543: LD_STRING D11b-Bel-1a
7545: PPUSH
7546: CALL_OW 94
// end else
7550: GO 7607
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 50
7579: PUSH
7580: EMPTY
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 69
7592: PPUSH
7593: LD_STRING D11b-RSol1-1
7595: PPUSH
7596: LD_STRING D11b-RFSol1-1
7598: PPUSH
7599: LD_INT 0
7601: PPUSH
7602: CALL 8631 0 4
7606: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7607: LD_INT 24
7609: PPUSH
7610: LD_INT 22
7612: PUSH
7613: LD_INT 0
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 25
7622: PUSH
7623: LD_INT 12
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 70
7638: PUSH
7639: LD_INT 0
7641: GREATER
7642: IFFALSE 7658
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7644: LD_EXP 56
7648: PPUSH
7649: LD_STRING D11b1-Kir-1
7651: PPUSH
7652: CALL_OW 94
7656: GO 7670
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7658: LD_EXP 56
7662: PPUSH
7663: LD_STRING D11b2-Kir-1
7665: PPUSH
7666: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7670: LD_EXP 6
7674: PUSH
7675: LD_INT 24
7677: PPUSH
7678: LD_INT 22
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 12
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 70
7706: PUSH
7707: LD_INT 0
7709: GREATER
7710: AND
7711: IFFALSE 7846
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7713: LD_EXP 49
7717: PPUSH
7718: LD_STRING D11b1-Bur-1
7720: PPUSH
7721: CALL_OW 88
// if IsOk ( Belkov ) then
7725: LD_EXP 54
7729: PPUSH
7730: CALL_OW 302
7734: IFFALSE 7750
// Say ( Belkov , D11b2-Bel-1 ) else
7736: LD_EXP 54
7740: PPUSH
7741: LD_STRING D11b2-Bel-1
7743: PPUSH
7744: CALL_OW 88
7748: GO 7791
// begin if GetSex ( randomSold ) = sex_male then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 258
7759: PUSH
7760: LD_INT 1
7762: EQUAL
7763: IFFALSE 7779
// Say ( randomSold , D11b1-RSol1-1 ) else
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_STRING D11b1-RSol1-1
7772: PPUSH
7773: CALL_OW 88
7777: GO 7791
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_STRING D11b1-RFSol1-1
7786: PPUSH
7787: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7791: LD_INT 22
7793: PUSH
7794: LD_INT 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 1
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 50
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 69
7826: PPUSH
7827: LD_STRING D11b1-RSol1-1
7829: PPUSH
7830: LD_STRING D11b1-RFSol1-1
7832: PPUSH
7833: LD_INT 0
7835: PPUSH
7836: CALL 8631 0 4
// DialogueOff ;
7840: CALL_OW 7
// exit ;
7844: GO 8008
// end ; if spotWaterfall then
7846: LD_EXP 7
7850: IFFALSE 7936
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7852: LD_EXP 49
7856: PPUSH
7857: LD_STRING D11b1-Bur-1a
7859: PPUSH
7860: CALL_OW 88
// if IsOk ( Belkov ) then
7864: LD_EXP 54
7868: PPUSH
7869: CALL_OW 302
7873: IFFALSE 7889
// Say ( Belkov , D11b2-Bel-1 ) else
7875: LD_EXP 54
7879: PPUSH
7880: LD_STRING D11b2-Bel-1
7882: PPUSH
7883: CALL_OW 88
7887: GO 7930
// begin if GetSex ( randomSold ) = sex_male then
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 258
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: IFFALSE 7918
// Say ( randomSold , D11b1-RSol1-1 ) else
7904: LD_VAR 0 1
7908: PPUSH
7909: LD_STRING D11b1-RSol1-1
7911: PPUSH
7912: CALL_OW 88
7916: GO 7930
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_STRING D11b1-RFSol1-1
7925: PPUSH
7926: CALL_OW 88
// end ; DialogueOff ;
7930: CALL_OW 7
// exit ;
7934: GO 8008
// end ; if IsOk ( Belkov ) then
7936: LD_EXP 54
7940: PPUSH
7941: CALL_OW 302
7945: IFFALSE 7961
// Say ( Belkov , D11b1-Bel-1 ) else
7947: LD_EXP 54
7951: PPUSH
7952: LD_STRING D11b1-Bel-1
7954: PPUSH
7955: CALL_OW 88
7959: GO 8002
// begin if GetSex ( randomSold ) = sex_male then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 258
7970: PUSH
7971: LD_INT 1
7973: EQUAL
7974: IFFALSE 7990
// Say ( randomSold , D11b1-RSol1-1 ) else
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_STRING D11b1-RSol1-1
7983: PPUSH
7984: CALL_OW 88
7988: GO 8002
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_STRING D11b1-RFSol1-1
7997: PPUSH
7998: CALL_OW 88
// end ; DialogueOff ;
8002: CALL_OW 7
// exit ;
8006: GO 8008
// end ;
8008: PPOPN 1
8010: END
// every 0 0$1.8 trigger FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) do var un , saved ;
8011: LD_INT 24
8013: PPUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PPUSH
8024: CALL_OW 70
8028: IFFALSE 8227
8030: GO 8032
8032: DISABLE
8033: LD_INT 0
8035: PPUSH
8036: PPUSH
// begin if not LakeApes then
8037: LD_EXP 26
8041: NOT
8042: IFFALSE 8046
// exit ;
8044: GO 8227
// if FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) > 2 then
8046: LD_INT 24
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PPUSH
8059: CALL_OW 70
8063: PUSH
8064: LD_INT 2
8066: GREATER
8067: IFFALSE 8226
// begin ComAttackUnit ( LakeApes [ 1 ] , NearestUnitToUnit ( your_units , LakeApes [ 1 ] ) ) ;
8069: LD_EXP 26
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PPUSH
8078: LD_EXP 28
8082: PPUSH
8083: LD_EXP 26
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: CALL_OW 74
8096: PPUSH
8097: CALL_OW 115
// ComMoveToArea ( LakeApes diff LakeApes [ 1 ] , ApeEscape ) ;
8101: LD_EXP 26
8105: PUSH
8106: LD_EXP 26
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: DIFF
8115: PPUSH
8116: LD_INT 28
8118: PPUSH
8119: CALL_OW 113
// AddComWait ( LakeApes diff LakeApes [ 1 ] , 0 0$1 ) ;
8123: LD_EXP 26
8127: PUSH
8128: LD_EXP 26
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: DIFF
8137: PPUSH
8138: LD_INT 35
8140: PPUSH
8141: CALL_OW 202
// repeat wait ( 0 0$0.3 ) ;
8145: LD_INT 10
8147: PPUSH
8148: CALL_OW 67
// saved := FilterUnitsInArea ( ApeEscape , [ f_side , 0 ] ) ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_INT 28
8159: PPUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// for un in saved do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: LD_VAR 0 2
8184: PUSH
8185: FOR_IN
8186: IFFALSE 8215
// begin RemoveUnit ( un ) ;
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 64
// LakeApes := LakeApes diff un ;
8197: LD_ADDR_EXP 26
8201: PUSH
8202: LD_EXP 26
8206: PUSH
8207: LD_VAR 0 1
8211: DIFF
8212: ST_TO_ADDR
// end ;
8213: GO 8185
8215: POP
8216: POP
// until not LakeApes ;
8217: LD_EXP 26
8221: NOT
8222: IFFALSE 8145
// end else
8224: GO 8227
// enable ;
8226: ENABLE
// end ;
8227: PPOPN 2
8229: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
8230: LD_INT 3
8232: PPUSH
8233: LD_EXP 56
8237: PPUSH
8238: CALL_OW 292
8242: PUSH
8243: LD_EXP 25
8247: AND
8248: IFFALSE 8511
8250: GO 8252
8252: DISABLE
8253: LD_INT 0
8255: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
8256: LD_EXP 56
8260: PPUSH
8261: LD_INT 3
8263: PPUSH
8264: CALL_OW 235
// jelenaSaved = true ;
8268: LD_ADDR_EXP 21
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
8276: LD_EXP 56
8280: PPUSH
8281: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
8285: LD_ADDR_VAR 0 1
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 3
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 50
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_EXP 56
8330: DIFF
8331: PPUSH
8332: LD_EXP 56
8336: PPUSH
8337: CALL_OW 74
8341: ST_TO_ADDR
// DialogueOn ;
8342: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8346: LD_EXP 56
8350: PPUSH
8351: LD_STRING D11a-Kir-1
8353: PPUSH
8354: CALL_OW 88
// if nearUnit = Belkov then
8358: LD_VAR 0 1
8362: PUSH
8363: LD_EXP 54
8367: EQUAL
8368: IFFALSE 8408
// begin Say ( Belkov , D11a-Bel-1 ) ;
8370: LD_EXP 54
8374: PPUSH
8375: LD_STRING D11a-Bel-1
8377: PPUSH
8378: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8382: LD_EXP 56
8386: PPUSH
8387: LD_STRING D11a-Kir-2
8389: PPUSH
8390: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
8394: LD_EXP 54
8398: PPUSH
8399: LD_STRING D11a-Bel-2
8401: PPUSH
8402: CALL_OW 88
// end else
8406: GO 8449
// begin if GetSex ( nearUnit ) = sex_male then
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 258
8417: PUSH
8418: LD_INT 1
8420: EQUAL
8421: IFFALSE 8437
// Say ( nearUnit , D11a-RSol1-2 ) else
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_STRING D11a-RSol1-2
8430: PPUSH
8431: CALL_OW 88
8435: GO 8449
// Say ( nearUnit , D11a-RFSol1-2 ) ;
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_STRING D11a-RFSol1-2
8444: PPUSH
8445: CALL_OW 88
// end ; DialogueOff ;
8449: CALL_OW 7
// wait ( 0 0$5 ) ;
8453: LD_INT 175
8455: PPUSH
8456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8460: LD_INT 35
8462: PPUSH
8463: CALL_OW 67
// until GetDistUnits ( Burlak , Kirilenkova ) < 6 ;
8467: LD_EXP 49
8471: PPUSH
8472: LD_EXP 56
8476: PPUSH
8477: CALL_OW 296
8481: PUSH
8482: LD_INT 6
8484: LESS
8485: IFFALSE 8460
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8487: LD_EXP 56
8491: PPUSH
8492: LD_STRING D11c-Kir-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8499: LD_EXP 49
8503: PPUSH
8504: LD_STRING D11c-Bur-1
8506: PPUSH
8507: CALL_OW 88
// end ;
8511: PPOPN 1
8513: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8514: LD_EXP 22
8518: PUSH
8519: LD_INT 1
8521: PPUSH
8522: LD_INT 22
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 70
8550: PUSH
8551: LD_INT 0
8553: GREATER
8554: AND
8555: IFFALSE 8567
8557: GO 8559
8559: DISABLE
// begin Query ( QExit1 ) ;
8560: LD_STRING QExit1
8562: PPUSH
8563: CALL_OW 97
// end ; end_of_file
8567: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8568: LD_INT 0
8570: PPUSH
8571: PPUSH
// if exist_mode then
8572: LD_VAR 0 2
8576: IFFALSE 8601
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_EXP 34
8587: PUSH
8588: LD_VAR 0 1
8592: STR
8593: PPUSH
8594: CALL_OW 34
8598: ST_TO_ADDR
8599: GO 8616
// unit := NewCharacter ( ident ) ;
8601: LD_ADDR_VAR 0 4
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 25
8615: ST_TO_ADDR
// result := unit ;
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_VAR 0 4
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 3
8630: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8631: LD_INT 0
8633: PPUSH
8634: PPUSH
8635: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8636: LD_ADDR_VAR 0 1
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: LD_EXP 49
8650: PUSH
8651: LD_EXP 57
8655: PUSH
8656: LD_EXP 54
8660: PUSH
8661: LD_EXP 56
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: DIFF
8672: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8673: LD_ADDR_VAR 0 7
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 12
8695: ARRAY
8696: ST_TO_ADDR
// if radio then
8697: LD_VAR 0 4
8701: IFFALSE 8750
// begin if GetSex ( speaker ) = sex_male then
8703: LD_VAR 0 7
8707: PPUSH
8708: CALL_OW 258
8712: PUSH
8713: LD_INT 1
8715: EQUAL
8716: IFFALSE 8734
// SayRadio ( speaker , dialogMID ) else
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 2
8727: PPUSH
8728: CALL_OW 94
8732: GO 8748
// SayRadio ( speaker , dialogFID ) ;
8734: LD_VAR 0 7
8738: PPUSH
8739: LD_VAR 0 3
8743: PPUSH
8744: CALL_OW 94
// end else
8748: GO 8795
// begin if GetSex ( speaker ) = sex_male then
8750: LD_VAR 0 7
8754: PPUSH
8755: CALL_OW 258
8759: PUSH
8760: LD_INT 1
8762: EQUAL
8763: IFFALSE 8781
// Say ( speaker , dialogMID ) else
8765: LD_VAR 0 7
8769: PPUSH
8770: LD_VAR 0 2
8774: PPUSH
8775: CALL_OW 88
8779: GO 8795
// Say ( speaker , dialogFID ) ;
8781: LD_VAR 0 7
8785: PPUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: CALL_OW 88
// end ; result := speaker ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: LD_VAR 0 7
8804: ST_TO_ADDR
// end ;
8805: LD_VAR 0 5
8809: RET
// export function Length ( tab ) ; var i , count ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
// for i in tab do
8815: LD_ADDR_VAR 0 3
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8844
// count = count + 1 ;
8828: LD_ADDR_VAR 0 4
8832: PUSH
8833: LD_VAR 0 4
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: ST_TO_ADDR
8842: GO 8825
8844: POP
8845: POP
// Result := count ;
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_VAR 0 4
8855: ST_TO_ADDR
// end ;
8856: LD_VAR 0 2
8860: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8861: LD_INT 0
8863: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: PUSH
8874: LD_OWVAR 2
8878: EQUAL
8879: PUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 302
8889: AND
8890: IFFALSE 8912
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_EXP 33
8901: PUSH
8902: LD_VAR 0 2
8906: STR
8907: PPUSH
8908: CALL_OW 38
// end ;
8912: LD_VAR 0 3
8916: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8917: LD_INT 0
8919: PPUSH
8920: PPUSH
8921: PPUSH
// resultCharactersToSave = [ ] ;
8922: LD_ADDR_VAR 0 5
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// for unit in characters do
8929: LD_ADDR_VAR 0 4
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: FOR_IN
8940: IFFALSE 8988
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8942: LD_VAR 0 4
8946: PPUSH
8947: CALL_OW 255
8951: PUSH
8952: LD_OWVAR 2
8956: EQUAL
8957: PUSH
8958: LD_VAR 0 4
8962: PPUSH
8963: CALL_OW 302
8967: AND
8968: IFFALSE 8986
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8970: LD_ADDR_VAR 0 5
8974: PUSH
8975: LD_VAR 0 5
8979: PUSH
8980: LD_VAR 0 4
8984: ADD
8985: ST_TO_ADDR
8986: GO 8939
8988: POP
8989: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8990: LD_VAR 0 5
8994: PPUSH
8995: LD_EXP 33
8999: PUSH
9000: LD_VAR 0 2
9004: STR
9005: PPUSH
9006: CALL_OW 38
// end ;
9010: LD_VAR 0 3
9014: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 302
9038: NOT
9039: PUSH
9040: LD_VAR 0 4
9044: PUSH
9045: LD_INT 1
9047: EQUAL
9048: OR
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 488
9064: NOT
9065: OR
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_VAR 0 2
9076: PPUSH
9077: LD_VAR 0 3
9081: PPUSH
9082: CALL_OW 297
9086: PUSH
9087: LD_VAR 0 4
9091: GREATEREQUAL
9092: OR
9093: PUSH
9094: LD_VAR 0 5
9098: PUSH
9099: LD_INT 1
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: IN
9109: NOT
9110: OR
9111: IFFALSE 9115
// exit ;
9113: GO 10672
// attempts = 0 ;
9115: LD_ADDR_VAR 0 17
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9123: LD_ADDR_VAR 0 7
9127: PUSH
9128: EMPTY
9129: ST_TO_ADDR
// list_coords = [ ] ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9137: LD_ADDR_VAR 0 9
9141: PUSH
9142: LD_VAR 0 2
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL_OW 250
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 251
9171: PPUSH
9172: CALL 10677 0 4
9176: ST_TO_ADDR
// if attempts = 0 then
9177: LD_VAR 0 17
9181: PUSH
9182: LD_INT 0
9184: EQUAL
9185: IFFALSE 9293
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9187: LD_ADDR_VAR 0 10
9191: PUSH
9192: LD_VAR 0 9
9196: PUSH
9197: LD_VAR 0 9
9201: PUSH
9202: LD_INT 1
9204: PLUS
9205: PUSH
9206: LD_VAR 0 9
9210: PUSH
9211: LD_INT 1
9213: MINUS
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9220: LD_VAR 0 10
9224: PUSH
9225: LD_INT 2
9227: ARRAY
9228: PUSH
9229: LD_INT 6
9231: EQUAL
9232: IFFALSE 9255
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9234: LD_ADDR_VAR 0 10
9238: PUSH
9239: LD_VAR 0 10
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 1
9254: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9255: LD_VAR 0 10
9259: PUSH
9260: LD_INT 3
9262: ARRAY
9263: PUSH
9264: LD_INT 1
9266: NEG
9267: EQUAL
9268: IFFALSE 9291
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9270: LD_ADDR_VAR 0 10
9274: PUSH
9275: LD_VAR 0 10
9279: PPUSH
9280: LD_INT 3
9282: PPUSH
9283: LD_INT 5
9285: PPUSH
9286: CALL_OW 1
9290: ST_TO_ADDR
// end else
9291: GO 9330
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9293: LD_ADDR_VAR 0 10
9297: PUSH
9298: LD_INT 0
9300: PUSH
9301: LD_INT 1
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 4
9312: PUSH
9313: LD_INT 5
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_VAR 0 9
9328: DIFF
9329: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9330: LD_ADDR_VAR 0 14
9334: PUSH
9335: DOUBLE
9336: LD_INT 1
9338: DEC
9339: ST_TO_ADDR
9340: LD_VAR 0 10
9344: PUSH
9345: LD_INT 0
9347: PLUS
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9672
// case dir_list [ c ] of 0 :
9352: LD_VAR 0 10
9356: PUSH
9357: LD_VAR 0 14
9361: ARRAY
9362: PUSH
9363: LD_INT 0
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9412
9371: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_VAR 0 8
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: LD_VAR 0 2
9389: PUSH
9390: LD_VAR 0 3
9394: PUSH
9395: LD_VAR 0 4
9399: MINUS
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 2
9409: ST_TO_ADDR
9410: GO 9670
9412: LD_INT 1
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9461
9420: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: LD_VAR 0 8
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: LD_VAR 0 2
9438: PUSH
9439: LD_VAR 0 4
9443: PLUS
9444: PUSH
9445: LD_VAR 0 3
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 2
9458: ST_TO_ADDR
9459: GO 9670
9461: LD_INT 2
9463: DOUBLE
9464: EQUAL
9465: IFTRUE 9469
9467: GO 9516
9469: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
9470: LD_ADDR_VAR 0 8
9474: PUSH
9475: LD_VAR 0 8
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_VAR 0 4
9492: PLUS
9493: PUSH
9494: LD_VAR 0 3
9498: PUSH
9499: LD_VAR 0 4
9503: PLUS
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 2
9513: ST_TO_ADDR
9514: GO 9670
9516: LD_INT 3
9518: DOUBLE
9519: EQUAL
9520: IFTRUE 9524
9522: GO 9565
9524: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9525: LD_ADDR_VAR 0 8
9529: PUSH
9530: LD_VAR 0 8
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_VAR 0 3
9547: PUSH
9548: LD_VAR 0 4
9552: PLUS
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
9563: GO 9670
9565: LD_INT 4
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9614
9573: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9574: LD_ADDR_VAR 0 8
9578: PUSH
9579: LD_VAR 0 8
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_VAR 0 2
9591: PUSH
9592: LD_VAR 0 4
9596: MINUS
9597: PUSH
9598: LD_VAR 0 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 2
9611: ST_TO_ADDR
9612: GO 9670
9614: LD_INT 5
9616: DOUBLE
9617: EQUAL
9618: IFTRUE 9622
9620: GO 9669
9622: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_VAR 0 8
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_VAR 0 2
9640: PUSH
9641: LD_VAR 0 4
9645: MINUS
9646: PUSH
9647: LD_VAR 0 3
9651: PUSH
9652: LD_VAR 0 4
9656: MINUS
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 2
9666: ST_TO_ADDR
9667: GO 9670
9669: POP
9670: GO 9349
9672: POP
9673: POP
// if dist < 30 then
9674: LD_VAR 0 4
9678: PUSH
9679: LD_INT 30
9681: LESS
9682: IFFALSE 9694
// c = 1 else
9684: LD_ADDR_VAR 0 14
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
9692: GO 9702
// c = 2 ;
9694: LD_ADDR_VAR 0 14
9698: PUSH
9699: LD_INT 2
9701: ST_TO_ADDR
// b = 1 ;
9702: LD_ADDR_VAR 0 11
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9710: LD_VAR 0 11
9714: PUSH
9715: LD_VAR 0 4
9719: PUSH
9720: LD_INT 1
9722: MINUS
9723: LESSEQUAL
9724: IFFALSE 10152
// begin if 0 in dir_list and 1 in dir_list then
9726: LD_INT 0
9728: PUSH
9729: LD_VAR 0 10
9733: IN
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: LD_VAR 0 10
9742: IN
9743: AND
9744: IFFALSE 9796
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9746: LD_ADDR_VAR 0 8
9750: PUSH
9751: LD_VAR 0 8
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_VAR 0 2
9763: PUSH
9764: LD_VAR 0 11
9768: PLUS
9769: PUSH
9770: LD_VAR 0 3
9774: PUSH
9775: LD_VAR 0 4
9779: MINUS
9780: PUSH
9781: LD_VAR 0 11
9785: PLUS
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 2
9795: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9796: LD_INT 1
9798: PUSH
9799: LD_VAR 0 10
9803: IN
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: LD_VAR 0 10
9812: IN
9813: AND
9814: IFFALSE 9860
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9816: LD_ADDR_VAR 0 8
9820: PUSH
9821: LD_VAR 0 8
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: LD_VAR 0 2
9833: PUSH
9834: LD_VAR 0 4
9838: PLUS
9839: PUSH
9840: LD_VAR 0 3
9844: PUSH
9845: LD_VAR 0 11
9849: PLUS
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 2
9859: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9860: LD_INT 2
9862: PUSH
9863: LD_VAR 0 10
9867: IN
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_VAR 0 10
9876: IN
9877: AND
9878: IFFALSE 9930
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9880: LD_ADDR_VAR 0 8
9884: PUSH
9885: LD_VAR 0 8
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_VAR 0 4
9902: PLUS
9903: PUSH
9904: LD_VAR 0 11
9908: MINUS
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 4
9919: PLUS
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 2
9929: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9930: LD_INT 3
9932: PUSH
9933: LD_VAR 0 10
9937: IN
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: LD_VAR 0 10
9946: IN
9947: AND
9948: IFFALSE 10000
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9950: LD_ADDR_VAR 0 8
9954: PUSH
9955: LD_VAR 0 8
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_VAR 0 11
9972: MINUS
9973: PUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 4
9983: PLUS
9984: PUSH
9985: LD_VAR 0 11
9989: MINUS
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 2
9999: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10000: LD_INT 4
10002: PUSH
10003: LD_VAR 0 10
10007: IN
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_VAR 0 10
10016: IN
10017: AND
10018: IFFALSE 10064
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_VAR 0 4
10042: MINUS
10043: PUSH
10044: LD_VAR 0 3
10048: PUSH
10049: LD_VAR 0 11
10053: MINUS
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 2
10063: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10064: LD_INT 5
10066: PUSH
10067: LD_VAR 0 10
10071: IN
10072: PUSH
10073: LD_INT 0
10075: PUSH
10076: LD_VAR 0 10
10080: IN
10081: AND
10082: IFFALSE 10134
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10084: LD_ADDR_VAR 0 8
10088: PUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: LD_VAR 0 2
10101: PUSH
10102: LD_VAR 0 4
10106: MINUS
10107: PUSH
10108: LD_VAR 0 11
10112: PLUS
10113: PUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_VAR 0 4
10123: MINUS
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 2
10133: ST_TO_ADDR
// b = b + c end ;
10134: LD_ADDR_VAR 0 11
10138: PUSH
10139: LD_VAR 0 11
10143: PUSH
10144: LD_VAR 0 14
10148: PLUS
10149: ST_TO_ADDR
10150: GO 9710
// if list_coords = 0 then
10152: LD_VAR 0 8
10156: PUSH
10157: LD_INT 0
10159: EQUAL
10160: IFFALSE 10164
// exit ;
10162: GO 10672
// repeat min_dist = 5000 ;
10164: LD_ADDR_VAR 0 12
10168: PUSH
10169: LD_INT 5000
10171: ST_TO_ADDR
// for b in list_coords do
10172: LD_ADDR_VAR 0 11
10176: PUSH
10177: LD_VAR 0 8
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10242
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10185: LD_ADDR_VAR 0 13
10189: PUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_VAR 0 11
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PPUSH
10204: LD_VAR 0 11
10208: PUSH
10209: LD_INT 2
10211: ARRAY
10212: PPUSH
10213: CALL_OW 297
10217: ST_TO_ADDR
// if temp_dist < min_dist then
10218: LD_VAR 0 13
10222: PUSH
10223: LD_VAR 0 12
10227: LESS
10228: IFFALSE 10240
// min_dist = temp_dist ;
10230: LD_ADDR_VAR 0 12
10234: PUSH
10235: LD_VAR 0 13
10239: ST_TO_ADDR
// end ;
10240: GO 10182
10242: POP
10243: POP
// c = 0 ;
10244: LD_ADDR_VAR 0 14
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// repeat c = c + 1 ;
10252: LD_ADDR_VAR 0 14
10256: PUSH
10257: LD_VAR 0 14
10261: PUSH
10262: LD_INT 1
10264: PLUS
10265: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10266: LD_VAR 0 1
10270: PPUSH
10271: LD_VAR 0 8
10275: PUSH
10276: LD_VAR 0 14
10280: ARRAY
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PPUSH
10286: LD_VAR 0 8
10290: PUSH
10291: LD_VAR 0 14
10295: ARRAY
10296: PUSH
10297: LD_INT 2
10299: ARRAY
10300: PPUSH
10301: CALL_OW 297
10305: PUSH
10306: LD_VAR 0 12
10310: EQUAL
10311: IFFALSE 10376
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 7
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_VAR 0 8
10330: PUSH
10331: LD_VAR 0 14
10335: ARRAY
10336: PPUSH
10337: CALL_OW 2
10341: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10342: LD_ADDR_VAR 0 8
10346: PUSH
10347: LD_VAR 0 8
10351: PPUSH
10352: LD_VAR 0 14
10356: PPUSH
10357: CALL_OW 3
10361: ST_TO_ADDR
// c = c - 1 ;
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: LD_VAR 0 14
10371: PUSH
10372: LD_INT 1
10374: MINUS
10375: ST_TO_ADDR
// end ; until c = list_coords ;
10376: LD_VAR 0 14
10380: PUSH
10381: LD_VAR 0 8
10385: EQUAL
10386: IFFALSE 10252
// c = 0 ;
10388: LD_ADDR_VAR 0 14
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
// if list_nearest > 0 then
10396: LD_VAR 0 7
10400: PUSH
10401: LD_INT 0
10403: GREATER
10404: IFFALSE 10546
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10406: LD_ADDR_VAR 0 15
10410: PUSH
10411: LD_INT 1
10413: PPUSH
10414: LD_VAR 0 7
10418: PPUSH
10419: CALL_OW 12
10423: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10424: LD_ADDR_VAR 0 16
10428: PUSH
10429: LD_VAR 0 7
10433: PUSH
10434: LD_VAR 0 15
10438: ARRAY
10439: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10440: LD_VAR 0 16
10444: PUSH
10445: LD_INT 1
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 16
10453: PUSH
10454: LD_INT 2
10456: ARRAY
10457: PPUSH
10458: CALL_OW 488
10462: PUSH
10463: LD_INT 0
10465: GREATER
10466: PUSH
10467: LD_VAR 0 16
10471: PUSH
10472: LD_INT 1
10474: ARRAY
10475: PPUSH
10476: LD_VAR 0 16
10480: PUSH
10481: LD_INT 2
10483: ARRAY
10484: PPUSH
10485: CALL_OW 428
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: AND
10494: IFFALSE 10506
// c = 1 else
10496: LD_ADDR_VAR 0 14
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
10504: GO 10526
// list_nearest = Delete ( list_nearest , rand_num ) ;
10506: LD_ADDR_VAR 0 7
10510: PUSH
10511: LD_VAR 0 7
10515: PPUSH
10516: LD_VAR 0 15
10520: PPUSH
10521: CALL_OW 3
10525: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10526: LD_VAR 0 14
10530: PUSH
10531: LD_INT 1
10533: EQUAL
10534: PUSH
10535: LD_VAR 0 7
10539: PUSH
10540: LD_INT 0
10542: EQUAL
10543: OR
10544: IFFALSE 10406
// end ; until c = 1 or list_coords = 0 ;
10546: LD_VAR 0 14
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: PUSH
10555: LD_VAR 0 8
10559: PUSH
10560: LD_INT 0
10562: EQUAL
10563: OR
10564: IFFALSE 10164
// attempts = attempts + 1 ;
10566: LD_ADDR_VAR 0 17
10570: PUSH
10571: LD_VAR 0 17
10575: PUSH
10576: LD_INT 1
10578: PLUS
10579: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10580: LD_VAR 0 14
10584: PUSH
10585: LD_INT 1
10587: EQUAL
10588: PUSH
10589: LD_VAR 0 17
10593: PUSH
10594: LD_INT 1
10596: GREATER
10597: OR
10598: IFFALSE 9123
// if c = 1 then
10600: LD_VAR 0 14
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: IFFALSE 10672
// if add then
10610: LD_VAR 0 5
10614: IFFALSE 10645
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_VAR 0 16
10625: PUSH
10626: LD_INT 1
10628: ARRAY
10629: PPUSH
10630: LD_VAR 0 16
10634: PUSH
10635: LD_INT 2
10637: ARRAY
10638: PPUSH
10639: CALL_OW 171
10643: GO 10672
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_VAR 0 16
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 16
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// end ;
10672: LD_VAR 0 6
10676: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
10682: PPUSH
10683: PPUSH
10684: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 488
10699: NOT
10700: PUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: CALL_OW 488
10715: NOT
10716: OR
10717: IFFALSE 10730
// begin result = - 1 ;
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_INT 1
10726: NEG
10727: ST_TO_ADDR
// exit ;
10728: GO 10890
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10730: LD_ADDR_VAR 0 6
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_VAR 0 4
10754: PPUSH
10755: CALL_OW 298
10759: ST_TO_ADDR
// dist_2 = 99999 ;
10760: LD_ADDR_VAR 0 7
10764: PUSH
10765: LD_INT 99999
10767: ST_TO_ADDR
// for b = 0 to 5 do
10768: LD_ADDR_VAR 0 8
10772: PUSH
10773: DOUBLE
10774: LD_INT 0
10776: DEC
10777: ST_TO_ADDR
10778: LD_INT 5
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10878
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10784: LD_ADDR_VAR 0 9
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_VAR 0 8
10798: PPUSH
10799: LD_VAR 0 6
10803: PPUSH
10804: CALL_OW 272
10808: PPUSH
10809: LD_VAR 0 2
10813: PPUSH
10814: LD_VAR 0 8
10818: PPUSH
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 273
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_VAR 0 4
10838: PPUSH
10839: CALL_OW 298
10843: ST_TO_ADDR
// if temp_dist < dist_2 then
10844: LD_VAR 0 9
10848: PUSH
10849: LD_VAR 0 7
10853: LESS
10854: IFFALSE 10876
// begin dist_2 = temp_dist ;
10856: LD_ADDR_VAR 0 7
10860: PUSH
10861: LD_VAR 0 9
10865: ST_TO_ADDR
// dir = b ;
10866: LD_ADDR_VAR 0 10
10870: PUSH
10871: LD_VAR 0 8
10875: ST_TO_ADDR
// end ; end ;
10876: GO 10781
10878: POP
10879: POP
// result = dir ;
10880: LD_ADDR_VAR 0 5
10884: PUSH
10885: LD_VAR 0 10
10889: ST_TO_ADDR
// end ;
10890: LD_VAR 0 5
10894: RET
// export function MoveToHill ; begin
10895: LD_INT 0
10897: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10898: LD_EXP 50
10902: PPUSH
10903: LD_INT 65
10905: PPUSH
10906: LD_INT 59
10908: PPUSH
10909: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10913: LD_EXP 50
10917: PPUSH
10918: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10922: LD_EXP 51
10926: PPUSH
10927: LD_INT 65
10929: PPUSH
10930: LD_INT 58
10932: PPUSH
10933: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10937: LD_EXP 51
10941: PPUSH
10942: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10946: LD_EXP 52
10950: PPUSH
10951: LD_INT 64
10953: PPUSH
10954: LD_INT 57
10956: PPUSH
10957: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10961: LD_EXP 52
10965: PPUSH
10966: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10970: LD_EXP 53
10974: PPUSH
10975: LD_INT 64
10977: PPUSH
10978: LD_INT 56
10980: PPUSH
10981: CALL_OW 111
// AddComCrawl ( Balei ) ;
10985: LD_EXP 53
10989: PPUSH
10990: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10994: LD_EXP 54
10998: PPUSH
10999: LD_INT 63
11001: PPUSH
11002: LD_INT 55
11004: PPUSH
11005: CALL_OW 111
// AddComCrawl ( Belkov ) ;
11009: LD_EXP 54
11013: PPUSH
11014: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
11018: LD_EXP 55
11022: PPUSH
11023: LD_INT 66
11025: PPUSH
11026: LD_INT 58
11028: PPUSH
11029: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
11033: LD_EXP 55
11037: PPUSH
11038: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
11042: LD_EXP 57
11046: PPUSH
11047: CALL_OW 255
11051: PUSH
11052: LD_INT 6
11054: EQUAL
11055: PUSH
11056: LD_EXP 12
11060: AND
11061: IFFALSE 11087
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
11063: LD_EXP 57
11067: PPUSH
11068: LD_INT 63
11070: PPUSH
11071: LD_INT 54
11073: PPUSH
11074: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
11078: LD_EXP 57
11082: PPUSH
11083: CALL_OW 197
// end ; if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11087: LD_EXP 50
11091: PPUSH
11092: LD_INT 65
11094: PPUSH
11095: LD_INT 59
11097: PPUSH
11098: CALL_OW 297
11102: PUSH
11103: LD_INT 7
11105: LESS
11106: IFFALSE 11132
// begin ComCrawl ( Pokryshkin ) ;
11108: LD_EXP 50
11112: PPUSH
11113: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11117: LD_EXP 50
11121: PPUSH
11122: LD_INT 65
11124: PPUSH
11125: LD_INT 59
11127: PPUSH
11128: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11132: LD_EXP 51
11136: PPUSH
11137: LD_INT 65
11139: PPUSH
11140: LD_INT 58
11142: PPUSH
11143: CALL_OW 297
11147: PUSH
11148: LD_INT 7
11150: LESS
11151: IFFALSE 11177
// begin ComCrawl ( Saseda ) ;
11153: LD_EXP 51
11157: PPUSH
11158: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11162: LD_EXP 51
11166: PPUSH
11167: LD_INT 65
11169: PPUSH
11170: LD_INT 58
11172: PPUSH
11173: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11177: LD_EXP 52
11181: PPUSH
11182: LD_INT 64
11184: PPUSH
11185: LD_INT 57
11187: PPUSH
11188: CALL_OW 297
11192: PUSH
11193: LD_INT 7
11195: LESS
11196: IFFALSE 11222
// begin ComCrawl ( Jaworska ) ;
11198: LD_EXP 52
11202: PPUSH
11203: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11207: LD_EXP 52
11211: PPUSH
11212: LD_INT 64
11214: PPUSH
11215: LD_INT 57
11217: PPUSH
11218: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11222: LD_EXP 53
11226: PPUSH
11227: LD_INT 64
11229: PPUSH
11230: LD_INT 56
11232: PPUSH
11233: CALL_OW 297
11237: PUSH
11238: LD_INT 7
11240: LESS
11241: IFFALSE 11267
// begin ComCrawl ( Balei ) ;
11243: LD_EXP 53
11247: PPUSH
11248: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11252: LD_EXP 53
11256: PPUSH
11257: LD_INT 64
11259: PPUSH
11260: LD_INT 56
11262: PPUSH
11263: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11267: LD_EXP 54
11271: PPUSH
11272: LD_INT 63
11274: PPUSH
11275: LD_INT 55
11277: PPUSH
11278: CALL_OW 297
11282: PUSH
11283: LD_INT 7
11285: LESS
11286: IFFALSE 11312
// begin ComCrawl ( Belkov ) ;
11288: LD_EXP 54
11292: PPUSH
11293: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11297: LD_EXP 54
11301: PPUSH
11302: LD_INT 63
11304: PPUSH
11305: LD_INT 55
11307: PPUSH
11308: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11312: LD_EXP 55
11316: PPUSH
11317: LD_INT 66
11319: PPUSH
11320: LD_INT 58
11322: PPUSH
11323: CALL_OW 297
11327: PUSH
11328: LD_INT 7
11330: LESS
11331: IFFALSE 11357
// begin ComCrawl ( Jaunzeme ) ;
11333: LD_EXP 55
11337: PPUSH
11338: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11342: LD_EXP 55
11346: PPUSH
11347: LD_INT 66
11349: PPUSH
11350: LD_INT 58
11352: PPUSH
11353: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11357: LD_EXP 57
11361: PPUSH
11362: LD_INT 63
11364: PPUSH
11365: LD_INT 54
11367: PPUSH
11368: CALL_OW 297
11372: PUSH
11373: LD_INT 7
11375: LESS
11376: PUSH
11377: LD_EXP 57
11381: PPUSH
11382: CALL_OW 255
11386: PUSH
11387: LD_INT 6
11389: EQUAL
11390: AND
11391: PUSH
11392: LD_EXP 12
11396: AND
11397: IFFALSE 11423
// begin ComCrawl ( Gnyevko ) ;
11399: LD_EXP 57
11403: PPUSH
11404: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11408: LD_EXP 57
11412: PPUSH
11413: LD_INT 63
11415: PPUSH
11416: LD_INT 54
11418: PPUSH
11419: CALL_OW 171
// end ; end ;
11423: LD_VAR 0 1
11427: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
11428: LD_EXP 45
11432: PPUSH
11433: CALL_OW 303
11437: NOT
11438: PUSH
11439: LD_EXP 45
11443: PPUSH
11444: CALL_OW 301
11448: NOT
11449: OR
11450: PUSH
11451: LD_EXP 15
11455: AND
11456: IFFALSE 11797
11458: GO 11460
11460: DISABLE
// begin if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11461: LD_EXP 50
11465: PPUSH
11466: LD_INT 65
11468: PPUSH
11469: LD_INT 59
11471: PPUSH
11472: CALL_OW 297
11476: PUSH
11477: LD_INT 7
11479: LESS
11480: IFFALSE 11506
// begin ComCrawl ( Pokryshkin ) ;
11482: LD_EXP 50
11486: PPUSH
11487: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11491: LD_EXP 50
11495: PPUSH
11496: LD_INT 65
11498: PPUSH
11499: LD_INT 59
11501: PPUSH
11502: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11506: LD_EXP 51
11510: PPUSH
11511: LD_INT 65
11513: PPUSH
11514: LD_INT 58
11516: PPUSH
11517: CALL_OW 297
11521: PUSH
11522: LD_INT 7
11524: LESS
11525: IFFALSE 11551
// begin ComCrawl ( Saseda ) ;
11527: LD_EXP 51
11531: PPUSH
11532: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11536: LD_EXP 51
11540: PPUSH
11541: LD_INT 65
11543: PPUSH
11544: LD_INT 58
11546: PPUSH
11547: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11551: LD_EXP 52
11555: PPUSH
11556: LD_INT 64
11558: PPUSH
11559: LD_INT 57
11561: PPUSH
11562: CALL_OW 297
11566: PUSH
11567: LD_INT 7
11569: LESS
11570: IFFALSE 11596
// begin ComCrawl ( Jaworska ) ;
11572: LD_EXP 52
11576: PPUSH
11577: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11581: LD_EXP 52
11585: PPUSH
11586: LD_INT 64
11588: PPUSH
11589: LD_INT 57
11591: PPUSH
11592: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11596: LD_EXP 53
11600: PPUSH
11601: LD_INT 64
11603: PPUSH
11604: LD_INT 56
11606: PPUSH
11607: CALL_OW 297
11611: PUSH
11612: LD_INT 7
11614: LESS
11615: IFFALSE 11641
// begin ComCrawl ( Balei ) ;
11617: LD_EXP 53
11621: PPUSH
11622: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11626: LD_EXP 53
11630: PPUSH
11631: LD_INT 64
11633: PPUSH
11634: LD_INT 56
11636: PPUSH
11637: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11641: LD_EXP 54
11645: PPUSH
11646: LD_INT 63
11648: PPUSH
11649: LD_INT 55
11651: PPUSH
11652: CALL_OW 297
11656: PUSH
11657: LD_INT 7
11659: LESS
11660: IFFALSE 11686
// begin ComCrawl ( Belkov ) ;
11662: LD_EXP 54
11666: PPUSH
11667: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11671: LD_EXP 54
11675: PPUSH
11676: LD_INT 63
11678: PPUSH
11679: LD_INT 55
11681: PPUSH
11682: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11686: LD_EXP 55
11690: PPUSH
11691: LD_INT 66
11693: PPUSH
11694: LD_INT 58
11696: PPUSH
11697: CALL_OW 297
11701: PUSH
11702: LD_INT 7
11704: LESS
11705: IFFALSE 11731
// begin ComCrawl ( Jaunzeme ) ;
11707: LD_EXP 55
11711: PPUSH
11712: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11716: LD_EXP 55
11720: PPUSH
11721: LD_INT 66
11723: PPUSH
11724: LD_INT 58
11726: PPUSH
11727: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11731: LD_EXP 57
11735: PPUSH
11736: LD_INT 63
11738: PPUSH
11739: LD_INT 54
11741: PPUSH
11742: CALL_OW 297
11746: PUSH
11747: LD_INT 7
11749: LESS
11750: PUSH
11751: LD_EXP 57
11755: PPUSH
11756: CALL_OW 255
11760: PUSH
11761: LD_INT 6
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_EXP 12
11770: AND
11771: IFFALSE 11797
// begin ComCrawl ( Gnyevko ) ;
11773: LD_EXP 57
11777: PPUSH
11778: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11782: LD_EXP 57
11786: PPUSH
11787: LD_INT 63
11789: PPUSH
11790: LD_INT 54
11792: PPUSH
11793: CALL_OW 171
// end ; end ; end_of_file
11797: END
// export function BurlakDying ; begin
11798: LD_INT 0
11800: PPUSH
// YouLost ( Burlak ) ;
11801: LD_STRING Burlak
11803: PPUSH
11804: CALL_OW 104
// end ;
11808: LD_VAR 0 1
11812: RET
// every 0 0$1 trigger kirovSolds = 0 do
11813: LD_EXP 59
11817: PUSH
11818: LD_INT 0
11820: EQUAL
11821: IFFALSE 11833
11823: GO 11825
11825: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11826: LD_STRING KirovSoldsDie
11828: PPUSH
11829: CALL_OW 104
11833: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11834: LD_EXP 22
11838: PUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_INT 22
11844: PUSH
11845: LD_INT 3
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 71
11870: PUSH
11871: LD_INT 0
11873: EQUAL
11874: AND
11875: IFFALSE 12249
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin if IsOk ( Belkov ) then
11883: LD_EXP 54
11887: PPUSH
11888: CALL_OW 302
11892: IFFALSE 11908
// Say ( Belkov , D12-Bel-1 ) else
11894: LD_EXP 54
11898: PPUSH
11899: LD_STRING D12-Bel-1
11901: PPUSH
11902: CALL_OW 88
11906: GO 11968
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11908: LD_INT 22
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 1
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 50
11930: PUSH
11931: EMPTY
11932: LIST
11933: PUSH
11934: LD_INT 26
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_STRING D12-RSol1-1
11957: PPUSH
11958: LD_STRING 
11960: PPUSH
11961: LD_INT 0
11963: PPUSH
11964: CALL 8631 0 4
// if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or not gnyevkoSaved then
11968: LD_EXP 56
11972: PPUSH
11973: CALL_OW 302
11977: PUSH
11978: LD_EXP 56
11982: PPUSH
11983: CALL_OW 255
11987: PUSH
11988: LD_INT 8
11990: EQUAL
11991: AND
11992: PUSH
11993: LD_EXP 12
11997: NOT
11998: OR
11999: IFFALSE 12160
// begin case Query ( QExit2 ) of 1 :
12001: LD_STRING QExit2
12003: PPUSH
12004: CALL_OW 97
12008: PUSH
12009: LD_INT 1
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// begin FinishMission ;
12018: CALL 12252 0 0
// end ; 2 :
12022: GO 12158
12024: LD_INT 2
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12157
12032: POP
// begin if not gnyevkoSaved then
12033: LD_EXP 12
12037: NOT
12038: IFFALSE 12090
// begin Say ( Burlak , D12-Bur-1 ) ;
12040: LD_EXP 49
12044: PPUSH
12045: LD_STRING D12-Bur-1
12047: PPUSH
12048: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
12052: LD_EXP 54
12056: PPUSH
12057: CALL_OW 255
12061: PUSH
12062: LD_INT 3
12064: EQUAL
12065: PUSH
12066: LD_EXP 54
12070: PPUSH
12071: CALL_OW 302
12075: AND
12076: IFFALSE 12090
// Say ( Belkov , D12-Bel-2 ) ;
12078: LD_EXP 54
12082: PPUSH
12083: LD_STRING D12-Bel-2
12085: PPUSH
12086: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12090: LD_INT 35
12092: PPUSH
12093: CALL_OW 67
// until ( gnyevkoSaved or IsDead ( Gnyevko ) ) and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12097: LD_EXP 12
12101: PUSH
12102: LD_EXP 57
12106: PPUSH
12107: CALL_OW 301
12111: OR
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 22
12118: PUSH
12119: LD_INT 3
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 71
12144: PUSH
12145: LD_INT 0
12147: EQUAL
12148: AND
12149: IFFALSE 12090
// FinishMission ;
12151: CALL 12252 0 0
// end ; end ;
12155: GO 12158
12157: POP
// end else
12158: GO 12249
// begin if IsOk ( Belkov ) then
12160: LD_EXP 54
12164: PPUSH
12165: CALL_OW 302
12169: IFFALSE 12185
// Say ( Belkov , D12-Bel-1 ) else
12171: LD_EXP 54
12175: PPUSH
12176: LD_STRING D12-Bel-1
12178: PPUSH
12179: CALL_OW 88
12183: GO 12245
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 21
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 50
12207: PUSH
12208: EMPTY
12209: LIST
12210: PUSH
12211: LD_INT 26
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: PPUSH
12232: LD_STRING D12-RSol1-1
12234: PPUSH
12235: LD_STRING 
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL 8631 0 4
// FinishMission ;
12245: CALL 12252 0 0
// end ; end ;
12249: PPOPN 1
12251: END
// function FinishMission ; begin
12252: LD_INT 0
12254: PPUSH
// SetRewards ;
12255: CALL 12276 0 0
// SavePlayerCharacters ;
12259: CALL 12627 0 0
// SaveGlobalVariables ;
12263: CALL 12757 0 0
// YouWin ;
12267: CALL_OW 103
// end ;
12271: LD_VAR 0 1
12275: RET
// function SetRewards ; begin
12276: LD_INT 0
12278: PPUSH
// if not gladstoneEscape and not JohannaEscape then
12279: LD_EXP 19
12283: NOT
12284: PUSH
12285: LD_EXP 20
12289: NOT
12290: AND
12291: IFFALSE 12303
// AddMedal ( NoEscape , 1 ) ;
12293: LD_STRING NoEscape
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
12303: LD_EXP 19
12307: PUSH
12308: LD_EXP 20
12312: NOT
12313: AND
12314: IFFALSE 12327
// AddMedal ( NoEscape , - 1 ) ;
12316: LD_STRING NoEscape
12318: PPUSH
12319: LD_INT 1
12321: NEG
12322: PPUSH
12323: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
12327: LD_EXP 19
12331: NOT
12332: PUSH
12333: LD_EXP 20
12337: AND
12338: IFFALSE 12351
// AddMedal ( NoEscape , - 2 ) ;
12340: LD_STRING NoEscape
12342: PPUSH
12343: LD_INT 2
12345: NEG
12346: PPUSH
12347: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
12351: LD_EXP 19
12355: PUSH
12356: LD_EXP 20
12360: AND
12361: IFFALSE 12374
// AddMedal ( NoEscape , - 3 ) ;
12363: LD_STRING NoEscape
12365: PPUSH
12366: LD_INT 3
12368: NEG
12369: PPUSH
12370: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
12374: LD_EXP 12
12378: PUSH
12379: LD_EXP 57
12383: PPUSH
12384: CALL_OW 302
12388: AND
12389: PUSH
12390: LD_EXP 21
12394: AND
12395: PUSH
12396: LD_EXP 56
12400: PPUSH
12401: CALL_OW 302
12405: AND
12406: IFFALSE 12418
// AddMedal ( Gnyevko , 1 ) ;
12408: LD_STRING Gnyevko
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
12418: LD_EXP 12
12422: NOT
12423: PUSH
12424: LD_EXP 21
12428: AND
12429: PUSH
12430: LD_EXP 56
12434: PPUSH
12435: CALL_OW 302
12439: AND
12440: IFFALSE 12453
// AddMedal ( Gnyevko , - 1 ) ;
12442: LD_STRING Gnyevko
12444: PPUSH
12445: LD_INT 1
12447: NEG
12448: PPUSH
12449: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
12453: LD_EXP 12
12457: PUSH
12458: LD_EXP 21
12462: NOT
12463: PUSH
12464: LD_EXP 57
12468: PPUSH
12469: CALL_OW 302
12473: NOT
12474: OR
12475: PUSH
12476: LD_EXP 56
12480: PPUSH
12481: CALL_OW 302
12485: NOT
12486: OR
12487: AND
12488: IFFALSE 12501
// AddMedal ( Gnyevko , - 2 ) ;
12490: LD_STRING Gnyevko
12492: PPUSH
12493: LD_INT 2
12495: NEG
12496: PPUSH
12497: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
12501: LD_EXP 12
12505: NOT
12506: PUSH
12507: LD_EXP 21
12511: NOT
12512: AND
12513: PUSH
12514: LD_EXP 57
12518: PPUSH
12519: CALL_OW 302
12523: NOT
12524: PUSH
12525: LD_EXP 56
12529: PPUSH
12530: CALL_OW 302
12534: NOT
12535: AND
12536: OR
12537: IFFALSE 12550
// AddMedal ( Gnyevko , - 3 ) ;
12539: LD_STRING Gnyevko
12541: PPUSH
12542: LD_INT 3
12544: NEG
12545: PPUSH
12546: CALL_OW 101
// if lostComradesCounter = 0 then
12550: LD_EXP 23
12554: PUSH
12555: LD_INT 0
12557: EQUAL
12558: IFFALSE 12572
// AddMedal ( NoLosses , 1 ) else
12560: LD_STRING NoLosses
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 101
12570: GO 12582
// AddMedal ( NoLosses , 0 ) ;
12572: LD_STRING NoLosses
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 101
// GiveMedals ( Main ) ;
12582: LD_STRING Main
12584: PPUSH
12585: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PPUSH
12618: CALL_OW 43
// end ;
12622: LD_VAR 0 1
12626: RET
// function SavePlayerCharacters ; var others ; begin
12627: LD_INT 0
12629: PPUSH
12630: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12631: LD_EXP 49
12635: PPUSH
12636: LD_STRING Burlak
12638: PPUSH
12639: CALL 8861 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12643: LD_EXP 57
12647: PPUSH
12648: LD_STRING Gnyevko
12650: PPUSH
12651: CALL 8861 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12655: LD_EXP 54
12659: PPUSH
12660: LD_STRING Belkov
12662: PPUSH
12663: CALL 8861 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12667: LD_EXP 56
12671: PPUSH
12672: LD_STRING Kirilenkova
12674: PPUSH
12675: CALL 8861 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12679: LD_ADDR_VAR 0 2
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: PUSH
12713: LD_EXP 49
12717: PUSH
12718: LD_EXP 57
12722: PUSH
12723: LD_EXP 54
12727: PUSH
12728: LD_EXP 56
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: DIFF
12739: ST_TO_ADDR
// ExtSaveCharacters ( others , OtherSurvivors ) ;
12740: LD_VAR 0 2
12744: PPUSH
12745: LD_STRING OtherSurvivors
12747: PPUSH
12748: CALL 8917 0 2
// end ;
12752: LD_VAR 0 1
12756: RET
// function SaveGlobalVariables ; begin
12757: LD_INT 0
12759: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12760: LD_EXP 1
12764: PPUSH
12765: LD_STRING 01_GladstoneStatus
12767: PPUSH
12768: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12772: LD_EXP 2
12776: PPUSH
12777: LD_STRING 01_JohannaStatus
12779: PPUSH
12780: CALL_OW 39
// end ; end_of_file
12784: LD_VAR 0 1
12788: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12789: LD_INT 0
12791: PPUSH
12792: PPUSH
12793: PPUSH
// InitHc_All ( ) ;
12794: CALL_OW 584
// uc_side = 1 ;
12798: LD_ADDR_OWVAR 20
12802: PUSH
12803: LD_INT 1
12805: ST_TO_ADDR
// hc_class := 1 ;
12806: LD_ADDR_OWVAR 28
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// hc_sex := sex_male ;
12814: LD_ADDR_OWVAR 27
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12822: LD_ADDR_OWVAR 33
12826: PUSH
12827: LD_STRING AmGalRemake
12829: ST_TO_ADDR
// hc_face_number := 1 ;
12830: LD_ADDR_OWVAR 34
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// hc_name := Charles Brown ;
12838: LD_ADDR_OWVAR 26
12842: PUSH
12843: LD_STRING Charles Brown
12845: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12846: LD_ADDR_OWVAR 29
12850: PUSH
12851: LD_INT 12
12853: PUSH
12854: LD_INT 11
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12861: LD_ADDR_OWVAR 31
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: LD_INT 0
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// Charles = CreateHuman ;
12884: LD_ADDR_EXP 45
12888: PUSH
12889: CALL_OW 44
12893: ST_TO_ADDR
// hc_class := 1 ;
12894: LD_ADDR_OWVAR 28
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// hc_sex := sex_female ;
12902: LD_ADDR_OWVAR 27
12906: PUSH
12907: LD_INT 2
12909: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12910: LD_ADDR_OWVAR 33
12914: PUSH
12915: LD_STRING AmGalRemake
12917: ST_TO_ADDR
// hc_face_number := 2 ;
12918: LD_ADDR_OWVAR 34
12922: PUSH
12923: LD_INT 2
12925: ST_TO_ADDR
// hc_name := Johanna Holland ;
12926: LD_ADDR_OWVAR 26
12930: PUSH
12931: LD_STRING Johanna Holland
12933: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12934: LD_ADDR_OWVAR 29
12938: PUSH
12939: LD_INT 12
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12949: LD_ADDR_OWVAR 31
12953: PUSH
12954: LD_EXP 39
12958: PUSH
12959: LD_INT 0
12961: PPUSH
12962: LD_INT 2
12964: PPUSH
12965: CALL_OW 12
12969: PUSH
12970: LD_INT 0
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 12
12980: PUSH
12981: LD_INT 0
12983: PPUSH
12984: LD_INT 2
12986: PPUSH
12987: CALL_OW 12
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// Johanna = CreateHuman ;
12998: LD_ADDR_EXP 46
13002: PUSH
13003: CALL_OW 44
13007: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
13008: LD_EXP 46
13012: PPUSH
13013: LD_INT 19
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
13023: LD_EXP 46
13027: PPUSH
13028: LD_INT 23
13030: PPUSH
13031: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
13035: LD_ADDR_EXP 47
13039: PUSH
13040: LD_STRING Gladstone
13042: PPUSH
13043: LD_INT 0
13045: PPUSH
13046: CALL 8568 0 2
13050: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
13051: LD_EXP 47
13055: PPUSH
13056: LD_INT 22
13058: PPUSH
13059: CALL_OW 52
// amApemans = [ ] ;
13063: LD_ADDR_EXP 48
13067: PUSH
13068: EMPTY
13069: ST_TO_ADDR
// for i := 1 to amApeAmount do
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: DOUBLE
13076: LD_INT 1
13078: DEC
13079: ST_TO_ADDR
13080: LD_EXP 38
13084: PUSH
13085: FOR_TO
13086: IFFALSE 13208
// begin InitHC_All ( ) ;
13088: CALL_OW 584
// hc_class := class_apeman ;
13092: LD_ADDR_OWVAR 28
13096: PUSH
13097: LD_INT 12
13099: ST_TO_ADDR
// hc_gallery :=  ;
13100: LD_ADDR_OWVAR 33
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// hc_name :=  ;
13108: LD_ADDR_OWVAR 26
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
13116: LD_ADDR_OWVAR 31
13120: PUSH
13121: LD_EXP 39
13125: PUSH
13126: LD_INT 0
13128: PPUSH
13129: LD_INT 2
13131: PPUSH
13132: CALL_OW 12
13136: PUSH
13137: LD_INT 0
13139: PPUSH
13140: LD_INT 2
13142: PPUSH
13143: CALL_OW 12
13147: PUSH
13148: LD_INT 0
13150: PPUSH
13151: LD_INT 2
13153: PPUSH
13154: CALL_OW 12
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: ST_TO_ADDR
// ape = CreateHuman ;
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: CALL_OW 44
13174: ST_TO_ADDR
// PlaceUnitArea ( ape , AmApeResp , false ) ;
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 29
13182: PPUSH
13183: LD_INT 0
13185: PPUSH
13186: CALL_OW 49
// amApemans = amApemans ^ ape ;
13190: LD_ADDR_EXP 48
13194: PUSH
13195: LD_EXP 48
13199: PUSH
13200: LD_VAR 0 3
13204: ADD
13205: ST_TO_ADDR
// end ;
13206: GO 13085
13208: POP
13209: POP
// SetLives ( am_bun , americanBunkerHP ) ;
13210: LD_INT 23
13212: PPUSH
13213: LD_EXP 36
13217: PPUSH
13218: CALL_OW 234
// end ; end_of_file
13222: LD_VAR 0 1
13226: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
13227: LD_INT 0
13229: PPUSH
// PrepareHero ;
13230: CALL 13255 0 0
// PreparePokryshkinTeams ;
13234: CALL 13349 0 0
// PrepareJelena ;
13238: CALL 13614 0 0
// PrepareGnyevko ;
13242: CALL 13646 0 0
// PrepareKurin ;
13246: CALL 13317 0 0
// end ;
13250: LD_VAR 0 1
13254: RET
// function PrepareHero ; begin
13255: LD_INT 0
13257: PPUSH
// uc_side = 3 ;
13258: LD_ADDR_OWVAR 20
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
13266: LD_ADDR_EXP 49
13270: PUSH
13271: LD_STRING Burlak
13273: PPUSH
13274: LD_INT 0
13276: PPUSH
13277: CALL 8568 0 2
13281: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
13282: LD_EXP 49
13286: PPUSH
13287: LD_EXP 40
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: LD_EXP 40
13300: PUSH
13301: LD_INT 2
13303: ARRAY
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 48
// end ;
13312: LD_VAR 0 1
13316: RET
// function PrepareKurin ; begin
13317: LD_INT 0
13319: PPUSH
// uc_side = 6 ;
13320: LD_ADDR_OWVAR 20
13324: PUSH
13325: LD_INT 6
13327: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
13328: LD_ADDR_EXP 58
13332: PUSH
13333: LD_STRING Kurin
13335: PPUSH
13336: LD_INT 0
13338: PPUSH
13339: CALL 8568 0 2
13343: ST_TO_ADDR
// end ;
13344: LD_VAR 0 1
13348: RET
// function PreparePokryshkinTeams ; begin
13349: LD_INT 0
13351: PPUSH
// uc_side = 6 ;
13352: LD_ADDR_OWVAR 20
13356: PUSH
13357: LD_INT 6
13359: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
13360: LD_ADDR_EXP 50
13364: PUSH
13365: LD_STRING Pokryshkin
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL 8568 0 2
13375: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
13376: LD_ADDR_EXP 51
13380: PUSH
13381: LD_STRING Saseda
13383: PPUSH
13384: LD_INT 0
13386: PPUSH
13387: CALL 8568 0 2
13391: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
13392: LD_ADDR_EXP 52
13396: PUSH
13397: LD_STRING Jaworska
13399: PPUSH
13400: LD_INT 0
13402: PPUSH
13403: CALL 8568 0 2
13407: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
13408: LD_ADDR_EXP 53
13412: PUSH
13413: LD_STRING Balei
13415: PPUSH
13416: LD_INT 0
13418: PPUSH
13419: CALL 8568 0 2
13423: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
13424: LD_ADDR_EXP 54
13428: PUSH
13429: LD_STRING Belkov
13431: PPUSH
13432: LD_INT 0
13434: PPUSH
13435: CALL 8568 0 2
13439: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
13440: LD_EXP 50
13444: PPUSH
13445: LD_INT 25
13447: PPUSH
13448: LD_INT 0
13450: PPUSH
13451: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
13455: LD_EXP 51
13459: PPUSH
13460: LD_INT 17
13462: PPUSH
13463: LD_INT 0
13465: PPUSH
13466: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
13470: LD_EXP 52
13474: PPUSH
13475: LD_INT 17
13477: PPUSH
13478: LD_INT 0
13480: PPUSH
13481: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
13485: LD_EXP 53
13489: PPUSH
13490: LD_INT 17
13492: PPUSH
13493: LD_INT 0
13495: PPUSH
13496: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
13500: LD_EXP 54
13504: PPUSH
13505: LD_INT 17
13507: PPUSH
13508: LD_INT 0
13510: PPUSH
13511: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
13515: LD_ADDR_EXP 59
13519: PUSH
13520: LD_EXP 50
13524: PUSH
13525: LD_EXP 51
13529: PUSH
13530: LD_EXP 53
13534: PUSH
13535: LD_EXP 54
13539: PUSH
13540: LD_EXP 52
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: ST_TO_ADDR
// if Difficulty < 3 then
13552: LD_OWVAR 67
13556: PUSH
13557: LD_INT 3
13559: LESS
13560: IFFALSE 13609
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
13562: LD_ADDR_EXP 55
13566: PUSH
13567: LD_STRING Jaunzeme
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL 8568 0 2
13577: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
13578: LD_EXP 55
13582: PPUSH
13583: LD_INT 26
13585: PPUSH
13586: LD_INT 0
13588: PPUSH
13589: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
13593: LD_ADDR_EXP 59
13597: PUSH
13598: LD_EXP 59
13602: PUSH
13603: LD_EXP 55
13607: ADD
13608: ST_TO_ADDR
// end ; end ;
13609: LD_VAR 0 1
13613: RET
// function PrepareJelena ; begin
13614: LD_INT 0
13616: PPUSH
// uc_side = 5 ;
13617: LD_ADDR_OWVAR 20
13621: PUSH
13622: LD_INT 5
13624: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13625: LD_ADDR_EXP 56
13629: PUSH
13630: LD_STRING Kirilenkova
13632: PPUSH
13633: LD_INT 0
13635: PPUSH
13636: CALL 8568 0 2
13640: ST_TO_ADDR
// end ;
13641: LD_VAR 0 1
13645: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
// uc_side = 5 ;
13652: LD_ADDR_OWVAR 20
13656: PUSH
13657: LD_INT 5
13659: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13660: LD_ADDR_EXP 57
13664: PUSH
13665: LD_STRING Gnyevko
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL 8568 0 2
13675: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13676: LD_ADDR_VAR 0 4
13680: PUSH
13681: LD_EXP 41
13685: PUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_EXP 41
13693: PPUSH
13694: CALL_OW 12
13698: ARRAY
13699: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13700: LD_EXP 57
13704: PPUSH
13705: LD_VAR 0 4
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13730: LD_EXP 57
13734: PPUSH
13735: LD_EXP 42
13739: PPUSH
13740: CALL_OW 234
// ComHold ( Gnyevko ) ;
13744: LD_EXP 57
13748: PPUSH
13749: CALL_OW 140
// InitHC_All ( ) ;
13753: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_EXP 30
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_OWVAR 67
13798: ARRAY
13799: MINUS
13800: PUSH
13801: FOR_TO
13802: IFFALSE 13932
// begin uc_side = 0 ;
13804: LD_ADDR_OWVAR 20
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// uc_nation = nation_nature ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_INT 0
13819: ST_TO_ADDR
// hc_class = class_apeman ;
13820: LD_ADDR_OWVAR 28
13824: PUSH
13825: LD_INT 12
13827: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13828: LD_ADDR_OWVAR 31
13832: PUSH
13833: LD_EXP 31
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PUSH
13842: LD_EXP 31
13846: PUSH
13847: LD_INT 2
13849: ARRAY
13850: PUSH
13851: LD_EXP 31
13855: PUSH
13856: LD_INT 3
13858: ARRAY
13859: PUSH
13860: LD_EXP 31
13864: PUSH
13865: LD_INT 4
13867: ARRAY
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13875: LD_ADDR_OWVAR 35
13879: PUSH
13880: LD_EXP 37
13884: ST_TO_ADDR
// un = CreateHuman ;
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13895: LD_VAR 0 2
13899: PPUSH
13900: LD_EXP 57
13904: PPUSH
13905: CALL_OW 250
13909: PPUSH
13910: LD_EXP 57
13914: PPUSH
13915: CALL_OW 251
13919: PPUSH
13920: LD_INT 8
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 50
// end ;
13930: GO 13801
13932: POP
13933: POP
// end ; end_of_file
13934: LD_VAR 0 1
13938: RET
// export function CreateNature ; var i , un ; begin
13939: LD_INT 0
13941: PPUSH
13942: PPUSH
13943: PPUSH
// InitHC_All ( ) ;
13944: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] do
13948: LD_ADDR_VAR 0 2
13952: PUSH
13953: DOUBLE
13954: LD_INT 1
13956: DEC
13957: ST_TO_ADDR
13958: LD_EXP 30
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PUSH
13967: FOR_TO
13968: IFFALSE 14078
// begin uc_side = 0 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// uc_nation = nation_nature ;
13978: LD_ADDR_OWVAR 21
13982: PUSH
13983: LD_INT 0
13985: ST_TO_ADDR
// hc_class = class_apeman ;
13986: LD_ADDR_OWVAR 28
13990: PUSH
13991: LD_INT 12
13993: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13994: LD_ADDR_OWVAR 31
13998: PUSH
13999: LD_EXP 31
14003: PUSH
14004: LD_INT 1
14006: ARRAY
14007: PUSH
14008: LD_EXP 31
14012: PUSH
14013: LD_INT 2
14015: ARRAY
14016: PUSH
14017: LD_EXP 31
14021: PUSH
14022: LD_INT 3
14024: ARRAY
14025: PUSH
14026: LD_EXP 31
14030: PUSH
14031: LD_INT 4
14033: ARRAY
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: ST_TO_ADDR
// hc_agressivity = apeAgression ;
14041: LD_ADDR_OWVAR 35
14045: PUSH
14046: LD_EXP 37
14050: ST_TO_ADDR
// un = CreateHuman ;
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: CALL_OW 44
14060: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 16
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// end ;
14076: GO 13967
14078: POP
14079: POP
// for i := 1 to animalsAmount [ 2 ] do
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_EXP 30
14094: PUSH
14095: LD_INT 2
14097: ARRAY
14098: PUSH
14099: FOR_TO
14100: IFFALSE 14210
// begin uc_side = 0 ;
14102: LD_ADDR_OWVAR 20
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// uc_nation = nation_nature ;
14110: LD_ADDR_OWVAR 21
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// hc_class = class_phororhacos ;
14118: LD_ADDR_OWVAR 28
14122: PUSH
14123: LD_INT 18
14125: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14126: LD_ADDR_OWVAR 31
14130: PUSH
14131: LD_EXP 31
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PUSH
14140: LD_EXP 31
14144: PUSH
14145: LD_INT 2
14147: ARRAY
14148: PUSH
14149: LD_EXP 31
14153: PUSH
14154: LD_INT 3
14156: ARRAY
14157: PUSH
14158: LD_EXP 31
14162: PUSH
14163: LD_INT 4
14165: ARRAY
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14173: LD_ADDR_OWVAR 35
14177: PUSH
14178: LD_EXP 32
14182: ST_TO_ADDR
// un = CreateHuman ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: CALL_OW 44
14192: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14193: LD_VAR 0 3
14197: PPUSH
14198: LD_INT 15
14200: PPUSH
14201: LD_INT 0
14203: PPUSH
14204: CALL_OW 49
// end ;
14208: GO 14099
14210: POP
14211: POP
// for i := 1 to animalsAmount [ 3 ] do
14212: LD_ADDR_VAR 0 2
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_EXP 30
14226: PUSH
14227: LD_INT 3
14229: ARRAY
14230: PUSH
14231: FOR_TO
14232: IFFALSE 14342
// begin uc_side = 0 ;
14234: LD_ADDR_OWVAR 20
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// uc_nation = nation_nature ;
14242: LD_ADDR_OWVAR 21
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// hc_class = class_tiger ;
14250: LD_ADDR_OWVAR 28
14254: PUSH
14255: LD_INT 14
14257: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14258: LD_ADDR_OWVAR 31
14262: PUSH
14263: LD_EXP 31
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PUSH
14272: LD_EXP 31
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PUSH
14281: LD_EXP 31
14285: PUSH
14286: LD_INT 3
14288: ARRAY
14289: PUSH
14290: LD_EXP 31
14294: PUSH
14295: LD_INT 4
14297: ARRAY
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14305: LD_ADDR_OWVAR 35
14309: PUSH
14310: LD_EXP 32
14314: ST_TO_ADDR
// un = CreateHuman ;
14315: LD_ADDR_VAR 0 3
14319: PUSH
14320: CALL_OW 44
14324: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_INT 15
14332: PPUSH
14333: LD_INT 0
14335: PPUSH
14336: CALL_OW 49
// end ;
14340: GO 14231
14342: POP
14343: POP
// for i := 1 to animalsAmount [ 4 ] do
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_EXP 30
14358: PUSH
14359: LD_INT 4
14361: ARRAY
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14474
// begin uc_side = 0 ;
14366: LD_ADDR_OWVAR 20
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// uc_nation = nation_nature ;
14374: LD_ADDR_OWVAR 21
14378: PUSH
14379: LD_INT 0
14381: ST_TO_ADDR
// hc_class = 21 ;
14382: LD_ADDR_OWVAR 28
14386: PUSH
14387: LD_INT 21
14389: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14390: LD_ADDR_OWVAR 31
14394: PUSH
14395: LD_EXP 31
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PUSH
14404: LD_EXP 31
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PUSH
14413: LD_EXP 31
14417: PUSH
14418: LD_INT 3
14420: ARRAY
14421: PUSH
14422: LD_EXP 31
14426: PUSH
14427: LD_INT 4
14429: ARRAY
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14437: LD_ADDR_OWVAR 35
14441: PUSH
14442: LD_EXP 32
14446: ST_TO_ADDR
// un = CreateHuman ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: CALL_OW 44
14456: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14457: LD_VAR 0 3
14461: PPUSH
14462: LD_INT 15
14464: PPUSH
14465: LD_INT 0
14467: PPUSH
14468: CALL_OW 49
// end ;
14472: GO 14363
14474: POP
14475: POP
// end ; end_of_file
14476: LD_VAR 0 1
14480: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
14481: LD_VAR 0 1
14485: PUSH
14486: LD_EXP 49
14490: EQUAL
14491: PUSH
14492: LD_EXP 56
14496: PPUSH
14497: CALL_OW 255
14501: PUSH
14502: LD_INT 3
14504: EQUAL
14505: NOT
14506: AND
14507: PUSH
14508: LD_EXP 56
14512: PPUSH
14513: CALL_OW 302
14517: NOT
14518: AND
14519: IFFALSE 14525
// BurlakDying ;
14521: CALL 11798 0 0
// if unit = Gladstone then
14525: LD_VAR 0 1
14529: PUSH
14530: LD_EXP 47
14534: EQUAL
14535: IFFALSE 14545
// gladstoneStatus = 0 ;
14537: LD_ADDR_EXP 1
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// if unit = Johanna then
14545: LD_VAR 0 1
14549: PUSH
14550: LD_EXP 46
14554: EQUAL
14555: IFFALSE 14565
// johannaStatus = 0 ;
14557: LD_ADDR_EXP 2
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// end ;
14565: PPOPN 1
14567: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
14568: LD_VAR 0 1
14572: PUSH
14573: LD_EXP 49
14577: EQUAL
14578: IFFALSE 14584
// BurlakDying ;
14580: CALL 11798 0 0
// if GetSide ( unit ) = 3 then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 255
14593: PUSH
14594: LD_INT 3
14596: EQUAL
14597: IFFALSE 14613
// lostComradesCounter = lostComradesCounter + 1 ;
14599: LD_ADDR_EXP 23
14603: PUSH
14604: LD_EXP 23
14608: PUSH
14609: LD_INT 1
14611: PLUS
14612: ST_TO_ADDR
// if unit in kirovSolds then
14613: LD_VAR 0 1
14617: PUSH
14618: LD_EXP 59
14622: IN
14623: IFFALSE 14641
// kirovSolds = kirovSolds diff unit ;
14625: LD_ADDR_EXP 59
14629: PUSH
14630: LD_EXP 59
14634: PUSH
14635: LD_VAR 0 1
14639: DIFF
14640: ST_TO_ADDR
// end ;
14641: PPOPN 1
14643: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14644: LD_VAR 0 1
14648: PUSH
14649: LD_INT 3
14651: EQUAL
14652: PUSH
14653: LD_VAR 0 2
14657: PUSH
14658: LD_INT 1
14660: EQUAL
14661: AND
14662: PUSH
14663: LD_VAR 0 1
14667: PUSH
14668: LD_INT 1
14670: EQUAL
14671: PUSH
14672: LD_VAR 0 2
14676: PUSH
14677: LD_INT 3
14679: EQUAL
14680: AND
14681: PUSH
14682: LD_EXP 17
14686: PUSH
14687: LD_INT 1
14689: EQUAL
14690: AND
14691: OR
14692: IFFALSE 14698
// Dial_SecondAttack ;
14694: CALL 6016 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14698: LD_VAR 0 1
14702: PUSH
14703: LD_INT 3
14705: EQUAL
14706: PUSH
14707: LD_VAR 0 2
14711: PUSH
14712: LD_INT 6
14714: EQUAL
14715: AND
14716: PUSH
14717: LD_EXP 18
14721: NOT
14722: AND
14723: IFFALSE 14729
// Dialogue_AttackComrade ;
14725: CALL 4057 0 0
// end ; end_of_file
14729: PPOPN 2
14731: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14732: LD_EXP 56
14736: PPUSH
14737: CALL_OW 255
14741: PUSH
14742: LD_INT 3
14744: EQUAL
14745: PUSH
14746: LD_EXP 29
14750: PUSH
14751: LD_INT 525
14753: LESS
14754: AND
14755: IFFALSE 14767
14757: GO 14759
14759: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14760: LD_STRING ACH_YELENA
14762: PPUSH
14763: CALL_OW 543
14767: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14768: LD_INT 23
14770: PUSH
14771: LD_INT 0
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 2
14780: PUSH
14781: LD_INT 25
14783: PUSH
14784: LD_INT 14
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 25
14793: PUSH
14794: LD_INT 18
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 25
14803: PUSH
14804: LD_INT 12
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: NOT
14826: IFFALSE 14838
14828: GO 14830
14830: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14831: LD_STRING ACH_NATURE
14833: PPUSH
14834: CALL_OW 543
14838: END
// every 0 0$1 do
14839: GO 14841
14841: DISABLE
// begin enable ;
14842: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14843: LD_STRING updateTimer(
14845: PUSH
14846: LD_OWVAR 1
14850: STR
14851: PUSH
14852: LD_STRING );
14854: STR
14855: PPUSH
14856: CALL_OW 559
// end ;
14860: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14861: LD_INT 0
14863: PPUSH
// if p2 = 100 then
14864: LD_VAR 0 2
14868: PUSH
14869: LD_INT 100
14871: EQUAL
14872: IFFALSE 15875
// begin if not StreamModeActive then
14874: LD_EXP 60
14878: NOT
14879: IFFALSE 14889
// StreamModeActive := true ;
14881: LD_ADDR_EXP 60
14885: PUSH
14886: LD_INT 1
14888: ST_TO_ADDR
// if p3 = 0 then
14889: LD_VAR 0 3
14893: PUSH
14894: LD_INT 0
14896: EQUAL
14897: IFFALSE 14903
// InitStreamMode ;
14899: CALL 16035 0 0
// if p3 = 1 then
14903: LD_VAR 0 3
14907: PUSH
14908: LD_INT 1
14910: EQUAL
14911: IFFALSE 14921
// sRocket := true ;
14913: LD_ADDR_EXP 65
14917: PUSH
14918: LD_INT 1
14920: ST_TO_ADDR
// if p3 = 2 then
14921: LD_VAR 0 3
14925: PUSH
14926: LD_INT 2
14928: EQUAL
14929: IFFALSE 14939
// sSpeed := true ;
14931: LD_ADDR_EXP 64
14935: PUSH
14936: LD_INT 1
14938: ST_TO_ADDR
// if p3 = 3 then
14939: LD_VAR 0 3
14943: PUSH
14944: LD_INT 3
14946: EQUAL
14947: IFFALSE 14957
// sEngine := true ;
14949: LD_ADDR_EXP 66
14953: PUSH
14954: LD_INT 1
14956: ST_TO_ADDR
// if p3 = 4 then
14957: LD_VAR 0 3
14961: PUSH
14962: LD_INT 4
14964: EQUAL
14965: IFFALSE 14975
// sSpec := true ;
14967: LD_ADDR_EXP 63
14971: PUSH
14972: LD_INT 1
14974: ST_TO_ADDR
// if p3 = 5 then
14975: LD_VAR 0 3
14979: PUSH
14980: LD_INT 5
14982: EQUAL
14983: IFFALSE 14993
// sLevel := true ;
14985: LD_ADDR_EXP 67
14989: PUSH
14990: LD_INT 1
14992: ST_TO_ADDR
// if p3 = 6 then
14993: LD_VAR 0 3
14997: PUSH
14998: LD_INT 6
15000: EQUAL
15001: IFFALSE 15011
// sArmoury := true ;
15003: LD_ADDR_EXP 68
15007: PUSH
15008: LD_INT 1
15010: ST_TO_ADDR
// if p3 = 7 then
15011: LD_VAR 0 3
15015: PUSH
15016: LD_INT 7
15018: EQUAL
15019: IFFALSE 15029
// sRadar := true ;
15021: LD_ADDR_EXP 69
15025: PUSH
15026: LD_INT 1
15028: ST_TO_ADDR
// if p3 = 8 then
15029: LD_VAR 0 3
15033: PUSH
15034: LD_INT 8
15036: EQUAL
15037: IFFALSE 15047
// sBunker := true ;
15039: LD_ADDR_EXP 70
15043: PUSH
15044: LD_INT 1
15046: ST_TO_ADDR
// if p3 = 9 then
15047: LD_VAR 0 3
15051: PUSH
15052: LD_INT 9
15054: EQUAL
15055: IFFALSE 15065
// sHack := true ;
15057: LD_ADDR_EXP 71
15061: PUSH
15062: LD_INT 1
15064: ST_TO_ADDR
// if p3 = 10 then
15065: LD_VAR 0 3
15069: PUSH
15070: LD_INT 10
15072: EQUAL
15073: IFFALSE 15083
// sFire := true ;
15075: LD_ADDR_EXP 72
15079: PUSH
15080: LD_INT 1
15082: ST_TO_ADDR
// if p3 = 11 then
15083: LD_VAR 0 3
15087: PUSH
15088: LD_INT 11
15090: EQUAL
15091: IFFALSE 15101
// sRefresh := true ;
15093: LD_ADDR_EXP 73
15097: PUSH
15098: LD_INT 1
15100: ST_TO_ADDR
// if p3 = 12 then
15101: LD_VAR 0 3
15105: PUSH
15106: LD_INT 12
15108: EQUAL
15109: IFFALSE 15119
// sExp := true ;
15111: LD_ADDR_EXP 74
15115: PUSH
15116: LD_INT 1
15118: ST_TO_ADDR
// if p3 = 13 then
15119: LD_VAR 0 3
15123: PUSH
15124: LD_INT 13
15126: EQUAL
15127: IFFALSE 15137
// sDepot := true ;
15129: LD_ADDR_EXP 75
15133: PUSH
15134: LD_INT 1
15136: ST_TO_ADDR
// if p3 = 14 then
15137: LD_VAR 0 3
15141: PUSH
15142: LD_INT 14
15144: EQUAL
15145: IFFALSE 15155
// sFlag := true ;
15147: LD_ADDR_EXP 76
15151: PUSH
15152: LD_INT 1
15154: ST_TO_ADDR
// if p3 = 15 then
15155: LD_VAR 0 3
15159: PUSH
15160: LD_INT 15
15162: EQUAL
15163: IFFALSE 15173
// sKamikadze := true ;
15165: LD_ADDR_EXP 84
15169: PUSH
15170: LD_INT 1
15172: ST_TO_ADDR
// if p3 = 16 then
15173: LD_VAR 0 3
15177: PUSH
15178: LD_INT 16
15180: EQUAL
15181: IFFALSE 15191
// sTroll := true ;
15183: LD_ADDR_EXP 85
15187: PUSH
15188: LD_INT 1
15190: ST_TO_ADDR
// if p3 = 17 then
15191: LD_VAR 0 3
15195: PUSH
15196: LD_INT 17
15198: EQUAL
15199: IFFALSE 15209
// sSlow := true ;
15201: LD_ADDR_EXP 86
15205: PUSH
15206: LD_INT 1
15208: ST_TO_ADDR
// if p3 = 18 then
15209: LD_VAR 0 3
15213: PUSH
15214: LD_INT 18
15216: EQUAL
15217: IFFALSE 15227
// sLack := true ;
15219: LD_ADDR_EXP 87
15223: PUSH
15224: LD_INT 1
15226: ST_TO_ADDR
// if p3 = 19 then
15227: LD_VAR 0 3
15231: PUSH
15232: LD_INT 19
15234: EQUAL
15235: IFFALSE 15245
// sTank := true ;
15237: LD_ADDR_EXP 89
15241: PUSH
15242: LD_INT 1
15244: ST_TO_ADDR
// if p3 = 20 then
15245: LD_VAR 0 3
15249: PUSH
15250: LD_INT 20
15252: EQUAL
15253: IFFALSE 15263
// sRemote := true ;
15255: LD_ADDR_EXP 90
15259: PUSH
15260: LD_INT 1
15262: ST_TO_ADDR
// if p3 = 21 then
15263: LD_VAR 0 3
15267: PUSH
15268: LD_INT 21
15270: EQUAL
15271: IFFALSE 15281
// sPowell := true ;
15273: LD_ADDR_EXP 91
15277: PUSH
15278: LD_INT 1
15280: ST_TO_ADDR
// if p3 = 22 then
15281: LD_VAR 0 3
15285: PUSH
15286: LD_INT 22
15288: EQUAL
15289: IFFALSE 15299
// sTeleport := true ;
15291: LD_ADDR_EXP 94
15295: PUSH
15296: LD_INT 1
15298: ST_TO_ADDR
// if p3 = 23 then
15299: LD_VAR 0 3
15303: PUSH
15304: LD_INT 23
15306: EQUAL
15307: IFFALSE 15317
// sOilTower := true ;
15309: LD_ADDR_EXP 96
15313: PUSH
15314: LD_INT 1
15316: ST_TO_ADDR
// if p3 = 24 then
15317: LD_VAR 0 3
15321: PUSH
15322: LD_INT 24
15324: EQUAL
15325: IFFALSE 15335
// sShovel := true ;
15327: LD_ADDR_EXP 97
15331: PUSH
15332: LD_INT 1
15334: ST_TO_ADDR
// if p3 = 25 then
15335: LD_VAR 0 3
15339: PUSH
15340: LD_INT 25
15342: EQUAL
15343: IFFALSE 15353
// sSheik := true ;
15345: LD_ADDR_EXP 98
15349: PUSH
15350: LD_INT 1
15352: ST_TO_ADDR
// if p3 = 26 then
15353: LD_VAR 0 3
15357: PUSH
15358: LD_INT 26
15360: EQUAL
15361: IFFALSE 15371
// sEarthquake := true ;
15363: LD_ADDR_EXP 100
15367: PUSH
15368: LD_INT 1
15370: ST_TO_ADDR
// if p3 = 27 then
15371: LD_VAR 0 3
15375: PUSH
15376: LD_INT 27
15378: EQUAL
15379: IFFALSE 15389
// sAI := true ;
15381: LD_ADDR_EXP 101
15385: PUSH
15386: LD_INT 1
15388: ST_TO_ADDR
// if p3 = 28 then
15389: LD_VAR 0 3
15393: PUSH
15394: LD_INT 28
15396: EQUAL
15397: IFFALSE 15407
// sCargo := true ;
15399: LD_ADDR_EXP 104
15403: PUSH
15404: LD_INT 1
15406: ST_TO_ADDR
// if p3 = 29 then
15407: LD_VAR 0 3
15411: PUSH
15412: LD_INT 29
15414: EQUAL
15415: IFFALSE 15425
// sDLaser := true ;
15417: LD_ADDR_EXP 105
15421: PUSH
15422: LD_INT 1
15424: ST_TO_ADDR
// if p3 = 30 then
15425: LD_VAR 0 3
15429: PUSH
15430: LD_INT 30
15432: EQUAL
15433: IFFALSE 15443
// sExchange := true ;
15435: LD_ADDR_EXP 106
15439: PUSH
15440: LD_INT 1
15442: ST_TO_ADDR
// if p3 = 31 then
15443: LD_VAR 0 3
15447: PUSH
15448: LD_INT 31
15450: EQUAL
15451: IFFALSE 15461
// sFac := true ;
15453: LD_ADDR_EXP 107
15457: PUSH
15458: LD_INT 1
15460: ST_TO_ADDR
// if p3 = 32 then
15461: LD_VAR 0 3
15465: PUSH
15466: LD_INT 32
15468: EQUAL
15469: IFFALSE 15479
// sPower := true ;
15471: LD_ADDR_EXP 108
15475: PUSH
15476: LD_INT 1
15478: ST_TO_ADDR
// if p3 = 33 then
15479: LD_VAR 0 3
15483: PUSH
15484: LD_INT 33
15486: EQUAL
15487: IFFALSE 15497
// sRandom := true ;
15489: LD_ADDR_EXP 109
15493: PUSH
15494: LD_INT 1
15496: ST_TO_ADDR
// if p3 = 34 then
15497: LD_VAR 0 3
15501: PUSH
15502: LD_INT 34
15504: EQUAL
15505: IFFALSE 15515
// sShield := true ;
15507: LD_ADDR_EXP 110
15511: PUSH
15512: LD_INT 1
15514: ST_TO_ADDR
// if p3 = 35 then
15515: LD_VAR 0 3
15519: PUSH
15520: LD_INT 35
15522: EQUAL
15523: IFFALSE 15533
// sTime := true ;
15525: LD_ADDR_EXP 111
15529: PUSH
15530: LD_INT 1
15532: ST_TO_ADDR
// if p3 = 36 then
15533: LD_VAR 0 3
15537: PUSH
15538: LD_INT 36
15540: EQUAL
15541: IFFALSE 15551
// sTools := true ;
15543: LD_ADDR_EXP 112
15547: PUSH
15548: LD_INT 1
15550: ST_TO_ADDR
// if p3 = 101 then
15551: LD_VAR 0 3
15555: PUSH
15556: LD_INT 101
15558: EQUAL
15559: IFFALSE 15569
// sSold := true ;
15561: LD_ADDR_EXP 77
15565: PUSH
15566: LD_INT 1
15568: ST_TO_ADDR
// if p3 = 102 then
15569: LD_VAR 0 3
15573: PUSH
15574: LD_INT 102
15576: EQUAL
15577: IFFALSE 15587
// sDiff := true ;
15579: LD_ADDR_EXP 78
15583: PUSH
15584: LD_INT 1
15586: ST_TO_ADDR
// if p3 = 103 then
15587: LD_VAR 0 3
15591: PUSH
15592: LD_INT 103
15594: EQUAL
15595: IFFALSE 15605
// sFog := true ;
15597: LD_ADDR_EXP 81
15601: PUSH
15602: LD_INT 1
15604: ST_TO_ADDR
// if p3 = 104 then
15605: LD_VAR 0 3
15609: PUSH
15610: LD_INT 104
15612: EQUAL
15613: IFFALSE 15623
// sReset := true ;
15615: LD_ADDR_EXP 82
15619: PUSH
15620: LD_INT 1
15622: ST_TO_ADDR
// if p3 = 105 then
15623: LD_VAR 0 3
15627: PUSH
15628: LD_INT 105
15630: EQUAL
15631: IFFALSE 15641
// sSun := true ;
15633: LD_ADDR_EXP 83
15637: PUSH
15638: LD_INT 1
15640: ST_TO_ADDR
// if p3 = 106 then
15641: LD_VAR 0 3
15645: PUSH
15646: LD_INT 106
15648: EQUAL
15649: IFFALSE 15659
// sTiger := true ;
15651: LD_ADDR_EXP 79
15655: PUSH
15656: LD_INT 1
15658: ST_TO_ADDR
// if p3 = 107 then
15659: LD_VAR 0 3
15663: PUSH
15664: LD_INT 107
15666: EQUAL
15667: IFFALSE 15677
// sBomb := true ;
15669: LD_ADDR_EXP 80
15673: PUSH
15674: LD_INT 1
15676: ST_TO_ADDR
// if p3 = 108 then
15677: LD_VAR 0 3
15681: PUSH
15682: LD_INT 108
15684: EQUAL
15685: IFFALSE 15695
// sWound := true ;
15687: LD_ADDR_EXP 88
15691: PUSH
15692: LD_INT 1
15694: ST_TO_ADDR
// if p3 = 109 then
15695: LD_VAR 0 3
15699: PUSH
15700: LD_INT 109
15702: EQUAL
15703: IFFALSE 15713
// sBetray := true ;
15705: LD_ADDR_EXP 92
15709: PUSH
15710: LD_INT 1
15712: ST_TO_ADDR
// if p3 = 110 then
15713: LD_VAR 0 3
15717: PUSH
15718: LD_INT 110
15720: EQUAL
15721: IFFALSE 15731
// sContamin := true ;
15723: LD_ADDR_EXP 93
15727: PUSH
15728: LD_INT 1
15730: ST_TO_ADDR
// if p3 = 111 then
15731: LD_VAR 0 3
15735: PUSH
15736: LD_INT 111
15738: EQUAL
15739: IFFALSE 15749
// sOil := true ;
15741: LD_ADDR_EXP 95
15745: PUSH
15746: LD_INT 1
15748: ST_TO_ADDR
// if p3 = 112 then
15749: LD_VAR 0 3
15753: PUSH
15754: LD_INT 112
15756: EQUAL
15757: IFFALSE 15767
// sStu := true ;
15759: LD_ADDR_EXP 99
15763: PUSH
15764: LD_INT 1
15766: ST_TO_ADDR
// if p3 = 113 then
15767: LD_VAR 0 3
15771: PUSH
15772: LD_INT 113
15774: EQUAL
15775: IFFALSE 15785
// sBazooka := true ;
15777: LD_ADDR_EXP 102
15781: PUSH
15782: LD_INT 1
15784: ST_TO_ADDR
// if p3 = 114 then
15785: LD_VAR 0 3
15789: PUSH
15790: LD_INT 114
15792: EQUAL
15793: IFFALSE 15803
// sMortar := true ;
15795: LD_ADDR_EXP 103
15799: PUSH
15800: LD_INT 1
15802: ST_TO_ADDR
// if p3 = 115 then
15803: LD_VAR 0 3
15807: PUSH
15808: LD_INT 115
15810: EQUAL
15811: IFFALSE 15821
// sRanger := true ;
15813: LD_ADDR_EXP 113
15817: PUSH
15818: LD_INT 1
15820: ST_TO_ADDR
// if p3 = 116 then
15821: LD_VAR 0 3
15825: PUSH
15826: LD_INT 116
15828: EQUAL
15829: IFFALSE 15839
// sComputer := true ;
15831: LD_ADDR_EXP 114
15835: PUSH
15836: LD_INT 1
15838: ST_TO_ADDR
// if p3 = 117 then
15839: LD_VAR 0 3
15843: PUSH
15844: LD_INT 117
15846: EQUAL
15847: IFFALSE 15857
// s30 := true ;
15849: LD_ADDR_EXP 115
15853: PUSH
15854: LD_INT 1
15856: ST_TO_ADDR
// if p3 = 118 then
15857: LD_VAR 0 3
15861: PUSH
15862: LD_INT 118
15864: EQUAL
15865: IFFALSE 15875
// s60 := true ;
15867: LD_ADDR_EXP 116
15871: PUSH
15872: LD_INT 1
15874: ST_TO_ADDR
// end ; if p2 = 101 then
15875: LD_VAR 0 2
15879: PUSH
15880: LD_INT 101
15882: EQUAL
15883: IFFALSE 16011
// begin case p3 of 1 :
15885: LD_VAR 0 3
15889: PUSH
15890: LD_INT 1
15892: DOUBLE
15893: EQUAL
15894: IFTRUE 15898
15896: GO 15905
15898: POP
// hHackUnlimitedResources ; 2 :
15899: CALL 27607 0 0
15903: GO 16011
15905: LD_INT 2
15907: DOUBLE
15908: EQUAL
15909: IFTRUE 15913
15911: GO 15920
15913: POP
// hHackSetLevel10 ; 3 :
15914: CALL 27740 0 0
15918: GO 16011
15920: LD_INT 3
15922: DOUBLE
15923: EQUAL
15924: IFTRUE 15928
15926: GO 15935
15928: POP
// hHackSetLevel10YourUnits ; 4 :
15929: CALL 27825 0 0
15933: GO 16011
15935: LD_INT 4
15937: DOUBLE
15938: EQUAL
15939: IFTRUE 15943
15941: GO 15950
15943: POP
// hHackInvincible ; 5 :
15944: CALL 28273 0 0
15948: GO 16011
15950: LD_INT 5
15952: DOUBLE
15953: EQUAL
15954: IFTRUE 15958
15956: GO 15965
15958: POP
// hHackInvisible ; 6 :
15959: CALL 28384 0 0
15963: GO 16011
15965: LD_INT 6
15967: DOUBLE
15968: EQUAL
15969: IFTRUE 15973
15971: GO 15980
15973: POP
// hHackChangeYourSide ; 7 :
15974: CALL 28441 0 0
15978: GO 16011
15980: LD_INT 7
15982: DOUBLE
15983: EQUAL
15984: IFTRUE 15988
15986: GO 15995
15988: POP
// hHackChangeUnitSide ; 8 :
15989: CALL 28483 0 0
15993: GO 16011
15995: LD_INT 8
15997: DOUBLE
15998: EQUAL
15999: IFTRUE 16003
16001: GO 16010
16003: POP
// hHackFog ; end ;
16004: CALL 28584 0 0
16008: GO 16011
16010: POP
// end ; end ;
16011: LD_VAR 0 7
16015: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16016: GO 16018
16018: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16019: LD_STRING initStreamRollete();
16021: PPUSH
16022: CALL_OW 559
// InitStreamMode ;
16026: CALL 16035 0 0
// DefineStreamItems ( ) ;
16030: CALL 16499 0 0
// end ;
16034: END
// function InitStreamMode ; begin
16035: LD_INT 0
16037: PPUSH
// streamModeActive := false ;
16038: LD_ADDR_EXP 60
16042: PUSH
16043: LD_INT 0
16045: ST_TO_ADDR
// normalCounter := 36 ;
16046: LD_ADDR_EXP 61
16050: PUSH
16051: LD_INT 36
16053: ST_TO_ADDR
// hardcoreCounter := 16 ;
16054: LD_ADDR_EXP 62
16058: PUSH
16059: LD_INT 16
16061: ST_TO_ADDR
// sRocket := false ;
16062: LD_ADDR_EXP 65
16066: PUSH
16067: LD_INT 0
16069: ST_TO_ADDR
// sSpeed := false ;
16070: LD_ADDR_EXP 64
16074: PUSH
16075: LD_INT 0
16077: ST_TO_ADDR
// sEngine := false ;
16078: LD_ADDR_EXP 66
16082: PUSH
16083: LD_INT 0
16085: ST_TO_ADDR
// sSpec := false ;
16086: LD_ADDR_EXP 63
16090: PUSH
16091: LD_INT 0
16093: ST_TO_ADDR
// sLevel := false ;
16094: LD_ADDR_EXP 67
16098: PUSH
16099: LD_INT 0
16101: ST_TO_ADDR
// sArmoury := false ;
16102: LD_ADDR_EXP 68
16106: PUSH
16107: LD_INT 0
16109: ST_TO_ADDR
// sRadar := false ;
16110: LD_ADDR_EXP 69
16114: PUSH
16115: LD_INT 0
16117: ST_TO_ADDR
// sBunker := false ;
16118: LD_ADDR_EXP 70
16122: PUSH
16123: LD_INT 0
16125: ST_TO_ADDR
// sHack := false ;
16126: LD_ADDR_EXP 71
16130: PUSH
16131: LD_INT 0
16133: ST_TO_ADDR
// sFire := false ;
16134: LD_ADDR_EXP 72
16138: PUSH
16139: LD_INT 0
16141: ST_TO_ADDR
// sRefresh := false ;
16142: LD_ADDR_EXP 73
16146: PUSH
16147: LD_INT 0
16149: ST_TO_ADDR
// sExp := false ;
16150: LD_ADDR_EXP 74
16154: PUSH
16155: LD_INT 0
16157: ST_TO_ADDR
// sDepot := false ;
16158: LD_ADDR_EXP 75
16162: PUSH
16163: LD_INT 0
16165: ST_TO_ADDR
// sFlag := false ;
16166: LD_ADDR_EXP 76
16170: PUSH
16171: LD_INT 0
16173: ST_TO_ADDR
// sKamikadze := false ;
16174: LD_ADDR_EXP 84
16178: PUSH
16179: LD_INT 0
16181: ST_TO_ADDR
// sTroll := false ;
16182: LD_ADDR_EXP 85
16186: PUSH
16187: LD_INT 0
16189: ST_TO_ADDR
// sSlow := false ;
16190: LD_ADDR_EXP 86
16194: PUSH
16195: LD_INT 0
16197: ST_TO_ADDR
// sLack := false ;
16198: LD_ADDR_EXP 87
16202: PUSH
16203: LD_INT 0
16205: ST_TO_ADDR
// sTank := false ;
16206: LD_ADDR_EXP 89
16210: PUSH
16211: LD_INT 0
16213: ST_TO_ADDR
// sRemote := false ;
16214: LD_ADDR_EXP 90
16218: PUSH
16219: LD_INT 0
16221: ST_TO_ADDR
// sPowell := false ;
16222: LD_ADDR_EXP 91
16226: PUSH
16227: LD_INT 0
16229: ST_TO_ADDR
// sTeleport := false ;
16230: LD_ADDR_EXP 94
16234: PUSH
16235: LD_INT 0
16237: ST_TO_ADDR
// sOilTower := false ;
16238: LD_ADDR_EXP 96
16242: PUSH
16243: LD_INT 0
16245: ST_TO_ADDR
// sShovel := false ;
16246: LD_ADDR_EXP 97
16250: PUSH
16251: LD_INT 0
16253: ST_TO_ADDR
// sSheik := false ;
16254: LD_ADDR_EXP 98
16258: PUSH
16259: LD_INT 0
16261: ST_TO_ADDR
// sEarthquake := false ;
16262: LD_ADDR_EXP 100
16266: PUSH
16267: LD_INT 0
16269: ST_TO_ADDR
// sAI := false ;
16270: LD_ADDR_EXP 101
16274: PUSH
16275: LD_INT 0
16277: ST_TO_ADDR
// sCargo := false ;
16278: LD_ADDR_EXP 104
16282: PUSH
16283: LD_INT 0
16285: ST_TO_ADDR
// sDLaser := false ;
16286: LD_ADDR_EXP 105
16290: PUSH
16291: LD_INT 0
16293: ST_TO_ADDR
// sExchange := false ;
16294: LD_ADDR_EXP 106
16298: PUSH
16299: LD_INT 0
16301: ST_TO_ADDR
// sFac := false ;
16302: LD_ADDR_EXP 107
16306: PUSH
16307: LD_INT 0
16309: ST_TO_ADDR
// sPower := false ;
16310: LD_ADDR_EXP 108
16314: PUSH
16315: LD_INT 0
16317: ST_TO_ADDR
// sRandom := false ;
16318: LD_ADDR_EXP 109
16322: PUSH
16323: LD_INT 0
16325: ST_TO_ADDR
// sShield := false ;
16326: LD_ADDR_EXP 110
16330: PUSH
16331: LD_INT 0
16333: ST_TO_ADDR
// sTime := false ;
16334: LD_ADDR_EXP 111
16338: PUSH
16339: LD_INT 0
16341: ST_TO_ADDR
// sTools := false ;
16342: LD_ADDR_EXP 112
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// sSold := false ;
16350: LD_ADDR_EXP 77
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// sDiff := false ;
16358: LD_ADDR_EXP 78
16362: PUSH
16363: LD_INT 0
16365: ST_TO_ADDR
// sFog := false ;
16366: LD_ADDR_EXP 81
16370: PUSH
16371: LD_INT 0
16373: ST_TO_ADDR
// sReset := false ;
16374: LD_ADDR_EXP 82
16378: PUSH
16379: LD_INT 0
16381: ST_TO_ADDR
// sSun := false ;
16382: LD_ADDR_EXP 83
16386: PUSH
16387: LD_INT 0
16389: ST_TO_ADDR
// sTiger := false ;
16390: LD_ADDR_EXP 79
16394: PUSH
16395: LD_INT 0
16397: ST_TO_ADDR
// sBomb := false ;
16398: LD_ADDR_EXP 80
16402: PUSH
16403: LD_INT 0
16405: ST_TO_ADDR
// sWound := false ;
16406: LD_ADDR_EXP 88
16410: PUSH
16411: LD_INT 0
16413: ST_TO_ADDR
// sBetray := false ;
16414: LD_ADDR_EXP 92
16418: PUSH
16419: LD_INT 0
16421: ST_TO_ADDR
// sContamin := false ;
16422: LD_ADDR_EXP 93
16426: PUSH
16427: LD_INT 0
16429: ST_TO_ADDR
// sOil := false ;
16430: LD_ADDR_EXP 95
16434: PUSH
16435: LD_INT 0
16437: ST_TO_ADDR
// sStu := false ;
16438: LD_ADDR_EXP 99
16442: PUSH
16443: LD_INT 0
16445: ST_TO_ADDR
// sBazooka := false ;
16446: LD_ADDR_EXP 102
16450: PUSH
16451: LD_INT 0
16453: ST_TO_ADDR
// sMortar := false ;
16454: LD_ADDR_EXP 103
16458: PUSH
16459: LD_INT 0
16461: ST_TO_ADDR
// sRanger := false ;
16462: LD_ADDR_EXP 113
16466: PUSH
16467: LD_INT 0
16469: ST_TO_ADDR
// sComputer := false ;
16470: LD_ADDR_EXP 114
16474: PUSH
16475: LD_INT 0
16477: ST_TO_ADDR
// s30 := false ;
16478: LD_ADDR_EXP 115
16482: PUSH
16483: LD_INT 0
16485: ST_TO_ADDR
// s60 := false ;
16486: LD_ADDR_EXP 116
16490: PUSH
16491: LD_INT 0
16493: ST_TO_ADDR
// end ;
16494: LD_VAR 0 1
16498: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16499: LD_INT 0
16501: PPUSH
16502: PPUSH
16503: PPUSH
16504: PPUSH
16505: PPUSH
// result := [ ] ;
16506: LD_ADDR_VAR 0 1
16510: PUSH
16511: EMPTY
16512: ST_TO_ADDR
// if campaign_id = 1 then
16513: LD_OWVAR 69
16517: PUSH
16518: LD_INT 1
16520: EQUAL
16521: IFFALSE 19687
// begin case mission_number of 1 :
16523: LD_OWVAR 70
16527: PUSH
16528: LD_INT 1
16530: DOUBLE
16531: EQUAL
16532: IFTRUE 16536
16534: GO 16612
16536: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16537: LD_ADDR_VAR 0 1
16541: PUSH
16542: LD_INT 2
16544: PUSH
16545: LD_INT 4
16547: PUSH
16548: LD_INT 11
16550: PUSH
16551: LD_INT 12
16553: PUSH
16554: LD_INT 15
16556: PUSH
16557: LD_INT 16
16559: PUSH
16560: LD_INT 22
16562: PUSH
16563: LD_INT 23
16565: PUSH
16566: LD_INT 26
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: LIST
16573: LIST
16574: LIST
16575: LIST
16576: LIST
16577: LIST
16578: LIST
16579: PUSH
16580: LD_INT 101
16582: PUSH
16583: LD_INT 102
16585: PUSH
16586: LD_INT 106
16588: PUSH
16589: LD_INT 116
16591: PUSH
16592: LD_INT 117
16594: PUSH
16595: LD_INT 118
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: ST_TO_ADDR
16610: GO 19685
16612: LD_INT 2
16614: DOUBLE
16615: EQUAL
16616: IFTRUE 16620
16618: GO 16704
16620: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16621: LD_ADDR_VAR 0 1
16625: PUSH
16626: LD_INT 2
16628: PUSH
16629: LD_INT 4
16631: PUSH
16632: LD_INT 11
16634: PUSH
16635: LD_INT 12
16637: PUSH
16638: LD_INT 15
16640: PUSH
16641: LD_INT 16
16643: PUSH
16644: LD_INT 22
16646: PUSH
16647: LD_INT 23
16649: PUSH
16650: LD_INT 26
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: PUSH
16664: LD_INT 101
16666: PUSH
16667: LD_INT 102
16669: PUSH
16670: LD_INT 105
16672: PUSH
16673: LD_INT 106
16675: PUSH
16676: LD_INT 108
16678: PUSH
16679: LD_INT 116
16681: PUSH
16682: LD_INT 117
16684: PUSH
16685: LD_INT 118
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: ST_TO_ADDR
16702: GO 19685
16704: LD_INT 3
16706: DOUBLE
16707: EQUAL
16708: IFTRUE 16712
16710: GO 16800
16712: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16713: LD_ADDR_VAR 0 1
16717: PUSH
16718: LD_INT 2
16720: PUSH
16721: LD_INT 4
16723: PUSH
16724: LD_INT 5
16726: PUSH
16727: LD_INT 11
16729: PUSH
16730: LD_INT 12
16732: PUSH
16733: LD_INT 15
16735: PUSH
16736: LD_INT 16
16738: PUSH
16739: LD_INT 22
16741: PUSH
16742: LD_INT 26
16744: PUSH
16745: LD_INT 36
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: PUSH
16760: LD_INT 101
16762: PUSH
16763: LD_INT 102
16765: PUSH
16766: LD_INT 105
16768: PUSH
16769: LD_INT 106
16771: PUSH
16772: LD_INT 108
16774: PUSH
16775: LD_INT 116
16777: PUSH
16778: LD_INT 117
16780: PUSH
16781: LD_INT 118
16783: PUSH
16784: EMPTY
16785: LIST
16786: LIST
16787: LIST
16788: LIST
16789: LIST
16790: LIST
16791: LIST
16792: LIST
16793: PUSH
16794: EMPTY
16795: LIST
16796: LIST
16797: ST_TO_ADDR
16798: GO 19685
16800: LD_INT 4
16802: DOUBLE
16803: EQUAL
16804: IFTRUE 16808
16806: GO 16904
16808: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16809: LD_ADDR_VAR 0 1
16813: PUSH
16814: LD_INT 2
16816: PUSH
16817: LD_INT 4
16819: PUSH
16820: LD_INT 5
16822: PUSH
16823: LD_INT 8
16825: PUSH
16826: LD_INT 11
16828: PUSH
16829: LD_INT 12
16831: PUSH
16832: LD_INT 15
16834: PUSH
16835: LD_INT 16
16837: PUSH
16838: LD_INT 22
16840: PUSH
16841: LD_INT 23
16843: PUSH
16844: LD_INT 26
16846: PUSH
16847: LD_INT 36
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: PUSH
16864: LD_INT 101
16866: PUSH
16867: LD_INT 102
16869: PUSH
16870: LD_INT 105
16872: PUSH
16873: LD_INT 106
16875: PUSH
16876: LD_INT 108
16878: PUSH
16879: LD_INT 116
16881: PUSH
16882: LD_INT 117
16884: PUSH
16885: LD_INT 118
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: ST_TO_ADDR
16902: GO 19685
16904: LD_INT 5
16906: DOUBLE
16907: EQUAL
16908: IFTRUE 16912
16910: GO 17024
16912: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16913: LD_ADDR_VAR 0 1
16917: PUSH
16918: LD_INT 2
16920: PUSH
16921: LD_INT 4
16923: PUSH
16924: LD_INT 5
16926: PUSH
16927: LD_INT 6
16929: PUSH
16930: LD_INT 8
16932: PUSH
16933: LD_INT 11
16935: PUSH
16936: LD_INT 12
16938: PUSH
16939: LD_INT 15
16941: PUSH
16942: LD_INT 16
16944: PUSH
16945: LD_INT 22
16947: PUSH
16948: LD_INT 23
16950: PUSH
16951: LD_INT 25
16953: PUSH
16954: LD_INT 26
16956: PUSH
16957: LD_INT 36
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 101
16978: PUSH
16979: LD_INT 102
16981: PUSH
16982: LD_INT 105
16984: PUSH
16985: LD_INT 106
16987: PUSH
16988: LD_INT 108
16990: PUSH
16991: LD_INT 109
16993: PUSH
16994: LD_INT 112
16996: PUSH
16997: LD_INT 116
16999: PUSH
17000: LD_INT 117
17002: PUSH
17003: LD_INT 118
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: LIST
17014: LIST
17015: LIST
17016: LIST
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: ST_TO_ADDR
17022: GO 19685
17024: LD_INT 6
17026: DOUBLE
17027: EQUAL
17028: IFTRUE 17032
17030: GO 17164
17032: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17033: LD_ADDR_VAR 0 1
17037: PUSH
17038: LD_INT 2
17040: PUSH
17041: LD_INT 4
17043: PUSH
17044: LD_INT 5
17046: PUSH
17047: LD_INT 6
17049: PUSH
17050: LD_INT 8
17052: PUSH
17053: LD_INT 11
17055: PUSH
17056: LD_INT 12
17058: PUSH
17059: LD_INT 15
17061: PUSH
17062: LD_INT 16
17064: PUSH
17065: LD_INT 20
17067: PUSH
17068: LD_INT 21
17070: PUSH
17071: LD_INT 22
17073: PUSH
17074: LD_INT 23
17076: PUSH
17077: LD_INT 25
17079: PUSH
17080: LD_INT 26
17082: PUSH
17083: LD_INT 30
17085: PUSH
17086: LD_INT 31
17088: PUSH
17089: LD_INT 32
17091: PUSH
17092: LD_INT 36
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: LIST
17103: LIST
17104: LIST
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: LIST
17110: LIST
17111: LIST
17112: LIST
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 101
17118: PUSH
17119: LD_INT 102
17121: PUSH
17122: LD_INT 105
17124: PUSH
17125: LD_INT 106
17127: PUSH
17128: LD_INT 108
17130: PUSH
17131: LD_INT 109
17133: PUSH
17134: LD_INT 112
17136: PUSH
17137: LD_INT 116
17139: PUSH
17140: LD_INT 117
17142: PUSH
17143: LD_INT 118
17145: PUSH
17146: EMPTY
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: LIST
17153: LIST
17154: LIST
17155: LIST
17156: LIST
17157: PUSH
17158: EMPTY
17159: LIST
17160: LIST
17161: ST_TO_ADDR
17162: GO 19685
17164: LD_INT 7
17166: DOUBLE
17167: EQUAL
17168: IFTRUE 17172
17170: GO 17284
17172: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17173: LD_ADDR_VAR 0 1
17177: PUSH
17178: LD_INT 2
17180: PUSH
17181: LD_INT 4
17183: PUSH
17184: LD_INT 5
17186: PUSH
17187: LD_INT 7
17189: PUSH
17190: LD_INT 11
17192: PUSH
17193: LD_INT 12
17195: PUSH
17196: LD_INT 15
17198: PUSH
17199: LD_INT 16
17201: PUSH
17202: LD_INT 20
17204: PUSH
17205: LD_INT 21
17207: PUSH
17208: LD_INT 22
17210: PUSH
17211: LD_INT 23
17213: PUSH
17214: LD_INT 25
17216: PUSH
17217: LD_INT 26
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: LIST
17224: LIST
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: LIST
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: PUSH
17236: LD_INT 101
17238: PUSH
17239: LD_INT 102
17241: PUSH
17242: LD_INT 103
17244: PUSH
17245: LD_INT 105
17247: PUSH
17248: LD_INT 106
17250: PUSH
17251: LD_INT 108
17253: PUSH
17254: LD_INT 112
17256: PUSH
17257: LD_INT 116
17259: PUSH
17260: LD_INT 117
17262: PUSH
17263: LD_INT 118
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: ST_TO_ADDR
17282: GO 19685
17284: LD_INT 8
17286: DOUBLE
17287: EQUAL
17288: IFTRUE 17292
17290: GO 17432
17292: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17293: LD_ADDR_VAR 0 1
17297: PUSH
17298: LD_INT 2
17300: PUSH
17301: LD_INT 4
17303: PUSH
17304: LD_INT 5
17306: PUSH
17307: LD_INT 6
17309: PUSH
17310: LD_INT 7
17312: PUSH
17313: LD_INT 8
17315: PUSH
17316: LD_INT 11
17318: PUSH
17319: LD_INT 12
17321: PUSH
17322: LD_INT 15
17324: PUSH
17325: LD_INT 16
17327: PUSH
17328: LD_INT 20
17330: PUSH
17331: LD_INT 21
17333: PUSH
17334: LD_INT 22
17336: PUSH
17337: LD_INT 23
17339: PUSH
17340: LD_INT 25
17342: PUSH
17343: LD_INT 26
17345: PUSH
17346: LD_INT 30
17348: PUSH
17349: LD_INT 31
17351: PUSH
17352: LD_INT 32
17354: PUSH
17355: LD_INT 36
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: LIST
17362: LIST
17363: LIST
17364: LIST
17365: LIST
17366: LIST
17367: LIST
17368: LIST
17369: LIST
17370: LIST
17371: LIST
17372: LIST
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: LIST
17378: LIST
17379: PUSH
17380: LD_INT 101
17382: PUSH
17383: LD_INT 102
17385: PUSH
17386: LD_INT 103
17388: PUSH
17389: LD_INT 105
17391: PUSH
17392: LD_INT 106
17394: PUSH
17395: LD_INT 108
17397: PUSH
17398: LD_INT 109
17400: PUSH
17401: LD_INT 112
17403: PUSH
17404: LD_INT 116
17406: PUSH
17407: LD_INT 117
17409: PUSH
17410: LD_INT 118
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: LIST
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: ST_TO_ADDR
17430: GO 19685
17432: LD_INT 9
17434: DOUBLE
17435: EQUAL
17436: IFTRUE 17440
17438: GO 17588
17440: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17441: LD_ADDR_VAR 0 1
17445: PUSH
17446: LD_INT 2
17448: PUSH
17449: LD_INT 4
17451: PUSH
17452: LD_INT 5
17454: PUSH
17455: LD_INT 6
17457: PUSH
17458: LD_INT 7
17460: PUSH
17461: LD_INT 8
17463: PUSH
17464: LD_INT 11
17466: PUSH
17467: LD_INT 12
17469: PUSH
17470: LD_INT 15
17472: PUSH
17473: LD_INT 16
17475: PUSH
17476: LD_INT 20
17478: PUSH
17479: LD_INT 21
17481: PUSH
17482: LD_INT 22
17484: PUSH
17485: LD_INT 23
17487: PUSH
17488: LD_INT 25
17490: PUSH
17491: LD_INT 26
17493: PUSH
17494: LD_INT 28
17496: PUSH
17497: LD_INT 30
17499: PUSH
17500: LD_INT 31
17502: PUSH
17503: LD_INT 32
17505: PUSH
17506: LD_INT 36
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: LIST
17513: LIST
17514: LIST
17515: LIST
17516: LIST
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: LIST
17522: LIST
17523: LIST
17524: LIST
17525: LIST
17526: LIST
17527: LIST
17528: LIST
17529: LIST
17530: LIST
17531: PUSH
17532: LD_INT 101
17534: PUSH
17535: LD_INT 102
17537: PUSH
17538: LD_INT 103
17540: PUSH
17541: LD_INT 105
17543: PUSH
17544: LD_INT 106
17546: PUSH
17547: LD_INT 108
17549: PUSH
17550: LD_INT 109
17552: PUSH
17553: LD_INT 112
17555: PUSH
17556: LD_INT 114
17558: PUSH
17559: LD_INT 116
17561: PUSH
17562: LD_INT 117
17564: PUSH
17565: LD_INT 118
17567: PUSH
17568: EMPTY
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: PUSH
17582: EMPTY
17583: LIST
17584: LIST
17585: ST_TO_ADDR
17586: GO 19685
17588: LD_INT 10
17590: DOUBLE
17591: EQUAL
17592: IFTRUE 17596
17594: GO 17792
17596: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17597: LD_ADDR_VAR 0 1
17601: PUSH
17602: LD_INT 2
17604: PUSH
17605: LD_INT 4
17607: PUSH
17608: LD_INT 5
17610: PUSH
17611: LD_INT 6
17613: PUSH
17614: LD_INT 7
17616: PUSH
17617: LD_INT 8
17619: PUSH
17620: LD_INT 9
17622: PUSH
17623: LD_INT 10
17625: PUSH
17626: LD_INT 11
17628: PUSH
17629: LD_INT 12
17631: PUSH
17632: LD_INT 13
17634: PUSH
17635: LD_INT 14
17637: PUSH
17638: LD_INT 15
17640: PUSH
17641: LD_INT 16
17643: PUSH
17644: LD_INT 17
17646: PUSH
17647: LD_INT 18
17649: PUSH
17650: LD_INT 19
17652: PUSH
17653: LD_INT 20
17655: PUSH
17656: LD_INT 21
17658: PUSH
17659: LD_INT 22
17661: PUSH
17662: LD_INT 23
17664: PUSH
17665: LD_INT 24
17667: PUSH
17668: LD_INT 25
17670: PUSH
17671: LD_INT 26
17673: PUSH
17674: LD_INT 28
17676: PUSH
17677: LD_INT 30
17679: PUSH
17680: LD_INT 31
17682: PUSH
17683: LD_INT 32
17685: PUSH
17686: LD_INT 36
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: LIST
17697: LIST
17698: LIST
17699: LIST
17700: LIST
17701: LIST
17702: LIST
17703: LIST
17704: LIST
17705: LIST
17706: LIST
17707: LIST
17708: LIST
17709: LIST
17710: LIST
17711: LIST
17712: LIST
17713: LIST
17714: LIST
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: PUSH
17720: LD_INT 101
17722: PUSH
17723: LD_INT 102
17725: PUSH
17726: LD_INT 103
17728: PUSH
17729: LD_INT 104
17731: PUSH
17732: LD_INT 105
17734: PUSH
17735: LD_INT 106
17737: PUSH
17738: LD_INT 107
17740: PUSH
17741: LD_INT 108
17743: PUSH
17744: LD_INT 109
17746: PUSH
17747: LD_INT 110
17749: PUSH
17750: LD_INT 111
17752: PUSH
17753: LD_INT 112
17755: PUSH
17756: LD_INT 114
17758: PUSH
17759: LD_INT 116
17761: PUSH
17762: LD_INT 117
17764: PUSH
17765: LD_INT 118
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: LIST
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: ST_TO_ADDR
17790: GO 19685
17792: LD_INT 11
17794: DOUBLE
17795: EQUAL
17796: IFTRUE 17800
17798: GO 18004
17800: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17801: LD_ADDR_VAR 0 1
17805: PUSH
17806: LD_INT 2
17808: PUSH
17809: LD_INT 3
17811: PUSH
17812: LD_INT 4
17814: PUSH
17815: LD_INT 5
17817: PUSH
17818: LD_INT 6
17820: PUSH
17821: LD_INT 7
17823: PUSH
17824: LD_INT 8
17826: PUSH
17827: LD_INT 9
17829: PUSH
17830: LD_INT 10
17832: PUSH
17833: LD_INT 11
17835: PUSH
17836: LD_INT 12
17838: PUSH
17839: LD_INT 13
17841: PUSH
17842: LD_INT 14
17844: PUSH
17845: LD_INT 15
17847: PUSH
17848: LD_INT 16
17850: PUSH
17851: LD_INT 17
17853: PUSH
17854: LD_INT 18
17856: PUSH
17857: LD_INT 19
17859: PUSH
17860: LD_INT 20
17862: PUSH
17863: LD_INT 21
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_INT 23
17871: PUSH
17872: LD_INT 24
17874: PUSH
17875: LD_INT 25
17877: PUSH
17878: LD_INT 26
17880: PUSH
17881: LD_INT 28
17883: PUSH
17884: LD_INT 30
17886: PUSH
17887: LD_INT 31
17889: PUSH
17890: LD_INT 32
17892: PUSH
17893: LD_INT 34
17895: PUSH
17896: LD_INT 36
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: LIST
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: PUSH
17932: LD_INT 101
17934: PUSH
17935: LD_INT 102
17937: PUSH
17938: LD_INT 103
17940: PUSH
17941: LD_INT 104
17943: PUSH
17944: LD_INT 105
17946: PUSH
17947: LD_INT 106
17949: PUSH
17950: LD_INT 107
17952: PUSH
17953: LD_INT 108
17955: PUSH
17956: LD_INT 109
17958: PUSH
17959: LD_INT 110
17961: PUSH
17962: LD_INT 111
17964: PUSH
17965: LD_INT 112
17967: PUSH
17968: LD_INT 114
17970: PUSH
17971: LD_INT 116
17973: PUSH
17974: LD_INT 117
17976: PUSH
17977: LD_INT 118
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: LIST
17993: LIST
17994: LIST
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: ST_TO_ADDR
18002: GO 19685
18004: LD_INT 12
18006: DOUBLE
18007: EQUAL
18008: IFTRUE 18012
18010: GO 18232
18012: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18013: LD_ADDR_VAR 0 1
18017: PUSH
18018: LD_INT 1
18020: PUSH
18021: LD_INT 2
18023: PUSH
18024: LD_INT 3
18026: PUSH
18027: LD_INT 4
18029: PUSH
18030: LD_INT 5
18032: PUSH
18033: LD_INT 6
18035: PUSH
18036: LD_INT 7
18038: PUSH
18039: LD_INT 8
18041: PUSH
18042: LD_INT 9
18044: PUSH
18045: LD_INT 10
18047: PUSH
18048: LD_INT 11
18050: PUSH
18051: LD_INT 12
18053: PUSH
18054: LD_INT 13
18056: PUSH
18057: LD_INT 14
18059: PUSH
18060: LD_INT 15
18062: PUSH
18063: LD_INT 16
18065: PUSH
18066: LD_INT 17
18068: PUSH
18069: LD_INT 18
18071: PUSH
18072: LD_INT 19
18074: PUSH
18075: LD_INT 20
18077: PUSH
18078: LD_INT 21
18080: PUSH
18081: LD_INT 22
18083: PUSH
18084: LD_INT 23
18086: PUSH
18087: LD_INT 24
18089: PUSH
18090: LD_INT 25
18092: PUSH
18093: LD_INT 26
18095: PUSH
18096: LD_INT 27
18098: PUSH
18099: LD_INT 28
18101: PUSH
18102: LD_INT 30
18104: PUSH
18105: LD_INT 31
18107: PUSH
18108: LD_INT 32
18110: PUSH
18111: LD_INT 33
18113: PUSH
18114: LD_INT 34
18116: PUSH
18117: LD_INT 36
18119: PUSH
18120: EMPTY
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: LIST
18137: LIST
18138: LIST
18139: LIST
18140: LIST
18141: LIST
18142: LIST
18143: LIST
18144: LIST
18145: LIST
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: PUSH
18156: LD_INT 101
18158: PUSH
18159: LD_INT 102
18161: PUSH
18162: LD_INT 103
18164: PUSH
18165: LD_INT 104
18167: PUSH
18168: LD_INT 105
18170: PUSH
18171: LD_INT 106
18173: PUSH
18174: LD_INT 107
18176: PUSH
18177: LD_INT 108
18179: PUSH
18180: LD_INT 109
18182: PUSH
18183: LD_INT 110
18185: PUSH
18186: LD_INT 111
18188: PUSH
18189: LD_INT 112
18191: PUSH
18192: LD_INT 113
18194: PUSH
18195: LD_INT 114
18197: PUSH
18198: LD_INT 116
18200: PUSH
18201: LD_INT 117
18203: PUSH
18204: LD_INT 118
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: ST_TO_ADDR
18230: GO 19685
18232: LD_INT 13
18234: DOUBLE
18235: EQUAL
18236: IFTRUE 18240
18238: GO 18448
18240: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18241: LD_ADDR_VAR 0 1
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: LD_INT 2
18251: PUSH
18252: LD_INT 3
18254: PUSH
18255: LD_INT 4
18257: PUSH
18258: LD_INT 5
18260: PUSH
18261: LD_INT 8
18263: PUSH
18264: LD_INT 9
18266: PUSH
18267: LD_INT 10
18269: PUSH
18270: LD_INT 11
18272: PUSH
18273: LD_INT 12
18275: PUSH
18276: LD_INT 14
18278: PUSH
18279: LD_INT 15
18281: PUSH
18282: LD_INT 16
18284: PUSH
18285: LD_INT 17
18287: PUSH
18288: LD_INT 18
18290: PUSH
18291: LD_INT 19
18293: PUSH
18294: LD_INT 20
18296: PUSH
18297: LD_INT 21
18299: PUSH
18300: LD_INT 22
18302: PUSH
18303: LD_INT 23
18305: PUSH
18306: LD_INT 24
18308: PUSH
18309: LD_INT 25
18311: PUSH
18312: LD_INT 26
18314: PUSH
18315: LD_INT 27
18317: PUSH
18318: LD_INT 28
18320: PUSH
18321: LD_INT 30
18323: PUSH
18324: LD_INT 31
18326: PUSH
18327: LD_INT 32
18329: PUSH
18330: LD_INT 33
18332: PUSH
18333: LD_INT 34
18335: PUSH
18336: LD_INT 36
18338: PUSH
18339: EMPTY
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: LIST
18364: LIST
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: PUSH
18372: LD_INT 101
18374: PUSH
18375: LD_INT 102
18377: PUSH
18378: LD_INT 103
18380: PUSH
18381: LD_INT 104
18383: PUSH
18384: LD_INT 105
18386: PUSH
18387: LD_INT 106
18389: PUSH
18390: LD_INT 107
18392: PUSH
18393: LD_INT 108
18395: PUSH
18396: LD_INT 109
18398: PUSH
18399: LD_INT 110
18401: PUSH
18402: LD_INT 111
18404: PUSH
18405: LD_INT 112
18407: PUSH
18408: LD_INT 113
18410: PUSH
18411: LD_INT 114
18413: PUSH
18414: LD_INT 116
18416: PUSH
18417: LD_INT 117
18419: PUSH
18420: LD_INT 118
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: LIST
18431: LIST
18432: LIST
18433: LIST
18434: LIST
18435: LIST
18436: LIST
18437: LIST
18438: LIST
18439: LIST
18440: LIST
18441: PUSH
18442: EMPTY
18443: LIST
18444: LIST
18445: ST_TO_ADDR
18446: GO 19685
18448: LD_INT 14
18450: DOUBLE
18451: EQUAL
18452: IFTRUE 18456
18454: GO 18680
18456: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18457: LD_ADDR_VAR 0 1
18461: PUSH
18462: LD_INT 1
18464: PUSH
18465: LD_INT 2
18467: PUSH
18468: LD_INT 3
18470: PUSH
18471: LD_INT 4
18473: PUSH
18474: LD_INT 5
18476: PUSH
18477: LD_INT 6
18479: PUSH
18480: LD_INT 7
18482: PUSH
18483: LD_INT 8
18485: PUSH
18486: LD_INT 9
18488: PUSH
18489: LD_INT 10
18491: PUSH
18492: LD_INT 11
18494: PUSH
18495: LD_INT 12
18497: PUSH
18498: LD_INT 13
18500: PUSH
18501: LD_INT 14
18503: PUSH
18504: LD_INT 15
18506: PUSH
18507: LD_INT 16
18509: PUSH
18510: LD_INT 17
18512: PUSH
18513: LD_INT 18
18515: PUSH
18516: LD_INT 19
18518: PUSH
18519: LD_INT 20
18521: PUSH
18522: LD_INT 21
18524: PUSH
18525: LD_INT 22
18527: PUSH
18528: LD_INT 23
18530: PUSH
18531: LD_INT 24
18533: PUSH
18534: LD_INT 25
18536: PUSH
18537: LD_INT 26
18539: PUSH
18540: LD_INT 27
18542: PUSH
18543: LD_INT 28
18545: PUSH
18546: LD_INT 29
18548: PUSH
18549: LD_INT 30
18551: PUSH
18552: LD_INT 31
18554: PUSH
18555: LD_INT 32
18557: PUSH
18558: LD_INT 33
18560: PUSH
18561: LD_INT 34
18563: PUSH
18564: LD_INT 36
18566: PUSH
18567: EMPTY
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: LIST
18585: LIST
18586: LIST
18587: LIST
18588: LIST
18589: LIST
18590: LIST
18591: LIST
18592: LIST
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: PUSH
18604: LD_INT 101
18606: PUSH
18607: LD_INT 102
18609: PUSH
18610: LD_INT 103
18612: PUSH
18613: LD_INT 104
18615: PUSH
18616: LD_INT 105
18618: PUSH
18619: LD_INT 106
18621: PUSH
18622: LD_INT 107
18624: PUSH
18625: LD_INT 108
18627: PUSH
18628: LD_INT 109
18630: PUSH
18631: LD_INT 110
18633: PUSH
18634: LD_INT 111
18636: PUSH
18637: LD_INT 112
18639: PUSH
18640: LD_INT 113
18642: PUSH
18643: LD_INT 114
18645: PUSH
18646: LD_INT 116
18648: PUSH
18649: LD_INT 117
18651: PUSH
18652: LD_INT 118
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: LIST
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: LIST
18670: LIST
18671: LIST
18672: LIST
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: ST_TO_ADDR
18678: GO 19685
18680: LD_INT 15
18682: DOUBLE
18683: EQUAL
18684: IFTRUE 18688
18686: GO 18912
18688: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18689: LD_ADDR_VAR 0 1
18693: PUSH
18694: LD_INT 1
18696: PUSH
18697: LD_INT 2
18699: PUSH
18700: LD_INT 3
18702: PUSH
18703: LD_INT 4
18705: PUSH
18706: LD_INT 5
18708: PUSH
18709: LD_INT 6
18711: PUSH
18712: LD_INT 7
18714: PUSH
18715: LD_INT 8
18717: PUSH
18718: LD_INT 9
18720: PUSH
18721: LD_INT 10
18723: PUSH
18724: LD_INT 11
18726: PUSH
18727: LD_INT 12
18729: PUSH
18730: LD_INT 13
18732: PUSH
18733: LD_INT 14
18735: PUSH
18736: LD_INT 15
18738: PUSH
18739: LD_INT 16
18741: PUSH
18742: LD_INT 17
18744: PUSH
18745: LD_INT 18
18747: PUSH
18748: LD_INT 19
18750: PUSH
18751: LD_INT 20
18753: PUSH
18754: LD_INT 21
18756: PUSH
18757: LD_INT 22
18759: PUSH
18760: LD_INT 23
18762: PUSH
18763: LD_INT 24
18765: PUSH
18766: LD_INT 25
18768: PUSH
18769: LD_INT 26
18771: PUSH
18772: LD_INT 27
18774: PUSH
18775: LD_INT 28
18777: PUSH
18778: LD_INT 29
18780: PUSH
18781: LD_INT 30
18783: PUSH
18784: LD_INT 31
18786: PUSH
18787: LD_INT 32
18789: PUSH
18790: LD_INT 33
18792: PUSH
18793: LD_INT 34
18795: PUSH
18796: LD_INT 36
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: LIST
18809: LIST
18810: LIST
18811: LIST
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: LIST
18817: LIST
18818: LIST
18819: LIST
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: PUSH
18836: LD_INT 101
18838: PUSH
18839: LD_INT 102
18841: PUSH
18842: LD_INT 103
18844: PUSH
18845: LD_INT 104
18847: PUSH
18848: LD_INT 105
18850: PUSH
18851: LD_INT 106
18853: PUSH
18854: LD_INT 107
18856: PUSH
18857: LD_INT 108
18859: PUSH
18860: LD_INT 109
18862: PUSH
18863: LD_INT 110
18865: PUSH
18866: LD_INT 111
18868: PUSH
18869: LD_INT 112
18871: PUSH
18872: LD_INT 113
18874: PUSH
18875: LD_INT 114
18877: PUSH
18878: LD_INT 116
18880: PUSH
18881: LD_INT 117
18883: PUSH
18884: LD_INT 118
18886: PUSH
18887: EMPTY
18888: LIST
18889: LIST
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: PUSH
18906: EMPTY
18907: LIST
18908: LIST
18909: ST_TO_ADDR
18910: GO 19685
18912: LD_INT 16
18914: DOUBLE
18915: EQUAL
18916: IFTRUE 18920
18918: GO 19056
18920: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18921: LD_ADDR_VAR 0 1
18925: PUSH
18926: LD_INT 2
18928: PUSH
18929: LD_INT 4
18931: PUSH
18932: LD_INT 5
18934: PUSH
18935: LD_INT 7
18937: PUSH
18938: LD_INT 11
18940: PUSH
18941: LD_INT 12
18943: PUSH
18944: LD_INT 15
18946: PUSH
18947: LD_INT 16
18949: PUSH
18950: LD_INT 20
18952: PUSH
18953: LD_INT 21
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_INT 23
18961: PUSH
18962: LD_INT 25
18964: PUSH
18965: LD_INT 26
18967: PUSH
18968: LD_INT 30
18970: PUSH
18971: LD_INT 31
18973: PUSH
18974: LD_INT 32
18976: PUSH
18977: LD_INT 33
18979: PUSH
18980: LD_INT 34
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: PUSH
19004: LD_INT 101
19006: PUSH
19007: LD_INT 102
19009: PUSH
19010: LD_INT 103
19012: PUSH
19013: LD_INT 106
19015: PUSH
19016: LD_INT 108
19018: PUSH
19019: LD_INT 112
19021: PUSH
19022: LD_INT 113
19024: PUSH
19025: LD_INT 114
19027: PUSH
19028: LD_INT 116
19030: PUSH
19031: LD_INT 117
19033: PUSH
19034: LD_INT 118
19036: PUSH
19037: EMPTY
19038: LIST
19039: LIST
19040: LIST
19041: LIST
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: PUSH
19050: EMPTY
19051: LIST
19052: LIST
19053: ST_TO_ADDR
19054: GO 19685
19056: LD_INT 17
19058: DOUBLE
19059: EQUAL
19060: IFTRUE 19064
19062: GO 19288
19064: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19065: LD_ADDR_VAR 0 1
19069: PUSH
19070: LD_INT 1
19072: PUSH
19073: LD_INT 2
19075: PUSH
19076: LD_INT 3
19078: PUSH
19079: LD_INT 4
19081: PUSH
19082: LD_INT 5
19084: PUSH
19085: LD_INT 6
19087: PUSH
19088: LD_INT 7
19090: PUSH
19091: LD_INT 8
19093: PUSH
19094: LD_INT 9
19096: PUSH
19097: LD_INT 10
19099: PUSH
19100: LD_INT 11
19102: PUSH
19103: LD_INT 12
19105: PUSH
19106: LD_INT 13
19108: PUSH
19109: LD_INT 14
19111: PUSH
19112: LD_INT 15
19114: PUSH
19115: LD_INT 16
19117: PUSH
19118: LD_INT 17
19120: PUSH
19121: LD_INT 18
19123: PUSH
19124: LD_INT 19
19126: PUSH
19127: LD_INT 20
19129: PUSH
19130: LD_INT 21
19132: PUSH
19133: LD_INT 22
19135: PUSH
19136: LD_INT 23
19138: PUSH
19139: LD_INT 24
19141: PUSH
19142: LD_INT 25
19144: PUSH
19145: LD_INT 26
19147: PUSH
19148: LD_INT 27
19150: PUSH
19151: LD_INT 28
19153: PUSH
19154: LD_INT 29
19156: PUSH
19157: LD_INT 30
19159: PUSH
19160: LD_INT 31
19162: PUSH
19163: LD_INT 32
19165: PUSH
19166: LD_INT 33
19168: PUSH
19169: LD_INT 34
19171: PUSH
19172: LD_INT 36
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: LIST
19179: LIST
19180: LIST
19181: LIST
19182: LIST
19183: LIST
19184: LIST
19185: LIST
19186: LIST
19187: LIST
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: PUSH
19212: LD_INT 101
19214: PUSH
19215: LD_INT 102
19217: PUSH
19218: LD_INT 103
19220: PUSH
19221: LD_INT 104
19223: PUSH
19224: LD_INT 105
19226: PUSH
19227: LD_INT 106
19229: PUSH
19230: LD_INT 107
19232: PUSH
19233: LD_INT 108
19235: PUSH
19236: LD_INT 109
19238: PUSH
19239: LD_INT 110
19241: PUSH
19242: LD_INT 111
19244: PUSH
19245: LD_INT 112
19247: PUSH
19248: LD_INT 113
19250: PUSH
19251: LD_INT 114
19253: PUSH
19254: LD_INT 116
19256: PUSH
19257: LD_INT 117
19259: PUSH
19260: LD_INT 118
19262: PUSH
19263: EMPTY
19264: LIST
19265: LIST
19266: LIST
19267: LIST
19268: LIST
19269: LIST
19270: LIST
19271: LIST
19272: LIST
19273: LIST
19274: LIST
19275: LIST
19276: LIST
19277: LIST
19278: LIST
19279: LIST
19280: LIST
19281: PUSH
19282: EMPTY
19283: LIST
19284: LIST
19285: ST_TO_ADDR
19286: GO 19685
19288: LD_INT 18
19290: DOUBLE
19291: EQUAL
19292: IFTRUE 19296
19294: GO 19444
19296: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19297: LD_ADDR_VAR 0 1
19301: PUSH
19302: LD_INT 2
19304: PUSH
19305: LD_INT 4
19307: PUSH
19308: LD_INT 5
19310: PUSH
19311: LD_INT 7
19313: PUSH
19314: LD_INT 11
19316: PUSH
19317: LD_INT 12
19319: PUSH
19320: LD_INT 15
19322: PUSH
19323: LD_INT 16
19325: PUSH
19326: LD_INT 20
19328: PUSH
19329: LD_INT 21
19331: PUSH
19332: LD_INT 22
19334: PUSH
19335: LD_INT 23
19337: PUSH
19338: LD_INT 25
19340: PUSH
19341: LD_INT 26
19343: PUSH
19344: LD_INT 30
19346: PUSH
19347: LD_INT 31
19349: PUSH
19350: LD_INT 32
19352: PUSH
19353: LD_INT 33
19355: PUSH
19356: LD_INT 34
19358: PUSH
19359: LD_INT 35
19361: PUSH
19362: LD_INT 36
19364: PUSH
19365: EMPTY
19366: LIST
19367: LIST
19368: LIST
19369: LIST
19370: LIST
19371: LIST
19372: LIST
19373: LIST
19374: LIST
19375: LIST
19376: LIST
19377: LIST
19378: LIST
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 101
19390: PUSH
19391: LD_INT 102
19393: PUSH
19394: LD_INT 103
19396: PUSH
19397: LD_INT 106
19399: PUSH
19400: LD_INT 108
19402: PUSH
19403: LD_INT 112
19405: PUSH
19406: LD_INT 113
19408: PUSH
19409: LD_INT 114
19411: PUSH
19412: LD_INT 115
19414: PUSH
19415: LD_INT 116
19417: PUSH
19418: LD_INT 117
19420: PUSH
19421: LD_INT 118
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: LIST
19428: LIST
19429: LIST
19430: LIST
19431: LIST
19432: LIST
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: ST_TO_ADDR
19442: GO 19685
19444: LD_INT 19
19446: DOUBLE
19447: EQUAL
19448: IFTRUE 19452
19450: GO 19684
19452: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19453: LD_ADDR_VAR 0 1
19457: PUSH
19458: LD_INT 1
19460: PUSH
19461: LD_INT 2
19463: PUSH
19464: LD_INT 3
19466: PUSH
19467: LD_INT 4
19469: PUSH
19470: LD_INT 5
19472: PUSH
19473: LD_INT 6
19475: PUSH
19476: LD_INT 7
19478: PUSH
19479: LD_INT 8
19481: PUSH
19482: LD_INT 9
19484: PUSH
19485: LD_INT 10
19487: PUSH
19488: LD_INT 11
19490: PUSH
19491: LD_INT 12
19493: PUSH
19494: LD_INT 13
19496: PUSH
19497: LD_INT 14
19499: PUSH
19500: LD_INT 15
19502: PUSH
19503: LD_INT 16
19505: PUSH
19506: LD_INT 17
19508: PUSH
19509: LD_INT 18
19511: PUSH
19512: LD_INT 19
19514: PUSH
19515: LD_INT 20
19517: PUSH
19518: LD_INT 21
19520: PUSH
19521: LD_INT 22
19523: PUSH
19524: LD_INT 23
19526: PUSH
19527: LD_INT 24
19529: PUSH
19530: LD_INT 25
19532: PUSH
19533: LD_INT 26
19535: PUSH
19536: LD_INT 27
19538: PUSH
19539: LD_INT 28
19541: PUSH
19542: LD_INT 29
19544: PUSH
19545: LD_INT 30
19547: PUSH
19548: LD_INT 31
19550: PUSH
19551: LD_INT 32
19553: PUSH
19554: LD_INT 33
19556: PUSH
19557: LD_INT 34
19559: PUSH
19560: LD_INT 35
19562: PUSH
19563: LD_INT 36
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: LD_INT 101
19606: PUSH
19607: LD_INT 102
19609: PUSH
19610: LD_INT 103
19612: PUSH
19613: LD_INT 104
19615: PUSH
19616: LD_INT 105
19618: PUSH
19619: LD_INT 106
19621: PUSH
19622: LD_INT 107
19624: PUSH
19625: LD_INT 108
19627: PUSH
19628: LD_INT 109
19630: PUSH
19631: LD_INT 110
19633: PUSH
19634: LD_INT 111
19636: PUSH
19637: LD_INT 112
19639: PUSH
19640: LD_INT 113
19642: PUSH
19643: LD_INT 114
19645: PUSH
19646: LD_INT 115
19648: PUSH
19649: LD_INT 116
19651: PUSH
19652: LD_INT 117
19654: PUSH
19655: LD_INT 118
19657: PUSH
19658: EMPTY
19659: LIST
19660: LIST
19661: LIST
19662: LIST
19663: LIST
19664: LIST
19665: LIST
19666: LIST
19667: LIST
19668: LIST
19669: LIST
19670: LIST
19671: LIST
19672: LIST
19673: LIST
19674: LIST
19675: LIST
19676: LIST
19677: PUSH
19678: EMPTY
19679: LIST
19680: LIST
19681: ST_TO_ADDR
19682: GO 19685
19684: POP
// end else
19685: GO 19916
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19687: LD_ADDR_VAR 0 1
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: LD_INT 2
19697: PUSH
19698: LD_INT 3
19700: PUSH
19701: LD_INT 4
19703: PUSH
19704: LD_INT 5
19706: PUSH
19707: LD_INT 6
19709: PUSH
19710: LD_INT 7
19712: PUSH
19713: LD_INT 8
19715: PUSH
19716: LD_INT 9
19718: PUSH
19719: LD_INT 10
19721: PUSH
19722: LD_INT 11
19724: PUSH
19725: LD_INT 12
19727: PUSH
19728: LD_INT 13
19730: PUSH
19731: LD_INT 14
19733: PUSH
19734: LD_INT 15
19736: PUSH
19737: LD_INT 16
19739: PUSH
19740: LD_INT 17
19742: PUSH
19743: LD_INT 18
19745: PUSH
19746: LD_INT 19
19748: PUSH
19749: LD_INT 20
19751: PUSH
19752: LD_INT 21
19754: PUSH
19755: LD_INT 22
19757: PUSH
19758: LD_INT 23
19760: PUSH
19761: LD_INT 24
19763: PUSH
19764: LD_INT 25
19766: PUSH
19767: LD_INT 26
19769: PUSH
19770: LD_INT 27
19772: PUSH
19773: LD_INT 28
19775: PUSH
19776: LD_INT 29
19778: PUSH
19779: LD_INT 30
19781: PUSH
19782: LD_INT 31
19784: PUSH
19785: LD_INT 32
19787: PUSH
19788: LD_INT 33
19790: PUSH
19791: LD_INT 34
19793: PUSH
19794: LD_INT 35
19796: PUSH
19797: LD_INT 36
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: LIST
19809: LIST
19810: LIST
19811: LIST
19812: LIST
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: LIST
19821: LIST
19822: LIST
19823: LIST
19824: LIST
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 101
19840: PUSH
19841: LD_INT 102
19843: PUSH
19844: LD_INT 103
19846: PUSH
19847: LD_INT 104
19849: PUSH
19850: LD_INT 105
19852: PUSH
19853: LD_INT 106
19855: PUSH
19856: LD_INT 107
19858: PUSH
19859: LD_INT 108
19861: PUSH
19862: LD_INT 109
19864: PUSH
19865: LD_INT 110
19867: PUSH
19868: LD_INT 111
19870: PUSH
19871: LD_INT 112
19873: PUSH
19874: LD_INT 113
19876: PUSH
19877: LD_INT 114
19879: PUSH
19880: LD_INT 115
19882: PUSH
19883: LD_INT 116
19885: PUSH
19886: LD_INT 117
19888: PUSH
19889: LD_INT 118
19891: PUSH
19892: EMPTY
19893: LIST
19894: LIST
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: LIST
19900: LIST
19901: LIST
19902: LIST
19903: LIST
19904: LIST
19905: LIST
19906: LIST
19907: LIST
19908: LIST
19909: LIST
19910: LIST
19911: PUSH
19912: EMPTY
19913: LIST
19914: LIST
19915: ST_TO_ADDR
// if result then
19916: LD_VAR 0 1
19920: IFFALSE 20209
// begin normal :=  ;
19922: LD_ADDR_VAR 0 3
19926: PUSH
19927: LD_STRING 
19929: ST_TO_ADDR
// hardcore :=  ;
19930: LD_ADDR_VAR 0 4
19934: PUSH
19935: LD_STRING 
19937: ST_TO_ADDR
// for i = 1 to normalCounter do
19938: LD_ADDR_VAR 0 5
19942: PUSH
19943: DOUBLE
19944: LD_INT 1
19946: DEC
19947: ST_TO_ADDR
19948: LD_EXP 61
19952: PUSH
19953: FOR_TO
19954: IFFALSE 20055
// begin tmp := 0 ;
19956: LD_ADDR_VAR 0 2
19960: PUSH
19961: LD_STRING 0
19963: ST_TO_ADDR
// if result [ 1 ] then
19964: LD_VAR 0 1
19968: PUSH
19969: LD_INT 1
19971: ARRAY
19972: IFFALSE 20037
// if result [ 1 ] [ 1 ] = i then
19974: LD_VAR 0 1
19978: PUSH
19979: LD_INT 1
19981: ARRAY
19982: PUSH
19983: LD_INT 1
19985: ARRAY
19986: PUSH
19987: LD_VAR 0 5
19991: EQUAL
19992: IFFALSE 20037
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19994: LD_ADDR_VAR 0 1
19998: PUSH
19999: LD_VAR 0 1
20003: PPUSH
20004: LD_INT 1
20006: PPUSH
20007: LD_VAR 0 1
20011: PUSH
20012: LD_INT 1
20014: ARRAY
20015: PPUSH
20016: LD_INT 1
20018: PPUSH
20019: CALL_OW 3
20023: PPUSH
20024: CALL_OW 1
20028: ST_TO_ADDR
// tmp := 1 ;
20029: LD_ADDR_VAR 0 2
20033: PUSH
20034: LD_STRING 1
20036: ST_TO_ADDR
// end ; normal := normal & tmp ;
20037: LD_ADDR_VAR 0 3
20041: PUSH
20042: LD_VAR 0 3
20046: PUSH
20047: LD_VAR 0 2
20051: STR
20052: ST_TO_ADDR
// end ;
20053: GO 19953
20055: POP
20056: POP
// for i = 1 to hardcoreCounter do
20057: LD_ADDR_VAR 0 5
20061: PUSH
20062: DOUBLE
20063: LD_INT 1
20065: DEC
20066: ST_TO_ADDR
20067: LD_EXP 62
20071: PUSH
20072: FOR_TO
20073: IFFALSE 20178
// begin tmp := 0 ;
20075: LD_ADDR_VAR 0 2
20079: PUSH
20080: LD_STRING 0
20082: ST_TO_ADDR
// if result [ 2 ] then
20083: LD_VAR 0 1
20087: PUSH
20088: LD_INT 2
20090: ARRAY
20091: IFFALSE 20160
// if result [ 2 ] [ 1 ] = 100 + i then
20093: LD_VAR 0 1
20097: PUSH
20098: LD_INT 2
20100: ARRAY
20101: PUSH
20102: LD_INT 1
20104: ARRAY
20105: PUSH
20106: LD_INT 100
20108: PUSH
20109: LD_VAR 0 5
20113: PLUS
20114: EQUAL
20115: IFFALSE 20160
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20117: LD_ADDR_VAR 0 1
20121: PUSH
20122: LD_VAR 0 1
20126: PPUSH
20127: LD_INT 2
20129: PPUSH
20130: LD_VAR 0 1
20134: PUSH
20135: LD_INT 2
20137: ARRAY
20138: PPUSH
20139: LD_INT 1
20141: PPUSH
20142: CALL_OW 3
20146: PPUSH
20147: CALL_OW 1
20151: ST_TO_ADDR
// tmp := 1 ;
20152: LD_ADDR_VAR 0 2
20156: PUSH
20157: LD_STRING 1
20159: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20160: LD_ADDR_VAR 0 4
20164: PUSH
20165: LD_VAR 0 4
20169: PUSH
20170: LD_VAR 0 2
20174: STR
20175: ST_TO_ADDR
// end ;
20176: GO 20072
20178: POP
20179: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
20180: LD_STRING getStreamItemsFromMission("
20182: PUSH
20183: LD_VAR 0 3
20187: STR
20188: PUSH
20189: LD_STRING ","
20191: STR
20192: PUSH
20193: LD_VAR 0 4
20197: STR
20198: PUSH
20199: LD_STRING ")
20201: STR
20202: PPUSH
20203: CALL_OW 559
// end else
20207: GO 20216
// ToLua ( getStreamItemsFromMission("","") ) ;
20209: LD_STRING getStreamItemsFromMission("","")
20211: PPUSH
20212: CALL_OW 559
// end ;
20216: LD_VAR 0 1
20220: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20221: LD_EXP 60
20225: PUSH
20226: LD_EXP 65
20230: AND
20231: IFFALSE 20355
20233: GO 20235
20235: DISABLE
20236: LD_INT 0
20238: PPUSH
20239: PPUSH
// begin enable ;
20240: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20241: LD_ADDR_VAR 0 2
20245: PUSH
20246: LD_INT 22
20248: PUSH
20249: LD_OWVAR 2
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: PUSH
20258: LD_INT 2
20260: PUSH
20261: LD_INT 34
20263: PUSH
20264: LD_INT 7
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 34
20273: PUSH
20274: LD_INT 45
20276: PUSH
20277: EMPTY
20278: LIST
20279: LIST
20280: PUSH
20281: LD_INT 34
20283: PUSH
20284: LD_INT 28
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: PUSH
20291: LD_INT 34
20293: PUSH
20294: LD_INT 47
20296: PUSH
20297: EMPTY
20298: LIST
20299: LIST
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: LIST
20311: PPUSH
20312: CALL_OW 69
20316: ST_TO_ADDR
// if not tmp then
20317: LD_VAR 0 2
20321: NOT
20322: IFFALSE 20326
// exit ;
20324: GO 20355
// for i in tmp do
20326: LD_ADDR_VAR 0 1
20330: PUSH
20331: LD_VAR 0 2
20335: PUSH
20336: FOR_IN
20337: IFFALSE 20353
// begin SetLives ( i , 0 ) ;
20339: LD_VAR 0 1
20343: PPUSH
20344: LD_INT 0
20346: PPUSH
20347: CALL_OW 234
// end ;
20351: GO 20336
20353: POP
20354: POP
// end ;
20355: PPOPN 2
20357: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20358: LD_EXP 60
20362: PUSH
20363: LD_EXP 66
20367: AND
20368: IFFALSE 20452
20370: GO 20372
20372: DISABLE
20373: LD_INT 0
20375: PPUSH
20376: PPUSH
// begin enable ;
20377: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20378: LD_ADDR_VAR 0 2
20382: PUSH
20383: LD_INT 22
20385: PUSH
20386: LD_OWVAR 2
20390: PUSH
20391: EMPTY
20392: LIST
20393: LIST
20394: PUSH
20395: LD_INT 32
20397: PUSH
20398: LD_INT 3
20400: PUSH
20401: EMPTY
20402: LIST
20403: LIST
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PPUSH
20409: CALL_OW 69
20413: ST_TO_ADDR
// if not tmp then
20414: LD_VAR 0 2
20418: NOT
20419: IFFALSE 20423
// exit ;
20421: GO 20452
// for i in tmp do
20423: LD_ADDR_VAR 0 1
20427: PUSH
20428: LD_VAR 0 2
20432: PUSH
20433: FOR_IN
20434: IFFALSE 20450
// begin SetLives ( i , 0 ) ;
20436: LD_VAR 0 1
20440: PPUSH
20441: LD_INT 0
20443: PPUSH
20444: CALL_OW 234
// end ;
20448: GO 20433
20450: POP
20451: POP
// end ;
20452: PPOPN 2
20454: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20455: LD_EXP 60
20459: PUSH
20460: LD_EXP 63
20464: AND
20465: IFFALSE 20558
20467: GO 20469
20469: DISABLE
20470: LD_INT 0
20472: PPUSH
// begin enable ;
20473: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20474: LD_ADDR_VAR 0 1
20478: PUSH
20479: LD_INT 22
20481: PUSH
20482: LD_OWVAR 2
20486: PUSH
20487: EMPTY
20488: LIST
20489: LIST
20490: PUSH
20491: LD_INT 2
20493: PUSH
20494: LD_INT 25
20496: PUSH
20497: LD_INT 5
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 25
20506: PUSH
20507: LD_INT 9
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 25
20516: PUSH
20517: LD_INT 8
20519: PUSH
20520: EMPTY
20521: LIST
20522: LIST
20523: PUSH
20524: EMPTY
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: PUSH
20530: EMPTY
20531: LIST
20532: LIST
20533: PPUSH
20534: CALL_OW 69
20538: PUSH
20539: FOR_IN
20540: IFFALSE 20556
// begin SetClass ( i , 1 ) ;
20542: LD_VAR 0 1
20546: PPUSH
20547: LD_INT 1
20549: PPUSH
20550: CALL_OW 336
// end ;
20554: GO 20539
20556: POP
20557: POP
// end ;
20558: PPOPN 1
20560: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
20561: LD_EXP 60
20565: PUSH
20566: LD_EXP 64
20570: AND
20571: PUSH
20572: LD_OWVAR 65
20576: PUSH
20577: LD_INT 7
20579: LESS
20580: AND
20581: IFFALSE 20595
20583: GO 20585
20585: DISABLE
// begin enable ;
20586: ENABLE
// game_speed := 7 ;
20587: LD_ADDR_OWVAR 65
20591: PUSH
20592: LD_INT 7
20594: ST_TO_ADDR
// end ;
20595: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
20596: LD_EXP 60
20600: PUSH
20601: LD_EXP 67
20605: AND
20606: IFFALSE 20808
20608: GO 20610
20610: DISABLE
20611: LD_INT 0
20613: PPUSH
20614: PPUSH
20615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20616: LD_ADDR_VAR 0 3
20620: PUSH
20621: LD_INT 81
20623: PUSH
20624: LD_OWVAR 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 21
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PPUSH
20647: CALL_OW 69
20651: ST_TO_ADDR
// if not tmp then
20652: LD_VAR 0 3
20656: NOT
20657: IFFALSE 20661
// exit ;
20659: GO 20808
// if tmp > 5 then
20661: LD_VAR 0 3
20665: PUSH
20666: LD_INT 5
20668: GREATER
20669: IFFALSE 20681
// k := 5 else
20671: LD_ADDR_VAR 0 2
20675: PUSH
20676: LD_INT 5
20678: ST_TO_ADDR
20679: GO 20691
// k := tmp ;
20681: LD_ADDR_VAR 0 2
20685: PUSH
20686: LD_VAR 0 3
20690: ST_TO_ADDR
// for i := 1 to k do
20691: LD_ADDR_VAR 0 1
20695: PUSH
20696: DOUBLE
20697: LD_INT 1
20699: DEC
20700: ST_TO_ADDR
20701: LD_VAR 0 2
20705: PUSH
20706: FOR_TO
20707: IFFALSE 20806
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20709: LD_VAR 0 3
20713: PUSH
20714: LD_VAR 0 1
20718: ARRAY
20719: PPUSH
20720: LD_VAR 0 1
20724: PUSH
20725: LD_INT 4
20727: MOD
20728: PUSH
20729: LD_INT 1
20731: PLUS
20732: PPUSH
20733: CALL_OW 259
20737: PUSH
20738: LD_INT 10
20740: LESS
20741: IFFALSE 20804
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20743: LD_VAR 0 3
20747: PUSH
20748: LD_VAR 0 1
20752: ARRAY
20753: PPUSH
20754: LD_VAR 0 1
20758: PUSH
20759: LD_INT 4
20761: MOD
20762: PUSH
20763: LD_INT 1
20765: PLUS
20766: PPUSH
20767: LD_VAR 0 3
20771: PUSH
20772: LD_VAR 0 1
20776: ARRAY
20777: PPUSH
20778: LD_VAR 0 1
20782: PUSH
20783: LD_INT 4
20785: MOD
20786: PUSH
20787: LD_INT 1
20789: PLUS
20790: PPUSH
20791: CALL_OW 259
20795: PUSH
20796: LD_INT 1
20798: PLUS
20799: PPUSH
20800: CALL_OW 237
20804: GO 20706
20806: POP
20807: POP
// end ;
20808: PPOPN 3
20810: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20811: LD_EXP 60
20815: PUSH
20816: LD_EXP 68
20820: AND
20821: IFFALSE 20841
20823: GO 20825
20825: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20826: LD_INT 4
20828: PPUSH
20829: LD_OWVAR 2
20833: PPUSH
20834: LD_INT 0
20836: PPUSH
20837: CALL_OW 324
20841: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20842: LD_EXP 60
20846: PUSH
20847: LD_EXP 97
20851: AND
20852: IFFALSE 20872
20854: GO 20856
20856: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20857: LD_INT 19
20859: PPUSH
20860: LD_OWVAR 2
20864: PPUSH
20865: LD_INT 0
20867: PPUSH
20868: CALL_OW 324
20872: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20873: LD_EXP 60
20877: PUSH
20878: LD_EXP 69
20882: AND
20883: IFFALSE 20985
20885: GO 20887
20887: DISABLE
20888: LD_INT 0
20890: PPUSH
20891: PPUSH
// begin enable ;
20892: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20893: LD_ADDR_VAR 0 2
20897: PUSH
20898: LD_INT 22
20900: PUSH
20901: LD_OWVAR 2
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: PUSH
20910: LD_INT 2
20912: PUSH
20913: LD_INT 34
20915: PUSH
20916: LD_INT 11
20918: PUSH
20919: EMPTY
20920: LIST
20921: LIST
20922: PUSH
20923: LD_INT 34
20925: PUSH
20926: LD_INT 30
20928: PUSH
20929: EMPTY
20930: LIST
20931: LIST
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: LIST
20937: PUSH
20938: EMPTY
20939: LIST
20940: LIST
20941: PPUSH
20942: CALL_OW 69
20946: ST_TO_ADDR
// if not tmp then
20947: LD_VAR 0 2
20951: NOT
20952: IFFALSE 20956
// exit ;
20954: GO 20985
// for i in tmp do
20956: LD_ADDR_VAR 0 1
20960: PUSH
20961: LD_VAR 0 2
20965: PUSH
20966: FOR_IN
20967: IFFALSE 20983
// begin SetLives ( i , 0 ) ;
20969: LD_VAR 0 1
20973: PPUSH
20974: LD_INT 0
20976: PPUSH
20977: CALL_OW 234
// end ;
20981: GO 20966
20983: POP
20984: POP
// end ;
20985: PPOPN 2
20987: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20988: LD_EXP 60
20992: PUSH
20993: LD_EXP 70
20997: AND
20998: IFFALSE 21018
21000: GO 21002
21002: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21003: LD_INT 32
21005: PPUSH
21006: LD_OWVAR 2
21010: PPUSH
21011: LD_INT 0
21013: PPUSH
21014: CALL_OW 324
21018: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21019: LD_EXP 60
21023: PUSH
21024: LD_EXP 71
21028: AND
21029: IFFALSE 21210
21031: GO 21033
21033: DISABLE
21034: LD_INT 0
21036: PPUSH
21037: PPUSH
21038: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21039: LD_ADDR_VAR 0 2
21043: PUSH
21044: LD_INT 22
21046: PUSH
21047: LD_OWVAR 2
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PUSH
21056: LD_INT 33
21058: PUSH
21059: LD_INT 3
21061: PUSH
21062: EMPTY
21063: LIST
21064: LIST
21065: PUSH
21066: EMPTY
21067: LIST
21068: LIST
21069: PPUSH
21070: CALL_OW 69
21074: ST_TO_ADDR
// if not tmp then
21075: LD_VAR 0 2
21079: NOT
21080: IFFALSE 21084
// exit ;
21082: GO 21210
// side := 0 ;
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// for i := 1 to 8 do
21092: LD_ADDR_VAR 0 1
21096: PUSH
21097: DOUBLE
21098: LD_INT 1
21100: DEC
21101: ST_TO_ADDR
21102: LD_INT 8
21104: PUSH
21105: FOR_TO
21106: IFFALSE 21154
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21108: LD_OWVAR 2
21112: PUSH
21113: LD_VAR 0 1
21117: NONEQUAL
21118: PUSH
21119: LD_OWVAR 2
21123: PPUSH
21124: LD_VAR 0 1
21128: PPUSH
21129: CALL_OW 81
21133: PUSH
21134: LD_INT 2
21136: EQUAL
21137: AND
21138: IFFALSE 21152
// begin side := i ;
21140: LD_ADDR_VAR 0 3
21144: PUSH
21145: LD_VAR 0 1
21149: ST_TO_ADDR
// break ;
21150: GO 21154
// end ;
21152: GO 21105
21154: POP
21155: POP
// if not side then
21156: LD_VAR 0 3
21160: NOT
21161: IFFALSE 21165
// exit ;
21163: GO 21210
// for i := 1 to tmp do
21165: LD_ADDR_VAR 0 1
21169: PUSH
21170: DOUBLE
21171: LD_INT 1
21173: DEC
21174: ST_TO_ADDR
21175: LD_VAR 0 2
21179: PUSH
21180: FOR_TO
21181: IFFALSE 21208
// if Prob ( 60 ) then
21183: LD_INT 60
21185: PPUSH
21186: CALL_OW 13
21190: IFFALSE 21206
// SetSide ( i , side ) ;
21192: LD_VAR 0 1
21196: PPUSH
21197: LD_VAR 0 3
21201: PPUSH
21202: CALL_OW 235
21206: GO 21180
21208: POP
21209: POP
// end ;
21210: PPOPN 3
21212: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21213: LD_EXP 60
21217: PUSH
21218: LD_EXP 73
21222: AND
21223: IFFALSE 21342
21225: GO 21227
21227: DISABLE
21228: LD_INT 0
21230: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21231: LD_ADDR_VAR 0 1
21235: PUSH
21236: LD_INT 22
21238: PUSH
21239: LD_OWVAR 2
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PUSH
21248: LD_INT 21
21250: PUSH
21251: LD_INT 1
21253: PUSH
21254: EMPTY
21255: LIST
21256: LIST
21257: PUSH
21258: LD_INT 3
21260: PUSH
21261: LD_INT 23
21263: PUSH
21264: LD_INT 0
21266: PUSH
21267: EMPTY
21268: LIST
21269: LIST
21270: PUSH
21271: EMPTY
21272: LIST
21273: LIST
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: LIST
21279: PPUSH
21280: CALL_OW 69
21284: PUSH
21285: FOR_IN
21286: IFFALSE 21340
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21288: LD_VAR 0 1
21292: PPUSH
21293: CALL_OW 257
21297: PUSH
21298: LD_INT 1
21300: PUSH
21301: LD_INT 2
21303: PUSH
21304: LD_INT 3
21306: PUSH
21307: LD_INT 4
21309: PUSH
21310: EMPTY
21311: LIST
21312: LIST
21313: LIST
21314: LIST
21315: IN
21316: IFFALSE 21338
// SetClass ( un , rand ( 1 , 4 ) ) ;
21318: LD_VAR 0 1
21322: PPUSH
21323: LD_INT 1
21325: PPUSH
21326: LD_INT 4
21328: PPUSH
21329: CALL_OW 12
21333: PPUSH
21334: CALL_OW 336
21338: GO 21285
21340: POP
21341: POP
// end ;
21342: PPOPN 1
21344: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21345: LD_EXP 60
21349: PUSH
21350: LD_EXP 72
21354: AND
21355: IFFALSE 21434
21357: GO 21359
21359: DISABLE
21360: LD_INT 0
21362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21363: LD_ADDR_VAR 0 1
21367: PUSH
21368: LD_INT 22
21370: PUSH
21371: LD_OWVAR 2
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 21
21382: PUSH
21383: LD_INT 3
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: PPUSH
21394: CALL_OW 69
21398: ST_TO_ADDR
// if not tmp then
21399: LD_VAR 0 1
21403: NOT
21404: IFFALSE 21408
// exit ;
21406: GO 21434
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21408: LD_VAR 0 1
21412: PUSH
21413: LD_INT 1
21415: PPUSH
21416: LD_VAR 0 1
21420: PPUSH
21421: CALL_OW 12
21425: ARRAY
21426: PPUSH
21427: LD_INT 100
21429: PPUSH
21430: CALL_OW 234
// end ;
21434: PPOPN 1
21436: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21437: LD_EXP 60
21441: PUSH
21442: LD_EXP 74
21446: AND
21447: IFFALSE 21545
21449: GO 21451
21451: DISABLE
21452: LD_INT 0
21454: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21455: LD_ADDR_VAR 0 1
21459: PUSH
21460: LD_INT 22
21462: PUSH
21463: LD_OWVAR 2
21467: PUSH
21468: EMPTY
21469: LIST
21470: LIST
21471: PUSH
21472: LD_INT 21
21474: PUSH
21475: LD_INT 1
21477: PUSH
21478: EMPTY
21479: LIST
21480: LIST
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PPUSH
21486: CALL_OW 69
21490: ST_TO_ADDR
// if not tmp then
21491: LD_VAR 0 1
21495: NOT
21496: IFFALSE 21500
// exit ;
21498: GO 21545
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
21500: LD_VAR 0 1
21504: PUSH
21505: LD_INT 1
21507: PPUSH
21508: LD_VAR 0 1
21512: PPUSH
21513: CALL_OW 12
21517: ARRAY
21518: PPUSH
21519: LD_INT 1
21521: PPUSH
21522: LD_INT 4
21524: PPUSH
21525: CALL_OW 12
21529: PPUSH
21530: LD_INT 3000
21532: PPUSH
21533: LD_INT 9000
21535: PPUSH
21536: CALL_OW 12
21540: PPUSH
21541: CALL_OW 492
// end ;
21545: PPOPN 1
21547: END
// every 0 0$1 trigger StreamModeActive and sDepot do
21548: LD_EXP 60
21552: PUSH
21553: LD_EXP 75
21557: AND
21558: IFFALSE 21578
21560: GO 21562
21562: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
21563: LD_INT 1
21565: PPUSH
21566: LD_OWVAR 2
21570: PPUSH
21571: LD_INT 0
21573: PPUSH
21574: CALL_OW 324
21578: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
21579: LD_EXP 60
21583: PUSH
21584: LD_EXP 76
21588: AND
21589: IFFALSE 21672
21591: GO 21593
21593: DISABLE
21594: LD_INT 0
21596: PPUSH
21597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21598: LD_ADDR_VAR 0 2
21602: PUSH
21603: LD_INT 22
21605: PUSH
21606: LD_OWVAR 2
21610: PUSH
21611: EMPTY
21612: LIST
21613: LIST
21614: PUSH
21615: LD_INT 21
21617: PUSH
21618: LD_INT 3
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: EMPTY
21626: LIST
21627: LIST
21628: PPUSH
21629: CALL_OW 69
21633: ST_TO_ADDR
// if not tmp then
21634: LD_VAR 0 2
21638: NOT
21639: IFFALSE 21643
// exit ;
21641: GO 21672
// for i in tmp do
21643: LD_ADDR_VAR 0 1
21647: PUSH
21648: LD_VAR 0 2
21652: PUSH
21653: FOR_IN
21654: IFFALSE 21670
// SetBLevel ( i , 10 ) ;
21656: LD_VAR 0 1
21660: PPUSH
21661: LD_INT 10
21663: PPUSH
21664: CALL_OW 241
21668: GO 21653
21670: POP
21671: POP
// end ;
21672: PPOPN 2
21674: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
21675: LD_EXP 60
21679: PUSH
21680: LD_EXP 77
21684: AND
21685: IFFALSE 21796
21687: GO 21689
21689: DISABLE
21690: LD_INT 0
21692: PPUSH
21693: PPUSH
21694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
21695: LD_ADDR_VAR 0 3
21699: PUSH
21700: LD_INT 22
21702: PUSH
21703: LD_OWVAR 2
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PUSH
21712: LD_INT 25
21714: PUSH
21715: LD_INT 1
21717: PUSH
21718: EMPTY
21719: LIST
21720: LIST
21721: PUSH
21722: EMPTY
21723: LIST
21724: LIST
21725: PPUSH
21726: CALL_OW 69
21730: ST_TO_ADDR
// if not tmp then
21731: LD_VAR 0 3
21735: NOT
21736: IFFALSE 21740
// exit ;
21738: GO 21796
// un := tmp [ rand ( 1 , tmp ) ] ;
21740: LD_ADDR_VAR 0 2
21744: PUSH
21745: LD_VAR 0 3
21749: PUSH
21750: LD_INT 1
21752: PPUSH
21753: LD_VAR 0 3
21757: PPUSH
21758: CALL_OW 12
21762: ARRAY
21763: ST_TO_ADDR
// if Crawls ( un ) then
21764: LD_VAR 0 2
21768: PPUSH
21769: CALL_OW 318
21773: IFFALSE 21784
// ComWalk ( un ) ;
21775: LD_VAR 0 2
21779: PPUSH
21780: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21784: LD_VAR 0 2
21788: PPUSH
21789: LD_INT 5
21791: PPUSH
21792: CALL_OW 336
// end ;
21796: PPOPN 3
21798: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
21799: LD_EXP 60
21803: PUSH
21804: LD_EXP 78
21808: AND
21809: PUSH
21810: LD_OWVAR 67
21814: PUSH
21815: LD_INT 4
21817: LESS
21818: AND
21819: IFFALSE 21838
21821: GO 21823
21823: DISABLE
// begin Difficulty := Difficulty + 1 ;
21824: LD_ADDR_OWVAR 67
21828: PUSH
21829: LD_OWVAR 67
21833: PUSH
21834: LD_INT 1
21836: PLUS
21837: ST_TO_ADDR
// end ;
21838: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21839: LD_EXP 60
21843: PUSH
21844: LD_EXP 79
21848: AND
21849: IFFALSE 21952
21851: GO 21853
21853: DISABLE
21854: LD_INT 0
21856: PPUSH
// begin for i := 1 to 5 do
21857: LD_ADDR_VAR 0 1
21861: PUSH
21862: DOUBLE
21863: LD_INT 1
21865: DEC
21866: ST_TO_ADDR
21867: LD_INT 5
21869: PUSH
21870: FOR_TO
21871: IFFALSE 21950
// begin uc_nation := nation_nature ;
21873: LD_ADDR_OWVAR 21
21877: PUSH
21878: LD_INT 0
21880: ST_TO_ADDR
// uc_side := 0 ;
21881: LD_ADDR_OWVAR 20
21885: PUSH
21886: LD_INT 0
21888: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21889: LD_ADDR_OWVAR 29
21893: PUSH
21894: LD_INT 12
21896: PUSH
21897: LD_INT 12
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: ST_TO_ADDR
// hc_agressivity := 20 ;
21904: LD_ADDR_OWVAR 35
21908: PUSH
21909: LD_INT 20
21911: ST_TO_ADDR
// hc_class := class_tiger ;
21912: LD_ADDR_OWVAR 28
21916: PUSH
21917: LD_INT 14
21919: ST_TO_ADDR
// hc_gallery :=  ;
21920: LD_ADDR_OWVAR 33
21924: PUSH
21925: LD_STRING 
21927: ST_TO_ADDR
// hc_name :=  ;
21928: LD_ADDR_OWVAR 26
21932: PUSH
21933: LD_STRING 
21935: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21936: CALL_OW 44
21940: PPUSH
21941: LD_INT 0
21943: PPUSH
21944: CALL_OW 51
// end ;
21948: GO 21870
21950: POP
21951: POP
// end ;
21952: PPOPN 1
21954: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21955: LD_EXP 60
21959: PUSH
21960: LD_EXP 80
21964: AND
21965: IFFALSE 21974
21967: GO 21969
21969: DISABLE
// StreamSibBomb ;
21970: CALL 21975 0 0
21974: END
// export function StreamSibBomb ; var i , x , y ; begin
21975: LD_INT 0
21977: PPUSH
21978: PPUSH
21979: PPUSH
21980: PPUSH
// result := false ;
21981: LD_ADDR_VAR 0 1
21985: PUSH
21986: LD_INT 0
21988: ST_TO_ADDR
// for i := 1 to 16 do
21989: LD_ADDR_VAR 0 2
21993: PUSH
21994: DOUBLE
21995: LD_INT 1
21997: DEC
21998: ST_TO_ADDR
21999: LD_INT 16
22001: PUSH
22002: FOR_TO
22003: IFFALSE 22202
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22005: LD_ADDR_VAR 0 3
22009: PUSH
22010: LD_INT 10
22012: PUSH
22013: LD_INT 20
22015: PUSH
22016: LD_INT 30
22018: PUSH
22019: LD_INT 40
22021: PUSH
22022: LD_INT 50
22024: PUSH
22025: LD_INT 60
22027: PUSH
22028: LD_INT 70
22030: PUSH
22031: LD_INT 80
22033: PUSH
22034: LD_INT 90
22036: PUSH
22037: LD_INT 100
22039: PUSH
22040: LD_INT 110
22042: PUSH
22043: LD_INT 120
22045: PUSH
22046: LD_INT 130
22048: PUSH
22049: LD_INT 140
22051: PUSH
22052: LD_INT 150
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: PUSH
22072: LD_INT 1
22074: PPUSH
22075: LD_INT 15
22077: PPUSH
22078: CALL_OW 12
22082: ARRAY
22083: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22084: LD_ADDR_VAR 0 4
22088: PUSH
22089: LD_INT 10
22091: PUSH
22092: LD_INT 20
22094: PUSH
22095: LD_INT 30
22097: PUSH
22098: LD_INT 40
22100: PUSH
22101: LD_INT 50
22103: PUSH
22104: LD_INT 60
22106: PUSH
22107: LD_INT 70
22109: PUSH
22110: LD_INT 80
22112: PUSH
22113: LD_INT 90
22115: PUSH
22116: LD_INT 100
22118: PUSH
22119: LD_INT 110
22121: PUSH
22122: LD_INT 120
22124: PUSH
22125: LD_INT 130
22127: PUSH
22128: LD_INT 140
22130: PUSH
22131: LD_INT 150
22133: PUSH
22134: EMPTY
22135: LIST
22136: LIST
22137: LIST
22138: LIST
22139: LIST
22140: LIST
22141: LIST
22142: LIST
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: LIST
22149: LIST
22150: PUSH
22151: LD_INT 1
22153: PPUSH
22154: LD_INT 15
22156: PPUSH
22157: CALL_OW 12
22161: ARRAY
22162: ST_TO_ADDR
// if ValidHex ( x , y ) then
22163: LD_VAR 0 3
22167: PPUSH
22168: LD_VAR 0 4
22172: PPUSH
22173: CALL_OW 488
22177: IFFALSE 22200
// begin result := [ x , y ] ;
22179: LD_ADDR_VAR 0 1
22183: PUSH
22184: LD_VAR 0 3
22188: PUSH
22189: LD_VAR 0 4
22193: PUSH
22194: EMPTY
22195: LIST
22196: LIST
22197: ST_TO_ADDR
// break ;
22198: GO 22202
// end ; end ;
22200: GO 22002
22202: POP
22203: POP
// if result then
22204: LD_VAR 0 1
22208: IFFALSE 22268
// begin ToLua ( playSibBomb() ) ;
22210: LD_STRING playSibBomb()
22212: PPUSH
22213: CALL_OW 559
// wait ( 0 0$14 ) ;
22217: LD_INT 490
22219: PPUSH
22220: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22224: LD_VAR 0 1
22228: PUSH
22229: LD_INT 1
22231: ARRAY
22232: PPUSH
22233: LD_VAR 0 1
22237: PUSH
22238: LD_INT 2
22240: ARRAY
22241: PPUSH
22242: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22246: LD_VAR 0 1
22250: PUSH
22251: LD_INT 1
22253: ARRAY
22254: PPUSH
22255: LD_VAR 0 1
22259: PUSH
22260: LD_INT 2
22262: ARRAY
22263: PPUSH
22264: CALL_OW 429
// end ; end ;
22268: LD_VAR 0 1
22272: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22273: LD_EXP 60
22277: PUSH
22278: LD_EXP 82
22282: AND
22283: IFFALSE 22295
22285: GO 22287
22287: DISABLE
// YouLost (  ) ;
22288: LD_STRING 
22290: PPUSH
22291: CALL_OW 104
22295: END
// every 0 0$1 trigger StreamModeActive and sFog do
22296: LD_EXP 60
22300: PUSH
22301: LD_EXP 81
22305: AND
22306: IFFALSE 22320
22308: GO 22310
22310: DISABLE
// FogOff ( your_side ) ;
22311: LD_OWVAR 2
22315: PPUSH
22316: CALL_OW 344
22320: END
// every 0 0$1 trigger StreamModeActive and sSun do
22321: LD_EXP 60
22325: PUSH
22326: LD_EXP 83
22330: AND
22331: IFFALSE 22359
22333: GO 22335
22335: DISABLE
// begin solar_recharge_percent := 0 ;
22336: LD_ADDR_OWVAR 79
22340: PUSH
22341: LD_INT 0
22343: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22344: LD_INT 10500
22346: PPUSH
22347: CALL_OW 67
// solar_recharge_percent := 100 ;
22351: LD_ADDR_OWVAR 79
22355: PUSH
22356: LD_INT 100
22358: ST_TO_ADDR
// end ;
22359: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22360: LD_EXP 60
22364: PUSH
22365: LD_EXP 84
22369: AND
22370: IFFALSE 22609
22372: GO 22374
22374: DISABLE
22375: LD_INT 0
22377: PPUSH
22378: PPUSH
22379: PPUSH
// begin tmp := [ ] ;
22380: LD_ADDR_VAR 0 3
22384: PUSH
22385: EMPTY
22386: ST_TO_ADDR
// for i := 1 to 6 do
22387: LD_ADDR_VAR 0 1
22391: PUSH
22392: DOUBLE
22393: LD_INT 1
22395: DEC
22396: ST_TO_ADDR
22397: LD_INT 6
22399: PUSH
22400: FOR_TO
22401: IFFALSE 22506
// begin uc_nation := nation_nature ;
22403: LD_ADDR_OWVAR 21
22407: PUSH
22408: LD_INT 0
22410: ST_TO_ADDR
// uc_side := 0 ;
22411: LD_ADDR_OWVAR 20
22415: PUSH
22416: LD_INT 0
22418: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22419: LD_ADDR_OWVAR 29
22423: PUSH
22424: LD_INT 12
22426: PUSH
22427: LD_INT 12
22429: PUSH
22430: EMPTY
22431: LIST
22432: LIST
22433: ST_TO_ADDR
// hc_agressivity := 20 ;
22434: LD_ADDR_OWVAR 35
22438: PUSH
22439: LD_INT 20
22441: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22442: LD_ADDR_OWVAR 28
22446: PUSH
22447: LD_INT 17
22449: ST_TO_ADDR
// hc_gallery :=  ;
22450: LD_ADDR_OWVAR 33
22454: PUSH
22455: LD_STRING 
22457: ST_TO_ADDR
// hc_name :=  ;
22458: LD_ADDR_OWVAR 26
22462: PUSH
22463: LD_STRING 
22465: ST_TO_ADDR
// un := CreateHuman ;
22466: LD_ADDR_VAR 0 2
22470: PUSH
22471: CALL_OW 44
22475: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22476: LD_VAR 0 2
22480: PPUSH
22481: LD_INT 1
22483: PPUSH
22484: CALL_OW 51
// tmp := tmp ^ un ;
22488: LD_ADDR_VAR 0 3
22492: PUSH
22493: LD_VAR 0 3
22497: PUSH
22498: LD_VAR 0 2
22502: ADD
22503: ST_TO_ADDR
// end ;
22504: GO 22400
22506: POP
22507: POP
// repeat wait ( 0 0$1 ) ;
22508: LD_INT 35
22510: PPUSH
22511: CALL_OW 67
// for un in tmp do
22515: LD_ADDR_VAR 0 2
22519: PUSH
22520: LD_VAR 0 3
22524: PUSH
22525: FOR_IN
22526: IFFALSE 22600
// begin if IsDead ( un ) then
22528: LD_VAR 0 2
22532: PPUSH
22533: CALL_OW 301
22537: IFFALSE 22557
// begin tmp := tmp diff un ;
22539: LD_ADDR_VAR 0 3
22543: PUSH
22544: LD_VAR 0 3
22548: PUSH
22549: LD_VAR 0 2
22553: DIFF
22554: ST_TO_ADDR
// continue ;
22555: GO 22525
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
22557: LD_VAR 0 2
22561: PPUSH
22562: LD_INT 3
22564: PUSH
22565: LD_INT 22
22567: PUSH
22568: LD_INT 0
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PUSH
22575: EMPTY
22576: LIST
22577: LIST
22578: PPUSH
22579: CALL_OW 69
22583: PPUSH
22584: LD_VAR 0 2
22588: PPUSH
22589: CALL_OW 74
22593: PPUSH
22594: CALL_OW 115
// end ;
22598: GO 22525
22600: POP
22601: POP
// until not tmp ;
22602: LD_VAR 0 3
22606: NOT
22607: IFFALSE 22508
// end ;
22609: PPOPN 3
22611: END
// every 0 0$1 trigger StreamModeActive and sTroll do
22612: LD_EXP 60
22616: PUSH
22617: LD_EXP 85
22621: AND
22622: IFFALSE 22676
22624: GO 22626
22626: DISABLE
// begin ToLua ( displayTroll(); ) ;
22627: LD_STRING displayTroll();
22629: PPUSH
22630: CALL_OW 559
// wait ( 3 3$00 ) ;
22634: LD_INT 6300
22636: PPUSH
22637: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22641: LD_STRING hideTroll();
22643: PPUSH
22644: CALL_OW 559
// wait ( 1 1$00 ) ;
22648: LD_INT 2100
22650: PPUSH
22651: CALL_OW 67
// ToLua ( displayTroll(); ) ;
22655: LD_STRING displayTroll();
22657: PPUSH
22658: CALL_OW 559
// wait ( 1 1$00 ) ;
22662: LD_INT 2100
22664: PPUSH
22665: CALL_OW 67
// ToLua ( hideTroll(); ) ;
22669: LD_STRING hideTroll();
22671: PPUSH
22672: CALL_OW 559
// end ;
22676: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
22677: LD_EXP 60
22681: PUSH
22682: LD_EXP 86
22686: AND
22687: IFFALSE 22750
22689: GO 22691
22691: DISABLE
22692: LD_INT 0
22694: PPUSH
// begin p := 0 ;
22695: LD_ADDR_VAR 0 1
22699: PUSH
22700: LD_INT 0
22702: ST_TO_ADDR
// repeat game_speed := 1 ;
22703: LD_ADDR_OWVAR 65
22707: PUSH
22708: LD_INT 1
22710: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22711: LD_INT 35
22713: PPUSH
22714: CALL_OW 67
// p := p + 1 ;
22718: LD_ADDR_VAR 0 1
22722: PUSH
22723: LD_VAR 0 1
22727: PUSH
22728: LD_INT 1
22730: PLUS
22731: ST_TO_ADDR
// until p >= 60 ;
22732: LD_VAR 0 1
22736: PUSH
22737: LD_INT 60
22739: GREATEREQUAL
22740: IFFALSE 22703
// game_speed := 4 ;
22742: LD_ADDR_OWVAR 65
22746: PUSH
22747: LD_INT 4
22749: ST_TO_ADDR
// end ;
22750: PPOPN 1
22752: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22753: LD_EXP 60
22757: PUSH
22758: LD_EXP 87
22762: AND
22763: IFFALSE 22909
22765: GO 22767
22767: DISABLE
22768: LD_INT 0
22770: PPUSH
22771: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22772: LD_ADDR_VAR 0 1
22776: PUSH
22777: LD_INT 22
22779: PUSH
22780: LD_OWVAR 2
22784: PUSH
22785: EMPTY
22786: LIST
22787: LIST
22788: PUSH
22789: LD_INT 2
22791: PUSH
22792: LD_INT 30
22794: PUSH
22795: LD_INT 0
22797: PUSH
22798: EMPTY
22799: LIST
22800: LIST
22801: PUSH
22802: LD_INT 30
22804: PUSH
22805: LD_INT 1
22807: PUSH
22808: EMPTY
22809: LIST
22810: LIST
22811: PUSH
22812: EMPTY
22813: LIST
22814: LIST
22815: LIST
22816: PUSH
22817: EMPTY
22818: LIST
22819: LIST
22820: PPUSH
22821: CALL_OW 69
22825: ST_TO_ADDR
// if not depot then
22826: LD_VAR 0 1
22830: NOT
22831: IFFALSE 22835
// exit ;
22833: GO 22909
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22835: LD_ADDR_VAR 0 2
22839: PUSH
22840: LD_VAR 0 1
22844: PUSH
22845: LD_INT 1
22847: PPUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 12
22857: ARRAY
22858: PPUSH
22859: CALL_OW 274
22863: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22864: LD_VAR 0 2
22868: PPUSH
22869: LD_INT 1
22871: PPUSH
22872: LD_INT 0
22874: PPUSH
22875: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22879: LD_VAR 0 2
22883: PPUSH
22884: LD_INT 2
22886: PPUSH
22887: LD_INT 0
22889: PPUSH
22890: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22894: LD_VAR 0 2
22898: PPUSH
22899: LD_INT 3
22901: PPUSH
22902: LD_INT 0
22904: PPUSH
22905: CALL_OW 277
// end ;
22909: PPOPN 2
22911: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22912: LD_EXP 60
22916: PUSH
22917: LD_EXP 88
22921: AND
22922: IFFALSE 23019
22924: GO 22926
22926: DISABLE
22927: LD_INT 0
22929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22930: LD_ADDR_VAR 0 1
22934: PUSH
22935: LD_INT 22
22937: PUSH
22938: LD_OWVAR 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 21
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: LD_INT 3
22959: PUSH
22960: LD_INT 23
22962: PUSH
22963: LD_INT 0
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: EMPTY
22971: LIST
22972: LIST
22973: PUSH
22974: EMPTY
22975: LIST
22976: LIST
22977: LIST
22978: PPUSH
22979: CALL_OW 69
22983: ST_TO_ADDR
// if not tmp then
22984: LD_VAR 0 1
22988: NOT
22989: IFFALSE 22993
// exit ;
22991: GO 23019
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22993: LD_VAR 0 1
22997: PUSH
22998: LD_INT 1
23000: PPUSH
23001: LD_VAR 0 1
23005: PPUSH
23006: CALL_OW 12
23010: ARRAY
23011: PPUSH
23012: LD_INT 200
23014: PPUSH
23015: CALL_OW 234
// end ;
23019: PPOPN 1
23021: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23022: LD_EXP 60
23026: PUSH
23027: LD_EXP 89
23031: AND
23032: IFFALSE 23111
23034: GO 23036
23036: DISABLE
23037: LD_INT 0
23039: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23040: LD_ADDR_VAR 0 1
23044: PUSH
23045: LD_INT 22
23047: PUSH
23048: LD_OWVAR 2
23052: PUSH
23053: EMPTY
23054: LIST
23055: LIST
23056: PUSH
23057: LD_INT 21
23059: PUSH
23060: LD_INT 2
23062: PUSH
23063: EMPTY
23064: LIST
23065: LIST
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PPUSH
23071: CALL_OW 69
23075: ST_TO_ADDR
// if not tmp then
23076: LD_VAR 0 1
23080: NOT
23081: IFFALSE 23085
// exit ;
23083: GO 23111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23085: LD_VAR 0 1
23089: PUSH
23090: LD_INT 1
23092: PPUSH
23093: LD_VAR 0 1
23097: PPUSH
23098: CALL_OW 12
23102: ARRAY
23103: PPUSH
23104: LD_INT 60
23106: PPUSH
23107: CALL_OW 234
// end ;
23111: PPOPN 1
23113: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23114: LD_EXP 60
23118: PUSH
23119: LD_EXP 90
23123: AND
23124: IFFALSE 23223
23126: GO 23128
23128: DISABLE
23129: LD_INT 0
23131: PPUSH
23132: PPUSH
// begin enable ;
23133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23134: LD_ADDR_VAR 0 1
23138: PUSH
23139: LD_INT 22
23141: PUSH
23142: LD_OWVAR 2
23146: PUSH
23147: EMPTY
23148: LIST
23149: LIST
23150: PUSH
23151: LD_INT 61
23153: PUSH
23154: EMPTY
23155: LIST
23156: PUSH
23157: LD_INT 33
23159: PUSH
23160: LD_INT 2
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PUSH
23167: EMPTY
23168: LIST
23169: LIST
23170: LIST
23171: PPUSH
23172: CALL_OW 69
23176: ST_TO_ADDR
// if not tmp then
23177: LD_VAR 0 1
23181: NOT
23182: IFFALSE 23186
// exit ;
23184: GO 23223
// for i in tmp do
23186: LD_ADDR_VAR 0 2
23190: PUSH
23191: LD_VAR 0 1
23195: PUSH
23196: FOR_IN
23197: IFFALSE 23221
// if IsControledBy ( i ) then
23199: LD_VAR 0 2
23203: PPUSH
23204: CALL_OW 312
23208: IFFALSE 23219
// ComUnlink ( i ) ;
23210: LD_VAR 0 2
23214: PPUSH
23215: CALL_OW 136
23219: GO 23196
23221: POP
23222: POP
// end ;
23223: PPOPN 2
23225: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23226: LD_EXP 60
23230: PUSH
23231: LD_EXP 91
23235: AND
23236: IFFALSE 23376
23238: GO 23240
23240: DISABLE
23241: LD_INT 0
23243: PPUSH
23244: PPUSH
// begin ToLua ( displayPowell(); ) ;
23245: LD_STRING displayPowell();
23247: PPUSH
23248: CALL_OW 559
// uc_side := 0 ;
23252: LD_ADDR_OWVAR 20
23256: PUSH
23257: LD_INT 0
23259: ST_TO_ADDR
// uc_nation := 2 ;
23260: LD_ADDR_OWVAR 21
23264: PUSH
23265: LD_INT 2
23267: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23268: LD_ADDR_OWVAR 37
23272: PUSH
23273: LD_INT 14
23275: ST_TO_ADDR
// vc_engine := engine_siberite ;
23276: LD_ADDR_OWVAR 39
23280: PUSH
23281: LD_INT 3
23283: ST_TO_ADDR
// vc_control := control_apeman ;
23284: LD_ADDR_OWVAR 38
23288: PUSH
23289: LD_INT 5
23291: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23292: LD_ADDR_OWVAR 40
23296: PUSH
23297: LD_INT 29
23299: ST_TO_ADDR
// un := CreateVehicle ;
23300: LD_ADDR_VAR 0 2
23304: PUSH
23305: CALL_OW 45
23309: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23310: LD_VAR 0 2
23314: PPUSH
23315: LD_INT 1
23317: PPUSH
23318: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23322: LD_INT 35
23324: PPUSH
23325: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23329: LD_VAR 0 2
23333: PPUSH
23334: LD_INT 22
23336: PUSH
23337: LD_OWVAR 2
23341: PUSH
23342: EMPTY
23343: LIST
23344: LIST
23345: PPUSH
23346: CALL_OW 69
23350: PPUSH
23351: LD_VAR 0 2
23355: PPUSH
23356: CALL_OW 74
23360: PPUSH
23361: CALL_OW 115
// until IsDead ( un ) ;
23365: LD_VAR 0 2
23369: PPUSH
23370: CALL_OW 301
23374: IFFALSE 23322
// end ;
23376: PPOPN 2
23378: END
// every 0 0$1 trigger StreamModeActive and sStu do
23379: LD_EXP 60
23383: PUSH
23384: LD_EXP 99
23388: AND
23389: IFFALSE 23405
23391: GO 23393
23393: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23394: LD_STRING displayStucuk();
23396: PPUSH
23397: CALL_OW 559
// ResetFog ;
23401: CALL_OW 335
// end ;
23405: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23406: LD_EXP 60
23410: PUSH
23411: LD_EXP 92
23415: AND
23416: IFFALSE 23557
23418: GO 23420
23420: DISABLE
23421: LD_INT 0
23423: PPUSH
23424: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23425: LD_ADDR_VAR 0 2
23429: PUSH
23430: LD_INT 22
23432: PUSH
23433: LD_OWVAR 2
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 21
23444: PUSH
23445: LD_INT 1
23447: PUSH
23448: EMPTY
23449: LIST
23450: LIST
23451: PUSH
23452: EMPTY
23453: LIST
23454: LIST
23455: PPUSH
23456: CALL_OW 69
23460: ST_TO_ADDR
// if not tmp then
23461: LD_VAR 0 2
23465: NOT
23466: IFFALSE 23470
// exit ;
23468: GO 23557
// un := tmp [ rand ( 1 , tmp ) ] ;
23470: LD_ADDR_VAR 0 1
23474: PUSH
23475: LD_VAR 0 2
23479: PUSH
23480: LD_INT 1
23482: PPUSH
23483: LD_VAR 0 2
23487: PPUSH
23488: CALL_OW 12
23492: ARRAY
23493: ST_TO_ADDR
// SetSide ( un , 0 ) ;
23494: LD_VAR 0 1
23498: PPUSH
23499: LD_INT 0
23501: PPUSH
23502: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
23506: LD_VAR 0 1
23510: PPUSH
23511: LD_OWVAR 3
23515: PUSH
23516: LD_VAR 0 1
23520: DIFF
23521: PPUSH
23522: LD_VAR 0 1
23526: PPUSH
23527: CALL_OW 74
23531: PPUSH
23532: CALL_OW 115
// wait ( 0 0$20 ) ;
23536: LD_INT 700
23538: PPUSH
23539: CALL_OW 67
// SetSide ( un , your_side ) ;
23543: LD_VAR 0 1
23547: PPUSH
23548: LD_OWVAR 2
23552: PPUSH
23553: CALL_OW 235
// end ;
23557: PPOPN 2
23559: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
23560: LD_EXP 60
23564: PUSH
23565: LD_EXP 93
23569: AND
23570: IFFALSE 23676
23572: GO 23574
23574: DISABLE
23575: LD_INT 0
23577: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23578: LD_ADDR_VAR 0 1
23582: PUSH
23583: LD_INT 22
23585: PUSH
23586: LD_OWVAR 2
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PUSH
23595: LD_INT 2
23597: PUSH
23598: LD_INT 30
23600: PUSH
23601: LD_INT 0
23603: PUSH
23604: EMPTY
23605: LIST
23606: LIST
23607: PUSH
23608: LD_INT 30
23610: PUSH
23611: LD_INT 1
23613: PUSH
23614: EMPTY
23615: LIST
23616: LIST
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: LIST
23622: PUSH
23623: EMPTY
23624: LIST
23625: LIST
23626: PPUSH
23627: CALL_OW 69
23631: ST_TO_ADDR
// if not depot then
23632: LD_VAR 0 1
23636: NOT
23637: IFFALSE 23641
// exit ;
23639: GO 23676
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
23641: LD_VAR 0 1
23645: PUSH
23646: LD_INT 1
23648: ARRAY
23649: PPUSH
23650: CALL_OW 250
23654: PPUSH
23655: LD_VAR 0 1
23659: PUSH
23660: LD_INT 1
23662: ARRAY
23663: PPUSH
23664: CALL_OW 251
23668: PPUSH
23669: LD_INT 70
23671: PPUSH
23672: CALL_OW 495
// end ;
23676: PPOPN 1
23678: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
23679: LD_EXP 60
23683: PUSH
23684: LD_EXP 94
23688: AND
23689: IFFALSE 23900
23691: GO 23693
23693: DISABLE
23694: LD_INT 0
23696: PPUSH
23697: PPUSH
23698: PPUSH
23699: PPUSH
23700: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23701: LD_ADDR_VAR 0 5
23705: PUSH
23706: LD_INT 22
23708: PUSH
23709: LD_OWVAR 2
23713: PUSH
23714: EMPTY
23715: LIST
23716: LIST
23717: PUSH
23718: LD_INT 21
23720: PUSH
23721: LD_INT 1
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: PUSH
23728: EMPTY
23729: LIST
23730: LIST
23731: PPUSH
23732: CALL_OW 69
23736: ST_TO_ADDR
// if not tmp then
23737: LD_VAR 0 5
23741: NOT
23742: IFFALSE 23746
// exit ;
23744: GO 23900
// for i in tmp do
23746: LD_ADDR_VAR 0 1
23750: PUSH
23751: LD_VAR 0 5
23755: PUSH
23756: FOR_IN
23757: IFFALSE 23898
// begin d := rand ( 0 , 5 ) ;
23759: LD_ADDR_VAR 0 4
23763: PUSH
23764: LD_INT 0
23766: PPUSH
23767: LD_INT 5
23769: PPUSH
23770: CALL_OW 12
23774: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23775: LD_ADDR_VAR 0 2
23779: PUSH
23780: LD_VAR 0 1
23784: PPUSH
23785: CALL_OW 250
23789: PPUSH
23790: LD_VAR 0 4
23794: PPUSH
23795: LD_INT 3
23797: PPUSH
23798: LD_INT 12
23800: PPUSH
23801: CALL_OW 12
23805: PPUSH
23806: CALL_OW 272
23810: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23811: LD_ADDR_VAR 0 3
23815: PUSH
23816: LD_VAR 0 1
23820: PPUSH
23821: CALL_OW 251
23825: PPUSH
23826: LD_VAR 0 4
23830: PPUSH
23831: LD_INT 3
23833: PPUSH
23834: LD_INT 12
23836: PPUSH
23837: CALL_OW 12
23841: PPUSH
23842: CALL_OW 273
23846: ST_TO_ADDR
// if ValidHex ( x , y ) then
23847: LD_VAR 0 2
23851: PPUSH
23852: LD_VAR 0 3
23856: PPUSH
23857: CALL_OW 488
23861: IFFALSE 23896
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23863: LD_VAR 0 1
23867: PPUSH
23868: LD_VAR 0 2
23872: PPUSH
23873: LD_VAR 0 3
23877: PPUSH
23878: LD_INT 3
23880: PPUSH
23881: LD_INT 6
23883: PPUSH
23884: CALL_OW 12
23888: PPUSH
23889: LD_INT 1
23891: PPUSH
23892: CALL_OW 483
// end ;
23896: GO 23756
23898: POP
23899: POP
// end ;
23900: PPOPN 5
23902: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23903: LD_EXP 60
23907: PUSH
23908: LD_EXP 95
23912: AND
23913: IFFALSE 24007
23915: GO 23917
23917: DISABLE
23918: LD_INT 0
23920: PPUSH
23921: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23922: LD_ADDR_VAR 0 2
23926: PUSH
23927: LD_INT 22
23929: PUSH
23930: LD_OWVAR 2
23934: PUSH
23935: EMPTY
23936: LIST
23937: LIST
23938: PUSH
23939: LD_INT 32
23941: PUSH
23942: LD_INT 1
23944: PUSH
23945: EMPTY
23946: LIST
23947: LIST
23948: PUSH
23949: LD_INT 21
23951: PUSH
23952: LD_INT 2
23954: PUSH
23955: EMPTY
23956: LIST
23957: LIST
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: LIST
23963: PPUSH
23964: CALL_OW 69
23968: ST_TO_ADDR
// if not tmp then
23969: LD_VAR 0 2
23973: NOT
23974: IFFALSE 23978
// exit ;
23976: GO 24007
// for i in tmp do
23978: LD_ADDR_VAR 0 1
23982: PUSH
23983: LD_VAR 0 2
23987: PUSH
23988: FOR_IN
23989: IFFALSE 24005
// SetFuel ( i , 0 ) ;
23991: LD_VAR 0 1
23995: PPUSH
23996: LD_INT 0
23998: PPUSH
23999: CALL_OW 240
24003: GO 23988
24005: POP
24006: POP
// end ;
24007: PPOPN 2
24009: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24010: LD_EXP 60
24014: PUSH
24015: LD_EXP 96
24019: AND
24020: IFFALSE 24086
24022: GO 24024
24024: DISABLE
24025: LD_INT 0
24027: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24028: LD_ADDR_VAR 0 1
24032: PUSH
24033: LD_INT 22
24035: PUSH
24036: LD_OWVAR 2
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 30
24047: PUSH
24048: LD_INT 29
24050: PUSH
24051: EMPTY
24052: LIST
24053: LIST
24054: PUSH
24055: EMPTY
24056: LIST
24057: LIST
24058: PPUSH
24059: CALL_OW 69
24063: ST_TO_ADDR
// if not tmp then
24064: LD_VAR 0 1
24068: NOT
24069: IFFALSE 24073
// exit ;
24071: GO 24086
// DestroyUnit ( tmp [ 1 ] ) ;
24073: LD_VAR 0 1
24077: PUSH
24078: LD_INT 1
24080: ARRAY
24081: PPUSH
24082: CALL_OW 65
// end ;
24086: PPOPN 1
24088: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24089: LD_EXP 60
24093: PUSH
24094: LD_EXP 98
24098: AND
24099: IFFALSE 24228
24101: GO 24103
24103: DISABLE
24104: LD_INT 0
24106: PPUSH
// begin uc_side := 0 ;
24107: LD_ADDR_OWVAR 20
24111: PUSH
24112: LD_INT 0
24114: ST_TO_ADDR
// uc_nation := nation_arabian ;
24115: LD_ADDR_OWVAR 21
24119: PUSH
24120: LD_INT 2
24122: ST_TO_ADDR
// hc_gallery :=  ;
24123: LD_ADDR_OWVAR 33
24127: PUSH
24128: LD_STRING 
24130: ST_TO_ADDR
// hc_name :=  ;
24131: LD_ADDR_OWVAR 26
24135: PUSH
24136: LD_STRING 
24138: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24139: LD_INT 1
24141: PPUSH
24142: LD_INT 11
24144: PPUSH
24145: LD_INT 10
24147: PPUSH
24148: CALL_OW 380
// un := CreateHuman ;
24152: LD_ADDR_VAR 0 1
24156: PUSH
24157: CALL_OW 44
24161: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24162: LD_VAR 0 1
24166: PPUSH
24167: LD_INT 1
24169: PPUSH
24170: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24174: LD_INT 35
24176: PPUSH
24177: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24181: LD_VAR 0 1
24185: PPUSH
24186: LD_INT 22
24188: PUSH
24189: LD_OWVAR 2
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PPUSH
24198: CALL_OW 69
24202: PPUSH
24203: LD_VAR 0 1
24207: PPUSH
24208: CALL_OW 74
24212: PPUSH
24213: CALL_OW 115
// until IsDead ( un ) ;
24217: LD_VAR 0 1
24221: PPUSH
24222: CALL_OW 301
24226: IFFALSE 24174
// end ;
24228: PPOPN 1
24230: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24231: LD_EXP 60
24235: PUSH
24236: LD_EXP 100
24240: AND
24241: IFFALSE 24253
24243: GO 24245
24245: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24246: LD_STRING earthquake(getX(game), 0, 32)
24248: PPUSH
24249: CALL_OW 559
24253: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24254: LD_EXP 60
24258: PUSH
24259: LD_EXP 101
24263: AND
24264: IFFALSE 24355
24266: GO 24268
24268: DISABLE
24269: LD_INT 0
24271: PPUSH
// begin enable ;
24272: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24273: LD_ADDR_VAR 0 1
24277: PUSH
24278: LD_INT 22
24280: PUSH
24281: LD_OWVAR 2
24285: PUSH
24286: EMPTY
24287: LIST
24288: LIST
24289: PUSH
24290: LD_INT 21
24292: PUSH
24293: LD_INT 2
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 33
24302: PUSH
24303: LD_INT 3
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: EMPTY
24311: LIST
24312: LIST
24313: LIST
24314: PPUSH
24315: CALL_OW 69
24319: ST_TO_ADDR
// if not tmp then
24320: LD_VAR 0 1
24324: NOT
24325: IFFALSE 24329
// exit ;
24327: GO 24355
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24329: LD_VAR 0 1
24333: PUSH
24334: LD_INT 1
24336: PPUSH
24337: LD_VAR 0 1
24341: PPUSH
24342: CALL_OW 12
24346: ARRAY
24347: PPUSH
24348: LD_INT 1
24350: PPUSH
24351: CALL_OW 234
// end ;
24355: PPOPN 1
24357: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24358: LD_EXP 60
24362: PUSH
24363: LD_EXP 102
24367: AND
24368: IFFALSE 24509
24370: GO 24372
24372: DISABLE
24373: LD_INT 0
24375: PPUSH
24376: PPUSH
24377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24378: LD_ADDR_VAR 0 3
24382: PUSH
24383: LD_INT 22
24385: PUSH
24386: LD_OWVAR 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 25
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 69
24413: ST_TO_ADDR
// if not tmp then
24414: LD_VAR 0 3
24418: NOT
24419: IFFALSE 24423
// exit ;
24421: GO 24509
// un := tmp [ rand ( 1 , tmp ) ] ;
24423: LD_ADDR_VAR 0 2
24427: PUSH
24428: LD_VAR 0 3
24432: PUSH
24433: LD_INT 1
24435: PPUSH
24436: LD_VAR 0 3
24440: PPUSH
24441: CALL_OW 12
24445: ARRAY
24446: ST_TO_ADDR
// if Crawls ( un ) then
24447: LD_VAR 0 2
24451: PPUSH
24452: CALL_OW 318
24456: IFFALSE 24467
// ComWalk ( un ) ;
24458: LD_VAR 0 2
24462: PPUSH
24463: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24467: LD_VAR 0 2
24471: PPUSH
24472: LD_INT 9
24474: PPUSH
24475: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
24479: LD_INT 28
24481: PPUSH
24482: LD_OWVAR 2
24486: PPUSH
24487: LD_INT 2
24489: PPUSH
24490: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
24494: LD_INT 29
24496: PPUSH
24497: LD_OWVAR 2
24501: PPUSH
24502: LD_INT 2
24504: PPUSH
24505: CALL_OW 322
// end ;
24509: PPOPN 3
24511: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
24512: LD_EXP 60
24516: PUSH
24517: LD_EXP 103
24521: AND
24522: IFFALSE 24633
24524: GO 24526
24526: DISABLE
24527: LD_INT 0
24529: PPUSH
24530: PPUSH
24531: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24532: LD_ADDR_VAR 0 3
24536: PUSH
24537: LD_INT 22
24539: PUSH
24540: LD_OWVAR 2
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 25
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PPUSH
24563: CALL_OW 69
24567: ST_TO_ADDR
// if not tmp then
24568: LD_VAR 0 3
24572: NOT
24573: IFFALSE 24577
// exit ;
24575: GO 24633
// un := tmp [ rand ( 1 , tmp ) ] ;
24577: LD_ADDR_VAR 0 2
24581: PUSH
24582: LD_VAR 0 3
24586: PUSH
24587: LD_INT 1
24589: PPUSH
24590: LD_VAR 0 3
24594: PPUSH
24595: CALL_OW 12
24599: ARRAY
24600: ST_TO_ADDR
// if Crawls ( un ) then
24601: LD_VAR 0 2
24605: PPUSH
24606: CALL_OW 318
24610: IFFALSE 24621
// ComWalk ( un ) ;
24612: LD_VAR 0 2
24616: PPUSH
24617: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24621: LD_VAR 0 2
24625: PPUSH
24626: LD_INT 8
24628: PPUSH
24629: CALL_OW 336
// end ;
24633: PPOPN 3
24635: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
24636: LD_EXP 60
24640: PUSH
24641: LD_EXP 104
24645: AND
24646: IFFALSE 24790
24648: GO 24650
24650: DISABLE
24651: LD_INT 0
24653: PPUSH
24654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
24655: LD_ADDR_VAR 0 2
24659: PUSH
24660: LD_INT 22
24662: PUSH
24663: LD_OWVAR 2
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: PUSH
24672: LD_INT 21
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 2
24684: PUSH
24685: LD_INT 34
24687: PUSH
24688: LD_INT 12
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 34
24697: PUSH
24698: LD_INT 51
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: LD_INT 34
24707: PUSH
24708: LD_INT 32
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: PUSH
24721: EMPTY
24722: LIST
24723: LIST
24724: LIST
24725: PPUSH
24726: CALL_OW 69
24730: ST_TO_ADDR
// if not tmp then
24731: LD_VAR 0 2
24735: NOT
24736: IFFALSE 24740
// exit ;
24738: GO 24790
// for i in tmp do
24740: LD_ADDR_VAR 0 1
24744: PUSH
24745: LD_VAR 0 2
24749: PUSH
24750: FOR_IN
24751: IFFALSE 24788
// if GetCargo ( i , mat_artifact ) = 0 then
24753: LD_VAR 0 1
24757: PPUSH
24758: LD_INT 4
24760: PPUSH
24761: CALL_OW 289
24765: PUSH
24766: LD_INT 0
24768: EQUAL
24769: IFFALSE 24786
// SetCargo ( i , mat_siberit , 100 ) ;
24771: LD_VAR 0 1
24775: PPUSH
24776: LD_INT 3
24778: PPUSH
24779: LD_INT 100
24781: PPUSH
24782: CALL_OW 290
24786: GO 24750
24788: POP
24789: POP
// end ;
24790: PPOPN 2
24792: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24793: LD_EXP 60
24797: PUSH
24798: LD_EXP 105
24802: AND
24803: IFFALSE 24986
24805: GO 24807
24807: DISABLE
24808: LD_INT 0
24810: PPUSH
24811: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24812: LD_ADDR_VAR 0 2
24816: PUSH
24817: LD_INT 22
24819: PUSH
24820: LD_OWVAR 2
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: PPUSH
24829: CALL_OW 69
24833: ST_TO_ADDR
// if not tmp then
24834: LD_VAR 0 2
24838: NOT
24839: IFFALSE 24843
// exit ;
24841: GO 24986
// for i := 1 to 2 do
24843: LD_ADDR_VAR 0 1
24847: PUSH
24848: DOUBLE
24849: LD_INT 1
24851: DEC
24852: ST_TO_ADDR
24853: LD_INT 2
24855: PUSH
24856: FOR_TO
24857: IFFALSE 24984
// begin uc_side := your_side ;
24859: LD_ADDR_OWVAR 20
24863: PUSH
24864: LD_OWVAR 2
24868: ST_TO_ADDR
// uc_nation := nation_american ;
24869: LD_ADDR_OWVAR 21
24873: PUSH
24874: LD_INT 1
24876: ST_TO_ADDR
// vc_chassis := us_morphling ;
24877: LD_ADDR_OWVAR 37
24881: PUSH
24882: LD_INT 5
24884: ST_TO_ADDR
// vc_engine := engine_siberite ;
24885: LD_ADDR_OWVAR 39
24889: PUSH
24890: LD_INT 3
24892: ST_TO_ADDR
// vc_control := control_computer ;
24893: LD_ADDR_OWVAR 38
24897: PUSH
24898: LD_INT 3
24900: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24901: LD_ADDR_OWVAR 40
24905: PUSH
24906: LD_INT 10
24908: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24909: LD_VAR 0 2
24913: PUSH
24914: LD_INT 1
24916: ARRAY
24917: PPUSH
24918: CALL_OW 310
24922: NOT
24923: IFFALSE 24970
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24925: CALL_OW 45
24929: PPUSH
24930: LD_VAR 0 2
24934: PUSH
24935: LD_INT 1
24937: ARRAY
24938: PPUSH
24939: CALL_OW 250
24943: PPUSH
24944: LD_VAR 0 2
24948: PUSH
24949: LD_INT 1
24951: ARRAY
24952: PPUSH
24953: CALL_OW 251
24957: PPUSH
24958: LD_INT 12
24960: PPUSH
24961: LD_INT 1
24963: PPUSH
24964: CALL_OW 50
24968: GO 24982
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24970: CALL_OW 45
24974: PPUSH
24975: LD_INT 1
24977: PPUSH
24978: CALL_OW 51
// end ;
24982: GO 24856
24984: POP
24985: POP
// end ;
24986: PPOPN 2
24988: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24989: LD_EXP 60
24993: PUSH
24994: LD_EXP 106
24998: AND
24999: IFFALSE 25221
25001: GO 25003
25003: DISABLE
25004: LD_INT 0
25006: PPUSH
25007: PPUSH
25008: PPUSH
25009: PPUSH
25010: PPUSH
25011: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25012: LD_ADDR_VAR 0 6
25016: PUSH
25017: LD_INT 22
25019: PUSH
25020: LD_OWVAR 2
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: PUSH
25029: LD_INT 21
25031: PUSH
25032: LD_INT 1
25034: PUSH
25035: EMPTY
25036: LIST
25037: LIST
25038: PUSH
25039: LD_INT 3
25041: PUSH
25042: LD_INT 23
25044: PUSH
25045: LD_INT 0
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PUSH
25052: EMPTY
25053: LIST
25054: LIST
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: LIST
25060: PPUSH
25061: CALL_OW 69
25065: ST_TO_ADDR
// if not tmp then
25066: LD_VAR 0 6
25070: NOT
25071: IFFALSE 25075
// exit ;
25073: GO 25221
// s1 := rand ( 1 , 4 ) ;
25075: LD_ADDR_VAR 0 2
25079: PUSH
25080: LD_INT 1
25082: PPUSH
25083: LD_INT 4
25085: PPUSH
25086: CALL_OW 12
25090: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25091: LD_ADDR_VAR 0 4
25095: PUSH
25096: LD_VAR 0 6
25100: PUSH
25101: LD_INT 1
25103: ARRAY
25104: PPUSH
25105: LD_VAR 0 2
25109: PPUSH
25110: CALL_OW 259
25114: ST_TO_ADDR
// if s1 = 1 then
25115: LD_VAR 0 2
25119: PUSH
25120: LD_INT 1
25122: EQUAL
25123: IFFALSE 25143
// s2 := rand ( 2 , 4 ) else
25125: LD_ADDR_VAR 0 3
25129: PUSH
25130: LD_INT 2
25132: PPUSH
25133: LD_INT 4
25135: PPUSH
25136: CALL_OW 12
25140: ST_TO_ADDR
25141: GO 25151
// s2 := 1 ;
25143: LD_ADDR_VAR 0 3
25147: PUSH
25148: LD_INT 1
25150: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25151: LD_ADDR_VAR 0 5
25155: PUSH
25156: LD_VAR 0 6
25160: PUSH
25161: LD_INT 1
25163: ARRAY
25164: PPUSH
25165: LD_VAR 0 3
25169: PPUSH
25170: CALL_OW 259
25174: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25175: LD_VAR 0 6
25179: PUSH
25180: LD_INT 1
25182: ARRAY
25183: PPUSH
25184: LD_VAR 0 2
25188: PPUSH
25189: LD_VAR 0 5
25193: PPUSH
25194: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25198: LD_VAR 0 6
25202: PUSH
25203: LD_INT 1
25205: ARRAY
25206: PPUSH
25207: LD_VAR 0 3
25211: PPUSH
25212: LD_VAR 0 4
25216: PPUSH
25217: CALL_OW 237
// end ;
25221: PPOPN 6
25223: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25224: LD_EXP 60
25228: PUSH
25229: LD_EXP 107
25233: AND
25234: IFFALSE 25313
25236: GO 25238
25238: DISABLE
25239: LD_INT 0
25241: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25242: LD_ADDR_VAR 0 1
25246: PUSH
25247: LD_INT 22
25249: PUSH
25250: LD_OWVAR 2
25254: PUSH
25255: EMPTY
25256: LIST
25257: LIST
25258: PUSH
25259: LD_INT 30
25261: PUSH
25262: LD_INT 3
25264: PUSH
25265: EMPTY
25266: LIST
25267: LIST
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PPUSH
25273: CALL_OW 69
25277: ST_TO_ADDR
// if not tmp then
25278: LD_VAR 0 1
25282: NOT
25283: IFFALSE 25287
// exit ;
25285: GO 25313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25287: LD_VAR 0 1
25291: PUSH
25292: LD_INT 1
25294: PPUSH
25295: LD_VAR 0 1
25299: PPUSH
25300: CALL_OW 12
25304: ARRAY
25305: PPUSH
25306: LD_INT 1
25308: PPUSH
25309: CALL_OW 234
// end ;
25313: PPOPN 1
25315: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25316: LD_EXP 60
25320: PUSH
25321: LD_EXP 108
25325: AND
25326: IFFALSE 25438
25328: GO 25330
25330: DISABLE
25331: LD_INT 0
25333: PPUSH
25334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25335: LD_ADDR_VAR 0 2
25339: PUSH
25340: LD_INT 22
25342: PUSH
25343: LD_OWVAR 2
25347: PUSH
25348: EMPTY
25349: LIST
25350: LIST
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: LD_INT 30
25357: PUSH
25358: LD_INT 27
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 30
25367: PUSH
25368: LD_INT 26
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 30
25377: PUSH
25378: LD_INT 28
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: LIST
25390: PUSH
25391: EMPTY
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 69
25399: ST_TO_ADDR
// if not tmp then
25400: LD_VAR 0 2
25404: NOT
25405: IFFALSE 25409
// exit ;
25407: GO 25438
// for i in tmp do
25409: LD_ADDR_VAR 0 1
25413: PUSH
25414: LD_VAR 0 2
25418: PUSH
25419: FOR_IN
25420: IFFALSE 25436
// SetLives ( i , 1 ) ;
25422: LD_VAR 0 1
25426: PPUSH
25427: LD_INT 1
25429: PPUSH
25430: CALL_OW 234
25434: GO 25419
25436: POP
25437: POP
// end ;
25438: PPOPN 2
25440: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25441: LD_EXP 60
25445: PUSH
25446: LD_EXP 109
25450: AND
25451: IFFALSE 25738
25453: GO 25455
25455: DISABLE
25456: LD_INT 0
25458: PPUSH
25459: PPUSH
25460: PPUSH
// begin i := rand ( 1 , 7 ) ;
25461: LD_ADDR_VAR 0 1
25465: PUSH
25466: LD_INT 1
25468: PPUSH
25469: LD_INT 7
25471: PPUSH
25472: CALL_OW 12
25476: ST_TO_ADDR
// case i of 1 :
25477: LD_VAR 0 1
25481: PUSH
25482: LD_INT 1
25484: DOUBLE
25485: EQUAL
25486: IFTRUE 25490
25488: GO 25500
25490: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
25491: LD_STRING earthquake(getX(game), 0, 32)
25493: PPUSH
25494: CALL_OW 559
25498: GO 25738
25500: LD_INT 2
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25522
25508: POP
// begin ToLua ( displayStucuk(); ) ;
25509: LD_STRING displayStucuk();
25511: PPUSH
25512: CALL_OW 559
// ResetFog ;
25516: CALL_OW 335
// end ; 3 :
25520: GO 25738
25522: LD_INT 3
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25634
25530: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25531: LD_ADDR_VAR 0 2
25535: PUSH
25536: LD_INT 22
25538: PUSH
25539: LD_OWVAR 2
25543: PUSH
25544: EMPTY
25545: LIST
25546: LIST
25547: PUSH
25548: LD_INT 25
25550: PUSH
25551: LD_INT 1
25553: PUSH
25554: EMPTY
25555: LIST
25556: LIST
25557: PUSH
25558: EMPTY
25559: LIST
25560: LIST
25561: PPUSH
25562: CALL_OW 69
25566: ST_TO_ADDR
// if not tmp then
25567: LD_VAR 0 2
25571: NOT
25572: IFFALSE 25576
// exit ;
25574: GO 25738
// un := tmp [ rand ( 1 , tmp ) ] ;
25576: LD_ADDR_VAR 0 3
25580: PUSH
25581: LD_VAR 0 2
25585: PUSH
25586: LD_INT 1
25588: PPUSH
25589: LD_VAR 0 2
25593: PPUSH
25594: CALL_OW 12
25598: ARRAY
25599: ST_TO_ADDR
// if Crawls ( un ) then
25600: LD_VAR 0 3
25604: PPUSH
25605: CALL_OW 318
25609: IFFALSE 25620
// ComWalk ( un ) ;
25611: LD_VAR 0 3
25615: PPUSH
25616: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25620: LD_VAR 0 3
25624: PPUSH
25625: LD_INT 8
25627: PPUSH
25628: CALL_OW 336
// end ; 4 :
25632: GO 25738
25634: LD_INT 4
25636: DOUBLE
25637: EQUAL
25638: IFTRUE 25642
25640: GO 25716
25642: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
25643: LD_ADDR_VAR 0 2
25647: PUSH
25648: LD_INT 22
25650: PUSH
25651: LD_OWVAR 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 30
25662: PUSH
25663: LD_INT 29
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PPUSH
25674: CALL_OW 69
25678: ST_TO_ADDR
// if not tmp then
25679: LD_VAR 0 2
25683: NOT
25684: IFFALSE 25688
// exit ;
25686: GO 25738
// CenterNowOnUnits ( tmp [ 1 ] ) ;
25688: LD_VAR 0 2
25692: PUSH
25693: LD_INT 1
25695: ARRAY
25696: PPUSH
25697: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
25701: LD_VAR 0 2
25705: PUSH
25706: LD_INT 1
25708: ARRAY
25709: PPUSH
25710: CALL_OW 65
// end ; 5 .. 7 :
25714: GO 25738
25716: LD_INT 5
25718: DOUBLE
25719: GREATEREQUAL
25720: IFFALSE 25728
25722: LD_INT 7
25724: DOUBLE
25725: LESSEQUAL
25726: IFTRUE 25730
25728: GO 25737
25730: POP
// StreamSibBomb ; end ;
25731: CALL 21975 0 0
25735: GO 25738
25737: POP
// end ;
25738: PPOPN 3
25740: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25741: LD_EXP 60
25745: PUSH
25746: LD_EXP 110
25750: AND
25751: IFFALSE 25907
25753: GO 25755
25755: DISABLE
25756: LD_INT 0
25758: PPUSH
25759: PPUSH
25760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25761: LD_ADDR_VAR 0 2
25765: PUSH
25766: LD_INT 81
25768: PUSH
25769: LD_OWVAR 2
25773: PUSH
25774: EMPTY
25775: LIST
25776: LIST
25777: PUSH
25778: LD_INT 2
25780: PUSH
25781: LD_INT 21
25783: PUSH
25784: LD_INT 1
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: LD_INT 21
25793: PUSH
25794: LD_INT 2
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: EMPTY
25802: LIST
25803: LIST
25804: LIST
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PPUSH
25810: CALL_OW 69
25814: ST_TO_ADDR
// if not tmp then
25815: LD_VAR 0 2
25819: NOT
25820: IFFALSE 25824
// exit ;
25822: GO 25907
// p := 0 ;
25824: LD_ADDR_VAR 0 3
25828: PUSH
25829: LD_INT 0
25831: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25832: LD_INT 35
25834: PPUSH
25835: CALL_OW 67
// p := p + 1 ;
25839: LD_ADDR_VAR 0 3
25843: PUSH
25844: LD_VAR 0 3
25848: PUSH
25849: LD_INT 1
25851: PLUS
25852: ST_TO_ADDR
// for i in tmp do
25853: LD_ADDR_VAR 0 1
25857: PUSH
25858: LD_VAR 0 2
25862: PUSH
25863: FOR_IN
25864: IFFALSE 25895
// if GetLives ( i ) < 1000 then
25866: LD_VAR 0 1
25870: PPUSH
25871: CALL_OW 256
25875: PUSH
25876: LD_INT 1000
25878: LESS
25879: IFFALSE 25893
// SetLives ( i , 1000 ) ;
25881: LD_VAR 0 1
25885: PPUSH
25886: LD_INT 1000
25888: PPUSH
25889: CALL_OW 234
25893: GO 25863
25895: POP
25896: POP
// until p > 20 ;
25897: LD_VAR 0 3
25901: PUSH
25902: LD_INT 20
25904: GREATER
25905: IFFALSE 25832
// end ;
25907: PPOPN 3
25909: END
// every 0 0$1 trigger StreamModeActive and sTime do
25910: LD_EXP 60
25914: PUSH
25915: LD_EXP 111
25919: AND
25920: IFFALSE 25955
25922: GO 25924
25924: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25925: LD_INT 28
25927: PPUSH
25928: LD_OWVAR 2
25932: PPUSH
25933: LD_INT 2
25935: PPUSH
25936: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25940: LD_INT 30
25942: PPUSH
25943: LD_OWVAR 2
25947: PPUSH
25948: LD_INT 2
25950: PPUSH
25951: CALL_OW 322
// end ;
25955: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25956: LD_EXP 60
25960: PUSH
25961: LD_EXP 112
25965: AND
25966: IFFALSE 26087
25968: GO 25970
25970: DISABLE
25971: LD_INT 0
25973: PPUSH
25974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25975: LD_ADDR_VAR 0 2
25979: PUSH
25980: LD_INT 22
25982: PUSH
25983: LD_OWVAR 2
25987: PUSH
25988: EMPTY
25989: LIST
25990: LIST
25991: PUSH
25992: LD_INT 21
25994: PUSH
25995: LD_INT 1
25997: PUSH
25998: EMPTY
25999: LIST
26000: LIST
26001: PUSH
26002: LD_INT 3
26004: PUSH
26005: LD_INT 23
26007: PUSH
26008: LD_INT 0
26010: PUSH
26011: EMPTY
26012: LIST
26013: LIST
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: LIST
26023: PPUSH
26024: CALL_OW 69
26028: ST_TO_ADDR
// if not tmp then
26029: LD_VAR 0 2
26033: NOT
26034: IFFALSE 26038
// exit ;
26036: GO 26087
// for i in tmp do
26038: LD_ADDR_VAR 0 1
26042: PUSH
26043: LD_VAR 0 2
26047: PUSH
26048: FOR_IN
26049: IFFALSE 26085
// begin if Crawls ( i ) then
26051: LD_VAR 0 1
26055: PPUSH
26056: CALL_OW 318
26060: IFFALSE 26071
// ComWalk ( i ) ;
26062: LD_VAR 0 1
26066: PPUSH
26067: CALL_OW 138
// SetClass ( i , 2 ) ;
26071: LD_VAR 0 1
26075: PPUSH
26076: LD_INT 2
26078: PPUSH
26079: CALL_OW 336
// end ;
26083: GO 26048
26085: POP
26086: POP
// end ;
26087: PPOPN 2
26089: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26090: LD_EXP 60
26094: PUSH
26095: LD_EXP 113
26099: AND
26100: IFFALSE 26388
26102: GO 26104
26104: DISABLE
26105: LD_INT 0
26107: PPUSH
26108: PPUSH
26109: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26110: LD_OWVAR 2
26114: PPUSH
26115: LD_INT 9
26117: PPUSH
26118: LD_INT 1
26120: PPUSH
26121: LD_INT 1
26123: PPUSH
26124: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26128: LD_INT 9
26130: PPUSH
26131: LD_OWVAR 2
26135: PPUSH
26136: CALL_OW 343
// uc_side := 9 ;
26140: LD_ADDR_OWVAR 20
26144: PUSH
26145: LD_INT 9
26147: ST_TO_ADDR
// uc_nation := 2 ;
26148: LD_ADDR_OWVAR 21
26152: PUSH
26153: LD_INT 2
26155: ST_TO_ADDR
// hc_name := Dark Warrior ;
26156: LD_ADDR_OWVAR 26
26160: PUSH
26161: LD_STRING Dark Warrior
26163: ST_TO_ADDR
// hc_gallery :=  ;
26164: LD_ADDR_OWVAR 33
26168: PUSH
26169: LD_STRING 
26171: ST_TO_ADDR
// hc_noskilllimit := true ;
26172: LD_ADDR_OWVAR 76
26176: PUSH
26177: LD_INT 1
26179: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26180: LD_ADDR_OWVAR 31
26184: PUSH
26185: LD_INT 30
26187: PUSH
26188: LD_INT 30
26190: PUSH
26191: LD_INT 30
26193: PUSH
26194: LD_INT 30
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: LIST
26201: LIST
26202: ST_TO_ADDR
// un := CreateHuman ;
26203: LD_ADDR_VAR 0 3
26207: PUSH
26208: CALL_OW 44
26212: ST_TO_ADDR
// hc_noskilllimit := false ;
26213: LD_ADDR_OWVAR 76
26217: PUSH
26218: LD_INT 0
26220: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26221: LD_VAR 0 3
26225: PPUSH
26226: LD_INT 1
26228: PPUSH
26229: CALL_OW 51
// ToLua ( playRanger() ) ;
26233: LD_STRING playRanger()
26235: PPUSH
26236: CALL_OW 559
// p := 0 ;
26240: LD_ADDR_VAR 0 2
26244: PUSH
26245: LD_INT 0
26247: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26248: LD_INT 35
26250: PPUSH
26251: CALL_OW 67
// p := p + 1 ;
26255: LD_ADDR_VAR 0 2
26259: PUSH
26260: LD_VAR 0 2
26264: PUSH
26265: LD_INT 1
26267: PLUS
26268: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26269: LD_VAR 0 3
26273: PPUSH
26274: CALL_OW 256
26278: PUSH
26279: LD_INT 1000
26281: LESS
26282: IFFALSE 26296
// SetLives ( un , 1000 ) ;
26284: LD_VAR 0 3
26288: PPUSH
26289: LD_INT 1000
26291: PPUSH
26292: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26296: LD_VAR 0 3
26300: PPUSH
26301: LD_INT 81
26303: PUSH
26304: LD_OWVAR 2
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 91
26315: PUSH
26316: LD_VAR 0 3
26320: PUSH
26321: LD_INT 30
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: LIST
26328: PUSH
26329: EMPTY
26330: LIST
26331: LIST
26332: PPUSH
26333: CALL_OW 69
26337: PPUSH
26338: LD_VAR 0 3
26342: PPUSH
26343: CALL_OW 74
26347: PPUSH
26348: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26352: LD_VAR 0 2
26356: PUSH
26357: LD_INT 80
26359: GREATER
26360: PUSH
26361: LD_VAR 0 3
26365: PPUSH
26366: CALL_OW 301
26370: OR
26371: IFFALSE 26248
// if un then
26373: LD_VAR 0 3
26377: IFFALSE 26388
// RemoveUnit ( un ) ;
26379: LD_VAR 0 3
26383: PPUSH
26384: CALL_OW 64
// end ;
26388: PPOPN 3
26390: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26391: LD_EXP 114
26395: IFFALSE 26511
26397: GO 26399
26399: DISABLE
26400: LD_INT 0
26402: PPUSH
26403: PPUSH
26404: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26405: LD_ADDR_VAR 0 2
26409: PUSH
26410: LD_INT 81
26412: PUSH
26413: LD_OWVAR 2
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PUSH
26422: LD_INT 21
26424: PUSH
26425: LD_INT 1
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: EMPTY
26433: LIST
26434: LIST
26435: PPUSH
26436: CALL_OW 69
26440: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26441: LD_STRING playComputer()
26443: PPUSH
26444: CALL_OW 559
// if not tmp then
26448: LD_VAR 0 2
26452: NOT
26453: IFFALSE 26457
// exit ;
26455: GO 26511
// for i in tmp do
26457: LD_ADDR_VAR 0 1
26461: PUSH
26462: LD_VAR 0 2
26466: PUSH
26467: FOR_IN
26468: IFFALSE 26509
// for j := 1 to 4 do
26470: LD_ADDR_VAR 0 3
26474: PUSH
26475: DOUBLE
26476: LD_INT 1
26478: DEC
26479: ST_TO_ADDR
26480: LD_INT 4
26482: PUSH
26483: FOR_TO
26484: IFFALSE 26505
// SetSkill ( i , j , 10 ) ;
26486: LD_VAR 0 1
26490: PPUSH
26491: LD_VAR 0 3
26495: PPUSH
26496: LD_INT 10
26498: PPUSH
26499: CALL_OW 237
26503: GO 26483
26505: POP
26506: POP
26507: GO 26467
26509: POP
26510: POP
// end ;
26511: PPOPN 3
26513: END
// every 0 0$1 trigger s30 do var i , tmp ;
26514: LD_EXP 115
26518: IFFALSE 26587
26520: GO 26522
26522: DISABLE
26523: LD_INT 0
26525: PPUSH
26526: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26527: LD_ADDR_VAR 0 2
26531: PUSH
26532: LD_INT 22
26534: PUSH
26535: LD_OWVAR 2
26539: PUSH
26540: EMPTY
26541: LIST
26542: LIST
26543: PPUSH
26544: CALL_OW 69
26548: ST_TO_ADDR
// if not tmp then
26549: LD_VAR 0 2
26553: NOT
26554: IFFALSE 26558
// exit ;
26556: GO 26587
// for i in tmp do
26558: LD_ADDR_VAR 0 1
26562: PUSH
26563: LD_VAR 0 2
26567: PUSH
26568: FOR_IN
26569: IFFALSE 26585
// SetLives ( i , 300 ) ;
26571: LD_VAR 0 1
26575: PPUSH
26576: LD_INT 300
26578: PPUSH
26579: CALL_OW 234
26583: GO 26568
26585: POP
26586: POP
// end ;
26587: PPOPN 2
26589: END
// every 0 0$1 trigger s60 do var i , tmp ;
26590: LD_EXP 116
26594: IFFALSE 26663
26596: GO 26598
26598: DISABLE
26599: LD_INT 0
26601: PPUSH
26602: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
26603: LD_ADDR_VAR 0 2
26607: PUSH
26608: LD_INT 22
26610: PUSH
26611: LD_OWVAR 2
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PPUSH
26620: CALL_OW 69
26624: ST_TO_ADDR
// if not tmp then
26625: LD_VAR 0 2
26629: NOT
26630: IFFALSE 26634
// exit ;
26632: GO 26663
// for i in tmp do
26634: LD_ADDR_VAR 0 1
26638: PUSH
26639: LD_VAR 0 2
26643: PUSH
26644: FOR_IN
26645: IFFALSE 26661
// SetLives ( i , 600 ) ;
26647: LD_VAR 0 1
26651: PPUSH
26652: LD_INT 600
26654: PPUSH
26655: CALL_OW 234
26659: GO 26644
26661: POP
26662: POP
// end ;
26663: PPOPN 2
26665: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
26666: LD_INT 0
26668: PPUSH
// case cmd of 301 :
26669: LD_VAR 0 1
26673: PUSH
26674: LD_INT 301
26676: DOUBLE
26677: EQUAL
26678: IFTRUE 26682
26680: GO 26714
26682: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
26683: LD_VAR 0 6
26687: PPUSH
26688: LD_VAR 0 7
26692: PPUSH
26693: LD_VAR 0 8
26697: PPUSH
26698: LD_VAR 0 4
26702: PPUSH
26703: LD_VAR 0 5
26707: PPUSH
26708: CALL 27915 0 5
26712: GO 26835
26714: LD_INT 302
26716: DOUBLE
26717: EQUAL
26718: IFTRUE 26722
26720: GO 26759
26722: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
26723: LD_VAR 0 6
26727: PPUSH
26728: LD_VAR 0 7
26732: PPUSH
26733: LD_VAR 0 8
26737: PPUSH
26738: LD_VAR 0 9
26742: PPUSH
26743: LD_VAR 0 4
26747: PPUSH
26748: LD_VAR 0 5
26752: PPUSH
26753: CALL 28006 0 6
26757: GO 26835
26759: LD_INT 303
26761: DOUBLE
26762: EQUAL
26763: IFTRUE 26767
26765: GO 26804
26767: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
26768: LD_VAR 0 6
26772: PPUSH
26773: LD_VAR 0 7
26777: PPUSH
26778: LD_VAR 0 8
26782: PPUSH
26783: LD_VAR 0 9
26787: PPUSH
26788: LD_VAR 0 4
26792: PPUSH
26793: LD_VAR 0 5
26797: PPUSH
26798: CALL 26840 0 6
26802: GO 26835
26804: LD_INT 304
26806: DOUBLE
26807: EQUAL
26808: IFTRUE 26812
26810: GO 26834
26812: POP
// hHackTeleport ( unit , x , y ) ; end ;
26813: LD_VAR 0 2
26817: PPUSH
26818: LD_VAR 0 4
26822: PPUSH
26823: LD_VAR 0 5
26827: PPUSH
26828: CALL 28599 0 3
26832: GO 26835
26834: POP
// end ;
26835: LD_VAR 0 12
26839: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
26840: LD_INT 0
26842: PPUSH
26843: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
26844: LD_VAR 0 1
26848: PUSH
26849: LD_INT 1
26851: LESS
26852: PUSH
26853: LD_VAR 0 1
26857: PUSH
26858: LD_INT 3
26860: GREATER
26861: OR
26862: PUSH
26863: LD_VAR 0 5
26867: PPUSH
26868: LD_VAR 0 6
26872: PPUSH
26873: CALL_OW 428
26877: OR
26878: IFFALSE 26882
// exit ;
26880: GO 27602
// uc_side := your_side ;
26882: LD_ADDR_OWVAR 20
26886: PUSH
26887: LD_OWVAR 2
26891: ST_TO_ADDR
// uc_nation := nation ;
26892: LD_ADDR_OWVAR 21
26896: PUSH
26897: LD_VAR 0 1
26901: ST_TO_ADDR
// bc_level = 1 ;
26902: LD_ADDR_OWVAR 43
26906: PUSH
26907: LD_INT 1
26909: ST_TO_ADDR
// case btype of 1 :
26910: LD_VAR 0 2
26914: PUSH
26915: LD_INT 1
26917: DOUBLE
26918: EQUAL
26919: IFTRUE 26923
26921: GO 26934
26923: POP
// bc_type := b_depot ; 2 :
26924: LD_ADDR_OWVAR 42
26928: PUSH
26929: LD_INT 0
26931: ST_TO_ADDR
26932: GO 27546
26934: LD_INT 2
26936: DOUBLE
26937: EQUAL
26938: IFTRUE 26942
26940: GO 26953
26942: POP
// bc_type := b_warehouse ; 3 :
26943: LD_ADDR_OWVAR 42
26947: PUSH
26948: LD_INT 1
26950: ST_TO_ADDR
26951: GO 27546
26953: LD_INT 3
26955: DOUBLE
26956: EQUAL
26957: IFTRUE 26961
26959: GO 26972
26961: POP
// bc_type := b_lab ; 4 .. 9 :
26962: LD_ADDR_OWVAR 42
26966: PUSH
26967: LD_INT 6
26969: ST_TO_ADDR
26970: GO 27546
26972: LD_INT 4
26974: DOUBLE
26975: GREATEREQUAL
26976: IFFALSE 26984
26978: LD_INT 9
26980: DOUBLE
26981: LESSEQUAL
26982: IFTRUE 26986
26984: GO 27038
26986: POP
// begin bc_type := b_lab_half ;
26987: LD_ADDR_OWVAR 42
26991: PUSH
26992: LD_INT 7
26994: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26995: LD_ADDR_OWVAR 44
26999: PUSH
27000: LD_INT 10
27002: PUSH
27003: LD_INT 11
27005: PUSH
27006: LD_INT 12
27008: PUSH
27009: LD_INT 15
27011: PUSH
27012: LD_INT 14
27014: PUSH
27015: LD_INT 13
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: PUSH
27026: LD_VAR 0 2
27030: PUSH
27031: LD_INT 3
27033: MINUS
27034: ARRAY
27035: ST_TO_ADDR
// end ; 10 .. 13 :
27036: GO 27546
27038: LD_INT 10
27040: DOUBLE
27041: GREATEREQUAL
27042: IFFALSE 27050
27044: LD_INT 13
27046: DOUBLE
27047: LESSEQUAL
27048: IFTRUE 27052
27050: GO 27129
27052: POP
// begin bc_type := b_lab_full ;
27053: LD_ADDR_OWVAR 42
27057: PUSH
27058: LD_INT 8
27060: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27061: LD_ADDR_OWVAR 44
27065: PUSH
27066: LD_INT 10
27068: PUSH
27069: LD_INT 12
27071: PUSH
27072: LD_INT 14
27074: PUSH
27075: LD_INT 13
27077: PUSH
27078: EMPTY
27079: LIST
27080: LIST
27081: LIST
27082: LIST
27083: PUSH
27084: LD_VAR 0 2
27088: PUSH
27089: LD_INT 9
27091: MINUS
27092: ARRAY
27093: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27094: LD_ADDR_OWVAR 45
27098: PUSH
27099: LD_INT 11
27101: PUSH
27102: LD_INT 15
27104: PUSH
27105: LD_INT 12
27107: PUSH
27108: LD_INT 15
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: PUSH
27117: LD_VAR 0 2
27121: PUSH
27122: LD_INT 9
27124: MINUS
27125: ARRAY
27126: ST_TO_ADDR
// end ; 14 :
27127: GO 27546
27129: LD_INT 14
27131: DOUBLE
27132: EQUAL
27133: IFTRUE 27137
27135: GO 27148
27137: POP
// bc_type := b_workshop ; 15 :
27138: LD_ADDR_OWVAR 42
27142: PUSH
27143: LD_INT 2
27145: ST_TO_ADDR
27146: GO 27546
27148: LD_INT 15
27150: DOUBLE
27151: EQUAL
27152: IFTRUE 27156
27154: GO 27167
27156: POP
// bc_type := b_factory ; 16 :
27157: LD_ADDR_OWVAR 42
27161: PUSH
27162: LD_INT 3
27164: ST_TO_ADDR
27165: GO 27546
27167: LD_INT 16
27169: DOUBLE
27170: EQUAL
27171: IFTRUE 27175
27173: GO 27186
27175: POP
// bc_type := b_ext_gun ; 17 :
27176: LD_ADDR_OWVAR 42
27180: PUSH
27181: LD_INT 17
27183: ST_TO_ADDR
27184: GO 27546
27186: LD_INT 17
27188: DOUBLE
27189: EQUAL
27190: IFTRUE 27194
27192: GO 27222
27194: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27195: LD_ADDR_OWVAR 42
27199: PUSH
27200: LD_INT 19
27202: PUSH
27203: LD_INT 23
27205: PUSH
27206: LD_INT 19
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: LIST
27213: PUSH
27214: LD_VAR 0 1
27218: ARRAY
27219: ST_TO_ADDR
27220: GO 27546
27222: LD_INT 18
27224: DOUBLE
27225: EQUAL
27226: IFTRUE 27230
27228: GO 27241
27230: POP
// bc_type := b_ext_radar ; 19 :
27231: LD_ADDR_OWVAR 42
27235: PUSH
27236: LD_INT 20
27238: ST_TO_ADDR
27239: GO 27546
27241: LD_INT 19
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27260
27249: POP
// bc_type := b_ext_radio ; 20 :
27250: LD_ADDR_OWVAR 42
27254: PUSH
27255: LD_INT 22
27257: ST_TO_ADDR
27258: GO 27546
27260: LD_INT 20
27262: DOUBLE
27263: EQUAL
27264: IFTRUE 27268
27266: GO 27279
27268: POP
// bc_type := b_ext_siberium ; 21 :
27269: LD_ADDR_OWVAR 42
27273: PUSH
27274: LD_INT 21
27276: ST_TO_ADDR
27277: GO 27546
27279: LD_INT 21
27281: DOUBLE
27282: EQUAL
27283: IFTRUE 27287
27285: GO 27298
27287: POP
// bc_type := b_ext_computer ; 22 :
27288: LD_ADDR_OWVAR 42
27292: PUSH
27293: LD_INT 24
27295: ST_TO_ADDR
27296: GO 27546
27298: LD_INT 22
27300: DOUBLE
27301: EQUAL
27302: IFTRUE 27306
27304: GO 27317
27306: POP
// bc_type := b_ext_track ; 23 :
27307: LD_ADDR_OWVAR 42
27311: PUSH
27312: LD_INT 16
27314: ST_TO_ADDR
27315: GO 27546
27317: LD_INT 23
27319: DOUBLE
27320: EQUAL
27321: IFTRUE 27325
27323: GO 27336
27325: POP
// bc_type := b_ext_laser ; 24 :
27326: LD_ADDR_OWVAR 42
27330: PUSH
27331: LD_INT 25
27333: ST_TO_ADDR
27334: GO 27546
27336: LD_INT 24
27338: DOUBLE
27339: EQUAL
27340: IFTRUE 27344
27342: GO 27355
27344: POP
// bc_type := b_control_tower ; 25 :
27345: LD_ADDR_OWVAR 42
27349: PUSH
27350: LD_INT 36
27352: ST_TO_ADDR
27353: GO 27546
27355: LD_INT 25
27357: DOUBLE
27358: EQUAL
27359: IFTRUE 27363
27361: GO 27374
27363: POP
// bc_type := b_breastwork ; 26 :
27364: LD_ADDR_OWVAR 42
27368: PUSH
27369: LD_INT 31
27371: ST_TO_ADDR
27372: GO 27546
27374: LD_INT 26
27376: DOUBLE
27377: EQUAL
27378: IFTRUE 27382
27380: GO 27393
27382: POP
// bc_type := b_bunker ; 27 :
27383: LD_ADDR_OWVAR 42
27387: PUSH
27388: LD_INT 32
27390: ST_TO_ADDR
27391: GO 27546
27393: LD_INT 27
27395: DOUBLE
27396: EQUAL
27397: IFTRUE 27401
27399: GO 27412
27401: POP
// bc_type := b_turret ; 28 :
27402: LD_ADDR_OWVAR 42
27406: PUSH
27407: LD_INT 33
27409: ST_TO_ADDR
27410: GO 27546
27412: LD_INT 28
27414: DOUBLE
27415: EQUAL
27416: IFTRUE 27420
27418: GO 27431
27420: POP
// bc_type := b_armoury ; 29 :
27421: LD_ADDR_OWVAR 42
27425: PUSH
27426: LD_INT 4
27428: ST_TO_ADDR
27429: GO 27546
27431: LD_INT 29
27433: DOUBLE
27434: EQUAL
27435: IFTRUE 27439
27437: GO 27450
27439: POP
// bc_type := b_barracks ; 30 :
27440: LD_ADDR_OWVAR 42
27444: PUSH
27445: LD_INT 5
27447: ST_TO_ADDR
27448: GO 27546
27450: LD_INT 30
27452: DOUBLE
27453: EQUAL
27454: IFTRUE 27458
27456: GO 27469
27458: POP
// bc_type := b_solar_power ; 31 :
27459: LD_ADDR_OWVAR 42
27463: PUSH
27464: LD_INT 27
27466: ST_TO_ADDR
27467: GO 27546
27469: LD_INT 31
27471: DOUBLE
27472: EQUAL
27473: IFTRUE 27477
27475: GO 27488
27477: POP
// bc_type := b_oil_power ; 32 :
27478: LD_ADDR_OWVAR 42
27482: PUSH
27483: LD_INT 26
27485: ST_TO_ADDR
27486: GO 27546
27488: LD_INT 32
27490: DOUBLE
27491: EQUAL
27492: IFTRUE 27496
27494: GO 27507
27496: POP
// bc_type := b_siberite_power ; 33 :
27497: LD_ADDR_OWVAR 42
27501: PUSH
27502: LD_INT 28
27504: ST_TO_ADDR
27505: GO 27546
27507: LD_INT 33
27509: DOUBLE
27510: EQUAL
27511: IFTRUE 27515
27513: GO 27526
27515: POP
// bc_type := b_oil_mine ; 34 :
27516: LD_ADDR_OWVAR 42
27520: PUSH
27521: LD_INT 29
27523: ST_TO_ADDR
27524: GO 27546
27526: LD_INT 34
27528: DOUBLE
27529: EQUAL
27530: IFTRUE 27534
27532: GO 27545
27534: POP
// bc_type := b_siberite_mine ; end ;
27535: LD_ADDR_OWVAR 42
27539: PUSH
27540: LD_INT 30
27542: ST_TO_ADDR
27543: GO 27546
27545: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
27546: LD_ADDR_VAR 0 8
27550: PUSH
27551: LD_VAR 0 5
27555: PPUSH
27556: LD_VAR 0 6
27560: PPUSH
27561: LD_VAR 0 3
27565: PPUSH
27566: CALL_OW 47
27570: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
27571: LD_OWVAR 42
27575: PUSH
27576: LD_INT 32
27578: PUSH
27579: LD_INT 33
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: IN
27586: IFFALSE 27602
// PlaceWeaponTurret ( b , weapon ) ;
27588: LD_VAR 0 8
27592: PPUSH
27593: LD_VAR 0 4
27597: PPUSH
27598: CALL_OW 431
// end ;
27602: LD_VAR 0 7
27606: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
27607: LD_INT 0
27609: PPUSH
27610: PPUSH
27611: PPUSH
27612: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
27613: LD_ADDR_VAR 0 4
27617: PUSH
27618: LD_INT 22
27620: PUSH
27621: LD_OWVAR 2
27625: PUSH
27626: EMPTY
27627: LIST
27628: LIST
27629: PUSH
27630: LD_INT 2
27632: PUSH
27633: LD_INT 30
27635: PUSH
27636: LD_INT 0
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 30
27645: PUSH
27646: LD_INT 1
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PPUSH
27662: CALL_OW 69
27666: ST_TO_ADDR
// if not tmp then
27667: LD_VAR 0 4
27671: NOT
27672: IFFALSE 27676
// exit ;
27674: GO 27735
// for i in tmp do
27676: LD_ADDR_VAR 0 2
27680: PUSH
27681: LD_VAR 0 4
27685: PUSH
27686: FOR_IN
27687: IFFALSE 27733
// for j = 1 to 3 do
27689: LD_ADDR_VAR 0 3
27693: PUSH
27694: DOUBLE
27695: LD_INT 1
27697: DEC
27698: ST_TO_ADDR
27699: LD_INT 3
27701: PUSH
27702: FOR_TO
27703: IFFALSE 27729
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
27705: LD_VAR 0 2
27709: PPUSH
27710: CALL_OW 274
27714: PPUSH
27715: LD_VAR 0 3
27719: PPUSH
27720: LD_INT 99999
27722: PPUSH
27723: CALL_OW 277
27727: GO 27702
27729: POP
27730: POP
27731: GO 27686
27733: POP
27734: POP
// end ;
27735: LD_VAR 0 1
27739: RET
// export function hHackSetLevel10 ; var i , j ; begin
27740: LD_INT 0
27742: PPUSH
27743: PPUSH
27744: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27745: LD_ADDR_VAR 0 2
27749: PUSH
27750: LD_INT 21
27752: PUSH
27753: LD_INT 1
27755: PUSH
27756: EMPTY
27757: LIST
27758: LIST
27759: PPUSH
27760: CALL_OW 69
27764: PUSH
27765: FOR_IN
27766: IFFALSE 27818
// if IsSelected ( i ) then
27768: LD_VAR 0 2
27772: PPUSH
27773: CALL_OW 306
27777: IFFALSE 27816
// begin for j := 1 to 4 do
27779: LD_ADDR_VAR 0 3
27783: PUSH
27784: DOUBLE
27785: LD_INT 1
27787: DEC
27788: ST_TO_ADDR
27789: LD_INT 4
27791: PUSH
27792: FOR_TO
27793: IFFALSE 27814
// SetSkill ( i , j , 10 ) ;
27795: LD_VAR 0 2
27799: PPUSH
27800: LD_VAR 0 3
27804: PPUSH
27805: LD_INT 10
27807: PPUSH
27808: CALL_OW 237
27812: GO 27792
27814: POP
27815: POP
// end ;
27816: GO 27765
27818: POP
27819: POP
// end ;
27820: LD_VAR 0 1
27824: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
27825: LD_INT 0
27827: PPUSH
27828: PPUSH
27829: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
27830: LD_ADDR_VAR 0 2
27834: PUSH
27835: LD_INT 22
27837: PUSH
27838: LD_OWVAR 2
27842: PUSH
27843: EMPTY
27844: LIST
27845: LIST
27846: PUSH
27847: LD_INT 21
27849: PUSH
27850: LD_INT 1
27852: PUSH
27853: EMPTY
27854: LIST
27855: LIST
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PPUSH
27861: CALL_OW 69
27865: PUSH
27866: FOR_IN
27867: IFFALSE 27908
// begin for j := 1 to 4 do
27869: LD_ADDR_VAR 0 3
27873: PUSH
27874: DOUBLE
27875: LD_INT 1
27877: DEC
27878: ST_TO_ADDR
27879: LD_INT 4
27881: PUSH
27882: FOR_TO
27883: IFFALSE 27904
// SetSkill ( i , j , 10 ) ;
27885: LD_VAR 0 2
27889: PPUSH
27890: LD_VAR 0 3
27894: PPUSH
27895: LD_INT 10
27897: PPUSH
27898: CALL_OW 237
27902: GO 27882
27904: POP
27905: POP
// end ;
27906: GO 27866
27908: POP
27909: POP
// end ;
27910: LD_VAR 0 1
27914: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
27915: LD_INT 0
27917: PPUSH
// uc_side := your_side ;
27918: LD_ADDR_OWVAR 20
27922: PUSH
27923: LD_OWVAR 2
27927: ST_TO_ADDR
// uc_nation := nation ;
27928: LD_ADDR_OWVAR 21
27932: PUSH
27933: LD_VAR 0 1
27937: ST_TO_ADDR
// InitHc ;
27938: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
27942: LD_INT 0
27944: PPUSH
27945: LD_VAR 0 2
27949: PPUSH
27950: LD_VAR 0 3
27954: PPUSH
27955: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
27959: LD_VAR 0 4
27963: PPUSH
27964: LD_VAR 0 5
27968: PPUSH
27969: CALL_OW 428
27973: PUSH
27974: LD_INT 0
27976: EQUAL
27977: IFFALSE 28001
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
27979: CALL_OW 44
27983: PPUSH
27984: LD_VAR 0 4
27988: PPUSH
27989: LD_VAR 0 5
27993: PPUSH
27994: LD_INT 1
27996: PPUSH
27997: CALL_OW 48
// end ;
28001: LD_VAR 0 6
28005: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28006: LD_INT 0
28008: PPUSH
28009: PPUSH
// uc_side := your_side ;
28010: LD_ADDR_OWVAR 20
28014: PUSH
28015: LD_OWVAR 2
28019: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28020: LD_VAR 0 1
28024: PUSH
28025: LD_INT 1
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 3
28033: PUSH
28034: LD_INT 4
28036: PUSH
28037: LD_INT 5
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: IN
28047: IFFALSE 28059
// uc_nation := nation_american else
28049: LD_ADDR_OWVAR 21
28053: PUSH
28054: LD_INT 1
28056: ST_TO_ADDR
28057: GO 28102
// if chassis in [ 11 , 12 , 13 , 14 ] then
28059: LD_VAR 0 1
28063: PUSH
28064: LD_INT 11
28066: PUSH
28067: LD_INT 12
28069: PUSH
28070: LD_INT 13
28072: PUSH
28073: LD_INT 14
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: IN
28082: IFFALSE 28094
// uc_nation := nation_arabian else
28084: LD_ADDR_OWVAR 21
28088: PUSH
28089: LD_INT 2
28091: ST_TO_ADDR
28092: GO 28102
// uc_nation := nation_russian ;
28094: LD_ADDR_OWVAR 21
28098: PUSH
28099: LD_INT 3
28101: ST_TO_ADDR
// vc_chassis := chassis ;
28102: LD_ADDR_OWVAR 37
28106: PUSH
28107: LD_VAR 0 1
28111: ST_TO_ADDR
// vc_engine := engine ;
28112: LD_ADDR_OWVAR 39
28116: PUSH
28117: LD_VAR 0 2
28121: ST_TO_ADDR
// vc_control := control ;
28122: LD_ADDR_OWVAR 38
28126: PUSH
28127: LD_VAR 0 3
28131: ST_TO_ADDR
// vc_weapon := weapon ;
28132: LD_ADDR_OWVAR 40
28136: PUSH
28137: LD_VAR 0 4
28141: ST_TO_ADDR
// un := CreateVehicle ;
28142: LD_ADDR_VAR 0 8
28146: PUSH
28147: CALL_OW 45
28151: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28152: LD_VAR 0 8
28156: PPUSH
28157: LD_INT 0
28159: PPUSH
28160: LD_INT 5
28162: PPUSH
28163: CALL_OW 12
28167: PPUSH
28168: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28172: LD_VAR 0 8
28176: PPUSH
28177: LD_VAR 0 5
28181: PPUSH
28182: LD_VAR 0 6
28186: PPUSH
28187: LD_INT 1
28189: PPUSH
28190: CALL_OW 48
// end ;
28194: LD_VAR 0 7
28198: RET
// export hInvincible ; every 1 do
28199: GO 28201
28201: DISABLE
// hInvincible := [ ] ;
28202: LD_ADDR_EXP 117
28206: PUSH
28207: EMPTY
28208: ST_TO_ADDR
28209: END
// every 10 do var i ;
28210: GO 28212
28212: DISABLE
28213: LD_INT 0
28215: PPUSH
// begin enable ;
28216: ENABLE
// if not hInvincible then
28217: LD_EXP 117
28221: NOT
28222: IFFALSE 28226
// exit ;
28224: GO 28270
// for i in hInvincible do
28226: LD_ADDR_VAR 0 1
28230: PUSH
28231: LD_EXP 117
28235: PUSH
28236: FOR_IN
28237: IFFALSE 28268
// if GetLives ( i ) < 1000 then
28239: LD_VAR 0 1
28243: PPUSH
28244: CALL_OW 256
28248: PUSH
28249: LD_INT 1000
28251: LESS
28252: IFFALSE 28266
// SetLives ( i , 1000 ) ;
28254: LD_VAR 0 1
28258: PPUSH
28259: LD_INT 1000
28261: PPUSH
28262: CALL_OW 234
28266: GO 28236
28268: POP
28269: POP
// end ;
28270: PPOPN 1
28272: END
// export function hHackInvincible ; var i ; begin
28273: LD_INT 0
28275: PPUSH
28276: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28277: LD_ADDR_VAR 0 2
28281: PUSH
28282: LD_INT 2
28284: PUSH
28285: LD_INT 21
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 21
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: EMPTY
28302: LIST
28303: LIST
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: LIST
28309: PPUSH
28310: CALL_OW 69
28314: PUSH
28315: FOR_IN
28316: IFFALSE 28377
// if IsSelected ( i ) then
28318: LD_VAR 0 2
28322: PPUSH
28323: CALL_OW 306
28327: IFFALSE 28375
// begin if i in hInvincible then
28329: LD_VAR 0 2
28333: PUSH
28334: LD_EXP 117
28338: IN
28339: IFFALSE 28359
// hInvincible := hInvincible diff i else
28341: LD_ADDR_EXP 117
28345: PUSH
28346: LD_EXP 117
28350: PUSH
28351: LD_VAR 0 2
28355: DIFF
28356: ST_TO_ADDR
28357: GO 28375
// hInvincible := hInvincible union i ;
28359: LD_ADDR_EXP 117
28363: PUSH
28364: LD_EXP 117
28368: PUSH
28369: LD_VAR 0 2
28373: UNION
28374: ST_TO_ADDR
// end ;
28375: GO 28315
28377: POP
28378: POP
// end ;
28379: LD_VAR 0 1
28383: RET
// export function hHackInvisible ; var i , j ; begin
28384: LD_INT 0
28386: PPUSH
28387: PPUSH
28388: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28389: LD_ADDR_VAR 0 2
28393: PUSH
28394: LD_INT 21
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PPUSH
28404: CALL_OW 69
28408: PUSH
28409: FOR_IN
28410: IFFALSE 28434
// if IsSelected ( i ) then
28412: LD_VAR 0 2
28416: PPUSH
28417: CALL_OW 306
28421: IFFALSE 28432
// ComForceInvisible ( i ) ;
28423: LD_VAR 0 2
28427: PPUSH
28428: CALL_OW 496
28432: GO 28409
28434: POP
28435: POP
// end ;
28436: LD_VAR 0 1
28440: RET
// export function hHackChangeYourSide ; begin
28441: LD_INT 0
28443: PPUSH
// if your_side = 8 then
28444: LD_OWVAR 2
28448: PUSH
28449: LD_INT 8
28451: EQUAL
28452: IFFALSE 28464
// your_side := 0 else
28454: LD_ADDR_OWVAR 2
28458: PUSH
28459: LD_INT 0
28461: ST_TO_ADDR
28462: GO 28478
// your_side := your_side + 1 ;
28464: LD_ADDR_OWVAR 2
28468: PUSH
28469: LD_OWVAR 2
28473: PUSH
28474: LD_INT 1
28476: PLUS
28477: ST_TO_ADDR
// end ;
28478: LD_VAR 0 1
28482: RET
// export function hHackChangeUnitSide ; var i , j ; begin
28483: LD_INT 0
28485: PPUSH
28486: PPUSH
28487: PPUSH
// for i in all_units do
28488: LD_ADDR_VAR 0 2
28492: PUSH
28493: LD_OWVAR 3
28497: PUSH
28498: FOR_IN
28499: IFFALSE 28577
// if IsSelected ( i ) then
28501: LD_VAR 0 2
28505: PPUSH
28506: CALL_OW 306
28510: IFFALSE 28575
// begin j := GetSide ( i ) ;
28512: LD_ADDR_VAR 0 3
28516: PUSH
28517: LD_VAR 0 2
28521: PPUSH
28522: CALL_OW 255
28526: ST_TO_ADDR
// if j = 8 then
28527: LD_VAR 0 3
28531: PUSH
28532: LD_INT 8
28534: EQUAL
28535: IFFALSE 28547
// j := 0 else
28537: LD_ADDR_VAR 0 3
28541: PUSH
28542: LD_INT 0
28544: ST_TO_ADDR
28545: GO 28561
// j := j + 1 ;
28547: LD_ADDR_VAR 0 3
28551: PUSH
28552: LD_VAR 0 3
28556: PUSH
28557: LD_INT 1
28559: PLUS
28560: ST_TO_ADDR
// SetSide ( i , j ) ;
28561: LD_VAR 0 2
28565: PPUSH
28566: LD_VAR 0 3
28570: PPUSH
28571: CALL_OW 235
// end ;
28575: GO 28498
28577: POP
28578: POP
// end ;
28579: LD_VAR 0 1
28583: RET
// export function hHackFog ; begin
28584: LD_INT 0
28586: PPUSH
// FogOff ( true ) ;
28587: LD_INT 1
28589: PPUSH
28590: CALL_OW 344
// end ;
28594: LD_VAR 0 1
28598: RET
// export function hHackTeleport ( unit , x , y ) ; begin
28599: LD_INT 0
28601: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
28602: LD_VAR 0 1
28606: PPUSH
28607: LD_VAR 0 2
28611: PPUSH
28612: LD_VAR 0 3
28616: PPUSH
28617: LD_INT 1
28619: PPUSH
28620: LD_INT 1
28622: PPUSH
28623: CALL_OW 483
// CenterOnXY ( x , y ) ;
28627: LD_VAR 0 2
28631: PPUSH
28632: LD_VAR 0 3
28636: PPUSH
28637: CALL_OW 84
// end ; end_of_file
28641: LD_VAR 0 4
28645: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
28646: LD_INT 0
28648: PPUSH
28649: PPUSH
28650: PPUSH
28651: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 264
28661: PUSH
28662: LD_EXP 134
28666: EQUAL
28667: IFFALSE 28739
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
28669: LD_INT 68
28671: PPUSH
28672: LD_VAR 0 1
28676: PPUSH
28677: CALL_OW 255
28681: PPUSH
28682: CALL_OW 321
28686: PUSH
28687: LD_INT 2
28689: EQUAL
28690: IFFALSE 28702
// eff := 70 else
28692: LD_ADDR_VAR 0 4
28696: PUSH
28697: LD_INT 70
28699: ST_TO_ADDR
28700: GO 28710
// eff := 30 ;
28702: LD_ADDR_VAR 0 4
28706: PUSH
28707: LD_INT 30
28709: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
28710: LD_VAR 0 1
28714: PPUSH
28715: CALL_OW 250
28719: PPUSH
28720: LD_VAR 0 1
28724: PPUSH
28725: CALL_OW 251
28729: PPUSH
28730: LD_VAR 0 4
28734: PPUSH
28735: CALL_OW 495
// end ; end ;
28739: LD_VAR 0 2
28743: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
28744: LD_INT 0
28746: PPUSH
// end ;
28747: LD_VAR 0 4
28751: RET
// export function SOS_Command ( cmd ) ; begin
28752: LD_INT 0
28754: PPUSH
// end ;
28755: LD_VAR 0 2
28759: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
28760: LD_INT 0
28762: PPUSH
// end ;
28763: LD_VAR 0 6
28767: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
28768: LD_INT 0
28770: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
28771: LD_VAR 0 1
28775: PUSH
28776: LD_INT 250
28778: EQUAL
28779: PUSH
28780: LD_VAR 0 2
28784: PPUSH
28785: CALL_OW 264
28789: PUSH
28790: LD_EXP 137
28794: EQUAL
28795: AND
28796: IFFALSE 28817
// MinerPlaceMine ( unit , x , y ) ;
28798: LD_VAR 0 2
28802: PPUSH
28803: LD_VAR 0 4
28807: PPUSH
28808: LD_VAR 0 5
28812: PPUSH
28813: CALL 31166 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
28817: LD_VAR 0 1
28821: PUSH
28822: LD_INT 251
28824: EQUAL
28825: PUSH
28826: LD_VAR 0 2
28830: PPUSH
28831: CALL_OW 264
28835: PUSH
28836: LD_EXP 137
28840: EQUAL
28841: AND
28842: IFFALSE 28863
// MinerDetonateMine ( unit , x , y ) ;
28844: LD_VAR 0 2
28848: PPUSH
28849: LD_VAR 0 4
28853: PPUSH
28854: LD_VAR 0 5
28858: PPUSH
28859: CALL 31443 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
28863: LD_VAR 0 1
28867: PUSH
28868: LD_INT 252
28870: EQUAL
28871: PUSH
28872: LD_VAR 0 2
28876: PPUSH
28877: CALL_OW 264
28881: PUSH
28882: LD_EXP 137
28886: EQUAL
28887: AND
28888: IFFALSE 28909
// MinerCreateMinefield ( unit , x , y ) ;
28890: LD_VAR 0 2
28894: PPUSH
28895: LD_VAR 0 4
28899: PPUSH
28900: LD_VAR 0 5
28904: PPUSH
28905: CALL 31860 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
28909: LD_VAR 0 1
28913: PUSH
28914: LD_INT 253
28916: EQUAL
28917: PUSH
28918: LD_VAR 0 2
28922: PPUSH
28923: CALL_OW 257
28927: PUSH
28928: LD_INT 5
28930: EQUAL
28931: AND
28932: IFFALSE 28953
// ComBinocular ( unit , x , y ) ;
28934: LD_VAR 0 2
28938: PPUSH
28939: LD_VAR 0 4
28943: PPUSH
28944: LD_VAR 0 5
28948: PPUSH
28949: CALL 32231 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
28953: LD_VAR 0 1
28957: PUSH
28958: LD_INT 254
28960: EQUAL
28961: PUSH
28962: LD_VAR 0 2
28966: PPUSH
28967: CALL_OW 264
28971: PUSH
28972: LD_EXP 132
28976: EQUAL
28977: AND
28978: PUSH
28979: LD_VAR 0 3
28983: PPUSH
28984: CALL_OW 263
28988: PUSH
28989: LD_INT 3
28991: EQUAL
28992: AND
28993: IFFALSE 29009
// HackDestroyVehicle ( unit , selectedUnit ) ;
28995: LD_VAR 0 2
28999: PPUSH
29000: LD_VAR 0 3
29004: PPUSH
29005: CALL 30526 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29009: LD_VAR 0 1
29013: PUSH
29014: LD_INT 255
29016: EQUAL
29017: PUSH
29018: LD_VAR 0 2
29022: PPUSH
29023: CALL_OW 264
29027: PUSH
29028: LD_INT 14
29030: PUSH
29031: LD_INT 53
29033: PUSH
29034: EMPTY
29035: LIST
29036: LIST
29037: IN
29038: AND
29039: PUSH
29040: LD_VAR 0 4
29044: PPUSH
29045: LD_VAR 0 5
29049: PPUSH
29050: CALL_OW 488
29054: AND
29055: IFFALSE 29079
// CutTreeXYR ( unit , x , y , 12 ) ;
29057: LD_VAR 0 2
29061: PPUSH
29062: LD_VAR 0 4
29066: PPUSH
29067: LD_VAR 0 5
29071: PPUSH
29072: LD_INT 12
29074: PPUSH
29075: CALL 29092 0 4
// end ;
29079: LD_VAR 0 6
29083: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
29084: LD_INT 0
29086: PPUSH
// end ;
29087: LD_VAR 0 4
29091: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
29092: LD_INT 0
29094: PPUSH
29095: PPUSH
29096: PPUSH
29097: PPUSH
29098: PPUSH
29099: PPUSH
29100: PPUSH
29101: PPUSH
29102: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
29103: LD_VAR 0 1
29107: NOT
29108: PUSH
29109: LD_VAR 0 2
29113: PPUSH
29114: LD_VAR 0 3
29118: PPUSH
29119: CALL_OW 488
29123: NOT
29124: OR
29125: PUSH
29126: LD_VAR 0 4
29130: NOT
29131: OR
29132: IFFALSE 29136
// exit ;
29134: GO 29476
// list := [ ] ;
29136: LD_ADDR_VAR 0 13
29140: PUSH
29141: EMPTY
29142: ST_TO_ADDR
// if x - r < 0 then
29143: LD_VAR 0 2
29147: PUSH
29148: LD_VAR 0 4
29152: MINUS
29153: PUSH
29154: LD_INT 0
29156: LESS
29157: IFFALSE 29169
// min_x := 0 else
29159: LD_ADDR_VAR 0 7
29163: PUSH
29164: LD_INT 0
29166: ST_TO_ADDR
29167: GO 29185
// min_x := x - r ;
29169: LD_ADDR_VAR 0 7
29173: PUSH
29174: LD_VAR 0 2
29178: PUSH
29179: LD_VAR 0 4
29183: MINUS
29184: ST_TO_ADDR
// if y - r < 0 then
29185: LD_VAR 0 3
29189: PUSH
29190: LD_VAR 0 4
29194: MINUS
29195: PUSH
29196: LD_INT 0
29198: LESS
29199: IFFALSE 29211
// min_y := 0 else
29201: LD_ADDR_VAR 0 8
29205: PUSH
29206: LD_INT 0
29208: ST_TO_ADDR
29209: GO 29227
// min_y := y - r ;
29211: LD_ADDR_VAR 0 8
29215: PUSH
29216: LD_VAR 0 3
29220: PUSH
29221: LD_VAR 0 4
29225: MINUS
29226: ST_TO_ADDR
// max_x := x + r ;
29227: LD_ADDR_VAR 0 9
29231: PUSH
29232: LD_VAR 0 2
29236: PUSH
29237: LD_VAR 0 4
29241: PLUS
29242: ST_TO_ADDR
// max_y := y + r ;
29243: LD_ADDR_VAR 0 10
29247: PUSH
29248: LD_VAR 0 3
29252: PUSH
29253: LD_VAR 0 4
29257: PLUS
29258: ST_TO_ADDR
// for _x = min_x to max_x do
29259: LD_ADDR_VAR 0 11
29263: PUSH
29264: DOUBLE
29265: LD_VAR 0 7
29269: DEC
29270: ST_TO_ADDR
29271: LD_VAR 0 9
29275: PUSH
29276: FOR_TO
29277: IFFALSE 29394
// for _y = min_y to max_y do
29279: LD_ADDR_VAR 0 12
29283: PUSH
29284: DOUBLE
29285: LD_VAR 0 8
29289: DEC
29290: ST_TO_ADDR
29291: LD_VAR 0 10
29295: PUSH
29296: FOR_TO
29297: IFFALSE 29390
// begin if not ValidHex ( _x , _y ) then
29299: LD_VAR 0 11
29303: PPUSH
29304: LD_VAR 0 12
29308: PPUSH
29309: CALL_OW 488
29313: NOT
29314: IFFALSE 29318
// continue ;
29316: GO 29296
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
29318: LD_VAR 0 11
29322: PPUSH
29323: LD_VAR 0 12
29327: PPUSH
29328: CALL_OW 351
29332: PUSH
29333: LD_VAR 0 11
29337: PPUSH
29338: LD_VAR 0 12
29342: PPUSH
29343: CALL_OW 554
29347: AND
29348: IFFALSE 29388
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
29350: LD_ADDR_VAR 0 13
29354: PUSH
29355: LD_VAR 0 13
29359: PPUSH
29360: LD_VAR 0 13
29364: PUSH
29365: LD_INT 1
29367: PLUS
29368: PPUSH
29369: LD_VAR 0 11
29373: PUSH
29374: LD_VAR 0 12
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PPUSH
29383: CALL_OW 2
29387: ST_TO_ADDR
// end ;
29388: GO 29296
29390: POP
29391: POP
29392: GO 29276
29394: POP
29395: POP
// if not list then
29396: LD_VAR 0 13
29400: NOT
29401: IFFALSE 29405
// exit ;
29403: GO 29476
// for i in list do
29405: LD_ADDR_VAR 0 6
29409: PUSH
29410: LD_VAR 0 13
29414: PUSH
29415: FOR_IN
29416: IFFALSE 29474
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
29418: LD_VAR 0 1
29422: PPUSH
29423: LD_STRING M
29425: PUSH
29426: LD_VAR 0 6
29430: PUSH
29431: LD_INT 1
29433: ARRAY
29434: PUSH
29435: LD_VAR 0 6
29439: PUSH
29440: LD_INT 2
29442: ARRAY
29443: PUSH
29444: LD_INT 0
29446: PUSH
29447: LD_INT 0
29449: PUSH
29450: LD_INT 0
29452: PUSH
29453: LD_INT 0
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: PUSH
29465: EMPTY
29466: LIST
29467: PPUSH
29468: CALL_OW 447
29472: GO 29415
29474: POP
29475: POP
// end ;
29476: LD_VAR 0 5
29480: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
29481: LD_EXP 120
29485: NOT
29486: IFFALSE 29536
29488: GO 29490
29490: DISABLE
// begin initHack := true ;
29491: LD_ADDR_EXP 120
29495: PUSH
29496: LD_INT 1
29498: ST_TO_ADDR
// hackTanks := [ ] ;
29499: LD_ADDR_EXP 121
29503: PUSH
29504: EMPTY
29505: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
29506: LD_ADDR_EXP 122
29510: PUSH
29511: EMPTY
29512: ST_TO_ADDR
// hackLimit := 3 ;
29513: LD_ADDR_EXP 123
29517: PUSH
29518: LD_INT 3
29520: ST_TO_ADDR
// hackDist := 12 ;
29521: LD_ADDR_EXP 124
29525: PUSH
29526: LD_INT 12
29528: ST_TO_ADDR
// hackCounter := [ ] ;
29529: LD_ADDR_EXP 125
29533: PUSH
29534: EMPTY
29535: ST_TO_ADDR
// end ;
29536: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
29537: LD_EXP 120
29541: PUSH
29542: LD_INT 34
29544: PUSH
29545: LD_EXP 132
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: PPUSH
29554: CALL_OW 69
29558: AND
29559: IFFALSE 29814
29561: GO 29563
29563: DISABLE
29564: LD_INT 0
29566: PPUSH
29567: PPUSH
// begin enable ;
29568: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
29569: LD_ADDR_VAR 0 1
29573: PUSH
29574: LD_INT 34
29576: PUSH
29577: LD_EXP 132
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: PPUSH
29586: CALL_OW 69
29590: PUSH
29591: FOR_IN
29592: IFFALSE 29812
// begin if not i in hackTanks then
29594: LD_VAR 0 1
29598: PUSH
29599: LD_EXP 121
29603: IN
29604: NOT
29605: IFFALSE 29688
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
29607: LD_ADDR_EXP 121
29611: PUSH
29612: LD_EXP 121
29616: PPUSH
29617: LD_EXP 121
29621: PUSH
29622: LD_INT 1
29624: PLUS
29625: PPUSH
29626: LD_VAR 0 1
29630: PPUSH
29631: CALL_OW 1
29635: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
29636: LD_ADDR_EXP 122
29640: PUSH
29641: LD_EXP 122
29645: PPUSH
29646: LD_EXP 122
29650: PUSH
29651: LD_INT 1
29653: PLUS
29654: PPUSH
29655: EMPTY
29656: PPUSH
29657: CALL_OW 1
29661: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
29662: LD_ADDR_EXP 125
29666: PUSH
29667: LD_EXP 125
29671: PPUSH
29672: LD_EXP 125
29676: PUSH
29677: LD_INT 1
29679: PLUS
29680: PPUSH
29681: EMPTY
29682: PPUSH
29683: CALL_OW 1
29687: ST_TO_ADDR
// end ; if not IsOk ( i ) then
29688: LD_VAR 0 1
29692: PPUSH
29693: CALL_OW 302
29697: NOT
29698: IFFALSE 29711
// begin HackUnlinkAll ( i ) ;
29700: LD_VAR 0 1
29704: PPUSH
29705: CALL 29817 0 1
// continue ;
29709: GO 29591
// end ; HackCheckCapturedStatus ( i ) ;
29711: LD_VAR 0 1
29715: PPUSH
29716: CALL 30260 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
29720: LD_ADDR_VAR 0 2
29724: PUSH
29725: LD_INT 81
29727: PUSH
29728: LD_VAR 0 1
29732: PPUSH
29733: CALL_OW 255
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PUSH
29742: LD_INT 33
29744: PUSH
29745: LD_INT 3
29747: PUSH
29748: EMPTY
29749: LIST
29750: LIST
29751: PUSH
29752: LD_INT 91
29754: PUSH
29755: LD_VAR 0 1
29759: PUSH
29760: LD_EXP 124
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 50
29772: PUSH
29773: EMPTY
29774: LIST
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: PPUSH
29782: CALL_OW 69
29786: ST_TO_ADDR
// if not tmp then
29787: LD_VAR 0 2
29791: NOT
29792: IFFALSE 29796
// continue ;
29794: GO 29591
// HackLink ( i , tmp ) ;
29796: LD_VAR 0 1
29800: PPUSH
29801: LD_VAR 0 2
29805: PPUSH
29806: CALL 29953 0 2
// end ;
29810: GO 29591
29812: POP
29813: POP
// end ;
29814: PPOPN 2
29816: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
29817: LD_INT 0
29819: PPUSH
29820: PPUSH
29821: PPUSH
// if not hack in hackTanks then
29822: LD_VAR 0 1
29826: PUSH
29827: LD_EXP 121
29831: IN
29832: NOT
29833: IFFALSE 29837
// exit ;
29835: GO 29948
// index := GetElementIndex ( hackTanks , hack ) ;
29837: LD_ADDR_VAR 0 4
29841: PUSH
29842: LD_EXP 121
29846: PPUSH
29847: LD_VAR 0 1
29851: PPUSH
29852: CALL 37753 0 2
29856: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
29857: LD_EXP 122
29861: PUSH
29862: LD_VAR 0 4
29866: ARRAY
29867: IFFALSE 29948
// begin for i in hackTanksCaptured [ index ] do
29869: LD_ADDR_VAR 0 3
29873: PUSH
29874: LD_EXP 122
29878: PUSH
29879: LD_VAR 0 4
29883: ARRAY
29884: PUSH
29885: FOR_IN
29886: IFFALSE 29912
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
29888: LD_VAR 0 3
29892: PUSH
29893: LD_INT 1
29895: ARRAY
29896: PPUSH
29897: LD_VAR 0 3
29901: PUSH
29902: LD_INT 2
29904: ARRAY
29905: PPUSH
29906: CALL_OW 235
29910: GO 29885
29912: POP
29913: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
29914: LD_ADDR_EXP 122
29918: PUSH
29919: LD_EXP 122
29923: PPUSH
29924: LD_VAR 0 4
29928: PPUSH
29929: EMPTY
29930: PPUSH
29931: CALL_OW 1
29935: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
29936: LD_VAR 0 1
29940: PPUSH
29941: LD_INT 0
29943: PPUSH
29944: CALL_OW 505
// end ; end ;
29948: LD_VAR 0 2
29952: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
29953: LD_INT 0
29955: PPUSH
29956: PPUSH
29957: PPUSH
// if not hack in hackTanks or not vehicles then
29958: LD_VAR 0 1
29962: PUSH
29963: LD_EXP 121
29967: IN
29968: NOT
29969: PUSH
29970: LD_VAR 0 2
29974: NOT
29975: OR
29976: IFFALSE 29980
// exit ;
29978: GO 30255
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
29980: LD_ADDR_VAR 0 2
29984: PUSH
29985: LD_VAR 0 1
29989: PPUSH
29990: LD_VAR 0 2
29994: PPUSH
29995: LD_INT 1
29997: PPUSH
29998: LD_INT 1
30000: PPUSH
30001: CALL 38403 0 4
30005: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
30006: LD_ADDR_VAR 0 5
30010: PUSH
30011: LD_EXP 121
30015: PPUSH
30016: LD_VAR 0 1
30020: PPUSH
30021: CALL 37753 0 2
30025: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
30026: LD_EXP 122
30030: PUSH
30031: LD_VAR 0 5
30035: ARRAY
30036: PUSH
30037: LD_EXP 123
30041: LESS
30042: IFFALSE 30231
// begin for i := 1 to vehicles do
30044: LD_ADDR_VAR 0 4
30048: PUSH
30049: DOUBLE
30050: LD_INT 1
30052: DEC
30053: ST_TO_ADDR
30054: LD_VAR 0 2
30058: PUSH
30059: FOR_TO
30060: IFFALSE 30229
// begin if hackTanksCaptured [ index ] = hackLimit then
30062: LD_EXP 122
30066: PUSH
30067: LD_VAR 0 5
30071: ARRAY
30072: PUSH
30073: LD_EXP 123
30077: EQUAL
30078: IFFALSE 30082
// break ;
30080: GO 30229
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
30082: LD_ADDR_EXP 125
30086: PUSH
30087: LD_EXP 125
30091: PPUSH
30092: LD_VAR 0 5
30096: PPUSH
30097: LD_EXP 125
30101: PUSH
30102: LD_VAR 0 5
30106: ARRAY
30107: PUSH
30108: LD_INT 1
30110: PLUS
30111: PPUSH
30112: CALL_OW 1
30116: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
30117: LD_ADDR_EXP 122
30121: PUSH
30122: LD_EXP 122
30126: PPUSH
30127: LD_VAR 0 5
30131: PUSH
30132: LD_EXP 122
30136: PUSH
30137: LD_VAR 0 5
30141: ARRAY
30142: PUSH
30143: LD_INT 1
30145: PLUS
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: PPUSH
30151: LD_VAR 0 2
30155: PUSH
30156: LD_VAR 0 4
30160: ARRAY
30161: PUSH
30162: LD_VAR 0 2
30166: PUSH
30167: LD_VAR 0 4
30171: ARRAY
30172: PPUSH
30173: CALL_OW 255
30177: PUSH
30178: EMPTY
30179: LIST
30180: LIST
30181: PPUSH
30182: CALL 37968 0 3
30186: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
30187: LD_VAR 0 2
30191: PUSH
30192: LD_VAR 0 4
30196: ARRAY
30197: PPUSH
30198: LD_VAR 0 1
30202: PPUSH
30203: CALL_OW 255
30207: PPUSH
30208: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
30212: LD_VAR 0 2
30216: PUSH
30217: LD_VAR 0 4
30221: ARRAY
30222: PPUSH
30223: CALL_OW 141
// end ;
30227: GO 30059
30229: POP
30230: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30231: LD_VAR 0 1
30235: PPUSH
30236: LD_EXP 122
30240: PUSH
30241: LD_VAR 0 5
30245: ARRAY
30246: PUSH
30247: LD_INT 0
30249: PLUS
30250: PPUSH
30251: CALL_OW 505
// end ;
30255: LD_VAR 0 3
30259: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
30260: LD_INT 0
30262: PPUSH
30263: PPUSH
30264: PPUSH
30265: PPUSH
// if not hack in hackTanks then
30266: LD_VAR 0 1
30270: PUSH
30271: LD_EXP 121
30275: IN
30276: NOT
30277: IFFALSE 30281
// exit ;
30279: GO 30521
// index := GetElementIndex ( hackTanks , hack ) ;
30281: LD_ADDR_VAR 0 4
30285: PUSH
30286: LD_EXP 121
30290: PPUSH
30291: LD_VAR 0 1
30295: PPUSH
30296: CALL 37753 0 2
30300: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
30301: LD_ADDR_VAR 0 3
30305: PUSH
30306: DOUBLE
30307: LD_EXP 122
30311: PUSH
30312: LD_VAR 0 4
30316: ARRAY
30317: INC
30318: ST_TO_ADDR
30319: LD_INT 1
30321: PUSH
30322: FOR_DOWNTO
30323: IFFALSE 30495
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
30325: LD_ADDR_VAR 0 5
30329: PUSH
30330: LD_EXP 122
30334: PUSH
30335: LD_VAR 0 4
30339: ARRAY
30340: PUSH
30341: LD_VAR 0 3
30345: ARRAY
30346: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
30347: LD_VAR 0 5
30351: PUSH
30352: LD_INT 1
30354: ARRAY
30355: PPUSH
30356: CALL_OW 302
30360: NOT
30361: PUSH
30362: LD_VAR 0 5
30366: PUSH
30367: LD_INT 1
30369: ARRAY
30370: PPUSH
30371: CALL_OW 255
30375: PUSH
30376: LD_VAR 0 1
30380: PPUSH
30381: CALL_OW 255
30385: NONEQUAL
30386: OR
30387: IFFALSE 30493
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
30389: LD_VAR 0 5
30393: PUSH
30394: LD_INT 1
30396: ARRAY
30397: PPUSH
30398: CALL_OW 305
30402: PUSH
30403: LD_VAR 0 5
30407: PUSH
30408: LD_INT 1
30410: ARRAY
30411: PPUSH
30412: CALL_OW 255
30416: PUSH
30417: LD_VAR 0 1
30421: PPUSH
30422: CALL_OW 255
30426: EQUAL
30427: AND
30428: IFFALSE 30452
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
30430: LD_VAR 0 5
30434: PUSH
30435: LD_INT 1
30437: ARRAY
30438: PPUSH
30439: LD_VAR 0 5
30443: PUSH
30444: LD_INT 2
30446: ARRAY
30447: PPUSH
30448: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
30452: LD_ADDR_EXP 122
30456: PUSH
30457: LD_EXP 122
30461: PPUSH
30462: LD_VAR 0 4
30466: PPUSH
30467: LD_EXP 122
30471: PUSH
30472: LD_VAR 0 4
30476: ARRAY
30477: PPUSH
30478: LD_VAR 0 3
30482: PPUSH
30483: CALL_OW 3
30487: PPUSH
30488: CALL_OW 1
30492: ST_TO_ADDR
// end ; end ;
30493: GO 30322
30495: POP
30496: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
30497: LD_VAR 0 1
30501: PPUSH
30502: LD_EXP 122
30506: PUSH
30507: LD_VAR 0 4
30511: ARRAY
30512: PUSH
30513: LD_INT 0
30515: PLUS
30516: PPUSH
30517: CALL_OW 505
// end ;
30521: LD_VAR 0 2
30525: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
30526: LD_INT 0
30528: PPUSH
30529: PPUSH
30530: PPUSH
30531: PPUSH
// if not hack in hackTanks then
30532: LD_VAR 0 1
30536: PUSH
30537: LD_EXP 121
30541: IN
30542: NOT
30543: IFFALSE 30547
// exit ;
30545: GO 30632
// index := GetElementIndex ( hackTanks , hack ) ;
30547: LD_ADDR_VAR 0 5
30551: PUSH
30552: LD_EXP 121
30556: PPUSH
30557: LD_VAR 0 1
30561: PPUSH
30562: CALL 37753 0 2
30566: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
30567: LD_ADDR_VAR 0 4
30571: PUSH
30572: DOUBLE
30573: LD_INT 1
30575: DEC
30576: ST_TO_ADDR
30577: LD_EXP 122
30581: PUSH
30582: LD_VAR 0 5
30586: ARRAY
30587: PUSH
30588: FOR_TO
30589: IFFALSE 30630
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
30591: LD_EXP 122
30595: PUSH
30596: LD_VAR 0 5
30600: ARRAY
30601: PUSH
30602: LD_VAR 0 4
30606: ARRAY
30607: PUSH
30608: LD_INT 1
30610: ARRAY
30611: PUSH
30612: LD_VAR 0 2
30616: EQUAL
30617: IFFALSE 30628
// KillUnit ( vehicle ) ;
30619: LD_VAR 0 2
30623: PPUSH
30624: CALL_OW 66
30628: GO 30588
30630: POP
30631: POP
// end ;
30632: LD_VAR 0 3
30636: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
30637: LD_EXP 126
30641: NOT
30642: IFFALSE 30677
30644: GO 30646
30646: DISABLE
// begin initMiner := true ;
30647: LD_ADDR_EXP 126
30651: PUSH
30652: LD_INT 1
30654: ST_TO_ADDR
// minersList := [ ] ;
30655: LD_ADDR_EXP 127
30659: PUSH
30660: EMPTY
30661: ST_TO_ADDR
// minerMinesList := [ ] ;
30662: LD_ADDR_EXP 128
30666: PUSH
30667: EMPTY
30668: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
30669: LD_ADDR_EXP 129
30673: PUSH
30674: LD_INT 5
30676: ST_TO_ADDR
// end ;
30677: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
30678: LD_EXP 126
30682: PUSH
30683: LD_INT 34
30685: PUSH
30686: LD_EXP 137
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PPUSH
30695: CALL_OW 69
30699: AND
30700: IFFALSE 31163
30702: GO 30704
30704: DISABLE
30705: LD_INT 0
30707: PPUSH
30708: PPUSH
30709: PPUSH
30710: PPUSH
// begin enable ;
30711: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
30712: LD_ADDR_VAR 0 1
30716: PUSH
30717: LD_INT 34
30719: PUSH
30720: LD_EXP 137
30724: PUSH
30725: EMPTY
30726: LIST
30727: LIST
30728: PPUSH
30729: CALL_OW 69
30733: PUSH
30734: FOR_IN
30735: IFFALSE 30807
// begin if not i in minersList then
30737: LD_VAR 0 1
30741: PUSH
30742: LD_EXP 127
30746: IN
30747: NOT
30748: IFFALSE 30805
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
30750: LD_ADDR_EXP 127
30754: PUSH
30755: LD_EXP 127
30759: PPUSH
30760: LD_EXP 127
30764: PUSH
30765: LD_INT 1
30767: PLUS
30768: PPUSH
30769: LD_VAR 0 1
30773: PPUSH
30774: CALL_OW 1
30778: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
30779: LD_ADDR_EXP 128
30783: PUSH
30784: LD_EXP 128
30788: PPUSH
30789: LD_EXP 128
30793: PUSH
30794: LD_INT 1
30796: PLUS
30797: PPUSH
30798: EMPTY
30799: PPUSH
30800: CALL_OW 1
30804: ST_TO_ADDR
// end end ;
30805: GO 30734
30807: POP
30808: POP
// for i := minerMinesList downto 1 do
30809: LD_ADDR_VAR 0 1
30813: PUSH
30814: DOUBLE
30815: LD_EXP 128
30819: INC
30820: ST_TO_ADDR
30821: LD_INT 1
30823: PUSH
30824: FOR_DOWNTO
30825: IFFALSE 31161
// begin if IsLive ( minersList [ i ] ) then
30827: LD_EXP 127
30831: PUSH
30832: LD_VAR 0 1
30836: ARRAY
30837: PPUSH
30838: CALL_OW 300
30842: IFFALSE 30870
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
30844: LD_EXP 127
30848: PUSH
30849: LD_VAR 0 1
30853: ARRAY
30854: PPUSH
30855: LD_EXP 128
30859: PUSH
30860: LD_VAR 0 1
30864: ARRAY
30865: PPUSH
30866: CALL_OW 505
// if not minerMinesList [ i ] then
30870: LD_EXP 128
30874: PUSH
30875: LD_VAR 0 1
30879: ARRAY
30880: NOT
30881: IFFALSE 30885
// continue ;
30883: GO 30824
// for j := minerMinesList [ i ] downto 1 do
30885: LD_ADDR_VAR 0 2
30889: PUSH
30890: DOUBLE
30891: LD_EXP 128
30895: PUSH
30896: LD_VAR 0 1
30900: ARRAY
30901: INC
30902: ST_TO_ADDR
30903: LD_INT 1
30905: PUSH
30906: FOR_DOWNTO
30907: IFFALSE 31157
// begin side := GetSide ( minersList [ i ] ) ;
30909: LD_ADDR_VAR 0 3
30913: PUSH
30914: LD_EXP 127
30918: PUSH
30919: LD_VAR 0 1
30923: ARRAY
30924: PPUSH
30925: CALL_OW 255
30929: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
30930: LD_ADDR_VAR 0 4
30934: PUSH
30935: LD_EXP 128
30939: PUSH
30940: LD_VAR 0 1
30944: ARRAY
30945: PUSH
30946: LD_VAR 0 2
30950: ARRAY
30951: PUSH
30952: LD_INT 1
30954: ARRAY
30955: PPUSH
30956: LD_EXP 128
30960: PUSH
30961: LD_VAR 0 1
30965: ARRAY
30966: PUSH
30967: LD_VAR 0 2
30971: ARRAY
30972: PUSH
30973: LD_INT 2
30975: ARRAY
30976: PPUSH
30977: CALL_OW 428
30981: ST_TO_ADDR
// if not tmp then
30982: LD_VAR 0 4
30986: NOT
30987: IFFALSE 30991
// continue ;
30989: GO 30906
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30991: LD_VAR 0 4
30995: PUSH
30996: LD_INT 81
30998: PUSH
30999: LD_VAR 0 3
31003: PUSH
31004: EMPTY
31005: LIST
31006: LIST
31007: PPUSH
31008: CALL_OW 69
31012: IN
31013: PUSH
31014: LD_EXP 128
31018: PUSH
31019: LD_VAR 0 1
31023: ARRAY
31024: PUSH
31025: LD_VAR 0 2
31029: ARRAY
31030: PUSH
31031: LD_INT 1
31033: ARRAY
31034: PPUSH
31035: LD_EXP 128
31039: PUSH
31040: LD_VAR 0 1
31044: ARRAY
31045: PUSH
31046: LD_VAR 0 2
31050: ARRAY
31051: PUSH
31052: LD_INT 2
31054: ARRAY
31055: PPUSH
31056: CALL_OW 458
31060: AND
31061: IFFALSE 31155
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
31063: LD_EXP 128
31067: PUSH
31068: LD_VAR 0 1
31072: ARRAY
31073: PUSH
31074: LD_VAR 0 2
31078: ARRAY
31079: PUSH
31080: LD_INT 1
31082: ARRAY
31083: PPUSH
31084: LD_EXP 128
31088: PUSH
31089: LD_VAR 0 1
31093: ARRAY
31094: PUSH
31095: LD_VAR 0 2
31099: ARRAY
31100: PUSH
31101: LD_INT 2
31103: ARRAY
31104: PPUSH
31105: LD_VAR 0 3
31109: PPUSH
31110: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
31114: LD_ADDR_EXP 128
31118: PUSH
31119: LD_EXP 128
31123: PPUSH
31124: LD_VAR 0 1
31128: PPUSH
31129: LD_EXP 128
31133: PUSH
31134: LD_VAR 0 1
31138: ARRAY
31139: PPUSH
31140: LD_VAR 0 2
31144: PPUSH
31145: CALL_OW 3
31149: PPUSH
31150: CALL_OW 1
31154: ST_TO_ADDR
// end ; end ;
31155: GO 30906
31157: POP
31158: POP
// end ;
31159: GO 30824
31161: POP
31162: POP
// end ;
31163: PPOPN 4
31165: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
31166: LD_INT 0
31168: PPUSH
31169: PPUSH
// result := false ;
31170: LD_ADDR_VAR 0 4
31174: PUSH
31175: LD_INT 0
31177: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
31178: LD_VAR 0 1
31182: PPUSH
31183: CALL_OW 264
31187: PUSH
31188: LD_EXP 137
31192: EQUAL
31193: NOT
31194: IFFALSE 31198
// exit ;
31196: GO 31438
// index := GetElementIndex ( minersList , unit ) ;
31198: LD_ADDR_VAR 0 5
31202: PUSH
31203: LD_EXP 127
31207: PPUSH
31208: LD_VAR 0 1
31212: PPUSH
31213: CALL 37753 0 2
31217: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
31218: LD_EXP 128
31222: PUSH
31223: LD_VAR 0 5
31227: ARRAY
31228: PUSH
31229: LD_EXP 129
31233: GREATEREQUAL
31234: IFFALSE 31238
// exit ;
31236: GO 31438
// ComMoveXY ( unit , x , y ) ;
31238: LD_VAR 0 1
31242: PPUSH
31243: LD_VAR 0 2
31247: PPUSH
31248: LD_VAR 0 3
31252: PPUSH
31253: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31257: LD_INT 35
31259: PPUSH
31260: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
31264: LD_VAR 0 1
31268: PPUSH
31269: LD_VAR 0 2
31273: PPUSH
31274: LD_VAR 0 3
31278: PPUSH
31279: CALL 68525 0 3
31283: NOT
31284: PUSH
31285: LD_VAR 0 1
31289: PPUSH
31290: CALL_OW 314
31294: AND
31295: IFFALSE 31299
// exit ;
31297: GO 31438
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
31299: LD_VAR 0 2
31303: PPUSH
31304: LD_VAR 0 3
31308: PPUSH
31309: CALL_OW 428
31313: PUSH
31314: LD_VAR 0 1
31318: EQUAL
31319: PUSH
31320: LD_VAR 0 1
31324: PPUSH
31325: CALL_OW 314
31329: NOT
31330: AND
31331: IFFALSE 31257
// PlaySoundXY ( x , y , PlantMine ) ;
31333: LD_VAR 0 2
31337: PPUSH
31338: LD_VAR 0 3
31342: PPUSH
31343: LD_STRING PlantMine
31345: PPUSH
31346: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
31350: LD_VAR 0 2
31354: PPUSH
31355: LD_VAR 0 3
31359: PPUSH
31360: LD_VAR 0 1
31364: PPUSH
31365: CALL_OW 255
31369: PPUSH
31370: LD_INT 0
31372: PPUSH
31373: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
31377: LD_ADDR_EXP 128
31381: PUSH
31382: LD_EXP 128
31386: PPUSH
31387: LD_VAR 0 5
31391: PUSH
31392: LD_EXP 128
31396: PUSH
31397: LD_VAR 0 5
31401: ARRAY
31402: PUSH
31403: LD_INT 1
31405: PLUS
31406: PUSH
31407: EMPTY
31408: LIST
31409: LIST
31410: PPUSH
31411: LD_VAR 0 2
31415: PUSH
31416: LD_VAR 0 3
31420: PUSH
31421: EMPTY
31422: LIST
31423: LIST
31424: PPUSH
31425: CALL 37968 0 3
31429: ST_TO_ADDR
// result := true ;
31430: LD_ADDR_VAR 0 4
31434: PUSH
31435: LD_INT 1
31437: ST_TO_ADDR
// end ;
31438: LD_VAR 0 4
31442: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
31443: LD_INT 0
31445: PPUSH
31446: PPUSH
31447: PPUSH
// if not unit in minersList then
31448: LD_VAR 0 1
31452: PUSH
31453: LD_EXP 127
31457: IN
31458: NOT
31459: IFFALSE 31463
// exit ;
31461: GO 31855
// index := GetElementIndex ( minersList , unit ) ;
31463: LD_ADDR_VAR 0 6
31467: PUSH
31468: LD_EXP 127
31472: PPUSH
31473: LD_VAR 0 1
31477: PPUSH
31478: CALL 37753 0 2
31482: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
31483: LD_ADDR_VAR 0 5
31487: PUSH
31488: DOUBLE
31489: LD_EXP 128
31493: PUSH
31494: LD_VAR 0 6
31498: ARRAY
31499: INC
31500: ST_TO_ADDR
31501: LD_INT 1
31503: PUSH
31504: FOR_DOWNTO
31505: IFFALSE 31666
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
31507: LD_EXP 128
31511: PUSH
31512: LD_VAR 0 6
31516: ARRAY
31517: PUSH
31518: LD_VAR 0 5
31522: ARRAY
31523: PUSH
31524: LD_INT 1
31526: ARRAY
31527: PUSH
31528: LD_VAR 0 2
31532: EQUAL
31533: PUSH
31534: LD_EXP 128
31538: PUSH
31539: LD_VAR 0 6
31543: ARRAY
31544: PUSH
31545: LD_VAR 0 5
31549: ARRAY
31550: PUSH
31551: LD_INT 2
31553: ARRAY
31554: PUSH
31555: LD_VAR 0 3
31559: EQUAL
31560: AND
31561: IFFALSE 31664
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31563: LD_EXP 128
31567: PUSH
31568: LD_VAR 0 6
31572: ARRAY
31573: PUSH
31574: LD_VAR 0 5
31578: ARRAY
31579: PUSH
31580: LD_INT 1
31582: ARRAY
31583: PPUSH
31584: LD_EXP 128
31588: PUSH
31589: LD_VAR 0 6
31593: ARRAY
31594: PUSH
31595: LD_VAR 0 5
31599: ARRAY
31600: PUSH
31601: LD_INT 2
31603: ARRAY
31604: PPUSH
31605: LD_VAR 0 1
31609: PPUSH
31610: CALL_OW 255
31614: PPUSH
31615: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31619: LD_ADDR_EXP 128
31623: PUSH
31624: LD_EXP 128
31628: PPUSH
31629: LD_VAR 0 6
31633: PPUSH
31634: LD_EXP 128
31638: PUSH
31639: LD_VAR 0 6
31643: ARRAY
31644: PPUSH
31645: LD_VAR 0 5
31649: PPUSH
31650: CALL_OW 3
31654: PPUSH
31655: CALL_OW 1
31659: ST_TO_ADDR
// exit ;
31660: POP
31661: POP
31662: GO 31855
// end ; end ;
31664: GO 31504
31666: POP
31667: POP
// for i := minerMinesList [ index ] downto 1 do
31668: LD_ADDR_VAR 0 5
31672: PUSH
31673: DOUBLE
31674: LD_EXP 128
31678: PUSH
31679: LD_VAR 0 6
31683: ARRAY
31684: INC
31685: ST_TO_ADDR
31686: LD_INT 1
31688: PUSH
31689: FOR_DOWNTO
31690: IFFALSE 31853
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
31692: LD_EXP 128
31696: PUSH
31697: LD_VAR 0 6
31701: ARRAY
31702: PUSH
31703: LD_VAR 0 5
31707: ARRAY
31708: PUSH
31709: LD_INT 1
31711: ARRAY
31712: PPUSH
31713: LD_EXP 128
31717: PUSH
31718: LD_VAR 0 6
31722: ARRAY
31723: PUSH
31724: LD_VAR 0 5
31728: ARRAY
31729: PUSH
31730: LD_INT 2
31732: ARRAY
31733: PPUSH
31734: LD_VAR 0 2
31738: PPUSH
31739: LD_VAR 0 3
31743: PPUSH
31744: CALL_OW 298
31748: PUSH
31749: LD_INT 6
31751: LESS
31752: IFFALSE 31851
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
31754: LD_EXP 128
31758: PUSH
31759: LD_VAR 0 6
31763: ARRAY
31764: PUSH
31765: LD_VAR 0 5
31769: ARRAY
31770: PUSH
31771: LD_INT 1
31773: ARRAY
31774: PPUSH
31775: LD_EXP 128
31779: PUSH
31780: LD_VAR 0 6
31784: ARRAY
31785: PUSH
31786: LD_VAR 0 5
31790: ARRAY
31791: PUSH
31792: LD_INT 2
31794: ARRAY
31795: PPUSH
31796: LD_VAR 0 1
31800: PPUSH
31801: CALL_OW 255
31805: PPUSH
31806: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
31810: LD_ADDR_EXP 128
31814: PUSH
31815: LD_EXP 128
31819: PPUSH
31820: LD_VAR 0 6
31824: PPUSH
31825: LD_EXP 128
31829: PUSH
31830: LD_VAR 0 6
31834: ARRAY
31835: PPUSH
31836: LD_VAR 0 5
31840: PPUSH
31841: CALL_OW 3
31845: PPUSH
31846: CALL_OW 1
31850: ST_TO_ADDR
// end ; end ;
31851: GO 31689
31853: POP
31854: POP
// end ;
31855: LD_VAR 0 4
31859: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
31860: LD_INT 0
31862: PPUSH
31863: PPUSH
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
31868: PPUSH
31869: PPUSH
31870: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
31871: LD_VAR 0 1
31875: PPUSH
31876: CALL_OW 264
31880: PUSH
31881: LD_EXP 137
31885: EQUAL
31886: NOT
31887: PUSH
31888: LD_VAR 0 1
31892: PUSH
31893: LD_EXP 127
31897: IN
31898: NOT
31899: OR
31900: IFFALSE 31904
// exit ;
31902: GO 32226
// index := GetElementIndex ( minersList , unit ) ;
31904: LD_ADDR_VAR 0 6
31908: PUSH
31909: LD_EXP 127
31913: PPUSH
31914: LD_VAR 0 1
31918: PPUSH
31919: CALL 37753 0 2
31923: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
31924: LD_ADDR_VAR 0 8
31928: PUSH
31929: LD_EXP 129
31933: PUSH
31934: LD_EXP 128
31938: PUSH
31939: LD_VAR 0 6
31943: ARRAY
31944: MINUS
31945: ST_TO_ADDR
// if not minesFreeAmount then
31946: LD_VAR 0 8
31950: NOT
31951: IFFALSE 31955
// exit ;
31953: GO 32226
// tmp := [ ] ;
31955: LD_ADDR_VAR 0 7
31959: PUSH
31960: EMPTY
31961: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
31962: LD_ADDR_VAR 0 5
31966: PUSH
31967: DOUBLE
31968: LD_INT 1
31970: DEC
31971: ST_TO_ADDR
31972: LD_VAR 0 8
31976: PUSH
31977: FOR_TO
31978: IFFALSE 32173
// begin _d := rand ( 0 , 5 ) ;
31980: LD_ADDR_VAR 0 11
31984: PUSH
31985: LD_INT 0
31987: PPUSH
31988: LD_INT 5
31990: PPUSH
31991: CALL_OW 12
31995: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31996: LD_ADDR_VAR 0 12
32000: PUSH
32001: LD_INT 2
32003: PPUSH
32004: LD_INT 6
32006: PPUSH
32007: CALL_OW 12
32011: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
32012: LD_ADDR_VAR 0 9
32016: PUSH
32017: LD_VAR 0 2
32021: PPUSH
32022: LD_VAR 0 11
32026: PPUSH
32027: LD_VAR 0 12
32031: PPUSH
32032: CALL_OW 272
32036: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
32037: LD_ADDR_VAR 0 10
32041: PUSH
32042: LD_VAR 0 3
32046: PPUSH
32047: LD_VAR 0 11
32051: PPUSH
32052: LD_VAR 0 12
32056: PPUSH
32057: CALL_OW 273
32061: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
32062: LD_VAR 0 9
32066: PPUSH
32067: LD_VAR 0 10
32071: PPUSH
32072: CALL_OW 488
32076: PUSH
32077: LD_VAR 0 9
32081: PUSH
32082: LD_VAR 0 10
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_VAR 0 7
32095: IN
32096: NOT
32097: AND
32098: PUSH
32099: LD_VAR 0 9
32103: PPUSH
32104: LD_VAR 0 10
32108: PPUSH
32109: CALL_OW 458
32113: NOT
32114: AND
32115: IFFALSE 32157
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
32117: LD_ADDR_VAR 0 7
32121: PUSH
32122: LD_VAR 0 7
32126: PPUSH
32127: LD_VAR 0 7
32131: PUSH
32132: LD_INT 1
32134: PLUS
32135: PPUSH
32136: LD_VAR 0 9
32140: PUSH
32141: LD_VAR 0 10
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: PPUSH
32150: CALL_OW 1
32154: ST_TO_ADDR
32155: GO 32171
// i := i - 1 ;
32157: LD_ADDR_VAR 0 5
32161: PUSH
32162: LD_VAR 0 5
32166: PUSH
32167: LD_INT 1
32169: MINUS
32170: ST_TO_ADDR
// end ;
32171: GO 31977
32173: POP
32174: POP
// for i in tmp do
32175: LD_ADDR_VAR 0 5
32179: PUSH
32180: LD_VAR 0 7
32184: PUSH
32185: FOR_IN
32186: IFFALSE 32224
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
32188: LD_VAR 0 1
32192: PPUSH
32193: LD_VAR 0 5
32197: PUSH
32198: LD_INT 1
32200: ARRAY
32201: PPUSH
32202: LD_VAR 0 5
32206: PUSH
32207: LD_INT 2
32209: ARRAY
32210: PPUSH
32211: CALL 31166 0 3
32215: NOT
32216: IFFALSE 32222
// exit ;
32218: POP
32219: POP
32220: GO 32226
32222: GO 32185
32224: POP
32225: POP
// end ;
32226: LD_VAR 0 4
32230: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
32231: LD_INT 0
32233: PPUSH
32234: PPUSH
32235: PPUSH
32236: PPUSH
32237: PPUSH
32238: PPUSH
32239: PPUSH
// if not GetClass ( unit ) = class_sniper then
32240: LD_VAR 0 1
32244: PPUSH
32245: CALL_OW 257
32249: PUSH
32250: LD_INT 5
32252: EQUAL
32253: NOT
32254: IFFALSE 32258
// exit ;
32256: GO 32646
// dist := 8 ;
32258: LD_ADDR_VAR 0 5
32262: PUSH
32263: LD_INT 8
32265: ST_TO_ADDR
// viewRange := 12 ;
32266: LD_ADDR_VAR 0 7
32270: PUSH
32271: LD_INT 12
32273: ST_TO_ADDR
// side := GetSide ( unit ) ;
32274: LD_ADDR_VAR 0 6
32278: PUSH
32279: LD_VAR 0 1
32283: PPUSH
32284: CALL_OW 255
32288: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
32289: LD_INT 61
32291: PPUSH
32292: LD_VAR 0 6
32296: PPUSH
32297: CALL_OW 321
32301: PUSH
32302: LD_INT 2
32304: EQUAL
32305: IFFALSE 32315
// viewRange := 16 ;
32307: LD_ADDR_VAR 0 7
32311: PUSH
32312: LD_INT 16
32314: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
32315: LD_VAR 0 1
32319: PPUSH
32320: LD_VAR 0 2
32324: PPUSH
32325: LD_VAR 0 3
32329: PPUSH
32330: CALL_OW 297
32334: PUSH
32335: LD_VAR 0 5
32339: GREATER
32340: IFFALSE 32419
// begin ComMoveXY ( unit , x , y ) ;
32342: LD_VAR 0 1
32346: PPUSH
32347: LD_VAR 0 2
32351: PPUSH
32352: LD_VAR 0 3
32356: PPUSH
32357: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32361: LD_INT 35
32363: PPUSH
32364: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
32368: LD_VAR 0 1
32372: PPUSH
32373: LD_VAR 0 2
32377: PPUSH
32378: LD_VAR 0 3
32382: PPUSH
32383: CALL 68525 0 3
32387: NOT
32388: IFFALSE 32392
// exit ;
32390: GO 32646
// until GetDistUnitXY ( unit , x , y ) < dist ;
32392: LD_VAR 0 1
32396: PPUSH
32397: LD_VAR 0 2
32401: PPUSH
32402: LD_VAR 0 3
32406: PPUSH
32407: CALL_OW 297
32411: PUSH
32412: LD_VAR 0 5
32416: LESS
32417: IFFALSE 32361
// end ; ComTurnXY ( unit , x , y ) ;
32419: LD_VAR 0 1
32423: PPUSH
32424: LD_VAR 0 2
32428: PPUSH
32429: LD_VAR 0 3
32433: PPUSH
32434: CALL_OW 118
// wait ( 5 ) ;
32438: LD_INT 5
32440: PPUSH
32441: CALL_OW 67
// _d := GetDir ( unit ) ;
32445: LD_ADDR_VAR 0 10
32449: PUSH
32450: LD_VAR 0 1
32454: PPUSH
32455: CALL_OW 254
32459: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
32460: LD_ADDR_VAR 0 8
32464: PUSH
32465: LD_VAR 0 1
32469: PPUSH
32470: CALL_OW 250
32474: PPUSH
32475: LD_VAR 0 10
32479: PPUSH
32480: LD_VAR 0 5
32484: PPUSH
32485: CALL_OW 272
32489: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
32490: LD_ADDR_VAR 0 9
32494: PUSH
32495: LD_VAR 0 1
32499: PPUSH
32500: CALL_OW 251
32504: PPUSH
32505: LD_VAR 0 10
32509: PPUSH
32510: LD_VAR 0 5
32514: PPUSH
32515: CALL_OW 273
32519: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
32520: LD_VAR 0 8
32524: PPUSH
32525: LD_VAR 0 9
32529: PPUSH
32530: CALL_OW 488
32534: NOT
32535: IFFALSE 32539
// exit ;
32537: GO 32646
// ComAnimCustom ( unit , 1 ) ;
32539: LD_VAR 0 1
32543: PPUSH
32544: LD_INT 1
32546: PPUSH
32547: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
32551: LD_VAR 0 8
32555: PPUSH
32556: LD_VAR 0 9
32560: PPUSH
32561: LD_VAR 0 6
32565: PPUSH
32566: LD_VAR 0 7
32570: PPUSH
32571: CALL_OW 330
// repeat wait ( 1 ) ;
32575: LD_INT 1
32577: PPUSH
32578: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
32582: LD_VAR 0 1
32586: PPUSH
32587: CALL_OW 316
32591: PUSH
32592: LD_VAR 0 1
32596: PPUSH
32597: CALL_OW 314
32601: OR
32602: PUSH
32603: LD_VAR 0 1
32607: PPUSH
32608: CALL_OW 302
32612: NOT
32613: OR
32614: PUSH
32615: LD_VAR 0 1
32619: PPUSH
32620: CALL_OW 301
32624: OR
32625: IFFALSE 32575
// RemoveSeeing ( _x , _y , side ) ;
32627: LD_VAR 0 8
32631: PPUSH
32632: LD_VAR 0 9
32636: PPUSH
32637: LD_VAR 0 6
32641: PPUSH
32642: CALL_OW 331
// end ; end_of_file
32646: LD_VAR 0 4
32650: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
32651: LD_VAR 0 1
32655: PUSH
32656: LD_INT 200
32658: DOUBLE
32659: GREATEREQUAL
32660: IFFALSE 32668
32662: LD_INT 299
32664: DOUBLE
32665: LESSEQUAL
32666: IFTRUE 32670
32668: GO 32702
32670: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
32671: LD_VAR 0 1
32675: PPUSH
32676: LD_VAR 0 2
32680: PPUSH
32681: LD_VAR 0 3
32685: PPUSH
32686: LD_VAR 0 4
32690: PPUSH
32691: LD_VAR 0 5
32695: PPUSH
32696: CALL 28768 0 5
32700: GO 32779
32702: LD_INT 300
32704: DOUBLE
32705: GREATEREQUAL
32706: IFFALSE 32714
32708: LD_INT 399
32710: DOUBLE
32711: LESSEQUAL
32712: IFTRUE 32716
32714: GO 32778
32716: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
32717: LD_VAR 0 1
32721: PPUSH
32722: LD_VAR 0 2
32726: PPUSH
32727: LD_VAR 0 3
32731: PPUSH
32732: LD_VAR 0 4
32736: PPUSH
32737: LD_VAR 0 5
32741: PPUSH
32742: LD_VAR 0 6
32746: PPUSH
32747: LD_VAR 0 7
32751: PPUSH
32752: LD_VAR 0 8
32756: PPUSH
32757: LD_VAR 0 9
32761: PPUSH
32762: LD_VAR 0 10
32766: PPUSH
32767: LD_VAR 0 11
32771: PPUSH
32772: CALL 26666 0 11
32776: GO 32779
32778: POP
// end ;
32779: PPOPN 11
32781: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
32782: LD_VAR 0 1
32786: PPUSH
32787: LD_VAR 0 2
32791: PPUSH
32792: LD_VAR 0 3
32796: PPUSH
32797: LD_VAR 0 4
32801: PPUSH
32802: LD_VAR 0 5
32806: PPUSH
32807: CALL 28760 0 5
// end ; end_of_file end_of_file
32811: PPOPN 5
32813: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
32814: LD_INT 0
32816: PPUSH
// ar_miner := 81 ;
32817: LD_ADDR_EXP 137
32821: PUSH
32822: LD_INT 81
32824: ST_TO_ADDR
// ar_crane := 88 ;
32825: LD_ADDR_EXP 136
32829: PUSH
32830: LD_INT 88
32832: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
32833: LD_ADDR_EXP 131
32837: PUSH
32838: LD_INT 89
32840: ST_TO_ADDR
// us_hack := 99 ;
32841: LD_ADDR_EXP 132
32845: PUSH
32846: LD_INT 99
32848: ST_TO_ADDR
// us_artillery := 97 ;
32849: LD_ADDR_EXP 133
32853: PUSH
32854: LD_INT 97
32856: ST_TO_ADDR
// ar_bio_bomb := 91 ;
32857: LD_ADDR_EXP 134
32861: PUSH
32862: LD_INT 91
32864: ST_TO_ADDR
// ar_mortar := 92 ;
32865: LD_ADDR_EXP 135
32869: PUSH
32870: LD_INT 92
32872: ST_TO_ADDR
// ru_radar := 98 ;
32873: LD_ADDR_EXP 130
32877: PUSH
32878: LD_INT 98
32880: ST_TO_ADDR
// tech_Artillery := 80 ;
32881: LD_ADDR_EXP 138
32885: PUSH
32886: LD_INT 80
32888: ST_TO_ADDR
// tech_RadMat := 81 ;
32889: LD_ADDR_EXP 139
32893: PUSH
32894: LD_INT 81
32896: ST_TO_ADDR
// tech_BasicTools := 82 ;
32897: LD_ADDR_EXP 140
32901: PUSH
32902: LD_INT 82
32904: ST_TO_ADDR
// tech_Cargo := 83 ;
32905: LD_ADDR_EXP 141
32909: PUSH
32910: LD_INT 83
32912: ST_TO_ADDR
// tech_Track := 84 ;
32913: LD_ADDR_EXP 142
32917: PUSH
32918: LD_INT 84
32920: ST_TO_ADDR
// tech_Crane := 85 ;
32921: LD_ADDR_EXP 143
32925: PUSH
32926: LD_INT 85
32928: ST_TO_ADDR
// tech_Bulldozer := 86 ;
32929: LD_ADDR_EXP 144
32933: PUSH
32934: LD_INT 86
32936: ST_TO_ADDR
// tech_Hovercraft := 87 ;
32937: LD_ADDR_EXP 145
32941: PUSH
32942: LD_INT 87
32944: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
32945: LD_ADDR_EXP 146
32949: PUSH
32950: LD_INT 88
32952: ST_TO_ADDR
// class_mastodont := 31 ;
32953: LD_ADDR_EXP 147
32957: PUSH
32958: LD_INT 31
32960: ST_TO_ADDR
// class_horse := 21 ;
32961: LD_ADDR_EXP 148
32965: PUSH
32966: LD_INT 21
32968: ST_TO_ADDR
// end ;
32969: LD_VAR 0 1
32973: RET
// every 1 do
32974: GO 32976
32976: DISABLE
// InitGlobalVariables ; end_of_file
32977: CALL 32814 0 0
32981: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
32982: LD_INT 0
32984: PPUSH
32985: PPUSH
// if exist_mode then
32986: LD_VAR 0 2
32990: IFFALSE 33015
// unit := CreateCharacter ( prefix & ident ) else
32992: LD_ADDR_VAR 0 5
32996: PUSH
32997: LD_VAR 0 3
33001: PUSH
33002: LD_VAR 0 1
33006: STR
33007: PPUSH
33008: CALL_OW 34
33012: ST_TO_ADDR
33013: GO 33030
// unit := NewCharacter ( ident ) ;
33015: LD_ADDR_VAR 0 5
33019: PUSH
33020: LD_VAR 0 1
33024: PPUSH
33025: CALL_OW 25
33029: ST_TO_ADDR
// result := unit ;
33030: LD_ADDR_VAR 0 4
33034: PUSH
33035: LD_VAR 0 5
33039: ST_TO_ADDR
// end ;
33040: LD_VAR 0 4
33044: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
33045: LD_INT 0
33047: PPUSH
33048: PPUSH
// if not side or not nation then
33049: LD_VAR 0 1
33053: NOT
33054: PUSH
33055: LD_VAR 0 2
33059: NOT
33060: OR
33061: IFFALSE 33065
// exit ;
33063: GO 33833
// case nation of nation_american :
33065: LD_VAR 0 2
33069: PUSH
33070: LD_INT 1
33072: DOUBLE
33073: EQUAL
33074: IFTRUE 33078
33076: GO 33292
33078: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
33079: LD_ADDR_VAR 0 4
33083: PUSH
33084: LD_INT 35
33086: PUSH
33087: LD_INT 45
33089: PUSH
33090: LD_INT 46
33092: PUSH
33093: LD_INT 47
33095: PUSH
33096: LD_INT 82
33098: PUSH
33099: LD_INT 83
33101: PUSH
33102: LD_INT 84
33104: PUSH
33105: LD_INT 85
33107: PUSH
33108: LD_INT 86
33110: PUSH
33111: LD_INT 1
33113: PUSH
33114: LD_INT 2
33116: PUSH
33117: LD_INT 6
33119: PUSH
33120: LD_INT 15
33122: PUSH
33123: LD_INT 16
33125: PUSH
33126: LD_INT 7
33128: PUSH
33129: LD_INT 12
33131: PUSH
33132: LD_INT 13
33134: PUSH
33135: LD_INT 10
33137: PUSH
33138: LD_INT 14
33140: PUSH
33141: LD_INT 20
33143: PUSH
33144: LD_INT 21
33146: PUSH
33147: LD_INT 22
33149: PUSH
33150: LD_INT 25
33152: PUSH
33153: LD_INT 32
33155: PUSH
33156: LD_INT 27
33158: PUSH
33159: LD_INT 36
33161: PUSH
33162: LD_INT 69
33164: PUSH
33165: LD_INT 39
33167: PUSH
33168: LD_INT 34
33170: PUSH
33171: LD_INT 40
33173: PUSH
33174: LD_INT 48
33176: PUSH
33177: LD_INT 49
33179: PUSH
33180: LD_INT 50
33182: PUSH
33183: LD_INT 51
33185: PUSH
33186: LD_INT 52
33188: PUSH
33189: LD_INT 53
33191: PUSH
33192: LD_INT 54
33194: PUSH
33195: LD_INT 55
33197: PUSH
33198: LD_INT 56
33200: PUSH
33201: LD_INT 57
33203: PUSH
33204: LD_INT 58
33206: PUSH
33207: LD_INT 59
33209: PUSH
33210: LD_INT 60
33212: PUSH
33213: LD_INT 61
33215: PUSH
33216: LD_INT 62
33218: PUSH
33219: LD_INT 80
33221: PUSH
33222: LD_INT 82
33224: PUSH
33225: LD_INT 83
33227: PUSH
33228: LD_INT 84
33230: PUSH
33231: LD_INT 85
33233: PUSH
33234: LD_INT 86
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: ST_TO_ADDR
33290: GO 33757
33292: LD_INT 2
33294: DOUBLE
33295: EQUAL
33296: IFTRUE 33300
33298: GO 33526
33300: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
33301: LD_ADDR_VAR 0 4
33305: PUSH
33306: LD_INT 35
33308: PUSH
33309: LD_INT 45
33311: PUSH
33312: LD_INT 46
33314: PUSH
33315: LD_INT 47
33317: PUSH
33318: LD_INT 82
33320: PUSH
33321: LD_INT 83
33323: PUSH
33324: LD_INT 84
33326: PUSH
33327: LD_INT 85
33329: PUSH
33330: LD_INT 87
33332: PUSH
33333: LD_INT 70
33335: PUSH
33336: LD_INT 1
33338: PUSH
33339: LD_INT 11
33341: PUSH
33342: LD_INT 3
33344: PUSH
33345: LD_INT 4
33347: PUSH
33348: LD_INT 5
33350: PUSH
33351: LD_INT 6
33353: PUSH
33354: LD_INT 15
33356: PUSH
33357: LD_INT 18
33359: PUSH
33360: LD_INT 7
33362: PUSH
33363: LD_INT 17
33365: PUSH
33366: LD_INT 8
33368: PUSH
33369: LD_INT 20
33371: PUSH
33372: LD_INT 21
33374: PUSH
33375: LD_INT 22
33377: PUSH
33378: LD_INT 72
33380: PUSH
33381: LD_INT 26
33383: PUSH
33384: LD_INT 69
33386: PUSH
33387: LD_INT 39
33389: PUSH
33390: LD_INT 40
33392: PUSH
33393: LD_INT 41
33395: PUSH
33396: LD_INT 42
33398: PUSH
33399: LD_INT 43
33401: PUSH
33402: LD_INT 48
33404: PUSH
33405: LD_INT 49
33407: PUSH
33408: LD_INT 50
33410: PUSH
33411: LD_INT 51
33413: PUSH
33414: LD_INT 52
33416: PUSH
33417: LD_INT 53
33419: PUSH
33420: LD_INT 54
33422: PUSH
33423: LD_INT 55
33425: PUSH
33426: LD_INT 56
33428: PUSH
33429: LD_INT 60
33431: PUSH
33432: LD_INT 61
33434: PUSH
33435: LD_INT 62
33437: PUSH
33438: LD_INT 66
33440: PUSH
33441: LD_INT 67
33443: PUSH
33444: LD_INT 68
33446: PUSH
33447: LD_INT 81
33449: PUSH
33450: LD_INT 82
33452: PUSH
33453: LD_INT 83
33455: PUSH
33456: LD_INT 84
33458: PUSH
33459: LD_INT 85
33461: PUSH
33462: LD_INT 87
33464: PUSH
33465: LD_INT 88
33467: PUSH
33468: EMPTY
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: ST_TO_ADDR
33524: GO 33757
33526: LD_INT 3
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33534
33532: GO 33756
33534: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
33535: LD_ADDR_VAR 0 4
33539: PUSH
33540: LD_INT 46
33542: PUSH
33543: LD_INT 47
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: LD_INT 2
33551: PUSH
33552: LD_INT 82
33554: PUSH
33555: LD_INT 83
33557: PUSH
33558: LD_INT 84
33560: PUSH
33561: LD_INT 85
33563: PUSH
33564: LD_INT 86
33566: PUSH
33567: LD_INT 11
33569: PUSH
33570: LD_INT 9
33572: PUSH
33573: LD_INT 20
33575: PUSH
33576: LD_INT 19
33578: PUSH
33579: LD_INT 21
33581: PUSH
33582: LD_INT 24
33584: PUSH
33585: LD_INT 22
33587: PUSH
33588: LD_INT 25
33590: PUSH
33591: LD_INT 28
33593: PUSH
33594: LD_INT 29
33596: PUSH
33597: LD_INT 30
33599: PUSH
33600: LD_INT 31
33602: PUSH
33603: LD_INT 37
33605: PUSH
33606: LD_INT 38
33608: PUSH
33609: LD_INT 32
33611: PUSH
33612: LD_INT 27
33614: PUSH
33615: LD_INT 33
33617: PUSH
33618: LD_INT 69
33620: PUSH
33621: LD_INT 39
33623: PUSH
33624: LD_INT 34
33626: PUSH
33627: LD_INT 40
33629: PUSH
33630: LD_INT 71
33632: PUSH
33633: LD_INT 23
33635: PUSH
33636: LD_INT 44
33638: PUSH
33639: LD_INT 48
33641: PUSH
33642: LD_INT 49
33644: PUSH
33645: LD_INT 50
33647: PUSH
33648: LD_INT 51
33650: PUSH
33651: LD_INT 52
33653: PUSH
33654: LD_INT 53
33656: PUSH
33657: LD_INT 54
33659: PUSH
33660: LD_INT 55
33662: PUSH
33663: LD_INT 56
33665: PUSH
33666: LD_INT 57
33668: PUSH
33669: LD_INT 58
33671: PUSH
33672: LD_INT 59
33674: PUSH
33675: LD_INT 63
33677: PUSH
33678: LD_INT 64
33680: PUSH
33681: LD_INT 65
33683: PUSH
33684: LD_INT 82
33686: PUSH
33687: LD_INT 83
33689: PUSH
33690: LD_INT 84
33692: PUSH
33693: LD_INT 85
33695: PUSH
33696: LD_INT 86
33698: PUSH
33699: EMPTY
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: LIST
33745: LIST
33746: LIST
33747: LIST
33748: LIST
33749: LIST
33750: LIST
33751: LIST
33752: LIST
33753: ST_TO_ADDR
33754: GO 33757
33756: POP
// if state > - 1 and state < 3 then
33757: LD_VAR 0 3
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: GREATER
33766: PUSH
33767: LD_VAR 0 3
33771: PUSH
33772: LD_INT 3
33774: LESS
33775: AND
33776: IFFALSE 33833
// for i in result do
33778: LD_ADDR_VAR 0 5
33782: PUSH
33783: LD_VAR 0 4
33787: PUSH
33788: FOR_IN
33789: IFFALSE 33831
// if GetTech ( i , side ) <> state then
33791: LD_VAR 0 5
33795: PPUSH
33796: LD_VAR 0 1
33800: PPUSH
33801: CALL_OW 321
33805: PUSH
33806: LD_VAR 0 3
33810: NONEQUAL
33811: IFFALSE 33829
// result := result diff i ;
33813: LD_ADDR_VAR 0 4
33817: PUSH
33818: LD_VAR 0 4
33822: PUSH
33823: LD_VAR 0 5
33827: DIFF
33828: ST_TO_ADDR
33829: GO 33788
33831: POP
33832: POP
// end ;
33833: LD_VAR 0 4
33837: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
33838: LD_INT 0
33840: PPUSH
33841: PPUSH
33842: PPUSH
// result := true ;
33843: LD_ADDR_VAR 0 3
33847: PUSH
33848: LD_INT 1
33850: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
33851: LD_ADDR_VAR 0 5
33855: PUSH
33856: LD_VAR 0 2
33860: PPUSH
33861: CALL_OW 480
33865: ST_TO_ADDR
// if not tmp then
33866: LD_VAR 0 5
33870: NOT
33871: IFFALSE 33875
// exit ;
33873: GO 33924
// for i in tmp do
33875: LD_ADDR_VAR 0 4
33879: PUSH
33880: LD_VAR 0 5
33884: PUSH
33885: FOR_IN
33886: IFFALSE 33922
// if GetTech ( i , side ) <> state_researched then
33888: LD_VAR 0 4
33892: PPUSH
33893: LD_VAR 0 1
33897: PPUSH
33898: CALL_OW 321
33902: PUSH
33903: LD_INT 2
33905: NONEQUAL
33906: IFFALSE 33920
// begin result := false ;
33908: LD_ADDR_VAR 0 3
33912: PUSH
33913: LD_INT 0
33915: ST_TO_ADDR
// exit ;
33916: POP
33917: POP
33918: GO 33924
// end ;
33920: GO 33885
33922: POP
33923: POP
// end ;
33924: LD_VAR 0 3
33928: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
33929: LD_INT 0
33931: PPUSH
33932: PPUSH
33933: PPUSH
33934: PPUSH
33935: PPUSH
33936: PPUSH
33937: PPUSH
33938: PPUSH
33939: PPUSH
33940: PPUSH
33941: PPUSH
33942: PPUSH
33943: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
33944: LD_VAR 0 1
33948: NOT
33949: PUSH
33950: LD_VAR 0 1
33954: PPUSH
33955: CALL_OW 257
33959: PUSH
33960: LD_INT 9
33962: NONEQUAL
33963: OR
33964: IFFALSE 33968
// exit ;
33966: GO 34541
// side := GetSide ( unit ) ;
33968: LD_ADDR_VAR 0 9
33972: PUSH
33973: LD_VAR 0 1
33977: PPUSH
33978: CALL_OW 255
33982: ST_TO_ADDR
// tech_space := tech_spacanom ;
33983: LD_ADDR_VAR 0 12
33987: PUSH
33988: LD_INT 29
33990: ST_TO_ADDR
// tech_time := tech_taurad ;
33991: LD_ADDR_VAR 0 13
33995: PUSH
33996: LD_INT 28
33998: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
33999: LD_ADDR_VAR 0 11
34003: PUSH
34004: LD_VAR 0 1
34008: PPUSH
34009: CALL_OW 310
34013: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
34014: LD_VAR 0 11
34018: PPUSH
34019: CALL_OW 247
34023: PUSH
34024: LD_INT 2
34026: EQUAL
34027: IFFALSE 34031
// exit ;
34029: GO 34541
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34031: LD_ADDR_VAR 0 8
34035: PUSH
34036: LD_INT 81
34038: PUSH
34039: LD_VAR 0 9
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: PUSH
34048: LD_INT 3
34050: PUSH
34051: LD_INT 21
34053: PUSH
34054: LD_INT 3
34056: PUSH
34057: EMPTY
34058: LIST
34059: LIST
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PPUSH
34069: CALL_OW 69
34073: ST_TO_ADDR
// if not tmp then
34074: LD_VAR 0 8
34078: NOT
34079: IFFALSE 34083
// exit ;
34081: GO 34541
// if in_unit then
34083: LD_VAR 0 11
34087: IFFALSE 34111
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
34089: LD_ADDR_VAR 0 10
34093: PUSH
34094: LD_VAR 0 8
34098: PPUSH
34099: LD_VAR 0 11
34103: PPUSH
34104: CALL_OW 74
34108: ST_TO_ADDR
34109: GO 34131
// enemy := NearestUnitToUnit ( tmp , unit ) ;
34111: LD_ADDR_VAR 0 10
34115: PUSH
34116: LD_VAR 0 8
34120: PPUSH
34121: LD_VAR 0 1
34125: PPUSH
34126: CALL_OW 74
34130: ST_TO_ADDR
// if not enemy then
34131: LD_VAR 0 10
34135: NOT
34136: IFFALSE 34140
// exit ;
34138: GO 34541
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
34140: LD_VAR 0 11
34144: PUSH
34145: LD_VAR 0 11
34149: PPUSH
34150: LD_VAR 0 10
34154: PPUSH
34155: CALL_OW 296
34159: PUSH
34160: LD_INT 13
34162: GREATER
34163: AND
34164: PUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: LD_VAR 0 10
34174: PPUSH
34175: CALL_OW 296
34179: PUSH
34180: LD_INT 12
34182: GREATER
34183: OR
34184: IFFALSE 34188
// exit ;
34186: GO 34541
// missile := [ 1 ] ;
34188: LD_ADDR_VAR 0 14
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: ST_TO_ADDR
// if Researched ( side , tech_space ) then
34199: LD_VAR 0 9
34203: PPUSH
34204: LD_VAR 0 12
34208: PPUSH
34209: CALL_OW 325
34213: IFFALSE 34242
// missile := Insert ( missile , missile + 1 , 2 ) ;
34215: LD_ADDR_VAR 0 14
34219: PUSH
34220: LD_VAR 0 14
34224: PPUSH
34225: LD_VAR 0 14
34229: PUSH
34230: LD_INT 1
34232: PLUS
34233: PPUSH
34234: LD_INT 2
34236: PPUSH
34237: CALL_OW 2
34241: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
34242: LD_VAR 0 9
34246: PPUSH
34247: LD_VAR 0 13
34251: PPUSH
34252: CALL_OW 325
34256: PUSH
34257: LD_VAR 0 10
34261: PPUSH
34262: CALL_OW 255
34266: PPUSH
34267: LD_VAR 0 13
34271: PPUSH
34272: CALL_OW 325
34276: NOT
34277: AND
34278: IFFALSE 34307
// missile := Insert ( missile , missile + 1 , 3 ) ;
34280: LD_ADDR_VAR 0 14
34284: PUSH
34285: LD_VAR 0 14
34289: PPUSH
34290: LD_VAR 0 14
34294: PUSH
34295: LD_INT 1
34297: PLUS
34298: PPUSH
34299: LD_INT 3
34301: PPUSH
34302: CALL_OW 2
34306: ST_TO_ADDR
// if missile < 2 then
34307: LD_VAR 0 14
34311: PUSH
34312: LD_INT 2
34314: LESS
34315: IFFALSE 34319
// exit ;
34317: GO 34541
// x := GetX ( enemy ) ;
34319: LD_ADDR_VAR 0 4
34323: PUSH
34324: LD_VAR 0 10
34328: PPUSH
34329: CALL_OW 250
34333: ST_TO_ADDR
// y := GetY ( enemy ) ;
34334: LD_ADDR_VAR 0 5
34338: PUSH
34339: LD_VAR 0 10
34343: PPUSH
34344: CALL_OW 251
34348: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
34349: LD_ADDR_VAR 0 6
34353: PUSH
34354: LD_VAR 0 4
34358: PUSH
34359: LD_INT 1
34361: NEG
34362: PPUSH
34363: LD_INT 1
34365: PPUSH
34366: CALL_OW 12
34370: PLUS
34371: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
34372: LD_ADDR_VAR 0 7
34376: PUSH
34377: LD_VAR 0 5
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PPUSH
34386: LD_INT 1
34388: PPUSH
34389: CALL_OW 12
34393: PLUS
34394: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34395: LD_VAR 0 6
34399: PPUSH
34400: LD_VAR 0 7
34404: PPUSH
34405: CALL_OW 488
34409: NOT
34410: IFFALSE 34432
// begin _x := x ;
34412: LD_ADDR_VAR 0 6
34416: PUSH
34417: LD_VAR 0 4
34421: ST_TO_ADDR
// _y := y ;
34422: LD_ADDR_VAR 0 7
34426: PUSH
34427: LD_VAR 0 5
34431: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
34432: LD_ADDR_VAR 0 3
34436: PUSH
34437: LD_INT 1
34439: PPUSH
34440: LD_VAR 0 14
34444: PPUSH
34445: CALL_OW 12
34449: ST_TO_ADDR
// case i of 1 :
34450: LD_VAR 0 3
34454: PUSH
34455: LD_INT 1
34457: DOUBLE
34458: EQUAL
34459: IFTRUE 34463
34461: GO 34480
34463: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
34464: LD_VAR 0 1
34468: PPUSH
34469: LD_VAR 0 10
34473: PPUSH
34474: CALL_OW 115
34478: GO 34541
34480: LD_INT 2
34482: DOUBLE
34483: EQUAL
34484: IFTRUE 34488
34486: GO 34510
34488: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
34489: LD_VAR 0 1
34493: PPUSH
34494: LD_VAR 0 6
34498: PPUSH
34499: LD_VAR 0 7
34503: PPUSH
34504: CALL_OW 153
34508: GO 34541
34510: LD_INT 3
34512: DOUBLE
34513: EQUAL
34514: IFTRUE 34518
34516: GO 34540
34518: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
34519: LD_VAR 0 1
34523: PPUSH
34524: LD_VAR 0 6
34528: PPUSH
34529: LD_VAR 0 7
34533: PPUSH
34534: CALL_OW 154
34538: GO 34541
34540: POP
// end ;
34541: LD_VAR 0 2
34545: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
34546: LD_INT 0
34548: PPUSH
34549: PPUSH
34550: PPUSH
34551: PPUSH
34552: PPUSH
34553: PPUSH
// if not unit or not building then
34554: LD_VAR 0 1
34558: NOT
34559: PUSH
34560: LD_VAR 0 2
34564: NOT
34565: OR
34566: IFFALSE 34570
// exit ;
34568: GO 34728
// x := GetX ( building ) ;
34570: LD_ADDR_VAR 0 5
34574: PUSH
34575: LD_VAR 0 2
34579: PPUSH
34580: CALL_OW 250
34584: ST_TO_ADDR
// y := GetY ( building ) ;
34585: LD_ADDR_VAR 0 6
34589: PUSH
34590: LD_VAR 0 2
34594: PPUSH
34595: CALL_OW 251
34599: ST_TO_ADDR
// for i = 0 to 5 do
34600: LD_ADDR_VAR 0 4
34604: PUSH
34605: DOUBLE
34606: LD_INT 0
34608: DEC
34609: ST_TO_ADDR
34610: LD_INT 5
34612: PUSH
34613: FOR_TO
34614: IFFALSE 34726
// begin _x := ShiftX ( x , i , 3 ) ;
34616: LD_ADDR_VAR 0 7
34620: PUSH
34621: LD_VAR 0 5
34625: PPUSH
34626: LD_VAR 0 4
34630: PPUSH
34631: LD_INT 3
34633: PPUSH
34634: CALL_OW 272
34638: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
34639: LD_ADDR_VAR 0 8
34643: PUSH
34644: LD_VAR 0 6
34648: PPUSH
34649: LD_VAR 0 4
34653: PPUSH
34654: LD_INT 3
34656: PPUSH
34657: CALL_OW 273
34661: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34662: LD_VAR 0 7
34666: PPUSH
34667: LD_VAR 0 8
34671: PPUSH
34672: CALL_OW 488
34676: NOT
34677: IFFALSE 34681
// continue ;
34679: GO 34613
// if HexInfo ( _x , _y ) = 0 then
34681: LD_VAR 0 7
34685: PPUSH
34686: LD_VAR 0 8
34690: PPUSH
34691: CALL_OW 428
34695: PUSH
34696: LD_INT 0
34698: EQUAL
34699: IFFALSE 34724
// begin ComMoveXY ( unit , _x , _y ) ;
34701: LD_VAR 0 1
34705: PPUSH
34706: LD_VAR 0 7
34710: PPUSH
34711: LD_VAR 0 8
34715: PPUSH
34716: CALL_OW 111
// exit ;
34720: POP
34721: POP
34722: GO 34728
// end ; end ;
34724: GO 34613
34726: POP
34727: POP
// end ;
34728: LD_VAR 0 3
34732: RET
// export function ScanBase ( side , base_area ) ; begin
34733: LD_INT 0
34735: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
34736: LD_ADDR_VAR 0 3
34740: PUSH
34741: LD_VAR 0 2
34745: PPUSH
34746: LD_INT 81
34748: PUSH
34749: LD_VAR 0 1
34753: PUSH
34754: EMPTY
34755: LIST
34756: LIST
34757: PPUSH
34758: CALL_OW 70
34762: ST_TO_ADDR
// end ;
34763: LD_VAR 0 3
34767: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
34768: LD_INT 0
34770: PPUSH
34771: PPUSH
34772: PPUSH
34773: PPUSH
// result := false ;
34774: LD_ADDR_VAR 0 2
34778: PUSH
34779: LD_INT 0
34781: ST_TO_ADDR
// side := GetSide ( unit ) ;
34782: LD_ADDR_VAR 0 3
34786: PUSH
34787: LD_VAR 0 1
34791: PPUSH
34792: CALL_OW 255
34796: ST_TO_ADDR
// nat := GetNation ( unit ) ;
34797: LD_ADDR_VAR 0 4
34801: PUSH
34802: LD_VAR 0 1
34806: PPUSH
34807: CALL_OW 248
34811: ST_TO_ADDR
// case nat of 1 :
34812: LD_VAR 0 4
34816: PUSH
34817: LD_INT 1
34819: DOUBLE
34820: EQUAL
34821: IFTRUE 34825
34823: GO 34836
34825: POP
// tech := tech_lassight ; 2 :
34826: LD_ADDR_VAR 0 5
34830: PUSH
34831: LD_INT 12
34833: ST_TO_ADDR
34834: GO 34875
34836: LD_INT 2
34838: DOUBLE
34839: EQUAL
34840: IFTRUE 34844
34842: GO 34855
34844: POP
// tech := tech_mortar ; 3 :
34845: LD_ADDR_VAR 0 5
34849: PUSH
34850: LD_INT 41
34852: ST_TO_ADDR
34853: GO 34875
34855: LD_INT 3
34857: DOUBLE
34858: EQUAL
34859: IFTRUE 34863
34861: GO 34874
34863: POP
// tech := tech_bazooka ; end ;
34864: LD_ADDR_VAR 0 5
34868: PUSH
34869: LD_INT 44
34871: ST_TO_ADDR
34872: GO 34875
34874: POP
// if Researched ( side , tech ) then
34875: LD_VAR 0 3
34879: PPUSH
34880: LD_VAR 0 5
34884: PPUSH
34885: CALL_OW 325
34889: IFFALSE 34916
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
34891: LD_ADDR_VAR 0 2
34895: PUSH
34896: LD_INT 5
34898: PUSH
34899: LD_INT 8
34901: PUSH
34902: LD_INT 9
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: LIST
34909: PUSH
34910: LD_VAR 0 4
34914: ARRAY
34915: ST_TO_ADDR
// end ;
34916: LD_VAR 0 2
34920: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
34921: LD_INT 0
34923: PPUSH
34924: PPUSH
34925: PPUSH
// if not mines then
34926: LD_VAR 0 2
34930: NOT
34931: IFFALSE 34935
// exit ;
34933: GO 35079
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
34935: LD_ADDR_VAR 0 5
34939: PUSH
34940: LD_INT 81
34942: PUSH
34943: LD_VAR 0 1
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PUSH
34952: LD_INT 3
34954: PUSH
34955: LD_INT 21
34957: PUSH
34958: LD_INT 3
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: PUSH
34969: EMPTY
34970: LIST
34971: LIST
34972: PPUSH
34973: CALL_OW 69
34977: ST_TO_ADDR
// for i in mines do
34978: LD_ADDR_VAR 0 4
34982: PUSH
34983: LD_VAR 0 2
34987: PUSH
34988: FOR_IN
34989: IFFALSE 35077
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
34991: LD_VAR 0 4
34995: PUSH
34996: LD_INT 1
34998: ARRAY
34999: PPUSH
35000: LD_VAR 0 4
35004: PUSH
35005: LD_INT 2
35007: ARRAY
35008: PPUSH
35009: CALL_OW 458
35013: NOT
35014: IFFALSE 35018
// continue ;
35016: GO 34988
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
35018: LD_VAR 0 4
35022: PUSH
35023: LD_INT 1
35025: ARRAY
35026: PPUSH
35027: LD_VAR 0 4
35031: PUSH
35032: LD_INT 2
35034: ARRAY
35035: PPUSH
35036: CALL_OW 428
35040: PUSH
35041: LD_VAR 0 5
35045: IN
35046: IFFALSE 35075
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
35048: LD_VAR 0 4
35052: PUSH
35053: LD_INT 1
35055: ARRAY
35056: PPUSH
35057: LD_VAR 0 4
35061: PUSH
35062: LD_INT 2
35064: ARRAY
35065: PPUSH
35066: LD_VAR 0 1
35070: PPUSH
35071: CALL_OW 456
// end ;
35075: GO 34988
35077: POP
35078: POP
// end ;
35079: LD_VAR 0 3
35083: RET
// export function Count ( array ) ; var i ; begin
35084: LD_INT 0
35086: PPUSH
35087: PPUSH
// result := 0 ;
35088: LD_ADDR_VAR 0 2
35092: PUSH
35093: LD_INT 0
35095: ST_TO_ADDR
// for i in array do
35096: LD_ADDR_VAR 0 3
35100: PUSH
35101: LD_VAR 0 1
35105: PUSH
35106: FOR_IN
35107: IFFALSE 35131
// if i then
35109: LD_VAR 0 3
35113: IFFALSE 35129
// result := result + 1 ;
35115: LD_ADDR_VAR 0 2
35119: PUSH
35120: LD_VAR 0 2
35124: PUSH
35125: LD_INT 1
35127: PLUS
35128: ST_TO_ADDR
35129: GO 35106
35131: POP
35132: POP
// end ;
35133: LD_VAR 0 2
35137: RET
// export function IsEmpty ( building ) ; begin
35138: LD_INT 0
35140: PPUSH
// if not building then
35141: LD_VAR 0 1
35145: NOT
35146: IFFALSE 35150
// exit ;
35148: GO 35193
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
35150: LD_ADDR_VAR 0 2
35154: PUSH
35155: LD_VAR 0 1
35159: PUSH
35160: LD_INT 22
35162: PUSH
35163: LD_VAR 0 1
35167: PPUSH
35168: CALL_OW 255
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 58
35179: PUSH
35180: EMPTY
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PPUSH
35187: CALL_OW 69
35191: IN
35192: ST_TO_ADDR
// end ;
35193: LD_VAR 0 2
35197: RET
// export function IsNotFull ( building ) ; begin
35198: LD_INT 0
35200: PPUSH
// if not building then
35201: LD_VAR 0 1
35205: NOT
35206: IFFALSE 35210
// exit ;
35208: GO 35229
// result := UnitsInside ( building ) < 6 ;
35210: LD_ADDR_VAR 0 2
35214: PUSH
35215: LD_VAR 0 1
35219: PPUSH
35220: CALL_OW 313
35224: PUSH
35225: LD_INT 6
35227: LESS
35228: ST_TO_ADDR
// end ;
35229: LD_VAR 0 2
35233: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
35234: LD_INT 0
35236: PPUSH
35237: PPUSH
35238: PPUSH
35239: PPUSH
// tmp := [ ] ;
35240: LD_ADDR_VAR 0 3
35244: PUSH
35245: EMPTY
35246: ST_TO_ADDR
// list := [ ] ;
35247: LD_ADDR_VAR 0 5
35251: PUSH
35252: EMPTY
35253: ST_TO_ADDR
// for i = 16 to 25 do
35254: LD_ADDR_VAR 0 4
35258: PUSH
35259: DOUBLE
35260: LD_INT 16
35262: DEC
35263: ST_TO_ADDR
35264: LD_INT 25
35266: PUSH
35267: FOR_TO
35268: IFFALSE 35341
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
35270: LD_ADDR_VAR 0 3
35274: PUSH
35275: LD_VAR 0 3
35279: PUSH
35280: LD_INT 22
35282: PUSH
35283: LD_VAR 0 1
35287: PPUSH
35288: CALL_OW 255
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 91
35299: PUSH
35300: LD_VAR 0 1
35304: PUSH
35305: LD_INT 6
35307: PUSH
35308: EMPTY
35309: LIST
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 30
35315: PUSH
35316: LD_VAR 0 4
35320: PUSH
35321: EMPTY
35322: LIST
35323: LIST
35324: PUSH
35325: EMPTY
35326: LIST
35327: LIST
35328: LIST
35329: PUSH
35330: EMPTY
35331: LIST
35332: PPUSH
35333: CALL_OW 69
35337: ADD
35338: ST_TO_ADDR
35339: GO 35267
35341: POP
35342: POP
// for i = 1 to tmp do
35343: LD_ADDR_VAR 0 4
35347: PUSH
35348: DOUBLE
35349: LD_INT 1
35351: DEC
35352: ST_TO_ADDR
35353: LD_VAR 0 3
35357: PUSH
35358: FOR_TO
35359: IFFALSE 35447
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
35361: LD_ADDR_VAR 0 5
35365: PUSH
35366: LD_VAR 0 5
35370: PUSH
35371: LD_VAR 0 3
35375: PUSH
35376: LD_VAR 0 4
35380: ARRAY
35381: PPUSH
35382: CALL_OW 266
35386: PUSH
35387: LD_VAR 0 3
35391: PUSH
35392: LD_VAR 0 4
35396: ARRAY
35397: PPUSH
35398: CALL_OW 250
35402: PUSH
35403: LD_VAR 0 3
35407: PUSH
35408: LD_VAR 0 4
35412: ARRAY
35413: PPUSH
35414: CALL_OW 251
35418: PUSH
35419: LD_VAR 0 3
35423: PUSH
35424: LD_VAR 0 4
35428: ARRAY
35429: PPUSH
35430: CALL_OW 254
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: LIST
35439: LIST
35440: PUSH
35441: EMPTY
35442: LIST
35443: ADD
35444: ST_TO_ADDR
35445: GO 35358
35447: POP
35448: POP
// result := list ;
35449: LD_ADDR_VAR 0 2
35453: PUSH
35454: LD_VAR 0 5
35458: ST_TO_ADDR
// end ;
35459: LD_VAR 0 2
35463: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
35464: LD_INT 0
35466: PPUSH
35467: PPUSH
35468: PPUSH
35469: PPUSH
35470: PPUSH
35471: PPUSH
35472: PPUSH
// if not factory then
35473: LD_VAR 0 1
35477: NOT
35478: IFFALSE 35482
// exit ;
35480: GO 36075
// if control = control_apeman then
35482: LD_VAR 0 4
35486: PUSH
35487: LD_INT 5
35489: EQUAL
35490: IFFALSE 35599
// begin tmp := UnitsInside ( factory ) ;
35492: LD_ADDR_VAR 0 8
35496: PUSH
35497: LD_VAR 0 1
35501: PPUSH
35502: CALL_OW 313
35506: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
35507: LD_VAR 0 8
35511: PPUSH
35512: LD_INT 25
35514: PUSH
35515: LD_INT 12
35517: PUSH
35518: EMPTY
35519: LIST
35520: LIST
35521: PPUSH
35522: CALL_OW 72
35526: NOT
35527: IFFALSE 35537
// control := control_manual ;
35529: LD_ADDR_VAR 0 4
35533: PUSH
35534: LD_INT 1
35536: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
35537: LD_ADDR_VAR 0 8
35541: PUSH
35542: LD_VAR 0 1
35546: PPUSH
35547: CALL 35234 0 1
35551: ST_TO_ADDR
// if tmp then
35552: LD_VAR 0 8
35556: IFFALSE 35599
// begin for i in tmp do
35558: LD_ADDR_VAR 0 7
35562: PUSH
35563: LD_VAR 0 8
35567: PUSH
35568: FOR_IN
35569: IFFALSE 35597
// if i [ 1 ] = b_ext_radio then
35571: LD_VAR 0 7
35575: PUSH
35576: LD_INT 1
35578: ARRAY
35579: PUSH
35580: LD_INT 22
35582: EQUAL
35583: IFFALSE 35595
// begin control := control_remote ;
35585: LD_ADDR_VAR 0 4
35589: PUSH
35590: LD_INT 2
35592: ST_TO_ADDR
// break ;
35593: GO 35597
// end ;
35595: GO 35568
35597: POP
35598: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35599: LD_VAR 0 1
35603: PPUSH
35604: LD_VAR 0 2
35608: PPUSH
35609: LD_VAR 0 3
35613: PPUSH
35614: LD_VAR 0 4
35618: PPUSH
35619: LD_VAR 0 5
35623: PPUSH
35624: CALL_OW 448
35628: IFFALSE 35663
// begin result := [ chassis , engine , control , weapon ] ;
35630: LD_ADDR_VAR 0 6
35634: PUSH
35635: LD_VAR 0 2
35639: PUSH
35640: LD_VAR 0 3
35644: PUSH
35645: LD_VAR 0 4
35649: PUSH
35650: LD_VAR 0 5
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: ST_TO_ADDR
// exit ;
35661: GO 36075
// end ; _chassis := AvailableChassisList ( factory ) ;
35663: LD_ADDR_VAR 0 9
35667: PUSH
35668: LD_VAR 0 1
35672: PPUSH
35673: CALL_OW 475
35677: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
35678: LD_ADDR_VAR 0 11
35682: PUSH
35683: LD_VAR 0 1
35687: PPUSH
35688: CALL_OW 476
35692: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
35693: LD_ADDR_VAR 0 12
35697: PUSH
35698: LD_VAR 0 1
35702: PPUSH
35703: CALL_OW 477
35707: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
35708: LD_ADDR_VAR 0 10
35712: PUSH
35713: LD_VAR 0 1
35717: PPUSH
35718: CALL_OW 478
35722: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
35723: LD_VAR 0 9
35727: NOT
35728: PUSH
35729: LD_VAR 0 11
35733: NOT
35734: OR
35735: PUSH
35736: LD_VAR 0 12
35740: NOT
35741: OR
35742: PUSH
35743: LD_VAR 0 10
35747: NOT
35748: OR
35749: IFFALSE 35784
// begin result := [ chassis , engine , control , weapon ] ;
35751: LD_ADDR_VAR 0 6
35755: PUSH
35756: LD_VAR 0 2
35760: PUSH
35761: LD_VAR 0 3
35765: PUSH
35766: LD_VAR 0 4
35770: PUSH
35771: LD_VAR 0 5
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: ST_TO_ADDR
// exit ;
35782: GO 36075
// end ; if not chassis in _chassis then
35784: LD_VAR 0 2
35788: PUSH
35789: LD_VAR 0 9
35793: IN
35794: NOT
35795: IFFALSE 35821
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
35797: LD_ADDR_VAR 0 2
35801: PUSH
35802: LD_VAR 0 9
35806: PUSH
35807: LD_INT 1
35809: PPUSH
35810: LD_VAR 0 9
35814: PPUSH
35815: CALL_OW 12
35819: ARRAY
35820: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
35821: LD_VAR 0 2
35825: PPUSH
35826: LD_VAR 0 3
35830: PPUSH
35831: CALL 36080 0 2
35835: NOT
35836: IFFALSE 35895
// repeat engine := _engine [ 1 ] ;
35838: LD_ADDR_VAR 0 3
35842: PUSH
35843: LD_VAR 0 11
35847: PUSH
35848: LD_INT 1
35850: ARRAY
35851: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
35852: LD_ADDR_VAR 0 11
35856: PUSH
35857: LD_VAR 0 11
35861: PPUSH
35862: LD_INT 1
35864: PPUSH
35865: CALL_OW 3
35869: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
35870: LD_VAR 0 2
35874: PPUSH
35875: LD_VAR 0 3
35879: PPUSH
35880: CALL 36080 0 2
35884: PUSH
35885: LD_VAR 0 11
35889: PUSH
35890: EMPTY
35891: EQUAL
35892: OR
35893: IFFALSE 35838
// if not control in _control then
35895: LD_VAR 0 4
35899: PUSH
35900: LD_VAR 0 12
35904: IN
35905: NOT
35906: IFFALSE 35932
// control := _control [ rand ( 1 , _control ) ] ;
35908: LD_ADDR_VAR 0 4
35912: PUSH
35913: LD_VAR 0 12
35917: PUSH
35918: LD_INT 1
35920: PPUSH
35921: LD_VAR 0 12
35925: PPUSH
35926: CALL_OW 12
35930: ARRAY
35931: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
35932: LD_VAR 0 2
35936: PPUSH
35937: LD_VAR 0 5
35941: PPUSH
35942: CALL 36300 0 2
35946: NOT
35947: IFFALSE 36006
// repeat weapon := _weapon [ 1 ] ;
35949: LD_ADDR_VAR 0 5
35953: PUSH
35954: LD_VAR 0 10
35958: PUSH
35959: LD_INT 1
35961: ARRAY
35962: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
35963: LD_ADDR_VAR 0 10
35967: PUSH
35968: LD_VAR 0 10
35972: PPUSH
35973: LD_INT 1
35975: PPUSH
35976: CALL_OW 3
35980: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
35981: LD_VAR 0 2
35985: PPUSH
35986: LD_VAR 0 5
35990: PPUSH
35991: CALL 36300 0 2
35995: PUSH
35996: LD_VAR 0 10
36000: PUSH
36001: EMPTY
36002: EQUAL
36003: OR
36004: IFFALSE 35949
// result := [ ] ;
36006: LD_ADDR_VAR 0 6
36010: PUSH
36011: EMPTY
36012: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36013: LD_VAR 0 1
36017: PPUSH
36018: LD_VAR 0 2
36022: PPUSH
36023: LD_VAR 0 3
36027: PPUSH
36028: LD_VAR 0 4
36032: PPUSH
36033: LD_VAR 0 5
36037: PPUSH
36038: CALL_OW 448
36042: IFFALSE 36075
// result := [ chassis , engine , control , weapon ] ;
36044: LD_ADDR_VAR 0 6
36048: PUSH
36049: LD_VAR 0 2
36053: PUSH
36054: LD_VAR 0 3
36058: PUSH
36059: LD_VAR 0 4
36063: PUSH
36064: LD_VAR 0 5
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: ST_TO_ADDR
// end ;
36075: LD_VAR 0 6
36079: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
36080: LD_INT 0
36082: PPUSH
// if not chassis or not engine then
36083: LD_VAR 0 1
36087: NOT
36088: PUSH
36089: LD_VAR 0 2
36093: NOT
36094: OR
36095: IFFALSE 36099
// exit ;
36097: GO 36295
// case engine of engine_solar :
36099: LD_VAR 0 2
36103: PUSH
36104: LD_INT 2
36106: DOUBLE
36107: EQUAL
36108: IFTRUE 36112
36110: GO 36150
36112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
36113: LD_ADDR_VAR 0 3
36117: PUSH
36118: LD_INT 11
36120: PUSH
36121: LD_INT 12
36123: PUSH
36124: LD_INT 13
36126: PUSH
36127: LD_INT 14
36129: PUSH
36130: LD_INT 1
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: LD_INT 3
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: ST_TO_ADDR
36148: GO 36279
36150: LD_INT 1
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36220
36158: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
36159: LD_ADDR_VAR 0 3
36163: PUSH
36164: LD_INT 11
36166: PUSH
36167: LD_INT 12
36169: PUSH
36170: LD_INT 13
36172: PUSH
36173: LD_INT 14
36175: PUSH
36176: LD_INT 1
36178: PUSH
36179: LD_INT 2
36181: PUSH
36182: LD_INT 3
36184: PUSH
36185: LD_INT 4
36187: PUSH
36188: LD_INT 5
36190: PUSH
36191: LD_INT 21
36193: PUSH
36194: LD_INT 23
36196: PUSH
36197: LD_INT 22
36199: PUSH
36200: LD_INT 24
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: ST_TO_ADDR
36218: GO 36279
36220: LD_INT 3
36222: DOUBLE
36223: EQUAL
36224: IFTRUE 36228
36226: GO 36278
36228: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36229: LD_ADDR_VAR 0 3
36233: PUSH
36234: LD_INT 13
36236: PUSH
36237: LD_INT 14
36239: PUSH
36240: LD_INT 2
36242: PUSH
36243: LD_INT 3
36245: PUSH
36246: LD_INT 4
36248: PUSH
36249: LD_INT 5
36251: PUSH
36252: LD_INT 21
36254: PUSH
36255: LD_INT 22
36257: PUSH
36258: LD_INT 23
36260: PUSH
36261: LD_INT 24
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: ST_TO_ADDR
36276: GO 36279
36278: POP
// result := ( chassis in result ) ;
36279: LD_ADDR_VAR 0 3
36283: PUSH
36284: LD_VAR 0 1
36288: PUSH
36289: LD_VAR 0 3
36293: IN
36294: ST_TO_ADDR
// end ;
36295: LD_VAR 0 3
36299: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
36300: LD_INT 0
36302: PPUSH
// if not chassis or not weapon then
36303: LD_VAR 0 1
36307: NOT
36308: PUSH
36309: LD_VAR 0 2
36313: NOT
36314: OR
36315: IFFALSE 36319
// exit ;
36317: GO 37381
// case weapon of us_machine_gun :
36319: LD_VAR 0 2
36323: PUSH
36324: LD_INT 2
36326: DOUBLE
36327: EQUAL
36328: IFTRUE 36332
36330: GO 36362
36332: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
36333: LD_ADDR_VAR 0 3
36337: PUSH
36338: LD_INT 1
36340: PUSH
36341: LD_INT 2
36343: PUSH
36344: LD_INT 3
36346: PUSH
36347: LD_INT 4
36349: PUSH
36350: LD_INT 5
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: ST_TO_ADDR
36360: GO 37365
36362: LD_INT 3
36364: DOUBLE
36365: EQUAL
36366: IFTRUE 36370
36368: GO 36400
36370: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
36371: LD_ADDR_VAR 0 3
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 2
36381: PUSH
36382: LD_INT 3
36384: PUSH
36385: LD_INT 4
36387: PUSH
36388: LD_INT 5
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: ST_TO_ADDR
36398: GO 37365
36400: LD_INT 11
36402: DOUBLE
36403: EQUAL
36404: IFTRUE 36408
36406: GO 36438
36408: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
36409: LD_ADDR_VAR 0 3
36413: PUSH
36414: LD_INT 1
36416: PUSH
36417: LD_INT 2
36419: PUSH
36420: LD_INT 3
36422: PUSH
36423: LD_INT 4
36425: PUSH
36426: LD_INT 5
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: ST_TO_ADDR
36436: GO 37365
36438: LD_INT 4
36440: DOUBLE
36441: EQUAL
36442: IFTRUE 36446
36444: GO 36472
36446: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
36447: LD_ADDR_VAR 0 3
36451: PUSH
36452: LD_INT 2
36454: PUSH
36455: LD_INT 3
36457: PUSH
36458: LD_INT 4
36460: PUSH
36461: LD_INT 5
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: ST_TO_ADDR
36470: GO 37365
36472: LD_INT 5
36474: DOUBLE
36475: EQUAL
36476: IFTRUE 36480
36478: GO 36506
36480: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
36481: LD_ADDR_VAR 0 3
36485: PUSH
36486: LD_INT 2
36488: PUSH
36489: LD_INT 3
36491: PUSH
36492: LD_INT 4
36494: PUSH
36495: LD_INT 5
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: LIST
36502: LIST
36503: ST_TO_ADDR
36504: GO 37365
36506: LD_INT 9
36508: DOUBLE
36509: EQUAL
36510: IFTRUE 36514
36512: GO 36540
36514: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
36515: LD_ADDR_VAR 0 3
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: LD_INT 3
36525: PUSH
36526: LD_INT 4
36528: PUSH
36529: LD_INT 5
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: ST_TO_ADDR
36538: GO 37365
36540: LD_INT 7
36542: DOUBLE
36543: EQUAL
36544: IFTRUE 36548
36546: GO 36574
36548: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
36549: LD_ADDR_VAR 0 3
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: LD_INT 3
36559: PUSH
36560: LD_INT 4
36562: PUSH
36563: LD_INT 5
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: ST_TO_ADDR
36572: GO 37365
36574: LD_INT 12
36576: DOUBLE
36577: EQUAL
36578: IFTRUE 36582
36580: GO 36608
36582: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
36583: LD_ADDR_VAR 0 3
36587: PUSH
36588: LD_INT 2
36590: PUSH
36591: LD_INT 3
36593: PUSH
36594: LD_INT 4
36596: PUSH
36597: LD_INT 5
36599: PUSH
36600: EMPTY
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: ST_TO_ADDR
36606: GO 37365
36608: LD_INT 13
36610: DOUBLE
36611: EQUAL
36612: IFTRUE 36616
36614: GO 36642
36616: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
36617: LD_ADDR_VAR 0 3
36621: PUSH
36622: LD_INT 2
36624: PUSH
36625: LD_INT 3
36627: PUSH
36628: LD_INT 4
36630: PUSH
36631: LD_INT 5
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: ST_TO_ADDR
36640: GO 37365
36642: LD_INT 14
36644: DOUBLE
36645: EQUAL
36646: IFTRUE 36650
36648: GO 36668
36650: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
36651: LD_ADDR_VAR 0 3
36655: PUSH
36656: LD_INT 4
36658: PUSH
36659: LD_INT 5
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: ST_TO_ADDR
36666: GO 37365
36668: LD_INT 6
36670: DOUBLE
36671: EQUAL
36672: IFTRUE 36676
36674: GO 36694
36676: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
36677: LD_ADDR_VAR 0 3
36681: PUSH
36682: LD_INT 4
36684: PUSH
36685: LD_INT 5
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: ST_TO_ADDR
36692: GO 37365
36694: LD_INT 10
36696: DOUBLE
36697: EQUAL
36698: IFTRUE 36702
36700: GO 36720
36702: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
36703: LD_ADDR_VAR 0 3
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: LD_INT 5
36713: PUSH
36714: EMPTY
36715: LIST
36716: LIST
36717: ST_TO_ADDR
36718: GO 37365
36720: LD_INT 22
36722: DOUBLE
36723: EQUAL
36724: IFTRUE 36728
36726: GO 36754
36728: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
36729: LD_ADDR_VAR 0 3
36733: PUSH
36734: LD_INT 11
36736: PUSH
36737: LD_INT 12
36739: PUSH
36740: LD_INT 13
36742: PUSH
36743: LD_INT 14
36745: PUSH
36746: EMPTY
36747: LIST
36748: LIST
36749: LIST
36750: LIST
36751: ST_TO_ADDR
36752: GO 37365
36754: LD_INT 23
36756: DOUBLE
36757: EQUAL
36758: IFTRUE 36762
36760: GO 36788
36762: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
36763: LD_ADDR_VAR 0 3
36767: PUSH
36768: LD_INT 11
36770: PUSH
36771: LD_INT 12
36773: PUSH
36774: LD_INT 13
36776: PUSH
36777: LD_INT 14
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: ST_TO_ADDR
36786: GO 37365
36788: LD_INT 24
36790: DOUBLE
36791: EQUAL
36792: IFTRUE 36796
36794: GO 36822
36796: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
36797: LD_ADDR_VAR 0 3
36801: PUSH
36802: LD_INT 11
36804: PUSH
36805: LD_INT 12
36807: PUSH
36808: LD_INT 13
36810: PUSH
36811: LD_INT 14
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: ST_TO_ADDR
36820: GO 37365
36822: LD_INT 30
36824: DOUBLE
36825: EQUAL
36826: IFTRUE 36830
36828: GO 36856
36830: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
36831: LD_ADDR_VAR 0 3
36835: PUSH
36836: LD_INT 11
36838: PUSH
36839: LD_INT 12
36841: PUSH
36842: LD_INT 13
36844: PUSH
36845: LD_INT 14
36847: PUSH
36848: EMPTY
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: ST_TO_ADDR
36854: GO 37365
36856: LD_INT 25
36858: DOUBLE
36859: EQUAL
36860: IFTRUE 36864
36862: GO 36882
36864: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
36865: LD_ADDR_VAR 0 3
36869: PUSH
36870: LD_INT 13
36872: PUSH
36873: LD_INT 14
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: ST_TO_ADDR
36880: GO 37365
36882: LD_INT 27
36884: DOUBLE
36885: EQUAL
36886: IFTRUE 36890
36888: GO 36908
36890: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
36891: LD_ADDR_VAR 0 3
36895: PUSH
36896: LD_INT 13
36898: PUSH
36899: LD_INT 14
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: ST_TO_ADDR
36906: GO 37365
36908: LD_EXP 135
36912: DOUBLE
36913: EQUAL
36914: IFTRUE 36918
36916: GO 36944
36918: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
36919: LD_ADDR_VAR 0 3
36923: PUSH
36924: LD_INT 11
36926: PUSH
36927: LD_INT 12
36929: PUSH
36930: LD_INT 13
36932: PUSH
36933: LD_INT 14
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: ST_TO_ADDR
36942: GO 37365
36944: LD_INT 28
36946: DOUBLE
36947: EQUAL
36948: IFTRUE 36952
36950: GO 36970
36952: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
36953: LD_ADDR_VAR 0 3
36957: PUSH
36958: LD_INT 13
36960: PUSH
36961: LD_INT 14
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: ST_TO_ADDR
36968: GO 37365
36970: LD_INT 29
36972: DOUBLE
36973: EQUAL
36974: IFTRUE 36978
36976: GO 36996
36978: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
36979: LD_ADDR_VAR 0 3
36983: PUSH
36984: LD_INT 13
36986: PUSH
36987: LD_INT 14
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: ST_TO_ADDR
36994: GO 37365
36996: LD_INT 31
36998: DOUBLE
36999: EQUAL
37000: IFTRUE 37004
37002: GO 37022
37004: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
37005: LD_ADDR_VAR 0 3
37009: PUSH
37010: LD_INT 13
37012: PUSH
37013: LD_INT 14
37015: PUSH
37016: EMPTY
37017: LIST
37018: LIST
37019: ST_TO_ADDR
37020: GO 37365
37022: LD_INT 26
37024: DOUBLE
37025: EQUAL
37026: IFTRUE 37030
37028: GO 37048
37030: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
37031: LD_ADDR_VAR 0 3
37035: PUSH
37036: LD_INT 13
37038: PUSH
37039: LD_INT 14
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: ST_TO_ADDR
37046: GO 37365
37048: LD_INT 42
37050: DOUBLE
37051: EQUAL
37052: IFTRUE 37056
37054: GO 37082
37056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
37057: LD_ADDR_VAR 0 3
37061: PUSH
37062: LD_INT 21
37064: PUSH
37065: LD_INT 22
37067: PUSH
37068: LD_INT 23
37070: PUSH
37071: LD_INT 24
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: ST_TO_ADDR
37080: GO 37365
37082: LD_INT 43
37084: DOUBLE
37085: EQUAL
37086: IFTRUE 37090
37088: GO 37116
37090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
37091: LD_ADDR_VAR 0 3
37095: PUSH
37096: LD_INT 21
37098: PUSH
37099: LD_INT 22
37101: PUSH
37102: LD_INT 23
37104: PUSH
37105: LD_INT 24
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
37114: GO 37365
37116: LD_INT 44
37118: DOUBLE
37119: EQUAL
37120: IFTRUE 37124
37122: GO 37150
37124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
37125: LD_ADDR_VAR 0 3
37129: PUSH
37130: LD_INT 21
37132: PUSH
37133: LD_INT 22
37135: PUSH
37136: LD_INT 23
37138: PUSH
37139: LD_INT 24
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: ST_TO_ADDR
37148: GO 37365
37150: LD_INT 45
37152: DOUBLE
37153: EQUAL
37154: IFTRUE 37158
37156: GO 37184
37158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
37159: LD_ADDR_VAR 0 3
37163: PUSH
37164: LD_INT 21
37166: PUSH
37167: LD_INT 22
37169: PUSH
37170: LD_INT 23
37172: PUSH
37173: LD_INT 24
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: ST_TO_ADDR
37182: GO 37365
37184: LD_INT 49
37186: DOUBLE
37187: EQUAL
37188: IFTRUE 37192
37190: GO 37218
37192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
37193: LD_ADDR_VAR 0 3
37197: PUSH
37198: LD_INT 21
37200: PUSH
37201: LD_INT 22
37203: PUSH
37204: LD_INT 23
37206: PUSH
37207: LD_INT 24
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: LIST
37214: LIST
37215: ST_TO_ADDR
37216: GO 37365
37218: LD_INT 51
37220: DOUBLE
37221: EQUAL
37222: IFTRUE 37226
37224: GO 37252
37226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
37227: LD_ADDR_VAR 0 3
37231: PUSH
37232: LD_INT 21
37234: PUSH
37235: LD_INT 22
37237: PUSH
37238: LD_INT 23
37240: PUSH
37241: LD_INT 24
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: ST_TO_ADDR
37250: GO 37365
37252: LD_INT 52
37254: DOUBLE
37255: EQUAL
37256: IFTRUE 37260
37258: GO 37286
37260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
37261: LD_ADDR_VAR 0 3
37265: PUSH
37266: LD_INT 21
37268: PUSH
37269: LD_INT 22
37271: PUSH
37272: LD_INT 23
37274: PUSH
37275: LD_INT 24
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: ST_TO_ADDR
37284: GO 37365
37286: LD_INT 53
37288: DOUBLE
37289: EQUAL
37290: IFTRUE 37294
37292: GO 37312
37294: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
37295: LD_ADDR_VAR 0 3
37299: PUSH
37300: LD_INT 23
37302: PUSH
37303: LD_INT 24
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: ST_TO_ADDR
37310: GO 37365
37312: LD_INT 46
37314: DOUBLE
37315: EQUAL
37316: IFTRUE 37320
37318: GO 37338
37320: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
37321: LD_ADDR_VAR 0 3
37325: PUSH
37326: LD_INT 23
37328: PUSH
37329: LD_INT 24
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: ST_TO_ADDR
37336: GO 37365
37338: LD_INT 47
37340: DOUBLE
37341: EQUAL
37342: IFTRUE 37346
37344: GO 37364
37346: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37347: LD_ADDR_VAR 0 3
37351: PUSH
37352: LD_INT 23
37354: PUSH
37355: LD_INT 24
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: ST_TO_ADDR
37362: GO 37365
37364: POP
// result := ( chassis in result ) ;
37365: LD_ADDR_VAR 0 3
37369: PUSH
37370: LD_VAR 0 1
37374: PUSH
37375: LD_VAR 0 3
37379: IN
37380: ST_TO_ADDR
// end ;
37381: LD_VAR 0 3
37385: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
37386: LD_INT 0
37388: PPUSH
37389: PPUSH
37390: PPUSH
37391: PPUSH
37392: PPUSH
37393: PPUSH
37394: PPUSH
// result := array ;
37395: LD_ADDR_VAR 0 5
37399: PUSH
37400: LD_VAR 0 1
37404: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
37405: LD_VAR 0 1
37409: NOT
37410: PUSH
37411: LD_VAR 0 2
37415: NOT
37416: OR
37417: PUSH
37418: LD_VAR 0 3
37422: NOT
37423: OR
37424: PUSH
37425: LD_VAR 0 2
37429: PUSH
37430: LD_VAR 0 1
37434: GREATER
37435: OR
37436: PUSH
37437: LD_VAR 0 3
37441: PUSH
37442: LD_VAR 0 1
37446: GREATER
37447: OR
37448: IFFALSE 37452
// exit ;
37450: GO 37748
// if direction then
37452: LD_VAR 0 4
37456: IFFALSE 37520
// begin d := 1 ;
37458: LD_ADDR_VAR 0 9
37462: PUSH
37463: LD_INT 1
37465: ST_TO_ADDR
// if i_from > i_to then
37466: LD_VAR 0 2
37470: PUSH
37471: LD_VAR 0 3
37475: GREATER
37476: IFFALSE 37502
// length := ( array - i_from ) + i_to else
37478: LD_ADDR_VAR 0 11
37482: PUSH
37483: LD_VAR 0 1
37487: PUSH
37488: LD_VAR 0 2
37492: MINUS
37493: PUSH
37494: LD_VAR 0 3
37498: PLUS
37499: ST_TO_ADDR
37500: GO 37518
// length := i_to - i_from ;
37502: LD_ADDR_VAR 0 11
37506: PUSH
37507: LD_VAR 0 3
37511: PUSH
37512: LD_VAR 0 2
37516: MINUS
37517: ST_TO_ADDR
// end else
37518: GO 37581
// begin d := - 1 ;
37520: LD_ADDR_VAR 0 9
37524: PUSH
37525: LD_INT 1
37527: NEG
37528: ST_TO_ADDR
// if i_from > i_to then
37529: LD_VAR 0 2
37533: PUSH
37534: LD_VAR 0 3
37538: GREATER
37539: IFFALSE 37559
// length := i_from - i_to else
37541: LD_ADDR_VAR 0 11
37545: PUSH
37546: LD_VAR 0 2
37550: PUSH
37551: LD_VAR 0 3
37555: MINUS
37556: ST_TO_ADDR
37557: GO 37581
// length := ( array - i_to ) + i_from ;
37559: LD_ADDR_VAR 0 11
37563: PUSH
37564: LD_VAR 0 1
37568: PUSH
37569: LD_VAR 0 3
37573: MINUS
37574: PUSH
37575: LD_VAR 0 2
37579: PLUS
37580: ST_TO_ADDR
// end ; if not length then
37581: LD_VAR 0 11
37585: NOT
37586: IFFALSE 37590
// exit ;
37588: GO 37748
// tmp := array ;
37590: LD_ADDR_VAR 0 10
37594: PUSH
37595: LD_VAR 0 1
37599: ST_TO_ADDR
// for i = 1 to length do
37600: LD_ADDR_VAR 0 6
37604: PUSH
37605: DOUBLE
37606: LD_INT 1
37608: DEC
37609: ST_TO_ADDR
37610: LD_VAR 0 11
37614: PUSH
37615: FOR_TO
37616: IFFALSE 37736
// begin for j = 1 to array do
37618: LD_ADDR_VAR 0 7
37622: PUSH
37623: DOUBLE
37624: LD_INT 1
37626: DEC
37627: ST_TO_ADDR
37628: LD_VAR 0 1
37632: PUSH
37633: FOR_TO
37634: IFFALSE 37722
// begin k := j + d ;
37636: LD_ADDR_VAR 0 8
37640: PUSH
37641: LD_VAR 0 7
37645: PUSH
37646: LD_VAR 0 9
37650: PLUS
37651: ST_TO_ADDR
// if k > array then
37652: LD_VAR 0 8
37656: PUSH
37657: LD_VAR 0 1
37661: GREATER
37662: IFFALSE 37672
// k := 1 ;
37664: LD_ADDR_VAR 0 8
37668: PUSH
37669: LD_INT 1
37671: ST_TO_ADDR
// if not k then
37672: LD_VAR 0 8
37676: NOT
37677: IFFALSE 37689
// k := array ;
37679: LD_ADDR_VAR 0 8
37683: PUSH
37684: LD_VAR 0 1
37688: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
37689: LD_ADDR_VAR 0 10
37693: PUSH
37694: LD_VAR 0 10
37698: PPUSH
37699: LD_VAR 0 8
37703: PPUSH
37704: LD_VAR 0 1
37708: PUSH
37709: LD_VAR 0 7
37713: ARRAY
37714: PPUSH
37715: CALL_OW 1
37719: ST_TO_ADDR
// end ;
37720: GO 37633
37722: POP
37723: POP
// array := tmp ;
37724: LD_ADDR_VAR 0 1
37728: PUSH
37729: LD_VAR 0 10
37733: ST_TO_ADDR
// end ;
37734: GO 37615
37736: POP
37737: POP
// result := array ;
37738: LD_ADDR_VAR 0 5
37742: PUSH
37743: LD_VAR 0 1
37747: ST_TO_ADDR
// end ;
37748: LD_VAR 0 5
37752: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
37753: LD_INT 0
37755: PPUSH
37756: PPUSH
// result := 0 ;
37757: LD_ADDR_VAR 0 3
37761: PUSH
37762: LD_INT 0
37764: ST_TO_ADDR
// if not array or not value in array then
37765: LD_VAR 0 1
37769: NOT
37770: PUSH
37771: LD_VAR 0 2
37775: PUSH
37776: LD_VAR 0 1
37780: IN
37781: NOT
37782: OR
37783: IFFALSE 37787
// exit ;
37785: GO 37841
// for i = 1 to array do
37787: LD_ADDR_VAR 0 4
37791: PUSH
37792: DOUBLE
37793: LD_INT 1
37795: DEC
37796: ST_TO_ADDR
37797: LD_VAR 0 1
37801: PUSH
37802: FOR_TO
37803: IFFALSE 37839
// if value = array [ i ] then
37805: LD_VAR 0 2
37809: PUSH
37810: LD_VAR 0 1
37814: PUSH
37815: LD_VAR 0 4
37819: ARRAY
37820: EQUAL
37821: IFFALSE 37837
// begin result := i ;
37823: LD_ADDR_VAR 0 3
37827: PUSH
37828: LD_VAR 0 4
37832: ST_TO_ADDR
// exit ;
37833: POP
37834: POP
37835: GO 37841
// end ;
37837: GO 37802
37839: POP
37840: POP
// end ;
37841: LD_VAR 0 3
37845: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
37846: LD_INT 0
37848: PPUSH
// vc_chassis := chassis ;
37849: LD_ADDR_OWVAR 37
37853: PUSH
37854: LD_VAR 0 1
37858: ST_TO_ADDR
// vc_engine := engine ;
37859: LD_ADDR_OWVAR 39
37863: PUSH
37864: LD_VAR 0 2
37868: ST_TO_ADDR
// vc_control := control ;
37869: LD_ADDR_OWVAR 38
37873: PUSH
37874: LD_VAR 0 3
37878: ST_TO_ADDR
// vc_weapon := weapon ;
37879: LD_ADDR_OWVAR 40
37883: PUSH
37884: LD_VAR 0 4
37888: ST_TO_ADDR
// vc_fuel_battery := fuel ;
37889: LD_ADDR_OWVAR 41
37893: PUSH
37894: LD_VAR 0 5
37898: ST_TO_ADDR
// end ;
37899: LD_VAR 0 6
37903: RET
// export function WantPlant ( unit ) ; var task ; begin
37904: LD_INT 0
37906: PPUSH
37907: PPUSH
// result := false ;
37908: LD_ADDR_VAR 0 2
37912: PUSH
37913: LD_INT 0
37915: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
37916: LD_ADDR_VAR 0 3
37920: PUSH
37921: LD_VAR 0 1
37925: PPUSH
37926: CALL_OW 437
37930: ST_TO_ADDR
// if task then
37931: LD_VAR 0 3
37935: IFFALSE 37963
// if task [ 1 ] [ 1 ] = p then
37937: LD_VAR 0 3
37941: PUSH
37942: LD_INT 1
37944: ARRAY
37945: PUSH
37946: LD_INT 1
37948: ARRAY
37949: PUSH
37950: LD_STRING p
37952: EQUAL
37953: IFFALSE 37963
// result := true ;
37955: LD_ADDR_VAR 0 2
37959: PUSH
37960: LD_INT 1
37962: ST_TO_ADDR
// end ;
37963: LD_VAR 0 2
37967: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
37968: LD_INT 0
37970: PPUSH
37971: PPUSH
37972: PPUSH
37973: PPUSH
// if pos < 1 then
37974: LD_VAR 0 2
37978: PUSH
37979: LD_INT 1
37981: LESS
37982: IFFALSE 37986
// exit ;
37984: GO 38289
// if pos = 1 then
37986: LD_VAR 0 2
37990: PUSH
37991: LD_INT 1
37993: EQUAL
37994: IFFALSE 38027
// result := Replace ( arr , pos [ 1 ] , value ) else
37996: LD_ADDR_VAR 0 4
38000: PUSH
38001: LD_VAR 0 1
38005: PPUSH
38006: LD_VAR 0 2
38010: PUSH
38011: LD_INT 1
38013: ARRAY
38014: PPUSH
38015: LD_VAR 0 3
38019: PPUSH
38020: CALL_OW 1
38024: ST_TO_ADDR
38025: GO 38289
// begin tmp := arr ;
38027: LD_ADDR_VAR 0 6
38031: PUSH
38032: LD_VAR 0 1
38036: ST_TO_ADDR
// s_arr := [ tmp ] ;
38037: LD_ADDR_VAR 0 7
38041: PUSH
38042: LD_VAR 0 6
38046: PUSH
38047: EMPTY
38048: LIST
38049: ST_TO_ADDR
// for i = 1 to pos - 1 do
38050: LD_ADDR_VAR 0 5
38054: PUSH
38055: DOUBLE
38056: LD_INT 1
38058: DEC
38059: ST_TO_ADDR
38060: LD_VAR 0 2
38064: PUSH
38065: LD_INT 1
38067: MINUS
38068: PUSH
38069: FOR_TO
38070: IFFALSE 38115
// begin tmp := tmp [ pos [ i ] ] ;
38072: LD_ADDR_VAR 0 6
38076: PUSH
38077: LD_VAR 0 6
38081: PUSH
38082: LD_VAR 0 2
38086: PUSH
38087: LD_VAR 0 5
38091: ARRAY
38092: ARRAY
38093: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
38094: LD_ADDR_VAR 0 7
38098: PUSH
38099: LD_VAR 0 7
38103: PUSH
38104: LD_VAR 0 6
38108: PUSH
38109: EMPTY
38110: LIST
38111: ADD
38112: ST_TO_ADDR
// end ;
38113: GO 38069
38115: POP
38116: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
38117: LD_ADDR_VAR 0 6
38121: PUSH
38122: LD_VAR 0 6
38126: PPUSH
38127: LD_VAR 0 2
38131: PUSH
38132: LD_VAR 0 2
38136: ARRAY
38137: PPUSH
38138: LD_VAR 0 3
38142: PPUSH
38143: CALL_OW 1
38147: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
38148: LD_ADDR_VAR 0 7
38152: PUSH
38153: LD_VAR 0 7
38157: PPUSH
38158: LD_VAR 0 7
38162: PPUSH
38163: LD_VAR 0 6
38167: PPUSH
38168: CALL_OW 1
38172: ST_TO_ADDR
// for i = s_arr downto 2 do
38173: LD_ADDR_VAR 0 5
38177: PUSH
38178: DOUBLE
38179: LD_VAR 0 7
38183: INC
38184: ST_TO_ADDR
38185: LD_INT 2
38187: PUSH
38188: FOR_DOWNTO
38189: IFFALSE 38273
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
38191: LD_ADDR_VAR 0 6
38195: PUSH
38196: LD_VAR 0 7
38200: PUSH
38201: LD_VAR 0 5
38205: PUSH
38206: LD_INT 1
38208: MINUS
38209: ARRAY
38210: PPUSH
38211: LD_VAR 0 2
38215: PUSH
38216: LD_VAR 0 5
38220: PUSH
38221: LD_INT 1
38223: MINUS
38224: ARRAY
38225: PPUSH
38226: LD_VAR 0 7
38230: PUSH
38231: LD_VAR 0 5
38235: ARRAY
38236: PPUSH
38237: CALL_OW 1
38241: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
38242: LD_ADDR_VAR 0 7
38246: PUSH
38247: LD_VAR 0 7
38251: PPUSH
38252: LD_VAR 0 5
38256: PUSH
38257: LD_INT 1
38259: MINUS
38260: PPUSH
38261: LD_VAR 0 6
38265: PPUSH
38266: CALL_OW 1
38270: ST_TO_ADDR
// end ;
38271: GO 38188
38273: POP
38274: POP
// result := s_arr [ 1 ] ;
38275: LD_ADDR_VAR 0 4
38279: PUSH
38280: LD_VAR 0 7
38284: PUSH
38285: LD_INT 1
38287: ARRAY
38288: ST_TO_ADDR
// end ; end ;
38289: LD_VAR 0 4
38293: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
38294: LD_INT 0
38296: PPUSH
38297: PPUSH
// if not list then
38298: LD_VAR 0 1
38302: NOT
38303: IFFALSE 38307
// exit ;
38305: GO 38398
// i := list [ pos1 ] ;
38307: LD_ADDR_VAR 0 5
38311: PUSH
38312: LD_VAR 0 1
38316: PUSH
38317: LD_VAR 0 2
38321: ARRAY
38322: ST_TO_ADDR
// if not i then
38323: LD_VAR 0 5
38327: NOT
38328: IFFALSE 38332
// exit ;
38330: GO 38398
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
38332: LD_ADDR_VAR 0 1
38336: PUSH
38337: LD_VAR 0 1
38341: PPUSH
38342: LD_VAR 0 2
38346: PPUSH
38347: LD_VAR 0 1
38351: PUSH
38352: LD_VAR 0 3
38356: ARRAY
38357: PPUSH
38358: CALL_OW 1
38362: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
38363: LD_ADDR_VAR 0 1
38367: PUSH
38368: LD_VAR 0 1
38372: PPUSH
38373: LD_VAR 0 3
38377: PPUSH
38378: LD_VAR 0 5
38382: PPUSH
38383: CALL_OW 1
38387: ST_TO_ADDR
// result := list ;
38388: LD_ADDR_VAR 0 4
38392: PUSH
38393: LD_VAR 0 1
38397: ST_TO_ADDR
// end ;
38398: LD_VAR 0 4
38402: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
38403: LD_INT 0
38405: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
38406: LD_ADDR_VAR 0 5
38410: PUSH
38411: LD_VAR 0 1
38415: PPUSH
38416: CALL_OW 250
38420: PPUSH
38421: LD_VAR 0 1
38425: PPUSH
38426: CALL_OW 251
38430: PPUSH
38431: LD_VAR 0 2
38435: PPUSH
38436: LD_VAR 0 3
38440: PPUSH
38441: LD_VAR 0 4
38445: PPUSH
38446: CALL 38456 0 5
38450: ST_TO_ADDR
// end ;
38451: LD_VAR 0 5
38455: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
38456: LD_INT 0
38458: PPUSH
38459: PPUSH
38460: PPUSH
38461: PPUSH
// if not list then
38462: LD_VAR 0 3
38466: NOT
38467: IFFALSE 38471
// exit ;
38469: GO 38859
// result := [ ] ;
38471: LD_ADDR_VAR 0 6
38475: PUSH
38476: EMPTY
38477: ST_TO_ADDR
// for i in list do
38478: LD_ADDR_VAR 0 7
38482: PUSH
38483: LD_VAR 0 3
38487: PUSH
38488: FOR_IN
38489: IFFALSE 38691
// begin tmp := GetDistUnitXY ( i , x , y ) ;
38491: LD_ADDR_VAR 0 9
38495: PUSH
38496: LD_VAR 0 7
38500: PPUSH
38501: LD_VAR 0 1
38505: PPUSH
38506: LD_VAR 0 2
38510: PPUSH
38511: CALL_OW 297
38515: ST_TO_ADDR
// if not result then
38516: LD_VAR 0 6
38520: NOT
38521: IFFALSE 38547
// result := [ [ i , tmp ] ] else
38523: LD_ADDR_VAR 0 6
38527: PUSH
38528: LD_VAR 0 7
38532: PUSH
38533: LD_VAR 0 9
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: EMPTY
38543: LIST
38544: ST_TO_ADDR
38545: GO 38689
// begin if result [ result ] [ 2 ] < tmp then
38547: LD_VAR 0 6
38551: PUSH
38552: LD_VAR 0 6
38556: ARRAY
38557: PUSH
38558: LD_INT 2
38560: ARRAY
38561: PUSH
38562: LD_VAR 0 9
38566: LESS
38567: IFFALSE 38609
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
38569: LD_ADDR_VAR 0 6
38573: PUSH
38574: LD_VAR 0 6
38578: PPUSH
38579: LD_VAR 0 6
38583: PUSH
38584: LD_INT 1
38586: PLUS
38587: PPUSH
38588: LD_VAR 0 7
38592: PUSH
38593: LD_VAR 0 9
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PPUSH
38602: CALL_OW 2
38606: ST_TO_ADDR
38607: GO 38689
// for j = 1 to result do
38609: LD_ADDR_VAR 0 8
38613: PUSH
38614: DOUBLE
38615: LD_INT 1
38617: DEC
38618: ST_TO_ADDR
38619: LD_VAR 0 6
38623: PUSH
38624: FOR_TO
38625: IFFALSE 38687
// begin if tmp < result [ j ] [ 2 ] then
38627: LD_VAR 0 9
38631: PUSH
38632: LD_VAR 0 6
38636: PUSH
38637: LD_VAR 0 8
38641: ARRAY
38642: PUSH
38643: LD_INT 2
38645: ARRAY
38646: LESS
38647: IFFALSE 38685
// begin result := Insert ( result , j , [ i , tmp ] ) ;
38649: LD_ADDR_VAR 0 6
38653: PUSH
38654: LD_VAR 0 6
38658: PPUSH
38659: LD_VAR 0 8
38663: PPUSH
38664: LD_VAR 0 7
38668: PUSH
38669: LD_VAR 0 9
38673: PUSH
38674: EMPTY
38675: LIST
38676: LIST
38677: PPUSH
38678: CALL_OW 2
38682: ST_TO_ADDR
// break ;
38683: GO 38687
// end ; end ;
38685: GO 38624
38687: POP
38688: POP
// end ; end ;
38689: GO 38488
38691: POP
38692: POP
// if result and not asc then
38693: LD_VAR 0 6
38697: PUSH
38698: LD_VAR 0 4
38702: NOT
38703: AND
38704: IFFALSE 38779
// begin tmp := result ;
38706: LD_ADDR_VAR 0 9
38710: PUSH
38711: LD_VAR 0 6
38715: ST_TO_ADDR
// for i = tmp downto 1 do
38716: LD_ADDR_VAR 0 7
38720: PUSH
38721: DOUBLE
38722: LD_VAR 0 9
38726: INC
38727: ST_TO_ADDR
38728: LD_INT 1
38730: PUSH
38731: FOR_DOWNTO
38732: IFFALSE 38777
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
38734: LD_ADDR_VAR 0 6
38738: PUSH
38739: LD_VAR 0 6
38743: PPUSH
38744: LD_VAR 0 9
38748: PUSH
38749: LD_VAR 0 7
38753: MINUS
38754: PUSH
38755: LD_INT 1
38757: PLUS
38758: PPUSH
38759: LD_VAR 0 9
38763: PUSH
38764: LD_VAR 0 7
38768: ARRAY
38769: PPUSH
38770: CALL_OW 1
38774: ST_TO_ADDR
38775: GO 38731
38777: POP
38778: POP
// end ; tmp := [ ] ;
38779: LD_ADDR_VAR 0 9
38783: PUSH
38784: EMPTY
38785: ST_TO_ADDR
// if mode then
38786: LD_VAR 0 5
38790: IFFALSE 38859
// begin for i = 1 to result do
38792: LD_ADDR_VAR 0 7
38796: PUSH
38797: DOUBLE
38798: LD_INT 1
38800: DEC
38801: ST_TO_ADDR
38802: LD_VAR 0 6
38806: PUSH
38807: FOR_TO
38808: IFFALSE 38847
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
38810: LD_ADDR_VAR 0 9
38814: PUSH
38815: LD_VAR 0 9
38819: PPUSH
38820: LD_VAR 0 7
38824: PPUSH
38825: LD_VAR 0 6
38829: PUSH
38830: LD_VAR 0 7
38834: ARRAY
38835: PUSH
38836: LD_INT 1
38838: ARRAY
38839: PPUSH
38840: CALL_OW 1
38844: ST_TO_ADDR
38845: GO 38807
38847: POP
38848: POP
// result := tmp ;
38849: LD_ADDR_VAR 0 6
38853: PUSH
38854: LD_VAR 0 9
38858: ST_TO_ADDR
// end ; end ;
38859: LD_VAR 0 6
38863: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
38864: LD_INT 0
38866: PPUSH
38867: PPUSH
38868: PPUSH
38869: PPUSH
38870: PPUSH
38871: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
38872: LD_ADDR_VAR 0 5
38876: PUSH
38877: LD_INT 0
38879: PUSH
38880: LD_INT 0
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: EMPTY
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: ST_TO_ADDR
// if not x or not y then
38894: LD_VAR 0 2
38898: NOT
38899: PUSH
38900: LD_VAR 0 3
38904: NOT
38905: OR
38906: IFFALSE 38910
// exit ;
38908: GO 40562
// if not range then
38910: LD_VAR 0 4
38914: NOT
38915: IFFALSE 38925
// range := 10 ;
38917: LD_ADDR_VAR 0 4
38921: PUSH
38922: LD_INT 10
38924: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
38925: LD_ADDR_VAR 0 8
38929: PUSH
38930: LD_INT 81
38932: PUSH
38933: LD_VAR 0 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 92
38944: PUSH
38945: LD_VAR 0 2
38949: PUSH
38950: LD_VAR 0 3
38954: PUSH
38955: LD_VAR 0 4
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 3
38968: PUSH
38969: LD_INT 21
38971: PUSH
38972: LD_INT 3
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: PPUSH
38988: CALL_OW 69
38992: ST_TO_ADDR
// if not tmp then
38993: LD_VAR 0 8
38997: NOT
38998: IFFALSE 39002
// exit ;
39000: GO 40562
// for i in tmp do
39002: LD_ADDR_VAR 0 6
39006: PUSH
39007: LD_VAR 0 8
39011: PUSH
39012: FOR_IN
39013: IFFALSE 40537
// begin points := [ 0 , 0 , 0 ] ;
39015: LD_ADDR_VAR 0 9
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: LD_INT 0
39025: PUSH
39026: LD_INT 0
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: LIST
39033: ST_TO_ADDR
// bpoints := 1 ;
39034: LD_ADDR_VAR 0 10
39038: PUSH
39039: LD_INT 1
39041: ST_TO_ADDR
// case GetType ( i ) of unit_human :
39042: LD_VAR 0 6
39046: PPUSH
39047: CALL_OW 247
39051: PUSH
39052: LD_INT 1
39054: DOUBLE
39055: EQUAL
39056: IFTRUE 39060
39058: GO 39638
39060: POP
// begin if GetClass ( i ) = 1 then
39061: LD_VAR 0 6
39065: PPUSH
39066: CALL_OW 257
39070: PUSH
39071: LD_INT 1
39073: EQUAL
39074: IFFALSE 39095
// points := [ 10 , 5 , 3 ] ;
39076: LD_ADDR_VAR 0 9
39080: PUSH
39081: LD_INT 10
39083: PUSH
39084: LD_INT 5
39086: PUSH
39087: LD_INT 3
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: LIST
39094: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
39095: LD_VAR 0 6
39099: PPUSH
39100: CALL_OW 257
39104: PUSH
39105: LD_INT 2
39107: PUSH
39108: LD_INT 3
39110: PUSH
39111: LD_INT 4
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: LIST
39118: IN
39119: IFFALSE 39140
// points := [ 3 , 2 , 1 ] ;
39121: LD_ADDR_VAR 0 9
39125: PUSH
39126: LD_INT 3
39128: PUSH
39129: LD_INT 2
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// if GetClass ( i ) = 5 then
39140: LD_VAR 0 6
39144: PPUSH
39145: CALL_OW 257
39149: PUSH
39150: LD_INT 5
39152: EQUAL
39153: IFFALSE 39174
// points := [ 130 , 5 , 2 ] ;
39155: LD_ADDR_VAR 0 9
39159: PUSH
39160: LD_INT 130
39162: PUSH
39163: LD_INT 5
39165: PUSH
39166: LD_INT 2
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: LIST
39173: ST_TO_ADDR
// if GetClass ( i ) = 8 then
39174: LD_VAR 0 6
39178: PPUSH
39179: CALL_OW 257
39183: PUSH
39184: LD_INT 8
39186: EQUAL
39187: IFFALSE 39208
// points := [ 35 , 35 , 30 ] ;
39189: LD_ADDR_VAR 0 9
39193: PUSH
39194: LD_INT 35
39196: PUSH
39197: LD_INT 35
39199: PUSH
39200: LD_INT 30
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: LIST
39207: ST_TO_ADDR
// if GetClass ( i ) = 9 then
39208: LD_VAR 0 6
39212: PPUSH
39213: CALL_OW 257
39217: PUSH
39218: LD_INT 9
39220: EQUAL
39221: IFFALSE 39242
// points := [ 20 , 55 , 40 ] ;
39223: LD_ADDR_VAR 0 9
39227: PUSH
39228: LD_INT 20
39230: PUSH
39231: LD_INT 55
39233: PUSH
39234: LD_INT 40
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: LIST
39241: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
39242: LD_VAR 0 6
39246: PPUSH
39247: CALL_OW 257
39251: PUSH
39252: LD_INT 12
39254: PUSH
39255: LD_INT 16
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: IN
39262: IFFALSE 39283
// points := [ 5 , 3 , 2 ] ;
39264: LD_ADDR_VAR 0 9
39268: PUSH
39269: LD_INT 5
39271: PUSH
39272: LD_INT 3
39274: PUSH
39275: LD_INT 2
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: LIST
39282: ST_TO_ADDR
// if GetClass ( i ) = 17 then
39283: LD_VAR 0 6
39287: PPUSH
39288: CALL_OW 257
39292: PUSH
39293: LD_INT 17
39295: EQUAL
39296: IFFALSE 39317
// points := [ 100 , 50 , 75 ] ;
39298: LD_ADDR_VAR 0 9
39302: PUSH
39303: LD_INT 100
39305: PUSH
39306: LD_INT 50
39308: PUSH
39309: LD_INT 75
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: LIST
39316: ST_TO_ADDR
// if GetClass ( i ) = 15 then
39317: LD_VAR 0 6
39321: PPUSH
39322: CALL_OW 257
39326: PUSH
39327: LD_INT 15
39329: EQUAL
39330: IFFALSE 39351
// points := [ 10 , 5 , 3 ] ;
39332: LD_ADDR_VAR 0 9
39336: PUSH
39337: LD_INT 10
39339: PUSH
39340: LD_INT 5
39342: PUSH
39343: LD_INT 3
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: LIST
39350: ST_TO_ADDR
// if GetClass ( i ) = 14 then
39351: LD_VAR 0 6
39355: PPUSH
39356: CALL_OW 257
39360: PUSH
39361: LD_INT 14
39363: EQUAL
39364: IFFALSE 39385
// points := [ 10 , 0 , 0 ] ;
39366: LD_ADDR_VAR 0 9
39370: PUSH
39371: LD_INT 10
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: EMPTY
39381: LIST
39382: LIST
39383: LIST
39384: ST_TO_ADDR
// if GetClass ( i ) = 11 then
39385: LD_VAR 0 6
39389: PPUSH
39390: CALL_OW 257
39394: PUSH
39395: LD_INT 11
39397: EQUAL
39398: IFFALSE 39419
// points := [ 30 , 10 , 5 ] ;
39400: LD_ADDR_VAR 0 9
39404: PUSH
39405: LD_INT 30
39407: PUSH
39408: LD_INT 10
39410: PUSH
39411: LD_INT 5
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: LIST
39418: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
39419: LD_VAR 0 1
39423: PPUSH
39424: LD_INT 5
39426: PPUSH
39427: CALL_OW 321
39431: PUSH
39432: LD_INT 2
39434: EQUAL
39435: IFFALSE 39452
// bpoints := bpoints * 1.8 ;
39437: LD_ADDR_VAR 0 10
39441: PUSH
39442: LD_VAR 0 10
39446: PUSH
39447: LD_REAL  1.80000000000000E+0000
39450: MUL
39451: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
39452: LD_VAR 0 6
39456: PPUSH
39457: CALL_OW 257
39461: PUSH
39462: LD_INT 1
39464: PUSH
39465: LD_INT 2
39467: PUSH
39468: LD_INT 3
39470: PUSH
39471: LD_INT 4
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: IN
39480: PUSH
39481: LD_VAR 0 1
39485: PPUSH
39486: LD_INT 51
39488: PPUSH
39489: CALL_OW 321
39493: PUSH
39494: LD_INT 2
39496: EQUAL
39497: AND
39498: IFFALSE 39515
// bpoints := bpoints * 1.2 ;
39500: LD_ADDR_VAR 0 10
39504: PUSH
39505: LD_VAR 0 10
39509: PUSH
39510: LD_REAL  1.20000000000000E+0000
39513: MUL
39514: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
39515: LD_VAR 0 6
39519: PPUSH
39520: CALL_OW 257
39524: PUSH
39525: LD_INT 5
39527: PUSH
39528: LD_INT 7
39530: PUSH
39531: LD_INT 9
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: LIST
39538: IN
39539: PUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: LD_INT 52
39547: PPUSH
39548: CALL_OW 321
39552: PUSH
39553: LD_INT 2
39555: EQUAL
39556: AND
39557: IFFALSE 39574
// bpoints := bpoints * 1.5 ;
39559: LD_ADDR_VAR 0 10
39563: PUSH
39564: LD_VAR 0 10
39568: PUSH
39569: LD_REAL  1.50000000000000E+0000
39572: MUL
39573: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
39574: LD_VAR 0 1
39578: PPUSH
39579: LD_INT 66
39581: PPUSH
39582: CALL_OW 321
39586: PUSH
39587: LD_INT 2
39589: EQUAL
39590: IFFALSE 39607
// bpoints := bpoints * 1.1 ;
39592: LD_ADDR_VAR 0 10
39596: PUSH
39597: LD_VAR 0 10
39601: PUSH
39602: LD_REAL  1.10000000000000E+0000
39605: MUL
39606: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
39607: LD_ADDR_VAR 0 10
39611: PUSH
39612: LD_VAR 0 10
39616: PUSH
39617: LD_VAR 0 6
39621: PPUSH
39622: LD_INT 1
39624: PPUSH
39625: CALL_OW 259
39629: PUSH
39630: LD_REAL  1.15000000000000E+0000
39633: MUL
39634: MUL
39635: ST_TO_ADDR
// end ; unit_vehicle :
39636: GO 40466
39638: LD_INT 2
39640: DOUBLE
39641: EQUAL
39642: IFTRUE 39646
39644: GO 40454
39646: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
39647: LD_VAR 0 6
39651: PPUSH
39652: CALL_OW 264
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: LD_INT 42
39662: PUSH
39663: LD_INT 24
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: LIST
39670: IN
39671: IFFALSE 39692
// points := [ 25 , 5 , 3 ] ;
39673: LD_ADDR_VAR 0 9
39677: PUSH
39678: LD_INT 25
39680: PUSH
39681: LD_INT 5
39683: PUSH
39684: LD_INT 3
39686: PUSH
39687: EMPTY
39688: LIST
39689: LIST
39690: LIST
39691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
39692: LD_VAR 0 6
39696: PPUSH
39697: CALL_OW 264
39701: PUSH
39702: LD_INT 4
39704: PUSH
39705: LD_INT 43
39707: PUSH
39708: LD_INT 25
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: LIST
39715: IN
39716: IFFALSE 39737
// points := [ 40 , 15 , 5 ] ;
39718: LD_ADDR_VAR 0 9
39722: PUSH
39723: LD_INT 40
39725: PUSH
39726: LD_INT 15
39728: PUSH
39729: LD_INT 5
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: LIST
39736: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
39737: LD_VAR 0 6
39741: PPUSH
39742: CALL_OW 264
39746: PUSH
39747: LD_INT 3
39749: PUSH
39750: LD_INT 23
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: IN
39757: IFFALSE 39778
// points := [ 7 , 25 , 8 ] ;
39759: LD_ADDR_VAR 0 9
39763: PUSH
39764: LD_INT 7
39766: PUSH
39767: LD_INT 25
39769: PUSH
39770: LD_INT 8
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: LIST
39777: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
39778: LD_VAR 0 6
39782: PPUSH
39783: CALL_OW 264
39787: PUSH
39788: LD_INT 5
39790: PUSH
39791: LD_INT 27
39793: PUSH
39794: LD_INT 44
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: LIST
39801: IN
39802: IFFALSE 39823
// points := [ 14 , 50 , 16 ] ;
39804: LD_ADDR_VAR 0 9
39808: PUSH
39809: LD_INT 14
39811: PUSH
39812: LD_INT 50
39814: PUSH
39815: LD_INT 16
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
39823: LD_VAR 0 6
39827: PPUSH
39828: CALL_OW 264
39832: PUSH
39833: LD_INT 6
39835: PUSH
39836: LD_INT 46
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: IN
39843: IFFALSE 39864
// points := [ 32 , 120 , 70 ] ;
39845: LD_ADDR_VAR 0 9
39849: PUSH
39850: LD_INT 32
39852: PUSH
39853: LD_INT 120
39855: PUSH
39856: LD_INT 70
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
39864: LD_VAR 0 6
39868: PPUSH
39869: CALL_OW 264
39873: PUSH
39874: LD_INT 7
39876: PUSH
39877: LD_INT 28
39879: PUSH
39880: LD_INT 45
39882: PUSH
39883: LD_EXP 135
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: IN
39894: IFFALSE 39915
// points := [ 35 , 20 , 45 ] ;
39896: LD_ADDR_VAR 0 9
39900: PUSH
39901: LD_INT 35
39903: PUSH
39904: LD_INT 20
39906: PUSH
39907: LD_INT 45
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: LIST
39914: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
39915: LD_VAR 0 6
39919: PPUSH
39920: CALL_OW 264
39924: PUSH
39925: LD_INT 47
39927: PUSH
39928: EMPTY
39929: LIST
39930: IN
39931: IFFALSE 39952
// points := [ 67 , 45 , 75 ] ;
39933: LD_ADDR_VAR 0 9
39937: PUSH
39938: LD_INT 67
39940: PUSH
39941: LD_INT 45
39943: PUSH
39944: LD_INT 75
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: LIST
39951: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
39952: LD_VAR 0 6
39956: PPUSH
39957: CALL_OW 264
39961: PUSH
39962: LD_INT 26
39964: PUSH
39965: EMPTY
39966: LIST
39967: IN
39968: IFFALSE 39989
// points := [ 120 , 30 , 80 ] ;
39970: LD_ADDR_VAR 0 9
39974: PUSH
39975: LD_INT 120
39977: PUSH
39978: LD_INT 30
39980: PUSH
39981: LD_INT 80
39983: PUSH
39984: EMPTY
39985: LIST
39986: LIST
39987: LIST
39988: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
39989: LD_VAR 0 6
39993: PPUSH
39994: CALL_OW 264
39998: PUSH
39999: LD_INT 22
40001: PUSH
40002: EMPTY
40003: LIST
40004: IN
40005: IFFALSE 40026
// points := [ 40 , 1 , 1 ] ;
40007: LD_ADDR_VAR 0 9
40011: PUSH
40012: LD_INT 40
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: LIST
40025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
40026: LD_VAR 0 6
40030: PPUSH
40031: CALL_OW 264
40035: PUSH
40036: LD_INT 29
40038: PUSH
40039: EMPTY
40040: LIST
40041: IN
40042: IFFALSE 40063
// points := [ 70 , 200 , 400 ] ;
40044: LD_ADDR_VAR 0 9
40048: PUSH
40049: LD_INT 70
40051: PUSH
40052: LD_INT 200
40054: PUSH
40055: LD_INT 400
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: LIST
40062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
40063: LD_VAR 0 6
40067: PPUSH
40068: CALL_OW 264
40072: PUSH
40073: LD_INT 14
40075: PUSH
40076: LD_INT 53
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: IN
40083: IFFALSE 40104
// points := [ 40 , 10 , 20 ] ;
40085: LD_ADDR_VAR 0 9
40089: PUSH
40090: LD_INT 40
40092: PUSH
40093: LD_INT 10
40095: PUSH
40096: LD_INT 20
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: LIST
40103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
40104: LD_VAR 0 6
40108: PPUSH
40109: CALL_OW 264
40113: PUSH
40114: LD_INT 9
40116: PUSH
40117: EMPTY
40118: LIST
40119: IN
40120: IFFALSE 40141
// points := [ 5 , 70 , 20 ] ;
40122: LD_ADDR_VAR 0 9
40126: PUSH
40127: LD_INT 5
40129: PUSH
40130: LD_INT 70
40132: PUSH
40133: LD_INT 20
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: LIST
40140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
40141: LD_VAR 0 6
40145: PPUSH
40146: CALL_OW 264
40150: PUSH
40151: LD_INT 10
40153: PUSH
40154: EMPTY
40155: LIST
40156: IN
40157: IFFALSE 40178
// points := [ 35 , 110 , 70 ] ;
40159: LD_ADDR_VAR 0 9
40163: PUSH
40164: LD_INT 35
40166: PUSH
40167: LD_INT 110
40169: PUSH
40170: LD_INT 70
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: LIST
40177: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
40178: LD_VAR 0 6
40182: PPUSH
40183: CALL_OW 265
40187: PUSH
40188: LD_INT 25
40190: EQUAL
40191: IFFALSE 40212
// points := [ 80 , 65 , 100 ] ;
40193: LD_ADDR_VAR 0 9
40197: PUSH
40198: LD_INT 80
40200: PUSH
40201: LD_INT 65
40203: PUSH
40204: LD_INT 100
40206: PUSH
40207: EMPTY
40208: LIST
40209: LIST
40210: LIST
40211: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
40212: LD_VAR 0 6
40216: PPUSH
40217: CALL_OW 263
40221: PUSH
40222: LD_INT 1
40224: EQUAL
40225: IFFALSE 40260
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
40227: LD_ADDR_VAR 0 10
40231: PUSH
40232: LD_VAR 0 10
40236: PUSH
40237: LD_VAR 0 6
40241: PPUSH
40242: CALL_OW 311
40246: PPUSH
40247: LD_INT 3
40249: PPUSH
40250: CALL_OW 259
40254: PUSH
40255: LD_INT 4
40257: MUL
40258: MUL
40259: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
40260: LD_VAR 0 6
40264: PPUSH
40265: CALL_OW 263
40269: PUSH
40270: LD_INT 2
40272: EQUAL
40273: IFFALSE 40324
// begin j := IsControledBy ( i ) ;
40275: LD_ADDR_VAR 0 7
40279: PUSH
40280: LD_VAR 0 6
40284: PPUSH
40285: CALL_OW 312
40289: ST_TO_ADDR
// if j then
40290: LD_VAR 0 7
40294: IFFALSE 40324
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
40296: LD_ADDR_VAR 0 10
40300: PUSH
40301: LD_VAR 0 10
40305: PUSH
40306: LD_VAR 0 7
40310: PPUSH
40311: LD_INT 3
40313: PPUSH
40314: CALL_OW 259
40318: PUSH
40319: LD_INT 3
40321: MUL
40322: MUL
40323: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
40324: LD_VAR 0 6
40328: PPUSH
40329: CALL_OW 264
40333: PUSH
40334: LD_INT 5
40336: PUSH
40337: LD_INT 6
40339: PUSH
40340: LD_INT 46
40342: PUSH
40343: LD_INT 44
40345: PUSH
40346: LD_INT 47
40348: PUSH
40349: LD_INT 45
40351: PUSH
40352: LD_INT 28
40354: PUSH
40355: LD_INT 7
40357: PUSH
40358: LD_INT 27
40360: PUSH
40361: LD_INT 29
40363: PUSH
40364: EMPTY
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: IN
40376: PUSH
40377: LD_VAR 0 1
40381: PPUSH
40382: LD_INT 52
40384: PPUSH
40385: CALL_OW 321
40389: PUSH
40390: LD_INT 2
40392: EQUAL
40393: AND
40394: IFFALSE 40411
// bpoints := bpoints * 1.2 ;
40396: LD_ADDR_VAR 0 10
40400: PUSH
40401: LD_VAR 0 10
40405: PUSH
40406: LD_REAL  1.20000000000000E+0000
40409: MUL
40410: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
40411: LD_VAR 0 6
40415: PPUSH
40416: CALL_OW 264
40420: PUSH
40421: LD_INT 6
40423: PUSH
40424: LD_INT 46
40426: PUSH
40427: LD_INT 47
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: LIST
40434: IN
40435: IFFALSE 40452
// bpoints := bpoints * 1.2 ;
40437: LD_ADDR_VAR 0 10
40441: PUSH
40442: LD_VAR 0 10
40446: PUSH
40447: LD_REAL  1.20000000000000E+0000
40450: MUL
40451: ST_TO_ADDR
// end ; unit_building :
40452: GO 40466
40454: LD_INT 3
40456: DOUBLE
40457: EQUAL
40458: IFTRUE 40462
40460: GO 40465
40462: POP
// ; end ;
40463: GO 40466
40465: POP
// for j = 1 to 3 do
40466: LD_ADDR_VAR 0 7
40470: PUSH
40471: DOUBLE
40472: LD_INT 1
40474: DEC
40475: ST_TO_ADDR
40476: LD_INT 3
40478: PUSH
40479: FOR_TO
40480: IFFALSE 40533
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
40482: LD_ADDR_VAR 0 5
40486: PUSH
40487: LD_VAR 0 5
40491: PPUSH
40492: LD_VAR 0 7
40496: PPUSH
40497: LD_VAR 0 5
40501: PUSH
40502: LD_VAR 0 7
40506: ARRAY
40507: PUSH
40508: LD_VAR 0 9
40512: PUSH
40513: LD_VAR 0 7
40517: ARRAY
40518: PUSH
40519: LD_VAR 0 10
40523: MUL
40524: PLUS
40525: PPUSH
40526: CALL_OW 1
40530: ST_TO_ADDR
40531: GO 40479
40533: POP
40534: POP
// end ;
40535: GO 39012
40537: POP
40538: POP
// result := Replace ( result , 4 , tmp ) ;
40539: LD_ADDR_VAR 0 5
40543: PUSH
40544: LD_VAR 0 5
40548: PPUSH
40549: LD_INT 4
40551: PPUSH
40552: LD_VAR 0 8
40556: PPUSH
40557: CALL_OW 1
40561: ST_TO_ADDR
// end ;
40562: LD_VAR 0 5
40566: RET
// export function DangerAtRange ( unit , range ) ; begin
40567: LD_INT 0
40569: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
40570: LD_ADDR_VAR 0 3
40574: PUSH
40575: LD_VAR 0 1
40579: PPUSH
40580: CALL_OW 255
40584: PPUSH
40585: LD_VAR 0 1
40589: PPUSH
40590: CALL_OW 250
40594: PPUSH
40595: LD_VAR 0 1
40599: PPUSH
40600: CALL_OW 251
40604: PPUSH
40605: LD_VAR 0 2
40609: PPUSH
40610: CALL 38864 0 4
40614: ST_TO_ADDR
// end ;
40615: LD_VAR 0 3
40619: RET
// export function DangerInArea ( side , area ) ; begin
40620: LD_INT 0
40622: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
40623: LD_ADDR_VAR 0 3
40627: PUSH
40628: LD_VAR 0 2
40632: PPUSH
40633: LD_INT 81
40635: PUSH
40636: LD_VAR 0 1
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PPUSH
40645: CALL_OW 70
40649: ST_TO_ADDR
// end ;
40650: LD_VAR 0 3
40654: RET
// export function IsExtension ( b ) ; begin
40655: LD_INT 0
40657: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
40658: LD_ADDR_VAR 0 2
40662: PUSH
40663: LD_VAR 0 1
40667: PUSH
40668: LD_INT 23
40670: PUSH
40671: LD_INT 20
40673: PUSH
40674: LD_INT 22
40676: PUSH
40677: LD_INT 17
40679: PUSH
40680: LD_INT 24
40682: PUSH
40683: LD_INT 21
40685: PUSH
40686: LD_INT 19
40688: PUSH
40689: LD_INT 16
40691: PUSH
40692: LD_INT 25
40694: PUSH
40695: LD_INT 18
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: IN
40710: ST_TO_ADDR
// end ;
40711: LD_VAR 0 2
40715: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
40716: LD_INT 0
40718: PPUSH
40719: PPUSH
40720: PPUSH
// result := [ ] ;
40721: LD_ADDR_VAR 0 4
40725: PUSH
40726: EMPTY
40727: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
40728: LD_ADDR_VAR 0 5
40732: PUSH
40733: LD_VAR 0 2
40737: PPUSH
40738: LD_INT 21
40740: PUSH
40741: LD_INT 3
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PPUSH
40748: CALL_OW 70
40752: ST_TO_ADDR
// if not tmp then
40753: LD_VAR 0 5
40757: NOT
40758: IFFALSE 40762
// exit ;
40760: GO 40826
// if checkLink then
40762: LD_VAR 0 3
40766: IFFALSE 40816
// begin for i in tmp do
40768: LD_ADDR_VAR 0 6
40772: PUSH
40773: LD_VAR 0 5
40777: PUSH
40778: FOR_IN
40779: IFFALSE 40814
// if GetBase ( i ) <> base then
40781: LD_VAR 0 6
40785: PPUSH
40786: CALL_OW 274
40790: PUSH
40791: LD_VAR 0 1
40795: NONEQUAL
40796: IFFALSE 40812
// ComLinkToBase ( base , i ) ;
40798: LD_VAR 0 1
40802: PPUSH
40803: LD_VAR 0 6
40807: PPUSH
40808: CALL_OW 169
40812: GO 40778
40814: POP
40815: POP
// end ; result := tmp ;
40816: LD_ADDR_VAR 0 4
40820: PUSH
40821: LD_VAR 0 5
40825: ST_TO_ADDR
// end ;
40826: LD_VAR 0 4
40830: RET
// export function ComComplete ( units , b ) ; var i ; begin
40831: LD_INT 0
40833: PPUSH
40834: PPUSH
// if not units then
40835: LD_VAR 0 1
40839: NOT
40840: IFFALSE 40844
// exit ;
40842: GO 40934
// for i in units do
40844: LD_ADDR_VAR 0 4
40848: PUSH
40849: LD_VAR 0 1
40853: PUSH
40854: FOR_IN
40855: IFFALSE 40932
// if BuildingStatus ( b ) = bs_build then
40857: LD_VAR 0 2
40861: PPUSH
40862: CALL_OW 461
40866: PUSH
40867: LD_INT 1
40869: EQUAL
40870: IFFALSE 40930
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
40872: LD_VAR 0 4
40876: PPUSH
40877: LD_STRING h
40879: PUSH
40880: LD_VAR 0 2
40884: PPUSH
40885: CALL_OW 250
40889: PUSH
40890: LD_VAR 0 2
40894: PPUSH
40895: CALL_OW 251
40899: PUSH
40900: LD_VAR 0 2
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 0
40910: PUSH
40911: LD_INT 0
40913: PUSH
40914: EMPTY
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: PUSH
40923: EMPTY
40924: LIST
40925: PPUSH
40926: CALL_OW 446
40930: GO 40854
40932: POP
40933: POP
// end ;
40934: LD_VAR 0 3
40938: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
40939: LD_INT 0
40941: PPUSH
40942: PPUSH
40943: PPUSH
40944: PPUSH
40945: PPUSH
40946: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
40947: LD_VAR 0 1
40951: NOT
40952: PUSH
40953: LD_VAR 0 1
40957: PPUSH
40958: CALL_OW 263
40962: PUSH
40963: LD_INT 2
40965: NONEQUAL
40966: OR
40967: IFFALSE 40971
// exit ;
40969: GO 41287
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
40971: LD_ADDR_VAR 0 6
40975: PUSH
40976: LD_INT 22
40978: PUSH
40979: LD_VAR 0 1
40983: PPUSH
40984: CALL_OW 255
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: LD_INT 30
40998: PUSH
40999: LD_INT 36
41001: PUSH
41002: EMPTY
41003: LIST
41004: LIST
41005: PUSH
41006: LD_INT 34
41008: PUSH
41009: LD_INT 31
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: LIST
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PPUSH
41025: CALL_OW 69
41029: ST_TO_ADDR
// if not tmp then
41030: LD_VAR 0 6
41034: NOT
41035: IFFALSE 41039
// exit ;
41037: GO 41287
// result := [ ] ;
41039: LD_ADDR_VAR 0 2
41043: PUSH
41044: EMPTY
41045: ST_TO_ADDR
// for i in tmp do
41046: LD_ADDR_VAR 0 3
41050: PUSH
41051: LD_VAR 0 6
41055: PUSH
41056: FOR_IN
41057: IFFALSE 41128
// begin t := UnitsInside ( i ) ;
41059: LD_ADDR_VAR 0 4
41063: PUSH
41064: LD_VAR 0 3
41068: PPUSH
41069: CALL_OW 313
41073: ST_TO_ADDR
// if t then
41074: LD_VAR 0 4
41078: IFFALSE 41126
// for j in t do
41080: LD_ADDR_VAR 0 7
41084: PUSH
41085: LD_VAR 0 4
41089: PUSH
41090: FOR_IN
41091: IFFALSE 41124
// result := Replace ( result , result + 1 , j ) ;
41093: LD_ADDR_VAR 0 2
41097: PUSH
41098: LD_VAR 0 2
41102: PPUSH
41103: LD_VAR 0 2
41107: PUSH
41108: LD_INT 1
41110: PLUS
41111: PPUSH
41112: LD_VAR 0 7
41116: PPUSH
41117: CALL_OW 1
41121: ST_TO_ADDR
41122: GO 41090
41124: POP
41125: POP
// end ;
41126: GO 41056
41128: POP
41129: POP
// if not result then
41130: LD_VAR 0 2
41134: NOT
41135: IFFALSE 41139
// exit ;
41137: GO 41287
// mech := result [ 1 ] ;
41139: LD_ADDR_VAR 0 5
41143: PUSH
41144: LD_VAR 0 2
41148: PUSH
41149: LD_INT 1
41151: ARRAY
41152: ST_TO_ADDR
// if result > 1 then
41153: LD_VAR 0 2
41157: PUSH
41158: LD_INT 1
41160: GREATER
41161: IFFALSE 41273
// begin for i = 2 to result do
41163: LD_ADDR_VAR 0 3
41167: PUSH
41168: DOUBLE
41169: LD_INT 2
41171: DEC
41172: ST_TO_ADDR
41173: LD_VAR 0 2
41177: PUSH
41178: FOR_TO
41179: IFFALSE 41271
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
41181: LD_ADDR_VAR 0 4
41185: PUSH
41186: LD_VAR 0 2
41190: PUSH
41191: LD_VAR 0 3
41195: ARRAY
41196: PPUSH
41197: LD_INT 3
41199: PPUSH
41200: CALL_OW 259
41204: PUSH
41205: LD_VAR 0 2
41209: PUSH
41210: LD_VAR 0 3
41214: ARRAY
41215: PPUSH
41216: CALL_OW 432
41220: MINUS
41221: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
41222: LD_VAR 0 4
41226: PUSH
41227: LD_VAR 0 5
41231: PPUSH
41232: LD_INT 3
41234: PPUSH
41235: CALL_OW 259
41239: PUSH
41240: LD_VAR 0 5
41244: PPUSH
41245: CALL_OW 432
41249: MINUS
41250: GREATEREQUAL
41251: IFFALSE 41269
// mech := result [ i ] ;
41253: LD_ADDR_VAR 0 5
41257: PUSH
41258: LD_VAR 0 2
41262: PUSH
41263: LD_VAR 0 3
41267: ARRAY
41268: ST_TO_ADDR
// end ;
41269: GO 41178
41271: POP
41272: POP
// end ; ComLinkTo ( vehicle , mech ) ;
41273: LD_VAR 0 1
41277: PPUSH
41278: LD_VAR 0 5
41282: PPUSH
41283: CALL_OW 135
// end ;
41287: LD_VAR 0 2
41291: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
41292: LD_INT 0
41294: PPUSH
41295: PPUSH
41296: PPUSH
41297: PPUSH
41298: PPUSH
41299: PPUSH
41300: PPUSH
41301: PPUSH
41302: PPUSH
41303: PPUSH
41304: PPUSH
41305: PPUSH
41306: PPUSH
// result := [ ] ;
41307: LD_ADDR_VAR 0 7
41311: PUSH
41312: EMPTY
41313: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
41314: LD_VAR 0 1
41318: PPUSH
41319: CALL_OW 266
41323: PUSH
41324: LD_INT 0
41326: PUSH
41327: LD_INT 1
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: IN
41334: NOT
41335: IFFALSE 41339
// exit ;
41337: GO 42973
// if name then
41339: LD_VAR 0 3
41343: IFFALSE 41359
// SetBName ( base_dep , name ) ;
41345: LD_VAR 0 1
41349: PPUSH
41350: LD_VAR 0 3
41354: PPUSH
41355: CALL_OW 500
// base := GetBase ( base_dep ) ;
41359: LD_ADDR_VAR 0 15
41363: PUSH
41364: LD_VAR 0 1
41368: PPUSH
41369: CALL_OW 274
41373: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
41374: LD_ADDR_VAR 0 16
41378: PUSH
41379: LD_VAR 0 1
41383: PPUSH
41384: CALL_OW 255
41388: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
41389: LD_ADDR_VAR 0 17
41393: PUSH
41394: LD_VAR 0 1
41398: PPUSH
41399: CALL_OW 248
41403: ST_TO_ADDR
// if sources then
41404: LD_VAR 0 5
41408: IFFALSE 41455
// for i = 1 to 3 do
41410: LD_ADDR_VAR 0 8
41414: PUSH
41415: DOUBLE
41416: LD_INT 1
41418: DEC
41419: ST_TO_ADDR
41420: LD_INT 3
41422: PUSH
41423: FOR_TO
41424: IFFALSE 41453
// AddResourceType ( base , i , sources [ i ] ) ;
41426: LD_VAR 0 15
41430: PPUSH
41431: LD_VAR 0 8
41435: PPUSH
41436: LD_VAR 0 5
41440: PUSH
41441: LD_VAR 0 8
41445: ARRAY
41446: PPUSH
41447: CALL_OW 276
41451: GO 41423
41453: POP
41454: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
41455: LD_ADDR_VAR 0 18
41459: PUSH
41460: LD_VAR 0 15
41464: PPUSH
41465: LD_VAR 0 2
41469: PPUSH
41470: LD_INT 1
41472: PPUSH
41473: CALL 40716 0 3
41477: ST_TO_ADDR
// InitHc ;
41478: CALL_OW 19
// InitUc ;
41482: CALL_OW 18
// uc_side := side ;
41486: LD_ADDR_OWVAR 20
41490: PUSH
41491: LD_VAR 0 16
41495: ST_TO_ADDR
// uc_nation := nation ;
41496: LD_ADDR_OWVAR 21
41500: PUSH
41501: LD_VAR 0 17
41505: ST_TO_ADDR
// if buildings then
41506: LD_VAR 0 18
41510: IFFALSE 42832
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
41512: LD_ADDR_VAR 0 19
41516: PUSH
41517: LD_VAR 0 18
41521: PPUSH
41522: LD_INT 2
41524: PUSH
41525: LD_INT 30
41527: PUSH
41528: LD_INT 29
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 30
41537: PUSH
41538: LD_INT 30
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: LIST
41549: PPUSH
41550: CALL_OW 72
41554: ST_TO_ADDR
// if tmp then
41555: LD_VAR 0 19
41559: IFFALSE 41607
// for i in tmp do
41561: LD_ADDR_VAR 0 8
41565: PUSH
41566: LD_VAR 0 19
41570: PUSH
41571: FOR_IN
41572: IFFALSE 41605
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
41574: LD_VAR 0 8
41578: PPUSH
41579: CALL_OW 250
41583: PPUSH
41584: LD_VAR 0 8
41588: PPUSH
41589: CALL_OW 251
41593: PPUSH
41594: LD_VAR 0 16
41598: PPUSH
41599: CALL_OW 441
41603: GO 41571
41605: POP
41606: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
41607: LD_VAR 0 18
41611: PPUSH
41612: LD_INT 2
41614: PUSH
41615: LD_INT 30
41617: PUSH
41618: LD_INT 32
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 30
41627: PUSH
41628: LD_INT 33
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: LIST
41639: PPUSH
41640: CALL_OW 72
41644: IFFALSE 41732
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
41646: LD_ADDR_VAR 0 8
41650: PUSH
41651: LD_VAR 0 18
41655: PPUSH
41656: LD_INT 2
41658: PUSH
41659: LD_INT 30
41661: PUSH
41662: LD_INT 32
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 30
41671: PUSH
41672: LD_INT 33
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: LIST
41683: PPUSH
41684: CALL_OW 72
41688: PUSH
41689: FOR_IN
41690: IFFALSE 41730
// begin if not GetBWeapon ( i ) then
41692: LD_VAR 0 8
41696: PPUSH
41697: CALL_OW 269
41701: NOT
41702: IFFALSE 41728
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
41704: LD_VAR 0 8
41708: PPUSH
41709: LD_VAR 0 8
41713: PPUSH
41714: LD_VAR 0 2
41718: PPUSH
41719: CALL 42978 0 2
41723: PPUSH
41724: CALL_OW 431
// end ;
41728: GO 41689
41730: POP
41731: POP
// end ; for i = 1 to personel do
41732: LD_ADDR_VAR 0 8
41736: PUSH
41737: DOUBLE
41738: LD_INT 1
41740: DEC
41741: ST_TO_ADDR
41742: LD_VAR 0 6
41746: PUSH
41747: FOR_TO
41748: IFFALSE 42812
// begin if i > 4 then
41750: LD_VAR 0 8
41754: PUSH
41755: LD_INT 4
41757: GREATER
41758: IFFALSE 41762
// break ;
41760: GO 42812
// case i of 1 :
41762: LD_VAR 0 8
41766: PUSH
41767: LD_INT 1
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41775
41773: GO 41855
41775: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
41776: LD_ADDR_VAR 0 12
41780: PUSH
41781: LD_VAR 0 18
41785: PPUSH
41786: LD_INT 22
41788: PUSH
41789: LD_VAR 0 16
41793: PUSH
41794: EMPTY
41795: LIST
41796: LIST
41797: PUSH
41798: LD_INT 58
41800: PUSH
41801: EMPTY
41802: LIST
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: LD_INT 30
41809: PUSH
41810: LD_INT 32
41812: PUSH
41813: EMPTY
41814: LIST
41815: LIST
41816: PUSH
41817: LD_INT 30
41819: PUSH
41820: LD_INT 4
41822: PUSH
41823: EMPTY
41824: LIST
41825: LIST
41826: PUSH
41827: LD_INT 30
41829: PUSH
41830: LD_INT 5
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: LIST
41847: PPUSH
41848: CALL_OW 72
41852: ST_TO_ADDR
41853: GO 42077
41855: LD_INT 2
41857: DOUBLE
41858: EQUAL
41859: IFTRUE 41863
41861: GO 41925
41863: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
41864: LD_ADDR_VAR 0 12
41868: PUSH
41869: LD_VAR 0 18
41873: PPUSH
41874: LD_INT 22
41876: PUSH
41877: LD_VAR 0 16
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 2
41888: PUSH
41889: LD_INT 30
41891: PUSH
41892: LD_INT 0
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 30
41901: PUSH
41902: LD_INT 1
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: LIST
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PPUSH
41918: CALL_OW 72
41922: ST_TO_ADDR
41923: GO 42077
41925: LD_INT 3
41927: DOUBLE
41928: EQUAL
41929: IFTRUE 41933
41931: GO 41995
41933: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
41934: LD_ADDR_VAR 0 12
41938: PUSH
41939: LD_VAR 0 18
41943: PPUSH
41944: LD_INT 22
41946: PUSH
41947: LD_VAR 0 16
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 30
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 30
41971: PUSH
41972: LD_INT 3
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: LIST
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PPUSH
41988: CALL_OW 72
41992: ST_TO_ADDR
41993: GO 42077
41995: LD_INT 4
41997: DOUBLE
41998: EQUAL
41999: IFTRUE 42003
42001: GO 42076
42003: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
42004: LD_ADDR_VAR 0 12
42008: PUSH
42009: LD_VAR 0 18
42013: PPUSH
42014: LD_INT 22
42016: PUSH
42017: LD_VAR 0 16
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: LD_INT 30
42031: PUSH
42032: LD_INT 6
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 30
42041: PUSH
42042: LD_INT 7
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 30
42051: PUSH
42052: LD_INT 8
42054: PUSH
42055: EMPTY
42056: LIST
42057: LIST
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: LIST
42063: LIST
42064: PUSH
42065: EMPTY
42066: LIST
42067: LIST
42068: PPUSH
42069: CALL_OW 72
42073: ST_TO_ADDR
42074: GO 42077
42076: POP
// if i = 1 then
42077: LD_VAR 0 8
42081: PUSH
42082: LD_INT 1
42084: EQUAL
42085: IFFALSE 42196
// begin tmp := [ ] ;
42087: LD_ADDR_VAR 0 19
42091: PUSH
42092: EMPTY
42093: ST_TO_ADDR
// for j in f do
42094: LD_ADDR_VAR 0 9
42098: PUSH
42099: LD_VAR 0 12
42103: PUSH
42104: FOR_IN
42105: IFFALSE 42178
// if GetBType ( j ) = b_bunker then
42107: LD_VAR 0 9
42111: PPUSH
42112: CALL_OW 266
42116: PUSH
42117: LD_INT 32
42119: EQUAL
42120: IFFALSE 42147
// tmp := Insert ( tmp , 1 , j ) else
42122: LD_ADDR_VAR 0 19
42126: PUSH
42127: LD_VAR 0 19
42131: PPUSH
42132: LD_INT 1
42134: PPUSH
42135: LD_VAR 0 9
42139: PPUSH
42140: CALL_OW 2
42144: ST_TO_ADDR
42145: GO 42176
// tmp := Insert ( tmp , tmp + 1 , j ) ;
42147: LD_ADDR_VAR 0 19
42151: PUSH
42152: LD_VAR 0 19
42156: PPUSH
42157: LD_VAR 0 19
42161: PUSH
42162: LD_INT 1
42164: PLUS
42165: PPUSH
42166: LD_VAR 0 9
42170: PPUSH
42171: CALL_OW 2
42175: ST_TO_ADDR
42176: GO 42104
42178: POP
42179: POP
// if tmp then
42180: LD_VAR 0 19
42184: IFFALSE 42196
// f := tmp ;
42186: LD_ADDR_VAR 0 12
42190: PUSH
42191: LD_VAR 0 19
42195: ST_TO_ADDR
// end ; x := personel [ i ] ;
42196: LD_ADDR_VAR 0 13
42200: PUSH
42201: LD_VAR 0 6
42205: PUSH
42206: LD_VAR 0 8
42210: ARRAY
42211: ST_TO_ADDR
// if x = - 1 then
42212: LD_VAR 0 13
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: EQUAL
42221: IFFALSE 42430
// begin for j in f do
42223: LD_ADDR_VAR 0 9
42227: PUSH
42228: LD_VAR 0 12
42232: PUSH
42233: FOR_IN
42234: IFFALSE 42426
// repeat InitHc ;
42236: CALL_OW 19
// if GetBType ( j ) = b_barracks then
42240: LD_VAR 0 9
42244: PPUSH
42245: CALL_OW 266
42249: PUSH
42250: LD_INT 5
42252: EQUAL
42253: IFFALSE 42323
// begin if UnitsInside ( j ) < 3 then
42255: LD_VAR 0 9
42259: PPUSH
42260: CALL_OW 313
42264: PUSH
42265: LD_INT 3
42267: LESS
42268: IFFALSE 42304
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42270: LD_INT 0
42272: PPUSH
42273: LD_INT 5
42275: PUSH
42276: LD_INT 8
42278: PUSH
42279: LD_INT 9
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: LIST
42286: PUSH
42287: LD_VAR 0 17
42291: ARRAY
42292: PPUSH
42293: LD_VAR 0 4
42297: PPUSH
42298: CALL_OW 380
42302: GO 42321
// PrepareHuman ( false , i , skill ) ;
42304: LD_INT 0
42306: PPUSH
42307: LD_VAR 0 8
42311: PPUSH
42312: LD_VAR 0 4
42316: PPUSH
42317: CALL_OW 380
// end else
42321: GO 42340
// PrepareHuman ( false , i , skill ) ;
42323: LD_INT 0
42325: PPUSH
42326: LD_VAR 0 8
42330: PPUSH
42331: LD_VAR 0 4
42335: PPUSH
42336: CALL_OW 380
// un := CreateHuman ;
42340: LD_ADDR_VAR 0 14
42344: PUSH
42345: CALL_OW 44
42349: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42350: LD_ADDR_VAR 0 7
42354: PUSH
42355: LD_VAR 0 7
42359: PPUSH
42360: LD_INT 1
42362: PPUSH
42363: LD_VAR 0 14
42367: PPUSH
42368: CALL_OW 2
42372: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
42373: LD_VAR 0 14
42377: PPUSH
42378: LD_VAR 0 9
42382: PPUSH
42383: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
42387: LD_VAR 0 9
42391: PPUSH
42392: CALL_OW 313
42396: PUSH
42397: LD_INT 6
42399: EQUAL
42400: PUSH
42401: LD_VAR 0 9
42405: PPUSH
42406: CALL_OW 266
42410: PUSH
42411: LD_INT 32
42413: PUSH
42414: LD_INT 31
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: IN
42421: OR
42422: IFFALSE 42236
42424: GO 42233
42426: POP
42427: POP
// end else
42428: GO 42810
// for j = 1 to x do
42430: LD_ADDR_VAR 0 9
42434: PUSH
42435: DOUBLE
42436: LD_INT 1
42438: DEC
42439: ST_TO_ADDR
42440: LD_VAR 0 13
42444: PUSH
42445: FOR_TO
42446: IFFALSE 42808
// begin InitHc ;
42448: CALL_OW 19
// if not f then
42452: LD_VAR 0 12
42456: NOT
42457: IFFALSE 42546
// begin PrepareHuman ( false , i , skill ) ;
42459: LD_INT 0
42461: PPUSH
42462: LD_VAR 0 8
42466: PPUSH
42467: LD_VAR 0 4
42471: PPUSH
42472: CALL_OW 380
// un := CreateHuman ;
42476: LD_ADDR_VAR 0 14
42480: PUSH
42481: CALL_OW 44
42485: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42486: LD_ADDR_VAR 0 7
42490: PUSH
42491: LD_VAR 0 7
42495: PPUSH
42496: LD_INT 1
42498: PPUSH
42499: LD_VAR 0 14
42503: PPUSH
42504: CALL_OW 2
42508: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42509: LD_VAR 0 14
42513: PPUSH
42514: LD_VAR 0 1
42518: PPUSH
42519: CALL_OW 250
42523: PPUSH
42524: LD_VAR 0 1
42528: PPUSH
42529: CALL_OW 251
42533: PPUSH
42534: LD_INT 10
42536: PPUSH
42537: LD_INT 0
42539: PPUSH
42540: CALL_OW 50
// continue ;
42544: GO 42445
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
42546: LD_VAR 0 12
42550: PUSH
42551: LD_INT 1
42553: ARRAY
42554: PPUSH
42555: CALL_OW 313
42559: PUSH
42560: LD_VAR 0 12
42564: PUSH
42565: LD_INT 1
42567: ARRAY
42568: PPUSH
42569: CALL_OW 266
42573: PUSH
42574: LD_INT 32
42576: PUSH
42577: LD_INT 31
42579: PUSH
42580: EMPTY
42581: LIST
42582: LIST
42583: IN
42584: AND
42585: PUSH
42586: LD_VAR 0 12
42590: PUSH
42591: LD_INT 1
42593: ARRAY
42594: PPUSH
42595: CALL_OW 313
42599: PUSH
42600: LD_INT 6
42602: EQUAL
42603: OR
42604: IFFALSE 42624
// f := Delete ( f , 1 ) ;
42606: LD_ADDR_VAR 0 12
42610: PUSH
42611: LD_VAR 0 12
42615: PPUSH
42616: LD_INT 1
42618: PPUSH
42619: CALL_OW 3
42623: ST_TO_ADDR
// if not f then
42624: LD_VAR 0 12
42628: NOT
42629: IFFALSE 42647
// begin x := x + 2 ;
42631: LD_ADDR_VAR 0 13
42635: PUSH
42636: LD_VAR 0 13
42640: PUSH
42641: LD_INT 2
42643: PLUS
42644: ST_TO_ADDR
// continue ;
42645: GO 42445
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
42647: LD_VAR 0 12
42651: PUSH
42652: LD_INT 1
42654: ARRAY
42655: PPUSH
42656: CALL_OW 266
42660: PUSH
42661: LD_INT 5
42663: EQUAL
42664: IFFALSE 42738
// begin if UnitsInside ( f [ 1 ] ) < 3 then
42666: LD_VAR 0 12
42670: PUSH
42671: LD_INT 1
42673: ARRAY
42674: PPUSH
42675: CALL_OW 313
42679: PUSH
42680: LD_INT 3
42682: LESS
42683: IFFALSE 42719
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
42685: LD_INT 0
42687: PPUSH
42688: LD_INT 5
42690: PUSH
42691: LD_INT 8
42693: PUSH
42694: LD_INT 9
42696: PUSH
42697: EMPTY
42698: LIST
42699: LIST
42700: LIST
42701: PUSH
42702: LD_VAR 0 17
42706: ARRAY
42707: PPUSH
42708: LD_VAR 0 4
42712: PPUSH
42713: CALL_OW 380
42717: GO 42736
// PrepareHuman ( false , i , skill ) ;
42719: LD_INT 0
42721: PPUSH
42722: LD_VAR 0 8
42726: PPUSH
42727: LD_VAR 0 4
42731: PPUSH
42732: CALL_OW 380
// end else
42736: GO 42755
// PrepareHuman ( false , i , skill ) ;
42738: LD_INT 0
42740: PPUSH
42741: LD_VAR 0 8
42745: PPUSH
42746: LD_VAR 0 4
42750: PPUSH
42751: CALL_OW 380
// un := CreateHuman ;
42755: LD_ADDR_VAR 0 14
42759: PUSH
42760: CALL_OW 44
42764: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
42765: LD_ADDR_VAR 0 7
42769: PUSH
42770: LD_VAR 0 7
42774: PPUSH
42775: LD_INT 1
42777: PPUSH
42778: LD_VAR 0 14
42782: PPUSH
42783: CALL_OW 2
42787: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
42788: LD_VAR 0 14
42792: PPUSH
42793: LD_VAR 0 12
42797: PUSH
42798: LD_INT 1
42800: ARRAY
42801: PPUSH
42802: CALL_OW 52
// end ;
42806: GO 42445
42808: POP
42809: POP
// end ;
42810: GO 41747
42812: POP
42813: POP
// result := result ^ buildings ;
42814: LD_ADDR_VAR 0 7
42818: PUSH
42819: LD_VAR 0 7
42823: PUSH
42824: LD_VAR 0 18
42828: ADD
42829: ST_TO_ADDR
// end else
42830: GO 42973
// begin for i = 1 to personel do
42832: LD_ADDR_VAR 0 8
42836: PUSH
42837: DOUBLE
42838: LD_INT 1
42840: DEC
42841: ST_TO_ADDR
42842: LD_VAR 0 6
42846: PUSH
42847: FOR_TO
42848: IFFALSE 42971
// begin if i > 4 then
42850: LD_VAR 0 8
42854: PUSH
42855: LD_INT 4
42857: GREATER
42858: IFFALSE 42862
// break ;
42860: GO 42971
// x := personel [ i ] ;
42862: LD_ADDR_VAR 0 13
42866: PUSH
42867: LD_VAR 0 6
42871: PUSH
42872: LD_VAR 0 8
42876: ARRAY
42877: ST_TO_ADDR
// if x = - 1 then
42878: LD_VAR 0 13
42882: PUSH
42883: LD_INT 1
42885: NEG
42886: EQUAL
42887: IFFALSE 42891
// continue ;
42889: GO 42847
// PrepareHuman ( false , i , skill ) ;
42891: LD_INT 0
42893: PPUSH
42894: LD_VAR 0 8
42898: PPUSH
42899: LD_VAR 0 4
42903: PPUSH
42904: CALL_OW 380
// un := CreateHuman ;
42908: LD_ADDR_VAR 0 14
42912: PUSH
42913: CALL_OW 44
42917: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
42918: LD_VAR 0 14
42922: PPUSH
42923: LD_VAR 0 1
42927: PPUSH
42928: CALL_OW 250
42932: PPUSH
42933: LD_VAR 0 1
42937: PPUSH
42938: CALL_OW 251
42942: PPUSH
42943: LD_INT 10
42945: PPUSH
42946: LD_INT 0
42948: PPUSH
42949: CALL_OW 50
// result := result ^ un ;
42953: LD_ADDR_VAR 0 7
42957: PUSH
42958: LD_VAR 0 7
42962: PUSH
42963: LD_VAR 0 14
42967: ADD
42968: ST_TO_ADDR
// end ;
42969: GO 42847
42971: POP
42972: POP
// end ; end ;
42973: LD_VAR 0 7
42977: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
42978: LD_INT 0
42980: PPUSH
42981: PPUSH
42982: PPUSH
42983: PPUSH
42984: PPUSH
42985: PPUSH
42986: PPUSH
42987: PPUSH
42988: PPUSH
42989: PPUSH
42990: PPUSH
42991: PPUSH
42992: PPUSH
42993: PPUSH
42994: PPUSH
42995: PPUSH
// result := false ;
42996: LD_ADDR_VAR 0 3
43000: PUSH
43001: LD_INT 0
43003: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
43004: LD_VAR 0 1
43008: NOT
43009: PUSH
43010: LD_VAR 0 1
43014: PPUSH
43015: CALL_OW 266
43019: PUSH
43020: LD_INT 32
43022: PUSH
43023: LD_INT 33
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: IN
43030: NOT
43031: OR
43032: IFFALSE 43036
// exit ;
43034: GO 44145
// nat := GetNation ( tower ) ;
43036: LD_ADDR_VAR 0 12
43040: PUSH
43041: LD_VAR 0 1
43045: PPUSH
43046: CALL_OW 248
43050: ST_TO_ADDR
// side := GetSide ( tower ) ;
43051: LD_ADDR_VAR 0 16
43055: PUSH
43056: LD_VAR 0 1
43060: PPUSH
43061: CALL_OW 255
43065: ST_TO_ADDR
// x := GetX ( tower ) ;
43066: LD_ADDR_VAR 0 10
43070: PUSH
43071: LD_VAR 0 1
43075: PPUSH
43076: CALL_OW 250
43080: ST_TO_ADDR
// y := GetY ( tower ) ;
43081: LD_ADDR_VAR 0 11
43085: PUSH
43086: LD_VAR 0 1
43090: PPUSH
43091: CALL_OW 251
43095: ST_TO_ADDR
// if not x or not y then
43096: LD_VAR 0 10
43100: NOT
43101: PUSH
43102: LD_VAR 0 11
43106: NOT
43107: OR
43108: IFFALSE 43112
// exit ;
43110: GO 44145
// weapon := 0 ;
43112: LD_ADDR_VAR 0 18
43116: PUSH
43117: LD_INT 0
43119: ST_TO_ADDR
// fac_list := [ ] ;
43120: LD_ADDR_VAR 0 17
43124: PUSH
43125: EMPTY
43126: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
43127: LD_ADDR_VAR 0 6
43131: PUSH
43132: LD_VAR 0 1
43136: PPUSH
43137: CALL_OW 274
43141: PPUSH
43142: LD_VAR 0 2
43146: PPUSH
43147: LD_INT 0
43149: PPUSH
43150: CALL 40716 0 3
43154: PPUSH
43155: LD_INT 30
43157: PUSH
43158: LD_INT 3
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PPUSH
43165: CALL_OW 72
43169: ST_TO_ADDR
// if not factories then
43170: LD_VAR 0 6
43174: NOT
43175: IFFALSE 43179
// exit ;
43177: GO 44145
// for i in factories do
43179: LD_ADDR_VAR 0 8
43183: PUSH
43184: LD_VAR 0 6
43188: PUSH
43189: FOR_IN
43190: IFFALSE 43215
// fac_list := fac_list union AvailableWeaponList ( i ) ;
43192: LD_ADDR_VAR 0 17
43196: PUSH
43197: LD_VAR 0 17
43201: PUSH
43202: LD_VAR 0 8
43206: PPUSH
43207: CALL_OW 478
43211: UNION
43212: ST_TO_ADDR
43213: GO 43189
43215: POP
43216: POP
// if not fac_list then
43217: LD_VAR 0 17
43221: NOT
43222: IFFALSE 43226
// exit ;
43224: GO 44145
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
43226: LD_ADDR_VAR 0 5
43230: PUSH
43231: LD_INT 4
43233: PUSH
43234: LD_INT 5
43236: PUSH
43237: LD_INT 9
43239: PUSH
43240: LD_INT 10
43242: PUSH
43243: LD_INT 6
43245: PUSH
43246: LD_INT 7
43248: PUSH
43249: LD_INT 11
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 27
43263: PUSH
43264: LD_INT 28
43266: PUSH
43267: LD_INT 26
43269: PUSH
43270: LD_INT 30
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 43
43281: PUSH
43282: LD_INT 44
43284: PUSH
43285: LD_INT 46
43287: PUSH
43288: LD_INT 45
43290: PUSH
43291: LD_INT 47
43293: PUSH
43294: LD_INT 49
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: LIST
43309: PUSH
43310: LD_VAR 0 12
43314: ARRAY
43315: ST_TO_ADDR
// list := list isect fac_list ;
43316: LD_ADDR_VAR 0 5
43320: PUSH
43321: LD_VAR 0 5
43325: PUSH
43326: LD_VAR 0 17
43330: ISECT
43331: ST_TO_ADDR
// if not list then
43332: LD_VAR 0 5
43336: NOT
43337: IFFALSE 43341
// exit ;
43339: GO 44145
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
43341: LD_VAR 0 12
43345: PUSH
43346: LD_INT 3
43348: EQUAL
43349: PUSH
43350: LD_INT 49
43352: PUSH
43353: LD_VAR 0 5
43357: IN
43358: AND
43359: PUSH
43360: LD_INT 31
43362: PPUSH
43363: LD_VAR 0 16
43367: PPUSH
43368: CALL_OW 321
43372: PUSH
43373: LD_INT 2
43375: EQUAL
43376: AND
43377: IFFALSE 43437
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
43379: LD_INT 22
43381: PUSH
43382: LD_VAR 0 16
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: PUSH
43391: LD_INT 35
43393: PUSH
43394: LD_INT 49
43396: PUSH
43397: EMPTY
43398: LIST
43399: LIST
43400: PUSH
43401: LD_INT 91
43403: PUSH
43404: LD_VAR 0 1
43408: PUSH
43409: LD_INT 10
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: LIST
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: LIST
43421: PPUSH
43422: CALL_OW 69
43426: NOT
43427: IFFALSE 43437
// weapon := ru_time_lapser ;
43429: LD_ADDR_VAR 0 18
43433: PUSH
43434: LD_INT 49
43436: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
43437: LD_VAR 0 12
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: LD_INT 2
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: IN
43452: PUSH
43453: LD_INT 11
43455: PUSH
43456: LD_VAR 0 5
43460: IN
43461: PUSH
43462: LD_INT 30
43464: PUSH
43465: LD_VAR 0 5
43469: IN
43470: OR
43471: AND
43472: PUSH
43473: LD_INT 6
43475: PPUSH
43476: LD_VAR 0 16
43480: PPUSH
43481: CALL_OW 321
43485: PUSH
43486: LD_INT 2
43488: EQUAL
43489: AND
43490: IFFALSE 43655
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
43492: LD_INT 22
43494: PUSH
43495: LD_VAR 0 16
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: PUSH
43507: LD_INT 35
43509: PUSH
43510: LD_INT 11
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 35
43519: PUSH
43520: LD_INT 30
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: EMPTY
43528: LIST
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 91
43534: PUSH
43535: LD_VAR 0 1
43539: PUSH
43540: LD_INT 18
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: LIST
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: LIST
43552: PPUSH
43553: CALL_OW 69
43557: NOT
43558: PUSH
43559: LD_INT 22
43561: PUSH
43562: LD_VAR 0 16
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 2
43573: PUSH
43574: LD_INT 30
43576: PUSH
43577: LD_INT 32
43579: PUSH
43580: EMPTY
43581: LIST
43582: LIST
43583: PUSH
43584: LD_INT 30
43586: PUSH
43587: LD_INT 33
43589: PUSH
43590: EMPTY
43591: LIST
43592: LIST
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 91
43601: PUSH
43602: LD_VAR 0 1
43606: PUSH
43607: LD_INT 12
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: LIST
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: LIST
43619: PUSH
43620: EMPTY
43621: LIST
43622: PPUSH
43623: CALL_OW 69
43627: PUSH
43628: LD_INT 2
43630: GREATER
43631: AND
43632: IFFALSE 43655
// weapon := [ us_radar , ar_radar ] [ nat ] ;
43634: LD_ADDR_VAR 0 18
43638: PUSH
43639: LD_INT 11
43641: PUSH
43642: LD_INT 30
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_VAR 0 12
43653: ARRAY
43654: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
43655: LD_VAR 0 18
43659: NOT
43660: PUSH
43661: LD_INT 40
43663: PPUSH
43664: LD_VAR 0 16
43668: PPUSH
43669: CALL_OW 321
43673: PUSH
43674: LD_INT 2
43676: EQUAL
43677: AND
43678: PUSH
43679: LD_INT 7
43681: PUSH
43682: LD_VAR 0 5
43686: IN
43687: PUSH
43688: LD_INT 28
43690: PUSH
43691: LD_VAR 0 5
43695: IN
43696: OR
43697: PUSH
43698: LD_INT 45
43700: PUSH
43701: LD_VAR 0 5
43705: IN
43706: OR
43707: AND
43708: IFFALSE 43962
// begin hex := GetHexInfo ( x , y ) ;
43710: LD_ADDR_VAR 0 4
43714: PUSH
43715: LD_VAR 0 10
43719: PPUSH
43720: LD_VAR 0 11
43724: PPUSH
43725: CALL_OW 546
43729: ST_TO_ADDR
// if hex [ 1 ] then
43730: LD_VAR 0 4
43734: PUSH
43735: LD_INT 1
43737: ARRAY
43738: IFFALSE 43742
// exit ;
43740: GO 44145
// height := hex [ 2 ] ;
43742: LD_ADDR_VAR 0 15
43746: PUSH
43747: LD_VAR 0 4
43751: PUSH
43752: LD_INT 2
43754: ARRAY
43755: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
43756: LD_ADDR_VAR 0 14
43760: PUSH
43761: LD_INT 0
43763: PUSH
43764: LD_INT 2
43766: PUSH
43767: LD_INT 3
43769: PUSH
43770: LD_INT 5
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
// for i in tmp do
43779: LD_ADDR_VAR 0 8
43783: PUSH
43784: LD_VAR 0 14
43788: PUSH
43789: FOR_IN
43790: IFFALSE 43960
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
43792: LD_ADDR_VAR 0 9
43796: PUSH
43797: LD_VAR 0 10
43801: PPUSH
43802: LD_VAR 0 8
43806: PPUSH
43807: LD_INT 5
43809: PPUSH
43810: CALL_OW 272
43814: PUSH
43815: LD_VAR 0 11
43819: PPUSH
43820: LD_VAR 0 8
43824: PPUSH
43825: LD_INT 5
43827: PPUSH
43828: CALL_OW 273
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
43837: LD_VAR 0 9
43841: PUSH
43842: LD_INT 1
43844: ARRAY
43845: PPUSH
43846: LD_VAR 0 9
43850: PUSH
43851: LD_INT 2
43853: ARRAY
43854: PPUSH
43855: CALL_OW 488
43859: IFFALSE 43958
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
43861: LD_ADDR_VAR 0 4
43865: PUSH
43866: LD_VAR 0 9
43870: PUSH
43871: LD_INT 1
43873: ARRAY
43874: PPUSH
43875: LD_VAR 0 9
43879: PUSH
43880: LD_INT 2
43882: ARRAY
43883: PPUSH
43884: CALL_OW 546
43888: ST_TO_ADDR
// if hex [ 1 ] then
43889: LD_VAR 0 4
43893: PUSH
43894: LD_INT 1
43896: ARRAY
43897: IFFALSE 43901
// continue ;
43899: GO 43789
// h := hex [ 2 ] ;
43901: LD_ADDR_VAR 0 13
43905: PUSH
43906: LD_VAR 0 4
43910: PUSH
43911: LD_INT 2
43913: ARRAY
43914: ST_TO_ADDR
// if h + 7 < height then
43915: LD_VAR 0 13
43919: PUSH
43920: LD_INT 7
43922: PLUS
43923: PUSH
43924: LD_VAR 0 15
43928: LESS
43929: IFFALSE 43958
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
43931: LD_ADDR_VAR 0 18
43935: PUSH
43936: LD_INT 7
43938: PUSH
43939: LD_INT 28
43941: PUSH
43942: LD_INT 45
43944: PUSH
43945: EMPTY
43946: LIST
43947: LIST
43948: LIST
43949: PUSH
43950: LD_VAR 0 12
43954: ARRAY
43955: ST_TO_ADDR
// break ;
43956: GO 43960
// end ; end ; end ;
43958: GO 43789
43960: POP
43961: POP
// end ; if not weapon then
43962: LD_VAR 0 18
43966: NOT
43967: IFFALSE 44027
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
43969: LD_ADDR_VAR 0 5
43973: PUSH
43974: LD_VAR 0 5
43978: PUSH
43979: LD_INT 11
43981: PUSH
43982: LD_INT 30
43984: PUSH
43985: LD_INT 49
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: LIST
43992: DIFF
43993: ST_TO_ADDR
// if not list then
43994: LD_VAR 0 5
43998: NOT
43999: IFFALSE 44003
// exit ;
44001: GO 44145
// weapon := list [ rand ( 1 , list ) ] ;
44003: LD_ADDR_VAR 0 18
44007: PUSH
44008: LD_VAR 0 5
44012: PUSH
44013: LD_INT 1
44015: PPUSH
44016: LD_VAR 0 5
44020: PPUSH
44021: CALL_OW 12
44025: ARRAY
44026: ST_TO_ADDR
// end ; if weapon then
44027: LD_VAR 0 18
44031: IFFALSE 44145
// begin tmp := CostOfWeapon ( weapon ) ;
44033: LD_ADDR_VAR 0 14
44037: PUSH
44038: LD_VAR 0 18
44042: PPUSH
44043: CALL_OW 451
44047: ST_TO_ADDR
// j := GetBase ( tower ) ;
44048: LD_ADDR_VAR 0 9
44052: PUSH
44053: LD_VAR 0 1
44057: PPUSH
44058: CALL_OW 274
44062: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
44063: LD_VAR 0 9
44067: PPUSH
44068: LD_INT 1
44070: PPUSH
44071: CALL_OW 275
44075: PUSH
44076: LD_VAR 0 14
44080: PUSH
44081: LD_INT 1
44083: ARRAY
44084: GREATEREQUAL
44085: PUSH
44086: LD_VAR 0 9
44090: PPUSH
44091: LD_INT 2
44093: PPUSH
44094: CALL_OW 275
44098: PUSH
44099: LD_VAR 0 14
44103: PUSH
44104: LD_INT 2
44106: ARRAY
44107: GREATEREQUAL
44108: AND
44109: PUSH
44110: LD_VAR 0 9
44114: PPUSH
44115: LD_INT 3
44117: PPUSH
44118: CALL_OW 275
44122: PUSH
44123: LD_VAR 0 14
44127: PUSH
44128: LD_INT 3
44130: ARRAY
44131: GREATEREQUAL
44132: AND
44133: IFFALSE 44145
// result := weapon ;
44135: LD_ADDR_VAR 0 3
44139: PUSH
44140: LD_VAR 0 18
44144: ST_TO_ADDR
// end ; end ;
44145: LD_VAR 0 3
44149: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
44150: LD_INT 0
44152: PPUSH
44153: PPUSH
// result := true ;
44154: LD_ADDR_VAR 0 3
44158: PUSH
44159: LD_INT 1
44161: ST_TO_ADDR
// if array1 = array2 then
44162: LD_VAR 0 1
44166: PUSH
44167: LD_VAR 0 2
44171: EQUAL
44172: IFFALSE 44232
// begin for i = 1 to array1 do
44174: LD_ADDR_VAR 0 4
44178: PUSH
44179: DOUBLE
44180: LD_INT 1
44182: DEC
44183: ST_TO_ADDR
44184: LD_VAR 0 1
44188: PUSH
44189: FOR_TO
44190: IFFALSE 44228
// if array1 [ i ] <> array2 [ i ] then
44192: LD_VAR 0 1
44196: PUSH
44197: LD_VAR 0 4
44201: ARRAY
44202: PUSH
44203: LD_VAR 0 2
44207: PUSH
44208: LD_VAR 0 4
44212: ARRAY
44213: NONEQUAL
44214: IFFALSE 44226
// begin result := false ;
44216: LD_ADDR_VAR 0 3
44220: PUSH
44221: LD_INT 0
44223: ST_TO_ADDR
// break ;
44224: GO 44228
// end ;
44226: GO 44189
44228: POP
44229: POP
// end else
44230: GO 44240
// result := false ;
44232: LD_ADDR_VAR 0 3
44236: PUSH
44237: LD_INT 0
44239: ST_TO_ADDR
// end ;
44240: LD_VAR 0 3
44244: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
44245: LD_INT 0
44247: PPUSH
44248: PPUSH
// if not array1 or not array2 then
44249: LD_VAR 0 1
44253: NOT
44254: PUSH
44255: LD_VAR 0 2
44259: NOT
44260: OR
44261: IFFALSE 44265
// exit ;
44263: GO 44329
// result := true ;
44265: LD_ADDR_VAR 0 3
44269: PUSH
44270: LD_INT 1
44272: ST_TO_ADDR
// for i = 1 to array1 do
44273: LD_ADDR_VAR 0 4
44277: PUSH
44278: DOUBLE
44279: LD_INT 1
44281: DEC
44282: ST_TO_ADDR
44283: LD_VAR 0 1
44287: PUSH
44288: FOR_TO
44289: IFFALSE 44327
// if array1 [ i ] <> array2 [ i ] then
44291: LD_VAR 0 1
44295: PUSH
44296: LD_VAR 0 4
44300: ARRAY
44301: PUSH
44302: LD_VAR 0 2
44306: PUSH
44307: LD_VAR 0 4
44311: ARRAY
44312: NONEQUAL
44313: IFFALSE 44325
// begin result := false ;
44315: LD_ADDR_VAR 0 3
44319: PUSH
44320: LD_INT 0
44322: ST_TO_ADDR
// break ;
44323: GO 44327
// end ;
44325: GO 44288
44327: POP
44328: POP
// end ;
44329: LD_VAR 0 3
44333: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
44334: LD_INT 0
44336: PPUSH
44337: PPUSH
44338: PPUSH
// pom := GetBase ( fac ) ;
44339: LD_ADDR_VAR 0 5
44343: PUSH
44344: LD_VAR 0 1
44348: PPUSH
44349: CALL_OW 274
44353: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
44354: LD_ADDR_VAR 0 4
44358: PUSH
44359: LD_VAR 0 2
44363: PUSH
44364: LD_INT 1
44366: ARRAY
44367: PPUSH
44368: LD_VAR 0 2
44372: PUSH
44373: LD_INT 2
44375: ARRAY
44376: PPUSH
44377: LD_VAR 0 2
44381: PUSH
44382: LD_INT 3
44384: ARRAY
44385: PPUSH
44386: LD_VAR 0 2
44390: PUSH
44391: LD_INT 4
44393: ARRAY
44394: PPUSH
44395: CALL_OW 449
44399: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44400: LD_ADDR_VAR 0 3
44404: PUSH
44405: LD_VAR 0 5
44409: PPUSH
44410: LD_INT 1
44412: PPUSH
44413: CALL_OW 275
44417: PUSH
44418: LD_VAR 0 4
44422: PUSH
44423: LD_INT 1
44425: ARRAY
44426: GREATEREQUAL
44427: PUSH
44428: LD_VAR 0 5
44432: PPUSH
44433: LD_INT 2
44435: PPUSH
44436: CALL_OW 275
44440: PUSH
44441: LD_VAR 0 4
44445: PUSH
44446: LD_INT 2
44448: ARRAY
44449: GREATEREQUAL
44450: AND
44451: PUSH
44452: LD_VAR 0 5
44456: PPUSH
44457: LD_INT 3
44459: PPUSH
44460: CALL_OW 275
44464: PUSH
44465: LD_VAR 0 4
44469: PUSH
44470: LD_INT 3
44472: ARRAY
44473: GREATEREQUAL
44474: AND
44475: ST_TO_ADDR
// end ;
44476: LD_VAR 0 3
44480: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
44481: LD_INT 0
44483: PPUSH
44484: PPUSH
44485: PPUSH
44486: PPUSH
// pom := GetBase ( building ) ;
44487: LD_ADDR_VAR 0 3
44491: PUSH
44492: LD_VAR 0 1
44496: PPUSH
44497: CALL_OW 274
44501: ST_TO_ADDR
// if not pom then
44502: LD_VAR 0 3
44506: NOT
44507: IFFALSE 44511
// exit ;
44509: GO 44681
// btype := GetBType ( building ) ;
44511: LD_ADDR_VAR 0 5
44515: PUSH
44516: LD_VAR 0 1
44520: PPUSH
44521: CALL_OW 266
44525: ST_TO_ADDR
// if btype = b_armoury then
44526: LD_VAR 0 5
44530: PUSH
44531: LD_INT 4
44533: EQUAL
44534: IFFALSE 44544
// btype := b_barracks ;
44536: LD_ADDR_VAR 0 5
44540: PUSH
44541: LD_INT 5
44543: ST_TO_ADDR
// if btype = b_depot then
44544: LD_VAR 0 5
44548: PUSH
44549: LD_INT 0
44551: EQUAL
44552: IFFALSE 44562
// btype := b_warehouse ;
44554: LD_ADDR_VAR 0 5
44558: PUSH
44559: LD_INT 1
44561: ST_TO_ADDR
// if btype = b_workshop then
44562: LD_VAR 0 5
44566: PUSH
44567: LD_INT 2
44569: EQUAL
44570: IFFALSE 44580
// btype := b_factory ;
44572: LD_ADDR_VAR 0 5
44576: PUSH
44577: LD_INT 3
44579: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44580: LD_ADDR_VAR 0 4
44584: PUSH
44585: LD_VAR 0 5
44589: PPUSH
44590: LD_VAR 0 1
44594: PPUSH
44595: CALL_OW 248
44599: PPUSH
44600: CALL_OW 450
44604: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44605: LD_ADDR_VAR 0 2
44609: PUSH
44610: LD_VAR 0 3
44614: PPUSH
44615: LD_INT 1
44617: PPUSH
44618: CALL_OW 275
44622: PUSH
44623: LD_VAR 0 4
44627: PUSH
44628: LD_INT 1
44630: ARRAY
44631: GREATEREQUAL
44632: PUSH
44633: LD_VAR 0 3
44637: PPUSH
44638: LD_INT 2
44640: PPUSH
44641: CALL_OW 275
44645: PUSH
44646: LD_VAR 0 4
44650: PUSH
44651: LD_INT 2
44653: ARRAY
44654: GREATEREQUAL
44655: AND
44656: PUSH
44657: LD_VAR 0 3
44661: PPUSH
44662: LD_INT 3
44664: PPUSH
44665: CALL_OW 275
44669: PUSH
44670: LD_VAR 0 4
44674: PUSH
44675: LD_INT 3
44677: ARRAY
44678: GREATEREQUAL
44679: AND
44680: ST_TO_ADDR
// end ;
44681: LD_VAR 0 2
44685: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
44686: LD_INT 0
44688: PPUSH
44689: PPUSH
44690: PPUSH
// pom := GetBase ( building ) ;
44691: LD_ADDR_VAR 0 4
44695: PUSH
44696: LD_VAR 0 1
44700: PPUSH
44701: CALL_OW 274
44705: ST_TO_ADDR
// if not pom then
44706: LD_VAR 0 4
44710: NOT
44711: IFFALSE 44715
// exit ;
44713: GO 44816
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
44715: LD_ADDR_VAR 0 5
44719: PUSH
44720: LD_VAR 0 2
44724: PPUSH
44725: LD_VAR 0 1
44729: PPUSH
44730: CALL_OW 248
44734: PPUSH
44735: CALL_OW 450
44739: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
44740: LD_ADDR_VAR 0 3
44744: PUSH
44745: LD_VAR 0 4
44749: PPUSH
44750: LD_INT 1
44752: PPUSH
44753: CALL_OW 275
44757: PUSH
44758: LD_VAR 0 5
44762: PUSH
44763: LD_INT 1
44765: ARRAY
44766: GREATEREQUAL
44767: PUSH
44768: LD_VAR 0 4
44772: PPUSH
44773: LD_INT 2
44775: PPUSH
44776: CALL_OW 275
44780: PUSH
44781: LD_VAR 0 5
44785: PUSH
44786: LD_INT 2
44788: ARRAY
44789: GREATEREQUAL
44790: AND
44791: PUSH
44792: LD_VAR 0 4
44796: PPUSH
44797: LD_INT 3
44799: PPUSH
44800: CALL_OW 275
44804: PUSH
44805: LD_VAR 0 5
44809: PUSH
44810: LD_INT 3
44812: ARRAY
44813: GREATEREQUAL
44814: AND
44815: ST_TO_ADDR
// end ;
44816: LD_VAR 0 3
44820: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
44821: LD_INT 0
44823: PPUSH
44824: PPUSH
44825: PPUSH
44826: PPUSH
44827: PPUSH
44828: PPUSH
44829: PPUSH
44830: PPUSH
44831: PPUSH
44832: PPUSH
44833: PPUSH
// result := false ;
44834: LD_ADDR_VAR 0 8
44838: PUSH
44839: LD_INT 0
44841: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
44842: LD_VAR 0 5
44846: NOT
44847: PUSH
44848: LD_VAR 0 1
44852: NOT
44853: OR
44854: PUSH
44855: LD_VAR 0 2
44859: NOT
44860: OR
44861: PUSH
44862: LD_VAR 0 3
44866: NOT
44867: OR
44868: IFFALSE 44872
// exit ;
44870: GO 45686
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
44872: LD_ADDR_VAR 0 14
44876: PUSH
44877: LD_VAR 0 1
44881: PPUSH
44882: LD_VAR 0 2
44886: PPUSH
44887: LD_VAR 0 3
44891: PPUSH
44892: LD_VAR 0 4
44896: PPUSH
44897: LD_VAR 0 5
44901: PUSH
44902: LD_INT 1
44904: ARRAY
44905: PPUSH
44906: CALL_OW 248
44910: PPUSH
44911: LD_INT 0
44913: PPUSH
44914: CALL 46923 0 6
44918: ST_TO_ADDR
// if not hexes then
44919: LD_VAR 0 14
44923: NOT
44924: IFFALSE 44928
// exit ;
44926: GO 45686
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44928: LD_ADDR_VAR 0 17
44932: PUSH
44933: LD_VAR 0 5
44937: PPUSH
44938: LD_INT 22
44940: PUSH
44941: LD_VAR 0 13
44945: PPUSH
44946: CALL_OW 255
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 2
44957: PUSH
44958: LD_INT 30
44960: PUSH
44961: LD_INT 0
44963: PUSH
44964: EMPTY
44965: LIST
44966: LIST
44967: PUSH
44968: LD_INT 30
44970: PUSH
44971: LD_INT 1
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: PUSH
44978: EMPTY
44979: LIST
44980: LIST
44981: LIST
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PPUSH
44987: CALL_OW 72
44991: ST_TO_ADDR
// for i = 1 to hexes do
44992: LD_ADDR_VAR 0 9
44996: PUSH
44997: DOUBLE
44998: LD_INT 1
45000: DEC
45001: ST_TO_ADDR
45002: LD_VAR 0 14
45006: PUSH
45007: FOR_TO
45008: IFFALSE 45684
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45010: LD_ADDR_VAR 0 13
45014: PUSH
45015: LD_VAR 0 14
45019: PUSH
45020: LD_VAR 0 9
45024: ARRAY
45025: PUSH
45026: LD_INT 1
45028: ARRAY
45029: PPUSH
45030: LD_VAR 0 14
45034: PUSH
45035: LD_VAR 0 9
45039: ARRAY
45040: PUSH
45041: LD_INT 2
45043: ARRAY
45044: PPUSH
45045: CALL_OW 428
45049: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
45050: LD_VAR 0 14
45054: PUSH
45055: LD_VAR 0 9
45059: ARRAY
45060: PUSH
45061: LD_INT 1
45063: ARRAY
45064: PPUSH
45065: LD_VAR 0 14
45069: PUSH
45070: LD_VAR 0 9
45074: ARRAY
45075: PUSH
45076: LD_INT 2
45078: ARRAY
45079: PPUSH
45080: CALL_OW 351
45084: PUSH
45085: LD_VAR 0 14
45089: PUSH
45090: LD_VAR 0 9
45094: ARRAY
45095: PUSH
45096: LD_INT 1
45098: ARRAY
45099: PPUSH
45100: LD_VAR 0 14
45104: PUSH
45105: LD_VAR 0 9
45109: ARRAY
45110: PUSH
45111: LD_INT 2
45113: ARRAY
45114: PPUSH
45115: CALL_OW 488
45119: NOT
45120: OR
45121: PUSH
45122: LD_VAR 0 13
45126: PPUSH
45127: CALL_OW 247
45131: PUSH
45132: LD_INT 3
45134: EQUAL
45135: OR
45136: IFFALSE 45142
// exit ;
45138: POP
45139: POP
45140: GO 45686
// if not tmp then
45142: LD_VAR 0 13
45146: NOT
45147: IFFALSE 45151
// continue ;
45149: GO 45007
// result := true ;
45151: LD_ADDR_VAR 0 8
45155: PUSH
45156: LD_INT 1
45158: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
45159: LD_VAR 0 6
45163: PUSH
45164: LD_VAR 0 13
45168: PPUSH
45169: CALL_OW 247
45173: PUSH
45174: LD_INT 2
45176: EQUAL
45177: AND
45178: PUSH
45179: LD_VAR 0 13
45183: PPUSH
45184: CALL_OW 263
45188: PUSH
45189: LD_INT 1
45191: EQUAL
45192: AND
45193: IFFALSE 45357
// begin if IsDrivenBy ( tmp ) then
45195: LD_VAR 0 13
45199: PPUSH
45200: CALL_OW 311
45204: IFFALSE 45208
// continue ;
45206: GO 45007
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
45208: LD_VAR 0 6
45212: PPUSH
45213: LD_INT 3
45215: PUSH
45216: LD_INT 60
45218: PUSH
45219: EMPTY
45220: LIST
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 3
45228: PUSH
45229: LD_INT 55
45231: PUSH
45232: EMPTY
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PPUSH
45243: CALL_OW 72
45247: IFFALSE 45355
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
45249: LD_ADDR_VAR 0 18
45253: PUSH
45254: LD_VAR 0 6
45258: PPUSH
45259: LD_INT 3
45261: PUSH
45262: LD_INT 60
45264: PUSH
45265: EMPTY
45266: LIST
45267: PUSH
45268: EMPTY
45269: LIST
45270: LIST
45271: PUSH
45272: LD_INT 3
45274: PUSH
45275: LD_INT 55
45277: PUSH
45278: EMPTY
45279: LIST
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PPUSH
45289: CALL_OW 72
45293: PUSH
45294: LD_INT 1
45296: ARRAY
45297: ST_TO_ADDR
// if IsInUnit ( driver ) then
45298: LD_VAR 0 18
45302: PPUSH
45303: CALL_OW 310
45307: IFFALSE 45318
// ComExit ( driver ) ;
45309: LD_VAR 0 18
45313: PPUSH
45314: CALL 70107 0 1
// AddComEnterUnit ( driver , tmp ) ;
45318: LD_VAR 0 18
45322: PPUSH
45323: LD_VAR 0 13
45327: PPUSH
45328: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
45332: LD_VAR 0 18
45336: PPUSH
45337: LD_VAR 0 7
45341: PPUSH
45342: CALL_OW 173
// AddComExitVehicle ( driver ) ;
45346: LD_VAR 0 18
45350: PPUSH
45351: CALL_OW 181
// end ; continue ;
45355: GO 45007
// end ; if not cleaners or not tmp in cleaners then
45357: LD_VAR 0 6
45361: NOT
45362: PUSH
45363: LD_VAR 0 13
45367: PUSH
45368: LD_VAR 0 6
45372: IN
45373: NOT
45374: OR
45375: IFFALSE 45682
// begin if dep then
45377: LD_VAR 0 17
45381: IFFALSE 45517
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
45383: LD_ADDR_VAR 0 16
45387: PUSH
45388: LD_VAR 0 17
45392: PUSH
45393: LD_INT 1
45395: ARRAY
45396: PPUSH
45397: CALL_OW 250
45401: PPUSH
45402: LD_VAR 0 17
45406: PUSH
45407: LD_INT 1
45409: ARRAY
45410: PPUSH
45411: CALL_OW 254
45415: PPUSH
45416: LD_INT 5
45418: PPUSH
45419: CALL_OW 272
45423: PUSH
45424: LD_VAR 0 17
45428: PUSH
45429: LD_INT 1
45431: ARRAY
45432: PPUSH
45433: CALL_OW 251
45437: PPUSH
45438: LD_VAR 0 17
45442: PUSH
45443: LD_INT 1
45445: ARRAY
45446: PPUSH
45447: CALL_OW 254
45451: PPUSH
45452: LD_INT 5
45454: PPUSH
45455: CALL_OW 273
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
45464: LD_VAR 0 16
45468: PUSH
45469: LD_INT 1
45471: ARRAY
45472: PPUSH
45473: LD_VAR 0 16
45477: PUSH
45478: LD_INT 2
45480: ARRAY
45481: PPUSH
45482: CALL_OW 488
45486: IFFALSE 45517
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
45488: LD_VAR 0 13
45492: PPUSH
45493: LD_VAR 0 16
45497: PUSH
45498: LD_INT 1
45500: ARRAY
45501: PPUSH
45502: LD_VAR 0 16
45506: PUSH
45507: LD_INT 2
45509: ARRAY
45510: PPUSH
45511: CALL_OW 111
// continue ;
45515: GO 45007
// end ; end ; r := GetDir ( tmp ) ;
45517: LD_ADDR_VAR 0 15
45521: PUSH
45522: LD_VAR 0 13
45526: PPUSH
45527: CALL_OW 254
45531: ST_TO_ADDR
// if r = 5 then
45532: LD_VAR 0 15
45536: PUSH
45537: LD_INT 5
45539: EQUAL
45540: IFFALSE 45550
// r := 0 ;
45542: LD_ADDR_VAR 0 15
45546: PUSH
45547: LD_INT 0
45549: ST_TO_ADDR
// for j = r to 5 do
45550: LD_ADDR_VAR 0 10
45554: PUSH
45555: DOUBLE
45556: LD_VAR 0 15
45560: DEC
45561: ST_TO_ADDR
45562: LD_INT 5
45564: PUSH
45565: FOR_TO
45566: IFFALSE 45680
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
45568: LD_ADDR_VAR 0 11
45572: PUSH
45573: LD_VAR 0 13
45577: PPUSH
45578: CALL_OW 250
45582: PPUSH
45583: LD_VAR 0 10
45587: PPUSH
45588: LD_INT 2
45590: PPUSH
45591: CALL_OW 272
45595: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
45596: LD_ADDR_VAR 0 12
45600: PUSH
45601: LD_VAR 0 13
45605: PPUSH
45606: CALL_OW 251
45610: PPUSH
45611: LD_VAR 0 10
45615: PPUSH
45616: LD_INT 2
45618: PPUSH
45619: CALL_OW 273
45623: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
45624: LD_VAR 0 11
45628: PPUSH
45629: LD_VAR 0 12
45633: PPUSH
45634: CALL_OW 488
45638: PUSH
45639: LD_VAR 0 11
45643: PPUSH
45644: LD_VAR 0 12
45648: PPUSH
45649: CALL_OW 428
45653: NOT
45654: AND
45655: IFFALSE 45678
// begin ComMoveXY ( tmp , _x , _y ) ;
45657: LD_VAR 0 13
45661: PPUSH
45662: LD_VAR 0 11
45666: PPUSH
45667: LD_VAR 0 12
45671: PPUSH
45672: CALL_OW 111
// break ;
45676: GO 45680
// end ; end ;
45678: GO 45565
45680: POP
45681: POP
// end ; end ;
45682: GO 45007
45684: POP
45685: POP
// end ;
45686: LD_VAR 0 8
45690: RET
// export function BuildingTechInvented ( side , btype ) ; begin
45691: LD_INT 0
45693: PPUSH
// result := true ;
45694: LD_ADDR_VAR 0 3
45698: PUSH
45699: LD_INT 1
45701: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
45702: LD_VAR 0 2
45706: PUSH
45707: LD_INT 24
45709: DOUBLE
45710: EQUAL
45711: IFTRUE 45721
45713: LD_INT 33
45715: DOUBLE
45716: EQUAL
45717: IFTRUE 45721
45719: GO 45746
45721: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
45722: LD_ADDR_VAR 0 3
45726: PUSH
45727: LD_INT 32
45729: PPUSH
45730: LD_VAR 0 1
45734: PPUSH
45735: CALL_OW 321
45739: PUSH
45740: LD_INT 2
45742: EQUAL
45743: ST_TO_ADDR
45744: GO 46066
45746: LD_INT 20
45748: DOUBLE
45749: EQUAL
45750: IFTRUE 45754
45752: GO 45779
45754: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
45755: LD_ADDR_VAR 0 3
45759: PUSH
45760: LD_INT 6
45762: PPUSH
45763: LD_VAR 0 1
45767: PPUSH
45768: CALL_OW 321
45772: PUSH
45773: LD_INT 2
45775: EQUAL
45776: ST_TO_ADDR
45777: GO 46066
45779: LD_INT 22
45781: DOUBLE
45782: EQUAL
45783: IFTRUE 45793
45785: LD_INT 36
45787: DOUBLE
45788: EQUAL
45789: IFTRUE 45793
45791: GO 45818
45793: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
45794: LD_ADDR_VAR 0 3
45798: PUSH
45799: LD_INT 15
45801: PPUSH
45802: LD_VAR 0 1
45806: PPUSH
45807: CALL_OW 321
45811: PUSH
45812: LD_INT 2
45814: EQUAL
45815: ST_TO_ADDR
45816: GO 46066
45818: LD_INT 30
45820: DOUBLE
45821: EQUAL
45822: IFTRUE 45826
45824: GO 45851
45826: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
45827: LD_ADDR_VAR 0 3
45831: PUSH
45832: LD_INT 20
45834: PPUSH
45835: LD_VAR 0 1
45839: PPUSH
45840: CALL_OW 321
45844: PUSH
45845: LD_INT 2
45847: EQUAL
45848: ST_TO_ADDR
45849: GO 46066
45851: LD_INT 28
45853: DOUBLE
45854: EQUAL
45855: IFTRUE 45865
45857: LD_INT 21
45859: DOUBLE
45860: EQUAL
45861: IFTRUE 45865
45863: GO 45890
45865: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
45866: LD_ADDR_VAR 0 3
45870: PUSH
45871: LD_INT 21
45873: PPUSH
45874: LD_VAR 0 1
45878: PPUSH
45879: CALL_OW 321
45883: PUSH
45884: LD_INT 2
45886: EQUAL
45887: ST_TO_ADDR
45888: GO 46066
45890: LD_INT 16
45892: DOUBLE
45893: EQUAL
45894: IFTRUE 45898
45896: GO 45925
45898: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
45899: LD_ADDR_VAR 0 3
45903: PUSH
45904: LD_EXP 142
45908: PPUSH
45909: LD_VAR 0 1
45913: PPUSH
45914: CALL_OW 321
45918: PUSH
45919: LD_INT 2
45921: EQUAL
45922: ST_TO_ADDR
45923: GO 46066
45925: LD_INT 19
45927: DOUBLE
45928: EQUAL
45929: IFTRUE 45939
45931: LD_INT 23
45933: DOUBLE
45934: EQUAL
45935: IFTRUE 45939
45937: GO 45966
45939: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
45940: LD_ADDR_VAR 0 3
45944: PUSH
45945: LD_EXP 141
45949: PPUSH
45950: LD_VAR 0 1
45954: PPUSH
45955: CALL_OW 321
45959: PUSH
45960: LD_INT 2
45962: EQUAL
45963: ST_TO_ADDR
45964: GO 46066
45966: LD_INT 17
45968: DOUBLE
45969: EQUAL
45970: IFTRUE 45974
45972: GO 45999
45974: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
45975: LD_ADDR_VAR 0 3
45979: PUSH
45980: LD_INT 39
45982: PPUSH
45983: LD_VAR 0 1
45987: PPUSH
45988: CALL_OW 321
45992: PUSH
45993: LD_INT 2
45995: EQUAL
45996: ST_TO_ADDR
45997: GO 46066
45999: LD_INT 18
46001: DOUBLE
46002: EQUAL
46003: IFTRUE 46007
46005: GO 46032
46007: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
46008: LD_ADDR_VAR 0 3
46012: PUSH
46013: LD_INT 40
46015: PPUSH
46016: LD_VAR 0 1
46020: PPUSH
46021: CALL_OW 321
46025: PUSH
46026: LD_INT 2
46028: EQUAL
46029: ST_TO_ADDR
46030: GO 46066
46032: LD_INT 27
46034: DOUBLE
46035: EQUAL
46036: IFTRUE 46040
46038: GO 46065
46040: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
46041: LD_ADDR_VAR 0 3
46045: PUSH
46046: LD_INT 35
46048: PPUSH
46049: LD_VAR 0 1
46053: PPUSH
46054: CALL_OW 321
46058: PUSH
46059: LD_INT 2
46061: EQUAL
46062: ST_TO_ADDR
46063: GO 46066
46065: POP
// end ;
46066: LD_VAR 0 3
46070: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
46071: LD_INT 0
46073: PPUSH
46074: PPUSH
46075: PPUSH
46076: PPUSH
46077: PPUSH
46078: PPUSH
46079: PPUSH
46080: PPUSH
46081: PPUSH
46082: PPUSH
46083: PPUSH
// result := false ;
46084: LD_ADDR_VAR 0 6
46088: PUSH
46089: LD_INT 0
46091: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
46092: LD_VAR 0 1
46096: NOT
46097: PUSH
46098: LD_VAR 0 1
46102: PPUSH
46103: CALL_OW 266
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: LD_INT 1
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: IN
46118: NOT
46119: OR
46120: PUSH
46121: LD_VAR 0 2
46125: NOT
46126: OR
46127: PUSH
46128: LD_VAR 0 5
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 3
46144: PUSH
46145: LD_INT 4
46147: PUSH
46148: LD_INT 5
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: IN
46159: NOT
46160: OR
46161: PUSH
46162: LD_VAR 0 3
46166: PPUSH
46167: LD_VAR 0 4
46171: PPUSH
46172: CALL_OW 488
46176: NOT
46177: OR
46178: IFFALSE 46182
// exit ;
46180: GO 46918
// side := GetSide ( depot ) ;
46182: LD_ADDR_VAR 0 9
46186: PUSH
46187: LD_VAR 0 1
46191: PPUSH
46192: CALL_OW 255
46196: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
46197: LD_VAR 0 9
46201: PPUSH
46202: LD_VAR 0 2
46206: PPUSH
46207: CALL 45691 0 2
46211: NOT
46212: IFFALSE 46216
// exit ;
46214: GO 46918
// pom := GetBase ( depot ) ;
46216: LD_ADDR_VAR 0 10
46220: PUSH
46221: LD_VAR 0 1
46225: PPUSH
46226: CALL_OW 274
46230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
46231: LD_ADDR_VAR 0 11
46235: PUSH
46236: LD_VAR 0 2
46240: PPUSH
46241: LD_VAR 0 1
46245: PPUSH
46246: CALL_OW 248
46250: PPUSH
46251: CALL_OW 450
46255: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
46256: LD_VAR 0 10
46260: PPUSH
46261: LD_INT 1
46263: PPUSH
46264: CALL_OW 275
46268: PUSH
46269: LD_VAR 0 11
46273: PUSH
46274: LD_INT 1
46276: ARRAY
46277: GREATEREQUAL
46278: PUSH
46279: LD_VAR 0 10
46283: PPUSH
46284: LD_INT 2
46286: PPUSH
46287: CALL_OW 275
46291: PUSH
46292: LD_VAR 0 11
46296: PUSH
46297: LD_INT 2
46299: ARRAY
46300: GREATEREQUAL
46301: AND
46302: PUSH
46303: LD_VAR 0 10
46307: PPUSH
46308: LD_INT 3
46310: PPUSH
46311: CALL_OW 275
46315: PUSH
46316: LD_VAR 0 11
46320: PUSH
46321: LD_INT 3
46323: ARRAY
46324: GREATEREQUAL
46325: AND
46326: NOT
46327: IFFALSE 46331
// exit ;
46329: GO 46918
// if GetBType ( depot ) = b_depot then
46331: LD_VAR 0 1
46335: PPUSH
46336: CALL_OW 266
46340: PUSH
46341: LD_INT 0
46343: EQUAL
46344: IFFALSE 46356
// dist := 28 else
46346: LD_ADDR_VAR 0 14
46350: PUSH
46351: LD_INT 28
46353: ST_TO_ADDR
46354: GO 46364
// dist := 36 ;
46356: LD_ADDR_VAR 0 14
46360: PUSH
46361: LD_INT 36
46363: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
46364: LD_VAR 0 1
46368: PPUSH
46369: LD_VAR 0 3
46373: PPUSH
46374: LD_VAR 0 4
46378: PPUSH
46379: CALL_OW 297
46383: PUSH
46384: LD_VAR 0 14
46388: GREATER
46389: IFFALSE 46393
// exit ;
46391: GO 46918
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
46393: LD_ADDR_VAR 0 12
46397: PUSH
46398: LD_VAR 0 2
46402: PPUSH
46403: LD_VAR 0 3
46407: PPUSH
46408: LD_VAR 0 4
46412: PPUSH
46413: LD_VAR 0 5
46417: PPUSH
46418: LD_VAR 0 1
46422: PPUSH
46423: CALL_OW 248
46427: PPUSH
46428: LD_INT 0
46430: PPUSH
46431: CALL 46923 0 6
46435: ST_TO_ADDR
// if not hexes then
46436: LD_VAR 0 12
46440: NOT
46441: IFFALSE 46445
// exit ;
46443: GO 46918
// hex := GetHexInfo ( x , y ) ;
46445: LD_ADDR_VAR 0 15
46449: PUSH
46450: LD_VAR 0 3
46454: PPUSH
46455: LD_VAR 0 4
46459: PPUSH
46460: CALL_OW 546
46464: ST_TO_ADDR
// if hex [ 1 ] then
46465: LD_VAR 0 15
46469: PUSH
46470: LD_INT 1
46472: ARRAY
46473: IFFALSE 46477
// exit ;
46475: GO 46918
// height := hex [ 2 ] ;
46477: LD_ADDR_VAR 0 13
46481: PUSH
46482: LD_VAR 0 15
46486: PUSH
46487: LD_INT 2
46489: ARRAY
46490: ST_TO_ADDR
// for i = 1 to hexes do
46491: LD_ADDR_VAR 0 7
46495: PUSH
46496: DOUBLE
46497: LD_INT 1
46499: DEC
46500: ST_TO_ADDR
46501: LD_VAR 0 12
46505: PUSH
46506: FOR_TO
46507: IFFALSE 46837
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
46509: LD_VAR 0 12
46513: PUSH
46514: LD_VAR 0 7
46518: ARRAY
46519: PUSH
46520: LD_INT 1
46522: ARRAY
46523: PPUSH
46524: LD_VAR 0 12
46528: PUSH
46529: LD_VAR 0 7
46533: ARRAY
46534: PUSH
46535: LD_INT 2
46537: ARRAY
46538: PPUSH
46539: CALL_OW 488
46543: NOT
46544: PUSH
46545: LD_VAR 0 12
46549: PUSH
46550: LD_VAR 0 7
46554: ARRAY
46555: PUSH
46556: LD_INT 1
46558: ARRAY
46559: PPUSH
46560: LD_VAR 0 12
46564: PUSH
46565: LD_VAR 0 7
46569: ARRAY
46570: PUSH
46571: LD_INT 2
46573: ARRAY
46574: PPUSH
46575: CALL_OW 428
46579: PUSH
46580: LD_INT 0
46582: GREATER
46583: OR
46584: PUSH
46585: LD_VAR 0 12
46589: PUSH
46590: LD_VAR 0 7
46594: ARRAY
46595: PUSH
46596: LD_INT 1
46598: ARRAY
46599: PPUSH
46600: LD_VAR 0 12
46604: PUSH
46605: LD_VAR 0 7
46609: ARRAY
46610: PUSH
46611: LD_INT 2
46613: ARRAY
46614: PPUSH
46615: CALL_OW 351
46619: OR
46620: IFFALSE 46626
// exit ;
46622: POP
46623: POP
46624: GO 46918
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46626: LD_ADDR_VAR 0 8
46630: PUSH
46631: LD_VAR 0 12
46635: PUSH
46636: LD_VAR 0 7
46640: ARRAY
46641: PUSH
46642: LD_INT 1
46644: ARRAY
46645: PPUSH
46646: LD_VAR 0 12
46650: PUSH
46651: LD_VAR 0 7
46655: ARRAY
46656: PUSH
46657: LD_INT 2
46659: ARRAY
46660: PPUSH
46661: CALL_OW 546
46665: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
46666: LD_VAR 0 8
46670: PUSH
46671: LD_INT 1
46673: ARRAY
46674: PUSH
46675: LD_VAR 0 8
46679: PUSH
46680: LD_INT 2
46682: ARRAY
46683: PUSH
46684: LD_VAR 0 13
46688: PUSH
46689: LD_INT 2
46691: PLUS
46692: GREATER
46693: OR
46694: PUSH
46695: LD_VAR 0 8
46699: PUSH
46700: LD_INT 2
46702: ARRAY
46703: PUSH
46704: LD_VAR 0 13
46708: PUSH
46709: LD_INT 2
46711: MINUS
46712: LESS
46713: OR
46714: PUSH
46715: LD_VAR 0 8
46719: PUSH
46720: LD_INT 3
46722: ARRAY
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 8
46729: PUSH
46730: LD_INT 9
46732: PUSH
46733: LD_INT 10
46735: PUSH
46736: LD_INT 11
46738: PUSH
46739: LD_INT 12
46741: PUSH
46742: LD_INT 13
46744: PUSH
46745: LD_INT 16
46747: PUSH
46748: LD_INT 17
46750: PUSH
46751: LD_INT 18
46753: PUSH
46754: LD_INT 19
46756: PUSH
46757: LD_INT 20
46759: PUSH
46760: LD_INT 21
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: LIST
46769: LIST
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: IN
46778: NOT
46779: OR
46780: PUSH
46781: LD_VAR 0 8
46785: PUSH
46786: LD_INT 5
46788: ARRAY
46789: NOT
46790: OR
46791: PUSH
46792: LD_VAR 0 8
46796: PUSH
46797: LD_INT 6
46799: ARRAY
46800: PUSH
46801: LD_INT 1
46803: PUSH
46804: LD_INT 2
46806: PUSH
46807: LD_INT 7
46809: PUSH
46810: LD_INT 9
46812: PUSH
46813: LD_INT 10
46815: PUSH
46816: LD_INT 11
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: IN
46827: NOT
46828: OR
46829: IFFALSE 46835
// exit ;
46831: POP
46832: POP
46833: GO 46918
// end ;
46835: GO 46506
46837: POP
46838: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
46839: LD_VAR 0 9
46843: PPUSH
46844: LD_VAR 0 3
46848: PPUSH
46849: LD_VAR 0 4
46853: PPUSH
46854: LD_INT 20
46856: PPUSH
46857: CALL 38864 0 4
46861: PUSH
46862: LD_INT 4
46864: ARRAY
46865: IFFALSE 46869
// exit ;
46867: GO 46918
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
46869: LD_VAR 0 2
46873: PUSH
46874: LD_INT 29
46876: PUSH
46877: LD_INT 30
46879: PUSH
46880: EMPTY
46881: LIST
46882: LIST
46883: IN
46884: PUSH
46885: LD_VAR 0 3
46889: PPUSH
46890: LD_VAR 0 4
46894: PPUSH
46895: LD_VAR 0 9
46899: PPUSH
46900: CALL_OW 440
46904: NOT
46905: AND
46906: IFFALSE 46910
// exit ;
46908: GO 46918
// result := true ;
46910: LD_ADDR_VAR 0 6
46914: PUSH
46915: LD_INT 1
46917: ST_TO_ADDR
// end ;
46918: LD_VAR 0 6
46922: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
46923: LD_INT 0
46925: PPUSH
46926: PPUSH
46927: PPUSH
46928: PPUSH
46929: PPUSH
46930: PPUSH
46931: PPUSH
46932: PPUSH
46933: PPUSH
46934: PPUSH
46935: PPUSH
46936: PPUSH
46937: PPUSH
46938: PPUSH
46939: PPUSH
46940: PPUSH
46941: PPUSH
46942: PPUSH
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
46953: PPUSH
46954: PPUSH
46955: PPUSH
46956: PPUSH
46957: PPUSH
46958: PPUSH
46959: PPUSH
46960: PPUSH
46961: PPUSH
46962: PPUSH
46963: PPUSH
46964: PPUSH
46965: PPUSH
46966: PPUSH
46967: PPUSH
46968: PPUSH
46969: PPUSH
46970: PPUSH
46971: PPUSH
46972: PPUSH
46973: PPUSH
46974: PPUSH
46975: PPUSH
46976: PPUSH
46977: PPUSH
46978: PPUSH
46979: PPUSH
46980: PPUSH
46981: PPUSH
46982: PPUSH
// result = [ ] ;
46983: LD_ADDR_VAR 0 7
46987: PUSH
46988: EMPTY
46989: ST_TO_ADDR
// temp_list = [ ] ;
46990: LD_ADDR_VAR 0 9
46994: PUSH
46995: EMPTY
46996: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
46997: LD_VAR 0 4
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: PUSH
47008: LD_INT 2
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 4
47016: PUSH
47017: LD_INT 5
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: IN
47028: NOT
47029: PUSH
47030: LD_VAR 0 1
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 1
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: IN
47045: PUSH
47046: LD_VAR 0 5
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 2
47056: PUSH
47057: LD_INT 3
47059: PUSH
47060: EMPTY
47061: LIST
47062: LIST
47063: LIST
47064: IN
47065: NOT
47066: AND
47067: OR
47068: IFFALSE 47072
// exit ;
47070: GO 65463
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
47072: LD_VAR 0 1
47076: PUSH
47077: LD_INT 6
47079: PUSH
47080: LD_INT 7
47082: PUSH
47083: LD_INT 8
47085: PUSH
47086: LD_INT 13
47088: PUSH
47089: LD_INT 12
47091: PUSH
47092: LD_INT 15
47094: PUSH
47095: LD_INT 11
47097: PUSH
47098: LD_INT 14
47100: PUSH
47101: LD_INT 10
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: LIST
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: LIST
47113: LIST
47114: IN
47115: IFFALSE 47125
// btype = b_lab ;
47117: LD_ADDR_VAR 0 1
47121: PUSH
47122: LD_INT 6
47124: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
47125: LD_VAR 0 6
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: LIST
47143: IN
47144: NOT
47145: PUSH
47146: LD_VAR 0 1
47150: PUSH
47151: LD_INT 0
47153: PUSH
47154: LD_INT 1
47156: PUSH
47157: LD_INT 2
47159: PUSH
47160: LD_INT 3
47162: PUSH
47163: LD_INT 6
47165: PUSH
47166: LD_INT 36
47168: PUSH
47169: LD_INT 4
47171: PUSH
47172: LD_INT 5
47174: PUSH
47175: LD_INT 31
47177: PUSH
47178: LD_INT 32
47180: PUSH
47181: LD_INT 33
47183: PUSH
47184: EMPTY
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: IN
47197: NOT
47198: PUSH
47199: LD_VAR 0 6
47203: PUSH
47204: LD_INT 1
47206: EQUAL
47207: AND
47208: OR
47209: PUSH
47210: LD_VAR 0 1
47214: PUSH
47215: LD_INT 2
47217: PUSH
47218: LD_INT 3
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: IN
47225: NOT
47226: PUSH
47227: LD_VAR 0 6
47231: PUSH
47232: LD_INT 2
47234: EQUAL
47235: AND
47236: OR
47237: IFFALSE 47247
// mode = 0 ;
47239: LD_ADDR_VAR 0 6
47243: PUSH
47244: LD_INT 0
47246: ST_TO_ADDR
// case mode of 0 :
47247: LD_VAR 0 6
47251: PUSH
47252: LD_INT 0
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47260
47258: GO 58713
47260: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47261: LD_ADDR_VAR 0 11
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: LD_INT 0
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 1
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 0
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 1
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: NEG
47343: PUSH
47344: LD_INT 2
47346: NEG
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: LD_INT 1
47368: NEG
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: LD_INT 3
47420: PUSH
47421: EMPTY
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 1
47427: NEG
47428: PUSH
47429: LD_INT 2
47431: PUSH
47432: EMPTY
47433: LIST
47434: LIST
47435: PUSH
47436: EMPTY
47437: LIST
47438: LIST
47439: LIST
47440: LIST
47441: LIST
47442: LIST
47443: LIST
47444: LIST
47445: LIST
47446: LIST
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47454: LD_ADDR_VAR 0 12
47458: PUSH
47459: LD_INT 0
47461: PUSH
47462: LD_INT 0
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 0
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 1
47512: NEG
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 1
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: LD_INT 1
47535: PUSH
47536: LD_INT 1
47538: NEG
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 2
47546: PUSH
47547: LD_INT 0
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 2
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 1
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 2
47577: NEG
47578: PUSH
47579: LD_INT 0
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 2
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: NEG
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: PUSH
47605: EMPTY
47606: LIST
47607: LIST
47608: PUSH
47609: LD_INT 3
47611: NEG
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 3
47622: NEG
47623: PUSH
47624: LD_INT 1
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47650: LD_ADDR_VAR 0 13
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: LD_INT 2
47735: NEG
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 2
47743: PUSH
47744: LD_INT 1
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 2
47753: PUSH
47754: LD_INT 2
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: LD_INT 2
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: NEG
47774: PUSH
47775: LD_INT 1
47777: NEG
47778: PUSH
47779: EMPTY
47780: LIST
47781: LIST
47782: PUSH
47783: LD_INT 2
47785: NEG
47786: PUSH
47787: LD_INT 2
47789: NEG
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 2
47797: NEG
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 3
47809: NEG
47810: PUSH
47811: LD_INT 2
47813: NEG
47814: PUSH
47815: EMPTY
47816: LIST
47817: LIST
47818: PUSH
47819: LD_INT 3
47821: NEG
47822: PUSH
47823: LD_INT 3
47825: NEG
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: LIST
47836: LIST
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47849: LD_ADDR_VAR 0 14
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: EMPTY
47861: LIST
47862: LIST
47863: PUSH
47864: LD_INT 0
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: EMPTY
47872: LIST
47873: LIST
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 0
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 1
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 0
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PUSH
47905: LD_INT 1
47907: NEG
47908: PUSH
47909: LD_INT 0
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: LD_INT 1
47922: NEG
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 2
47934: NEG
47935: PUSH
47936: EMPTY
47937: LIST
47938: LIST
47939: PUSH
47940: LD_INT 0
47942: PUSH
47943: LD_INT 2
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: PUSH
47965: LD_INT 2
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: PUSH
47972: LD_INT 0
47974: PUSH
47975: LD_INT 2
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 1
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: LD_INT 3
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 1
48018: PUSH
48019: LD_INT 2
48021: NEG
48022: PUSH
48023: EMPTY
48024: LIST
48025: LIST
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: LIST
48031: LIST
48032: LIST
48033: LIST
48034: LIST
48035: LIST
48036: LIST
48037: LIST
48038: LIST
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48045: LD_ADDR_VAR 0 15
48049: PUSH
48050: LD_INT 0
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 0
48062: PUSH
48063: LD_INT 1
48065: NEG
48066: PUSH
48067: EMPTY
48068: LIST
48069: LIST
48070: PUSH
48071: LD_INT 1
48073: PUSH
48074: LD_INT 0
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 1
48083: PUSH
48084: LD_INT 1
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 1
48103: NEG
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: LD_INT 1
48129: NEG
48130: PUSH
48131: EMPTY
48132: LIST
48133: LIST
48134: PUSH
48135: LD_INT 2
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 2
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: LD_INT 1
48161: PUSH
48162: EMPTY
48163: LIST
48164: LIST
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: LD_INT 0
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: LD_INT 2
48179: NEG
48180: PUSH
48181: LD_INT 1
48183: NEG
48184: PUSH
48185: EMPTY
48186: LIST
48187: LIST
48188: PUSH
48189: LD_INT 2
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: EMPTY
48197: LIST
48198: LIST
48199: PUSH
48200: LD_INT 3
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: PUSH
48210: LD_INT 3
48212: PUSH
48213: LD_INT 1
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: LIST
48224: LIST
48225: LIST
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: LIST
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48238: LD_ADDR_VAR 0 16
48242: PUSH
48243: LD_INT 0
48245: PUSH
48246: LD_INT 0
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: EMPTY
48261: LIST
48262: LIST
48263: PUSH
48264: LD_INT 1
48266: PUSH
48267: LD_INT 0
48269: PUSH
48270: EMPTY
48271: LIST
48272: LIST
48273: PUSH
48274: LD_INT 1
48276: PUSH
48277: LD_INT 1
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 0
48286: PUSH
48287: LD_INT 1
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: LD_INT 0
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 1
48307: NEG
48308: PUSH
48309: LD_INT 1
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 2
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 2
48331: PUSH
48332: LD_INT 1
48334: PUSH
48335: EMPTY
48336: LIST
48337: LIST
48338: PUSH
48339: LD_INT 2
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: EMPTY
48346: LIST
48347: LIST
48348: PUSH
48349: LD_INT 1
48351: PUSH
48352: LD_INT 2
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 2
48361: NEG
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: LD_INT 2
48377: NEG
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 3
48385: PUSH
48386: LD_INT 2
48388: PUSH
48389: EMPTY
48390: LIST
48391: LIST
48392: PUSH
48393: LD_INT 3
48395: PUSH
48396: LD_INT 3
48398: PUSH
48399: EMPTY
48400: LIST
48401: LIST
48402: PUSH
48403: LD_INT 2
48405: PUSH
48406: LD_INT 3
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48431: LD_ADDR_VAR 0 17
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: NEG
48452: PUSH
48453: EMPTY
48454: LIST
48455: LIST
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 1
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 0
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 1
48489: NEG
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: EMPTY
48495: LIST
48496: LIST
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 1
48512: NEG
48513: PUSH
48514: LD_INT 2
48516: NEG
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 0
48524: PUSH
48525: LD_INT 2
48527: NEG
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: LD_INT 1
48538: NEG
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: LD_INT 0
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 0
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48661: LD_ADDR_VAR 0 18
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: LD_INT 1
48702: PUSH
48703: EMPTY
48704: LIST
48705: LIST
48706: PUSH
48707: LD_INT 0
48709: PUSH
48710: LD_INT 1
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 1
48719: NEG
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 1
48730: NEG
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: PUSH
48740: LD_INT 1
48742: NEG
48743: PUSH
48744: LD_INT 2
48746: NEG
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 0
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 1
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 2
48776: PUSH
48777: LD_INT 0
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 2
48786: PUSH
48787: LD_INT 1
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 2
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 1
48806: PUSH
48807: LD_INT 2
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 0
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: LD_INT 1
48830: PUSH
48831: EMPTY
48832: LIST
48833: LIST
48834: PUSH
48835: LD_INT 2
48837: NEG
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: EMPTY
48843: LIST
48844: LIST
48845: PUSH
48846: LD_INT 2
48848: NEG
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 2
48860: NEG
48861: PUSH
48862: LD_INT 2
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: LIST
48874: LIST
48875: LIST
48876: LIST
48877: LIST
48878: LIST
48879: LIST
48880: LIST
48881: LIST
48882: LIST
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48891: LD_ADDR_VAR 0 19
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: LD_INT 2
48976: NEG
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: LD_INT 2
48987: NEG
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 1
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 2
49006: PUSH
49007: LD_INT 0
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: LD_INT 2
49016: PUSH
49017: LD_INT 1
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: LD_INT 2
49026: PUSH
49027: LD_INT 2
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 1
49036: PUSH
49037: LD_INT 2
49039: PUSH
49040: EMPTY
49041: LIST
49042: LIST
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: LD_INT 2
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: LD_INT 1
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: NEG
49068: PUSH
49069: LD_INT 0
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: LD_INT 1
49082: NEG
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: PUSH
49088: LD_INT 2
49090: NEG
49091: PUSH
49092: LD_INT 2
49094: NEG
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: LIST
49106: LIST
49107: LIST
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49121: LD_ADDR_VAR 0 20
49125: PUSH
49126: LD_INT 0
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: PUSH
49160: LD_INT 1
49162: PUSH
49163: EMPTY
49164: LIST
49165: LIST
49166: PUSH
49167: LD_INT 0
49169: PUSH
49170: LD_INT 1
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 1
49179: NEG
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 1
49190: NEG
49191: PUSH
49192: LD_INT 1
49194: NEG
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 2
49206: NEG
49207: PUSH
49208: EMPTY
49209: LIST
49210: LIST
49211: PUSH
49212: LD_INT 0
49214: PUSH
49215: LD_INT 2
49217: NEG
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 1
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: LD_INT 2
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 2
49246: PUSH
49247: LD_INT 1
49249: PUSH
49250: EMPTY
49251: LIST
49252: LIST
49253: PUSH
49254: LD_INT 2
49256: PUSH
49257: LD_INT 2
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 1
49266: PUSH
49267: LD_INT 2
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 0
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: LD_INT 2
49297: NEG
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: PUSH
49306: LD_INT 2
49308: NEG
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 2
49320: NEG
49321: PUSH
49322: LD_INT 2
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: LIST
49342: LIST
49343: LIST
49344: LIST
49345: LIST
49346: LIST
49347: LIST
49348: LIST
49349: LIST
49350: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49351: LD_ADDR_VAR 0 21
49355: PUSH
49356: LD_INT 0
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 1
49371: NEG
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: PUSH
49390: LD_INT 1
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 0
49399: PUSH
49400: LD_INT 1
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 1
49409: NEG
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: EMPTY
49415: LIST
49416: LIST
49417: PUSH
49418: LD_INT 1
49420: NEG
49421: PUSH
49422: LD_INT 1
49424: NEG
49425: PUSH
49426: EMPTY
49427: LIST
49428: LIST
49429: PUSH
49430: LD_INT 1
49432: NEG
49433: PUSH
49434: LD_INT 2
49436: NEG
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: PUSH
49456: LD_INT 1
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 2
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 2
49486: PUSH
49487: LD_INT 2
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 1
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 2
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: NEG
49517: PUSH
49518: LD_INT 1
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 2
49527: NEG
49528: PUSH
49529: LD_INT 0
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: LD_INT 1
49542: NEG
49543: PUSH
49544: EMPTY
49545: LIST
49546: LIST
49547: PUSH
49548: LD_INT 2
49550: NEG
49551: PUSH
49552: LD_INT 2
49554: NEG
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: LIST
49564: LIST
49565: LIST
49566: LIST
49567: LIST
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49581: LD_ADDR_VAR 0 22
49585: PUSH
49586: LD_INT 0
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 1
49601: NEG
49602: PUSH
49603: EMPTY
49604: LIST
49605: LIST
49606: PUSH
49607: LD_INT 1
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: PUSH
49620: LD_INT 1
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 0
49629: PUSH
49630: LD_INT 1
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: NEG
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 1
49662: NEG
49663: PUSH
49664: LD_INT 2
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 0
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 1
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 2
49696: PUSH
49697: LD_INT 0
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 2
49706: PUSH
49707: LD_INT 1
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: PUSH
49714: LD_INT 2
49716: PUSH
49717: LD_INT 2
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 1
49726: PUSH
49727: LD_INT 2
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: LD_INT 2
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: LD_INT 1
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: LD_INT 2
49757: NEG
49758: PUSH
49759: LD_INT 0
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 2
49768: NEG
49769: PUSH
49770: LD_INT 1
49772: NEG
49773: PUSH
49774: EMPTY
49775: LIST
49776: LIST
49777: PUSH
49778: LD_INT 2
49780: NEG
49781: PUSH
49782: LD_INT 2
49784: NEG
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49811: LD_ADDR_VAR 0 23
49815: PUSH
49816: LD_INT 0
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 1
49839: PUSH
49840: LD_INT 0
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: PUSH
49847: LD_INT 1
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: EMPTY
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 0
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 1
49869: NEG
49870: PUSH
49871: LD_INT 0
49873: PUSH
49874: EMPTY
49875: LIST
49876: LIST
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: LD_INT 1
49884: NEG
49885: PUSH
49886: EMPTY
49887: LIST
49888: LIST
49889: PUSH
49890: LD_INT 1
49892: NEG
49893: PUSH
49894: LD_INT 2
49896: NEG
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 0
49904: PUSH
49905: LD_INT 2
49907: NEG
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 1
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 2
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: LD_INT 1
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: PUSH
49944: LD_INT 2
49946: PUSH
49947: LD_INT 2
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 1
49956: PUSH
49957: LD_INT 2
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 0
49966: PUSH
49967: LD_INT 2
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 1
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: NEG
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: EMPTY
49993: LIST
49994: LIST
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: LD_INT 1
50002: NEG
50003: PUSH
50004: EMPTY
50005: LIST
50006: LIST
50007: PUSH
50008: LD_INT 2
50010: NEG
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: LD_INT 2
50022: NEG
50023: PUSH
50024: LD_INT 3
50026: NEG
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: PUSH
50032: LD_INT 1
50034: NEG
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: EMPTY
50041: LIST
50042: LIST
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: LD_INT 2
50049: NEG
50050: PUSH
50051: EMPTY
50052: LIST
50053: LIST
50054: PUSH
50055: LD_INT 2
50057: PUSH
50058: LD_INT 1
50060: NEG
50061: PUSH
50062: EMPTY
50063: LIST
50064: LIST
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: LIST
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: LIST
50088: LIST
50089: LIST
50090: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
50091: LD_ADDR_VAR 0 24
50095: PUSH
50096: LD_INT 0
50098: PUSH
50099: LD_INT 0
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 1
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: LD_INT 0
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: PUSH
50130: LD_INT 1
50132: PUSH
50133: EMPTY
50134: LIST
50135: LIST
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: PUSH
50147: LD_INT 1
50149: NEG
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 1
50172: NEG
50173: PUSH
50174: LD_INT 2
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 0
50184: PUSH
50185: LD_INT 2
50187: NEG
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 1
50195: PUSH
50196: LD_INT 1
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 0
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 2
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 2
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: LD_INT 0
50246: PUSH
50247: LD_INT 2
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 2
50267: NEG
50268: PUSH
50269: LD_INT 0
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 2
50278: NEG
50279: PUSH
50280: LD_INT 1
50282: NEG
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: NEG
50291: PUSH
50292: LD_INT 2
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 1
50302: PUSH
50303: LD_INT 2
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 1
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 3
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 3
50334: PUSH
50335: LD_INT 2
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
50367: LD_ADDR_VAR 0 25
50371: PUSH
50372: LD_INT 0
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: LD_INT 1
50387: NEG
50388: PUSH
50389: EMPTY
50390: LIST
50391: LIST
50392: PUSH
50393: LD_INT 1
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 0
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 1
50425: NEG
50426: PUSH
50427: LD_INT 0
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 1
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 0
50460: PUSH
50461: LD_INT 2
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 1
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 2
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: LD_INT 2
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 1
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: LD_INT 2
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 2
50543: NEG
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 2
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: LD_INT 2
50570: NEG
50571: PUSH
50572: EMPTY
50573: LIST
50574: LIST
50575: PUSH
50576: LD_INT 3
50578: PUSH
50579: LD_INT 1
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 3
50588: PUSH
50589: LD_INT 2
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: PUSH
50599: LD_INT 3
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: LD_INT 3
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: EMPTY
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50641: LD_ADDR_VAR 0 26
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 0
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 1
50669: PUSH
50670: LD_INT 0
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 1
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: LD_INT 0
50689: PUSH
50690: LD_INT 1
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: LD_INT 0
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 1
50710: NEG
50711: PUSH
50712: LD_INT 1
50714: NEG
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: PUSH
50732: LD_INT 0
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: EMPTY
50740: LIST
50741: LIST
50742: PUSH
50743: LD_INT 1
50745: PUSH
50746: LD_INT 1
50748: NEG
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 2
50756: PUSH
50757: LD_INT 0
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 2
50776: PUSH
50777: LD_INT 2
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: LD_INT 2
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: EMPTY
50801: LIST
50802: LIST
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: LD_INT 1
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 2
50817: NEG
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: NEG
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: EMPTY
50847: LIST
50848: LIST
50849: PUSH
50850: LD_INT 2
50852: PUSH
50853: LD_INT 3
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: PUSH
50860: LD_INT 1
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: PUSH
50870: LD_INT 1
50872: NEG
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 2
50883: NEG
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50917: LD_ADDR_VAR 0 27
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 1
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 2
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: PUSH
51063: LD_INT 2
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 2
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 1
51082: NEG
51083: PUSH
51084: LD_INT 1
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: NEG
51094: PUSH
51095: LD_INT 0
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: NEG
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 2
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: NEG
51121: PUSH
51122: EMPTY
51123: LIST
51124: LIST
51125: PUSH
51126: LD_INT 1
51128: NEG
51129: PUSH
51130: LD_INT 2
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: PUSH
51137: LD_INT 2
51139: NEG
51140: PUSH
51141: LD_INT 1
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 3
51150: NEG
51151: PUSH
51152: LD_INT 1
51154: NEG
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: LD_INT 2
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51197: LD_ADDR_VAR 0 28
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 1
51278: NEG
51279: PUSH
51280: LD_INT 2
51282: NEG
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 0
51290: PUSH
51291: LD_INT 2
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 1
51304: NEG
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 2
51312: PUSH
51313: LD_INT 0
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 1
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 2
51332: PUSH
51333: LD_INT 2
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 0
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 1
51362: NEG
51363: PUSH
51364: LD_INT 1
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: NEG
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 2
51384: NEG
51385: PUSH
51386: LD_INT 1
51388: NEG
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 2
51396: NEG
51397: PUSH
51398: LD_INT 2
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 2
51408: NEG
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: LD_INT 1
51420: NEG
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: EMPTY
51427: LIST
51428: LIST
51429: PUSH
51430: LD_INT 3
51432: NEG
51433: PUSH
51434: LD_INT 1
51436: NEG
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 3
51444: NEG
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51479: LD_ADDR_VAR 0 29
51483: PUSH
51484: LD_INT 0
51486: PUSH
51487: LD_INT 0
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 0
51496: PUSH
51497: LD_INT 1
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 1
51507: PUSH
51508: LD_INT 0
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: LD_INT 1
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: NEG
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 1
51548: NEG
51549: PUSH
51550: LD_INT 1
51552: NEG
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 2
51564: NEG
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 2
51575: NEG
51576: PUSH
51577: EMPTY
51578: LIST
51579: LIST
51580: PUSH
51581: LD_INT 1
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 2
51604: PUSH
51605: LD_INT 1
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 1
51614: PUSH
51615: LD_INT 2
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 2
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 1
51634: NEG
51635: PUSH
51636: LD_INT 1
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 2
51657: NEG
51658: PUSH
51659: LD_INT 2
51661: NEG
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 2
51669: NEG
51670: PUSH
51671: LD_INT 3
51673: NEG
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: LD_INT 1
51684: NEG
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 3
51692: PUSH
51693: LD_INT 1
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 3
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: NEG
51713: PUSH
51714: LD_INT 2
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 3
51723: NEG
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: EMPTY
51734: LIST
51735: LIST
51736: LIST
51737: LIST
51738: LIST
51739: LIST
51740: LIST
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51758: LD_ADDR_VAR 0 30
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 0
51806: PUSH
51807: LD_INT 1
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 1
51827: NEG
51828: PUSH
51829: LD_INT 1
51831: NEG
51832: PUSH
51833: EMPTY
51834: LIST
51835: LIST
51836: PUSH
51837: LD_INT 1
51839: NEG
51840: PUSH
51841: LD_INT 2
51843: NEG
51844: PUSH
51845: EMPTY
51846: LIST
51847: LIST
51848: PUSH
51849: LD_INT 0
51851: PUSH
51852: LD_INT 2
51854: NEG
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 1
51865: NEG
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 2
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 2
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 1
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 1
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: LD_INT 0
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 1
51947: NEG
51948: PUSH
51949: LD_INT 3
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 2
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 3
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: NEG
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 3
52001: NEG
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52036: LD_ADDR_VAR 0 31
52040: PUSH
52041: LD_INT 0
52043: PUSH
52044: LD_INT 0
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: LD_INT 1
52056: NEG
52057: PUSH
52058: EMPTY
52059: LIST
52060: LIST
52061: PUSH
52062: LD_INT 1
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: EMPTY
52069: LIST
52070: LIST
52071: PUSH
52072: LD_INT 1
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 1
52087: PUSH
52088: EMPTY
52089: LIST
52090: LIST
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: LD_INT 0
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: LD_INT 1
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: PUSH
52119: LD_INT 2
52121: NEG
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 1
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PUSH
52138: LD_INT 2
52140: PUSH
52141: LD_INT 0
52143: PUSH
52144: EMPTY
52145: LIST
52146: LIST
52147: PUSH
52148: LD_INT 2
52150: PUSH
52151: LD_INT 1
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: LD_INT 2
52160: PUSH
52161: LD_INT 2
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: PUSH
52171: LD_INT 2
52173: PUSH
52174: EMPTY
52175: LIST
52176: LIST
52177: PUSH
52178: LD_INT 0
52180: PUSH
52181: LD_INT 2
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 1
52190: NEG
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: LD_INT 1
52205: NEG
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 2
52213: NEG
52214: PUSH
52215: LD_INT 2
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 2
52225: NEG
52226: PUSH
52227: LD_INT 3
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 2
52237: PUSH
52238: LD_INT 1
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 1
52258: PUSH
52259: LD_INT 3
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: NEG
52269: PUSH
52270: LD_INT 2
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 3
52279: NEG
52280: PUSH
52281: LD_INT 2
52283: NEG
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: LIST
52293: LIST
52294: LIST
52295: LIST
52296: LIST
52297: LIST
52298: LIST
52299: LIST
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52314: LD_ADDR_VAR 0 32
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 0
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 0
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 1
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 1
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 0
52362: PUSH
52363: LD_INT 1
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: NEG
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 1
52383: NEG
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 1
52395: NEG
52396: PUSH
52397: LD_INT 2
52399: NEG
52400: PUSH
52401: EMPTY
52402: LIST
52403: LIST
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: LD_INT 2
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: EMPTY
52424: LIST
52425: LIST
52426: PUSH
52427: LD_INT 2
52429: PUSH
52430: LD_INT 1
52432: PUSH
52433: EMPTY
52434: LIST
52435: LIST
52436: PUSH
52437: LD_INT 2
52439: PUSH
52440: LD_INT 2
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 1
52449: PUSH
52450: LD_INT 2
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 0
52459: PUSH
52460: LD_INT 2
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: NEG
52470: PUSH
52471: LD_INT 1
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: NEG
52481: PUSH
52482: LD_INT 0
52484: PUSH
52485: EMPTY
52486: LIST
52487: LIST
52488: PUSH
52489: LD_INT 2
52491: NEG
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 1
52503: NEG
52504: PUSH
52505: LD_INT 3
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 1
52515: PUSH
52516: LD_INT 2
52518: NEG
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: PUSH
52524: LD_INT 3
52526: PUSH
52527: LD_INT 2
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: LD_INT 3
52539: PUSH
52540: EMPTY
52541: LIST
52542: LIST
52543: PUSH
52544: LD_INT 2
52546: NEG
52547: PUSH
52548: LD_INT 1
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: LD_INT 3
52557: NEG
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52592: LD_ADDR_VAR 0 33
52596: PUSH
52597: LD_INT 0
52599: PUSH
52600: LD_INT 0
52602: PUSH
52603: EMPTY
52604: LIST
52605: LIST
52606: PUSH
52607: LD_INT 0
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: EMPTY
52635: LIST
52636: LIST
52637: PUSH
52638: LD_INT 0
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 0
52654: PUSH
52655: EMPTY
52656: LIST
52657: LIST
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: LD_INT 1
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: NEG
52674: PUSH
52675: LD_INT 2
52677: NEG
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: LD_INT 0
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 2
52706: PUSH
52707: LD_INT 1
52709: PUSH
52710: EMPTY
52711: LIST
52712: LIST
52713: PUSH
52714: LD_INT 1
52716: PUSH
52717: LD_INT 2
52719: PUSH
52720: EMPTY
52721: LIST
52722: LIST
52723: PUSH
52724: LD_INT 0
52726: PUSH
52727: LD_INT 2
52729: PUSH
52730: EMPTY
52731: LIST
52732: LIST
52733: PUSH
52734: LD_INT 1
52736: NEG
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 2
52747: NEG
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: LD_INT 1
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 2
52770: NEG
52771: PUSH
52772: LD_INT 2
52774: NEG
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 2
52782: NEG
52783: PUSH
52784: LD_INT 3
52786: NEG
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 2
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 3
52805: PUSH
52806: LD_INT 1
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 3
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 1
52825: NEG
52826: PUSH
52827: LD_INT 2
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: EMPTY
52843: LIST
52844: LIST
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: LIST
52854: LIST
52855: LIST
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: LIST
52863: LIST
52864: LIST
52865: LIST
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52871: LD_ADDR_VAR 0 34
52875: PUSH
52876: LD_INT 0
52878: PUSH
52879: LD_INT 0
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: LD_INT 0
52888: PUSH
52889: LD_INT 1
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 1
52899: PUSH
52900: LD_INT 0
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 1
52909: PUSH
52910: LD_INT 1
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 0
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: NEG
52930: PUSH
52931: LD_INT 0
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: LD_INT 1
52944: NEG
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 1
52952: NEG
52953: PUSH
52954: LD_INT 2
52956: NEG
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 0
52964: PUSH
52965: LD_INT 2
52967: NEG
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: LD_INT 1
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 2
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 1
53006: PUSH
53007: LD_INT 2
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 1
53016: NEG
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 2
53027: NEG
53028: PUSH
53029: LD_INT 0
53031: PUSH
53032: EMPTY
53033: LIST
53034: LIST
53035: PUSH
53036: LD_INT 2
53038: NEG
53039: PUSH
53040: LD_INT 1
53042: NEG
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 1
53062: NEG
53063: PUSH
53064: LD_INT 3
53066: NEG
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: LD_INT 2
53077: NEG
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 3
53085: PUSH
53086: LD_INT 2
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: LD_INT 3
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 2
53105: NEG
53106: PUSH
53107: LD_INT 1
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 3
53116: NEG
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53151: LD_ADDR_VAR 0 35
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 0
53168: PUSH
53169: LD_INT 1
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 1
53179: PUSH
53180: LD_INT 0
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 1
53189: PUSH
53190: LD_INT 1
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 0
53199: PUSH
53200: LD_INT 1
53202: PUSH
53203: EMPTY
53204: LIST
53205: LIST
53206: PUSH
53207: LD_INT 1
53209: NEG
53210: PUSH
53211: LD_INT 0
53213: PUSH
53214: EMPTY
53215: LIST
53216: LIST
53217: PUSH
53218: LD_INT 1
53220: NEG
53221: PUSH
53222: LD_INT 1
53224: NEG
53225: PUSH
53226: EMPTY
53227: LIST
53228: LIST
53229: PUSH
53230: LD_INT 2
53232: PUSH
53233: LD_INT 1
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 2
53242: NEG
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53263: LD_ADDR_VAR 0 36
53267: PUSH
53268: LD_INT 0
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 0
53280: PUSH
53281: LD_INT 1
53283: NEG
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 1
53291: PUSH
53292: LD_INT 0
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 1
53301: PUSH
53302: LD_INT 1
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: LD_INT 1
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 1
53321: NEG
53322: PUSH
53323: LD_INT 0
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 1
53332: NEG
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 1
53344: NEG
53345: PUSH
53346: LD_INT 2
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: PUSH
53357: LD_INT 2
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53375: LD_ADDR_VAR 0 37
53379: PUSH
53380: LD_INT 0
53382: PUSH
53383: LD_INT 0
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 0
53392: PUSH
53393: LD_INT 1
53395: NEG
53396: PUSH
53397: EMPTY
53398: LIST
53399: LIST
53400: PUSH
53401: LD_INT 1
53403: PUSH
53404: LD_INT 0
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 1
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 0
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 1
53433: NEG
53434: PUSH
53435: LD_INT 0
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 1
53444: NEG
53445: PUSH
53446: LD_INT 1
53448: NEG
53449: PUSH
53450: EMPTY
53451: LIST
53452: LIST
53453: PUSH
53454: LD_INT 1
53456: PUSH
53457: LD_INT 1
53459: NEG
53460: PUSH
53461: EMPTY
53462: LIST
53463: LIST
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: LD_INT 1
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: LIST
53480: LIST
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
53487: LD_ADDR_VAR 0 38
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 1
53507: NEG
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: PUSH
53526: LD_INT 1
53528: PUSH
53529: EMPTY
53530: LIST
53531: LIST
53532: PUSH
53533: LD_INT 0
53535: PUSH
53536: LD_INT 1
53538: PUSH
53539: EMPTY
53540: LIST
53541: LIST
53542: PUSH
53543: LD_INT 1
53545: NEG
53546: PUSH
53547: LD_INT 0
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 1
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 2
53568: PUSH
53569: LD_INT 1
53571: PUSH
53572: EMPTY
53573: LIST
53574: LIST
53575: PUSH
53576: LD_INT 2
53578: NEG
53579: PUSH
53580: LD_INT 1
53582: NEG
53583: PUSH
53584: EMPTY
53585: LIST
53586: LIST
53587: PUSH
53588: EMPTY
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
53599: LD_ADDR_VAR 0 39
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 1
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 1
53627: PUSH
53628: LD_INT 0
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 1
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: LD_INT 1
53650: PUSH
53651: EMPTY
53652: LIST
53653: LIST
53654: PUSH
53655: LD_INT 1
53657: NEG
53658: PUSH
53659: LD_INT 0
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 1
53668: NEG
53669: PUSH
53670: LD_INT 1
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: NEG
53681: PUSH
53682: LD_INT 2
53684: NEG
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PUSH
53690: LD_INT 1
53692: PUSH
53693: LD_INT 2
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
53711: LD_ADDR_VAR 0 40
53715: PUSH
53716: LD_INT 0
53718: PUSH
53719: LD_INT 0
53721: PUSH
53722: EMPTY
53723: LIST
53724: LIST
53725: PUSH
53726: LD_INT 0
53728: PUSH
53729: LD_INT 1
53731: NEG
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: PUSH
53737: LD_INT 1
53739: PUSH
53740: LD_INT 0
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 1
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: LD_INT 1
53762: PUSH
53763: EMPTY
53764: LIST
53765: LIST
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: LD_INT 0
53773: PUSH
53774: EMPTY
53775: LIST
53776: LIST
53777: PUSH
53778: LD_INT 1
53780: NEG
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 1
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 1
53803: NEG
53804: PUSH
53805: LD_INT 1
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53823: LD_ADDR_VAR 0 41
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 0
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 0
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 1
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 1
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: LD_INT 1
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 1
53881: NEG
53882: PUSH
53883: LD_INT 0
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 1
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: LD_INT 2
53908: NEG
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 1
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 2
53937: PUSH
53938: LD_INT 1
53940: PUSH
53941: EMPTY
53942: LIST
53943: LIST
53944: PUSH
53945: LD_INT 2
53947: PUSH
53948: LD_INT 2
53950: PUSH
53951: EMPTY
53952: LIST
53953: LIST
53954: PUSH
53955: LD_INT 1
53957: PUSH
53958: LD_INT 2
53960: PUSH
53961: EMPTY
53962: LIST
53963: LIST
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: NEG
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 2
53989: NEG
53990: PUSH
53991: LD_INT 1
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: LD_INT 2
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 2
54013: NEG
54014: PUSH
54015: LD_INT 3
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 1
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 3
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: LD_INT 1
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: LD_INT 3
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 2
54076: PUSH
54077: LD_INT 3
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 2
54086: NEG
54087: PUSH
54088: LD_INT 1
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 3
54097: NEG
54098: PUSH
54099: LD_INT 0
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: LD_INT 1
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 3
54120: NEG
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 3
54132: NEG
54133: PUSH
54134: LD_INT 3
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: LIST
54172: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54173: LD_ADDR_VAR 0 42
54177: PUSH
54178: LD_INT 0
54180: PUSH
54181: LD_INT 0
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 0
54190: PUSH
54191: LD_INT 1
54193: NEG
54194: PUSH
54195: EMPTY
54196: LIST
54197: LIST
54198: PUSH
54199: LD_INT 1
54201: PUSH
54202: LD_INT 0
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 1
54211: PUSH
54212: LD_INT 1
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 0
54221: PUSH
54222: LD_INT 1
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: NEG
54232: PUSH
54233: LD_INT 0
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 1
54242: NEG
54243: PUSH
54244: LD_INT 1
54246: NEG
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: LD_INT 2
54258: NEG
54259: PUSH
54260: EMPTY
54261: LIST
54262: LIST
54263: PUSH
54264: LD_INT 0
54266: PUSH
54267: LD_INT 2
54269: NEG
54270: PUSH
54271: EMPTY
54272: LIST
54273: LIST
54274: PUSH
54275: LD_INT 1
54277: PUSH
54278: LD_INT 1
54280: NEG
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 2
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: EMPTY
54293: LIST
54294: LIST
54295: PUSH
54296: LD_INT 2
54298: PUSH
54299: LD_INT 2
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 2
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: LD_INT 2
54321: PUSH
54322: EMPTY
54323: LIST
54324: LIST
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: LD_INT 1
54332: PUSH
54333: EMPTY
54334: LIST
54335: LIST
54336: PUSH
54337: LD_INT 2
54339: NEG
54340: PUSH
54341: LD_INT 1
54343: NEG
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 2
54351: NEG
54352: PUSH
54353: LD_INT 2
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 2
54363: NEG
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 1
54375: NEG
54376: PUSH
54377: LD_INT 3
54379: NEG
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 0
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 1
54398: PUSH
54399: LD_INT 2
54401: NEG
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: PUSH
54407: LD_INT 3
54409: PUSH
54410: LD_INT 2
54412: PUSH
54413: EMPTY
54414: LIST
54415: LIST
54416: PUSH
54417: LD_INT 3
54419: PUSH
54420: LD_INT 3
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 2
54429: PUSH
54430: LD_INT 3
54432: PUSH
54433: EMPTY
54434: LIST
54435: LIST
54436: PUSH
54437: LD_INT 1
54439: PUSH
54440: LD_INT 3
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 0
54449: PUSH
54450: LD_INT 3
54452: PUSH
54453: EMPTY
54454: LIST
54455: LIST
54456: PUSH
54457: LD_INT 1
54459: NEG
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 3
54470: NEG
54471: PUSH
54472: LD_INT 2
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 3
54482: NEG
54483: PUSH
54484: LD_INT 3
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54523: LD_ADDR_VAR 0 43
54527: PUSH
54528: LD_INT 0
54530: PUSH
54531: LD_INT 0
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 0
54540: PUSH
54541: LD_INT 1
54543: NEG
54544: PUSH
54545: EMPTY
54546: LIST
54547: LIST
54548: PUSH
54549: LD_INT 1
54551: PUSH
54552: LD_INT 0
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: PUSH
54562: LD_INT 1
54564: PUSH
54565: EMPTY
54566: LIST
54567: LIST
54568: PUSH
54569: LD_INT 0
54571: PUSH
54572: LD_INT 1
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: PUSH
54579: LD_INT 1
54581: NEG
54582: PUSH
54583: LD_INT 0
54585: PUSH
54586: EMPTY
54587: LIST
54588: LIST
54589: PUSH
54590: LD_INT 1
54592: NEG
54593: PUSH
54594: LD_INT 1
54596: NEG
54597: PUSH
54598: EMPTY
54599: LIST
54600: LIST
54601: PUSH
54602: LD_INT 1
54604: NEG
54605: PUSH
54606: LD_INT 2
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 2
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: PUSH
54628: LD_INT 1
54630: NEG
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: PUSH
54636: LD_INT 2
54638: PUSH
54639: LD_INT 0
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: LD_INT 2
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: EMPTY
54653: LIST
54654: LIST
54655: PUSH
54656: LD_INT 1
54658: PUSH
54659: LD_INT 2
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 0
54668: PUSH
54669: LD_INT 2
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: LD_INT 0
54693: PUSH
54694: EMPTY
54695: LIST
54696: LIST
54697: PUSH
54698: LD_INT 2
54700: NEG
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: EMPTY
54707: LIST
54708: LIST
54709: PUSH
54710: LD_INT 1
54712: NEG
54713: PUSH
54714: LD_INT 3
54716: NEG
54717: PUSH
54718: EMPTY
54719: LIST
54720: LIST
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: LD_INT 3
54727: NEG
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 1
54735: PUSH
54736: LD_INT 2
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 1
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 3
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: LD_INT 1
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: LD_INT 3
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 2
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 2
54808: NEG
54809: PUSH
54810: LD_INT 1
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: LD_INT 3
54819: NEG
54820: PUSH
54821: LD_INT 0
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: NEG
54831: PUSH
54832: LD_INT 1
54834: NEG
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: EMPTY
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54871: LD_ADDR_VAR 0 44
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: LD_INT 0
54881: PUSH
54882: EMPTY
54883: LIST
54884: LIST
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: LD_INT 1
54891: NEG
54892: PUSH
54893: EMPTY
54894: LIST
54895: LIST
54896: PUSH
54897: LD_INT 1
54899: PUSH
54900: LD_INT 0
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: LD_INT 1
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 0
54919: PUSH
54920: LD_INT 1
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 1
54929: NEG
54930: PUSH
54931: LD_INT 0
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 1
54940: NEG
54941: PUSH
54942: LD_INT 1
54944: NEG
54945: PUSH
54946: EMPTY
54947: LIST
54948: LIST
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: LD_INT 2
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: LD_INT 1
54967: NEG
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 2
54975: PUSH
54976: LD_INT 0
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 2
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 2
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 2
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: NEG
55016: PUSH
55017: LD_INT 1
55019: PUSH
55020: EMPTY
55021: LIST
55022: LIST
55023: PUSH
55024: LD_INT 2
55026: NEG
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: PUSH
55035: LD_INT 2
55037: NEG
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 2
55049: NEG
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 2
55061: NEG
55062: PUSH
55063: LD_INT 3
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 2
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 3
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 3
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 3
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 3
55114: PUSH
55115: LD_INT 3
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 2
55124: PUSH
55125: LD_INT 3
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 2
55134: NEG
55135: PUSH
55136: LD_INT 1
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 3
55145: NEG
55146: PUSH
55147: LD_INT 0
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: PUSH
55154: LD_INT 3
55156: NEG
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: EMPTY
55163: LIST
55164: LIST
55165: PUSH
55166: LD_INT 3
55168: NEG
55169: PUSH
55170: LD_INT 2
55172: NEG
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: NEG
55181: PUSH
55182: LD_INT 3
55184: NEG
55185: PUSH
55186: EMPTY
55187: LIST
55188: LIST
55189: PUSH
55190: EMPTY
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55221: LD_ADDR_VAR 0 45
55225: PUSH
55226: LD_INT 0
55228: PUSH
55229: LD_INT 0
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 1
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 0
55252: PUSH
55253: EMPTY
55254: LIST
55255: LIST
55256: PUSH
55257: LD_INT 1
55259: PUSH
55260: LD_INT 1
55262: PUSH
55263: EMPTY
55264: LIST
55265: LIST
55266: PUSH
55267: LD_INT 0
55269: PUSH
55270: LD_INT 1
55272: PUSH
55273: EMPTY
55274: LIST
55275: LIST
55276: PUSH
55277: LD_INT 1
55279: NEG
55280: PUSH
55281: LD_INT 0
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 1
55294: NEG
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 1
55302: NEG
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: EMPTY
55309: LIST
55310: LIST
55311: PUSH
55312: LD_INT 0
55314: PUSH
55315: LD_INT 2
55317: NEG
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 1
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 2
55336: PUSH
55337: LD_INT 1
55339: PUSH
55340: EMPTY
55341: LIST
55342: LIST
55343: PUSH
55344: LD_INT 2
55346: PUSH
55347: LD_INT 2
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: PUSH
55357: LD_INT 2
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PUSH
55364: LD_INT 0
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: EMPTY
55371: LIST
55372: LIST
55373: PUSH
55374: LD_INT 1
55376: NEG
55377: PUSH
55378: LD_INT 1
55380: PUSH
55381: EMPTY
55382: LIST
55383: LIST
55384: PUSH
55385: LD_INT 2
55387: NEG
55388: PUSH
55389: LD_INT 1
55391: NEG
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 2
55399: NEG
55400: PUSH
55401: LD_INT 2
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 2
55411: NEG
55412: PUSH
55413: LD_INT 3
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 1
55423: NEG
55424: PUSH
55425: LD_INT 3
55427: NEG
55428: PUSH
55429: EMPTY
55430: LIST
55431: LIST
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: LD_INT 3
55438: NEG
55439: PUSH
55440: EMPTY
55441: LIST
55442: LIST
55443: PUSH
55444: LD_INT 1
55446: PUSH
55447: LD_INT 2
55449: NEG
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 3
55457: PUSH
55458: LD_INT 2
55460: PUSH
55461: EMPTY
55462: LIST
55463: LIST
55464: PUSH
55465: LD_INT 3
55467: PUSH
55468: LD_INT 3
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: PUSH
55475: LD_INT 2
55477: PUSH
55478: LD_INT 3
55480: PUSH
55481: EMPTY
55482: LIST
55483: LIST
55484: PUSH
55485: LD_INT 1
55487: PUSH
55488: LD_INT 3
55490: PUSH
55491: EMPTY
55492: LIST
55493: LIST
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: LD_INT 3
55500: PUSH
55501: EMPTY
55502: LIST
55503: LIST
55504: PUSH
55505: LD_INT 1
55507: NEG
55508: PUSH
55509: LD_INT 2
55511: PUSH
55512: EMPTY
55513: LIST
55514: LIST
55515: PUSH
55516: LD_INT 3
55518: NEG
55519: PUSH
55520: LD_INT 2
55522: NEG
55523: PUSH
55524: EMPTY
55525: LIST
55526: LIST
55527: PUSH
55528: LD_INT 3
55530: NEG
55531: PUSH
55532: LD_INT 3
55534: NEG
55535: PUSH
55536: EMPTY
55537: LIST
55538: LIST
55539: PUSH
55540: EMPTY
55541: LIST
55542: LIST
55543: LIST
55544: LIST
55545: LIST
55546: LIST
55547: LIST
55548: LIST
55549: LIST
55550: LIST
55551: LIST
55552: LIST
55553: LIST
55554: LIST
55555: LIST
55556: LIST
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: LIST
55562: LIST
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55571: LD_ADDR_VAR 0 46
55575: PUSH
55576: LD_INT 0
55578: PUSH
55579: LD_INT 0
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: LD_INT 0
55588: PUSH
55589: LD_INT 1
55591: NEG
55592: PUSH
55593: EMPTY
55594: LIST
55595: LIST
55596: PUSH
55597: LD_INT 1
55599: PUSH
55600: LD_INT 0
55602: PUSH
55603: EMPTY
55604: LIST
55605: LIST
55606: PUSH
55607: LD_INT 1
55609: PUSH
55610: LD_INT 1
55612: PUSH
55613: EMPTY
55614: LIST
55615: LIST
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: LD_INT 1
55622: PUSH
55623: EMPTY
55624: LIST
55625: LIST
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 1
55640: NEG
55641: PUSH
55642: LD_INT 1
55644: NEG
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 1
55652: NEG
55653: PUSH
55654: LD_INT 2
55656: NEG
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 2
55667: NEG
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: PUSH
55673: LD_INT 1
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: EMPTY
55681: LIST
55682: LIST
55683: PUSH
55684: LD_INT 2
55686: PUSH
55687: LD_INT 0
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: LD_INT 2
55696: PUSH
55697: LD_INT 1
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PUSH
55704: LD_INT 1
55706: PUSH
55707: LD_INT 2
55709: PUSH
55710: EMPTY
55711: LIST
55712: LIST
55713: PUSH
55714: LD_INT 0
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 1
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: EMPTY
55732: LIST
55733: LIST
55734: PUSH
55735: LD_INT 2
55737: NEG
55738: PUSH
55739: LD_INT 0
55741: PUSH
55742: EMPTY
55743: LIST
55744: LIST
55745: PUSH
55746: LD_INT 2
55748: NEG
55749: PUSH
55750: LD_INT 1
55752: NEG
55753: PUSH
55754: EMPTY
55755: LIST
55756: LIST
55757: PUSH
55758: LD_INT 1
55760: NEG
55761: PUSH
55762: LD_INT 3
55764: NEG
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 3
55775: NEG
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 2
55786: NEG
55787: PUSH
55788: EMPTY
55789: LIST
55790: LIST
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: LD_INT 1
55797: NEG
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 3
55805: PUSH
55806: LD_INT 0
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 3
55815: PUSH
55816: LD_INT 1
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 1
55825: PUSH
55826: LD_INT 3
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 0
55835: PUSH
55836: LD_INT 3
55838: PUSH
55839: EMPTY
55840: LIST
55841: LIST
55842: PUSH
55843: LD_INT 1
55845: NEG
55846: PUSH
55847: LD_INT 2
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 2
55856: NEG
55857: PUSH
55858: LD_INT 1
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 3
55867: NEG
55868: PUSH
55869: LD_INT 0
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: PUSH
55876: LD_INT 3
55878: NEG
55879: PUSH
55880: LD_INT 1
55882: NEG
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55919: LD_ADDR_VAR 0 47
55923: PUSH
55924: LD_INT 0
55926: PUSH
55927: LD_INT 0
55929: PUSH
55930: EMPTY
55931: LIST
55932: LIST
55933: PUSH
55934: LD_INT 0
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: PUSH
55945: LD_INT 1
55947: PUSH
55948: LD_INT 0
55950: PUSH
55951: EMPTY
55952: LIST
55953: LIST
55954: PUSH
55955: LD_INT 1
55957: PUSH
55958: LD_INT 1
55960: PUSH
55961: EMPTY
55962: LIST
55963: LIST
55964: PUSH
55965: LD_INT 0
55967: PUSH
55968: LD_INT 1
55970: PUSH
55971: EMPTY
55972: LIST
55973: LIST
55974: PUSH
55975: LD_INT 1
55977: NEG
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: PUSH
55986: LD_INT 1
55988: NEG
55989: PUSH
55990: LD_INT 1
55992: NEG
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: PUSH
55998: LD_INT 1
56000: NEG
56001: PUSH
56002: LD_INT 2
56004: NEG
56005: PUSH
56006: EMPTY
56007: LIST
56008: LIST
56009: PUSH
56010: LD_INT 0
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 1
56026: NEG
56027: PUSH
56028: EMPTY
56029: LIST
56030: LIST
56031: PUSH
56032: LD_INT 2
56034: NEG
56035: PUSH
56036: LD_INT 1
56038: NEG
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 2
56046: NEG
56047: PUSH
56048: LD_INT 2
56050: NEG
56051: PUSH
56052: EMPTY
56053: LIST
56054: LIST
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: LIST
56069: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
56070: LD_ADDR_VAR 0 48
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: LD_INT 0
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: LD_INT 0
56087: PUSH
56088: LD_INT 1
56090: NEG
56091: PUSH
56092: EMPTY
56093: LIST
56094: LIST
56095: PUSH
56096: LD_INT 1
56098: PUSH
56099: LD_INT 0
56101: PUSH
56102: EMPTY
56103: LIST
56104: LIST
56105: PUSH
56106: LD_INT 1
56108: PUSH
56109: LD_INT 1
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: PUSH
56126: LD_INT 1
56128: NEG
56129: PUSH
56130: LD_INT 0
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PUSH
56137: LD_INT 1
56139: NEG
56140: PUSH
56141: LD_INT 1
56143: NEG
56144: PUSH
56145: EMPTY
56146: LIST
56147: LIST
56148: PUSH
56149: LD_INT 1
56151: NEG
56152: PUSH
56153: LD_INT 2
56155: NEG
56156: PUSH
56157: EMPTY
56158: LIST
56159: LIST
56160: PUSH
56161: LD_INT 0
56163: PUSH
56164: LD_INT 2
56166: NEG
56167: PUSH
56168: EMPTY
56169: LIST
56170: LIST
56171: PUSH
56172: LD_INT 1
56174: PUSH
56175: LD_INT 1
56177: NEG
56178: PUSH
56179: EMPTY
56180: LIST
56181: LIST
56182: PUSH
56183: LD_INT 2
56185: PUSH
56186: LD_INT 0
56188: PUSH
56189: EMPTY
56190: LIST
56191: LIST
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: LD_INT 1
56198: PUSH
56199: EMPTY
56200: LIST
56201: LIST
56202: PUSH
56203: EMPTY
56204: LIST
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
56217: LD_ADDR_VAR 0 49
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 0
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 0
56234: PUSH
56235: LD_INT 1
56237: NEG
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: LD_INT 0
56248: PUSH
56249: EMPTY
56250: LIST
56251: LIST
56252: PUSH
56253: LD_INT 1
56255: PUSH
56256: LD_INT 1
56258: PUSH
56259: EMPTY
56260: LIST
56261: LIST
56262: PUSH
56263: LD_INT 0
56265: PUSH
56266: LD_INT 1
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 1
56275: NEG
56276: PUSH
56277: LD_INT 0
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: NEG
56287: PUSH
56288: LD_INT 1
56290: NEG
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: PUSH
56299: LD_INT 1
56301: NEG
56302: PUSH
56303: EMPTY
56304: LIST
56305: LIST
56306: PUSH
56307: LD_INT 2
56309: PUSH
56310: LD_INT 0
56312: PUSH
56313: EMPTY
56314: LIST
56315: LIST
56316: PUSH
56317: LD_INT 2
56319: PUSH
56320: LD_INT 1
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: PUSH
56327: LD_INT 2
56329: PUSH
56330: LD_INT 2
56332: PUSH
56333: EMPTY
56334: LIST
56335: LIST
56336: PUSH
56337: LD_INT 1
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
56361: LD_ADDR_VAR 0 50
56365: PUSH
56366: LD_INT 0
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 0
56378: PUSH
56379: LD_INT 1
56381: NEG
56382: PUSH
56383: EMPTY
56384: LIST
56385: LIST
56386: PUSH
56387: LD_INT 1
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: EMPTY
56394: LIST
56395: LIST
56396: PUSH
56397: LD_INT 1
56399: PUSH
56400: LD_INT 1
56402: PUSH
56403: EMPTY
56404: LIST
56405: LIST
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: LD_INT 1
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: PUSH
56417: LD_INT 1
56419: NEG
56420: PUSH
56421: LD_INT 0
56423: PUSH
56424: EMPTY
56425: LIST
56426: LIST
56427: PUSH
56428: LD_INT 1
56430: NEG
56431: PUSH
56432: LD_INT 1
56434: NEG
56435: PUSH
56436: EMPTY
56437: LIST
56438: LIST
56439: PUSH
56440: LD_INT 2
56442: PUSH
56443: LD_INT 1
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: LD_INT 2
56452: PUSH
56453: LD_INT 2
56455: PUSH
56456: EMPTY
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 1
56462: PUSH
56463: LD_INT 2
56465: PUSH
56466: EMPTY
56467: LIST
56468: LIST
56469: PUSH
56470: LD_INT 0
56472: PUSH
56473: LD_INT 2
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: NEG
56483: PUSH
56484: LD_INT 1
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: LIST
56502: LIST
56503: LIST
56504: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
56505: LD_ADDR_VAR 0 51
56509: PUSH
56510: LD_INT 0
56512: PUSH
56513: LD_INT 0
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: PUSH
56520: LD_INT 0
56522: PUSH
56523: LD_INT 1
56525: NEG
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: PUSH
56541: LD_INT 1
56543: PUSH
56544: LD_INT 1
56546: PUSH
56547: EMPTY
56548: LIST
56549: LIST
56550: PUSH
56551: LD_INT 0
56553: PUSH
56554: LD_INT 1
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: PUSH
56561: LD_INT 1
56563: NEG
56564: PUSH
56565: LD_INT 0
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: LD_INT 1
56574: NEG
56575: PUSH
56576: LD_INT 1
56578: NEG
56579: PUSH
56580: EMPTY
56581: LIST
56582: LIST
56583: PUSH
56584: LD_INT 1
56586: PUSH
56587: LD_INT 2
56589: PUSH
56590: EMPTY
56591: LIST
56592: LIST
56593: PUSH
56594: LD_INT 0
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 1
56606: NEG
56607: PUSH
56608: LD_INT 1
56610: PUSH
56611: EMPTY
56612: LIST
56613: LIST
56614: PUSH
56615: LD_INT 2
56617: NEG
56618: PUSH
56619: LD_INT 0
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PUSH
56626: LD_INT 2
56628: NEG
56629: PUSH
56630: LD_INT 1
56632: NEG
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56652: LD_ADDR_VAR 0 52
56656: PUSH
56657: LD_INT 0
56659: PUSH
56660: LD_INT 0
56662: PUSH
56663: EMPTY
56664: LIST
56665: LIST
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: LD_INT 1
56672: NEG
56673: PUSH
56674: EMPTY
56675: LIST
56676: LIST
56677: PUSH
56678: LD_INT 1
56680: PUSH
56681: LD_INT 0
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_INT 1
56690: PUSH
56691: LD_INT 1
56693: PUSH
56694: EMPTY
56695: LIST
56696: LIST
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: LD_INT 1
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: PUSH
56708: LD_INT 1
56710: NEG
56711: PUSH
56712: LD_INT 0
56714: PUSH
56715: EMPTY
56716: LIST
56717: LIST
56718: PUSH
56719: LD_INT 1
56721: NEG
56722: PUSH
56723: LD_INT 1
56725: NEG
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: NEG
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 1
56745: NEG
56746: PUSH
56747: LD_INT 1
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 2
56756: NEG
56757: PUSH
56758: LD_INT 0
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_INT 2
56767: NEG
56768: PUSH
56769: LD_INT 1
56771: NEG
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: PUSH
56777: LD_INT 2
56779: NEG
56780: PUSH
56781: LD_INT 2
56783: NEG
56784: PUSH
56785: EMPTY
56786: LIST
56787: LIST
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56803: LD_ADDR_VAR 0 53
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: PUSH
56818: LD_INT 0
56820: PUSH
56821: LD_INT 1
56823: NEG
56824: PUSH
56825: EMPTY
56826: LIST
56827: LIST
56828: PUSH
56829: LD_INT 1
56831: PUSH
56832: LD_INT 0
56834: PUSH
56835: EMPTY
56836: LIST
56837: LIST
56838: PUSH
56839: LD_INT 1
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 0
56851: PUSH
56852: LD_INT 1
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: PUSH
56859: LD_INT 1
56861: NEG
56862: PUSH
56863: LD_INT 0
56865: PUSH
56866: EMPTY
56867: LIST
56868: LIST
56869: PUSH
56870: LD_INT 1
56872: NEG
56873: PUSH
56874: LD_INT 1
56876: NEG
56877: PUSH
56878: EMPTY
56879: LIST
56880: LIST
56881: PUSH
56882: LD_INT 1
56884: NEG
56885: PUSH
56886: LD_INT 2
56888: NEG
56889: PUSH
56890: EMPTY
56891: LIST
56892: LIST
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: LD_INT 2
56899: NEG
56900: PUSH
56901: EMPTY
56902: LIST
56903: LIST
56904: PUSH
56905: LD_INT 1
56907: PUSH
56908: LD_INT 1
56910: NEG
56911: PUSH
56912: EMPTY
56913: LIST
56914: LIST
56915: PUSH
56916: LD_INT 2
56918: PUSH
56919: LD_INT 0
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: LD_INT 2
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: LD_INT 2
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: EMPTY
56943: LIST
56944: LIST
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: EMPTY
56953: LIST
56954: LIST
56955: PUSH
56956: LD_INT 0
56958: PUSH
56959: LD_INT 2
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 1
56968: NEG
56969: PUSH
56970: LD_INT 1
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: PUSH
56977: LD_INT 2
56979: NEG
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: PUSH
56988: LD_INT 2
56990: NEG
56991: PUSH
56992: LD_INT 1
56994: NEG
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 2
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: NEG
57007: PUSH
57008: EMPTY
57009: LIST
57010: LIST
57011: PUSH
57012: EMPTY
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57033: LD_ADDR_VAR 0 54
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: EMPTY
57045: LIST
57046: LIST
57047: PUSH
57048: LD_INT 0
57050: PUSH
57051: LD_INT 1
57053: NEG
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 0
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 0
57081: PUSH
57082: LD_INT 1
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: PUSH
57089: LD_INT 1
57091: NEG
57092: PUSH
57093: LD_INT 0
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: LD_INT 1
57102: NEG
57103: PUSH
57104: LD_INT 1
57106: NEG
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: NEG
57115: PUSH
57116: LD_INT 2
57118: NEG
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 0
57126: PUSH
57127: LD_INT 2
57129: NEG
57130: PUSH
57131: EMPTY
57132: LIST
57133: LIST
57134: PUSH
57135: LD_INT 1
57137: PUSH
57138: LD_INT 1
57140: NEG
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PUSH
57146: LD_INT 2
57148: PUSH
57149: LD_INT 0
57151: PUSH
57152: EMPTY
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 2
57158: PUSH
57159: LD_INT 1
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: PUSH
57166: LD_INT 2
57168: PUSH
57169: LD_INT 2
57171: PUSH
57172: EMPTY
57173: LIST
57174: LIST
57175: PUSH
57176: LD_INT 1
57178: PUSH
57179: LD_INT 2
57181: PUSH
57182: EMPTY
57183: LIST
57184: LIST
57185: PUSH
57186: LD_INT 0
57188: PUSH
57189: LD_INT 2
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: PUSH
57196: LD_INT 1
57198: NEG
57199: PUSH
57200: LD_INT 1
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: NEG
57210: PUSH
57211: LD_INT 0
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 2
57220: NEG
57221: PUSH
57222: LD_INT 1
57224: NEG
57225: PUSH
57226: EMPTY
57227: LIST
57228: LIST
57229: PUSH
57230: LD_INT 2
57232: NEG
57233: PUSH
57234: LD_INT 2
57236: NEG
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: EMPTY
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: LIST
57256: LIST
57257: LIST
57258: LIST
57259: LIST
57260: LIST
57261: LIST
57262: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57263: LD_ADDR_VAR 0 55
57267: PUSH
57268: LD_INT 0
57270: PUSH
57271: LD_INT 0
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: LD_INT 0
57280: PUSH
57281: LD_INT 1
57283: NEG
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: PUSH
57289: LD_INT 1
57291: PUSH
57292: LD_INT 0
57294: PUSH
57295: EMPTY
57296: LIST
57297: LIST
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: LD_INT 1
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 0
57311: PUSH
57312: LD_INT 1
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: LD_INT 1
57321: NEG
57322: PUSH
57323: LD_INT 0
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: PUSH
57330: LD_INT 1
57332: NEG
57333: PUSH
57334: LD_INT 1
57336: NEG
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: LD_INT 2
57348: NEG
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: PUSH
57354: LD_INT 0
57356: PUSH
57357: LD_INT 2
57359: NEG
57360: PUSH
57361: EMPTY
57362: LIST
57363: LIST
57364: PUSH
57365: LD_INT 1
57367: PUSH
57368: LD_INT 1
57370: NEG
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 2
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 2
57388: PUSH
57389: LD_INT 1
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 2
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: LD_INT 2
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: PUSH
57416: LD_INT 0
57418: PUSH
57419: LD_INT 2
57421: PUSH
57422: EMPTY
57423: LIST
57424: LIST
57425: PUSH
57426: LD_INT 1
57428: NEG
57429: PUSH
57430: LD_INT 1
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PUSH
57437: LD_INT 2
57439: NEG
57440: PUSH
57441: LD_INT 0
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 2
57450: NEG
57451: PUSH
57452: LD_INT 1
57454: NEG
57455: PUSH
57456: EMPTY
57457: LIST
57458: LIST
57459: PUSH
57460: LD_INT 2
57462: NEG
57463: PUSH
57464: LD_INT 2
57466: NEG
57467: PUSH
57468: EMPTY
57469: LIST
57470: LIST
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57493: LD_ADDR_VAR 0 56
57497: PUSH
57498: LD_INT 0
57500: PUSH
57501: LD_INT 0
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: PUSH
57508: LD_INT 0
57510: PUSH
57511: LD_INT 1
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 1
57521: PUSH
57522: LD_INT 0
57524: PUSH
57525: EMPTY
57526: LIST
57527: LIST
57528: PUSH
57529: LD_INT 1
57531: PUSH
57532: LD_INT 1
57534: PUSH
57535: EMPTY
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 0
57541: PUSH
57542: LD_INT 1
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: LD_INT 1
57551: NEG
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: EMPTY
57557: LIST
57558: LIST
57559: PUSH
57560: LD_INT 1
57562: NEG
57563: PUSH
57564: LD_INT 1
57566: NEG
57567: PUSH
57568: EMPTY
57569: LIST
57570: LIST
57571: PUSH
57572: LD_INT 1
57574: NEG
57575: PUSH
57576: LD_INT 2
57578: NEG
57579: PUSH
57580: EMPTY
57581: LIST
57582: LIST
57583: PUSH
57584: LD_INT 0
57586: PUSH
57587: LD_INT 2
57589: NEG
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 1
57597: PUSH
57598: LD_INT 1
57600: NEG
57601: PUSH
57602: EMPTY
57603: LIST
57604: LIST
57605: PUSH
57606: LD_INT 2
57608: PUSH
57609: LD_INT 0
57611: PUSH
57612: EMPTY
57613: LIST
57614: LIST
57615: PUSH
57616: LD_INT 2
57618: PUSH
57619: LD_INT 1
57621: PUSH
57622: EMPTY
57623: LIST
57624: LIST
57625: PUSH
57626: LD_INT 2
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: PUSH
57636: LD_INT 1
57638: PUSH
57639: LD_INT 2
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: PUSH
57646: LD_INT 0
57648: PUSH
57649: LD_INT 2
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 1
57658: NEG
57659: PUSH
57660: LD_INT 1
57662: PUSH
57663: EMPTY
57664: LIST
57665: LIST
57666: PUSH
57667: LD_INT 2
57669: NEG
57670: PUSH
57671: LD_INT 0
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: LD_INT 2
57680: NEG
57681: PUSH
57682: LD_INT 1
57684: NEG
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 2
57692: NEG
57693: PUSH
57694: LD_INT 2
57696: NEG
57697: PUSH
57698: EMPTY
57699: LIST
57700: LIST
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: LIST
57721: LIST
57722: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57723: LD_ADDR_VAR 0 57
57727: PUSH
57728: LD_INT 0
57730: PUSH
57731: LD_INT 0
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 0
57740: PUSH
57741: LD_INT 1
57743: NEG
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 1
57751: PUSH
57752: LD_INT 0
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 1
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 1
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 0
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 1
57792: NEG
57793: PUSH
57794: LD_INT 1
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 1
57804: NEG
57805: PUSH
57806: LD_INT 2
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 2
57819: NEG
57820: PUSH
57821: EMPTY
57822: LIST
57823: LIST
57824: PUSH
57825: LD_INT 1
57827: PUSH
57828: LD_INT 1
57830: NEG
57831: PUSH
57832: EMPTY
57833: LIST
57834: LIST
57835: PUSH
57836: LD_INT 2
57838: PUSH
57839: LD_INT 0
57841: PUSH
57842: EMPTY
57843: LIST
57844: LIST
57845: PUSH
57846: LD_INT 2
57848: PUSH
57849: LD_INT 1
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 2
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: PUSH
57866: LD_INT 1
57868: PUSH
57869: LD_INT 2
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 0
57878: PUSH
57879: LD_INT 2
57881: PUSH
57882: EMPTY
57883: LIST
57884: LIST
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: LD_INT 1
57892: PUSH
57893: EMPTY
57894: LIST
57895: LIST
57896: PUSH
57897: LD_INT 2
57899: NEG
57900: PUSH
57901: LD_INT 0
57903: PUSH
57904: EMPTY
57905: LIST
57906: LIST
57907: PUSH
57908: LD_INT 2
57910: NEG
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: LD_INT 2
57926: NEG
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: LIST
57939: LIST
57940: LIST
57941: LIST
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: LIST
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57953: LD_ADDR_VAR 0 58
57957: PUSH
57958: LD_INT 0
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: PUSH
57982: LD_INT 0
57984: PUSH
57985: EMPTY
57986: LIST
57987: LIST
57988: PUSH
57989: LD_INT 1
57991: PUSH
57992: LD_INT 1
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: PUSH
57999: LD_INT 0
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: NEG
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 1
58022: NEG
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 2
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 2
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 1
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 0
58071: PUSH
58072: EMPTY
58073: LIST
58074: LIST
58075: PUSH
58076: LD_INT 2
58078: PUSH
58079: LD_INT 1
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: PUSH
58086: LD_INT 2
58088: PUSH
58089: LD_INT 2
58091: PUSH
58092: EMPTY
58093: LIST
58094: LIST
58095: PUSH
58096: LD_INT 1
58098: PUSH
58099: LD_INT 2
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 0
58108: PUSH
58109: LD_INT 2
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: LD_INT 1
58118: NEG
58119: PUSH
58120: LD_INT 1
58122: PUSH
58123: EMPTY
58124: LIST
58125: LIST
58126: PUSH
58127: LD_INT 2
58129: NEG
58130: PUSH
58131: LD_INT 0
58133: PUSH
58134: EMPTY
58135: LIST
58136: LIST
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: LD_INT 1
58144: NEG
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 2
58152: NEG
58153: PUSH
58154: LD_INT 2
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58183: LD_ADDR_VAR 0 59
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 1
58203: NEG
58204: PUSH
58205: EMPTY
58206: LIST
58207: LIST
58208: PUSH
58209: LD_INT 1
58211: PUSH
58212: LD_INT 0
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 1
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 0
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: NEG
58242: PUSH
58243: LD_INT 0
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: PUSH
58250: LD_INT 1
58252: NEG
58253: PUSH
58254: LD_INT 1
58256: NEG
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: EMPTY
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58271: LD_ADDR_VAR 0 60
58275: PUSH
58276: LD_INT 0
58278: PUSH
58279: LD_INT 0
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 0
58288: PUSH
58289: LD_INT 1
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 1
58299: PUSH
58300: LD_INT 0
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 1
58309: PUSH
58310: LD_INT 1
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 0
58319: PUSH
58320: LD_INT 1
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 1
58329: NEG
58330: PUSH
58331: LD_INT 0
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: PUSH
58338: LD_INT 1
58340: NEG
58341: PUSH
58342: LD_INT 1
58344: NEG
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58359: LD_ADDR_VAR 0 61
58363: PUSH
58364: LD_INT 0
58366: PUSH
58367: LD_INT 0
58369: PUSH
58370: EMPTY
58371: LIST
58372: LIST
58373: PUSH
58374: LD_INT 0
58376: PUSH
58377: LD_INT 1
58379: NEG
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 1
58387: PUSH
58388: LD_INT 0
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: LD_INT 1
58397: PUSH
58398: LD_INT 1
58400: PUSH
58401: EMPTY
58402: LIST
58403: LIST
58404: PUSH
58405: LD_INT 0
58407: PUSH
58408: LD_INT 1
58410: PUSH
58411: EMPTY
58412: LIST
58413: LIST
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: LD_INT 0
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: PUSH
58426: LD_INT 1
58428: NEG
58429: PUSH
58430: LD_INT 1
58432: NEG
58433: PUSH
58434: EMPTY
58435: LIST
58436: LIST
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: LIST
58442: LIST
58443: LIST
58444: LIST
58445: LIST
58446: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58447: LD_ADDR_VAR 0 62
58451: PUSH
58452: LD_INT 0
58454: PUSH
58455: LD_INT 0
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 0
58464: PUSH
58465: LD_INT 1
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 0
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: LD_INT 1
58485: PUSH
58486: LD_INT 1
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 0
58495: PUSH
58496: LD_INT 1
58498: PUSH
58499: EMPTY
58500: LIST
58501: LIST
58502: PUSH
58503: LD_INT 1
58505: NEG
58506: PUSH
58507: LD_INT 0
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: LD_INT 1
58516: NEG
58517: PUSH
58518: LD_INT 1
58520: NEG
58521: PUSH
58522: EMPTY
58523: LIST
58524: LIST
58525: PUSH
58526: EMPTY
58527: LIST
58528: LIST
58529: LIST
58530: LIST
58531: LIST
58532: LIST
58533: LIST
58534: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58535: LD_ADDR_VAR 0 63
58539: PUSH
58540: LD_INT 0
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: EMPTY
58547: LIST
58548: LIST
58549: PUSH
58550: LD_INT 0
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 1
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 1
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 0
58583: PUSH
58584: LD_INT 1
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 1
58593: NEG
58594: PUSH
58595: LD_INT 0
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: PUSH
58602: LD_INT 1
58604: NEG
58605: PUSH
58606: LD_INT 1
58608: NEG
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
58623: LD_ADDR_VAR 0 64
58627: PUSH
58628: LD_INT 0
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: EMPTY
58635: LIST
58636: LIST
58637: PUSH
58638: LD_INT 0
58640: PUSH
58641: LD_INT 1
58643: NEG
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: PUSH
58649: LD_INT 1
58651: PUSH
58652: LD_INT 0
58654: PUSH
58655: EMPTY
58656: LIST
58657: LIST
58658: PUSH
58659: LD_INT 1
58661: PUSH
58662: LD_INT 1
58664: PUSH
58665: EMPTY
58666: LIST
58667: LIST
58668: PUSH
58669: LD_INT 0
58671: PUSH
58672: LD_INT 1
58674: PUSH
58675: EMPTY
58676: LIST
58677: LIST
58678: PUSH
58679: LD_INT 1
58681: NEG
58682: PUSH
58683: LD_INT 0
58685: PUSH
58686: EMPTY
58687: LIST
58688: LIST
58689: PUSH
58690: LD_INT 1
58692: NEG
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: LIST
58709: LIST
58710: ST_TO_ADDR
// end ; 1 :
58711: GO 64608
58713: LD_INT 1
58715: DOUBLE
58716: EQUAL
58717: IFTRUE 58721
58719: GO 61344
58721: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58722: LD_ADDR_VAR 0 11
58726: PUSH
58727: LD_INT 1
58729: NEG
58730: PUSH
58731: LD_INT 3
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 0
58741: PUSH
58742: LD_INT 3
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: LD_INT 1
58752: PUSH
58753: LD_INT 2
58755: NEG
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: LIST
58765: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58766: LD_ADDR_VAR 0 12
58770: PUSH
58771: LD_INT 2
58773: PUSH
58774: LD_INT 1
58776: NEG
58777: PUSH
58778: EMPTY
58779: LIST
58780: LIST
58781: PUSH
58782: LD_INT 3
58784: PUSH
58785: LD_INT 0
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: PUSH
58792: LD_INT 3
58794: PUSH
58795: LD_INT 1
58797: PUSH
58798: EMPTY
58799: LIST
58800: LIST
58801: PUSH
58802: EMPTY
58803: LIST
58804: LIST
58805: LIST
58806: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58807: LD_ADDR_VAR 0 13
58811: PUSH
58812: LD_INT 3
58814: PUSH
58815: LD_INT 2
58817: PUSH
58818: EMPTY
58819: LIST
58820: LIST
58821: PUSH
58822: LD_INT 3
58824: PUSH
58825: LD_INT 3
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: PUSH
58832: LD_INT 2
58834: PUSH
58835: LD_INT 3
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: LIST
58846: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
58847: LD_ADDR_VAR 0 14
58851: PUSH
58852: LD_INT 1
58854: PUSH
58855: LD_INT 3
58857: PUSH
58858: EMPTY
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 0
58864: PUSH
58865: LD_INT 3
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 1
58874: NEG
58875: PUSH
58876: LD_INT 2
58878: PUSH
58879: EMPTY
58880: LIST
58881: LIST
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
58888: LD_ADDR_VAR 0 15
58892: PUSH
58893: LD_INT 2
58895: NEG
58896: PUSH
58897: LD_INT 1
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 3
58906: NEG
58907: PUSH
58908: LD_INT 0
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: LD_INT 3
58917: NEG
58918: PUSH
58919: LD_INT 1
58921: NEG
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
58932: LD_ADDR_VAR 0 16
58936: PUSH
58937: LD_INT 2
58939: NEG
58940: PUSH
58941: LD_INT 3
58943: NEG
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 3
58951: NEG
58952: PUSH
58953: LD_INT 2
58955: NEG
58956: PUSH
58957: EMPTY
58958: LIST
58959: LIST
58960: PUSH
58961: LD_INT 3
58963: NEG
58964: PUSH
58965: LD_INT 3
58967: NEG
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: PUSH
58973: EMPTY
58974: LIST
58975: LIST
58976: LIST
58977: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58978: LD_ADDR_VAR 0 17
58982: PUSH
58983: LD_INT 1
58985: NEG
58986: PUSH
58987: LD_INT 3
58989: NEG
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 0
58997: PUSH
58998: LD_INT 3
59000: NEG
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: EMPTY
59018: LIST
59019: LIST
59020: LIST
59021: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59022: LD_ADDR_VAR 0 18
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: LD_INT 1
59032: NEG
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: PUSH
59038: LD_INT 3
59040: PUSH
59041: LD_INT 0
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: PUSH
59048: LD_INT 3
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: LIST
59062: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59063: LD_ADDR_VAR 0 19
59067: PUSH
59068: LD_INT 3
59070: PUSH
59071: LD_INT 2
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 3
59080: PUSH
59081: LD_INT 3
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PUSH
59088: LD_INT 2
59090: PUSH
59091: LD_INT 3
59093: PUSH
59094: EMPTY
59095: LIST
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: LIST
59102: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59103: LD_ADDR_VAR 0 20
59107: PUSH
59108: LD_INT 1
59110: PUSH
59111: LD_INT 3
59113: PUSH
59114: EMPTY
59115: LIST
59116: LIST
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: LD_INT 3
59123: PUSH
59124: EMPTY
59125: LIST
59126: LIST
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: LD_INT 2
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: EMPTY
59140: LIST
59141: LIST
59142: LIST
59143: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59144: LD_ADDR_VAR 0 21
59148: PUSH
59149: LD_INT 2
59151: NEG
59152: PUSH
59153: LD_INT 1
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 3
59162: NEG
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: LD_INT 3
59173: NEG
59174: PUSH
59175: LD_INT 1
59177: NEG
59178: PUSH
59179: EMPTY
59180: LIST
59181: LIST
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59188: LD_ADDR_VAR 0 22
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: LD_INT 3
59199: NEG
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 3
59207: NEG
59208: PUSH
59209: LD_INT 2
59211: NEG
59212: PUSH
59213: EMPTY
59214: LIST
59215: LIST
59216: PUSH
59217: LD_INT 3
59219: NEG
59220: PUSH
59221: LD_INT 3
59223: NEG
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: LIST
59233: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
59234: LD_ADDR_VAR 0 23
59238: PUSH
59239: LD_INT 0
59241: PUSH
59242: LD_INT 3
59244: NEG
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 1
59252: NEG
59253: PUSH
59254: LD_INT 4
59256: NEG
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 3
59267: NEG
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: LIST
59277: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
59278: LD_ADDR_VAR 0 24
59282: PUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 0
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: LD_INT 3
59295: PUSH
59296: LD_INT 1
59298: NEG
59299: PUSH
59300: EMPTY
59301: LIST
59302: LIST
59303: PUSH
59304: LD_INT 4
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: LIST
59318: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
59319: LD_ADDR_VAR 0 25
59323: PUSH
59324: LD_INT 3
59326: PUSH
59327: LD_INT 3
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: LD_INT 4
59336: PUSH
59337: LD_INT 3
59339: PUSH
59340: EMPTY
59341: LIST
59342: LIST
59343: PUSH
59344: LD_INT 3
59346: PUSH
59347: LD_INT 4
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
59359: LD_ADDR_VAR 0 26
59363: PUSH
59364: LD_INT 0
59366: PUSH
59367: LD_INT 3
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: PUSH
59377: LD_INT 4
59379: PUSH
59380: EMPTY
59381: LIST
59382: LIST
59383: PUSH
59384: LD_INT 1
59386: NEG
59387: PUSH
59388: LD_INT 3
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: PUSH
59395: EMPTY
59396: LIST
59397: LIST
59398: LIST
59399: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
59400: LD_ADDR_VAR 0 27
59404: PUSH
59405: LD_INT 3
59407: NEG
59408: PUSH
59409: LD_INT 0
59411: PUSH
59412: EMPTY
59413: LIST
59414: LIST
59415: PUSH
59416: LD_INT 3
59418: NEG
59419: PUSH
59420: LD_INT 1
59422: PUSH
59423: EMPTY
59424: LIST
59425: LIST
59426: PUSH
59427: LD_INT 4
59429: NEG
59430: PUSH
59431: LD_INT 1
59433: NEG
59434: PUSH
59435: EMPTY
59436: LIST
59437: LIST
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
59444: LD_ADDR_VAR 0 28
59448: PUSH
59449: LD_INT 3
59451: NEG
59452: PUSH
59453: LD_INT 3
59455: NEG
59456: PUSH
59457: EMPTY
59458: LIST
59459: LIST
59460: PUSH
59461: LD_INT 3
59463: NEG
59464: PUSH
59465: LD_INT 4
59467: NEG
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: PUSH
59473: LD_INT 4
59475: NEG
59476: PUSH
59477: LD_INT 3
59479: NEG
59480: PUSH
59481: EMPTY
59482: LIST
59483: LIST
59484: PUSH
59485: EMPTY
59486: LIST
59487: LIST
59488: LIST
59489: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
59490: LD_ADDR_VAR 0 29
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: LD_INT 3
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 0
59509: PUSH
59510: LD_INT 3
59512: NEG
59513: PUSH
59514: EMPTY
59515: LIST
59516: LIST
59517: PUSH
59518: LD_INT 1
59520: PUSH
59521: LD_INT 2
59523: NEG
59524: PUSH
59525: EMPTY
59526: LIST
59527: LIST
59528: PUSH
59529: LD_INT 1
59531: NEG
59532: PUSH
59533: LD_INT 4
59535: NEG
59536: PUSH
59537: EMPTY
59538: LIST
59539: LIST
59540: PUSH
59541: LD_INT 0
59543: PUSH
59544: LD_INT 4
59546: NEG
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 3
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: NEG
59566: PUSH
59567: LD_INT 5
59569: NEG
59570: PUSH
59571: EMPTY
59572: LIST
59573: LIST
59574: PUSH
59575: LD_INT 0
59577: PUSH
59578: LD_INT 5
59580: NEG
59581: PUSH
59582: EMPTY
59583: LIST
59584: LIST
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: LD_INT 4
59591: NEG
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 1
59599: NEG
59600: PUSH
59601: LD_INT 6
59603: NEG
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 6
59614: NEG
59615: PUSH
59616: EMPTY
59617: LIST
59618: LIST
59619: PUSH
59620: LD_INT 1
59622: PUSH
59623: LD_INT 5
59625: NEG
59626: PUSH
59627: EMPTY
59628: LIST
59629: LIST
59630: PUSH
59631: EMPTY
59632: LIST
59633: LIST
59634: LIST
59635: LIST
59636: LIST
59637: LIST
59638: LIST
59639: LIST
59640: LIST
59641: LIST
59642: LIST
59643: LIST
59644: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
59645: LD_ADDR_VAR 0 30
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: LD_INT 1
59655: NEG
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: PUSH
59661: LD_INT 3
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 3
59673: PUSH
59674: LD_INT 1
59676: PUSH
59677: EMPTY
59678: LIST
59679: LIST
59680: PUSH
59681: LD_INT 3
59683: PUSH
59684: LD_INT 1
59686: NEG
59687: PUSH
59688: EMPTY
59689: LIST
59690: LIST
59691: PUSH
59692: LD_INT 4
59694: PUSH
59695: LD_INT 0
59697: PUSH
59698: EMPTY
59699: LIST
59700: LIST
59701: PUSH
59702: LD_INT 4
59704: PUSH
59705: LD_INT 1
59707: PUSH
59708: EMPTY
59709: LIST
59710: LIST
59711: PUSH
59712: LD_INT 4
59714: PUSH
59715: LD_INT 1
59717: NEG
59718: PUSH
59719: EMPTY
59720: LIST
59721: LIST
59722: PUSH
59723: LD_INT 5
59725: PUSH
59726: LD_INT 0
59728: PUSH
59729: EMPTY
59730: LIST
59731: LIST
59732: PUSH
59733: LD_INT 5
59735: PUSH
59736: LD_INT 1
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: PUSH
59743: LD_INT 5
59745: PUSH
59746: LD_INT 1
59748: NEG
59749: PUSH
59750: EMPTY
59751: LIST
59752: LIST
59753: PUSH
59754: LD_INT 6
59756: PUSH
59757: LD_INT 0
59759: PUSH
59760: EMPTY
59761: LIST
59762: LIST
59763: PUSH
59764: LD_INT 6
59766: PUSH
59767: LD_INT 1
59769: PUSH
59770: EMPTY
59771: LIST
59772: LIST
59773: PUSH
59774: EMPTY
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: LIST
59787: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
59788: LD_ADDR_VAR 0 31
59792: PUSH
59793: LD_INT 3
59795: PUSH
59796: LD_INT 2
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 3
59805: PUSH
59806: LD_INT 3
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 2
59815: PUSH
59816: LD_INT 3
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 4
59825: PUSH
59826: LD_INT 3
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 4
59835: PUSH
59836: LD_INT 4
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: LD_INT 3
59845: PUSH
59846: LD_INT 4
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: PUSH
59853: LD_INT 5
59855: PUSH
59856: LD_INT 4
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: PUSH
59863: LD_INT 5
59865: PUSH
59866: LD_INT 5
59868: PUSH
59869: EMPTY
59870: LIST
59871: LIST
59872: PUSH
59873: LD_INT 4
59875: PUSH
59876: LD_INT 5
59878: PUSH
59879: EMPTY
59880: LIST
59881: LIST
59882: PUSH
59883: LD_INT 6
59885: PUSH
59886: LD_INT 5
59888: PUSH
59889: EMPTY
59890: LIST
59891: LIST
59892: PUSH
59893: LD_INT 6
59895: PUSH
59896: LD_INT 6
59898: PUSH
59899: EMPTY
59900: LIST
59901: LIST
59902: PUSH
59903: LD_INT 5
59905: PUSH
59906: LD_INT 6
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
59927: LD_ADDR_VAR 0 32
59931: PUSH
59932: LD_INT 1
59934: PUSH
59935: LD_INT 3
59937: PUSH
59938: EMPTY
59939: LIST
59940: LIST
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: LD_INT 3
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 1
59954: NEG
59955: PUSH
59956: LD_INT 2
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: PUSH
59963: LD_INT 1
59965: PUSH
59966: LD_INT 4
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: PUSH
59973: LD_INT 0
59975: PUSH
59976: LD_INT 4
59978: PUSH
59979: EMPTY
59980: LIST
59981: LIST
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: PUSH
59987: LD_INT 3
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 1
59996: PUSH
59997: LD_INT 5
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 0
60006: PUSH
60007: LD_INT 5
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 1
60016: NEG
60017: PUSH
60018: LD_INT 4
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: PUSH
60025: LD_INT 1
60027: PUSH
60028: LD_INT 6
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PUSH
60035: LD_INT 0
60037: PUSH
60038: LD_INT 6
60040: PUSH
60041: EMPTY
60042: LIST
60043: LIST
60044: PUSH
60045: LD_INT 1
60047: NEG
60048: PUSH
60049: LD_INT 5
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: EMPTY
60057: LIST
60058: LIST
60059: LIST
60060: LIST
60061: LIST
60062: LIST
60063: LIST
60064: LIST
60065: LIST
60066: LIST
60067: LIST
60068: LIST
60069: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
60070: LD_ADDR_VAR 0 33
60074: PUSH
60075: LD_INT 2
60077: NEG
60078: PUSH
60079: LD_INT 1
60081: PUSH
60082: EMPTY
60083: LIST
60084: LIST
60085: PUSH
60086: LD_INT 3
60088: NEG
60089: PUSH
60090: LD_INT 0
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 3
60099: NEG
60100: PUSH
60101: LD_INT 1
60103: NEG
60104: PUSH
60105: EMPTY
60106: LIST
60107: LIST
60108: PUSH
60109: LD_INT 3
60111: NEG
60112: PUSH
60113: LD_INT 1
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 4
60122: NEG
60123: PUSH
60124: LD_INT 0
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PUSH
60131: LD_INT 4
60133: NEG
60134: PUSH
60135: LD_INT 1
60137: NEG
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: PUSH
60143: LD_INT 4
60145: NEG
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: EMPTY
60151: LIST
60152: LIST
60153: PUSH
60154: LD_INT 5
60156: NEG
60157: PUSH
60158: LD_INT 0
60160: PUSH
60161: EMPTY
60162: LIST
60163: LIST
60164: PUSH
60165: LD_INT 5
60167: NEG
60168: PUSH
60169: LD_INT 1
60171: NEG
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: PUSH
60177: LD_INT 5
60179: NEG
60180: PUSH
60181: LD_INT 1
60183: PUSH
60184: EMPTY
60185: LIST
60186: LIST
60187: PUSH
60188: LD_INT 6
60190: NEG
60191: PUSH
60192: LD_INT 0
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 6
60201: NEG
60202: PUSH
60203: LD_INT 1
60205: NEG
60206: PUSH
60207: EMPTY
60208: LIST
60209: LIST
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
60225: LD_ADDR_VAR 0 34
60229: PUSH
60230: LD_INT 2
60232: NEG
60233: PUSH
60234: LD_INT 3
60236: NEG
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 3
60244: NEG
60245: PUSH
60246: LD_INT 2
60248: NEG
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PUSH
60254: LD_INT 3
60256: NEG
60257: PUSH
60258: LD_INT 3
60260: NEG
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 3
60268: NEG
60269: PUSH
60270: LD_INT 4
60272: NEG
60273: PUSH
60274: EMPTY
60275: LIST
60276: LIST
60277: PUSH
60278: LD_INT 4
60280: NEG
60281: PUSH
60282: LD_INT 3
60284: NEG
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: PUSH
60290: LD_INT 4
60292: NEG
60293: PUSH
60294: LD_INT 4
60296: NEG
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 4
60304: NEG
60305: PUSH
60306: LD_INT 5
60308: NEG
60309: PUSH
60310: EMPTY
60311: LIST
60312: LIST
60313: PUSH
60314: LD_INT 5
60316: NEG
60317: PUSH
60318: LD_INT 4
60320: NEG
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 5
60328: NEG
60329: PUSH
60330: LD_INT 5
60332: NEG
60333: PUSH
60334: EMPTY
60335: LIST
60336: LIST
60337: PUSH
60338: LD_INT 5
60340: NEG
60341: PUSH
60342: LD_INT 6
60344: NEG
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 6
60352: NEG
60353: PUSH
60354: LD_INT 5
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 6
60364: NEG
60365: PUSH
60366: LD_INT 6
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: EMPTY
60375: LIST
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: LIST
60384: LIST
60385: LIST
60386: LIST
60387: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
60388: LD_ADDR_VAR 0 41
60392: PUSH
60393: LD_INT 0
60395: PUSH
60396: LD_INT 2
60398: NEG
60399: PUSH
60400: EMPTY
60401: LIST
60402: LIST
60403: PUSH
60404: LD_INT 1
60406: NEG
60407: PUSH
60408: LD_INT 3
60410: NEG
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: PUSH
60416: LD_INT 1
60418: PUSH
60419: LD_INT 2
60421: NEG
60422: PUSH
60423: EMPTY
60424: LIST
60425: LIST
60426: PUSH
60427: EMPTY
60428: LIST
60429: LIST
60430: LIST
60431: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
60432: LD_ADDR_VAR 0 42
60436: PUSH
60437: LD_INT 2
60439: PUSH
60440: LD_INT 0
60442: PUSH
60443: EMPTY
60444: LIST
60445: LIST
60446: PUSH
60447: LD_INT 2
60449: PUSH
60450: LD_INT 1
60452: NEG
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: PUSH
60458: LD_INT 3
60460: PUSH
60461: LD_INT 1
60463: PUSH
60464: EMPTY
60465: LIST
60466: LIST
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: LIST
60472: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
60473: LD_ADDR_VAR 0 43
60477: PUSH
60478: LD_INT 2
60480: PUSH
60481: LD_INT 2
60483: PUSH
60484: EMPTY
60485: LIST
60486: LIST
60487: PUSH
60488: LD_INT 3
60490: PUSH
60491: LD_INT 2
60493: PUSH
60494: EMPTY
60495: LIST
60496: LIST
60497: PUSH
60498: LD_INT 2
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: LIST
60512: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
60513: LD_ADDR_VAR 0 44
60517: PUSH
60518: LD_INT 0
60520: PUSH
60521: LD_INT 2
60523: PUSH
60524: EMPTY
60525: LIST
60526: LIST
60527: PUSH
60528: LD_INT 1
60530: PUSH
60531: LD_INT 3
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: PUSH
60538: LD_INT 1
60540: NEG
60541: PUSH
60542: LD_INT 2
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: LIST
60553: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
60554: LD_ADDR_VAR 0 45
60558: PUSH
60559: LD_INT 2
60561: NEG
60562: PUSH
60563: LD_INT 0
60565: PUSH
60566: EMPTY
60567: LIST
60568: LIST
60569: PUSH
60570: LD_INT 2
60572: NEG
60573: PUSH
60574: LD_INT 1
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 3
60583: NEG
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: LIST
60597: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
60598: LD_ADDR_VAR 0 46
60602: PUSH
60603: LD_INT 2
60605: NEG
60606: PUSH
60607: LD_INT 2
60609: NEG
60610: PUSH
60611: EMPTY
60612: LIST
60613: LIST
60614: PUSH
60615: LD_INT 2
60617: NEG
60618: PUSH
60619: LD_INT 3
60621: NEG
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: LD_INT 2
60633: NEG
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: EMPTY
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
60644: LD_ADDR_VAR 0 47
60648: PUSH
60649: LD_INT 2
60651: NEG
60652: PUSH
60653: LD_INT 3
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 1
60663: NEG
60664: PUSH
60665: LD_INT 3
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: EMPTY
60674: LIST
60675: LIST
60676: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
60677: LD_ADDR_VAR 0 48
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: LD_INT 2
60687: NEG
60688: PUSH
60689: EMPTY
60690: LIST
60691: LIST
60692: PUSH
60693: LD_INT 2
60695: PUSH
60696: LD_INT 1
60698: NEG
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
60708: LD_ADDR_VAR 0 49
60712: PUSH
60713: LD_INT 3
60715: PUSH
60716: LD_INT 1
60718: PUSH
60719: EMPTY
60720: LIST
60721: LIST
60722: PUSH
60723: LD_INT 3
60725: PUSH
60726: LD_INT 2
60728: PUSH
60729: EMPTY
60730: LIST
60731: LIST
60732: PUSH
60733: EMPTY
60734: LIST
60735: LIST
60736: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
60737: LD_ADDR_VAR 0 50
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: LD_INT 3
60747: PUSH
60748: EMPTY
60749: LIST
60750: LIST
60751: PUSH
60752: LD_INT 1
60754: PUSH
60755: LD_INT 3
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
60766: LD_ADDR_VAR 0 51
60770: PUSH
60771: LD_INT 1
60773: NEG
60774: PUSH
60775: LD_INT 2
60777: PUSH
60778: EMPTY
60779: LIST
60780: LIST
60781: PUSH
60782: LD_INT 2
60784: NEG
60785: PUSH
60786: LD_INT 1
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
60797: LD_ADDR_VAR 0 52
60801: PUSH
60802: LD_INT 3
60804: NEG
60805: PUSH
60806: LD_INT 1
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 3
60816: NEG
60817: PUSH
60818: LD_INT 2
60820: NEG
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60830: LD_ADDR_VAR 0 53
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: LD_INT 3
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 0
60849: PUSH
60850: LD_INT 3
60852: NEG
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: LD_INT 2
60863: NEG
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: EMPTY
60870: LIST
60871: LIST
60872: LIST
60873: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60874: LD_ADDR_VAR 0 54
60878: PUSH
60879: LD_INT 2
60881: PUSH
60882: LD_INT 1
60884: NEG
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 3
60892: PUSH
60893: LD_INT 0
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 3
60902: PUSH
60903: LD_INT 1
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: EMPTY
60911: LIST
60912: LIST
60913: LIST
60914: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60915: LD_ADDR_VAR 0 55
60919: PUSH
60920: LD_INT 3
60922: PUSH
60923: LD_INT 2
60925: PUSH
60926: EMPTY
60927: LIST
60928: LIST
60929: PUSH
60930: LD_INT 3
60932: PUSH
60933: LD_INT 3
60935: PUSH
60936: EMPTY
60937: LIST
60938: LIST
60939: PUSH
60940: LD_INT 2
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: EMPTY
60947: LIST
60948: LIST
60949: PUSH
60950: EMPTY
60951: LIST
60952: LIST
60953: LIST
60954: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60955: LD_ADDR_VAR 0 56
60959: PUSH
60960: LD_INT 1
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 0
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 1
60982: NEG
60983: PUSH
60984: LD_INT 2
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: LIST
60995: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60996: LD_ADDR_VAR 0 57
61000: PUSH
61001: LD_INT 2
61003: NEG
61004: PUSH
61005: LD_INT 1
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: PUSH
61012: LD_INT 3
61014: NEG
61015: PUSH
61016: LD_INT 0
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: PUSH
61023: LD_INT 3
61025: NEG
61026: PUSH
61027: LD_INT 1
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61040: LD_ADDR_VAR 0 58
61044: PUSH
61045: LD_INT 2
61047: NEG
61048: PUSH
61049: LD_INT 3
61051: NEG
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: PUSH
61057: LD_INT 3
61059: NEG
61060: PUSH
61061: LD_INT 2
61063: NEG
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 3
61071: NEG
61072: PUSH
61073: LD_INT 3
61075: NEG
61076: PUSH
61077: EMPTY
61078: LIST
61079: LIST
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: LIST
61085: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
61086: LD_ADDR_VAR 0 59
61090: PUSH
61091: LD_INT 1
61093: NEG
61094: PUSH
61095: LD_INT 2
61097: NEG
61098: PUSH
61099: EMPTY
61100: LIST
61101: LIST
61102: PUSH
61103: LD_INT 0
61105: PUSH
61106: LD_INT 2
61108: NEG
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_INT 1
61116: PUSH
61117: LD_INT 1
61119: NEG
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: LIST
61129: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
61130: LD_ADDR_VAR 0 60
61134: PUSH
61135: LD_INT 1
61137: PUSH
61138: LD_INT 1
61140: NEG
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: EMPTY
61153: LIST
61154: LIST
61155: PUSH
61156: LD_INT 2
61158: PUSH
61159: LD_INT 1
61161: PUSH
61162: EMPTY
61163: LIST
61164: LIST
61165: PUSH
61166: EMPTY
61167: LIST
61168: LIST
61169: LIST
61170: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
61171: LD_ADDR_VAR 0 61
61175: PUSH
61176: LD_INT 2
61178: PUSH
61179: LD_INT 1
61181: PUSH
61182: EMPTY
61183: LIST
61184: LIST
61185: PUSH
61186: LD_INT 2
61188: PUSH
61189: LD_INT 2
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: LD_INT 2
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: EMPTY
61207: LIST
61208: LIST
61209: LIST
61210: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
61211: LD_ADDR_VAR 0 62
61215: PUSH
61216: LD_INT 1
61218: PUSH
61219: LD_INT 2
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PUSH
61236: LD_INT 1
61238: NEG
61239: PUSH
61240: LD_INT 1
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
61252: LD_ADDR_VAR 0 63
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: EMPTY
61265: LIST
61266: LIST
61267: PUSH
61268: LD_INT 2
61270: NEG
61271: PUSH
61272: LD_INT 0
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: PUSH
61279: LD_INT 2
61281: NEG
61282: PUSH
61283: LD_INT 1
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61296: LD_ADDR_VAR 0 64
61300: PUSH
61301: LD_INT 1
61303: NEG
61304: PUSH
61305: LD_INT 2
61307: NEG
61308: PUSH
61309: EMPTY
61310: LIST
61311: LIST
61312: PUSH
61313: LD_INT 2
61315: NEG
61316: PUSH
61317: LD_INT 1
61319: NEG
61320: PUSH
61321: EMPTY
61322: LIST
61323: LIST
61324: PUSH
61325: LD_INT 2
61327: NEG
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: EMPTY
61334: LIST
61335: LIST
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: LIST
61341: ST_TO_ADDR
// end ; 2 :
61342: GO 64608
61344: LD_INT 2
61346: DOUBLE
61347: EQUAL
61348: IFTRUE 61352
61350: GO 64607
61352: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
61353: LD_ADDR_VAR 0 29
61357: PUSH
61358: LD_INT 4
61360: PUSH
61361: LD_INT 0
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: LD_INT 4
61370: PUSH
61371: LD_INT 1
61373: NEG
61374: PUSH
61375: EMPTY
61376: LIST
61377: LIST
61378: PUSH
61379: LD_INT 5
61381: PUSH
61382: LD_INT 0
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 5
61391: PUSH
61392: LD_INT 1
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 4
61401: PUSH
61402: LD_INT 1
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: LD_INT 3
61411: PUSH
61412: LD_INT 0
61414: PUSH
61415: EMPTY
61416: LIST
61417: LIST
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: LD_INT 1
61424: NEG
61425: PUSH
61426: EMPTY
61427: LIST
61428: LIST
61429: PUSH
61430: LD_INT 3
61432: PUSH
61433: LD_INT 2
61435: NEG
61436: PUSH
61437: EMPTY
61438: LIST
61439: LIST
61440: PUSH
61441: LD_INT 5
61443: PUSH
61444: LD_INT 2
61446: PUSH
61447: EMPTY
61448: LIST
61449: LIST
61450: PUSH
61451: LD_INT 3
61453: PUSH
61454: LD_INT 3
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: PUSH
61461: LD_INT 3
61463: PUSH
61464: LD_INT 2
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 4
61473: PUSH
61474: LD_INT 3
61476: PUSH
61477: EMPTY
61478: LIST
61479: LIST
61480: PUSH
61481: LD_INT 4
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 3
61493: PUSH
61494: LD_INT 4
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PUSH
61501: LD_INT 2
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: EMPTY
61508: LIST
61509: LIST
61510: PUSH
61511: LD_INT 2
61513: PUSH
61514: LD_INT 2
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 4
61523: PUSH
61524: LD_INT 2
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: LD_INT 2
61533: PUSH
61534: LD_INT 4
61536: PUSH
61537: EMPTY
61538: LIST
61539: LIST
61540: PUSH
61541: LD_INT 0
61543: PUSH
61544: LD_INT 4
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: PUSH
61551: LD_INT 0
61553: PUSH
61554: LD_INT 3
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: PUSH
61564: LD_INT 4
61566: PUSH
61567: EMPTY
61568: LIST
61569: LIST
61570: PUSH
61571: LD_INT 1
61573: PUSH
61574: LD_INT 5
61576: PUSH
61577: EMPTY
61578: LIST
61579: LIST
61580: PUSH
61581: LD_INT 0
61583: PUSH
61584: LD_INT 5
61586: PUSH
61587: EMPTY
61588: LIST
61589: LIST
61590: PUSH
61591: LD_INT 1
61593: NEG
61594: PUSH
61595: LD_INT 4
61597: PUSH
61598: EMPTY
61599: LIST
61600: LIST
61601: PUSH
61602: LD_INT 1
61604: NEG
61605: PUSH
61606: LD_INT 3
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: PUSH
61613: LD_INT 2
61615: PUSH
61616: LD_INT 5
61618: PUSH
61619: EMPTY
61620: LIST
61621: LIST
61622: PUSH
61623: LD_INT 2
61625: NEG
61626: PUSH
61627: LD_INT 3
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 3
61636: NEG
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: NEG
61648: PUSH
61649: LD_INT 1
61651: NEG
61652: PUSH
61653: EMPTY
61654: LIST
61655: LIST
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: LD_INT 0
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: PUSH
61668: LD_INT 2
61670: NEG
61671: PUSH
61672: LD_INT 1
61674: PUSH
61675: EMPTY
61676: LIST
61677: LIST
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: LD_INT 1
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 4
61692: NEG
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 4
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: LD_INT 4
61715: NEG
61716: PUSH
61717: LD_INT 2
61719: NEG
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: LD_INT 2
61727: NEG
61728: PUSH
61729: LD_INT 2
61731: PUSH
61732: EMPTY
61733: LIST
61734: LIST
61735: PUSH
61736: LD_INT 4
61738: NEG
61739: PUSH
61740: LD_INT 4
61742: NEG
61743: PUSH
61744: EMPTY
61745: LIST
61746: LIST
61747: PUSH
61748: LD_INT 4
61750: NEG
61751: PUSH
61752: LD_INT 5
61754: NEG
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: PUSH
61760: LD_INT 3
61762: NEG
61763: PUSH
61764: LD_INT 4
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 3
61774: NEG
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 4
61786: NEG
61787: PUSH
61788: LD_INT 3
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 5
61798: NEG
61799: PUSH
61800: LD_INT 4
61802: NEG
61803: PUSH
61804: EMPTY
61805: LIST
61806: LIST
61807: PUSH
61808: LD_INT 5
61810: NEG
61811: PUSH
61812: LD_INT 5
61814: NEG
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: PUSH
61820: LD_INT 3
61822: NEG
61823: PUSH
61824: LD_INT 5
61826: NEG
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: PUSH
61832: LD_INT 5
61834: NEG
61835: PUSH
61836: LD_INT 3
61838: NEG
61839: PUSH
61840: EMPTY
61841: LIST
61842: LIST
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: LIST
61848: LIST
61849: LIST
61850: LIST
61851: LIST
61852: LIST
61853: LIST
61854: LIST
61855: LIST
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: LIST
61873: LIST
61874: LIST
61875: LIST
61876: LIST
61877: LIST
61878: LIST
61879: LIST
61880: LIST
61881: LIST
61882: LIST
61883: LIST
61884: LIST
61885: LIST
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
61891: LD_ADDR_VAR 0 30
61895: PUSH
61896: LD_INT 4
61898: PUSH
61899: LD_INT 4
61901: PUSH
61902: EMPTY
61903: LIST
61904: LIST
61905: PUSH
61906: LD_INT 4
61908: PUSH
61909: LD_INT 3
61911: PUSH
61912: EMPTY
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 5
61918: PUSH
61919: LD_INT 4
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: PUSH
61926: LD_INT 5
61928: PUSH
61929: LD_INT 5
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: PUSH
61936: LD_INT 4
61938: PUSH
61939: LD_INT 5
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PUSH
61946: LD_INT 3
61948: PUSH
61949: LD_INT 4
61951: PUSH
61952: EMPTY
61953: LIST
61954: LIST
61955: PUSH
61956: LD_INT 3
61958: PUSH
61959: LD_INT 3
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 5
61968: PUSH
61969: LD_INT 3
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 3
61978: PUSH
61979: LD_INT 5
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 0
61988: PUSH
61989: LD_INT 3
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: PUSH
62009: LD_INT 3
62011: PUSH
62012: EMPTY
62013: LIST
62014: LIST
62015: PUSH
62016: LD_INT 1
62018: PUSH
62019: LD_INT 4
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: LD_INT 0
62028: PUSH
62029: LD_INT 4
62031: PUSH
62032: EMPTY
62033: LIST
62034: LIST
62035: PUSH
62036: LD_INT 1
62038: NEG
62039: PUSH
62040: LD_INT 3
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 1
62049: NEG
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: PUSH
62058: LD_INT 2
62060: PUSH
62061: LD_INT 4
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 2
62070: NEG
62071: PUSH
62072: LD_INT 2
62074: PUSH
62075: EMPTY
62076: LIST
62077: LIST
62078: PUSH
62079: LD_INT 4
62081: NEG
62082: PUSH
62083: LD_INT 0
62085: PUSH
62086: EMPTY
62087: LIST
62088: LIST
62089: PUSH
62090: LD_INT 4
62092: NEG
62093: PUSH
62094: LD_INT 1
62096: NEG
62097: PUSH
62098: EMPTY
62099: LIST
62100: LIST
62101: PUSH
62102: LD_INT 3
62104: NEG
62105: PUSH
62106: LD_INT 0
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: PUSH
62113: LD_INT 3
62115: NEG
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: EMPTY
62121: LIST
62122: LIST
62123: PUSH
62124: LD_INT 4
62126: NEG
62127: PUSH
62128: LD_INT 1
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 5
62137: NEG
62138: PUSH
62139: LD_INT 0
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 5
62148: NEG
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: EMPTY
62155: LIST
62156: LIST
62157: PUSH
62158: LD_INT 5
62160: NEG
62161: PUSH
62162: LD_INT 2
62164: NEG
62165: PUSH
62166: EMPTY
62167: LIST
62168: LIST
62169: PUSH
62170: LD_INT 3
62172: NEG
62173: PUSH
62174: LD_INT 2
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 3
62183: NEG
62184: PUSH
62185: LD_INT 3
62187: NEG
62188: PUSH
62189: EMPTY
62190: LIST
62191: LIST
62192: PUSH
62193: LD_INT 3
62195: NEG
62196: PUSH
62197: LD_INT 4
62199: NEG
62200: PUSH
62201: EMPTY
62202: LIST
62203: LIST
62204: PUSH
62205: LD_INT 2
62207: NEG
62208: PUSH
62209: LD_INT 3
62211: NEG
62212: PUSH
62213: EMPTY
62214: LIST
62215: LIST
62216: PUSH
62217: LD_INT 2
62219: NEG
62220: PUSH
62221: LD_INT 2
62223: NEG
62224: PUSH
62225: EMPTY
62226: LIST
62227: LIST
62228: PUSH
62229: LD_INT 3
62231: NEG
62232: PUSH
62233: LD_INT 2
62235: NEG
62236: PUSH
62237: EMPTY
62238: LIST
62239: LIST
62240: PUSH
62241: LD_INT 4
62243: NEG
62244: PUSH
62245: LD_INT 3
62247: NEG
62248: PUSH
62249: EMPTY
62250: LIST
62251: LIST
62252: PUSH
62253: LD_INT 4
62255: NEG
62256: PUSH
62257: LD_INT 4
62259: NEG
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: PUSH
62265: LD_INT 2
62267: NEG
62268: PUSH
62269: LD_INT 4
62271: NEG
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 4
62279: NEG
62280: PUSH
62281: LD_INT 2
62283: NEG
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 4
62294: NEG
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: PUSH
62300: LD_INT 0
62302: PUSH
62303: LD_INT 5
62305: NEG
62306: PUSH
62307: EMPTY
62308: LIST
62309: LIST
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: LD_INT 4
62316: NEG
62317: PUSH
62318: EMPTY
62319: LIST
62320: LIST
62321: PUSH
62322: LD_INT 1
62324: PUSH
62325: LD_INT 3
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 0
62335: PUSH
62336: LD_INT 3
62338: NEG
62339: PUSH
62340: EMPTY
62341: LIST
62342: LIST
62343: PUSH
62344: LD_INT 1
62346: NEG
62347: PUSH
62348: LD_INT 4
62350: NEG
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: PUSH
62356: LD_INT 1
62358: NEG
62359: PUSH
62360: LD_INT 5
62362: NEG
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: PUSH
62368: LD_INT 2
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 2
62381: NEG
62382: PUSH
62383: LD_INT 5
62385: NEG
62386: PUSH
62387: EMPTY
62388: LIST
62389: LIST
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: LIST
62395: LIST
62396: LIST
62397: LIST
62398: LIST
62399: LIST
62400: LIST
62401: LIST
62402: LIST
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: LIST
62408: LIST
62409: LIST
62410: LIST
62411: LIST
62412: LIST
62413: LIST
62414: LIST
62415: LIST
62416: LIST
62417: LIST
62418: LIST
62419: LIST
62420: LIST
62421: LIST
62422: LIST
62423: LIST
62424: LIST
62425: LIST
62426: LIST
62427: LIST
62428: LIST
62429: LIST
62430: LIST
62431: LIST
62432: LIST
62433: LIST
62434: LIST
62435: LIST
62436: LIST
62437: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
62438: LD_ADDR_VAR 0 31
62442: PUSH
62443: LD_INT 0
62445: PUSH
62446: LD_INT 4
62448: PUSH
62449: EMPTY
62450: LIST
62451: LIST
62452: PUSH
62453: LD_INT 0
62455: PUSH
62456: LD_INT 3
62458: PUSH
62459: EMPTY
62460: LIST
62461: LIST
62462: PUSH
62463: LD_INT 1
62465: PUSH
62466: LD_INT 4
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 1
62475: PUSH
62476: LD_INT 5
62478: PUSH
62479: EMPTY
62480: LIST
62481: LIST
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: LD_INT 5
62488: PUSH
62489: EMPTY
62490: LIST
62491: LIST
62492: PUSH
62493: LD_INT 1
62495: NEG
62496: PUSH
62497: LD_INT 4
62499: PUSH
62500: EMPTY
62501: LIST
62502: LIST
62503: PUSH
62504: LD_INT 1
62506: NEG
62507: PUSH
62508: LD_INT 3
62510: PUSH
62511: EMPTY
62512: LIST
62513: LIST
62514: PUSH
62515: LD_INT 2
62517: PUSH
62518: LD_INT 5
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 2
62527: NEG
62528: PUSH
62529: LD_INT 3
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 3
62538: NEG
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 3
62549: NEG
62550: PUSH
62551: LD_INT 1
62553: NEG
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 2
62561: NEG
62562: PUSH
62563: LD_INT 0
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 2
62572: NEG
62573: PUSH
62574: LD_INT 1
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 3
62583: NEG
62584: PUSH
62585: LD_INT 1
62587: PUSH
62588: EMPTY
62589: LIST
62590: LIST
62591: PUSH
62592: LD_INT 4
62594: NEG
62595: PUSH
62596: LD_INT 0
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PUSH
62603: LD_INT 4
62605: NEG
62606: PUSH
62607: LD_INT 1
62609: NEG
62610: PUSH
62611: EMPTY
62612: LIST
62613: LIST
62614: PUSH
62615: LD_INT 4
62617: NEG
62618: PUSH
62619: LD_INT 2
62621: NEG
62622: PUSH
62623: EMPTY
62624: LIST
62625: LIST
62626: PUSH
62627: LD_INT 2
62629: NEG
62630: PUSH
62631: LD_INT 2
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 4
62640: NEG
62641: PUSH
62642: LD_INT 4
62644: NEG
62645: PUSH
62646: EMPTY
62647: LIST
62648: LIST
62649: PUSH
62650: LD_INT 4
62652: NEG
62653: PUSH
62654: LD_INT 5
62656: NEG
62657: PUSH
62658: EMPTY
62659: LIST
62660: LIST
62661: PUSH
62662: LD_INT 3
62664: NEG
62665: PUSH
62666: LD_INT 4
62668: NEG
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 3
62676: NEG
62677: PUSH
62678: LD_INT 3
62680: NEG
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: PUSH
62686: LD_INT 4
62688: NEG
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 5
62700: NEG
62701: PUSH
62702: LD_INT 4
62704: NEG
62705: PUSH
62706: EMPTY
62707: LIST
62708: LIST
62709: PUSH
62710: LD_INT 5
62712: NEG
62713: PUSH
62714: LD_INT 5
62716: NEG
62717: PUSH
62718: EMPTY
62719: LIST
62720: LIST
62721: PUSH
62722: LD_INT 3
62724: NEG
62725: PUSH
62726: LD_INT 5
62728: NEG
62729: PUSH
62730: EMPTY
62731: LIST
62732: LIST
62733: PUSH
62734: LD_INT 5
62736: NEG
62737: PUSH
62738: LD_INT 3
62740: NEG
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: PUSH
62746: LD_INT 0
62748: PUSH
62749: LD_INT 3
62751: NEG
62752: PUSH
62753: EMPTY
62754: LIST
62755: LIST
62756: PUSH
62757: LD_INT 0
62759: PUSH
62760: LD_INT 4
62762: NEG
62763: PUSH
62764: EMPTY
62765: LIST
62766: LIST
62767: PUSH
62768: LD_INT 1
62770: PUSH
62771: LD_INT 3
62773: NEG
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: PUSH
62779: LD_INT 1
62781: PUSH
62782: LD_INT 2
62784: NEG
62785: PUSH
62786: EMPTY
62787: LIST
62788: LIST
62789: PUSH
62790: LD_INT 0
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: EMPTY
62798: LIST
62799: LIST
62800: PUSH
62801: LD_INT 1
62803: NEG
62804: PUSH
62805: LD_INT 3
62807: NEG
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: PUSH
62813: LD_INT 1
62815: NEG
62816: PUSH
62817: LD_INT 4
62819: NEG
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: PUSH
62828: LD_INT 2
62830: NEG
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 2
62838: NEG
62839: PUSH
62840: LD_INT 4
62842: NEG
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 4
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 4
62860: PUSH
62861: LD_INT 1
62863: NEG
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 5
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 5
62881: PUSH
62882: LD_INT 1
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 4
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: LD_INT 0
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: LD_INT 1
62914: NEG
62915: PUSH
62916: EMPTY
62917: LIST
62918: LIST
62919: PUSH
62920: LD_INT 3
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: LD_INT 5
62933: PUSH
62934: LD_INT 2
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: LIST
62955: LIST
62956: LIST
62957: LIST
62958: LIST
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: LIST
62964: LIST
62965: LIST
62966: LIST
62967: LIST
62968: LIST
62969: LIST
62970: LIST
62971: LIST
62972: LIST
62973: LIST
62974: LIST
62975: LIST
62976: LIST
62977: LIST
62978: LIST
62979: LIST
62980: LIST
62981: LIST
62982: LIST
62983: LIST
62984: LIST
62985: LIST
62986: LIST
62987: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
62988: LD_ADDR_VAR 0 32
62992: PUSH
62993: LD_INT 4
62995: NEG
62996: PUSH
62997: LD_INT 0
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: PUSH
63004: LD_INT 4
63006: NEG
63007: PUSH
63008: LD_INT 1
63010: NEG
63011: PUSH
63012: EMPTY
63013: LIST
63014: LIST
63015: PUSH
63016: LD_INT 3
63018: NEG
63019: PUSH
63020: LD_INT 0
63022: PUSH
63023: EMPTY
63024: LIST
63025: LIST
63026: PUSH
63027: LD_INT 3
63029: NEG
63030: PUSH
63031: LD_INT 1
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 4
63040: NEG
63041: PUSH
63042: LD_INT 1
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: PUSH
63049: LD_INT 5
63051: NEG
63052: PUSH
63053: LD_INT 0
63055: PUSH
63056: EMPTY
63057: LIST
63058: LIST
63059: PUSH
63060: LD_INT 5
63062: NEG
63063: PUSH
63064: LD_INT 1
63066: NEG
63067: PUSH
63068: EMPTY
63069: LIST
63070: LIST
63071: PUSH
63072: LD_INT 5
63074: NEG
63075: PUSH
63076: LD_INT 2
63078: NEG
63079: PUSH
63080: EMPTY
63081: LIST
63082: LIST
63083: PUSH
63084: LD_INT 3
63086: NEG
63087: PUSH
63088: LD_INT 2
63090: PUSH
63091: EMPTY
63092: LIST
63093: LIST
63094: PUSH
63095: LD_INT 3
63097: NEG
63098: PUSH
63099: LD_INT 3
63101: NEG
63102: PUSH
63103: EMPTY
63104: LIST
63105: LIST
63106: PUSH
63107: LD_INT 3
63109: NEG
63110: PUSH
63111: LD_INT 4
63113: NEG
63114: PUSH
63115: EMPTY
63116: LIST
63117: LIST
63118: PUSH
63119: LD_INT 2
63121: NEG
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: PUSH
63131: LD_INT 2
63133: NEG
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 3
63145: NEG
63146: PUSH
63147: LD_INT 2
63149: NEG
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: PUSH
63155: LD_INT 4
63157: NEG
63158: PUSH
63159: LD_INT 3
63161: NEG
63162: PUSH
63163: EMPTY
63164: LIST
63165: LIST
63166: PUSH
63167: LD_INT 4
63169: NEG
63170: PUSH
63171: LD_INT 4
63173: NEG
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: NEG
63182: PUSH
63183: LD_INT 4
63185: NEG
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 4
63193: NEG
63194: PUSH
63195: LD_INT 2
63197: NEG
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: PUSH
63203: LD_INT 0
63205: PUSH
63206: LD_INT 4
63208: NEG
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 0
63216: PUSH
63217: LD_INT 5
63219: NEG
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 1
63227: PUSH
63228: LD_INT 4
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: LD_INT 3
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 0
63249: PUSH
63250: LD_INT 3
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 1
63260: NEG
63261: PUSH
63262: LD_INT 4
63264: NEG
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 1
63272: NEG
63273: PUSH
63274: LD_INT 5
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: LD_INT 3
63287: NEG
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: LD_INT 2
63295: NEG
63296: PUSH
63297: LD_INT 5
63299: NEG
63300: PUSH
63301: EMPTY
63302: LIST
63303: LIST
63304: PUSH
63305: LD_INT 3
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 3
63317: PUSH
63318: LD_INT 1
63320: NEG
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 4
63328: PUSH
63329: LD_INT 0
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: LD_INT 4
63338: PUSH
63339: LD_INT 1
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: PUSH
63346: LD_INT 3
63348: PUSH
63349: LD_INT 1
63351: PUSH
63352: EMPTY
63353: LIST
63354: LIST
63355: PUSH
63356: LD_INT 2
63358: PUSH
63359: LD_INT 0
63361: PUSH
63362: EMPTY
63363: LIST
63364: LIST
63365: PUSH
63366: LD_INT 2
63368: PUSH
63369: LD_INT 1
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 2
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 4
63390: PUSH
63391: LD_INT 2
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 4
63400: PUSH
63401: LD_INT 4
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: PUSH
63408: LD_INT 4
63410: PUSH
63411: LD_INT 3
63413: PUSH
63414: EMPTY
63415: LIST
63416: LIST
63417: PUSH
63418: LD_INT 5
63420: PUSH
63421: LD_INT 4
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: PUSH
63428: LD_INT 5
63430: PUSH
63431: LD_INT 5
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 4
63440: PUSH
63441: LD_INT 5
63443: PUSH
63444: EMPTY
63445: LIST
63446: LIST
63447: PUSH
63448: LD_INT 3
63450: PUSH
63451: LD_INT 4
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: PUSH
63458: LD_INT 3
63460: PUSH
63461: LD_INT 3
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 5
63470: PUSH
63471: LD_INT 3
63473: PUSH
63474: EMPTY
63475: LIST
63476: LIST
63477: PUSH
63478: LD_INT 3
63480: PUSH
63481: LD_INT 5
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: EMPTY
63489: LIST
63490: LIST
63491: LIST
63492: LIST
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: LIST
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: LIST
63513: LIST
63514: LIST
63515: LIST
63516: LIST
63517: LIST
63518: LIST
63519: LIST
63520: LIST
63521: LIST
63522: LIST
63523: LIST
63524: LIST
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: LIST
63533: LIST
63534: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
63535: LD_ADDR_VAR 0 33
63539: PUSH
63540: LD_INT 4
63542: NEG
63543: PUSH
63544: LD_INT 4
63546: NEG
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: PUSH
63552: LD_INT 4
63554: NEG
63555: PUSH
63556: LD_INT 5
63558: NEG
63559: PUSH
63560: EMPTY
63561: LIST
63562: LIST
63563: PUSH
63564: LD_INT 3
63566: NEG
63567: PUSH
63568: LD_INT 4
63570: NEG
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: PUSH
63576: LD_INT 3
63578: NEG
63579: PUSH
63580: LD_INT 3
63582: NEG
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: PUSH
63588: LD_INT 4
63590: NEG
63591: PUSH
63592: LD_INT 3
63594: NEG
63595: PUSH
63596: EMPTY
63597: LIST
63598: LIST
63599: PUSH
63600: LD_INT 5
63602: NEG
63603: PUSH
63604: LD_INT 4
63606: NEG
63607: PUSH
63608: EMPTY
63609: LIST
63610: LIST
63611: PUSH
63612: LD_INT 5
63614: NEG
63615: PUSH
63616: LD_INT 5
63618: NEG
63619: PUSH
63620: EMPTY
63621: LIST
63622: LIST
63623: PUSH
63624: LD_INT 3
63626: NEG
63627: PUSH
63628: LD_INT 5
63630: NEG
63631: PUSH
63632: EMPTY
63633: LIST
63634: LIST
63635: PUSH
63636: LD_INT 5
63638: NEG
63639: PUSH
63640: LD_INT 3
63642: NEG
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 0
63650: PUSH
63651: LD_INT 3
63653: NEG
63654: PUSH
63655: EMPTY
63656: LIST
63657: LIST
63658: PUSH
63659: LD_INT 0
63661: PUSH
63662: LD_INT 4
63664: NEG
63665: PUSH
63666: EMPTY
63667: LIST
63668: LIST
63669: PUSH
63670: LD_INT 1
63672: PUSH
63673: LD_INT 3
63675: NEG
63676: PUSH
63677: EMPTY
63678: LIST
63679: LIST
63680: PUSH
63681: LD_INT 1
63683: PUSH
63684: LD_INT 2
63686: NEG
63687: PUSH
63688: EMPTY
63689: LIST
63690: LIST
63691: PUSH
63692: LD_INT 0
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 1
63705: NEG
63706: PUSH
63707: LD_INT 3
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 1
63717: NEG
63718: PUSH
63719: LD_INT 4
63721: NEG
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: PUSH
63730: LD_INT 2
63732: NEG
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: NEG
63741: PUSH
63742: LD_INT 4
63744: NEG
63745: PUSH
63746: EMPTY
63747: LIST
63748: LIST
63749: PUSH
63750: LD_INT 4
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 4
63762: PUSH
63763: LD_INT 1
63765: NEG
63766: PUSH
63767: EMPTY
63768: LIST
63769: LIST
63770: PUSH
63771: LD_INT 5
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 5
63783: PUSH
63784: LD_INT 1
63786: PUSH
63787: EMPTY
63788: LIST
63789: LIST
63790: PUSH
63791: LD_INT 4
63793: PUSH
63794: LD_INT 1
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 3
63803: PUSH
63804: LD_INT 0
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 3
63813: PUSH
63814: LD_INT 1
63816: NEG
63817: PUSH
63818: EMPTY
63819: LIST
63820: LIST
63821: PUSH
63822: LD_INT 3
63824: PUSH
63825: LD_INT 2
63827: NEG
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 5
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 3
63845: PUSH
63846: LD_INT 3
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: PUSH
63853: LD_INT 3
63855: PUSH
63856: LD_INT 2
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: PUSH
63863: LD_INT 4
63865: PUSH
63866: LD_INT 3
63868: PUSH
63869: EMPTY
63870: LIST
63871: LIST
63872: PUSH
63873: LD_INT 4
63875: PUSH
63876: LD_INT 4
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 3
63885: PUSH
63886: LD_INT 4
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: LD_INT 2
63895: PUSH
63896: LD_INT 3
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 2
63905: PUSH
63906: LD_INT 2
63908: PUSH
63909: EMPTY
63910: LIST
63911: LIST
63912: PUSH
63913: LD_INT 4
63915: PUSH
63916: LD_INT 2
63918: PUSH
63919: EMPTY
63920: LIST
63921: LIST
63922: PUSH
63923: LD_INT 2
63925: PUSH
63926: LD_INT 4
63928: PUSH
63929: EMPTY
63930: LIST
63931: LIST
63932: PUSH
63933: LD_INT 0
63935: PUSH
63936: LD_INT 4
63938: PUSH
63939: EMPTY
63940: LIST
63941: LIST
63942: PUSH
63943: LD_INT 0
63945: PUSH
63946: LD_INT 3
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: PUSH
63956: LD_INT 4
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: LD_INT 1
63965: PUSH
63966: LD_INT 5
63968: PUSH
63969: EMPTY
63970: LIST
63971: LIST
63972: PUSH
63973: LD_INT 0
63975: PUSH
63976: LD_INT 5
63978: PUSH
63979: EMPTY
63980: LIST
63981: LIST
63982: PUSH
63983: LD_INT 1
63985: NEG
63986: PUSH
63987: LD_INT 4
63989: PUSH
63990: EMPTY
63991: LIST
63992: LIST
63993: PUSH
63994: LD_INT 1
63996: NEG
63997: PUSH
63998: LD_INT 3
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 2
64007: PUSH
64008: LD_INT 5
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 2
64017: NEG
64018: PUSH
64019: LD_INT 3
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: EMPTY
64027: LIST
64028: LIST
64029: LIST
64030: LIST
64031: LIST
64032: LIST
64033: LIST
64034: LIST
64035: LIST
64036: LIST
64037: LIST
64038: LIST
64039: LIST
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: LIST
64066: LIST
64067: LIST
64068: LIST
64069: LIST
64070: LIST
64071: LIST
64072: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
64073: LD_ADDR_VAR 0 34
64077: PUSH
64078: LD_INT 0
64080: PUSH
64081: LD_INT 4
64083: NEG
64084: PUSH
64085: EMPTY
64086: LIST
64087: LIST
64088: PUSH
64089: LD_INT 0
64091: PUSH
64092: LD_INT 5
64094: NEG
64095: PUSH
64096: EMPTY
64097: LIST
64098: LIST
64099: PUSH
64100: LD_INT 1
64102: PUSH
64103: LD_INT 4
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 1
64113: PUSH
64114: LD_INT 3
64116: NEG
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 3
64127: NEG
64128: PUSH
64129: EMPTY
64130: LIST
64131: LIST
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: LD_INT 4
64139: NEG
64140: PUSH
64141: EMPTY
64142: LIST
64143: LIST
64144: PUSH
64145: LD_INT 1
64147: NEG
64148: PUSH
64149: LD_INT 5
64151: NEG
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: PUSH
64157: LD_INT 2
64159: PUSH
64160: LD_INT 3
64162: NEG
64163: PUSH
64164: EMPTY
64165: LIST
64166: LIST
64167: PUSH
64168: LD_INT 2
64170: NEG
64171: PUSH
64172: LD_INT 5
64174: NEG
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 3
64182: PUSH
64183: LD_INT 0
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 3
64192: PUSH
64193: LD_INT 1
64195: NEG
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 4
64203: PUSH
64204: LD_INT 0
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 4
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 3
64223: PUSH
64224: LD_INT 1
64226: PUSH
64227: EMPTY
64228: LIST
64229: LIST
64230: PUSH
64231: LD_INT 2
64233: PUSH
64234: LD_INT 0
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 2
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 2
64254: PUSH
64255: LD_INT 2
64257: NEG
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: PUSH
64263: LD_INT 4
64265: PUSH
64266: LD_INT 2
64268: PUSH
64269: EMPTY
64270: LIST
64271: LIST
64272: PUSH
64273: LD_INT 4
64275: PUSH
64276: LD_INT 4
64278: PUSH
64279: EMPTY
64280: LIST
64281: LIST
64282: PUSH
64283: LD_INT 4
64285: PUSH
64286: LD_INT 3
64288: PUSH
64289: EMPTY
64290: LIST
64291: LIST
64292: PUSH
64293: LD_INT 5
64295: PUSH
64296: LD_INT 4
64298: PUSH
64299: EMPTY
64300: LIST
64301: LIST
64302: PUSH
64303: LD_INT 5
64305: PUSH
64306: LD_INT 5
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: PUSH
64313: LD_INT 4
64315: PUSH
64316: LD_INT 5
64318: PUSH
64319: EMPTY
64320: LIST
64321: LIST
64322: PUSH
64323: LD_INT 3
64325: PUSH
64326: LD_INT 4
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: LD_INT 3
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: LD_INT 5
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 3
64355: PUSH
64356: LD_INT 5
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 0
64365: PUSH
64366: LD_INT 3
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: LD_INT 0
64375: PUSH
64376: LD_INT 2
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 3
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 4
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 4
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 3
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 2
64430: PUSH
64431: EMPTY
64432: LIST
64433: LIST
64434: PUSH
64435: LD_INT 2
64437: PUSH
64438: LD_INT 4
64440: PUSH
64441: EMPTY
64442: LIST
64443: LIST
64444: PUSH
64445: LD_INT 2
64447: NEG
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: EMPTY
64453: LIST
64454: LIST
64455: PUSH
64456: LD_INT 4
64458: NEG
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 4
64469: NEG
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 3
64481: NEG
64482: PUSH
64483: LD_INT 0
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 3
64492: NEG
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 4
64503: NEG
64504: PUSH
64505: LD_INT 1
64507: PUSH
64508: EMPTY
64509: LIST
64510: LIST
64511: PUSH
64512: LD_INT 5
64514: NEG
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 5
64525: NEG
64526: PUSH
64527: LD_INT 1
64529: NEG
64530: PUSH
64531: EMPTY
64532: LIST
64533: LIST
64534: PUSH
64535: LD_INT 5
64537: NEG
64538: PUSH
64539: LD_INT 2
64541: NEG
64542: PUSH
64543: EMPTY
64544: LIST
64545: LIST
64546: PUSH
64547: LD_INT 3
64549: NEG
64550: PUSH
64551: LD_INT 2
64553: PUSH
64554: EMPTY
64555: LIST
64556: LIST
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: LIST
64576: LIST
64577: LIST
64578: LIST
64579: LIST
64580: LIST
64581: LIST
64582: LIST
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: LIST
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: LIST
64593: LIST
64594: LIST
64595: LIST
64596: LIST
64597: LIST
64598: LIST
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: LIST
64604: ST_TO_ADDR
// end ; end ;
64605: GO 64608
64607: POP
// case btype of b_depot , b_warehouse :
64608: LD_VAR 0 1
64612: PUSH
64613: LD_INT 0
64615: DOUBLE
64616: EQUAL
64617: IFTRUE 64627
64619: LD_INT 1
64621: DOUBLE
64622: EQUAL
64623: IFTRUE 64627
64625: GO 64828
64627: POP
// case nation of nation_american :
64628: LD_VAR 0 5
64632: PUSH
64633: LD_INT 1
64635: DOUBLE
64636: EQUAL
64637: IFTRUE 64641
64639: GO 64697
64641: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
64642: LD_ADDR_VAR 0 9
64646: PUSH
64647: LD_VAR 0 11
64651: PUSH
64652: LD_VAR 0 12
64656: PUSH
64657: LD_VAR 0 13
64661: PUSH
64662: LD_VAR 0 14
64666: PUSH
64667: LD_VAR 0 15
64671: PUSH
64672: LD_VAR 0 16
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: PUSH
64685: LD_VAR 0 4
64689: PUSH
64690: LD_INT 1
64692: PLUS
64693: ARRAY
64694: ST_TO_ADDR
64695: GO 64826
64697: LD_INT 2
64699: DOUBLE
64700: EQUAL
64701: IFTRUE 64705
64703: GO 64761
64705: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
64706: LD_ADDR_VAR 0 9
64710: PUSH
64711: LD_VAR 0 17
64715: PUSH
64716: LD_VAR 0 18
64720: PUSH
64721: LD_VAR 0 19
64725: PUSH
64726: LD_VAR 0 20
64730: PUSH
64731: LD_VAR 0 21
64735: PUSH
64736: LD_VAR 0 22
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: PUSH
64749: LD_VAR 0 4
64753: PUSH
64754: LD_INT 1
64756: PLUS
64757: ARRAY
64758: ST_TO_ADDR
64759: GO 64826
64761: LD_INT 3
64763: DOUBLE
64764: EQUAL
64765: IFTRUE 64769
64767: GO 64825
64769: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
64770: LD_ADDR_VAR 0 9
64774: PUSH
64775: LD_VAR 0 23
64779: PUSH
64780: LD_VAR 0 24
64784: PUSH
64785: LD_VAR 0 25
64789: PUSH
64790: LD_VAR 0 26
64794: PUSH
64795: LD_VAR 0 27
64799: PUSH
64800: LD_VAR 0 28
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: LIST
64810: LIST
64811: LIST
64812: PUSH
64813: LD_VAR 0 4
64817: PUSH
64818: LD_INT 1
64820: PLUS
64821: ARRAY
64822: ST_TO_ADDR
64823: GO 64826
64825: POP
64826: GO 65381
64828: LD_INT 2
64830: DOUBLE
64831: EQUAL
64832: IFTRUE 64842
64834: LD_INT 3
64836: DOUBLE
64837: EQUAL
64838: IFTRUE 64842
64840: GO 64898
64842: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
64843: LD_ADDR_VAR 0 9
64847: PUSH
64848: LD_VAR 0 29
64852: PUSH
64853: LD_VAR 0 30
64857: PUSH
64858: LD_VAR 0 31
64862: PUSH
64863: LD_VAR 0 32
64867: PUSH
64868: LD_VAR 0 33
64872: PUSH
64873: LD_VAR 0 34
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: LIST
64882: LIST
64883: LIST
64884: LIST
64885: PUSH
64886: LD_VAR 0 4
64890: PUSH
64891: LD_INT 1
64893: PLUS
64894: ARRAY
64895: ST_TO_ADDR
64896: GO 65381
64898: LD_INT 16
64900: DOUBLE
64901: EQUAL
64902: IFTRUE 64960
64904: LD_INT 17
64906: DOUBLE
64907: EQUAL
64908: IFTRUE 64960
64910: LD_INT 18
64912: DOUBLE
64913: EQUAL
64914: IFTRUE 64960
64916: LD_INT 19
64918: DOUBLE
64919: EQUAL
64920: IFTRUE 64960
64922: LD_INT 22
64924: DOUBLE
64925: EQUAL
64926: IFTRUE 64960
64928: LD_INT 20
64930: DOUBLE
64931: EQUAL
64932: IFTRUE 64960
64934: LD_INT 21
64936: DOUBLE
64937: EQUAL
64938: IFTRUE 64960
64940: LD_INT 23
64942: DOUBLE
64943: EQUAL
64944: IFTRUE 64960
64946: LD_INT 24
64948: DOUBLE
64949: EQUAL
64950: IFTRUE 64960
64952: LD_INT 25
64954: DOUBLE
64955: EQUAL
64956: IFTRUE 64960
64958: GO 65016
64960: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
64961: LD_ADDR_VAR 0 9
64965: PUSH
64966: LD_VAR 0 35
64970: PUSH
64971: LD_VAR 0 36
64975: PUSH
64976: LD_VAR 0 37
64980: PUSH
64981: LD_VAR 0 38
64985: PUSH
64986: LD_VAR 0 39
64990: PUSH
64991: LD_VAR 0 40
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: LIST
65003: PUSH
65004: LD_VAR 0 4
65008: PUSH
65009: LD_INT 1
65011: PLUS
65012: ARRAY
65013: ST_TO_ADDR
65014: GO 65381
65016: LD_INT 6
65018: DOUBLE
65019: EQUAL
65020: IFTRUE 65072
65022: LD_INT 7
65024: DOUBLE
65025: EQUAL
65026: IFTRUE 65072
65028: LD_INT 8
65030: DOUBLE
65031: EQUAL
65032: IFTRUE 65072
65034: LD_INT 13
65036: DOUBLE
65037: EQUAL
65038: IFTRUE 65072
65040: LD_INT 12
65042: DOUBLE
65043: EQUAL
65044: IFTRUE 65072
65046: LD_INT 15
65048: DOUBLE
65049: EQUAL
65050: IFTRUE 65072
65052: LD_INT 11
65054: DOUBLE
65055: EQUAL
65056: IFTRUE 65072
65058: LD_INT 14
65060: DOUBLE
65061: EQUAL
65062: IFTRUE 65072
65064: LD_INT 10
65066: DOUBLE
65067: EQUAL
65068: IFTRUE 65072
65070: GO 65128
65072: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
65073: LD_ADDR_VAR 0 9
65077: PUSH
65078: LD_VAR 0 41
65082: PUSH
65083: LD_VAR 0 42
65087: PUSH
65088: LD_VAR 0 43
65092: PUSH
65093: LD_VAR 0 44
65097: PUSH
65098: LD_VAR 0 45
65102: PUSH
65103: LD_VAR 0 46
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: PUSH
65116: LD_VAR 0 4
65120: PUSH
65121: LD_INT 1
65123: PLUS
65124: ARRAY
65125: ST_TO_ADDR
65126: GO 65381
65128: LD_INT 36
65130: DOUBLE
65131: EQUAL
65132: IFTRUE 65136
65134: GO 65192
65136: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
65137: LD_ADDR_VAR 0 9
65141: PUSH
65142: LD_VAR 0 47
65146: PUSH
65147: LD_VAR 0 48
65151: PUSH
65152: LD_VAR 0 49
65156: PUSH
65157: LD_VAR 0 50
65161: PUSH
65162: LD_VAR 0 51
65166: PUSH
65167: LD_VAR 0 52
65171: PUSH
65172: EMPTY
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: PUSH
65180: LD_VAR 0 4
65184: PUSH
65185: LD_INT 1
65187: PLUS
65188: ARRAY
65189: ST_TO_ADDR
65190: GO 65381
65192: LD_INT 4
65194: DOUBLE
65195: EQUAL
65196: IFTRUE 65218
65198: LD_INT 5
65200: DOUBLE
65201: EQUAL
65202: IFTRUE 65218
65204: LD_INT 34
65206: DOUBLE
65207: EQUAL
65208: IFTRUE 65218
65210: LD_INT 37
65212: DOUBLE
65213: EQUAL
65214: IFTRUE 65218
65216: GO 65274
65218: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
65219: LD_ADDR_VAR 0 9
65223: PUSH
65224: LD_VAR 0 53
65228: PUSH
65229: LD_VAR 0 54
65233: PUSH
65234: LD_VAR 0 55
65238: PUSH
65239: LD_VAR 0 56
65243: PUSH
65244: LD_VAR 0 57
65248: PUSH
65249: LD_VAR 0 58
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: PUSH
65262: LD_VAR 0 4
65266: PUSH
65267: LD_INT 1
65269: PLUS
65270: ARRAY
65271: ST_TO_ADDR
65272: GO 65381
65274: LD_INT 31
65276: DOUBLE
65277: EQUAL
65278: IFTRUE 65324
65280: LD_INT 32
65282: DOUBLE
65283: EQUAL
65284: IFTRUE 65324
65286: LD_INT 33
65288: DOUBLE
65289: EQUAL
65290: IFTRUE 65324
65292: LD_INT 27
65294: DOUBLE
65295: EQUAL
65296: IFTRUE 65324
65298: LD_INT 26
65300: DOUBLE
65301: EQUAL
65302: IFTRUE 65324
65304: LD_INT 28
65306: DOUBLE
65307: EQUAL
65308: IFTRUE 65324
65310: LD_INT 29
65312: DOUBLE
65313: EQUAL
65314: IFTRUE 65324
65316: LD_INT 30
65318: DOUBLE
65319: EQUAL
65320: IFTRUE 65324
65322: GO 65380
65324: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
65325: LD_ADDR_VAR 0 9
65329: PUSH
65330: LD_VAR 0 59
65334: PUSH
65335: LD_VAR 0 60
65339: PUSH
65340: LD_VAR 0 61
65344: PUSH
65345: LD_VAR 0 62
65349: PUSH
65350: LD_VAR 0 63
65354: PUSH
65355: LD_VAR 0 64
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: LIST
65364: LIST
65365: LIST
65366: LIST
65367: PUSH
65368: LD_VAR 0 4
65372: PUSH
65373: LD_INT 1
65375: PLUS
65376: ARRAY
65377: ST_TO_ADDR
65378: GO 65381
65380: POP
// temp_list2 = [ ] ;
65381: LD_ADDR_VAR 0 10
65385: PUSH
65386: EMPTY
65387: ST_TO_ADDR
// for i in temp_list do
65388: LD_ADDR_VAR 0 8
65392: PUSH
65393: LD_VAR 0 9
65397: PUSH
65398: FOR_IN
65399: IFFALSE 65451
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
65401: LD_ADDR_VAR 0 10
65405: PUSH
65406: LD_VAR 0 10
65410: PUSH
65411: LD_VAR 0 8
65415: PUSH
65416: LD_INT 1
65418: ARRAY
65419: PUSH
65420: LD_VAR 0 2
65424: PLUS
65425: PUSH
65426: LD_VAR 0 8
65430: PUSH
65431: LD_INT 2
65433: ARRAY
65434: PUSH
65435: LD_VAR 0 3
65439: PLUS
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: EMPTY
65446: LIST
65447: ADD
65448: ST_TO_ADDR
65449: GO 65398
65451: POP
65452: POP
// result = temp_list2 ;
65453: LD_ADDR_VAR 0 7
65457: PUSH
65458: LD_VAR 0 10
65462: ST_TO_ADDR
// end ;
65463: LD_VAR 0 7
65467: RET
// export function EnemyInRange ( unit , dist ) ; begin
65468: LD_INT 0
65470: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
65471: LD_ADDR_VAR 0 3
65475: PUSH
65476: LD_VAR 0 1
65480: PPUSH
65481: CALL_OW 255
65485: PPUSH
65486: LD_VAR 0 1
65490: PPUSH
65491: CALL_OW 250
65495: PPUSH
65496: LD_VAR 0 1
65500: PPUSH
65501: CALL_OW 251
65505: PPUSH
65506: LD_VAR 0 2
65510: PPUSH
65511: CALL 38864 0 4
65515: PUSH
65516: LD_INT 4
65518: ARRAY
65519: ST_TO_ADDR
// end ;
65520: LD_VAR 0 3
65524: RET
// export function PlayerSeeMe ( unit ) ; begin
65525: LD_INT 0
65527: PPUSH
// result := See ( your_side , unit ) ;
65528: LD_ADDR_VAR 0 2
65532: PUSH
65533: LD_OWVAR 2
65537: PPUSH
65538: LD_VAR 0 1
65542: PPUSH
65543: CALL_OW 292
65547: ST_TO_ADDR
// end ;
65548: LD_VAR 0 2
65552: RET
// export function ReverseDir ( unit ) ; begin
65553: LD_INT 0
65555: PPUSH
// if not unit then
65556: LD_VAR 0 1
65560: NOT
65561: IFFALSE 65565
// exit ;
65563: GO 65588
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
65565: LD_ADDR_VAR 0 2
65569: PUSH
65570: LD_VAR 0 1
65574: PPUSH
65575: CALL_OW 254
65579: PUSH
65580: LD_INT 3
65582: PLUS
65583: PUSH
65584: LD_INT 6
65586: MOD
65587: ST_TO_ADDR
// end ;
65588: LD_VAR 0 2
65592: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
65593: LD_INT 0
65595: PPUSH
65596: PPUSH
65597: PPUSH
65598: PPUSH
65599: PPUSH
// if not hexes then
65600: LD_VAR 0 2
65604: NOT
65605: IFFALSE 65609
// exit ;
65607: GO 65757
// dist := 9999 ;
65609: LD_ADDR_VAR 0 5
65613: PUSH
65614: LD_INT 9999
65616: ST_TO_ADDR
// for i = 1 to hexes do
65617: LD_ADDR_VAR 0 4
65621: PUSH
65622: DOUBLE
65623: LD_INT 1
65625: DEC
65626: ST_TO_ADDR
65627: LD_VAR 0 2
65631: PUSH
65632: FOR_TO
65633: IFFALSE 65745
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
65635: LD_VAR 0 1
65639: PPUSH
65640: LD_VAR 0 2
65644: PUSH
65645: LD_VAR 0 4
65649: ARRAY
65650: PUSH
65651: LD_INT 1
65653: ARRAY
65654: PPUSH
65655: LD_VAR 0 2
65659: PUSH
65660: LD_VAR 0 4
65664: ARRAY
65665: PUSH
65666: LD_INT 2
65668: ARRAY
65669: PPUSH
65670: CALL_OW 297
65674: PUSH
65675: LD_VAR 0 5
65679: LESS
65680: IFFALSE 65743
// begin hex := hexes [ i ] ;
65682: LD_ADDR_VAR 0 7
65686: PUSH
65687: LD_VAR 0 2
65691: PUSH
65692: LD_VAR 0 4
65696: ARRAY
65697: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
65698: LD_ADDR_VAR 0 5
65702: PUSH
65703: LD_VAR 0 1
65707: PPUSH
65708: LD_VAR 0 2
65712: PUSH
65713: LD_VAR 0 4
65717: ARRAY
65718: PUSH
65719: LD_INT 1
65721: ARRAY
65722: PPUSH
65723: LD_VAR 0 2
65727: PUSH
65728: LD_VAR 0 4
65732: ARRAY
65733: PUSH
65734: LD_INT 2
65736: ARRAY
65737: PPUSH
65738: CALL_OW 297
65742: ST_TO_ADDR
// end ; end ;
65743: GO 65632
65745: POP
65746: POP
// result := hex ;
65747: LD_ADDR_VAR 0 3
65751: PUSH
65752: LD_VAR 0 7
65756: ST_TO_ADDR
// end ;
65757: LD_VAR 0 3
65761: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
65762: LD_INT 0
65764: PPUSH
65765: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
65766: LD_VAR 0 1
65770: NOT
65771: PUSH
65772: LD_VAR 0 1
65776: PUSH
65777: LD_INT 21
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: EMPTY
65784: LIST
65785: LIST
65786: PUSH
65787: LD_INT 23
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: EMPTY
65798: LIST
65799: LIST
65800: PPUSH
65801: CALL_OW 69
65805: IN
65806: NOT
65807: OR
65808: IFFALSE 65812
// exit ;
65810: GO 65859
// for i = 1 to 3 do
65812: LD_ADDR_VAR 0 3
65816: PUSH
65817: DOUBLE
65818: LD_INT 1
65820: DEC
65821: ST_TO_ADDR
65822: LD_INT 3
65824: PUSH
65825: FOR_TO
65826: IFFALSE 65857
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
65828: LD_VAR 0 1
65832: PPUSH
65833: CALL_OW 250
65837: PPUSH
65838: LD_VAR 0 1
65842: PPUSH
65843: CALL_OW 251
65847: PPUSH
65848: LD_INT 1
65850: PPUSH
65851: CALL_OW 453
65855: GO 65825
65857: POP
65858: POP
// end ;
65859: LD_VAR 0 2
65863: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
65864: LD_INT 0
65866: PPUSH
65867: PPUSH
65868: PPUSH
65869: PPUSH
65870: PPUSH
65871: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
65872: LD_VAR 0 1
65876: NOT
65877: PUSH
65878: LD_VAR 0 2
65882: NOT
65883: OR
65884: PUSH
65885: LD_VAR 0 1
65889: PPUSH
65890: CALL_OW 314
65894: OR
65895: IFFALSE 65899
// exit ;
65897: GO 66340
// x := GetX ( enemy_unit ) ;
65899: LD_ADDR_VAR 0 7
65903: PUSH
65904: LD_VAR 0 2
65908: PPUSH
65909: CALL_OW 250
65913: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
65914: LD_ADDR_VAR 0 8
65918: PUSH
65919: LD_VAR 0 2
65923: PPUSH
65924: CALL_OW 251
65928: ST_TO_ADDR
// if not x or not y then
65929: LD_VAR 0 7
65933: NOT
65934: PUSH
65935: LD_VAR 0 8
65939: NOT
65940: OR
65941: IFFALSE 65945
// exit ;
65943: GO 66340
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
65945: LD_ADDR_VAR 0 6
65949: PUSH
65950: LD_VAR 0 7
65954: PPUSH
65955: LD_INT 0
65957: PPUSH
65958: LD_INT 4
65960: PPUSH
65961: CALL_OW 272
65965: PUSH
65966: LD_VAR 0 8
65970: PPUSH
65971: LD_INT 0
65973: PPUSH
65974: LD_INT 4
65976: PPUSH
65977: CALL_OW 273
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: PUSH
65986: LD_VAR 0 7
65990: PPUSH
65991: LD_INT 1
65993: PPUSH
65994: LD_INT 4
65996: PPUSH
65997: CALL_OW 272
66001: PUSH
66002: LD_VAR 0 8
66006: PPUSH
66007: LD_INT 1
66009: PPUSH
66010: LD_INT 4
66012: PPUSH
66013: CALL_OW 273
66017: PUSH
66018: EMPTY
66019: LIST
66020: LIST
66021: PUSH
66022: LD_VAR 0 7
66026: PPUSH
66027: LD_INT 2
66029: PPUSH
66030: LD_INT 4
66032: PPUSH
66033: CALL_OW 272
66037: PUSH
66038: LD_VAR 0 8
66042: PPUSH
66043: LD_INT 2
66045: PPUSH
66046: LD_INT 4
66048: PPUSH
66049: CALL_OW 273
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_VAR 0 7
66062: PPUSH
66063: LD_INT 3
66065: PPUSH
66066: LD_INT 4
66068: PPUSH
66069: CALL_OW 272
66073: PUSH
66074: LD_VAR 0 8
66078: PPUSH
66079: LD_INT 3
66081: PPUSH
66082: LD_INT 4
66084: PPUSH
66085: CALL_OW 273
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_VAR 0 7
66098: PPUSH
66099: LD_INT 4
66101: PPUSH
66102: LD_INT 4
66104: PPUSH
66105: CALL_OW 272
66109: PUSH
66110: LD_VAR 0 8
66114: PPUSH
66115: LD_INT 4
66117: PPUSH
66118: LD_INT 4
66120: PPUSH
66121: CALL_OW 273
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_VAR 0 7
66134: PPUSH
66135: LD_INT 5
66137: PPUSH
66138: LD_INT 4
66140: PPUSH
66141: CALL_OW 272
66145: PUSH
66146: LD_VAR 0 8
66150: PPUSH
66151: LD_INT 5
66153: PPUSH
66154: LD_INT 4
66156: PPUSH
66157: CALL_OW 273
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: ST_TO_ADDR
// for i = tmp downto 1 do
66174: LD_ADDR_VAR 0 4
66178: PUSH
66179: DOUBLE
66180: LD_VAR 0 6
66184: INC
66185: ST_TO_ADDR
66186: LD_INT 1
66188: PUSH
66189: FOR_DOWNTO
66190: IFFALSE 66291
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
66192: LD_VAR 0 6
66196: PUSH
66197: LD_VAR 0 4
66201: ARRAY
66202: PUSH
66203: LD_INT 1
66205: ARRAY
66206: PPUSH
66207: LD_VAR 0 6
66211: PUSH
66212: LD_VAR 0 4
66216: ARRAY
66217: PUSH
66218: LD_INT 2
66220: ARRAY
66221: PPUSH
66222: CALL_OW 488
66226: NOT
66227: PUSH
66228: LD_VAR 0 6
66232: PUSH
66233: LD_VAR 0 4
66237: ARRAY
66238: PUSH
66239: LD_INT 1
66241: ARRAY
66242: PPUSH
66243: LD_VAR 0 6
66247: PUSH
66248: LD_VAR 0 4
66252: ARRAY
66253: PUSH
66254: LD_INT 2
66256: ARRAY
66257: PPUSH
66258: CALL_OW 428
66262: PUSH
66263: LD_INT 0
66265: NONEQUAL
66266: OR
66267: IFFALSE 66289
// tmp := Delete ( tmp , i ) ;
66269: LD_ADDR_VAR 0 6
66273: PUSH
66274: LD_VAR 0 6
66278: PPUSH
66279: LD_VAR 0 4
66283: PPUSH
66284: CALL_OW 3
66288: ST_TO_ADDR
66289: GO 66189
66291: POP
66292: POP
// j := GetClosestHex ( unit , tmp ) ;
66293: LD_ADDR_VAR 0 5
66297: PUSH
66298: LD_VAR 0 1
66302: PPUSH
66303: LD_VAR 0 6
66307: PPUSH
66308: CALL 65593 0 2
66312: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
66313: LD_VAR 0 1
66317: PPUSH
66318: LD_VAR 0 5
66322: PUSH
66323: LD_INT 1
66325: ARRAY
66326: PPUSH
66327: LD_VAR 0 5
66331: PUSH
66332: LD_INT 2
66334: ARRAY
66335: PPUSH
66336: CALL_OW 111
// end ;
66340: LD_VAR 0 3
66344: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
66345: LD_INT 0
66347: PPUSH
66348: PPUSH
66349: PPUSH
// uc_side = 0 ;
66350: LD_ADDR_OWVAR 20
66354: PUSH
66355: LD_INT 0
66357: ST_TO_ADDR
// uc_nation = 0 ;
66358: LD_ADDR_OWVAR 21
66362: PUSH
66363: LD_INT 0
66365: ST_TO_ADDR
// InitHc_All ( ) ;
66366: CALL_OW 584
// InitVc ;
66370: CALL_OW 20
// if mastodonts then
66374: LD_VAR 0 6
66378: IFFALSE 66445
// for i = 1 to mastodonts do
66380: LD_ADDR_VAR 0 11
66384: PUSH
66385: DOUBLE
66386: LD_INT 1
66388: DEC
66389: ST_TO_ADDR
66390: LD_VAR 0 6
66394: PUSH
66395: FOR_TO
66396: IFFALSE 66443
// begin vc_chassis := 31 ;
66398: LD_ADDR_OWVAR 37
66402: PUSH
66403: LD_INT 31
66405: ST_TO_ADDR
// vc_control := control_rider ;
66406: LD_ADDR_OWVAR 38
66410: PUSH
66411: LD_INT 4
66413: ST_TO_ADDR
// animal := CreateVehicle ;
66414: LD_ADDR_VAR 0 12
66418: PUSH
66419: CALL_OW 45
66423: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66424: LD_VAR 0 12
66428: PPUSH
66429: LD_VAR 0 8
66433: PPUSH
66434: LD_INT 0
66436: PPUSH
66437: CALL 68633 0 3
// end ;
66441: GO 66395
66443: POP
66444: POP
// if horses then
66445: LD_VAR 0 5
66449: IFFALSE 66516
// for i = 1 to horses do
66451: LD_ADDR_VAR 0 11
66455: PUSH
66456: DOUBLE
66457: LD_INT 1
66459: DEC
66460: ST_TO_ADDR
66461: LD_VAR 0 5
66465: PUSH
66466: FOR_TO
66467: IFFALSE 66514
// begin hc_class := 21 ;
66469: LD_ADDR_OWVAR 28
66473: PUSH
66474: LD_INT 21
66476: ST_TO_ADDR
// hc_gallery :=  ;
66477: LD_ADDR_OWVAR 33
66481: PUSH
66482: LD_STRING 
66484: ST_TO_ADDR
// animal := CreateHuman ;
66485: LD_ADDR_VAR 0 12
66489: PUSH
66490: CALL_OW 44
66494: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66495: LD_VAR 0 12
66499: PPUSH
66500: LD_VAR 0 8
66504: PPUSH
66505: LD_INT 0
66507: PPUSH
66508: CALL 68633 0 3
// end ;
66512: GO 66466
66514: POP
66515: POP
// if birds then
66516: LD_VAR 0 1
66520: IFFALSE 66587
// for i = 1 to birds do
66522: LD_ADDR_VAR 0 11
66526: PUSH
66527: DOUBLE
66528: LD_INT 1
66530: DEC
66531: ST_TO_ADDR
66532: LD_VAR 0 1
66536: PUSH
66537: FOR_TO
66538: IFFALSE 66585
// begin hc_class = 18 ;
66540: LD_ADDR_OWVAR 28
66544: PUSH
66545: LD_INT 18
66547: ST_TO_ADDR
// hc_gallery =  ;
66548: LD_ADDR_OWVAR 33
66552: PUSH
66553: LD_STRING 
66555: ST_TO_ADDR
// animal := CreateHuman ;
66556: LD_ADDR_VAR 0 12
66560: PUSH
66561: CALL_OW 44
66565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66566: LD_VAR 0 12
66570: PPUSH
66571: LD_VAR 0 8
66575: PPUSH
66576: LD_INT 0
66578: PPUSH
66579: CALL 68633 0 3
// end ;
66583: GO 66537
66585: POP
66586: POP
// if tigers then
66587: LD_VAR 0 2
66591: IFFALSE 66675
// for i = 1 to tigers do
66593: LD_ADDR_VAR 0 11
66597: PUSH
66598: DOUBLE
66599: LD_INT 1
66601: DEC
66602: ST_TO_ADDR
66603: LD_VAR 0 2
66607: PUSH
66608: FOR_TO
66609: IFFALSE 66673
// begin hc_class = class_tiger ;
66611: LD_ADDR_OWVAR 28
66615: PUSH
66616: LD_INT 14
66618: ST_TO_ADDR
// hc_gallery =  ;
66619: LD_ADDR_OWVAR 33
66623: PUSH
66624: LD_STRING 
66626: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
66627: LD_ADDR_OWVAR 35
66631: PUSH
66632: LD_INT 7
66634: NEG
66635: PPUSH
66636: LD_INT 7
66638: PPUSH
66639: CALL_OW 12
66643: ST_TO_ADDR
// animal := CreateHuman ;
66644: LD_ADDR_VAR 0 12
66648: PUSH
66649: CALL_OW 44
66653: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66654: LD_VAR 0 12
66658: PPUSH
66659: LD_VAR 0 8
66663: PPUSH
66664: LD_INT 0
66666: PPUSH
66667: CALL 68633 0 3
// end ;
66671: GO 66608
66673: POP
66674: POP
// if apemans then
66675: LD_VAR 0 3
66679: IFFALSE 66802
// for i = 1 to apemans do
66681: LD_ADDR_VAR 0 11
66685: PUSH
66686: DOUBLE
66687: LD_INT 1
66689: DEC
66690: ST_TO_ADDR
66691: LD_VAR 0 3
66695: PUSH
66696: FOR_TO
66697: IFFALSE 66800
// begin hc_class = class_apeman ;
66699: LD_ADDR_OWVAR 28
66703: PUSH
66704: LD_INT 12
66706: ST_TO_ADDR
// hc_gallery =  ;
66707: LD_ADDR_OWVAR 33
66711: PUSH
66712: LD_STRING 
66714: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
66715: LD_ADDR_OWVAR 35
66719: PUSH
66720: LD_INT 2
66722: NEG
66723: PPUSH
66724: LD_INT 2
66726: PPUSH
66727: CALL_OW 12
66731: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
66732: LD_ADDR_OWVAR 31
66736: PUSH
66737: LD_INT 1
66739: PPUSH
66740: LD_INT 3
66742: PPUSH
66743: CALL_OW 12
66747: PUSH
66748: LD_INT 1
66750: PPUSH
66751: LD_INT 3
66753: PPUSH
66754: CALL_OW 12
66758: PUSH
66759: LD_INT 0
66761: PUSH
66762: LD_INT 0
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: ST_TO_ADDR
// animal := CreateHuman ;
66771: LD_ADDR_VAR 0 12
66775: PUSH
66776: CALL_OW 44
66780: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66781: LD_VAR 0 12
66785: PPUSH
66786: LD_VAR 0 8
66790: PPUSH
66791: LD_INT 0
66793: PPUSH
66794: CALL 68633 0 3
// end ;
66798: GO 66696
66800: POP
66801: POP
// if enchidnas then
66802: LD_VAR 0 4
66806: IFFALSE 66873
// for i = 1 to enchidnas do
66808: LD_ADDR_VAR 0 11
66812: PUSH
66813: DOUBLE
66814: LD_INT 1
66816: DEC
66817: ST_TO_ADDR
66818: LD_VAR 0 4
66822: PUSH
66823: FOR_TO
66824: IFFALSE 66871
// begin hc_class = 13 ;
66826: LD_ADDR_OWVAR 28
66830: PUSH
66831: LD_INT 13
66833: ST_TO_ADDR
// hc_gallery =  ;
66834: LD_ADDR_OWVAR 33
66838: PUSH
66839: LD_STRING 
66841: ST_TO_ADDR
// animal := CreateHuman ;
66842: LD_ADDR_VAR 0 12
66846: PUSH
66847: CALL_OW 44
66851: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
66852: LD_VAR 0 12
66856: PPUSH
66857: LD_VAR 0 8
66861: PPUSH
66862: LD_INT 0
66864: PPUSH
66865: CALL 68633 0 3
// end ;
66869: GO 66823
66871: POP
66872: POP
// if fishes then
66873: LD_VAR 0 7
66877: IFFALSE 66944
// for i = 1 to fishes do
66879: LD_ADDR_VAR 0 11
66883: PUSH
66884: DOUBLE
66885: LD_INT 1
66887: DEC
66888: ST_TO_ADDR
66889: LD_VAR 0 7
66893: PUSH
66894: FOR_TO
66895: IFFALSE 66942
// begin hc_class = 20 ;
66897: LD_ADDR_OWVAR 28
66901: PUSH
66902: LD_INT 20
66904: ST_TO_ADDR
// hc_gallery =  ;
66905: LD_ADDR_OWVAR 33
66909: PUSH
66910: LD_STRING 
66912: ST_TO_ADDR
// animal := CreateHuman ;
66913: LD_ADDR_VAR 0 12
66917: PUSH
66918: CALL_OW 44
66922: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
66923: LD_VAR 0 12
66927: PPUSH
66928: LD_VAR 0 9
66932: PPUSH
66933: LD_INT 0
66935: PPUSH
66936: CALL 68633 0 3
// end ;
66940: GO 66894
66942: POP
66943: POP
// end ;
66944: LD_VAR 0 10
66948: RET
// export function WantHeal ( sci , unit ) ; begin
66949: LD_INT 0
66951: PPUSH
// if GetTaskList ( sci ) > 0 then
66952: LD_VAR 0 1
66956: PPUSH
66957: CALL_OW 437
66961: PUSH
66962: LD_INT 0
66964: GREATER
66965: IFFALSE 67035
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
66967: LD_VAR 0 1
66971: PPUSH
66972: CALL_OW 437
66976: PUSH
66977: LD_INT 1
66979: ARRAY
66980: PUSH
66981: LD_INT 1
66983: ARRAY
66984: PUSH
66985: LD_STRING l
66987: EQUAL
66988: PUSH
66989: LD_VAR 0 1
66993: PPUSH
66994: CALL_OW 437
66998: PUSH
66999: LD_INT 1
67001: ARRAY
67002: PUSH
67003: LD_INT 4
67005: ARRAY
67006: PUSH
67007: LD_VAR 0 2
67011: EQUAL
67012: AND
67013: IFFALSE 67025
// result := true else
67015: LD_ADDR_VAR 0 3
67019: PUSH
67020: LD_INT 1
67022: ST_TO_ADDR
67023: GO 67033
// result := false ;
67025: LD_ADDR_VAR 0 3
67029: PUSH
67030: LD_INT 0
67032: ST_TO_ADDR
// end else
67033: GO 67043
// result := false ;
67035: LD_ADDR_VAR 0 3
67039: PUSH
67040: LD_INT 0
67042: ST_TO_ADDR
// end ;
67043: LD_VAR 0 3
67047: RET
// export function HealTarget ( sci ) ; begin
67048: LD_INT 0
67050: PPUSH
// if not sci then
67051: LD_VAR 0 1
67055: NOT
67056: IFFALSE 67060
// exit ;
67058: GO 67125
// result := 0 ;
67060: LD_ADDR_VAR 0 2
67064: PUSH
67065: LD_INT 0
67067: ST_TO_ADDR
// if GetTaskList ( sci ) then
67068: LD_VAR 0 1
67072: PPUSH
67073: CALL_OW 437
67077: IFFALSE 67125
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
67079: LD_VAR 0 1
67083: PPUSH
67084: CALL_OW 437
67088: PUSH
67089: LD_INT 1
67091: ARRAY
67092: PUSH
67093: LD_INT 1
67095: ARRAY
67096: PUSH
67097: LD_STRING l
67099: EQUAL
67100: IFFALSE 67125
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
67102: LD_ADDR_VAR 0 2
67106: PUSH
67107: LD_VAR 0 1
67111: PPUSH
67112: CALL_OW 437
67116: PUSH
67117: LD_INT 1
67119: ARRAY
67120: PUSH
67121: LD_INT 4
67123: ARRAY
67124: ST_TO_ADDR
// end ;
67125: LD_VAR 0 2
67129: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
67130: LD_INT 0
67132: PPUSH
67133: PPUSH
67134: PPUSH
67135: PPUSH
// if not base_units then
67136: LD_VAR 0 1
67140: NOT
67141: IFFALSE 67145
// exit ;
67143: GO 67232
// result := false ;
67145: LD_ADDR_VAR 0 2
67149: PUSH
67150: LD_INT 0
67152: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
67153: LD_ADDR_VAR 0 5
67157: PUSH
67158: LD_VAR 0 1
67162: PPUSH
67163: LD_INT 21
67165: PUSH
67166: LD_INT 3
67168: PUSH
67169: EMPTY
67170: LIST
67171: LIST
67172: PPUSH
67173: CALL_OW 72
67177: ST_TO_ADDR
// if not tmp then
67178: LD_VAR 0 5
67182: NOT
67183: IFFALSE 67187
// exit ;
67185: GO 67232
// for i in tmp do
67187: LD_ADDR_VAR 0 3
67191: PUSH
67192: LD_VAR 0 5
67196: PUSH
67197: FOR_IN
67198: IFFALSE 67230
// begin result := EnemyInRange ( i , 22 ) ;
67200: LD_ADDR_VAR 0 2
67204: PUSH
67205: LD_VAR 0 3
67209: PPUSH
67210: LD_INT 22
67212: PPUSH
67213: CALL 65468 0 2
67217: ST_TO_ADDR
// if result then
67218: LD_VAR 0 2
67222: IFFALSE 67228
// exit ;
67224: POP
67225: POP
67226: GO 67232
// end ;
67228: GO 67197
67230: POP
67231: POP
// end ;
67232: LD_VAR 0 2
67236: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
67237: LD_INT 0
67239: PPUSH
67240: PPUSH
// if not units then
67241: LD_VAR 0 1
67245: NOT
67246: IFFALSE 67250
// exit ;
67248: GO 67320
// result := [ ] ;
67250: LD_ADDR_VAR 0 3
67254: PUSH
67255: EMPTY
67256: ST_TO_ADDR
// for i in units do
67257: LD_ADDR_VAR 0 4
67261: PUSH
67262: LD_VAR 0 1
67266: PUSH
67267: FOR_IN
67268: IFFALSE 67318
// if GetTag ( i ) = tag then
67270: LD_VAR 0 4
67274: PPUSH
67275: CALL_OW 110
67279: PUSH
67280: LD_VAR 0 2
67284: EQUAL
67285: IFFALSE 67316
// result := Replace ( result , result + 1 , i ) ;
67287: LD_ADDR_VAR 0 3
67291: PUSH
67292: LD_VAR 0 3
67296: PPUSH
67297: LD_VAR 0 3
67301: PUSH
67302: LD_INT 1
67304: PLUS
67305: PPUSH
67306: LD_VAR 0 4
67310: PPUSH
67311: CALL_OW 1
67315: ST_TO_ADDR
67316: GO 67267
67318: POP
67319: POP
// end ;
67320: LD_VAR 0 3
67324: RET
// export function IsDriver ( un ) ; begin
67325: LD_INT 0
67327: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
67328: LD_ADDR_VAR 0 2
67332: PUSH
67333: LD_VAR 0 1
67337: PUSH
67338: LD_INT 55
67340: PUSH
67341: EMPTY
67342: LIST
67343: PPUSH
67344: CALL_OW 69
67348: IN
67349: ST_TO_ADDR
// end ;
67350: LD_VAR 0 2
67354: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
67355: LD_INT 0
67357: PPUSH
67358: PPUSH
// list := [ ] ;
67359: LD_ADDR_VAR 0 5
67363: PUSH
67364: EMPTY
67365: ST_TO_ADDR
// case d of 0 :
67366: LD_VAR 0 3
67370: PUSH
67371: LD_INT 0
67373: DOUBLE
67374: EQUAL
67375: IFTRUE 67379
67377: GO 67512
67379: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
67380: LD_ADDR_VAR 0 5
67384: PUSH
67385: LD_VAR 0 1
67389: PUSH
67390: LD_INT 4
67392: MINUS
67393: PUSH
67394: LD_VAR 0 2
67398: PUSH
67399: LD_INT 4
67401: MINUS
67402: PUSH
67403: LD_INT 2
67405: PUSH
67406: EMPTY
67407: LIST
67408: LIST
67409: LIST
67410: PUSH
67411: LD_VAR 0 1
67415: PUSH
67416: LD_INT 3
67418: MINUS
67419: PUSH
67420: LD_VAR 0 2
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: EMPTY
67429: LIST
67430: LIST
67431: LIST
67432: PUSH
67433: LD_VAR 0 1
67437: PUSH
67438: LD_INT 4
67440: PLUS
67441: PUSH
67442: LD_VAR 0 2
67446: PUSH
67447: LD_INT 4
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: PUSH
67455: LD_VAR 0 1
67459: PUSH
67460: LD_INT 3
67462: PLUS
67463: PUSH
67464: LD_VAR 0 2
67468: PUSH
67469: LD_INT 3
67471: PLUS
67472: PUSH
67473: LD_INT 5
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: LIST
67480: PUSH
67481: LD_VAR 0 1
67485: PUSH
67486: LD_VAR 0 2
67490: PUSH
67491: LD_INT 4
67493: PLUS
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: LIST
67502: PUSH
67503: EMPTY
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: ST_TO_ADDR
// end ; 1 :
67510: GO 68210
67512: LD_INT 1
67514: DOUBLE
67515: EQUAL
67516: IFTRUE 67520
67518: GO 67653
67520: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
67521: LD_ADDR_VAR 0 5
67525: PUSH
67526: LD_VAR 0 1
67530: PUSH
67531: LD_VAR 0 2
67535: PUSH
67536: LD_INT 4
67538: MINUS
67539: PUSH
67540: LD_INT 3
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: LIST
67547: PUSH
67548: LD_VAR 0 1
67552: PUSH
67553: LD_INT 3
67555: MINUS
67556: PUSH
67557: LD_VAR 0 2
67561: PUSH
67562: LD_INT 3
67564: MINUS
67565: PUSH
67566: LD_INT 2
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: LIST
67573: PUSH
67574: LD_VAR 0 1
67578: PUSH
67579: LD_INT 4
67581: MINUS
67582: PUSH
67583: LD_VAR 0 2
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: EMPTY
67592: LIST
67593: LIST
67594: LIST
67595: PUSH
67596: LD_VAR 0 1
67600: PUSH
67601: LD_VAR 0 2
67605: PUSH
67606: LD_INT 3
67608: PLUS
67609: PUSH
67610: LD_INT 0
67612: PUSH
67613: EMPTY
67614: LIST
67615: LIST
67616: LIST
67617: PUSH
67618: LD_VAR 0 1
67622: PUSH
67623: LD_INT 4
67625: PLUS
67626: PUSH
67627: LD_VAR 0 2
67631: PUSH
67632: LD_INT 4
67634: PLUS
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: LIST
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: ST_TO_ADDR
// end ; 2 :
67651: GO 68210
67653: LD_INT 2
67655: DOUBLE
67656: EQUAL
67657: IFTRUE 67661
67659: GO 67790
67661: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
67662: LD_ADDR_VAR 0 5
67666: PUSH
67667: LD_VAR 0 1
67671: PUSH
67672: LD_VAR 0 2
67676: PUSH
67677: LD_INT 3
67679: MINUS
67680: PUSH
67681: LD_INT 3
67683: PUSH
67684: EMPTY
67685: LIST
67686: LIST
67687: LIST
67688: PUSH
67689: LD_VAR 0 1
67693: PUSH
67694: LD_INT 4
67696: PLUS
67697: PUSH
67698: LD_VAR 0 2
67702: PUSH
67703: LD_INT 4
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: LIST
67710: PUSH
67711: LD_VAR 0 1
67715: PUSH
67716: LD_VAR 0 2
67720: PUSH
67721: LD_INT 4
67723: PLUS
67724: PUSH
67725: LD_INT 0
67727: PUSH
67728: EMPTY
67729: LIST
67730: LIST
67731: LIST
67732: PUSH
67733: LD_VAR 0 1
67737: PUSH
67738: LD_INT 3
67740: MINUS
67741: PUSH
67742: LD_VAR 0 2
67746: PUSH
67747: LD_INT 1
67749: PUSH
67750: EMPTY
67751: LIST
67752: LIST
67753: LIST
67754: PUSH
67755: LD_VAR 0 1
67759: PUSH
67760: LD_INT 4
67762: MINUS
67763: PUSH
67764: LD_VAR 0 2
67768: PUSH
67769: LD_INT 4
67771: MINUS
67772: PUSH
67773: LD_INT 2
67775: PUSH
67776: EMPTY
67777: LIST
67778: LIST
67779: LIST
67780: PUSH
67781: EMPTY
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: ST_TO_ADDR
// end ; 3 :
67788: GO 68210
67790: LD_INT 3
67792: DOUBLE
67793: EQUAL
67794: IFTRUE 67798
67796: GO 67931
67798: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
67799: LD_ADDR_VAR 0 5
67803: PUSH
67804: LD_VAR 0 1
67808: PUSH
67809: LD_INT 3
67811: PLUS
67812: PUSH
67813: LD_VAR 0 2
67817: PUSH
67818: LD_INT 4
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: LIST
67825: PUSH
67826: LD_VAR 0 1
67830: PUSH
67831: LD_INT 4
67833: PLUS
67834: PUSH
67835: LD_VAR 0 2
67839: PUSH
67840: LD_INT 4
67842: PLUS
67843: PUSH
67844: LD_INT 5
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: LIST
67851: PUSH
67852: LD_VAR 0 1
67856: PUSH
67857: LD_INT 4
67859: MINUS
67860: PUSH
67861: LD_VAR 0 2
67865: PUSH
67866: LD_INT 1
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: LIST
67873: PUSH
67874: LD_VAR 0 1
67878: PUSH
67879: LD_VAR 0 2
67883: PUSH
67884: LD_INT 4
67886: MINUS
67887: PUSH
67888: LD_INT 3
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: LIST
67895: PUSH
67896: LD_VAR 0 1
67900: PUSH
67901: LD_INT 3
67903: MINUS
67904: PUSH
67905: LD_VAR 0 2
67909: PUSH
67910: LD_INT 3
67912: MINUS
67913: PUSH
67914: LD_INT 2
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: LIST
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// end ; 4 :
67929: GO 68210
67931: LD_INT 4
67933: DOUBLE
67934: EQUAL
67935: IFTRUE 67939
67937: GO 68072
67939: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
67940: LD_ADDR_VAR 0 5
67944: PUSH
67945: LD_VAR 0 1
67949: PUSH
67950: LD_VAR 0 2
67954: PUSH
67955: LD_INT 4
67957: PLUS
67958: PUSH
67959: LD_INT 0
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: PUSH
67967: LD_VAR 0 1
67971: PUSH
67972: LD_INT 3
67974: PLUS
67975: PUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_INT 3
67983: PLUS
67984: PUSH
67985: LD_INT 5
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: PUSH
67993: LD_VAR 0 1
67997: PUSH
67998: LD_INT 4
68000: PLUS
68001: PUSH
68002: LD_VAR 0 2
68006: PUSH
68007: LD_INT 4
68009: PUSH
68010: EMPTY
68011: LIST
68012: LIST
68013: LIST
68014: PUSH
68015: LD_VAR 0 1
68019: PUSH
68020: LD_VAR 0 2
68024: PUSH
68025: LD_INT 3
68027: MINUS
68028: PUSH
68029: LD_INT 3
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: PUSH
68037: LD_VAR 0 1
68041: PUSH
68042: LD_INT 4
68044: MINUS
68045: PUSH
68046: LD_VAR 0 2
68050: PUSH
68051: LD_INT 4
68053: MINUS
68054: PUSH
68055: LD_INT 2
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: LIST
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: ST_TO_ADDR
// end ; 5 :
68070: GO 68210
68072: LD_INT 5
68074: DOUBLE
68075: EQUAL
68076: IFTRUE 68080
68078: GO 68209
68080: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
68081: LD_ADDR_VAR 0 5
68085: PUSH
68086: LD_VAR 0 1
68090: PUSH
68091: LD_INT 4
68093: MINUS
68094: PUSH
68095: LD_VAR 0 2
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: LIST
68107: PUSH
68108: LD_VAR 0 1
68112: PUSH
68113: LD_VAR 0 2
68117: PUSH
68118: LD_INT 4
68120: MINUS
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: EMPTY
68126: LIST
68127: LIST
68128: LIST
68129: PUSH
68130: LD_VAR 0 1
68134: PUSH
68135: LD_INT 4
68137: PLUS
68138: PUSH
68139: LD_VAR 0 2
68143: PUSH
68144: LD_INT 4
68146: PLUS
68147: PUSH
68148: LD_INT 5
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: LIST
68155: PUSH
68156: LD_VAR 0 1
68160: PUSH
68161: LD_INT 3
68163: PLUS
68164: PUSH
68165: LD_VAR 0 2
68169: PUSH
68170: LD_INT 4
68172: PUSH
68173: EMPTY
68174: LIST
68175: LIST
68176: LIST
68177: PUSH
68178: LD_VAR 0 1
68182: PUSH
68183: LD_VAR 0 2
68187: PUSH
68188: LD_INT 3
68190: PLUS
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: LIST
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: LIST
68204: LIST
68205: LIST
68206: ST_TO_ADDR
// end ; end ;
68207: GO 68210
68209: POP
// result := list ;
68210: LD_ADDR_VAR 0 4
68214: PUSH
68215: LD_VAR 0 5
68219: ST_TO_ADDR
// end ;
68220: LD_VAR 0 4
68224: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
68225: LD_INT 0
68227: PPUSH
68228: PPUSH
68229: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
68230: LD_VAR 0 1
68234: NOT
68235: PUSH
68236: LD_VAR 0 2
68240: PUSH
68241: LD_INT 1
68243: PUSH
68244: LD_INT 2
68246: PUSH
68247: LD_INT 3
68249: PUSH
68250: LD_INT 4
68252: PUSH
68253: EMPTY
68254: LIST
68255: LIST
68256: LIST
68257: LIST
68258: IN
68259: NOT
68260: OR
68261: IFFALSE 68265
// exit ;
68263: GO 68357
// tmp := [ ] ;
68265: LD_ADDR_VAR 0 5
68269: PUSH
68270: EMPTY
68271: ST_TO_ADDR
// for i in units do
68272: LD_ADDR_VAR 0 4
68276: PUSH
68277: LD_VAR 0 1
68281: PUSH
68282: FOR_IN
68283: IFFALSE 68326
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
68285: LD_ADDR_VAR 0 5
68289: PUSH
68290: LD_VAR 0 5
68294: PPUSH
68295: LD_VAR 0 5
68299: PUSH
68300: LD_INT 1
68302: PLUS
68303: PPUSH
68304: LD_VAR 0 4
68308: PPUSH
68309: LD_VAR 0 2
68313: PPUSH
68314: CALL_OW 259
68318: PPUSH
68319: CALL_OW 2
68323: ST_TO_ADDR
68324: GO 68282
68326: POP
68327: POP
// if not tmp then
68328: LD_VAR 0 5
68332: NOT
68333: IFFALSE 68337
// exit ;
68335: GO 68357
// result := SortListByListDesc ( units , tmp ) ;
68337: LD_ADDR_VAR 0 3
68341: PUSH
68342: LD_VAR 0 1
68346: PPUSH
68347: LD_VAR 0 5
68351: PPUSH
68352: CALL_OW 77
68356: ST_TO_ADDR
// end ;
68357: LD_VAR 0 3
68361: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
68362: LD_INT 0
68364: PPUSH
68365: PPUSH
68366: PPUSH
// result := false ;
68367: LD_ADDR_VAR 0 3
68371: PUSH
68372: LD_INT 0
68374: ST_TO_ADDR
// x := GetX ( building ) ;
68375: LD_ADDR_VAR 0 4
68379: PUSH
68380: LD_VAR 0 2
68384: PPUSH
68385: CALL_OW 250
68389: ST_TO_ADDR
// y := GetY ( building ) ;
68390: LD_ADDR_VAR 0 5
68394: PUSH
68395: LD_VAR 0 2
68399: PPUSH
68400: CALL_OW 251
68404: ST_TO_ADDR
// if not building or not x or not y then
68405: LD_VAR 0 2
68409: NOT
68410: PUSH
68411: LD_VAR 0 4
68415: NOT
68416: OR
68417: PUSH
68418: LD_VAR 0 5
68422: NOT
68423: OR
68424: IFFALSE 68428
// exit ;
68426: GO 68520
// if GetTaskList ( unit ) then
68428: LD_VAR 0 1
68432: PPUSH
68433: CALL_OW 437
68437: IFFALSE 68520
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68439: LD_STRING e
68441: PUSH
68442: LD_VAR 0 1
68446: PPUSH
68447: CALL_OW 437
68451: PUSH
68452: LD_INT 1
68454: ARRAY
68455: PUSH
68456: LD_INT 1
68458: ARRAY
68459: EQUAL
68460: PUSH
68461: LD_VAR 0 4
68465: PUSH
68466: LD_VAR 0 1
68470: PPUSH
68471: CALL_OW 437
68475: PUSH
68476: LD_INT 1
68478: ARRAY
68479: PUSH
68480: LD_INT 2
68482: ARRAY
68483: EQUAL
68484: AND
68485: PUSH
68486: LD_VAR 0 5
68490: PUSH
68491: LD_VAR 0 1
68495: PPUSH
68496: CALL_OW 437
68500: PUSH
68501: LD_INT 1
68503: ARRAY
68504: PUSH
68505: LD_INT 3
68507: ARRAY
68508: EQUAL
68509: AND
68510: IFFALSE 68520
// result := true end ;
68512: LD_ADDR_VAR 0 3
68516: PUSH
68517: LD_INT 1
68519: ST_TO_ADDR
// end ;
68520: LD_VAR 0 3
68524: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
68525: LD_INT 0
68527: PPUSH
// result := false ;
68528: LD_ADDR_VAR 0 4
68532: PUSH
68533: LD_INT 0
68535: ST_TO_ADDR
// if GetTaskList ( unit ) then
68536: LD_VAR 0 1
68540: PPUSH
68541: CALL_OW 437
68545: IFFALSE 68628
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
68547: LD_STRING M
68549: PUSH
68550: LD_VAR 0 1
68554: PPUSH
68555: CALL_OW 437
68559: PUSH
68560: LD_INT 1
68562: ARRAY
68563: PUSH
68564: LD_INT 1
68566: ARRAY
68567: EQUAL
68568: PUSH
68569: LD_VAR 0 2
68573: PUSH
68574: LD_VAR 0 1
68578: PPUSH
68579: CALL_OW 437
68583: PUSH
68584: LD_INT 1
68586: ARRAY
68587: PUSH
68588: LD_INT 2
68590: ARRAY
68591: EQUAL
68592: AND
68593: PUSH
68594: LD_VAR 0 3
68598: PUSH
68599: LD_VAR 0 1
68603: PPUSH
68604: CALL_OW 437
68608: PUSH
68609: LD_INT 1
68611: ARRAY
68612: PUSH
68613: LD_INT 3
68615: ARRAY
68616: EQUAL
68617: AND
68618: IFFALSE 68628
// result := true ;
68620: LD_ADDR_VAR 0 4
68624: PUSH
68625: LD_INT 1
68627: ST_TO_ADDR
// end ; end ;
68628: LD_VAR 0 4
68632: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
68633: LD_INT 0
68635: PPUSH
68636: PPUSH
68637: PPUSH
68638: PPUSH
// if not unit or not area then
68639: LD_VAR 0 1
68643: NOT
68644: PUSH
68645: LD_VAR 0 2
68649: NOT
68650: OR
68651: IFFALSE 68655
// exit ;
68653: GO 68819
// tmp := AreaToList ( area , i ) ;
68655: LD_ADDR_VAR 0 6
68659: PUSH
68660: LD_VAR 0 2
68664: PPUSH
68665: LD_VAR 0 5
68669: PPUSH
68670: CALL_OW 517
68674: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
68675: LD_ADDR_VAR 0 5
68679: PUSH
68680: DOUBLE
68681: LD_INT 1
68683: DEC
68684: ST_TO_ADDR
68685: LD_VAR 0 6
68689: PUSH
68690: LD_INT 1
68692: ARRAY
68693: PUSH
68694: FOR_TO
68695: IFFALSE 68817
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
68697: LD_ADDR_VAR 0 7
68701: PUSH
68702: LD_VAR 0 6
68706: PUSH
68707: LD_INT 1
68709: ARRAY
68710: PUSH
68711: LD_VAR 0 5
68715: ARRAY
68716: PUSH
68717: LD_VAR 0 6
68721: PUSH
68722: LD_INT 2
68724: ARRAY
68725: PUSH
68726: LD_VAR 0 5
68730: ARRAY
68731: PUSH
68732: EMPTY
68733: LIST
68734: LIST
68735: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
68736: LD_VAR 0 7
68740: PUSH
68741: LD_INT 1
68743: ARRAY
68744: PPUSH
68745: LD_VAR 0 7
68749: PUSH
68750: LD_INT 2
68752: ARRAY
68753: PPUSH
68754: CALL_OW 428
68758: PUSH
68759: LD_INT 0
68761: EQUAL
68762: IFFALSE 68815
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
68764: LD_VAR 0 1
68768: PPUSH
68769: LD_VAR 0 7
68773: PUSH
68774: LD_INT 1
68776: ARRAY
68777: PPUSH
68778: LD_VAR 0 7
68782: PUSH
68783: LD_INT 2
68785: ARRAY
68786: PPUSH
68787: LD_VAR 0 3
68791: PPUSH
68792: CALL_OW 48
// result := IsPlaced ( unit ) ;
68796: LD_ADDR_VAR 0 4
68800: PUSH
68801: LD_VAR 0 1
68805: PPUSH
68806: CALL_OW 305
68810: ST_TO_ADDR
// exit ;
68811: POP
68812: POP
68813: GO 68819
// end ; end ;
68815: GO 68694
68817: POP
68818: POP
// end ;
68819: LD_VAR 0 4
68823: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
68824: LD_INT 0
68826: PPUSH
68827: PPUSH
68828: PPUSH
// if not side or side > 8 then
68829: LD_VAR 0 1
68833: NOT
68834: PUSH
68835: LD_VAR 0 1
68839: PUSH
68840: LD_INT 8
68842: GREATER
68843: OR
68844: IFFALSE 68848
// exit ;
68846: GO 69035
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
68848: LD_ADDR_VAR 0 4
68852: PUSH
68853: LD_INT 22
68855: PUSH
68856: LD_VAR 0 1
68860: PUSH
68861: EMPTY
68862: LIST
68863: LIST
68864: PUSH
68865: LD_INT 21
68867: PUSH
68868: LD_INT 3
68870: PUSH
68871: EMPTY
68872: LIST
68873: LIST
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PPUSH
68879: CALL_OW 69
68883: ST_TO_ADDR
// if not tmp then
68884: LD_VAR 0 4
68888: NOT
68889: IFFALSE 68893
// exit ;
68891: GO 69035
// enable_addtolog := true ;
68893: LD_ADDR_OWVAR 81
68897: PUSH
68898: LD_INT 1
68900: ST_TO_ADDR
// AddToLog ( [ ) ;
68901: LD_STRING [
68903: PPUSH
68904: CALL_OW 561
// for i in tmp do
68908: LD_ADDR_VAR 0 3
68912: PUSH
68913: LD_VAR 0 4
68917: PUSH
68918: FOR_IN
68919: IFFALSE 69026
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
68921: LD_STRING [
68923: PUSH
68924: LD_VAR 0 3
68928: PPUSH
68929: CALL_OW 266
68933: STR
68934: PUSH
68935: LD_STRING , 
68937: STR
68938: PUSH
68939: LD_VAR 0 3
68943: PPUSH
68944: CALL_OW 250
68948: STR
68949: PUSH
68950: LD_STRING , 
68952: STR
68953: PUSH
68954: LD_VAR 0 3
68958: PPUSH
68959: CALL_OW 251
68963: STR
68964: PUSH
68965: LD_STRING , 
68967: STR
68968: PUSH
68969: LD_VAR 0 3
68973: PPUSH
68974: CALL_OW 254
68978: STR
68979: PUSH
68980: LD_STRING , 
68982: STR
68983: PUSH
68984: LD_VAR 0 3
68988: PPUSH
68989: LD_INT 1
68991: PPUSH
68992: CALL_OW 268
68996: STR
68997: PUSH
68998: LD_STRING , 
69000: STR
69001: PUSH
69002: LD_VAR 0 3
69006: PPUSH
69007: LD_INT 2
69009: PPUSH
69010: CALL_OW 268
69014: STR
69015: PUSH
69016: LD_STRING ],
69018: STR
69019: PPUSH
69020: CALL_OW 561
// end ;
69024: GO 68918
69026: POP
69027: POP
// AddToLog ( ]; ) ;
69028: LD_STRING ];
69030: PPUSH
69031: CALL_OW 561
// end ;
69035: LD_VAR 0 2
69039: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
69040: LD_INT 0
69042: PPUSH
69043: PPUSH
69044: PPUSH
69045: PPUSH
69046: PPUSH
// if not area or not rate or not max then
69047: LD_VAR 0 1
69051: NOT
69052: PUSH
69053: LD_VAR 0 2
69057: NOT
69058: OR
69059: PUSH
69060: LD_VAR 0 4
69064: NOT
69065: OR
69066: IFFALSE 69070
// exit ;
69068: GO 69262
// while 1 do
69070: LD_INT 1
69072: IFFALSE 69262
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
69074: LD_ADDR_VAR 0 9
69078: PUSH
69079: LD_VAR 0 1
69083: PPUSH
69084: LD_INT 1
69086: PPUSH
69087: CALL_OW 287
69091: PUSH
69092: LD_INT 10
69094: MUL
69095: ST_TO_ADDR
// r := rate / 10 ;
69096: LD_ADDR_VAR 0 7
69100: PUSH
69101: LD_VAR 0 2
69105: PUSH
69106: LD_INT 10
69108: DIVREAL
69109: ST_TO_ADDR
// time := 1 1$00 ;
69110: LD_ADDR_VAR 0 8
69114: PUSH
69115: LD_INT 2100
69117: ST_TO_ADDR
// if amount < min then
69118: LD_VAR 0 9
69122: PUSH
69123: LD_VAR 0 3
69127: LESS
69128: IFFALSE 69146
// r := r * 2 else
69130: LD_ADDR_VAR 0 7
69134: PUSH
69135: LD_VAR 0 7
69139: PUSH
69140: LD_INT 2
69142: MUL
69143: ST_TO_ADDR
69144: GO 69172
// if amount > max then
69146: LD_VAR 0 9
69150: PUSH
69151: LD_VAR 0 4
69155: GREATER
69156: IFFALSE 69172
// r := r / 2 ;
69158: LD_ADDR_VAR 0 7
69162: PUSH
69163: LD_VAR 0 7
69167: PUSH
69168: LD_INT 2
69170: DIVREAL
69171: ST_TO_ADDR
// time := time / r ;
69172: LD_ADDR_VAR 0 8
69176: PUSH
69177: LD_VAR 0 8
69181: PUSH
69182: LD_VAR 0 7
69186: DIVREAL
69187: ST_TO_ADDR
// if time < 0 then
69188: LD_VAR 0 8
69192: PUSH
69193: LD_INT 0
69195: LESS
69196: IFFALSE 69213
// time := time * - 1 ;
69198: LD_ADDR_VAR 0 8
69202: PUSH
69203: LD_VAR 0 8
69207: PUSH
69208: LD_INT 1
69210: NEG
69211: MUL
69212: ST_TO_ADDR
// wait ( time ) ;
69213: LD_VAR 0 8
69217: PPUSH
69218: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
69222: LD_INT 35
69224: PPUSH
69225: LD_INT 875
69227: PPUSH
69228: CALL_OW 12
69232: PPUSH
69233: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
69237: LD_INT 1
69239: PPUSH
69240: LD_INT 5
69242: PPUSH
69243: CALL_OW 12
69247: PPUSH
69248: LD_VAR 0 1
69252: PPUSH
69253: LD_INT 1
69255: PPUSH
69256: CALL_OW 55
// end ;
69260: GO 69070
// end ;
69262: LD_VAR 0 5
69266: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
69267: LD_INT 0
69269: PPUSH
69270: PPUSH
69271: PPUSH
69272: PPUSH
69273: PPUSH
69274: PPUSH
69275: PPUSH
69276: PPUSH
// if not turrets or not factories then
69277: LD_VAR 0 1
69281: NOT
69282: PUSH
69283: LD_VAR 0 2
69287: NOT
69288: OR
69289: IFFALSE 69293
// exit ;
69291: GO 69600
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
69293: LD_ADDR_VAR 0 10
69297: PUSH
69298: LD_INT 5
69300: PUSH
69301: LD_INT 6
69303: PUSH
69304: EMPTY
69305: LIST
69306: LIST
69307: PUSH
69308: LD_INT 2
69310: PUSH
69311: LD_INT 4
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PUSH
69318: LD_INT 3
69320: PUSH
69321: LD_INT 5
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: LIST
69332: PUSH
69333: LD_INT 24
69335: PUSH
69336: LD_INT 25
69338: PUSH
69339: EMPTY
69340: LIST
69341: LIST
69342: PUSH
69343: LD_INT 23
69345: PUSH
69346: LD_INT 27
69348: PUSH
69349: EMPTY
69350: LIST
69351: LIST
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: LD_INT 42
69359: PUSH
69360: LD_INT 43
69362: PUSH
69363: EMPTY
69364: LIST
69365: LIST
69366: PUSH
69367: LD_INT 44
69369: PUSH
69370: LD_INT 46
69372: PUSH
69373: EMPTY
69374: LIST
69375: LIST
69376: PUSH
69377: LD_INT 45
69379: PUSH
69380: LD_INT 47
69382: PUSH
69383: EMPTY
69384: LIST
69385: LIST
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: LIST
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: LIST
69396: ST_TO_ADDR
// result := [ ] ;
69397: LD_ADDR_VAR 0 3
69401: PUSH
69402: EMPTY
69403: ST_TO_ADDR
// for i in turrets do
69404: LD_ADDR_VAR 0 4
69408: PUSH
69409: LD_VAR 0 1
69413: PUSH
69414: FOR_IN
69415: IFFALSE 69598
// begin nat := GetNation ( i ) ;
69417: LD_ADDR_VAR 0 7
69421: PUSH
69422: LD_VAR 0 4
69426: PPUSH
69427: CALL_OW 248
69431: ST_TO_ADDR
// weapon := 0 ;
69432: LD_ADDR_VAR 0 8
69436: PUSH
69437: LD_INT 0
69439: ST_TO_ADDR
// if not nat then
69440: LD_VAR 0 7
69444: NOT
69445: IFFALSE 69449
// continue ;
69447: GO 69414
// for j in list [ nat ] do
69449: LD_ADDR_VAR 0 5
69453: PUSH
69454: LD_VAR 0 10
69458: PUSH
69459: LD_VAR 0 7
69463: ARRAY
69464: PUSH
69465: FOR_IN
69466: IFFALSE 69507
// if GetBWeapon ( i ) = j [ 1 ] then
69468: LD_VAR 0 4
69472: PPUSH
69473: CALL_OW 269
69477: PUSH
69478: LD_VAR 0 5
69482: PUSH
69483: LD_INT 1
69485: ARRAY
69486: EQUAL
69487: IFFALSE 69505
// begin weapon := j [ 2 ] ;
69489: LD_ADDR_VAR 0 8
69493: PUSH
69494: LD_VAR 0 5
69498: PUSH
69499: LD_INT 2
69501: ARRAY
69502: ST_TO_ADDR
// break ;
69503: GO 69507
// end ;
69505: GO 69465
69507: POP
69508: POP
// if not weapon then
69509: LD_VAR 0 8
69513: NOT
69514: IFFALSE 69518
// continue ;
69516: GO 69414
// for k in factories do
69518: LD_ADDR_VAR 0 6
69522: PUSH
69523: LD_VAR 0 2
69527: PUSH
69528: FOR_IN
69529: IFFALSE 69594
// begin weapons := AvailableWeaponList ( k ) ;
69531: LD_ADDR_VAR 0 9
69535: PUSH
69536: LD_VAR 0 6
69540: PPUSH
69541: CALL_OW 478
69545: ST_TO_ADDR
// if not weapons then
69546: LD_VAR 0 9
69550: NOT
69551: IFFALSE 69555
// continue ;
69553: GO 69528
// if weapon in weapons then
69555: LD_VAR 0 8
69559: PUSH
69560: LD_VAR 0 9
69564: IN
69565: IFFALSE 69592
// begin result := [ i , weapon ] ;
69567: LD_ADDR_VAR 0 3
69571: PUSH
69572: LD_VAR 0 4
69576: PUSH
69577: LD_VAR 0 8
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: ST_TO_ADDR
// exit ;
69586: POP
69587: POP
69588: POP
69589: POP
69590: GO 69600
// end ; end ;
69592: GO 69528
69594: POP
69595: POP
// end ;
69596: GO 69414
69598: POP
69599: POP
// end ;
69600: LD_VAR 0 3
69604: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
69605: LD_INT 0
69607: PPUSH
// if not side or side > 8 then
69608: LD_VAR 0 3
69612: NOT
69613: PUSH
69614: LD_VAR 0 3
69618: PUSH
69619: LD_INT 8
69621: GREATER
69622: OR
69623: IFFALSE 69627
// exit ;
69625: GO 69686
// if not range then
69627: LD_VAR 0 4
69631: NOT
69632: IFFALSE 69643
// range := - 12 ;
69634: LD_ADDR_VAR 0 4
69638: PUSH
69639: LD_INT 12
69641: NEG
69642: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
69643: LD_VAR 0 1
69647: PPUSH
69648: LD_VAR 0 2
69652: PPUSH
69653: LD_VAR 0 3
69657: PPUSH
69658: LD_VAR 0 4
69662: PPUSH
69663: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
69667: LD_VAR 0 1
69671: PPUSH
69672: LD_VAR 0 2
69676: PPUSH
69677: LD_VAR 0 3
69681: PPUSH
69682: CALL_OW 331
// end ;
69686: LD_VAR 0 5
69690: RET
// export function Video ( mode ) ; begin
69691: LD_INT 0
69693: PPUSH
// ingame_video = mode ;
69694: LD_ADDR_OWVAR 52
69698: PUSH
69699: LD_VAR 0 1
69703: ST_TO_ADDR
// interface_hidden = mode ;
69704: LD_ADDR_OWVAR 54
69708: PUSH
69709: LD_VAR 0 1
69713: ST_TO_ADDR
// end ;
69714: LD_VAR 0 2
69718: RET
// export function Join ( array , element ) ; begin
69719: LD_INT 0
69721: PPUSH
// result := Replace ( array , array + 1 , element ) ;
69722: LD_ADDR_VAR 0 3
69726: PUSH
69727: LD_VAR 0 1
69731: PPUSH
69732: LD_VAR 0 1
69736: PUSH
69737: LD_INT 1
69739: PLUS
69740: PPUSH
69741: LD_VAR 0 2
69745: PPUSH
69746: CALL_OW 1
69750: ST_TO_ADDR
// end ;
69751: LD_VAR 0 3
69755: RET
// export function JoinUnion ( array , element ) ; begin
69756: LD_INT 0
69758: PPUSH
// result := array union element ;
69759: LD_ADDR_VAR 0 3
69763: PUSH
69764: LD_VAR 0 1
69768: PUSH
69769: LD_VAR 0 2
69773: UNION
69774: ST_TO_ADDR
// end ;
69775: LD_VAR 0 3
69779: RET
// export function GetBehemoths ( side ) ; begin
69780: LD_INT 0
69782: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
69783: LD_ADDR_VAR 0 2
69787: PUSH
69788: LD_INT 22
69790: PUSH
69791: LD_VAR 0 1
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 31
69802: PUSH
69803: LD_INT 25
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PPUSH
69814: CALL_OW 69
69818: ST_TO_ADDR
// end ;
69819: LD_VAR 0 2
69823: RET
// export function Shuffle ( array ) ; var i , index ; begin
69824: LD_INT 0
69826: PPUSH
69827: PPUSH
69828: PPUSH
// result := [ ] ;
69829: LD_ADDR_VAR 0 2
69833: PUSH
69834: EMPTY
69835: ST_TO_ADDR
// if not array then
69836: LD_VAR 0 1
69840: NOT
69841: IFFALSE 69845
// exit ;
69843: GO 69944
// Randomize ;
69845: CALL_OW 10
// for i = array downto 1 do
69849: LD_ADDR_VAR 0 3
69853: PUSH
69854: DOUBLE
69855: LD_VAR 0 1
69859: INC
69860: ST_TO_ADDR
69861: LD_INT 1
69863: PUSH
69864: FOR_DOWNTO
69865: IFFALSE 69942
// begin index := rand ( 1 , array ) ;
69867: LD_ADDR_VAR 0 4
69871: PUSH
69872: LD_INT 1
69874: PPUSH
69875: LD_VAR 0 1
69879: PPUSH
69880: CALL_OW 12
69884: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
69885: LD_ADDR_VAR 0 2
69889: PUSH
69890: LD_VAR 0 2
69894: PPUSH
69895: LD_VAR 0 2
69899: PUSH
69900: LD_INT 1
69902: PLUS
69903: PPUSH
69904: LD_VAR 0 1
69908: PUSH
69909: LD_VAR 0 4
69913: ARRAY
69914: PPUSH
69915: CALL_OW 2
69919: ST_TO_ADDR
// array := Delete ( array , index ) ;
69920: LD_ADDR_VAR 0 1
69924: PUSH
69925: LD_VAR 0 1
69929: PPUSH
69930: LD_VAR 0 4
69934: PPUSH
69935: CALL_OW 3
69939: ST_TO_ADDR
// end ;
69940: GO 69864
69942: POP
69943: POP
// end ;
69944: LD_VAR 0 2
69948: RET
// export function GetBaseMaterials ( base ) ; begin
69949: LD_INT 0
69951: PPUSH
// result := [ 0 , 0 , 0 ] ;
69952: LD_ADDR_VAR 0 2
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: LD_INT 0
69962: PUSH
69963: LD_INT 0
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: LIST
69970: ST_TO_ADDR
// if not base then
69971: LD_VAR 0 1
69975: NOT
69976: IFFALSE 69980
// exit ;
69978: GO 70029
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
69980: LD_ADDR_VAR 0 2
69984: PUSH
69985: LD_VAR 0 1
69989: PPUSH
69990: LD_INT 1
69992: PPUSH
69993: CALL_OW 275
69997: PUSH
69998: LD_VAR 0 1
70002: PPUSH
70003: LD_INT 2
70005: PPUSH
70006: CALL_OW 275
70010: PUSH
70011: LD_VAR 0 1
70015: PPUSH
70016: LD_INT 3
70018: PPUSH
70019: CALL_OW 275
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: LIST
70028: ST_TO_ADDR
// end ;
70029: LD_VAR 0 2
70033: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
70034: LD_INT 0
70036: PPUSH
70037: PPUSH
// result := array ;
70038: LD_ADDR_VAR 0 3
70042: PUSH
70043: LD_VAR 0 1
70047: ST_TO_ADDR
// if size > 0 then
70048: LD_VAR 0 2
70052: PUSH
70053: LD_INT 0
70055: GREATER
70056: IFFALSE 70102
// for i := array downto size do
70058: LD_ADDR_VAR 0 4
70062: PUSH
70063: DOUBLE
70064: LD_VAR 0 1
70068: INC
70069: ST_TO_ADDR
70070: LD_VAR 0 2
70074: PUSH
70075: FOR_DOWNTO
70076: IFFALSE 70100
// result := Delete ( result , result ) ;
70078: LD_ADDR_VAR 0 3
70082: PUSH
70083: LD_VAR 0 3
70087: PPUSH
70088: LD_VAR 0 3
70092: PPUSH
70093: CALL_OW 3
70097: ST_TO_ADDR
70098: GO 70075
70100: POP
70101: POP
// end ;
70102: LD_VAR 0 3
70106: RET
// export function ComExit ( unit ) ; var tmp ; begin
70107: LD_INT 0
70109: PPUSH
70110: PPUSH
// if not IsInUnit ( unit ) then
70111: LD_VAR 0 1
70115: PPUSH
70116: CALL_OW 310
70120: NOT
70121: IFFALSE 70125
// exit ;
70123: GO 70185
// tmp := IsInUnit ( unit ) ;
70125: LD_ADDR_VAR 0 3
70129: PUSH
70130: LD_VAR 0 1
70134: PPUSH
70135: CALL_OW 310
70139: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
70140: LD_VAR 0 3
70144: PPUSH
70145: CALL_OW 247
70149: PUSH
70150: LD_INT 2
70152: EQUAL
70153: IFFALSE 70166
// ComExitVehicle ( unit ) else
70155: LD_VAR 0 1
70159: PPUSH
70160: CALL_OW 121
70164: GO 70175
// ComExitBuilding ( unit ) ;
70166: LD_VAR 0 1
70170: PPUSH
70171: CALL_OW 122
// result := tmp ;
70175: LD_ADDR_VAR 0 2
70179: PUSH
70180: LD_VAR 0 3
70184: ST_TO_ADDR
// end ;
70185: LD_VAR 0 2
70189: RET
// export function ComExitAll ( units ) ; var i ; begin
70190: LD_INT 0
70192: PPUSH
70193: PPUSH
// if not units then
70194: LD_VAR 0 1
70198: NOT
70199: IFFALSE 70203
// exit ;
70201: GO 70229
// for i in units do
70203: LD_ADDR_VAR 0 3
70207: PUSH
70208: LD_VAR 0 1
70212: PUSH
70213: FOR_IN
70214: IFFALSE 70227
// ComExit ( i ) ;
70216: LD_VAR 0 3
70220: PPUSH
70221: CALL 70107 0 1
70225: GO 70213
70227: POP
70228: POP
// end ;
70229: LD_VAR 0 2
70233: RET
// export function ResetHc ; begin
70234: LD_INT 0
70236: PPUSH
// InitHc ;
70237: CALL_OW 19
// hc_importance := 0 ;
70241: LD_ADDR_OWVAR 32
70245: PUSH
70246: LD_INT 0
70248: ST_TO_ADDR
// end ;
70249: LD_VAR 0 1
70253: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
70254: LD_INT 0
70256: PPUSH
70257: PPUSH
70258: PPUSH
// _x := ( x1 + x2 ) div 2 ;
70259: LD_ADDR_VAR 0 6
70263: PUSH
70264: LD_VAR 0 1
70268: PUSH
70269: LD_VAR 0 3
70273: PLUS
70274: PUSH
70275: LD_INT 2
70277: DIV
70278: ST_TO_ADDR
// if _x < 0 then
70279: LD_VAR 0 6
70283: PUSH
70284: LD_INT 0
70286: LESS
70287: IFFALSE 70304
// _x := _x * - 1 ;
70289: LD_ADDR_VAR 0 6
70293: PUSH
70294: LD_VAR 0 6
70298: PUSH
70299: LD_INT 1
70301: NEG
70302: MUL
70303: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
70304: LD_ADDR_VAR 0 7
70308: PUSH
70309: LD_VAR 0 2
70313: PUSH
70314: LD_VAR 0 4
70318: PLUS
70319: PUSH
70320: LD_INT 2
70322: DIV
70323: ST_TO_ADDR
// if _y < 0 then
70324: LD_VAR 0 7
70328: PUSH
70329: LD_INT 0
70331: LESS
70332: IFFALSE 70349
// _y := _y * - 1 ;
70334: LD_ADDR_VAR 0 7
70338: PUSH
70339: LD_VAR 0 7
70343: PUSH
70344: LD_INT 1
70346: NEG
70347: MUL
70348: ST_TO_ADDR
// result := [ _x , _y ] ;
70349: LD_ADDR_VAR 0 5
70353: PUSH
70354: LD_VAR 0 6
70358: PUSH
70359: LD_VAR 0 7
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: ST_TO_ADDR
// end ;
70368: LD_VAR 0 5
70372: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
70373: LD_INT 0
70375: PPUSH
70376: PPUSH
70377: PPUSH
70378: PPUSH
// task := GetTaskList ( unit ) ;
70379: LD_ADDR_VAR 0 7
70383: PUSH
70384: LD_VAR 0 1
70388: PPUSH
70389: CALL_OW 437
70393: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
70394: LD_VAR 0 7
70398: NOT
70399: PUSH
70400: LD_VAR 0 1
70404: PPUSH
70405: LD_VAR 0 2
70409: PPUSH
70410: CALL_OW 308
70414: NOT
70415: AND
70416: IFFALSE 70420
// exit ;
70418: GO 70538
// if IsInArea ( unit , area ) then
70420: LD_VAR 0 1
70424: PPUSH
70425: LD_VAR 0 2
70429: PPUSH
70430: CALL_OW 308
70434: IFFALSE 70452
// begin ComMoveToArea ( unit , goAway ) ;
70436: LD_VAR 0 1
70440: PPUSH
70441: LD_VAR 0 3
70445: PPUSH
70446: CALL_OW 113
// exit ;
70450: GO 70538
// end ; if task [ 1 ] [ 1 ] <> M then
70452: LD_VAR 0 7
70456: PUSH
70457: LD_INT 1
70459: ARRAY
70460: PUSH
70461: LD_INT 1
70463: ARRAY
70464: PUSH
70465: LD_STRING M
70467: NONEQUAL
70468: IFFALSE 70472
// exit ;
70470: GO 70538
// x := task [ 1 ] [ 2 ] ;
70472: LD_ADDR_VAR 0 5
70476: PUSH
70477: LD_VAR 0 7
70481: PUSH
70482: LD_INT 1
70484: ARRAY
70485: PUSH
70486: LD_INT 2
70488: ARRAY
70489: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
70490: LD_ADDR_VAR 0 6
70494: PUSH
70495: LD_VAR 0 7
70499: PUSH
70500: LD_INT 1
70502: ARRAY
70503: PUSH
70504: LD_INT 3
70506: ARRAY
70507: ST_TO_ADDR
// if InArea ( x , y , area ) then
70508: LD_VAR 0 5
70512: PPUSH
70513: LD_VAR 0 6
70517: PPUSH
70518: LD_VAR 0 2
70522: PPUSH
70523: CALL_OW 309
70527: IFFALSE 70538
// ComStop ( unit ) ;
70529: LD_VAR 0 1
70533: PPUSH
70534: CALL_OW 141
// end ;
70538: LD_VAR 0 4
70542: RET
// export function Abs ( value ) ; begin
70543: LD_INT 0
70545: PPUSH
// result := value ;
70546: LD_ADDR_VAR 0 2
70550: PUSH
70551: LD_VAR 0 1
70555: ST_TO_ADDR
// if value < 0 then
70556: LD_VAR 0 1
70560: PUSH
70561: LD_INT 0
70563: LESS
70564: IFFALSE 70581
// result := value * - 1 ;
70566: LD_ADDR_VAR 0 2
70570: PUSH
70571: LD_VAR 0 1
70575: PUSH
70576: LD_INT 1
70578: NEG
70579: MUL
70580: ST_TO_ADDR
// end ;
70581: LD_VAR 0 2
70585: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
70586: LD_INT 0
70588: PPUSH
70589: PPUSH
70590: PPUSH
70591: PPUSH
70592: PPUSH
70593: PPUSH
70594: PPUSH
70595: PPUSH
// if not unit or not building then
70596: LD_VAR 0 1
70600: NOT
70601: PUSH
70602: LD_VAR 0 2
70606: NOT
70607: OR
70608: IFFALSE 70612
// exit ;
70610: GO 70838
// x := GetX ( building ) ;
70612: LD_ADDR_VAR 0 4
70616: PUSH
70617: LD_VAR 0 2
70621: PPUSH
70622: CALL_OW 250
70626: ST_TO_ADDR
// y := GetY ( building ) ;
70627: LD_ADDR_VAR 0 6
70631: PUSH
70632: LD_VAR 0 2
70636: PPUSH
70637: CALL_OW 251
70641: ST_TO_ADDR
// d := GetDir ( building ) ;
70642: LD_ADDR_VAR 0 8
70646: PUSH
70647: LD_VAR 0 2
70651: PPUSH
70652: CALL_OW 254
70656: ST_TO_ADDR
// r := 4 ;
70657: LD_ADDR_VAR 0 9
70661: PUSH
70662: LD_INT 4
70664: ST_TO_ADDR
// for i := 1 to 5 do
70665: LD_ADDR_VAR 0 10
70669: PUSH
70670: DOUBLE
70671: LD_INT 1
70673: DEC
70674: ST_TO_ADDR
70675: LD_INT 5
70677: PUSH
70678: FOR_TO
70679: IFFALSE 70836
// begin _x := ShiftX ( x , d , r + i ) ;
70681: LD_ADDR_VAR 0 5
70685: PUSH
70686: LD_VAR 0 4
70690: PPUSH
70691: LD_VAR 0 8
70695: PPUSH
70696: LD_VAR 0 9
70700: PUSH
70701: LD_VAR 0 10
70705: PLUS
70706: PPUSH
70707: CALL_OW 272
70711: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
70712: LD_ADDR_VAR 0 7
70716: PUSH
70717: LD_VAR 0 6
70721: PPUSH
70722: LD_VAR 0 8
70726: PPUSH
70727: LD_VAR 0 9
70731: PUSH
70732: LD_VAR 0 10
70736: PLUS
70737: PPUSH
70738: CALL_OW 273
70742: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
70743: LD_VAR 0 5
70747: PPUSH
70748: LD_VAR 0 7
70752: PPUSH
70753: CALL_OW 488
70757: PUSH
70758: LD_VAR 0 5
70762: PPUSH
70763: LD_VAR 0 7
70767: PPUSH
70768: CALL_OW 428
70772: PPUSH
70773: CALL_OW 247
70777: PUSH
70778: LD_INT 3
70780: PUSH
70781: LD_INT 2
70783: PUSH
70784: EMPTY
70785: LIST
70786: LIST
70787: IN
70788: NOT
70789: AND
70790: IFFALSE 70834
// begin ComMoveXY ( unit , _x , _y ) ;
70792: LD_VAR 0 1
70796: PPUSH
70797: LD_VAR 0 5
70801: PPUSH
70802: LD_VAR 0 7
70806: PPUSH
70807: CALL_OW 111
// result := [ _x , _y ] ;
70811: LD_ADDR_VAR 0 3
70815: PUSH
70816: LD_VAR 0 5
70820: PUSH
70821: LD_VAR 0 7
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: ST_TO_ADDR
// exit ;
70830: POP
70831: POP
70832: GO 70838
// end ; end ;
70834: GO 70678
70836: POP
70837: POP
// end ;
70838: LD_VAR 0 3
70842: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
70843: LD_INT 0
70845: PPUSH
70846: PPUSH
70847: PPUSH
// result := 0 ;
70848: LD_ADDR_VAR 0 3
70852: PUSH
70853: LD_INT 0
70855: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
70856: LD_VAR 0 1
70860: PUSH
70861: LD_INT 0
70863: LESS
70864: PUSH
70865: LD_VAR 0 1
70869: PUSH
70870: LD_INT 8
70872: GREATER
70873: OR
70874: PUSH
70875: LD_VAR 0 2
70879: PUSH
70880: LD_INT 0
70882: LESS
70883: OR
70884: PUSH
70885: LD_VAR 0 2
70889: PUSH
70890: LD_INT 8
70892: GREATER
70893: OR
70894: IFFALSE 70898
// exit ;
70896: GO 70973
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
70898: LD_ADDR_VAR 0 4
70902: PUSH
70903: LD_INT 22
70905: PUSH
70906: LD_VAR 0 2
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PPUSH
70915: CALL_OW 69
70919: PUSH
70920: FOR_IN
70921: IFFALSE 70971
// begin un := UnitShoot ( i ) ;
70923: LD_ADDR_VAR 0 5
70927: PUSH
70928: LD_VAR 0 4
70932: PPUSH
70933: CALL_OW 504
70937: ST_TO_ADDR
// if GetSide ( un ) = side1 then
70938: LD_VAR 0 5
70942: PPUSH
70943: CALL_OW 255
70947: PUSH
70948: LD_VAR 0 1
70952: EQUAL
70953: IFFALSE 70969
// begin result := un ;
70955: LD_ADDR_VAR 0 3
70959: PUSH
70960: LD_VAR 0 5
70964: ST_TO_ADDR
// exit ;
70965: POP
70966: POP
70967: GO 70973
// end ; end ;
70969: GO 70920
70971: POP
70972: POP
// end ;
70973: LD_VAR 0 3
70977: RET
// export function GetCargoBay ( units ) ; begin
70978: LD_INT 0
70980: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
70981: LD_ADDR_VAR 0 2
70985: PUSH
70986: LD_VAR 0 1
70990: PPUSH
70991: LD_INT 2
70993: PUSH
70994: LD_INT 34
70996: PUSH
70997: LD_INT 12
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 34
71006: PUSH
71007: LD_INT 51
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 34
71016: PUSH
71017: LD_INT 32
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 34
71026: PUSH
71027: LD_EXP 131
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: PPUSH
71043: CALL_OW 72
71047: ST_TO_ADDR
// end ;
71048: LD_VAR 0 2
71052: RET
// export function Negate ( value ) ; begin
71053: LD_INT 0
71055: PPUSH
// result := not value ;
71056: LD_ADDR_VAR 0 2
71060: PUSH
71061: LD_VAR 0 1
71065: NOT
71066: ST_TO_ADDR
// end ;
71067: LD_VAR 0 2
71071: RET
// export function Inc ( value ) ; begin
71072: LD_INT 0
71074: PPUSH
// result := value + 1 ;
71075: LD_ADDR_VAR 0 2
71079: PUSH
71080: LD_VAR 0 1
71084: PUSH
71085: LD_INT 1
71087: PLUS
71088: ST_TO_ADDR
// end ;
71089: LD_VAR 0 2
71093: RET
// export function Dec ( value ) ; begin
71094: LD_INT 0
71096: PPUSH
// result := value - 1 ;
71097: LD_ADDR_VAR 0 2
71101: PUSH
71102: LD_VAR 0 1
71106: PUSH
71107: LD_INT 1
71109: MINUS
71110: ST_TO_ADDR
// end ;
71111: LD_VAR 0 2
71115: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
71116: LD_INT 0
71118: PPUSH
71119: PPUSH
71120: PPUSH
71121: PPUSH
71122: PPUSH
71123: PPUSH
71124: PPUSH
71125: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
71126: LD_VAR 0 1
71130: PPUSH
71131: LD_VAR 0 2
71135: PPUSH
71136: CALL_OW 488
71140: NOT
71141: PUSH
71142: LD_VAR 0 3
71146: PPUSH
71147: LD_VAR 0 4
71151: PPUSH
71152: CALL_OW 488
71156: NOT
71157: OR
71158: IFFALSE 71171
// begin result := - 1 ;
71160: LD_ADDR_VAR 0 5
71164: PUSH
71165: LD_INT 1
71167: NEG
71168: ST_TO_ADDR
// exit ;
71169: GO 71406
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
71171: LD_ADDR_VAR 0 12
71175: PUSH
71176: LD_VAR 0 1
71180: PPUSH
71181: LD_VAR 0 2
71185: PPUSH
71186: LD_VAR 0 3
71190: PPUSH
71191: LD_VAR 0 4
71195: PPUSH
71196: CALL 70254 0 4
71200: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
71201: LD_ADDR_VAR 0 11
71205: PUSH
71206: LD_VAR 0 1
71210: PPUSH
71211: LD_VAR 0 2
71215: PPUSH
71216: LD_VAR 0 12
71220: PUSH
71221: LD_INT 1
71223: ARRAY
71224: PPUSH
71225: LD_VAR 0 12
71229: PUSH
71230: LD_INT 2
71232: ARRAY
71233: PPUSH
71234: CALL_OW 298
71238: ST_TO_ADDR
// distance := 9999 ;
71239: LD_ADDR_VAR 0 10
71243: PUSH
71244: LD_INT 9999
71246: ST_TO_ADDR
// for i := 0 to 5 do
71247: LD_ADDR_VAR 0 6
71251: PUSH
71252: DOUBLE
71253: LD_INT 0
71255: DEC
71256: ST_TO_ADDR
71257: LD_INT 5
71259: PUSH
71260: FOR_TO
71261: IFFALSE 71404
// begin _x := ShiftX ( x1 , i , centerDist ) ;
71263: LD_ADDR_VAR 0 7
71267: PUSH
71268: LD_VAR 0 1
71272: PPUSH
71273: LD_VAR 0 6
71277: PPUSH
71278: LD_VAR 0 11
71282: PPUSH
71283: CALL_OW 272
71287: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
71288: LD_ADDR_VAR 0 8
71292: PUSH
71293: LD_VAR 0 2
71297: PPUSH
71298: LD_VAR 0 6
71302: PPUSH
71303: LD_VAR 0 11
71307: PPUSH
71308: CALL_OW 273
71312: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
71313: LD_VAR 0 7
71317: PPUSH
71318: LD_VAR 0 8
71322: PPUSH
71323: CALL_OW 488
71327: NOT
71328: IFFALSE 71332
// continue ;
71330: GO 71260
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
71332: LD_ADDR_VAR 0 9
71336: PUSH
71337: LD_VAR 0 12
71341: PUSH
71342: LD_INT 1
71344: ARRAY
71345: PPUSH
71346: LD_VAR 0 12
71350: PUSH
71351: LD_INT 2
71353: ARRAY
71354: PPUSH
71355: LD_VAR 0 7
71359: PPUSH
71360: LD_VAR 0 8
71364: PPUSH
71365: CALL_OW 298
71369: ST_TO_ADDR
// if tmp < distance then
71370: LD_VAR 0 9
71374: PUSH
71375: LD_VAR 0 10
71379: LESS
71380: IFFALSE 71402
// begin result := i ;
71382: LD_ADDR_VAR 0 5
71386: PUSH
71387: LD_VAR 0 6
71391: ST_TO_ADDR
// distance := tmp ;
71392: LD_ADDR_VAR 0 10
71396: PUSH
71397: LD_VAR 0 9
71401: ST_TO_ADDR
// end ; end ;
71402: GO 71260
71404: POP
71405: POP
// end ;
71406: LD_VAR 0 5
71410: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71411: LD_INT 0
71413: PPUSH
71414: PPUSH
// if not driver or not IsInUnit ( driver ) then
71415: LD_VAR 0 1
71419: NOT
71420: PUSH
71421: LD_VAR 0 1
71425: PPUSH
71426: CALL_OW 310
71430: NOT
71431: OR
71432: IFFALSE 71436
// exit ;
71434: GO 71526
// vehicle := IsInUnit ( driver ) ;
71436: LD_ADDR_VAR 0 3
71440: PUSH
71441: LD_VAR 0 1
71445: PPUSH
71446: CALL_OW 310
71450: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71451: LD_VAR 0 1
71455: PPUSH
71456: LD_STRING \
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: LD_INT 0
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: LD_INT 0
71470: PUSH
71471: LD_INT 0
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: PUSH
71486: LD_STRING E
71488: PUSH
71489: LD_INT 0
71491: PUSH
71492: LD_INT 0
71494: PUSH
71495: LD_VAR 0 3
71499: PUSH
71500: LD_INT 0
71502: PUSH
71503: LD_INT 0
71505: PUSH
71506: LD_INT 0
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: PUSH
71518: EMPTY
71519: LIST
71520: LIST
71521: PPUSH
71522: CALL_OW 446
// end ;
71526: LD_VAR 0 2
71530: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
71531: LD_INT 0
71533: PPUSH
71534: PPUSH
// if not driver or not IsInUnit ( driver ) then
71535: LD_VAR 0 1
71539: NOT
71540: PUSH
71541: LD_VAR 0 1
71545: PPUSH
71546: CALL_OW 310
71550: NOT
71551: OR
71552: IFFALSE 71556
// exit ;
71554: GO 71646
// vehicle := IsInUnit ( driver ) ;
71556: LD_ADDR_VAR 0 3
71560: PUSH
71561: LD_VAR 0 1
71565: PPUSH
71566: CALL_OW 310
71570: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
71571: LD_VAR 0 1
71575: PPUSH
71576: LD_STRING \
71578: PUSH
71579: LD_INT 0
71581: PUSH
71582: LD_INT 0
71584: PUSH
71585: LD_INT 0
71587: PUSH
71588: LD_INT 0
71590: PUSH
71591: LD_INT 0
71593: PUSH
71594: LD_INT 0
71596: PUSH
71597: EMPTY
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: PUSH
71606: LD_STRING E
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: LD_INT 0
71614: PUSH
71615: LD_VAR 0 3
71619: PUSH
71620: LD_INT 0
71622: PUSH
71623: LD_INT 0
71625: PUSH
71626: LD_INT 0
71628: PUSH
71629: EMPTY
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: PUSH
71638: EMPTY
71639: LIST
71640: LIST
71641: PPUSH
71642: CALL_OW 447
// end ;
71646: LD_VAR 0 2
71650: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
71651: LD_INT 0
71653: PPUSH
71654: PPUSH
71655: PPUSH
// tmp := [ ] ;
71656: LD_ADDR_VAR 0 5
71660: PUSH
71661: EMPTY
71662: ST_TO_ADDR
// for i in units do
71663: LD_ADDR_VAR 0 4
71667: PUSH
71668: LD_VAR 0 1
71672: PUSH
71673: FOR_IN
71674: IFFALSE 71712
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
71676: LD_ADDR_VAR 0 5
71680: PUSH
71681: LD_VAR 0 5
71685: PPUSH
71686: LD_VAR 0 5
71690: PUSH
71691: LD_INT 1
71693: PLUS
71694: PPUSH
71695: LD_VAR 0 4
71699: PPUSH
71700: CALL_OW 256
71704: PPUSH
71705: CALL_OW 2
71709: ST_TO_ADDR
71710: GO 71673
71712: POP
71713: POP
// if not tmp then
71714: LD_VAR 0 5
71718: NOT
71719: IFFALSE 71723
// exit ;
71721: GO 71771
// if asc then
71723: LD_VAR 0 2
71727: IFFALSE 71751
// result := SortListByListAsc ( units , tmp ) else
71729: LD_ADDR_VAR 0 3
71733: PUSH
71734: LD_VAR 0 1
71738: PPUSH
71739: LD_VAR 0 5
71743: PPUSH
71744: CALL_OW 76
71748: ST_TO_ADDR
71749: GO 71771
// result := SortListByListDesc ( units , tmp ) ;
71751: LD_ADDR_VAR 0 3
71755: PUSH
71756: LD_VAR 0 1
71760: PPUSH
71761: LD_VAR 0 5
71765: PPUSH
71766: CALL_OW 77
71770: ST_TO_ADDR
// end ;
71771: LD_VAR 0 3
71775: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
71776: LD_INT 0
71778: PPUSH
71779: PPUSH
// task := GetTaskList ( mech ) ;
71780: LD_ADDR_VAR 0 4
71784: PUSH
71785: LD_VAR 0 1
71789: PPUSH
71790: CALL_OW 437
71794: ST_TO_ADDR
// if not task then
71795: LD_VAR 0 4
71799: NOT
71800: IFFALSE 71804
// exit ;
71802: GO 71846
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
71804: LD_ADDR_VAR 0 3
71808: PUSH
71809: LD_VAR 0 4
71813: PUSH
71814: LD_INT 1
71816: ARRAY
71817: PUSH
71818: LD_INT 1
71820: ARRAY
71821: PUSH
71822: LD_STRING r
71824: EQUAL
71825: PUSH
71826: LD_VAR 0 4
71830: PUSH
71831: LD_INT 1
71833: ARRAY
71834: PUSH
71835: LD_INT 4
71837: ARRAY
71838: PUSH
71839: LD_VAR 0 2
71843: EQUAL
71844: AND
71845: ST_TO_ADDR
// end ;
71846: LD_VAR 0 3
71850: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
71851: LD_INT 0
71853: PPUSH
// SetDir ( unit , d ) ;
71854: LD_VAR 0 1
71858: PPUSH
71859: LD_VAR 0 4
71863: PPUSH
71864: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
71868: LD_VAR 0 1
71872: PPUSH
71873: LD_VAR 0 2
71877: PPUSH
71878: LD_VAR 0 3
71882: PPUSH
71883: LD_VAR 0 5
71887: PPUSH
71888: CALL_OW 48
// end ;
71892: LD_VAR 0 6
71896: RET
// export function ToNaturalNumber ( number ) ; begin
71897: LD_INT 0
71899: PPUSH
// result := number div 1 ;
71900: LD_ADDR_VAR 0 2
71904: PUSH
71905: LD_VAR 0 1
71909: PUSH
71910: LD_INT 1
71912: DIV
71913: ST_TO_ADDR
// if number < 0 then
71914: LD_VAR 0 1
71918: PUSH
71919: LD_INT 0
71921: LESS
71922: IFFALSE 71932
// result := 0 ;
71924: LD_ADDR_VAR 0 2
71928: PUSH
71929: LD_INT 0
71931: ST_TO_ADDR
// end ;
71932: LD_VAR 0 2
71936: RET
// export function SortByClass ( units , class ) ; var un ; begin
71937: LD_INT 0
71939: PPUSH
71940: PPUSH
// if not units or not class then
71941: LD_VAR 0 1
71945: NOT
71946: PUSH
71947: LD_VAR 0 2
71951: NOT
71952: OR
71953: IFFALSE 71957
// exit ;
71955: GO 72052
// result := [ ] ;
71957: LD_ADDR_VAR 0 3
71961: PUSH
71962: EMPTY
71963: ST_TO_ADDR
// for un in units do
71964: LD_ADDR_VAR 0 4
71968: PUSH
71969: LD_VAR 0 1
71973: PUSH
71974: FOR_IN
71975: IFFALSE 72050
// if GetClass ( un ) = class then
71977: LD_VAR 0 4
71981: PPUSH
71982: CALL_OW 257
71986: PUSH
71987: LD_VAR 0 2
71991: EQUAL
71992: IFFALSE 72019
// result := Insert ( result , 1 , un ) else
71994: LD_ADDR_VAR 0 3
71998: PUSH
71999: LD_VAR 0 3
72003: PPUSH
72004: LD_INT 1
72006: PPUSH
72007: LD_VAR 0 4
72011: PPUSH
72012: CALL_OW 2
72016: ST_TO_ADDR
72017: GO 72048
// result := Replace ( result , result + 1 , un ) ;
72019: LD_ADDR_VAR 0 3
72023: PUSH
72024: LD_VAR 0 3
72028: PPUSH
72029: LD_VAR 0 3
72033: PUSH
72034: LD_INT 1
72036: PLUS
72037: PPUSH
72038: LD_VAR 0 4
72042: PPUSH
72043: CALL_OW 1
72047: ST_TO_ADDR
72048: GO 71974
72050: POP
72051: POP
// end ;
72052: LD_VAR 0 3
72056: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
72057: LD_INT 0
72059: PPUSH
72060: PPUSH
72061: PPUSH
72062: PPUSH
72063: PPUSH
72064: PPUSH
72065: PPUSH
// result := [ ] ;
72066: LD_ADDR_VAR 0 4
72070: PUSH
72071: EMPTY
72072: ST_TO_ADDR
// if x - r < 0 then
72073: LD_VAR 0 1
72077: PUSH
72078: LD_VAR 0 3
72082: MINUS
72083: PUSH
72084: LD_INT 0
72086: LESS
72087: IFFALSE 72099
// min_x := 0 else
72089: LD_ADDR_VAR 0 8
72093: PUSH
72094: LD_INT 0
72096: ST_TO_ADDR
72097: GO 72115
// min_x := x - r ;
72099: LD_ADDR_VAR 0 8
72103: PUSH
72104: LD_VAR 0 1
72108: PUSH
72109: LD_VAR 0 3
72113: MINUS
72114: ST_TO_ADDR
// if y - r < 0 then
72115: LD_VAR 0 2
72119: PUSH
72120: LD_VAR 0 3
72124: MINUS
72125: PUSH
72126: LD_INT 0
72128: LESS
72129: IFFALSE 72141
// min_y := 0 else
72131: LD_ADDR_VAR 0 7
72135: PUSH
72136: LD_INT 0
72138: ST_TO_ADDR
72139: GO 72157
// min_y := y - r ;
72141: LD_ADDR_VAR 0 7
72145: PUSH
72146: LD_VAR 0 2
72150: PUSH
72151: LD_VAR 0 3
72155: MINUS
72156: ST_TO_ADDR
// max_x := x + r ;
72157: LD_ADDR_VAR 0 9
72161: PUSH
72162: LD_VAR 0 1
72166: PUSH
72167: LD_VAR 0 3
72171: PLUS
72172: ST_TO_ADDR
// max_y := y + r ;
72173: LD_ADDR_VAR 0 10
72177: PUSH
72178: LD_VAR 0 2
72182: PUSH
72183: LD_VAR 0 3
72187: PLUS
72188: ST_TO_ADDR
// for _x = min_x to max_x do
72189: LD_ADDR_VAR 0 5
72193: PUSH
72194: DOUBLE
72195: LD_VAR 0 8
72199: DEC
72200: ST_TO_ADDR
72201: LD_VAR 0 9
72205: PUSH
72206: FOR_TO
72207: IFFALSE 72308
// for _y = min_y to max_y do
72209: LD_ADDR_VAR 0 6
72213: PUSH
72214: DOUBLE
72215: LD_VAR 0 7
72219: DEC
72220: ST_TO_ADDR
72221: LD_VAR 0 10
72225: PUSH
72226: FOR_TO
72227: IFFALSE 72304
// begin if not ValidHex ( _x , _y ) then
72229: LD_VAR 0 5
72233: PPUSH
72234: LD_VAR 0 6
72238: PPUSH
72239: CALL_OW 488
72243: NOT
72244: IFFALSE 72248
// continue ;
72246: GO 72226
// if GetResourceTypeXY ( _x , _y ) then
72248: LD_VAR 0 5
72252: PPUSH
72253: LD_VAR 0 6
72257: PPUSH
72258: CALL_OW 283
72262: IFFALSE 72302
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
72264: LD_ADDR_VAR 0 4
72268: PUSH
72269: LD_VAR 0 4
72273: PPUSH
72274: LD_VAR 0 4
72278: PUSH
72279: LD_INT 1
72281: PLUS
72282: PPUSH
72283: LD_VAR 0 5
72287: PUSH
72288: LD_VAR 0 6
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PPUSH
72297: CALL_OW 1
72301: ST_TO_ADDR
// end ;
72302: GO 72226
72304: POP
72305: POP
72306: GO 72206
72308: POP
72309: POP
// end ;
72310: LD_VAR 0 4
72314: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
72315: LD_INT 0
72317: PPUSH
72318: PPUSH
72319: PPUSH
72320: PPUSH
72321: PPUSH
72322: PPUSH
72323: PPUSH
72324: PPUSH
// if not units then
72325: LD_VAR 0 1
72329: NOT
72330: IFFALSE 72334
// exit ;
72332: GO 72759
// result := UnitFilter ( units , [ f_ok ] ) ;
72334: LD_ADDR_VAR 0 3
72338: PUSH
72339: LD_VAR 0 1
72343: PPUSH
72344: LD_INT 50
72346: PUSH
72347: EMPTY
72348: LIST
72349: PPUSH
72350: CALL_OW 72
72354: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
72355: LD_ADDR_VAR 0 8
72359: PUSH
72360: LD_VAR 0 1
72364: PUSH
72365: LD_INT 1
72367: ARRAY
72368: PPUSH
72369: CALL_OW 255
72373: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
72374: LD_ADDR_VAR 0 10
72378: PUSH
72379: LD_INT 29
72381: PUSH
72382: LD_EXP 134
72386: PUSH
72387: EMPTY
72388: LIST
72389: LIST
72390: ST_TO_ADDR
// if not result then
72391: LD_VAR 0 3
72395: NOT
72396: IFFALSE 72400
// exit ;
72398: GO 72759
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
72400: LD_ADDR_VAR 0 5
72404: PUSH
72405: LD_INT 81
72407: PUSH
72408: LD_VAR 0 8
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PPUSH
72417: CALL_OW 69
72421: ST_TO_ADDR
// for i in result do
72422: LD_ADDR_VAR 0 4
72426: PUSH
72427: LD_VAR 0 3
72431: PUSH
72432: FOR_IN
72433: IFFALSE 72757
// begin tag := GetTag ( i ) + 1 ;
72435: LD_ADDR_VAR 0 9
72439: PUSH
72440: LD_VAR 0 4
72444: PPUSH
72445: CALL_OW 110
72449: PUSH
72450: LD_INT 1
72452: PLUS
72453: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
72454: LD_ADDR_VAR 0 7
72458: PUSH
72459: LD_VAR 0 4
72463: PPUSH
72464: CALL_OW 250
72468: PPUSH
72469: LD_VAR 0 4
72473: PPUSH
72474: CALL_OW 251
72478: PPUSH
72479: LD_INT 6
72481: PPUSH
72482: CALL 72057 0 3
72486: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
72487: LD_VAR 0 7
72491: PUSH
72492: LD_VAR 0 4
72496: PPUSH
72497: CALL_OW 264
72501: PUSH
72502: LD_VAR 0 10
72506: IN
72507: NOT
72508: AND
72509: IFFALSE 72548
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
72511: LD_VAR 0 4
72515: PPUSH
72516: LD_VAR 0 7
72520: PUSH
72521: LD_INT 1
72523: ARRAY
72524: PUSH
72525: LD_INT 1
72527: ARRAY
72528: PPUSH
72529: LD_VAR 0 7
72533: PUSH
72534: LD_INT 1
72536: ARRAY
72537: PUSH
72538: LD_INT 2
72540: ARRAY
72541: PPUSH
72542: CALL_OW 116
72546: GO 72755
// if path > tag then
72548: LD_VAR 0 2
72552: PUSH
72553: LD_VAR 0 9
72557: GREATER
72558: IFFALSE 72725
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
72560: LD_ADDR_VAR 0 6
72564: PUSH
72565: LD_VAR 0 5
72569: PPUSH
72570: LD_INT 91
72572: PUSH
72573: LD_VAR 0 4
72577: PUSH
72578: LD_INT 12
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: LIST
72585: PPUSH
72586: CALL_OW 72
72590: ST_TO_ADDR
// if nearEnemy then
72591: LD_VAR 0 6
72595: IFFALSE 72623
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
72597: LD_VAR 0 4
72601: PPUSH
72602: LD_VAR 0 6
72606: PPUSH
72607: LD_VAR 0 4
72611: PPUSH
72612: CALL_OW 74
72616: PPUSH
72617: CALL_OW 115
72621: GO 72723
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
72623: LD_VAR 0 4
72627: PPUSH
72628: LD_VAR 0 2
72632: PUSH
72633: LD_VAR 0 9
72637: ARRAY
72638: PUSH
72639: LD_INT 1
72641: ARRAY
72642: PPUSH
72643: LD_VAR 0 2
72647: PUSH
72648: LD_VAR 0 9
72652: ARRAY
72653: PUSH
72654: LD_INT 2
72656: ARRAY
72657: PPUSH
72658: CALL_OW 297
72662: PUSH
72663: LD_INT 6
72665: GREATER
72666: IFFALSE 72709
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
72668: LD_VAR 0 4
72672: PPUSH
72673: LD_VAR 0 2
72677: PUSH
72678: LD_VAR 0 9
72682: ARRAY
72683: PUSH
72684: LD_INT 1
72686: ARRAY
72687: PPUSH
72688: LD_VAR 0 2
72692: PUSH
72693: LD_VAR 0 9
72697: ARRAY
72698: PUSH
72699: LD_INT 2
72701: ARRAY
72702: PPUSH
72703: CALL_OW 114
72707: GO 72723
// SetTag ( i , tag ) ;
72709: LD_VAR 0 4
72713: PPUSH
72714: LD_VAR 0 9
72718: PPUSH
72719: CALL_OW 109
// end else
72723: GO 72755
// if enemy then
72725: LD_VAR 0 5
72729: IFFALSE 72755
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
72731: LD_VAR 0 4
72735: PPUSH
72736: LD_VAR 0 5
72740: PPUSH
72741: LD_VAR 0 4
72745: PPUSH
72746: CALL_OW 74
72750: PPUSH
72751: CALL_OW 115
// end ;
72755: GO 72432
72757: POP
72758: POP
// end ;
72759: LD_VAR 0 3
72763: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
72764: LD_INT 0
72766: PPUSH
72767: PPUSH
72768: PPUSH
// if not unit or IsInUnit ( unit ) then
72769: LD_VAR 0 1
72773: NOT
72774: PUSH
72775: LD_VAR 0 1
72779: PPUSH
72780: CALL_OW 310
72784: OR
72785: IFFALSE 72789
// exit ;
72787: GO 72880
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
72789: LD_ADDR_VAR 0 4
72793: PUSH
72794: LD_VAR 0 1
72798: PPUSH
72799: CALL_OW 250
72803: PPUSH
72804: LD_VAR 0 2
72808: PPUSH
72809: LD_INT 1
72811: PPUSH
72812: CALL_OW 272
72816: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
72817: LD_ADDR_VAR 0 5
72821: PUSH
72822: LD_VAR 0 1
72826: PPUSH
72827: CALL_OW 251
72831: PPUSH
72832: LD_VAR 0 2
72836: PPUSH
72837: LD_INT 1
72839: PPUSH
72840: CALL_OW 273
72844: ST_TO_ADDR
// if ValidHex ( x , y ) then
72845: LD_VAR 0 4
72849: PPUSH
72850: LD_VAR 0 5
72854: PPUSH
72855: CALL_OW 488
72859: IFFALSE 72880
// ComTurnXY ( unit , x , y ) ;
72861: LD_VAR 0 1
72865: PPUSH
72866: LD_VAR 0 4
72870: PPUSH
72871: LD_VAR 0 5
72875: PPUSH
72876: CALL_OW 118
// end ;
72880: LD_VAR 0 3
72884: RET
// export function SeeUnits ( side , units ) ; var i ; begin
72885: LD_INT 0
72887: PPUSH
72888: PPUSH
// result := false ;
72889: LD_ADDR_VAR 0 3
72893: PUSH
72894: LD_INT 0
72896: ST_TO_ADDR
// if not units then
72897: LD_VAR 0 2
72901: NOT
72902: IFFALSE 72906
// exit ;
72904: GO 72951
// for i in units do
72906: LD_ADDR_VAR 0 4
72910: PUSH
72911: LD_VAR 0 2
72915: PUSH
72916: FOR_IN
72917: IFFALSE 72949
// if See ( side , i ) then
72919: LD_VAR 0 1
72923: PPUSH
72924: LD_VAR 0 4
72928: PPUSH
72929: CALL_OW 292
72933: IFFALSE 72947
// begin result := true ;
72935: LD_ADDR_VAR 0 3
72939: PUSH
72940: LD_INT 1
72942: ST_TO_ADDR
// exit ;
72943: POP
72944: POP
72945: GO 72951
// end ;
72947: GO 72916
72949: POP
72950: POP
// end ;
72951: LD_VAR 0 3
72955: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
72956: LD_INT 0
72958: PPUSH
72959: PPUSH
72960: PPUSH
72961: PPUSH
// if not unit or not points then
72962: LD_VAR 0 1
72966: NOT
72967: PUSH
72968: LD_VAR 0 2
72972: NOT
72973: OR
72974: IFFALSE 72978
// exit ;
72976: GO 73068
// dist := 99999 ;
72978: LD_ADDR_VAR 0 5
72982: PUSH
72983: LD_INT 99999
72985: ST_TO_ADDR
// for i in points do
72986: LD_ADDR_VAR 0 4
72990: PUSH
72991: LD_VAR 0 2
72995: PUSH
72996: FOR_IN
72997: IFFALSE 73066
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
72999: LD_ADDR_VAR 0 6
73003: PUSH
73004: LD_VAR 0 1
73008: PPUSH
73009: LD_VAR 0 4
73013: PUSH
73014: LD_INT 1
73016: ARRAY
73017: PPUSH
73018: LD_VAR 0 4
73022: PUSH
73023: LD_INT 2
73025: ARRAY
73026: PPUSH
73027: CALL_OW 297
73031: ST_TO_ADDR
// if tmpDist < dist then
73032: LD_VAR 0 6
73036: PUSH
73037: LD_VAR 0 5
73041: LESS
73042: IFFALSE 73064
// begin result := i ;
73044: LD_ADDR_VAR 0 3
73048: PUSH
73049: LD_VAR 0 4
73053: ST_TO_ADDR
// dist := tmpDist ;
73054: LD_ADDR_VAR 0 5
73058: PUSH
73059: LD_VAR 0 6
73063: ST_TO_ADDR
// end ; end ;
73064: GO 72996
73066: POP
73067: POP
// end ; end_of_file
73068: LD_VAR 0 3
73072: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
73073: LD_VAR 0 1
73077: PPUSH
73078: LD_VAR 0 2
73082: PPUSH
73083: LD_VAR 0 3
73087: PPUSH
73088: LD_VAR 0 4
73092: PPUSH
73093: LD_VAR 0 5
73097: PPUSH
73098: LD_VAR 0 6
73102: PPUSH
73103: CALL 14861 0 6
// end ;
73107: PPOPN 6
73109: END
