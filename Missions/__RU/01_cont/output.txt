// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 290 0 0
// PrepareRussian ;
  24: CALL 11739 0 0
// PrepareAmericans ;
  28: CALL 11312 0 0
// PrepareNature ;
  32: CALL 12443 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 11
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 13
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 14
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 17
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 18
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 19
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 20
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 21
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 23
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 273: LD_ADDR_EXP 25
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// MissionIntro ;
 281: CALL 846 0 0
// end ; end_of_file
 285: LD_VAR 0 1
 289: RET
// export function InitMapConfig ; begin
 290: LD_INT 0
 292: PPUSH
// BaseMapConfig ;
 293: CALL 306 0 0
// MissionMapConfig ;
 297: CALL 392 0 0
// end ;
 301: LD_VAR 0 1
 305: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 306: LD_INT 0
 308: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 309: LD_ADDR_EXP 26
 313: PUSH
 314: LD_INT 5
 316: PUSH
 317: LD_INT 4
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: LD_INT 2
 325: PUSH
 326: EMPTY
 327: LIST
 328: LIST
 329: LIST
 330: LIST
 331: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 332: LD_ADDR_EXP 27
 336: PUSH
 337: LD_INT 2
 339: PUSH
 340: LD_INT 2
 342: PUSH
 343: LD_INT 2
 345: PUSH
 346: LD_INT 2
 348: PUSH
 349: EMPTY
 350: LIST
 351: LIST
 352: LIST
 353: LIST
 354: ST_TO_ADDR
// animalsAgression = 0 ;
 355: LD_ADDR_EXP 28
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// debugMode = 0 ;
 363: LD_ADDR_EXP 31
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// missionPrefix = 01_ ;
 371: LD_ADDR_EXP 29
 375: PUSH
 376: LD_STRING 01_
 378: ST_TO_ADDR
// previousMissionPrefix =  ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 
 386: ST_TO_ADDR
// end ;
 387: LD_VAR 0 1
 391: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 392: LD_INT 0
 394: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 395: LD_ADDR_EXP 32
 399: PUSH
 400: LD_INT 800
 402: PUSH
 403: LD_INT 900
 405: PUSH
 406: LD_INT 950
 408: PUSH
 409: EMPTY
 410: LIST
 411: LIST
 412: LIST
 413: PUSH
 414: LD_OWVAR 67
 418: ARRAY
 419: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 420: LD_ADDR_EXP 33
 424: PUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 5
 430: PPUSH
 431: CALL_OW 12
 435: PUSH
 436: LD_OWVAR 67
 440: MUL
 441: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 442: LD_ADDR_EXP 34
 446: PUSH
 447: LD_INT 5
 449: PUSH
 450: LD_INT 6
 452: PUSH
 453: LD_INT 6
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: PUSH
 461: LD_OWVAR 67
 465: ARRAY
 466: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 467: LD_ADDR_EXP 35
 471: PUSH
 472: LD_INT 0
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: LD_INT 2
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: LIST
 485: PUSH
 486: LD_OWVAR 67
 490: ARRAY
 491: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 492: LD_ADDR_EXP 36
 496: PUSH
 497: LD_INT 78
 499: PUSH
 500: LD_INT 87
 502: PUSH
 503: EMPTY
 504: LIST
 505: LIST
 506: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 507: LD_ADDR_EXP 37
 511: PUSH
 512: LD_INT 72
 514: PUSH
 515: LD_INT 115
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: LD_INT 99
 524: PUSH
 525: LD_INT 7
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PUSH
 532: LD_INT 131
 534: PUSH
 535: LD_INT 81
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: EMPTY
 543: LIST
 544: LIST
 545: LIST
 546: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 547: LD_ADDR_EXP 38
 551: PUSH
 552: LD_INT 500
 554: PUSH
 555: LD_INT 400
 557: PUSH
 558: LD_INT 350
 560: PUSH
 561: EMPTY
 562: LIST
 563: LIST
 564: LIST
 565: PUSH
 566: LD_OWVAR 67
 570: ARRAY
 571: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 572: LD_ADDR_EXP 39
 576: PUSH
 577: LD_INT 21000
 579: PUSH
 580: LD_INT 16800
 582: PUSH
 583: LD_INT 12600
 585: PUSH
 586: EMPTY
 587: LIST
 588: LIST
 589: LIST
 590: PUSH
 591: LD_OWVAR 67
 595: ARRAY
 596: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 597: LD_ADDR_EXP 40
 601: PUSH
 602: LD_INT 6300
 604: PUSH
 605: LD_INT 5250
 607: PUSH
 608: LD_INT 4200
 610: PUSH
 611: EMPTY
 612: LIST
 613: LIST
 614: LIST
 615: PUSH
 616: LD_OWVAR 67
 620: ARRAY
 621: ST_TO_ADDR
// end ;
 622: LD_VAR 0 1
 626: RET
// every 0 0$1 trigger debugMode do var i ;
 627: LD_EXP 31
 631: IFFALSE 843
 633: GO 635
 635: DISABLE
 636: LD_INT 0
 638: PPUSH
// begin enable ;
 639: ENABLE
// FogOff ( your_side ) ;
 640: LD_OWVAR 2
 644: PPUSH
 645: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_OWVAR 2
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: PUSH
 666: LD_INT 2
 668: PUSH
 669: LD_INT 21
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 21
 681: PUSH
 682: LD_INT 2
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: LIST
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PPUSH
 698: CALL_OW 69
 702: PUSH
 703: FOR_IN
 704: IFFALSE 720
// SetLives ( i , 1000 ) ;
 706: LD_VAR 0 1
 710: PPUSH
 711: LD_INT 1000
 713: PPUSH
 714: CALL_OW 234
 718: GO 703
 720: POP
 721: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 722: LD_ADDR_VAR 0 1
 726: PUSH
 727: LD_INT 22
 729: PUSH
 730: LD_OWVAR 2
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 2
 741: PUSH
 742: LD_INT 30
 744: PUSH
 745: LD_INT 0
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PUSH
 752: LD_INT 30
 754: PUSH
 755: LD_INT 1
 757: PUSH
 758: EMPTY
 759: LIST
 760: LIST
 761: PUSH
 762: EMPTY
 763: LIST
 764: LIST
 765: LIST
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PPUSH
 771: CALL_OW 69
 775: PUSH
 776: FOR_IN
 777: IFFALSE 841
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 779: LD_VAR 0 1
 783: PPUSH
 784: CALL_OW 274
 788: PPUSH
 789: LD_INT 1
 791: PPUSH
 792: LD_INT 9999
 794: PPUSH
 795: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 799: LD_VAR 0 1
 803: PPUSH
 804: CALL_OW 274
 808: PPUSH
 809: LD_INT 2
 811: PPUSH
 812: LD_INT 9999
 814: PPUSH
 815: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 819: LD_VAR 0 1
 823: PPUSH
 824: CALL_OW 274
 828: PPUSH
 829: LD_INT 3
 831: PPUSH
 832: LD_INT 9999
 834: PPUSH
 835: CALL_OW 277
// end ;
 839: GO 776
 841: POP
 842: POP
// end ; end_of_file
 843: PPOPN 1
 845: END
// export function MissionIntro ; begin
 846: LD_INT 0
 848: PPUSH
// InGameOn ;
 849: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 853: LD_EXP 36
 857: PUSH
 858: LD_INT 1
 860: ARRAY
 861: PUSH
 862: LD_INT 8
 864: MINUS
 865: PPUSH
 866: LD_EXP 36
 870: PUSH
 871: LD_INT 2
 873: ARRAY
 874: PUSH
 875: LD_INT 8
 877: MINUS
 878: PPUSH
 879: CALL_OW 84
// wait ( 0 0$3 ) ;
 883: LD_INT 105
 885: PPUSH
 886: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 890: LD_EXP 45
 894: PPUSH
 895: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 899: LD_EXP 45
 903: PPUSH
 904: LD_STRING D1-Bur-1
 906: PPUSH
 907: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 911: LD_EXP 45
 915: PPUSH
 916: LD_INT 94
 918: PPUSH
 919: LD_INT 89
 921: PPUSH
 922: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 926: LD_INT 94
 928: PPUSH
 929: LD_INT 89
 931: PPUSH
 932: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 936: LD_EXP 45
 940: PPUSH
 941: LD_STRING D1-Bur-1a
 943: PPUSH
 944: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 948: LD_EXP 45
 952: PPUSH
 953: LD_INT 102
 955: PPUSH
 956: LD_INT 88
 958: PPUSH
 959: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 963: LD_INT 102
 965: PPUSH
 966: LD_INT 88
 968: PPUSH
 969: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 973: LD_EXP 45
 977: PPUSH
 978: LD_STRING D1-Bur-1b
 980: PPUSH
 981: CALL_OW 88
// InGameOff ;
 985: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 989: LD_STRING M1
 991: PPUSH
 992: CALL_OW 337
// SaveForQuickRestart ;
 996: CALL_OW 22
// introEnd = true ;
1000: LD_ADDR_EXP 3
1004: PUSH
1005: LD_INT 1
1007: ST_TO_ADDR
// end ;
1008: LD_VAR 0 1
1012: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1013: LD_EXP 45
1017: PPUSH
1018: LD_INT 74
1020: PPUSH
1021: LD_INT 88
1023: PPUSH
1024: CALL_OW 297
1028: PUSH
1029: LD_INT 5
1031: LESS
1032: PUSH
1033: LD_EXP 3
1037: AND
1038: IFFALSE 1063
1040: GO 1042
1042: DISABLE
// begin spotWaterfall = true ;
1043: LD_ADDR_EXP 7
1047: PUSH
1048: LD_INT 1
1050: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1051: LD_EXP 45
1055: PPUSH
1056: LD_STRING DWaterfall-Bur-1
1058: PPUSH
1059: CALL_OW 88
// end ;
1063: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1064: LD_EXP 45
1068: PPUSH
1069: LD_INT 130
1071: PPUSH
1072: LD_INT 96
1074: PPUSH
1075: CALL_OW 297
1079: PUSH
1080: LD_INT 5
1082: LESS
1083: PUSH
1084: LD_EXP 3
1088: AND
1089: IFFALSE 1106
1091: GO 1093
1093: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1094: LD_EXP 45
1098: PPUSH
1099: LD_STRING DCorpse-Bur-1
1101: PPUSH
1102: CALL_OW 88
1106: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1107: LD_EXP 4
1111: NOT
1112: IFFALSE 1206
1114: GO 1116
1116: DISABLE
1117: LD_INT 0
1119: PPUSH
// begin enable ;
1120: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1121: LD_ADDR_VAR 0 1
1125: PUSH
1126: LD_INT 22
1128: PUSH
1129: LD_INT 0
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 25
1138: PUSH
1139: LD_INT 12
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: EMPTY
1147: LIST
1148: LIST
1149: PPUSH
1150: CALL_OW 69
1154: PUSH
1155: FOR_IN
1156: IFFALSE 1204
// if GetDistUnits ( apeman , Burlak ) < 7 then
1158: LD_VAR 0 1
1162: PPUSH
1163: LD_EXP 45
1167: PPUSH
1168: CALL_OW 296
1172: PUSH
1173: LD_INT 7
1175: LESS
1176: IFFALSE 1202
// begin apemansContact = true ;
1178: LD_ADDR_EXP 4
1182: PUSH
1183: LD_INT 1
1185: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1186: LD_EXP 45
1190: PPUSH
1191: LD_STRING D2-Bur-1
1193: PPUSH
1194: CALL_OW 88
// exit ;
1198: POP
1199: POP
1200: GO 1206
// end ;
1202: GO 1155
1204: POP
1205: POP
// end ;
1206: PPOPN 1
1208: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1209: LD_EXP 5
1213: NOT
1214: IFFALSE 1330
1216: GO 1218
1218: DISABLE
1219: LD_INT 0
1221: PPUSH
1222: PPUSH
// begin enable ;
1223: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1224: LD_ADDR_VAR 0 2
1228: PUSH
1229: LD_INT 22
1231: PUSH
1232: LD_INT 0
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: PUSH
1239: LD_INT 25
1241: PUSH
1242: LD_INT 12
1244: PUSH
1245: EMPTY
1246: LIST
1247: LIST
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: PPUSH
1253: CALL_OW 69
1257: PUSH
1258: FOR_IN
1259: IFFALSE 1328
// if Attacks ( apeman ) then
1261: LD_VAR 0 2
1265: PPUSH
1266: CALL_OW 320
1270: IFFALSE 1326
// if GetSide ( Attacks ( apeman ) ) = 3 then
1272: LD_VAR 0 2
1276: PPUSH
1277: CALL_OW 320
1281: PPUSH
1282: CALL_OW 255
1286: PUSH
1287: LD_INT 3
1289: EQUAL
1290: IFFALSE 1326
// begin attackedByApeman = true ;
1292: LD_ADDR_EXP 5
1296: PUSH
1297: LD_INT 1
1299: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1300: LD_ADDR_EXP 8
1304: PUSH
1305: LD_VAR 0 2
1309: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1310: LD_EXP 45
1314: PPUSH
1315: LD_STRING D2-Bur-1a
1317: PPUSH
1318: CALL_OW 88
// exit ;
1322: POP
1323: POP
1324: GO 1330
// end ;
1326: GO 1258
1328: POP
1329: POP
// end ;
1330: PPOPN 2
1332: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1333: LD_EXP 6
1337: NOT
1338: IFFALSE 1435
1340: GO 1342
1342: DISABLE
1343: LD_INT 0
1345: PPUSH
1346: PPUSH
// begin enable ;
1347: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1348: LD_ADDR_VAR 0 2
1352: PUSH
1353: LD_INT 24
1355: PPUSH
1356: LD_INT 22
1358: PUSH
1359: LD_INT 0
1361: PUSH
1362: EMPTY
1363: LIST
1364: LIST
1365: PUSH
1366: LD_INT 25
1368: PUSH
1369: LD_INT 12
1371: PUSH
1372: EMPTY
1373: LIST
1374: LIST
1375: PUSH
1376: EMPTY
1377: LIST
1378: LIST
1379: PPUSH
1380: CALL_OW 70
1384: PUSH
1385: FOR_IN
1386: IFFALSE 1433
// if Attacks ( apeman ) then
1388: LD_VAR 0 2
1392: PPUSH
1393: CALL_OW 320
1397: IFFALSE 1431
// if GetSide ( Attacks ( apeman ) ) = 3 then
1399: LD_VAR 0 2
1403: PPUSH
1404: CALL_OW 320
1408: PPUSH
1409: CALL_OW 255
1413: PUSH
1414: LD_INT 3
1416: EQUAL
1417: IFFALSE 1431
// begin attackedByApemanNearLake = true ;
1419: LD_ADDR_EXP 6
1423: PUSH
1424: LD_INT 1
1426: ST_TO_ADDR
// exit ;
1427: POP
1428: POP
1429: GO 1435
// end ;
1431: GO 1385
1433: POP
1434: POP
// end ;
1435: PPOPN 2
1437: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1438: LD_EXP 9
1442: PPUSH
1443: CALL_OW 303
1447: IFFALSE 1481
1449: GO 1451
1451: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1452: LD_ADDR_EXP 10
1456: PUSH
1457: LD_EXP 9
1461: PPUSH
1462: CALL_OW 250
1466: PUSH
1467: LD_EXP 9
1471: PPUSH
1472: CALL_OW 251
1476: PUSH
1477: EMPTY
1478: LIST
1479: LIST
1480: ST_TO_ADDR
1481: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1482: LD_EXP 9
1486: PPUSH
1487: CALL_OW 303
1491: PUSH
1492: LD_INT 3
1494: PPUSH
1495: LD_EXP 10
1499: PUSH
1500: LD_INT 1
1502: ARRAY
1503: PPUSH
1504: LD_EXP 10
1508: PUSH
1509: LD_INT 2
1511: ARRAY
1512: PPUSH
1513: CALL_OW 293
1517: AND
1518: IFFALSE 1932
1520: GO 1522
1522: DISABLE
1523: LD_INT 0
1525: PPUSH
// begin wait ( 0 0$2 ) ;
1526: LD_INT 70
1528: PPUSH
1529: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1533: LD_EXP 45
1537: PPUSH
1538: LD_STRING D2a-Bur-1
1540: PPUSH
1541: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1545: LD_INT 22
1547: PUSH
1548: LD_INT 3
1550: PUSH
1551: EMPTY
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 21
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: EMPTY
1562: LIST
1563: LIST
1564: PUSH
1565: EMPTY
1566: LIST
1567: LIST
1568: PPUSH
1569: CALL_OW 69
1573: PUSH
1574: LD_INT 1
1576: EQUAL
1577: IFFALSE 1593
// Say ( Burlak , D2a-Bur-2 ) else
1579: LD_EXP 45
1583: PPUSH
1584: LD_STRING D2a-Bur-2
1586: PPUSH
1587: CALL_OW 88
1591: GO 1932
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Gnyevko , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1593: LD_ADDR_VAR 0 1
1597: PUSH
1598: LD_INT 22
1600: PUSH
1601: LD_INT 3
1603: PUSH
1604: EMPTY
1605: LIST
1606: LIST
1607: PUSH
1608: LD_INT 21
1610: PUSH
1611: LD_INT 1
1613: PUSH
1614: EMPTY
1615: LIST
1616: LIST
1617: PUSH
1618: EMPTY
1619: LIST
1620: LIST
1621: PPUSH
1622: CALL_OW 69
1626: PUSH
1627: LD_EXP 53
1631: DIFF
1632: PPUSH
1633: LD_EXP 10
1637: PUSH
1638: LD_INT 1
1640: ARRAY
1641: PPUSH
1642: LD_EXP 10
1646: PUSH
1647: LD_INT 2
1649: ARRAY
1650: PPUSH
1651: CALL_OW 73
1655: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1656: LD_VAR 0 1
1660: PPUSH
1661: LD_EXP 10
1665: PUSH
1666: LD_INT 1
1668: ARRAY
1669: PPUSH
1670: LD_EXP 10
1674: PUSH
1675: LD_INT 2
1677: ARRAY
1678: PPUSH
1679: CALL_OW 111
// case nearUnit of Burlak :
1683: LD_VAR 0 1
1687: PUSH
1688: LD_EXP 45
1692: DOUBLE
1693: EQUAL
1694: IFTRUE 1698
1696: GO 1713
1698: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1699: LD_EXP 45
1703: PPUSH
1704: LD_STRING D3-Bur-2a
1706: PPUSH
1707: CALL_OW 88
1711: GO 1805
1713: LD_EXP 50
1717: DOUBLE
1718: EQUAL
1719: IFTRUE 1723
1721: GO 1738
1723: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1724: LD_EXP 50
1728: PPUSH
1729: LD_STRING D2a-Bel-1
1731: PPUSH
1732: CALL_OW 88
1736: GO 1805
1738: LD_EXP 52
1742: DOUBLE
1743: EQUAL
1744: IFTRUE 1748
1746: GO 1763
1748: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1749: LD_EXP 52
1753: PPUSH
1754: LD_STRING D2a-Kir-1
1756: PPUSH
1757: CALL_OW 88
1761: GO 1805
1763: POP
// if GetSex ( nearUnit ) = sex_male then
1764: LD_VAR 0 1
1768: PPUSH
1769: CALL_OW 258
1773: PUSH
1774: LD_INT 1
1776: EQUAL
1777: IFFALSE 1793
// Say ( nearUnit , D2a-RSol1-1 ) else
1779: LD_VAR 0 1
1783: PPUSH
1784: LD_STRING D2a-RSol1-1
1786: PPUSH
1787: CALL_OW 88
1791: GO 1805
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1793: LD_VAR 0 1
1797: PPUSH
1798: LD_STRING D2a-RFSol1-1
1800: PPUSH
1801: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1805: LD_EXP 53
1809: PPUSH
1810: CALL_OW 255
1814: PUSH
1815: LD_INT 3
1817: EQUAL
1818: PUSH
1819: LD_EXP 53
1823: PPUSH
1824: CALL_OW 302
1828: AND
1829: IFFALSE 1843
// Say ( Gnyevko , D2a-Gny-1 ) ;
1831: LD_EXP 53
1835: PPUSH
1836: LD_STRING D2a-Gny-1
1838: PPUSH
1839: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1843: LD_EXP 9
1847: PUSH
1848: LD_EXP 8
1852: EQUAL
1853: IFFALSE 1867
// Say ( Burlak , D3-Bur-2 ) ;
1855: LD_EXP 45
1859: PPUSH
1860: LD_STRING D3-Bur-2
1862: PPUSH
1863: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1867: LD_EXP 53
1871: PPUSH
1872: CALL_OW 255
1876: PUSH
1877: LD_INT 8
1879: EQUAL
1880: IFFALSE 1932
// begin Say ( Burlak , D12-Bur-1 ) ;
1882: LD_EXP 45
1886: PPUSH
1887: LD_STRING D12-Bur-1
1889: PPUSH
1890: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1894: LD_EXP 50
1898: PPUSH
1899: CALL_OW 255
1903: PUSH
1904: LD_INT 3
1906: EQUAL
1907: PUSH
1908: LD_EXP 50
1912: PPUSH
1913: CALL_OW 302
1917: AND
1918: IFFALSE 1932
// Say ( Belkov , D12-Bel-2 ) ;
1920: LD_EXP 50
1924: PPUSH
1925: LD_STRING D12-Bel-2
1927: PPUSH
1928: CALL_OW 88
// end ; end ; end ;
1932: PPOPN 1
1934: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1935: LD_EXP 11
1939: NOT
1940: PUSH
1941: LD_EXP 39
1945: PUSH
1946: LD_INT 70
1948: GREATER
1949: AND
1950: IFFALSE 1970
1952: GO 1954
1954: DISABLE
// begin enable ;
1955: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1956: LD_EXP 53
1960: PPUSH
1961: LD_EXP 38
1965: PPUSH
1966: CALL_OW 234
// end ;
1970: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1971: LD_INT 3
1973: PPUSH
1974: LD_EXP 53
1978: PPUSH
1979: CALL_OW 292
1983: IFFALSE 2507
1985: GO 1987
1987: DISABLE
1988: LD_INT 0
1990: PPUSH
1991: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1992: LD_EXP 53
1996: PPUSH
1997: CALL_OW 87
// DialogueOn ;
2001: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
2005: LD_ADDR_VAR 0 1
2009: PUSH
2010: LD_INT 22
2012: PUSH
2013: LD_INT 3
2015: PUSH
2016: EMPTY
2017: LIST
2018: LIST
2019: PUSH
2020: LD_INT 21
2022: PUSH
2023: LD_INT 1
2025: PUSH
2026: EMPTY
2027: LIST
2028: LIST
2029: PUSH
2030: EMPTY
2031: LIST
2032: LIST
2033: PPUSH
2034: CALL_OW 69
2038: PPUSH
2039: LD_EXP 53
2043: PPUSH
2044: CALL_OW 74
2048: ST_TO_ADDR
// if nearUnit = Burlak then
2049: LD_VAR 0 1
2053: PUSH
2054: LD_EXP 45
2058: EQUAL
2059: IFFALSE 2377
// begin Say ( Burlak , D3-Bur-1 ) ;
2061: LD_EXP 45
2065: PPUSH
2066: LD_STRING D3-Bur-1
2068: PPUSH
2069: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2073: LD_EXP 53
2077: PPUSH
2078: LD_STRING D3-Gny-1
2080: PPUSH
2081: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
2085: LD_EXP 45
2089: PPUSH
2090: LD_STRING D3-Bur-2b
2092: PPUSH
2093: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2097: LD_INT 22
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_INT 21
2109: PUSH
2110: LD_INT 1
2112: PUSH
2113: EMPTY
2114: LIST
2115: LIST
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: PPUSH
2121: CALL_OW 69
2125: PUSH
2126: LD_INT 1
2128: EQUAL
2129: PUSH
2130: LD_EXP 13
2134: NOT
2135: AND
2136: IFFALSE 2188
// begin Say ( Burlak , D3-Bur-2c ) ;
2138: LD_EXP 45
2142: PPUSH
2143: LD_STRING D3-Bur-2c
2145: PPUSH
2146: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2150: LD_EXP 53
2154: PPUSH
2155: LD_STRING D3-Gny-2
2157: PPUSH
2158: CALL_OW 88
// DialogueOff ;
2162: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2166: LD_EXP 53
2170: PPUSH
2171: LD_INT 3
2173: PPUSH
2174: CALL_OW 235
// gnyevkoSaved = true ;
2178: LD_ADDR_EXP 11
2182: PUSH
2183: LD_INT 1
2185: ST_TO_ADDR
// exit ;
2186: GO 2507
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2188: LD_INT 22
2190: PUSH
2191: LD_INT 3
2193: PUSH
2194: EMPTY
2195: LIST
2196: LIST
2197: PUSH
2198: LD_INT 21
2200: PUSH
2201: LD_INT 1
2203: PUSH
2204: EMPTY
2205: LIST
2206: LIST
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PPUSH
2212: CALL_OW 69
2216: PUSH
2217: LD_INT 1
2219: GREATER
2220: PUSH
2221: LD_EXP 13
2225: OR
2226: PUSH
2227: LD_EXP 21
2231: NOT
2232: AND
2233: IFFALSE 2285
// begin Say ( Burlak , D3-Bur-2d ) ;
2235: LD_EXP 45
2239: PPUSH
2240: LD_STRING D3-Bur-2d
2242: PPUSH
2243: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2247: LD_EXP 53
2251: PPUSH
2252: LD_STRING D3-Gny-2
2254: PPUSH
2255: CALL_OW 88
// DialogueOff ;
2259: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2263: LD_EXP 53
2267: PPUSH
2268: LD_INT 3
2270: PPUSH
2271: CALL_OW 235
// gnyevkoSaved = true ;
2275: LD_ADDR_EXP 11
2279: PUSH
2280: LD_INT 1
2282: ST_TO_ADDR
// exit ;
2283: GO 2507
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2285: LD_INT 22
2287: PUSH
2288: LD_INT 3
2290: PUSH
2291: EMPTY
2292: LIST
2293: LIST
2294: PUSH
2295: LD_INT 21
2297: PUSH
2298: LD_INT 1
2300: PUSH
2301: EMPTY
2302: LIST
2303: LIST
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: PPUSH
2309: CALL_OW 69
2313: PUSH
2314: LD_INT 1
2316: GREATER
2317: PUSH
2318: LD_EXP 21
2322: AND
2323: IFFALSE 2375
// begin Say ( Burlak , D3-Bur-2e ) ;
2325: LD_EXP 45
2329: PPUSH
2330: LD_STRING D3-Bur-2e
2332: PPUSH
2333: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2337: LD_EXP 53
2341: PPUSH
2342: LD_STRING D3-Gny-2
2344: PPUSH
2345: CALL_OW 88
// DialogueOff ;
2349: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2353: LD_EXP 53
2357: PPUSH
2358: LD_INT 3
2360: PPUSH
2361: CALL_OW 235
// gnyevkoSaved = true ;
2365: LD_ADDR_EXP 11
2369: PUSH
2370: LD_INT 1
2372: ST_TO_ADDR
// exit ;
2373: GO 2507
// end ; end else
2375: GO 2507
// begin if GetSex ( nearUnit ) = sex_male then
2377: LD_VAR 0 1
2381: PPUSH
2382: CALL_OW 258
2386: PUSH
2387: LD_INT 1
2389: EQUAL
2390: IFFALSE 2406
// Say ( nearUnit , D3-RSol1-1 ) else
2392: LD_VAR 0 1
2396: PPUSH
2397: LD_STRING D3-RSol1-1
2399: PPUSH
2400: CALL_OW 88
2404: GO 2418
// Say ( nearUnit , D3-RFSol1-1 ) ;
2406: LD_VAR 0 1
2410: PPUSH
2411: LD_STRING D3-RFSol1-1
2413: PPUSH
2414: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2418: LD_EXP 53
2422: PPUSH
2423: LD_STRING D3-Gny-1
2425: PPUSH
2426: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2430: LD_VAR 0 1
2434: PPUSH
2435: CALL_OW 258
2439: PUSH
2440: LD_INT 1
2442: EQUAL
2443: IFFALSE 2459
// Say ( nearUnit , D3-RSol1-2 ) else
2445: LD_VAR 0 1
2449: PPUSH
2450: LD_STRING D3-RSol1-2
2452: PPUSH
2453: CALL_OW 88
2457: GO 2471
// Say ( nearUnit , D3-RFSol1-2 ) ;
2459: LD_VAR 0 1
2463: PPUSH
2464: LD_STRING D3-RFSol1-2
2466: PPUSH
2467: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2471: LD_EXP 53
2475: PPUSH
2476: LD_STRING D3-Gny-2a
2478: PPUSH
2479: CALL_OW 88
// DialogueOff ;
2483: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2487: LD_EXP 53
2491: PPUSH
2492: LD_INT 3
2494: PPUSH
2495: CALL_OW 235
// gnyevkoSaved = true ;
2499: LD_ADDR_EXP 11
2503: PUSH
2504: LD_INT 1
2506: ST_TO_ADDR
// end ; end ;
2507: PPOPN 2
2509: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2510: LD_EXP 11
2514: NOT
2515: PUSH
2516: LD_EXP 20
2520: NOT
2521: OR
2522: IFFALSE 2717
2524: GO 2526
2526: DISABLE
2527: LD_INT 0
2529: PPUSH
// begin enable ;
2530: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2531: LD_EXP 11
2535: NOT
2536: PUSH
2537: LD_EXP 39
2541: PUSH
2542: LD_INT 70
2544: GREATER
2545: AND
2546: IFFALSE 2624
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2548: LD_ADDR_VAR 0 1
2552: PUSH
2553: LD_INT 22
2555: PUSH
2556: LD_INT 0
2558: PUSH
2559: EMPTY
2560: LIST
2561: LIST
2562: PUSH
2563: LD_INT 25
2565: PUSH
2566: LD_INT 12
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: EMPTY
2574: LIST
2575: LIST
2576: PPUSH
2577: CALL_OW 69
2581: PUSH
2582: FOR_IN
2583: IFFALSE 2622
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2585: LD_VAR 0 1
2589: PPUSH
2590: LD_EXP 53
2594: PPUSH
2595: CALL_OW 250
2599: PPUSH
2600: LD_EXP 53
2604: PPUSH
2605: CALL_OW 251
2609: PPUSH
2610: LD_INT 10
2612: PPUSH
2613: LD_INT 0
2615: PPUSH
2616: CALL 8339 0 5
2620: GO 2582
2622: POP
2623: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2624: LD_EXP 20
2628: NOT
2629: PUSH
2630: LD_EXP 40
2634: PUSH
2635: LD_INT 70
2637: GREATER
2638: AND
2639: IFFALSE 2717
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2641: LD_ADDR_VAR 0 1
2645: PUSH
2646: LD_INT 22
2648: PUSH
2649: LD_INT 0
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: PUSH
2656: LD_INT 25
2658: PUSH
2659: LD_INT 12
2661: PUSH
2662: EMPTY
2663: LIST
2664: LIST
2665: PUSH
2666: EMPTY
2667: LIST
2668: LIST
2669: PPUSH
2670: CALL_OW 69
2674: PUSH
2675: FOR_IN
2676: IFFALSE 2715
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2678: LD_VAR 0 1
2682: PPUSH
2683: LD_EXP 52
2687: PPUSH
2688: CALL_OW 250
2692: PPUSH
2693: LD_EXP 52
2697: PPUSH
2698: CALL_OW 251
2702: PPUSH
2703: LD_INT 10
2705: PPUSH
2706: LD_INT 0
2708: PPUSH
2709: CALL 8339 0 5
2713: GO 2675
2715: POP
2716: POP
// end ;
2717: PPOPN 1
2719: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2720: LD_EXP 11
2724: NOT
2725: PUSH
2726: LD_EXP 20
2730: NOT
2731: OR
2732: IFFALSE 2843
2734: GO 2736
2736: DISABLE
// begin enable ;
2737: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2738: LD_EXP 11
2742: NOT
2743: PUSH
2744: LD_EXP 39
2748: PUSH
2749: LD_INT 0
2751: GREATER
2752: AND
2753: IFFALSE 2769
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2755: LD_ADDR_EXP 39
2759: PUSH
2760: LD_EXP 39
2764: PUSH
2765: LD_INT 35
2767: MINUS
2768: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2769: LD_EXP 52
2773: PPUSH
2774: CALL_OW 305
2778: PUSH
2779: LD_EXP 20
2783: NOT
2784: AND
2785: PUSH
2786: LD_EXP 40
2790: PUSH
2791: LD_INT 0
2793: GREATER
2794: AND
2795: IFFALSE 2811
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2797: LD_ADDR_EXP 40
2801: PUSH
2802: LD_EXP 40
2806: PUSH
2807: LD_INT 35
2809: MINUS
2810: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2811: LD_EXP 52
2815: PPUSH
2816: CALL_OW 305
2820: PUSH
2821: LD_EXP 20
2825: NOT
2826: AND
2827: IFFALSE 2843
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2829: LD_ADDR_EXP 25
2833: PUSH
2834: LD_EXP 25
2838: PUSH
2839: LD_INT 35
2841: PLUS
2842: ST_TO_ADDR
// end ;
2843: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or See ( 6 , Gnyevko ) ) and not meetPokryshkin do
2844: LD_INT 3
2846: PPUSH
2847: LD_EXP 46
2851: PPUSH
2852: CALL_OW 292
2856: PUSH
2857: LD_INT 6
2859: PPUSH
2860: LD_EXP 45
2864: PPUSH
2865: CALL_OW 292
2869: OR
2870: PUSH
2871: LD_INT 6
2873: PPUSH
2874: LD_EXP 53
2878: PPUSH
2879: CALL_OW 292
2883: OR
2884: PUSH
2885: LD_EXP 13
2889: NOT
2890: AND
2891: IFFALSE 3798
2893: GO 2895
2895: DISABLE
// begin enable ;
2896: ENABLE
// InGameOn ;
2897: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2901: LD_EXP 46
2905: PPUSH
2906: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2910: LD_EXP 53
2914: PPUSH
2915: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2919: LD_EXP 45
2923: PUSH
2924: LD_EXP 53
2928: PUSH
2929: EMPTY
2930: LIST
2931: LIST
2932: PPUSH
2933: CALL_OW 200
// DialogueOn ;
2937: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2941: LD_EXP 12
2945: IFFALSE 3197
// begin meetPokryshkin = true ;
2947: LD_ADDR_EXP 13
2951: PUSH
2952: LD_INT 1
2954: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2955: LD_INT 6
2957: PPUSH
2958: LD_INT 3
2960: PPUSH
2961: CALL_OW 343
// DialogueOff ;
2965: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2969: LD_EXP 45
2973: PPUSH
2974: LD_EXP 46
2978: PPUSH
2979: CALL_OW 250
2983: PPUSH
2984: LD_EXP 46
2988: PPUSH
2989: CALL_OW 251
2993: PPUSH
2994: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2998: LD_EXP 45
3002: PPUSH
3003: LD_EXP 46
3007: PPUSH
3008: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3012: LD_EXP 46
3016: PPUSH
3017: LD_EXP 45
3021: PPUSH
3022: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3026: LD_EXP 53
3030: PPUSH
3031: LD_STRING D4-Gny-3
3033: PPUSH
3034: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3038: LD_EXP 45
3042: PPUSH
3043: LD_STRING D4-Bur-3
3045: PPUSH
3046: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3050: LD_EXP 46
3054: PPUSH
3055: LD_STRING D4-Pok-4
3057: PPUSH
3058: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3062: LD_EXP 41
3066: PPUSH
3067: LD_INT 18
3069: PPUSH
3070: LD_INT 1
3072: PPUSH
3073: CALL_OW 49
// wait ( 0 0$2 ) ;
3077: LD_INT 70
3079: PPUSH
3080: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3084: LD_EXP 45
3088: PPUSH
3089: LD_STRING D4-Bur-4
3091: PPUSH
3092: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3096: LD_EXP 46
3100: PPUSH
3101: LD_STRING D4-Pok-5
3103: PPUSH
3104: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3108: LD_EXP 41
3112: PPUSH
3113: LD_STRING D4-Sol1-5
3115: PPUSH
3116: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3120: LD_EXP 46
3124: PPUSH
3125: LD_STRING D4-Pok-6
3127: PPUSH
3128: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3132: LD_EXP 46
3136: PPUSH
3137: LD_STRING D4-Pok-6a
3139: PPUSH
3140: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3144: LD_EXP 45
3148: PPUSH
3149: LD_STRING D4-Bur-6
3151: PPUSH
3152: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3156: LD_EXP 46
3160: PPUSH
3161: LD_STRING D4-Pok-7
3163: PPUSH
3164: CALL_OW 88
// DialogueOff ;
3168: CALL_OW 7
// InGameOff ;
3172: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3176: LD_STRING M2
3178: PPUSH
3179: CALL_OW 337
// goToHill = true ;
3183: LD_ADDR_EXP 14
3187: PUSH
3188: LD_INT 1
3190: ST_TO_ADDR
// MoveToHill ;
3191: CALL 10219 0 0
// exit ;
3195: GO 3798
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3197: LD_EXP 45
3201: PUSH
3202: LD_EXP 53
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: PPUSH
3211: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3215: LD_EXP 46
3219: PPUSH
3220: LD_STRING D4-Pok-1
3222: PPUSH
3223: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3227: LD_EXP 53
3231: PPUSH
3232: CALL_OW 255
3236: PUSH
3237: LD_INT 3
3239: EQUAL
3240: PUSH
3241: LD_EXP 53
3245: PPUSH
3246: CALL_OW 302
3250: AND
3251: IFFALSE 3265
// Say ( Gnyevko , D4-Gny-1 ) ;
3253: LD_EXP 53
3257: PPUSH
3258: LD_STRING D4-Gny-1
3260: PPUSH
3261: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3265: LD_EXP 45
3269: PPUSH
3270: LD_INT 22
3272: PUSH
3273: LD_INT 6
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: PUSH
3280: LD_INT 21
3282: PUSH
3283: LD_INT 1
3285: PUSH
3286: EMPTY
3287: LIST
3288: LIST
3289: PUSH
3290: EMPTY
3291: LIST
3292: LIST
3293: PPUSH
3294: CALL_OW 69
3298: PPUSH
3299: LD_EXP 45
3303: PPUSH
3304: CALL_OW 74
3308: PPUSH
3309: CALL_OW 296
3313: PUSH
3314: LD_INT 8
3316: GREATER
3317: PUSH
3318: LD_EXP 45
3322: PPUSH
3323: LD_EXP 53
3327: PPUSH
3328: CALL_OW 296
3332: PUSH
3333: LD_INT 8
3335: GREATER
3336: AND
3337: PUSH
3338: LD_EXP 53
3342: PPUSH
3343: CALL_OW 255
3347: PUSH
3348: LD_INT 3
3350: EQUAL
3351: AND
3352: PUSH
3353: LD_EXP 53
3357: PPUSH
3358: CALL_OW 302
3362: AND
3363: IFFALSE 3461
// begin ComWalk ( Gnyevko ) ;
3365: LD_EXP 53
3369: PPUSH
3370: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3374: LD_EXP 46
3378: PPUSH
3379: LD_STRING D4-Pok-2
3381: PPUSH
3382: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3386: LD_EXP 53
3390: PPUSH
3391: LD_STRING D4-Gny-2
3393: PPUSH
3394: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3398: LD_EXP 46
3402: PPUSH
3403: LD_STRING D4-Pok-3
3405: PPUSH
3406: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3410: LD_ADDR_EXP 12
3414: PUSH
3415: LD_INT 1
3417: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3418: LD_EXP 53
3422: PPUSH
3423: LD_INT 6
3425: PPUSH
3426: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3430: LD_EXP 53
3434: PPUSH
3435: LD_EXP 46
3439: PPUSH
3440: CALL_OW 250
3444: PPUSH
3445: LD_EXP 46
3449: PPUSH
3450: CALL_OW 251
3454: PPUSH
3455: CALL_OW 171
// end else
3459: GO 3790
// begin meetPokryshkin = true ;
3461: LD_ADDR_EXP 13
3465: PUSH
3466: LD_INT 1
3468: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3469: LD_INT 6
3471: PPUSH
3472: LD_INT 3
3474: PPUSH
3475: CALL_OW 343
// DialogueOff ;
3479: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3483: LD_EXP 53
3487: PPUSH
3488: CALL_OW 255
3492: PUSH
3493: LD_INT 3
3495: EQUAL
3496: PUSH
3497: LD_EXP 53
3501: PPUSH
3502: CALL_OW 302
3506: AND
3507: IFFALSE 3584
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3509: LD_EXP 45
3513: PUSH
3514: LD_EXP 53
3518: PUSH
3519: EMPTY
3520: LIST
3521: LIST
3522: PPUSH
3523: LD_EXP 46
3527: PPUSH
3528: CALL_OW 250
3532: PPUSH
3533: LD_EXP 46
3537: PPUSH
3538: CALL_OW 251
3542: PPUSH
3543: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3547: LD_EXP 45
3551: PUSH
3552: LD_EXP 53
3556: PUSH
3557: EMPTY
3558: LIST
3559: LIST
3560: PPUSH
3561: LD_EXP 46
3565: PPUSH
3566: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3570: LD_EXP 53
3574: PPUSH
3575: LD_INT 6
3577: PPUSH
3578: CALL_OW 235
// end else
3582: GO 3627
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3584: LD_EXP 45
3588: PPUSH
3589: LD_EXP 46
3593: PPUSH
3594: CALL_OW 250
3598: PPUSH
3599: LD_EXP 46
3603: PPUSH
3604: CALL_OW 251
3608: PPUSH
3609: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3613: LD_EXP 45
3617: PPUSH
3618: LD_EXP 46
3622: PPUSH
3623: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3627: LD_EXP 46
3631: PPUSH
3632: LD_EXP 45
3636: PPUSH
3637: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3641: LD_EXP 45
3645: PPUSH
3646: LD_STRING D4-Bur-3
3648: PPUSH
3649: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3653: LD_EXP 46
3657: PPUSH
3658: LD_STRING D4-Pok-4
3660: PPUSH
3661: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3665: LD_EXP 41
3669: PPUSH
3670: LD_INT 18
3672: PPUSH
3673: LD_INT 1
3675: PPUSH
3676: CALL_OW 49
// wait ( 0 0$2 ) ;
3680: LD_INT 70
3682: PPUSH
3683: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3687: LD_EXP 45
3691: PPUSH
3692: LD_STRING D4-Bur-4
3694: PPUSH
3695: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3699: LD_EXP 46
3703: PPUSH
3704: LD_STRING D4-Pok-5
3706: PPUSH
3707: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3711: LD_EXP 41
3715: PPUSH
3716: LD_STRING D4-Sol1-5
3718: PPUSH
3719: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3723: LD_EXP 46
3727: PPUSH
3728: LD_STRING D4-Pok-6
3730: PPUSH
3731: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3735: LD_EXP 46
3739: PPUSH
3740: LD_STRING D4-Pok-6a
3742: PPUSH
3743: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3747: LD_EXP 45
3751: PPUSH
3752: LD_STRING D4-Bur-6
3754: PPUSH
3755: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3759: LD_EXP 46
3763: PPUSH
3764: LD_STRING D4-Pok-7
3766: PPUSH
3767: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3771: LD_STRING M2
3773: PPUSH
3774: CALL_OW 337
// goToHill = true ;
3778: LD_ADDR_EXP 14
3782: PUSH
3783: LD_INT 1
3785: ST_TO_ADDR
// MoveToHill ;
3786: CALL 10219 0 0
// end ; DialogueOff ;
3790: CALL_OW 7
// InGameOff ;
3794: CALL_OW 9
// end ;
3798: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3799: LD_EXP 45
3803: PPUSH
3804: LD_EXP 46
3808: PPUSH
3809: CALL_OW 296
3813: PUSH
3814: LD_INT 10
3816: GREATER
3817: PUSH
3818: LD_EXP 14
3822: AND
3823: PUSH
3824: LD_EXP 17
3828: NOT
3829: AND
3830: IFFALSE 4031
3832: GO 3834
3834: DISABLE
3835: LD_INT 0
3837: PPUSH
// begin enable ;
3838: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3839: LD_ADDR_VAR 0 1
3843: PUSH
3844: LD_EXP 46
3848: PUSH
3849: LD_EXP 47
3853: PUSH
3854: LD_EXP 48
3858: PUSH
3859: LD_EXP 49
3863: PUSH
3864: LD_EXP 50
3868: PUSH
3869: EMPTY
3870: LIST
3871: LIST
3872: LIST
3873: LIST
3874: LIST
3875: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3876: LD_EXP 53
3880: PPUSH
3881: CALL_OW 255
3885: PUSH
3886: LD_INT 6
3888: EQUAL
3889: PUSH
3890: LD_EXP 11
3894: AND
3895: IFFALSE 3913
// ruSolds = ruSolds ^ Gnyevko ;
3897: LD_ADDR_VAR 0 1
3901: PUSH
3902: LD_VAR 0 1
3906: PUSH
3907: LD_EXP 53
3911: ADD
3912: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3913: LD_VAR 0 1
3917: PPUSH
3918: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3922: LD_EXP 45
3926: PPUSH
3927: CALL_OW 87
// DialogueOn ;
3931: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3935: LD_EXP 46
3939: PPUSH
3940: LD_STRING DSplit-Pok-1
3942: PPUSH
3943: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3947: LD_EXP 45
3951: PPUSH
3952: LD_STRING DSplit-Bur-1
3954: PPUSH
3955: CALL_OW 88
// DialogueOff ;
3959: CALL_OW 7
// InGameOn ;
3963: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3967: LD_EXP 45
3971: PPUSH
3972: LD_EXP 46
3976: PPUSH
3977: CALL_OW 250
3981: PPUSH
3982: LD_EXP 46
3986: PPUSH
3987: CALL_OW 251
3991: PPUSH
3992: CALL_OW 111
// wait ( 0 0$1 ) ;
3996: LD_INT 35
3998: PPUSH
3999: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4003: LD_EXP 45
4007: PPUSH
4008: LD_EXP 46
4012: PPUSH
4013: CALL_OW 296
4017: PUSH
4018: LD_INT 6
4020: LESS
4021: IFFALSE 3967
// InGameOff ;
4023: CALL_OW 9
// MoveToHill ;
4027: CALL 10219 0 0
// end ;
4031: PPOPN 1
4033: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4034: LD_INT 0
4036: PPUSH
4037: PPUSH
// traitor = true ;
4038: LD_ADDR_EXP 17
4042: PUSH
4043: LD_INT 1
4045: ST_TO_ADDR
// DialogueOn ;
4046: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4050: LD_EXP 46
4054: PPUSH
4055: LD_STRING DAttack-Pok-1
4057: PPUSH
4058: CALL_OW 88
// DialogueOff ;
4062: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4066: LD_INT 3
4068: PPUSH
4069: LD_INT 6
4071: PPUSH
4072: LD_INT 2
4074: PPUSH
4075: LD_INT 1
4077: PPUSH
4078: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4082: LD_INT 22
4084: PUSH
4085: LD_INT 6
4087: PUSH
4088: EMPTY
4089: LIST
4090: LIST
4091: PUSH
4092: LD_INT 21
4094: PUSH
4095: LD_INT 1
4097: PUSH
4098: EMPTY
4099: LIST
4100: LIST
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PPUSH
4106: CALL_OW 69
4110: PPUSH
4111: LD_EXP 45
4115: PPUSH
4116: CALL_OW 115
// end ;
4120: LD_VAR 0 1
4124: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4125: LD_EXP 46
4129: PPUSH
4130: LD_INT 65
4132: PPUSH
4133: LD_INT 59
4135: PPUSH
4136: CALL_OW 297
4140: PUSH
4141: LD_INT 4
4143: LESS
4144: PUSH
4145: LD_EXP 17
4149: NOT
4150: AND
4151: IFFALSE 4348
4153: GO 4155
4155: DISABLE
// begin InGameOn ;
4156: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4160: LD_INT 55
4162: PPUSH
4163: LD_INT 50
4165: PPUSH
4166: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4170: LD_EXP 45
4174: PPUSH
4175: LD_INT 66
4177: PPUSH
4178: LD_INT 57
4180: PPUSH
4181: CALL_OW 111
// AddComHold ( Burlak ) ;
4185: LD_EXP 45
4189: PPUSH
4190: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4194: LD_EXP 41
4198: PPUSH
4199: LD_INT 59
4201: PPUSH
4202: LD_INT 55
4204: PPUSH
4205: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4209: LD_INT 35
4211: PPUSH
4212: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4216: LD_INT 1
4218: PPUSH
4219: LD_EXP 46
4223: PPUSH
4224: CALL_OW 292
4228: IFFALSE 4209
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4230: LD_EXP 41
4234: PUSH
4235: LD_EXP 46
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PPUSH
4244: CALL_OW 87
// ComStop ( Charles ) ;
4248: LD_EXP 41
4252: PPUSH
4253: CALL_OW 141
// AddComHold ( Charles ) ;
4257: LD_EXP 41
4261: PPUSH
4262: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4266: LD_EXP 41
4270: PPUSH
4271: LD_EXP 46
4275: PPUSH
4276: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4280: LD_EXP 41
4284: PPUSH
4285: LD_STRING D5-Sol1-1
4287: PPUSH
4288: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4292: LD_EXP 46
4296: PPUSH
4297: LD_STRING D5-Pok-1
4299: PPUSH
4300: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4304: LD_INT 1
4306: PPUSH
4307: LD_INT 6
4309: PPUSH
4310: LD_INT 2
4312: PPUSH
4313: LD_INT 1
4315: PPUSH
4316: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4320: LD_INT 1
4322: PPUSH
4323: LD_INT 3
4325: PPUSH
4326: LD_INT 2
4328: PPUSH
4329: LD_INT 1
4331: PPUSH
4332: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4336: LD_EXP 41
4340: PPUSH
4341: LD_STRING D5-Sol1-2
4343: PPUSH
4344: CALL_OW 88
// end ;
4348: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4349: LD_EXP 41
4353: PPUSH
4354: CALL_OW 301
4358: PUSH
4359: LD_EXP 14
4363: AND
4364: IFFALSE 4957
4366: GO 4368
4368: DISABLE
4369: LD_INT 0
4371: PPUSH
// begin goToHill = false ;
4372: LD_ADDR_EXP 14
4376: PUSH
4377: LD_INT 0
4379: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4380: LD_INT 22
4382: PUSH
4383: LD_INT 6
4385: PUSH
4386: EMPTY
4387: LIST
4388: LIST
4389: PUSH
4390: LD_INT 21
4392: PUSH
4393: LD_INT 1
4395: PUSH
4396: EMPTY
4397: LIST
4398: LIST
4399: PUSH
4400: EMPTY
4401: LIST
4402: LIST
4403: PPUSH
4404: CALL_OW 69
4408: PPUSH
4409: CALL_OW 141
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4413: LD_INT 22
4415: PUSH
4416: LD_INT 6
4418: PUSH
4419: EMPTY
4420: LIST
4421: LIST
4422: PUSH
4423: LD_INT 21
4425: PUSH
4426: LD_INT 1
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PUSH
4433: EMPTY
4434: LIST
4435: LIST
4436: PPUSH
4437: CALL_OW 69
4441: PPUSH
4442: CALL_OW 138
// wait ( 0 0$1 ) ;
4446: LD_INT 35
4448: PPUSH
4449: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4453: LD_INT 55
4455: PPUSH
4456: LD_INT 50
4458: PPUSH
4459: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4463: LD_EXP 45
4467: PPUSH
4468: LD_INT 56
4470: PPUSH
4471: LD_INT 56
4473: PPUSH
4474: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4478: LD_INT 22
4480: PUSH
4481: LD_INT 6
4483: PUSH
4484: EMPTY
4485: LIST
4486: LIST
4487: PUSH
4488: LD_INT 21
4490: PUSH
4491: LD_INT 1
4493: PUSH
4494: EMPTY
4495: LIST
4496: LIST
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: PPUSH
4502: CALL_OW 69
4506: PPUSH
4507: LD_INT 56
4509: PPUSH
4510: LD_INT 56
4512: PPUSH
4513: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4517: LD_EXP 45
4521: PPUSH
4522: LD_STRING D5-Bur-2
4524: PPUSH
4525: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4529: LD_EXP 46
4533: PPUSH
4534: LD_STRING D5-Pok-2
4536: PPUSH
4537: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4541: LD_EXP 50
4545: PPUSH
4546: LD_STRING D5-Bel-2
4548: PPUSH
4549: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4553: LD_EXP 46
4557: PPUSH
4558: LD_STRING D5-Pok-3
4560: PPUSH
4561: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4565: LD_EXP 53
4569: PPUSH
4570: CALL_OW 255
4574: PUSH
4575: LD_INT 6
4577: EQUAL
4578: IFFALSE 4592
// Say ( Gnyevko , D5-Gny-3 ) ;
4580: LD_EXP 53
4584: PPUSH
4585: LD_STRING D5-Gny-3
4587: PPUSH
4588: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4592: LD_EXP 45
4596: PPUSH
4597: LD_STRING D5-Bur-3
4599: PPUSH
4600: CALL_OW 88
// interface_hidden = true ;
4604: LD_ADDR_OWVAR 54
4608: PUSH
4609: LD_INT 1
4611: ST_TO_ADDR
// IngameOff ;
4612: CALL_OW 9
// wait ( 0 0$2 ) ;
4616: LD_INT 70
4618: PPUSH
4619: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4623: LD_EXP 45
4627: PPUSH
4628: LD_INT 85
4630: PPUSH
4631: LD_INT 64
4633: PPUSH
4634: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4638: LD_INT 22
4640: PUSH
4641: LD_INT 6
4643: PUSH
4644: EMPTY
4645: LIST
4646: LIST
4647: PUSH
4648: LD_INT 21
4650: PUSH
4651: LD_INT 1
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: PUSH
4658: EMPTY
4659: LIST
4660: LIST
4661: PPUSH
4662: CALL_OW 69
4666: PPUSH
4667: LD_INT 85
4669: PPUSH
4670: LD_INT 64
4672: PPUSH
4673: CALL_OW 111
// interface_hidden = false ;
4677: LD_ADDR_OWVAR 54
4681: PUSH
4682: LD_INT 0
4684: ST_TO_ADDR
// InGameOn ;
4685: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4689: LD_EXP 45
4693: PPUSH
4694: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4698: LD_EXP 46
4702: PPUSH
4703: LD_STRING D6-Pok-1
4705: PPUSH
4706: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4710: LD_EXP 45
4714: PPUSH
4715: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4719: LD_EXP 45
4723: PPUSH
4724: LD_STRING D6-Bur-1
4726: PPUSH
4727: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4731: LD_EXP 45
4735: PPUSH
4736: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4740: LD_EXP 46
4744: PPUSH
4745: LD_STRING D6-Pok-2
4747: PPUSH
4748: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4752: LD_EXP 45
4756: PPUSH
4757: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4761: LD_EXP 50
4765: PPUSH
4766: LD_STRING D6-Bel-2
4768: PPUSH
4769: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4773: LD_EXP 45
4777: PPUSH
4778: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4782: LD_EXP 45
4786: PPUSH
4787: LD_STRING D6-Bur-2
4789: PPUSH
4790: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4794: LD_EXP 45
4798: PPUSH
4799: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4803: LD_EXP 46
4807: PPUSH
4808: LD_STRING D6-Pok-3
4810: PPUSH
4811: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4815: LD_EXP 45
4819: PPUSH
4820: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4824: LD_EXP 54
4828: PPUSH
4829: LD_STRING D6-Kur-3
4831: PPUSH
4832: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4836: LD_EXP 45
4840: PPUSH
4841: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4845: LD_EXP 46
4849: PPUSH
4850: LD_STRING D6-Pok-4
4852: PPUSH
4853: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4857: LD_EXP 45
4861: PPUSH
4862: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4866: LD_EXP 50
4870: PPUSH
4871: LD_STRING D6-Bel-4
4873: PPUSH
4874: CALL_OW 88
// InGameOff ;
4878: CALL_OW 9
// interface_hidden = false ;
4882: LD_ADDR_OWVAR 54
4886: PUSH
4887: LD_INT 0
4889: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4890: LD_EXP 46
4894: PPUSH
4895: LD_INT 23
4897: PPUSH
4898: CALL_OW 115
// wait ( 0 0$5 ) ;
4902: LD_INT 175
4904: PPUSH
4905: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4909: LD_INT 22
4911: PUSH
4912: LD_INT 6
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PUSH
4919: LD_INT 21
4921: PUSH
4922: LD_INT 1
4924: PUSH
4925: EMPTY
4926: LIST
4927: LIST
4928: PUSH
4929: EMPTY
4930: LIST
4931: LIST
4932: PPUSH
4933: CALL_OW 69
4937: PPUSH
4938: LD_INT 23
4940: PPUSH
4941: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4945: LD_INT 1
4947: PPUSH
4948: LD_EXP 53
4952: PPUSH
4953: CALL_OW 471
// end ;
4957: PPOPN 1
4959: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4960: LD_INT 1
4962: PPUSH
4963: LD_EXP 46
4967: PPUSH
4968: CALL_OW 292
4972: PUSH
4973: LD_EXP 41
4977: PPUSH
4978: CALL_OW 301
4982: AND
4983: IFFALSE 5002
4985: GO 4987
4987: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4988: LD_EXP 42
4992: PPUSH
4993: LD_EXP 46
4997: PPUSH
4998: CALL_OW 115
5002: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5003: LD_INT 3
5005: PPUSH
5006: LD_INT 23
5008: PPUSH
5009: CALL_OW 292
5013: IFFALSE 5042
5015: GO 5017
5017: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5018: LD_EXP 46
5022: PPUSH
5023: LD_STRING D7-Pok-1
5025: PPUSH
5026: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5030: LD_EXP 42
5034: PPUSH
5035: LD_STRING D7-FSol1-1
5037: PPUSH
5038: CALL_OW 88
// end ;
5042: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5043: LD_EXP 46
5047: PPUSH
5048: CALL_OW 303
5052: IFFALSE 5584
5054: GO 5056
5056: DISABLE
5057: LD_INT 0
5059: PPUSH
5060: PPUSH
5061: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5062: LD_ADDR_VAR 0 3
5066: PUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 6
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 21
5079: PUSH
5080: LD_INT 1
5082: PUSH
5083: EMPTY
5084: LIST
5085: LIST
5086: PUSH
5087: LD_INT 50
5089: PUSH
5090: EMPTY
5091: LIST
5092: PUSH
5093: EMPTY
5094: LIST
5095: LIST
5096: LIST
5097: PPUSH
5098: CALL_OW 69
5102: PUSH
5103: LD_EXP 50
5107: DIFF
5108: ST_TO_ADDR
// DialogueOn ;
5109: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5113: LD_EXP 50
5117: PPUSH
5118: LD_STRING D7a-Bel-1
5120: PPUSH
5121: CALL_OW 88
// DialogueOff ;
5125: CALL_OW 7
// for i := 1 to ruSolds do
5129: LD_ADDR_VAR 0 1
5133: PUSH
5134: DOUBLE
5135: LD_INT 1
5137: DEC
5138: ST_TO_ADDR
5139: LD_VAR 0 3
5143: PUSH
5144: FOR_TO
5145: IFFALSE 5203
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5147: LD_VAR 0 3
5151: PUSH
5152: LD_VAR 0 1
5156: ARRAY
5157: PPUSH
5158: LD_INT 87
5160: PUSH
5161: LD_VAR 0 1
5165: PLUS
5166: PPUSH
5167: LD_INT 63
5169: PUSH
5170: LD_VAR 0 1
5174: PLUS
5175: PPUSH
5176: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5180: LD_VAR 0 3
5184: PUSH
5185: LD_VAR 0 1
5189: ARRAY
5190: PPUSH
5191: LD_INT 89
5193: PPUSH
5194: LD_INT 67
5196: PPUSH
5197: CALL_OW 178
// end ;
5201: GO 5144
5203: POP
5204: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5205: LD_EXP 50
5209: PPUSH
5210: LD_INT 89
5212: PPUSH
5213: LD_INT 67
5215: PPUSH
5216: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5220: LD_EXP 50
5224: PPUSH
5225: LD_INT 88
5227: PPUSH
5228: LD_INT 66
5230: PPUSH
5231: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5235: LD_EXP 47
5239: PPUSH
5240: LD_STRING D7a-RSol1-1
5242: PPUSH
5243: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5247: LD_EXP 42
5251: PPUSH
5252: LD_STRING D7a-FSol1-1
5254: PPUSH
5255: CALL_OW 88
// wait ( 0 0$12 ) ;
5259: LD_INT 420
5261: PPUSH
5262: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5266: LD_EXP 50
5270: PPUSH
5271: LD_STRING D7b-Bel-1
5273: PPUSH
5274: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5278: LD_EXP 48
5282: PPUSH
5283: LD_STRING D7b-FSol1-1
5285: PPUSH
5286: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5290: LD_EXP 50
5294: PPUSH
5295: LD_STRING D7b-Bel-2
5297: PPUSH
5298: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5302: LD_EXP 47
5306: PPUSH
5307: LD_STRING D7b-RSol1-2
5309: PPUSH
5310: CALL_OW 88
// for unit in ruSolds do
5314: LD_ADDR_VAR 0 2
5318: PUSH
5319: LD_VAR 0 3
5323: PUSH
5324: FOR_IN
5325: IFFALSE 5558
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5327: LD_EXP 45
5331: PPUSH
5332: LD_VAR 0 2
5336: PPUSH
5337: CALL_OW 296
5341: PUSH
5342: LD_INT 7
5344: LESS
5345: IFFALSE 5556
// begin InGameOn ;
5347: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5351: LD_EXP 50
5355: PUSH
5356: LD_EXP 47
5360: PUSH
5361: EMPTY
5362: LIST
5363: LIST
5364: PPUSH
5365: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5369: LD_EXP 45
5373: PPUSH
5374: LD_INT 88
5376: PPUSH
5377: LD_INT 66
5379: PPUSH
5380: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5384: LD_EXP 50
5388: PPUSH
5389: LD_EXP 45
5393: PPUSH
5394: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5398: LD_EXP 45
5402: PPUSH
5403: LD_INT 90
5405: PPUSH
5406: LD_INT 66
5408: PPUSH
5409: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5413: LD_EXP 45
5417: PPUSH
5418: LD_STRING D7b-Bur-3
5420: PPUSH
5421: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5425: LD_EXP 50
5429: PPUSH
5430: LD_STRING D7b-Bel-4
5432: PPUSH
5433: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5437: LD_EXP 45
5441: PPUSH
5442: LD_STRING D7b-Bur-4
5444: PPUSH
5445: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5449: LD_EXP 50
5453: PPUSH
5454: LD_STRING D7b-Bel-5
5456: PPUSH
5457: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5461: LD_EXP 48
5465: PPUSH
5466: LD_STRING D7b-FSol1-5
5468: PPUSH
5469: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5473: LD_EXP 50
5477: PPUSH
5478: LD_STRING D7b-Bel-6
5480: PPUSH
5481: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5485: LD_EXP 45
5489: PPUSH
5490: LD_STRING D7b-Bur-6
5492: PPUSH
5493: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5497: LD_EXP 47
5501: PPUSH
5502: LD_STRING D7b-RSol1-6
5504: PPUSH
5505: CALL_OW 88
// InGameOff ;
5509: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5513: LD_VAR 0 3
5517: PPUSH
5518: LD_INT 3
5520: PPUSH
5521: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5525: LD_EXP 50
5529: PPUSH
5530: LD_INT 3
5532: PPUSH
5533: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5537: LD_STRING M3
5539: PPUSH
5540: CALL_OW 337
// secondAttack = true ;
5544: LD_ADDR_EXP 16
5548: PUSH
5549: LD_INT 1
5551: ST_TO_ADDR
// exit ;
5552: POP
5553: POP
5554: GO 5584
// end ;
5556: GO 5324
5558: POP
5559: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5560: LD_EXP 50
5564: PPUSH
5565: LD_STRING D7b-Bel-3
5567: PPUSH
5568: CALL_OW 88
// InGameOff ;
5572: CALL_OW 9
// belkovWaitForGorky = true ;
5576: LD_ADDR_EXP 15
5580: PUSH
5581: LD_INT 1
5583: ST_TO_ADDR
// end ;
5584: PPOPN 3
5586: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5587: LD_EXP 15
5591: IFFALSE 5901
5593: GO 5595
5595: DISABLE
5596: LD_INT 0
5598: PPUSH
5599: PPUSH
// begin enable ;
5600: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5601: LD_ADDR_VAR 0 2
5605: PUSH
5606: LD_INT 22
5608: PUSH
5609: LD_INT 6
5611: PUSH
5612: EMPTY
5613: LIST
5614: LIST
5615: PUSH
5616: LD_INT 21
5618: PUSH
5619: LD_INT 1
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: PUSH
5626: EMPTY
5627: LIST
5628: LIST
5629: PPUSH
5630: CALL_OW 69
5634: ST_TO_ADDR
// for unit in ruSolds do
5635: LD_ADDR_VAR 0 1
5639: PUSH
5640: LD_VAR 0 2
5644: PUSH
5645: FOR_IN
5646: IFFALSE 5899
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5648: LD_EXP 45
5652: PPUSH
5653: LD_VAR 0 1
5657: PPUSH
5658: CALL_OW 296
5662: PUSH
5663: LD_INT 7
5665: LESS
5666: IFFALSE 5897
// begin belkovWaitForGorky = false ;
5668: LD_ADDR_EXP 15
5672: PUSH
5673: LD_INT 0
5675: ST_TO_ADDR
// InGameOn ;
5676: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5680: LD_EXP 50
5684: PUSH
5685: LD_EXP 47
5689: PUSH
5690: EMPTY
5691: LIST
5692: LIST
5693: PPUSH
5694: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5698: LD_EXP 45
5702: PPUSH
5703: LD_INT 88
5705: PPUSH
5706: LD_INT 66
5708: PPUSH
5709: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5713: LD_EXP 50
5717: PPUSH
5718: LD_EXP 45
5722: PPUSH
5723: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5727: LD_EXP 45
5731: PPUSH
5732: LD_INT 90
5734: PPUSH
5735: LD_INT 66
5737: PPUSH
5738: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5742: LD_EXP 50
5746: PPUSH
5747: LD_STRING D7b-Bel-3a
5749: PPUSH
5750: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5754: LD_EXP 45
5758: PPUSH
5759: LD_STRING D7b-Bur-3
5761: PPUSH
5762: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5766: LD_EXP 50
5770: PPUSH
5771: LD_STRING D7b-Bel-4
5773: PPUSH
5774: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5778: LD_EXP 45
5782: PPUSH
5783: LD_STRING D7b-Bur-4
5785: PPUSH
5786: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5790: LD_EXP 50
5794: PPUSH
5795: LD_STRING D7b-Bel-5
5797: PPUSH
5798: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5802: LD_EXP 48
5806: PPUSH
5807: LD_STRING D7b-FSol1-5
5809: PPUSH
5810: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5814: LD_EXP 50
5818: PPUSH
5819: LD_STRING D7b-Bel-6
5821: PPUSH
5822: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5826: LD_EXP 45
5830: PPUSH
5831: LD_STRING D7b-Bur-6
5833: PPUSH
5834: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5838: LD_EXP 47
5842: PPUSH
5843: LD_STRING D7a-RSol1-6
5845: PPUSH
5846: CALL_OW 88
// InGameOff ;
5850: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5854: LD_VAR 0 2
5858: PPUSH
5859: LD_INT 3
5861: PPUSH
5862: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5866: LD_EXP 50
5870: PPUSH
5871: LD_INT 3
5873: PPUSH
5874: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5878: LD_STRING M3
5880: PPUSH
5881: CALL_OW 337
// secondAttack = true ;
5885: LD_ADDR_EXP 16
5889: PUSH
5890: LD_INT 1
5892: ST_TO_ADDR
// exit ;
5893: POP
5894: POP
5895: GO 5901
// end ;
5897: GO 5645
5899: POP
5900: POP
// end ;
5901: PPOPN 2
5903: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5904: LD_INT 0
5906: PPUSH
5907: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
5908: LD_EXP 42
5912: PPUSH
5913: LD_STRING D8-FSol1-1
5915: PPUSH
5916: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5920: LD_EXP 43
5924: PPUSH
5925: LD_STRING D8-Glad-1
5927: PPUSH
5928: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5932: LD_EXP 45
5936: PPUSH
5937: LD_STRING D8-Bur-1
5939: PPUSH
5940: CALL_OW 88
// secondAttack = false ;
5944: LD_ADDR_EXP 16
5948: PUSH
5949: LD_INT 0
5951: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5952: LD_ADDR_VAR 0 2
5956: PUSH
5957: LD_INT 22
5959: PUSH
5960: LD_INT 3
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 21
5969: PUSH
5970: LD_INT 1
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: EMPTY
5978: LIST
5979: LIST
5980: PPUSH
5981: CALL_OW 69
5985: PPUSH
5986: LD_INT 23
5988: PPUSH
5989: CALL_OW 74
5993: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5994: LD_EXP 44
5998: PPUSH
5999: CALL_OW 122
// wait ( 0 0$1 ) ;
6003: LD_INT 35
6005: PPUSH
6006: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6010: LD_EXP 44
6014: PPUSH
6015: LD_VAR 0 2
6019: PPUSH
6020: CALL_OW 175
// end ;
6024: LD_VAR 0 1
6028: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6029: LD_INT 23
6031: PPUSH
6032: CALL_OW 256
6036: PUSH
6037: LD_INT 350
6039: LESS
6040: PUSH
6041: LD_INT 23
6043: PPUSH
6044: CALL_OW 256
6048: PUSH
6049: LD_INT 250
6051: GREATER
6052: AND
6053: PUSH
6054: LD_INT 20
6056: PPUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 3
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 21
6069: PUSH
6070: LD_INT 1
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PPUSH
6081: CALL_OW 70
6085: PUSH
6086: LD_INT 0
6088: GREATER
6089: AND
6090: PUSH
6091: LD_EXP 23
6095: NOT
6096: AND
6097: IFFALSE 6114
6099: GO 6101
6101: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6102: LD_EXP 42
6106: PPUSH
6107: LD_STRING D8-FSol1-2
6109: PPUSH
6110: CALL_OW 88
6114: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6115: LD_INT 23
6117: PPUSH
6118: CALL_OW 303
6122: PUSH
6123: LD_INT 22
6125: PPUSH
6126: CALL_OW 302
6130: AND
6131: PUSH
6132: LD_EXP 23
6136: NOT
6137: AND
6138: IFFALSE 6208
6140: GO 6142
6142: DISABLE
// begin amRetreat = true ;
6143: LD_ADDR_EXP 23
6147: PUSH
6148: LD_INT 1
6150: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6151: LD_EXP 42
6155: PPUSH
6156: LD_STRING D8-FSol1-2a
6158: PPUSH
6159: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6163: LD_EXP 43
6167: PUSH
6168: LD_EXP 42
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PPUSH
6177: LD_INT 21
6179: PPUSH
6180: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6184: LD_EXP 43
6188: PPUSH
6189: LD_STRING D8-Glad-2
6191: PPUSH
6192: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6196: LD_EXP 45
6200: PPUSH
6201: LD_STRING D8-Bur-2
6203: PPUSH
6204: CALL_OW 88
// end ;
6208: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6209: LD_INT 22
6211: PPUSH
6212: CALL_OW 303
6216: PUSH
6217: LD_INT 23
6219: PPUSH
6220: CALL_OW 302
6224: AND
6225: PUSH
6226: LD_EXP 23
6230: NOT
6231: AND
6232: IFFALSE 6302
6234: GO 6236
6236: DISABLE
// begin amRetreat = true ;
6237: LD_ADDR_EXP 23
6241: PUSH
6242: LD_INT 1
6244: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6245: LD_EXP 42
6249: PPUSH
6250: LD_STRING D8-FSol1-2a
6252: PPUSH
6253: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6257: LD_EXP 43
6261: PUSH
6262: LD_EXP 42
6266: PUSH
6267: EMPTY
6268: LIST
6269: LIST
6270: PPUSH
6271: LD_INT 21
6273: PPUSH
6274: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6278: LD_EXP 43
6282: PPUSH
6283: LD_STRING D8-Glad-2
6285: PPUSH
6286: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6290: LD_EXP 45
6294: PPUSH
6295: LD_STRING D8-Bur-2
6297: PPUSH
6298: CALL_OW 88
// end ;
6302: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6303: LD_INT 23
6305: PPUSH
6306: CALL_OW 256
6310: PUSH
6311: LD_INT 500
6313: LESS
6314: PUSH
6315: LD_OWVAR 67
6319: PUSH
6320: LD_INT 3
6322: EQUAL
6323: AND
6324: PUSH
6325: LD_EXP 23
6329: NOT
6330: AND
6331: IFFALSE 6401
6333: GO 6335
6335: DISABLE
// begin amRetreat = true ;
6336: LD_ADDR_EXP 23
6340: PUSH
6341: LD_INT 1
6343: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6344: LD_EXP 42
6348: PPUSH
6349: LD_STRING D8-FSol1-2a
6351: PPUSH
6352: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6356: LD_EXP 43
6360: PUSH
6361: LD_EXP 42
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PPUSH
6370: LD_INT 21
6372: PPUSH
6373: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6377: LD_EXP 43
6381: PPUSH
6382: LD_STRING D8-Glad-2
6384: PPUSH
6385: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6389: LD_EXP 45
6393: PPUSH
6394: LD_STRING D8-Bur-2
6396: PPUSH
6397: CALL_OW 88
// end ;
6401: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6402: LD_INT 22
6404: PUSH
6405: LD_INT 1
6407: PUSH
6408: EMPTY
6409: LIST
6410: LIST
6411: PUSH
6412: LD_INT 21
6414: PUSH
6415: LD_INT 1
6417: PUSH
6418: EMPTY
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 50
6424: PUSH
6425: EMPTY
6426: LIST
6427: PUSH
6428: EMPTY
6429: LIST
6430: LIST
6431: LIST
6432: PPUSH
6433: CALL_OW 69
6437: PUSH
6438: LD_INT 0
6440: GREATER
6441: IFFALSE 6569
6443: GO 6445
6445: DISABLE
6446: LD_INT 0
6448: PPUSH
// begin enable ;
6449: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6450: LD_ADDR_VAR 0 1
6454: PUSH
6455: LD_INT 21
6457: PPUSH
6458: LD_INT 22
6460: PUSH
6461: LD_INT 1
6463: PUSH
6464: EMPTY
6465: LIST
6466: LIST
6467: PUSH
6468: LD_INT 21
6470: PUSH
6471: LD_INT 1
6473: PUSH
6474: EMPTY
6475: LIST
6476: LIST
6477: PUSH
6478: EMPTY
6479: LIST
6480: LIST
6481: PPUSH
6482: CALL_OW 70
6486: PUSH
6487: FOR_IN
6488: IFFALSE 6567
// begin if unit = Gladstone then
6490: LD_VAR 0 1
6494: PUSH
6495: LD_EXP 43
6499: EQUAL
6500: IFFALSE 6530
// begin gladstoneEscape = true ;
6502: LD_ADDR_EXP 18
6506: PUSH
6507: LD_INT 1
6509: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6510: LD_EXP 43
6514: PPUSH
6515: LD_EXP 29
6519: PUSH
6520: LD_STRING Gladstone
6522: STR
6523: PPUSH
6524: CALL_OW 38
// end else
6528: GO 6556
// begin JohannaEscape = true ;
6530: LD_ADDR_EXP 19
6534: PUSH
6535: LD_INT 1
6537: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6538: LD_EXP 42
6542: PPUSH
6543: LD_EXP 29
6547: PUSH
6548: LD_STRING Johanna
6550: STR
6551: PPUSH
6552: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6556: LD_VAR 0 1
6560: PPUSH
6561: CALL_OW 64
// end ;
6565: GO 6487
6567: POP
6568: POP
// end ;
6569: PPOPN 1
6571: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6572: LD_EXP 43
6576: PPUSH
6577: CALL_OW 301
6581: PUSH
6582: LD_EXP 42
6586: PPUSH
6587: CALL_OW 301
6591: AND
6592: IFFALSE 6609
6594: GO 6596
6596: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6597: LD_EXP 45
6601: PPUSH
6602: LD_STRING D9-Bur-1
6604: PPUSH
6605: CALL_OW 88
6609: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6610: LD_EXP 42
6614: PPUSH
6615: CALL_OW 301
6619: PUSH
6620: LD_EXP 18
6624: AND
6625: PUSH
6626: LD_EXP 19
6630: NOT
6631: AND
6632: IFFALSE 6649
6634: GO 6636
6636: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6637: LD_EXP 45
6641: PPUSH
6642: LD_STRING D9-Bur-1a
6644: PPUSH
6645: CALL_OW 88
6649: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6650: LD_EXP 43
6654: PPUSH
6655: CALL_OW 301
6659: PUSH
6660: LD_EXP 18
6664: NOT
6665: AND
6666: PUSH
6667: LD_EXP 19
6671: AND
6672: IFFALSE 6689
6674: GO 6676
6676: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6677: LD_EXP 45
6681: PPUSH
6682: LD_STRING D9-Bur-1b
6684: PPUSH
6685: CALL_OW 88
6689: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6690: LD_EXP 18
6694: PUSH
6695: LD_EXP 19
6699: AND
6700: IFFALSE 6717
6702: GO 6704
6704: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6705: LD_EXP 45
6709: PPUSH
6710: LD_STRING D9-Bur-1c
6712: PPUSH
6713: CALL_OW 88
6717: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6718: LD_INT 22
6720: PUSH
6721: LD_INT 1
6723: PUSH
6724: EMPTY
6725: LIST
6726: LIST
6727: PUSH
6728: LD_INT 21
6730: PUSH
6731: LD_INT 3
6733: PUSH
6734: EMPTY
6735: LIST
6736: LIST
6737: PUSH
6738: LD_INT 50
6740: PUSH
6741: EMPTY
6742: LIST
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: PPUSH
6749: CALL_OW 69
6753: PUSH
6754: LD_INT 0
6756: EQUAL
6757: IFFALSE 7005
6759: GO 6761
6761: DISABLE
6762: LD_INT 0
6764: PPUSH
6765: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6766: LD_ADDR_VAR 0 1
6770: PUSH
6771: LD_INT 22
6773: PUSH
6774: LD_INT 3
6776: PUSH
6777: EMPTY
6778: LIST
6779: LIST
6780: PUSH
6781: LD_INT 21
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 50
6793: PUSH
6794: EMPTY
6795: LIST
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: LIST
6801: PPUSH
6802: CALL_OW 69
6806: PUSH
6807: LD_EXP 45
6811: PUSH
6812: LD_EXP 53
6816: PUSH
6817: LD_EXP 50
6821: PUSH
6822: EMPTY
6823: LIST
6824: LIST
6825: LIST
6826: DIFF
6827: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6828: LD_ADDR_VAR 0 2
6832: PUSH
6833: LD_VAR 0 1
6837: PPUSH
6838: LD_INT 26
6840: PUSH
6841: LD_INT 1
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: PPUSH
6848: CALL_OW 72
6852: ST_TO_ADDR
// DialogueOn ;
6853: CALL_OW 6
// if IsOK ( Belkov ) then
6857: LD_EXP 50
6861: PPUSH
6862: CALL_OW 302
6866: IFFALSE 6880
// Say ( Belkov , D10-Bel-1 ) ;
6868: LD_EXP 50
6872: PPUSH
6873: LD_STRING D10-Bel-1
6875: PPUSH
6876: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6880: LD_VAR 0 1
6884: PUSH
6885: LD_INT 0
6887: GREATER
6888: PUSH
6889: LD_VAR 0 2
6893: PUSH
6894: LD_INT 0
6896: GREATER
6897: PUSH
6898: LD_EXP 50
6902: PPUSH
6903: CALL_OW 302
6907: OR
6908: AND
6909: IFFALSE 6976
// begin Say ( Burlak , D10-Bur-1 ) ;
6911: LD_EXP 45
6915: PPUSH
6916: LD_STRING D10-Bur-1
6918: PPUSH
6919: CALL_OW 88
// if IsOK ( Belkov ) then
6923: LD_EXP 50
6927: PPUSH
6928: CALL_OW 302
6932: IFFALSE 6948
// Say ( Belkov , D10-Bel-1a ) else
6934: LD_EXP 50
6938: PPUSH
6939: LD_STRING D10-Bel-1a
6941: PPUSH
6942: CALL_OW 88
6946: GO 6964
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6948: LD_VAR 0 2
6952: PUSH
6953: LD_INT 1
6955: ARRAY
6956: PPUSH
6957: LD_STRING D10-RSol1-1
6959: PPUSH
6960: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6964: LD_EXP 45
6968: PPUSH
6969: LD_STRING D10-Bur-2
6971: PPUSH
6972: CALL_OW 88
// end ; DialogueOff ;
6976: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6980: LD_STRING M4a
6982: PPUSH
6983: CALL_OW 337
// evacuationAvailable = true ;
6987: LD_ADDR_EXP 21
6991: PUSH
6992: LD_INT 1
6994: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6995: LD_INT 1
6997: PPUSH
6998: LD_INT 1
7000: PPUSH
7001: CALL_OW 424
// end ;
7005: PPOPN 2
7007: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7008: LD_EXP 21
7012: PUSH
7013: LD_EXP 24
7017: NOT
7018: AND
7019: IFFALSE 7629
7021: GO 7023
7023: DISABLE
7024: LD_INT 0
7026: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7027: LD_EXP 52
7031: PPUSH
7032: LD_INT 22
7034: PPUSH
7035: LD_INT 1
7037: PPUSH
7038: CALL_OW 49
// wait ( 0 0$3 ) ;
7042: LD_INT 105
7044: PPUSH
7045: CALL_OW 67
// jelenaSpawned = true ;
7049: LD_ADDR_EXP 24
7053: PUSH
7054: LD_INT 1
7056: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7057: LD_INT 22
7059: PUSH
7060: LD_INT 3
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 21
7069: PUSH
7070: LD_INT 1
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: LD_INT 50
7079: PUSH
7080: EMPTY
7081: LIST
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: LIST
7087: PPUSH
7088: CALL_OW 69
7092: PPUSH
7093: LD_EXP 52
7097: PPUSH
7098: CALL_OW 74
7102: PPUSH
7103: LD_EXP 52
7107: PPUSH
7108: CALL_OW 296
7112: PUSH
7113: LD_INT 9
7115: LESS
7116: IFFALSE 7120
// exit ;
7118: GO 7629
// DialogueOn ;
7120: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7124: LD_EXP 52
7128: PPUSH
7129: LD_STRING D11b-Kir-1
7131: PPUSH
7132: CALL_OW 94
// if IsOK ( Belkov ) then
7136: LD_EXP 50
7140: PPUSH
7141: CALL_OW 302
7145: IFFALSE 7173
// begin Say ( Belkov , D11b-Bel-1 ) ;
7147: LD_EXP 50
7151: PPUSH
7152: LD_STRING D11b-Bel-1
7154: PPUSH
7155: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7159: LD_EXP 50
7163: PPUSH
7164: LD_STRING D11b-Bel-1a
7166: PPUSH
7167: CALL_OW 94
// end else
7171: GO 7228
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7173: LD_ADDR_VAR 0 1
7177: PUSH
7178: LD_INT 22
7180: PUSH
7181: LD_INT 3
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: PUSH
7188: LD_INT 21
7190: PUSH
7191: LD_INT 1
7193: PUSH
7194: EMPTY
7195: LIST
7196: LIST
7197: PUSH
7198: LD_INT 50
7200: PUSH
7201: EMPTY
7202: LIST
7203: PUSH
7204: EMPTY
7205: LIST
7206: LIST
7207: LIST
7208: PPUSH
7209: CALL_OW 69
7213: PPUSH
7214: LD_STRING D11b-RSol1-1
7216: PPUSH
7217: LD_STRING D11b-RFSol1-1
7219: PPUSH
7220: LD_INT 0
7222: PPUSH
7223: CALL 8006 0 4
7227: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7228: LD_INT 24
7230: PPUSH
7231: LD_INT 22
7233: PUSH
7234: LD_INT 0
7236: PUSH
7237: EMPTY
7238: LIST
7239: LIST
7240: PUSH
7241: LD_INT 25
7243: PUSH
7244: LD_INT 12
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: PUSH
7251: EMPTY
7252: LIST
7253: LIST
7254: PPUSH
7255: CALL_OW 70
7259: PUSH
7260: LD_INT 0
7262: GREATER
7263: IFFALSE 7279
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7265: LD_EXP 52
7269: PPUSH
7270: LD_STRING D11b1-Kir-1
7272: PPUSH
7273: CALL_OW 94
7277: GO 7291
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7279: LD_EXP 52
7283: PPUSH
7284: LD_STRING D11b2-Kir-1
7286: PPUSH
7287: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7291: LD_EXP 6
7295: PUSH
7296: LD_INT 24
7298: PPUSH
7299: LD_INT 22
7301: PUSH
7302: LD_INT 0
7304: PUSH
7305: EMPTY
7306: LIST
7307: LIST
7308: PUSH
7309: LD_INT 25
7311: PUSH
7312: LD_INT 12
7314: PUSH
7315: EMPTY
7316: LIST
7317: LIST
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: PPUSH
7323: CALL_OW 70
7327: PUSH
7328: LD_INT 0
7330: GREATER
7331: AND
7332: IFFALSE 7467
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7334: LD_EXP 45
7338: PPUSH
7339: LD_STRING D11b1-Bur-1
7341: PPUSH
7342: CALL_OW 88
// if IsOk ( Belkov ) then
7346: LD_EXP 50
7350: PPUSH
7351: CALL_OW 302
7355: IFFALSE 7371
// Say ( Belkov , D11b2-Bel-1 ) else
7357: LD_EXP 50
7361: PPUSH
7362: LD_STRING D11b2-Bel-1
7364: PPUSH
7365: CALL_OW 88
7369: GO 7412
// begin if GetSex ( randomSold ) = sex_male then
7371: LD_VAR 0 1
7375: PPUSH
7376: CALL_OW 258
7380: PUSH
7381: LD_INT 1
7383: EQUAL
7384: IFFALSE 7400
// Say ( randomSold , D11b1-RSol1-1 ) else
7386: LD_VAR 0 1
7390: PPUSH
7391: LD_STRING D11b1-RSol1-1
7393: PPUSH
7394: CALL_OW 88
7398: GO 7412
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7400: LD_VAR 0 1
7404: PPUSH
7405: LD_STRING D11b1-RFSol1-1
7407: PPUSH
7408: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7412: LD_INT 22
7414: PUSH
7415: LD_INT 1
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: LD_INT 21
7424: PUSH
7425: LD_INT 1
7427: PUSH
7428: EMPTY
7429: LIST
7430: LIST
7431: PUSH
7432: LD_INT 50
7434: PUSH
7435: EMPTY
7436: LIST
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: PPUSH
7443: CALL_OW 69
7447: PPUSH
7448: LD_STRING D11b1-RSol1-1
7450: PPUSH
7451: LD_STRING D11b1-RFSol1-1
7453: PPUSH
7454: LD_INT 0
7456: PPUSH
7457: CALL 8006 0 4
// DialogueOff ;
7461: CALL_OW 7
// exit ;
7465: GO 7629
// end ; if spotWaterfall then
7467: LD_EXP 7
7471: IFFALSE 7557
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7473: LD_EXP 45
7477: PPUSH
7478: LD_STRING D11b1-Bur-1a
7480: PPUSH
7481: CALL_OW 88
// if IsOk ( Belkov ) then
7485: LD_EXP 50
7489: PPUSH
7490: CALL_OW 302
7494: IFFALSE 7510
// Say ( Belkov , D11b2-Bel-1 ) else
7496: LD_EXP 50
7500: PPUSH
7501: LD_STRING D11b2-Bel-1
7503: PPUSH
7504: CALL_OW 88
7508: GO 7551
// begin if GetSex ( randomSold ) = sex_male then
7510: LD_VAR 0 1
7514: PPUSH
7515: CALL_OW 258
7519: PUSH
7520: LD_INT 1
7522: EQUAL
7523: IFFALSE 7539
// Say ( randomSold , D11b1-RSol1-1 ) else
7525: LD_VAR 0 1
7529: PPUSH
7530: LD_STRING D11b1-RSol1-1
7532: PPUSH
7533: CALL_OW 88
7537: GO 7551
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7539: LD_VAR 0 1
7543: PPUSH
7544: LD_STRING D11b1-RFSol1-1
7546: PPUSH
7547: CALL_OW 88
// end ; DialogueOff ;
7551: CALL_OW 7
// exit ;
7555: GO 7629
// end ; if IsOk ( Belkov ) then
7557: LD_EXP 50
7561: PPUSH
7562: CALL_OW 302
7566: IFFALSE 7582
// Say ( Belkov , D11b1-Bel-1 ) else
7568: LD_EXP 50
7572: PPUSH
7573: LD_STRING D11b1-Bel-1
7575: PPUSH
7576: CALL_OW 88
7580: GO 7623
// begin if GetSex ( randomSold ) = sex_male then
7582: LD_VAR 0 1
7586: PPUSH
7587: CALL_OW 258
7591: PUSH
7592: LD_INT 1
7594: EQUAL
7595: IFFALSE 7611
// Say ( randomSold , D11b1-RSol1-1 ) else
7597: LD_VAR 0 1
7601: PPUSH
7602: LD_STRING D11b1-RSol1-1
7604: PPUSH
7605: CALL_OW 88
7609: GO 7623
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7611: LD_VAR 0 1
7615: PPUSH
7616: LD_STRING D11b1-RFSol1-1
7618: PPUSH
7619: CALL_OW 88
// end ; DialogueOff ;
7623: CALL_OW 7
// exit ;
7627: GO 7629
// end ;
7629: PPOPN 1
7631: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7632: LD_INT 3
7634: PPUSH
7635: LD_EXP 52
7639: PPUSH
7640: CALL_OW 292
7644: PUSH
7645: LD_EXP 24
7649: AND
7650: IFFALSE 7886
7652: GO 7654
7654: DISABLE
7655: LD_INT 0
7657: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7658: LD_EXP 52
7662: PPUSH
7663: LD_INT 3
7665: PPUSH
7666: CALL_OW 235
// jelenaSaved = true ;
7670: LD_ADDR_EXP 20
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7678: LD_EXP 52
7682: PPUSH
7683: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7687: LD_ADDR_VAR 0 1
7691: PUSH
7692: LD_INT 22
7694: PUSH
7695: LD_INT 3
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PUSH
7702: LD_INT 21
7704: PUSH
7705: LD_INT 1
7707: PUSH
7708: EMPTY
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 50
7714: PUSH
7715: EMPTY
7716: LIST
7717: PUSH
7718: EMPTY
7719: LIST
7720: LIST
7721: LIST
7722: PPUSH
7723: CALL_OW 69
7727: PUSH
7728: LD_EXP 52
7732: DIFF
7733: PPUSH
7734: LD_EXP 52
7738: PPUSH
7739: CALL_OW 74
7743: ST_TO_ADDR
// DialogueOn ;
7744: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7748: LD_EXP 52
7752: PPUSH
7753: LD_STRING D11a-Kir-1
7755: PPUSH
7756: CALL_OW 88
// if nearUnit = Belkov then
7760: LD_VAR 0 1
7764: PUSH
7765: LD_EXP 50
7769: EQUAL
7770: IFFALSE 7810
// begin Say ( Belkov , D11a-Bel-1 ) ;
7772: LD_EXP 50
7776: PPUSH
7777: LD_STRING D11a-Bel-1
7779: PPUSH
7780: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7784: LD_EXP 52
7788: PPUSH
7789: LD_STRING D11a-Kir-2
7791: PPUSH
7792: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7796: LD_EXP 50
7800: PPUSH
7801: LD_STRING D11a-Bel-2
7803: PPUSH
7804: CALL_OW 88
// end else
7808: GO 7851
// begin if GetSex ( nearUnit ) = sex_male then
7810: LD_VAR 0 1
7814: PPUSH
7815: CALL_OW 258
7819: PUSH
7820: LD_INT 1
7822: EQUAL
7823: IFFALSE 7839
// Say ( nearUnit , D11a-RSol1-2 ) else
7825: LD_VAR 0 1
7829: PPUSH
7830: LD_STRING D11a-RSol1-2
7832: PPUSH
7833: CALL_OW 88
7837: GO 7851
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7839: LD_VAR 0 1
7843: PPUSH
7844: LD_STRING D11a-RFSol1-2
7846: PPUSH
7847: CALL_OW 88
// end ; DialogueOff ;
7851: CALL_OW 7
// wait ( 0 0$5 ) ;
7855: LD_INT 175
7857: PPUSH
7858: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7862: LD_EXP 52
7866: PPUSH
7867: LD_STRING D11c-Kir-1
7869: PPUSH
7870: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7874: LD_EXP 45
7878: PPUSH
7879: LD_STRING D11c-Bur-1
7881: PPUSH
7882: CALL_OW 88
// end ;
7886: PPOPN 1
7888: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7889: LD_EXP 21
7893: PUSH
7894: LD_INT 1
7896: PPUSH
7897: LD_INT 22
7899: PUSH
7900: LD_INT 3
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: PUSH
7907: LD_INT 21
7909: PUSH
7910: LD_INT 1
7912: PUSH
7913: EMPTY
7914: LIST
7915: LIST
7916: PUSH
7917: EMPTY
7918: LIST
7919: LIST
7920: PPUSH
7921: CALL_OW 70
7925: PUSH
7926: LD_INT 0
7928: GREATER
7929: AND
7930: IFFALSE 7942
7932: GO 7934
7934: DISABLE
// begin Query ( QExit1 ) ;
7935: LD_STRING QExit1
7937: PPUSH
7938: CALL_OW 97
// end ; end_of_file
7942: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7943: LD_INT 0
7945: PPUSH
7946: PPUSH
// if exist_mode then
7947: LD_VAR 0 2
7951: IFFALSE 7976
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7953: LD_ADDR_VAR 0 4
7957: PUSH
7958: LD_EXP 30
7962: PUSH
7963: LD_VAR 0 1
7967: STR
7968: PPUSH
7969: CALL_OW 34
7973: ST_TO_ADDR
7974: GO 7991
// unit := NewCharacter ( ident ) ;
7976: LD_ADDR_VAR 0 4
7980: PUSH
7981: LD_VAR 0 1
7985: PPUSH
7986: CALL_OW 25
7990: ST_TO_ADDR
// result := unit ;
7991: LD_ADDR_VAR 0 3
7995: PUSH
7996: LD_VAR 0 4
8000: ST_TO_ADDR
// end ;
8001: LD_VAR 0 3
8005: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8006: LD_INT 0
8008: PPUSH
8009: PPUSH
8010: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8011: LD_ADDR_VAR 0 1
8015: PUSH
8016: LD_VAR 0 1
8020: PUSH
8021: LD_EXP 45
8025: PUSH
8026: LD_EXP 53
8030: PUSH
8031: LD_EXP 50
8035: PUSH
8036: LD_EXP 52
8040: PUSH
8041: EMPTY
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: DIFF
8047: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8048: LD_ADDR_VAR 0 7
8052: PUSH
8053: LD_VAR 0 1
8057: PUSH
8058: LD_INT 1
8060: PPUSH
8061: LD_VAR 0 1
8065: PPUSH
8066: CALL_OW 12
8070: ARRAY
8071: ST_TO_ADDR
// if radio then
8072: LD_VAR 0 4
8076: IFFALSE 8125
// begin if GetSex ( speaker ) = sex_male then
8078: LD_VAR 0 7
8082: PPUSH
8083: CALL_OW 258
8087: PUSH
8088: LD_INT 1
8090: EQUAL
8091: IFFALSE 8109
// SayRadio ( speaker , dialogMID ) else
8093: LD_VAR 0 7
8097: PPUSH
8098: LD_VAR 0 2
8102: PPUSH
8103: CALL_OW 94
8107: GO 8123
// SayRadio ( speaker , dialogFID ) ;
8109: LD_VAR 0 7
8113: PPUSH
8114: LD_VAR 0 3
8118: PPUSH
8119: CALL_OW 94
// end else
8123: GO 8170
// begin if GetSex ( speaker ) = sex_male then
8125: LD_VAR 0 7
8129: PPUSH
8130: CALL_OW 258
8134: PUSH
8135: LD_INT 1
8137: EQUAL
8138: IFFALSE 8156
// Say ( speaker , dialogMID ) else
8140: LD_VAR 0 7
8144: PPUSH
8145: LD_VAR 0 2
8149: PPUSH
8150: CALL_OW 88
8154: GO 8170
// Say ( speaker , dialogFID ) ;
8156: LD_VAR 0 7
8160: PPUSH
8161: LD_VAR 0 3
8165: PPUSH
8166: CALL_OW 88
// end ; result := speaker ;
8170: LD_ADDR_VAR 0 5
8174: PUSH
8175: LD_VAR 0 7
8179: ST_TO_ADDR
// end ;
8180: LD_VAR 0 5
8184: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8185: LD_INT 0
8187: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 255
8197: PUSH
8198: LD_OWVAR 2
8202: EQUAL
8203: PUSH
8204: LD_VAR 0 1
8208: PPUSH
8209: CALL_OW 302
8213: AND
8214: IFFALSE 8236
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8216: LD_VAR 0 1
8220: PPUSH
8221: LD_EXP 29
8225: PUSH
8226: LD_VAR 0 2
8230: STR
8231: PPUSH
8232: CALL_OW 38
// end ;
8236: LD_VAR 0 3
8240: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8241: LD_INT 0
8243: PPUSH
8244: PPUSH
8245: PPUSH
// resultCharactersToSave = [ ] ;
8246: LD_ADDR_VAR 0 5
8250: PUSH
8251: EMPTY
8252: ST_TO_ADDR
// for unit in characters do
8253: LD_ADDR_VAR 0 4
8257: PUSH
8258: LD_VAR 0 1
8262: PUSH
8263: FOR_IN
8264: IFFALSE 8312
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8266: LD_VAR 0 4
8270: PPUSH
8271: CALL_OW 255
8275: PUSH
8276: LD_OWVAR 2
8280: EQUAL
8281: PUSH
8282: LD_VAR 0 4
8286: PPUSH
8287: CALL_OW 302
8291: AND
8292: IFFALSE 8310
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8294: LD_ADDR_VAR 0 5
8298: PUSH
8299: LD_VAR 0 5
8303: PUSH
8304: LD_VAR 0 4
8308: ADD
8309: ST_TO_ADDR
8310: GO 8263
8312: POP
8313: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8314: LD_VAR 0 5
8318: PPUSH
8319: LD_EXP 29
8323: PUSH
8324: LD_VAR 0 2
8328: STR
8329: PPUSH
8330: CALL_OW 38
// end ;
8334: LD_VAR 0 3
8338: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8339: LD_INT 0
8341: PPUSH
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
8350: PPUSH
8351: PPUSH
8352: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8353: LD_VAR 0 1
8357: PPUSH
8358: CALL_OW 302
8362: NOT
8363: PUSH
8364: LD_VAR 0 4
8368: PUSH
8369: LD_INT 1
8371: EQUAL
8372: OR
8373: PUSH
8374: LD_VAR 0 2
8378: PPUSH
8379: LD_VAR 0 3
8383: PPUSH
8384: CALL_OW 488
8388: NOT
8389: OR
8390: PUSH
8391: LD_VAR 0 1
8395: PPUSH
8396: LD_VAR 0 2
8400: PPUSH
8401: LD_VAR 0 3
8405: PPUSH
8406: CALL_OW 297
8410: PUSH
8411: LD_VAR 0 4
8415: GREATEREQUAL
8416: OR
8417: PUSH
8418: LD_VAR 0 5
8422: PUSH
8423: LD_INT 1
8425: PUSH
8426: LD_INT 0
8428: PUSH
8429: EMPTY
8430: LIST
8431: LIST
8432: IN
8433: NOT
8434: OR
8435: IFFALSE 8439
// exit ;
8437: GO 9996
// attempts = 0 ;
8439: LD_ADDR_VAR 0 17
8443: PUSH
8444: LD_INT 0
8446: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8447: LD_ADDR_VAR 0 7
8451: PUSH
8452: EMPTY
8453: ST_TO_ADDR
// list_coords = [ ] ;
8454: LD_ADDR_VAR 0 8
8458: PUSH
8459: EMPTY
8460: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8461: LD_ADDR_VAR 0 9
8465: PUSH
8466: LD_VAR 0 2
8470: PPUSH
8471: LD_VAR 0 3
8475: PPUSH
8476: LD_VAR 0 1
8480: PPUSH
8481: CALL_OW 250
8485: PPUSH
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 251
8495: PPUSH
8496: CALL 10001 0 4
8500: ST_TO_ADDR
// if attempts = 0 then
8501: LD_VAR 0 17
8505: PUSH
8506: LD_INT 0
8508: EQUAL
8509: IFFALSE 8617
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8511: LD_ADDR_VAR 0 10
8515: PUSH
8516: LD_VAR 0 9
8520: PUSH
8521: LD_VAR 0 9
8525: PUSH
8526: LD_INT 1
8528: PLUS
8529: PUSH
8530: LD_VAR 0 9
8534: PUSH
8535: LD_INT 1
8537: MINUS
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: LIST
8543: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8544: LD_VAR 0 10
8548: PUSH
8549: LD_INT 2
8551: ARRAY
8552: PUSH
8553: LD_INT 6
8555: EQUAL
8556: IFFALSE 8579
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8558: LD_ADDR_VAR 0 10
8562: PUSH
8563: LD_VAR 0 10
8567: PPUSH
8568: LD_INT 2
8570: PPUSH
8571: LD_INT 0
8573: PPUSH
8574: CALL_OW 1
8578: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8579: LD_VAR 0 10
8583: PUSH
8584: LD_INT 3
8586: ARRAY
8587: PUSH
8588: LD_INT 1
8590: NEG
8591: EQUAL
8592: IFFALSE 8615
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8594: LD_ADDR_VAR 0 10
8598: PUSH
8599: LD_VAR 0 10
8603: PPUSH
8604: LD_INT 3
8606: PPUSH
8607: LD_INT 5
8609: PPUSH
8610: CALL_OW 1
8614: ST_TO_ADDR
// end else
8615: GO 8654
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8617: LD_ADDR_VAR 0 10
8621: PUSH
8622: LD_INT 0
8624: PUSH
8625: LD_INT 1
8627: PUSH
8628: LD_INT 2
8630: PUSH
8631: LD_INT 3
8633: PUSH
8634: LD_INT 4
8636: PUSH
8637: LD_INT 5
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: PUSH
8648: LD_VAR 0 9
8652: DIFF
8653: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8654: LD_ADDR_VAR 0 14
8658: PUSH
8659: DOUBLE
8660: LD_INT 1
8662: DEC
8663: ST_TO_ADDR
8664: LD_VAR 0 10
8668: PUSH
8669: LD_INT 0
8671: PLUS
8672: PUSH
8673: FOR_TO
8674: IFFALSE 8996
// case dir_list [ c ] of 0 :
8676: LD_VAR 0 10
8680: PUSH
8681: LD_VAR 0 14
8685: ARRAY
8686: PUSH
8687: LD_INT 0
8689: DOUBLE
8690: EQUAL
8691: IFTRUE 8695
8693: GO 8736
8695: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8696: LD_ADDR_VAR 0 8
8700: PUSH
8701: LD_VAR 0 8
8705: PPUSH
8706: LD_INT 1
8708: PPUSH
8709: LD_VAR 0 2
8713: PUSH
8714: LD_VAR 0 3
8718: PUSH
8719: LD_VAR 0 4
8723: MINUS
8724: PUSH
8725: EMPTY
8726: LIST
8727: LIST
8728: PPUSH
8729: CALL_OW 2
8733: ST_TO_ADDR
8734: GO 8994
8736: LD_INT 1
8738: DOUBLE
8739: EQUAL
8740: IFTRUE 8744
8742: GO 8785
8744: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8745: LD_ADDR_VAR 0 8
8749: PUSH
8750: LD_VAR 0 8
8754: PPUSH
8755: LD_INT 1
8757: PPUSH
8758: LD_VAR 0 2
8762: PUSH
8763: LD_VAR 0 4
8767: PLUS
8768: PUSH
8769: LD_VAR 0 3
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PPUSH
8778: CALL_OW 2
8782: ST_TO_ADDR
8783: GO 8994
8785: LD_INT 2
8787: DOUBLE
8788: EQUAL
8789: IFTRUE 8793
8791: GO 8840
8793: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8794: LD_ADDR_VAR 0 8
8798: PUSH
8799: LD_VAR 0 8
8803: PPUSH
8804: LD_INT 1
8806: PPUSH
8807: LD_VAR 0 2
8811: PUSH
8812: LD_VAR 0 4
8816: PLUS
8817: PUSH
8818: LD_VAR 0 3
8822: PUSH
8823: LD_VAR 0 4
8827: PLUS
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PPUSH
8833: CALL_OW 2
8837: ST_TO_ADDR
8838: GO 8994
8840: LD_INT 3
8842: DOUBLE
8843: EQUAL
8844: IFTRUE 8848
8846: GO 8889
8848: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8849: LD_ADDR_VAR 0 8
8853: PUSH
8854: LD_VAR 0 8
8858: PPUSH
8859: LD_INT 1
8861: PPUSH
8862: LD_VAR 0 2
8866: PUSH
8867: LD_VAR 0 3
8871: PUSH
8872: LD_VAR 0 4
8876: PLUS
8877: PUSH
8878: EMPTY
8879: LIST
8880: LIST
8881: PPUSH
8882: CALL_OW 2
8886: ST_TO_ADDR
8887: GO 8994
8889: LD_INT 4
8891: DOUBLE
8892: EQUAL
8893: IFTRUE 8897
8895: GO 8938
8897: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8898: LD_ADDR_VAR 0 8
8902: PUSH
8903: LD_VAR 0 8
8907: PPUSH
8908: LD_INT 1
8910: PPUSH
8911: LD_VAR 0 2
8915: PUSH
8916: LD_VAR 0 4
8920: MINUS
8921: PUSH
8922: LD_VAR 0 3
8926: PUSH
8927: EMPTY
8928: LIST
8929: LIST
8930: PPUSH
8931: CALL_OW 2
8935: ST_TO_ADDR
8936: GO 8994
8938: LD_INT 5
8940: DOUBLE
8941: EQUAL
8942: IFTRUE 8946
8944: GO 8993
8946: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8947: LD_ADDR_VAR 0 8
8951: PUSH
8952: LD_VAR 0 8
8956: PPUSH
8957: LD_INT 1
8959: PPUSH
8960: LD_VAR 0 2
8964: PUSH
8965: LD_VAR 0 4
8969: MINUS
8970: PUSH
8971: LD_VAR 0 3
8975: PUSH
8976: LD_VAR 0 4
8980: MINUS
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PPUSH
8986: CALL_OW 2
8990: ST_TO_ADDR
8991: GO 8994
8993: POP
8994: GO 8673
8996: POP
8997: POP
// if dist < 30 then
8998: LD_VAR 0 4
9002: PUSH
9003: LD_INT 30
9005: LESS
9006: IFFALSE 9018
// c = 1 else
9008: LD_ADDR_VAR 0 14
9012: PUSH
9013: LD_INT 1
9015: ST_TO_ADDR
9016: GO 9026
// c = 2 ;
9018: LD_ADDR_VAR 0 14
9022: PUSH
9023: LD_INT 2
9025: ST_TO_ADDR
// b = 1 ;
9026: LD_ADDR_VAR 0 11
9030: PUSH
9031: LD_INT 1
9033: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9034: LD_VAR 0 11
9038: PUSH
9039: LD_VAR 0 4
9043: PUSH
9044: LD_INT 1
9046: MINUS
9047: LESSEQUAL
9048: IFFALSE 9476
// begin if 0 in dir_list and 1 in dir_list then
9050: LD_INT 0
9052: PUSH
9053: LD_VAR 0 10
9057: IN
9058: PUSH
9059: LD_INT 1
9061: PUSH
9062: LD_VAR 0 10
9066: IN
9067: AND
9068: IFFALSE 9120
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9070: LD_ADDR_VAR 0 8
9074: PUSH
9075: LD_VAR 0 8
9079: PPUSH
9080: LD_INT 1
9082: PPUSH
9083: LD_VAR 0 2
9087: PUSH
9088: LD_VAR 0 11
9092: PLUS
9093: PUSH
9094: LD_VAR 0 3
9098: PUSH
9099: LD_VAR 0 4
9103: MINUS
9104: PUSH
9105: LD_VAR 0 11
9109: PLUS
9110: PUSH
9111: EMPTY
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL_OW 2
9119: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9120: LD_INT 1
9122: PUSH
9123: LD_VAR 0 10
9127: IN
9128: PUSH
9129: LD_INT 2
9131: PUSH
9132: LD_VAR 0 10
9136: IN
9137: AND
9138: IFFALSE 9184
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9140: LD_ADDR_VAR 0 8
9144: PUSH
9145: LD_VAR 0 8
9149: PPUSH
9150: LD_INT 1
9152: PPUSH
9153: LD_VAR 0 2
9157: PUSH
9158: LD_VAR 0 4
9162: PLUS
9163: PUSH
9164: LD_VAR 0 3
9168: PUSH
9169: LD_VAR 0 11
9173: PLUS
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PPUSH
9179: CALL_OW 2
9183: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9184: LD_INT 2
9186: PUSH
9187: LD_VAR 0 10
9191: IN
9192: PUSH
9193: LD_INT 3
9195: PUSH
9196: LD_VAR 0 10
9200: IN
9201: AND
9202: IFFALSE 9254
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9204: LD_ADDR_VAR 0 8
9208: PUSH
9209: LD_VAR 0 8
9213: PPUSH
9214: LD_INT 1
9216: PPUSH
9217: LD_VAR 0 2
9221: PUSH
9222: LD_VAR 0 4
9226: PLUS
9227: PUSH
9228: LD_VAR 0 11
9232: MINUS
9233: PUSH
9234: LD_VAR 0 3
9238: PUSH
9239: LD_VAR 0 4
9243: PLUS
9244: PUSH
9245: EMPTY
9246: LIST
9247: LIST
9248: PPUSH
9249: CALL_OW 2
9253: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9254: LD_INT 3
9256: PUSH
9257: LD_VAR 0 10
9261: IN
9262: PUSH
9263: LD_INT 4
9265: PUSH
9266: LD_VAR 0 10
9270: IN
9271: AND
9272: IFFALSE 9324
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9274: LD_ADDR_VAR 0 8
9278: PUSH
9279: LD_VAR 0 8
9283: PPUSH
9284: LD_INT 1
9286: PPUSH
9287: LD_VAR 0 2
9291: PUSH
9292: LD_VAR 0 11
9296: MINUS
9297: PUSH
9298: LD_VAR 0 3
9302: PUSH
9303: LD_VAR 0 4
9307: PLUS
9308: PUSH
9309: LD_VAR 0 11
9313: MINUS
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PPUSH
9319: CALL_OW 2
9323: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9324: LD_INT 4
9326: PUSH
9327: LD_VAR 0 10
9331: IN
9332: PUSH
9333: LD_INT 5
9335: PUSH
9336: LD_VAR 0 10
9340: IN
9341: AND
9342: IFFALSE 9388
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9344: LD_ADDR_VAR 0 8
9348: PUSH
9349: LD_VAR 0 8
9353: PPUSH
9354: LD_INT 1
9356: PPUSH
9357: LD_VAR 0 2
9361: PUSH
9362: LD_VAR 0 4
9366: MINUS
9367: PUSH
9368: LD_VAR 0 3
9372: PUSH
9373: LD_VAR 0 11
9377: MINUS
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: PPUSH
9383: CALL_OW 2
9387: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9388: LD_INT 5
9390: PUSH
9391: LD_VAR 0 10
9395: IN
9396: PUSH
9397: LD_INT 0
9399: PUSH
9400: LD_VAR 0 10
9404: IN
9405: AND
9406: IFFALSE 9458
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9408: LD_ADDR_VAR 0 8
9412: PUSH
9413: LD_VAR 0 8
9417: PPUSH
9418: LD_INT 1
9420: PPUSH
9421: LD_VAR 0 2
9425: PUSH
9426: LD_VAR 0 4
9430: MINUS
9431: PUSH
9432: LD_VAR 0 11
9436: PLUS
9437: PUSH
9438: LD_VAR 0 3
9442: PUSH
9443: LD_VAR 0 4
9447: MINUS
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: PPUSH
9453: CALL_OW 2
9457: ST_TO_ADDR
// b = b + c end ;
9458: LD_ADDR_VAR 0 11
9462: PUSH
9463: LD_VAR 0 11
9467: PUSH
9468: LD_VAR 0 14
9472: PLUS
9473: ST_TO_ADDR
9474: GO 9034
// if list_coords = 0 then
9476: LD_VAR 0 8
9480: PUSH
9481: LD_INT 0
9483: EQUAL
9484: IFFALSE 9488
// exit ;
9486: GO 9996
// repeat min_dist = 5000 ;
9488: LD_ADDR_VAR 0 12
9492: PUSH
9493: LD_INT 5000
9495: ST_TO_ADDR
// for b in list_coords do
9496: LD_ADDR_VAR 0 11
9500: PUSH
9501: LD_VAR 0 8
9505: PUSH
9506: FOR_IN
9507: IFFALSE 9566
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9509: LD_ADDR_VAR 0 13
9513: PUSH
9514: LD_VAR 0 1
9518: PPUSH
9519: LD_VAR 0 11
9523: PUSH
9524: LD_INT 1
9526: ARRAY
9527: PPUSH
9528: LD_VAR 0 11
9532: PUSH
9533: LD_INT 2
9535: ARRAY
9536: PPUSH
9537: CALL_OW 297
9541: ST_TO_ADDR
// if temp_dist < min_dist then
9542: LD_VAR 0 13
9546: PUSH
9547: LD_VAR 0 12
9551: LESS
9552: IFFALSE 9564
// min_dist = temp_dist ;
9554: LD_ADDR_VAR 0 12
9558: PUSH
9559: LD_VAR 0 13
9563: ST_TO_ADDR
// end ;
9564: GO 9506
9566: POP
9567: POP
// c = 0 ;
9568: LD_ADDR_VAR 0 14
9572: PUSH
9573: LD_INT 0
9575: ST_TO_ADDR
// repeat c = c + 1 ;
9576: LD_ADDR_VAR 0 14
9580: PUSH
9581: LD_VAR 0 14
9585: PUSH
9586: LD_INT 1
9588: PLUS
9589: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9590: LD_VAR 0 1
9594: PPUSH
9595: LD_VAR 0 8
9599: PUSH
9600: LD_VAR 0 14
9604: ARRAY
9605: PUSH
9606: LD_INT 1
9608: ARRAY
9609: PPUSH
9610: LD_VAR 0 8
9614: PUSH
9615: LD_VAR 0 14
9619: ARRAY
9620: PUSH
9621: LD_INT 2
9623: ARRAY
9624: PPUSH
9625: CALL_OW 297
9629: PUSH
9630: LD_VAR 0 12
9634: EQUAL
9635: IFFALSE 9700
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9637: LD_ADDR_VAR 0 7
9641: PUSH
9642: LD_VAR 0 7
9646: PPUSH
9647: LD_INT 1
9649: PPUSH
9650: LD_VAR 0 8
9654: PUSH
9655: LD_VAR 0 14
9659: ARRAY
9660: PPUSH
9661: CALL_OW 2
9665: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9666: LD_ADDR_VAR 0 8
9670: PUSH
9671: LD_VAR 0 8
9675: PPUSH
9676: LD_VAR 0 14
9680: PPUSH
9681: CALL_OW 3
9685: ST_TO_ADDR
// c = c - 1 ;
9686: LD_ADDR_VAR 0 14
9690: PUSH
9691: LD_VAR 0 14
9695: PUSH
9696: LD_INT 1
9698: MINUS
9699: ST_TO_ADDR
// end ; until c = list_coords ;
9700: LD_VAR 0 14
9704: PUSH
9705: LD_VAR 0 8
9709: EQUAL
9710: IFFALSE 9576
// c = 0 ;
9712: LD_ADDR_VAR 0 14
9716: PUSH
9717: LD_INT 0
9719: ST_TO_ADDR
// if list_nearest > 0 then
9720: LD_VAR 0 7
9724: PUSH
9725: LD_INT 0
9727: GREATER
9728: IFFALSE 9870
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9730: LD_ADDR_VAR 0 15
9734: PUSH
9735: LD_INT 1
9737: PPUSH
9738: LD_VAR 0 7
9742: PPUSH
9743: CALL_OW 12
9747: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9748: LD_ADDR_VAR 0 16
9752: PUSH
9753: LD_VAR 0 7
9757: PUSH
9758: LD_VAR 0 15
9762: ARRAY
9763: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9764: LD_VAR 0 16
9768: PUSH
9769: LD_INT 1
9771: ARRAY
9772: PPUSH
9773: LD_VAR 0 16
9777: PUSH
9778: LD_INT 2
9780: ARRAY
9781: PPUSH
9782: CALL_OW 488
9786: PUSH
9787: LD_INT 0
9789: GREATER
9790: PUSH
9791: LD_VAR 0 16
9795: PUSH
9796: LD_INT 1
9798: ARRAY
9799: PPUSH
9800: LD_VAR 0 16
9804: PUSH
9805: LD_INT 2
9807: ARRAY
9808: PPUSH
9809: CALL_OW 428
9813: PUSH
9814: LD_INT 0
9816: EQUAL
9817: AND
9818: IFFALSE 9830
// c = 1 else
9820: LD_ADDR_VAR 0 14
9824: PUSH
9825: LD_INT 1
9827: ST_TO_ADDR
9828: GO 9850
// list_nearest = Delete ( list_nearest , rand_num ) ;
9830: LD_ADDR_VAR 0 7
9834: PUSH
9835: LD_VAR 0 7
9839: PPUSH
9840: LD_VAR 0 15
9844: PPUSH
9845: CALL_OW 3
9849: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9850: LD_VAR 0 14
9854: PUSH
9855: LD_INT 1
9857: EQUAL
9858: PUSH
9859: LD_VAR 0 7
9863: PUSH
9864: LD_INT 0
9866: EQUAL
9867: OR
9868: IFFALSE 9730
// end ; until c = 1 or list_coords = 0 ;
9870: LD_VAR 0 14
9874: PUSH
9875: LD_INT 1
9877: EQUAL
9878: PUSH
9879: LD_VAR 0 8
9883: PUSH
9884: LD_INT 0
9886: EQUAL
9887: OR
9888: IFFALSE 9488
// attempts = attempts + 1 ;
9890: LD_ADDR_VAR 0 17
9894: PUSH
9895: LD_VAR 0 17
9899: PUSH
9900: LD_INT 1
9902: PLUS
9903: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9904: LD_VAR 0 14
9908: PUSH
9909: LD_INT 1
9911: EQUAL
9912: PUSH
9913: LD_VAR 0 17
9917: PUSH
9918: LD_INT 1
9920: GREATER
9921: OR
9922: IFFALSE 8447
// if c = 1 then
9924: LD_VAR 0 14
9928: PUSH
9929: LD_INT 1
9931: EQUAL
9932: IFFALSE 9996
// if add then
9934: LD_VAR 0 5
9938: IFFALSE 9969
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_VAR 0 16
9949: PUSH
9950: LD_INT 1
9952: ARRAY
9953: PPUSH
9954: LD_VAR 0 16
9958: PUSH
9959: LD_INT 2
9961: ARRAY
9962: PPUSH
9963: CALL_OW 171
9967: GO 9996
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9969: LD_VAR 0 1
9973: PPUSH
9974: LD_VAR 0 16
9978: PUSH
9979: LD_INT 1
9981: ARRAY
9982: PPUSH
9983: LD_VAR 0 16
9987: PUSH
9988: LD_INT 2
9990: ARRAY
9991: PPUSH
9992: CALL_OW 111
// end ;
9996: LD_VAR 0 6
10000: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10001: LD_INT 0
10003: PPUSH
10004: PPUSH
10005: PPUSH
10006: PPUSH
10007: PPUSH
10008: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10009: LD_VAR 0 1
10013: PPUSH
10014: LD_VAR 0 2
10018: PPUSH
10019: CALL_OW 488
10023: NOT
10024: PUSH
10025: LD_VAR 0 3
10029: PPUSH
10030: LD_VAR 0 4
10034: PPUSH
10035: CALL_OW 488
10039: NOT
10040: OR
10041: IFFALSE 10054
// begin result = - 1 ;
10043: LD_ADDR_VAR 0 5
10047: PUSH
10048: LD_INT 1
10050: NEG
10051: ST_TO_ADDR
// exit ;
10052: GO 10214
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10054: LD_ADDR_VAR 0 6
10058: PUSH
10059: LD_VAR 0 1
10063: PPUSH
10064: LD_VAR 0 2
10068: PPUSH
10069: LD_VAR 0 3
10073: PPUSH
10074: LD_VAR 0 4
10078: PPUSH
10079: CALL_OW 298
10083: ST_TO_ADDR
// dist_2 = 99999 ;
10084: LD_ADDR_VAR 0 7
10088: PUSH
10089: LD_INT 99999
10091: ST_TO_ADDR
// for b = 0 to 5 do
10092: LD_ADDR_VAR 0 8
10096: PUSH
10097: DOUBLE
10098: LD_INT 0
10100: DEC
10101: ST_TO_ADDR
10102: LD_INT 5
10104: PUSH
10105: FOR_TO
10106: IFFALSE 10202
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10108: LD_ADDR_VAR 0 9
10112: PUSH
10113: LD_VAR 0 1
10117: PPUSH
10118: LD_VAR 0 8
10122: PPUSH
10123: LD_VAR 0 6
10127: PPUSH
10128: CALL_OW 272
10132: PPUSH
10133: LD_VAR 0 2
10137: PPUSH
10138: LD_VAR 0 8
10142: PPUSH
10143: LD_VAR 0 6
10147: PPUSH
10148: CALL_OW 273
10152: PPUSH
10153: LD_VAR 0 3
10157: PPUSH
10158: LD_VAR 0 4
10162: PPUSH
10163: CALL_OW 298
10167: ST_TO_ADDR
// if temp_dist < dist_2 then
10168: LD_VAR 0 9
10172: PUSH
10173: LD_VAR 0 7
10177: LESS
10178: IFFALSE 10200
// begin dist_2 = temp_dist ;
10180: LD_ADDR_VAR 0 7
10184: PUSH
10185: LD_VAR 0 9
10189: ST_TO_ADDR
// dir = b ;
10190: LD_ADDR_VAR 0 10
10194: PUSH
10195: LD_VAR 0 8
10199: ST_TO_ADDR
// end ; end ;
10200: GO 10105
10202: POP
10203: POP
// result = dir ;
10204: LD_ADDR_VAR 0 5
10208: PUSH
10209: LD_VAR 0 10
10213: ST_TO_ADDR
// end ;
10214: LD_VAR 0 5
10218: RET
// export function MoveToHill ; begin
10219: LD_INT 0
10221: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10222: LD_EXP 46
10226: PPUSH
10227: LD_INT 65
10229: PPUSH
10230: LD_INT 59
10232: PPUSH
10233: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10237: LD_EXP 46
10241: PPUSH
10242: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10246: LD_EXP 47
10250: PPUSH
10251: LD_INT 65
10253: PPUSH
10254: LD_INT 58
10256: PPUSH
10257: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10261: LD_EXP 47
10265: PPUSH
10266: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10270: LD_EXP 48
10274: PPUSH
10275: LD_INT 64
10277: PPUSH
10278: LD_INT 57
10280: PPUSH
10281: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10285: LD_EXP 48
10289: PPUSH
10290: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10294: LD_EXP 49
10298: PPUSH
10299: LD_INT 64
10301: PPUSH
10302: LD_INT 56
10304: PPUSH
10305: CALL_OW 111
// AddComCrawl ( Balei ) ;
10309: LD_EXP 49
10313: PPUSH
10314: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10318: LD_EXP 50
10322: PPUSH
10323: LD_INT 63
10325: PPUSH
10326: LD_INT 55
10328: PPUSH
10329: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10333: LD_EXP 50
10337: PPUSH
10338: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10342: LD_EXP 51
10346: PPUSH
10347: LD_INT 66
10349: PPUSH
10350: LD_INT 58
10352: PPUSH
10353: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10357: LD_EXP 51
10361: PPUSH
10362: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10366: LD_EXP 53
10370: PPUSH
10371: CALL_OW 255
10375: PUSH
10376: LD_INT 6
10378: EQUAL
10379: PUSH
10380: LD_EXP 11
10384: AND
10385: IFFALSE 10411
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10387: LD_EXP 53
10391: PPUSH
10392: LD_INT 63
10394: PPUSH
10395: LD_INT 54
10397: PPUSH
10398: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10402: LD_EXP 53
10406: PPUSH
10407: CALL_OW 197
// end ; end ; end_of_file
10411: LD_VAR 0 1
10415: RET
// export function BurlakDying ; begin
10416: LD_INT 0
10418: PPUSH
// YouLost ( Burlak ) ;
10419: LD_STRING Burlak
10421: PPUSH
10422: CALL_OW 104
// end ;
10426: LD_VAR 0 1
10430: RET
// every 0 0$1 trigger kirovSolds = 0 do
10431: LD_EXP 55
10435: PUSH
10436: LD_INT 0
10438: EQUAL
10439: IFFALSE 10451
10441: GO 10443
10443: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10444: LD_STRING KirovSoldsDie
10446: PPUSH
10447: CALL_OW 104
10451: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10452: LD_EXP 21
10456: PUSH
10457: LD_INT 1
10459: PPUSH
10460: LD_INT 22
10462: PUSH
10463: LD_INT 3
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: PUSH
10470: LD_INT 21
10472: PUSH
10473: LD_INT 1
10475: PUSH
10476: EMPTY
10477: LIST
10478: LIST
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 71
10488: PUSH
10489: LD_INT 0
10491: EQUAL
10492: AND
10493: IFFALSE 10772
10495: GO 10497
10497: DISABLE
10498: LD_INT 0
10500: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
10501: LD_EXP 52
10505: PPUSH
10506: CALL_OW 302
10510: PUSH
10511: LD_EXP 52
10515: PPUSH
10516: CALL_OW 255
10520: PUSH
10521: LD_INT 8
10523: EQUAL
10524: AND
10525: PUSH
10526: LD_EXP 53
10530: PPUSH
10531: CALL_OW 302
10535: PUSH
10536: LD_EXP 53
10540: PPUSH
10541: CALL_OW 255
10545: PUSH
10546: LD_INT 8
10548: EQUAL
10549: AND
10550: OR
10551: IFFALSE 10683
// begin case Query ( QExit2 ) of 1 :
10553: LD_STRING QExit2
10555: PPUSH
10556: CALL_OW 97
10560: PUSH
10561: LD_INT 1
10563: DOUBLE
10564: EQUAL
10565: IFTRUE 10569
10567: GO 10661
10569: POP
// begin if IsOk ( Belkov ) then
10570: LD_EXP 50
10574: PPUSH
10575: CALL_OW 302
10579: IFFALSE 10595
// Say ( Belkov , D12-Bel-1 ) else
10581: LD_EXP 50
10585: PPUSH
10586: LD_STRING D12-Bel-1
10588: PPUSH
10589: CALL_OW 88
10593: GO 10655
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10595: LD_INT 22
10597: PUSH
10598: LD_INT 3
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PUSH
10605: LD_INT 21
10607: PUSH
10608: LD_INT 1
10610: PUSH
10611: EMPTY
10612: LIST
10613: LIST
10614: PUSH
10615: LD_INT 50
10617: PUSH
10618: EMPTY
10619: LIST
10620: PUSH
10621: LD_INT 26
10623: PUSH
10624: LD_INT 1
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: PPUSH
10637: CALL_OW 69
10641: PPUSH
10642: LD_STRING D12-RSol1-1
10644: PPUSH
10645: LD_STRING 
10647: PPUSH
10648: LD_INT 0
10650: PPUSH
10651: CALL 8006 0 4
// FinishMission ;
10655: CALL 10775 0 0
// end ; 2 :
10659: GO 10681
10661: LD_INT 2
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10669
10667: GO 10680
10669: POP
// begin wait ( 0 0$5 ) ;
10670: LD_INT 175
10672: PPUSH
10673: CALL_OW 67
// enable ;
10677: ENABLE
// end ; end ;
10678: GO 10681
10680: POP
// end else
10681: GO 10772
// begin if IsOk ( Belkov ) then
10683: LD_EXP 50
10687: PPUSH
10688: CALL_OW 302
10692: IFFALSE 10708
// Say ( Belkov , D12-Bel-1 ) else
10694: LD_EXP 50
10698: PPUSH
10699: LD_STRING D12-Bel-1
10701: PPUSH
10702: CALL_OW 88
10706: GO 10768
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10708: LD_INT 22
10710: PUSH
10711: LD_INT 3
10713: PUSH
10714: EMPTY
10715: LIST
10716: LIST
10717: PUSH
10718: LD_INT 21
10720: PUSH
10721: LD_INT 1
10723: PUSH
10724: EMPTY
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 50
10730: PUSH
10731: EMPTY
10732: LIST
10733: PUSH
10734: LD_INT 26
10736: PUSH
10737: LD_INT 1
10739: PUSH
10740: EMPTY
10741: LIST
10742: LIST
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: PPUSH
10750: CALL_OW 69
10754: PPUSH
10755: LD_STRING D12-RSol1-1
10757: PPUSH
10758: LD_STRING 
10760: PPUSH
10761: LD_INT 0
10763: PPUSH
10764: CALL 8006 0 4
// FinishMission ;
10768: CALL 10775 0 0
// end ; end ;
10772: PPOPN 1
10774: END
// function FinishMission ; begin
10775: LD_INT 0
10777: PPUSH
// SetRewards ;
10778: CALL 10799 0 0
// SavePlayerCharacters ;
10782: CALL 11150 0 0
// SaveGlobalVariables ;
10786: CALL 11280 0 0
// YouWin ;
10790: CALL_OW 103
// end ;
10794: LD_VAR 0 1
10798: RET
// function SetRewards ; begin
10799: LD_INT 0
10801: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10802: LD_EXP 18
10806: NOT
10807: PUSH
10808: LD_EXP 19
10812: NOT
10813: AND
10814: IFFALSE 10826
// AddMedal ( NoEscape , 1 ) ;
10816: LD_STRING NoEscape
10818: PPUSH
10819: LD_INT 1
10821: PPUSH
10822: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10826: LD_EXP 18
10830: PUSH
10831: LD_EXP 19
10835: NOT
10836: AND
10837: IFFALSE 10850
// AddMedal ( NoEscape , - 1 ) ;
10839: LD_STRING NoEscape
10841: PPUSH
10842: LD_INT 1
10844: NEG
10845: PPUSH
10846: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10850: LD_EXP 18
10854: NOT
10855: PUSH
10856: LD_EXP 19
10860: AND
10861: IFFALSE 10874
// AddMedal ( NoEscape , - 2 ) ;
10863: LD_STRING NoEscape
10865: PPUSH
10866: LD_INT 2
10868: NEG
10869: PPUSH
10870: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10874: LD_EXP 18
10878: PUSH
10879: LD_EXP 19
10883: AND
10884: IFFALSE 10897
// AddMedal ( NoEscape , - 3 ) ;
10886: LD_STRING NoEscape
10888: PPUSH
10889: LD_INT 3
10891: NEG
10892: PPUSH
10893: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10897: LD_EXP 11
10901: PUSH
10902: LD_EXP 53
10906: PPUSH
10907: CALL_OW 302
10911: AND
10912: PUSH
10913: LD_EXP 20
10917: AND
10918: PUSH
10919: LD_EXP 52
10923: PPUSH
10924: CALL_OW 302
10928: AND
10929: IFFALSE 10941
// AddMedal ( Gnyevko , 1 ) ;
10931: LD_STRING Gnyevko
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10941: LD_EXP 11
10945: NOT
10946: PUSH
10947: LD_EXP 20
10951: AND
10952: PUSH
10953: LD_EXP 52
10957: PPUSH
10958: CALL_OW 302
10962: AND
10963: IFFALSE 10976
// AddMedal ( Gnyevko , - 1 ) ;
10965: LD_STRING Gnyevko
10967: PPUSH
10968: LD_INT 1
10970: NEG
10971: PPUSH
10972: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10976: LD_EXP 11
10980: PUSH
10981: LD_EXP 20
10985: NOT
10986: PUSH
10987: LD_EXP 53
10991: PPUSH
10992: CALL_OW 302
10996: NOT
10997: OR
10998: PUSH
10999: LD_EXP 52
11003: PPUSH
11004: CALL_OW 302
11008: NOT
11009: OR
11010: AND
11011: IFFALSE 11024
// AddMedal ( Gnyevko , - 2 ) ;
11013: LD_STRING Gnyevko
11015: PPUSH
11016: LD_INT 2
11018: NEG
11019: PPUSH
11020: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11024: LD_EXP 11
11028: NOT
11029: PUSH
11030: LD_EXP 20
11034: NOT
11035: AND
11036: PUSH
11037: LD_EXP 53
11041: PPUSH
11042: CALL_OW 302
11046: NOT
11047: PUSH
11048: LD_EXP 52
11052: PPUSH
11053: CALL_OW 302
11057: NOT
11058: AND
11059: OR
11060: IFFALSE 11073
// AddMedal ( Gnyevko , - 3 ) ;
11062: LD_STRING Gnyevko
11064: PPUSH
11065: LD_INT 3
11067: NEG
11068: PPUSH
11069: CALL_OW 101
// if lostComradesCounter = 0 then
11073: LD_EXP 22
11077: PUSH
11078: LD_INT 0
11080: EQUAL
11081: IFFALSE 11095
// AddMedal ( NoLosses , 1 ) else
11083: LD_STRING NoLosses
11085: PPUSH
11086: LD_INT 1
11088: PPUSH
11089: CALL_OW 101
11093: GO 11105
// AddMedal ( NoLosses , 0 ) ;
11095: LD_STRING NoLosses
11097: PPUSH
11098: LD_INT 0
11100: PPUSH
11101: CALL_OW 101
// GiveMedals ( Main ) ;
11105: LD_STRING Main
11107: PPUSH
11108: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11112: LD_INT 22
11114: PUSH
11115: LD_INT 3
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 21
11124: PUSH
11125: LD_INT 1
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: PUSH
11132: EMPTY
11133: LIST
11134: LIST
11135: PPUSH
11136: CALL_OW 69
11140: PPUSH
11141: CALL_OW 43
// end ;
11145: LD_VAR 0 1
11149: RET
// function SavePlayerCharacters ; var others ; begin
11150: LD_INT 0
11152: PPUSH
11153: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
11154: LD_EXP 45
11158: PPUSH
11159: LD_STRING Burlak
11161: PPUSH
11162: CALL 8185 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
11166: LD_EXP 53
11170: PPUSH
11171: LD_STRING Gnyevko
11173: PPUSH
11174: CALL 8185 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
11178: LD_EXP 50
11182: PPUSH
11183: LD_STRING Belkov
11185: PPUSH
11186: CALL 8185 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
11190: LD_EXP 52
11194: PPUSH
11195: LD_STRING Kirilenkova
11197: PPUSH
11198: CALL 8185 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
11202: LD_ADDR_VAR 0 2
11206: PUSH
11207: LD_INT 22
11209: PUSH
11210: LD_INT 3
11212: PUSH
11213: EMPTY
11214: LIST
11215: LIST
11216: PUSH
11217: LD_INT 21
11219: PUSH
11220: LD_INT 1
11222: PUSH
11223: EMPTY
11224: LIST
11225: LIST
11226: PUSH
11227: EMPTY
11228: LIST
11229: LIST
11230: PPUSH
11231: CALL_OW 69
11235: PUSH
11236: LD_EXP 45
11240: PUSH
11241: LD_EXP 53
11245: PUSH
11246: LD_EXP 50
11250: PUSH
11251: LD_EXP 52
11255: PUSH
11256: EMPTY
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: DIFF
11262: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
11263: LD_VAR 0 2
11267: PPUSH
11268: LD_STRING other_survivors
11270: PPUSH
11271: CALL 8241 0 2
// end ;
11275: LD_VAR 0 1
11279: RET
// function SaveGlobalVariables ; begin
11280: LD_INT 0
11282: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
11283: LD_EXP 1
11287: PPUSH
11288: LD_STRING 01_GladstoneStatus
11290: PPUSH
11291: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
11295: LD_EXP 2
11299: PPUSH
11300: LD_STRING 01_JohannaStatus
11302: PPUSH
11303: CALL_OW 39
// end ; end_of_file
11307: LD_VAR 0 1
11311: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
11312: LD_INT 0
11314: PPUSH
11315: PPUSH
11316: PPUSH
// uc_side = 1 ;
11317: LD_ADDR_OWVAR 20
11321: PUSH
11322: LD_INT 1
11324: ST_TO_ADDR
// hc_class := 1 ;
11325: LD_ADDR_OWVAR 28
11329: PUSH
11330: LD_INT 1
11332: ST_TO_ADDR
// hc_sex := sex_male ;
11333: LD_ADDR_OWVAR 27
11337: PUSH
11338: LD_INT 1
11340: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11341: LD_ADDR_OWVAR 33
11345: PUSH
11346: LD_STRING AmGalRemake
11348: ST_TO_ADDR
// hc_face_number := 1 ;
11349: LD_ADDR_OWVAR 34
11353: PUSH
11354: LD_INT 1
11356: ST_TO_ADDR
// hc_name := Charles Brown ;
11357: LD_ADDR_OWVAR 26
11361: PUSH
11362: LD_STRING Charles Brown
11364: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11365: LD_ADDR_OWVAR 29
11369: PUSH
11370: LD_INT 12
11372: PUSH
11373: LD_INT 11
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11380: LD_ADDR_OWVAR 31
11384: PUSH
11385: LD_INT 1
11387: PUSH
11388: LD_INT 0
11390: PUSH
11391: LD_INT 1
11393: PUSH
11394: LD_INT 1
11396: PUSH
11397: EMPTY
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: ST_TO_ADDR
// Charles = CreateHuman ;
11403: LD_ADDR_EXP 41
11407: PUSH
11408: CALL_OW 44
11412: ST_TO_ADDR
// hc_class := 1 ;
11413: LD_ADDR_OWVAR 28
11417: PUSH
11418: LD_INT 1
11420: ST_TO_ADDR
// hc_sex := sex_female ;
11421: LD_ADDR_OWVAR 27
11425: PUSH
11426: LD_INT 2
11428: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11429: LD_ADDR_OWVAR 33
11433: PUSH
11434: LD_STRING AmGalRemake
11436: ST_TO_ADDR
// hc_face_number := 2 ;
11437: LD_ADDR_OWVAR 34
11441: PUSH
11442: LD_INT 2
11444: ST_TO_ADDR
// hc_name := Johanna Holland ;
11445: LD_ADDR_OWVAR 26
11449: PUSH
11450: LD_STRING Johanna Holland
11452: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11453: LD_ADDR_OWVAR 29
11457: PUSH
11458: LD_INT 12
11460: PUSH
11461: LD_INT 11
11463: PUSH
11464: EMPTY
11465: LIST
11466: LIST
11467: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11468: LD_ADDR_OWVAR 31
11472: PUSH
11473: LD_EXP 35
11477: PUSH
11478: LD_INT 0
11480: PPUSH
11481: LD_INT 2
11483: PPUSH
11484: CALL_OW 12
11488: PUSH
11489: LD_INT 0
11491: PPUSH
11492: LD_INT 2
11494: PPUSH
11495: CALL_OW 12
11499: PUSH
11500: LD_INT 0
11502: PPUSH
11503: LD_INT 2
11505: PPUSH
11506: CALL_OW 12
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: ST_TO_ADDR
// Johanna = CreateHuman ;
11517: LD_ADDR_EXP 42
11521: PUSH
11522: CALL_OW 44
11526: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11527: LD_EXP 42
11531: PPUSH
11532: LD_INT 19
11534: PPUSH
11535: LD_INT 0
11537: PPUSH
11538: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11542: LD_EXP 42
11546: PPUSH
11547: LD_INT 23
11549: PPUSH
11550: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11554: LD_ADDR_EXP 43
11558: PUSH
11559: LD_STRING Gladstone
11561: PPUSH
11562: LD_INT 0
11564: PPUSH
11565: CALL 7943 0 2
11569: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
11570: LD_EXP 43
11574: PPUSH
11575: LD_INT 22
11577: PPUSH
11578: CALL_OW 52
// amApemans = [ ] ;
11582: LD_ADDR_EXP 44
11586: PUSH
11587: EMPTY
11588: ST_TO_ADDR
// for i := 1 to amApeAmount do
11589: LD_ADDR_VAR 0 2
11593: PUSH
11594: DOUBLE
11595: LD_INT 1
11597: DEC
11598: ST_TO_ADDR
11599: LD_EXP 34
11603: PUSH
11604: FOR_TO
11605: IFFALSE 11720
// begin hc_class := class_apeman ;
11607: LD_ADDR_OWVAR 28
11611: PUSH
11612: LD_INT 12
11614: ST_TO_ADDR
// hc_gallery :=  ;
11615: LD_ADDR_OWVAR 33
11619: PUSH
11620: LD_STRING 
11622: ST_TO_ADDR
// hc_name :=  ;
11623: LD_ADDR_OWVAR 26
11627: PUSH
11628: LD_STRING 
11630: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11631: LD_ADDR_OWVAR 31
11635: PUSH
11636: LD_EXP 35
11640: PUSH
11641: LD_INT 0
11643: PPUSH
11644: LD_INT 2
11646: PPUSH
11647: CALL_OW 12
11651: PUSH
11652: LD_INT 0
11654: PPUSH
11655: LD_INT 2
11657: PPUSH
11658: CALL_OW 12
11662: PUSH
11663: LD_INT 0
11665: PPUSH
11666: LD_INT 2
11668: PPUSH
11669: CALL_OW 12
11673: PUSH
11674: EMPTY
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: ST_TO_ADDR
// ape = CreateHuman ;
11680: LD_ADDR_VAR 0 3
11684: PUSH
11685: CALL_OW 44
11689: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11690: LD_VAR 0 3
11694: PPUSH
11695: LD_INT 22
11697: PPUSH
11698: CALL_OW 52
// amApemans = amApemans ^ ape ;
11702: LD_ADDR_EXP 44
11706: PUSH
11707: LD_EXP 44
11711: PUSH
11712: LD_VAR 0 3
11716: ADD
11717: ST_TO_ADDR
// end ;
11718: GO 11604
11720: POP
11721: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11722: LD_INT 23
11724: PPUSH
11725: LD_EXP 32
11729: PPUSH
11730: CALL_OW 234
// end ; end_of_file
11734: LD_VAR 0 1
11738: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11739: LD_INT 0
11741: PPUSH
// PrepareHero ;
11742: CALL 11767 0 0
// PreparePokryshkinTeams ;
11746: CALL 11861 0 0
// PrepareJelena ;
11750: CALL 12126 0 0
// PrepareGnyevko ;
11754: CALL 12158 0 0
// PrepareKurin ;
11758: CALL 11829 0 0
// end ;
11762: LD_VAR 0 1
11766: RET
// function PrepareHero ; begin
11767: LD_INT 0
11769: PPUSH
// uc_side = 3 ;
11770: LD_ADDR_OWVAR 20
11774: PUSH
11775: LD_INT 3
11777: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11778: LD_ADDR_EXP 45
11782: PUSH
11783: LD_STRING Burlak
11785: PPUSH
11786: LD_INT 0
11788: PPUSH
11789: CALL 7943 0 2
11793: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11794: LD_EXP 45
11798: PPUSH
11799: LD_EXP 36
11803: PUSH
11804: LD_INT 1
11806: ARRAY
11807: PPUSH
11808: LD_EXP 36
11812: PUSH
11813: LD_INT 2
11815: ARRAY
11816: PPUSH
11817: LD_INT 1
11819: PPUSH
11820: CALL_OW 48
// end ;
11824: LD_VAR 0 1
11828: RET
// function PrepareKurin ; begin
11829: LD_INT 0
11831: PPUSH
// uc_side = 6 ;
11832: LD_ADDR_OWVAR 20
11836: PUSH
11837: LD_INT 6
11839: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11840: LD_ADDR_EXP 54
11844: PUSH
11845: LD_STRING Kurin
11847: PPUSH
11848: LD_INT 0
11850: PPUSH
11851: CALL 7943 0 2
11855: ST_TO_ADDR
// end ;
11856: LD_VAR 0 1
11860: RET
// function PreparePokryshkinTeams ; begin
11861: LD_INT 0
11863: PPUSH
// uc_side = 6 ;
11864: LD_ADDR_OWVAR 20
11868: PUSH
11869: LD_INT 6
11871: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11872: LD_ADDR_EXP 46
11876: PUSH
11877: LD_STRING Pokryshkin
11879: PPUSH
11880: LD_INT 0
11882: PPUSH
11883: CALL 7943 0 2
11887: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11888: LD_ADDR_EXP 47
11892: PUSH
11893: LD_STRING Saseda
11895: PPUSH
11896: LD_INT 0
11898: PPUSH
11899: CALL 7943 0 2
11903: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11904: LD_ADDR_EXP 48
11908: PUSH
11909: LD_STRING Jaworska
11911: PPUSH
11912: LD_INT 0
11914: PPUSH
11915: CALL 7943 0 2
11919: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11920: LD_ADDR_EXP 49
11924: PUSH
11925: LD_STRING Balei
11927: PPUSH
11928: LD_INT 0
11930: PPUSH
11931: CALL 7943 0 2
11935: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11936: LD_ADDR_EXP 50
11940: PUSH
11941: LD_STRING Belkov
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL 7943 0 2
11951: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
11952: LD_EXP 46
11956: PPUSH
11957: LD_INT 25
11959: PPUSH
11960: LD_INT 0
11962: PPUSH
11963: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11967: LD_EXP 47
11971: PPUSH
11972: LD_INT 17
11974: PPUSH
11975: LD_INT 0
11977: PPUSH
11978: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11982: LD_EXP 48
11986: PPUSH
11987: LD_INT 17
11989: PPUSH
11990: LD_INT 0
11992: PPUSH
11993: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11997: LD_EXP 49
12001: PPUSH
12002: LD_INT 17
12004: PPUSH
12005: LD_INT 0
12007: PPUSH
12008: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12012: LD_EXP 50
12016: PPUSH
12017: LD_INT 17
12019: PPUSH
12020: LD_INT 0
12022: PPUSH
12023: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12027: LD_ADDR_EXP 55
12031: PUSH
12032: LD_EXP 46
12036: PUSH
12037: LD_EXP 47
12041: PUSH
12042: LD_EXP 49
12046: PUSH
12047: LD_EXP 50
12051: PUSH
12052: LD_EXP 48
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: ST_TO_ADDR
// if Difficulty < 3 then
12064: LD_OWVAR 67
12068: PUSH
12069: LD_INT 3
12071: LESS
12072: IFFALSE 12121
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
12074: LD_ADDR_EXP 51
12078: PUSH
12079: LD_STRING Jaunzeme
12081: PPUSH
12082: LD_INT 0
12084: PPUSH
12085: CALL 7943 0 2
12089: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12090: LD_EXP 51
12094: PPUSH
12095: LD_INT 26
12097: PPUSH
12098: LD_INT 0
12100: PPUSH
12101: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12105: LD_ADDR_EXP 55
12109: PUSH
12110: LD_EXP 55
12114: PUSH
12115: LD_EXP 51
12119: ADD
12120: ST_TO_ADDR
// end ; end ;
12121: LD_VAR 0 1
12125: RET
// function PrepareJelena ; begin
12126: LD_INT 0
12128: PPUSH
// uc_side = 8 ;
12129: LD_ADDR_OWVAR 20
12133: PUSH
12134: LD_INT 8
12136: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
12137: LD_ADDR_EXP 52
12141: PUSH
12142: LD_STRING Kirilenkova
12144: PPUSH
12145: LD_INT 0
12147: PPUSH
12148: CALL 7943 0 2
12152: ST_TO_ADDR
// end ;
12153: LD_VAR 0 1
12157: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
12158: LD_INT 0
12160: PPUSH
12161: PPUSH
12162: PPUSH
12163: PPUSH
// uc_side = 8 ;
12164: LD_ADDR_OWVAR 20
12168: PUSH
12169: LD_INT 8
12171: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
12172: LD_ADDR_EXP 53
12176: PUSH
12177: LD_STRING Gnyevko
12179: PPUSH
12180: LD_INT 0
12182: PPUSH
12183: CALL 7943 0 2
12187: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
12188: LD_ADDR_VAR 0 4
12192: PUSH
12193: LD_EXP 37
12197: PUSH
12198: LD_INT 1
12200: PPUSH
12201: LD_EXP 37
12205: PPUSH
12206: CALL_OW 12
12210: ARRAY
12211: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
12212: LD_EXP 53
12216: PPUSH
12217: LD_VAR 0 4
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: LD_VAR 0 4
12230: PUSH
12231: LD_INT 2
12233: ARRAY
12234: PPUSH
12235: LD_INT 0
12237: PPUSH
12238: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
12242: LD_EXP 53
12246: PPUSH
12247: LD_EXP 38
12251: PPUSH
12252: CALL_OW 234
// ComHold ( Gnyevko ) ;
12256: LD_EXP 53
12260: PPUSH
12261: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
12265: LD_ADDR_VAR 0 3
12269: PUSH
12270: DOUBLE
12271: LD_INT 1
12273: DEC
12274: ST_TO_ADDR
12275: LD_EXP 26
12279: PUSH
12280: LD_INT 1
12282: ARRAY
12283: PUSH
12284: LD_INT 3
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: LD_INT 1
12292: PUSH
12293: EMPTY
12294: LIST
12295: LIST
12296: LIST
12297: PUSH
12298: LD_OWVAR 67
12302: ARRAY
12303: MINUS
12304: PUSH
12305: FOR_TO
12306: IFFALSE 12436
// begin uc_side = 0 ;
12308: LD_ADDR_OWVAR 20
12312: PUSH
12313: LD_INT 0
12315: ST_TO_ADDR
// uc_nation = nation_nature ;
12316: LD_ADDR_OWVAR 21
12320: PUSH
12321: LD_INT 0
12323: ST_TO_ADDR
// hc_class = class_apeman ;
12324: LD_ADDR_OWVAR 28
12328: PUSH
12329: LD_INT 12
12331: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12332: LD_ADDR_OWVAR 31
12336: PUSH
12337: LD_EXP 27
12341: PUSH
12342: LD_INT 1
12344: ARRAY
12345: PUSH
12346: LD_EXP 27
12350: PUSH
12351: LD_INT 2
12353: ARRAY
12354: PUSH
12355: LD_EXP 27
12359: PUSH
12360: LD_INT 3
12362: ARRAY
12363: PUSH
12364: LD_EXP 27
12368: PUSH
12369: LD_INT 4
12371: ARRAY
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12379: LD_ADDR_OWVAR 35
12383: PUSH
12384: LD_EXP 33
12388: ST_TO_ADDR
// un = CreateHuman ;
12389: LD_ADDR_VAR 0 2
12393: PUSH
12394: CALL_OW 44
12398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12399: LD_VAR 0 2
12403: PPUSH
12404: LD_EXP 53
12408: PPUSH
12409: CALL_OW 250
12413: PPUSH
12414: LD_EXP 53
12418: PPUSH
12419: CALL_OW 251
12423: PPUSH
12424: LD_INT 8
12426: PPUSH
12427: LD_INT 0
12429: PPUSH
12430: CALL_OW 50
// end ;
12434: GO 12305
12436: POP
12437: POP
// end ; end_of_file
12438: LD_VAR 0 1
12442: RET
// export function PrepareNature ; var i , un ; begin
12443: LD_INT 0
12445: PPUSH
12446: PPUSH
12447: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12448: LD_ADDR_VAR 0 2
12452: PUSH
12453: DOUBLE
12454: LD_INT 1
12456: DEC
12457: ST_TO_ADDR
12458: LD_EXP 26
12462: PUSH
12463: LD_INT 1
12465: ARRAY
12466: PUSH
12467: FOR_TO
12468: IFFALSE 12578
// begin uc_side = 0 ;
12470: LD_ADDR_OWVAR 20
12474: PUSH
12475: LD_INT 0
12477: ST_TO_ADDR
// uc_nation = nation_nature ;
12478: LD_ADDR_OWVAR 21
12482: PUSH
12483: LD_INT 0
12485: ST_TO_ADDR
// hc_class = class_apeman ;
12486: LD_ADDR_OWVAR 28
12490: PUSH
12491: LD_INT 12
12493: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12494: LD_ADDR_OWVAR 31
12498: PUSH
12499: LD_EXP 27
12503: PUSH
12504: LD_INT 1
12506: ARRAY
12507: PUSH
12508: LD_EXP 27
12512: PUSH
12513: LD_INT 2
12515: ARRAY
12516: PUSH
12517: LD_EXP 27
12521: PUSH
12522: LD_INT 3
12524: ARRAY
12525: PUSH
12526: LD_EXP 27
12530: PUSH
12531: LD_INT 4
12533: ARRAY
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12541: LD_ADDR_OWVAR 35
12545: PUSH
12546: LD_EXP 33
12550: ST_TO_ADDR
// un = CreateHuman ;
12551: LD_ADDR_VAR 0 3
12555: PUSH
12556: CALL_OW 44
12560: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
12561: LD_VAR 0 3
12565: PPUSH
12566: LD_INT 16
12568: PPUSH
12569: LD_INT 0
12571: PPUSH
12572: CALL_OW 49
// end ;
12576: GO 12467
12578: POP
12579: POP
// for i := 1 to animalsAmount [ 2 ] do
12580: LD_ADDR_VAR 0 2
12584: PUSH
12585: DOUBLE
12586: LD_INT 1
12588: DEC
12589: ST_TO_ADDR
12590: LD_EXP 26
12594: PUSH
12595: LD_INT 2
12597: ARRAY
12598: PUSH
12599: FOR_TO
12600: IFFALSE 12710
// begin uc_side = 0 ;
12602: LD_ADDR_OWVAR 20
12606: PUSH
12607: LD_INT 0
12609: ST_TO_ADDR
// uc_nation = nation_nature ;
12610: LD_ADDR_OWVAR 21
12614: PUSH
12615: LD_INT 0
12617: ST_TO_ADDR
// hc_class = class_phororhacos ;
12618: LD_ADDR_OWVAR 28
12622: PUSH
12623: LD_INT 18
12625: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12626: LD_ADDR_OWVAR 31
12630: PUSH
12631: LD_EXP 27
12635: PUSH
12636: LD_INT 1
12638: ARRAY
12639: PUSH
12640: LD_EXP 27
12644: PUSH
12645: LD_INT 2
12647: ARRAY
12648: PUSH
12649: LD_EXP 27
12653: PUSH
12654: LD_INT 3
12656: ARRAY
12657: PUSH
12658: LD_EXP 27
12662: PUSH
12663: LD_INT 4
12665: ARRAY
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12673: LD_ADDR_OWVAR 35
12677: PUSH
12678: LD_EXP 28
12682: ST_TO_ADDR
// un = CreateHuman ;
12683: LD_ADDR_VAR 0 3
12687: PUSH
12688: CALL_OW 44
12692: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12693: LD_VAR 0 3
12697: PPUSH
12698: LD_INT 15
12700: PPUSH
12701: LD_INT 0
12703: PPUSH
12704: CALL_OW 49
// end ;
12708: GO 12599
12710: POP
12711: POP
// for i := 1 to animalsAmount [ 3 ] do
12712: LD_ADDR_VAR 0 2
12716: PUSH
12717: DOUBLE
12718: LD_INT 1
12720: DEC
12721: ST_TO_ADDR
12722: LD_EXP 26
12726: PUSH
12727: LD_INT 3
12729: ARRAY
12730: PUSH
12731: FOR_TO
12732: IFFALSE 12842
// begin uc_side = 0 ;
12734: LD_ADDR_OWVAR 20
12738: PUSH
12739: LD_INT 0
12741: ST_TO_ADDR
// uc_nation = nation_nature ;
12742: LD_ADDR_OWVAR 21
12746: PUSH
12747: LD_INT 0
12749: ST_TO_ADDR
// hc_class = class_tiger ;
12750: LD_ADDR_OWVAR 28
12754: PUSH
12755: LD_INT 14
12757: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12758: LD_ADDR_OWVAR 31
12762: PUSH
12763: LD_EXP 27
12767: PUSH
12768: LD_INT 1
12770: ARRAY
12771: PUSH
12772: LD_EXP 27
12776: PUSH
12777: LD_INT 2
12779: ARRAY
12780: PUSH
12781: LD_EXP 27
12785: PUSH
12786: LD_INT 3
12788: ARRAY
12789: PUSH
12790: LD_EXP 27
12794: PUSH
12795: LD_INT 4
12797: ARRAY
12798: PUSH
12799: EMPTY
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12805: LD_ADDR_OWVAR 35
12809: PUSH
12810: LD_EXP 28
12814: ST_TO_ADDR
// un = CreateHuman ;
12815: LD_ADDR_VAR 0 3
12819: PUSH
12820: CALL_OW 44
12824: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12825: LD_VAR 0 3
12829: PPUSH
12830: LD_INT 15
12832: PPUSH
12833: LD_INT 0
12835: PPUSH
12836: CALL_OW 49
// end ;
12840: GO 12731
12842: POP
12843: POP
// for i := 1 to animalsAmount [ 4 ] do
12844: LD_ADDR_VAR 0 2
12848: PUSH
12849: DOUBLE
12850: LD_INT 1
12852: DEC
12853: ST_TO_ADDR
12854: LD_EXP 26
12858: PUSH
12859: LD_INT 4
12861: ARRAY
12862: PUSH
12863: FOR_TO
12864: IFFALSE 12974
// begin uc_side = 0 ;
12866: LD_ADDR_OWVAR 20
12870: PUSH
12871: LD_INT 0
12873: ST_TO_ADDR
// uc_nation = nation_nature ;
12874: LD_ADDR_OWVAR 21
12878: PUSH
12879: LD_INT 0
12881: ST_TO_ADDR
// hc_class = 21 ;
12882: LD_ADDR_OWVAR 28
12886: PUSH
12887: LD_INT 21
12889: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12890: LD_ADDR_OWVAR 31
12894: PUSH
12895: LD_EXP 27
12899: PUSH
12900: LD_INT 1
12902: ARRAY
12903: PUSH
12904: LD_EXP 27
12908: PUSH
12909: LD_INT 2
12911: ARRAY
12912: PUSH
12913: LD_EXP 27
12917: PUSH
12918: LD_INT 3
12920: ARRAY
12921: PUSH
12922: LD_EXP 27
12926: PUSH
12927: LD_INT 4
12929: ARRAY
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12937: LD_ADDR_OWVAR 35
12941: PUSH
12942: LD_EXP 28
12946: ST_TO_ADDR
// un = CreateHuman ;
12947: LD_ADDR_VAR 0 3
12951: PUSH
12952: CALL_OW 44
12956: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12957: LD_VAR 0 3
12961: PPUSH
12962: LD_INT 15
12964: PPUSH
12965: LD_INT 0
12967: PPUSH
12968: CALL_OW 49
// end ;
12972: GO 12863
12974: POP
12975: POP
// end ; end_of_file
12976: LD_VAR 0 1
12980: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12981: LD_VAR 0 1
12985: PUSH
12986: LD_EXP 45
12990: EQUAL
12991: PUSH
12992: LD_EXP 52
12996: PPUSH
12997: CALL_OW 255
13001: PUSH
13002: LD_INT 3
13004: EQUAL
13005: NOT
13006: AND
13007: PUSH
13008: LD_EXP 52
13012: PPUSH
13013: CALL_OW 302
13017: NOT
13018: AND
13019: IFFALSE 13025
// BurlakDying ;
13021: CALL 10416 0 0
// if unit = Gladstone then
13025: LD_VAR 0 1
13029: PUSH
13030: LD_EXP 43
13034: EQUAL
13035: IFFALSE 13045
// gladstoneStatus = 0 ;
13037: LD_ADDR_EXP 1
13041: PUSH
13042: LD_INT 0
13044: ST_TO_ADDR
// if unit = Johanna then
13045: LD_VAR 0 1
13049: PUSH
13050: LD_EXP 42
13054: EQUAL
13055: IFFALSE 13065
// johannaStatus = 0 ;
13057: LD_ADDR_EXP 2
13061: PUSH
13062: LD_INT 0
13064: ST_TO_ADDR
// end ;
13065: PPOPN 1
13067: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13068: LD_VAR 0 1
13072: PUSH
13073: LD_EXP 45
13077: EQUAL
13078: IFFALSE 13084
// BurlakDying ;
13080: CALL 10416 0 0
// if GetSide ( unit ) = 3 then
13084: LD_VAR 0 1
13088: PPUSH
13089: CALL_OW 255
13093: PUSH
13094: LD_INT 3
13096: EQUAL
13097: IFFALSE 13113
// lostComradesCounter = lostComradesCounter + 1 ;
13099: LD_ADDR_EXP 22
13103: PUSH
13104: LD_EXP 22
13108: PUSH
13109: LD_INT 1
13111: PLUS
13112: ST_TO_ADDR
// if unit in kirovSolds then
13113: LD_VAR 0 1
13117: PUSH
13118: LD_EXP 55
13122: IN
13123: IFFALSE 13141
// kirovSolds = kirovSolds diff unit ;
13125: LD_ADDR_EXP 55
13129: PUSH
13130: LD_EXP 55
13134: PUSH
13135: LD_VAR 0 1
13139: DIFF
13140: ST_TO_ADDR
// end ;
13141: PPOPN 1
13143: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
13144: LD_VAR 0 1
13148: PUSH
13149: LD_INT 3
13151: EQUAL
13152: PUSH
13153: LD_VAR 0 2
13157: PUSH
13158: LD_INT 1
13160: EQUAL
13161: AND
13162: PUSH
13163: LD_VAR 0 1
13167: PUSH
13168: LD_INT 1
13170: EQUAL
13171: PUSH
13172: LD_VAR 0 2
13176: PUSH
13177: LD_INT 3
13179: EQUAL
13180: AND
13181: PUSH
13182: LD_EXP 16
13186: PUSH
13187: LD_INT 1
13189: EQUAL
13190: AND
13191: OR
13192: IFFALSE 13198
// Dial_SecondAttack ;
13194: CALL 5904 0 0
// if side1 = 3 and side2 = 6 and not traitor then
13198: LD_VAR 0 1
13202: PUSH
13203: LD_INT 3
13205: EQUAL
13206: PUSH
13207: LD_VAR 0 2
13211: PUSH
13212: LD_INT 6
13214: EQUAL
13215: AND
13216: PUSH
13217: LD_EXP 17
13221: NOT
13222: AND
13223: IFFALSE 13229
// Dialogue_AttackComrade ;
13225: CALL 4034 0 0
// end ; end_of_file
13229: PPOPN 2
13231: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$30 do
13232: LD_EXP 52
13236: PPUSH
13237: CALL_OW 255
13241: PUSH
13242: LD_INT 3
13244: EQUAL
13245: PUSH
13246: LD_EXP 25
13250: PUSH
13251: LD_INT 1050
13253: LESS
13254: AND
13255: IFFALSE 13267
13257: GO 13259
13259: DISABLE
// SetAchievement ( ACH_YELENA ) ;
13260: LD_STRING ACH_YELENA
13262: PPUSH
13263: CALL_OW 543
13267: END
// every 1 trigger not FilterAllUnits ( [ f_nation , nation_nature ] ) do
13268: LD_INT 23
13270: PUSH
13271: LD_INT 0
13273: PUSH
13274: EMPTY
13275: LIST
13276: LIST
13277: PPUSH
13278: CALL_OW 69
13282: NOT
13283: IFFALSE 13295
13285: GO 13287
13287: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
13288: LD_STRING ACH_NATURE
13290: PPUSH
13291: CALL_OW 543
13295: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
13296: LD_INT 0
13298: PPUSH
13299: PPUSH
// if not missionNumber then
13300: LD_VAR 0 2
13304: NOT
13305: IFFALSE 13309
// exit ;
13307: GO 13439
// achiv := false ;
13309: LD_ADDR_VAR 0 7
13313: PUSH
13314: LD_INT 0
13316: ST_TO_ADDR
// case campaignNumber of 1 :
13317: LD_VAR 0 1
13321: PUSH
13322: LD_INT 1
13324: DOUBLE
13325: EQUAL
13326: IFTRUE 13330
13328: GO 13341
13330: POP
// achiv := ACH_GOTA ; 2 :
13331: LD_ADDR_VAR 0 7
13335: PUSH
13336: LD_STRING ACH_GOTA
13338: ST_TO_ADDR
13339: GO 13391
13341: LD_INT 2
13343: DOUBLE
13344: EQUAL
13345: IFTRUE 13349
13347: GO 13352
13349: POP
// ; 3 :
13350: GO 13391
13352: LD_INT 3
13354: DOUBLE
13355: EQUAL
13356: IFTRUE 13360
13358: GO 13371
13360: POP
// achiv := ACH_MOTSU ; 4 :
13361: LD_ADDR_VAR 0 7
13365: PUSH
13366: LD_STRING ACH_MOTSU
13368: ST_TO_ADDR
13369: GO 13391
13371: LD_INT 4
13373: DOUBLE
13374: EQUAL
13375: IFTRUE 13379
13377: GO 13390
13379: POP
// achiv := ACH_LOP ; end ;
13380: LD_ADDR_VAR 0 7
13384: PUSH
13385: LD_STRING ACH_LOP
13387: ST_TO_ADDR
13388: GO 13391
13390: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
13391: LD_OWVAR 67
13395: PUSH
13396: LD_INT 3
13398: EQUAL
13399: PUSH
13400: LD_VAR 0 7
13404: AND
13405: PUSH
13406: LD_VAR 0 3
13410: AND
13411: PUSH
13412: LD_VAR 0 4
13416: AND
13417: PUSH
13418: LD_VAR 0 5
13422: AND
13423: IFFALSE 13439
// SetAchievementEX ( achiv , missionNumber ) ;
13425: LD_VAR 0 7
13429: PPUSH
13430: LD_VAR 0 2
13434: PPUSH
13435: CALL_OW 564
// end ;
13439: LD_VAR 0 6
13443: RET
// export function SA_BehemothConstructed ; begin
13444: LD_INT 0
13446: PPUSH
// SetAchievement ( ACH_SMC ) ;
13447: LD_STRING ACH_SMC
13449: PPUSH
13450: CALL_OW 543
// end ;
13454: LD_VAR 0 1
13458: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
13459: LD_VAR 0 2
13463: PUSH
13464: LD_INT 1
13466: DOUBLE
13467: EQUAL
13468: IFTRUE 13472
13470: GO 13479
13472: POP
// HackUnlimitedResources ; 2 :
13473: CALL 13663 0 0
13477: GO 13660
13479: LD_INT 2
13481: DOUBLE
13482: EQUAL
13483: IFTRUE 13487
13485: GO 13494
13487: POP
// HackSetLevel10 ; 3 :
13488: CALL 13796 0 0
13492: GO 13660
13494: LD_INT 3
13496: DOUBLE
13497: EQUAL
13498: IFTRUE 13502
13500: GO 13509
13502: POP
// HackSetLevel10YourUnits ; 4 :
13503: CALL 13881 0 0
13507: GO 13660
13509: LD_INT 4
13511: DOUBLE
13512: EQUAL
13513: IFTRUE 13517
13515: GO 13539
13517: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
13518: LD_VAR 0 3
13522: PPUSH
13523: LD_VAR 0 4
13527: PPUSH
13528: LD_VAR 0 5
13532: PPUSH
13533: CALL 13971 0 3
13537: GO 13660
13539: LD_INT 5
13541: DOUBLE
13542: EQUAL
13543: IFTRUE 13547
13545: GO 13554
13547: POP
// HackSpawnVehicle ; 6 :
13548: CALL 14032 0 0
13552: GO 13660
13554: LD_INT 6
13556: DOUBLE
13557: EQUAL
13558: IFTRUE 13562
13560: GO 13569
13562: POP
// HackInvincible ; 7 :
13563: CALL 15107 0 0
13567: GO 13660
13569: LD_INT 7
13571: DOUBLE
13572: EQUAL
13573: IFTRUE 13577
13575: GO 13584
13577: POP
// HackInvisible ; 8 :
13578: CALL 15218 0 0
13582: GO 13660
13584: LD_INT 8
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13599
13592: POP
// HackChangeYourSide ; 9 :
13593: CALL 15275 0 0
13597: GO 13660
13599: LD_INT 9
13601: DOUBLE
13602: EQUAL
13603: IFTRUE 13607
13605: GO 13614
13607: POP
// HackChangeUnitSide ; 10 :
13608: CALL 15317 0 0
13612: GO 13660
13614: LD_INT 10
13616: DOUBLE
13617: EQUAL
13618: IFTRUE 13622
13620: GO 13629
13622: POP
// HackFog ; 11 :
13623: CALL 15418 0 0
13627: GO 13660
13629: LD_INT 11
13631: DOUBLE
13632: EQUAL
13633: IFTRUE 13637
13635: GO 13644
13637: POP
// HackApeman ; 12 :
13638: CALL 15433 0 0
13642: GO 13660
13644: LD_INT 12
13646: DOUBLE
13647: EQUAL
13648: IFTRUE 13652
13650: GO 13659
13652: POP
// HackBoom ; end ;
13653: CALL 15518 0 0
13657: GO 13660
13659: POP
// end ;
13660: PPOPN 6
13662: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
13663: LD_INT 0
13665: PPUSH
13666: PPUSH
13667: PPUSH
13668: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13669: LD_ADDR_VAR 0 4
13673: PUSH
13674: LD_INT 22
13676: PUSH
13677: LD_OWVAR 2
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: LD_INT 30
13691: PUSH
13692: LD_INT 0
13694: PUSH
13695: EMPTY
13696: LIST
13697: LIST
13698: PUSH
13699: LD_INT 30
13701: PUSH
13702: LD_INT 1
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: LIST
13713: PUSH
13714: EMPTY
13715: LIST
13716: LIST
13717: PPUSH
13718: CALL_OW 69
13722: ST_TO_ADDR
// if not tmp then
13723: LD_VAR 0 4
13727: NOT
13728: IFFALSE 13732
// exit ;
13730: GO 13791
// for i in tmp do
13732: LD_ADDR_VAR 0 2
13736: PUSH
13737: LD_VAR 0 4
13741: PUSH
13742: FOR_IN
13743: IFFALSE 13789
// for j = 1 to 3 do
13745: LD_ADDR_VAR 0 3
13749: PUSH
13750: DOUBLE
13751: LD_INT 1
13753: DEC
13754: ST_TO_ADDR
13755: LD_INT 3
13757: PUSH
13758: FOR_TO
13759: IFFALSE 13785
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13761: LD_VAR 0 2
13765: PPUSH
13766: CALL_OW 274
13770: PPUSH
13771: LD_VAR 0 3
13775: PPUSH
13776: LD_INT 99999
13778: PPUSH
13779: CALL_OW 277
13783: GO 13758
13785: POP
13786: POP
13787: GO 13742
13789: POP
13790: POP
// end ;
13791: LD_VAR 0 1
13795: RET
// export function HackSetLevel10 ; var i , j ; begin
13796: LD_INT 0
13798: PPUSH
13799: PPUSH
13800: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13801: LD_ADDR_VAR 0 2
13805: PUSH
13806: LD_INT 21
13808: PUSH
13809: LD_INT 1
13811: PUSH
13812: EMPTY
13813: LIST
13814: LIST
13815: PPUSH
13816: CALL_OW 69
13820: PUSH
13821: FOR_IN
13822: IFFALSE 13874
// if IsSelected ( i ) then
13824: LD_VAR 0 2
13828: PPUSH
13829: CALL_OW 306
13833: IFFALSE 13872
// begin for j := 1 to 4 do
13835: LD_ADDR_VAR 0 3
13839: PUSH
13840: DOUBLE
13841: LD_INT 1
13843: DEC
13844: ST_TO_ADDR
13845: LD_INT 4
13847: PUSH
13848: FOR_TO
13849: IFFALSE 13870
// SetSkill ( i , j , 10 ) ;
13851: LD_VAR 0 2
13855: PPUSH
13856: LD_VAR 0 3
13860: PPUSH
13861: LD_INT 10
13863: PPUSH
13864: CALL_OW 237
13868: GO 13848
13870: POP
13871: POP
// end ;
13872: GO 13821
13874: POP
13875: POP
// end ;
13876: LD_VAR 0 1
13880: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
13881: LD_INT 0
13883: PPUSH
13884: PPUSH
13885: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13886: LD_ADDR_VAR 0 2
13890: PUSH
13891: LD_INT 22
13893: PUSH
13894: LD_OWVAR 2
13898: PUSH
13899: EMPTY
13900: LIST
13901: LIST
13902: PUSH
13903: LD_INT 21
13905: PUSH
13906: LD_INT 1
13908: PUSH
13909: EMPTY
13910: LIST
13911: LIST
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PPUSH
13917: CALL_OW 69
13921: PUSH
13922: FOR_IN
13923: IFFALSE 13964
// begin for j := 1 to 4 do
13925: LD_ADDR_VAR 0 3
13929: PUSH
13930: DOUBLE
13931: LD_INT 1
13933: DEC
13934: ST_TO_ADDR
13935: LD_INT 4
13937: PUSH
13938: FOR_TO
13939: IFFALSE 13960
// SetSkill ( i , j , 10 ) ;
13941: LD_VAR 0 2
13945: PPUSH
13946: LD_VAR 0 3
13950: PPUSH
13951: LD_INT 10
13953: PPUSH
13954: CALL_OW 237
13958: GO 13938
13960: POP
13961: POP
// end ;
13962: GO 13922
13964: POP
13965: POP
// end ;
13966: LD_VAR 0 1
13970: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
13971: LD_INT 0
13973: PPUSH
// uc_side := your_side ;
13974: LD_ADDR_OWVAR 20
13978: PUSH
13979: LD_OWVAR 2
13983: ST_TO_ADDR
// uc_nation := nation ;
13984: LD_ADDR_OWVAR 21
13988: PUSH
13989: LD_VAR 0 1
13993: ST_TO_ADDR
// InitHc ;
13994: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13998: LD_INT 0
14000: PPUSH
14001: LD_VAR 0 2
14005: PPUSH
14006: LD_VAR 0 3
14010: PPUSH
14011: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
14015: CALL_OW 44
14019: PPUSH
14020: LD_INT 1
14022: PPUSH
14023: CALL_OW 51
// end ;
14027: LD_VAR 0 4
14031: RET
// export function HackSpawnVehicle ; begin
14032: LD_INT 0
14034: PPUSH
// uc_side := your_side ;
14035: LD_ADDR_OWVAR 20
14039: PUSH
14040: LD_OWVAR 2
14044: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
14045: LD_ADDR_OWVAR 21
14049: PUSH
14050: LD_INT 1
14052: PPUSH
14053: LD_INT 3
14055: PPUSH
14056: CALL_OW 12
14060: ST_TO_ADDR
// InitVc ;
14061: CALL_OW 20
// case uc_nation of 1 :
14065: LD_OWVAR 21
14069: PUSH
14070: LD_INT 1
14072: DOUBLE
14073: EQUAL
14074: IFTRUE 14078
14076: GO 14385
14078: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14079: LD_ADDR_OWVAR 37
14083: PUSH
14084: LD_INT 1
14086: PUSH
14087: LD_INT 2
14089: PUSH
14090: LD_INT 3
14092: PUSH
14093: LD_INT 4
14095: PUSH
14096: LD_INT 5
14098: PUSH
14099: LD_INT 11
14101: PUSH
14102: LD_INT 12
14104: PUSH
14105: LD_INT 13
14107: PUSH
14108: LD_INT 14
14110: PUSH
14111: LD_INT 21
14113: PUSH
14114: LD_INT 22
14116: PUSH
14117: LD_INT 23
14119: PUSH
14120: LD_INT 24
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 1
14140: PPUSH
14141: LD_INT 13
14143: PPUSH
14144: CALL_OW 12
14148: ARRAY
14149: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14150: LD_ADDR_OWVAR 38
14154: PUSH
14155: LD_INT 1
14157: PUSH
14158: LD_INT 3
14160: PUSH
14161: LD_INT 4
14163: PUSH
14164: LD_INT 5
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: PUSH
14173: LD_INT 1
14175: PPUSH
14176: LD_INT 4
14178: PPUSH
14179: CALL_OW 12
14183: ARRAY
14184: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14185: LD_ADDR_OWVAR 39
14189: PUSH
14190: LD_INT 1
14192: PUSH
14193: LD_INT 2
14195: PUSH
14196: LD_INT 3
14198: PUSH
14199: EMPTY
14200: LIST
14201: LIST
14202: LIST
14203: PUSH
14204: LD_INT 1
14206: PPUSH
14207: LD_INT 3
14209: PPUSH
14210: CALL_OW 12
14214: ARRAY
14215: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14216: LD_ADDR_OWVAR 40
14220: PUSH
14221: LD_INT 14
14223: PUSH
14224: LD_INT 12
14226: PUSH
14227: LD_INT 13
14229: PUSH
14230: LD_INT 5
14232: PUSH
14233: LD_INT 10
14235: PUSH
14236: LD_INT 4
14238: PUSH
14239: LD_INT 6
14241: PUSH
14242: LD_INT 9
14244: PUSH
14245: LD_INT 3
14247: PUSH
14248: LD_INT 2
14250: PUSH
14251: LD_INT 11
14253: PUSH
14254: LD_INT 7
14256: PUSH
14257: LD_INT 8
14259: PUSH
14260: LD_INT 15
14262: PUSH
14263: LD_INT 32
14265: PUSH
14266: LD_INT 31
14268: PUSH
14269: LD_INT 24
14271: PUSH
14272: LD_INT 26
14274: PUSH
14275: LD_INT 25
14277: PUSH
14278: LD_INT 27
14280: PUSH
14281: LD_INT 23
14283: PUSH
14284: LD_INT 22
14286: PUSH
14287: LD_INT 30
14289: PUSH
14290: LD_INT 28
14292: PUSH
14293: LD_INT 29
14295: PUSH
14296: LD_INT 53
14298: PUSH
14299: LD_INT 51
14301: PUSH
14302: LD_INT 52
14304: PUSH
14305: LD_INT 43
14307: PUSH
14308: LD_INT 44
14310: PUSH
14311: LD_INT 46
14313: PUSH
14314: LD_INT 42
14316: PUSH
14317: LD_INT 47
14319: PUSH
14320: LD_INT 45
14322: PUSH
14323: LD_INT 48
14325: PUSH
14326: LD_INT 55
14328: PUSH
14329: LD_INT 49
14331: PUSH
14332: EMPTY
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: LIST
14370: PUSH
14371: LD_INT 1
14373: PPUSH
14374: LD_INT 37
14376: PPUSH
14377: CALL_OW 12
14381: ARRAY
14382: ST_TO_ADDR
// end ; 2 :
14383: GO 15016
14385: LD_INT 2
14387: DOUBLE
14388: EQUAL
14389: IFTRUE 14393
14391: GO 14700
14393: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14394: LD_ADDR_OWVAR 37
14398: PUSH
14399: LD_INT 1
14401: PUSH
14402: LD_INT 2
14404: PUSH
14405: LD_INT 3
14407: PUSH
14408: LD_INT 4
14410: PUSH
14411: LD_INT 5
14413: PUSH
14414: LD_INT 11
14416: PUSH
14417: LD_INT 12
14419: PUSH
14420: LD_INT 13
14422: PUSH
14423: LD_INT 14
14425: PUSH
14426: LD_INT 21
14428: PUSH
14429: LD_INT 22
14431: PUSH
14432: LD_INT 23
14434: PUSH
14435: LD_INT 24
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 1
14455: PPUSH
14456: LD_INT 13
14458: PPUSH
14459: CALL_OW 12
14463: ARRAY
14464: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14465: LD_ADDR_OWVAR 38
14469: PUSH
14470: LD_INT 1
14472: PUSH
14473: LD_INT 3
14475: PUSH
14476: LD_INT 4
14478: PUSH
14479: LD_INT 5
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 1
14490: PPUSH
14491: LD_INT 4
14493: PPUSH
14494: CALL_OW 12
14498: ARRAY
14499: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14500: LD_ADDR_OWVAR 39
14504: PUSH
14505: LD_INT 1
14507: PUSH
14508: LD_INT 2
14510: PUSH
14511: LD_INT 3
14513: PUSH
14514: EMPTY
14515: LIST
14516: LIST
14517: LIST
14518: PUSH
14519: LD_INT 1
14521: PPUSH
14522: LD_INT 3
14524: PPUSH
14525: CALL_OW 12
14529: ARRAY
14530: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14531: LD_ADDR_OWVAR 40
14535: PUSH
14536: LD_INT 14
14538: PUSH
14539: LD_INT 12
14541: PUSH
14542: LD_INT 13
14544: PUSH
14545: LD_INT 5
14547: PUSH
14548: LD_INT 10
14550: PUSH
14551: LD_INT 4
14553: PUSH
14554: LD_INT 6
14556: PUSH
14557: LD_INT 9
14559: PUSH
14560: LD_INT 3
14562: PUSH
14563: LD_INT 2
14565: PUSH
14566: LD_INT 11
14568: PUSH
14569: LD_INT 7
14571: PUSH
14572: LD_INT 8
14574: PUSH
14575: LD_INT 15
14577: PUSH
14578: LD_INT 32
14580: PUSH
14581: LD_INT 31
14583: PUSH
14584: LD_INT 24
14586: PUSH
14587: LD_INT 26
14589: PUSH
14590: LD_INT 25
14592: PUSH
14593: LD_INT 27
14595: PUSH
14596: LD_INT 23
14598: PUSH
14599: LD_INT 22
14601: PUSH
14602: LD_INT 30
14604: PUSH
14605: LD_INT 28
14607: PUSH
14608: LD_INT 29
14610: PUSH
14611: LD_INT 53
14613: PUSH
14614: LD_INT 51
14616: PUSH
14617: LD_INT 52
14619: PUSH
14620: LD_INT 43
14622: PUSH
14623: LD_INT 44
14625: PUSH
14626: LD_INT 46
14628: PUSH
14629: LD_INT 42
14631: PUSH
14632: LD_INT 47
14634: PUSH
14635: LD_INT 45
14637: PUSH
14638: LD_INT 48
14640: PUSH
14641: LD_INT 55
14643: PUSH
14644: LD_INT 49
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: PUSH
14686: LD_INT 1
14688: PPUSH
14689: LD_INT 37
14691: PPUSH
14692: CALL_OW 12
14696: ARRAY
14697: ST_TO_ADDR
// end ; 3 :
14698: GO 15016
14700: LD_INT 3
14702: DOUBLE
14703: EQUAL
14704: IFTRUE 14708
14706: GO 15015
14708: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14709: LD_ADDR_OWVAR 37
14713: PUSH
14714: LD_INT 1
14716: PUSH
14717: LD_INT 2
14719: PUSH
14720: LD_INT 3
14722: PUSH
14723: LD_INT 4
14725: PUSH
14726: LD_INT 5
14728: PUSH
14729: LD_INT 11
14731: PUSH
14732: LD_INT 12
14734: PUSH
14735: LD_INT 13
14737: PUSH
14738: LD_INT 14
14740: PUSH
14741: LD_INT 21
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_INT 23
14749: PUSH
14750: LD_INT 24
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: PUSH
14768: LD_INT 1
14770: PPUSH
14771: LD_INT 13
14773: PPUSH
14774: CALL_OW 12
14778: ARRAY
14779: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14780: LD_ADDR_OWVAR 38
14784: PUSH
14785: LD_INT 1
14787: PUSH
14788: LD_INT 3
14790: PUSH
14791: LD_INT 4
14793: PUSH
14794: LD_INT 5
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: PUSH
14803: LD_INT 1
14805: PPUSH
14806: LD_INT 4
14808: PPUSH
14809: CALL_OW 12
14813: ARRAY
14814: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14815: LD_ADDR_OWVAR 39
14819: PUSH
14820: LD_INT 1
14822: PUSH
14823: LD_INT 2
14825: PUSH
14826: LD_INT 3
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 1
14836: PPUSH
14837: LD_INT 3
14839: PPUSH
14840: CALL_OW 12
14844: ARRAY
14845: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14846: LD_ADDR_OWVAR 40
14850: PUSH
14851: LD_INT 14
14853: PUSH
14854: LD_INT 12
14856: PUSH
14857: LD_INT 13
14859: PUSH
14860: LD_INT 5
14862: PUSH
14863: LD_INT 10
14865: PUSH
14866: LD_INT 4
14868: PUSH
14869: LD_INT 6
14871: PUSH
14872: LD_INT 9
14874: PUSH
14875: LD_INT 3
14877: PUSH
14878: LD_INT 2
14880: PUSH
14881: LD_INT 11
14883: PUSH
14884: LD_INT 7
14886: PUSH
14887: LD_INT 8
14889: PUSH
14890: LD_INT 15
14892: PUSH
14893: LD_INT 32
14895: PUSH
14896: LD_INT 31
14898: PUSH
14899: LD_INT 24
14901: PUSH
14902: LD_INT 26
14904: PUSH
14905: LD_INT 25
14907: PUSH
14908: LD_INT 27
14910: PUSH
14911: LD_INT 23
14913: PUSH
14914: LD_INT 22
14916: PUSH
14917: LD_INT 30
14919: PUSH
14920: LD_INT 28
14922: PUSH
14923: LD_INT 29
14925: PUSH
14926: LD_INT 53
14928: PUSH
14929: LD_INT 51
14931: PUSH
14932: LD_INT 52
14934: PUSH
14935: LD_INT 43
14937: PUSH
14938: LD_INT 44
14940: PUSH
14941: LD_INT 46
14943: PUSH
14944: LD_INT 42
14946: PUSH
14947: LD_INT 47
14949: PUSH
14950: LD_INT 45
14952: PUSH
14953: LD_INT 48
14955: PUSH
14956: LD_INT 55
14958: PUSH
14959: LD_INT 49
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: LIST
14968: LIST
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: LIST
14975: LIST
14976: LIST
14977: LIST
14978: LIST
14979: LIST
14980: LIST
14981: LIST
14982: LIST
14983: LIST
14984: LIST
14985: LIST
14986: LIST
14987: LIST
14988: LIST
14989: LIST
14990: LIST
14991: LIST
14992: LIST
14993: LIST
14994: LIST
14995: LIST
14996: LIST
14997: LIST
14998: LIST
14999: LIST
15000: PUSH
15001: LD_INT 1
15003: PPUSH
15004: LD_INT 37
15006: PPUSH
15007: CALL_OW 12
15011: ARRAY
15012: ST_TO_ADDR
// end ; end ;
15013: GO 15016
15015: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15016: CALL_OW 45
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 51
// end ;
15028: LD_VAR 0 1
15032: RET
// export invincible ; every 1 do
15033: GO 15035
15035: DISABLE
// invincible := [ ] ;
15036: LD_ADDR_EXP 56
15040: PUSH
15041: EMPTY
15042: ST_TO_ADDR
15043: END
// every 10 do var i ;
15044: GO 15046
15046: DISABLE
15047: LD_INT 0
15049: PPUSH
// begin enable ;
15050: ENABLE
// if not invincible then
15051: LD_EXP 56
15055: NOT
15056: IFFALSE 15060
// exit ;
15058: GO 15104
// for i in invincible do
15060: LD_ADDR_VAR 0 1
15064: PUSH
15065: LD_EXP 56
15069: PUSH
15070: FOR_IN
15071: IFFALSE 15102
// if GetLives ( i ) < 1000 then
15073: LD_VAR 0 1
15077: PPUSH
15078: CALL_OW 256
15082: PUSH
15083: LD_INT 1000
15085: LESS
15086: IFFALSE 15100
// SetLives ( i , 1000 ) ;
15088: LD_VAR 0 1
15092: PPUSH
15093: LD_INT 1000
15095: PPUSH
15096: CALL_OW 234
15100: GO 15070
15102: POP
15103: POP
// end ;
15104: PPOPN 1
15106: END
// export function HackInvincible ; var i ; begin
15107: LD_INT 0
15109: PPUSH
15110: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15111: LD_ADDR_VAR 0 2
15115: PUSH
15116: LD_INT 2
15118: PUSH
15119: LD_INT 21
15121: PUSH
15122: LD_INT 1
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PUSH
15129: LD_INT 21
15131: PUSH
15132: LD_INT 2
15134: PUSH
15135: EMPTY
15136: LIST
15137: LIST
15138: PUSH
15139: EMPTY
15140: LIST
15141: LIST
15142: LIST
15143: PPUSH
15144: CALL_OW 69
15148: PUSH
15149: FOR_IN
15150: IFFALSE 15211
// if IsSelected ( i ) then
15152: LD_VAR 0 2
15156: PPUSH
15157: CALL_OW 306
15161: IFFALSE 15209
// begin if i in invincible then
15163: LD_VAR 0 2
15167: PUSH
15168: LD_EXP 56
15172: IN
15173: IFFALSE 15193
// invincible := invincible diff i else
15175: LD_ADDR_EXP 56
15179: PUSH
15180: LD_EXP 56
15184: PUSH
15185: LD_VAR 0 2
15189: DIFF
15190: ST_TO_ADDR
15191: GO 15209
// invincible := invincible union i ;
15193: LD_ADDR_EXP 56
15197: PUSH
15198: LD_EXP 56
15202: PUSH
15203: LD_VAR 0 2
15207: UNION
15208: ST_TO_ADDR
// end ;
15209: GO 15149
15211: POP
15212: POP
// end ;
15213: LD_VAR 0 1
15217: RET
// export function HackInvisible ; var i , j ; begin
15218: LD_INT 0
15220: PPUSH
15221: PPUSH
15222: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15223: LD_ADDR_VAR 0 2
15227: PUSH
15228: LD_INT 21
15230: PUSH
15231: LD_INT 1
15233: PUSH
15234: EMPTY
15235: LIST
15236: LIST
15237: PPUSH
15238: CALL_OW 69
15242: PUSH
15243: FOR_IN
15244: IFFALSE 15268
// if IsSelected ( i ) then
15246: LD_VAR 0 2
15250: PPUSH
15251: CALL_OW 306
15255: IFFALSE 15266
// begin ComForceInvisible ( i ) ;
15257: LD_VAR 0 2
15261: PPUSH
15262: CALL_OW 496
// end ;
15266: GO 15243
15268: POP
15269: POP
// end ;
15270: LD_VAR 0 1
15274: RET
// export function HackChangeYourSide ; begin
15275: LD_INT 0
15277: PPUSH
// if your_side = 8 then
15278: LD_OWVAR 2
15282: PUSH
15283: LD_INT 8
15285: EQUAL
15286: IFFALSE 15298
// your_side := 0 else
15288: LD_ADDR_OWVAR 2
15292: PUSH
15293: LD_INT 0
15295: ST_TO_ADDR
15296: GO 15312
// your_side := your_side + 1 ;
15298: LD_ADDR_OWVAR 2
15302: PUSH
15303: LD_OWVAR 2
15307: PUSH
15308: LD_INT 1
15310: PLUS
15311: ST_TO_ADDR
// end ;
15312: LD_VAR 0 1
15316: RET
// export function HackChangeUnitSide ; var i , j ; begin
15317: LD_INT 0
15319: PPUSH
15320: PPUSH
15321: PPUSH
// for i in all_units do
15322: LD_ADDR_VAR 0 2
15326: PUSH
15327: LD_OWVAR 3
15331: PUSH
15332: FOR_IN
15333: IFFALSE 15411
// if IsSelected ( i ) then
15335: LD_VAR 0 2
15339: PPUSH
15340: CALL_OW 306
15344: IFFALSE 15409
// begin j := GetSide ( i ) ;
15346: LD_ADDR_VAR 0 3
15350: PUSH
15351: LD_VAR 0 2
15355: PPUSH
15356: CALL_OW 255
15360: ST_TO_ADDR
// if j = 8 then
15361: LD_VAR 0 3
15365: PUSH
15366: LD_INT 8
15368: EQUAL
15369: IFFALSE 15381
// j := 0 else
15371: LD_ADDR_VAR 0 3
15375: PUSH
15376: LD_INT 0
15378: ST_TO_ADDR
15379: GO 15395
// j := j + 1 ;
15381: LD_ADDR_VAR 0 3
15385: PUSH
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 1
15393: PLUS
15394: ST_TO_ADDR
// SetSide ( i , j ) ;
15395: LD_VAR 0 2
15399: PPUSH
15400: LD_VAR 0 3
15404: PPUSH
15405: CALL_OW 235
// end ;
15409: GO 15332
15411: POP
15412: POP
// end ;
15413: LD_VAR 0 1
15417: RET
// export function HackFog ; begin
15418: LD_INT 0
15420: PPUSH
// FogOff ( true ) ;
15421: LD_INT 1
15423: PPUSH
15424: CALL_OW 344
// end ;
15428: LD_VAR 0 1
15432: RET
// export function HackApeman ; begin
15433: LD_INT 0
15435: PPUSH
// uc_side := your_side ;
15436: LD_ADDR_OWVAR 20
15440: PUSH
15441: LD_OWVAR 2
15445: ST_TO_ADDR
// uc_nation := 0 ;
15446: LD_ADDR_OWVAR 21
15450: PUSH
15451: LD_INT 0
15453: ST_TO_ADDR
// hc_name :=  ;
15454: LD_ADDR_OWVAR 26
15458: PUSH
15459: LD_STRING 
15461: ST_TO_ADDR
// hc_gallery :=  ;
15462: LD_ADDR_OWVAR 33
15466: PUSH
15467: LD_STRING 
15469: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15470: LD_ADDR_OWVAR 31
15474: PUSH
15475: LD_INT 0
15477: PUSH
15478: LD_INT 0
15480: PUSH
15481: LD_INT 0
15483: PUSH
15484: LD_INT 0
15486: PUSH
15487: EMPTY
15488: LIST
15489: LIST
15490: LIST
15491: LIST
15492: ST_TO_ADDR
// hc_class := class_apeman ;
15493: LD_ADDR_OWVAR 28
15497: PUSH
15498: LD_INT 12
15500: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15501: CALL_OW 44
15505: PPUSH
15506: LD_INT 1
15508: PPUSH
15509: CALL_OW 51
// end ;
15513: LD_VAR 0 1
15517: RET
// export function HackBoom ; begin
15518: LD_INT 0
15520: PPUSH
// uc_side := your_side ;
15521: LD_ADDR_OWVAR 20
15525: PUSH
15526: LD_OWVAR 2
15530: ST_TO_ADDR
// uc_nation := 1 ;
15531: LD_ADDR_OWVAR 21
15535: PUSH
15536: LD_INT 1
15538: ST_TO_ADDR
// vc_chassis := us_morphling ;
15539: LD_ADDR_OWVAR 37
15543: PUSH
15544: LD_INT 5
15546: ST_TO_ADDR
// vc_engine := engine_siberite ;
15547: LD_ADDR_OWVAR 39
15551: PUSH
15552: LD_INT 3
15554: ST_TO_ADDR
// vc_control := control_computer ;
15555: LD_ADDR_OWVAR 38
15559: PUSH
15560: LD_INT 3
15562: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
15563: LD_ADDR_OWVAR 40
15567: PUSH
15568: LD_INT 8
15570: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15571: CALL_OW 45
15575: PPUSH
15576: LD_INT 1
15578: PPUSH
15579: CALL_OW 51
// end ;
15583: LD_VAR 0 1
15587: RET
