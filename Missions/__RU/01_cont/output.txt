// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export LakeApes ; export it_is_your ; export your_units ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 13227 0 0
// PrepareAmericans ;
  28: CALL 12789 0 0
// CreateNature ;
  32: CALL 13939 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 29
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 878 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 30
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 31
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 32
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 35
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 33
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 34
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 , 970 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 36
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: LD_INT 970
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: LD_OWVAR 67
 430: ARRAY
 431: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 5
 442: PPUSH
 443: CALL_OW 12
 447: PUSH
 448: LD_OWVAR 67
 452: MUL
 453: ST_TO_ADDR
// amApeAmount = [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 454: LD_ADDR_EXP 38
 458: PUSH
 459: LD_INT 4
 461: PUSH
 462: LD_INT 5
 464: PUSH
 465: LD_INT 6
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_OWVAR 67
 481: ARRAY
 482: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 , 3 ] [ Difficulty ] ;
 483: LD_ADDR_EXP 39
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 512: LD_ADDR_EXP 40
 516: PUSH
 517: LD_INT 78
 519: PUSH
 520: LD_INT 87
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 527: LD_ADDR_EXP 41
 531: PUSH
 532: LD_INT 72
 534: PUSH
 535: LD_INT 115
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 99
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 131
 554: PUSH
 555: LD_INT 81
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 , 300 ] [ Difficulty ] ;
 567: LD_ADDR_EXP 42
 571: PUSH
 572: LD_INT 500
 574: PUSH
 575: LD_INT 400
 577: PUSH
 578: LD_INT 350
 580: PUSH
 581: LD_INT 300
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_OWVAR 67
 594: ARRAY
 595: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 596: LD_ADDR_EXP 43
 600: PUSH
 601: LD_INT 21000
 603: PUSH
 604: LD_INT 16800
 606: PUSH
 607: LD_INT 12600
 609: PUSH
 610: LD_INT 10500
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: LD_OWVAR 67
 623: ARRAY
 624: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$30 ] [ Difficulty ] ;
 625: LD_ADDR_EXP 44
 629: PUSH
 630: LD_INT 6300
 632: PUSH
 633: LD_INT 5250
 635: PUSH
 636: LD_INT 4200
 638: PUSH
 639: LD_INT 3150
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: ST_TO_ADDR
// end ;
 654: LD_VAR 0 1
 658: RET
// every 0 0$1 trigger debugMode do var i ;
 659: LD_EXP 35
 663: IFFALSE 875
 665: GO 667
 667: DISABLE
 668: LD_INT 0
 670: PPUSH
// begin enable ;
 671: ENABLE
// FogOff ( your_side ) ;
 672: LD_OWVAR 2
 676: PPUSH
 677: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 21
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: FOR_IN
 736: IFFALSE 752
// SetLives ( i , 1000 ) ;
 738: LD_VAR 0 1
 742: PPUSH
 743: LD_INT 1000
 745: PPUSH
 746: CALL_OW 234
 750: GO 735
 752: POP
 753: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_OWVAR 2
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 30
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 30
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 274
 840: PPUSH
 841: LD_INT 2
 843: PPUSH
 844: LD_INT 9999
 846: PPUSH
 847: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 274
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 9999
 866: PPUSH
 867: CALL_OW 277
// end ;
 871: GO 808
 873: POP
 874: POP
// end ; end_of_file
 875: PPOPN 1
 877: END
// export function MissionIntro ; begin
 878: LD_INT 0
 880: PPUSH
// InGameOn ;
 881: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 885: LD_EXP 40
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PUSH
 894: LD_INT 8
 896: MINUS
 897: PPUSH
 898: LD_EXP 40
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 8
 909: MINUS
 910: PPUSH
 911: CALL_OW 84
// wait ( 0 0$3 ) ;
 915: LD_INT 105
 917: PPUSH
 918: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 922: LD_EXP 49
 926: PPUSH
 927: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 931: LD_EXP 49
 935: PPUSH
 936: LD_STRING D1-Bur-1
 938: PPUSH
 939: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 943: LD_EXP 49
 947: PPUSH
 948: LD_INT 94
 950: PPUSH
 951: LD_INT 89
 953: PPUSH
 954: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 958: LD_INT 94
 960: PPUSH
 961: LD_INT 89
 963: PPUSH
 964: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 968: LD_EXP 49
 972: PPUSH
 973: LD_STRING D1-Bur-1a
 975: PPUSH
 976: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 980: LD_EXP 49
 984: PPUSH
 985: LD_INT 102
 987: PPUSH
 988: LD_INT 88
 990: PPUSH
 991: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 995: LD_INT 102
 997: PPUSH
 998: LD_INT 88
1000: PPUSH
1001: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
1005: LD_EXP 49
1009: PPUSH
1010: LD_STRING D1-Bur-1b
1012: PPUSH
1013: CALL_OW 88
// InGameOff ;
1017: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1021: LD_STRING M1
1023: PPUSH
1024: CALL_OW 337
// SaveForQuickRestart ;
1028: CALL_OW 22
// introEnd = true ;
1032: LD_ADDR_EXP 3
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// LakeApes = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
1040: LD_ADDR_EXP 26
1044: PUSH
1045: LD_INT 24
1047: PPUSH
1048: LD_INT 22
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 25
1060: PUSH
1061: LD_INT 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 70
1076: ST_TO_ADDR
// end ;
1077: LD_VAR 0 1
1081: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1082: LD_EXP 49
1086: PPUSH
1087: LD_INT 74
1089: PPUSH
1090: LD_INT 88
1092: PPUSH
1093: CALL_OW 297
1097: PUSH
1098: LD_INT 5
1100: LESS
1101: PUSH
1102: LD_EXP 3
1106: AND
1107: IFFALSE 1132
1109: GO 1111
1111: DISABLE
// begin spotWaterfall = true ;
1112: LD_ADDR_EXP 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1120: LD_EXP 49
1124: PPUSH
1125: LD_STRING DWaterfall-Bur-1
1127: PPUSH
1128: CALL_OW 88
// end ;
1132: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1133: LD_EXP 49
1137: PPUSH
1138: LD_INT 130
1140: PPUSH
1141: LD_INT 96
1143: PPUSH
1144: CALL_OW 297
1148: PUSH
1149: LD_INT 5
1151: LESS
1152: PUSH
1153: LD_EXP 3
1157: AND
1158: IFFALSE 1175
1160: GO 1162
1162: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1163: LD_EXP 49
1167: PPUSH
1168: LD_STRING DCorpse-Bur-1
1170: PPUSH
1171: CALL_OW 88
1175: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1176: LD_EXP 4
1180: NOT
1181: IFFALSE 1275
1183: GO 1185
1185: DISABLE
1186: LD_INT 0
1188: PPUSH
// begin enable ;
1189: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1190: LD_ADDR_VAR 0 1
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 25
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: PUSH
1224: FOR_IN
1225: IFFALSE 1273
// if GetDistUnits ( apeman , Burlak ) < 7 then
1227: LD_VAR 0 1
1231: PPUSH
1232: LD_EXP 49
1236: PPUSH
1237: CALL_OW 296
1241: PUSH
1242: LD_INT 7
1244: LESS
1245: IFFALSE 1271
// begin apemansContact = true ;
1247: LD_ADDR_EXP 4
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1255: LD_EXP 49
1259: PPUSH
1260: LD_STRING D2-Bur-1
1262: PPUSH
1263: CALL_OW 88
// exit ;
1267: POP
1268: POP
1269: GO 1275
// end ;
1271: GO 1224
1273: POP
1274: POP
// end ;
1275: PPOPN 1
1277: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1278: LD_EXP 5
1282: NOT
1283: IFFALSE 1399
1285: GO 1287
1287: DISABLE
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
// begin enable ;
1292: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 12
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: PUSH
1327: FOR_IN
1328: IFFALSE 1397
// if Attacks ( apeman ) then
1330: LD_VAR 0 2
1334: PPUSH
1335: CALL_OW 320
1339: IFFALSE 1395
// if GetSide ( Attacks ( apeman ) ) = 3 then
1341: LD_VAR 0 2
1345: PPUSH
1346: CALL_OW 320
1350: PPUSH
1351: CALL_OW 255
1355: PUSH
1356: LD_INT 3
1358: EQUAL
1359: IFFALSE 1395
// begin attackedByApeman = true ;
1361: LD_ADDR_EXP 5
1365: PUSH
1366: LD_INT 1
1368: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1369: LD_ADDR_EXP 8
1373: PUSH
1374: LD_VAR 0 2
1378: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1379: LD_EXP 49
1383: PPUSH
1384: LD_STRING D2-Bur-1a
1386: PPUSH
1387: CALL_OW 88
// exit ;
1391: POP
1392: POP
1393: GO 1399
// end ;
1395: GO 1327
1397: POP
1398: POP
// end ;
1399: PPOPN 2
1401: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1402: LD_EXP 6
1406: NOT
1407: IFFALSE 1504
1409: GO 1411
1411: DISABLE
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
// begin enable ;
1416: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 24
1424: PPUSH
1425: LD_INT 22
1427: PUSH
1428: LD_INT 0
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 25
1437: PUSH
1438: LD_INT 12
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 70
1453: PUSH
1454: FOR_IN
1455: IFFALSE 1502
// if Attacks ( apeman ) then
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 320
1466: IFFALSE 1500
// if GetSide ( Attacks ( apeman ) ) = 3 then
1468: LD_VAR 0 2
1472: PPUSH
1473: CALL_OW 320
1477: PPUSH
1478: CALL_OW 255
1482: PUSH
1483: LD_INT 3
1485: EQUAL
1486: IFFALSE 1500
// begin attackedByApemanNearLake = true ;
1488: LD_ADDR_EXP 6
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// exit ;
1496: POP
1497: POP
1498: GO 1504
// end ;
1500: GO 1454
1502: POP
1503: POP
// end ;
1504: PPOPN 2
1506: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1507: LD_EXP 9
1511: PPUSH
1512: CALL_OW 303
1516: IFFALSE 1550
1518: GO 1520
1520: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1521: LD_ADDR_EXP 10
1525: PUSH
1526: LD_EXP 9
1530: PPUSH
1531: CALL_OW 250
1535: PUSH
1536: LD_EXP 9
1540: PPUSH
1541: CALL_OW 251
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: ST_TO_ADDR
1550: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1551: LD_EXP 9
1555: PPUSH
1556: CALL_OW 303
1560: PUSH
1561: LD_INT 3
1563: PPUSH
1564: LD_EXP 10
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_EXP 10
1577: PUSH
1578: LD_INT 2
1580: ARRAY
1581: PPUSH
1582: CALL_OW 293
1586: AND
1587: IFFALSE 1906
1589: GO 1591
1591: DISABLE
1592: LD_INT 0
1594: PPUSH
// begin wait ( 0 0$2 ) ;
1595: LD_INT 70
1597: PPUSH
1598: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1602: LD_EXP 49
1606: PPUSH
1607: LD_STRING D2a-Bur-1
1609: PPUSH
1610: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1614: LD_INT 22
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 21
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 69
1642: PUSH
1643: LD_INT 1
1645: EQUAL
1646: IFFALSE 1662
// Say ( Burlak , D2a-Bur-2 ) else
1648: LD_EXP 49
1652: PPUSH
1653: LD_STRING D2a-Bur-2
1655: PPUSH
1656: CALL_OW 88
1660: GO 1906
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1662: LD_ADDR_VAR 0 1
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 69
1695: PUSH
1696: LD_EXP 49
1700: PUSH
1701: LD_EXP 57
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: DIFF
1710: PPUSH
1711: LD_EXP 10
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: LD_EXP 10
1724: PUSH
1725: LD_INT 2
1727: ARRAY
1728: PPUSH
1729: CALL_OW 73
1733: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1734: LD_ADDR_EXP 11
1738: PUSH
1739: LD_VAR 0 1
1743: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_EXP 10
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PPUSH
1758: LD_EXP 10
1762: PUSH
1763: LD_INT 2
1765: ARRAY
1766: PPUSH
1767: CALL_OW 111
// case nearUnit of Belkov :
1771: LD_VAR 0 1
1775: PUSH
1776: LD_EXP 54
1780: DOUBLE
1781: EQUAL
1782: IFTRUE 1786
1784: GO 1801
1786: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1787: LD_EXP 54
1791: PPUSH
1792: LD_STRING D2a-Bel-1
1794: PPUSH
1795: CALL_OW 88
1799: GO 1868
1801: LD_EXP 56
1805: DOUBLE
1806: EQUAL
1807: IFTRUE 1811
1809: GO 1826
1811: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1812: LD_EXP 56
1816: PPUSH
1817: LD_STRING D2a-Kir-1
1819: PPUSH
1820: CALL_OW 88
1824: GO 1868
1826: POP
// if GetSex ( nearUnit ) = sex_male then
1827: LD_VAR 0 1
1831: PPUSH
1832: CALL_OW 258
1836: PUSH
1837: LD_INT 1
1839: EQUAL
1840: IFFALSE 1856
// Say ( nearUnit , D2a-RSol1-1 ) else
1842: LD_VAR 0 1
1846: PPUSH
1847: LD_STRING D2a-RSol1-1
1849: PPUSH
1850: CALL_OW 88
1854: GO 1868
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1856: LD_VAR 0 1
1860: PPUSH
1861: LD_STRING D2a-RFSol1-1
1863: PPUSH
1864: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1868: LD_EXP 57
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: PUSH
1882: LD_EXP 57
1886: PPUSH
1887: CALL_OW 302
1891: AND
1892: IFFALSE 1906
// Say ( Gnyevko , D2a-Gny-1 ) ;
1894: LD_EXP 57
1898: PPUSH
1899: LD_STRING D2a-Gny-1
1901: PPUSH
1902: CALL_OW 88
// end ; end ;
1906: PPOPN 1
1908: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1909: LD_EXP 12
1913: NOT
1914: PUSH
1915: LD_EXP 43
1919: PUSH
1920: LD_INT 70
1922: GREATER
1923: AND
1924: IFFALSE 1944
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1930: LD_EXP 57
1934: PPUSH
1935: LD_EXP 42
1939: PPUSH
1940: CALL_OW 234
// end ;
1944: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1945: LD_INT 3
1947: PPUSH
1948: LD_EXP 57
1952: PPUSH
1953: CALL_OW 292
1957: IFFALSE 2569
1959: GO 1961
1961: DISABLE
1962: LD_INT 0
1964: PPUSH
1965: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1966: LD_EXP 57
1970: PPUSH
1971: CALL_OW 87
// DialogueOn ;
1975: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1979: LD_ADDR_VAR 0 1
1983: PUSH
1984: LD_INT 22
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 21
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PPUSH
2008: CALL_OW 69
2012: PPUSH
2013: LD_EXP 57
2017: PPUSH
2018: CALL_OW 74
2022: ST_TO_ADDR
// if nearUnit = Burlak then
2023: LD_VAR 0 1
2027: PUSH
2028: LD_EXP 49
2032: EQUAL
2033: IFFALSE 2395
// begin Say ( Burlak , D3-Bur-1 ) ;
2035: LD_EXP 49
2039: PPUSH
2040: LD_STRING D3-Bur-1
2042: PPUSH
2043: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2047: LD_EXP 57
2051: PPUSH
2052: LD_STRING D3-Gny-1
2054: PPUSH
2055: CALL_OW 88
// if apeWithRadioKiller then
2059: LD_EXP 11
2063: IFFALSE 2103
// begin if apeWithRadioKiller = Burlak then
2065: LD_EXP 11
2069: PUSH
2070: LD_EXP 49
2074: EQUAL
2075: IFFALSE 2091
// Say ( Burlak , D3-Bur-2 ) else
2077: LD_EXP 49
2081: PPUSH
2082: LD_STRING D3-Bur-2
2084: PPUSH
2085: CALL_OW 88
2089: GO 2103
// Say ( Burlak , D3-Bur-2a ) ;
2091: LD_EXP 49
2095: PPUSH
2096: LD_STRING D3-Bur-2a
2098: PPUSH
2099: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2103: LD_EXP 49
2107: PPUSH
2108: LD_STRING D3-Bur-2b
2110: PPUSH
2111: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: EQUAL
2147: PUSH
2148: LD_EXP 14
2152: NOT
2153: AND
2154: IFFALSE 2206
// begin Say ( Burlak , D3-Bur-2c ) ;
2156: LD_EXP 49
2160: PPUSH
2161: LD_STRING D3-Bur-2c
2163: PPUSH
2164: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2168: LD_EXP 57
2172: PPUSH
2173: LD_STRING D3-Gny-2
2175: PPUSH
2176: CALL_OW 88
// DialogueOff ;
2180: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2184: LD_EXP 57
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 235
// gnyevkoSaved = true ;
2196: LD_ADDR_EXP 12
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
// exit ;
2204: GO 2569
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2206: LD_INT 22
2208: PUSH
2209: LD_INT 3
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 21
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PPUSH
2230: CALL_OW 69
2234: PUSH
2235: LD_INT 1
2237: GREATER
2238: PUSH
2239: LD_EXP 14
2243: OR
2244: PUSH
2245: LD_EXP 22
2249: NOT
2250: AND
2251: IFFALSE 2303
// begin Say ( Burlak , D3-Bur-2d ) ;
2253: LD_EXP 49
2257: PPUSH
2258: LD_STRING D3-Bur-2d
2260: PPUSH
2261: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2265: LD_EXP 57
2269: PPUSH
2270: LD_STRING D3-Gny-2
2272: PPUSH
2273: CALL_OW 88
// DialogueOff ;
2277: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2281: LD_EXP 57
2285: PPUSH
2286: LD_INT 3
2288: PPUSH
2289: CALL_OW 235
// gnyevkoSaved = true ;
2293: LD_ADDR_EXP 12
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// exit ;
2301: GO 2569
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2303: LD_INT 22
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 21
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: GREATER
2335: PUSH
2336: LD_EXP 22
2340: AND
2341: IFFALSE 2393
// begin Say ( Burlak , D3-Bur-2e ) ;
2343: LD_EXP 49
2347: PPUSH
2348: LD_STRING D3-Bur-2e
2350: PPUSH
2351: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2355: LD_EXP 57
2359: PPUSH
2360: LD_STRING D3-Gny-2
2362: PPUSH
2363: CALL_OW 88
// DialogueOff ;
2367: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2371: LD_EXP 57
2375: PPUSH
2376: LD_INT 3
2378: PPUSH
2379: CALL_OW 235
// gnyevkoSaved = true ;
2383: LD_ADDR_EXP 12
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// exit ;
2391: GO 2569
// end ; end else
2393: GO 2569
// begin if GetSex ( nearUnit ) = sex_male then
2395: LD_VAR 0 1
2399: PPUSH
2400: CALL_OW 258
2404: PUSH
2405: LD_INT 1
2407: EQUAL
2408: IFFALSE 2424
// Say ( nearUnit , D3-RSol1-1 ) else
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_STRING D3-RSol1-1
2417: PPUSH
2418: CALL_OW 88
2422: GO 2436
// Say ( nearUnit , D3-RFSol1-1 ) ;
2424: LD_VAR 0 1
2428: PPUSH
2429: LD_STRING D3-RFSol1-1
2431: PPUSH
2432: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2436: LD_EXP 57
2440: PPUSH
2441: LD_STRING D3-Gny-1
2443: PPUSH
2444: CALL_OW 88
// if apeWithRadioKiller then
2448: LD_EXP 11
2452: IFFALSE 2492
// begin if apeWithRadioKiller = Burlak then
2454: LD_EXP 11
2458: PUSH
2459: LD_EXP 49
2463: EQUAL
2464: IFFALSE 2480
// Say ( Burlak , D3-Bur-2 ) else
2466: LD_EXP 49
2470: PPUSH
2471: LD_STRING D3-Bur-2
2473: PPUSH
2474: CALL_OW 88
2478: GO 2492
// Say ( Burlak , D3-Bur-2a ) ;
2480: LD_EXP 49
2484: PPUSH
2485: LD_STRING D3-Bur-2a
2487: PPUSH
2488: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 258
2501: PUSH
2502: LD_INT 1
2504: EQUAL
2505: IFFALSE 2521
// Say ( nearUnit , D3-RSol1-2 ) else
2507: LD_VAR 0 1
2511: PPUSH
2512: LD_STRING D3-RSol1-2
2514: PPUSH
2515: CALL_OW 88
2519: GO 2533
// Say ( nearUnit , D3-RFSol1-2 ) ;
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_STRING D3-RFSol1-2
2528: PPUSH
2529: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2533: LD_EXP 57
2537: PPUSH
2538: LD_STRING D3-Gny-2a
2540: PPUSH
2541: CALL_OW 88
// DialogueOff ;
2545: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2549: LD_EXP 57
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL_OW 235
// gnyevkoSaved = true ;
2561: LD_ADDR_EXP 12
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// end ; end ;
2569: PPOPN 2
2571: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2572: LD_EXP 12
2576: NOT
2577: PUSH
2578: LD_EXP 21
2582: NOT
2583: OR
2584: IFFALSE 2779
2586: GO 2588
2588: DISABLE
2589: LD_INT 0
2591: PPUSH
// begin enable ;
2592: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2593: LD_EXP 12
2597: NOT
2598: PUSH
2599: LD_EXP 43
2603: PUSH
2604: LD_INT 70
2606: GREATER
2607: AND
2608: IFFALSE 2686
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2610: LD_ADDR_VAR 0 1
2614: PUSH
2615: LD_INT 22
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 25
2627: PUSH
2628: LD_INT 12
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2684
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_EXP 57
2656: PPUSH
2657: CALL_OW 250
2661: PPUSH
2662: LD_EXP 57
2666: PPUSH
2667: CALL_OW 251
2671: PPUSH
2672: LD_INT 10
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL 9015 0 5
2682: GO 2644
2684: POP
2685: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2686: LD_EXP 21
2690: NOT
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_INT 70
2699: GREATER
2700: AND
2701: IFFALSE 2779
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2703: LD_ADDR_VAR 0 1
2707: PUSH
2708: LD_INT 22
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 25
2720: PUSH
2721: LD_INT 12
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2777
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2740: LD_VAR 0 1
2744: PPUSH
2745: LD_EXP 56
2749: PPUSH
2750: CALL_OW 250
2754: PPUSH
2755: LD_EXP 56
2759: PPUSH
2760: CALL_OW 251
2764: PPUSH
2765: LD_INT 10
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL 9015 0 5
2775: GO 2737
2777: POP
2778: POP
// end ;
2779: PPOPN 1
2781: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2782: LD_EXP 12
2786: NOT
2787: PUSH
2788: LD_EXP 21
2792: NOT
2793: OR
2794: IFFALSE 2905
2796: GO 2798
2798: DISABLE
// begin enable ;
2799: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2800: LD_EXP 12
2804: NOT
2805: PUSH
2806: LD_EXP 43
2810: PUSH
2811: LD_INT 0
2813: GREATER
2814: AND
2815: IFFALSE 2831
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2817: LD_ADDR_EXP 43
2821: PUSH
2822: LD_EXP 43
2826: PUSH
2827: LD_INT 35
2829: MINUS
2830: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2831: LD_EXP 56
2835: PPUSH
2836: CALL_OW 305
2840: PUSH
2841: LD_EXP 21
2845: NOT
2846: AND
2847: PUSH
2848: LD_EXP 44
2852: PUSH
2853: LD_INT 0
2855: GREATER
2856: AND
2857: IFFALSE 2873
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2859: LD_ADDR_EXP 44
2863: PUSH
2864: LD_EXP 44
2868: PUSH
2869: LD_INT 35
2871: MINUS
2872: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2873: LD_EXP 56
2877: PPUSH
2878: CALL_OW 305
2882: PUSH
2883: LD_EXP 21
2887: NOT
2888: AND
2889: IFFALSE 2905
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2891: LD_ADDR_EXP 29
2895: PUSH
2896: LD_EXP 29
2900: PUSH
2901: LD_INT 35
2903: PLUS
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2906: LD_INT 3
2908: PPUSH
2909: LD_EXP 50
2913: PPUSH
2914: CALL_OW 292
2918: PUSH
2919: LD_INT 6
2921: PPUSH
2922: LD_EXP 49
2926: PPUSH
2927: CALL_OW 292
2931: OR
2932: PUSH
2933: LD_EXP 57
2937: PPUSH
2938: CALL_OW 255
2942: PUSH
2943: LD_INT 3
2945: EQUAL
2946: PUSH
2947: LD_INT 6
2949: PPUSH
2950: LD_EXP 57
2954: PPUSH
2955: CALL_OW 292
2959: AND
2960: OR
2961: PUSH
2962: LD_EXP 14
2966: NOT
2967: AND
2968: IFFALSE 3821
2970: GO 2972
2972: DISABLE
// begin enable ;
2973: ENABLE
// InGameOn ;
2974: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2978: LD_EXP 50
2982: PPUSH
2983: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2987: LD_EXP 57
2991: PPUSH
2992: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2996: LD_EXP 49
3000: PUSH
3001: LD_EXP 57
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 200
// DialogueOn ;
3014: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3018: LD_EXP 13
3022: IFFALSE 3286
// begin meetPokryshkin = true ;
3024: LD_ADDR_EXP 14
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3032: LD_INT 6
3034: PPUSH
3035: LD_INT 3
3037: PPUSH
3038: CALL_OW 343
// DialogueOff ;
3042: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3046: LD_EXP 49
3050: PPUSH
3051: LD_EXP 50
3055: PPUSH
3056: CALL_OW 250
3060: PPUSH
3061: LD_EXP 50
3065: PPUSH
3066: CALL_OW 251
3070: PPUSH
3071: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3075: LD_EXP 49
3079: PPUSH
3080: LD_EXP 50
3084: PPUSH
3085: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3089: LD_EXP 50
3093: PPUSH
3094: LD_EXP 49
3098: PPUSH
3099: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3103: LD_EXP 57
3107: PPUSH
3108: LD_STRING D4-Gny-3
3110: PPUSH
3111: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3115: LD_EXP 49
3119: PPUSH
3120: LD_STRING D4-Bur-3
3122: PPUSH
3123: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3127: LD_EXP 50
3131: PPUSH
3132: LD_STRING D4-Pok-4
3134: PPUSH
3135: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3139: LD_EXP 45
3143: PPUSH
3144: LD_INT 18
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 49
// wait ( 0 0$2 ) ;
3154: LD_INT 70
3156: PPUSH
3157: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3161: LD_EXP 49
3165: PPUSH
3166: LD_STRING D4-Bur-4
3168: PPUSH
3169: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3173: LD_EXP 50
3177: PPUSH
3178: LD_STRING D4-Pok-5
3180: PPUSH
3181: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3185: LD_EXP 45
3189: PPUSH
3190: LD_STRING D4-Sol1-5
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3209: LD_EXP 50
3213: PPUSH
3214: LD_STRING D4-Pok-6
3216: PPUSH
3217: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3221: LD_EXP 50
3225: PPUSH
3226: LD_STRING D4-Pok-6a
3228: PPUSH
3229: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3233: LD_EXP 49
3237: PPUSH
3238: LD_STRING D4-Bur-6
3240: PPUSH
3241: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3245: LD_EXP 50
3249: PPUSH
3250: LD_STRING D4-Pok-7
3252: PPUSH
3253: CALL_OW 88
// DialogueOff ;
3257: CALL_OW 7
// InGameOff ;
3261: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3265: LD_STRING M2
3267: PPUSH
3268: CALL_OW 337
// goToHill = true ;
3272: LD_ADDR_EXP 15
3276: PUSH
3277: LD_INT 1
3279: ST_TO_ADDR
// MoveToHill ;
3280: CALL 10895 0 0
// exit ;
3284: GO 3821
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3286: LD_EXP 49
3290: PUSH
3291: LD_EXP 57
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3304: LD_EXP 50
3308: PPUSH
3309: LD_STRING D4-Pok-1
3311: PPUSH
3312: CALL_OW 88
// if GetDistUnits ( Gnyevko , Pokryshkin ) <= 15 and GetDistUnits ( Burlak , Pokryshkin ) > 20 then
3316: LD_EXP 57
3320: PPUSH
3321: LD_EXP 50
3325: PPUSH
3326: CALL_OW 296
3330: PUSH
3331: LD_INT 15
3333: LESSEQUAL
3334: PUSH
3335: LD_EXP 49
3339: PPUSH
3340: LD_EXP 50
3344: PPUSH
3345: CALL_OW 296
3349: PUSH
3350: LD_INT 20
3352: GREATER
3353: AND
3354: IFFALSE 3464
// begin ComWalk ( Gnyevko ) ;
3356: LD_EXP 57
3360: PPUSH
3361: CALL_OW 138
// Say ( Gnyevko , D4-Gny-1 ) ;
3365: LD_EXP 57
3369: PPUSH
3370: LD_STRING D4-Gny-1
3372: PPUSH
3373: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-2 ) ;
3377: LD_EXP 50
3381: PPUSH
3382: LD_STRING D4-Pok-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3389: LD_EXP 57
3393: PPUSH
3394: LD_STRING D4-Gny-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3401: LD_EXP 50
3405: PPUSH
3406: LD_STRING D4-Pok-3
3408: PPUSH
3409: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3413: LD_ADDR_EXP 13
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3421: LD_EXP 57
3425: PPUSH
3426: LD_INT 6
3428: PPUSH
3429: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3433: LD_EXP 57
3437: PPUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_EXP 50
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: CALL_OW 171
// end else
3462: GO 3813
// begin meetPokryshkin = true ;
3464: LD_ADDR_EXP 14
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3472: LD_INT 6
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: CALL_OW 343
// DialogueOff ;
3482: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3486: LD_EXP 57
3490: PPUSH
3491: CALL_OW 255
3495: PUSH
3496: LD_INT 3
3498: EQUAL
3499: PUSH
3500: LD_EXP 57
3504: PPUSH
3505: CALL_OW 302
3509: AND
3510: IFFALSE 3587
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3512: LD_EXP 49
3516: PUSH
3517: LD_EXP 57
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PPUSH
3526: LD_EXP 50
3530: PPUSH
3531: CALL_OW 250
3535: PPUSH
3536: LD_EXP 50
3540: PPUSH
3541: CALL_OW 251
3545: PPUSH
3546: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3550: LD_EXP 49
3554: PUSH
3555: LD_EXP 57
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: LD_EXP 50
3568: PPUSH
3569: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3573: LD_EXP 57
3577: PPUSH
3578: LD_INT 6
3580: PPUSH
3581: CALL_OW 235
// end else
3585: GO 3630
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3587: LD_EXP 49
3591: PPUSH
3592: LD_EXP 50
3596: PPUSH
3597: CALL_OW 250
3601: PPUSH
3602: LD_EXP 50
3606: PPUSH
3607: CALL_OW 251
3611: PPUSH
3612: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3616: LD_EXP 49
3620: PPUSH
3621: LD_EXP 50
3625: PPUSH
3626: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3630: LD_EXP 50
3634: PPUSH
3635: LD_EXP 49
3639: PPUSH
3640: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3644: LD_EXP 49
3648: PPUSH
3649: LD_STRING D4-Bur-3
3651: PPUSH
3652: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3656: LD_EXP 50
3660: PPUSH
3661: LD_STRING D4-Pok-4
3663: PPUSH
3664: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3668: LD_EXP 45
3672: PPUSH
3673: LD_INT 18
3675: PPUSH
3676: LD_INT 1
3678: PPUSH
3679: CALL_OW 49
// wait ( 0 0$2 ) ;
3683: LD_INT 70
3685: PPUSH
3686: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3690: LD_EXP 49
3694: PPUSH
3695: LD_STRING D4-Bur-4
3697: PPUSH
3698: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3702: LD_EXP 50
3706: PPUSH
3707: LD_STRING D4-Pok-5
3709: PPUSH
3710: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3714: LD_EXP 45
3718: PPUSH
3719: LD_STRING D4-Sol1-5
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3738: LD_EXP 50
3742: PPUSH
3743: LD_STRING D4-Pok-6
3745: PPUSH
3746: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3750: LD_EXP 50
3754: PPUSH
3755: LD_STRING D4-Pok-6a
3757: PPUSH
3758: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3762: LD_EXP 49
3766: PPUSH
3767: LD_STRING D4-Bur-6
3769: PPUSH
3770: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3774: LD_EXP 50
3778: PPUSH
3779: LD_STRING D4-Pok-7
3781: PPUSH
3782: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3786: LD_STRING M2
3788: PPUSH
3789: CALL_OW 337
// goToHill = true ;
3793: LD_ADDR_EXP 15
3797: PUSH
3798: LD_INT 1
3800: ST_TO_ADDR
// DialogueOff ;
3801: CALL_OW 7
// InGameOff ;
3805: CALL_OW 9
// MoveToHill ;
3809: CALL 10895 0 0
// end ; DialogueOff ;
3813: CALL_OW 7
// InGameOff ;
3817: CALL_OW 9
// end ;
3821: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3822: LD_EXP 49
3826: PPUSH
3827: LD_EXP 50
3831: PPUSH
3832: CALL_OW 296
3836: PUSH
3837: LD_INT 10
3839: GREATER
3840: PUSH
3841: LD_EXP 15
3845: AND
3846: PUSH
3847: LD_EXP 18
3851: NOT
3852: AND
3853: IFFALSE 4054
3855: GO 3857
3857: DISABLE
3858: LD_INT 0
3860: PPUSH
// begin enable ;
3861: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3862: LD_ADDR_VAR 0 1
3866: PUSH
3867: LD_EXP 50
3871: PUSH
3872: LD_EXP 51
3876: PUSH
3877: LD_EXP 52
3881: PUSH
3882: LD_EXP 53
3886: PUSH
3887: LD_EXP 54
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3899: LD_EXP 57
3903: PPUSH
3904: CALL_OW 255
3908: PUSH
3909: LD_INT 6
3911: EQUAL
3912: PUSH
3913: LD_EXP 12
3917: AND
3918: IFFALSE 3936
// ruSolds = ruSolds ^ Gnyevko ;
3920: LD_ADDR_VAR 0 1
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_EXP 57
3934: ADD
3935: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3945: LD_EXP 49
3949: PPUSH
3950: CALL_OW 87
// DialogueOn ;
3954: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3958: LD_EXP 50
3962: PPUSH
3963: LD_STRING DSplit-Pok-1
3965: PPUSH
3966: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3970: LD_EXP 49
3974: PPUSH
3975: LD_STRING DSplit-Bur-1
3977: PPUSH
3978: CALL_OW 88
// DialogueOff ;
3982: CALL_OW 7
// InGameOn ;
3986: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3990: LD_EXP 49
3994: PPUSH
3995: LD_EXP 50
3999: PPUSH
4000: CALL_OW 250
4004: PPUSH
4005: LD_EXP 50
4009: PPUSH
4010: CALL_OW 251
4014: PPUSH
4015: CALL_OW 111
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4026: LD_EXP 49
4030: PPUSH
4031: LD_EXP 50
4035: PPUSH
4036: CALL_OW 296
4040: PUSH
4041: LD_INT 6
4043: LESS
4044: IFFALSE 3990
// InGameOff ;
4046: CALL_OW 9
// MoveToHill ;
4050: CALL 10895 0 0
// end ;
4054: PPOPN 1
4056: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
// traitor = true ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// DialogueOn ;
4069: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4073: LD_EXP 50
4077: PPUSH
4078: LD_STRING DAttack-Pok-1
4080: PPUSH
4081: CALL_OW 88
// DialogueOff ;
4085: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 6
4094: PPUSH
4095: LD_INT 2
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4105: LD_INT 22
4107: PUSH
4108: LD_INT 6
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PPUSH
4134: LD_EXP 49
4138: PPUSH
4139: CALL_OW 115
// end ;
4143: LD_VAR 0 1
4147: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4148: LD_EXP 50
4152: PPUSH
4153: LD_INT 65
4155: PPUSH
4156: LD_INT 59
4158: PPUSH
4159: CALL_OW 297
4163: PUSH
4164: LD_INT 4
4166: LESS
4167: PUSH
4168: LD_EXP 18
4172: NOT
4173: AND
4174: IFFALSE 4371
4176: GO 4178
4178: DISABLE
// begin InGameOn ;
4179: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4183: LD_INT 55
4185: PPUSH
4186: LD_INT 50
4188: PPUSH
4189: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4193: LD_EXP 49
4197: PPUSH
4198: LD_INT 66
4200: PPUSH
4201: LD_INT 57
4203: PPUSH
4204: CALL_OW 111
// AddComHold ( Burlak ) ;
4208: LD_EXP 49
4212: PPUSH
4213: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4217: LD_EXP 45
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: LD_INT 55
4227: PPUSH
4228: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4232: LD_INT 35
4234: PPUSH
4235: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_EXP 50
4246: PPUSH
4247: CALL_OW 292
4251: IFFALSE 4232
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4253: LD_EXP 45
4257: PUSH
4258: LD_EXP 50
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 87
// ComStop ( Charles ) ;
4271: LD_EXP 45
4275: PPUSH
4276: CALL_OW 141
// AddComHold ( Charles ) ;
4280: LD_EXP 45
4284: PPUSH
4285: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4289: LD_EXP 45
4293: PPUSH
4294: LD_EXP 50
4298: PPUSH
4299: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4303: LD_EXP 45
4307: PPUSH
4308: LD_STRING D5-Sol1-1
4310: PPUSH
4311: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4315: LD_EXP 50
4319: PPUSH
4320: LD_STRING D5-Pok-1
4322: PPUSH
4323: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4327: LD_INT 1
4329: PPUSH
4330: LD_INT 6
4332: PPUSH
4333: LD_INT 2
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4343: LD_INT 1
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: LD_INT 2
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4359: LD_EXP 45
4363: PPUSH
4364: LD_STRING D5-Sol1-2
4366: PPUSH
4367: CALL_OW 88
// end ;
4371: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4372: LD_EXP 45
4376: PPUSH
4377: CALL_OW 301
4381: PUSH
4382: LD_EXP 15
4386: AND
4387: IFFALSE 4978
4389: GO 4391
4391: DISABLE
4392: LD_INT 0
4394: PPUSH
// begin InGameOn ;
4395: CALL_OW 8
// goToHill = false ;
4399: LD_ADDR_EXP 15
4403: PUSH
4404: LD_INT 0
4406: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 6
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PPUSH
4436: CALL_OW 141
// wait ( 0 0$1 ) ;
4440: LD_INT 35
4442: PPUSH
4443: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4447: LD_INT 22
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 21
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PPUSH
4476: CALL_OW 138
// wait ( 0 0$1 ) ;
4480: LD_INT 35
4482: PPUSH
4483: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4487: LD_INT 55
4489: PPUSH
4490: LD_INT 50
4492: PPUSH
4493: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4497: LD_EXP 49
4501: PPUSH
4502: LD_INT 56
4504: PPUSH
4505: LD_INT 56
4507: PPUSH
4508: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4512: LD_INT 22
4514: PUSH
4515: LD_INT 6
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 1
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_INT 56
4543: PPUSH
4544: LD_INT 56
4546: PPUSH
4547: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4551: LD_EXP 49
4555: PPUSH
4556: LD_STRING D5-Bur-2
4558: PPUSH
4559: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4563: LD_EXP 50
4567: PPUSH
4568: LD_STRING D5-Pok-2
4570: PPUSH
4571: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4575: LD_EXP 54
4579: PPUSH
4580: LD_STRING D5-Bel-2
4582: PPUSH
4583: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4587: LD_EXP 50
4591: PPUSH
4592: LD_STRING D5-Pok-3
4594: PPUSH
4595: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4599: LD_EXP 57
4603: PPUSH
4604: CALL_OW 255
4608: PUSH
4609: LD_INT 6
4611: EQUAL
4612: IFFALSE 4626
// Say ( Gnyevko , D5-Gny-3 ) ;
4614: LD_EXP 57
4618: PPUSH
4619: LD_STRING D5-Gny-3
4621: PPUSH
4622: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4626: LD_EXP 49
4630: PPUSH
4631: LD_STRING D5-Bur-3
4633: PPUSH
4634: CALL_OW 88
// interface_hidden = true ;
4638: LD_ADDR_OWVAR 54
4642: PUSH
4643: LD_INT 1
4645: ST_TO_ADDR
// IngameOff ;
4646: CALL_OW 9
// wait ( 0 0$2 ) ;
4650: LD_INT 70
4652: PPUSH
4653: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4657: LD_EXP 49
4661: PPUSH
4662: LD_INT 85
4664: PPUSH
4665: LD_INT 64
4667: PPUSH
4668: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4672: LD_INT 22
4674: PUSH
4675: LD_INT 6
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: PPUSH
4701: LD_INT 85
4703: PPUSH
4704: LD_INT 64
4706: PPUSH
4707: CALL_OW 111
// interface_hidden = false ;
4711: LD_ADDR_OWVAR 54
4715: PUSH
4716: LD_INT 0
4718: ST_TO_ADDR
// InGameOn ;
4719: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4723: LD_EXP 49
4727: PPUSH
4728: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4732: LD_EXP 50
4736: PPUSH
4737: LD_STRING D6-Pok-1
4739: PPUSH
4740: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4744: LD_EXP 49
4748: PPUSH
4749: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4753: LD_EXP 49
4757: PPUSH
4758: LD_STRING D6-Bur-1
4760: PPUSH
4761: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4765: LD_EXP 49
4769: PPUSH
4770: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4774: LD_EXP 50
4778: PPUSH
4779: LD_STRING D6-Pok-2
4781: PPUSH
4782: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4786: LD_EXP 49
4790: PPUSH
4791: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4795: LD_EXP 54
4799: PPUSH
4800: LD_STRING D6-Bel-2
4802: PPUSH
4803: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4807: LD_EXP 49
4811: PPUSH
4812: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4816: LD_EXP 49
4820: PPUSH
4821: LD_STRING D6-Bur-2
4823: PPUSH
4824: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4828: LD_EXP 49
4832: PPUSH
4833: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4837: LD_EXP 50
4841: PPUSH
4842: LD_STRING D6-Pok-3
4844: PPUSH
4845: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4849: LD_EXP 49
4853: PPUSH
4854: CALL_OW 87
// SayRadioNoFace ( Kurin , D6-Kur-3 ) ;
4858: LD_EXP 58
4862: PPUSH
4863: LD_STRING D6-Kur-3
4865: PPUSH
4866: CALL_OW 586
// CenterNowOnUnits ( Burlak ) ;
4870: LD_EXP 49
4874: PPUSH
4875: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING D6-Pok-4
4886: PPUSH
4887: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4891: LD_EXP 49
4895: PPUSH
4896: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4900: LD_EXP 54
4904: PPUSH
4905: LD_STRING D6-Bel-4
4907: PPUSH
4908: CALL_OW 88
// InGameOff ;
4912: CALL_OW 9
// interface_hidden = false ;
4916: LD_ADDR_OWVAR 54
4920: PUSH
4921: LD_INT 0
4923: ST_TO_ADDR
// ComMoveToArea ( Pokryshkin , PokryszkinAttack ) ;
4924: LD_EXP 50
4928: PPUSH
4929: LD_INT 27
4931: PPUSH
4932: CALL_OW 113
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , PokryszkinAttack ) ;
4936: LD_INT 22
4938: PUSH
4939: LD_INT 6
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PPUSH
4960: CALL_OW 69
4964: PUSH
4965: LD_EXP 50
4969: DIFF
4970: PPUSH
4971: LD_INT 27
4973: PPUSH
4974: CALL_OW 113
// end ;
4978: PPOPN 1
4980: END
// every 0 0$1 trigger IsInArea ( Pokryshkin , PokryszkinAttack ) do
4981: LD_EXP 50
4985: PPUSH
4986: LD_INT 27
4988: PPUSH
4989: CALL_OW 308
4993: IFFALSE 5076
4995: GO 4997
4997: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4998: LD_EXP 50
5002: PPUSH
5003: LD_STRING D7-Pok-1
5005: PPUSH
5006: CALL_OW 88
// AddComAttackUnit ( Pokryshkin , am_bun ) ;
5010: LD_EXP 50
5014: PPUSH
5015: LD_INT 23
5017: PPUSH
5018: CALL_OW 175
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , am_bun ) ;
5022: LD_INT 22
5024: PUSH
5025: LD_INT 6
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 21
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: CALL_OW 69
5050: PUSH
5051: LD_EXP 50
5055: DIFF
5056: PPUSH
5057: LD_INT 23
5059: PPUSH
5060: CALL_OW 175
// DoNotAttack ( 1 , Gnyevko ) ;
5064: LD_INT 1
5066: PPUSH
5067: LD_EXP 57
5071: PPUSH
5072: CALL_OW 471
// end ;
5076: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5077: LD_INT 1
5079: PPUSH
5080: LD_EXP 50
5084: PPUSH
5085: CALL_OW 292
5089: PUSH
5090: LD_EXP 45
5094: PPUSH
5095: CALL_OW 301
5099: AND
5100: IFFALSE 5119
5102: GO 5104
5104: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5105: LD_EXP 46
5109: PPUSH
5110: LD_EXP 50
5114: PPUSH
5115: CALL_OW 115
5119: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 23
5125: PPUSH
5126: CALL_OW 292
5130: IFFALSE 5147
5132: GO 5134
5134: DISABLE
// begin Say ( Johanna , D7-FSol1-1 ) ;
5135: LD_EXP 46
5139: PPUSH
5140: LD_STRING D7-FSol1-1
5142: PPUSH
5143: CALL_OW 88
// end ;
5147: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5148: LD_EXP 50
5152: PPUSH
5153: CALL_OW 303
5157: IFFALSE 5689
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 6
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 21
5184: PUSH
5185: LD_INT 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 50
5194: PUSH
5195: EMPTY
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 69
5207: PUSH
5208: LD_EXP 54
5212: DIFF
5213: ST_TO_ADDR
// DialogueOn ;
5214: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5218: LD_EXP 54
5222: PPUSH
5223: LD_STRING D7a-Bel-1
5225: PPUSH
5226: CALL_OW 88
// DialogueOff ;
5230: CALL_OW 7
// for i := 1 to ruSolds do
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5308
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5252: LD_VAR 0 3
5256: PUSH
5257: LD_VAR 0 1
5261: ARRAY
5262: PPUSH
5263: LD_INT 87
5265: PUSH
5266: LD_VAR 0 1
5270: PLUS
5271: PPUSH
5272: LD_INT 63
5274: PUSH
5275: LD_VAR 0 1
5279: PLUS
5280: PPUSH
5281: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5285: LD_VAR 0 3
5289: PUSH
5290: LD_VAR 0 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 89
5298: PPUSH
5299: LD_INT 67
5301: PPUSH
5302: CALL_OW 178
// end ;
5306: GO 5249
5308: POP
5309: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5310: LD_EXP 54
5314: PPUSH
5315: LD_INT 89
5317: PPUSH
5318: LD_INT 67
5320: PPUSH
5321: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5325: LD_EXP 54
5329: PPUSH
5330: LD_INT 88
5332: PPUSH
5333: LD_INT 66
5335: PPUSH
5336: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5340: LD_EXP 51
5344: PPUSH
5345: LD_STRING D7a-RSol1-1
5347: PPUSH
5348: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5352: LD_EXP 46
5356: PPUSH
5357: LD_STRING D7a-FSol1-1
5359: PPUSH
5360: CALL_OW 88
// wait ( 0 0$12 ) ;
5364: LD_INT 420
5366: PPUSH
5367: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5371: LD_EXP 54
5375: PPUSH
5376: LD_STRING D7b-Bel-1
5378: PPUSH
5379: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5383: LD_EXP 52
5387: PPUSH
5388: LD_STRING D7b-FSol1-1
5390: PPUSH
5391: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5395: LD_EXP 54
5399: PPUSH
5400: LD_STRING D7b-Bel-2
5402: PPUSH
5403: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5407: LD_EXP 51
5411: PPUSH
5412: LD_STRING D7b-RSol1-2
5414: PPUSH
5415: CALL_OW 88
// for unit in ruSolds do
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 3
5428: PUSH
5429: FOR_IN
5430: IFFALSE 5663
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5432: LD_EXP 49
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 296
5446: PUSH
5447: LD_INT 7
5449: LESS
5450: IFFALSE 5661
// begin InGameOn ;
5452: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5456: LD_EXP 54
5460: PUSH
5461: LD_EXP 51
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5474: LD_EXP 49
5478: PPUSH
5479: LD_INT 88
5481: PPUSH
5482: LD_INT 66
5484: PPUSH
5485: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5489: LD_EXP 54
5493: PPUSH
5494: LD_EXP 49
5498: PPUSH
5499: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5503: LD_EXP 49
5507: PPUSH
5508: LD_INT 90
5510: PPUSH
5511: LD_INT 66
5513: PPUSH
5514: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5518: LD_EXP 49
5522: PPUSH
5523: LD_STRING D7b-Bur-3
5525: PPUSH
5526: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5530: LD_EXP 54
5534: PPUSH
5535: LD_STRING D7b-Bel-4
5537: PPUSH
5538: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5542: LD_EXP 49
5546: PPUSH
5547: LD_STRING D7b-Bur-4
5549: PPUSH
5550: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5554: LD_EXP 54
5558: PPUSH
5559: LD_STRING D7b-Bel-5
5561: PPUSH
5562: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5566: LD_EXP 52
5570: PPUSH
5571: LD_STRING D7b-FSol1-5
5573: PPUSH
5574: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5578: LD_EXP 54
5582: PPUSH
5583: LD_STRING D7b-Bel-6
5585: PPUSH
5586: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING D7b-Bur-6
5597: PPUSH
5598: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5602: LD_EXP 51
5606: PPUSH
5607: LD_STRING D7b-RSol1-6
5609: PPUSH
5610: CALL_OW 88
// InGameOff ;
5614: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5630: LD_EXP 54
5634: PPUSH
5635: LD_INT 3
5637: PPUSH
5638: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5642: LD_STRING M3
5644: PPUSH
5645: CALL_OW 337
// secondAttack = true ;
5649: LD_ADDR_EXP 17
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// exit ;
5657: POP
5658: POP
5659: GO 5689
// end ;
5661: GO 5429
5663: POP
5664: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5665: LD_EXP 54
5669: PPUSH
5670: LD_STRING D7b-Bel-3
5672: PPUSH
5673: CALL_OW 88
// InGameOff ;
5677: CALL_OW 9
// belkovWaitForGorky = true ;
5681: LD_ADDR_EXP 16
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// end ;
5689: PPOPN 3
5691: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5692: LD_EXP 16
5696: PUSH
5697: LD_EXP 18
5701: NOT
5702: AND
5703: IFFALSE 6013
5705: GO 5707
5707: DISABLE
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
// begin enable ;
5712: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 21
5730: PUSH
5731: LD_INT 1
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PPUSH
5742: CALL_OW 69
5746: ST_TO_ADDR
// for unit in ruSolds do
5747: LD_ADDR_VAR 0 1
5751: PUSH
5752: LD_VAR 0 2
5756: PUSH
5757: FOR_IN
5758: IFFALSE 6011
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5760: LD_EXP 49
5764: PPUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 296
5774: PUSH
5775: LD_INT 7
5777: LESS
5778: IFFALSE 6009
// begin belkovWaitForGorky = false ;
5780: LD_ADDR_EXP 16
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// InGameOn ;
5788: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5792: LD_EXP 54
5796: PUSH
5797: LD_EXP 51
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5810: LD_EXP 49
5814: PPUSH
5815: LD_INT 88
5817: PPUSH
5818: LD_INT 66
5820: PPUSH
5821: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5825: LD_EXP 54
5829: PPUSH
5830: LD_EXP 49
5834: PPUSH
5835: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5839: LD_EXP 49
5843: PPUSH
5844: LD_INT 90
5846: PPUSH
5847: LD_INT 66
5849: PPUSH
5850: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5854: LD_EXP 54
5858: PPUSH
5859: LD_STRING D7b-Bel-3a
5861: PPUSH
5862: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5866: LD_EXP 49
5870: PPUSH
5871: LD_STRING D7b-Bur-3
5873: PPUSH
5874: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5878: LD_EXP 54
5882: PPUSH
5883: LD_STRING D7b-Bel-4
5885: PPUSH
5886: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_STRING D7b-Bur-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5902: LD_EXP 54
5906: PPUSH
5907: LD_STRING D7b-Bel-5
5909: PPUSH
5910: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5914: LD_EXP 52
5918: PPUSH
5919: LD_STRING D7b-FSol1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5926: LD_EXP 54
5930: PPUSH
5931: LD_STRING D7b-Bel-6
5933: PPUSH
5934: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5938: LD_EXP 49
5942: PPUSH
5943: LD_STRING D7b-Bur-6
5945: PPUSH
5946: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5950: LD_EXP 51
5954: PPUSH
5955: LD_STRING D7a-RSol1-6
5957: PPUSH
5958: CALL_OW 88
// InGameOff ;
5962: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5978: LD_EXP 54
5982: PPUSH
5983: LD_INT 3
5985: PPUSH
5986: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5990: LD_STRING M3
5992: PPUSH
5993: CALL_OW 337
// secondAttack = true ;
5997: LD_ADDR_EXP 17
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// exit ;
6005: POP
6006: POP
6007: GO 6013
// end ;
6009: GO 5757
6011: POP
6012: POP
// end ;
6013: PPOPN 2
6015: END
// export function Dial_SecondAttack ; var units , i ; begin
6016: LD_INT 0
6018: PPUSH
6019: PPUSH
6020: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6021: LD_EXP 46
6025: PPUSH
6026: LD_STRING D8-FSol1-1
6028: PPUSH
6029: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6033: LD_EXP 47
6037: PPUSH
6038: LD_STRING D8-Glad-1
6040: PPUSH
6041: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6045: LD_EXP 49
6049: PPUSH
6050: LD_STRING D8-Bur-1
6052: PPUSH
6053: CALL_OW 88
// secondAttack = false ;
6057: LD_ADDR_EXP 17
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// units = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 1
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6099: LD_EXP 48
6103: PPUSH
6104: CALL_OW 122
// wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i in amApemans do
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: LD_EXP 48
6131: PUSH
6132: FOR_IN
6133: IFFALSE 6199
// begin if rand ( 0 , 1 ) then
6135: LD_INT 0
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 12
6145: IFFALSE 6173
// ComAttackUnit ( i , NearestUnitToUnit ( units , i ) ) else
6147: LD_VAR 0 3
6151: PPUSH
6152: LD_VAR 0 2
6156: PPUSH
6157: LD_VAR 0 3
6161: PPUSH
6162: CALL_OW 74
6166: PPUSH
6167: CALL_OW 115
6171: GO 6197
// ComAttackUnit ( i , SecondNearestUnitToUnit ( units , i ) ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_VAR 0 2
6182: PPUSH
6183: LD_VAR 0 3
6187: PPUSH
6188: CALL 6224 0 2
6192: PPUSH
6193: CALL_OW 115
// end ;
6197: GO 6132
6199: POP
6200: POP
// until not UnitFilter ( amApemans , [ f_ok ] ) ;
6201: LD_EXP 48
6205: PPUSH
6206: LD_INT 50
6208: PUSH
6209: EMPTY
6210: LIST
6211: PPUSH
6212: CALL_OW 72
6216: NOT
6217: IFFALSE 6115
// end ;
6219: LD_VAR 0 1
6223: RET
// export function SecondNearestUnitToUnit ( group , unit ) ; var tmp ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// if group < 2 then
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 2
6235: LESS
6236: IFFALSE 6260
// begin result := NearestUnitToUnit ( group , unit ) ;
6238: LD_ADDR_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: CALL_OW 74
6257: ST_TO_ADDR
// exit ;
6258: GO 6306
// end ; tmp := NearestUnitToUnit ( group , unit ) ;
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_VAR 0 2
6274: PPUSH
6275: CALL_OW 74
6279: ST_TO_ADDR
// result := NearestUnitToUnit ( group diff tmp , unit ) ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 4
6294: DIFF
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 74
6305: ST_TO_ADDR
// end ;
6306: LD_VAR 0 3
6310: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6311: LD_INT 23
6313: PPUSH
6314: CALL_OW 256
6318: PUSH
6319: LD_INT 350
6321: LESS
6322: PUSH
6323: LD_INT 23
6325: PPUSH
6326: CALL_OW 256
6330: PUSH
6331: LD_INT 250
6333: GREATER
6334: AND
6335: PUSH
6336: LD_INT 20
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 70
6367: PUSH
6368: LD_INT 0
6370: GREATER
6371: AND
6372: PUSH
6373: LD_EXP 24
6377: NOT
6378: AND
6379: IFFALSE 6396
6381: GO 6383
6383: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING D8-FSol1-2
6391: PPUSH
6392: CALL_OW 88
6396: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6397: LD_INT 23
6399: PPUSH
6400: CALL_OW 303
6404: PUSH
6405: LD_INT 22
6407: PPUSH
6408: CALL_OW 302
6412: AND
6413: PUSH
6414: LD_EXP 24
6418: NOT
6419: AND
6420: IFFALSE 6490
6422: GO 6424
6424: DISABLE
// begin amRetreat = true ;
6425: LD_ADDR_EXP 24
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6433: LD_EXP 46
6437: PPUSH
6438: LD_STRING D8-FSol1-2a
6440: PPUSH
6441: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6445: LD_EXP 47
6449: PUSH
6450: LD_EXP 46
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: LD_INT 21
6461: PPUSH
6462: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6466: LD_EXP 47
6470: PPUSH
6471: LD_STRING D8-Glad-2
6473: PPUSH
6474: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6478: LD_EXP 49
6482: PPUSH
6483: LD_STRING D8-Bur-2
6485: PPUSH
6486: CALL_OW 88
// end ;
6490: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6491: LD_INT 22
6493: PPUSH
6494: CALL_OW 303
6498: PUSH
6499: LD_INT 23
6501: PPUSH
6502: CALL_OW 302
6506: AND
6507: PUSH
6508: LD_EXP 24
6512: NOT
6513: AND
6514: IFFALSE 6584
6516: GO 6518
6518: DISABLE
// begin amRetreat = true ;
6519: LD_ADDR_EXP 24
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6527: LD_EXP 46
6531: PPUSH
6532: LD_STRING D8-FSol1-2a
6534: PPUSH
6535: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6539: LD_EXP 47
6543: PUSH
6544: LD_EXP 46
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: LD_INT 21
6555: PPUSH
6556: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6560: LD_EXP 47
6564: PPUSH
6565: LD_STRING D8-Glad-2
6567: PPUSH
6568: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6572: LD_EXP 49
6576: PPUSH
6577: LD_STRING D8-Bur-2
6579: PPUSH
6580: CALL_OW 88
// end ;
6584: END
// every 0 0$1 trigger ( IsDead ( amApemans ) and Difficulty >= 3 ) and not amRetreat do
6585: LD_EXP 48
6589: PPUSH
6590: CALL_OW 301
6594: PUSH
6595: LD_OWVAR 67
6599: PUSH
6600: LD_INT 3
6602: GREATEREQUAL
6603: AND
6604: PUSH
6605: LD_EXP 24
6609: NOT
6610: AND
6611: IFFALSE 6681
6613: GO 6615
6615: DISABLE
// begin amRetreat = true ;
6616: LD_ADDR_EXP 24
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6624: LD_EXP 46
6628: PPUSH
6629: LD_STRING D8-FSol1-2a
6631: PPUSH
6632: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6636: LD_EXP 47
6640: PUSH
6641: LD_EXP 46
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: LD_INT 21
6652: PPUSH
6653: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6657: LD_EXP 47
6661: PPUSH
6662: LD_STRING D8-Glad-2
6664: PPUSH
6665: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6669: LD_EXP 49
6673: PPUSH
6674: LD_STRING D8-Bur-2
6676: PPUSH
6677: CALL_OW 88
// end ;
6681: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty >= 3 and not amRetreat do
6682: LD_INT 23
6684: PPUSH
6685: CALL_OW 256
6689: PUSH
6690: LD_INT 500
6692: LESS
6693: PUSH
6694: LD_OWVAR 67
6698: PUSH
6699: LD_INT 3
6701: GREATEREQUAL
6702: AND
6703: PUSH
6704: LD_EXP 24
6708: NOT
6709: AND
6710: IFFALSE 6780
6712: GO 6714
6714: DISABLE
// begin amRetreat = true ;
6715: LD_ADDR_EXP 24
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6723: LD_EXP 46
6727: PPUSH
6728: LD_STRING D8-FSol1-2a
6730: PPUSH
6731: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6735: LD_EXP 47
6739: PUSH
6740: LD_EXP 46
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PPUSH
6749: LD_INT 21
6751: PPUSH
6752: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6756: LD_EXP 47
6760: PPUSH
6761: LD_STRING D8-Glad-2
6763: PPUSH
6764: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6768: LD_EXP 49
6772: PPUSH
6773: LD_STRING D8-Bur-2
6775: PPUSH
6776: CALL_OW 88
// end ;
6780: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6781: LD_INT 22
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 1
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 50
6803: PUSH
6804: EMPTY
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PPUSH
6812: CALL_OW 69
6816: PUSH
6817: LD_INT 0
6819: GREATER
6820: IFFALSE 6948
6822: GO 6824
6824: DISABLE
6825: LD_INT 0
6827: PPUSH
// begin enable ;
6828: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: LD_INT 21
6836: PPUSH
6837: LD_INT 22
6839: PUSH
6840: LD_INT 1
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: CALL_OW 70
6865: PUSH
6866: FOR_IN
6867: IFFALSE 6946
// begin if unit = Gladstone then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_EXP 47
6878: EQUAL
6879: IFFALSE 6909
// begin gladstoneEscape = true ;
6881: LD_ADDR_EXP 19
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6889: LD_EXP 47
6893: PPUSH
6894: LD_EXP 33
6898: PUSH
6899: LD_STRING Gladstone
6901: STR
6902: PPUSH
6903: CALL_OW 38
// end else
6907: GO 6935
// begin JohannaEscape = true ;
6909: LD_ADDR_EXP 20
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6917: LD_EXP 46
6921: PPUSH
6922: LD_EXP 33
6926: PUSH
6927: LD_STRING Johanna
6929: STR
6930: PPUSH
6931: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 64
// end ;
6944: GO 6866
6946: POP
6947: POP
// end ;
6948: PPOPN 1
6950: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6951: LD_EXP 47
6955: PPUSH
6956: CALL_OW 301
6960: PUSH
6961: LD_EXP 46
6965: PPUSH
6966: CALL_OW 301
6970: AND
6971: IFFALSE 6988
6973: GO 6975
6975: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6976: LD_EXP 49
6980: PPUSH
6981: LD_STRING D9-Bur-1
6983: PPUSH
6984: CALL_OW 88
6988: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6989: LD_EXP 46
6993: PPUSH
6994: CALL_OW 301
6998: PUSH
6999: LD_EXP 19
7003: AND
7004: PUSH
7005: LD_EXP 20
7009: NOT
7010: AND
7011: IFFALSE 7028
7013: GO 7015
7015: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
7016: LD_EXP 49
7020: PPUSH
7021: LD_STRING D9-Bur-1a
7023: PPUSH
7024: CALL_OW 88
7028: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
7029: LD_EXP 47
7033: PPUSH
7034: CALL_OW 301
7038: PUSH
7039: LD_EXP 19
7043: NOT
7044: AND
7045: PUSH
7046: LD_EXP 20
7050: AND
7051: IFFALSE 7068
7053: GO 7055
7055: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
7056: LD_EXP 49
7060: PPUSH
7061: LD_STRING D9-Bur-1b
7063: PPUSH
7064: CALL_OW 88
7068: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
7069: LD_EXP 19
7073: PUSH
7074: LD_EXP 20
7078: AND
7079: IFFALSE 7096
7081: GO 7083
7083: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
7084: LD_EXP 49
7088: PPUSH
7089: LD_STRING D9-Bur-1c
7091: PPUSH
7092: CALL_OW 88
7096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
7097: LD_INT 22
7099: PUSH
7100: LD_INT 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 50
7119: PUSH
7120: EMPTY
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: IFFALSE 7384
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
7145: LD_ADDR_VAR 0 1
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 21
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 50
7172: PUSH
7173: EMPTY
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: LD_EXP 49
7190: PUSH
7191: LD_EXP 57
7195: PUSH
7196: LD_EXP 54
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: DIFF
7206: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
7207: LD_ADDR_VAR 0 2
7211: PUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 26
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: ST_TO_ADDR
// DialogueOn ;
7232: CALL_OW 6
// if IsOK ( Belkov ) then
7236: LD_EXP 54
7240: PPUSH
7241: CALL_OW 302
7245: IFFALSE 7259
// Say ( Belkov , D10-Bel-1 ) ;
7247: LD_EXP 54
7251: PPUSH
7252: LD_STRING D10-Bel-1
7254: PPUSH
7255: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7259: LD_VAR 0 1
7263: PUSH
7264: LD_INT 0
7266: GREATER
7267: PUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_INT 0
7275: GREATER
7276: PUSH
7277: LD_EXP 54
7281: PPUSH
7282: CALL_OW 302
7286: OR
7287: AND
7288: IFFALSE 7355
// begin Say ( Burlak , D10-Bur-1 ) ;
7290: LD_EXP 49
7294: PPUSH
7295: LD_STRING D10-Bur-1
7297: PPUSH
7298: CALL_OW 88
// if IsOK ( Belkov ) then
7302: LD_EXP 54
7306: PPUSH
7307: CALL_OW 302
7311: IFFALSE 7327
// Say ( Belkov , D10-Bel-1a ) else
7313: LD_EXP 54
7317: PPUSH
7318: LD_STRING D10-Bel-1a
7320: PPUSH
7321: CALL_OW 88
7325: GO 7343
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7327: LD_VAR 0 2
7331: PUSH
7332: LD_INT 1
7334: ARRAY
7335: PPUSH
7336: LD_STRING D10-RSol1-1
7338: PPUSH
7339: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7343: LD_EXP 49
7347: PPUSH
7348: LD_STRING D10-Bur-2
7350: PPUSH
7351: CALL_OW 88
// end ; DialogueOff ;
7355: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7359: LD_STRING M4a
7361: PPUSH
7362: CALL_OW 337
// evacuationAvailable = true ;
7366: LD_ADDR_EXP 22
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7374: LD_INT 1
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL_OW 424
// end ;
7384: PPOPN 2
7386: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7387: LD_EXP 22
7391: PUSH
7392: LD_EXP 25
7396: NOT
7397: AND
7398: IFFALSE 8008
7400: GO 7402
7402: DISABLE
7403: LD_INT 0
7405: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7406: LD_EXP 56
7410: PPUSH
7411: LD_INT 22
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL_OW 49
// wait ( 0 0$3 ) ;
7421: LD_INT 105
7423: PPUSH
7424: CALL_OW 67
// jelenaSpawned = true ;
7428: LD_ADDR_EXP 25
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 20 then
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 50
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 69
7471: PPUSH
7472: LD_EXP 56
7476: PPUSH
7477: CALL_OW 74
7481: PPUSH
7482: LD_EXP 56
7486: PPUSH
7487: CALL_OW 296
7491: PUSH
7492: LD_INT 20
7494: LESS
7495: IFFALSE 7499
// exit ;
7497: GO 8008
// DialogueOn ;
7499: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7503: LD_EXP 56
7507: PPUSH
7508: LD_STRING D11b-Kir-1
7510: PPUSH
7511: CALL_OW 94
// if IsOK ( Belkov ) then
7515: LD_EXP 54
7519: PPUSH
7520: CALL_OW 302
7524: IFFALSE 7552
// begin Say ( Belkov , D11b-Bel-1 ) ;
7526: LD_EXP 54
7530: PPUSH
7531: LD_STRING D11b-Bel-1
7533: PPUSH
7534: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7538: LD_EXP 54
7542: PPUSH
7543: LD_STRING D11b-Bel-1a
7545: PPUSH
7546: CALL_OW 94
// end else
7550: GO 7607
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 50
7579: PUSH
7580: EMPTY
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 69
7592: PPUSH
7593: LD_STRING D11b-RSol1-1
7595: PPUSH
7596: LD_STRING D11b-RFSol1-1
7598: PPUSH
7599: LD_INT 0
7601: PPUSH
7602: CALL 8631 0 4
7606: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7607: LD_INT 24
7609: PPUSH
7610: LD_INT 22
7612: PUSH
7613: LD_INT 0
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 25
7622: PUSH
7623: LD_INT 12
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 70
7638: PUSH
7639: LD_INT 0
7641: GREATER
7642: IFFALSE 7658
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7644: LD_EXP 56
7648: PPUSH
7649: LD_STRING D11b1-Kir-1
7651: PPUSH
7652: CALL_OW 94
7656: GO 7670
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7658: LD_EXP 56
7662: PPUSH
7663: LD_STRING D11b2-Kir-1
7665: PPUSH
7666: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7670: LD_EXP 6
7674: PUSH
7675: LD_INT 24
7677: PPUSH
7678: LD_INT 22
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 12
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 70
7706: PUSH
7707: LD_INT 0
7709: GREATER
7710: AND
7711: IFFALSE 7846
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7713: LD_EXP 49
7717: PPUSH
7718: LD_STRING D11b1-Bur-1
7720: PPUSH
7721: CALL_OW 88
// if IsOk ( Belkov ) then
7725: LD_EXP 54
7729: PPUSH
7730: CALL_OW 302
7734: IFFALSE 7750
// Say ( Belkov , D11b2-Bel-1 ) else
7736: LD_EXP 54
7740: PPUSH
7741: LD_STRING D11b2-Bel-1
7743: PPUSH
7744: CALL_OW 88
7748: GO 7791
// begin if GetSex ( randomSold ) = sex_male then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 258
7759: PUSH
7760: LD_INT 1
7762: EQUAL
7763: IFFALSE 7779
// Say ( randomSold , D11b1-RSol1-1 ) else
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_STRING D11b1-RSol1-1
7772: PPUSH
7773: CALL_OW 88
7777: GO 7791
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_STRING D11b1-RFSol1-1
7786: PPUSH
7787: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7791: LD_INT 22
7793: PUSH
7794: LD_INT 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 1
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 50
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 69
7826: PPUSH
7827: LD_STRING D11b1-RSol1-1
7829: PPUSH
7830: LD_STRING D11b1-RFSol1-1
7832: PPUSH
7833: LD_INT 0
7835: PPUSH
7836: CALL 8631 0 4
// DialogueOff ;
7840: CALL_OW 7
// exit ;
7844: GO 8008
// end ; if spotWaterfall then
7846: LD_EXP 7
7850: IFFALSE 7936
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7852: LD_EXP 49
7856: PPUSH
7857: LD_STRING D11b1-Bur-1a
7859: PPUSH
7860: CALL_OW 88
// if IsOk ( Belkov ) then
7864: LD_EXP 54
7868: PPUSH
7869: CALL_OW 302
7873: IFFALSE 7889
// Say ( Belkov , D11b2-Bel-1 ) else
7875: LD_EXP 54
7879: PPUSH
7880: LD_STRING D11b2-Bel-1
7882: PPUSH
7883: CALL_OW 88
7887: GO 7930
// begin if GetSex ( randomSold ) = sex_male then
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 258
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: IFFALSE 7918
// Say ( randomSold , D11b1-RSol1-1 ) else
7904: LD_VAR 0 1
7908: PPUSH
7909: LD_STRING D11b1-RSol1-1
7911: PPUSH
7912: CALL_OW 88
7916: GO 7930
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_STRING D11b1-RFSol1-1
7925: PPUSH
7926: CALL_OW 88
// end ; DialogueOff ;
7930: CALL_OW 7
// exit ;
7934: GO 8008
// end ; if IsOk ( Belkov ) then
7936: LD_EXP 54
7940: PPUSH
7941: CALL_OW 302
7945: IFFALSE 7961
// Say ( Belkov , D11b1-Bel-1 ) else
7947: LD_EXP 54
7951: PPUSH
7952: LD_STRING D11b1-Bel-1
7954: PPUSH
7955: CALL_OW 88
7959: GO 8002
// begin if GetSex ( randomSold ) = sex_male then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 258
7970: PUSH
7971: LD_INT 1
7973: EQUAL
7974: IFFALSE 7990
// Say ( randomSold , D11b1-RSol1-1 ) else
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_STRING D11b1-RSol1-1
7983: PPUSH
7984: CALL_OW 88
7988: GO 8002
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_STRING D11b1-RFSol1-1
7997: PPUSH
7998: CALL_OW 88
// end ; DialogueOff ;
8002: CALL_OW 7
// exit ;
8006: GO 8008
// end ;
8008: PPOPN 1
8010: END
// every 0 0$1.8 trigger FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) do var un , saved ;
8011: LD_INT 24
8013: PPUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PPUSH
8024: CALL_OW 70
8028: IFFALSE 8227
8030: GO 8032
8032: DISABLE
8033: LD_INT 0
8035: PPUSH
8036: PPUSH
// begin if not LakeApes then
8037: LD_EXP 26
8041: NOT
8042: IFFALSE 8046
// exit ;
8044: GO 8227
// if FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) > 2 then
8046: LD_INT 24
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PPUSH
8059: CALL_OW 70
8063: PUSH
8064: LD_INT 2
8066: GREATER
8067: IFFALSE 8226
// begin ComAttackUnit ( LakeApes [ 1 ] , NearestUnitToUnit ( your_units , LakeApes [ 1 ] ) ) ;
8069: LD_EXP 26
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PPUSH
8078: LD_EXP 28
8082: PPUSH
8083: LD_EXP 26
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: CALL_OW 74
8096: PPUSH
8097: CALL_OW 115
// ComMoveToArea ( LakeApes diff LakeApes [ 1 ] , ApeEscape ) ;
8101: LD_EXP 26
8105: PUSH
8106: LD_EXP 26
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: DIFF
8115: PPUSH
8116: LD_INT 28
8118: PPUSH
8119: CALL_OW 113
// AddComWait ( LakeApes diff LakeApes [ 1 ] , 0 0$1 ) ;
8123: LD_EXP 26
8127: PUSH
8128: LD_EXP 26
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: DIFF
8137: PPUSH
8138: LD_INT 35
8140: PPUSH
8141: CALL_OW 202
// repeat wait ( 0 0$0.3 ) ;
8145: LD_INT 10
8147: PPUSH
8148: CALL_OW 67
// saved := FilterUnitsInArea ( ApeEscape , [ f_side , 0 ] ) ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_INT 28
8159: PPUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// for un in saved do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: LD_VAR 0 2
8184: PUSH
8185: FOR_IN
8186: IFFALSE 8215
// begin RemoveUnit ( un ) ;
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 64
// LakeApes := LakeApes diff un ;
8197: LD_ADDR_EXP 26
8201: PUSH
8202: LD_EXP 26
8206: PUSH
8207: LD_VAR 0 1
8211: DIFF
8212: ST_TO_ADDR
// end ;
8213: GO 8185
8215: POP
8216: POP
// until not LakeApes ;
8217: LD_EXP 26
8221: NOT
8222: IFFALSE 8145
// end else
8224: GO 8227
// enable ;
8226: ENABLE
// end ;
8227: PPOPN 2
8229: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
8230: LD_INT 3
8232: PPUSH
8233: LD_EXP 56
8237: PPUSH
8238: CALL_OW 292
8242: PUSH
8243: LD_EXP 25
8247: AND
8248: IFFALSE 8511
8250: GO 8252
8252: DISABLE
8253: LD_INT 0
8255: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
8256: LD_EXP 56
8260: PPUSH
8261: LD_INT 3
8263: PPUSH
8264: CALL_OW 235
// jelenaSaved = true ;
8268: LD_ADDR_EXP 21
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
8276: LD_EXP 56
8280: PPUSH
8281: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
8285: LD_ADDR_VAR 0 1
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 3
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 50
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_EXP 56
8330: DIFF
8331: PPUSH
8332: LD_EXP 56
8336: PPUSH
8337: CALL_OW 74
8341: ST_TO_ADDR
// DialogueOn ;
8342: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8346: LD_EXP 56
8350: PPUSH
8351: LD_STRING D11a-Kir-1
8353: PPUSH
8354: CALL_OW 88
// if nearUnit = Belkov then
8358: LD_VAR 0 1
8362: PUSH
8363: LD_EXP 54
8367: EQUAL
8368: IFFALSE 8408
// begin Say ( Belkov , D11a-Bel-1 ) ;
8370: LD_EXP 54
8374: PPUSH
8375: LD_STRING D11a-Bel-1
8377: PPUSH
8378: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8382: LD_EXP 56
8386: PPUSH
8387: LD_STRING D11a-Kir-2
8389: PPUSH
8390: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
8394: LD_EXP 54
8398: PPUSH
8399: LD_STRING D11a-Bel-2
8401: PPUSH
8402: CALL_OW 88
// end else
8406: GO 8449
// begin if GetSex ( nearUnit ) = sex_male then
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 258
8417: PUSH
8418: LD_INT 1
8420: EQUAL
8421: IFFALSE 8437
// Say ( nearUnit , D11a-RSol1-2 ) else
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_STRING D11a-RSol1-2
8430: PPUSH
8431: CALL_OW 88
8435: GO 8449
// Say ( nearUnit , D11a-RFSol1-2 ) ;
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_STRING D11a-RFSol1-2
8444: PPUSH
8445: CALL_OW 88
// end ; DialogueOff ;
8449: CALL_OW 7
// wait ( 0 0$5 ) ;
8453: LD_INT 175
8455: PPUSH
8456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8460: LD_INT 35
8462: PPUSH
8463: CALL_OW 67
// until GetDistUnits ( Burlak , Kirilenkova ) < 6 ;
8467: LD_EXP 49
8471: PPUSH
8472: LD_EXP 56
8476: PPUSH
8477: CALL_OW 296
8481: PUSH
8482: LD_INT 6
8484: LESS
8485: IFFALSE 8460
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8487: LD_EXP 56
8491: PPUSH
8492: LD_STRING D11c-Kir-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8499: LD_EXP 49
8503: PPUSH
8504: LD_STRING D11c-Bur-1
8506: PPUSH
8507: CALL_OW 88
// end ;
8511: PPOPN 1
8513: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8514: LD_EXP 22
8518: PUSH
8519: LD_INT 1
8521: PPUSH
8522: LD_INT 22
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 70
8550: PUSH
8551: LD_INT 0
8553: GREATER
8554: AND
8555: IFFALSE 8567
8557: GO 8559
8559: DISABLE
// begin Query ( QExit1 ) ;
8560: LD_STRING QExit1
8562: PPUSH
8563: CALL_OW 97
// end ; end_of_file
8567: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8568: LD_INT 0
8570: PPUSH
8571: PPUSH
// if exist_mode then
8572: LD_VAR 0 2
8576: IFFALSE 8601
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_EXP 34
8587: PUSH
8588: LD_VAR 0 1
8592: STR
8593: PPUSH
8594: CALL_OW 34
8598: ST_TO_ADDR
8599: GO 8616
// unit := NewCharacter ( ident ) ;
8601: LD_ADDR_VAR 0 4
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 25
8615: ST_TO_ADDR
// result := unit ;
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_VAR 0 4
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 3
8630: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8631: LD_INT 0
8633: PPUSH
8634: PPUSH
8635: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8636: LD_ADDR_VAR 0 1
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: LD_EXP 49
8650: PUSH
8651: LD_EXP 57
8655: PUSH
8656: LD_EXP 54
8660: PUSH
8661: LD_EXP 56
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: DIFF
8672: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8673: LD_ADDR_VAR 0 7
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 12
8695: ARRAY
8696: ST_TO_ADDR
// if radio then
8697: LD_VAR 0 4
8701: IFFALSE 8750
// begin if GetSex ( speaker ) = sex_male then
8703: LD_VAR 0 7
8707: PPUSH
8708: CALL_OW 258
8712: PUSH
8713: LD_INT 1
8715: EQUAL
8716: IFFALSE 8734
// SayRadio ( speaker , dialogMID ) else
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 2
8727: PPUSH
8728: CALL_OW 94
8732: GO 8748
// SayRadio ( speaker , dialogFID ) ;
8734: LD_VAR 0 7
8738: PPUSH
8739: LD_VAR 0 3
8743: PPUSH
8744: CALL_OW 94
// end else
8748: GO 8795
// begin if GetSex ( speaker ) = sex_male then
8750: LD_VAR 0 7
8754: PPUSH
8755: CALL_OW 258
8759: PUSH
8760: LD_INT 1
8762: EQUAL
8763: IFFALSE 8781
// Say ( speaker , dialogMID ) else
8765: LD_VAR 0 7
8769: PPUSH
8770: LD_VAR 0 2
8774: PPUSH
8775: CALL_OW 88
8779: GO 8795
// Say ( speaker , dialogFID ) ;
8781: LD_VAR 0 7
8785: PPUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: CALL_OW 88
// end ; result := speaker ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: LD_VAR 0 7
8804: ST_TO_ADDR
// end ;
8805: LD_VAR 0 5
8809: RET
// export function Length ( tab ) ; var i , count ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
// for i in tab do
8815: LD_ADDR_VAR 0 3
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8844
// count = count + 1 ;
8828: LD_ADDR_VAR 0 4
8832: PUSH
8833: LD_VAR 0 4
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: ST_TO_ADDR
8842: GO 8825
8844: POP
8845: POP
// Result := count ;
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_VAR 0 4
8855: ST_TO_ADDR
// end ;
8856: LD_VAR 0 2
8860: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8861: LD_INT 0
8863: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: PUSH
8874: LD_OWVAR 2
8878: EQUAL
8879: PUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 302
8889: AND
8890: IFFALSE 8912
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_EXP 33
8901: PUSH
8902: LD_VAR 0 2
8906: STR
8907: PPUSH
8908: CALL_OW 38
// end ;
8912: LD_VAR 0 3
8916: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8917: LD_INT 0
8919: PPUSH
8920: PPUSH
8921: PPUSH
// resultCharactersToSave = [ ] ;
8922: LD_ADDR_VAR 0 5
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// for unit in characters do
8929: LD_ADDR_VAR 0 4
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: FOR_IN
8940: IFFALSE 8988
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8942: LD_VAR 0 4
8946: PPUSH
8947: CALL_OW 255
8951: PUSH
8952: LD_OWVAR 2
8956: EQUAL
8957: PUSH
8958: LD_VAR 0 4
8962: PPUSH
8963: CALL_OW 302
8967: AND
8968: IFFALSE 8986
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8970: LD_ADDR_VAR 0 5
8974: PUSH
8975: LD_VAR 0 5
8979: PUSH
8980: LD_VAR 0 4
8984: ADD
8985: ST_TO_ADDR
8986: GO 8939
8988: POP
8989: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8990: LD_VAR 0 5
8994: PPUSH
8995: LD_EXP 33
8999: PUSH
9000: LD_VAR 0 2
9004: STR
9005: PPUSH
9006: CALL_OW 38
// end ;
9010: LD_VAR 0 3
9014: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 302
9038: NOT
9039: PUSH
9040: LD_VAR 0 4
9044: PUSH
9045: LD_INT 1
9047: EQUAL
9048: OR
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 488
9064: NOT
9065: OR
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_VAR 0 2
9076: PPUSH
9077: LD_VAR 0 3
9081: PPUSH
9082: CALL_OW 297
9086: PUSH
9087: LD_VAR 0 4
9091: GREATEREQUAL
9092: OR
9093: PUSH
9094: LD_VAR 0 5
9098: PUSH
9099: LD_INT 1
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: IN
9109: NOT
9110: OR
9111: IFFALSE 9115
// exit ;
9113: GO 10672
// attempts = 0 ;
9115: LD_ADDR_VAR 0 17
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9123: LD_ADDR_VAR 0 7
9127: PUSH
9128: EMPTY
9129: ST_TO_ADDR
// list_coords = [ ] ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9137: LD_ADDR_VAR 0 9
9141: PUSH
9142: LD_VAR 0 2
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL_OW 250
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 251
9171: PPUSH
9172: CALL 10677 0 4
9176: ST_TO_ADDR
// if attempts = 0 then
9177: LD_VAR 0 17
9181: PUSH
9182: LD_INT 0
9184: EQUAL
9185: IFFALSE 9293
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9187: LD_ADDR_VAR 0 10
9191: PUSH
9192: LD_VAR 0 9
9196: PUSH
9197: LD_VAR 0 9
9201: PUSH
9202: LD_INT 1
9204: PLUS
9205: PUSH
9206: LD_VAR 0 9
9210: PUSH
9211: LD_INT 1
9213: MINUS
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9220: LD_VAR 0 10
9224: PUSH
9225: LD_INT 2
9227: ARRAY
9228: PUSH
9229: LD_INT 6
9231: EQUAL
9232: IFFALSE 9255
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9234: LD_ADDR_VAR 0 10
9238: PUSH
9239: LD_VAR 0 10
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 1
9254: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9255: LD_VAR 0 10
9259: PUSH
9260: LD_INT 3
9262: ARRAY
9263: PUSH
9264: LD_INT 1
9266: NEG
9267: EQUAL
9268: IFFALSE 9291
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9270: LD_ADDR_VAR 0 10
9274: PUSH
9275: LD_VAR 0 10
9279: PPUSH
9280: LD_INT 3
9282: PPUSH
9283: LD_INT 5
9285: PPUSH
9286: CALL_OW 1
9290: ST_TO_ADDR
// end else
9291: GO 9330
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9293: LD_ADDR_VAR 0 10
9297: PUSH
9298: LD_INT 0
9300: PUSH
9301: LD_INT 1
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 4
9312: PUSH
9313: LD_INT 5
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_VAR 0 9
9328: DIFF
9329: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9330: LD_ADDR_VAR 0 14
9334: PUSH
9335: DOUBLE
9336: LD_INT 1
9338: DEC
9339: ST_TO_ADDR
9340: LD_VAR 0 10
9344: PUSH
9345: LD_INT 0
9347: PLUS
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9672
// case dir_list [ c ] of 0 :
9352: LD_VAR 0 10
9356: PUSH
9357: LD_VAR 0 14
9361: ARRAY
9362: PUSH
9363: LD_INT 0
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9412
9371: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_VAR 0 8
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: LD_VAR 0 2
9389: PUSH
9390: LD_VAR 0 3
9394: PUSH
9395: LD_VAR 0 4
9399: MINUS
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 2
9409: ST_TO_ADDR
9410: GO 9670
9412: LD_INT 1
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9461
9420: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: LD_VAR 0 8
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: LD_VAR 0 2
9438: PUSH
9439: LD_VAR 0 4
9443: PLUS
9444: PUSH
9445: LD_VAR 0 3
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 2
9458: ST_TO_ADDR
9459: GO 9670
9461: LD_INT 2
9463: DOUBLE
9464: EQUAL
9465: IFTRUE 9469
9467: GO 9516
9469: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
9470: LD_ADDR_VAR 0 8
9474: PUSH
9475: LD_VAR 0 8
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_VAR 0 4
9492: PLUS
9493: PUSH
9494: LD_VAR 0 3
9498: PUSH
9499: LD_VAR 0 4
9503: PLUS
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 2
9513: ST_TO_ADDR
9514: GO 9670
9516: LD_INT 3
9518: DOUBLE
9519: EQUAL
9520: IFTRUE 9524
9522: GO 9565
9524: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9525: LD_ADDR_VAR 0 8
9529: PUSH
9530: LD_VAR 0 8
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_VAR 0 3
9547: PUSH
9548: LD_VAR 0 4
9552: PLUS
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
9563: GO 9670
9565: LD_INT 4
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9614
9573: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9574: LD_ADDR_VAR 0 8
9578: PUSH
9579: LD_VAR 0 8
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_VAR 0 2
9591: PUSH
9592: LD_VAR 0 4
9596: MINUS
9597: PUSH
9598: LD_VAR 0 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 2
9611: ST_TO_ADDR
9612: GO 9670
9614: LD_INT 5
9616: DOUBLE
9617: EQUAL
9618: IFTRUE 9622
9620: GO 9669
9622: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_VAR 0 8
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_VAR 0 2
9640: PUSH
9641: LD_VAR 0 4
9645: MINUS
9646: PUSH
9647: LD_VAR 0 3
9651: PUSH
9652: LD_VAR 0 4
9656: MINUS
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 2
9666: ST_TO_ADDR
9667: GO 9670
9669: POP
9670: GO 9349
9672: POP
9673: POP
// if dist < 30 then
9674: LD_VAR 0 4
9678: PUSH
9679: LD_INT 30
9681: LESS
9682: IFFALSE 9694
// c = 1 else
9684: LD_ADDR_VAR 0 14
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
9692: GO 9702
// c = 2 ;
9694: LD_ADDR_VAR 0 14
9698: PUSH
9699: LD_INT 2
9701: ST_TO_ADDR
// b = 1 ;
9702: LD_ADDR_VAR 0 11
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9710: LD_VAR 0 11
9714: PUSH
9715: LD_VAR 0 4
9719: PUSH
9720: LD_INT 1
9722: MINUS
9723: LESSEQUAL
9724: IFFALSE 10152
// begin if 0 in dir_list and 1 in dir_list then
9726: LD_INT 0
9728: PUSH
9729: LD_VAR 0 10
9733: IN
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: LD_VAR 0 10
9742: IN
9743: AND
9744: IFFALSE 9796
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9746: LD_ADDR_VAR 0 8
9750: PUSH
9751: LD_VAR 0 8
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_VAR 0 2
9763: PUSH
9764: LD_VAR 0 11
9768: PLUS
9769: PUSH
9770: LD_VAR 0 3
9774: PUSH
9775: LD_VAR 0 4
9779: MINUS
9780: PUSH
9781: LD_VAR 0 11
9785: PLUS
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 2
9795: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9796: LD_INT 1
9798: PUSH
9799: LD_VAR 0 10
9803: IN
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: LD_VAR 0 10
9812: IN
9813: AND
9814: IFFALSE 9860
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9816: LD_ADDR_VAR 0 8
9820: PUSH
9821: LD_VAR 0 8
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: LD_VAR 0 2
9833: PUSH
9834: LD_VAR 0 4
9838: PLUS
9839: PUSH
9840: LD_VAR 0 3
9844: PUSH
9845: LD_VAR 0 11
9849: PLUS
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 2
9859: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9860: LD_INT 2
9862: PUSH
9863: LD_VAR 0 10
9867: IN
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_VAR 0 10
9876: IN
9877: AND
9878: IFFALSE 9930
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9880: LD_ADDR_VAR 0 8
9884: PUSH
9885: LD_VAR 0 8
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_VAR 0 4
9902: PLUS
9903: PUSH
9904: LD_VAR 0 11
9908: MINUS
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 4
9919: PLUS
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 2
9929: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9930: LD_INT 3
9932: PUSH
9933: LD_VAR 0 10
9937: IN
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: LD_VAR 0 10
9946: IN
9947: AND
9948: IFFALSE 10000
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9950: LD_ADDR_VAR 0 8
9954: PUSH
9955: LD_VAR 0 8
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_VAR 0 11
9972: MINUS
9973: PUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 4
9983: PLUS
9984: PUSH
9985: LD_VAR 0 11
9989: MINUS
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 2
9999: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10000: LD_INT 4
10002: PUSH
10003: LD_VAR 0 10
10007: IN
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_VAR 0 10
10016: IN
10017: AND
10018: IFFALSE 10064
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_VAR 0 4
10042: MINUS
10043: PUSH
10044: LD_VAR 0 3
10048: PUSH
10049: LD_VAR 0 11
10053: MINUS
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 2
10063: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10064: LD_INT 5
10066: PUSH
10067: LD_VAR 0 10
10071: IN
10072: PUSH
10073: LD_INT 0
10075: PUSH
10076: LD_VAR 0 10
10080: IN
10081: AND
10082: IFFALSE 10134
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10084: LD_ADDR_VAR 0 8
10088: PUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: LD_VAR 0 2
10101: PUSH
10102: LD_VAR 0 4
10106: MINUS
10107: PUSH
10108: LD_VAR 0 11
10112: PLUS
10113: PUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_VAR 0 4
10123: MINUS
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 2
10133: ST_TO_ADDR
// b = b + c end ;
10134: LD_ADDR_VAR 0 11
10138: PUSH
10139: LD_VAR 0 11
10143: PUSH
10144: LD_VAR 0 14
10148: PLUS
10149: ST_TO_ADDR
10150: GO 9710
// if list_coords = 0 then
10152: LD_VAR 0 8
10156: PUSH
10157: LD_INT 0
10159: EQUAL
10160: IFFALSE 10164
// exit ;
10162: GO 10672
// repeat min_dist = 5000 ;
10164: LD_ADDR_VAR 0 12
10168: PUSH
10169: LD_INT 5000
10171: ST_TO_ADDR
// for b in list_coords do
10172: LD_ADDR_VAR 0 11
10176: PUSH
10177: LD_VAR 0 8
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10242
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10185: LD_ADDR_VAR 0 13
10189: PUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_VAR 0 11
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PPUSH
10204: LD_VAR 0 11
10208: PUSH
10209: LD_INT 2
10211: ARRAY
10212: PPUSH
10213: CALL_OW 297
10217: ST_TO_ADDR
// if temp_dist < min_dist then
10218: LD_VAR 0 13
10222: PUSH
10223: LD_VAR 0 12
10227: LESS
10228: IFFALSE 10240
// min_dist = temp_dist ;
10230: LD_ADDR_VAR 0 12
10234: PUSH
10235: LD_VAR 0 13
10239: ST_TO_ADDR
// end ;
10240: GO 10182
10242: POP
10243: POP
// c = 0 ;
10244: LD_ADDR_VAR 0 14
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// repeat c = c + 1 ;
10252: LD_ADDR_VAR 0 14
10256: PUSH
10257: LD_VAR 0 14
10261: PUSH
10262: LD_INT 1
10264: PLUS
10265: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10266: LD_VAR 0 1
10270: PPUSH
10271: LD_VAR 0 8
10275: PUSH
10276: LD_VAR 0 14
10280: ARRAY
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PPUSH
10286: LD_VAR 0 8
10290: PUSH
10291: LD_VAR 0 14
10295: ARRAY
10296: PUSH
10297: LD_INT 2
10299: ARRAY
10300: PPUSH
10301: CALL_OW 297
10305: PUSH
10306: LD_VAR 0 12
10310: EQUAL
10311: IFFALSE 10376
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 7
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_VAR 0 8
10330: PUSH
10331: LD_VAR 0 14
10335: ARRAY
10336: PPUSH
10337: CALL_OW 2
10341: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10342: LD_ADDR_VAR 0 8
10346: PUSH
10347: LD_VAR 0 8
10351: PPUSH
10352: LD_VAR 0 14
10356: PPUSH
10357: CALL_OW 3
10361: ST_TO_ADDR
// c = c - 1 ;
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: LD_VAR 0 14
10371: PUSH
10372: LD_INT 1
10374: MINUS
10375: ST_TO_ADDR
// end ; until c = list_coords ;
10376: LD_VAR 0 14
10380: PUSH
10381: LD_VAR 0 8
10385: EQUAL
10386: IFFALSE 10252
// c = 0 ;
10388: LD_ADDR_VAR 0 14
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
// if list_nearest > 0 then
10396: LD_VAR 0 7
10400: PUSH
10401: LD_INT 0
10403: GREATER
10404: IFFALSE 10546
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10406: LD_ADDR_VAR 0 15
10410: PUSH
10411: LD_INT 1
10413: PPUSH
10414: LD_VAR 0 7
10418: PPUSH
10419: CALL_OW 12
10423: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10424: LD_ADDR_VAR 0 16
10428: PUSH
10429: LD_VAR 0 7
10433: PUSH
10434: LD_VAR 0 15
10438: ARRAY
10439: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10440: LD_VAR 0 16
10444: PUSH
10445: LD_INT 1
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 16
10453: PUSH
10454: LD_INT 2
10456: ARRAY
10457: PPUSH
10458: CALL_OW 488
10462: PUSH
10463: LD_INT 0
10465: GREATER
10466: PUSH
10467: LD_VAR 0 16
10471: PUSH
10472: LD_INT 1
10474: ARRAY
10475: PPUSH
10476: LD_VAR 0 16
10480: PUSH
10481: LD_INT 2
10483: ARRAY
10484: PPUSH
10485: CALL_OW 428
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: AND
10494: IFFALSE 10506
// c = 1 else
10496: LD_ADDR_VAR 0 14
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
10504: GO 10526
// list_nearest = Delete ( list_nearest , rand_num ) ;
10506: LD_ADDR_VAR 0 7
10510: PUSH
10511: LD_VAR 0 7
10515: PPUSH
10516: LD_VAR 0 15
10520: PPUSH
10521: CALL_OW 3
10525: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10526: LD_VAR 0 14
10530: PUSH
10531: LD_INT 1
10533: EQUAL
10534: PUSH
10535: LD_VAR 0 7
10539: PUSH
10540: LD_INT 0
10542: EQUAL
10543: OR
10544: IFFALSE 10406
// end ; until c = 1 or list_coords = 0 ;
10546: LD_VAR 0 14
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: PUSH
10555: LD_VAR 0 8
10559: PUSH
10560: LD_INT 0
10562: EQUAL
10563: OR
10564: IFFALSE 10164
// attempts = attempts + 1 ;
10566: LD_ADDR_VAR 0 17
10570: PUSH
10571: LD_VAR 0 17
10575: PUSH
10576: LD_INT 1
10578: PLUS
10579: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10580: LD_VAR 0 14
10584: PUSH
10585: LD_INT 1
10587: EQUAL
10588: PUSH
10589: LD_VAR 0 17
10593: PUSH
10594: LD_INT 1
10596: GREATER
10597: OR
10598: IFFALSE 9123
// if c = 1 then
10600: LD_VAR 0 14
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: IFFALSE 10672
// if add then
10610: LD_VAR 0 5
10614: IFFALSE 10645
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_VAR 0 16
10625: PUSH
10626: LD_INT 1
10628: ARRAY
10629: PPUSH
10630: LD_VAR 0 16
10634: PUSH
10635: LD_INT 2
10637: ARRAY
10638: PPUSH
10639: CALL_OW 171
10643: GO 10672
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_VAR 0 16
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 16
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// end ;
10672: LD_VAR 0 6
10676: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
10682: PPUSH
10683: PPUSH
10684: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 488
10699: NOT
10700: PUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: CALL_OW 488
10715: NOT
10716: OR
10717: IFFALSE 10730
// begin result = - 1 ;
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_INT 1
10726: NEG
10727: ST_TO_ADDR
// exit ;
10728: GO 10890
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10730: LD_ADDR_VAR 0 6
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_VAR 0 4
10754: PPUSH
10755: CALL_OW 298
10759: ST_TO_ADDR
// dist_2 = 99999 ;
10760: LD_ADDR_VAR 0 7
10764: PUSH
10765: LD_INT 99999
10767: ST_TO_ADDR
// for b = 0 to 5 do
10768: LD_ADDR_VAR 0 8
10772: PUSH
10773: DOUBLE
10774: LD_INT 0
10776: DEC
10777: ST_TO_ADDR
10778: LD_INT 5
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10878
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10784: LD_ADDR_VAR 0 9
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_VAR 0 8
10798: PPUSH
10799: LD_VAR 0 6
10803: PPUSH
10804: CALL_OW 272
10808: PPUSH
10809: LD_VAR 0 2
10813: PPUSH
10814: LD_VAR 0 8
10818: PPUSH
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 273
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_VAR 0 4
10838: PPUSH
10839: CALL_OW 298
10843: ST_TO_ADDR
// if temp_dist < dist_2 then
10844: LD_VAR 0 9
10848: PUSH
10849: LD_VAR 0 7
10853: LESS
10854: IFFALSE 10876
// begin dist_2 = temp_dist ;
10856: LD_ADDR_VAR 0 7
10860: PUSH
10861: LD_VAR 0 9
10865: ST_TO_ADDR
// dir = b ;
10866: LD_ADDR_VAR 0 10
10870: PUSH
10871: LD_VAR 0 8
10875: ST_TO_ADDR
// end ; end ;
10876: GO 10781
10878: POP
10879: POP
// result = dir ;
10880: LD_ADDR_VAR 0 5
10884: PUSH
10885: LD_VAR 0 10
10889: ST_TO_ADDR
// end ;
10890: LD_VAR 0 5
10894: RET
// export function MoveToHill ; begin
10895: LD_INT 0
10897: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10898: LD_EXP 50
10902: PPUSH
10903: LD_INT 65
10905: PPUSH
10906: LD_INT 59
10908: PPUSH
10909: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10913: LD_EXP 50
10917: PPUSH
10918: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10922: LD_EXP 51
10926: PPUSH
10927: LD_INT 65
10929: PPUSH
10930: LD_INT 58
10932: PPUSH
10933: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10937: LD_EXP 51
10941: PPUSH
10942: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10946: LD_EXP 52
10950: PPUSH
10951: LD_INT 64
10953: PPUSH
10954: LD_INT 57
10956: PPUSH
10957: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10961: LD_EXP 52
10965: PPUSH
10966: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10970: LD_EXP 53
10974: PPUSH
10975: LD_INT 64
10977: PPUSH
10978: LD_INT 56
10980: PPUSH
10981: CALL_OW 111
// AddComCrawl ( Balei ) ;
10985: LD_EXP 53
10989: PPUSH
10990: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10994: LD_EXP 54
10998: PPUSH
10999: LD_INT 63
11001: PPUSH
11002: LD_INT 55
11004: PPUSH
11005: CALL_OW 111
// AddComCrawl ( Belkov ) ;
11009: LD_EXP 54
11013: PPUSH
11014: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
11018: LD_EXP 55
11022: PPUSH
11023: LD_INT 66
11025: PPUSH
11026: LD_INT 58
11028: PPUSH
11029: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
11033: LD_EXP 55
11037: PPUSH
11038: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
11042: LD_EXP 57
11046: PPUSH
11047: CALL_OW 255
11051: PUSH
11052: LD_INT 6
11054: EQUAL
11055: PUSH
11056: LD_EXP 12
11060: AND
11061: IFFALSE 11087
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
11063: LD_EXP 57
11067: PPUSH
11068: LD_INT 63
11070: PPUSH
11071: LD_INT 54
11073: PPUSH
11074: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
11078: LD_EXP 57
11082: PPUSH
11083: CALL_OW 197
// end ; if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11087: LD_EXP 50
11091: PPUSH
11092: LD_INT 65
11094: PPUSH
11095: LD_INT 59
11097: PPUSH
11098: CALL_OW 297
11102: PUSH
11103: LD_INT 7
11105: LESS
11106: IFFALSE 11132
// begin ComCrawl ( Pokryshkin ) ;
11108: LD_EXP 50
11112: PPUSH
11113: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11117: LD_EXP 50
11121: PPUSH
11122: LD_INT 65
11124: PPUSH
11125: LD_INT 59
11127: PPUSH
11128: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11132: LD_EXP 51
11136: PPUSH
11137: LD_INT 65
11139: PPUSH
11140: LD_INT 58
11142: PPUSH
11143: CALL_OW 297
11147: PUSH
11148: LD_INT 7
11150: LESS
11151: IFFALSE 11177
// begin ComCrawl ( Saseda ) ;
11153: LD_EXP 51
11157: PPUSH
11158: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11162: LD_EXP 51
11166: PPUSH
11167: LD_INT 65
11169: PPUSH
11170: LD_INT 58
11172: PPUSH
11173: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11177: LD_EXP 52
11181: PPUSH
11182: LD_INT 64
11184: PPUSH
11185: LD_INT 57
11187: PPUSH
11188: CALL_OW 297
11192: PUSH
11193: LD_INT 7
11195: LESS
11196: IFFALSE 11222
// begin ComCrawl ( Jaworska ) ;
11198: LD_EXP 52
11202: PPUSH
11203: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11207: LD_EXP 52
11211: PPUSH
11212: LD_INT 64
11214: PPUSH
11215: LD_INT 57
11217: PPUSH
11218: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11222: LD_EXP 53
11226: PPUSH
11227: LD_INT 64
11229: PPUSH
11230: LD_INT 56
11232: PPUSH
11233: CALL_OW 297
11237: PUSH
11238: LD_INT 7
11240: LESS
11241: IFFALSE 11267
// begin ComCrawl ( Balei ) ;
11243: LD_EXP 53
11247: PPUSH
11248: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11252: LD_EXP 53
11256: PPUSH
11257: LD_INT 64
11259: PPUSH
11260: LD_INT 56
11262: PPUSH
11263: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11267: LD_EXP 54
11271: PPUSH
11272: LD_INT 63
11274: PPUSH
11275: LD_INT 55
11277: PPUSH
11278: CALL_OW 297
11282: PUSH
11283: LD_INT 7
11285: LESS
11286: IFFALSE 11312
// begin ComCrawl ( Belkov ) ;
11288: LD_EXP 54
11292: PPUSH
11293: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11297: LD_EXP 54
11301: PPUSH
11302: LD_INT 63
11304: PPUSH
11305: LD_INT 55
11307: PPUSH
11308: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11312: LD_EXP 55
11316: PPUSH
11317: LD_INT 66
11319: PPUSH
11320: LD_INT 58
11322: PPUSH
11323: CALL_OW 297
11327: PUSH
11328: LD_INT 7
11330: LESS
11331: IFFALSE 11357
// begin ComCrawl ( Jaunzeme ) ;
11333: LD_EXP 55
11337: PPUSH
11338: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11342: LD_EXP 55
11346: PPUSH
11347: LD_INT 66
11349: PPUSH
11350: LD_INT 58
11352: PPUSH
11353: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11357: LD_EXP 57
11361: PPUSH
11362: LD_INT 63
11364: PPUSH
11365: LD_INT 54
11367: PPUSH
11368: CALL_OW 297
11372: PUSH
11373: LD_INT 7
11375: LESS
11376: PUSH
11377: LD_EXP 57
11381: PPUSH
11382: CALL_OW 255
11386: PUSH
11387: LD_INT 6
11389: EQUAL
11390: AND
11391: PUSH
11392: LD_EXP 12
11396: AND
11397: IFFALSE 11423
// begin ComCrawl ( Gnyevko ) ;
11399: LD_EXP 57
11403: PPUSH
11404: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11408: LD_EXP 57
11412: PPUSH
11413: LD_INT 63
11415: PPUSH
11416: LD_INT 54
11418: PPUSH
11419: CALL_OW 171
// end ; end ;
11423: LD_VAR 0 1
11427: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
11428: LD_EXP 45
11432: PPUSH
11433: CALL_OW 303
11437: NOT
11438: PUSH
11439: LD_EXP 45
11443: PPUSH
11444: CALL_OW 301
11448: NOT
11449: OR
11450: PUSH
11451: LD_EXP 15
11455: AND
11456: IFFALSE 11797
11458: GO 11460
11460: DISABLE
// begin if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11461: LD_EXP 50
11465: PPUSH
11466: LD_INT 65
11468: PPUSH
11469: LD_INT 59
11471: PPUSH
11472: CALL_OW 297
11476: PUSH
11477: LD_INT 7
11479: LESS
11480: IFFALSE 11506
// begin ComCrawl ( Pokryshkin ) ;
11482: LD_EXP 50
11486: PPUSH
11487: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11491: LD_EXP 50
11495: PPUSH
11496: LD_INT 65
11498: PPUSH
11499: LD_INT 59
11501: PPUSH
11502: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11506: LD_EXP 51
11510: PPUSH
11511: LD_INT 65
11513: PPUSH
11514: LD_INT 58
11516: PPUSH
11517: CALL_OW 297
11521: PUSH
11522: LD_INT 7
11524: LESS
11525: IFFALSE 11551
// begin ComCrawl ( Saseda ) ;
11527: LD_EXP 51
11531: PPUSH
11532: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11536: LD_EXP 51
11540: PPUSH
11541: LD_INT 65
11543: PPUSH
11544: LD_INT 58
11546: PPUSH
11547: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11551: LD_EXP 52
11555: PPUSH
11556: LD_INT 64
11558: PPUSH
11559: LD_INT 57
11561: PPUSH
11562: CALL_OW 297
11566: PUSH
11567: LD_INT 7
11569: LESS
11570: IFFALSE 11596
// begin ComCrawl ( Jaworska ) ;
11572: LD_EXP 52
11576: PPUSH
11577: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11581: LD_EXP 52
11585: PPUSH
11586: LD_INT 64
11588: PPUSH
11589: LD_INT 57
11591: PPUSH
11592: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11596: LD_EXP 53
11600: PPUSH
11601: LD_INT 64
11603: PPUSH
11604: LD_INT 56
11606: PPUSH
11607: CALL_OW 297
11611: PUSH
11612: LD_INT 7
11614: LESS
11615: IFFALSE 11641
// begin ComCrawl ( Balei ) ;
11617: LD_EXP 53
11621: PPUSH
11622: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11626: LD_EXP 53
11630: PPUSH
11631: LD_INT 64
11633: PPUSH
11634: LD_INT 56
11636: PPUSH
11637: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11641: LD_EXP 54
11645: PPUSH
11646: LD_INT 63
11648: PPUSH
11649: LD_INT 55
11651: PPUSH
11652: CALL_OW 297
11656: PUSH
11657: LD_INT 7
11659: LESS
11660: IFFALSE 11686
// begin ComCrawl ( Belkov ) ;
11662: LD_EXP 54
11666: PPUSH
11667: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11671: LD_EXP 54
11675: PPUSH
11676: LD_INT 63
11678: PPUSH
11679: LD_INT 55
11681: PPUSH
11682: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11686: LD_EXP 55
11690: PPUSH
11691: LD_INT 66
11693: PPUSH
11694: LD_INT 58
11696: PPUSH
11697: CALL_OW 297
11701: PUSH
11702: LD_INT 7
11704: LESS
11705: IFFALSE 11731
// begin ComCrawl ( Jaunzeme ) ;
11707: LD_EXP 55
11711: PPUSH
11712: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11716: LD_EXP 55
11720: PPUSH
11721: LD_INT 66
11723: PPUSH
11724: LD_INT 58
11726: PPUSH
11727: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11731: LD_EXP 57
11735: PPUSH
11736: LD_INT 63
11738: PPUSH
11739: LD_INT 54
11741: PPUSH
11742: CALL_OW 297
11746: PUSH
11747: LD_INT 7
11749: LESS
11750: PUSH
11751: LD_EXP 57
11755: PPUSH
11756: CALL_OW 255
11760: PUSH
11761: LD_INT 6
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_EXP 12
11770: AND
11771: IFFALSE 11797
// begin ComCrawl ( Gnyevko ) ;
11773: LD_EXP 57
11777: PPUSH
11778: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11782: LD_EXP 57
11786: PPUSH
11787: LD_INT 63
11789: PPUSH
11790: LD_INT 54
11792: PPUSH
11793: CALL_OW 171
// end ; end ; end_of_file
11797: END
// export function BurlakDying ; begin
11798: LD_INT 0
11800: PPUSH
// YouLost ( Burlak ) ;
11801: LD_STRING Burlak
11803: PPUSH
11804: CALL_OW 104
// end ;
11808: LD_VAR 0 1
11812: RET
// every 0 0$1 trigger kirovSolds = 0 do
11813: LD_EXP 59
11817: PUSH
11818: LD_INT 0
11820: EQUAL
11821: IFFALSE 11833
11823: GO 11825
11825: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11826: LD_STRING KirovSoldsDie
11828: PPUSH
11829: CALL_OW 104
11833: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11834: LD_EXP 22
11838: PUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_INT 22
11844: PUSH
11845: LD_INT 3
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 71
11870: PUSH
11871: LD_INT 0
11873: EQUAL
11874: AND
11875: IFFALSE 12249
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin if IsOk ( Belkov ) then
11883: LD_EXP 54
11887: PPUSH
11888: CALL_OW 302
11892: IFFALSE 11908
// Say ( Belkov , D12-Bel-1 ) else
11894: LD_EXP 54
11898: PPUSH
11899: LD_STRING D12-Bel-1
11901: PPUSH
11902: CALL_OW 88
11906: GO 11968
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11908: LD_INT 22
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 1
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 50
11930: PUSH
11931: EMPTY
11932: LIST
11933: PUSH
11934: LD_INT 26
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_STRING D12-RSol1-1
11957: PPUSH
11958: LD_STRING 
11960: PPUSH
11961: LD_INT 0
11963: PPUSH
11964: CALL 8631 0 4
// if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or not gnyevkoSaved then
11968: LD_EXP 56
11972: PPUSH
11973: CALL_OW 302
11977: PUSH
11978: LD_EXP 56
11982: PPUSH
11983: CALL_OW 255
11987: PUSH
11988: LD_INT 8
11990: EQUAL
11991: AND
11992: PUSH
11993: LD_EXP 12
11997: NOT
11998: OR
11999: IFFALSE 12160
// begin case Query ( QExit2 ) of 1 :
12001: LD_STRING QExit2
12003: PPUSH
12004: CALL_OW 97
12008: PUSH
12009: LD_INT 1
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// begin FinishMission ;
12018: CALL 12252 0 0
// end ; 2 :
12022: GO 12158
12024: LD_INT 2
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12157
12032: POP
// begin if not gnyevkoSaved then
12033: LD_EXP 12
12037: NOT
12038: IFFALSE 12090
// begin Say ( Burlak , D12-Bur-1 ) ;
12040: LD_EXP 49
12044: PPUSH
12045: LD_STRING D12-Bur-1
12047: PPUSH
12048: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
12052: LD_EXP 54
12056: PPUSH
12057: CALL_OW 255
12061: PUSH
12062: LD_INT 3
12064: EQUAL
12065: PUSH
12066: LD_EXP 54
12070: PPUSH
12071: CALL_OW 302
12075: AND
12076: IFFALSE 12090
// Say ( Belkov , D12-Bel-2 ) ;
12078: LD_EXP 54
12082: PPUSH
12083: LD_STRING D12-Bel-2
12085: PPUSH
12086: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12090: LD_INT 35
12092: PPUSH
12093: CALL_OW 67
// until ( gnyevkoSaved or IsDead ( Gnyevko ) ) and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12097: LD_EXP 12
12101: PUSH
12102: LD_EXP 57
12106: PPUSH
12107: CALL_OW 301
12111: OR
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 22
12118: PUSH
12119: LD_INT 3
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 71
12144: PUSH
12145: LD_INT 0
12147: EQUAL
12148: AND
12149: IFFALSE 12090
// FinishMission ;
12151: CALL 12252 0 0
// end ; end ;
12155: GO 12158
12157: POP
// end else
12158: GO 12249
// begin if IsOk ( Belkov ) then
12160: LD_EXP 54
12164: PPUSH
12165: CALL_OW 302
12169: IFFALSE 12185
// Say ( Belkov , D12-Bel-1 ) else
12171: LD_EXP 54
12175: PPUSH
12176: LD_STRING D12-Bel-1
12178: PPUSH
12179: CALL_OW 88
12183: GO 12245
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 21
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 50
12207: PUSH
12208: EMPTY
12209: LIST
12210: PUSH
12211: LD_INT 26
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: PPUSH
12232: LD_STRING D12-RSol1-1
12234: PPUSH
12235: LD_STRING 
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL 8631 0 4
// FinishMission ;
12245: CALL 12252 0 0
// end ; end ;
12249: PPOPN 1
12251: END
// function FinishMission ; begin
12252: LD_INT 0
12254: PPUSH
// SetRewards ;
12255: CALL 12276 0 0
// SavePlayerCharacters ;
12259: CALL 12627 0 0
// SaveGlobalVariables ;
12263: CALL 12757 0 0
// YouWin ;
12267: CALL_OW 103
// end ;
12271: LD_VAR 0 1
12275: RET
// function SetRewards ; begin
12276: LD_INT 0
12278: PPUSH
// if not gladstoneEscape and not JohannaEscape then
12279: LD_EXP 19
12283: NOT
12284: PUSH
12285: LD_EXP 20
12289: NOT
12290: AND
12291: IFFALSE 12303
// AddMedal ( NoEscape , 1 ) ;
12293: LD_STRING NoEscape
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
12303: LD_EXP 19
12307: PUSH
12308: LD_EXP 20
12312: NOT
12313: AND
12314: IFFALSE 12327
// AddMedal ( NoEscape , - 1 ) ;
12316: LD_STRING NoEscape
12318: PPUSH
12319: LD_INT 1
12321: NEG
12322: PPUSH
12323: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
12327: LD_EXP 19
12331: NOT
12332: PUSH
12333: LD_EXP 20
12337: AND
12338: IFFALSE 12351
// AddMedal ( NoEscape , - 2 ) ;
12340: LD_STRING NoEscape
12342: PPUSH
12343: LD_INT 2
12345: NEG
12346: PPUSH
12347: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
12351: LD_EXP 19
12355: PUSH
12356: LD_EXP 20
12360: AND
12361: IFFALSE 12374
// AddMedal ( NoEscape , - 3 ) ;
12363: LD_STRING NoEscape
12365: PPUSH
12366: LD_INT 3
12368: NEG
12369: PPUSH
12370: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
12374: LD_EXP 12
12378: PUSH
12379: LD_EXP 57
12383: PPUSH
12384: CALL_OW 302
12388: AND
12389: PUSH
12390: LD_EXP 21
12394: AND
12395: PUSH
12396: LD_EXP 56
12400: PPUSH
12401: CALL_OW 302
12405: AND
12406: IFFALSE 12418
// AddMedal ( Gnyevko , 1 ) ;
12408: LD_STRING Gnyevko
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
12418: LD_EXP 12
12422: NOT
12423: PUSH
12424: LD_EXP 21
12428: AND
12429: PUSH
12430: LD_EXP 56
12434: PPUSH
12435: CALL_OW 302
12439: AND
12440: IFFALSE 12453
// AddMedal ( Gnyevko , - 1 ) ;
12442: LD_STRING Gnyevko
12444: PPUSH
12445: LD_INT 1
12447: NEG
12448: PPUSH
12449: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
12453: LD_EXP 12
12457: PUSH
12458: LD_EXP 21
12462: NOT
12463: PUSH
12464: LD_EXP 57
12468: PPUSH
12469: CALL_OW 302
12473: NOT
12474: OR
12475: PUSH
12476: LD_EXP 56
12480: PPUSH
12481: CALL_OW 302
12485: NOT
12486: OR
12487: AND
12488: IFFALSE 12501
// AddMedal ( Gnyevko , - 2 ) ;
12490: LD_STRING Gnyevko
12492: PPUSH
12493: LD_INT 2
12495: NEG
12496: PPUSH
12497: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
12501: LD_EXP 12
12505: NOT
12506: PUSH
12507: LD_EXP 21
12511: NOT
12512: AND
12513: PUSH
12514: LD_EXP 57
12518: PPUSH
12519: CALL_OW 302
12523: NOT
12524: PUSH
12525: LD_EXP 56
12529: PPUSH
12530: CALL_OW 302
12534: NOT
12535: AND
12536: OR
12537: IFFALSE 12550
// AddMedal ( Gnyevko , - 3 ) ;
12539: LD_STRING Gnyevko
12541: PPUSH
12542: LD_INT 3
12544: NEG
12545: PPUSH
12546: CALL_OW 101
// if lostComradesCounter = 0 then
12550: LD_EXP 23
12554: PUSH
12555: LD_INT 0
12557: EQUAL
12558: IFFALSE 12572
// AddMedal ( NoLosses , 1 ) else
12560: LD_STRING NoLosses
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 101
12570: GO 12582
// AddMedal ( NoLosses , 0 ) ;
12572: LD_STRING NoLosses
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 101
// GiveMedals ( Main ) ;
12582: LD_STRING Main
12584: PPUSH
12585: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PPUSH
12618: CALL_OW 43
// end ;
12622: LD_VAR 0 1
12626: RET
// function SavePlayerCharacters ; var others ; begin
12627: LD_INT 0
12629: PPUSH
12630: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12631: LD_EXP 49
12635: PPUSH
12636: LD_STRING Burlak
12638: PPUSH
12639: CALL 8861 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12643: LD_EXP 57
12647: PPUSH
12648: LD_STRING Gnyevko
12650: PPUSH
12651: CALL 8861 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12655: LD_EXP 54
12659: PPUSH
12660: LD_STRING Belkov
12662: PPUSH
12663: CALL 8861 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12667: LD_EXP 56
12671: PPUSH
12672: LD_STRING Kirilenkova
12674: PPUSH
12675: CALL 8861 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12679: LD_ADDR_VAR 0 2
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: PUSH
12713: LD_EXP 49
12717: PUSH
12718: LD_EXP 57
12722: PUSH
12723: LD_EXP 54
12727: PUSH
12728: LD_EXP 56
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: DIFF
12739: ST_TO_ADDR
// ExtSaveCharacters ( others , OtherSurvivors ) ;
12740: LD_VAR 0 2
12744: PPUSH
12745: LD_STRING OtherSurvivors
12747: PPUSH
12748: CALL 8917 0 2
// end ;
12752: LD_VAR 0 1
12756: RET
// function SaveGlobalVariables ; begin
12757: LD_INT 0
12759: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12760: LD_EXP 1
12764: PPUSH
12765: LD_STRING 01_GladstoneStatus
12767: PPUSH
12768: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12772: LD_EXP 2
12776: PPUSH
12777: LD_STRING 01_JohannaStatus
12779: PPUSH
12780: CALL_OW 39
// end ; end_of_file
12784: LD_VAR 0 1
12788: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12789: LD_INT 0
12791: PPUSH
12792: PPUSH
12793: PPUSH
// InitHc_All ( ) ;
12794: CALL_OW 584
// uc_side = 1 ;
12798: LD_ADDR_OWVAR 20
12802: PUSH
12803: LD_INT 1
12805: ST_TO_ADDR
// hc_class := 1 ;
12806: LD_ADDR_OWVAR 28
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// hc_sex := sex_male ;
12814: LD_ADDR_OWVAR 27
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12822: LD_ADDR_OWVAR 33
12826: PUSH
12827: LD_STRING AmGalRemake
12829: ST_TO_ADDR
// hc_face_number := 1 ;
12830: LD_ADDR_OWVAR 34
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// hc_name := Charles Brown ;
12838: LD_ADDR_OWVAR 26
12842: PUSH
12843: LD_STRING Charles Brown
12845: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12846: LD_ADDR_OWVAR 29
12850: PUSH
12851: LD_INT 12
12853: PUSH
12854: LD_INT 11
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12861: LD_ADDR_OWVAR 31
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: LD_INT 0
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// Charles = CreateHuman ;
12884: LD_ADDR_EXP 45
12888: PUSH
12889: CALL_OW 44
12893: ST_TO_ADDR
// hc_class := 1 ;
12894: LD_ADDR_OWVAR 28
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// hc_sex := sex_female ;
12902: LD_ADDR_OWVAR 27
12906: PUSH
12907: LD_INT 2
12909: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12910: LD_ADDR_OWVAR 33
12914: PUSH
12915: LD_STRING AmGalRemake
12917: ST_TO_ADDR
// hc_face_number := 2 ;
12918: LD_ADDR_OWVAR 34
12922: PUSH
12923: LD_INT 2
12925: ST_TO_ADDR
// hc_name := Johanna Holland ;
12926: LD_ADDR_OWVAR 26
12930: PUSH
12931: LD_STRING Johanna Holland
12933: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12934: LD_ADDR_OWVAR 29
12938: PUSH
12939: LD_INT 12
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12949: LD_ADDR_OWVAR 31
12953: PUSH
12954: LD_EXP 39
12958: PUSH
12959: LD_INT 0
12961: PPUSH
12962: LD_INT 2
12964: PPUSH
12965: CALL_OW 12
12969: PUSH
12970: LD_INT 0
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 12
12980: PUSH
12981: LD_INT 0
12983: PPUSH
12984: LD_INT 2
12986: PPUSH
12987: CALL_OW 12
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// Johanna = CreateHuman ;
12998: LD_ADDR_EXP 46
13002: PUSH
13003: CALL_OW 44
13007: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
13008: LD_EXP 46
13012: PPUSH
13013: LD_INT 19
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
13023: LD_EXP 46
13027: PPUSH
13028: LD_INT 23
13030: PPUSH
13031: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
13035: LD_ADDR_EXP 47
13039: PUSH
13040: LD_STRING Gladstone
13042: PPUSH
13043: LD_INT 0
13045: PPUSH
13046: CALL 8568 0 2
13050: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
13051: LD_EXP 47
13055: PPUSH
13056: LD_INT 22
13058: PPUSH
13059: CALL_OW 52
// amApemans = [ ] ;
13063: LD_ADDR_EXP 48
13067: PUSH
13068: EMPTY
13069: ST_TO_ADDR
// for i := 1 to amApeAmount do
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: DOUBLE
13076: LD_INT 1
13078: DEC
13079: ST_TO_ADDR
13080: LD_EXP 38
13084: PUSH
13085: FOR_TO
13086: IFFALSE 13208
// begin InitHC_All ( ) ;
13088: CALL_OW 584
// hc_class := class_apeman ;
13092: LD_ADDR_OWVAR 28
13096: PUSH
13097: LD_INT 12
13099: ST_TO_ADDR
// hc_gallery :=  ;
13100: LD_ADDR_OWVAR 33
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// hc_name :=  ;
13108: LD_ADDR_OWVAR 26
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
13116: LD_ADDR_OWVAR 31
13120: PUSH
13121: LD_EXP 39
13125: PUSH
13126: LD_INT 0
13128: PPUSH
13129: LD_INT 2
13131: PPUSH
13132: CALL_OW 12
13136: PUSH
13137: LD_INT 0
13139: PPUSH
13140: LD_INT 2
13142: PPUSH
13143: CALL_OW 12
13147: PUSH
13148: LD_INT 0
13150: PPUSH
13151: LD_INT 2
13153: PPUSH
13154: CALL_OW 12
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: ST_TO_ADDR
// ape = CreateHuman ;
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: CALL_OW 44
13174: ST_TO_ADDR
// PlaceUnitArea ( ape , AmApeResp , false ) ;
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 29
13182: PPUSH
13183: LD_INT 0
13185: PPUSH
13186: CALL_OW 49
// amApemans = amApemans ^ ape ;
13190: LD_ADDR_EXP 48
13194: PUSH
13195: LD_EXP 48
13199: PUSH
13200: LD_VAR 0 3
13204: ADD
13205: ST_TO_ADDR
// end ;
13206: GO 13085
13208: POP
13209: POP
// SetLives ( am_bun , americanBunkerHP ) ;
13210: LD_INT 23
13212: PPUSH
13213: LD_EXP 36
13217: PPUSH
13218: CALL_OW 234
// end ; end_of_file
13222: LD_VAR 0 1
13226: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
13227: LD_INT 0
13229: PPUSH
// PrepareHero ;
13230: CALL 13255 0 0
// PreparePokryshkinTeams ;
13234: CALL 13349 0 0
// PrepareJelena ;
13238: CALL 13614 0 0
// PrepareGnyevko ;
13242: CALL 13646 0 0
// PrepareKurin ;
13246: CALL 13317 0 0
// end ;
13250: LD_VAR 0 1
13254: RET
// function PrepareHero ; begin
13255: LD_INT 0
13257: PPUSH
// uc_side = 3 ;
13258: LD_ADDR_OWVAR 20
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
13266: LD_ADDR_EXP 49
13270: PUSH
13271: LD_STRING Burlak
13273: PPUSH
13274: LD_INT 0
13276: PPUSH
13277: CALL 8568 0 2
13281: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
13282: LD_EXP 49
13286: PPUSH
13287: LD_EXP 40
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: LD_EXP 40
13300: PUSH
13301: LD_INT 2
13303: ARRAY
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 48
// end ;
13312: LD_VAR 0 1
13316: RET
// function PrepareKurin ; begin
13317: LD_INT 0
13319: PPUSH
// uc_side = 6 ;
13320: LD_ADDR_OWVAR 20
13324: PUSH
13325: LD_INT 6
13327: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
13328: LD_ADDR_EXP 58
13332: PUSH
13333: LD_STRING Kurin
13335: PPUSH
13336: LD_INT 0
13338: PPUSH
13339: CALL 8568 0 2
13343: ST_TO_ADDR
// end ;
13344: LD_VAR 0 1
13348: RET
// function PreparePokryshkinTeams ; begin
13349: LD_INT 0
13351: PPUSH
// uc_side = 6 ;
13352: LD_ADDR_OWVAR 20
13356: PUSH
13357: LD_INT 6
13359: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
13360: LD_ADDR_EXP 50
13364: PUSH
13365: LD_STRING Pokryshkin
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL 8568 0 2
13375: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
13376: LD_ADDR_EXP 51
13380: PUSH
13381: LD_STRING Saseda
13383: PPUSH
13384: LD_INT 0
13386: PPUSH
13387: CALL 8568 0 2
13391: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
13392: LD_ADDR_EXP 52
13396: PUSH
13397: LD_STRING Jaworska
13399: PPUSH
13400: LD_INT 0
13402: PPUSH
13403: CALL 8568 0 2
13407: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
13408: LD_ADDR_EXP 53
13412: PUSH
13413: LD_STRING Balei
13415: PPUSH
13416: LD_INT 0
13418: PPUSH
13419: CALL 8568 0 2
13423: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
13424: LD_ADDR_EXP 54
13428: PUSH
13429: LD_STRING Belkov
13431: PPUSH
13432: LD_INT 0
13434: PPUSH
13435: CALL 8568 0 2
13439: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
13440: LD_EXP 50
13444: PPUSH
13445: LD_INT 25
13447: PPUSH
13448: LD_INT 0
13450: PPUSH
13451: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
13455: LD_EXP 51
13459: PPUSH
13460: LD_INT 17
13462: PPUSH
13463: LD_INT 0
13465: PPUSH
13466: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
13470: LD_EXP 52
13474: PPUSH
13475: LD_INT 17
13477: PPUSH
13478: LD_INT 0
13480: PPUSH
13481: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
13485: LD_EXP 53
13489: PPUSH
13490: LD_INT 17
13492: PPUSH
13493: LD_INT 0
13495: PPUSH
13496: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
13500: LD_EXP 54
13504: PPUSH
13505: LD_INT 17
13507: PPUSH
13508: LD_INT 0
13510: PPUSH
13511: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
13515: LD_ADDR_EXP 59
13519: PUSH
13520: LD_EXP 50
13524: PUSH
13525: LD_EXP 51
13529: PUSH
13530: LD_EXP 53
13534: PUSH
13535: LD_EXP 54
13539: PUSH
13540: LD_EXP 52
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: ST_TO_ADDR
// if Difficulty < 3 then
13552: LD_OWVAR 67
13556: PUSH
13557: LD_INT 3
13559: LESS
13560: IFFALSE 13609
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
13562: LD_ADDR_EXP 55
13566: PUSH
13567: LD_STRING Jaunzeme
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL 8568 0 2
13577: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
13578: LD_EXP 55
13582: PPUSH
13583: LD_INT 26
13585: PPUSH
13586: LD_INT 0
13588: PPUSH
13589: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
13593: LD_ADDR_EXP 59
13597: PUSH
13598: LD_EXP 59
13602: PUSH
13603: LD_EXP 55
13607: ADD
13608: ST_TO_ADDR
// end ; end ;
13609: LD_VAR 0 1
13613: RET
// function PrepareJelena ; begin
13614: LD_INT 0
13616: PPUSH
// uc_side = 5 ;
13617: LD_ADDR_OWVAR 20
13621: PUSH
13622: LD_INT 5
13624: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13625: LD_ADDR_EXP 56
13629: PUSH
13630: LD_STRING Kirilenkova
13632: PPUSH
13633: LD_INT 0
13635: PPUSH
13636: CALL 8568 0 2
13640: ST_TO_ADDR
// end ;
13641: LD_VAR 0 1
13645: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
// uc_side = 5 ;
13652: LD_ADDR_OWVAR 20
13656: PUSH
13657: LD_INT 5
13659: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13660: LD_ADDR_EXP 57
13664: PUSH
13665: LD_STRING Gnyevko
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL 8568 0 2
13675: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13676: LD_ADDR_VAR 0 4
13680: PUSH
13681: LD_EXP 41
13685: PUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_EXP 41
13693: PPUSH
13694: CALL_OW 12
13698: ARRAY
13699: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13700: LD_EXP 57
13704: PPUSH
13705: LD_VAR 0 4
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13730: LD_EXP 57
13734: PPUSH
13735: LD_EXP 42
13739: PPUSH
13740: CALL_OW 234
// ComHold ( Gnyevko ) ;
13744: LD_EXP 57
13748: PPUSH
13749: CALL_OW 140
// InitHC_All ( ) ;
13753: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_EXP 30
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_OWVAR 67
13798: ARRAY
13799: MINUS
13800: PUSH
13801: FOR_TO
13802: IFFALSE 13932
// begin uc_side = 0 ;
13804: LD_ADDR_OWVAR 20
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// uc_nation = nation_nature ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_INT 0
13819: ST_TO_ADDR
// hc_class = class_apeman ;
13820: LD_ADDR_OWVAR 28
13824: PUSH
13825: LD_INT 12
13827: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13828: LD_ADDR_OWVAR 31
13832: PUSH
13833: LD_EXP 31
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PUSH
13842: LD_EXP 31
13846: PUSH
13847: LD_INT 2
13849: ARRAY
13850: PUSH
13851: LD_EXP 31
13855: PUSH
13856: LD_INT 3
13858: ARRAY
13859: PUSH
13860: LD_EXP 31
13864: PUSH
13865: LD_INT 4
13867: ARRAY
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13875: LD_ADDR_OWVAR 35
13879: PUSH
13880: LD_EXP 37
13884: ST_TO_ADDR
// un = CreateHuman ;
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13895: LD_VAR 0 2
13899: PPUSH
13900: LD_EXP 57
13904: PPUSH
13905: CALL_OW 250
13909: PPUSH
13910: LD_EXP 57
13914: PPUSH
13915: CALL_OW 251
13919: PPUSH
13920: LD_INT 8
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 50
// end ;
13930: GO 13801
13932: POP
13933: POP
// end ; end_of_file
13934: LD_VAR 0 1
13938: RET
// export function CreateNature ; var i , un ; begin
13939: LD_INT 0
13941: PPUSH
13942: PPUSH
13943: PPUSH
// InitHC_All ( ) ;
13944: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] do
13948: LD_ADDR_VAR 0 2
13952: PUSH
13953: DOUBLE
13954: LD_INT 1
13956: DEC
13957: ST_TO_ADDR
13958: LD_EXP 30
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PUSH
13967: FOR_TO
13968: IFFALSE 14078
// begin uc_side = 0 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// uc_nation = nation_nature ;
13978: LD_ADDR_OWVAR 21
13982: PUSH
13983: LD_INT 0
13985: ST_TO_ADDR
// hc_class = class_apeman ;
13986: LD_ADDR_OWVAR 28
13990: PUSH
13991: LD_INT 12
13993: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13994: LD_ADDR_OWVAR 31
13998: PUSH
13999: LD_EXP 31
14003: PUSH
14004: LD_INT 1
14006: ARRAY
14007: PUSH
14008: LD_EXP 31
14012: PUSH
14013: LD_INT 2
14015: ARRAY
14016: PUSH
14017: LD_EXP 31
14021: PUSH
14022: LD_INT 3
14024: ARRAY
14025: PUSH
14026: LD_EXP 31
14030: PUSH
14031: LD_INT 4
14033: ARRAY
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: ST_TO_ADDR
// hc_agressivity = apeAgression ;
14041: LD_ADDR_OWVAR 35
14045: PUSH
14046: LD_EXP 37
14050: ST_TO_ADDR
// un = CreateHuman ;
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: CALL_OW 44
14060: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 16
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// end ;
14076: GO 13967
14078: POP
14079: POP
// for i := 1 to animalsAmount [ 2 ] do
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_EXP 30
14094: PUSH
14095: LD_INT 2
14097: ARRAY
14098: PUSH
14099: FOR_TO
14100: IFFALSE 14210
// begin uc_side = 0 ;
14102: LD_ADDR_OWVAR 20
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// uc_nation = nation_nature ;
14110: LD_ADDR_OWVAR 21
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// hc_class = class_phororhacos ;
14118: LD_ADDR_OWVAR 28
14122: PUSH
14123: LD_INT 18
14125: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14126: LD_ADDR_OWVAR 31
14130: PUSH
14131: LD_EXP 31
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PUSH
14140: LD_EXP 31
14144: PUSH
14145: LD_INT 2
14147: ARRAY
14148: PUSH
14149: LD_EXP 31
14153: PUSH
14154: LD_INT 3
14156: ARRAY
14157: PUSH
14158: LD_EXP 31
14162: PUSH
14163: LD_INT 4
14165: ARRAY
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14173: LD_ADDR_OWVAR 35
14177: PUSH
14178: LD_EXP 32
14182: ST_TO_ADDR
// un = CreateHuman ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: CALL_OW 44
14192: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14193: LD_VAR 0 3
14197: PPUSH
14198: LD_INT 15
14200: PPUSH
14201: LD_INT 0
14203: PPUSH
14204: CALL_OW 49
// end ;
14208: GO 14099
14210: POP
14211: POP
// for i := 1 to animalsAmount [ 3 ] do
14212: LD_ADDR_VAR 0 2
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_EXP 30
14226: PUSH
14227: LD_INT 3
14229: ARRAY
14230: PUSH
14231: FOR_TO
14232: IFFALSE 14342
// begin uc_side = 0 ;
14234: LD_ADDR_OWVAR 20
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// uc_nation = nation_nature ;
14242: LD_ADDR_OWVAR 21
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// hc_class = class_tiger ;
14250: LD_ADDR_OWVAR 28
14254: PUSH
14255: LD_INT 14
14257: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14258: LD_ADDR_OWVAR 31
14262: PUSH
14263: LD_EXP 31
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PUSH
14272: LD_EXP 31
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PUSH
14281: LD_EXP 31
14285: PUSH
14286: LD_INT 3
14288: ARRAY
14289: PUSH
14290: LD_EXP 31
14294: PUSH
14295: LD_INT 4
14297: ARRAY
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14305: LD_ADDR_OWVAR 35
14309: PUSH
14310: LD_EXP 32
14314: ST_TO_ADDR
// un = CreateHuman ;
14315: LD_ADDR_VAR 0 3
14319: PUSH
14320: CALL_OW 44
14324: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_INT 15
14332: PPUSH
14333: LD_INT 0
14335: PPUSH
14336: CALL_OW 49
// end ;
14340: GO 14231
14342: POP
14343: POP
// for i := 1 to animalsAmount [ 4 ] do
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_EXP 30
14358: PUSH
14359: LD_INT 4
14361: ARRAY
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14474
// begin uc_side = 0 ;
14366: LD_ADDR_OWVAR 20
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// uc_nation = nation_nature ;
14374: LD_ADDR_OWVAR 21
14378: PUSH
14379: LD_INT 0
14381: ST_TO_ADDR
// hc_class = 21 ;
14382: LD_ADDR_OWVAR 28
14386: PUSH
14387: LD_INT 21
14389: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14390: LD_ADDR_OWVAR 31
14394: PUSH
14395: LD_EXP 31
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PUSH
14404: LD_EXP 31
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PUSH
14413: LD_EXP 31
14417: PUSH
14418: LD_INT 3
14420: ARRAY
14421: PUSH
14422: LD_EXP 31
14426: PUSH
14427: LD_INT 4
14429: ARRAY
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14437: LD_ADDR_OWVAR 35
14441: PUSH
14442: LD_EXP 32
14446: ST_TO_ADDR
// un = CreateHuman ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: CALL_OW 44
14456: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14457: LD_VAR 0 3
14461: PPUSH
14462: LD_INT 15
14464: PPUSH
14465: LD_INT 0
14467: PPUSH
14468: CALL_OW 49
// end ;
14472: GO 14363
14474: POP
14475: POP
// end ; end_of_file
14476: LD_VAR 0 1
14480: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
14481: LD_VAR 0 1
14485: PUSH
14486: LD_EXP 49
14490: EQUAL
14491: PUSH
14492: LD_EXP 56
14496: PPUSH
14497: CALL_OW 255
14501: PUSH
14502: LD_INT 3
14504: EQUAL
14505: NOT
14506: AND
14507: PUSH
14508: LD_EXP 56
14512: PPUSH
14513: CALL_OW 302
14517: NOT
14518: AND
14519: IFFALSE 14525
// BurlakDying ;
14521: CALL 11798 0 0
// if unit = Gladstone then
14525: LD_VAR 0 1
14529: PUSH
14530: LD_EXP 47
14534: EQUAL
14535: IFFALSE 14545
// gladstoneStatus = 0 ;
14537: LD_ADDR_EXP 1
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// if unit = Johanna then
14545: LD_VAR 0 1
14549: PUSH
14550: LD_EXP 46
14554: EQUAL
14555: IFFALSE 14565
// johannaStatus = 0 ;
14557: LD_ADDR_EXP 2
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// end ;
14565: PPOPN 1
14567: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL 30659 0 1
// if unit = Burlak then
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 49
14586: EQUAL
14587: IFFALSE 14593
// BurlakDying ;
14589: CALL 11798 0 0
// if GetSide ( unit ) = 3 then
14593: LD_VAR 0 1
14597: PPUSH
14598: CALL_OW 255
14602: PUSH
14603: LD_INT 3
14605: EQUAL
14606: IFFALSE 14622
// lostComradesCounter = lostComradesCounter + 1 ;
14608: LD_ADDR_EXP 23
14612: PUSH
14613: LD_EXP 23
14617: PUSH
14618: LD_INT 1
14620: PLUS
14621: ST_TO_ADDR
// if unit in kirovSolds then
14622: LD_VAR 0 1
14626: PUSH
14627: LD_EXP 59
14631: IN
14632: IFFALSE 14650
// kirovSolds = kirovSolds diff unit ;
14634: LD_ADDR_EXP 59
14638: PUSH
14639: LD_EXP 59
14643: PUSH
14644: LD_VAR 0 1
14648: DIFF
14649: ST_TO_ADDR
// end ;
14650: PPOPN 1
14652: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 30779 0 2
// end ;
14667: PPOPN 2
14669: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14670: LD_VAR 0 1
14674: PUSH
14675: LD_INT 3
14677: EQUAL
14678: PUSH
14679: LD_VAR 0 2
14683: PUSH
14684: LD_INT 1
14686: EQUAL
14687: AND
14688: PUSH
14689: LD_VAR 0 1
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: LD_INT 3
14705: EQUAL
14706: AND
14707: PUSH
14708: LD_EXP 17
14712: PUSH
14713: LD_INT 1
14715: EQUAL
14716: AND
14717: OR
14718: IFFALSE 14724
// Dial_SecondAttack ;
14720: CALL 6016 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14724: LD_VAR 0 1
14728: PUSH
14729: LD_INT 3
14731: EQUAL
14732: PUSH
14733: LD_VAR 0 2
14737: PUSH
14738: LD_INT 6
14740: EQUAL
14741: AND
14742: PUSH
14743: LD_EXP 18
14747: NOT
14748: AND
14749: IFFALSE 14755
// Dialogue_AttackComrade ;
14751: CALL 4057 0 0
// end ; end_of_file
14755: PPOPN 2
14757: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14758: LD_EXP 56
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: PUSH
14772: LD_EXP 29
14776: PUSH
14777: LD_INT 525
14779: LESS
14780: AND
14781: IFFALSE 14793
14783: GO 14785
14785: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14786: LD_STRING ACH_YELENA
14788: PPUSH
14789: CALL_OW 543
14793: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14794: LD_INT 23
14796: PUSH
14797: LD_INT 0
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: LD_INT 25
14809: PUSH
14810: LD_INT 14
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 25
14819: PUSH
14820: LD_INT 18
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 12
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 69
14851: NOT
14852: IFFALSE 14864
14854: GO 14856
14856: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14857: LD_STRING ACH_NATURE
14859: PPUSH
14860: CALL_OW 543
14864: END
// export globalGameSaveCounter ; every 0 0$1 do
14865: GO 14867
14867: DISABLE
// begin enable ;
14868: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14869: LD_STRING updateTimer(
14871: PUSH
14872: LD_OWVAR 1
14876: STR
14877: PUSH
14878: LD_STRING );
14880: STR
14881: PPUSH
14882: CALL_OW 559
// end ;
14886: END
// every 0 0$1 do
14887: GO 14889
14889: DISABLE
// begin globalGameSaveCounter := 0 ;
14890: LD_ADDR_EXP 60
14894: PUSH
14895: LD_INT 0
14897: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
14898: LD_STRING setGameSaveCounter(0)
14900: PPUSH
14901: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
14905: LD_STRING initStreamRollete();
14907: PPUSH
14908: CALL_OW 559
// InitStreamMode ;
14912: CALL 16238 0 0
// DefineStreamItems ( false ) ;
14916: LD_INT 0
14918: PPUSH
14919: CALL 16702 0 1
// end ;
14923: END
// export function SOS_MapStart ( ) ; begin
14924: LD_INT 0
14926: PPUSH
// if streamModeActive then
14927: LD_EXP 61
14931: IFFALSE 14940
// DefineStreamItems ( true ) ;
14933: LD_INT 1
14935: PPUSH
14936: CALL 16702 0 1
// UpdateLuaVariables ( ) ;
14940: CALL 14957 0 0
// UpdateFactoryWaypoints ( ) ;
14944: CALL 29563 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14948: CALL 29820 0 0
// end ;
14952: LD_VAR 0 1
14956: RET
// function UpdateLuaVariables ( ) ; begin
14957: LD_INT 0
14959: PPUSH
// if globalGameSaveCounter then
14960: LD_EXP 60
14964: IFFALSE 14998
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
14966: LD_ADDR_EXP 60
14970: PUSH
14971: LD_EXP 60
14975: PPUSH
14976: CALL 73940 0 1
14980: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14981: LD_STRING setGameSaveCounter(
14983: PUSH
14984: LD_EXP 60
14988: STR
14989: PUSH
14990: LD_STRING )
14992: STR
14993: PPUSH
14994: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
14998: LD_STRING setGameDifficulty(
15000: PUSH
15001: LD_OWVAR 67
15005: STR
15006: PUSH
15007: LD_STRING )
15009: STR
15010: PPUSH
15011: CALL_OW 559
// end ;
15015: LD_VAR 0 1
15019: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15020: LD_INT 0
15022: PPUSH
// if p2 = stream_mode then
15023: LD_VAR 0 2
15027: PUSH
15028: LD_INT 100
15030: EQUAL
15031: IFFALSE 16034
// begin if not StreamModeActive then
15033: LD_EXP 61
15037: NOT
15038: IFFALSE 15048
// StreamModeActive := true ;
15040: LD_ADDR_EXP 61
15044: PUSH
15045: LD_INT 1
15047: ST_TO_ADDR
// if p3 = 0 then
15048: LD_VAR 0 3
15052: PUSH
15053: LD_INT 0
15055: EQUAL
15056: IFFALSE 15062
// InitStreamMode ;
15058: CALL 16238 0 0
// if p3 = 1 then
15062: LD_VAR 0 3
15066: PUSH
15067: LD_INT 1
15069: EQUAL
15070: IFFALSE 15080
// sRocket := true ;
15072: LD_ADDR_EXP 66
15076: PUSH
15077: LD_INT 1
15079: ST_TO_ADDR
// if p3 = 2 then
15080: LD_VAR 0 3
15084: PUSH
15085: LD_INT 2
15087: EQUAL
15088: IFFALSE 15098
// sSpeed := true ;
15090: LD_ADDR_EXP 65
15094: PUSH
15095: LD_INT 1
15097: ST_TO_ADDR
// if p3 = 3 then
15098: LD_VAR 0 3
15102: PUSH
15103: LD_INT 3
15105: EQUAL
15106: IFFALSE 15116
// sEngine := true ;
15108: LD_ADDR_EXP 67
15112: PUSH
15113: LD_INT 1
15115: ST_TO_ADDR
// if p3 = 4 then
15116: LD_VAR 0 3
15120: PUSH
15121: LD_INT 4
15123: EQUAL
15124: IFFALSE 15134
// sSpec := true ;
15126: LD_ADDR_EXP 64
15130: PUSH
15131: LD_INT 1
15133: ST_TO_ADDR
// if p3 = 5 then
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 5
15141: EQUAL
15142: IFFALSE 15152
// sLevel := true ;
15144: LD_ADDR_EXP 68
15148: PUSH
15149: LD_INT 1
15151: ST_TO_ADDR
// if p3 = 6 then
15152: LD_VAR 0 3
15156: PUSH
15157: LD_INT 6
15159: EQUAL
15160: IFFALSE 15170
// sArmoury := true ;
15162: LD_ADDR_EXP 69
15166: PUSH
15167: LD_INT 1
15169: ST_TO_ADDR
// if p3 = 7 then
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 7
15177: EQUAL
15178: IFFALSE 15188
// sRadar := true ;
15180: LD_ADDR_EXP 70
15184: PUSH
15185: LD_INT 1
15187: ST_TO_ADDR
// if p3 = 8 then
15188: LD_VAR 0 3
15192: PUSH
15193: LD_INT 8
15195: EQUAL
15196: IFFALSE 15206
// sBunker := true ;
15198: LD_ADDR_EXP 71
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// if p3 = 9 then
15206: LD_VAR 0 3
15210: PUSH
15211: LD_INT 9
15213: EQUAL
15214: IFFALSE 15224
// sHack := true ;
15216: LD_ADDR_EXP 72
15220: PUSH
15221: LD_INT 1
15223: ST_TO_ADDR
// if p3 = 10 then
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 10
15231: EQUAL
15232: IFFALSE 15242
// sFire := true ;
15234: LD_ADDR_EXP 73
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// if p3 = 11 then
15242: LD_VAR 0 3
15246: PUSH
15247: LD_INT 11
15249: EQUAL
15250: IFFALSE 15260
// sRefresh := true ;
15252: LD_ADDR_EXP 74
15256: PUSH
15257: LD_INT 1
15259: ST_TO_ADDR
// if p3 = 12 then
15260: LD_VAR 0 3
15264: PUSH
15265: LD_INT 12
15267: EQUAL
15268: IFFALSE 15278
// sExp := true ;
15270: LD_ADDR_EXP 75
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// if p3 = 13 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_INT 13
15285: EQUAL
15286: IFFALSE 15296
// sDepot := true ;
15288: LD_ADDR_EXP 76
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// if p3 = 14 then
15296: LD_VAR 0 3
15300: PUSH
15301: LD_INT 14
15303: EQUAL
15304: IFFALSE 15314
// sFlag := true ;
15306: LD_ADDR_EXP 77
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if p3 = 15 then
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 15
15321: EQUAL
15322: IFFALSE 15332
// sKamikadze := true ;
15324: LD_ADDR_EXP 85
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// if p3 = 16 then
15332: LD_VAR 0 3
15336: PUSH
15337: LD_INT 16
15339: EQUAL
15340: IFFALSE 15350
// sTroll := true ;
15342: LD_ADDR_EXP 86
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// if p3 = 17 then
15350: LD_VAR 0 3
15354: PUSH
15355: LD_INT 17
15357: EQUAL
15358: IFFALSE 15368
// sSlow := true ;
15360: LD_ADDR_EXP 87
15364: PUSH
15365: LD_INT 1
15367: ST_TO_ADDR
// if p3 = 18 then
15368: LD_VAR 0 3
15372: PUSH
15373: LD_INT 18
15375: EQUAL
15376: IFFALSE 15386
// sLack := true ;
15378: LD_ADDR_EXP 88
15382: PUSH
15383: LD_INT 1
15385: ST_TO_ADDR
// if p3 = 19 then
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 19
15393: EQUAL
15394: IFFALSE 15404
// sTank := true ;
15396: LD_ADDR_EXP 90
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// if p3 = 20 then
15404: LD_VAR 0 3
15408: PUSH
15409: LD_INT 20
15411: EQUAL
15412: IFFALSE 15422
// sRemote := true ;
15414: LD_ADDR_EXP 91
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// if p3 = 21 then
15422: LD_VAR 0 3
15426: PUSH
15427: LD_INT 21
15429: EQUAL
15430: IFFALSE 15440
// sPowell := true ;
15432: LD_ADDR_EXP 92
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// if p3 = 22 then
15440: LD_VAR 0 3
15444: PUSH
15445: LD_INT 22
15447: EQUAL
15448: IFFALSE 15458
// sTeleport := true ;
15450: LD_ADDR_EXP 95
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// if p3 = 23 then
15458: LD_VAR 0 3
15462: PUSH
15463: LD_INT 23
15465: EQUAL
15466: IFFALSE 15476
// sOilTower := true ;
15468: LD_ADDR_EXP 97
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// if p3 = 24 then
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 24
15483: EQUAL
15484: IFFALSE 15494
// sShovel := true ;
15486: LD_ADDR_EXP 98
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if p3 = 25 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 25
15501: EQUAL
15502: IFFALSE 15512
// sSheik := true ;
15504: LD_ADDR_EXP 99
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 26 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 26
15519: EQUAL
15520: IFFALSE 15530
// sEarthquake := true ;
15522: LD_ADDR_EXP 101
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 27 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 27
15537: EQUAL
15538: IFFALSE 15548
// sAI := true ;
15540: LD_ADDR_EXP 102
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 28 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 28
15555: EQUAL
15556: IFFALSE 15566
// sCargo := true ;
15558: LD_ADDR_EXP 105
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 29 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 29
15573: EQUAL
15574: IFFALSE 15584
// sDLaser := true ;
15576: LD_ADDR_EXP 106
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 30 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 30
15591: EQUAL
15592: IFFALSE 15602
// sExchange := true ;
15594: LD_ADDR_EXP 107
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 31 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 31
15609: EQUAL
15610: IFFALSE 15620
// sFac := true ;
15612: LD_ADDR_EXP 108
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 32 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 32
15627: EQUAL
15628: IFFALSE 15638
// sPower := true ;
15630: LD_ADDR_EXP 109
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 33 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 33
15645: EQUAL
15646: IFFALSE 15656
// sRandom := true ;
15648: LD_ADDR_EXP 110
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 34 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 34
15663: EQUAL
15664: IFFALSE 15674
// sShield := true ;
15666: LD_ADDR_EXP 111
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 35 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 35
15681: EQUAL
15682: IFFALSE 15692
// sTime := true ;
15684: LD_ADDR_EXP 112
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 36 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 36
15699: EQUAL
15700: IFFALSE 15710
// sTools := true ;
15702: LD_ADDR_EXP 113
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 101 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 101
15717: EQUAL
15718: IFFALSE 15728
// sSold := true ;
15720: LD_ADDR_EXP 78
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 102 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 102
15735: EQUAL
15736: IFFALSE 15746
// sDiff := true ;
15738: LD_ADDR_EXP 79
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 103 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 103
15753: EQUAL
15754: IFFALSE 15764
// sFog := true ;
15756: LD_ADDR_EXP 82
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 104 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 104
15771: EQUAL
15772: IFFALSE 15782
// sReset := true ;
15774: LD_ADDR_EXP 83
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 105 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 105
15789: EQUAL
15790: IFFALSE 15800
// sSun := true ;
15792: LD_ADDR_EXP 84
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 106 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 106
15807: EQUAL
15808: IFFALSE 15818
// sTiger := true ;
15810: LD_ADDR_EXP 80
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 107 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 107
15825: EQUAL
15826: IFFALSE 15836
// sBomb := true ;
15828: LD_ADDR_EXP 81
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 108 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 108
15843: EQUAL
15844: IFFALSE 15854
// sWound := true ;
15846: LD_ADDR_EXP 89
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 109 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 109
15861: EQUAL
15862: IFFALSE 15872
// sBetray := true ;
15864: LD_ADDR_EXP 93
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 110 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 110
15879: EQUAL
15880: IFFALSE 15890
// sContamin := true ;
15882: LD_ADDR_EXP 94
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 111 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 111
15897: EQUAL
15898: IFFALSE 15908
// sOil := true ;
15900: LD_ADDR_EXP 96
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 112 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 112
15915: EQUAL
15916: IFFALSE 15926
// sStu := true ;
15918: LD_ADDR_EXP 100
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if p3 = 113 then
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 113
15933: EQUAL
15934: IFFALSE 15944
// sBazooka := true ;
15936: LD_ADDR_EXP 103
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if p3 = 114 then
15944: LD_VAR 0 3
15948: PUSH
15949: LD_INT 114
15951: EQUAL
15952: IFFALSE 15962
// sMortar := true ;
15954: LD_ADDR_EXP 104
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// if p3 = 115 then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 115
15969: EQUAL
15970: IFFALSE 15980
// sRanger := true ;
15972: LD_ADDR_EXP 114
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// if p3 = 116 then
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 116
15987: EQUAL
15988: IFFALSE 15998
// sComputer := true ;
15990: LD_ADDR_EXP 115
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if p3 = 117 then
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 117
16005: EQUAL
16006: IFFALSE 16016
// s30 := true ;
16008: LD_ADDR_EXP 116
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if p3 = 118 then
16016: LD_VAR 0 3
16020: PUSH
16021: LD_INT 118
16023: EQUAL
16024: IFFALSE 16034
// s60 := true ;
16026: LD_ADDR_EXP 117
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// end ; if p2 = hack_mode then
16034: LD_VAR 0 2
16038: PUSH
16039: LD_INT 101
16041: EQUAL
16042: IFFALSE 16170
// begin case p3 of 1 :
16044: LD_VAR 0 3
16048: PUSH
16049: LD_INT 1
16051: DOUBLE
16052: EQUAL
16053: IFTRUE 16057
16055: GO 16064
16057: POP
// hHackUnlimitedResources ; 2 :
16058: CALL 28309 0 0
16062: GO 16170
16064: LD_INT 2
16066: DOUBLE
16067: EQUAL
16068: IFTRUE 16072
16070: GO 16079
16072: POP
// hHackSetLevel10 ; 3 :
16073: CALL 28442 0 0
16077: GO 16170
16079: LD_INT 3
16081: DOUBLE
16082: EQUAL
16083: IFTRUE 16087
16085: GO 16094
16087: POP
// hHackSetLevel10YourUnits ; 4 :
16088: CALL 28527 0 0
16092: GO 16170
16094: LD_INT 4
16096: DOUBLE
16097: EQUAL
16098: IFTRUE 16102
16100: GO 16109
16102: POP
// hHackInvincible ; 5 :
16103: CALL 28975 0 0
16107: GO 16170
16109: LD_INT 5
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16124
16117: POP
// hHackInvisible ; 6 :
16118: CALL 29086 0 0
16122: GO 16170
16124: LD_INT 6
16126: DOUBLE
16127: EQUAL
16128: IFTRUE 16132
16130: GO 16139
16132: POP
// hHackChangeYourSide ; 7 :
16133: CALL 29143 0 0
16137: GO 16170
16139: LD_INT 7
16141: DOUBLE
16142: EQUAL
16143: IFTRUE 16147
16145: GO 16154
16147: POP
// hHackChangeUnitSide ; 8 :
16148: CALL 29185 0 0
16152: GO 16170
16154: LD_INT 8
16156: DOUBLE
16157: EQUAL
16158: IFTRUE 16162
16160: GO 16169
16162: POP
// hHackFog ; end ;
16163: CALL 29286 0 0
16167: GO 16170
16169: POP
// end ; if p2 = game_save_mode then
16170: LD_VAR 0 2
16174: PUSH
16175: LD_INT 102
16177: EQUAL
16178: IFFALSE 16233
// begin if p3 = 1 then
16180: LD_VAR 0 3
16184: PUSH
16185: LD_INT 1
16187: EQUAL
16188: IFFALSE 16200
// globalGameSaveCounter := p4 ;
16190: LD_ADDR_EXP 60
16194: PUSH
16195: LD_VAR 0 4
16199: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16200: LD_VAR 0 3
16204: PUSH
16205: LD_INT 2
16207: EQUAL
16208: PUSH
16209: LD_EXP 60
16213: AND
16214: IFFALSE 16233
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16216: LD_STRING setGameSaveCounter(
16218: PUSH
16219: LD_EXP 60
16223: STR
16224: PUSH
16225: LD_STRING )
16227: STR
16228: PPUSH
16229: CALL_OW 559
// end ; end ;
16233: LD_VAR 0 7
16237: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16238: LD_INT 0
16240: PPUSH
// streamModeActive := false ;
16241: LD_ADDR_EXP 61
16245: PUSH
16246: LD_INT 0
16248: ST_TO_ADDR
// normalCounter := 36 ;
16249: LD_ADDR_EXP 62
16253: PUSH
16254: LD_INT 36
16256: ST_TO_ADDR
// hardcoreCounter := 18 ;
16257: LD_ADDR_EXP 63
16261: PUSH
16262: LD_INT 18
16264: ST_TO_ADDR
// sRocket := false ;
16265: LD_ADDR_EXP 66
16269: PUSH
16270: LD_INT 0
16272: ST_TO_ADDR
// sSpeed := false ;
16273: LD_ADDR_EXP 65
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// sEngine := false ;
16281: LD_ADDR_EXP 67
16285: PUSH
16286: LD_INT 0
16288: ST_TO_ADDR
// sSpec := false ;
16289: LD_ADDR_EXP 64
16293: PUSH
16294: LD_INT 0
16296: ST_TO_ADDR
// sLevel := false ;
16297: LD_ADDR_EXP 68
16301: PUSH
16302: LD_INT 0
16304: ST_TO_ADDR
// sArmoury := false ;
16305: LD_ADDR_EXP 69
16309: PUSH
16310: LD_INT 0
16312: ST_TO_ADDR
// sRadar := false ;
16313: LD_ADDR_EXP 70
16317: PUSH
16318: LD_INT 0
16320: ST_TO_ADDR
// sBunker := false ;
16321: LD_ADDR_EXP 71
16325: PUSH
16326: LD_INT 0
16328: ST_TO_ADDR
// sHack := false ;
16329: LD_ADDR_EXP 72
16333: PUSH
16334: LD_INT 0
16336: ST_TO_ADDR
// sFire := false ;
16337: LD_ADDR_EXP 73
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// sRefresh := false ;
16345: LD_ADDR_EXP 74
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
// sExp := false ;
16353: LD_ADDR_EXP 75
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// sDepot := false ;
16361: LD_ADDR_EXP 76
16365: PUSH
16366: LD_INT 0
16368: ST_TO_ADDR
// sFlag := false ;
16369: LD_ADDR_EXP 77
16373: PUSH
16374: LD_INT 0
16376: ST_TO_ADDR
// sKamikadze := false ;
16377: LD_ADDR_EXP 85
16381: PUSH
16382: LD_INT 0
16384: ST_TO_ADDR
// sTroll := false ;
16385: LD_ADDR_EXP 86
16389: PUSH
16390: LD_INT 0
16392: ST_TO_ADDR
// sSlow := false ;
16393: LD_ADDR_EXP 87
16397: PUSH
16398: LD_INT 0
16400: ST_TO_ADDR
// sLack := false ;
16401: LD_ADDR_EXP 88
16405: PUSH
16406: LD_INT 0
16408: ST_TO_ADDR
// sTank := false ;
16409: LD_ADDR_EXP 90
16413: PUSH
16414: LD_INT 0
16416: ST_TO_ADDR
// sRemote := false ;
16417: LD_ADDR_EXP 91
16421: PUSH
16422: LD_INT 0
16424: ST_TO_ADDR
// sPowell := false ;
16425: LD_ADDR_EXP 92
16429: PUSH
16430: LD_INT 0
16432: ST_TO_ADDR
// sTeleport := false ;
16433: LD_ADDR_EXP 95
16437: PUSH
16438: LD_INT 0
16440: ST_TO_ADDR
// sOilTower := false ;
16441: LD_ADDR_EXP 97
16445: PUSH
16446: LD_INT 0
16448: ST_TO_ADDR
// sShovel := false ;
16449: LD_ADDR_EXP 98
16453: PUSH
16454: LD_INT 0
16456: ST_TO_ADDR
// sSheik := false ;
16457: LD_ADDR_EXP 99
16461: PUSH
16462: LD_INT 0
16464: ST_TO_ADDR
// sEarthquake := false ;
16465: LD_ADDR_EXP 101
16469: PUSH
16470: LD_INT 0
16472: ST_TO_ADDR
// sAI := false ;
16473: LD_ADDR_EXP 102
16477: PUSH
16478: LD_INT 0
16480: ST_TO_ADDR
// sCargo := false ;
16481: LD_ADDR_EXP 105
16485: PUSH
16486: LD_INT 0
16488: ST_TO_ADDR
// sDLaser := false ;
16489: LD_ADDR_EXP 106
16493: PUSH
16494: LD_INT 0
16496: ST_TO_ADDR
// sExchange := false ;
16497: LD_ADDR_EXP 107
16501: PUSH
16502: LD_INT 0
16504: ST_TO_ADDR
// sFac := false ;
16505: LD_ADDR_EXP 108
16509: PUSH
16510: LD_INT 0
16512: ST_TO_ADDR
// sPower := false ;
16513: LD_ADDR_EXP 109
16517: PUSH
16518: LD_INT 0
16520: ST_TO_ADDR
// sRandom := false ;
16521: LD_ADDR_EXP 110
16525: PUSH
16526: LD_INT 0
16528: ST_TO_ADDR
// sShield := false ;
16529: LD_ADDR_EXP 111
16533: PUSH
16534: LD_INT 0
16536: ST_TO_ADDR
// sTime := false ;
16537: LD_ADDR_EXP 112
16541: PUSH
16542: LD_INT 0
16544: ST_TO_ADDR
// sTools := false ;
16545: LD_ADDR_EXP 113
16549: PUSH
16550: LD_INT 0
16552: ST_TO_ADDR
// sSold := false ;
16553: LD_ADDR_EXP 78
16557: PUSH
16558: LD_INT 0
16560: ST_TO_ADDR
// sDiff := false ;
16561: LD_ADDR_EXP 79
16565: PUSH
16566: LD_INT 0
16568: ST_TO_ADDR
// sFog := false ;
16569: LD_ADDR_EXP 82
16573: PUSH
16574: LD_INT 0
16576: ST_TO_ADDR
// sReset := false ;
16577: LD_ADDR_EXP 83
16581: PUSH
16582: LD_INT 0
16584: ST_TO_ADDR
// sSun := false ;
16585: LD_ADDR_EXP 84
16589: PUSH
16590: LD_INT 0
16592: ST_TO_ADDR
// sTiger := false ;
16593: LD_ADDR_EXP 80
16597: PUSH
16598: LD_INT 0
16600: ST_TO_ADDR
// sBomb := false ;
16601: LD_ADDR_EXP 81
16605: PUSH
16606: LD_INT 0
16608: ST_TO_ADDR
// sWound := false ;
16609: LD_ADDR_EXP 89
16613: PUSH
16614: LD_INT 0
16616: ST_TO_ADDR
// sBetray := false ;
16617: LD_ADDR_EXP 93
16621: PUSH
16622: LD_INT 0
16624: ST_TO_ADDR
// sContamin := false ;
16625: LD_ADDR_EXP 94
16629: PUSH
16630: LD_INT 0
16632: ST_TO_ADDR
// sOil := false ;
16633: LD_ADDR_EXP 96
16637: PUSH
16638: LD_INT 0
16640: ST_TO_ADDR
// sStu := false ;
16641: LD_ADDR_EXP 100
16645: PUSH
16646: LD_INT 0
16648: ST_TO_ADDR
// sBazooka := false ;
16649: LD_ADDR_EXP 103
16653: PUSH
16654: LD_INT 0
16656: ST_TO_ADDR
// sMortar := false ;
16657: LD_ADDR_EXP 104
16661: PUSH
16662: LD_INT 0
16664: ST_TO_ADDR
// sRanger := false ;
16665: LD_ADDR_EXP 114
16669: PUSH
16670: LD_INT 0
16672: ST_TO_ADDR
// sComputer := false ;
16673: LD_ADDR_EXP 115
16677: PUSH
16678: LD_INT 0
16680: ST_TO_ADDR
// s30 := false ;
16681: LD_ADDR_EXP 116
16685: PUSH
16686: LD_INT 0
16688: ST_TO_ADDR
// s60 := false ;
16689: LD_ADDR_EXP 117
16693: PUSH
16694: LD_INT 0
16696: ST_TO_ADDR
// end ;
16697: LD_VAR 0 1
16701: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
16706: PPUSH
16707: PPUSH
16708: PPUSH
16709: PPUSH
16710: PPUSH
// result := [ ] ;
16711: LD_ADDR_VAR 0 2
16715: PUSH
16716: EMPTY
16717: ST_TO_ADDR
// if campaign_id = 1 then
16718: LD_OWVAR 69
16722: PUSH
16723: LD_INT 1
16725: EQUAL
16726: IFFALSE 19892
// begin case mission_number of 1 :
16728: LD_OWVAR 70
16732: PUSH
16733: LD_INT 1
16735: DOUBLE
16736: EQUAL
16737: IFTRUE 16741
16739: GO 16817
16741: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16742: LD_ADDR_VAR 0 2
16746: PUSH
16747: LD_INT 2
16749: PUSH
16750: LD_INT 4
16752: PUSH
16753: LD_INT 11
16755: PUSH
16756: LD_INT 12
16758: PUSH
16759: LD_INT 15
16761: PUSH
16762: LD_INT 16
16764: PUSH
16765: LD_INT 22
16767: PUSH
16768: LD_INT 23
16770: PUSH
16771: LD_INT 26
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 101
16787: PUSH
16788: LD_INT 102
16790: PUSH
16791: LD_INT 106
16793: PUSH
16794: LD_INT 116
16796: PUSH
16797: LD_INT 117
16799: PUSH
16800: LD_INT 118
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: ST_TO_ADDR
16815: GO 19890
16817: LD_INT 2
16819: DOUBLE
16820: EQUAL
16821: IFTRUE 16825
16823: GO 16909
16825: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16826: LD_ADDR_VAR 0 2
16830: PUSH
16831: LD_INT 2
16833: PUSH
16834: LD_INT 4
16836: PUSH
16837: LD_INT 11
16839: PUSH
16840: LD_INT 12
16842: PUSH
16843: LD_INT 15
16845: PUSH
16846: LD_INT 16
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_INT 23
16854: PUSH
16855: LD_INT 26
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 101
16871: PUSH
16872: LD_INT 102
16874: PUSH
16875: LD_INT 105
16877: PUSH
16878: LD_INT 106
16880: PUSH
16881: LD_INT 108
16883: PUSH
16884: LD_INT 116
16886: PUSH
16887: LD_INT 117
16889: PUSH
16890: LD_INT 118
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: ST_TO_ADDR
16907: GO 19890
16909: LD_INT 3
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 17005
16917: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16918: LD_ADDR_VAR 0 2
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: LD_INT 4
16928: PUSH
16929: LD_INT 5
16931: PUSH
16932: LD_INT 11
16934: PUSH
16935: LD_INT 12
16937: PUSH
16938: LD_INT 15
16940: PUSH
16941: LD_INT 16
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_INT 26
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 101
16967: PUSH
16968: LD_INT 102
16970: PUSH
16971: LD_INT 105
16973: PUSH
16974: LD_INT 106
16976: PUSH
16977: LD_INT 108
16979: PUSH
16980: LD_INT 116
16982: PUSH
16983: LD_INT 117
16985: PUSH
16986: LD_INT 118
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
17003: GO 19890
17005: LD_INT 4
17007: DOUBLE
17008: EQUAL
17009: IFTRUE 17013
17011: GO 17109
17013: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17014: LD_ADDR_VAR 0 2
17018: PUSH
17019: LD_INT 2
17021: PUSH
17022: LD_INT 4
17024: PUSH
17025: LD_INT 5
17027: PUSH
17028: LD_INT 8
17030: PUSH
17031: LD_INT 11
17033: PUSH
17034: LD_INT 12
17036: PUSH
17037: LD_INT 15
17039: PUSH
17040: LD_INT 16
17042: PUSH
17043: LD_INT 22
17045: PUSH
17046: LD_INT 23
17048: PUSH
17049: LD_INT 26
17051: PUSH
17052: LD_INT 36
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 101
17071: PUSH
17072: LD_INT 102
17074: PUSH
17075: LD_INT 105
17077: PUSH
17078: LD_INT 106
17080: PUSH
17081: LD_INT 108
17083: PUSH
17084: LD_INT 116
17086: PUSH
17087: LD_INT 117
17089: PUSH
17090: LD_INT 118
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: ST_TO_ADDR
17107: GO 19890
17109: LD_INT 5
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17229
17117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17118: LD_ADDR_VAR 0 2
17122: PUSH
17123: LD_INT 2
17125: PUSH
17126: LD_INT 4
17128: PUSH
17129: LD_INT 5
17131: PUSH
17132: LD_INT 6
17134: PUSH
17135: LD_INT 8
17137: PUSH
17138: LD_INT 11
17140: PUSH
17141: LD_INT 12
17143: PUSH
17144: LD_INT 15
17146: PUSH
17147: LD_INT 16
17149: PUSH
17150: LD_INT 22
17152: PUSH
17153: LD_INT 23
17155: PUSH
17156: LD_INT 25
17158: PUSH
17159: LD_INT 26
17161: PUSH
17162: LD_INT 36
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 101
17183: PUSH
17184: LD_INT 102
17186: PUSH
17187: LD_INT 105
17189: PUSH
17190: LD_INT 106
17192: PUSH
17193: LD_INT 108
17195: PUSH
17196: LD_INT 109
17198: PUSH
17199: LD_INT 112
17201: PUSH
17202: LD_INT 116
17204: PUSH
17205: LD_INT 117
17207: PUSH
17208: LD_INT 118
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: ST_TO_ADDR
17227: GO 19890
17229: LD_INT 6
17231: DOUBLE
17232: EQUAL
17233: IFTRUE 17237
17235: GO 17369
17237: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: LD_INT 4
17248: PUSH
17249: LD_INT 5
17251: PUSH
17252: LD_INT 6
17254: PUSH
17255: LD_INT 8
17257: PUSH
17258: LD_INT 11
17260: PUSH
17261: LD_INT 12
17263: PUSH
17264: LD_INT 15
17266: PUSH
17267: LD_INT 16
17269: PUSH
17270: LD_INT 20
17272: PUSH
17273: LD_INT 21
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_INT 23
17281: PUSH
17282: LD_INT 25
17284: PUSH
17285: LD_INT 26
17287: PUSH
17288: LD_INT 30
17290: PUSH
17291: LD_INT 31
17293: PUSH
17294: LD_INT 32
17296: PUSH
17297: LD_INT 36
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 101
17323: PUSH
17324: LD_INT 102
17326: PUSH
17327: LD_INT 105
17329: PUSH
17330: LD_INT 106
17332: PUSH
17333: LD_INT 108
17335: PUSH
17336: LD_INT 109
17338: PUSH
17339: LD_INT 112
17341: PUSH
17342: LD_INT 116
17344: PUSH
17345: LD_INT 117
17347: PUSH
17348: LD_INT 118
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: ST_TO_ADDR
17367: GO 19890
17369: LD_INT 7
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17489
17377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17378: LD_ADDR_VAR 0 2
17382: PUSH
17383: LD_INT 2
17385: PUSH
17386: LD_INT 4
17388: PUSH
17389: LD_INT 5
17391: PUSH
17392: LD_INT 7
17394: PUSH
17395: LD_INT 11
17397: PUSH
17398: LD_INT 12
17400: PUSH
17401: LD_INT 15
17403: PUSH
17404: LD_INT 16
17406: PUSH
17407: LD_INT 20
17409: PUSH
17410: LD_INT 21
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 23
17418: PUSH
17419: LD_INT 25
17421: PUSH
17422: LD_INT 26
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 101
17443: PUSH
17444: LD_INT 102
17446: PUSH
17447: LD_INT 103
17449: PUSH
17450: LD_INT 105
17452: PUSH
17453: LD_INT 106
17455: PUSH
17456: LD_INT 108
17458: PUSH
17459: LD_INT 112
17461: PUSH
17462: LD_INT 116
17464: PUSH
17465: LD_INT 117
17467: PUSH
17468: LD_INT 118
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: ST_TO_ADDR
17487: GO 19890
17489: LD_INT 8
17491: DOUBLE
17492: EQUAL
17493: IFTRUE 17497
17495: GO 17637
17497: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17498: LD_ADDR_VAR 0 2
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 4
17508: PUSH
17509: LD_INT 5
17511: PUSH
17512: LD_INT 6
17514: PUSH
17515: LD_INT 7
17517: PUSH
17518: LD_INT 8
17520: PUSH
17521: LD_INT 11
17523: PUSH
17524: LD_INT 12
17526: PUSH
17527: LD_INT 15
17529: PUSH
17530: LD_INT 16
17532: PUSH
17533: LD_INT 20
17535: PUSH
17536: LD_INT 21
17538: PUSH
17539: LD_INT 22
17541: PUSH
17542: LD_INT 23
17544: PUSH
17545: LD_INT 25
17547: PUSH
17548: LD_INT 26
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: LD_INT 31
17556: PUSH
17557: LD_INT 32
17559: PUSH
17560: LD_INT 36
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 101
17587: PUSH
17588: LD_INT 102
17590: PUSH
17591: LD_INT 103
17593: PUSH
17594: LD_INT 105
17596: PUSH
17597: LD_INT 106
17599: PUSH
17600: LD_INT 108
17602: PUSH
17603: LD_INT 109
17605: PUSH
17606: LD_INT 112
17608: PUSH
17609: LD_INT 116
17611: PUSH
17612: LD_INT 117
17614: PUSH
17615: LD_INT 118
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: ST_TO_ADDR
17635: GO 19890
17637: LD_INT 9
17639: DOUBLE
17640: EQUAL
17641: IFTRUE 17645
17643: GO 17793
17645: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17646: LD_ADDR_VAR 0 2
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: LD_INT 4
17656: PUSH
17657: LD_INT 5
17659: PUSH
17660: LD_INT 6
17662: PUSH
17663: LD_INT 7
17665: PUSH
17666: LD_INT 8
17668: PUSH
17669: LD_INT 11
17671: PUSH
17672: LD_INT 12
17674: PUSH
17675: LD_INT 15
17677: PUSH
17678: LD_INT 16
17680: PUSH
17681: LD_INT 20
17683: PUSH
17684: LD_INT 21
17686: PUSH
17687: LD_INT 22
17689: PUSH
17690: LD_INT 23
17692: PUSH
17693: LD_INT 25
17695: PUSH
17696: LD_INT 26
17698: PUSH
17699: LD_INT 28
17701: PUSH
17702: LD_INT 30
17704: PUSH
17705: LD_INT 31
17707: PUSH
17708: LD_INT 32
17710: PUSH
17711: LD_INT 36
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 101
17739: PUSH
17740: LD_INT 102
17742: PUSH
17743: LD_INT 103
17745: PUSH
17746: LD_INT 105
17748: PUSH
17749: LD_INT 106
17751: PUSH
17752: LD_INT 108
17754: PUSH
17755: LD_INT 109
17757: PUSH
17758: LD_INT 112
17760: PUSH
17761: LD_INT 114
17763: PUSH
17764: LD_INT 116
17766: PUSH
17767: LD_INT 117
17769: PUSH
17770: LD_INT 118
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: ST_TO_ADDR
17791: GO 19890
17793: LD_INT 10
17795: DOUBLE
17796: EQUAL
17797: IFTRUE 17801
17799: GO 17997
17801: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: LD_INT 2
17809: PUSH
17810: LD_INT 4
17812: PUSH
17813: LD_INT 5
17815: PUSH
17816: LD_INT 6
17818: PUSH
17819: LD_INT 7
17821: PUSH
17822: LD_INT 8
17824: PUSH
17825: LD_INT 9
17827: PUSH
17828: LD_INT 10
17830: PUSH
17831: LD_INT 11
17833: PUSH
17834: LD_INT 12
17836: PUSH
17837: LD_INT 13
17839: PUSH
17840: LD_INT 14
17842: PUSH
17843: LD_INT 15
17845: PUSH
17846: LD_INT 16
17848: PUSH
17849: LD_INT 17
17851: PUSH
17852: LD_INT 18
17854: PUSH
17855: LD_INT 19
17857: PUSH
17858: LD_INT 20
17860: PUSH
17861: LD_INT 21
17863: PUSH
17864: LD_INT 22
17866: PUSH
17867: LD_INT 23
17869: PUSH
17870: LD_INT 24
17872: PUSH
17873: LD_INT 25
17875: PUSH
17876: LD_INT 26
17878: PUSH
17879: LD_INT 28
17881: PUSH
17882: LD_INT 30
17884: PUSH
17885: LD_INT 31
17887: PUSH
17888: LD_INT 32
17890: PUSH
17891: LD_INT 36
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 101
17927: PUSH
17928: LD_INT 102
17930: PUSH
17931: LD_INT 103
17933: PUSH
17934: LD_INT 104
17936: PUSH
17937: LD_INT 105
17939: PUSH
17940: LD_INT 106
17942: PUSH
17943: LD_INT 107
17945: PUSH
17946: LD_INT 108
17948: PUSH
17949: LD_INT 109
17951: PUSH
17952: LD_INT 110
17954: PUSH
17955: LD_INT 111
17957: PUSH
17958: LD_INT 112
17960: PUSH
17961: LD_INT 114
17963: PUSH
17964: LD_INT 116
17966: PUSH
17967: LD_INT 117
17969: PUSH
17970: LD_INT 118
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: ST_TO_ADDR
17995: GO 19890
17997: LD_INT 11
17999: DOUBLE
18000: EQUAL
18001: IFTRUE 18005
18003: GO 18209
18005: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18006: LD_ADDR_VAR 0 2
18010: PUSH
18011: LD_INT 2
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: LD_INT 4
18019: PUSH
18020: LD_INT 5
18022: PUSH
18023: LD_INT 6
18025: PUSH
18026: LD_INT 7
18028: PUSH
18029: LD_INT 8
18031: PUSH
18032: LD_INT 9
18034: PUSH
18035: LD_INT 10
18037: PUSH
18038: LD_INT 11
18040: PUSH
18041: LD_INT 12
18043: PUSH
18044: LD_INT 13
18046: PUSH
18047: LD_INT 14
18049: PUSH
18050: LD_INT 15
18052: PUSH
18053: LD_INT 16
18055: PUSH
18056: LD_INT 17
18058: PUSH
18059: LD_INT 18
18061: PUSH
18062: LD_INT 19
18064: PUSH
18065: LD_INT 20
18067: PUSH
18068: LD_INT 21
18070: PUSH
18071: LD_INT 22
18073: PUSH
18074: LD_INT 23
18076: PUSH
18077: LD_INT 24
18079: PUSH
18080: LD_INT 25
18082: PUSH
18083: LD_INT 26
18085: PUSH
18086: LD_INT 28
18088: PUSH
18089: LD_INT 30
18091: PUSH
18092: LD_INT 31
18094: PUSH
18095: LD_INT 32
18097: PUSH
18098: LD_INT 34
18100: PUSH
18101: LD_INT 36
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 101
18139: PUSH
18140: LD_INT 102
18142: PUSH
18143: LD_INT 103
18145: PUSH
18146: LD_INT 104
18148: PUSH
18149: LD_INT 105
18151: PUSH
18152: LD_INT 106
18154: PUSH
18155: LD_INT 107
18157: PUSH
18158: LD_INT 108
18160: PUSH
18161: LD_INT 109
18163: PUSH
18164: LD_INT 110
18166: PUSH
18167: LD_INT 111
18169: PUSH
18170: LD_INT 112
18172: PUSH
18173: LD_INT 114
18175: PUSH
18176: LD_INT 116
18178: PUSH
18179: LD_INT 117
18181: PUSH
18182: LD_INT 118
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: ST_TO_ADDR
18207: GO 19890
18209: LD_INT 12
18211: DOUBLE
18212: EQUAL
18213: IFTRUE 18217
18215: GO 18437
18217: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18218: LD_ADDR_VAR 0 2
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: LD_INT 4
18234: PUSH
18235: LD_INT 5
18237: PUSH
18238: LD_INT 6
18240: PUSH
18241: LD_INT 7
18243: PUSH
18244: LD_INT 8
18246: PUSH
18247: LD_INT 9
18249: PUSH
18250: LD_INT 10
18252: PUSH
18253: LD_INT 11
18255: PUSH
18256: LD_INT 12
18258: PUSH
18259: LD_INT 13
18261: PUSH
18262: LD_INT 14
18264: PUSH
18265: LD_INT 15
18267: PUSH
18268: LD_INT 16
18270: PUSH
18271: LD_INT 17
18273: PUSH
18274: LD_INT 18
18276: PUSH
18277: LD_INT 19
18279: PUSH
18280: LD_INT 20
18282: PUSH
18283: LD_INT 21
18285: PUSH
18286: LD_INT 22
18288: PUSH
18289: LD_INT 23
18291: PUSH
18292: LD_INT 24
18294: PUSH
18295: LD_INT 25
18297: PUSH
18298: LD_INT 26
18300: PUSH
18301: LD_INT 27
18303: PUSH
18304: LD_INT 28
18306: PUSH
18307: LD_INT 30
18309: PUSH
18310: LD_INT 31
18312: PUSH
18313: LD_INT 32
18315: PUSH
18316: LD_INT 33
18318: PUSH
18319: LD_INT 34
18321: PUSH
18322: LD_INT 36
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 101
18363: PUSH
18364: LD_INT 102
18366: PUSH
18367: LD_INT 103
18369: PUSH
18370: LD_INT 104
18372: PUSH
18373: LD_INT 105
18375: PUSH
18376: LD_INT 106
18378: PUSH
18379: LD_INT 107
18381: PUSH
18382: LD_INT 108
18384: PUSH
18385: LD_INT 109
18387: PUSH
18388: LD_INT 110
18390: PUSH
18391: LD_INT 111
18393: PUSH
18394: LD_INT 112
18396: PUSH
18397: LD_INT 113
18399: PUSH
18400: LD_INT 114
18402: PUSH
18403: LD_INT 116
18405: PUSH
18406: LD_INT 117
18408: PUSH
18409: LD_INT 118
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: ST_TO_ADDR
18435: GO 19890
18437: LD_INT 13
18439: DOUBLE
18440: EQUAL
18441: IFTRUE 18445
18443: GO 18653
18445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 3
18459: PUSH
18460: LD_INT 4
18462: PUSH
18463: LD_INT 5
18465: PUSH
18466: LD_INT 8
18468: PUSH
18469: LD_INT 9
18471: PUSH
18472: LD_INT 10
18474: PUSH
18475: LD_INT 11
18477: PUSH
18478: LD_INT 12
18480: PUSH
18481: LD_INT 14
18483: PUSH
18484: LD_INT 15
18486: PUSH
18487: LD_INT 16
18489: PUSH
18490: LD_INT 17
18492: PUSH
18493: LD_INT 18
18495: PUSH
18496: LD_INT 19
18498: PUSH
18499: LD_INT 20
18501: PUSH
18502: LD_INT 21
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 23
18510: PUSH
18511: LD_INT 24
18513: PUSH
18514: LD_INT 25
18516: PUSH
18517: LD_INT 26
18519: PUSH
18520: LD_INT 27
18522: PUSH
18523: LD_INT 28
18525: PUSH
18526: LD_INT 30
18528: PUSH
18529: LD_INT 31
18531: PUSH
18532: LD_INT 32
18534: PUSH
18535: LD_INT 33
18537: PUSH
18538: LD_INT 34
18540: PUSH
18541: LD_INT 36
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 101
18579: PUSH
18580: LD_INT 102
18582: PUSH
18583: LD_INT 103
18585: PUSH
18586: LD_INT 104
18588: PUSH
18589: LD_INT 105
18591: PUSH
18592: LD_INT 106
18594: PUSH
18595: LD_INT 107
18597: PUSH
18598: LD_INT 108
18600: PUSH
18601: LD_INT 109
18603: PUSH
18604: LD_INT 110
18606: PUSH
18607: LD_INT 111
18609: PUSH
18610: LD_INT 112
18612: PUSH
18613: LD_INT 113
18615: PUSH
18616: LD_INT 114
18618: PUSH
18619: LD_INT 116
18621: PUSH
18622: LD_INT 117
18624: PUSH
18625: LD_INT 118
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: ST_TO_ADDR
18651: GO 19890
18653: LD_INT 14
18655: DOUBLE
18656: EQUAL
18657: IFTRUE 18661
18659: GO 18885
18661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18662: LD_ADDR_VAR 0 2
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: LD_INT 4
18678: PUSH
18679: LD_INT 5
18681: PUSH
18682: LD_INT 6
18684: PUSH
18685: LD_INT 7
18687: PUSH
18688: LD_INT 8
18690: PUSH
18691: LD_INT 9
18693: PUSH
18694: LD_INT 10
18696: PUSH
18697: LD_INT 11
18699: PUSH
18700: LD_INT 12
18702: PUSH
18703: LD_INT 13
18705: PUSH
18706: LD_INT 14
18708: PUSH
18709: LD_INT 15
18711: PUSH
18712: LD_INT 16
18714: PUSH
18715: LD_INT 17
18717: PUSH
18718: LD_INT 18
18720: PUSH
18721: LD_INT 19
18723: PUSH
18724: LD_INT 20
18726: PUSH
18727: LD_INT 21
18729: PUSH
18730: LD_INT 22
18732: PUSH
18733: LD_INT 23
18735: PUSH
18736: LD_INT 24
18738: PUSH
18739: LD_INT 25
18741: PUSH
18742: LD_INT 26
18744: PUSH
18745: LD_INT 27
18747: PUSH
18748: LD_INT 28
18750: PUSH
18751: LD_INT 29
18753: PUSH
18754: LD_INT 30
18756: PUSH
18757: LD_INT 31
18759: PUSH
18760: LD_INT 32
18762: PUSH
18763: LD_INT 33
18765: PUSH
18766: LD_INT 34
18768: PUSH
18769: LD_INT 36
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 101
18811: PUSH
18812: LD_INT 102
18814: PUSH
18815: LD_INT 103
18817: PUSH
18818: LD_INT 104
18820: PUSH
18821: LD_INT 105
18823: PUSH
18824: LD_INT 106
18826: PUSH
18827: LD_INT 107
18829: PUSH
18830: LD_INT 108
18832: PUSH
18833: LD_INT 109
18835: PUSH
18836: LD_INT 110
18838: PUSH
18839: LD_INT 111
18841: PUSH
18842: LD_INT 112
18844: PUSH
18845: LD_INT 113
18847: PUSH
18848: LD_INT 114
18850: PUSH
18851: LD_INT 116
18853: PUSH
18854: LD_INT 117
18856: PUSH
18857: LD_INT 118
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: ST_TO_ADDR
18883: GO 19890
18885: LD_INT 15
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 19117
18893: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18894: LD_ADDR_VAR 0 2
18898: PUSH
18899: LD_INT 1
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: LD_INT 3
18907: PUSH
18908: LD_INT 4
18910: PUSH
18911: LD_INT 5
18913: PUSH
18914: LD_INT 6
18916: PUSH
18917: LD_INT 7
18919: PUSH
18920: LD_INT 8
18922: PUSH
18923: LD_INT 9
18925: PUSH
18926: LD_INT 10
18928: PUSH
18929: LD_INT 11
18931: PUSH
18932: LD_INT 12
18934: PUSH
18935: LD_INT 13
18937: PUSH
18938: LD_INT 14
18940: PUSH
18941: LD_INT 15
18943: PUSH
18944: LD_INT 16
18946: PUSH
18947: LD_INT 17
18949: PUSH
18950: LD_INT 18
18952: PUSH
18953: LD_INT 19
18955: PUSH
18956: LD_INT 20
18958: PUSH
18959: LD_INT 21
18961: PUSH
18962: LD_INT 22
18964: PUSH
18965: LD_INT 23
18967: PUSH
18968: LD_INT 24
18970: PUSH
18971: LD_INT 25
18973: PUSH
18974: LD_INT 26
18976: PUSH
18977: LD_INT 27
18979: PUSH
18980: LD_INT 28
18982: PUSH
18983: LD_INT 29
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: LD_INT 31
18991: PUSH
18992: LD_INT 32
18994: PUSH
18995: LD_INT 33
18997: PUSH
18998: LD_INT 34
19000: PUSH
19001: LD_INT 36
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 101
19043: PUSH
19044: LD_INT 102
19046: PUSH
19047: LD_INT 103
19049: PUSH
19050: LD_INT 104
19052: PUSH
19053: LD_INT 105
19055: PUSH
19056: LD_INT 106
19058: PUSH
19059: LD_INT 107
19061: PUSH
19062: LD_INT 108
19064: PUSH
19065: LD_INT 109
19067: PUSH
19068: LD_INT 110
19070: PUSH
19071: LD_INT 111
19073: PUSH
19074: LD_INT 112
19076: PUSH
19077: LD_INT 113
19079: PUSH
19080: LD_INT 114
19082: PUSH
19083: LD_INT 116
19085: PUSH
19086: LD_INT 117
19088: PUSH
19089: LD_INT 118
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: ST_TO_ADDR
19115: GO 19890
19117: LD_INT 16
19119: DOUBLE
19120: EQUAL
19121: IFTRUE 19125
19123: GO 19261
19125: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19126: LD_ADDR_VAR 0 2
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: LD_INT 4
19136: PUSH
19137: LD_INT 5
19139: PUSH
19140: LD_INT 7
19142: PUSH
19143: LD_INT 11
19145: PUSH
19146: LD_INT 12
19148: PUSH
19149: LD_INT 15
19151: PUSH
19152: LD_INT 16
19154: PUSH
19155: LD_INT 20
19157: PUSH
19158: LD_INT 21
19160: PUSH
19161: LD_INT 22
19163: PUSH
19164: LD_INT 23
19166: PUSH
19167: LD_INT 25
19169: PUSH
19170: LD_INT 26
19172: PUSH
19173: LD_INT 30
19175: PUSH
19176: LD_INT 31
19178: PUSH
19179: LD_INT 32
19181: PUSH
19182: LD_INT 33
19184: PUSH
19185: LD_INT 34
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 101
19211: PUSH
19212: LD_INT 102
19214: PUSH
19215: LD_INT 103
19217: PUSH
19218: LD_INT 106
19220: PUSH
19221: LD_INT 108
19223: PUSH
19224: LD_INT 112
19226: PUSH
19227: LD_INT 113
19229: PUSH
19230: LD_INT 114
19232: PUSH
19233: LD_INT 116
19235: PUSH
19236: LD_INT 117
19238: PUSH
19239: LD_INT 118
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: ST_TO_ADDR
19259: GO 19890
19261: LD_INT 17
19263: DOUBLE
19264: EQUAL
19265: IFTRUE 19269
19267: GO 19493
19269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19270: LD_ADDR_VAR 0 2
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 3
19283: PUSH
19284: LD_INT 4
19286: PUSH
19287: LD_INT 5
19289: PUSH
19290: LD_INT 6
19292: PUSH
19293: LD_INT 7
19295: PUSH
19296: LD_INT 8
19298: PUSH
19299: LD_INT 9
19301: PUSH
19302: LD_INT 10
19304: PUSH
19305: LD_INT 11
19307: PUSH
19308: LD_INT 12
19310: PUSH
19311: LD_INT 13
19313: PUSH
19314: LD_INT 14
19316: PUSH
19317: LD_INT 15
19319: PUSH
19320: LD_INT 16
19322: PUSH
19323: LD_INT 17
19325: PUSH
19326: LD_INT 18
19328: PUSH
19329: LD_INT 19
19331: PUSH
19332: LD_INT 20
19334: PUSH
19335: LD_INT 21
19337: PUSH
19338: LD_INT 22
19340: PUSH
19341: LD_INT 23
19343: PUSH
19344: LD_INT 24
19346: PUSH
19347: LD_INT 25
19349: PUSH
19350: LD_INT 26
19352: PUSH
19353: LD_INT 27
19355: PUSH
19356: LD_INT 28
19358: PUSH
19359: LD_INT 29
19361: PUSH
19362: LD_INT 30
19364: PUSH
19365: LD_INT 31
19367: PUSH
19368: LD_INT 32
19370: PUSH
19371: LD_INT 33
19373: PUSH
19374: LD_INT 34
19376: PUSH
19377: LD_INT 36
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 101
19419: PUSH
19420: LD_INT 102
19422: PUSH
19423: LD_INT 103
19425: PUSH
19426: LD_INT 104
19428: PUSH
19429: LD_INT 105
19431: PUSH
19432: LD_INT 106
19434: PUSH
19435: LD_INT 107
19437: PUSH
19438: LD_INT 108
19440: PUSH
19441: LD_INT 109
19443: PUSH
19444: LD_INT 110
19446: PUSH
19447: LD_INT 111
19449: PUSH
19450: LD_INT 112
19452: PUSH
19453: LD_INT 113
19455: PUSH
19456: LD_INT 114
19458: PUSH
19459: LD_INT 116
19461: PUSH
19462: LD_INT 117
19464: PUSH
19465: LD_INT 118
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: ST_TO_ADDR
19491: GO 19890
19493: LD_INT 18
19495: DOUBLE
19496: EQUAL
19497: IFTRUE 19501
19499: GO 19649
19501: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19502: LD_ADDR_VAR 0 2
19506: PUSH
19507: LD_INT 2
19509: PUSH
19510: LD_INT 4
19512: PUSH
19513: LD_INT 5
19515: PUSH
19516: LD_INT 7
19518: PUSH
19519: LD_INT 11
19521: PUSH
19522: LD_INT 12
19524: PUSH
19525: LD_INT 15
19527: PUSH
19528: LD_INT 16
19530: PUSH
19531: LD_INT 20
19533: PUSH
19534: LD_INT 21
19536: PUSH
19537: LD_INT 22
19539: PUSH
19540: LD_INT 23
19542: PUSH
19543: LD_INT 25
19545: PUSH
19546: LD_INT 26
19548: PUSH
19549: LD_INT 30
19551: PUSH
19552: LD_INT 31
19554: PUSH
19555: LD_INT 32
19557: PUSH
19558: LD_INT 33
19560: PUSH
19561: LD_INT 34
19563: PUSH
19564: LD_INT 35
19566: PUSH
19567: LD_INT 36
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 101
19595: PUSH
19596: LD_INT 102
19598: PUSH
19599: LD_INT 103
19601: PUSH
19602: LD_INT 106
19604: PUSH
19605: LD_INT 108
19607: PUSH
19608: LD_INT 112
19610: PUSH
19611: LD_INT 113
19613: PUSH
19614: LD_INT 114
19616: PUSH
19617: LD_INT 115
19619: PUSH
19620: LD_INT 116
19622: PUSH
19623: LD_INT 117
19625: PUSH
19626: LD_INT 118
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: ST_TO_ADDR
19647: GO 19890
19649: LD_INT 19
19651: DOUBLE
19652: EQUAL
19653: IFTRUE 19657
19655: GO 19889
19657: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19658: LD_ADDR_VAR 0 2
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 3
19671: PUSH
19672: LD_INT 4
19674: PUSH
19675: LD_INT 5
19677: PUSH
19678: LD_INT 6
19680: PUSH
19681: LD_INT 7
19683: PUSH
19684: LD_INT 8
19686: PUSH
19687: LD_INT 9
19689: PUSH
19690: LD_INT 10
19692: PUSH
19693: LD_INT 11
19695: PUSH
19696: LD_INT 12
19698: PUSH
19699: LD_INT 13
19701: PUSH
19702: LD_INT 14
19704: PUSH
19705: LD_INT 15
19707: PUSH
19708: LD_INT 16
19710: PUSH
19711: LD_INT 17
19713: PUSH
19714: LD_INT 18
19716: PUSH
19717: LD_INT 19
19719: PUSH
19720: LD_INT 20
19722: PUSH
19723: LD_INT 21
19725: PUSH
19726: LD_INT 22
19728: PUSH
19729: LD_INT 23
19731: PUSH
19732: LD_INT 24
19734: PUSH
19735: LD_INT 25
19737: PUSH
19738: LD_INT 26
19740: PUSH
19741: LD_INT 27
19743: PUSH
19744: LD_INT 28
19746: PUSH
19747: LD_INT 29
19749: PUSH
19750: LD_INT 30
19752: PUSH
19753: LD_INT 31
19755: PUSH
19756: LD_INT 32
19758: PUSH
19759: LD_INT 33
19761: PUSH
19762: LD_INT 34
19764: PUSH
19765: LD_INT 35
19767: PUSH
19768: LD_INT 36
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 101
19811: PUSH
19812: LD_INT 102
19814: PUSH
19815: LD_INT 103
19817: PUSH
19818: LD_INT 104
19820: PUSH
19821: LD_INT 105
19823: PUSH
19824: LD_INT 106
19826: PUSH
19827: LD_INT 107
19829: PUSH
19830: LD_INT 108
19832: PUSH
19833: LD_INT 109
19835: PUSH
19836: LD_INT 110
19838: PUSH
19839: LD_INT 111
19841: PUSH
19842: LD_INT 112
19844: PUSH
19845: LD_INT 113
19847: PUSH
19848: LD_INT 114
19850: PUSH
19851: LD_INT 115
19853: PUSH
19854: LD_INT 116
19856: PUSH
19857: LD_INT 117
19859: PUSH
19860: LD_INT 118
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: ST_TO_ADDR
19887: GO 19890
19889: POP
// end else
19890: GO 20121
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19892: LD_ADDR_VAR 0 2
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 3
19905: PUSH
19906: LD_INT 4
19908: PUSH
19909: LD_INT 5
19911: PUSH
19912: LD_INT 6
19914: PUSH
19915: LD_INT 7
19917: PUSH
19918: LD_INT 8
19920: PUSH
19921: LD_INT 9
19923: PUSH
19924: LD_INT 10
19926: PUSH
19927: LD_INT 11
19929: PUSH
19930: LD_INT 12
19932: PUSH
19933: LD_INT 13
19935: PUSH
19936: LD_INT 14
19938: PUSH
19939: LD_INT 15
19941: PUSH
19942: LD_INT 16
19944: PUSH
19945: LD_INT 17
19947: PUSH
19948: LD_INT 18
19950: PUSH
19951: LD_INT 19
19953: PUSH
19954: LD_INT 20
19956: PUSH
19957: LD_INT 21
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_INT 23
19965: PUSH
19966: LD_INT 24
19968: PUSH
19969: LD_INT 25
19971: PUSH
19972: LD_INT 26
19974: PUSH
19975: LD_INT 27
19977: PUSH
19978: LD_INT 28
19980: PUSH
19981: LD_INT 29
19983: PUSH
19984: LD_INT 30
19986: PUSH
19987: LD_INT 31
19989: PUSH
19990: LD_INT 32
19992: PUSH
19993: LD_INT 33
19995: PUSH
19996: LD_INT 34
19998: PUSH
19999: LD_INT 35
20001: PUSH
20002: LD_INT 36
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 101
20045: PUSH
20046: LD_INT 102
20048: PUSH
20049: LD_INT 103
20051: PUSH
20052: LD_INT 104
20054: PUSH
20055: LD_INT 105
20057: PUSH
20058: LD_INT 106
20060: PUSH
20061: LD_INT 107
20063: PUSH
20064: LD_INT 108
20066: PUSH
20067: LD_INT 109
20069: PUSH
20070: LD_INT 110
20072: PUSH
20073: LD_INT 111
20075: PUSH
20076: LD_INT 112
20078: PUSH
20079: LD_INT 113
20081: PUSH
20082: LD_INT 114
20084: PUSH
20085: LD_INT 115
20087: PUSH
20088: LD_INT 116
20090: PUSH
20091: LD_INT 117
20093: PUSH
20094: LD_INT 118
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: ST_TO_ADDR
// if result then
20121: LD_VAR 0 2
20125: IFFALSE 20911
// begin normal :=  ;
20127: LD_ADDR_VAR 0 5
20131: PUSH
20132: LD_STRING 
20134: ST_TO_ADDR
// hardcore :=  ;
20135: LD_ADDR_VAR 0 6
20139: PUSH
20140: LD_STRING 
20142: ST_TO_ADDR
// active :=  ;
20143: LD_ADDR_VAR 0 7
20147: PUSH
20148: LD_STRING 
20150: ST_TO_ADDR
// for i = 1 to normalCounter do
20151: LD_ADDR_VAR 0 8
20155: PUSH
20156: DOUBLE
20157: LD_INT 1
20159: DEC
20160: ST_TO_ADDR
20161: LD_EXP 62
20165: PUSH
20166: FOR_TO
20167: IFFALSE 20268
// begin tmp := 0 ;
20169: LD_ADDR_VAR 0 3
20173: PUSH
20174: LD_STRING 0
20176: ST_TO_ADDR
// if result [ 1 ] then
20177: LD_VAR 0 2
20181: PUSH
20182: LD_INT 1
20184: ARRAY
20185: IFFALSE 20250
// if result [ 1 ] [ 1 ] = i then
20187: LD_VAR 0 2
20191: PUSH
20192: LD_INT 1
20194: ARRAY
20195: PUSH
20196: LD_INT 1
20198: ARRAY
20199: PUSH
20200: LD_VAR 0 8
20204: EQUAL
20205: IFFALSE 20250
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20207: LD_ADDR_VAR 0 2
20211: PUSH
20212: LD_VAR 0 2
20216: PPUSH
20217: LD_INT 1
20219: PPUSH
20220: LD_VAR 0 2
20224: PUSH
20225: LD_INT 1
20227: ARRAY
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: CALL_OW 3
20236: PPUSH
20237: CALL_OW 1
20241: ST_TO_ADDR
// tmp := 1 ;
20242: LD_ADDR_VAR 0 3
20246: PUSH
20247: LD_STRING 1
20249: ST_TO_ADDR
// end ; normal := normal & tmp ;
20250: LD_ADDR_VAR 0 5
20254: PUSH
20255: LD_VAR 0 5
20259: PUSH
20260: LD_VAR 0 3
20264: STR
20265: ST_TO_ADDR
// end ;
20266: GO 20166
20268: POP
20269: POP
// for i = 1 to hardcoreCounter do
20270: LD_ADDR_VAR 0 8
20274: PUSH
20275: DOUBLE
20276: LD_INT 1
20278: DEC
20279: ST_TO_ADDR
20280: LD_EXP 63
20284: PUSH
20285: FOR_TO
20286: IFFALSE 20391
// begin tmp := 0 ;
20288: LD_ADDR_VAR 0 3
20292: PUSH
20293: LD_STRING 0
20295: ST_TO_ADDR
// if result [ 2 ] then
20296: LD_VAR 0 2
20300: PUSH
20301: LD_INT 2
20303: ARRAY
20304: IFFALSE 20373
// if result [ 2 ] [ 1 ] = 100 + i then
20306: LD_VAR 0 2
20310: PUSH
20311: LD_INT 2
20313: ARRAY
20314: PUSH
20315: LD_INT 1
20317: ARRAY
20318: PUSH
20319: LD_INT 100
20321: PUSH
20322: LD_VAR 0 8
20326: PLUS
20327: EQUAL
20328: IFFALSE 20373
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20330: LD_ADDR_VAR 0 2
20334: PUSH
20335: LD_VAR 0 2
20339: PPUSH
20340: LD_INT 2
20342: PPUSH
20343: LD_VAR 0 2
20347: PUSH
20348: LD_INT 2
20350: ARRAY
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: CALL_OW 3
20359: PPUSH
20360: CALL_OW 1
20364: ST_TO_ADDR
// tmp := 1 ;
20365: LD_ADDR_VAR 0 3
20369: PUSH
20370: LD_STRING 1
20372: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20373: LD_ADDR_VAR 0 6
20377: PUSH
20378: LD_VAR 0 6
20382: PUSH
20383: LD_VAR 0 3
20387: STR
20388: ST_TO_ADDR
// end ;
20389: GO 20285
20391: POP
20392: POP
// if isGameLoad then
20393: LD_VAR 0 1
20397: IFFALSE 20872
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20399: LD_ADDR_VAR 0 4
20403: PUSH
20404: LD_EXP 66
20408: PUSH
20409: LD_EXP 65
20413: PUSH
20414: LD_EXP 67
20418: PUSH
20419: LD_EXP 64
20423: PUSH
20424: LD_EXP 68
20428: PUSH
20429: LD_EXP 69
20433: PUSH
20434: LD_EXP 70
20438: PUSH
20439: LD_EXP 71
20443: PUSH
20444: LD_EXP 72
20448: PUSH
20449: LD_EXP 73
20453: PUSH
20454: LD_EXP 74
20458: PUSH
20459: LD_EXP 75
20463: PUSH
20464: LD_EXP 76
20468: PUSH
20469: LD_EXP 77
20473: PUSH
20474: LD_EXP 85
20478: PUSH
20479: LD_EXP 86
20483: PUSH
20484: LD_EXP 87
20488: PUSH
20489: LD_EXP 88
20493: PUSH
20494: LD_EXP 90
20498: PUSH
20499: LD_EXP 91
20503: PUSH
20504: LD_EXP 92
20508: PUSH
20509: LD_EXP 95
20513: PUSH
20514: LD_EXP 97
20518: PUSH
20519: LD_EXP 98
20523: PUSH
20524: LD_EXP 99
20528: PUSH
20529: LD_EXP 101
20533: PUSH
20534: LD_EXP 102
20538: PUSH
20539: LD_EXP 105
20543: PUSH
20544: LD_EXP 106
20548: PUSH
20549: LD_EXP 107
20553: PUSH
20554: LD_EXP 108
20558: PUSH
20559: LD_EXP 109
20563: PUSH
20564: LD_EXP 110
20568: PUSH
20569: LD_EXP 111
20573: PUSH
20574: LD_EXP 112
20578: PUSH
20579: LD_EXP 113
20583: PUSH
20584: LD_EXP 78
20588: PUSH
20589: LD_EXP 79
20593: PUSH
20594: LD_EXP 82
20598: PUSH
20599: LD_EXP 83
20603: PUSH
20604: LD_EXP 84
20608: PUSH
20609: LD_EXP 80
20613: PUSH
20614: LD_EXP 81
20618: PUSH
20619: LD_EXP 89
20623: PUSH
20624: LD_EXP 93
20628: PUSH
20629: LD_EXP 94
20633: PUSH
20634: LD_EXP 96
20638: PUSH
20639: LD_EXP 100
20643: PUSH
20644: LD_EXP 103
20648: PUSH
20649: LD_EXP 104
20653: PUSH
20654: LD_EXP 114
20658: PUSH
20659: LD_EXP 115
20663: PUSH
20664: LD_EXP 116
20668: PUSH
20669: LD_EXP 117
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: ST_TO_ADDR
// tmp :=  ;
20730: LD_ADDR_VAR 0 3
20734: PUSH
20735: LD_STRING 
20737: ST_TO_ADDR
// for i = 1 to normalCounter do
20738: LD_ADDR_VAR 0 8
20742: PUSH
20743: DOUBLE
20744: LD_INT 1
20746: DEC
20747: ST_TO_ADDR
20748: LD_EXP 62
20752: PUSH
20753: FOR_TO
20754: IFFALSE 20790
// begin if flags [ i ] then
20756: LD_VAR 0 4
20760: PUSH
20761: LD_VAR 0 8
20765: ARRAY
20766: IFFALSE 20788
// tmp := tmp & i & ; ;
20768: LD_ADDR_VAR 0 3
20772: PUSH
20773: LD_VAR 0 3
20777: PUSH
20778: LD_VAR 0 8
20782: STR
20783: PUSH
20784: LD_STRING ;
20786: STR
20787: ST_TO_ADDR
// end ;
20788: GO 20753
20790: POP
20791: POP
// for i = 1 to hardcoreCounter do
20792: LD_ADDR_VAR 0 8
20796: PUSH
20797: DOUBLE
20798: LD_INT 1
20800: DEC
20801: ST_TO_ADDR
20802: LD_EXP 63
20806: PUSH
20807: FOR_TO
20808: IFFALSE 20854
// begin if flags [ normalCounter + i ] then
20810: LD_VAR 0 4
20814: PUSH
20815: LD_EXP 62
20819: PUSH
20820: LD_VAR 0 8
20824: PLUS
20825: ARRAY
20826: IFFALSE 20852
// tmp := tmp & ( 100 + i ) & ; ;
20828: LD_ADDR_VAR 0 3
20832: PUSH
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 100
20840: PUSH
20841: LD_VAR 0 8
20845: PLUS
20846: STR
20847: PUSH
20848: LD_STRING ;
20850: STR
20851: ST_TO_ADDR
// end ;
20852: GO 20807
20854: POP
20855: POP
// if tmp then
20856: LD_VAR 0 3
20860: IFFALSE 20872
// active := tmp ;
20862: LD_ADDR_VAR 0 7
20866: PUSH
20867: LD_VAR 0 3
20871: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20872: LD_STRING getStreamItemsFromMission("
20874: PUSH
20875: LD_VAR 0 5
20879: STR
20880: PUSH
20881: LD_STRING ","
20883: STR
20884: PUSH
20885: LD_VAR 0 6
20889: STR
20890: PUSH
20891: LD_STRING ","
20893: STR
20894: PUSH
20895: LD_VAR 0 7
20899: STR
20900: PUSH
20901: LD_STRING ")
20903: STR
20904: PPUSH
20905: CALL_OW 559
// end else
20909: GO 20918
// ToLua ( getStreamItemsFromMission("","","") ) ;
20911: LD_STRING getStreamItemsFromMission("","","")
20913: PPUSH
20914: CALL_OW 559
// end ;
20918: LD_VAR 0 2
20922: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20923: LD_EXP 61
20927: PUSH
20928: LD_EXP 66
20932: AND
20933: IFFALSE 21057
20935: GO 20937
20937: DISABLE
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
// begin enable ;
20942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_OWVAR 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 34
20965: PUSH
20966: LD_INT 7
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 34
20975: PUSH
20976: LD_INT 45
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 34
20985: PUSH
20986: LD_INT 28
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 34
20995: PUSH
20996: LD_INT 47
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 69
21018: ST_TO_ADDR
// if not tmp then
21019: LD_VAR 0 2
21023: NOT
21024: IFFALSE 21028
// exit ;
21026: GO 21057
// for i in tmp do
21028: LD_ADDR_VAR 0 1
21032: PUSH
21033: LD_VAR 0 2
21037: PUSH
21038: FOR_IN
21039: IFFALSE 21055
// begin SetLives ( i , 0 ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: LD_INT 0
21048: PPUSH
21049: CALL_OW 234
// end ;
21053: GO 21038
21055: POP
21056: POP
// end ;
21057: PPOPN 2
21059: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21060: LD_EXP 61
21064: PUSH
21065: LD_EXP 67
21069: AND
21070: IFFALSE 21154
21072: GO 21074
21074: DISABLE
21075: LD_INT 0
21077: PPUSH
21078: PPUSH
// begin enable ;
21079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21080: LD_ADDR_VAR 0 2
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_OWVAR 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 32
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PPUSH
21111: CALL_OW 69
21115: ST_TO_ADDR
// if not tmp then
21116: LD_VAR 0 2
21120: NOT
21121: IFFALSE 21125
// exit ;
21123: GO 21154
// for i in tmp do
21125: LD_ADDR_VAR 0 1
21129: PUSH
21130: LD_VAR 0 2
21134: PUSH
21135: FOR_IN
21136: IFFALSE 21152
// begin SetLives ( i , 0 ) ;
21138: LD_VAR 0 1
21142: PPUSH
21143: LD_INT 0
21145: PPUSH
21146: CALL_OW 234
// end ;
21150: GO 21135
21152: POP
21153: POP
// end ;
21154: PPOPN 2
21156: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21157: LD_EXP 61
21161: PUSH
21162: LD_EXP 64
21166: AND
21167: IFFALSE 21260
21169: GO 21171
21171: DISABLE
21172: LD_INT 0
21174: PPUSH
// begin enable ;
21175: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21176: LD_ADDR_VAR 0 1
21180: PUSH
21181: LD_INT 22
21183: PUSH
21184: LD_OWVAR 2
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: PUSH
21196: LD_INT 25
21198: PUSH
21199: LD_INT 5
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 25
21208: PUSH
21209: LD_INT 9
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 25
21218: PUSH
21219: LD_INT 8
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PPUSH
21236: CALL_OW 69
21240: PUSH
21241: FOR_IN
21242: IFFALSE 21258
// begin SetClass ( i , 1 ) ;
21244: LD_VAR 0 1
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL_OW 336
// end ;
21256: GO 21241
21258: POP
21259: POP
// end ;
21260: PPOPN 1
21262: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21263: LD_EXP 61
21267: PUSH
21268: LD_EXP 65
21272: AND
21273: PUSH
21274: LD_OWVAR 65
21278: PUSH
21279: LD_INT 7
21281: LESS
21282: AND
21283: IFFALSE 21297
21285: GO 21287
21287: DISABLE
// begin enable ;
21288: ENABLE
// game_speed := 7 ;
21289: LD_ADDR_OWVAR 65
21293: PUSH
21294: LD_INT 7
21296: ST_TO_ADDR
// end ;
21297: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21298: LD_EXP 61
21302: PUSH
21303: LD_EXP 68
21307: AND
21308: IFFALSE 21510
21310: GO 21312
21312: DISABLE
21313: LD_INT 0
21315: PPUSH
21316: PPUSH
21317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21318: LD_ADDR_VAR 0 3
21322: PUSH
21323: LD_INT 81
21325: PUSH
21326: LD_OWVAR 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 21
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 69
21353: ST_TO_ADDR
// if not tmp then
21354: LD_VAR 0 3
21358: NOT
21359: IFFALSE 21363
// exit ;
21361: GO 21510
// if tmp > 5 then
21363: LD_VAR 0 3
21367: PUSH
21368: LD_INT 5
21370: GREATER
21371: IFFALSE 21383
// k := 5 else
21373: LD_ADDR_VAR 0 2
21377: PUSH
21378: LD_INT 5
21380: ST_TO_ADDR
21381: GO 21393
// k := tmp ;
21383: LD_ADDR_VAR 0 2
21387: PUSH
21388: LD_VAR 0 3
21392: ST_TO_ADDR
// for i := 1 to k do
21393: LD_ADDR_VAR 0 1
21397: PUSH
21398: DOUBLE
21399: LD_INT 1
21401: DEC
21402: ST_TO_ADDR
21403: LD_VAR 0 2
21407: PUSH
21408: FOR_TO
21409: IFFALSE 21508
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21411: LD_VAR 0 3
21415: PUSH
21416: LD_VAR 0 1
21420: ARRAY
21421: PPUSH
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 4
21429: MOD
21430: PUSH
21431: LD_INT 1
21433: PLUS
21434: PPUSH
21435: CALL_OW 259
21439: PUSH
21440: LD_INT 10
21442: LESS
21443: IFFALSE 21506
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21445: LD_VAR 0 3
21449: PUSH
21450: LD_VAR 0 1
21454: ARRAY
21455: PPUSH
21456: LD_VAR 0 1
21460: PUSH
21461: LD_INT 4
21463: MOD
21464: PUSH
21465: LD_INT 1
21467: PLUS
21468: PPUSH
21469: LD_VAR 0 3
21473: PUSH
21474: LD_VAR 0 1
21478: ARRAY
21479: PPUSH
21480: LD_VAR 0 1
21484: PUSH
21485: LD_INT 4
21487: MOD
21488: PUSH
21489: LD_INT 1
21491: PLUS
21492: PPUSH
21493: CALL_OW 259
21497: PUSH
21498: LD_INT 1
21500: PLUS
21501: PPUSH
21502: CALL_OW 237
21506: GO 21408
21508: POP
21509: POP
// end ;
21510: PPOPN 3
21512: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21513: LD_EXP 61
21517: PUSH
21518: LD_EXP 69
21522: AND
21523: IFFALSE 21543
21525: GO 21527
21527: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21528: LD_INT 4
21530: PPUSH
21531: LD_OWVAR 2
21535: PPUSH
21536: LD_INT 0
21538: PPUSH
21539: CALL_OW 324
21543: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21544: LD_EXP 61
21548: PUSH
21549: LD_EXP 98
21553: AND
21554: IFFALSE 21574
21556: GO 21558
21558: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21559: LD_INT 19
21561: PPUSH
21562: LD_OWVAR 2
21566: PPUSH
21567: LD_INT 0
21569: PPUSH
21570: CALL_OW 324
21574: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21575: LD_EXP 61
21579: PUSH
21580: LD_EXP 70
21584: AND
21585: IFFALSE 21687
21587: GO 21589
21589: DISABLE
21590: LD_INT 0
21592: PPUSH
21593: PPUSH
// begin enable ;
21594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21595: LD_ADDR_VAR 0 2
21599: PUSH
21600: LD_INT 22
21602: PUSH
21603: LD_OWVAR 2
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: LD_INT 34
21617: PUSH
21618: LD_INT 11
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 34
21627: PUSH
21628: LD_INT 30
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PPUSH
21644: CALL_OW 69
21648: ST_TO_ADDR
// if not tmp then
21649: LD_VAR 0 2
21653: NOT
21654: IFFALSE 21658
// exit ;
21656: GO 21687
// for i in tmp do
21658: LD_ADDR_VAR 0 1
21662: PUSH
21663: LD_VAR 0 2
21667: PUSH
21668: FOR_IN
21669: IFFALSE 21685
// begin SetLives ( i , 0 ) ;
21671: LD_VAR 0 1
21675: PPUSH
21676: LD_INT 0
21678: PPUSH
21679: CALL_OW 234
// end ;
21683: GO 21668
21685: POP
21686: POP
// end ;
21687: PPOPN 2
21689: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21690: LD_EXP 61
21694: PUSH
21695: LD_EXP 71
21699: AND
21700: IFFALSE 21720
21702: GO 21704
21704: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21705: LD_INT 32
21707: PPUSH
21708: LD_OWVAR 2
21712: PPUSH
21713: LD_INT 0
21715: PPUSH
21716: CALL_OW 324
21720: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21721: LD_EXP 61
21725: PUSH
21726: LD_EXP 72
21730: AND
21731: IFFALSE 21912
21733: GO 21735
21735: DISABLE
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
21740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21741: LD_ADDR_VAR 0 2
21745: PUSH
21746: LD_INT 22
21748: PUSH
21749: LD_OWVAR 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 33
21760: PUSH
21761: LD_INT 3
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: ST_TO_ADDR
// if not tmp then
21777: LD_VAR 0 2
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21912
// side := 0 ;
21786: LD_ADDR_VAR 0 3
21790: PUSH
21791: LD_INT 0
21793: ST_TO_ADDR
// for i := 1 to 8 do
21794: LD_ADDR_VAR 0 1
21798: PUSH
21799: DOUBLE
21800: LD_INT 1
21802: DEC
21803: ST_TO_ADDR
21804: LD_INT 8
21806: PUSH
21807: FOR_TO
21808: IFFALSE 21856
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21810: LD_OWVAR 2
21814: PUSH
21815: LD_VAR 0 1
21819: NONEQUAL
21820: PUSH
21821: LD_OWVAR 2
21825: PPUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 81
21835: PUSH
21836: LD_INT 2
21838: EQUAL
21839: AND
21840: IFFALSE 21854
// begin side := i ;
21842: LD_ADDR_VAR 0 3
21846: PUSH
21847: LD_VAR 0 1
21851: ST_TO_ADDR
// break ;
21852: GO 21856
// end ;
21854: GO 21807
21856: POP
21857: POP
// if not side then
21858: LD_VAR 0 3
21862: NOT
21863: IFFALSE 21867
// exit ;
21865: GO 21912
// for i := 1 to tmp do
21867: LD_ADDR_VAR 0 1
21871: PUSH
21872: DOUBLE
21873: LD_INT 1
21875: DEC
21876: ST_TO_ADDR
21877: LD_VAR 0 2
21881: PUSH
21882: FOR_TO
21883: IFFALSE 21910
// if Prob ( 60 ) then
21885: LD_INT 60
21887: PPUSH
21888: CALL_OW 13
21892: IFFALSE 21908
// SetSide ( i , side ) ;
21894: LD_VAR 0 1
21898: PPUSH
21899: LD_VAR 0 3
21903: PPUSH
21904: CALL_OW 235
21908: GO 21882
21910: POP
21911: POP
// end ;
21912: PPOPN 3
21914: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21915: LD_EXP 61
21919: PUSH
21920: LD_EXP 74
21924: AND
21925: IFFALSE 22044
21927: GO 21929
21929: DISABLE
21930: LD_INT 0
21932: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_OWVAR 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 21
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 3
21962: PUSH
21963: LD_INT 23
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: PPUSH
21982: CALL_OW 69
21986: PUSH
21987: FOR_IN
21988: IFFALSE 22042
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 257
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: LD_INT 3
22008: PUSH
22009: LD_INT 4
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: IN
22018: IFFALSE 22040
// SetClass ( un , rand ( 1 , 4 ) ) ;
22020: LD_VAR 0 1
22024: PPUSH
22025: LD_INT 1
22027: PPUSH
22028: LD_INT 4
22030: PPUSH
22031: CALL_OW 12
22035: PPUSH
22036: CALL_OW 336
22040: GO 21987
22042: POP
22043: POP
// end ;
22044: PPOPN 1
22046: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22047: LD_EXP 61
22051: PUSH
22052: LD_EXP 73
22056: AND
22057: IFFALSE 22136
22059: GO 22061
22061: DISABLE
22062: LD_INT 0
22064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22065: LD_ADDR_VAR 0 1
22069: PUSH
22070: LD_INT 22
22072: PUSH
22073: LD_OWVAR 2
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 21
22084: PUSH
22085: LD_INT 3
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PPUSH
22096: CALL_OW 69
22100: ST_TO_ADDR
// if not tmp then
22101: LD_VAR 0 1
22105: NOT
22106: IFFALSE 22110
// exit ;
22108: GO 22136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22110: LD_VAR 0 1
22114: PUSH
22115: LD_INT 1
22117: PPUSH
22118: LD_VAR 0 1
22122: PPUSH
22123: CALL_OW 12
22127: ARRAY
22128: PPUSH
22129: LD_INT 100
22131: PPUSH
22132: CALL_OW 234
// end ;
22136: PPOPN 1
22138: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22139: LD_EXP 61
22143: PUSH
22144: LD_EXP 75
22148: AND
22149: IFFALSE 22247
22151: GO 22153
22153: DISABLE
22154: LD_INT 0
22156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22157: LD_ADDR_VAR 0 1
22161: PUSH
22162: LD_INT 22
22164: PUSH
22165: LD_OWVAR 2
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 21
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PPUSH
22188: CALL_OW 69
22192: ST_TO_ADDR
// if not tmp then
22193: LD_VAR 0 1
22197: NOT
22198: IFFALSE 22202
// exit ;
22200: GO 22247
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22202: LD_VAR 0 1
22206: PUSH
22207: LD_INT 1
22209: PPUSH
22210: LD_VAR 0 1
22214: PPUSH
22215: CALL_OW 12
22219: ARRAY
22220: PPUSH
22221: LD_INT 1
22223: PPUSH
22224: LD_INT 4
22226: PPUSH
22227: CALL_OW 12
22231: PPUSH
22232: LD_INT 3000
22234: PPUSH
22235: LD_INT 9000
22237: PPUSH
22238: CALL_OW 12
22242: PPUSH
22243: CALL_OW 492
// end ;
22247: PPOPN 1
22249: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22250: LD_EXP 61
22254: PUSH
22255: LD_EXP 76
22259: AND
22260: IFFALSE 22280
22262: GO 22264
22264: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22265: LD_INT 1
22267: PPUSH
22268: LD_OWVAR 2
22272: PPUSH
22273: LD_INT 0
22275: PPUSH
22276: CALL_OW 324
22280: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22281: LD_EXP 61
22285: PUSH
22286: LD_EXP 77
22290: AND
22291: IFFALSE 22374
22293: GO 22295
22295: DISABLE
22296: LD_INT 0
22298: PPUSH
22299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22300: LD_ADDR_VAR 0 2
22304: PUSH
22305: LD_INT 22
22307: PUSH
22308: LD_OWVAR 2
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 21
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PPUSH
22331: CALL_OW 69
22335: ST_TO_ADDR
// if not tmp then
22336: LD_VAR 0 2
22340: NOT
22341: IFFALSE 22345
// exit ;
22343: GO 22374
// for i in tmp do
22345: LD_ADDR_VAR 0 1
22349: PUSH
22350: LD_VAR 0 2
22354: PUSH
22355: FOR_IN
22356: IFFALSE 22372
// SetBLevel ( i , 10 ) ;
22358: LD_VAR 0 1
22362: PPUSH
22363: LD_INT 10
22365: PPUSH
22366: CALL_OW 241
22370: GO 22355
22372: POP
22373: POP
// end ;
22374: PPOPN 2
22376: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22377: LD_EXP 61
22381: PUSH
22382: LD_EXP 78
22386: AND
22387: IFFALSE 22498
22389: GO 22391
22391: DISABLE
22392: LD_INT 0
22394: PPUSH
22395: PPUSH
22396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22397: LD_ADDR_VAR 0 3
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_OWVAR 2
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PPUSH
22428: CALL_OW 69
22432: ST_TO_ADDR
// if not tmp then
22433: LD_VAR 0 3
22437: NOT
22438: IFFALSE 22442
// exit ;
22440: GO 22498
// un := tmp [ rand ( 1 , tmp ) ] ;
22442: LD_ADDR_VAR 0 2
22446: PUSH
22447: LD_VAR 0 3
22451: PUSH
22452: LD_INT 1
22454: PPUSH
22455: LD_VAR 0 3
22459: PPUSH
22460: CALL_OW 12
22464: ARRAY
22465: ST_TO_ADDR
// if Crawls ( un ) then
22466: LD_VAR 0 2
22470: PPUSH
22471: CALL_OW 318
22475: IFFALSE 22486
// ComWalk ( un ) ;
22477: LD_VAR 0 2
22481: PPUSH
22482: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22486: LD_VAR 0 2
22490: PPUSH
22491: LD_INT 5
22493: PPUSH
22494: CALL_OW 336
// end ;
22498: PPOPN 3
22500: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22501: LD_EXP 61
22505: PUSH
22506: LD_EXP 79
22510: AND
22511: PUSH
22512: LD_OWVAR 67
22516: PUSH
22517: LD_INT 4
22519: LESS
22520: AND
22521: IFFALSE 22540
22523: GO 22525
22525: DISABLE
// begin Difficulty := Difficulty + 1 ;
22526: LD_ADDR_OWVAR 67
22530: PUSH
22531: LD_OWVAR 67
22535: PUSH
22536: LD_INT 1
22538: PLUS
22539: ST_TO_ADDR
// end ;
22540: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22541: LD_EXP 61
22545: PUSH
22546: LD_EXP 80
22550: AND
22551: IFFALSE 22654
22553: GO 22555
22555: DISABLE
22556: LD_INT 0
22558: PPUSH
// begin for i := 1 to 5 do
22559: LD_ADDR_VAR 0 1
22563: PUSH
22564: DOUBLE
22565: LD_INT 1
22567: DEC
22568: ST_TO_ADDR
22569: LD_INT 5
22571: PUSH
22572: FOR_TO
22573: IFFALSE 22652
// begin uc_nation := nation_nature ;
22575: LD_ADDR_OWVAR 21
22579: PUSH
22580: LD_INT 0
22582: ST_TO_ADDR
// uc_side := 0 ;
22583: LD_ADDR_OWVAR 20
22587: PUSH
22588: LD_INT 0
22590: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22591: LD_ADDR_OWVAR 29
22595: PUSH
22596: LD_INT 12
22598: PUSH
22599: LD_INT 12
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: ST_TO_ADDR
// hc_agressivity := 20 ;
22606: LD_ADDR_OWVAR 35
22610: PUSH
22611: LD_INT 20
22613: ST_TO_ADDR
// hc_class := class_tiger ;
22614: LD_ADDR_OWVAR 28
22618: PUSH
22619: LD_INT 14
22621: ST_TO_ADDR
// hc_gallery :=  ;
22622: LD_ADDR_OWVAR 33
22626: PUSH
22627: LD_STRING 
22629: ST_TO_ADDR
// hc_name :=  ;
22630: LD_ADDR_OWVAR 26
22634: PUSH
22635: LD_STRING 
22637: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22638: CALL_OW 44
22642: PPUSH
22643: LD_INT 0
22645: PPUSH
22646: CALL_OW 51
// end ;
22650: GO 22572
22652: POP
22653: POP
// end ;
22654: PPOPN 1
22656: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22657: LD_EXP 61
22661: PUSH
22662: LD_EXP 81
22666: AND
22667: IFFALSE 22676
22669: GO 22671
22671: DISABLE
// StreamSibBomb ;
22672: CALL 22677 0 0
22676: END
// export function StreamSibBomb ; var i , x , y ; begin
22677: LD_INT 0
22679: PPUSH
22680: PPUSH
22681: PPUSH
22682: PPUSH
// result := false ;
22683: LD_ADDR_VAR 0 1
22687: PUSH
22688: LD_INT 0
22690: ST_TO_ADDR
// for i := 1 to 16 do
22691: LD_ADDR_VAR 0 2
22695: PUSH
22696: DOUBLE
22697: LD_INT 1
22699: DEC
22700: ST_TO_ADDR
22701: LD_INT 16
22703: PUSH
22704: FOR_TO
22705: IFFALSE 22904
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22707: LD_ADDR_VAR 0 3
22711: PUSH
22712: LD_INT 10
22714: PUSH
22715: LD_INT 20
22717: PUSH
22718: LD_INT 30
22720: PUSH
22721: LD_INT 40
22723: PUSH
22724: LD_INT 50
22726: PUSH
22727: LD_INT 60
22729: PUSH
22730: LD_INT 70
22732: PUSH
22733: LD_INT 80
22735: PUSH
22736: LD_INT 90
22738: PUSH
22739: LD_INT 100
22741: PUSH
22742: LD_INT 110
22744: PUSH
22745: LD_INT 120
22747: PUSH
22748: LD_INT 130
22750: PUSH
22751: LD_INT 140
22753: PUSH
22754: LD_INT 150
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PPUSH
22777: LD_INT 15
22779: PPUSH
22780: CALL_OW 12
22784: ARRAY
22785: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22786: LD_ADDR_VAR 0 4
22790: PUSH
22791: LD_INT 10
22793: PUSH
22794: LD_INT 20
22796: PUSH
22797: LD_INT 30
22799: PUSH
22800: LD_INT 40
22802: PUSH
22803: LD_INT 50
22805: PUSH
22806: LD_INT 60
22808: PUSH
22809: LD_INT 70
22811: PUSH
22812: LD_INT 80
22814: PUSH
22815: LD_INT 90
22817: PUSH
22818: LD_INT 100
22820: PUSH
22821: LD_INT 110
22823: PUSH
22824: LD_INT 120
22826: PUSH
22827: LD_INT 130
22829: PUSH
22830: LD_INT 140
22832: PUSH
22833: LD_INT 150
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PPUSH
22856: LD_INT 15
22858: PPUSH
22859: CALL_OW 12
22863: ARRAY
22864: ST_TO_ADDR
// if ValidHex ( x , y ) then
22865: LD_VAR 0 3
22869: PPUSH
22870: LD_VAR 0 4
22874: PPUSH
22875: CALL_OW 488
22879: IFFALSE 22902
// begin result := [ x , y ] ;
22881: LD_ADDR_VAR 0 1
22885: PUSH
22886: LD_VAR 0 3
22890: PUSH
22891: LD_VAR 0 4
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: ST_TO_ADDR
// break ;
22900: GO 22904
// end ; end ;
22902: GO 22704
22904: POP
22905: POP
// if result then
22906: LD_VAR 0 1
22910: IFFALSE 22970
// begin ToLua ( playSibBomb() ) ;
22912: LD_STRING playSibBomb()
22914: PPUSH
22915: CALL_OW 559
// wait ( 0 0$14 ) ;
22919: LD_INT 490
22921: PPUSH
22922: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22926: LD_VAR 0 1
22930: PUSH
22931: LD_INT 1
22933: ARRAY
22934: PPUSH
22935: LD_VAR 0 1
22939: PUSH
22940: LD_INT 2
22942: ARRAY
22943: PPUSH
22944: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22948: LD_VAR 0 1
22952: PUSH
22953: LD_INT 1
22955: ARRAY
22956: PPUSH
22957: LD_VAR 0 1
22961: PUSH
22962: LD_INT 2
22964: ARRAY
22965: PPUSH
22966: CALL_OW 429
// end ; end ;
22970: LD_VAR 0 1
22974: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22975: LD_EXP 61
22979: PUSH
22980: LD_EXP 83
22984: AND
22985: IFFALSE 22997
22987: GO 22989
22989: DISABLE
// YouLost (  ) ;
22990: LD_STRING 
22992: PPUSH
22993: CALL_OW 104
22997: END
// every 0 0$1 trigger StreamModeActive and sFog do
22998: LD_EXP 61
23002: PUSH
23003: LD_EXP 82
23007: AND
23008: IFFALSE 23022
23010: GO 23012
23012: DISABLE
// FogOff ( your_side ) ;
23013: LD_OWVAR 2
23017: PPUSH
23018: CALL_OW 344
23022: END
// every 0 0$1 trigger StreamModeActive and sSun do
23023: LD_EXP 61
23027: PUSH
23028: LD_EXP 84
23032: AND
23033: IFFALSE 23061
23035: GO 23037
23037: DISABLE
// begin solar_recharge_percent := 0 ;
23038: LD_ADDR_OWVAR 79
23042: PUSH
23043: LD_INT 0
23045: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23046: LD_INT 10500
23048: PPUSH
23049: CALL_OW 67
// solar_recharge_percent := 100 ;
23053: LD_ADDR_OWVAR 79
23057: PUSH
23058: LD_INT 100
23060: ST_TO_ADDR
// end ;
23061: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23062: LD_EXP 61
23066: PUSH
23067: LD_EXP 85
23071: AND
23072: IFFALSE 23311
23074: GO 23076
23076: DISABLE
23077: LD_INT 0
23079: PPUSH
23080: PPUSH
23081: PPUSH
// begin tmp := [ ] ;
23082: LD_ADDR_VAR 0 3
23086: PUSH
23087: EMPTY
23088: ST_TO_ADDR
// for i := 1 to 6 do
23089: LD_ADDR_VAR 0 1
23093: PUSH
23094: DOUBLE
23095: LD_INT 1
23097: DEC
23098: ST_TO_ADDR
23099: LD_INT 6
23101: PUSH
23102: FOR_TO
23103: IFFALSE 23208
// begin uc_nation := nation_nature ;
23105: LD_ADDR_OWVAR 21
23109: PUSH
23110: LD_INT 0
23112: ST_TO_ADDR
// uc_side := 0 ;
23113: LD_ADDR_OWVAR 20
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23121: LD_ADDR_OWVAR 29
23125: PUSH
23126: LD_INT 12
23128: PUSH
23129: LD_INT 12
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: ST_TO_ADDR
// hc_agressivity := 20 ;
23136: LD_ADDR_OWVAR 35
23140: PUSH
23141: LD_INT 20
23143: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23144: LD_ADDR_OWVAR 28
23148: PUSH
23149: LD_INT 17
23151: ST_TO_ADDR
// hc_gallery :=  ;
23152: LD_ADDR_OWVAR 33
23156: PUSH
23157: LD_STRING 
23159: ST_TO_ADDR
// hc_name :=  ;
23160: LD_ADDR_OWVAR 26
23164: PUSH
23165: LD_STRING 
23167: ST_TO_ADDR
// un := CreateHuman ;
23168: LD_ADDR_VAR 0 2
23172: PUSH
23173: CALL_OW 44
23177: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23178: LD_VAR 0 2
23182: PPUSH
23183: LD_INT 1
23185: PPUSH
23186: CALL_OW 51
// tmp := tmp ^ un ;
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: LD_VAR 0 3
23199: PUSH
23200: LD_VAR 0 2
23204: ADD
23205: ST_TO_ADDR
// end ;
23206: GO 23102
23208: POP
23209: POP
// repeat wait ( 0 0$1 ) ;
23210: LD_INT 35
23212: PPUSH
23213: CALL_OW 67
// for un in tmp do
23217: LD_ADDR_VAR 0 2
23221: PUSH
23222: LD_VAR 0 3
23226: PUSH
23227: FOR_IN
23228: IFFALSE 23302
// begin if IsDead ( un ) then
23230: LD_VAR 0 2
23234: PPUSH
23235: CALL_OW 301
23239: IFFALSE 23259
// begin tmp := tmp diff un ;
23241: LD_ADDR_VAR 0 3
23245: PUSH
23246: LD_VAR 0 3
23250: PUSH
23251: LD_VAR 0 2
23255: DIFF
23256: ST_TO_ADDR
// continue ;
23257: GO 23227
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23259: LD_VAR 0 2
23263: PPUSH
23264: LD_INT 3
23266: PUSH
23267: LD_INT 22
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PPUSH
23281: CALL_OW 69
23285: PPUSH
23286: LD_VAR 0 2
23290: PPUSH
23291: CALL_OW 74
23295: PPUSH
23296: CALL_OW 115
// end ;
23300: GO 23227
23302: POP
23303: POP
// until not tmp ;
23304: LD_VAR 0 3
23308: NOT
23309: IFFALSE 23210
// end ;
23311: PPOPN 3
23313: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23314: LD_EXP 61
23318: PUSH
23319: LD_EXP 86
23323: AND
23324: IFFALSE 23378
23326: GO 23328
23328: DISABLE
// begin ToLua ( displayTroll(); ) ;
23329: LD_STRING displayTroll();
23331: PPUSH
23332: CALL_OW 559
// wait ( 3 3$00 ) ;
23336: LD_INT 6300
23338: PPUSH
23339: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23343: LD_STRING hideTroll();
23345: PPUSH
23346: CALL_OW 559
// wait ( 1 1$00 ) ;
23350: LD_INT 2100
23352: PPUSH
23353: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23357: LD_STRING displayTroll();
23359: PPUSH
23360: CALL_OW 559
// wait ( 1 1$00 ) ;
23364: LD_INT 2100
23366: PPUSH
23367: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23371: LD_STRING hideTroll();
23373: PPUSH
23374: CALL_OW 559
// end ;
23378: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23379: LD_EXP 61
23383: PUSH
23384: LD_EXP 87
23388: AND
23389: IFFALSE 23452
23391: GO 23393
23393: DISABLE
23394: LD_INT 0
23396: PPUSH
// begin p := 0 ;
23397: LD_ADDR_VAR 0 1
23401: PUSH
23402: LD_INT 0
23404: ST_TO_ADDR
// repeat game_speed := 1 ;
23405: LD_ADDR_OWVAR 65
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23413: LD_INT 35
23415: PPUSH
23416: CALL_OW 67
// p := p + 1 ;
23420: LD_ADDR_VAR 0 1
23424: PUSH
23425: LD_VAR 0 1
23429: PUSH
23430: LD_INT 1
23432: PLUS
23433: ST_TO_ADDR
// until p >= 60 ;
23434: LD_VAR 0 1
23438: PUSH
23439: LD_INT 60
23441: GREATEREQUAL
23442: IFFALSE 23405
// game_speed := 4 ;
23444: LD_ADDR_OWVAR 65
23448: PUSH
23449: LD_INT 4
23451: ST_TO_ADDR
// end ;
23452: PPOPN 1
23454: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23455: LD_EXP 61
23459: PUSH
23460: LD_EXP 88
23464: AND
23465: IFFALSE 23611
23467: GO 23469
23469: DISABLE
23470: LD_INT 0
23472: PPUSH
23473: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23474: LD_ADDR_VAR 0 1
23478: PUSH
23479: LD_INT 22
23481: PUSH
23482: LD_OWVAR 2
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 30
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PPUSH
23523: CALL_OW 69
23527: ST_TO_ADDR
// if not depot then
23528: LD_VAR 0 1
23532: NOT
23533: IFFALSE 23537
// exit ;
23535: GO 23611
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23537: LD_ADDR_VAR 0 2
23541: PUSH
23542: LD_VAR 0 1
23546: PUSH
23547: LD_INT 1
23549: PPUSH
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL_OW 12
23559: ARRAY
23560: PPUSH
23561: CALL_OW 274
23565: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23566: LD_VAR 0 2
23570: PPUSH
23571: LD_INT 1
23573: PPUSH
23574: LD_INT 0
23576: PPUSH
23577: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23581: LD_VAR 0 2
23585: PPUSH
23586: LD_INT 2
23588: PPUSH
23589: LD_INT 0
23591: PPUSH
23592: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23596: LD_VAR 0 2
23600: PPUSH
23601: LD_INT 3
23603: PPUSH
23604: LD_INT 0
23606: PPUSH
23607: CALL_OW 277
// end ;
23611: PPOPN 2
23613: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23614: LD_EXP 61
23618: PUSH
23619: LD_EXP 89
23623: AND
23624: IFFALSE 23721
23626: GO 23628
23628: DISABLE
23629: LD_INT 0
23631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23632: LD_ADDR_VAR 0 1
23636: PUSH
23637: LD_INT 22
23639: PUSH
23640: LD_OWVAR 2
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 21
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 3
23661: PUSH
23662: LD_INT 23
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: PPUSH
23681: CALL_OW 69
23685: ST_TO_ADDR
// if not tmp then
23686: LD_VAR 0 1
23690: NOT
23691: IFFALSE 23695
// exit ;
23693: GO 23721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23695: LD_VAR 0 1
23699: PUSH
23700: LD_INT 1
23702: PPUSH
23703: LD_VAR 0 1
23707: PPUSH
23708: CALL_OW 12
23712: ARRAY
23713: PPUSH
23714: LD_INT 200
23716: PPUSH
23717: CALL_OW 234
// end ;
23721: PPOPN 1
23723: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23724: LD_EXP 61
23728: PUSH
23729: LD_EXP 90
23733: AND
23734: IFFALSE 23813
23736: GO 23738
23738: DISABLE
23739: LD_INT 0
23741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23742: LD_ADDR_VAR 0 1
23746: PUSH
23747: LD_INT 22
23749: PUSH
23750: LD_OWVAR 2
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 21
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PPUSH
23773: CALL_OW 69
23777: ST_TO_ADDR
// if not tmp then
23778: LD_VAR 0 1
23782: NOT
23783: IFFALSE 23787
// exit ;
23785: GO 23813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23787: LD_VAR 0 1
23791: PUSH
23792: LD_INT 1
23794: PPUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 12
23804: ARRAY
23805: PPUSH
23806: LD_INT 60
23808: PPUSH
23809: CALL_OW 234
// end ;
23813: PPOPN 1
23815: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23816: LD_EXP 61
23820: PUSH
23821: LD_EXP 91
23825: AND
23826: IFFALSE 23925
23828: GO 23830
23830: DISABLE
23831: LD_INT 0
23833: PPUSH
23834: PPUSH
// begin enable ;
23835: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23836: LD_ADDR_VAR 0 1
23840: PUSH
23841: LD_INT 22
23843: PUSH
23844: LD_OWVAR 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 61
23855: PUSH
23856: EMPTY
23857: LIST
23858: PUSH
23859: LD_INT 33
23861: PUSH
23862: LD_INT 2
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: PPUSH
23874: CALL_OW 69
23878: ST_TO_ADDR
// if not tmp then
23879: LD_VAR 0 1
23883: NOT
23884: IFFALSE 23888
// exit ;
23886: GO 23925
// for i in tmp do
23888: LD_ADDR_VAR 0 2
23892: PUSH
23893: LD_VAR 0 1
23897: PUSH
23898: FOR_IN
23899: IFFALSE 23923
// if IsControledBy ( i ) then
23901: LD_VAR 0 2
23905: PPUSH
23906: CALL_OW 312
23910: IFFALSE 23921
// ComUnlink ( i ) ;
23912: LD_VAR 0 2
23916: PPUSH
23917: CALL_OW 136
23921: GO 23898
23923: POP
23924: POP
// end ;
23925: PPOPN 2
23927: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23928: LD_EXP 61
23932: PUSH
23933: LD_EXP 92
23937: AND
23938: IFFALSE 24078
23940: GO 23942
23942: DISABLE
23943: LD_INT 0
23945: PPUSH
23946: PPUSH
// begin ToLua ( displayPowell(); ) ;
23947: LD_STRING displayPowell();
23949: PPUSH
23950: CALL_OW 559
// uc_side := 0 ;
23954: LD_ADDR_OWVAR 20
23958: PUSH
23959: LD_INT 0
23961: ST_TO_ADDR
// uc_nation := 2 ;
23962: LD_ADDR_OWVAR 21
23966: PUSH
23967: LD_INT 2
23969: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23970: LD_ADDR_OWVAR 37
23974: PUSH
23975: LD_INT 14
23977: ST_TO_ADDR
// vc_engine := engine_siberite ;
23978: LD_ADDR_OWVAR 39
23982: PUSH
23983: LD_INT 3
23985: ST_TO_ADDR
// vc_control := control_apeman ;
23986: LD_ADDR_OWVAR 38
23990: PUSH
23991: LD_INT 5
23993: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23994: LD_ADDR_OWVAR 40
23998: PUSH
23999: LD_INT 29
24001: ST_TO_ADDR
// un := CreateVehicle ;
24002: LD_ADDR_VAR 0 2
24006: PUSH
24007: CALL_OW 45
24011: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24012: LD_VAR 0 2
24016: PPUSH
24017: LD_INT 1
24019: PPUSH
24020: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24024: LD_INT 35
24026: PPUSH
24027: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24031: LD_VAR 0 2
24035: PPUSH
24036: LD_INT 22
24038: PUSH
24039: LD_OWVAR 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: PPUSH
24053: LD_VAR 0 2
24057: PPUSH
24058: CALL_OW 74
24062: PPUSH
24063: CALL_OW 115
// until IsDead ( un ) ;
24067: LD_VAR 0 2
24071: PPUSH
24072: CALL_OW 301
24076: IFFALSE 24024
// end ;
24078: PPOPN 2
24080: END
// every 0 0$1 trigger StreamModeActive and sStu do
24081: LD_EXP 61
24085: PUSH
24086: LD_EXP 100
24090: AND
24091: IFFALSE 24107
24093: GO 24095
24095: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24096: LD_STRING displayStucuk();
24098: PPUSH
24099: CALL_OW 559
// ResetFog ;
24103: CALL_OW 335
// end ;
24107: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24108: LD_EXP 61
24112: PUSH
24113: LD_EXP 93
24117: AND
24118: IFFALSE 24259
24120: GO 24122
24122: DISABLE
24123: LD_INT 0
24125: PPUSH
24126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24127: LD_ADDR_VAR 0 2
24131: PUSH
24132: LD_INT 22
24134: PUSH
24135: LD_OWVAR 2
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 21
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PPUSH
24158: CALL_OW 69
24162: ST_TO_ADDR
// if not tmp then
24163: LD_VAR 0 2
24167: NOT
24168: IFFALSE 24172
// exit ;
24170: GO 24259
// un := tmp [ rand ( 1 , tmp ) ] ;
24172: LD_ADDR_VAR 0 1
24176: PUSH
24177: LD_VAR 0 2
24181: PUSH
24182: LD_INT 1
24184: PPUSH
24185: LD_VAR 0 2
24189: PPUSH
24190: CALL_OW 12
24194: ARRAY
24195: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24196: LD_VAR 0 1
24200: PPUSH
24201: LD_INT 0
24203: PPUSH
24204: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24208: LD_VAR 0 1
24212: PPUSH
24213: LD_OWVAR 3
24217: PUSH
24218: LD_VAR 0 1
24222: DIFF
24223: PPUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 74
24233: PPUSH
24234: CALL_OW 115
// wait ( 0 0$20 ) ;
24238: LD_INT 700
24240: PPUSH
24241: CALL_OW 67
// SetSide ( un , your_side ) ;
24245: LD_VAR 0 1
24249: PPUSH
24250: LD_OWVAR 2
24254: PPUSH
24255: CALL_OW 235
// end ;
24259: PPOPN 2
24261: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24262: LD_EXP 61
24266: PUSH
24267: LD_EXP 94
24271: AND
24272: IFFALSE 24378
24274: GO 24276
24276: DISABLE
24277: LD_INT 0
24279: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24280: LD_ADDR_VAR 0 1
24284: PUSH
24285: LD_INT 22
24287: PUSH
24288: LD_OWVAR 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: LD_INT 30
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 30
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PPUSH
24329: CALL_OW 69
24333: ST_TO_ADDR
// if not depot then
24334: LD_VAR 0 1
24338: NOT
24339: IFFALSE 24343
// exit ;
24341: GO 24378
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24343: LD_VAR 0 1
24347: PUSH
24348: LD_INT 1
24350: ARRAY
24351: PPUSH
24352: CALL_OW 250
24356: PPUSH
24357: LD_VAR 0 1
24361: PUSH
24362: LD_INT 1
24364: ARRAY
24365: PPUSH
24366: CALL_OW 251
24370: PPUSH
24371: LD_INT 70
24373: PPUSH
24374: CALL_OW 495
// end ;
24378: PPOPN 1
24380: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24381: LD_EXP 61
24385: PUSH
24386: LD_EXP 95
24390: AND
24391: IFFALSE 24602
24393: GO 24395
24395: DISABLE
24396: LD_INT 0
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24403: LD_ADDR_VAR 0 5
24407: PUSH
24408: LD_INT 22
24410: PUSH
24411: LD_OWVAR 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 21
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PPUSH
24434: CALL_OW 69
24438: ST_TO_ADDR
// if not tmp then
24439: LD_VAR 0 5
24443: NOT
24444: IFFALSE 24448
// exit ;
24446: GO 24602
// for i in tmp do
24448: LD_ADDR_VAR 0 1
24452: PUSH
24453: LD_VAR 0 5
24457: PUSH
24458: FOR_IN
24459: IFFALSE 24600
// begin d := rand ( 0 , 5 ) ;
24461: LD_ADDR_VAR 0 4
24465: PUSH
24466: LD_INT 0
24468: PPUSH
24469: LD_INT 5
24471: PPUSH
24472: CALL_OW 12
24476: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24477: LD_ADDR_VAR 0 2
24481: PUSH
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 250
24491: PPUSH
24492: LD_VAR 0 4
24496: PPUSH
24497: LD_INT 3
24499: PPUSH
24500: LD_INT 12
24502: PPUSH
24503: CALL_OW 12
24507: PPUSH
24508: CALL_OW 272
24512: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24513: LD_ADDR_VAR 0 3
24517: PUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 251
24527: PPUSH
24528: LD_VAR 0 4
24532: PPUSH
24533: LD_INT 3
24535: PPUSH
24536: LD_INT 12
24538: PPUSH
24539: CALL_OW 12
24543: PPUSH
24544: CALL_OW 273
24548: ST_TO_ADDR
// if ValidHex ( x , y ) then
24549: LD_VAR 0 2
24553: PPUSH
24554: LD_VAR 0 3
24558: PPUSH
24559: CALL_OW 488
24563: IFFALSE 24598
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24565: LD_VAR 0 1
24569: PPUSH
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: LD_INT 3
24582: PPUSH
24583: LD_INT 6
24585: PPUSH
24586: CALL_OW 12
24590: PPUSH
24591: LD_INT 1
24593: PPUSH
24594: CALL_OW 483
// end ;
24598: GO 24458
24600: POP
24601: POP
// end ;
24602: PPOPN 5
24604: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24605: LD_EXP 61
24609: PUSH
24610: LD_EXP 96
24614: AND
24615: IFFALSE 24709
24617: GO 24619
24619: DISABLE
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24624: LD_ADDR_VAR 0 2
24628: PUSH
24629: LD_INT 22
24631: PUSH
24632: LD_OWVAR 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 32
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 21
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: PPUSH
24666: CALL_OW 69
24670: ST_TO_ADDR
// if not tmp then
24671: LD_VAR 0 2
24675: NOT
24676: IFFALSE 24680
// exit ;
24678: GO 24709
// for i in tmp do
24680: LD_ADDR_VAR 0 1
24684: PUSH
24685: LD_VAR 0 2
24689: PUSH
24690: FOR_IN
24691: IFFALSE 24707
// SetFuel ( i , 0 ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_INT 0
24700: PPUSH
24701: CALL_OW 240
24705: GO 24690
24707: POP
24708: POP
// end ;
24709: PPOPN 2
24711: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24712: LD_EXP 61
24716: PUSH
24717: LD_EXP 97
24721: AND
24722: IFFALSE 24788
24724: GO 24726
24726: DISABLE
24727: LD_INT 0
24729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24730: LD_ADDR_VAR 0 1
24734: PUSH
24735: LD_INT 22
24737: PUSH
24738: LD_OWVAR 2
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 30
24749: PUSH
24750: LD_INT 29
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PPUSH
24761: CALL_OW 69
24765: ST_TO_ADDR
// if not tmp then
24766: LD_VAR 0 1
24770: NOT
24771: IFFALSE 24775
// exit ;
24773: GO 24788
// DestroyUnit ( tmp [ 1 ] ) ;
24775: LD_VAR 0 1
24779: PUSH
24780: LD_INT 1
24782: ARRAY
24783: PPUSH
24784: CALL_OW 65
// end ;
24788: PPOPN 1
24790: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24791: LD_EXP 61
24795: PUSH
24796: LD_EXP 99
24800: AND
24801: IFFALSE 24930
24803: GO 24805
24805: DISABLE
24806: LD_INT 0
24808: PPUSH
// begin uc_side := 0 ;
24809: LD_ADDR_OWVAR 20
24813: PUSH
24814: LD_INT 0
24816: ST_TO_ADDR
// uc_nation := nation_arabian ;
24817: LD_ADDR_OWVAR 21
24821: PUSH
24822: LD_INT 2
24824: ST_TO_ADDR
// hc_gallery :=  ;
24825: LD_ADDR_OWVAR 33
24829: PUSH
24830: LD_STRING 
24832: ST_TO_ADDR
// hc_name :=  ;
24833: LD_ADDR_OWVAR 26
24837: PUSH
24838: LD_STRING 
24840: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24841: LD_INT 1
24843: PPUSH
24844: LD_INT 11
24846: PPUSH
24847: LD_INT 10
24849: PPUSH
24850: CALL_OW 380
// un := CreateHuman ;
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: CALL_OW 44
24863: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24864: LD_VAR 0 1
24868: PPUSH
24869: LD_INT 1
24871: PPUSH
24872: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24876: LD_INT 35
24878: PPUSH
24879: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24883: LD_VAR 0 1
24887: PPUSH
24888: LD_INT 22
24890: PUSH
24891: LD_OWVAR 2
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PPUSH
24900: CALL_OW 69
24904: PPUSH
24905: LD_VAR 0 1
24909: PPUSH
24910: CALL_OW 74
24914: PPUSH
24915: CALL_OW 115
// until IsDead ( un ) ;
24919: LD_VAR 0 1
24923: PPUSH
24924: CALL_OW 301
24928: IFFALSE 24876
// end ;
24930: PPOPN 1
24932: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24933: LD_EXP 61
24937: PUSH
24938: LD_EXP 101
24942: AND
24943: IFFALSE 24955
24945: GO 24947
24947: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24948: LD_STRING earthquake(getX(game), 0, 32)
24950: PPUSH
24951: CALL_OW 559
24955: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24956: LD_EXP 61
24960: PUSH
24961: LD_EXP 102
24965: AND
24966: IFFALSE 25057
24968: GO 24970
24970: DISABLE
24971: LD_INT 0
24973: PPUSH
// begin enable ;
24974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24975: LD_ADDR_VAR 0 1
24979: PUSH
24980: LD_INT 22
24982: PUSH
24983: LD_OWVAR 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 21
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 33
25004: PUSH
25005: LD_INT 3
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: PPUSH
25017: CALL_OW 69
25021: ST_TO_ADDR
// if not tmp then
25022: LD_VAR 0 1
25026: NOT
25027: IFFALSE 25031
// exit ;
25029: GO 25057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25031: LD_VAR 0 1
25035: PUSH
25036: LD_INT 1
25038: PPUSH
25039: LD_VAR 0 1
25043: PPUSH
25044: CALL_OW 12
25048: ARRAY
25049: PPUSH
25050: LD_INT 1
25052: PPUSH
25053: CALL_OW 234
// end ;
25057: PPOPN 1
25059: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25060: LD_EXP 61
25064: PUSH
25065: LD_EXP 103
25069: AND
25070: IFFALSE 25211
25072: GO 25074
25074: DISABLE
25075: LD_INT 0
25077: PPUSH
25078: PPUSH
25079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_INT 22
25087: PUSH
25088: LD_OWVAR 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 25
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 69
25115: ST_TO_ADDR
// if not tmp then
25116: LD_VAR 0 3
25120: NOT
25121: IFFALSE 25125
// exit ;
25123: GO 25211
// un := tmp [ rand ( 1 , tmp ) ] ;
25125: LD_ADDR_VAR 0 2
25129: PUSH
25130: LD_VAR 0 3
25134: PUSH
25135: LD_INT 1
25137: PPUSH
25138: LD_VAR 0 3
25142: PPUSH
25143: CALL_OW 12
25147: ARRAY
25148: ST_TO_ADDR
// if Crawls ( un ) then
25149: LD_VAR 0 2
25153: PPUSH
25154: CALL_OW 318
25158: IFFALSE 25169
// ComWalk ( un ) ;
25160: LD_VAR 0 2
25164: PPUSH
25165: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25169: LD_VAR 0 2
25173: PPUSH
25174: LD_INT 9
25176: PPUSH
25177: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25181: LD_INT 28
25183: PPUSH
25184: LD_OWVAR 2
25188: PPUSH
25189: LD_INT 2
25191: PPUSH
25192: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25196: LD_INT 29
25198: PPUSH
25199: LD_OWVAR 2
25203: PPUSH
25204: LD_INT 2
25206: PPUSH
25207: CALL_OW 322
// end ;
25211: PPOPN 3
25213: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25214: LD_EXP 61
25218: PUSH
25219: LD_EXP 104
25223: AND
25224: IFFALSE 25335
25226: GO 25228
25228: DISABLE
25229: LD_INT 0
25231: PPUSH
25232: PPUSH
25233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_INT 22
25241: PUSH
25242: LD_OWVAR 2
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 25
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PPUSH
25265: CALL_OW 69
25269: ST_TO_ADDR
// if not tmp then
25270: LD_VAR 0 3
25274: NOT
25275: IFFALSE 25279
// exit ;
25277: GO 25335
// un := tmp [ rand ( 1 , tmp ) ] ;
25279: LD_ADDR_VAR 0 2
25283: PUSH
25284: LD_VAR 0 3
25288: PUSH
25289: LD_INT 1
25291: PPUSH
25292: LD_VAR 0 3
25296: PPUSH
25297: CALL_OW 12
25301: ARRAY
25302: ST_TO_ADDR
// if Crawls ( un ) then
25303: LD_VAR 0 2
25307: PPUSH
25308: CALL_OW 318
25312: IFFALSE 25323
// ComWalk ( un ) ;
25314: LD_VAR 0 2
25318: PPUSH
25319: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25323: LD_VAR 0 2
25327: PPUSH
25328: LD_INT 8
25330: PPUSH
25331: CALL_OW 336
// end ;
25335: PPOPN 3
25337: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25338: LD_EXP 61
25342: PUSH
25343: LD_EXP 105
25347: AND
25348: IFFALSE 25492
25350: GO 25352
25352: DISABLE
25353: LD_INT 0
25355: PPUSH
25356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25357: LD_ADDR_VAR 0 2
25361: PUSH
25362: LD_INT 22
25364: PUSH
25365: LD_OWVAR 2
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 21
25376: PUSH
25377: LD_INT 2
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 34
25389: PUSH
25390: LD_INT 12
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 34
25399: PUSH
25400: LD_INT 51
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 34
25409: PUSH
25410: LD_INT 32
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: LIST
25427: PPUSH
25428: CALL_OW 69
25432: ST_TO_ADDR
// if not tmp then
25433: LD_VAR 0 2
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25492
// for i in tmp do
25442: LD_ADDR_VAR 0 1
25446: PUSH
25447: LD_VAR 0 2
25451: PUSH
25452: FOR_IN
25453: IFFALSE 25490
// if GetCargo ( i , mat_artifact ) = 0 then
25455: LD_VAR 0 1
25459: PPUSH
25460: LD_INT 4
25462: PPUSH
25463: CALL_OW 289
25467: PUSH
25468: LD_INT 0
25470: EQUAL
25471: IFFALSE 25488
// SetCargo ( i , mat_siberit , 100 ) ;
25473: LD_VAR 0 1
25477: PPUSH
25478: LD_INT 3
25480: PPUSH
25481: LD_INT 100
25483: PPUSH
25484: CALL_OW 290
25488: GO 25452
25490: POP
25491: POP
// end ;
25492: PPOPN 2
25494: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25495: LD_EXP 61
25499: PUSH
25500: LD_EXP 106
25504: AND
25505: IFFALSE 25688
25507: GO 25509
25509: DISABLE
25510: LD_INT 0
25512: PPUSH
25513: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25514: LD_ADDR_VAR 0 2
25518: PUSH
25519: LD_INT 22
25521: PUSH
25522: LD_OWVAR 2
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PPUSH
25531: CALL_OW 69
25535: ST_TO_ADDR
// if not tmp then
25536: LD_VAR 0 2
25540: NOT
25541: IFFALSE 25545
// exit ;
25543: GO 25688
// for i := 1 to 2 do
25545: LD_ADDR_VAR 0 1
25549: PUSH
25550: DOUBLE
25551: LD_INT 1
25553: DEC
25554: ST_TO_ADDR
25555: LD_INT 2
25557: PUSH
25558: FOR_TO
25559: IFFALSE 25686
// begin uc_side := your_side ;
25561: LD_ADDR_OWVAR 20
25565: PUSH
25566: LD_OWVAR 2
25570: ST_TO_ADDR
// uc_nation := nation_american ;
25571: LD_ADDR_OWVAR 21
25575: PUSH
25576: LD_INT 1
25578: ST_TO_ADDR
// vc_chassis := us_morphling ;
25579: LD_ADDR_OWVAR 37
25583: PUSH
25584: LD_INT 5
25586: ST_TO_ADDR
// vc_engine := engine_siberite ;
25587: LD_ADDR_OWVAR 39
25591: PUSH
25592: LD_INT 3
25594: ST_TO_ADDR
// vc_control := control_computer ;
25595: LD_ADDR_OWVAR 38
25599: PUSH
25600: LD_INT 3
25602: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25603: LD_ADDR_OWVAR 40
25607: PUSH
25608: LD_INT 10
25610: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25611: LD_VAR 0 2
25615: PUSH
25616: LD_INT 1
25618: ARRAY
25619: PPUSH
25620: CALL_OW 310
25624: NOT
25625: IFFALSE 25672
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25627: CALL_OW 45
25631: PPUSH
25632: LD_VAR 0 2
25636: PUSH
25637: LD_INT 1
25639: ARRAY
25640: PPUSH
25641: CALL_OW 250
25645: PPUSH
25646: LD_VAR 0 2
25650: PUSH
25651: LD_INT 1
25653: ARRAY
25654: PPUSH
25655: CALL_OW 251
25659: PPUSH
25660: LD_INT 12
25662: PPUSH
25663: LD_INT 1
25665: PPUSH
25666: CALL_OW 50
25670: GO 25684
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25672: CALL_OW 45
25676: PPUSH
25677: LD_INT 1
25679: PPUSH
25680: CALL_OW 51
// end ;
25684: GO 25558
25686: POP
25687: POP
// end ;
25688: PPOPN 2
25690: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25691: LD_EXP 61
25695: PUSH
25696: LD_EXP 107
25700: AND
25701: IFFALSE 25923
25703: GO 25705
25705: DISABLE
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25714: LD_ADDR_VAR 0 6
25718: PUSH
25719: LD_INT 22
25721: PUSH
25722: LD_OWVAR 2
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 21
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 3
25743: PUSH
25744: LD_INT 23
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: LIST
25762: PPUSH
25763: CALL_OW 69
25767: ST_TO_ADDR
// if not tmp then
25768: LD_VAR 0 6
25772: NOT
25773: IFFALSE 25777
// exit ;
25775: GO 25923
// s1 := rand ( 1 , 4 ) ;
25777: LD_ADDR_VAR 0 2
25781: PUSH
25782: LD_INT 1
25784: PPUSH
25785: LD_INT 4
25787: PPUSH
25788: CALL_OW 12
25792: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25793: LD_ADDR_VAR 0 4
25797: PUSH
25798: LD_VAR 0 6
25802: PUSH
25803: LD_INT 1
25805: ARRAY
25806: PPUSH
25807: LD_VAR 0 2
25811: PPUSH
25812: CALL_OW 259
25816: ST_TO_ADDR
// if s1 = 1 then
25817: LD_VAR 0 2
25821: PUSH
25822: LD_INT 1
25824: EQUAL
25825: IFFALSE 25845
// s2 := rand ( 2 , 4 ) else
25827: LD_ADDR_VAR 0 3
25831: PUSH
25832: LD_INT 2
25834: PPUSH
25835: LD_INT 4
25837: PPUSH
25838: CALL_OW 12
25842: ST_TO_ADDR
25843: GO 25853
// s2 := 1 ;
25845: LD_ADDR_VAR 0 3
25849: PUSH
25850: LD_INT 1
25852: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25853: LD_ADDR_VAR 0 5
25857: PUSH
25858: LD_VAR 0 6
25862: PUSH
25863: LD_INT 1
25865: ARRAY
25866: PPUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: CALL_OW 259
25876: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25877: LD_VAR 0 6
25881: PUSH
25882: LD_INT 1
25884: ARRAY
25885: PPUSH
25886: LD_VAR 0 2
25890: PPUSH
25891: LD_VAR 0 5
25895: PPUSH
25896: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25900: LD_VAR 0 6
25904: PUSH
25905: LD_INT 1
25907: ARRAY
25908: PPUSH
25909: LD_VAR 0 3
25913: PPUSH
25914: LD_VAR 0 4
25918: PPUSH
25919: CALL_OW 237
// end ;
25923: PPOPN 6
25925: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25926: LD_EXP 61
25930: PUSH
25931: LD_EXP 108
25935: AND
25936: IFFALSE 26015
25938: GO 25940
25940: DISABLE
25941: LD_INT 0
25943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25944: LD_ADDR_VAR 0 1
25948: PUSH
25949: LD_INT 22
25951: PUSH
25952: LD_OWVAR 2
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 30
25963: PUSH
25964: LD_INT 3
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PPUSH
25975: CALL_OW 69
25979: ST_TO_ADDR
// if not tmp then
25980: LD_VAR 0 1
25984: NOT
25985: IFFALSE 25989
// exit ;
25987: GO 26015
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25989: LD_VAR 0 1
25993: PUSH
25994: LD_INT 1
25996: PPUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 12
26006: ARRAY
26007: PPUSH
26008: LD_INT 1
26010: PPUSH
26011: CALL_OW 234
// end ;
26015: PPOPN 1
26017: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26018: LD_EXP 61
26022: PUSH
26023: LD_EXP 109
26027: AND
26028: IFFALSE 26140
26030: GO 26032
26032: DISABLE
26033: LD_INT 0
26035: PPUSH
26036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26037: LD_ADDR_VAR 0 2
26041: PUSH
26042: LD_INT 22
26044: PUSH
26045: LD_OWVAR 2
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: LD_INT 30
26059: PUSH
26060: LD_INT 27
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 30
26069: PUSH
26070: LD_INT 26
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 30
26079: PUSH
26080: LD_INT 28
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PPUSH
26097: CALL_OW 69
26101: ST_TO_ADDR
// if not tmp then
26102: LD_VAR 0 2
26106: NOT
26107: IFFALSE 26111
// exit ;
26109: GO 26140
// for i in tmp do
26111: LD_ADDR_VAR 0 1
26115: PUSH
26116: LD_VAR 0 2
26120: PUSH
26121: FOR_IN
26122: IFFALSE 26138
// SetLives ( i , 1 ) ;
26124: LD_VAR 0 1
26128: PPUSH
26129: LD_INT 1
26131: PPUSH
26132: CALL_OW 234
26136: GO 26121
26138: POP
26139: POP
// end ;
26140: PPOPN 2
26142: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26143: LD_EXP 61
26147: PUSH
26148: LD_EXP 110
26152: AND
26153: IFFALSE 26440
26155: GO 26157
26157: DISABLE
26158: LD_INT 0
26160: PPUSH
26161: PPUSH
26162: PPUSH
// begin i := rand ( 1 , 7 ) ;
26163: LD_ADDR_VAR 0 1
26167: PUSH
26168: LD_INT 1
26170: PPUSH
26171: LD_INT 7
26173: PPUSH
26174: CALL_OW 12
26178: ST_TO_ADDR
// case i of 1 :
26179: LD_VAR 0 1
26183: PUSH
26184: LD_INT 1
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26202
26192: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26193: LD_STRING earthquake(getX(game), 0, 32)
26195: PPUSH
26196: CALL_OW 559
26200: GO 26440
26202: LD_INT 2
26204: DOUBLE
26205: EQUAL
26206: IFTRUE 26210
26208: GO 26224
26210: POP
// begin ToLua ( displayStucuk(); ) ;
26211: LD_STRING displayStucuk();
26213: PPUSH
26214: CALL_OW 559
// ResetFog ;
26218: CALL_OW 335
// end ; 3 :
26222: GO 26440
26224: LD_INT 3
26226: DOUBLE
26227: EQUAL
26228: IFTRUE 26232
26230: GO 26336
26232: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26233: LD_ADDR_VAR 0 2
26237: PUSH
26238: LD_INT 22
26240: PUSH
26241: LD_OWVAR 2
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 25
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PPUSH
26264: CALL_OW 69
26268: ST_TO_ADDR
// if not tmp then
26269: LD_VAR 0 2
26273: NOT
26274: IFFALSE 26278
// exit ;
26276: GO 26440
// un := tmp [ rand ( 1 , tmp ) ] ;
26278: LD_ADDR_VAR 0 3
26282: PUSH
26283: LD_VAR 0 2
26287: PUSH
26288: LD_INT 1
26290: PPUSH
26291: LD_VAR 0 2
26295: PPUSH
26296: CALL_OW 12
26300: ARRAY
26301: ST_TO_ADDR
// if Crawls ( un ) then
26302: LD_VAR 0 3
26306: PPUSH
26307: CALL_OW 318
26311: IFFALSE 26322
// ComWalk ( un ) ;
26313: LD_VAR 0 3
26317: PPUSH
26318: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26322: LD_VAR 0 3
26326: PPUSH
26327: LD_INT 8
26329: PPUSH
26330: CALL_OW 336
// end ; 4 :
26334: GO 26440
26336: LD_INT 4
26338: DOUBLE
26339: EQUAL
26340: IFTRUE 26344
26342: GO 26418
26344: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26345: LD_ADDR_VAR 0 2
26349: PUSH
26350: LD_INT 22
26352: PUSH
26353: LD_OWVAR 2
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 30
26364: PUSH
26365: LD_INT 29
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PPUSH
26376: CALL_OW 69
26380: ST_TO_ADDR
// if not tmp then
26381: LD_VAR 0 2
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26440
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26390: LD_VAR 0 2
26394: PUSH
26395: LD_INT 1
26397: ARRAY
26398: PPUSH
26399: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26403: LD_VAR 0 2
26407: PUSH
26408: LD_INT 1
26410: ARRAY
26411: PPUSH
26412: CALL_OW 65
// end ; 5 .. 7 :
26416: GO 26440
26418: LD_INT 5
26420: DOUBLE
26421: GREATEREQUAL
26422: IFFALSE 26430
26424: LD_INT 7
26426: DOUBLE
26427: LESSEQUAL
26428: IFTRUE 26432
26430: GO 26439
26432: POP
// StreamSibBomb ; end ;
26433: CALL 22677 0 0
26437: GO 26440
26439: POP
// end ;
26440: PPOPN 3
26442: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26443: LD_EXP 61
26447: PUSH
26448: LD_EXP 111
26452: AND
26453: IFFALSE 26609
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
26462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26463: LD_ADDR_VAR 0 2
26467: PUSH
26468: LD_INT 81
26470: PUSH
26471: LD_OWVAR 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 21
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PPUSH
26512: CALL_OW 69
26516: ST_TO_ADDR
// if not tmp then
26517: LD_VAR 0 2
26521: NOT
26522: IFFALSE 26526
// exit ;
26524: GO 26609
// p := 0 ;
26526: LD_ADDR_VAR 0 3
26530: PUSH
26531: LD_INT 0
26533: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26534: LD_INT 35
26536: PPUSH
26537: CALL_OW 67
// p := p + 1 ;
26541: LD_ADDR_VAR 0 3
26545: PUSH
26546: LD_VAR 0 3
26550: PUSH
26551: LD_INT 1
26553: PLUS
26554: ST_TO_ADDR
// for i in tmp do
26555: LD_ADDR_VAR 0 1
26559: PUSH
26560: LD_VAR 0 2
26564: PUSH
26565: FOR_IN
26566: IFFALSE 26597
// if GetLives ( i ) < 1000 then
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL_OW 256
26577: PUSH
26578: LD_INT 1000
26580: LESS
26581: IFFALSE 26595
// SetLives ( i , 1000 ) ;
26583: LD_VAR 0 1
26587: PPUSH
26588: LD_INT 1000
26590: PPUSH
26591: CALL_OW 234
26595: GO 26565
26597: POP
26598: POP
// until p > 20 ;
26599: LD_VAR 0 3
26603: PUSH
26604: LD_INT 20
26606: GREATER
26607: IFFALSE 26534
// end ;
26609: PPOPN 3
26611: END
// every 0 0$1 trigger StreamModeActive and sTime do
26612: LD_EXP 61
26616: PUSH
26617: LD_EXP 112
26621: AND
26622: IFFALSE 26657
26624: GO 26626
26626: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26627: LD_INT 28
26629: PPUSH
26630: LD_OWVAR 2
26634: PPUSH
26635: LD_INT 2
26637: PPUSH
26638: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26642: LD_INT 30
26644: PPUSH
26645: LD_OWVAR 2
26649: PPUSH
26650: LD_INT 2
26652: PPUSH
26653: CALL_OW 322
// end ;
26657: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26658: LD_EXP 61
26662: PUSH
26663: LD_EXP 113
26667: AND
26668: IFFALSE 26789
26670: GO 26672
26672: DISABLE
26673: LD_INT 0
26675: PPUSH
26676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26677: LD_ADDR_VAR 0 2
26681: PUSH
26682: LD_INT 22
26684: PUSH
26685: LD_OWVAR 2
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 21
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 3
26706: PUSH
26707: LD_INT 23
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: PPUSH
26726: CALL_OW 69
26730: ST_TO_ADDR
// if not tmp then
26731: LD_VAR 0 2
26735: NOT
26736: IFFALSE 26740
// exit ;
26738: GO 26789
// for i in tmp do
26740: LD_ADDR_VAR 0 1
26744: PUSH
26745: LD_VAR 0 2
26749: PUSH
26750: FOR_IN
26751: IFFALSE 26787
// begin if Crawls ( i ) then
26753: LD_VAR 0 1
26757: PPUSH
26758: CALL_OW 318
26762: IFFALSE 26773
// ComWalk ( i ) ;
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL_OW 138
// SetClass ( i , 2 ) ;
26773: LD_VAR 0 1
26777: PPUSH
26778: LD_INT 2
26780: PPUSH
26781: CALL_OW 336
// end ;
26785: GO 26750
26787: POP
26788: POP
// end ;
26789: PPOPN 2
26791: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26792: LD_EXP 61
26796: PUSH
26797: LD_EXP 114
26801: AND
26802: IFFALSE 27090
26804: GO 26806
26806: DISABLE
26807: LD_INT 0
26809: PPUSH
26810: PPUSH
26811: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26812: LD_OWVAR 2
26816: PPUSH
26817: LD_INT 9
26819: PPUSH
26820: LD_INT 1
26822: PPUSH
26823: LD_INT 1
26825: PPUSH
26826: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26830: LD_INT 9
26832: PPUSH
26833: LD_OWVAR 2
26837: PPUSH
26838: CALL_OW 343
// uc_side := 9 ;
26842: LD_ADDR_OWVAR 20
26846: PUSH
26847: LD_INT 9
26849: ST_TO_ADDR
// uc_nation := 2 ;
26850: LD_ADDR_OWVAR 21
26854: PUSH
26855: LD_INT 2
26857: ST_TO_ADDR
// hc_name := Dark Warrior ;
26858: LD_ADDR_OWVAR 26
26862: PUSH
26863: LD_STRING Dark Warrior
26865: ST_TO_ADDR
// hc_gallery :=  ;
26866: LD_ADDR_OWVAR 33
26870: PUSH
26871: LD_STRING 
26873: ST_TO_ADDR
// hc_noskilllimit := true ;
26874: LD_ADDR_OWVAR 76
26878: PUSH
26879: LD_INT 1
26881: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26882: LD_ADDR_OWVAR 31
26886: PUSH
26887: LD_INT 30
26889: PUSH
26890: LD_INT 30
26892: PUSH
26893: LD_INT 30
26895: PUSH
26896: LD_INT 30
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: ST_TO_ADDR
// un := CreateHuman ;
26905: LD_ADDR_VAR 0 3
26909: PUSH
26910: CALL_OW 44
26914: ST_TO_ADDR
// hc_noskilllimit := false ;
26915: LD_ADDR_OWVAR 76
26919: PUSH
26920: LD_INT 0
26922: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26923: LD_VAR 0 3
26927: PPUSH
26928: LD_INT 1
26930: PPUSH
26931: CALL_OW 51
// ToLua ( playRanger() ) ;
26935: LD_STRING playRanger()
26937: PPUSH
26938: CALL_OW 559
// p := 0 ;
26942: LD_ADDR_VAR 0 2
26946: PUSH
26947: LD_INT 0
26949: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26950: LD_INT 35
26952: PPUSH
26953: CALL_OW 67
// p := p + 1 ;
26957: LD_ADDR_VAR 0 2
26961: PUSH
26962: LD_VAR 0 2
26966: PUSH
26967: LD_INT 1
26969: PLUS
26970: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26971: LD_VAR 0 3
26975: PPUSH
26976: CALL_OW 256
26980: PUSH
26981: LD_INT 1000
26983: LESS
26984: IFFALSE 26998
// SetLives ( un , 1000 ) ;
26986: LD_VAR 0 3
26990: PPUSH
26991: LD_INT 1000
26993: PPUSH
26994: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26998: LD_VAR 0 3
27002: PPUSH
27003: LD_INT 81
27005: PUSH
27006: LD_OWVAR 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 91
27017: PUSH
27018: LD_VAR 0 3
27022: PUSH
27023: LD_INT 30
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PPUSH
27035: CALL_OW 69
27039: PPUSH
27040: LD_VAR 0 3
27044: PPUSH
27045: CALL_OW 74
27049: PPUSH
27050: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27054: LD_VAR 0 2
27058: PUSH
27059: LD_INT 80
27061: GREATER
27062: PUSH
27063: LD_VAR 0 3
27067: PPUSH
27068: CALL_OW 301
27072: OR
27073: IFFALSE 26950
// if un then
27075: LD_VAR 0 3
27079: IFFALSE 27090
// RemoveUnit ( un ) ;
27081: LD_VAR 0 3
27085: PPUSH
27086: CALL_OW 64
// end ;
27090: PPOPN 3
27092: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27093: LD_EXP 115
27097: IFFALSE 27213
27099: GO 27101
27101: DISABLE
27102: LD_INT 0
27104: PPUSH
27105: PPUSH
27106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27107: LD_ADDR_VAR 0 2
27111: PUSH
27112: LD_INT 81
27114: PUSH
27115: LD_OWVAR 2
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 21
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PPUSH
27138: CALL_OW 69
27142: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27143: LD_STRING playComputer()
27145: PPUSH
27146: CALL_OW 559
// if not tmp then
27150: LD_VAR 0 2
27154: NOT
27155: IFFALSE 27159
// exit ;
27157: GO 27213
// for i in tmp do
27159: LD_ADDR_VAR 0 1
27163: PUSH
27164: LD_VAR 0 2
27168: PUSH
27169: FOR_IN
27170: IFFALSE 27211
// for j := 1 to 4 do
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: DOUBLE
27178: LD_INT 1
27180: DEC
27181: ST_TO_ADDR
27182: LD_INT 4
27184: PUSH
27185: FOR_TO
27186: IFFALSE 27207
// SetSkill ( i , j , 10 ) ;
27188: LD_VAR 0 1
27192: PPUSH
27193: LD_VAR 0 3
27197: PPUSH
27198: LD_INT 10
27200: PPUSH
27201: CALL_OW 237
27205: GO 27185
27207: POP
27208: POP
27209: GO 27169
27211: POP
27212: POP
// end ;
27213: PPOPN 3
27215: END
// every 0 0$1 trigger s30 do var i , tmp ;
27216: LD_EXP 116
27220: IFFALSE 27289
27222: GO 27224
27224: DISABLE
27225: LD_INT 0
27227: PPUSH
27228: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27229: LD_ADDR_VAR 0 2
27233: PUSH
27234: LD_INT 22
27236: PUSH
27237: LD_OWVAR 2
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PPUSH
27246: CALL_OW 69
27250: ST_TO_ADDR
// if not tmp then
27251: LD_VAR 0 2
27255: NOT
27256: IFFALSE 27260
// exit ;
27258: GO 27289
// for i in tmp do
27260: LD_ADDR_VAR 0 1
27264: PUSH
27265: LD_VAR 0 2
27269: PUSH
27270: FOR_IN
27271: IFFALSE 27287
// SetLives ( i , 300 ) ;
27273: LD_VAR 0 1
27277: PPUSH
27278: LD_INT 300
27280: PPUSH
27281: CALL_OW 234
27285: GO 27270
27287: POP
27288: POP
// end ;
27289: PPOPN 2
27291: END
// every 0 0$1 trigger s60 do var i , tmp ;
27292: LD_EXP 117
27296: IFFALSE 27365
27298: GO 27300
27300: DISABLE
27301: LD_INT 0
27303: PPUSH
27304: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: LD_INT 22
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PPUSH
27322: CALL_OW 69
27326: ST_TO_ADDR
// if not tmp then
27327: LD_VAR 0 2
27331: NOT
27332: IFFALSE 27336
// exit ;
27334: GO 27365
// for i in tmp do
27336: LD_ADDR_VAR 0 1
27340: PUSH
27341: LD_VAR 0 2
27345: PUSH
27346: FOR_IN
27347: IFFALSE 27363
// SetLives ( i , 600 ) ;
27349: LD_VAR 0 1
27353: PPUSH
27354: LD_INT 600
27356: PPUSH
27357: CALL_OW 234
27361: GO 27346
27363: POP
27364: POP
// end ;
27365: PPOPN 2
27367: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27368: LD_INT 0
27370: PPUSH
// case cmd of 301 :
27371: LD_VAR 0 1
27375: PUSH
27376: LD_INT 301
27378: DOUBLE
27379: EQUAL
27380: IFTRUE 27384
27382: GO 27416
27384: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27385: LD_VAR 0 6
27389: PPUSH
27390: LD_VAR 0 7
27394: PPUSH
27395: LD_VAR 0 8
27399: PPUSH
27400: LD_VAR 0 4
27404: PPUSH
27405: LD_VAR 0 5
27409: PPUSH
27410: CALL 28617 0 5
27414: GO 27537
27416: LD_INT 302
27418: DOUBLE
27419: EQUAL
27420: IFTRUE 27424
27422: GO 27461
27424: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27425: LD_VAR 0 6
27429: PPUSH
27430: LD_VAR 0 7
27434: PPUSH
27435: LD_VAR 0 8
27439: PPUSH
27440: LD_VAR 0 9
27444: PPUSH
27445: LD_VAR 0 4
27449: PPUSH
27450: LD_VAR 0 5
27454: PPUSH
27455: CALL 28708 0 6
27459: GO 27537
27461: LD_INT 303
27463: DOUBLE
27464: EQUAL
27465: IFTRUE 27469
27467: GO 27506
27469: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27470: LD_VAR 0 6
27474: PPUSH
27475: LD_VAR 0 7
27479: PPUSH
27480: LD_VAR 0 8
27484: PPUSH
27485: LD_VAR 0 9
27489: PPUSH
27490: LD_VAR 0 4
27494: PPUSH
27495: LD_VAR 0 5
27499: PPUSH
27500: CALL 27542 0 6
27504: GO 27537
27506: LD_INT 304
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27536
27514: POP
// hHackTeleport ( unit , x , y ) ; end ;
27515: LD_VAR 0 2
27519: PPUSH
27520: LD_VAR 0 4
27524: PPUSH
27525: LD_VAR 0 5
27529: PPUSH
27530: CALL 29301 0 3
27534: GO 27537
27536: POP
// end ;
27537: LD_VAR 0 12
27541: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27542: LD_INT 0
27544: PPUSH
27545: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27546: LD_VAR 0 1
27550: PUSH
27551: LD_INT 1
27553: LESS
27554: PUSH
27555: LD_VAR 0 1
27559: PUSH
27560: LD_INT 3
27562: GREATER
27563: OR
27564: PUSH
27565: LD_VAR 0 5
27569: PPUSH
27570: LD_VAR 0 6
27574: PPUSH
27575: CALL_OW 428
27579: OR
27580: IFFALSE 27584
// exit ;
27582: GO 28304
// uc_side := your_side ;
27584: LD_ADDR_OWVAR 20
27588: PUSH
27589: LD_OWVAR 2
27593: ST_TO_ADDR
// uc_nation := nation ;
27594: LD_ADDR_OWVAR 21
27598: PUSH
27599: LD_VAR 0 1
27603: ST_TO_ADDR
// bc_level = 1 ;
27604: LD_ADDR_OWVAR 43
27608: PUSH
27609: LD_INT 1
27611: ST_TO_ADDR
// case btype of 1 :
27612: LD_VAR 0 2
27616: PUSH
27617: LD_INT 1
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27636
27625: POP
// bc_type := b_depot ; 2 :
27626: LD_ADDR_OWVAR 42
27630: PUSH
27631: LD_INT 0
27633: ST_TO_ADDR
27634: GO 28248
27636: LD_INT 2
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27655
27644: POP
// bc_type := b_warehouse ; 3 :
27645: LD_ADDR_OWVAR 42
27649: PUSH
27650: LD_INT 1
27652: ST_TO_ADDR
27653: GO 28248
27655: LD_INT 3
27657: DOUBLE
27658: EQUAL
27659: IFTRUE 27663
27661: GO 27674
27663: POP
// bc_type := b_lab ; 4 .. 9 :
27664: LD_ADDR_OWVAR 42
27668: PUSH
27669: LD_INT 6
27671: ST_TO_ADDR
27672: GO 28248
27674: LD_INT 4
27676: DOUBLE
27677: GREATEREQUAL
27678: IFFALSE 27686
27680: LD_INT 9
27682: DOUBLE
27683: LESSEQUAL
27684: IFTRUE 27688
27686: GO 27740
27688: POP
// begin bc_type := b_lab_half ;
27689: LD_ADDR_OWVAR 42
27693: PUSH
27694: LD_INT 7
27696: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27697: LD_ADDR_OWVAR 44
27701: PUSH
27702: LD_INT 10
27704: PUSH
27705: LD_INT 11
27707: PUSH
27708: LD_INT 12
27710: PUSH
27711: LD_INT 15
27713: PUSH
27714: LD_INT 14
27716: PUSH
27717: LD_INT 13
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: PUSH
27728: LD_VAR 0 2
27732: PUSH
27733: LD_INT 3
27735: MINUS
27736: ARRAY
27737: ST_TO_ADDR
// end ; 10 .. 13 :
27738: GO 28248
27740: LD_INT 10
27742: DOUBLE
27743: GREATEREQUAL
27744: IFFALSE 27752
27746: LD_INT 13
27748: DOUBLE
27749: LESSEQUAL
27750: IFTRUE 27754
27752: GO 27831
27754: POP
// begin bc_type := b_lab_full ;
27755: LD_ADDR_OWVAR 42
27759: PUSH
27760: LD_INT 8
27762: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27763: LD_ADDR_OWVAR 44
27767: PUSH
27768: LD_INT 10
27770: PUSH
27771: LD_INT 12
27773: PUSH
27774: LD_INT 14
27776: PUSH
27777: LD_INT 13
27779: PUSH
27780: EMPTY
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: PUSH
27786: LD_VAR 0 2
27790: PUSH
27791: LD_INT 9
27793: MINUS
27794: ARRAY
27795: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27796: LD_ADDR_OWVAR 45
27800: PUSH
27801: LD_INT 11
27803: PUSH
27804: LD_INT 15
27806: PUSH
27807: LD_INT 12
27809: PUSH
27810: LD_INT 15
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: PUSH
27819: LD_VAR 0 2
27823: PUSH
27824: LD_INT 9
27826: MINUS
27827: ARRAY
27828: ST_TO_ADDR
// end ; 14 :
27829: GO 28248
27831: LD_INT 14
27833: DOUBLE
27834: EQUAL
27835: IFTRUE 27839
27837: GO 27850
27839: POP
// bc_type := b_workshop ; 15 :
27840: LD_ADDR_OWVAR 42
27844: PUSH
27845: LD_INT 2
27847: ST_TO_ADDR
27848: GO 28248
27850: LD_INT 15
27852: DOUBLE
27853: EQUAL
27854: IFTRUE 27858
27856: GO 27869
27858: POP
// bc_type := b_factory ; 16 :
27859: LD_ADDR_OWVAR 42
27863: PUSH
27864: LD_INT 3
27866: ST_TO_ADDR
27867: GO 28248
27869: LD_INT 16
27871: DOUBLE
27872: EQUAL
27873: IFTRUE 27877
27875: GO 27888
27877: POP
// bc_type := b_ext_gun ; 17 :
27878: LD_ADDR_OWVAR 42
27882: PUSH
27883: LD_INT 17
27885: ST_TO_ADDR
27886: GO 28248
27888: LD_INT 17
27890: DOUBLE
27891: EQUAL
27892: IFTRUE 27896
27894: GO 27924
27896: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27897: LD_ADDR_OWVAR 42
27901: PUSH
27902: LD_INT 19
27904: PUSH
27905: LD_INT 23
27907: PUSH
27908: LD_INT 19
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: LIST
27915: PUSH
27916: LD_VAR 0 1
27920: ARRAY
27921: ST_TO_ADDR
27922: GO 28248
27924: LD_INT 18
27926: DOUBLE
27927: EQUAL
27928: IFTRUE 27932
27930: GO 27943
27932: POP
// bc_type := b_ext_radar ; 19 :
27933: LD_ADDR_OWVAR 42
27937: PUSH
27938: LD_INT 20
27940: ST_TO_ADDR
27941: GO 28248
27943: LD_INT 19
27945: DOUBLE
27946: EQUAL
27947: IFTRUE 27951
27949: GO 27962
27951: POP
// bc_type := b_ext_radio ; 20 :
27952: LD_ADDR_OWVAR 42
27956: PUSH
27957: LD_INT 22
27959: ST_TO_ADDR
27960: GO 28248
27962: LD_INT 20
27964: DOUBLE
27965: EQUAL
27966: IFTRUE 27970
27968: GO 27981
27970: POP
// bc_type := b_ext_siberium ; 21 :
27971: LD_ADDR_OWVAR 42
27975: PUSH
27976: LD_INT 21
27978: ST_TO_ADDR
27979: GO 28248
27981: LD_INT 21
27983: DOUBLE
27984: EQUAL
27985: IFTRUE 27989
27987: GO 28000
27989: POP
// bc_type := b_ext_computer ; 22 :
27990: LD_ADDR_OWVAR 42
27994: PUSH
27995: LD_INT 24
27997: ST_TO_ADDR
27998: GO 28248
28000: LD_INT 22
28002: DOUBLE
28003: EQUAL
28004: IFTRUE 28008
28006: GO 28019
28008: POP
// bc_type := b_ext_track ; 23 :
28009: LD_ADDR_OWVAR 42
28013: PUSH
28014: LD_INT 16
28016: ST_TO_ADDR
28017: GO 28248
28019: LD_INT 23
28021: DOUBLE
28022: EQUAL
28023: IFTRUE 28027
28025: GO 28038
28027: POP
// bc_type := b_ext_laser ; 24 :
28028: LD_ADDR_OWVAR 42
28032: PUSH
28033: LD_INT 25
28035: ST_TO_ADDR
28036: GO 28248
28038: LD_INT 24
28040: DOUBLE
28041: EQUAL
28042: IFTRUE 28046
28044: GO 28057
28046: POP
// bc_type := b_control_tower ; 25 :
28047: LD_ADDR_OWVAR 42
28051: PUSH
28052: LD_INT 36
28054: ST_TO_ADDR
28055: GO 28248
28057: LD_INT 25
28059: DOUBLE
28060: EQUAL
28061: IFTRUE 28065
28063: GO 28076
28065: POP
// bc_type := b_breastwork ; 26 :
28066: LD_ADDR_OWVAR 42
28070: PUSH
28071: LD_INT 31
28073: ST_TO_ADDR
28074: GO 28248
28076: LD_INT 26
28078: DOUBLE
28079: EQUAL
28080: IFTRUE 28084
28082: GO 28095
28084: POP
// bc_type := b_bunker ; 27 :
28085: LD_ADDR_OWVAR 42
28089: PUSH
28090: LD_INT 32
28092: ST_TO_ADDR
28093: GO 28248
28095: LD_INT 27
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28103
28101: GO 28114
28103: POP
// bc_type := b_turret ; 28 :
28104: LD_ADDR_OWVAR 42
28108: PUSH
28109: LD_INT 33
28111: ST_TO_ADDR
28112: GO 28248
28114: LD_INT 28
28116: DOUBLE
28117: EQUAL
28118: IFTRUE 28122
28120: GO 28133
28122: POP
// bc_type := b_armoury ; 29 :
28123: LD_ADDR_OWVAR 42
28127: PUSH
28128: LD_INT 4
28130: ST_TO_ADDR
28131: GO 28248
28133: LD_INT 29
28135: DOUBLE
28136: EQUAL
28137: IFTRUE 28141
28139: GO 28152
28141: POP
// bc_type := b_barracks ; 30 :
28142: LD_ADDR_OWVAR 42
28146: PUSH
28147: LD_INT 5
28149: ST_TO_ADDR
28150: GO 28248
28152: LD_INT 30
28154: DOUBLE
28155: EQUAL
28156: IFTRUE 28160
28158: GO 28171
28160: POP
// bc_type := b_solar_power ; 31 :
28161: LD_ADDR_OWVAR 42
28165: PUSH
28166: LD_INT 27
28168: ST_TO_ADDR
28169: GO 28248
28171: LD_INT 31
28173: DOUBLE
28174: EQUAL
28175: IFTRUE 28179
28177: GO 28190
28179: POP
// bc_type := b_oil_power ; 32 :
28180: LD_ADDR_OWVAR 42
28184: PUSH
28185: LD_INT 26
28187: ST_TO_ADDR
28188: GO 28248
28190: LD_INT 32
28192: DOUBLE
28193: EQUAL
28194: IFTRUE 28198
28196: GO 28209
28198: POP
// bc_type := b_siberite_power ; 33 :
28199: LD_ADDR_OWVAR 42
28203: PUSH
28204: LD_INT 28
28206: ST_TO_ADDR
28207: GO 28248
28209: LD_INT 33
28211: DOUBLE
28212: EQUAL
28213: IFTRUE 28217
28215: GO 28228
28217: POP
// bc_type := b_oil_mine ; 34 :
28218: LD_ADDR_OWVAR 42
28222: PUSH
28223: LD_INT 29
28225: ST_TO_ADDR
28226: GO 28248
28228: LD_INT 34
28230: DOUBLE
28231: EQUAL
28232: IFTRUE 28236
28234: GO 28247
28236: POP
// bc_type := b_siberite_mine ; end ;
28237: LD_ADDR_OWVAR 42
28241: PUSH
28242: LD_INT 30
28244: ST_TO_ADDR
28245: GO 28248
28247: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28248: LD_ADDR_VAR 0 8
28252: PUSH
28253: LD_VAR 0 5
28257: PPUSH
28258: LD_VAR 0 6
28262: PPUSH
28263: LD_VAR 0 3
28267: PPUSH
28268: CALL_OW 47
28272: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28273: LD_OWVAR 42
28277: PUSH
28278: LD_INT 32
28280: PUSH
28281: LD_INT 33
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: IN
28288: IFFALSE 28304
// PlaceWeaponTurret ( b , weapon ) ;
28290: LD_VAR 0 8
28294: PPUSH
28295: LD_VAR 0 4
28299: PPUSH
28300: CALL_OW 431
// end ;
28304: LD_VAR 0 7
28308: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28309: LD_INT 0
28311: PPUSH
28312: PPUSH
28313: PPUSH
28314: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28315: LD_ADDR_VAR 0 4
28319: PUSH
28320: LD_INT 22
28322: PUSH
28323: LD_OWVAR 2
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 2
28334: PUSH
28335: LD_INT 30
28337: PUSH
28338: LD_INT 0
28340: PUSH
28341: EMPTY
28342: LIST
28343: LIST
28344: PUSH
28345: LD_INT 30
28347: PUSH
28348: LD_INT 1
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PUSH
28355: EMPTY
28356: LIST
28357: LIST
28358: LIST
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PPUSH
28364: CALL_OW 69
28368: ST_TO_ADDR
// if not tmp then
28369: LD_VAR 0 4
28373: NOT
28374: IFFALSE 28378
// exit ;
28376: GO 28437
// for i in tmp do
28378: LD_ADDR_VAR 0 2
28382: PUSH
28383: LD_VAR 0 4
28387: PUSH
28388: FOR_IN
28389: IFFALSE 28435
// for j = 1 to 3 do
28391: LD_ADDR_VAR 0 3
28395: PUSH
28396: DOUBLE
28397: LD_INT 1
28399: DEC
28400: ST_TO_ADDR
28401: LD_INT 3
28403: PUSH
28404: FOR_TO
28405: IFFALSE 28431
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28407: LD_VAR 0 2
28411: PPUSH
28412: CALL_OW 274
28416: PPUSH
28417: LD_VAR 0 3
28421: PPUSH
28422: LD_INT 99999
28424: PPUSH
28425: CALL_OW 277
28429: GO 28404
28431: POP
28432: POP
28433: GO 28388
28435: POP
28436: POP
// end ;
28437: LD_VAR 0 1
28441: RET
// export function hHackSetLevel10 ; var i , j ; begin
28442: LD_INT 0
28444: PPUSH
28445: PPUSH
28446: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28447: LD_ADDR_VAR 0 2
28451: PUSH
28452: LD_INT 21
28454: PUSH
28455: LD_INT 1
28457: PUSH
28458: EMPTY
28459: LIST
28460: LIST
28461: PPUSH
28462: CALL_OW 69
28466: PUSH
28467: FOR_IN
28468: IFFALSE 28520
// if IsSelected ( i ) then
28470: LD_VAR 0 2
28474: PPUSH
28475: CALL_OW 306
28479: IFFALSE 28518
// begin for j := 1 to 4 do
28481: LD_ADDR_VAR 0 3
28485: PUSH
28486: DOUBLE
28487: LD_INT 1
28489: DEC
28490: ST_TO_ADDR
28491: LD_INT 4
28493: PUSH
28494: FOR_TO
28495: IFFALSE 28516
// SetSkill ( i , j , 10 ) ;
28497: LD_VAR 0 2
28501: PPUSH
28502: LD_VAR 0 3
28506: PPUSH
28507: LD_INT 10
28509: PPUSH
28510: CALL_OW 237
28514: GO 28494
28516: POP
28517: POP
// end ;
28518: GO 28467
28520: POP
28521: POP
// end ;
28522: LD_VAR 0 1
28526: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28527: LD_INT 0
28529: PPUSH
28530: PPUSH
28531: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28532: LD_ADDR_VAR 0 2
28536: PUSH
28537: LD_INT 22
28539: PUSH
28540: LD_OWVAR 2
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: PUSH
28549: LD_INT 21
28551: PUSH
28552: LD_INT 1
28554: PUSH
28555: EMPTY
28556: LIST
28557: LIST
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PPUSH
28563: CALL_OW 69
28567: PUSH
28568: FOR_IN
28569: IFFALSE 28610
// begin for j := 1 to 4 do
28571: LD_ADDR_VAR 0 3
28575: PUSH
28576: DOUBLE
28577: LD_INT 1
28579: DEC
28580: ST_TO_ADDR
28581: LD_INT 4
28583: PUSH
28584: FOR_TO
28585: IFFALSE 28606
// SetSkill ( i , j , 10 ) ;
28587: LD_VAR 0 2
28591: PPUSH
28592: LD_VAR 0 3
28596: PPUSH
28597: LD_INT 10
28599: PPUSH
28600: CALL_OW 237
28604: GO 28584
28606: POP
28607: POP
// end ;
28608: GO 28568
28610: POP
28611: POP
// end ;
28612: LD_VAR 0 1
28616: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28617: LD_INT 0
28619: PPUSH
// uc_side := your_side ;
28620: LD_ADDR_OWVAR 20
28624: PUSH
28625: LD_OWVAR 2
28629: ST_TO_ADDR
// uc_nation := nation ;
28630: LD_ADDR_OWVAR 21
28634: PUSH
28635: LD_VAR 0 1
28639: ST_TO_ADDR
// InitHc ;
28640: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28644: LD_INT 0
28646: PPUSH
28647: LD_VAR 0 2
28651: PPUSH
28652: LD_VAR 0 3
28656: PPUSH
28657: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28661: LD_VAR 0 4
28665: PPUSH
28666: LD_VAR 0 5
28670: PPUSH
28671: CALL_OW 428
28675: PUSH
28676: LD_INT 0
28678: EQUAL
28679: IFFALSE 28703
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28681: CALL_OW 44
28685: PPUSH
28686: LD_VAR 0 4
28690: PPUSH
28691: LD_VAR 0 5
28695: PPUSH
28696: LD_INT 1
28698: PPUSH
28699: CALL_OW 48
// end ;
28703: LD_VAR 0 6
28707: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28708: LD_INT 0
28710: PPUSH
28711: PPUSH
// uc_side := your_side ;
28712: LD_ADDR_OWVAR 20
28716: PUSH
28717: LD_OWVAR 2
28721: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28722: LD_VAR 0 1
28726: PUSH
28727: LD_INT 1
28729: PUSH
28730: LD_INT 2
28732: PUSH
28733: LD_INT 3
28735: PUSH
28736: LD_INT 4
28738: PUSH
28739: LD_INT 5
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: LIST
28748: IN
28749: IFFALSE 28761
// uc_nation := nation_american else
28751: LD_ADDR_OWVAR 21
28755: PUSH
28756: LD_INT 1
28758: ST_TO_ADDR
28759: GO 28804
// if chassis in [ 11 , 12 , 13 , 14 ] then
28761: LD_VAR 0 1
28765: PUSH
28766: LD_INT 11
28768: PUSH
28769: LD_INT 12
28771: PUSH
28772: LD_INT 13
28774: PUSH
28775: LD_INT 14
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: IN
28784: IFFALSE 28796
// uc_nation := nation_arabian else
28786: LD_ADDR_OWVAR 21
28790: PUSH
28791: LD_INT 2
28793: ST_TO_ADDR
28794: GO 28804
// uc_nation := nation_russian ;
28796: LD_ADDR_OWVAR 21
28800: PUSH
28801: LD_INT 3
28803: ST_TO_ADDR
// vc_chassis := chassis ;
28804: LD_ADDR_OWVAR 37
28808: PUSH
28809: LD_VAR 0 1
28813: ST_TO_ADDR
// vc_engine := engine ;
28814: LD_ADDR_OWVAR 39
28818: PUSH
28819: LD_VAR 0 2
28823: ST_TO_ADDR
// vc_control := control ;
28824: LD_ADDR_OWVAR 38
28828: PUSH
28829: LD_VAR 0 3
28833: ST_TO_ADDR
// vc_weapon := weapon ;
28834: LD_ADDR_OWVAR 40
28838: PUSH
28839: LD_VAR 0 4
28843: ST_TO_ADDR
// un := CreateVehicle ;
28844: LD_ADDR_VAR 0 8
28848: PUSH
28849: CALL_OW 45
28853: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28854: LD_VAR 0 8
28858: PPUSH
28859: LD_INT 0
28861: PPUSH
28862: LD_INT 5
28864: PPUSH
28865: CALL_OW 12
28869: PPUSH
28870: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28874: LD_VAR 0 8
28878: PPUSH
28879: LD_VAR 0 5
28883: PPUSH
28884: LD_VAR 0 6
28888: PPUSH
28889: LD_INT 1
28891: PPUSH
28892: CALL_OW 48
// end ;
28896: LD_VAR 0 7
28900: RET
// export hInvincible ; every 1 do
28901: GO 28903
28903: DISABLE
// hInvincible := [ ] ;
28904: LD_ADDR_EXP 118
28908: PUSH
28909: EMPTY
28910: ST_TO_ADDR
28911: END
// every 10 do var i ;
28912: GO 28914
28914: DISABLE
28915: LD_INT 0
28917: PPUSH
// begin enable ;
28918: ENABLE
// if not hInvincible then
28919: LD_EXP 118
28923: NOT
28924: IFFALSE 28928
// exit ;
28926: GO 28972
// for i in hInvincible do
28928: LD_ADDR_VAR 0 1
28932: PUSH
28933: LD_EXP 118
28937: PUSH
28938: FOR_IN
28939: IFFALSE 28970
// if GetLives ( i ) < 1000 then
28941: LD_VAR 0 1
28945: PPUSH
28946: CALL_OW 256
28950: PUSH
28951: LD_INT 1000
28953: LESS
28954: IFFALSE 28968
// SetLives ( i , 1000 ) ;
28956: LD_VAR 0 1
28960: PPUSH
28961: LD_INT 1000
28963: PPUSH
28964: CALL_OW 234
28968: GO 28938
28970: POP
28971: POP
// end ;
28972: PPOPN 1
28974: END
// export function hHackInvincible ; var i ; begin
28975: LD_INT 0
28977: PPUSH
28978: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28979: LD_ADDR_VAR 0 2
28983: PUSH
28984: LD_INT 2
28986: PUSH
28987: LD_INT 21
28989: PUSH
28990: LD_INT 1
28992: PUSH
28993: EMPTY
28994: LIST
28995: LIST
28996: PUSH
28997: LD_INT 21
28999: PUSH
29000: LD_INT 2
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: PPUSH
29012: CALL_OW 69
29016: PUSH
29017: FOR_IN
29018: IFFALSE 29079
// if IsSelected ( i ) then
29020: LD_VAR 0 2
29024: PPUSH
29025: CALL_OW 306
29029: IFFALSE 29077
// begin if i in hInvincible then
29031: LD_VAR 0 2
29035: PUSH
29036: LD_EXP 118
29040: IN
29041: IFFALSE 29061
// hInvincible := hInvincible diff i else
29043: LD_ADDR_EXP 118
29047: PUSH
29048: LD_EXP 118
29052: PUSH
29053: LD_VAR 0 2
29057: DIFF
29058: ST_TO_ADDR
29059: GO 29077
// hInvincible := hInvincible union i ;
29061: LD_ADDR_EXP 118
29065: PUSH
29066: LD_EXP 118
29070: PUSH
29071: LD_VAR 0 2
29075: UNION
29076: ST_TO_ADDR
// end ;
29077: GO 29017
29079: POP
29080: POP
// end ;
29081: LD_VAR 0 1
29085: RET
// export function hHackInvisible ; var i , j ; begin
29086: LD_INT 0
29088: PPUSH
29089: PPUSH
29090: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29091: LD_ADDR_VAR 0 2
29095: PUSH
29096: LD_INT 21
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: EMPTY
29103: LIST
29104: LIST
29105: PPUSH
29106: CALL_OW 69
29110: PUSH
29111: FOR_IN
29112: IFFALSE 29136
// if IsSelected ( i ) then
29114: LD_VAR 0 2
29118: PPUSH
29119: CALL_OW 306
29123: IFFALSE 29134
// ComForceInvisible ( i ) ;
29125: LD_VAR 0 2
29129: PPUSH
29130: CALL_OW 496
29134: GO 29111
29136: POP
29137: POP
// end ;
29138: LD_VAR 0 1
29142: RET
// export function hHackChangeYourSide ; begin
29143: LD_INT 0
29145: PPUSH
// if your_side = 8 then
29146: LD_OWVAR 2
29150: PUSH
29151: LD_INT 8
29153: EQUAL
29154: IFFALSE 29166
// your_side := 0 else
29156: LD_ADDR_OWVAR 2
29160: PUSH
29161: LD_INT 0
29163: ST_TO_ADDR
29164: GO 29180
// your_side := your_side + 1 ;
29166: LD_ADDR_OWVAR 2
29170: PUSH
29171: LD_OWVAR 2
29175: PUSH
29176: LD_INT 1
29178: PLUS
29179: ST_TO_ADDR
// end ;
29180: LD_VAR 0 1
29184: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29185: LD_INT 0
29187: PPUSH
29188: PPUSH
29189: PPUSH
// for i in all_units do
29190: LD_ADDR_VAR 0 2
29194: PUSH
29195: LD_OWVAR 3
29199: PUSH
29200: FOR_IN
29201: IFFALSE 29279
// if IsSelected ( i ) then
29203: LD_VAR 0 2
29207: PPUSH
29208: CALL_OW 306
29212: IFFALSE 29277
// begin j := GetSide ( i ) ;
29214: LD_ADDR_VAR 0 3
29218: PUSH
29219: LD_VAR 0 2
29223: PPUSH
29224: CALL_OW 255
29228: ST_TO_ADDR
// if j = 8 then
29229: LD_VAR 0 3
29233: PUSH
29234: LD_INT 8
29236: EQUAL
29237: IFFALSE 29249
// j := 0 else
29239: LD_ADDR_VAR 0 3
29243: PUSH
29244: LD_INT 0
29246: ST_TO_ADDR
29247: GO 29263
// j := j + 1 ;
29249: LD_ADDR_VAR 0 3
29253: PUSH
29254: LD_VAR 0 3
29258: PUSH
29259: LD_INT 1
29261: PLUS
29262: ST_TO_ADDR
// SetSide ( i , j ) ;
29263: LD_VAR 0 2
29267: PPUSH
29268: LD_VAR 0 3
29272: PPUSH
29273: CALL_OW 235
// end ;
29277: GO 29200
29279: POP
29280: POP
// end ;
29281: LD_VAR 0 1
29285: RET
// export function hHackFog ; begin
29286: LD_INT 0
29288: PPUSH
// FogOff ( true ) ;
29289: LD_INT 1
29291: PPUSH
29292: CALL_OW 344
// end ;
29296: LD_VAR 0 1
29300: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29301: LD_INT 0
29303: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29304: LD_VAR 0 1
29308: PPUSH
29309: LD_VAR 0 2
29313: PPUSH
29314: LD_VAR 0 3
29318: PPUSH
29319: LD_INT 1
29321: PPUSH
29322: LD_INT 1
29324: PPUSH
29325: CALL_OW 483
// CenterOnXY ( x , y ) ;
29329: LD_VAR 0 2
29333: PPUSH
29334: LD_VAR 0 3
29338: PPUSH
29339: CALL_OW 84
// end ;
29343: LD_VAR 0 4
29347: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29348: LD_INT 0
29350: PPUSH
29351: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29352: LD_VAR 0 1
29356: NOT
29357: PUSH
29358: LD_VAR 0 2
29362: PPUSH
29363: LD_VAR 0 3
29367: PPUSH
29368: CALL_OW 488
29372: NOT
29373: OR
29374: PUSH
29375: LD_VAR 0 1
29379: PPUSH
29380: CALL_OW 266
29384: PUSH
29385: LD_INT 3
29387: NONEQUAL
29388: PUSH
29389: LD_VAR 0 1
29393: PPUSH
29394: CALL_OW 247
29398: PUSH
29399: LD_INT 1
29401: EQUAL
29402: NOT
29403: AND
29404: OR
29405: IFFALSE 29409
// exit ;
29407: GO 29558
// if GetType ( factory ) = unit_human then
29409: LD_VAR 0 1
29413: PPUSH
29414: CALL_OW 247
29418: PUSH
29419: LD_INT 1
29421: EQUAL
29422: IFFALSE 29439
// factory := IsInUnit ( factory ) ;
29424: LD_ADDR_VAR 0 1
29428: PUSH
29429: LD_VAR 0 1
29433: PPUSH
29434: CALL_OW 310
29438: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29439: LD_VAR 0 1
29443: PPUSH
29444: CALL_OW 266
29448: PUSH
29449: LD_INT 3
29451: NONEQUAL
29452: IFFALSE 29456
// exit ;
29454: GO 29558
// if HexInfo ( x , y ) = factory then
29456: LD_VAR 0 2
29460: PPUSH
29461: LD_VAR 0 3
29465: PPUSH
29466: CALL_OW 428
29470: PUSH
29471: LD_VAR 0 1
29475: EQUAL
29476: IFFALSE 29503
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29478: LD_ADDR_EXP 119
29482: PUSH
29483: LD_EXP 119
29487: PPUSH
29488: LD_VAR 0 1
29492: PPUSH
29493: LD_INT 0
29495: PPUSH
29496: CALL_OW 1
29500: ST_TO_ADDR
29501: GO 29554
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29503: LD_ADDR_EXP 119
29507: PUSH
29508: LD_EXP 119
29512: PPUSH
29513: LD_VAR 0 1
29517: PPUSH
29518: LD_VAR 0 1
29522: PPUSH
29523: CALL_OW 255
29527: PUSH
29528: LD_VAR 0 1
29532: PUSH
29533: LD_VAR 0 2
29537: PUSH
29538: LD_VAR 0 3
29542: PUSH
29543: EMPTY
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: PPUSH
29549: CALL_OW 1
29553: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29554: CALL 29563 0 0
// end ;
29558: LD_VAR 0 4
29562: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29563: LD_INT 0
29565: PPUSH
29566: PPUSH
29567: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29568: LD_STRING resetFactoryWaypoint();
29570: PPUSH
29571: CALL_OW 559
// if factoryWaypoints then
29575: LD_EXP 119
29579: IFFALSE 29705
// begin list := PrepareArray ( factoryWaypoints ) ;
29581: LD_ADDR_VAR 0 3
29585: PUSH
29586: LD_EXP 119
29590: PPUSH
29591: NOP4
29595: ST_TO_ADDR
// for i := 1 to list do
29596: LD_ADDR_VAR 0 2
29600: PUSH
29601: DOUBLE
29602: LD_INT 1
29604: DEC
29605: ST_TO_ADDR
29606: LD_VAR 0 3
29610: PUSH
29611: FOR_TO
29612: IFFALSE 29703
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29614: LD_STRING setFactoryWaypointXY(
29616: PUSH
29617: LD_VAR 0 3
29621: PUSH
29622: LD_VAR 0 2
29626: ARRAY
29627: PUSH
29628: LD_INT 1
29630: ARRAY
29631: STR
29632: PUSH
29633: LD_STRING ,
29635: STR
29636: PUSH
29637: LD_VAR 0 3
29641: PUSH
29642: LD_VAR 0 2
29646: ARRAY
29647: PUSH
29648: LD_INT 2
29650: ARRAY
29651: STR
29652: PUSH
29653: LD_STRING ,
29655: STR
29656: PUSH
29657: LD_VAR 0 3
29661: PUSH
29662: LD_VAR 0 2
29666: ARRAY
29667: PUSH
29668: LD_INT 3
29670: ARRAY
29671: STR
29672: PUSH
29673: LD_STRING ,
29675: STR
29676: PUSH
29677: LD_VAR 0 3
29681: PUSH
29682: LD_VAR 0 2
29686: ARRAY
29687: PUSH
29688: LD_INT 4
29690: ARRAY
29691: STR
29692: PUSH
29693: LD_STRING )
29695: STR
29696: PPUSH
29697: CALL_OW 559
29701: GO 29611
29703: POP
29704: POP
// end ; end ;
29705: LD_VAR 0 1
29709: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29710: LD_INT 0
29712: PPUSH
// if HexInfo ( x , y ) = warehouse then
29713: LD_VAR 0 2
29717: PPUSH
29718: LD_VAR 0 3
29722: PPUSH
29723: CALL_OW 428
29727: PUSH
29728: LD_VAR 0 1
29732: EQUAL
29733: IFFALSE 29760
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29735: LD_ADDR_EXP 120
29739: PUSH
29740: LD_EXP 120
29744: PPUSH
29745: LD_VAR 0 1
29749: PPUSH
29750: LD_INT 0
29752: PPUSH
29753: CALL_OW 1
29757: ST_TO_ADDR
29758: GO 29811
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29760: LD_ADDR_EXP 120
29764: PUSH
29765: LD_EXP 120
29769: PPUSH
29770: LD_VAR 0 1
29774: PPUSH
29775: LD_VAR 0 1
29779: PPUSH
29780: CALL_OW 255
29784: PUSH
29785: LD_VAR 0 1
29789: PUSH
29790: LD_VAR 0 2
29794: PUSH
29795: LD_VAR 0 3
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: LIST
29805: PPUSH
29806: CALL_OW 1
29810: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29811: CALL 29820 0 0
// end ;
29815: LD_VAR 0 4
29819: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29820: LD_INT 0
29822: PPUSH
29823: PPUSH
29824: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29825: LD_STRING resetWarehouseGatheringPoints();
29827: PPUSH
29828: CALL_OW 559
// if warehouseGatheringPoints then
29832: LD_EXP 120
29836: IFFALSE 29962
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29838: LD_ADDR_VAR 0 3
29842: PUSH
29843: LD_EXP 120
29847: PPUSH
29848: NOP4
29852: ST_TO_ADDR
// for i := 1 to list do
29853: LD_ADDR_VAR 0 2
29857: PUSH
29858: DOUBLE
29859: LD_INT 1
29861: DEC
29862: ST_TO_ADDR
29863: LD_VAR 0 3
29867: PUSH
29868: FOR_TO
29869: IFFALSE 29960
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29871: LD_STRING setWarehouseGatheringPointXY(
29873: PUSH
29874: LD_VAR 0 3
29878: PUSH
29879: LD_VAR 0 2
29883: ARRAY
29884: PUSH
29885: LD_INT 1
29887: ARRAY
29888: STR
29889: PUSH
29890: LD_STRING ,
29892: STR
29893: PUSH
29894: LD_VAR 0 3
29898: PUSH
29899: LD_VAR 0 2
29903: ARRAY
29904: PUSH
29905: LD_INT 2
29907: ARRAY
29908: STR
29909: PUSH
29910: LD_STRING ,
29912: STR
29913: PUSH
29914: LD_VAR 0 3
29918: PUSH
29919: LD_VAR 0 2
29923: ARRAY
29924: PUSH
29925: LD_INT 3
29927: ARRAY
29928: STR
29929: PUSH
29930: LD_STRING ,
29932: STR
29933: PUSH
29934: LD_VAR 0 3
29938: PUSH
29939: LD_VAR 0 2
29943: ARRAY
29944: PUSH
29945: LD_INT 4
29947: ARRAY
29948: STR
29949: PUSH
29950: LD_STRING )
29952: STR
29953: PPUSH
29954: CALL_OW 559
29958: GO 29868
29960: POP
29961: POP
// end ; end ;
29962: LD_VAR 0 1
29966: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29967: LD_EXP 120
29971: IFFALSE 30656
29973: GO 29975
29975: DISABLE
29976: LD_INT 0
29978: PPUSH
29979: PPUSH
29980: PPUSH
29981: PPUSH
29982: PPUSH
29983: PPUSH
29984: PPUSH
29985: PPUSH
29986: PPUSH
// begin enable ;
29987: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29988: LD_ADDR_VAR 0 3
29992: PUSH
29993: LD_EXP 120
29997: PPUSH
29998: NOP4
30002: ST_TO_ADDR
// if not list then
30003: LD_VAR 0 3
30007: NOT
30008: IFFALSE 30012
// exit ;
30010: GO 30656
// for i := 1 to list do
30012: LD_ADDR_VAR 0 1
30016: PUSH
30017: DOUBLE
30018: LD_INT 1
30020: DEC
30021: ST_TO_ADDR
30022: LD_VAR 0 3
30026: PUSH
30027: FOR_TO
30028: IFFALSE 30654
// begin depot := list [ i ] [ 2 ] ;
30030: LD_ADDR_VAR 0 8
30034: PUSH
30035: LD_VAR 0 3
30039: PUSH
30040: LD_VAR 0 1
30044: ARRAY
30045: PUSH
30046: LD_INT 2
30048: ARRAY
30049: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30050: LD_ADDR_VAR 0 5
30054: PUSH
30055: LD_VAR 0 3
30059: PUSH
30060: LD_VAR 0 1
30064: ARRAY
30065: PUSH
30066: LD_INT 1
30068: ARRAY
30069: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30070: LD_VAR 0 8
30074: PPUSH
30075: CALL_OW 301
30079: PUSH
30080: LD_VAR 0 5
30084: PUSH
30085: LD_VAR 0 8
30089: PPUSH
30090: CALL_OW 255
30094: NONEQUAL
30095: OR
30096: IFFALSE 30125
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30098: LD_ADDR_EXP 120
30102: PUSH
30103: LD_EXP 120
30107: PPUSH
30108: LD_VAR 0 8
30112: PPUSH
30113: LD_INT 0
30115: PPUSH
30116: CALL_OW 1
30120: ST_TO_ADDR
// exit ;
30121: POP
30122: POP
30123: GO 30656
// end ; x := list [ i ] [ 3 ] ;
30125: LD_ADDR_VAR 0 6
30129: PUSH
30130: LD_VAR 0 3
30134: PUSH
30135: LD_VAR 0 1
30139: ARRAY
30140: PUSH
30141: LD_INT 3
30143: ARRAY
30144: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30145: LD_ADDR_VAR 0 7
30149: PUSH
30150: LD_VAR 0 3
30154: PUSH
30155: LD_VAR 0 1
30159: ARRAY
30160: PUSH
30161: LD_INT 4
30163: ARRAY
30164: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30165: LD_ADDR_VAR 0 9
30169: PUSH
30170: LD_VAR 0 6
30174: PPUSH
30175: LD_VAR 0 7
30179: PPUSH
30180: LD_INT 16
30182: PPUSH
30183: CALL 74925 0 3
30187: ST_TO_ADDR
// if not cratesNearbyPoint then
30188: LD_VAR 0 9
30192: NOT
30193: IFFALSE 30199
// exit ;
30195: POP
30196: POP
30197: GO 30656
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30199: LD_ADDR_VAR 0 4
30203: PUSH
30204: LD_INT 22
30206: PUSH
30207: LD_VAR 0 5
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: PUSH
30216: LD_INT 3
30218: PUSH
30219: LD_INT 60
30221: PUSH
30222: EMPTY
30223: LIST
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 91
30231: PUSH
30232: LD_VAR 0 8
30236: PUSH
30237: LD_INT 6
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: LIST
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: LD_INT 25
30250: PUSH
30251: LD_INT 2
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 25
30260: PUSH
30261: LD_INT 16
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: PPUSH
30279: CALL_OW 69
30283: PUSH
30284: LD_VAR 0 8
30288: PPUSH
30289: CALL_OW 313
30293: PPUSH
30294: LD_INT 3
30296: PUSH
30297: LD_INT 60
30299: PUSH
30300: EMPTY
30301: LIST
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: PUSH
30310: LD_INT 25
30312: PUSH
30313: LD_INT 2
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 25
30322: PUSH
30323: LD_INT 16
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: EMPTY
30331: LIST
30332: LIST
30333: LIST
30334: PUSH
30335: EMPTY
30336: LIST
30337: LIST
30338: PPUSH
30339: CALL_OW 72
30343: UNION
30344: ST_TO_ADDR
// if tmp then
30345: LD_VAR 0 4
30349: IFFALSE 30429
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30351: LD_ADDR_VAR 0 4
30355: PUSH
30356: LD_VAR 0 4
30360: PPUSH
30361: LD_INT 3
30363: PPUSH
30364: CALL 72894 0 2
30368: ST_TO_ADDR
// for j in tmp do
30369: LD_ADDR_VAR 0 2
30373: PUSH
30374: LD_VAR 0 4
30378: PUSH
30379: FOR_IN
30380: IFFALSE 30423
// begin if IsInUnit ( j ) then
30382: LD_VAR 0 2
30386: PPUSH
30387: CALL_OW 310
30391: IFFALSE 30402
// ComExit ( j ) ;
30393: LD_VAR 0 2
30397: PPUSH
30398: CALL 72977 0 1
// AddComCollect ( j , x , y ) ;
30402: LD_VAR 0 2
30406: PPUSH
30407: LD_VAR 0 6
30411: PPUSH
30412: LD_VAR 0 7
30416: PPUSH
30417: CALL_OW 177
// end ;
30421: GO 30379
30423: POP
30424: POP
// exit ;
30425: POP
30426: POP
30427: GO 30656
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30429: LD_ADDR_VAR 0 4
30433: PUSH
30434: LD_INT 22
30436: PUSH
30437: LD_VAR 0 5
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 91
30448: PUSH
30449: LD_VAR 0 8
30453: PUSH
30454: LD_INT 8
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 34
30467: PUSH
30468: LD_INT 12
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 34
30477: PUSH
30478: LD_INT 51
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 34
30487: PUSH
30488: LD_INT 32
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 34
30497: PUSH
30498: LD_INT 89
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: EMPTY
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: PPUSH
30517: CALL_OW 69
30521: ST_TO_ADDR
// if tmp then
30522: LD_VAR 0 4
30526: IFFALSE 30652
// begin for j in tmp do
30528: LD_ADDR_VAR 0 2
30532: PUSH
30533: LD_VAR 0 4
30537: PUSH
30538: FOR_IN
30539: IFFALSE 30650
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30541: LD_VAR 0 2
30545: PPUSH
30546: CALL_OW 262
30550: PUSH
30551: LD_INT 3
30553: EQUAL
30554: PUSH
30555: LD_VAR 0 2
30559: PPUSH
30560: CALL_OW 261
30564: PUSH
30565: LD_INT 20
30567: GREATER
30568: OR
30569: PUSH
30570: LD_VAR 0 2
30574: PPUSH
30575: CALL_OW 314
30579: NOT
30580: AND
30581: PUSH
30582: LD_VAR 0 2
30586: PPUSH
30587: CALL_OW 263
30591: PUSH
30592: LD_INT 1
30594: NONEQUAL
30595: PUSH
30596: LD_VAR 0 2
30600: PPUSH
30601: CALL_OW 311
30605: OR
30606: AND
30607: IFFALSE 30648
// begin ComCollect ( j , x , y ) ;
30609: LD_VAR 0 2
30613: PPUSH
30614: LD_VAR 0 6
30618: PPUSH
30619: LD_VAR 0 7
30623: PPUSH
30624: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30628: LD_VAR 0 2
30632: PPUSH
30633: LD_VAR 0 8
30637: PPUSH
30638: CALL_OW 172
// exit ;
30642: POP
30643: POP
30644: POP
30645: POP
30646: GO 30656
// end ;
30648: GO 30538
30650: POP
30651: POP
// end ; end ;
30652: GO 30027
30654: POP
30655: POP
// end ; end_of_file
30656: PPOPN 9
30658: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30659: LD_INT 0
30661: PPUSH
30662: PPUSH
30663: PPUSH
30664: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30665: LD_VAR 0 1
30669: PPUSH
30670: CALL_OW 264
30674: PUSH
30675: LD_INT 91
30677: EQUAL
30678: IFFALSE 30750
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30680: LD_INT 68
30682: PPUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 255
30692: PPUSH
30693: CALL_OW 321
30697: PUSH
30698: LD_INT 2
30700: EQUAL
30701: IFFALSE 30713
// eff := 70 else
30703: LD_ADDR_VAR 0 4
30707: PUSH
30708: LD_INT 70
30710: ST_TO_ADDR
30711: GO 30721
// eff := 30 ;
30713: LD_ADDR_VAR 0 4
30717: PUSH
30718: LD_INT 30
30720: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 250
30730: PPUSH
30731: LD_VAR 0 1
30735: PPUSH
30736: CALL_OW 251
30740: PPUSH
30741: LD_VAR 0 4
30745: PPUSH
30746: CALL_OW 495
// end ; end ;
30750: LD_VAR 0 2
30754: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30755: LD_INT 0
30757: PPUSH
// end ;
30758: LD_VAR 0 4
30762: RET
// export function SOS_Command ( cmd ) ; begin
30763: LD_INT 0
30765: PPUSH
// end ;
30766: LD_VAR 0 2
30770: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30771: LD_INT 0
30773: PPUSH
// end ;
30774: LD_VAR 0 6
30778: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
30779: LD_INT 0
30781: PPUSH
30782: PPUSH
// if not vehicle or not factory then
30783: LD_VAR 0 1
30787: NOT
30788: PUSH
30789: LD_VAR 0 2
30793: NOT
30794: OR
30795: IFFALSE 30799
// exit ;
30797: GO 31030
// if factoryWaypoints >= factory then
30799: LD_EXP 119
30803: PUSH
30804: LD_VAR 0 2
30808: GREATEREQUAL
30809: IFFALSE 31030
// if factoryWaypoints [ factory ] then
30811: LD_EXP 119
30815: PUSH
30816: LD_VAR 0 2
30820: ARRAY
30821: IFFALSE 31030
// begin if GetControl ( vehicle ) = control_manual then
30823: LD_VAR 0 1
30827: PPUSH
30828: CALL_OW 263
30832: PUSH
30833: LD_INT 1
30835: EQUAL
30836: IFFALSE 30917
// begin driver := IsDrivenBy ( vehicle ) ;
30838: LD_ADDR_VAR 0 4
30842: PUSH
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 311
30852: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30853: LD_VAR 0 4
30857: PPUSH
30858: LD_EXP 119
30862: PUSH
30863: LD_VAR 0 2
30867: ARRAY
30868: PUSH
30869: LD_INT 3
30871: ARRAY
30872: PPUSH
30873: LD_EXP 119
30877: PUSH
30878: LD_VAR 0 2
30882: ARRAY
30883: PUSH
30884: LD_INT 4
30886: ARRAY
30887: PPUSH
30888: CALL_OW 171
// AddComExitVehicle ( driver ) ;
30892: LD_VAR 0 4
30896: PPUSH
30897: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
30901: LD_VAR 0 4
30905: PPUSH
30906: LD_VAR 0 2
30910: PPUSH
30911: CALL_OW 180
// end else
30915: GO 31030
// if GetControl ( vehicle ) = control_remote then
30917: LD_VAR 0 1
30921: PPUSH
30922: CALL_OW 263
30926: PUSH
30927: LD_INT 2
30929: EQUAL
30930: IFFALSE 30991
// begin wait ( 0 0$2 ) ;
30932: LD_INT 70
30934: PPUSH
30935: CALL_OW 67
// if Connect ( vehicle ) then
30939: LD_VAR 0 1
30943: PPUSH
30944: CALL 43217 0 1
30948: IFFALSE 30989
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30950: LD_VAR 0 1
30954: PPUSH
30955: LD_EXP 119
30959: PUSH
30960: LD_VAR 0 2
30964: ARRAY
30965: PUSH
30966: LD_INT 3
30968: ARRAY
30969: PPUSH
30970: LD_EXP 119
30974: PUSH
30975: LD_VAR 0 2
30979: ARRAY
30980: PUSH
30981: LD_INT 4
30983: ARRAY
30984: PPUSH
30985: CALL_OW 171
// end else
30989: GO 31030
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30991: LD_VAR 0 1
30995: PPUSH
30996: LD_EXP 119
31000: PUSH
31001: LD_VAR 0 2
31005: ARRAY
31006: PUSH
31007: LD_INT 3
31009: ARRAY
31010: PPUSH
31011: LD_EXP 119
31015: PUSH
31016: LD_VAR 0 2
31020: ARRAY
31021: PUSH
31022: LD_INT 4
31024: ARRAY
31025: PPUSH
31026: CALL_OW 171
// end ; end ;
31030: LD_VAR 0 3
31034: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31035: LD_INT 0
31037: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31038: LD_VAR 0 1
31042: PUSH
31043: LD_INT 250
31045: EQUAL
31046: PUSH
31047: LD_VAR 0 2
31051: PPUSH
31052: CALL_OW 264
31056: PUSH
31057: LD_INT 81
31059: EQUAL
31060: AND
31061: IFFALSE 31082
// MinerPlaceMine ( unit , x , y ) ;
31063: LD_VAR 0 2
31067: PPUSH
31068: LD_VAR 0 4
31072: PPUSH
31073: LD_VAR 0 5
31077: PPUSH
31078: CALL 33467 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31082: LD_VAR 0 1
31086: PUSH
31087: LD_INT 251
31089: EQUAL
31090: PUSH
31091: LD_VAR 0 2
31095: PPUSH
31096: CALL_OW 264
31100: PUSH
31101: LD_INT 81
31103: EQUAL
31104: AND
31105: IFFALSE 31126
// MinerDetonateMine ( unit , x , y ) ;
31107: LD_VAR 0 2
31111: PPUSH
31112: LD_VAR 0 4
31116: PPUSH
31117: LD_VAR 0 5
31121: PPUSH
31122: CALL 33742 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31126: LD_VAR 0 1
31130: PUSH
31131: LD_INT 252
31133: EQUAL
31134: PUSH
31135: LD_VAR 0 2
31139: PPUSH
31140: CALL_OW 264
31144: PUSH
31145: LD_INT 81
31147: EQUAL
31148: AND
31149: IFFALSE 31170
// MinerCreateMinefield ( unit , x , y ) ;
31151: LD_VAR 0 2
31155: PPUSH
31156: LD_VAR 0 4
31160: PPUSH
31161: LD_VAR 0 5
31165: PPUSH
31166: CALL 34159 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31170: LD_VAR 0 1
31174: PUSH
31175: LD_INT 253
31177: EQUAL
31178: PUSH
31179: LD_VAR 0 2
31183: PPUSH
31184: CALL_OW 257
31188: PUSH
31189: LD_INT 5
31191: EQUAL
31192: AND
31193: IFFALSE 31214
// ComBinocular ( unit , x , y ) ;
31195: LD_VAR 0 2
31199: PPUSH
31200: LD_VAR 0 4
31204: PPUSH
31205: LD_VAR 0 5
31209: PPUSH
31210: CALL 34528 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31214: LD_VAR 0 1
31218: PUSH
31219: LD_INT 254
31221: EQUAL
31222: PUSH
31223: LD_VAR 0 2
31227: PPUSH
31228: CALL_OW 264
31232: PUSH
31233: LD_INT 99
31235: EQUAL
31236: AND
31237: PUSH
31238: LD_VAR 0 3
31242: PPUSH
31243: CALL_OW 263
31247: PUSH
31248: LD_INT 3
31250: EQUAL
31251: AND
31252: IFFALSE 31268
// HackDestroyVehicle ( unit , selectedUnit ) ;
31254: LD_VAR 0 2
31258: PPUSH
31259: LD_VAR 0 3
31263: PPUSH
31264: CALL 32831 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31268: LD_VAR 0 1
31272: PUSH
31273: LD_INT 255
31275: EQUAL
31276: PUSH
31277: LD_VAR 0 2
31281: PPUSH
31282: CALL_OW 264
31286: PUSH
31287: LD_INT 14
31289: PUSH
31290: LD_INT 53
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: IN
31297: AND
31298: PUSH
31299: LD_VAR 0 4
31303: PPUSH
31304: LD_VAR 0 5
31308: PPUSH
31309: CALL_OW 488
31313: AND
31314: IFFALSE 31338
// CutTreeXYR ( unit , x , y , 12 ) ;
31316: LD_VAR 0 2
31320: PPUSH
31321: LD_VAR 0 4
31325: PPUSH
31326: LD_VAR 0 5
31330: PPUSH
31331: LD_INT 12
31333: PPUSH
31334: CALL 31401 0 4
// if cmd = 256 then
31338: LD_VAR 0 1
31342: PUSH
31343: LD_INT 256
31345: EQUAL
31346: IFFALSE 31367
// SetFactoryWaypoint ( unit , x , y ) ;
31348: LD_VAR 0 2
31352: PPUSH
31353: LD_VAR 0 4
31357: PPUSH
31358: LD_VAR 0 5
31362: PPUSH
31363: CALL 29348 0 3
// if cmd = 257 then
31367: LD_VAR 0 1
31371: PUSH
31372: LD_INT 257
31374: EQUAL
31375: IFFALSE 31396
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31377: LD_VAR 0 2
31381: PPUSH
31382: LD_VAR 0 4
31386: PPUSH
31387: LD_VAR 0 5
31391: PPUSH
31392: CALL 29710 0 3
// end ;
31396: LD_VAR 0 6
31400: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31401: LD_INT 0
31403: PPUSH
31404: PPUSH
31405: PPUSH
31406: PPUSH
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31412: LD_VAR 0 1
31416: NOT
31417: PUSH
31418: LD_VAR 0 2
31422: PPUSH
31423: LD_VAR 0 3
31427: PPUSH
31428: CALL_OW 488
31432: NOT
31433: OR
31434: PUSH
31435: LD_VAR 0 4
31439: NOT
31440: OR
31441: IFFALSE 31445
// exit ;
31443: GO 31785
// list := [ ] ;
31445: LD_ADDR_VAR 0 13
31449: PUSH
31450: EMPTY
31451: ST_TO_ADDR
// if x - r < 0 then
31452: LD_VAR 0 2
31456: PUSH
31457: LD_VAR 0 4
31461: MINUS
31462: PUSH
31463: LD_INT 0
31465: LESS
31466: IFFALSE 31478
// min_x := 0 else
31468: LD_ADDR_VAR 0 7
31472: PUSH
31473: LD_INT 0
31475: ST_TO_ADDR
31476: GO 31494
// min_x := x - r ;
31478: LD_ADDR_VAR 0 7
31482: PUSH
31483: LD_VAR 0 2
31487: PUSH
31488: LD_VAR 0 4
31492: MINUS
31493: ST_TO_ADDR
// if y - r < 0 then
31494: LD_VAR 0 3
31498: PUSH
31499: LD_VAR 0 4
31503: MINUS
31504: PUSH
31505: LD_INT 0
31507: LESS
31508: IFFALSE 31520
// min_y := 0 else
31510: LD_ADDR_VAR 0 8
31514: PUSH
31515: LD_INT 0
31517: ST_TO_ADDR
31518: GO 31536
// min_y := y - r ;
31520: LD_ADDR_VAR 0 8
31524: PUSH
31525: LD_VAR 0 3
31529: PUSH
31530: LD_VAR 0 4
31534: MINUS
31535: ST_TO_ADDR
// max_x := x + r ;
31536: LD_ADDR_VAR 0 9
31540: PUSH
31541: LD_VAR 0 2
31545: PUSH
31546: LD_VAR 0 4
31550: PLUS
31551: ST_TO_ADDR
// max_y := y + r ;
31552: LD_ADDR_VAR 0 10
31556: PUSH
31557: LD_VAR 0 3
31561: PUSH
31562: LD_VAR 0 4
31566: PLUS
31567: ST_TO_ADDR
// for _x = min_x to max_x do
31568: LD_ADDR_VAR 0 11
31572: PUSH
31573: DOUBLE
31574: LD_VAR 0 7
31578: DEC
31579: ST_TO_ADDR
31580: LD_VAR 0 9
31584: PUSH
31585: FOR_TO
31586: IFFALSE 31703
// for _y = min_y to max_y do
31588: LD_ADDR_VAR 0 12
31592: PUSH
31593: DOUBLE
31594: LD_VAR 0 8
31598: DEC
31599: ST_TO_ADDR
31600: LD_VAR 0 10
31604: PUSH
31605: FOR_TO
31606: IFFALSE 31699
// begin if not ValidHex ( _x , _y ) then
31608: LD_VAR 0 11
31612: PPUSH
31613: LD_VAR 0 12
31617: PPUSH
31618: CALL_OW 488
31622: NOT
31623: IFFALSE 31627
// continue ;
31625: GO 31605
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31627: LD_VAR 0 11
31631: PPUSH
31632: LD_VAR 0 12
31636: PPUSH
31637: CALL_OW 351
31641: PUSH
31642: LD_VAR 0 11
31646: PPUSH
31647: LD_VAR 0 12
31651: PPUSH
31652: CALL_OW 554
31656: AND
31657: IFFALSE 31697
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31659: LD_ADDR_VAR 0 13
31663: PUSH
31664: LD_VAR 0 13
31668: PPUSH
31669: LD_VAR 0 13
31673: PUSH
31674: LD_INT 1
31676: PLUS
31677: PPUSH
31678: LD_VAR 0 11
31682: PUSH
31683: LD_VAR 0 12
31687: PUSH
31688: EMPTY
31689: LIST
31690: LIST
31691: PPUSH
31692: CALL_OW 2
31696: ST_TO_ADDR
// end ;
31697: GO 31605
31699: POP
31700: POP
31701: GO 31585
31703: POP
31704: POP
// if not list then
31705: LD_VAR 0 13
31709: NOT
31710: IFFALSE 31714
// exit ;
31712: GO 31785
// for i in list do
31714: LD_ADDR_VAR 0 6
31718: PUSH
31719: LD_VAR 0 13
31723: PUSH
31724: FOR_IN
31725: IFFALSE 31783
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31727: LD_VAR 0 1
31731: PPUSH
31732: LD_STRING M
31734: PUSH
31735: LD_VAR 0 6
31739: PUSH
31740: LD_INT 1
31742: ARRAY
31743: PUSH
31744: LD_VAR 0 6
31748: PUSH
31749: LD_INT 2
31751: ARRAY
31752: PUSH
31753: LD_INT 0
31755: PUSH
31756: LD_INT 0
31758: PUSH
31759: LD_INT 0
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: PUSH
31774: EMPTY
31775: LIST
31776: PPUSH
31777: CALL_OW 447
31781: GO 31724
31783: POP
31784: POP
// end ;
31785: LD_VAR 0 5
31789: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31790: LD_EXP 122
31794: NOT
31795: IFFALSE 31845
31797: GO 31799
31799: DISABLE
// begin initHack := true ;
31800: LD_ADDR_EXP 122
31804: PUSH
31805: LD_INT 1
31807: ST_TO_ADDR
// hackTanks := [ ] ;
31808: LD_ADDR_EXP 123
31812: PUSH
31813: EMPTY
31814: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31815: LD_ADDR_EXP 124
31819: PUSH
31820: EMPTY
31821: ST_TO_ADDR
// hackLimit := 3 ;
31822: LD_ADDR_EXP 125
31826: PUSH
31827: LD_INT 3
31829: ST_TO_ADDR
// hackDist := 12 ;
31830: LD_ADDR_EXP 126
31834: PUSH
31835: LD_INT 12
31837: ST_TO_ADDR
// hackCounter := [ ] ;
31838: LD_ADDR_EXP 127
31842: PUSH
31843: EMPTY
31844: ST_TO_ADDR
// end ;
31845: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31846: LD_EXP 122
31850: PUSH
31851: LD_INT 34
31853: PUSH
31854: LD_INT 99
31856: PUSH
31857: EMPTY
31858: LIST
31859: LIST
31860: PPUSH
31861: CALL_OW 69
31865: AND
31866: IFFALSE 32119
31868: GO 31870
31870: DISABLE
31871: LD_INT 0
31873: PPUSH
31874: PPUSH
// begin enable ;
31875: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31876: LD_ADDR_VAR 0 1
31880: PUSH
31881: LD_INT 34
31883: PUSH
31884: LD_INT 99
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PPUSH
31891: CALL_OW 69
31895: PUSH
31896: FOR_IN
31897: IFFALSE 32117
// begin if not i in hackTanks then
31899: LD_VAR 0 1
31903: PUSH
31904: LD_EXP 123
31908: IN
31909: NOT
31910: IFFALSE 31993
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31912: LD_ADDR_EXP 123
31916: PUSH
31917: LD_EXP 123
31921: PPUSH
31922: LD_EXP 123
31926: PUSH
31927: LD_INT 1
31929: PLUS
31930: PPUSH
31931: LD_VAR 0 1
31935: PPUSH
31936: CALL_OW 1
31940: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31941: LD_ADDR_EXP 124
31945: PUSH
31946: LD_EXP 124
31950: PPUSH
31951: LD_EXP 124
31955: PUSH
31956: LD_INT 1
31958: PLUS
31959: PPUSH
31960: EMPTY
31961: PPUSH
31962: CALL_OW 1
31966: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31967: LD_ADDR_EXP 127
31971: PUSH
31972: LD_EXP 127
31976: PPUSH
31977: LD_EXP 127
31981: PUSH
31982: LD_INT 1
31984: PLUS
31985: PPUSH
31986: EMPTY
31987: PPUSH
31988: CALL_OW 1
31992: ST_TO_ADDR
// end ; if not IsOk ( i ) then
31993: LD_VAR 0 1
31997: PPUSH
31998: CALL_OW 302
32002: NOT
32003: IFFALSE 32016
// begin HackUnlinkAll ( i ) ;
32005: LD_VAR 0 1
32009: PPUSH
32010: CALL 32122 0 1
// continue ;
32014: GO 31896
// end ; HackCheckCapturedStatus ( i ) ;
32016: LD_VAR 0 1
32020: PPUSH
32021: CALL 32565 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32025: LD_ADDR_VAR 0 2
32029: PUSH
32030: LD_INT 81
32032: PUSH
32033: LD_VAR 0 1
32037: PPUSH
32038: CALL_OW 255
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 33
32049: PUSH
32050: LD_INT 3
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 91
32059: PUSH
32060: LD_VAR 0 1
32064: PUSH
32065: LD_EXP 126
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 50
32077: PUSH
32078: EMPTY
32079: LIST
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: PPUSH
32087: CALL_OW 69
32091: ST_TO_ADDR
// if not tmp then
32092: LD_VAR 0 2
32096: NOT
32097: IFFALSE 32101
// continue ;
32099: GO 31896
// HackLink ( i , tmp ) ;
32101: LD_VAR 0 1
32105: PPUSH
32106: LD_VAR 0 2
32110: PPUSH
32111: CALL 32258 0 2
// end ;
32115: GO 31896
32117: POP
32118: POP
// end ;
32119: PPOPN 2
32121: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32122: LD_INT 0
32124: PPUSH
32125: PPUSH
32126: PPUSH
// if not hack in hackTanks then
32127: LD_VAR 0 1
32131: PUSH
32132: LD_EXP 123
32136: IN
32137: NOT
32138: IFFALSE 32142
// exit ;
32140: GO 32253
// index := GetElementIndex ( hackTanks , hack ) ;
32142: LD_ADDR_VAR 0 4
32146: PUSH
32147: LD_EXP 123
32151: PPUSH
32152: LD_VAR 0 1
32156: PPUSH
32157: CALL 40033 0 2
32161: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32162: LD_EXP 124
32166: PUSH
32167: LD_VAR 0 4
32171: ARRAY
32172: IFFALSE 32253
// begin for i in hackTanksCaptured [ index ] do
32174: LD_ADDR_VAR 0 3
32178: PUSH
32179: LD_EXP 124
32183: PUSH
32184: LD_VAR 0 4
32188: ARRAY
32189: PUSH
32190: FOR_IN
32191: IFFALSE 32217
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32193: LD_VAR 0 3
32197: PUSH
32198: LD_INT 1
32200: ARRAY
32201: PPUSH
32202: LD_VAR 0 3
32206: PUSH
32207: LD_INT 2
32209: ARRAY
32210: PPUSH
32211: CALL_OW 235
32215: GO 32190
32217: POP
32218: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32219: LD_ADDR_EXP 124
32223: PUSH
32224: LD_EXP 124
32228: PPUSH
32229: LD_VAR 0 4
32233: PPUSH
32234: EMPTY
32235: PPUSH
32236: CALL_OW 1
32240: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32241: LD_VAR 0 1
32245: PPUSH
32246: LD_INT 0
32248: PPUSH
32249: CALL_OW 505
// end ; end ;
32253: LD_VAR 0 2
32257: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32258: LD_INT 0
32260: PPUSH
32261: PPUSH
32262: PPUSH
// if not hack in hackTanks or not vehicles then
32263: LD_VAR 0 1
32267: PUSH
32268: LD_EXP 123
32272: IN
32273: NOT
32274: PUSH
32275: LD_VAR 0 2
32279: NOT
32280: OR
32281: IFFALSE 32285
// exit ;
32283: GO 32560
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32285: LD_ADDR_VAR 0 2
32289: PUSH
32290: LD_VAR 0 1
32294: PPUSH
32295: LD_VAR 0 2
32299: PPUSH
32300: LD_INT 1
32302: PPUSH
32303: LD_INT 1
32305: PPUSH
32306: CALL 40683 0 4
32310: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32311: LD_ADDR_VAR 0 5
32315: PUSH
32316: LD_EXP 123
32320: PPUSH
32321: LD_VAR 0 1
32325: PPUSH
32326: CALL 40033 0 2
32330: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32331: LD_EXP 124
32335: PUSH
32336: LD_VAR 0 5
32340: ARRAY
32341: PUSH
32342: LD_EXP 125
32346: LESS
32347: IFFALSE 32536
// begin for i := 1 to vehicles do
32349: LD_ADDR_VAR 0 4
32353: PUSH
32354: DOUBLE
32355: LD_INT 1
32357: DEC
32358: ST_TO_ADDR
32359: LD_VAR 0 2
32363: PUSH
32364: FOR_TO
32365: IFFALSE 32534
// begin if hackTanksCaptured [ index ] = hackLimit then
32367: LD_EXP 124
32371: PUSH
32372: LD_VAR 0 5
32376: ARRAY
32377: PUSH
32378: LD_EXP 125
32382: EQUAL
32383: IFFALSE 32387
// break ;
32385: GO 32534
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32387: LD_ADDR_EXP 127
32391: PUSH
32392: LD_EXP 127
32396: PPUSH
32397: LD_VAR 0 5
32401: PPUSH
32402: LD_EXP 127
32406: PUSH
32407: LD_VAR 0 5
32411: ARRAY
32412: PUSH
32413: LD_INT 1
32415: PLUS
32416: PPUSH
32417: CALL_OW 1
32421: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32422: LD_ADDR_EXP 124
32426: PUSH
32427: LD_EXP 124
32431: PPUSH
32432: LD_VAR 0 5
32436: PUSH
32437: LD_EXP 124
32441: PUSH
32442: LD_VAR 0 5
32446: ARRAY
32447: PUSH
32448: LD_INT 1
32450: PLUS
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PPUSH
32456: LD_VAR 0 2
32460: PUSH
32461: LD_VAR 0 4
32465: ARRAY
32466: PUSH
32467: LD_VAR 0 2
32471: PUSH
32472: LD_VAR 0 4
32476: ARRAY
32477: PPUSH
32478: CALL_OW 255
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PPUSH
32487: CALL 40248 0 3
32491: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32492: LD_VAR 0 2
32496: PUSH
32497: LD_VAR 0 4
32501: ARRAY
32502: PPUSH
32503: LD_VAR 0 1
32507: PPUSH
32508: CALL_OW 255
32512: PPUSH
32513: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32517: LD_VAR 0 2
32521: PUSH
32522: LD_VAR 0 4
32526: ARRAY
32527: PPUSH
32528: CALL_OW 141
// end ;
32532: GO 32364
32534: POP
32535: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32536: LD_VAR 0 1
32540: PPUSH
32541: LD_EXP 124
32545: PUSH
32546: LD_VAR 0 5
32550: ARRAY
32551: PUSH
32552: LD_INT 0
32554: PLUS
32555: PPUSH
32556: CALL_OW 505
// end ;
32560: LD_VAR 0 3
32564: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32565: LD_INT 0
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
// if not hack in hackTanks then
32571: LD_VAR 0 1
32575: PUSH
32576: LD_EXP 123
32580: IN
32581: NOT
32582: IFFALSE 32586
// exit ;
32584: GO 32826
// index := GetElementIndex ( hackTanks , hack ) ;
32586: LD_ADDR_VAR 0 4
32590: PUSH
32591: LD_EXP 123
32595: PPUSH
32596: LD_VAR 0 1
32600: PPUSH
32601: CALL 40033 0 2
32605: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32606: LD_ADDR_VAR 0 3
32610: PUSH
32611: DOUBLE
32612: LD_EXP 124
32616: PUSH
32617: LD_VAR 0 4
32621: ARRAY
32622: INC
32623: ST_TO_ADDR
32624: LD_INT 1
32626: PUSH
32627: FOR_DOWNTO
32628: IFFALSE 32800
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32630: LD_ADDR_VAR 0 5
32634: PUSH
32635: LD_EXP 124
32639: PUSH
32640: LD_VAR 0 4
32644: ARRAY
32645: PUSH
32646: LD_VAR 0 3
32650: ARRAY
32651: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32652: LD_VAR 0 5
32656: PUSH
32657: LD_INT 1
32659: ARRAY
32660: PPUSH
32661: CALL_OW 302
32665: NOT
32666: PUSH
32667: LD_VAR 0 5
32671: PUSH
32672: LD_INT 1
32674: ARRAY
32675: PPUSH
32676: CALL_OW 255
32680: PUSH
32681: LD_VAR 0 1
32685: PPUSH
32686: CALL_OW 255
32690: NONEQUAL
32691: OR
32692: IFFALSE 32798
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32694: LD_VAR 0 5
32698: PUSH
32699: LD_INT 1
32701: ARRAY
32702: PPUSH
32703: CALL_OW 305
32707: PUSH
32708: LD_VAR 0 5
32712: PUSH
32713: LD_INT 1
32715: ARRAY
32716: PPUSH
32717: CALL_OW 255
32721: PUSH
32722: LD_VAR 0 1
32726: PPUSH
32727: CALL_OW 255
32731: EQUAL
32732: AND
32733: IFFALSE 32757
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32735: LD_VAR 0 5
32739: PUSH
32740: LD_INT 1
32742: ARRAY
32743: PPUSH
32744: LD_VAR 0 5
32748: PUSH
32749: LD_INT 2
32751: ARRAY
32752: PPUSH
32753: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32757: LD_ADDR_EXP 124
32761: PUSH
32762: LD_EXP 124
32766: PPUSH
32767: LD_VAR 0 4
32771: PPUSH
32772: LD_EXP 124
32776: PUSH
32777: LD_VAR 0 4
32781: ARRAY
32782: PPUSH
32783: LD_VAR 0 3
32787: PPUSH
32788: CALL_OW 3
32792: PPUSH
32793: CALL_OW 1
32797: ST_TO_ADDR
// end ; end ;
32798: GO 32627
32800: POP
32801: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32802: LD_VAR 0 1
32806: PPUSH
32807: LD_EXP 124
32811: PUSH
32812: LD_VAR 0 4
32816: ARRAY
32817: PUSH
32818: LD_INT 0
32820: PLUS
32821: PPUSH
32822: CALL_OW 505
// end ;
32826: LD_VAR 0 2
32830: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32831: LD_INT 0
32833: PPUSH
32834: PPUSH
32835: PPUSH
32836: PPUSH
// if not hack in hackTanks then
32837: LD_VAR 0 1
32841: PUSH
32842: LD_EXP 123
32846: IN
32847: NOT
32848: IFFALSE 32852
// exit ;
32850: GO 32937
// index := GetElementIndex ( hackTanks , hack ) ;
32852: LD_ADDR_VAR 0 5
32856: PUSH
32857: LD_EXP 123
32861: PPUSH
32862: LD_VAR 0 1
32866: PPUSH
32867: CALL 40033 0 2
32871: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32872: LD_ADDR_VAR 0 4
32876: PUSH
32877: DOUBLE
32878: LD_INT 1
32880: DEC
32881: ST_TO_ADDR
32882: LD_EXP 124
32886: PUSH
32887: LD_VAR 0 5
32891: ARRAY
32892: PUSH
32893: FOR_TO
32894: IFFALSE 32935
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32896: LD_EXP 124
32900: PUSH
32901: LD_VAR 0 5
32905: ARRAY
32906: PUSH
32907: LD_VAR 0 4
32911: ARRAY
32912: PUSH
32913: LD_INT 1
32915: ARRAY
32916: PUSH
32917: LD_VAR 0 2
32921: EQUAL
32922: IFFALSE 32933
// KillUnit ( vehicle ) ;
32924: LD_VAR 0 2
32928: PPUSH
32929: CALL_OW 66
32933: GO 32893
32935: POP
32936: POP
// end ;
32937: LD_VAR 0 3
32941: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32942: LD_EXP 128
32946: NOT
32947: IFFALSE 32982
32949: GO 32951
32951: DISABLE
// begin initMiner := true ;
32952: LD_ADDR_EXP 128
32956: PUSH
32957: LD_INT 1
32959: ST_TO_ADDR
// minersList := [ ] ;
32960: LD_ADDR_EXP 129
32964: PUSH
32965: EMPTY
32966: ST_TO_ADDR
// minerMinesList := [ ] ;
32967: LD_ADDR_EXP 130
32971: PUSH
32972: EMPTY
32973: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32974: LD_ADDR_EXP 131
32978: PUSH
32979: LD_INT 5
32981: ST_TO_ADDR
// end ;
32982: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32983: LD_EXP 128
32987: PUSH
32988: LD_INT 34
32990: PUSH
32991: LD_INT 81
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PPUSH
32998: CALL_OW 69
33002: AND
33003: IFFALSE 33464
33005: GO 33007
33007: DISABLE
33008: LD_INT 0
33010: PPUSH
33011: PPUSH
33012: PPUSH
33013: PPUSH
// begin enable ;
33014: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33015: LD_ADDR_VAR 0 1
33019: PUSH
33020: LD_INT 34
33022: PUSH
33023: LD_INT 81
33025: PUSH
33026: EMPTY
33027: LIST
33028: LIST
33029: PPUSH
33030: CALL_OW 69
33034: PUSH
33035: FOR_IN
33036: IFFALSE 33108
// begin if not i in minersList then
33038: LD_VAR 0 1
33042: PUSH
33043: LD_EXP 129
33047: IN
33048: NOT
33049: IFFALSE 33106
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33051: LD_ADDR_EXP 129
33055: PUSH
33056: LD_EXP 129
33060: PPUSH
33061: LD_EXP 129
33065: PUSH
33066: LD_INT 1
33068: PLUS
33069: PPUSH
33070: LD_VAR 0 1
33074: PPUSH
33075: CALL_OW 1
33079: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33080: LD_ADDR_EXP 130
33084: PUSH
33085: LD_EXP 130
33089: PPUSH
33090: LD_EXP 130
33094: PUSH
33095: LD_INT 1
33097: PLUS
33098: PPUSH
33099: EMPTY
33100: PPUSH
33101: CALL_OW 1
33105: ST_TO_ADDR
// end end ;
33106: GO 33035
33108: POP
33109: POP
// for i := minerMinesList downto 1 do
33110: LD_ADDR_VAR 0 1
33114: PUSH
33115: DOUBLE
33116: LD_EXP 130
33120: INC
33121: ST_TO_ADDR
33122: LD_INT 1
33124: PUSH
33125: FOR_DOWNTO
33126: IFFALSE 33462
// begin if IsLive ( minersList [ i ] ) then
33128: LD_EXP 129
33132: PUSH
33133: LD_VAR 0 1
33137: ARRAY
33138: PPUSH
33139: CALL_OW 300
33143: IFFALSE 33171
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33145: LD_EXP 129
33149: PUSH
33150: LD_VAR 0 1
33154: ARRAY
33155: PPUSH
33156: LD_EXP 130
33160: PUSH
33161: LD_VAR 0 1
33165: ARRAY
33166: PPUSH
33167: CALL_OW 505
// if not minerMinesList [ i ] then
33171: LD_EXP 130
33175: PUSH
33176: LD_VAR 0 1
33180: ARRAY
33181: NOT
33182: IFFALSE 33186
// continue ;
33184: GO 33125
// for j := minerMinesList [ i ] downto 1 do
33186: LD_ADDR_VAR 0 2
33190: PUSH
33191: DOUBLE
33192: LD_EXP 130
33196: PUSH
33197: LD_VAR 0 1
33201: ARRAY
33202: INC
33203: ST_TO_ADDR
33204: LD_INT 1
33206: PUSH
33207: FOR_DOWNTO
33208: IFFALSE 33458
// begin side := GetSide ( minersList [ i ] ) ;
33210: LD_ADDR_VAR 0 3
33214: PUSH
33215: LD_EXP 129
33219: PUSH
33220: LD_VAR 0 1
33224: ARRAY
33225: PPUSH
33226: CALL_OW 255
33230: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33231: LD_ADDR_VAR 0 4
33235: PUSH
33236: LD_EXP 130
33240: PUSH
33241: LD_VAR 0 1
33245: ARRAY
33246: PUSH
33247: LD_VAR 0 2
33251: ARRAY
33252: PUSH
33253: LD_INT 1
33255: ARRAY
33256: PPUSH
33257: LD_EXP 130
33261: PUSH
33262: LD_VAR 0 1
33266: ARRAY
33267: PUSH
33268: LD_VAR 0 2
33272: ARRAY
33273: PUSH
33274: LD_INT 2
33276: ARRAY
33277: PPUSH
33278: CALL_OW 428
33282: ST_TO_ADDR
// if not tmp then
33283: LD_VAR 0 4
33287: NOT
33288: IFFALSE 33292
// continue ;
33290: GO 33207
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33292: LD_VAR 0 4
33296: PUSH
33297: LD_INT 81
33299: PUSH
33300: LD_VAR 0 3
33304: PUSH
33305: EMPTY
33306: LIST
33307: LIST
33308: PPUSH
33309: CALL_OW 69
33313: IN
33314: PUSH
33315: LD_EXP 130
33319: PUSH
33320: LD_VAR 0 1
33324: ARRAY
33325: PUSH
33326: LD_VAR 0 2
33330: ARRAY
33331: PUSH
33332: LD_INT 1
33334: ARRAY
33335: PPUSH
33336: LD_EXP 130
33340: PUSH
33341: LD_VAR 0 1
33345: ARRAY
33346: PUSH
33347: LD_VAR 0 2
33351: ARRAY
33352: PUSH
33353: LD_INT 2
33355: ARRAY
33356: PPUSH
33357: CALL_OW 458
33361: AND
33362: IFFALSE 33456
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33364: LD_EXP 130
33368: PUSH
33369: LD_VAR 0 1
33373: ARRAY
33374: PUSH
33375: LD_VAR 0 2
33379: ARRAY
33380: PUSH
33381: LD_INT 1
33383: ARRAY
33384: PPUSH
33385: LD_EXP 130
33389: PUSH
33390: LD_VAR 0 1
33394: ARRAY
33395: PUSH
33396: LD_VAR 0 2
33400: ARRAY
33401: PUSH
33402: LD_INT 2
33404: ARRAY
33405: PPUSH
33406: LD_VAR 0 3
33410: PPUSH
33411: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33415: LD_ADDR_EXP 130
33419: PUSH
33420: LD_EXP 130
33424: PPUSH
33425: LD_VAR 0 1
33429: PPUSH
33430: LD_EXP 130
33434: PUSH
33435: LD_VAR 0 1
33439: ARRAY
33440: PPUSH
33441: LD_VAR 0 2
33445: PPUSH
33446: CALL_OW 3
33450: PPUSH
33451: CALL_OW 1
33455: ST_TO_ADDR
// end ; end ;
33456: GO 33207
33458: POP
33459: POP
// end ;
33460: GO 33125
33462: POP
33463: POP
// end ;
33464: PPOPN 4
33466: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33467: LD_INT 0
33469: PPUSH
33470: PPUSH
// result := false ;
33471: LD_ADDR_VAR 0 4
33475: PUSH
33476: LD_INT 0
33478: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33479: LD_VAR 0 1
33483: PPUSH
33484: CALL_OW 264
33488: PUSH
33489: LD_INT 81
33491: EQUAL
33492: NOT
33493: IFFALSE 33497
// exit ;
33495: GO 33737
// index := GetElementIndex ( minersList , unit ) ;
33497: LD_ADDR_VAR 0 5
33501: PUSH
33502: LD_EXP 129
33506: PPUSH
33507: LD_VAR 0 1
33511: PPUSH
33512: CALL 40033 0 2
33516: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33517: LD_EXP 130
33521: PUSH
33522: LD_VAR 0 5
33526: ARRAY
33527: PUSH
33528: LD_EXP 131
33532: GREATEREQUAL
33533: IFFALSE 33537
// exit ;
33535: GO 33737
// ComMoveXY ( unit , x , y ) ;
33537: LD_VAR 0 1
33541: PPUSH
33542: LD_VAR 0 2
33546: PPUSH
33547: LD_VAR 0 3
33551: PPUSH
33552: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33556: LD_INT 35
33558: PPUSH
33559: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33563: LD_VAR 0 1
33567: PPUSH
33568: LD_VAR 0 2
33572: PPUSH
33573: LD_VAR 0 3
33577: PPUSH
33578: CALL 71388 0 3
33582: NOT
33583: PUSH
33584: LD_VAR 0 1
33588: PPUSH
33589: CALL_OW 314
33593: AND
33594: IFFALSE 33598
// exit ;
33596: GO 33737
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33598: LD_VAR 0 2
33602: PPUSH
33603: LD_VAR 0 3
33607: PPUSH
33608: CALL_OW 428
33612: PUSH
33613: LD_VAR 0 1
33617: EQUAL
33618: PUSH
33619: LD_VAR 0 1
33623: PPUSH
33624: CALL_OW 314
33628: NOT
33629: AND
33630: IFFALSE 33556
// PlaySoundXY ( x , y , PlantMine ) ;
33632: LD_VAR 0 2
33636: PPUSH
33637: LD_VAR 0 3
33641: PPUSH
33642: LD_STRING PlantMine
33644: PPUSH
33645: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33649: LD_VAR 0 2
33653: PPUSH
33654: LD_VAR 0 3
33658: PPUSH
33659: LD_VAR 0 1
33663: PPUSH
33664: CALL_OW 255
33668: PPUSH
33669: LD_INT 0
33671: PPUSH
33672: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33676: LD_ADDR_EXP 130
33680: PUSH
33681: LD_EXP 130
33685: PPUSH
33686: LD_VAR 0 5
33690: PUSH
33691: LD_EXP 130
33695: PUSH
33696: LD_VAR 0 5
33700: ARRAY
33701: PUSH
33702: LD_INT 1
33704: PLUS
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: PPUSH
33710: LD_VAR 0 2
33714: PUSH
33715: LD_VAR 0 3
33719: PUSH
33720: EMPTY
33721: LIST
33722: LIST
33723: PPUSH
33724: CALL 40248 0 3
33728: ST_TO_ADDR
// result := true ;
33729: LD_ADDR_VAR 0 4
33733: PUSH
33734: LD_INT 1
33736: ST_TO_ADDR
// end ;
33737: LD_VAR 0 4
33741: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33742: LD_INT 0
33744: PPUSH
33745: PPUSH
33746: PPUSH
// if not unit in minersList then
33747: LD_VAR 0 1
33751: PUSH
33752: LD_EXP 129
33756: IN
33757: NOT
33758: IFFALSE 33762
// exit ;
33760: GO 34154
// index := GetElementIndex ( minersList , unit ) ;
33762: LD_ADDR_VAR 0 6
33766: PUSH
33767: LD_EXP 129
33771: PPUSH
33772: LD_VAR 0 1
33776: PPUSH
33777: CALL 40033 0 2
33781: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33782: LD_ADDR_VAR 0 5
33786: PUSH
33787: DOUBLE
33788: LD_EXP 130
33792: PUSH
33793: LD_VAR 0 6
33797: ARRAY
33798: INC
33799: ST_TO_ADDR
33800: LD_INT 1
33802: PUSH
33803: FOR_DOWNTO
33804: IFFALSE 33965
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33806: LD_EXP 130
33810: PUSH
33811: LD_VAR 0 6
33815: ARRAY
33816: PUSH
33817: LD_VAR 0 5
33821: ARRAY
33822: PUSH
33823: LD_INT 1
33825: ARRAY
33826: PUSH
33827: LD_VAR 0 2
33831: EQUAL
33832: PUSH
33833: LD_EXP 130
33837: PUSH
33838: LD_VAR 0 6
33842: ARRAY
33843: PUSH
33844: LD_VAR 0 5
33848: ARRAY
33849: PUSH
33850: LD_INT 2
33852: ARRAY
33853: PUSH
33854: LD_VAR 0 3
33858: EQUAL
33859: AND
33860: IFFALSE 33963
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33862: LD_EXP 130
33866: PUSH
33867: LD_VAR 0 6
33871: ARRAY
33872: PUSH
33873: LD_VAR 0 5
33877: ARRAY
33878: PUSH
33879: LD_INT 1
33881: ARRAY
33882: PPUSH
33883: LD_EXP 130
33887: PUSH
33888: LD_VAR 0 6
33892: ARRAY
33893: PUSH
33894: LD_VAR 0 5
33898: ARRAY
33899: PUSH
33900: LD_INT 2
33902: ARRAY
33903: PPUSH
33904: LD_VAR 0 1
33908: PPUSH
33909: CALL_OW 255
33913: PPUSH
33914: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33918: LD_ADDR_EXP 130
33922: PUSH
33923: LD_EXP 130
33927: PPUSH
33928: LD_VAR 0 6
33932: PPUSH
33933: LD_EXP 130
33937: PUSH
33938: LD_VAR 0 6
33942: ARRAY
33943: PPUSH
33944: LD_VAR 0 5
33948: PPUSH
33949: CALL_OW 3
33953: PPUSH
33954: CALL_OW 1
33958: ST_TO_ADDR
// exit ;
33959: POP
33960: POP
33961: GO 34154
// end ; end ;
33963: GO 33803
33965: POP
33966: POP
// for i := minerMinesList [ index ] downto 1 do
33967: LD_ADDR_VAR 0 5
33971: PUSH
33972: DOUBLE
33973: LD_EXP 130
33977: PUSH
33978: LD_VAR 0 6
33982: ARRAY
33983: INC
33984: ST_TO_ADDR
33985: LD_INT 1
33987: PUSH
33988: FOR_DOWNTO
33989: IFFALSE 34152
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33991: LD_EXP 130
33995: PUSH
33996: LD_VAR 0 6
34000: ARRAY
34001: PUSH
34002: LD_VAR 0 5
34006: ARRAY
34007: PUSH
34008: LD_INT 1
34010: ARRAY
34011: PPUSH
34012: LD_EXP 130
34016: PUSH
34017: LD_VAR 0 6
34021: ARRAY
34022: PUSH
34023: LD_VAR 0 5
34027: ARRAY
34028: PUSH
34029: LD_INT 2
34031: ARRAY
34032: PPUSH
34033: LD_VAR 0 2
34037: PPUSH
34038: LD_VAR 0 3
34042: PPUSH
34043: CALL_OW 298
34047: PUSH
34048: LD_INT 6
34050: LESS
34051: IFFALSE 34150
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34053: LD_EXP 130
34057: PUSH
34058: LD_VAR 0 6
34062: ARRAY
34063: PUSH
34064: LD_VAR 0 5
34068: ARRAY
34069: PUSH
34070: LD_INT 1
34072: ARRAY
34073: PPUSH
34074: LD_EXP 130
34078: PUSH
34079: LD_VAR 0 6
34083: ARRAY
34084: PUSH
34085: LD_VAR 0 5
34089: ARRAY
34090: PUSH
34091: LD_INT 2
34093: ARRAY
34094: PPUSH
34095: LD_VAR 0 1
34099: PPUSH
34100: CALL_OW 255
34104: PPUSH
34105: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34109: LD_ADDR_EXP 130
34113: PUSH
34114: LD_EXP 130
34118: PPUSH
34119: LD_VAR 0 6
34123: PPUSH
34124: LD_EXP 130
34128: PUSH
34129: LD_VAR 0 6
34133: ARRAY
34134: PPUSH
34135: LD_VAR 0 5
34139: PPUSH
34140: CALL_OW 3
34144: PPUSH
34145: CALL_OW 1
34149: ST_TO_ADDR
// end ; end ;
34150: GO 33988
34152: POP
34153: POP
// end ;
34154: LD_VAR 0 4
34158: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34159: LD_INT 0
34161: PPUSH
34162: PPUSH
34163: PPUSH
34164: PPUSH
34165: PPUSH
34166: PPUSH
34167: PPUSH
34168: PPUSH
34169: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34170: LD_VAR 0 1
34174: PPUSH
34175: CALL_OW 264
34179: PUSH
34180: LD_INT 81
34182: EQUAL
34183: NOT
34184: PUSH
34185: LD_VAR 0 1
34189: PUSH
34190: LD_EXP 129
34194: IN
34195: NOT
34196: OR
34197: IFFALSE 34201
// exit ;
34199: GO 34523
// index := GetElementIndex ( minersList , unit ) ;
34201: LD_ADDR_VAR 0 6
34205: PUSH
34206: LD_EXP 129
34210: PPUSH
34211: LD_VAR 0 1
34215: PPUSH
34216: CALL 40033 0 2
34220: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34221: LD_ADDR_VAR 0 8
34225: PUSH
34226: LD_EXP 131
34230: PUSH
34231: LD_EXP 130
34235: PUSH
34236: LD_VAR 0 6
34240: ARRAY
34241: MINUS
34242: ST_TO_ADDR
// if not minesFreeAmount then
34243: LD_VAR 0 8
34247: NOT
34248: IFFALSE 34252
// exit ;
34250: GO 34523
// tmp := [ ] ;
34252: LD_ADDR_VAR 0 7
34256: PUSH
34257: EMPTY
34258: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34259: LD_ADDR_VAR 0 5
34263: PUSH
34264: DOUBLE
34265: LD_INT 1
34267: DEC
34268: ST_TO_ADDR
34269: LD_VAR 0 8
34273: PUSH
34274: FOR_TO
34275: IFFALSE 34470
// begin _d := rand ( 0 , 5 ) ;
34277: LD_ADDR_VAR 0 11
34281: PUSH
34282: LD_INT 0
34284: PPUSH
34285: LD_INT 5
34287: PPUSH
34288: CALL_OW 12
34292: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34293: LD_ADDR_VAR 0 12
34297: PUSH
34298: LD_INT 2
34300: PPUSH
34301: LD_INT 6
34303: PPUSH
34304: CALL_OW 12
34308: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34309: LD_ADDR_VAR 0 9
34313: PUSH
34314: LD_VAR 0 2
34318: PPUSH
34319: LD_VAR 0 11
34323: PPUSH
34324: LD_VAR 0 12
34328: PPUSH
34329: CALL_OW 272
34333: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34334: LD_ADDR_VAR 0 10
34338: PUSH
34339: LD_VAR 0 3
34343: PPUSH
34344: LD_VAR 0 11
34348: PPUSH
34349: LD_VAR 0 12
34353: PPUSH
34354: CALL_OW 273
34358: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34359: LD_VAR 0 9
34363: PPUSH
34364: LD_VAR 0 10
34368: PPUSH
34369: CALL_OW 488
34373: PUSH
34374: LD_VAR 0 9
34378: PUSH
34379: LD_VAR 0 10
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_VAR 0 7
34392: IN
34393: NOT
34394: AND
34395: PUSH
34396: LD_VAR 0 9
34400: PPUSH
34401: LD_VAR 0 10
34405: PPUSH
34406: CALL_OW 458
34410: NOT
34411: AND
34412: IFFALSE 34454
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34414: LD_ADDR_VAR 0 7
34418: PUSH
34419: LD_VAR 0 7
34423: PPUSH
34424: LD_VAR 0 7
34428: PUSH
34429: LD_INT 1
34431: PLUS
34432: PPUSH
34433: LD_VAR 0 9
34437: PUSH
34438: LD_VAR 0 10
34442: PUSH
34443: EMPTY
34444: LIST
34445: LIST
34446: PPUSH
34447: CALL_OW 1
34451: ST_TO_ADDR
34452: GO 34468
// i := i - 1 ;
34454: LD_ADDR_VAR 0 5
34458: PUSH
34459: LD_VAR 0 5
34463: PUSH
34464: LD_INT 1
34466: MINUS
34467: ST_TO_ADDR
// end ;
34468: GO 34274
34470: POP
34471: POP
// for i in tmp do
34472: LD_ADDR_VAR 0 5
34476: PUSH
34477: LD_VAR 0 7
34481: PUSH
34482: FOR_IN
34483: IFFALSE 34521
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34485: LD_VAR 0 1
34489: PPUSH
34490: LD_VAR 0 5
34494: PUSH
34495: LD_INT 1
34497: ARRAY
34498: PPUSH
34499: LD_VAR 0 5
34503: PUSH
34504: LD_INT 2
34506: ARRAY
34507: PPUSH
34508: CALL 33467 0 3
34512: NOT
34513: IFFALSE 34519
// exit ;
34515: POP
34516: POP
34517: GO 34523
34519: GO 34482
34521: POP
34522: POP
// end ;
34523: LD_VAR 0 4
34527: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34528: LD_INT 0
34530: PPUSH
34531: PPUSH
34532: PPUSH
34533: PPUSH
34534: PPUSH
34535: PPUSH
34536: PPUSH
// if not GetClass ( unit ) = class_sniper then
34537: LD_VAR 0 1
34541: PPUSH
34542: CALL_OW 257
34546: PUSH
34547: LD_INT 5
34549: EQUAL
34550: NOT
34551: IFFALSE 34555
// exit ;
34553: GO 34943
// dist := 8 ;
34555: LD_ADDR_VAR 0 5
34559: PUSH
34560: LD_INT 8
34562: ST_TO_ADDR
// viewRange := 12 ;
34563: LD_ADDR_VAR 0 7
34567: PUSH
34568: LD_INT 12
34570: ST_TO_ADDR
// side := GetSide ( unit ) ;
34571: LD_ADDR_VAR 0 6
34575: PUSH
34576: LD_VAR 0 1
34580: PPUSH
34581: CALL_OW 255
34585: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34586: LD_INT 61
34588: PPUSH
34589: LD_VAR 0 6
34593: PPUSH
34594: CALL_OW 321
34598: PUSH
34599: LD_INT 2
34601: EQUAL
34602: IFFALSE 34612
// viewRange := 16 ;
34604: LD_ADDR_VAR 0 7
34608: PUSH
34609: LD_INT 16
34611: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34612: LD_VAR 0 1
34616: PPUSH
34617: LD_VAR 0 2
34621: PPUSH
34622: LD_VAR 0 3
34626: PPUSH
34627: CALL_OW 297
34631: PUSH
34632: LD_VAR 0 5
34636: GREATER
34637: IFFALSE 34716
// begin ComMoveXY ( unit , x , y ) ;
34639: LD_VAR 0 1
34643: PPUSH
34644: LD_VAR 0 2
34648: PPUSH
34649: LD_VAR 0 3
34653: PPUSH
34654: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34658: LD_INT 35
34660: PPUSH
34661: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34665: LD_VAR 0 1
34669: PPUSH
34670: LD_VAR 0 2
34674: PPUSH
34675: LD_VAR 0 3
34679: PPUSH
34680: CALL 71388 0 3
34684: NOT
34685: IFFALSE 34689
// exit ;
34687: GO 34943
// until GetDistUnitXY ( unit , x , y ) < dist ;
34689: LD_VAR 0 1
34693: PPUSH
34694: LD_VAR 0 2
34698: PPUSH
34699: LD_VAR 0 3
34703: PPUSH
34704: CALL_OW 297
34708: PUSH
34709: LD_VAR 0 5
34713: LESS
34714: IFFALSE 34658
// end ; ComTurnXY ( unit , x , y ) ;
34716: LD_VAR 0 1
34720: PPUSH
34721: LD_VAR 0 2
34725: PPUSH
34726: LD_VAR 0 3
34730: PPUSH
34731: CALL_OW 118
// wait ( 5 ) ;
34735: LD_INT 5
34737: PPUSH
34738: CALL_OW 67
// _d := GetDir ( unit ) ;
34742: LD_ADDR_VAR 0 10
34746: PUSH
34747: LD_VAR 0 1
34751: PPUSH
34752: CALL_OW 254
34756: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34757: LD_ADDR_VAR 0 8
34761: PUSH
34762: LD_VAR 0 1
34766: PPUSH
34767: CALL_OW 250
34771: PPUSH
34772: LD_VAR 0 10
34776: PPUSH
34777: LD_VAR 0 5
34781: PPUSH
34782: CALL_OW 272
34786: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34787: LD_ADDR_VAR 0 9
34791: PUSH
34792: LD_VAR 0 1
34796: PPUSH
34797: CALL_OW 251
34801: PPUSH
34802: LD_VAR 0 10
34806: PPUSH
34807: LD_VAR 0 5
34811: PPUSH
34812: CALL_OW 273
34816: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34817: LD_VAR 0 8
34821: PPUSH
34822: LD_VAR 0 9
34826: PPUSH
34827: CALL_OW 488
34831: NOT
34832: IFFALSE 34836
// exit ;
34834: GO 34943
// ComAnimCustom ( unit , 1 ) ;
34836: LD_VAR 0 1
34840: PPUSH
34841: LD_INT 1
34843: PPUSH
34844: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34848: LD_VAR 0 8
34852: PPUSH
34853: LD_VAR 0 9
34857: PPUSH
34858: LD_VAR 0 6
34862: PPUSH
34863: LD_VAR 0 7
34867: PPUSH
34868: CALL_OW 330
// repeat wait ( 1 ) ;
34872: LD_INT 1
34874: PPUSH
34875: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34879: LD_VAR 0 1
34883: PPUSH
34884: CALL_OW 316
34888: PUSH
34889: LD_VAR 0 1
34893: PPUSH
34894: CALL_OW 314
34898: OR
34899: PUSH
34900: LD_VAR 0 1
34904: PPUSH
34905: CALL_OW 302
34909: NOT
34910: OR
34911: PUSH
34912: LD_VAR 0 1
34916: PPUSH
34917: CALL_OW 301
34921: OR
34922: IFFALSE 34872
// RemoveSeeing ( _x , _y , side ) ;
34924: LD_VAR 0 8
34928: PPUSH
34929: LD_VAR 0 9
34933: PPUSH
34934: LD_VAR 0 6
34938: PPUSH
34939: CALL_OW 331
// end ; end_of_file
34943: LD_VAR 0 4
34947: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34948: LD_VAR 0 1
34952: PUSH
34953: LD_INT 200
34955: DOUBLE
34956: GREATEREQUAL
34957: IFFALSE 34965
34959: LD_INT 299
34961: DOUBLE
34962: LESSEQUAL
34963: IFTRUE 34967
34965: GO 34999
34967: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34968: LD_VAR 0 1
34972: PPUSH
34973: LD_VAR 0 2
34977: PPUSH
34978: LD_VAR 0 3
34982: PPUSH
34983: LD_VAR 0 4
34987: PPUSH
34988: LD_VAR 0 5
34992: PPUSH
34993: CALL 31035 0 5
34997: GO 35076
34999: LD_INT 300
35001: DOUBLE
35002: GREATEREQUAL
35003: IFFALSE 35011
35005: LD_INT 399
35007: DOUBLE
35008: LESSEQUAL
35009: IFTRUE 35013
35011: GO 35075
35013: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
35014: LD_VAR 0 1
35018: PPUSH
35019: LD_VAR 0 2
35023: PPUSH
35024: LD_VAR 0 3
35028: PPUSH
35029: LD_VAR 0 4
35033: PPUSH
35034: LD_VAR 0 5
35038: PPUSH
35039: LD_VAR 0 6
35043: PPUSH
35044: LD_VAR 0 7
35048: PPUSH
35049: LD_VAR 0 8
35053: PPUSH
35054: LD_VAR 0 9
35058: PPUSH
35059: LD_VAR 0 10
35063: PPUSH
35064: LD_VAR 0 11
35068: PPUSH
35069: CALL 27368 0 11
35073: GO 35076
35075: POP
// end ;
35076: PPOPN 11
35078: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
35079: LD_VAR 0 1
35083: PPUSH
35084: LD_VAR 0 2
35088: PPUSH
35089: LD_VAR 0 3
35093: PPUSH
35094: LD_VAR 0 4
35098: PPUSH
35099: LD_VAR 0 5
35103: PPUSH
35104: CALL 30771 0 5
// end ; end_of_file end_of_file
35108: PPOPN 5
35110: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35111: LD_INT 0
35113: PPUSH
35114: PPUSH
// if exist_mode then
35115: LD_VAR 0 2
35119: IFFALSE 35144
// unit := CreateCharacter ( prefix & ident ) else
35121: LD_ADDR_VAR 0 5
35125: PUSH
35126: LD_VAR 0 3
35130: PUSH
35131: LD_VAR 0 1
35135: STR
35136: PPUSH
35137: CALL_OW 34
35141: ST_TO_ADDR
35142: GO 35159
// unit := NewCharacter ( ident ) ;
35144: LD_ADDR_VAR 0 5
35148: PUSH
35149: LD_VAR 0 1
35153: PPUSH
35154: CALL_OW 25
35158: ST_TO_ADDR
// result := unit ;
35159: LD_ADDR_VAR 0 4
35163: PUSH
35164: LD_VAR 0 5
35168: ST_TO_ADDR
// end ;
35169: LD_VAR 0 4
35173: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35174: LD_INT 0
35176: PPUSH
35177: PPUSH
// if not side or not nation then
35178: LD_VAR 0 1
35182: NOT
35183: PUSH
35184: LD_VAR 0 2
35188: NOT
35189: OR
35190: IFFALSE 35194
// exit ;
35192: GO 35962
// case nation of nation_american :
35194: LD_VAR 0 2
35198: PUSH
35199: LD_INT 1
35201: DOUBLE
35202: EQUAL
35203: IFTRUE 35207
35205: GO 35421
35207: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35208: LD_ADDR_VAR 0 4
35212: PUSH
35213: LD_INT 35
35215: PUSH
35216: LD_INT 45
35218: PUSH
35219: LD_INT 46
35221: PUSH
35222: LD_INT 47
35224: PUSH
35225: LD_INT 82
35227: PUSH
35228: LD_INT 83
35230: PUSH
35231: LD_INT 84
35233: PUSH
35234: LD_INT 85
35236: PUSH
35237: LD_INT 86
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: LD_INT 6
35248: PUSH
35249: LD_INT 15
35251: PUSH
35252: LD_INT 16
35254: PUSH
35255: LD_INT 7
35257: PUSH
35258: LD_INT 12
35260: PUSH
35261: LD_INT 13
35263: PUSH
35264: LD_INT 10
35266: PUSH
35267: LD_INT 14
35269: PUSH
35270: LD_INT 20
35272: PUSH
35273: LD_INT 21
35275: PUSH
35276: LD_INT 22
35278: PUSH
35279: LD_INT 25
35281: PUSH
35282: LD_INT 32
35284: PUSH
35285: LD_INT 27
35287: PUSH
35288: LD_INT 36
35290: PUSH
35291: LD_INT 69
35293: PUSH
35294: LD_INT 39
35296: PUSH
35297: LD_INT 34
35299: PUSH
35300: LD_INT 40
35302: PUSH
35303: LD_INT 48
35305: PUSH
35306: LD_INT 49
35308: PUSH
35309: LD_INT 50
35311: PUSH
35312: LD_INT 51
35314: PUSH
35315: LD_INT 52
35317: PUSH
35318: LD_INT 53
35320: PUSH
35321: LD_INT 54
35323: PUSH
35324: LD_INT 55
35326: PUSH
35327: LD_INT 56
35329: PUSH
35330: LD_INT 57
35332: PUSH
35333: LD_INT 58
35335: PUSH
35336: LD_INT 59
35338: PUSH
35339: LD_INT 60
35341: PUSH
35342: LD_INT 61
35344: PUSH
35345: LD_INT 62
35347: PUSH
35348: LD_INT 80
35350: PUSH
35351: LD_INT 82
35353: PUSH
35354: LD_INT 83
35356: PUSH
35357: LD_INT 84
35359: PUSH
35360: LD_INT 85
35362: PUSH
35363: LD_INT 86
35365: PUSH
35366: EMPTY
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: ST_TO_ADDR
35419: GO 35886
35421: LD_INT 2
35423: DOUBLE
35424: EQUAL
35425: IFTRUE 35429
35427: GO 35655
35429: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35430: LD_ADDR_VAR 0 4
35434: PUSH
35435: LD_INT 35
35437: PUSH
35438: LD_INT 45
35440: PUSH
35441: LD_INT 46
35443: PUSH
35444: LD_INT 47
35446: PUSH
35447: LD_INT 82
35449: PUSH
35450: LD_INT 83
35452: PUSH
35453: LD_INT 84
35455: PUSH
35456: LD_INT 85
35458: PUSH
35459: LD_INT 87
35461: PUSH
35462: LD_INT 70
35464: PUSH
35465: LD_INT 1
35467: PUSH
35468: LD_INT 11
35470: PUSH
35471: LD_INT 3
35473: PUSH
35474: LD_INT 4
35476: PUSH
35477: LD_INT 5
35479: PUSH
35480: LD_INT 6
35482: PUSH
35483: LD_INT 15
35485: PUSH
35486: LD_INT 18
35488: PUSH
35489: LD_INT 7
35491: PUSH
35492: LD_INT 17
35494: PUSH
35495: LD_INT 8
35497: PUSH
35498: LD_INT 20
35500: PUSH
35501: LD_INT 21
35503: PUSH
35504: LD_INT 22
35506: PUSH
35507: LD_INT 72
35509: PUSH
35510: LD_INT 26
35512: PUSH
35513: LD_INT 69
35515: PUSH
35516: LD_INT 39
35518: PUSH
35519: LD_INT 40
35521: PUSH
35522: LD_INT 41
35524: PUSH
35525: LD_INT 42
35527: PUSH
35528: LD_INT 43
35530: PUSH
35531: LD_INT 48
35533: PUSH
35534: LD_INT 49
35536: PUSH
35537: LD_INT 50
35539: PUSH
35540: LD_INT 51
35542: PUSH
35543: LD_INT 52
35545: PUSH
35546: LD_INT 53
35548: PUSH
35549: LD_INT 54
35551: PUSH
35552: LD_INT 55
35554: PUSH
35555: LD_INT 56
35557: PUSH
35558: LD_INT 60
35560: PUSH
35561: LD_INT 61
35563: PUSH
35564: LD_INT 62
35566: PUSH
35567: LD_INT 66
35569: PUSH
35570: LD_INT 67
35572: PUSH
35573: LD_INT 68
35575: PUSH
35576: LD_INT 81
35578: PUSH
35579: LD_INT 82
35581: PUSH
35582: LD_INT 83
35584: PUSH
35585: LD_INT 84
35587: PUSH
35588: LD_INT 85
35590: PUSH
35591: LD_INT 87
35593: PUSH
35594: LD_INT 88
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: LIST
35601: LIST
35602: LIST
35603: LIST
35604: LIST
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: ST_TO_ADDR
35653: GO 35886
35655: LD_INT 3
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35663
35661: GO 35885
35663: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35664: LD_ADDR_VAR 0 4
35668: PUSH
35669: LD_INT 46
35671: PUSH
35672: LD_INT 47
35674: PUSH
35675: LD_INT 1
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: LD_INT 82
35683: PUSH
35684: LD_INT 83
35686: PUSH
35687: LD_INT 84
35689: PUSH
35690: LD_INT 85
35692: PUSH
35693: LD_INT 86
35695: PUSH
35696: LD_INT 11
35698: PUSH
35699: LD_INT 9
35701: PUSH
35702: LD_INT 20
35704: PUSH
35705: LD_INT 19
35707: PUSH
35708: LD_INT 21
35710: PUSH
35711: LD_INT 24
35713: PUSH
35714: LD_INT 22
35716: PUSH
35717: LD_INT 25
35719: PUSH
35720: LD_INT 28
35722: PUSH
35723: LD_INT 29
35725: PUSH
35726: LD_INT 30
35728: PUSH
35729: LD_INT 31
35731: PUSH
35732: LD_INT 37
35734: PUSH
35735: LD_INT 38
35737: PUSH
35738: LD_INT 32
35740: PUSH
35741: LD_INT 27
35743: PUSH
35744: LD_INT 33
35746: PUSH
35747: LD_INT 69
35749: PUSH
35750: LD_INT 39
35752: PUSH
35753: LD_INT 34
35755: PUSH
35756: LD_INT 40
35758: PUSH
35759: LD_INT 71
35761: PUSH
35762: LD_INT 23
35764: PUSH
35765: LD_INT 44
35767: PUSH
35768: LD_INT 48
35770: PUSH
35771: LD_INT 49
35773: PUSH
35774: LD_INT 50
35776: PUSH
35777: LD_INT 51
35779: PUSH
35780: LD_INT 52
35782: PUSH
35783: LD_INT 53
35785: PUSH
35786: LD_INT 54
35788: PUSH
35789: LD_INT 55
35791: PUSH
35792: LD_INT 56
35794: PUSH
35795: LD_INT 57
35797: PUSH
35798: LD_INT 58
35800: PUSH
35801: LD_INT 59
35803: PUSH
35804: LD_INT 63
35806: PUSH
35807: LD_INT 64
35809: PUSH
35810: LD_INT 65
35812: PUSH
35813: LD_INT 82
35815: PUSH
35816: LD_INT 83
35818: PUSH
35819: LD_INT 84
35821: PUSH
35822: LD_INT 85
35824: PUSH
35825: LD_INT 86
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: ST_TO_ADDR
35883: GO 35886
35885: POP
// if state > - 1 and state < 3 then
35886: LD_VAR 0 3
35890: PUSH
35891: LD_INT 1
35893: NEG
35894: GREATER
35895: PUSH
35896: LD_VAR 0 3
35900: PUSH
35901: LD_INT 3
35903: LESS
35904: AND
35905: IFFALSE 35962
// for i in result do
35907: LD_ADDR_VAR 0 5
35911: PUSH
35912: LD_VAR 0 4
35916: PUSH
35917: FOR_IN
35918: IFFALSE 35960
// if GetTech ( i , side ) <> state then
35920: LD_VAR 0 5
35924: PPUSH
35925: LD_VAR 0 1
35929: PPUSH
35930: CALL_OW 321
35934: PUSH
35935: LD_VAR 0 3
35939: NONEQUAL
35940: IFFALSE 35958
// result := result diff i ;
35942: LD_ADDR_VAR 0 4
35946: PUSH
35947: LD_VAR 0 4
35951: PUSH
35952: LD_VAR 0 5
35956: DIFF
35957: ST_TO_ADDR
35958: GO 35917
35960: POP
35961: POP
// end ;
35962: LD_VAR 0 4
35966: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35967: LD_INT 0
35969: PPUSH
35970: PPUSH
35971: PPUSH
// result := true ;
35972: LD_ADDR_VAR 0 3
35976: PUSH
35977: LD_INT 1
35979: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35980: LD_ADDR_VAR 0 5
35984: PUSH
35985: LD_VAR 0 2
35989: PPUSH
35990: CALL_OW 480
35994: ST_TO_ADDR
// if not tmp then
35995: LD_VAR 0 5
35999: NOT
36000: IFFALSE 36004
// exit ;
36002: GO 36053
// for i in tmp do
36004: LD_ADDR_VAR 0 4
36008: PUSH
36009: LD_VAR 0 5
36013: PUSH
36014: FOR_IN
36015: IFFALSE 36051
// if GetTech ( i , side ) <> state_researched then
36017: LD_VAR 0 4
36021: PPUSH
36022: LD_VAR 0 1
36026: PPUSH
36027: CALL_OW 321
36031: PUSH
36032: LD_INT 2
36034: NONEQUAL
36035: IFFALSE 36049
// begin result := false ;
36037: LD_ADDR_VAR 0 3
36041: PUSH
36042: LD_INT 0
36044: ST_TO_ADDR
// exit ;
36045: POP
36046: POP
36047: GO 36053
// end ;
36049: GO 36014
36051: POP
36052: POP
// end ;
36053: LD_VAR 0 3
36057: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36058: LD_INT 0
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
36072: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36073: LD_VAR 0 1
36077: NOT
36078: PUSH
36079: LD_VAR 0 1
36083: PPUSH
36084: CALL_OW 257
36088: PUSH
36089: LD_INT 9
36091: NONEQUAL
36092: OR
36093: IFFALSE 36097
// exit ;
36095: GO 36670
// side := GetSide ( unit ) ;
36097: LD_ADDR_VAR 0 9
36101: PUSH
36102: LD_VAR 0 1
36106: PPUSH
36107: CALL_OW 255
36111: ST_TO_ADDR
// tech_space := tech_spacanom ;
36112: LD_ADDR_VAR 0 12
36116: PUSH
36117: LD_INT 29
36119: ST_TO_ADDR
// tech_time := tech_taurad ;
36120: LD_ADDR_VAR 0 13
36124: PUSH
36125: LD_INT 28
36127: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36128: LD_ADDR_VAR 0 11
36132: PUSH
36133: LD_VAR 0 1
36137: PPUSH
36138: CALL_OW 310
36142: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36143: LD_VAR 0 11
36147: PPUSH
36148: CALL_OW 247
36152: PUSH
36153: LD_INT 2
36155: EQUAL
36156: IFFALSE 36160
// exit ;
36158: GO 36670
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36160: LD_ADDR_VAR 0 8
36164: PUSH
36165: LD_INT 81
36167: PUSH
36168: LD_VAR 0 9
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: PUSH
36177: LD_INT 3
36179: PUSH
36180: LD_INT 21
36182: PUSH
36183: LD_INT 3
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PPUSH
36198: CALL_OW 69
36202: ST_TO_ADDR
// if not tmp then
36203: LD_VAR 0 8
36207: NOT
36208: IFFALSE 36212
// exit ;
36210: GO 36670
// if in_unit then
36212: LD_VAR 0 11
36216: IFFALSE 36240
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36218: LD_ADDR_VAR 0 10
36222: PUSH
36223: LD_VAR 0 8
36227: PPUSH
36228: LD_VAR 0 11
36232: PPUSH
36233: CALL_OW 74
36237: ST_TO_ADDR
36238: GO 36260
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36240: LD_ADDR_VAR 0 10
36244: PUSH
36245: LD_VAR 0 8
36249: PPUSH
36250: LD_VAR 0 1
36254: PPUSH
36255: CALL_OW 74
36259: ST_TO_ADDR
// if not enemy then
36260: LD_VAR 0 10
36264: NOT
36265: IFFALSE 36269
// exit ;
36267: GO 36670
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36269: LD_VAR 0 11
36273: PUSH
36274: LD_VAR 0 11
36278: PPUSH
36279: LD_VAR 0 10
36283: PPUSH
36284: CALL_OW 296
36288: PUSH
36289: LD_INT 13
36291: GREATER
36292: AND
36293: PUSH
36294: LD_VAR 0 1
36298: PPUSH
36299: LD_VAR 0 10
36303: PPUSH
36304: CALL_OW 296
36308: PUSH
36309: LD_INT 12
36311: GREATER
36312: OR
36313: IFFALSE 36317
// exit ;
36315: GO 36670
// missile := [ 1 ] ;
36317: LD_ADDR_VAR 0 14
36321: PUSH
36322: LD_INT 1
36324: PUSH
36325: EMPTY
36326: LIST
36327: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36328: LD_VAR 0 9
36332: PPUSH
36333: LD_VAR 0 12
36337: PPUSH
36338: CALL_OW 325
36342: IFFALSE 36371
// missile := Replace ( missile , missile + 1 , 2 ) ;
36344: LD_ADDR_VAR 0 14
36348: PUSH
36349: LD_VAR 0 14
36353: PPUSH
36354: LD_VAR 0 14
36358: PUSH
36359: LD_INT 1
36361: PLUS
36362: PPUSH
36363: LD_INT 2
36365: PPUSH
36366: CALL_OW 1
36370: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36371: LD_VAR 0 9
36375: PPUSH
36376: LD_VAR 0 13
36380: PPUSH
36381: CALL_OW 325
36385: PUSH
36386: LD_VAR 0 10
36390: PPUSH
36391: CALL_OW 255
36395: PPUSH
36396: LD_VAR 0 13
36400: PPUSH
36401: CALL_OW 325
36405: NOT
36406: AND
36407: IFFALSE 36436
// missile := Replace ( missile , missile + 1 , 3 ) ;
36409: LD_ADDR_VAR 0 14
36413: PUSH
36414: LD_VAR 0 14
36418: PPUSH
36419: LD_VAR 0 14
36423: PUSH
36424: LD_INT 1
36426: PLUS
36427: PPUSH
36428: LD_INT 3
36430: PPUSH
36431: CALL_OW 1
36435: ST_TO_ADDR
// if missile < 2 then
36436: LD_VAR 0 14
36440: PUSH
36441: LD_INT 2
36443: LESS
36444: IFFALSE 36448
// exit ;
36446: GO 36670
// x := GetX ( enemy ) ;
36448: LD_ADDR_VAR 0 4
36452: PUSH
36453: LD_VAR 0 10
36457: PPUSH
36458: CALL_OW 250
36462: ST_TO_ADDR
// y := GetY ( enemy ) ;
36463: LD_ADDR_VAR 0 5
36467: PUSH
36468: LD_VAR 0 10
36472: PPUSH
36473: CALL_OW 251
36477: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36478: LD_ADDR_VAR 0 6
36482: PUSH
36483: LD_VAR 0 4
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PPUSH
36492: LD_INT 1
36494: PPUSH
36495: CALL_OW 12
36499: PLUS
36500: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36501: LD_ADDR_VAR 0 7
36505: PUSH
36506: LD_VAR 0 5
36510: PUSH
36511: LD_INT 1
36513: NEG
36514: PPUSH
36515: LD_INT 1
36517: PPUSH
36518: CALL_OW 12
36522: PLUS
36523: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36524: LD_VAR 0 6
36528: PPUSH
36529: LD_VAR 0 7
36533: PPUSH
36534: CALL_OW 488
36538: NOT
36539: IFFALSE 36561
// begin _x := x ;
36541: LD_ADDR_VAR 0 6
36545: PUSH
36546: LD_VAR 0 4
36550: ST_TO_ADDR
// _y := y ;
36551: LD_ADDR_VAR 0 7
36555: PUSH
36556: LD_VAR 0 5
36560: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36561: LD_ADDR_VAR 0 3
36565: PUSH
36566: LD_INT 1
36568: PPUSH
36569: LD_VAR 0 14
36573: PPUSH
36574: CALL_OW 12
36578: ST_TO_ADDR
// case i of 1 :
36579: LD_VAR 0 3
36583: PUSH
36584: LD_INT 1
36586: DOUBLE
36587: EQUAL
36588: IFTRUE 36592
36590: GO 36609
36592: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36593: LD_VAR 0 1
36597: PPUSH
36598: LD_VAR 0 10
36602: PPUSH
36603: CALL_OW 115
36607: GO 36670
36609: LD_INT 2
36611: DOUBLE
36612: EQUAL
36613: IFTRUE 36617
36615: GO 36639
36617: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36618: LD_VAR 0 1
36622: PPUSH
36623: LD_VAR 0 6
36627: PPUSH
36628: LD_VAR 0 7
36632: PPUSH
36633: CALL_OW 153
36637: GO 36670
36639: LD_INT 3
36641: DOUBLE
36642: EQUAL
36643: IFTRUE 36647
36645: GO 36669
36647: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36648: LD_VAR 0 1
36652: PPUSH
36653: LD_VAR 0 6
36657: PPUSH
36658: LD_VAR 0 7
36662: PPUSH
36663: CALL_OW 154
36667: GO 36670
36669: POP
// end ;
36670: LD_VAR 0 2
36674: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36675: LD_INT 0
36677: PPUSH
36678: PPUSH
36679: PPUSH
36680: PPUSH
36681: PPUSH
36682: PPUSH
// if not unit or not building then
36683: LD_VAR 0 1
36687: NOT
36688: PUSH
36689: LD_VAR 0 2
36693: NOT
36694: OR
36695: IFFALSE 36699
// exit ;
36697: GO 36857
// x := GetX ( building ) ;
36699: LD_ADDR_VAR 0 5
36703: PUSH
36704: LD_VAR 0 2
36708: PPUSH
36709: CALL_OW 250
36713: ST_TO_ADDR
// y := GetY ( building ) ;
36714: LD_ADDR_VAR 0 6
36718: PUSH
36719: LD_VAR 0 2
36723: PPUSH
36724: CALL_OW 251
36728: ST_TO_ADDR
// for i = 0 to 5 do
36729: LD_ADDR_VAR 0 4
36733: PUSH
36734: DOUBLE
36735: LD_INT 0
36737: DEC
36738: ST_TO_ADDR
36739: LD_INT 5
36741: PUSH
36742: FOR_TO
36743: IFFALSE 36855
// begin _x := ShiftX ( x , i , 3 ) ;
36745: LD_ADDR_VAR 0 7
36749: PUSH
36750: LD_VAR 0 5
36754: PPUSH
36755: LD_VAR 0 4
36759: PPUSH
36760: LD_INT 3
36762: PPUSH
36763: CALL_OW 272
36767: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36768: LD_ADDR_VAR 0 8
36772: PUSH
36773: LD_VAR 0 6
36777: PPUSH
36778: LD_VAR 0 4
36782: PPUSH
36783: LD_INT 3
36785: PPUSH
36786: CALL_OW 273
36790: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36791: LD_VAR 0 7
36795: PPUSH
36796: LD_VAR 0 8
36800: PPUSH
36801: CALL_OW 488
36805: NOT
36806: IFFALSE 36810
// continue ;
36808: GO 36742
// if HexInfo ( _x , _y ) = 0 then
36810: LD_VAR 0 7
36814: PPUSH
36815: LD_VAR 0 8
36819: PPUSH
36820: CALL_OW 428
36824: PUSH
36825: LD_INT 0
36827: EQUAL
36828: IFFALSE 36853
// begin ComMoveXY ( unit , _x , _y ) ;
36830: LD_VAR 0 1
36834: PPUSH
36835: LD_VAR 0 7
36839: PPUSH
36840: LD_VAR 0 8
36844: PPUSH
36845: CALL_OW 111
// exit ;
36849: POP
36850: POP
36851: GO 36857
// end ; end ;
36853: GO 36742
36855: POP
36856: POP
// end ;
36857: LD_VAR 0 3
36861: RET
// export function ScanBase ( side , base_area ) ; begin
36862: LD_INT 0
36864: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36865: LD_ADDR_VAR 0 3
36869: PUSH
36870: LD_VAR 0 2
36874: PPUSH
36875: LD_INT 81
36877: PUSH
36878: LD_VAR 0 1
36882: PUSH
36883: EMPTY
36884: LIST
36885: LIST
36886: PPUSH
36887: CALL_OW 70
36891: ST_TO_ADDR
// end ;
36892: LD_VAR 0 3
36896: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36897: LD_INT 0
36899: PPUSH
36900: PPUSH
36901: PPUSH
36902: PPUSH
// result := false ;
36903: LD_ADDR_VAR 0 2
36907: PUSH
36908: LD_INT 0
36910: ST_TO_ADDR
// side := GetSide ( unit ) ;
36911: LD_ADDR_VAR 0 3
36915: PUSH
36916: LD_VAR 0 1
36920: PPUSH
36921: CALL_OW 255
36925: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36926: LD_ADDR_VAR 0 4
36930: PUSH
36931: LD_VAR 0 1
36935: PPUSH
36936: CALL_OW 248
36940: ST_TO_ADDR
// case nat of 1 :
36941: LD_VAR 0 4
36945: PUSH
36946: LD_INT 1
36948: DOUBLE
36949: EQUAL
36950: IFTRUE 36954
36952: GO 36965
36954: POP
// tech := tech_lassight ; 2 :
36955: LD_ADDR_VAR 0 5
36959: PUSH
36960: LD_INT 12
36962: ST_TO_ADDR
36963: GO 37004
36965: LD_INT 2
36967: DOUBLE
36968: EQUAL
36969: IFTRUE 36973
36971: GO 36984
36973: POP
// tech := tech_mortar ; 3 :
36974: LD_ADDR_VAR 0 5
36978: PUSH
36979: LD_INT 41
36981: ST_TO_ADDR
36982: GO 37004
36984: LD_INT 3
36986: DOUBLE
36987: EQUAL
36988: IFTRUE 36992
36990: GO 37003
36992: POP
// tech := tech_bazooka ; end ;
36993: LD_ADDR_VAR 0 5
36997: PUSH
36998: LD_INT 44
37000: ST_TO_ADDR
37001: GO 37004
37003: POP
// if Researched ( side , tech ) then
37004: LD_VAR 0 3
37008: PPUSH
37009: LD_VAR 0 5
37013: PPUSH
37014: CALL_OW 325
37018: IFFALSE 37045
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37020: LD_ADDR_VAR 0 2
37024: PUSH
37025: LD_INT 5
37027: PUSH
37028: LD_INT 8
37030: PUSH
37031: LD_INT 9
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: LIST
37038: PUSH
37039: LD_VAR 0 4
37043: ARRAY
37044: ST_TO_ADDR
// end ;
37045: LD_VAR 0 2
37049: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37050: LD_INT 0
37052: PPUSH
37053: PPUSH
37054: PPUSH
// if not mines then
37055: LD_VAR 0 2
37059: NOT
37060: IFFALSE 37064
// exit ;
37062: GO 37208
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37064: LD_ADDR_VAR 0 5
37068: PUSH
37069: LD_INT 81
37071: PUSH
37072: LD_VAR 0 1
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 3
37083: PUSH
37084: LD_INT 21
37086: PUSH
37087: LD_INT 3
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PPUSH
37102: CALL_OW 69
37106: ST_TO_ADDR
// for i in mines do
37107: LD_ADDR_VAR 0 4
37111: PUSH
37112: LD_VAR 0 2
37116: PUSH
37117: FOR_IN
37118: IFFALSE 37206
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37120: LD_VAR 0 4
37124: PUSH
37125: LD_INT 1
37127: ARRAY
37128: PPUSH
37129: LD_VAR 0 4
37133: PUSH
37134: LD_INT 2
37136: ARRAY
37137: PPUSH
37138: CALL_OW 458
37142: NOT
37143: IFFALSE 37147
// continue ;
37145: GO 37117
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37147: LD_VAR 0 4
37151: PUSH
37152: LD_INT 1
37154: ARRAY
37155: PPUSH
37156: LD_VAR 0 4
37160: PUSH
37161: LD_INT 2
37163: ARRAY
37164: PPUSH
37165: CALL_OW 428
37169: PUSH
37170: LD_VAR 0 5
37174: IN
37175: IFFALSE 37204
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37177: LD_VAR 0 4
37181: PUSH
37182: LD_INT 1
37184: ARRAY
37185: PPUSH
37186: LD_VAR 0 4
37190: PUSH
37191: LD_INT 2
37193: ARRAY
37194: PPUSH
37195: LD_VAR 0 1
37199: PPUSH
37200: CALL_OW 456
// end ;
37204: GO 37117
37206: POP
37207: POP
// end ;
37208: LD_VAR 0 3
37212: RET
// export function Count ( array ) ; var i ; begin
37213: LD_INT 0
37215: PPUSH
37216: PPUSH
// result := 0 ;
37217: LD_ADDR_VAR 0 2
37221: PUSH
37222: LD_INT 0
37224: ST_TO_ADDR
// for i in array do
37225: LD_ADDR_VAR 0 3
37229: PUSH
37230: LD_VAR 0 1
37234: PUSH
37235: FOR_IN
37236: IFFALSE 37260
// if i then
37238: LD_VAR 0 3
37242: IFFALSE 37258
// result := result + 1 ;
37244: LD_ADDR_VAR 0 2
37248: PUSH
37249: LD_VAR 0 2
37253: PUSH
37254: LD_INT 1
37256: PLUS
37257: ST_TO_ADDR
37258: GO 37235
37260: POP
37261: POP
// end ;
37262: LD_VAR 0 2
37266: RET
// export function IsEmpty ( building ) ; begin
37267: LD_INT 0
37269: PPUSH
// if not building then
37270: LD_VAR 0 1
37274: NOT
37275: IFFALSE 37279
// exit ;
37277: GO 37322
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37279: LD_ADDR_VAR 0 2
37283: PUSH
37284: LD_VAR 0 1
37288: PUSH
37289: LD_INT 22
37291: PUSH
37292: LD_VAR 0 1
37296: PPUSH
37297: CALL_OW 255
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: LD_INT 58
37308: PUSH
37309: EMPTY
37310: LIST
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PPUSH
37316: CALL_OW 69
37320: IN
37321: ST_TO_ADDR
// end ;
37322: LD_VAR 0 2
37326: RET
// export function IsNotFull ( building ) ; var places ; begin
37327: LD_INT 0
37329: PPUSH
37330: PPUSH
// if not building then
37331: LD_VAR 0 1
37335: NOT
37336: IFFALSE 37340
// exit ;
37338: GO 37511
// result := false ;
37340: LD_ADDR_VAR 0 2
37344: PUSH
37345: LD_INT 0
37347: ST_TO_ADDR
// places := 0 ;
37348: LD_ADDR_VAR 0 3
37352: PUSH
37353: LD_INT 0
37355: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
37356: LD_VAR 0 1
37360: PPUSH
37361: CALL_OW 266
37365: PUSH
37366: LD_INT 0
37368: DOUBLE
37369: EQUAL
37370: IFTRUE 37428
37372: LD_INT 1
37374: DOUBLE
37375: EQUAL
37376: IFTRUE 37428
37378: LD_INT 6
37380: DOUBLE
37381: EQUAL
37382: IFTRUE 37428
37384: LD_INT 7
37386: DOUBLE
37387: EQUAL
37388: IFTRUE 37428
37390: LD_INT 8
37392: DOUBLE
37393: EQUAL
37394: IFTRUE 37428
37396: LD_INT 4
37398: DOUBLE
37399: EQUAL
37400: IFTRUE 37428
37402: LD_INT 5
37404: DOUBLE
37405: EQUAL
37406: IFTRUE 37428
37408: LD_INT 2
37410: DOUBLE
37411: EQUAL
37412: IFTRUE 37428
37414: LD_INT 3
37416: DOUBLE
37417: EQUAL
37418: IFTRUE 37428
37420: LD_INT 35
37422: DOUBLE
37423: EQUAL
37424: IFTRUE 37428
37426: GO 37439
37428: POP
// places := 6 ; b_bunker , b_breastwork :
37429: LD_ADDR_VAR 0 3
37433: PUSH
37434: LD_INT 6
37436: ST_TO_ADDR
37437: GO 37484
37439: LD_INT 32
37441: DOUBLE
37442: EQUAL
37443: IFTRUE 37453
37445: LD_INT 31
37447: DOUBLE
37448: EQUAL
37449: IFTRUE 37453
37451: GO 37464
37453: POP
// places := 1 ; b_control_tower :
37454: LD_ADDR_VAR 0 3
37458: PUSH
37459: LD_INT 1
37461: ST_TO_ADDR
37462: GO 37484
37464: LD_INT 36
37466: DOUBLE
37467: EQUAL
37468: IFTRUE 37472
37470: GO 37483
37472: POP
// places := 3 ; end ;
37473: LD_ADDR_VAR 0 3
37477: PUSH
37478: LD_INT 3
37480: ST_TO_ADDR
37481: GO 37484
37483: POP
// if places then
37484: LD_VAR 0 3
37488: IFFALSE 37511
// result := UnitsInside ( building ) < places ;
37490: LD_ADDR_VAR 0 2
37494: PUSH
37495: LD_VAR 0 1
37499: PPUSH
37500: CALL_OW 313
37504: PUSH
37505: LD_VAR 0 3
37509: LESS
37510: ST_TO_ADDR
// end ;
37511: LD_VAR 0 2
37515: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37516: LD_INT 0
37518: PPUSH
37519: PPUSH
37520: PPUSH
37521: PPUSH
// tmp := [ ] ;
37522: LD_ADDR_VAR 0 3
37526: PUSH
37527: EMPTY
37528: ST_TO_ADDR
// list := [ ] ;
37529: LD_ADDR_VAR 0 5
37533: PUSH
37534: EMPTY
37535: ST_TO_ADDR
// for i = 16 to 25 do
37536: LD_ADDR_VAR 0 4
37540: PUSH
37541: DOUBLE
37542: LD_INT 16
37544: DEC
37545: ST_TO_ADDR
37546: LD_INT 25
37548: PUSH
37549: FOR_TO
37550: IFFALSE 37623
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37552: LD_ADDR_VAR 0 3
37556: PUSH
37557: LD_VAR 0 3
37561: PUSH
37562: LD_INT 22
37564: PUSH
37565: LD_VAR 0 1
37569: PPUSH
37570: CALL_OW 255
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 91
37581: PUSH
37582: LD_VAR 0 1
37586: PUSH
37587: LD_INT 6
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 30
37597: PUSH
37598: LD_VAR 0 4
37602: PUSH
37603: EMPTY
37604: LIST
37605: LIST
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: LIST
37611: PUSH
37612: EMPTY
37613: LIST
37614: PPUSH
37615: CALL_OW 69
37619: ADD
37620: ST_TO_ADDR
37621: GO 37549
37623: POP
37624: POP
// for i = 1 to tmp do
37625: LD_ADDR_VAR 0 4
37629: PUSH
37630: DOUBLE
37631: LD_INT 1
37633: DEC
37634: ST_TO_ADDR
37635: LD_VAR 0 3
37639: PUSH
37640: FOR_TO
37641: IFFALSE 37729
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37643: LD_ADDR_VAR 0 5
37647: PUSH
37648: LD_VAR 0 5
37652: PUSH
37653: LD_VAR 0 3
37657: PUSH
37658: LD_VAR 0 4
37662: ARRAY
37663: PPUSH
37664: CALL_OW 266
37668: PUSH
37669: LD_VAR 0 3
37673: PUSH
37674: LD_VAR 0 4
37678: ARRAY
37679: PPUSH
37680: CALL_OW 250
37684: PUSH
37685: LD_VAR 0 3
37689: PUSH
37690: LD_VAR 0 4
37694: ARRAY
37695: PPUSH
37696: CALL_OW 251
37700: PUSH
37701: LD_VAR 0 3
37705: PUSH
37706: LD_VAR 0 4
37710: ARRAY
37711: PPUSH
37712: CALL_OW 254
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: PUSH
37723: EMPTY
37724: LIST
37725: ADD
37726: ST_TO_ADDR
37727: GO 37640
37729: POP
37730: POP
// result := list ;
37731: LD_ADDR_VAR 0 2
37735: PUSH
37736: LD_VAR 0 5
37740: ST_TO_ADDR
// end ;
37741: LD_VAR 0 2
37745: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37746: LD_INT 0
37748: PPUSH
37749: PPUSH
37750: PPUSH
37751: PPUSH
37752: PPUSH
37753: PPUSH
37754: PPUSH
// if not factory then
37755: LD_VAR 0 1
37759: NOT
37760: IFFALSE 37764
// exit ;
37762: GO 38357
// if control = control_apeman then
37764: LD_VAR 0 4
37768: PUSH
37769: LD_INT 5
37771: EQUAL
37772: IFFALSE 37881
// begin tmp := UnitsInside ( factory ) ;
37774: LD_ADDR_VAR 0 8
37778: PUSH
37779: LD_VAR 0 1
37783: PPUSH
37784: CALL_OW 313
37788: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37789: LD_VAR 0 8
37793: PPUSH
37794: LD_INT 25
37796: PUSH
37797: LD_INT 12
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PPUSH
37804: CALL_OW 72
37808: NOT
37809: IFFALSE 37819
// control := control_manual ;
37811: LD_ADDR_VAR 0 4
37815: PUSH
37816: LD_INT 1
37818: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37819: LD_ADDR_VAR 0 8
37823: PUSH
37824: LD_VAR 0 1
37828: PPUSH
37829: CALL 37516 0 1
37833: ST_TO_ADDR
// if tmp then
37834: LD_VAR 0 8
37838: IFFALSE 37881
// begin for i in tmp do
37840: LD_ADDR_VAR 0 7
37844: PUSH
37845: LD_VAR 0 8
37849: PUSH
37850: FOR_IN
37851: IFFALSE 37879
// if i [ 1 ] = b_ext_radio then
37853: LD_VAR 0 7
37857: PUSH
37858: LD_INT 1
37860: ARRAY
37861: PUSH
37862: LD_INT 22
37864: EQUAL
37865: IFFALSE 37877
// begin control := control_remote ;
37867: LD_ADDR_VAR 0 4
37871: PUSH
37872: LD_INT 2
37874: ST_TO_ADDR
// break ;
37875: GO 37879
// end ;
37877: GO 37850
37879: POP
37880: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37881: LD_VAR 0 1
37885: PPUSH
37886: LD_VAR 0 2
37890: PPUSH
37891: LD_VAR 0 3
37895: PPUSH
37896: LD_VAR 0 4
37900: PPUSH
37901: LD_VAR 0 5
37905: PPUSH
37906: CALL_OW 448
37910: IFFALSE 37945
// begin result := [ chassis , engine , control , weapon ] ;
37912: LD_ADDR_VAR 0 6
37916: PUSH
37917: LD_VAR 0 2
37921: PUSH
37922: LD_VAR 0 3
37926: PUSH
37927: LD_VAR 0 4
37931: PUSH
37932: LD_VAR 0 5
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: ST_TO_ADDR
// exit ;
37943: GO 38357
// end ; _chassis := AvailableChassisList ( factory ) ;
37945: LD_ADDR_VAR 0 9
37949: PUSH
37950: LD_VAR 0 1
37954: PPUSH
37955: CALL_OW 475
37959: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37960: LD_ADDR_VAR 0 11
37964: PUSH
37965: LD_VAR 0 1
37969: PPUSH
37970: CALL_OW 476
37974: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37975: LD_ADDR_VAR 0 12
37979: PUSH
37980: LD_VAR 0 1
37984: PPUSH
37985: CALL_OW 477
37989: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37990: LD_ADDR_VAR 0 10
37994: PUSH
37995: LD_VAR 0 1
37999: PPUSH
38000: CALL_OW 478
38004: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
38005: LD_VAR 0 9
38009: NOT
38010: PUSH
38011: LD_VAR 0 11
38015: NOT
38016: OR
38017: PUSH
38018: LD_VAR 0 12
38022: NOT
38023: OR
38024: PUSH
38025: LD_VAR 0 10
38029: NOT
38030: OR
38031: IFFALSE 38066
// begin result := [ chassis , engine , control , weapon ] ;
38033: LD_ADDR_VAR 0 6
38037: PUSH
38038: LD_VAR 0 2
38042: PUSH
38043: LD_VAR 0 3
38047: PUSH
38048: LD_VAR 0 4
38052: PUSH
38053: LD_VAR 0 5
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: ST_TO_ADDR
// exit ;
38064: GO 38357
// end ; if not chassis in _chassis then
38066: LD_VAR 0 2
38070: PUSH
38071: LD_VAR 0 9
38075: IN
38076: NOT
38077: IFFALSE 38103
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
38079: LD_ADDR_VAR 0 2
38083: PUSH
38084: LD_VAR 0 9
38088: PUSH
38089: LD_INT 1
38091: PPUSH
38092: LD_VAR 0 9
38096: PPUSH
38097: CALL_OW 12
38101: ARRAY
38102: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
38103: LD_VAR 0 2
38107: PPUSH
38108: LD_VAR 0 3
38112: PPUSH
38113: CALL 38362 0 2
38117: NOT
38118: IFFALSE 38177
// repeat engine := _engine [ 1 ] ;
38120: LD_ADDR_VAR 0 3
38124: PUSH
38125: LD_VAR 0 11
38129: PUSH
38130: LD_INT 1
38132: ARRAY
38133: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
38134: LD_ADDR_VAR 0 11
38138: PUSH
38139: LD_VAR 0 11
38143: PPUSH
38144: LD_INT 1
38146: PPUSH
38147: CALL_OW 3
38151: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
38152: LD_VAR 0 2
38156: PPUSH
38157: LD_VAR 0 3
38161: PPUSH
38162: CALL 38362 0 2
38166: PUSH
38167: LD_VAR 0 11
38171: PUSH
38172: EMPTY
38173: EQUAL
38174: OR
38175: IFFALSE 38120
// if not control in _control then
38177: LD_VAR 0 4
38181: PUSH
38182: LD_VAR 0 12
38186: IN
38187: NOT
38188: IFFALSE 38214
// control := _control [ rand ( 1 , _control ) ] ;
38190: LD_ADDR_VAR 0 4
38194: PUSH
38195: LD_VAR 0 12
38199: PUSH
38200: LD_INT 1
38202: PPUSH
38203: LD_VAR 0 12
38207: PPUSH
38208: CALL_OW 12
38212: ARRAY
38213: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38214: LD_VAR 0 2
38218: PPUSH
38219: LD_VAR 0 5
38223: PPUSH
38224: CALL 38582 0 2
38228: NOT
38229: IFFALSE 38288
// repeat weapon := _weapon [ 1 ] ;
38231: LD_ADDR_VAR 0 5
38235: PUSH
38236: LD_VAR 0 10
38240: PUSH
38241: LD_INT 1
38243: ARRAY
38244: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38245: LD_ADDR_VAR 0 10
38249: PUSH
38250: LD_VAR 0 10
38254: PPUSH
38255: LD_INT 1
38257: PPUSH
38258: CALL_OW 3
38262: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38263: LD_VAR 0 2
38267: PPUSH
38268: LD_VAR 0 5
38272: PPUSH
38273: CALL 38582 0 2
38277: PUSH
38278: LD_VAR 0 10
38282: PUSH
38283: EMPTY
38284: EQUAL
38285: OR
38286: IFFALSE 38231
// result := [ ] ;
38288: LD_ADDR_VAR 0 6
38292: PUSH
38293: EMPTY
38294: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38295: LD_VAR 0 1
38299: PPUSH
38300: LD_VAR 0 2
38304: PPUSH
38305: LD_VAR 0 3
38309: PPUSH
38310: LD_VAR 0 4
38314: PPUSH
38315: LD_VAR 0 5
38319: PPUSH
38320: CALL_OW 448
38324: IFFALSE 38357
// result := [ chassis , engine , control , weapon ] ;
38326: LD_ADDR_VAR 0 6
38330: PUSH
38331: LD_VAR 0 2
38335: PUSH
38336: LD_VAR 0 3
38340: PUSH
38341: LD_VAR 0 4
38345: PUSH
38346: LD_VAR 0 5
38350: PUSH
38351: EMPTY
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: ST_TO_ADDR
// end ;
38357: LD_VAR 0 6
38361: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38362: LD_INT 0
38364: PPUSH
// if not chassis or not engine then
38365: LD_VAR 0 1
38369: NOT
38370: PUSH
38371: LD_VAR 0 2
38375: NOT
38376: OR
38377: IFFALSE 38381
// exit ;
38379: GO 38577
// case engine of engine_solar :
38381: LD_VAR 0 2
38385: PUSH
38386: LD_INT 2
38388: DOUBLE
38389: EQUAL
38390: IFTRUE 38394
38392: GO 38432
38394: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38395: LD_ADDR_VAR 0 3
38399: PUSH
38400: LD_INT 11
38402: PUSH
38403: LD_INT 12
38405: PUSH
38406: LD_INT 13
38408: PUSH
38409: LD_INT 14
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 2
38417: PUSH
38418: LD_INT 3
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: ST_TO_ADDR
38430: GO 38561
38432: LD_INT 1
38434: DOUBLE
38435: EQUAL
38436: IFTRUE 38440
38438: GO 38502
38440: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38441: LD_ADDR_VAR 0 3
38445: PUSH
38446: LD_INT 11
38448: PUSH
38449: LD_INT 12
38451: PUSH
38452: LD_INT 13
38454: PUSH
38455: LD_INT 14
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 2
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: LD_INT 4
38469: PUSH
38470: LD_INT 5
38472: PUSH
38473: LD_INT 21
38475: PUSH
38476: LD_INT 23
38478: PUSH
38479: LD_INT 22
38481: PUSH
38482: LD_INT 24
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
38500: GO 38561
38502: LD_INT 3
38504: DOUBLE
38505: EQUAL
38506: IFTRUE 38510
38508: GO 38560
38510: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38511: LD_ADDR_VAR 0 3
38515: PUSH
38516: LD_INT 13
38518: PUSH
38519: LD_INT 14
38521: PUSH
38522: LD_INT 2
38524: PUSH
38525: LD_INT 3
38527: PUSH
38528: LD_INT 4
38530: PUSH
38531: LD_INT 5
38533: PUSH
38534: LD_INT 21
38536: PUSH
38537: LD_INT 22
38539: PUSH
38540: LD_INT 23
38542: PUSH
38543: LD_INT 24
38545: PUSH
38546: EMPTY
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: ST_TO_ADDR
38558: GO 38561
38560: POP
// result := ( chassis in result ) ;
38561: LD_ADDR_VAR 0 3
38565: PUSH
38566: LD_VAR 0 1
38570: PUSH
38571: LD_VAR 0 3
38575: IN
38576: ST_TO_ADDR
// end ;
38577: LD_VAR 0 3
38581: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38582: LD_INT 0
38584: PPUSH
// if not chassis or not weapon then
38585: LD_VAR 0 1
38589: NOT
38590: PUSH
38591: LD_VAR 0 2
38595: NOT
38596: OR
38597: IFFALSE 38601
// exit ;
38599: GO 39661
// case weapon of us_machine_gun :
38601: LD_VAR 0 2
38605: PUSH
38606: LD_INT 2
38608: DOUBLE
38609: EQUAL
38610: IFTRUE 38614
38612: GO 38644
38614: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38615: LD_ADDR_VAR 0 3
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 3
38628: PUSH
38629: LD_INT 4
38631: PUSH
38632: LD_INT 5
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: ST_TO_ADDR
38642: GO 39645
38644: LD_INT 3
38646: DOUBLE
38647: EQUAL
38648: IFTRUE 38652
38650: GO 38682
38652: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38653: LD_ADDR_VAR 0 3
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: LD_INT 3
38666: PUSH
38667: LD_INT 4
38669: PUSH
38670: LD_INT 5
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: ST_TO_ADDR
38680: GO 39645
38682: LD_INT 11
38684: DOUBLE
38685: EQUAL
38686: IFTRUE 38690
38688: GO 38720
38690: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38691: LD_ADDR_VAR 0 3
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 2
38701: PUSH
38702: LD_INT 3
38704: PUSH
38705: LD_INT 4
38707: PUSH
38708: LD_INT 5
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: ST_TO_ADDR
38718: GO 39645
38720: LD_INT 4
38722: DOUBLE
38723: EQUAL
38724: IFTRUE 38728
38726: GO 38754
38728: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38729: LD_ADDR_VAR 0 3
38733: PUSH
38734: LD_INT 2
38736: PUSH
38737: LD_INT 3
38739: PUSH
38740: LD_INT 4
38742: PUSH
38743: LD_INT 5
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: ST_TO_ADDR
38752: GO 39645
38754: LD_INT 5
38756: DOUBLE
38757: EQUAL
38758: IFTRUE 38762
38760: GO 38788
38762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38763: LD_ADDR_VAR 0 3
38767: PUSH
38768: LD_INT 2
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: LD_INT 4
38776: PUSH
38777: LD_INT 5
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: LIST
38784: LIST
38785: ST_TO_ADDR
38786: GO 39645
38788: LD_INT 9
38790: DOUBLE
38791: EQUAL
38792: IFTRUE 38796
38794: GO 38822
38796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38797: LD_ADDR_VAR 0 3
38801: PUSH
38802: LD_INT 2
38804: PUSH
38805: LD_INT 3
38807: PUSH
38808: LD_INT 4
38810: PUSH
38811: LD_INT 5
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: ST_TO_ADDR
38820: GO 39645
38822: LD_INT 7
38824: DOUBLE
38825: EQUAL
38826: IFTRUE 38830
38828: GO 38856
38830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38831: LD_ADDR_VAR 0 3
38835: PUSH
38836: LD_INT 2
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: LD_INT 4
38844: PUSH
38845: LD_INT 5
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: ST_TO_ADDR
38854: GO 39645
38856: LD_INT 12
38858: DOUBLE
38859: EQUAL
38860: IFTRUE 38864
38862: GO 38890
38864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38865: LD_ADDR_VAR 0 3
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 3
38875: PUSH
38876: LD_INT 4
38878: PUSH
38879: LD_INT 5
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: ST_TO_ADDR
38888: GO 39645
38890: LD_INT 13
38892: DOUBLE
38893: EQUAL
38894: IFTRUE 38898
38896: GO 38924
38898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38899: LD_ADDR_VAR 0 3
38903: PUSH
38904: LD_INT 2
38906: PUSH
38907: LD_INT 3
38909: PUSH
38910: LD_INT 4
38912: PUSH
38913: LD_INT 5
38915: PUSH
38916: EMPTY
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: ST_TO_ADDR
38922: GO 39645
38924: LD_INT 14
38926: DOUBLE
38927: EQUAL
38928: IFTRUE 38932
38930: GO 38950
38932: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38933: LD_ADDR_VAR 0 3
38937: PUSH
38938: LD_INT 4
38940: PUSH
38941: LD_INT 5
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: ST_TO_ADDR
38948: GO 39645
38950: LD_INT 6
38952: DOUBLE
38953: EQUAL
38954: IFTRUE 38958
38956: GO 38976
38958: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38959: LD_ADDR_VAR 0 3
38963: PUSH
38964: LD_INT 4
38966: PUSH
38967: LD_INT 5
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: ST_TO_ADDR
38974: GO 39645
38976: LD_INT 10
38978: DOUBLE
38979: EQUAL
38980: IFTRUE 38984
38982: GO 39002
38984: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38985: LD_ADDR_VAR 0 3
38989: PUSH
38990: LD_INT 4
38992: PUSH
38993: LD_INT 5
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: ST_TO_ADDR
39000: GO 39645
39002: LD_INT 22
39004: DOUBLE
39005: EQUAL
39006: IFTRUE 39010
39008: GO 39036
39010: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
39011: LD_ADDR_VAR 0 3
39015: PUSH
39016: LD_INT 11
39018: PUSH
39019: LD_INT 12
39021: PUSH
39022: LD_INT 13
39024: PUSH
39025: LD_INT 14
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: LIST
39032: LIST
39033: ST_TO_ADDR
39034: GO 39645
39036: LD_INT 23
39038: DOUBLE
39039: EQUAL
39040: IFTRUE 39044
39042: GO 39070
39044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
39045: LD_ADDR_VAR 0 3
39049: PUSH
39050: LD_INT 11
39052: PUSH
39053: LD_INT 12
39055: PUSH
39056: LD_INT 13
39058: PUSH
39059: LD_INT 14
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: ST_TO_ADDR
39068: GO 39645
39070: LD_INT 24
39072: DOUBLE
39073: EQUAL
39074: IFTRUE 39078
39076: GO 39104
39078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
39079: LD_ADDR_VAR 0 3
39083: PUSH
39084: LD_INT 11
39086: PUSH
39087: LD_INT 12
39089: PUSH
39090: LD_INT 13
39092: PUSH
39093: LD_INT 14
39095: PUSH
39096: EMPTY
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: ST_TO_ADDR
39102: GO 39645
39104: LD_INT 30
39106: DOUBLE
39107: EQUAL
39108: IFTRUE 39112
39110: GO 39138
39112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
39113: LD_ADDR_VAR 0 3
39117: PUSH
39118: LD_INT 11
39120: PUSH
39121: LD_INT 12
39123: PUSH
39124: LD_INT 13
39126: PUSH
39127: LD_INT 14
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
39136: GO 39645
39138: LD_INT 25
39140: DOUBLE
39141: EQUAL
39142: IFTRUE 39146
39144: GO 39164
39146: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
39147: LD_ADDR_VAR 0 3
39151: PUSH
39152: LD_INT 13
39154: PUSH
39155: LD_INT 14
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: ST_TO_ADDR
39162: GO 39645
39164: LD_INT 27
39166: DOUBLE
39167: EQUAL
39168: IFTRUE 39172
39170: GO 39190
39172: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39173: LD_ADDR_VAR 0 3
39177: PUSH
39178: LD_INT 13
39180: PUSH
39181: LD_INT 14
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: ST_TO_ADDR
39188: GO 39645
39190: LD_INT 92
39192: DOUBLE
39193: EQUAL
39194: IFTRUE 39198
39196: GO 39224
39198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39199: LD_ADDR_VAR 0 3
39203: PUSH
39204: LD_INT 11
39206: PUSH
39207: LD_INT 12
39209: PUSH
39210: LD_INT 13
39212: PUSH
39213: LD_INT 14
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: ST_TO_ADDR
39222: GO 39645
39224: LD_INT 28
39226: DOUBLE
39227: EQUAL
39228: IFTRUE 39232
39230: GO 39250
39232: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39233: LD_ADDR_VAR 0 3
39237: PUSH
39238: LD_INT 13
39240: PUSH
39241: LD_INT 14
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: ST_TO_ADDR
39248: GO 39645
39250: LD_INT 29
39252: DOUBLE
39253: EQUAL
39254: IFTRUE 39258
39256: GO 39276
39258: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39259: LD_ADDR_VAR 0 3
39263: PUSH
39264: LD_INT 13
39266: PUSH
39267: LD_INT 14
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: ST_TO_ADDR
39274: GO 39645
39276: LD_INT 31
39278: DOUBLE
39279: EQUAL
39280: IFTRUE 39284
39282: GO 39302
39284: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39285: LD_ADDR_VAR 0 3
39289: PUSH
39290: LD_INT 13
39292: PUSH
39293: LD_INT 14
39295: PUSH
39296: EMPTY
39297: LIST
39298: LIST
39299: ST_TO_ADDR
39300: GO 39645
39302: LD_INT 26
39304: DOUBLE
39305: EQUAL
39306: IFTRUE 39310
39308: GO 39328
39310: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39311: LD_ADDR_VAR 0 3
39315: PUSH
39316: LD_INT 13
39318: PUSH
39319: LD_INT 14
39321: PUSH
39322: EMPTY
39323: LIST
39324: LIST
39325: ST_TO_ADDR
39326: GO 39645
39328: LD_INT 42
39330: DOUBLE
39331: EQUAL
39332: IFTRUE 39336
39334: GO 39362
39336: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39337: LD_ADDR_VAR 0 3
39341: PUSH
39342: LD_INT 21
39344: PUSH
39345: LD_INT 22
39347: PUSH
39348: LD_INT 23
39350: PUSH
39351: LD_INT 24
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: ST_TO_ADDR
39360: GO 39645
39362: LD_INT 43
39364: DOUBLE
39365: EQUAL
39366: IFTRUE 39370
39368: GO 39396
39370: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_INT 21
39378: PUSH
39379: LD_INT 22
39381: PUSH
39382: LD_INT 23
39384: PUSH
39385: LD_INT 24
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: ST_TO_ADDR
39394: GO 39645
39396: LD_INT 44
39398: DOUBLE
39399: EQUAL
39400: IFTRUE 39404
39402: GO 39430
39404: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39405: LD_ADDR_VAR 0 3
39409: PUSH
39410: LD_INT 21
39412: PUSH
39413: LD_INT 22
39415: PUSH
39416: LD_INT 23
39418: PUSH
39419: LD_INT 24
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: ST_TO_ADDR
39428: GO 39645
39430: LD_INT 45
39432: DOUBLE
39433: EQUAL
39434: IFTRUE 39438
39436: GO 39464
39438: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39439: LD_ADDR_VAR 0 3
39443: PUSH
39444: LD_INT 21
39446: PUSH
39447: LD_INT 22
39449: PUSH
39450: LD_INT 23
39452: PUSH
39453: LD_INT 24
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: ST_TO_ADDR
39462: GO 39645
39464: LD_INT 49
39466: DOUBLE
39467: EQUAL
39468: IFTRUE 39472
39470: GO 39498
39472: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39473: LD_ADDR_VAR 0 3
39477: PUSH
39478: LD_INT 21
39480: PUSH
39481: LD_INT 22
39483: PUSH
39484: LD_INT 23
39486: PUSH
39487: LD_INT 24
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: ST_TO_ADDR
39496: GO 39645
39498: LD_INT 51
39500: DOUBLE
39501: EQUAL
39502: IFTRUE 39506
39504: GO 39532
39506: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39507: LD_ADDR_VAR 0 3
39511: PUSH
39512: LD_INT 21
39514: PUSH
39515: LD_INT 22
39517: PUSH
39518: LD_INT 23
39520: PUSH
39521: LD_INT 24
39523: PUSH
39524: EMPTY
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: ST_TO_ADDR
39530: GO 39645
39532: LD_INT 52
39534: DOUBLE
39535: EQUAL
39536: IFTRUE 39540
39538: GO 39566
39540: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39541: LD_ADDR_VAR 0 3
39545: PUSH
39546: LD_INT 21
39548: PUSH
39549: LD_INT 22
39551: PUSH
39552: LD_INT 23
39554: PUSH
39555: LD_INT 24
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: ST_TO_ADDR
39564: GO 39645
39566: LD_INT 53
39568: DOUBLE
39569: EQUAL
39570: IFTRUE 39574
39572: GO 39592
39574: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39575: LD_ADDR_VAR 0 3
39579: PUSH
39580: LD_INT 23
39582: PUSH
39583: LD_INT 24
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: ST_TO_ADDR
39590: GO 39645
39592: LD_INT 46
39594: DOUBLE
39595: EQUAL
39596: IFTRUE 39600
39598: GO 39618
39600: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39601: LD_ADDR_VAR 0 3
39605: PUSH
39606: LD_INT 23
39608: PUSH
39609: LD_INT 24
39611: PUSH
39612: EMPTY
39613: LIST
39614: LIST
39615: ST_TO_ADDR
39616: GO 39645
39618: LD_INT 47
39620: DOUBLE
39621: EQUAL
39622: IFTRUE 39626
39624: GO 39644
39626: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39627: LD_ADDR_VAR 0 3
39631: PUSH
39632: LD_INT 23
39634: PUSH
39635: LD_INT 24
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: ST_TO_ADDR
39642: GO 39645
39644: POP
// result := ( chassis in result ) ;
39645: LD_ADDR_VAR 0 3
39649: PUSH
39650: LD_VAR 0 1
39654: PUSH
39655: LD_VAR 0 3
39659: IN
39660: ST_TO_ADDR
// end ;
39661: LD_VAR 0 3
39665: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39666: LD_INT 0
39668: PPUSH
39669: PPUSH
39670: PPUSH
39671: PPUSH
39672: PPUSH
39673: PPUSH
39674: PPUSH
// result := array ;
39675: LD_ADDR_VAR 0 5
39679: PUSH
39680: LD_VAR 0 1
39684: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39685: LD_VAR 0 1
39689: NOT
39690: PUSH
39691: LD_VAR 0 2
39695: NOT
39696: OR
39697: PUSH
39698: LD_VAR 0 3
39702: NOT
39703: OR
39704: PUSH
39705: LD_VAR 0 2
39709: PUSH
39710: LD_VAR 0 1
39714: GREATER
39715: OR
39716: PUSH
39717: LD_VAR 0 3
39721: PUSH
39722: LD_VAR 0 1
39726: GREATER
39727: OR
39728: IFFALSE 39732
// exit ;
39730: GO 40028
// if direction then
39732: LD_VAR 0 4
39736: IFFALSE 39800
// begin d := 1 ;
39738: LD_ADDR_VAR 0 9
39742: PUSH
39743: LD_INT 1
39745: ST_TO_ADDR
// if i_from > i_to then
39746: LD_VAR 0 2
39750: PUSH
39751: LD_VAR 0 3
39755: GREATER
39756: IFFALSE 39782
// length := ( array - i_from ) + i_to else
39758: LD_ADDR_VAR 0 11
39762: PUSH
39763: LD_VAR 0 1
39767: PUSH
39768: LD_VAR 0 2
39772: MINUS
39773: PUSH
39774: LD_VAR 0 3
39778: PLUS
39779: ST_TO_ADDR
39780: GO 39798
// length := i_to - i_from ;
39782: LD_ADDR_VAR 0 11
39786: PUSH
39787: LD_VAR 0 3
39791: PUSH
39792: LD_VAR 0 2
39796: MINUS
39797: ST_TO_ADDR
// end else
39798: GO 39861
// begin d := - 1 ;
39800: LD_ADDR_VAR 0 9
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: ST_TO_ADDR
// if i_from > i_to then
39809: LD_VAR 0 2
39813: PUSH
39814: LD_VAR 0 3
39818: GREATER
39819: IFFALSE 39839
// length := i_from - i_to else
39821: LD_ADDR_VAR 0 11
39825: PUSH
39826: LD_VAR 0 2
39830: PUSH
39831: LD_VAR 0 3
39835: MINUS
39836: ST_TO_ADDR
39837: GO 39861
// length := ( array - i_to ) + i_from ;
39839: LD_ADDR_VAR 0 11
39843: PUSH
39844: LD_VAR 0 1
39848: PUSH
39849: LD_VAR 0 3
39853: MINUS
39854: PUSH
39855: LD_VAR 0 2
39859: PLUS
39860: ST_TO_ADDR
// end ; if not length then
39861: LD_VAR 0 11
39865: NOT
39866: IFFALSE 39870
// exit ;
39868: GO 40028
// tmp := array ;
39870: LD_ADDR_VAR 0 10
39874: PUSH
39875: LD_VAR 0 1
39879: ST_TO_ADDR
// for i = 1 to length do
39880: LD_ADDR_VAR 0 6
39884: PUSH
39885: DOUBLE
39886: LD_INT 1
39888: DEC
39889: ST_TO_ADDR
39890: LD_VAR 0 11
39894: PUSH
39895: FOR_TO
39896: IFFALSE 40016
// begin for j = 1 to array do
39898: LD_ADDR_VAR 0 7
39902: PUSH
39903: DOUBLE
39904: LD_INT 1
39906: DEC
39907: ST_TO_ADDR
39908: LD_VAR 0 1
39912: PUSH
39913: FOR_TO
39914: IFFALSE 40002
// begin k := j + d ;
39916: LD_ADDR_VAR 0 8
39920: PUSH
39921: LD_VAR 0 7
39925: PUSH
39926: LD_VAR 0 9
39930: PLUS
39931: ST_TO_ADDR
// if k > array then
39932: LD_VAR 0 8
39936: PUSH
39937: LD_VAR 0 1
39941: GREATER
39942: IFFALSE 39952
// k := 1 ;
39944: LD_ADDR_VAR 0 8
39948: PUSH
39949: LD_INT 1
39951: ST_TO_ADDR
// if not k then
39952: LD_VAR 0 8
39956: NOT
39957: IFFALSE 39969
// k := array ;
39959: LD_ADDR_VAR 0 8
39963: PUSH
39964: LD_VAR 0 1
39968: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39969: LD_ADDR_VAR 0 10
39973: PUSH
39974: LD_VAR 0 10
39978: PPUSH
39979: LD_VAR 0 8
39983: PPUSH
39984: LD_VAR 0 1
39988: PUSH
39989: LD_VAR 0 7
39993: ARRAY
39994: PPUSH
39995: CALL_OW 1
39999: ST_TO_ADDR
// end ;
40000: GO 39913
40002: POP
40003: POP
// array := tmp ;
40004: LD_ADDR_VAR 0 1
40008: PUSH
40009: LD_VAR 0 10
40013: ST_TO_ADDR
// end ;
40014: GO 39895
40016: POP
40017: POP
// result := array ;
40018: LD_ADDR_VAR 0 5
40022: PUSH
40023: LD_VAR 0 1
40027: ST_TO_ADDR
// end ;
40028: LD_VAR 0 5
40032: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
40033: LD_INT 0
40035: PPUSH
40036: PPUSH
// result := 0 ;
40037: LD_ADDR_VAR 0 3
40041: PUSH
40042: LD_INT 0
40044: ST_TO_ADDR
// if not array or not value in array then
40045: LD_VAR 0 1
40049: NOT
40050: PUSH
40051: LD_VAR 0 2
40055: PUSH
40056: LD_VAR 0 1
40060: IN
40061: NOT
40062: OR
40063: IFFALSE 40067
// exit ;
40065: GO 40121
// for i = 1 to array do
40067: LD_ADDR_VAR 0 4
40071: PUSH
40072: DOUBLE
40073: LD_INT 1
40075: DEC
40076: ST_TO_ADDR
40077: LD_VAR 0 1
40081: PUSH
40082: FOR_TO
40083: IFFALSE 40119
// if value = array [ i ] then
40085: LD_VAR 0 2
40089: PUSH
40090: LD_VAR 0 1
40094: PUSH
40095: LD_VAR 0 4
40099: ARRAY
40100: EQUAL
40101: IFFALSE 40117
// begin result := i ;
40103: LD_ADDR_VAR 0 3
40107: PUSH
40108: LD_VAR 0 4
40112: ST_TO_ADDR
// exit ;
40113: POP
40114: POP
40115: GO 40121
// end ;
40117: GO 40082
40119: POP
40120: POP
// end ;
40121: LD_VAR 0 3
40125: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
40126: LD_INT 0
40128: PPUSH
// vc_chassis := chassis ;
40129: LD_ADDR_OWVAR 37
40133: PUSH
40134: LD_VAR 0 1
40138: ST_TO_ADDR
// vc_engine := engine ;
40139: LD_ADDR_OWVAR 39
40143: PUSH
40144: LD_VAR 0 2
40148: ST_TO_ADDR
// vc_control := control ;
40149: LD_ADDR_OWVAR 38
40153: PUSH
40154: LD_VAR 0 3
40158: ST_TO_ADDR
// vc_weapon := weapon ;
40159: LD_ADDR_OWVAR 40
40163: PUSH
40164: LD_VAR 0 4
40168: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40169: LD_ADDR_OWVAR 41
40173: PUSH
40174: LD_VAR 0 5
40178: ST_TO_ADDR
// end ;
40179: LD_VAR 0 6
40183: RET
// export function WantPlant ( unit ) ; var task ; begin
40184: LD_INT 0
40186: PPUSH
40187: PPUSH
// result := false ;
40188: LD_ADDR_VAR 0 2
40192: PUSH
40193: LD_INT 0
40195: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40196: LD_ADDR_VAR 0 3
40200: PUSH
40201: LD_VAR 0 1
40205: PPUSH
40206: CALL_OW 437
40210: ST_TO_ADDR
// if task then
40211: LD_VAR 0 3
40215: IFFALSE 40243
// if task [ 1 ] [ 1 ] = p then
40217: LD_VAR 0 3
40221: PUSH
40222: LD_INT 1
40224: ARRAY
40225: PUSH
40226: LD_INT 1
40228: ARRAY
40229: PUSH
40230: LD_STRING p
40232: EQUAL
40233: IFFALSE 40243
// result := true ;
40235: LD_ADDR_VAR 0 2
40239: PUSH
40240: LD_INT 1
40242: ST_TO_ADDR
// end ;
40243: LD_VAR 0 2
40247: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40248: LD_INT 0
40250: PPUSH
40251: PPUSH
40252: PPUSH
40253: PPUSH
// if pos < 1 then
40254: LD_VAR 0 2
40258: PUSH
40259: LD_INT 1
40261: LESS
40262: IFFALSE 40266
// exit ;
40264: GO 40569
// if pos = 1 then
40266: LD_VAR 0 2
40270: PUSH
40271: LD_INT 1
40273: EQUAL
40274: IFFALSE 40307
// result := Replace ( arr , pos [ 1 ] , value ) else
40276: LD_ADDR_VAR 0 4
40280: PUSH
40281: LD_VAR 0 1
40285: PPUSH
40286: LD_VAR 0 2
40290: PUSH
40291: LD_INT 1
40293: ARRAY
40294: PPUSH
40295: LD_VAR 0 3
40299: PPUSH
40300: CALL_OW 1
40304: ST_TO_ADDR
40305: GO 40569
// begin tmp := arr ;
40307: LD_ADDR_VAR 0 6
40311: PUSH
40312: LD_VAR 0 1
40316: ST_TO_ADDR
// s_arr := [ tmp ] ;
40317: LD_ADDR_VAR 0 7
40321: PUSH
40322: LD_VAR 0 6
40326: PUSH
40327: EMPTY
40328: LIST
40329: ST_TO_ADDR
// for i = 1 to pos - 1 do
40330: LD_ADDR_VAR 0 5
40334: PUSH
40335: DOUBLE
40336: LD_INT 1
40338: DEC
40339: ST_TO_ADDR
40340: LD_VAR 0 2
40344: PUSH
40345: LD_INT 1
40347: MINUS
40348: PUSH
40349: FOR_TO
40350: IFFALSE 40395
// begin tmp := tmp [ pos [ i ] ] ;
40352: LD_ADDR_VAR 0 6
40356: PUSH
40357: LD_VAR 0 6
40361: PUSH
40362: LD_VAR 0 2
40366: PUSH
40367: LD_VAR 0 5
40371: ARRAY
40372: ARRAY
40373: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40374: LD_ADDR_VAR 0 7
40378: PUSH
40379: LD_VAR 0 7
40383: PUSH
40384: LD_VAR 0 6
40388: PUSH
40389: EMPTY
40390: LIST
40391: ADD
40392: ST_TO_ADDR
// end ;
40393: GO 40349
40395: POP
40396: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40397: LD_ADDR_VAR 0 6
40401: PUSH
40402: LD_VAR 0 6
40406: PPUSH
40407: LD_VAR 0 2
40411: PUSH
40412: LD_VAR 0 2
40416: ARRAY
40417: PPUSH
40418: LD_VAR 0 3
40422: PPUSH
40423: CALL_OW 1
40427: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40428: LD_ADDR_VAR 0 7
40432: PUSH
40433: LD_VAR 0 7
40437: PPUSH
40438: LD_VAR 0 7
40442: PPUSH
40443: LD_VAR 0 6
40447: PPUSH
40448: CALL_OW 1
40452: ST_TO_ADDR
// for i = s_arr downto 2 do
40453: LD_ADDR_VAR 0 5
40457: PUSH
40458: DOUBLE
40459: LD_VAR 0 7
40463: INC
40464: ST_TO_ADDR
40465: LD_INT 2
40467: PUSH
40468: FOR_DOWNTO
40469: IFFALSE 40553
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40471: LD_ADDR_VAR 0 6
40475: PUSH
40476: LD_VAR 0 7
40480: PUSH
40481: LD_VAR 0 5
40485: PUSH
40486: LD_INT 1
40488: MINUS
40489: ARRAY
40490: PPUSH
40491: LD_VAR 0 2
40495: PUSH
40496: LD_VAR 0 5
40500: PUSH
40501: LD_INT 1
40503: MINUS
40504: ARRAY
40505: PPUSH
40506: LD_VAR 0 7
40510: PUSH
40511: LD_VAR 0 5
40515: ARRAY
40516: PPUSH
40517: CALL_OW 1
40521: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40522: LD_ADDR_VAR 0 7
40526: PUSH
40527: LD_VAR 0 7
40531: PPUSH
40532: LD_VAR 0 5
40536: PUSH
40537: LD_INT 1
40539: MINUS
40540: PPUSH
40541: LD_VAR 0 6
40545: PPUSH
40546: CALL_OW 1
40550: ST_TO_ADDR
// end ;
40551: GO 40468
40553: POP
40554: POP
// result := s_arr [ 1 ] ;
40555: LD_ADDR_VAR 0 4
40559: PUSH
40560: LD_VAR 0 7
40564: PUSH
40565: LD_INT 1
40567: ARRAY
40568: ST_TO_ADDR
// end ; end ;
40569: LD_VAR 0 4
40573: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40574: LD_INT 0
40576: PPUSH
40577: PPUSH
// if not list then
40578: LD_VAR 0 1
40582: NOT
40583: IFFALSE 40587
// exit ;
40585: GO 40678
// i := list [ pos1 ] ;
40587: LD_ADDR_VAR 0 5
40591: PUSH
40592: LD_VAR 0 1
40596: PUSH
40597: LD_VAR 0 2
40601: ARRAY
40602: ST_TO_ADDR
// if not i then
40603: LD_VAR 0 5
40607: NOT
40608: IFFALSE 40612
// exit ;
40610: GO 40678
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40612: LD_ADDR_VAR 0 1
40616: PUSH
40617: LD_VAR 0 1
40621: PPUSH
40622: LD_VAR 0 2
40626: PPUSH
40627: LD_VAR 0 1
40631: PUSH
40632: LD_VAR 0 3
40636: ARRAY
40637: PPUSH
40638: CALL_OW 1
40642: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40643: LD_ADDR_VAR 0 1
40647: PUSH
40648: LD_VAR 0 1
40652: PPUSH
40653: LD_VAR 0 3
40657: PPUSH
40658: LD_VAR 0 5
40662: PPUSH
40663: CALL_OW 1
40667: ST_TO_ADDR
// result := list ;
40668: LD_ADDR_VAR 0 4
40672: PUSH
40673: LD_VAR 0 1
40677: ST_TO_ADDR
// end ;
40678: LD_VAR 0 4
40682: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40683: LD_INT 0
40685: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40686: LD_ADDR_VAR 0 5
40690: PUSH
40691: LD_VAR 0 1
40695: PPUSH
40696: CALL_OW 250
40700: PPUSH
40701: LD_VAR 0 1
40705: PPUSH
40706: CALL_OW 251
40710: PPUSH
40711: LD_VAR 0 2
40715: PPUSH
40716: LD_VAR 0 3
40720: PPUSH
40721: LD_VAR 0 4
40725: PPUSH
40726: CALL 40736 0 5
40730: ST_TO_ADDR
// end ;
40731: LD_VAR 0 5
40735: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40736: LD_INT 0
40738: PPUSH
40739: PPUSH
40740: PPUSH
40741: PPUSH
// if not list then
40742: LD_VAR 0 3
40746: NOT
40747: IFFALSE 40751
// exit ;
40749: GO 41139
// result := [ ] ;
40751: LD_ADDR_VAR 0 6
40755: PUSH
40756: EMPTY
40757: ST_TO_ADDR
// for i in list do
40758: LD_ADDR_VAR 0 7
40762: PUSH
40763: LD_VAR 0 3
40767: PUSH
40768: FOR_IN
40769: IFFALSE 40971
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40771: LD_ADDR_VAR 0 9
40775: PUSH
40776: LD_VAR 0 7
40780: PPUSH
40781: LD_VAR 0 1
40785: PPUSH
40786: LD_VAR 0 2
40790: PPUSH
40791: CALL_OW 297
40795: ST_TO_ADDR
// if not result then
40796: LD_VAR 0 6
40800: NOT
40801: IFFALSE 40827
// result := [ [ i , tmp ] ] else
40803: LD_ADDR_VAR 0 6
40807: PUSH
40808: LD_VAR 0 7
40812: PUSH
40813: LD_VAR 0 9
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: ST_TO_ADDR
40825: GO 40969
// begin if result [ result ] [ 2 ] < tmp then
40827: LD_VAR 0 6
40831: PUSH
40832: LD_VAR 0 6
40836: ARRAY
40837: PUSH
40838: LD_INT 2
40840: ARRAY
40841: PUSH
40842: LD_VAR 0 9
40846: LESS
40847: IFFALSE 40889
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40849: LD_ADDR_VAR 0 6
40853: PUSH
40854: LD_VAR 0 6
40858: PPUSH
40859: LD_VAR 0 6
40863: PUSH
40864: LD_INT 1
40866: PLUS
40867: PPUSH
40868: LD_VAR 0 7
40872: PUSH
40873: LD_VAR 0 9
40877: PUSH
40878: EMPTY
40879: LIST
40880: LIST
40881: PPUSH
40882: CALL_OW 2
40886: ST_TO_ADDR
40887: GO 40969
// for j = 1 to result do
40889: LD_ADDR_VAR 0 8
40893: PUSH
40894: DOUBLE
40895: LD_INT 1
40897: DEC
40898: ST_TO_ADDR
40899: LD_VAR 0 6
40903: PUSH
40904: FOR_TO
40905: IFFALSE 40967
// begin if tmp < result [ j ] [ 2 ] then
40907: LD_VAR 0 9
40911: PUSH
40912: LD_VAR 0 6
40916: PUSH
40917: LD_VAR 0 8
40921: ARRAY
40922: PUSH
40923: LD_INT 2
40925: ARRAY
40926: LESS
40927: IFFALSE 40965
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40929: LD_ADDR_VAR 0 6
40933: PUSH
40934: LD_VAR 0 6
40938: PPUSH
40939: LD_VAR 0 8
40943: PPUSH
40944: LD_VAR 0 7
40948: PUSH
40949: LD_VAR 0 9
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PPUSH
40958: CALL_OW 2
40962: ST_TO_ADDR
// break ;
40963: GO 40967
// end ; end ;
40965: GO 40904
40967: POP
40968: POP
// end ; end ;
40969: GO 40768
40971: POP
40972: POP
// if result and not asc then
40973: LD_VAR 0 6
40977: PUSH
40978: LD_VAR 0 4
40982: NOT
40983: AND
40984: IFFALSE 41059
// begin tmp := result ;
40986: LD_ADDR_VAR 0 9
40990: PUSH
40991: LD_VAR 0 6
40995: ST_TO_ADDR
// for i = tmp downto 1 do
40996: LD_ADDR_VAR 0 7
41000: PUSH
41001: DOUBLE
41002: LD_VAR 0 9
41006: INC
41007: ST_TO_ADDR
41008: LD_INT 1
41010: PUSH
41011: FOR_DOWNTO
41012: IFFALSE 41057
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
41014: LD_ADDR_VAR 0 6
41018: PUSH
41019: LD_VAR 0 6
41023: PPUSH
41024: LD_VAR 0 9
41028: PUSH
41029: LD_VAR 0 7
41033: MINUS
41034: PUSH
41035: LD_INT 1
41037: PLUS
41038: PPUSH
41039: LD_VAR 0 9
41043: PUSH
41044: LD_VAR 0 7
41048: ARRAY
41049: PPUSH
41050: CALL_OW 1
41054: ST_TO_ADDR
41055: GO 41011
41057: POP
41058: POP
// end ; tmp := [ ] ;
41059: LD_ADDR_VAR 0 9
41063: PUSH
41064: EMPTY
41065: ST_TO_ADDR
// if mode then
41066: LD_VAR 0 5
41070: IFFALSE 41139
// begin for i = 1 to result do
41072: LD_ADDR_VAR 0 7
41076: PUSH
41077: DOUBLE
41078: LD_INT 1
41080: DEC
41081: ST_TO_ADDR
41082: LD_VAR 0 6
41086: PUSH
41087: FOR_TO
41088: IFFALSE 41127
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
41090: LD_ADDR_VAR 0 9
41094: PUSH
41095: LD_VAR 0 9
41099: PPUSH
41100: LD_VAR 0 7
41104: PPUSH
41105: LD_VAR 0 6
41109: PUSH
41110: LD_VAR 0 7
41114: ARRAY
41115: PUSH
41116: LD_INT 1
41118: ARRAY
41119: PPUSH
41120: CALL_OW 1
41124: ST_TO_ADDR
41125: GO 41087
41127: POP
41128: POP
// result := tmp ;
41129: LD_ADDR_VAR 0 6
41133: PUSH
41134: LD_VAR 0 9
41138: ST_TO_ADDR
// end ; end ;
41139: LD_VAR 0 6
41143: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
41144: LD_INT 0
41146: PPUSH
41147: PPUSH
41148: PPUSH
41149: PPUSH
41150: PPUSH
41151: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
41152: LD_ADDR_VAR 0 5
41156: PUSH
41157: LD_INT 0
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: ST_TO_ADDR
// if not x or not y then
41174: LD_VAR 0 2
41178: NOT
41179: PUSH
41180: LD_VAR 0 3
41184: NOT
41185: OR
41186: IFFALSE 41190
// exit ;
41188: GO 42840
// if not range then
41190: LD_VAR 0 4
41194: NOT
41195: IFFALSE 41205
// range := 10 ;
41197: LD_ADDR_VAR 0 4
41201: PUSH
41202: LD_INT 10
41204: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41205: LD_ADDR_VAR 0 8
41209: PUSH
41210: LD_INT 81
41212: PUSH
41213: LD_VAR 0 1
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 92
41224: PUSH
41225: LD_VAR 0 2
41229: PUSH
41230: LD_VAR 0 3
41234: PUSH
41235: LD_VAR 0 4
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 3
41248: PUSH
41249: LD_INT 21
41251: PUSH
41252: LD_INT 3
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: LIST
41267: PPUSH
41268: CALL_OW 69
41272: ST_TO_ADDR
// if not tmp then
41273: LD_VAR 0 8
41277: NOT
41278: IFFALSE 41282
// exit ;
41280: GO 42840
// for i in tmp do
41282: LD_ADDR_VAR 0 6
41286: PUSH
41287: LD_VAR 0 8
41291: PUSH
41292: FOR_IN
41293: IFFALSE 42815
// begin points := [ 0 , 0 , 0 ] ;
41295: LD_ADDR_VAR 0 9
41299: PUSH
41300: LD_INT 0
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: LD_INT 0
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: LIST
41313: ST_TO_ADDR
// bpoints := 1 ;
41314: LD_ADDR_VAR 0 10
41318: PUSH
41319: LD_INT 1
41321: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41322: LD_VAR 0 6
41326: PPUSH
41327: CALL_OW 247
41331: PUSH
41332: LD_INT 1
41334: DOUBLE
41335: EQUAL
41336: IFTRUE 41340
41338: GO 41918
41340: POP
// begin if GetClass ( i ) = 1 then
41341: LD_VAR 0 6
41345: PPUSH
41346: CALL_OW 257
41350: PUSH
41351: LD_INT 1
41353: EQUAL
41354: IFFALSE 41375
// points := [ 10 , 5 , 3 ] ;
41356: LD_ADDR_VAR 0 9
41360: PUSH
41361: LD_INT 10
41363: PUSH
41364: LD_INT 5
41366: PUSH
41367: LD_INT 3
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: LIST
41374: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41375: LD_VAR 0 6
41379: PPUSH
41380: CALL_OW 257
41384: PUSH
41385: LD_INT 2
41387: PUSH
41388: LD_INT 3
41390: PUSH
41391: LD_INT 4
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: LIST
41398: IN
41399: IFFALSE 41420
// points := [ 3 , 2 , 1 ] ;
41401: LD_ADDR_VAR 0 9
41405: PUSH
41406: LD_INT 3
41408: PUSH
41409: LD_INT 2
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: LIST
41419: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41420: LD_VAR 0 6
41424: PPUSH
41425: CALL_OW 257
41429: PUSH
41430: LD_INT 5
41432: EQUAL
41433: IFFALSE 41454
// points := [ 130 , 5 , 2 ] ;
41435: LD_ADDR_VAR 0 9
41439: PUSH
41440: LD_INT 130
41442: PUSH
41443: LD_INT 5
41445: PUSH
41446: LD_INT 2
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: LIST
41453: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41454: LD_VAR 0 6
41458: PPUSH
41459: CALL_OW 257
41463: PUSH
41464: LD_INT 8
41466: EQUAL
41467: IFFALSE 41488
// points := [ 35 , 35 , 30 ] ;
41469: LD_ADDR_VAR 0 9
41473: PUSH
41474: LD_INT 35
41476: PUSH
41477: LD_INT 35
41479: PUSH
41480: LD_INT 30
41482: PUSH
41483: EMPTY
41484: LIST
41485: LIST
41486: LIST
41487: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41488: LD_VAR 0 6
41492: PPUSH
41493: CALL_OW 257
41497: PUSH
41498: LD_INT 9
41500: EQUAL
41501: IFFALSE 41522
// points := [ 20 , 55 , 40 ] ;
41503: LD_ADDR_VAR 0 9
41507: PUSH
41508: LD_INT 20
41510: PUSH
41511: LD_INT 55
41513: PUSH
41514: LD_INT 40
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41522: LD_VAR 0 6
41526: PPUSH
41527: CALL_OW 257
41531: PUSH
41532: LD_INT 12
41534: PUSH
41535: LD_INT 16
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: IN
41542: IFFALSE 41563
// points := [ 5 , 3 , 2 ] ;
41544: LD_ADDR_VAR 0 9
41548: PUSH
41549: LD_INT 5
41551: PUSH
41552: LD_INT 3
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: LIST
41562: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41563: LD_VAR 0 6
41567: PPUSH
41568: CALL_OW 257
41572: PUSH
41573: LD_INT 17
41575: EQUAL
41576: IFFALSE 41597
// points := [ 100 , 50 , 75 ] ;
41578: LD_ADDR_VAR 0 9
41582: PUSH
41583: LD_INT 100
41585: PUSH
41586: LD_INT 50
41588: PUSH
41589: LD_INT 75
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: LIST
41596: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41597: LD_VAR 0 6
41601: PPUSH
41602: CALL_OW 257
41606: PUSH
41607: LD_INT 15
41609: EQUAL
41610: IFFALSE 41631
// points := [ 10 , 5 , 3 ] ;
41612: LD_ADDR_VAR 0 9
41616: PUSH
41617: LD_INT 10
41619: PUSH
41620: LD_INT 5
41622: PUSH
41623: LD_INT 3
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: LIST
41630: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41631: LD_VAR 0 6
41635: PPUSH
41636: CALL_OW 257
41640: PUSH
41641: LD_INT 14
41643: EQUAL
41644: IFFALSE 41665
// points := [ 10 , 0 , 0 ] ;
41646: LD_ADDR_VAR 0 9
41650: PUSH
41651: LD_INT 10
41653: PUSH
41654: LD_INT 0
41656: PUSH
41657: LD_INT 0
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41665: LD_VAR 0 6
41669: PPUSH
41670: CALL_OW 257
41674: PUSH
41675: LD_INT 11
41677: EQUAL
41678: IFFALSE 41699
// points := [ 30 , 10 , 5 ] ;
41680: LD_ADDR_VAR 0 9
41684: PUSH
41685: LD_INT 30
41687: PUSH
41688: LD_INT 10
41690: PUSH
41691: LD_INT 5
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: LIST
41698: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41699: LD_VAR 0 1
41703: PPUSH
41704: LD_INT 5
41706: PPUSH
41707: CALL_OW 321
41711: PUSH
41712: LD_INT 2
41714: EQUAL
41715: IFFALSE 41732
// bpoints := bpoints * 1.8 ;
41717: LD_ADDR_VAR 0 10
41721: PUSH
41722: LD_VAR 0 10
41726: PUSH
41727: LD_REAL  1.80000000000000E+0000
41730: MUL
41731: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41732: LD_VAR 0 6
41736: PPUSH
41737: CALL_OW 257
41741: PUSH
41742: LD_INT 1
41744: PUSH
41745: LD_INT 2
41747: PUSH
41748: LD_INT 3
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: IN
41760: PUSH
41761: LD_VAR 0 1
41765: PPUSH
41766: LD_INT 51
41768: PPUSH
41769: CALL_OW 321
41773: PUSH
41774: LD_INT 2
41776: EQUAL
41777: AND
41778: IFFALSE 41795
// bpoints := bpoints * 1.2 ;
41780: LD_ADDR_VAR 0 10
41784: PUSH
41785: LD_VAR 0 10
41789: PUSH
41790: LD_REAL  1.20000000000000E+0000
41793: MUL
41794: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41795: LD_VAR 0 6
41799: PPUSH
41800: CALL_OW 257
41804: PUSH
41805: LD_INT 5
41807: PUSH
41808: LD_INT 7
41810: PUSH
41811: LD_INT 9
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: LIST
41818: IN
41819: PUSH
41820: LD_VAR 0 1
41824: PPUSH
41825: LD_INT 52
41827: PPUSH
41828: CALL_OW 321
41832: PUSH
41833: LD_INT 2
41835: EQUAL
41836: AND
41837: IFFALSE 41854
// bpoints := bpoints * 1.5 ;
41839: LD_ADDR_VAR 0 10
41843: PUSH
41844: LD_VAR 0 10
41848: PUSH
41849: LD_REAL  1.50000000000000E+0000
41852: MUL
41853: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41854: LD_VAR 0 1
41858: PPUSH
41859: LD_INT 66
41861: PPUSH
41862: CALL_OW 321
41866: PUSH
41867: LD_INT 2
41869: EQUAL
41870: IFFALSE 41887
// bpoints := bpoints * 1.1 ;
41872: LD_ADDR_VAR 0 10
41876: PUSH
41877: LD_VAR 0 10
41881: PUSH
41882: LD_REAL  1.10000000000000E+0000
41885: MUL
41886: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41887: LD_ADDR_VAR 0 10
41891: PUSH
41892: LD_VAR 0 10
41896: PUSH
41897: LD_VAR 0 6
41901: PPUSH
41902: LD_INT 1
41904: PPUSH
41905: CALL_OW 259
41909: PUSH
41910: LD_REAL  1.15000000000000E+0000
41913: MUL
41914: MUL
41915: ST_TO_ADDR
// end ; unit_vehicle :
41916: GO 42744
41918: LD_INT 2
41920: DOUBLE
41921: EQUAL
41922: IFTRUE 41926
41924: GO 42732
41926: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41927: LD_VAR 0 6
41931: PPUSH
41932: CALL_OW 264
41936: PUSH
41937: LD_INT 2
41939: PUSH
41940: LD_INT 42
41942: PUSH
41943: LD_INT 24
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: LIST
41950: IN
41951: IFFALSE 41972
// points := [ 25 , 5 , 3 ] ;
41953: LD_ADDR_VAR 0 9
41957: PUSH
41958: LD_INT 25
41960: PUSH
41961: LD_INT 5
41963: PUSH
41964: LD_INT 3
41966: PUSH
41967: EMPTY
41968: LIST
41969: LIST
41970: LIST
41971: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41972: LD_VAR 0 6
41976: PPUSH
41977: CALL_OW 264
41981: PUSH
41982: LD_INT 4
41984: PUSH
41985: LD_INT 43
41987: PUSH
41988: LD_INT 25
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: LIST
41995: IN
41996: IFFALSE 42017
// points := [ 40 , 15 , 5 ] ;
41998: LD_ADDR_VAR 0 9
42002: PUSH
42003: LD_INT 40
42005: PUSH
42006: LD_INT 15
42008: PUSH
42009: LD_INT 5
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: LIST
42016: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
42017: LD_VAR 0 6
42021: PPUSH
42022: CALL_OW 264
42026: PUSH
42027: LD_INT 3
42029: PUSH
42030: LD_INT 23
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: IN
42037: IFFALSE 42058
// points := [ 7 , 25 , 8 ] ;
42039: LD_ADDR_VAR 0 9
42043: PUSH
42044: LD_INT 7
42046: PUSH
42047: LD_INT 25
42049: PUSH
42050: LD_INT 8
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: LIST
42057: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
42058: LD_VAR 0 6
42062: PPUSH
42063: CALL_OW 264
42067: PUSH
42068: LD_INT 5
42070: PUSH
42071: LD_INT 27
42073: PUSH
42074: LD_INT 44
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: LIST
42081: IN
42082: IFFALSE 42103
// points := [ 14 , 50 , 16 ] ;
42084: LD_ADDR_VAR 0 9
42088: PUSH
42089: LD_INT 14
42091: PUSH
42092: LD_INT 50
42094: PUSH
42095: LD_INT 16
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: LIST
42102: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
42103: LD_VAR 0 6
42107: PPUSH
42108: CALL_OW 264
42112: PUSH
42113: LD_INT 6
42115: PUSH
42116: LD_INT 46
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: IN
42123: IFFALSE 42144
// points := [ 32 , 120 , 70 ] ;
42125: LD_ADDR_VAR 0 9
42129: PUSH
42130: LD_INT 32
42132: PUSH
42133: LD_INT 120
42135: PUSH
42136: LD_INT 70
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: LIST
42143: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
42144: LD_VAR 0 6
42148: PPUSH
42149: CALL_OW 264
42153: PUSH
42154: LD_INT 7
42156: PUSH
42157: LD_INT 28
42159: PUSH
42160: LD_INT 45
42162: PUSH
42163: LD_INT 92
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: IN
42172: IFFALSE 42193
// points := [ 35 , 20 , 45 ] ;
42174: LD_ADDR_VAR 0 9
42178: PUSH
42179: LD_INT 35
42181: PUSH
42182: LD_INT 20
42184: PUSH
42185: LD_INT 45
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: LIST
42192: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42193: LD_VAR 0 6
42197: PPUSH
42198: CALL_OW 264
42202: PUSH
42203: LD_INT 47
42205: PUSH
42206: EMPTY
42207: LIST
42208: IN
42209: IFFALSE 42230
// points := [ 67 , 45 , 75 ] ;
42211: LD_ADDR_VAR 0 9
42215: PUSH
42216: LD_INT 67
42218: PUSH
42219: LD_INT 45
42221: PUSH
42222: LD_INT 75
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: LIST
42229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42230: LD_VAR 0 6
42234: PPUSH
42235: CALL_OW 264
42239: PUSH
42240: LD_INT 26
42242: PUSH
42243: EMPTY
42244: LIST
42245: IN
42246: IFFALSE 42267
// points := [ 120 , 30 , 80 ] ;
42248: LD_ADDR_VAR 0 9
42252: PUSH
42253: LD_INT 120
42255: PUSH
42256: LD_INT 30
42258: PUSH
42259: LD_INT 80
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: LIST
42266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42267: LD_VAR 0 6
42271: PPUSH
42272: CALL_OW 264
42276: PUSH
42277: LD_INT 22
42279: PUSH
42280: EMPTY
42281: LIST
42282: IN
42283: IFFALSE 42304
// points := [ 40 , 1 , 1 ] ;
42285: LD_ADDR_VAR 0 9
42289: PUSH
42290: LD_INT 40
42292: PUSH
42293: LD_INT 1
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: LIST
42303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42304: LD_VAR 0 6
42308: PPUSH
42309: CALL_OW 264
42313: PUSH
42314: LD_INT 29
42316: PUSH
42317: EMPTY
42318: LIST
42319: IN
42320: IFFALSE 42341
// points := [ 70 , 200 , 400 ] ;
42322: LD_ADDR_VAR 0 9
42326: PUSH
42327: LD_INT 70
42329: PUSH
42330: LD_INT 200
42332: PUSH
42333: LD_INT 400
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: LIST
42340: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42341: LD_VAR 0 6
42345: PPUSH
42346: CALL_OW 264
42350: PUSH
42351: LD_INT 14
42353: PUSH
42354: LD_INT 53
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: IN
42361: IFFALSE 42382
// points := [ 40 , 10 , 20 ] ;
42363: LD_ADDR_VAR 0 9
42367: PUSH
42368: LD_INT 40
42370: PUSH
42371: LD_INT 10
42373: PUSH
42374: LD_INT 20
42376: PUSH
42377: EMPTY
42378: LIST
42379: LIST
42380: LIST
42381: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42382: LD_VAR 0 6
42386: PPUSH
42387: CALL_OW 264
42391: PUSH
42392: LD_INT 9
42394: PUSH
42395: EMPTY
42396: LIST
42397: IN
42398: IFFALSE 42419
// points := [ 5 , 70 , 20 ] ;
42400: LD_ADDR_VAR 0 9
42404: PUSH
42405: LD_INT 5
42407: PUSH
42408: LD_INT 70
42410: PUSH
42411: LD_INT 20
42413: PUSH
42414: EMPTY
42415: LIST
42416: LIST
42417: LIST
42418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42419: LD_VAR 0 6
42423: PPUSH
42424: CALL_OW 264
42428: PUSH
42429: LD_INT 10
42431: PUSH
42432: EMPTY
42433: LIST
42434: IN
42435: IFFALSE 42456
// points := [ 35 , 110 , 70 ] ;
42437: LD_ADDR_VAR 0 9
42441: PUSH
42442: LD_INT 35
42444: PUSH
42445: LD_INT 110
42447: PUSH
42448: LD_INT 70
42450: PUSH
42451: EMPTY
42452: LIST
42453: LIST
42454: LIST
42455: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42456: LD_VAR 0 6
42460: PPUSH
42461: CALL_OW 265
42465: PUSH
42466: LD_INT 25
42468: EQUAL
42469: IFFALSE 42490
// points := [ 80 , 65 , 100 ] ;
42471: LD_ADDR_VAR 0 9
42475: PUSH
42476: LD_INT 80
42478: PUSH
42479: LD_INT 65
42481: PUSH
42482: LD_INT 100
42484: PUSH
42485: EMPTY
42486: LIST
42487: LIST
42488: LIST
42489: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42490: LD_VAR 0 6
42494: PPUSH
42495: CALL_OW 263
42499: PUSH
42500: LD_INT 1
42502: EQUAL
42503: IFFALSE 42538
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42505: LD_ADDR_VAR 0 10
42509: PUSH
42510: LD_VAR 0 10
42514: PUSH
42515: LD_VAR 0 6
42519: PPUSH
42520: CALL_OW 311
42524: PPUSH
42525: LD_INT 3
42527: PPUSH
42528: CALL_OW 259
42532: PUSH
42533: LD_INT 4
42535: MUL
42536: MUL
42537: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42538: LD_VAR 0 6
42542: PPUSH
42543: CALL_OW 263
42547: PUSH
42548: LD_INT 2
42550: EQUAL
42551: IFFALSE 42602
// begin j := IsControledBy ( i ) ;
42553: LD_ADDR_VAR 0 7
42557: PUSH
42558: LD_VAR 0 6
42562: PPUSH
42563: CALL_OW 312
42567: ST_TO_ADDR
// if j then
42568: LD_VAR 0 7
42572: IFFALSE 42602
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42574: LD_ADDR_VAR 0 10
42578: PUSH
42579: LD_VAR 0 10
42583: PUSH
42584: LD_VAR 0 7
42588: PPUSH
42589: LD_INT 3
42591: PPUSH
42592: CALL_OW 259
42596: PUSH
42597: LD_INT 3
42599: MUL
42600: MUL
42601: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42602: LD_VAR 0 6
42606: PPUSH
42607: CALL_OW 264
42611: PUSH
42612: LD_INT 5
42614: PUSH
42615: LD_INT 6
42617: PUSH
42618: LD_INT 46
42620: PUSH
42621: LD_INT 44
42623: PUSH
42624: LD_INT 47
42626: PUSH
42627: LD_INT 45
42629: PUSH
42630: LD_INT 28
42632: PUSH
42633: LD_INT 7
42635: PUSH
42636: LD_INT 27
42638: PUSH
42639: LD_INT 29
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: IN
42654: PUSH
42655: LD_VAR 0 1
42659: PPUSH
42660: LD_INT 52
42662: PPUSH
42663: CALL_OW 321
42667: PUSH
42668: LD_INT 2
42670: EQUAL
42671: AND
42672: IFFALSE 42689
// bpoints := bpoints * 1.2 ;
42674: LD_ADDR_VAR 0 10
42678: PUSH
42679: LD_VAR 0 10
42683: PUSH
42684: LD_REAL  1.20000000000000E+0000
42687: MUL
42688: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42689: LD_VAR 0 6
42693: PPUSH
42694: CALL_OW 264
42698: PUSH
42699: LD_INT 6
42701: PUSH
42702: LD_INT 46
42704: PUSH
42705: LD_INT 47
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: LIST
42712: IN
42713: IFFALSE 42730
// bpoints := bpoints * 1.2 ;
42715: LD_ADDR_VAR 0 10
42719: PUSH
42720: LD_VAR 0 10
42724: PUSH
42725: LD_REAL  1.20000000000000E+0000
42728: MUL
42729: ST_TO_ADDR
// end ; unit_building :
42730: GO 42744
42732: LD_INT 3
42734: DOUBLE
42735: EQUAL
42736: IFTRUE 42740
42738: GO 42743
42740: POP
// ; end ;
42741: GO 42744
42743: POP
// for j = 1 to 3 do
42744: LD_ADDR_VAR 0 7
42748: PUSH
42749: DOUBLE
42750: LD_INT 1
42752: DEC
42753: ST_TO_ADDR
42754: LD_INT 3
42756: PUSH
42757: FOR_TO
42758: IFFALSE 42811
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42760: LD_ADDR_VAR 0 5
42764: PUSH
42765: LD_VAR 0 5
42769: PPUSH
42770: LD_VAR 0 7
42774: PPUSH
42775: LD_VAR 0 5
42779: PUSH
42780: LD_VAR 0 7
42784: ARRAY
42785: PUSH
42786: LD_VAR 0 9
42790: PUSH
42791: LD_VAR 0 7
42795: ARRAY
42796: PUSH
42797: LD_VAR 0 10
42801: MUL
42802: PLUS
42803: PPUSH
42804: CALL_OW 1
42808: ST_TO_ADDR
42809: GO 42757
42811: POP
42812: POP
// end ;
42813: GO 41292
42815: POP
42816: POP
// result := Replace ( result , 4 , tmp ) ;
42817: LD_ADDR_VAR 0 5
42821: PUSH
42822: LD_VAR 0 5
42826: PPUSH
42827: LD_INT 4
42829: PPUSH
42830: LD_VAR 0 8
42834: PPUSH
42835: CALL_OW 1
42839: ST_TO_ADDR
// end ;
42840: LD_VAR 0 5
42844: RET
// export function DangerAtRange ( unit , range ) ; begin
42845: LD_INT 0
42847: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42848: LD_ADDR_VAR 0 3
42852: PUSH
42853: LD_VAR 0 1
42857: PPUSH
42858: CALL_OW 255
42862: PPUSH
42863: LD_VAR 0 1
42867: PPUSH
42868: CALL_OW 250
42872: PPUSH
42873: LD_VAR 0 1
42877: PPUSH
42878: CALL_OW 251
42882: PPUSH
42883: LD_VAR 0 2
42887: PPUSH
42888: CALL 41144 0 4
42892: ST_TO_ADDR
// end ;
42893: LD_VAR 0 3
42897: RET
// export function DangerInArea ( side , area ) ; begin
42898: LD_INT 0
42900: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42901: LD_ADDR_VAR 0 3
42905: PUSH
42906: LD_VAR 0 2
42910: PPUSH
42911: LD_INT 81
42913: PUSH
42914: LD_VAR 0 1
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PPUSH
42923: CALL_OW 70
42927: ST_TO_ADDR
// end ;
42928: LD_VAR 0 3
42932: RET
// export function IsExtension ( b ) ; begin
42933: LD_INT 0
42935: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42936: LD_ADDR_VAR 0 2
42940: PUSH
42941: LD_VAR 0 1
42945: PUSH
42946: LD_INT 23
42948: PUSH
42949: LD_INT 20
42951: PUSH
42952: LD_INT 22
42954: PUSH
42955: LD_INT 17
42957: PUSH
42958: LD_INT 24
42960: PUSH
42961: LD_INT 21
42963: PUSH
42964: LD_INT 19
42966: PUSH
42967: LD_INT 16
42969: PUSH
42970: LD_INT 25
42972: PUSH
42973: LD_INT 18
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: LIST
42984: LIST
42985: LIST
42986: LIST
42987: IN
42988: ST_TO_ADDR
// end ;
42989: LD_VAR 0 2
42993: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42994: LD_INT 0
42996: PPUSH
42997: PPUSH
42998: PPUSH
// result := [ ] ;
42999: LD_ADDR_VAR 0 4
43003: PUSH
43004: EMPTY
43005: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
43006: LD_ADDR_VAR 0 5
43010: PUSH
43011: LD_VAR 0 2
43015: PPUSH
43016: LD_INT 21
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PPUSH
43026: CALL_OW 70
43030: ST_TO_ADDR
// if not tmp then
43031: LD_VAR 0 5
43035: NOT
43036: IFFALSE 43040
// exit ;
43038: GO 43104
// if checkLink then
43040: LD_VAR 0 3
43044: IFFALSE 43094
// begin for i in tmp do
43046: LD_ADDR_VAR 0 6
43050: PUSH
43051: LD_VAR 0 5
43055: PUSH
43056: FOR_IN
43057: IFFALSE 43092
// if GetBase ( i ) <> base then
43059: LD_VAR 0 6
43063: PPUSH
43064: CALL_OW 274
43068: PUSH
43069: LD_VAR 0 1
43073: NONEQUAL
43074: IFFALSE 43090
// ComLinkToBase ( base , i ) ;
43076: LD_VAR 0 1
43080: PPUSH
43081: LD_VAR 0 6
43085: PPUSH
43086: CALL_OW 169
43090: GO 43056
43092: POP
43093: POP
// end ; result := tmp ;
43094: LD_ADDR_VAR 0 4
43098: PUSH
43099: LD_VAR 0 5
43103: ST_TO_ADDR
// end ;
43104: LD_VAR 0 4
43108: RET
// export function ComComplete ( units , b ) ; var i ; begin
43109: LD_INT 0
43111: PPUSH
43112: PPUSH
// if not units then
43113: LD_VAR 0 1
43117: NOT
43118: IFFALSE 43122
// exit ;
43120: GO 43212
// for i in units do
43122: LD_ADDR_VAR 0 4
43126: PUSH
43127: LD_VAR 0 1
43131: PUSH
43132: FOR_IN
43133: IFFALSE 43210
// if BuildingStatus ( b ) = bs_build then
43135: LD_VAR 0 2
43139: PPUSH
43140: CALL_OW 461
43144: PUSH
43145: LD_INT 1
43147: EQUAL
43148: IFFALSE 43208
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
43150: LD_VAR 0 4
43154: PPUSH
43155: LD_STRING h
43157: PUSH
43158: LD_VAR 0 2
43162: PPUSH
43163: CALL_OW 250
43167: PUSH
43168: LD_VAR 0 2
43172: PPUSH
43173: CALL_OW 251
43177: PUSH
43178: LD_VAR 0 2
43182: PUSH
43183: LD_INT 0
43185: PUSH
43186: LD_INT 0
43188: PUSH
43189: LD_INT 0
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: PUSH
43201: EMPTY
43202: LIST
43203: PPUSH
43204: CALL_OW 446
43208: GO 43132
43210: POP
43211: POP
// end ;
43212: LD_VAR 0 3
43216: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43217: LD_INT 0
43219: PPUSH
43220: PPUSH
43221: PPUSH
43222: PPUSH
43223: PPUSH
43224: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43225: LD_VAR 0 1
43229: NOT
43230: PUSH
43231: LD_VAR 0 1
43235: PPUSH
43236: CALL_OW 263
43240: PUSH
43241: LD_INT 2
43243: NONEQUAL
43244: OR
43245: IFFALSE 43249
// exit ;
43247: GO 43565
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43249: LD_ADDR_VAR 0 6
43253: PUSH
43254: LD_INT 22
43256: PUSH
43257: LD_VAR 0 1
43261: PPUSH
43262: CALL_OW 255
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: LD_INT 30
43276: PUSH
43277: LD_INT 36
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 34
43286: PUSH
43287: LD_INT 31
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PPUSH
43303: CALL_OW 69
43307: ST_TO_ADDR
// if not tmp then
43308: LD_VAR 0 6
43312: NOT
43313: IFFALSE 43317
// exit ;
43315: GO 43565
// result := [ ] ;
43317: LD_ADDR_VAR 0 2
43321: PUSH
43322: EMPTY
43323: ST_TO_ADDR
// for i in tmp do
43324: LD_ADDR_VAR 0 3
43328: PUSH
43329: LD_VAR 0 6
43333: PUSH
43334: FOR_IN
43335: IFFALSE 43406
// begin t := UnitsInside ( i ) ;
43337: LD_ADDR_VAR 0 4
43341: PUSH
43342: LD_VAR 0 3
43346: PPUSH
43347: CALL_OW 313
43351: ST_TO_ADDR
// if t then
43352: LD_VAR 0 4
43356: IFFALSE 43404
// for j in t do
43358: LD_ADDR_VAR 0 7
43362: PUSH
43363: LD_VAR 0 4
43367: PUSH
43368: FOR_IN
43369: IFFALSE 43402
// result := Replace ( result , result + 1 , j ) ;
43371: LD_ADDR_VAR 0 2
43375: PUSH
43376: LD_VAR 0 2
43380: PPUSH
43381: LD_VAR 0 2
43385: PUSH
43386: LD_INT 1
43388: PLUS
43389: PPUSH
43390: LD_VAR 0 7
43394: PPUSH
43395: CALL_OW 1
43399: ST_TO_ADDR
43400: GO 43368
43402: POP
43403: POP
// end ;
43404: GO 43334
43406: POP
43407: POP
// if not result then
43408: LD_VAR 0 2
43412: NOT
43413: IFFALSE 43417
// exit ;
43415: GO 43565
// mech := result [ 1 ] ;
43417: LD_ADDR_VAR 0 5
43421: PUSH
43422: LD_VAR 0 2
43426: PUSH
43427: LD_INT 1
43429: ARRAY
43430: ST_TO_ADDR
// if result > 1 then
43431: LD_VAR 0 2
43435: PUSH
43436: LD_INT 1
43438: GREATER
43439: IFFALSE 43551
// begin for i = 2 to result do
43441: LD_ADDR_VAR 0 3
43445: PUSH
43446: DOUBLE
43447: LD_INT 2
43449: DEC
43450: ST_TO_ADDR
43451: LD_VAR 0 2
43455: PUSH
43456: FOR_TO
43457: IFFALSE 43549
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43459: LD_ADDR_VAR 0 4
43463: PUSH
43464: LD_VAR 0 2
43468: PUSH
43469: LD_VAR 0 3
43473: ARRAY
43474: PPUSH
43475: LD_INT 3
43477: PPUSH
43478: CALL_OW 259
43482: PUSH
43483: LD_VAR 0 2
43487: PUSH
43488: LD_VAR 0 3
43492: ARRAY
43493: PPUSH
43494: CALL_OW 432
43498: MINUS
43499: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43500: LD_VAR 0 4
43504: PUSH
43505: LD_VAR 0 5
43509: PPUSH
43510: LD_INT 3
43512: PPUSH
43513: CALL_OW 259
43517: PUSH
43518: LD_VAR 0 5
43522: PPUSH
43523: CALL_OW 432
43527: MINUS
43528: GREATEREQUAL
43529: IFFALSE 43547
// mech := result [ i ] ;
43531: LD_ADDR_VAR 0 5
43535: PUSH
43536: LD_VAR 0 2
43540: PUSH
43541: LD_VAR 0 3
43545: ARRAY
43546: ST_TO_ADDR
// end ;
43547: GO 43456
43549: POP
43550: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43551: LD_VAR 0 1
43555: PPUSH
43556: LD_VAR 0 5
43560: PPUSH
43561: CALL_OW 135
// end ;
43565: LD_VAR 0 2
43569: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43570: LD_INT 0
43572: PPUSH
43573: PPUSH
43574: PPUSH
43575: PPUSH
43576: PPUSH
43577: PPUSH
43578: PPUSH
43579: PPUSH
43580: PPUSH
43581: PPUSH
43582: PPUSH
43583: PPUSH
43584: PPUSH
// result := [ ] ;
43585: LD_ADDR_VAR 0 7
43589: PUSH
43590: EMPTY
43591: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43592: LD_VAR 0 1
43596: PPUSH
43597: CALL_OW 266
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: IN
43612: NOT
43613: IFFALSE 43617
// exit ;
43615: GO 45251
// if name then
43617: LD_VAR 0 3
43621: IFFALSE 43637
// SetBName ( base_dep , name ) ;
43623: LD_VAR 0 1
43627: PPUSH
43628: LD_VAR 0 3
43632: PPUSH
43633: CALL_OW 500
// base := GetBase ( base_dep ) ;
43637: LD_ADDR_VAR 0 15
43641: PUSH
43642: LD_VAR 0 1
43646: PPUSH
43647: CALL_OW 274
43651: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43652: LD_ADDR_VAR 0 16
43656: PUSH
43657: LD_VAR 0 1
43661: PPUSH
43662: CALL_OW 255
43666: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43667: LD_ADDR_VAR 0 17
43671: PUSH
43672: LD_VAR 0 1
43676: PPUSH
43677: CALL_OW 248
43681: ST_TO_ADDR
// if sources then
43682: LD_VAR 0 5
43686: IFFALSE 43733
// for i = 1 to 3 do
43688: LD_ADDR_VAR 0 8
43692: PUSH
43693: DOUBLE
43694: LD_INT 1
43696: DEC
43697: ST_TO_ADDR
43698: LD_INT 3
43700: PUSH
43701: FOR_TO
43702: IFFALSE 43731
// AddResourceType ( base , i , sources [ i ] ) ;
43704: LD_VAR 0 15
43708: PPUSH
43709: LD_VAR 0 8
43713: PPUSH
43714: LD_VAR 0 5
43718: PUSH
43719: LD_VAR 0 8
43723: ARRAY
43724: PPUSH
43725: CALL_OW 276
43729: GO 43701
43731: POP
43732: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43733: LD_ADDR_VAR 0 18
43737: PUSH
43738: LD_VAR 0 15
43742: PPUSH
43743: LD_VAR 0 2
43747: PPUSH
43748: LD_INT 1
43750: PPUSH
43751: CALL 42994 0 3
43755: ST_TO_ADDR
// InitHc ;
43756: CALL_OW 19
// InitUc ;
43760: CALL_OW 18
// uc_side := side ;
43764: LD_ADDR_OWVAR 20
43768: PUSH
43769: LD_VAR 0 16
43773: ST_TO_ADDR
// uc_nation := nation ;
43774: LD_ADDR_OWVAR 21
43778: PUSH
43779: LD_VAR 0 17
43783: ST_TO_ADDR
// if buildings then
43784: LD_VAR 0 18
43788: IFFALSE 45110
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43790: LD_ADDR_VAR 0 19
43794: PUSH
43795: LD_VAR 0 18
43799: PPUSH
43800: LD_INT 2
43802: PUSH
43803: LD_INT 30
43805: PUSH
43806: LD_INT 29
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 30
43815: PUSH
43816: LD_INT 30
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: LIST
43827: PPUSH
43828: CALL_OW 72
43832: ST_TO_ADDR
// if tmp then
43833: LD_VAR 0 19
43837: IFFALSE 43885
// for i in tmp do
43839: LD_ADDR_VAR 0 8
43843: PUSH
43844: LD_VAR 0 19
43848: PUSH
43849: FOR_IN
43850: IFFALSE 43883
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43852: LD_VAR 0 8
43856: PPUSH
43857: CALL_OW 250
43861: PPUSH
43862: LD_VAR 0 8
43866: PPUSH
43867: CALL_OW 251
43871: PPUSH
43872: LD_VAR 0 16
43876: PPUSH
43877: CALL_OW 441
43881: GO 43849
43883: POP
43884: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43885: LD_VAR 0 18
43889: PPUSH
43890: LD_INT 2
43892: PUSH
43893: LD_INT 30
43895: PUSH
43896: LD_INT 32
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 30
43905: PUSH
43906: LD_INT 33
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: LIST
43917: PPUSH
43918: CALL_OW 72
43922: IFFALSE 44010
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43924: LD_ADDR_VAR 0 8
43928: PUSH
43929: LD_VAR 0 18
43933: PPUSH
43934: LD_INT 2
43936: PUSH
43937: LD_INT 30
43939: PUSH
43940: LD_INT 32
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 30
43949: PUSH
43950: LD_INT 33
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: PPUSH
43962: CALL_OW 72
43966: PUSH
43967: FOR_IN
43968: IFFALSE 44008
// begin if not GetBWeapon ( i ) then
43970: LD_VAR 0 8
43974: PPUSH
43975: CALL_OW 269
43979: NOT
43980: IFFALSE 44006
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43982: LD_VAR 0 8
43986: PPUSH
43987: LD_VAR 0 8
43991: PPUSH
43992: LD_VAR 0 2
43996: PPUSH
43997: CALL 45256 0 2
44001: PPUSH
44002: CALL_OW 431
// end ;
44006: GO 43967
44008: POP
44009: POP
// end ; for i = 1 to personel do
44010: LD_ADDR_VAR 0 8
44014: PUSH
44015: DOUBLE
44016: LD_INT 1
44018: DEC
44019: ST_TO_ADDR
44020: LD_VAR 0 6
44024: PUSH
44025: FOR_TO
44026: IFFALSE 45090
// begin if i > 4 then
44028: LD_VAR 0 8
44032: PUSH
44033: LD_INT 4
44035: GREATER
44036: IFFALSE 44040
// break ;
44038: GO 45090
// case i of 1 :
44040: LD_VAR 0 8
44044: PUSH
44045: LD_INT 1
44047: DOUBLE
44048: EQUAL
44049: IFTRUE 44053
44051: GO 44133
44053: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
44054: LD_ADDR_VAR 0 12
44058: PUSH
44059: LD_VAR 0 18
44063: PPUSH
44064: LD_INT 22
44066: PUSH
44067: LD_VAR 0 16
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 58
44078: PUSH
44079: EMPTY
44080: LIST
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: LD_INT 30
44087: PUSH
44088: LD_INT 32
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: PUSH
44095: LD_INT 30
44097: PUSH
44098: LD_INT 4
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 30
44107: PUSH
44108: LD_INT 5
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: LIST
44119: LIST
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: LIST
44125: PPUSH
44126: CALL_OW 72
44130: ST_TO_ADDR
44131: GO 44355
44133: LD_INT 2
44135: DOUBLE
44136: EQUAL
44137: IFTRUE 44141
44139: GO 44203
44141: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
44142: LD_ADDR_VAR 0 12
44146: PUSH
44147: LD_VAR 0 18
44151: PPUSH
44152: LD_INT 22
44154: PUSH
44155: LD_VAR 0 16
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 30
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: EMPTY
44174: LIST
44175: LIST
44176: PUSH
44177: LD_INT 30
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: LIST
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PPUSH
44196: CALL_OW 72
44200: ST_TO_ADDR
44201: GO 44355
44203: LD_INT 3
44205: DOUBLE
44206: EQUAL
44207: IFTRUE 44211
44209: GO 44273
44211: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44212: LD_ADDR_VAR 0 12
44216: PUSH
44217: LD_VAR 0 18
44221: PPUSH
44222: LD_INT 22
44224: PUSH
44225: LD_VAR 0 16
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 2
44236: PUSH
44237: LD_INT 30
44239: PUSH
44240: LD_INT 2
44242: PUSH
44243: EMPTY
44244: LIST
44245: LIST
44246: PUSH
44247: LD_INT 30
44249: PUSH
44250: LD_INT 3
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: PUSH
44262: EMPTY
44263: LIST
44264: LIST
44265: PPUSH
44266: CALL_OW 72
44270: ST_TO_ADDR
44271: GO 44355
44273: LD_INT 4
44275: DOUBLE
44276: EQUAL
44277: IFTRUE 44281
44279: GO 44354
44281: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44282: LD_ADDR_VAR 0 12
44286: PUSH
44287: LD_VAR 0 18
44291: PPUSH
44292: LD_INT 22
44294: PUSH
44295: LD_VAR 0 16
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 2
44306: PUSH
44307: LD_INT 30
44309: PUSH
44310: LD_INT 6
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 30
44319: PUSH
44320: LD_INT 7
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 30
44329: PUSH
44330: LD_INT 8
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PPUSH
44347: CALL_OW 72
44351: ST_TO_ADDR
44352: GO 44355
44354: POP
// if i = 1 then
44355: LD_VAR 0 8
44359: PUSH
44360: LD_INT 1
44362: EQUAL
44363: IFFALSE 44474
// begin tmp := [ ] ;
44365: LD_ADDR_VAR 0 19
44369: PUSH
44370: EMPTY
44371: ST_TO_ADDR
// for j in f do
44372: LD_ADDR_VAR 0 9
44376: PUSH
44377: LD_VAR 0 12
44381: PUSH
44382: FOR_IN
44383: IFFALSE 44456
// if GetBType ( j ) = b_bunker then
44385: LD_VAR 0 9
44389: PPUSH
44390: CALL_OW 266
44394: PUSH
44395: LD_INT 32
44397: EQUAL
44398: IFFALSE 44425
// tmp := Insert ( tmp , 1 , j ) else
44400: LD_ADDR_VAR 0 19
44404: PUSH
44405: LD_VAR 0 19
44409: PPUSH
44410: LD_INT 1
44412: PPUSH
44413: LD_VAR 0 9
44417: PPUSH
44418: CALL_OW 2
44422: ST_TO_ADDR
44423: GO 44454
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44425: LD_ADDR_VAR 0 19
44429: PUSH
44430: LD_VAR 0 19
44434: PPUSH
44435: LD_VAR 0 19
44439: PUSH
44440: LD_INT 1
44442: PLUS
44443: PPUSH
44444: LD_VAR 0 9
44448: PPUSH
44449: CALL_OW 2
44453: ST_TO_ADDR
44454: GO 44382
44456: POP
44457: POP
// if tmp then
44458: LD_VAR 0 19
44462: IFFALSE 44474
// f := tmp ;
44464: LD_ADDR_VAR 0 12
44468: PUSH
44469: LD_VAR 0 19
44473: ST_TO_ADDR
// end ; x := personel [ i ] ;
44474: LD_ADDR_VAR 0 13
44478: PUSH
44479: LD_VAR 0 6
44483: PUSH
44484: LD_VAR 0 8
44488: ARRAY
44489: ST_TO_ADDR
// if x = - 1 then
44490: LD_VAR 0 13
44494: PUSH
44495: LD_INT 1
44497: NEG
44498: EQUAL
44499: IFFALSE 44708
// begin for j in f do
44501: LD_ADDR_VAR 0 9
44505: PUSH
44506: LD_VAR 0 12
44510: PUSH
44511: FOR_IN
44512: IFFALSE 44704
// repeat InitHc ;
44514: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44518: LD_VAR 0 9
44522: PPUSH
44523: CALL_OW 266
44527: PUSH
44528: LD_INT 5
44530: EQUAL
44531: IFFALSE 44601
// begin if UnitsInside ( j ) < 3 then
44533: LD_VAR 0 9
44537: PPUSH
44538: CALL_OW 313
44542: PUSH
44543: LD_INT 3
44545: LESS
44546: IFFALSE 44582
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44548: LD_INT 0
44550: PPUSH
44551: LD_INT 5
44553: PUSH
44554: LD_INT 8
44556: PUSH
44557: LD_INT 9
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: LIST
44564: PUSH
44565: LD_VAR 0 17
44569: ARRAY
44570: PPUSH
44571: LD_VAR 0 4
44575: PPUSH
44576: CALL_OW 380
44580: GO 44599
// PrepareHuman ( false , i , skill ) ;
44582: LD_INT 0
44584: PPUSH
44585: LD_VAR 0 8
44589: PPUSH
44590: LD_VAR 0 4
44594: PPUSH
44595: CALL_OW 380
// end else
44599: GO 44618
// PrepareHuman ( false , i , skill ) ;
44601: LD_INT 0
44603: PPUSH
44604: LD_VAR 0 8
44608: PPUSH
44609: LD_VAR 0 4
44613: PPUSH
44614: CALL_OW 380
// un := CreateHuman ;
44618: LD_ADDR_VAR 0 14
44622: PUSH
44623: CALL_OW 44
44627: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44628: LD_ADDR_VAR 0 7
44632: PUSH
44633: LD_VAR 0 7
44637: PPUSH
44638: LD_INT 1
44640: PPUSH
44641: LD_VAR 0 14
44645: PPUSH
44646: CALL_OW 2
44650: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44651: LD_VAR 0 14
44655: PPUSH
44656: LD_VAR 0 9
44660: PPUSH
44661: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44665: LD_VAR 0 9
44669: PPUSH
44670: CALL_OW 313
44674: PUSH
44675: LD_INT 6
44677: EQUAL
44678: PUSH
44679: LD_VAR 0 9
44683: PPUSH
44684: CALL_OW 266
44688: PUSH
44689: LD_INT 32
44691: PUSH
44692: LD_INT 31
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: IN
44699: OR
44700: IFFALSE 44514
44702: GO 44511
44704: POP
44705: POP
// end else
44706: GO 45088
// for j = 1 to x do
44708: LD_ADDR_VAR 0 9
44712: PUSH
44713: DOUBLE
44714: LD_INT 1
44716: DEC
44717: ST_TO_ADDR
44718: LD_VAR 0 13
44722: PUSH
44723: FOR_TO
44724: IFFALSE 45086
// begin InitHc ;
44726: CALL_OW 19
// if not f then
44730: LD_VAR 0 12
44734: NOT
44735: IFFALSE 44824
// begin PrepareHuman ( false , i , skill ) ;
44737: LD_INT 0
44739: PPUSH
44740: LD_VAR 0 8
44744: PPUSH
44745: LD_VAR 0 4
44749: PPUSH
44750: CALL_OW 380
// un := CreateHuman ;
44754: LD_ADDR_VAR 0 14
44758: PUSH
44759: CALL_OW 44
44763: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44764: LD_ADDR_VAR 0 7
44768: PUSH
44769: LD_VAR 0 7
44773: PPUSH
44774: LD_INT 1
44776: PPUSH
44777: LD_VAR 0 14
44781: PPUSH
44782: CALL_OW 2
44786: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44787: LD_VAR 0 14
44791: PPUSH
44792: LD_VAR 0 1
44796: PPUSH
44797: CALL_OW 250
44801: PPUSH
44802: LD_VAR 0 1
44806: PPUSH
44807: CALL_OW 251
44811: PPUSH
44812: LD_INT 10
44814: PPUSH
44815: LD_INT 0
44817: PPUSH
44818: CALL_OW 50
// continue ;
44822: GO 44723
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44824: LD_VAR 0 12
44828: PUSH
44829: LD_INT 1
44831: ARRAY
44832: PPUSH
44833: CALL_OW 313
44837: PUSH
44838: LD_VAR 0 12
44842: PUSH
44843: LD_INT 1
44845: ARRAY
44846: PPUSH
44847: CALL_OW 266
44851: PUSH
44852: LD_INT 32
44854: PUSH
44855: LD_INT 31
44857: PUSH
44858: EMPTY
44859: LIST
44860: LIST
44861: IN
44862: AND
44863: PUSH
44864: LD_VAR 0 12
44868: PUSH
44869: LD_INT 1
44871: ARRAY
44872: PPUSH
44873: CALL_OW 313
44877: PUSH
44878: LD_INT 6
44880: EQUAL
44881: OR
44882: IFFALSE 44902
// f := Delete ( f , 1 ) ;
44884: LD_ADDR_VAR 0 12
44888: PUSH
44889: LD_VAR 0 12
44893: PPUSH
44894: LD_INT 1
44896: PPUSH
44897: CALL_OW 3
44901: ST_TO_ADDR
// if not f then
44902: LD_VAR 0 12
44906: NOT
44907: IFFALSE 44925
// begin x := x + 2 ;
44909: LD_ADDR_VAR 0 13
44913: PUSH
44914: LD_VAR 0 13
44918: PUSH
44919: LD_INT 2
44921: PLUS
44922: ST_TO_ADDR
// continue ;
44923: GO 44723
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44925: LD_VAR 0 12
44929: PUSH
44930: LD_INT 1
44932: ARRAY
44933: PPUSH
44934: CALL_OW 266
44938: PUSH
44939: LD_INT 5
44941: EQUAL
44942: IFFALSE 45016
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44944: LD_VAR 0 12
44948: PUSH
44949: LD_INT 1
44951: ARRAY
44952: PPUSH
44953: CALL_OW 313
44957: PUSH
44958: LD_INT 3
44960: LESS
44961: IFFALSE 44997
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44963: LD_INT 0
44965: PPUSH
44966: LD_INT 5
44968: PUSH
44969: LD_INT 8
44971: PUSH
44972: LD_INT 9
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: LIST
44979: PUSH
44980: LD_VAR 0 17
44984: ARRAY
44985: PPUSH
44986: LD_VAR 0 4
44990: PPUSH
44991: CALL_OW 380
44995: GO 45014
// PrepareHuman ( false , i , skill ) ;
44997: LD_INT 0
44999: PPUSH
45000: LD_VAR 0 8
45004: PPUSH
45005: LD_VAR 0 4
45009: PPUSH
45010: CALL_OW 380
// end else
45014: GO 45033
// PrepareHuman ( false , i , skill ) ;
45016: LD_INT 0
45018: PPUSH
45019: LD_VAR 0 8
45023: PPUSH
45024: LD_VAR 0 4
45028: PPUSH
45029: CALL_OW 380
// un := CreateHuman ;
45033: LD_ADDR_VAR 0 14
45037: PUSH
45038: CALL_OW 44
45042: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
45043: LD_ADDR_VAR 0 7
45047: PUSH
45048: LD_VAR 0 7
45052: PPUSH
45053: LD_INT 1
45055: PPUSH
45056: LD_VAR 0 14
45060: PPUSH
45061: CALL_OW 2
45065: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
45066: LD_VAR 0 14
45070: PPUSH
45071: LD_VAR 0 12
45075: PUSH
45076: LD_INT 1
45078: ARRAY
45079: PPUSH
45080: CALL_OW 52
// end ;
45084: GO 44723
45086: POP
45087: POP
// end ;
45088: GO 44025
45090: POP
45091: POP
// result := result ^ buildings ;
45092: LD_ADDR_VAR 0 7
45096: PUSH
45097: LD_VAR 0 7
45101: PUSH
45102: LD_VAR 0 18
45106: ADD
45107: ST_TO_ADDR
// end else
45108: GO 45251
// begin for i = 1 to personel do
45110: LD_ADDR_VAR 0 8
45114: PUSH
45115: DOUBLE
45116: LD_INT 1
45118: DEC
45119: ST_TO_ADDR
45120: LD_VAR 0 6
45124: PUSH
45125: FOR_TO
45126: IFFALSE 45249
// begin if i > 4 then
45128: LD_VAR 0 8
45132: PUSH
45133: LD_INT 4
45135: GREATER
45136: IFFALSE 45140
// break ;
45138: GO 45249
// x := personel [ i ] ;
45140: LD_ADDR_VAR 0 13
45144: PUSH
45145: LD_VAR 0 6
45149: PUSH
45150: LD_VAR 0 8
45154: ARRAY
45155: ST_TO_ADDR
// if x = - 1 then
45156: LD_VAR 0 13
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: EQUAL
45165: IFFALSE 45169
// continue ;
45167: GO 45125
// PrepareHuman ( false , i , skill ) ;
45169: LD_INT 0
45171: PPUSH
45172: LD_VAR 0 8
45176: PPUSH
45177: LD_VAR 0 4
45181: PPUSH
45182: CALL_OW 380
// un := CreateHuman ;
45186: LD_ADDR_VAR 0 14
45190: PUSH
45191: CALL_OW 44
45195: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45196: LD_VAR 0 14
45200: PPUSH
45201: LD_VAR 0 1
45205: PPUSH
45206: CALL_OW 250
45210: PPUSH
45211: LD_VAR 0 1
45215: PPUSH
45216: CALL_OW 251
45220: PPUSH
45221: LD_INT 10
45223: PPUSH
45224: LD_INT 0
45226: PPUSH
45227: CALL_OW 50
// result := result ^ un ;
45231: LD_ADDR_VAR 0 7
45235: PUSH
45236: LD_VAR 0 7
45240: PUSH
45241: LD_VAR 0 14
45245: ADD
45246: ST_TO_ADDR
// end ;
45247: GO 45125
45249: POP
45250: POP
// end ; end ;
45251: LD_VAR 0 7
45255: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45256: LD_INT 0
45258: PPUSH
45259: PPUSH
45260: PPUSH
45261: PPUSH
45262: PPUSH
45263: PPUSH
45264: PPUSH
45265: PPUSH
45266: PPUSH
45267: PPUSH
45268: PPUSH
45269: PPUSH
45270: PPUSH
45271: PPUSH
45272: PPUSH
45273: PPUSH
// result := false ;
45274: LD_ADDR_VAR 0 3
45278: PUSH
45279: LD_INT 0
45281: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45282: LD_VAR 0 1
45286: NOT
45287: PUSH
45288: LD_VAR 0 1
45292: PPUSH
45293: CALL_OW 266
45297: PUSH
45298: LD_INT 32
45300: PUSH
45301: LD_INT 33
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: IN
45308: NOT
45309: OR
45310: IFFALSE 45314
// exit ;
45312: GO 46423
// nat := GetNation ( tower ) ;
45314: LD_ADDR_VAR 0 12
45318: PUSH
45319: LD_VAR 0 1
45323: PPUSH
45324: CALL_OW 248
45328: ST_TO_ADDR
// side := GetSide ( tower ) ;
45329: LD_ADDR_VAR 0 16
45333: PUSH
45334: LD_VAR 0 1
45338: PPUSH
45339: CALL_OW 255
45343: ST_TO_ADDR
// x := GetX ( tower ) ;
45344: LD_ADDR_VAR 0 10
45348: PUSH
45349: LD_VAR 0 1
45353: PPUSH
45354: CALL_OW 250
45358: ST_TO_ADDR
// y := GetY ( tower ) ;
45359: LD_ADDR_VAR 0 11
45363: PUSH
45364: LD_VAR 0 1
45368: PPUSH
45369: CALL_OW 251
45373: ST_TO_ADDR
// if not x or not y then
45374: LD_VAR 0 10
45378: NOT
45379: PUSH
45380: LD_VAR 0 11
45384: NOT
45385: OR
45386: IFFALSE 45390
// exit ;
45388: GO 46423
// weapon := 0 ;
45390: LD_ADDR_VAR 0 18
45394: PUSH
45395: LD_INT 0
45397: ST_TO_ADDR
// fac_list := [ ] ;
45398: LD_ADDR_VAR 0 17
45402: PUSH
45403: EMPTY
45404: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45405: LD_ADDR_VAR 0 6
45409: PUSH
45410: LD_VAR 0 1
45414: PPUSH
45415: CALL_OW 274
45419: PPUSH
45420: LD_VAR 0 2
45424: PPUSH
45425: LD_INT 0
45427: PPUSH
45428: CALL 42994 0 3
45432: PPUSH
45433: LD_INT 30
45435: PUSH
45436: LD_INT 3
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PPUSH
45443: CALL_OW 72
45447: ST_TO_ADDR
// if not factories then
45448: LD_VAR 0 6
45452: NOT
45453: IFFALSE 45457
// exit ;
45455: GO 46423
// for i in factories do
45457: LD_ADDR_VAR 0 8
45461: PUSH
45462: LD_VAR 0 6
45466: PUSH
45467: FOR_IN
45468: IFFALSE 45493
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45470: LD_ADDR_VAR 0 17
45474: PUSH
45475: LD_VAR 0 17
45479: PUSH
45480: LD_VAR 0 8
45484: PPUSH
45485: CALL_OW 478
45489: UNION
45490: ST_TO_ADDR
45491: GO 45467
45493: POP
45494: POP
// if not fac_list then
45495: LD_VAR 0 17
45499: NOT
45500: IFFALSE 45504
// exit ;
45502: GO 46423
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45504: LD_ADDR_VAR 0 5
45508: PUSH
45509: LD_INT 4
45511: PUSH
45512: LD_INT 5
45514: PUSH
45515: LD_INT 9
45517: PUSH
45518: LD_INT 10
45520: PUSH
45521: LD_INT 6
45523: PUSH
45524: LD_INT 7
45526: PUSH
45527: LD_INT 11
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 27
45541: PUSH
45542: LD_INT 28
45544: PUSH
45545: LD_INT 26
45547: PUSH
45548: LD_INT 30
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 43
45559: PUSH
45560: LD_INT 44
45562: PUSH
45563: LD_INT 46
45565: PUSH
45566: LD_INT 45
45568: PUSH
45569: LD_INT 47
45571: PUSH
45572: LD_INT 49
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: LIST
45581: LIST
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: LIST
45587: PUSH
45588: LD_VAR 0 12
45592: ARRAY
45593: ST_TO_ADDR
// list := list isect fac_list ;
45594: LD_ADDR_VAR 0 5
45598: PUSH
45599: LD_VAR 0 5
45603: PUSH
45604: LD_VAR 0 17
45608: ISECT
45609: ST_TO_ADDR
// if not list then
45610: LD_VAR 0 5
45614: NOT
45615: IFFALSE 45619
// exit ;
45617: GO 46423
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45619: LD_VAR 0 12
45623: PUSH
45624: LD_INT 3
45626: EQUAL
45627: PUSH
45628: LD_INT 49
45630: PUSH
45631: LD_VAR 0 5
45635: IN
45636: AND
45637: PUSH
45638: LD_INT 31
45640: PPUSH
45641: LD_VAR 0 16
45645: PPUSH
45646: CALL_OW 321
45650: PUSH
45651: LD_INT 2
45653: EQUAL
45654: AND
45655: IFFALSE 45715
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45657: LD_INT 22
45659: PUSH
45660: LD_VAR 0 16
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 35
45671: PUSH
45672: LD_INT 49
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 91
45681: PUSH
45682: LD_VAR 0 1
45686: PUSH
45687: LD_INT 10
45689: PUSH
45690: EMPTY
45691: LIST
45692: LIST
45693: LIST
45694: PUSH
45695: EMPTY
45696: LIST
45697: LIST
45698: LIST
45699: PPUSH
45700: CALL_OW 69
45704: NOT
45705: IFFALSE 45715
// weapon := ru_time_lapser ;
45707: LD_ADDR_VAR 0 18
45711: PUSH
45712: LD_INT 49
45714: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45715: LD_VAR 0 12
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: LD_INT 2
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: IN
45730: PUSH
45731: LD_INT 11
45733: PUSH
45734: LD_VAR 0 5
45738: IN
45739: PUSH
45740: LD_INT 30
45742: PUSH
45743: LD_VAR 0 5
45747: IN
45748: OR
45749: AND
45750: PUSH
45751: LD_INT 6
45753: PPUSH
45754: LD_VAR 0 16
45758: PPUSH
45759: CALL_OW 321
45763: PUSH
45764: LD_INT 2
45766: EQUAL
45767: AND
45768: IFFALSE 45933
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45770: LD_INT 22
45772: PUSH
45773: LD_VAR 0 16
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 2
45784: PUSH
45785: LD_INT 35
45787: PUSH
45788: LD_INT 11
45790: PUSH
45791: EMPTY
45792: LIST
45793: LIST
45794: PUSH
45795: LD_INT 35
45797: PUSH
45798: LD_INT 30
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 91
45812: PUSH
45813: LD_VAR 0 1
45817: PUSH
45818: LD_INT 18
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: LIST
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: LIST
45830: PPUSH
45831: CALL_OW 69
45835: NOT
45836: PUSH
45837: LD_INT 22
45839: PUSH
45840: LD_VAR 0 16
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: LD_INT 30
45854: PUSH
45855: LD_INT 32
45857: PUSH
45858: EMPTY
45859: LIST
45860: LIST
45861: PUSH
45862: LD_INT 30
45864: PUSH
45865: LD_INT 33
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 91
45879: PUSH
45880: LD_VAR 0 1
45884: PUSH
45885: LD_INT 12
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: LIST
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: PUSH
45898: EMPTY
45899: LIST
45900: PPUSH
45901: CALL_OW 69
45905: PUSH
45906: LD_INT 2
45908: GREATER
45909: AND
45910: IFFALSE 45933
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45912: LD_ADDR_VAR 0 18
45916: PUSH
45917: LD_INT 11
45919: PUSH
45920: LD_INT 30
45922: PUSH
45923: EMPTY
45924: LIST
45925: LIST
45926: PUSH
45927: LD_VAR 0 12
45931: ARRAY
45932: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45933: LD_VAR 0 18
45937: NOT
45938: PUSH
45939: LD_INT 40
45941: PPUSH
45942: LD_VAR 0 16
45946: PPUSH
45947: CALL_OW 321
45951: PUSH
45952: LD_INT 2
45954: EQUAL
45955: AND
45956: PUSH
45957: LD_INT 7
45959: PUSH
45960: LD_VAR 0 5
45964: IN
45965: PUSH
45966: LD_INT 28
45968: PUSH
45969: LD_VAR 0 5
45973: IN
45974: OR
45975: PUSH
45976: LD_INT 45
45978: PUSH
45979: LD_VAR 0 5
45983: IN
45984: OR
45985: AND
45986: IFFALSE 46240
// begin hex := GetHexInfo ( x , y ) ;
45988: LD_ADDR_VAR 0 4
45992: PUSH
45993: LD_VAR 0 10
45997: PPUSH
45998: LD_VAR 0 11
46002: PPUSH
46003: CALL_OW 546
46007: ST_TO_ADDR
// if hex [ 1 ] then
46008: LD_VAR 0 4
46012: PUSH
46013: LD_INT 1
46015: ARRAY
46016: IFFALSE 46020
// exit ;
46018: GO 46423
// height := hex [ 2 ] ;
46020: LD_ADDR_VAR 0 15
46024: PUSH
46025: LD_VAR 0 4
46029: PUSH
46030: LD_INT 2
46032: ARRAY
46033: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
46034: LD_ADDR_VAR 0 14
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: LD_INT 3
46047: PUSH
46048: LD_INT 5
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: LIST
46055: LIST
46056: ST_TO_ADDR
// for i in tmp do
46057: LD_ADDR_VAR 0 8
46061: PUSH
46062: LD_VAR 0 14
46066: PUSH
46067: FOR_IN
46068: IFFALSE 46238
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
46070: LD_ADDR_VAR 0 9
46074: PUSH
46075: LD_VAR 0 10
46079: PPUSH
46080: LD_VAR 0 8
46084: PPUSH
46085: LD_INT 5
46087: PPUSH
46088: CALL_OW 272
46092: PUSH
46093: LD_VAR 0 11
46097: PPUSH
46098: LD_VAR 0 8
46102: PPUSH
46103: LD_INT 5
46105: PPUSH
46106: CALL_OW 273
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
46115: LD_VAR 0 9
46119: PUSH
46120: LD_INT 1
46122: ARRAY
46123: PPUSH
46124: LD_VAR 0 9
46128: PUSH
46129: LD_INT 2
46131: ARRAY
46132: PPUSH
46133: CALL_OW 488
46137: IFFALSE 46236
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
46139: LD_ADDR_VAR 0 4
46143: PUSH
46144: LD_VAR 0 9
46148: PUSH
46149: LD_INT 1
46151: ARRAY
46152: PPUSH
46153: LD_VAR 0 9
46157: PUSH
46158: LD_INT 2
46160: ARRAY
46161: PPUSH
46162: CALL_OW 546
46166: ST_TO_ADDR
// if hex [ 1 ] then
46167: LD_VAR 0 4
46171: PUSH
46172: LD_INT 1
46174: ARRAY
46175: IFFALSE 46179
// continue ;
46177: GO 46067
// h := hex [ 2 ] ;
46179: LD_ADDR_VAR 0 13
46183: PUSH
46184: LD_VAR 0 4
46188: PUSH
46189: LD_INT 2
46191: ARRAY
46192: ST_TO_ADDR
// if h + 7 < height then
46193: LD_VAR 0 13
46197: PUSH
46198: LD_INT 7
46200: PLUS
46201: PUSH
46202: LD_VAR 0 15
46206: LESS
46207: IFFALSE 46236
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46209: LD_ADDR_VAR 0 18
46213: PUSH
46214: LD_INT 7
46216: PUSH
46217: LD_INT 28
46219: PUSH
46220: LD_INT 45
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: LIST
46227: PUSH
46228: LD_VAR 0 12
46232: ARRAY
46233: ST_TO_ADDR
// break ;
46234: GO 46238
// end ; end ; end ;
46236: GO 46067
46238: POP
46239: POP
// end ; if not weapon then
46240: LD_VAR 0 18
46244: NOT
46245: IFFALSE 46305
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46247: LD_ADDR_VAR 0 5
46251: PUSH
46252: LD_VAR 0 5
46256: PUSH
46257: LD_INT 11
46259: PUSH
46260: LD_INT 30
46262: PUSH
46263: LD_INT 49
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: LIST
46270: DIFF
46271: ST_TO_ADDR
// if not list then
46272: LD_VAR 0 5
46276: NOT
46277: IFFALSE 46281
// exit ;
46279: GO 46423
// weapon := list [ rand ( 1 , list ) ] ;
46281: LD_ADDR_VAR 0 18
46285: PUSH
46286: LD_VAR 0 5
46290: PUSH
46291: LD_INT 1
46293: PPUSH
46294: LD_VAR 0 5
46298: PPUSH
46299: CALL_OW 12
46303: ARRAY
46304: ST_TO_ADDR
// end ; if weapon then
46305: LD_VAR 0 18
46309: IFFALSE 46423
// begin tmp := CostOfWeapon ( weapon ) ;
46311: LD_ADDR_VAR 0 14
46315: PUSH
46316: LD_VAR 0 18
46320: PPUSH
46321: CALL_OW 451
46325: ST_TO_ADDR
// j := GetBase ( tower ) ;
46326: LD_ADDR_VAR 0 9
46330: PUSH
46331: LD_VAR 0 1
46335: PPUSH
46336: CALL_OW 274
46340: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46341: LD_VAR 0 9
46345: PPUSH
46346: LD_INT 1
46348: PPUSH
46349: CALL_OW 275
46353: PUSH
46354: LD_VAR 0 14
46358: PUSH
46359: LD_INT 1
46361: ARRAY
46362: GREATEREQUAL
46363: PUSH
46364: LD_VAR 0 9
46368: PPUSH
46369: LD_INT 2
46371: PPUSH
46372: CALL_OW 275
46376: PUSH
46377: LD_VAR 0 14
46381: PUSH
46382: LD_INT 2
46384: ARRAY
46385: GREATEREQUAL
46386: AND
46387: PUSH
46388: LD_VAR 0 9
46392: PPUSH
46393: LD_INT 3
46395: PPUSH
46396: CALL_OW 275
46400: PUSH
46401: LD_VAR 0 14
46405: PUSH
46406: LD_INT 3
46408: ARRAY
46409: GREATEREQUAL
46410: AND
46411: IFFALSE 46423
// result := weapon ;
46413: LD_ADDR_VAR 0 3
46417: PUSH
46418: LD_VAR 0 18
46422: ST_TO_ADDR
// end ; end ;
46423: LD_VAR 0 3
46427: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46428: LD_INT 0
46430: PPUSH
46431: PPUSH
// result := true ;
46432: LD_ADDR_VAR 0 3
46436: PUSH
46437: LD_INT 1
46439: ST_TO_ADDR
// if array1 = array2 then
46440: LD_VAR 0 1
46444: PUSH
46445: LD_VAR 0 2
46449: EQUAL
46450: IFFALSE 46510
// begin for i = 1 to array1 do
46452: LD_ADDR_VAR 0 4
46456: PUSH
46457: DOUBLE
46458: LD_INT 1
46460: DEC
46461: ST_TO_ADDR
46462: LD_VAR 0 1
46466: PUSH
46467: FOR_TO
46468: IFFALSE 46506
// if array1 [ i ] <> array2 [ i ] then
46470: LD_VAR 0 1
46474: PUSH
46475: LD_VAR 0 4
46479: ARRAY
46480: PUSH
46481: LD_VAR 0 2
46485: PUSH
46486: LD_VAR 0 4
46490: ARRAY
46491: NONEQUAL
46492: IFFALSE 46504
// begin result := false ;
46494: LD_ADDR_VAR 0 3
46498: PUSH
46499: LD_INT 0
46501: ST_TO_ADDR
// break ;
46502: GO 46506
// end ;
46504: GO 46467
46506: POP
46507: POP
// end else
46508: GO 46518
// result := false ;
46510: LD_ADDR_VAR 0 3
46514: PUSH
46515: LD_INT 0
46517: ST_TO_ADDR
// end ;
46518: LD_VAR 0 3
46522: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46523: LD_INT 0
46525: PPUSH
46526: PPUSH
// if not array1 or not array2 then
46527: LD_VAR 0 1
46531: NOT
46532: PUSH
46533: LD_VAR 0 2
46537: NOT
46538: OR
46539: IFFALSE 46543
// exit ;
46541: GO 46607
// result := true ;
46543: LD_ADDR_VAR 0 3
46547: PUSH
46548: LD_INT 1
46550: ST_TO_ADDR
// for i = 1 to array1 do
46551: LD_ADDR_VAR 0 4
46555: PUSH
46556: DOUBLE
46557: LD_INT 1
46559: DEC
46560: ST_TO_ADDR
46561: LD_VAR 0 1
46565: PUSH
46566: FOR_TO
46567: IFFALSE 46605
// if array1 [ i ] <> array2 [ i ] then
46569: LD_VAR 0 1
46573: PUSH
46574: LD_VAR 0 4
46578: ARRAY
46579: PUSH
46580: LD_VAR 0 2
46584: PUSH
46585: LD_VAR 0 4
46589: ARRAY
46590: NONEQUAL
46591: IFFALSE 46603
// begin result := false ;
46593: LD_ADDR_VAR 0 3
46597: PUSH
46598: LD_INT 0
46600: ST_TO_ADDR
// break ;
46601: GO 46605
// end ;
46603: GO 46566
46605: POP
46606: POP
// end ;
46607: LD_VAR 0 3
46611: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46612: LD_INT 0
46614: PPUSH
46615: PPUSH
46616: PPUSH
// pom := GetBase ( fac ) ;
46617: LD_ADDR_VAR 0 5
46621: PUSH
46622: LD_VAR 0 1
46626: PPUSH
46627: CALL_OW 274
46631: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46632: LD_ADDR_VAR 0 4
46636: PUSH
46637: LD_VAR 0 2
46641: PUSH
46642: LD_INT 1
46644: ARRAY
46645: PPUSH
46646: LD_VAR 0 2
46650: PUSH
46651: LD_INT 2
46653: ARRAY
46654: PPUSH
46655: LD_VAR 0 2
46659: PUSH
46660: LD_INT 3
46662: ARRAY
46663: PPUSH
46664: LD_VAR 0 2
46668: PUSH
46669: LD_INT 4
46671: ARRAY
46672: PPUSH
46673: CALL_OW 449
46677: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46678: LD_ADDR_VAR 0 3
46682: PUSH
46683: LD_VAR 0 5
46687: PPUSH
46688: LD_INT 1
46690: PPUSH
46691: CALL_OW 275
46695: PUSH
46696: LD_VAR 0 4
46700: PUSH
46701: LD_INT 1
46703: ARRAY
46704: GREATEREQUAL
46705: PUSH
46706: LD_VAR 0 5
46710: PPUSH
46711: LD_INT 2
46713: PPUSH
46714: CALL_OW 275
46718: PUSH
46719: LD_VAR 0 4
46723: PUSH
46724: LD_INT 2
46726: ARRAY
46727: GREATEREQUAL
46728: AND
46729: PUSH
46730: LD_VAR 0 5
46734: PPUSH
46735: LD_INT 3
46737: PPUSH
46738: CALL_OW 275
46742: PUSH
46743: LD_VAR 0 4
46747: PUSH
46748: LD_INT 3
46750: ARRAY
46751: GREATEREQUAL
46752: AND
46753: ST_TO_ADDR
// end ;
46754: LD_VAR 0 3
46758: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46759: LD_INT 0
46761: PPUSH
46762: PPUSH
46763: PPUSH
46764: PPUSH
// pom := GetBase ( building ) ;
46765: LD_ADDR_VAR 0 3
46769: PUSH
46770: LD_VAR 0 1
46774: PPUSH
46775: CALL_OW 274
46779: ST_TO_ADDR
// if not pom then
46780: LD_VAR 0 3
46784: NOT
46785: IFFALSE 46789
// exit ;
46787: GO 46959
// btype := GetBType ( building ) ;
46789: LD_ADDR_VAR 0 5
46793: PUSH
46794: LD_VAR 0 1
46798: PPUSH
46799: CALL_OW 266
46803: ST_TO_ADDR
// if btype = b_armoury then
46804: LD_VAR 0 5
46808: PUSH
46809: LD_INT 4
46811: EQUAL
46812: IFFALSE 46822
// btype := b_barracks ;
46814: LD_ADDR_VAR 0 5
46818: PUSH
46819: LD_INT 5
46821: ST_TO_ADDR
// if btype = b_depot then
46822: LD_VAR 0 5
46826: PUSH
46827: LD_INT 0
46829: EQUAL
46830: IFFALSE 46840
// btype := b_warehouse ;
46832: LD_ADDR_VAR 0 5
46836: PUSH
46837: LD_INT 1
46839: ST_TO_ADDR
// if btype = b_workshop then
46840: LD_VAR 0 5
46844: PUSH
46845: LD_INT 2
46847: EQUAL
46848: IFFALSE 46858
// btype := b_factory ;
46850: LD_ADDR_VAR 0 5
46854: PUSH
46855: LD_INT 3
46857: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46858: LD_ADDR_VAR 0 4
46862: PUSH
46863: LD_VAR 0 5
46867: PPUSH
46868: LD_VAR 0 1
46872: PPUSH
46873: CALL_OW 248
46877: PPUSH
46878: CALL_OW 450
46882: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46883: LD_ADDR_VAR 0 2
46887: PUSH
46888: LD_VAR 0 3
46892: PPUSH
46893: LD_INT 1
46895: PPUSH
46896: CALL_OW 275
46900: PUSH
46901: LD_VAR 0 4
46905: PUSH
46906: LD_INT 1
46908: ARRAY
46909: GREATEREQUAL
46910: PUSH
46911: LD_VAR 0 3
46915: PPUSH
46916: LD_INT 2
46918: PPUSH
46919: CALL_OW 275
46923: PUSH
46924: LD_VAR 0 4
46928: PUSH
46929: LD_INT 2
46931: ARRAY
46932: GREATEREQUAL
46933: AND
46934: PUSH
46935: LD_VAR 0 3
46939: PPUSH
46940: LD_INT 3
46942: PPUSH
46943: CALL_OW 275
46947: PUSH
46948: LD_VAR 0 4
46952: PUSH
46953: LD_INT 3
46955: ARRAY
46956: GREATEREQUAL
46957: AND
46958: ST_TO_ADDR
// end ;
46959: LD_VAR 0 2
46963: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46964: LD_INT 0
46966: PPUSH
46967: PPUSH
46968: PPUSH
// pom := GetBase ( building ) ;
46969: LD_ADDR_VAR 0 4
46973: PUSH
46974: LD_VAR 0 1
46978: PPUSH
46979: CALL_OW 274
46983: ST_TO_ADDR
// if not pom then
46984: LD_VAR 0 4
46988: NOT
46989: IFFALSE 46993
// exit ;
46991: GO 47094
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46993: LD_ADDR_VAR 0 5
46997: PUSH
46998: LD_VAR 0 2
47002: PPUSH
47003: LD_VAR 0 1
47007: PPUSH
47008: CALL_OW 248
47012: PPUSH
47013: CALL_OW 450
47017: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
47018: LD_ADDR_VAR 0 3
47022: PUSH
47023: LD_VAR 0 4
47027: PPUSH
47028: LD_INT 1
47030: PPUSH
47031: CALL_OW 275
47035: PUSH
47036: LD_VAR 0 5
47040: PUSH
47041: LD_INT 1
47043: ARRAY
47044: GREATEREQUAL
47045: PUSH
47046: LD_VAR 0 4
47050: PPUSH
47051: LD_INT 2
47053: PPUSH
47054: CALL_OW 275
47058: PUSH
47059: LD_VAR 0 5
47063: PUSH
47064: LD_INT 2
47066: ARRAY
47067: GREATEREQUAL
47068: AND
47069: PUSH
47070: LD_VAR 0 4
47074: PPUSH
47075: LD_INT 3
47077: PPUSH
47078: CALL_OW 275
47082: PUSH
47083: LD_VAR 0 5
47087: PUSH
47088: LD_INT 3
47090: ARRAY
47091: GREATEREQUAL
47092: AND
47093: ST_TO_ADDR
// end ;
47094: LD_VAR 0 3
47098: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
47099: LD_INT 0
47101: PPUSH
47102: PPUSH
47103: PPUSH
47104: PPUSH
47105: PPUSH
47106: PPUSH
47107: PPUSH
47108: PPUSH
47109: PPUSH
47110: PPUSH
47111: PPUSH
// result := false ;
47112: LD_ADDR_VAR 0 8
47116: PUSH
47117: LD_INT 0
47119: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
47120: LD_VAR 0 5
47124: NOT
47125: PUSH
47126: LD_VAR 0 1
47130: NOT
47131: OR
47132: PUSH
47133: LD_VAR 0 2
47137: NOT
47138: OR
47139: PUSH
47140: LD_VAR 0 3
47144: NOT
47145: OR
47146: IFFALSE 47150
// exit ;
47148: GO 47964
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
47150: LD_ADDR_VAR 0 14
47154: PUSH
47155: LD_VAR 0 1
47159: PPUSH
47160: LD_VAR 0 2
47164: PPUSH
47165: LD_VAR 0 3
47169: PPUSH
47170: LD_VAR 0 4
47174: PPUSH
47175: LD_VAR 0 5
47179: PUSH
47180: LD_INT 1
47182: ARRAY
47183: PPUSH
47184: CALL_OW 248
47188: PPUSH
47189: LD_INT 0
47191: PPUSH
47192: CALL 49197 0 6
47196: ST_TO_ADDR
// if not hexes then
47197: LD_VAR 0 14
47201: NOT
47202: IFFALSE 47206
// exit ;
47204: GO 47964
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47206: LD_ADDR_VAR 0 17
47210: PUSH
47211: LD_VAR 0 5
47215: PPUSH
47216: LD_INT 22
47218: PUSH
47219: LD_VAR 0 13
47223: PPUSH
47224: CALL_OW 255
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: LD_INT 2
47235: PUSH
47236: LD_INT 30
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 30
47248: PUSH
47249: LD_INT 1
47251: PUSH
47252: EMPTY
47253: LIST
47254: LIST
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PPUSH
47265: CALL_OW 72
47269: ST_TO_ADDR
// for i = 1 to hexes do
47270: LD_ADDR_VAR 0 9
47274: PUSH
47275: DOUBLE
47276: LD_INT 1
47278: DEC
47279: ST_TO_ADDR
47280: LD_VAR 0 14
47284: PUSH
47285: FOR_TO
47286: IFFALSE 47962
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47288: LD_ADDR_VAR 0 13
47292: PUSH
47293: LD_VAR 0 14
47297: PUSH
47298: LD_VAR 0 9
47302: ARRAY
47303: PUSH
47304: LD_INT 1
47306: ARRAY
47307: PPUSH
47308: LD_VAR 0 14
47312: PUSH
47313: LD_VAR 0 9
47317: ARRAY
47318: PUSH
47319: LD_INT 2
47321: ARRAY
47322: PPUSH
47323: CALL_OW 428
47327: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47328: LD_VAR 0 14
47332: PUSH
47333: LD_VAR 0 9
47337: ARRAY
47338: PUSH
47339: LD_INT 1
47341: ARRAY
47342: PPUSH
47343: LD_VAR 0 14
47347: PUSH
47348: LD_VAR 0 9
47352: ARRAY
47353: PUSH
47354: LD_INT 2
47356: ARRAY
47357: PPUSH
47358: CALL_OW 351
47362: PUSH
47363: LD_VAR 0 14
47367: PUSH
47368: LD_VAR 0 9
47372: ARRAY
47373: PUSH
47374: LD_INT 1
47376: ARRAY
47377: PPUSH
47378: LD_VAR 0 14
47382: PUSH
47383: LD_VAR 0 9
47387: ARRAY
47388: PUSH
47389: LD_INT 2
47391: ARRAY
47392: PPUSH
47393: CALL_OW 488
47397: NOT
47398: OR
47399: PUSH
47400: LD_VAR 0 13
47404: PPUSH
47405: CALL_OW 247
47409: PUSH
47410: LD_INT 3
47412: EQUAL
47413: OR
47414: IFFALSE 47420
// exit ;
47416: POP
47417: POP
47418: GO 47964
// if not tmp then
47420: LD_VAR 0 13
47424: NOT
47425: IFFALSE 47429
// continue ;
47427: GO 47285
// result := true ;
47429: LD_ADDR_VAR 0 8
47433: PUSH
47434: LD_INT 1
47436: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47437: LD_VAR 0 6
47441: PUSH
47442: LD_VAR 0 13
47446: PPUSH
47447: CALL_OW 247
47451: PUSH
47452: LD_INT 2
47454: EQUAL
47455: AND
47456: PUSH
47457: LD_VAR 0 13
47461: PPUSH
47462: CALL_OW 263
47466: PUSH
47467: LD_INT 1
47469: EQUAL
47470: AND
47471: IFFALSE 47635
// begin if IsDrivenBy ( tmp ) then
47473: LD_VAR 0 13
47477: PPUSH
47478: CALL_OW 311
47482: IFFALSE 47486
// continue ;
47484: GO 47285
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47486: LD_VAR 0 6
47490: PPUSH
47491: LD_INT 3
47493: PUSH
47494: LD_INT 60
47496: PUSH
47497: EMPTY
47498: LIST
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 3
47506: PUSH
47507: LD_INT 55
47509: PUSH
47510: EMPTY
47511: LIST
47512: PUSH
47513: EMPTY
47514: LIST
47515: LIST
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PPUSH
47521: CALL_OW 72
47525: IFFALSE 47633
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47527: LD_ADDR_VAR 0 18
47531: PUSH
47532: LD_VAR 0 6
47536: PPUSH
47537: LD_INT 3
47539: PUSH
47540: LD_INT 60
47542: PUSH
47543: EMPTY
47544: LIST
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: LD_INT 55
47555: PUSH
47556: EMPTY
47557: LIST
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PPUSH
47567: CALL_OW 72
47571: PUSH
47572: LD_INT 1
47574: ARRAY
47575: ST_TO_ADDR
// if IsInUnit ( driver ) then
47576: LD_VAR 0 18
47580: PPUSH
47581: CALL_OW 310
47585: IFFALSE 47596
// ComExit ( driver ) ;
47587: LD_VAR 0 18
47591: PPUSH
47592: CALL 72977 0 1
// AddComEnterUnit ( driver , tmp ) ;
47596: LD_VAR 0 18
47600: PPUSH
47601: LD_VAR 0 13
47605: PPUSH
47606: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47610: LD_VAR 0 18
47614: PPUSH
47615: LD_VAR 0 7
47619: PPUSH
47620: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47624: LD_VAR 0 18
47628: PPUSH
47629: CALL_OW 181
// end ; continue ;
47633: GO 47285
// end ; if not cleaners or not tmp in cleaners then
47635: LD_VAR 0 6
47639: NOT
47640: PUSH
47641: LD_VAR 0 13
47645: PUSH
47646: LD_VAR 0 6
47650: IN
47651: NOT
47652: OR
47653: IFFALSE 47960
// begin if dep then
47655: LD_VAR 0 17
47659: IFFALSE 47795
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47661: LD_ADDR_VAR 0 16
47665: PUSH
47666: LD_VAR 0 17
47670: PUSH
47671: LD_INT 1
47673: ARRAY
47674: PPUSH
47675: CALL_OW 250
47679: PPUSH
47680: LD_VAR 0 17
47684: PUSH
47685: LD_INT 1
47687: ARRAY
47688: PPUSH
47689: CALL_OW 254
47693: PPUSH
47694: LD_INT 5
47696: PPUSH
47697: CALL_OW 272
47701: PUSH
47702: LD_VAR 0 17
47706: PUSH
47707: LD_INT 1
47709: ARRAY
47710: PPUSH
47711: CALL_OW 251
47715: PPUSH
47716: LD_VAR 0 17
47720: PUSH
47721: LD_INT 1
47723: ARRAY
47724: PPUSH
47725: CALL_OW 254
47729: PPUSH
47730: LD_INT 5
47732: PPUSH
47733: CALL_OW 273
47737: PUSH
47738: EMPTY
47739: LIST
47740: LIST
47741: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47742: LD_VAR 0 16
47746: PUSH
47747: LD_INT 1
47749: ARRAY
47750: PPUSH
47751: LD_VAR 0 16
47755: PUSH
47756: LD_INT 2
47758: ARRAY
47759: PPUSH
47760: CALL_OW 488
47764: IFFALSE 47795
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47766: LD_VAR 0 13
47770: PPUSH
47771: LD_VAR 0 16
47775: PUSH
47776: LD_INT 1
47778: ARRAY
47779: PPUSH
47780: LD_VAR 0 16
47784: PUSH
47785: LD_INT 2
47787: ARRAY
47788: PPUSH
47789: CALL_OW 111
// continue ;
47793: GO 47285
// end ; end ; r := GetDir ( tmp ) ;
47795: LD_ADDR_VAR 0 15
47799: PUSH
47800: LD_VAR 0 13
47804: PPUSH
47805: CALL_OW 254
47809: ST_TO_ADDR
// if r = 5 then
47810: LD_VAR 0 15
47814: PUSH
47815: LD_INT 5
47817: EQUAL
47818: IFFALSE 47828
// r := 0 ;
47820: LD_ADDR_VAR 0 15
47824: PUSH
47825: LD_INT 0
47827: ST_TO_ADDR
// for j = r to 5 do
47828: LD_ADDR_VAR 0 10
47832: PUSH
47833: DOUBLE
47834: LD_VAR 0 15
47838: DEC
47839: ST_TO_ADDR
47840: LD_INT 5
47842: PUSH
47843: FOR_TO
47844: IFFALSE 47958
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47846: LD_ADDR_VAR 0 11
47850: PUSH
47851: LD_VAR 0 13
47855: PPUSH
47856: CALL_OW 250
47860: PPUSH
47861: LD_VAR 0 10
47865: PPUSH
47866: LD_INT 2
47868: PPUSH
47869: CALL_OW 272
47873: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47874: LD_ADDR_VAR 0 12
47878: PUSH
47879: LD_VAR 0 13
47883: PPUSH
47884: CALL_OW 251
47888: PPUSH
47889: LD_VAR 0 10
47893: PPUSH
47894: LD_INT 2
47896: PPUSH
47897: CALL_OW 273
47901: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47902: LD_VAR 0 11
47906: PPUSH
47907: LD_VAR 0 12
47911: PPUSH
47912: CALL_OW 488
47916: PUSH
47917: LD_VAR 0 11
47921: PPUSH
47922: LD_VAR 0 12
47926: PPUSH
47927: CALL_OW 428
47931: NOT
47932: AND
47933: IFFALSE 47956
// begin ComMoveXY ( tmp , _x , _y ) ;
47935: LD_VAR 0 13
47939: PPUSH
47940: LD_VAR 0 11
47944: PPUSH
47945: LD_VAR 0 12
47949: PPUSH
47950: CALL_OW 111
// break ;
47954: GO 47958
// end ; end ;
47956: GO 47843
47958: POP
47959: POP
// end ; end ;
47960: GO 47285
47962: POP
47963: POP
// end ;
47964: LD_VAR 0 8
47968: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47969: LD_INT 0
47971: PPUSH
// result := true ;
47972: LD_ADDR_VAR 0 3
47976: PUSH
47977: LD_INT 1
47979: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47980: LD_VAR 0 2
47984: PUSH
47985: LD_INT 24
47987: DOUBLE
47988: EQUAL
47989: IFTRUE 47999
47991: LD_INT 33
47993: DOUBLE
47994: EQUAL
47995: IFTRUE 47999
47997: GO 48024
47999: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
48000: LD_ADDR_VAR 0 3
48004: PUSH
48005: LD_INT 32
48007: PPUSH
48008: LD_VAR 0 1
48012: PPUSH
48013: CALL_OW 321
48017: PUSH
48018: LD_INT 2
48020: EQUAL
48021: ST_TO_ADDR
48022: GO 48340
48024: LD_INT 20
48026: DOUBLE
48027: EQUAL
48028: IFTRUE 48032
48030: GO 48057
48032: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
48033: LD_ADDR_VAR 0 3
48037: PUSH
48038: LD_INT 6
48040: PPUSH
48041: LD_VAR 0 1
48045: PPUSH
48046: CALL_OW 321
48050: PUSH
48051: LD_INT 2
48053: EQUAL
48054: ST_TO_ADDR
48055: GO 48340
48057: LD_INT 22
48059: DOUBLE
48060: EQUAL
48061: IFTRUE 48071
48063: LD_INT 36
48065: DOUBLE
48066: EQUAL
48067: IFTRUE 48071
48069: GO 48096
48071: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
48072: LD_ADDR_VAR 0 3
48076: PUSH
48077: LD_INT 15
48079: PPUSH
48080: LD_VAR 0 1
48084: PPUSH
48085: CALL_OW 321
48089: PUSH
48090: LD_INT 2
48092: EQUAL
48093: ST_TO_ADDR
48094: GO 48340
48096: LD_INT 30
48098: DOUBLE
48099: EQUAL
48100: IFTRUE 48104
48102: GO 48129
48104: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
48105: LD_ADDR_VAR 0 3
48109: PUSH
48110: LD_INT 20
48112: PPUSH
48113: LD_VAR 0 1
48117: PPUSH
48118: CALL_OW 321
48122: PUSH
48123: LD_INT 2
48125: EQUAL
48126: ST_TO_ADDR
48127: GO 48340
48129: LD_INT 28
48131: DOUBLE
48132: EQUAL
48133: IFTRUE 48143
48135: LD_INT 21
48137: DOUBLE
48138: EQUAL
48139: IFTRUE 48143
48141: GO 48168
48143: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
48144: LD_ADDR_VAR 0 3
48148: PUSH
48149: LD_INT 21
48151: PPUSH
48152: LD_VAR 0 1
48156: PPUSH
48157: CALL_OW 321
48161: PUSH
48162: LD_INT 2
48164: EQUAL
48165: ST_TO_ADDR
48166: GO 48340
48168: LD_INT 16
48170: DOUBLE
48171: EQUAL
48172: IFTRUE 48176
48174: GO 48201
48176: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48177: LD_ADDR_VAR 0 3
48181: PUSH
48182: LD_INT 84
48184: PPUSH
48185: LD_VAR 0 1
48189: PPUSH
48190: CALL_OW 321
48194: PUSH
48195: LD_INT 2
48197: EQUAL
48198: ST_TO_ADDR
48199: GO 48340
48201: LD_INT 19
48203: DOUBLE
48204: EQUAL
48205: IFTRUE 48215
48207: LD_INT 23
48209: DOUBLE
48210: EQUAL
48211: IFTRUE 48215
48213: GO 48240
48215: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48216: LD_ADDR_VAR 0 3
48220: PUSH
48221: LD_INT 83
48223: PPUSH
48224: LD_VAR 0 1
48228: PPUSH
48229: CALL_OW 321
48233: PUSH
48234: LD_INT 2
48236: EQUAL
48237: ST_TO_ADDR
48238: GO 48340
48240: LD_INT 17
48242: DOUBLE
48243: EQUAL
48244: IFTRUE 48248
48246: GO 48273
48248: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48249: LD_ADDR_VAR 0 3
48253: PUSH
48254: LD_INT 39
48256: PPUSH
48257: LD_VAR 0 1
48261: PPUSH
48262: CALL_OW 321
48266: PUSH
48267: LD_INT 2
48269: EQUAL
48270: ST_TO_ADDR
48271: GO 48340
48273: LD_INT 18
48275: DOUBLE
48276: EQUAL
48277: IFTRUE 48281
48279: GO 48306
48281: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48282: LD_ADDR_VAR 0 3
48286: PUSH
48287: LD_INT 40
48289: PPUSH
48290: LD_VAR 0 1
48294: PPUSH
48295: CALL_OW 321
48299: PUSH
48300: LD_INT 2
48302: EQUAL
48303: ST_TO_ADDR
48304: GO 48340
48306: LD_INT 27
48308: DOUBLE
48309: EQUAL
48310: IFTRUE 48314
48312: GO 48339
48314: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48315: LD_ADDR_VAR 0 3
48319: PUSH
48320: LD_INT 35
48322: PPUSH
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 321
48332: PUSH
48333: LD_INT 2
48335: EQUAL
48336: ST_TO_ADDR
48337: GO 48340
48339: POP
// end ;
48340: LD_VAR 0 3
48344: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48345: LD_INT 0
48347: PPUSH
48348: PPUSH
48349: PPUSH
48350: PPUSH
48351: PPUSH
48352: PPUSH
48353: PPUSH
48354: PPUSH
48355: PPUSH
48356: PPUSH
48357: PPUSH
// result := false ;
48358: LD_ADDR_VAR 0 6
48362: PUSH
48363: LD_INT 0
48365: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48366: LD_VAR 0 1
48370: NOT
48371: PUSH
48372: LD_VAR 0 1
48376: PPUSH
48377: CALL_OW 266
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: LD_INT 1
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: IN
48392: NOT
48393: OR
48394: PUSH
48395: LD_VAR 0 2
48399: NOT
48400: OR
48401: PUSH
48402: LD_VAR 0 5
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 1
48412: PUSH
48413: LD_INT 2
48415: PUSH
48416: LD_INT 3
48418: PUSH
48419: LD_INT 4
48421: PUSH
48422: LD_INT 5
48424: PUSH
48425: EMPTY
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: IN
48433: NOT
48434: OR
48435: PUSH
48436: LD_VAR 0 3
48440: PPUSH
48441: LD_VAR 0 4
48445: PPUSH
48446: CALL_OW 488
48450: NOT
48451: OR
48452: IFFALSE 48456
// exit ;
48454: GO 49192
// side := GetSide ( depot ) ;
48456: LD_ADDR_VAR 0 9
48460: PUSH
48461: LD_VAR 0 1
48465: PPUSH
48466: CALL_OW 255
48470: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48471: LD_VAR 0 9
48475: PPUSH
48476: LD_VAR 0 2
48480: PPUSH
48481: CALL 47969 0 2
48485: NOT
48486: IFFALSE 48490
// exit ;
48488: GO 49192
// pom := GetBase ( depot ) ;
48490: LD_ADDR_VAR 0 10
48494: PUSH
48495: LD_VAR 0 1
48499: PPUSH
48500: CALL_OW 274
48504: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48505: LD_ADDR_VAR 0 11
48509: PUSH
48510: LD_VAR 0 2
48514: PPUSH
48515: LD_VAR 0 1
48519: PPUSH
48520: CALL_OW 248
48524: PPUSH
48525: CALL_OW 450
48529: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48530: LD_VAR 0 10
48534: PPUSH
48535: LD_INT 1
48537: PPUSH
48538: CALL_OW 275
48542: PUSH
48543: LD_VAR 0 11
48547: PUSH
48548: LD_INT 1
48550: ARRAY
48551: GREATEREQUAL
48552: PUSH
48553: LD_VAR 0 10
48557: PPUSH
48558: LD_INT 2
48560: PPUSH
48561: CALL_OW 275
48565: PUSH
48566: LD_VAR 0 11
48570: PUSH
48571: LD_INT 2
48573: ARRAY
48574: GREATEREQUAL
48575: AND
48576: PUSH
48577: LD_VAR 0 10
48581: PPUSH
48582: LD_INT 3
48584: PPUSH
48585: CALL_OW 275
48589: PUSH
48590: LD_VAR 0 11
48594: PUSH
48595: LD_INT 3
48597: ARRAY
48598: GREATEREQUAL
48599: AND
48600: NOT
48601: IFFALSE 48605
// exit ;
48603: GO 49192
// if GetBType ( depot ) = b_depot then
48605: LD_VAR 0 1
48609: PPUSH
48610: CALL_OW 266
48614: PUSH
48615: LD_INT 0
48617: EQUAL
48618: IFFALSE 48630
// dist := 28 else
48620: LD_ADDR_VAR 0 14
48624: PUSH
48625: LD_INT 28
48627: ST_TO_ADDR
48628: GO 48638
// dist := 36 ;
48630: LD_ADDR_VAR 0 14
48634: PUSH
48635: LD_INT 36
48637: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48638: LD_VAR 0 1
48642: PPUSH
48643: LD_VAR 0 3
48647: PPUSH
48648: LD_VAR 0 4
48652: PPUSH
48653: CALL_OW 297
48657: PUSH
48658: LD_VAR 0 14
48662: GREATER
48663: IFFALSE 48667
// exit ;
48665: GO 49192
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48667: LD_ADDR_VAR 0 12
48671: PUSH
48672: LD_VAR 0 2
48676: PPUSH
48677: LD_VAR 0 3
48681: PPUSH
48682: LD_VAR 0 4
48686: PPUSH
48687: LD_VAR 0 5
48691: PPUSH
48692: LD_VAR 0 1
48696: PPUSH
48697: CALL_OW 248
48701: PPUSH
48702: LD_INT 0
48704: PPUSH
48705: CALL 49197 0 6
48709: ST_TO_ADDR
// if not hexes then
48710: LD_VAR 0 12
48714: NOT
48715: IFFALSE 48719
// exit ;
48717: GO 49192
// hex := GetHexInfo ( x , y ) ;
48719: LD_ADDR_VAR 0 15
48723: PUSH
48724: LD_VAR 0 3
48728: PPUSH
48729: LD_VAR 0 4
48733: PPUSH
48734: CALL_OW 546
48738: ST_TO_ADDR
// if hex [ 1 ] then
48739: LD_VAR 0 15
48743: PUSH
48744: LD_INT 1
48746: ARRAY
48747: IFFALSE 48751
// exit ;
48749: GO 49192
// height := hex [ 2 ] ;
48751: LD_ADDR_VAR 0 13
48755: PUSH
48756: LD_VAR 0 15
48760: PUSH
48761: LD_INT 2
48763: ARRAY
48764: ST_TO_ADDR
// for i = 1 to hexes do
48765: LD_ADDR_VAR 0 7
48769: PUSH
48770: DOUBLE
48771: LD_INT 1
48773: DEC
48774: ST_TO_ADDR
48775: LD_VAR 0 12
48779: PUSH
48780: FOR_TO
48781: IFFALSE 49111
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48783: LD_VAR 0 12
48787: PUSH
48788: LD_VAR 0 7
48792: ARRAY
48793: PUSH
48794: LD_INT 1
48796: ARRAY
48797: PPUSH
48798: LD_VAR 0 12
48802: PUSH
48803: LD_VAR 0 7
48807: ARRAY
48808: PUSH
48809: LD_INT 2
48811: ARRAY
48812: PPUSH
48813: CALL_OW 488
48817: NOT
48818: PUSH
48819: LD_VAR 0 12
48823: PUSH
48824: LD_VAR 0 7
48828: ARRAY
48829: PUSH
48830: LD_INT 1
48832: ARRAY
48833: PPUSH
48834: LD_VAR 0 12
48838: PUSH
48839: LD_VAR 0 7
48843: ARRAY
48844: PUSH
48845: LD_INT 2
48847: ARRAY
48848: PPUSH
48849: CALL_OW 428
48853: PUSH
48854: LD_INT 0
48856: GREATER
48857: OR
48858: PUSH
48859: LD_VAR 0 12
48863: PUSH
48864: LD_VAR 0 7
48868: ARRAY
48869: PUSH
48870: LD_INT 1
48872: ARRAY
48873: PPUSH
48874: LD_VAR 0 12
48878: PUSH
48879: LD_VAR 0 7
48883: ARRAY
48884: PUSH
48885: LD_INT 2
48887: ARRAY
48888: PPUSH
48889: CALL_OW 351
48893: OR
48894: IFFALSE 48900
// exit ;
48896: POP
48897: POP
48898: GO 49192
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48900: LD_ADDR_VAR 0 8
48904: PUSH
48905: LD_VAR 0 12
48909: PUSH
48910: LD_VAR 0 7
48914: ARRAY
48915: PUSH
48916: LD_INT 1
48918: ARRAY
48919: PPUSH
48920: LD_VAR 0 12
48924: PUSH
48925: LD_VAR 0 7
48929: ARRAY
48930: PUSH
48931: LD_INT 2
48933: ARRAY
48934: PPUSH
48935: CALL_OW 546
48939: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48940: LD_VAR 0 8
48944: PUSH
48945: LD_INT 1
48947: ARRAY
48948: PUSH
48949: LD_VAR 0 8
48953: PUSH
48954: LD_INT 2
48956: ARRAY
48957: PUSH
48958: LD_VAR 0 13
48962: PUSH
48963: LD_INT 2
48965: PLUS
48966: GREATER
48967: OR
48968: PUSH
48969: LD_VAR 0 8
48973: PUSH
48974: LD_INT 2
48976: ARRAY
48977: PUSH
48978: LD_VAR 0 13
48982: PUSH
48983: LD_INT 2
48985: MINUS
48986: LESS
48987: OR
48988: PUSH
48989: LD_VAR 0 8
48993: PUSH
48994: LD_INT 3
48996: ARRAY
48997: PUSH
48998: LD_INT 0
49000: PUSH
49001: LD_INT 8
49003: PUSH
49004: LD_INT 9
49006: PUSH
49007: LD_INT 10
49009: PUSH
49010: LD_INT 11
49012: PUSH
49013: LD_INT 12
49015: PUSH
49016: LD_INT 13
49018: PUSH
49019: LD_INT 16
49021: PUSH
49022: LD_INT 17
49024: PUSH
49025: LD_INT 18
49027: PUSH
49028: LD_INT 19
49030: PUSH
49031: LD_INT 20
49033: PUSH
49034: LD_INT 21
49036: PUSH
49037: EMPTY
49038: LIST
49039: LIST
49040: LIST
49041: LIST
49042: LIST
49043: LIST
49044: LIST
49045: LIST
49046: LIST
49047: LIST
49048: LIST
49049: LIST
49050: LIST
49051: IN
49052: NOT
49053: OR
49054: PUSH
49055: LD_VAR 0 8
49059: PUSH
49060: LD_INT 5
49062: ARRAY
49063: NOT
49064: OR
49065: PUSH
49066: LD_VAR 0 8
49070: PUSH
49071: LD_INT 6
49073: ARRAY
49074: PUSH
49075: LD_INT 1
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: LD_INT 7
49083: PUSH
49084: LD_INT 9
49086: PUSH
49087: LD_INT 10
49089: PUSH
49090: LD_INT 11
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: LIST
49097: LIST
49098: LIST
49099: LIST
49100: IN
49101: NOT
49102: OR
49103: IFFALSE 49109
// exit ;
49105: POP
49106: POP
49107: GO 49192
// end ;
49109: GO 48780
49111: POP
49112: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
49113: LD_VAR 0 9
49117: PPUSH
49118: LD_VAR 0 3
49122: PPUSH
49123: LD_VAR 0 4
49127: PPUSH
49128: LD_INT 20
49130: PPUSH
49131: CALL 41144 0 4
49135: PUSH
49136: LD_INT 4
49138: ARRAY
49139: IFFALSE 49143
// exit ;
49141: GO 49192
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49143: LD_VAR 0 2
49147: PUSH
49148: LD_INT 29
49150: PUSH
49151: LD_INT 30
49153: PUSH
49154: EMPTY
49155: LIST
49156: LIST
49157: IN
49158: PUSH
49159: LD_VAR 0 3
49163: PPUSH
49164: LD_VAR 0 4
49168: PPUSH
49169: LD_VAR 0 9
49173: PPUSH
49174: CALL_OW 440
49178: NOT
49179: AND
49180: IFFALSE 49184
// exit ;
49182: GO 49192
// result := true ;
49184: LD_ADDR_VAR 0 6
49188: PUSH
49189: LD_INT 1
49191: ST_TO_ADDR
// end ;
49192: LD_VAR 0 6
49196: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49197: LD_INT 0
49199: PPUSH
49200: PPUSH
49201: PPUSH
49202: PPUSH
49203: PPUSH
49204: PPUSH
49205: PPUSH
49206: PPUSH
49207: PPUSH
49208: PPUSH
49209: PPUSH
49210: PPUSH
49211: PPUSH
49212: PPUSH
49213: PPUSH
49214: PPUSH
49215: PPUSH
49216: PPUSH
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
49224: PPUSH
49225: PPUSH
49226: PPUSH
49227: PPUSH
49228: PPUSH
49229: PPUSH
49230: PPUSH
49231: PPUSH
49232: PPUSH
49233: PPUSH
49234: PPUSH
49235: PPUSH
49236: PPUSH
49237: PPUSH
49238: PPUSH
49239: PPUSH
49240: PPUSH
49241: PPUSH
49242: PPUSH
49243: PPUSH
49244: PPUSH
49245: PPUSH
49246: PPUSH
49247: PPUSH
49248: PPUSH
49249: PPUSH
49250: PPUSH
49251: PPUSH
49252: PPUSH
49253: PPUSH
49254: PPUSH
49255: PPUSH
49256: PPUSH
// result = [ ] ;
49257: LD_ADDR_VAR 0 7
49261: PUSH
49262: EMPTY
49263: ST_TO_ADDR
// temp_list = [ ] ;
49264: LD_ADDR_VAR 0 9
49268: PUSH
49269: EMPTY
49270: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49271: LD_VAR 0 4
49275: PUSH
49276: LD_INT 0
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 2
49284: PUSH
49285: LD_INT 3
49287: PUSH
49288: LD_INT 4
49290: PUSH
49291: LD_INT 5
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: IN
49302: NOT
49303: PUSH
49304: LD_VAR 0 1
49308: PUSH
49309: LD_INT 0
49311: PUSH
49312: LD_INT 1
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: IN
49319: PUSH
49320: LD_VAR 0 5
49324: PUSH
49325: LD_INT 1
49327: PUSH
49328: LD_INT 2
49330: PUSH
49331: LD_INT 3
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: LIST
49338: IN
49339: NOT
49340: AND
49341: OR
49342: IFFALSE 49346
// exit ;
49344: GO 67737
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49346: LD_VAR 0 1
49350: PUSH
49351: LD_INT 6
49353: PUSH
49354: LD_INT 7
49356: PUSH
49357: LD_INT 8
49359: PUSH
49360: LD_INT 13
49362: PUSH
49363: LD_INT 12
49365: PUSH
49366: LD_INT 15
49368: PUSH
49369: LD_INT 11
49371: PUSH
49372: LD_INT 14
49374: PUSH
49375: LD_INT 10
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: IN
49389: IFFALSE 49399
// btype = b_lab ;
49391: LD_ADDR_VAR 0 1
49395: PUSH
49396: LD_INT 6
49398: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49399: LD_VAR 0 6
49403: PUSH
49404: LD_INT 0
49406: PUSH
49407: LD_INT 1
49409: PUSH
49410: LD_INT 2
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: LIST
49417: IN
49418: NOT
49419: PUSH
49420: LD_VAR 0 1
49424: PUSH
49425: LD_INT 0
49427: PUSH
49428: LD_INT 1
49430: PUSH
49431: LD_INT 2
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: LD_INT 6
49439: PUSH
49440: LD_INT 36
49442: PUSH
49443: LD_INT 4
49445: PUSH
49446: LD_INT 5
49448: PUSH
49449: LD_INT 31
49451: PUSH
49452: LD_INT 32
49454: PUSH
49455: LD_INT 33
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: IN
49471: NOT
49472: PUSH
49473: LD_VAR 0 6
49477: PUSH
49478: LD_INT 1
49480: EQUAL
49481: AND
49482: OR
49483: PUSH
49484: LD_VAR 0 1
49488: PUSH
49489: LD_INT 2
49491: PUSH
49492: LD_INT 3
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: IN
49499: NOT
49500: PUSH
49501: LD_VAR 0 6
49505: PUSH
49506: LD_INT 2
49508: EQUAL
49509: AND
49510: OR
49511: IFFALSE 49521
// mode = 0 ;
49513: LD_ADDR_VAR 0 6
49517: PUSH
49518: LD_INT 0
49520: ST_TO_ADDR
// case mode of 0 :
49521: LD_VAR 0 6
49525: PUSH
49526: LD_INT 0
49528: DOUBLE
49529: EQUAL
49530: IFTRUE 49534
49532: GO 60987
49534: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49535: LD_ADDR_VAR 0 11
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 0
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 0
49552: PUSH
49553: LD_INT 1
49555: NEG
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 1
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: LD_INT 1
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: NEG
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 1
49604: NEG
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: NEG
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 0
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: LD_INT 1
49642: NEG
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 1
49650: PUSH
49651: LD_INT 2
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 0
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 1
49670: NEG
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 1
49681: PUSH
49682: LD_INT 3
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 0
49691: PUSH
49692: LD_INT 3
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 1
49701: NEG
49702: PUSH
49703: LD_INT 2
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: PUSH
49710: EMPTY
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49728: LD_ADDR_VAR 0 12
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 0
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 1
49748: NEG
49749: PUSH
49750: EMPTY
49751: LIST
49752: LIST
49753: PUSH
49754: LD_INT 1
49756: PUSH
49757: LD_INT 0
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: LD_INT 1
49769: PUSH
49770: EMPTY
49771: LIST
49772: LIST
49773: PUSH
49774: LD_INT 0
49776: PUSH
49777: LD_INT 1
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 1
49786: NEG
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: LD_INT 1
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: PUSH
49810: LD_INT 1
49812: NEG
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 0
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: PUSH
49831: LD_INT 1
49833: PUSH
49834: EMPTY
49835: LIST
49836: LIST
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 1
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 2
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: NEG
49867: PUSH
49868: EMPTY
49869: LIST
49870: LIST
49871: PUSH
49872: LD_INT 2
49874: NEG
49875: PUSH
49876: LD_INT 1
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 3
49885: NEG
49886: PUSH
49887: LD_INT 0
49889: PUSH
49890: EMPTY
49891: LIST
49892: LIST
49893: PUSH
49894: LD_INT 3
49896: NEG
49897: PUSH
49898: LD_INT 1
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: EMPTY
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: LIST
49917: LIST
49918: LIST
49919: LIST
49920: LIST
49921: LIST
49922: LIST
49923: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49924: LD_ADDR_VAR 0 13
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 1
49944: NEG
49945: PUSH
49946: EMPTY
49947: LIST
49948: LIST
49949: PUSH
49950: LD_INT 1
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: LD_INT 1
49962: PUSH
49963: LD_INT 1
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 0
49972: PUSH
49973: LD_INT 1
49975: PUSH
49976: EMPTY
49977: LIST
49978: LIST
49979: PUSH
49980: LD_INT 1
49982: NEG
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 1
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: LD_INT 1
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 2
50027: PUSH
50028: LD_INT 2
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 1
50037: PUSH
50038: LD_INT 2
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 2
50047: NEG
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 2
50059: NEG
50060: PUSH
50061: LD_INT 2
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 2
50071: NEG
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 3
50095: NEG
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50123: LD_ADDR_VAR 0 14
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 0
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 0
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 1
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: LD_INT 0
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: EMPTY
50176: LIST
50177: LIST
50178: PUSH
50179: LD_INT 1
50181: NEG
50182: PUSH
50183: LD_INT 0
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 1
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 1
50204: NEG
50205: PUSH
50206: LD_INT 2
50208: NEG
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 0
50216: PUSH
50217: LD_INT 2
50219: NEG
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 1
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: LD_INT 2
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 0
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 1
50258: NEG
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: EMPTY
50264: LIST
50265: LIST
50266: PUSH
50267: LD_INT 1
50269: NEG
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: EMPTY
50276: LIST
50277: LIST
50278: PUSH
50279: LD_INT 0
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: PUSH
50290: LD_INT 1
50292: PUSH
50293: LD_INT 2
50295: NEG
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: LIST
50308: LIST
50309: LIST
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50319: LD_ADDR_VAR 0 15
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 0
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 0
50336: PUSH
50337: LD_INT 1
50339: NEG
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: LD_INT 0
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 1
50357: PUSH
50358: LD_INT 1
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 1
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 1
50377: NEG
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 1
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 2
50411: PUSH
50412: LD_INT 0
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 2
50421: PUSH
50422: LD_INT 1
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 1
50431: NEG
50432: PUSH
50433: LD_INT 1
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 0
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: NEG
50454: PUSH
50455: LD_INT 1
50457: NEG
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 3
50476: PUSH
50477: LD_INT 0
50479: PUSH
50480: EMPTY
50481: LIST
50482: LIST
50483: PUSH
50484: LD_INT 3
50486: PUSH
50487: LD_INT 1
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: LIST
50510: LIST
50511: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50512: LD_ADDR_VAR 0 16
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 0
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 1
50532: NEG
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 1
50540: PUSH
50541: LD_INT 0
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 0
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 1
50570: NEG
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 1
50593: NEG
50594: PUSH
50595: LD_INT 2
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 2
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 2
50615: PUSH
50616: LD_INT 2
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: PUSH
50626: LD_INT 2
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 2
50635: NEG
50636: PUSH
50637: LD_INT 1
50639: NEG
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 2
50647: NEG
50648: PUSH
50649: LD_INT 2
50651: NEG
50652: PUSH
50653: EMPTY
50654: LIST
50655: LIST
50656: PUSH
50657: LD_INT 3
50659: PUSH
50660: LD_INT 2
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: LD_INT 3
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 2
50679: PUSH
50680: LD_INT 3
50682: PUSH
50683: EMPTY
50684: LIST
50685: LIST
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50705: LD_ADDR_VAR 0 17
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: LD_INT 0
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 1
50725: NEG
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 1
50733: PUSH
50734: LD_INT 0
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 0
50753: PUSH
50754: LD_INT 1
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 1
50763: NEG
50764: PUSH
50765: LD_INT 0
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: LD_INT 1
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 2
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 1
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 2
50820: PUSH
50821: LD_INT 0
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 2
50830: PUSH
50831: LD_INT 1
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 2
50843: PUSH
50844: EMPTY
50845: LIST
50846: LIST
50847: PUSH
50848: LD_INT 1
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: EMPTY
50855: LIST
50856: LIST
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: LD_INT 1
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 2
50881: NEG
50882: PUSH
50883: LD_INT 0
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 2
50892: NEG
50893: PUSH
50894: LD_INT 1
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 2
50904: NEG
50905: PUSH
50906: LD_INT 2
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50935: LD_ADDR_VAR 0 18
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: LD_INT 0
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 1
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 1
50963: PUSH
50964: LD_INT 0
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 1
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: PUSH
51002: LD_INT 1
51004: NEG
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 1
51016: NEG
51017: PUSH
51018: LD_INT 2
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 2
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: PUSH
51040: LD_INT 1
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 2
51050: PUSH
51051: LD_INT 0
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 2
51060: PUSH
51061: LD_INT 1
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: LD_INT 2
51070: PUSH
51071: LD_INT 2
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 1
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: LD_INT 0
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: LD_INT 1
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 2
51111: NEG
51112: PUSH
51113: LD_INT 0
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: NEG
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: LD_INT 2
51138: NEG
51139: PUSH
51140: EMPTY
51141: LIST
51142: LIST
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51165: LD_ADDR_VAR 0 19
51169: PUSH
51170: LD_INT 0
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 1
51185: NEG
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: LD_INT 0
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: EMPTY
51208: LIST
51209: LIST
51210: PUSH
51211: LD_INT 0
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: EMPTY
51218: LIST
51219: LIST
51220: PUSH
51221: LD_INT 1
51223: NEG
51224: PUSH
51225: LD_INT 0
51227: PUSH
51228: EMPTY
51229: LIST
51230: LIST
51231: PUSH
51232: LD_INT 1
51234: NEG
51235: PUSH
51236: LD_INT 1
51238: NEG
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: LD_INT 1
51246: NEG
51247: PUSH
51248: LD_INT 2
51250: NEG
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: LD_INT 2
51261: NEG
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 1
51269: PUSH
51270: LD_INT 1
51272: NEG
51273: PUSH
51274: EMPTY
51275: LIST
51276: LIST
51277: PUSH
51278: LD_INT 2
51280: PUSH
51281: LD_INT 0
51283: PUSH
51284: EMPTY
51285: LIST
51286: LIST
51287: PUSH
51288: LD_INT 2
51290: PUSH
51291: LD_INT 1
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: LD_INT 2
51300: PUSH
51301: LD_INT 2
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 1
51310: PUSH
51311: LD_INT 2
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 0
51320: PUSH
51321: LD_INT 2
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 1
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: NEG
51342: PUSH
51343: LD_INT 0
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 2
51352: NEG
51353: PUSH
51354: LD_INT 1
51356: NEG
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: PUSH
51362: LD_INT 2
51364: NEG
51365: PUSH
51366: LD_INT 2
51368: NEG
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51395: LD_ADDR_VAR 0 20
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 1
51415: NEG
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 1
51423: PUSH
51424: LD_INT 0
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 1
51433: PUSH
51434: LD_INT 1
51436: PUSH
51437: EMPTY
51438: LIST
51439: LIST
51440: PUSH
51441: LD_INT 0
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 1
51453: NEG
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 1
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 1
51476: NEG
51477: PUSH
51478: LD_INT 2
51480: NEG
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: LD_INT 2
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 1
51499: PUSH
51500: LD_INT 1
51502: NEG
51503: PUSH
51504: EMPTY
51505: LIST
51506: LIST
51507: PUSH
51508: LD_INT 2
51510: PUSH
51511: LD_INT 0
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 2
51520: PUSH
51521: LD_INT 1
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: LD_INT 2
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 1
51540: PUSH
51541: LD_INT 2
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 2
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: LD_INT 1
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 2
51571: NEG
51572: PUSH
51573: LD_INT 0
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 2
51582: NEG
51583: PUSH
51584: LD_INT 1
51586: NEG
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 2
51598: NEG
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51625: LD_ADDR_VAR 0 21
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: LD_INT 0
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 1
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 1
51653: PUSH
51654: LD_INT 0
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: LD_INT 1
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 0
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: NEG
51684: PUSH
51685: LD_INT 0
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: PUSH
51692: LD_INT 1
51694: NEG
51695: PUSH
51696: LD_INT 1
51698: NEG
51699: PUSH
51700: EMPTY
51701: LIST
51702: LIST
51703: PUSH
51704: LD_INT 1
51706: NEG
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 0
51718: PUSH
51719: LD_INT 2
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 0
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: PUSH
51751: LD_INT 1
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 2
51760: PUSH
51761: LD_INT 2
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 1
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 0
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: PUSH
51795: EMPTY
51796: LIST
51797: LIST
51798: PUSH
51799: LD_INT 2
51801: NEG
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: LD_INT 1
51816: NEG
51817: PUSH
51818: EMPTY
51819: LIST
51820: LIST
51821: PUSH
51822: LD_INT 2
51824: NEG
51825: PUSH
51826: LD_INT 2
51828: NEG
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51855: LD_ADDR_VAR 0 22
51859: PUSH
51860: LD_INT 0
51862: PUSH
51863: LD_INT 0
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 1
51893: PUSH
51894: LD_INT 1
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 0
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 1
51913: NEG
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: EMPTY
51919: LIST
51920: LIST
51921: PUSH
51922: LD_INT 1
51924: NEG
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: EMPTY
51931: LIST
51932: LIST
51933: PUSH
51934: LD_INT 1
51936: NEG
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: LD_INT 1
51959: PUSH
51960: LD_INT 1
51962: NEG
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 2
51970: PUSH
51971: LD_INT 0
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 1
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 1
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 0
52010: PUSH
52011: LD_INT 2
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 2
52031: NEG
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 2
52042: NEG
52043: PUSH
52044: LD_INT 1
52046: NEG
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: EMPTY
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52085: LD_ADDR_VAR 0 23
52089: PUSH
52090: LD_INT 0
52092: PUSH
52093: LD_INT 0
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 1
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 1
52113: PUSH
52114: LD_INT 0
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 1
52123: PUSH
52124: LD_INT 1
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 0
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 1
52154: NEG
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 2
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 1
52189: PUSH
52190: LD_INT 1
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: EMPTY
52205: LIST
52206: LIST
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 2
52220: PUSH
52221: LD_INT 2
52223: PUSH
52224: EMPTY
52225: LIST
52226: LIST
52227: PUSH
52228: LD_INT 1
52230: PUSH
52231: LD_INT 2
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 0
52240: PUSH
52241: LD_INT 2
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 1
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 2
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: LD_INT 3
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 3
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 1
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 2
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52365: LD_ADDR_VAR 0 24
52369: PUSH
52370: LD_INT 0
52372: PUSH
52373: LD_INT 0
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 1
52385: NEG
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 1
52393: PUSH
52394: LD_INT 0
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 1
52403: PUSH
52404: LD_INT 1
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 0
52413: PUSH
52414: LD_INT 1
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 0
52427: PUSH
52428: EMPTY
52429: LIST
52430: LIST
52431: PUSH
52432: LD_INT 1
52434: NEG
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 1
52446: NEG
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 2
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 1
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: LD_INT 0
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 2
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 1
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 1
52530: NEG
52531: PUSH
52532: LD_INT 1
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: LD_INT 0
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: LD_INT 1
52556: NEG
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 2
52564: NEG
52565: PUSH
52566: LD_INT 2
52568: NEG
52569: PUSH
52570: EMPTY
52571: LIST
52572: LIST
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: LD_INT 2
52579: NEG
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 2
52587: PUSH
52588: LD_INT 1
52590: NEG
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 3
52608: PUSH
52609: LD_INT 2
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52641: LD_ADDR_VAR 0 25
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 0
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 1
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: PUSH
52670: LD_INT 0
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 1
52679: PUSH
52680: LD_INT 1
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: LD_INT 1
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PUSH
52697: LD_INT 1
52699: NEG
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 1
52710: NEG
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 1
52722: NEG
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 2
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 1
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 2
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 2
52766: PUSH
52767: LD_INT 1
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 2
52776: PUSH
52777: LD_INT 2
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: PUSH
52784: LD_INT 1
52786: PUSH
52787: LD_INT 2
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 0
52796: PUSH
52797: LD_INT 2
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: LD_INT 1
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 2
52817: NEG
52818: PUSH
52819: LD_INT 0
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 2
52828: NEG
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 2
52840: NEG
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 3
52852: PUSH
52853: LD_INT 1
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: LD_INT 2
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: PUSH
52883: LD_INT 3
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52915: LD_ADDR_VAR 0 26
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 2
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 1
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 2
53091: NEG
53092: PUSH
53093: LD_INT 0
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: NEG
53103: PUSH
53104: LD_INT 1
53106: NEG
53107: PUSH
53108: EMPTY
53109: LIST
53110: LIST
53111: PUSH
53112: LD_INT 2
53114: NEG
53115: PUSH
53116: LD_INT 2
53118: NEG
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 2
53126: PUSH
53127: LD_INT 3
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: PUSH
53134: LD_INT 1
53136: PUSH
53137: LD_INT 3
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 1
53146: NEG
53147: PUSH
53148: LD_INT 2
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 2
53157: NEG
53158: PUSH
53159: LD_INT 1
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: EMPTY
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53191: LD_ADDR_VAR 0 27
53195: PUSH
53196: LD_INT 0
53198: PUSH
53199: LD_INT 0
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 1
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 1
53219: PUSH
53220: LD_INT 0
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 1
53229: PUSH
53230: LD_INT 1
53232: PUSH
53233: EMPTY
53234: LIST
53235: LIST
53236: PUSH
53237: LD_INT 0
53239: PUSH
53240: LD_INT 1
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 1
53249: NEG
53250: PUSH
53251: LD_INT 0
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 1
53260: NEG
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 1
53272: NEG
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 2
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 1
53298: NEG
53299: PUSH
53300: EMPTY
53301: LIST
53302: LIST
53303: PUSH
53304: LD_INT 2
53306: PUSH
53307: LD_INT 0
53309: PUSH
53310: EMPTY
53311: LIST
53312: LIST
53313: PUSH
53314: LD_INT 2
53316: PUSH
53317: LD_INT 1
53319: PUSH
53320: EMPTY
53321: LIST
53322: LIST
53323: PUSH
53324: LD_INT 2
53326: PUSH
53327: LD_INT 2
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: PUSH
53337: LD_INT 2
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 0
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 1
53356: NEG
53357: PUSH
53358: LD_INT 1
53360: PUSH
53361: EMPTY
53362: LIST
53363: LIST
53364: PUSH
53365: LD_INT 2
53367: NEG
53368: PUSH
53369: LD_INT 0
53371: PUSH
53372: EMPTY
53373: LIST
53374: LIST
53375: PUSH
53376: LD_INT 2
53378: NEG
53379: PUSH
53380: LD_INT 1
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 2
53390: NEG
53391: PUSH
53392: LD_INT 2
53394: NEG
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 2
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: PUSH
53411: LD_INT 2
53413: NEG
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 3
53424: NEG
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53471: LD_ADDR_VAR 0 28
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 0
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 1
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 2
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 1
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 0
53626: PUSH
53627: LD_INT 2
53629: PUSH
53630: EMPTY
53631: LIST
53632: LIST
53633: PUSH
53634: LD_INT 1
53636: NEG
53637: PUSH
53638: LD_INT 1
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 2
53647: NEG
53648: PUSH
53649: LD_INT 0
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 2
53658: NEG
53659: PUSH
53660: LD_INT 1
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: LD_INT 2
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 2
53682: NEG
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 1
53694: NEG
53695: PUSH
53696: LD_INT 3
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: NEG
53707: PUSH
53708: LD_INT 1
53710: NEG
53711: PUSH
53712: EMPTY
53713: LIST
53714: LIST
53715: PUSH
53716: LD_INT 3
53718: NEG
53719: PUSH
53720: LD_INT 2
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: LIST
53752: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53753: LD_ADDR_VAR 0 29
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 0
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 0
53770: PUSH
53771: LD_INT 1
53773: NEG
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 1
53781: PUSH
53782: LD_INT 0
53784: PUSH
53785: EMPTY
53786: LIST
53787: LIST
53788: PUSH
53789: LD_INT 1
53791: PUSH
53792: LD_INT 1
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 0
53801: PUSH
53802: LD_INT 1
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 1
53811: NEG
53812: PUSH
53813: LD_INT 0
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: LD_INT 1
53826: NEG
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 1
53834: NEG
53835: PUSH
53836: LD_INT 2
53838: NEG
53839: PUSH
53840: EMPTY
53841: LIST
53842: LIST
53843: PUSH
53844: LD_INT 0
53846: PUSH
53847: LD_INT 2
53849: NEG
53850: PUSH
53851: EMPTY
53852: LIST
53853: LIST
53854: PUSH
53855: LD_INT 1
53857: PUSH
53858: LD_INT 1
53860: NEG
53861: PUSH
53862: EMPTY
53863: LIST
53864: LIST
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: LD_INT 0
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 1
53881: PUSH
53882: EMPTY
53883: LIST
53884: LIST
53885: PUSH
53886: LD_INT 1
53888: PUSH
53889: LD_INT 2
53891: PUSH
53892: EMPTY
53893: LIST
53894: LIST
53895: PUSH
53896: LD_INT 0
53898: PUSH
53899: LD_INT 2
53901: PUSH
53902: EMPTY
53903: LIST
53904: LIST
53905: PUSH
53906: LD_INT 1
53908: NEG
53909: PUSH
53910: LD_INT 1
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: PUSH
53917: LD_INT 2
53919: NEG
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: LD_INT 2
53935: NEG
53936: PUSH
53937: EMPTY
53938: LIST
53939: LIST
53940: PUSH
53941: LD_INT 2
53943: NEG
53944: PUSH
53945: LD_INT 3
53947: NEG
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 2
53955: PUSH
53956: LD_INT 1
53958: NEG
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 3
53966: PUSH
53967: LD_INT 1
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: LD_INT 3
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: PUSH
53984: LD_INT 1
53986: NEG
53987: PUSH
53988: LD_INT 2
53990: PUSH
53991: EMPTY
53992: LIST
53993: LIST
53994: PUSH
53995: LD_INT 3
53997: NEG
53998: PUSH
53999: LD_INT 2
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54032: LD_ADDR_VAR 0 30
54036: PUSH
54037: LD_INT 0
54039: PUSH
54040: LD_INT 0
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 0
54049: PUSH
54050: LD_INT 1
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 1
54060: PUSH
54061: LD_INT 0
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 1
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 0
54080: PUSH
54081: LD_INT 1
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 1
54090: NEG
54091: PUSH
54092: LD_INT 0
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: LD_INT 1
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 1
54113: NEG
54114: PUSH
54115: LD_INT 2
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 2
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 1
54136: PUSH
54137: LD_INT 1
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 2
54147: PUSH
54148: LD_INT 0
54150: PUSH
54151: EMPTY
54152: LIST
54153: LIST
54154: PUSH
54155: LD_INT 2
54157: PUSH
54158: LD_INT 1
54160: PUSH
54161: EMPTY
54162: LIST
54163: LIST
54164: PUSH
54165: LD_INT 2
54167: PUSH
54168: LD_INT 2
54170: PUSH
54171: EMPTY
54172: LIST
54173: LIST
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: LD_INT 2
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 1
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 2
54198: NEG
54199: PUSH
54200: LD_INT 0
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 2
54209: NEG
54210: PUSH
54211: LD_INT 1
54213: NEG
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: PUSH
54219: LD_INT 1
54221: NEG
54222: PUSH
54223: LD_INT 3
54225: NEG
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 2
54236: NEG
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 3
54244: PUSH
54245: LD_INT 2
54247: PUSH
54248: EMPTY
54249: LIST
54250: LIST
54251: PUSH
54252: LD_INT 2
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 2
54264: NEG
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 3
54275: NEG
54276: PUSH
54277: LD_INT 1
54279: NEG
54280: PUSH
54281: EMPTY
54282: LIST
54283: LIST
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: LIST
54308: LIST
54309: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54310: LD_ADDR_VAR 0 31
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: LD_INT 0
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 0
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_INT 1
54338: PUSH
54339: LD_INT 0
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 1
54348: PUSH
54349: LD_INT 1
54351: PUSH
54352: EMPTY
54353: LIST
54354: LIST
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: LD_INT 1
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: PUSH
54366: LD_INT 1
54368: NEG
54369: PUSH
54370: LD_INT 0
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 1
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: NEG
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 1
54391: NEG
54392: PUSH
54393: LD_INT 2
54395: NEG
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 1
54403: PUSH
54404: LD_INT 1
54406: NEG
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: PUSH
54412: LD_INT 2
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 2
54424: PUSH
54425: LD_INT 1
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 2
54434: PUSH
54435: LD_INT 2
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 1
54444: PUSH
54445: LD_INT 2
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 0
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 1
54464: NEG
54465: PUSH
54466: LD_INT 1
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 2
54475: NEG
54476: PUSH
54477: LD_INT 1
54479: NEG
54480: PUSH
54481: EMPTY
54482: LIST
54483: LIST
54484: PUSH
54485: LD_INT 2
54487: NEG
54488: PUSH
54489: LD_INT 2
54491: NEG
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 3
54503: NEG
54504: PUSH
54505: EMPTY
54506: LIST
54507: LIST
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: LD_INT 1
54514: NEG
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: PUSH
54520: LD_INT 3
54522: PUSH
54523: LD_INT 1
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: LD_INT 3
54535: PUSH
54536: EMPTY
54537: LIST
54538: LIST
54539: PUSH
54540: LD_INT 1
54542: NEG
54543: PUSH
54544: LD_INT 2
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 3
54553: NEG
54554: PUSH
54555: LD_INT 2
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: EMPTY
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: LIST
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: LIST
54581: LIST
54582: LIST
54583: LIST
54584: LIST
54585: LIST
54586: LIST
54587: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54588: LD_ADDR_VAR 0 32
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 0
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 0
54605: PUSH
54606: LD_INT 1
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: PUSH
54617: LD_INT 0
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: PUSH
54624: LD_INT 1
54626: PUSH
54627: LD_INT 1
54629: PUSH
54630: EMPTY
54631: LIST
54632: LIST
54633: PUSH
54634: LD_INT 0
54636: PUSH
54637: LD_INT 1
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: PUSH
54644: LD_INT 1
54646: NEG
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 1
54657: NEG
54658: PUSH
54659: LD_INT 1
54661: NEG
54662: PUSH
54663: EMPTY
54664: LIST
54665: LIST
54666: PUSH
54667: LD_INT 1
54669: NEG
54670: PUSH
54671: LD_INT 2
54673: NEG
54674: PUSH
54675: EMPTY
54676: LIST
54677: LIST
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: LD_INT 2
54684: NEG
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 1
54692: PUSH
54693: LD_INT 1
54695: NEG
54696: PUSH
54697: EMPTY
54698: LIST
54699: LIST
54700: PUSH
54701: LD_INT 2
54703: PUSH
54704: LD_INT 1
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 2
54713: PUSH
54714: LD_INT 2
54716: PUSH
54717: EMPTY
54718: LIST
54719: LIST
54720: PUSH
54721: LD_INT 1
54723: PUSH
54724: LD_INT 2
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 0
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: EMPTY
54738: LIST
54739: LIST
54740: PUSH
54741: LD_INT 1
54743: NEG
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: EMPTY
54749: LIST
54750: LIST
54751: PUSH
54752: LD_INT 2
54754: NEG
54755: PUSH
54756: LD_INT 0
54758: PUSH
54759: EMPTY
54760: LIST
54761: LIST
54762: PUSH
54763: LD_INT 2
54765: NEG
54766: PUSH
54767: LD_INT 1
54769: NEG
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 1
54777: NEG
54778: PUSH
54779: LD_INT 3
54781: NEG
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: PUSH
54787: LD_INT 1
54789: PUSH
54790: LD_INT 2
54792: NEG
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: LD_INT 2
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 2
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 2
54820: NEG
54821: PUSH
54822: LD_INT 1
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 3
54831: NEG
54832: PUSH
54833: LD_INT 1
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54866: LD_ADDR_VAR 0 33
54870: PUSH
54871: LD_INT 0
54873: PUSH
54874: LD_INT 0
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 0
54883: PUSH
54884: LD_INT 1
54886: NEG
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 1
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: EMPTY
54899: LIST
54900: LIST
54901: PUSH
54902: LD_INT 1
54904: PUSH
54905: LD_INT 1
54907: PUSH
54908: EMPTY
54909: LIST
54910: LIST
54911: PUSH
54912: LD_INT 0
54914: PUSH
54915: LD_INT 1
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 1
54924: NEG
54925: PUSH
54926: LD_INT 0
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 1
54935: NEG
54936: PUSH
54937: LD_INT 1
54939: NEG
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: PUSH
54945: LD_INT 1
54947: NEG
54948: PUSH
54949: LD_INT 2
54951: NEG
54952: PUSH
54953: EMPTY
54954: LIST
54955: LIST
54956: PUSH
54957: LD_INT 1
54959: PUSH
54960: LD_INT 1
54962: NEG
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 2
54970: PUSH
54971: LD_INT 0
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 2
54980: PUSH
54981: LD_INT 1
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 1
54990: PUSH
54991: LD_INT 2
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: LD_INT 1
55014: PUSH
55015: EMPTY
55016: LIST
55017: LIST
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 2
55032: NEG
55033: PUSH
55034: LD_INT 1
55036: NEG
55037: PUSH
55038: EMPTY
55039: LIST
55040: LIST
55041: PUSH
55042: LD_INT 2
55044: NEG
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: EMPTY
55051: LIST
55052: LIST
55053: PUSH
55054: LD_INT 2
55056: NEG
55057: PUSH
55058: LD_INT 3
55060: NEG
55061: PUSH
55062: EMPTY
55063: LIST
55064: LIST
55065: PUSH
55066: LD_INT 2
55068: PUSH
55069: LD_INT 1
55071: NEG
55072: PUSH
55073: EMPTY
55074: LIST
55075: LIST
55076: PUSH
55077: LD_INT 3
55079: PUSH
55080: LD_INT 1
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 1
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: EMPTY
55094: LIST
55095: LIST
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: LD_INT 2
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: PUSH
55108: LD_INT 3
55110: NEG
55111: PUSH
55112: LD_INT 2
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: EMPTY
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55145: LD_ADDR_VAR 0 34
55149: PUSH
55150: LD_INT 0
55152: PUSH
55153: LD_INT 0
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 0
55162: PUSH
55163: LD_INT 1
55165: NEG
55166: PUSH
55167: EMPTY
55168: LIST
55169: LIST
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: LD_INT 0
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 0
55193: PUSH
55194: LD_INT 1
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 1
55203: NEG
55204: PUSH
55205: LD_INT 0
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 1
55214: NEG
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: PUSH
55224: LD_INT 1
55226: NEG
55227: PUSH
55228: LD_INT 2
55230: NEG
55231: PUSH
55232: EMPTY
55233: LIST
55234: LIST
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: EMPTY
55244: LIST
55245: LIST
55246: PUSH
55247: LD_INT 1
55249: PUSH
55250: LD_INT 1
55252: NEG
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 2
55260: PUSH
55261: LD_INT 1
55263: PUSH
55264: EMPTY
55265: LIST
55266: LIST
55267: PUSH
55268: LD_INT 2
55270: PUSH
55271: LD_INT 2
55273: PUSH
55274: EMPTY
55275: LIST
55276: LIST
55277: PUSH
55278: LD_INT 1
55280: PUSH
55281: LD_INT 2
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: LD_INT 1
55290: NEG
55291: PUSH
55292: LD_INT 1
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: LD_INT 2
55301: NEG
55302: PUSH
55303: LD_INT 0
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 2
55312: NEG
55313: PUSH
55314: LD_INT 1
55316: NEG
55317: PUSH
55318: EMPTY
55319: LIST
55320: LIST
55321: PUSH
55322: LD_INT 2
55324: NEG
55325: PUSH
55326: LD_INT 2
55328: NEG
55329: PUSH
55330: EMPTY
55331: LIST
55332: LIST
55333: PUSH
55334: LD_INT 1
55336: NEG
55337: PUSH
55338: LD_INT 3
55340: NEG
55341: PUSH
55342: EMPTY
55343: LIST
55344: LIST
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: NEG
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: PUSH
55357: LD_INT 3
55359: PUSH
55360: LD_INT 2
55362: PUSH
55363: EMPTY
55364: LIST
55365: LIST
55366: PUSH
55367: LD_INT 2
55369: PUSH
55370: LD_INT 3
55372: PUSH
55373: EMPTY
55374: LIST
55375: LIST
55376: PUSH
55377: LD_INT 2
55379: NEG
55380: PUSH
55381: LD_INT 1
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 3
55390: NEG
55391: PUSH
55392: LD_INT 1
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: EMPTY
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55425: LD_ADDR_VAR 0 35
55429: PUSH
55430: LD_INT 0
55432: PUSH
55433: LD_INT 0
55435: PUSH
55436: EMPTY
55437: LIST
55438: LIST
55439: PUSH
55440: LD_INT 0
55442: PUSH
55443: LD_INT 1
55445: NEG
55446: PUSH
55447: EMPTY
55448: LIST
55449: LIST
55450: PUSH
55451: LD_INT 1
55453: PUSH
55454: LD_INT 0
55456: PUSH
55457: EMPTY
55458: LIST
55459: LIST
55460: PUSH
55461: LD_INT 1
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: EMPTY
55468: LIST
55469: LIST
55470: PUSH
55471: LD_INT 0
55473: PUSH
55474: LD_INT 1
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: NEG
55484: PUSH
55485: LD_INT 0
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 1
55494: NEG
55495: PUSH
55496: LD_INT 1
55498: NEG
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 2
55506: PUSH
55507: LD_INT 1
55509: PUSH
55510: EMPTY
55511: LIST
55512: LIST
55513: PUSH
55514: LD_INT 2
55516: NEG
55517: PUSH
55518: LD_INT 1
55520: NEG
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55537: LD_ADDR_VAR 0 36
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 0
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 0
55554: PUSH
55555: LD_INT 1
55557: NEG
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: PUSH
55563: LD_INT 1
55565: PUSH
55566: LD_INT 0
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 1
55575: PUSH
55576: LD_INT 1
55578: PUSH
55579: EMPTY
55580: LIST
55581: LIST
55582: PUSH
55583: LD_INT 0
55585: PUSH
55586: LD_INT 1
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: LD_INT 0
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 1
55606: NEG
55607: PUSH
55608: LD_INT 1
55610: NEG
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: PUSH
55616: LD_INT 1
55618: NEG
55619: PUSH
55620: LD_INT 2
55622: NEG
55623: PUSH
55624: EMPTY
55625: LIST
55626: LIST
55627: PUSH
55628: LD_INT 1
55630: PUSH
55631: LD_INT 2
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55649: LD_ADDR_VAR 0 37
55653: PUSH
55654: LD_INT 0
55656: PUSH
55657: LD_INT 0
55659: PUSH
55660: EMPTY
55661: LIST
55662: LIST
55663: PUSH
55664: LD_INT 0
55666: PUSH
55667: LD_INT 1
55669: NEG
55670: PUSH
55671: EMPTY
55672: LIST
55673: LIST
55674: PUSH
55675: LD_INT 1
55677: PUSH
55678: LD_INT 0
55680: PUSH
55681: EMPTY
55682: LIST
55683: LIST
55684: PUSH
55685: LD_INT 1
55687: PUSH
55688: LD_INT 1
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 1
55700: PUSH
55701: EMPTY
55702: LIST
55703: LIST
55704: PUSH
55705: LD_INT 1
55707: NEG
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: LD_INT 1
55722: NEG
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: PUSH
55728: LD_INT 1
55730: PUSH
55731: LD_INT 1
55733: NEG
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 1
55741: NEG
55742: PUSH
55743: LD_INT 1
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55761: LD_ADDR_VAR 0 38
55765: PUSH
55766: LD_INT 0
55768: PUSH
55769: LD_INT 0
55771: PUSH
55772: EMPTY
55773: LIST
55774: LIST
55775: PUSH
55776: LD_INT 0
55778: PUSH
55779: LD_INT 1
55781: NEG
55782: PUSH
55783: EMPTY
55784: LIST
55785: LIST
55786: PUSH
55787: LD_INT 1
55789: PUSH
55790: LD_INT 0
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: LD_INT 1
55802: PUSH
55803: EMPTY
55804: LIST
55805: LIST
55806: PUSH
55807: LD_INT 0
55809: PUSH
55810: LD_INT 1
55812: PUSH
55813: EMPTY
55814: LIST
55815: LIST
55816: PUSH
55817: LD_INT 1
55819: NEG
55820: PUSH
55821: LD_INT 0
55823: PUSH
55824: EMPTY
55825: LIST
55826: LIST
55827: PUSH
55828: LD_INT 1
55830: NEG
55831: PUSH
55832: LD_INT 1
55834: NEG
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: LD_INT 1
55845: PUSH
55846: EMPTY
55847: LIST
55848: LIST
55849: PUSH
55850: LD_INT 2
55852: NEG
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: EMPTY
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55873: LD_ADDR_VAR 0 39
55877: PUSH
55878: LD_INT 0
55880: PUSH
55881: LD_INT 0
55883: PUSH
55884: EMPTY
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 0
55890: PUSH
55891: LD_INT 1
55893: NEG
55894: PUSH
55895: EMPTY
55896: LIST
55897: LIST
55898: PUSH
55899: LD_INT 1
55901: PUSH
55902: LD_INT 0
55904: PUSH
55905: EMPTY
55906: LIST
55907: LIST
55908: PUSH
55909: LD_INT 1
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: PUSH
55919: LD_INT 0
55921: PUSH
55922: LD_INT 1
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: LD_INT 0
55935: PUSH
55936: EMPTY
55937: LIST
55938: LIST
55939: PUSH
55940: LD_INT 1
55942: NEG
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 2
55958: NEG
55959: PUSH
55960: EMPTY
55961: LIST
55962: LIST
55963: PUSH
55964: LD_INT 1
55966: PUSH
55967: LD_INT 2
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55985: LD_ADDR_VAR 0 40
55989: PUSH
55990: LD_INT 0
55992: PUSH
55993: LD_INT 0
55995: PUSH
55996: EMPTY
55997: LIST
55998: LIST
55999: PUSH
56000: LD_INT 0
56002: PUSH
56003: LD_INT 1
56005: NEG
56006: PUSH
56007: EMPTY
56008: LIST
56009: LIST
56010: PUSH
56011: LD_INT 1
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: EMPTY
56018: LIST
56019: LIST
56020: PUSH
56021: LD_INT 1
56023: PUSH
56024: LD_INT 1
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: PUSH
56031: LD_INT 0
56033: PUSH
56034: LD_INT 1
56036: PUSH
56037: EMPTY
56038: LIST
56039: LIST
56040: PUSH
56041: LD_INT 1
56043: NEG
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 1
56054: NEG
56055: PUSH
56056: LD_INT 1
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 1
56069: NEG
56070: PUSH
56071: EMPTY
56072: LIST
56073: LIST
56074: PUSH
56075: LD_INT 1
56077: NEG
56078: PUSH
56079: LD_INT 1
56081: PUSH
56082: EMPTY
56083: LIST
56084: LIST
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: LIST
56090: LIST
56091: LIST
56092: LIST
56093: LIST
56094: LIST
56095: LIST
56096: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56097: LD_ADDR_VAR 0 41
56101: PUSH
56102: LD_INT 0
56104: PUSH
56105: LD_INT 0
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 0
56114: PUSH
56115: LD_INT 1
56117: NEG
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 1
56125: PUSH
56126: LD_INT 0
56128: PUSH
56129: EMPTY
56130: LIST
56131: LIST
56132: PUSH
56133: LD_INT 1
56135: PUSH
56136: LD_INT 1
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: PUSH
56143: LD_INT 0
56145: PUSH
56146: LD_INT 1
56148: PUSH
56149: EMPTY
56150: LIST
56151: LIST
56152: PUSH
56153: LD_INT 1
56155: NEG
56156: PUSH
56157: LD_INT 0
56159: PUSH
56160: EMPTY
56161: LIST
56162: LIST
56163: PUSH
56164: LD_INT 1
56166: NEG
56167: PUSH
56168: LD_INT 1
56170: NEG
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: LD_INT 1
56178: NEG
56179: PUSH
56180: LD_INT 2
56182: NEG
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: PUSH
56188: LD_INT 1
56190: PUSH
56191: LD_INT 1
56193: NEG
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: PUSH
56199: LD_INT 2
56201: PUSH
56202: LD_INT 0
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: PUSH
56209: LD_INT 2
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: PUSH
56219: LD_INT 2
56221: PUSH
56222: LD_INT 2
56224: PUSH
56225: EMPTY
56226: LIST
56227: LIST
56228: PUSH
56229: LD_INT 1
56231: PUSH
56232: LD_INT 2
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 1
56241: NEG
56242: PUSH
56243: LD_INT 1
56245: PUSH
56246: EMPTY
56247: LIST
56248: LIST
56249: PUSH
56250: LD_INT 2
56252: NEG
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: LD_INT 2
56263: NEG
56264: PUSH
56265: LD_INT 1
56267: NEG
56268: PUSH
56269: EMPTY
56270: LIST
56271: LIST
56272: PUSH
56273: LD_INT 2
56275: NEG
56276: PUSH
56277: LD_INT 2
56279: NEG
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 2
56287: NEG
56288: PUSH
56289: LD_INT 3
56291: NEG
56292: PUSH
56293: EMPTY
56294: LIST
56295: LIST
56296: PUSH
56297: LD_INT 2
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: EMPTY
56315: LIST
56316: LIST
56317: PUSH
56318: LD_INT 3
56320: PUSH
56321: LD_INT 1
56323: PUSH
56324: EMPTY
56325: LIST
56326: LIST
56327: PUSH
56328: LD_INT 3
56330: PUSH
56331: LD_INT 2
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: PUSH
56338: LD_INT 3
56340: PUSH
56341: LD_INT 3
56343: PUSH
56344: EMPTY
56345: LIST
56346: LIST
56347: PUSH
56348: LD_INT 2
56350: PUSH
56351: LD_INT 3
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 2
56360: NEG
56361: PUSH
56362: LD_INT 1
56364: PUSH
56365: EMPTY
56366: LIST
56367: LIST
56368: PUSH
56369: LD_INT 3
56371: NEG
56372: PUSH
56373: LD_INT 0
56375: PUSH
56376: EMPTY
56377: LIST
56378: LIST
56379: PUSH
56380: LD_INT 3
56382: NEG
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 3
56394: NEG
56395: PUSH
56396: LD_INT 2
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 3
56406: NEG
56407: PUSH
56408: LD_INT 3
56410: NEG
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: LIST
56433: LIST
56434: LIST
56435: LIST
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: LIST
56442: LIST
56443: LIST
56444: LIST
56445: LIST
56446: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56447: LD_ADDR_VAR 0 42
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 0
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 0
56464: PUSH
56465: LD_INT 1
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 1
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: PUSH
56483: LD_INT 1
56485: PUSH
56486: LD_INT 1
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: LD_INT 1
56498: PUSH
56499: EMPTY
56500: LIST
56501: LIST
56502: PUSH
56503: LD_INT 1
56505: NEG
56506: PUSH
56507: LD_INT 0
56509: PUSH
56510: EMPTY
56511: LIST
56512: LIST
56513: PUSH
56514: LD_INT 1
56516: NEG
56517: PUSH
56518: LD_INT 1
56520: NEG
56521: PUSH
56522: EMPTY
56523: LIST
56524: LIST
56525: PUSH
56526: LD_INT 1
56528: NEG
56529: PUSH
56530: LD_INT 2
56532: NEG
56533: PUSH
56534: EMPTY
56535: LIST
56536: LIST
56537: PUSH
56538: LD_INT 0
56540: PUSH
56541: LD_INT 2
56543: NEG
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: PUSH
56552: LD_INT 1
56554: NEG
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 2
56562: PUSH
56563: LD_INT 1
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: PUSH
56570: LD_INT 2
56572: PUSH
56573: LD_INT 2
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: PUSH
56580: LD_INT 1
56582: PUSH
56583: LD_INT 2
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 2
56595: PUSH
56596: EMPTY
56597: LIST
56598: LIST
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: LD_INT 1
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: NEG
56614: PUSH
56615: LD_INT 1
56617: NEG
56618: PUSH
56619: EMPTY
56620: LIST
56621: LIST
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: LD_INT 2
56629: NEG
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: PUSH
56635: LD_INT 2
56637: NEG
56638: PUSH
56639: LD_INT 3
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 1
56649: NEG
56650: PUSH
56651: LD_INT 3
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: LD_INT 3
56664: NEG
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 1
56672: PUSH
56673: LD_INT 2
56675: NEG
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 3
56683: PUSH
56684: LD_INT 2
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: LD_INT 3
56693: PUSH
56694: LD_INT 3
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PUSH
56701: LD_INT 2
56703: PUSH
56704: LD_INT 3
56706: PUSH
56707: EMPTY
56708: LIST
56709: LIST
56710: PUSH
56711: LD_INT 1
56713: PUSH
56714: LD_INT 3
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: NEG
56734: PUSH
56735: LD_INT 2
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: PUSH
56742: LD_INT 3
56744: NEG
56745: PUSH
56746: LD_INT 2
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 3
56756: NEG
56757: PUSH
56758: LD_INT 3
56760: NEG
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: PUSH
56766: EMPTY
56767: LIST
56768: LIST
56769: LIST
56770: LIST
56771: LIST
56772: LIST
56773: LIST
56774: LIST
56775: LIST
56776: LIST
56777: LIST
56778: LIST
56779: LIST
56780: LIST
56781: LIST
56782: LIST
56783: LIST
56784: LIST
56785: LIST
56786: LIST
56787: LIST
56788: LIST
56789: LIST
56790: LIST
56791: LIST
56792: LIST
56793: LIST
56794: LIST
56795: LIST
56796: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56797: LD_ADDR_VAR 0 43
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 0
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 1
56825: PUSH
56826: LD_INT 0
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: PUSH
56833: LD_INT 1
56835: PUSH
56836: LD_INT 1
56838: PUSH
56839: EMPTY
56840: LIST
56841: LIST
56842: PUSH
56843: LD_INT 0
56845: PUSH
56846: LD_INT 1
56848: PUSH
56849: EMPTY
56850: LIST
56851: LIST
56852: PUSH
56853: LD_INT 1
56855: NEG
56856: PUSH
56857: LD_INT 0
56859: PUSH
56860: EMPTY
56861: LIST
56862: LIST
56863: PUSH
56864: LD_INT 1
56866: NEG
56867: PUSH
56868: LD_INT 1
56870: NEG
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: PUSH
56876: LD_INT 1
56878: NEG
56879: PUSH
56880: LD_INT 2
56882: NEG
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: LD_INT 0
56890: PUSH
56891: LD_INT 2
56893: NEG
56894: PUSH
56895: EMPTY
56896: LIST
56897: LIST
56898: PUSH
56899: LD_INT 1
56901: PUSH
56902: LD_INT 1
56904: NEG
56905: PUSH
56906: EMPTY
56907: LIST
56908: LIST
56909: PUSH
56910: LD_INT 2
56912: PUSH
56913: LD_INT 0
56915: PUSH
56916: EMPTY
56917: LIST
56918: LIST
56919: PUSH
56920: LD_INT 2
56922: PUSH
56923: LD_INT 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 2
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 2
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 1
56952: NEG
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 2
56963: NEG
56964: PUSH
56965: LD_INT 0
56967: PUSH
56968: EMPTY
56969: LIST
56970: LIST
56971: PUSH
56972: LD_INT 2
56974: NEG
56975: PUSH
56976: LD_INT 1
56978: NEG
56979: PUSH
56980: EMPTY
56981: LIST
56982: LIST
56983: PUSH
56984: LD_INT 1
56986: NEG
56987: PUSH
56988: LD_INT 3
56990: NEG
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: PUSH
56996: LD_INT 0
56998: PUSH
56999: LD_INT 3
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 1
57009: PUSH
57010: LD_INT 2
57012: NEG
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: PUSH
57018: LD_INT 2
57020: PUSH
57021: LD_INT 1
57023: NEG
57024: PUSH
57025: EMPTY
57026: LIST
57027: LIST
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: LD_INT 0
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: PUSH
57039: LD_INT 3
57041: PUSH
57042: LD_INT 1
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 3
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 0
57061: PUSH
57062: LD_INT 3
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: EMPTY
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 2
57082: NEG
57083: PUSH
57084: LD_INT 1
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 3
57093: NEG
57094: PUSH
57095: LD_INT 0
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 3
57104: NEG
57105: PUSH
57106: LD_INT 1
57108: NEG
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: EMPTY
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57145: LD_ADDR_VAR 0 44
57149: PUSH
57150: LD_INT 0
57152: PUSH
57153: LD_INT 0
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 0
57162: PUSH
57163: LD_INT 1
57165: NEG
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 1
57173: PUSH
57174: LD_INT 0
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: PUSH
57181: LD_INT 1
57183: PUSH
57184: LD_INT 1
57186: PUSH
57187: EMPTY
57188: LIST
57189: LIST
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: LD_INT 1
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 1
57203: NEG
57204: PUSH
57205: LD_INT 0
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: PUSH
57212: LD_INT 1
57214: NEG
57215: PUSH
57216: LD_INT 1
57218: NEG
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PUSH
57224: LD_INT 1
57226: NEG
57227: PUSH
57228: LD_INT 2
57230: NEG
57231: PUSH
57232: EMPTY
57233: LIST
57234: LIST
57235: PUSH
57236: LD_INT 1
57238: PUSH
57239: LD_INT 1
57241: NEG
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: LD_INT 2
57249: PUSH
57250: LD_INT 0
57252: PUSH
57253: EMPTY
57254: LIST
57255: LIST
57256: PUSH
57257: LD_INT 2
57259: PUSH
57260: LD_INT 1
57262: PUSH
57263: EMPTY
57264: LIST
57265: LIST
57266: PUSH
57267: LD_INT 2
57269: PUSH
57270: LD_INT 2
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: PUSH
57277: LD_INT 1
57279: PUSH
57280: LD_INT 2
57282: PUSH
57283: EMPTY
57284: LIST
57285: LIST
57286: PUSH
57287: LD_INT 1
57289: NEG
57290: PUSH
57291: LD_INT 1
57293: PUSH
57294: EMPTY
57295: LIST
57296: LIST
57297: PUSH
57298: LD_INT 2
57300: NEG
57301: PUSH
57302: LD_INT 0
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: NEG
57312: PUSH
57313: LD_INT 1
57315: NEG
57316: PUSH
57317: EMPTY
57318: LIST
57319: LIST
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: LD_INT 2
57327: NEG
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: PUSH
57333: LD_INT 2
57335: NEG
57336: PUSH
57337: LD_INT 3
57339: NEG
57340: PUSH
57341: EMPTY
57342: LIST
57343: LIST
57344: PUSH
57345: LD_INT 2
57347: PUSH
57348: LD_INT 1
57350: NEG
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: PUSH
57356: LD_INT 3
57358: PUSH
57359: LD_INT 0
57361: PUSH
57362: EMPTY
57363: LIST
57364: LIST
57365: PUSH
57366: LD_INT 3
57368: PUSH
57369: LD_INT 1
57371: PUSH
57372: EMPTY
57373: LIST
57374: LIST
57375: PUSH
57376: LD_INT 3
57378: PUSH
57379: LD_INT 2
57381: PUSH
57382: EMPTY
57383: LIST
57384: LIST
57385: PUSH
57386: LD_INT 3
57388: PUSH
57389: LD_INT 3
57391: PUSH
57392: EMPTY
57393: LIST
57394: LIST
57395: PUSH
57396: LD_INT 2
57398: PUSH
57399: LD_INT 3
57401: PUSH
57402: EMPTY
57403: LIST
57404: LIST
57405: PUSH
57406: LD_INT 2
57408: NEG
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: EMPTY
57414: LIST
57415: LIST
57416: PUSH
57417: LD_INT 3
57419: NEG
57420: PUSH
57421: LD_INT 0
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: PUSH
57428: LD_INT 3
57430: NEG
57431: PUSH
57432: LD_INT 1
57434: NEG
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: PUSH
57440: LD_INT 3
57442: NEG
57443: PUSH
57444: LD_INT 2
57446: NEG
57447: PUSH
57448: EMPTY
57449: LIST
57450: LIST
57451: PUSH
57452: LD_INT 3
57454: NEG
57455: PUSH
57456: LD_INT 3
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: LIST
57476: LIST
57477: LIST
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: LIST
57483: LIST
57484: LIST
57485: LIST
57486: LIST
57487: LIST
57488: LIST
57489: LIST
57490: LIST
57491: LIST
57492: LIST
57493: LIST
57494: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57495: LD_ADDR_VAR 0 45
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 0
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 0
57512: PUSH
57513: LD_INT 1
57515: NEG
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 1
57523: PUSH
57524: LD_INT 0
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: LD_INT 1
57533: PUSH
57534: LD_INT 1
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 0
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: LD_INT 1
57553: NEG
57554: PUSH
57555: LD_INT 0
57557: PUSH
57558: EMPTY
57559: LIST
57560: LIST
57561: PUSH
57562: LD_INT 1
57564: NEG
57565: PUSH
57566: LD_INT 1
57568: NEG
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 2
57580: NEG
57581: PUSH
57582: EMPTY
57583: LIST
57584: LIST
57585: PUSH
57586: LD_INT 0
57588: PUSH
57589: LD_INT 2
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 1
57599: PUSH
57600: LD_INT 1
57602: NEG
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 2
57610: PUSH
57611: LD_INT 1
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: LD_INT 2
57620: PUSH
57621: LD_INT 2
57623: PUSH
57624: EMPTY
57625: LIST
57626: LIST
57627: PUSH
57628: LD_INT 1
57630: PUSH
57631: LD_INT 2
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: PUSH
57638: LD_INT 0
57640: PUSH
57641: LD_INT 2
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: LD_INT 1
57650: NEG
57651: PUSH
57652: LD_INT 1
57654: PUSH
57655: EMPTY
57656: LIST
57657: LIST
57658: PUSH
57659: LD_INT 2
57661: NEG
57662: PUSH
57663: LD_INT 1
57665: NEG
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: PUSH
57671: LD_INT 2
57673: NEG
57674: PUSH
57675: LD_INT 2
57677: NEG
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 2
57685: NEG
57686: PUSH
57687: LD_INT 3
57689: NEG
57690: PUSH
57691: EMPTY
57692: LIST
57693: LIST
57694: PUSH
57695: LD_INT 1
57697: NEG
57698: PUSH
57699: LD_INT 3
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 3
57712: NEG
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: PUSH
57721: LD_INT 2
57723: NEG
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 3
57731: PUSH
57732: LD_INT 2
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: LD_INT 3
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 2
57751: PUSH
57752: LD_INT 3
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: LD_INT 1
57761: PUSH
57762: LD_INT 3
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 0
57771: PUSH
57772: LD_INT 3
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 1
57781: NEG
57782: PUSH
57783: LD_INT 2
57785: PUSH
57786: EMPTY
57787: LIST
57788: LIST
57789: PUSH
57790: LD_INT 3
57792: NEG
57793: PUSH
57794: LD_INT 2
57796: NEG
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: PUSH
57802: LD_INT 3
57804: NEG
57805: PUSH
57806: LD_INT 3
57808: NEG
57809: PUSH
57810: EMPTY
57811: LIST
57812: LIST
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: LIST
57841: LIST
57842: LIST
57843: LIST
57844: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57845: LD_ADDR_VAR 0 46
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 0
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: LD_INT 1
57865: NEG
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 1
57873: PUSH
57874: LD_INT 0
57876: PUSH
57877: EMPTY
57878: LIST
57879: LIST
57880: PUSH
57881: LD_INT 1
57883: PUSH
57884: LD_INT 1
57886: PUSH
57887: EMPTY
57888: LIST
57889: LIST
57890: PUSH
57891: LD_INT 0
57893: PUSH
57894: LD_INT 1
57896: PUSH
57897: EMPTY
57898: LIST
57899: LIST
57900: PUSH
57901: LD_INT 1
57903: NEG
57904: PUSH
57905: LD_INT 0
57907: PUSH
57908: EMPTY
57909: LIST
57910: LIST
57911: PUSH
57912: LD_INT 1
57914: NEG
57915: PUSH
57916: LD_INT 1
57918: NEG
57919: PUSH
57920: EMPTY
57921: LIST
57922: LIST
57923: PUSH
57924: LD_INT 1
57926: NEG
57927: PUSH
57928: LD_INT 2
57930: NEG
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: PUSH
57936: LD_INT 0
57938: PUSH
57939: LD_INT 2
57941: NEG
57942: PUSH
57943: EMPTY
57944: LIST
57945: LIST
57946: PUSH
57947: LD_INT 1
57949: PUSH
57950: LD_INT 1
57952: NEG
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: PUSH
57958: LD_INT 2
57960: PUSH
57961: LD_INT 0
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: PUSH
57968: LD_INT 2
57970: PUSH
57971: LD_INT 1
57973: PUSH
57974: EMPTY
57975: LIST
57976: LIST
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 2
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 2
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 1
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 2
58011: NEG
58012: PUSH
58013: LD_INT 0
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: PUSH
58020: LD_INT 2
58022: NEG
58023: PUSH
58024: LD_INT 1
58026: NEG
58027: PUSH
58028: EMPTY
58029: LIST
58030: LIST
58031: PUSH
58032: LD_INT 1
58034: NEG
58035: PUSH
58036: LD_INT 3
58038: NEG
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: PUSH
58044: LD_INT 0
58046: PUSH
58047: LD_INT 3
58049: NEG
58050: PUSH
58051: EMPTY
58052: LIST
58053: LIST
58054: PUSH
58055: LD_INT 1
58057: PUSH
58058: LD_INT 2
58060: NEG
58061: PUSH
58062: EMPTY
58063: LIST
58064: LIST
58065: PUSH
58066: LD_INT 2
58068: PUSH
58069: LD_INT 1
58071: NEG
58072: PUSH
58073: EMPTY
58074: LIST
58075: LIST
58076: PUSH
58077: LD_INT 3
58079: PUSH
58080: LD_INT 0
58082: PUSH
58083: EMPTY
58084: LIST
58085: LIST
58086: PUSH
58087: LD_INT 3
58089: PUSH
58090: LD_INT 1
58092: PUSH
58093: EMPTY
58094: LIST
58095: LIST
58096: PUSH
58097: LD_INT 1
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: PUSH
58107: LD_INT 0
58109: PUSH
58110: LD_INT 3
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 1
58119: NEG
58120: PUSH
58121: LD_INT 2
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 2
58130: NEG
58131: PUSH
58132: LD_INT 1
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 3
58141: NEG
58142: PUSH
58143: LD_INT 0
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 3
58152: NEG
58153: PUSH
58154: LD_INT 1
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58193: LD_ADDR_VAR 0 47
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: LD_INT 1
58213: NEG
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: PUSH
58219: LD_INT 1
58221: PUSH
58222: LD_INT 0
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: EMPTY
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 0
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: LD_INT 0
58255: PUSH
58256: EMPTY
58257: LIST
58258: LIST
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: LD_INT 1
58266: NEG
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 1
58274: NEG
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: PUSH
58284: LD_INT 0
58286: PUSH
58287: LD_INT 2
58289: NEG
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: LD_INT 1
58297: PUSH
58298: LD_INT 1
58300: NEG
58301: PUSH
58302: EMPTY
58303: LIST
58304: LIST
58305: PUSH
58306: LD_INT 2
58308: NEG
58309: PUSH
58310: LD_INT 1
58312: NEG
58313: PUSH
58314: EMPTY
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 2
58320: NEG
58321: PUSH
58322: LD_INT 2
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: EMPTY
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: LIST
58341: LIST
58342: LIST
58343: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58344: LD_ADDR_VAR 0 48
58348: PUSH
58349: LD_INT 0
58351: PUSH
58352: LD_INT 0
58354: PUSH
58355: EMPTY
58356: LIST
58357: LIST
58358: PUSH
58359: LD_INT 0
58361: PUSH
58362: LD_INT 1
58364: NEG
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PUSH
58370: LD_INT 1
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PUSH
58380: LD_INT 1
58382: PUSH
58383: LD_INT 1
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 1
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 1
58402: NEG
58403: PUSH
58404: LD_INT 0
58406: PUSH
58407: EMPTY
58408: LIST
58409: LIST
58410: PUSH
58411: LD_INT 1
58413: NEG
58414: PUSH
58415: LD_INT 1
58417: NEG
58418: PUSH
58419: EMPTY
58420: LIST
58421: LIST
58422: PUSH
58423: LD_INT 1
58425: NEG
58426: PUSH
58427: LD_INT 2
58429: NEG
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 2
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 1
58451: NEG
58452: PUSH
58453: EMPTY
58454: LIST
58455: LIST
58456: PUSH
58457: LD_INT 2
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: PUSH
58467: LD_INT 2
58469: PUSH
58470: LD_INT 1
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58491: LD_ADDR_VAR 0 49
58495: PUSH
58496: LD_INT 0
58498: PUSH
58499: LD_INT 0
58501: PUSH
58502: EMPTY
58503: LIST
58504: LIST
58505: PUSH
58506: LD_INT 0
58508: PUSH
58509: LD_INT 1
58511: NEG
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: PUSH
58517: LD_INT 1
58519: PUSH
58520: LD_INT 0
58522: PUSH
58523: EMPTY
58524: LIST
58525: LIST
58526: PUSH
58527: LD_INT 1
58529: PUSH
58530: LD_INT 1
58532: PUSH
58533: EMPTY
58534: LIST
58535: LIST
58536: PUSH
58537: LD_INT 0
58539: PUSH
58540: LD_INT 1
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: PUSH
58547: LD_INT 1
58549: NEG
58550: PUSH
58551: LD_INT 0
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: PUSH
58558: LD_INT 1
58560: NEG
58561: PUSH
58562: LD_INT 1
58564: NEG
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 1
58575: NEG
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 2
58583: PUSH
58584: LD_INT 0
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 2
58593: PUSH
58594: LD_INT 1
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 2
58603: PUSH
58604: LD_INT 2
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 1
58613: PUSH
58614: LD_INT 2
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: LIST
58626: LIST
58627: LIST
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58635: LD_ADDR_VAR 0 50
58639: PUSH
58640: LD_INT 0
58642: PUSH
58643: LD_INT 0
58645: PUSH
58646: EMPTY
58647: LIST
58648: LIST
58649: PUSH
58650: LD_INT 0
58652: PUSH
58653: LD_INT 1
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 0
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 1
58673: PUSH
58674: LD_INT 1
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 0
58683: PUSH
58684: LD_INT 1
58686: PUSH
58687: EMPTY
58688: LIST
58689: LIST
58690: PUSH
58691: LD_INT 1
58693: NEG
58694: PUSH
58695: LD_INT 0
58697: PUSH
58698: EMPTY
58699: LIST
58700: LIST
58701: PUSH
58702: LD_INT 1
58704: NEG
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: EMPTY
58711: LIST
58712: LIST
58713: PUSH
58714: LD_INT 2
58716: PUSH
58717: LD_INT 1
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 2
58726: PUSH
58727: LD_INT 2
58729: PUSH
58730: EMPTY
58731: LIST
58732: LIST
58733: PUSH
58734: LD_INT 1
58736: PUSH
58737: LD_INT 2
58739: PUSH
58740: EMPTY
58741: LIST
58742: LIST
58743: PUSH
58744: LD_INT 0
58746: PUSH
58747: LD_INT 2
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: PUSH
58754: LD_INT 1
58756: NEG
58757: PUSH
58758: LD_INT 1
58760: PUSH
58761: EMPTY
58762: LIST
58763: LIST
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: LIST
58769: LIST
58770: LIST
58771: LIST
58772: LIST
58773: LIST
58774: LIST
58775: LIST
58776: LIST
58777: LIST
58778: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58779: LD_ADDR_VAR 0 51
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: LD_INT 0
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: PUSH
58794: LD_INT 0
58796: PUSH
58797: LD_INT 1
58799: NEG
58800: PUSH
58801: EMPTY
58802: LIST
58803: LIST
58804: PUSH
58805: LD_INT 1
58807: PUSH
58808: LD_INT 0
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 1
58817: PUSH
58818: LD_INT 1
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: LD_INT 0
58827: PUSH
58828: LD_INT 1
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 1
58837: NEG
58838: PUSH
58839: LD_INT 0
58841: PUSH
58842: EMPTY
58843: LIST
58844: LIST
58845: PUSH
58846: LD_INT 1
58848: NEG
58849: PUSH
58850: LD_INT 1
58852: NEG
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: PUSH
58858: LD_INT 1
58860: PUSH
58861: LD_INT 2
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: PUSH
58868: LD_INT 0
58870: PUSH
58871: LD_INT 2
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 1
58880: NEG
58881: PUSH
58882: LD_INT 1
58884: PUSH
58885: EMPTY
58886: LIST
58887: LIST
58888: PUSH
58889: LD_INT 2
58891: NEG
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: PUSH
58900: LD_INT 2
58902: NEG
58903: PUSH
58904: LD_INT 1
58906: NEG
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: LIST
58921: LIST
58922: LIST
58923: LIST
58924: LIST
58925: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58926: LD_ADDR_VAR 0 52
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: LD_INT 0
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: LD_INT 1
58946: NEG
58947: PUSH
58948: EMPTY
58949: LIST
58950: LIST
58951: PUSH
58952: LD_INT 1
58954: PUSH
58955: LD_INT 0
58957: PUSH
58958: EMPTY
58959: LIST
58960: LIST
58961: PUSH
58962: LD_INT 1
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: EMPTY
58969: LIST
58970: LIST
58971: PUSH
58972: LD_INT 0
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: NEG
58985: PUSH
58986: LD_INT 0
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 1
58995: NEG
58996: PUSH
58997: LD_INT 1
58999: NEG
59000: PUSH
59001: EMPTY
59002: LIST
59003: LIST
59004: PUSH
59005: LD_INT 1
59007: NEG
59008: PUSH
59009: LD_INT 2
59011: NEG
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PUSH
59017: LD_INT 1
59019: NEG
59020: PUSH
59021: LD_INT 1
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: PUSH
59028: LD_INT 2
59030: NEG
59031: PUSH
59032: LD_INT 0
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: PUSH
59039: LD_INT 2
59041: NEG
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: EMPTY
59048: LIST
59049: LIST
59050: PUSH
59051: LD_INT 2
59053: NEG
59054: PUSH
59055: LD_INT 2
59057: NEG
59058: PUSH
59059: EMPTY
59060: LIST
59061: LIST
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: LIST
59068: LIST
59069: LIST
59070: LIST
59071: LIST
59072: LIST
59073: LIST
59074: LIST
59075: LIST
59076: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59077: LD_ADDR_VAR 0 53
59081: PUSH
59082: LD_INT 0
59084: PUSH
59085: LD_INT 0
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 1
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 1
59105: PUSH
59106: LD_INT 0
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 1
59115: PUSH
59116: LD_INT 1
59118: PUSH
59119: EMPTY
59120: LIST
59121: LIST
59122: PUSH
59123: LD_INT 0
59125: PUSH
59126: LD_INT 1
59128: PUSH
59129: EMPTY
59130: LIST
59131: LIST
59132: PUSH
59133: LD_INT 1
59135: NEG
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: LD_INT 1
59146: NEG
59147: PUSH
59148: LD_INT 1
59150: NEG
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 1
59158: NEG
59159: PUSH
59160: LD_INT 2
59162: NEG
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: PUSH
59168: LD_INT 0
59170: PUSH
59171: LD_INT 2
59173: NEG
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 1
59181: PUSH
59182: LD_INT 1
59184: NEG
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: PUSH
59190: LD_INT 2
59192: PUSH
59193: LD_INT 0
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PUSH
59200: LD_INT 2
59202: PUSH
59203: LD_INT 1
59205: PUSH
59206: EMPTY
59207: LIST
59208: LIST
59209: PUSH
59210: LD_INT 2
59212: PUSH
59213: LD_INT 2
59215: PUSH
59216: EMPTY
59217: LIST
59218: LIST
59219: PUSH
59220: LD_INT 1
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: PUSH
59230: LD_INT 0
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: EMPTY
59237: LIST
59238: LIST
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: LD_INT 1
59246: PUSH
59247: EMPTY
59248: LIST
59249: LIST
59250: PUSH
59251: LD_INT 2
59253: NEG
59254: PUSH
59255: LD_INT 0
59257: PUSH
59258: EMPTY
59259: LIST
59260: LIST
59261: PUSH
59262: LD_INT 2
59264: NEG
59265: PUSH
59266: LD_INT 1
59268: NEG
59269: PUSH
59270: EMPTY
59271: LIST
59272: LIST
59273: PUSH
59274: LD_INT 2
59276: NEG
59277: PUSH
59278: LD_INT 2
59280: NEG
59281: PUSH
59282: EMPTY
59283: LIST
59284: LIST
59285: PUSH
59286: EMPTY
59287: LIST
59288: LIST
59289: LIST
59290: LIST
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: LIST
59296: LIST
59297: LIST
59298: LIST
59299: LIST
59300: LIST
59301: LIST
59302: LIST
59303: LIST
59304: LIST
59305: LIST
59306: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59307: LD_ADDR_VAR 0 54
59311: PUSH
59312: LD_INT 0
59314: PUSH
59315: LD_INT 0
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 1
59327: NEG
59328: PUSH
59329: EMPTY
59330: LIST
59331: LIST
59332: PUSH
59333: LD_INT 1
59335: PUSH
59336: LD_INT 0
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 1
59345: PUSH
59346: LD_INT 1
59348: PUSH
59349: EMPTY
59350: LIST
59351: LIST
59352: PUSH
59353: LD_INT 0
59355: PUSH
59356: LD_INT 1
59358: PUSH
59359: EMPTY
59360: LIST
59361: LIST
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: LD_INT 0
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 1
59376: NEG
59377: PUSH
59378: LD_INT 1
59380: NEG
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 1
59388: NEG
59389: PUSH
59390: LD_INT 2
59392: NEG
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: PUSH
59398: LD_INT 0
59400: PUSH
59401: LD_INT 2
59403: NEG
59404: PUSH
59405: EMPTY
59406: LIST
59407: LIST
59408: PUSH
59409: LD_INT 1
59411: PUSH
59412: LD_INT 1
59414: NEG
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: PUSH
59420: LD_INT 2
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: PUSH
59430: LD_INT 2
59432: PUSH
59433: LD_INT 1
59435: PUSH
59436: EMPTY
59437: LIST
59438: LIST
59439: PUSH
59440: LD_INT 2
59442: PUSH
59443: LD_INT 2
59445: PUSH
59446: EMPTY
59447: LIST
59448: LIST
59449: PUSH
59450: LD_INT 1
59452: PUSH
59453: LD_INT 2
59455: PUSH
59456: EMPTY
59457: LIST
59458: LIST
59459: PUSH
59460: LD_INT 0
59462: PUSH
59463: LD_INT 2
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: LD_INT 1
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PUSH
59481: LD_INT 2
59483: NEG
59484: PUSH
59485: LD_INT 0
59487: PUSH
59488: EMPTY
59489: LIST
59490: LIST
59491: PUSH
59492: LD_INT 2
59494: NEG
59495: PUSH
59496: LD_INT 1
59498: NEG
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 2
59506: NEG
59507: PUSH
59508: LD_INT 2
59510: NEG
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: EMPTY
59517: LIST
59518: LIST
59519: LIST
59520: LIST
59521: LIST
59522: LIST
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: LIST
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: LIST
59536: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59537: LD_ADDR_VAR 0 55
59541: PUSH
59542: LD_INT 0
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 1
59557: NEG
59558: PUSH
59559: EMPTY
59560: LIST
59561: LIST
59562: PUSH
59563: LD_INT 1
59565: PUSH
59566: LD_INT 0
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 1
59575: PUSH
59576: LD_INT 1
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 0
59585: PUSH
59586: LD_INT 1
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: PUSH
59593: LD_INT 1
59595: NEG
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: EMPTY
59601: LIST
59602: LIST
59603: PUSH
59604: LD_INT 1
59606: NEG
59607: PUSH
59608: LD_INT 1
59610: NEG
59611: PUSH
59612: EMPTY
59613: LIST
59614: LIST
59615: PUSH
59616: LD_INT 1
59618: NEG
59619: PUSH
59620: LD_INT 2
59622: NEG
59623: PUSH
59624: EMPTY
59625: LIST
59626: LIST
59627: PUSH
59628: LD_INT 0
59630: PUSH
59631: LD_INT 2
59633: NEG
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: PUSH
59639: LD_INT 1
59641: PUSH
59642: LD_INT 1
59644: NEG
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 2
59652: PUSH
59653: LD_INT 0
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 2
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: PUSH
59670: LD_INT 2
59672: PUSH
59673: LD_INT 2
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 1
59682: PUSH
59683: LD_INT 2
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 0
59692: PUSH
59693: LD_INT 2
59695: PUSH
59696: EMPTY
59697: LIST
59698: LIST
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: LD_INT 1
59706: PUSH
59707: EMPTY
59708: LIST
59709: LIST
59710: PUSH
59711: LD_INT 2
59713: NEG
59714: PUSH
59715: LD_INT 0
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: NEG
59725: PUSH
59726: LD_INT 1
59728: NEG
59729: PUSH
59730: EMPTY
59731: LIST
59732: LIST
59733: PUSH
59734: LD_INT 2
59736: NEG
59737: PUSH
59738: LD_INT 2
59740: NEG
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: LIST
59760: LIST
59761: LIST
59762: LIST
59763: LIST
59764: LIST
59765: LIST
59766: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59767: LD_ADDR_VAR 0 56
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 1
59787: NEG
59788: PUSH
59789: EMPTY
59790: LIST
59791: LIST
59792: PUSH
59793: LD_INT 1
59795: PUSH
59796: LD_INT 0
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 1
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: EMPTY
59810: LIST
59811: LIST
59812: PUSH
59813: LD_INT 0
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: LD_INT 1
59825: NEG
59826: PUSH
59827: LD_INT 0
59829: PUSH
59830: EMPTY
59831: LIST
59832: LIST
59833: PUSH
59834: LD_INT 1
59836: NEG
59837: PUSH
59838: LD_INT 1
59840: NEG
59841: PUSH
59842: EMPTY
59843: LIST
59844: LIST
59845: PUSH
59846: LD_INT 1
59848: NEG
59849: PUSH
59850: LD_INT 2
59852: NEG
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: PUSH
59858: LD_INT 0
59860: PUSH
59861: LD_INT 2
59863: NEG
59864: PUSH
59865: EMPTY
59866: LIST
59867: LIST
59868: PUSH
59869: LD_INT 1
59871: PUSH
59872: LD_INT 1
59874: NEG
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: PUSH
59880: LD_INT 2
59882: PUSH
59883: LD_INT 0
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: LD_INT 2
59892: PUSH
59893: LD_INT 1
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 2
59902: PUSH
59903: LD_INT 2
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: LD_INT 1
59912: PUSH
59913: LD_INT 2
59915: PUSH
59916: EMPTY
59917: LIST
59918: LIST
59919: PUSH
59920: LD_INT 0
59922: PUSH
59923: LD_INT 2
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: LD_INT 1
59936: PUSH
59937: EMPTY
59938: LIST
59939: LIST
59940: PUSH
59941: LD_INT 2
59943: NEG
59944: PUSH
59945: LD_INT 0
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 2
59954: NEG
59955: PUSH
59956: LD_INT 1
59958: NEG
59959: PUSH
59960: EMPTY
59961: LIST
59962: LIST
59963: PUSH
59964: LD_INT 2
59966: NEG
59967: PUSH
59968: LD_INT 2
59970: NEG
59971: PUSH
59972: EMPTY
59973: LIST
59974: LIST
59975: PUSH
59976: EMPTY
59977: LIST
59978: LIST
59979: LIST
59980: LIST
59981: LIST
59982: LIST
59983: LIST
59984: LIST
59985: LIST
59986: LIST
59987: LIST
59988: LIST
59989: LIST
59990: LIST
59991: LIST
59992: LIST
59993: LIST
59994: LIST
59995: LIST
59996: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59997: LD_ADDR_VAR 0 57
60001: PUSH
60002: LD_INT 0
60004: PUSH
60005: LD_INT 0
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: LD_INT 1
60017: NEG
60018: PUSH
60019: EMPTY
60020: LIST
60021: LIST
60022: PUSH
60023: LD_INT 1
60025: PUSH
60026: LD_INT 0
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 1
60035: PUSH
60036: LD_INT 1
60038: PUSH
60039: EMPTY
60040: LIST
60041: LIST
60042: PUSH
60043: LD_INT 0
60045: PUSH
60046: LD_INT 1
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: PUSH
60053: LD_INT 1
60055: NEG
60056: PUSH
60057: LD_INT 0
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 1
60066: NEG
60067: PUSH
60068: LD_INT 1
60070: NEG
60071: PUSH
60072: EMPTY
60073: LIST
60074: LIST
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: LD_INT 2
60082: NEG
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PUSH
60088: LD_INT 0
60090: PUSH
60091: LD_INT 2
60093: NEG
60094: PUSH
60095: EMPTY
60096: LIST
60097: LIST
60098: PUSH
60099: LD_INT 1
60101: PUSH
60102: LD_INT 1
60104: NEG
60105: PUSH
60106: EMPTY
60107: LIST
60108: LIST
60109: PUSH
60110: LD_INT 2
60112: PUSH
60113: LD_INT 0
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 2
60122: PUSH
60123: LD_INT 1
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 2
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: PUSH
60140: LD_INT 1
60142: PUSH
60143: LD_INT 2
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: PUSH
60150: LD_INT 0
60152: PUSH
60153: LD_INT 2
60155: PUSH
60156: EMPTY
60157: LIST
60158: LIST
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: LD_INT 1
60166: PUSH
60167: EMPTY
60168: LIST
60169: LIST
60170: PUSH
60171: LD_INT 2
60173: NEG
60174: PUSH
60175: LD_INT 0
60177: PUSH
60178: EMPTY
60179: LIST
60180: LIST
60181: PUSH
60182: LD_INT 2
60184: NEG
60185: PUSH
60186: LD_INT 1
60188: NEG
60189: PUSH
60190: EMPTY
60191: LIST
60192: LIST
60193: PUSH
60194: LD_INT 2
60196: NEG
60197: PUSH
60198: LD_INT 2
60200: NEG
60201: PUSH
60202: EMPTY
60203: LIST
60204: LIST
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: LIST
60210: LIST
60211: LIST
60212: LIST
60213: LIST
60214: LIST
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: LIST
60222: LIST
60223: LIST
60224: LIST
60225: LIST
60226: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60227: LD_ADDR_VAR 0 58
60231: PUSH
60232: LD_INT 0
60234: PUSH
60235: LD_INT 0
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 1
60247: NEG
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: PUSH
60253: LD_INT 1
60255: PUSH
60256: LD_INT 0
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 1
60265: PUSH
60266: LD_INT 1
60268: PUSH
60269: EMPTY
60270: LIST
60271: LIST
60272: PUSH
60273: LD_INT 0
60275: PUSH
60276: LD_INT 1
60278: PUSH
60279: EMPTY
60280: LIST
60281: LIST
60282: PUSH
60283: LD_INT 1
60285: NEG
60286: PUSH
60287: LD_INT 0
60289: PUSH
60290: EMPTY
60291: LIST
60292: LIST
60293: PUSH
60294: LD_INT 1
60296: NEG
60297: PUSH
60298: LD_INT 1
60300: NEG
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: PUSH
60306: LD_INT 1
60308: NEG
60309: PUSH
60310: LD_INT 2
60312: NEG
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: PUSH
60318: LD_INT 0
60320: PUSH
60321: LD_INT 2
60323: NEG
60324: PUSH
60325: EMPTY
60326: LIST
60327: LIST
60328: PUSH
60329: LD_INT 1
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: LD_INT 2
60342: PUSH
60343: LD_INT 0
60345: PUSH
60346: EMPTY
60347: LIST
60348: LIST
60349: PUSH
60350: LD_INT 2
60352: PUSH
60353: LD_INT 1
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 2
60362: PUSH
60363: LD_INT 2
60365: PUSH
60366: EMPTY
60367: LIST
60368: LIST
60369: PUSH
60370: LD_INT 1
60372: PUSH
60373: LD_INT 2
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PUSH
60380: LD_INT 0
60382: PUSH
60383: LD_INT 2
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: LD_INT 1
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: PUSH
60401: LD_INT 2
60403: NEG
60404: PUSH
60405: LD_INT 0
60407: PUSH
60408: EMPTY
60409: LIST
60410: LIST
60411: PUSH
60412: LD_INT 2
60414: NEG
60415: PUSH
60416: LD_INT 1
60418: NEG
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 2
60426: NEG
60427: PUSH
60428: LD_INT 2
60430: NEG
60431: PUSH
60432: EMPTY
60433: LIST
60434: LIST
60435: PUSH
60436: EMPTY
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60457: LD_ADDR_VAR 0 59
60461: PUSH
60462: LD_INT 0
60464: PUSH
60465: LD_INT 0
60467: PUSH
60468: EMPTY
60469: LIST
60470: LIST
60471: PUSH
60472: LD_INT 0
60474: PUSH
60475: LD_INT 1
60477: NEG
60478: PUSH
60479: EMPTY
60480: LIST
60481: LIST
60482: PUSH
60483: LD_INT 1
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: EMPTY
60490: LIST
60491: LIST
60492: PUSH
60493: LD_INT 1
60495: PUSH
60496: LD_INT 1
60498: PUSH
60499: EMPTY
60500: LIST
60501: LIST
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: LD_INT 1
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: LD_INT 0
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: LD_INT 1
60530: NEG
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: PUSH
60536: EMPTY
60537: LIST
60538: LIST
60539: LIST
60540: LIST
60541: LIST
60542: LIST
60543: LIST
60544: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60545: LD_ADDR_VAR 0 60
60549: PUSH
60550: LD_INT 0
60552: PUSH
60553: LD_INT 0
60555: PUSH
60556: EMPTY
60557: LIST
60558: LIST
60559: PUSH
60560: LD_INT 0
60562: PUSH
60563: LD_INT 1
60565: NEG
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 1
60573: PUSH
60574: LD_INT 0
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: PUSH
60581: LD_INT 1
60583: PUSH
60584: LD_INT 1
60586: PUSH
60587: EMPTY
60588: LIST
60589: LIST
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: LD_INT 1
60596: PUSH
60597: EMPTY
60598: LIST
60599: LIST
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: LD_INT 0
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 1
60618: NEG
60619: PUSH
60620: EMPTY
60621: LIST
60622: LIST
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: LIST
60628: LIST
60629: LIST
60630: LIST
60631: LIST
60632: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60633: LD_ADDR_VAR 0 61
60637: PUSH
60638: LD_INT 0
60640: PUSH
60641: LD_INT 0
60643: PUSH
60644: EMPTY
60645: LIST
60646: LIST
60647: PUSH
60648: LD_INT 0
60650: PUSH
60651: LD_INT 1
60653: NEG
60654: PUSH
60655: EMPTY
60656: LIST
60657: LIST
60658: PUSH
60659: LD_INT 1
60661: PUSH
60662: LD_INT 0
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PUSH
60669: LD_INT 1
60671: PUSH
60672: LD_INT 1
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: LD_INT 1
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: LD_INT 0
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 1
60702: NEG
60703: PUSH
60704: LD_INT 1
60706: NEG
60707: PUSH
60708: EMPTY
60709: LIST
60710: LIST
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: LIST
60716: LIST
60717: LIST
60718: LIST
60719: LIST
60720: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60721: LD_ADDR_VAR 0 62
60725: PUSH
60726: LD_INT 0
60728: PUSH
60729: LD_INT 0
60731: PUSH
60732: EMPTY
60733: LIST
60734: LIST
60735: PUSH
60736: LD_INT 0
60738: PUSH
60739: LD_INT 1
60741: NEG
60742: PUSH
60743: EMPTY
60744: LIST
60745: LIST
60746: PUSH
60747: LD_INT 1
60749: PUSH
60750: LD_INT 0
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 1
60759: PUSH
60760: LD_INT 1
60762: PUSH
60763: EMPTY
60764: LIST
60765: LIST
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: LD_INT 1
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: LD_INT 0
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: LD_INT 1
60790: NEG
60791: PUSH
60792: LD_INT 1
60794: NEG
60795: PUSH
60796: EMPTY
60797: LIST
60798: LIST
60799: PUSH
60800: EMPTY
60801: LIST
60802: LIST
60803: LIST
60804: LIST
60805: LIST
60806: LIST
60807: LIST
60808: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60809: LD_ADDR_VAR 0 63
60813: PUSH
60814: LD_INT 0
60816: PUSH
60817: LD_INT 0
60819: PUSH
60820: EMPTY
60821: LIST
60822: LIST
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: LD_INT 1
60829: NEG
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 1
60837: PUSH
60838: LD_INT 0
60840: PUSH
60841: EMPTY
60842: LIST
60843: LIST
60844: PUSH
60845: LD_INT 1
60847: PUSH
60848: LD_INT 1
60850: PUSH
60851: EMPTY
60852: LIST
60853: LIST
60854: PUSH
60855: LD_INT 0
60857: PUSH
60858: LD_INT 1
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 1
60867: NEG
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 1
60878: NEG
60879: PUSH
60880: LD_INT 1
60882: NEG
60883: PUSH
60884: EMPTY
60885: LIST
60886: LIST
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: LIST
60896: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60897: LD_ADDR_VAR 0 64
60901: PUSH
60902: LD_INT 0
60904: PUSH
60905: LD_INT 0
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PUSH
60912: LD_INT 0
60914: PUSH
60915: LD_INT 1
60917: NEG
60918: PUSH
60919: EMPTY
60920: LIST
60921: LIST
60922: PUSH
60923: LD_INT 1
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: EMPTY
60930: LIST
60931: LIST
60932: PUSH
60933: LD_INT 1
60935: PUSH
60936: LD_INT 1
60938: PUSH
60939: EMPTY
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 0
60945: PUSH
60946: LD_INT 1
60948: PUSH
60949: EMPTY
60950: LIST
60951: LIST
60952: PUSH
60953: LD_INT 1
60955: NEG
60956: PUSH
60957: LD_INT 0
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: PUSH
60964: LD_INT 1
60966: NEG
60967: PUSH
60968: LD_INT 1
60970: NEG
60971: PUSH
60972: EMPTY
60973: LIST
60974: LIST
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: ST_TO_ADDR
// end ; 1 :
60985: GO 66882
60987: LD_INT 1
60989: DOUBLE
60990: EQUAL
60991: IFTRUE 60995
60993: GO 63618
60995: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60996: LD_ADDR_VAR 0 11
61000: PUSH
61001: LD_INT 1
61003: NEG
61004: PUSH
61005: LD_INT 3
61007: NEG
61008: PUSH
61009: EMPTY
61010: LIST
61011: LIST
61012: PUSH
61013: LD_INT 0
61015: PUSH
61016: LD_INT 3
61018: NEG
61019: PUSH
61020: EMPTY
61021: LIST
61022: LIST
61023: PUSH
61024: LD_INT 1
61026: PUSH
61027: LD_INT 2
61029: NEG
61030: PUSH
61031: EMPTY
61032: LIST
61033: LIST
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61040: LD_ADDR_VAR 0 12
61044: PUSH
61045: LD_INT 2
61047: PUSH
61048: LD_INT 1
61050: NEG
61051: PUSH
61052: EMPTY
61053: LIST
61054: LIST
61055: PUSH
61056: LD_INT 3
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: EMPTY
61063: LIST
61064: LIST
61065: PUSH
61066: LD_INT 3
61068: PUSH
61069: LD_INT 1
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61081: LD_ADDR_VAR 0 13
61085: PUSH
61086: LD_INT 3
61088: PUSH
61089: LD_INT 2
61091: PUSH
61092: EMPTY
61093: LIST
61094: LIST
61095: PUSH
61096: LD_INT 3
61098: PUSH
61099: LD_INT 3
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 3
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: LIST
61120: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61121: LD_ADDR_VAR 0 14
61125: PUSH
61126: LD_INT 1
61128: PUSH
61129: LD_INT 3
61131: PUSH
61132: EMPTY
61133: LIST
61134: LIST
61135: PUSH
61136: LD_INT 0
61138: PUSH
61139: LD_INT 3
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 1
61148: NEG
61149: PUSH
61150: LD_INT 2
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: LIST
61161: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61162: LD_ADDR_VAR 0 15
61166: PUSH
61167: LD_INT 2
61169: NEG
61170: PUSH
61171: LD_INT 1
61173: PUSH
61174: EMPTY
61175: LIST
61176: LIST
61177: PUSH
61178: LD_INT 3
61180: NEG
61181: PUSH
61182: LD_INT 0
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: LD_INT 1
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: LIST
61205: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61206: LD_ADDR_VAR 0 16
61210: PUSH
61211: LD_INT 2
61213: NEG
61214: PUSH
61215: LD_INT 3
61217: NEG
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 3
61225: NEG
61226: PUSH
61227: LD_INT 2
61229: NEG
61230: PUSH
61231: EMPTY
61232: LIST
61233: LIST
61234: PUSH
61235: LD_INT 3
61237: NEG
61238: PUSH
61239: LD_INT 3
61241: NEG
61242: PUSH
61243: EMPTY
61244: LIST
61245: LIST
61246: PUSH
61247: EMPTY
61248: LIST
61249: LIST
61250: LIST
61251: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61252: LD_ADDR_VAR 0 17
61256: PUSH
61257: LD_INT 1
61259: NEG
61260: PUSH
61261: LD_INT 3
61263: NEG
61264: PUSH
61265: EMPTY
61266: LIST
61267: LIST
61268: PUSH
61269: LD_INT 0
61271: PUSH
61272: LD_INT 3
61274: NEG
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: PUSH
61280: LD_INT 1
61282: PUSH
61283: LD_INT 2
61285: NEG
61286: PUSH
61287: EMPTY
61288: LIST
61289: LIST
61290: PUSH
61291: EMPTY
61292: LIST
61293: LIST
61294: LIST
61295: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61296: LD_ADDR_VAR 0 18
61300: PUSH
61301: LD_INT 2
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: EMPTY
61309: LIST
61310: LIST
61311: PUSH
61312: LD_INT 3
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 3
61324: PUSH
61325: LD_INT 1
61327: PUSH
61328: EMPTY
61329: LIST
61330: LIST
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61337: LD_ADDR_VAR 0 19
61341: PUSH
61342: LD_INT 3
61344: PUSH
61345: LD_INT 2
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 3
61354: PUSH
61355: LD_INT 3
61357: PUSH
61358: EMPTY
61359: LIST
61360: LIST
61361: PUSH
61362: LD_INT 2
61364: PUSH
61365: LD_INT 3
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: LIST
61376: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61377: LD_ADDR_VAR 0 20
61381: PUSH
61382: LD_INT 1
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 0
61394: PUSH
61395: LD_INT 3
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 1
61404: NEG
61405: PUSH
61406: LD_INT 2
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: PUSH
61413: EMPTY
61414: LIST
61415: LIST
61416: LIST
61417: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61418: LD_ADDR_VAR 0 21
61422: PUSH
61423: LD_INT 2
61425: NEG
61426: PUSH
61427: LD_INT 1
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 3
61436: NEG
61437: PUSH
61438: LD_INT 0
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: NEG
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: PUSH
61457: EMPTY
61458: LIST
61459: LIST
61460: LIST
61461: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61462: LD_ADDR_VAR 0 22
61466: PUSH
61467: LD_INT 2
61469: NEG
61470: PUSH
61471: LD_INT 3
61473: NEG
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: LD_INT 3
61481: NEG
61482: PUSH
61483: LD_INT 2
61485: NEG
61486: PUSH
61487: EMPTY
61488: LIST
61489: LIST
61490: PUSH
61491: LD_INT 3
61493: NEG
61494: PUSH
61495: LD_INT 3
61497: NEG
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: LIST
61507: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61508: LD_ADDR_VAR 0 23
61512: PUSH
61513: LD_INT 0
61515: PUSH
61516: LD_INT 3
61518: NEG
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 1
61526: NEG
61527: PUSH
61528: LD_INT 4
61530: NEG
61531: PUSH
61532: EMPTY
61533: LIST
61534: LIST
61535: PUSH
61536: LD_INT 1
61538: PUSH
61539: LD_INT 3
61541: NEG
61542: PUSH
61543: EMPTY
61544: LIST
61545: LIST
61546: PUSH
61547: EMPTY
61548: LIST
61549: LIST
61550: LIST
61551: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61552: LD_ADDR_VAR 0 24
61556: PUSH
61557: LD_INT 3
61559: PUSH
61560: LD_INT 0
61562: PUSH
61563: EMPTY
61564: LIST
61565: LIST
61566: PUSH
61567: LD_INT 3
61569: PUSH
61570: LD_INT 1
61572: NEG
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 4
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: LIST
61592: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61593: LD_ADDR_VAR 0 25
61597: PUSH
61598: LD_INT 3
61600: PUSH
61601: LD_INT 3
61603: PUSH
61604: EMPTY
61605: LIST
61606: LIST
61607: PUSH
61608: LD_INT 4
61610: PUSH
61611: LD_INT 3
61613: PUSH
61614: EMPTY
61615: LIST
61616: LIST
61617: PUSH
61618: LD_INT 3
61620: PUSH
61621: LD_INT 4
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: EMPTY
61629: LIST
61630: LIST
61631: LIST
61632: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61633: LD_ADDR_VAR 0 26
61637: PUSH
61638: LD_INT 0
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: LD_INT 4
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 1
61660: NEG
61661: PUSH
61662: LD_INT 3
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61674: LD_ADDR_VAR 0 27
61678: PUSH
61679: LD_INT 3
61681: NEG
61682: PUSH
61683: LD_INT 0
61685: PUSH
61686: EMPTY
61687: LIST
61688: LIST
61689: PUSH
61690: LD_INT 3
61692: NEG
61693: PUSH
61694: LD_INT 1
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PUSH
61701: LD_INT 4
61703: NEG
61704: PUSH
61705: LD_INT 1
61707: NEG
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: PUSH
61713: EMPTY
61714: LIST
61715: LIST
61716: LIST
61717: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61718: LD_ADDR_VAR 0 28
61722: PUSH
61723: LD_INT 3
61725: NEG
61726: PUSH
61727: LD_INT 3
61729: NEG
61730: PUSH
61731: EMPTY
61732: LIST
61733: LIST
61734: PUSH
61735: LD_INT 3
61737: NEG
61738: PUSH
61739: LD_INT 4
61741: NEG
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: PUSH
61747: LD_INT 4
61749: NEG
61750: PUSH
61751: LD_INT 3
61753: NEG
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: LIST
61763: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61764: LD_ADDR_VAR 0 29
61768: PUSH
61769: LD_INT 1
61771: NEG
61772: PUSH
61773: LD_INT 3
61775: NEG
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: PUSH
61781: LD_INT 0
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: EMPTY
61789: LIST
61790: LIST
61791: PUSH
61792: LD_INT 1
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: EMPTY
61800: LIST
61801: LIST
61802: PUSH
61803: LD_INT 1
61805: NEG
61806: PUSH
61807: LD_INT 4
61809: NEG
61810: PUSH
61811: EMPTY
61812: LIST
61813: LIST
61814: PUSH
61815: LD_INT 0
61817: PUSH
61818: LD_INT 4
61820: NEG
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PUSH
61826: LD_INT 1
61828: PUSH
61829: LD_INT 3
61831: NEG
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: NEG
61840: PUSH
61841: LD_INT 5
61843: NEG
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: PUSH
61849: LD_INT 0
61851: PUSH
61852: LD_INT 5
61854: NEG
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 1
61862: PUSH
61863: LD_INT 4
61865: NEG
61866: PUSH
61867: EMPTY
61868: LIST
61869: LIST
61870: PUSH
61871: LD_INT 1
61873: NEG
61874: PUSH
61875: LD_INT 6
61877: NEG
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: PUSH
61883: LD_INT 0
61885: PUSH
61886: LD_INT 6
61888: NEG
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 1
61896: PUSH
61897: LD_INT 5
61899: NEG
61900: PUSH
61901: EMPTY
61902: LIST
61903: LIST
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61919: LD_ADDR_VAR 0 30
61923: PUSH
61924: LD_INT 2
61926: PUSH
61927: LD_INT 1
61929: NEG
61930: PUSH
61931: EMPTY
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 3
61937: PUSH
61938: LD_INT 0
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 3
61947: PUSH
61948: LD_INT 1
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: PUSH
61955: LD_INT 3
61957: PUSH
61958: LD_INT 1
61960: NEG
61961: PUSH
61962: EMPTY
61963: LIST
61964: LIST
61965: PUSH
61966: LD_INT 4
61968: PUSH
61969: LD_INT 0
61971: PUSH
61972: EMPTY
61973: LIST
61974: LIST
61975: PUSH
61976: LD_INT 4
61978: PUSH
61979: LD_INT 1
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 4
61988: PUSH
61989: LD_INT 1
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 5
61999: PUSH
62000: LD_INT 0
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: PUSH
62007: LD_INT 5
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 5
62019: PUSH
62020: LD_INT 1
62022: NEG
62023: PUSH
62024: EMPTY
62025: LIST
62026: LIST
62027: PUSH
62028: LD_INT 6
62030: PUSH
62031: LD_INT 0
62033: PUSH
62034: EMPTY
62035: LIST
62036: LIST
62037: PUSH
62038: LD_INT 6
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: EMPTY
62045: LIST
62046: LIST
62047: PUSH
62048: EMPTY
62049: LIST
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
62062: LD_ADDR_VAR 0 31
62066: PUSH
62067: LD_INT 3
62069: PUSH
62070: LD_INT 2
62072: PUSH
62073: EMPTY
62074: LIST
62075: LIST
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: LD_INT 3
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 2
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 4
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: LD_INT 4
62109: PUSH
62110: LD_INT 4
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: PUSH
62117: LD_INT 3
62119: PUSH
62120: LD_INT 4
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 5
62129: PUSH
62130: LD_INT 4
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 5
62139: PUSH
62140: LD_INT 5
62142: PUSH
62143: EMPTY
62144: LIST
62145: LIST
62146: PUSH
62147: LD_INT 4
62149: PUSH
62150: LD_INT 5
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 6
62159: PUSH
62160: LD_INT 5
62162: PUSH
62163: EMPTY
62164: LIST
62165: LIST
62166: PUSH
62167: LD_INT 6
62169: PUSH
62170: LD_INT 6
62172: PUSH
62173: EMPTY
62174: LIST
62175: LIST
62176: PUSH
62177: LD_INT 5
62179: PUSH
62180: LD_INT 6
62182: PUSH
62183: EMPTY
62184: LIST
62185: LIST
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: LIST
62191: LIST
62192: LIST
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62201: LD_ADDR_VAR 0 32
62205: PUSH
62206: LD_INT 1
62208: PUSH
62209: LD_INT 3
62211: PUSH
62212: EMPTY
62213: LIST
62214: LIST
62215: PUSH
62216: LD_INT 0
62218: PUSH
62219: LD_INT 3
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 1
62228: NEG
62229: PUSH
62230: LD_INT 2
62232: PUSH
62233: EMPTY
62234: LIST
62235: LIST
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: LD_INT 4
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 0
62249: PUSH
62250: LD_INT 4
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: NEG
62260: PUSH
62261: LD_INT 3
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 1
62270: PUSH
62271: LD_INT 5
62273: PUSH
62274: EMPTY
62275: LIST
62276: LIST
62277: PUSH
62278: LD_INT 0
62280: PUSH
62281: LD_INT 5
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: NEG
62291: PUSH
62292: LD_INT 4
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: PUSH
62302: LD_INT 6
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 0
62311: PUSH
62312: LD_INT 6
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 1
62321: NEG
62322: PUSH
62323: LD_INT 5
62325: PUSH
62326: EMPTY
62327: LIST
62328: LIST
62329: PUSH
62330: EMPTY
62331: LIST
62332: LIST
62333: LIST
62334: LIST
62335: LIST
62336: LIST
62337: LIST
62338: LIST
62339: LIST
62340: LIST
62341: LIST
62342: LIST
62343: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62344: LD_ADDR_VAR 0 33
62348: PUSH
62349: LD_INT 2
62351: NEG
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: EMPTY
62357: LIST
62358: LIST
62359: PUSH
62360: LD_INT 3
62362: NEG
62363: PUSH
62364: LD_INT 0
62366: PUSH
62367: EMPTY
62368: LIST
62369: LIST
62370: PUSH
62371: LD_INT 3
62373: NEG
62374: PUSH
62375: LD_INT 1
62377: NEG
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 3
62385: NEG
62386: PUSH
62387: LD_INT 1
62389: PUSH
62390: EMPTY
62391: LIST
62392: LIST
62393: PUSH
62394: LD_INT 4
62396: NEG
62397: PUSH
62398: LD_INT 0
62400: PUSH
62401: EMPTY
62402: LIST
62403: LIST
62404: PUSH
62405: LD_INT 4
62407: NEG
62408: PUSH
62409: LD_INT 1
62411: NEG
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 4
62419: NEG
62420: PUSH
62421: LD_INT 1
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: PUSH
62428: LD_INT 5
62430: NEG
62431: PUSH
62432: LD_INT 0
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 5
62441: NEG
62442: PUSH
62443: LD_INT 1
62445: NEG
62446: PUSH
62447: EMPTY
62448: LIST
62449: LIST
62450: PUSH
62451: LD_INT 5
62453: NEG
62454: PUSH
62455: LD_INT 1
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 6
62464: NEG
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: EMPTY
62470: LIST
62471: LIST
62472: PUSH
62473: LD_INT 6
62475: NEG
62476: PUSH
62477: LD_INT 1
62479: NEG
62480: PUSH
62481: EMPTY
62482: LIST
62483: LIST
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: LIST
62495: LIST
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62499: LD_ADDR_VAR 0 34
62503: PUSH
62504: LD_INT 2
62506: NEG
62507: PUSH
62508: LD_INT 3
62510: NEG
62511: PUSH
62512: EMPTY
62513: LIST
62514: LIST
62515: PUSH
62516: LD_INT 3
62518: NEG
62519: PUSH
62520: LD_INT 2
62522: NEG
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: PUSH
62528: LD_INT 3
62530: NEG
62531: PUSH
62532: LD_INT 3
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 3
62542: NEG
62543: PUSH
62544: LD_INT 4
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 4
62554: NEG
62555: PUSH
62556: LD_INT 3
62558: NEG
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: PUSH
62564: LD_INT 4
62566: NEG
62567: PUSH
62568: LD_INT 4
62570: NEG
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 4
62578: NEG
62579: PUSH
62580: LD_INT 5
62582: NEG
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 5
62590: NEG
62591: PUSH
62592: LD_INT 4
62594: NEG
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PUSH
62600: LD_INT 5
62602: NEG
62603: PUSH
62604: LD_INT 5
62606: NEG
62607: PUSH
62608: EMPTY
62609: LIST
62610: LIST
62611: PUSH
62612: LD_INT 5
62614: NEG
62615: PUSH
62616: LD_INT 6
62618: NEG
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 6
62626: NEG
62627: PUSH
62628: LD_INT 5
62630: NEG
62631: PUSH
62632: EMPTY
62633: LIST
62634: LIST
62635: PUSH
62636: LD_INT 6
62638: NEG
62639: PUSH
62640: LD_INT 6
62642: NEG
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: LIST
62652: LIST
62653: LIST
62654: LIST
62655: LIST
62656: LIST
62657: LIST
62658: LIST
62659: LIST
62660: LIST
62661: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62662: LD_ADDR_VAR 0 41
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: LD_INT 2
62672: NEG
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 1
62680: NEG
62681: PUSH
62682: LD_INT 3
62684: NEG
62685: PUSH
62686: EMPTY
62687: LIST
62688: LIST
62689: PUSH
62690: LD_INT 1
62692: PUSH
62693: LD_INT 2
62695: NEG
62696: PUSH
62697: EMPTY
62698: LIST
62699: LIST
62700: PUSH
62701: EMPTY
62702: LIST
62703: LIST
62704: LIST
62705: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62706: LD_ADDR_VAR 0 42
62710: PUSH
62711: LD_INT 2
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 2
62723: PUSH
62724: LD_INT 1
62726: NEG
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PUSH
62732: LD_INT 3
62734: PUSH
62735: LD_INT 1
62737: PUSH
62738: EMPTY
62739: LIST
62740: LIST
62741: PUSH
62742: EMPTY
62743: LIST
62744: LIST
62745: LIST
62746: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62747: LD_ADDR_VAR 0 43
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: LD_INT 2
62757: PUSH
62758: EMPTY
62759: LIST
62760: LIST
62761: PUSH
62762: LD_INT 3
62764: PUSH
62765: LD_INT 2
62767: PUSH
62768: EMPTY
62769: LIST
62770: LIST
62771: PUSH
62772: LD_INT 2
62774: PUSH
62775: LD_INT 3
62777: PUSH
62778: EMPTY
62779: LIST
62780: LIST
62781: PUSH
62782: EMPTY
62783: LIST
62784: LIST
62785: LIST
62786: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62787: LD_ADDR_VAR 0 44
62791: PUSH
62792: LD_INT 0
62794: PUSH
62795: LD_INT 2
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 1
62804: PUSH
62805: LD_INT 3
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PUSH
62812: LD_INT 1
62814: NEG
62815: PUSH
62816: LD_INT 2
62818: PUSH
62819: EMPTY
62820: LIST
62821: LIST
62822: PUSH
62823: EMPTY
62824: LIST
62825: LIST
62826: LIST
62827: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62828: LD_ADDR_VAR 0 45
62832: PUSH
62833: LD_INT 2
62835: NEG
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: LD_INT 2
62846: NEG
62847: PUSH
62848: LD_INT 1
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: PUSH
62855: LD_INT 3
62857: NEG
62858: PUSH
62859: LD_INT 1
62861: NEG
62862: PUSH
62863: EMPTY
62864: LIST
62865: LIST
62866: PUSH
62867: EMPTY
62868: LIST
62869: LIST
62870: LIST
62871: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62872: LD_ADDR_VAR 0 46
62876: PUSH
62877: LD_INT 2
62879: NEG
62880: PUSH
62881: LD_INT 2
62883: NEG
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 2
62891: NEG
62892: PUSH
62893: LD_INT 3
62895: NEG
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 3
62903: NEG
62904: PUSH
62905: LD_INT 2
62907: NEG
62908: PUSH
62909: EMPTY
62910: LIST
62911: LIST
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: LIST
62917: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62918: LD_ADDR_VAR 0 47
62922: PUSH
62923: LD_INT 2
62925: NEG
62926: PUSH
62927: LD_INT 3
62929: NEG
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: PUSH
62935: LD_INT 1
62937: NEG
62938: PUSH
62939: LD_INT 3
62941: NEG
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62951: LD_ADDR_VAR 0 48
62955: PUSH
62956: LD_INT 1
62958: PUSH
62959: LD_INT 2
62961: NEG
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 2
62969: PUSH
62970: LD_INT 1
62972: NEG
62973: PUSH
62974: EMPTY
62975: LIST
62976: LIST
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62982: LD_ADDR_VAR 0 49
62986: PUSH
62987: LD_INT 3
62989: PUSH
62990: LD_INT 1
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: LD_INT 3
62999: PUSH
63000: LD_INT 2
63002: PUSH
63003: EMPTY
63004: LIST
63005: LIST
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
63011: LD_ADDR_VAR 0 50
63015: PUSH
63016: LD_INT 2
63018: PUSH
63019: LD_INT 3
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 1
63028: PUSH
63029: LD_INT 3
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63040: LD_ADDR_VAR 0 51
63044: PUSH
63045: LD_INT 1
63047: NEG
63048: PUSH
63049: LD_INT 2
63051: PUSH
63052: EMPTY
63053: LIST
63054: LIST
63055: PUSH
63056: LD_INT 2
63058: NEG
63059: PUSH
63060: LD_INT 1
63062: PUSH
63063: EMPTY
63064: LIST
63065: LIST
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
63071: LD_ADDR_VAR 0 52
63075: PUSH
63076: LD_INT 3
63078: NEG
63079: PUSH
63080: LD_INT 1
63082: NEG
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 3
63090: NEG
63091: PUSH
63092: LD_INT 2
63094: NEG
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: EMPTY
63101: LIST
63102: LIST
63103: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
63104: LD_ADDR_VAR 0 53
63108: PUSH
63109: LD_INT 1
63111: NEG
63112: PUSH
63113: LD_INT 3
63115: NEG
63116: PUSH
63117: EMPTY
63118: LIST
63119: LIST
63120: PUSH
63121: LD_INT 0
63123: PUSH
63124: LD_INT 3
63126: NEG
63127: PUSH
63128: EMPTY
63129: LIST
63130: LIST
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: LD_INT 2
63137: NEG
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: LIST
63147: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63148: LD_ADDR_VAR 0 54
63152: PUSH
63153: LD_INT 2
63155: PUSH
63156: LD_INT 1
63158: NEG
63159: PUSH
63160: EMPTY
63161: LIST
63162: LIST
63163: PUSH
63164: LD_INT 3
63166: PUSH
63167: LD_INT 0
63169: PUSH
63170: EMPTY
63171: LIST
63172: LIST
63173: PUSH
63174: LD_INT 3
63176: PUSH
63177: LD_INT 1
63179: PUSH
63180: EMPTY
63181: LIST
63182: LIST
63183: PUSH
63184: EMPTY
63185: LIST
63186: LIST
63187: LIST
63188: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63189: LD_ADDR_VAR 0 55
63193: PUSH
63194: LD_INT 3
63196: PUSH
63197: LD_INT 2
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 3
63206: PUSH
63207: LD_INT 3
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: PUSH
63214: LD_INT 2
63216: PUSH
63217: LD_INT 3
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: EMPTY
63225: LIST
63226: LIST
63227: LIST
63228: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63229: LD_ADDR_VAR 0 56
63233: PUSH
63234: LD_INT 1
63236: PUSH
63237: LD_INT 3
63239: PUSH
63240: EMPTY
63241: LIST
63242: LIST
63243: PUSH
63244: LD_INT 0
63246: PUSH
63247: LD_INT 3
63249: PUSH
63250: EMPTY
63251: LIST
63252: LIST
63253: PUSH
63254: LD_INT 1
63256: NEG
63257: PUSH
63258: LD_INT 2
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: EMPTY
63266: LIST
63267: LIST
63268: LIST
63269: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63270: LD_ADDR_VAR 0 57
63274: PUSH
63275: LD_INT 2
63277: NEG
63278: PUSH
63279: LD_INT 1
63281: PUSH
63282: EMPTY
63283: LIST
63284: LIST
63285: PUSH
63286: LD_INT 3
63288: NEG
63289: PUSH
63290: LD_INT 0
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: PUSH
63297: LD_INT 3
63299: NEG
63300: PUSH
63301: LD_INT 1
63303: NEG
63304: PUSH
63305: EMPTY
63306: LIST
63307: LIST
63308: PUSH
63309: EMPTY
63310: LIST
63311: LIST
63312: LIST
63313: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63314: LD_ADDR_VAR 0 58
63318: PUSH
63319: LD_INT 2
63321: NEG
63322: PUSH
63323: LD_INT 3
63325: NEG
63326: PUSH
63327: EMPTY
63328: LIST
63329: LIST
63330: PUSH
63331: LD_INT 3
63333: NEG
63334: PUSH
63335: LD_INT 2
63337: NEG
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: PUSH
63343: LD_INT 3
63345: NEG
63346: PUSH
63347: LD_INT 3
63349: NEG
63350: PUSH
63351: EMPTY
63352: LIST
63353: LIST
63354: PUSH
63355: EMPTY
63356: LIST
63357: LIST
63358: LIST
63359: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63360: LD_ADDR_VAR 0 59
63364: PUSH
63365: LD_INT 1
63367: NEG
63368: PUSH
63369: LD_INT 2
63371: NEG
63372: PUSH
63373: EMPTY
63374: LIST
63375: LIST
63376: PUSH
63377: LD_INT 0
63379: PUSH
63380: LD_INT 2
63382: NEG
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 1
63390: PUSH
63391: LD_INT 1
63393: NEG
63394: PUSH
63395: EMPTY
63396: LIST
63397: LIST
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: LIST
63403: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63404: LD_ADDR_VAR 0 60
63408: PUSH
63409: LD_INT 1
63411: PUSH
63412: LD_INT 1
63414: NEG
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PUSH
63420: LD_INT 2
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 2
63432: PUSH
63433: LD_INT 1
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63445: LD_ADDR_VAR 0 61
63449: PUSH
63450: LD_INT 2
63452: PUSH
63453: LD_INT 1
63455: PUSH
63456: EMPTY
63457: LIST
63458: LIST
63459: PUSH
63460: LD_INT 2
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: EMPTY
63467: LIST
63468: LIST
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: EMPTY
63477: LIST
63478: LIST
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: LIST
63484: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63485: LD_ADDR_VAR 0 62
63489: PUSH
63490: LD_INT 1
63492: PUSH
63493: LD_INT 2
63495: PUSH
63496: EMPTY
63497: LIST
63498: LIST
63499: PUSH
63500: LD_INT 0
63502: PUSH
63503: LD_INT 2
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 1
63512: NEG
63513: PUSH
63514: LD_INT 1
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: LIST
63525: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63526: LD_ADDR_VAR 0 63
63530: PUSH
63531: LD_INT 1
63533: NEG
63534: PUSH
63535: LD_INT 1
63537: PUSH
63538: EMPTY
63539: LIST
63540: LIST
63541: PUSH
63542: LD_INT 2
63544: NEG
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: EMPTY
63550: LIST
63551: LIST
63552: PUSH
63553: LD_INT 2
63555: NEG
63556: PUSH
63557: LD_INT 1
63559: NEG
63560: PUSH
63561: EMPTY
63562: LIST
63563: LIST
63564: PUSH
63565: EMPTY
63566: LIST
63567: LIST
63568: LIST
63569: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63570: LD_ADDR_VAR 0 64
63574: PUSH
63575: LD_INT 1
63577: NEG
63578: PUSH
63579: LD_INT 2
63581: NEG
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 2
63589: NEG
63590: PUSH
63591: LD_INT 1
63593: NEG
63594: PUSH
63595: EMPTY
63596: LIST
63597: LIST
63598: PUSH
63599: LD_INT 2
63601: NEG
63602: PUSH
63603: LD_INT 2
63605: NEG
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PUSH
63611: EMPTY
63612: LIST
63613: LIST
63614: LIST
63615: ST_TO_ADDR
// end ; 2 :
63616: GO 66882
63618: LD_INT 2
63620: DOUBLE
63621: EQUAL
63622: IFTRUE 63626
63624: GO 66881
63626: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63627: LD_ADDR_VAR 0 29
63631: PUSH
63632: LD_INT 4
63634: PUSH
63635: LD_INT 0
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: LD_INT 4
63644: PUSH
63645: LD_INT 1
63647: NEG
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 5
63655: PUSH
63656: LD_INT 0
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: LD_INT 5
63665: PUSH
63666: LD_INT 1
63668: PUSH
63669: EMPTY
63670: LIST
63671: LIST
63672: PUSH
63673: LD_INT 4
63675: PUSH
63676: LD_INT 1
63678: PUSH
63679: EMPTY
63680: LIST
63681: LIST
63682: PUSH
63683: LD_INT 3
63685: PUSH
63686: LD_INT 0
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: PUSH
63696: LD_INT 1
63698: NEG
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: PUSH
63707: LD_INT 2
63709: NEG
63710: PUSH
63711: EMPTY
63712: LIST
63713: LIST
63714: PUSH
63715: LD_INT 5
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 3
63727: PUSH
63728: LD_INT 3
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 3
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 4
63747: PUSH
63748: LD_INT 3
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 4
63757: PUSH
63758: LD_INT 4
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 3
63767: PUSH
63768: LD_INT 4
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: LD_INT 3
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 2
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 4
63797: PUSH
63798: LD_INT 2
63800: PUSH
63801: EMPTY
63802: LIST
63803: LIST
63804: PUSH
63805: LD_INT 2
63807: PUSH
63808: LD_INT 4
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 0
63817: PUSH
63818: LD_INT 4
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: PUSH
63825: LD_INT 0
63827: PUSH
63828: LD_INT 3
63830: PUSH
63831: EMPTY
63832: LIST
63833: LIST
63834: PUSH
63835: LD_INT 1
63837: PUSH
63838: LD_INT 4
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 1
63847: PUSH
63848: LD_INT 5
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 0
63857: PUSH
63858: LD_INT 5
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: PUSH
63865: LD_INT 1
63867: NEG
63868: PUSH
63869: LD_INT 4
63871: PUSH
63872: EMPTY
63873: LIST
63874: LIST
63875: PUSH
63876: LD_INT 1
63878: NEG
63879: PUSH
63880: LD_INT 3
63882: PUSH
63883: EMPTY
63884: LIST
63885: LIST
63886: PUSH
63887: LD_INT 2
63889: PUSH
63890: LD_INT 5
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: PUSH
63897: LD_INT 2
63899: NEG
63900: PUSH
63901: LD_INT 3
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: LD_INT 0
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: PUSH
63919: LD_INT 3
63921: NEG
63922: PUSH
63923: LD_INT 1
63925: NEG
63926: PUSH
63927: EMPTY
63928: LIST
63929: LIST
63930: PUSH
63931: LD_INT 2
63933: NEG
63934: PUSH
63935: LD_INT 0
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 2
63944: NEG
63945: PUSH
63946: LD_INT 1
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 3
63955: NEG
63956: PUSH
63957: LD_INT 1
63959: PUSH
63960: EMPTY
63961: LIST
63962: LIST
63963: PUSH
63964: LD_INT 4
63966: NEG
63967: PUSH
63968: LD_INT 0
63970: PUSH
63971: EMPTY
63972: LIST
63973: LIST
63974: PUSH
63975: LD_INT 4
63977: NEG
63978: PUSH
63979: LD_INT 1
63981: NEG
63982: PUSH
63983: EMPTY
63984: LIST
63985: LIST
63986: PUSH
63987: LD_INT 4
63989: NEG
63990: PUSH
63991: LD_INT 2
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: NEG
64002: PUSH
64003: LD_INT 2
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 4
64012: NEG
64013: PUSH
64014: LD_INT 4
64016: NEG
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 4
64024: NEG
64025: PUSH
64026: LD_INT 5
64028: NEG
64029: PUSH
64030: EMPTY
64031: LIST
64032: LIST
64033: PUSH
64034: LD_INT 3
64036: NEG
64037: PUSH
64038: LD_INT 4
64040: NEG
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 3
64048: NEG
64049: PUSH
64050: LD_INT 3
64052: NEG
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 4
64060: NEG
64061: PUSH
64062: LD_INT 3
64064: NEG
64065: PUSH
64066: EMPTY
64067: LIST
64068: LIST
64069: PUSH
64070: LD_INT 5
64072: NEG
64073: PUSH
64074: LD_INT 4
64076: NEG
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 5
64084: NEG
64085: PUSH
64086: LD_INT 5
64088: NEG
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: PUSH
64094: LD_INT 3
64096: NEG
64097: PUSH
64098: LD_INT 5
64100: NEG
64101: PUSH
64102: EMPTY
64103: LIST
64104: LIST
64105: PUSH
64106: LD_INT 5
64108: NEG
64109: PUSH
64110: LD_INT 3
64112: NEG
64113: PUSH
64114: EMPTY
64115: LIST
64116: LIST
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64165: LD_ADDR_VAR 0 30
64169: PUSH
64170: LD_INT 4
64172: PUSH
64173: LD_INT 4
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 4
64182: PUSH
64183: LD_INT 3
64185: PUSH
64186: EMPTY
64187: LIST
64188: LIST
64189: PUSH
64190: LD_INT 5
64192: PUSH
64193: LD_INT 4
64195: PUSH
64196: EMPTY
64197: LIST
64198: LIST
64199: PUSH
64200: LD_INT 5
64202: PUSH
64203: LD_INT 5
64205: PUSH
64206: EMPTY
64207: LIST
64208: LIST
64209: PUSH
64210: LD_INT 4
64212: PUSH
64213: LD_INT 5
64215: PUSH
64216: EMPTY
64217: LIST
64218: LIST
64219: PUSH
64220: LD_INT 3
64222: PUSH
64223: LD_INT 4
64225: PUSH
64226: EMPTY
64227: LIST
64228: LIST
64229: PUSH
64230: LD_INT 3
64232: PUSH
64233: LD_INT 3
64235: PUSH
64236: EMPTY
64237: LIST
64238: LIST
64239: PUSH
64240: LD_INT 5
64242: PUSH
64243: LD_INT 3
64245: PUSH
64246: EMPTY
64247: LIST
64248: LIST
64249: PUSH
64250: LD_INT 3
64252: PUSH
64253: LD_INT 5
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 0
64262: PUSH
64263: LD_INT 3
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: PUSH
64270: LD_INT 0
64272: PUSH
64273: LD_INT 2
64275: PUSH
64276: EMPTY
64277: LIST
64278: LIST
64279: PUSH
64280: LD_INT 1
64282: PUSH
64283: LD_INT 3
64285: PUSH
64286: EMPTY
64287: LIST
64288: LIST
64289: PUSH
64290: LD_INT 1
64292: PUSH
64293: LD_INT 4
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 0
64302: PUSH
64303: LD_INT 4
64305: PUSH
64306: EMPTY
64307: LIST
64308: LIST
64309: PUSH
64310: LD_INT 1
64312: NEG
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 1
64323: NEG
64324: PUSH
64325: LD_INT 2
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 2
64334: PUSH
64335: LD_INT 4
64337: PUSH
64338: EMPTY
64339: LIST
64340: LIST
64341: PUSH
64342: LD_INT 2
64344: NEG
64345: PUSH
64346: LD_INT 2
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 4
64355: NEG
64356: PUSH
64357: LD_INT 0
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: PUSH
64364: LD_INT 4
64366: NEG
64367: PUSH
64368: LD_INT 1
64370: NEG
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 3
64378: NEG
64379: PUSH
64380: LD_INT 0
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 3
64389: NEG
64390: PUSH
64391: LD_INT 1
64393: PUSH
64394: EMPTY
64395: LIST
64396: LIST
64397: PUSH
64398: LD_INT 4
64400: NEG
64401: PUSH
64402: LD_INT 1
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 5
64411: NEG
64412: PUSH
64413: LD_INT 0
64415: PUSH
64416: EMPTY
64417: LIST
64418: LIST
64419: PUSH
64420: LD_INT 5
64422: NEG
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: LD_INT 5
64434: NEG
64435: PUSH
64436: LD_INT 2
64438: NEG
64439: PUSH
64440: EMPTY
64441: LIST
64442: LIST
64443: PUSH
64444: LD_INT 3
64446: NEG
64447: PUSH
64448: LD_INT 2
64450: PUSH
64451: EMPTY
64452: LIST
64453: LIST
64454: PUSH
64455: LD_INT 3
64457: NEG
64458: PUSH
64459: LD_INT 3
64461: NEG
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: PUSH
64467: LD_INT 3
64469: NEG
64470: PUSH
64471: LD_INT 4
64473: NEG
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: NEG
64482: PUSH
64483: LD_INT 3
64485: NEG
64486: PUSH
64487: EMPTY
64488: LIST
64489: LIST
64490: PUSH
64491: LD_INT 2
64493: NEG
64494: PUSH
64495: LD_INT 2
64497: NEG
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 3
64505: NEG
64506: PUSH
64507: LD_INT 2
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 4
64517: NEG
64518: PUSH
64519: LD_INT 3
64521: NEG
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: LD_INT 4
64529: NEG
64530: PUSH
64531: LD_INT 4
64533: NEG
64534: PUSH
64535: EMPTY
64536: LIST
64537: LIST
64538: PUSH
64539: LD_INT 2
64541: NEG
64542: PUSH
64543: LD_INT 4
64545: NEG
64546: PUSH
64547: EMPTY
64548: LIST
64549: LIST
64550: PUSH
64551: LD_INT 4
64553: NEG
64554: PUSH
64555: LD_INT 2
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 0
64565: PUSH
64566: LD_INT 4
64568: NEG
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PUSH
64574: LD_INT 0
64576: PUSH
64577: LD_INT 5
64579: NEG
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 4
64590: NEG
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 1
64598: PUSH
64599: LD_INT 3
64601: NEG
64602: PUSH
64603: EMPTY
64604: LIST
64605: LIST
64606: PUSH
64607: LD_INT 0
64609: PUSH
64610: LD_INT 3
64612: NEG
64613: PUSH
64614: EMPTY
64615: LIST
64616: LIST
64617: PUSH
64618: LD_INT 1
64620: NEG
64621: PUSH
64622: LD_INT 4
64624: NEG
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: NEG
64633: PUSH
64634: LD_INT 5
64636: NEG
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PUSH
64642: LD_INT 2
64644: PUSH
64645: LD_INT 3
64647: NEG
64648: PUSH
64649: EMPTY
64650: LIST
64651: LIST
64652: PUSH
64653: LD_INT 2
64655: NEG
64656: PUSH
64657: LD_INT 5
64659: NEG
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: EMPTY
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: LIST
64692: LIST
64693: LIST
64694: LIST
64695: LIST
64696: LIST
64697: LIST
64698: LIST
64699: LIST
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64712: LD_ADDR_VAR 0 31
64716: PUSH
64717: LD_INT 0
64719: PUSH
64720: LD_INT 4
64722: PUSH
64723: EMPTY
64724: LIST
64725: LIST
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 3
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 1
64739: PUSH
64740: LD_INT 4
64742: PUSH
64743: EMPTY
64744: LIST
64745: LIST
64746: PUSH
64747: LD_INT 1
64749: PUSH
64750: LD_INT 5
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 5
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: NEG
64770: PUSH
64771: LD_INT 4
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 3
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 2
64791: PUSH
64792: LD_INT 5
64794: PUSH
64795: EMPTY
64796: LIST
64797: LIST
64798: PUSH
64799: LD_INT 2
64801: NEG
64802: PUSH
64803: LD_INT 3
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 3
64812: NEG
64813: PUSH
64814: LD_INT 0
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 3
64823: NEG
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: EMPTY
64830: LIST
64831: LIST
64832: PUSH
64833: LD_INT 2
64835: NEG
64836: PUSH
64837: LD_INT 0
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 2
64846: NEG
64847: PUSH
64848: LD_INT 1
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 3
64857: NEG
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 4
64868: NEG
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 4
64879: NEG
64880: PUSH
64881: LD_INT 1
64883: NEG
64884: PUSH
64885: EMPTY
64886: LIST
64887: LIST
64888: PUSH
64889: LD_INT 4
64891: NEG
64892: PUSH
64893: LD_INT 2
64895: NEG
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: PUSH
64901: LD_INT 2
64903: NEG
64904: PUSH
64905: LD_INT 2
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 4
64914: NEG
64915: PUSH
64916: LD_INT 4
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 4
64926: NEG
64927: PUSH
64928: LD_INT 5
64930: NEG
64931: PUSH
64932: EMPTY
64933: LIST
64934: LIST
64935: PUSH
64936: LD_INT 3
64938: NEG
64939: PUSH
64940: LD_INT 4
64942: NEG
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 3
64950: NEG
64951: PUSH
64952: LD_INT 3
64954: NEG
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 4
64962: NEG
64963: PUSH
64964: LD_INT 3
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 5
64974: NEG
64975: PUSH
64976: LD_INT 4
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 5
64986: NEG
64987: PUSH
64988: LD_INT 5
64990: NEG
64991: PUSH
64992: EMPTY
64993: LIST
64994: LIST
64995: PUSH
64996: LD_INT 3
64998: NEG
64999: PUSH
65000: LD_INT 5
65002: NEG
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 5
65010: NEG
65011: PUSH
65012: LD_INT 3
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 0
65022: PUSH
65023: LD_INT 3
65025: NEG
65026: PUSH
65027: EMPTY
65028: LIST
65029: LIST
65030: PUSH
65031: LD_INT 0
65033: PUSH
65034: LD_INT 4
65036: NEG
65037: PUSH
65038: EMPTY
65039: LIST
65040: LIST
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: LD_INT 3
65047: NEG
65048: PUSH
65049: EMPTY
65050: LIST
65051: LIST
65052: PUSH
65053: LD_INT 1
65055: PUSH
65056: LD_INT 2
65058: NEG
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 0
65066: PUSH
65067: LD_INT 2
65069: NEG
65070: PUSH
65071: EMPTY
65072: LIST
65073: LIST
65074: PUSH
65075: LD_INT 1
65077: NEG
65078: PUSH
65079: LD_INT 3
65081: NEG
65082: PUSH
65083: EMPTY
65084: LIST
65085: LIST
65086: PUSH
65087: LD_INT 1
65089: NEG
65090: PUSH
65091: LD_INT 4
65093: NEG
65094: PUSH
65095: EMPTY
65096: LIST
65097: LIST
65098: PUSH
65099: LD_INT 2
65101: PUSH
65102: LD_INT 2
65104: NEG
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 2
65112: NEG
65113: PUSH
65114: LD_INT 4
65116: NEG
65117: PUSH
65118: EMPTY
65119: LIST
65120: LIST
65121: PUSH
65122: LD_INT 4
65124: PUSH
65125: LD_INT 0
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: PUSH
65132: LD_INT 4
65134: PUSH
65135: LD_INT 1
65137: NEG
65138: PUSH
65139: EMPTY
65140: LIST
65141: LIST
65142: PUSH
65143: LD_INT 5
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: PUSH
65153: LD_INT 5
65155: PUSH
65156: LD_INT 1
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 4
65165: PUSH
65166: LD_INT 1
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 3
65175: PUSH
65176: LD_INT 0
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 3
65185: PUSH
65186: LD_INT 1
65188: NEG
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 3
65196: PUSH
65197: LD_INT 2
65199: NEG
65200: PUSH
65201: EMPTY
65202: LIST
65203: LIST
65204: PUSH
65205: LD_INT 5
65207: PUSH
65208: LD_INT 2
65210: PUSH
65211: EMPTY
65212: LIST
65213: LIST
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: LIST
65233: LIST
65234: LIST
65235: LIST
65236: LIST
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: LIST
65246: LIST
65247: LIST
65248: LIST
65249: LIST
65250: LIST
65251: LIST
65252: LIST
65253: LIST
65254: LIST
65255: LIST
65256: LIST
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65262: LD_ADDR_VAR 0 32
65266: PUSH
65267: LD_INT 4
65269: NEG
65270: PUSH
65271: LD_INT 0
65273: PUSH
65274: EMPTY
65275: LIST
65276: LIST
65277: PUSH
65278: LD_INT 4
65280: NEG
65281: PUSH
65282: LD_INT 1
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 3
65292: NEG
65293: PUSH
65294: LD_INT 0
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: PUSH
65301: LD_INT 3
65303: NEG
65304: PUSH
65305: LD_INT 1
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 4
65314: NEG
65315: PUSH
65316: LD_INT 1
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 5
65325: NEG
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 5
65336: NEG
65337: PUSH
65338: LD_INT 1
65340: NEG
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 5
65348: NEG
65349: PUSH
65350: LD_INT 2
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 3
65360: NEG
65361: PUSH
65362: LD_INT 2
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 3
65371: NEG
65372: PUSH
65373: LD_INT 3
65375: NEG
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 3
65383: NEG
65384: PUSH
65385: LD_INT 4
65387: NEG
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 2
65395: NEG
65396: PUSH
65397: LD_INT 3
65399: NEG
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: PUSH
65405: LD_INT 2
65407: NEG
65408: PUSH
65409: LD_INT 2
65411: NEG
65412: PUSH
65413: EMPTY
65414: LIST
65415: LIST
65416: PUSH
65417: LD_INT 3
65419: NEG
65420: PUSH
65421: LD_INT 2
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 4
65431: NEG
65432: PUSH
65433: LD_INT 3
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 4
65443: NEG
65444: PUSH
65445: LD_INT 4
65447: NEG
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: NEG
65456: PUSH
65457: LD_INT 4
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 4
65467: NEG
65468: PUSH
65469: LD_INT 2
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 0
65479: PUSH
65480: LD_INT 4
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 0
65490: PUSH
65491: LD_INT 5
65493: NEG
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 1
65501: PUSH
65502: LD_INT 4
65504: NEG
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 1
65512: PUSH
65513: LD_INT 3
65515: NEG
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 0
65523: PUSH
65524: LD_INT 3
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: LD_INT 4
65538: NEG
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: LD_INT 5
65550: NEG
65551: PUSH
65552: EMPTY
65553: LIST
65554: LIST
65555: PUSH
65556: LD_INT 2
65558: PUSH
65559: LD_INT 3
65561: NEG
65562: PUSH
65563: EMPTY
65564: LIST
65565: LIST
65566: PUSH
65567: LD_INT 2
65569: NEG
65570: PUSH
65571: LD_INT 5
65573: NEG
65574: PUSH
65575: EMPTY
65576: LIST
65577: LIST
65578: PUSH
65579: LD_INT 3
65581: PUSH
65582: LD_INT 0
65584: PUSH
65585: EMPTY
65586: LIST
65587: LIST
65588: PUSH
65589: LD_INT 3
65591: PUSH
65592: LD_INT 1
65594: NEG
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 4
65602: PUSH
65603: LD_INT 0
65605: PUSH
65606: EMPTY
65607: LIST
65608: LIST
65609: PUSH
65610: LD_INT 4
65612: PUSH
65613: LD_INT 1
65615: PUSH
65616: EMPTY
65617: LIST
65618: LIST
65619: PUSH
65620: LD_INT 3
65622: PUSH
65623: LD_INT 1
65625: PUSH
65626: EMPTY
65627: LIST
65628: LIST
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: LD_INT 0
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: LD_INT 1
65645: NEG
65646: PUSH
65647: EMPTY
65648: LIST
65649: LIST
65650: PUSH
65651: LD_INT 2
65653: PUSH
65654: LD_INT 2
65656: NEG
65657: PUSH
65658: EMPTY
65659: LIST
65660: LIST
65661: PUSH
65662: LD_INT 4
65664: PUSH
65665: LD_INT 2
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 4
65674: PUSH
65675: LD_INT 4
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 4
65684: PUSH
65685: LD_INT 3
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 5
65694: PUSH
65695: LD_INT 4
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 5
65704: PUSH
65705: LD_INT 5
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 4
65714: PUSH
65715: LD_INT 5
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 3
65724: PUSH
65725: LD_INT 4
65727: PUSH
65728: EMPTY
65729: LIST
65730: LIST
65731: PUSH
65732: LD_INT 3
65734: PUSH
65735: LD_INT 3
65737: PUSH
65738: EMPTY
65739: LIST
65740: LIST
65741: PUSH
65742: LD_INT 5
65744: PUSH
65745: LD_INT 3
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 3
65754: PUSH
65755: LD_INT 5
65757: PUSH
65758: EMPTY
65759: LIST
65760: LIST
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: LIST
65784: LIST
65785: LIST
65786: LIST
65787: LIST
65788: LIST
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: LIST
65806: LIST
65807: LIST
65808: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65809: LD_ADDR_VAR 0 33
65813: PUSH
65814: LD_INT 4
65816: NEG
65817: PUSH
65818: LD_INT 4
65820: NEG
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: PUSH
65826: LD_INT 4
65828: NEG
65829: PUSH
65830: LD_INT 5
65832: NEG
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 3
65840: NEG
65841: PUSH
65842: LD_INT 4
65844: NEG
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 3
65852: NEG
65853: PUSH
65854: LD_INT 3
65856: NEG
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 4
65864: NEG
65865: PUSH
65866: LD_INT 3
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 5
65876: NEG
65877: PUSH
65878: LD_INT 4
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 5
65888: NEG
65889: PUSH
65890: LD_INT 5
65892: NEG
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: PUSH
65898: LD_INT 3
65900: NEG
65901: PUSH
65902: LD_INT 5
65904: NEG
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 5
65912: NEG
65913: PUSH
65914: LD_INT 3
65916: NEG
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 0
65924: PUSH
65925: LD_INT 3
65927: NEG
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 0
65935: PUSH
65936: LD_INT 4
65938: NEG
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: PUSH
65944: LD_INT 1
65946: PUSH
65947: LD_INT 3
65949: NEG
65950: PUSH
65951: EMPTY
65952: LIST
65953: LIST
65954: PUSH
65955: LD_INT 1
65957: PUSH
65958: LD_INT 2
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: LD_INT 2
65971: NEG
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 1
65979: NEG
65980: PUSH
65981: LD_INT 3
65983: NEG
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 1
65991: NEG
65992: PUSH
65993: LD_INT 4
65995: NEG
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 2
66003: PUSH
66004: LD_INT 2
66006: NEG
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: LD_INT 4
66018: NEG
66019: PUSH
66020: EMPTY
66021: LIST
66022: LIST
66023: PUSH
66024: LD_INT 4
66026: PUSH
66027: LD_INT 0
66029: PUSH
66030: EMPTY
66031: LIST
66032: LIST
66033: PUSH
66034: LD_INT 4
66036: PUSH
66037: LD_INT 1
66039: NEG
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 5
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 5
66057: PUSH
66058: LD_INT 1
66060: PUSH
66061: EMPTY
66062: LIST
66063: LIST
66064: PUSH
66065: LD_INT 4
66067: PUSH
66068: LD_INT 1
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 3
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: EMPTY
66082: LIST
66083: LIST
66084: PUSH
66085: LD_INT 3
66087: PUSH
66088: LD_INT 1
66090: NEG
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 3
66098: PUSH
66099: LD_INT 2
66101: NEG
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 5
66109: PUSH
66110: LD_INT 2
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: LD_INT 3
66119: PUSH
66120: LD_INT 3
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 3
66129: PUSH
66130: LD_INT 2
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 4
66139: PUSH
66140: LD_INT 3
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 4
66149: PUSH
66150: LD_INT 4
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 3
66159: PUSH
66160: LD_INT 4
66162: PUSH
66163: EMPTY
66164: LIST
66165: LIST
66166: PUSH
66167: LD_INT 2
66169: PUSH
66170: LD_INT 3
66172: PUSH
66173: EMPTY
66174: LIST
66175: LIST
66176: PUSH
66177: LD_INT 2
66179: PUSH
66180: LD_INT 2
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: PUSH
66187: LD_INT 4
66189: PUSH
66190: LD_INT 2
66192: PUSH
66193: EMPTY
66194: LIST
66195: LIST
66196: PUSH
66197: LD_INT 2
66199: PUSH
66200: LD_INT 4
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 4
66212: PUSH
66213: EMPTY
66214: LIST
66215: LIST
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: LD_INT 3
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: LD_INT 4
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: LD_INT 5
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: LD_INT 5
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: LD_INT 4
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: LD_INT 3
66274: PUSH
66275: EMPTY
66276: LIST
66277: LIST
66278: PUSH
66279: LD_INT 2
66281: PUSH
66282: LD_INT 5
66284: PUSH
66285: EMPTY
66286: LIST
66287: LIST
66288: PUSH
66289: LD_INT 2
66291: NEG
66292: PUSH
66293: LD_INT 3
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: LIST
66304: LIST
66305: LIST
66306: LIST
66307: LIST
66308: LIST
66309: LIST
66310: LIST
66311: LIST
66312: LIST
66313: LIST
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66347: LD_ADDR_VAR 0 34
66351: PUSH
66352: LD_INT 0
66354: PUSH
66355: LD_INT 4
66357: NEG
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: PUSH
66363: LD_INT 0
66365: PUSH
66366: LD_INT 5
66368: NEG
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 4
66379: NEG
66380: PUSH
66381: EMPTY
66382: LIST
66383: LIST
66384: PUSH
66385: LD_INT 1
66387: PUSH
66388: LD_INT 3
66390: NEG
66391: PUSH
66392: EMPTY
66393: LIST
66394: LIST
66395: PUSH
66396: LD_INT 0
66398: PUSH
66399: LD_INT 3
66401: NEG
66402: PUSH
66403: EMPTY
66404: LIST
66405: LIST
66406: PUSH
66407: LD_INT 1
66409: NEG
66410: PUSH
66411: LD_INT 4
66413: NEG
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 5
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 2
66433: PUSH
66434: LD_INT 3
66436: NEG
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 2
66444: NEG
66445: PUSH
66446: LD_INT 5
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 3
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 3
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 4
66477: PUSH
66478: LD_INT 0
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 4
66487: PUSH
66488: LD_INT 1
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 3
66497: PUSH
66498: LD_INT 1
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 2
66507: PUSH
66508: LD_INT 0
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 2
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: PUSH
66529: LD_INT 2
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 4
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: EMPTY
66544: LIST
66545: LIST
66546: PUSH
66547: LD_INT 4
66549: PUSH
66550: LD_INT 4
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: PUSH
66557: LD_INT 4
66559: PUSH
66560: LD_INT 3
66562: PUSH
66563: EMPTY
66564: LIST
66565: LIST
66566: PUSH
66567: LD_INT 5
66569: PUSH
66570: LD_INT 4
66572: PUSH
66573: EMPTY
66574: LIST
66575: LIST
66576: PUSH
66577: LD_INT 5
66579: PUSH
66580: LD_INT 5
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 4
66589: PUSH
66590: LD_INT 5
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 3
66599: PUSH
66600: LD_INT 4
66602: PUSH
66603: EMPTY
66604: LIST
66605: LIST
66606: PUSH
66607: LD_INT 3
66609: PUSH
66610: LD_INT 3
66612: PUSH
66613: EMPTY
66614: LIST
66615: LIST
66616: PUSH
66617: LD_INT 5
66619: PUSH
66620: LD_INT 3
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 3
66629: PUSH
66630: LD_INT 5
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 0
66639: PUSH
66640: LD_INT 3
66642: PUSH
66643: EMPTY
66644: LIST
66645: LIST
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: LD_INT 2
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: PUSH
66660: LD_INT 3
66662: PUSH
66663: EMPTY
66664: LIST
66665: LIST
66666: PUSH
66667: LD_INT 1
66669: PUSH
66670: LD_INT 4
66672: PUSH
66673: EMPTY
66674: LIST
66675: LIST
66676: PUSH
66677: LD_INT 0
66679: PUSH
66680: LD_INT 4
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: LD_INT 3
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: LD_INT 2
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 2
66711: PUSH
66712: LD_INT 4
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 2
66721: NEG
66722: PUSH
66723: LD_INT 2
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 4
66732: NEG
66733: PUSH
66734: LD_INT 0
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 4
66743: NEG
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: PUSH
66753: LD_INT 3
66755: NEG
66756: PUSH
66757: LD_INT 0
66759: PUSH
66760: EMPTY
66761: LIST
66762: LIST
66763: PUSH
66764: LD_INT 3
66766: NEG
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: PUSH
66775: LD_INT 4
66777: NEG
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: EMPTY
66783: LIST
66784: LIST
66785: PUSH
66786: LD_INT 5
66788: NEG
66789: PUSH
66790: LD_INT 0
66792: PUSH
66793: EMPTY
66794: LIST
66795: LIST
66796: PUSH
66797: LD_INT 5
66799: NEG
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 5
66811: NEG
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 3
66823: NEG
66824: PUSH
66825: LD_INT 2
66827: PUSH
66828: EMPTY
66829: LIST
66830: LIST
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: LIST
66869: LIST
66870: LIST
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: ST_TO_ADDR
// end ; end ;
66879: GO 66882
66881: POP
// case btype of b_depot , b_warehouse :
66882: LD_VAR 0 1
66886: PUSH
66887: LD_INT 0
66889: DOUBLE
66890: EQUAL
66891: IFTRUE 66901
66893: LD_INT 1
66895: DOUBLE
66896: EQUAL
66897: IFTRUE 66901
66899: GO 67102
66901: POP
// case nation of nation_american :
66902: LD_VAR 0 5
66906: PUSH
66907: LD_INT 1
66909: DOUBLE
66910: EQUAL
66911: IFTRUE 66915
66913: GO 66971
66915: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66916: LD_ADDR_VAR 0 9
66920: PUSH
66921: LD_VAR 0 11
66925: PUSH
66926: LD_VAR 0 12
66930: PUSH
66931: LD_VAR 0 13
66935: PUSH
66936: LD_VAR 0 14
66940: PUSH
66941: LD_VAR 0 15
66945: PUSH
66946: LD_VAR 0 16
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: LIST
66957: LIST
66958: PUSH
66959: LD_VAR 0 4
66963: PUSH
66964: LD_INT 1
66966: PLUS
66967: ARRAY
66968: ST_TO_ADDR
66969: GO 67100
66971: LD_INT 2
66973: DOUBLE
66974: EQUAL
66975: IFTRUE 66979
66977: GO 67035
66979: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66980: LD_ADDR_VAR 0 9
66984: PUSH
66985: LD_VAR 0 17
66989: PUSH
66990: LD_VAR 0 18
66994: PUSH
66995: LD_VAR 0 19
66999: PUSH
67000: LD_VAR 0 20
67004: PUSH
67005: LD_VAR 0 21
67009: PUSH
67010: LD_VAR 0 22
67014: PUSH
67015: EMPTY
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: LIST
67022: PUSH
67023: LD_VAR 0 4
67027: PUSH
67028: LD_INT 1
67030: PLUS
67031: ARRAY
67032: ST_TO_ADDR
67033: GO 67100
67035: LD_INT 3
67037: DOUBLE
67038: EQUAL
67039: IFTRUE 67043
67041: GO 67099
67043: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
67044: LD_ADDR_VAR 0 9
67048: PUSH
67049: LD_VAR 0 23
67053: PUSH
67054: LD_VAR 0 24
67058: PUSH
67059: LD_VAR 0 25
67063: PUSH
67064: LD_VAR 0 26
67068: PUSH
67069: LD_VAR 0 27
67073: PUSH
67074: LD_VAR 0 28
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: PUSH
67087: LD_VAR 0 4
67091: PUSH
67092: LD_INT 1
67094: PLUS
67095: ARRAY
67096: ST_TO_ADDR
67097: GO 67100
67099: POP
67100: GO 67655
67102: LD_INT 2
67104: DOUBLE
67105: EQUAL
67106: IFTRUE 67116
67108: LD_INT 3
67110: DOUBLE
67111: EQUAL
67112: IFTRUE 67116
67114: GO 67172
67116: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
67117: LD_ADDR_VAR 0 9
67121: PUSH
67122: LD_VAR 0 29
67126: PUSH
67127: LD_VAR 0 30
67131: PUSH
67132: LD_VAR 0 31
67136: PUSH
67137: LD_VAR 0 32
67141: PUSH
67142: LD_VAR 0 33
67146: PUSH
67147: LD_VAR 0 34
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: PUSH
67160: LD_VAR 0 4
67164: PUSH
67165: LD_INT 1
67167: PLUS
67168: ARRAY
67169: ST_TO_ADDR
67170: GO 67655
67172: LD_INT 16
67174: DOUBLE
67175: EQUAL
67176: IFTRUE 67234
67178: LD_INT 17
67180: DOUBLE
67181: EQUAL
67182: IFTRUE 67234
67184: LD_INT 18
67186: DOUBLE
67187: EQUAL
67188: IFTRUE 67234
67190: LD_INT 19
67192: DOUBLE
67193: EQUAL
67194: IFTRUE 67234
67196: LD_INT 22
67198: DOUBLE
67199: EQUAL
67200: IFTRUE 67234
67202: LD_INT 20
67204: DOUBLE
67205: EQUAL
67206: IFTRUE 67234
67208: LD_INT 21
67210: DOUBLE
67211: EQUAL
67212: IFTRUE 67234
67214: LD_INT 23
67216: DOUBLE
67217: EQUAL
67218: IFTRUE 67234
67220: LD_INT 24
67222: DOUBLE
67223: EQUAL
67224: IFTRUE 67234
67226: LD_INT 25
67228: DOUBLE
67229: EQUAL
67230: IFTRUE 67234
67232: GO 67290
67234: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67235: LD_ADDR_VAR 0 9
67239: PUSH
67240: LD_VAR 0 35
67244: PUSH
67245: LD_VAR 0 36
67249: PUSH
67250: LD_VAR 0 37
67254: PUSH
67255: LD_VAR 0 38
67259: PUSH
67260: LD_VAR 0 39
67264: PUSH
67265: LD_VAR 0 40
67269: PUSH
67270: EMPTY
67271: LIST
67272: LIST
67273: LIST
67274: LIST
67275: LIST
67276: LIST
67277: PUSH
67278: LD_VAR 0 4
67282: PUSH
67283: LD_INT 1
67285: PLUS
67286: ARRAY
67287: ST_TO_ADDR
67288: GO 67655
67290: LD_INT 6
67292: DOUBLE
67293: EQUAL
67294: IFTRUE 67346
67296: LD_INT 7
67298: DOUBLE
67299: EQUAL
67300: IFTRUE 67346
67302: LD_INT 8
67304: DOUBLE
67305: EQUAL
67306: IFTRUE 67346
67308: LD_INT 13
67310: DOUBLE
67311: EQUAL
67312: IFTRUE 67346
67314: LD_INT 12
67316: DOUBLE
67317: EQUAL
67318: IFTRUE 67346
67320: LD_INT 15
67322: DOUBLE
67323: EQUAL
67324: IFTRUE 67346
67326: LD_INT 11
67328: DOUBLE
67329: EQUAL
67330: IFTRUE 67346
67332: LD_INT 14
67334: DOUBLE
67335: EQUAL
67336: IFTRUE 67346
67338: LD_INT 10
67340: DOUBLE
67341: EQUAL
67342: IFTRUE 67346
67344: GO 67402
67346: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67347: LD_ADDR_VAR 0 9
67351: PUSH
67352: LD_VAR 0 41
67356: PUSH
67357: LD_VAR 0 42
67361: PUSH
67362: LD_VAR 0 43
67366: PUSH
67367: LD_VAR 0 44
67371: PUSH
67372: LD_VAR 0 45
67376: PUSH
67377: LD_VAR 0 46
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: LIST
67386: LIST
67387: LIST
67388: LIST
67389: PUSH
67390: LD_VAR 0 4
67394: PUSH
67395: LD_INT 1
67397: PLUS
67398: ARRAY
67399: ST_TO_ADDR
67400: GO 67655
67402: LD_INT 36
67404: DOUBLE
67405: EQUAL
67406: IFTRUE 67410
67408: GO 67466
67410: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67411: LD_ADDR_VAR 0 9
67415: PUSH
67416: LD_VAR 0 47
67420: PUSH
67421: LD_VAR 0 48
67425: PUSH
67426: LD_VAR 0 49
67430: PUSH
67431: LD_VAR 0 50
67435: PUSH
67436: LD_VAR 0 51
67440: PUSH
67441: LD_VAR 0 52
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: PUSH
67454: LD_VAR 0 4
67458: PUSH
67459: LD_INT 1
67461: PLUS
67462: ARRAY
67463: ST_TO_ADDR
67464: GO 67655
67466: LD_INT 4
67468: DOUBLE
67469: EQUAL
67470: IFTRUE 67492
67472: LD_INT 5
67474: DOUBLE
67475: EQUAL
67476: IFTRUE 67492
67478: LD_INT 34
67480: DOUBLE
67481: EQUAL
67482: IFTRUE 67492
67484: LD_INT 37
67486: DOUBLE
67487: EQUAL
67488: IFTRUE 67492
67490: GO 67548
67492: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67493: LD_ADDR_VAR 0 9
67497: PUSH
67498: LD_VAR 0 53
67502: PUSH
67503: LD_VAR 0 54
67507: PUSH
67508: LD_VAR 0 55
67512: PUSH
67513: LD_VAR 0 56
67517: PUSH
67518: LD_VAR 0 57
67522: PUSH
67523: LD_VAR 0 58
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: PUSH
67536: LD_VAR 0 4
67540: PUSH
67541: LD_INT 1
67543: PLUS
67544: ARRAY
67545: ST_TO_ADDR
67546: GO 67655
67548: LD_INT 31
67550: DOUBLE
67551: EQUAL
67552: IFTRUE 67598
67554: LD_INT 32
67556: DOUBLE
67557: EQUAL
67558: IFTRUE 67598
67560: LD_INT 33
67562: DOUBLE
67563: EQUAL
67564: IFTRUE 67598
67566: LD_INT 27
67568: DOUBLE
67569: EQUAL
67570: IFTRUE 67598
67572: LD_INT 26
67574: DOUBLE
67575: EQUAL
67576: IFTRUE 67598
67578: LD_INT 28
67580: DOUBLE
67581: EQUAL
67582: IFTRUE 67598
67584: LD_INT 29
67586: DOUBLE
67587: EQUAL
67588: IFTRUE 67598
67590: LD_INT 30
67592: DOUBLE
67593: EQUAL
67594: IFTRUE 67598
67596: GO 67654
67598: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67599: LD_ADDR_VAR 0 9
67603: PUSH
67604: LD_VAR 0 59
67608: PUSH
67609: LD_VAR 0 60
67613: PUSH
67614: LD_VAR 0 61
67618: PUSH
67619: LD_VAR 0 62
67623: PUSH
67624: LD_VAR 0 63
67628: PUSH
67629: LD_VAR 0 64
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: PUSH
67642: LD_VAR 0 4
67646: PUSH
67647: LD_INT 1
67649: PLUS
67650: ARRAY
67651: ST_TO_ADDR
67652: GO 67655
67654: POP
// temp_list2 = [ ] ;
67655: LD_ADDR_VAR 0 10
67659: PUSH
67660: EMPTY
67661: ST_TO_ADDR
// for i in temp_list do
67662: LD_ADDR_VAR 0 8
67666: PUSH
67667: LD_VAR 0 9
67671: PUSH
67672: FOR_IN
67673: IFFALSE 67725
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67675: LD_ADDR_VAR 0 10
67679: PUSH
67680: LD_VAR 0 10
67684: PUSH
67685: LD_VAR 0 8
67689: PUSH
67690: LD_INT 1
67692: ARRAY
67693: PUSH
67694: LD_VAR 0 2
67698: PLUS
67699: PUSH
67700: LD_VAR 0 8
67704: PUSH
67705: LD_INT 2
67707: ARRAY
67708: PUSH
67709: LD_VAR 0 3
67713: PLUS
67714: PUSH
67715: EMPTY
67716: LIST
67717: LIST
67718: PUSH
67719: EMPTY
67720: LIST
67721: ADD
67722: ST_TO_ADDR
67723: GO 67672
67725: POP
67726: POP
// result = temp_list2 ;
67727: LD_ADDR_VAR 0 7
67731: PUSH
67732: LD_VAR 0 10
67736: ST_TO_ADDR
// end ;
67737: LD_VAR 0 7
67741: RET
// export function EnemyInRange ( unit , dist ) ; begin
67742: LD_INT 0
67744: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67745: LD_ADDR_VAR 0 3
67749: PUSH
67750: LD_VAR 0 1
67754: PPUSH
67755: CALL_OW 255
67759: PPUSH
67760: LD_VAR 0 1
67764: PPUSH
67765: CALL_OW 250
67769: PPUSH
67770: LD_VAR 0 1
67774: PPUSH
67775: CALL_OW 251
67779: PPUSH
67780: LD_VAR 0 2
67784: PPUSH
67785: CALL 41144 0 4
67789: PUSH
67790: LD_INT 4
67792: ARRAY
67793: ST_TO_ADDR
// end ;
67794: LD_VAR 0 3
67798: RET
// export function PlayerSeeMe ( unit ) ; begin
67799: LD_INT 0
67801: PPUSH
// result := See ( your_side , unit ) ;
67802: LD_ADDR_VAR 0 2
67806: PUSH
67807: LD_OWVAR 2
67811: PPUSH
67812: LD_VAR 0 1
67816: PPUSH
67817: CALL_OW 292
67821: ST_TO_ADDR
// end ;
67822: LD_VAR 0 2
67826: RET
// export function ReverseDir ( unit ) ; begin
67827: LD_INT 0
67829: PPUSH
// if not unit then
67830: LD_VAR 0 1
67834: NOT
67835: IFFALSE 67839
// exit ;
67837: GO 67862
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67839: LD_ADDR_VAR 0 2
67843: PUSH
67844: LD_VAR 0 1
67848: PPUSH
67849: CALL_OW 254
67853: PUSH
67854: LD_INT 3
67856: PLUS
67857: PUSH
67858: LD_INT 6
67860: MOD
67861: ST_TO_ADDR
// end ;
67862: LD_VAR 0 2
67866: RET
// export function ReverseArray ( array ) ; var i ; begin
67867: LD_INT 0
67869: PPUSH
67870: PPUSH
// if not array then
67871: LD_VAR 0 1
67875: NOT
67876: IFFALSE 67880
// exit ;
67878: GO 67935
// result := [ ] ;
67880: LD_ADDR_VAR 0 2
67884: PUSH
67885: EMPTY
67886: ST_TO_ADDR
// for i := array downto 1 do
67887: LD_ADDR_VAR 0 3
67891: PUSH
67892: DOUBLE
67893: LD_VAR 0 1
67897: INC
67898: ST_TO_ADDR
67899: LD_INT 1
67901: PUSH
67902: FOR_DOWNTO
67903: IFFALSE 67933
// result := Join ( result , array [ i ] ) ;
67905: LD_ADDR_VAR 0 2
67909: PUSH
67910: LD_VAR 0 2
67914: PPUSH
67915: LD_VAR 0 1
67919: PUSH
67920: LD_VAR 0 3
67924: ARRAY
67925: PPUSH
67926: CALL 72579 0 2
67930: ST_TO_ADDR
67931: GO 67902
67933: POP
67934: POP
// end ;
67935: LD_VAR 0 2
67939: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67940: LD_INT 0
67942: PPUSH
67943: PPUSH
67944: PPUSH
67945: PPUSH
67946: PPUSH
67947: PPUSH
// if not unit or not hexes then
67948: LD_VAR 0 1
67952: NOT
67953: PUSH
67954: LD_VAR 0 2
67958: NOT
67959: OR
67960: IFFALSE 67964
// exit ;
67962: GO 68087
// dist := 9999 ;
67964: LD_ADDR_VAR 0 5
67968: PUSH
67969: LD_INT 9999
67971: ST_TO_ADDR
// for i = 1 to hexes do
67972: LD_ADDR_VAR 0 4
67976: PUSH
67977: DOUBLE
67978: LD_INT 1
67980: DEC
67981: ST_TO_ADDR
67982: LD_VAR 0 2
67986: PUSH
67987: FOR_TO
67988: IFFALSE 68075
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67990: LD_ADDR_VAR 0 6
67994: PUSH
67995: LD_VAR 0 1
67999: PPUSH
68000: LD_VAR 0 2
68004: PUSH
68005: LD_VAR 0 4
68009: ARRAY
68010: PUSH
68011: LD_INT 1
68013: ARRAY
68014: PPUSH
68015: LD_VAR 0 2
68019: PUSH
68020: LD_VAR 0 4
68024: ARRAY
68025: PUSH
68026: LD_INT 2
68028: ARRAY
68029: PPUSH
68030: CALL_OW 297
68034: ST_TO_ADDR
// if tdist < dist then
68035: LD_VAR 0 6
68039: PUSH
68040: LD_VAR 0 5
68044: LESS
68045: IFFALSE 68073
// begin hex := hexes [ i ] ;
68047: LD_ADDR_VAR 0 8
68051: PUSH
68052: LD_VAR 0 2
68056: PUSH
68057: LD_VAR 0 4
68061: ARRAY
68062: ST_TO_ADDR
// dist := tdist ;
68063: LD_ADDR_VAR 0 5
68067: PUSH
68068: LD_VAR 0 6
68072: ST_TO_ADDR
// end ; end ;
68073: GO 67987
68075: POP
68076: POP
// result := hex ;
68077: LD_ADDR_VAR 0 3
68081: PUSH
68082: LD_VAR 0 8
68086: ST_TO_ADDR
// end ;
68087: LD_VAR 0 3
68091: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
68092: LD_INT 0
68094: PPUSH
68095: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
68096: LD_VAR 0 1
68100: NOT
68101: PUSH
68102: LD_VAR 0 1
68106: PUSH
68107: LD_INT 21
68109: PUSH
68110: LD_INT 2
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 23
68119: PUSH
68120: LD_INT 2
68122: PUSH
68123: EMPTY
68124: LIST
68125: LIST
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PPUSH
68131: CALL_OW 69
68135: IN
68136: NOT
68137: OR
68138: IFFALSE 68142
// exit ;
68140: GO 68189
// for i = 1 to 3 do
68142: LD_ADDR_VAR 0 3
68146: PUSH
68147: DOUBLE
68148: LD_INT 1
68150: DEC
68151: ST_TO_ADDR
68152: LD_INT 3
68154: PUSH
68155: FOR_TO
68156: IFFALSE 68187
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68158: LD_VAR 0 1
68162: PPUSH
68163: CALL_OW 250
68167: PPUSH
68168: LD_VAR 0 1
68172: PPUSH
68173: CALL_OW 251
68177: PPUSH
68178: LD_INT 1
68180: PPUSH
68181: CALL_OW 453
68185: GO 68155
68187: POP
68188: POP
// end ;
68189: LD_VAR 0 2
68193: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68194: LD_INT 0
68196: PPUSH
68197: PPUSH
68198: PPUSH
68199: PPUSH
68200: PPUSH
68201: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68202: LD_VAR 0 1
68206: NOT
68207: PUSH
68208: LD_VAR 0 2
68212: NOT
68213: OR
68214: PUSH
68215: LD_VAR 0 1
68219: PPUSH
68220: CALL_OW 314
68224: OR
68225: IFFALSE 68229
// exit ;
68227: GO 68696
// if GetLives ( i ) < 250 then
68229: LD_VAR 0 4
68233: PPUSH
68234: CALL_OW 256
68238: PUSH
68239: LD_INT 250
68241: LESS
68242: IFFALSE 68255
// begin ComAutodestruct ( i ) ;
68244: LD_VAR 0 4
68248: PPUSH
68249: CALL 68092 0 1
// exit ;
68253: GO 68696
// end ; x := GetX ( enemy_unit ) ;
68255: LD_ADDR_VAR 0 7
68259: PUSH
68260: LD_VAR 0 2
68264: PPUSH
68265: CALL_OW 250
68269: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68270: LD_ADDR_VAR 0 8
68274: PUSH
68275: LD_VAR 0 2
68279: PPUSH
68280: CALL_OW 251
68284: ST_TO_ADDR
// if not x or not y then
68285: LD_VAR 0 7
68289: NOT
68290: PUSH
68291: LD_VAR 0 8
68295: NOT
68296: OR
68297: IFFALSE 68301
// exit ;
68299: GO 68696
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68301: LD_ADDR_VAR 0 6
68305: PUSH
68306: LD_VAR 0 7
68310: PPUSH
68311: LD_INT 0
68313: PPUSH
68314: LD_INT 4
68316: PPUSH
68317: CALL_OW 272
68321: PUSH
68322: LD_VAR 0 8
68326: PPUSH
68327: LD_INT 0
68329: PPUSH
68330: LD_INT 4
68332: PPUSH
68333: CALL_OW 273
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_VAR 0 7
68346: PPUSH
68347: LD_INT 1
68349: PPUSH
68350: LD_INT 4
68352: PPUSH
68353: CALL_OW 272
68357: PUSH
68358: LD_VAR 0 8
68362: PPUSH
68363: LD_INT 1
68365: PPUSH
68366: LD_INT 4
68368: PPUSH
68369: CALL_OW 273
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_VAR 0 7
68382: PPUSH
68383: LD_INT 2
68385: PPUSH
68386: LD_INT 4
68388: PPUSH
68389: CALL_OW 272
68393: PUSH
68394: LD_VAR 0 8
68398: PPUSH
68399: LD_INT 2
68401: PPUSH
68402: LD_INT 4
68404: PPUSH
68405: CALL_OW 273
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_VAR 0 7
68418: PPUSH
68419: LD_INT 3
68421: PPUSH
68422: LD_INT 4
68424: PPUSH
68425: CALL_OW 272
68429: PUSH
68430: LD_VAR 0 8
68434: PPUSH
68435: LD_INT 3
68437: PPUSH
68438: LD_INT 4
68440: PPUSH
68441: CALL_OW 273
68445: PUSH
68446: EMPTY
68447: LIST
68448: LIST
68449: PUSH
68450: LD_VAR 0 7
68454: PPUSH
68455: LD_INT 4
68457: PPUSH
68458: LD_INT 4
68460: PPUSH
68461: CALL_OW 272
68465: PUSH
68466: LD_VAR 0 8
68470: PPUSH
68471: LD_INT 4
68473: PPUSH
68474: LD_INT 4
68476: PPUSH
68477: CALL_OW 273
68481: PUSH
68482: EMPTY
68483: LIST
68484: LIST
68485: PUSH
68486: LD_VAR 0 7
68490: PPUSH
68491: LD_INT 5
68493: PPUSH
68494: LD_INT 4
68496: PPUSH
68497: CALL_OW 272
68501: PUSH
68502: LD_VAR 0 8
68506: PPUSH
68507: LD_INT 5
68509: PPUSH
68510: LD_INT 4
68512: PPUSH
68513: CALL_OW 273
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: ST_TO_ADDR
// for i = tmp downto 1 do
68530: LD_ADDR_VAR 0 4
68534: PUSH
68535: DOUBLE
68536: LD_VAR 0 6
68540: INC
68541: ST_TO_ADDR
68542: LD_INT 1
68544: PUSH
68545: FOR_DOWNTO
68546: IFFALSE 68647
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68548: LD_VAR 0 6
68552: PUSH
68553: LD_VAR 0 4
68557: ARRAY
68558: PUSH
68559: LD_INT 1
68561: ARRAY
68562: PPUSH
68563: LD_VAR 0 6
68567: PUSH
68568: LD_VAR 0 4
68572: ARRAY
68573: PUSH
68574: LD_INT 2
68576: ARRAY
68577: PPUSH
68578: CALL_OW 488
68582: NOT
68583: PUSH
68584: LD_VAR 0 6
68588: PUSH
68589: LD_VAR 0 4
68593: ARRAY
68594: PUSH
68595: LD_INT 1
68597: ARRAY
68598: PPUSH
68599: LD_VAR 0 6
68603: PUSH
68604: LD_VAR 0 4
68608: ARRAY
68609: PUSH
68610: LD_INT 2
68612: ARRAY
68613: PPUSH
68614: CALL_OW 428
68618: PUSH
68619: LD_INT 0
68621: NONEQUAL
68622: OR
68623: IFFALSE 68645
// tmp := Delete ( tmp , i ) ;
68625: LD_ADDR_VAR 0 6
68629: PUSH
68630: LD_VAR 0 6
68634: PPUSH
68635: LD_VAR 0 4
68639: PPUSH
68640: CALL_OW 3
68644: ST_TO_ADDR
68645: GO 68545
68647: POP
68648: POP
// j := GetClosestHex ( unit , tmp ) ;
68649: LD_ADDR_VAR 0 5
68653: PUSH
68654: LD_VAR 0 1
68658: PPUSH
68659: LD_VAR 0 6
68663: PPUSH
68664: CALL 67940 0 2
68668: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68669: LD_VAR 0 1
68673: PPUSH
68674: LD_VAR 0 5
68678: PUSH
68679: LD_INT 1
68681: ARRAY
68682: PPUSH
68683: LD_VAR 0 5
68687: PUSH
68688: LD_INT 2
68690: ARRAY
68691: PPUSH
68692: CALL_OW 111
// end ;
68696: LD_VAR 0 3
68700: RET
// export function PrepareApemanSoldier ( ) ; begin
68701: LD_INT 0
68703: PPUSH
// uc_nation := 0 ;
68704: LD_ADDR_OWVAR 21
68708: PUSH
68709: LD_INT 0
68711: ST_TO_ADDR
// hc_sex := sex_male ;
68712: LD_ADDR_OWVAR 27
68716: PUSH
68717: LD_INT 1
68719: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68720: LD_ADDR_OWVAR 28
68724: PUSH
68725: LD_INT 15
68727: ST_TO_ADDR
// hc_gallery :=  ;
68728: LD_ADDR_OWVAR 33
68732: PUSH
68733: LD_STRING 
68735: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68736: LD_ADDR_OWVAR 31
68740: PUSH
68741: LD_INT 0
68743: PPUSH
68744: LD_INT 3
68746: PPUSH
68747: CALL_OW 12
68751: PUSH
68752: LD_INT 0
68754: PPUSH
68755: LD_INT 3
68757: PPUSH
68758: CALL_OW 12
68762: PUSH
68763: LD_INT 0
68765: PUSH
68766: LD_INT 0
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: ST_TO_ADDR
// end ;
68775: LD_VAR 0 1
68779: RET
// export function PrepareApemanEngineer ( ) ; begin
68780: LD_INT 0
68782: PPUSH
// uc_nation := 0 ;
68783: LD_ADDR_OWVAR 21
68787: PUSH
68788: LD_INT 0
68790: ST_TO_ADDR
// hc_sex := sex_male ;
68791: LD_ADDR_OWVAR 27
68795: PUSH
68796: LD_INT 1
68798: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68799: LD_ADDR_OWVAR 28
68803: PUSH
68804: LD_INT 16
68806: ST_TO_ADDR
// hc_gallery :=  ;
68807: LD_ADDR_OWVAR 33
68811: PUSH
68812: LD_STRING 
68814: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68815: LD_ADDR_OWVAR 31
68819: PUSH
68820: LD_INT 0
68822: PPUSH
68823: LD_INT 3
68825: PPUSH
68826: CALL_OW 12
68830: PUSH
68831: LD_INT 0
68833: PPUSH
68834: LD_INT 3
68836: PPUSH
68837: CALL_OW 12
68841: PUSH
68842: LD_INT 0
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: ST_TO_ADDR
// end ;
68854: LD_VAR 0 1
68858: RET
// export function PrepareApeman ( agressivity ) ; begin
68859: LD_INT 0
68861: PPUSH
// uc_side := 0 ;
68862: LD_ADDR_OWVAR 20
68866: PUSH
68867: LD_INT 0
68869: ST_TO_ADDR
// uc_nation := 0 ;
68870: LD_ADDR_OWVAR 21
68874: PUSH
68875: LD_INT 0
68877: ST_TO_ADDR
// hc_sex := sex_male ;
68878: LD_ADDR_OWVAR 27
68882: PUSH
68883: LD_INT 1
68885: ST_TO_ADDR
// hc_class := class_apeman ;
68886: LD_ADDR_OWVAR 28
68890: PUSH
68891: LD_INT 12
68893: ST_TO_ADDR
// hc_gallery :=  ;
68894: LD_ADDR_OWVAR 33
68898: PUSH
68899: LD_STRING 
68901: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68902: LD_ADDR_OWVAR 35
68906: PUSH
68907: LD_VAR 0 1
68911: NEG
68912: PPUSH
68913: LD_VAR 0 1
68917: PPUSH
68918: CALL_OW 12
68922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68923: LD_ADDR_OWVAR 31
68927: PUSH
68928: LD_INT 0
68930: PPUSH
68931: LD_INT 3
68933: PPUSH
68934: CALL_OW 12
68938: PUSH
68939: LD_INT 0
68941: PPUSH
68942: LD_INT 3
68944: PPUSH
68945: CALL_OW 12
68949: PUSH
68950: LD_INT 0
68952: PUSH
68953: LD_INT 0
68955: PUSH
68956: EMPTY
68957: LIST
68958: LIST
68959: LIST
68960: LIST
68961: ST_TO_ADDR
// end ;
68962: LD_VAR 0 2
68966: RET
// export function PrepareTiger ( agressivity ) ; begin
68967: LD_INT 0
68969: PPUSH
// uc_side := 0 ;
68970: LD_ADDR_OWVAR 20
68974: PUSH
68975: LD_INT 0
68977: ST_TO_ADDR
// uc_nation := 0 ;
68978: LD_ADDR_OWVAR 21
68982: PUSH
68983: LD_INT 0
68985: ST_TO_ADDR
// hc_class := class_tiger ;
68986: LD_ADDR_OWVAR 28
68990: PUSH
68991: LD_INT 14
68993: ST_TO_ADDR
// hc_gallery :=  ;
68994: LD_ADDR_OWVAR 33
68998: PUSH
68999: LD_STRING 
69001: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
69002: LD_ADDR_OWVAR 35
69006: PUSH
69007: LD_VAR 0 1
69011: NEG
69012: PPUSH
69013: LD_VAR 0 1
69017: PPUSH
69018: CALL_OW 12
69022: ST_TO_ADDR
// end ;
69023: LD_VAR 0 2
69027: RET
// export function PrepareEnchidna ( ) ; begin
69028: LD_INT 0
69030: PPUSH
// uc_side := 0 ;
69031: LD_ADDR_OWVAR 20
69035: PUSH
69036: LD_INT 0
69038: ST_TO_ADDR
// uc_nation := 0 ;
69039: LD_ADDR_OWVAR 21
69043: PUSH
69044: LD_INT 0
69046: ST_TO_ADDR
// hc_class := class_baggie ;
69047: LD_ADDR_OWVAR 28
69051: PUSH
69052: LD_INT 13
69054: ST_TO_ADDR
// hc_gallery :=  ;
69055: LD_ADDR_OWVAR 33
69059: PUSH
69060: LD_STRING 
69062: ST_TO_ADDR
// end ;
69063: LD_VAR 0 1
69067: RET
// export function PrepareFrog ( ) ; begin
69068: LD_INT 0
69070: PPUSH
// uc_side := 0 ;
69071: LD_ADDR_OWVAR 20
69075: PUSH
69076: LD_INT 0
69078: ST_TO_ADDR
// uc_nation := 0 ;
69079: LD_ADDR_OWVAR 21
69083: PUSH
69084: LD_INT 0
69086: ST_TO_ADDR
// hc_class := class_frog ;
69087: LD_ADDR_OWVAR 28
69091: PUSH
69092: LD_INT 19
69094: ST_TO_ADDR
// hc_gallery :=  ;
69095: LD_ADDR_OWVAR 33
69099: PUSH
69100: LD_STRING 
69102: ST_TO_ADDR
// end ;
69103: LD_VAR 0 1
69107: RET
// export function PrepareFish ( ) ; begin
69108: LD_INT 0
69110: PPUSH
// uc_side := 0 ;
69111: LD_ADDR_OWVAR 20
69115: PUSH
69116: LD_INT 0
69118: ST_TO_ADDR
// uc_nation := 0 ;
69119: LD_ADDR_OWVAR 21
69123: PUSH
69124: LD_INT 0
69126: ST_TO_ADDR
// hc_class := class_fish ;
69127: LD_ADDR_OWVAR 28
69131: PUSH
69132: LD_INT 20
69134: ST_TO_ADDR
// hc_gallery :=  ;
69135: LD_ADDR_OWVAR 33
69139: PUSH
69140: LD_STRING 
69142: ST_TO_ADDR
// end ;
69143: LD_VAR 0 1
69147: RET
// export function PrepareBird ( ) ; begin
69148: LD_INT 0
69150: PPUSH
// uc_side := 0 ;
69151: LD_ADDR_OWVAR 20
69155: PUSH
69156: LD_INT 0
69158: ST_TO_ADDR
// uc_nation := 0 ;
69159: LD_ADDR_OWVAR 21
69163: PUSH
69164: LD_INT 0
69166: ST_TO_ADDR
// hc_class := class_phororhacos ;
69167: LD_ADDR_OWVAR 28
69171: PUSH
69172: LD_INT 18
69174: ST_TO_ADDR
// hc_gallery :=  ;
69175: LD_ADDR_OWVAR 33
69179: PUSH
69180: LD_STRING 
69182: ST_TO_ADDR
// end ;
69183: LD_VAR 0 1
69187: RET
// export function PrepareHorse ( ) ; begin
69188: LD_INT 0
69190: PPUSH
// uc_side := 0 ;
69191: LD_ADDR_OWVAR 20
69195: PUSH
69196: LD_INT 0
69198: ST_TO_ADDR
// uc_nation := 0 ;
69199: LD_ADDR_OWVAR 21
69203: PUSH
69204: LD_INT 0
69206: ST_TO_ADDR
// hc_class := class_horse ;
69207: LD_ADDR_OWVAR 28
69211: PUSH
69212: LD_INT 21
69214: ST_TO_ADDR
// hc_gallery :=  ;
69215: LD_ADDR_OWVAR 33
69219: PUSH
69220: LD_STRING 
69222: ST_TO_ADDR
// end ;
69223: LD_VAR 0 1
69227: RET
// export function PrepareMastodont ( ) ; begin
69228: LD_INT 0
69230: PPUSH
// uc_side := 0 ;
69231: LD_ADDR_OWVAR 20
69235: PUSH
69236: LD_INT 0
69238: ST_TO_ADDR
// uc_nation := 0 ;
69239: LD_ADDR_OWVAR 21
69243: PUSH
69244: LD_INT 0
69246: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69247: LD_ADDR_OWVAR 37
69251: PUSH
69252: LD_INT 31
69254: ST_TO_ADDR
// vc_control := control_rider ;
69255: LD_ADDR_OWVAR 38
69259: PUSH
69260: LD_INT 4
69262: ST_TO_ADDR
// end ;
69263: LD_VAR 0 1
69267: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69268: LD_INT 0
69270: PPUSH
69271: PPUSH
69272: PPUSH
// uc_side = 0 ;
69273: LD_ADDR_OWVAR 20
69277: PUSH
69278: LD_INT 0
69280: ST_TO_ADDR
// uc_nation = 0 ;
69281: LD_ADDR_OWVAR 21
69285: PUSH
69286: LD_INT 0
69288: ST_TO_ADDR
// InitHc_All ( ) ;
69289: CALL_OW 584
// InitVc ;
69293: CALL_OW 20
// if mastodonts then
69297: LD_VAR 0 6
69301: IFFALSE 69368
// for i = 1 to mastodonts do
69303: LD_ADDR_VAR 0 11
69307: PUSH
69308: DOUBLE
69309: LD_INT 1
69311: DEC
69312: ST_TO_ADDR
69313: LD_VAR 0 6
69317: PUSH
69318: FOR_TO
69319: IFFALSE 69366
// begin vc_chassis := 31 ;
69321: LD_ADDR_OWVAR 37
69325: PUSH
69326: LD_INT 31
69328: ST_TO_ADDR
// vc_control := control_rider ;
69329: LD_ADDR_OWVAR 38
69333: PUSH
69334: LD_INT 4
69336: ST_TO_ADDR
// animal := CreateVehicle ;
69337: LD_ADDR_VAR 0 12
69341: PUSH
69342: CALL_OW 45
69346: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69347: LD_VAR 0 12
69351: PPUSH
69352: LD_VAR 0 8
69356: PPUSH
69357: LD_INT 0
69359: PPUSH
69360: CALL 71496 0 3
// end ;
69364: GO 69318
69366: POP
69367: POP
// if horses then
69368: LD_VAR 0 5
69372: IFFALSE 69439
// for i = 1 to horses do
69374: LD_ADDR_VAR 0 11
69378: PUSH
69379: DOUBLE
69380: LD_INT 1
69382: DEC
69383: ST_TO_ADDR
69384: LD_VAR 0 5
69388: PUSH
69389: FOR_TO
69390: IFFALSE 69437
// begin hc_class := 21 ;
69392: LD_ADDR_OWVAR 28
69396: PUSH
69397: LD_INT 21
69399: ST_TO_ADDR
// hc_gallery :=  ;
69400: LD_ADDR_OWVAR 33
69404: PUSH
69405: LD_STRING 
69407: ST_TO_ADDR
// animal := CreateHuman ;
69408: LD_ADDR_VAR 0 12
69412: PUSH
69413: CALL_OW 44
69417: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69418: LD_VAR 0 12
69422: PPUSH
69423: LD_VAR 0 8
69427: PPUSH
69428: LD_INT 0
69430: PPUSH
69431: CALL 71496 0 3
// end ;
69435: GO 69389
69437: POP
69438: POP
// if birds then
69439: LD_VAR 0 1
69443: IFFALSE 69510
// for i = 1 to birds do
69445: LD_ADDR_VAR 0 11
69449: PUSH
69450: DOUBLE
69451: LD_INT 1
69453: DEC
69454: ST_TO_ADDR
69455: LD_VAR 0 1
69459: PUSH
69460: FOR_TO
69461: IFFALSE 69508
// begin hc_class = 18 ;
69463: LD_ADDR_OWVAR 28
69467: PUSH
69468: LD_INT 18
69470: ST_TO_ADDR
// hc_gallery =  ;
69471: LD_ADDR_OWVAR 33
69475: PUSH
69476: LD_STRING 
69478: ST_TO_ADDR
// animal := CreateHuman ;
69479: LD_ADDR_VAR 0 12
69483: PUSH
69484: CALL_OW 44
69488: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69489: LD_VAR 0 12
69493: PPUSH
69494: LD_VAR 0 8
69498: PPUSH
69499: LD_INT 0
69501: PPUSH
69502: CALL 71496 0 3
// end ;
69506: GO 69460
69508: POP
69509: POP
// if tigers then
69510: LD_VAR 0 2
69514: IFFALSE 69598
// for i = 1 to tigers do
69516: LD_ADDR_VAR 0 11
69520: PUSH
69521: DOUBLE
69522: LD_INT 1
69524: DEC
69525: ST_TO_ADDR
69526: LD_VAR 0 2
69530: PUSH
69531: FOR_TO
69532: IFFALSE 69596
// begin hc_class = class_tiger ;
69534: LD_ADDR_OWVAR 28
69538: PUSH
69539: LD_INT 14
69541: ST_TO_ADDR
// hc_gallery =  ;
69542: LD_ADDR_OWVAR 33
69546: PUSH
69547: LD_STRING 
69549: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69550: LD_ADDR_OWVAR 35
69554: PUSH
69555: LD_INT 7
69557: NEG
69558: PPUSH
69559: LD_INT 7
69561: PPUSH
69562: CALL_OW 12
69566: ST_TO_ADDR
// animal := CreateHuman ;
69567: LD_ADDR_VAR 0 12
69571: PUSH
69572: CALL_OW 44
69576: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69577: LD_VAR 0 12
69581: PPUSH
69582: LD_VAR 0 8
69586: PPUSH
69587: LD_INT 0
69589: PPUSH
69590: CALL 71496 0 3
// end ;
69594: GO 69531
69596: POP
69597: POP
// if apemans then
69598: LD_VAR 0 3
69602: IFFALSE 69725
// for i = 1 to apemans do
69604: LD_ADDR_VAR 0 11
69608: PUSH
69609: DOUBLE
69610: LD_INT 1
69612: DEC
69613: ST_TO_ADDR
69614: LD_VAR 0 3
69618: PUSH
69619: FOR_TO
69620: IFFALSE 69723
// begin hc_class = class_apeman ;
69622: LD_ADDR_OWVAR 28
69626: PUSH
69627: LD_INT 12
69629: ST_TO_ADDR
// hc_gallery =  ;
69630: LD_ADDR_OWVAR 33
69634: PUSH
69635: LD_STRING 
69637: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69638: LD_ADDR_OWVAR 35
69642: PUSH
69643: LD_INT 2
69645: NEG
69646: PPUSH
69647: LD_INT 2
69649: PPUSH
69650: CALL_OW 12
69654: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69655: LD_ADDR_OWVAR 31
69659: PUSH
69660: LD_INT 1
69662: PPUSH
69663: LD_INT 3
69665: PPUSH
69666: CALL_OW 12
69670: PUSH
69671: LD_INT 1
69673: PPUSH
69674: LD_INT 3
69676: PPUSH
69677: CALL_OW 12
69681: PUSH
69682: LD_INT 0
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: LIST
69692: LIST
69693: ST_TO_ADDR
// animal := CreateHuman ;
69694: LD_ADDR_VAR 0 12
69698: PUSH
69699: CALL_OW 44
69703: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69704: LD_VAR 0 12
69708: PPUSH
69709: LD_VAR 0 8
69713: PPUSH
69714: LD_INT 0
69716: PPUSH
69717: CALL 71496 0 3
// end ;
69721: GO 69619
69723: POP
69724: POP
// if enchidnas then
69725: LD_VAR 0 4
69729: IFFALSE 69796
// for i = 1 to enchidnas do
69731: LD_ADDR_VAR 0 11
69735: PUSH
69736: DOUBLE
69737: LD_INT 1
69739: DEC
69740: ST_TO_ADDR
69741: LD_VAR 0 4
69745: PUSH
69746: FOR_TO
69747: IFFALSE 69794
// begin hc_class = 13 ;
69749: LD_ADDR_OWVAR 28
69753: PUSH
69754: LD_INT 13
69756: ST_TO_ADDR
// hc_gallery =  ;
69757: LD_ADDR_OWVAR 33
69761: PUSH
69762: LD_STRING 
69764: ST_TO_ADDR
// animal := CreateHuman ;
69765: LD_ADDR_VAR 0 12
69769: PUSH
69770: CALL_OW 44
69774: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69775: LD_VAR 0 12
69779: PPUSH
69780: LD_VAR 0 8
69784: PPUSH
69785: LD_INT 0
69787: PPUSH
69788: CALL 71496 0 3
// end ;
69792: GO 69746
69794: POP
69795: POP
// if fishes then
69796: LD_VAR 0 7
69800: IFFALSE 69867
// for i = 1 to fishes do
69802: LD_ADDR_VAR 0 11
69806: PUSH
69807: DOUBLE
69808: LD_INT 1
69810: DEC
69811: ST_TO_ADDR
69812: LD_VAR 0 7
69816: PUSH
69817: FOR_TO
69818: IFFALSE 69865
// begin hc_class = 20 ;
69820: LD_ADDR_OWVAR 28
69824: PUSH
69825: LD_INT 20
69827: ST_TO_ADDR
// hc_gallery =  ;
69828: LD_ADDR_OWVAR 33
69832: PUSH
69833: LD_STRING 
69835: ST_TO_ADDR
// animal := CreateHuman ;
69836: LD_ADDR_VAR 0 12
69840: PUSH
69841: CALL_OW 44
69845: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69846: LD_VAR 0 12
69850: PPUSH
69851: LD_VAR 0 9
69855: PPUSH
69856: LD_INT 0
69858: PPUSH
69859: CALL 71496 0 3
// end ;
69863: GO 69817
69865: POP
69866: POP
// end ;
69867: LD_VAR 0 10
69871: RET
// export function WantHeal ( sci , unit ) ; begin
69872: LD_INT 0
69874: PPUSH
// if GetTaskList ( sci ) > 0 then
69875: LD_VAR 0 1
69879: PPUSH
69880: CALL_OW 437
69884: PUSH
69885: LD_INT 0
69887: GREATER
69888: IFFALSE 69958
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69890: LD_VAR 0 1
69894: PPUSH
69895: CALL_OW 437
69899: PUSH
69900: LD_INT 1
69902: ARRAY
69903: PUSH
69904: LD_INT 1
69906: ARRAY
69907: PUSH
69908: LD_STRING l
69910: EQUAL
69911: PUSH
69912: LD_VAR 0 1
69916: PPUSH
69917: CALL_OW 437
69921: PUSH
69922: LD_INT 1
69924: ARRAY
69925: PUSH
69926: LD_INT 4
69928: ARRAY
69929: PUSH
69930: LD_VAR 0 2
69934: EQUAL
69935: AND
69936: IFFALSE 69948
// result := true else
69938: LD_ADDR_VAR 0 3
69942: PUSH
69943: LD_INT 1
69945: ST_TO_ADDR
69946: GO 69956
// result := false ;
69948: LD_ADDR_VAR 0 3
69952: PUSH
69953: LD_INT 0
69955: ST_TO_ADDR
// end else
69956: GO 69966
// result := false ;
69958: LD_ADDR_VAR 0 3
69962: PUSH
69963: LD_INT 0
69965: ST_TO_ADDR
// end ;
69966: LD_VAR 0 3
69970: RET
// export function HealTarget ( sci ) ; begin
69971: LD_INT 0
69973: PPUSH
// if not sci then
69974: LD_VAR 0 1
69978: NOT
69979: IFFALSE 69983
// exit ;
69981: GO 70048
// result := 0 ;
69983: LD_ADDR_VAR 0 2
69987: PUSH
69988: LD_INT 0
69990: ST_TO_ADDR
// if GetTaskList ( sci ) then
69991: LD_VAR 0 1
69995: PPUSH
69996: CALL_OW 437
70000: IFFALSE 70048
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
70002: LD_VAR 0 1
70006: PPUSH
70007: CALL_OW 437
70011: PUSH
70012: LD_INT 1
70014: ARRAY
70015: PUSH
70016: LD_INT 1
70018: ARRAY
70019: PUSH
70020: LD_STRING l
70022: EQUAL
70023: IFFALSE 70048
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
70025: LD_ADDR_VAR 0 2
70029: PUSH
70030: LD_VAR 0 1
70034: PPUSH
70035: CALL_OW 437
70039: PUSH
70040: LD_INT 1
70042: ARRAY
70043: PUSH
70044: LD_INT 4
70046: ARRAY
70047: ST_TO_ADDR
// end ;
70048: LD_VAR 0 2
70052: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
70053: LD_INT 0
70055: PPUSH
70056: PPUSH
70057: PPUSH
70058: PPUSH
// if not base_units then
70059: LD_VAR 0 1
70063: NOT
70064: IFFALSE 70068
// exit ;
70066: GO 70155
// result := false ;
70068: LD_ADDR_VAR 0 2
70072: PUSH
70073: LD_INT 0
70075: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
70076: LD_ADDR_VAR 0 5
70080: PUSH
70081: LD_VAR 0 1
70085: PPUSH
70086: LD_INT 21
70088: PUSH
70089: LD_INT 3
70091: PUSH
70092: EMPTY
70093: LIST
70094: LIST
70095: PPUSH
70096: CALL_OW 72
70100: ST_TO_ADDR
// if not tmp then
70101: LD_VAR 0 5
70105: NOT
70106: IFFALSE 70110
// exit ;
70108: GO 70155
// for i in tmp do
70110: LD_ADDR_VAR 0 3
70114: PUSH
70115: LD_VAR 0 5
70119: PUSH
70120: FOR_IN
70121: IFFALSE 70153
// begin result := EnemyInRange ( i , 22 ) ;
70123: LD_ADDR_VAR 0 2
70127: PUSH
70128: LD_VAR 0 3
70132: PPUSH
70133: LD_INT 22
70135: PPUSH
70136: CALL 67742 0 2
70140: ST_TO_ADDR
// if result then
70141: LD_VAR 0 2
70145: IFFALSE 70151
// exit ;
70147: POP
70148: POP
70149: GO 70155
// end ;
70151: GO 70120
70153: POP
70154: POP
// end ;
70155: LD_VAR 0 2
70159: RET
// export function FilterByTag ( units , tag ) ; begin
70160: LD_INT 0
70162: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70163: LD_ADDR_VAR 0 3
70167: PUSH
70168: LD_VAR 0 1
70172: PPUSH
70173: LD_INT 120
70175: PUSH
70176: LD_VAR 0 2
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PPUSH
70185: CALL_OW 72
70189: ST_TO_ADDR
// end ;
70190: LD_VAR 0 3
70194: RET
// export function IsDriver ( un ) ; begin
70195: LD_INT 0
70197: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70198: LD_ADDR_VAR 0 2
70202: PUSH
70203: LD_VAR 0 1
70207: PUSH
70208: LD_INT 55
70210: PUSH
70211: EMPTY
70212: LIST
70213: PPUSH
70214: CALL_OW 69
70218: IN
70219: ST_TO_ADDR
// end ;
70220: LD_VAR 0 2
70224: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70225: LD_INT 0
70227: PPUSH
70228: PPUSH
// list := [ ] ;
70229: LD_ADDR_VAR 0 5
70233: PUSH
70234: EMPTY
70235: ST_TO_ADDR
// case d of 0 :
70236: LD_VAR 0 3
70240: PUSH
70241: LD_INT 0
70243: DOUBLE
70244: EQUAL
70245: IFTRUE 70249
70247: GO 70382
70249: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70250: LD_ADDR_VAR 0 5
70254: PUSH
70255: LD_VAR 0 1
70259: PUSH
70260: LD_INT 4
70262: MINUS
70263: PUSH
70264: LD_VAR 0 2
70268: PUSH
70269: LD_INT 4
70271: MINUS
70272: PUSH
70273: LD_INT 2
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: LIST
70280: PUSH
70281: LD_VAR 0 1
70285: PUSH
70286: LD_INT 3
70288: MINUS
70289: PUSH
70290: LD_VAR 0 2
70294: PUSH
70295: LD_INT 1
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: LIST
70302: PUSH
70303: LD_VAR 0 1
70307: PUSH
70308: LD_INT 4
70310: PLUS
70311: PUSH
70312: LD_VAR 0 2
70316: PUSH
70317: LD_INT 4
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: LIST
70324: PUSH
70325: LD_VAR 0 1
70329: PUSH
70330: LD_INT 3
70332: PLUS
70333: PUSH
70334: LD_VAR 0 2
70338: PUSH
70339: LD_INT 3
70341: PLUS
70342: PUSH
70343: LD_INT 5
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: LIST
70350: PUSH
70351: LD_VAR 0 1
70355: PUSH
70356: LD_VAR 0 2
70360: PUSH
70361: LD_INT 4
70363: PLUS
70364: PUSH
70365: LD_INT 0
70367: PUSH
70368: EMPTY
70369: LIST
70370: LIST
70371: LIST
70372: PUSH
70373: EMPTY
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: ST_TO_ADDR
// end ; 1 :
70380: GO 71080
70382: LD_INT 1
70384: DOUBLE
70385: EQUAL
70386: IFTRUE 70390
70388: GO 70523
70390: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70391: LD_ADDR_VAR 0 5
70395: PUSH
70396: LD_VAR 0 1
70400: PUSH
70401: LD_VAR 0 2
70405: PUSH
70406: LD_INT 4
70408: MINUS
70409: PUSH
70410: LD_INT 3
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: LIST
70417: PUSH
70418: LD_VAR 0 1
70422: PUSH
70423: LD_INT 3
70425: MINUS
70426: PUSH
70427: LD_VAR 0 2
70431: PUSH
70432: LD_INT 3
70434: MINUS
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: EMPTY
70440: LIST
70441: LIST
70442: LIST
70443: PUSH
70444: LD_VAR 0 1
70448: PUSH
70449: LD_INT 4
70451: MINUS
70452: PUSH
70453: LD_VAR 0 2
70457: PUSH
70458: LD_INT 1
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: LIST
70465: PUSH
70466: LD_VAR 0 1
70470: PUSH
70471: LD_VAR 0 2
70475: PUSH
70476: LD_INT 3
70478: PLUS
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: LIST
70487: PUSH
70488: LD_VAR 0 1
70492: PUSH
70493: LD_INT 4
70495: PLUS
70496: PUSH
70497: LD_VAR 0 2
70501: PUSH
70502: LD_INT 4
70504: PLUS
70505: PUSH
70506: LD_INT 5
70508: PUSH
70509: EMPTY
70510: LIST
70511: LIST
70512: LIST
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: ST_TO_ADDR
// end ; 2 :
70521: GO 71080
70523: LD_INT 2
70525: DOUBLE
70526: EQUAL
70527: IFTRUE 70531
70529: GO 70660
70531: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70532: LD_ADDR_VAR 0 5
70536: PUSH
70537: LD_VAR 0 1
70541: PUSH
70542: LD_VAR 0 2
70546: PUSH
70547: LD_INT 3
70549: MINUS
70550: PUSH
70551: LD_INT 3
70553: PUSH
70554: EMPTY
70555: LIST
70556: LIST
70557: LIST
70558: PUSH
70559: LD_VAR 0 1
70563: PUSH
70564: LD_INT 4
70566: PLUS
70567: PUSH
70568: LD_VAR 0 2
70572: PUSH
70573: LD_INT 4
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: LIST
70580: PUSH
70581: LD_VAR 0 1
70585: PUSH
70586: LD_VAR 0 2
70590: PUSH
70591: LD_INT 4
70593: PLUS
70594: PUSH
70595: LD_INT 0
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: LIST
70602: PUSH
70603: LD_VAR 0 1
70607: PUSH
70608: LD_INT 3
70610: MINUS
70611: PUSH
70612: LD_VAR 0 2
70616: PUSH
70617: LD_INT 1
70619: PUSH
70620: EMPTY
70621: LIST
70622: LIST
70623: LIST
70624: PUSH
70625: LD_VAR 0 1
70629: PUSH
70630: LD_INT 4
70632: MINUS
70633: PUSH
70634: LD_VAR 0 2
70638: PUSH
70639: LD_INT 4
70641: MINUS
70642: PUSH
70643: LD_INT 2
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: LIST
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: ST_TO_ADDR
// end ; 3 :
70658: GO 71080
70660: LD_INT 3
70662: DOUBLE
70663: EQUAL
70664: IFTRUE 70668
70666: GO 70801
70668: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70669: LD_ADDR_VAR 0 5
70673: PUSH
70674: LD_VAR 0 1
70678: PUSH
70679: LD_INT 3
70681: PLUS
70682: PUSH
70683: LD_VAR 0 2
70687: PUSH
70688: LD_INT 4
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: LIST
70695: PUSH
70696: LD_VAR 0 1
70700: PUSH
70701: LD_INT 4
70703: PLUS
70704: PUSH
70705: LD_VAR 0 2
70709: PUSH
70710: LD_INT 4
70712: PLUS
70713: PUSH
70714: LD_INT 5
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: LIST
70721: PUSH
70722: LD_VAR 0 1
70726: PUSH
70727: LD_INT 4
70729: MINUS
70730: PUSH
70731: LD_VAR 0 2
70735: PUSH
70736: LD_INT 1
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: LIST
70743: PUSH
70744: LD_VAR 0 1
70748: PUSH
70749: LD_VAR 0 2
70753: PUSH
70754: LD_INT 4
70756: MINUS
70757: PUSH
70758: LD_INT 3
70760: PUSH
70761: EMPTY
70762: LIST
70763: LIST
70764: LIST
70765: PUSH
70766: LD_VAR 0 1
70770: PUSH
70771: LD_INT 3
70773: MINUS
70774: PUSH
70775: LD_VAR 0 2
70779: PUSH
70780: LD_INT 3
70782: MINUS
70783: PUSH
70784: LD_INT 2
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: LIST
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: LIST
70796: LIST
70797: LIST
70798: ST_TO_ADDR
// end ; 4 :
70799: GO 71080
70801: LD_INT 4
70803: DOUBLE
70804: EQUAL
70805: IFTRUE 70809
70807: GO 70942
70809: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70810: LD_ADDR_VAR 0 5
70814: PUSH
70815: LD_VAR 0 1
70819: PUSH
70820: LD_VAR 0 2
70824: PUSH
70825: LD_INT 4
70827: PLUS
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: EMPTY
70833: LIST
70834: LIST
70835: LIST
70836: PUSH
70837: LD_VAR 0 1
70841: PUSH
70842: LD_INT 3
70844: PLUS
70845: PUSH
70846: LD_VAR 0 2
70850: PUSH
70851: LD_INT 3
70853: PLUS
70854: PUSH
70855: LD_INT 5
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: LIST
70862: PUSH
70863: LD_VAR 0 1
70867: PUSH
70868: LD_INT 4
70870: PLUS
70871: PUSH
70872: LD_VAR 0 2
70876: PUSH
70877: LD_INT 4
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: PUSH
70885: LD_VAR 0 1
70889: PUSH
70890: LD_VAR 0 2
70894: PUSH
70895: LD_INT 3
70897: MINUS
70898: PUSH
70899: LD_INT 3
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: LIST
70906: PUSH
70907: LD_VAR 0 1
70911: PUSH
70912: LD_INT 4
70914: MINUS
70915: PUSH
70916: LD_VAR 0 2
70920: PUSH
70921: LD_INT 4
70923: MINUS
70924: PUSH
70925: LD_INT 2
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: LIST
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: ST_TO_ADDR
// end ; 5 :
70940: GO 71080
70942: LD_INT 5
70944: DOUBLE
70945: EQUAL
70946: IFTRUE 70950
70948: GO 71079
70950: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70951: LD_ADDR_VAR 0 5
70955: PUSH
70956: LD_VAR 0 1
70960: PUSH
70961: LD_INT 4
70963: MINUS
70964: PUSH
70965: LD_VAR 0 2
70969: PUSH
70970: LD_INT 1
70972: PUSH
70973: EMPTY
70974: LIST
70975: LIST
70976: LIST
70977: PUSH
70978: LD_VAR 0 1
70982: PUSH
70983: LD_VAR 0 2
70987: PUSH
70988: LD_INT 4
70990: MINUS
70991: PUSH
70992: LD_INT 3
70994: PUSH
70995: EMPTY
70996: LIST
70997: LIST
70998: LIST
70999: PUSH
71000: LD_VAR 0 1
71004: PUSH
71005: LD_INT 4
71007: PLUS
71008: PUSH
71009: LD_VAR 0 2
71013: PUSH
71014: LD_INT 4
71016: PLUS
71017: PUSH
71018: LD_INT 5
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: LIST
71025: PUSH
71026: LD_VAR 0 1
71030: PUSH
71031: LD_INT 3
71033: PLUS
71034: PUSH
71035: LD_VAR 0 2
71039: PUSH
71040: LD_INT 4
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: LIST
71047: PUSH
71048: LD_VAR 0 1
71052: PUSH
71053: LD_VAR 0 2
71057: PUSH
71058: LD_INT 3
71060: PLUS
71061: PUSH
71062: LD_INT 0
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: LIST
71069: PUSH
71070: EMPTY
71071: LIST
71072: LIST
71073: LIST
71074: LIST
71075: LIST
71076: ST_TO_ADDR
// end ; end ;
71077: GO 71080
71079: POP
// result := list ;
71080: LD_ADDR_VAR 0 4
71084: PUSH
71085: LD_VAR 0 5
71089: ST_TO_ADDR
// end ;
71090: LD_VAR 0 4
71094: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
71095: LD_INT 0
71097: PPUSH
71098: PPUSH
71099: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
71100: LD_VAR 0 1
71104: NOT
71105: PUSH
71106: LD_VAR 0 2
71110: PUSH
71111: LD_INT 1
71113: PUSH
71114: LD_INT 2
71116: PUSH
71117: LD_INT 3
71119: PUSH
71120: LD_INT 4
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: LIST
71127: LIST
71128: IN
71129: NOT
71130: OR
71131: IFFALSE 71135
// exit ;
71133: GO 71218
// tmp := [ ] ;
71135: LD_ADDR_VAR 0 5
71139: PUSH
71140: EMPTY
71141: ST_TO_ADDR
// for i in units do
71142: LD_ADDR_VAR 0 4
71146: PUSH
71147: LD_VAR 0 1
71151: PUSH
71152: FOR_IN
71153: IFFALSE 71187
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71155: LD_ADDR_VAR 0 5
71159: PUSH
71160: LD_VAR 0 5
71164: PPUSH
71165: LD_VAR 0 4
71169: PPUSH
71170: LD_VAR 0 2
71174: PPUSH
71175: CALL_OW 259
71179: PPUSH
71180: CALL 72579 0 2
71184: ST_TO_ADDR
71185: GO 71152
71187: POP
71188: POP
// if not tmp then
71189: LD_VAR 0 5
71193: NOT
71194: IFFALSE 71198
// exit ;
71196: GO 71218
// result := SortListByListDesc ( units , tmp ) ;
71198: LD_ADDR_VAR 0 3
71202: PUSH
71203: LD_VAR 0 1
71207: PPUSH
71208: LD_VAR 0 5
71212: PPUSH
71213: CALL_OW 77
71217: ST_TO_ADDR
// end ;
71218: LD_VAR 0 3
71222: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71223: LD_INT 0
71225: PPUSH
71226: PPUSH
71227: PPUSH
// result := false ;
71228: LD_ADDR_VAR 0 3
71232: PUSH
71233: LD_INT 0
71235: ST_TO_ADDR
// if not building then
71236: LD_VAR 0 2
71240: NOT
71241: IFFALSE 71245
// exit ;
71243: GO 71383
// x := GetX ( building ) ;
71245: LD_ADDR_VAR 0 4
71249: PUSH
71250: LD_VAR 0 2
71254: PPUSH
71255: CALL_OW 250
71259: ST_TO_ADDR
// y := GetY ( building ) ;
71260: LD_ADDR_VAR 0 5
71264: PUSH
71265: LD_VAR 0 2
71269: PPUSH
71270: CALL_OW 251
71274: ST_TO_ADDR
// if not x or not y then
71275: LD_VAR 0 4
71279: NOT
71280: PUSH
71281: LD_VAR 0 5
71285: NOT
71286: OR
71287: IFFALSE 71291
// exit ;
71289: GO 71383
// if GetTaskList ( unit ) then
71291: LD_VAR 0 1
71295: PPUSH
71296: CALL_OW 437
71300: IFFALSE 71383
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71302: LD_STRING e
71304: PUSH
71305: LD_VAR 0 1
71309: PPUSH
71310: CALL_OW 437
71314: PUSH
71315: LD_INT 1
71317: ARRAY
71318: PUSH
71319: LD_INT 1
71321: ARRAY
71322: EQUAL
71323: PUSH
71324: LD_VAR 0 4
71328: PUSH
71329: LD_VAR 0 1
71333: PPUSH
71334: CALL_OW 437
71338: PUSH
71339: LD_INT 1
71341: ARRAY
71342: PUSH
71343: LD_INT 2
71345: ARRAY
71346: EQUAL
71347: AND
71348: PUSH
71349: LD_VAR 0 5
71353: PUSH
71354: LD_VAR 0 1
71358: PPUSH
71359: CALL_OW 437
71363: PUSH
71364: LD_INT 1
71366: ARRAY
71367: PUSH
71368: LD_INT 3
71370: ARRAY
71371: EQUAL
71372: AND
71373: IFFALSE 71383
// result := true end ;
71375: LD_ADDR_VAR 0 3
71379: PUSH
71380: LD_INT 1
71382: ST_TO_ADDR
// end ;
71383: LD_VAR 0 3
71387: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71388: LD_INT 0
71390: PPUSH
// result := false ;
71391: LD_ADDR_VAR 0 4
71395: PUSH
71396: LD_INT 0
71398: ST_TO_ADDR
// if GetTaskList ( unit ) then
71399: LD_VAR 0 1
71403: PPUSH
71404: CALL_OW 437
71408: IFFALSE 71491
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71410: LD_STRING M
71412: PUSH
71413: LD_VAR 0 1
71417: PPUSH
71418: CALL_OW 437
71422: PUSH
71423: LD_INT 1
71425: ARRAY
71426: PUSH
71427: LD_INT 1
71429: ARRAY
71430: EQUAL
71431: PUSH
71432: LD_VAR 0 2
71436: PUSH
71437: LD_VAR 0 1
71441: PPUSH
71442: CALL_OW 437
71446: PUSH
71447: LD_INT 1
71449: ARRAY
71450: PUSH
71451: LD_INT 2
71453: ARRAY
71454: EQUAL
71455: AND
71456: PUSH
71457: LD_VAR 0 3
71461: PUSH
71462: LD_VAR 0 1
71466: PPUSH
71467: CALL_OW 437
71471: PUSH
71472: LD_INT 1
71474: ARRAY
71475: PUSH
71476: LD_INT 3
71478: ARRAY
71479: EQUAL
71480: AND
71481: IFFALSE 71491
// result := true ;
71483: LD_ADDR_VAR 0 4
71487: PUSH
71488: LD_INT 1
71490: ST_TO_ADDR
// end ; end ;
71491: LD_VAR 0 4
71495: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71496: LD_INT 0
71498: PPUSH
71499: PPUSH
71500: PPUSH
71501: PPUSH
// if not unit or not area then
71502: LD_VAR 0 1
71506: NOT
71507: PUSH
71508: LD_VAR 0 2
71512: NOT
71513: OR
71514: IFFALSE 71518
// exit ;
71516: GO 71682
// tmp := AreaToList ( area , i ) ;
71518: LD_ADDR_VAR 0 6
71522: PUSH
71523: LD_VAR 0 2
71527: PPUSH
71528: LD_VAR 0 5
71532: PPUSH
71533: CALL_OW 517
71537: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71538: LD_ADDR_VAR 0 5
71542: PUSH
71543: DOUBLE
71544: LD_INT 1
71546: DEC
71547: ST_TO_ADDR
71548: LD_VAR 0 6
71552: PUSH
71553: LD_INT 1
71555: ARRAY
71556: PUSH
71557: FOR_TO
71558: IFFALSE 71680
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71560: LD_ADDR_VAR 0 7
71564: PUSH
71565: LD_VAR 0 6
71569: PUSH
71570: LD_INT 1
71572: ARRAY
71573: PUSH
71574: LD_VAR 0 5
71578: ARRAY
71579: PUSH
71580: LD_VAR 0 6
71584: PUSH
71585: LD_INT 2
71587: ARRAY
71588: PUSH
71589: LD_VAR 0 5
71593: ARRAY
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
71599: LD_VAR 0 7
71603: PUSH
71604: LD_INT 1
71606: ARRAY
71607: PPUSH
71608: LD_VAR 0 7
71612: PUSH
71613: LD_INT 2
71615: ARRAY
71616: PPUSH
71617: CALL_OW 428
71621: PUSH
71622: LD_INT 0
71624: EQUAL
71625: IFFALSE 71678
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
71627: LD_VAR 0 1
71631: PPUSH
71632: LD_VAR 0 7
71636: PUSH
71637: LD_INT 1
71639: ARRAY
71640: PPUSH
71641: LD_VAR 0 7
71645: PUSH
71646: LD_INT 2
71648: ARRAY
71649: PPUSH
71650: LD_VAR 0 3
71654: PPUSH
71655: CALL_OW 48
// result := IsPlaced ( unit ) ;
71659: LD_ADDR_VAR 0 4
71663: PUSH
71664: LD_VAR 0 1
71668: PPUSH
71669: CALL_OW 305
71673: ST_TO_ADDR
// exit ;
71674: POP
71675: POP
71676: GO 71682
// end ; end ;
71678: GO 71557
71680: POP
71681: POP
// end ;
71682: LD_VAR 0 4
71686: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71687: LD_INT 0
71689: PPUSH
71690: PPUSH
71691: PPUSH
// if not side or side > 8 then
71692: LD_VAR 0 1
71696: NOT
71697: PUSH
71698: LD_VAR 0 1
71702: PUSH
71703: LD_INT 8
71705: GREATER
71706: OR
71707: IFFALSE 71711
// exit ;
71709: GO 71898
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71711: LD_ADDR_VAR 0 4
71715: PUSH
71716: LD_INT 22
71718: PUSH
71719: LD_VAR 0 1
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 21
71730: PUSH
71731: LD_INT 3
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PPUSH
71742: CALL_OW 69
71746: ST_TO_ADDR
// if not tmp then
71747: LD_VAR 0 4
71751: NOT
71752: IFFALSE 71756
// exit ;
71754: GO 71898
// enable_addtolog := true ;
71756: LD_ADDR_OWVAR 81
71760: PUSH
71761: LD_INT 1
71763: ST_TO_ADDR
// AddToLog ( [ ) ;
71764: LD_STRING [
71766: PPUSH
71767: CALL_OW 561
// for i in tmp do
71771: LD_ADDR_VAR 0 3
71775: PUSH
71776: LD_VAR 0 4
71780: PUSH
71781: FOR_IN
71782: IFFALSE 71889
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71784: LD_STRING [
71786: PUSH
71787: LD_VAR 0 3
71791: PPUSH
71792: CALL_OW 266
71796: STR
71797: PUSH
71798: LD_STRING , 
71800: STR
71801: PUSH
71802: LD_VAR 0 3
71806: PPUSH
71807: CALL_OW 250
71811: STR
71812: PUSH
71813: LD_STRING , 
71815: STR
71816: PUSH
71817: LD_VAR 0 3
71821: PPUSH
71822: CALL_OW 251
71826: STR
71827: PUSH
71828: LD_STRING , 
71830: STR
71831: PUSH
71832: LD_VAR 0 3
71836: PPUSH
71837: CALL_OW 254
71841: STR
71842: PUSH
71843: LD_STRING , 
71845: STR
71846: PUSH
71847: LD_VAR 0 3
71851: PPUSH
71852: LD_INT 1
71854: PPUSH
71855: CALL_OW 268
71859: STR
71860: PUSH
71861: LD_STRING , 
71863: STR
71864: PUSH
71865: LD_VAR 0 3
71869: PPUSH
71870: LD_INT 2
71872: PPUSH
71873: CALL_OW 268
71877: STR
71878: PUSH
71879: LD_STRING ],
71881: STR
71882: PPUSH
71883: CALL_OW 561
// end ;
71887: GO 71781
71889: POP
71890: POP
// AddToLog ( ]; ) ;
71891: LD_STRING ];
71893: PPUSH
71894: CALL_OW 561
// end ;
71898: LD_VAR 0 2
71902: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71903: LD_INT 0
71905: PPUSH
71906: PPUSH
71907: PPUSH
71908: PPUSH
71909: PPUSH
// if not area or not rate or not max then
71910: LD_VAR 0 1
71914: NOT
71915: PUSH
71916: LD_VAR 0 2
71920: NOT
71921: OR
71922: PUSH
71923: LD_VAR 0 4
71927: NOT
71928: OR
71929: IFFALSE 71933
// exit ;
71931: GO 72122
// while 1 do
71933: LD_INT 1
71935: IFFALSE 72122
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71937: LD_ADDR_VAR 0 9
71941: PUSH
71942: LD_VAR 0 1
71946: PPUSH
71947: LD_INT 1
71949: PPUSH
71950: CALL_OW 287
71954: PUSH
71955: LD_INT 10
71957: MUL
71958: ST_TO_ADDR
// r := rate / 10 ;
71959: LD_ADDR_VAR 0 7
71963: PUSH
71964: LD_VAR 0 2
71968: PUSH
71969: LD_INT 10
71971: DIVREAL
71972: ST_TO_ADDR
// time := 1 1$00 ;
71973: LD_ADDR_VAR 0 8
71977: PUSH
71978: LD_INT 2100
71980: ST_TO_ADDR
// if amount < min then
71981: LD_VAR 0 9
71985: PUSH
71986: LD_VAR 0 3
71990: LESS
71991: IFFALSE 72009
// r := r * 2 else
71993: LD_ADDR_VAR 0 7
71997: PUSH
71998: LD_VAR 0 7
72002: PUSH
72003: LD_INT 2
72005: MUL
72006: ST_TO_ADDR
72007: GO 72035
// if amount > max then
72009: LD_VAR 0 9
72013: PUSH
72014: LD_VAR 0 4
72018: GREATER
72019: IFFALSE 72035
// r := r / 2 ;
72021: LD_ADDR_VAR 0 7
72025: PUSH
72026: LD_VAR 0 7
72030: PUSH
72031: LD_INT 2
72033: DIVREAL
72034: ST_TO_ADDR
// time := time / r ;
72035: LD_ADDR_VAR 0 8
72039: PUSH
72040: LD_VAR 0 8
72044: PUSH
72045: LD_VAR 0 7
72049: DIVREAL
72050: ST_TO_ADDR
// if time < 0 then
72051: LD_VAR 0 8
72055: PUSH
72056: LD_INT 0
72058: LESS
72059: IFFALSE 72076
// time := time * - 1 ;
72061: LD_ADDR_VAR 0 8
72065: PUSH
72066: LD_VAR 0 8
72070: PUSH
72071: LD_INT 1
72073: NEG
72074: MUL
72075: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
72076: LD_VAR 0 8
72080: PUSH
72081: LD_INT 35
72083: PPUSH
72084: LD_INT 875
72086: PPUSH
72087: CALL_OW 12
72091: PLUS
72092: PPUSH
72093: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
72097: LD_INT 1
72099: PPUSH
72100: LD_INT 5
72102: PPUSH
72103: CALL_OW 12
72107: PPUSH
72108: LD_VAR 0 1
72112: PPUSH
72113: LD_INT 1
72115: PPUSH
72116: CALL_OW 55
// end ;
72120: GO 71933
// end ;
72122: LD_VAR 0 5
72126: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
72127: LD_INT 0
72129: PPUSH
72130: PPUSH
72131: PPUSH
72132: PPUSH
72133: PPUSH
72134: PPUSH
72135: PPUSH
72136: PPUSH
// if not turrets or not factories then
72137: LD_VAR 0 1
72141: NOT
72142: PUSH
72143: LD_VAR 0 2
72147: NOT
72148: OR
72149: IFFALSE 72153
// exit ;
72151: GO 72460
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72153: LD_ADDR_VAR 0 10
72157: PUSH
72158: LD_INT 5
72160: PUSH
72161: LD_INT 6
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 2
72170: PUSH
72171: LD_INT 4
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 3
72180: PUSH
72181: LD_INT 5
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 24
72195: PUSH
72196: LD_INT 25
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 23
72205: PUSH
72206: LD_INT 27
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PUSH
72213: EMPTY
72214: LIST
72215: LIST
72216: PUSH
72217: LD_INT 42
72219: PUSH
72220: LD_INT 43
72222: PUSH
72223: EMPTY
72224: LIST
72225: LIST
72226: PUSH
72227: LD_INT 44
72229: PUSH
72230: LD_INT 46
72232: PUSH
72233: EMPTY
72234: LIST
72235: LIST
72236: PUSH
72237: LD_INT 45
72239: PUSH
72240: LD_INT 47
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: LIST
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: LIST
72256: ST_TO_ADDR
// result := [ ] ;
72257: LD_ADDR_VAR 0 3
72261: PUSH
72262: EMPTY
72263: ST_TO_ADDR
// for i in turrets do
72264: LD_ADDR_VAR 0 4
72268: PUSH
72269: LD_VAR 0 1
72273: PUSH
72274: FOR_IN
72275: IFFALSE 72458
// begin nat := GetNation ( i ) ;
72277: LD_ADDR_VAR 0 7
72281: PUSH
72282: LD_VAR 0 4
72286: PPUSH
72287: CALL_OW 248
72291: ST_TO_ADDR
// weapon := 0 ;
72292: LD_ADDR_VAR 0 8
72296: PUSH
72297: LD_INT 0
72299: ST_TO_ADDR
// if not nat then
72300: LD_VAR 0 7
72304: NOT
72305: IFFALSE 72309
// continue ;
72307: GO 72274
// for j in list [ nat ] do
72309: LD_ADDR_VAR 0 5
72313: PUSH
72314: LD_VAR 0 10
72318: PUSH
72319: LD_VAR 0 7
72323: ARRAY
72324: PUSH
72325: FOR_IN
72326: IFFALSE 72367
// if GetBWeapon ( i ) = j [ 1 ] then
72328: LD_VAR 0 4
72332: PPUSH
72333: CALL_OW 269
72337: PUSH
72338: LD_VAR 0 5
72342: PUSH
72343: LD_INT 1
72345: ARRAY
72346: EQUAL
72347: IFFALSE 72365
// begin weapon := j [ 2 ] ;
72349: LD_ADDR_VAR 0 8
72353: PUSH
72354: LD_VAR 0 5
72358: PUSH
72359: LD_INT 2
72361: ARRAY
72362: ST_TO_ADDR
// break ;
72363: GO 72367
// end ;
72365: GO 72325
72367: POP
72368: POP
// if not weapon then
72369: LD_VAR 0 8
72373: NOT
72374: IFFALSE 72378
// continue ;
72376: GO 72274
// for k in factories do
72378: LD_ADDR_VAR 0 6
72382: PUSH
72383: LD_VAR 0 2
72387: PUSH
72388: FOR_IN
72389: IFFALSE 72454
// begin weapons := AvailableWeaponList ( k ) ;
72391: LD_ADDR_VAR 0 9
72395: PUSH
72396: LD_VAR 0 6
72400: PPUSH
72401: CALL_OW 478
72405: ST_TO_ADDR
// if not weapons then
72406: LD_VAR 0 9
72410: NOT
72411: IFFALSE 72415
// continue ;
72413: GO 72388
// if weapon in weapons then
72415: LD_VAR 0 8
72419: PUSH
72420: LD_VAR 0 9
72424: IN
72425: IFFALSE 72452
// begin result := [ i , weapon ] ;
72427: LD_ADDR_VAR 0 3
72431: PUSH
72432: LD_VAR 0 4
72436: PUSH
72437: LD_VAR 0 8
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: ST_TO_ADDR
// exit ;
72446: POP
72447: POP
72448: POP
72449: POP
72450: GO 72460
// end ; end ;
72452: GO 72388
72454: POP
72455: POP
// end ;
72456: GO 72274
72458: POP
72459: POP
// end ;
72460: LD_VAR 0 3
72464: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72465: LD_INT 0
72467: PPUSH
// if not side or side > 8 then
72468: LD_VAR 0 3
72472: NOT
72473: PUSH
72474: LD_VAR 0 3
72478: PUSH
72479: LD_INT 8
72481: GREATER
72482: OR
72483: IFFALSE 72487
// exit ;
72485: GO 72546
// if not range then
72487: LD_VAR 0 4
72491: NOT
72492: IFFALSE 72503
// range := - 12 ;
72494: LD_ADDR_VAR 0 4
72498: PUSH
72499: LD_INT 12
72501: NEG
72502: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72503: LD_VAR 0 1
72507: PPUSH
72508: LD_VAR 0 2
72512: PPUSH
72513: LD_VAR 0 3
72517: PPUSH
72518: LD_VAR 0 4
72522: PPUSH
72523: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72527: LD_VAR 0 1
72531: PPUSH
72532: LD_VAR 0 2
72536: PPUSH
72537: LD_VAR 0 3
72541: PPUSH
72542: CALL_OW 331
// end ;
72546: LD_VAR 0 5
72550: RET
// export function Video ( mode ) ; begin
72551: LD_INT 0
72553: PPUSH
// ingame_video = mode ;
72554: LD_ADDR_OWVAR 52
72558: PUSH
72559: LD_VAR 0 1
72563: ST_TO_ADDR
// interface_hidden = mode ;
72564: LD_ADDR_OWVAR 54
72568: PUSH
72569: LD_VAR 0 1
72573: ST_TO_ADDR
// end ;
72574: LD_VAR 0 2
72578: RET
// export function Join ( array , element ) ; begin
72579: LD_INT 0
72581: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72582: LD_ADDR_VAR 0 3
72586: PUSH
72587: LD_VAR 0 1
72591: PPUSH
72592: LD_VAR 0 1
72596: PUSH
72597: LD_INT 1
72599: PLUS
72600: PPUSH
72601: LD_VAR 0 2
72605: PPUSH
72606: CALL_OW 1
72610: ST_TO_ADDR
// end ;
72611: LD_VAR 0 3
72615: RET
// export function JoinUnion ( array , element ) ; begin
72616: LD_INT 0
72618: PPUSH
// result := array union element ;
72619: LD_ADDR_VAR 0 3
72623: PUSH
72624: LD_VAR 0 1
72628: PUSH
72629: LD_VAR 0 2
72633: UNION
72634: ST_TO_ADDR
// end ;
72635: LD_VAR 0 3
72639: RET
// export function GetBehemoths ( side ) ; begin
72640: LD_INT 0
72642: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72643: LD_ADDR_VAR 0 2
72647: PUSH
72648: LD_INT 22
72650: PUSH
72651: LD_VAR 0 1
72655: PUSH
72656: EMPTY
72657: LIST
72658: LIST
72659: PUSH
72660: LD_INT 31
72662: PUSH
72663: LD_INT 25
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: PUSH
72670: EMPTY
72671: LIST
72672: LIST
72673: PPUSH
72674: CALL_OW 69
72678: ST_TO_ADDR
// end ;
72679: LD_VAR 0 2
72683: RET
// export function Shuffle ( array ) ; var i , index ; begin
72684: LD_INT 0
72686: PPUSH
72687: PPUSH
72688: PPUSH
// result := [ ] ;
72689: LD_ADDR_VAR 0 2
72693: PUSH
72694: EMPTY
72695: ST_TO_ADDR
// if not array then
72696: LD_VAR 0 1
72700: NOT
72701: IFFALSE 72705
// exit ;
72703: GO 72804
// Randomize ;
72705: CALL_OW 10
// for i = array downto 1 do
72709: LD_ADDR_VAR 0 3
72713: PUSH
72714: DOUBLE
72715: LD_VAR 0 1
72719: INC
72720: ST_TO_ADDR
72721: LD_INT 1
72723: PUSH
72724: FOR_DOWNTO
72725: IFFALSE 72802
// begin index := rand ( 1 , array ) ;
72727: LD_ADDR_VAR 0 4
72731: PUSH
72732: LD_INT 1
72734: PPUSH
72735: LD_VAR 0 1
72739: PPUSH
72740: CALL_OW 12
72744: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72745: LD_ADDR_VAR 0 2
72749: PUSH
72750: LD_VAR 0 2
72754: PPUSH
72755: LD_VAR 0 2
72759: PUSH
72760: LD_INT 1
72762: PLUS
72763: PPUSH
72764: LD_VAR 0 1
72768: PUSH
72769: LD_VAR 0 4
72773: ARRAY
72774: PPUSH
72775: CALL_OW 2
72779: ST_TO_ADDR
// array := Delete ( array , index ) ;
72780: LD_ADDR_VAR 0 1
72784: PUSH
72785: LD_VAR 0 1
72789: PPUSH
72790: LD_VAR 0 4
72794: PPUSH
72795: CALL_OW 3
72799: ST_TO_ADDR
// end ;
72800: GO 72724
72802: POP
72803: POP
// end ;
72804: LD_VAR 0 2
72808: RET
// export function GetBaseMaterials ( base ) ; begin
72809: LD_INT 0
72811: PPUSH
// result := [ 0 , 0 , 0 ] ;
72812: LD_ADDR_VAR 0 2
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: LD_INT 0
72822: PUSH
72823: LD_INT 0
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: LIST
72830: ST_TO_ADDR
// if not base then
72831: LD_VAR 0 1
72835: NOT
72836: IFFALSE 72840
// exit ;
72838: GO 72889
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72840: LD_ADDR_VAR 0 2
72844: PUSH
72845: LD_VAR 0 1
72849: PPUSH
72850: LD_INT 1
72852: PPUSH
72853: CALL_OW 275
72857: PUSH
72858: LD_VAR 0 1
72862: PPUSH
72863: LD_INT 2
72865: PPUSH
72866: CALL_OW 275
72870: PUSH
72871: LD_VAR 0 1
72875: PPUSH
72876: LD_INT 3
72878: PPUSH
72879: CALL_OW 275
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: LIST
72888: ST_TO_ADDR
// end ;
72889: LD_VAR 0 2
72893: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72894: LD_INT 0
72896: PPUSH
72897: PPUSH
// result := array ;
72898: LD_ADDR_VAR 0 3
72902: PUSH
72903: LD_VAR 0 1
72907: ST_TO_ADDR
// if size >= result then
72908: LD_VAR 0 2
72912: PUSH
72913: LD_VAR 0 3
72917: GREATEREQUAL
72918: IFFALSE 72922
// exit ;
72920: GO 72972
// if size then
72922: LD_VAR 0 2
72926: IFFALSE 72972
// for i := array downto size do
72928: LD_ADDR_VAR 0 4
72932: PUSH
72933: DOUBLE
72934: LD_VAR 0 1
72938: INC
72939: ST_TO_ADDR
72940: LD_VAR 0 2
72944: PUSH
72945: FOR_DOWNTO
72946: IFFALSE 72970
// result := Delete ( result , result ) ;
72948: LD_ADDR_VAR 0 3
72952: PUSH
72953: LD_VAR 0 3
72957: PPUSH
72958: LD_VAR 0 3
72962: PPUSH
72963: CALL_OW 3
72967: ST_TO_ADDR
72968: GO 72945
72970: POP
72971: POP
// end ;
72972: LD_VAR 0 3
72976: RET
// export function ComExit ( unit ) ; var tmp ; begin
72977: LD_INT 0
72979: PPUSH
72980: PPUSH
// if not IsInUnit ( unit ) then
72981: LD_VAR 0 1
72985: PPUSH
72986: CALL_OW 310
72990: NOT
72991: IFFALSE 72995
// exit ;
72993: GO 73055
// tmp := IsInUnit ( unit ) ;
72995: LD_ADDR_VAR 0 3
72999: PUSH
73000: LD_VAR 0 1
73004: PPUSH
73005: CALL_OW 310
73009: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
73010: LD_VAR 0 3
73014: PPUSH
73015: CALL_OW 247
73019: PUSH
73020: LD_INT 2
73022: EQUAL
73023: IFFALSE 73036
// ComExitVehicle ( unit ) else
73025: LD_VAR 0 1
73029: PPUSH
73030: CALL_OW 121
73034: GO 73045
// ComExitBuilding ( unit ) ;
73036: LD_VAR 0 1
73040: PPUSH
73041: CALL_OW 122
// result := tmp ;
73045: LD_ADDR_VAR 0 2
73049: PUSH
73050: LD_VAR 0 3
73054: ST_TO_ADDR
// end ;
73055: LD_VAR 0 2
73059: RET
// export function ComExitAll ( units ) ; var i ; begin
73060: LD_INT 0
73062: PPUSH
73063: PPUSH
// if not units then
73064: LD_VAR 0 1
73068: NOT
73069: IFFALSE 73073
// exit ;
73071: GO 73099
// for i in units do
73073: LD_ADDR_VAR 0 3
73077: PUSH
73078: LD_VAR 0 1
73082: PUSH
73083: FOR_IN
73084: IFFALSE 73097
// ComExit ( i ) ;
73086: LD_VAR 0 3
73090: PPUSH
73091: CALL 72977 0 1
73095: GO 73083
73097: POP
73098: POP
// end ;
73099: LD_VAR 0 2
73103: RET
// export function ResetHc ; begin
73104: LD_INT 0
73106: PPUSH
// InitHc ;
73107: CALL_OW 19
// hc_importance := 0 ;
73111: LD_ADDR_OWVAR 32
73115: PUSH
73116: LD_INT 0
73118: ST_TO_ADDR
// end ;
73119: LD_VAR 0 1
73123: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
73124: LD_INT 0
73126: PPUSH
73127: PPUSH
73128: PPUSH
// _x := ( x1 + x2 ) div 2 ;
73129: LD_ADDR_VAR 0 6
73133: PUSH
73134: LD_VAR 0 1
73138: PUSH
73139: LD_VAR 0 3
73143: PLUS
73144: PUSH
73145: LD_INT 2
73147: DIV
73148: ST_TO_ADDR
// if _x < 0 then
73149: LD_VAR 0 6
73153: PUSH
73154: LD_INT 0
73156: LESS
73157: IFFALSE 73174
// _x := _x * - 1 ;
73159: LD_ADDR_VAR 0 6
73163: PUSH
73164: LD_VAR 0 6
73168: PUSH
73169: LD_INT 1
73171: NEG
73172: MUL
73173: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73174: LD_ADDR_VAR 0 7
73178: PUSH
73179: LD_VAR 0 2
73183: PUSH
73184: LD_VAR 0 4
73188: PLUS
73189: PUSH
73190: LD_INT 2
73192: DIV
73193: ST_TO_ADDR
// if _y < 0 then
73194: LD_VAR 0 7
73198: PUSH
73199: LD_INT 0
73201: LESS
73202: IFFALSE 73219
// _y := _y * - 1 ;
73204: LD_ADDR_VAR 0 7
73208: PUSH
73209: LD_VAR 0 7
73213: PUSH
73214: LD_INT 1
73216: NEG
73217: MUL
73218: ST_TO_ADDR
// result := [ _x , _y ] ;
73219: LD_ADDR_VAR 0 5
73223: PUSH
73224: LD_VAR 0 6
73228: PUSH
73229: LD_VAR 0 7
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: ST_TO_ADDR
// end ;
73238: LD_VAR 0 5
73242: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73243: LD_INT 0
73245: PPUSH
73246: PPUSH
73247: PPUSH
73248: PPUSH
// task := GetTaskList ( unit ) ;
73249: LD_ADDR_VAR 0 7
73253: PUSH
73254: LD_VAR 0 1
73258: PPUSH
73259: CALL_OW 437
73263: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73264: LD_VAR 0 7
73268: NOT
73269: PUSH
73270: LD_VAR 0 1
73274: PPUSH
73275: LD_VAR 0 2
73279: PPUSH
73280: CALL_OW 308
73284: NOT
73285: AND
73286: IFFALSE 73290
// exit ;
73288: GO 73408
// if IsInArea ( unit , area ) then
73290: LD_VAR 0 1
73294: PPUSH
73295: LD_VAR 0 2
73299: PPUSH
73300: CALL_OW 308
73304: IFFALSE 73322
// begin ComMoveToArea ( unit , goAway ) ;
73306: LD_VAR 0 1
73310: PPUSH
73311: LD_VAR 0 3
73315: PPUSH
73316: CALL_OW 113
// exit ;
73320: GO 73408
// end ; if task [ 1 ] [ 1 ] <> M then
73322: LD_VAR 0 7
73326: PUSH
73327: LD_INT 1
73329: ARRAY
73330: PUSH
73331: LD_INT 1
73333: ARRAY
73334: PUSH
73335: LD_STRING M
73337: NONEQUAL
73338: IFFALSE 73342
// exit ;
73340: GO 73408
// x := task [ 1 ] [ 2 ] ;
73342: LD_ADDR_VAR 0 5
73346: PUSH
73347: LD_VAR 0 7
73351: PUSH
73352: LD_INT 1
73354: ARRAY
73355: PUSH
73356: LD_INT 2
73358: ARRAY
73359: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73360: LD_ADDR_VAR 0 6
73364: PUSH
73365: LD_VAR 0 7
73369: PUSH
73370: LD_INT 1
73372: ARRAY
73373: PUSH
73374: LD_INT 3
73376: ARRAY
73377: ST_TO_ADDR
// if InArea ( x , y , area ) then
73378: LD_VAR 0 5
73382: PPUSH
73383: LD_VAR 0 6
73387: PPUSH
73388: LD_VAR 0 2
73392: PPUSH
73393: CALL_OW 309
73397: IFFALSE 73408
// ComStop ( unit ) ;
73399: LD_VAR 0 1
73403: PPUSH
73404: CALL_OW 141
// end ;
73408: LD_VAR 0 4
73412: RET
// export function Abs ( value ) ; begin
73413: LD_INT 0
73415: PPUSH
// result := value ;
73416: LD_ADDR_VAR 0 2
73420: PUSH
73421: LD_VAR 0 1
73425: ST_TO_ADDR
// if value < 0 then
73426: LD_VAR 0 1
73430: PUSH
73431: LD_INT 0
73433: LESS
73434: IFFALSE 73451
// result := value * - 1 ;
73436: LD_ADDR_VAR 0 2
73440: PUSH
73441: LD_VAR 0 1
73445: PUSH
73446: LD_INT 1
73448: NEG
73449: MUL
73450: ST_TO_ADDR
// end ;
73451: LD_VAR 0 2
73455: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73456: LD_INT 0
73458: PPUSH
73459: PPUSH
73460: PPUSH
73461: PPUSH
73462: PPUSH
73463: PPUSH
73464: PPUSH
73465: PPUSH
// if not unit or not building then
73466: LD_VAR 0 1
73470: NOT
73471: PUSH
73472: LD_VAR 0 2
73476: NOT
73477: OR
73478: IFFALSE 73482
// exit ;
73480: GO 73708
// x := GetX ( building ) ;
73482: LD_ADDR_VAR 0 4
73486: PUSH
73487: LD_VAR 0 2
73491: PPUSH
73492: CALL_OW 250
73496: ST_TO_ADDR
// y := GetY ( building ) ;
73497: LD_ADDR_VAR 0 6
73501: PUSH
73502: LD_VAR 0 2
73506: PPUSH
73507: CALL_OW 251
73511: ST_TO_ADDR
// d := GetDir ( building ) ;
73512: LD_ADDR_VAR 0 8
73516: PUSH
73517: LD_VAR 0 2
73521: PPUSH
73522: CALL_OW 254
73526: ST_TO_ADDR
// r := 4 ;
73527: LD_ADDR_VAR 0 9
73531: PUSH
73532: LD_INT 4
73534: ST_TO_ADDR
// for i := 1 to 5 do
73535: LD_ADDR_VAR 0 10
73539: PUSH
73540: DOUBLE
73541: LD_INT 1
73543: DEC
73544: ST_TO_ADDR
73545: LD_INT 5
73547: PUSH
73548: FOR_TO
73549: IFFALSE 73706
// begin _x := ShiftX ( x , d , r + i ) ;
73551: LD_ADDR_VAR 0 5
73555: PUSH
73556: LD_VAR 0 4
73560: PPUSH
73561: LD_VAR 0 8
73565: PPUSH
73566: LD_VAR 0 9
73570: PUSH
73571: LD_VAR 0 10
73575: PLUS
73576: PPUSH
73577: CALL_OW 272
73581: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73582: LD_ADDR_VAR 0 7
73586: PUSH
73587: LD_VAR 0 6
73591: PPUSH
73592: LD_VAR 0 8
73596: PPUSH
73597: LD_VAR 0 9
73601: PUSH
73602: LD_VAR 0 10
73606: PLUS
73607: PPUSH
73608: CALL_OW 273
73612: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73613: LD_VAR 0 5
73617: PPUSH
73618: LD_VAR 0 7
73622: PPUSH
73623: CALL_OW 488
73627: PUSH
73628: LD_VAR 0 5
73632: PPUSH
73633: LD_VAR 0 7
73637: PPUSH
73638: CALL_OW 428
73642: PPUSH
73643: CALL_OW 247
73647: PUSH
73648: LD_INT 3
73650: PUSH
73651: LD_INT 2
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: IN
73658: NOT
73659: AND
73660: IFFALSE 73704
// begin ComMoveXY ( unit , _x , _y ) ;
73662: LD_VAR 0 1
73666: PPUSH
73667: LD_VAR 0 5
73671: PPUSH
73672: LD_VAR 0 7
73676: PPUSH
73677: CALL_OW 111
// result := [ _x , _y ] ;
73681: LD_ADDR_VAR 0 3
73685: PUSH
73686: LD_VAR 0 5
73690: PUSH
73691: LD_VAR 0 7
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: ST_TO_ADDR
// exit ;
73700: POP
73701: POP
73702: GO 73708
// end ; end ;
73704: GO 73548
73706: POP
73707: POP
// end ;
73708: LD_VAR 0 3
73712: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73713: LD_INT 0
73715: PPUSH
73716: PPUSH
73717: PPUSH
// result := 0 ;
73718: LD_ADDR_VAR 0 3
73722: PUSH
73723: LD_INT 0
73725: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73726: LD_VAR 0 1
73730: PUSH
73731: LD_INT 0
73733: LESS
73734: PUSH
73735: LD_VAR 0 1
73739: PUSH
73740: LD_INT 8
73742: GREATER
73743: OR
73744: PUSH
73745: LD_VAR 0 2
73749: PUSH
73750: LD_INT 0
73752: LESS
73753: OR
73754: PUSH
73755: LD_VAR 0 2
73759: PUSH
73760: LD_INT 8
73762: GREATER
73763: OR
73764: IFFALSE 73768
// exit ;
73766: GO 73843
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73768: LD_ADDR_VAR 0 4
73772: PUSH
73773: LD_INT 22
73775: PUSH
73776: LD_VAR 0 2
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PPUSH
73785: CALL_OW 69
73789: PUSH
73790: FOR_IN
73791: IFFALSE 73841
// begin un := UnitShoot ( i ) ;
73793: LD_ADDR_VAR 0 5
73797: PUSH
73798: LD_VAR 0 4
73802: PPUSH
73803: CALL_OW 504
73807: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73808: LD_VAR 0 5
73812: PPUSH
73813: CALL_OW 255
73817: PUSH
73818: LD_VAR 0 1
73822: EQUAL
73823: IFFALSE 73839
// begin result := un ;
73825: LD_ADDR_VAR 0 3
73829: PUSH
73830: LD_VAR 0 5
73834: ST_TO_ADDR
// exit ;
73835: POP
73836: POP
73837: GO 73843
// end ; end ;
73839: GO 73790
73841: POP
73842: POP
// end ;
73843: LD_VAR 0 3
73847: RET
// export function GetCargoBay ( units ) ; begin
73848: LD_INT 0
73850: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73851: LD_ADDR_VAR 0 2
73855: PUSH
73856: LD_VAR 0 1
73860: PPUSH
73861: LD_INT 2
73863: PUSH
73864: LD_INT 34
73866: PUSH
73867: LD_INT 12
73869: PUSH
73870: EMPTY
73871: LIST
73872: LIST
73873: PUSH
73874: LD_INT 34
73876: PUSH
73877: LD_INT 51
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: LD_INT 34
73886: PUSH
73887: LD_INT 32
73889: PUSH
73890: EMPTY
73891: LIST
73892: LIST
73893: PUSH
73894: LD_INT 34
73896: PUSH
73897: LD_INT 89
73899: PUSH
73900: EMPTY
73901: LIST
73902: LIST
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: PPUSH
73911: CALL_OW 72
73915: ST_TO_ADDR
// end ;
73916: LD_VAR 0 2
73920: RET
// export function Negate ( value ) ; begin
73921: LD_INT 0
73923: PPUSH
// result := not value ;
73924: LD_ADDR_VAR 0 2
73928: PUSH
73929: LD_VAR 0 1
73933: NOT
73934: ST_TO_ADDR
// end ;
73935: LD_VAR 0 2
73939: RET
// export function Inc ( value ) ; begin
73940: LD_INT 0
73942: PPUSH
// result := value + 1 ;
73943: LD_ADDR_VAR 0 2
73947: PUSH
73948: LD_VAR 0 1
73952: PUSH
73953: LD_INT 1
73955: PLUS
73956: ST_TO_ADDR
// end ;
73957: LD_VAR 0 2
73961: RET
// export function Dec ( value ) ; begin
73962: LD_INT 0
73964: PPUSH
// result := value - 1 ;
73965: LD_ADDR_VAR 0 2
73969: PUSH
73970: LD_VAR 0 1
73974: PUSH
73975: LD_INT 1
73977: MINUS
73978: ST_TO_ADDR
// end ;
73979: LD_VAR 0 2
73983: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73984: LD_INT 0
73986: PPUSH
73987: PPUSH
73988: PPUSH
73989: PPUSH
73990: PPUSH
73991: PPUSH
73992: PPUSH
73993: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73994: LD_VAR 0 1
73998: PPUSH
73999: LD_VAR 0 2
74003: PPUSH
74004: CALL_OW 488
74008: NOT
74009: PUSH
74010: LD_VAR 0 3
74014: PPUSH
74015: LD_VAR 0 4
74019: PPUSH
74020: CALL_OW 488
74024: NOT
74025: OR
74026: IFFALSE 74039
// begin result := - 1 ;
74028: LD_ADDR_VAR 0 5
74032: PUSH
74033: LD_INT 1
74035: NEG
74036: ST_TO_ADDR
// exit ;
74037: GO 74274
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
74039: LD_ADDR_VAR 0 12
74043: PUSH
74044: LD_VAR 0 1
74048: PPUSH
74049: LD_VAR 0 2
74053: PPUSH
74054: LD_VAR 0 3
74058: PPUSH
74059: LD_VAR 0 4
74063: PPUSH
74064: CALL 73124 0 4
74068: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
74069: LD_ADDR_VAR 0 11
74073: PUSH
74074: LD_VAR 0 1
74078: PPUSH
74079: LD_VAR 0 2
74083: PPUSH
74084: LD_VAR 0 12
74088: PUSH
74089: LD_INT 1
74091: ARRAY
74092: PPUSH
74093: LD_VAR 0 12
74097: PUSH
74098: LD_INT 2
74100: ARRAY
74101: PPUSH
74102: CALL_OW 298
74106: ST_TO_ADDR
// distance := 9999 ;
74107: LD_ADDR_VAR 0 10
74111: PUSH
74112: LD_INT 9999
74114: ST_TO_ADDR
// for i := 0 to 5 do
74115: LD_ADDR_VAR 0 6
74119: PUSH
74120: DOUBLE
74121: LD_INT 0
74123: DEC
74124: ST_TO_ADDR
74125: LD_INT 5
74127: PUSH
74128: FOR_TO
74129: IFFALSE 74272
// begin _x := ShiftX ( x1 , i , centerDist ) ;
74131: LD_ADDR_VAR 0 7
74135: PUSH
74136: LD_VAR 0 1
74140: PPUSH
74141: LD_VAR 0 6
74145: PPUSH
74146: LD_VAR 0 11
74150: PPUSH
74151: CALL_OW 272
74155: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74156: LD_ADDR_VAR 0 8
74160: PUSH
74161: LD_VAR 0 2
74165: PPUSH
74166: LD_VAR 0 6
74170: PPUSH
74171: LD_VAR 0 11
74175: PPUSH
74176: CALL_OW 273
74180: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74181: LD_VAR 0 7
74185: PPUSH
74186: LD_VAR 0 8
74190: PPUSH
74191: CALL_OW 488
74195: NOT
74196: IFFALSE 74200
// continue ;
74198: GO 74128
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74200: LD_ADDR_VAR 0 9
74204: PUSH
74205: LD_VAR 0 12
74209: PUSH
74210: LD_INT 1
74212: ARRAY
74213: PPUSH
74214: LD_VAR 0 12
74218: PUSH
74219: LD_INT 2
74221: ARRAY
74222: PPUSH
74223: LD_VAR 0 7
74227: PPUSH
74228: LD_VAR 0 8
74232: PPUSH
74233: CALL_OW 298
74237: ST_TO_ADDR
// if tmp < distance then
74238: LD_VAR 0 9
74242: PUSH
74243: LD_VAR 0 10
74247: LESS
74248: IFFALSE 74270
// begin result := i ;
74250: LD_ADDR_VAR 0 5
74254: PUSH
74255: LD_VAR 0 6
74259: ST_TO_ADDR
// distance := tmp ;
74260: LD_ADDR_VAR 0 10
74264: PUSH
74265: LD_VAR 0 9
74269: ST_TO_ADDR
// end ; end ;
74270: GO 74128
74272: POP
74273: POP
// end ;
74274: LD_VAR 0 5
74278: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74279: LD_INT 0
74281: PPUSH
74282: PPUSH
// if not driver or not IsInUnit ( driver ) then
74283: LD_VAR 0 1
74287: NOT
74288: PUSH
74289: LD_VAR 0 1
74293: PPUSH
74294: CALL_OW 310
74298: NOT
74299: OR
74300: IFFALSE 74304
// exit ;
74302: GO 74394
// vehicle := IsInUnit ( driver ) ;
74304: LD_ADDR_VAR 0 3
74308: PUSH
74309: LD_VAR 0 1
74313: PPUSH
74314: CALL_OW 310
74318: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74319: LD_VAR 0 1
74323: PPUSH
74324: LD_STRING \
74326: PUSH
74327: LD_INT 0
74329: PUSH
74330: LD_INT 0
74332: PUSH
74333: LD_INT 0
74335: PUSH
74336: LD_INT 0
74338: PUSH
74339: LD_INT 0
74341: PUSH
74342: LD_INT 0
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: PUSH
74354: LD_STRING E
74356: PUSH
74357: LD_INT 0
74359: PUSH
74360: LD_INT 0
74362: PUSH
74363: LD_VAR 0 3
74367: PUSH
74368: LD_INT 0
74370: PUSH
74371: LD_INT 0
74373: PUSH
74374: LD_INT 0
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: LIST
74381: LIST
74382: LIST
74383: LIST
74384: LIST
74385: PUSH
74386: EMPTY
74387: LIST
74388: LIST
74389: PPUSH
74390: CALL_OW 446
// end ;
74394: LD_VAR 0 2
74398: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74399: LD_INT 0
74401: PPUSH
74402: PPUSH
// if not driver or not IsInUnit ( driver ) then
74403: LD_VAR 0 1
74407: NOT
74408: PUSH
74409: LD_VAR 0 1
74413: PPUSH
74414: CALL_OW 310
74418: NOT
74419: OR
74420: IFFALSE 74424
// exit ;
74422: GO 74514
// vehicle := IsInUnit ( driver ) ;
74424: LD_ADDR_VAR 0 3
74428: PUSH
74429: LD_VAR 0 1
74433: PPUSH
74434: CALL_OW 310
74438: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74439: LD_VAR 0 1
74443: PPUSH
74444: LD_STRING \
74446: PUSH
74447: LD_INT 0
74449: PUSH
74450: LD_INT 0
74452: PUSH
74453: LD_INT 0
74455: PUSH
74456: LD_INT 0
74458: PUSH
74459: LD_INT 0
74461: PUSH
74462: LD_INT 0
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: PUSH
74474: LD_STRING E
74476: PUSH
74477: LD_INT 0
74479: PUSH
74480: LD_INT 0
74482: PUSH
74483: LD_VAR 0 3
74487: PUSH
74488: LD_INT 0
74490: PUSH
74491: LD_INT 0
74493: PUSH
74494: LD_INT 0
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: LIST
74501: LIST
74502: LIST
74503: LIST
74504: LIST
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PPUSH
74510: CALL_OW 447
// end ;
74514: LD_VAR 0 2
74518: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74519: LD_INT 0
74521: PPUSH
74522: PPUSH
74523: PPUSH
// tmp := [ ] ;
74524: LD_ADDR_VAR 0 5
74528: PUSH
74529: EMPTY
74530: ST_TO_ADDR
// for i in units do
74531: LD_ADDR_VAR 0 4
74535: PUSH
74536: LD_VAR 0 1
74540: PUSH
74541: FOR_IN
74542: IFFALSE 74580
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74544: LD_ADDR_VAR 0 5
74548: PUSH
74549: LD_VAR 0 5
74553: PPUSH
74554: LD_VAR 0 5
74558: PUSH
74559: LD_INT 1
74561: PLUS
74562: PPUSH
74563: LD_VAR 0 4
74567: PPUSH
74568: CALL_OW 256
74572: PPUSH
74573: CALL_OW 2
74577: ST_TO_ADDR
74578: GO 74541
74580: POP
74581: POP
// if not tmp then
74582: LD_VAR 0 5
74586: NOT
74587: IFFALSE 74591
// exit ;
74589: GO 74639
// if asc then
74591: LD_VAR 0 2
74595: IFFALSE 74619
// result := SortListByListAsc ( units , tmp ) else
74597: LD_ADDR_VAR 0 3
74601: PUSH
74602: LD_VAR 0 1
74606: PPUSH
74607: LD_VAR 0 5
74611: PPUSH
74612: CALL_OW 76
74616: ST_TO_ADDR
74617: GO 74639
// result := SortListByListDesc ( units , tmp ) ;
74619: LD_ADDR_VAR 0 3
74623: PUSH
74624: LD_VAR 0 1
74628: PPUSH
74629: LD_VAR 0 5
74633: PPUSH
74634: CALL_OW 77
74638: ST_TO_ADDR
// end ;
74639: LD_VAR 0 3
74643: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74644: LD_INT 0
74646: PPUSH
74647: PPUSH
// task := GetTaskList ( mech ) ;
74648: LD_ADDR_VAR 0 4
74652: PUSH
74653: LD_VAR 0 1
74657: PPUSH
74658: CALL_OW 437
74662: ST_TO_ADDR
// if not task then
74663: LD_VAR 0 4
74667: NOT
74668: IFFALSE 74672
// exit ;
74670: GO 74714
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74672: LD_ADDR_VAR 0 3
74676: PUSH
74677: LD_VAR 0 4
74681: PUSH
74682: LD_INT 1
74684: ARRAY
74685: PUSH
74686: LD_INT 1
74688: ARRAY
74689: PUSH
74690: LD_STRING r
74692: EQUAL
74693: PUSH
74694: LD_VAR 0 4
74698: PUSH
74699: LD_INT 1
74701: ARRAY
74702: PUSH
74703: LD_INT 4
74705: ARRAY
74706: PUSH
74707: LD_VAR 0 2
74711: EQUAL
74712: AND
74713: ST_TO_ADDR
// end ;
74714: LD_VAR 0 3
74718: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74719: LD_INT 0
74721: PPUSH
// SetDir ( unit , d ) ;
74722: LD_VAR 0 1
74726: PPUSH
74727: LD_VAR 0 4
74731: PPUSH
74732: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74736: LD_VAR 0 1
74740: PPUSH
74741: LD_VAR 0 2
74745: PPUSH
74746: LD_VAR 0 3
74750: PPUSH
74751: LD_VAR 0 5
74755: PPUSH
74756: CALL_OW 48
// end ;
74760: LD_VAR 0 6
74764: RET
// export function ToNaturalNumber ( number ) ; begin
74765: LD_INT 0
74767: PPUSH
// result := number div 1 ;
74768: LD_ADDR_VAR 0 2
74772: PUSH
74773: LD_VAR 0 1
74777: PUSH
74778: LD_INT 1
74780: DIV
74781: ST_TO_ADDR
// if number < 0 then
74782: LD_VAR 0 1
74786: PUSH
74787: LD_INT 0
74789: LESS
74790: IFFALSE 74800
// result := 0 ;
74792: LD_ADDR_VAR 0 2
74796: PUSH
74797: LD_INT 0
74799: ST_TO_ADDR
// end ;
74800: LD_VAR 0 2
74804: RET
// export function SortByClass ( units , class ) ; var un ; begin
74805: LD_INT 0
74807: PPUSH
74808: PPUSH
// if not units or not class then
74809: LD_VAR 0 1
74813: NOT
74814: PUSH
74815: LD_VAR 0 2
74819: NOT
74820: OR
74821: IFFALSE 74825
// exit ;
74823: GO 74920
// result := [ ] ;
74825: LD_ADDR_VAR 0 3
74829: PUSH
74830: EMPTY
74831: ST_TO_ADDR
// for un in units do
74832: LD_ADDR_VAR 0 4
74836: PUSH
74837: LD_VAR 0 1
74841: PUSH
74842: FOR_IN
74843: IFFALSE 74918
// if GetClass ( un ) = class then
74845: LD_VAR 0 4
74849: PPUSH
74850: CALL_OW 257
74854: PUSH
74855: LD_VAR 0 2
74859: EQUAL
74860: IFFALSE 74887
// result := Insert ( result , 1 , un ) else
74862: LD_ADDR_VAR 0 3
74866: PUSH
74867: LD_VAR 0 3
74871: PPUSH
74872: LD_INT 1
74874: PPUSH
74875: LD_VAR 0 4
74879: PPUSH
74880: CALL_OW 2
74884: ST_TO_ADDR
74885: GO 74916
// result := Replace ( result , result + 1 , un ) ;
74887: LD_ADDR_VAR 0 3
74891: PUSH
74892: LD_VAR 0 3
74896: PPUSH
74897: LD_VAR 0 3
74901: PUSH
74902: LD_INT 1
74904: PLUS
74905: PPUSH
74906: LD_VAR 0 4
74910: PPUSH
74911: CALL_OW 1
74915: ST_TO_ADDR
74916: GO 74842
74918: POP
74919: POP
// end ;
74920: LD_VAR 0 3
74924: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74925: LD_INT 0
74927: PPUSH
74928: PPUSH
74929: PPUSH
74930: PPUSH
74931: PPUSH
74932: PPUSH
74933: PPUSH
// result := [ ] ;
74934: LD_ADDR_VAR 0 4
74938: PUSH
74939: EMPTY
74940: ST_TO_ADDR
// if x - r < 0 then
74941: LD_VAR 0 1
74945: PUSH
74946: LD_VAR 0 3
74950: MINUS
74951: PUSH
74952: LD_INT 0
74954: LESS
74955: IFFALSE 74967
// min_x := 0 else
74957: LD_ADDR_VAR 0 8
74961: PUSH
74962: LD_INT 0
74964: ST_TO_ADDR
74965: GO 74983
// min_x := x - r ;
74967: LD_ADDR_VAR 0 8
74971: PUSH
74972: LD_VAR 0 1
74976: PUSH
74977: LD_VAR 0 3
74981: MINUS
74982: ST_TO_ADDR
// if y - r < 0 then
74983: LD_VAR 0 2
74987: PUSH
74988: LD_VAR 0 3
74992: MINUS
74993: PUSH
74994: LD_INT 0
74996: LESS
74997: IFFALSE 75009
// min_y := 0 else
74999: LD_ADDR_VAR 0 7
75003: PUSH
75004: LD_INT 0
75006: ST_TO_ADDR
75007: GO 75025
// min_y := y - r ;
75009: LD_ADDR_VAR 0 7
75013: PUSH
75014: LD_VAR 0 2
75018: PUSH
75019: LD_VAR 0 3
75023: MINUS
75024: ST_TO_ADDR
// max_x := x + r ;
75025: LD_ADDR_VAR 0 9
75029: PUSH
75030: LD_VAR 0 1
75034: PUSH
75035: LD_VAR 0 3
75039: PLUS
75040: ST_TO_ADDR
// max_y := y + r ;
75041: LD_ADDR_VAR 0 10
75045: PUSH
75046: LD_VAR 0 2
75050: PUSH
75051: LD_VAR 0 3
75055: PLUS
75056: ST_TO_ADDR
// for _x = min_x to max_x do
75057: LD_ADDR_VAR 0 5
75061: PUSH
75062: DOUBLE
75063: LD_VAR 0 8
75067: DEC
75068: ST_TO_ADDR
75069: LD_VAR 0 9
75073: PUSH
75074: FOR_TO
75075: IFFALSE 75176
// for _y = min_y to max_y do
75077: LD_ADDR_VAR 0 6
75081: PUSH
75082: DOUBLE
75083: LD_VAR 0 7
75087: DEC
75088: ST_TO_ADDR
75089: LD_VAR 0 10
75093: PUSH
75094: FOR_TO
75095: IFFALSE 75172
// begin if not ValidHex ( _x , _y ) then
75097: LD_VAR 0 5
75101: PPUSH
75102: LD_VAR 0 6
75106: PPUSH
75107: CALL_OW 488
75111: NOT
75112: IFFALSE 75116
// continue ;
75114: GO 75094
// if GetResourceTypeXY ( _x , _y ) then
75116: LD_VAR 0 5
75120: PPUSH
75121: LD_VAR 0 6
75125: PPUSH
75126: CALL_OW 283
75130: IFFALSE 75170
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
75132: LD_ADDR_VAR 0 4
75136: PUSH
75137: LD_VAR 0 4
75141: PPUSH
75142: LD_VAR 0 4
75146: PUSH
75147: LD_INT 1
75149: PLUS
75150: PPUSH
75151: LD_VAR 0 5
75155: PUSH
75156: LD_VAR 0 6
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PPUSH
75165: CALL_OW 1
75169: ST_TO_ADDR
// end ;
75170: GO 75094
75172: POP
75173: POP
75174: GO 75074
75176: POP
75177: POP
// end ;
75178: LD_VAR 0 4
75182: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75183: LD_INT 0
75185: PPUSH
75186: PPUSH
75187: PPUSH
75188: PPUSH
75189: PPUSH
75190: PPUSH
75191: PPUSH
75192: PPUSH
// if not units then
75193: LD_VAR 0 1
75197: NOT
75198: IFFALSE 75202
// exit ;
75200: GO 75726
// result := UnitFilter ( units , [ f_ok ] ) ;
75202: LD_ADDR_VAR 0 3
75206: PUSH
75207: LD_VAR 0 1
75211: PPUSH
75212: LD_INT 50
75214: PUSH
75215: EMPTY
75216: LIST
75217: PPUSH
75218: CALL_OW 72
75222: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75223: LD_ADDR_VAR 0 8
75227: PUSH
75228: LD_VAR 0 1
75232: PUSH
75233: LD_INT 1
75235: ARRAY
75236: PPUSH
75237: CALL_OW 255
75241: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75242: LD_ADDR_VAR 0 10
75246: PUSH
75247: LD_INT 29
75249: PUSH
75250: LD_INT 91
75252: PUSH
75253: LD_INT 49
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: ST_TO_ADDR
// if not result then
75261: LD_VAR 0 3
75265: NOT
75266: IFFALSE 75270
// exit ;
75268: GO 75726
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75270: LD_ADDR_VAR 0 5
75274: PUSH
75275: LD_INT 81
75277: PUSH
75278: LD_VAR 0 8
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PPUSH
75287: CALL_OW 69
75291: ST_TO_ADDR
// for i in result do
75292: LD_ADDR_VAR 0 4
75296: PUSH
75297: LD_VAR 0 3
75301: PUSH
75302: FOR_IN
75303: IFFALSE 75724
// begin tag := GetTag ( i ) + 1 ;
75305: LD_ADDR_VAR 0 9
75309: PUSH
75310: LD_VAR 0 4
75314: PPUSH
75315: CALL_OW 110
75319: PUSH
75320: LD_INT 1
75322: PLUS
75323: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75324: LD_ADDR_VAR 0 7
75328: PUSH
75329: LD_VAR 0 4
75333: PPUSH
75334: CALL_OW 250
75338: PPUSH
75339: LD_VAR 0 4
75343: PPUSH
75344: CALL_OW 251
75348: PPUSH
75349: LD_INT 6
75351: PPUSH
75352: CALL 74925 0 3
75356: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75357: LD_VAR 0 4
75361: PPUSH
75362: CALL_OW 247
75366: PUSH
75367: LD_INT 2
75369: EQUAL
75370: PUSH
75371: LD_VAR 0 7
75375: AND
75376: PUSH
75377: LD_VAR 0 4
75381: PPUSH
75382: CALL_OW 264
75386: PUSH
75387: LD_VAR 0 10
75391: IN
75392: NOT
75393: AND
75394: IFFALSE 75433
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75396: LD_VAR 0 4
75400: PPUSH
75401: LD_VAR 0 7
75405: PUSH
75406: LD_INT 1
75408: ARRAY
75409: PUSH
75410: LD_INT 1
75412: ARRAY
75413: PPUSH
75414: LD_VAR 0 7
75418: PUSH
75419: LD_INT 1
75421: ARRAY
75422: PUSH
75423: LD_INT 2
75425: ARRAY
75426: PPUSH
75427: CALL_OW 116
75431: GO 75722
// if path > tag then
75433: LD_VAR 0 2
75437: PUSH
75438: LD_VAR 0 9
75442: GREATER
75443: IFFALSE 75651
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75445: LD_ADDR_VAR 0 6
75449: PUSH
75450: LD_VAR 0 5
75454: PPUSH
75455: LD_INT 91
75457: PUSH
75458: LD_VAR 0 4
75462: PUSH
75463: LD_INT 8
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: LIST
75470: PPUSH
75471: CALL_OW 72
75475: ST_TO_ADDR
// if nearEnemy then
75476: LD_VAR 0 6
75480: IFFALSE 75549
// begin if GetWeapon ( i ) = ru_time_lapser then
75482: LD_VAR 0 4
75486: PPUSH
75487: CALL_OW 264
75491: PUSH
75492: LD_INT 49
75494: EQUAL
75495: IFFALSE 75523
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75497: LD_VAR 0 4
75501: PPUSH
75502: LD_VAR 0 6
75506: PPUSH
75507: LD_VAR 0 4
75511: PPUSH
75512: CALL_OW 74
75516: PPUSH
75517: CALL_OW 112
75521: GO 75547
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75523: LD_VAR 0 4
75527: PPUSH
75528: LD_VAR 0 6
75532: PPUSH
75533: LD_VAR 0 4
75537: PPUSH
75538: CALL_OW 74
75542: PPUSH
75543: CALL_OW 115
// end else
75547: GO 75649
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75549: LD_VAR 0 4
75553: PPUSH
75554: LD_VAR 0 2
75558: PUSH
75559: LD_VAR 0 9
75563: ARRAY
75564: PUSH
75565: LD_INT 1
75567: ARRAY
75568: PPUSH
75569: LD_VAR 0 2
75573: PUSH
75574: LD_VAR 0 9
75578: ARRAY
75579: PUSH
75580: LD_INT 2
75582: ARRAY
75583: PPUSH
75584: CALL_OW 297
75588: PUSH
75589: LD_INT 6
75591: GREATER
75592: IFFALSE 75635
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75594: LD_VAR 0 4
75598: PPUSH
75599: LD_VAR 0 2
75603: PUSH
75604: LD_VAR 0 9
75608: ARRAY
75609: PUSH
75610: LD_INT 1
75612: ARRAY
75613: PPUSH
75614: LD_VAR 0 2
75618: PUSH
75619: LD_VAR 0 9
75623: ARRAY
75624: PUSH
75625: LD_INT 2
75627: ARRAY
75628: PPUSH
75629: CALL_OW 114
75633: GO 75649
// SetTag ( i , tag ) ;
75635: LD_VAR 0 4
75639: PPUSH
75640: LD_VAR 0 9
75644: PPUSH
75645: CALL_OW 109
// end else
75649: GO 75722
// if enemy then
75651: LD_VAR 0 5
75655: IFFALSE 75722
// begin if GetWeapon ( i ) = ru_time_lapser then
75657: LD_VAR 0 4
75661: PPUSH
75662: CALL_OW 264
75666: PUSH
75667: LD_INT 49
75669: EQUAL
75670: IFFALSE 75698
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75672: LD_VAR 0 4
75676: PPUSH
75677: LD_VAR 0 5
75681: PPUSH
75682: LD_VAR 0 4
75686: PPUSH
75687: CALL_OW 74
75691: PPUSH
75692: CALL_OW 112
75696: GO 75722
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75698: LD_VAR 0 4
75702: PPUSH
75703: LD_VAR 0 5
75707: PPUSH
75708: LD_VAR 0 4
75712: PPUSH
75713: CALL_OW 74
75717: PPUSH
75718: CALL_OW 115
// end ; end ;
75722: GO 75302
75724: POP
75725: POP
// end ;
75726: LD_VAR 0 3
75730: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75731: LD_INT 0
75733: PPUSH
75734: PPUSH
75735: PPUSH
// if not unit or IsInUnit ( unit ) then
75736: LD_VAR 0 1
75740: NOT
75741: PUSH
75742: LD_VAR 0 1
75746: PPUSH
75747: CALL_OW 310
75751: OR
75752: IFFALSE 75756
// exit ;
75754: GO 75847
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75756: LD_ADDR_VAR 0 4
75760: PUSH
75761: LD_VAR 0 1
75765: PPUSH
75766: CALL_OW 250
75770: PPUSH
75771: LD_VAR 0 2
75775: PPUSH
75776: LD_INT 1
75778: PPUSH
75779: CALL_OW 272
75783: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75784: LD_ADDR_VAR 0 5
75788: PUSH
75789: LD_VAR 0 1
75793: PPUSH
75794: CALL_OW 251
75798: PPUSH
75799: LD_VAR 0 2
75803: PPUSH
75804: LD_INT 1
75806: PPUSH
75807: CALL_OW 273
75811: ST_TO_ADDR
// if ValidHex ( x , y ) then
75812: LD_VAR 0 4
75816: PPUSH
75817: LD_VAR 0 5
75821: PPUSH
75822: CALL_OW 488
75826: IFFALSE 75847
// ComTurnXY ( unit , x , y ) ;
75828: LD_VAR 0 1
75832: PPUSH
75833: LD_VAR 0 4
75837: PPUSH
75838: LD_VAR 0 5
75842: PPUSH
75843: CALL_OW 118
// end ;
75847: LD_VAR 0 3
75851: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75852: LD_INT 0
75854: PPUSH
75855: PPUSH
// result := false ;
75856: LD_ADDR_VAR 0 3
75860: PUSH
75861: LD_INT 0
75863: ST_TO_ADDR
// if not units then
75864: LD_VAR 0 2
75868: NOT
75869: IFFALSE 75873
// exit ;
75871: GO 75918
// for i in units do
75873: LD_ADDR_VAR 0 4
75877: PUSH
75878: LD_VAR 0 2
75882: PUSH
75883: FOR_IN
75884: IFFALSE 75916
// if See ( side , i ) then
75886: LD_VAR 0 1
75890: PPUSH
75891: LD_VAR 0 4
75895: PPUSH
75896: CALL_OW 292
75900: IFFALSE 75914
// begin result := true ;
75902: LD_ADDR_VAR 0 3
75906: PUSH
75907: LD_INT 1
75909: ST_TO_ADDR
// exit ;
75910: POP
75911: POP
75912: GO 75918
// end ;
75914: GO 75883
75916: POP
75917: POP
// end ;
75918: LD_VAR 0 3
75922: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75923: LD_INT 0
75925: PPUSH
75926: PPUSH
75927: PPUSH
75928: PPUSH
// if not unit or not points then
75929: LD_VAR 0 1
75933: NOT
75934: PUSH
75935: LD_VAR 0 2
75939: NOT
75940: OR
75941: IFFALSE 75945
// exit ;
75943: GO 76035
// dist := 99999 ;
75945: LD_ADDR_VAR 0 5
75949: PUSH
75950: LD_INT 99999
75952: ST_TO_ADDR
// for i in points do
75953: LD_ADDR_VAR 0 4
75957: PUSH
75958: LD_VAR 0 2
75962: PUSH
75963: FOR_IN
75964: IFFALSE 76033
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75966: LD_ADDR_VAR 0 6
75970: PUSH
75971: LD_VAR 0 1
75975: PPUSH
75976: LD_VAR 0 4
75980: PUSH
75981: LD_INT 1
75983: ARRAY
75984: PPUSH
75985: LD_VAR 0 4
75989: PUSH
75990: LD_INT 2
75992: ARRAY
75993: PPUSH
75994: CALL_OW 297
75998: ST_TO_ADDR
// if tmpDist < dist then
75999: LD_VAR 0 6
76003: PUSH
76004: LD_VAR 0 5
76008: LESS
76009: IFFALSE 76031
// begin result := i ;
76011: LD_ADDR_VAR 0 3
76015: PUSH
76016: LD_VAR 0 4
76020: ST_TO_ADDR
// dist := tmpDist ;
76021: LD_ADDR_VAR 0 5
76025: PUSH
76026: LD_VAR 0 6
76030: ST_TO_ADDR
// end ; end ;
76031: GO 75963
76033: POP
76034: POP
// end ;
76035: LD_VAR 0 3
76039: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
76040: LD_INT 0
76042: PPUSH
// uc_side := side ;
76043: LD_ADDR_OWVAR 20
76047: PUSH
76048: LD_VAR 0 1
76052: ST_TO_ADDR
// uc_nation := 3 ;
76053: LD_ADDR_OWVAR 21
76057: PUSH
76058: LD_INT 3
76060: ST_TO_ADDR
// vc_chassis := 25 ;
76061: LD_ADDR_OWVAR 37
76065: PUSH
76066: LD_INT 25
76068: ST_TO_ADDR
// vc_engine := engine_siberite ;
76069: LD_ADDR_OWVAR 39
76073: PUSH
76074: LD_INT 3
76076: ST_TO_ADDR
// vc_control := control_computer ;
76077: LD_ADDR_OWVAR 38
76081: PUSH
76082: LD_INT 3
76084: ST_TO_ADDR
// vc_weapon := 59 ;
76085: LD_ADDR_OWVAR 40
76089: PUSH
76090: LD_INT 59
76092: ST_TO_ADDR
// result := CreateVehicle ;
76093: LD_ADDR_VAR 0 5
76097: PUSH
76098: CALL_OW 45
76102: ST_TO_ADDR
// SetDir ( result , d ) ;
76103: LD_VAR 0 5
76107: PPUSH
76108: LD_VAR 0 4
76112: PPUSH
76113: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
76117: LD_VAR 0 5
76121: PPUSH
76122: LD_VAR 0 2
76126: PPUSH
76127: LD_VAR 0 3
76131: PPUSH
76132: LD_INT 0
76134: PPUSH
76135: CALL_OW 48
// end ;
76139: LD_VAR 0 5
76143: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76144: LD_INT 0
76146: PPUSH
76147: PPUSH
76148: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76149: LD_ADDR_VAR 0 2
76153: PUSH
76154: LD_INT 0
76156: PUSH
76157: LD_INT 0
76159: PUSH
76160: LD_INT 0
76162: PUSH
76163: LD_INT 0
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76172: LD_VAR 0 1
76176: NOT
76177: PUSH
76178: LD_VAR 0 1
76182: PPUSH
76183: CALL_OW 264
76187: PUSH
76188: LD_INT 12
76190: PUSH
76191: LD_INT 51
76193: PUSH
76194: LD_INT 32
76196: PUSH
76197: LD_INT 89
76199: PUSH
76200: EMPTY
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: IN
76206: NOT
76207: OR
76208: IFFALSE 76212
// exit ;
76210: GO 76310
// for i := 1 to 3 do
76212: LD_ADDR_VAR 0 3
76216: PUSH
76217: DOUBLE
76218: LD_INT 1
76220: DEC
76221: ST_TO_ADDR
76222: LD_INT 3
76224: PUSH
76225: FOR_TO
76226: IFFALSE 76308
// begin tmp := GetCargo ( cargo , i ) ;
76228: LD_ADDR_VAR 0 4
76232: PUSH
76233: LD_VAR 0 1
76237: PPUSH
76238: LD_VAR 0 3
76242: PPUSH
76243: CALL_OW 289
76247: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76248: LD_ADDR_VAR 0 2
76252: PUSH
76253: LD_VAR 0 2
76257: PPUSH
76258: LD_VAR 0 3
76262: PPUSH
76263: LD_VAR 0 4
76267: PPUSH
76268: CALL_OW 1
76272: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76273: LD_ADDR_VAR 0 2
76277: PUSH
76278: LD_VAR 0 2
76282: PPUSH
76283: LD_INT 4
76285: PPUSH
76286: LD_VAR 0 2
76290: PUSH
76291: LD_INT 4
76293: ARRAY
76294: PUSH
76295: LD_VAR 0 4
76299: PLUS
76300: PPUSH
76301: CALL_OW 1
76305: ST_TO_ADDR
// end ;
76306: GO 76225
76308: POP
76309: POP
// end ;
76310: LD_VAR 0 2
76314: RET
// export function Length ( on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76315: LD_VAR 0 1
76319: PPUSH
76320: LD_VAR 0 2
76324: PPUSH
76325: LD_VAR 0 3
76329: PPUSH
76330: LD_VAR 0 4
76334: PPUSH
76335: LD_VAR 0 5
76339: PPUSH
76340: LD_VAR 0 6
76344: PPUSH
76345: CALL 15020 0 6
// end ;
76349: PPOPN 6
76351: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76352: LD_INT 0
76354: PPUSH
// begin if not units then
76355: LD_VAR 0 1
76359: NOT
76360: IFFALSE 76364
// exit ;
76362: GO 76364
// end ;
76364: PPOPN 7
76366: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76367: CALL 14924 0 0
// end ;
76371: PPOPN 1
76373: END
