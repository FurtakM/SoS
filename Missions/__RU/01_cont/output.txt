// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 9931 0 0
// PrepareAmerican ;
  12: CALL 720 0 0
// PrepareRussian ;
  16: CALL 278 0 0
// Action ;
  20: CALL 2114 0 0
// end ;
  24: END
// export debug , currentMissionPrefix ; export joinedToBelkov , hasGnyevko , hasKirilenkova , apeSpotted , attackedByApe , waterfallSpotted , apeRadioKilled , americansDefeated , gnyevkoMeetPokryshkin , followPokryshkin , attackedAllied , burlakAsCommander , activeAmericanScript , gladstoneEscaped , hollandEscaped , melEscaped , canEnd , loseCounter , someoneGetsHurt ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// currentMissionPrefix := 01_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 01_
  57: ST_TO_ADDR
// waterfallSpotted := false ;
  58: LD_ADDR_EXP 8
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// joinedToBelkov := false ;
  66: LD_ADDR_EXP 3
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// apeSpotted := false ;
  74: LD_ADDR_EXP 6
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// attackedByApe := false ;
  82: LD_ADDR_EXP 7
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// hasGnyevko := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// hasKirilenkova := false ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// apeRadioKilled := false ;
 106: LD_ADDR_EXP 9
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// americansDefeated := false ;
 114: LD_ADDR_EXP 10
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gnyevkoMeetPokryshkin := false ;
 122: LD_ADDR_EXP 11
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// followPokryshkin := false ;
 130: LD_ADDR_EXP 12
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// attackedAllied := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// burlakAsCommander := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// activeAmericanScript := false ;
 154: LD_ADDR_EXP 15
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// gladstoneEscaped := false ;
 162: LD_ADDR_EXP 16
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hollandEscaped := false ;
 170: LD_ADDR_EXP 17
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// melEscaped := false ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canEnd := false ;
 186: LD_ADDR_EXP 19
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// loseCounter := 0 ;
 194: LD_ADDR_EXP 20
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// someoneGetsHurt := false ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_not , [ f_class , class_fish ] ] ] ) = 0 do
 215: LD_INT 22
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 23
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 25
 240: PUSH
 241: LD_INT 20
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PUSH
 262: LD_INT 0
 264: EQUAL
 265: IFFALSE 277
 267: GO 269
 269: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
 270: LD_STRING ACH_NATURE
 272: PPUSH
 273: CALL_OW 543
 277: END
// export Burlak , Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kurin , Gnyevko , Kirilenkova ; export function PrepareRussian ; var i , tmp ; begin
 278: LD_INT 0
 280: PPUSH
 281: PPUSH
 282: PPUSH
// uc_side := 3 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 3
 290: ST_TO_ADDR
// uc_nation := nation_russian ;
 291: LD_ADDR_OWVAR 21
 295: PUSH
 296: LD_INT 3
 298: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: LD_STRING Burlak
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: LD_STRING 
 312: PPUSH
 313: CALL 10304 0 3
 317: ST_TO_ADDR
// uc_side := 6 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 6
 325: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
 326: LD_ADDR_EXP 29
 330: PUSH
 331: LD_STRING Kurin
 333: PPUSH
 334: LD_INT 0
 336: PPUSH
 337: LD_STRING 
 339: PPUSH
 340: CALL 10304 0 3
 344: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
 345: LD_ADDR_EXP 23
 349: PUSH
 350: LD_STRING Pokryshkin
 352: PPUSH
 353: LD_INT 0
 355: PPUSH
 356: LD_STRING 
 358: PPUSH
 359: CALL 10304 0 3
 363: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ,  ) ;
 364: LD_ADDR_EXP 24
 368: PUSH
 369: LD_STRING Saseda
 371: PPUSH
 372: LD_INT 0
 374: PPUSH
 375: LD_STRING 
 377: PPUSH
 378: CALL 10304 0 3
 382: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ,  ) ;
 383: LD_ADDR_EXP 25
 387: PUSH
 388: LD_STRING Jaworska
 390: PPUSH
 391: LD_INT 0
 393: PPUSH
 394: LD_STRING 
 396: PPUSH
 397: CALL 10304 0 3
 401: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ,  ) ;
 402: LD_ADDR_EXP 26
 406: PUSH
 407: LD_STRING Balei
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 10304 0 3
 420: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
 421: LD_ADDR_EXP 27
 425: PUSH
 426: LD_STRING Belkov
 428: PPUSH
 429: LD_INT 0
 431: PPUSH
 432: LD_STRING 
 434: PPUSH
 435: CALL 10304 0 3
 439: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ,  ) ;
 440: LD_ADDR_EXP 28
 444: PUSH
 445: LD_STRING Jaunzeme
 447: PPUSH
 448: LD_INT 0
 450: PPUSH
 451: LD_STRING 
 453: PPUSH
 454: CALL 10304 0 3
 458: ST_TO_ADDR
// uc_side := 5 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 5
 466: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
 467: LD_ADDR_EXP 30
 471: PUSH
 472: LD_STRING Gnyevko
 474: PPUSH
 475: LD_INT 0
 477: PPUSH
 478: LD_STRING 
 480: PPUSH
 481: CALL 10304 0 3
 485: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ,  ) ;
 486: LD_ADDR_EXP 31
 490: PUSH
 491: LD_STRING Kirilenkova
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_STRING 
 499: PPUSH
 500: CALL 10304 0 3
 504: ST_TO_ADDR
// tmp := [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] ;
 505: LD_ADDR_VAR 0 3
 509: PUSH
 510: LD_EXP 24
 514: PUSH
 515: LD_EXP 25
 519: PUSH
 520: LD_EXP 26
 524: PUSH
 525: LD_EXP 27
 529: PUSH
 530: LD_EXP 28
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: ST_TO_ADDR
// if Difficulty > 1 then
 542: LD_OWVAR 67
 546: PUSH
 547: LD_INT 1
 549: GREATER
 550: IFFALSE 568
// tmp := tmp diff Jaunzeme ;
 552: LD_ADDR_VAR 0 3
 556: PUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_EXP 28
 566: DIFF
 567: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , pokryshkinSpawnArea , false ) ;
 568: LD_EXP 23
 572: PPUSH
 573: LD_INT 5
 575: PPUSH
 576: LD_INT 0
 578: PPUSH
 579: CALL_OW 49
// ComHold ( Pokryshkin ) ;
 583: LD_EXP 23
 587: PPUSH
 588: CALL_OW 140
// for i in tmp do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_VAR 0 3
 601: PUSH
 602: FOR_IN
 603: IFFALSE 655
// begin if not PlaceUnitArea ( i , pokryshkinGuardArea , false ) then
 605: LD_VAR 0 2
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
 620: NOT
 621: IFFALSE 644
// PlaceUnitXYR ( i , 78 , 55 , 3 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 78
 630: PPUSH
 631: LD_INT 55
 633: PPUSH
 634: LD_INT 3
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 50
// ComHold ( i ) ;
 644: LD_VAR 0 2
 648: PPUSH
 649: CALL_OW 140
// end ;
 653: GO 602
 655: POP
 656: POP
// PlaceUnitArea ( Gnyevko , [ gnyevko1Spawn , gnyevko2Spawn , gnyevko3Spawn , gnyevko3Spawn ] [ Difficulty ] , false ) ;
 657: LD_EXP 30
 661: PPUSH
 662: LD_INT 9
 664: PUSH
 665: LD_INT 10
 667: PUSH
 668: LD_INT 11
 670: PUSH
 671: LD_INT 11
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: LD_OWVAR 67
 684: ARRAY
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: CALL_OW 49
// SetLives ( Gnyevko , 500 - ( 50 * Difficulty ) ) ;
 693: LD_EXP 30
 697: PPUSH
 698: LD_INT 500
 700: PUSH
 701: LD_INT 50
 703: PUSH
 704: LD_OWVAR 67
 708: MUL
 709: MINUS
 710: PPUSH
 711: CALL_OW 234
// end ; end_of_file
 715: LD_VAR 0 1
 719: RET
// export Brown , Gladstone , Holland , Mel ; export amApes ; export function PrepareAmerican ; var i , ape ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
 724: PPUSH
// uc_side := 1 ;
 725: LD_ADDR_OWVAR 20
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// uc_nation := nation_american ;
 733: LD_ADDR_OWVAR 21
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// hc_class := class_soldier ;
 741: LD_ADDR_OWVAR 28
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// hc_sex := sex_male ;
 749: LD_ADDR_OWVAR 27
 753: PUSH
 754: LD_INT 1
 756: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 757: LD_ADDR_OWVAR 33
 761: PUSH
 762: LD_STRING AmGalRemake
 764: ST_TO_ADDR
// hc_face_number := 1 ;
 765: LD_ADDR_OWVAR 34
 769: PUSH
 770: LD_INT 1
 772: ST_TO_ADDR
// hc_name := Charles Brown ;
 773: LD_ADDR_OWVAR 26
 777: PUSH
 778: LD_STRING Charles Brown
 780: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
 781: LD_ADDR_OWVAR 29
 785: PUSH
 786: LD_INT 12
 788: PUSH
 789: LD_INT 11
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
 796: LD_ADDR_OWVAR 30
 800: PUSH
 801: LD_INT 3
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
 819: LD_ADDR_OWVAR 31
 823: PUSH
 824: LD_INT 3
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// Brown := CreateHuman ;
 842: LD_ADDR_EXP 32
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// hc_sex := sex_female ;
 852: LD_ADDR_OWVAR 27
 856: PUSH
 857: LD_INT 2
 859: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 860: LD_ADDR_OWVAR 33
 864: PUSH
 865: LD_STRING AmGalRemake
 867: ST_TO_ADDR
// hc_face_number := 2 ;
 868: LD_ADDR_OWVAR 34
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// hc_name := Johanna Holland ;
 876: LD_ADDR_OWVAR 26
 880: PUSH
 881: LD_STRING Johanna Holland
 883: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 884: LD_ADDR_OWVAR 29
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 10
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
 899: LD_ADDR_OWVAR 30
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: LD_INT 0
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: ST_TO_ADDR
// hc_skills := [ Difficulty , 0 , 1 , 2 ] ;
 922: LD_ADDR_OWVAR 31
 926: PUSH
 927: LD_OWVAR 67
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 2
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: ST_TO_ADDR
// Holland := CreateHuman ;
 947: LD_ADDR_EXP 34
 951: PUSH
 952: CALL_OW 44
 956: ST_TO_ADDR
// SetDir ( Holland , 2 ) ;
 957: LD_EXP 34
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: CALL_OW 233
// PlaceHumanInUnit ( Holland , usBun1 ) ;
 969: LD_EXP 34
 973: PPUSH
 974: LD_INT 3
 976: PPUSH
 977: CALL_OW 52
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_STRING Gladstone
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: LD_STRING 
 994: PPUSH
 995: CALL 10304 0 3
 999: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , usLab ) ;
1000: LD_EXP 33
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: CALL_OW 52
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: DOUBLE
1018: LD_INT 1
1020: DEC
1021: ST_TO_ADDR
1022: LD_INT 4
1024: PUSH
1025: LD_INT 5
1027: PUSH
1028: LD_INT 6
1030: PUSH
1031: LD_INT 7
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_OWVAR 67
1044: ARRAY
1045: PUSH
1046: FOR_TO
1047: IFFALSE 1100
// begin PrepareApemanEngineer ( ) ;
1049: CALL 44529 0 0
// ape := CreateHuman ;
1053: LD_ADDR_VAR 0 3
1057: PUSH
1058: CALL_OW 44
1062: ST_TO_ADDR
// PlaceUnitArea ( ape , usApeSpawn , false ) ;
1063: LD_VAR 0 3
1067: PPUSH
1068: LD_INT 13
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 49
// amApes := Join ( amApes , ape ) ;
1078: LD_ADDR_EXP 36
1082: PUSH
1083: LD_EXP 36
1087: PPUSH
1088: LD_VAR 0 3
1092: PPUSH
1093: CALL 48504 0 2
1097: ST_TO_ADDR
// end ;
1098: GO 1046
1100: POP
1101: POP
// SetTag ( amApes [ 1 ] , tApeEng ) ;
1102: LD_EXP 36
1106: PUSH
1107: LD_INT 1
1109: ARRAY
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 109
// end ;
1118: LD_VAR 0 1
1122: RET
// every 0 0$20 trigger Difficulty > 2 and burlakAsCommander do
1123: LD_OWVAR 67
1127: PUSH
1128: LD_INT 2
1130: GREATER
1131: IFFALSE 1139
1133: PUSH
1134: LD_EXP 14
1138: AND
1139: IFFALSE 1313
1141: GO 1143
1143: DISABLE
// begin uc_side := 1 ;
1144: LD_ADDR_OWVAR 20
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// uc_nation := nation_american ;
1152: LD_ADDR_OWVAR 21
1156: PUSH
1157: LD_INT 1
1159: ST_TO_ADDR
// hc_class := class_soldier ;
1160: LD_ADDR_OWVAR 28
1164: PUSH
1165: LD_INT 1
1167: ST_TO_ADDR
// hc_sex := sex_male ;
1168: LD_ADDR_OWVAR 27
1172: PUSH
1173: LD_INT 1
1175: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1176: LD_ADDR_OWVAR 33
1180: PUSH
1181: LD_STRING SecondCharsGal
1183: ST_TO_ADDR
// hc_face_number := 56 ;
1184: LD_ADDR_OWVAR 34
1188: PUSH
1189: LD_INT 56
1191: ST_TO_ADDR
// hc_name := Mel Brennan ;
1192: LD_ADDR_OWVAR 26
1196: PUSH
1197: LD_STRING Mel Brennan
1199: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1200: LD_ADDR_OWVAR 29
1204: PUSH
1205: LD_INT 12
1207: PUSH
1208: LD_INT 11
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 0 ] ;
1215: LD_ADDR_OWVAR 30
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 0
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: LD_INT 0
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: ST_TO_ADDR
// hc_skills := [ Difficulty , 2 , 0 , 0 ] ;
1238: LD_ADDR_OWVAR 31
1242: PUSH
1243: LD_OWVAR 67
1247: PUSH
1248: LD_INT 2
1250: PUSH
1251: LD_INT 0
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// Mel := CreateHuman ;
1263: LD_ADDR_EXP 35
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// PlaceUnitXY ( Mel , 77 , 19 , true ) ;
1273: LD_EXP 35
1277: PPUSH
1278: LD_INT 77
1280: PPUSH
1281: LD_INT 19
1283: PPUSH
1284: LD_INT 1
1286: PPUSH
1287: CALL_OW 48
// wait ( 0 0$2 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// ComAgressiveMove ( Mel , 50 , 21 ) ;
1298: LD_EXP 35
1302: PPUSH
1303: LD_INT 50
1305: PPUSH
1306: LD_INT 21
1308: PPUSH
1309: CALL_OW 114
// end ;
1313: END
// every 10 trigger activeAmericanScript do var i , eng , enemyInRange , tmp ;
1314: LD_EXP 15
1318: IFFALSE 1772
1320: GO 1322
1322: DISABLE
1323: LD_INT 0
1325: PPUSH
1326: PPUSH
1327: PPUSH
1328: PPUSH
// begin enable ;
1329: ENABLE
// tmp := UnitFilter ( amApes , [ [ f_not , [ f_tag , tApeEng ] ] ] ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_EXP 36
1339: PPUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 120
1345: PUSH
1346: LD_INT 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: EMPTY
1358: LIST
1359: PPUSH
1360: CALL_OW 72
1364: ST_TO_ADDR
// eng := UnitFilter ( amApes , [ f_tag , tApeEng ] ) ;
1365: LD_ADDR_VAR 0 2
1369: PUSH
1370: LD_EXP 36
1374: PPUSH
1375: LD_INT 120
1377: PUSH
1378: LD_INT 2
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PPUSH
1385: CALL_OW 72
1389: ST_TO_ADDR
// enemyInRange := FilterUnitsInArea ( amBaseArea , [ f_side , 3 ] ) ;
1390: LD_ADDR_VAR 0 3
1394: PUSH
1395: LD_INT 17
1397: PPUSH
1398: LD_INT 22
1400: PUSH
1401: LD_INT 3
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PPUSH
1408: CALL_OW 70
1412: ST_TO_ADDR
// if IsOk ( Mel ) then
1413: LD_EXP 35
1417: PPUSH
1418: CALL_OW 302
1422: IFFALSE 1444
// tmp := Join ( tmp , Mel ) ;
1424: LD_ADDR_VAR 0 4
1428: PUSH
1429: LD_VAR 0 4
1433: PPUSH
1434: LD_EXP 35
1438: PPUSH
1439: CALL 48504 0 2
1443: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 24
1454: PUSH
1455: LD_INT 1000
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL_OW 72
1470: IFFALSE 1509
// begin if IsInUnit ( Gladstone ) then
1472: LD_EXP 33
1476: PPUSH
1477: CALL_OW 310
1481: IFFALSE 1507
// begin ComExitBuilding ( Gladstone ) ;
1483: LD_EXP 33
1487: PPUSH
1488: CALL_OW 122
// AddComMoveXY ( Gladstone , 39 , 7 ) ;
1492: LD_EXP 33
1496: PPUSH
1497: LD_INT 39
1499: PPUSH
1500: LD_INT 7
1502: PPUSH
1503: CALL_OW 171
// end ; end else
1507: GO 1533
// if not IsInUnit ( Gladstone ) then
1509: LD_EXP 33
1513: PPUSH
1514: CALL_OW 310
1518: NOT
1519: IFFALSE 1533
// ComEnterUnit ( Gladstone , usLab ) ;
1521: LD_EXP 33
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 120
// if eng then
1533: LD_VAR 0 2
1537: IFFALSE 1606
// if GetLives ( usBun1 ) < 1000 then
1539: LD_INT 3
1541: PPUSH
1542: CALL_OW 256
1546: PUSH
1547: LD_INT 1000
1549: LESS
1550: IFFALSE 1566
// ComRepairBuilding ( eng , usBun1 ) else
1552: LD_VAR 0 2
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: CALL_OW 130
1564: GO 1606
// if GetDistUnitXY ( eng [ 1 ] , 37 , 9 ) > 5 then
1566: LD_VAR 0 2
1570: PUSH
1571: LD_INT 1
1573: ARRAY
1574: PPUSH
1575: LD_INT 37
1577: PPUSH
1578: LD_INT 9
1580: PPUSH
1581: CALL_OW 297
1585: PUSH
1586: LD_INT 5
1588: GREATER
1589: IFFALSE 1606
// ComMoveXY ( eng , 37 , 9 ) ;
1591: LD_VAR 0 2
1595: PPUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_INT 9
1601: PPUSH
1602: CALL_OW 111
// for i in tmp do
1606: LD_ADDR_VAR 0 1
1610: PUSH
1611: LD_VAR 0 4
1615: PUSH
1616: FOR_IN
1617: IFFALSE 1770
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 600
1631: LESS
1632: IFFALSE 1655
1634: PUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 37
1642: PPUSH
1643: LD_INT 9
1645: PPUSH
1646: CALL_OW 297
1650: PUSH
1651: LD_INT 5
1653: GREATER
1654: AND
1655: IFFALSE 1674
// begin ComMoveXY ( i , 37 , 9 ) ;
1657: LD_VAR 0 1
1661: PPUSH
1662: LD_INT 37
1664: PPUSH
1665: LD_INT 9
1667: PPUSH
1668: CALL_OW 111
// continue ;
1672: GO 1616
// end ; if not enemyInRange and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1674: LD_VAR 0 3
1678: NOT
1679: IFFALSE 1702
1681: PUSH
1682: LD_VAR 0 1
1686: PPUSH
1687: LD_INT 37
1689: PPUSH
1690: LD_INT 9
1692: PPUSH
1693: CALL_OW 297
1697: PUSH
1698: LD_INT 5
1700: GREATER
1701: AND
1702: IFFALSE 1721
// begin ComMoveXY ( i , 37 , 9 ) ;
1704: LD_VAR 0 1
1708: PPUSH
1709: LD_INT 37
1711: PPUSH
1712: LD_INT 9
1714: PPUSH
1715: CALL_OW 111
// continue ;
1719: GO 1616
// end ; if enemyInRange and GetLives ( i ) = 1000 then
1721: LD_VAR 0 3
1725: IFFALSE 1742
1727: PUSH
1728: LD_VAR 0 1
1732: PPUSH
1733: CALL_OW 256
1737: PUSH
1738: LD_INT 1000
1740: EQUAL
1741: AND
1742: IFFALSE 1768
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInRange , i ) ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_VAR 0 3
1753: PPUSH
1754: LD_VAR 0 1
1758: PPUSH
1759: CALL_OW 74
1763: PPUSH
1764: CALL_OW 115
// end ;
1768: GO 1616
1770: POP
1771: POP
// end ; end_of_file
1772: PPOPN 4
1774: END
// every 0 0$1 trigger not attackedByApe do var un ;
1775: LD_EXP 7
1779: NOT
1780: IFFALSE 1856
1782: GO 1784
1784: DISABLE
1785: LD_INT 0
1787: PPUSH
// begin enable ;
1788: ENABLE
// un := UnitShoot ( Burlak ) ;
1789: LD_ADDR_VAR 0 1
1793: PUSH
1794: LD_EXP 22
1798: PPUSH
1799: CALL_OW 504
1803: ST_TO_ADDR
// if un > - 1 then
1804: LD_VAR 0 1
1808: PUSH
1809: LD_INT 1
1811: NEG
1812: GREATER
1813: IFFALSE 1856
// if GetSide ( un ) = 0 and GetClass ( un ) = class_apeman then
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 255
1824: PUSH
1825: LD_INT 0
1827: EQUAL
1828: IFFALSE 1845
1830: PUSH
1831: LD_VAR 0 1
1835: PPUSH
1836: CALL_OW 257
1840: PUSH
1841: LD_INT 12
1843: EQUAL
1844: AND
1845: IFFALSE 1856
// begin attackedByApe := true ;
1847: LD_ADDR_EXP 7
1851: PUSH
1852: LD_INT 1
1854: ST_TO_ADDR
// disable ;
1855: DISABLE
// end ; end ;
1856: PPOPN 1
1858: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL 70200 0 1
// if GetSide ( un ) = 3 and GetType ( un ) = unit_human then
1868: LD_VAR 0 1
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: IFFALSE 1898
1883: PUSH
1884: LD_VAR 0 1
1888: PPUSH
1889: CALL_OW 247
1893: PUSH
1894: LD_INT 1
1896: EQUAL
1897: AND
1898: IFFALSE 1915
// loseCounter := Inc ( loseCounter ) ;
1900: LD_ADDR_EXP 20
1904: PUSH
1905: LD_EXP 20
1909: PPUSH
1910: CALL 49877 0 1
1914: ST_TO_ADDR
// if un = Burlak then
1915: LD_VAR 0 1
1919: PUSH
1920: LD_EXP 22
1924: EQUAL
1925: IFFALSE 1934
// YouLost ( Burlak ) ;
1927: LD_STRING Burlak
1929: PPUSH
1930: CALL_OW 104
// end ;
1934: PPOPN 1
1936: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not apeRadioKilled and GetTag ( un ) = tApeRadio and GetSide ( un ) = 0 and killerSide = 3 then
1937: LD_EXP 9
1941: NOT
1942: IFFALSE 1959
1944: PUSH
1945: LD_VAR 0 1
1949: PPUSH
1950: CALL_OW 110
1954: PUSH
1955: LD_INT 1
1957: EQUAL
1958: AND
1959: IFFALSE 1976
1961: PUSH
1962: LD_VAR 0 1
1966: PPUSH
1967: CALL_OW 255
1971: PUSH
1972: LD_INT 0
1974: EQUAL
1975: AND
1976: IFFALSE 1988
1978: PUSH
1979: LD_VAR 0 2
1983: PUSH
1984: LD_INT 3
1986: EQUAL
1987: AND
1988: IFFALSE 2000
// apeRadioKilled := un ;
1990: LD_ADDR_EXP 9
1994: PUSH
1995: LD_VAR 0 1
1999: ST_TO_ADDR
// end ;
2000: PPOPN 3
2002: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 then
2003: LD_VAR 0 1
2007: PPUSH
2008: CALL_OW 255
2012: PUSH
2013: LD_INT 3
2015: EQUAL
2016: IFFALSE 2078
// begin someoneGetsHurt := true ;
2018: LD_ADDR_EXP 21
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// if un = Burlak and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
2026: LD_VAR 0 1
2030: PUSH
2031: LD_EXP 22
2035: EQUAL
2036: IFFALSE 2069
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 3
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 25
2051: PUSH
2052: LD_INT 4
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 69
2067: NOT
2068: AND
2069: IFFALSE 2078
// begin YouLost ( Burlak ) ;
2071: LD_STRING Burlak
2073: PPUSH
2074: CALL_OW 104
// end ; end ; end ;
2078: PPOPN 1
2080: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
2081: LD_VAR 0 1
2085: PUSH
2086: LD_INT 3
2088: EQUAL
2089: IFFALSE 2101
2091: PUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_INT 6
2099: EQUAL
2100: AND
2101: IFFALSE 2111
// attackedAllied := true ;
2103: LD_ADDR_EXP 13
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// end ; end_of_file
2111: PPOPN 2
2113: END
// export function Action ; begin
2114: LD_INT 0
2116: PPUSH
// InGameOn ;
2117: CALL_OW 8
// CenterNowOnXY ( 78 , 85 ) ;
2121: LD_INT 78
2123: PPUSH
2124: LD_INT 85
2126: PPUSH
2127: CALL_OW 86
// wait ( 0 0$2 ) ;
2131: LD_INT 70
2133: PPUSH
2134: CALL_OW 67
// PlaceUnitXYD ( Burlak , 78 , 85 , 2 , true ) ;
2138: LD_EXP 22
2142: PPUSH
2143: LD_INT 78
2145: PPUSH
2146: LD_INT 85
2148: PPUSH
2149: LD_INT 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL 50664 0 5
// ComHold ( Burlak ) ;
2159: LD_EXP 22
2163: PPUSH
2164: CALL_OW 140
// wait ( 0 0$3 ) ;
2168: LD_INT 105
2170: PPUSH
2171: CALL_OW 67
// ComMoveXY ( Burlak , 79 , 89 ) ;
2175: LD_EXP 22
2179: PPUSH
2180: LD_INT 79
2182: PPUSH
2183: LD_INT 89
2185: PPUSH
2186: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2190: LD_INT 18
2192: PPUSH
2193: CALL_OW 67
// Say ( Burlak , D1-Bur-1 ) ;
2197: LD_EXP 22
2201: PPUSH
2202: LD_STRING D1-Bur-1
2204: PPUSH
2205: CALL_OW 88
// ComMoveXY ( Burlak , 81 , 87 ) ;
2209: LD_EXP 22
2213: PPUSH
2214: LD_INT 81
2216: PPUSH
2217: LD_INT 87
2219: PPUSH
2220: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2224: LD_INT 10
2226: PPUSH
2227: CALL_OW 67
// Say ( Burlak , D1-Bur-1a ) ;
2231: LD_EXP 22
2235: PPUSH
2236: LD_STRING D1-Bur-1a
2238: PPUSH
2239: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 90 ) ;
2243: LD_EXP 22
2247: PPUSH
2248: LD_INT 85
2250: PPUSH
2251: LD_INT 90
2253: PPUSH
2254: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2258: LD_INT 18
2260: PPUSH
2261: CALL_OW 67
// Say ( Burlak , D1-Bur-1b ) ;
2265: LD_EXP 22
2269: PPUSH
2270: LD_STRING D1-Bur-1b
2272: PPUSH
2273: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 87 ) ;
2277: LD_EXP 22
2281: PPUSH
2282: LD_INT 85
2284: PPUSH
2285: LD_INT 87
2287: PPUSH
2288: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2292: LD_INT 10
2294: PPUSH
2295: CALL_OW 67
// InGameOff ;
2299: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2303: LD_STRING M1
2305: PPUSH
2306: CALL_OW 337
// SaveForQuickRestart ;
2310: CALL_OW 22
// if debug then
2314: LD_EXP 1
2318: IFFALSE 2327
// FogOff ( 3 ) ;
2320: LD_INT 3
2322: PPUSH
2323: CALL_OW 344
// wait ( 0 0$10 - ( 0 0$2 * Difficulty ) ) ;
2327: LD_INT 350
2329: PUSH
2330: LD_INT 70
2332: PUSH
2333: LD_OWVAR 67
2337: MUL
2338: MINUS
2339: PPUSH
2340: CALL_OW 67
// if GetDistUnitXY ( Burlak , 80 , 87 ) < 8 then
2344: LD_EXP 22
2348: PPUSH
2349: LD_INT 80
2351: PPUSH
2352: LD_INT 87
2354: PPUSH
2355: CALL_OW 297
2359: PUSH
2360: LD_INT 8
2362: LESS
2363: IFFALSE 2369
// SendApemanAttack ;
2365: CALL 9656 0 0
// end ;
2369: LD_VAR 0 1
2373: RET
// every 0 0$2 trigger IsInArea ( Burlak , waterfallArea ) do
2374: LD_EXP 22
2378: PPUSH
2379: LD_INT 6
2381: PPUSH
2382: CALL_OW 308
2386: IFFALSE 2428
2388: GO 2390
2390: DISABLE
// begin waterfallSpotted := true ;
2391: LD_ADDR_EXP 8
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// CenterOnXY ( 75 , 89 ) ;
2399: LD_INT 75
2401: PPUSH
2402: LD_INT 89
2404: PPUSH
2405: CALL_OW 84
// wait ( 0 0$0.2 ) ;
2409: LD_INT 7
2411: PPUSH
2412: CALL_OW 67
// Say ( Burlak , DWaterfall-Bur-1 ) ;
2416: LD_EXP 22
2420: PPUSH
2421: LD_STRING DWaterfall-Bur-1
2423: PPUSH
2424: CALL_OW 88
// end ;
2428: END
// every 0 0$1 trigger GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) < 6 do
2429: LD_EXP 22
2433: PPUSH
2434: LD_INT 25
2436: PUSH
2437: LD_INT 12
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 69
2448: PPUSH
2449: LD_EXP 22
2453: PPUSH
2454: CALL_OW 74
2458: PPUSH
2459: CALL_OW 296
2463: PUSH
2464: LD_INT 6
2466: LESS
2467: IFFALSE 2558
2469: GO 2471
2471: DISABLE
// begin apeSpotted := true ;
2472: LD_ADDR_EXP 6
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// if joinedToBelkov then
2480: LD_EXP 3
2484: IFFALSE 2488
// exit ;
2486: GO 2558
// ComTurnUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) ;
2488: LD_EXP 22
2492: PPUSH
2493: LD_INT 25
2495: PUSH
2496: LD_INT 12
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PPUSH
2508: LD_EXP 22
2512: PPUSH
2513: CALL_OW 74
2517: PPUSH
2518: CALL_OW 119
// wait ( 0 0$0.3 ) ;
2522: LD_INT 10
2524: PPUSH
2525: CALL_OW 67
// DialogueOn ;
2529: CALL_OW 6
// CenterNowOnUnits ( Burlak ) ;
2533: LD_EXP 22
2537: PPUSH
2538: CALL_OW 87
// Say ( Burlak , D2-Bur-1 ) ;
2542: LD_EXP 22
2546: PPUSH
2547: LD_STRING D2-Bur-1
2549: PPUSH
2550: CALL_OW 88
// DialogueOff ;
2554: CALL_OW 7
// end ;
2558: END
// every 0 0$1 trigger attackedByApe do
2559: LD_EXP 7
2563: IFFALSE 2587
2565: GO 2567
2567: DISABLE
// begin wait ( 0 0$0.3 ) ;
2568: LD_INT 10
2570: PPUSH
2571: CALL_OW 67
// Say ( Burlak , D2-Bur-1a ) ;
2575: LD_EXP 22
2579: PPUSH
2580: LD_STRING D2-Bur-1a
2582: PPUSH
2583: CALL_OW 88
// end ;
2587: END
// every 0 0$2 trigger SeeXY ( 3 , 130 , 97 ) and GetDistUnitXY ( Burlak , 130 , 97 ) < 6 and not joinedToBelkov and not hasGnyevko do
2588: LD_INT 3
2590: PPUSH
2591: LD_INT 130
2593: PPUSH
2594: LD_INT 97
2596: PPUSH
2597: CALL_OW 293
2601: IFFALSE 2624
2603: PUSH
2604: LD_EXP 22
2608: PPUSH
2609: LD_INT 130
2611: PPUSH
2612: LD_INT 97
2614: PPUSH
2615: CALL_OW 297
2619: PUSH
2620: LD_INT 6
2622: LESS
2623: AND
2624: IFFALSE 2633
2626: PUSH
2627: LD_EXP 3
2631: NOT
2632: AND
2633: IFFALSE 2642
2635: PUSH
2636: LD_EXP 4
2640: NOT
2641: AND
2642: IFFALSE 2667
2644: GO 2646
2646: DISABLE
// begin DialogueOn ;
2647: CALL_OW 6
// Say ( Burlak , DCorpse-Bur-1 ) ;
2651: LD_EXP 22
2655: PPUSH
2656: LD_STRING DCorpse-Bur-1
2658: PPUSH
2659: CALL_OW 88
// DialogueOff ;
2663: CALL_OW 7
// end ;
2667: END
// every 0 0$1 trigger apeRadioKilled do var un , tmp , tmp2 ;
2668: LD_EXP 9
2672: IFFALSE 3056
2674: GO 2676
2676: DISABLE
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , apeRadioKilled , 12 ] ] ) ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 22
2689: PUSH
2690: LD_INT 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 21
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 91
2709: PUSH
2710: LD_EXP 9
2714: PUSH
2715: LD_INT 12
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// if not tmp or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
2733: LD_VAR 0 2
2737: NOT
2738: IFTRUE 2774
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 21
2753: PUSH
2754: LD_INT 1
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: LD_INT 1
2772: EQUAL
2773: OR
2774: IFFALSE 2778
// exit ;
2776: GO 3056
// tmp2 := [ Kirilenkova , Belkov , Saseda , Jaworska ] ;
2778: LD_ADDR_VAR 0 3
2782: PUSH
2783: LD_EXP 31
2787: PUSH
2788: LD_EXP 27
2792: PUSH
2793: LD_EXP 24
2797: PUSH
2798: LD_EXP 25
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: ST_TO_ADDR
// Randomize ;
2809: CALL_OW 10
// un := tmp2 [ rand ( 1 , Count ( tmp2 ) ) ] ;
2813: LD_ADDR_VAR 0 1
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_VAR 0 3
2830: PPUSH
2831: CALL 12528 0 1
2835: PPUSH
2836: CALL_OW 12
2840: ARRAY
2841: ST_TO_ADDR
// if not un in tmp then
2842: LD_VAR 0 1
2846: PUSH
2847: LD_VAR 0 2
2851: IN
2852: NOT
2853: IFFALSE 2865
// un := Burlak ;
2855: LD_ADDR_VAR 0 1
2859: PUSH
2860: LD_EXP 22
2864: ST_TO_ADDR
// DialogueOn ;
2865: CALL_OW 6
// CenterNowOnUnits ( apeRadioKilled ) ;
2869: LD_EXP 9
2873: PPUSH
2874: CALL_OW 87
// case un of Kirilenkova :
2878: LD_VAR 0 1
2882: PUSH
2883: LD_EXP 31
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2908
2893: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; Belkov :
2894: LD_EXP 31
2898: PPUSH
2899: LD_STRING D2a-Kir-1
2901: PPUSH
2902: CALL_OW 88
2906: GO 3009
2908: LD_EXP 27
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2933
2918: POP
// Say ( Belkov , D2a-Bel-1 ) ; Burlak :
2919: LD_EXP 27
2923: PPUSH
2924: LD_STRING D2a-Bel-1
2926: PPUSH
2927: CALL_OW 88
2931: GO 3009
2933: LD_EXP 22
2937: DOUBLE
2938: EQUAL
2939: IFTRUE 2943
2941: GO 2958
2943: POP
// Say ( Burlak , D2a-Bur-1 ) ; Jaworska :
2944: LD_EXP 22
2948: PPUSH
2949: LD_STRING D2a-Bur-1
2951: PPUSH
2952: CALL_OW 88
2956: GO 3009
2958: LD_EXP 25
2962: DOUBLE
2963: EQUAL
2964: IFTRUE 2968
2966: GO 2983
2968: POP
// Say ( Jaworska , D2a-RFSol1-1 ) ; Saseda :
2969: LD_EXP 25
2973: PPUSH
2974: LD_STRING D2a-RFSol1-1
2976: PPUSH
2977: CALL_OW 88
2981: GO 3009
2983: LD_EXP 24
2987: DOUBLE
2988: EQUAL
2989: IFTRUE 2993
2991: GO 3008
2993: POP
// Say ( Saseda , D2a-RSol1-1 ) ; end ;
2994: LD_EXP 24
2998: PPUSH
2999: LD_STRING D2a-RSol1-1
3001: PPUSH
3002: CALL_OW 88
3006: GO 3009
3008: POP
// if hasGnyevko then
3009: LD_EXP 4
3013: IFFALSE 3040
// begin if IsOk ( Gnyevko ) then
3015: LD_EXP 30
3019: PPUSH
3020: CALL_OW 302
3024: IFFALSE 3038
// Say ( Gnyevko , D2a-Gny-1 ) ;
3026: LD_EXP 30
3030: PPUSH
3031: LD_STRING D2a-Gny-1
3033: PPUSH
3034: CALL_OW 88
// end else
3038: GO 3052
// Say ( Burlak , D2a-Bur-2 ) ;
3040: LD_EXP 22
3044: PPUSH
3045: LD_STRING D2a-Bur-2
3047: PPUSH
3048: CALL_OW 88
// DialogueOff ;
3052: CALL_OW 7
// end ;
3056: PPOPN 3
3058: END
// every 0 0$1 do var un , tmp ;
3059: GO 3061
3061: DISABLE
3062: LD_INT 0
3064: PPUSH
3065: PPUSH
// begin if Difficulty = 1 then
3066: LD_OWVAR 67
3070: PUSH
3071: LD_INT 1
3073: EQUAL
3074: IFFALSE 3078
// exit ;
3076: GO 3219
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
3078: LD_INT 16800
3080: PUSH
3081: LD_INT 2100
3083: PUSH
3084: LD_OWVAR 67
3088: MUL
3089: MINUS
3090: PPUSH
3091: CALL_OW 67
// if hasGnyevko then
3095: LD_EXP 4
3099: IFFALSE 3103
// exit ;
3101: GO 3219
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) ;
3103: LD_ADDR_VAR 0 2
3107: PUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 25
3120: PUSH
3121: LD_INT 14
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: ST_TO_ADDR
// un := NearestUnitToUnit ( tmp , Gnyevko ) ;
3137: LD_ADDR_VAR 0 1
3141: PUSH
3142: LD_VAR 0 2
3146: PPUSH
3147: LD_EXP 30
3151: PPUSH
3152: CALL_OW 74
3156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3157: LD_INT 35
3159: PPUSH
3160: CALL_OW 67
// if hasGnyevko then
3164: LD_EXP 4
3168: IFFALSE 3181
// begin ComFree ( un ) ;
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 139
// exit ;
3179: GO 3219
// end ; if not HasTask ( un ) then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 314
3190: NOT
3191: IFFALSE 3207
// ComAttackUnit ( un , Gnyevko ) ;
3193: LD_VAR 0 1
3197: PPUSH
3198: LD_EXP 30
3202: PPUSH
3203: CALL_OW 115
// until not IsOk ( un ) ;
3207: LD_VAR 0 1
3211: PPUSH
3212: CALL_OW 302
3216: NOT
3217: IFFALSE 3157
// end ;
3219: PPOPN 2
3221: END
// every 0 0$2 trigger See ( 3 , Gnyevko ) and IsOk ( Gnyevko ) and not hasGnyevko do var un ;
3222: LD_INT 3
3224: PPUSH
3225: LD_EXP 30
3229: PPUSH
3230: CALL_OW 292
3234: IFFALSE 3247
3236: PUSH
3237: LD_EXP 30
3241: PPUSH
3242: CALL_OW 302
3246: AND
3247: IFFALSE 3256
3249: PUSH
3250: LD_EXP 4
3254: NOT
3255: AND
3256: IFFALSE 3679
3258: GO 3260
3260: DISABLE
3261: LD_INT 0
3263: PPUSH
// begin hasGnyevko := true ;
3264: LD_ADDR_EXP 4
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// un := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
3272: LD_ADDR_VAR 0 1
3276: PUSH
3277: LD_INT 22
3279: PUSH
3280: LD_INT 3
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 21
3289: PUSH
3290: LD_INT 1
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PPUSH
3301: CALL_OW 69
3305: PPUSH
3306: LD_EXP 30
3310: PPUSH
3311: CALL_OW 74
3315: ST_TO_ADDR
// if not un in [ Burlak , Saseda , Jaworska ] then
3316: LD_VAR 0 1
3320: PUSH
3321: LD_EXP 22
3325: PUSH
3326: LD_EXP 24
3330: PUSH
3331: LD_EXP 25
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: IN
3341: NOT
3342: IFFALSE 3354
// un := Burlak ;
3344: LD_ADDR_VAR 0 1
3348: PUSH
3349: LD_EXP 22
3353: ST_TO_ADDR
// ComTurnUnit ( Gnyevko , un ) ;
3354: LD_EXP 30
3358: PPUSH
3359: LD_VAR 0 1
3363: PPUSH
3364: CALL_OW 119
// wait ( 0 0$0.3 ) ;
3368: LD_INT 10
3370: PPUSH
3371: CALL_OW 67
// DialogueOn ;
3375: CALL_OW 6
// CenterNowOnUnits ( Gnyevko ) ;
3379: LD_EXP 30
3383: PPUSH
3384: CALL_OW 87
// case un of Burlak :
3388: LD_VAR 0 1
3392: PUSH
3393: LD_EXP 22
3397: DOUBLE
3398: EQUAL
3399: IFTRUE 3403
3401: GO 3418
3403: POP
// Say ( Burlak , D3-Bur-1 ) ; Saseda :
3404: LD_EXP 22
3408: PPUSH
3409: LD_STRING D3-Bur-1
3411: PPUSH
3412: CALL_OW 88
3416: GO 3469
3418: LD_EXP 24
3422: DOUBLE
3423: EQUAL
3424: IFTRUE 3428
3426: GO 3443
3428: POP
// Say ( Saseda , D3-RSol1-1 ) ; Jaworska :
3429: LD_EXP 24
3433: PPUSH
3434: LD_STRING D3-RSol1-1
3436: PPUSH
3437: CALL_OW 88
3441: GO 3469
3443: LD_EXP 25
3447: DOUBLE
3448: EQUAL
3449: IFTRUE 3453
3451: GO 3468
3453: POP
// Say ( Jaworska , D3-RFSol1-1 ) ; end ;
3454: LD_EXP 25
3458: PPUSH
3459: LD_STRING D3-RFSol1-1
3461: PPUSH
3462: CALL_OW 88
3466: GO 3469
3468: POP
// Say ( Gnyevko , D3-Gny-1 ) ;
3469: LD_EXP 30
3473: PPUSH
3474: LD_STRING D3-Gny-1
3476: PPUSH
3477: CALL_OW 88
// if un = Burlak then
3481: LD_VAR 0 1
3485: PUSH
3486: LD_EXP 22
3490: EQUAL
3491: IFFALSE 3613
// begin if attackedByApe then
3493: LD_EXP 7
3497: IFFALSE 3513
// Say ( Burlak , D3-Bur-2 ) else
3499: LD_EXP 22
3503: PPUSH
3504: LD_STRING D3-Bur-2
3506: PPUSH
3507: CALL_OW 88
3511: GO 3545
// if apeRadioKilled then
3513: LD_EXP 9
3517: IFFALSE 3533
// Say ( Burlak , D3-Bur-2a ) else
3519: LD_EXP 22
3523: PPUSH
3524: LD_STRING D3-Bur-2a
3526: PPUSH
3527: CALL_OW 88
3531: GO 3545
// Say ( Burlak , D3-Bur-2b ) ;
3533: LD_EXP 22
3537: PPUSH
3538: LD_STRING D3-Bur-2b
3540: PPUSH
3541: CALL_OW 88
// if not joinedToBelkov then
3545: LD_EXP 3
3549: NOT
3550: IFFALSE 3566
// Say ( Burlak , D3-Bur-2c ) else
3552: LD_EXP 22
3556: PPUSH
3557: LD_STRING D3-Bur-2c
3559: PPUSH
3560: CALL_OW 88
3564: GO 3599
// if not americansDefeated then
3566: LD_EXP 10
3570: NOT
3571: IFFALSE 3587
// Say ( Burlak , D3-Bur-2d ) else
3573: LD_EXP 22
3577: PPUSH
3578: LD_STRING D3-Bur-2d
3580: PPUSH
3581: CALL_OW 88
3585: GO 3599
// Say ( Burlak , D3-Bur-2e ) ;
3587: LD_EXP 22
3591: PPUSH
3592: LD_STRING D3-Bur-2e
3594: PPUSH
3595: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
3599: LD_EXP 30
3603: PPUSH
3604: LD_STRING D3-Gny-2
3606: PPUSH
3607: CALL_OW 88
// end else
3611: GO 3663
// begin if un = Saseda then
3613: LD_VAR 0 1
3617: PUSH
3618: LD_EXP 24
3622: EQUAL
3623: IFFALSE 3639
// Say ( Saseda , D3-RSol1-2 ) else
3625: LD_EXP 24
3629: PPUSH
3630: LD_STRING D3-RSol1-2
3632: PPUSH
3633: CALL_OW 88
3637: GO 3651
// Say ( Jaworska , D3-RFSol1-2 ) ;
3639: LD_EXP 25
3643: PPUSH
3644: LD_STRING D3-RFSol1-2
3646: PPUSH
3647: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
3651: LD_EXP 30
3655: PPUSH
3656: LD_STRING D3-Gny-2a
3658: PPUSH
3659: CALL_OW 88
// end ; DialogueOff ;
3663: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
3667: LD_EXP 30
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: CALL_OW 235
// end ;
3679: PPOPN 1
3681: END
// function GnyevkoPokryshkinScene ; begin
3682: LD_INT 0
3684: PPUSH
// gnyevkoMeetPokryshkin := true ;
3685: LD_ADDR_EXP 11
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComHold ( Burlak ) ;
3693: LD_EXP 22
3697: PPUSH
3698: CALL_OW 140
// InGameOn ;
3702: CALL_OW 8
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3706: LD_INT 76
3708: PPUSH
3709: LD_INT 56
3711: PPUSH
3712: LD_INT 3
3714: PPUSH
3715: LD_INT 12
3717: PPUSH
3718: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3722: LD_EXP 23
3726: PPUSH
3727: CALL_OW 85
// SetSide ( Gnyevko , 6 ) ;
3731: LD_EXP 30
3735: PPUSH
3736: LD_INT 6
3738: PPUSH
3739: CALL_OW 235
// ComMoveXY ( Gnyevko , 79 , 56 ) ;
3743: LD_EXP 30
3747: PPUSH
3748: LD_INT 79
3750: PPUSH
3751: LD_INT 56
3753: PPUSH
3754: CALL_OW 111
// Say ( Pokryshkin , D4-Pok-1 ) ;
3758: LD_EXP 23
3762: PPUSH
3763: LD_STRING D4-Pok-1
3765: PPUSH
3766: CALL_OW 88
// Say ( Gnyevko , D4-Gny-1a ) ;
3770: LD_EXP 30
3774: PPUSH
3775: LD_STRING D4-Gny-1a
3777: PPUSH
3778: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3782: LD_EXP 30
3786: PPUSH
3787: LD_STRING D4-Gny-2
3789: PPUSH
3790: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3794: LD_EXP 23
3798: PPUSH
3799: LD_STRING D4-Pok-3
3801: PPUSH
3802: CALL_OW 88
// RemoveSeeing ( 76 , 56 , 3 ) ;
3806: LD_INT 76
3808: PPUSH
3809: LD_INT 56
3811: PPUSH
3812: LD_INT 3
3814: PPUSH
3815: CALL_OW 331
// CenterNowOnUnits ( Burlak ) ;
3819: LD_EXP 22
3823: PPUSH
3824: CALL_OW 87
// InGameOff ;
3828: CALL_OW 9
// ComFree ( Burlak ) ;
3832: LD_EXP 22
3836: PPUSH
3837: CALL_OW 139
// end ;
3841: LD_VAR 0 1
3845: RET
// every 0 0$2 trigger UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_see , 3 ] ) do
3846: LD_EXP 24
3850: PUSH
3851: LD_EXP 25
3855: PUSH
3856: LD_EXP 26
3860: PUSH
3861: LD_EXP 27
3865: PUSH
3866: LD_EXP 28
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PPUSH
3878: LD_INT 101
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 72
3892: IFFALSE 5492
3894: GO 3896
3896: DISABLE
// begin if hasGnyevko then
3897: LD_EXP 4
3901: IFFALSE 3981
// begin if GetDistUnits ( Burlak , Gnyevko ) > 4 and See ( 6 , Gnyevko ) and not See ( 6 , Burlak ) then
3903: LD_EXP 22
3907: PPUSH
3908: LD_EXP 30
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 4
3920: GREATER
3921: IFFALSE 3937
3923: PUSH
3924: LD_INT 6
3926: PPUSH
3927: LD_EXP 30
3931: PPUSH
3932: CALL_OW 292
3936: AND
3937: IFFALSE 3954
3939: PUSH
3940: LD_INT 6
3942: PPUSH
3943: LD_EXP 22
3947: PPUSH
3948: CALL_OW 292
3952: NOT
3953: AND
3954: IFFALSE 3981
// begin GnyevkoPokryshkinScene ;
3956: CALL 3682 0 0
// repeat wait ( 0 0$1 ) ;
3960: LD_INT 35
3962: PPUSH
3963: CALL_OW 67
// until See ( 6 , Burlak ) ;
3967: LD_INT 6
3969: PPUSH
3970: LD_EXP 22
3974: PPUSH
3975: CALL_OW 292
3979: IFFALSE 3960
// end ; end ; joinedToBelkov := true ;
3981: LD_ADDR_EXP 3
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// Video ( true ) ;
3989: LD_INT 1
3991: PPUSH
3992: CALL 48476 0 1
// ChangeSideFog ( 6 , 3 ) ;
3996: LD_INT 6
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 343
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
4006: LD_INT 76
4008: PPUSH
4009: LD_INT 56
4011: PPUSH
4012: LD_INT 3
4014: PPUSH
4015: LD_INT 12
4017: PPUSH
4018: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
4022: LD_EXP 23
4026: PPUSH
4027: CALL_OW 85
// ComMoveUnit ( Pokryshkin , Burlak ) ;
4031: LD_EXP 23
4035: PPUSH
4036: LD_EXP 22
4040: PPUSH
4041: CALL_OW 112
// Say ( Pokryshkin , D4-Pok-1 ) ;
4045: LD_EXP 23
4049: PPUSH
4050: LD_STRING D4-Pok-1
4052: PPUSH
4053: CALL_OW 88
// if gnyevkoMeetPokryshkin then
4057: LD_EXP 11
4061: IFFALSE 4077
// Say ( Gnyevko , D4-Gny-3 ) else
4063: LD_EXP 30
4067: PPUSH
4068: LD_STRING D4-Gny-3
4070: PPUSH
4071: CALL_OW 88
4075: GO 4135
// if hasGnyevko and IsOk ( Gnyevko ) then
4077: LD_EXP 4
4081: IFFALSE 4094
4083: PUSH
4084: LD_EXP 30
4088: PPUSH
4089: CALL_OW 302
4093: AND
4094: IFFALSE 4135
// begin SetSide ( Gnyevko , 6 ) ;
4096: LD_EXP 30
4100: PPUSH
4101: LD_INT 6
4103: PPUSH
4104: CALL_OW 235
// Say ( Gnyevko , D4-Gny-1 ) ;
4108: LD_EXP 30
4112: PPUSH
4113: LD_STRING D4-Gny-1
4115: PPUSH
4116: CALL_OW 88
// ComMoveXY ( Gnyevko , 83 , 60 ) ;
4120: LD_EXP 30
4124: PPUSH
4125: LD_INT 83
4127: PPUSH
4128: LD_INT 60
4130: PPUSH
4131: CALL_OW 111
// end ; ComMoveUnit ( Burlak , Pokryshkin ) ;
4135: LD_EXP 22
4139: PPUSH
4140: LD_EXP 23
4144: PPUSH
4145: CALL_OW 112
// repeat wait ( 3 ) ;
4149: LD_INT 3
4151: PPUSH
4152: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 5 ;
4156: LD_EXP 22
4160: PPUSH
4161: LD_EXP 23
4165: PPUSH
4166: CALL_OW 296
4170: PUSH
4171: LD_INT 5
4173: LESS
4174: IFFALSE 4149
// ComTurnUnit ( Pokryshkin , Burlak ) ;
4176: LD_EXP 23
4180: PPUSH
4181: LD_EXP 22
4185: PPUSH
4186: CALL_OW 119
// ComTurnUnit ( Burlak , Pokryshkin ) ;
4190: LD_EXP 22
4194: PPUSH
4195: LD_EXP 23
4199: PPUSH
4200: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
4204: LD_EXP 22
4208: PPUSH
4209: LD_STRING D4-Bur-3
4211: PPUSH
4212: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
4216: LD_EXP 23
4220: PPUSH
4221: LD_STRING D4-Pok-4
4223: PPUSH
4224: CALL_OW 88
// PlaceUnitXY ( Brown , 31 , 51 , true ) ;
4228: LD_EXP 32
4232: PPUSH
4233: LD_INT 31
4235: PPUSH
4236: LD_INT 51
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: CALL_OW 48
// wait ( 0 0$2 ) ;
4246: LD_INT 70
4248: PPUSH
4249: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
4253: LD_EXP 22
4257: PPUSH
4258: LD_STRING D4-Bur-4
4260: PPUSH
4261: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
4265: LD_EXP 23
4269: PPUSH
4270: LD_STRING D4-Pok-5
4272: PPUSH
4273: CALL_OW 88
// SayRadioNoFace ( Brown , D4-Sol1-5 ) ;
4277: LD_EXP 32
4281: PPUSH
4282: LD_STRING D4-Sol1-5
4284: PPUSH
4285: CALL_OW 586
// Say ( Pokryshkin , D4-Pok-6 ) ;
4289: LD_EXP 23
4293: PPUSH
4294: LD_STRING D4-Pok-6
4296: PPUSH
4297: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-6a ) ;
4301: LD_EXP 23
4305: PPUSH
4306: LD_STRING D4-Pok-6a
4308: PPUSH
4309: CALL_OW 88
// Say ( Burlak , D4-Bur-6 ) ;
4313: LD_EXP 22
4317: PPUSH
4318: LD_STRING D4-Bur-6
4320: PPUSH
4321: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
4325: LD_EXP 23
4329: PPUSH
4330: LD_STRING D4-Pok-7
4332: PPUSH
4333: CALL_OW 88
// Video ( false ) ;
4337: LD_INT 0
4339: PPUSH
4340: CALL 48476 0 1
// RemoveSeeing ( 76 , 56 , 3 ) ;
4344: LD_INT 76
4346: PPUSH
4347: LD_INT 56
4349: PPUSH
4350: LD_INT 3
4352: PPUSH
4353: CALL_OW 331
// ChangeMissionObjectives ( M2 ) ;
4357: LD_STRING M2
4359: PPUSH
4360: CALL_OW 337
// ComFree ( Burlak ) ;
4364: LD_EXP 22
4368: PPUSH
4369: CALL_OW 139
// followPokryshkin := true ;
4373: LD_ADDR_EXP 12
4377: PUSH
4378: LD_INT 1
4380: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4381: LD_INT 70
4383: PPUSH
4384: CALL_OW 67
// MoveToHill ;
4388: CALL 10109 0 0
// PlaceSeeing ( 65 , 57 , 3 , - 9 ) ;
4392: LD_INT 65
4394: PPUSH
4395: LD_INT 57
4397: PPUSH
4398: LD_INT 3
4400: PPUSH
4401: LD_INT 9
4403: NEG
4404: PPUSH
4405: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4409: LD_INT 35
4411: PPUSH
4412: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 5 ;
4416: LD_EXP 23
4420: PPUSH
4421: LD_INT 65
4423: PPUSH
4424: LD_INT 59
4426: PPUSH
4427: CALL_OW 297
4431: PUSH
4432: LD_INT 5
4434: LESS
4435: IFFALSE 4409
// followPokryshkin := false ;
4437: LD_ADDR_EXP 12
4441: PUSH
4442: LD_INT 0
4444: ST_TO_ADDR
// InGameOn ;
4445: CALL_OW 8
// CenterOnUnits ( Pokryshkin ) ;
4449: LD_EXP 23
4453: PPUSH
4454: CALL_OW 85
// ComMoveXY ( Burlak , 69 , 65 ) ;
4458: LD_EXP 22
4462: PPUSH
4463: LD_INT 69
4465: PPUSH
4466: LD_INT 65
4468: PPUSH
4469: CALL_OW 111
// ComMoveXY ( Brown , 58 , 57 ) ;
4473: LD_EXP 32
4477: PPUSH
4478: LD_INT 58
4480: PPUSH
4481: LD_INT 57
4483: PPUSH
4484: CALL_OW 111
// repeat wait ( 3 ) ;
4488: LD_INT 3
4490: PPUSH
4491: CALL_OW 67
// until GetDistUnitXY ( Brown , 58 , 57 ) < 4 ;
4495: LD_EXP 32
4499: PPUSH
4500: LD_INT 58
4502: PPUSH
4503: LD_INT 57
4505: PPUSH
4506: CALL_OW 297
4510: PUSH
4511: LD_INT 4
4513: LESS
4514: IFFALSE 4488
// SetLives ( Brown , 300 ) ;
4516: LD_EXP 32
4520: PPUSH
4521: LD_INT 300
4523: PPUSH
4524: CALL_OW 234
// Say ( Brown , D5-Sol1-1 ) ;
4528: LD_EXP 32
4532: PPUSH
4533: LD_STRING D5-Sol1-1
4535: PPUSH
4536: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4540: LD_EXP 23
4544: PPUSH
4545: LD_STRING D5-Pok-1
4547: PPUSH
4548: CALL_OW 88
// ComAttackUnit ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] , Brown ) ;
4552: LD_EXP 23
4556: PUSH
4557: LD_EXP 27
4561: PUSH
4562: LD_EXP 26
4566: PUSH
4567: LD_EXP 25
4571: PUSH
4572: LD_EXP 24
4576: PUSH
4577: LD_EXP 28
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PPUSH
4590: LD_EXP 32
4594: PPUSH
4595: CALL_OW 115
// ForceSay ( Brown , D5-Sol1-2 ) ;
4599: LD_EXP 32
4603: PPUSH
4604: LD_STRING D5-Sol1-2
4606: PPUSH
4607: CALL_OW 91
// KillUnit ( Brown ) ;
4611: LD_EXP 32
4615: PPUSH
4616: CALL_OW 66
// ComWalk ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] ) ;
4620: LD_EXP 23
4624: PUSH
4625: LD_EXP 27
4629: PUSH
4630: LD_EXP 26
4634: PUSH
4635: LD_EXP 25
4639: PUSH
4640: LD_EXP 24
4644: PUSH
4645: LD_EXP 28
4649: PUSH
4650: EMPTY
4651: LIST
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: PPUSH
4658: CALL_OW 138
// if hasGnyevko then
4662: LD_EXP 4
4666: IFFALSE 4677
// ComWalk ( Gnyevko ) ;
4668: LD_EXP 30
4672: PPUSH
4673: CALL_OW 138
// AddComMoveXY ( Pokryshkin , 60 , 56 ) ;
4677: LD_EXP 23
4681: PPUSH
4682: LD_INT 60
4684: PPUSH
4685: LD_INT 56
4687: PPUSH
4688: CALL_OW 171
// wait ( 0 0$0.5 ) ;
4692: LD_INT 18
4694: PPUSH
4695: CALL_OW 67
// AddComMoveXY ( Belkov , 61 , 59 ) ;
4699: LD_EXP 27
4703: PPUSH
4704: LD_INT 61
4706: PPUSH
4707: LD_INT 59
4709: PPUSH
4710: CALL_OW 171
// AddComTurnXY ( Pokryshkin , 58 , 57 ) ;
4714: LD_EXP 23
4718: PPUSH
4719: LD_INT 58
4721: PPUSH
4722: LD_INT 57
4724: PPUSH
4725: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4729: LD_EXP 27
4733: PPUSH
4734: LD_INT 58
4736: PPUSH
4737: LD_INT 57
4739: PPUSH
4740: CALL_OW 178
// ComMoveXY ( Burlak , 62 , 58 ) ;
4744: LD_EXP 22
4748: PPUSH
4749: LD_INT 62
4751: PPUSH
4752: LD_INT 58
4754: PPUSH
4755: CALL_OW 111
// AddComTurnXY ( Burlak , 61 , 58 ) ;
4759: LD_EXP 22
4763: PPUSH
4764: LD_INT 61
4766: PPUSH
4767: LD_INT 58
4769: PPUSH
4770: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4774: LD_EXP 27
4778: PPUSH
4779: LD_INT 58
4781: PPUSH
4782: LD_INT 57
4784: PPUSH
4785: CALL_OW 178
// Say ( Pokryshkin , D4-Pok-2 ) ;
4789: LD_EXP 23
4793: PPUSH
4794: LD_STRING D4-Pok-2
4796: PPUSH
4797: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4801: LD_INT 10
4803: PPUSH
4804: CALL_OW 67
// Say ( Burlak , D5-Bur-2 ) ;
4808: LD_EXP 22
4812: PPUSH
4813: LD_STRING D5-Bur-2
4815: PPUSH
4816: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4820: LD_EXP 23
4824: PPUSH
4825: LD_STRING D5-Pok-2
4827: PPUSH
4828: CALL_OW 88
// ComTurnUnit ( Belkov , Burlak ) ;
4832: LD_EXP 27
4836: PPUSH
4837: LD_EXP 22
4841: PPUSH
4842: CALL_OW 119
// Say ( Belkov , D5-Bel-2 ) ;
4846: LD_EXP 27
4850: PPUSH
4851: LD_STRING D5-Bel-2
4853: PPUSH
4854: CALL_OW 88
// ComTurnUnit ( Pokryshkin , Belkov ) ;
4858: LD_EXP 23
4862: PPUSH
4863: LD_EXP 27
4867: PPUSH
4868: CALL_OW 119
// Say ( Pokryshkin , D5-Pok-3 ) ;
4872: LD_EXP 23
4876: PPUSH
4877: LD_STRING D5-Pok-3
4879: PPUSH
4880: CALL_OW 88
// if hasGnyevko then
4884: LD_EXP 4
4888: IFFALSE 4916
// begin ComTurnUnit ( Gnyevko , Burlak ) ;
4890: LD_EXP 30
4894: PPUSH
4895: LD_EXP 22
4899: PPUSH
4900: CALL_OW 119
// Say ( Gnyevko , D5-Gny-3 ) ;
4904: LD_EXP 30
4908: PPUSH
4909: LD_STRING D5-Gny-3
4911: PPUSH
4912: CALL_OW 88
// end ; Say ( Burlak , D5-Bur-3 ) ;
4916: LD_EXP 22
4920: PPUSH
4921: LD_STRING D5-Bur-3
4923: PPUSH
4924: CALL_OW 88
// wait ( 0 0$2 ) ;
4928: LD_INT 70
4930: PPUSH
4931: CALL_OW 67
// ComMoveXY ( Pokryshkin , 78 , 57 ) ;
4935: LD_EXP 23
4939: PPUSH
4940: LD_INT 78
4942: PPUSH
4943: LD_INT 57
4945: PPUSH
4946: CALL_OW 111
// Say ( Pokryshkin , D6-Pok-1 ) ;
4950: LD_EXP 23
4954: PPUSH
4955: LD_STRING D6-Pok-1
4957: PPUSH
4958: CALL_OW 88
// ComMoveXY ( Burlak , 75 , 56 ) ;
4962: LD_EXP 22
4966: PPUSH
4967: LD_INT 75
4969: PPUSH
4970: LD_INT 56
4972: PPUSH
4973: CALL_OW 111
// AddComMoveXY ( Burlak , 83 , 62 ) ;
4977: LD_EXP 22
4981: PPUSH
4982: LD_INT 83
4984: PPUSH
4985: LD_INT 62
4987: PPUSH
4988: CALL_OW 171
// ComMoveXY ( Belkov , 80 , 64 ) ;
4992: LD_EXP 27
4996: PPUSH
4997: LD_INT 80
4999: PPUSH
5000: LD_INT 64
5002: PPUSH
5003: CALL_OW 111
// ComMoveXY ( Jaworska , 83 , 67 ) ;
5007: LD_EXP 25
5011: PPUSH
5012: LD_INT 83
5014: PPUSH
5015: LD_INT 67
5017: PPUSH
5018: CALL_OW 111
// ComMoveXY ( Balei , 81 , 52 ) ;
5022: LD_EXP 26
5026: PPUSH
5027: LD_INT 81
5029: PPUSH
5030: LD_INT 52
5032: PPUSH
5033: CALL_OW 111
// ComMoveXY ( Saseda , 78 , 54 ) ;
5037: LD_EXP 24
5041: PPUSH
5042: LD_INT 78
5044: PPUSH
5045: LD_INT 54
5047: PPUSH
5048: CALL_OW 111
// ComMoveXY ( Jaunzeme , 75 , 62 ) ;
5052: LD_EXP 28
5056: PPUSH
5057: LD_INT 75
5059: PPUSH
5060: LD_INT 62
5062: PPUSH
5063: CALL_OW 111
// if hasGnyevko then
5067: LD_EXP 4
5071: IFFALSE 5102
// begin ComMoveXY ( Gnyevko , 77 , 60 ) ;
5073: LD_EXP 30
5077: PPUSH
5078: LD_INT 77
5080: PPUSH
5081: LD_INT 60
5083: PPUSH
5084: CALL_OW 111
// AddComMoveUnit ( Gnyevko , Burlak ) ;
5088: LD_EXP 30
5092: PPUSH
5093: LD_EXP 22
5097: PPUSH
5098: CALL_OW 172
// end ; Say ( Burlak , D6-Bur-1 ) ;
5102: LD_EXP 22
5106: PPUSH
5107: LD_STRING D6-Bur-1
5109: PPUSH
5110: CALL_OW 88
// RemoveSeeing ( 65 , 57 , 3 ) ;
5114: LD_INT 65
5116: PPUSH
5117: LD_INT 57
5119: PPUSH
5120: LD_INT 3
5122: PPUSH
5123: CALL_OW 331
// AddComMoveXY ( Pokryshkin , 87 , 66 ) ;
5127: LD_EXP 23
5131: PPUSH
5132: LD_INT 87
5134: PPUSH
5135: LD_INT 66
5137: PPUSH
5138: CALL_OW 171
// AddComMoveXY ( Balei , 92 , 60 ) ;
5142: LD_EXP 26
5146: PPUSH
5147: LD_INT 92
5149: PPUSH
5150: LD_INT 60
5152: PPUSH
5153: CALL_OW 171
// AddComMoveXY ( Saseda , 90 , 64 ) ;
5157: LD_EXP 24
5161: PPUSH
5162: LD_INT 90
5164: PPUSH
5165: LD_INT 64
5167: PPUSH
5168: CALL_OW 171
// AddComMoveXY ( Jaworska , 87 , 73 ) ;
5172: LD_EXP 25
5176: PPUSH
5177: LD_INT 87
5179: PPUSH
5180: LD_INT 73
5182: PPUSH
5183: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 87 , 69 ) ;
5187: LD_EXP 28
5191: PPUSH
5192: LD_INT 87
5194: PPUSH
5195: LD_INT 69
5197: PPUSH
5198: CALL_OW 171
// AddComMoveXY ( Belkov , 90 , 71 ) ;
5202: LD_EXP 27
5206: PPUSH
5207: LD_INT 90
5209: PPUSH
5210: LD_INT 71
5212: PPUSH
5213: CALL_OW 171
// if not dialogue_skipped then
5217: LD_OWVAR 59
5221: NOT
5222: IFFALSE 5234
// CenterOnXY ( 84 , 64 ) ;
5224: LD_INT 84
5226: PPUSH
5227: LD_INT 64
5229: PPUSH
5230: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-2 ) ;
5234: LD_EXP 23
5238: PPUSH
5239: LD_STRING D6-Pok-2
5241: PPUSH
5242: CALL_OW 88
// AddComMoveXY ( Jaworska , 113 , 104 ) ;
5246: LD_EXP 25
5250: PPUSH
5251: LD_INT 113
5253: PPUSH
5254: LD_INT 104
5256: PPUSH
5257: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 107 , 106 ) ;
5261: LD_EXP 28
5265: PPUSH
5266: LD_INT 107
5268: PPUSH
5269: LD_INT 106
5271: PPUSH
5272: CALL_OW 171
// AddComMoveXY ( Saseda , 125 , 97 ) ;
5276: LD_EXP 24
5280: PPUSH
5281: LD_INT 125
5283: PPUSH
5284: LD_INT 97
5286: PPUSH
5287: CALL_OW 171
// AddComMoveXY ( Balei , 124 , 101 ) ;
5291: LD_EXP 26
5295: PPUSH
5296: LD_INT 124
5298: PPUSH
5299: LD_INT 101
5301: PPUSH
5302: CALL_OW 171
// AddComMoveXY ( Belkov , 119 , 101 ) ;
5306: LD_EXP 27
5310: PPUSH
5311: LD_INT 119
5313: PPUSH
5314: LD_INT 101
5316: PPUSH
5317: CALL_OW 171
// ComMoveUnit ( Burlak , Pokryshkin ) ;
5321: LD_EXP 22
5325: PPUSH
5326: LD_EXP 23
5330: PPUSH
5331: CALL_OW 112
// Say ( Belkov , D6-Bel-2 ) ;
5335: LD_EXP 27
5339: PPUSH
5340: LD_STRING D6-Bel-2
5342: PPUSH
5343: CALL_OW 88
// AddComMoveXY ( Pokryshkin , 119 , 93 ) ;
5347: LD_EXP 23
5351: PPUSH
5352: LD_INT 119
5354: PPUSH
5355: LD_INT 93
5357: PPUSH
5358: CALL_OW 171
// Say ( Burlak , D6-Bur-2 ) ;
5362: LD_EXP 22
5366: PPUSH
5367: LD_STRING D6-Bur-2
5369: PPUSH
5370: CALL_OW 88
// if not dialogue_skipped then
5374: LD_OWVAR 59
5378: NOT
5379: IFFALSE 5391
// CenterOnXY ( 105 , 82 ) ;
5381: LD_INT 105
5383: PPUSH
5384: LD_INT 82
5386: PPUSH
5387: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-3 ) ;
5391: LD_EXP 23
5395: PPUSH
5396: LD_STRING D6-Pok-3
5398: PPUSH
5399: CALL_OW 88
// ComHold ( Pokryshkin ) ;
5403: LD_EXP 23
5407: PPUSH
5408: CALL_OW 140
// SayRadio ( Kurin , D6-Kur-3 ) ;
5412: LD_EXP 29
5416: PPUSH
5417: LD_STRING D6-Kur-3
5419: PPUSH
5420: CALL_OW 94
// ComHold ( [ Jaworska , Belkov , Saseda , Burlak , Balei , Jaunzeme , Gnyevko ] ) ;
5424: LD_EXP 25
5428: PUSH
5429: LD_EXP 27
5433: PUSH
5434: LD_EXP 24
5438: PUSH
5439: LD_EXP 22
5443: PUSH
5444: LD_EXP 26
5448: PUSH
5449: LD_EXP 28
5453: PUSH
5454: LD_EXP 30
5458: PUSH
5459: EMPTY
5460: LIST
5461: LIST
5462: LIST
5463: LIST
5464: LIST
5465: LIST
5466: LIST
5467: PPUSH
5468: CALL_OW 140
// Say ( Pokryshkin , D6-Pok-4 ) ;
5472: LD_EXP 23
5476: PPUSH
5477: LD_STRING D6-Pok-4
5479: PPUSH
5480: CALL_OW 88
// InGameOff ;
5484: CALL_OW 9
// AttackOnTimsBase ;
5488: CALL 5493 0 0
// end ;
5492: END
// function AttackOnTimsBase ; var i , tmp ; begin
5493: LD_INT 0
5495: PPUSH
5496: PPUSH
5497: PPUSH
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
5498: LD_INT 6
5500: PPUSH
5501: LD_INT 1
5503: PPUSH
5504: LD_INT 2
5506: PPUSH
5507: LD_INT 1
5509: PPUSH
5510: CALL_OW 80
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
5514: LD_INT 3
5516: PPUSH
5517: LD_INT 1
5519: PPUSH
5520: LD_INT 2
5522: PPUSH
5523: LD_INT 1
5525: PPUSH
5526: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin ;
5530: LD_ADDR_VAR 0 3
5534: PUSH
5535: LD_INT 22
5537: PUSH
5538: LD_INT 6
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 21
5547: PUSH
5548: LD_INT 1
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PPUSH
5559: CALL_OW 69
5563: PUSH
5564: LD_EXP 23
5568: DIFF
5569: ST_TO_ADDR
// for i in tmp do
5570: LD_ADDR_VAR 0 2
5574: PUSH
5575: LD_VAR 0 3
5579: PUSH
5580: FOR_IN
5581: IFFALSE 5597
// DoNotAttack ( 1 , i ) ;
5583: LD_INT 1
5585: PPUSH
5586: LD_VAR 0 2
5590: PPUSH
5591: CALL_OW 471
5595: GO 5580
5597: POP
5598: POP
// ComMoveXY ( Pokryshkin , 65 , 40 ) ;
5599: LD_EXP 23
5603: PPUSH
5604: LD_INT 65
5606: PPUSH
5607: LD_INT 40
5609: PPUSH
5610: CALL_OW 111
// ComMoveXY ( tmp , 75 , 51 ) ;
5614: LD_VAR 0 3
5618: PPUSH
5619: LD_INT 75
5621: PPUSH
5622: LD_INT 51
5624: PPUSH
5625: CALL_OW 111
// Say ( Belkov , D6-Bel-4 ) ;
5629: LD_EXP 27
5633: PPUSH
5634: LD_STRING D6-Bel-4
5636: PPUSH
5637: CALL_OW 88
// AddComAgressiveMove ( Pokryshkin , 57 , 30 ) ;
5641: LD_EXP 23
5645: PPUSH
5646: LD_INT 57
5648: PPUSH
5649: LD_INT 30
5651: PPUSH
5652: CALL_OW 174
// AddComAgressiveMove ( tmp , 60 , 35 ) ;
5656: LD_VAR 0 3
5660: PPUSH
5661: LD_INT 60
5663: PPUSH
5664: LD_INT 35
5666: PPUSH
5667: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
5671: LD_INT 35
5673: PPUSH
5674: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 40 ) < 4 ;
5678: LD_EXP 23
5682: PPUSH
5683: LD_INT 65
5685: PPUSH
5686: LD_INT 40
5688: PPUSH
5689: CALL_OW 297
5693: PUSH
5694: LD_INT 4
5696: LESS
5697: IFFALSE 5671
// Say ( Pokryshkin , D7-Pok-1 ) ;
5699: LD_EXP 23
5703: PPUSH
5704: LD_STRING D7-Pok-1
5706: PPUSH
5707: CALL_OW 88
// wait ( 0 0$0.3 ) ;
5711: LD_INT 10
5713: PPUSH
5714: CALL_OW 67
// async ;
5718: ASYNC
// Say ( Holland , D7-FSol1-1 ) ;
5719: LD_EXP 34
5723: PPUSH
5724: LD_STRING D7-FSol1-1
5726: PPUSH
5727: CALL_OW 88
// sync ;
5731: SYNC
// repeat wait ( 0 0$1 ) ;
5732: LD_INT 35
5734: PPUSH
5735: CALL_OW 67
// until not IsOk ( Pokryshkin ) ;
5739: LD_EXP 23
5743: PPUSH
5744: CALL_OW 302
5748: NOT
5749: IFFALSE 5732
// Say ( Belkov , D7a-Bel-1 ) ;
5751: LD_EXP 27
5755: PPUSH
5756: LD_STRING D7a-Bel-1
5758: PPUSH
5759: CALL_OW 88
// ComMoveXY ( tmp , 85 , 63 ) ;
5763: LD_VAR 0 3
5767: PPUSH
5768: LD_INT 85
5770: PPUSH
5771: LD_INT 63
5773: PPUSH
5774: CALL_OW 111
// Say ( Saseda , D7a-RSol1-1 ) ;
5778: LD_EXP 24
5782: PPUSH
5783: LD_STRING D7a-RSol1-1
5785: PPUSH
5786: CALL_OW 88
// Say ( Holland , D7a-FSol1-1 ) ;
5790: LD_EXP 34
5794: PPUSH
5795: LD_STRING D7a-FSol1-1
5797: PPUSH
5798: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5802: LD_INT 35
5804: PPUSH
5805: CALL_OW 67
// until GetDistUnitXY ( Belkov , 85 , 63 ) < 8 ;
5809: LD_EXP 27
5813: PPUSH
5814: LD_INT 85
5816: PPUSH
5817: LD_INT 63
5819: PPUSH
5820: CALL_OW 297
5824: PUSH
5825: LD_INT 8
5827: LESS
5828: IFFALSE 5802
// for i in tmp do
5830: LD_ADDR_VAR 0 2
5834: PUSH
5835: LD_VAR 0 3
5839: PUSH
5840: FOR_IN
5841: IFFALSE 5857
// NormalAttack ( 1 , i ) ;
5843: LD_INT 1
5845: PPUSH
5846: LD_VAR 0 2
5850: PPUSH
5851: CALL_OW 472
5855: GO 5840
5857: POP
5858: POP
// InGameOn ;
5859: CALL_OW 8
// ComHold ( Burlak ) ;
5863: LD_EXP 22
5867: PPUSH
5868: CALL_OW 140
// CenterNowOnUnits ( Belkov ) ;
5872: LD_EXP 27
5876: PPUSH
5877: CALL_OW 87
// Say ( Belkov , D7b-Bel-1 ) ;
5881: LD_EXP 27
5885: PPUSH
5886: LD_STRING D7b-Bel-1
5888: PPUSH
5889: CALL_OW 88
// ComTurnUnit ( Belkov , Jaworska ) ;
5893: LD_EXP 27
5897: PPUSH
5898: LD_EXP 25
5902: PPUSH
5903: CALL_OW 119
// for i in tmp diff Belkov do
5907: LD_ADDR_VAR 0 2
5911: PUSH
5912: LD_VAR 0 3
5916: PUSH
5917: LD_EXP 27
5921: DIFF
5922: PUSH
5923: FOR_IN
5924: IFFALSE 5942
// ComTurnUnit ( i , Belkov ) ;
5926: LD_VAR 0 2
5930: PPUSH
5931: LD_EXP 27
5935: PPUSH
5936: CALL_OW 119
5940: GO 5923
5942: POP
5943: POP
// Say ( Jaworska , D7b-FSol1-1 ) ;
5944: LD_EXP 25
5948: PPUSH
5949: LD_STRING D7b-FSol1-1
5951: PPUSH
5952: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5956: LD_EXP 27
5960: PPUSH
5961: LD_STRING D7b-Bel-2
5963: PPUSH
5964: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5968: LD_EXP 24
5972: PPUSH
5973: LD_STRING D7b-RSol1-2
5975: PPUSH
5976: CALL_OW 88
// if GetDistUnits ( Belkov , Burlak ) > 10 then
5980: LD_EXP 27
5984: PPUSH
5985: LD_EXP 22
5989: PPUSH
5990: CALL_OW 296
5994: PUSH
5995: LD_INT 10
5997: GREATER
5998: IFFALSE 6096
// begin Say ( Belkov , D7b-Bel-3 ) ;
6000: LD_EXP 27
6004: PPUSH
6005: LD_STRING D7b-Bel-3
6007: PPUSH
6008: CALL_OW 88
// InGameOff ;
6012: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
6016: LD_INT 35
6018: PPUSH
6019: CALL_OW 67
// until GetDistUnits ( Burlak , Belkov ) <= 10 ;
6023: LD_EXP 22
6027: PPUSH
6028: LD_EXP 27
6032: PPUSH
6033: CALL_OW 296
6037: PUSH
6038: LD_INT 10
6040: LESSEQUAL
6041: IFFALSE 6016
// InGameOn ;
6043: CALL_OW 8
// CenterOnUnits ( Burlak ) ;
6047: LD_EXP 22
6051: PPUSH
6052: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
6056: LD_EXP 22
6060: PPUSH
6061: LD_EXP 27
6065: PPUSH
6066: CALL_OW 112
// ComTurnUnit ( Belkov , Burlak ) ;
6070: LD_EXP 27
6074: PPUSH
6075: LD_EXP 22
6079: PPUSH
6080: CALL_OW 119
// Say ( Belkov , D7b-Bel-3a ) ;
6084: LD_EXP 27
6088: PPUSH
6089: LD_STRING D7b-Bel-3a
6091: PPUSH
6092: CALL_OW 88
// end ; CenterOnUnits ( Burlak ) ;
6096: LD_EXP 22
6100: PPUSH
6101: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
6105: LD_EXP 22
6109: PPUSH
6110: LD_EXP 27
6114: PPUSH
6115: CALL_OW 112
// Say ( Burlak , D7b-Bur-3 ) ;
6119: LD_EXP 22
6123: PPUSH
6124: LD_STRING D7b-Bur-3
6126: PPUSH
6127: CALL_OW 88
// ComTurnUnit ( Burlak , Belkov ) ;
6131: LD_EXP 22
6135: PPUSH
6136: LD_EXP 27
6140: PPUSH
6141: CALL_OW 119
// ComTurnUnit ( tmp , Burlak ) ;
6145: LD_VAR 0 3
6149: PPUSH
6150: LD_EXP 22
6154: PPUSH
6155: CALL_OW 119
// Say ( Belkov , D7b-Bel-4 ) ;
6159: LD_EXP 27
6163: PPUSH
6164: LD_STRING D7b-Bel-4
6166: PPUSH
6167: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
6171: LD_EXP 22
6175: PPUSH
6176: LD_STRING D7b-Bur-4
6178: PPUSH
6179: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
6183: LD_EXP 27
6187: PPUSH
6188: LD_STRING D7b-Bel-5
6190: PPUSH
6191: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
6195: LD_EXP 25
6199: PPUSH
6200: LD_STRING D7b-FSol1-5
6202: PPUSH
6203: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
6207: LD_EXP 27
6211: PPUSH
6212: LD_STRING D7b-Bel-6
6214: PPUSH
6215: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
6219: LD_EXP 22
6223: PPUSH
6224: LD_STRING D7b-Bur-6
6226: PPUSH
6227: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
6231: LD_EXP 24
6235: PPUSH
6236: LD_STRING D7b-RSol1-6
6238: PPUSH
6239: CALL_OW 88
// InGameOff ;
6243: CALL_OW 9
// for i in tmp do
6247: LD_ADDR_VAR 0 2
6251: PUSH
6252: LD_VAR 0 3
6256: PUSH
6257: FOR_IN
6258: IFFALSE 6274
// SetSide ( i , 3 ) ;
6260: LD_VAR 0 2
6264: PPUSH
6265: LD_INT 3
6267: PPUSH
6268: CALL_OW 235
6272: GO 6257
6274: POP
6275: POP
// ChangeMissionObjectives ( M3 ) ;
6276: LD_STRING M3
6278: PPUSH
6279: CALL_OW 337
// burlakAsCommander := true ;
6283: LD_ADDR_EXP 14
6287: PUSH
6288: LD_INT 1
6290: ST_TO_ADDR
// end ;
6291: LD_VAR 0 1
6295: RET
// every 0 0$1 trigger followPokryshkin and GetDistUnits ( Pokryshkin , Burlak ) > 10 do
6296: LD_EXP 12
6300: IFFALSE 6322
6302: PUSH
6303: LD_EXP 23
6307: PPUSH
6308: LD_EXP 22
6312: PPUSH
6313: CALL_OW 296
6317: PUSH
6318: LD_INT 10
6320: GREATER
6321: AND
6322: IFFALSE 6468
6324: GO 6326
6326: DISABLE
// begin InGameOn ;
6327: CALL_OW 8
// ComTurnUnit ( Pokryshkin , Burlak ) ;
6331: LD_EXP 23
6335: PPUSH
6336: LD_EXP 22
6340: PPUSH
6341: CALL_OW 119
// ComHold ( Burlak ) ;
6345: LD_EXP 22
6349: PPUSH
6350: CALL_OW 140
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
6354: LD_EXP 23
6358: PPUSH
6359: LD_STRING DSplit-Pok-1
6361: PPUSH
6362: CALL_OW 88
// ComMoveUnit ( Burlak , Pokryshkin ) ;
6366: LD_EXP 22
6370: PPUSH
6371: LD_EXP 23
6375: PPUSH
6376: CALL_OW 112
// Say ( Burlak , DSplit-Bur-1 ) ;
6380: LD_EXP 22
6384: PPUSH
6385: LD_STRING DSplit-Bur-1
6387: PPUSH
6388: CALL_OW 88
// repeat wait ( 3 ) ;
6392: LD_INT 3
6394: PPUSH
6395: CALL_OW 67
// until GetDistUnits ( Pokryshkin , Burlak ) < 6 ;
6399: LD_EXP 23
6403: PPUSH
6404: LD_EXP 22
6408: PPUSH
6409: CALL_OW 296
6413: PUSH
6414: LD_INT 6
6416: LESS
6417: IFFALSE 6392
// InGameOff ;
6419: CALL_OW 9
// ComFree ( Burlak ) ;
6423: LD_EXP 22
6427: PPUSH
6428: CALL_OW 139
// if IsOk ( Brown ) then
6432: LD_EXP 32
6436: PPUSH
6437: CALL_OW 302
6441: IFFALSE 6467
// begin ComMoveXY ( Pokryshkin , 65 , 59 ) ;
6443: LD_EXP 23
6447: PPUSH
6448: LD_INT 65
6450: PPUSH
6451: LD_INT 59
6453: PPUSH
6454: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6458: LD_EXP 23
6462: PPUSH
6463: CALL_OW 197
// end ; enable ;
6467: ENABLE
// end ;
6468: END
// every 0 0$1 trigger attackedAllied and IsOk ( Pokryshkin ) and joinedToBelkov do
6469: LD_EXP 13
6473: IFFALSE 6486
6475: PUSH
6476: LD_EXP 23
6480: PPUSH
6481: CALL_OW 302
6485: AND
6486: IFFALSE 6494
6488: PUSH
6489: LD_EXP 3
6493: AND
6494: IFFALSE 6526
6496: GO 6498
6498: DISABLE
// begin DialogueOn ;
6499: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
6503: LD_EXP 23
6507: PPUSH
6508: LD_STRING DAttack-Pok-1
6510: PPUSH
6511: CALL_OW 88
// DialogueOff ;
6515: CALL_OW 7
// YouLost ( Ally ) ;
6519: LD_STRING Ally
6521: PPUSH
6522: CALL_OW 104
// end ;
6526: END
// every 0 0$2 trigger FilterUnitsInArea ( backwardEntranceArea , [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) and IsOk ( usBun1 ) do
6527: LD_INT 18
6529: PPUSH
6530: LD_INT 22
6532: PUSH
6533: LD_INT 3
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: PUSH
6540: LD_INT 25
6542: PUSH
6543: LD_INT 1
6545: PUSH
6546: EMPTY
6547: LIST
6548: LIST
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PPUSH
6554: CALL_OW 70
6558: IFFALSE 6569
6560: PUSH
6561: LD_INT 3
6563: PPUSH
6564: CALL_OW 302
6568: AND
6569: IFFALSE 6581
6571: GO 6573
6573: DISABLE
// SetAchievement ( ACH_BACKENTRANCE ) ;
6574: LD_STRING ACH_BACKENTRANCE
6576: PPUSH
6577: CALL_OW 543
6581: END
// every 0 0$1 trigger burlakAsCommander do
6582: LD_EXP 14
6586: IFFALSE 6750
6588: GO 6590
6590: DISABLE
// begin if Difficulty > 1 then
6591: LD_OWVAR 67
6595: PUSH
6596: LD_INT 1
6598: GREATER
6599: IFFALSE 6611
// SetLives ( usBun1 , 1000 ) ;
6601: LD_INT 3
6603: PPUSH
6604: LD_INT 1000
6606: PPUSH
6607: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
6611: LD_INT 35
6613: PPUSH
6614: CALL_OW 67
// until SeeUnits ( 1 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
6618: LD_INT 1
6620: PPUSH
6621: LD_INT 22
6623: PUSH
6624: LD_INT 3
6626: PUSH
6627: EMPTY
6628: LIST
6629: LIST
6630: PUSH
6631: LD_INT 21
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PPUSH
6645: CALL_OW 69
6649: PPUSH
6650: CALL 51949 0 2
6654: IFFALSE 6611
// Say ( Holland , D8-FSol1-1 ) ;
6656: LD_EXP 34
6660: PPUSH
6661: LD_STRING D8-FSol1-1
6663: PPUSH
6664: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6668: LD_EXP 33
6672: PPUSH
6673: LD_STRING D8-Glad-1
6675: PPUSH
6676: CALL_OW 88
// activeAmericanScript := true ;
6680: LD_ADDR_EXP 15
6684: PUSH
6685: LD_INT 1
6687: ST_TO_ADDR
// Say ( Burlak , D8-Bur-1 ) ;
6688: LD_EXP 22
6692: PPUSH
6693: LD_STRING D8-Bur-1
6695: PPUSH
6696: CALL_OW 88
// repeat wait ( 0 0$2 ) ;
6700: LD_INT 70
6702: PPUSH
6703: CALL_OW 67
// if not IsOk ( usBun1 ) then
6707: LD_INT 3
6709: PPUSH
6710: CALL_OW 302
6714: NOT
6715: IFFALSE 6719
// exit ;
6717: GO 6750
// until FilterUnitsInArea ( behindTreesArea , [ f_side , 3 ] ) ;
6719: LD_INT 14
6721: PPUSH
6722: LD_INT 22
6724: PUSH
6725: LD_INT 3
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: PPUSH
6732: CALL_OW 70
6736: IFFALSE 6700
// Say ( Holland , D8-FSol1-2 ) ;
6738: LD_EXP 34
6742: PPUSH
6743: LD_STRING D8-FSol1-2
6745: PPUSH
6746: CALL_OW 88
// end ;
6750: END
// every 0 0$1 trigger IsInArea ( Gladstone , escapeArea ) or IsAt ( Gladstone , 71 , 1 ) do
6751: LD_EXP 33
6755: PPUSH
6756: LD_INT 15
6758: PPUSH
6759: CALL_OW 308
6763: IFTRUE 6782
6765: PUSH
6766: LD_EXP 33
6770: PPUSH
6771: LD_INT 71
6773: PPUSH
6774: LD_INT 1
6776: PPUSH
6777: CALL_OW 307
6781: OR
6782: IFFALSE 6814
6784: GO 6786
6786: DISABLE
// begin RemoveUnit ( Gladstone ) ;
6787: LD_EXP 33
6791: PPUSH
6792: CALL_OW 64
// gladstoneEscaped := true ;
6796: LD_ADDR_EXP 16
6800: PUSH
6801: LD_INT 1
6803: ST_TO_ADDR
// SaveVariable ( 1 , 01_GladstoneEscaped ) ;
6804: LD_INT 1
6806: PPUSH
6807: LD_STRING 01_GladstoneEscaped
6809: PPUSH
6810: CALL_OW 39
// end ;
6814: END
// every 0 0$1 trigger IsInArea ( Holland , escapeArea ) or IsAt ( Holland , 72 , 1 ) do
6815: LD_EXP 34
6819: PPUSH
6820: LD_INT 15
6822: PPUSH
6823: CALL_OW 308
6827: IFTRUE 6846
6829: PUSH
6830: LD_EXP 34
6834: PPUSH
6835: LD_INT 72
6837: PPUSH
6838: LD_INT 1
6840: PPUSH
6841: CALL_OW 307
6845: OR
6846: IFFALSE 6878
6848: GO 6850
6850: DISABLE
// begin RemoveUnit ( Holland ) ;
6851: LD_EXP 34
6855: PPUSH
6856: CALL_OW 64
// hollandEscaped := true ;
6860: LD_ADDR_EXP 17
6864: PUSH
6865: LD_INT 1
6867: ST_TO_ADDR
// SaveVariable ( 1 , 01_HollandEscaped ) ;
6868: LD_INT 1
6870: PPUSH
6871: LD_STRING 01_HollandEscaped
6873: PPUSH
6874: CALL_OW 39
// end ;
6878: END
// every 0 0$1 trigger IsInArea ( Mel , escapeArea ) or IsAt ( Mel , 70 , 1 ) do
6879: LD_EXP 35
6883: PPUSH
6884: LD_INT 15
6886: PPUSH
6887: CALL_OW 308
6891: IFTRUE 6910
6893: PUSH
6894: LD_EXP 35
6898: PPUSH
6899: LD_INT 70
6901: PPUSH
6902: LD_INT 1
6904: PPUSH
6905: CALL_OW 307
6909: OR
6910: IFFALSE 6942
6912: GO 6914
6914: DISABLE
// begin RemoveUnit ( Mel ) ;
6915: LD_EXP 35
6919: PPUSH
6920: CALL_OW 64
// MelEscaped := true ;
6924: LD_ADDR_EXP 18
6928: PUSH
6929: LD_INT 1
6931: ST_TO_ADDR
// SaveVariable ( 1 , 01_MelEscaped ) ;
6932: LD_INT 1
6934: PPUSH
6935: LD_STRING 01_MelEscaped
6937: PPUSH
6938: CALL_OW 39
// end ;
6942: END
// every 0 0$1 trigger not IsOk ( usBun1 ) do var tmp , ape , p ;
6943: LD_INT 3
6945: PPUSH
6946: CALL_OW 302
6950: NOT
6951: IFFALSE 8610
6953: GO 6955
6955: DISABLE
6956: LD_INT 0
6958: PPUSH
6959: PPUSH
6960: PPUSH
// begin activeAmericanScript := false ;
6961: LD_ADDR_EXP 15
6965: PUSH
6966: LD_INT 0
6968: ST_TO_ADDR
// if IsInUnit ( Gladstone ) then
6969: LD_EXP 33
6973: PPUSH
6974: CALL_OW 310
6978: IFFALSE 6989
// ComExitBuilding ( Gladstone ) ;
6980: LD_EXP 33
6984: PPUSH
6985: CALL_OW 122
// AddComMoveXY ( Gladstone , 71 , 1 ) ;
6989: LD_EXP 33
6993: PPUSH
6994: LD_INT 71
6996: PPUSH
6997: LD_INT 1
6999: PPUSH
7000: CALL_OW 171
// ComMoveXY ( Holland , 72 , 1 ) ;
7004: LD_EXP 34
7008: PPUSH
7009: LD_INT 72
7011: PPUSH
7012: LD_INT 1
7014: PPUSH
7015: CALL_OW 111
// ComMoveXY ( Mel , 70 , 1 ) ;
7019: LD_EXP 35
7023: PPUSH
7024: LD_INT 70
7026: PPUSH
7027: LD_INT 1
7029: PPUSH
7030: CALL_OW 111
// Say ( Holland , D8-FSol1-2a ) ;
7034: LD_EXP 34
7038: PPUSH
7039: LD_STRING D8-FSol1-2a
7041: PPUSH
7042: CALL_OW 88
// Say ( Gladstone , D8-Glad-2 ) ;
7046: LD_EXP 33
7050: PPUSH
7051: LD_STRING D8-Glad-2
7053: PPUSH
7054: CALL_OW 88
// wait ( 0 0$1 ) ;
7058: LD_INT 35
7060: PPUSH
7061: CALL_OW 67
// if IsOk ( Gladstone ) then
7065: LD_EXP 33
7069: PPUSH
7070: CALL_OW 302
7074: IFFALSE 7163
// begin DialogueOn ;
7076: CALL_OW 6
// PlaceSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 , - 3 ) ;
7080: LD_EXP 33
7084: PPUSH
7085: CALL_OW 250
7089: PPUSH
7090: LD_EXP 33
7094: PPUSH
7095: CALL_OW 251
7099: PPUSH
7100: LD_INT 3
7102: PPUSH
7103: LD_INT 3
7105: NEG
7106: PPUSH
7107: CALL_OW 330
// CenterNowOnUnits ( Gladstone ) ;
7111: LD_EXP 33
7115: PPUSH
7116: CALL_OW 87
// Say ( Burlak , D8-Bur-2 ) ;
7120: LD_EXP 22
7124: PPUSH
7125: LD_STRING D8-Bur-2
7127: PPUSH
7128: CALL_OW 88
// RemoveSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 ) ;
7132: LD_EXP 33
7136: PPUSH
7137: CALL_OW 250
7141: PPUSH
7142: LD_EXP 33
7146: PPUSH
7147: CALL_OW 251
7151: PPUSH
7152: LD_INT 3
7154: PPUSH
7155: CALL_OW 331
// DialogueOff ;
7159: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7163: LD_INT 35
7165: PPUSH
7166: CALL_OW 67
// until not IsOk ( Gladstone ) and not IsOk ( Holland ) ;
7170: LD_EXP 33
7174: PPUSH
7175: CALL_OW 302
7179: NOT
7180: IFFALSE 7194
7182: PUSH
7183: LD_EXP 34
7187: PPUSH
7188: CALL_OW 302
7192: NOT
7193: AND
7194: IFFALSE 7163
// if gladstoneEscaped and hollandEscaped then
7196: LD_EXP 16
7200: IFFALSE 7208
7202: PUSH
7203: LD_EXP 17
7207: AND
7208: IFFALSE 7224
// Say ( Burlak , D9-Bur-1c ) else
7210: LD_EXP 22
7214: PPUSH
7215: LD_STRING D9-Bur-1c
7217: PPUSH
7218: CALL_OW 88
7222: GO 7276
// if hollandEscaped then
7224: LD_EXP 17
7228: IFFALSE 7244
// Say ( Burlak , D9-Bur-1b ) else
7230: LD_EXP 22
7234: PPUSH
7235: LD_STRING D9-Bur-1b
7237: PPUSH
7238: CALL_OW 88
7242: GO 7276
// if gladstoneEscaped then
7244: LD_EXP 16
7248: IFFALSE 7264
// Say ( Burlak , D9-Bur-1a ) else
7250: LD_EXP 22
7254: PPUSH
7255: LD_STRING D9-Bur-1a
7257: PPUSH
7258: CALL_OW 88
7262: GO 7276
// Say ( Burlak , D9-Bur-1 ) ;
7264: LD_EXP 22
7268: PPUSH
7269: LD_STRING D9-Bur-1
7271: PPUSH
7272: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7276: LD_INT 35
7278: PPUSH
7279: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
7283: LD_INT 22
7285: PUSH
7286: LD_INT 1
7288: PUSH
7289: EMPTY
7290: LIST
7291: LIST
7292: PUSH
7293: LD_INT 50
7295: PUSH
7296: EMPTY
7297: LIST
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: PPUSH
7303: CALL_OW 69
7307: NOT
7308: IFFALSE 7276
// DialogueOn ;
7310: CALL_OW 6
// Say ( Belkov , D10-Bel-1 ) ;
7314: LD_EXP 27
7318: PPUSH
7319: LD_STRING D10-Bel-1
7321: PPUSH
7322: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
7326: LD_EXP 22
7330: PPUSH
7331: LD_STRING D10-Bur-1
7333: PPUSH
7334: CALL_OW 88
// if IsOk ( Belkov ) then
7338: LD_EXP 27
7342: PPUSH
7343: CALL_OW 302
7347: IFFALSE 7363
// Say ( Belkov , D10-Bel-1a ) else
7349: LD_EXP 27
7353: PPUSH
7354: LD_STRING D10-Bel-1a
7356: PPUSH
7357: CALL_OW 88
7361: GO 7436
// if IsOk ( Saseda ) then
7363: LD_EXP 24
7367: PPUSH
7368: CALL_OW 302
7372: IFFALSE 7388
// Say ( Saseda , D10-RSol1-1 ) else
7374: LD_EXP 24
7378: PPUSH
7379: LD_STRING D10-RSol1-1
7381: PPUSH
7382: CALL_OW 88
7386: GO 7436
// if IsOk ( Balei ) then
7388: LD_EXP 26
7392: PPUSH
7393: CALL_OW 302
7397: IFFALSE 7413
// Say ( Balei , D10-RSol1-1 ) else
7399: LD_EXP 26
7403: PPUSH
7404: LD_STRING D10-RSol1-1
7406: PPUSH
7407: CALL_OW 88
7411: GO 7436
// if IsOk ( Jaunzeme ) then
7413: LD_EXP 28
7417: PPUSH
7418: CALL_OW 302
7422: IFFALSE 7436
// Say ( Jaunzeme , D10-RSol1-1 ) ;
7424: LD_EXP 28
7428: PPUSH
7429: LD_STRING D10-RSol1-1
7431: PPUSH
7432: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko ] ;
7436: LD_ADDR_VAR 0 1
7440: PUSH
7441: LD_INT 22
7443: PUSH
7444: LD_INT 3
7446: PUSH
7447: EMPTY
7448: LIST
7449: LIST
7450: PUSH
7451: LD_INT 25
7453: PUSH
7454: LD_INT 1
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: PUSH
7461: LD_INT 26
7463: PUSH
7464: LD_INT 1
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: LIST
7475: PPUSH
7476: CALL_OW 69
7480: PUSH
7481: LD_EXP 22
7485: PUSH
7486: LD_EXP 30
7490: PUSH
7491: EMPTY
7492: LIST
7493: LIST
7494: DIFF
7495: ST_TO_ADDR
// if tmp then
7496: LD_VAR 0 1
7500: IFFALSE 7514
// Say ( Burlak , D10-Bur-2 ) ;
7502: LD_EXP 22
7506: PPUSH
7507: LD_STRING D10-Bur-2
7509: PPUSH
7510: CALL_OW 88
// DialogueOff ;
7514: CALL_OW 7
// if gladstoneEscaped or hollandEscaped then
7518: LD_EXP 16
7522: IFTRUE 7530
7524: PUSH
7525: LD_EXP 17
7529: OR
7530: IFFALSE 7541
// ChangeMissionObjectives ( M4b ) else
7532: LD_STRING M4b
7534: PPUSH
7535: CALL_OW 337
7539: GO 7548
// ChangeMissionObjectives ( M4a ) ;
7541: LD_STRING M4a
7543: PPUSH
7544: CALL_OW 337
// canEnd := true ;
7548: LD_ADDR_EXP 19
7552: PUSH
7553: LD_INT 1
7555: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
7556: LD_INT 16
7558: PPUSH
7559: LD_INT 1
7561: PPUSH
7562: CALL_OW 424
// wait ( rand ( 0 0$20 , 0 0$40 ) ) ;
7566: LD_INT 700
7568: PPUSH
7569: LD_INT 1400
7571: PPUSH
7572: CALL_OW 12
7576: PPUSH
7577: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7581: LD_INT 35
7583: PPUSH
7584: CALL_OW 67
// until PlaceUnitArea ( Kirilenkova , kirilenkovaSpawn , true ) ;
7588: LD_EXP 31
7592: PPUSH
7593: LD_INT 12
7595: PPUSH
7596: LD_INT 1
7598: PPUSH
7599: CALL_OW 49
7603: IFFALSE 7581
// if not See ( 3 , Kirilenkova ) then
7605: LD_INT 3
7607: PPUSH
7608: LD_EXP 31
7612: PPUSH
7613: CALL_OW 292
7617: NOT
7618: IFFALSE 8071
// begin DialogueOn ;
7620: CALL_OW 6
// InGameOn ;
7624: CALL_OW 8
// SayRadioNoFace ( Kirilenkova , D11b-Kir-1 ) ;
7628: LD_EXP 31
7632: PPUSH
7633: LD_STRING D11b-Kir-1
7635: PPUSH
7636: CALL_OW 586
// if IsOk ( Belkov ) then
7640: LD_EXP 27
7644: PPUSH
7645: CALL_OW 302
7649: IFFALSE 7677
// begin Say ( Belkov , D11b-Bel-1 ) ;
7651: LD_EXP 27
7655: PPUSH
7656: LD_STRING D11b-Bel-1
7658: PPUSH
7659: CALL_OW 88
// Say ( Belkov , D11b-Bel-1a ) ;
7663: LD_EXP 27
7667: PPUSH
7668: LD_STRING D11b-Bel-1a
7670: PPUSH
7671: CALL_OW 88
// end else
7675: GO 7750
// if IsOk ( Jaworska ) then
7677: LD_EXP 25
7681: PPUSH
7682: CALL_OW 302
7686: IFFALSE 7702
// Say ( Jaworska , D11b-RFSol1-1 ) else
7688: LD_EXP 25
7692: PPUSH
7693: LD_STRING D11b-RFSol1-1
7695: PPUSH
7696: CALL_OW 88
7700: GO 7750
// if IsOk ( Saseda ) then
7702: LD_EXP 24
7706: PPUSH
7707: CALL_OW 302
7711: IFFALSE 7727
// Say ( Saseda , D11b-RSol1-1 ) else
7713: LD_EXP 24
7717: PPUSH
7718: LD_STRING D11b-RSol1-1
7720: PPUSH
7721: CALL_OW 88
7725: GO 7750
// if IsOk ( Balei ) then
7727: LD_EXP 26
7731: PPUSH
7732: CALL_OW 302
7736: IFFALSE 7750
// Say ( Balei , D11b-RSol1-1 ) ;
7738: LD_EXP 26
7742: PPUSH
7743: LD_STRING D11b-RSol1-1
7745: PPUSH
7746: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , Kirilenkova , 12 ] ] ) then
7750: LD_INT 22
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: PUSH
7760: LD_INT 25
7762: PUSH
7763: LD_INT 12
7765: PUSH
7766: EMPTY
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 91
7772: PUSH
7773: LD_EXP 31
7777: PUSH
7778: LD_INT 12
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: LIST
7785: PUSH
7786: EMPTY
7787: LIST
7788: LIST
7789: LIST
7790: PPUSH
7791: CALL_OW 69
7795: IFFALSE 7873
// begin SayRadioNoFace ( Kirilenkova , D11b1-Kir-1 ) ;
7797: LD_EXP 31
7801: PPUSH
7802: LD_STRING D11b1-Kir-1
7804: PPUSH
7805: CALL_OW 586
// if attackedByApe then
7809: LD_EXP 7
7813: IFFALSE 7841
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7815: LD_EXP 22
7819: PPUSH
7820: LD_STRING D11b1-Bur-1
7822: PPUSH
7823: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7827: LD_EXP 27
7831: PPUSH
7832: LD_STRING D11b2-Bel-1
7834: PPUSH
7835: CALL_OW 88
// end else
7839: GO 7871
// if waterfallSpotted then
7841: LD_EXP 8
7845: IFFALSE 7871
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7847: LD_EXP 22
7851: PPUSH
7852: LD_STRING D11b1-Bur-1a
7854: PPUSH
7855: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7859: LD_EXP 27
7863: PPUSH
7864: LD_STRING D11b2-Bel-1
7866: PPUSH
7867: CALL_OW 88
// end ; end else
7871: GO 7915
// begin SayRadioNoFace ( Kirilenkova , D11b2-Kir-1 ) ;
7873: LD_EXP 31
7877: PPUSH
7878: LD_STRING D11b2-Kir-1
7880: PPUSH
7881: CALL_OW 586
// if waterfallSpotted then
7885: LD_EXP 8
7889: IFFALSE 7915
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7891: LD_EXP 22
7895: PPUSH
7896: LD_STRING D11b1-Bur-1a
7898: PPUSH
7899: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7903: LD_EXP 27
7907: PPUSH
7908: LD_STRING D11b2-Bel-1
7910: PPUSH
7911: CALL_OW 88
// end ; end ; if not waterfallSpotted and not attackedByApe then
7915: LD_EXP 8
7919: NOT
7920: IFFALSE 7929
7922: PUSH
7923: LD_EXP 7
7927: NOT
7928: AND
7929: IFFALSE 8029
// begin if IsOk ( Belkov ) then
7931: LD_EXP 27
7935: PPUSH
7936: CALL_OW 302
7940: IFFALSE 7956
// Say ( Belkov , D11b1-Bel-1 ) else
7942: LD_EXP 27
7946: PPUSH
7947: LD_STRING D11b1-Bel-1
7949: PPUSH
7950: CALL_OW 88
7954: GO 8029
// if IsOk ( Saseda ) then
7956: LD_EXP 24
7960: PPUSH
7961: CALL_OW 302
7965: IFFALSE 7981
// Say ( Saseda , D11b1-RSol1-1 ) else
7967: LD_EXP 24
7971: PPUSH
7972: LD_STRING D11b1-RSol1-1
7974: PPUSH
7975: CALL_OW 88
7979: GO 8029
// if IsOk ( Jaworska ) then
7981: LD_EXP 25
7985: PPUSH
7986: CALL_OW 302
7990: IFFALSE 8006
// Say ( Jaworska , D11b1-RFSol1-1 ) else
7992: LD_EXP 25
7996: PPUSH
7997: LD_STRING D11b1-RFSol1-1
7999: PPUSH
8000: CALL_OW 88
8004: GO 8029
// if IsOk ( Balei ) then
8006: LD_EXP 26
8010: PPUSH
8011: CALL_OW 302
8015: IFFALSE 8029
// Say ( Balei , D11b1-RSol1-1 ) ;
8017: LD_EXP 26
8021: PPUSH
8022: LD_STRING D11b1-RSol1-1
8024: PPUSH
8025: CALL_OW 88
// end ; DialogueOff ;
8029: CALL_OW 7
// InGameOff ;
8033: CALL_OW 9
// wait ( 1 1$00 - ( 0 0$10 * Difficulty ) ) ;
8037: LD_INT 2100
8039: PUSH
8040: LD_INT 350
8042: PUSH
8043: LD_OWVAR 67
8047: MUL
8048: MINUS
8049: PPUSH
8050: CALL_OW 67
// ComMoveXY ( Kirilenkova , 75 , 95 ) ;
8054: LD_EXP 31
8058: PPUSH
8059: LD_INT 75
8061: PPUSH
8062: LD_INT 95
8064: PPUSH
8065: CALL_OW 111
// end else
8069: GO 8307
// begin DialogueOn ;
8071: CALL_OW 6
// SetSide ( Kirilenkova , 3 ) ;
8075: LD_EXP 31
8079: PPUSH
8080: LD_INT 3
8082: PPUSH
8083: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8087: LD_EXP 31
8091: PPUSH
8092: CALL_OW 87
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8096: LD_EXP 31
8100: PPUSH
8101: LD_STRING D11a-Kir-1
8103: PPUSH
8104: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
8108: LD_EXP 31
8112: PPUSH
8113: LD_EXP 27
8117: PPUSH
8118: CALL_OW 296
8122: PUSH
8123: LD_INT 8
8125: LESS
8126: IFFALSE 8140
// Say ( Belkov , D11a-Bel-1 ) ;
8128: LD_EXP 27
8132: PPUSH
8133: LD_STRING D11a-Bel-1
8135: PPUSH
8136: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8140: LD_EXP 31
8144: PPUSH
8145: LD_STRING D11a-Kir-2
8147: PPUSH
8148: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
8152: LD_EXP 31
8156: PPUSH
8157: LD_EXP 27
8161: PPUSH
8162: CALL_OW 296
8166: PUSH
8167: LD_INT 8
8169: LESS
8170: IFFALSE 8186
// Say ( Belkov , D11a-Bel-2 ) else
8172: LD_EXP 27
8176: PPUSH
8177: LD_STRING D11a-Bel-2
8179: PPUSH
8180: CALL_OW 88
8184: GO 8286
// if GetDistUnits ( Kirilenkova , Saseda ) < 8 then
8186: LD_EXP 31
8190: PPUSH
8191: LD_EXP 24
8195: PPUSH
8196: CALL_OW 296
8200: PUSH
8201: LD_INT 8
8203: LESS
8204: IFFALSE 8220
// Say ( Saseda , D11a-RSol1-2 ) else
8206: LD_EXP 24
8210: PPUSH
8211: LD_STRING D11a-RSol1-2
8213: PPUSH
8214: CALL_OW 88
8218: GO 8286
// if GetDistUnits ( Kirilenkova , Jaworska ) < 8 then
8220: LD_EXP 31
8224: PPUSH
8225: LD_EXP 25
8229: PPUSH
8230: CALL_OW 296
8234: PUSH
8235: LD_INT 8
8237: LESS
8238: IFFALSE 8254
// Say ( Jaworska , D11a-RFSol1-2 ) else
8240: LD_EXP 25
8244: PPUSH
8245: LD_STRING D11a-RFSol1-2
8247: PPUSH
8248: CALL_OW 88
8252: GO 8286
// if GetDistUnits ( Kirilenkova , Balei ) < 8 then
8254: LD_EXP 31
8258: PPUSH
8259: LD_EXP 26
8263: PPUSH
8264: CALL_OW 296
8268: PUSH
8269: LD_INT 8
8271: LESS
8272: IFFALSE 8286
// Say ( Balei , D11a-RSol1-2 ) ;
8274: LD_EXP 26
8278: PPUSH
8279: LD_STRING D11a-RSol1-2
8281: PPUSH
8282: CALL_OW 88
// DialogueOff ;
8286: CALL_OW 7
// SetAchievement ( ACH_YELENA ) ;
8290: LD_STRING ACH_YELENA
8292: PPUSH
8293: CALL_OW 543
// hasKirilenkova := true ;
8297: LD_ADDR_EXP 5
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// exit ;
8305: GO 8610
// end ; p := 0 ;
8307: LD_ADDR_VAR 0 3
8311: PUSH
8312: LD_INT 0
8314: ST_TO_ADDR
// if Difficulty > 2 then
8315: LD_OWVAR 67
8319: PUSH
8320: LD_INT 2
8322: GREATER
8323: IFFALSE 8403
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
8325: LD_INT 5
8327: NEG
8328: PUSH
8329: LD_INT 8
8331: NEG
8332: PUSH
8333: LD_INT 10
8335: NEG
8336: PUSH
8337: LD_INT 12
8339: NEG
8340: PUSH
8341: EMPTY
8342: LIST
8343: LIST
8344: LIST
8345: LIST
8346: PUSH
8347: LD_OWVAR 67
8351: ARRAY
8352: PPUSH
8353: CALL 44631 0 1
// ape := CreateHuman ;
8357: LD_ADDR_VAR 0 2
8361: PUSH
8362: CALL_OW 44
8366: ST_TO_ADDR
// PlaceUnitXYR ( ape , 65 , 89 , 2 , false ) ;
8367: LD_VAR 0 2
8371: PPUSH
8372: LD_INT 65
8374: PPUSH
8375: LD_INT 89
8377: PPUSH
8378: LD_INT 2
8380: PPUSH
8381: LD_INT 0
8383: PPUSH
8384: CALL_OW 50
// ComMoveXY ( ape , 74 , 94 ) ;
8388: LD_VAR 0 2
8392: PPUSH
8393: LD_INT 74
8395: PPUSH
8396: LD_INT 94
8398: PPUSH
8399: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
8403: LD_INT 35
8405: PPUSH
8406: CALL_OW 67
// p := Inc ( p ) ;
8410: LD_ADDR_VAR 0 3
8414: PUSH
8415: LD_VAR 0 3
8419: PPUSH
8420: CALL 49877 0 1
8424: ST_TO_ADDR
// if p > 120 and IsOk ( ape ) and not HasTask ( ape ) then
8425: LD_VAR 0 3
8429: PUSH
8430: LD_INT 120
8432: GREATER
8433: IFFALSE 8446
8435: PUSH
8436: LD_VAR 0 2
8440: PPUSH
8441: CALL_OW 302
8445: AND
8446: IFFALSE 8460
8448: PUSH
8449: LD_VAR 0 2
8453: PPUSH
8454: CALL_OW 314
8458: NOT
8459: AND
8460: IFFALSE 8476
// ComAttackUnit ( ape , Kirilenkova ) ;
8462: LD_VAR 0 2
8466: PPUSH
8467: LD_EXP 31
8471: PPUSH
8472: CALL_OW 115
// until See ( 3 , Kirilenkova ) and IsOk ( Kirilenkova ) ;
8476: LD_INT 3
8478: PPUSH
8479: LD_EXP 31
8483: PPUSH
8484: CALL_OW 292
8488: IFFALSE 8501
8490: PUSH
8491: LD_EXP 31
8495: PPUSH
8496: CALL_OW 302
8500: AND
8501: IFFALSE 8403
// if p < 15 then
8503: LD_VAR 0 3
8507: PUSH
8508: LD_INT 15
8510: LESS
8511: IFFALSE 8520
// SetAchievement ( ACH_YELENA ) ;
8513: LD_STRING ACH_YELENA
8515: PPUSH
8516: CALL_OW 543
// ComTurnUnit ( Kirilenkova , Burlak ) ;
8520: LD_EXP 31
8524: PPUSH
8525: LD_EXP 22
8529: PPUSH
8530: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8534: LD_INT 10
8536: PPUSH
8537: CALL_OW 67
// DialogueOn ;
8541: CALL_OW 6
// InGameOn ;
8545: CALL_OW 8
// SetSide ( Kirilenkova , 3 ) ;
8549: LD_EXP 31
8553: PPUSH
8554: LD_INT 3
8556: PPUSH
8557: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8561: LD_EXP 31
8565: PPUSH
8566: CALL_OW 87
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8570: LD_EXP 31
8574: PPUSH
8575: LD_STRING D11c-Kir-1
8577: PPUSH
8578: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8582: LD_EXP 22
8586: PPUSH
8587: LD_STRING D11c-Bur-1
8589: PPUSH
8590: CALL_OW 88
// DialogueOff ;
8594: CALL_OW 7
// InGameOff ;
8598: CALL_OW 9
// hasKirilenkova := true ;
8602: LD_ADDR_EXP 5
8606: PUSH
8607: LD_INT 1
8609: ST_TO_ADDR
// end ;
8610: PPOPN 3
8612: END
// every 0 0$1 trigger joinedToBelkov and not UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_alive ] ) do
8613: LD_EXP 3
8617: IFFALSE 8664
8619: PUSH
8620: LD_EXP 24
8624: PUSH
8625: LD_EXP 25
8629: PUSH
8630: LD_EXP 26
8634: PUSH
8635: LD_EXP 27
8639: PUSH
8640: LD_EXP 28
8644: PUSH
8645: EMPTY
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: PPUSH
8652: LD_INT 51
8654: PUSH
8655: EMPTY
8656: LIST
8657: PPUSH
8658: CALL_OW 72
8662: NOT
8663: AND
8664: IFFALSE 8676
8666: GO 8668
8668: DISABLE
// begin YouLost ( Comrades ) ;
8669: LD_STRING Comrades
8671: PPUSH
8672: CALL_OW 104
// end ;
8676: END
// every 0 0$1 trigger canEnd and IsInArea ( Burlak , exitArea ) do
8677: LD_EXP 19
8681: IFFALSE 8697
8683: PUSH
8684: LD_EXP 22
8688: PPUSH
8689: LD_INT 16
8691: PPUSH
8692: CALL_OW 308
8696: AND
8697: IFFALSE 9086
8699: GO 8701
8701: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8702: LD_INT 22
8704: PUSH
8705: LD_INT 3
8707: PUSH
8708: EMPTY
8709: LIST
8710: LIST
8711: PUSH
8712: LD_INT 21
8714: PUSH
8715: LD_INT 1
8717: PUSH
8718: EMPTY
8719: LIST
8720: LIST
8721: PUSH
8722: LD_INT 50
8724: PUSH
8725: EMPTY
8726: LIST
8727: PUSH
8728: LD_INT 3
8730: PUSH
8731: LD_INT 95
8733: PUSH
8734: LD_INT 16
8736: PUSH
8737: EMPTY
8738: LIST
8739: LIST
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: EMPTY
8746: LIST
8747: LIST
8748: LIST
8749: LIST
8750: PPUSH
8751: CALL_OW 69
8755: IFFALSE 8764
// Query ( QExit1 ) ;
8757: LD_STRING QExit1
8759: PPUSH
8760: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
8764: LD_INT 35
8766: PPUSH
8767: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) ;
8771: LD_INT 22
8773: PUSH
8774: LD_INT 3
8776: PUSH
8777: EMPTY
8778: LIST
8779: LIST
8780: PUSH
8781: LD_INT 21
8783: PUSH
8784: LD_INT 1
8786: PUSH
8787: EMPTY
8788: LIST
8789: LIST
8790: PUSH
8791: LD_INT 50
8793: PUSH
8794: EMPTY
8795: LIST
8796: PUSH
8797: LD_INT 3
8799: PUSH
8800: LD_INT 95
8802: PUSH
8803: LD_INT 16
8805: PUSH
8806: EMPTY
8807: LIST
8808: LIST
8809: PUSH
8810: EMPTY
8811: LIST
8812: LIST
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PPUSH
8820: CALL_OW 69
8824: NOT
8825: IFFALSE 8764
// if NearestUnitToXY ( [ Belkov , Saseda ] , 157 , 118 ) = Belkov and IsOk ( Belkov ) then
8827: LD_EXP 27
8831: PUSH
8832: LD_EXP 24
8836: PUSH
8837: EMPTY
8838: LIST
8839: LIST
8840: PPUSH
8841: LD_INT 157
8843: PPUSH
8844: LD_INT 118
8846: PPUSH
8847: CALL_OW 73
8851: PUSH
8852: LD_EXP 27
8856: EQUAL
8857: IFFALSE 8870
8859: PUSH
8860: LD_EXP 27
8864: PPUSH
8865: CALL_OW 302
8869: AND
8870: IFFALSE 8886
// Say ( Belkov , D12-Bel-1 ) else
8872: LD_EXP 27
8876: PPUSH
8877: LD_STRING D12-Bel-1
8879: PPUSH
8880: CALL_OW 88
8884: GO 8934
// if IsOk ( Saseda ) then
8886: LD_EXP 24
8890: PPUSH
8891: CALL_OW 302
8895: IFFALSE 8911
// Say ( Saseda , D12-RSol1-1 ) else
8897: LD_EXP 24
8901: PPUSH
8902: LD_STRING D12-RSol1-1
8904: PPUSH
8905: CALL_OW 88
8909: GO 8934
// if IsOk ( Balei ) then
8911: LD_EXP 26
8915: PPUSH
8916: CALL_OW 302
8920: IFFALSE 8934
// Say ( Balei , D12-RSol1-1 ) ;
8922: LD_EXP 26
8926: PPUSH
8927: LD_STRING D12-RSol1-1
8929: PPUSH
8930: CALL_OW 88
// if apeRadioKilled and not hasGnyevko then
8934: LD_EXP 9
8938: IFFALSE 8947
8940: PUSH
8941: LD_EXP 4
8945: NOT
8946: AND
8947: IFFALSE 9082
// begin DialogueOn ;
8949: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
8953: LD_EXP 22
8957: PPUSH
8958: LD_STRING D12-Bur-1
8960: PPUSH
8961: CALL_OW 88
// Say ( Belkov , D12-Bel-2 ) ;
8965: LD_EXP 27
8969: PPUSH
8970: LD_STRING D12-Bel-2
8972: PPUSH
8973: CALL_OW 88
// DialogueOff ;
8977: CALL_OW 7
// if Query ( QExit2 ) = 1 then
8981: LD_STRING QExit2
8983: PPUSH
8984: CALL_OW 97
8988: PUSH
8989: LD_INT 1
8991: EQUAL
8992: IFFALSE 9000
// begin FinishMission ;
8994: CALL 9087 0 0
// exit ;
8998: GO 9086
// end ; repeat wait ( 0 0$3 ) ;
9000: LD_INT 105
9002: PPUSH
9003: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
9007: LD_INT 22
9009: PUSH
9010: LD_INT 3
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: PUSH
9017: LD_INT 21
9019: PUSH
9020: LD_INT 1
9022: PUSH
9023: EMPTY
9024: LIST
9025: LIST
9026: PUSH
9027: LD_INT 50
9029: PUSH
9030: EMPTY
9031: LIST
9032: PUSH
9033: LD_INT 3
9035: PUSH
9036: LD_INT 95
9038: PUSH
9039: LD_INT 16
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PUSH
9050: EMPTY
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: PPUSH
9056: CALL_OW 69
9060: NOT
9061: IFFALSE 9078
// if Query ( QExit2 ) = 1 then
9063: LD_STRING QExit2
9065: PPUSH
9066: CALL_OW 97
9070: PUSH
9071: LD_INT 1
9073: EQUAL
9074: IFFALSE 9078
// break ;
9076: GO 9082
// until false ;
9078: LD_INT 0
9080: IFFALSE 9000
// end ; FinishMission ;
9082: CALL 9087 0 0
// end ;
9086: END
// function FinishMission ; begin
9087: LD_INT 0
9089: PPUSH
// if tick <= 4 4$00 then
9090: LD_OWVAR 1
9094: PUSH
9095: LD_INT 8400
9097: LESSEQUAL
9098: IFFALSE 9107
// SetAchievement ( ACH_RSPEED_1 ) ;
9100: LD_STRING ACH_RSPEED_1
9102: PPUSH
9103: CALL_OW 543
// if not someoneGetsHurt then
9107: LD_EXP 21
9111: NOT
9112: IFFALSE 9121
// SetAchievement ( ACH_BANDAGE ) ;
9114: LD_STRING ACH_BANDAGE
9116: PPUSH
9117: CALL_OW 543
// if gladstoneEscaped and ( hollandEscaped or MelEscaped ) then
9121: LD_EXP 16
9125: IFFALSE 9141
9127: PUSH
9128: LD_EXP 17
9132: IFTRUE 9140
9134: PUSH
9135: LD_EXP 18
9139: OR
9140: AND
9141: IFFALSE 9156
// AddMedal ( NoEscape , - 3 ) else
9143: LD_STRING NoEscape
9145: PPUSH
9146: LD_INT 3
9148: NEG
9149: PPUSH
9150: CALL_OW 101
9154: GO 9212
// if gladstoneEscaped then
9156: LD_EXP 16
9160: IFFALSE 9175
// AddMedal ( NoEscape , - 1 ) else
9162: LD_STRING NoEscape
9164: PPUSH
9165: LD_INT 1
9167: NEG
9168: PPUSH
9169: CALL_OW 101
9173: GO 9212
// if hollandEscaped or MelEscaped then
9175: LD_EXP 17
9179: IFTRUE 9187
9181: PUSH
9182: LD_EXP 18
9186: OR
9187: IFFALSE 9202
// AddMedal ( NoEscape , - 2 ) else
9189: LD_STRING NoEscape
9191: PPUSH
9192: LD_INT 2
9194: NEG
9195: PPUSH
9196: CALL_OW 101
9200: GO 9212
// AddMedal ( NoEscape , 1 ) ;
9202: LD_STRING NoEscape
9204: PPUSH
9205: LD_INT 1
9207: PPUSH
9208: CALL_OW 101
// if hasGnyevko and IsOk ( Gnyevko ) and hasKirilenkova and IsOk ( Kirilenkova ) then
9212: LD_EXP 4
9216: IFFALSE 9229
9218: PUSH
9219: LD_EXP 30
9223: PPUSH
9224: CALL_OW 302
9228: AND
9229: IFFALSE 9237
9231: PUSH
9232: LD_EXP 5
9236: AND
9237: IFFALSE 9250
9239: PUSH
9240: LD_EXP 31
9244: PPUSH
9245: CALL_OW 302
9249: AND
9250: IFFALSE 9264
// AddMedal ( Gnyevko , 1 ) else
9252: LD_STRING Gnyevko
9254: PPUSH
9255: LD_INT 1
9257: PPUSH
9258: CALL_OW 101
9262: GO 9369
// if not IsOk ( Gnyevko ) and not IsOk ( Kirilenkova ) then
9264: LD_EXP 30
9268: PPUSH
9269: CALL_OW 302
9273: NOT
9274: IFFALSE 9288
9276: PUSH
9277: LD_EXP 31
9281: PPUSH
9282: CALL_OW 302
9286: NOT
9287: AND
9288: IFFALSE 9303
// AddMedal ( Gnyevko , - 3 ) else
9290: LD_STRING Gnyevko
9292: PPUSH
9293: LD_INT 3
9295: NEG
9296: PPUSH
9297: CALL_OW 101
9301: GO 9369
// if not hasGnyevko then
9303: LD_EXP 4
9307: NOT
9308: IFFALSE 9323
// AddMedal ( Gnyevko , - 1 ) else
9310: LD_STRING Gnyevko
9312: PPUSH
9313: LD_INT 1
9315: NEG
9316: PPUSH
9317: CALL_OW 101
9321: GO 9369
// if not IsOk ( Gnyevko ) or not IsOk ( Kirilenkova ) or not hasKirilenkova then
9323: LD_EXP 30
9327: PPUSH
9328: CALL_OW 302
9332: NOT
9333: IFTRUE 9347
9335: PUSH
9336: LD_EXP 31
9340: PPUSH
9341: CALL_OW 302
9345: NOT
9346: OR
9347: IFTRUE 9356
9349: PUSH
9350: LD_EXP 5
9354: NOT
9355: OR
9356: IFFALSE 9369
// AddMedal ( Gnyevko , - 2 ) ;
9358: LD_STRING Gnyevko
9360: PPUSH
9361: LD_INT 2
9363: NEG
9364: PPUSH
9365: CALL_OW 101
// if loseCounter then
9369: LD_EXP 20
9373: IFFALSE 9388
// AddMedal ( NoLosses , - 1 ) else
9375: LD_STRING NoLosses
9377: PPUSH
9378: LD_INT 1
9380: NEG
9381: PPUSH
9382: CALL_OW 101
9386: GO 9398
// AddMedal ( NoLosses , 1 ) ;
9388: LD_STRING NoLosses
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: CALL_OW 101
// GiveMedals ( MAIN ) ;
9398: LD_STRING MAIN
9400: PPUSH
9401: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) ;
9405: LD_INT 22
9407: PUSH
9408: LD_INT 3
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PUSH
9415: LD_INT 21
9417: PUSH
9418: LD_INT 1
9420: PUSH
9421: EMPTY
9422: LIST
9423: LIST
9424: PUSH
9425: LD_INT 50
9427: PUSH
9428: EMPTY
9429: LIST
9430: PUSH
9431: LD_INT 23
9433: PUSH
9434: LD_INT 3
9436: PUSH
9437: EMPTY
9438: LIST
9439: LIST
9440: PUSH
9441: EMPTY
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: PPUSH
9447: CALL_OW 69
9451: PPUSH
9452: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
9456: LD_EXP 22
9460: PPUSH
9461: LD_EXP 2
9465: PUSH
9466: LD_STRING Burlak
9468: STR
9469: PPUSH
9470: CALL_OW 38
// if IsOk ( Gnyevko ) and hasGnyevko then
9474: LD_EXP 30
9478: PPUSH
9479: CALL_OW 302
9483: IFFALSE 9491
9485: PUSH
9486: LD_EXP 4
9490: AND
9491: IFFALSE 9511
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
9493: LD_EXP 30
9497: PPUSH
9498: LD_EXP 2
9502: PUSH
9503: LD_STRING Gnyevko
9505: STR
9506: PPUSH
9507: CALL_OW 38
// if IsOk ( Belkov ) then
9511: LD_EXP 27
9515: PPUSH
9516: CALL_OW 302
9520: IFFALSE 9540
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
9522: LD_EXP 27
9526: PPUSH
9527: LD_EXP 2
9531: PUSH
9532: LD_STRING Belkov
9534: STR
9535: PPUSH
9536: CALL_OW 38
// if IsOk ( Kirilenkova ) and hasKirilenkova then
9540: LD_EXP 31
9544: PPUSH
9545: CALL_OW 302
9549: IFFALSE 9557
9551: PUSH
9552: LD_EXP 5
9556: AND
9557: IFFALSE 9577
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
9559: LD_EXP 31
9563: PPUSH
9564: LD_EXP 2
9568: PUSH
9569: LD_STRING Kirilenkova
9571: STR
9572: PPUSH
9573: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] , 01_belkovTeam ) ;
9577: LD_INT 22
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: PUSH
9587: LD_INT 50
9589: PUSH
9590: EMPTY
9591: LIST
9592: PUSH
9593: LD_INT 21
9595: PUSH
9596: LD_INT 1
9598: PUSH
9599: EMPTY
9600: LIST
9601: LIST
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: LIST
9607: PPUSH
9608: CALL_OW 69
9612: PUSH
9613: LD_EXP 22
9617: PUSH
9618: LD_EXP 30
9622: PUSH
9623: LD_EXP 27
9627: PUSH
9628: LD_EXP 31
9632: PUSH
9633: EMPTY
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: DIFF
9639: PPUSH
9640: LD_STRING 01_belkovTeam
9642: PPUSH
9643: CALL_OW 38
// YouWin ;
9647: CALL_OW 103
// end ; end_of_file
9651: LD_VAR 0 1
9655: RET
// export function SendApemanAttack ; var ape ; begin
9656: LD_INT 0
9658: PPUSH
9659: PPUSH
// PrepareApeman ( 0 ) ;
9660: LD_INT 0
9662: PPUSH
9663: CALL 44631 0 1
// ape := CreateHuman ;
9667: LD_ADDR_VAR 0 2
9671: PUSH
9672: CALL_OW 44
9676: ST_TO_ADDR
// PlaceUnitXY ( ape , 65 , 89 , false ) ;
9677: LD_VAR 0 2
9681: PPUSH
9682: LD_INT 65
9684: PPUSH
9685: LD_INT 89
9687: PPUSH
9688: LD_INT 0
9690: PPUSH
9691: CALL_OW 48
// ComMoveUnit ( ape , Burlak ) ;
9695: LD_VAR 0 2
9699: PPUSH
9700: LD_EXP 22
9704: PPUSH
9705: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9709: LD_INT 35
9711: PPUSH
9712: CALL_OW 67
// if joinedToBelkov then
9716: LD_EXP 3
9720: IFFALSE 9739
// begin ComMoveXY ( ape , 66 , 90 ) ;
9722: LD_VAR 0 2
9726: PPUSH
9727: LD_INT 66
9729: PPUSH
9730: LD_INT 90
9732: PPUSH
9733: CALL_OW 111
// exit ;
9737: GO 9926
// end ; until GetDistUnits ( ape , Burlak ) < 5 ;
9739: LD_VAR 0 2
9743: PPUSH
9744: LD_EXP 22
9748: PPUSH
9749: CALL_OW 296
9753: PUSH
9754: LD_INT 5
9756: LESS
9757: IFFALSE 9709
// wait ( 0 0$0.3 ) ;
9759: LD_INT 10
9761: PPUSH
9762: CALL_OW 67
// ComTurnUnit ( ape , Burlak ) ;
9766: LD_VAR 0 2
9770: PPUSH
9771: LD_EXP 22
9775: PPUSH
9776: CALL_OW 119
// if HasTask ( Burlak ) then
9780: LD_EXP 22
9784: PPUSH
9785: CALL_OW 314
9789: IFFALSE 9800
// wait ( 0 0$3 ) else
9791: LD_INT 105
9793: PPUSH
9794: CALL_OW 67
9798: GO 9807
// wait ( 0 0$10 ) ;
9800: LD_INT 350
9802: PPUSH
9803: CALL_OW 67
// if See ( 6 , ape ) or joinedToBelkov then
9807: LD_INT 6
9809: PPUSH
9810: LD_VAR 0 2
9814: PPUSH
9815: CALL_OW 292
9819: IFTRUE 9827
9821: PUSH
9822: LD_EXP 3
9826: OR
9827: IFFALSE 9846
// begin ComMoveXY ( ape , 66 , 90 ) ;
9829: LD_VAR 0 2
9833: PPUSH
9834: LD_INT 66
9836: PPUSH
9837: LD_INT 90
9839: PPUSH
9840: CALL_OW 111
// exit ;
9844: GO 9926
// end ; ComAttackUnit ( ape , Burlak ) ;
9846: LD_VAR 0 2
9850: PPUSH
9851: LD_EXP 22
9855: PPUSH
9856: CALL_OW 115
// repeat wait ( 1 ) ;
9860: LD_INT 1
9862: PPUSH
9863: CALL_OW 67
// until GetLives ( ape ) < 980 and UnitShoot ( ape ) = Burlak and UnitInBattle ( ape ) ;
9867: LD_VAR 0 2
9871: PPUSH
9872: CALL_OW 256
9876: PUSH
9877: LD_INT 980
9879: LESS
9880: IFFALSE 9899
9882: PUSH
9883: LD_VAR 0 2
9887: PPUSH
9888: CALL_OW 504
9892: PUSH
9893: LD_EXP 22
9897: EQUAL
9898: AND
9899: IFFALSE 9912
9901: PUSH
9902: LD_VAR 0 2
9906: PPUSH
9907: CALL_OW 583
9911: AND
9912: IFFALSE 9860
// SetLives ( ape , 200 ) ;
9914: LD_VAR 0 2
9918: PPUSH
9919: LD_INT 200
9921: PPUSH
9922: CALL_OW 234
// end ;
9926: LD_VAR 0 1
9930: RET
// export function CreateNature ; var i , ape , r ; begin
9931: LD_INT 0
9933: PPUSH
9934: PPUSH
9935: PPUSH
9936: PPUSH
// PrepareNature ( 5 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 5 , 1 , 0 , 3 , natureArea , waterArea ) ;
9937: LD_INT 5
9939: PPUSH
9940: LD_INT 3
9942: PUSH
9943: LD_INT 4
9945: PUSH
9946: LD_INT 5
9948: PUSH
9949: LD_INT 6
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: LD_OWVAR 67
9962: ARRAY
9963: PPUSH
9964: LD_INT 0
9966: PPUSH
9967: LD_INT 5
9969: PPUSH
9970: LD_INT 1
9972: PPUSH
9973: LD_INT 0
9975: PPUSH
9976: LD_INT 3
9978: PPUSH
9979: LD_INT 7
9981: PPUSH
9982: LD_INT 8
9984: PPUSH
9985: CALL 45155 0 9
// r := 2 ;
9989: LD_ADDR_VAR 0 4
9993: PUSH
9994: LD_INT 2
9996: ST_TO_ADDR
// for i := 1 to 3 do
9997: LD_ADDR_VAR 0 2
10001: PUSH
10002: DOUBLE
10003: LD_INT 1
10005: DEC
10006: ST_TO_ADDR
10007: LD_INT 3
10009: PUSH
10010: FOR_TO
10011: IFFALSE 10102
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
10013: LD_INT 5
10015: NEG
10016: PUSH
10017: LD_INT 8
10019: NEG
10020: PUSH
10021: LD_INT 10
10023: NEG
10024: PUSH
10025: LD_INT 12
10027: NEG
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: PUSH
10035: LD_OWVAR 67
10039: ARRAY
10040: PPUSH
10041: CALL 44631 0 1
// ape := CreateHuman ;
10045: LD_ADDR_VAR 0 3
10049: PUSH
10050: CALL_OW 44
10054: ST_TO_ADDR
// if i = r then
10055: LD_VAR 0 2
10059: PUSH
10060: LD_VAR 0 4
10064: EQUAL
10065: IFFALSE 10079
// SetTag ( i , tApeRadio ) ;
10067: LD_VAR 0 2
10071: PPUSH
10072: LD_INT 1
10074: PPUSH
10075: CALL_OW 109
// PlaceUnitXYR ( ape , 66 , 92 , 3 , false ) ;
10079: LD_VAR 0 3
10083: PPUSH
10084: LD_INT 66
10086: PPUSH
10087: LD_INT 92
10089: PPUSH
10090: LD_INT 3
10092: PPUSH
10093: LD_INT 0
10095: PPUSH
10096: CALL_OW 50
// end ;
10100: GO 10010
10102: POP
10103: POP
// end ;
10104: LD_VAR 0 1
10108: RET
// export function MoveToHill ; begin
10109: LD_INT 0
10111: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10112: LD_EXP 23
10116: PPUSH
10117: LD_INT 65
10119: PPUSH
10120: LD_INT 59
10122: PPUSH
10123: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10127: LD_EXP 23
10131: PPUSH
10132: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10136: LD_EXP 24
10140: PPUSH
10141: LD_INT 65
10143: PPUSH
10144: LD_INT 58
10146: PPUSH
10147: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10151: LD_EXP 24
10155: PPUSH
10156: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10160: LD_EXP 25
10164: PPUSH
10165: LD_INT 64
10167: PPUSH
10168: LD_INT 57
10170: PPUSH
10171: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10175: LD_EXP 25
10179: PPUSH
10180: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10184: LD_EXP 26
10188: PPUSH
10189: LD_INT 64
10191: PPUSH
10192: LD_INT 56
10194: PPUSH
10195: CALL_OW 111
// AddComCrawl ( Balei ) ;
10199: LD_EXP 26
10203: PPUSH
10204: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10208: LD_EXP 27
10212: PPUSH
10213: LD_INT 63
10215: PPUSH
10216: LD_INT 55
10218: PPUSH
10219: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10223: LD_EXP 27
10227: PPUSH
10228: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10232: LD_EXP 28
10236: PPUSH
10237: LD_INT 66
10239: PPUSH
10240: LD_INT 58
10242: PPUSH
10243: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10247: LD_EXP 28
10251: PPUSH
10252: CALL_OW 197
// if hasGnyevko and IsOk ( Gnyevko ) then
10256: LD_EXP 4
10260: IFFALSE 10273
10262: PUSH
10263: LD_EXP 30
10267: PPUSH
10268: CALL_OW 302
10272: AND
10273: IFFALSE 10299
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10275: LD_EXP 30
10279: PPUSH
10280: LD_INT 63
10282: PPUSH
10283: LD_INT 54
10285: PPUSH
10286: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10290: LD_EXP 30
10294: PPUSH
10295: CALL_OW 197
// end ; end ; end_of_file
10299: LD_VAR 0 1
10303: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10304: LD_INT 0
10306: PPUSH
10307: PPUSH
// if exist_mode then
10308: LD_VAR 0 2
10312: IFFALSE 10358
// begin unit := CreateCharacter ( prefix & ident ) ;
10314: LD_ADDR_VAR 0 5
10318: PUSH
10319: LD_VAR 0 3
10323: PUSH
10324: LD_VAR 0 1
10328: STR
10329: PPUSH
10330: CALL_OW 34
10334: ST_TO_ADDR
// if unit then
10335: LD_VAR 0 5
10339: IFFALSE 10356
// DeleteCharacters ( prefix & ident ) ;
10341: LD_VAR 0 3
10345: PUSH
10346: LD_VAR 0 1
10350: STR
10351: PPUSH
10352: CALL_OW 40
// end else
10356: GO 10373
// unit := NewCharacter ( ident ) ;
10358: LD_ADDR_VAR 0 5
10362: PUSH
10363: LD_VAR 0 1
10367: PPUSH
10368: CALL_OW 25
10372: ST_TO_ADDR
// result := unit ;
10373: LD_ADDR_VAR 0 4
10377: PUSH
10378: LD_VAR 0 5
10382: ST_TO_ADDR
// end ;
10383: LD_VAR 0 4
10387: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10388: LD_INT 0
10390: PPUSH
10391: PPUSH
// if exist_mode then
10392: LD_VAR 0 2
10396: IFFALSE 10421
// unit := CreateCharacter ( prefix & ident ) else
10398: LD_ADDR_VAR 0 5
10402: PUSH
10403: LD_VAR 0 3
10407: PUSH
10408: LD_VAR 0 1
10412: STR
10413: PPUSH
10414: CALL_OW 34
10418: ST_TO_ADDR
10419: GO 10436
// unit := NewCharacter ( ident ) ;
10421: LD_ADDR_VAR 0 5
10425: PUSH
10426: LD_VAR 0 1
10430: PPUSH
10431: CALL_OW 25
10435: ST_TO_ADDR
// result := unit ;
10436: LD_ADDR_VAR 0 4
10440: PUSH
10441: LD_VAR 0 5
10445: ST_TO_ADDR
// end ;
10446: LD_VAR 0 4
10450: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10451: LD_INT 0
10453: PPUSH
10454: PPUSH
// if not side or not nation then
10455: LD_VAR 0 1
10459: NOT
10460: IFTRUE 10469
10462: PUSH
10463: LD_VAR 0 2
10467: NOT
10468: OR
10469: IFFALSE 10473
// exit ;
10471: GO 11267
// case nation of nation_american :
10473: LD_VAR 0 2
10477: PUSH
10478: LD_INT 1
10480: DOUBLE
10481: EQUAL
10482: IFTRUE 10486
10484: GO 10708
10486: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10487: LD_ADDR_VAR 0 4
10491: PUSH
10492: LD_INT 35
10494: PUSH
10495: LD_INT 45
10497: PUSH
10498: LD_INT 46
10500: PUSH
10501: LD_INT 47
10503: PUSH
10504: LD_INT 82
10506: PUSH
10507: LD_INT 83
10509: PUSH
10510: LD_INT 84
10512: PUSH
10513: LD_INT 85
10515: PUSH
10516: LD_INT 86
10518: PUSH
10519: LD_INT 1
10521: PUSH
10522: LD_INT 2
10524: PUSH
10525: LD_INT 6
10527: PUSH
10528: LD_INT 15
10530: PUSH
10531: LD_INT 16
10533: PUSH
10534: LD_INT 7
10536: PUSH
10537: LD_INT 12
10539: PUSH
10540: LD_INT 13
10542: PUSH
10543: LD_INT 10
10545: PUSH
10546: LD_INT 14
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: LD_INT 21
10554: PUSH
10555: LD_INT 22
10557: PUSH
10558: LD_INT 25
10560: PUSH
10561: LD_INT 32
10563: PUSH
10564: LD_INT 27
10566: PUSH
10567: LD_INT 36
10569: PUSH
10570: LD_INT 69
10572: PUSH
10573: LD_INT 39
10575: PUSH
10576: LD_INT 34
10578: PUSH
10579: LD_INT 40
10581: PUSH
10582: LD_INT 48
10584: PUSH
10585: LD_INT 49
10587: PUSH
10588: LD_INT 50
10590: PUSH
10591: LD_INT 51
10593: PUSH
10594: LD_INT 52
10596: PUSH
10597: LD_INT 53
10599: PUSH
10600: LD_INT 54
10602: PUSH
10603: LD_INT 55
10605: PUSH
10606: LD_INT 56
10608: PUSH
10609: LD_INT 57
10611: PUSH
10612: LD_INT 58
10614: PUSH
10615: LD_INT 59
10617: PUSH
10618: LD_INT 60
10620: PUSH
10621: LD_INT 61
10623: PUSH
10624: LD_INT 62
10626: PUSH
10627: LD_INT 80
10629: PUSH
10630: LD_INT 82
10632: PUSH
10633: LD_INT 83
10635: PUSH
10636: LD_INT 84
10638: PUSH
10639: LD_INT 85
10641: PUSH
10642: LD_INT 86
10644: PUSH
10645: LD_INT 90
10647: PUSH
10648: LD_INT 93
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: ST_TO_ADDR
10706: GO 11189
10708: LD_INT 2
10710: DOUBLE
10711: EQUAL
10712: IFTRUE 10716
10714: GO 10950
10716: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
10717: LD_ADDR_VAR 0 4
10721: PUSH
10722: LD_INT 35
10724: PUSH
10725: LD_INT 45
10727: PUSH
10728: LD_INT 46
10730: PUSH
10731: LD_INT 47
10733: PUSH
10734: LD_INT 82
10736: PUSH
10737: LD_INT 83
10739: PUSH
10740: LD_INT 84
10742: PUSH
10743: LD_INT 85
10745: PUSH
10746: LD_INT 87
10748: PUSH
10749: LD_INT 70
10751: PUSH
10752: LD_INT 1
10754: PUSH
10755: LD_INT 11
10757: PUSH
10758: LD_INT 3
10760: PUSH
10761: LD_INT 4
10763: PUSH
10764: LD_INT 5
10766: PUSH
10767: LD_INT 6
10769: PUSH
10770: LD_INT 15
10772: PUSH
10773: LD_INT 18
10775: PUSH
10776: LD_INT 7
10778: PUSH
10779: LD_INT 17
10781: PUSH
10782: LD_INT 8
10784: PUSH
10785: LD_INT 20
10787: PUSH
10788: LD_INT 21
10790: PUSH
10791: LD_INT 22
10793: PUSH
10794: LD_INT 72
10796: PUSH
10797: LD_INT 26
10799: PUSH
10800: LD_INT 69
10802: PUSH
10803: LD_INT 39
10805: PUSH
10806: LD_INT 40
10808: PUSH
10809: LD_INT 41
10811: PUSH
10812: LD_INT 42
10814: PUSH
10815: LD_INT 43
10817: PUSH
10818: LD_INT 48
10820: PUSH
10821: LD_INT 49
10823: PUSH
10824: LD_INT 50
10826: PUSH
10827: LD_INT 51
10829: PUSH
10830: LD_INT 52
10832: PUSH
10833: LD_INT 53
10835: PUSH
10836: LD_INT 54
10838: PUSH
10839: LD_INT 55
10841: PUSH
10842: LD_INT 56
10844: PUSH
10845: LD_INT 60
10847: PUSH
10848: LD_INT 61
10850: PUSH
10851: LD_INT 62
10853: PUSH
10854: LD_INT 66
10856: PUSH
10857: LD_INT 67
10859: PUSH
10860: LD_INT 68
10862: PUSH
10863: LD_INT 81
10865: PUSH
10866: LD_INT 82
10868: PUSH
10869: LD_INT 83
10871: PUSH
10872: LD_INT 84
10874: PUSH
10875: LD_INT 85
10877: PUSH
10878: LD_INT 87
10880: PUSH
10881: LD_INT 88
10883: PUSH
10884: LD_INT 92
10886: PUSH
10887: LD_INT 94
10889: PUSH
10890: EMPTY
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: ST_TO_ADDR
10948: GO 11189
10950: LD_INT 3
10952: DOUBLE
10953: EQUAL
10954: IFTRUE 10958
10956: GO 11188
10958: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
10959: LD_ADDR_VAR 0 4
10963: PUSH
10964: LD_INT 46
10966: PUSH
10967: LD_INT 47
10969: PUSH
10970: LD_INT 1
10972: PUSH
10973: LD_INT 2
10975: PUSH
10976: LD_INT 82
10978: PUSH
10979: LD_INT 83
10981: PUSH
10982: LD_INT 84
10984: PUSH
10985: LD_INT 85
10987: PUSH
10988: LD_INT 86
10990: PUSH
10991: LD_INT 11
10993: PUSH
10994: LD_INT 9
10996: PUSH
10997: LD_INT 20
10999: PUSH
11000: LD_INT 19
11002: PUSH
11003: LD_INT 21
11005: PUSH
11006: LD_INT 24
11008: PUSH
11009: LD_INT 22
11011: PUSH
11012: LD_INT 25
11014: PUSH
11015: LD_INT 28
11017: PUSH
11018: LD_INT 29
11020: PUSH
11021: LD_INT 30
11023: PUSH
11024: LD_INT 31
11026: PUSH
11027: LD_INT 37
11029: PUSH
11030: LD_INT 38
11032: PUSH
11033: LD_INT 32
11035: PUSH
11036: LD_INT 27
11038: PUSH
11039: LD_INT 33
11041: PUSH
11042: LD_INT 69
11044: PUSH
11045: LD_INT 39
11047: PUSH
11048: LD_INT 34
11050: PUSH
11051: LD_INT 40
11053: PUSH
11054: LD_INT 71
11056: PUSH
11057: LD_INT 23
11059: PUSH
11060: LD_INT 44
11062: PUSH
11063: LD_INT 48
11065: PUSH
11066: LD_INT 49
11068: PUSH
11069: LD_INT 50
11071: PUSH
11072: LD_INT 51
11074: PUSH
11075: LD_INT 52
11077: PUSH
11078: LD_INT 53
11080: PUSH
11081: LD_INT 54
11083: PUSH
11084: LD_INT 55
11086: PUSH
11087: LD_INT 56
11089: PUSH
11090: LD_INT 57
11092: PUSH
11093: LD_INT 58
11095: PUSH
11096: LD_INT 59
11098: PUSH
11099: LD_INT 63
11101: PUSH
11102: LD_INT 64
11104: PUSH
11105: LD_INT 65
11107: PUSH
11108: LD_INT 82
11110: PUSH
11111: LD_INT 83
11113: PUSH
11114: LD_INT 84
11116: PUSH
11117: LD_INT 85
11119: PUSH
11120: LD_INT 86
11122: PUSH
11123: LD_INT 89
11125: PUSH
11126: LD_INT 91
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: ST_TO_ADDR
11186: GO 11189
11188: POP
// if state > - 1 and state < 3 then
11189: LD_VAR 0 3
11193: PUSH
11194: LD_INT 1
11196: NEG
11197: GREATER
11198: IFFALSE 11210
11200: PUSH
11201: LD_VAR 0 3
11205: PUSH
11206: LD_INT 3
11208: LESS
11209: AND
11210: IFFALSE 11267
// for i in result do
11212: LD_ADDR_VAR 0 5
11216: PUSH
11217: LD_VAR 0 4
11221: PUSH
11222: FOR_IN
11223: IFFALSE 11265
// if GetTech ( i , side ) <> state then
11225: LD_VAR 0 5
11229: PPUSH
11230: LD_VAR 0 1
11234: PPUSH
11235: CALL_OW 321
11239: PUSH
11240: LD_VAR 0 3
11244: NONEQUAL
11245: IFFALSE 11263
// result := result diff i ;
11247: LD_ADDR_VAR 0 4
11251: PUSH
11252: LD_VAR 0 4
11256: PUSH
11257: LD_VAR 0 5
11261: DIFF
11262: ST_TO_ADDR
11263: GO 11222
11265: POP
11266: POP
// end ;
11267: LD_VAR 0 4
11271: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11272: LD_INT 0
11274: PPUSH
11275: PPUSH
11276: PPUSH
// result := true ;
11277: LD_ADDR_VAR 0 3
11281: PUSH
11282: LD_INT 1
11284: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11285: LD_ADDR_VAR 0 5
11289: PUSH
11290: LD_VAR 0 2
11294: PPUSH
11295: CALL_OW 480
11299: ST_TO_ADDR
// if not tmp then
11300: LD_VAR 0 5
11304: NOT
11305: IFFALSE 11309
// exit ;
11307: GO 11358
// for i in tmp do
11309: LD_ADDR_VAR 0 4
11313: PUSH
11314: LD_VAR 0 5
11318: PUSH
11319: FOR_IN
11320: IFFALSE 11356
// if GetTech ( i , side ) <> state_researched then
11322: LD_VAR 0 4
11326: PPUSH
11327: LD_VAR 0 1
11331: PPUSH
11332: CALL_OW 321
11336: PUSH
11337: LD_INT 2
11339: NONEQUAL
11340: IFFALSE 11354
// begin result := false ;
11342: LD_ADDR_VAR 0 3
11346: PUSH
11347: LD_INT 0
11349: ST_TO_ADDR
// exit ;
11350: POP
11351: POP
11352: GO 11358
// end ;
11354: GO 11319
11356: POP
11357: POP
// end ;
11358: LD_VAR 0 3
11362: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11363: LD_INT 0
11365: PPUSH
11366: PPUSH
11367: PPUSH
11368: PPUSH
11369: PPUSH
11370: PPUSH
11371: PPUSH
11372: PPUSH
11373: PPUSH
11374: PPUSH
11375: PPUSH
11376: PPUSH
11377: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11378: LD_VAR 0 1
11382: NOT
11383: IFTRUE 11400
11385: PUSH
11386: LD_VAR 0 1
11390: PPUSH
11391: CALL_OW 257
11395: PUSH
11396: LD_INT 9
11398: NONEQUAL
11399: OR
11400: IFFALSE 11404
// exit ;
11402: GO 11983
// side := GetSide ( unit ) ;
11404: LD_ADDR_VAR 0 9
11408: PUSH
11409: LD_VAR 0 1
11413: PPUSH
11414: CALL_OW 255
11418: ST_TO_ADDR
// tech_space := tech_spacanom ;
11419: LD_ADDR_VAR 0 12
11423: PUSH
11424: LD_INT 29
11426: ST_TO_ADDR
// tech_time := tech_taurad ;
11427: LD_ADDR_VAR 0 13
11431: PUSH
11432: LD_INT 28
11434: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11435: LD_ADDR_VAR 0 11
11439: PUSH
11440: LD_VAR 0 1
11444: PPUSH
11445: CALL_OW 310
11449: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11450: LD_VAR 0 11
11454: PPUSH
11455: CALL_OW 247
11459: PUSH
11460: LD_INT 2
11462: EQUAL
11463: IFFALSE 11467
// exit ;
11465: GO 11983
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11467: LD_ADDR_VAR 0 8
11471: PUSH
11472: LD_INT 81
11474: PUSH
11475: LD_VAR 0 9
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: LD_INT 21
11489: PUSH
11490: LD_INT 3
11492: PUSH
11493: EMPTY
11494: LIST
11495: LIST
11496: PUSH
11497: EMPTY
11498: LIST
11499: LIST
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PPUSH
11505: CALL_OW 69
11509: ST_TO_ADDR
// if not tmp then
11510: LD_VAR 0 8
11514: NOT
11515: IFFALSE 11519
// exit ;
11517: GO 11983
// if in_unit then
11519: LD_VAR 0 11
11523: IFFALSE 11547
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11525: LD_ADDR_VAR 0 10
11529: PUSH
11530: LD_VAR 0 8
11534: PPUSH
11535: LD_VAR 0 11
11539: PPUSH
11540: CALL_OW 74
11544: ST_TO_ADDR
11545: GO 11567
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11547: LD_ADDR_VAR 0 10
11551: PUSH
11552: LD_VAR 0 8
11556: PPUSH
11557: LD_VAR 0 1
11561: PPUSH
11562: CALL_OW 74
11566: ST_TO_ADDR
// if not enemy then
11567: LD_VAR 0 10
11571: NOT
11572: IFFALSE 11576
// exit ;
11574: GO 11983
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11576: LD_VAR 0 11
11580: IFFALSE 11602
11582: PUSH
11583: LD_VAR 0 11
11587: PPUSH
11588: LD_VAR 0 10
11592: PPUSH
11593: CALL_OW 296
11597: PUSH
11598: LD_INT 13
11600: GREATER
11601: AND
11602: IFTRUE 11624
11604: PUSH
11605: LD_VAR 0 1
11609: PPUSH
11610: LD_VAR 0 10
11614: PPUSH
11615: CALL_OW 296
11619: PUSH
11620: LD_INT 12
11622: GREATER
11623: OR
11624: IFFALSE 11628
// exit ;
11626: GO 11983
// missile := [ 1 ] ;
11628: LD_ADDR_VAR 0 14
11632: PUSH
11633: LD_INT 1
11635: PUSH
11636: EMPTY
11637: LIST
11638: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11639: LD_VAR 0 9
11643: PPUSH
11644: LD_VAR 0 12
11648: PPUSH
11649: CALL_OW 325
11653: IFFALSE 11682
// missile := Replace ( missile , missile + 1 , 2 ) ;
11655: LD_ADDR_VAR 0 14
11659: PUSH
11660: LD_VAR 0 14
11664: PPUSH
11665: LD_VAR 0 14
11669: PUSH
11670: LD_INT 1
11672: PLUS
11673: PPUSH
11674: LD_INT 2
11676: PPUSH
11677: CALL_OW 1
11681: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11682: LD_VAR 0 9
11686: PPUSH
11687: LD_VAR 0 13
11691: PPUSH
11692: CALL_OW 325
11696: IFFALSE 11720
11698: PUSH
11699: LD_VAR 0 10
11703: PPUSH
11704: CALL_OW 255
11708: PPUSH
11709: LD_VAR 0 13
11713: PPUSH
11714: CALL_OW 325
11718: NOT
11719: AND
11720: IFFALSE 11749
// missile := Replace ( missile , missile + 1 , 3 ) ;
11722: LD_ADDR_VAR 0 14
11726: PUSH
11727: LD_VAR 0 14
11731: PPUSH
11732: LD_VAR 0 14
11736: PUSH
11737: LD_INT 1
11739: PLUS
11740: PPUSH
11741: LD_INT 3
11743: PPUSH
11744: CALL_OW 1
11748: ST_TO_ADDR
// if missile < 2 then
11749: LD_VAR 0 14
11753: PUSH
11754: LD_INT 2
11756: LESS
11757: IFFALSE 11761
// exit ;
11759: GO 11983
// x := GetX ( enemy ) ;
11761: LD_ADDR_VAR 0 4
11765: PUSH
11766: LD_VAR 0 10
11770: PPUSH
11771: CALL_OW 250
11775: ST_TO_ADDR
// y := GetY ( enemy ) ;
11776: LD_ADDR_VAR 0 5
11780: PUSH
11781: LD_VAR 0 10
11785: PPUSH
11786: CALL_OW 251
11790: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11791: LD_ADDR_VAR 0 6
11795: PUSH
11796: LD_VAR 0 4
11800: PUSH
11801: LD_INT 1
11803: NEG
11804: PPUSH
11805: LD_INT 1
11807: PPUSH
11808: CALL_OW 12
11812: PLUS
11813: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11814: LD_ADDR_VAR 0 7
11818: PUSH
11819: LD_VAR 0 5
11823: PUSH
11824: LD_INT 1
11826: NEG
11827: PPUSH
11828: LD_INT 1
11830: PPUSH
11831: CALL_OW 12
11835: PLUS
11836: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11837: LD_VAR 0 6
11841: PPUSH
11842: LD_VAR 0 7
11846: PPUSH
11847: CALL_OW 488
11851: NOT
11852: IFFALSE 11874
// begin _x := x ;
11854: LD_ADDR_VAR 0 6
11858: PUSH
11859: LD_VAR 0 4
11863: ST_TO_ADDR
// _y := y ;
11864: LD_ADDR_VAR 0 7
11868: PUSH
11869: LD_VAR 0 5
11873: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11874: LD_ADDR_VAR 0 3
11878: PUSH
11879: LD_INT 1
11881: PPUSH
11882: LD_VAR 0 14
11886: PPUSH
11887: CALL_OW 12
11891: ST_TO_ADDR
// case i of 1 :
11892: LD_VAR 0 3
11896: PUSH
11897: LD_INT 1
11899: DOUBLE
11900: EQUAL
11901: IFTRUE 11905
11903: GO 11922
11905: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11906: LD_VAR 0 1
11910: PPUSH
11911: LD_VAR 0 10
11915: PPUSH
11916: CALL_OW 115
11920: GO 11983
11922: LD_INT 2
11924: DOUBLE
11925: EQUAL
11926: IFTRUE 11930
11928: GO 11952
11930: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
11931: LD_VAR 0 1
11935: PPUSH
11936: LD_VAR 0 6
11940: PPUSH
11941: LD_VAR 0 7
11945: PPUSH
11946: CALL_OW 153
11950: GO 11983
11952: LD_INT 3
11954: DOUBLE
11955: EQUAL
11956: IFTRUE 11960
11958: GO 11982
11960: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
11961: LD_VAR 0 1
11965: PPUSH
11966: LD_VAR 0 6
11970: PPUSH
11971: LD_VAR 0 7
11975: PPUSH
11976: CALL_OW 154
11980: GO 11983
11982: POP
// end ;
11983: LD_VAR 0 2
11987: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
11988: LD_INT 0
11990: PPUSH
11991: PPUSH
11992: PPUSH
11993: PPUSH
11994: PPUSH
11995: PPUSH
// if not unit or not building then
11996: LD_VAR 0 1
12000: NOT
12001: IFTRUE 12010
12003: PUSH
12004: LD_VAR 0 2
12008: NOT
12009: OR
12010: IFFALSE 12014
// exit ;
12012: GO 12172
// x := GetX ( building ) ;
12014: LD_ADDR_VAR 0 5
12018: PUSH
12019: LD_VAR 0 2
12023: PPUSH
12024: CALL_OW 250
12028: ST_TO_ADDR
// y := GetY ( building ) ;
12029: LD_ADDR_VAR 0 6
12033: PUSH
12034: LD_VAR 0 2
12038: PPUSH
12039: CALL_OW 251
12043: ST_TO_ADDR
// for i := 0 to 5 do
12044: LD_ADDR_VAR 0 4
12048: PUSH
12049: DOUBLE
12050: LD_INT 0
12052: DEC
12053: ST_TO_ADDR
12054: LD_INT 5
12056: PUSH
12057: FOR_TO
12058: IFFALSE 12170
// begin _x := ShiftX ( x , i , 3 ) ;
12060: LD_ADDR_VAR 0 7
12064: PUSH
12065: LD_VAR 0 5
12069: PPUSH
12070: LD_VAR 0 4
12074: PPUSH
12075: LD_INT 3
12077: PPUSH
12078: CALL_OW 272
12082: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12083: LD_ADDR_VAR 0 8
12087: PUSH
12088: LD_VAR 0 6
12092: PPUSH
12093: LD_VAR 0 4
12097: PPUSH
12098: LD_INT 3
12100: PPUSH
12101: CALL_OW 273
12105: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12106: LD_VAR 0 7
12110: PPUSH
12111: LD_VAR 0 8
12115: PPUSH
12116: CALL_OW 488
12120: NOT
12121: IFFALSE 12125
// continue ;
12123: GO 12057
// if HexInfo ( _x , _y ) = 0 then
12125: LD_VAR 0 7
12129: PPUSH
12130: LD_VAR 0 8
12134: PPUSH
12135: CALL_OW 428
12139: PUSH
12140: LD_INT 0
12142: EQUAL
12143: IFFALSE 12168
// begin ComMoveXY ( unit , _x , _y ) ;
12145: LD_VAR 0 1
12149: PPUSH
12150: LD_VAR 0 7
12154: PPUSH
12155: LD_VAR 0 8
12159: PPUSH
12160: CALL_OW 111
// exit ;
12164: POP
12165: POP
12166: GO 12172
// end ; end ;
12168: GO 12057
12170: POP
12171: POP
// end ;
12172: LD_VAR 0 3
12176: RET
// export function ScanBase ( side , base_area ) ; begin
12177: LD_INT 0
12179: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12180: LD_ADDR_VAR 0 3
12184: PUSH
12185: LD_VAR 0 2
12189: PPUSH
12190: LD_INT 81
12192: PUSH
12193: LD_VAR 0 1
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: PPUSH
12202: CALL_OW 70
12206: ST_TO_ADDR
// end ;
12207: LD_VAR 0 3
12211: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12212: LD_INT 0
12214: PPUSH
12215: PPUSH
12216: PPUSH
12217: PPUSH
// result := false ;
12218: LD_ADDR_VAR 0 2
12222: PUSH
12223: LD_INT 0
12225: ST_TO_ADDR
// side := GetSide ( unit ) ;
12226: LD_ADDR_VAR 0 3
12230: PUSH
12231: LD_VAR 0 1
12235: PPUSH
12236: CALL_OW 255
12240: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12241: LD_ADDR_VAR 0 4
12245: PUSH
12246: LD_VAR 0 1
12250: PPUSH
12251: CALL_OW 248
12255: ST_TO_ADDR
// case nat of 1 :
12256: LD_VAR 0 4
12260: PUSH
12261: LD_INT 1
12263: DOUBLE
12264: EQUAL
12265: IFTRUE 12269
12267: GO 12280
12269: POP
// tech := tech_lassight ; 2 :
12270: LD_ADDR_VAR 0 5
12274: PUSH
12275: LD_INT 12
12277: ST_TO_ADDR
12278: GO 12319
12280: LD_INT 2
12282: DOUBLE
12283: EQUAL
12284: IFTRUE 12288
12286: GO 12299
12288: POP
// tech := tech_mortar ; 3 :
12289: LD_ADDR_VAR 0 5
12293: PUSH
12294: LD_INT 41
12296: ST_TO_ADDR
12297: GO 12319
12299: LD_INT 3
12301: DOUBLE
12302: EQUAL
12303: IFTRUE 12307
12305: GO 12318
12307: POP
// tech := tech_bazooka ; end ;
12308: LD_ADDR_VAR 0 5
12312: PUSH
12313: LD_INT 44
12315: ST_TO_ADDR
12316: GO 12319
12318: POP
// if Researched ( side , tech ) then
12319: LD_VAR 0 3
12323: PPUSH
12324: LD_VAR 0 5
12328: PPUSH
12329: CALL_OW 325
12333: IFFALSE 12360
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12335: LD_ADDR_VAR 0 2
12339: PUSH
12340: LD_INT 5
12342: PUSH
12343: LD_INT 8
12345: PUSH
12346: LD_INT 9
12348: PUSH
12349: EMPTY
12350: LIST
12351: LIST
12352: LIST
12353: PUSH
12354: LD_VAR 0 4
12358: ARRAY
12359: ST_TO_ADDR
// end ;
12360: LD_VAR 0 2
12364: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12365: LD_INT 0
12367: PPUSH
12368: PPUSH
12369: PPUSH
// if not mines then
12370: LD_VAR 0 2
12374: NOT
12375: IFFALSE 12379
// exit ;
12377: GO 12523
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12379: LD_ADDR_VAR 0 5
12383: PUSH
12384: LD_INT 81
12386: PUSH
12387: LD_VAR 0 1
12391: PUSH
12392: EMPTY
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 3
12398: PUSH
12399: LD_INT 21
12401: PUSH
12402: LD_INT 3
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: PPUSH
12417: CALL_OW 69
12421: ST_TO_ADDR
// for i in mines do
12422: LD_ADDR_VAR 0 4
12426: PUSH
12427: LD_VAR 0 2
12431: PUSH
12432: FOR_IN
12433: IFFALSE 12521
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12435: LD_VAR 0 4
12439: PUSH
12440: LD_INT 1
12442: ARRAY
12443: PPUSH
12444: LD_VAR 0 4
12448: PUSH
12449: LD_INT 2
12451: ARRAY
12452: PPUSH
12453: CALL_OW 458
12457: NOT
12458: IFFALSE 12462
// continue ;
12460: GO 12432
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12462: LD_VAR 0 4
12466: PUSH
12467: LD_INT 1
12469: ARRAY
12470: PPUSH
12471: LD_VAR 0 4
12475: PUSH
12476: LD_INT 2
12478: ARRAY
12479: PPUSH
12480: CALL_OW 428
12484: PUSH
12485: LD_VAR 0 5
12489: IN
12490: IFFALSE 12519
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12492: LD_VAR 0 4
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: PPUSH
12501: LD_VAR 0 4
12505: PUSH
12506: LD_INT 2
12508: ARRAY
12509: PPUSH
12510: LD_VAR 0 1
12514: PPUSH
12515: CALL_OW 456
// end ;
12519: GO 12432
12521: POP
12522: POP
// end ;
12523: LD_VAR 0 3
12527: RET
// export function Count ( array ) ; begin
12528: LD_INT 0
12530: PPUSH
// result := array + 0 ;
12531: LD_ADDR_VAR 0 2
12535: PUSH
12536: LD_VAR 0 1
12540: PUSH
12541: LD_INT 0
12543: PLUS
12544: ST_TO_ADDR
// end ;
12545: LD_VAR 0 2
12549: RET
// export function IsEmpty ( building ) ; begin
12550: LD_INT 0
12552: PPUSH
// if not building then
12553: LD_VAR 0 1
12557: NOT
12558: IFFALSE 12562
// exit ;
12560: GO 12605
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12562: LD_ADDR_VAR 0 2
12566: PUSH
12567: LD_VAR 0 1
12571: PUSH
12572: LD_INT 22
12574: PUSH
12575: LD_VAR 0 1
12579: PPUSH
12580: CALL_OW 255
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: PUSH
12589: LD_INT 58
12591: PUSH
12592: EMPTY
12593: LIST
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 69
12603: IN
12604: ST_TO_ADDR
// end ;
12605: LD_VAR 0 2
12609: RET
// export function IsNotFull ( building ) ; var places ; begin
12610: LD_INT 0
12612: PPUSH
12613: PPUSH
// if not building then
12614: LD_VAR 0 1
12618: NOT
12619: IFFALSE 12623
// exit ;
12621: GO 12651
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12623: LD_ADDR_VAR 0 2
12627: PUSH
12628: LD_VAR 0 1
12632: PPUSH
12633: LD_INT 3
12635: PUSH
12636: LD_INT 62
12638: PUSH
12639: EMPTY
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: PPUSH
12646: CALL_OW 72
12650: ST_TO_ADDR
// end ;
12651: LD_VAR 0 2
12655: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12656: LD_INT 0
12658: PPUSH
12659: PPUSH
12660: PPUSH
12661: PPUSH
// tmp := [ ] ;
12662: LD_ADDR_VAR 0 3
12666: PUSH
12667: EMPTY
12668: ST_TO_ADDR
// list := [ ] ;
12669: LD_ADDR_VAR 0 5
12673: PUSH
12674: EMPTY
12675: ST_TO_ADDR
// for i = 16 to 25 do
12676: LD_ADDR_VAR 0 4
12680: PUSH
12681: DOUBLE
12682: LD_INT 16
12684: DEC
12685: ST_TO_ADDR
12686: LD_INT 25
12688: PUSH
12689: FOR_TO
12690: IFFALSE 12763
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12692: LD_ADDR_VAR 0 3
12696: PUSH
12697: LD_VAR 0 3
12701: PUSH
12702: LD_INT 22
12704: PUSH
12705: LD_VAR 0 1
12709: PPUSH
12710: CALL_OW 255
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 91
12721: PUSH
12722: LD_VAR 0 1
12726: PUSH
12727: LD_INT 6
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: LIST
12734: PUSH
12735: LD_INT 30
12737: PUSH
12738: LD_VAR 0 4
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: EMPTY
12748: LIST
12749: LIST
12750: LIST
12751: PUSH
12752: EMPTY
12753: LIST
12754: PPUSH
12755: CALL_OW 69
12759: ADD
12760: ST_TO_ADDR
12761: GO 12689
12763: POP
12764: POP
// for i = 1 to tmp do
12765: LD_ADDR_VAR 0 4
12769: PUSH
12770: DOUBLE
12771: LD_INT 1
12773: DEC
12774: ST_TO_ADDR
12775: LD_VAR 0 3
12779: PUSH
12780: FOR_TO
12781: IFFALSE 12869
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12783: LD_ADDR_VAR 0 5
12787: PUSH
12788: LD_VAR 0 5
12792: PUSH
12793: LD_VAR 0 3
12797: PUSH
12798: LD_VAR 0 4
12802: ARRAY
12803: PPUSH
12804: CALL_OW 266
12808: PUSH
12809: LD_VAR 0 3
12813: PUSH
12814: LD_VAR 0 4
12818: ARRAY
12819: PPUSH
12820: CALL_OW 250
12824: PUSH
12825: LD_VAR 0 3
12829: PUSH
12830: LD_VAR 0 4
12834: ARRAY
12835: PPUSH
12836: CALL_OW 251
12840: PUSH
12841: LD_VAR 0 3
12845: PUSH
12846: LD_VAR 0 4
12850: ARRAY
12851: PPUSH
12852: CALL_OW 254
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: EMPTY
12864: LIST
12865: ADD
12866: ST_TO_ADDR
12867: GO 12780
12869: POP
12870: POP
// result := list ;
12871: LD_ADDR_VAR 0 2
12875: PUSH
12876: LD_VAR 0 5
12880: ST_TO_ADDR
// end ;
12881: LD_VAR 0 2
12885: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12886: LD_INT 0
12888: PPUSH
12889: PPUSH
12890: PPUSH
12891: PPUSH
12892: PPUSH
12893: PPUSH
12894: PPUSH
// if not factory then
12895: LD_VAR 0 1
12899: NOT
12900: IFFALSE 12904
// exit ;
12902: GO 13507
// if control = control_apeman then
12904: LD_VAR 0 4
12908: PUSH
12909: LD_INT 5
12911: EQUAL
12912: IFFALSE 13021
// begin tmp := UnitsInside ( factory ) ;
12914: LD_ADDR_VAR 0 8
12918: PUSH
12919: LD_VAR 0 1
12923: PPUSH
12924: CALL_OW 313
12928: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
12929: LD_VAR 0 8
12933: PPUSH
12934: LD_INT 25
12936: PUSH
12937: LD_INT 12
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: PPUSH
12944: CALL_OW 72
12948: NOT
12949: IFFALSE 12959
// control := control_manual ;
12951: LD_ADDR_VAR 0 4
12955: PUSH
12956: LD_INT 1
12958: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12959: LD_ADDR_VAR 0 8
12963: PUSH
12964: LD_VAR 0 1
12968: PPUSH
12969: CALL 12656 0 1
12973: ST_TO_ADDR
// if tmp then
12974: LD_VAR 0 8
12978: IFFALSE 13021
// begin for i in tmp do
12980: LD_ADDR_VAR 0 7
12984: PUSH
12985: LD_VAR 0 8
12989: PUSH
12990: FOR_IN
12991: IFFALSE 13019
// if i [ 1 ] = b_ext_radio then
12993: LD_VAR 0 7
12997: PUSH
12998: LD_INT 1
13000: ARRAY
13001: PUSH
13002: LD_INT 22
13004: EQUAL
13005: IFFALSE 13017
// begin control := control_remote ;
13007: LD_ADDR_VAR 0 4
13011: PUSH
13012: LD_INT 2
13014: ST_TO_ADDR
// break ;
13015: GO 13019
// end ;
13017: GO 12990
13019: POP
13020: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13021: LD_VAR 0 1
13025: PPUSH
13026: LD_VAR 0 2
13030: PPUSH
13031: LD_VAR 0 3
13035: PPUSH
13036: LD_VAR 0 4
13040: PPUSH
13041: LD_VAR 0 5
13045: PPUSH
13046: CALL_OW 448
13050: IFFALSE 13085
// begin result := [ chassis , engine , control , weapon ] ;
13052: LD_ADDR_VAR 0 6
13056: PUSH
13057: LD_VAR 0 2
13061: PUSH
13062: LD_VAR 0 3
13066: PUSH
13067: LD_VAR 0 4
13071: PUSH
13072: LD_VAR 0 5
13076: PUSH
13077: EMPTY
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: ST_TO_ADDR
// exit ;
13083: GO 13507
// end ; _chassis := AvailableChassisList ( factory ) ;
13085: LD_ADDR_VAR 0 9
13089: PUSH
13090: LD_VAR 0 1
13094: PPUSH
13095: CALL_OW 475
13099: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13100: LD_ADDR_VAR 0 11
13104: PUSH
13105: LD_VAR 0 1
13109: PPUSH
13110: CALL_OW 476
13114: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13115: LD_ADDR_VAR 0 12
13119: PUSH
13120: LD_VAR 0 1
13124: PPUSH
13125: CALL_OW 477
13129: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13130: LD_ADDR_VAR 0 10
13134: PUSH
13135: LD_VAR 0 1
13139: PPUSH
13140: CALL_OW 478
13144: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13145: LD_VAR 0 9
13149: NOT
13150: IFTRUE 13159
13152: PUSH
13153: LD_VAR 0 11
13157: NOT
13158: OR
13159: IFTRUE 13168
13161: PUSH
13162: LD_VAR 0 12
13166: NOT
13167: OR
13168: IFTRUE 13177
13170: PUSH
13171: LD_VAR 0 10
13175: NOT
13176: OR
13177: IFFALSE 13212
// begin result := [ chassis , engine , control , weapon ] ;
13179: LD_ADDR_VAR 0 6
13183: PUSH
13184: LD_VAR 0 2
13188: PUSH
13189: LD_VAR 0 3
13193: PUSH
13194: LD_VAR 0 4
13198: PUSH
13199: LD_VAR 0 5
13203: PUSH
13204: EMPTY
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: ST_TO_ADDR
// exit ;
13210: GO 13507
// end ; if not chassis in _chassis then
13212: LD_VAR 0 2
13216: PUSH
13217: LD_VAR 0 9
13221: IN
13222: NOT
13223: IFFALSE 13249
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13225: LD_ADDR_VAR 0 2
13229: PUSH
13230: LD_VAR 0 9
13234: PUSH
13235: LD_INT 1
13237: PPUSH
13238: LD_VAR 0 9
13242: PPUSH
13243: CALL_OW 12
13247: ARRAY
13248: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13249: LD_VAR 0 2
13253: PPUSH
13254: LD_VAR 0 3
13258: PPUSH
13259: CALL 13512 0 2
13263: NOT
13264: IFFALSE 13325
// repeat engine := _engine [ 1 ] ;
13266: LD_ADDR_VAR 0 3
13270: PUSH
13271: LD_VAR 0 11
13275: PUSH
13276: LD_INT 1
13278: ARRAY
13279: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13280: LD_ADDR_VAR 0 11
13284: PUSH
13285: LD_VAR 0 11
13289: PPUSH
13290: LD_INT 1
13292: PPUSH
13293: CALL_OW 3
13297: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13298: LD_VAR 0 2
13302: PPUSH
13303: LD_VAR 0 3
13307: PPUSH
13308: CALL 13512 0 2
13312: IFTRUE 13323
13314: PUSH
13315: LD_VAR 0 11
13319: PUSH
13320: EMPTY
13321: EQUAL
13322: OR
13323: IFFALSE 13266
// if not control in _control then
13325: LD_VAR 0 4
13329: PUSH
13330: LD_VAR 0 12
13334: IN
13335: NOT
13336: IFFALSE 13362
// control := _control [ rand ( 1 , _control ) ] ;
13338: LD_ADDR_VAR 0 4
13342: PUSH
13343: LD_VAR 0 12
13347: PUSH
13348: LD_INT 1
13350: PPUSH
13351: LD_VAR 0 12
13355: PPUSH
13356: CALL_OW 12
13360: ARRAY
13361: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13362: LD_VAR 0 2
13366: PPUSH
13367: LD_VAR 0 5
13371: PPUSH
13372: CALL 13734 0 2
13376: NOT
13377: IFFALSE 13438
// repeat weapon := _weapon [ 1 ] ;
13379: LD_ADDR_VAR 0 5
13383: PUSH
13384: LD_VAR 0 10
13388: PUSH
13389: LD_INT 1
13391: ARRAY
13392: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13393: LD_ADDR_VAR 0 10
13397: PUSH
13398: LD_VAR 0 10
13402: PPUSH
13403: LD_INT 1
13405: PPUSH
13406: CALL_OW 3
13410: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13411: LD_VAR 0 2
13415: PPUSH
13416: LD_VAR 0 5
13420: PPUSH
13421: CALL 13734 0 2
13425: IFTRUE 13436
13427: PUSH
13428: LD_VAR 0 10
13432: PUSH
13433: EMPTY
13434: EQUAL
13435: OR
13436: IFFALSE 13379
// result := [ ] ;
13438: LD_ADDR_VAR 0 6
13442: PUSH
13443: EMPTY
13444: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13445: LD_VAR 0 1
13449: PPUSH
13450: LD_VAR 0 2
13454: PPUSH
13455: LD_VAR 0 3
13459: PPUSH
13460: LD_VAR 0 4
13464: PPUSH
13465: LD_VAR 0 5
13469: PPUSH
13470: CALL_OW 448
13474: IFFALSE 13507
// result := [ chassis , engine , control , weapon ] ;
13476: LD_ADDR_VAR 0 6
13480: PUSH
13481: LD_VAR 0 2
13485: PUSH
13486: LD_VAR 0 3
13490: PUSH
13491: LD_VAR 0 4
13495: PUSH
13496: LD_VAR 0 5
13500: PUSH
13501: EMPTY
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: ST_TO_ADDR
// end ;
13507: LD_VAR 0 6
13511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13512: LD_INT 0
13514: PPUSH
// if not chassis or not engine then
13515: LD_VAR 0 1
13519: NOT
13520: IFTRUE 13529
13522: PUSH
13523: LD_VAR 0 2
13527: NOT
13528: OR
13529: IFFALSE 13533
// exit ;
13531: GO 13729
// case engine of engine_solar :
13533: LD_VAR 0 2
13537: PUSH
13538: LD_INT 2
13540: DOUBLE
13541: EQUAL
13542: IFTRUE 13546
13544: GO 13584
13546: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13547: LD_ADDR_VAR 0 3
13551: PUSH
13552: LD_INT 11
13554: PUSH
13555: LD_INT 12
13557: PUSH
13558: LD_INT 13
13560: PUSH
13561: LD_INT 14
13563: PUSH
13564: LD_INT 1
13566: PUSH
13567: LD_INT 2
13569: PUSH
13570: LD_INT 3
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: LIST
13581: ST_TO_ADDR
13582: GO 13713
13584: LD_INT 1
13586: DOUBLE
13587: EQUAL
13588: IFTRUE 13592
13590: GO 13654
13592: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13593: LD_ADDR_VAR 0 3
13597: PUSH
13598: LD_INT 11
13600: PUSH
13601: LD_INT 12
13603: PUSH
13604: LD_INT 13
13606: PUSH
13607: LD_INT 14
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: LD_INT 3
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: LD_INT 5
13624: PUSH
13625: LD_INT 21
13627: PUSH
13628: LD_INT 23
13630: PUSH
13631: LD_INT 22
13633: PUSH
13634: LD_INT 24
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: ST_TO_ADDR
13652: GO 13713
13654: LD_INT 3
13656: DOUBLE
13657: EQUAL
13658: IFTRUE 13662
13660: GO 13712
13662: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13663: LD_ADDR_VAR 0 3
13667: PUSH
13668: LD_INT 13
13670: PUSH
13671: LD_INT 14
13673: PUSH
13674: LD_INT 2
13676: PUSH
13677: LD_INT 3
13679: PUSH
13680: LD_INT 4
13682: PUSH
13683: LD_INT 5
13685: PUSH
13686: LD_INT 21
13688: PUSH
13689: LD_INT 22
13691: PUSH
13692: LD_INT 23
13694: PUSH
13695: LD_INT 24
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: ST_TO_ADDR
13710: GO 13713
13712: POP
// result := ( chassis in result ) ;
13713: LD_ADDR_VAR 0 3
13717: PUSH
13718: LD_VAR 0 1
13722: PUSH
13723: LD_VAR 0 3
13727: IN
13728: ST_TO_ADDR
// end ;
13729: LD_VAR 0 3
13733: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13734: LD_INT 0
13736: PPUSH
// if not chassis or not weapon then
13737: LD_VAR 0 1
13741: NOT
13742: IFTRUE 13751
13744: PUSH
13745: LD_VAR 0 2
13749: NOT
13750: OR
13751: IFFALSE 13755
// exit ;
13753: GO 14849
// case weapon of us_machine_gun :
13755: LD_VAR 0 2
13759: PUSH
13760: LD_INT 2
13762: DOUBLE
13763: EQUAL
13764: IFTRUE 13768
13766: GO 13798
13768: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_INT 1
13776: PUSH
13777: LD_INT 2
13779: PUSH
13780: LD_INT 3
13782: PUSH
13783: LD_INT 4
13785: PUSH
13786: LD_INT 5
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: ST_TO_ADDR
13796: GO 14833
13798: LD_INT 3
13800: DOUBLE
13801: EQUAL
13802: IFTRUE 13806
13804: GO 13836
13806: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13807: LD_ADDR_VAR 0 3
13811: PUSH
13812: LD_INT 1
13814: PUSH
13815: LD_INT 2
13817: PUSH
13818: LD_INT 3
13820: PUSH
13821: LD_INT 4
13823: PUSH
13824: LD_INT 5
13826: PUSH
13827: EMPTY
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: ST_TO_ADDR
13834: GO 14833
13836: LD_INT 11
13838: DOUBLE
13839: EQUAL
13840: IFTRUE 13844
13842: GO 13874
13844: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13845: LD_ADDR_VAR 0 3
13849: PUSH
13850: LD_INT 1
13852: PUSH
13853: LD_INT 2
13855: PUSH
13856: LD_INT 3
13858: PUSH
13859: LD_INT 4
13861: PUSH
13862: LD_INT 5
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: ST_TO_ADDR
13872: GO 14833
13874: LD_INT 4
13876: DOUBLE
13877: EQUAL
13878: IFTRUE 13882
13880: GO 13908
13882: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13883: LD_ADDR_VAR 0 3
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 3
13893: PUSH
13894: LD_INT 4
13896: PUSH
13897: LD_INT 5
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: LIST
13905: ST_TO_ADDR
13906: GO 14833
13908: LD_INT 5
13910: DOUBLE
13911: EQUAL
13912: IFTRUE 13916
13914: GO 13942
13916: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
13917: LD_ADDR_VAR 0 3
13921: PUSH
13922: LD_INT 2
13924: PUSH
13925: LD_INT 3
13927: PUSH
13928: LD_INT 4
13930: PUSH
13931: LD_INT 5
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: ST_TO_ADDR
13940: GO 14833
13942: LD_INT 9
13944: DOUBLE
13945: EQUAL
13946: IFTRUE 13950
13948: GO 13976
13950: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
13951: LD_ADDR_VAR 0 3
13955: PUSH
13956: LD_INT 2
13958: PUSH
13959: LD_INT 3
13961: PUSH
13962: LD_INT 4
13964: PUSH
13965: LD_INT 5
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: ST_TO_ADDR
13974: GO 14833
13976: LD_INT 7
13978: DOUBLE
13979: EQUAL
13980: IFTRUE 13984
13982: GO 14010
13984: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13985: LD_ADDR_VAR 0 3
13989: PUSH
13990: LD_INT 2
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: LD_INT 4
13998: PUSH
13999: LD_INT 5
14001: PUSH
14002: EMPTY
14003: LIST
14004: LIST
14005: LIST
14006: LIST
14007: ST_TO_ADDR
14008: GO 14833
14010: LD_INT 12
14012: DOUBLE
14013: EQUAL
14014: IFTRUE 14018
14016: GO 14044
14018: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14019: LD_ADDR_VAR 0 3
14023: PUSH
14024: LD_INT 2
14026: PUSH
14027: LD_INT 3
14029: PUSH
14030: LD_INT 4
14032: PUSH
14033: LD_INT 5
14035: PUSH
14036: EMPTY
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: ST_TO_ADDR
14042: GO 14833
14044: LD_INT 13
14046: DOUBLE
14047: EQUAL
14048: IFTRUE 14052
14050: GO 14078
14052: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14053: LD_ADDR_VAR 0 3
14057: PUSH
14058: LD_INT 2
14060: PUSH
14061: LD_INT 3
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: LD_INT 5
14069: PUSH
14070: EMPTY
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: ST_TO_ADDR
14076: GO 14833
14078: LD_INT 14
14080: DOUBLE
14081: EQUAL
14082: IFTRUE 14086
14084: GO 14104
14086: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14087: LD_ADDR_VAR 0 3
14091: PUSH
14092: LD_INT 4
14094: PUSH
14095: LD_INT 5
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: ST_TO_ADDR
14102: GO 14833
14104: LD_INT 6
14106: DOUBLE
14107: EQUAL
14108: IFTRUE 14112
14110: GO 14130
14112: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14113: LD_ADDR_VAR 0 3
14117: PUSH
14118: LD_INT 4
14120: PUSH
14121: LD_INT 5
14123: PUSH
14124: EMPTY
14125: LIST
14126: LIST
14127: ST_TO_ADDR
14128: GO 14833
14130: LD_INT 10
14132: DOUBLE
14133: EQUAL
14134: IFTRUE 14138
14136: GO 14156
14138: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14139: LD_ADDR_VAR 0 3
14143: PUSH
14144: LD_INT 4
14146: PUSH
14147: LD_INT 5
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: ST_TO_ADDR
14154: GO 14833
14156: LD_INT 22
14158: DOUBLE
14159: EQUAL
14160: IFTRUE 14164
14162: GO 14190
14164: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14165: LD_ADDR_VAR 0 3
14169: PUSH
14170: LD_INT 11
14172: PUSH
14173: LD_INT 12
14175: PUSH
14176: LD_INT 13
14178: PUSH
14179: LD_INT 14
14181: PUSH
14182: EMPTY
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: ST_TO_ADDR
14188: GO 14833
14190: LD_INT 23
14192: DOUBLE
14193: EQUAL
14194: IFTRUE 14198
14196: GO 14224
14198: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14199: LD_ADDR_VAR 0 3
14203: PUSH
14204: LD_INT 11
14206: PUSH
14207: LD_INT 12
14209: PUSH
14210: LD_INT 13
14212: PUSH
14213: LD_INT 14
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: LIST
14220: LIST
14221: ST_TO_ADDR
14222: GO 14833
14224: LD_INT 24
14226: DOUBLE
14227: EQUAL
14228: IFTRUE 14232
14230: GO 14258
14232: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14233: LD_ADDR_VAR 0 3
14237: PUSH
14238: LD_INT 11
14240: PUSH
14241: LD_INT 12
14243: PUSH
14244: LD_INT 13
14246: PUSH
14247: LD_INT 14
14249: PUSH
14250: EMPTY
14251: LIST
14252: LIST
14253: LIST
14254: LIST
14255: ST_TO_ADDR
14256: GO 14833
14258: LD_INT 30
14260: DOUBLE
14261: EQUAL
14262: IFTRUE 14266
14264: GO 14292
14266: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14267: LD_ADDR_VAR 0 3
14271: PUSH
14272: LD_INT 11
14274: PUSH
14275: LD_INT 12
14277: PUSH
14278: LD_INT 13
14280: PUSH
14281: LD_INT 14
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: LIST
14288: LIST
14289: ST_TO_ADDR
14290: GO 14833
14292: LD_INT 25
14294: DOUBLE
14295: EQUAL
14296: IFTRUE 14300
14298: GO 14318
14300: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14301: LD_ADDR_VAR 0 3
14305: PUSH
14306: LD_INT 13
14308: PUSH
14309: LD_INT 14
14311: PUSH
14312: EMPTY
14313: LIST
14314: LIST
14315: ST_TO_ADDR
14316: GO 14833
14318: LD_INT 27
14320: DOUBLE
14321: EQUAL
14322: IFTRUE 14326
14324: GO 14344
14326: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14327: LD_ADDR_VAR 0 3
14331: PUSH
14332: LD_INT 13
14334: PUSH
14335: LD_INT 14
14337: PUSH
14338: EMPTY
14339: LIST
14340: LIST
14341: ST_TO_ADDR
14342: GO 14833
14344: LD_INT 92
14346: DOUBLE
14347: EQUAL
14348: IFTRUE 14352
14350: GO 14378
14352: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14353: LD_ADDR_VAR 0 3
14357: PUSH
14358: LD_INT 11
14360: PUSH
14361: LD_INT 12
14363: PUSH
14364: LD_INT 13
14366: PUSH
14367: LD_INT 14
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: ST_TO_ADDR
14376: GO 14833
14378: LD_INT 28
14380: DOUBLE
14381: EQUAL
14382: IFTRUE 14386
14384: GO 14404
14386: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14387: LD_ADDR_VAR 0 3
14391: PUSH
14392: LD_INT 13
14394: PUSH
14395: LD_INT 14
14397: PUSH
14398: EMPTY
14399: LIST
14400: LIST
14401: ST_TO_ADDR
14402: GO 14833
14404: LD_INT 29
14406: DOUBLE
14407: EQUAL
14408: IFTRUE 14412
14410: GO 14430
14412: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14413: LD_ADDR_VAR 0 3
14417: PUSH
14418: LD_INT 13
14420: PUSH
14421: LD_INT 14
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: ST_TO_ADDR
14428: GO 14833
14430: LD_INT 31
14432: DOUBLE
14433: EQUAL
14434: IFTRUE 14438
14436: GO 14456
14438: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14439: LD_ADDR_VAR 0 3
14443: PUSH
14444: LD_INT 13
14446: PUSH
14447: LD_INT 14
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: ST_TO_ADDR
14454: GO 14833
14456: LD_INT 26
14458: DOUBLE
14459: EQUAL
14460: IFTRUE 14464
14462: GO 14482
14464: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14465: LD_ADDR_VAR 0 3
14469: PUSH
14470: LD_INT 13
14472: PUSH
14473: LD_INT 14
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: ST_TO_ADDR
14480: GO 14833
14482: LD_INT 42
14484: DOUBLE
14485: EQUAL
14486: IFTRUE 14490
14488: GO 14516
14490: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14491: LD_ADDR_VAR 0 3
14495: PUSH
14496: LD_INT 21
14498: PUSH
14499: LD_INT 22
14501: PUSH
14502: LD_INT 23
14504: PUSH
14505: LD_INT 24
14507: PUSH
14508: EMPTY
14509: LIST
14510: LIST
14511: LIST
14512: LIST
14513: ST_TO_ADDR
14514: GO 14833
14516: LD_INT 43
14518: DOUBLE
14519: EQUAL
14520: IFTRUE 14524
14522: GO 14550
14524: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14525: LD_ADDR_VAR 0 3
14529: PUSH
14530: LD_INT 21
14532: PUSH
14533: LD_INT 22
14535: PUSH
14536: LD_INT 23
14538: PUSH
14539: LD_INT 24
14541: PUSH
14542: EMPTY
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: ST_TO_ADDR
14548: GO 14833
14550: LD_INT 44
14552: DOUBLE
14553: EQUAL
14554: IFTRUE 14558
14556: GO 14584
14558: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14559: LD_ADDR_VAR 0 3
14563: PUSH
14564: LD_INT 21
14566: PUSH
14567: LD_INT 22
14569: PUSH
14570: LD_INT 23
14572: PUSH
14573: LD_INT 24
14575: PUSH
14576: EMPTY
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: ST_TO_ADDR
14582: GO 14833
14584: LD_INT 45
14586: DOUBLE
14587: EQUAL
14588: IFTRUE 14592
14590: GO 14618
14592: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14593: LD_ADDR_VAR 0 3
14597: PUSH
14598: LD_INT 21
14600: PUSH
14601: LD_INT 22
14603: PUSH
14604: LD_INT 23
14606: PUSH
14607: LD_INT 24
14609: PUSH
14610: EMPTY
14611: LIST
14612: LIST
14613: LIST
14614: LIST
14615: ST_TO_ADDR
14616: GO 14833
14618: LD_INT 49
14620: DOUBLE
14621: EQUAL
14622: IFTRUE 14626
14624: GO 14652
14626: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14627: LD_ADDR_VAR 0 3
14631: PUSH
14632: LD_INT 21
14634: PUSH
14635: LD_INT 22
14637: PUSH
14638: LD_INT 23
14640: PUSH
14641: LD_INT 24
14643: PUSH
14644: EMPTY
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: ST_TO_ADDR
14650: GO 14833
14652: LD_INT 51
14654: DOUBLE
14655: EQUAL
14656: IFTRUE 14660
14658: GO 14686
14660: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14661: LD_ADDR_VAR 0 3
14665: PUSH
14666: LD_INT 21
14668: PUSH
14669: LD_INT 22
14671: PUSH
14672: LD_INT 23
14674: PUSH
14675: LD_INT 24
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: ST_TO_ADDR
14684: GO 14833
14686: LD_INT 52
14688: DOUBLE
14689: EQUAL
14690: IFTRUE 14694
14692: GO 14720
14694: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14695: LD_ADDR_VAR 0 3
14699: PUSH
14700: LD_INT 21
14702: PUSH
14703: LD_INT 22
14705: PUSH
14706: LD_INT 23
14708: PUSH
14709: LD_INT 24
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: LIST
14716: LIST
14717: ST_TO_ADDR
14718: GO 14833
14720: LD_INT 53
14722: DOUBLE
14723: EQUAL
14724: IFTRUE 14728
14726: GO 14746
14728: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14729: LD_ADDR_VAR 0 3
14733: PUSH
14734: LD_INT 23
14736: PUSH
14737: LD_INT 24
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: ST_TO_ADDR
14744: GO 14833
14746: LD_INT 46
14748: DOUBLE
14749: EQUAL
14750: IFTRUE 14754
14752: GO 14772
14754: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14755: LD_ADDR_VAR 0 3
14759: PUSH
14760: LD_INT 23
14762: PUSH
14763: LD_INT 24
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: ST_TO_ADDR
14770: GO 14833
14772: LD_INT 47
14774: DOUBLE
14775: EQUAL
14776: IFTRUE 14780
14778: GO 14798
14780: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_INT 23
14788: PUSH
14789: LD_INT 24
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: ST_TO_ADDR
14796: GO 14833
14798: LD_INT 98
14800: DOUBLE
14801: EQUAL
14802: IFTRUE 14806
14804: GO 14832
14806: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14807: LD_ADDR_VAR 0 3
14811: PUSH
14812: LD_INT 21
14814: PUSH
14815: LD_INT 22
14817: PUSH
14818: LD_INT 23
14820: PUSH
14821: LD_INT 24
14823: PUSH
14824: EMPTY
14825: LIST
14826: LIST
14827: LIST
14828: LIST
14829: ST_TO_ADDR
14830: GO 14833
14832: POP
// result := ( chassis in result ) ;
14833: LD_ADDR_VAR 0 3
14837: PUSH
14838: LD_VAR 0 1
14842: PUSH
14843: LD_VAR 0 3
14847: IN
14848: ST_TO_ADDR
// end ;
14849: LD_VAR 0 3
14853: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14854: LD_INT 0
14856: PPUSH
14857: PPUSH
14858: PPUSH
14859: PPUSH
14860: PPUSH
14861: PPUSH
14862: PPUSH
// result := array ;
14863: LD_ADDR_VAR 0 5
14867: PUSH
14868: LD_VAR 0 1
14872: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14873: LD_VAR 0 1
14877: NOT
14878: IFTRUE 14887
14880: PUSH
14881: LD_VAR 0 2
14885: NOT
14886: OR
14887: IFTRUE 14896
14889: PUSH
14890: LD_VAR 0 3
14894: NOT
14895: OR
14896: IFTRUE 14910
14898: PUSH
14899: LD_VAR 0 2
14903: PUSH
14904: LD_VAR 0 1
14908: GREATER
14909: OR
14910: IFTRUE 14924
14912: PUSH
14913: LD_VAR 0 3
14917: PUSH
14918: LD_VAR 0 1
14922: GREATER
14923: OR
14924: IFFALSE 14928
// exit ;
14926: GO 15224
// if direction then
14928: LD_VAR 0 4
14932: IFFALSE 14996
// begin d := 1 ;
14934: LD_ADDR_VAR 0 9
14938: PUSH
14939: LD_INT 1
14941: ST_TO_ADDR
// if i_from > i_to then
14942: LD_VAR 0 2
14946: PUSH
14947: LD_VAR 0 3
14951: GREATER
14952: IFFALSE 14978
// length := ( array - i_from ) + i_to else
14954: LD_ADDR_VAR 0 11
14958: PUSH
14959: LD_VAR 0 1
14963: PUSH
14964: LD_VAR 0 2
14968: MINUS
14969: PUSH
14970: LD_VAR 0 3
14974: PLUS
14975: ST_TO_ADDR
14976: GO 14994
// length := i_to - i_from ;
14978: LD_ADDR_VAR 0 11
14982: PUSH
14983: LD_VAR 0 3
14987: PUSH
14988: LD_VAR 0 2
14992: MINUS
14993: ST_TO_ADDR
// end else
14994: GO 15057
// begin d := - 1 ;
14996: LD_ADDR_VAR 0 9
15000: PUSH
15001: LD_INT 1
15003: NEG
15004: ST_TO_ADDR
// if i_from > i_to then
15005: LD_VAR 0 2
15009: PUSH
15010: LD_VAR 0 3
15014: GREATER
15015: IFFALSE 15035
// length := i_from - i_to else
15017: LD_ADDR_VAR 0 11
15021: PUSH
15022: LD_VAR 0 2
15026: PUSH
15027: LD_VAR 0 3
15031: MINUS
15032: ST_TO_ADDR
15033: GO 15057
// length := ( array - i_to ) + i_from ;
15035: LD_ADDR_VAR 0 11
15039: PUSH
15040: LD_VAR 0 1
15044: PUSH
15045: LD_VAR 0 3
15049: MINUS
15050: PUSH
15051: LD_VAR 0 2
15055: PLUS
15056: ST_TO_ADDR
// end ; if not length then
15057: LD_VAR 0 11
15061: NOT
15062: IFFALSE 15066
// exit ;
15064: GO 15224
// tmp := array ;
15066: LD_ADDR_VAR 0 10
15070: PUSH
15071: LD_VAR 0 1
15075: ST_TO_ADDR
// for i = 1 to length do
15076: LD_ADDR_VAR 0 6
15080: PUSH
15081: DOUBLE
15082: LD_INT 1
15084: DEC
15085: ST_TO_ADDR
15086: LD_VAR 0 11
15090: PUSH
15091: FOR_TO
15092: IFFALSE 15212
// begin for j = 1 to array do
15094: LD_ADDR_VAR 0 7
15098: PUSH
15099: DOUBLE
15100: LD_INT 1
15102: DEC
15103: ST_TO_ADDR
15104: LD_VAR 0 1
15108: PUSH
15109: FOR_TO
15110: IFFALSE 15198
// begin k := j + d ;
15112: LD_ADDR_VAR 0 8
15116: PUSH
15117: LD_VAR 0 7
15121: PUSH
15122: LD_VAR 0 9
15126: PLUS
15127: ST_TO_ADDR
// if k > array then
15128: LD_VAR 0 8
15132: PUSH
15133: LD_VAR 0 1
15137: GREATER
15138: IFFALSE 15148
// k := 1 ;
15140: LD_ADDR_VAR 0 8
15144: PUSH
15145: LD_INT 1
15147: ST_TO_ADDR
// if not k then
15148: LD_VAR 0 8
15152: NOT
15153: IFFALSE 15165
// k := array ;
15155: LD_ADDR_VAR 0 8
15159: PUSH
15160: LD_VAR 0 1
15164: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15165: LD_ADDR_VAR 0 10
15169: PUSH
15170: LD_VAR 0 10
15174: PPUSH
15175: LD_VAR 0 8
15179: PPUSH
15180: LD_VAR 0 1
15184: PUSH
15185: LD_VAR 0 7
15189: ARRAY
15190: PPUSH
15191: CALL_OW 1
15195: ST_TO_ADDR
// end ;
15196: GO 15109
15198: POP
15199: POP
// array := tmp ;
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_VAR 0 10
15209: ST_TO_ADDR
// end ;
15210: GO 15091
15212: POP
15213: POP
// result := array ;
15214: LD_ADDR_VAR 0 5
15218: PUSH
15219: LD_VAR 0 1
15223: ST_TO_ADDR
// end ;
15224: LD_VAR 0 5
15228: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15229: LD_INT 0
15231: PPUSH
15232: PPUSH
// result := 0 ;
15233: LD_ADDR_VAR 0 3
15237: PUSH
15238: LD_INT 0
15240: ST_TO_ADDR
// if not array or not value in array then
15241: LD_VAR 0 1
15245: NOT
15246: IFTRUE 15261
15248: PUSH
15249: LD_VAR 0 2
15253: PUSH
15254: LD_VAR 0 1
15258: IN
15259: NOT
15260: OR
15261: IFFALSE 15265
// exit ;
15263: GO 15319
// for i = 1 to array do
15265: LD_ADDR_VAR 0 4
15269: PUSH
15270: DOUBLE
15271: LD_INT 1
15273: DEC
15274: ST_TO_ADDR
15275: LD_VAR 0 1
15279: PUSH
15280: FOR_TO
15281: IFFALSE 15317
// if value = array [ i ] then
15283: LD_VAR 0 2
15287: PUSH
15288: LD_VAR 0 1
15292: PUSH
15293: LD_VAR 0 4
15297: ARRAY
15298: EQUAL
15299: IFFALSE 15315
// begin result := i ;
15301: LD_ADDR_VAR 0 3
15305: PUSH
15306: LD_VAR 0 4
15310: ST_TO_ADDR
// exit ;
15311: POP
15312: POP
15313: GO 15319
// end ;
15315: GO 15280
15317: POP
15318: POP
// end ;
15319: LD_VAR 0 3
15323: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15324: LD_INT 0
15326: PPUSH
// vc_chassis := chassis ;
15327: LD_ADDR_OWVAR 37
15331: PUSH
15332: LD_VAR 0 1
15336: ST_TO_ADDR
// vc_engine := engine ;
15337: LD_ADDR_OWVAR 39
15341: PUSH
15342: LD_VAR 0 2
15346: ST_TO_ADDR
// vc_control := control ;
15347: LD_ADDR_OWVAR 38
15351: PUSH
15352: LD_VAR 0 3
15356: ST_TO_ADDR
// vc_weapon := weapon ;
15357: LD_ADDR_OWVAR 40
15361: PUSH
15362: LD_VAR 0 4
15366: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15367: LD_ADDR_OWVAR 41
15371: PUSH
15372: LD_VAR 0 5
15376: ST_TO_ADDR
// end ;
15377: LD_VAR 0 6
15381: RET
// export function WantPlant ( unit ) ; var task ; begin
15382: LD_INT 0
15384: PPUSH
15385: PPUSH
// result := false ;
15386: LD_ADDR_VAR 0 2
15390: PUSH
15391: LD_INT 0
15393: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15394: LD_ADDR_VAR 0 3
15398: PUSH
15399: LD_VAR 0 1
15403: PPUSH
15404: CALL_OW 437
15408: ST_TO_ADDR
// if task then
15409: LD_VAR 0 3
15413: IFFALSE 15441
// if task [ 1 ] [ 1 ] = p then
15415: LD_VAR 0 3
15419: PUSH
15420: LD_INT 1
15422: ARRAY
15423: PUSH
15424: LD_INT 1
15426: ARRAY
15427: PUSH
15428: LD_STRING p
15430: EQUAL
15431: IFFALSE 15441
// result := true ;
15433: LD_ADDR_VAR 0 2
15437: PUSH
15438: LD_INT 1
15440: ST_TO_ADDR
// end ;
15441: LD_VAR 0 2
15445: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15446: LD_INT 0
15448: PPUSH
15449: PPUSH
15450: PPUSH
15451: PPUSH
// if pos < 1 then
15452: LD_VAR 0 2
15456: PUSH
15457: LD_INT 1
15459: LESS
15460: IFFALSE 15464
// exit ;
15462: GO 15767
// if pos = 1 then
15464: LD_VAR 0 2
15468: PUSH
15469: LD_INT 1
15471: EQUAL
15472: IFFALSE 15505
// result := Replace ( arr , pos [ 1 ] , value ) else
15474: LD_ADDR_VAR 0 4
15478: PUSH
15479: LD_VAR 0 1
15483: PPUSH
15484: LD_VAR 0 2
15488: PUSH
15489: LD_INT 1
15491: ARRAY
15492: PPUSH
15493: LD_VAR 0 3
15497: PPUSH
15498: CALL_OW 1
15502: ST_TO_ADDR
15503: GO 15767
// begin tmp := arr ;
15505: LD_ADDR_VAR 0 6
15509: PUSH
15510: LD_VAR 0 1
15514: ST_TO_ADDR
// s_arr := [ tmp ] ;
15515: LD_ADDR_VAR 0 7
15519: PUSH
15520: LD_VAR 0 6
15524: PUSH
15525: EMPTY
15526: LIST
15527: ST_TO_ADDR
// for i = 1 to pos - 1 do
15528: LD_ADDR_VAR 0 5
15532: PUSH
15533: DOUBLE
15534: LD_INT 1
15536: DEC
15537: ST_TO_ADDR
15538: LD_VAR 0 2
15542: PUSH
15543: LD_INT 1
15545: MINUS
15546: PUSH
15547: FOR_TO
15548: IFFALSE 15593
// begin tmp := tmp [ pos [ i ] ] ;
15550: LD_ADDR_VAR 0 6
15554: PUSH
15555: LD_VAR 0 6
15559: PUSH
15560: LD_VAR 0 2
15564: PUSH
15565: LD_VAR 0 5
15569: ARRAY
15570: ARRAY
15571: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15572: LD_ADDR_VAR 0 7
15576: PUSH
15577: LD_VAR 0 7
15581: PUSH
15582: LD_VAR 0 6
15586: PUSH
15587: EMPTY
15588: LIST
15589: ADD
15590: ST_TO_ADDR
// end ;
15591: GO 15547
15593: POP
15594: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15595: LD_ADDR_VAR 0 6
15599: PUSH
15600: LD_VAR 0 6
15604: PPUSH
15605: LD_VAR 0 2
15609: PUSH
15610: LD_VAR 0 2
15614: ARRAY
15615: PPUSH
15616: LD_VAR 0 3
15620: PPUSH
15621: CALL_OW 1
15625: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15626: LD_ADDR_VAR 0 7
15630: PUSH
15631: LD_VAR 0 7
15635: PPUSH
15636: LD_VAR 0 7
15640: PPUSH
15641: LD_VAR 0 6
15645: PPUSH
15646: CALL_OW 1
15650: ST_TO_ADDR
// for i = s_arr downto 2 do
15651: LD_ADDR_VAR 0 5
15655: PUSH
15656: DOUBLE
15657: LD_VAR 0 7
15661: INC
15662: ST_TO_ADDR
15663: LD_INT 2
15665: PUSH
15666: FOR_DOWNTO
15667: IFFALSE 15751
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15669: LD_ADDR_VAR 0 6
15673: PUSH
15674: LD_VAR 0 7
15678: PUSH
15679: LD_VAR 0 5
15683: PUSH
15684: LD_INT 1
15686: MINUS
15687: ARRAY
15688: PPUSH
15689: LD_VAR 0 2
15693: PUSH
15694: LD_VAR 0 5
15698: PUSH
15699: LD_INT 1
15701: MINUS
15702: ARRAY
15703: PPUSH
15704: LD_VAR 0 7
15708: PUSH
15709: LD_VAR 0 5
15713: ARRAY
15714: PPUSH
15715: CALL_OW 1
15719: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15720: LD_ADDR_VAR 0 7
15724: PUSH
15725: LD_VAR 0 7
15729: PPUSH
15730: LD_VAR 0 5
15734: PUSH
15735: LD_INT 1
15737: MINUS
15738: PPUSH
15739: LD_VAR 0 6
15743: PPUSH
15744: CALL_OW 1
15748: ST_TO_ADDR
// end ;
15749: GO 15666
15751: POP
15752: POP
// result := s_arr [ 1 ] ;
15753: LD_ADDR_VAR 0 4
15757: PUSH
15758: LD_VAR 0 7
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: ST_TO_ADDR
// end ; end ;
15767: LD_VAR 0 4
15771: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15772: LD_INT 0
15774: PPUSH
15775: PPUSH
// if not list then
15776: LD_VAR 0 1
15780: NOT
15781: IFFALSE 15785
// exit ;
15783: GO 15876
// i := list [ pos1 ] ;
15785: LD_ADDR_VAR 0 5
15789: PUSH
15790: LD_VAR 0 1
15794: PUSH
15795: LD_VAR 0 2
15799: ARRAY
15800: ST_TO_ADDR
// if not i then
15801: LD_VAR 0 5
15805: NOT
15806: IFFALSE 15810
// exit ;
15808: GO 15876
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15810: LD_ADDR_VAR 0 1
15814: PUSH
15815: LD_VAR 0 1
15819: PPUSH
15820: LD_VAR 0 2
15824: PPUSH
15825: LD_VAR 0 1
15829: PUSH
15830: LD_VAR 0 3
15834: ARRAY
15835: PPUSH
15836: CALL_OW 1
15840: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15841: LD_ADDR_VAR 0 1
15845: PUSH
15846: LD_VAR 0 1
15850: PPUSH
15851: LD_VAR 0 3
15855: PPUSH
15856: LD_VAR 0 5
15860: PPUSH
15861: CALL_OW 1
15865: ST_TO_ADDR
// result := list ;
15866: LD_ADDR_VAR 0 4
15870: PUSH
15871: LD_VAR 0 1
15875: ST_TO_ADDR
// end ;
15876: LD_VAR 0 4
15880: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15881: LD_INT 0
15883: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15884: LD_ADDR_VAR 0 5
15888: PUSH
15889: LD_VAR 0 1
15893: PPUSH
15894: CALL_OW 250
15898: PPUSH
15899: LD_VAR 0 1
15903: PPUSH
15904: CALL_OW 251
15908: PPUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: LD_VAR 0 3
15918: PPUSH
15919: LD_VAR 0 4
15923: PPUSH
15924: CALL 16306 0 5
15928: ST_TO_ADDR
// end ;
15929: LD_VAR 0 5
15933: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
15934: LD_INT 0
15936: PPUSH
15937: PPUSH
15938: PPUSH
15939: PPUSH
// if not list or not unit then
15940: LD_VAR 0 2
15944: NOT
15945: IFTRUE 15954
15947: PUSH
15948: LD_VAR 0 1
15952: NOT
15953: OR
15954: IFFALSE 15958
// exit ;
15956: GO 16301
// result := [ ] ;
15958: LD_ADDR_VAR 0 5
15962: PUSH
15963: EMPTY
15964: ST_TO_ADDR
// for i in list do
15965: LD_ADDR_VAR 0 6
15969: PUSH
15970: LD_VAR 0 2
15974: PUSH
15975: FOR_IN
15976: IFFALSE 16194
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
15978: LD_ADDR_VAR 0 8
15982: PUSH
15983: LD_VAR 0 1
15987: PPUSH
15988: LD_VAR 0 6
15992: PUSH
15993: LD_INT 1
15995: ARRAY
15996: PPUSH
15997: LD_VAR 0 6
16001: PUSH
16002: LD_INT 2
16004: ARRAY
16005: PPUSH
16006: CALL_OW 297
16010: ST_TO_ADDR
// if not Count ( result ) then
16011: LD_VAR 0 5
16015: PPUSH
16016: CALL 12528 0 1
16020: NOT
16021: IFFALSE 16054
// begin result := Join ( result , [ i , tmp ] ) ;
16023: LD_ADDR_VAR 0 5
16027: PUSH
16028: LD_VAR 0 5
16032: PPUSH
16033: LD_VAR 0 6
16037: PUSH
16038: LD_VAR 0 8
16042: PUSH
16043: EMPTY
16044: LIST
16045: LIST
16046: PPUSH
16047: CALL 48504 0 2
16051: ST_TO_ADDR
// continue ;
16052: GO 15975
// end ; if result [ result ] [ 2 ] <= tmp then
16054: LD_VAR 0 5
16058: PUSH
16059: LD_VAR 0 5
16063: ARRAY
16064: PUSH
16065: LD_INT 2
16067: ARRAY
16068: PUSH
16069: LD_VAR 0 8
16073: LESSEQUAL
16074: IFFALSE 16107
// result := Join ( result , [ i , tmp ] ) else
16076: LD_ADDR_VAR 0 5
16080: PUSH
16081: LD_VAR 0 5
16085: PPUSH
16086: LD_VAR 0 6
16090: PUSH
16091: LD_VAR 0 8
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PPUSH
16100: CALL 48504 0 2
16104: ST_TO_ADDR
16105: GO 16192
// begin for j := 1 to Count ( result ) do
16107: LD_ADDR_VAR 0 7
16111: PUSH
16112: DOUBLE
16113: LD_INT 1
16115: DEC
16116: ST_TO_ADDR
16117: LD_VAR 0 5
16121: PPUSH
16122: CALL 12528 0 1
16126: PUSH
16127: FOR_TO
16128: IFFALSE 16190
// begin if tmp < result [ j ] [ 2 ] then
16130: LD_VAR 0 8
16134: PUSH
16135: LD_VAR 0 5
16139: PUSH
16140: LD_VAR 0 7
16144: ARRAY
16145: PUSH
16146: LD_INT 2
16148: ARRAY
16149: LESS
16150: IFFALSE 16188
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16152: LD_ADDR_VAR 0 5
16156: PUSH
16157: LD_VAR 0 5
16161: PPUSH
16162: LD_VAR 0 7
16166: PPUSH
16167: LD_VAR 0 6
16171: PUSH
16172: LD_VAR 0 8
16176: PUSH
16177: EMPTY
16178: LIST
16179: LIST
16180: PPUSH
16181: CALL_OW 2
16185: ST_TO_ADDR
// break ;
16186: GO 16190
// end ; end ;
16188: GO 16127
16190: POP
16191: POP
// end ; end ;
16192: GO 15975
16194: POP
16195: POP
// if result and not asc then
16196: LD_VAR 0 5
16200: IFFALSE 16209
16202: PUSH
16203: LD_VAR 0 3
16207: NOT
16208: AND
16209: IFFALSE 16226
// result := ReverseArray ( result ) ;
16211: LD_ADDR_VAR 0 5
16215: PUSH
16216: LD_VAR 0 5
16220: PPUSH
16221: CALL 43584 0 1
16225: ST_TO_ADDR
// tmp := [ ] ;
16226: LD_ADDR_VAR 0 8
16230: PUSH
16231: EMPTY
16232: ST_TO_ADDR
// if mode then
16233: LD_VAR 0 4
16237: IFFALSE 16301
// begin for i := 1 to result do
16239: LD_ADDR_VAR 0 6
16243: PUSH
16244: DOUBLE
16245: LD_INT 1
16247: DEC
16248: ST_TO_ADDR
16249: LD_VAR 0 5
16253: PUSH
16254: FOR_TO
16255: IFFALSE 16289
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16257: LD_ADDR_VAR 0 8
16261: PUSH
16262: LD_VAR 0 8
16266: PPUSH
16267: LD_VAR 0 5
16271: PUSH
16272: LD_VAR 0 6
16276: ARRAY
16277: PUSH
16278: LD_INT 1
16280: ARRAY
16281: PPUSH
16282: CALL 48504 0 2
16286: ST_TO_ADDR
16287: GO 16254
16289: POP
16290: POP
// result := tmp ;
16291: LD_ADDR_VAR 0 5
16295: PUSH
16296: LD_VAR 0 8
16300: ST_TO_ADDR
// end ; end ;
16301: LD_VAR 0 5
16305: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16306: LD_INT 0
16308: PPUSH
16309: PPUSH
16310: PPUSH
16311: PPUSH
// if not list then
16312: LD_VAR 0 3
16316: NOT
16317: IFFALSE 16321
// exit ;
16319: GO 16711
// result := [ ] ;
16321: LD_ADDR_VAR 0 6
16325: PUSH
16326: EMPTY
16327: ST_TO_ADDR
// for i in list do
16328: LD_ADDR_VAR 0 7
16332: PUSH
16333: LD_VAR 0 3
16337: PUSH
16338: FOR_IN
16339: IFFALSE 16541
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16341: LD_ADDR_VAR 0 9
16345: PUSH
16346: LD_VAR 0 7
16350: PPUSH
16351: LD_VAR 0 1
16355: PPUSH
16356: LD_VAR 0 2
16360: PPUSH
16361: CALL_OW 297
16365: ST_TO_ADDR
// if not result then
16366: LD_VAR 0 6
16370: NOT
16371: IFFALSE 16397
// result := [ [ i , tmp ] ] else
16373: LD_ADDR_VAR 0 6
16377: PUSH
16378: LD_VAR 0 7
16382: PUSH
16383: LD_VAR 0 9
16387: PUSH
16388: EMPTY
16389: LIST
16390: LIST
16391: PUSH
16392: EMPTY
16393: LIST
16394: ST_TO_ADDR
16395: GO 16539
// begin if result [ result ] [ 2 ] <= tmp then
16397: LD_VAR 0 6
16401: PUSH
16402: LD_VAR 0 6
16406: ARRAY
16407: PUSH
16408: LD_INT 2
16410: ARRAY
16411: PUSH
16412: LD_VAR 0 9
16416: LESSEQUAL
16417: IFFALSE 16459
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16419: LD_ADDR_VAR 0 6
16423: PUSH
16424: LD_VAR 0 6
16428: PPUSH
16429: LD_VAR 0 6
16433: PUSH
16434: LD_INT 1
16436: PLUS
16437: PPUSH
16438: LD_VAR 0 7
16442: PUSH
16443: LD_VAR 0 9
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PPUSH
16452: CALL_OW 2
16456: ST_TO_ADDR
16457: GO 16539
// for j := 1 to result do
16459: LD_ADDR_VAR 0 8
16463: PUSH
16464: DOUBLE
16465: LD_INT 1
16467: DEC
16468: ST_TO_ADDR
16469: LD_VAR 0 6
16473: PUSH
16474: FOR_TO
16475: IFFALSE 16537
// begin if tmp < result [ j ] [ 2 ] then
16477: LD_VAR 0 9
16481: PUSH
16482: LD_VAR 0 6
16486: PUSH
16487: LD_VAR 0 8
16491: ARRAY
16492: PUSH
16493: LD_INT 2
16495: ARRAY
16496: LESS
16497: IFFALSE 16535
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16499: LD_ADDR_VAR 0 6
16503: PUSH
16504: LD_VAR 0 6
16508: PPUSH
16509: LD_VAR 0 8
16513: PPUSH
16514: LD_VAR 0 7
16518: PUSH
16519: LD_VAR 0 9
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PPUSH
16528: CALL_OW 2
16532: ST_TO_ADDR
// break ;
16533: GO 16537
// end ; end ;
16535: GO 16474
16537: POP
16538: POP
// end ; end ;
16539: GO 16338
16541: POP
16542: POP
// if result and not asc then
16543: LD_VAR 0 6
16547: IFFALSE 16556
16549: PUSH
16550: LD_VAR 0 4
16554: NOT
16555: AND
16556: IFFALSE 16631
// begin tmp := result ;
16558: LD_ADDR_VAR 0 9
16562: PUSH
16563: LD_VAR 0 6
16567: ST_TO_ADDR
// for i = tmp downto 1 do
16568: LD_ADDR_VAR 0 7
16572: PUSH
16573: DOUBLE
16574: LD_VAR 0 9
16578: INC
16579: ST_TO_ADDR
16580: LD_INT 1
16582: PUSH
16583: FOR_DOWNTO
16584: IFFALSE 16629
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16586: LD_ADDR_VAR 0 6
16590: PUSH
16591: LD_VAR 0 6
16595: PPUSH
16596: LD_VAR 0 9
16600: PUSH
16601: LD_VAR 0 7
16605: MINUS
16606: PUSH
16607: LD_INT 1
16609: PLUS
16610: PPUSH
16611: LD_VAR 0 9
16615: PUSH
16616: LD_VAR 0 7
16620: ARRAY
16621: PPUSH
16622: CALL_OW 1
16626: ST_TO_ADDR
16627: GO 16583
16629: POP
16630: POP
// end ; tmp := [ ] ;
16631: LD_ADDR_VAR 0 9
16635: PUSH
16636: EMPTY
16637: ST_TO_ADDR
// if mode then
16638: LD_VAR 0 5
16642: IFFALSE 16711
// begin for i = 1 to result do
16644: LD_ADDR_VAR 0 7
16648: PUSH
16649: DOUBLE
16650: LD_INT 1
16652: DEC
16653: ST_TO_ADDR
16654: LD_VAR 0 6
16658: PUSH
16659: FOR_TO
16660: IFFALSE 16699
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16662: LD_ADDR_VAR 0 9
16666: PUSH
16667: LD_VAR 0 9
16671: PPUSH
16672: LD_VAR 0 7
16676: PPUSH
16677: LD_VAR 0 6
16681: PUSH
16682: LD_VAR 0 7
16686: ARRAY
16687: PUSH
16688: LD_INT 1
16690: ARRAY
16691: PPUSH
16692: CALL_OW 1
16696: ST_TO_ADDR
16697: GO 16659
16699: POP
16700: POP
// result := tmp ;
16701: LD_ADDR_VAR 0 6
16705: PUSH
16706: LD_VAR 0 9
16710: ST_TO_ADDR
// end ; end ;
16711: LD_VAR 0 6
16715: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16716: LD_INT 0
16718: PPUSH
16719: PPUSH
16720: PPUSH
16721: PPUSH
16722: PPUSH
16723: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16724: LD_ADDR_VAR 0 5
16728: PUSH
16729: LD_INT 0
16731: PUSH
16732: LD_INT 0
16734: PUSH
16735: LD_INT 0
16737: PUSH
16738: EMPTY
16739: PUSH
16740: EMPTY
16741: LIST
16742: LIST
16743: LIST
16744: LIST
16745: ST_TO_ADDR
// if not x or not y then
16746: LD_VAR 0 2
16750: NOT
16751: IFTRUE 16760
16753: PUSH
16754: LD_VAR 0 3
16758: NOT
16759: OR
16760: IFFALSE 16764
// exit ;
16762: GO 18420
// if not range then
16764: LD_VAR 0 4
16768: NOT
16769: IFFALSE 16779
// range := 10 ;
16771: LD_ADDR_VAR 0 4
16775: PUSH
16776: LD_INT 10
16778: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16779: LD_ADDR_VAR 0 8
16783: PUSH
16784: LD_INT 81
16786: PUSH
16787: LD_VAR 0 1
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 92
16798: PUSH
16799: LD_VAR 0 2
16803: PUSH
16804: LD_VAR 0 3
16808: PUSH
16809: LD_VAR 0 4
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: LD_INT 21
16825: PUSH
16826: LD_INT 3
16828: PUSH
16829: EMPTY
16830: LIST
16831: LIST
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: PUSH
16837: EMPTY
16838: LIST
16839: LIST
16840: LIST
16841: PPUSH
16842: CALL_OW 69
16846: ST_TO_ADDR
// if not tmp then
16847: LD_VAR 0 8
16851: NOT
16852: IFFALSE 16856
// exit ;
16854: GO 18420
// for i in tmp do
16856: LD_ADDR_VAR 0 6
16860: PUSH
16861: LD_VAR 0 8
16865: PUSH
16866: FOR_IN
16867: IFFALSE 18395
// begin points := [ 0 , 0 , 0 ] ;
16869: LD_ADDR_VAR 0 9
16873: PUSH
16874: LD_INT 0
16876: PUSH
16877: LD_INT 0
16879: PUSH
16880: LD_INT 0
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: LIST
16887: ST_TO_ADDR
// bpoints := 1 ;
16888: LD_ADDR_VAR 0 10
16892: PUSH
16893: LD_INT 1
16895: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16896: LD_VAR 0 6
16900: PPUSH
16901: CALL_OW 247
16905: PUSH
16906: LD_INT 1
16908: DOUBLE
16909: EQUAL
16910: IFTRUE 16914
16912: GO 17496
16914: POP
// begin if GetClass ( i ) = 1 then
16915: LD_VAR 0 6
16919: PPUSH
16920: CALL_OW 257
16924: PUSH
16925: LD_INT 1
16927: EQUAL
16928: IFFALSE 16949
// points := [ 10 , 5 , 3 ] ;
16930: LD_ADDR_VAR 0 9
16934: PUSH
16935: LD_INT 10
16937: PUSH
16938: LD_INT 5
16940: PUSH
16941: LD_INT 3
16943: PUSH
16944: EMPTY
16945: LIST
16946: LIST
16947: LIST
16948: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
16949: LD_VAR 0 6
16953: PPUSH
16954: CALL_OW 257
16958: PUSH
16959: LD_INT 2
16961: PUSH
16962: LD_INT 3
16964: PUSH
16965: LD_INT 4
16967: PUSH
16968: EMPTY
16969: LIST
16970: LIST
16971: LIST
16972: IN
16973: IFFALSE 16994
// points := [ 3 , 2 , 1 ] ;
16975: LD_ADDR_VAR 0 9
16979: PUSH
16980: LD_INT 3
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: LD_INT 1
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: ST_TO_ADDR
// if GetClass ( i ) = 5 then
16994: LD_VAR 0 6
16998: PPUSH
16999: CALL_OW 257
17003: PUSH
17004: LD_INT 5
17006: EQUAL
17007: IFFALSE 17028
// points := [ 130 , 5 , 2 ] ;
17009: LD_ADDR_VAR 0 9
17013: PUSH
17014: LD_INT 130
17016: PUSH
17017: LD_INT 5
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17028: LD_VAR 0 6
17032: PPUSH
17033: CALL_OW 257
17037: PUSH
17038: LD_INT 8
17040: EQUAL
17041: IFFALSE 17062
// points := [ 35 , 35 , 30 ] ;
17043: LD_ADDR_VAR 0 9
17047: PUSH
17048: LD_INT 35
17050: PUSH
17051: LD_INT 35
17053: PUSH
17054: LD_INT 30
17056: PUSH
17057: EMPTY
17058: LIST
17059: LIST
17060: LIST
17061: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17062: LD_VAR 0 6
17066: PPUSH
17067: CALL_OW 257
17071: PUSH
17072: LD_INT 9
17074: EQUAL
17075: IFFALSE 17096
// points := [ 20 , 55 , 40 ] ;
17077: LD_ADDR_VAR 0 9
17081: PUSH
17082: LD_INT 20
17084: PUSH
17085: LD_INT 55
17087: PUSH
17088: LD_INT 40
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: LIST
17095: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17096: LD_VAR 0 6
17100: PPUSH
17101: CALL_OW 257
17105: PUSH
17106: LD_INT 12
17108: PUSH
17109: LD_INT 16
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: IN
17116: IFFALSE 17137
// points := [ 5 , 3 , 2 ] ;
17118: LD_ADDR_VAR 0 9
17122: PUSH
17123: LD_INT 5
17125: PUSH
17126: LD_INT 3
17128: PUSH
17129: LD_INT 2
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17137: LD_VAR 0 6
17141: PPUSH
17142: CALL_OW 257
17146: PUSH
17147: LD_INT 17
17149: EQUAL
17150: IFFALSE 17171
// points := [ 100 , 50 , 75 ] ;
17152: LD_ADDR_VAR 0 9
17156: PUSH
17157: LD_INT 100
17159: PUSH
17160: LD_INT 50
17162: PUSH
17163: LD_INT 75
17165: PUSH
17166: EMPTY
17167: LIST
17168: LIST
17169: LIST
17170: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17171: LD_VAR 0 6
17175: PPUSH
17176: CALL_OW 257
17180: PUSH
17181: LD_INT 15
17183: EQUAL
17184: IFFALSE 17205
// points := [ 10 , 5 , 3 ] ;
17186: LD_ADDR_VAR 0 9
17190: PUSH
17191: LD_INT 10
17193: PUSH
17194: LD_INT 5
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: LIST
17204: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17205: LD_VAR 0 6
17209: PPUSH
17210: CALL_OW 257
17214: PUSH
17215: LD_INT 14
17217: EQUAL
17218: IFFALSE 17239
// points := [ 10 , 0 , 0 ] ;
17220: LD_ADDR_VAR 0 9
17224: PUSH
17225: LD_INT 10
17227: PUSH
17228: LD_INT 0
17230: PUSH
17231: LD_INT 0
17233: PUSH
17234: EMPTY
17235: LIST
17236: LIST
17237: LIST
17238: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17239: LD_VAR 0 6
17243: PPUSH
17244: CALL_OW 257
17248: PUSH
17249: LD_INT 11
17251: EQUAL
17252: IFFALSE 17273
// points := [ 30 , 10 , 5 ] ;
17254: LD_ADDR_VAR 0 9
17258: PUSH
17259: LD_INT 30
17261: PUSH
17262: LD_INT 10
17264: PUSH
17265: LD_INT 5
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: LIST
17272: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17273: LD_VAR 0 1
17277: PPUSH
17278: LD_INT 5
17280: PPUSH
17281: CALL_OW 321
17285: PUSH
17286: LD_INT 2
17288: EQUAL
17289: IFFALSE 17306
// bpoints := bpoints * 1.8 ;
17291: LD_ADDR_VAR 0 10
17295: PUSH
17296: LD_VAR 0 10
17300: PUSH
17301: LD_REAL  1.80000000000000E+0000
17304: MUL
17305: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17306: LD_VAR 0 6
17310: PPUSH
17311: CALL_OW 257
17315: PUSH
17316: LD_INT 1
17318: PUSH
17319: LD_INT 2
17321: PUSH
17322: LD_INT 3
17324: PUSH
17325: LD_INT 4
17327: PUSH
17328: EMPTY
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: IN
17334: IFFALSE 17354
17336: PUSH
17337: LD_VAR 0 1
17341: PPUSH
17342: LD_INT 51
17344: PPUSH
17345: CALL_OW 321
17349: PUSH
17350: LD_INT 2
17352: EQUAL
17353: AND
17354: IFFALSE 17371
// bpoints := bpoints * 1.2 ;
17356: LD_ADDR_VAR 0 10
17360: PUSH
17361: LD_VAR 0 10
17365: PUSH
17366: LD_REAL  1.20000000000000E+0000
17369: MUL
17370: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17371: LD_VAR 0 6
17375: PPUSH
17376: CALL_OW 257
17380: PUSH
17381: LD_INT 5
17383: PUSH
17384: LD_INT 7
17386: PUSH
17387: LD_INT 9
17389: PUSH
17390: EMPTY
17391: LIST
17392: LIST
17393: LIST
17394: IN
17395: IFFALSE 17415
17397: PUSH
17398: LD_VAR 0 1
17402: PPUSH
17403: LD_INT 52
17405: PPUSH
17406: CALL_OW 321
17410: PUSH
17411: LD_INT 2
17413: EQUAL
17414: AND
17415: IFFALSE 17432
// bpoints := bpoints * 1.5 ;
17417: LD_ADDR_VAR 0 10
17421: PUSH
17422: LD_VAR 0 10
17426: PUSH
17427: LD_REAL  1.50000000000000E+0000
17430: MUL
17431: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17432: LD_VAR 0 1
17436: PPUSH
17437: LD_INT 66
17439: PPUSH
17440: CALL_OW 321
17444: PUSH
17445: LD_INT 2
17447: EQUAL
17448: IFFALSE 17465
// bpoints := bpoints * 1.1 ;
17450: LD_ADDR_VAR 0 10
17454: PUSH
17455: LD_VAR 0 10
17459: PUSH
17460: LD_REAL  1.10000000000000E+0000
17463: MUL
17464: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17465: LD_ADDR_VAR 0 10
17469: PUSH
17470: LD_VAR 0 10
17474: PUSH
17475: LD_VAR 0 6
17479: PPUSH
17480: LD_INT 1
17482: PPUSH
17483: CALL_OW 259
17487: PUSH
17488: LD_REAL  1.15000000000000E+0000
17491: MUL
17492: MUL
17493: ST_TO_ADDR
// end ; unit_vehicle :
17494: GO 18324
17496: LD_INT 2
17498: DOUBLE
17499: EQUAL
17500: IFTRUE 17504
17502: GO 18312
17504: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17505: LD_VAR 0 6
17509: PPUSH
17510: CALL_OW 264
17514: PUSH
17515: LD_INT 2
17517: PUSH
17518: LD_INT 42
17520: PUSH
17521: LD_INT 24
17523: PUSH
17524: EMPTY
17525: LIST
17526: LIST
17527: LIST
17528: IN
17529: IFFALSE 17550
// points := [ 25 , 5 , 3 ] ;
17531: LD_ADDR_VAR 0 9
17535: PUSH
17536: LD_INT 25
17538: PUSH
17539: LD_INT 5
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: EMPTY
17546: LIST
17547: LIST
17548: LIST
17549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17550: LD_VAR 0 6
17554: PPUSH
17555: CALL_OW 264
17559: PUSH
17560: LD_INT 4
17562: PUSH
17563: LD_INT 43
17565: PUSH
17566: LD_INT 25
17568: PUSH
17569: EMPTY
17570: LIST
17571: LIST
17572: LIST
17573: IN
17574: IFFALSE 17595
// points := [ 40 , 15 , 5 ] ;
17576: LD_ADDR_VAR 0 9
17580: PUSH
17581: LD_INT 40
17583: PUSH
17584: LD_INT 15
17586: PUSH
17587: LD_INT 5
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17595: LD_VAR 0 6
17599: PPUSH
17600: CALL_OW 264
17604: PUSH
17605: LD_INT 3
17607: PUSH
17608: LD_INT 23
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: IN
17615: IFFALSE 17636
// points := [ 7 , 25 , 8 ] ;
17617: LD_ADDR_VAR 0 9
17621: PUSH
17622: LD_INT 7
17624: PUSH
17625: LD_INT 25
17627: PUSH
17628: LD_INT 8
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: LIST
17635: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17636: LD_VAR 0 6
17640: PPUSH
17641: CALL_OW 264
17645: PUSH
17646: LD_INT 5
17648: PUSH
17649: LD_INT 27
17651: PUSH
17652: LD_INT 44
17654: PUSH
17655: EMPTY
17656: LIST
17657: LIST
17658: LIST
17659: IN
17660: IFFALSE 17681
// points := [ 14 , 50 , 16 ] ;
17662: LD_ADDR_VAR 0 9
17666: PUSH
17667: LD_INT 14
17669: PUSH
17670: LD_INT 50
17672: PUSH
17673: LD_INT 16
17675: PUSH
17676: EMPTY
17677: LIST
17678: LIST
17679: LIST
17680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17681: LD_VAR 0 6
17685: PPUSH
17686: CALL_OW 264
17690: PUSH
17691: LD_INT 6
17693: PUSH
17694: LD_INT 46
17696: PUSH
17697: EMPTY
17698: LIST
17699: LIST
17700: IN
17701: IFFALSE 17722
// points := [ 32 , 120 , 70 ] ;
17703: LD_ADDR_VAR 0 9
17707: PUSH
17708: LD_INT 32
17710: PUSH
17711: LD_INT 120
17713: PUSH
17714: LD_INT 70
17716: PUSH
17717: EMPTY
17718: LIST
17719: LIST
17720: LIST
17721: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17722: LD_VAR 0 6
17726: PPUSH
17727: CALL_OW 264
17731: PUSH
17732: LD_INT 7
17734: PUSH
17735: LD_INT 28
17737: PUSH
17738: LD_INT 45
17740: PUSH
17741: LD_INT 92
17743: PUSH
17744: EMPTY
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: IN
17750: IFFALSE 17771
// points := [ 35 , 20 , 45 ] ;
17752: LD_ADDR_VAR 0 9
17756: PUSH
17757: LD_INT 35
17759: PUSH
17760: LD_INT 20
17762: PUSH
17763: LD_INT 45
17765: PUSH
17766: EMPTY
17767: LIST
17768: LIST
17769: LIST
17770: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17771: LD_VAR 0 6
17775: PPUSH
17776: CALL_OW 264
17780: PUSH
17781: LD_INT 47
17783: PUSH
17784: EMPTY
17785: LIST
17786: IN
17787: IFFALSE 17808
// points := [ 67 , 45 , 75 ] ;
17789: LD_ADDR_VAR 0 9
17793: PUSH
17794: LD_INT 67
17796: PUSH
17797: LD_INT 45
17799: PUSH
17800: LD_INT 75
17802: PUSH
17803: EMPTY
17804: LIST
17805: LIST
17806: LIST
17807: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17808: LD_VAR 0 6
17812: PPUSH
17813: CALL_OW 264
17817: PUSH
17818: LD_INT 26
17820: PUSH
17821: EMPTY
17822: LIST
17823: IN
17824: IFFALSE 17845
// points := [ 120 , 30 , 80 ] ;
17826: LD_ADDR_VAR 0 9
17830: PUSH
17831: LD_INT 120
17833: PUSH
17834: LD_INT 30
17836: PUSH
17837: LD_INT 80
17839: PUSH
17840: EMPTY
17841: LIST
17842: LIST
17843: LIST
17844: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17845: LD_VAR 0 6
17849: PPUSH
17850: CALL_OW 264
17854: PUSH
17855: LD_INT 22
17857: PUSH
17858: EMPTY
17859: LIST
17860: IN
17861: IFFALSE 17882
// points := [ 40 , 1 , 1 ] ;
17863: LD_ADDR_VAR 0 9
17867: PUSH
17868: LD_INT 40
17870: PUSH
17871: LD_INT 1
17873: PUSH
17874: LD_INT 1
17876: PUSH
17877: EMPTY
17878: LIST
17879: LIST
17880: LIST
17881: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17882: LD_VAR 0 6
17886: PPUSH
17887: CALL_OW 264
17891: PUSH
17892: LD_INT 29
17894: PUSH
17895: EMPTY
17896: LIST
17897: IN
17898: IFFALSE 17919
// points := [ 70 , 200 , 400 ] ;
17900: LD_ADDR_VAR 0 9
17904: PUSH
17905: LD_INT 70
17907: PUSH
17908: LD_INT 200
17910: PUSH
17911: LD_INT 400
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
17919: LD_VAR 0 6
17923: PPUSH
17924: CALL_OW 264
17928: PUSH
17929: LD_INT 14
17931: PUSH
17932: LD_INT 53
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: IN
17939: IFFALSE 17960
// points := [ 40 , 10 , 20 ] ;
17941: LD_ADDR_VAR 0 9
17945: PUSH
17946: LD_INT 40
17948: PUSH
17949: LD_INT 10
17951: PUSH
17952: LD_INT 20
17954: PUSH
17955: EMPTY
17956: LIST
17957: LIST
17958: LIST
17959: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
17960: LD_VAR 0 6
17964: PPUSH
17965: CALL_OW 264
17969: PUSH
17970: LD_INT 9
17972: PUSH
17973: EMPTY
17974: LIST
17975: IN
17976: IFFALSE 17997
// points := [ 5 , 70 , 20 ] ;
17978: LD_ADDR_VAR 0 9
17982: PUSH
17983: LD_INT 5
17985: PUSH
17986: LD_INT 70
17988: PUSH
17989: LD_INT 20
17991: PUSH
17992: EMPTY
17993: LIST
17994: LIST
17995: LIST
17996: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
17997: LD_VAR 0 6
18001: PPUSH
18002: CALL_OW 264
18006: PUSH
18007: LD_INT 10
18009: PUSH
18010: EMPTY
18011: LIST
18012: IN
18013: IFFALSE 18034
// points := [ 35 , 110 , 70 ] ;
18015: LD_ADDR_VAR 0 9
18019: PUSH
18020: LD_INT 35
18022: PUSH
18023: LD_INT 110
18025: PUSH
18026: LD_INT 70
18028: PUSH
18029: EMPTY
18030: LIST
18031: LIST
18032: LIST
18033: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18034: LD_VAR 0 6
18038: PPUSH
18039: CALL_OW 265
18043: PUSH
18044: LD_INT 25
18046: EQUAL
18047: IFFALSE 18068
// points := [ 80 , 65 , 100 ] ;
18049: LD_ADDR_VAR 0 9
18053: PUSH
18054: LD_INT 80
18056: PUSH
18057: LD_INT 65
18059: PUSH
18060: LD_INT 100
18062: PUSH
18063: EMPTY
18064: LIST
18065: LIST
18066: LIST
18067: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18068: LD_VAR 0 6
18072: PPUSH
18073: CALL_OW 263
18077: PUSH
18078: LD_INT 1
18080: EQUAL
18081: IFFALSE 18116
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18083: LD_ADDR_VAR 0 10
18087: PUSH
18088: LD_VAR 0 10
18092: PUSH
18093: LD_VAR 0 6
18097: PPUSH
18098: CALL_OW 311
18102: PPUSH
18103: LD_INT 3
18105: PPUSH
18106: CALL_OW 259
18110: PUSH
18111: LD_INT 4
18113: MUL
18114: MUL
18115: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18116: LD_VAR 0 6
18120: PPUSH
18121: CALL_OW 263
18125: PUSH
18126: LD_INT 2
18128: EQUAL
18129: IFFALSE 18180
// begin j := IsControledBy ( i ) ;
18131: LD_ADDR_VAR 0 7
18135: PUSH
18136: LD_VAR 0 6
18140: PPUSH
18141: CALL_OW 312
18145: ST_TO_ADDR
// if j then
18146: LD_VAR 0 7
18150: IFFALSE 18180
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18152: LD_ADDR_VAR 0 10
18156: PUSH
18157: LD_VAR 0 10
18161: PUSH
18162: LD_VAR 0 7
18166: PPUSH
18167: LD_INT 3
18169: PPUSH
18170: CALL_OW 259
18174: PUSH
18175: LD_INT 3
18177: MUL
18178: MUL
18179: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18180: LD_VAR 0 6
18184: PPUSH
18185: CALL_OW 264
18189: PUSH
18190: LD_INT 5
18192: PUSH
18193: LD_INT 6
18195: PUSH
18196: LD_INT 46
18198: PUSH
18199: LD_INT 44
18201: PUSH
18202: LD_INT 47
18204: PUSH
18205: LD_INT 45
18207: PUSH
18208: LD_INT 28
18210: PUSH
18211: LD_INT 7
18213: PUSH
18214: LD_INT 27
18216: PUSH
18217: LD_INT 29
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: LIST
18226: LIST
18227: LIST
18228: LIST
18229: LIST
18230: LIST
18231: IN
18232: IFFALSE 18252
18234: PUSH
18235: LD_VAR 0 1
18239: PPUSH
18240: LD_INT 52
18242: PPUSH
18243: CALL_OW 321
18247: PUSH
18248: LD_INT 2
18250: EQUAL
18251: AND
18252: IFFALSE 18269
// bpoints := bpoints * 1.2 ;
18254: LD_ADDR_VAR 0 10
18258: PUSH
18259: LD_VAR 0 10
18263: PUSH
18264: LD_REAL  1.20000000000000E+0000
18267: MUL
18268: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18269: LD_VAR 0 6
18273: PPUSH
18274: CALL_OW 264
18278: PUSH
18279: LD_INT 6
18281: PUSH
18282: LD_INT 46
18284: PUSH
18285: LD_INT 47
18287: PUSH
18288: EMPTY
18289: LIST
18290: LIST
18291: LIST
18292: IN
18293: IFFALSE 18310
// bpoints := bpoints * 1.2 ;
18295: LD_ADDR_VAR 0 10
18299: PUSH
18300: LD_VAR 0 10
18304: PUSH
18305: LD_REAL  1.20000000000000E+0000
18308: MUL
18309: ST_TO_ADDR
// end ; unit_building :
18310: GO 18324
18312: LD_INT 3
18314: DOUBLE
18315: EQUAL
18316: IFTRUE 18320
18318: GO 18323
18320: POP
// ; end ;
18321: GO 18324
18323: POP
// for j = 1 to 3 do
18324: LD_ADDR_VAR 0 7
18328: PUSH
18329: DOUBLE
18330: LD_INT 1
18332: DEC
18333: ST_TO_ADDR
18334: LD_INT 3
18336: PUSH
18337: FOR_TO
18338: IFFALSE 18391
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18340: LD_ADDR_VAR 0 5
18344: PUSH
18345: LD_VAR 0 5
18349: PPUSH
18350: LD_VAR 0 7
18354: PPUSH
18355: LD_VAR 0 5
18359: PUSH
18360: LD_VAR 0 7
18364: ARRAY
18365: PUSH
18366: LD_VAR 0 9
18370: PUSH
18371: LD_VAR 0 7
18375: ARRAY
18376: PUSH
18377: LD_VAR 0 10
18381: MUL
18382: PLUS
18383: PPUSH
18384: CALL_OW 1
18388: ST_TO_ADDR
18389: GO 18337
18391: POP
18392: POP
// end ;
18393: GO 16866
18395: POP
18396: POP
// result := Replace ( result , 4 , tmp ) ;
18397: LD_ADDR_VAR 0 5
18401: PUSH
18402: LD_VAR 0 5
18406: PPUSH
18407: LD_INT 4
18409: PPUSH
18410: LD_VAR 0 8
18414: PPUSH
18415: CALL_OW 1
18419: ST_TO_ADDR
// end ;
18420: LD_VAR 0 5
18424: RET
// export function DangerAtRange ( unit , range ) ; begin
18425: LD_INT 0
18427: PPUSH
// if not unit then
18428: LD_VAR 0 1
18432: NOT
18433: IFFALSE 18437
// exit ;
18435: GO 18482
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18437: LD_ADDR_VAR 0 3
18441: PUSH
18442: LD_VAR 0 1
18446: PPUSH
18447: CALL_OW 255
18451: PPUSH
18452: LD_VAR 0 1
18456: PPUSH
18457: CALL_OW 250
18461: PPUSH
18462: LD_VAR 0 1
18466: PPUSH
18467: CALL_OW 251
18471: PPUSH
18472: LD_VAR 0 2
18476: PPUSH
18477: CALL 16716 0 4
18481: ST_TO_ADDR
// end ;
18482: LD_VAR 0 3
18486: RET
// export function DangerInArea ( side , area ) ; begin
18487: LD_INT 0
18489: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18490: LD_ADDR_VAR 0 3
18494: PUSH
18495: LD_VAR 0 2
18499: PPUSH
18500: LD_INT 81
18502: PUSH
18503: LD_VAR 0 1
18507: PUSH
18508: EMPTY
18509: LIST
18510: LIST
18511: PPUSH
18512: CALL_OW 70
18516: ST_TO_ADDR
// end ;
18517: LD_VAR 0 3
18521: RET
// export function IsExtension ( b ) ; begin
18522: LD_INT 0
18524: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18525: LD_ADDR_VAR 0 2
18529: PUSH
18530: LD_VAR 0 1
18534: PUSH
18535: LD_INT 23
18537: PUSH
18538: LD_INT 20
18540: PUSH
18541: LD_INT 22
18543: PUSH
18544: LD_INT 17
18546: PUSH
18547: LD_INT 24
18549: PUSH
18550: LD_INT 21
18552: PUSH
18553: LD_INT 19
18555: PUSH
18556: LD_INT 16
18558: PUSH
18559: LD_INT 25
18561: PUSH
18562: LD_INT 18
18564: PUSH
18565: EMPTY
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: IN
18577: ST_TO_ADDR
// end ;
18578: LD_VAR 0 2
18582: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18583: LD_INT 0
18585: PPUSH
18586: PPUSH
18587: PPUSH
// result := [ ] ;
18588: LD_ADDR_VAR 0 4
18592: PUSH
18593: EMPTY
18594: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18595: LD_ADDR_VAR 0 5
18599: PUSH
18600: LD_VAR 0 2
18604: PPUSH
18605: LD_INT 21
18607: PUSH
18608: LD_INT 3
18610: PUSH
18611: EMPTY
18612: LIST
18613: LIST
18614: PPUSH
18615: CALL_OW 70
18619: ST_TO_ADDR
// if not tmp then
18620: LD_VAR 0 5
18624: NOT
18625: IFFALSE 18629
// exit ;
18627: GO 18693
// if checkLink then
18629: LD_VAR 0 3
18633: IFFALSE 18683
// begin for i in tmp do
18635: LD_ADDR_VAR 0 6
18639: PUSH
18640: LD_VAR 0 5
18644: PUSH
18645: FOR_IN
18646: IFFALSE 18681
// if GetBase ( i ) <> base then
18648: LD_VAR 0 6
18652: PPUSH
18653: CALL_OW 274
18657: PUSH
18658: LD_VAR 0 1
18662: NONEQUAL
18663: IFFALSE 18679
// ComLinkToBase ( base , i ) ;
18665: LD_VAR 0 1
18669: PPUSH
18670: LD_VAR 0 6
18674: PPUSH
18675: CALL_OW 169
18679: GO 18645
18681: POP
18682: POP
// end ; result := tmp ;
18683: LD_ADDR_VAR 0 4
18687: PUSH
18688: LD_VAR 0 5
18692: ST_TO_ADDR
// end ;
18693: LD_VAR 0 4
18697: RET
// export function ComComplete ( units , b ) ; var i ; begin
18698: LD_INT 0
18700: PPUSH
18701: PPUSH
// if not units then
18702: LD_VAR 0 1
18706: NOT
18707: IFFALSE 18711
// exit ;
18709: GO 18801
// for i in units do
18711: LD_ADDR_VAR 0 4
18715: PUSH
18716: LD_VAR 0 1
18720: PUSH
18721: FOR_IN
18722: IFFALSE 18799
// if BuildingStatus ( b ) = bs_build then
18724: LD_VAR 0 2
18728: PPUSH
18729: CALL_OW 461
18733: PUSH
18734: LD_INT 1
18736: EQUAL
18737: IFFALSE 18797
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18739: LD_VAR 0 4
18743: PPUSH
18744: LD_STRING h
18746: PUSH
18747: LD_VAR 0 2
18751: PPUSH
18752: CALL_OW 250
18756: PUSH
18757: LD_VAR 0 2
18761: PPUSH
18762: CALL_OW 251
18766: PUSH
18767: LD_VAR 0 2
18771: PUSH
18772: LD_INT 0
18774: PUSH
18775: LD_INT 0
18777: PUSH
18778: LD_INT 0
18780: PUSH
18781: EMPTY
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: PUSH
18790: EMPTY
18791: LIST
18792: PPUSH
18793: CALL_OW 446
18797: GO 18721
18799: POP
18800: POP
// end ;
18801: LD_VAR 0 3
18805: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18806: LD_INT 0
18808: PPUSH
18809: PPUSH
18810: PPUSH
18811: PPUSH
18812: PPUSH
18813: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18814: LD_VAR 0 1
18818: NOT
18819: IFTRUE 18836
18821: PUSH
18822: LD_VAR 0 1
18826: PPUSH
18827: CALL_OW 263
18831: PUSH
18832: LD_INT 2
18834: NONEQUAL
18835: OR
18836: IFFALSE 18840
// exit ;
18838: GO 19156
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18840: LD_ADDR_VAR 0 6
18844: PUSH
18845: LD_INT 22
18847: PUSH
18848: LD_VAR 0 1
18852: PPUSH
18853: CALL_OW 255
18857: PUSH
18858: EMPTY
18859: LIST
18860: LIST
18861: PUSH
18862: LD_INT 2
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_INT 36
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 34
18877: PUSH
18878: LD_INT 31
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: PPUSH
18894: CALL_OW 69
18898: ST_TO_ADDR
// if not tmp then
18899: LD_VAR 0 6
18903: NOT
18904: IFFALSE 18908
// exit ;
18906: GO 19156
// result := [ ] ;
18908: LD_ADDR_VAR 0 2
18912: PUSH
18913: EMPTY
18914: ST_TO_ADDR
// for i in tmp do
18915: LD_ADDR_VAR 0 3
18919: PUSH
18920: LD_VAR 0 6
18924: PUSH
18925: FOR_IN
18926: IFFALSE 18997
// begin t := UnitsInside ( i ) ;
18928: LD_ADDR_VAR 0 4
18932: PUSH
18933: LD_VAR 0 3
18937: PPUSH
18938: CALL_OW 313
18942: ST_TO_ADDR
// if t then
18943: LD_VAR 0 4
18947: IFFALSE 18995
// for j in t do
18949: LD_ADDR_VAR 0 7
18953: PUSH
18954: LD_VAR 0 4
18958: PUSH
18959: FOR_IN
18960: IFFALSE 18993
// result := Replace ( result , result + 1 , j ) ;
18962: LD_ADDR_VAR 0 2
18966: PUSH
18967: LD_VAR 0 2
18971: PPUSH
18972: LD_VAR 0 2
18976: PUSH
18977: LD_INT 1
18979: PLUS
18980: PPUSH
18981: LD_VAR 0 7
18985: PPUSH
18986: CALL_OW 1
18990: ST_TO_ADDR
18991: GO 18959
18993: POP
18994: POP
// end ;
18995: GO 18925
18997: POP
18998: POP
// if not result then
18999: LD_VAR 0 2
19003: NOT
19004: IFFALSE 19008
// exit ;
19006: GO 19156
// mech := result [ 1 ] ;
19008: LD_ADDR_VAR 0 5
19012: PUSH
19013: LD_VAR 0 2
19017: PUSH
19018: LD_INT 1
19020: ARRAY
19021: ST_TO_ADDR
// if result > 1 then
19022: LD_VAR 0 2
19026: PUSH
19027: LD_INT 1
19029: GREATER
19030: IFFALSE 19142
// begin for i = 2 to result do
19032: LD_ADDR_VAR 0 3
19036: PUSH
19037: DOUBLE
19038: LD_INT 2
19040: DEC
19041: ST_TO_ADDR
19042: LD_VAR 0 2
19046: PUSH
19047: FOR_TO
19048: IFFALSE 19140
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19050: LD_ADDR_VAR 0 4
19054: PUSH
19055: LD_VAR 0 2
19059: PUSH
19060: LD_VAR 0 3
19064: ARRAY
19065: PPUSH
19066: LD_INT 3
19068: PPUSH
19069: CALL_OW 259
19073: PUSH
19074: LD_VAR 0 2
19078: PUSH
19079: LD_VAR 0 3
19083: ARRAY
19084: PPUSH
19085: CALL_OW 432
19089: MINUS
19090: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19091: LD_VAR 0 4
19095: PUSH
19096: LD_VAR 0 5
19100: PPUSH
19101: LD_INT 3
19103: PPUSH
19104: CALL_OW 259
19108: PUSH
19109: LD_VAR 0 5
19113: PPUSH
19114: CALL_OW 432
19118: MINUS
19119: GREATEREQUAL
19120: IFFALSE 19138
// mech := result [ i ] ;
19122: LD_ADDR_VAR 0 5
19126: PUSH
19127: LD_VAR 0 2
19131: PUSH
19132: LD_VAR 0 3
19136: ARRAY
19137: ST_TO_ADDR
// end ;
19138: GO 19047
19140: POP
19141: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19142: LD_VAR 0 1
19146: PPUSH
19147: LD_VAR 0 5
19151: PPUSH
19152: CALL_OW 135
// end ;
19156: LD_VAR 0 2
19160: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19161: LD_INT 0
19163: PPUSH
19164: PPUSH
19165: PPUSH
19166: PPUSH
19167: PPUSH
19168: PPUSH
19169: PPUSH
19170: PPUSH
19171: PPUSH
19172: PPUSH
19173: PPUSH
19174: PPUSH
19175: PPUSH
// result := [ ] ;
19176: LD_ADDR_VAR 0 7
19180: PUSH
19181: EMPTY
19182: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19183: LD_VAR 0 1
19187: PPUSH
19188: CALL_OW 266
19192: PUSH
19193: LD_INT 0
19195: PUSH
19196: LD_INT 1
19198: PUSH
19199: EMPTY
19200: LIST
19201: LIST
19202: IN
19203: NOT
19204: IFFALSE 19208
// exit ;
19206: GO 20848
// if name then
19208: LD_VAR 0 3
19212: IFFALSE 19228
// SetBName ( base_dep , name ) ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_VAR 0 3
19223: PPUSH
19224: CALL_OW 500
// base := GetBase ( base_dep ) ;
19228: LD_ADDR_VAR 0 15
19232: PUSH
19233: LD_VAR 0 1
19237: PPUSH
19238: CALL_OW 274
19242: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19243: LD_ADDR_VAR 0 16
19247: PUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 255
19257: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19258: LD_ADDR_VAR 0 17
19262: PUSH
19263: LD_VAR 0 1
19267: PPUSH
19268: CALL_OW 248
19272: ST_TO_ADDR
// if sources then
19273: LD_VAR 0 5
19277: IFFALSE 19324
// for i = 1 to 3 do
19279: LD_ADDR_VAR 0 8
19283: PUSH
19284: DOUBLE
19285: LD_INT 1
19287: DEC
19288: ST_TO_ADDR
19289: LD_INT 3
19291: PUSH
19292: FOR_TO
19293: IFFALSE 19322
// AddResourceType ( base , i , sources [ i ] ) ;
19295: LD_VAR 0 15
19299: PPUSH
19300: LD_VAR 0 8
19304: PPUSH
19305: LD_VAR 0 5
19309: PUSH
19310: LD_VAR 0 8
19314: ARRAY
19315: PPUSH
19316: CALL_OW 276
19320: GO 19292
19322: POP
19323: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19324: LD_ADDR_VAR 0 18
19328: PUSH
19329: LD_VAR 0 15
19333: PPUSH
19334: LD_VAR 0 2
19338: PPUSH
19339: LD_INT 1
19341: PPUSH
19342: CALL 18583 0 3
19346: ST_TO_ADDR
// InitHc ;
19347: CALL_OW 19
// InitUc ;
19351: CALL_OW 18
// uc_side := side ;
19355: LD_ADDR_OWVAR 20
19359: PUSH
19360: LD_VAR 0 16
19364: ST_TO_ADDR
// uc_nation := nation ;
19365: LD_ADDR_OWVAR 21
19369: PUSH
19370: LD_VAR 0 17
19374: ST_TO_ADDR
// if buildings then
19375: LD_VAR 0 18
19379: IFFALSE 20707
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19381: LD_ADDR_VAR 0 19
19385: PUSH
19386: LD_VAR 0 18
19390: PPUSH
19391: LD_INT 2
19393: PUSH
19394: LD_INT 30
19396: PUSH
19397: LD_INT 29
19399: PUSH
19400: EMPTY
19401: LIST
19402: LIST
19403: PUSH
19404: LD_INT 30
19406: PUSH
19407: LD_INT 30
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: EMPTY
19415: LIST
19416: LIST
19417: LIST
19418: PPUSH
19419: CALL_OW 72
19423: ST_TO_ADDR
// if tmp then
19424: LD_VAR 0 19
19428: IFFALSE 19476
// for i in tmp do
19430: LD_ADDR_VAR 0 8
19434: PUSH
19435: LD_VAR 0 19
19439: PUSH
19440: FOR_IN
19441: IFFALSE 19474
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19443: LD_VAR 0 8
19447: PPUSH
19448: CALL_OW 250
19452: PPUSH
19453: LD_VAR 0 8
19457: PPUSH
19458: CALL_OW 251
19462: PPUSH
19463: LD_VAR 0 16
19467: PPUSH
19468: CALL_OW 441
19472: GO 19440
19474: POP
19475: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19476: LD_VAR 0 18
19480: PPUSH
19481: LD_INT 2
19483: PUSH
19484: LD_INT 30
19486: PUSH
19487: LD_INT 32
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: PUSH
19494: LD_INT 30
19496: PUSH
19497: LD_INT 33
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: LIST
19508: PPUSH
19509: CALL_OW 72
19513: IFFALSE 19601
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19515: LD_ADDR_VAR 0 8
19519: PUSH
19520: LD_VAR 0 18
19524: PPUSH
19525: LD_INT 2
19527: PUSH
19528: LD_INT 30
19530: PUSH
19531: LD_INT 32
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: LD_INT 30
19540: PUSH
19541: LD_INT 33
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: EMPTY
19549: LIST
19550: LIST
19551: LIST
19552: PPUSH
19553: CALL_OW 72
19557: PUSH
19558: FOR_IN
19559: IFFALSE 19599
// begin if not GetBWeapon ( i ) then
19561: LD_VAR 0 8
19565: PPUSH
19566: CALL_OW 269
19570: NOT
19571: IFFALSE 19597
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19573: LD_VAR 0 8
19577: PPUSH
19578: LD_VAR 0 8
19582: PPUSH
19583: LD_VAR 0 2
19587: PPUSH
19588: CALL 20853 0 2
19592: PPUSH
19593: CALL_OW 431
// end ;
19597: GO 19558
19599: POP
19600: POP
// end ; for i = 1 to personel do
19601: LD_ADDR_VAR 0 8
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_VAR 0 6
19615: PUSH
19616: FOR_TO
19617: IFFALSE 20687
// begin if i > 4 then
19619: LD_VAR 0 8
19623: PUSH
19624: LD_INT 4
19626: GREATER
19627: IFFALSE 19631
// break ;
19629: GO 20687
// case i of 1 :
19631: LD_VAR 0 8
19635: PUSH
19636: LD_INT 1
19638: DOUBLE
19639: EQUAL
19640: IFTRUE 19644
19642: GO 19724
19644: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19645: LD_ADDR_VAR 0 12
19649: PUSH
19650: LD_VAR 0 18
19654: PPUSH
19655: LD_INT 22
19657: PUSH
19658: LD_VAR 0 16
19662: PUSH
19663: EMPTY
19664: LIST
19665: LIST
19666: PUSH
19667: LD_INT 58
19669: PUSH
19670: EMPTY
19671: LIST
19672: PUSH
19673: LD_INT 2
19675: PUSH
19676: LD_INT 30
19678: PUSH
19679: LD_INT 32
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PUSH
19686: LD_INT 30
19688: PUSH
19689: LD_INT 4
19691: PUSH
19692: EMPTY
19693: LIST
19694: LIST
19695: PUSH
19696: LD_INT 30
19698: PUSH
19699: LD_INT 5
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: EMPTY
19707: LIST
19708: LIST
19709: LIST
19710: LIST
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: LIST
19716: PPUSH
19717: CALL_OW 72
19721: ST_TO_ADDR
19722: GO 19946
19724: LD_INT 2
19726: DOUBLE
19727: EQUAL
19728: IFTRUE 19732
19730: GO 19794
19732: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19733: LD_ADDR_VAR 0 12
19737: PUSH
19738: LD_VAR 0 18
19742: PPUSH
19743: LD_INT 22
19745: PUSH
19746: LD_VAR 0 16
19750: PUSH
19751: EMPTY
19752: LIST
19753: LIST
19754: PUSH
19755: LD_INT 2
19757: PUSH
19758: LD_INT 30
19760: PUSH
19761: LD_INT 0
19763: PUSH
19764: EMPTY
19765: LIST
19766: LIST
19767: PUSH
19768: LD_INT 30
19770: PUSH
19771: LD_INT 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PPUSH
19787: CALL_OW 72
19791: ST_TO_ADDR
19792: GO 19946
19794: LD_INT 3
19796: DOUBLE
19797: EQUAL
19798: IFTRUE 19802
19800: GO 19864
19802: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19803: LD_ADDR_VAR 0 12
19807: PUSH
19808: LD_VAR 0 18
19812: PPUSH
19813: LD_INT 22
19815: PUSH
19816: LD_VAR 0 16
19820: PUSH
19821: EMPTY
19822: LIST
19823: LIST
19824: PUSH
19825: LD_INT 2
19827: PUSH
19828: LD_INT 30
19830: PUSH
19831: LD_INT 2
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PUSH
19838: LD_INT 30
19840: PUSH
19841: LD_INT 3
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: LIST
19852: PUSH
19853: EMPTY
19854: LIST
19855: LIST
19856: PPUSH
19857: CALL_OW 72
19861: ST_TO_ADDR
19862: GO 19946
19864: LD_INT 4
19866: DOUBLE
19867: EQUAL
19868: IFTRUE 19872
19870: GO 19945
19872: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19873: LD_ADDR_VAR 0 12
19877: PUSH
19878: LD_VAR 0 18
19882: PPUSH
19883: LD_INT 22
19885: PUSH
19886: LD_VAR 0 16
19890: PUSH
19891: EMPTY
19892: LIST
19893: LIST
19894: PUSH
19895: LD_INT 2
19897: PUSH
19898: LD_INT 30
19900: PUSH
19901: LD_INT 6
19903: PUSH
19904: EMPTY
19905: LIST
19906: LIST
19907: PUSH
19908: LD_INT 30
19910: PUSH
19911: LD_INT 7
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 30
19920: PUSH
19921: LD_INT 8
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: PUSH
19934: EMPTY
19935: LIST
19936: LIST
19937: PPUSH
19938: CALL_OW 72
19942: ST_TO_ADDR
19943: GO 19946
19945: POP
// if i = 1 then
19946: LD_VAR 0 8
19950: PUSH
19951: LD_INT 1
19953: EQUAL
19954: IFFALSE 20065
// begin tmp := [ ] ;
19956: LD_ADDR_VAR 0 19
19960: PUSH
19961: EMPTY
19962: ST_TO_ADDR
// for j in f do
19963: LD_ADDR_VAR 0 9
19967: PUSH
19968: LD_VAR 0 12
19972: PUSH
19973: FOR_IN
19974: IFFALSE 20047
// if GetBType ( j ) = b_bunker then
19976: LD_VAR 0 9
19980: PPUSH
19981: CALL_OW 266
19985: PUSH
19986: LD_INT 32
19988: EQUAL
19989: IFFALSE 20016
// tmp := Insert ( tmp , 1 , j ) else
19991: LD_ADDR_VAR 0 19
19995: PUSH
19996: LD_VAR 0 19
20000: PPUSH
20001: LD_INT 1
20003: PPUSH
20004: LD_VAR 0 9
20008: PPUSH
20009: CALL_OW 2
20013: ST_TO_ADDR
20014: GO 20045
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20016: LD_ADDR_VAR 0 19
20020: PUSH
20021: LD_VAR 0 19
20025: PPUSH
20026: LD_VAR 0 19
20030: PUSH
20031: LD_INT 1
20033: PLUS
20034: PPUSH
20035: LD_VAR 0 9
20039: PPUSH
20040: CALL_OW 2
20044: ST_TO_ADDR
20045: GO 19973
20047: POP
20048: POP
// if tmp then
20049: LD_VAR 0 19
20053: IFFALSE 20065
// f := tmp ;
20055: LD_ADDR_VAR 0 12
20059: PUSH
20060: LD_VAR 0 19
20064: ST_TO_ADDR
// end ; x := personel [ i ] ;
20065: LD_ADDR_VAR 0 13
20069: PUSH
20070: LD_VAR 0 6
20074: PUSH
20075: LD_VAR 0 8
20079: ARRAY
20080: ST_TO_ADDR
// if x = - 1 then
20081: LD_VAR 0 13
20085: PUSH
20086: LD_INT 1
20088: NEG
20089: EQUAL
20090: IFFALSE 20301
// begin for j in f do
20092: LD_ADDR_VAR 0 9
20096: PUSH
20097: LD_VAR 0 12
20101: PUSH
20102: FOR_IN
20103: IFFALSE 20297
// repeat InitHc ;
20105: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20109: LD_VAR 0 9
20113: PPUSH
20114: CALL_OW 266
20118: PUSH
20119: LD_INT 5
20121: EQUAL
20122: IFFALSE 20192
// begin if UnitsInside ( j ) < 3 then
20124: LD_VAR 0 9
20128: PPUSH
20129: CALL_OW 313
20133: PUSH
20134: LD_INT 3
20136: LESS
20137: IFFALSE 20173
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20139: LD_INT 0
20141: PPUSH
20142: LD_INT 5
20144: PUSH
20145: LD_INT 8
20147: PUSH
20148: LD_INT 9
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: LIST
20155: PUSH
20156: LD_VAR 0 17
20160: ARRAY
20161: PPUSH
20162: LD_VAR 0 4
20166: PPUSH
20167: CALL_OW 380
20171: GO 20190
// PrepareHuman ( false , i , skill ) ;
20173: LD_INT 0
20175: PPUSH
20176: LD_VAR 0 8
20180: PPUSH
20181: LD_VAR 0 4
20185: PPUSH
20186: CALL_OW 380
// end else
20190: GO 20209
// PrepareHuman ( false , i , skill ) ;
20192: LD_INT 0
20194: PPUSH
20195: LD_VAR 0 8
20199: PPUSH
20200: LD_VAR 0 4
20204: PPUSH
20205: CALL_OW 380
// un := CreateHuman ;
20209: LD_ADDR_VAR 0 14
20213: PUSH
20214: CALL_OW 44
20218: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20219: LD_ADDR_VAR 0 7
20223: PUSH
20224: LD_VAR 0 7
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: LD_VAR 0 14
20236: PPUSH
20237: CALL_OW 2
20241: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20242: LD_VAR 0 14
20246: PPUSH
20247: LD_VAR 0 9
20251: PPUSH
20252: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20256: LD_VAR 0 9
20260: PPUSH
20261: CALL_OW 313
20265: PUSH
20266: LD_INT 6
20268: EQUAL
20269: IFTRUE 20293
20271: PUSH
20272: LD_VAR 0 9
20276: PPUSH
20277: CALL_OW 266
20281: PUSH
20282: LD_INT 32
20284: PUSH
20285: LD_INT 31
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: IN
20292: OR
20293: IFFALSE 20105
20295: GO 20102
20297: POP
20298: POP
// end else
20299: GO 20685
// for j = 1 to x do
20301: LD_ADDR_VAR 0 9
20305: PUSH
20306: DOUBLE
20307: LD_INT 1
20309: DEC
20310: ST_TO_ADDR
20311: LD_VAR 0 13
20315: PUSH
20316: FOR_TO
20317: IFFALSE 20683
// begin InitHc ;
20319: CALL_OW 19
// if not f then
20323: LD_VAR 0 12
20327: NOT
20328: IFFALSE 20417
// begin PrepareHuman ( false , i , skill ) ;
20330: LD_INT 0
20332: PPUSH
20333: LD_VAR 0 8
20337: PPUSH
20338: LD_VAR 0 4
20342: PPUSH
20343: CALL_OW 380
// un := CreateHuman ;
20347: LD_ADDR_VAR 0 14
20351: PUSH
20352: CALL_OW 44
20356: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20357: LD_ADDR_VAR 0 7
20361: PUSH
20362: LD_VAR 0 7
20366: PPUSH
20367: LD_INT 1
20369: PPUSH
20370: LD_VAR 0 14
20374: PPUSH
20375: CALL_OW 2
20379: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20380: LD_VAR 0 14
20384: PPUSH
20385: LD_VAR 0 1
20389: PPUSH
20390: CALL_OW 250
20394: PPUSH
20395: LD_VAR 0 1
20399: PPUSH
20400: CALL_OW 251
20404: PPUSH
20405: LD_INT 10
20407: PPUSH
20408: LD_INT 0
20410: PPUSH
20411: CALL_OW 50
// continue ;
20415: GO 20316
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20417: LD_VAR 0 12
20421: PUSH
20422: LD_INT 1
20424: ARRAY
20425: PPUSH
20426: CALL_OW 313
20430: IFFALSE 20458
20432: PUSH
20433: LD_VAR 0 12
20437: PUSH
20438: LD_INT 1
20440: ARRAY
20441: PPUSH
20442: CALL_OW 266
20446: PUSH
20447: LD_INT 32
20449: PUSH
20450: LD_INT 31
20452: PUSH
20453: EMPTY
20454: LIST
20455: LIST
20456: IN
20457: AND
20458: IFTRUE 20479
20460: PUSH
20461: LD_VAR 0 12
20465: PUSH
20466: LD_INT 1
20468: ARRAY
20469: PPUSH
20470: CALL_OW 313
20474: PUSH
20475: LD_INT 6
20477: EQUAL
20478: OR
20479: IFFALSE 20499
// f := Delete ( f , 1 ) ;
20481: LD_ADDR_VAR 0 12
20485: PUSH
20486: LD_VAR 0 12
20490: PPUSH
20491: LD_INT 1
20493: PPUSH
20494: CALL_OW 3
20498: ST_TO_ADDR
// if not f then
20499: LD_VAR 0 12
20503: NOT
20504: IFFALSE 20522
// begin x := x + 2 ;
20506: LD_ADDR_VAR 0 13
20510: PUSH
20511: LD_VAR 0 13
20515: PUSH
20516: LD_INT 2
20518: PLUS
20519: ST_TO_ADDR
// continue ;
20520: GO 20316
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20522: LD_VAR 0 12
20526: PUSH
20527: LD_INT 1
20529: ARRAY
20530: PPUSH
20531: CALL_OW 266
20535: PUSH
20536: LD_INT 5
20538: EQUAL
20539: IFFALSE 20613
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20541: LD_VAR 0 12
20545: PUSH
20546: LD_INT 1
20548: ARRAY
20549: PPUSH
20550: CALL_OW 313
20554: PUSH
20555: LD_INT 3
20557: LESS
20558: IFFALSE 20594
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20560: LD_INT 0
20562: PPUSH
20563: LD_INT 5
20565: PUSH
20566: LD_INT 8
20568: PUSH
20569: LD_INT 9
20571: PUSH
20572: EMPTY
20573: LIST
20574: LIST
20575: LIST
20576: PUSH
20577: LD_VAR 0 17
20581: ARRAY
20582: PPUSH
20583: LD_VAR 0 4
20587: PPUSH
20588: CALL_OW 380
20592: GO 20611
// PrepareHuman ( false , i , skill ) ;
20594: LD_INT 0
20596: PPUSH
20597: LD_VAR 0 8
20601: PPUSH
20602: LD_VAR 0 4
20606: PPUSH
20607: CALL_OW 380
// end else
20611: GO 20630
// PrepareHuman ( false , i , skill ) ;
20613: LD_INT 0
20615: PPUSH
20616: LD_VAR 0 8
20620: PPUSH
20621: LD_VAR 0 4
20625: PPUSH
20626: CALL_OW 380
// un := CreateHuman ;
20630: LD_ADDR_VAR 0 14
20634: PUSH
20635: CALL_OW 44
20639: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20640: LD_ADDR_VAR 0 7
20644: PUSH
20645: LD_VAR 0 7
20649: PPUSH
20650: LD_INT 1
20652: PPUSH
20653: LD_VAR 0 14
20657: PPUSH
20658: CALL_OW 2
20662: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20663: LD_VAR 0 14
20667: PPUSH
20668: LD_VAR 0 12
20672: PUSH
20673: LD_INT 1
20675: ARRAY
20676: PPUSH
20677: CALL_OW 52
// end ;
20681: GO 20316
20683: POP
20684: POP
// end ;
20685: GO 19616
20687: POP
20688: POP
// result := result ^ buildings ;
20689: LD_ADDR_VAR 0 7
20693: PUSH
20694: LD_VAR 0 7
20698: PUSH
20699: LD_VAR 0 18
20703: ADD
20704: ST_TO_ADDR
// end else
20705: GO 20848
// begin for i = 1 to personel do
20707: LD_ADDR_VAR 0 8
20711: PUSH
20712: DOUBLE
20713: LD_INT 1
20715: DEC
20716: ST_TO_ADDR
20717: LD_VAR 0 6
20721: PUSH
20722: FOR_TO
20723: IFFALSE 20846
// begin if i > 4 then
20725: LD_VAR 0 8
20729: PUSH
20730: LD_INT 4
20732: GREATER
20733: IFFALSE 20737
// break ;
20735: GO 20846
// x := personel [ i ] ;
20737: LD_ADDR_VAR 0 13
20741: PUSH
20742: LD_VAR 0 6
20746: PUSH
20747: LD_VAR 0 8
20751: ARRAY
20752: ST_TO_ADDR
// if x = - 1 then
20753: LD_VAR 0 13
20757: PUSH
20758: LD_INT 1
20760: NEG
20761: EQUAL
20762: IFFALSE 20766
// continue ;
20764: GO 20722
// PrepareHuman ( false , i , skill ) ;
20766: LD_INT 0
20768: PPUSH
20769: LD_VAR 0 8
20773: PPUSH
20774: LD_VAR 0 4
20778: PPUSH
20779: CALL_OW 380
// un := CreateHuman ;
20783: LD_ADDR_VAR 0 14
20787: PUSH
20788: CALL_OW 44
20792: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20793: LD_VAR 0 14
20797: PPUSH
20798: LD_VAR 0 1
20802: PPUSH
20803: CALL_OW 250
20807: PPUSH
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 251
20817: PPUSH
20818: LD_INT 10
20820: PPUSH
20821: LD_INT 0
20823: PPUSH
20824: CALL_OW 50
// result := result ^ un ;
20828: LD_ADDR_VAR 0 7
20832: PUSH
20833: LD_VAR 0 7
20837: PUSH
20838: LD_VAR 0 14
20842: ADD
20843: ST_TO_ADDR
// end ;
20844: GO 20722
20846: POP
20847: POP
// end ; end ;
20848: LD_VAR 0 7
20852: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20853: LD_INT 0
20855: PPUSH
20856: PPUSH
20857: PPUSH
20858: PPUSH
20859: PPUSH
20860: PPUSH
20861: PPUSH
20862: PPUSH
20863: PPUSH
20864: PPUSH
20865: PPUSH
20866: PPUSH
20867: PPUSH
20868: PPUSH
20869: PPUSH
20870: PPUSH
// result := false ;
20871: LD_ADDR_VAR 0 3
20875: PUSH
20876: LD_INT 0
20878: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20879: LD_VAR 0 1
20883: NOT
20884: IFTRUE 20909
20886: PUSH
20887: LD_VAR 0 1
20891: PPUSH
20892: CALL_OW 266
20896: PUSH
20897: LD_INT 32
20899: PUSH
20900: LD_INT 33
20902: PUSH
20903: EMPTY
20904: LIST
20905: LIST
20906: IN
20907: NOT
20908: OR
20909: IFFALSE 20913
// exit ;
20911: GO 22048
// nat := GetNation ( tower ) ;
20913: LD_ADDR_VAR 0 12
20917: PUSH
20918: LD_VAR 0 1
20922: PPUSH
20923: CALL_OW 248
20927: ST_TO_ADDR
// side := GetSide ( tower ) ;
20928: LD_ADDR_VAR 0 16
20932: PUSH
20933: LD_VAR 0 1
20937: PPUSH
20938: CALL_OW 255
20942: ST_TO_ADDR
// x := GetX ( tower ) ;
20943: LD_ADDR_VAR 0 10
20947: PUSH
20948: LD_VAR 0 1
20952: PPUSH
20953: CALL_OW 250
20957: ST_TO_ADDR
// y := GetY ( tower ) ;
20958: LD_ADDR_VAR 0 11
20962: PUSH
20963: LD_VAR 0 1
20967: PPUSH
20968: CALL_OW 251
20972: ST_TO_ADDR
// if not x or not y then
20973: LD_VAR 0 10
20977: NOT
20978: IFTRUE 20987
20980: PUSH
20981: LD_VAR 0 11
20985: NOT
20986: OR
20987: IFFALSE 20991
// exit ;
20989: GO 22048
// weapon := 0 ;
20991: LD_ADDR_VAR 0 18
20995: PUSH
20996: LD_INT 0
20998: ST_TO_ADDR
// fac_list := [ ] ;
20999: LD_ADDR_VAR 0 17
21003: PUSH
21004: EMPTY
21005: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21006: LD_ADDR_VAR 0 6
21010: PUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 274
21020: PPUSH
21021: LD_VAR 0 2
21025: PPUSH
21026: LD_INT 0
21028: PPUSH
21029: CALL 18583 0 3
21033: PPUSH
21034: LD_INT 30
21036: PUSH
21037: LD_INT 3
21039: PUSH
21040: EMPTY
21041: LIST
21042: LIST
21043: PPUSH
21044: CALL_OW 72
21048: ST_TO_ADDR
// if not factories then
21049: LD_VAR 0 6
21053: NOT
21054: IFFALSE 21058
// exit ;
21056: GO 22048
// for i in factories do
21058: LD_ADDR_VAR 0 8
21062: PUSH
21063: LD_VAR 0 6
21067: PUSH
21068: FOR_IN
21069: IFFALSE 21094
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21071: LD_ADDR_VAR 0 17
21075: PUSH
21076: LD_VAR 0 17
21080: PUSH
21081: LD_VAR 0 8
21085: PPUSH
21086: CALL_OW 478
21090: UNION
21091: ST_TO_ADDR
21092: GO 21068
21094: POP
21095: POP
// if not fac_list then
21096: LD_VAR 0 17
21100: NOT
21101: IFFALSE 21105
// exit ;
21103: GO 22048
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21105: LD_ADDR_VAR 0 5
21109: PUSH
21110: LD_INT 4
21112: PUSH
21113: LD_INT 5
21115: PUSH
21116: LD_INT 9
21118: PUSH
21119: LD_INT 10
21121: PUSH
21122: LD_INT 6
21124: PUSH
21125: LD_INT 7
21127: PUSH
21128: LD_INT 11
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: LIST
21135: LIST
21136: LIST
21137: LIST
21138: LIST
21139: PUSH
21140: LD_INT 27
21142: PUSH
21143: LD_INT 28
21145: PUSH
21146: LD_INT 26
21148: PUSH
21149: LD_INT 30
21151: PUSH
21152: EMPTY
21153: LIST
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: LD_INT 43
21160: PUSH
21161: LD_INT 44
21163: PUSH
21164: LD_INT 46
21166: PUSH
21167: LD_INT 45
21169: PUSH
21170: LD_INT 47
21172: PUSH
21173: LD_INT 49
21175: PUSH
21176: EMPTY
21177: LIST
21178: LIST
21179: LIST
21180: LIST
21181: LIST
21182: LIST
21183: PUSH
21184: EMPTY
21185: LIST
21186: LIST
21187: LIST
21188: PUSH
21189: LD_VAR 0 12
21193: ARRAY
21194: ST_TO_ADDR
// list := list isect fac_list ;
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: LD_VAR 0 5
21204: PUSH
21205: LD_VAR 0 17
21209: ISECT
21210: ST_TO_ADDR
// if not list then
21211: LD_VAR 0 5
21215: NOT
21216: IFFALSE 21220
// exit ;
21218: GO 22048
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21220: LD_VAR 0 12
21224: PUSH
21225: LD_INT 3
21227: EQUAL
21228: IFFALSE 21240
21230: PUSH
21231: LD_INT 49
21233: PUSH
21234: LD_VAR 0 5
21238: IN
21239: AND
21240: IFFALSE 21260
21242: PUSH
21243: LD_INT 31
21245: PPUSH
21246: LD_VAR 0 16
21250: PPUSH
21251: CALL_OW 321
21255: PUSH
21256: LD_INT 2
21258: EQUAL
21259: AND
21260: IFFALSE 21320
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21262: LD_INT 22
21264: PUSH
21265: LD_VAR 0 16
21269: PUSH
21270: EMPTY
21271: LIST
21272: LIST
21273: PUSH
21274: LD_INT 35
21276: PUSH
21277: LD_INT 49
21279: PUSH
21280: EMPTY
21281: LIST
21282: LIST
21283: PUSH
21284: LD_INT 91
21286: PUSH
21287: LD_VAR 0 1
21291: PUSH
21292: LD_INT 10
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: PPUSH
21305: CALL_OW 69
21309: NOT
21310: IFFALSE 21320
// weapon := ru_time_lapser ;
21312: LD_ADDR_VAR 0 18
21316: PUSH
21317: LD_INT 49
21319: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21320: LD_VAR 0 12
21324: PUSH
21325: LD_INT 1
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: IN
21335: IFFALSE 21359
21337: PUSH
21338: LD_INT 11
21340: PUSH
21341: LD_VAR 0 5
21345: IN
21346: IFTRUE 21358
21348: PUSH
21349: LD_INT 30
21351: PUSH
21352: LD_VAR 0 5
21356: IN
21357: OR
21358: AND
21359: IFFALSE 21379
21361: PUSH
21362: LD_INT 6
21364: PPUSH
21365: LD_VAR 0 16
21369: PPUSH
21370: CALL_OW 321
21374: PUSH
21375: LD_INT 2
21377: EQUAL
21378: AND
21379: IFFALSE 21546
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21381: LD_INT 22
21383: PUSH
21384: LD_VAR 0 16
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 2
21395: PUSH
21396: LD_INT 35
21398: PUSH
21399: LD_INT 11
21401: PUSH
21402: EMPTY
21403: LIST
21404: LIST
21405: PUSH
21406: LD_INT 35
21408: PUSH
21409: LD_INT 30
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PUSH
21416: EMPTY
21417: LIST
21418: LIST
21419: LIST
21420: PUSH
21421: LD_INT 91
21423: PUSH
21424: LD_VAR 0 1
21428: PUSH
21429: LD_INT 18
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: LIST
21436: PUSH
21437: EMPTY
21438: LIST
21439: LIST
21440: LIST
21441: PPUSH
21442: CALL_OW 69
21446: NOT
21447: IFFALSE 21523
21449: PUSH
21450: LD_INT 22
21452: PUSH
21453: LD_VAR 0 16
21457: PUSH
21458: EMPTY
21459: LIST
21460: LIST
21461: PUSH
21462: LD_INT 2
21464: PUSH
21465: LD_INT 30
21467: PUSH
21468: LD_INT 32
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 30
21477: PUSH
21478: LD_INT 33
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: LIST
21489: PUSH
21490: LD_INT 91
21492: PUSH
21493: LD_VAR 0 1
21497: PUSH
21498: LD_INT 12
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: LIST
21505: PUSH
21506: EMPTY
21507: LIST
21508: LIST
21509: LIST
21510: PUSH
21511: EMPTY
21512: LIST
21513: PPUSH
21514: CALL_OW 69
21518: PUSH
21519: LD_INT 2
21521: GREATER
21522: AND
21523: IFFALSE 21546
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21525: LD_ADDR_VAR 0 18
21529: PUSH
21530: LD_INT 11
21532: PUSH
21533: LD_INT 30
21535: PUSH
21536: EMPTY
21537: LIST
21538: LIST
21539: PUSH
21540: LD_VAR 0 12
21544: ARRAY
21545: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21546: LD_VAR 0 18
21550: NOT
21551: IFFALSE 21571
21553: PUSH
21554: LD_INT 40
21556: PPUSH
21557: LD_VAR 0 16
21561: PPUSH
21562: CALL_OW 321
21566: PUSH
21567: LD_INT 2
21569: EQUAL
21570: AND
21571: IFFALSE 21607
21573: PUSH
21574: LD_INT 7
21576: PUSH
21577: LD_VAR 0 5
21581: IN
21582: IFTRUE 21594
21584: PUSH
21585: LD_INT 28
21587: PUSH
21588: LD_VAR 0 5
21592: IN
21593: OR
21594: IFTRUE 21606
21596: PUSH
21597: LD_INT 45
21599: PUSH
21600: LD_VAR 0 5
21604: IN
21605: OR
21606: AND
21607: IFFALSE 21861
// begin hex := GetHexInfo ( x , y ) ;
21609: LD_ADDR_VAR 0 4
21613: PUSH
21614: LD_VAR 0 10
21618: PPUSH
21619: LD_VAR 0 11
21623: PPUSH
21624: CALL_OW 546
21628: ST_TO_ADDR
// if hex [ 1 ] then
21629: LD_VAR 0 4
21633: PUSH
21634: LD_INT 1
21636: ARRAY
21637: IFFALSE 21641
// exit ;
21639: GO 22048
// height := hex [ 2 ] ;
21641: LD_ADDR_VAR 0 15
21645: PUSH
21646: LD_VAR 0 4
21650: PUSH
21651: LD_INT 2
21653: ARRAY
21654: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21655: LD_ADDR_VAR 0 14
21659: PUSH
21660: LD_INT 0
21662: PUSH
21663: LD_INT 2
21665: PUSH
21666: LD_INT 3
21668: PUSH
21669: LD_INT 5
21671: PUSH
21672: EMPTY
21673: LIST
21674: LIST
21675: LIST
21676: LIST
21677: ST_TO_ADDR
// for i in tmp do
21678: LD_ADDR_VAR 0 8
21682: PUSH
21683: LD_VAR 0 14
21687: PUSH
21688: FOR_IN
21689: IFFALSE 21859
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21691: LD_ADDR_VAR 0 9
21695: PUSH
21696: LD_VAR 0 10
21700: PPUSH
21701: LD_VAR 0 8
21705: PPUSH
21706: LD_INT 5
21708: PPUSH
21709: CALL_OW 272
21713: PUSH
21714: LD_VAR 0 11
21718: PPUSH
21719: LD_VAR 0 8
21723: PPUSH
21724: LD_INT 5
21726: PPUSH
21727: CALL_OW 273
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21736: LD_VAR 0 9
21740: PUSH
21741: LD_INT 1
21743: ARRAY
21744: PPUSH
21745: LD_VAR 0 9
21749: PUSH
21750: LD_INT 2
21752: ARRAY
21753: PPUSH
21754: CALL_OW 488
21758: IFFALSE 21857
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21760: LD_ADDR_VAR 0 4
21764: PUSH
21765: LD_VAR 0 9
21769: PUSH
21770: LD_INT 1
21772: ARRAY
21773: PPUSH
21774: LD_VAR 0 9
21778: PUSH
21779: LD_INT 2
21781: ARRAY
21782: PPUSH
21783: CALL_OW 546
21787: ST_TO_ADDR
// if hex [ 1 ] then
21788: LD_VAR 0 4
21792: PUSH
21793: LD_INT 1
21795: ARRAY
21796: IFFALSE 21800
// continue ;
21798: GO 21688
// h := hex [ 2 ] ;
21800: LD_ADDR_VAR 0 13
21804: PUSH
21805: LD_VAR 0 4
21809: PUSH
21810: LD_INT 2
21812: ARRAY
21813: ST_TO_ADDR
// if h + 7 < height then
21814: LD_VAR 0 13
21818: PUSH
21819: LD_INT 7
21821: PLUS
21822: PUSH
21823: LD_VAR 0 15
21827: LESS
21828: IFFALSE 21857
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21830: LD_ADDR_VAR 0 18
21834: PUSH
21835: LD_INT 7
21837: PUSH
21838: LD_INT 28
21840: PUSH
21841: LD_INT 45
21843: PUSH
21844: EMPTY
21845: LIST
21846: LIST
21847: LIST
21848: PUSH
21849: LD_VAR 0 12
21853: ARRAY
21854: ST_TO_ADDR
// break ;
21855: GO 21859
// end ; end ; end ;
21857: GO 21688
21859: POP
21860: POP
// end ; if not weapon then
21861: LD_VAR 0 18
21865: NOT
21866: IFFALSE 21926
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21868: LD_ADDR_VAR 0 5
21872: PUSH
21873: LD_VAR 0 5
21877: PUSH
21878: LD_INT 11
21880: PUSH
21881: LD_INT 30
21883: PUSH
21884: LD_INT 49
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: DIFF
21892: ST_TO_ADDR
// if not list then
21893: LD_VAR 0 5
21897: NOT
21898: IFFALSE 21902
// exit ;
21900: GO 22048
// weapon := list [ rand ( 1 , list ) ] ;
21902: LD_ADDR_VAR 0 18
21906: PUSH
21907: LD_VAR 0 5
21911: PUSH
21912: LD_INT 1
21914: PPUSH
21915: LD_VAR 0 5
21919: PPUSH
21920: CALL_OW 12
21924: ARRAY
21925: ST_TO_ADDR
// end ; if weapon then
21926: LD_VAR 0 18
21930: IFFALSE 22048
// begin tmp := CostOfWeapon ( weapon ) ;
21932: LD_ADDR_VAR 0 14
21936: PUSH
21937: LD_VAR 0 18
21941: PPUSH
21942: CALL_OW 451
21946: ST_TO_ADDR
// j := GetBase ( tower ) ;
21947: LD_ADDR_VAR 0 9
21951: PUSH
21952: LD_VAR 0 1
21956: PPUSH
21957: CALL_OW 274
21961: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
21962: LD_VAR 0 9
21966: PPUSH
21967: LD_INT 1
21969: PPUSH
21970: CALL_OW 275
21974: PUSH
21975: LD_VAR 0 14
21979: PUSH
21980: LD_INT 1
21982: ARRAY
21983: GREATEREQUAL
21984: IFFALSE 22010
21986: PUSH
21987: LD_VAR 0 9
21991: PPUSH
21992: LD_INT 2
21994: PPUSH
21995: CALL_OW 275
21999: PUSH
22000: LD_VAR 0 14
22004: PUSH
22005: LD_INT 2
22007: ARRAY
22008: GREATEREQUAL
22009: AND
22010: IFFALSE 22036
22012: PUSH
22013: LD_VAR 0 9
22017: PPUSH
22018: LD_INT 3
22020: PPUSH
22021: CALL_OW 275
22025: PUSH
22026: LD_VAR 0 14
22030: PUSH
22031: LD_INT 3
22033: ARRAY
22034: GREATEREQUAL
22035: AND
22036: IFFALSE 22048
// result := weapon ;
22038: LD_ADDR_VAR 0 3
22042: PUSH
22043: LD_VAR 0 18
22047: ST_TO_ADDR
// end ; end ;
22048: LD_VAR 0 3
22052: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22053: LD_INT 0
22055: PPUSH
22056: PPUSH
// result := true ;
22057: LD_ADDR_VAR 0 3
22061: PUSH
22062: LD_INT 1
22064: ST_TO_ADDR
// if array1 = array2 then
22065: LD_VAR 0 1
22069: PUSH
22070: LD_VAR 0 2
22074: EQUAL
22075: IFFALSE 22135
// begin for i = 1 to array1 do
22077: LD_ADDR_VAR 0 4
22081: PUSH
22082: DOUBLE
22083: LD_INT 1
22085: DEC
22086: ST_TO_ADDR
22087: LD_VAR 0 1
22091: PUSH
22092: FOR_TO
22093: IFFALSE 22131
// if array1 [ i ] <> array2 [ i ] then
22095: LD_VAR 0 1
22099: PUSH
22100: LD_VAR 0 4
22104: ARRAY
22105: PUSH
22106: LD_VAR 0 2
22110: PUSH
22111: LD_VAR 0 4
22115: ARRAY
22116: NONEQUAL
22117: IFFALSE 22129
// begin result := false ;
22119: LD_ADDR_VAR 0 3
22123: PUSH
22124: LD_INT 0
22126: ST_TO_ADDR
// break ;
22127: GO 22131
// end ;
22129: GO 22092
22131: POP
22132: POP
// end else
22133: GO 22143
// result := false ;
22135: LD_ADDR_VAR 0 3
22139: PUSH
22140: LD_INT 0
22142: ST_TO_ADDR
// end ;
22143: LD_VAR 0 3
22147: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22148: LD_INT 0
22150: PPUSH
22151: PPUSH
// if not array1 or not array2 then
22152: LD_VAR 0 1
22156: NOT
22157: IFTRUE 22166
22159: PUSH
22160: LD_VAR 0 2
22164: NOT
22165: OR
22166: IFFALSE 22170
// exit ;
22168: GO 22234
// result := true ;
22170: LD_ADDR_VAR 0 3
22174: PUSH
22175: LD_INT 1
22177: ST_TO_ADDR
// for i = 1 to array1 do
22178: LD_ADDR_VAR 0 4
22182: PUSH
22183: DOUBLE
22184: LD_INT 1
22186: DEC
22187: ST_TO_ADDR
22188: LD_VAR 0 1
22192: PUSH
22193: FOR_TO
22194: IFFALSE 22232
// if array1 [ i ] <> array2 [ i ] then
22196: LD_VAR 0 1
22200: PUSH
22201: LD_VAR 0 4
22205: ARRAY
22206: PUSH
22207: LD_VAR 0 2
22211: PUSH
22212: LD_VAR 0 4
22216: ARRAY
22217: NONEQUAL
22218: IFFALSE 22230
// begin result := false ;
22220: LD_ADDR_VAR 0 3
22224: PUSH
22225: LD_INT 0
22227: ST_TO_ADDR
// break ;
22228: GO 22232
// end ;
22230: GO 22193
22232: POP
22233: POP
// end ;
22234: LD_VAR 0 3
22238: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22239: LD_INT 0
22241: PPUSH
22242: PPUSH
22243: PPUSH
// pom := GetBase ( fac ) ;
22244: LD_ADDR_VAR 0 5
22248: PUSH
22249: LD_VAR 0 1
22253: PPUSH
22254: CALL_OW 274
22258: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22259: LD_ADDR_VAR 0 4
22263: PUSH
22264: LD_VAR 0 2
22268: PUSH
22269: LD_INT 1
22271: ARRAY
22272: PPUSH
22273: LD_VAR 0 2
22277: PUSH
22278: LD_INT 2
22280: ARRAY
22281: PPUSH
22282: LD_VAR 0 2
22286: PUSH
22287: LD_INT 3
22289: ARRAY
22290: PPUSH
22291: LD_VAR 0 2
22295: PUSH
22296: LD_INT 4
22298: ARRAY
22299: PPUSH
22300: CALL_OW 449
22304: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22305: LD_ADDR_VAR 0 3
22309: PUSH
22310: LD_VAR 0 5
22314: PPUSH
22315: LD_INT 1
22317: PPUSH
22318: CALL_OW 275
22322: PUSH
22323: LD_VAR 0 4
22327: PUSH
22328: LD_INT 1
22330: ARRAY
22331: GREATEREQUAL
22332: IFFALSE 22358
22334: PUSH
22335: LD_VAR 0 5
22339: PPUSH
22340: LD_INT 2
22342: PPUSH
22343: CALL_OW 275
22347: PUSH
22348: LD_VAR 0 4
22352: PUSH
22353: LD_INT 2
22355: ARRAY
22356: GREATEREQUAL
22357: AND
22358: IFFALSE 22384
22360: PUSH
22361: LD_VAR 0 5
22365: PPUSH
22366: LD_INT 3
22368: PPUSH
22369: CALL_OW 275
22373: PUSH
22374: LD_VAR 0 4
22378: PUSH
22379: LD_INT 3
22381: ARRAY
22382: GREATEREQUAL
22383: AND
22384: ST_TO_ADDR
// end ;
22385: LD_VAR 0 3
22389: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22390: LD_INT 0
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
// pom := GetBase ( building ) ;
22396: LD_ADDR_VAR 0 3
22400: PUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 274
22410: ST_TO_ADDR
// if not pom then
22411: LD_VAR 0 3
22415: NOT
22416: IFFALSE 22420
// exit ;
22418: GO 22594
// btype := GetBType ( building ) ;
22420: LD_ADDR_VAR 0 5
22424: PUSH
22425: LD_VAR 0 1
22429: PPUSH
22430: CALL_OW 266
22434: ST_TO_ADDR
// if btype = b_armoury then
22435: LD_VAR 0 5
22439: PUSH
22440: LD_INT 4
22442: EQUAL
22443: IFFALSE 22453
// btype := b_barracks ;
22445: LD_ADDR_VAR 0 5
22449: PUSH
22450: LD_INT 5
22452: ST_TO_ADDR
// if btype = b_depot then
22453: LD_VAR 0 5
22457: PUSH
22458: LD_INT 0
22460: EQUAL
22461: IFFALSE 22471
// btype := b_warehouse ;
22463: LD_ADDR_VAR 0 5
22467: PUSH
22468: LD_INT 1
22470: ST_TO_ADDR
// if btype = b_workshop then
22471: LD_VAR 0 5
22475: PUSH
22476: LD_INT 2
22478: EQUAL
22479: IFFALSE 22489
// btype := b_factory ;
22481: LD_ADDR_VAR 0 5
22485: PUSH
22486: LD_INT 3
22488: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22489: LD_ADDR_VAR 0 4
22493: PUSH
22494: LD_VAR 0 5
22498: PPUSH
22499: LD_VAR 0 1
22503: PPUSH
22504: CALL_OW 248
22508: PPUSH
22509: CALL_OW 450
22513: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22514: LD_ADDR_VAR 0 2
22518: PUSH
22519: LD_VAR 0 3
22523: PPUSH
22524: LD_INT 1
22526: PPUSH
22527: CALL_OW 275
22531: PUSH
22532: LD_VAR 0 4
22536: PUSH
22537: LD_INT 1
22539: ARRAY
22540: GREATEREQUAL
22541: IFFALSE 22567
22543: PUSH
22544: LD_VAR 0 3
22548: PPUSH
22549: LD_INT 2
22551: PPUSH
22552: CALL_OW 275
22556: PUSH
22557: LD_VAR 0 4
22561: PUSH
22562: LD_INT 2
22564: ARRAY
22565: GREATEREQUAL
22566: AND
22567: IFFALSE 22593
22569: PUSH
22570: LD_VAR 0 3
22574: PPUSH
22575: LD_INT 3
22577: PPUSH
22578: CALL_OW 275
22582: PUSH
22583: LD_VAR 0 4
22587: PUSH
22588: LD_INT 3
22590: ARRAY
22591: GREATEREQUAL
22592: AND
22593: ST_TO_ADDR
// end ;
22594: LD_VAR 0 2
22598: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22599: LD_INT 0
22601: PPUSH
22602: PPUSH
22603: PPUSH
// pom := GetBase ( building ) ;
22604: LD_ADDR_VAR 0 4
22608: PUSH
22609: LD_VAR 0 1
22613: PPUSH
22614: CALL_OW 274
22618: ST_TO_ADDR
// if not pom then
22619: LD_VAR 0 4
22623: NOT
22624: IFFALSE 22628
// exit ;
22626: GO 22733
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22628: LD_ADDR_VAR 0 5
22632: PUSH
22633: LD_VAR 0 2
22637: PPUSH
22638: LD_VAR 0 1
22642: PPUSH
22643: CALL_OW 248
22647: PPUSH
22648: CALL_OW 450
22652: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22653: LD_ADDR_VAR 0 3
22657: PUSH
22658: LD_VAR 0 4
22662: PPUSH
22663: LD_INT 1
22665: PPUSH
22666: CALL_OW 275
22670: PUSH
22671: LD_VAR 0 5
22675: PUSH
22676: LD_INT 1
22678: ARRAY
22679: GREATEREQUAL
22680: IFFALSE 22706
22682: PUSH
22683: LD_VAR 0 4
22687: PPUSH
22688: LD_INT 2
22690: PPUSH
22691: CALL_OW 275
22695: PUSH
22696: LD_VAR 0 5
22700: PUSH
22701: LD_INT 2
22703: ARRAY
22704: GREATEREQUAL
22705: AND
22706: IFFALSE 22732
22708: PUSH
22709: LD_VAR 0 4
22713: PPUSH
22714: LD_INT 3
22716: PPUSH
22717: CALL_OW 275
22721: PUSH
22722: LD_VAR 0 5
22726: PUSH
22727: LD_INT 3
22729: ARRAY
22730: GREATEREQUAL
22731: AND
22732: ST_TO_ADDR
// end ;
22733: LD_VAR 0 3
22737: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22738: LD_INT 0
22740: PPUSH
22741: PPUSH
22742: PPUSH
22743: PPUSH
22744: PPUSH
22745: PPUSH
22746: PPUSH
22747: PPUSH
22748: PPUSH
22749: PPUSH
22750: PPUSH
// result := false ;
22751: LD_ADDR_VAR 0 8
22755: PUSH
22756: LD_INT 0
22758: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22759: LD_VAR 0 5
22763: NOT
22764: IFTRUE 22773
22766: PUSH
22767: LD_VAR 0 1
22771: NOT
22772: OR
22773: IFTRUE 22782
22775: PUSH
22776: LD_VAR 0 2
22780: NOT
22781: OR
22782: IFTRUE 22791
22784: PUSH
22785: LD_VAR 0 3
22789: NOT
22790: OR
22791: IFFALSE 22795
// exit ;
22793: GO 23621
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22795: LD_ADDR_VAR 0 14
22799: PUSH
22800: LD_VAR 0 1
22804: PPUSH
22805: LD_VAR 0 2
22809: PPUSH
22810: LD_VAR 0 3
22814: PPUSH
22815: LD_VAR 0 4
22819: PPUSH
22820: LD_VAR 0 5
22824: PUSH
22825: LD_INT 1
22827: ARRAY
22828: PPUSH
22829: CALL_OW 248
22833: PPUSH
22834: LD_INT 0
22836: PPUSH
22837: CALL 24902 0 6
22841: ST_TO_ADDR
// if not hexes then
22842: LD_VAR 0 14
22846: NOT
22847: IFFALSE 22851
// exit ;
22849: GO 23621
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22851: LD_ADDR_VAR 0 17
22855: PUSH
22856: LD_VAR 0 5
22860: PPUSH
22861: LD_INT 22
22863: PUSH
22864: LD_VAR 0 13
22868: PPUSH
22869: CALL_OW 255
22873: PUSH
22874: EMPTY
22875: LIST
22876: LIST
22877: PUSH
22878: LD_INT 2
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 0
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: LD_INT 1
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: EMPTY
22902: LIST
22903: LIST
22904: LIST
22905: PUSH
22906: EMPTY
22907: LIST
22908: LIST
22909: PPUSH
22910: CALL_OW 72
22914: ST_TO_ADDR
// for i = 1 to hexes do
22915: LD_ADDR_VAR 0 9
22919: PUSH
22920: DOUBLE
22921: LD_INT 1
22923: DEC
22924: ST_TO_ADDR
22925: LD_VAR 0 14
22929: PUSH
22930: FOR_TO
22931: IFFALSE 23619
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22933: LD_ADDR_VAR 0 13
22937: PUSH
22938: LD_VAR 0 14
22942: PUSH
22943: LD_VAR 0 9
22947: ARRAY
22948: PUSH
22949: LD_INT 1
22951: ARRAY
22952: PPUSH
22953: LD_VAR 0 14
22957: PUSH
22958: LD_VAR 0 9
22962: ARRAY
22963: PUSH
22964: LD_INT 2
22966: ARRAY
22967: PPUSH
22968: CALL_OW 428
22972: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
22973: LD_VAR 0 14
22977: PUSH
22978: LD_VAR 0 9
22982: ARRAY
22983: PUSH
22984: LD_INT 1
22986: ARRAY
22987: PPUSH
22988: LD_VAR 0 14
22992: PUSH
22993: LD_VAR 0 9
22997: ARRAY
22998: PUSH
22999: LD_INT 2
23001: ARRAY
23002: PPUSH
23003: CALL_OW 351
23007: IFTRUE 23046
23009: PUSH
23010: LD_VAR 0 14
23014: PUSH
23015: LD_VAR 0 9
23019: ARRAY
23020: PUSH
23021: LD_INT 1
23023: ARRAY
23024: PPUSH
23025: LD_VAR 0 14
23029: PUSH
23030: LD_VAR 0 9
23034: ARRAY
23035: PUSH
23036: LD_INT 2
23038: ARRAY
23039: PPUSH
23040: CALL_OW 488
23044: NOT
23045: OR
23046: IFTRUE 23063
23048: PUSH
23049: LD_VAR 0 13
23053: PPUSH
23054: CALL_OW 247
23058: PUSH
23059: LD_INT 3
23061: EQUAL
23062: OR
23063: IFFALSE 23069
// exit ;
23065: POP
23066: POP
23067: GO 23621
// if not tmp then
23069: LD_VAR 0 13
23073: NOT
23074: IFFALSE 23078
// continue ;
23076: GO 22930
// result := true ;
23078: LD_ADDR_VAR 0 8
23082: PUSH
23083: LD_INT 1
23085: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23086: LD_VAR 0 6
23090: IFFALSE 23107
23092: PUSH
23093: LD_VAR 0 13
23097: PPUSH
23098: CALL_OW 247
23102: PUSH
23103: LD_INT 2
23105: EQUAL
23106: AND
23107: IFFALSE 23124
23109: PUSH
23110: LD_VAR 0 13
23114: PPUSH
23115: CALL_OW 263
23119: PUSH
23120: LD_INT 1
23122: EQUAL
23123: AND
23124: IFFALSE 23288
// begin if IsDrivenBy ( tmp ) then
23126: LD_VAR 0 13
23130: PPUSH
23131: CALL_OW 311
23135: IFFALSE 23139
// continue ;
23137: GO 22930
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23139: LD_VAR 0 6
23143: PPUSH
23144: LD_INT 3
23146: PUSH
23147: LD_INT 60
23149: PUSH
23150: EMPTY
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: PUSH
23157: LD_INT 3
23159: PUSH
23160: LD_INT 55
23162: PUSH
23163: EMPTY
23164: LIST
23165: PUSH
23166: EMPTY
23167: LIST
23168: LIST
23169: PUSH
23170: EMPTY
23171: LIST
23172: LIST
23173: PPUSH
23174: CALL_OW 72
23178: IFFALSE 23286
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23180: LD_ADDR_VAR 0 18
23184: PUSH
23185: LD_VAR 0 6
23189: PPUSH
23190: LD_INT 3
23192: PUSH
23193: LD_INT 60
23195: PUSH
23196: EMPTY
23197: LIST
23198: PUSH
23199: EMPTY
23200: LIST
23201: LIST
23202: PUSH
23203: LD_INT 3
23205: PUSH
23206: LD_INT 55
23208: PUSH
23209: EMPTY
23210: LIST
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 72
23224: PUSH
23225: LD_INT 1
23227: ARRAY
23228: ST_TO_ADDR
// if IsInUnit ( driver ) then
23229: LD_VAR 0 18
23233: PPUSH
23234: CALL_OW 310
23238: IFFALSE 23249
// ComExit ( driver ) ;
23240: LD_VAR 0 18
23244: PPUSH
23245: CALL 48902 0 1
// AddComEnterUnit ( driver , tmp ) ;
23249: LD_VAR 0 18
23253: PPUSH
23254: LD_VAR 0 13
23258: PPUSH
23259: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23263: LD_VAR 0 18
23267: PPUSH
23268: LD_VAR 0 7
23272: PPUSH
23273: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23277: LD_VAR 0 18
23281: PPUSH
23282: CALL_OW 181
// end ; continue ;
23286: GO 22930
// end ; if not cleaners or not tmp in cleaners then
23288: LD_VAR 0 6
23292: NOT
23293: IFTRUE 23308
23295: PUSH
23296: LD_VAR 0 13
23300: PUSH
23301: LD_VAR 0 6
23305: IN
23306: NOT
23307: OR
23308: IFFALSE 23617
// begin if dep then
23310: LD_VAR 0 17
23314: IFFALSE 23450
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23316: LD_ADDR_VAR 0 16
23320: PUSH
23321: LD_VAR 0 17
23325: PUSH
23326: LD_INT 1
23328: ARRAY
23329: PPUSH
23330: CALL_OW 250
23334: PPUSH
23335: LD_VAR 0 17
23339: PUSH
23340: LD_INT 1
23342: ARRAY
23343: PPUSH
23344: CALL_OW 254
23348: PPUSH
23349: LD_INT 5
23351: PPUSH
23352: CALL_OW 272
23356: PUSH
23357: LD_VAR 0 17
23361: PUSH
23362: LD_INT 1
23364: ARRAY
23365: PPUSH
23366: CALL_OW 251
23370: PPUSH
23371: LD_VAR 0 17
23375: PUSH
23376: LD_INT 1
23378: ARRAY
23379: PPUSH
23380: CALL_OW 254
23384: PPUSH
23385: LD_INT 5
23387: PPUSH
23388: CALL_OW 273
23392: PUSH
23393: EMPTY
23394: LIST
23395: LIST
23396: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23397: LD_VAR 0 16
23401: PUSH
23402: LD_INT 1
23404: ARRAY
23405: PPUSH
23406: LD_VAR 0 16
23410: PUSH
23411: LD_INT 2
23413: ARRAY
23414: PPUSH
23415: CALL_OW 488
23419: IFFALSE 23450
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23421: LD_VAR 0 13
23425: PPUSH
23426: LD_VAR 0 16
23430: PUSH
23431: LD_INT 1
23433: ARRAY
23434: PPUSH
23435: LD_VAR 0 16
23439: PUSH
23440: LD_INT 2
23442: ARRAY
23443: PPUSH
23444: CALL_OW 111
// continue ;
23448: GO 22930
// end ; end ; r := GetDir ( tmp ) ;
23450: LD_ADDR_VAR 0 15
23454: PUSH
23455: LD_VAR 0 13
23459: PPUSH
23460: CALL_OW 254
23464: ST_TO_ADDR
// if r = 5 then
23465: LD_VAR 0 15
23469: PUSH
23470: LD_INT 5
23472: EQUAL
23473: IFFALSE 23483
// r := 0 ;
23475: LD_ADDR_VAR 0 15
23479: PUSH
23480: LD_INT 0
23482: ST_TO_ADDR
// for j = r to 5 do
23483: LD_ADDR_VAR 0 10
23487: PUSH
23488: DOUBLE
23489: LD_VAR 0 15
23493: DEC
23494: ST_TO_ADDR
23495: LD_INT 5
23497: PUSH
23498: FOR_TO
23499: IFFALSE 23615
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23501: LD_ADDR_VAR 0 11
23505: PUSH
23506: LD_VAR 0 13
23510: PPUSH
23511: CALL_OW 250
23515: PPUSH
23516: LD_VAR 0 10
23520: PPUSH
23521: LD_INT 2
23523: PPUSH
23524: CALL_OW 272
23528: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23529: LD_ADDR_VAR 0 12
23533: PUSH
23534: LD_VAR 0 13
23538: PPUSH
23539: CALL_OW 251
23543: PPUSH
23544: LD_VAR 0 10
23548: PPUSH
23549: LD_INT 2
23551: PPUSH
23552: CALL_OW 273
23556: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23557: LD_VAR 0 11
23561: PPUSH
23562: LD_VAR 0 12
23566: PPUSH
23567: CALL_OW 488
23571: IFFALSE 23590
23573: PUSH
23574: LD_VAR 0 11
23578: PPUSH
23579: LD_VAR 0 12
23583: PPUSH
23584: CALL_OW 428
23588: NOT
23589: AND
23590: IFFALSE 23613
// begin ComMoveXY ( tmp , _x , _y ) ;
23592: LD_VAR 0 13
23596: PPUSH
23597: LD_VAR 0 11
23601: PPUSH
23602: LD_VAR 0 12
23606: PPUSH
23607: CALL_OW 111
// break ;
23611: GO 23615
// end ; end ;
23613: GO 23498
23615: POP
23616: POP
// end ; end ;
23617: GO 22930
23619: POP
23620: POP
// end ;
23621: LD_VAR 0 8
23625: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23626: LD_INT 0
23628: PPUSH
// result := true ;
23629: LD_ADDR_VAR 0 3
23633: PUSH
23634: LD_INT 1
23636: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23637: LD_VAR 0 2
23641: PUSH
23642: LD_INT 24
23644: DOUBLE
23645: EQUAL
23646: IFTRUE 23656
23648: LD_INT 33
23650: DOUBLE
23651: EQUAL
23652: IFTRUE 23656
23654: GO 23681
23656: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23657: LD_ADDR_VAR 0 3
23661: PUSH
23662: LD_INT 32
23664: PPUSH
23665: LD_VAR 0 1
23669: PPUSH
23670: CALL_OW 321
23674: PUSH
23675: LD_INT 2
23677: EQUAL
23678: ST_TO_ADDR
23679: GO 23997
23681: LD_INT 20
23683: DOUBLE
23684: EQUAL
23685: IFTRUE 23689
23687: GO 23714
23689: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23690: LD_ADDR_VAR 0 3
23694: PUSH
23695: LD_INT 6
23697: PPUSH
23698: LD_VAR 0 1
23702: PPUSH
23703: CALL_OW 321
23707: PUSH
23708: LD_INT 2
23710: EQUAL
23711: ST_TO_ADDR
23712: GO 23997
23714: LD_INT 22
23716: DOUBLE
23717: EQUAL
23718: IFTRUE 23728
23720: LD_INT 36
23722: DOUBLE
23723: EQUAL
23724: IFTRUE 23728
23726: GO 23753
23728: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23729: LD_ADDR_VAR 0 3
23733: PUSH
23734: LD_INT 15
23736: PPUSH
23737: LD_VAR 0 1
23741: PPUSH
23742: CALL_OW 321
23746: PUSH
23747: LD_INT 2
23749: EQUAL
23750: ST_TO_ADDR
23751: GO 23997
23753: LD_INT 30
23755: DOUBLE
23756: EQUAL
23757: IFTRUE 23761
23759: GO 23786
23761: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: LD_INT 20
23769: PPUSH
23770: LD_VAR 0 1
23774: PPUSH
23775: CALL_OW 321
23779: PUSH
23780: LD_INT 2
23782: EQUAL
23783: ST_TO_ADDR
23784: GO 23997
23786: LD_INT 28
23788: DOUBLE
23789: EQUAL
23790: IFTRUE 23800
23792: LD_INT 21
23794: DOUBLE
23795: EQUAL
23796: IFTRUE 23800
23798: GO 23825
23800: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23801: LD_ADDR_VAR 0 3
23805: PUSH
23806: LD_INT 21
23808: PPUSH
23809: LD_VAR 0 1
23813: PPUSH
23814: CALL_OW 321
23818: PUSH
23819: LD_INT 2
23821: EQUAL
23822: ST_TO_ADDR
23823: GO 23997
23825: LD_INT 16
23827: DOUBLE
23828: EQUAL
23829: IFTRUE 23833
23831: GO 23858
23833: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23834: LD_ADDR_VAR 0 3
23838: PUSH
23839: LD_INT 84
23841: PPUSH
23842: LD_VAR 0 1
23846: PPUSH
23847: CALL_OW 321
23851: PUSH
23852: LD_INT 2
23854: EQUAL
23855: ST_TO_ADDR
23856: GO 23997
23858: LD_INT 19
23860: DOUBLE
23861: EQUAL
23862: IFTRUE 23872
23864: LD_INT 23
23866: DOUBLE
23867: EQUAL
23868: IFTRUE 23872
23870: GO 23897
23872: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_INT 83
23880: PPUSH
23881: LD_VAR 0 1
23885: PPUSH
23886: CALL_OW 321
23890: PUSH
23891: LD_INT 2
23893: EQUAL
23894: ST_TO_ADDR
23895: GO 23997
23897: LD_INT 17
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23930
23905: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_INT 39
23913: PPUSH
23914: LD_VAR 0 1
23918: PPUSH
23919: CALL_OW 321
23923: PUSH
23924: LD_INT 2
23926: EQUAL
23927: ST_TO_ADDR
23928: GO 23997
23930: LD_INT 18
23932: DOUBLE
23933: EQUAL
23934: IFTRUE 23938
23936: GO 23963
23938: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
23939: LD_ADDR_VAR 0 3
23943: PUSH
23944: LD_INT 40
23946: PPUSH
23947: LD_VAR 0 1
23951: PPUSH
23952: CALL_OW 321
23956: PUSH
23957: LD_INT 2
23959: EQUAL
23960: ST_TO_ADDR
23961: GO 23997
23963: LD_INT 27
23965: DOUBLE
23966: EQUAL
23967: IFTRUE 23971
23969: GO 23996
23971: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
23972: LD_ADDR_VAR 0 3
23976: PUSH
23977: LD_INT 35
23979: PPUSH
23980: LD_VAR 0 1
23984: PPUSH
23985: CALL_OW 321
23989: PUSH
23990: LD_INT 2
23992: EQUAL
23993: ST_TO_ADDR
23994: GO 23997
23996: POP
// end ;
23997: LD_VAR 0 3
24001: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24002: LD_INT 0
24004: PPUSH
24005: PPUSH
24006: PPUSH
24007: PPUSH
24008: PPUSH
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
24013: PPUSH
24014: PPUSH
// result := false ;
24015: LD_ADDR_VAR 0 6
24019: PUSH
24020: LD_INT 0
24022: ST_TO_ADDR
// if btype = b_depot then
24023: LD_VAR 0 2
24027: PUSH
24028: LD_INT 0
24030: EQUAL
24031: IFFALSE 24043
// begin result := true ;
24033: LD_ADDR_VAR 0 6
24037: PUSH
24038: LD_INT 1
24040: ST_TO_ADDR
// exit ;
24041: GO 24897
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24043: LD_VAR 0 1
24047: NOT
24048: IFTRUE 24073
24050: PUSH
24051: LD_VAR 0 1
24055: PPUSH
24056: CALL_OW 266
24060: PUSH
24061: LD_INT 0
24063: PUSH
24064: LD_INT 1
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: IN
24071: NOT
24072: OR
24073: IFTRUE 24082
24075: PUSH
24076: LD_VAR 0 2
24080: NOT
24081: OR
24082: IFTRUE 24118
24084: PUSH
24085: LD_VAR 0 5
24089: PUSH
24090: LD_INT 0
24092: PUSH
24093: LD_INT 1
24095: PUSH
24096: LD_INT 2
24098: PUSH
24099: LD_INT 3
24101: PUSH
24102: LD_INT 4
24104: PUSH
24105: LD_INT 5
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: LIST
24112: LIST
24113: LIST
24114: LIST
24115: IN
24116: NOT
24117: OR
24118: IFTRUE 24137
24120: PUSH
24121: LD_VAR 0 3
24125: PPUSH
24126: LD_VAR 0 4
24130: PPUSH
24131: CALL_OW 488
24135: NOT
24136: OR
24137: IFFALSE 24141
// exit ;
24139: GO 24897
// side := GetSide ( depot ) ;
24141: LD_ADDR_VAR 0 9
24145: PUSH
24146: LD_VAR 0 1
24150: PPUSH
24151: CALL_OW 255
24155: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24156: LD_VAR 0 9
24160: PPUSH
24161: LD_VAR 0 2
24165: PPUSH
24166: CALL 23626 0 2
24170: NOT
24171: IFFALSE 24175
// exit ;
24173: GO 24897
// pom := GetBase ( depot ) ;
24175: LD_ADDR_VAR 0 10
24179: PUSH
24180: LD_VAR 0 1
24184: PPUSH
24185: CALL_OW 274
24189: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24190: LD_ADDR_VAR 0 11
24194: PUSH
24195: LD_VAR 0 2
24199: PPUSH
24200: LD_VAR 0 1
24204: PPUSH
24205: CALL_OW 248
24209: PPUSH
24210: CALL_OW 450
24214: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24215: LD_VAR 0 10
24219: PPUSH
24220: LD_INT 1
24222: PPUSH
24223: CALL_OW 275
24227: PUSH
24228: LD_VAR 0 11
24232: PUSH
24233: LD_INT 1
24235: ARRAY
24236: GREATEREQUAL
24237: IFFALSE 24263
24239: PUSH
24240: LD_VAR 0 10
24244: PPUSH
24245: LD_INT 2
24247: PPUSH
24248: CALL_OW 275
24252: PUSH
24253: LD_VAR 0 11
24257: PUSH
24258: LD_INT 2
24260: ARRAY
24261: GREATEREQUAL
24262: AND
24263: IFFALSE 24289
24265: PUSH
24266: LD_VAR 0 10
24270: PPUSH
24271: LD_INT 3
24273: PPUSH
24274: CALL_OW 275
24278: PUSH
24279: LD_VAR 0 11
24283: PUSH
24284: LD_INT 3
24286: ARRAY
24287: GREATEREQUAL
24288: AND
24289: NOT
24290: IFFALSE 24294
// exit ;
24292: GO 24897
// if GetBType ( depot ) = b_depot then
24294: LD_VAR 0 1
24298: PPUSH
24299: CALL_OW 266
24303: PUSH
24304: LD_INT 0
24306: EQUAL
24307: IFFALSE 24319
// dist := 28 else
24309: LD_ADDR_VAR 0 14
24313: PUSH
24314: LD_INT 28
24316: ST_TO_ADDR
24317: GO 24327
// dist := 36 ;
24319: LD_ADDR_VAR 0 14
24323: PUSH
24324: LD_INT 36
24326: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24327: LD_VAR 0 1
24331: PPUSH
24332: LD_VAR 0 3
24336: PPUSH
24337: LD_VAR 0 4
24341: PPUSH
24342: CALL_OW 297
24346: PUSH
24347: LD_VAR 0 14
24351: GREATER
24352: IFFALSE 24356
// exit ;
24354: GO 24897
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24356: LD_ADDR_VAR 0 12
24360: PUSH
24361: LD_VAR 0 2
24365: PPUSH
24366: LD_VAR 0 3
24370: PPUSH
24371: LD_VAR 0 4
24375: PPUSH
24376: LD_VAR 0 5
24380: PPUSH
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 248
24390: PPUSH
24391: LD_INT 0
24393: PPUSH
24394: CALL 24902 0 6
24398: ST_TO_ADDR
// if not hexes then
24399: LD_VAR 0 12
24403: NOT
24404: IFFALSE 24408
// exit ;
24406: GO 24897
// hex := GetHexInfo ( x , y ) ;
24408: LD_ADDR_VAR 0 15
24412: PUSH
24413: LD_VAR 0 3
24417: PPUSH
24418: LD_VAR 0 4
24422: PPUSH
24423: CALL_OW 546
24427: ST_TO_ADDR
// if hex [ 1 ] then
24428: LD_VAR 0 15
24432: PUSH
24433: LD_INT 1
24435: ARRAY
24436: IFFALSE 24440
// exit ;
24438: GO 24897
// height := hex [ 2 ] ;
24440: LD_ADDR_VAR 0 13
24444: PUSH
24445: LD_VAR 0 15
24449: PUSH
24450: LD_INT 2
24452: ARRAY
24453: ST_TO_ADDR
// for i = 1 to hexes do
24454: LD_ADDR_VAR 0 7
24458: PUSH
24459: DOUBLE
24460: LD_INT 1
24462: DEC
24463: ST_TO_ADDR
24464: LD_VAR 0 12
24468: PUSH
24469: FOR_TO
24470: IFFALSE 24814
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24472: LD_VAR 0 12
24476: PUSH
24477: LD_VAR 0 7
24481: ARRAY
24482: PUSH
24483: LD_INT 1
24485: ARRAY
24486: PPUSH
24487: LD_VAR 0 12
24491: PUSH
24492: LD_VAR 0 7
24496: ARRAY
24497: PUSH
24498: LD_INT 2
24500: ARRAY
24501: PPUSH
24502: CALL_OW 488
24506: NOT
24507: IFTRUE 24549
24509: PUSH
24510: LD_VAR 0 12
24514: PUSH
24515: LD_VAR 0 7
24519: ARRAY
24520: PUSH
24521: LD_INT 1
24523: ARRAY
24524: PPUSH
24525: LD_VAR 0 12
24529: PUSH
24530: LD_VAR 0 7
24534: ARRAY
24535: PUSH
24536: LD_INT 2
24538: ARRAY
24539: PPUSH
24540: CALL_OW 428
24544: PUSH
24545: LD_INT 0
24547: GREATER
24548: OR
24549: IFTRUE 24587
24551: PUSH
24552: LD_VAR 0 12
24556: PUSH
24557: LD_VAR 0 7
24561: ARRAY
24562: PUSH
24563: LD_INT 1
24565: ARRAY
24566: PPUSH
24567: LD_VAR 0 12
24571: PUSH
24572: LD_VAR 0 7
24576: ARRAY
24577: PUSH
24578: LD_INT 2
24580: ARRAY
24581: PPUSH
24582: CALL_OW 351
24586: OR
24587: IFFALSE 24593
// exit ;
24589: POP
24590: POP
24591: GO 24897
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24593: LD_ADDR_VAR 0 8
24597: PUSH
24598: LD_VAR 0 12
24602: PUSH
24603: LD_VAR 0 7
24607: ARRAY
24608: PUSH
24609: LD_INT 1
24611: ARRAY
24612: PPUSH
24613: LD_VAR 0 12
24617: PUSH
24618: LD_VAR 0 7
24622: ARRAY
24623: PUSH
24624: LD_INT 2
24626: ARRAY
24627: PPUSH
24628: CALL_OW 546
24632: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24633: LD_VAR 0 8
24637: PUSH
24638: LD_INT 1
24640: ARRAY
24641: IFTRUE 24663
24643: PUSH
24644: LD_VAR 0 8
24648: PUSH
24649: LD_INT 2
24651: ARRAY
24652: PUSH
24653: LD_VAR 0 13
24657: PUSH
24658: LD_INT 2
24660: PLUS
24661: GREATER
24662: OR
24663: IFTRUE 24685
24665: PUSH
24666: LD_VAR 0 8
24670: PUSH
24671: LD_INT 2
24673: ARRAY
24674: PUSH
24675: LD_VAR 0 13
24679: PUSH
24680: LD_INT 2
24682: MINUS
24683: LESS
24684: OR
24685: IFTRUE 24753
24687: PUSH
24688: LD_VAR 0 8
24692: PUSH
24693: LD_INT 3
24695: ARRAY
24696: PUSH
24697: LD_INT 0
24699: PUSH
24700: LD_INT 8
24702: PUSH
24703: LD_INT 9
24705: PUSH
24706: LD_INT 10
24708: PUSH
24709: LD_INT 11
24711: PUSH
24712: LD_INT 12
24714: PUSH
24715: LD_INT 13
24717: PUSH
24718: LD_INT 16
24720: PUSH
24721: LD_INT 17
24723: PUSH
24724: LD_INT 18
24726: PUSH
24727: LD_INT 19
24729: PUSH
24730: LD_INT 20
24732: PUSH
24733: LD_INT 21
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: LIST
24748: LIST
24749: LIST
24750: IN
24751: NOT
24752: OR
24753: IFTRUE 24766
24755: PUSH
24756: LD_VAR 0 8
24760: PUSH
24761: LD_INT 5
24763: ARRAY
24764: NOT
24765: OR
24766: IFTRUE 24806
24768: PUSH
24769: LD_VAR 0 8
24773: PUSH
24774: LD_INT 6
24776: ARRAY
24777: PUSH
24778: LD_INT 1
24780: PUSH
24781: LD_INT 2
24783: PUSH
24784: LD_INT 7
24786: PUSH
24787: LD_INT 9
24789: PUSH
24790: LD_INT 10
24792: PUSH
24793: LD_INT 11
24795: PUSH
24796: EMPTY
24797: LIST
24798: LIST
24799: LIST
24800: LIST
24801: LIST
24802: LIST
24803: IN
24804: NOT
24805: OR
24806: IFFALSE 24812
// exit ;
24808: POP
24809: POP
24810: GO 24897
// end ;
24812: GO 24469
24814: POP
24815: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24816: LD_VAR 0 9
24820: PPUSH
24821: LD_VAR 0 3
24825: PPUSH
24826: LD_VAR 0 4
24830: PPUSH
24831: LD_INT 20
24833: PPUSH
24834: CALL 16716 0 4
24838: PUSH
24839: LD_INT 4
24841: ARRAY
24842: IFFALSE 24846
// exit ;
24844: GO 24897
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24846: LD_VAR 0 2
24850: PUSH
24851: LD_INT 29
24853: PUSH
24854: LD_INT 30
24856: PUSH
24857: EMPTY
24858: LIST
24859: LIST
24860: IN
24861: IFFALSE 24885
24863: PUSH
24864: LD_VAR 0 3
24868: PPUSH
24869: LD_VAR 0 4
24873: PPUSH
24874: LD_VAR 0 9
24878: PPUSH
24879: CALL_OW 440
24883: NOT
24884: AND
24885: IFFALSE 24889
// exit ;
24887: GO 24897
// result := true ;
24889: LD_ADDR_VAR 0 6
24893: PUSH
24894: LD_INT 1
24896: ST_TO_ADDR
// end ;
24897: LD_VAR 0 6
24901: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24902: LD_INT 0
24904: PPUSH
24905: PPUSH
24906: PPUSH
24907: PPUSH
24908: PPUSH
24909: PPUSH
24910: PPUSH
24911: PPUSH
24912: PPUSH
24913: PPUSH
24914: PPUSH
24915: PPUSH
24916: PPUSH
24917: PPUSH
24918: PPUSH
24919: PPUSH
24920: PPUSH
24921: PPUSH
24922: PPUSH
24923: PPUSH
24924: PPUSH
24925: PPUSH
24926: PPUSH
24927: PPUSH
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
24937: PPUSH
24938: PPUSH
24939: PPUSH
24940: PPUSH
24941: PPUSH
24942: PPUSH
24943: PPUSH
24944: PPUSH
24945: PPUSH
24946: PPUSH
24947: PPUSH
24948: PPUSH
24949: PPUSH
24950: PPUSH
24951: PPUSH
24952: PPUSH
24953: PPUSH
24954: PPUSH
24955: PPUSH
24956: PPUSH
24957: PPUSH
24958: PPUSH
24959: PPUSH
24960: PPUSH
24961: PPUSH
// result = [ ] ;
24962: LD_ADDR_VAR 0 7
24966: PUSH
24967: EMPTY
24968: ST_TO_ADDR
// temp_list = [ ] ;
24969: LD_ADDR_VAR 0 9
24973: PUSH
24974: EMPTY
24975: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
24976: LD_VAR 0 4
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 1
24986: PUSH
24987: LD_INT 2
24989: PUSH
24990: LD_INT 3
24992: PUSH
24993: LD_INT 4
24995: PUSH
24996: LD_INT 5
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: LIST
25003: LIST
25004: LIST
25005: LIST
25006: IN
25007: NOT
25008: IFTRUE 25051
25010: PUSH
25011: LD_VAR 0 1
25015: PUSH
25016: LD_INT 0
25018: PUSH
25019: LD_INT 1
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: IN
25026: IFFALSE 25050
25028: PUSH
25029: LD_VAR 0 5
25033: PUSH
25034: LD_INT 1
25036: PUSH
25037: LD_INT 2
25039: PUSH
25040: LD_INT 3
25042: PUSH
25043: EMPTY
25044: LIST
25045: LIST
25046: LIST
25047: IN
25048: NOT
25049: AND
25050: OR
25051: IFFALSE 25055
// exit ;
25053: GO 43454
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25055: LD_VAR 0 1
25059: PUSH
25060: LD_INT 6
25062: PUSH
25063: LD_INT 7
25065: PUSH
25066: LD_INT 8
25068: PUSH
25069: LD_INT 13
25071: PUSH
25072: LD_INT 12
25074: PUSH
25075: LD_INT 15
25077: PUSH
25078: LD_INT 11
25080: PUSH
25081: LD_INT 14
25083: PUSH
25084: LD_INT 10
25086: PUSH
25087: EMPTY
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: IN
25098: IFFALSE 25108
// btype = b_lab ;
25100: LD_ADDR_VAR 0 1
25104: PUSH
25105: LD_INT 6
25107: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25108: LD_VAR 0 6
25112: PUSH
25113: LD_INT 0
25115: PUSH
25116: LD_INT 1
25118: PUSH
25119: LD_INT 2
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: LIST
25126: IN
25127: NOT
25128: IFTRUE 25196
25130: PUSH
25131: LD_VAR 0 1
25135: PUSH
25136: LD_INT 0
25138: PUSH
25139: LD_INT 1
25141: PUSH
25142: LD_INT 2
25144: PUSH
25145: LD_INT 3
25147: PUSH
25148: LD_INT 6
25150: PUSH
25151: LD_INT 36
25153: PUSH
25154: LD_INT 4
25156: PUSH
25157: LD_INT 5
25159: PUSH
25160: LD_INT 31
25162: PUSH
25163: LD_INT 32
25165: PUSH
25166: LD_INT 33
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: IN
25182: NOT
25183: IFFALSE 25195
25185: PUSH
25186: LD_VAR 0 6
25190: PUSH
25191: LD_INT 1
25193: EQUAL
25194: AND
25195: OR
25196: IFTRUE 25228
25198: PUSH
25199: LD_VAR 0 1
25203: PUSH
25204: LD_INT 2
25206: PUSH
25207: LD_INT 3
25209: PUSH
25210: EMPTY
25211: LIST
25212: LIST
25213: IN
25214: NOT
25215: IFFALSE 25227
25217: PUSH
25218: LD_VAR 0 6
25222: PUSH
25223: LD_INT 2
25225: EQUAL
25226: AND
25227: OR
25228: IFFALSE 25238
// mode = 0 ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_INT 0
25237: ST_TO_ADDR
// case mode of 0 :
25238: LD_VAR 0 6
25242: PUSH
25243: LD_INT 0
25245: DOUBLE
25246: EQUAL
25247: IFTRUE 25251
25249: GO 36704
25251: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25252: LD_ADDR_VAR 0 11
25256: PUSH
25257: LD_INT 0
25259: PUSH
25260: LD_INT 0
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 0
25269: PUSH
25270: LD_INT 1
25272: NEG
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: PUSH
25278: LD_INT 1
25280: PUSH
25281: LD_INT 0
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PUSH
25288: LD_INT 1
25290: PUSH
25291: LD_INT 1
25293: PUSH
25294: EMPTY
25295: LIST
25296: LIST
25297: PUSH
25298: LD_INT 0
25300: PUSH
25301: LD_INT 1
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: NEG
25311: PUSH
25312: LD_INT 0
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 1
25321: NEG
25322: PUSH
25323: LD_INT 1
25325: NEG
25326: PUSH
25327: EMPTY
25328: LIST
25329: LIST
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: LD_INT 2
25337: NEG
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: PUSH
25343: LD_INT 0
25345: PUSH
25346: LD_INT 2
25348: NEG
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 1
25356: PUSH
25357: LD_INT 1
25359: NEG
25360: PUSH
25361: EMPTY
25362: LIST
25363: LIST
25364: PUSH
25365: LD_INT 1
25367: PUSH
25368: LD_INT 2
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 0
25377: PUSH
25378: LD_INT 2
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: LD_INT 1
25387: NEG
25388: PUSH
25389: LD_INT 1
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: PUSH
25396: LD_INT 1
25398: PUSH
25399: LD_INT 3
25401: PUSH
25402: EMPTY
25403: LIST
25404: LIST
25405: PUSH
25406: LD_INT 0
25408: PUSH
25409: LD_INT 3
25411: PUSH
25412: EMPTY
25413: LIST
25414: LIST
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: LD_INT 2
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: EMPTY
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: LIST
25436: LIST
25437: LIST
25438: LIST
25439: LIST
25440: LIST
25441: LIST
25442: LIST
25443: LIST
25444: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25445: LD_ADDR_VAR 0 12
25449: PUSH
25450: LD_INT 0
25452: PUSH
25453: LD_INT 0
25455: PUSH
25456: EMPTY
25457: LIST
25458: LIST
25459: PUSH
25460: LD_INT 0
25462: PUSH
25463: LD_INT 1
25465: NEG
25466: PUSH
25467: EMPTY
25468: LIST
25469: LIST
25470: PUSH
25471: LD_INT 1
25473: PUSH
25474: LD_INT 0
25476: PUSH
25477: EMPTY
25478: LIST
25479: LIST
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 1
25486: PUSH
25487: EMPTY
25488: LIST
25489: LIST
25490: PUSH
25491: LD_INT 0
25493: PUSH
25494: LD_INT 1
25496: PUSH
25497: EMPTY
25498: LIST
25499: LIST
25500: PUSH
25501: LD_INT 1
25503: NEG
25504: PUSH
25505: LD_INT 0
25507: PUSH
25508: EMPTY
25509: LIST
25510: LIST
25511: PUSH
25512: LD_INT 1
25514: NEG
25515: PUSH
25516: LD_INT 1
25518: NEG
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: PUSH
25524: LD_INT 1
25526: PUSH
25527: LD_INT 1
25529: NEG
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 2
25537: PUSH
25538: LD_INT 0
25540: PUSH
25541: EMPTY
25542: LIST
25543: LIST
25544: PUSH
25545: LD_INT 2
25547: PUSH
25548: LD_INT 1
25550: PUSH
25551: EMPTY
25552: LIST
25553: LIST
25554: PUSH
25555: LD_INT 1
25557: NEG
25558: PUSH
25559: LD_INT 1
25561: PUSH
25562: EMPTY
25563: LIST
25564: LIST
25565: PUSH
25566: LD_INT 2
25568: NEG
25569: PUSH
25570: LD_INT 0
25572: PUSH
25573: EMPTY
25574: LIST
25575: LIST
25576: PUSH
25577: LD_INT 2
25579: NEG
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 2
25591: NEG
25592: PUSH
25593: LD_INT 1
25595: PUSH
25596: EMPTY
25597: LIST
25598: LIST
25599: PUSH
25600: LD_INT 3
25602: NEG
25603: PUSH
25604: LD_INT 0
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: PUSH
25611: LD_INT 3
25613: NEG
25614: PUSH
25615: LD_INT 1
25617: NEG
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: LIST
25627: LIST
25628: LIST
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: LIST
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: LIST
25639: LIST
25640: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25641: LD_ADDR_VAR 0 13
25645: PUSH
25646: LD_INT 0
25648: PUSH
25649: LD_INT 0
25651: PUSH
25652: EMPTY
25653: LIST
25654: LIST
25655: PUSH
25656: LD_INT 0
25658: PUSH
25659: LD_INT 1
25661: NEG
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PUSH
25667: LD_INT 1
25669: PUSH
25670: LD_INT 0
25672: PUSH
25673: EMPTY
25674: LIST
25675: LIST
25676: PUSH
25677: LD_INT 1
25679: PUSH
25680: LD_INT 1
25682: PUSH
25683: EMPTY
25684: LIST
25685: LIST
25686: PUSH
25687: LD_INT 0
25689: PUSH
25690: LD_INT 1
25692: PUSH
25693: EMPTY
25694: LIST
25695: LIST
25696: PUSH
25697: LD_INT 1
25699: NEG
25700: PUSH
25701: LD_INT 0
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: LD_INT 1
25714: NEG
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: LD_INT 1
25722: NEG
25723: PUSH
25724: LD_INT 2
25726: NEG
25727: PUSH
25728: EMPTY
25729: LIST
25730: LIST
25731: PUSH
25732: LD_INT 2
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 2
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: LD_INT 1
25754: PUSH
25755: LD_INT 2
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 2
25764: NEG
25765: PUSH
25766: LD_INT 1
25768: NEG
25769: PUSH
25770: EMPTY
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 2
25776: NEG
25777: PUSH
25778: LD_INT 2
25780: NEG
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: LD_INT 2
25788: NEG
25789: PUSH
25790: LD_INT 3
25792: NEG
25793: PUSH
25794: EMPTY
25795: LIST
25796: LIST
25797: PUSH
25798: LD_INT 3
25800: NEG
25801: PUSH
25802: LD_INT 2
25804: NEG
25805: PUSH
25806: EMPTY
25807: LIST
25808: LIST
25809: PUSH
25810: LD_INT 3
25812: NEG
25813: PUSH
25814: LD_INT 3
25816: NEG
25817: PUSH
25818: EMPTY
25819: LIST
25820: LIST
25821: PUSH
25822: EMPTY
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: LIST
25832: LIST
25833: LIST
25834: LIST
25835: LIST
25836: LIST
25837: LIST
25838: LIST
25839: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25840: LD_ADDR_VAR 0 14
25844: PUSH
25845: LD_INT 0
25847: PUSH
25848: LD_INT 0
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 0
25857: PUSH
25858: LD_INT 1
25860: NEG
25861: PUSH
25862: EMPTY
25863: LIST
25864: LIST
25865: PUSH
25866: LD_INT 1
25868: PUSH
25869: LD_INT 0
25871: PUSH
25872: EMPTY
25873: LIST
25874: LIST
25875: PUSH
25876: LD_INT 1
25878: PUSH
25879: LD_INT 1
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: PUSH
25886: LD_INT 0
25888: PUSH
25889: LD_INT 1
25891: PUSH
25892: EMPTY
25893: LIST
25894: LIST
25895: PUSH
25896: LD_INT 1
25898: NEG
25899: PUSH
25900: LD_INT 0
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: LD_INT 1
25909: NEG
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: PUSH
25919: LD_INT 1
25921: NEG
25922: PUSH
25923: LD_INT 2
25925: NEG
25926: PUSH
25927: EMPTY
25928: LIST
25929: LIST
25930: PUSH
25931: LD_INT 0
25933: PUSH
25934: LD_INT 2
25936: NEG
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 1
25944: PUSH
25945: LD_INT 1
25947: NEG
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: LD_INT 1
25955: PUSH
25956: LD_INT 2
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 0
25965: PUSH
25966: LD_INT 2
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: PUSH
25973: LD_INT 1
25975: NEG
25976: PUSH
25977: LD_INT 1
25979: PUSH
25980: EMPTY
25981: LIST
25982: LIST
25983: PUSH
25984: LD_INT 1
25986: NEG
25987: PUSH
25988: LD_INT 3
25990: NEG
25991: PUSH
25992: EMPTY
25993: LIST
25994: LIST
25995: PUSH
25996: LD_INT 0
25998: PUSH
25999: LD_INT 3
26001: NEG
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: LD_INT 1
26009: PUSH
26010: LD_INT 2
26012: NEG
26013: PUSH
26014: EMPTY
26015: LIST
26016: LIST
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: LIST
26023: LIST
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: LIST
26033: LIST
26034: LIST
26035: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26036: LD_ADDR_VAR 0 15
26040: PUSH
26041: LD_INT 0
26043: PUSH
26044: LD_INT 0
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: PUSH
26051: LD_INT 0
26053: PUSH
26054: LD_INT 1
26056: NEG
26057: PUSH
26058: EMPTY
26059: LIST
26060: LIST
26061: PUSH
26062: LD_INT 1
26064: PUSH
26065: LD_INT 0
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: PUSH
26072: LD_INT 1
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 0
26084: PUSH
26085: LD_INT 1
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: LD_INT 1
26094: NEG
26095: PUSH
26096: LD_INT 0
26098: PUSH
26099: EMPTY
26100: LIST
26101: LIST
26102: PUSH
26103: LD_INT 1
26105: NEG
26106: PUSH
26107: LD_INT 1
26109: NEG
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: PUSH
26115: LD_INT 1
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: EMPTY
26123: LIST
26124: LIST
26125: PUSH
26126: LD_INT 2
26128: PUSH
26129: LD_INT 0
26131: PUSH
26132: EMPTY
26133: LIST
26134: LIST
26135: PUSH
26136: LD_INT 2
26138: PUSH
26139: LD_INT 1
26141: PUSH
26142: EMPTY
26143: LIST
26144: LIST
26145: PUSH
26146: LD_INT 1
26148: NEG
26149: PUSH
26150: LD_INT 1
26152: PUSH
26153: EMPTY
26154: LIST
26155: LIST
26156: PUSH
26157: LD_INT 2
26159: NEG
26160: PUSH
26161: LD_INT 0
26163: PUSH
26164: EMPTY
26165: LIST
26166: LIST
26167: PUSH
26168: LD_INT 2
26170: NEG
26171: PUSH
26172: LD_INT 1
26174: NEG
26175: PUSH
26176: EMPTY
26177: LIST
26178: LIST
26179: PUSH
26180: LD_INT 2
26182: PUSH
26183: LD_INT 1
26185: NEG
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 3
26193: PUSH
26194: LD_INT 0
26196: PUSH
26197: EMPTY
26198: LIST
26199: LIST
26200: PUSH
26201: LD_INT 3
26203: PUSH
26204: LD_INT 1
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: LIST
26215: LIST
26216: LIST
26217: LIST
26218: LIST
26219: LIST
26220: LIST
26221: LIST
26222: LIST
26223: LIST
26224: LIST
26225: LIST
26226: LIST
26227: LIST
26228: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26229: LD_ADDR_VAR 0 16
26233: PUSH
26234: LD_INT 0
26236: PUSH
26237: LD_INT 0
26239: PUSH
26240: EMPTY
26241: LIST
26242: LIST
26243: PUSH
26244: LD_INT 0
26246: PUSH
26247: LD_INT 1
26249: NEG
26250: PUSH
26251: EMPTY
26252: LIST
26253: LIST
26254: PUSH
26255: LD_INT 1
26257: PUSH
26258: LD_INT 0
26260: PUSH
26261: EMPTY
26262: LIST
26263: LIST
26264: PUSH
26265: LD_INT 1
26267: PUSH
26268: LD_INT 1
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: PUSH
26275: LD_INT 0
26277: PUSH
26278: LD_INT 1
26280: PUSH
26281: EMPTY
26282: LIST
26283: LIST
26284: PUSH
26285: LD_INT 1
26287: NEG
26288: PUSH
26289: LD_INT 0
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 1
26298: NEG
26299: PUSH
26300: LD_INT 1
26302: NEG
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: PUSH
26308: LD_INT 1
26310: NEG
26311: PUSH
26312: LD_INT 2
26314: NEG
26315: PUSH
26316: EMPTY
26317: LIST
26318: LIST
26319: PUSH
26320: LD_INT 2
26322: PUSH
26323: LD_INT 1
26325: PUSH
26326: EMPTY
26327: LIST
26328: LIST
26329: PUSH
26330: LD_INT 2
26332: PUSH
26333: LD_INT 2
26335: PUSH
26336: EMPTY
26337: LIST
26338: LIST
26339: PUSH
26340: LD_INT 1
26342: PUSH
26343: LD_INT 2
26345: PUSH
26346: EMPTY
26347: LIST
26348: LIST
26349: PUSH
26350: LD_INT 2
26352: NEG
26353: PUSH
26354: LD_INT 1
26356: NEG
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: LD_INT 2
26368: NEG
26369: PUSH
26370: EMPTY
26371: LIST
26372: LIST
26373: PUSH
26374: LD_INT 3
26376: PUSH
26377: LD_INT 2
26379: PUSH
26380: EMPTY
26381: LIST
26382: LIST
26383: PUSH
26384: LD_INT 3
26386: PUSH
26387: LD_INT 3
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 2
26396: PUSH
26397: LD_INT 3
26399: PUSH
26400: EMPTY
26401: LIST
26402: LIST
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: LIST
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: LIST
26415: LIST
26416: LIST
26417: LIST
26418: LIST
26419: LIST
26420: LIST
26421: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26422: LD_ADDR_VAR 0 17
26426: PUSH
26427: LD_INT 0
26429: PUSH
26430: LD_INT 0
26432: PUSH
26433: EMPTY
26434: LIST
26435: LIST
26436: PUSH
26437: LD_INT 0
26439: PUSH
26440: LD_INT 1
26442: NEG
26443: PUSH
26444: EMPTY
26445: LIST
26446: LIST
26447: PUSH
26448: LD_INT 1
26450: PUSH
26451: LD_INT 0
26453: PUSH
26454: EMPTY
26455: LIST
26456: LIST
26457: PUSH
26458: LD_INT 1
26460: PUSH
26461: LD_INT 1
26463: PUSH
26464: EMPTY
26465: LIST
26466: LIST
26467: PUSH
26468: LD_INT 0
26470: PUSH
26471: LD_INT 1
26473: PUSH
26474: EMPTY
26475: LIST
26476: LIST
26477: PUSH
26478: LD_INT 1
26480: NEG
26481: PUSH
26482: LD_INT 0
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 1
26491: NEG
26492: PUSH
26493: LD_INT 1
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 1
26503: NEG
26504: PUSH
26505: LD_INT 2
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 0
26515: PUSH
26516: LD_INT 2
26518: NEG
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 1
26526: PUSH
26527: LD_INT 1
26529: NEG
26530: PUSH
26531: EMPTY
26532: LIST
26533: LIST
26534: PUSH
26535: LD_INT 2
26537: PUSH
26538: LD_INT 0
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: PUSH
26545: LD_INT 2
26547: PUSH
26548: LD_INT 1
26550: PUSH
26551: EMPTY
26552: LIST
26553: LIST
26554: PUSH
26555: LD_INT 2
26557: PUSH
26558: LD_INT 2
26560: PUSH
26561: EMPTY
26562: LIST
26563: LIST
26564: PUSH
26565: LD_INT 1
26567: PUSH
26568: LD_INT 2
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: LD_INT 2
26580: PUSH
26581: EMPTY
26582: LIST
26583: LIST
26584: PUSH
26585: LD_INT 1
26587: NEG
26588: PUSH
26589: LD_INT 1
26591: PUSH
26592: EMPTY
26593: LIST
26594: LIST
26595: PUSH
26596: LD_INT 2
26598: NEG
26599: PUSH
26600: LD_INT 0
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: LD_INT 1
26613: NEG
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: PUSH
26619: LD_INT 2
26621: NEG
26622: PUSH
26623: LD_INT 2
26625: NEG
26626: PUSH
26627: EMPTY
26628: LIST
26629: LIST
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: LIST
26635: LIST
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: LIST
26645: LIST
26646: LIST
26647: LIST
26648: LIST
26649: LIST
26650: LIST
26651: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26652: LD_ADDR_VAR 0 18
26656: PUSH
26657: LD_INT 0
26659: PUSH
26660: LD_INT 0
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PUSH
26667: LD_INT 0
26669: PUSH
26670: LD_INT 1
26672: NEG
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: PUSH
26681: LD_INT 0
26683: PUSH
26684: EMPTY
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 1
26690: PUSH
26691: LD_INT 1
26693: PUSH
26694: EMPTY
26695: LIST
26696: LIST
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 1
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: NEG
26711: PUSH
26712: LD_INT 0
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 1
26721: NEG
26722: PUSH
26723: LD_INT 1
26725: NEG
26726: PUSH
26727: EMPTY
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 1
26733: NEG
26734: PUSH
26735: LD_INT 2
26737: NEG
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: PUSH
26743: LD_INT 0
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: EMPTY
26751: LIST
26752: LIST
26753: PUSH
26754: LD_INT 1
26756: PUSH
26757: LD_INT 1
26759: NEG
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PUSH
26765: LD_INT 2
26767: PUSH
26768: LD_INT 0
26770: PUSH
26771: EMPTY
26772: LIST
26773: LIST
26774: PUSH
26775: LD_INT 2
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 2
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 1
26797: PUSH
26798: LD_INT 2
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: LD_INT 2
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 1
26817: NEG
26818: PUSH
26819: LD_INT 1
26821: PUSH
26822: EMPTY
26823: LIST
26824: LIST
26825: PUSH
26826: LD_INT 2
26828: NEG
26829: PUSH
26830: LD_INT 0
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PUSH
26837: LD_INT 2
26839: NEG
26840: PUSH
26841: LD_INT 1
26843: NEG
26844: PUSH
26845: EMPTY
26846: LIST
26847: LIST
26848: PUSH
26849: LD_INT 2
26851: NEG
26852: PUSH
26853: LD_INT 2
26855: NEG
26856: PUSH
26857: EMPTY
26858: LIST
26859: LIST
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: LIST
26866: LIST
26867: LIST
26868: LIST
26869: LIST
26870: LIST
26871: LIST
26872: LIST
26873: LIST
26874: LIST
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: LIST
26881: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26882: LD_ADDR_VAR 0 19
26886: PUSH
26887: LD_INT 0
26889: PUSH
26890: LD_INT 0
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 1
26902: NEG
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: PUSH
26911: LD_INT 0
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 1
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: LD_INT 0
26930: PUSH
26931: LD_INT 1
26933: PUSH
26934: EMPTY
26935: LIST
26936: LIST
26937: PUSH
26938: LD_INT 1
26940: NEG
26941: PUSH
26942: LD_INT 0
26944: PUSH
26945: EMPTY
26946: LIST
26947: LIST
26948: PUSH
26949: LD_INT 1
26951: NEG
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 1
26963: NEG
26964: PUSH
26965: LD_INT 2
26967: NEG
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: PUSH
26973: LD_INT 0
26975: PUSH
26976: LD_INT 2
26978: NEG
26979: PUSH
26980: EMPTY
26981: LIST
26982: LIST
26983: PUSH
26984: LD_INT 1
26986: PUSH
26987: LD_INT 1
26989: NEG
26990: PUSH
26991: EMPTY
26992: LIST
26993: LIST
26994: PUSH
26995: LD_INT 2
26997: PUSH
26998: LD_INT 0
27000: PUSH
27001: EMPTY
27002: LIST
27003: LIST
27004: PUSH
27005: LD_INT 2
27007: PUSH
27008: LD_INT 1
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: LD_INT 2
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PUSH
27025: LD_INT 1
27027: PUSH
27028: LD_INT 2
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: LD_INT 2
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 1
27047: NEG
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: LD_INT 2
27058: NEG
27059: PUSH
27060: LD_INT 0
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 2
27069: NEG
27070: PUSH
27071: LD_INT 1
27073: NEG
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: NEG
27082: PUSH
27083: LD_INT 2
27085: NEG
27086: PUSH
27087: EMPTY
27088: LIST
27089: LIST
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27112: LD_ADDR_VAR 0 20
27116: PUSH
27117: LD_INT 0
27119: PUSH
27120: LD_INT 0
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 1
27132: NEG
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: PUSH
27141: LD_INT 0
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 1
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 0
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 1
27170: NEG
27171: PUSH
27172: LD_INT 0
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: LD_INT 1
27181: NEG
27182: PUSH
27183: LD_INT 1
27185: NEG
27186: PUSH
27187: EMPTY
27188: LIST
27189: LIST
27190: PUSH
27191: LD_INT 1
27193: NEG
27194: PUSH
27195: LD_INT 2
27197: NEG
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: PUSH
27203: LD_INT 0
27205: PUSH
27206: LD_INT 2
27208: NEG
27209: PUSH
27210: EMPTY
27211: LIST
27212: LIST
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: LD_INT 1
27219: NEG
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PUSH
27225: LD_INT 2
27227: PUSH
27228: LD_INT 0
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 2
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 1
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 1
27277: NEG
27278: PUSH
27279: LD_INT 1
27281: PUSH
27282: EMPTY
27283: LIST
27284: LIST
27285: PUSH
27286: LD_INT 2
27288: NEG
27289: PUSH
27290: LD_INT 0
27292: PUSH
27293: EMPTY
27294: LIST
27295: LIST
27296: PUSH
27297: LD_INT 2
27299: NEG
27300: PUSH
27301: LD_INT 1
27303: NEG
27304: PUSH
27305: EMPTY
27306: LIST
27307: LIST
27308: PUSH
27309: LD_INT 2
27311: NEG
27312: PUSH
27313: LD_INT 2
27315: NEG
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: LIST
27325: LIST
27326: LIST
27327: LIST
27328: LIST
27329: LIST
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: LIST
27338: LIST
27339: LIST
27340: LIST
27341: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27342: LD_ADDR_VAR 0 21
27346: PUSH
27347: LD_INT 0
27349: PUSH
27350: LD_INT 0
27352: PUSH
27353: EMPTY
27354: LIST
27355: LIST
27356: PUSH
27357: LD_INT 0
27359: PUSH
27360: LD_INT 1
27362: NEG
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: LD_INT 0
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: LD_INT 1
27383: PUSH
27384: EMPTY
27385: LIST
27386: LIST
27387: PUSH
27388: LD_INT 0
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 1
27400: NEG
27401: PUSH
27402: LD_INT 0
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PUSH
27409: LD_INT 1
27411: NEG
27412: PUSH
27413: LD_INT 1
27415: NEG
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: LD_INT 2
27427: NEG
27428: PUSH
27429: EMPTY
27430: LIST
27431: LIST
27432: PUSH
27433: LD_INT 0
27435: PUSH
27436: LD_INT 2
27438: NEG
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 1
27446: PUSH
27447: LD_INT 1
27449: NEG
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: LD_INT 2
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 2
27467: PUSH
27468: LD_INT 1
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 2
27477: PUSH
27478: LD_INT 2
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: PUSH
27485: LD_INT 1
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: EMPTY
27492: LIST
27493: LIST
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: LD_INT 2
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: PUSH
27505: LD_INT 1
27507: NEG
27508: PUSH
27509: LD_INT 1
27511: PUSH
27512: EMPTY
27513: LIST
27514: LIST
27515: PUSH
27516: LD_INT 2
27518: NEG
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 2
27529: NEG
27530: PUSH
27531: LD_INT 1
27533: NEG
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: PUSH
27539: LD_INT 2
27541: NEG
27542: PUSH
27543: LD_INT 2
27545: NEG
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: EMPTY
27552: LIST
27553: LIST
27554: LIST
27555: LIST
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27572: LD_ADDR_VAR 0 22
27576: PUSH
27577: LD_INT 0
27579: PUSH
27580: LD_INT 0
27582: PUSH
27583: EMPTY
27584: LIST
27585: LIST
27586: PUSH
27587: LD_INT 0
27589: PUSH
27590: LD_INT 1
27592: NEG
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: PUSH
27601: LD_INT 0
27603: PUSH
27604: EMPTY
27605: LIST
27606: LIST
27607: PUSH
27608: LD_INT 1
27610: PUSH
27611: LD_INT 1
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 0
27620: PUSH
27621: LD_INT 1
27623: PUSH
27624: EMPTY
27625: LIST
27626: LIST
27627: PUSH
27628: LD_INT 1
27630: NEG
27631: PUSH
27632: LD_INT 0
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: PUSH
27639: LD_INT 1
27641: NEG
27642: PUSH
27643: LD_INT 1
27645: NEG
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: PUSH
27651: LD_INT 1
27653: NEG
27654: PUSH
27655: LD_INT 2
27657: NEG
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: PUSH
27663: LD_INT 0
27665: PUSH
27666: LD_INT 2
27668: NEG
27669: PUSH
27670: EMPTY
27671: LIST
27672: LIST
27673: PUSH
27674: LD_INT 1
27676: PUSH
27677: LD_INT 1
27679: NEG
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 2
27687: PUSH
27688: LD_INT 0
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: LD_INT 2
27697: PUSH
27698: LD_INT 1
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: PUSH
27705: LD_INT 2
27707: PUSH
27708: LD_INT 2
27710: PUSH
27711: EMPTY
27712: LIST
27713: LIST
27714: PUSH
27715: LD_INT 1
27717: PUSH
27718: LD_INT 2
27720: PUSH
27721: EMPTY
27722: LIST
27723: LIST
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: LD_INT 2
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: PUSH
27735: LD_INT 1
27737: NEG
27738: PUSH
27739: LD_INT 1
27741: PUSH
27742: EMPTY
27743: LIST
27744: LIST
27745: PUSH
27746: LD_INT 2
27748: NEG
27749: PUSH
27750: LD_INT 0
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 2
27759: NEG
27760: PUSH
27761: LD_INT 1
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 2
27771: NEG
27772: PUSH
27773: LD_INT 2
27775: NEG
27776: PUSH
27777: EMPTY
27778: LIST
27779: LIST
27780: PUSH
27781: EMPTY
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: LIST
27795: LIST
27796: LIST
27797: LIST
27798: LIST
27799: LIST
27800: LIST
27801: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27802: LD_ADDR_VAR 0 23
27806: PUSH
27807: LD_INT 0
27809: PUSH
27810: LD_INT 0
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: PUSH
27817: LD_INT 0
27819: PUSH
27820: LD_INT 1
27822: NEG
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: PUSH
27838: LD_INT 1
27840: PUSH
27841: LD_INT 1
27843: PUSH
27844: EMPTY
27845: LIST
27846: LIST
27847: PUSH
27848: LD_INT 0
27850: PUSH
27851: LD_INT 1
27853: PUSH
27854: EMPTY
27855: LIST
27856: LIST
27857: PUSH
27858: LD_INT 1
27860: NEG
27861: PUSH
27862: LD_INT 0
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: PUSH
27869: LD_INT 1
27871: NEG
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: EMPTY
27878: LIST
27879: LIST
27880: PUSH
27881: LD_INT 1
27883: NEG
27884: PUSH
27885: LD_INT 2
27887: NEG
27888: PUSH
27889: EMPTY
27890: LIST
27891: LIST
27892: PUSH
27893: LD_INT 0
27895: PUSH
27896: LD_INT 2
27898: NEG
27899: PUSH
27900: EMPTY
27901: LIST
27902: LIST
27903: PUSH
27904: LD_INT 1
27906: PUSH
27907: LD_INT 1
27909: NEG
27910: PUSH
27911: EMPTY
27912: LIST
27913: LIST
27914: PUSH
27915: LD_INT 2
27917: PUSH
27918: LD_INT 0
27920: PUSH
27921: EMPTY
27922: LIST
27923: LIST
27924: PUSH
27925: LD_INT 2
27927: PUSH
27928: LD_INT 1
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: LD_INT 2
27937: PUSH
27938: LD_INT 2
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: PUSH
27945: LD_INT 1
27947: PUSH
27948: LD_INT 2
27950: PUSH
27951: EMPTY
27952: LIST
27953: LIST
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: LD_INT 2
27960: PUSH
27961: EMPTY
27962: LIST
27963: LIST
27964: PUSH
27965: LD_INT 1
27967: NEG
27968: PUSH
27969: LD_INT 1
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: PUSH
27976: LD_INT 2
27978: NEG
27979: PUSH
27980: LD_INT 0
27982: PUSH
27983: EMPTY
27984: LIST
27985: LIST
27986: PUSH
27987: LD_INT 2
27989: NEG
27990: PUSH
27991: LD_INT 1
27993: NEG
27994: PUSH
27995: EMPTY
27996: LIST
27997: LIST
27998: PUSH
27999: LD_INT 2
28001: NEG
28002: PUSH
28003: LD_INT 2
28005: NEG
28006: PUSH
28007: EMPTY
28008: LIST
28009: LIST
28010: PUSH
28011: LD_INT 2
28013: NEG
28014: PUSH
28015: LD_INT 3
28017: NEG
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 1
28025: NEG
28026: PUSH
28027: LD_INT 3
28029: NEG
28030: PUSH
28031: EMPTY
28032: LIST
28033: LIST
28034: PUSH
28035: LD_INT 1
28037: PUSH
28038: LD_INT 2
28040: NEG
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: LD_INT 2
28048: PUSH
28049: LD_INT 1
28051: NEG
28052: PUSH
28053: EMPTY
28054: LIST
28055: LIST
28056: PUSH
28057: EMPTY
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: LIST
28073: LIST
28074: LIST
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: LIST
28080: LIST
28081: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28082: LD_ADDR_VAR 0 24
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: EMPTY
28094: LIST
28095: LIST
28096: PUSH
28097: LD_INT 0
28099: PUSH
28100: LD_INT 1
28102: NEG
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: PUSH
28108: LD_INT 1
28110: PUSH
28111: LD_INT 0
28113: PUSH
28114: EMPTY
28115: LIST
28116: LIST
28117: PUSH
28118: LD_INT 1
28120: PUSH
28121: LD_INT 1
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 0
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: EMPTY
28135: LIST
28136: LIST
28137: PUSH
28138: LD_INT 1
28140: NEG
28141: PUSH
28142: LD_INT 0
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: PUSH
28149: LD_INT 1
28151: NEG
28152: PUSH
28153: LD_INT 1
28155: NEG
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: PUSH
28161: LD_INT 1
28163: NEG
28164: PUSH
28165: LD_INT 2
28167: NEG
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: PUSH
28173: LD_INT 0
28175: PUSH
28176: LD_INT 2
28178: NEG
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PUSH
28184: LD_INT 1
28186: PUSH
28187: LD_INT 1
28189: NEG
28190: PUSH
28191: EMPTY
28192: LIST
28193: LIST
28194: PUSH
28195: LD_INT 2
28197: PUSH
28198: LD_INT 0
28200: PUSH
28201: EMPTY
28202: LIST
28203: LIST
28204: PUSH
28205: LD_INT 2
28207: PUSH
28208: LD_INT 1
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: PUSH
28215: LD_INT 2
28217: PUSH
28218: LD_INT 2
28220: PUSH
28221: EMPTY
28222: LIST
28223: LIST
28224: PUSH
28225: LD_INT 1
28227: PUSH
28228: LD_INT 2
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: LD_INT 2
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: PUSH
28245: LD_INT 1
28247: NEG
28248: PUSH
28249: LD_INT 1
28251: PUSH
28252: EMPTY
28253: LIST
28254: LIST
28255: PUSH
28256: LD_INT 2
28258: NEG
28259: PUSH
28260: LD_INT 0
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 2
28269: NEG
28270: PUSH
28271: LD_INT 1
28273: NEG
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: NEG
28282: PUSH
28283: LD_INT 2
28285: NEG
28286: PUSH
28287: EMPTY
28288: LIST
28289: LIST
28290: PUSH
28291: LD_INT 1
28293: PUSH
28294: LD_INT 2
28296: NEG
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 2
28304: PUSH
28305: LD_INT 1
28307: NEG
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PUSH
28313: LD_INT 3
28315: PUSH
28316: LD_INT 1
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: PUSH
28323: LD_INT 3
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: LIST
28351: LIST
28352: LIST
28353: LIST
28354: LIST
28355: LIST
28356: LIST
28357: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28358: LD_ADDR_VAR 0 25
28362: PUSH
28363: LD_INT 0
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 0
28375: PUSH
28376: LD_INT 1
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 0
28389: PUSH
28390: EMPTY
28391: LIST
28392: LIST
28393: PUSH
28394: LD_INT 1
28396: PUSH
28397: LD_INT 1
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: LD_INT 1
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 1
28416: NEG
28417: PUSH
28418: LD_INT 0
28420: PUSH
28421: EMPTY
28422: LIST
28423: LIST
28424: PUSH
28425: LD_INT 1
28427: NEG
28428: PUSH
28429: LD_INT 1
28431: NEG
28432: PUSH
28433: EMPTY
28434: LIST
28435: LIST
28436: PUSH
28437: LD_INT 1
28439: NEG
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 0
28451: PUSH
28452: LD_INT 2
28454: NEG
28455: PUSH
28456: EMPTY
28457: LIST
28458: LIST
28459: PUSH
28460: LD_INT 1
28462: PUSH
28463: LD_INT 1
28465: NEG
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 2
28473: PUSH
28474: LD_INT 0
28476: PUSH
28477: EMPTY
28478: LIST
28479: LIST
28480: PUSH
28481: LD_INT 2
28483: PUSH
28484: LD_INT 1
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: PUSH
28491: LD_INT 2
28493: PUSH
28494: LD_INT 2
28496: PUSH
28497: EMPTY
28498: LIST
28499: LIST
28500: PUSH
28501: LD_INT 1
28503: PUSH
28504: LD_INT 2
28506: PUSH
28507: EMPTY
28508: LIST
28509: LIST
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: LD_INT 2
28516: PUSH
28517: EMPTY
28518: LIST
28519: LIST
28520: PUSH
28521: LD_INT 1
28523: NEG
28524: PUSH
28525: LD_INT 1
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 2
28534: NEG
28535: PUSH
28536: LD_INT 0
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 2
28545: NEG
28546: PUSH
28547: LD_INT 1
28549: NEG
28550: PUSH
28551: EMPTY
28552: LIST
28553: LIST
28554: PUSH
28555: LD_INT 2
28557: NEG
28558: PUSH
28559: LD_INT 2
28561: NEG
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: LD_INT 3
28569: PUSH
28570: LD_INT 1
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: PUSH
28577: LD_INT 3
28579: PUSH
28580: LD_INT 2
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: LD_INT 3
28592: PUSH
28593: EMPTY
28594: LIST
28595: LIST
28596: PUSH
28597: LD_INT 1
28599: PUSH
28600: LD_INT 3
28602: PUSH
28603: EMPTY
28604: LIST
28605: LIST
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28632: LD_ADDR_VAR 0 26
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: LD_INT 0
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 0
28649: PUSH
28650: LD_INT 1
28652: NEG
28653: PUSH
28654: EMPTY
28655: LIST
28656: LIST
28657: PUSH
28658: LD_INT 1
28660: PUSH
28661: LD_INT 0
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: LD_INT 1
28673: PUSH
28674: EMPTY
28675: LIST
28676: LIST
28677: PUSH
28678: LD_INT 0
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: PUSH
28688: LD_INT 1
28690: NEG
28691: PUSH
28692: LD_INT 0
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 1
28701: NEG
28702: PUSH
28703: LD_INT 1
28705: NEG
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: PUSH
28711: LD_INT 1
28713: NEG
28714: PUSH
28715: LD_INT 2
28717: NEG
28718: PUSH
28719: EMPTY
28720: LIST
28721: LIST
28722: PUSH
28723: LD_INT 0
28725: PUSH
28726: LD_INT 2
28728: NEG
28729: PUSH
28730: EMPTY
28731: LIST
28732: LIST
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: LD_INT 1
28739: NEG
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: PUSH
28745: LD_INT 2
28747: PUSH
28748: LD_INT 0
28750: PUSH
28751: EMPTY
28752: LIST
28753: LIST
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: LD_INT 1
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: LD_INT 2
28770: PUSH
28771: EMPTY
28772: LIST
28773: LIST
28774: PUSH
28775: LD_INT 1
28777: PUSH
28778: LD_INT 2
28780: PUSH
28781: EMPTY
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: LD_INT 2
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: PUSH
28795: LD_INT 1
28797: NEG
28798: PUSH
28799: LD_INT 1
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: PUSH
28806: LD_INT 2
28808: NEG
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 2
28819: NEG
28820: PUSH
28821: LD_INT 1
28823: NEG
28824: PUSH
28825: EMPTY
28826: LIST
28827: LIST
28828: PUSH
28829: LD_INT 2
28831: NEG
28832: PUSH
28833: LD_INT 2
28835: NEG
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 2
28843: PUSH
28844: LD_INT 3
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: LD_INT 3
28856: PUSH
28857: EMPTY
28858: LIST
28859: LIST
28860: PUSH
28861: LD_INT 1
28863: NEG
28864: PUSH
28865: LD_INT 2
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: NEG
28875: PUSH
28876: LD_INT 1
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: LIST
28907: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
28908: LD_ADDR_VAR 0 27
28912: PUSH
28913: LD_INT 0
28915: PUSH
28916: LD_INT 0
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PUSH
28923: LD_INT 0
28925: PUSH
28926: LD_INT 1
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 1
28936: PUSH
28937: LD_INT 0
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 1
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 0
28956: PUSH
28957: LD_INT 1
28959: PUSH
28960: EMPTY
28961: LIST
28962: LIST
28963: PUSH
28964: LD_INT 1
28966: NEG
28967: PUSH
28968: LD_INT 0
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 1
28977: NEG
28978: PUSH
28979: LD_INT 1
28981: NEG
28982: PUSH
28983: EMPTY
28984: LIST
28985: LIST
28986: PUSH
28987: LD_INT 1
28989: NEG
28990: PUSH
28991: LD_INT 2
28993: NEG
28994: PUSH
28995: EMPTY
28996: LIST
28997: LIST
28998: PUSH
28999: LD_INT 0
29001: PUSH
29002: LD_INT 2
29004: NEG
29005: PUSH
29006: EMPTY
29007: LIST
29008: LIST
29009: PUSH
29010: LD_INT 1
29012: PUSH
29013: LD_INT 1
29015: NEG
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 2
29023: PUSH
29024: LD_INT 0
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: LD_INT 2
29033: PUSH
29034: LD_INT 1
29036: PUSH
29037: EMPTY
29038: LIST
29039: LIST
29040: PUSH
29041: LD_INT 2
29043: PUSH
29044: LD_INT 2
29046: PUSH
29047: EMPTY
29048: LIST
29049: LIST
29050: PUSH
29051: LD_INT 1
29053: PUSH
29054: LD_INT 2
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: LD_INT 2
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 1
29073: NEG
29074: PUSH
29075: LD_INT 1
29077: PUSH
29078: EMPTY
29079: LIST
29080: LIST
29081: PUSH
29082: LD_INT 2
29084: NEG
29085: PUSH
29086: LD_INT 0
29088: PUSH
29089: EMPTY
29090: LIST
29091: LIST
29092: PUSH
29093: LD_INT 2
29095: NEG
29096: PUSH
29097: LD_INT 1
29099: NEG
29100: PUSH
29101: EMPTY
29102: LIST
29103: LIST
29104: PUSH
29105: LD_INT 2
29107: NEG
29108: PUSH
29109: LD_INT 2
29111: NEG
29112: PUSH
29113: EMPTY
29114: LIST
29115: LIST
29116: PUSH
29117: LD_INT 1
29119: NEG
29120: PUSH
29121: LD_INT 2
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 2
29130: NEG
29131: PUSH
29132: LD_INT 1
29134: PUSH
29135: EMPTY
29136: LIST
29137: LIST
29138: PUSH
29139: LD_INT 3
29141: NEG
29142: PUSH
29143: LD_INT 1
29145: NEG
29146: PUSH
29147: EMPTY
29148: LIST
29149: LIST
29150: PUSH
29151: LD_INT 3
29153: NEG
29154: PUSH
29155: LD_INT 2
29157: NEG
29158: PUSH
29159: EMPTY
29160: LIST
29161: LIST
29162: PUSH
29163: EMPTY
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: LIST
29186: LIST
29187: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29188: LD_ADDR_VAR 0 28
29192: PUSH
29193: LD_INT 0
29195: PUSH
29196: LD_INT 0
29198: PUSH
29199: EMPTY
29200: LIST
29201: LIST
29202: PUSH
29203: LD_INT 0
29205: PUSH
29206: LD_INT 1
29208: NEG
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 1
29216: PUSH
29217: LD_INT 0
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 1
29226: PUSH
29227: LD_INT 1
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 0
29236: PUSH
29237: LD_INT 1
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 1
29246: NEG
29247: PUSH
29248: LD_INT 0
29250: PUSH
29251: EMPTY
29252: LIST
29253: LIST
29254: PUSH
29255: LD_INT 1
29257: NEG
29258: PUSH
29259: LD_INT 1
29261: NEG
29262: PUSH
29263: EMPTY
29264: LIST
29265: LIST
29266: PUSH
29267: LD_INT 1
29269: NEG
29270: PUSH
29271: LD_INT 2
29273: NEG
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: LD_INT 0
29281: PUSH
29282: LD_INT 2
29284: NEG
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: PUSH
29290: LD_INT 1
29292: PUSH
29293: LD_INT 1
29295: NEG
29296: PUSH
29297: EMPTY
29298: LIST
29299: LIST
29300: PUSH
29301: LD_INT 2
29303: PUSH
29304: LD_INT 0
29306: PUSH
29307: EMPTY
29308: LIST
29309: LIST
29310: PUSH
29311: LD_INT 2
29313: PUSH
29314: LD_INT 1
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: PUSH
29321: LD_INT 2
29323: PUSH
29324: LD_INT 2
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: PUSH
29331: LD_INT 1
29333: PUSH
29334: LD_INT 2
29336: PUSH
29337: EMPTY
29338: LIST
29339: LIST
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: LD_INT 2
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 1
29353: NEG
29354: PUSH
29355: LD_INT 1
29357: PUSH
29358: EMPTY
29359: LIST
29360: LIST
29361: PUSH
29362: LD_INT 2
29364: NEG
29365: PUSH
29366: LD_INT 0
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: PUSH
29373: LD_INT 2
29375: NEG
29376: PUSH
29377: LD_INT 1
29379: NEG
29380: PUSH
29381: EMPTY
29382: LIST
29383: LIST
29384: PUSH
29385: LD_INT 2
29387: NEG
29388: PUSH
29389: LD_INT 2
29391: NEG
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PUSH
29397: LD_INT 2
29399: NEG
29400: PUSH
29401: LD_INT 3
29403: NEG
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 1
29411: NEG
29412: PUSH
29413: LD_INT 3
29415: NEG
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 3
29423: NEG
29424: PUSH
29425: LD_INT 1
29427: NEG
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: PUSH
29433: LD_INT 3
29435: NEG
29436: PUSH
29437: LD_INT 2
29439: NEG
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: PUSH
29445: EMPTY
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29470: LD_ADDR_VAR 0 29
29474: PUSH
29475: LD_INT 0
29477: PUSH
29478: LD_INT 0
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: LD_INT 1
29490: NEG
29491: PUSH
29492: EMPTY
29493: LIST
29494: LIST
29495: PUSH
29496: LD_INT 1
29498: PUSH
29499: LD_INT 0
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 1
29508: PUSH
29509: LD_INT 1
29511: PUSH
29512: EMPTY
29513: LIST
29514: LIST
29515: PUSH
29516: LD_INT 0
29518: PUSH
29519: LD_INT 1
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 1
29528: NEG
29529: PUSH
29530: LD_INT 0
29532: PUSH
29533: EMPTY
29534: LIST
29535: LIST
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: LD_INT 1
29551: NEG
29552: PUSH
29553: LD_INT 2
29555: NEG
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 0
29563: PUSH
29564: LD_INT 2
29566: NEG
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 1
29574: PUSH
29575: LD_INT 1
29577: NEG
29578: PUSH
29579: EMPTY
29580: LIST
29581: LIST
29582: PUSH
29583: LD_INT 2
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 2
29595: PUSH
29596: LD_INT 1
29598: PUSH
29599: EMPTY
29600: LIST
29601: LIST
29602: PUSH
29603: LD_INT 1
29605: PUSH
29606: LD_INT 2
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: PUSH
29613: LD_INT 0
29615: PUSH
29616: LD_INT 2
29618: PUSH
29619: EMPTY
29620: LIST
29621: LIST
29622: PUSH
29623: LD_INT 1
29625: NEG
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 2
29636: NEG
29637: PUSH
29638: LD_INT 1
29640: NEG
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: LD_INT 2
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 2
29660: NEG
29661: PUSH
29662: LD_INT 3
29664: NEG
29665: PUSH
29666: EMPTY
29667: LIST
29668: LIST
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: LD_INT 1
29675: NEG
29676: PUSH
29677: EMPTY
29678: LIST
29679: LIST
29680: PUSH
29681: LD_INT 3
29683: PUSH
29684: LD_INT 1
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: PUSH
29691: LD_INT 1
29693: PUSH
29694: LD_INT 3
29696: PUSH
29697: EMPTY
29698: LIST
29699: LIST
29700: PUSH
29701: LD_INT 1
29703: NEG
29704: PUSH
29705: LD_INT 2
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 3
29714: NEG
29715: PUSH
29716: LD_INT 2
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: LIST
29728: LIST
29729: LIST
29730: LIST
29731: LIST
29732: LIST
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: LIST
29744: LIST
29745: LIST
29746: LIST
29747: LIST
29748: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29749: LD_ADDR_VAR 0 30
29753: PUSH
29754: LD_INT 0
29756: PUSH
29757: LD_INT 0
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: PUSH
29764: LD_INT 0
29766: PUSH
29767: LD_INT 1
29769: NEG
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: PUSH
29775: LD_INT 1
29777: PUSH
29778: LD_INT 0
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: PUSH
29785: LD_INT 1
29787: PUSH
29788: LD_INT 1
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: PUSH
29795: LD_INT 0
29797: PUSH
29798: LD_INT 1
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 1
29807: NEG
29808: PUSH
29809: LD_INT 0
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PUSH
29816: LD_INT 1
29818: NEG
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: NEG
29831: PUSH
29832: LD_INT 2
29834: NEG
29835: PUSH
29836: EMPTY
29837: LIST
29838: LIST
29839: PUSH
29840: LD_INT 0
29842: PUSH
29843: LD_INT 2
29845: NEG
29846: PUSH
29847: EMPTY
29848: LIST
29849: LIST
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: LD_INT 1
29856: NEG
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 2
29864: PUSH
29865: LD_INT 0
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: PUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 1
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 2
29884: PUSH
29885: LD_INT 2
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 2
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 1
29904: NEG
29905: PUSH
29906: LD_INT 1
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: PUSH
29913: LD_INT 2
29915: NEG
29916: PUSH
29917: LD_INT 0
29919: PUSH
29920: EMPTY
29921: LIST
29922: LIST
29923: PUSH
29924: LD_INT 2
29926: NEG
29927: PUSH
29928: LD_INT 1
29930: NEG
29931: PUSH
29932: EMPTY
29933: LIST
29934: LIST
29935: PUSH
29936: LD_INT 1
29938: NEG
29939: PUSH
29940: LD_INT 3
29942: NEG
29943: PUSH
29944: EMPTY
29945: LIST
29946: LIST
29947: PUSH
29948: LD_INT 1
29950: PUSH
29951: LD_INT 2
29953: NEG
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: PUSH
29959: LD_INT 3
29961: PUSH
29962: LD_INT 2
29964: PUSH
29965: EMPTY
29966: LIST
29967: LIST
29968: PUSH
29969: LD_INT 2
29971: PUSH
29972: LD_INT 3
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: PUSH
29979: LD_INT 2
29981: NEG
29982: PUSH
29983: LD_INT 1
29985: PUSH
29986: EMPTY
29987: LIST
29988: LIST
29989: PUSH
29990: LD_INT 3
29992: NEG
29993: PUSH
29994: LD_INT 1
29996: NEG
29997: PUSH
29998: EMPTY
29999: LIST
30000: LIST
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: LIST
30006: LIST
30007: LIST
30008: LIST
30009: LIST
30010: LIST
30011: LIST
30012: LIST
30013: LIST
30014: LIST
30015: LIST
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: LIST
30026: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30027: LD_ADDR_VAR 0 31
30031: PUSH
30032: LD_INT 0
30034: PUSH
30035: LD_INT 0
30037: PUSH
30038: EMPTY
30039: LIST
30040: LIST
30041: PUSH
30042: LD_INT 0
30044: PUSH
30045: LD_INT 1
30047: NEG
30048: PUSH
30049: EMPTY
30050: LIST
30051: LIST
30052: PUSH
30053: LD_INT 1
30055: PUSH
30056: LD_INT 0
30058: PUSH
30059: EMPTY
30060: LIST
30061: LIST
30062: PUSH
30063: LD_INT 1
30065: PUSH
30066: LD_INT 1
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 0
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 1
30085: NEG
30086: PUSH
30087: LD_INT 0
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: PUSH
30094: LD_INT 1
30096: NEG
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: NEG
30109: PUSH
30110: LD_INT 2
30112: NEG
30113: PUSH
30114: EMPTY
30115: LIST
30116: LIST
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: LD_INT 1
30123: NEG
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: PUSH
30129: LD_INT 2
30131: PUSH
30132: LD_INT 0
30134: PUSH
30135: EMPTY
30136: LIST
30137: LIST
30138: PUSH
30139: LD_INT 2
30141: PUSH
30142: LD_INT 1
30144: PUSH
30145: EMPTY
30146: LIST
30147: LIST
30148: PUSH
30149: LD_INT 2
30151: PUSH
30152: LD_INT 2
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: LD_INT 2
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: PUSH
30169: LD_INT 0
30171: PUSH
30172: LD_INT 2
30174: PUSH
30175: EMPTY
30176: LIST
30177: LIST
30178: PUSH
30179: LD_INT 1
30181: NEG
30182: PUSH
30183: LD_INT 1
30185: PUSH
30186: EMPTY
30187: LIST
30188: LIST
30189: PUSH
30190: LD_INT 2
30192: NEG
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: EMPTY
30199: LIST
30200: LIST
30201: PUSH
30202: LD_INT 2
30204: NEG
30205: PUSH
30206: LD_INT 2
30208: NEG
30209: PUSH
30210: EMPTY
30211: LIST
30212: LIST
30213: PUSH
30214: LD_INT 2
30216: NEG
30217: PUSH
30218: LD_INT 3
30220: NEG
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PUSH
30226: LD_INT 2
30228: PUSH
30229: LD_INT 1
30231: NEG
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 3
30239: PUSH
30240: LD_INT 1
30242: PUSH
30243: EMPTY
30244: LIST
30245: LIST
30246: PUSH
30247: LD_INT 1
30249: PUSH
30250: LD_INT 3
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: PUSH
30257: LD_INT 1
30259: NEG
30260: PUSH
30261: LD_INT 2
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: LD_INT 3
30270: NEG
30271: PUSH
30272: LD_INT 2
30274: NEG
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: LIST
30292: LIST
30293: LIST
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: LIST
30304: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30305: LD_ADDR_VAR 0 32
30309: PUSH
30310: LD_INT 0
30312: PUSH
30313: LD_INT 0
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: PUSH
30320: LD_INT 0
30322: PUSH
30323: LD_INT 1
30325: NEG
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: PUSH
30331: LD_INT 1
30333: PUSH
30334: LD_INT 0
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 1
30343: PUSH
30344: LD_INT 1
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: LD_INT 0
30353: PUSH
30354: LD_INT 1
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 1
30363: NEG
30364: PUSH
30365: LD_INT 0
30367: PUSH
30368: EMPTY
30369: LIST
30370: LIST
30371: PUSH
30372: LD_INT 1
30374: NEG
30375: PUSH
30376: LD_INT 1
30378: NEG
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: PUSH
30384: LD_INT 1
30386: NEG
30387: PUSH
30388: LD_INT 2
30390: NEG
30391: PUSH
30392: EMPTY
30393: LIST
30394: LIST
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 2
30401: NEG
30402: PUSH
30403: EMPTY
30404: LIST
30405: LIST
30406: PUSH
30407: LD_INT 1
30409: PUSH
30410: LD_INT 1
30412: NEG
30413: PUSH
30414: EMPTY
30415: LIST
30416: LIST
30417: PUSH
30418: LD_INT 2
30420: PUSH
30421: LD_INT 1
30423: PUSH
30424: EMPTY
30425: LIST
30426: LIST
30427: PUSH
30428: LD_INT 2
30430: PUSH
30431: LD_INT 2
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: PUSH
30438: LD_INT 1
30440: PUSH
30441: LD_INT 2
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: PUSH
30448: LD_INT 0
30450: PUSH
30451: LD_INT 2
30453: PUSH
30454: EMPTY
30455: LIST
30456: LIST
30457: PUSH
30458: LD_INT 1
30460: NEG
30461: PUSH
30462: LD_INT 1
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: PUSH
30469: LD_INT 2
30471: NEG
30472: PUSH
30473: LD_INT 0
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 1
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 1
30494: NEG
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 1
30506: PUSH
30507: LD_INT 2
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 2
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 2
30527: PUSH
30528: LD_INT 3
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 2
30537: NEG
30538: PUSH
30539: LD_INT 1
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: PUSH
30546: LD_INT 3
30548: NEG
30549: PUSH
30550: LD_INT 1
30552: NEG
30553: PUSH
30554: EMPTY
30555: LIST
30556: LIST
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: LIST
30567: LIST
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: LIST
30573: LIST
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: LIST
30581: LIST
30582: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30583: LD_ADDR_VAR 0 33
30587: PUSH
30588: LD_INT 0
30590: PUSH
30591: LD_INT 0
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 0
30600: PUSH
30601: LD_INT 1
30603: NEG
30604: PUSH
30605: EMPTY
30606: LIST
30607: LIST
30608: PUSH
30609: LD_INT 1
30611: PUSH
30612: LD_INT 0
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: PUSH
30619: LD_INT 1
30621: PUSH
30622: LD_INT 1
30624: PUSH
30625: EMPTY
30626: LIST
30627: LIST
30628: PUSH
30629: LD_INT 0
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 1
30641: NEG
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 1
30652: NEG
30653: PUSH
30654: LD_INT 1
30656: NEG
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: PUSH
30662: LD_INT 1
30664: NEG
30665: PUSH
30666: LD_INT 2
30668: NEG
30669: PUSH
30670: EMPTY
30671: LIST
30672: LIST
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: LD_INT 1
30679: NEG
30680: PUSH
30681: EMPTY
30682: LIST
30683: LIST
30684: PUSH
30685: LD_INT 2
30687: PUSH
30688: LD_INT 0
30690: PUSH
30691: EMPTY
30692: LIST
30693: LIST
30694: PUSH
30695: LD_INT 2
30697: PUSH
30698: LD_INT 1
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: PUSH
30705: LD_INT 1
30707: PUSH
30708: LD_INT 2
30710: PUSH
30711: EMPTY
30712: LIST
30713: LIST
30714: PUSH
30715: LD_INT 0
30717: PUSH
30718: LD_INT 2
30720: PUSH
30721: EMPTY
30722: LIST
30723: LIST
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: LD_INT 1
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 2
30738: NEG
30739: PUSH
30740: LD_INT 0
30742: PUSH
30743: EMPTY
30744: LIST
30745: LIST
30746: PUSH
30747: LD_INT 2
30749: NEG
30750: PUSH
30751: LD_INT 1
30753: NEG
30754: PUSH
30755: EMPTY
30756: LIST
30757: LIST
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: LD_INT 2
30765: NEG
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: PUSH
30771: LD_INT 2
30773: NEG
30774: PUSH
30775: LD_INT 3
30777: NEG
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 2
30785: PUSH
30786: LD_INT 1
30788: NEG
30789: PUSH
30790: EMPTY
30791: LIST
30792: LIST
30793: PUSH
30794: LD_INT 3
30796: PUSH
30797: LD_INT 1
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: PUSH
30804: LD_INT 1
30806: PUSH
30807: LD_INT 3
30809: PUSH
30810: EMPTY
30811: LIST
30812: LIST
30813: PUSH
30814: LD_INT 1
30816: NEG
30817: PUSH
30818: LD_INT 2
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: PUSH
30825: LD_INT 3
30827: NEG
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: EMPTY
30834: LIST
30835: LIST
30836: PUSH
30837: EMPTY
30838: LIST
30839: LIST
30840: LIST
30841: LIST
30842: LIST
30843: LIST
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30862: LD_ADDR_VAR 0 34
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: LD_INT 0
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 0
30879: PUSH
30880: LD_INT 1
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 1
30890: PUSH
30891: LD_INT 0
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 1
30900: PUSH
30901: LD_INT 1
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 0
30910: PUSH
30911: LD_INT 1
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: NEG
30921: PUSH
30922: LD_INT 0
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 1
30931: NEG
30932: PUSH
30933: LD_INT 1
30935: NEG
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_INT 1
30943: NEG
30944: PUSH
30945: LD_INT 2
30947: NEG
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 0
30955: PUSH
30956: LD_INT 2
30958: NEG
30959: PUSH
30960: EMPTY
30961: LIST
30962: LIST
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: LD_INT 1
30969: NEG
30970: PUSH
30971: EMPTY
30972: LIST
30973: LIST
30974: PUSH
30975: LD_INT 2
30977: PUSH
30978: LD_INT 1
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PUSH
30985: LD_INT 2
30987: PUSH
30988: LD_INT 2
30990: PUSH
30991: EMPTY
30992: LIST
30993: LIST
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: LD_INT 2
31000: PUSH
31001: EMPTY
31002: LIST
31003: LIST
31004: PUSH
31005: LD_INT 1
31007: NEG
31008: PUSH
31009: LD_INT 1
31011: PUSH
31012: EMPTY
31013: LIST
31014: LIST
31015: PUSH
31016: LD_INT 2
31018: NEG
31019: PUSH
31020: LD_INT 0
31022: PUSH
31023: EMPTY
31024: LIST
31025: LIST
31026: PUSH
31027: LD_INT 2
31029: NEG
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: EMPTY
31036: LIST
31037: LIST
31038: PUSH
31039: LD_INT 2
31041: NEG
31042: PUSH
31043: LD_INT 2
31045: NEG
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: PUSH
31051: LD_INT 1
31053: NEG
31054: PUSH
31055: LD_INT 3
31057: NEG
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: PUSH
31063: LD_INT 1
31065: PUSH
31066: LD_INT 2
31068: NEG
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: LD_INT 3
31076: PUSH
31077: LD_INT 2
31079: PUSH
31080: EMPTY
31081: LIST
31082: LIST
31083: PUSH
31084: LD_INT 2
31086: PUSH
31087: LD_INT 3
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 2
31096: NEG
31097: PUSH
31098: LD_INT 1
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: PUSH
31105: LD_INT 3
31107: NEG
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: LIST
31132: LIST
31133: LIST
31134: LIST
31135: LIST
31136: LIST
31137: LIST
31138: LIST
31139: LIST
31140: LIST
31141: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31142: LD_ADDR_VAR 0 35
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 0
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 0
31159: PUSH
31160: LD_INT 1
31162: NEG
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 1
31170: PUSH
31171: LD_INT 0
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PUSH
31178: LD_INT 1
31180: PUSH
31181: LD_INT 1
31183: PUSH
31184: EMPTY
31185: LIST
31186: LIST
31187: PUSH
31188: LD_INT 0
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 1
31200: NEG
31201: PUSH
31202: LD_INT 0
31204: PUSH
31205: EMPTY
31206: LIST
31207: LIST
31208: PUSH
31209: LD_INT 1
31211: NEG
31212: PUSH
31213: LD_INT 1
31215: NEG
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 2
31233: NEG
31234: PUSH
31235: LD_INT 1
31237: NEG
31238: PUSH
31239: EMPTY
31240: LIST
31241: LIST
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31254: LD_ADDR_VAR 0 36
31258: PUSH
31259: LD_INT 0
31261: PUSH
31262: LD_INT 0
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PUSH
31269: LD_INT 0
31271: PUSH
31272: LD_INT 1
31274: NEG
31275: PUSH
31276: EMPTY
31277: LIST
31278: LIST
31279: PUSH
31280: LD_INT 1
31282: PUSH
31283: LD_INT 0
31285: PUSH
31286: EMPTY
31287: LIST
31288: LIST
31289: PUSH
31290: LD_INT 1
31292: PUSH
31293: LD_INT 1
31295: PUSH
31296: EMPTY
31297: LIST
31298: LIST
31299: PUSH
31300: LD_INT 0
31302: PUSH
31303: LD_INT 1
31305: PUSH
31306: EMPTY
31307: LIST
31308: LIST
31309: PUSH
31310: LD_INT 1
31312: NEG
31313: PUSH
31314: LD_INT 0
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: LD_INT 1
31323: NEG
31324: PUSH
31325: LD_INT 1
31327: NEG
31328: PUSH
31329: EMPTY
31330: LIST
31331: LIST
31332: PUSH
31333: LD_INT 1
31335: NEG
31336: PUSH
31337: LD_INT 2
31339: NEG
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: PUSH
31345: LD_INT 1
31347: PUSH
31348: LD_INT 2
31350: PUSH
31351: EMPTY
31352: LIST
31353: LIST
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: LIST
31360: LIST
31361: LIST
31362: LIST
31363: LIST
31364: LIST
31365: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31366: LD_ADDR_VAR 0 37
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: EMPTY
31378: LIST
31379: LIST
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: EMPTY
31389: LIST
31390: LIST
31391: PUSH
31392: LD_INT 1
31394: PUSH
31395: LD_INT 0
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: LD_INT 1
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: LD_INT 1
31417: PUSH
31418: EMPTY
31419: LIST
31420: LIST
31421: PUSH
31422: LD_INT 1
31424: NEG
31425: PUSH
31426: LD_INT 0
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: LD_INT 1
31439: NEG
31440: PUSH
31441: EMPTY
31442: LIST
31443: LIST
31444: PUSH
31445: LD_INT 1
31447: PUSH
31448: LD_INT 1
31450: NEG
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: PUSH
31456: LD_INT 1
31458: NEG
31459: PUSH
31460: LD_INT 1
31462: PUSH
31463: EMPTY
31464: LIST
31465: LIST
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31478: LD_ADDR_VAR 0 38
31482: PUSH
31483: LD_INT 0
31485: PUSH
31486: LD_INT 0
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 0
31495: PUSH
31496: LD_INT 1
31498: NEG
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PUSH
31504: LD_INT 1
31506: PUSH
31507: LD_INT 0
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: PUSH
31514: LD_INT 1
31516: PUSH
31517: LD_INT 1
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: PUSH
31524: LD_INT 0
31526: PUSH
31527: LD_INT 1
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: PUSH
31534: LD_INT 1
31536: NEG
31537: PUSH
31538: LD_INT 0
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: PUSH
31545: LD_INT 1
31547: NEG
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: EMPTY
31554: LIST
31555: LIST
31556: PUSH
31557: LD_INT 2
31559: PUSH
31560: LD_INT 1
31562: PUSH
31563: EMPTY
31564: LIST
31565: LIST
31566: PUSH
31567: LD_INT 2
31569: NEG
31570: PUSH
31571: LD_INT 1
31573: NEG
31574: PUSH
31575: EMPTY
31576: LIST
31577: LIST
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: LIST
31583: LIST
31584: LIST
31585: LIST
31586: LIST
31587: LIST
31588: LIST
31589: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31590: LD_ADDR_VAR 0 39
31594: PUSH
31595: LD_INT 0
31597: PUSH
31598: LD_INT 0
31600: PUSH
31601: EMPTY
31602: LIST
31603: LIST
31604: PUSH
31605: LD_INT 0
31607: PUSH
31608: LD_INT 1
31610: NEG
31611: PUSH
31612: EMPTY
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 1
31618: PUSH
31619: LD_INT 0
31621: PUSH
31622: EMPTY
31623: LIST
31624: LIST
31625: PUSH
31626: LD_INT 1
31628: PUSH
31629: LD_INT 1
31631: PUSH
31632: EMPTY
31633: LIST
31634: LIST
31635: PUSH
31636: LD_INT 0
31638: PUSH
31639: LD_INT 1
31641: PUSH
31642: EMPTY
31643: LIST
31644: LIST
31645: PUSH
31646: LD_INT 1
31648: NEG
31649: PUSH
31650: LD_INT 0
31652: PUSH
31653: EMPTY
31654: LIST
31655: LIST
31656: PUSH
31657: LD_INT 1
31659: NEG
31660: PUSH
31661: LD_INT 1
31663: NEG
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: NEG
31672: PUSH
31673: LD_INT 2
31675: NEG
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 1
31683: PUSH
31684: LD_INT 2
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31702: LD_ADDR_VAR 0 40
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: PUSH
31784: LD_INT 1
31786: NEG
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: PUSH
31792: LD_INT 1
31794: NEG
31795: PUSH
31796: LD_INT 1
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: EMPTY
31804: LIST
31805: LIST
31806: LIST
31807: LIST
31808: LIST
31809: LIST
31810: LIST
31811: LIST
31812: LIST
31813: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31814: LD_ADDR_VAR 0 41
31818: PUSH
31819: LD_INT 0
31821: PUSH
31822: LD_INT 0
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PUSH
31829: LD_INT 0
31831: PUSH
31832: LD_INT 1
31834: NEG
31835: PUSH
31836: EMPTY
31837: LIST
31838: LIST
31839: PUSH
31840: LD_INT 1
31842: PUSH
31843: LD_INT 0
31845: PUSH
31846: EMPTY
31847: LIST
31848: LIST
31849: PUSH
31850: LD_INT 1
31852: PUSH
31853: LD_INT 1
31855: PUSH
31856: EMPTY
31857: LIST
31858: LIST
31859: PUSH
31860: LD_INT 0
31862: PUSH
31863: LD_INT 1
31865: PUSH
31866: EMPTY
31867: LIST
31868: LIST
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: LD_INT 0
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: PUSH
31881: LD_INT 1
31883: NEG
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: EMPTY
31890: LIST
31891: LIST
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: LD_INT 2
31899: NEG
31900: PUSH
31901: EMPTY
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 1
31910: NEG
31911: PUSH
31912: EMPTY
31913: LIST
31914: LIST
31915: PUSH
31916: LD_INT 2
31918: PUSH
31919: LD_INT 0
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PUSH
31926: LD_INT 2
31928: PUSH
31929: LD_INT 1
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 2
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: LD_INT 2
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 1
31958: NEG
31959: PUSH
31960: LD_INT 1
31962: PUSH
31963: EMPTY
31964: LIST
31965: LIST
31966: PUSH
31967: LD_INT 2
31969: NEG
31970: PUSH
31971: LD_INT 0
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: PUSH
31978: LD_INT 2
31980: NEG
31981: PUSH
31982: LD_INT 1
31984: NEG
31985: PUSH
31986: EMPTY
31987: LIST
31988: LIST
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: LD_INT 2
31996: NEG
31997: PUSH
31998: EMPTY
31999: LIST
32000: LIST
32001: PUSH
32002: LD_INT 2
32004: NEG
32005: PUSH
32006: LD_INT 3
32008: NEG
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 2
32016: PUSH
32017: LD_INT 1
32019: NEG
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: PUSH
32025: LD_INT 3
32027: PUSH
32028: LD_INT 0
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: PUSH
32035: LD_INT 3
32037: PUSH
32038: LD_INT 1
32040: PUSH
32041: EMPTY
32042: LIST
32043: LIST
32044: PUSH
32045: LD_INT 3
32047: PUSH
32048: LD_INT 2
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 3
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 2
32067: PUSH
32068: LD_INT 3
32070: PUSH
32071: EMPTY
32072: LIST
32073: LIST
32074: PUSH
32075: LD_INT 2
32077: NEG
32078: PUSH
32079: LD_INT 1
32081: PUSH
32082: EMPTY
32083: LIST
32084: LIST
32085: PUSH
32086: LD_INT 3
32088: NEG
32089: PUSH
32090: LD_INT 0
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 3
32099: NEG
32100: PUSH
32101: LD_INT 1
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 3
32111: NEG
32112: PUSH
32113: LD_INT 2
32115: NEG
32116: PUSH
32117: EMPTY
32118: LIST
32119: LIST
32120: PUSH
32121: LD_INT 3
32123: NEG
32124: PUSH
32125: LD_INT 3
32127: NEG
32128: PUSH
32129: EMPTY
32130: LIST
32131: LIST
32132: PUSH
32133: EMPTY
32134: LIST
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: LIST
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32164: LD_ADDR_VAR 0 42
32168: PUSH
32169: LD_INT 0
32171: PUSH
32172: LD_INT 0
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 0
32181: PUSH
32182: LD_INT 1
32184: NEG
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 1
32192: PUSH
32193: LD_INT 0
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: PUSH
32200: LD_INT 1
32202: PUSH
32203: LD_INT 1
32205: PUSH
32206: EMPTY
32207: LIST
32208: LIST
32209: PUSH
32210: LD_INT 0
32212: PUSH
32213: LD_INT 1
32215: PUSH
32216: EMPTY
32217: LIST
32218: LIST
32219: PUSH
32220: LD_INT 1
32222: NEG
32223: PUSH
32224: LD_INT 0
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: LD_INT 1
32237: NEG
32238: PUSH
32239: EMPTY
32240: LIST
32241: LIST
32242: PUSH
32243: LD_INT 1
32245: NEG
32246: PUSH
32247: LD_INT 2
32249: NEG
32250: PUSH
32251: EMPTY
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 0
32257: PUSH
32258: LD_INT 2
32260: NEG
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 1
32268: PUSH
32269: LD_INT 1
32271: NEG
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 2
32279: PUSH
32280: LD_INT 1
32282: PUSH
32283: EMPTY
32284: LIST
32285: LIST
32286: PUSH
32287: LD_INT 2
32289: PUSH
32290: LD_INT 2
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: LD_INT 2
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: PUSH
32307: LD_INT 0
32309: PUSH
32310: LD_INT 2
32312: PUSH
32313: EMPTY
32314: LIST
32315: LIST
32316: PUSH
32317: LD_INT 1
32319: NEG
32320: PUSH
32321: LD_INT 1
32323: PUSH
32324: EMPTY
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: LD_INT 1
32334: NEG
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: LD_INT 2
32346: NEG
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: NEG
32355: PUSH
32356: LD_INT 3
32358: NEG
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 1
32366: NEG
32367: PUSH
32368: LD_INT 3
32370: NEG
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: PUSH
32376: LD_INT 0
32378: PUSH
32379: LD_INT 3
32381: NEG
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: LD_INT 1
32389: PUSH
32390: LD_INT 2
32392: NEG
32393: PUSH
32394: EMPTY
32395: LIST
32396: LIST
32397: PUSH
32398: LD_INT 3
32400: PUSH
32401: LD_INT 2
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: PUSH
32408: LD_INT 3
32410: PUSH
32411: LD_INT 3
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: PUSH
32418: LD_INT 2
32420: PUSH
32421: LD_INT 3
32423: PUSH
32424: EMPTY
32425: LIST
32426: LIST
32427: PUSH
32428: LD_INT 1
32430: PUSH
32431: LD_INT 3
32433: PUSH
32434: EMPTY
32435: LIST
32436: LIST
32437: PUSH
32438: LD_INT 0
32440: PUSH
32441: LD_INT 3
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 1
32450: NEG
32451: PUSH
32452: LD_INT 2
32454: PUSH
32455: EMPTY
32456: LIST
32457: LIST
32458: PUSH
32459: LD_INT 3
32461: NEG
32462: PUSH
32463: LD_INT 2
32465: NEG
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: PUSH
32471: LD_INT 3
32473: NEG
32474: PUSH
32475: LD_INT 3
32477: NEG
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32514: LD_ADDR_VAR 0 43
32518: PUSH
32519: LD_INT 0
32521: PUSH
32522: LD_INT 0
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: PUSH
32529: LD_INT 0
32531: PUSH
32532: LD_INT 1
32534: NEG
32535: PUSH
32536: EMPTY
32537: LIST
32538: LIST
32539: PUSH
32540: LD_INT 1
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: PUSH
32550: LD_INT 1
32552: PUSH
32553: LD_INT 1
32555: PUSH
32556: EMPTY
32557: LIST
32558: LIST
32559: PUSH
32560: LD_INT 0
32562: PUSH
32563: LD_INT 1
32565: PUSH
32566: EMPTY
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 1
32572: NEG
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: EMPTY
32578: LIST
32579: LIST
32580: PUSH
32581: LD_INT 1
32583: NEG
32584: PUSH
32585: LD_INT 1
32587: NEG
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 1
32595: NEG
32596: PUSH
32597: LD_INT 2
32599: NEG
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: PUSH
32605: LD_INT 0
32607: PUSH
32608: LD_INT 2
32610: NEG
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 1
32618: PUSH
32619: LD_INT 1
32621: NEG
32622: PUSH
32623: EMPTY
32624: LIST
32625: LIST
32626: PUSH
32627: LD_INT 2
32629: PUSH
32630: LD_INT 0
32632: PUSH
32633: EMPTY
32634: LIST
32635: LIST
32636: PUSH
32637: LD_INT 2
32639: PUSH
32640: LD_INT 1
32642: PUSH
32643: EMPTY
32644: LIST
32645: LIST
32646: PUSH
32647: LD_INT 1
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: EMPTY
32654: LIST
32655: LIST
32656: PUSH
32657: LD_INT 0
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: EMPTY
32664: LIST
32665: LIST
32666: PUSH
32667: LD_INT 1
32669: NEG
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 2
32680: NEG
32681: PUSH
32682: LD_INT 0
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 2
32691: NEG
32692: PUSH
32693: LD_INT 1
32695: NEG
32696: PUSH
32697: EMPTY
32698: LIST
32699: LIST
32700: PUSH
32701: LD_INT 1
32703: NEG
32704: PUSH
32705: LD_INT 3
32707: NEG
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 3
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 2
32729: NEG
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: PUSH
32735: LD_INT 2
32737: PUSH
32738: LD_INT 1
32740: NEG
32741: PUSH
32742: EMPTY
32743: LIST
32744: LIST
32745: PUSH
32746: LD_INT 3
32748: PUSH
32749: LD_INT 0
32751: PUSH
32752: EMPTY
32753: LIST
32754: LIST
32755: PUSH
32756: LD_INT 3
32758: PUSH
32759: LD_INT 1
32761: PUSH
32762: EMPTY
32763: LIST
32764: LIST
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: LD_INT 3
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: PUSH
32776: LD_INT 0
32778: PUSH
32779: LD_INT 3
32781: PUSH
32782: EMPTY
32783: LIST
32784: LIST
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: LD_INT 2
32792: PUSH
32793: EMPTY
32794: LIST
32795: LIST
32796: PUSH
32797: LD_INT 2
32799: NEG
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 3
32810: NEG
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 3
32821: NEG
32822: PUSH
32823: LD_INT 1
32825: NEG
32826: PUSH
32827: EMPTY
32828: LIST
32829: LIST
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: LIST
32852: LIST
32853: LIST
32854: LIST
32855: LIST
32856: LIST
32857: LIST
32858: LIST
32859: LIST
32860: LIST
32861: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32862: LD_ADDR_VAR 0 44
32866: PUSH
32867: LD_INT 0
32869: PUSH
32870: LD_INT 0
32872: PUSH
32873: EMPTY
32874: LIST
32875: LIST
32876: PUSH
32877: LD_INT 0
32879: PUSH
32880: LD_INT 1
32882: NEG
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 1
32890: PUSH
32891: LD_INT 0
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: PUSH
32901: LD_INT 1
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: LD_INT 0
32910: PUSH
32911: LD_INT 1
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: PUSH
32918: LD_INT 1
32920: NEG
32921: PUSH
32922: LD_INT 0
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 1
32931: NEG
32932: PUSH
32933: LD_INT 1
32935: NEG
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: NEG
32944: PUSH
32945: LD_INT 2
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: LD_INT 1
32955: PUSH
32956: LD_INT 1
32958: NEG
32959: PUSH
32960: EMPTY
32961: LIST
32962: LIST
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 0
32969: PUSH
32970: EMPTY
32971: LIST
32972: LIST
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: LD_INT 1
32979: PUSH
32980: EMPTY
32981: LIST
32982: LIST
32983: PUSH
32984: LD_INT 2
32986: PUSH
32987: LD_INT 2
32989: PUSH
32990: EMPTY
32991: LIST
32992: LIST
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: LD_INT 2
32999: PUSH
33000: EMPTY
33001: LIST
33002: LIST
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: LD_INT 1
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: LD_INT 2
33017: NEG
33018: PUSH
33019: LD_INT 0
33021: PUSH
33022: EMPTY
33023: LIST
33024: LIST
33025: PUSH
33026: LD_INT 2
33028: NEG
33029: PUSH
33030: LD_INT 1
33032: NEG
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: LD_INT 2
33044: NEG
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: LD_INT 3
33056: NEG
33057: PUSH
33058: EMPTY
33059: LIST
33060: LIST
33061: PUSH
33062: LD_INT 2
33064: PUSH
33065: LD_INT 1
33067: NEG
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 3
33075: PUSH
33076: LD_INT 0
33078: PUSH
33079: EMPTY
33080: LIST
33081: LIST
33082: PUSH
33083: LD_INT 3
33085: PUSH
33086: LD_INT 1
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 3
33095: PUSH
33096: LD_INT 2
33098: PUSH
33099: EMPTY
33100: LIST
33101: LIST
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: LD_INT 3
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 2
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 2
33125: NEG
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 3
33136: NEG
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 3
33147: NEG
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 3
33159: NEG
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 3
33171: NEG
33172: PUSH
33173: LD_INT 3
33175: NEG
33176: PUSH
33177: EMPTY
33178: LIST
33179: LIST
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: LIST
33190: LIST
33191: LIST
33192: LIST
33193: LIST
33194: LIST
33195: LIST
33196: LIST
33197: LIST
33198: LIST
33199: LIST
33200: LIST
33201: LIST
33202: LIST
33203: LIST
33204: LIST
33205: LIST
33206: LIST
33207: LIST
33208: LIST
33209: LIST
33210: LIST
33211: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33212: LD_ADDR_VAR 0 45
33216: PUSH
33217: LD_INT 0
33219: PUSH
33220: LD_INT 0
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 0
33229: PUSH
33230: LD_INT 1
33232: NEG
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 1
33240: PUSH
33241: LD_INT 0
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 1
33250: PUSH
33251: LD_INT 1
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 0
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: EMPTY
33265: LIST
33266: LIST
33267: PUSH
33268: LD_INT 1
33270: NEG
33271: PUSH
33272: LD_INT 0
33274: PUSH
33275: EMPTY
33276: LIST
33277: LIST
33278: PUSH
33279: LD_INT 1
33281: NEG
33282: PUSH
33283: LD_INT 1
33285: NEG
33286: PUSH
33287: EMPTY
33288: LIST
33289: LIST
33290: PUSH
33291: LD_INT 1
33293: NEG
33294: PUSH
33295: LD_INT 2
33297: NEG
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 0
33305: PUSH
33306: LD_INT 2
33308: NEG
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 1
33316: PUSH
33317: LD_INT 1
33319: NEG
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: PUSH
33325: LD_INT 2
33327: PUSH
33328: LD_INT 1
33330: PUSH
33331: EMPTY
33332: LIST
33333: LIST
33334: PUSH
33335: LD_INT 2
33337: PUSH
33338: LD_INT 2
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: PUSH
33345: LD_INT 1
33347: PUSH
33348: LD_INT 2
33350: PUSH
33351: EMPTY
33352: LIST
33353: LIST
33354: PUSH
33355: LD_INT 0
33357: PUSH
33358: LD_INT 2
33360: PUSH
33361: EMPTY
33362: LIST
33363: LIST
33364: PUSH
33365: LD_INT 1
33367: NEG
33368: PUSH
33369: LD_INT 1
33371: PUSH
33372: EMPTY
33373: LIST
33374: LIST
33375: PUSH
33376: LD_INT 2
33378: NEG
33379: PUSH
33380: LD_INT 1
33382: NEG
33383: PUSH
33384: EMPTY
33385: LIST
33386: LIST
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: LD_INT 2
33394: NEG
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 2
33402: NEG
33403: PUSH
33404: LD_INT 3
33406: NEG
33407: PUSH
33408: EMPTY
33409: LIST
33410: LIST
33411: PUSH
33412: LD_INT 1
33414: NEG
33415: PUSH
33416: LD_INT 3
33418: NEG
33419: PUSH
33420: EMPTY
33421: LIST
33422: LIST
33423: PUSH
33424: LD_INT 0
33426: PUSH
33427: LD_INT 3
33429: NEG
33430: PUSH
33431: EMPTY
33432: LIST
33433: LIST
33434: PUSH
33435: LD_INT 1
33437: PUSH
33438: LD_INT 2
33440: NEG
33441: PUSH
33442: EMPTY
33443: LIST
33444: LIST
33445: PUSH
33446: LD_INT 3
33448: PUSH
33449: LD_INT 2
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 3
33458: PUSH
33459: LD_INT 3
33461: PUSH
33462: EMPTY
33463: LIST
33464: LIST
33465: PUSH
33466: LD_INT 2
33468: PUSH
33469: LD_INT 3
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: PUSH
33476: LD_INT 1
33478: PUSH
33479: LD_INT 3
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: PUSH
33486: LD_INT 0
33488: PUSH
33489: LD_INT 3
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: PUSH
33496: LD_INT 1
33498: NEG
33499: PUSH
33500: LD_INT 2
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 3
33509: NEG
33510: PUSH
33511: LD_INT 2
33513: NEG
33514: PUSH
33515: EMPTY
33516: LIST
33517: LIST
33518: PUSH
33519: LD_INT 3
33521: NEG
33522: PUSH
33523: LD_INT 3
33525: NEG
33526: PUSH
33527: EMPTY
33528: LIST
33529: LIST
33530: PUSH
33531: EMPTY
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33562: LD_ADDR_VAR 0 46
33566: PUSH
33567: LD_INT 0
33569: PUSH
33570: LD_INT 0
33572: PUSH
33573: EMPTY
33574: LIST
33575: LIST
33576: PUSH
33577: LD_INT 0
33579: PUSH
33580: LD_INT 1
33582: NEG
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: PUSH
33588: LD_INT 1
33590: PUSH
33591: LD_INT 0
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 1
33600: PUSH
33601: LD_INT 1
33603: PUSH
33604: EMPTY
33605: LIST
33606: LIST
33607: PUSH
33608: LD_INT 0
33610: PUSH
33611: LD_INT 1
33613: PUSH
33614: EMPTY
33615: LIST
33616: LIST
33617: PUSH
33618: LD_INT 1
33620: NEG
33621: PUSH
33622: LD_INT 0
33624: PUSH
33625: EMPTY
33626: LIST
33627: LIST
33628: PUSH
33629: LD_INT 1
33631: NEG
33632: PUSH
33633: LD_INT 1
33635: NEG
33636: PUSH
33637: EMPTY
33638: LIST
33639: LIST
33640: PUSH
33641: LD_INT 1
33643: NEG
33644: PUSH
33645: LD_INT 2
33647: NEG
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 0
33655: PUSH
33656: LD_INT 2
33658: NEG
33659: PUSH
33660: EMPTY
33661: LIST
33662: LIST
33663: PUSH
33664: LD_INT 1
33666: PUSH
33667: LD_INT 1
33669: NEG
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: PUSH
33675: LD_INT 2
33677: PUSH
33678: LD_INT 0
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: PUSH
33685: LD_INT 2
33687: PUSH
33688: LD_INT 1
33690: PUSH
33691: EMPTY
33692: LIST
33693: LIST
33694: PUSH
33695: LD_INT 1
33697: PUSH
33698: LD_INT 2
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: PUSH
33705: LD_INT 0
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PUSH
33715: LD_INT 1
33717: NEG
33718: PUSH
33719: LD_INT 1
33721: PUSH
33722: EMPTY
33723: LIST
33724: LIST
33725: PUSH
33726: LD_INT 2
33728: NEG
33729: PUSH
33730: LD_INT 0
33732: PUSH
33733: EMPTY
33734: LIST
33735: LIST
33736: PUSH
33737: LD_INT 2
33739: NEG
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: EMPTY
33746: LIST
33747: LIST
33748: PUSH
33749: LD_INT 1
33751: NEG
33752: PUSH
33753: LD_INT 3
33755: NEG
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: PUSH
33761: LD_INT 0
33763: PUSH
33764: LD_INT 3
33766: NEG
33767: PUSH
33768: EMPTY
33769: LIST
33770: LIST
33771: PUSH
33772: LD_INT 1
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: EMPTY
33780: LIST
33781: LIST
33782: PUSH
33783: LD_INT 2
33785: PUSH
33786: LD_INT 1
33788: NEG
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 3
33796: PUSH
33797: LD_INT 0
33799: PUSH
33800: EMPTY
33801: LIST
33802: LIST
33803: PUSH
33804: LD_INT 3
33806: PUSH
33807: LD_INT 1
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: PUSH
33814: LD_INT 1
33816: PUSH
33817: LD_INT 3
33819: PUSH
33820: EMPTY
33821: LIST
33822: LIST
33823: PUSH
33824: LD_INT 0
33826: PUSH
33827: LD_INT 3
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: LD_INT 2
33840: PUSH
33841: EMPTY
33842: LIST
33843: LIST
33844: PUSH
33845: LD_INT 2
33847: NEG
33848: PUSH
33849: LD_INT 1
33851: PUSH
33852: EMPTY
33853: LIST
33854: LIST
33855: PUSH
33856: LD_INT 3
33858: NEG
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 3
33869: NEG
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: EMPTY
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33910: LD_ADDR_VAR 0 47
33914: PUSH
33915: LD_INT 0
33917: PUSH
33918: LD_INT 0
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: PUSH
33925: LD_INT 0
33927: PUSH
33928: LD_INT 1
33930: NEG
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: PUSH
33936: LD_INT 1
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: PUSH
33946: LD_INT 1
33948: PUSH
33949: LD_INT 1
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: LD_INT 0
33958: PUSH
33959: LD_INT 1
33961: PUSH
33962: EMPTY
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 1
33968: NEG
33969: PUSH
33970: LD_INT 0
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PUSH
33977: LD_INT 1
33979: NEG
33980: PUSH
33981: LD_INT 1
33983: NEG
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 1
33991: NEG
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: PUSH
34001: LD_INT 0
34003: PUSH
34004: LD_INT 2
34006: NEG
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: PUSH
34012: LD_INT 1
34014: PUSH
34015: LD_INT 1
34017: NEG
34018: PUSH
34019: EMPTY
34020: LIST
34021: LIST
34022: PUSH
34023: LD_INT 2
34025: NEG
34026: PUSH
34027: LD_INT 1
34029: NEG
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 2
34037: NEG
34038: PUSH
34039: LD_INT 2
34041: NEG
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: PUSH
34047: EMPTY
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34061: LD_ADDR_VAR 0 48
34065: PUSH
34066: LD_INT 0
34068: PUSH
34069: LD_INT 0
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 0
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 1
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 0
34109: PUSH
34110: LD_INT 1
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 0
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 1
34130: NEG
34131: PUSH
34132: LD_INT 1
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: NEG
34143: PUSH
34144: LD_INT 2
34146: NEG
34147: PUSH
34148: EMPTY
34149: LIST
34150: LIST
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: LD_INT 2
34157: NEG
34158: PUSH
34159: EMPTY
34160: LIST
34161: LIST
34162: PUSH
34163: LD_INT 1
34165: PUSH
34166: LD_INT 1
34168: NEG
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: LD_INT 0
34179: PUSH
34180: EMPTY
34181: LIST
34182: LIST
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: LD_INT 1
34189: PUSH
34190: EMPTY
34191: LIST
34192: LIST
34193: PUSH
34194: EMPTY
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34208: LD_ADDR_VAR 0 49
34212: PUSH
34213: LD_INT 0
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 0
34225: PUSH
34226: LD_INT 1
34228: NEG
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: LD_INT 0
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: LD_INT 1
34249: PUSH
34250: EMPTY
34251: LIST
34252: LIST
34253: PUSH
34254: LD_INT 0
34256: PUSH
34257: LD_INT 1
34259: PUSH
34260: EMPTY
34261: LIST
34262: LIST
34263: PUSH
34264: LD_INT 1
34266: NEG
34267: PUSH
34268: LD_INT 0
34270: PUSH
34271: EMPTY
34272: LIST
34273: LIST
34274: PUSH
34275: LD_INT 1
34277: NEG
34278: PUSH
34279: LD_INT 1
34281: NEG
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: LD_INT 1
34292: NEG
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 2
34300: PUSH
34301: LD_INT 0
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 1
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 2
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 1
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: EMPTY
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34352: LD_ADDR_VAR 0 50
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 0
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 0
34369: PUSH
34370: LD_INT 1
34372: NEG
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 1
34380: PUSH
34381: LD_INT 0
34383: PUSH
34384: EMPTY
34385: LIST
34386: LIST
34387: PUSH
34388: LD_INT 1
34390: PUSH
34391: LD_INT 1
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: PUSH
34398: LD_INT 0
34400: PUSH
34401: LD_INT 1
34403: PUSH
34404: EMPTY
34405: LIST
34406: LIST
34407: PUSH
34408: LD_INT 1
34410: NEG
34411: PUSH
34412: LD_INT 0
34414: PUSH
34415: EMPTY
34416: LIST
34417: LIST
34418: PUSH
34419: LD_INT 1
34421: NEG
34422: PUSH
34423: LD_INT 1
34425: NEG
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 2
34433: PUSH
34434: LD_INT 1
34436: PUSH
34437: EMPTY
34438: LIST
34439: LIST
34440: PUSH
34441: LD_INT 2
34443: PUSH
34444: LD_INT 2
34446: PUSH
34447: EMPTY
34448: LIST
34449: LIST
34450: PUSH
34451: LD_INT 1
34453: PUSH
34454: LD_INT 2
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: PUSH
34461: LD_INT 0
34463: PUSH
34464: LD_INT 2
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: NEG
34474: PUSH
34475: LD_INT 1
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: PUSH
34482: EMPTY
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34496: LD_ADDR_VAR 0 51
34500: PUSH
34501: LD_INT 0
34503: PUSH
34504: LD_INT 0
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: PUSH
34511: LD_INT 0
34513: PUSH
34514: LD_INT 1
34516: NEG
34517: PUSH
34518: EMPTY
34519: LIST
34520: LIST
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: EMPTY
34529: LIST
34530: LIST
34531: PUSH
34532: LD_INT 1
34534: PUSH
34535: LD_INT 1
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: PUSH
34542: LD_INT 0
34544: PUSH
34545: LD_INT 1
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 0
34558: PUSH
34559: EMPTY
34560: LIST
34561: LIST
34562: PUSH
34563: LD_INT 1
34565: NEG
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 1
34577: PUSH
34578: LD_INT 2
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 0
34587: PUSH
34588: LD_INT 2
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 1
34597: NEG
34598: PUSH
34599: LD_INT 1
34601: PUSH
34602: EMPTY
34603: LIST
34604: LIST
34605: PUSH
34606: LD_INT 2
34608: NEG
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: PUSH
34617: LD_INT 2
34619: NEG
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34643: LD_ADDR_VAR 0 52
34647: PUSH
34648: LD_INT 0
34650: PUSH
34651: LD_INT 0
34653: PUSH
34654: EMPTY
34655: LIST
34656: LIST
34657: PUSH
34658: LD_INT 0
34660: PUSH
34661: LD_INT 1
34663: NEG
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: PUSH
34669: LD_INT 1
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 1
34681: PUSH
34682: LD_INT 1
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 1
34701: NEG
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: LD_INT 1
34724: NEG
34725: PUSH
34726: LD_INT 2
34728: NEG
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: PUSH
34734: LD_INT 1
34736: NEG
34737: PUSH
34738: LD_INT 1
34740: PUSH
34741: EMPTY
34742: LIST
34743: LIST
34744: PUSH
34745: LD_INT 2
34747: NEG
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: EMPTY
34753: LIST
34754: LIST
34755: PUSH
34756: LD_INT 2
34758: NEG
34759: PUSH
34760: LD_INT 1
34762: NEG
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 2
34770: NEG
34771: PUSH
34772: LD_INT 2
34774: NEG
34775: PUSH
34776: EMPTY
34777: LIST
34778: LIST
34779: PUSH
34780: EMPTY
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34794: LD_ADDR_VAR 0 53
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: LD_INT 0
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 0
34811: PUSH
34812: LD_INT 1
34814: NEG
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 0
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 1
34835: PUSH
34836: EMPTY
34837: LIST
34838: LIST
34839: PUSH
34840: LD_INT 0
34842: PUSH
34843: LD_INT 1
34845: PUSH
34846: EMPTY
34847: LIST
34848: LIST
34849: PUSH
34850: LD_INT 1
34852: NEG
34853: PUSH
34854: LD_INT 0
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 1
34863: NEG
34864: PUSH
34865: LD_INT 1
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: LD_INT 1
34875: NEG
34876: PUSH
34877: LD_INT 2
34879: NEG
34880: PUSH
34881: EMPTY
34882: LIST
34883: LIST
34884: PUSH
34885: LD_INT 0
34887: PUSH
34888: LD_INT 2
34890: NEG
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: PUSH
34899: LD_INT 1
34901: NEG
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 2
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 2
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: PUSH
34927: LD_INT 2
34929: PUSH
34930: LD_INT 2
34932: PUSH
34933: EMPTY
34934: LIST
34935: LIST
34936: PUSH
34937: LD_INT 1
34939: PUSH
34940: LD_INT 2
34942: PUSH
34943: EMPTY
34944: LIST
34945: LIST
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: LD_INT 2
34952: PUSH
34953: EMPTY
34954: LIST
34955: LIST
34956: PUSH
34957: LD_INT 1
34959: NEG
34960: PUSH
34961: LD_INT 1
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 2
34970: NEG
34971: PUSH
34972: LD_INT 0
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 2
34981: NEG
34982: PUSH
34983: LD_INT 1
34985: NEG
34986: PUSH
34987: EMPTY
34988: LIST
34989: LIST
34990: PUSH
34991: LD_INT 2
34993: NEG
34994: PUSH
34995: LD_INT 2
34997: NEG
34998: PUSH
34999: EMPTY
35000: LIST
35001: LIST
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35024: LD_ADDR_VAR 0 54
35028: PUSH
35029: LD_INT 0
35031: PUSH
35032: LD_INT 0
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 0
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: PUSH
35053: LD_INT 0
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: PUSH
35060: LD_INT 1
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 0
35072: PUSH
35073: LD_INT 1
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: PUSH
35080: LD_INT 1
35082: NEG
35083: PUSH
35084: LD_INT 0
35086: PUSH
35087: EMPTY
35088: LIST
35089: LIST
35090: PUSH
35091: LD_INT 1
35093: NEG
35094: PUSH
35095: LD_INT 1
35097: NEG
35098: PUSH
35099: EMPTY
35100: LIST
35101: LIST
35102: PUSH
35103: LD_INT 1
35105: NEG
35106: PUSH
35107: LD_INT 2
35109: NEG
35110: PUSH
35111: EMPTY
35112: LIST
35113: LIST
35114: PUSH
35115: LD_INT 0
35117: PUSH
35118: LD_INT 2
35120: NEG
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PUSH
35126: LD_INT 1
35128: PUSH
35129: LD_INT 1
35131: NEG
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 2
35139: PUSH
35140: LD_INT 0
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: LD_INT 1
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 2
35159: PUSH
35160: LD_INT 2
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: LD_INT 2
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 2
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 2
35200: NEG
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 2
35223: NEG
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: LIST
35237: LIST
35238: LIST
35239: LIST
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35254: LD_ADDR_VAR 0 55
35258: PUSH
35259: LD_INT 0
35261: PUSH
35262: LD_INT 0
35264: PUSH
35265: EMPTY
35266: LIST
35267: LIST
35268: PUSH
35269: LD_INT 0
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 0
35285: PUSH
35286: EMPTY
35287: LIST
35288: LIST
35289: PUSH
35290: LD_INT 1
35292: PUSH
35293: LD_INT 1
35295: PUSH
35296: EMPTY
35297: LIST
35298: LIST
35299: PUSH
35300: LD_INT 0
35302: PUSH
35303: LD_INT 1
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 1
35312: NEG
35313: PUSH
35314: LD_INT 0
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: NEG
35324: PUSH
35325: LD_INT 1
35327: NEG
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 1
35335: NEG
35336: PUSH
35337: LD_INT 2
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 0
35347: PUSH
35348: LD_INT 2
35350: NEG
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 1
35358: PUSH
35359: LD_INT 1
35361: NEG
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 2
35369: PUSH
35370: LD_INT 0
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: PUSH
35377: LD_INT 2
35379: PUSH
35380: LD_INT 1
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 2
35389: PUSH
35390: LD_INT 2
35392: PUSH
35393: EMPTY
35394: LIST
35395: LIST
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: LD_INT 2
35402: PUSH
35403: EMPTY
35404: LIST
35405: LIST
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 2
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: PUSH
35417: LD_INT 1
35419: NEG
35420: PUSH
35421: LD_INT 1
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: PUSH
35428: LD_INT 2
35430: NEG
35431: PUSH
35432: LD_INT 0
35434: PUSH
35435: EMPTY
35436: LIST
35437: LIST
35438: PUSH
35439: LD_INT 2
35441: NEG
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 2
35453: NEG
35454: PUSH
35455: LD_INT 2
35457: NEG
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: PUSH
35463: EMPTY
35464: LIST
35465: LIST
35466: LIST
35467: LIST
35468: LIST
35469: LIST
35470: LIST
35471: LIST
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35484: LD_ADDR_VAR 0 56
35488: PUSH
35489: LD_INT 0
35491: PUSH
35492: LD_INT 0
35494: PUSH
35495: EMPTY
35496: LIST
35497: LIST
35498: PUSH
35499: LD_INT 0
35501: PUSH
35502: LD_INT 1
35504: NEG
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 1
35522: PUSH
35523: LD_INT 1
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 0
35532: PUSH
35533: LD_INT 1
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 1
35542: NEG
35543: PUSH
35544: LD_INT 0
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 1
35553: NEG
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 1
35565: NEG
35566: PUSH
35567: LD_INT 2
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: LD_INT 0
35577: PUSH
35578: LD_INT 2
35580: NEG
35581: PUSH
35582: EMPTY
35583: LIST
35584: LIST
35585: PUSH
35586: LD_INT 1
35588: PUSH
35589: LD_INT 1
35591: NEG
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 2
35599: PUSH
35600: LD_INT 0
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: LD_INT 2
35609: PUSH
35610: LD_INT 1
35612: PUSH
35613: EMPTY
35614: LIST
35615: LIST
35616: PUSH
35617: LD_INT 2
35619: PUSH
35620: LD_INT 2
35622: PUSH
35623: EMPTY
35624: LIST
35625: LIST
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: LD_INT 2
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 2
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: NEG
35650: PUSH
35651: LD_INT 1
35653: PUSH
35654: EMPTY
35655: LIST
35656: LIST
35657: PUSH
35658: LD_INT 2
35660: NEG
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 2
35671: NEG
35672: PUSH
35673: LD_INT 1
35675: NEG
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 2
35683: NEG
35684: PUSH
35685: LD_INT 2
35687: NEG
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: PUSH
35693: EMPTY
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35714: LD_ADDR_VAR 0 57
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 0
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: LD_INT 1
35734: NEG
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 1
35752: PUSH
35753: LD_INT 1
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: NEG
35773: PUSH
35774: LD_INT 0
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: LD_INT 1
35783: NEG
35784: PUSH
35785: LD_INT 1
35787: NEG
35788: PUSH
35789: EMPTY
35790: LIST
35791: LIST
35792: PUSH
35793: LD_INT 1
35795: NEG
35796: PUSH
35797: LD_INT 2
35799: NEG
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: PUSH
35805: LD_INT 0
35807: PUSH
35808: LD_INT 2
35810: NEG
35811: PUSH
35812: EMPTY
35813: LIST
35814: LIST
35815: PUSH
35816: LD_INT 1
35818: PUSH
35819: LD_INT 1
35821: NEG
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 2
35829: PUSH
35830: LD_INT 0
35832: PUSH
35833: EMPTY
35834: LIST
35835: LIST
35836: PUSH
35837: LD_INT 2
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 2
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 1
35859: PUSH
35860: LD_INT 2
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: NEG
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 2
35890: NEG
35891: PUSH
35892: LD_INT 0
35894: PUSH
35895: EMPTY
35896: LIST
35897: LIST
35898: PUSH
35899: LD_INT 2
35901: NEG
35902: PUSH
35903: LD_INT 1
35905: NEG
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: LD_INT 2
35913: NEG
35914: PUSH
35915: LD_INT 2
35917: NEG
35918: PUSH
35919: EMPTY
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: LIST
35927: LIST
35928: LIST
35929: LIST
35930: LIST
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35944: LD_ADDR_VAR 0 58
35948: PUSH
35949: LD_INT 0
35951: PUSH
35952: LD_INT 0
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 0
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: PUSH
35983: LD_INT 1
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 1
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: NEG
36003: PUSH
36004: LD_INT 0
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: NEG
36014: PUSH
36015: LD_INT 1
36017: NEG
36018: PUSH
36019: EMPTY
36020: LIST
36021: LIST
36022: PUSH
36023: LD_INT 1
36025: NEG
36026: PUSH
36027: LD_INT 2
36029: NEG
36030: PUSH
36031: EMPTY
36032: LIST
36033: LIST
36034: PUSH
36035: LD_INT 0
36037: PUSH
36038: LD_INT 2
36040: NEG
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 1
36048: PUSH
36049: LD_INT 1
36051: NEG
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: PUSH
36057: LD_INT 2
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 2
36069: PUSH
36070: LD_INT 1
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: LD_INT 2
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 1
36089: PUSH
36090: LD_INT 2
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: LD_INT 0
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: PUSH
36129: LD_INT 2
36131: NEG
36132: PUSH
36133: LD_INT 1
36135: NEG
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: PUSH
36141: LD_INT 2
36143: NEG
36144: PUSH
36145: LD_INT 2
36147: NEG
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36174: LD_ADDR_VAR 0 59
36178: PUSH
36179: LD_INT 0
36181: PUSH
36182: LD_INT 0
36184: PUSH
36185: EMPTY
36186: LIST
36187: LIST
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: LD_INT 1
36194: NEG
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 1
36212: PUSH
36213: LD_INT 1
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 0
36222: PUSH
36223: LD_INT 1
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 1
36243: NEG
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36262: LD_ADDR_VAR 0 60
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 0
36279: PUSH
36280: LD_INT 1
36282: NEG
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: PUSH
36291: LD_INT 0
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: EMPTY
36305: LIST
36306: LIST
36307: PUSH
36308: LD_INT 0
36310: PUSH
36311: LD_INT 1
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: PUSH
36318: LD_INT 1
36320: NEG
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 1
36335: NEG
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36350: LD_ADDR_VAR 0 61
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 0
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: LD_INT 1
36370: NEG
36371: PUSH
36372: EMPTY
36373: LIST
36374: LIST
36375: PUSH
36376: LD_INT 1
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: EMPTY
36383: LIST
36384: LIST
36385: PUSH
36386: LD_INT 1
36388: PUSH
36389: LD_INT 1
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: PUSH
36396: LD_INT 0
36398: PUSH
36399: LD_INT 1
36401: PUSH
36402: EMPTY
36403: LIST
36404: LIST
36405: PUSH
36406: LD_INT 1
36408: NEG
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: EMPTY
36414: LIST
36415: LIST
36416: PUSH
36417: LD_INT 1
36419: NEG
36420: PUSH
36421: LD_INT 1
36423: NEG
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: LIST
36433: LIST
36434: LIST
36435: LIST
36436: LIST
36437: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36438: LD_ADDR_VAR 0 62
36442: PUSH
36443: LD_INT 0
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: LD_INT 1
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: PUSH
36467: LD_INT 0
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 1
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: LD_INT 1
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PUSH
36494: LD_INT 1
36496: NEG
36497: PUSH
36498: LD_INT 0
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 1
36511: NEG
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36526: LD_ADDR_VAR 0 63
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 0
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 0
36543: PUSH
36544: LD_INT 1
36546: NEG
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: PUSH
36555: LD_INT 0
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PUSH
36562: LD_INT 1
36564: PUSH
36565: LD_INT 1
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 0
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 1
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36614: LD_ADDR_VAR 0 64
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: LD_INT 0
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 0
36631: PUSH
36632: LD_INT 1
36634: NEG
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 1
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 0
36662: PUSH
36663: LD_INT 1
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 1
36672: NEG
36673: PUSH
36674: LD_INT 0
36676: PUSH
36677: EMPTY
36678: LIST
36679: LIST
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: LD_INT 1
36687: NEG
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: PUSH
36693: EMPTY
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: ST_TO_ADDR
// end ; 1 :
36702: GO 42599
36704: LD_INT 1
36706: DOUBLE
36707: EQUAL
36708: IFTRUE 36712
36710: GO 39335
36712: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36713: LD_ADDR_VAR 0 11
36717: PUSH
36718: LD_INT 1
36720: NEG
36721: PUSH
36722: LD_INT 3
36724: NEG
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 3
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 2
36746: NEG
36747: PUSH
36748: EMPTY
36749: LIST
36750: LIST
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: LIST
36756: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36757: LD_ADDR_VAR 0 12
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 3
36775: PUSH
36776: LD_INT 0
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 3
36785: PUSH
36786: LD_INT 1
36788: PUSH
36789: EMPTY
36790: LIST
36791: LIST
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: LIST
36797: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36798: LD_ADDR_VAR 0 13
36802: PUSH
36803: LD_INT 3
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 3
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: PUSH
36826: LD_INT 3
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36838: LD_ADDR_VAR 0 14
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: LD_INT 3
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 0
36855: PUSH
36856: LD_INT 3
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: LD_INT 1
36865: NEG
36866: PUSH
36867: LD_INT 2
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: LIST
36878: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36879: LD_ADDR_VAR 0 15
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: LD_INT 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PUSH
36895: LD_INT 3
36897: NEG
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 3
36908: NEG
36909: PUSH
36910: LD_INT 1
36912: NEG
36913: PUSH
36914: EMPTY
36915: LIST
36916: LIST
36917: PUSH
36918: EMPTY
36919: LIST
36920: LIST
36921: LIST
36922: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36923: LD_ADDR_VAR 0 16
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: LD_INT 3
36934: NEG
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 3
36942: NEG
36943: PUSH
36944: LD_INT 2
36946: NEG
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 3
36954: NEG
36955: PUSH
36956: LD_INT 3
36958: NEG
36959: PUSH
36960: EMPTY
36961: LIST
36962: LIST
36963: PUSH
36964: EMPTY
36965: LIST
36966: LIST
36967: LIST
36968: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36969: LD_ADDR_VAR 0 17
36973: PUSH
36974: LD_INT 1
36976: NEG
36977: PUSH
36978: LD_INT 3
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 0
36988: PUSH
36989: LD_INT 3
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: LIST
37012: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37013: LD_ADDR_VAR 0 18
37017: PUSH
37018: LD_INT 2
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 3
37031: PUSH
37032: LD_INT 0
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 3
37041: PUSH
37042: LD_INT 1
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: LIST
37053: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37054: LD_ADDR_VAR 0 19
37058: PUSH
37059: LD_INT 3
37061: PUSH
37062: LD_INT 2
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 3
37071: PUSH
37072: LD_INT 3
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 2
37081: PUSH
37082: LD_INT 3
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: LIST
37093: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37094: LD_ADDR_VAR 0 20
37098: PUSH
37099: LD_INT 1
37101: PUSH
37102: LD_INT 3
37104: PUSH
37105: EMPTY
37106: LIST
37107: LIST
37108: PUSH
37109: LD_INT 0
37111: PUSH
37112: LD_INT 3
37114: PUSH
37115: EMPTY
37116: LIST
37117: LIST
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: LIST
37134: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37135: LD_ADDR_VAR 0 21
37139: PUSH
37140: LD_INT 2
37142: NEG
37143: PUSH
37144: LD_INT 1
37146: PUSH
37147: EMPTY
37148: LIST
37149: LIST
37150: PUSH
37151: LD_INT 3
37153: NEG
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: LD_INT 1
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: EMPTY
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37179: LD_ADDR_VAR 0 22
37183: PUSH
37184: LD_INT 2
37186: NEG
37187: PUSH
37188: LD_INT 3
37190: NEG
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 3
37198: NEG
37199: PUSH
37200: LD_INT 2
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 3
37210: NEG
37211: PUSH
37212: LD_INT 3
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37225: LD_ADDR_VAR 0 23
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: LD_INT 3
37235: NEG
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: NEG
37244: PUSH
37245: LD_INT 4
37247: NEG
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PUSH
37253: LD_INT 1
37255: PUSH
37256: LD_INT 3
37258: NEG
37259: PUSH
37260: EMPTY
37261: LIST
37262: LIST
37263: PUSH
37264: EMPTY
37265: LIST
37266: LIST
37267: LIST
37268: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37269: LD_ADDR_VAR 0 24
37273: PUSH
37274: LD_INT 3
37276: PUSH
37277: LD_INT 0
37279: PUSH
37280: EMPTY
37281: LIST
37282: LIST
37283: PUSH
37284: LD_INT 3
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 4
37297: PUSH
37298: LD_INT 1
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: LIST
37309: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37310: LD_ADDR_VAR 0 25
37314: PUSH
37315: LD_INT 3
37317: PUSH
37318: LD_INT 3
37320: PUSH
37321: EMPTY
37322: LIST
37323: LIST
37324: PUSH
37325: LD_INT 4
37327: PUSH
37328: LD_INT 3
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 3
37337: PUSH
37338: LD_INT 4
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: LIST
37349: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37350: LD_ADDR_VAR 0 26
37354: PUSH
37355: LD_INT 0
37357: PUSH
37358: LD_INT 3
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: LD_INT 4
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 3
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: EMPTY
37387: LIST
37388: LIST
37389: LIST
37390: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37391: LD_ADDR_VAR 0 27
37395: PUSH
37396: LD_INT 3
37398: NEG
37399: PUSH
37400: LD_INT 0
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 3
37409: NEG
37410: PUSH
37411: LD_INT 1
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 4
37420: NEG
37421: PUSH
37422: LD_INT 1
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: LIST
37434: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37435: LD_ADDR_VAR 0 28
37439: PUSH
37440: LD_INT 3
37442: NEG
37443: PUSH
37444: LD_INT 3
37446: NEG
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: LD_INT 3
37454: NEG
37455: PUSH
37456: LD_INT 4
37458: NEG
37459: PUSH
37460: EMPTY
37461: LIST
37462: LIST
37463: PUSH
37464: LD_INT 4
37466: NEG
37467: PUSH
37468: LD_INT 3
37470: NEG
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: LIST
37480: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37481: LD_ADDR_VAR 0 29
37485: PUSH
37486: LD_INT 1
37488: NEG
37489: PUSH
37490: LD_INT 3
37492: NEG
37493: PUSH
37494: EMPTY
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: LD_INT 3
37503: NEG
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: PUSH
37509: LD_INT 1
37511: PUSH
37512: LD_INT 2
37514: NEG
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: LD_INT 1
37522: NEG
37523: PUSH
37524: LD_INT 4
37526: NEG
37527: PUSH
37528: EMPTY
37529: LIST
37530: LIST
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: LD_INT 4
37537: NEG
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: PUSH
37543: LD_INT 1
37545: PUSH
37546: LD_INT 3
37548: NEG
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 5
37560: NEG
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: LD_INT 5
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 4
37582: NEG
37583: PUSH
37584: EMPTY
37585: LIST
37586: LIST
37587: PUSH
37588: LD_INT 1
37590: NEG
37591: PUSH
37592: LD_INT 6
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 0
37602: PUSH
37603: LD_INT 6
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 1
37613: PUSH
37614: LD_INT 5
37616: NEG
37617: PUSH
37618: EMPTY
37619: LIST
37620: LIST
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37636: LD_ADDR_VAR 0 30
37640: PUSH
37641: LD_INT 2
37643: PUSH
37644: LD_INT 1
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: LD_INT 3
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: EMPTY
37659: LIST
37660: LIST
37661: PUSH
37662: LD_INT 3
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 3
37674: PUSH
37675: LD_INT 1
37677: NEG
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 4
37685: PUSH
37686: LD_INT 0
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 4
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: EMPTY
37700: LIST
37701: LIST
37702: PUSH
37703: LD_INT 4
37705: PUSH
37706: LD_INT 1
37708: NEG
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 5
37716: PUSH
37717: LD_INT 0
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 5
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 5
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 6
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 6
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37779: LD_ADDR_VAR 0 31
37783: PUSH
37784: LD_INT 3
37786: PUSH
37787: LD_INT 2
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 3
37796: PUSH
37797: LD_INT 3
37799: PUSH
37800: EMPTY
37801: LIST
37802: LIST
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: LD_INT 3
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 4
37816: PUSH
37817: LD_INT 3
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 4
37826: PUSH
37827: LD_INT 4
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 3
37836: PUSH
37837: LD_INT 4
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 5
37846: PUSH
37847: LD_INT 4
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 5
37856: PUSH
37857: LD_INT 5
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 4
37866: PUSH
37867: LD_INT 5
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 6
37876: PUSH
37877: LD_INT 5
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 6
37886: PUSH
37887: LD_INT 6
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 5
37896: PUSH
37897: LD_INT 6
37899: PUSH
37900: EMPTY
37901: LIST
37902: LIST
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
37918: LD_ADDR_VAR 0 32
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 3
37928: PUSH
37929: EMPTY
37930: LIST
37931: LIST
37932: PUSH
37933: LD_INT 0
37935: PUSH
37936: LD_INT 3
37938: PUSH
37939: EMPTY
37940: LIST
37941: LIST
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: LD_INT 2
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 1
37956: PUSH
37957: LD_INT 4
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 0
37966: PUSH
37967: LD_INT 4
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 1
37976: NEG
37977: PUSH
37978: LD_INT 3
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: LD_INT 5
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 0
37997: PUSH
37998: LD_INT 5
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 1
38007: NEG
38008: PUSH
38009: LD_INT 4
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 6
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 6
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 5
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38061: LD_ADDR_VAR 0 33
38065: PUSH
38066: LD_INT 2
38068: NEG
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 3
38079: NEG
38080: PUSH
38081: LD_INT 0
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 3
38090: NEG
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 3
38102: NEG
38103: PUSH
38104: LD_INT 1
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 4
38113: NEG
38114: PUSH
38115: LD_INT 0
38117: PUSH
38118: EMPTY
38119: LIST
38120: LIST
38121: PUSH
38122: LD_INT 4
38124: NEG
38125: PUSH
38126: LD_INT 1
38128: NEG
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 4
38136: NEG
38137: PUSH
38138: LD_INT 1
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 5
38147: NEG
38148: PUSH
38149: LD_INT 0
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: PUSH
38156: LD_INT 5
38158: NEG
38159: PUSH
38160: LD_INT 1
38162: NEG
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 5
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 6
38181: NEG
38182: PUSH
38183: LD_INT 0
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: PUSH
38190: LD_INT 6
38192: NEG
38193: PUSH
38194: LD_INT 1
38196: NEG
38197: PUSH
38198: EMPTY
38199: LIST
38200: LIST
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38216: LD_ADDR_VAR 0 34
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: LD_INT 3
38227: NEG
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 3
38235: NEG
38236: PUSH
38237: LD_INT 2
38239: NEG
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 3
38247: NEG
38248: PUSH
38249: LD_INT 3
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 3
38259: NEG
38260: PUSH
38261: LD_INT 4
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 4
38271: NEG
38272: PUSH
38273: LD_INT 3
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 4
38283: NEG
38284: PUSH
38285: LD_INT 4
38287: NEG
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: PUSH
38293: LD_INT 4
38295: NEG
38296: PUSH
38297: LD_INT 5
38299: NEG
38300: PUSH
38301: EMPTY
38302: LIST
38303: LIST
38304: PUSH
38305: LD_INT 5
38307: NEG
38308: PUSH
38309: LD_INT 4
38311: NEG
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: PUSH
38317: LD_INT 5
38319: NEG
38320: PUSH
38321: LD_INT 5
38323: NEG
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 5
38331: NEG
38332: PUSH
38333: LD_INT 6
38335: NEG
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 6
38343: NEG
38344: PUSH
38345: LD_INT 5
38347: NEG
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 6
38355: NEG
38356: PUSH
38357: LD_INT 6
38359: NEG
38360: PUSH
38361: EMPTY
38362: LIST
38363: LIST
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38379: LD_ADDR_VAR 0 41
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: LD_INT 3
38401: NEG
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 1
38409: PUSH
38410: LD_INT 2
38412: NEG
38413: PUSH
38414: EMPTY
38415: LIST
38416: LIST
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: LIST
38422: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38423: LD_ADDR_VAR 0 42
38427: PUSH
38428: LD_INT 2
38430: PUSH
38431: LD_INT 0
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: LD_INT 2
38440: PUSH
38441: LD_INT 1
38443: NEG
38444: PUSH
38445: EMPTY
38446: LIST
38447: LIST
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: LD_INT 1
38454: PUSH
38455: EMPTY
38456: LIST
38457: LIST
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: LIST
38463: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38464: LD_ADDR_VAR 0 43
38468: PUSH
38469: LD_INT 2
38471: PUSH
38472: LD_INT 2
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 3
38481: PUSH
38482: LD_INT 2
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: LD_INT 3
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38504: LD_ADDR_VAR 0 44
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 2
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: PUSH
38522: LD_INT 3
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 1
38531: NEG
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: EMPTY
38537: LIST
38538: LIST
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: LIST
38544: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38545: LD_ADDR_VAR 0 45
38549: PUSH
38550: LD_INT 2
38552: NEG
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 2
38563: NEG
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 3
38574: NEG
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: EMPTY
38585: LIST
38586: LIST
38587: LIST
38588: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38589: LD_ADDR_VAR 0 46
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: LD_INT 2
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 2
38608: NEG
38609: PUSH
38610: LD_INT 3
38612: NEG
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 3
38620: NEG
38621: PUSH
38622: LD_INT 2
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: LIST
38634: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38635: LD_ADDR_VAR 0 47
38639: PUSH
38640: LD_INT 2
38642: NEG
38643: PUSH
38644: LD_INT 3
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: LD_INT 3
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38668: LD_ADDR_VAR 0 48
38672: PUSH
38673: LD_INT 1
38675: PUSH
38676: LD_INT 2
38678: NEG
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 2
38686: PUSH
38687: LD_INT 1
38689: NEG
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38699: LD_ADDR_VAR 0 49
38703: PUSH
38704: LD_INT 3
38706: PUSH
38707: LD_INT 1
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 3
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: EMPTY
38721: LIST
38722: LIST
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38728: LD_ADDR_VAR 0 50
38732: PUSH
38733: LD_INT 2
38735: PUSH
38736: LD_INT 3
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 3
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38757: LD_ADDR_VAR 0 51
38761: PUSH
38762: LD_INT 1
38764: NEG
38765: PUSH
38766: LD_INT 2
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 2
38775: NEG
38776: PUSH
38777: LD_INT 1
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38788: LD_ADDR_VAR 0 52
38792: PUSH
38793: LD_INT 3
38795: NEG
38796: PUSH
38797: LD_INT 1
38799: NEG
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 3
38807: NEG
38808: PUSH
38809: LD_INT 2
38811: NEG
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38821: LD_ADDR_VAR 0 53
38825: PUSH
38826: LD_INT 1
38828: NEG
38829: PUSH
38830: LD_INT 3
38832: NEG
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 0
38840: PUSH
38841: LD_INT 3
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: PUSH
38852: LD_INT 2
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: LIST
38864: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38865: LD_ADDR_VAR 0 54
38869: PUSH
38870: LD_INT 2
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: LD_INT 0
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 3
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: EMPTY
38898: LIST
38899: LIST
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38906: LD_ADDR_VAR 0 55
38910: PUSH
38911: LD_INT 3
38913: PUSH
38914: LD_INT 2
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 3
38923: PUSH
38924: LD_INT 3
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 2
38933: PUSH
38934: LD_INT 3
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: LIST
38945: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38946: LD_ADDR_VAR 0 56
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 3
38956: PUSH
38957: EMPTY
38958: LIST
38959: LIST
38960: PUSH
38961: LD_INT 0
38963: PUSH
38964: LD_INT 3
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 1
38973: NEG
38974: PUSH
38975: LD_INT 2
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: LIST
38986: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38987: LD_ADDR_VAR 0 57
38991: PUSH
38992: LD_INT 2
38994: NEG
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 3
39005: NEG
39006: PUSH
39007: LD_INT 0
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 3
39016: NEG
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39031: LD_ADDR_VAR 0 58
39035: PUSH
39036: LD_INT 2
39038: NEG
39039: PUSH
39040: LD_INT 3
39042: NEG
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: PUSH
39048: LD_INT 3
39050: NEG
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 3
39062: NEG
39063: PUSH
39064: LD_INT 3
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: LIST
39076: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39077: LD_ADDR_VAR 0 59
39081: PUSH
39082: LD_INT 1
39084: NEG
39085: PUSH
39086: LD_INT 2
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: LD_INT 1
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: LIST
39120: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39121: LD_ADDR_VAR 0 60
39125: PUSH
39126: LD_INT 1
39128: PUSH
39129: LD_INT 1
39131: NEG
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: LD_INT 0
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: LD_INT 1
39152: PUSH
39153: EMPTY
39154: LIST
39155: LIST
39156: PUSH
39157: EMPTY
39158: LIST
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39162: LD_ADDR_VAR 0 61
39166: PUSH
39167: LD_INT 2
39169: PUSH
39170: LD_INT 1
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 2
39179: PUSH
39180: LD_INT 2
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: LD_INT 2
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: LIST
39201: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39202: LD_ADDR_VAR 0 62
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: LD_INT 2
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: LD_INT 2
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: LD_INT 1
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: LIST
39242: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39243: LD_ADDR_VAR 0 63
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: NEG
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: NEG
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: LIST
39286: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39287: LD_ADDR_VAR 0 64
39291: PUSH
39292: LD_INT 1
39294: NEG
39295: PUSH
39296: LD_INT 2
39298: NEG
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 2
39306: NEG
39307: PUSH
39308: LD_INT 1
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: LD_INT 2
39318: NEG
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: LIST
39332: ST_TO_ADDR
// end ; 2 :
39333: GO 42599
39335: LD_INT 2
39337: DOUBLE
39338: EQUAL
39339: IFTRUE 39343
39341: GO 42598
39343: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39344: LD_ADDR_VAR 0 29
39348: PUSH
39349: LD_INT 4
39351: PUSH
39352: LD_INT 0
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 4
39361: PUSH
39362: LD_INT 1
39364: NEG
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 5
39372: PUSH
39373: LD_INT 0
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 5
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 4
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 3
39402: PUSH
39403: LD_INT 0
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 3
39412: PUSH
39413: LD_INT 1
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 2
39426: NEG
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 5
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 3
39444: PUSH
39445: LD_INT 3
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 3
39454: PUSH
39455: LD_INT 2
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 4
39464: PUSH
39465: LD_INT 3
39467: PUSH
39468: EMPTY
39469: LIST
39470: LIST
39471: PUSH
39472: LD_INT 4
39474: PUSH
39475: LD_INT 4
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 3
39484: PUSH
39485: LD_INT 4
39487: PUSH
39488: EMPTY
39489: LIST
39490: LIST
39491: PUSH
39492: LD_INT 2
39494: PUSH
39495: LD_INT 3
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 2
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 4
39514: PUSH
39515: LD_INT 2
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: LD_INT 4
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 4
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 4
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 1
39564: PUSH
39565: LD_INT 5
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 0
39574: PUSH
39575: LD_INT 5
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: LD_INT 4
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 1
39595: NEG
39596: PUSH
39597: LD_INT 3
39599: PUSH
39600: EMPTY
39601: LIST
39602: LIST
39603: PUSH
39604: LD_INT 2
39606: PUSH
39607: LD_INT 5
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 2
39616: NEG
39617: PUSH
39618: LD_INT 3
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 3
39627: NEG
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 3
39638: NEG
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 0
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 2
39661: NEG
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 3
39672: NEG
39673: PUSH
39674: LD_INT 1
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 4
39683: NEG
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 4
39694: NEG
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 4
39706: NEG
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: NEG
39719: PUSH
39720: LD_INT 2
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 4
39729: NEG
39730: PUSH
39731: LD_INT 4
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 4
39741: NEG
39742: PUSH
39743: LD_INT 5
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 3
39753: NEG
39754: PUSH
39755: LD_INT 4
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 3
39765: NEG
39766: PUSH
39767: LD_INT 3
39769: NEG
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 4
39777: NEG
39778: PUSH
39779: LD_INT 3
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 5
39789: NEG
39790: PUSH
39791: LD_INT 4
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 5
39801: NEG
39802: PUSH
39803: LD_INT 5
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 3
39813: NEG
39814: PUSH
39815: LD_INT 5
39817: NEG
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 5
39825: NEG
39826: PUSH
39827: LD_INT 3
39829: NEG
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: LIST
39851: LIST
39852: LIST
39853: LIST
39854: LIST
39855: LIST
39856: LIST
39857: LIST
39858: LIST
39859: LIST
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: LIST
39868: LIST
39869: LIST
39870: LIST
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39882: LD_ADDR_VAR 0 30
39886: PUSH
39887: LD_INT 4
39889: PUSH
39890: LD_INT 4
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 4
39899: PUSH
39900: LD_INT 3
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 5
39909: PUSH
39910: LD_INT 4
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 5
39919: PUSH
39920: LD_INT 5
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 4
39929: PUSH
39930: LD_INT 5
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 3
39939: PUSH
39940: LD_INT 4
39942: PUSH
39943: EMPTY
39944: LIST
39945: LIST
39946: PUSH
39947: LD_INT 3
39949: PUSH
39950: LD_INT 3
39952: PUSH
39953: EMPTY
39954: LIST
39955: LIST
39956: PUSH
39957: LD_INT 5
39959: PUSH
39960: LD_INT 3
39962: PUSH
39963: EMPTY
39964: LIST
39965: LIST
39966: PUSH
39967: LD_INT 3
39969: PUSH
39970: LD_INT 5
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 0
39979: PUSH
39980: LD_INT 3
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 4
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 4
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 3
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 2
40051: PUSH
40052: LD_INT 4
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 4
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 4
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 0
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 3
40106: NEG
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 4
40117: NEG
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 5
40128: NEG
40129: PUSH
40130: LD_INT 0
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 5
40139: NEG
40140: PUSH
40141: LD_INT 1
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 5
40151: NEG
40152: PUSH
40153: LD_INT 2
40155: NEG
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 3
40163: NEG
40164: PUSH
40165: LD_INT 2
40167: PUSH
40168: EMPTY
40169: LIST
40170: LIST
40171: PUSH
40172: LD_INT 3
40174: NEG
40175: PUSH
40176: LD_INT 3
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 3
40186: NEG
40187: PUSH
40188: LD_INT 4
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: NEG
40199: PUSH
40200: LD_INT 3
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: NEG
40211: PUSH
40212: LD_INT 2
40214: NEG
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 3
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 4
40234: NEG
40235: PUSH
40236: LD_INT 3
40238: NEG
40239: PUSH
40240: EMPTY
40241: LIST
40242: LIST
40243: PUSH
40244: LD_INT 4
40246: NEG
40247: PUSH
40248: LD_INT 4
40250: NEG
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PUSH
40256: LD_INT 2
40258: NEG
40259: PUSH
40260: LD_INT 4
40262: NEG
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 4
40270: NEG
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 0
40282: PUSH
40283: LD_INT 4
40285: NEG
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 5
40296: NEG
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 1
40304: PUSH
40305: LD_INT 4
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 3
40318: NEG
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: LD_INT 3
40329: NEG
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 4
40341: NEG
40342: PUSH
40343: EMPTY
40344: LIST
40345: LIST
40346: PUSH
40347: LD_INT 1
40349: NEG
40350: PUSH
40351: LD_INT 5
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 2
40361: PUSH
40362: LD_INT 3
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: NEG
40373: PUSH
40374: LD_INT 5
40376: NEG
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: LIST
40410: LIST
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40429: LD_ADDR_VAR 0 31
40433: PUSH
40434: LD_INT 0
40436: PUSH
40437: LD_INT 4
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: LD_INT 3
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: LD_INT 4
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: PUSH
40467: LD_INT 5
40469: PUSH
40470: EMPTY
40471: LIST
40472: LIST
40473: PUSH
40474: LD_INT 0
40476: PUSH
40477: LD_INT 5
40479: PUSH
40480: EMPTY
40481: LIST
40482: LIST
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: LD_INT 4
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: LD_INT 3
40501: PUSH
40502: EMPTY
40503: LIST
40504: LIST
40505: PUSH
40506: LD_INT 2
40508: PUSH
40509: LD_INT 5
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 2
40518: NEG
40519: PUSH
40520: LD_INT 3
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 3
40529: NEG
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 3
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 2
40552: NEG
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: NEG
40575: PUSH
40576: LD_INT 1
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 4
40585: NEG
40586: PUSH
40587: LD_INT 0
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 4
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: NEG
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 4
40608: NEG
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 4
40631: NEG
40632: PUSH
40633: LD_INT 4
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 4
40643: NEG
40644: PUSH
40645: LD_INT 5
40647: NEG
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 3
40655: NEG
40656: PUSH
40657: LD_INT 4
40659: NEG
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 3
40667: NEG
40668: PUSH
40669: LD_INT 3
40671: NEG
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 4
40679: NEG
40680: PUSH
40681: LD_INT 3
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 5
40691: NEG
40692: PUSH
40693: LD_INT 4
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 5
40703: NEG
40704: PUSH
40705: LD_INT 5
40707: NEG
40708: PUSH
40709: EMPTY
40710: LIST
40711: LIST
40712: PUSH
40713: LD_INT 3
40715: NEG
40716: PUSH
40717: LD_INT 5
40719: NEG
40720: PUSH
40721: EMPTY
40722: LIST
40723: LIST
40724: PUSH
40725: LD_INT 5
40727: NEG
40728: PUSH
40729: LD_INT 3
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: LD_INT 3
40742: NEG
40743: PUSH
40744: EMPTY
40745: LIST
40746: LIST
40747: PUSH
40748: LD_INT 0
40750: PUSH
40751: LD_INT 4
40753: NEG
40754: PUSH
40755: EMPTY
40756: LIST
40757: LIST
40758: PUSH
40759: LD_INT 1
40761: PUSH
40762: LD_INT 3
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 1
40772: PUSH
40773: LD_INT 2
40775: NEG
40776: PUSH
40777: EMPTY
40778: LIST
40779: LIST
40780: PUSH
40781: LD_INT 0
40783: PUSH
40784: LD_INT 2
40786: NEG
40787: PUSH
40788: EMPTY
40789: LIST
40790: LIST
40791: PUSH
40792: LD_INT 1
40794: NEG
40795: PUSH
40796: LD_INT 3
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 1
40806: NEG
40807: PUSH
40808: LD_INT 4
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 2
40818: PUSH
40819: LD_INT 2
40821: NEG
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 2
40829: NEG
40830: PUSH
40831: LD_INT 4
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 4
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 4
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 5
40862: PUSH
40863: LD_INT 0
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 5
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 4
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 3
40892: PUSH
40893: LD_INT 0
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 3
40902: PUSH
40903: LD_INT 1
40905: NEG
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 3
40913: PUSH
40914: LD_INT 2
40916: NEG
40917: PUSH
40918: EMPTY
40919: LIST
40920: LIST
40921: PUSH
40922: LD_INT 5
40924: PUSH
40925: LD_INT 2
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
40979: LD_ADDR_VAR 0 32
40983: PUSH
40984: LD_INT 4
40986: NEG
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 4
40997: NEG
40998: PUSH
40999: LD_INT 1
41001: NEG
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 3
41009: NEG
41010: PUSH
41011: LD_INT 0
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 3
41020: NEG
41021: PUSH
41022: LD_INT 1
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 4
41031: NEG
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 5
41042: NEG
41043: PUSH
41044: LD_INT 0
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 5
41053: NEG
41054: PUSH
41055: LD_INT 1
41057: NEG
41058: PUSH
41059: EMPTY
41060: LIST
41061: LIST
41062: PUSH
41063: LD_INT 5
41065: NEG
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 3
41077: NEG
41078: PUSH
41079: LD_INT 2
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 3
41088: NEG
41089: PUSH
41090: LD_INT 3
41092: NEG
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: LD_INT 3
41100: NEG
41101: PUSH
41102: LD_INT 4
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: NEG
41113: PUSH
41114: LD_INT 3
41116: NEG
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: LD_INT 2
41128: NEG
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: LD_INT 2
41140: NEG
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 4
41148: NEG
41149: PUSH
41150: LD_INT 3
41152: NEG
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 4
41160: NEG
41161: PUSH
41162: LD_INT 4
41164: NEG
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 2
41172: NEG
41173: PUSH
41174: LD_INT 4
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 4
41184: NEG
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 0
41196: PUSH
41197: LD_INT 4
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 0
41207: PUSH
41208: LD_INT 5
41210: NEG
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: LD_INT 4
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: LD_INT 3
41232: NEG
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: LD_INT 3
41243: NEG
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: LD_INT 4
41255: NEG
41256: PUSH
41257: EMPTY
41258: LIST
41259: LIST
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: LD_INT 5
41267: NEG
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 2
41275: PUSH
41276: LD_INT 3
41278: NEG
41279: PUSH
41280: EMPTY
41281: LIST
41282: LIST
41283: PUSH
41284: LD_INT 2
41286: NEG
41287: PUSH
41288: LD_INT 5
41290: NEG
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: LD_INT 3
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: EMPTY
41303: LIST
41304: LIST
41305: PUSH
41306: LD_INT 3
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 4
41319: PUSH
41320: LD_INT 0
41322: PUSH
41323: EMPTY
41324: LIST
41325: LIST
41326: PUSH
41327: LD_INT 4
41329: PUSH
41330: LD_INT 1
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: LD_INT 0
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: LD_INT 1
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 2
41370: PUSH
41371: LD_INT 2
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 4
41381: PUSH
41382: LD_INT 2
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 4
41391: PUSH
41392: LD_INT 4
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 4
41401: PUSH
41402: LD_INT 3
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 5
41411: PUSH
41412: LD_INT 4
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 5
41421: PUSH
41422: LD_INT 5
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 4
41431: PUSH
41432: LD_INT 5
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: LD_INT 3
41441: PUSH
41442: LD_INT 4
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: PUSH
41449: LD_INT 3
41451: PUSH
41452: LD_INT 3
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 5
41461: PUSH
41462: LD_INT 3
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PUSH
41469: LD_INT 3
41471: PUSH
41472: LD_INT 5
41474: PUSH
41475: EMPTY
41476: LIST
41477: LIST
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41526: LD_ADDR_VAR 0 33
41530: PUSH
41531: LD_INT 4
41533: NEG
41534: PUSH
41535: LD_INT 4
41537: NEG
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 4
41545: NEG
41546: PUSH
41547: LD_INT 5
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 3
41557: NEG
41558: PUSH
41559: LD_INT 4
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 3
41569: NEG
41570: PUSH
41571: LD_INT 3
41573: NEG
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 4
41581: NEG
41582: PUSH
41583: LD_INT 3
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 5
41593: NEG
41594: PUSH
41595: LD_INT 4
41597: NEG
41598: PUSH
41599: EMPTY
41600: LIST
41601: LIST
41602: PUSH
41603: LD_INT 5
41605: NEG
41606: PUSH
41607: LD_INT 5
41609: NEG
41610: PUSH
41611: EMPTY
41612: LIST
41613: LIST
41614: PUSH
41615: LD_INT 3
41617: NEG
41618: PUSH
41619: LD_INT 5
41621: NEG
41622: PUSH
41623: EMPTY
41624: LIST
41625: LIST
41626: PUSH
41627: LD_INT 5
41629: NEG
41630: PUSH
41631: LD_INT 3
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 0
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 4
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 3
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: LD_INT 2
41677: NEG
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 2
41688: NEG
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 1
41696: NEG
41697: PUSH
41698: LD_INT 3
41700: NEG
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: LD_INT 4
41712: NEG
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 2
41720: PUSH
41721: LD_INT 2
41723: NEG
41724: PUSH
41725: EMPTY
41726: LIST
41727: LIST
41728: PUSH
41729: LD_INT 2
41731: NEG
41732: PUSH
41733: LD_INT 4
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 4
41743: PUSH
41744: LD_INT 0
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 4
41753: PUSH
41754: LD_INT 1
41756: NEG
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 5
41764: PUSH
41765: LD_INT 0
41767: PUSH
41768: EMPTY
41769: LIST
41770: LIST
41771: PUSH
41772: LD_INT 5
41774: PUSH
41775: LD_INT 1
41777: PUSH
41778: EMPTY
41779: LIST
41780: LIST
41781: PUSH
41782: LD_INT 4
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 3
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 3
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 3
41815: PUSH
41816: LD_INT 2
41818: NEG
41819: PUSH
41820: EMPTY
41821: LIST
41822: LIST
41823: PUSH
41824: LD_INT 5
41826: PUSH
41827: LD_INT 2
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 3
41836: PUSH
41837: LD_INT 3
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 3
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 4
41856: PUSH
41857: LD_INT 3
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 4
41866: PUSH
41867: LD_INT 4
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 3
41876: PUSH
41877: LD_INT 4
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 2
41886: PUSH
41887: LD_INT 3
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 4
41906: PUSH
41907: LD_INT 2
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: PUSH
41914: LD_INT 2
41916: PUSH
41917: LD_INT 4
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: LD_INT 4
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 4
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 5
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 5
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 4
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 3
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: PUSH
41999: LD_INT 5
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 2
42008: NEG
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: LIST
42021: LIST
42022: LIST
42023: LIST
42024: LIST
42025: LIST
42026: LIST
42027: LIST
42028: LIST
42029: LIST
42030: LIST
42031: LIST
42032: LIST
42033: LIST
42034: LIST
42035: LIST
42036: LIST
42037: LIST
42038: LIST
42039: LIST
42040: LIST
42041: LIST
42042: LIST
42043: LIST
42044: LIST
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: LIST
42050: LIST
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: LIST
42062: LIST
42063: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42064: LD_ADDR_VAR 0 34
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: LD_INT 4
42074: NEG
42075: PUSH
42076: EMPTY
42077: LIST
42078: LIST
42079: PUSH
42080: LD_INT 0
42082: PUSH
42083: LD_INT 5
42085: NEG
42086: PUSH
42087: EMPTY
42088: LIST
42089: LIST
42090: PUSH
42091: LD_INT 1
42093: PUSH
42094: LD_INT 4
42096: NEG
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 1
42104: PUSH
42105: LD_INT 3
42107: NEG
42108: PUSH
42109: EMPTY
42110: LIST
42111: LIST
42112: PUSH
42113: LD_INT 0
42115: PUSH
42116: LD_INT 3
42118: NEG
42119: PUSH
42120: EMPTY
42121: LIST
42122: LIST
42123: PUSH
42124: LD_INT 1
42126: NEG
42127: PUSH
42128: LD_INT 4
42130: NEG
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 1
42138: NEG
42139: PUSH
42140: LD_INT 5
42142: NEG
42143: PUSH
42144: EMPTY
42145: LIST
42146: LIST
42147: PUSH
42148: LD_INT 2
42150: PUSH
42151: LD_INT 3
42153: NEG
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 2
42161: NEG
42162: PUSH
42163: LD_INT 5
42165: NEG
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 3
42173: PUSH
42174: LD_INT 0
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 4
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: LD_INT 4
42204: PUSH
42205: LD_INT 1
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 3
42214: PUSH
42215: LD_INT 1
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: LD_INT 0
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 2
42234: PUSH
42235: LD_INT 1
42237: NEG
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: LD_INT 2
42248: NEG
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 4
42256: PUSH
42257: LD_INT 2
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 4
42266: PUSH
42267: LD_INT 4
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 4
42276: PUSH
42277: LD_INT 3
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 5
42286: PUSH
42287: LD_INT 4
42289: PUSH
42290: EMPTY
42291: LIST
42292: LIST
42293: PUSH
42294: LD_INT 5
42296: PUSH
42297: LD_INT 5
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 4
42306: PUSH
42307: LD_INT 5
42309: PUSH
42310: EMPTY
42311: LIST
42312: LIST
42313: PUSH
42314: LD_INT 3
42316: PUSH
42317: LD_INT 4
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 3
42326: PUSH
42327: LD_INT 3
42329: PUSH
42330: EMPTY
42331: LIST
42332: LIST
42333: PUSH
42334: LD_INT 5
42336: PUSH
42337: LD_INT 3
42339: PUSH
42340: EMPTY
42341: LIST
42342: LIST
42343: PUSH
42344: LD_INT 3
42346: PUSH
42347: LD_INT 5
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PUSH
42354: LD_INT 0
42356: PUSH
42357: LD_INT 3
42359: PUSH
42360: EMPTY
42361: LIST
42362: LIST
42363: PUSH
42364: LD_INT 0
42366: PUSH
42367: LD_INT 2
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 1
42376: PUSH
42377: LD_INT 3
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 1
42386: PUSH
42387: LD_INT 4
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 0
42396: PUSH
42397: LD_INT 4
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: NEG
42407: PUSH
42408: LD_INT 3
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: PUSH
42429: LD_INT 4
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 2
42438: NEG
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 4
42449: NEG
42450: PUSH
42451: LD_INT 0
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 4
42460: NEG
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 3
42472: NEG
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 4
42494: NEG
42495: PUSH
42496: LD_INT 1
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_INT 5
42505: NEG
42506: PUSH
42507: LD_INT 0
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: LD_INT 5
42516: NEG
42517: PUSH
42518: LD_INT 1
42520: NEG
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 5
42528: NEG
42529: PUSH
42530: LD_INT 2
42532: NEG
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 3
42540: NEG
42541: PUSH
42542: LD_INT 2
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: LIST
42564: LIST
42565: LIST
42566: LIST
42567: LIST
42568: LIST
42569: LIST
42570: LIST
42571: LIST
42572: LIST
42573: LIST
42574: LIST
42575: LIST
42576: LIST
42577: LIST
42578: LIST
42579: LIST
42580: LIST
42581: LIST
42582: LIST
42583: LIST
42584: LIST
42585: LIST
42586: LIST
42587: LIST
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: ST_TO_ADDR
// end ; end ;
42596: GO 42599
42598: POP
// case btype of b_depot , b_warehouse :
42599: LD_VAR 0 1
42603: PUSH
42604: LD_INT 0
42606: DOUBLE
42607: EQUAL
42608: IFTRUE 42618
42610: LD_INT 1
42612: DOUBLE
42613: EQUAL
42614: IFTRUE 42618
42616: GO 42819
42618: POP
// case nation of nation_american :
42619: LD_VAR 0 5
42623: PUSH
42624: LD_INT 1
42626: DOUBLE
42627: EQUAL
42628: IFTRUE 42632
42630: GO 42688
42632: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42633: LD_ADDR_VAR 0 9
42637: PUSH
42638: LD_VAR 0 11
42642: PUSH
42643: LD_VAR 0 12
42647: PUSH
42648: LD_VAR 0 13
42652: PUSH
42653: LD_VAR 0 14
42657: PUSH
42658: LD_VAR 0 15
42662: PUSH
42663: LD_VAR 0 16
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: PUSH
42676: LD_VAR 0 4
42680: PUSH
42681: LD_INT 1
42683: PLUS
42684: ARRAY
42685: ST_TO_ADDR
42686: GO 42817
42688: LD_INT 2
42690: DOUBLE
42691: EQUAL
42692: IFTRUE 42696
42694: GO 42752
42696: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42697: LD_ADDR_VAR 0 9
42701: PUSH
42702: LD_VAR 0 17
42706: PUSH
42707: LD_VAR 0 18
42711: PUSH
42712: LD_VAR 0 19
42716: PUSH
42717: LD_VAR 0 20
42721: PUSH
42722: LD_VAR 0 21
42726: PUSH
42727: LD_VAR 0 22
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: LIST
42736: LIST
42737: LIST
42738: LIST
42739: PUSH
42740: LD_VAR 0 4
42744: PUSH
42745: LD_INT 1
42747: PLUS
42748: ARRAY
42749: ST_TO_ADDR
42750: GO 42817
42752: LD_INT 3
42754: DOUBLE
42755: EQUAL
42756: IFTRUE 42760
42758: GO 42816
42760: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42761: LD_ADDR_VAR 0 9
42765: PUSH
42766: LD_VAR 0 23
42770: PUSH
42771: LD_VAR 0 24
42775: PUSH
42776: LD_VAR 0 25
42780: PUSH
42781: LD_VAR 0 26
42785: PUSH
42786: LD_VAR 0 27
42790: PUSH
42791: LD_VAR 0 28
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: PUSH
42804: LD_VAR 0 4
42808: PUSH
42809: LD_INT 1
42811: PLUS
42812: ARRAY
42813: ST_TO_ADDR
42814: GO 42817
42816: POP
42817: GO 43372
42819: LD_INT 2
42821: DOUBLE
42822: EQUAL
42823: IFTRUE 42833
42825: LD_INT 3
42827: DOUBLE
42828: EQUAL
42829: IFTRUE 42833
42831: GO 42889
42833: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42834: LD_ADDR_VAR 0 9
42838: PUSH
42839: LD_VAR 0 29
42843: PUSH
42844: LD_VAR 0 30
42848: PUSH
42849: LD_VAR 0 31
42853: PUSH
42854: LD_VAR 0 32
42858: PUSH
42859: LD_VAR 0 33
42863: PUSH
42864: LD_VAR 0 34
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: PUSH
42877: LD_VAR 0 4
42881: PUSH
42882: LD_INT 1
42884: PLUS
42885: ARRAY
42886: ST_TO_ADDR
42887: GO 43372
42889: LD_INT 16
42891: DOUBLE
42892: EQUAL
42893: IFTRUE 42951
42895: LD_INT 17
42897: DOUBLE
42898: EQUAL
42899: IFTRUE 42951
42901: LD_INT 18
42903: DOUBLE
42904: EQUAL
42905: IFTRUE 42951
42907: LD_INT 19
42909: DOUBLE
42910: EQUAL
42911: IFTRUE 42951
42913: LD_INT 22
42915: DOUBLE
42916: EQUAL
42917: IFTRUE 42951
42919: LD_INT 20
42921: DOUBLE
42922: EQUAL
42923: IFTRUE 42951
42925: LD_INT 21
42927: DOUBLE
42928: EQUAL
42929: IFTRUE 42951
42931: LD_INT 23
42933: DOUBLE
42934: EQUAL
42935: IFTRUE 42951
42937: LD_INT 24
42939: DOUBLE
42940: EQUAL
42941: IFTRUE 42951
42943: LD_INT 25
42945: DOUBLE
42946: EQUAL
42947: IFTRUE 42951
42949: GO 43007
42951: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
42952: LD_ADDR_VAR 0 9
42956: PUSH
42957: LD_VAR 0 35
42961: PUSH
42962: LD_VAR 0 36
42966: PUSH
42967: LD_VAR 0 37
42971: PUSH
42972: LD_VAR 0 38
42976: PUSH
42977: LD_VAR 0 39
42981: PUSH
42982: LD_VAR 0 40
42986: PUSH
42987: EMPTY
42988: LIST
42989: LIST
42990: LIST
42991: LIST
42992: LIST
42993: LIST
42994: PUSH
42995: LD_VAR 0 4
42999: PUSH
43000: LD_INT 1
43002: PLUS
43003: ARRAY
43004: ST_TO_ADDR
43005: GO 43372
43007: LD_INT 6
43009: DOUBLE
43010: EQUAL
43011: IFTRUE 43063
43013: LD_INT 7
43015: DOUBLE
43016: EQUAL
43017: IFTRUE 43063
43019: LD_INT 8
43021: DOUBLE
43022: EQUAL
43023: IFTRUE 43063
43025: LD_INT 13
43027: DOUBLE
43028: EQUAL
43029: IFTRUE 43063
43031: LD_INT 12
43033: DOUBLE
43034: EQUAL
43035: IFTRUE 43063
43037: LD_INT 15
43039: DOUBLE
43040: EQUAL
43041: IFTRUE 43063
43043: LD_INT 11
43045: DOUBLE
43046: EQUAL
43047: IFTRUE 43063
43049: LD_INT 14
43051: DOUBLE
43052: EQUAL
43053: IFTRUE 43063
43055: LD_INT 10
43057: DOUBLE
43058: EQUAL
43059: IFTRUE 43063
43061: GO 43119
43063: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43064: LD_ADDR_VAR 0 9
43068: PUSH
43069: LD_VAR 0 41
43073: PUSH
43074: LD_VAR 0 42
43078: PUSH
43079: LD_VAR 0 43
43083: PUSH
43084: LD_VAR 0 44
43088: PUSH
43089: LD_VAR 0 45
43093: PUSH
43094: LD_VAR 0 46
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: PUSH
43107: LD_VAR 0 4
43111: PUSH
43112: LD_INT 1
43114: PLUS
43115: ARRAY
43116: ST_TO_ADDR
43117: GO 43372
43119: LD_INT 36
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43127
43125: GO 43183
43127: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43128: LD_ADDR_VAR 0 9
43132: PUSH
43133: LD_VAR 0 47
43137: PUSH
43138: LD_VAR 0 48
43142: PUSH
43143: LD_VAR 0 49
43147: PUSH
43148: LD_VAR 0 50
43152: PUSH
43153: LD_VAR 0 51
43157: PUSH
43158: LD_VAR 0 52
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: LIST
43169: LIST
43170: PUSH
43171: LD_VAR 0 4
43175: PUSH
43176: LD_INT 1
43178: PLUS
43179: ARRAY
43180: ST_TO_ADDR
43181: GO 43372
43183: LD_INT 4
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43209
43189: LD_INT 5
43191: DOUBLE
43192: EQUAL
43193: IFTRUE 43209
43195: LD_INT 34
43197: DOUBLE
43198: EQUAL
43199: IFTRUE 43209
43201: LD_INT 37
43203: DOUBLE
43204: EQUAL
43205: IFTRUE 43209
43207: GO 43265
43209: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43210: LD_ADDR_VAR 0 9
43214: PUSH
43215: LD_VAR 0 53
43219: PUSH
43220: LD_VAR 0 54
43224: PUSH
43225: LD_VAR 0 55
43229: PUSH
43230: LD_VAR 0 56
43234: PUSH
43235: LD_VAR 0 57
43239: PUSH
43240: LD_VAR 0 58
43244: PUSH
43245: EMPTY
43246: LIST
43247: LIST
43248: LIST
43249: LIST
43250: LIST
43251: LIST
43252: PUSH
43253: LD_VAR 0 4
43257: PUSH
43258: LD_INT 1
43260: PLUS
43261: ARRAY
43262: ST_TO_ADDR
43263: GO 43372
43265: LD_INT 31
43267: DOUBLE
43268: EQUAL
43269: IFTRUE 43315
43271: LD_INT 32
43273: DOUBLE
43274: EQUAL
43275: IFTRUE 43315
43277: LD_INT 33
43279: DOUBLE
43280: EQUAL
43281: IFTRUE 43315
43283: LD_INT 27
43285: DOUBLE
43286: EQUAL
43287: IFTRUE 43315
43289: LD_INT 26
43291: DOUBLE
43292: EQUAL
43293: IFTRUE 43315
43295: LD_INT 28
43297: DOUBLE
43298: EQUAL
43299: IFTRUE 43315
43301: LD_INT 29
43303: DOUBLE
43304: EQUAL
43305: IFTRUE 43315
43307: LD_INT 30
43309: DOUBLE
43310: EQUAL
43311: IFTRUE 43315
43313: GO 43371
43315: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43316: LD_ADDR_VAR 0 9
43320: PUSH
43321: LD_VAR 0 59
43325: PUSH
43326: LD_VAR 0 60
43330: PUSH
43331: LD_VAR 0 61
43335: PUSH
43336: LD_VAR 0 62
43340: PUSH
43341: LD_VAR 0 63
43345: PUSH
43346: LD_VAR 0 64
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: LIST
43355: LIST
43356: LIST
43357: LIST
43358: PUSH
43359: LD_VAR 0 4
43363: PUSH
43364: LD_INT 1
43366: PLUS
43367: ARRAY
43368: ST_TO_ADDR
43369: GO 43372
43371: POP
// temp_list2 = [ ] ;
43372: LD_ADDR_VAR 0 10
43376: PUSH
43377: EMPTY
43378: ST_TO_ADDR
// for i in temp_list do
43379: LD_ADDR_VAR 0 8
43383: PUSH
43384: LD_VAR 0 9
43388: PUSH
43389: FOR_IN
43390: IFFALSE 43442
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43392: LD_ADDR_VAR 0 10
43396: PUSH
43397: LD_VAR 0 10
43401: PUSH
43402: LD_VAR 0 8
43406: PUSH
43407: LD_INT 1
43409: ARRAY
43410: PUSH
43411: LD_VAR 0 2
43415: PLUS
43416: PUSH
43417: LD_VAR 0 8
43421: PUSH
43422: LD_INT 2
43424: ARRAY
43425: PUSH
43426: LD_VAR 0 3
43430: PLUS
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: PUSH
43436: EMPTY
43437: LIST
43438: ADD
43439: ST_TO_ADDR
43440: GO 43389
43442: POP
43443: POP
// result = temp_list2 ;
43444: LD_ADDR_VAR 0 7
43448: PUSH
43449: LD_VAR 0 10
43453: ST_TO_ADDR
// end ;
43454: LD_VAR 0 7
43458: RET
// export function EnemyInRange ( unit , dist ) ; begin
43459: LD_INT 0
43461: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43462: LD_ADDR_VAR 0 3
43466: PUSH
43467: LD_VAR 0 1
43471: PPUSH
43472: CALL_OW 255
43476: PPUSH
43477: LD_VAR 0 1
43481: PPUSH
43482: CALL_OW 250
43486: PPUSH
43487: LD_VAR 0 1
43491: PPUSH
43492: CALL_OW 251
43496: PPUSH
43497: LD_VAR 0 2
43501: PPUSH
43502: CALL 16716 0 4
43506: PUSH
43507: LD_INT 4
43509: ARRAY
43510: ST_TO_ADDR
// end ;
43511: LD_VAR 0 3
43515: RET
// export function PlayerSeeMe ( unit ) ; begin
43516: LD_INT 0
43518: PPUSH
// result := See ( your_side , unit ) ;
43519: LD_ADDR_VAR 0 2
43523: PUSH
43524: LD_OWVAR 2
43528: PPUSH
43529: LD_VAR 0 1
43533: PPUSH
43534: CALL_OW 292
43538: ST_TO_ADDR
// end ;
43539: LD_VAR 0 2
43543: RET
// export function ReverseDir ( unit ) ; begin
43544: LD_INT 0
43546: PPUSH
// if not unit then
43547: LD_VAR 0 1
43551: NOT
43552: IFFALSE 43556
// exit ;
43554: GO 43579
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43556: LD_ADDR_VAR 0 2
43560: PUSH
43561: LD_VAR 0 1
43565: PPUSH
43566: CALL_OW 254
43570: PUSH
43571: LD_INT 3
43573: PLUS
43574: PUSH
43575: LD_INT 6
43577: MOD
43578: ST_TO_ADDR
// end ;
43579: LD_VAR 0 2
43583: RET
// export function ReverseArray ( array ) ; var i ; begin
43584: LD_INT 0
43586: PPUSH
43587: PPUSH
// if not array then
43588: LD_VAR 0 1
43592: NOT
43593: IFFALSE 43597
// exit ;
43595: GO 43652
// result := [ ] ;
43597: LD_ADDR_VAR 0 2
43601: PUSH
43602: EMPTY
43603: ST_TO_ADDR
// for i := array downto 1 do
43604: LD_ADDR_VAR 0 3
43608: PUSH
43609: DOUBLE
43610: LD_VAR 0 1
43614: INC
43615: ST_TO_ADDR
43616: LD_INT 1
43618: PUSH
43619: FOR_DOWNTO
43620: IFFALSE 43650
// result := Join ( result , array [ i ] ) ;
43622: LD_ADDR_VAR 0 2
43626: PUSH
43627: LD_VAR 0 2
43631: PPUSH
43632: LD_VAR 0 1
43636: PUSH
43637: LD_VAR 0 3
43641: ARRAY
43642: PPUSH
43643: CALL 48504 0 2
43647: ST_TO_ADDR
43648: GO 43619
43650: POP
43651: POP
// end ;
43652: LD_VAR 0 2
43656: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43657: LD_INT 0
43659: PPUSH
43660: PPUSH
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
// if not unit or not hexes then
43665: LD_VAR 0 1
43669: NOT
43670: IFTRUE 43679
43672: PUSH
43673: LD_VAR 0 2
43677: NOT
43678: OR
43679: IFFALSE 43683
// exit ;
43681: GO 43806
// dist := 9999 ;
43683: LD_ADDR_VAR 0 5
43687: PUSH
43688: LD_INT 9999
43690: ST_TO_ADDR
// for i = 1 to hexes do
43691: LD_ADDR_VAR 0 4
43695: PUSH
43696: DOUBLE
43697: LD_INT 1
43699: DEC
43700: ST_TO_ADDR
43701: LD_VAR 0 2
43705: PUSH
43706: FOR_TO
43707: IFFALSE 43794
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43709: LD_ADDR_VAR 0 6
43713: PUSH
43714: LD_VAR 0 1
43718: PPUSH
43719: LD_VAR 0 2
43723: PUSH
43724: LD_VAR 0 4
43728: ARRAY
43729: PUSH
43730: LD_INT 1
43732: ARRAY
43733: PPUSH
43734: LD_VAR 0 2
43738: PUSH
43739: LD_VAR 0 4
43743: ARRAY
43744: PUSH
43745: LD_INT 2
43747: ARRAY
43748: PPUSH
43749: CALL_OW 297
43753: ST_TO_ADDR
// if tdist < dist then
43754: LD_VAR 0 6
43758: PUSH
43759: LD_VAR 0 5
43763: LESS
43764: IFFALSE 43792
// begin hex := hexes [ i ] ;
43766: LD_ADDR_VAR 0 8
43770: PUSH
43771: LD_VAR 0 2
43775: PUSH
43776: LD_VAR 0 4
43780: ARRAY
43781: ST_TO_ADDR
// dist := tdist ;
43782: LD_ADDR_VAR 0 5
43786: PUSH
43787: LD_VAR 0 6
43791: ST_TO_ADDR
// end ; end ;
43792: GO 43706
43794: POP
43795: POP
// result := hex ;
43796: LD_ADDR_VAR 0 3
43800: PUSH
43801: LD_VAR 0 8
43805: ST_TO_ADDR
// end ;
43806: LD_VAR 0 3
43810: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43811: LD_INT 0
43813: PPUSH
43814: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43815: LD_VAR 0 1
43819: NOT
43820: IFTRUE 43859
43822: PUSH
43823: LD_VAR 0 1
43827: PUSH
43828: LD_INT 21
43830: PUSH
43831: LD_INT 2
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 23
43840: PUSH
43841: LD_INT 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PPUSH
43852: CALL_OW 69
43856: IN
43857: NOT
43858: OR
43859: IFFALSE 43863
// exit ;
43861: GO 43910
// for i = 1 to 3 do
43863: LD_ADDR_VAR 0 3
43867: PUSH
43868: DOUBLE
43869: LD_INT 1
43871: DEC
43872: ST_TO_ADDR
43873: LD_INT 3
43875: PUSH
43876: FOR_TO
43877: IFFALSE 43908
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43879: LD_VAR 0 1
43883: PPUSH
43884: CALL_OW 250
43888: PPUSH
43889: LD_VAR 0 1
43893: PPUSH
43894: CALL_OW 251
43898: PPUSH
43899: LD_INT 1
43901: PPUSH
43902: CALL_OW 453
43906: GO 43876
43908: POP
43909: POP
// end ;
43910: LD_VAR 0 2
43914: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
43915: LD_INT 0
43917: PPUSH
43918: PPUSH
43919: PPUSH
43920: PPUSH
43921: PPUSH
43922: PPUSH
// if not unit or not enemy_unit then
43923: LD_VAR 0 1
43927: NOT
43928: IFTRUE 43937
43930: PUSH
43931: LD_VAR 0 2
43935: NOT
43936: OR
43937: IFFALSE 43941
// exit ;
43939: GO 44422
// if GetLives ( i ) < 250 then
43941: LD_VAR 0 4
43945: PPUSH
43946: CALL_OW 256
43950: PUSH
43951: LD_INT 250
43953: LESS
43954: IFFALSE 43967
// begin ComAutodestruct ( i ) ;
43956: LD_VAR 0 4
43960: PPUSH
43961: CALL 43811 0 1
// exit ;
43965: GO 44422
// end ; x := GetX ( enemy_unit ) ;
43967: LD_ADDR_VAR 0 7
43971: PUSH
43972: LD_VAR 0 2
43976: PPUSH
43977: CALL_OW 250
43981: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
43982: LD_ADDR_VAR 0 8
43986: PUSH
43987: LD_VAR 0 2
43991: PPUSH
43992: CALL_OW 251
43996: ST_TO_ADDR
// if not x or not y then
43997: LD_VAR 0 7
44001: NOT
44002: IFTRUE 44011
44004: PUSH
44005: LD_VAR 0 8
44009: NOT
44010: OR
44011: IFFALSE 44015
// exit ;
44013: GO 44422
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44015: LD_ADDR_VAR 0 6
44019: PUSH
44020: LD_VAR 0 7
44024: PPUSH
44025: LD_INT 0
44027: PPUSH
44028: LD_INT 4
44030: PPUSH
44031: CALL_OW 272
44035: PUSH
44036: LD_VAR 0 8
44040: PPUSH
44041: LD_INT 0
44043: PPUSH
44044: LD_INT 4
44046: PPUSH
44047: CALL_OW 273
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_VAR 0 7
44060: PPUSH
44061: LD_INT 1
44063: PPUSH
44064: LD_INT 4
44066: PPUSH
44067: CALL_OW 272
44071: PUSH
44072: LD_VAR 0 8
44076: PPUSH
44077: LD_INT 1
44079: PPUSH
44080: LD_INT 4
44082: PPUSH
44083: CALL_OW 273
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_VAR 0 7
44096: PPUSH
44097: LD_INT 2
44099: PPUSH
44100: LD_INT 4
44102: PPUSH
44103: CALL_OW 272
44107: PUSH
44108: LD_VAR 0 8
44112: PPUSH
44113: LD_INT 2
44115: PPUSH
44116: LD_INT 4
44118: PPUSH
44119: CALL_OW 273
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: PUSH
44128: LD_VAR 0 7
44132: PPUSH
44133: LD_INT 3
44135: PPUSH
44136: LD_INT 4
44138: PPUSH
44139: CALL_OW 272
44143: PUSH
44144: LD_VAR 0 8
44148: PPUSH
44149: LD_INT 3
44151: PPUSH
44152: LD_INT 4
44154: PPUSH
44155: CALL_OW 273
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_VAR 0 7
44168: PPUSH
44169: LD_INT 4
44171: PPUSH
44172: LD_INT 4
44174: PPUSH
44175: CALL_OW 272
44179: PUSH
44180: LD_VAR 0 8
44184: PPUSH
44185: LD_INT 4
44187: PPUSH
44188: LD_INT 4
44190: PPUSH
44191: CALL_OW 273
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PUSH
44200: LD_VAR 0 7
44204: PPUSH
44205: LD_INT 5
44207: PPUSH
44208: LD_INT 4
44210: PPUSH
44211: CALL_OW 272
44215: PUSH
44216: LD_VAR 0 8
44220: PPUSH
44221: LD_INT 5
44223: PPUSH
44224: LD_INT 4
44226: PPUSH
44227: CALL_OW 273
44231: PUSH
44232: EMPTY
44233: LIST
44234: LIST
44235: PUSH
44236: EMPTY
44237: LIST
44238: LIST
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: ST_TO_ADDR
// for i = tmp downto 1 do
44244: LD_ADDR_VAR 0 4
44248: PUSH
44249: DOUBLE
44250: LD_VAR 0 6
44254: INC
44255: ST_TO_ADDR
44256: LD_INT 1
44258: PUSH
44259: FOR_DOWNTO
44260: IFFALSE 44363
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44262: LD_VAR 0 6
44266: PUSH
44267: LD_VAR 0 4
44271: ARRAY
44272: PUSH
44273: LD_INT 1
44275: ARRAY
44276: PPUSH
44277: LD_VAR 0 6
44281: PUSH
44282: LD_VAR 0 4
44286: ARRAY
44287: PUSH
44288: LD_INT 2
44290: ARRAY
44291: PPUSH
44292: CALL_OW 488
44296: NOT
44297: IFTRUE 44339
44299: PUSH
44300: LD_VAR 0 6
44304: PUSH
44305: LD_VAR 0 4
44309: ARRAY
44310: PUSH
44311: LD_INT 1
44313: ARRAY
44314: PPUSH
44315: LD_VAR 0 6
44319: PUSH
44320: LD_VAR 0 4
44324: ARRAY
44325: PUSH
44326: LD_INT 2
44328: ARRAY
44329: PPUSH
44330: CALL_OW 428
44334: PUSH
44335: LD_INT 0
44337: NONEQUAL
44338: OR
44339: IFFALSE 44361
// tmp := Delete ( tmp , i ) ;
44341: LD_ADDR_VAR 0 6
44345: PUSH
44346: LD_VAR 0 6
44350: PPUSH
44351: LD_VAR 0 4
44355: PPUSH
44356: CALL_OW 3
44360: ST_TO_ADDR
44361: GO 44259
44363: POP
44364: POP
// j := GetClosestHex ( unit , tmp ) ;
44365: LD_ADDR_VAR 0 5
44369: PUSH
44370: LD_VAR 0 1
44374: PPUSH
44375: LD_VAR 0 6
44379: PPUSH
44380: CALL 43657 0 2
44384: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44385: LD_VAR 0 1
44389: PPUSH
44390: LD_VAR 0 5
44394: PUSH
44395: LD_INT 1
44397: ARRAY
44398: PPUSH
44399: LD_VAR 0 5
44403: PUSH
44404: LD_INT 2
44406: ARRAY
44407: PPUSH
44408: CALL_OW 111
// result := j ;
44412: LD_ADDR_VAR 0 3
44416: PUSH
44417: LD_VAR 0 5
44421: ST_TO_ADDR
// end ;
44422: LD_VAR 0 3
44426: RET
// export function PrepareApemanSoldier ( ) ; begin
44427: LD_INT 0
44429: PPUSH
// uc_nation := 0 ;
44430: LD_ADDR_OWVAR 21
44434: PUSH
44435: LD_INT 0
44437: ST_TO_ADDR
// hc_sex := sex_male ;
44438: LD_ADDR_OWVAR 27
44442: PUSH
44443: LD_INT 1
44445: ST_TO_ADDR
// hc_name :=  ;
44446: LD_ADDR_OWVAR 26
44450: PUSH
44451: LD_STRING 
44453: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44454: LD_ADDR_OWVAR 28
44458: PUSH
44459: LD_INT 15
44461: ST_TO_ADDR
// hc_gallery :=  ;
44462: LD_ADDR_OWVAR 33
44466: PUSH
44467: LD_STRING 
44469: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44470: LD_ADDR_OWVAR 31
44474: PUSH
44475: LD_INT 0
44477: PPUSH
44478: LD_INT 3
44480: PPUSH
44481: CALL_OW 12
44485: PUSH
44486: LD_INT 0
44488: PPUSH
44489: LD_INT 3
44491: PPUSH
44492: CALL_OW 12
44496: PUSH
44497: LD_INT 0
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
44509: LD_ADDR_OWVAR 29
44513: PUSH
44514: LD_INT 10
44516: PUSH
44517: LD_INT 12
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: ST_TO_ADDR
// end ;
44524: LD_VAR 0 1
44528: RET
// export function PrepareApemanEngineer ( ) ; begin
44529: LD_INT 0
44531: PPUSH
// uc_nation := 0 ;
44532: LD_ADDR_OWVAR 21
44536: PUSH
44537: LD_INT 0
44539: ST_TO_ADDR
// hc_sex := sex_male ;
44540: LD_ADDR_OWVAR 27
44544: PUSH
44545: LD_INT 1
44547: ST_TO_ADDR
// hc_name :=  ;
44548: LD_ADDR_OWVAR 26
44552: PUSH
44553: LD_STRING 
44555: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44556: LD_ADDR_OWVAR 28
44560: PUSH
44561: LD_INT 16
44563: ST_TO_ADDR
// hc_gallery :=  ;
44564: LD_ADDR_OWVAR 33
44568: PUSH
44569: LD_STRING 
44571: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44572: LD_ADDR_OWVAR 31
44576: PUSH
44577: LD_INT 0
44579: PPUSH
44580: LD_INT 3
44582: PPUSH
44583: CALL_OW 12
44587: PUSH
44588: LD_INT 0
44590: PPUSH
44591: LD_INT 3
44593: PPUSH
44594: CALL_OW 12
44598: PUSH
44599: LD_INT 0
44601: PUSH
44602: LD_INT 0
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: LIST
44609: LIST
44610: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
44611: LD_ADDR_OWVAR 29
44615: PUSH
44616: LD_INT 10
44618: PUSH
44619: LD_INT 12
44621: PUSH
44622: EMPTY
44623: LIST
44624: LIST
44625: ST_TO_ADDR
// end ;
44626: LD_VAR 0 1
44630: RET
// export function PrepareApeman ( agressivity ) ; begin
44631: LD_INT 0
44633: PPUSH
// uc_side := 0 ;
44634: LD_ADDR_OWVAR 20
44638: PUSH
44639: LD_INT 0
44641: ST_TO_ADDR
// uc_nation := 0 ;
44642: LD_ADDR_OWVAR 21
44646: PUSH
44647: LD_INT 0
44649: ST_TO_ADDR
// hc_sex := sex_male ;
44650: LD_ADDR_OWVAR 27
44654: PUSH
44655: LD_INT 1
44657: ST_TO_ADDR
// hc_class := class_apeman ;
44658: LD_ADDR_OWVAR 28
44662: PUSH
44663: LD_INT 12
44665: ST_TO_ADDR
// hc_gallery :=  ;
44666: LD_ADDR_OWVAR 33
44670: PUSH
44671: LD_STRING 
44673: ST_TO_ADDR
// hc_name :=  ;
44674: LD_ADDR_OWVAR 26
44678: PUSH
44679: LD_STRING 
44681: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
44682: LD_ADDR_OWVAR 29
44686: PUSH
44687: LD_INT 10
44689: PUSH
44690: LD_INT 12
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: ST_TO_ADDR
// if agressivity = 0 then
44697: LD_VAR 0 1
44701: PUSH
44702: LD_INT 0
44704: EQUAL
44705: IFFALSE 44717
// hc_agressivity := 0 else
44707: LD_ADDR_OWVAR 35
44711: PUSH
44712: LD_INT 0
44714: ST_TO_ADDR
44715: GO 44738
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44717: LD_ADDR_OWVAR 35
44721: PUSH
44722: LD_VAR 0 1
44726: NEG
44727: PPUSH
44728: LD_VAR 0 1
44732: PPUSH
44733: CALL_OW 12
44737: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44738: LD_ADDR_OWVAR 31
44742: PUSH
44743: LD_INT 0
44745: PPUSH
44746: LD_INT 3
44748: PPUSH
44749: CALL_OW 12
44753: PUSH
44754: LD_INT 0
44756: PPUSH
44757: LD_INT 3
44759: PPUSH
44760: CALL_OW 12
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 0
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: ST_TO_ADDR
// end ;
44777: LD_VAR 0 2
44781: RET
// export function PrepareTiger ( agressivity ) ; begin
44782: LD_INT 0
44784: PPUSH
// uc_side := 0 ;
44785: LD_ADDR_OWVAR 20
44789: PUSH
44790: LD_INT 0
44792: ST_TO_ADDR
// uc_nation := 0 ;
44793: LD_ADDR_OWVAR 21
44797: PUSH
44798: LD_INT 0
44800: ST_TO_ADDR
// InitHc ;
44801: CALL_OW 19
// hc_class := class_tiger ;
44805: LD_ADDR_OWVAR 28
44809: PUSH
44810: LD_INT 14
44812: ST_TO_ADDR
// hc_gallery :=  ;
44813: LD_ADDR_OWVAR 33
44817: PUSH
44818: LD_STRING 
44820: ST_TO_ADDR
// hc_name :=  ;
44821: LD_ADDR_OWVAR 26
44825: PUSH
44826: LD_STRING 
44828: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44829: LD_ADDR_OWVAR 35
44833: PUSH
44834: LD_VAR 0 1
44838: NEG
44839: PPUSH
44840: LD_VAR 0 1
44844: PPUSH
44845: CALL_OW 12
44849: ST_TO_ADDR
// end ;
44850: LD_VAR 0 2
44854: RET
// export function PrepareEnchidna ( ) ; begin
44855: LD_INT 0
44857: PPUSH
// uc_side := 0 ;
44858: LD_ADDR_OWVAR 20
44862: PUSH
44863: LD_INT 0
44865: ST_TO_ADDR
// uc_nation := 0 ;
44866: LD_ADDR_OWVAR 21
44870: PUSH
44871: LD_INT 0
44873: ST_TO_ADDR
// InitHc ;
44874: CALL_OW 19
// hc_class := class_baggie ;
44878: LD_ADDR_OWVAR 28
44882: PUSH
44883: LD_INT 13
44885: ST_TO_ADDR
// hc_gallery :=  ;
44886: LD_ADDR_OWVAR 33
44890: PUSH
44891: LD_STRING 
44893: ST_TO_ADDR
// hc_name :=  ;
44894: LD_ADDR_OWVAR 26
44898: PUSH
44899: LD_STRING 
44901: ST_TO_ADDR
// end ;
44902: LD_VAR 0 1
44906: RET
// export function PrepareFrog ( ) ; begin
44907: LD_INT 0
44909: PPUSH
// uc_side := 0 ;
44910: LD_ADDR_OWVAR 20
44914: PUSH
44915: LD_INT 0
44917: ST_TO_ADDR
// uc_nation := 0 ;
44918: LD_ADDR_OWVAR 21
44922: PUSH
44923: LD_INT 0
44925: ST_TO_ADDR
// InitHc ;
44926: CALL_OW 19
// hc_class := class_frog ;
44930: LD_ADDR_OWVAR 28
44934: PUSH
44935: LD_INT 19
44937: ST_TO_ADDR
// hc_gallery :=  ;
44938: LD_ADDR_OWVAR 33
44942: PUSH
44943: LD_STRING 
44945: ST_TO_ADDR
// hc_name :=  ;
44946: LD_ADDR_OWVAR 26
44950: PUSH
44951: LD_STRING 
44953: ST_TO_ADDR
// end ;
44954: LD_VAR 0 1
44958: RET
// export function PrepareFish ( ) ; begin
44959: LD_INT 0
44961: PPUSH
// uc_side := 0 ;
44962: LD_ADDR_OWVAR 20
44966: PUSH
44967: LD_INT 0
44969: ST_TO_ADDR
// uc_nation := 0 ;
44970: LD_ADDR_OWVAR 21
44974: PUSH
44975: LD_INT 0
44977: ST_TO_ADDR
// InitHc ;
44978: CALL_OW 19
// hc_class := class_fish ;
44982: LD_ADDR_OWVAR 28
44986: PUSH
44987: LD_INT 20
44989: ST_TO_ADDR
// hc_gallery :=  ;
44990: LD_ADDR_OWVAR 33
44994: PUSH
44995: LD_STRING 
44997: ST_TO_ADDR
// hc_name :=  ;
44998: LD_ADDR_OWVAR 26
45002: PUSH
45003: LD_STRING 
45005: ST_TO_ADDR
// end ;
45006: LD_VAR 0 1
45010: RET
// export function PrepareBird ( ) ; begin
45011: LD_INT 0
45013: PPUSH
// uc_side := 0 ;
45014: LD_ADDR_OWVAR 20
45018: PUSH
45019: LD_INT 0
45021: ST_TO_ADDR
// uc_nation := 0 ;
45022: LD_ADDR_OWVAR 21
45026: PUSH
45027: LD_INT 0
45029: ST_TO_ADDR
// InitHc ;
45030: CALL_OW 19
// hc_class := class_phororhacos ;
45034: LD_ADDR_OWVAR 28
45038: PUSH
45039: LD_INT 18
45041: ST_TO_ADDR
// hc_gallery :=  ;
45042: LD_ADDR_OWVAR 33
45046: PUSH
45047: LD_STRING 
45049: ST_TO_ADDR
// hc_name :=  ;
45050: LD_ADDR_OWVAR 26
45054: PUSH
45055: LD_STRING 
45057: ST_TO_ADDR
// end ;
45058: LD_VAR 0 1
45062: RET
// export function PrepareHorse ( ) ; begin
45063: LD_INT 0
45065: PPUSH
// uc_side := 0 ;
45066: LD_ADDR_OWVAR 20
45070: PUSH
45071: LD_INT 0
45073: ST_TO_ADDR
// uc_nation := 0 ;
45074: LD_ADDR_OWVAR 21
45078: PUSH
45079: LD_INT 0
45081: ST_TO_ADDR
// InitHc ;
45082: CALL_OW 19
// hc_class := class_horse ;
45086: LD_ADDR_OWVAR 28
45090: PUSH
45091: LD_INT 21
45093: ST_TO_ADDR
// hc_gallery :=  ;
45094: LD_ADDR_OWVAR 33
45098: PUSH
45099: LD_STRING 
45101: ST_TO_ADDR
// hc_name :=  ;
45102: LD_ADDR_OWVAR 26
45106: PUSH
45107: LD_STRING 
45109: ST_TO_ADDR
// end ;
45110: LD_VAR 0 1
45114: RET
// export function PrepareMastodont ( ) ; begin
45115: LD_INT 0
45117: PPUSH
// uc_side := 0 ;
45118: LD_ADDR_OWVAR 20
45122: PUSH
45123: LD_INT 0
45125: ST_TO_ADDR
// uc_nation := 0 ;
45126: LD_ADDR_OWVAR 21
45130: PUSH
45131: LD_INT 0
45133: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45134: LD_ADDR_OWVAR 37
45138: PUSH
45139: LD_INT 31
45141: ST_TO_ADDR
// vc_control := control_rider ;
45142: LD_ADDR_OWVAR 38
45146: PUSH
45147: LD_INT 4
45149: ST_TO_ADDR
// end ;
45150: LD_VAR 0 1
45154: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45155: LD_INT 0
45157: PPUSH
45158: PPUSH
45159: PPUSH
// uc_side = 0 ;
45160: LD_ADDR_OWVAR 20
45164: PUSH
45165: LD_INT 0
45167: ST_TO_ADDR
// uc_nation = 0 ;
45168: LD_ADDR_OWVAR 21
45172: PUSH
45173: LD_INT 0
45175: ST_TO_ADDR
// InitHc_All ( ) ;
45176: CALL_OW 584
// InitVc ;
45180: CALL_OW 20
// if mastodonts then
45184: LD_VAR 0 6
45188: IFFALSE 45255
// for i = 1 to mastodonts do
45190: LD_ADDR_VAR 0 11
45194: PUSH
45195: DOUBLE
45196: LD_INT 1
45198: DEC
45199: ST_TO_ADDR
45200: LD_VAR 0 6
45204: PUSH
45205: FOR_TO
45206: IFFALSE 45253
// begin vc_chassis := 31 ;
45208: LD_ADDR_OWVAR 37
45212: PUSH
45213: LD_INT 31
45215: ST_TO_ADDR
// vc_control := control_rider ;
45216: LD_ADDR_OWVAR 38
45220: PUSH
45221: LD_INT 4
45223: ST_TO_ADDR
// animal := CreateVehicle ;
45224: LD_ADDR_VAR 0 12
45228: PUSH
45229: CALL_OW 45
45233: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45234: LD_VAR 0 12
45238: PPUSH
45239: LD_VAR 0 8
45243: PPUSH
45244: LD_INT 0
45246: PPUSH
45247: CALL 47397 0 3
// end ;
45251: GO 45205
45253: POP
45254: POP
// if horses then
45255: LD_VAR 0 5
45259: IFFALSE 45326
// for i = 1 to horses do
45261: LD_ADDR_VAR 0 11
45265: PUSH
45266: DOUBLE
45267: LD_INT 1
45269: DEC
45270: ST_TO_ADDR
45271: LD_VAR 0 5
45275: PUSH
45276: FOR_TO
45277: IFFALSE 45324
// begin hc_class := 21 ;
45279: LD_ADDR_OWVAR 28
45283: PUSH
45284: LD_INT 21
45286: ST_TO_ADDR
// hc_gallery :=  ;
45287: LD_ADDR_OWVAR 33
45291: PUSH
45292: LD_STRING 
45294: ST_TO_ADDR
// animal := CreateHuman ;
45295: LD_ADDR_VAR 0 12
45299: PUSH
45300: CALL_OW 44
45304: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45305: LD_VAR 0 12
45309: PPUSH
45310: LD_VAR 0 8
45314: PPUSH
45315: LD_INT 0
45317: PPUSH
45318: CALL 47397 0 3
// end ;
45322: GO 45276
45324: POP
45325: POP
// if birds then
45326: LD_VAR 0 1
45330: IFFALSE 45397
// for i = 1 to birds do
45332: LD_ADDR_VAR 0 11
45336: PUSH
45337: DOUBLE
45338: LD_INT 1
45340: DEC
45341: ST_TO_ADDR
45342: LD_VAR 0 1
45346: PUSH
45347: FOR_TO
45348: IFFALSE 45395
// begin hc_class := 18 ;
45350: LD_ADDR_OWVAR 28
45354: PUSH
45355: LD_INT 18
45357: ST_TO_ADDR
// hc_gallery =  ;
45358: LD_ADDR_OWVAR 33
45362: PUSH
45363: LD_STRING 
45365: ST_TO_ADDR
// animal := CreateHuman ;
45366: LD_ADDR_VAR 0 12
45370: PUSH
45371: CALL_OW 44
45375: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45376: LD_VAR 0 12
45380: PPUSH
45381: LD_VAR 0 8
45385: PPUSH
45386: LD_INT 0
45388: PPUSH
45389: CALL 47397 0 3
// end ;
45393: GO 45347
45395: POP
45396: POP
// if tigers then
45397: LD_VAR 0 2
45401: IFFALSE 45485
// for i = 1 to tigers do
45403: LD_ADDR_VAR 0 11
45407: PUSH
45408: DOUBLE
45409: LD_INT 1
45411: DEC
45412: ST_TO_ADDR
45413: LD_VAR 0 2
45417: PUSH
45418: FOR_TO
45419: IFFALSE 45483
// begin hc_class = class_tiger ;
45421: LD_ADDR_OWVAR 28
45425: PUSH
45426: LD_INT 14
45428: ST_TO_ADDR
// hc_gallery =  ;
45429: LD_ADDR_OWVAR 33
45433: PUSH
45434: LD_STRING 
45436: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45437: LD_ADDR_OWVAR 35
45441: PUSH
45442: LD_INT 7
45444: NEG
45445: PPUSH
45446: LD_INT 7
45448: PPUSH
45449: CALL_OW 12
45453: ST_TO_ADDR
// animal := CreateHuman ;
45454: LD_ADDR_VAR 0 12
45458: PUSH
45459: CALL_OW 44
45463: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45464: LD_VAR 0 12
45468: PPUSH
45469: LD_VAR 0 8
45473: PPUSH
45474: LD_INT 0
45476: PPUSH
45477: CALL 47397 0 3
// end ;
45481: GO 45418
45483: POP
45484: POP
// if apemans then
45485: LD_VAR 0 3
45489: IFFALSE 45612
// for i = 1 to apemans do
45491: LD_ADDR_VAR 0 11
45495: PUSH
45496: DOUBLE
45497: LD_INT 1
45499: DEC
45500: ST_TO_ADDR
45501: LD_VAR 0 3
45505: PUSH
45506: FOR_TO
45507: IFFALSE 45610
// begin hc_class = class_apeman ;
45509: LD_ADDR_OWVAR 28
45513: PUSH
45514: LD_INT 12
45516: ST_TO_ADDR
// hc_gallery =  ;
45517: LD_ADDR_OWVAR 33
45521: PUSH
45522: LD_STRING 
45524: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45525: LD_ADDR_OWVAR 35
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PPUSH
45534: LD_INT 2
45536: PPUSH
45537: CALL_OW 12
45541: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45542: LD_ADDR_OWVAR 31
45546: PUSH
45547: LD_INT 1
45549: PPUSH
45550: LD_INT 3
45552: PPUSH
45553: CALL_OW 12
45557: PUSH
45558: LD_INT 1
45560: PPUSH
45561: LD_INT 3
45563: PPUSH
45564: CALL_OW 12
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: LD_INT 0
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: LIST
45579: LIST
45580: ST_TO_ADDR
// animal := CreateHuman ;
45581: LD_ADDR_VAR 0 12
45585: PUSH
45586: CALL_OW 44
45590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45591: LD_VAR 0 12
45595: PPUSH
45596: LD_VAR 0 8
45600: PPUSH
45601: LD_INT 0
45603: PPUSH
45604: CALL 47397 0 3
// end ;
45608: GO 45506
45610: POP
45611: POP
// if enchidnas then
45612: LD_VAR 0 4
45616: IFFALSE 45683
// for i = 1 to enchidnas do
45618: LD_ADDR_VAR 0 11
45622: PUSH
45623: DOUBLE
45624: LD_INT 1
45626: DEC
45627: ST_TO_ADDR
45628: LD_VAR 0 4
45632: PUSH
45633: FOR_TO
45634: IFFALSE 45681
// begin hc_class = 13 ;
45636: LD_ADDR_OWVAR 28
45640: PUSH
45641: LD_INT 13
45643: ST_TO_ADDR
// hc_gallery =  ;
45644: LD_ADDR_OWVAR 33
45648: PUSH
45649: LD_STRING 
45651: ST_TO_ADDR
// animal := CreateHuman ;
45652: LD_ADDR_VAR 0 12
45656: PUSH
45657: CALL_OW 44
45661: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45662: LD_VAR 0 12
45666: PPUSH
45667: LD_VAR 0 8
45671: PPUSH
45672: LD_INT 0
45674: PPUSH
45675: CALL 47397 0 3
// end ;
45679: GO 45633
45681: POP
45682: POP
// if fishes then
45683: LD_VAR 0 7
45687: IFFALSE 45754
// for i = 1 to fishes do
45689: LD_ADDR_VAR 0 11
45693: PUSH
45694: DOUBLE
45695: LD_INT 1
45697: DEC
45698: ST_TO_ADDR
45699: LD_VAR 0 7
45703: PUSH
45704: FOR_TO
45705: IFFALSE 45752
// begin hc_class = 20 ;
45707: LD_ADDR_OWVAR 28
45711: PUSH
45712: LD_INT 20
45714: ST_TO_ADDR
// hc_gallery =  ;
45715: LD_ADDR_OWVAR 33
45719: PUSH
45720: LD_STRING 
45722: ST_TO_ADDR
// animal := CreateHuman ;
45723: LD_ADDR_VAR 0 12
45727: PUSH
45728: CALL_OW 44
45732: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45733: LD_VAR 0 12
45737: PPUSH
45738: LD_VAR 0 9
45742: PPUSH
45743: LD_INT 0
45745: PPUSH
45746: CALL 47397 0 3
// end ;
45750: GO 45704
45752: POP
45753: POP
// end ;
45754: LD_VAR 0 10
45758: RET
// export function WantHeal ( sci , unit ) ; begin
45759: LD_INT 0
45761: PPUSH
// if GetTaskList ( sci ) > 0 then
45762: LD_VAR 0 1
45766: PPUSH
45767: CALL_OW 437
45771: PUSH
45772: LD_INT 0
45774: GREATER
45775: IFFALSE 45847
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45777: LD_VAR 0 1
45781: PPUSH
45782: CALL_OW 437
45786: PUSH
45787: LD_INT 1
45789: ARRAY
45790: PUSH
45791: LD_INT 1
45793: ARRAY
45794: PUSH
45795: LD_STRING l
45797: EQUAL
45798: IFFALSE 45825
45800: PUSH
45801: LD_VAR 0 1
45805: PPUSH
45806: CALL_OW 437
45810: PUSH
45811: LD_INT 1
45813: ARRAY
45814: PUSH
45815: LD_INT 4
45817: ARRAY
45818: PUSH
45819: LD_VAR 0 2
45823: EQUAL
45824: AND
45825: IFFALSE 45837
// result := true else
45827: LD_ADDR_VAR 0 3
45831: PUSH
45832: LD_INT 1
45834: ST_TO_ADDR
45835: GO 45845
// result := false ;
45837: LD_ADDR_VAR 0 3
45841: PUSH
45842: LD_INT 0
45844: ST_TO_ADDR
// end else
45845: GO 45855
// result := false ;
45847: LD_ADDR_VAR 0 3
45851: PUSH
45852: LD_INT 0
45854: ST_TO_ADDR
// end ;
45855: LD_VAR 0 3
45859: RET
// export function HealTarget ( sci ) ; begin
45860: LD_INT 0
45862: PPUSH
// if not sci then
45863: LD_VAR 0 1
45867: NOT
45868: IFFALSE 45872
// exit ;
45870: GO 45937
// result := 0 ;
45872: LD_ADDR_VAR 0 2
45876: PUSH
45877: LD_INT 0
45879: ST_TO_ADDR
// if GetTaskList ( sci ) then
45880: LD_VAR 0 1
45884: PPUSH
45885: CALL_OW 437
45889: IFFALSE 45937
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45891: LD_VAR 0 1
45895: PPUSH
45896: CALL_OW 437
45900: PUSH
45901: LD_INT 1
45903: ARRAY
45904: PUSH
45905: LD_INT 1
45907: ARRAY
45908: PUSH
45909: LD_STRING l
45911: EQUAL
45912: IFFALSE 45937
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
45914: LD_ADDR_VAR 0 2
45918: PUSH
45919: LD_VAR 0 1
45923: PPUSH
45924: CALL_OW 437
45928: PUSH
45929: LD_INT 1
45931: ARRAY
45932: PUSH
45933: LD_INT 4
45935: ARRAY
45936: ST_TO_ADDR
// end ;
45937: LD_VAR 0 2
45941: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
45942: LD_INT 0
45944: PPUSH
45945: PPUSH
45946: PPUSH
45947: PPUSH
// if not base_units then
45948: LD_VAR 0 1
45952: NOT
45953: IFFALSE 45957
// exit ;
45955: GO 46044
// result := false ;
45957: LD_ADDR_VAR 0 2
45961: PUSH
45962: LD_INT 0
45964: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
45965: LD_ADDR_VAR 0 5
45969: PUSH
45970: LD_VAR 0 1
45974: PPUSH
45975: LD_INT 21
45977: PUSH
45978: LD_INT 3
45980: PUSH
45981: EMPTY
45982: LIST
45983: LIST
45984: PPUSH
45985: CALL_OW 72
45989: ST_TO_ADDR
// if not tmp then
45990: LD_VAR 0 5
45994: NOT
45995: IFFALSE 45999
// exit ;
45997: GO 46044
// for i in tmp do
45999: LD_ADDR_VAR 0 3
46003: PUSH
46004: LD_VAR 0 5
46008: PUSH
46009: FOR_IN
46010: IFFALSE 46042
// begin result := EnemyInRange ( i , 22 ) ;
46012: LD_ADDR_VAR 0 2
46016: PUSH
46017: LD_VAR 0 3
46021: PPUSH
46022: LD_INT 22
46024: PPUSH
46025: CALL 43459 0 2
46029: ST_TO_ADDR
// if result then
46030: LD_VAR 0 2
46034: IFFALSE 46040
// exit ;
46036: POP
46037: POP
46038: GO 46044
// end ;
46040: GO 46009
46042: POP
46043: POP
// end ;
46044: LD_VAR 0 2
46048: RET
// export function FilterByTag ( units , tag ) ; begin
46049: LD_INT 0
46051: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46052: LD_ADDR_VAR 0 3
46056: PUSH
46057: LD_VAR 0 1
46061: PPUSH
46062: LD_INT 120
46064: PUSH
46065: LD_VAR 0 2
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PPUSH
46074: CALL_OW 72
46078: ST_TO_ADDR
// end ;
46079: LD_VAR 0 3
46083: RET
// export function IsDriver ( un ) ; begin
46084: LD_INT 0
46086: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46087: LD_ADDR_VAR 0 2
46091: PUSH
46092: LD_VAR 0 1
46096: PUSH
46097: LD_INT 55
46099: PUSH
46100: EMPTY
46101: LIST
46102: PPUSH
46103: CALL_OW 69
46107: IN
46108: ST_TO_ADDR
// end ;
46109: LD_VAR 0 2
46113: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46114: LD_INT 0
46116: PPUSH
46117: PPUSH
// list := [ ] ;
46118: LD_ADDR_VAR 0 5
46122: PUSH
46123: EMPTY
46124: ST_TO_ADDR
// case d of 0 :
46125: LD_VAR 0 3
46129: PUSH
46130: LD_INT 0
46132: DOUBLE
46133: EQUAL
46134: IFTRUE 46138
46136: GO 46271
46138: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46139: LD_ADDR_VAR 0 5
46143: PUSH
46144: LD_VAR 0 1
46148: PUSH
46149: LD_INT 4
46151: MINUS
46152: PUSH
46153: LD_VAR 0 2
46157: PUSH
46158: LD_INT 4
46160: MINUS
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: PUSH
46170: LD_VAR 0 1
46174: PUSH
46175: LD_INT 3
46177: MINUS
46178: PUSH
46179: LD_VAR 0 2
46183: PUSH
46184: LD_INT 1
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: PUSH
46192: LD_VAR 0 1
46196: PUSH
46197: LD_INT 4
46199: PLUS
46200: PUSH
46201: LD_VAR 0 2
46205: PUSH
46206: LD_INT 4
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: LIST
46213: PUSH
46214: LD_VAR 0 1
46218: PUSH
46219: LD_INT 3
46221: PLUS
46222: PUSH
46223: LD_VAR 0 2
46227: PUSH
46228: LD_INT 3
46230: PLUS
46231: PUSH
46232: LD_INT 5
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: LIST
46239: PUSH
46240: LD_VAR 0 1
46244: PUSH
46245: LD_VAR 0 2
46249: PUSH
46250: LD_INT 4
46252: PLUS
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: LIST
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: LIST
46266: LIST
46267: LIST
46268: ST_TO_ADDR
// end ; 1 :
46269: GO 46969
46271: LD_INT 1
46273: DOUBLE
46274: EQUAL
46275: IFTRUE 46279
46277: GO 46412
46279: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46280: LD_ADDR_VAR 0 5
46284: PUSH
46285: LD_VAR 0 1
46289: PUSH
46290: LD_VAR 0 2
46294: PUSH
46295: LD_INT 4
46297: MINUS
46298: PUSH
46299: LD_INT 3
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: PUSH
46307: LD_VAR 0 1
46311: PUSH
46312: LD_INT 3
46314: MINUS
46315: PUSH
46316: LD_VAR 0 2
46320: PUSH
46321: LD_INT 3
46323: MINUS
46324: PUSH
46325: LD_INT 2
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: PUSH
46333: LD_VAR 0 1
46337: PUSH
46338: LD_INT 4
46340: MINUS
46341: PUSH
46342: LD_VAR 0 2
46346: PUSH
46347: LD_INT 1
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: PUSH
46355: LD_VAR 0 1
46359: PUSH
46360: LD_VAR 0 2
46364: PUSH
46365: LD_INT 3
46367: PLUS
46368: PUSH
46369: LD_INT 0
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: LIST
46376: PUSH
46377: LD_VAR 0 1
46381: PUSH
46382: LD_INT 4
46384: PLUS
46385: PUSH
46386: LD_VAR 0 2
46390: PUSH
46391: LD_INT 4
46393: PLUS
46394: PUSH
46395: LD_INT 5
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: LIST
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: LIST
46407: LIST
46408: LIST
46409: ST_TO_ADDR
// end ; 2 :
46410: GO 46969
46412: LD_INT 2
46414: DOUBLE
46415: EQUAL
46416: IFTRUE 46420
46418: GO 46549
46420: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46421: LD_ADDR_VAR 0 5
46425: PUSH
46426: LD_VAR 0 1
46430: PUSH
46431: LD_VAR 0 2
46435: PUSH
46436: LD_INT 3
46438: MINUS
46439: PUSH
46440: LD_INT 3
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: PUSH
46448: LD_VAR 0 1
46452: PUSH
46453: LD_INT 4
46455: PLUS
46456: PUSH
46457: LD_VAR 0 2
46461: PUSH
46462: LD_INT 4
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: PUSH
46470: LD_VAR 0 1
46474: PUSH
46475: LD_VAR 0 2
46479: PUSH
46480: LD_INT 4
46482: PLUS
46483: PUSH
46484: LD_INT 0
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: LIST
46491: PUSH
46492: LD_VAR 0 1
46496: PUSH
46497: LD_INT 3
46499: MINUS
46500: PUSH
46501: LD_VAR 0 2
46505: PUSH
46506: LD_INT 1
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: LIST
46513: PUSH
46514: LD_VAR 0 1
46518: PUSH
46519: LD_INT 4
46521: MINUS
46522: PUSH
46523: LD_VAR 0 2
46527: PUSH
46528: LD_INT 4
46530: MINUS
46531: PUSH
46532: LD_INT 2
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: ST_TO_ADDR
// end ; 3 :
46547: GO 46969
46549: LD_INT 3
46551: DOUBLE
46552: EQUAL
46553: IFTRUE 46557
46555: GO 46690
46557: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46558: LD_ADDR_VAR 0 5
46562: PUSH
46563: LD_VAR 0 1
46567: PUSH
46568: LD_INT 3
46570: PLUS
46571: PUSH
46572: LD_VAR 0 2
46576: PUSH
46577: LD_INT 4
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: PUSH
46585: LD_VAR 0 1
46589: PUSH
46590: LD_INT 4
46592: PLUS
46593: PUSH
46594: LD_VAR 0 2
46598: PUSH
46599: LD_INT 4
46601: PLUS
46602: PUSH
46603: LD_INT 5
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: LIST
46610: PUSH
46611: LD_VAR 0 1
46615: PUSH
46616: LD_INT 4
46618: MINUS
46619: PUSH
46620: LD_VAR 0 2
46624: PUSH
46625: LD_INT 1
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: PUSH
46633: LD_VAR 0 1
46637: PUSH
46638: LD_VAR 0 2
46642: PUSH
46643: LD_INT 4
46645: MINUS
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: LIST
46654: PUSH
46655: LD_VAR 0 1
46659: PUSH
46660: LD_INT 3
46662: MINUS
46663: PUSH
46664: LD_VAR 0 2
46668: PUSH
46669: LD_INT 3
46671: MINUS
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: ST_TO_ADDR
// end ; 4 :
46688: GO 46969
46690: LD_INT 4
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46831
46698: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46699: LD_ADDR_VAR 0 5
46703: PUSH
46704: LD_VAR 0 1
46708: PUSH
46709: LD_VAR 0 2
46713: PUSH
46714: LD_INT 4
46716: PLUS
46717: PUSH
46718: LD_INT 0
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: PUSH
46726: LD_VAR 0 1
46730: PUSH
46731: LD_INT 3
46733: PLUS
46734: PUSH
46735: LD_VAR 0 2
46739: PUSH
46740: LD_INT 3
46742: PLUS
46743: PUSH
46744: LD_INT 5
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: LIST
46751: PUSH
46752: LD_VAR 0 1
46756: PUSH
46757: LD_INT 4
46759: PLUS
46760: PUSH
46761: LD_VAR 0 2
46765: PUSH
46766: LD_INT 4
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: PUSH
46774: LD_VAR 0 1
46778: PUSH
46779: LD_VAR 0 2
46783: PUSH
46784: LD_INT 3
46786: MINUS
46787: PUSH
46788: LD_INT 3
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: LIST
46795: PUSH
46796: LD_VAR 0 1
46800: PUSH
46801: LD_INT 4
46803: MINUS
46804: PUSH
46805: LD_VAR 0 2
46809: PUSH
46810: LD_INT 4
46812: MINUS
46813: PUSH
46814: LD_INT 2
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: ST_TO_ADDR
// end ; 5 :
46829: GO 46969
46831: LD_INT 5
46833: DOUBLE
46834: EQUAL
46835: IFTRUE 46839
46837: GO 46968
46839: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46840: LD_ADDR_VAR 0 5
46844: PUSH
46845: LD_VAR 0 1
46849: PUSH
46850: LD_INT 4
46852: MINUS
46853: PUSH
46854: LD_VAR 0 2
46858: PUSH
46859: LD_INT 1
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: PUSH
46867: LD_VAR 0 1
46871: PUSH
46872: LD_VAR 0 2
46876: PUSH
46877: LD_INT 4
46879: MINUS
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: PUSH
46889: LD_VAR 0 1
46893: PUSH
46894: LD_INT 4
46896: PLUS
46897: PUSH
46898: LD_VAR 0 2
46902: PUSH
46903: LD_INT 4
46905: PLUS
46906: PUSH
46907: LD_INT 5
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: PUSH
46915: LD_VAR 0 1
46919: PUSH
46920: LD_INT 3
46922: PLUS
46923: PUSH
46924: LD_VAR 0 2
46928: PUSH
46929: LD_INT 4
46931: PUSH
46932: EMPTY
46933: LIST
46934: LIST
46935: LIST
46936: PUSH
46937: LD_VAR 0 1
46941: PUSH
46942: LD_VAR 0 2
46946: PUSH
46947: LD_INT 3
46949: PLUS
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: EMPTY
46955: LIST
46956: LIST
46957: LIST
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: ST_TO_ADDR
// end ; end ;
46966: GO 46969
46968: POP
// result := list ;
46969: LD_ADDR_VAR 0 4
46973: PUSH
46974: LD_VAR 0 5
46978: ST_TO_ADDR
// end ;
46979: LD_VAR 0 4
46983: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
46984: LD_INT 0
46986: PPUSH
46987: PPUSH
46988: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
46989: LD_VAR 0 1
46993: NOT
46994: IFTRUE 47022
46996: PUSH
46997: LD_VAR 0 2
47001: PUSH
47002: LD_INT 1
47004: PUSH
47005: LD_INT 2
47007: PUSH
47008: LD_INT 3
47010: PUSH
47011: LD_INT 4
47013: PUSH
47014: EMPTY
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: IN
47020: NOT
47021: OR
47022: IFFALSE 47026
// exit ;
47024: GO 47109
// tmp := [ ] ;
47026: LD_ADDR_VAR 0 5
47030: PUSH
47031: EMPTY
47032: ST_TO_ADDR
// for i in units do
47033: LD_ADDR_VAR 0 4
47037: PUSH
47038: LD_VAR 0 1
47042: PUSH
47043: FOR_IN
47044: IFFALSE 47078
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47046: LD_ADDR_VAR 0 5
47050: PUSH
47051: LD_VAR 0 5
47055: PPUSH
47056: LD_VAR 0 4
47060: PPUSH
47061: LD_VAR 0 2
47065: PPUSH
47066: CALL_OW 259
47070: PPUSH
47071: CALL 48504 0 2
47075: ST_TO_ADDR
47076: GO 47043
47078: POP
47079: POP
// if not tmp then
47080: LD_VAR 0 5
47084: NOT
47085: IFFALSE 47089
// exit ;
47087: GO 47109
// result := SortListByListDesc ( units , tmp ) ;
47089: LD_ADDR_VAR 0 3
47093: PUSH
47094: LD_VAR 0 1
47098: PPUSH
47099: LD_VAR 0 5
47103: PPUSH
47104: CALL_OW 77
47108: ST_TO_ADDR
// end ;
47109: LD_VAR 0 3
47113: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47114: LD_INT 0
47116: PPUSH
47117: PPUSH
47118: PPUSH
// result := false ;
47119: LD_ADDR_VAR 0 3
47123: PUSH
47124: LD_INT 0
47126: ST_TO_ADDR
// if not building then
47127: LD_VAR 0 2
47131: NOT
47132: IFFALSE 47136
// exit ;
47134: GO 47280
// x := GetX ( building ) ;
47136: LD_ADDR_VAR 0 4
47140: PUSH
47141: LD_VAR 0 2
47145: PPUSH
47146: CALL_OW 250
47150: ST_TO_ADDR
// y := GetY ( building ) ;
47151: LD_ADDR_VAR 0 5
47155: PUSH
47156: LD_VAR 0 2
47160: PPUSH
47161: CALL_OW 251
47165: ST_TO_ADDR
// if not x or not y then
47166: LD_VAR 0 4
47170: NOT
47171: IFTRUE 47180
47173: PUSH
47174: LD_VAR 0 5
47178: NOT
47179: OR
47180: IFFALSE 47184
// exit ;
47182: GO 47280
// if GetTaskList ( unit ) then
47184: LD_VAR 0 1
47188: PPUSH
47189: CALL_OW 437
47193: IFFALSE 47280
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47195: LD_STRING e
47197: PUSH
47198: LD_VAR 0 1
47202: PPUSH
47203: CALL_OW 437
47207: PUSH
47208: LD_INT 1
47210: ARRAY
47211: PUSH
47212: LD_INT 1
47214: ARRAY
47215: EQUAL
47216: IFFALSE 47243
47218: PUSH
47219: LD_VAR 0 4
47223: PUSH
47224: LD_VAR 0 1
47228: PPUSH
47229: CALL_OW 437
47233: PUSH
47234: LD_INT 1
47236: ARRAY
47237: PUSH
47238: LD_INT 2
47240: ARRAY
47241: EQUAL
47242: AND
47243: IFFALSE 47270
47245: PUSH
47246: LD_VAR 0 5
47250: PUSH
47251: LD_VAR 0 1
47255: PPUSH
47256: CALL_OW 437
47260: PUSH
47261: LD_INT 1
47263: ARRAY
47264: PUSH
47265: LD_INT 3
47267: ARRAY
47268: EQUAL
47269: AND
47270: IFFALSE 47280
// result := true end ;
47272: LD_ADDR_VAR 0 3
47276: PUSH
47277: LD_INT 1
47279: ST_TO_ADDR
// end ;
47280: LD_VAR 0 3
47284: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47285: LD_INT 0
47287: PPUSH
// result := false ;
47288: LD_ADDR_VAR 0 4
47292: PUSH
47293: LD_INT 0
47295: ST_TO_ADDR
// if GetTaskList ( unit ) then
47296: LD_VAR 0 1
47300: PPUSH
47301: CALL_OW 437
47305: IFFALSE 47392
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47307: LD_STRING M
47309: PUSH
47310: LD_VAR 0 1
47314: PPUSH
47315: CALL_OW 437
47319: PUSH
47320: LD_INT 1
47322: ARRAY
47323: PUSH
47324: LD_INT 1
47326: ARRAY
47327: EQUAL
47328: IFFALSE 47355
47330: PUSH
47331: LD_VAR 0 2
47335: PUSH
47336: LD_VAR 0 1
47340: PPUSH
47341: CALL_OW 437
47345: PUSH
47346: LD_INT 1
47348: ARRAY
47349: PUSH
47350: LD_INT 2
47352: ARRAY
47353: EQUAL
47354: AND
47355: IFFALSE 47382
47357: PUSH
47358: LD_VAR 0 3
47362: PUSH
47363: LD_VAR 0 1
47367: PPUSH
47368: CALL_OW 437
47372: PUSH
47373: LD_INT 1
47375: ARRAY
47376: PUSH
47377: LD_INT 3
47379: ARRAY
47380: EQUAL
47381: AND
47382: IFFALSE 47392
// result := true ;
47384: LD_ADDR_VAR 0 4
47388: PUSH
47389: LD_INT 1
47391: ST_TO_ADDR
// end ; end ;
47392: LD_VAR 0 4
47396: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47397: LD_INT 0
47399: PPUSH
47400: PPUSH
47401: PPUSH
47402: PPUSH
// if not unit or not area then
47403: LD_VAR 0 1
47407: NOT
47408: IFTRUE 47417
47410: PUSH
47411: LD_VAR 0 2
47415: NOT
47416: OR
47417: IFFALSE 47421
// exit ;
47419: GO 47597
// tmp := AreaToList ( area , i ) ;
47421: LD_ADDR_VAR 0 6
47425: PUSH
47426: LD_VAR 0 2
47430: PPUSH
47431: LD_VAR 0 5
47435: PPUSH
47436: CALL_OW 517
47440: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47441: LD_ADDR_VAR 0 5
47445: PUSH
47446: DOUBLE
47447: LD_INT 1
47449: DEC
47450: ST_TO_ADDR
47451: LD_VAR 0 6
47455: PUSH
47456: LD_INT 1
47458: ARRAY
47459: PUSH
47460: FOR_TO
47461: IFFALSE 47595
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47463: LD_ADDR_VAR 0 7
47467: PUSH
47468: LD_VAR 0 6
47472: PUSH
47473: LD_INT 1
47475: ARRAY
47476: PUSH
47477: LD_VAR 0 5
47481: ARRAY
47482: PUSH
47483: LD_VAR 0 6
47487: PUSH
47488: LD_INT 2
47490: ARRAY
47491: PUSH
47492: LD_VAR 0 5
47496: ARRAY
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47502: LD_INT 92
47504: PUSH
47505: LD_VAR 0 7
47509: PUSH
47510: LD_INT 1
47512: ARRAY
47513: PUSH
47514: LD_VAR 0 7
47518: PUSH
47519: LD_INT 2
47521: ARRAY
47522: PUSH
47523: LD_INT 2
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: PPUSH
47532: CALL_OW 69
47536: PUSH
47537: LD_INT 0
47539: EQUAL
47540: IFFALSE 47593
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47542: LD_VAR 0 1
47546: PPUSH
47547: LD_VAR 0 7
47551: PUSH
47552: LD_INT 1
47554: ARRAY
47555: PPUSH
47556: LD_VAR 0 7
47560: PUSH
47561: LD_INT 2
47563: ARRAY
47564: PPUSH
47565: LD_VAR 0 3
47569: PPUSH
47570: CALL_OW 48
// result := IsPlaced ( unit ) ;
47574: LD_ADDR_VAR 0 4
47578: PUSH
47579: LD_VAR 0 1
47583: PPUSH
47584: CALL_OW 305
47588: ST_TO_ADDR
// exit ;
47589: POP
47590: POP
47591: GO 47597
// end ; end ;
47593: GO 47460
47595: POP
47596: POP
// end ;
47597: LD_VAR 0 4
47601: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47602: LD_INT 0
47604: PPUSH
47605: PPUSH
47606: PPUSH
// if not side or side > 8 then
47607: LD_VAR 0 1
47611: NOT
47612: IFTRUE 47624
47614: PUSH
47615: LD_VAR 0 1
47619: PUSH
47620: LD_INT 8
47622: GREATER
47623: OR
47624: IFFALSE 47628
// exit ;
47626: GO 47815
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47628: LD_ADDR_VAR 0 4
47632: PUSH
47633: LD_INT 22
47635: PUSH
47636: LD_VAR 0 1
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 21
47647: PUSH
47648: LD_INT 3
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: EMPTY
47656: LIST
47657: LIST
47658: PPUSH
47659: CALL_OW 69
47663: ST_TO_ADDR
// if not tmp then
47664: LD_VAR 0 4
47668: NOT
47669: IFFALSE 47673
// exit ;
47671: GO 47815
// enable_addtolog := true ;
47673: LD_ADDR_OWVAR 81
47677: PUSH
47678: LD_INT 1
47680: ST_TO_ADDR
// AddToLog ( [ ) ;
47681: LD_STRING [
47683: PPUSH
47684: CALL_OW 561
// for i in tmp do
47688: LD_ADDR_VAR 0 3
47692: PUSH
47693: LD_VAR 0 4
47697: PUSH
47698: FOR_IN
47699: IFFALSE 47806
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47701: LD_STRING [
47703: PUSH
47704: LD_VAR 0 3
47708: PPUSH
47709: CALL_OW 266
47713: STR
47714: PUSH
47715: LD_STRING , 
47717: STR
47718: PUSH
47719: LD_VAR 0 3
47723: PPUSH
47724: CALL_OW 250
47728: STR
47729: PUSH
47730: LD_STRING , 
47732: STR
47733: PUSH
47734: LD_VAR 0 3
47738: PPUSH
47739: CALL_OW 251
47743: STR
47744: PUSH
47745: LD_STRING , 
47747: STR
47748: PUSH
47749: LD_VAR 0 3
47753: PPUSH
47754: CALL_OW 254
47758: STR
47759: PUSH
47760: LD_STRING , 
47762: STR
47763: PUSH
47764: LD_VAR 0 3
47768: PPUSH
47769: LD_INT 1
47771: PPUSH
47772: CALL_OW 268
47776: STR
47777: PUSH
47778: LD_STRING , 
47780: STR
47781: PUSH
47782: LD_VAR 0 3
47786: PPUSH
47787: LD_INT 2
47789: PPUSH
47790: CALL_OW 268
47794: STR
47795: PUSH
47796: LD_STRING ],
47798: STR
47799: PPUSH
47800: CALL_OW 561
// end ;
47804: GO 47698
47806: POP
47807: POP
// AddToLog ( ]; ) ;
47808: LD_STRING ];
47810: PPUSH
47811: CALL_OW 561
// end ;
47815: LD_VAR 0 2
47819: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47820: LD_INT 0
47822: PPUSH
47823: PPUSH
47824: PPUSH
47825: PPUSH
47826: PPUSH
// if not area or not rate or not max then
47827: LD_VAR 0 1
47831: NOT
47832: IFTRUE 47841
47834: PUSH
47835: LD_VAR 0 2
47839: NOT
47840: OR
47841: IFTRUE 47850
47843: PUSH
47844: LD_VAR 0 4
47848: NOT
47849: OR
47850: IFFALSE 47854
// exit ;
47852: GO 48043
// while 1 do
47854: LD_INT 1
47856: IFFALSE 48043
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47858: LD_ADDR_VAR 0 9
47862: PUSH
47863: LD_VAR 0 1
47867: PPUSH
47868: LD_INT 1
47870: PPUSH
47871: CALL_OW 287
47875: PUSH
47876: LD_INT 10
47878: MUL
47879: ST_TO_ADDR
// r := rate / 10 ;
47880: LD_ADDR_VAR 0 7
47884: PUSH
47885: LD_VAR 0 2
47889: PUSH
47890: LD_INT 10
47892: DIVREAL
47893: ST_TO_ADDR
// time := 1 1$00 ;
47894: LD_ADDR_VAR 0 8
47898: PUSH
47899: LD_INT 2100
47901: ST_TO_ADDR
// if amount < min then
47902: LD_VAR 0 9
47906: PUSH
47907: LD_VAR 0 3
47911: LESS
47912: IFFALSE 47930
// r := r * 2 else
47914: LD_ADDR_VAR 0 7
47918: PUSH
47919: LD_VAR 0 7
47923: PUSH
47924: LD_INT 2
47926: MUL
47927: ST_TO_ADDR
47928: GO 47956
// if amount > max then
47930: LD_VAR 0 9
47934: PUSH
47935: LD_VAR 0 4
47939: GREATER
47940: IFFALSE 47956
// r := r / 2 ;
47942: LD_ADDR_VAR 0 7
47946: PUSH
47947: LD_VAR 0 7
47951: PUSH
47952: LD_INT 2
47954: DIVREAL
47955: ST_TO_ADDR
// time := time / r ;
47956: LD_ADDR_VAR 0 8
47960: PUSH
47961: LD_VAR 0 8
47965: PUSH
47966: LD_VAR 0 7
47970: DIVREAL
47971: ST_TO_ADDR
// if time < 0 then
47972: LD_VAR 0 8
47976: PUSH
47977: LD_INT 0
47979: LESS
47980: IFFALSE 47997
// time := time * - 1 ;
47982: LD_ADDR_VAR 0 8
47986: PUSH
47987: LD_VAR 0 8
47991: PUSH
47992: LD_INT 1
47994: NEG
47995: MUL
47996: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
47997: LD_VAR 0 8
48001: PUSH
48002: LD_INT 35
48004: PPUSH
48005: LD_INT 875
48007: PPUSH
48008: CALL_OW 12
48012: PLUS
48013: PPUSH
48014: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48018: LD_INT 1
48020: PPUSH
48021: LD_INT 5
48023: PPUSH
48024: CALL_OW 12
48028: PPUSH
48029: LD_VAR 0 1
48033: PPUSH
48034: LD_INT 1
48036: PPUSH
48037: CALL_OW 55
// end ;
48041: GO 47854
// end ;
48043: LD_VAR 0 5
48047: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48048: LD_INT 0
48050: PPUSH
48051: PPUSH
48052: PPUSH
48053: PPUSH
48054: PPUSH
48055: PPUSH
48056: PPUSH
48057: PPUSH
// if not turrets or not factories then
48058: LD_VAR 0 1
48062: NOT
48063: IFTRUE 48072
48065: PUSH
48066: LD_VAR 0 2
48070: NOT
48071: OR
48072: IFFALSE 48076
// exit ;
48074: GO 48383
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48076: LD_ADDR_VAR 0 10
48080: PUSH
48081: LD_INT 5
48083: PUSH
48084: LD_INT 6
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 4
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 3
48103: PUSH
48104: LD_INT 5
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: LIST
48115: PUSH
48116: LD_INT 24
48118: PUSH
48119: LD_INT 25
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 23
48128: PUSH
48129: LD_INT 27
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 42
48142: PUSH
48143: LD_INT 43
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 44
48152: PUSH
48153: LD_INT 46
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 45
48162: PUSH
48163: LD_INT 47
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: LIST
48174: PUSH
48175: EMPTY
48176: LIST
48177: LIST
48178: LIST
48179: ST_TO_ADDR
// result := [ ] ;
48180: LD_ADDR_VAR 0 3
48184: PUSH
48185: EMPTY
48186: ST_TO_ADDR
// for i in turrets do
48187: LD_ADDR_VAR 0 4
48191: PUSH
48192: LD_VAR 0 1
48196: PUSH
48197: FOR_IN
48198: IFFALSE 48381
// begin nat := GetNation ( i ) ;
48200: LD_ADDR_VAR 0 7
48204: PUSH
48205: LD_VAR 0 4
48209: PPUSH
48210: CALL_OW 248
48214: ST_TO_ADDR
// weapon := 0 ;
48215: LD_ADDR_VAR 0 8
48219: PUSH
48220: LD_INT 0
48222: ST_TO_ADDR
// if not nat then
48223: LD_VAR 0 7
48227: NOT
48228: IFFALSE 48232
// continue ;
48230: GO 48197
// for j in list [ nat ] do
48232: LD_ADDR_VAR 0 5
48236: PUSH
48237: LD_VAR 0 10
48241: PUSH
48242: LD_VAR 0 7
48246: ARRAY
48247: PUSH
48248: FOR_IN
48249: IFFALSE 48290
// if GetBWeapon ( i ) = j [ 1 ] then
48251: LD_VAR 0 4
48255: PPUSH
48256: CALL_OW 269
48260: PUSH
48261: LD_VAR 0 5
48265: PUSH
48266: LD_INT 1
48268: ARRAY
48269: EQUAL
48270: IFFALSE 48288
// begin weapon := j [ 2 ] ;
48272: LD_ADDR_VAR 0 8
48276: PUSH
48277: LD_VAR 0 5
48281: PUSH
48282: LD_INT 2
48284: ARRAY
48285: ST_TO_ADDR
// break ;
48286: GO 48290
// end ;
48288: GO 48248
48290: POP
48291: POP
// if not weapon then
48292: LD_VAR 0 8
48296: NOT
48297: IFFALSE 48301
// continue ;
48299: GO 48197
// for k in factories do
48301: LD_ADDR_VAR 0 6
48305: PUSH
48306: LD_VAR 0 2
48310: PUSH
48311: FOR_IN
48312: IFFALSE 48377
// begin weapons := AvailableWeaponList ( k ) ;
48314: LD_ADDR_VAR 0 9
48318: PUSH
48319: LD_VAR 0 6
48323: PPUSH
48324: CALL_OW 478
48328: ST_TO_ADDR
// if not weapons then
48329: LD_VAR 0 9
48333: NOT
48334: IFFALSE 48338
// continue ;
48336: GO 48311
// if weapon in weapons then
48338: LD_VAR 0 8
48342: PUSH
48343: LD_VAR 0 9
48347: IN
48348: IFFALSE 48375
// begin result := [ i , weapon ] ;
48350: LD_ADDR_VAR 0 3
48354: PUSH
48355: LD_VAR 0 4
48359: PUSH
48360: LD_VAR 0 8
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: ST_TO_ADDR
// exit ;
48369: POP
48370: POP
48371: POP
48372: POP
48373: GO 48383
// end ; end ;
48375: GO 48311
48377: POP
48378: POP
// end ;
48379: GO 48197
48381: POP
48382: POP
// end ;
48383: LD_VAR 0 3
48387: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48388: LD_INT 0
48390: PPUSH
// if not side or side > 8 then
48391: LD_VAR 0 3
48395: NOT
48396: IFTRUE 48408
48398: PUSH
48399: LD_VAR 0 3
48403: PUSH
48404: LD_INT 8
48406: GREATER
48407: OR
48408: IFFALSE 48412
// exit ;
48410: GO 48471
// if not range then
48412: LD_VAR 0 4
48416: NOT
48417: IFFALSE 48428
// range := - 12 ;
48419: LD_ADDR_VAR 0 4
48423: PUSH
48424: LD_INT 12
48426: NEG
48427: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48428: LD_VAR 0 1
48432: PPUSH
48433: LD_VAR 0 2
48437: PPUSH
48438: LD_VAR 0 3
48442: PPUSH
48443: LD_VAR 0 4
48447: PPUSH
48448: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48452: LD_VAR 0 1
48456: PPUSH
48457: LD_VAR 0 2
48461: PPUSH
48462: LD_VAR 0 3
48466: PPUSH
48467: CALL_OW 331
// end ;
48471: LD_VAR 0 5
48475: RET
// export function Video ( mode ) ; begin
48476: LD_INT 0
48478: PPUSH
// ingame_video = mode ;
48479: LD_ADDR_OWVAR 52
48483: PUSH
48484: LD_VAR 0 1
48488: ST_TO_ADDR
// interface_hidden = mode ;
48489: LD_ADDR_OWVAR 54
48493: PUSH
48494: LD_VAR 0 1
48498: ST_TO_ADDR
// end ;
48499: LD_VAR 0 2
48503: RET
// export function Join ( array , element ) ; begin
48504: LD_INT 0
48506: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48507: LD_ADDR_VAR 0 3
48511: PUSH
48512: LD_VAR 0 1
48516: PPUSH
48517: LD_VAR 0 1
48521: PUSH
48522: LD_INT 1
48524: PLUS
48525: PPUSH
48526: LD_VAR 0 2
48530: PPUSH
48531: CALL_OW 1
48535: ST_TO_ADDR
// end ;
48536: LD_VAR 0 3
48540: RET
// export function JoinUnion ( array , element ) ; begin
48541: LD_INT 0
48543: PPUSH
// result := array union element ;
48544: LD_ADDR_VAR 0 3
48548: PUSH
48549: LD_VAR 0 1
48553: PUSH
48554: LD_VAR 0 2
48558: UNION
48559: ST_TO_ADDR
// end ;
48560: LD_VAR 0 3
48564: RET
// export function GetBehemoths ( side ) ; begin
48565: LD_INT 0
48567: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48568: LD_ADDR_VAR 0 2
48572: PUSH
48573: LD_INT 22
48575: PUSH
48576: LD_VAR 0 1
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 31
48587: PUSH
48588: LD_INT 25
48590: PUSH
48591: EMPTY
48592: LIST
48593: LIST
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PPUSH
48599: CALL_OW 69
48603: ST_TO_ADDR
// end ;
48604: LD_VAR 0 2
48608: RET
// export function Shuffle ( array ) ; var i , index ; begin
48609: LD_INT 0
48611: PPUSH
48612: PPUSH
48613: PPUSH
// result := [ ] ;
48614: LD_ADDR_VAR 0 2
48618: PUSH
48619: EMPTY
48620: ST_TO_ADDR
// if not array then
48621: LD_VAR 0 1
48625: NOT
48626: IFFALSE 48630
// exit ;
48628: GO 48729
// Randomize ;
48630: CALL_OW 10
// for i = array downto 1 do
48634: LD_ADDR_VAR 0 3
48638: PUSH
48639: DOUBLE
48640: LD_VAR 0 1
48644: INC
48645: ST_TO_ADDR
48646: LD_INT 1
48648: PUSH
48649: FOR_DOWNTO
48650: IFFALSE 48727
// begin index := rand ( 1 , array ) ;
48652: LD_ADDR_VAR 0 4
48656: PUSH
48657: LD_INT 1
48659: PPUSH
48660: LD_VAR 0 1
48664: PPUSH
48665: CALL_OW 12
48669: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48670: LD_ADDR_VAR 0 2
48674: PUSH
48675: LD_VAR 0 2
48679: PPUSH
48680: LD_VAR 0 2
48684: PUSH
48685: LD_INT 1
48687: PLUS
48688: PPUSH
48689: LD_VAR 0 1
48693: PUSH
48694: LD_VAR 0 4
48698: ARRAY
48699: PPUSH
48700: CALL_OW 2
48704: ST_TO_ADDR
// array := Delete ( array , index ) ;
48705: LD_ADDR_VAR 0 1
48709: PUSH
48710: LD_VAR 0 1
48714: PPUSH
48715: LD_VAR 0 4
48719: PPUSH
48720: CALL_OW 3
48724: ST_TO_ADDR
// end ;
48725: GO 48649
48727: POP
48728: POP
// end ;
48729: LD_VAR 0 2
48733: RET
// export function GetBaseMaterials ( base ) ; begin
48734: LD_INT 0
48736: PPUSH
// result := [ 0 , 0 , 0 ] ;
48737: LD_ADDR_VAR 0 2
48741: PUSH
48742: LD_INT 0
48744: PUSH
48745: LD_INT 0
48747: PUSH
48748: LD_INT 0
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: LIST
48755: ST_TO_ADDR
// if not base then
48756: LD_VAR 0 1
48760: NOT
48761: IFFALSE 48765
// exit ;
48763: GO 48814
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48765: LD_ADDR_VAR 0 2
48769: PUSH
48770: LD_VAR 0 1
48774: PPUSH
48775: LD_INT 1
48777: PPUSH
48778: CALL_OW 275
48782: PUSH
48783: LD_VAR 0 1
48787: PPUSH
48788: LD_INT 2
48790: PPUSH
48791: CALL_OW 275
48795: PUSH
48796: LD_VAR 0 1
48800: PPUSH
48801: LD_INT 3
48803: PPUSH
48804: CALL_OW 275
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: LIST
48813: ST_TO_ADDR
// end ;
48814: LD_VAR 0 2
48818: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48819: LD_INT 0
48821: PPUSH
48822: PPUSH
// result := array ;
48823: LD_ADDR_VAR 0 3
48827: PUSH
48828: LD_VAR 0 1
48832: ST_TO_ADDR
// if size >= result then
48833: LD_VAR 0 2
48837: PUSH
48838: LD_VAR 0 3
48842: GREATEREQUAL
48843: IFFALSE 48847
// exit ;
48845: GO 48897
// if size then
48847: LD_VAR 0 2
48851: IFFALSE 48897
// for i := array downto size do
48853: LD_ADDR_VAR 0 4
48857: PUSH
48858: DOUBLE
48859: LD_VAR 0 1
48863: INC
48864: ST_TO_ADDR
48865: LD_VAR 0 2
48869: PUSH
48870: FOR_DOWNTO
48871: IFFALSE 48895
// result := Delete ( result , result ) ;
48873: LD_ADDR_VAR 0 3
48877: PUSH
48878: LD_VAR 0 3
48882: PPUSH
48883: LD_VAR 0 3
48887: PPUSH
48888: CALL_OW 3
48892: ST_TO_ADDR
48893: GO 48870
48895: POP
48896: POP
// end ;
48897: LD_VAR 0 3
48901: RET
// export function ComExit ( unit ) ; var tmp ; begin
48902: LD_INT 0
48904: PPUSH
48905: PPUSH
// if not IsInUnit ( unit ) then
48906: LD_VAR 0 1
48910: PPUSH
48911: CALL_OW 310
48915: NOT
48916: IFFALSE 48920
// exit ;
48918: GO 48980
// tmp := IsInUnit ( unit ) ;
48920: LD_ADDR_VAR 0 3
48924: PUSH
48925: LD_VAR 0 1
48929: PPUSH
48930: CALL_OW 310
48934: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
48935: LD_VAR 0 3
48939: PPUSH
48940: CALL_OW 247
48944: PUSH
48945: LD_INT 2
48947: EQUAL
48948: IFFALSE 48961
// ComExitVehicle ( unit ) else
48950: LD_VAR 0 1
48954: PPUSH
48955: CALL_OW 121
48959: GO 48970
// ComExitBuilding ( unit ) ;
48961: LD_VAR 0 1
48965: PPUSH
48966: CALL_OW 122
// result := tmp ;
48970: LD_ADDR_VAR 0 2
48974: PUSH
48975: LD_VAR 0 3
48979: ST_TO_ADDR
// end ;
48980: LD_VAR 0 2
48984: RET
// export function ComExitAll ( units ) ; var i ; begin
48985: LD_INT 0
48987: PPUSH
48988: PPUSH
// if not units then
48989: LD_VAR 0 1
48993: NOT
48994: IFFALSE 48998
// exit ;
48996: GO 49024
// for i in units do
48998: LD_ADDR_VAR 0 3
49002: PUSH
49003: LD_VAR 0 1
49007: PUSH
49008: FOR_IN
49009: IFFALSE 49022
// ComExit ( i ) ;
49011: LD_VAR 0 3
49015: PPUSH
49016: CALL 48902 0 1
49020: GO 49008
49022: POP
49023: POP
// end ;
49024: LD_VAR 0 2
49028: RET
// export function ResetHc ; begin
49029: LD_INT 0
49031: PPUSH
// InitHc ;
49032: CALL_OW 19
// hc_importance := 0 ;
49036: LD_ADDR_OWVAR 32
49040: PUSH
49041: LD_INT 0
49043: ST_TO_ADDR
// end ;
49044: LD_VAR 0 1
49048: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49049: LD_INT 0
49051: PPUSH
49052: PPUSH
49053: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49054: LD_ADDR_VAR 0 6
49058: PUSH
49059: LD_VAR 0 1
49063: PUSH
49064: LD_VAR 0 3
49068: PLUS
49069: PUSH
49070: LD_INT 2
49072: DIV
49073: ST_TO_ADDR
// if _x < 0 then
49074: LD_VAR 0 6
49078: PUSH
49079: LD_INT 0
49081: LESS
49082: IFFALSE 49099
// _x := _x * - 1 ;
49084: LD_ADDR_VAR 0 6
49088: PUSH
49089: LD_VAR 0 6
49093: PUSH
49094: LD_INT 1
49096: NEG
49097: MUL
49098: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49099: LD_ADDR_VAR 0 7
49103: PUSH
49104: LD_VAR 0 2
49108: PUSH
49109: LD_VAR 0 4
49113: PLUS
49114: PUSH
49115: LD_INT 2
49117: DIV
49118: ST_TO_ADDR
// if _y < 0 then
49119: LD_VAR 0 7
49123: PUSH
49124: LD_INT 0
49126: LESS
49127: IFFALSE 49144
// _y := _y * - 1 ;
49129: LD_ADDR_VAR 0 7
49133: PUSH
49134: LD_VAR 0 7
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: MUL
49143: ST_TO_ADDR
// result := [ _x , _y ] ;
49144: LD_ADDR_VAR 0 5
49148: PUSH
49149: LD_VAR 0 6
49153: PUSH
49154: LD_VAR 0 7
49158: PUSH
49159: EMPTY
49160: LIST
49161: LIST
49162: ST_TO_ADDR
// end ;
49163: LD_VAR 0 5
49167: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49168: LD_INT 0
49170: PPUSH
49171: PPUSH
49172: PPUSH
49173: PPUSH
// task := GetTaskList ( unit ) ;
49174: LD_ADDR_VAR 0 7
49178: PUSH
49179: LD_VAR 0 1
49183: PPUSH
49184: CALL_OW 437
49188: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49189: LD_VAR 0 7
49193: NOT
49194: IFFALSE 49213
49196: PUSH
49197: LD_VAR 0 1
49201: PPUSH
49202: LD_VAR 0 2
49206: PPUSH
49207: CALL_OW 308
49211: NOT
49212: AND
49213: IFFALSE 49217
// exit ;
49215: GO 49335
// if IsInArea ( unit , area ) then
49217: LD_VAR 0 1
49221: PPUSH
49222: LD_VAR 0 2
49226: PPUSH
49227: CALL_OW 308
49231: IFFALSE 49249
// begin ComMoveToArea ( unit , goAway ) ;
49233: LD_VAR 0 1
49237: PPUSH
49238: LD_VAR 0 3
49242: PPUSH
49243: CALL_OW 113
// exit ;
49247: GO 49335
// end ; if task [ 1 ] [ 1 ] <> M then
49249: LD_VAR 0 7
49253: PUSH
49254: LD_INT 1
49256: ARRAY
49257: PUSH
49258: LD_INT 1
49260: ARRAY
49261: PUSH
49262: LD_STRING M
49264: NONEQUAL
49265: IFFALSE 49269
// exit ;
49267: GO 49335
// x := task [ 1 ] [ 2 ] ;
49269: LD_ADDR_VAR 0 5
49273: PUSH
49274: LD_VAR 0 7
49278: PUSH
49279: LD_INT 1
49281: ARRAY
49282: PUSH
49283: LD_INT 2
49285: ARRAY
49286: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49287: LD_ADDR_VAR 0 6
49291: PUSH
49292: LD_VAR 0 7
49296: PUSH
49297: LD_INT 1
49299: ARRAY
49300: PUSH
49301: LD_INT 3
49303: ARRAY
49304: ST_TO_ADDR
// if InArea ( x , y , area ) then
49305: LD_VAR 0 5
49309: PPUSH
49310: LD_VAR 0 6
49314: PPUSH
49315: LD_VAR 0 2
49319: PPUSH
49320: CALL_OW 309
49324: IFFALSE 49335
// ComStop ( unit ) ;
49326: LD_VAR 0 1
49330: PPUSH
49331: CALL_OW 141
// end ;
49335: LD_VAR 0 4
49339: RET
// export function Abs ( value ) ; begin
49340: LD_INT 0
49342: PPUSH
// result := value ;
49343: LD_ADDR_VAR 0 2
49347: PUSH
49348: LD_VAR 0 1
49352: ST_TO_ADDR
// if value < 0 then
49353: LD_VAR 0 1
49357: PUSH
49358: LD_INT 0
49360: LESS
49361: IFFALSE 49378
// result := value * - 1 ;
49363: LD_ADDR_VAR 0 2
49367: PUSH
49368: LD_VAR 0 1
49372: PUSH
49373: LD_INT 1
49375: NEG
49376: MUL
49377: ST_TO_ADDR
// end ;
49378: LD_VAR 0 2
49382: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49383: LD_INT 0
49385: PPUSH
49386: PPUSH
49387: PPUSH
49388: PPUSH
49389: PPUSH
49390: PPUSH
49391: PPUSH
49392: PPUSH
// if not unit or not building then
49393: LD_VAR 0 1
49397: NOT
49398: IFTRUE 49407
49400: PUSH
49401: LD_VAR 0 2
49405: NOT
49406: OR
49407: IFFALSE 49411
// exit ;
49409: GO 49639
// x := GetX ( building ) ;
49411: LD_ADDR_VAR 0 4
49415: PUSH
49416: LD_VAR 0 2
49420: PPUSH
49421: CALL_OW 250
49425: ST_TO_ADDR
// y := GetY ( building ) ;
49426: LD_ADDR_VAR 0 6
49430: PUSH
49431: LD_VAR 0 2
49435: PPUSH
49436: CALL_OW 251
49440: ST_TO_ADDR
// d := GetDir ( building ) ;
49441: LD_ADDR_VAR 0 8
49445: PUSH
49446: LD_VAR 0 2
49450: PPUSH
49451: CALL_OW 254
49455: ST_TO_ADDR
// r := 4 ;
49456: LD_ADDR_VAR 0 9
49460: PUSH
49461: LD_INT 4
49463: ST_TO_ADDR
// for i := 1 to 5 do
49464: LD_ADDR_VAR 0 10
49468: PUSH
49469: DOUBLE
49470: LD_INT 1
49472: DEC
49473: ST_TO_ADDR
49474: LD_INT 5
49476: PUSH
49477: FOR_TO
49478: IFFALSE 49637
// begin _x := ShiftX ( x , d , r + i ) ;
49480: LD_ADDR_VAR 0 5
49484: PUSH
49485: LD_VAR 0 4
49489: PPUSH
49490: LD_VAR 0 8
49494: PPUSH
49495: LD_VAR 0 9
49499: PUSH
49500: LD_VAR 0 10
49504: PLUS
49505: PPUSH
49506: CALL_OW 272
49510: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49511: LD_ADDR_VAR 0 7
49515: PUSH
49516: LD_VAR 0 6
49520: PPUSH
49521: LD_VAR 0 8
49525: PPUSH
49526: LD_VAR 0 9
49530: PUSH
49531: LD_VAR 0 10
49535: PLUS
49536: PPUSH
49537: CALL_OW 273
49541: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49542: LD_VAR 0 5
49546: PPUSH
49547: LD_VAR 0 7
49551: PPUSH
49552: CALL_OW 488
49556: IFFALSE 49591
49558: PUSH
49559: LD_VAR 0 5
49563: PPUSH
49564: LD_VAR 0 7
49568: PPUSH
49569: CALL_OW 428
49573: PPUSH
49574: CALL_OW 247
49578: PUSH
49579: LD_INT 3
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: IN
49589: NOT
49590: AND
49591: IFFALSE 49635
// begin ComMoveXY ( unit , _x , _y ) ;
49593: LD_VAR 0 1
49597: PPUSH
49598: LD_VAR 0 5
49602: PPUSH
49603: LD_VAR 0 7
49607: PPUSH
49608: CALL_OW 111
// result := [ _x , _y ] ;
49612: LD_ADDR_VAR 0 3
49616: PUSH
49617: LD_VAR 0 5
49621: PUSH
49622: LD_VAR 0 7
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: ST_TO_ADDR
// exit ;
49631: POP
49632: POP
49633: GO 49639
// end ; end ;
49635: GO 49477
49637: POP
49638: POP
// end ;
49639: LD_VAR 0 3
49643: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49644: LD_INT 0
49646: PPUSH
49647: PPUSH
49648: PPUSH
// result := 0 ;
49649: LD_ADDR_VAR 0 3
49653: PUSH
49654: LD_INT 0
49656: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49657: LD_VAR 0 1
49661: PUSH
49662: LD_INT 0
49664: LESS
49665: IFTRUE 49677
49667: PUSH
49668: LD_VAR 0 1
49672: PUSH
49673: LD_INT 8
49675: GREATER
49676: OR
49677: IFTRUE 49689
49679: PUSH
49680: LD_VAR 0 2
49684: PUSH
49685: LD_INT 0
49687: LESS
49688: OR
49689: IFTRUE 49701
49691: PUSH
49692: LD_VAR 0 2
49696: PUSH
49697: LD_INT 8
49699: GREATER
49700: OR
49701: IFFALSE 49705
// exit ;
49703: GO 49780
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49705: LD_ADDR_VAR 0 4
49709: PUSH
49710: LD_INT 22
49712: PUSH
49713: LD_VAR 0 2
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PPUSH
49722: CALL_OW 69
49726: PUSH
49727: FOR_IN
49728: IFFALSE 49778
// begin un := UnitShoot ( i ) ;
49730: LD_ADDR_VAR 0 5
49734: PUSH
49735: LD_VAR 0 4
49739: PPUSH
49740: CALL_OW 504
49744: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49745: LD_VAR 0 5
49749: PPUSH
49750: CALL_OW 255
49754: PUSH
49755: LD_VAR 0 1
49759: EQUAL
49760: IFFALSE 49776
// begin result := un ;
49762: LD_ADDR_VAR 0 3
49766: PUSH
49767: LD_VAR 0 5
49771: ST_TO_ADDR
// exit ;
49772: POP
49773: POP
49774: GO 49780
// end ; end ;
49776: GO 49727
49778: POP
49779: POP
// end ;
49780: LD_VAR 0 3
49784: RET
// export function GetCargoBay ( units ) ; begin
49785: LD_INT 0
49787: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49788: LD_ADDR_VAR 0 2
49792: PUSH
49793: LD_VAR 0 1
49797: PPUSH
49798: LD_INT 2
49800: PUSH
49801: LD_INT 34
49803: PUSH
49804: LD_INT 12
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 34
49813: PUSH
49814: LD_INT 51
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 34
49823: PUSH
49824: LD_INT 32
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 34
49833: PUSH
49834: LD_INT 89
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: LIST
49845: LIST
49846: LIST
49847: PPUSH
49848: CALL_OW 72
49852: ST_TO_ADDR
// end ;
49853: LD_VAR 0 2
49857: RET
// export function Negate ( value ) ; begin
49858: LD_INT 0
49860: PPUSH
// result := not value ;
49861: LD_ADDR_VAR 0 2
49865: PUSH
49866: LD_VAR 0 1
49870: NOT
49871: ST_TO_ADDR
// end ;
49872: LD_VAR 0 2
49876: RET
// export function Inc ( value ) ; begin
49877: LD_INT 0
49879: PPUSH
// result := value + 1 ;
49880: LD_ADDR_VAR 0 2
49884: PUSH
49885: LD_VAR 0 1
49889: PUSH
49890: LD_INT 1
49892: PLUS
49893: ST_TO_ADDR
// end ;
49894: LD_VAR 0 2
49898: RET
// export function Dec ( value ) ; begin
49899: LD_INT 0
49901: PPUSH
// result := value - 1 ;
49902: LD_ADDR_VAR 0 2
49906: PUSH
49907: LD_VAR 0 1
49911: PUSH
49912: LD_INT 1
49914: MINUS
49915: ST_TO_ADDR
// end ;
49916: LD_VAR 0 2
49920: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
49921: LD_INT 0
49923: PPUSH
49924: PPUSH
49925: PPUSH
49926: PPUSH
49927: PPUSH
49928: PPUSH
49929: PPUSH
49930: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
49931: LD_VAR 0 1
49935: PPUSH
49936: LD_VAR 0 2
49940: PPUSH
49941: CALL_OW 488
49945: NOT
49946: IFTRUE 49965
49948: PUSH
49949: LD_VAR 0 3
49953: PPUSH
49954: LD_VAR 0 4
49958: PPUSH
49959: CALL_OW 488
49963: NOT
49964: OR
49965: IFFALSE 49978
// begin result := - 1 ;
49967: LD_ADDR_VAR 0 5
49971: PUSH
49972: LD_INT 1
49974: NEG
49975: ST_TO_ADDR
// exit ;
49976: GO 50213
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
49978: LD_ADDR_VAR 0 12
49982: PUSH
49983: LD_VAR 0 1
49987: PPUSH
49988: LD_VAR 0 2
49992: PPUSH
49993: LD_VAR 0 3
49997: PPUSH
49998: LD_VAR 0 4
50002: PPUSH
50003: CALL 49049 0 4
50007: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50008: LD_ADDR_VAR 0 11
50012: PUSH
50013: LD_VAR 0 1
50017: PPUSH
50018: LD_VAR 0 2
50022: PPUSH
50023: LD_VAR 0 12
50027: PUSH
50028: LD_INT 1
50030: ARRAY
50031: PPUSH
50032: LD_VAR 0 12
50036: PUSH
50037: LD_INT 2
50039: ARRAY
50040: PPUSH
50041: CALL_OW 298
50045: ST_TO_ADDR
// distance := 9999 ;
50046: LD_ADDR_VAR 0 10
50050: PUSH
50051: LD_INT 9999
50053: ST_TO_ADDR
// for i := 0 to 5 do
50054: LD_ADDR_VAR 0 6
50058: PUSH
50059: DOUBLE
50060: LD_INT 0
50062: DEC
50063: ST_TO_ADDR
50064: LD_INT 5
50066: PUSH
50067: FOR_TO
50068: IFFALSE 50211
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50070: LD_ADDR_VAR 0 7
50074: PUSH
50075: LD_VAR 0 1
50079: PPUSH
50080: LD_VAR 0 6
50084: PPUSH
50085: LD_VAR 0 11
50089: PPUSH
50090: CALL_OW 272
50094: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50095: LD_ADDR_VAR 0 8
50099: PUSH
50100: LD_VAR 0 2
50104: PPUSH
50105: LD_VAR 0 6
50109: PPUSH
50110: LD_VAR 0 11
50114: PPUSH
50115: CALL_OW 273
50119: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50120: LD_VAR 0 7
50124: PPUSH
50125: LD_VAR 0 8
50129: PPUSH
50130: CALL_OW 488
50134: NOT
50135: IFFALSE 50139
// continue ;
50137: GO 50067
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50139: LD_ADDR_VAR 0 9
50143: PUSH
50144: LD_VAR 0 12
50148: PUSH
50149: LD_INT 1
50151: ARRAY
50152: PPUSH
50153: LD_VAR 0 12
50157: PUSH
50158: LD_INT 2
50160: ARRAY
50161: PPUSH
50162: LD_VAR 0 7
50166: PPUSH
50167: LD_VAR 0 8
50171: PPUSH
50172: CALL_OW 298
50176: ST_TO_ADDR
// if tmp < distance then
50177: LD_VAR 0 9
50181: PUSH
50182: LD_VAR 0 10
50186: LESS
50187: IFFALSE 50209
// begin result := i ;
50189: LD_ADDR_VAR 0 5
50193: PUSH
50194: LD_VAR 0 6
50198: ST_TO_ADDR
// distance := tmp ;
50199: LD_ADDR_VAR 0 10
50203: PUSH
50204: LD_VAR 0 9
50208: ST_TO_ADDR
// end ; end ;
50209: GO 50067
50211: POP
50212: POP
// end ;
50213: LD_VAR 0 5
50217: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50218: LD_INT 0
50220: PPUSH
50221: PPUSH
// if not driver or not IsInUnit ( driver ) then
50222: LD_VAR 0 1
50226: NOT
50227: IFTRUE 50241
50229: PUSH
50230: LD_VAR 0 1
50234: PPUSH
50235: CALL_OW 310
50239: NOT
50240: OR
50241: IFFALSE 50245
// exit ;
50243: GO 50335
// vehicle := IsInUnit ( driver ) ;
50245: LD_ADDR_VAR 0 3
50249: PUSH
50250: LD_VAR 0 1
50254: PPUSH
50255: CALL_OW 310
50259: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50260: LD_VAR 0 1
50264: PPUSH
50265: LD_STRING \
50267: PUSH
50268: LD_INT 0
50270: PUSH
50271: LD_INT 0
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: LD_INT 0
50279: PUSH
50280: LD_INT 0
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: EMPTY
50287: LIST
50288: LIST
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: PUSH
50295: LD_STRING E
50297: PUSH
50298: LD_INT 0
50300: PUSH
50301: LD_INT 0
50303: PUSH
50304: LD_VAR 0 3
50308: PUSH
50309: LD_INT 0
50311: PUSH
50312: LD_INT 0
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: PUSH
50327: EMPTY
50328: LIST
50329: LIST
50330: PPUSH
50331: CALL_OW 446
// end ;
50335: LD_VAR 0 2
50339: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50340: LD_INT 0
50342: PPUSH
50343: PPUSH
// if not driver or not IsInUnit ( driver ) then
50344: LD_VAR 0 1
50348: NOT
50349: IFTRUE 50363
50351: PUSH
50352: LD_VAR 0 1
50356: PPUSH
50357: CALL_OW 310
50361: NOT
50362: OR
50363: IFFALSE 50367
// exit ;
50365: GO 50457
// vehicle := IsInUnit ( driver ) ;
50367: LD_ADDR_VAR 0 3
50371: PUSH
50372: LD_VAR 0 1
50376: PPUSH
50377: CALL_OW 310
50381: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50382: LD_VAR 0 1
50386: PPUSH
50387: LD_STRING \
50389: PUSH
50390: LD_INT 0
50392: PUSH
50393: LD_INT 0
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 0
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: EMPTY
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: PUSH
50417: LD_STRING E
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 0
50425: PUSH
50426: LD_VAR 0 3
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: LD_INT 0
50439: PUSH
50440: EMPTY
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PPUSH
50453: CALL_OW 447
// end ;
50457: LD_VAR 0 2
50461: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50462: LD_INT 0
50464: PPUSH
50465: PPUSH
50466: PPUSH
// tmp := [ ] ;
50467: LD_ADDR_VAR 0 5
50471: PUSH
50472: EMPTY
50473: ST_TO_ADDR
// for i in units do
50474: LD_ADDR_VAR 0 4
50478: PUSH
50479: LD_VAR 0 1
50483: PUSH
50484: FOR_IN
50485: IFFALSE 50523
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50487: LD_ADDR_VAR 0 5
50491: PUSH
50492: LD_VAR 0 5
50496: PPUSH
50497: LD_VAR 0 5
50501: PUSH
50502: LD_INT 1
50504: PLUS
50505: PPUSH
50506: LD_VAR 0 4
50510: PPUSH
50511: CALL_OW 256
50515: PPUSH
50516: CALL_OW 2
50520: ST_TO_ADDR
50521: GO 50484
50523: POP
50524: POP
// if not tmp then
50525: LD_VAR 0 5
50529: NOT
50530: IFFALSE 50534
// exit ;
50532: GO 50582
// if asc then
50534: LD_VAR 0 2
50538: IFFALSE 50562
// result := SortListByListAsc ( units , tmp ) else
50540: LD_ADDR_VAR 0 3
50544: PUSH
50545: LD_VAR 0 1
50549: PPUSH
50550: LD_VAR 0 5
50554: PPUSH
50555: CALL_OW 76
50559: ST_TO_ADDR
50560: GO 50582
// result := SortListByListDesc ( units , tmp ) ;
50562: LD_ADDR_VAR 0 3
50566: PUSH
50567: LD_VAR 0 1
50571: PPUSH
50572: LD_VAR 0 5
50576: PPUSH
50577: CALL_OW 77
50581: ST_TO_ADDR
// end ;
50582: LD_VAR 0 3
50586: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50587: LD_INT 0
50589: PPUSH
50590: PPUSH
// task := GetTaskList ( mech ) ;
50591: LD_ADDR_VAR 0 4
50595: PUSH
50596: LD_VAR 0 1
50600: PPUSH
50601: CALL_OW 437
50605: ST_TO_ADDR
// if not task then
50606: LD_VAR 0 4
50610: NOT
50611: IFFALSE 50615
// exit ;
50613: GO 50659
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50615: LD_ADDR_VAR 0 3
50619: PUSH
50620: LD_VAR 0 4
50624: PUSH
50625: LD_INT 1
50627: ARRAY
50628: PUSH
50629: LD_INT 1
50631: ARRAY
50632: PUSH
50633: LD_STRING r
50635: EQUAL
50636: IFFALSE 50658
50638: PUSH
50639: LD_VAR 0 4
50643: PUSH
50644: LD_INT 1
50646: ARRAY
50647: PUSH
50648: LD_INT 4
50650: ARRAY
50651: PUSH
50652: LD_VAR 0 2
50656: EQUAL
50657: AND
50658: ST_TO_ADDR
// end ;
50659: LD_VAR 0 3
50663: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50664: LD_INT 0
50666: PPUSH
// SetDir ( unit , d ) ;
50667: LD_VAR 0 1
50671: PPUSH
50672: LD_VAR 0 4
50676: PPUSH
50677: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50681: LD_ADDR_VAR 0 6
50685: PUSH
50686: LD_VAR 0 1
50690: PPUSH
50691: LD_VAR 0 2
50695: PPUSH
50696: LD_VAR 0 3
50700: PPUSH
50701: LD_VAR 0 5
50705: PPUSH
50706: CALL_OW 48
50710: ST_TO_ADDR
// end ;
50711: LD_VAR 0 6
50715: RET
// export function ToNaturalNumber ( number ) ; begin
50716: LD_INT 0
50718: PPUSH
// result := number div 1 ;
50719: LD_ADDR_VAR 0 2
50723: PUSH
50724: LD_VAR 0 1
50728: PUSH
50729: LD_INT 1
50731: DIV
50732: ST_TO_ADDR
// if number < 0 then
50733: LD_VAR 0 1
50737: PUSH
50738: LD_INT 0
50740: LESS
50741: IFFALSE 50751
// result := 0 ;
50743: LD_ADDR_VAR 0 2
50747: PUSH
50748: LD_INT 0
50750: ST_TO_ADDR
// end ;
50751: LD_VAR 0 2
50755: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50756: LD_INT 0
50758: PPUSH
50759: PPUSH
50760: PPUSH
// if not buildings then
50761: LD_VAR 0 1
50765: NOT
50766: IFFALSE 50770
// exit ;
50768: GO 50885
// tmp := [ ] ;
50770: LD_ADDR_VAR 0 5
50774: PUSH
50775: EMPTY
50776: ST_TO_ADDR
// for b in buildings do
50777: LD_ADDR_VAR 0 4
50781: PUSH
50782: LD_VAR 0 1
50786: PUSH
50787: FOR_IN
50788: IFFALSE 50826
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50790: LD_ADDR_VAR 0 5
50794: PUSH
50795: LD_VAR 0 5
50799: PPUSH
50800: LD_VAR 0 5
50804: PUSH
50805: LD_INT 1
50807: PLUS
50808: PPUSH
50809: LD_VAR 0 4
50813: PPUSH
50814: CALL_OW 266
50818: PPUSH
50819: CALL_OW 1
50823: ST_TO_ADDR
50824: GO 50787
50826: POP
50827: POP
// if not tmp then
50828: LD_VAR 0 5
50832: NOT
50833: IFFALSE 50837
// exit ;
50835: GO 50885
// if asc then
50837: LD_VAR 0 2
50841: IFFALSE 50865
// result := SortListByListAsc ( buildings , tmp ) else
50843: LD_ADDR_VAR 0 3
50847: PUSH
50848: LD_VAR 0 1
50852: PPUSH
50853: LD_VAR 0 5
50857: PPUSH
50858: CALL_OW 76
50862: ST_TO_ADDR
50863: GO 50885
// result := SortListByListDesc ( buildings , tmp ) ;
50865: LD_ADDR_VAR 0 3
50869: PUSH
50870: LD_VAR 0 1
50874: PPUSH
50875: LD_VAR 0 5
50879: PPUSH
50880: CALL_OW 77
50884: ST_TO_ADDR
// end ;
50885: LD_VAR 0 3
50889: RET
// export function SortByClass ( units , class ) ; var un ; begin
50890: LD_INT 0
50892: PPUSH
50893: PPUSH
// if not units or not class then
50894: LD_VAR 0 1
50898: NOT
50899: IFTRUE 50908
50901: PUSH
50902: LD_VAR 0 2
50906: NOT
50907: OR
50908: IFFALSE 50912
// exit ;
50910: GO 51007
// result := [ ] ;
50912: LD_ADDR_VAR 0 3
50916: PUSH
50917: EMPTY
50918: ST_TO_ADDR
// for un in units do
50919: LD_ADDR_VAR 0 4
50923: PUSH
50924: LD_VAR 0 1
50928: PUSH
50929: FOR_IN
50930: IFFALSE 51005
// if GetClass ( un ) = class then
50932: LD_VAR 0 4
50936: PPUSH
50937: CALL_OW 257
50941: PUSH
50942: LD_VAR 0 2
50946: EQUAL
50947: IFFALSE 50974
// result := Insert ( result , 1 , un ) else
50949: LD_ADDR_VAR 0 3
50953: PUSH
50954: LD_VAR 0 3
50958: PPUSH
50959: LD_INT 1
50961: PPUSH
50962: LD_VAR 0 4
50966: PPUSH
50967: CALL_OW 2
50971: ST_TO_ADDR
50972: GO 51003
// result := Replace ( result , result + 1 , un ) ;
50974: LD_ADDR_VAR 0 3
50978: PUSH
50979: LD_VAR 0 3
50983: PPUSH
50984: LD_VAR 0 3
50988: PUSH
50989: LD_INT 1
50991: PLUS
50992: PPUSH
50993: LD_VAR 0 4
50997: PPUSH
50998: CALL_OW 1
51002: ST_TO_ADDR
51003: GO 50929
51005: POP
51006: POP
// end ;
51007: LD_VAR 0 3
51011: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51012: LD_INT 0
51014: PPUSH
51015: PPUSH
51016: PPUSH
51017: PPUSH
51018: PPUSH
51019: PPUSH
51020: PPUSH
// result := [ ] ;
51021: LD_ADDR_VAR 0 4
51025: PUSH
51026: EMPTY
51027: ST_TO_ADDR
// if x - r < 0 then
51028: LD_VAR 0 1
51032: PUSH
51033: LD_VAR 0 3
51037: MINUS
51038: PUSH
51039: LD_INT 0
51041: LESS
51042: IFFALSE 51054
// min_x := 0 else
51044: LD_ADDR_VAR 0 8
51048: PUSH
51049: LD_INT 0
51051: ST_TO_ADDR
51052: GO 51070
// min_x := x - r ;
51054: LD_ADDR_VAR 0 8
51058: PUSH
51059: LD_VAR 0 1
51063: PUSH
51064: LD_VAR 0 3
51068: MINUS
51069: ST_TO_ADDR
// if y - r < 0 then
51070: LD_VAR 0 2
51074: PUSH
51075: LD_VAR 0 3
51079: MINUS
51080: PUSH
51081: LD_INT 0
51083: LESS
51084: IFFALSE 51096
// min_y := 0 else
51086: LD_ADDR_VAR 0 7
51090: PUSH
51091: LD_INT 0
51093: ST_TO_ADDR
51094: GO 51112
// min_y := y - r ;
51096: LD_ADDR_VAR 0 7
51100: PUSH
51101: LD_VAR 0 2
51105: PUSH
51106: LD_VAR 0 3
51110: MINUS
51111: ST_TO_ADDR
// max_x := x + r ;
51112: LD_ADDR_VAR 0 9
51116: PUSH
51117: LD_VAR 0 1
51121: PUSH
51122: LD_VAR 0 3
51126: PLUS
51127: ST_TO_ADDR
// max_y := y + r ;
51128: LD_ADDR_VAR 0 10
51132: PUSH
51133: LD_VAR 0 2
51137: PUSH
51138: LD_VAR 0 3
51142: PLUS
51143: ST_TO_ADDR
// for _x = min_x to max_x do
51144: LD_ADDR_VAR 0 5
51148: PUSH
51149: DOUBLE
51150: LD_VAR 0 8
51154: DEC
51155: ST_TO_ADDR
51156: LD_VAR 0 9
51160: PUSH
51161: FOR_TO
51162: IFFALSE 51263
// for _y = min_y to max_y do
51164: LD_ADDR_VAR 0 6
51168: PUSH
51169: DOUBLE
51170: LD_VAR 0 7
51174: DEC
51175: ST_TO_ADDR
51176: LD_VAR 0 10
51180: PUSH
51181: FOR_TO
51182: IFFALSE 51259
// begin if not ValidHex ( _x , _y ) then
51184: LD_VAR 0 5
51188: PPUSH
51189: LD_VAR 0 6
51193: PPUSH
51194: CALL_OW 488
51198: NOT
51199: IFFALSE 51203
// continue ;
51201: GO 51181
// if GetResourceTypeXY ( _x , _y ) then
51203: LD_VAR 0 5
51207: PPUSH
51208: LD_VAR 0 6
51212: PPUSH
51213: CALL_OW 283
51217: IFFALSE 51257
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51219: LD_ADDR_VAR 0 4
51223: PUSH
51224: LD_VAR 0 4
51228: PPUSH
51229: LD_VAR 0 4
51233: PUSH
51234: LD_INT 1
51236: PLUS
51237: PPUSH
51238: LD_VAR 0 5
51242: PUSH
51243: LD_VAR 0 6
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PPUSH
51252: CALL_OW 1
51256: ST_TO_ADDR
// end ;
51257: GO 51181
51259: POP
51260: POP
51261: GO 51161
51263: POP
51264: POP
// end ;
51265: LD_VAR 0 4
51269: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51270: LD_INT 0
51272: PPUSH
51273: PPUSH
51274: PPUSH
51275: PPUSH
51276: PPUSH
51277: PPUSH
51278: PPUSH
51279: PPUSH
// if not units then
51280: LD_VAR 0 1
51284: NOT
51285: IFFALSE 51289
// exit ;
51287: GO 51821
// result := UnitFilter ( units , [ f_ok ] ) ;
51289: LD_ADDR_VAR 0 3
51293: PUSH
51294: LD_VAR 0 1
51298: PPUSH
51299: LD_INT 50
51301: PUSH
51302: EMPTY
51303: LIST
51304: PPUSH
51305: CALL_OW 72
51309: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51310: LD_ADDR_VAR 0 8
51314: PUSH
51315: LD_VAR 0 1
51319: PUSH
51320: LD_INT 1
51322: ARRAY
51323: PPUSH
51324: CALL_OW 255
51328: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51329: LD_ADDR_VAR 0 10
51333: PUSH
51334: LD_INT 29
51336: PUSH
51337: LD_INT 91
51339: PUSH
51340: LD_INT 49
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: LIST
51347: ST_TO_ADDR
// if not result then
51348: LD_VAR 0 3
51352: NOT
51353: IFFALSE 51357
// exit ;
51355: GO 51821
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51357: LD_ADDR_VAR 0 5
51361: PUSH
51362: LD_INT 81
51364: PUSH
51365: LD_VAR 0 8
51369: PUSH
51370: EMPTY
51371: LIST
51372: LIST
51373: PPUSH
51374: CALL_OW 69
51378: ST_TO_ADDR
// for i in result do
51379: LD_ADDR_VAR 0 4
51383: PUSH
51384: LD_VAR 0 3
51388: PUSH
51389: FOR_IN
51390: IFFALSE 51819
// begin tag := GetTag ( i ) + 1 ;
51392: LD_ADDR_VAR 0 9
51396: PUSH
51397: LD_VAR 0 4
51401: PPUSH
51402: CALL_OW 110
51406: PUSH
51407: LD_INT 1
51409: PLUS
51410: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51411: LD_ADDR_VAR 0 7
51415: PUSH
51416: LD_VAR 0 4
51420: PPUSH
51421: CALL_OW 250
51425: PPUSH
51426: LD_VAR 0 4
51430: PPUSH
51431: CALL_OW 251
51435: PPUSH
51436: LD_INT 4
51438: PPUSH
51439: CALL 51012 0 3
51443: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51444: LD_VAR 0 4
51448: PPUSH
51449: CALL_OW 247
51453: PUSH
51454: LD_INT 2
51456: EQUAL
51457: IFFALSE 51469
51459: PUSH
51460: LD_VAR 0 7
51464: PUSH
51465: LD_INT 2
51467: GREATER
51468: AND
51469: IFFALSE 51489
51471: PUSH
51472: LD_VAR 0 4
51476: PPUSH
51477: CALL_OW 264
51481: PUSH
51482: LD_VAR 0 10
51486: IN
51487: NOT
51488: AND
51489: IFFALSE 51528
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51491: LD_VAR 0 4
51495: PPUSH
51496: LD_VAR 0 7
51500: PUSH
51501: LD_INT 1
51503: ARRAY
51504: PUSH
51505: LD_INT 1
51507: ARRAY
51508: PPUSH
51509: LD_VAR 0 7
51513: PUSH
51514: LD_INT 1
51516: ARRAY
51517: PUSH
51518: LD_INT 2
51520: ARRAY
51521: PPUSH
51522: CALL_OW 116
51526: GO 51817
// if path > tag then
51528: LD_VAR 0 2
51532: PUSH
51533: LD_VAR 0 9
51537: GREATER
51538: IFFALSE 51746
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51540: LD_ADDR_VAR 0 6
51544: PUSH
51545: LD_VAR 0 5
51549: PPUSH
51550: LD_INT 91
51552: PUSH
51553: LD_VAR 0 4
51557: PUSH
51558: LD_INT 8
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: LIST
51565: PPUSH
51566: CALL_OW 72
51570: ST_TO_ADDR
// if nearEnemy then
51571: LD_VAR 0 6
51575: IFFALSE 51644
// begin if GetWeapon ( i ) = ru_time_lapser then
51577: LD_VAR 0 4
51581: PPUSH
51582: CALL_OW 264
51586: PUSH
51587: LD_INT 49
51589: EQUAL
51590: IFFALSE 51618
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51592: LD_VAR 0 4
51596: PPUSH
51597: LD_VAR 0 6
51601: PPUSH
51602: LD_VAR 0 4
51606: PPUSH
51607: CALL_OW 74
51611: PPUSH
51612: CALL_OW 112
51616: GO 51642
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51618: LD_VAR 0 4
51622: PPUSH
51623: LD_VAR 0 6
51627: PPUSH
51628: LD_VAR 0 4
51632: PPUSH
51633: CALL_OW 74
51637: PPUSH
51638: CALL 52902 0 2
// end else
51642: GO 51744
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51644: LD_VAR 0 4
51648: PPUSH
51649: LD_VAR 0 2
51653: PUSH
51654: LD_VAR 0 9
51658: ARRAY
51659: PUSH
51660: LD_INT 1
51662: ARRAY
51663: PPUSH
51664: LD_VAR 0 2
51668: PUSH
51669: LD_VAR 0 9
51673: ARRAY
51674: PUSH
51675: LD_INT 2
51677: ARRAY
51678: PPUSH
51679: CALL_OW 297
51683: PUSH
51684: LD_INT 6
51686: GREATER
51687: IFFALSE 51730
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51689: LD_VAR 0 4
51693: PPUSH
51694: LD_VAR 0 2
51698: PUSH
51699: LD_VAR 0 9
51703: ARRAY
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PPUSH
51709: LD_VAR 0 2
51713: PUSH
51714: LD_VAR 0 9
51718: ARRAY
51719: PUSH
51720: LD_INT 2
51722: ARRAY
51723: PPUSH
51724: CALL_OW 114
51728: GO 51744
// SetTag ( i , tag ) ;
51730: LD_VAR 0 4
51734: PPUSH
51735: LD_VAR 0 9
51739: PPUSH
51740: CALL_OW 109
// end else
51744: GO 51817
// if enemy then
51746: LD_VAR 0 5
51750: IFFALSE 51817
// begin if GetWeapon ( i ) = ru_time_lapser then
51752: LD_VAR 0 4
51756: PPUSH
51757: CALL_OW 264
51761: PUSH
51762: LD_INT 49
51764: EQUAL
51765: IFFALSE 51793
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51767: LD_VAR 0 4
51771: PPUSH
51772: LD_VAR 0 5
51776: PPUSH
51777: LD_VAR 0 4
51781: PPUSH
51782: CALL_OW 74
51786: PPUSH
51787: CALL_OW 112
51791: GO 51817
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51793: LD_VAR 0 4
51797: PPUSH
51798: LD_VAR 0 5
51802: PPUSH
51803: LD_VAR 0 4
51807: PPUSH
51808: CALL_OW 74
51812: PPUSH
51813: CALL 52902 0 2
// end ; end ;
51817: GO 51389
51819: POP
51820: POP
// end ;
51821: LD_VAR 0 3
51825: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51826: LD_INT 0
51828: PPUSH
51829: PPUSH
51830: PPUSH
// if not unit or IsInUnit ( unit ) then
51831: LD_VAR 0 1
51835: NOT
51836: IFTRUE 51849
51838: PUSH
51839: LD_VAR 0 1
51843: PPUSH
51844: CALL_OW 310
51848: OR
51849: IFFALSE 51853
// exit ;
51851: GO 51944
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51853: LD_ADDR_VAR 0 4
51857: PUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL_OW 250
51867: PPUSH
51868: LD_VAR 0 2
51872: PPUSH
51873: LD_INT 1
51875: PPUSH
51876: CALL_OW 272
51880: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51881: LD_ADDR_VAR 0 5
51885: PUSH
51886: LD_VAR 0 1
51890: PPUSH
51891: CALL_OW 251
51895: PPUSH
51896: LD_VAR 0 2
51900: PPUSH
51901: LD_INT 1
51903: PPUSH
51904: CALL_OW 273
51908: ST_TO_ADDR
// if ValidHex ( x , y ) then
51909: LD_VAR 0 4
51913: PPUSH
51914: LD_VAR 0 5
51918: PPUSH
51919: CALL_OW 488
51923: IFFALSE 51944
// ComTurnXY ( unit , x , y ) ;
51925: LD_VAR 0 1
51929: PPUSH
51930: LD_VAR 0 4
51934: PPUSH
51935: LD_VAR 0 5
51939: PPUSH
51940: CALL_OW 118
// end ;
51944: LD_VAR 0 3
51948: RET
// export function SeeUnits ( side , units ) ; var i ; begin
51949: LD_INT 0
51951: PPUSH
51952: PPUSH
// result := false ;
51953: LD_ADDR_VAR 0 3
51957: PUSH
51958: LD_INT 0
51960: ST_TO_ADDR
// if not units then
51961: LD_VAR 0 2
51965: NOT
51966: IFFALSE 51970
// exit ;
51968: GO 52015
// for i in units do
51970: LD_ADDR_VAR 0 4
51974: PUSH
51975: LD_VAR 0 2
51979: PUSH
51980: FOR_IN
51981: IFFALSE 52013
// if See ( side , i ) then
51983: LD_VAR 0 1
51987: PPUSH
51988: LD_VAR 0 4
51992: PPUSH
51993: CALL_OW 292
51997: IFFALSE 52011
// begin result := true ;
51999: LD_ADDR_VAR 0 3
52003: PUSH
52004: LD_INT 1
52006: ST_TO_ADDR
// exit ;
52007: POP
52008: POP
52009: GO 52015
// end ;
52011: GO 51980
52013: POP
52014: POP
// end ;
52015: LD_VAR 0 3
52019: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52020: LD_INT 0
52022: PPUSH
52023: PPUSH
52024: PPUSH
52025: PPUSH
// if not unit or not points then
52026: LD_VAR 0 1
52030: NOT
52031: IFTRUE 52040
52033: PUSH
52034: LD_VAR 0 2
52038: NOT
52039: OR
52040: IFFALSE 52044
// exit ;
52042: GO 52134
// dist := 99999 ;
52044: LD_ADDR_VAR 0 5
52048: PUSH
52049: LD_INT 99999
52051: ST_TO_ADDR
// for i in points do
52052: LD_ADDR_VAR 0 4
52056: PUSH
52057: LD_VAR 0 2
52061: PUSH
52062: FOR_IN
52063: IFFALSE 52132
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52065: LD_ADDR_VAR 0 6
52069: PUSH
52070: LD_VAR 0 1
52074: PPUSH
52075: LD_VAR 0 4
52079: PUSH
52080: LD_INT 1
52082: ARRAY
52083: PPUSH
52084: LD_VAR 0 4
52088: PUSH
52089: LD_INT 2
52091: ARRAY
52092: PPUSH
52093: CALL_OW 297
52097: ST_TO_ADDR
// if tmpDist < dist then
52098: LD_VAR 0 6
52102: PUSH
52103: LD_VAR 0 5
52107: LESS
52108: IFFALSE 52130
// begin result := i ;
52110: LD_ADDR_VAR 0 3
52114: PUSH
52115: LD_VAR 0 4
52119: ST_TO_ADDR
// dist := tmpDist ;
52120: LD_ADDR_VAR 0 5
52124: PUSH
52125: LD_VAR 0 6
52129: ST_TO_ADDR
// end ; end ;
52130: GO 52062
52132: POP
52133: POP
// end ;
52134: LD_VAR 0 3
52138: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52139: LD_INT 0
52141: PPUSH
// uc_side := side ;
52142: LD_ADDR_OWVAR 20
52146: PUSH
52147: LD_VAR 0 1
52151: ST_TO_ADDR
// uc_nation := 3 ;
52152: LD_ADDR_OWVAR 21
52156: PUSH
52157: LD_INT 3
52159: ST_TO_ADDR
// vc_chassis := 25 ;
52160: LD_ADDR_OWVAR 37
52164: PUSH
52165: LD_INT 25
52167: ST_TO_ADDR
// vc_engine := engine_siberite ;
52168: LD_ADDR_OWVAR 39
52172: PUSH
52173: LD_INT 3
52175: ST_TO_ADDR
// vc_control := control_computer ;
52176: LD_ADDR_OWVAR 38
52180: PUSH
52181: LD_INT 3
52183: ST_TO_ADDR
// vc_weapon := 59 ;
52184: LD_ADDR_OWVAR 40
52188: PUSH
52189: LD_INT 59
52191: ST_TO_ADDR
// result := CreateVehicle ;
52192: LD_ADDR_VAR 0 5
52196: PUSH
52197: CALL_OW 45
52201: ST_TO_ADDR
// SetDir ( result , d ) ;
52202: LD_VAR 0 5
52206: PPUSH
52207: LD_VAR 0 4
52211: PPUSH
52212: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52216: LD_VAR 0 5
52220: PPUSH
52221: LD_VAR 0 2
52225: PPUSH
52226: LD_VAR 0 3
52230: PPUSH
52231: LD_INT 0
52233: PPUSH
52234: CALL_OW 48
// end ;
52238: LD_VAR 0 5
52242: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52243: LD_INT 0
52245: PPUSH
52246: PPUSH
52247: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52248: LD_ADDR_VAR 0 2
52252: PUSH
52253: LD_INT 0
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52271: LD_VAR 0 1
52275: NOT
52276: IFTRUE 52309
52278: PUSH
52279: LD_VAR 0 1
52283: PPUSH
52284: CALL_OW 264
52288: PUSH
52289: LD_INT 12
52291: PUSH
52292: LD_INT 51
52294: PUSH
52295: LD_INT 32
52297: PUSH
52298: LD_INT 89
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: IN
52307: NOT
52308: OR
52309: IFFALSE 52313
// exit ;
52311: GO 52411
// for i := 1 to 3 do
52313: LD_ADDR_VAR 0 3
52317: PUSH
52318: DOUBLE
52319: LD_INT 1
52321: DEC
52322: ST_TO_ADDR
52323: LD_INT 3
52325: PUSH
52326: FOR_TO
52327: IFFALSE 52409
// begin tmp := GetCargo ( cargo , i ) ;
52329: LD_ADDR_VAR 0 4
52333: PUSH
52334: LD_VAR 0 1
52338: PPUSH
52339: LD_VAR 0 3
52343: PPUSH
52344: CALL_OW 289
52348: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52349: LD_ADDR_VAR 0 2
52353: PUSH
52354: LD_VAR 0 2
52358: PPUSH
52359: LD_VAR 0 3
52363: PPUSH
52364: LD_VAR 0 4
52368: PPUSH
52369: CALL_OW 1
52373: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52374: LD_ADDR_VAR 0 2
52378: PUSH
52379: LD_VAR 0 2
52383: PPUSH
52384: LD_INT 4
52386: PPUSH
52387: LD_VAR 0 2
52391: PUSH
52392: LD_INT 4
52394: ARRAY
52395: PUSH
52396: LD_VAR 0 4
52400: PLUS
52401: PPUSH
52402: CALL_OW 1
52406: ST_TO_ADDR
// end ;
52407: GO 52326
52409: POP
52410: POP
// end ;
52411: LD_VAR 0 2
52415: RET
// export function Length ( array ) ; begin
52416: LD_INT 0
52418: PPUSH
// result := array + 0 ;
52419: LD_ADDR_VAR 0 2
52423: PUSH
52424: LD_VAR 0 1
52428: PUSH
52429: LD_INT 0
52431: PLUS
52432: ST_TO_ADDR
// end ;
52433: LD_VAR 0 2
52437: RET
// export function PrepareArray ( array ) ; begin
52438: LD_INT 0
52440: PPUSH
// result := array diff 0 ;
52441: LD_ADDR_VAR 0 2
52445: PUSH
52446: LD_VAR 0 1
52450: PUSH
52451: LD_INT 0
52453: DIFF
52454: ST_TO_ADDR
// if not result [ 1 ] then
52455: LD_VAR 0 2
52459: PUSH
52460: LD_INT 1
52462: ARRAY
52463: NOT
52464: IFFALSE 52484
// result := Delete ( result , 1 ) ;
52466: LD_ADDR_VAR 0 2
52470: PUSH
52471: LD_VAR 0 2
52475: PPUSH
52476: LD_INT 1
52478: PPUSH
52479: CALL_OW 3
52483: ST_TO_ADDR
// end ;
52484: LD_VAR 0 2
52488: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52489: LD_INT 0
52491: PPUSH
52492: PPUSH
52493: PPUSH
52494: PPUSH
// sibRocketRange := 25 ;
52495: LD_ADDR_VAR 0 6
52499: PUSH
52500: LD_INT 25
52502: ST_TO_ADDR
// result := false ;
52503: LD_ADDR_VAR 0 4
52507: PUSH
52508: LD_INT 0
52510: ST_TO_ADDR
// for i := 0 to 5 do
52511: LD_ADDR_VAR 0 5
52515: PUSH
52516: DOUBLE
52517: LD_INT 0
52519: DEC
52520: ST_TO_ADDR
52521: LD_INT 5
52523: PUSH
52524: FOR_TO
52525: IFFALSE 52592
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52527: LD_VAR 0 1
52531: PPUSH
52532: LD_VAR 0 5
52536: PPUSH
52537: LD_VAR 0 6
52541: PPUSH
52542: CALL_OW 272
52546: PPUSH
52547: LD_VAR 0 2
52551: PPUSH
52552: LD_VAR 0 5
52556: PPUSH
52557: LD_VAR 0 6
52561: PPUSH
52562: CALL_OW 273
52566: PPUSH
52567: LD_VAR 0 3
52571: PPUSH
52572: CALL_OW 309
52576: IFFALSE 52590
// begin result := true ;
52578: LD_ADDR_VAR 0 4
52582: PUSH
52583: LD_INT 1
52585: ST_TO_ADDR
// exit ;
52586: POP
52587: POP
52588: GO 52594
// end ;
52590: GO 52524
52592: POP
52593: POP
// end ;
52594: LD_VAR 0 4
52598: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52599: LD_INT 0
52601: PPUSH
52602: PPUSH
52603: PPUSH
// if btype = b_depot then
52604: LD_VAR 0 2
52608: PUSH
52609: LD_INT 0
52611: EQUAL
52612: IFFALSE 52624
// begin result := true ;
52614: LD_ADDR_VAR 0 3
52618: PUSH
52619: LD_INT 1
52621: ST_TO_ADDR
// exit ;
52622: GO 52744
// end ; pom := GetBase ( depot ) ;
52624: LD_ADDR_VAR 0 4
52628: PUSH
52629: LD_VAR 0 1
52633: PPUSH
52634: CALL_OW 274
52638: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52639: LD_ADDR_VAR 0 5
52643: PUSH
52644: LD_VAR 0 2
52648: PPUSH
52649: LD_VAR 0 1
52653: PPUSH
52654: CALL_OW 248
52658: PPUSH
52659: CALL_OW 450
52663: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52664: LD_ADDR_VAR 0 3
52668: PUSH
52669: LD_VAR 0 4
52673: PPUSH
52674: LD_INT 1
52676: PPUSH
52677: CALL_OW 275
52681: PUSH
52682: LD_VAR 0 5
52686: PUSH
52687: LD_INT 1
52689: ARRAY
52690: GREATEREQUAL
52691: IFFALSE 52717
52693: PUSH
52694: LD_VAR 0 4
52698: PPUSH
52699: LD_INT 2
52701: PPUSH
52702: CALL_OW 275
52706: PUSH
52707: LD_VAR 0 5
52711: PUSH
52712: LD_INT 2
52714: ARRAY
52715: GREATEREQUAL
52716: AND
52717: IFFALSE 52743
52719: PUSH
52720: LD_VAR 0 4
52724: PPUSH
52725: LD_INT 3
52727: PPUSH
52728: CALL_OW 275
52732: PUSH
52733: LD_VAR 0 5
52737: PUSH
52738: LD_INT 3
52740: ARRAY
52741: GREATEREQUAL
52742: AND
52743: ST_TO_ADDR
// end ;
52744: LD_VAR 0 3
52748: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52749: LD_INT 0
52751: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52752: LD_VAR 0 1
52756: PPUSH
52757: LD_VAR 0 2
52761: PPUSH
52762: LD_INT 0
52764: PPUSH
52765: LD_INT 0
52767: PPUSH
52768: LD_INT 1
52770: PPUSH
52771: LD_INT 0
52773: PPUSH
52774: CALL_OW 587
// end ;
52778: LD_VAR 0 3
52782: RET
// export function CenterOnNow ( unit ) ; begin
52783: LD_INT 0
52785: PPUSH
// result := IsInUnit ( unit ) ;
52786: LD_ADDR_VAR 0 2
52790: PUSH
52791: LD_VAR 0 1
52795: PPUSH
52796: CALL_OW 310
52800: ST_TO_ADDR
// if not result then
52801: LD_VAR 0 2
52805: NOT
52806: IFFALSE 52818
// result := unit ;
52808: LD_ADDR_VAR 0 2
52812: PUSH
52813: LD_VAR 0 1
52817: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52818: LD_VAR 0 1
52822: PPUSH
52823: CALL_OW 87
// end ;
52827: LD_VAR 0 2
52831: RET
// export function ComMoveHex ( unit , hex ) ; begin
52832: LD_INT 0
52834: PPUSH
// if not hex then
52835: LD_VAR 0 2
52839: NOT
52840: IFFALSE 52844
// exit ;
52842: GO 52897
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52844: LD_VAR 0 2
52848: PUSH
52849: LD_INT 1
52851: ARRAY
52852: PPUSH
52853: LD_VAR 0 2
52857: PUSH
52858: LD_INT 2
52860: ARRAY
52861: PPUSH
52862: CALL_OW 428
52866: IFFALSE 52870
// exit ;
52868: GO 52897
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52870: LD_VAR 0 1
52874: PPUSH
52875: LD_VAR 0 2
52879: PUSH
52880: LD_INT 1
52882: ARRAY
52883: PPUSH
52884: LD_VAR 0 2
52888: PUSH
52889: LD_INT 2
52891: ARRAY
52892: PPUSH
52893: CALL_OW 111
// end ;
52897: LD_VAR 0 3
52901: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52902: LD_INT 0
52904: PPUSH
52905: PPUSH
52906: PPUSH
// if not unit or not enemy then
52907: LD_VAR 0 1
52911: NOT
52912: IFTRUE 52921
52914: PUSH
52915: LD_VAR 0 2
52919: NOT
52920: OR
52921: IFFALSE 52925
// exit ;
52923: GO 53051
// x := GetX ( enemy ) ;
52925: LD_ADDR_VAR 0 4
52929: PUSH
52930: LD_VAR 0 2
52934: PPUSH
52935: CALL_OW 250
52939: ST_TO_ADDR
// y := GetY ( enemy ) ;
52940: LD_ADDR_VAR 0 5
52944: PUSH
52945: LD_VAR 0 2
52949: PPUSH
52950: CALL_OW 251
52954: ST_TO_ADDR
// if ValidHex ( x , y ) then
52955: LD_VAR 0 4
52959: PPUSH
52960: LD_VAR 0 5
52964: PPUSH
52965: CALL_OW 488
52969: IFFALSE 53051
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
52971: LD_VAR 0 2
52975: PPUSH
52976: CALL_OW 247
52980: PUSH
52981: LD_INT 3
52983: PUSH
52984: LD_INT 2
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: IN
52991: IFTRUE 53014
52993: PUSH
52994: LD_VAR 0 1
52998: PPUSH
52999: CALL_OW 255
53003: PPUSH
53004: LD_VAR 0 2
53008: PPUSH
53009: CALL_OW 292
53013: OR
53014: IFFALSE 53032
// ComAttackUnit ( unit , enemy ) else
53016: LD_VAR 0 1
53020: PPUSH
53021: LD_VAR 0 2
53025: PPUSH
53026: CALL_OW 115
53030: GO 53051
// ComAgressiveMove ( unit , x , y ) ;
53032: LD_VAR 0 1
53036: PPUSH
53037: LD_VAR 0 4
53041: PPUSH
53042: LD_VAR 0 5
53046: PPUSH
53047: CALL_OW 114
// end ;
53051: LD_VAR 0 3
53055: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53056: LD_INT 0
53058: PPUSH
53059: PPUSH
53060: PPUSH
// list := AreaToList ( area , 0 ) ;
53061: LD_ADDR_VAR 0 5
53065: PUSH
53066: LD_VAR 0 1
53070: PPUSH
53071: LD_INT 0
53073: PPUSH
53074: CALL_OW 517
53078: ST_TO_ADDR
// if not list then
53079: LD_VAR 0 5
53083: NOT
53084: IFFALSE 53088
// exit ;
53086: GO 53218
// if all then
53088: LD_VAR 0 2
53092: IFFALSE 53180
// begin for i := 1 to list [ 1 ] do
53094: LD_ADDR_VAR 0 4
53098: PUSH
53099: DOUBLE
53100: LD_INT 1
53102: DEC
53103: ST_TO_ADDR
53104: LD_VAR 0 5
53108: PUSH
53109: LD_INT 1
53111: ARRAY
53112: PUSH
53113: FOR_TO
53114: IFFALSE 53176
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53116: LD_ADDR_VAR 0 3
53120: PUSH
53121: LD_VAR 0 3
53125: PPUSH
53126: LD_VAR 0 3
53130: PUSH
53131: LD_INT 1
53133: PLUS
53134: PPUSH
53135: LD_VAR 0 5
53139: PUSH
53140: LD_INT 1
53142: ARRAY
53143: PUSH
53144: LD_VAR 0 4
53148: ARRAY
53149: PUSH
53150: LD_VAR 0 5
53154: PUSH
53155: LD_INT 2
53157: ARRAY
53158: PUSH
53159: LD_VAR 0 4
53163: ARRAY
53164: PUSH
53165: EMPTY
53166: LIST
53167: LIST
53168: PPUSH
53169: CALL_OW 1
53173: ST_TO_ADDR
53174: GO 53113
53176: POP
53177: POP
// exit ;
53178: GO 53218
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53180: LD_ADDR_VAR 0 3
53184: PUSH
53185: LD_VAR 0 5
53189: PUSH
53190: LD_INT 1
53192: ARRAY
53193: PUSH
53194: LD_INT 1
53196: ARRAY
53197: PUSH
53198: LD_VAR 0 5
53202: PUSH
53203: LD_INT 2
53205: ARRAY
53206: PUSH
53207: LD_INT 1
53209: ARRAY
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: EMPTY
53216: LIST
53217: ST_TO_ADDR
// end ;
53218: LD_VAR 0 3
53222: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53223: LD_INT 0
53225: PPUSH
53226: PPUSH
// list := AreaToList ( area , 0 ) ;
53227: LD_ADDR_VAR 0 4
53231: PUSH
53232: LD_VAR 0 1
53236: PPUSH
53237: LD_INT 0
53239: PPUSH
53240: CALL_OW 517
53244: ST_TO_ADDR
// if not list then
53245: LD_VAR 0 4
53249: NOT
53250: IFFALSE 53254
// exit ;
53252: GO 53295
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53254: LD_ADDR_VAR 0 3
53258: PUSH
53259: LD_VAR 0 4
53263: PUSH
53264: LD_INT 1
53266: ARRAY
53267: PUSH
53268: LD_INT 1
53270: ARRAY
53271: PUSH
53272: LD_VAR 0 4
53276: PUSH
53277: LD_INT 2
53279: ARRAY
53280: PUSH
53281: LD_INT 1
53283: ARRAY
53284: PUSH
53285: LD_VAR 0 2
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: LIST
53294: ST_TO_ADDR
// end ;
53295: LD_VAR 0 3
53299: RET
// export function First ( array ) ; begin
53300: LD_INT 0
53302: PPUSH
// if not array then
53303: LD_VAR 0 1
53307: NOT
53308: IFFALSE 53312
// exit ;
53310: GO 53326
// result := array [ 1 ] ;
53312: LD_ADDR_VAR 0 2
53316: PUSH
53317: LD_VAR 0 1
53321: PUSH
53322: LD_INT 1
53324: ARRAY
53325: ST_TO_ADDR
// end ;
53326: LD_VAR 0 2
53330: RET
// export function Last ( array ) ; begin
53331: LD_INT 0
53333: PPUSH
// if not array then
53334: LD_VAR 0 1
53338: NOT
53339: IFFALSE 53343
// exit ;
53341: GO 53359
// result := array [ array ] ;
53343: LD_ADDR_VAR 0 2
53347: PUSH
53348: LD_VAR 0 1
53352: PUSH
53353: LD_VAR 0 1
53357: ARRAY
53358: ST_TO_ADDR
// end ;
53359: LD_VAR 0 2
53363: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53364: LD_INT 0
53366: PPUSH
53367: PPUSH
// result := [ ] ;
53368: LD_ADDR_VAR 0 5
53372: PUSH
53373: EMPTY
53374: ST_TO_ADDR
// if not array then
53375: LD_VAR 0 1
53379: NOT
53380: IFFALSE 53384
// exit ;
53382: GO 53496
// for i := 1 to array do
53384: LD_ADDR_VAR 0 6
53388: PUSH
53389: DOUBLE
53390: LD_INT 1
53392: DEC
53393: ST_TO_ADDR
53394: LD_VAR 0 1
53398: PUSH
53399: FOR_TO
53400: IFFALSE 53494
// if array [ i ] [ index ] = value then
53402: LD_VAR 0 1
53406: PUSH
53407: LD_VAR 0 6
53411: ARRAY
53412: PUSH
53413: LD_VAR 0 2
53417: ARRAY
53418: PUSH
53419: LD_VAR 0 3
53423: EQUAL
53424: IFFALSE 53492
// begin if indexColumn then
53426: LD_VAR 0 4
53430: IFFALSE 53466
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53432: LD_ADDR_VAR 0 5
53436: PUSH
53437: LD_VAR 0 5
53441: PPUSH
53442: LD_VAR 0 1
53446: PUSH
53447: LD_VAR 0 6
53451: ARRAY
53452: PUSH
53453: LD_VAR 0 4
53457: ARRAY
53458: PPUSH
53459: CALL 48504 0 2
53463: ST_TO_ADDR
53464: GO 53492
// result := Join ( result , array [ i ] ) ;
53466: LD_ADDR_VAR 0 5
53470: PUSH
53471: LD_VAR 0 5
53475: PPUSH
53476: LD_VAR 0 1
53480: PUSH
53481: LD_VAR 0 6
53485: ARRAY
53486: PPUSH
53487: CALL 48504 0 2
53491: ST_TO_ADDR
// end ;
53492: GO 53399
53494: POP
53495: POP
// end ;
53496: LD_VAR 0 5
53500: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53501: LD_INT 0
53503: PPUSH
// if not vehicles or not parkingPoint then
53504: LD_VAR 0 1
53508: NOT
53509: IFTRUE 53518
53511: PUSH
53512: LD_VAR 0 2
53516: NOT
53517: OR
53518: IFFALSE 53522
// exit ;
53520: GO 53620
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53522: LD_ADDR_VAR 0 1
53526: PUSH
53527: LD_VAR 0 1
53531: PPUSH
53532: LD_INT 50
53534: PUSH
53535: EMPTY
53536: LIST
53537: PUSH
53538: LD_INT 3
53540: PUSH
53541: LD_INT 92
53543: PUSH
53544: LD_VAR 0 2
53548: PUSH
53549: LD_INT 1
53551: ARRAY
53552: PUSH
53553: LD_VAR 0 2
53557: PUSH
53558: LD_INT 2
53560: ARRAY
53561: PUSH
53562: LD_INT 8
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: PUSH
53571: EMPTY
53572: LIST
53573: LIST
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PPUSH
53579: CALL_OW 72
53583: ST_TO_ADDR
// if not vehicles then
53584: LD_VAR 0 1
53588: NOT
53589: IFFALSE 53593
// exit ;
53591: GO 53620
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53593: LD_VAR 0 1
53597: PPUSH
53598: LD_VAR 0 2
53602: PUSH
53603: LD_INT 1
53605: ARRAY
53606: PPUSH
53607: LD_VAR 0 2
53611: PUSH
53612: LD_INT 2
53614: ARRAY
53615: PPUSH
53616: CALL_OW 111
// end ;
53620: LD_VAR 0 3
53624: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53625: LD_INT 0
53627: PPUSH
53628: PPUSH
53629: PPUSH
// if not side or not area then
53630: LD_VAR 0 1
53634: NOT
53635: IFTRUE 53644
53637: PUSH
53638: LD_VAR 0 2
53642: NOT
53643: OR
53644: IFFALSE 53648
// exit ;
53646: GO 53767
// tmp := AreaToList ( area , 0 ) ;
53648: LD_ADDR_VAR 0 5
53652: PUSH
53653: LD_VAR 0 2
53657: PPUSH
53658: LD_INT 0
53660: PPUSH
53661: CALL_OW 517
53665: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53666: LD_ADDR_VAR 0 4
53670: PUSH
53671: DOUBLE
53672: LD_INT 1
53674: DEC
53675: ST_TO_ADDR
53676: LD_VAR 0 5
53680: PUSH
53681: LD_INT 1
53683: ARRAY
53684: PUSH
53685: FOR_TO
53686: IFFALSE 53765
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53688: LD_VAR 0 5
53692: PUSH
53693: LD_INT 1
53695: ARRAY
53696: PUSH
53697: LD_VAR 0 4
53701: ARRAY
53702: PPUSH
53703: LD_VAR 0 5
53707: PUSH
53708: LD_INT 2
53710: ARRAY
53711: PUSH
53712: LD_VAR 0 4
53716: ARRAY
53717: PPUSH
53718: CALL_OW 351
53722: IFFALSE 53763
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53724: LD_VAR 0 5
53728: PUSH
53729: LD_INT 1
53731: ARRAY
53732: PUSH
53733: LD_VAR 0 4
53737: ARRAY
53738: PPUSH
53739: LD_VAR 0 5
53743: PUSH
53744: LD_INT 2
53746: ARRAY
53747: PUSH
53748: LD_VAR 0 4
53752: ARRAY
53753: PPUSH
53754: LD_VAR 0 1
53758: PPUSH
53759: CALL_OW 244
// end ;
53763: GO 53685
53765: POP
53766: POP
// end ;
53767: LD_VAR 0 3
53771: RET
// export function UniqueArray ( array ) ; var i ; begin
53772: LD_INT 0
53774: PPUSH
53775: PPUSH
// result := [ ] ;
53776: LD_ADDR_VAR 0 2
53780: PUSH
53781: EMPTY
53782: ST_TO_ADDR
// if not array then
53783: LD_VAR 0 1
53787: NOT
53788: IFFALSE 53792
// exit ;
53790: GO 53853
// for i := 1 to array do
53792: LD_ADDR_VAR 0 3
53796: PUSH
53797: DOUBLE
53798: LD_INT 1
53800: DEC
53801: ST_TO_ADDR
53802: LD_VAR 0 1
53806: PUSH
53807: FOR_TO
53808: IFFALSE 53851
// if not array [ i ] in result then
53810: LD_VAR 0 1
53814: PUSH
53815: LD_VAR 0 3
53819: ARRAY
53820: PUSH
53821: LD_VAR 0 2
53825: IN
53826: NOT
53827: IFFALSE 53849
// result := Join ( result , i ) ;
53829: LD_ADDR_VAR 0 2
53833: PUSH
53834: LD_VAR 0 2
53838: PPUSH
53839: LD_VAR 0 3
53843: PPUSH
53844: CALL 48504 0 2
53848: ST_TO_ADDR
53849: GO 53807
53851: POP
53852: POP
// end ; end_of_file end_of_file
53853: LD_VAR 0 2
53857: RET
// export globalGameSaveCounter ; every 0 0$1 do
53858: GO 53860
53860: DISABLE
// begin enable ;
53861: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53862: LD_STRING updateTimer(
53864: PUSH
53865: LD_OWVAR 1
53869: STR
53870: PUSH
53871: LD_STRING );
53873: STR
53874: PPUSH
53875: CALL_OW 559
// end ;
53879: END
// every 0 0$1 do
53880: GO 53882
53882: DISABLE
// begin globalGameSaveCounter := 0 ;
53883: LD_ADDR_EXP 37
53887: PUSH
53888: LD_INT 0
53890: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53891: LD_STRING setGameSaveCounter(0)
53893: PPUSH
53894: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53898: LD_STRING initStreamRollete();
53900: PPUSH
53901: CALL_OW 559
// InitStreamMode ;
53905: CALL 55257 0 0
// DefineStreamItems ( false ) ;
53909: LD_INT 0
53911: PPUSH
53912: CALL 55721 0 1
// end ;
53916: END
// export function SOS_MapStart ( ) ; begin
53917: LD_INT 0
53919: PPUSH
// if streamModeActive then
53920: LD_EXP 38
53924: IFFALSE 53933
// DefineStreamItems ( true ) ;
53926: LD_INT 1
53928: PPUSH
53929: CALL 55721 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
53933: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
53935: PPUSH
53936: CALL_OW 559
// UpdateLuaVariables ( ) ;
53940: CALL 53957 0 0
// UpdateFactoryWaypoints ( ) ;
53944: CALL 68843 0 0
// UpdateWarehouseGatheringPoints ( ) ;
53948: CALL 69095 0 0
// end ;
53952: LD_VAR 0 1
53956: RET
// function UpdateLuaVariables ( ) ; begin
53957: LD_INT 0
53959: PPUSH
// if globalGameSaveCounter then
53960: LD_EXP 37
53964: IFFALSE 53998
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
53966: LD_ADDR_EXP 37
53970: PUSH
53971: LD_EXP 37
53975: PPUSH
53976: CALL 49877 0 1
53980: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
53981: LD_STRING setGameSaveCounter(
53983: PUSH
53984: LD_EXP 37
53988: STR
53989: PUSH
53990: LD_STRING )
53992: STR
53993: PPUSH
53994: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
53998: LD_STRING setGameDifficulty(
54000: PUSH
54001: LD_OWVAR 67
54005: STR
54006: PUSH
54007: LD_STRING )
54009: STR
54010: PPUSH
54011: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
54015: LD_STRING displayDifficulty(
54017: PUSH
54018: LD_OWVAR 67
54022: STR
54023: PUSH
54024: LD_STRING )
54026: STR
54027: PPUSH
54028: CALL_OW 559
// end ;
54032: LD_VAR 0 1
54036: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54037: LD_INT 0
54039: PPUSH
// if p2 = stream_mode then
54040: LD_VAR 0 2
54044: PUSH
54045: LD_INT 100
54047: EQUAL
54048: IFFALSE 55051
// begin if not StreamModeActive then
54050: LD_EXP 38
54054: NOT
54055: IFFALSE 54065
// StreamModeActive := true ;
54057: LD_ADDR_EXP 38
54061: PUSH
54062: LD_INT 1
54064: ST_TO_ADDR
// if p3 = 0 then
54065: LD_VAR 0 3
54069: PUSH
54070: LD_INT 0
54072: EQUAL
54073: IFFALSE 54079
// InitStreamMode ;
54075: CALL 55257 0 0
// if p3 = 1 then
54079: LD_VAR 0 3
54083: PUSH
54084: LD_INT 1
54086: EQUAL
54087: IFFALSE 54097
// sRocket := true ;
54089: LD_ADDR_EXP 43
54093: PUSH
54094: LD_INT 1
54096: ST_TO_ADDR
// if p3 = 2 then
54097: LD_VAR 0 3
54101: PUSH
54102: LD_INT 2
54104: EQUAL
54105: IFFALSE 54115
// sSpeed := true ;
54107: LD_ADDR_EXP 42
54111: PUSH
54112: LD_INT 1
54114: ST_TO_ADDR
// if p3 = 3 then
54115: LD_VAR 0 3
54119: PUSH
54120: LD_INT 3
54122: EQUAL
54123: IFFALSE 54133
// sEngine := true ;
54125: LD_ADDR_EXP 44
54129: PUSH
54130: LD_INT 1
54132: ST_TO_ADDR
// if p3 = 4 then
54133: LD_VAR 0 3
54137: PUSH
54138: LD_INT 4
54140: EQUAL
54141: IFFALSE 54151
// sSpec := true ;
54143: LD_ADDR_EXP 41
54147: PUSH
54148: LD_INT 1
54150: ST_TO_ADDR
// if p3 = 5 then
54151: LD_VAR 0 3
54155: PUSH
54156: LD_INT 5
54158: EQUAL
54159: IFFALSE 54169
// sLevel := true ;
54161: LD_ADDR_EXP 45
54165: PUSH
54166: LD_INT 1
54168: ST_TO_ADDR
// if p3 = 6 then
54169: LD_VAR 0 3
54173: PUSH
54174: LD_INT 6
54176: EQUAL
54177: IFFALSE 54187
// sArmoury := true ;
54179: LD_ADDR_EXP 46
54183: PUSH
54184: LD_INT 1
54186: ST_TO_ADDR
// if p3 = 7 then
54187: LD_VAR 0 3
54191: PUSH
54192: LD_INT 7
54194: EQUAL
54195: IFFALSE 54205
// sRadar := true ;
54197: LD_ADDR_EXP 47
54201: PUSH
54202: LD_INT 1
54204: ST_TO_ADDR
// if p3 = 8 then
54205: LD_VAR 0 3
54209: PUSH
54210: LD_INT 8
54212: EQUAL
54213: IFFALSE 54223
// sBunker := true ;
54215: LD_ADDR_EXP 48
54219: PUSH
54220: LD_INT 1
54222: ST_TO_ADDR
// if p3 = 9 then
54223: LD_VAR 0 3
54227: PUSH
54228: LD_INT 9
54230: EQUAL
54231: IFFALSE 54241
// sHack := true ;
54233: LD_ADDR_EXP 49
54237: PUSH
54238: LD_INT 1
54240: ST_TO_ADDR
// if p3 = 10 then
54241: LD_VAR 0 3
54245: PUSH
54246: LD_INT 10
54248: EQUAL
54249: IFFALSE 54259
// sFire := true ;
54251: LD_ADDR_EXP 50
54255: PUSH
54256: LD_INT 1
54258: ST_TO_ADDR
// if p3 = 11 then
54259: LD_VAR 0 3
54263: PUSH
54264: LD_INT 11
54266: EQUAL
54267: IFFALSE 54277
// sRefresh := true ;
54269: LD_ADDR_EXP 51
54273: PUSH
54274: LD_INT 1
54276: ST_TO_ADDR
// if p3 = 12 then
54277: LD_VAR 0 3
54281: PUSH
54282: LD_INT 12
54284: EQUAL
54285: IFFALSE 54295
// sExp := true ;
54287: LD_ADDR_EXP 52
54291: PUSH
54292: LD_INT 1
54294: ST_TO_ADDR
// if p3 = 13 then
54295: LD_VAR 0 3
54299: PUSH
54300: LD_INT 13
54302: EQUAL
54303: IFFALSE 54313
// sDepot := true ;
54305: LD_ADDR_EXP 53
54309: PUSH
54310: LD_INT 1
54312: ST_TO_ADDR
// if p3 = 14 then
54313: LD_VAR 0 3
54317: PUSH
54318: LD_INT 14
54320: EQUAL
54321: IFFALSE 54331
// sFlag := true ;
54323: LD_ADDR_EXP 54
54327: PUSH
54328: LD_INT 1
54330: ST_TO_ADDR
// if p3 = 15 then
54331: LD_VAR 0 3
54335: PUSH
54336: LD_INT 15
54338: EQUAL
54339: IFFALSE 54349
// sKamikadze := true ;
54341: LD_ADDR_EXP 62
54345: PUSH
54346: LD_INT 1
54348: ST_TO_ADDR
// if p3 = 16 then
54349: LD_VAR 0 3
54353: PUSH
54354: LD_INT 16
54356: EQUAL
54357: IFFALSE 54367
// sTroll := true ;
54359: LD_ADDR_EXP 63
54363: PUSH
54364: LD_INT 1
54366: ST_TO_ADDR
// if p3 = 17 then
54367: LD_VAR 0 3
54371: PUSH
54372: LD_INT 17
54374: EQUAL
54375: IFFALSE 54385
// sSlow := true ;
54377: LD_ADDR_EXP 64
54381: PUSH
54382: LD_INT 1
54384: ST_TO_ADDR
// if p3 = 18 then
54385: LD_VAR 0 3
54389: PUSH
54390: LD_INT 18
54392: EQUAL
54393: IFFALSE 54403
// sLack := true ;
54395: LD_ADDR_EXP 65
54399: PUSH
54400: LD_INT 1
54402: ST_TO_ADDR
// if p3 = 19 then
54403: LD_VAR 0 3
54407: PUSH
54408: LD_INT 19
54410: EQUAL
54411: IFFALSE 54421
// sTank := true ;
54413: LD_ADDR_EXP 67
54417: PUSH
54418: LD_INT 1
54420: ST_TO_ADDR
// if p3 = 20 then
54421: LD_VAR 0 3
54425: PUSH
54426: LD_INT 20
54428: EQUAL
54429: IFFALSE 54439
// sRemote := true ;
54431: LD_ADDR_EXP 68
54435: PUSH
54436: LD_INT 1
54438: ST_TO_ADDR
// if p3 = 21 then
54439: LD_VAR 0 3
54443: PUSH
54444: LD_INT 21
54446: EQUAL
54447: IFFALSE 54457
// sPowell := true ;
54449: LD_ADDR_EXP 69
54453: PUSH
54454: LD_INT 1
54456: ST_TO_ADDR
// if p3 = 22 then
54457: LD_VAR 0 3
54461: PUSH
54462: LD_INT 22
54464: EQUAL
54465: IFFALSE 54475
// sTeleport := true ;
54467: LD_ADDR_EXP 72
54471: PUSH
54472: LD_INT 1
54474: ST_TO_ADDR
// if p3 = 23 then
54475: LD_VAR 0 3
54479: PUSH
54480: LD_INT 23
54482: EQUAL
54483: IFFALSE 54493
// sOilTower := true ;
54485: LD_ADDR_EXP 74
54489: PUSH
54490: LD_INT 1
54492: ST_TO_ADDR
// if p3 = 24 then
54493: LD_VAR 0 3
54497: PUSH
54498: LD_INT 24
54500: EQUAL
54501: IFFALSE 54511
// sShovel := true ;
54503: LD_ADDR_EXP 75
54507: PUSH
54508: LD_INT 1
54510: ST_TO_ADDR
// if p3 = 25 then
54511: LD_VAR 0 3
54515: PUSH
54516: LD_INT 25
54518: EQUAL
54519: IFFALSE 54529
// sSheik := true ;
54521: LD_ADDR_EXP 76
54525: PUSH
54526: LD_INT 1
54528: ST_TO_ADDR
// if p3 = 26 then
54529: LD_VAR 0 3
54533: PUSH
54534: LD_INT 26
54536: EQUAL
54537: IFFALSE 54547
// sEarthquake := true ;
54539: LD_ADDR_EXP 78
54543: PUSH
54544: LD_INT 1
54546: ST_TO_ADDR
// if p3 = 27 then
54547: LD_VAR 0 3
54551: PUSH
54552: LD_INT 27
54554: EQUAL
54555: IFFALSE 54565
// sAI := true ;
54557: LD_ADDR_EXP 79
54561: PUSH
54562: LD_INT 1
54564: ST_TO_ADDR
// if p3 = 28 then
54565: LD_VAR 0 3
54569: PUSH
54570: LD_INT 28
54572: EQUAL
54573: IFFALSE 54583
// sCargo := true ;
54575: LD_ADDR_EXP 82
54579: PUSH
54580: LD_INT 1
54582: ST_TO_ADDR
// if p3 = 29 then
54583: LD_VAR 0 3
54587: PUSH
54588: LD_INT 29
54590: EQUAL
54591: IFFALSE 54601
// sDLaser := true ;
54593: LD_ADDR_EXP 83
54597: PUSH
54598: LD_INT 1
54600: ST_TO_ADDR
// if p3 = 30 then
54601: LD_VAR 0 3
54605: PUSH
54606: LD_INT 30
54608: EQUAL
54609: IFFALSE 54619
// sExchange := true ;
54611: LD_ADDR_EXP 84
54615: PUSH
54616: LD_INT 1
54618: ST_TO_ADDR
// if p3 = 31 then
54619: LD_VAR 0 3
54623: PUSH
54624: LD_INT 31
54626: EQUAL
54627: IFFALSE 54637
// sFac := true ;
54629: LD_ADDR_EXP 85
54633: PUSH
54634: LD_INT 1
54636: ST_TO_ADDR
// if p3 = 32 then
54637: LD_VAR 0 3
54641: PUSH
54642: LD_INT 32
54644: EQUAL
54645: IFFALSE 54655
// sPower := true ;
54647: LD_ADDR_EXP 86
54651: PUSH
54652: LD_INT 1
54654: ST_TO_ADDR
// if p3 = 33 then
54655: LD_VAR 0 3
54659: PUSH
54660: LD_INT 33
54662: EQUAL
54663: IFFALSE 54673
// sRandom := true ;
54665: LD_ADDR_EXP 87
54669: PUSH
54670: LD_INT 1
54672: ST_TO_ADDR
// if p3 = 34 then
54673: LD_VAR 0 3
54677: PUSH
54678: LD_INT 34
54680: EQUAL
54681: IFFALSE 54691
// sShield := true ;
54683: LD_ADDR_EXP 88
54687: PUSH
54688: LD_INT 1
54690: ST_TO_ADDR
// if p3 = 35 then
54691: LD_VAR 0 3
54695: PUSH
54696: LD_INT 35
54698: EQUAL
54699: IFFALSE 54709
// sTime := true ;
54701: LD_ADDR_EXP 89
54705: PUSH
54706: LD_INT 1
54708: ST_TO_ADDR
// if p3 = 36 then
54709: LD_VAR 0 3
54713: PUSH
54714: LD_INT 36
54716: EQUAL
54717: IFFALSE 54727
// sTools := true ;
54719: LD_ADDR_EXP 90
54723: PUSH
54724: LD_INT 1
54726: ST_TO_ADDR
// if p3 = 101 then
54727: LD_VAR 0 3
54731: PUSH
54732: LD_INT 101
54734: EQUAL
54735: IFFALSE 54745
// sSold := true ;
54737: LD_ADDR_EXP 55
54741: PUSH
54742: LD_INT 1
54744: ST_TO_ADDR
// if p3 = 102 then
54745: LD_VAR 0 3
54749: PUSH
54750: LD_INT 102
54752: EQUAL
54753: IFFALSE 54763
// sDiff := true ;
54755: LD_ADDR_EXP 56
54759: PUSH
54760: LD_INT 1
54762: ST_TO_ADDR
// if p3 = 103 then
54763: LD_VAR 0 3
54767: PUSH
54768: LD_INT 103
54770: EQUAL
54771: IFFALSE 54781
// sFog := true ;
54773: LD_ADDR_EXP 59
54777: PUSH
54778: LD_INT 1
54780: ST_TO_ADDR
// if p3 = 104 then
54781: LD_VAR 0 3
54785: PUSH
54786: LD_INT 104
54788: EQUAL
54789: IFFALSE 54799
// sReset := true ;
54791: LD_ADDR_EXP 60
54795: PUSH
54796: LD_INT 1
54798: ST_TO_ADDR
// if p3 = 105 then
54799: LD_VAR 0 3
54803: PUSH
54804: LD_INT 105
54806: EQUAL
54807: IFFALSE 54817
// sSun := true ;
54809: LD_ADDR_EXP 61
54813: PUSH
54814: LD_INT 1
54816: ST_TO_ADDR
// if p3 = 106 then
54817: LD_VAR 0 3
54821: PUSH
54822: LD_INT 106
54824: EQUAL
54825: IFFALSE 54835
// sTiger := true ;
54827: LD_ADDR_EXP 57
54831: PUSH
54832: LD_INT 1
54834: ST_TO_ADDR
// if p3 = 107 then
54835: LD_VAR 0 3
54839: PUSH
54840: LD_INT 107
54842: EQUAL
54843: IFFALSE 54853
// sBomb := true ;
54845: LD_ADDR_EXP 58
54849: PUSH
54850: LD_INT 1
54852: ST_TO_ADDR
// if p3 = 108 then
54853: LD_VAR 0 3
54857: PUSH
54858: LD_INT 108
54860: EQUAL
54861: IFFALSE 54871
// sWound := true ;
54863: LD_ADDR_EXP 66
54867: PUSH
54868: LD_INT 1
54870: ST_TO_ADDR
// if p3 = 109 then
54871: LD_VAR 0 3
54875: PUSH
54876: LD_INT 109
54878: EQUAL
54879: IFFALSE 54889
// sBetray := true ;
54881: LD_ADDR_EXP 70
54885: PUSH
54886: LD_INT 1
54888: ST_TO_ADDR
// if p3 = 110 then
54889: LD_VAR 0 3
54893: PUSH
54894: LD_INT 110
54896: EQUAL
54897: IFFALSE 54907
// sContamin := true ;
54899: LD_ADDR_EXP 71
54903: PUSH
54904: LD_INT 1
54906: ST_TO_ADDR
// if p3 = 111 then
54907: LD_VAR 0 3
54911: PUSH
54912: LD_INT 111
54914: EQUAL
54915: IFFALSE 54925
// sOil := true ;
54917: LD_ADDR_EXP 73
54921: PUSH
54922: LD_INT 1
54924: ST_TO_ADDR
// if p3 = 112 then
54925: LD_VAR 0 3
54929: PUSH
54930: LD_INT 112
54932: EQUAL
54933: IFFALSE 54943
// sStu := true ;
54935: LD_ADDR_EXP 77
54939: PUSH
54940: LD_INT 1
54942: ST_TO_ADDR
// if p3 = 113 then
54943: LD_VAR 0 3
54947: PUSH
54948: LD_INT 113
54950: EQUAL
54951: IFFALSE 54961
// sBazooka := true ;
54953: LD_ADDR_EXP 80
54957: PUSH
54958: LD_INT 1
54960: ST_TO_ADDR
// if p3 = 114 then
54961: LD_VAR 0 3
54965: PUSH
54966: LD_INT 114
54968: EQUAL
54969: IFFALSE 54979
// sMortar := true ;
54971: LD_ADDR_EXP 81
54975: PUSH
54976: LD_INT 1
54978: ST_TO_ADDR
// if p3 = 115 then
54979: LD_VAR 0 3
54983: PUSH
54984: LD_INT 115
54986: EQUAL
54987: IFFALSE 54997
// sRanger := true ;
54989: LD_ADDR_EXP 91
54993: PUSH
54994: LD_INT 1
54996: ST_TO_ADDR
// if p3 = 116 then
54997: LD_VAR 0 3
55001: PUSH
55002: LD_INT 116
55004: EQUAL
55005: IFFALSE 55015
// sComputer := true ;
55007: LD_ADDR_EXP 92
55011: PUSH
55012: LD_INT 1
55014: ST_TO_ADDR
// if p3 = 117 then
55015: LD_VAR 0 3
55019: PUSH
55020: LD_INT 117
55022: EQUAL
55023: IFFALSE 55033
// s30 := true ;
55025: LD_ADDR_EXP 93
55029: PUSH
55030: LD_INT 1
55032: ST_TO_ADDR
// if p3 = 118 then
55033: LD_VAR 0 3
55037: PUSH
55038: LD_INT 118
55040: EQUAL
55041: IFFALSE 55051
// s60 := true ;
55043: LD_ADDR_EXP 94
55047: PUSH
55048: LD_INT 1
55050: ST_TO_ADDR
// end ; if p2 = hack_mode then
55051: LD_VAR 0 2
55055: PUSH
55056: LD_INT 101
55058: EQUAL
55059: IFFALSE 55187
// begin case p3 of 1 :
55061: LD_VAR 0 3
55065: PUSH
55066: LD_INT 1
55068: DOUBLE
55069: EQUAL
55070: IFTRUE 55074
55072: GO 55081
55074: POP
// hHackUnlimitedResources ; 2 :
55075: CALL 67450 0 0
55079: GO 55187
55081: LD_INT 2
55083: DOUBLE
55084: EQUAL
55085: IFTRUE 55089
55087: GO 55096
55089: POP
// hHackSetLevel10 ; 3 :
55090: CALL 67583 0 0
55094: GO 55187
55096: LD_INT 3
55098: DOUBLE
55099: EQUAL
55100: IFTRUE 55104
55102: GO 55111
55104: POP
// hHackSetLevel10YourUnits ; 4 :
55105: CALL 67668 0 0
55109: GO 55187
55111: LD_INT 4
55113: DOUBLE
55114: EQUAL
55115: IFTRUE 55119
55117: GO 55126
55119: POP
// hHackInvincible ; 5 :
55120: CALL 68116 0 0
55124: GO 55187
55126: LD_INT 5
55128: DOUBLE
55129: EQUAL
55130: IFTRUE 55134
55132: GO 55141
55134: POP
// hHackInvisible ; 6 :
55135: CALL 68227 0 0
55139: GO 55187
55141: LD_INT 6
55143: DOUBLE
55144: EQUAL
55145: IFTRUE 55149
55147: GO 55156
55149: POP
// hHackChangeYourSide ; 7 :
55150: CALL 68284 0 0
55154: GO 55187
55156: LD_INT 7
55158: DOUBLE
55159: EQUAL
55160: IFTRUE 55164
55162: GO 55171
55164: POP
// hHackChangeUnitSide ; 8 :
55165: CALL 68326 0 0
55169: GO 55187
55171: LD_INT 8
55173: DOUBLE
55174: EQUAL
55175: IFTRUE 55179
55177: GO 55186
55179: POP
// hHackFog ; end ;
55180: CALL 68427 0 0
55184: GO 55187
55186: POP
// end ; if p2 = game_save_mode then
55187: LD_VAR 0 2
55191: PUSH
55192: LD_INT 102
55194: EQUAL
55195: IFFALSE 55252
// begin if p3 = 1 then
55197: LD_VAR 0 3
55201: PUSH
55202: LD_INT 1
55204: EQUAL
55205: IFFALSE 55217
// globalGameSaveCounter := p4 ;
55207: LD_ADDR_EXP 37
55211: PUSH
55212: LD_VAR 0 4
55216: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
55217: LD_VAR 0 3
55221: PUSH
55222: LD_INT 2
55224: EQUAL
55225: IFFALSE 55233
55227: PUSH
55228: LD_EXP 37
55232: AND
55233: IFFALSE 55252
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
55235: LD_STRING setGameSaveCounter(
55237: PUSH
55238: LD_EXP 37
55242: STR
55243: PUSH
55244: LD_STRING )
55246: STR
55247: PPUSH
55248: CALL_OW 559
// end ; end ;
55252: LD_VAR 0 7
55256: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
55257: LD_INT 0
55259: PPUSH
// streamModeActive := false ;
55260: LD_ADDR_EXP 38
55264: PUSH
55265: LD_INT 0
55267: ST_TO_ADDR
// normalCounter := 36 ;
55268: LD_ADDR_EXP 39
55272: PUSH
55273: LD_INT 36
55275: ST_TO_ADDR
// hardcoreCounter := 18 ;
55276: LD_ADDR_EXP 40
55280: PUSH
55281: LD_INT 18
55283: ST_TO_ADDR
// sRocket := false ;
55284: LD_ADDR_EXP 43
55288: PUSH
55289: LD_INT 0
55291: ST_TO_ADDR
// sSpeed := false ;
55292: LD_ADDR_EXP 42
55296: PUSH
55297: LD_INT 0
55299: ST_TO_ADDR
// sEngine := false ;
55300: LD_ADDR_EXP 44
55304: PUSH
55305: LD_INT 0
55307: ST_TO_ADDR
// sSpec := false ;
55308: LD_ADDR_EXP 41
55312: PUSH
55313: LD_INT 0
55315: ST_TO_ADDR
// sLevel := false ;
55316: LD_ADDR_EXP 45
55320: PUSH
55321: LD_INT 0
55323: ST_TO_ADDR
// sArmoury := false ;
55324: LD_ADDR_EXP 46
55328: PUSH
55329: LD_INT 0
55331: ST_TO_ADDR
// sRadar := false ;
55332: LD_ADDR_EXP 47
55336: PUSH
55337: LD_INT 0
55339: ST_TO_ADDR
// sBunker := false ;
55340: LD_ADDR_EXP 48
55344: PUSH
55345: LD_INT 0
55347: ST_TO_ADDR
// sHack := false ;
55348: LD_ADDR_EXP 49
55352: PUSH
55353: LD_INT 0
55355: ST_TO_ADDR
// sFire := false ;
55356: LD_ADDR_EXP 50
55360: PUSH
55361: LD_INT 0
55363: ST_TO_ADDR
// sRefresh := false ;
55364: LD_ADDR_EXP 51
55368: PUSH
55369: LD_INT 0
55371: ST_TO_ADDR
// sExp := false ;
55372: LD_ADDR_EXP 52
55376: PUSH
55377: LD_INT 0
55379: ST_TO_ADDR
// sDepot := false ;
55380: LD_ADDR_EXP 53
55384: PUSH
55385: LD_INT 0
55387: ST_TO_ADDR
// sFlag := false ;
55388: LD_ADDR_EXP 54
55392: PUSH
55393: LD_INT 0
55395: ST_TO_ADDR
// sKamikadze := false ;
55396: LD_ADDR_EXP 62
55400: PUSH
55401: LD_INT 0
55403: ST_TO_ADDR
// sTroll := false ;
55404: LD_ADDR_EXP 63
55408: PUSH
55409: LD_INT 0
55411: ST_TO_ADDR
// sSlow := false ;
55412: LD_ADDR_EXP 64
55416: PUSH
55417: LD_INT 0
55419: ST_TO_ADDR
// sLack := false ;
55420: LD_ADDR_EXP 65
55424: PUSH
55425: LD_INT 0
55427: ST_TO_ADDR
// sTank := false ;
55428: LD_ADDR_EXP 67
55432: PUSH
55433: LD_INT 0
55435: ST_TO_ADDR
// sRemote := false ;
55436: LD_ADDR_EXP 68
55440: PUSH
55441: LD_INT 0
55443: ST_TO_ADDR
// sPowell := false ;
55444: LD_ADDR_EXP 69
55448: PUSH
55449: LD_INT 0
55451: ST_TO_ADDR
// sTeleport := false ;
55452: LD_ADDR_EXP 72
55456: PUSH
55457: LD_INT 0
55459: ST_TO_ADDR
// sOilTower := false ;
55460: LD_ADDR_EXP 74
55464: PUSH
55465: LD_INT 0
55467: ST_TO_ADDR
// sShovel := false ;
55468: LD_ADDR_EXP 75
55472: PUSH
55473: LD_INT 0
55475: ST_TO_ADDR
// sSheik := false ;
55476: LD_ADDR_EXP 76
55480: PUSH
55481: LD_INT 0
55483: ST_TO_ADDR
// sEarthquake := false ;
55484: LD_ADDR_EXP 78
55488: PUSH
55489: LD_INT 0
55491: ST_TO_ADDR
// sAI := false ;
55492: LD_ADDR_EXP 79
55496: PUSH
55497: LD_INT 0
55499: ST_TO_ADDR
// sCargo := false ;
55500: LD_ADDR_EXP 82
55504: PUSH
55505: LD_INT 0
55507: ST_TO_ADDR
// sDLaser := false ;
55508: LD_ADDR_EXP 83
55512: PUSH
55513: LD_INT 0
55515: ST_TO_ADDR
// sExchange := false ;
55516: LD_ADDR_EXP 84
55520: PUSH
55521: LD_INT 0
55523: ST_TO_ADDR
// sFac := false ;
55524: LD_ADDR_EXP 85
55528: PUSH
55529: LD_INT 0
55531: ST_TO_ADDR
// sPower := false ;
55532: LD_ADDR_EXP 86
55536: PUSH
55537: LD_INT 0
55539: ST_TO_ADDR
// sRandom := false ;
55540: LD_ADDR_EXP 87
55544: PUSH
55545: LD_INT 0
55547: ST_TO_ADDR
// sShield := false ;
55548: LD_ADDR_EXP 88
55552: PUSH
55553: LD_INT 0
55555: ST_TO_ADDR
// sTime := false ;
55556: LD_ADDR_EXP 89
55560: PUSH
55561: LD_INT 0
55563: ST_TO_ADDR
// sTools := false ;
55564: LD_ADDR_EXP 90
55568: PUSH
55569: LD_INT 0
55571: ST_TO_ADDR
// sSold := false ;
55572: LD_ADDR_EXP 55
55576: PUSH
55577: LD_INT 0
55579: ST_TO_ADDR
// sDiff := false ;
55580: LD_ADDR_EXP 56
55584: PUSH
55585: LD_INT 0
55587: ST_TO_ADDR
// sFog := false ;
55588: LD_ADDR_EXP 59
55592: PUSH
55593: LD_INT 0
55595: ST_TO_ADDR
// sReset := false ;
55596: LD_ADDR_EXP 60
55600: PUSH
55601: LD_INT 0
55603: ST_TO_ADDR
// sSun := false ;
55604: LD_ADDR_EXP 61
55608: PUSH
55609: LD_INT 0
55611: ST_TO_ADDR
// sTiger := false ;
55612: LD_ADDR_EXP 57
55616: PUSH
55617: LD_INT 0
55619: ST_TO_ADDR
// sBomb := false ;
55620: LD_ADDR_EXP 58
55624: PUSH
55625: LD_INT 0
55627: ST_TO_ADDR
// sWound := false ;
55628: LD_ADDR_EXP 66
55632: PUSH
55633: LD_INT 0
55635: ST_TO_ADDR
// sBetray := false ;
55636: LD_ADDR_EXP 70
55640: PUSH
55641: LD_INT 0
55643: ST_TO_ADDR
// sContamin := false ;
55644: LD_ADDR_EXP 71
55648: PUSH
55649: LD_INT 0
55651: ST_TO_ADDR
// sOil := false ;
55652: LD_ADDR_EXP 73
55656: PUSH
55657: LD_INT 0
55659: ST_TO_ADDR
// sStu := false ;
55660: LD_ADDR_EXP 77
55664: PUSH
55665: LD_INT 0
55667: ST_TO_ADDR
// sBazooka := false ;
55668: LD_ADDR_EXP 80
55672: PUSH
55673: LD_INT 0
55675: ST_TO_ADDR
// sMortar := false ;
55676: LD_ADDR_EXP 81
55680: PUSH
55681: LD_INT 0
55683: ST_TO_ADDR
// sRanger := false ;
55684: LD_ADDR_EXP 91
55688: PUSH
55689: LD_INT 0
55691: ST_TO_ADDR
// sComputer := false ;
55692: LD_ADDR_EXP 92
55696: PUSH
55697: LD_INT 0
55699: ST_TO_ADDR
// s30 := false ;
55700: LD_ADDR_EXP 93
55704: PUSH
55705: LD_INT 0
55707: ST_TO_ADDR
// s60 := false ;
55708: LD_ADDR_EXP 94
55712: PUSH
55713: LD_INT 0
55715: ST_TO_ADDR
// end ;
55716: LD_VAR 0 1
55720: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55721: LD_INT 0
55723: PPUSH
55724: PPUSH
55725: PPUSH
55726: PPUSH
55727: PPUSH
55728: PPUSH
55729: PPUSH
// result := [ ] ;
55730: LD_ADDR_VAR 0 2
55734: PUSH
55735: EMPTY
55736: ST_TO_ADDR
// if campaign_id = 1 then
55737: LD_OWVAR 69
55741: PUSH
55742: LD_INT 1
55744: EQUAL
55745: IFFALSE 58911
// begin case mission_number of 1 :
55747: LD_OWVAR 70
55751: PUSH
55752: LD_INT 1
55754: DOUBLE
55755: EQUAL
55756: IFTRUE 55760
55758: GO 55836
55760: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55761: LD_ADDR_VAR 0 2
55765: PUSH
55766: LD_INT 2
55768: PUSH
55769: LD_INT 4
55771: PUSH
55772: LD_INT 11
55774: PUSH
55775: LD_INT 12
55777: PUSH
55778: LD_INT 15
55780: PUSH
55781: LD_INT 16
55783: PUSH
55784: LD_INT 22
55786: PUSH
55787: LD_INT 23
55789: PUSH
55790: LD_INT 26
55792: PUSH
55793: EMPTY
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: PUSH
55804: LD_INT 101
55806: PUSH
55807: LD_INT 102
55809: PUSH
55810: LD_INT 106
55812: PUSH
55813: LD_INT 116
55815: PUSH
55816: LD_INT 117
55818: PUSH
55819: LD_INT 118
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: ST_TO_ADDR
55834: GO 58909
55836: LD_INT 2
55838: DOUBLE
55839: EQUAL
55840: IFTRUE 55844
55842: GO 55928
55844: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55845: LD_ADDR_VAR 0 2
55849: PUSH
55850: LD_INT 2
55852: PUSH
55853: LD_INT 4
55855: PUSH
55856: LD_INT 11
55858: PUSH
55859: LD_INT 12
55861: PUSH
55862: LD_INT 15
55864: PUSH
55865: LD_INT 16
55867: PUSH
55868: LD_INT 22
55870: PUSH
55871: LD_INT 23
55873: PUSH
55874: LD_INT 26
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: PUSH
55888: LD_INT 101
55890: PUSH
55891: LD_INT 102
55893: PUSH
55894: LD_INT 105
55896: PUSH
55897: LD_INT 106
55899: PUSH
55900: LD_INT 108
55902: PUSH
55903: LD_INT 116
55905: PUSH
55906: LD_INT 117
55908: PUSH
55909: LD_INT 118
55911: PUSH
55912: EMPTY
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: ST_TO_ADDR
55926: GO 58909
55928: LD_INT 3
55930: DOUBLE
55931: EQUAL
55932: IFTRUE 55936
55934: GO 56024
55936: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
55937: LD_ADDR_VAR 0 2
55941: PUSH
55942: LD_INT 2
55944: PUSH
55945: LD_INT 4
55947: PUSH
55948: LD_INT 5
55950: PUSH
55951: LD_INT 11
55953: PUSH
55954: LD_INT 12
55956: PUSH
55957: LD_INT 15
55959: PUSH
55960: LD_INT 16
55962: PUSH
55963: LD_INT 22
55965: PUSH
55966: LD_INT 26
55968: PUSH
55969: LD_INT 36
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: PUSH
55984: LD_INT 101
55986: PUSH
55987: LD_INT 102
55989: PUSH
55990: LD_INT 105
55992: PUSH
55993: LD_INT 106
55995: PUSH
55996: LD_INT 108
55998: PUSH
55999: LD_INT 116
56001: PUSH
56002: LD_INT 117
56004: PUSH
56005: LD_INT 118
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: PUSH
56018: EMPTY
56019: LIST
56020: LIST
56021: ST_TO_ADDR
56022: GO 58909
56024: LD_INT 4
56026: DOUBLE
56027: EQUAL
56028: IFTRUE 56032
56030: GO 56128
56032: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
56033: LD_ADDR_VAR 0 2
56037: PUSH
56038: LD_INT 2
56040: PUSH
56041: LD_INT 4
56043: PUSH
56044: LD_INT 5
56046: PUSH
56047: LD_INT 8
56049: PUSH
56050: LD_INT 11
56052: PUSH
56053: LD_INT 12
56055: PUSH
56056: LD_INT 15
56058: PUSH
56059: LD_INT 16
56061: PUSH
56062: LD_INT 22
56064: PUSH
56065: LD_INT 23
56067: PUSH
56068: LD_INT 26
56070: PUSH
56071: LD_INT 36
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: LIST
56078: LIST
56079: LIST
56080: LIST
56081: LIST
56082: LIST
56083: LIST
56084: LIST
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 101
56090: PUSH
56091: LD_INT 102
56093: PUSH
56094: LD_INT 105
56096: PUSH
56097: LD_INT 106
56099: PUSH
56100: LD_INT 108
56102: PUSH
56103: LD_INT 116
56105: PUSH
56106: LD_INT 117
56108: PUSH
56109: LD_INT 118
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: ST_TO_ADDR
56126: GO 58909
56128: LD_INT 5
56130: DOUBLE
56131: EQUAL
56132: IFTRUE 56136
56134: GO 56248
56136: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
56137: LD_ADDR_VAR 0 2
56141: PUSH
56142: LD_INT 2
56144: PUSH
56145: LD_INT 4
56147: PUSH
56148: LD_INT 5
56150: PUSH
56151: LD_INT 6
56153: PUSH
56154: LD_INT 8
56156: PUSH
56157: LD_INT 11
56159: PUSH
56160: LD_INT 12
56162: PUSH
56163: LD_INT 15
56165: PUSH
56166: LD_INT 16
56168: PUSH
56169: LD_INT 22
56171: PUSH
56172: LD_INT 23
56174: PUSH
56175: LD_INT 25
56177: PUSH
56178: LD_INT 26
56180: PUSH
56181: LD_INT 36
56183: PUSH
56184: EMPTY
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: LIST
56195: LIST
56196: LIST
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 101
56202: PUSH
56203: LD_INT 102
56205: PUSH
56206: LD_INT 105
56208: PUSH
56209: LD_INT 106
56211: PUSH
56212: LD_INT 108
56214: PUSH
56215: LD_INT 109
56217: PUSH
56218: LD_INT 112
56220: PUSH
56221: LD_INT 116
56223: PUSH
56224: LD_INT 117
56226: PUSH
56227: LD_INT 118
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: LIST
56234: LIST
56235: LIST
56236: LIST
56237: LIST
56238: LIST
56239: LIST
56240: LIST
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: ST_TO_ADDR
56246: GO 58909
56248: LD_INT 6
56250: DOUBLE
56251: EQUAL
56252: IFTRUE 56256
56254: GO 56388
56256: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
56257: LD_ADDR_VAR 0 2
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: LD_INT 4
56267: PUSH
56268: LD_INT 5
56270: PUSH
56271: LD_INT 6
56273: PUSH
56274: LD_INT 8
56276: PUSH
56277: LD_INT 11
56279: PUSH
56280: LD_INT 12
56282: PUSH
56283: LD_INT 15
56285: PUSH
56286: LD_INT 16
56288: PUSH
56289: LD_INT 20
56291: PUSH
56292: LD_INT 21
56294: PUSH
56295: LD_INT 22
56297: PUSH
56298: LD_INT 23
56300: PUSH
56301: LD_INT 25
56303: PUSH
56304: LD_INT 26
56306: PUSH
56307: LD_INT 30
56309: PUSH
56310: LD_INT 31
56312: PUSH
56313: LD_INT 32
56315: PUSH
56316: LD_INT 36
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: LIST
56323: LIST
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: LIST
56335: LIST
56336: LIST
56337: LIST
56338: LIST
56339: PUSH
56340: LD_INT 101
56342: PUSH
56343: LD_INT 102
56345: PUSH
56346: LD_INT 105
56348: PUSH
56349: LD_INT 106
56351: PUSH
56352: LD_INT 108
56354: PUSH
56355: LD_INT 109
56357: PUSH
56358: LD_INT 112
56360: PUSH
56361: LD_INT 116
56363: PUSH
56364: LD_INT 117
56366: PUSH
56367: LD_INT 118
56369: PUSH
56370: EMPTY
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: LIST
56378: LIST
56379: LIST
56380: LIST
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: ST_TO_ADDR
56386: GO 58909
56388: LD_INT 7
56390: DOUBLE
56391: EQUAL
56392: IFTRUE 56396
56394: GO 56508
56396: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
56397: LD_ADDR_VAR 0 2
56401: PUSH
56402: LD_INT 2
56404: PUSH
56405: LD_INT 4
56407: PUSH
56408: LD_INT 5
56410: PUSH
56411: LD_INT 7
56413: PUSH
56414: LD_INT 11
56416: PUSH
56417: LD_INT 12
56419: PUSH
56420: LD_INT 15
56422: PUSH
56423: LD_INT 16
56425: PUSH
56426: LD_INT 20
56428: PUSH
56429: LD_INT 21
56431: PUSH
56432: LD_INT 22
56434: PUSH
56435: LD_INT 23
56437: PUSH
56438: LD_INT 25
56440: PUSH
56441: LD_INT 26
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: LIST
56448: LIST
56449: LIST
56450: LIST
56451: LIST
56452: LIST
56453: LIST
56454: LIST
56455: LIST
56456: LIST
56457: LIST
56458: LIST
56459: PUSH
56460: LD_INT 101
56462: PUSH
56463: LD_INT 102
56465: PUSH
56466: LD_INT 103
56468: PUSH
56469: LD_INT 105
56471: PUSH
56472: LD_INT 106
56474: PUSH
56475: LD_INT 108
56477: PUSH
56478: LD_INT 112
56480: PUSH
56481: LD_INT 116
56483: PUSH
56484: LD_INT 117
56486: PUSH
56487: LD_INT 118
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: LIST
56494: LIST
56495: LIST
56496: LIST
56497: LIST
56498: LIST
56499: LIST
56500: LIST
56501: PUSH
56502: EMPTY
56503: LIST
56504: LIST
56505: ST_TO_ADDR
56506: GO 58909
56508: LD_INT 8
56510: DOUBLE
56511: EQUAL
56512: IFTRUE 56516
56514: GO 56656
56516: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56517: LD_ADDR_VAR 0 2
56521: PUSH
56522: LD_INT 2
56524: PUSH
56525: LD_INT 4
56527: PUSH
56528: LD_INT 5
56530: PUSH
56531: LD_INT 6
56533: PUSH
56534: LD_INT 7
56536: PUSH
56537: LD_INT 8
56539: PUSH
56540: LD_INT 11
56542: PUSH
56543: LD_INT 12
56545: PUSH
56546: LD_INT 15
56548: PUSH
56549: LD_INT 16
56551: PUSH
56552: LD_INT 20
56554: PUSH
56555: LD_INT 21
56557: PUSH
56558: LD_INT 22
56560: PUSH
56561: LD_INT 23
56563: PUSH
56564: LD_INT 25
56566: PUSH
56567: LD_INT 26
56569: PUSH
56570: LD_INT 30
56572: PUSH
56573: LD_INT 31
56575: PUSH
56576: LD_INT 32
56578: PUSH
56579: LD_INT 36
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: LIST
56595: LIST
56596: LIST
56597: LIST
56598: LIST
56599: LIST
56600: LIST
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 101
56606: PUSH
56607: LD_INT 102
56609: PUSH
56610: LD_INT 103
56612: PUSH
56613: LD_INT 105
56615: PUSH
56616: LD_INT 106
56618: PUSH
56619: LD_INT 108
56621: PUSH
56622: LD_INT 109
56624: PUSH
56625: LD_INT 112
56627: PUSH
56628: LD_INT 116
56630: PUSH
56631: LD_INT 117
56633: PUSH
56634: LD_INT 118
56636: PUSH
56637: EMPTY
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: PUSH
56650: EMPTY
56651: LIST
56652: LIST
56653: ST_TO_ADDR
56654: GO 58909
56656: LD_INT 9
56658: DOUBLE
56659: EQUAL
56660: IFTRUE 56664
56662: GO 56812
56664: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56665: LD_ADDR_VAR 0 2
56669: PUSH
56670: LD_INT 2
56672: PUSH
56673: LD_INT 4
56675: PUSH
56676: LD_INT 5
56678: PUSH
56679: LD_INT 6
56681: PUSH
56682: LD_INT 7
56684: PUSH
56685: LD_INT 8
56687: PUSH
56688: LD_INT 11
56690: PUSH
56691: LD_INT 12
56693: PUSH
56694: LD_INT 15
56696: PUSH
56697: LD_INT 16
56699: PUSH
56700: LD_INT 20
56702: PUSH
56703: LD_INT 21
56705: PUSH
56706: LD_INT 22
56708: PUSH
56709: LD_INT 23
56711: PUSH
56712: LD_INT 25
56714: PUSH
56715: LD_INT 26
56717: PUSH
56718: LD_INT 28
56720: PUSH
56721: LD_INT 30
56723: PUSH
56724: LD_INT 31
56726: PUSH
56727: LD_INT 32
56729: PUSH
56730: LD_INT 36
56732: PUSH
56733: EMPTY
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: PUSH
56756: LD_INT 101
56758: PUSH
56759: LD_INT 102
56761: PUSH
56762: LD_INT 103
56764: PUSH
56765: LD_INT 105
56767: PUSH
56768: LD_INT 106
56770: PUSH
56771: LD_INT 108
56773: PUSH
56774: LD_INT 109
56776: PUSH
56777: LD_INT 112
56779: PUSH
56780: LD_INT 114
56782: PUSH
56783: LD_INT 116
56785: PUSH
56786: LD_INT 117
56788: PUSH
56789: LD_INT 118
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: LIST
56796: LIST
56797: LIST
56798: LIST
56799: LIST
56800: LIST
56801: LIST
56802: LIST
56803: LIST
56804: LIST
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: ST_TO_ADDR
56810: GO 58909
56812: LD_INT 10
56814: DOUBLE
56815: EQUAL
56816: IFTRUE 56820
56818: GO 57016
56820: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56821: LD_ADDR_VAR 0 2
56825: PUSH
56826: LD_INT 2
56828: PUSH
56829: LD_INT 4
56831: PUSH
56832: LD_INT 5
56834: PUSH
56835: LD_INT 6
56837: PUSH
56838: LD_INT 7
56840: PUSH
56841: LD_INT 8
56843: PUSH
56844: LD_INT 9
56846: PUSH
56847: LD_INT 10
56849: PUSH
56850: LD_INT 11
56852: PUSH
56853: LD_INT 12
56855: PUSH
56856: LD_INT 13
56858: PUSH
56859: LD_INT 14
56861: PUSH
56862: LD_INT 15
56864: PUSH
56865: LD_INT 16
56867: PUSH
56868: LD_INT 17
56870: PUSH
56871: LD_INT 18
56873: PUSH
56874: LD_INT 19
56876: PUSH
56877: LD_INT 20
56879: PUSH
56880: LD_INT 21
56882: PUSH
56883: LD_INT 22
56885: PUSH
56886: LD_INT 23
56888: PUSH
56889: LD_INT 24
56891: PUSH
56892: LD_INT 25
56894: PUSH
56895: LD_INT 26
56897: PUSH
56898: LD_INT 28
56900: PUSH
56901: LD_INT 30
56903: PUSH
56904: LD_INT 31
56906: PUSH
56907: LD_INT 32
56909: PUSH
56910: LD_INT 36
56912: PUSH
56913: EMPTY
56914: LIST
56915: LIST
56916: LIST
56917: LIST
56918: LIST
56919: LIST
56920: LIST
56921: LIST
56922: LIST
56923: LIST
56924: LIST
56925: LIST
56926: LIST
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: LIST
56935: LIST
56936: LIST
56937: LIST
56938: LIST
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: PUSH
56944: LD_INT 101
56946: PUSH
56947: LD_INT 102
56949: PUSH
56950: LD_INT 103
56952: PUSH
56953: LD_INT 104
56955: PUSH
56956: LD_INT 105
56958: PUSH
56959: LD_INT 106
56961: PUSH
56962: LD_INT 107
56964: PUSH
56965: LD_INT 108
56967: PUSH
56968: LD_INT 109
56970: PUSH
56971: LD_INT 110
56973: PUSH
56974: LD_INT 111
56976: PUSH
56977: LD_INT 112
56979: PUSH
56980: LD_INT 114
56982: PUSH
56983: LD_INT 116
56985: PUSH
56986: LD_INT 117
56988: PUSH
56989: LD_INT 118
56991: PUSH
56992: EMPTY
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: LIST
57007: LIST
57008: LIST
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: ST_TO_ADDR
57014: GO 58909
57016: LD_INT 11
57018: DOUBLE
57019: EQUAL
57020: IFTRUE 57024
57022: GO 57228
57024: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
57025: LD_ADDR_VAR 0 2
57029: PUSH
57030: LD_INT 2
57032: PUSH
57033: LD_INT 3
57035: PUSH
57036: LD_INT 4
57038: PUSH
57039: LD_INT 5
57041: PUSH
57042: LD_INT 6
57044: PUSH
57045: LD_INT 7
57047: PUSH
57048: LD_INT 8
57050: PUSH
57051: LD_INT 9
57053: PUSH
57054: LD_INT 10
57056: PUSH
57057: LD_INT 11
57059: PUSH
57060: LD_INT 12
57062: PUSH
57063: LD_INT 13
57065: PUSH
57066: LD_INT 14
57068: PUSH
57069: LD_INT 15
57071: PUSH
57072: LD_INT 16
57074: PUSH
57075: LD_INT 17
57077: PUSH
57078: LD_INT 18
57080: PUSH
57081: LD_INT 19
57083: PUSH
57084: LD_INT 20
57086: PUSH
57087: LD_INT 21
57089: PUSH
57090: LD_INT 22
57092: PUSH
57093: LD_INT 23
57095: PUSH
57096: LD_INT 24
57098: PUSH
57099: LD_INT 25
57101: PUSH
57102: LD_INT 26
57104: PUSH
57105: LD_INT 28
57107: PUSH
57108: LD_INT 30
57110: PUSH
57111: LD_INT 31
57113: PUSH
57114: LD_INT 32
57116: PUSH
57117: LD_INT 34
57119: PUSH
57120: LD_INT 36
57122: PUSH
57123: EMPTY
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: PUSH
57156: LD_INT 101
57158: PUSH
57159: LD_INT 102
57161: PUSH
57162: LD_INT 103
57164: PUSH
57165: LD_INT 104
57167: PUSH
57168: LD_INT 105
57170: PUSH
57171: LD_INT 106
57173: PUSH
57174: LD_INT 107
57176: PUSH
57177: LD_INT 108
57179: PUSH
57180: LD_INT 109
57182: PUSH
57183: LD_INT 110
57185: PUSH
57186: LD_INT 111
57188: PUSH
57189: LD_INT 112
57191: PUSH
57192: LD_INT 114
57194: PUSH
57195: LD_INT 116
57197: PUSH
57198: LD_INT 117
57200: PUSH
57201: LD_INT 118
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: LIST
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: PUSH
57222: EMPTY
57223: LIST
57224: LIST
57225: ST_TO_ADDR
57226: GO 58909
57228: LD_INT 12
57230: DOUBLE
57231: EQUAL
57232: IFTRUE 57236
57234: GO 57456
57236: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
57237: LD_ADDR_VAR 0 2
57241: PUSH
57242: LD_INT 1
57244: PUSH
57245: LD_INT 2
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 4
57253: PUSH
57254: LD_INT 5
57256: PUSH
57257: LD_INT 6
57259: PUSH
57260: LD_INT 7
57262: PUSH
57263: LD_INT 8
57265: PUSH
57266: LD_INT 9
57268: PUSH
57269: LD_INT 10
57271: PUSH
57272: LD_INT 11
57274: PUSH
57275: LD_INT 12
57277: PUSH
57278: LD_INT 13
57280: PUSH
57281: LD_INT 14
57283: PUSH
57284: LD_INT 15
57286: PUSH
57287: LD_INT 16
57289: PUSH
57290: LD_INT 17
57292: PUSH
57293: LD_INT 18
57295: PUSH
57296: LD_INT 19
57298: PUSH
57299: LD_INT 20
57301: PUSH
57302: LD_INT 21
57304: PUSH
57305: LD_INT 22
57307: PUSH
57308: LD_INT 23
57310: PUSH
57311: LD_INT 24
57313: PUSH
57314: LD_INT 25
57316: PUSH
57317: LD_INT 26
57319: PUSH
57320: LD_INT 27
57322: PUSH
57323: LD_INT 28
57325: PUSH
57326: LD_INT 30
57328: PUSH
57329: LD_INT 31
57331: PUSH
57332: LD_INT 32
57334: PUSH
57335: LD_INT 33
57337: PUSH
57338: LD_INT 34
57340: PUSH
57341: LD_INT 36
57343: PUSH
57344: EMPTY
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 101
57382: PUSH
57383: LD_INT 102
57385: PUSH
57386: LD_INT 103
57388: PUSH
57389: LD_INT 104
57391: PUSH
57392: LD_INT 105
57394: PUSH
57395: LD_INT 106
57397: PUSH
57398: LD_INT 107
57400: PUSH
57401: LD_INT 108
57403: PUSH
57404: LD_INT 109
57406: PUSH
57407: LD_INT 110
57409: PUSH
57410: LD_INT 111
57412: PUSH
57413: LD_INT 112
57415: PUSH
57416: LD_INT 113
57418: PUSH
57419: LD_INT 114
57421: PUSH
57422: LD_INT 116
57424: PUSH
57425: LD_INT 117
57427: PUSH
57428: LD_INT 118
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: LIST
57435: LIST
57436: LIST
57437: LIST
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: PUSH
57450: EMPTY
57451: LIST
57452: LIST
57453: ST_TO_ADDR
57454: GO 58909
57456: LD_INT 13
57458: DOUBLE
57459: EQUAL
57460: IFTRUE 57464
57462: GO 57672
57464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
57465: LD_ADDR_VAR 0 2
57469: PUSH
57470: LD_INT 1
57472: PUSH
57473: LD_INT 2
57475: PUSH
57476: LD_INT 3
57478: PUSH
57479: LD_INT 4
57481: PUSH
57482: LD_INT 5
57484: PUSH
57485: LD_INT 8
57487: PUSH
57488: LD_INT 9
57490: PUSH
57491: LD_INT 10
57493: PUSH
57494: LD_INT 11
57496: PUSH
57497: LD_INT 12
57499: PUSH
57500: LD_INT 14
57502: PUSH
57503: LD_INT 15
57505: PUSH
57506: LD_INT 16
57508: PUSH
57509: LD_INT 17
57511: PUSH
57512: LD_INT 18
57514: PUSH
57515: LD_INT 19
57517: PUSH
57518: LD_INT 20
57520: PUSH
57521: LD_INT 21
57523: PUSH
57524: LD_INT 22
57526: PUSH
57527: LD_INT 23
57529: PUSH
57530: LD_INT 24
57532: PUSH
57533: LD_INT 25
57535: PUSH
57536: LD_INT 26
57538: PUSH
57539: LD_INT 27
57541: PUSH
57542: LD_INT 28
57544: PUSH
57545: LD_INT 30
57547: PUSH
57548: LD_INT 31
57550: PUSH
57551: LD_INT 32
57553: PUSH
57554: LD_INT 33
57556: PUSH
57557: LD_INT 34
57559: PUSH
57560: LD_INT 36
57562: PUSH
57563: EMPTY
57564: LIST
57565: LIST
57566: LIST
57567: LIST
57568: LIST
57569: LIST
57570: LIST
57571: LIST
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: LIST
57580: LIST
57581: LIST
57582: LIST
57583: LIST
57584: LIST
57585: LIST
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: PUSH
57596: LD_INT 101
57598: PUSH
57599: LD_INT 102
57601: PUSH
57602: LD_INT 103
57604: PUSH
57605: LD_INT 104
57607: PUSH
57608: LD_INT 105
57610: PUSH
57611: LD_INT 106
57613: PUSH
57614: LD_INT 107
57616: PUSH
57617: LD_INT 108
57619: PUSH
57620: LD_INT 109
57622: PUSH
57623: LD_INT 110
57625: PUSH
57626: LD_INT 111
57628: PUSH
57629: LD_INT 112
57631: PUSH
57632: LD_INT 113
57634: PUSH
57635: LD_INT 114
57637: PUSH
57638: LD_INT 116
57640: PUSH
57641: LD_INT 117
57643: PUSH
57644: LD_INT 118
57646: PUSH
57647: EMPTY
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: PUSH
57666: EMPTY
57667: LIST
57668: LIST
57669: ST_TO_ADDR
57670: GO 58909
57672: LD_INT 14
57674: DOUBLE
57675: EQUAL
57676: IFTRUE 57680
57678: GO 57904
57680: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57681: LD_ADDR_VAR 0 2
57685: PUSH
57686: LD_INT 1
57688: PUSH
57689: LD_INT 2
57691: PUSH
57692: LD_INT 3
57694: PUSH
57695: LD_INT 4
57697: PUSH
57698: LD_INT 5
57700: PUSH
57701: LD_INT 6
57703: PUSH
57704: LD_INT 7
57706: PUSH
57707: LD_INT 8
57709: PUSH
57710: LD_INT 9
57712: PUSH
57713: LD_INT 10
57715: PUSH
57716: LD_INT 11
57718: PUSH
57719: LD_INT 12
57721: PUSH
57722: LD_INT 13
57724: PUSH
57725: LD_INT 14
57727: PUSH
57728: LD_INT 15
57730: PUSH
57731: LD_INT 16
57733: PUSH
57734: LD_INT 17
57736: PUSH
57737: LD_INT 18
57739: PUSH
57740: LD_INT 19
57742: PUSH
57743: LD_INT 20
57745: PUSH
57746: LD_INT 21
57748: PUSH
57749: LD_INT 22
57751: PUSH
57752: LD_INT 23
57754: PUSH
57755: LD_INT 24
57757: PUSH
57758: LD_INT 25
57760: PUSH
57761: LD_INT 26
57763: PUSH
57764: LD_INT 27
57766: PUSH
57767: LD_INT 28
57769: PUSH
57770: LD_INT 29
57772: PUSH
57773: LD_INT 30
57775: PUSH
57776: LD_INT 31
57778: PUSH
57779: LD_INT 32
57781: PUSH
57782: LD_INT 33
57784: PUSH
57785: LD_INT 34
57787: PUSH
57788: LD_INT 36
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: LIST
57811: LIST
57812: LIST
57813: LIST
57814: LIST
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: PUSH
57828: LD_INT 101
57830: PUSH
57831: LD_INT 102
57833: PUSH
57834: LD_INT 103
57836: PUSH
57837: LD_INT 104
57839: PUSH
57840: LD_INT 105
57842: PUSH
57843: LD_INT 106
57845: PUSH
57846: LD_INT 107
57848: PUSH
57849: LD_INT 108
57851: PUSH
57852: LD_INT 109
57854: PUSH
57855: LD_INT 110
57857: PUSH
57858: LD_INT 111
57860: PUSH
57861: LD_INT 112
57863: PUSH
57864: LD_INT 113
57866: PUSH
57867: LD_INT 114
57869: PUSH
57870: LD_INT 116
57872: PUSH
57873: LD_INT 117
57875: PUSH
57876: LD_INT 118
57878: PUSH
57879: EMPTY
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: PUSH
57898: EMPTY
57899: LIST
57900: LIST
57901: ST_TO_ADDR
57902: GO 58909
57904: LD_INT 15
57906: DOUBLE
57907: EQUAL
57908: IFTRUE 57912
57910: GO 58136
57912: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
57913: LD_ADDR_VAR 0 2
57917: PUSH
57918: LD_INT 1
57920: PUSH
57921: LD_INT 2
57923: PUSH
57924: LD_INT 3
57926: PUSH
57927: LD_INT 4
57929: PUSH
57930: LD_INT 5
57932: PUSH
57933: LD_INT 6
57935: PUSH
57936: LD_INT 7
57938: PUSH
57939: LD_INT 8
57941: PUSH
57942: LD_INT 9
57944: PUSH
57945: LD_INT 10
57947: PUSH
57948: LD_INT 11
57950: PUSH
57951: LD_INT 12
57953: PUSH
57954: LD_INT 13
57956: PUSH
57957: LD_INT 14
57959: PUSH
57960: LD_INT 15
57962: PUSH
57963: LD_INT 16
57965: PUSH
57966: LD_INT 17
57968: PUSH
57969: LD_INT 18
57971: PUSH
57972: LD_INT 19
57974: PUSH
57975: LD_INT 20
57977: PUSH
57978: LD_INT 21
57980: PUSH
57981: LD_INT 22
57983: PUSH
57984: LD_INT 23
57986: PUSH
57987: LD_INT 24
57989: PUSH
57990: LD_INT 25
57992: PUSH
57993: LD_INT 26
57995: PUSH
57996: LD_INT 27
57998: PUSH
57999: LD_INT 28
58001: PUSH
58002: LD_INT 29
58004: PUSH
58005: LD_INT 30
58007: PUSH
58008: LD_INT 31
58010: PUSH
58011: LD_INT 32
58013: PUSH
58014: LD_INT 33
58016: PUSH
58017: LD_INT 34
58019: PUSH
58020: LD_INT 36
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: LIST
58055: LIST
58056: LIST
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 101
58062: PUSH
58063: LD_INT 102
58065: PUSH
58066: LD_INT 103
58068: PUSH
58069: LD_INT 104
58071: PUSH
58072: LD_INT 105
58074: PUSH
58075: LD_INT 106
58077: PUSH
58078: LD_INT 107
58080: PUSH
58081: LD_INT 108
58083: PUSH
58084: LD_INT 109
58086: PUSH
58087: LD_INT 110
58089: PUSH
58090: LD_INT 111
58092: PUSH
58093: LD_INT 112
58095: PUSH
58096: LD_INT 113
58098: PUSH
58099: LD_INT 114
58101: PUSH
58102: LD_INT 116
58104: PUSH
58105: LD_INT 117
58107: PUSH
58108: LD_INT 118
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: LIST
58115: LIST
58116: LIST
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: ST_TO_ADDR
58134: GO 58909
58136: LD_INT 16
58138: DOUBLE
58139: EQUAL
58140: IFTRUE 58144
58142: GO 58280
58144: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
58145: LD_ADDR_VAR 0 2
58149: PUSH
58150: LD_INT 2
58152: PUSH
58153: LD_INT 4
58155: PUSH
58156: LD_INT 5
58158: PUSH
58159: LD_INT 7
58161: PUSH
58162: LD_INT 11
58164: PUSH
58165: LD_INT 12
58167: PUSH
58168: LD_INT 15
58170: PUSH
58171: LD_INT 16
58173: PUSH
58174: LD_INT 20
58176: PUSH
58177: LD_INT 21
58179: PUSH
58180: LD_INT 22
58182: PUSH
58183: LD_INT 23
58185: PUSH
58186: LD_INT 25
58188: PUSH
58189: LD_INT 26
58191: PUSH
58192: LD_INT 30
58194: PUSH
58195: LD_INT 31
58197: PUSH
58198: LD_INT 32
58200: PUSH
58201: LD_INT 33
58203: PUSH
58204: LD_INT 34
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: PUSH
58228: LD_INT 101
58230: PUSH
58231: LD_INT 102
58233: PUSH
58234: LD_INT 103
58236: PUSH
58237: LD_INT 106
58239: PUSH
58240: LD_INT 108
58242: PUSH
58243: LD_INT 112
58245: PUSH
58246: LD_INT 113
58248: PUSH
58249: LD_INT 114
58251: PUSH
58252: LD_INT 116
58254: PUSH
58255: LD_INT 117
58257: PUSH
58258: LD_INT 118
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: LIST
58271: LIST
58272: LIST
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: ST_TO_ADDR
58278: GO 58909
58280: LD_INT 17
58282: DOUBLE
58283: EQUAL
58284: IFTRUE 58288
58286: GO 58512
58288: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
58289: LD_ADDR_VAR 0 2
58293: PUSH
58294: LD_INT 1
58296: PUSH
58297: LD_INT 2
58299: PUSH
58300: LD_INT 3
58302: PUSH
58303: LD_INT 4
58305: PUSH
58306: LD_INT 5
58308: PUSH
58309: LD_INT 6
58311: PUSH
58312: LD_INT 7
58314: PUSH
58315: LD_INT 8
58317: PUSH
58318: LD_INT 9
58320: PUSH
58321: LD_INT 10
58323: PUSH
58324: LD_INT 11
58326: PUSH
58327: LD_INT 12
58329: PUSH
58330: LD_INT 13
58332: PUSH
58333: LD_INT 14
58335: PUSH
58336: LD_INT 15
58338: PUSH
58339: LD_INT 16
58341: PUSH
58342: LD_INT 17
58344: PUSH
58345: LD_INT 18
58347: PUSH
58348: LD_INT 19
58350: PUSH
58351: LD_INT 20
58353: PUSH
58354: LD_INT 21
58356: PUSH
58357: LD_INT 22
58359: PUSH
58360: LD_INT 23
58362: PUSH
58363: LD_INT 24
58365: PUSH
58366: LD_INT 25
58368: PUSH
58369: LD_INT 26
58371: PUSH
58372: LD_INT 27
58374: PUSH
58375: LD_INT 28
58377: PUSH
58378: LD_INT 29
58380: PUSH
58381: LD_INT 30
58383: PUSH
58384: LD_INT 31
58386: PUSH
58387: LD_INT 32
58389: PUSH
58390: LD_INT 33
58392: PUSH
58393: LD_INT 34
58395: PUSH
58396: LD_INT 36
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 101
58438: PUSH
58439: LD_INT 102
58441: PUSH
58442: LD_INT 103
58444: PUSH
58445: LD_INT 104
58447: PUSH
58448: LD_INT 105
58450: PUSH
58451: LD_INT 106
58453: PUSH
58454: LD_INT 107
58456: PUSH
58457: LD_INT 108
58459: PUSH
58460: LD_INT 109
58462: PUSH
58463: LD_INT 110
58465: PUSH
58466: LD_INT 111
58468: PUSH
58469: LD_INT 112
58471: PUSH
58472: LD_INT 113
58474: PUSH
58475: LD_INT 114
58477: PUSH
58478: LD_INT 116
58480: PUSH
58481: LD_INT 117
58483: PUSH
58484: LD_INT 118
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: ST_TO_ADDR
58510: GO 58909
58512: LD_INT 18
58514: DOUBLE
58515: EQUAL
58516: IFTRUE 58520
58518: GO 58668
58520: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58521: LD_ADDR_VAR 0 2
58525: PUSH
58526: LD_INT 2
58528: PUSH
58529: LD_INT 4
58531: PUSH
58532: LD_INT 5
58534: PUSH
58535: LD_INT 7
58537: PUSH
58538: LD_INT 11
58540: PUSH
58541: LD_INT 12
58543: PUSH
58544: LD_INT 15
58546: PUSH
58547: LD_INT 16
58549: PUSH
58550: LD_INT 20
58552: PUSH
58553: LD_INT 21
58555: PUSH
58556: LD_INT 22
58558: PUSH
58559: LD_INT 23
58561: PUSH
58562: LD_INT 25
58564: PUSH
58565: LD_INT 26
58567: PUSH
58568: LD_INT 30
58570: PUSH
58571: LD_INT 31
58573: PUSH
58574: LD_INT 32
58576: PUSH
58577: LD_INT 33
58579: PUSH
58580: LD_INT 34
58582: PUSH
58583: LD_INT 35
58585: PUSH
58586: LD_INT 36
58588: PUSH
58589: EMPTY
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: LIST
58599: LIST
58600: LIST
58601: LIST
58602: LIST
58603: LIST
58604: LIST
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: PUSH
58612: LD_INT 101
58614: PUSH
58615: LD_INT 102
58617: PUSH
58618: LD_INT 103
58620: PUSH
58621: LD_INT 106
58623: PUSH
58624: LD_INT 108
58626: PUSH
58627: LD_INT 112
58629: PUSH
58630: LD_INT 113
58632: PUSH
58633: LD_INT 114
58635: PUSH
58636: LD_INT 115
58638: PUSH
58639: LD_INT 116
58641: PUSH
58642: LD_INT 117
58644: PUSH
58645: LD_INT 118
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: LIST
58654: LIST
58655: LIST
58656: LIST
58657: LIST
58658: LIST
58659: LIST
58660: LIST
58661: PUSH
58662: EMPTY
58663: LIST
58664: LIST
58665: ST_TO_ADDR
58666: GO 58909
58668: LD_INT 19
58670: DOUBLE
58671: EQUAL
58672: IFTRUE 58676
58674: GO 58908
58676: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58677: LD_ADDR_VAR 0 2
58681: PUSH
58682: LD_INT 1
58684: PUSH
58685: LD_INT 2
58687: PUSH
58688: LD_INT 3
58690: PUSH
58691: LD_INT 4
58693: PUSH
58694: LD_INT 5
58696: PUSH
58697: LD_INT 6
58699: PUSH
58700: LD_INT 7
58702: PUSH
58703: LD_INT 8
58705: PUSH
58706: LD_INT 9
58708: PUSH
58709: LD_INT 10
58711: PUSH
58712: LD_INT 11
58714: PUSH
58715: LD_INT 12
58717: PUSH
58718: LD_INT 13
58720: PUSH
58721: LD_INT 14
58723: PUSH
58724: LD_INT 15
58726: PUSH
58727: LD_INT 16
58729: PUSH
58730: LD_INT 17
58732: PUSH
58733: LD_INT 18
58735: PUSH
58736: LD_INT 19
58738: PUSH
58739: LD_INT 20
58741: PUSH
58742: LD_INT 21
58744: PUSH
58745: LD_INT 22
58747: PUSH
58748: LD_INT 23
58750: PUSH
58751: LD_INT 24
58753: PUSH
58754: LD_INT 25
58756: PUSH
58757: LD_INT 26
58759: PUSH
58760: LD_INT 27
58762: PUSH
58763: LD_INT 28
58765: PUSH
58766: LD_INT 29
58768: PUSH
58769: LD_INT 30
58771: PUSH
58772: LD_INT 31
58774: PUSH
58775: LD_INT 32
58777: PUSH
58778: LD_INT 33
58780: PUSH
58781: LD_INT 34
58783: PUSH
58784: LD_INT 35
58786: PUSH
58787: LD_INT 36
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: LIST
58801: LIST
58802: LIST
58803: LIST
58804: LIST
58805: LIST
58806: LIST
58807: LIST
58808: LIST
58809: LIST
58810: LIST
58811: LIST
58812: LIST
58813: LIST
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: LIST
58819: LIST
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: LIST
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 101
58830: PUSH
58831: LD_INT 102
58833: PUSH
58834: LD_INT 103
58836: PUSH
58837: LD_INT 104
58839: PUSH
58840: LD_INT 105
58842: PUSH
58843: LD_INT 106
58845: PUSH
58846: LD_INT 107
58848: PUSH
58849: LD_INT 108
58851: PUSH
58852: LD_INT 109
58854: PUSH
58855: LD_INT 110
58857: PUSH
58858: LD_INT 111
58860: PUSH
58861: LD_INT 112
58863: PUSH
58864: LD_INT 113
58866: PUSH
58867: LD_INT 114
58869: PUSH
58870: LD_INT 115
58872: PUSH
58873: LD_INT 116
58875: PUSH
58876: LD_INT 117
58878: PUSH
58879: LD_INT 118
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: ST_TO_ADDR
58906: GO 58909
58908: POP
// end else
58909: GO 59140
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
58911: LD_ADDR_VAR 0 2
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 2
58921: PUSH
58922: LD_INT 3
58924: PUSH
58925: LD_INT 4
58927: PUSH
58928: LD_INT 5
58930: PUSH
58931: LD_INT 6
58933: PUSH
58934: LD_INT 7
58936: PUSH
58937: LD_INT 8
58939: PUSH
58940: LD_INT 9
58942: PUSH
58943: LD_INT 10
58945: PUSH
58946: LD_INT 11
58948: PUSH
58949: LD_INT 12
58951: PUSH
58952: LD_INT 13
58954: PUSH
58955: LD_INT 14
58957: PUSH
58958: LD_INT 15
58960: PUSH
58961: LD_INT 16
58963: PUSH
58964: LD_INT 17
58966: PUSH
58967: LD_INT 18
58969: PUSH
58970: LD_INT 19
58972: PUSH
58973: LD_INT 20
58975: PUSH
58976: LD_INT 21
58978: PUSH
58979: LD_INT 22
58981: PUSH
58982: LD_INT 23
58984: PUSH
58985: LD_INT 24
58987: PUSH
58988: LD_INT 25
58990: PUSH
58991: LD_INT 26
58993: PUSH
58994: LD_INT 27
58996: PUSH
58997: LD_INT 28
58999: PUSH
59000: LD_INT 29
59002: PUSH
59003: LD_INT 30
59005: PUSH
59006: LD_INT 31
59008: PUSH
59009: LD_INT 32
59011: PUSH
59012: LD_INT 33
59014: PUSH
59015: LD_INT 34
59017: PUSH
59018: LD_INT 35
59020: PUSH
59021: LD_INT 36
59023: PUSH
59024: EMPTY
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: LIST
59033: LIST
59034: LIST
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: LIST
59046: LIST
59047: LIST
59048: LIST
59049: LIST
59050: LIST
59051: LIST
59052: LIST
59053: LIST
59054: LIST
59055: LIST
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 101
59064: PUSH
59065: LD_INT 102
59067: PUSH
59068: LD_INT 103
59070: PUSH
59071: LD_INT 104
59073: PUSH
59074: LD_INT 105
59076: PUSH
59077: LD_INT 106
59079: PUSH
59080: LD_INT 107
59082: PUSH
59083: LD_INT 108
59085: PUSH
59086: LD_INT 109
59088: PUSH
59089: LD_INT 110
59091: PUSH
59092: LD_INT 111
59094: PUSH
59095: LD_INT 112
59097: PUSH
59098: LD_INT 113
59100: PUSH
59101: LD_INT 114
59103: PUSH
59104: LD_INT 115
59106: PUSH
59107: LD_INT 116
59109: PUSH
59110: LD_INT 117
59112: PUSH
59113: LD_INT 118
59115: PUSH
59116: EMPTY
59117: LIST
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: ST_TO_ADDR
// if result then
59140: LD_VAR 0 2
59144: IFFALSE 59930
// begin normal :=  ;
59146: LD_ADDR_VAR 0 5
59150: PUSH
59151: LD_STRING 
59153: ST_TO_ADDR
// hardcore :=  ;
59154: LD_ADDR_VAR 0 6
59158: PUSH
59159: LD_STRING 
59161: ST_TO_ADDR
// active :=  ;
59162: LD_ADDR_VAR 0 7
59166: PUSH
59167: LD_STRING 
59169: ST_TO_ADDR
// for i = 1 to normalCounter do
59170: LD_ADDR_VAR 0 8
59174: PUSH
59175: DOUBLE
59176: LD_INT 1
59178: DEC
59179: ST_TO_ADDR
59180: LD_EXP 39
59184: PUSH
59185: FOR_TO
59186: IFFALSE 59287
// begin tmp := 0 ;
59188: LD_ADDR_VAR 0 3
59192: PUSH
59193: LD_STRING 0
59195: ST_TO_ADDR
// if result [ 1 ] then
59196: LD_VAR 0 2
59200: PUSH
59201: LD_INT 1
59203: ARRAY
59204: IFFALSE 59269
// if result [ 1 ] [ 1 ] = i then
59206: LD_VAR 0 2
59210: PUSH
59211: LD_INT 1
59213: ARRAY
59214: PUSH
59215: LD_INT 1
59217: ARRAY
59218: PUSH
59219: LD_VAR 0 8
59223: EQUAL
59224: IFFALSE 59269
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
59226: LD_ADDR_VAR 0 2
59230: PUSH
59231: LD_VAR 0 2
59235: PPUSH
59236: LD_INT 1
59238: PPUSH
59239: LD_VAR 0 2
59243: PUSH
59244: LD_INT 1
59246: ARRAY
59247: PPUSH
59248: LD_INT 1
59250: PPUSH
59251: CALL_OW 3
59255: PPUSH
59256: CALL_OW 1
59260: ST_TO_ADDR
// tmp := 1 ;
59261: LD_ADDR_VAR 0 3
59265: PUSH
59266: LD_STRING 1
59268: ST_TO_ADDR
// end ; normal := normal & tmp ;
59269: LD_ADDR_VAR 0 5
59273: PUSH
59274: LD_VAR 0 5
59278: PUSH
59279: LD_VAR 0 3
59283: STR
59284: ST_TO_ADDR
// end ;
59285: GO 59185
59287: POP
59288: POP
// for i = 1 to hardcoreCounter do
59289: LD_ADDR_VAR 0 8
59293: PUSH
59294: DOUBLE
59295: LD_INT 1
59297: DEC
59298: ST_TO_ADDR
59299: LD_EXP 40
59303: PUSH
59304: FOR_TO
59305: IFFALSE 59410
// begin tmp := 0 ;
59307: LD_ADDR_VAR 0 3
59311: PUSH
59312: LD_STRING 0
59314: ST_TO_ADDR
// if result [ 2 ] then
59315: LD_VAR 0 2
59319: PUSH
59320: LD_INT 2
59322: ARRAY
59323: IFFALSE 59392
// if result [ 2 ] [ 1 ] = 100 + i then
59325: LD_VAR 0 2
59329: PUSH
59330: LD_INT 2
59332: ARRAY
59333: PUSH
59334: LD_INT 1
59336: ARRAY
59337: PUSH
59338: LD_INT 100
59340: PUSH
59341: LD_VAR 0 8
59345: PLUS
59346: EQUAL
59347: IFFALSE 59392
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
59349: LD_ADDR_VAR 0 2
59353: PUSH
59354: LD_VAR 0 2
59358: PPUSH
59359: LD_INT 2
59361: PPUSH
59362: LD_VAR 0 2
59366: PUSH
59367: LD_INT 2
59369: ARRAY
59370: PPUSH
59371: LD_INT 1
59373: PPUSH
59374: CALL_OW 3
59378: PPUSH
59379: CALL_OW 1
59383: ST_TO_ADDR
// tmp := 1 ;
59384: LD_ADDR_VAR 0 3
59388: PUSH
59389: LD_STRING 1
59391: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
59392: LD_ADDR_VAR 0 6
59396: PUSH
59397: LD_VAR 0 6
59401: PUSH
59402: LD_VAR 0 3
59406: STR
59407: ST_TO_ADDR
// end ;
59408: GO 59304
59410: POP
59411: POP
// if isGameLoad then
59412: LD_VAR 0 1
59416: IFFALSE 59891
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
59418: LD_ADDR_VAR 0 4
59422: PUSH
59423: LD_EXP 43
59427: PUSH
59428: LD_EXP 42
59432: PUSH
59433: LD_EXP 44
59437: PUSH
59438: LD_EXP 41
59442: PUSH
59443: LD_EXP 45
59447: PUSH
59448: LD_EXP 46
59452: PUSH
59453: LD_EXP 47
59457: PUSH
59458: LD_EXP 48
59462: PUSH
59463: LD_EXP 49
59467: PUSH
59468: LD_EXP 50
59472: PUSH
59473: LD_EXP 51
59477: PUSH
59478: LD_EXP 52
59482: PUSH
59483: LD_EXP 53
59487: PUSH
59488: LD_EXP 54
59492: PUSH
59493: LD_EXP 62
59497: PUSH
59498: LD_EXP 63
59502: PUSH
59503: LD_EXP 64
59507: PUSH
59508: LD_EXP 65
59512: PUSH
59513: LD_EXP 67
59517: PUSH
59518: LD_EXP 68
59522: PUSH
59523: LD_EXP 69
59527: PUSH
59528: LD_EXP 72
59532: PUSH
59533: LD_EXP 74
59537: PUSH
59538: LD_EXP 75
59542: PUSH
59543: LD_EXP 76
59547: PUSH
59548: LD_EXP 78
59552: PUSH
59553: LD_EXP 79
59557: PUSH
59558: LD_EXP 82
59562: PUSH
59563: LD_EXP 83
59567: PUSH
59568: LD_EXP 84
59572: PUSH
59573: LD_EXP 85
59577: PUSH
59578: LD_EXP 86
59582: PUSH
59583: LD_EXP 87
59587: PUSH
59588: LD_EXP 88
59592: PUSH
59593: LD_EXP 89
59597: PUSH
59598: LD_EXP 90
59602: PUSH
59603: LD_EXP 55
59607: PUSH
59608: LD_EXP 56
59612: PUSH
59613: LD_EXP 59
59617: PUSH
59618: LD_EXP 60
59622: PUSH
59623: LD_EXP 61
59627: PUSH
59628: LD_EXP 57
59632: PUSH
59633: LD_EXP 58
59637: PUSH
59638: LD_EXP 66
59642: PUSH
59643: LD_EXP 70
59647: PUSH
59648: LD_EXP 71
59652: PUSH
59653: LD_EXP 73
59657: PUSH
59658: LD_EXP 77
59662: PUSH
59663: LD_EXP 80
59667: PUSH
59668: LD_EXP 81
59672: PUSH
59673: LD_EXP 91
59677: PUSH
59678: LD_EXP 92
59682: PUSH
59683: LD_EXP 93
59687: PUSH
59688: LD_EXP 94
59692: PUSH
59693: EMPTY
59694: LIST
59695: LIST
59696: LIST
59697: LIST
59698: LIST
59699: LIST
59700: LIST
59701: LIST
59702: LIST
59703: LIST
59704: LIST
59705: LIST
59706: LIST
59707: LIST
59708: LIST
59709: LIST
59710: LIST
59711: LIST
59712: LIST
59713: LIST
59714: LIST
59715: LIST
59716: LIST
59717: LIST
59718: LIST
59719: LIST
59720: LIST
59721: LIST
59722: LIST
59723: LIST
59724: LIST
59725: LIST
59726: LIST
59727: LIST
59728: LIST
59729: LIST
59730: LIST
59731: LIST
59732: LIST
59733: LIST
59734: LIST
59735: LIST
59736: LIST
59737: LIST
59738: LIST
59739: LIST
59740: LIST
59741: LIST
59742: LIST
59743: LIST
59744: LIST
59745: LIST
59746: LIST
59747: LIST
59748: ST_TO_ADDR
// tmp :=  ;
59749: LD_ADDR_VAR 0 3
59753: PUSH
59754: LD_STRING 
59756: ST_TO_ADDR
// for i = 1 to normalCounter do
59757: LD_ADDR_VAR 0 8
59761: PUSH
59762: DOUBLE
59763: LD_INT 1
59765: DEC
59766: ST_TO_ADDR
59767: LD_EXP 39
59771: PUSH
59772: FOR_TO
59773: IFFALSE 59809
// begin if flags [ i ] then
59775: LD_VAR 0 4
59779: PUSH
59780: LD_VAR 0 8
59784: ARRAY
59785: IFFALSE 59807
// tmp := tmp & i & ; ;
59787: LD_ADDR_VAR 0 3
59791: PUSH
59792: LD_VAR 0 3
59796: PUSH
59797: LD_VAR 0 8
59801: STR
59802: PUSH
59803: LD_STRING ;
59805: STR
59806: ST_TO_ADDR
// end ;
59807: GO 59772
59809: POP
59810: POP
// for i = 1 to hardcoreCounter do
59811: LD_ADDR_VAR 0 8
59815: PUSH
59816: DOUBLE
59817: LD_INT 1
59819: DEC
59820: ST_TO_ADDR
59821: LD_EXP 40
59825: PUSH
59826: FOR_TO
59827: IFFALSE 59873
// begin if flags [ normalCounter + i ] then
59829: LD_VAR 0 4
59833: PUSH
59834: LD_EXP 39
59838: PUSH
59839: LD_VAR 0 8
59843: PLUS
59844: ARRAY
59845: IFFALSE 59871
// tmp := tmp & ( 100 + i ) & ; ;
59847: LD_ADDR_VAR 0 3
59851: PUSH
59852: LD_VAR 0 3
59856: PUSH
59857: LD_INT 100
59859: PUSH
59860: LD_VAR 0 8
59864: PLUS
59865: STR
59866: PUSH
59867: LD_STRING ;
59869: STR
59870: ST_TO_ADDR
// end ;
59871: GO 59826
59873: POP
59874: POP
// if tmp then
59875: LD_VAR 0 3
59879: IFFALSE 59891
// active := tmp ;
59881: LD_ADDR_VAR 0 7
59885: PUSH
59886: LD_VAR 0 3
59890: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59891: LD_STRING getStreamItemsFromMission("
59893: PUSH
59894: LD_VAR 0 5
59898: STR
59899: PUSH
59900: LD_STRING ","
59902: STR
59903: PUSH
59904: LD_VAR 0 6
59908: STR
59909: PUSH
59910: LD_STRING ","
59912: STR
59913: PUSH
59914: LD_VAR 0 7
59918: STR
59919: PUSH
59920: LD_STRING ")
59922: STR
59923: PPUSH
59924: CALL_OW 559
// end else
59928: GO 59937
// ToLua ( getStreamItemsFromMission("","","") ) ;
59930: LD_STRING getStreamItemsFromMission("","","")
59932: PPUSH
59933: CALL_OW 559
// end ;
59937: LD_VAR 0 2
59941: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
59942: LD_EXP 38
59946: IFFALSE 59954
59948: PUSH
59949: LD_EXP 43
59953: AND
59954: IFFALSE 60078
59956: GO 59958
59958: DISABLE
59959: LD_INT 0
59961: PPUSH
59962: PPUSH
// begin enable ;
59963: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
59964: LD_ADDR_VAR 0 2
59968: PUSH
59969: LD_INT 22
59971: PUSH
59972: LD_OWVAR 2
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: PUSH
59981: LD_INT 2
59983: PUSH
59984: LD_INT 34
59986: PUSH
59987: LD_INT 7
59989: PUSH
59990: EMPTY
59991: LIST
59992: LIST
59993: PUSH
59994: LD_INT 34
59996: PUSH
59997: LD_INT 45
59999: PUSH
60000: EMPTY
60001: LIST
60002: LIST
60003: PUSH
60004: LD_INT 34
60006: PUSH
60007: LD_INT 28
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PUSH
60014: LD_INT 34
60016: PUSH
60017: LD_INT 47
60019: PUSH
60020: EMPTY
60021: LIST
60022: LIST
60023: PUSH
60024: EMPTY
60025: LIST
60026: LIST
60027: LIST
60028: LIST
60029: LIST
60030: PUSH
60031: EMPTY
60032: LIST
60033: LIST
60034: PPUSH
60035: CALL_OW 69
60039: ST_TO_ADDR
// if not tmp then
60040: LD_VAR 0 2
60044: NOT
60045: IFFALSE 60049
// exit ;
60047: GO 60078
// for i in tmp do
60049: LD_ADDR_VAR 0 1
60053: PUSH
60054: LD_VAR 0 2
60058: PUSH
60059: FOR_IN
60060: IFFALSE 60076
// begin SetLives ( i , 0 ) ;
60062: LD_VAR 0 1
60066: PPUSH
60067: LD_INT 0
60069: PPUSH
60070: CALL_OW 234
// end ;
60074: GO 60059
60076: POP
60077: POP
// end ;
60078: PPOPN 2
60080: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
60081: LD_EXP 38
60085: IFFALSE 60093
60087: PUSH
60088: LD_EXP 44
60092: AND
60093: IFFALSE 60177
60095: GO 60097
60097: DISABLE
60098: LD_INT 0
60100: PPUSH
60101: PPUSH
// begin enable ;
60102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
60103: LD_ADDR_VAR 0 2
60107: PUSH
60108: LD_INT 22
60110: PUSH
60111: LD_OWVAR 2
60115: PUSH
60116: EMPTY
60117: LIST
60118: LIST
60119: PUSH
60120: LD_INT 32
60122: PUSH
60123: LD_INT 3
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PPUSH
60134: CALL_OW 69
60138: ST_TO_ADDR
// if not tmp then
60139: LD_VAR 0 2
60143: NOT
60144: IFFALSE 60148
// exit ;
60146: GO 60177
// for i in tmp do
60148: LD_ADDR_VAR 0 1
60152: PUSH
60153: LD_VAR 0 2
60157: PUSH
60158: FOR_IN
60159: IFFALSE 60175
// begin SetLives ( i , 0 ) ;
60161: LD_VAR 0 1
60165: PPUSH
60166: LD_INT 0
60168: PPUSH
60169: CALL_OW 234
// end ;
60173: GO 60158
60175: POP
60176: POP
// end ;
60177: PPOPN 2
60179: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
60180: LD_EXP 38
60184: IFFALSE 60192
60186: PUSH
60187: LD_EXP 41
60191: AND
60192: IFFALSE 60285
60194: GO 60196
60196: DISABLE
60197: LD_INT 0
60199: PPUSH
// begin enable ;
60200: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
60201: LD_ADDR_VAR 0 1
60205: PUSH
60206: LD_INT 22
60208: PUSH
60209: LD_OWVAR 2
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: PUSH
60218: LD_INT 2
60220: PUSH
60221: LD_INT 25
60223: PUSH
60224: LD_INT 5
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: PUSH
60231: LD_INT 25
60233: PUSH
60234: LD_INT 9
60236: PUSH
60237: EMPTY
60238: LIST
60239: LIST
60240: PUSH
60241: LD_INT 25
60243: PUSH
60244: LD_INT 8
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: LIST
60255: LIST
60256: PUSH
60257: EMPTY
60258: LIST
60259: LIST
60260: PPUSH
60261: CALL_OW 69
60265: PUSH
60266: FOR_IN
60267: IFFALSE 60283
// begin SetClass ( i , 1 ) ;
60269: LD_VAR 0 1
60273: PPUSH
60274: LD_INT 1
60276: PPUSH
60277: CALL_OW 336
// end ;
60281: GO 60266
60283: POP
60284: POP
// end ;
60285: PPOPN 1
60287: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
60288: LD_EXP 38
60292: IFFALSE 60300
60294: PUSH
60295: LD_EXP 42
60299: AND
60300: IFFALSE 60312
60302: PUSH
60303: LD_OWVAR 65
60307: PUSH
60308: LD_INT 7
60310: LESS
60311: AND
60312: IFFALSE 60326
60314: GO 60316
60316: DISABLE
// begin enable ;
60317: ENABLE
// game_speed := 7 ;
60318: LD_ADDR_OWVAR 65
60322: PUSH
60323: LD_INT 7
60325: ST_TO_ADDR
// end ;
60326: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
60327: LD_EXP 38
60331: IFFALSE 60339
60333: PUSH
60334: LD_EXP 45
60338: AND
60339: IFFALSE 60541
60341: GO 60343
60343: DISABLE
60344: LD_INT 0
60346: PPUSH
60347: PPUSH
60348: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60349: LD_ADDR_VAR 0 3
60353: PUSH
60354: LD_INT 81
60356: PUSH
60357: LD_OWVAR 2
60361: PUSH
60362: EMPTY
60363: LIST
60364: LIST
60365: PUSH
60366: LD_INT 21
60368: PUSH
60369: LD_INT 1
60371: PUSH
60372: EMPTY
60373: LIST
60374: LIST
60375: PUSH
60376: EMPTY
60377: LIST
60378: LIST
60379: PPUSH
60380: CALL_OW 69
60384: ST_TO_ADDR
// if not tmp then
60385: LD_VAR 0 3
60389: NOT
60390: IFFALSE 60394
// exit ;
60392: GO 60541
// if tmp > 5 then
60394: LD_VAR 0 3
60398: PUSH
60399: LD_INT 5
60401: GREATER
60402: IFFALSE 60414
// k := 5 else
60404: LD_ADDR_VAR 0 2
60408: PUSH
60409: LD_INT 5
60411: ST_TO_ADDR
60412: GO 60424
// k := tmp ;
60414: LD_ADDR_VAR 0 2
60418: PUSH
60419: LD_VAR 0 3
60423: ST_TO_ADDR
// for i := 1 to k do
60424: LD_ADDR_VAR 0 1
60428: PUSH
60429: DOUBLE
60430: LD_INT 1
60432: DEC
60433: ST_TO_ADDR
60434: LD_VAR 0 2
60438: PUSH
60439: FOR_TO
60440: IFFALSE 60539
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
60442: LD_VAR 0 3
60446: PUSH
60447: LD_VAR 0 1
60451: ARRAY
60452: PPUSH
60453: LD_VAR 0 1
60457: PUSH
60458: LD_INT 4
60460: MOD
60461: PUSH
60462: LD_INT 1
60464: PLUS
60465: PPUSH
60466: CALL_OW 259
60470: PUSH
60471: LD_INT 10
60473: LESS
60474: IFFALSE 60537
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
60476: LD_VAR 0 3
60480: PUSH
60481: LD_VAR 0 1
60485: ARRAY
60486: PPUSH
60487: LD_VAR 0 1
60491: PUSH
60492: LD_INT 4
60494: MOD
60495: PUSH
60496: LD_INT 1
60498: PLUS
60499: PPUSH
60500: LD_VAR 0 3
60504: PUSH
60505: LD_VAR 0 1
60509: ARRAY
60510: PPUSH
60511: LD_VAR 0 1
60515: PUSH
60516: LD_INT 4
60518: MOD
60519: PUSH
60520: LD_INT 1
60522: PLUS
60523: PPUSH
60524: CALL_OW 259
60528: PUSH
60529: LD_INT 1
60531: PLUS
60532: PPUSH
60533: CALL_OW 237
60537: GO 60439
60539: POP
60540: POP
// end ;
60541: PPOPN 3
60543: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60544: LD_EXP 38
60548: IFFALSE 60556
60550: PUSH
60551: LD_EXP 46
60555: AND
60556: IFFALSE 60576
60558: GO 60560
60560: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60561: LD_INT 4
60563: PPUSH
60564: LD_OWVAR 2
60568: PPUSH
60569: LD_INT 0
60571: PPUSH
60572: CALL_OW 324
60576: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60577: LD_EXP 38
60581: IFFALSE 60589
60583: PUSH
60584: LD_EXP 75
60588: AND
60589: IFFALSE 60609
60591: GO 60593
60593: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60594: LD_INT 19
60596: PPUSH
60597: LD_OWVAR 2
60601: PPUSH
60602: LD_INT 0
60604: PPUSH
60605: CALL_OW 324
60609: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60610: LD_EXP 38
60614: IFFALSE 60622
60616: PUSH
60617: LD_EXP 47
60621: AND
60622: IFFALSE 60724
60624: GO 60626
60626: DISABLE
60627: LD_INT 0
60629: PPUSH
60630: PPUSH
// begin enable ;
60631: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60632: LD_ADDR_VAR 0 2
60636: PUSH
60637: LD_INT 22
60639: PUSH
60640: LD_OWVAR 2
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 2
60651: PUSH
60652: LD_INT 34
60654: PUSH
60655: LD_INT 11
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: LD_INT 34
60664: PUSH
60665: LD_INT 30
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PPUSH
60681: CALL_OW 69
60685: ST_TO_ADDR
// if not tmp then
60686: LD_VAR 0 2
60690: NOT
60691: IFFALSE 60695
// exit ;
60693: GO 60724
// for i in tmp do
60695: LD_ADDR_VAR 0 1
60699: PUSH
60700: LD_VAR 0 2
60704: PUSH
60705: FOR_IN
60706: IFFALSE 60722
// begin SetLives ( i , 0 ) ;
60708: LD_VAR 0 1
60712: PPUSH
60713: LD_INT 0
60715: PPUSH
60716: CALL_OW 234
// end ;
60720: GO 60705
60722: POP
60723: POP
// end ;
60724: PPOPN 2
60726: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60727: LD_EXP 38
60731: IFFALSE 60739
60733: PUSH
60734: LD_EXP 48
60738: AND
60739: IFFALSE 60759
60741: GO 60743
60743: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60744: LD_INT 32
60746: PPUSH
60747: LD_OWVAR 2
60751: PPUSH
60752: LD_INT 0
60754: PPUSH
60755: CALL_OW 324
60759: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60760: LD_EXP 38
60764: IFFALSE 60772
60766: PUSH
60767: LD_EXP 49
60771: AND
60772: IFFALSE 60955
60774: GO 60776
60776: DISABLE
60777: LD_INT 0
60779: PPUSH
60780: PPUSH
60781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60782: LD_ADDR_VAR 0 2
60786: PUSH
60787: LD_INT 22
60789: PUSH
60790: LD_OWVAR 2
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 33
60801: PUSH
60802: LD_INT 3
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: PPUSH
60813: CALL_OW 69
60817: ST_TO_ADDR
// if not tmp then
60818: LD_VAR 0 2
60822: NOT
60823: IFFALSE 60827
// exit ;
60825: GO 60955
// side := 0 ;
60827: LD_ADDR_VAR 0 3
60831: PUSH
60832: LD_INT 0
60834: ST_TO_ADDR
// for i := 1 to 8 do
60835: LD_ADDR_VAR 0 1
60839: PUSH
60840: DOUBLE
60841: LD_INT 1
60843: DEC
60844: ST_TO_ADDR
60845: LD_INT 8
60847: PUSH
60848: FOR_TO
60849: IFFALSE 60899
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60851: LD_OWVAR 2
60855: PUSH
60856: LD_VAR 0 1
60860: NONEQUAL
60861: IFFALSE 60883
60863: PUSH
60864: LD_OWVAR 2
60868: PPUSH
60869: LD_VAR 0 1
60873: PPUSH
60874: CALL_OW 81
60878: PUSH
60879: LD_INT 2
60881: EQUAL
60882: AND
60883: IFFALSE 60897
// begin side := i ;
60885: LD_ADDR_VAR 0 3
60889: PUSH
60890: LD_VAR 0 1
60894: ST_TO_ADDR
// break ;
60895: GO 60899
// end ;
60897: GO 60848
60899: POP
60900: POP
// if not side then
60901: LD_VAR 0 3
60905: NOT
60906: IFFALSE 60910
// exit ;
60908: GO 60955
// for i := 1 to tmp do
60910: LD_ADDR_VAR 0 1
60914: PUSH
60915: DOUBLE
60916: LD_INT 1
60918: DEC
60919: ST_TO_ADDR
60920: LD_VAR 0 2
60924: PUSH
60925: FOR_TO
60926: IFFALSE 60953
// if Prob ( 60 ) then
60928: LD_INT 60
60930: PPUSH
60931: CALL_OW 13
60935: IFFALSE 60951
// SetSide ( i , side ) ;
60937: LD_VAR 0 1
60941: PPUSH
60942: LD_VAR 0 3
60946: PPUSH
60947: CALL_OW 235
60951: GO 60925
60953: POP
60954: POP
// end ;
60955: PPOPN 3
60957: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
60958: LD_EXP 38
60962: IFFALSE 60970
60964: PUSH
60965: LD_EXP 51
60969: AND
60970: IFFALSE 61089
60972: GO 60974
60974: DISABLE
60975: LD_INT 0
60977: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
60978: LD_ADDR_VAR 0 1
60982: PUSH
60983: LD_INT 22
60985: PUSH
60986: LD_OWVAR 2
60990: PUSH
60991: EMPTY
60992: LIST
60993: LIST
60994: PUSH
60995: LD_INT 21
60997: PUSH
60998: LD_INT 1
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: PUSH
61005: LD_INT 3
61007: PUSH
61008: LD_INT 23
61010: PUSH
61011: LD_INT 0
61013: PUSH
61014: EMPTY
61015: LIST
61016: LIST
61017: PUSH
61018: EMPTY
61019: LIST
61020: LIST
61021: PUSH
61022: EMPTY
61023: LIST
61024: LIST
61025: LIST
61026: PPUSH
61027: CALL_OW 69
61031: PUSH
61032: FOR_IN
61033: IFFALSE 61087
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
61035: LD_VAR 0 1
61039: PPUSH
61040: CALL_OW 257
61044: PUSH
61045: LD_INT 1
61047: PUSH
61048: LD_INT 2
61050: PUSH
61051: LD_INT 3
61053: PUSH
61054: LD_INT 4
61056: PUSH
61057: EMPTY
61058: LIST
61059: LIST
61060: LIST
61061: LIST
61062: IN
61063: IFFALSE 61085
// SetClass ( un , rand ( 1 , 4 ) ) ;
61065: LD_VAR 0 1
61069: PPUSH
61070: LD_INT 1
61072: PPUSH
61073: LD_INT 4
61075: PPUSH
61076: CALL_OW 12
61080: PPUSH
61081: CALL_OW 336
61085: GO 61032
61087: POP
61088: POP
// end ;
61089: PPOPN 1
61091: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
61092: LD_EXP 38
61096: IFFALSE 61104
61098: PUSH
61099: LD_EXP 50
61103: AND
61104: IFFALSE 61183
61106: GO 61108
61108: DISABLE
61109: LD_INT 0
61111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61112: LD_ADDR_VAR 0 1
61116: PUSH
61117: LD_INT 22
61119: PUSH
61120: LD_OWVAR 2
61124: PUSH
61125: EMPTY
61126: LIST
61127: LIST
61128: PUSH
61129: LD_INT 21
61131: PUSH
61132: LD_INT 3
61134: PUSH
61135: EMPTY
61136: LIST
61137: LIST
61138: PUSH
61139: EMPTY
61140: LIST
61141: LIST
61142: PPUSH
61143: CALL_OW 69
61147: ST_TO_ADDR
// if not tmp then
61148: LD_VAR 0 1
61152: NOT
61153: IFFALSE 61157
// exit ;
61155: GO 61183
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
61157: LD_VAR 0 1
61161: PUSH
61162: LD_INT 1
61164: PPUSH
61165: LD_VAR 0 1
61169: PPUSH
61170: CALL_OW 12
61174: ARRAY
61175: PPUSH
61176: LD_INT 100
61178: PPUSH
61179: CALL_OW 234
// end ;
61183: PPOPN 1
61185: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
61186: LD_EXP 38
61190: IFFALSE 61198
61192: PUSH
61193: LD_EXP 52
61197: AND
61198: IFFALSE 61296
61200: GO 61202
61202: DISABLE
61203: LD_INT 0
61205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61206: LD_ADDR_VAR 0 1
61210: PUSH
61211: LD_INT 22
61213: PUSH
61214: LD_OWVAR 2
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: LD_INT 21
61225: PUSH
61226: LD_INT 1
61228: PUSH
61229: EMPTY
61230: LIST
61231: LIST
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PPUSH
61237: CALL_OW 69
61241: ST_TO_ADDR
// if not tmp then
61242: LD_VAR 0 1
61246: NOT
61247: IFFALSE 61251
// exit ;
61249: GO 61296
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
61251: LD_VAR 0 1
61255: PUSH
61256: LD_INT 1
61258: PPUSH
61259: LD_VAR 0 1
61263: PPUSH
61264: CALL_OW 12
61268: ARRAY
61269: PPUSH
61270: LD_INT 1
61272: PPUSH
61273: LD_INT 4
61275: PPUSH
61276: CALL_OW 12
61280: PPUSH
61281: LD_INT 3000
61283: PPUSH
61284: LD_INT 9000
61286: PPUSH
61287: CALL_OW 12
61291: PPUSH
61292: CALL_OW 492
// end ;
61296: PPOPN 1
61298: END
// every 0 0$1 trigger StreamModeActive and sDepot do
61299: LD_EXP 38
61303: IFFALSE 61311
61305: PUSH
61306: LD_EXP 53
61310: AND
61311: IFFALSE 61331
61313: GO 61315
61315: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
61316: LD_INT 1
61318: PPUSH
61319: LD_OWVAR 2
61323: PPUSH
61324: LD_INT 0
61326: PPUSH
61327: CALL_OW 324
61331: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
61332: LD_EXP 38
61336: IFFALSE 61344
61338: PUSH
61339: LD_EXP 54
61343: AND
61344: IFFALSE 61427
61346: GO 61348
61348: DISABLE
61349: LD_INT 0
61351: PPUSH
61352: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61353: LD_ADDR_VAR 0 2
61357: PUSH
61358: LD_INT 22
61360: PUSH
61361: LD_OWVAR 2
61365: PUSH
61366: EMPTY
61367: LIST
61368: LIST
61369: PUSH
61370: LD_INT 21
61372: PUSH
61373: LD_INT 3
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PPUSH
61384: CALL_OW 69
61388: ST_TO_ADDR
// if not tmp then
61389: LD_VAR 0 2
61393: NOT
61394: IFFALSE 61398
// exit ;
61396: GO 61427
// for i in tmp do
61398: LD_ADDR_VAR 0 1
61402: PUSH
61403: LD_VAR 0 2
61407: PUSH
61408: FOR_IN
61409: IFFALSE 61425
// SetBLevel ( i , 10 ) ;
61411: LD_VAR 0 1
61415: PPUSH
61416: LD_INT 10
61418: PPUSH
61419: CALL_OW 241
61423: GO 61408
61425: POP
61426: POP
// end ;
61427: PPOPN 2
61429: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
61430: LD_EXP 38
61434: IFFALSE 61442
61436: PUSH
61437: LD_EXP 55
61441: AND
61442: IFFALSE 61553
61444: GO 61446
61446: DISABLE
61447: LD_INT 0
61449: PPUSH
61450: PPUSH
61451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61452: LD_ADDR_VAR 0 3
61456: PUSH
61457: LD_INT 22
61459: PUSH
61460: LD_OWVAR 2
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: PUSH
61469: LD_INT 25
61471: PUSH
61472: LD_INT 1
61474: PUSH
61475: EMPTY
61476: LIST
61477: LIST
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PPUSH
61483: CALL_OW 69
61487: ST_TO_ADDR
// if not tmp then
61488: LD_VAR 0 3
61492: NOT
61493: IFFALSE 61497
// exit ;
61495: GO 61553
// un := tmp [ rand ( 1 , tmp ) ] ;
61497: LD_ADDR_VAR 0 2
61501: PUSH
61502: LD_VAR 0 3
61506: PUSH
61507: LD_INT 1
61509: PPUSH
61510: LD_VAR 0 3
61514: PPUSH
61515: CALL_OW 12
61519: ARRAY
61520: ST_TO_ADDR
// if Crawls ( un ) then
61521: LD_VAR 0 2
61525: PPUSH
61526: CALL_OW 318
61530: IFFALSE 61541
// ComWalk ( un ) ;
61532: LD_VAR 0 2
61536: PPUSH
61537: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61541: LD_VAR 0 2
61545: PPUSH
61546: LD_INT 5
61548: PPUSH
61549: CALL_OW 336
// end ;
61553: PPOPN 3
61555: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61556: LD_EXP 38
61560: IFFALSE 61568
61562: PUSH
61563: LD_EXP 56
61567: AND
61568: IFFALSE 61580
61570: PUSH
61571: LD_OWVAR 67
61575: PUSH
61576: LD_INT 4
61578: LESS
61579: AND
61580: IFFALSE 61599
61582: GO 61584
61584: DISABLE
// begin Difficulty := Difficulty + 1 ;
61585: LD_ADDR_OWVAR 67
61589: PUSH
61590: LD_OWVAR 67
61594: PUSH
61595: LD_INT 1
61597: PLUS
61598: ST_TO_ADDR
// end ;
61599: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61600: LD_EXP 38
61604: IFFALSE 61612
61606: PUSH
61607: LD_EXP 57
61611: AND
61612: IFFALSE 61715
61614: GO 61616
61616: DISABLE
61617: LD_INT 0
61619: PPUSH
// begin for i := 1 to 5 do
61620: LD_ADDR_VAR 0 1
61624: PUSH
61625: DOUBLE
61626: LD_INT 1
61628: DEC
61629: ST_TO_ADDR
61630: LD_INT 5
61632: PUSH
61633: FOR_TO
61634: IFFALSE 61713
// begin uc_nation := nation_nature ;
61636: LD_ADDR_OWVAR 21
61640: PUSH
61641: LD_INT 0
61643: ST_TO_ADDR
// uc_side := 0 ;
61644: LD_ADDR_OWVAR 20
61648: PUSH
61649: LD_INT 0
61651: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61652: LD_ADDR_OWVAR 29
61656: PUSH
61657: LD_INT 12
61659: PUSH
61660: LD_INT 12
61662: PUSH
61663: EMPTY
61664: LIST
61665: LIST
61666: ST_TO_ADDR
// hc_agressivity := 20 ;
61667: LD_ADDR_OWVAR 35
61671: PUSH
61672: LD_INT 20
61674: ST_TO_ADDR
// hc_class := class_tiger ;
61675: LD_ADDR_OWVAR 28
61679: PUSH
61680: LD_INT 14
61682: ST_TO_ADDR
// hc_gallery :=  ;
61683: LD_ADDR_OWVAR 33
61687: PUSH
61688: LD_STRING 
61690: ST_TO_ADDR
// hc_name :=  ;
61691: LD_ADDR_OWVAR 26
61695: PUSH
61696: LD_STRING 
61698: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61699: CALL_OW 44
61703: PPUSH
61704: LD_INT 0
61706: PPUSH
61707: CALL_OW 51
// end ;
61711: GO 61633
61713: POP
61714: POP
// end ;
61715: PPOPN 1
61717: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61718: LD_EXP 38
61722: IFFALSE 61730
61724: PUSH
61725: LD_EXP 58
61729: AND
61730: IFFALSE 61739
61732: GO 61734
61734: DISABLE
// StreamSibBomb ;
61735: CALL 61740 0 0
61739: END
// export function StreamSibBomb ; var i , x , y ; begin
61740: LD_INT 0
61742: PPUSH
61743: PPUSH
61744: PPUSH
61745: PPUSH
// result := false ;
61746: LD_ADDR_VAR 0 1
61750: PUSH
61751: LD_INT 0
61753: ST_TO_ADDR
// for i := 1 to 16 do
61754: LD_ADDR_VAR 0 2
61758: PUSH
61759: DOUBLE
61760: LD_INT 1
61762: DEC
61763: ST_TO_ADDR
61764: LD_INT 16
61766: PUSH
61767: FOR_TO
61768: IFFALSE 61967
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61770: LD_ADDR_VAR 0 3
61774: PUSH
61775: LD_INT 10
61777: PUSH
61778: LD_INT 20
61780: PUSH
61781: LD_INT 30
61783: PUSH
61784: LD_INT 40
61786: PUSH
61787: LD_INT 50
61789: PUSH
61790: LD_INT 60
61792: PUSH
61793: LD_INT 70
61795: PUSH
61796: LD_INT 80
61798: PUSH
61799: LD_INT 90
61801: PUSH
61802: LD_INT 100
61804: PUSH
61805: LD_INT 110
61807: PUSH
61808: LD_INT 120
61810: PUSH
61811: LD_INT 130
61813: PUSH
61814: LD_INT 140
61816: PUSH
61817: LD_INT 150
61819: PUSH
61820: EMPTY
61821: LIST
61822: LIST
61823: LIST
61824: LIST
61825: LIST
61826: LIST
61827: LIST
61828: LIST
61829: LIST
61830: LIST
61831: LIST
61832: LIST
61833: LIST
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 1
61839: PPUSH
61840: LD_INT 15
61842: PPUSH
61843: CALL_OW 12
61847: ARRAY
61848: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61849: LD_ADDR_VAR 0 4
61853: PUSH
61854: LD_INT 10
61856: PUSH
61857: LD_INT 20
61859: PUSH
61860: LD_INT 30
61862: PUSH
61863: LD_INT 40
61865: PUSH
61866: LD_INT 50
61868: PUSH
61869: LD_INT 60
61871: PUSH
61872: LD_INT 70
61874: PUSH
61875: LD_INT 80
61877: PUSH
61878: LD_INT 90
61880: PUSH
61881: LD_INT 100
61883: PUSH
61884: LD_INT 110
61886: PUSH
61887: LD_INT 120
61889: PUSH
61890: LD_INT 130
61892: PUSH
61893: LD_INT 140
61895: PUSH
61896: LD_INT 150
61898: PUSH
61899: EMPTY
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: LIST
61906: LIST
61907: LIST
61908: LIST
61909: LIST
61910: LIST
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: PUSH
61916: LD_INT 1
61918: PPUSH
61919: LD_INT 15
61921: PPUSH
61922: CALL_OW 12
61926: ARRAY
61927: ST_TO_ADDR
// if ValidHex ( x , y ) then
61928: LD_VAR 0 3
61932: PPUSH
61933: LD_VAR 0 4
61937: PPUSH
61938: CALL_OW 488
61942: IFFALSE 61965
// begin result := [ x , y ] ;
61944: LD_ADDR_VAR 0 1
61948: PUSH
61949: LD_VAR 0 3
61953: PUSH
61954: LD_VAR 0 4
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: ST_TO_ADDR
// break ;
61963: GO 61967
// end ; end ;
61965: GO 61767
61967: POP
61968: POP
// if result then
61969: LD_VAR 0 1
61973: IFFALSE 62033
// begin ToLua ( playSibBomb() ) ;
61975: LD_STRING playSibBomb()
61977: PPUSH
61978: CALL_OW 559
// wait ( 0 0$14 ) ;
61982: LD_INT 490
61984: PPUSH
61985: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
61989: LD_VAR 0 1
61993: PUSH
61994: LD_INT 1
61996: ARRAY
61997: PPUSH
61998: LD_VAR 0 1
62002: PUSH
62003: LD_INT 2
62005: ARRAY
62006: PPUSH
62007: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
62011: LD_VAR 0 1
62015: PUSH
62016: LD_INT 1
62018: ARRAY
62019: PPUSH
62020: LD_VAR 0 1
62024: PUSH
62025: LD_INT 2
62027: ARRAY
62028: PPUSH
62029: CALL_OW 429
// end ; end ;
62033: LD_VAR 0 1
62037: RET
// every 0 0$1 trigger StreamModeActive and sReset do
62038: LD_EXP 38
62042: IFFALSE 62050
62044: PUSH
62045: LD_EXP 60
62049: AND
62050: IFFALSE 62062
62052: GO 62054
62054: DISABLE
// YouLost (  ) ;
62055: LD_STRING 
62057: PPUSH
62058: CALL_OW 104
62062: END
// every 0 0$1 trigger StreamModeActive and sFog do
62063: LD_EXP 38
62067: IFFALSE 62075
62069: PUSH
62070: LD_EXP 59
62074: AND
62075: IFFALSE 62089
62077: GO 62079
62079: DISABLE
// FogOff ( your_side ) ;
62080: LD_OWVAR 2
62084: PPUSH
62085: CALL_OW 344
62089: END
// every 0 0$1 trigger StreamModeActive and sSun do
62090: LD_EXP 38
62094: IFFALSE 62102
62096: PUSH
62097: LD_EXP 61
62101: AND
62102: IFFALSE 62130
62104: GO 62106
62106: DISABLE
// begin solar_recharge_percent := 0 ;
62107: LD_ADDR_OWVAR 79
62111: PUSH
62112: LD_INT 0
62114: ST_TO_ADDR
// wait ( 5 5$00 ) ;
62115: LD_INT 10500
62117: PPUSH
62118: CALL_OW 67
// solar_recharge_percent := 100 ;
62122: LD_ADDR_OWVAR 79
62126: PUSH
62127: LD_INT 100
62129: ST_TO_ADDR
// end ;
62130: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
62131: LD_EXP 38
62135: IFFALSE 62143
62137: PUSH
62138: LD_EXP 62
62142: AND
62143: IFFALSE 62382
62145: GO 62147
62147: DISABLE
62148: LD_INT 0
62150: PPUSH
62151: PPUSH
62152: PPUSH
// begin tmp := [ ] ;
62153: LD_ADDR_VAR 0 3
62157: PUSH
62158: EMPTY
62159: ST_TO_ADDR
// for i := 1 to 6 do
62160: LD_ADDR_VAR 0 1
62164: PUSH
62165: DOUBLE
62166: LD_INT 1
62168: DEC
62169: ST_TO_ADDR
62170: LD_INT 6
62172: PUSH
62173: FOR_TO
62174: IFFALSE 62279
// begin uc_nation := nation_nature ;
62176: LD_ADDR_OWVAR 21
62180: PUSH
62181: LD_INT 0
62183: ST_TO_ADDR
// uc_side := 0 ;
62184: LD_ADDR_OWVAR 20
62188: PUSH
62189: LD_INT 0
62191: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62192: LD_ADDR_OWVAR 29
62196: PUSH
62197: LD_INT 12
62199: PUSH
62200: LD_INT 12
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: ST_TO_ADDR
// hc_agressivity := 20 ;
62207: LD_ADDR_OWVAR 35
62211: PUSH
62212: LD_INT 20
62214: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
62215: LD_ADDR_OWVAR 28
62219: PUSH
62220: LD_INT 17
62222: ST_TO_ADDR
// hc_gallery :=  ;
62223: LD_ADDR_OWVAR 33
62227: PUSH
62228: LD_STRING 
62230: ST_TO_ADDR
// hc_name :=  ;
62231: LD_ADDR_OWVAR 26
62235: PUSH
62236: LD_STRING 
62238: ST_TO_ADDR
// un := CreateHuman ;
62239: LD_ADDR_VAR 0 2
62243: PUSH
62244: CALL_OW 44
62248: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
62249: LD_VAR 0 2
62253: PPUSH
62254: LD_INT 1
62256: PPUSH
62257: CALL_OW 51
// tmp := tmp ^ un ;
62261: LD_ADDR_VAR 0 3
62265: PUSH
62266: LD_VAR 0 3
62270: PUSH
62271: LD_VAR 0 2
62275: ADD
62276: ST_TO_ADDR
// end ;
62277: GO 62173
62279: POP
62280: POP
// repeat wait ( 0 0$1 ) ;
62281: LD_INT 35
62283: PPUSH
62284: CALL_OW 67
// for un in tmp do
62288: LD_ADDR_VAR 0 2
62292: PUSH
62293: LD_VAR 0 3
62297: PUSH
62298: FOR_IN
62299: IFFALSE 62373
// begin if IsDead ( un ) then
62301: LD_VAR 0 2
62305: PPUSH
62306: CALL_OW 301
62310: IFFALSE 62330
// begin tmp := tmp diff un ;
62312: LD_ADDR_VAR 0 3
62316: PUSH
62317: LD_VAR 0 3
62321: PUSH
62322: LD_VAR 0 2
62326: DIFF
62327: ST_TO_ADDR
// continue ;
62328: GO 62298
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
62330: LD_VAR 0 2
62334: PPUSH
62335: LD_INT 3
62337: PUSH
62338: LD_INT 22
62340: PUSH
62341: LD_INT 0
62343: PUSH
62344: EMPTY
62345: LIST
62346: LIST
62347: PUSH
62348: EMPTY
62349: LIST
62350: LIST
62351: PPUSH
62352: CALL_OW 69
62356: PPUSH
62357: LD_VAR 0 2
62361: PPUSH
62362: CALL_OW 74
62366: PPUSH
62367: CALL_OW 115
// end ;
62371: GO 62298
62373: POP
62374: POP
// until not tmp ;
62375: LD_VAR 0 3
62379: NOT
62380: IFFALSE 62281
// end ;
62382: PPOPN 3
62384: END
// every 0 0$1 trigger StreamModeActive and sTroll do
62385: LD_EXP 38
62389: IFFALSE 62397
62391: PUSH
62392: LD_EXP 63
62396: AND
62397: IFFALSE 62451
62399: GO 62401
62401: DISABLE
// begin ToLua ( displayTroll(); ) ;
62402: LD_STRING displayTroll();
62404: PPUSH
62405: CALL_OW 559
// wait ( 3 3$00 ) ;
62409: LD_INT 6300
62411: PPUSH
62412: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62416: LD_STRING hideTroll();
62418: PPUSH
62419: CALL_OW 559
// wait ( 1 1$00 ) ;
62423: LD_INT 2100
62425: PPUSH
62426: CALL_OW 67
// ToLua ( displayTroll(); ) ;
62430: LD_STRING displayTroll();
62432: PPUSH
62433: CALL_OW 559
// wait ( 1 1$00 ) ;
62437: LD_INT 2100
62439: PPUSH
62440: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62444: LD_STRING hideTroll();
62446: PPUSH
62447: CALL_OW 559
// end ;
62451: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
62452: LD_EXP 38
62456: IFFALSE 62464
62458: PUSH
62459: LD_EXP 64
62463: AND
62464: IFFALSE 62527
62466: GO 62468
62468: DISABLE
62469: LD_INT 0
62471: PPUSH
// begin p := 0 ;
62472: LD_ADDR_VAR 0 1
62476: PUSH
62477: LD_INT 0
62479: ST_TO_ADDR
// repeat game_speed := 1 ;
62480: LD_ADDR_OWVAR 65
62484: PUSH
62485: LD_INT 1
62487: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62488: LD_INT 35
62490: PPUSH
62491: CALL_OW 67
// p := p + 1 ;
62495: LD_ADDR_VAR 0 1
62499: PUSH
62500: LD_VAR 0 1
62504: PUSH
62505: LD_INT 1
62507: PLUS
62508: ST_TO_ADDR
// until p >= 60 ;
62509: LD_VAR 0 1
62513: PUSH
62514: LD_INT 60
62516: GREATEREQUAL
62517: IFFALSE 62480
// game_speed := 4 ;
62519: LD_ADDR_OWVAR 65
62523: PUSH
62524: LD_INT 4
62526: ST_TO_ADDR
// end ;
62527: PPOPN 1
62529: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
62530: LD_EXP 38
62534: IFFALSE 62542
62536: PUSH
62537: LD_EXP 65
62541: AND
62542: IFFALSE 62688
62544: GO 62546
62546: DISABLE
62547: LD_INT 0
62549: PPUSH
62550: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62551: LD_ADDR_VAR 0 1
62555: PUSH
62556: LD_INT 22
62558: PUSH
62559: LD_OWVAR 2
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 30
62573: PUSH
62574: LD_INT 0
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 30
62583: PUSH
62584: LD_INT 1
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: EMPTY
62592: LIST
62593: LIST
62594: LIST
62595: PUSH
62596: EMPTY
62597: LIST
62598: LIST
62599: PPUSH
62600: CALL_OW 69
62604: ST_TO_ADDR
// if not depot then
62605: LD_VAR 0 1
62609: NOT
62610: IFFALSE 62614
// exit ;
62612: GO 62688
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62614: LD_ADDR_VAR 0 2
62618: PUSH
62619: LD_VAR 0 1
62623: PUSH
62624: LD_INT 1
62626: PPUSH
62627: LD_VAR 0 1
62631: PPUSH
62632: CALL_OW 12
62636: ARRAY
62637: PPUSH
62638: CALL_OW 274
62642: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62643: LD_VAR 0 2
62647: PPUSH
62648: LD_INT 1
62650: PPUSH
62651: LD_INT 0
62653: PPUSH
62654: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62658: LD_VAR 0 2
62662: PPUSH
62663: LD_INT 2
62665: PPUSH
62666: LD_INT 0
62668: PPUSH
62669: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62673: LD_VAR 0 2
62677: PPUSH
62678: LD_INT 3
62680: PPUSH
62681: LD_INT 0
62683: PPUSH
62684: CALL_OW 277
// end ;
62688: PPOPN 2
62690: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62691: LD_EXP 38
62695: IFFALSE 62703
62697: PUSH
62698: LD_EXP 66
62702: AND
62703: IFFALSE 62800
62705: GO 62707
62707: DISABLE
62708: LD_INT 0
62710: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62711: LD_ADDR_VAR 0 1
62715: PUSH
62716: LD_INT 22
62718: PUSH
62719: LD_OWVAR 2
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 21
62730: PUSH
62731: LD_INT 1
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 3
62740: PUSH
62741: LD_INT 23
62743: PUSH
62744: LD_INT 0
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: EMPTY
62752: LIST
62753: LIST
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: LIST
62759: PPUSH
62760: CALL_OW 69
62764: ST_TO_ADDR
// if not tmp then
62765: LD_VAR 0 1
62769: NOT
62770: IFFALSE 62774
// exit ;
62772: GO 62800
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62774: LD_VAR 0 1
62778: PUSH
62779: LD_INT 1
62781: PPUSH
62782: LD_VAR 0 1
62786: PPUSH
62787: CALL_OW 12
62791: ARRAY
62792: PPUSH
62793: LD_INT 200
62795: PPUSH
62796: CALL_OW 234
// end ;
62800: PPOPN 1
62802: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62803: LD_EXP 38
62807: IFFALSE 62815
62809: PUSH
62810: LD_EXP 67
62814: AND
62815: IFFALSE 62894
62817: GO 62819
62819: DISABLE
62820: LD_INT 0
62822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62823: LD_ADDR_VAR 0 1
62827: PUSH
62828: LD_INT 22
62830: PUSH
62831: LD_OWVAR 2
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: LD_INT 21
62842: PUSH
62843: LD_INT 2
62845: PUSH
62846: EMPTY
62847: LIST
62848: LIST
62849: PUSH
62850: EMPTY
62851: LIST
62852: LIST
62853: PPUSH
62854: CALL_OW 69
62858: ST_TO_ADDR
// if not tmp then
62859: LD_VAR 0 1
62863: NOT
62864: IFFALSE 62868
// exit ;
62866: GO 62894
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62868: LD_VAR 0 1
62872: PUSH
62873: LD_INT 1
62875: PPUSH
62876: LD_VAR 0 1
62880: PPUSH
62881: CALL_OW 12
62885: ARRAY
62886: PPUSH
62887: LD_INT 60
62889: PPUSH
62890: CALL_OW 234
// end ;
62894: PPOPN 1
62896: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62897: LD_EXP 38
62901: IFFALSE 62909
62903: PUSH
62904: LD_EXP 68
62908: AND
62909: IFFALSE 63008
62911: GO 62913
62913: DISABLE
62914: LD_INT 0
62916: PPUSH
62917: PPUSH
// begin enable ;
62918: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
62919: LD_ADDR_VAR 0 1
62923: PUSH
62924: LD_INT 22
62926: PUSH
62927: LD_OWVAR 2
62931: PUSH
62932: EMPTY
62933: LIST
62934: LIST
62935: PUSH
62936: LD_INT 61
62938: PUSH
62939: EMPTY
62940: LIST
62941: PUSH
62942: LD_INT 33
62944: PUSH
62945: LD_INT 2
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: PUSH
62952: EMPTY
62953: LIST
62954: LIST
62955: LIST
62956: PPUSH
62957: CALL_OW 69
62961: ST_TO_ADDR
// if not tmp then
62962: LD_VAR 0 1
62966: NOT
62967: IFFALSE 62971
// exit ;
62969: GO 63008
// for i in tmp do
62971: LD_ADDR_VAR 0 2
62975: PUSH
62976: LD_VAR 0 1
62980: PUSH
62981: FOR_IN
62982: IFFALSE 63006
// if IsControledBy ( i ) then
62984: LD_VAR 0 2
62988: PPUSH
62989: CALL_OW 312
62993: IFFALSE 63004
// ComUnlink ( i ) ;
62995: LD_VAR 0 2
62999: PPUSH
63000: CALL_OW 136
63004: GO 62981
63006: POP
63007: POP
// end ;
63008: PPOPN 2
63010: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
63011: LD_EXP 38
63015: IFFALSE 63023
63017: PUSH
63018: LD_EXP 69
63022: AND
63023: IFFALSE 63163
63025: GO 63027
63027: DISABLE
63028: LD_INT 0
63030: PPUSH
63031: PPUSH
// begin ToLua ( displayPowell(); ) ;
63032: LD_STRING displayPowell();
63034: PPUSH
63035: CALL_OW 559
// uc_side := 0 ;
63039: LD_ADDR_OWVAR 20
63043: PUSH
63044: LD_INT 0
63046: ST_TO_ADDR
// uc_nation := 2 ;
63047: LD_ADDR_OWVAR 21
63051: PUSH
63052: LD_INT 2
63054: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
63055: LD_ADDR_OWVAR 37
63059: PUSH
63060: LD_INT 14
63062: ST_TO_ADDR
// vc_engine := engine_siberite ;
63063: LD_ADDR_OWVAR 39
63067: PUSH
63068: LD_INT 3
63070: ST_TO_ADDR
// vc_control := control_apeman ;
63071: LD_ADDR_OWVAR 38
63075: PUSH
63076: LD_INT 5
63078: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
63079: LD_ADDR_OWVAR 40
63083: PUSH
63084: LD_INT 29
63086: ST_TO_ADDR
// un := CreateVehicle ;
63087: LD_ADDR_VAR 0 2
63091: PUSH
63092: CALL_OW 45
63096: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63097: LD_VAR 0 2
63101: PPUSH
63102: LD_INT 1
63104: PPUSH
63105: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63109: LD_INT 35
63111: PPUSH
63112: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63116: LD_VAR 0 2
63120: PPUSH
63121: LD_INT 22
63123: PUSH
63124: LD_OWVAR 2
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PPUSH
63133: CALL_OW 69
63137: PPUSH
63138: LD_VAR 0 2
63142: PPUSH
63143: CALL_OW 74
63147: PPUSH
63148: CALL_OW 115
// until IsDead ( un ) ;
63152: LD_VAR 0 2
63156: PPUSH
63157: CALL_OW 301
63161: IFFALSE 63109
// end ;
63163: PPOPN 2
63165: END
// every 0 0$1 trigger StreamModeActive and sStu do
63166: LD_EXP 38
63170: IFFALSE 63178
63172: PUSH
63173: LD_EXP 77
63177: AND
63178: IFFALSE 63194
63180: GO 63182
63182: DISABLE
// begin ToLua ( displayStucuk(); ) ;
63183: LD_STRING displayStucuk();
63185: PPUSH
63186: CALL_OW 559
// ResetFog ;
63190: CALL_OW 335
// end ;
63194: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
63195: LD_EXP 38
63199: IFFALSE 63207
63201: PUSH
63202: LD_EXP 70
63206: AND
63207: IFFALSE 63348
63209: GO 63211
63211: DISABLE
63212: LD_INT 0
63214: PPUSH
63215: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63216: LD_ADDR_VAR 0 2
63220: PUSH
63221: LD_INT 22
63223: PUSH
63224: LD_OWVAR 2
63228: PUSH
63229: EMPTY
63230: LIST
63231: LIST
63232: PUSH
63233: LD_INT 21
63235: PUSH
63236: LD_INT 1
63238: PUSH
63239: EMPTY
63240: LIST
63241: LIST
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PPUSH
63247: CALL_OW 69
63251: ST_TO_ADDR
// if not tmp then
63252: LD_VAR 0 2
63256: NOT
63257: IFFALSE 63261
// exit ;
63259: GO 63348
// un := tmp [ rand ( 1 , tmp ) ] ;
63261: LD_ADDR_VAR 0 1
63265: PUSH
63266: LD_VAR 0 2
63270: PUSH
63271: LD_INT 1
63273: PPUSH
63274: LD_VAR 0 2
63278: PPUSH
63279: CALL_OW 12
63283: ARRAY
63284: ST_TO_ADDR
// SetSide ( un , 0 ) ;
63285: LD_VAR 0 1
63289: PPUSH
63290: LD_INT 0
63292: PPUSH
63293: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
63297: LD_VAR 0 1
63301: PPUSH
63302: LD_OWVAR 3
63306: PUSH
63307: LD_VAR 0 1
63311: DIFF
63312: PPUSH
63313: LD_VAR 0 1
63317: PPUSH
63318: CALL_OW 74
63322: PPUSH
63323: CALL_OW 115
// wait ( 0 0$20 ) ;
63327: LD_INT 700
63329: PPUSH
63330: CALL_OW 67
// SetSide ( un , your_side ) ;
63334: LD_VAR 0 1
63338: PPUSH
63339: LD_OWVAR 2
63343: PPUSH
63344: CALL_OW 235
// end ;
63348: PPOPN 2
63350: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
63351: LD_EXP 38
63355: IFFALSE 63363
63357: PUSH
63358: LD_EXP 71
63362: AND
63363: IFFALSE 63469
63365: GO 63367
63367: DISABLE
63368: LD_INT 0
63370: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63371: LD_ADDR_VAR 0 1
63375: PUSH
63376: LD_INT 22
63378: PUSH
63379: LD_OWVAR 2
63383: PUSH
63384: EMPTY
63385: LIST
63386: LIST
63387: PUSH
63388: LD_INT 2
63390: PUSH
63391: LD_INT 30
63393: PUSH
63394: LD_INT 0
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 30
63403: PUSH
63404: LD_INT 1
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: LIST
63415: PUSH
63416: EMPTY
63417: LIST
63418: LIST
63419: PPUSH
63420: CALL_OW 69
63424: ST_TO_ADDR
// if not depot then
63425: LD_VAR 0 1
63429: NOT
63430: IFFALSE 63434
// exit ;
63432: GO 63469
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
63434: LD_VAR 0 1
63438: PUSH
63439: LD_INT 1
63441: ARRAY
63442: PPUSH
63443: CALL_OW 250
63447: PPUSH
63448: LD_VAR 0 1
63452: PUSH
63453: LD_INT 1
63455: ARRAY
63456: PPUSH
63457: CALL_OW 251
63461: PPUSH
63462: LD_INT 70
63464: PPUSH
63465: CALL_OW 495
// end ;
63469: PPOPN 1
63471: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
63472: LD_EXP 38
63476: IFFALSE 63484
63478: PUSH
63479: LD_EXP 72
63483: AND
63484: IFFALSE 63695
63486: GO 63488
63488: DISABLE
63489: LD_INT 0
63491: PPUSH
63492: PPUSH
63493: PPUSH
63494: PPUSH
63495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63496: LD_ADDR_VAR 0 5
63500: PUSH
63501: LD_INT 22
63503: PUSH
63504: LD_OWVAR 2
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 21
63515: PUSH
63516: LD_INT 1
63518: PUSH
63519: EMPTY
63520: LIST
63521: LIST
63522: PUSH
63523: EMPTY
63524: LIST
63525: LIST
63526: PPUSH
63527: CALL_OW 69
63531: ST_TO_ADDR
// if not tmp then
63532: LD_VAR 0 5
63536: NOT
63537: IFFALSE 63541
// exit ;
63539: GO 63695
// for i in tmp do
63541: LD_ADDR_VAR 0 1
63545: PUSH
63546: LD_VAR 0 5
63550: PUSH
63551: FOR_IN
63552: IFFALSE 63693
// begin d := rand ( 0 , 5 ) ;
63554: LD_ADDR_VAR 0 4
63558: PUSH
63559: LD_INT 0
63561: PPUSH
63562: LD_INT 5
63564: PPUSH
63565: CALL_OW 12
63569: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
63570: LD_ADDR_VAR 0 2
63574: PUSH
63575: LD_VAR 0 1
63579: PPUSH
63580: CALL_OW 250
63584: PPUSH
63585: LD_VAR 0 4
63589: PPUSH
63590: LD_INT 3
63592: PPUSH
63593: LD_INT 12
63595: PPUSH
63596: CALL_OW 12
63600: PPUSH
63601: CALL_OW 272
63605: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63606: LD_ADDR_VAR 0 3
63610: PUSH
63611: LD_VAR 0 1
63615: PPUSH
63616: CALL_OW 251
63620: PPUSH
63621: LD_VAR 0 4
63625: PPUSH
63626: LD_INT 3
63628: PPUSH
63629: LD_INT 12
63631: PPUSH
63632: CALL_OW 12
63636: PPUSH
63637: CALL_OW 273
63641: ST_TO_ADDR
// if ValidHex ( x , y ) then
63642: LD_VAR 0 2
63646: PPUSH
63647: LD_VAR 0 3
63651: PPUSH
63652: CALL_OW 488
63656: IFFALSE 63691
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63658: LD_VAR 0 1
63662: PPUSH
63663: LD_VAR 0 2
63667: PPUSH
63668: LD_VAR 0 3
63672: PPUSH
63673: LD_INT 3
63675: PPUSH
63676: LD_INT 6
63678: PPUSH
63679: CALL_OW 12
63683: PPUSH
63684: LD_INT 1
63686: PPUSH
63687: CALL_OW 483
// end ;
63691: GO 63551
63693: POP
63694: POP
// end ;
63695: PPOPN 5
63697: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63698: LD_EXP 38
63702: IFFALSE 63710
63704: PUSH
63705: LD_EXP 73
63709: AND
63710: IFFALSE 63804
63712: GO 63714
63714: DISABLE
63715: LD_INT 0
63717: PPUSH
63718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63719: LD_ADDR_VAR 0 2
63723: PUSH
63724: LD_INT 22
63726: PUSH
63727: LD_OWVAR 2
63731: PUSH
63732: EMPTY
63733: LIST
63734: LIST
63735: PUSH
63736: LD_INT 32
63738: PUSH
63739: LD_INT 1
63741: PUSH
63742: EMPTY
63743: LIST
63744: LIST
63745: PUSH
63746: LD_INT 21
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: LIST
63760: PPUSH
63761: CALL_OW 69
63765: ST_TO_ADDR
// if not tmp then
63766: LD_VAR 0 2
63770: NOT
63771: IFFALSE 63775
// exit ;
63773: GO 63804
// for i in tmp do
63775: LD_ADDR_VAR 0 1
63779: PUSH
63780: LD_VAR 0 2
63784: PUSH
63785: FOR_IN
63786: IFFALSE 63802
// SetFuel ( i , 0 ) ;
63788: LD_VAR 0 1
63792: PPUSH
63793: LD_INT 0
63795: PPUSH
63796: CALL_OW 240
63800: GO 63785
63802: POP
63803: POP
// end ;
63804: PPOPN 2
63806: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63807: LD_EXP 38
63811: IFFALSE 63819
63813: PUSH
63814: LD_EXP 74
63818: AND
63819: IFFALSE 63885
63821: GO 63823
63823: DISABLE
63824: LD_INT 0
63826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63827: LD_ADDR_VAR 0 1
63831: PUSH
63832: LD_INT 22
63834: PUSH
63835: LD_OWVAR 2
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 30
63846: PUSH
63847: LD_INT 29
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: EMPTY
63855: LIST
63856: LIST
63857: PPUSH
63858: CALL_OW 69
63862: ST_TO_ADDR
// if not tmp then
63863: LD_VAR 0 1
63867: NOT
63868: IFFALSE 63872
// exit ;
63870: GO 63885
// DestroyUnit ( tmp [ 1 ] ) ;
63872: LD_VAR 0 1
63876: PUSH
63877: LD_INT 1
63879: ARRAY
63880: PPUSH
63881: CALL_OW 65
// end ;
63885: PPOPN 1
63887: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63888: LD_EXP 38
63892: IFFALSE 63900
63894: PUSH
63895: LD_EXP 76
63899: AND
63900: IFFALSE 64029
63902: GO 63904
63904: DISABLE
63905: LD_INT 0
63907: PPUSH
// begin uc_side := 0 ;
63908: LD_ADDR_OWVAR 20
63912: PUSH
63913: LD_INT 0
63915: ST_TO_ADDR
// uc_nation := nation_arabian ;
63916: LD_ADDR_OWVAR 21
63920: PUSH
63921: LD_INT 2
63923: ST_TO_ADDR
// hc_gallery :=  ;
63924: LD_ADDR_OWVAR 33
63928: PUSH
63929: LD_STRING 
63931: ST_TO_ADDR
// hc_name :=  ;
63932: LD_ADDR_OWVAR 26
63936: PUSH
63937: LD_STRING 
63939: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
63940: LD_INT 1
63942: PPUSH
63943: LD_INT 11
63945: PPUSH
63946: LD_INT 10
63948: PPUSH
63949: CALL_OW 380
// un := CreateHuman ;
63953: LD_ADDR_VAR 0 1
63957: PUSH
63958: CALL_OW 44
63962: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63963: LD_VAR 0 1
63967: PPUSH
63968: LD_INT 1
63970: PPUSH
63971: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63975: LD_INT 35
63977: PPUSH
63978: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63982: LD_VAR 0 1
63986: PPUSH
63987: LD_INT 22
63989: PUSH
63990: LD_OWVAR 2
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PPUSH
63999: CALL_OW 69
64003: PPUSH
64004: LD_VAR 0 1
64008: PPUSH
64009: CALL_OW 74
64013: PPUSH
64014: CALL_OW 115
// until IsDead ( un ) ;
64018: LD_VAR 0 1
64022: PPUSH
64023: CALL_OW 301
64027: IFFALSE 63975
// end ;
64029: PPOPN 1
64031: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
64032: LD_EXP 38
64036: IFFALSE 64044
64038: PUSH
64039: LD_EXP 78
64043: AND
64044: IFFALSE 64056
64046: GO 64048
64048: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
64049: LD_STRING earthquake(getX(game), 0, 32)
64051: PPUSH
64052: CALL_OW 559
64056: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
64057: LD_EXP 38
64061: IFFALSE 64069
64063: PUSH
64064: LD_EXP 79
64068: AND
64069: IFFALSE 64160
64071: GO 64073
64073: DISABLE
64074: LD_INT 0
64076: PPUSH
// begin enable ;
64077: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
64078: LD_ADDR_VAR 0 1
64082: PUSH
64083: LD_INT 22
64085: PUSH
64086: LD_OWVAR 2
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 21
64097: PUSH
64098: LD_INT 2
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 33
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: EMPTY
64116: LIST
64117: LIST
64118: LIST
64119: PPUSH
64120: CALL_OW 69
64124: ST_TO_ADDR
// if not tmp then
64125: LD_VAR 0 1
64129: NOT
64130: IFFALSE 64134
// exit ;
64132: GO 64160
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64134: LD_VAR 0 1
64138: PUSH
64139: LD_INT 1
64141: PPUSH
64142: LD_VAR 0 1
64146: PPUSH
64147: CALL_OW 12
64151: ARRAY
64152: PPUSH
64153: LD_INT 1
64155: PPUSH
64156: CALL_OW 234
// end ;
64160: PPOPN 1
64162: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
64163: LD_EXP 38
64167: IFFALSE 64175
64169: PUSH
64170: LD_EXP 80
64174: AND
64175: IFFALSE 64316
64177: GO 64179
64179: DISABLE
64180: LD_INT 0
64182: PPUSH
64183: PPUSH
64184: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64185: LD_ADDR_VAR 0 3
64189: PUSH
64190: LD_INT 22
64192: PUSH
64193: LD_OWVAR 2
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: LD_INT 25
64204: PUSH
64205: LD_INT 1
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: PPUSH
64216: CALL_OW 69
64220: ST_TO_ADDR
// if not tmp then
64221: LD_VAR 0 3
64225: NOT
64226: IFFALSE 64230
// exit ;
64228: GO 64316
// un := tmp [ rand ( 1 , tmp ) ] ;
64230: LD_ADDR_VAR 0 2
64234: PUSH
64235: LD_VAR 0 3
64239: PUSH
64240: LD_INT 1
64242: PPUSH
64243: LD_VAR 0 3
64247: PPUSH
64248: CALL_OW 12
64252: ARRAY
64253: ST_TO_ADDR
// if Crawls ( un ) then
64254: LD_VAR 0 2
64258: PPUSH
64259: CALL_OW 318
64263: IFFALSE 64274
// ComWalk ( un ) ;
64265: LD_VAR 0 2
64269: PPUSH
64270: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
64274: LD_VAR 0 2
64278: PPUSH
64279: LD_INT 9
64281: PPUSH
64282: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
64286: LD_INT 28
64288: PPUSH
64289: LD_OWVAR 2
64293: PPUSH
64294: LD_INT 2
64296: PPUSH
64297: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
64301: LD_INT 29
64303: PPUSH
64304: LD_OWVAR 2
64308: PPUSH
64309: LD_INT 2
64311: PPUSH
64312: CALL_OW 322
// end ;
64316: PPOPN 3
64318: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
64319: LD_EXP 38
64323: IFFALSE 64331
64325: PUSH
64326: LD_EXP 81
64330: AND
64331: IFFALSE 64442
64333: GO 64335
64335: DISABLE
64336: LD_INT 0
64338: PPUSH
64339: PPUSH
64340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64341: LD_ADDR_VAR 0 3
64345: PUSH
64346: LD_INT 22
64348: PUSH
64349: LD_OWVAR 2
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 25
64360: PUSH
64361: LD_INT 1
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PPUSH
64372: CALL_OW 69
64376: ST_TO_ADDR
// if not tmp then
64377: LD_VAR 0 3
64381: NOT
64382: IFFALSE 64386
// exit ;
64384: GO 64442
// un := tmp [ rand ( 1 , tmp ) ] ;
64386: LD_ADDR_VAR 0 2
64390: PUSH
64391: LD_VAR 0 3
64395: PUSH
64396: LD_INT 1
64398: PPUSH
64399: LD_VAR 0 3
64403: PPUSH
64404: CALL_OW 12
64408: ARRAY
64409: ST_TO_ADDR
// if Crawls ( un ) then
64410: LD_VAR 0 2
64414: PPUSH
64415: CALL_OW 318
64419: IFFALSE 64430
// ComWalk ( un ) ;
64421: LD_VAR 0 2
64425: PPUSH
64426: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64430: LD_VAR 0 2
64434: PPUSH
64435: LD_INT 8
64437: PPUSH
64438: CALL_OW 336
// end ;
64442: PPOPN 3
64444: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
64445: LD_EXP 38
64449: IFFALSE 64457
64451: PUSH
64452: LD_EXP 82
64456: AND
64457: IFFALSE 64601
64459: GO 64461
64461: DISABLE
64462: LD_INT 0
64464: PPUSH
64465: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
64466: LD_ADDR_VAR 0 2
64470: PUSH
64471: LD_INT 22
64473: PUSH
64474: LD_OWVAR 2
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 21
64485: PUSH
64486: LD_INT 2
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 2
64495: PUSH
64496: LD_INT 34
64498: PUSH
64499: LD_INT 12
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: PUSH
64506: LD_INT 34
64508: PUSH
64509: LD_INT 51
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 34
64518: PUSH
64519: LD_INT 32
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: EMPTY
64527: LIST
64528: LIST
64529: LIST
64530: LIST
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: PPUSH
64537: CALL_OW 69
64541: ST_TO_ADDR
// if not tmp then
64542: LD_VAR 0 2
64546: NOT
64547: IFFALSE 64551
// exit ;
64549: GO 64601
// for i in tmp do
64551: LD_ADDR_VAR 0 1
64555: PUSH
64556: LD_VAR 0 2
64560: PUSH
64561: FOR_IN
64562: IFFALSE 64599
// if GetCargo ( i , mat_artifact ) = 0 then
64564: LD_VAR 0 1
64568: PPUSH
64569: LD_INT 4
64571: PPUSH
64572: CALL_OW 289
64576: PUSH
64577: LD_INT 0
64579: EQUAL
64580: IFFALSE 64597
// SetCargo ( i , mat_siberit , 100 ) ;
64582: LD_VAR 0 1
64586: PPUSH
64587: LD_INT 3
64589: PPUSH
64590: LD_INT 100
64592: PPUSH
64593: CALL_OW 290
64597: GO 64561
64599: POP
64600: POP
// end ;
64601: PPOPN 2
64603: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64604: LD_EXP 38
64608: IFFALSE 64616
64610: PUSH
64611: LD_EXP 83
64615: AND
64616: IFFALSE 64799
64618: GO 64620
64620: DISABLE
64621: LD_INT 0
64623: PPUSH
64624: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64625: LD_ADDR_VAR 0 2
64629: PUSH
64630: LD_INT 22
64632: PUSH
64633: LD_OWVAR 2
64637: PUSH
64638: EMPTY
64639: LIST
64640: LIST
64641: PPUSH
64642: CALL_OW 69
64646: ST_TO_ADDR
// if not tmp then
64647: LD_VAR 0 2
64651: NOT
64652: IFFALSE 64656
// exit ;
64654: GO 64799
// for i := 1 to 2 do
64656: LD_ADDR_VAR 0 1
64660: PUSH
64661: DOUBLE
64662: LD_INT 1
64664: DEC
64665: ST_TO_ADDR
64666: LD_INT 2
64668: PUSH
64669: FOR_TO
64670: IFFALSE 64797
// begin uc_side := your_side ;
64672: LD_ADDR_OWVAR 20
64676: PUSH
64677: LD_OWVAR 2
64681: ST_TO_ADDR
// uc_nation := nation_american ;
64682: LD_ADDR_OWVAR 21
64686: PUSH
64687: LD_INT 1
64689: ST_TO_ADDR
// vc_chassis := us_morphling ;
64690: LD_ADDR_OWVAR 37
64694: PUSH
64695: LD_INT 5
64697: ST_TO_ADDR
// vc_engine := engine_siberite ;
64698: LD_ADDR_OWVAR 39
64702: PUSH
64703: LD_INT 3
64705: ST_TO_ADDR
// vc_control := control_computer ;
64706: LD_ADDR_OWVAR 38
64710: PUSH
64711: LD_INT 3
64713: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64714: LD_ADDR_OWVAR 40
64718: PUSH
64719: LD_INT 10
64721: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64722: LD_VAR 0 2
64726: PUSH
64727: LD_INT 1
64729: ARRAY
64730: PPUSH
64731: CALL_OW 310
64735: NOT
64736: IFFALSE 64783
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64738: CALL_OW 45
64742: PPUSH
64743: LD_VAR 0 2
64747: PUSH
64748: LD_INT 1
64750: ARRAY
64751: PPUSH
64752: CALL_OW 250
64756: PPUSH
64757: LD_VAR 0 2
64761: PUSH
64762: LD_INT 1
64764: ARRAY
64765: PPUSH
64766: CALL_OW 251
64770: PPUSH
64771: LD_INT 12
64773: PPUSH
64774: LD_INT 1
64776: PPUSH
64777: CALL_OW 50
64781: GO 64795
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64783: CALL_OW 45
64787: PPUSH
64788: LD_INT 1
64790: PPUSH
64791: CALL_OW 51
// end ;
64795: GO 64669
64797: POP
64798: POP
// end ;
64799: PPOPN 2
64801: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64802: LD_EXP 38
64806: IFFALSE 64814
64808: PUSH
64809: LD_EXP 84
64813: AND
64814: IFFALSE 65036
64816: GO 64818
64818: DISABLE
64819: LD_INT 0
64821: PPUSH
64822: PPUSH
64823: PPUSH
64824: PPUSH
64825: PPUSH
64826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64827: LD_ADDR_VAR 0 6
64831: PUSH
64832: LD_INT 22
64834: PUSH
64835: LD_OWVAR 2
64839: PUSH
64840: EMPTY
64841: LIST
64842: LIST
64843: PUSH
64844: LD_INT 21
64846: PUSH
64847: LD_INT 1
64849: PUSH
64850: EMPTY
64851: LIST
64852: LIST
64853: PUSH
64854: LD_INT 3
64856: PUSH
64857: LD_INT 23
64859: PUSH
64860: LD_INT 0
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: EMPTY
64868: LIST
64869: LIST
64870: PUSH
64871: EMPTY
64872: LIST
64873: LIST
64874: LIST
64875: PPUSH
64876: CALL_OW 69
64880: ST_TO_ADDR
// if not tmp then
64881: LD_VAR 0 6
64885: NOT
64886: IFFALSE 64890
// exit ;
64888: GO 65036
// s1 := rand ( 1 , 4 ) ;
64890: LD_ADDR_VAR 0 2
64894: PUSH
64895: LD_INT 1
64897: PPUSH
64898: LD_INT 4
64900: PPUSH
64901: CALL_OW 12
64905: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64906: LD_ADDR_VAR 0 4
64910: PUSH
64911: LD_VAR 0 6
64915: PUSH
64916: LD_INT 1
64918: ARRAY
64919: PPUSH
64920: LD_VAR 0 2
64924: PPUSH
64925: CALL_OW 259
64929: ST_TO_ADDR
// if s1 = 1 then
64930: LD_VAR 0 2
64934: PUSH
64935: LD_INT 1
64937: EQUAL
64938: IFFALSE 64958
// s2 := rand ( 2 , 4 ) else
64940: LD_ADDR_VAR 0 3
64944: PUSH
64945: LD_INT 2
64947: PPUSH
64948: LD_INT 4
64950: PPUSH
64951: CALL_OW 12
64955: ST_TO_ADDR
64956: GO 64966
// s2 := 1 ;
64958: LD_ADDR_VAR 0 3
64962: PUSH
64963: LD_INT 1
64965: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
64966: LD_ADDR_VAR 0 5
64970: PUSH
64971: LD_VAR 0 6
64975: PUSH
64976: LD_INT 1
64978: ARRAY
64979: PPUSH
64980: LD_VAR 0 3
64984: PPUSH
64985: CALL_OW 259
64989: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
64990: LD_VAR 0 6
64994: PUSH
64995: LD_INT 1
64997: ARRAY
64998: PPUSH
64999: LD_VAR 0 2
65003: PPUSH
65004: LD_VAR 0 5
65008: PPUSH
65009: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
65013: LD_VAR 0 6
65017: PUSH
65018: LD_INT 1
65020: ARRAY
65021: PPUSH
65022: LD_VAR 0 3
65026: PPUSH
65027: LD_VAR 0 4
65031: PPUSH
65032: CALL_OW 237
// end ;
65036: PPOPN 6
65038: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
65039: LD_EXP 38
65043: IFFALSE 65051
65045: PUSH
65046: LD_EXP 85
65050: AND
65051: IFFALSE 65130
65053: GO 65055
65055: DISABLE
65056: LD_INT 0
65058: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
65059: LD_ADDR_VAR 0 1
65063: PUSH
65064: LD_INT 22
65066: PUSH
65067: LD_OWVAR 2
65071: PUSH
65072: EMPTY
65073: LIST
65074: LIST
65075: PUSH
65076: LD_INT 30
65078: PUSH
65079: LD_INT 3
65081: PUSH
65082: EMPTY
65083: LIST
65084: LIST
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PPUSH
65090: CALL_OW 69
65094: ST_TO_ADDR
// if not tmp then
65095: LD_VAR 0 1
65099: NOT
65100: IFFALSE 65104
// exit ;
65102: GO 65130
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65104: LD_VAR 0 1
65108: PUSH
65109: LD_INT 1
65111: PPUSH
65112: LD_VAR 0 1
65116: PPUSH
65117: CALL_OW 12
65121: ARRAY
65122: PPUSH
65123: LD_INT 1
65125: PPUSH
65126: CALL_OW 234
// end ;
65130: PPOPN 1
65132: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
65133: LD_EXP 38
65137: IFFALSE 65145
65139: PUSH
65140: LD_EXP 86
65144: AND
65145: IFFALSE 65257
65147: GO 65149
65149: DISABLE
65150: LD_INT 0
65152: PPUSH
65153: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
65154: LD_ADDR_VAR 0 2
65158: PUSH
65159: LD_INT 22
65161: PUSH
65162: LD_OWVAR 2
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 2
65173: PUSH
65174: LD_INT 30
65176: PUSH
65177: LD_INT 27
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 30
65186: PUSH
65187: LD_INT 26
65189: PUSH
65190: EMPTY
65191: LIST
65192: LIST
65193: PUSH
65194: LD_INT 30
65196: PUSH
65197: LD_INT 28
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: PUSH
65210: EMPTY
65211: LIST
65212: LIST
65213: PPUSH
65214: CALL_OW 69
65218: ST_TO_ADDR
// if not tmp then
65219: LD_VAR 0 2
65223: NOT
65224: IFFALSE 65228
// exit ;
65226: GO 65257
// for i in tmp do
65228: LD_ADDR_VAR 0 1
65232: PUSH
65233: LD_VAR 0 2
65237: PUSH
65238: FOR_IN
65239: IFFALSE 65255
// SetLives ( i , 1 ) ;
65241: LD_VAR 0 1
65245: PPUSH
65246: LD_INT 1
65248: PPUSH
65249: CALL_OW 234
65253: GO 65238
65255: POP
65256: POP
// end ;
65257: PPOPN 2
65259: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
65260: LD_EXP 38
65264: IFFALSE 65272
65266: PUSH
65267: LD_EXP 87
65271: AND
65272: IFFALSE 65559
65274: GO 65276
65276: DISABLE
65277: LD_INT 0
65279: PPUSH
65280: PPUSH
65281: PPUSH
// begin i := rand ( 1 , 7 ) ;
65282: LD_ADDR_VAR 0 1
65286: PUSH
65287: LD_INT 1
65289: PPUSH
65290: LD_INT 7
65292: PPUSH
65293: CALL_OW 12
65297: ST_TO_ADDR
// case i of 1 :
65298: LD_VAR 0 1
65302: PUSH
65303: LD_INT 1
65305: DOUBLE
65306: EQUAL
65307: IFTRUE 65311
65309: GO 65321
65311: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
65312: LD_STRING earthquake(getX(game), 0, 32)
65314: PPUSH
65315: CALL_OW 559
65319: GO 65559
65321: LD_INT 2
65323: DOUBLE
65324: EQUAL
65325: IFTRUE 65329
65327: GO 65343
65329: POP
// begin ToLua ( displayStucuk(); ) ;
65330: LD_STRING displayStucuk();
65332: PPUSH
65333: CALL_OW 559
// ResetFog ;
65337: CALL_OW 335
// end ; 3 :
65341: GO 65559
65343: LD_INT 3
65345: DOUBLE
65346: EQUAL
65347: IFTRUE 65351
65349: GO 65455
65351: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65352: LD_ADDR_VAR 0 2
65356: PUSH
65357: LD_INT 22
65359: PUSH
65360: LD_OWVAR 2
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 25
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PPUSH
65383: CALL_OW 69
65387: ST_TO_ADDR
// if not tmp then
65388: LD_VAR 0 2
65392: NOT
65393: IFFALSE 65397
// exit ;
65395: GO 65559
// un := tmp [ rand ( 1 , tmp ) ] ;
65397: LD_ADDR_VAR 0 3
65401: PUSH
65402: LD_VAR 0 2
65406: PUSH
65407: LD_INT 1
65409: PPUSH
65410: LD_VAR 0 2
65414: PPUSH
65415: CALL_OW 12
65419: ARRAY
65420: ST_TO_ADDR
// if Crawls ( un ) then
65421: LD_VAR 0 3
65425: PPUSH
65426: CALL_OW 318
65430: IFFALSE 65441
// ComWalk ( un ) ;
65432: LD_VAR 0 3
65436: PPUSH
65437: CALL_OW 138
// SetClass ( un , class_mortar ) ;
65441: LD_VAR 0 3
65445: PPUSH
65446: LD_INT 8
65448: PPUSH
65449: CALL_OW 336
// end ; 4 :
65453: GO 65559
65455: LD_INT 4
65457: DOUBLE
65458: EQUAL
65459: IFTRUE 65463
65461: GO 65537
65463: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65464: LD_ADDR_VAR 0 2
65468: PUSH
65469: LD_INT 22
65471: PUSH
65472: LD_OWVAR 2
65476: PUSH
65477: EMPTY
65478: LIST
65479: LIST
65480: PUSH
65481: LD_INT 30
65483: PUSH
65484: LD_INT 29
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: PPUSH
65495: CALL_OW 69
65499: ST_TO_ADDR
// if not tmp then
65500: LD_VAR 0 2
65504: NOT
65505: IFFALSE 65509
// exit ;
65507: GO 65559
// CenterNowOnUnits ( tmp [ 1 ] ) ;
65509: LD_VAR 0 2
65513: PUSH
65514: LD_INT 1
65516: ARRAY
65517: PPUSH
65518: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
65522: LD_VAR 0 2
65526: PUSH
65527: LD_INT 1
65529: ARRAY
65530: PPUSH
65531: CALL_OW 65
// end ; 5 .. 7 :
65535: GO 65559
65537: LD_INT 5
65539: DOUBLE
65540: GREATEREQUAL
65541: IFFALSE 65549
65543: LD_INT 7
65545: DOUBLE
65546: LESSEQUAL
65547: IFTRUE 65551
65549: GO 65558
65551: POP
// StreamSibBomb ; end ;
65552: CALL 61740 0 0
65556: GO 65559
65558: POP
// end ;
65559: PPOPN 3
65561: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
65562: LD_EXP 38
65566: IFFALSE 65574
65568: PUSH
65569: LD_EXP 88
65573: AND
65574: IFFALSE 65730
65576: GO 65578
65578: DISABLE
65579: LD_INT 0
65581: PPUSH
65582: PPUSH
65583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
65584: LD_ADDR_VAR 0 2
65588: PUSH
65589: LD_INT 81
65591: PUSH
65592: LD_OWVAR 2
65596: PUSH
65597: EMPTY
65598: LIST
65599: LIST
65600: PUSH
65601: LD_INT 2
65603: PUSH
65604: LD_INT 21
65606: PUSH
65607: LD_INT 1
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 21
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: LIST
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PPUSH
65633: CALL_OW 69
65637: ST_TO_ADDR
// if not tmp then
65638: LD_VAR 0 2
65642: NOT
65643: IFFALSE 65647
// exit ;
65645: GO 65730
// p := 0 ;
65647: LD_ADDR_VAR 0 3
65651: PUSH
65652: LD_INT 0
65654: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65655: LD_INT 35
65657: PPUSH
65658: CALL_OW 67
// p := p + 1 ;
65662: LD_ADDR_VAR 0 3
65666: PUSH
65667: LD_VAR 0 3
65671: PUSH
65672: LD_INT 1
65674: PLUS
65675: ST_TO_ADDR
// for i in tmp do
65676: LD_ADDR_VAR 0 1
65680: PUSH
65681: LD_VAR 0 2
65685: PUSH
65686: FOR_IN
65687: IFFALSE 65718
// if GetLives ( i ) < 1000 then
65689: LD_VAR 0 1
65693: PPUSH
65694: CALL_OW 256
65698: PUSH
65699: LD_INT 1000
65701: LESS
65702: IFFALSE 65716
// SetLives ( i , 1000 ) ;
65704: LD_VAR 0 1
65708: PPUSH
65709: LD_INT 1000
65711: PPUSH
65712: CALL_OW 234
65716: GO 65686
65718: POP
65719: POP
// until p > 20 ;
65720: LD_VAR 0 3
65724: PUSH
65725: LD_INT 20
65727: GREATER
65728: IFFALSE 65655
// end ;
65730: PPOPN 3
65732: END
// every 0 0$1 trigger StreamModeActive and sTime do
65733: LD_EXP 38
65737: IFFALSE 65745
65739: PUSH
65740: LD_EXP 89
65744: AND
65745: IFFALSE 65780
65747: GO 65749
65749: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65750: LD_INT 28
65752: PPUSH
65753: LD_OWVAR 2
65757: PPUSH
65758: LD_INT 2
65760: PPUSH
65761: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65765: LD_INT 30
65767: PPUSH
65768: LD_OWVAR 2
65772: PPUSH
65773: LD_INT 2
65775: PPUSH
65776: CALL_OW 322
// end ;
65780: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65781: LD_EXP 38
65785: IFFALSE 65793
65787: PUSH
65788: LD_EXP 90
65792: AND
65793: IFFALSE 65914
65795: GO 65797
65797: DISABLE
65798: LD_INT 0
65800: PPUSH
65801: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65802: LD_ADDR_VAR 0 2
65806: PUSH
65807: LD_INT 22
65809: PUSH
65810: LD_OWVAR 2
65814: PUSH
65815: EMPTY
65816: LIST
65817: LIST
65818: PUSH
65819: LD_INT 21
65821: PUSH
65822: LD_INT 1
65824: PUSH
65825: EMPTY
65826: LIST
65827: LIST
65828: PUSH
65829: LD_INT 3
65831: PUSH
65832: LD_INT 23
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: EMPTY
65843: LIST
65844: LIST
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: LIST
65850: PPUSH
65851: CALL_OW 69
65855: ST_TO_ADDR
// if not tmp then
65856: LD_VAR 0 2
65860: NOT
65861: IFFALSE 65865
// exit ;
65863: GO 65914
// for i in tmp do
65865: LD_ADDR_VAR 0 1
65869: PUSH
65870: LD_VAR 0 2
65874: PUSH
65875: FOR_IN
65876: IFFALSE 65912
// begin if Crawls ( i ) then
65878: LD_VAR 0 1
65882: PPUSH
65883: CALL_OW 318
65887: IFFALSE 65898
// ComWalk ( i ) ;
65889: LD_VAR 0 1
65893: PPUSH
65894: CALL_OW 138
// SetClass ( i , 2 ) ;
65898: LD_VAR 0 1
65902: PPUSH
65903: LD_INT 2
65905: PPUSH
65906: CALL_OW 336
// end ;
65910: GO 65875
65912: POP
65913: POP
// end ;
65914: PPOPN 2
65916: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
65917: LD_EXP 38
65921: IFFALSE 65929
65923: PUSH
65924: LD_EXP 91
65928: AND
65929: IFFALSE 66219
65931: GO 65933
65933: DISABLE
65934: LD_INT 0
65936: PPUSH
65937: PPUSH
65938: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
65939: LD_OWVAR 2
65943: PPUSH
65944: LD_INT 9
65946: PPUSH
65947: LD_INT 1
65949: PPUSH
65950: LD_INT 1
65952: PPUSH
65953: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
65957: LD_INT 9
65959: PPUSH
65960: LD_OWVAR 2
65964: PPUSH
65965: CALL_OW 343
// uc_side := 9 ;
65969: LD_ADDR_OWVAR 20
65973: PUSH
65974: LD_INT 9
65976: ST_TO_ADDR
// uc_nation := 2 ;
65977: LD_ADDR_OWVAR 21
65981: PUSH
65982: LD_INT 2
65984: ST_TO_ADDR
// hc_name := Dark Warrior ;
65985: LD_ADDR_OWVAR 26
65989: PUSH
65990: LD_STRING Dark Warrior
65992: ST_TO_ADDR
// hc_gallery :=  ;
65993: LD_ADDR_OWVAR 33
65997: PUSH
65998: LD_STRING 
66000: ST_TO_ADDR
// hc_noskilllimit := true ;
66001: LD_ADDR_OWVAR 76
66005: PUSH
66006: LD_INT 1
66008: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
66009: LD_ADDR_OWVAR 31
66013: PUSH
66014: LD_INT 30
66016: PUSH
66017: LD_INT 30
66019: PUSH
66020: LD_INT 30
66022: PUSH
66023: LD_INT 30
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: LIST
66031: ST_TO_ADDR
// un := CreateHuman ;
66032: LD_ADDR_VAR 0 3
66036: PUSH
66037: CALL_OW 44
66041: ST_TO_ADDR
// hc_noskilllimit := false ;
66042: LD_ADDR_OWVAR 76
66046: PUSH
66047: LD_INT 0
66049: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66050: LD_VAR 0 3
66054: PPUSH
66055: LD_INT 1
66057: PPUSH
66058: CALL_OW 51
// ToLua ( playRanger() ) ;
66062: LD_STRING playRanger()
66064: PPUSH
66065: CALL_OW 559
// p := 0 ;
66069: LD_ADDR_VAR 0 2
66073: PUSH
66074: LD_INT 0
66076: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
66077: LD_INT 35
66079: PPUSH
66080: CALL_OW 67
// p := p + 1 ;
66084: LD_ADDR_VAR 0 2
66088: PUSH
66089: LD_VAR 0 2
66093: PUSH
66094: LD_INT 1
66096: PLUS
66097: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
66098: LD_VAR 0 3
66102: PPUSH
66103: CALL_OW 256
66107: PUSH
66108: LD_INT 1000
66110: LESS
66111: IFFALSE 66125
// SetLives ( un , 1000 ) ;
66113: LD_VAR 0 3
66117: PPUSH
66118: LD_INT 1000
66120: PPUSH
66121: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
66125: LD_VAR 0 3
66129: PPUSH
66130: LD_INT 81
66132: PUSH
66133: LD_OWVAR 2
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 91
66144: PUSH
66145: LD_VAR 0 3
66149: PUSH
66150: LD_INT 30
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PPUSH
66162: CALL_OW 69
66166: PPUSH
66167: LD_VAR 0 3
66171: PPUSH
66172: CALL_OW 74
66176: PPUSH
66177: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
66181: LD_VAR 0 2
66185: PUSH
66186: LD_INT 80
66188: GREATER
66189: IFTRUE 66202
66191: PUSH
66192: LD_VAR 0 3
66196: PPUSH
66197: CALL_OW 301
66201: OR
66202: IFFALSE 66077
// if un then
66204: LD_VAR 0 3
66208: IFFALSE 66219
// RemoveUnit ( un ) ;
66210: LD_VAR 0 3
66214: PPUSH
66215: CALL_OW 64
// end ;
66219: PPOPN 3
66221: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
66222: LD_EXP 92
66226: IFFALSE 66342
66228: GO 66230
66230: DISABLE
66231: LD_INT 0
66233: PPUSH
66234: PPUSH
66235: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66236: LD_ADDR_VAR 0 2
66240: PUSH
66241: LD_INT 81
66243: PUSH
66244: LD_OWVAR 2
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 21
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: EMPTY
66264: LIST
66265: LIST
66266: PPUSH
66267: CALL_OW 69
66271: ST_TO_ADDR
// ToLua ( playComputer() ) ;
66272: LD_STRING playComputer()
66274: PPUSH
66275: CALL_OW 559
// if not tmp then
66279: LD_VAR 0 2
66283: NOT
66284: IFFALSE 66288
// exit ;
66286: GO 66342
// for i in tmp do
66288: LD_ADDR_VAR 0 1
66292: PUSH
66293: LD_VAR 0 2
66297: PUSH
66298: FOR_IN
66299: IFFALSE 66340
// for j := 1 to 4 do
66301: LD_ADDR_VAR 0 3
66305: PUSH
66306: DOUBLE
66307: LD_INT 1
66309: DEC
66310: ST_TO_ADDR
66311: LD_INT 4
66313: PUSH
66314: FOR_TO
66315: IFFALSE 66336
// SetSkill ( i , j , 10 ) ;
66317: LD_VAR 0 1
66321: PPUSH
66322: LD_VAR 0 3
66326: PPUSH
66327: LD_INT 10
66329: PPUSH
66330: CALL_OW 237
66334: GO 66314
66336: POP
66337: POP
66338: GO 66298
66340: POP
66341: POP
// end ;
66342: PPOPN 3
66344: END
// every 0 0$1 trigger s30 do var i , tmp ;
66345: LD_EXP 93
66349: IFFALSE 66418
66351: GO 66353
66353: DISABLE
66354: LD_INT 0
66356: PPUSH
66357: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66358: LD_ADDR_VAR 0 2
66362: PUSH
66363: LD_INT 22
66365: PUSH
66366: LD_OWVAR 2
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: PPUSH
66375: CALL_OW 69
66379: ST_TO_ADDR
// if not tmp then
66380: LD_VAR 0 2
66384: NOT
66385: IFFALSE 66389
// exit ;
66387: GO 66418
// for i in tmp do
66389: LD_ADDR_VAR 0 1
66393: PUSH
66394: LD_VAR 0 2
66398: PUSH
66399: FOR_IN
66400: IFFALSE 66416
// SetLives ( i , 300 ) ;
66402: LD_VAR 0 1
66406: PPUSH
66407: LD_INT 300
66409: PPUSH
66410: CALL_OW 234
66414: GO 66399
66416: POP
66417: POP
// end ;
66418: PPOPN 2
66420: END
// every 0 0$1 trigger s60 do var i , tmp ;
66421: LD_EXP 94
66425: IFFALSE 66494
66427: GO 66429
66429: DISABLE
66430: LD_INT 0
66432: PPUSH
66433: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66434: LD_ADDR_VAR 0 2
66438: PUSH
66439: LD_INT 22
66441: PUSH
66442: LD_OWVAR 2
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PPUSH
66451: CALL_OW 69
66455: ST_TO_ADDR
// if not tmp then
66456: LD_VAR 0 2
66460: NOT
66461: IFFALSE 66465
// exit ;
66463: GO 66494
// for i in tmp do
66465: LD_ADDR_VAR 0 1
66469: PUSH
66470: LD_VAR 0 2
66474: PUSH
66475: FOR_IN
66476: IFFALSE 66492
// SetLives ( i , 600 ) ;
66478: LD_VAR 0 1
66482: PPUSH
66483: LD_INT 600
66485: PPUSH
66486: CALL_OW 234
66490: GO 66475
66492: POP
66493: POP
// end ;
66494: PPOPN 2
66496: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66497: LD_INT 0
66499: PPUSH
// case cmd of 301 :
66500: LD_VAR 0 1
66504: PUSH
66505: LD_INT 301
66507: DOUBLE
66508: EQUAL
66509: IFTRUE 66513
66511: GO 66545
66513: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
66514: LD_VAR 0 6
66518: PPUSH
66519: LD_VAR 0 7
66523: PPUSH
66524: LD_VAR 0 8
66528: PPUSH
66529: LD_VAR 0 4
66533: PPUSH
66534: LD_VAR 0 5
66538: PPUSH
66539: CALL 67758 0 5
66543: GO 66666
66545: LD_INT 302
66547: DOUBLE
66548: EQUAL
66549: IFTRUE 66553
66551: GO 66590
66553: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
66554: LD_VAR 0 6
66558: PPUSH
66559: LD_VAR 0 7
66563: PPUSH
66564: LD_VAR 0 8
66568: PPUSH
66569: LD_VAR 0 9
66573: PPUSH
66574: LD_VAR 0 4
66578: PPUSH
66579: LD_VAR 0 5
66583: PPUSH
66584: CALL 67849 0 6
66588: GO 66666
66590: LD_INT 303
66592: DOUBLE
66593: EQUAL
66594: IFTRUE 66598
66596: GO 66635
66598: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
66599: LD_VAR 0 6
66603: PPUSH
66604: LD_VAR 0 7
66608: PPUSH
66609: LD_VAR 0 8
66613: PPUSH
66614: LD_VAR 0 9
66618: PPUSH
66619: LD_VAR 0 4
66623: PPUSH
66624: LD_VAR 0 5
66628: PPUSH
66629: CALL 66671 0 6
66633: GO 66666
66635: LD_INT 304
66637: DOUBLE
66638: EQUAL
66639: IFTRUE 66643
66641: GO 66665
66643: POP
// hHackTeleport ( unit , x , y ) ; end ;
66644: LD_VAR 0 2
66648: PPUSH
66649: LD_VAR 0 4
66653: PPUSH
66654: LD_VAR 0 5
66658: PPUSH
66659: CALL 68442 0 3
66663: GO 66666
66665: POP
// end ;
66666: LD_VAR 0 12
66670: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66671: LD_INT 0
66673: PPUSH
66674: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66675: LD_VAR 0 1
66679: PUSH
66680: LD_INT 1
66682: LESS
66683: IFTRUE 66695
66685: PUSH
66686: LD_VAR 0 1
66690: PUSH
66691: LD_INT 3
66693: GREATER
66694: OR
66695: IFTRUE 66713
66697: PUSH
66698: LD_VAR 0 5
66702: PPUSH
66703: LD_VAR 0 6
66707: PPUSH
66708: CALL_OW 428
66712: OR
66713: IFFALSE 66717
// exit ;
66715: GO 67445
// uc_side := your_side ;
66717: LD_ADDR_OWVAR 20
66721: PUSH
66722: LD_OWVAR 2
66726: ST_TO_ADDR
// uc_nation := nation ;
66727: LD_ADDR_OWVAR 21
66731: PUSH
66732: LD_VAR 0 1
66736: ST_TO_ADDR
// bc_level = 1 ;
66737: LD_ADDR_OWVAR 43
66741: PUSH
66742: LD_INT 1
66744: ST_TO_ADDR
// case btype of 1 :
66745: LD_VAR 0 2
66749: PUSH
66750: LD_INT 1
66752: DOUBLE
66753: EQUAL
66754: IFTRUE 66758
66756: GO 66769
66758: POP
// bc_type := b_depot ; 2 :
66759: LD_ADDR_OWVAR 42
66763: PUSH
66764: LD_INT 0
66766: ST_TO_ADDR
66767: GO 67389
66769: LD_INT 2
66771: DOUBLE
66772: EQUAL
66773: IFTRUE 66777
66775: GO 66788
66777: POP
// bc_type := b_warehouse ; 3 :
66778: LD_ADDR_OWVAR 42
66782: PUSH
66783: LD_INT 1
66785: ST_TO_ADDR
66786: GO 67389
66788: LD_INT 3
66790: DOUBLE
66791: EQUAL
66792: IFTRUE 66796
66794: GO 66807
66796: POP
// bc_type := b_lab ; 4 .. 9 :
66797: LD_ADDR_OWVAR 42
66801: PUSH
66802: LD_INT 6
66804: ST_TO_ADDR
66805: GO 67389
66807: LD_INT 4
66809: DOUBLE
66810: GREATEREQUAL
66811: IFFALSE 66819
66813: LD_INT 9
66815: DOUBLE
66816: LESSEQUAL
66817: IFTRUE 66821
66819: GO 66881
66821: POP
// begin bc_type := b_lab_half ;
66822: LD_ADDR_OWVAR 42
66826: PUSH
66827: LD_INT 7
66829: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66830: LD_ADDR_OWVAR 44
66834: PUSH
66835: LD_INT 10
66837: PUSH
66838: LD_INT 11
66840: PUSH
66841: LD_INT 12
66843: PUSH
66844: LD_INT 15
66846: PUSH
66847: LD_INT 14
66849: PUSH
66850: LD_INT 13
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: PUSH
66861: LD_VAR 0 2
66865: PUSH
66866: LD_INT 3
66868: MINUS
66869: ARRAY
66870: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66871: LD_ADDR_OWVAR 45
66875: PUSH
66876: LD_INT 9
66878: ST_TO_ADDR
// end ; 10 .. 13 :
66879: GO 67389
66881: LD_INT 10
66883: DOUBLE
66884: GREATEREQUAL
66885: IFFALSE 66893
66887: LD_INT 13
66889: DOUBLE
66890: LESSEQUAL
66891: IFTRUE 66895
66893: GO 66972
66895: POP
// begin bc_type := b_lab_full ;
66896: LD_ADDR_OWVAR 42
66900: PUSH
66901: LD_INT 8
66903: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66904: LD_ADDR_OWVAR 44
66908: PUSH
66909: LD_INT 10
66911: PUSH
66912: LD_INT 12
66914: PUSH
66915: LD_INT 14
66917: PUSH
66918: LD_INT 13
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: LIST
66925: LIST
66926: PUSH
66927: LD_VAR 0 2
66931: PUSH
66932: LD_INT 9
66934: MINUS
66935: ARRAY
66936: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
66937: LD_ADDR_OWVAR 45
66941: PUSH
66942: LD_INT 11
66944: PUSH
66945: LD_INT 15
66947: PUSH
66948: LD_INT 12
66950: PUSH
66951: LD_INT 15
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: LIST
66958: LIST
66959: PUSH
66960: LD_VAR 0 2
66964: PUSH
66965: LD_INT 9
66967: MINUS
66968: ARRAY
66969: ST_TO_ADDR
// end ; 14 :
66970: GO 67389
66972: LD_INT 14
66974: DOUBLE
66975: EQUAL
66976: IFTRUE 66980
66978: GO 66991
66980: POP
// bc_type := b_workshop ; 15 :
66981: LD_ADDR_OWVAR 42
66985: PUSH
66986: LD_INT 2
66988: ST_TO_ADDR
66989: GO 67389
66991: LD_INT 15
66993: DOUBLE
66994: EQUAL
66995: IFTRUE 66999
66997: GO 67010
66999: POP
// bc_type := b_factory ; 16 :
67000: LD_ADDR_OWVAR 42
67004: PUSH
67005: LD_INT 3
67007: ST_TO_ADDR
67008: GO 67389
67010: LD_INT 16
67012: DOUBLE
67013: EQUAL
67014: IFTRUE 67018
67016: GO 67029
67018: POP
// bc_type := b_ext_gun ; 17 :
67019: LD_ADDR_OWVAR 42
67023: PUSH
67024: LD_INT 17
67026: ST_TO_ADDR
67027: GO 67389
67029: LD_INT 17
67031: DOUBLE
67032: EQUAL
67033: IFTRUE 67037
67035: GO 67065
67037: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
67038: LD_ADDR_OWVAR 42
67042: PUSH
67043: LD_INT 19
67045: PUSH
67046: LD_INT 23
67048: PUSH
67049: LD_INT 19
67051: PUSH
67052: EMPTY
67053: LIST
67054: LIST
67055: LIST
67056: PUSH
67057: LD_VAR 0 1
67061: ARRAY
67062: ST_TO_ADDR
67063: GO 67389
67065: LD_INT 18
67067: DOUBLE
67068: EQUAL
67069: IFTRUE 67073
67071: GO 67084
67073: POP
// bc_type := b_ext_radar ; 19 :
67074: LD_ADDR_OWVAR 42
67078: PUSH
67079: LD_INT 20
67081: ST_TO_ADDR
67082: GO 67389
67084: LD_INT 19
67086: DOUBLE
67087: EQUAL
67088: IFTRUE 67092
67090: GO 67103
67092: POP
// bc_type := b_ext_radio ; 20 :
67093: LD_ADDR_OWVAR 42
67097: PUSH
67098: LD_INT 22
67100: ST_TO_ADDR
67101: GO 67389
67103: LD_INT 20
67105: DOUBLE
67106: EQUAL
67107: IFTRUE 67111
67109: GO 67122
67111: POP
// bc_type := b_ext_siberium ; 21 :
67112: LD_ADDR_OWVAR 42
67116: PUSH
67117: LD_INT 21
67119: ST_TO_ADDR
67120: GO 67389
67122: LD_INT 21
67124: DOUBLE
67125: EQUAL
67126: IFTRUE 67130
67128: GO 67141
67130: POP
// bc_type := b_ext_computer ; 22 :
67131: LD_ADDR_OWVAR 42
67135: PUSH
67136: LD_INT 24
67138: ST_TO_ADDR
67139: GO 67389
67141: LD_INT 22
67143: DOUBLE
67144: EQUAL
67145: IFTRUE 67149
67147: GO 67160
67149: POP
// bc_type := b_ext_track ; 23 :
67150: LD_ADDR_OWVAR 42
67154: PUSH
67155: LD_INT 16
67157: ST_TO_ADDR
67158: GO 67389
67160: LD_INT 23
67162: DOUBLE
67163: EQUAL
67164: IFTRUE 67168
67166: GO 67179
67168: POP
// bc_type := b_ext_laser ; 24 :
67169: LD_ADDR_OWVAR 42
67173: PUSH
67174: LD_INT 25
67176: ST_TO_ADDR
67177: GO 67389
67179: LD_INT 24
67181: DOUBLE
67182: EQUAL
67183: IFTRUE 67187
67185: GO 67198
67187: POP
// bc_type := b_control_tower ; 25 :
67188: LD_ADDR_OWVAR 42
67192: PUSH
67193: LD_INT 36
67195: ST_TO_ADDR
67196: GO 67389
67198: LD_INT 25
67200: DOUBLE
67201: EQUAL
67202: IFTRUE 67206
67204: GO 67217
67206: POP
// bc_type := b_breastwork ; 26 :
67207: LD_ADDR_OWVAR 42
67211: PUSH
67212: LD_INT 31
67214: ST_TO_ADDR
67215: GO 67389
67217: LD_INT 26
67219: DOUBLE
67220: EQUAL
67221: IFTRUE 67225
67223: GO 67236
67225: POP
// bc_type := b_bunker ; 27 :
67226: LD_ADDR_OWVAR 42
67230: PUSH
67231: LD_INT 32
67233: ST_TO_ADDR
67234: GO 67389
67236: LD_INT 27
67238: DOUBLE
67239: EQUAL
67240: IFTRUE 67244
67242: GO 67255
67244: POP
// bc_type := b_turret ; 28 :
67245: LD_ADDR_OWVAR 42
67249: PUSH
67250: LD_INT 33
67252: ST_TO_ADDR
67253: GO 67389
67255: LD_INT 28
67257: DOUBLE
67258: EQUAL
67259: IFTRUE 67263
67261: GO 67274
67263: POP
// bc_type := b_armoury ; 29 :
67264: LD_ADDR_OWVAR 42
67268: PUSH
67269: LD_INT 4
67271: ST_TO_ADDR
67272: GO 67389
67274: LD_INT 29
67276: DOUBLE
67277: EQUAL
67278: IFTRUE 67282
67280: GO 67293
67282: POP
// bc_type := b_barracks ; 30 :
67283: LD_ADDR_OWVAR 42
67287: PUSH
67288: LD_INT 5
67290: ST_TO_ADDR
67291: GO 67389
67293: LD_INT 30
67295: DOUBLE
67296: EQUAL
67297: IFTRUE 67301
67299: GO 67312
67301: POP
// bc_type := b_solar_power ; 31 :
67302: LD_ADDR_OWVAR 42
67306: PUSH
67307: LD_INT 27
67309: ST_TO_ADDR
67310: GO 67389
67312: LD_INT 31
67314: DOUBLE
67315: EQUAL
67316: IFTRUE 67320
67318: GO 67331
67320: POP
// bc_type := b_oil_power ; 32 :
67321: LD_ADDR_OWVAR 42
67325: PUSH
67326: LD_INT 26
67328: ST_TO_ADDR
67329: GO 67389
67331: LD_INT 32
67333: DOUBLE
67334: EQUAL
67335: IFTRUE 67339
67337: GO 67350
67339: POP
// bc_type := b_siberite_power ; 33 :
67340: LD_ADDR_OWVAR 42
67344: PUSH
67345: LD_INT 28
67347: ST_TO_ADDR
67348: GO 67389
67350: LD_INT 33
67352: DOUBLE
67353: EQUAL
67354: IFTRUE 67358
67356: GO 67369
67358: POP
// bc_type := b_oil_mine ; 34 :
67359: LD_ADDR_OWVAR 42
67363: PUSH
67364: LD_INT 29
67366: ST_TO_ADDR
67367: GO 67389
67369: LD_INT 34
67371: DOUBLE
67372: EQUAL
67373: IFTRUE 67377
67375: GO 67388
67377: POP
// bc_type := b_siberite_mine ; end ;
67378: LD_ADDR_OWVAR 42
67382: PUSH
67383: LD_INT 30
67385: ST_TO_ADDR
67386: GO 67389
67388: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
67389: LD_ADDR_VAR 0 8
67393: PUSH
67394: LD_VAR 0 5
67398: PPUSH
67399: LD_VAR 0 6
67403: PPUSH
67404: LD_VAR 0 3
67408: PPUSH
67409: CALL_OW 47
67413: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
67414: LD_OWVAR 42
67418: PUSH
67419: LD_INT 32
67421: PUSH
67422: LD_INT 33
67424: PUSH
67425: EMPTY
67426: LIST
67427: LIST
67428: IN
67429: IFFALSE 67445
// PlaceWeaponTurret ( b , weapon ) ;
67431: LD_VAR 0 8
67435: PPUSH
67436: LD_VAR 0 4
67440: PPUSH
67441: CALL_OW 431
// end ;
67445: LD_VAR 0 7
67449: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
67450: LD_INT 0
67452: PPUSH
67453: PPUSH
67454: PPUSH
67455: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67456: LD_ADDR_VAR 0 4
67460: PUSH
67461: LD_INT 22
67463: PUSH
67464: LD_OWVAR 2
67468: PUSH
67469: EMPTY
67470: LIST
67471: LIST
67472: PUSH
67473: LD_INT 2
67475: PUSH
67476: LD_INT 30
67478: PUSH
67479: LD_INT 0
67481: PUSH
67482: EMPTY
67483: LIST
67484: LIST
67485: PUSH
67486: LD_INT 30
67488: PUSH
67489: LD_INT 1
67491: PUSH
67492: EMPTY
67493: LIST
67494: LIST
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PPUSH
67505: CALL_OW 69
67509: ST_TO_ADDR
// if not tmp then
67510: LD_VAR 0 4
67514: NOT
67515: IFFALSE 67519
// exit ;
67517: GO 67578
// for i in tmp do
67519: LD_ADDR_VAR 0 2
67523: PUSH
67524: LD_VAR 0 4
67528: PUSH
67529: FOR_IN
67530: IFFALSE 67576
// for j = 1 to 3 do
67532: LD_ADDR_VAR 0 3
67536: PUSH
67537: DOUBLE
67538: LD_INT 1
67540: DEC
67541: ST_TO_ADDR
67542: LD_INT 3
67544: PUSH
67545: FOR_TO
67546: IFFALSE 67572
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
67548: LD_VAR 0 2
67552: PPUSH
67553: CALL_OW 274
67557: PPUSH
67558: LD_VAR 0 3
67562: PPUSH
67563: LD_INT 99999
67565: PPUSH
67566: CALL_OW 277
67570: GO 67545
67572: POP
67573: POP
67574: GO 67529
67576: POP
67577: POP
// end ;
67578: LD_VAR 0 1
67582: RET
// export function hHackSetLevel10 ; var i , j ; begin
67583: LD_INT 0
67585: PPUSH
67586: PPUSH
67587: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67588: LD_ADDR_VAR 0 2
67592: PUSH
67593: LD_INT 21
67595: PUSH
67596: LD_INT 1
67598: PUSH
67599: EMPTY
67600: LIST
67601: LIST
67602: PPUSH
67603: CALL_OW 69
67607: PUSH
67608: FOR_IN
67609: IFFALSE 67661
// if IsSelected ( i ) then
67611: LD_VAR 0 2
67615: PPUSH
67616: CALL_OW 306
67620: IFFALSE 67659
// begin for j := 1 to 4 do
67622: LD_ADDR_VAR 0 3
67626: PUSH
67627: DOUBLE
67628: LD_INT 1
67630: DEC
67631: ST_TO_ADDR
67632: LD_INT 4
67634: PUSH
67635: FOR_TO
67636: IFFALSE 67657
// SetSkill ( i , j , 10 ) ;
67638: LD_VAR 0 2
67642: PPUSH
67643: LD_VAR 0 3
67647: PPUSH
67648: LD_INT 10
67650: PPUSH
67651: CALL_OW 237
67655: GO 67635
67657: POP
67658: POP
// end ;
67659: GO 67608
67661: POP
67662: POP
// end ;
67663: LD_VAR 0 1
67667: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67668: LD_INT 0
67670: PPUSH
67671: PPUSH
67672: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67673: LD_ADDR_VAR 0 2
67677: PUSH
67678: LD_INT 22
67680: PUSH
67681: LD_OWVAR 2
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 21
67692: PUSH
67693: LD_INT 1
67695: PUSH
67696: EMPTY
67697: LIST
67698: LIST
67699: PUSH
67700: EMPTY
67701: LIST
67702: LIST
67703: PPUSH
67704: CALL_OW 69
67708: PUSH
67709: FOR_IN
67710: IFFALSE 67751
// begin for j := 1 to 4 do
67712: LD_ADDR_VAR 0 3
67716: PUSH
67717: DOUBLE
67718: LD_INT 1
67720: DEC
67721: ST_TO_ADDR
67722: LD_INT 4
67724: PUSH
67725: FOR_TO
67726: IFFALSE 67747
// SetSkill ( i , j , 10 ) ;
67728: LD_VAR 0 2
67732: PPUSH
67733: LD_VAR 0 3
67737: PPUSH
67738: LD_INT 10
67740: PPUSH
67741: CALL_OW 237
67745: GO 67725
67747: POP
67748: POP
// end ;
67749: GO 67709
67751: POP
67752: POP
// end ;
67753: LD_VAR 0 1
67757: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67758: LD_INT 0
67760: PPUSH
// uc_side := your_side ;
67761: LD_ADDR_OWVAR 20
67765: PUSH
67766: LD_OWVAR 2
67770: ST_TO_ADDR
// uc_nation := nation ;
67771: LD_ADDR_OWVAR 21
67775: PUSH
67776: LD_VAR 0 1
67780: ST_TO_ADDR
// InitHc ;
67781: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67785: LD_INT 0
67787: PPUSH
67788: LD_VAR 0 2
67792: PPUSH
67793: LD_VAR 0 3
67797: PPUSH
67798: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67802: LD_VAR 0 4
67806: PPUSH
67807: LD_VAR 0 5
67811: PPUSH
67812: CALL_OW 428
67816: PUSH
67817: LD_INT 0
67819: EQUAL
67820: IFFALSE 67844
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67822: CALL_OW 44
67826: PPUSH
67827: LD_VAR 0 4
67831: PPUSH
67832: LD_VAR 0 5
67836: PPUSH
67837: LD_INT 1
67839: PPUSH
67840: CALL_OW 48
// end ;
67844: LD_VAR 0 6
67848: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67849: LD_INT 0
67851: PPUSH
67852: PPUSH
// uc_side := your_side ;
67853: LD_ADDR_OWVAR 20
67857: PUSH
67858: LD_OWVAR 2
67862: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67863: LD_VAR 0 1
67867: PUSH
67868: LD_INT 1
67870: PUSH
67871: LD_INT 2
67873: PUSH
67874: LD_INT 3
67876: PUSH
67877: LD_INT 4
67879: PUSH
67880: LD_INT 5
67882: PUSH
67883: EMPTY
67884: LIST
67885: LIST
67886: LIST
67887: LIST
67888: LIST
67889: IN
67890: IFFALSE 67902
// uc_nation := nation_american else
67892: LD_ADDR_OWVAR 21
67896: PUSH
67897: LD_INT 1
67899: ST_TO_ADDR
67900: GO 67945
// if chassis in [ 11 , 12 , 13 , 14 ] then
67902: LD_VAR 0 1
67906: PUSH
67907: LD_INT 11
67909: PUSH
67910: LD_INT 12
67912: PUSH
67913: LD_INT 13
67915: PUSH
67916: LD_INT 14
67918: PUSH
67919: EMPTY
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: IN
67925: IFFALSE 67937
// uc_nation := nation_arabian else
67927: LD_ADDR_OWVAR 21
67931: PUSH
67932: LD_INT 2
67934: ST_TO_ADDR
67935: GO 67945
// uc_nation := nation_russian ;
67937: LD_ADDR_OWVAR 21
67941: PUSH
67942: LD_INT 3
67944: ST_TO_ADDR
// vc_chassis := chassis ;
67945: LD_ADDR_OWVAR 37
67949: PUSH
67950: LD_VAR 0 1
67954: ST_TO_ADDR
// vc_engine := engine ;
67955: LD_ADDR_OWVAR 39
67959: PUSH
67960: LD_VAR 0 2
67964: ST_TO_ADDR
// vc_control := control ;
67965: LD_ADDR_OWVAR 38
67969: PUSH
67970: LD_VAR 0 3
67974: ST_TO_ADDR
// vc_weapon := weapon ;
67975: LD_ADDR_OWVAR 40
67979: PUSH
67980: LD_VAR 0 4
67984: ST_TO_ADDR
// un := CreateVehicle ;
67985: LD_ADDR_VAR 0 8
67989: PUSH
67990: CALL_OW 45
67994: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
67995: LD_VAR 0 8
67999: PPUSH
68000: LD_INT 0
68002: PPUSH
68003: LD_INT 5
68005: PPUSH
68006: CALL_OW 12
68010: PPUSH
68011: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
68015: LD_VAR 0 8
68019: PPUSH
68020: LD_VAR 0 5
68024: PPUSH
68025: LD_VAR 0 6
68029: PPUSH
68030: LD_INT 1
68032: PPUSH
68033: CALL_OW 48
// end ;
68037: LD_VAR 0 7
68041: RET
// export hInvincible ; every 1 do
68042: GO 68044
68044: DISABLE
// hInvincible := [ ] ;
68045: LD_ADDR_EXP 95
68049: PUSH
68050: EMPTY
68051: ST_TO_ADDR
68052: END
// every 10 do var i ;
68053: GO 68055
68055: DISABLE
68056: LD_INT 0
68058: PPUSH
// begin enable ;
68059: ENABLE
// if not hInvincible then
68060: LD_EXP 95
68064: NOT
68065: IFFALSE 68069
// exit ;
68067: GO 68113
// for i in hInvincible do
68069: LD_ADDR_VAR 0 1
68073: PUSH
68074: LD_EXP 95
68078: PUSH
68079: FOR_IN
68080: IFFALSE 68111
// if GetLives ( i ) < 1000 then
68082: LD_VAR 0 1
68086: PPUSH
68087: CALL_OW 256
68091: PUSH
68092: LD_INT 1000
68094: LESS
68095: IFFALSE 68109
// SetLives ( i , 1000 ) ;
68097: LD_VAR 0 1
68101: PPUSH
68102: LD_INT 1000
68104: PPUSH
68105: CALL_OW 234
68109: GO 68079
68111: POP
68112: POP
// end ;
68113: PPOPN 1
68115: END
// export function hHackInvincible ; var i ; begin
68116: LD_INT 0
68118: PPUSH
68119: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
68120: LD_ADDR_VAR 0 2
68124: PUSH
68125: LD_INT 2
68127: PUSH
68128: LD_INT 21
68130: PUSH
68131: LD_INT 1
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 21
68140: PUSH
68141: LD_INT 2
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: LIST
68152: PPUSH
68153: CALL_OW 69
68157: PUSH
68158: FOR_IN
68159: IFFALSE 68220
// if IsSelected ( i ) then
68161: LD_VAR 0 2
68165: PPUSH
68166: CALL_OW 306
68170: IFFALSE 68218
// begin if i in hInvincible then
68172: LD_VAR 0 2
68176: PUSH
68177: LD_EXP 95
68181: IN
68182: IFFALSE 68202
// hInvincible := hInvincible diff i else
68184: LD_ADDR_EXP 95
68188: PUSH
68189: LD_EXP 95
68193: PUSH
68194: LD_VAR 0 2
68198: DIFF
68199: ST_TO_ADDR
68200: GO 68218
// hInvincible := hInvincible union i ;
68202: LD_ADDR_EXP 95
68206: PUSH
68207: LD_EXP 95
68211: PUSH
68212: LD_VAR 0 2
68216: UNION
68217: ST_TO_ADDR
// end ;
68218: GO 68158
68220: POP
68221: POP
// end ;
68222: LD_VAR 0 1
68226: RET
// export function hHackInvisible ; var i , j ; begin
68227: LD_INT 0
68229: PPUSH
68230: PPUSH
68231: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
68232: LD_ADDR_VAR 0 2
68236: PUSH
68237: LD_INT 21
68239: PUSH
68240: LD_INT 1
68242: PUSH
68243: EMPTY
68244: LIST
68245: LIST
68246: PPUSH
68247: CALL_OW 69
68251: PUSH
68252: FOR_IN
68253: IFFALSE 68277
// if IsSelected ( i ) then
68255: LD_VAR 0 2
68259: PPUSH
68260: CALL_OW 306
68264: IFFALSE 68275
// ComForceInvisible ( i ) ;
68266: LD_VAR 0 2
68270: PPUSH
68271: CALL_OW 496
68275: GO 68252
68277: POP
68278: POP
// end ;
68279: LD_VAR 0 1
68283: RET
// export function hHackChangeYourSide ; begin
68284: LD_INT 0
68286: PPUSH
// if your_side = 8 then
68287: LD_OWVAR 2
68291: PUSH
68292: LD_INT 8
68294: EQUAL
68295: IFFALSE 68307
// your_side := 0 else
68297: LD_ADDR_OWVAR 2
68301: PUSH
68302: LD_INT 0
68304: ST_TO_ADDR
68305: GO 68321
// your_side := your_side + 1 ;
68307: LD_ADDR_OWVAR 2
68311: PUSH
68312: LD_OWVAR 2
68316: PUSH
68317: LD_INT 1
68319: PLUS
68320: ST_TO_ADDR
// end ;
68321: LD_VAR 0 1
68325: RET
// export function hHackChangeUnitSide ; var i , j ; begin
68326: LD_INT 0
68328: PPUSH
68329: PPUSH
68330: PPUSH
// for i in all_units do
68331: LD_ADDR_VAR 0 2
68335: PUSH
68336: LD_OWVAR 3
68340: PUSH
68341: FOR_IN
68342: IFFALSE 68420
// if IsSelected ( i ) then
68344: LD_VAR 0 2
68348: PPUSH
68349: CALL_OW 306
68353: IFFALSE 68418
// begin j := GetSide ( i ) ;
68355: LD_ADDR_VAR 0 3
68359: PUSH
68360: LD_VAR 0 2
68364: PPUSH
68365: CALL_OW 255
68369: ST_TO_ADDR
// if j = 8 then
68370: LD_VAR 0 3
68374: PUSH
68375: LD_INT 8
68377: EQUAL
68378: IFFALSE 68390
// j := 0 else
68380: LD_ADDR_VAR 0 3
68384: PUSH
68385: LD_INT 0
68387: ST_TO_ADDR
68388: GO 68404
// j := j + 1 ;
68390: LD_ADDR_VAR 0 3
68394: PUSH
68395: LD_VAR 0 3
68399: PUSH
68400: LD_INT 1
68402: PLUS
68403: ST_TO_ADDR
// SetSide ( i , j ) ;
68404: LD_VAR 0 2
68408: PPUSH
68409: LD_VAR 0 3
68413: PPUSH
68414: CALL_OW 235
// end ;
68418: GO 68341
68420: POP
68421: POP
// end ;
68422: LD_VAR 0 1
68426: RET
// export function hHackFog ; begin
68427: LD_INT 0
68429: PPUSH
// FogOff ( true ) ;
68430: LD_INT 1
68432: PPUSH
68433: CALL_OW 344
// end ;
68437: LD_VAR 0 1
68441: RET
// export function hHackTeleport ( unit , x , y ) ; begin
68442: LD_INT 0
68444: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
68445: LD_VAR 0 1
68449: PPUSH
68450: LD_VAR 0 2
68454: PPUSH
68455: LD_VAR 0 3
68459: PPUSH
68460: LD_INT 1
68462: PPUSH
68463: LD_INT 1
68465: PPUSH
68466: CALL_OW 483
// CenterOnXY ( x , y ) ;
68470: LD_VAR 0 2
68474: PPUSH
68475: LD_VAR 0 3
68479: PPUSH
68480: CALL_OW 84
// end ;
68484: LD_VAR 0 4
68488: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
68489: LD_INT 0
68491: PPUSH
68492: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
68493: LD_VAR 0 1
68497: NOT
68498: IFTRUE 68517
68500: PUSH
68501: LD_VAR 0 2
68505: PPUSH
68506: LD_VAR 0 3
68510: PPUSH
68511: CALL_OW 488
68515: NOT
68516: OR
68517: IFTRUE 68552
68519: PUSH
68520: LD_VAR 0 1
68524: PPUSH
68525: CALL_OW 266
68529: PUSH
68530: LD_INT 3
68532: NONEQUAL
68533: IFFALSE 68551
68535: PUSH
68536: LD_VAR 0 1
68540: PPUSH
68541: CALL_OW 247
68545: PUSH
68546: LD_INT 1
68548: EQUAL
68549: NOT
68550: AND
68551: OR
68552: IFFALSE 68556
// exit ;
68554: GO 68838
// if GetType ( factory ) = unit_human then
68556: LD_VAR 0 1
68560: PPUSH
68561: CALL_OW 247
68565: PUSH
68566: LD_INT 1
68568: EQUAL
68569: IFFALSE 68586
// factory := IsInUnit ( factory ) ;
68571: LD_ADDR_VAR 0 1
68575: PUSH
68576: LD_VAR 0 1
68580: PPUSH
68581: CALL_OW 310
68585: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68586: LD_VAR 0 1
68590: PPUSH
68591: CALL_OW 266
68595: PUSH
68596: LD_INT 3
68598: NONEQUAL
68599: IFFALSE 68603
// exit ;
68601: GO 68838
// for i := 1 to Count ( factoryWaypoints ) do
68603: LD_ADDR_VAR 0 5
68607: PUSH
68608: DOUBLE
68609: LD_INT 1
68611: DEC
68612: ST_TO_ADDR
68613: LD_EXP 96
68617: PPUSH
68618: CALL 12528 0 1
68622: PUSH
68623: FOR_TO
68624: IFFALSE 68786
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
68626: LD_VAR 0 2
68630: PPUSH
68631: LD_VAR 0 3
68635: PPUSH
68636: CALL_OW 428
68640: PUSH
68641: LD_EXP 96
68645: PUSH
68646: LD_VAR 0 5
68650: ARRAY
68651: PUSH
68652: LD_INT 2
68654: ARRAY
68655: EQUAL
68656: IFFALSE 68688
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68658: LD_ADDR_EXP 96
68662: PUSH
68663: LD_EXP 96
68667: PPUSH
68668: LD_VAR 0 5
68672: PPUSH
68673: CALL_OW 3
68677: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68678: CALL 68843 0 0
// exit ;
68682: POP
68683: POP
68684: GO 68838
// end else
68686: GO 68784
// if factory = factoryWaypoints [ i ] [ 2 ] then
68688: LD_VAR 0 1
68692: PUSH
68693: LD_EXP 96
68697: PUSH
68698: LD_VAR 0 5
68702: ARRAY
68703: PUSH
68704: LD_INT 2
68706: ARRAY
68707: EQUAL
68708: IFFALSE 68784
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68710: LD_ADDR_EXP 96
68714: PUSH
68715: LD_EXP 96
68719: PPUSH
68720: LD_VAR 0 5
68724: PPUSH
68725: CALL_OW 3
68729: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68730: LD_ADDR_EXP 96
68734: PUSH
68735: LD_EXP 96
68739: PPUSH
68740: LD_VAR 0 1
68744: PPUSH
68745: CALL_OW 255
68749: PUSH
68750: LD_VAR 0 1
68754: PUSH
68755: LD_VAR 0 2
68759: PUSH
68760: LD_VAR 0 3
68764: PUSH
68765: EMPTY
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: PPUSH
68771: CALL 48504 0 2
68775: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68776: CALL 68843 0 0
// exit ;
68780: POP
68781: POP
68782: GO 68838
// end ; end ;
68784: GO 68623
68786: POP
68787: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68788: LD_ADDR_EXP 96
68792: PUSH
68793: LD_EXP 96
68797: PPUSH
68798: LD_VAR 0 1
68802: PPUSH
68803: CALL_OW 255
68807: PUSH
68808: LD_VAR 0 1
68812: PUSH
68813: LD_VAR 0 2
68817: PUSH
68818: LD_VAR 0 3
68822: PUSH
68823: EMPTY
68824: LIST
68825: LIST
68826: LIST
68827: LIST
68828: PPUSH
68829: CALL 48504 0 2
68833: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68834: CALL 68843 0 0
// end ;
68838: LD_VAR 0 4
68842: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68843: LD_INT 0
68845: PPUSH
68846: PPUSH
68847: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68848: LD_STRING resetFactoryWaypoint();
68850: PPUSH
68851: CALL_OW 559
// if factoryWaypoints then
68855: LD_EXP 96
68859: IFFALSE 68980
// begin list := factoryWaypoints ;
68861: LD_ADDR_VAR 0 3
68865: PUSH
68866: LD_EXP 96
68870: ST_TO_ADDR
// for i := 1 to list do
68871: LD_ADDR_VAR 0 2
68875: PUSH
68876: DOUBLE
68877: LD_INT 1
68879: DEC
68880: ST_TO_ADDR
68881: LD_VAR 0 3
68885: PUSH
68886: FOR_TO
68887: IFFALSE 68978
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68889: LD_STRING setFactoryWaypointXY(
68891: PUSH
68892: LD_VAR 0 3
68896: PUSH
68897: LD_VAR 0 2
68901: ARRAY
68902: PUSH
68903: LD_INT 1
68905: ARRAY
68906: STR
68907: PUSH
68908: LD_STRING ,
68910: STR
68911: PUSH
68912: LD_VAR 0 3
68916: PUSH
68917: LD_VAR 0 2
68921: ARRAY
68922: PUSH
68923: LD_INT 2
68925: ARRAY
68926: STR
68927: PUSH
68928: LD_STRING ,
68930: STR
68931: PUSH
68932: LD_VAR 0 3
68936: PUSH
68937: LD_VAR 0 2
68941: ARRAY
68942: PUSH
68943: LD_INT 3
68945: ARRAY
68946: STR
68947: PUSH
68948: LD_STRING ,
68950: STR
68951: PUSH
68952: LD_VAR 0 3
68956: PUSH
68957: LD_VAR 0 2
68961: ARRAY
68962: PUSH
68963: LD_INT 4
68965: ARRAY
68966: STR
68967: PUSH
68968: LD_STRING )
68970: STR
68971: PPUSH
68972: CALL_OW 559
68976: GO 68886
68978: POP
68979: POP
// end ; end ;
68980: LD_VAR 0 1
68984: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
68985: LD_INT 0
68987: PPUSH
// if HexInfo ( x , y ) = warehouse then
68988: LD_VAR 0 2
68992: PPUSH
68993: LD_VAR 0 3
68997: PPUSH
68998: CALL_OW 428
69002: PUSH
69003: LD_VAR 0 1
69007: EQUAL
69008: IFFALSE 69035
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
69010: LD_ADDR_EXP 98
69014: PUSH
69015: LD_EXP 98
69019: PPUSH
69020: LD_VAR 0 1
69024: PPUSH
69025: LD_INT 0
69027: PPUSH
69028: CALL_OW 1
69032: ST_TO_ADDR
69033: GO 69086
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
69035: LD_ADDR_EXP 98
69039: PUSH
69040: LD_EXP 98
69044: PPUSH
69045: LD_VAR 0 1
69049: PPUSH
69050: LD_VAR 0 1
69054: PPUSH
69055: CALL_OW 255
69059: PUSH
69060: LD_VAR 0 1
69064: PUSH
69065: LD_VAR 0 2
69069: PUSH
69070: LD_VAR 0 3
69074: PUSH
69075: EMPTY
69076: LIST
69077: LIST
69078: LIST
69079: LIST
69080: PPUSH
69081: CALL_OW 1
69085: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
69086: CALL 69095 0 0
// end ;
69090: LD_VAR 0 4
69094: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
69095: LD_INT 0
69097: PPUSH
69098: PPUSH
69099: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
69100: LD_STRING resetWarehouseGatheringPoints();
69102: PPUSH
69103: CALL_OW 559
// if warehouseGatheringPoints then
69107: LD_EXP 98
69111: IFFALSE 69237
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
69113: LD_ADDR_VAR 0 3
69117: PUSH
69118: LD_EXP 98
69122: PPUSH
69123: CALL 52438 0 1
69127: ST_TO_ADDR
// for i := 1 to list do
69128: LD_ADDR_VAR 0 2
69132: PUSH
69133: DOUBLE
69134: LD_INT 1
69136: DEC
69137: ST_TO_ADDR
69138: LD_VAR 0 3
69142: PUSH
69143: FOR_TO
69144: IFFALSE 69235
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
69146: LD_STRING setWarehouseGatheringPointXY(
69148: PUSH
69149: LD_VAR 0 3
69153: PUSH
69154: LD_VAR 0 2
69158: ARRAY
69159: PUSH
69160: LD_INT 1
69162: ARRAY
69163: STR
69164: PUSH
69165: LD_STRING ,
69167: STR
69168: PUSH
69169: LD_VAR 0 3
69173: PUSH
69174: LD_VAR 0 2
69178: ARRAY
69179: PUSH
69180: LD_INT 2
69182: ARRAY
69183: STR
69184: PUSH
69185: LD_STRING ,
69187: STR
69188: PUSH
69189: LD_VAR 0 3
69193: PUSH
69194: LD_VAR 0 2
69198: ARRAY
69199: PUSH
69200: LD_INT 3
69202: ARRAY
69203: STR
69204: PUSH
69205: LD_STRING ,
69207: STR
69208: PUSH
69209: LD_VAR 0 3
69213: PUSH
69214: LD_VAR 0 2
69218: ARRAY
69219: PUSH
69220: LD_INT 4
69222: ARRAY
69223: STR
69224: PUSH
69225: LD_STRING )
69227: STR
69228: PPUSH
69229: CALL_OW 559
69233: GO 69143
69235: POP
69236: POP
// end ; end ;
69237: LD_VAR 0 1
69241: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
69242: LD_EXP 98
69246: IFFALSE 69941
69248: GO 69250
69250: DISABLE
69251: LD_INT 0
69253: PPUSH
69254: PPUSH
69255: PPUSH
69256: PPUSH
69257: PPUSH
69258: PPUSH
69259: PPUSH
69260: PPUSH
69261: PPUSH
// begin enable ;
69262: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
69263: LD_ADDR_VAR 0 3
69267: PUSH
69268: LD_EXP 98
69272: PPUSH
69273: CALL 52438 0 1
69277: ST_TO_ADDR
// if not list then
69278: LD_VAR 0 3
69282: NOT
69283: IFFALSE 69287
// exit ;
69285: GO 69941
// for i := 1 to list do
69287: LD_ADDR_VAR 0 1
69291: PUSH
69292: DOUBLE
69293: LD_INT 1
69295: DEC
69296: ST_TO_ADDR
69297: LD_VAR 0 3
69301: PUSH
69302: FOR_TO
69303: IFFALSE 69939
// begin depot := list [ i ] [ 2 ] ;
69305: LD_ADDR_VAR 0 8
69309: PUSH
69310: LD_VAR 0 3
69314: PUSH
69315: LD_VAR 0 1
69319: ARRAY
69320: PUSH
69321: LD_INT 2
69323: ARRAY
69324: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
69325: LD_ADDR_VAR 0 5
69329: PUSH
69330: LD_VAR 0 3
69334: PUSH
69335: LD_VAR 0 1
69339: ARRAY
69340: PUSH
69341: LD_INT 1
69343: ARRAY
69344: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
69345: LD_VAR 0 8
69349: PPUSH
69350: CALL_OW 301
69354: IFTRUE 69373
69356: PUSH
69357: LD_VAR 0 5
69361: PUSH
69362: LD_VAR 0 8
69366: PPUSH
69367: CALL_OW 255
69371: NONEQUAL
69372: OR
69373: IFFALSE 69402
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
69375: LD_ADDR_EXP 98
69379: PUSH
69380: LD_EXP 98
69384: PPUSH
69385: LD_VAR 0 8
69389: PPUSH
69390: LD_INT 0
69392: PPUSH
69393: CALL_OW 1
69397: ST_TO_ADDR
// exit ;
69398: POP
69399: POP
69400: GO 69941
// end ; x := list [ i ] [ 3 ] ;
69402: LD_ADDR_VAR 0 6
69406: PUSH
69407: LD_VAR 0 3
69411: PUSH
69412: LD_VAR 0 1
69416: ARRAY
69417: PUSH
69418: LD_INT 3
69420: ARRAY
69421: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
69422: LD_ADDR_VAR 0 7
69426: PUSH
69427: LD_VAR 0 3
69431: PUSH
69432: LD_VAR 0 1
69436: ARRAY
69437: PUSH
69438: LD_INT 4
69440: ARRAY
69441: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
69442: LD_ADDR_VAR 0 9
69446: PUSH
69447: LD_VAR 0 6
69451: PPUSH
69452: LD_VAR 0 7
69456: PPUSH
69457: LD_INT 16
69459: PPUSH
69460: CALL 51012 0 3
69464: ST_TO_ADDR
// if not cratesNearbyPoint then
69465: LD_VAR 0 9
69469: NOT
69470: IFFALSE 69476
// exit ;
69472: POP
69473: POP
69474: GO 69941
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
69476: LD_ADDR_VAR 0 4
69480: PUSH
69481: LD_INT 22
69483: PUSH
69484: LD_VAR 0 5
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 3
69495: PUSH
69496: LD_INT 60
69498: PUSH
69499: EMPTY
69500: LIST
69501: PUSH
69502: EMPTY
69503: LIST
69504: LIST
69505: PUSH
69506: LD_INT 91
69508: PUSH
69509: LD_VAR 0 8
69513: PUSH
69514: LD_INT 6
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 2
69524: PUSH
69525: LD_INT 25
69527: PUSH
69528: LD_INT 2
69530: PUSH
69531: EMPTY
69532: LIST
69533: LIST
69534: PUSH
69535: LD_INT 25
69537: PUSH
69538: LD_INT 16
69540: PUSH
69541: EMPTY
69542: LIST
69543: LIST
69544: PUSH
69545: EMPTY
69546: LIST
69547: LIST
69548: LIST
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: PPUSH
69556: CALL_OW 69
69560: PUSH
69561: LD_VAR 0 8
69565: PPUSH
69566: CALL_OW 313
69570: PPUSH
69571: LD_INT 3
69573: PUSH
69574: LD_INT 60
69576: PUSH
69577: EMPTY
69578: LIST
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: PUSH
69584: LD_INT 2
69586: PUSH
69587: LD_INT 25
69589: PUSH
69590: LD_INT 2
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 25
69599: PUSH
69600: LD_INT 16
69602: PUSH
69603: EMPTY
69604: LIST
69605: LIST
69606: PUSH
69607: EMPTY
69608: LIST
69609: LIST
69610: LIST
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PPUSH
69616: CALL_OW 72
69620: UNION
69621: ST_TO_ADDR
// if tmp then
69622: LD_VAR 0 4
69626: IFFALSE 69706
// begin tmp := ShrinkArray ( tmp , 3 ) ;
69628: LD_ADDR_VAR 0 4
69632: PUSH
69633: LD_VAR 0 4
69637: PPUSH
69638: LD_INT 3
69640: PPUSH
69641: CALL 48819 0 2
69645: ST_TO_ADDR
// for j in tmp do
69646: LD_ADDR_VAR 0 2
69650: PUSH
69651: LD_VAR 0 4
69655: PUSH
69656: FOR_IN
69657: IFFALSE 69700
// begin if IsInUnit ( j ) then
69659: LD_VAR 0 2
69663: PPUSH
69664: CALL_OW 310
69668: IFFALSE 69679
// ComExit ( j ) ;
69670: LD_VAR 0 2
69674: PPUSH
69675: CALL 48902 0 1
// AddComCollect ( j , x , y ) ;
69679: LD_VAR 0 2
69683: PPUSH
69684: LD_VAR 0 6
69688: PPUSH
69689: LD_VAR 0 7
69693: PPUSH
69694: CALL_OW 177
// end ;
69698: GO 69656
69700: POP
69701: POP
// exit ;
69702: POP
69703: POP
69704: GO 69941
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
69706: LD_ADDR_VAR 0 4
69710: PUSH
69711: LD_INT 22
69713: PUSH
69714: LD_VAR 0 5
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 91
69725: PUSH
69726: LD_VAR 0 8
69730: PUSH
69731: LD_INT 8
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: LIST
69738: PUSH
69739: LD_INT 2
69741: PUSH
69742: LD_INT 34
69744: PUSH
69745: LD_INT 12
69747: PUSH
69748: EMPTY
69749: LIST
69750: LIST
69751: PUSH
69752: LD_INT 34
69754: PUSH
69755: LD_INT 51
69757: PUSH
69758: EMPTY
69759: LIST
69760: LIST
69761: PUSH
69762: LD_INT 34
69764: PUSH
69765: LD_INT 32
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 34
69774: PUSH
69775: LD_INT 89
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: LIST
69786: LIST
69787: LIST
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: LIST
69793: PPUSH
69794: CALL_OW 69
69798: ST_TO_ADDR
// if tmp then
69799: LD_VAR 0 4
69803: IFFALSE 69937
// begin for j in tmp do
69805: LD_ADDR_VAR 0 2
69809: PUSH
69810: LD_VAR 0 4
69814: PUSH
69815: FOR_IN
69816: IFFALSE 69935
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69818: LD_VAR 0 2
69822: PPUSH
69823: CALL_OW 262
69827: PUSH
69828: LD_INT 3
69830: EQUAL
69831: IFTRUE 69848
69833: PUSH
69834: LD_VAR 0 2
69838: PPUSH
69839: CALL_OW 261
69843: PUSH
69844: LD_INT 20
69846: GREATER
69847: OR
69848: IFFALSE 69862
69850: PUSH
69851: LD_VAR 0 2
69855: PPUSH
69856: CALL_OW 314
69860: NOT
69861: AND
69862: IFFALSE 69892
69864: PUSH
69865: LD_VAR 0 2
69869: PPUSH
69870: CALL_OW 263
69874: PUSH
69875: LD_INT 1
69877: NONEQUAL
69878: IFTRUE 69891
69880: PUSH
69881: LD_VAR 0 2
69885: PPUSH
69886: CALL_OW 311
69890: OR
69891: AND
69892: IFFALSE 69933
// begin ComCollect ( j , x , y ) ;
69894: LD_VAR 0 2
69898: PPUSH
69899: LD_VAR 0 6
69903: PPUSH
69904: LD_VAR 0 7
69908: PPUSH
69909: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
69913: LD_VAR 0 2
69917: PPUSH
69918: LD_VAR 0 8
69922: PPUSH
69923: CALL_OW 172
// exit ;
69927: POP
69928: POP
69929: POP
69930: POP
69931: GO 69941
// end ;
69933: GO 69815
69935: POP
69936: POP
// end ; end ;
69937: GO 69302
69939: POP
69940: POP
// end ; end_of_file
69941: PPOPN 9
69943: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
69944: LD_VAR 0 1
69948: PPUSH
69949: LD_VAR 0 2
69953: PPUSH
69954: LD_VAR 0 3
69958: PPUSH
69959: LD_VAR 0 4
69963: PPUSH
69964: LD_VAR 0 5
69968: PPUSH
69969: LD_VAR 0 6
69973: PPUSH
69974: CALL 54037 0 6
// end ;
69978: PPOPN 6
69980: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
69981: LD_INT 0
69983: PPUSH
// begin if not units then
69984: LD_VAR 0 1
69988: NOT
69989: IFFALSE 69993
// exit ;
69991: GO 70027
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
69993: LD_VAR 0 1
69997: PPUSH
69998: LD_VAR 0 2
70002: PPUSH
70003: LD_VAR 0 3
70007: PPUSH
70008: LD_VAR 0 4
70012: PPUSH
70013: LD_VAR 0 5
70017: PPUSH
70018: LD_VAR 0 6
70022: PPUSH
70023: CALL 76647 0 6
// end ;
70027: PPOPN 7
70029: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70030: CALL 53917 0 0
// end ; end_of_file
70034: PPOPN 1
70036: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70037: LD_VAR 0 1
70041: PUSH
70042: LD_INT 200
70044: DOUBLE
70045: GREATEREQUAL
70046: IFFALSE 70054
70048: LD_INT 299
70050: DOUBLE
70051: LESSEQUAL
70052: IFTRUE 70056
70054: GO 70088
70056: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70057: LD_VAR 0 1
70061: PPUSH
70062: LD_VAR 0 2
70066: PPUSH
70067: LD_VAR 0 3
70071: PPUSH
70072: LD_VAR 0 4
70076: PPUSH
70077: LD_VAR 0 5
70081: PPUSH
70082: CALL 70950 0 5
70086: GO 70165
70088: LD_INT 300
70090: DOUBLE
70091: GREATEREQUAL
70092: IFFALSE 70100
70094: LD_INT 399
70096: DOUBLE
70097: LESSEQUAL
70098: IFTRUE 70102
70100: GO 70164
70102: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70103: LD_VAR 0 1
70107: PPUSH
70108: LD_VAR 0 2
70112: PPUSH
70113: LD_VAR 0 3
70117: PPUSH
70118: LD_VAR 0 4
70122: PPUSH
70123: LD_VAR 0 5
70127: PPUSH
70128: LD_VAR 0 6
70132: PPUSH
70133: LD_VAR 0 7
70137: PPUSH
70138: LD_VAR 0 8
70142: PPUSH
70143: LD_VAR 0 9
70147: PPUSH
70148: LD_VAR 0 10
70152: PPUSH
70153: LD_VAR 0 11
70157: PPUSH
70158: CALL 66497 0 11
70162: GO 70165
70164: POP
// end ;
70165: PPOPN 11
70167: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70168: LD_VAR 0 1
70172: PPUSH
70173: LD_VAR 0 2
70177: PPUSH
70178: LD_VAR 0 3
70182: PPUSH
70183: LD_VAR 0 4
70187: PPUSH
70188: LD_VAR 0 5
70192: PPUSH
70193: CALL 70250 0 5
// end ; end_of_file
70197: PPOPN 5
70199: END
// export function SOS_UnitDestroyed ( un ) ; begin
70200: LD_INT 0
70202: PPUSH
// ComRadiation ( un ) ;
70203: LD_VAR 0 1
70207: PPUSH
70208: CALL 71370 0 1
// end ;
70212: LD_VAR 0 2
70216: RET
// export function SOS_UnitKamikazed ( un ) ; begin
70217: LD_INT 0
70219: PPUSH
// ComRadiation ( un ) ;
70220: LD_VAR 0 1
70224: PPUSH
70225: CALL 71370 0 1
// end ;
70229: LD_VAR 0 2
70233: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
70234: LD_INT 0
70236: PPUSH
// end ;
70237: LD_VAR 0 4
70241: RET
// export function SOS_Command ( cmd ) ; begin
70242: LD_INT 0
70244: PPUSH
// end ;
70245: LD_VAR 0 2
70249: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
70250: LD_INT 0
70252: PPUSH
// end ;
70253: LD_VAR 0 6
70257: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
70258: LD_INT 0
70260: PPUSH
70261: PPUSH
70262: PPUSH
70263: PPUSH
70264: PPUSH
// if not vehicle or not factory then
70265: LD_VAR 0 1
70269: NOT
70270: IFTRUE 70279
70272: PUSH
70273: LD_VAR 0 2
70277: NOT
70278: OR
70279: IFFALSE 70283
// exit ;
70281: GO 70945
// weapon := GetWeapon ( vehicle ) ;
70283: LD_ADDR_VAR 0 7
70287: PUSH
70288: LD_VAR 0 1
70292: PPUSH
70293: CALL_OW 264
70297: ST_TO_ADDR
// if weapon = ar_miner then
70298: LD_VAR 0 7
70302: PUSH
70303: LD_INT 81
70305: EQUAL
70306: IFFALSE 70363
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
70308: LD_ADDR_EXP 107
70312: PUSH
70313: LD_EXP 107
70317: PPUSH
70318: LD_EXP 107
70322: PUSH
70323: LD_INT 1
70325: PLUS
70326: PPUSH
70327: LD_VAR 0 1
70331: PPUSH
70332: CALL_OW 1
70336: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70337: LD_ADDR_EXP 108
70341: PUSH
70342: LD_EXP 108
70346: PPUSH
70347: LD_EXP 108
70351: PUSH
70352: LD_INT 1
70354: PLUS
70355: PPUSH
70356: EMPTY
70357: PPUSH
70358: CALL_OW 1
70362: ST_TO_ADDR
// end ; if not factoryWaypoints then
70363: LD_EXP 96
70367: NOT
70368: IFFALSE 70372
// exit ;
70370: GO 70945
// for i := 1 to Count ( factoryWaypoints ) do
70372: LD_ADDR_VAR 0 4
70376: PUSH
70377: DOUBLE
70378: LD_INT 1
70380: DEC
70381: ST_TO_ADDR
70382: LD_EXP 96
70386: PPUSH
70387: CALL 12528 0 1
70391: PUSH
70392: FOR_TO
70393: IFFALSE 70943
// if factoryWaypoints [ i ] [ 2 ] = factory then
70395: LD_EXP 96
70399: PUSH
70400: LD_VAR 0 4
70404: ARRAY
70405: PUSH
70406: LD_INT 2
70408: ARRAY
70409: PUSH
70410: LD_VAR 0 2
70414: EQUAL
70415: IFFALSE 70941
// begin if GetControl ( vehicle ) = control_manual then
70417: LD_VAR 0 1
70421: PPUSH
70422: CALL_OW 263
70426: PUSH
70427: LD_INT 1
70429: EQUAL
70430: IFFALSE 70794
// begin driver := IsDrivenBy ( vehicle ) ;
70432: LD_ADDR_VAR 0 5
70436: PUSH
70437: LD_VAR 0 1
70441: PPUSH
70442: CALL_OW 311
70446: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
70447: LD_VAR 0 5
70451: PUSH
70452: LD_EXP 97
70456: IN
70457: IFTRUE 70471
70459: PUSH
70460: LD_VAR 0 1
70464: PUSH
70465: LD_EXP 97
70469: IN
70470: OR
70471: IFFALSE 70477
// exit ;
70473: POP
70474: POP
70475: GO 70945
// if not HasTask ( driver ) then
70477: LD_VAR 0 5
70481: PPUSH
70482: CALL_OW 314
70486: NOT
70487: IFFALSE 70792
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
70489: LD_ADDR_EXP 97
70493: PUSH
70494: LD_EXP 97
70498: PPUSH
70499: LD_VAR 0 5
70503: PPUSH
70504: CALL 48504 0 2
70508: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
70509: LD_ADDR_EXP 97
70513: PUSH
70514: LD_EXP 97
70518: PPUSH
70519: LD_VAR 0 1
70523: PPUSH
70524: CALL 48504 0 2
70528: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70529: LD_ADDR_VAR 0 6
70533: PUSH
70534: LD_EXP 96
70538: PUSH
70539: LD_VAR 0 4
70543: ARRAY
70544: PUSH
70545: LD_INT 3
70547: ARRAY
70548: PPUSH
70549: LD_EXP 96
70553: PUSH
70554: LD_VAR 0 4
70558: ARRAY
70559: PUSH
70560: LD_INT 4
70562: ARRAY
70563: PPUSH
70564: CALL_OW 428
70568: ST_TO_ADDR
// if hex then
70569: LD_VAR 0 6
70573: IFFALSE 70591
// ComMoveUnit ( driver , hex ) else
70575: LD_VAR 0 5
70579: PPUSH
70580: LD_VAR 0 6
70584: PPUSH
70585: CALL_OW 112
70589: GO 70675
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
70591: LD_VAR 0 1
70595: PPUSH
70596: LD_EXP 96
70600: PUSH
70601: LD_VAR 0 4
70605: ARRAY
70606: PUSH
70607: LD_INT 3
70609: ARRAY
70610: PPUSH
70611: LD_EXP 96
70615: PUSH
70616: LD_VAR 0 4
70620: ARRAY
70621: PUSH
70622: LD_INT 4
70624: ARRAY
70625: PPUSH
70626: CALL_OW 297
70630: PUSH
70631: LD_INT 0
70633: GREATER
70634: IFFALSE 70675
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70636: LD_VAR 0 5
70640: PPUSH
70641: LD_EXP 96
70645: PUSH
70646: LD_VAR 0 4
70650: ARRAY
70651: PUSH
70652: LD_INT 3
70654: ARRAY
70655: PPUSH
70656: LD_EXP 96
70660: PUSH
70661: LD_VAR 0 4
70665: ARRAY
70666: PUSH
70667: LD_INT 4
70669: ARRAY
70670: PPUSH
70671: CALL_OW 111
// AddComExitVehicle ( driver ) ;
70675: LD_VAR 0 5
70679: PPUSH
70680: CALL_OW 181
// if Multiplayer then
70684: LD_OWVAR 4
70688: IFFALSE 70737
// begin repeat wait ( 10 ) ;
70690: LD_INT 10
70692: PPUSH
70693: CALL_OW 67
// until not IsInUnit ( driver ) ;
70697: LD_VAR 0 5
70701: PPUSH
70702: CALL_OW 310
70706: NOT
70707: IFFALSE 70690
// if not HasTask ( driver ) then
70709: LD_VAR 0 5
70713: PPUSH
70714: CALL_OW 314
70718: NOT
70719: IFFALSE 70735
// ComEnterUnit ( driver , factory ) ;
70721: LD_VAR 0 5
70725: PPUSH
70726: LD_VAR 0 2
70730: PPUSH
70731: CALL_OW 120
// end else
70735: GO 70751
// AddComEnterUnit ( driver , factory ) ;
70737: LD_VAR 0 5
70741: PPUSH
70742: LD_VAR 0 2
70746: PPUSH
70747: CALL_OW 180
// wait ( 0 0$1 ) ;
70751: LD_INT 35
70753: PPUSH
70754: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
70758: LD_ADDR_EXP 97
70762: PUSH
70763: LD_EXP 97
70767: PUSH
70768: LD_VAR 0 5
70772: DIFF
70773: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
70774: LD_ADDR_EXP 97
70778: PUSH
70779: LD_EXP 97
70783: PUSH
70784: LD_VAR 0 1
70788: DIFF
70789: ST_TO_ADDR
// break ;
70790: GO 70943
// end ; end else
70792: GO 70941
// if GetControl ( vehicle ) = control_remote then
70794: LD_VAR 0 1
70798: PPUSH
70799: CALL_OW 263
70803: PUSH
70804: LD_INT 2
70806: EQUAL
70807: IFFALSE 70893
// begin wait ( 0 0$2 ) ;
70809: LD_INT 70
70811: PPUSH
70812: CALL_OW 67
// repeat wait ( 10 ) ;
70816: LD_INT 10
70818: PPUSH
70819: CALL_OW 67
// Connect ( vehicle ) ;
70823: LD_VAR 0 1
70827: PPUSH
70828: CALL 18806 0 1
// until IsControledBy ( vehicle ) ;
70832: LD_VAR 0 1
70836: PPUSH
70837: CALL_OW 312
70841: IFFALSE 70816
// wait ( 10 ) ;
70843: LD_INT 10
70845: PPUSH
70846: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70850: LD_VAR 0 1
70854: PPUSH
70855: LD_EXP 96
70859: PUSH
70860: LD_VAR 0 4
70864: ARRAY
70865: PUSH
70866: LD_INT 3
70868: ARRAY
70869: PPUSH
70870: LD_EXP 96
70874: PUSH
70875: LD_VAR 0 4
70879: ARRAY
70880: PUSH
70881: LD_INT 4
70883: ARRAY
70884: PPUSH
70885: CALL_OW 111
// break ;
70889: GO 70943
// end else
70891: GO 70941
// begin wait ( 0 0$3 ) ;
70893: LD_INT 105
70895: PPUSH
70896: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70900: LD_VAR 0 1
70904: PPUSH
70905: LD_EXP 96
70909: PUSH
70910: LD_VAR 0 4
70914: ARRAY
70915: PUSH
70916: LD_INT 3
70918: ARRAY
70919: PPUSH
70920: LD_EXP 96
70924: PUSH
70925: LD_VAR 0 4
70929: ARRAY
70930: PUSH
70931: LD_INT 4
70933: ARRAY
70934: PPUSH
70935: CALL_OW 111
// break ;
70939: GO 70943
// end ; end ;
70941: GO 70392
70943: POP
70944: POP
// end ;
70945: LD_VAR 0 3
70949: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
70950: LD_INT 0
70952: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
70953: LD_VAR 0 1
70957: PUSH
70958: LD_INT 250
70960: EQUAL
70961: IFFALSE 70978
70963: PUSH
70964: LD_VAR 0 2
70968: PPUSH
70969: CALL_OW 264
70973: PUSH
70974: LD_INT 81
70976: EQUAL
70977: AND
70978: IFFALSE 70999
// MinerPlaceMine ( unit , x , y ) ;
70980: LD_VAR 0 2
70984: PPUSH
70985: LD_VAR 0 4
70989: PPUSH
70990: LD_VAR 0 5
70994: PPUSH
70995: CALL 74345 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
70999: LD_VAR 0 1
71003: PUSH
71004: LD_INT 251
71006: EQUAL
71007: IFFALSE 71024
71009: PUSH
71010: LD_VAR 0 2
71014: PPUSH
71015: CALL_OW 264
71019: PUSH
71020: LD_INT 81
71022: EQUAL
71023: AND
71024: IFFALSE 71045
// MinerDetonateMine ( unit , x , y ) ;
71026: LD_VAR 0 2
71030: PPUSH
71031: LD_VAR 0 4
71035: PPUSH
71036: LD_VAR 0 5
71040: PPUSH
71041: CALL 74752 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
71045: LD_VAR 0 1
71049: PUSH
71050: LD_INT 252
71052: EQUAL
71053: IFFALSE 71070
71055: PUSH
71056: LD_VAR 0 2
71060: PPUSH
71061: CALL_OW 264
71065: PUSH
71066: LD_INT 81
71068: EQUAL
71069: AND
71070: IFFALSE 71091
// MinerCreateMinefield ( unit , x , y ) ;
71072: LD_VAR 0 2
71076: PPUSH
71077: LD_VAR 0 4
71081: PPUSH
71082: LD_VAR 0 5
71086: PPUSH
71087: CALL 74984 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
71091: LD_VAR 0 1
71095: PUSH
71096: LD_INT 253
71098: EQUAL
71099: IFFALSE 71116
71101: PUSH
71102: LD_VAR 0 2
71106: PPUSH
71107: CALL_OW 257
71111: PUSH
71112: LD_INT 5
71114: EQUAL
71115: AND
71116: IFFALSE 71137
// ComBinocular ( unit , x , y ) ;
71118: LD_VAR 0 2
71122: PPUSH
71123: LD_VAR 0 4
71127: PPUSH
71128: LD_VAR 0 5
71132: PPUSH
71133: CALL 75359 0 3
// if selectedUnit then
71137: LD_VAR 0 3
71141: IFFALSE 71201
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
71143: LD_VAR 0 1
71147: PUSH
71148: LD_INT 254
71150: EQUAL
71151: IFFALSE 71168
71153: PUSH
71154: LD_VAR 0 2
71158: PPUSH
71159: CALL_OW 264
71163: PUSH
71164: LD_INT 99
71166: EQUAL
71167: AND
71168: IFFALSE 71185
71170: PUSH
71171: LD_VAR 0 3
71175: PPUSH
71176: CALL_OW 263
71180: PUSH
71181: LD_INT 3
71183: EQUAL
71184: AND
71185: IFFALSE 71201
// HackDestroyVehicle ( unit , selectedUnit ) ;
71187: LD_VAR 0 2
71191: PPUSH
71192: LD_VAR 0 3
71196: PPUSH
71197: CALL 73535 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
71201: LD_VAR 0 1
71205: PUSH
71206: LD_INT 255
71208: EQUAL
71209: IFFALSE 71233
71211: PUSH
71212: LD_VAR 0 2
71216: PPUSH
71217: CALL_OW 264
71221: PUSH
71222: LD_INT 14
71224: PUSH
71225: LD_INT 53
71227: PUSH
71228: EMPTY
71229: LIST
71230: LIST
71231: IN
71232: AND
71233: IFFALSE 71251
71235: PUSH
71236: LD_VAR 0 4
71240: PPUSH
71241: LD_VAR 0 5
71245: PPUSH
71246: CALL_OW 488
71250: AND
71251: IFFALSE 71275
// CutTreeXYR ( unit , x , y , 12 ) ;
71253: LD_VAR 0 2
71257: PPUSH
71258: LD_VAR 0 4
71262: PPUSH
71263: LD_VAR 0 5
71267: PPUSH
71268: LD_INT 12
71270: PPUSH
71271: CALL 71466 0 4
// if cmd = 256 then
71275: LD_VAR 0 1
71279: PUSH
71280: LD_INT 256
71282: EQUAL
71283: IFFALSE 71304
// SetFactoryWaypoint ( unit , x , y ) ;
71285: LD_VAR 0 2
71289: PPUSH
71290: LD_VAR 0 4
71294: PPUSH
71295: LD_VAR 0 5
71299: PPUSH
71300: CALL 68489 0 3
// if cmd = 257 then
71304: LD_VAR 0 1
71308: PUSH
71309: LD_INT 257
71311: EQUAL
71312: IFFALSE 71333
// SetWarehouseGatheringPoint ( unit , x , y ) ;
71314: LD_VAR 0 2
71318: PPUSH
71319: LD_VAR 0 4
71323: PPUSH
71324: LD_VAR 0 5
71328: PPUSH
71329: CALL 68985 0 3
// if cmd = 258 then
71333: LD_VAR 0 1
71337: PUSH
71338: LD_INT 258
71340: EQUAL
71341: IFFALSE 71365
// BurnTreeXYR ( unit , x , y , 8 ) ;
71343: LD_VAR 0 2
71347: PPUSH
71348: LD_VAR 0 4
71352: PPUSH
71353: LD_VAR 0 5
71357: PPUSH
71358: LD_INT 8
71360: PPUSH
71361: CALL 71888 0 4
// end ;
71365: LD_VAR 0 6
71369: RET
// export function ComRadiation ( un ) ; var eff ; begin
71370: LD_INT 0
71372: PPUSH
71373: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
71374: LD_VAR 0 1
71378: PPUSH
71379: CALL_OW 264
71383: PUSH
71384: LD_INT 91
71386: NONEQUAL
71387: IFFALSE 71391
// exit ;
71389: GO 71461
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
71391: LD_INT 68
71393: PPUSH
71394: LD_VAR 0 1
71398: PPUSH
71399: CALL_OW 255
71403: PPUSH
71404: CALL_OW 321
71408: PUSH
71409: LD_INT 2
71411: EQUAL
71412: IFFALSE 71424
// eff := 50 else
71414: LD_ADDR_VAR 0 3
71418: PUSH
71419: LD_INT 50
71421: ST_TO_ADDR
71422: GO 71432
// eff := 25 ;
71424: LD_ADDR_VAR 0 3
71428: PUSH
71429: LD_INT 25
71431: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
71432: LD_VAR 0 1
71436: PPUSH
71437: CALL_OW 250
71441: PPUSH
71442: LD_VAR 0 1
71446: PPUSH
71447: CALL_OW 251
71451: PPUSH
71452: LD_VAR 0 3
71456: PPUSH
71457: CALL_OW 495
// end ;
71461: LD_VAR 0 2
71465: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
71466: LD_INT 0
71468: PPUSH
71469: PPUSH
71470: PPUSH
71471: PPUSH
71472: PPUSH
71473: PPUSH
71474: PPUSH
71475: PPUSH
71476: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
71477: LD_VAR 0 1
71481: PPUSH
71482: CALL_OW 302
71486: NOT
71487: IFTRUE 71506
71489: PUSH
71490: LD_VAR 0 2
71494: PPUSH
71495: LD_VAR 0 3
71499: PPUSH
71500: CALL_OW 488
71504: NOT
71505: OR
71506: IFTRUE 71515
71508: PUSH
71509: LD_VAR 0 4
71513: NOT
71514: OR
71515: IFFALSE 71519
// exit ;
71517: GO 71883
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
71519: LD_VAR 0 1
71523: PPUSH
71524: CALL_OW 437
71528: PPUSH
71529: CALL 12528 0 1
71533: PUSH
71534: LD_INT 10
71536: GREATER
71537: IFFALSE 71541
// exit ;
71539: GO 71883
// list := [ ] ;
71541: LD_ADDR_VAR 0 13
71545: PUSH
71546: EMPTY
71547: ST_TO_ADDR
// if x - r < 0 then
71548: LD_VAR 0 2
71552: PUSH
71553: LD_VAR 0 4
71557: MINUS
71558: PUSH
71559: LD_INT 0
71561: LESS
71562: IFFALSE 71574
// min_x := 0 else
71564: LD_ADDR_VAR 0 7
71568: PUSH
71569: LD_INT 0
71571: ST_TO_ADDR
71572: GO 71590
// min_x := x - r ;
71574: LD_ADDR_VAR 0 7
71578: PUSH
71579: LD_VAR 0 2
71583: PUSH
71584: LD_VAR 0 4
71588: MINUS
71589: ST_TO_ADDR
// if y - r < 0 then
71590: LD_VAR 0 3
71594: PUSH
71595: LD_VAR 0 4
71599: MINUS
71600: PUSH
71601: LD_INT 0
71603: LESS
71604: IFFALSE 71616
// min_y := 0 else
71606: LD_ADDR_VAR 0 8
71610: PUSH
71611: LD_INT 0
71613: ST_TO_ADDR
71614: GO 71632
// min_y := y - r ;
71616: LD_ADDR_VAR 0 8
71620: PUSH
71621: LD_VAR 0 3
71625: PUSH
71626: LD_VAR 0 4
71630: MINUS
71631: ST_TO_ADDR
// max_x := x + r ;
71632: LD_ADDR_VAR 0 9
71636: PUSH
71637: LD_VAR 0 2
71641: PUSH
71642: LD_VAR 0 4
71646: PLUS
71647: ST_TO_ADDR
// max_y := y + r ;
71648: LD_ADDR_VAR 0 10
71652: PUSH
71653: LD_VAR 0 3
71657: PUSH
71658: LD_VAR 0 4
71662: PLUS
71663: ST_TO_ADDR
// for _x = min_x to max_x do
71664: LD_ADDR_VAR 0 11
71668: PUSH
71669: DOUBLE
71670: LD_VAR 0 7
71674: DEC
71675: ST_TO_ADDR
71676: LD_VAR 0 9
71680: PUSH
71681: FOR_TO
71682: IFFALSE 71801
// for _y = min_y to max_y do
71684: LD_ADDR_VAR 0 12
71688: PUSH
71689: DOUBLE
71690: LD_VAR 0 8
71694: DEC
71695: ST_TO_ADDR
71696: LD_VAR 0 10
71700: PUSH
71701: FOR_TO
71702: IFFALSE 71797
// begin if not ValidHex ( _x , _y ) then
71704: LD_VAR 0 11
71708: PPUSH
71709: LD_VAR 0 12
71713: PPUSH
71714: CALL_OW 488
71718: NOT
71719: IFFALSE 71723
// continue ;
71721: GO 71701
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
71723: LD_VAR 0 11
71727: PPUSH
71728: LD_VAR 0 12
71732: PPUSH
71733: CALL_OW 351
71737: IFFALSE 71755
71739: PUSH
71740: LD_VAR 0 11
71744: PPUSH
71745: LD_VAR 0 12
71749: PPUSH
71750: CALL_OW 554
71754: AND
71755: IFFALSE 71795
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71757: LD_ADDR_VAR 0 13
71761: PUSH
71762: LD_VAR 0 13
71766: PPUSH
71767: LD_VAR 0 13
71771: PUSH
71772: LD_INT 1
71774: PLUS
71775: PPUSH
71776: LD_VAR 0 11
71780: PUSH
71781: LD_VAR 0 12
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PPUSH
71790: CALL_OW 2
71794: ST_TO_ADDR
// end ;
71795: GO 71701
71797: POP
71798: POP
71799: GO 71681
71801: POP
71802: POP
// if not list then
71803: LD_VAR 0 13
71807: NOT
71808: IFFALSE 71812
// exit ;
71810: GO 71883
// for i in list do
71812: LD_ADDR_VAR 0 6
71816: PUSH
71817: LD_VAR 0 13
71821: PUSH
71822: FOR_IN
71823: IFFALSE 71881
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
71825: LD_VAR 0 1
71829: PPUSH
71830: LD_STRING M
71832: PUSH
71833: LD_VAR 0 6
71837: PUSH
71838: LD_INT 1
71840: ARRAY
71841: PUSH
71842: LD_VAR 0 6
71846: PUSH
71847: LD_INT 2
71849: ARRAY
71850: PUSH
71851: LD_INT 0
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: LD_INT 0
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: PUSH
71872: EMPTY
71873: LIST
71874: PPUSH
71875: CALL_OW 447
71879: GO 71822
71881: POP
71882: POP
// end ;
71883: LD_VAR 0 5
71887: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
71888: LD_INT 0
71890: PPUSH
71891: PPUSH
71892: PPUSH
71893: PPUSH
71894: PPUSH
71895: PPUSH
71896: PPUSH
71897: PPUSH
71898: PPUSH
71899: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
71900: LD_VAR 0 1
71904: PPUSH
71905: CALL_OW 302
71909: NOT
71910: IFTRUE 71929
71912: PUSH
71913: LD_VAR 0 2
71917: PPUSH
71918: LD_VAR 0 3
71922: PPUSH
71923: CALL_OW 488
71927: NOT
71928: OR
71929: IFTRUE 71938
71931: PUSH
71932: LD_VAR 0 4
71936: NOT
71937: OR
71938: IFFALSE 71942
// exit ;
71940: GO 72481
// if Count ( GetTaskList ( flame ) ) > 10 then
71942: LD_VAR 0 1
71946: PPUSH
71947: CALL_OW 437
71951: PPUSH
71952: CALL 12528 0 1
71956: PUSH
71957: LD_INT 10
71959: GREATER
71960: IFFALSE 71964
// exit ;
71962: GO 72481
// list := [ ] ;
71964: LD_ADDR_VAR 0 13
71968: PUSH
71969: EMPTY
71970: ST_TO_ADDR
// if x - r < 0 then
71971: LD_VAR 0 2
71975: PUSH
71976: LD_VAR 0 4
71980: MINUS
71981: PUSH
71982: LD_INT 0
71984: LESS
71985: IFFALSE 71997
// min_x := 0 else
71987: LD_ADDR_VAR 0 7
71991: PUSH
71992: LD_INT 0
71994: ST_TO_ADDR
71995: GO 72013
// min_x := x - r ;
71997: LD_ADDR_VAR 0 7
72001: PUSH
72002: LD_VAR 0 2
72006: PUSH
72007: LD_VAR 0 4
72011: MINUS
72012: ST_TO_ADDR
// if y - r < 0 then
72013: LD_VAR 0 3
72017: PUSH
72018: LD_VAR 0 4
72022: MINUS
72023: PUSH
72024: LD_INT 0
72026: LESS
72027: IFFALSE 72039
// min_y := 0 else
72029: LD_ADDR_VAR 0 8
72033: PUSH
72034: LD_INT 0
72036: ST_TO_ADDR
72037: GO 72055
// min_y := y - r ;
72039: LD_ADDR_VAR 0 8
72043: PUSH
72044: LD_VAR 0 3
72048: PUSH
72049: LD_VAR 0 4
72053: MINUS
72054: ST_TO_ADDR
// max_x := x + r ;
72055: LD_ADDR_VAR 0 9
72059: PUSH
72060: LD_VAR 0 2
72064: PUSH
72065: LD_VAR 0 4
72069: PLUS
72070: ST_TO_ADDR
// max_y := y + r ;
72071: LD_ADDR_VAR 0 10
72075: PUSH
72076: LD_VAR 0 3
72080: PUSH
72081: LD_VAR 0 4
72085: PLUS
72086: ST_TO_ADDR
// for _x = min_x to max_x do
72087: LD_ADDR_VAR 0 11
72091: PUSH
72092: DOUBLE
72093: LD_VAR 0 7
72097: DEC
72098: ST_TO_ADDR
72099: LD_VAR 0 9
72103: PUSH
72104: FOR_TO
72105: IFFALSE 72224
// for _y = min_y to max_y do
72107: LD_ADDR_VAR 0 12
72111: PUSH
72112: DOUBLE
72113: LD_VAR 0 8
72117: DEC
72118: ST_TO_ADDR
72119: LD_VAR 0 10
72123: PUSH
72124: FOR_TO
72125: IFFALSE 72220
// begin if not ValidHex ( _x , _y ) then
72127: LD_VAR 0 11
72131: PPUSH
72132: LD_VAR 0 12
72136: PPUSH
72137: CALL_OW 488
72141: NOT
72142: IFFALSE 72146
// continue ;
72144: GO 72124
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
72146: LD_VAR 0 11
72150: PPUSH
72151: LD_VAR 0 12
72155: PPUSH
72156: CALL_OW 351
72160: IFFALSE 72178
72162: PUSH
72163: LD_VAR 0 11
72167: PPUSH
72168: LD_VAR 0 12
72172: PPUSH
72173: CALL_OW 554
72177: AND
72178: IFFALSE 72218
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
72180: LD_ADDR_VAR 0 13
72184: PUSH
72185: LD_VAR 0 13
72189: PPUSH
72190: LD_VAR 0 13
72194: PUSH
72195: LD_INT 1
72197: PLUS
72198: PPUSH
72199: LD_VAR 0 11
72203: PUSH
72204: LD_VAR 0 12
72208: PUSH
72209: EMPTY
72210: LIST
72211: LIST
72212: PPUSH
72213: CALL_OW 2
72217: ST_TO_ADDR
// end ;
72218: GO 72124
72220: POP
72221: POP
72222: GO 72104
72224: POP
72225: POP
// if not list then
72226: LD_VAR 0 13
72230: NOT
72231: IFFALSE 72235
// exit ;
72233: GO 72481
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
72235: LD_ADDR_VAR 0 13
72239: PUSH
72240: LD_VAR 0 1
72244: PPUSH
72245: LD_VAR 0 13
72249: PPUSH
72250: LD_INT 1
72252: PPUSH
72253: LD_INT 1
72255: PPUSH
72256: CALL 15934 0 4
72260: ST_TO_ADDR
// ComStop ( flame ) ;
72261: LD_VAR 0 1
72265: PPUSH
72266: CALL_OW 141
// for i in list do
72270: LD_ADDR_VAR 0 6
72274: PUSH
72275: LD_VAR 0 13
72279: PUSH
72280: FOR_IN
72281: IFFALSE 72312
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
72283: LD_VAR 0 1
72287: PPUSH
72288: LD_VAR 0 6
72292: PUSH
72293: LD_INT 1
72295: ARRAY
72296: PPUSH
72297: LD_VAR 0 6
72301: PUSH
72302: LD_INT 2
72304: ARRAY
72305: PPUSH
72306: CALL_OW 176
72310: GO 72280
72312: POP
72313: POP
// repeat wait ( 0 0$1 ) ;
72314: LD_INT 35
72316: PPUSH
72317: CALL_OW 67
// task := GetTaskList ( flame ) ;
72321: LD_ADDR_VAR 0 14
72325: PUSH
72326: LD_VAR 0 1
72330: PPUSH
72331: CALL_OW 437
72335: ST_TO_ADDR
// if not task then
72336: LD_VAR 0 14
72340: NOT
72341: IFFALSE 72345
// exit ;
72343: GO 72481
// if task [ 1 ] [ 1 ] <> | then
72345: LD_VAR 0 14
72349: PUSH
72350: LD_INT 1
72352: ARRAY
72353: PUSH
72354: LD_INT 1
72356: ARRAY
72357: PUSH
72358: LD_STRING |
72360: NONEQUAL
72361: IFFALSE 72365
// exit ;
72363: GO 72481
// _x := task [ 1 ] [ 2 ] ;
72365: LD_ADDR_VAR 0 11
72369: PUSH
72370: LD_VAR 0 14
72374: PUSH
72375: LD_INT 1
72377: ARRAY
72378: PUSH
72379: LD_INT 2
72381: ARRAY
72382: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
72383: LD_ADDR_VAR 0 12
72387: PUSH
72388: LD_VAR 0 14
72392: PUSH
72393: LD_INT 1
72395: ARRAY
72396: PUSH
72397: LD_INT 3
72399: ARRAY
72400: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
72401: LD_VAR 0 11
72405: PPUSH
72406: LD_VAR 0 12
72410: PPUSH
72411: CALL_OW 351
72415: NOT
72416: IFTRUE 72435
72418: PUSH
72419: LD_VAR 0 11
72423: PPUSH
72424: LD_VAR 0 12
72428: PPUSH
72429: CALL_OW 554
72433: NOT
72434: OR
72435: IFFALSE 72469
// begin task := Delete ( task , 1 ) ;
72437: LD_ADDR_VAR 0 14
72441: PUSH
72442: LD_VAR 0 14
72446: PPUSH
72447: LD_INT 1
72449: PPUSH
72450: CALL_OW 3
72454: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
72455: LD_VAR 0 1
72459: PPUSH
72460: LD_VAR 0 14
72464: PPUSH
72465: CALL_OW 446
// end ; until not HasTask ( flame ) ;
72469: LD_VAR 0 1
72473: PPUSH
72474: CALL_OW 314
72478: NOT
72479: IFFALSE 72314
// end ;
72481: LD_VAR 0 5
72485: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
72486: LD_EXP 100
72490: NOT
72491: IFFALSE 72541
72493: GO 72495
72495: DISABLE
// begin initHack := true ;
72496: LD_ADDR_EXP 100
72500: PUSH
72501: LD_INT 1
72503: ST_TO_ADDR
// hackTanks := [ ] ;
72504: LD_ADDR_EXP 101
72508: PUSH
72509: EMPTY
72510: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
72511: LD_ADDR_EXP 102
72515: PUSH
72516: EMPTY
72517: ST_TO_ADDR
// hackLimit := 3 ;
72518: LD_ADDR_EXP 103
72522: PUSH
72523: LD_INT 3
72525: ST_TO_ADDR
// hackDist := 12 ;
72526: LD_ADDR_EXP 104
72530: PUSH
72531: LD_INT 12
72533: ST_TO_ADDR
// hackCounter := [ ] ;
72534: LD_ADDR_EXP 105
72538: PUSH
72539: EMPTY
72540: ST_TO_ADDR
// end ;
72541: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
72542: LD_EXP 100
72546: IFFALSE 72564
72548: PUSH
72549: LD_INT 34
72551: PUSH
72552: LD_INT 99
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PPUSH
72559: CALL_OW 69
72563: AND
72564: IFFALSE 72817
72566: GO 72568
72568: DISABLE
72569: LD_INT 0
72571: PPUSH
72572: PPUSH
// begin enable ;
72573: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
72574: LD_ADDR_VAR 0 1
72578: PUSH
72579: LD_INT 34
72581: PUSH
72582: LD_INT 99
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PPUSH
72589: CALL_OW 69
72593: PUSH
72594: FOR_IN
72595: IFFALSE 72815
// begin if not i in hackTanks then
72597: LD_VAR 0 1
72601: PUSH
72602: LD_EXP 101
72606: IN
72607: NOT
72608: IFFALSE 72691
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
72610: LD_ADDR_EXP 101
72614: PUSH
72615: LD_EXP 101
72619: PPUSH
72620: LD_EXP 101
72624: PUSH
72625: LD_INT 1
72627: PLUS
72628: PPUSH
72629: LD_VAR 0 1
72633: PPUSH
72634: CALL_OW 1
72638: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
72639: LD_ADDR_EXP 102
72643: PUSH
72644: LD_EXP 102
72648: PPUSH
72649: LD_EXP 102
72653: PUSH
72654: LD_INT 1
72656: PLUS
72657: PPUSH
72658: EMPTY
72659: PPUSH
72660: CALL_OW 1
72664: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
72665: LD_ADDR_EXP 105
72669: PUSH
72670: LD_EXP 105
72674: PPUSH
72675: LD_EXP 105
72679: PUSH
72680: LD_INT 1
72682: PLUS
72683: PPUSH
72684: EMPTY
72685: PPUSH
72686: CALL_OW 1
72690: ST_TO_ADDR
// end ; if not IsOk ( i ) then
72691: LD_VAR 0 1
72695: PPUSH
72696: CALL_OW 302
72700: NOT
72701: IFFALSE 72714
// begin HackUnlinkAll ( i ) ;
72703: LD_VAR 0 1
72707: PPUSH
72708: CALL 72820 0 1
// continue ;
72712: GO 72594
// end ; HackCheckCapturedStatus ( i ) ;
72714: LD_VAR 0 1
72718: PPUSH
72719: CALL 73265 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
72723: LD_ADDR_VAR 0 2
72727: PUSH
72728: LD_INT 81
72730: PUSH
72731: LD_VAR 0 1
72735: PPUSH
72736: CALL_OW 255
72740: PUSH
72741: EMPTY
72742: LIST
72743: LIST
72744: PUSH
72745: LD_INT 33
72747: PUSH
72748: LD_INT 3
72750: PUSH
72751: EMPTY
72752: LIST
72753: LIST
72754: PUSH
72755: LD_INT 91
72757: PUSH
72758: LD_VAR 0 1
72762: PUSH
72763: LD_EXP 104
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 50
72775: PUSH
72776: EMPTY
72777: LIST
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: PPUSH
72785: CALL_OW 69
72789: ST_TO_ADDR
// if not tmp then
72790: LD_VAR 0 2
72794: NOT
72795: IFFALSE 72799
// continue ;
72797: GO 72594
// HackLink ( i , tmp ) ;
72799: LD_VAR 0 1
72803: PPUSH
72804: LD_VAR 0 2
72808: PPUSH
72809: CALL 72956 0 2
// end ;
72813: GO 72594
72815: POP
72816: POP
// end ;
72817: PPOPN 2
72819: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
72820: LD_INT 0
72822: PPUSH
72823: PPUSH
72824: PPUSH
// if not hack in hackTanks then
72825: LD_VAR 0 1
72829: PUSH
72830: LD_EXP 101
72834: IN
72835: NOT
72836: IFFALSE 72840
// exit ;
72838: GO 72951
// index := GetElementIndex ( hackTanks , hack ) ;
72840: LD_ADDR_VAR 0 4
72844: PUSH
72845: LD_EXP 101
72849: PPUSH
72850: LD_VAR 0 1
72854: PPUSH
72855: CALL 15229 0 2
72859: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
72860: LD_EXP 102
72864: PUSH
72865: LD_VAR 0 4
72869: ARRAY
72870: IFFALSE 72951
// begin for i in hackTanksCaptured [ index ] do
72872: LD_ADDR_VAR 0 3
72876: PUSH
72877: LD_EXP 102
72881: PUSH
72882: LD_VAR 0 4
72886: ARRAY
72887: PUSH
72888: FOR_IN
72889: IFFALSE 72915
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
72891: LD_VAR 0 3
72895: PUSH
72896: LD_INT 1
72898: ARRAY
72899: PPUSH
72900: LD_VAR 0 3
72904: PUSH
72905: LD_INT 2
72907: ARRAY
72908: PPUSH
72909: CALL_OW 235
72913: GO 72888
72915: POP
72916: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
72917: LD_ADDR_EXP 102
72921: PUSH
72922: LD_EXP 102
72926: PPUSH
72927: LD_VAR 0 4
72931: PPUSH
72932: EMPTY
72933: PPUSH
72934: CALL_OW 1
72938: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
72939: LD_VAR 0 1
72943: PPUSH
72944: LD_INT 0
72946: PPUSH
72947: CALL_OW 505
// end ; end ;
72951: LD_VAR 0 2
72955: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
72956: LD_INT 0
72958: PPUSH
72959: PPUSH
72960: PPUSH
// if not hack in hackTanks or not vehicles then
72961: LD_VAR 0 1
72965: PUSH
72966: LD_EXP 101
72970: IN
72971: NOT
72972: IFTRUE 72981
72974: PUSH
72975: LD_VAR 0 2
72979: NOT
72980: OR
72981: IFFALSE 72985
// exit ;
72983: GO 73260
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
72985: LD_ADDR_VAR 0 2
72989: PUSH
72990: LD_VAR 0 1
72994: PPUSH
72995: LD_VAR 0 2
72999: PPUSH
73000: LD_INT 1
73002: PPUSH
73003: LD_INT 1
73005: PPUSH
73006: CALL 15881 0 4
73010: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
73011: LD_ADDR_VAR 0 5
73015: PUSH
73016: LD_EXP 101
73020: PPUSH
73021: LD_VAR 0 1
73025: PPUSH
73026: CALL 15229 0 2
73030: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
73031: LD_EXP 102
73035: PUSH
73036: LD_VAR 0 5
73040: ARRAY
73041: PUSH
73042: LD_EXP 103
73046: LESS
73047: IFFALSE 73236
// begin for i := 1 to vehicles do
73049: LD_ADDR_VAR 0 4
73053: PUSH
73054: DOUBLE
73055: LD_INT 1
73057: DEC
73058: ST_TO_ADDR
73059: LD_VAR 0 2
73063: PUSH
73064: FOR_TO
73065: IFFALSE 73234
// begin if hackTanksCaptured [ index ] = hackLimit then
73067: LD_EXP 102
73071: PUSH
73072: LD_VAR 0 5
73076: ARRAY
73077: PUSH
73078: LD_EXP 103
73082: EQUAL
73083: IFFALSE 73087
// break ;
73085: GO 73234
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
73087: LD_ADDR_EXP 105
73091: PUSH
73092: LD_EXP 105
73096: PPUSH
73097: LD_VAR 0 5
73101: PPUSH
73102: LD_EXP 105
73106: PUSH
73107: LD_VAR 0 5
73111: ARRAY
73112: PUSH
73113: LD_INT 1
73115: PLUS
73116: PPUSH
73117: CALL_OW 1
73121: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
73122: LD_ADDR_EXP 102
73126: PUSH
73127: LD_EXP 102
73131: PPUSH
73132: LD_VAR 0 5
73136: PUSH
73137: LD_EXP 102
73141: PUSH
73142: LD_VAR 0 5
73146: ARRAY
73147: PUSH
73148: LD_INT 1
73150: PLUS
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PPUSH
73156: LD_VAR 0 2
73160: PUSH
73161: LD_VAR 0 4
73165: ARRAY
73166: PUSH
73167: LD_VAR 0 2
73171: PUSH
73172: LD_VAR 0 4
73176: ARRAY
73177: PPUSH
73178: CALL_OW 255
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PPUSH
73187: CALL 15446 0 3
73191: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
73192: LD_VAR 0 2
73196: PUSH
73197: LD_VAR 0 4
73201: ARRAY
73202: PPUSH
73203: LD_VAR 0 1
73207: PPUSH
73208: CALL_OW 255
73212: PPUSH
73213: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
73217: LD_VAR 0 2
73221: PUSH
73222: LD_VAR 0 4
73226: ARRAY
73227: PPUSH
73228: CALL_OW 141
// end ;
73232: GO 73064
73234: POP
73235: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73236: LD_VAR 0 1
73240: PPUSH
73241: LD_EXP 102
73245: PUSH
73246: LD_VAR 0 5
73250: ARRAY
73251: PUSH
73252: LD_INT 0
73254: PLUS
73255: PPUSH
73256: CALL_OW 505
// end ;
73260: LD_VAR 0 3
73264: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
73265: LD_INT 0
73267: PPUSH
73268: PPUSH
73269: PPUSH
73270: PPUSH
// if not hack in hackTanks then
73271: LD_VAR 0 1
73275: PUSH
73276: LD_EXP 101
73280: IN
73281: NOT
73282: IFFALSE 73286
// exit ;
73284: GO 73530
// index := GetElementIndex ( hackTanks , hack ) ;
73286: LD_ADDR_VAR 0 4
73290: PUSH
73291: LD_EXP 101
73295: PPUSH
73296: LD_VAR 0 1
73300: PPUSH
73301: CALL 15229 0 2
73305: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
73306: LD_ADDR_VAR 0 3
73310: PUSH
73311: DOUBLE
73312: LD_EXP 102
73316: PUSH
73317: LD_VAR 0 4
73321: ARRAY
73322: INC
73323: ST_TO_ADDR
73324: LD_INT 1
73326: PUSH
73327: FOR_DOWNTO
73328: IFFALSE 73504
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
73330: LD_ADDR_VAR 0 5
73334: PUSH
73335: LD_EXP 102
73339: PUSH
73340: LD_VAR 0 4
73344: ARRAY
73345: PUSH
73346: LD_VAR 0 3
73350: ARRAY
73351: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
73352: LD_VAR 0 5
73356: PUSH
73357: LD_INT 1
73359: ARRAY
73360: PPUSH
73361: CALL_OW 302
73365: NOT
73366: IFTRUE 73394
73368: PUSH
73369: LD_VAR 0 5
73373: PUSH
73374: LD_INT 1
73376: ARRAY
73377: PPUSH
73378: CALL_OW 255
73382: PUSH
73383: LD_VAR 0 1
73387: PPUSH
73388: CALL_OW 255
73392: NONEQUAL
73393: OR
73394: IFFALSE 73502
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
73396: LD_VAR 0 5
73400: PUSH
73401: LD_INT 1
73403: ARRAY
73404: PPUSH
73405: CALL_OW 305
73409: IFFALSE 73437
73411: PUSH
73412: LD_VAR 0 5
73416: PUSH
73417: LD_INT 1
73419: ARRAY
73420: PPUSH
73421: CALL_OW 255
73425: PUSH
73426: LD_VAR 0 1
73430: PPUSH
73431: CALL_OW 255
73435: EQUAL
73436: AND
73437: IFFALSE 73461
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
73439: LD_VAR 0 5
73443: PUSH
73444: LD_INT 1
73446: ARRAY
73447: PPUSH
73448: LD_VAR 0 5
73452: PUSH
73453: LD_INT 2
73455: ARRAY
73456: PPUSH
73457: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
73461: LD_ADDR_EXP 102
73465: PUSH
73466: LD_EXP 102
73470: PPUSH
73471: LD_VAR 0 4
73475: PPUSH
73476: LD_EXP 102
73480: PUSH
73481: LD_VAR 0 4
73485: ARRAY
73486: PPUSH
73487: LD_VAR 0 3
73491: PPUSH
73492: CALL_OW 3
73496: PPUSH
73497: CALL_OW 1
73501: ST_TO_ADDR
// end ; end ;
73502: GO 73327
73504: POP
73505: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73506: LD_VAR 0 1
73510: PPUSH
73511: LD_EXP 102
73515: PUSH
73516: LD_VAR 0 4
73520: ARRAY
73521: PUSH
73522: LD_INT 0
73524: PLUS
73525: PPUSH
73526: CALL_OW 505
// end ;
73530: LD_VAR 0 2
73534: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
73535: LD_INT 0
73537: PPUSH
73538: PPUSH
73539: PPUSH
73540: PPUSH
// if not hack in hackTanks then
73541: LD_VAR 0 1
73545: PUSH
73546: LD_EXP 101
73550: IN
73551: NOT
73552: IFFALSE 73556
// exit ;
73554: GO 73641
// index := GetElementIndex ( hackTanks , hack ) ;
73556: LD_ADDR_VAR 0 5
73560: PUSH
73561: LD_EXP 101
73565: PPUSH
73566: LD_VAR 0 1
73570: PPUSH
73571: CALL 15229 0 2
73575: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
73576: LD_ADDR_VAR 0 4
73580: PUSH
73581: DOUBLE
73582: LD_INT 1
73584: DEC
73585: ST_TO_ADDR
73586: LD_EXP 102
73590: PUSH
73591: LD_VAR 0 5
73595: ARRAY
73596: PUSH
73597: FOR_TO
73598: IFFALSE 73639
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
73600: LD_EXP 102
73604: PUSH
73605: LD_VAR 0 5
73609: ARRAY
73610: PUSH
73611: LD_VAR 0 4
73615: ARRAY
73616: PUSH
73617: LD_INT 1
73619: ARRAY
73620: PUSH
73621: LD_VAR 0 2
73625: EQUAL
73626: IFFALSE 73637
// KillUnit ( vehicle ) ;
73628: LD_VAR 0 2
73632: PPUSH
73633: CALL_OW 66
73637: GO 73597
73639: POP
73640: POP
// end ;
73641: LD_VAR 0 3
73645: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
73646: LD_EXP 106
73650: NOT
73651: IFFALSE 73784
73653: GO 73655
73655: DISABLE
73656: LD_INT 0
73658: PPUSH
// begin initMiner := true ;
73659: LD_ADDR_EXP 106
73663: PUSH
73664: LD_INT 1
73666: ST_TO_ADDR
// minersList := [ ] ;
73667: LD_ADDR_EXP 107
73671: PUSH
73672: EMPTY
73673: ST_TO_ADDR
// minerMinesList := [ ] ;
73674: LD_ADDR_EXP 108
73678: PUSH
73679: EMPTY
73680: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
73681: LD_ADDR_EXP 109
73685: PUSH
73686: LD_INT 10
73688: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
73689: LD_ADDR_VAR 0 1
73693: PUSH
73694: LD_INT 34
73696: PUSH
73697: LD_INT 81
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PPUSH
73704: CALL_OW 69
73708: PUSH
73709: FOR_IN
73710: IFFALSE 73782
// begin if not i in minersList then
73712: LD_VAR 0 1
73716: PUSH
73717: LD_EXP 107
73721: IN
73722: NOT
73723: IFFALSE 73780
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
73725: LD_ADDR_EXP 107
73729: PUSH
73730: LD_EXP 107
73734: PPUSH
73735: LD_EXP 107
73739: PUSH
73740: LD_INT 1
73742: PLUS
73743: PPUSH
73744: LD_VAR 0 1
73748: PPUSH
73749: CALL_OW 1
73753: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
73754: LD_ADDR_EXP 108
73758: PUSH
73759: LD_EXP 108
73763: PPUSH
73764: LD_EXP 108
73768: PUSH
73769: LD_INT 1
73771: PLUS
73772: PPUSH
73773: EMPTY
73774: PPUSH
73775: CALL_OW 1
73779: ST_TO_ADDR
// end end ;
73780: GO 73709
73782: POP
73783: POP
// end ;
73784: PPOPN 1
73786: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
73787: LD_EXP 106
73791: IFFALSE 73822
73793: PUSH
73794: LD_EXP 108
73798: PPUSH
73799: CALL 12528 0 1
73803: IFTRUE 73821
73805: PUSH
73806: LD_INT 34
73808: PUSH
73809: LD_INT 81
73811: PUSH
73812: EMPTY
73813: LIST
73814: LIST
73815: PPUSH
73816: CALL_OW 69
73820: OR
73821: AND
73822: IFFALSE 74342
73824: GO 73826
73826: DISABLE
73827: LD_INT 0
73829: PPUSH
73830: PPUSH
73831: PPUSH
73832: PPUSH
// begin enable ;
73833: ENABLE
// for i := minerMinesList downto 1 do
73834: LD_ADDR_VAR 0 1
73838: PUSH
73839: DOUBLE
73840: LD_EXP 108
73844: INC
73845: ST_TO_ADDR
73846: LD_INT 1
73848: PUSH
73849: FOR_DOWNTO
73850: IFFALSE 74340
// begin side := GetSide ( minersList [ i ] ) ;
73852: LD_ADDR_VAR 0 3
73856: PUSH
73857: LD_EXP 107
73861: PUSH
73862: LD_VAR 0 1
73866: ARRAY
73867: PPUSH
73868: CALL_OW 255
73872: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
73873: LD_EXP 107
73877: PUSH
73878: LD_VAR 0 1
73882: ARRAY
73883: PPUSH
73884: CALL_OW 300
73888: IFFALSE 73909
73890: PUSH
73891: LD_VAR 0 3
73895: PUSH
73896: LD_OWVAR 2
73900: PUSH
73901: LD_INT 9
73903: PUSH
73904: EMPTY
73905: LIST
73906: LIST
73907: IN
73908: AND
73909: IFFALSE 73942
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
73911: LD_EXP 107
73915: PUSH
73916: LD_VAR 0 1
73920: ARRAY
73921: PPUSH
73922: LD_EXP 108
73926: PUSH
73927: LD_VAR 0 1
73931: ARRAY
73932: PPUSH
73933: CALL 12528 0 1
73937: PPUSH
73938: CALL_OW 505
// if not minerMinesList [ i ] then
73942: LD_EXP 108
73946: PUSH
73947: LD_VAR 0 1
73951: ARRAY
73952: NOT
73953: IFFALSE 73957
// continue ;
73955: GO 73849
// for j := minerMinesList [ i ] downto 1 do
73957: LD_ADDR_VAR 0 2
73961: PUSH
73962: DOUBLE
73963: LD_EXP 108
73967: PUSH
73968: LD_VAR 0 1
73972: ARRAY
73973: INC
73974: ST_TO_ADDR
73975: LD_INT 1
73977: PUSH
73978: FOR_DOWNTO
73979: IFFALSE 74336
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
73981: LD_EXP 107
73985: PUSH
73986: LD_VAR 0 1
73990: ARRAY
73991: PPUSH
73992: CALL_OW 301
73996: IFTRUE 74016
73998: PUSH
73999: LD_EXP 107
74003: PUSH
74004: LD_VAR 0 1
74008: ARRAY
74009: PPUSH
74010: CALL_OW 305
74014: NOT
74015: OR
74016: IFFALSE 74107
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
74018: LD_EXP 108
74022: PUSH
74023: LD_VAR 0 1
74027: ARRAY
74028: PUSH
74029: LD_VAR 0 2
74033: ARRAY
74034: PUSH
74035: LD_INT 1
74037: ARRAY
74038: PPUSH
74039: LD_EXP 108
74043: PUSH
74044: LD_VAR 0 1
74048: ARRAY
74049: PUSH
74050: LD_VAR 0 2
74054: ARRAY
74055: PUSH
74056: LD_INT 2
74058: ARRAY
74059: PPUSH
74060: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74064: LD_ADDR_EXP 108
74068: PUSH
74069: LD_EXP 108
74073: PPUSH
74074: LD_VAR 0 1
74078: PPUSH
74079: LD_EXP 108
74083: PUSH
74084: LD_VAR 0 1
74088: ARRAY
74089: PPUSH
74090: LD_VAR 0 2
74094: PPUSH
74095: CALL_OW 3
74099: PPUSH
74100: CALL_OW 1
74104: ST_TO_ADDR
// continue ;
74105: GO 73978
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
74107: LD_ADDR_VAR 0 4
74111: PUSH
74112: LD_EXP 108
74116: PUSH
74117: LD_VAR 0 1
74121: ARRAY
74122: PUSH
74123: LD_VAR 0 2
74127: ARRAY
74128: PUSH
74129: LD_INT 1
74131: ARRAY
74132: PPUSH
74133: LD_EXP 108
74137: PUSH
74138: LD_VAR 0 1
74142: ARRAY
74143: PUSH
74144: LD_VAR 0 2
74148: ARRAY
74149: PUSH
74150: LD_INT 2
74152: ARRAY
74153: PPUSH
74154: CALL_OW 428
74158: ST_TO_ADDR
// if not tmp then
74159: LD_VAR 0 4
74163: NOT
74164: IFFALSE 74168
// continue ;
74166: GO 73978
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
74168: LD_VAR 0 4
74172: PUSH
74173: LD_INT 81
74175: PUSH
74176: LD_VAR 0 3
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PPUSH
74185: CALL_OW 69
74189: IN
74190: IFFALSE 74240
74192: PUSH
74193: LD_EXP 108
74197: PUSH
74198: LD_VAR 0 1
74202: ARRAY
74203: PUSH
74204: LD_VAR 0 2
74208: ARRAY
74209: PUSH
74210: LD_INT 1
74212: ARRAY
74213: PPUSH
74214: LD_EXP 108
74218: PUSH
74219: LD_VAR 0 1
74223: ARRAY
74224: PUSH
74225: LD_VAR 0 2
74229: ARRAY
74230: PUSH
74231: LD_INT 2
74233: ARRAY
74234: PPUSH
74235: CALL_OW 458
74239: AND
74240: IFFALSE 74334
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
74242: LD_EXP 108
74246: PUSH
74247: LD_VAR 0 1
74251: ARRAY
74252: PUSH
74253: LD_VAR 0 2
74257: ARRAY
74258: PUSH
74259: LD_INT 1
74261: ARRAY
74262: PPUSH
74263: LD_EXP 108
74267: PUSH
74268: LD_VAR 0 1
74272: ARRAY
74273: PUSH
74274: LD_VAR 0 2
74278: ARRAY
74279: PUSH
74280: LD_INT 2
74282: ARRAY
74283: PPUSH
74284: LD_VAR 0 3
74288: PPUSH
74289: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74293: LD_ADDR_EXP 108
74297: PUSH
74298: LD_EXP 108
74302: PPUSH
74303: LD_VAR 0 1
74307: PPUSH
74308: LD_EXP 108
74312: PUSH
74313: LD_VAR 0 1
74317: ARRAY
74318: PPUSH
74319: LD_VAR 0 2
74323: PPUSH
74324: CALL_OW 3
74328: PPUSH
74329: CALL_OW 1
74333: ST_TO_ADDR
// end ; end ;
74334: GO 73978
74336: POP
74337: POP
// end ;
74338: GO 73849
74340: POP
74341: POP
// end ;
74342: PPOPN 4
74344: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
74345: LD_INT 0
74347: PPUSH
74348: PPUSH
74349: PPUSH
74350: PPUSH
// result := false ;
74351: LD_ADDR_VAR 0 4
74355: PUSH
74356: LD_INT 0
74358: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
74359: LD_VAR 0 1
74363: PPUSH
74364: CALL_OW 264
74368: PUSH
74369: LD_INT 81
74371: EQUAL
74372: NOT
74373: IFFALSE 74377
// exit ;
74375: GO 74747
// side := GetSide ( unit ) ;
74377: LD_ADDR_VAR 0 6
74381: PUSH
74382: LD_VAR 0 1
74386: PPUSH
74387: CALL_OW 255
74391: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
74392: LD_ADDR_VAR 0 5
74396: PUSH
74397: LD_EXP 107
74401: PPUSH
74402: LD_VAR 0 1
74406: PPUSH
74407: CALL 15229 0 2
74411: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
74412: LD_EXP 108
74416: PUSH
74417: LD_VAR 0 5
74421: ARRAY
74422: PUSH
74423: LD_EXP 109
74427: GREATEREQUAL
74428: IFFALSE 74432
// exit ;
74430: GO 74747
// ComMoveXY ( unit , x , y ) ;
74432: LD_VAR 0 1
74436: PPUSH
74437: LD_VAR 0 2
74441: PPUSH
74442: LD_VAR 0 3
74446: PPUSH
74447: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74451: LD_INT 35
74453: PPUSH
74454: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
74458: LD_VAR 0 1
74462: PPUSH
74463: LD_VAR 0 2
74467: PPUSH
74468: LD_VAR 0 3
74472: PPUSH
74473: CALL 47285 0 3
74477: NOT
74478: IFFALSE 74491
74480: PUSH
74481: LD_VAR 0 1
74485: PPUSH
74486: CALL_OW 314
74490: AND
74491: IFFALSE 74495
// exit ;
74493: GO 74747
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
74495: LD_VAR 0 2
74499: PPUSH
74500: LD_VAR 0 3
74504: PPUSH
74505: CALL_OW 428
74509: PUSH
74510: LD_VAR 0 1
74514: EQUAL
74515: IFFALSE 74529
74517: PUSH
74518: LD_VAR 0 1
74522: PPUSH
74523: CALL_OW 314
74527: NOT
74528: AND
74529: IFFALSE 74451
// if MineAtPos ( x , y ) then
74531: LD_VAR 0 2
74535: PPUSH
74536: LD_VAR 0 3
74540: PPUSH
74541: CALL_OW 458
74545: IFFALSE 74549
// exit ;
74547: GO 74747
// if your_side = side then
74549: LD_OWVAR 2
74553: PUSH
74554: LD_VAR 0 6
74558: EQUAL
74559: IFFALSE 74578
// PlaySoundXY ( x , y , PlantMine ) ;
74561: LD_VAR 0 2
74565: PPUSH
74566: LD_VAR 0 3
74570: PPUSH
74571: LD_STRING PlantMine
74573: PPUSH
74574: CALL_OW 366
// repeat wait ( 1 ) ;
74578: LD_INT 1
74580: PPUSH
74581: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
74585: LD_VAR 0 2
74589: PPUSH
74590: LD_VAR 0 3
74594: PPUSH
74595: LD_VAR 0 6
74599: PPUSH
74600: LD_INT 0
74602: PPUSH
74603: CALL_OW 454
74607: IFFALSE 74578
// if MineAtPos ( x , y ) then
74609: LD_VAR 0 2
74613: PPUSH
74614: LD_VAR 0 3
74618: PPUSH
74619: CALL_OW 458
74623: IFFALSE 74739
// begin for i in minerMinesList [ index ] do
74625: LD_ADDR_VAR 0 7
74629: PUSH
74630: LD_EXP 108
74634: PUSH
74635: LD_VAR 0 5
74639: ARRAY
74640: PUSH
74641: FOR_IN
74642: IFFALSE 74684
// if i [ 1 ] = x and i [ 2 ] = y then
74644: LD_VAR 0 7
74648: PUSH
74649: LD_INT 1
74651: ARRAY
74652: PUSH
74653: LD_VAR 0 2
74657: EQUAL
74658: IFFALSE 74676
74660: PUSH
74661: LD_VAR 0 7
74665: PUSH
74666: LD_INT 2
74668: ARRAY
74669: PUSH
74670: LD_VAR 0 3
74674: EQUAL
74675: AND
74676: IFFALSE 74682
// exit ;
74678: POP
74679: POP
74680: GO 74747
74682: GO 74641
74684: POP
74685: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
74686: LD_ADDR_EXP 108
74690: PUSH
74691: LD_EXP 108
74695: PPUSH
74696: LD_VAR 0 5
74700: PUSH
74701: LD_EXP 108
74705: PUSH
74706: LD_VAR 0 5
74710: ARRAY
74711: PUSH
74712: LD_INT 1
74714: PLUS
74715: PUSH
74716: EMPTY
74717: LIST
74718: LIST
74719: PPUSH
74720: LD_VAR 0 2
74724: PUSH
74725: LD_VAR 0 3
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PPUSH
74734: CALL 15446 0 3
74738: ST_TO_ADDR
// end ; result := true ;
74739: LD_ADDR_VAR 0 4
74743: PUSH
74744: LD_INT 1
74746: ST_TO_ADDR
// end ;
74747: LD_VAR 0 4
74751: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
74752: LD_INT 0
74754: PPUSH
74755: PPUSH
74756: PPUSH
// if not unit in minersList then
74757: LD_VAR 0 1
74761: PUSH
74762: LD_EXP 107
74766: IN
74767: NOT
74768: IFFALSE 74772
// exit ;
74770: GO 74979
// index := GetElementIndex ( minersList , unit ) ;
74772: LD_ADDR_VAR 0 6
74776: PUSH
74777: LD_EXP 107
74781: PPUSH
74782: LD_VAR 0 1
74786: PPUSH
74787: CALL 15229 0 2
74791: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
74792: LD_ADDR_VAR 0 5
74796: PUSH
74797: DOUBLE
74798: LD_EXP 108
74802: PUSH
74803: LD_VAR 0 6
74807: ARRAY
74808: INC
74809: ST_TO_ADDR
74810: LD_INT 1
74812: PUSH
74813: FOR_DOWNTO
74814: IFFALSE 74977
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
74816: LD_EXP 108
74820: PUSH
74821: LD_VAR 0 6
74825: ARRAY
74826: PUSH
74827: LD_VAR 0 5
74831: ARRAY
74832: PUSH
74833: LD_INT 1
74835: ARRAY
74836: PPUSH
74837: LD_EXP 108
74841: PUSH
74842: LD_VAR 0 6
74846: ARRAY
74847: PUSH
74848: LD_VAR 0 5
74852: ARRAY
74853: PUSH
74854: LD_INT 2
74856: ARRAY
74857: PPUSH
74858: LD_VAR 0 2
74862: PPUSH
74863: LD_VAR 0 3
74867: PPUSH
74868: CALL_OW 298
74872: PUSH
74873: LD_INT 6
74875: LESS
74876: IFFALSE 74975
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
74878: LD_EXP 108
74882: PUSH
74883: LD_VAR 0 6
74887: ARRAY
74888: PUSH
74889: LD_VAR 0 5
74893: ARRAY
74894: PUSH
74895: LD_INT 1
74897: ARRAY
74898: PPUSH
74899: LD_EXP 108
74903: PUSH
74904: LD_VAR 0 6
74908: ARRAY
74909: PUSH
74910: LD_VAR 0 5
74914: ARRAY
74915: PUSH
74916: LD_INT 2
74918: ARRAY
74919: PPUSH
74920: LD_VAR 0 1
74924: PPUSH
74925: CALL_OW 255
74929: PPUSH
74930: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
74934: LD_ADDR_EXP 108
74938: PUSH
74939: LD_EXP 108
74943: PPUSH
74944: LD_VAR 0 6
74948: PPUSH
74949: LD_EXP 108
74953: PUSH
74954: LD_VAR 0 6
74958: ARRAY
74959: PPUSH
74960: LD_VAR 0 5
74964: PPUSH
74965: CALL_OW 3
74969: PPUSH
74970: CALL_OW 1
74974: ST_TO_ADDR
// end ; end ;
74975: GO 74813
74977: POP
74978: POP
// end ;
74979: LD_VAR 0 4
74983: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
74984: LD_INT 0
74986: PPUSH
74987: PPUSH
74988: PPUSH
74989: PPUSH
74990: PPUSH
74991: PPUSH
74992: PPUSH
74993: PPUSH
74994: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
74995: LD_VAR 0 1
74999: PPUSH
75000: CALL_OW 264
75004: PUSH
75005: LD_INT 81
75007: EQUAL
75008: NOT
75009: IFTRUE 75024
75011: PUSH
75012: LD_VAR 0 1
75016: PUSH
75017: LD_EXP 107
75021: IN
75022: NOT
75023: OR
75024: IFFALSE 75028
// exit ;
75026: GO 75354
// index := GetElementIndex ( minersList , unit ) ;
75028: LD_ADDR_VAR 0 6
75032: PUSH
75033: LD_EXP 107
75037: PPUSH
75038: LD_VAR 0 1
75042: PPUSH
75043: CALL 15229 0 2
75047: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
75048: LD_ADDR_VAR 0 8
75052: PUSH
75053: LD_EXP 109
75057: PUSH
75058: LD_EXP 108
75062: PUSH
75063: LD_VAR 0 6
75067: ARRAY
75068: MINUS
75069: ST_TO_ADDR
// if not minesFreeAmount then
75070: LD_VAR 0 8
75074: NOT
75075: IFFALSE 75079
// exit ;
75077: GO 75354
// tmp := [ ] ;
75079: LD_ADDR_VAR 0 7
75083: PUSH
75084: EMPTY
75085: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
75086: LD_ADDR_VAR 0 5
75090: PUSH
75091: DOUBLE
75092: LD_INT 1
75094: DEC
75095: ST_TO_ADDR
75096: LD_VAR 0 8
75100: PUSH
75101: FOR_TO
75102: IFFALSE 75301
// begin _d := rand ( 0 , 5 ) ;
75104: LD_ADDR_VAR 0 11
75108: PUSH
75109: LD_INT 0
75111: PPUSH
75112: LD_INT 5
75114: PPUSH
75115: CALL_OW 12
75119: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
75120: LD_ADDR_VAR 0 12
75124: PUSH
75125: LD_INT 2
75127: PPUSH
75128: LD_INT 6
75130: PPUSH
75131: CALL_OW 12
75135: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
75136: LD_ADDR_VAR 0 9
75140: PUSH
75141: LD_VAR 0 2
75145: PPUSH
75146: LD_VAR 0 11
75150: PPUSH
75151: LD_VAR 0 12
75155: PPUSH
75156: CALL_OW 272
75160: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
75161: LD_ADDR_VAR 0 10
75165: PUSH
75166: LD_VAR 0 3
75170: PPUSH
75171: LD_VAR 0 11
75175: PPUSH
75176: LD_VAR 0 12
75180: PPUSH
75181: CALL_OW 273
75185: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
75186: LD_VAR 0 9
75190: PPUSH
75191: LD_VAR 0 10
75195: PPUSH
75196: CALL_OW 488
75200: IFFALSE 75224
75202: PUSH
75203: LD_VAR 0 9
75207: PUSH
75208: LD_VAR 0 10
75212: PUSH
75213: EMPTY
75214: LIST
75215: LIST
75216: PUSH
75217: LD_VAR 0 7
75221: IN
75222: NOT
75223: AND
75224: IFFALSE 75243
75226: PUSH
75227: LD_VAR 0 9
75231: PPUSH
75232: LD_VAR 0 10
75236: PPUSH
75237: CALL_OW 458
75241: NOT
75242: AND
75243: IFFALSE 75285
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
75245: LD_ADDR_VAR 0 7
75249: PUSH
75250: LD_VAR 0 7
75254: PPUSH
75255: LD_VAR 0 7
75259: PUSH
75260: LD_INT 1
75262: PLUS
75263: PPUSH
75264: LD_VAR 0 9
75268: PUSH
75269: LD_VAR 0 10
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PPUSH
75278: CALL_OW 1
75282: ST_TO_ADDR
75283: GO 75299
// i := i - 1 ;
75285: LD_ADDR_VAR 0 5
75289: PUSH
75290: LD_VAR 0 5
75294: PUSH
75295: LD_INT 1
75297: MINUS
75298: ST_TO_ADDR
// end ;
75299: GO 75101
75301: POP
75302: POP
// for i in tmp do
75303: LD_ADDR_VAR 0 5
75307: PUSH
75308: LD_VAR 0 7
75312: PUSH
75313: FOR_IN
75314: IFFALSE 75352
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
75316: LD_VAR 0 1
75320: PPUSH
75321: LD_VAR 0 5
75325: PUSH
75326: LD_INT 1
75328: ARRAY
75329: PPUSH
75330: LD_VAR 0 5
75334: PUSH
75335: LD_INT 2
75337: ARRAY
75338: PPUSH
75339: CALL 74345 0 3
75343: NOT
75344: IFFALSE 75350
// exit ;
75346: POP
75347: POP
75348: GO 75354
75350: GO 75313
75352: POP
75353: POP
// end ;
75354: LD_VAR 0 4
75358: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
75359: LD_INT 0
75361: PPUSH
75362: PPUSH
75363: PPUSH
75364: PPUSH
75365: PPUSH
75366: PPUSH
75367: PPUSH
75368: PPUSH
75369: PPUSH
// if GetClass ( unit ) <> class_sniper then
75370: LD_VAR 0 1
75374: PPUSH
75375: CALL_OW 257
75379: PUSH
75380: LD_INT 5
75382: NONEQUAL
75383: IFFALSE 75387
// exit ;
75385: GO 75857
// dist := 8 ;
75387: LD_ADDR_VAR 0 5
75391: PUSH
75392: LD_INT 8
75394: ST_TO_ADDR
// viewRange := 12 ;
75395: LD_ADDR_VAR 0 8
75399: PUSH
75400: LD_INT 12
75402: ST_TO_ADDR
// side := GetSide ( unit ) ;
75403: LD_ADDR_VAR 0 6
75407: PUSH
75408: LD_VAR 0 1
75412: PPUSH
75413: CALL_OW 255
75417: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
75418: LD_INT 61
75420: PPUSH
75421: LD_VAR 0 6
75425: PPUSH
75426: CALL_OW 321
75430: PUSH
75431: LD_INT 2
75433: EQUAL
75434: IFFALSE 75444
// viewRange := 16 ;
75436: LD_ADDR_VAR 0 8
75440: PUSH
75441: LD_INT 16
75443: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
75444: LD_VAR 0 1
75448: PPUSH
75449: LD_VAR 0 2
75453: PPUSH
75454: LD_VAR 0 3
75458: PPUSH
75459: CALL_OW 297
75463: PUSH
75464: LD_VAR 0 5
75468: GREATER
75469: IFFALSE 75548
// begin ComMoveXY ( unit , x , y ) ;
75471: LD_VAR 0 1
75475: PPUSH
75476: LD_VAR 0 2
75480: PPUSH
75481: LD_VAR 0 3
75485: PPUSH
75486: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75490: LD_INT 35
75492: PPUSH
75493: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
75497: LD_VAR 0 1
75501: PPUSH
75502: LD_VAR 0 2
75506: PPUSH
75507: LD_VAR 0 3
75511: PPUSH
75512: CALL 47285 0 3
75516: NOT
75517: IFFALSE 75521
// exit ;
75519: GO 75857
// until GetDistUnitXY ( unit , x , y ) < dist ;
75521: LD_VAR 0 1
75525: PPUSH
75526: LD_VAR 0 2
75530: PPUSH
75531: LD_VAR 0 3
75535: PPUSH
75536: CALL_OW 297
75540: PUSH
75541: LD_VAR 0 5
75545: LESS
75546: IFFALSE 75490
// end ; ComTurnXY ( unit , x , y ) ;
75548: LD_VAR 0 1
75552: PPUSH
75553: LD_VAR 0 2
75557: PPUSH
75558: LD_VAR 0 3
75562: PPUSH
75563: CALL_OW 118
// repeat if Multiplayer then
75567: LD_OWVAR 4
75571: IFFALSE 75582
// wait ( 35 ) else
75573: LD_INT 35
75575: PPUSH
75576: CALL_OW 67
75580: GO 75589
// wait ( 5 ) ;
75582: LD_INT 5
75584: PPUSH
75585: CALL_OW 67
// _d := GetDir ( unit ) ;
75589: LD_ADDR_VAR 0 11
75593: PUSH
75594: LD_VAR 0 1
75598: PPUSH
75599: CALL_OW 254
75603: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
75604: LD_ADDR_VAR 0 7
75608: PUSH
75609: LD_VAR 0 1
75613: PPUSH
75614: CALL_OW 250
75618: PPUSH
75619: LD_VAR 0 1
75623: PPUSH
75624: CALL_OW 251
75628: PPUSH
75629: LD_VAR 0 2
75633: PPUSH
75634: LD_VAR 0 3
75638: PPUSH
75639: CALL 49921 0 4
75643: ST_TO_ADDR
// until dir = _d ;
75644: LD_VAR 0 7
75648: PUSH
75649: LD_VAR 0 11
75653: EQUAL
75654: IFFALSE 75567
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
75656: LD_ADDR_VAR 0 9
75660: PUSH
75661: LD_VAR 0 1
75665: PPUSH
75666: CALL_OW 250
75670: PPUSH
75671: LD_VAR 0 7
75675: PPUSH
75676: LD_VAR 0 5
75680: PPUSH
75681: CALL_OW 272
75685: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
75686: LD_ADDR_VAR 0 10
75690: PUSH
75691: LD_VAR 0 1
75695: PPUSH
75696: CALL_OW 251
75700: PPUSH
75701: LD_VAR 0 7
75705: PPUSH
75706: LD_VAR 0 5
75710: PPUSH
75711: CALL_OW 273
75715: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75716: LD_VAR 0 9
75720: PPUSH
75721: LD_VAR 0 10
75725: PPUSH
75726: CALL_OW 488
75730: NOT
75731: IFFALSE 75735
// exit ;
75733: GO 75857
// ComAnimCustom ( unit , 1 ) ;
75735: LD_VAR 0 1
75739: PPUSH
75740: LD_INT 1
75742: PPUSH
75743: CALL_OW 592
// p := 0 ;
75747: LD_ADDR_VAR 0 12
75751: PUSH
75752: LD_INT 0
75754: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
75755: LD_VAR 0 9
75759: PPUSH
75760: LD_VAR 0 10
75764: PPUSH
75765: LD_VAR 0 6
75769: PPUSH
75770: LD_VAR 0 8
75774: PPUSH
75775: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
75779: LD_INT 35
75781: PPUSH
75782: CALL_OW 67
// p := Inc ( p ) ;
75786: LD_ADDR_VAR 0 12
75790: PUSH
75791: LD_VAR 0 12
75795: PPUSH
75796: CALL 49877 0 1
75800: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
75801: LD_VAR 0 12
75805: PUSH
75806: LD_INT 3
75808: EQUAL
75809: IFTRUE 75823
75811: PUSH
75812: LD_VAR 0 1
75816: PPUSH
75817: CALL_OW 302
75821: NOT
75822: OR
75823: IFTRUE 75836
75825: PUSH
75826: LD_VAR 0 1
75830: PPUSH
75831: CALL_OW 301
75835: OR
75836: IFFALSE 75779
// RemoveSeeing ( _x , _y , side ) ;
75838: LD_VAR 0 9
75842: PPUSH
75843: LD_VAR 0 10
75847: PPUSH
75848: LD_VAR 0 6
75852: PPUSH
75853: CALL_OW 331
// end ;
75857: LD_VAR 0 4
75861: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
75862: LD_INT 0
75864: PPUSH
75865: PPUSH
75866: PPUSH
75867: PPUSH
75868: PPUSH
75869: PPUSH
75870: PPUSH
75871: PPUSH
75872: PPUSH
75873: PPUSH
75874: PPUSH
// if not unit then
75875: LD_VAR 0 1
75879: NOT
75880: IFFALSE 75884
// exit ;
75882: GO 76155
// side := GetSide ( unit ) ;
75884: LD_ADDR_VAR 0 3
75888: PUSH
75889: LD_VAR 0 1
75893: PPUSH
75894: CALL_OW 255
75898: ST_TO_ADDR
// x := GetX ( unit ) ;
75899: LD_ADDR_VAR 0 5
75903: PUSH
75904: LD_VAR 0 1
75908: PPUSH
75909: CALL_OW 250
75913: ST_TO_ADDR
// y := GetY ( unit ) ;
75914: LD_ADDR_VAR 0 6
75918: PUSH
75919: LD_VAR 0 1
75923: PPUSH
75924: CALL_OW 251
75928: ST_TO_ADDR
// r := 8 ;
75929: LD_ADDR_VAR 0 4
75933: PUSH
75934: LD_INT 8
75936: ST_TO_ADDR
// if x - r < 0 then
75937: LD_VAR 0 5
75941: PUSH
75942: LD_VAR 0 4
75946: MINUS
75947: PUSH
75948: LD_INT 0
75950: LESS
75951: IFFALSE 75963
// min_x := 0 else
75953: LD_ADDR_VAR 0 7
75957: PUSH
75958: LD_INT 0
75960: ST_TO_ADDR
75961: GO 75979
// min_x := x - r ;
75963: LD_ADDR_VAR 0 7
75967: PUSH
75968: LD_VAR 0 5
75972: PUSH
75973: LD_VAR 0 4
75977: MINUS
75978: ST_TO_ADDR
// if y - r < 0 then
75979: LD_VAR 0 6
75983: PUSH
75984: LD_VAR 0 4
75988: MINUS
75989: PUSH
75990: LD_INT 0
75992: LESS
75993: IFFALSE 76005
// min_y := 0 else
75995: LD_ADDR_VAR 0 8
75999: PUSH
76000: LD_INT 0
76002: ST_TO_ADDR
76003: GO 76021
// min_y := y - r ;
76005: LD_ADDR_VAR 0 8
76009: PUSH
76010: LD_VAR 0 6
76014: PUSH
76015: LD_VAR 0 4
76019: MINUS
76020: ST_TO_ADDR
// max_x := x + r ;
76021: LD_ADDR_VAR 0 9
76025: PUSH
76026: LD_VAR 0 5
76030: PUSH
76031: LD_VAR 0 4
76035: PLUS
76036: ST_TO_ADDR
// max_y := y + r ;
76037: LD_ADDR_VAR 0 10
76041: PUSH
76042: LD_VAR 0 6
76046: PUSH
76047: LD_VAR 0 4
76051: PLUS
76052: ST_TO_ADDR
// for _x = min_x to max_x do
76053: LD_ADDR_VAR 0 11
76057: PUSH
76058: DOUBLE
76059: LD_VAR 0 7
76063: DEC
76064: ST_TO_ADDR
76065: LD_VAR 0 9
76069: PUSH
76070: FOR_TO
76071: IFFALSE 76153
// for _y = min_y to max_y do
76073: LD_ADDR_VAR 0 12
76077: PUSH
76078: DOUBLE
76079: LD_VAR 0 8
76083: DEC
76084: ST_TO_ADDR
76085: LD_VAR 0 10
76089: PUSH
76090: FOR_TO
76091: IFFALSE 76149
// begin if not ValidHex ( _x , _y ) then
76093: LD_VAR 0 11
76097: PPUSH
76098: LD_VAR 0 12
76102: PPUSH
76103: CALL_OW 488
76107: NOT
76108: IFFALSE 76112
// continue ;
76110: GO 76090
// if MineAtPos ( _x , _y ) then
76112: LD_VAR 0 11
76116: PPUSH
76117: LD_VAR 0 12
76121: PPUSH
76122: CALL_OW 458
76126: IFFALSE 76147
// ViewMineAtPos ( _x , _y , side ) ;
76128: LD_VAR 0 11
76132: PPUSH
76133: LD_VAR 0 12
76137: PPUSH
76138: LD_VAR 0 3
76142: PPUSH
76143: CALL_OW 457
// end ;
76147: GO 76090
76149: POP
76150: POP
76151: GO 76070
76153: POP
76154: POP
// end ;
76155: LD_VAR 0 2
76159: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
76160: LD_INT 0
76162: PPUSH
76163: PPUSH
76164: PPUSH
76165: PPUSH
76166: PPUSH
76167: PPUSH
76168: PPUSH
// if not units then
76169: LD_VAR 0 1
76173: NOT
76174: IFFALSE 76178
// exit ;
76176: GO 76642
// scaners := [ ] ;
76178: LD_ADDR_VAR 0 6
76182: PUSH
76183: EMPTY
76184: ST_TO_ADDR
// for i in units do
76185: LD_ADDR_VAR 0 3
76189: PUSH
76190: LD_VAR 0 1
76194: PUSH
76195: FOR_IN
76196: IFFALSE 76353
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
76198: LD_VAR 0 3
76202: PPUSH
76203: CALL_OW 264
76207: PUSH
76208: LD_INT 11
76210: NONEQUAL
76211: IFTRUE 76225
76213: PUSH
76214: LD_VAR 0 3
76218: PPUSH
76219: CALL_OW 302
76223: NOT
76224: OR
76225: IFTRUE 76242
76227: PUSH
76228: LD_VAR 0 3
76232: PPUSH
76233: CALL_OW 110
76237: PUSH
76238: LD_INT 502
76240: EQUAL
76241: OR
76242: IFFALSE 76246
// continue ;
76244: GO 76195
// ComStop ( i ) ;
76246: LD_VAR 0 3
76250: PPUSH
76251: CALL_OW 141
// x := GetX ( i ) ;
76255: LD_ADDR_VAR 0 4
76259: PUSH
76260: LD_VAR 0 3
76264: PPUSH
76265: CALL_OW 250
76269: ST_TO_ADDR
// y := GetY ( i ) ;
76270: LD_ADDR_VAR 0 5
76274: PUSH
76275: LD_VAR 0 3
76279: PPUSH
76280: CALL_OW 251
76284: ST_TO_ADDR
// if GetSide ( i ) = your_side then
76285: LD_VAR 0 3
76289: PPUSH
76290: CALL_OW 255
76294: PUSH
76295: LD_OWVAR 2
76299: EQUAL
76300: IFFALSE 76319
// PlaySoundXY ( x , y , mineDetector ) ;
76302: LD_VAR 0 4
76306: PPUSH
76307: LD_VAR 0 5
76311: PPUSH
76312: LD_STRING mineDetector
76314: PPUSH
76315: CALL_OW 366
// scaners := Join ( scaners , i ) ;
76319: LD_ADDR_VAR 0 6
76323: PUSH
76324: LD_VAR 0 6
76328: PPUSH
76329: LD_VAR 0 3
76333: PPUSH
76334: CALL 48504 0 2
76338: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
76339: LD_VAR 0 3
76343: PPUSH
76344: LD_INT 502
76346: PPUSH
76347: CALL_OW 109
// end ;
76351: GO 76195
76353: POP
76354: POP
// if not scaners then
76355: LD_VAR 0 6
76359: NOT
76360: IFFALSE 76364
// exit ;
76362: GO 76642
// wait ( 3 ) ;
76364: LD_INT 3
76366: PPUSH
76367: CALL_OW 67
// timer := 6 ;
76371: LD_ADDR_VAR 0 7
76375: PUSH
76376: LD_INT 6
76378: ST_TO_ADDR
// repeat for i in scaners do
76379: LD_ADDR_VAR 0 3
76383: PUSH
76384: LD_VAR 0 6
76388: PUSH
76389: FOR_IN
76390: IFFALSE 76540
// begin side := GetSide ( i ) ;
76392: LD_ADDR_VAR 0 8
76396: PUSH
76397: LD_VAR 0 3
76401: PPUSH
76402: CALL_OW 255
76406: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
76407: LD_VAR 0 3
76411: PPUSH
76412: CALL_OW 302
76416: NOT
76417: IFTRUE 76430
76419: PUSH
76420: LD_VAR 0 3
76424: PPUSH
76425: CALL_OW 314
76429: OR
76430: IFTRUE 76461
76432: PUSH
76433: LD_VAR 0 3
76437: PPUSH
76438: CALL_OW 263
76442: PUSH
76443: LD_INT 1
76445: EQUAL
76446: IFFALSE 76460
76448: PUSH
76449: LD_VAR 0 3
76453: PPUSH
76454: CALL_OW 311
76458: NOT
76459: AND
76460: OR
76461: IFFALSE 76505
// begin SetUnitDisplayNumber ( i , 0 ) ;
76463: LD_VAR 0 3
76467: PPUSH
76468: LD_INT 0
76470: PPUSH
76471: CALL_OW 505
// SetTag ( i , 0 ) ;
76475: LD_VAR 0 3
76479: PPUSH
76480: LD_INT 0
76482: PPUSH
76483: CALL_OW 109
// scaners := scaners diff i ;
76487: LD_ADDR_VAR 0 6
76491: PUSH
76492: LD_VAR 0 6
76496: PUSH
76497: LD_VAR 0 3
76501: DIFF
76502: ST_TO_ADDR
// continue ;
76503: GO 76389
// end ; if side in [ your_side , 9 ] then
76505: LD_VAR 0 8
76509: PUSH
76510: LD_OWVAR 2
76514: PUSH
76515: LD_INT 9
76517: PUSH
76518: EMPTY
76519: LIST
76520: LIST
76521: IN
76522: IFFALSE 76538
// SetUnitDisplayNumber ( i , timer ) ;
76524: LD_VAR 0 3
76528: PPUSH
76529: LD_VAR 0 7
76533: PPUSH
76534: CALL_OW 505
// end ;
76538: GO 76389
76540: POP
76541: POP
// if not scaners then
76542: LD_VAR 0 6
76546: NOT
76547: IFFALSE 76551
// exit ;
76549: GO 76642
// timer := Dec ( timer ) ;
76551: LD_ADDR_VAR 0 7
76555: PUSH
76556: LD_VAR 0 7
76560: PPUSH
76561: CALL 49899 0 1
76565: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76566: LD_INT 35
76568: PPUSH
76569: CALL_OW 67
// until timer = 0 ;
76573: LD_VAR 0 7
76577: PUSH
76578: LD_INT 0
76580: EQUAL
76581: IFFALSE 76379
// if not scaners then
76583: LD_VAR 0 6
76587: NOT
76588: IFFALSE 76592
// exit ;
76590: GO 76642
// for i in scaners do
76592: LD_ADDR_VAR 0 3
76596: PUSH
76597: LD_VAR 0 6
76601: PUSH
76602: FOR_IN
76603: IFFALSE 76640
// begin SetUnitDisplayNumber ( i , 0 ) ;
76605: LD_VAR 0 3
76609: PPUSH
76610: LD_INT 0
76612: PPUSH
76613: CALL_OW 505
// SetTag ( i , 0 ) ;
76617: LD_VAR 0 3
76621: PPUSH
76622: LD_INT 0
76624: PPUSH
76625: CALL_OW 109
// RevealDetectorMine ( i ) ;
76629: LD_VAR 0 3
76633: PPUSH
76634: CALL 75862 0 1
// end ;
76638: GO 76602
76640: POP
76641: POP
// end ;
76642: LD_VAR 0 2
76646: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
76647: LD_INT 0
76649: PPUSH
// if p1 = mine_detector_mode then
76650: LD_VAR 0 2
76654: PUSH
76655: LD_INT 103
76657: EQUAL
76658: IFFALSE 76669
// DetectMine ( units ) ;
76660: LD_VAR 0 1
76664: PPUSH
76665: CALL 76160 0 1
// end ;
76669: LD_VAR 0 7
76673: RET
