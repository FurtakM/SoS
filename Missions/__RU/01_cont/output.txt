// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12582 0 0
// PrepareAmericans ;
  28: CALL 12155 0 0
// CreateNature ;
  32: CALL 13286 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 34
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 35
 454: PUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_INT 6
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 37
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 38
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 39
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 40
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 32
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 37
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 37
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 46
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 46
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 46
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 46
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 46
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 46
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// end ;
1016: LD_VAR 0 1
1020: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1021: LD_EXP 46
1025: PPUSH
1026: LD_INT 74
1028: PPUSH
1029: LD_INT 88
1031: PPUSH
1032: CALL_OW 297
1036: PUSH
1037: LD_INT 5
1039: LESS
1040: PUSH
1041: LD_EXP 3
1045: AND
1046: IFFALSE 1071
1048: GO 1050
1050: DISABLE
// begin spotWaterfall = true ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1059: LD_EXP 46
1063: PPUSH
1064: LD_STRING DWaterfall-Bur-1
1066: PPUSH
1067: CALL_OW 88
// end ;
1071: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1072: LD_EXP 46
1076: PPUSH
1077: LD_INT 130
1079: PPUSH
1080: LD_INT 96
1082: PPUSH
1083: CALL_OW 297
1087: PUSH
1088: LD_INT 5
1090: LESS
1091: PUSH
1092: LD_EXP 3
1096: AND
1097: IFFALSE 1114
1099: GO 1101
1101: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1102: LD_EXP 46
1106: PPUSH
1107: LD_STRING DCorpse-Bur-1
1109: PPUSH
1110: CALL_OW 88
1114: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1115: LD_EXP 4
1119: NOT
1120: IFFALSE 1214
1122: GO 1124
1124: DISABLE
1125: LD_INT 0
1127: PPUSH
// begin enable ;
1128: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1129: LD_ADDR_VAR 0 1
1133: PUSH
1134: LD_INT 22
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 25
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PPUSH
1158: CALL_OW 69
1162: PUSH
1163: FOR_IN
1164: IFFALSE 1212
// if GetDistUnits ( apeman , Burlak ) < 7 then
1166: LD_VAR 0 1
1170: PPUSH
1171: LD_EXP 46
1175: PPUSH
1176: CALL_OW 296
1180: PUSH
1181: LD_INT 7
1183: LESS
1184: IFFALSE 1210
// begin apemansContact = true ;
1186: LD_ADDR_EXP 4
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1194: LD_EXP 46
1198: PPUSH
1199: LD_STRING D2-Bur-1
1201: PPUSH
1202: CALL_OW 88
// exit ;
1206: POP
1207: POP
1208: GO 1214
// end ;
1210: GO 1163
1212: POP
1213: POP
// end ;
1214: PPOPN 1
1216: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1217: LD_EXP 5
1221: NOT
1222: IFFALSE 1338
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
// begin enable ;
1231: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 0
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 25
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 69
1265: PUSH
1266: FOR_IN
1267: IFFALSE 1336
// if Attacks ( apeman ) then
1269: LD_VAR 0 2
1273: PPUSH
1274: CALL_OW 320
1278: IFFALSE 1334
// if GetSide ( Attacks ( apeman ) ) = 3 then
1280: LD_VAR 0 2
1284: PPUSH
1285: CALL_OW 320
1289: PPUSH
1290: CALL_OW 255
1294: PUSH
1295: LD_INT 3
1297: EQUAL
1298: IFFALSE 1334
// begin attackedByApeman = true ;
1300: LD_ADDR_EXP 5
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1308: LD_ADDR_EXP 8
1312: PUSH
1313: LD_VAR 0 2
1317: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1318: LD_EXP 46
1322: PPUSH
1323: LD_STRING D2-Bur-1a
1325: PPUSH
1326: CALL_OW 88
// exit ;
1330: POP
1331: POP
1332: GO 1338
// end ;
1334: GO 1266
1336: POP
1337: POP
// end ;
1338: PPOPN 2
1340: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1341: LD_EXP 6
1345: NOT
1346: IFFALSE 1443
1348: GO 1350
1350: DISABLE
1351: LD_INT 0
1353: PPUSH
1354: PPUSH
// begin enable ;
1355: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 24
1363: PPUSH
1364: LD_INT 22
1366: PUSH
1367: LD_INT 0
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 25
1376: PUSH
1377: LD_INT 12
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PPUSH
1388: CALL_OW 70
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1441
// if Attacks ( apeman ) then
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 320
1405: IFFALSE 1439
// if GetSide ( Attacks ( apeman ) ) = 3 then
1407: LD_VAR 0 2
1411: PPUSH
1412: CALL_OW 320
1416: PPUSH
1417: CALL_OW 255
1421: PUSH
1422: LD_INT 3
1424: EQUAL
1425: IFFALSE 1439
// begin attackedByApemanNearLake = true ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// exit ;
1435: POP
1436: POP
1437: GO 1443
// end ;
1439: GO 1393
1441: POP
1442: POP
// end ;
1443: PPOPN 2
1445: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1446: LD_EXP 9
1450: PPUSH
1451: CALL_OW 303
1455: IFFALSE 1489
1457: GO 1459
1459: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1460: LD_ADDR_EXP 10
1464: PUSH
1465: LD_EXP 9
1469: PPUSH
1470: CALL_OW 250
1474: PUSH
1475: LD_EXP 9
1479: PPUSH
1480: CALL_OW 251
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: ST_TO_ADDR
1489: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1490: LD_EXP 9
1494: PPUSH
1495: CALL_OW 303
1499: PUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_EXP 10
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: PPUSH
1512: LD_EXP 10
1516: PUSH
1517: LD_INT 2
1519: ARRAY
1520: PPUSH
1521: CALL_OW 293
1525: AND
1526: IFFALSE 1910
1528: GO 1530
1530: DISABLE
1531: LD_INT 0
1533: PPUSH
// begin wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1541: LD_EXP 46
1545: PPUSH
1546: LD_STRING D2a-Bur-1
1548: PPUSH
1549: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1553: LD_INT 22
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 21
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PPUSH
1577: CALL_OW 69
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1601
// Say ( Burlak , D2a-Bur-2 ) else
1587: LD_EXP 46
1591: PPUSH
1592: LD_STRING D2a-Bur-2
1594: PPUSH
1595: CALL_OW 88
1599: GO 1910
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1601: LD_ADDR_VAR 0 1
1605: PUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 69
1634: PUSH
1635: LD_EXP 46
1639: PUSH
1640: LD_EXP 54
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: DIFF
1649: PPUSH
1650: LD_EXP 10
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_EXP 10
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: CALL_OW 73
1672: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1673: LD_ADDR_EXP 11
1677: PUSH
1678: LD_VAR 0 1
1682: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1683: LD_VAR 0 1
1687: PPUSH
1688: LD_EXP 10
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: LD_EXP 10
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PPUSH
1706: CALL_OW 111
// case nearUnit of Belkov :
1710: LD_VAR 0 1
1714: PUSH
1715: LD_EXP 51
1719: DOUBLE
1720: EQUAL
1721: IFTRUE 1725
1723: GO 1740
1725: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1726: LD_EXP 51
1730: PPUSH
1731: LD_STRING D2a-Bel-1
1733: PPUSH
1734: CALL_OW 88
1738: GO 1807
1740: LD_EXP 53
1744: DOUBLE
1745: EQUAL
1746: IFTRUE 1750
1748: GO 1765
1750: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1751: LD_EXP 53
1755: PPUSH
1756: LD_STRING D2a-Kir-1
1758: PPUSH
1759: CALL_OW 88
1763: GO 1807
1765: POP
// if GetSex ( nearUnit ) = sex_male then
1766: LD_VAR 0 1
1770: PPUSH
1771: CALL_OW 258
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1795
// Say ( nearUnit , D2a-RSol1-1 ) else
1781: LD_VAR 0 1
1785: PPUSH
1786: LD_STRING D2a-RSol1-1
1788: PPUSH
1789: CALL_OW 88
1793: GO 1807
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1795: LD_VAR 0 1
1799: PPUSH
1800: LD_STRING D2a-RFSol1-1
1802: PPUSH
1803: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1807: LD_EXP 54
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 3
1819: EQUAL
1820: PUSH
1821: LD_EXP 54
1825: PPUSH
1826: CALL_OW 302
1830: AND
1831: IFFALSE 1845
// Say ( Gnyevko , D2a-Gny-1 ) ;
1833: LD_EXP 54
1837: PPUSH
1838: LD_STRING D2a-Gny-1
1840: PPUSH
1841: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 255
1854: PUSH
1855: LD_INT 8
1857: EQUAL
1858: IFFALSE 1910
// begin Say ( Burlak , D12-Bur-1 ) ;
1860: LD_EXP 46
1864: PPUSH
1865: LD_STRING D12-Bur-1
1867: PPUSH
1868: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1872: LD_EXP 51
1876: PPUSH
1877: CALL_OW 255
1881: PUSH
1882: LD_INT 3
1884: EQUAL
1885: PUSH
1886: LD_EXP 51
1890: PPUSH
1891: CALL_OW 302
1895: AND
1896: IFFALSE 1910
// Say ( Belkov , D12-Bel-2 ) ;
1898: LD_EXP 51
1902: PPUSH
1903: LD_STRING D12-Bel-2
1905: PPUSH
1906: CALL_OW 88
// end ; end ; end ;
1910: PPOPN 1
1912: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1913: LD_EXP 12
1917: NOT
1918: PUSH
1919: LD_EXP 40
1923: PUSH
1924: LD_INT 70
1926: GREATER
1927: AND
1928: IFFALSE 1948
1930: GO 1932
1932: DISABLE
// begin enable ;
1933: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1934: LD_EXP 54
1938: PPUSH
1939: LD_EXP 39
1943: PPUSH
1944: CALL_OW 234
// end ;
1948: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1949: LD_INT 3
1951: PPUSH
1952: LD_EXP 54
1956: PPUSH
1957: CALL_OW 292
1961: IFFALSE 2573
1963: GO 1965
1965: DISABLE
1966: LD_INT 0
1968: PPUSH
1969: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1970: LD_EXP 54
1974: PPUSH
1975: CALL_OW 87
// DialogueOn ;
1979: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1983: LD_ADDR_VAR 0 1
1987: PUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 1
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PPUSH
2017: LD_EXP 54
2021: PPUSH
2022: CALL_OW 74
2026: ST_TO_ADDR
// if nearUnit = Burlak then
2027: LD_VAR 0 1
2031: PUSH
2032: LD_EXP 46
2036: EQUAL
2037: IFFALSE 2399
// begin Say ( Burlak , D3-Bur-1 ) ;
2039: LD_EXP 46
2043: PPUSH
2044: LD_STRING D3-Bur-1
2046: PPUSH
2047: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2051: LD_EXP 54
2055: PPUSH
2056: LD_STRING D3-Gny-1
2058: PPUSH
2059: CALL_OW 88
// if apeWithRadioKiller then
2063: LD_EXP 11
2067: IFFALSE 2107
// begin if apeWithRadioKiller = Burlak then
2069: LD_EXP 11
2073: PUSH
2074: LD_EXP 46
2078: EQUAL
2079: IFFALSE 2095
// Say ( Burlak , D3-Bur-2 ) else
2081: LD_EXP 46
2085: PPUSH
2086: LD_STRING D3-Bur-2
2088: PPUSH
2089: CALL_OW 88
2093: GO 2107
// Say ( Burlak , D3-Bur-2a ) ;
2095: LD_EXP 46
2099: PPUSH
2100: LD_STRING D3-Bur-2a
2102: PPUSH
2103: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2107: LD_EXP 46
2111: PPUSH
2112: LD_STRING D3-Bur-2b
2114: PPUSH
2115: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: EQUAL
2151: PUSH
2152: LD_EXP 14
2156: NOT
2157: AND
2158: IFFALSE 2210
// begin Say ( Burlak , D3-Bur-2c ) ;
2160: LD_EXP 46
2164: PPUSH
2165: LD_STRING D3-Bur-2c
2167: PPUSH
2168: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2172: LD_EXP 54
2176: PPUSH
2177: LD_STRING D3-Gny-2
2179: PPUSH
2180: CALL_OW 88
// DialogueOff ;
2184: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2188: LD_EXP 54
2192: PPUSH
2193: LD_INT 3
2195: PPUSH
2196: CALL_OW 235
// gnyevkoSaved = true ;
2200: LD_ADDR_EXP 12
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// exit ;
2208: GO 2573
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2210: LD_INT 22
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: LD_INT 1
2241: GREATER
2242: PUSH
2243: LD_EXP 14
2247: OR
2248: PUSH
2249: LD_EXP 22
2253: NOT
2254: AND
2255: IFFALSE 2307
// begin Say ( Burlak , D3-Bur-2d ) ;
2257: LD_EXP 46
2261: PPUSH
2262: LD_STRING D3-Bur-2d
2264: PPUSH
2265: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2269: LD_EXP 54
2273: PPUSH
2274: LD_STRING D3-Gny-2
2276: PPUSH
2277: CALL_OW 88
// DialogueOff ;
2281: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2285: LD_EXP 54
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL_OW 235
// gnyevkoSaved = true ;
2297: LD_ADDR_EXP 12
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// exit ;
2305: GO 2573
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2307: LD_INT 22
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 21
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PPUSH
2331: CALL_OW 69
2335: PUSH
2336: LD_INT 1
2338: GREATER
2339: PUSH
2340: LD_EXP 22
2344: AND
2345: IFFALSE 2397
// begin Say ( Burlak , D3-Bur-2e ) ;
2347: LD_EXP 46
2351: PPUSH
2352: LD_STRING D3-Bur-2e
2354: PPUSH
2355: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2359: LD_EXP 54
2363: PPUSH
2364: LD_STRING D3-Gny-2
2366: PPUSH
2367: CALL_OW 88
// DialogueOff ;
2371: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2375: LD_EXP 54
2379: PPUSH
2380: LD_INT 3
2382: PPUSH
2383: CALL_OW 235
// gnyevkoSaved = true ;
2387: LD_ADDR_EXP 12
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// exit ;
2395: GO 2573
// end ; end else
2397: GO 2573
// begin if GetSex ( nearUnit ) = sex_male then
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 258
2408: PUSH
2409: LD_INT 1
2411: EQUAL
2412: IFFALSE 2428
// Say ( nearUnit , D3-RSol1-1 ) else
2414: LD_VAR 0 1
2418: PPUSH
2419: LD_STRING D3-RSol1-1
2421: PPUSH
2422: CALL_OW 88
2426: GO 2440
// Say ( nearUnit , D3-RFSol1-1 ) ;
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_STRING D3-RFSol1-1
2435: PPUSH
2436: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2440: LD_EXP 54
2444: PPUSH
2445: LD_STRING D3-Gny-1
2447: PPUSH
2448: CALL_OW 88
// if apeWithRadioKiller then
2452: LD_EXP 11
2456: IFFALSE 2496
// begin if apeWithRadioKiller = Burlak then
2458: LD_EXP 11
2462: PUSH
2463: LD_EXP 46
2467: EQUAL
2468: IFFALSE 2484
// Say ( Burlak , D3-Bur-2 ) else
2470: LD_EXP 46
2474: PPUSH
2475: LD_STRING D3-Bur-2
2477: PPUSH
2478: CALL_OW 88
2482: GO 2496
// Say ( Burlak , D3-Bur-2a ) ;
2484: LD_EXP 46
2488: PPUSH
2489: LD_STRING D3-Bur-2a
2491: PPUSH
2492: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 258
2505: PUSH
2506: LD_INT 1
2508: EQUAL
2509: IFFALSE 2525
// Say ( nearUnit , D3-RSol1-2 ) else
2511: LD_VAR 0 1
2515: PPUSH
2516: LD_STRING D3-RSol1-2
2518: PPUSH
2519: CALL_OW 88
2523: GO 2537
// Say ( nearUnit , D3-RFSol1-2 ) ;
2525: LD_VAR 0 1
2529: PPUSH
2530: LD_STRING D3-RFSol1-2
2532: PPUSH
2533: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2537: LD_EXP 54
2541: PPUSH
2542: LD_STRING D3-Gny-2a
2544: PPUSH
2545: CALL_OW 88
// DialogueOff ;
2549: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2553: LD_EXP 54
2557: PPUSH
2558: LD_INT 3
2560: PPUSH
2561: CALL_OW 235
// gnyevkoSaved = true ;
2565: LD_ADDR_EXP 12
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// end ; end ;
2573: PPOPN 2
2575: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2576: LD_EXP 12
2580: NOT
2581: PUSH
2582: LD_EXP 21
2586: NOT
2587: OR
2588: IFFALSE 2783
2590: GO 2592
2592: DISABLE
2593: LD_INT 0
2595: PPUSH
// begin enable ;
2596: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2597: LD_EXP 12
2601: NOT
2602: PUSH
2603: LD_EXP 40
2607: PUSH
2608: LD_INT 70
2610: GREATER
2611: AND
2612: IFFALSE 2690
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2614: LD_ADDR_VAR 0 1
2618: PUSH
2619: LD_INT 22
2621: PUSH
2622: LD_INT 0
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 25
2631: PUSH
2632: LD_INT 12
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 69
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2688
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: LD_EXP 54
2660: PPUSH
2661: CALL_OW 250
2665: PPUSH
2666: LD_EXP 54
2670: PPUSH
2671: CALL_OW 251
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL 8446 0 5
2686: GO 2648
2688: POP
2689: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2690: LD_EXP 21
2694: NOT
2695: PUSH
2696: LD_EXP 41
2700: PUSH
2701: LD_INT 70
2703: GREATER
2704: AND
2705: IFFALSE 2783
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 12
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 69
2740: PUSH
2741: FOR_IN
2742: IFFALSE 2781
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2744: LD_VAR 0 1
2748: PPUSH
2749: LD_EXP 53
2753: PPUSH
2754: CALL_OW 250
2758: PPUSH
2759: LD_EXP 53
2763: PPUSH
2764: CALL_OW 251
2768: PPUSH
2769: LD_INT 10
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL 8446 0 5
2779: GO 2741
2781: POP
2782: POP
// end ;
2783: PPOPN 1
2785: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2786: LD_EXP 12
2790: NOT
2791: PUSH
2792: LD_EXP 21
2796: NOT
2797: OR
2798: IFFALSE 2909
2800: GO 2802
2802: DISABLE
// begin enable ;
2803: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2804: LD_EXP 12
2808: NOT
2809: PUSH
2810: LD_EXP 40
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: AND
2819: IFFALSE 2835
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2821: LD_ADDR_EXP 40
2825: PUSH
2826: LD_EXP 40
2830: PUSH
2831: LD_INT 35
2833: MINUS
2834: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2835: LD_EXP 53
2839: PPUSH
2840: CALL_OW 305
2844: PUSH
2845: LD_EXP 21
2849: NOT
2850: AND
2851: PUSH
2852: LD_EXP 41
2856: PUSH
2857: LD_INT 0
2859: GREATER
2860: AND
2861: IFFALSE 2877
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2863: LD_ADDR_EXP 41
2867: PUSH
2868: LD_EXP 41
2872: PUSH
2873: LD_INT 35
2875: MINUS
2876: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2877: LD_EXP 53
2881: PPUSH
2882: CALL_OW 305
2886: PUSH
2887: LD_EXP 21
2891: NOT
2892: AND
2893: IFFALSE 2909
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2895: LD_ADDR_EXP 26
2899: PUSH
2900: LD_EXP 26
2904: PUSH
2905: LD_INT 35
2907: PLUS
2908: ST_TO_ADDR
// end ;
2909: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2910: LD_INT 3
2912: PPUSH
2913: LD_EXP 47
2917: PPUSH
2918: CALL_OW 292
2922: PUSH
2923: LD_INT 6
2925: PPUSH
2926: LD_EXP 46
2930: PPUSH
2931: CALL_OW 292
2935: OR
2936: PUSH
2937: LD_EXP 54
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 3
2949: EQUAL
2950: PUSH
2951: LD_INT 6
2953: PPUSH
2954: LD_EXP 54
2958: PPUSH
2959: CALL_OW 292
2963: AND
2964: OR
2965: PUSH
2966: LD_EXP 14
2970: NOT
2971: AND
2972: IFFALSE 3887
2974: GO 2976
2976: DISABLE
// begin enable ;
2977: ENABLE
// InGameOn ;
2978: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2982: LD_EXP 47
2986: PPUSH
2987: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2991: LD_EXP 54
2995: PPUSH
2996: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3000: LD_EXP 46
3004: PUSH
3005: LD_EXP 54
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 200
// DialogueOn ;
3018: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3022: LD_EXP 13
3026: IFFALSE 3278
// begin meetPokryshkin = true ;
3028: LD_ADDR_EXP 14
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3036: LD_INT 6
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 343
// DialogueOff ;
3046: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3050: LD_EXP 46
3054: PPUSH
3055: LD_EXP 47
3059: PPUSH
3060: CALL_OW 250
3064: PPUSH
3065: LD_EXP 47
3069: PPUSH
3070: CALL_OW 251
3074: PPUSH
3075: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3079: LD_EXP 46
3083: PPUSH
3084: LD_EXP 47
3088: PPUSH
3089: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3093: LD_EXP 47
3097: PPUSH
3098: LD_EXP 46
3102: PPUSH
3103: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3107: LD_EXP 54
3111: PPUSH
3112: LD_STRING D4-Gny-3
3114: PPUSH
3115: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3119: LD_EXP 46
3123: PPUSH
3124: LD_STRING D4-Bur-3
3126: PPUSH
3127: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3131: LD_EXP 47
3135: PPUSH
3136: LD_STRING D4-Pok-4
3138: PPUSH
3139: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3143: LD_EXP 42
3147: PPUSH
3148: LD_INT 18
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: CALL_OW 49
// wait ( 0 0$2 ) ;
3158: LD_INT 70
3160: PPUSH
3161: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3165: LD_EXP 46
3169: PPUSH
3170: LD_STRING D4-Bur-4
3172: PPUSH
3173: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3177: LD_EXP 47
3181: PPUSH
3182: LD_STRING D4-Pok-5
3184: PPUSH
3185: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3189: LD_EXP 42
3193: PPUSH
3194: LD_STRING D4-Sol1-5
3196: PPUSH
3197: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3201: LD_EXP 47
3205: PPUSH
3206: LD_STRING D4-Pok-6
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3213: LD_EXP 47
3217: PPUSH
3218: LD_STRING D4-Pok-6a
3220: PPUSH
3221: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3225: LD_EXP 46
3229: PPUSH
3230: LD_STRING D4-Bur-6
3232: PPUSH
3233: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3237: LD_EXP 47
3241: PPUSH
3242: LD_STRING D4-Pok-7
3244: PPUSH
3245: CALL_OW 88
// DialogueOff ;
3249: CALL_OW 7
// InGameOff ;
3253: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3257: LD_STRING M2
3259: PPUSH
3260: CALL_OW 337
// goToHill = true ;
3264: LD_ADDR_EXP 15
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// MoveToHill ;
3272: CALL 10326 0 0
// exit ;
3276: GO 3887
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3278: LD_EXP 46
3282: PUSH
3283: LD_EXP 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3296: LD_EXP 47
3300: PPUSH
3301: LD_STRING D4-Pok-1
3303: PPUSH
3304: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3308: LD_EXP 54
3312: PPUSH
3313: CALL_OW 255
3317: PUSH
3318: LD_INT 3
3320: EQUAL
3321: PUSH
3322: LD_EXP 54
3326: PPUSH
3327: CALL_OW 302
3331: AND
3332: IFFALSE 3346
// Say ( Gnyevko , D4-Gny-1 ) ;
3334: LD_EXP 54
3338: PPUSH
3339: LD_STRING D4-Gny-1
3341: PPUSH
3342: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3346: LD_EXP 46
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 6
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 21
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: PPUSH
3380: LD_EXP 46
3384: PPUSH
3385: CALL_OW 74
3389: PPUSH
3390: CALL_OW 296
3394: PUSH
3395: LD_INT 8
3397: GREATER
3398: PUSH
3399: LD_EXP 46
3403: PPUSH
3404: LD_EXP 54
3408: PPUSH
3409: CALL_OW 296
3413: PUSH
3414: LD_INT 8
3416: GREATER
3417: AND
3418: PUSH
3419: LD_EXP 54
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: LD_INT 3
3431: EQUAL
3432: AND
3433: PUSH
3434: LD_EXP 54
3438: PPUSH
3439: CALL_OW 302
3443: AND
3444: IFFALSE 3542
// begin ComWalk ( Gnyevko ) ;
3446: LD_EXP 54
3450: PPUSH
3451: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3455: LD_EXP 47
3459: PPUSH
3460: LD_STRING D4-Pok-2
3462: PPUSH
3463: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3467: LD_EXP 54
3471: PPUSH
3472: LD_STRING D4-Gny-2
3474: PPUSH
3475: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3479: LD_EXP 47
3483: PPUSH
3484: LD_STRING D4-Pok-3
3486: PPUSH
3487: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3491: LD_ADDR_EXP 13
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3499: LD_EXP 54
3503: PPUSH
3504: LD_INT 6
3506: PPUSH
3507: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3511: LD_EXP 54
3515: PPUSH
3516: LD_EXP 47
3520: PPUSH
3521: CALL_OW 250
3525: PPUSH
3526: LD_EXP 47
3530: PPUSH
3531: CALL_OW 251
3535: PPUSH
3536: CALL_OW 171
// end else
3540: GO 3879
// begin meetPokryshkin = true ;
3542: LD_ADDR_EXP 14
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3550: LD_INT 6
3552: PPUSH
3553: LD_INT 3
3555: PPUSH
3556: CALL_OW 343
// DialogueOff ;
3560: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3564: LD_EXP 54
3568: PPUSH
3569: CALL_OW 255
3573: PUSH
3574: LD_INT 3
3576: EQUAL
3577: PUSH
3578: LD_EXP 54
3582: PPUSH
3583: CALL_OW 302
3587: AND
3588: IFFALSE 3665
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3590: LD_EXP 46
3594: PUSH
3595: LD_EXP 54
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: LD_EXP 47
3608: PPUSH
3609: CALL_OW 250
3613: PPUSH
3614: LD_EXP 47
3618: PPUSH
3619: CALL_OW 251
3623: PPUSH
3624: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3628: LD_EXP 46
3632: PUSH
3633: LD_EXP 54
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: LD_EXP 47
3646: PPUSH
3647: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3651: LD_EXP 54
3655: PPUSH
3656: LD_INT 6
3658: PPUSH
3659: CALL_OW 235
// end else
3663: GO 3708
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3665: LD_EXP 46
3669: PPUSH
3670: LD_EXP 47
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 47
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_EXP 47
3703: PPUSH
3704: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3708: LD_EXP 47
3712: PPUSH
3713: LD_EXP 46
3717: PPUSH
3718: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3722: LD_EXP 46
3726: PPUSH
3727: LD_STRING D4-Bur-3
3729: PPUSH
3730: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3734: LD_EXP 47
3738: PPUSH
3739: LD_STRING D4-Pok-4
3741: PPUSH
3742: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3746: LD_EXP 42
3750: PPUSH
3751: LD_INT 18
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: CALL_OW 49
// wait ( 0 0$2 ) ;
3761: LD_INT 70
3763: PPUSH
3764: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3768: LD_EXP 46
3772: PPUSH
3773: LD_STRING D4-Bur-4
3775: PPUSH
3776: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3780: LD_EXP 47
3784: PPUSH
3785: LD_STRING D4-Pok-5
3787: PPUSH
3788: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3792: LD_EXP 42
3796: PPUSH
3797: LD_STRING D4-Sol1-5
3799: PPUSH
3800: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3804: LD_EXP 47
3808: PPUSH
3809: LD_STRING D4-Pok-6
3811: PPUSH
3812: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3816: LD_EXP 47
3820: PPUSH
3821: LD_STRING D4-Pok-6a
3823: PPUSH
3824: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3828: LD_EXP 46
3832: PPUSH
3833: LD_STRING D4-Bur-6
3835: PPUSH
3836: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3840: LD_EXP 47
3844: PPUSH
3845: LD_STRING D4-Pok-7
3847: PPUSH
3848: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3852: LD_STRING M2
3854: PPUSH
3855: CALL_OW 337
// goToHill = true ;
3859: LD_ADDR_EXP 15
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// DialogueOff ;
3867: CALL_OW 7
// InGameOff ;
3871: CALL_OW 9
// MoveToHill ;
3875: CALL 10326 0 0
// end ; DialogueOff ;
3879: CALL_OW 7
// InGameOff ;
3883: CALL_OW 9
// end ;
3887: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3888: LD_EXP 46
3892: PPUSH
3893: LD_EXP 47
3897: PPUSH
3898: CALL_OW 296
3902: PUSH
3903: LD_INT 10
3905: GREATER
3906: PUSH
3907: LD_EXP 15
3911: AND
3912: PUSH
3913: LD_EXP 18
3917: NOT
3918: AND
3919: IFFALSE 4120
3921: GO 3923
3923: DISABLE
3924: LD_INT 0
3926: PPUSH
// begin enable ;
3927: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_EXP 47
3937: PUSH
3938: LD_EXP 48
3942: PUSH
3943: LD_EXP 49
3947: PUSH
3948: LD_EXP 50
3952: PUSH
3953: LD_EXP 51
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3965: LD_EXP 54
3969: PPUSH
3970: CALL_OW 255
3974: PUSH
3975: LD_INT 6
3977: EQUAL
3978: PUSH
3979: LD_EXP 12
3983: AND
3984: IFFALSE 4002
// ruSolds = ruSolds ^ Gnyevko ;
3986: LD_ADDR_VAR 0 1
3990: PUSH
3991: LD_VAR 0 1
3995: PUSH
3996: LD_EXP 54
4000: ADD
4001: ST_TO_ADDR
// ComStop ( ruSolds ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
4011: LD_EXP 46
4015: PPUSH
4016: CALL_OW 87
// DialogueOn ;
4020: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4024: LD_EXP 47
4028: PPUSH
4029: LD_STRING DSplit-Pok-1
4031: PPUSH
4032: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4036: LD_EXP 46
4040: PPUSH
4041: LD_STRING DSplit-Bur-1
4043: PPUSH
4044: CALL_OW 88
// DialogueOff ;
4048: CALL_OW 7
// InGameOn ;
4052: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_EXP 47
4065: PPUSH
4066: CALL_OW 250
4070: PPUSH
4071: LD_EXP 47
4075: PPUSH
4076: CALL_OW 251
4080: PPUSH
4081: CALL_OW 111
// wait ( 0 0$1 ) ;
4085: LD_INT 35
4087: PPUSH
4088: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4092: LD_EXP 46
4096: PPUSH
4097: LD_EXP 47
4101: PPUSH
4102: CALL_OW 296
4106: PUSH
4107: LD_INT 6
4109: LESS
4110: IFFALSE 4056
// InGameOff ;
4112: CALL_OW 9
// MoveToHill ;
4116: CALL 10326 0 0
// end ;
4120: PPOPN 1
4122: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
// traitor = true ;
4127: LD_ADDR_EXP 18
4131: PUSH
4132: LD_INT 1
4134: ST_TO_ADDR
// DialogueOn ;
4135: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4139: LD_EXP 47
4143: PPUSH
4144: LD_STRING DAttack-Pok-1
4146: PPUSH
4147: CALL_OW 88
// DialogueOff ;
4151: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4155: LD_INT 3
4157: PPUSH
4158: LD_INT 6
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4171: LD_INT 22
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 1
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 69
4199: PPUSH
4200: LD_EXP 46
4204: PPUSH
4205: CALL_OW 115
// end ;
4209: LD_VAR 0 1
4213: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4214: LD_EXP 47
4218: PPUSH
4219: LD_INT 65
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: CALL_OW 297
4229: PUSH
4230: LD_INT 4
4232: LESS
4233: PUSH
4234: LD_EXP 18
4238: NOT
4239: AND
4240: IFFALSE 4437
4242: GO 4244
4244: DISABLE
// begin InGameOn ;
4245: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4249: LD_INT 55
4251: PPUSH
4252: LD_INT 50
4254: PPUSH
4255: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4259: LD_EXP 46
4263: PPUSH
4264: LD_INT 66
4266: PPUSH
4267: LD_INT 57
4269: PPUSH
4270: CALL_OW 111
// AddComHold ( Burlak ) ;
4274: LD_EXP 46
4278: PPUSH
4279: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4283: LD_EXP 42
4287: PPUSH
4288: LD_INT 59
4290: PPUSH
4291: LD_INT 55
4293: PPUSH
4294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4298: LD_INT 35
4300: PPUSH
4301: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4305: LD_INT 1
4307: PPUSH
4308: LD_EXP 47
4312: PPUSH
4313: CALL_OW 292
4317: IFFALSE 4298
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4319: LD_EXP 42
4323: PUSH
4324: LD_EXP 47
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 87
// ComStop ( Charles ) ;
4337: LD_EXP 42
4341: PPUSH
4342: CALL_OW 141
// AddComHold ( Charles ) ;
4346: LD_EXP 42
4350: PPUSH
4351: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4355: LD_EXP 42
4359: PPUSH
4360: LD_EXP 47
4364: PPUSH
4365: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4369: LD_EXP 42
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4381: LD_EXP 47
4385: PPUSH
4386: LD_STRING D5-Pok-1
4388: PPUSH
4389: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4393: LD_INT 1
4395: PPUSH
4396: LD_INT 6
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4409: LD_INT 1
4411: PPUSH
4412: LD_INT 3
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4425: LD_EXP 42
4429: PPUSH
4430: LD_STRING D5-Sol1-2
4432: PPUSH
4433: CALL_OW 88
// end ;
4437: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4438: LD_EXP 42
4442: PPUSH
4443: CALL_OW 301
4447: PUSH
4448: LD_EXP 15
4452: AND
4453: IFFALSE 5057
4455: GO 4457
4457: DISABLE
4458: LD_INT 0
4460: PPUSH
// begin InGameOn ;
4461: CALL_OW 8
// goToHill = false ;
4465: LD_ADDR_EXP 15
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4473: LD_INT 22
4475: PUSH
4476: LD_INT 6
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PPUSH
4502: CALL_OW 141
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4513: LD_INT 22
4515: PUSH
4516: LD_INT 6
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 1
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PPUSH
4537: CALL_OW 69
4541: PPUSH
4542: CALL_OW 138
// wait ( 0 0$1 ) ;
4546: LD_INT 35
4548: PPUSH
4549: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4553: LD_INT 55
4555: PPUSH
4556: LD_INT 50
4558: PPUSH
4559: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4563: LD_EXP 46
4567: PPUSH
4568: LD_INT 56
4570: PPUSH
4571: LD_INT 56
4573: PPUSH
4574: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4578: LD_INT 22
4580: PUSH
4581: LD_INT 6
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PPUSH
4607: LD_INT 56
4609: PPUSH
4610: LD_INT 56
4612: PPUSH
4613: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4617: LD_EXP 46
4621: PPUSH
4622: LD_STRING D5-Bur-2
4624: PPUSH
4625: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4629: LD_EXP 47
4633: PPUSH
4634: LD_STRING D5-Pok-2
4636: PPUSH
4637: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4641: LD_EXP 51
4645: PPUSH
4646: LD_STRING D5-Bel-2
4648: PPUSH
4649: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_STRING D5-Pok-3
4660: PPUSH
4661: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4665: LD_EXP 54
4669: PPUSH
4670: CALL_OW 255
4674: PUSH
4675: LD_INT 6
4677: EQUAL
4678: IFFALSE 4692
// Say ( Gnyevko , D5-Gny-3 ) ;
4680: LD_EXP 54
4684: PPUSH
4685: LD_STRING D5-Gny-3
4687: PPUSH
4688: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4692: LD_EXP 46
4696: PPUSH
4697: LD_STRING D5-Bur-3
4699: PPUSH
4700: CALL_OW 88
// interface_hidden = true ;
4704: LD_ADDR_OWVAR 54
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// IngameOff ;
4712: CALL_OW 9
// wait ( 0 0$2 ) ;
4716: LD_INT 70
4718: PPUSH
4719: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4723: LD_EXP 46
4727: PPUSH
4728: LD_INT 85
4730: PPUSH
4731: LD_INT 64
4733: PPUSH
4734: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 6
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 21
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PPUSH
4762: CALL_OW 69
4766: PPUSH
4767: LD_INT 85
4769: PPUSH
4770: LD_INT 64
4772: PPUSH
4773: CALL_OW 111
// interface_hidden = false ;
4777: LD_ADDR_OWVAR 54
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// InGameOn ;
4785: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4789: LD_EXP 46
4793: PPUSH
4794: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4798: LD_EXP 47
4802: PPUSH
4803: LD_STRING D6-Pok-1
4805: PPUSH
4806: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4810: LD_EXP 46
4814: PPUSH
4815: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4819: LD_EXP 46
4823: PPUSH
4824: LD_STRING D6-Bur-1
4826: PPUSH
4827: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4831: LD_EXP 46
4835: PPUSH
4836: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4840: LD_EXP 47
4844: PPUSH
4845: LD_STRING D6-Pok-2
4847: PPUSH
4848: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4852: LD_EXP 46
4856: PPUSH
4857: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4861: LD_EXP 51
4865: PPUSH
4866: LD_STRING D6-Bel-2
4868: PPUSH
4869: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4873: LD_EXP 46
4877: PPUSH
4878: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4882: LD_EXP 46
4886: PPUSH
4887: LD_STRING D6-Bur-2
4889: PPUSH
4890: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4894: LD_EXP 46
4898: PPUSH
4899: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4903: LD_EXP 47
4907: PPUSH
4908: LD_STRING D6-Pok-3
4910: PPUSH
4911: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4915: LD_EXP 46
4919: PPUSH
4920: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4924: LD_EXP 55
4928: PPUSH
4929: LD_STRING D6-Kur-3
4931: PPUSH
4932: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4936: LD_EXP 46
4940: PPUSH
4941: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4945: LD_EXP 47
4949: PPUSH
4950: LD_STRING D6-Pok-4
4952: PPUSH
4953: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4957: LD_EXP 46
4961: PPUSH
4962: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4966: LD_EXP 51
4970: PPUSH
4971: LD_STRING D6-Bel-4
4973: PPUSH
4974: CALL_OW 88
// InGameOff ;
4978: CALL_OW 9
// interface_hidden = false ;
4982: LD_ADDR_OWVAR 54
4986: PUSH
4987: LD_INT 0
4989: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4990: LD_EXP 47
4994: PPUSH
4995: LD_INT 23
4997: PPUSH
4998: CALL_OW 115
// wait ( 0 0$5 ) ;
5002: LD_INT 175
5004: PPUSH
5005: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5009: LD_INT 22
5011: PUSH
5012: LD_INT 6
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: PPUSH
5038: LD_INT 23
5040: PPUSH
5041: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5045: LD_INT 1
5047: PPUSH
5048: LD_EXP 54
5052: PPUSH
5053: CALL_OW 471
// end ;
5057: PPOPN 1
5059: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5060: LD_INT 1
5062: PPUSH
5063: LD_EXP 47
5067: PPUSH
5068: CALL_OW 292
5072: PUSH
5073: LD_EXP 42
5077: PPUSH
5078: CALL_OW 301
5082: AND
5083: IFFALSE 5102
5085: GO 5087
5087: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5088: LD_EXP 43
5092: PPUSH
5093: LD_EXP 47
5097: PPUSH
5098: CALL_OW 115
5102: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5103: LD_INT 3
5105: PPUSH
5106: LD_INT 23
5108: PPUSH
5109: CALL_OW 292
5113: IFFALSE 5142
5115: GO 5117
5117: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5118: LD_EXP 47
5122: PPUSH
5123: LD_STRING D7-Pok-1
5125: PPUSH
5126: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5130: LD_EXP 43
5134: PPUSH
5135: LD_STRING D7-FSol1-1
5137: PPUSH
5138: CALL_OW 88
// end ;
5142: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5143: LD_EXP 47
5147: PPUSH
5148: CALL_OW 303
5152: IFFALSE 5684
5154: GO 5156
5156: DISABLE
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 6
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 50
5189: PUSH
5190: EMPTY
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 69
5202: PUSH
5203: LD_EXP 51
5207: DIFF
5208: ST_TO_ADDR
// DialogueOn ;
5209: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5213: LD_EXP 51
5217: PPUSH
5218: LD_STRING D7a-Bel-1
5220: PPUSH
5221: CALL_OW 88
// DialogueOff ;
5225: CALL_OW 7
// for i := 1 to ruSolds do
5229: LD_ADDR_VAR 0 1
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_VAR 0 3
5243: PUSH
5244: FOR_TO
5245: IFFALSE 5303
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5247: LD_VAR 0 3
5251: PUSH
5252: LD_VAR 0 1
5256: ARRAY
5257: PPUSH
5258: LD_INT 87
5260: PUSH
5261: LD_VAR 0 1
5265: PLUS
5266: PPUSH
5267: LD_INT 63
5269: PUSH
5270: LD_VAR 0 1
5274: PLUS
5275: PPUSH
5276: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5280: LD_VAR 0 3
5284: PUSH
5285: LD_VAR 0 1
5289: ARRAY
5290: PPUSH
5291: LD_INT 89
5293: PPUSH
5294: LD_INT 67
5296: PPUSH
5297: CALL_OW 178
// end ;
5301: GO 5244
5303: POP
5304: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5305: LD_EXP 51
5309: PPUSH
5310: LD_INT 89
5312: PPUSH
5313: LD_INT 67
5315: PPUSH
5316: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5320: LD_EXP 51
5324: PPUSH
5325: LD_INT 88
5327: PPUSH
5328: LD_INT 66
5330: PPUSH
5331: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5335: LD_EXP 48
5339: PPUSH
5340: LD_STRING D7a-RSol1-1
5342: PPUSH
5343: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5347: LD_EXP 43
5351: PPUSH
5352: LD_STRING D7a-FSol1-1
5354: PPUSH
5355: CALL_OW 88
// wait ( 0 0$12 ) ;
5359: LD_INT 420
5361: PPUSH
5362: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5366: LD_EXP 51
5370: PPUSH
5371: LD_STRING D7b-Bel-1
5373: PPUSH
5374: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5378: LD_EXP 49
5382: PPUSH
5383: LD_STRING D7b-FSol1-1
5385: PPUSH
5386: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5390: LD_EXP 51
5394: PPUSH
5395: LD_STRING D7b-Bel-2
5397: PPUSH
5398: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5402: LD_EXP 48
5406: PPUSH
5407: LD_STRING D7b-RSol1-2
5409: PPUSH
5410: CALL_OW 88
// for unit in ruSolds do
5414: LD_ADDR_VAR 0 2
5418: PUSH
5419: LD_VAR 0 3
5423: PUSH
5424: FOR_IN
5425: IFFALSE 5658
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5427: LD_EXP 46
5431: PPUSH
5432: LD_VAR 0 2
5436: PPUSH
5437: CALL_OW 296
5441: PUSH
5442: LD_INT 7
5444: LESS
5445: IFFALSE 5656
// begin InGameOn ;
5447: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5451: LD_EXP 51
5455: PUSH
5456: LD_EXP 48
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5469: LD_EXP 46
5473: PPUSH
5474: LD_INT 88
5476: PPUSH
5477: LD_INT 66
5479: PPUSH
5480: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5484: LD_EXP 51
5488: PPUSH
5489: LD_EXP 46
5493: PPUSH
5494: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5498: LD_EXP 46
5502: PPUSH
5503: LD_INT 90
5505: PPUSH
5506: LD_INT 66
5508: PPUSH
5509: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5513: LD_EXP 46
5517: PPUSH
5518: LD_STRING D7b-Bur-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5525: LD_EXP 51
5529: PPUSH
5530: LD_STRING D7b-Bel-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5537: LD_EXP 46
5541: PPUSH
5542: LD_STRING D7b-Bur-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5549: LD_EXP 51
5553: PPUSH
5554: LD_STRING D7b-Bel-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5561: LD_EXP 49
5565: PPUSH
5566: LD_STRING D7b-FSol1-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5573: LD_EXP 51
5577: PPUSH
5578: LD_STRING D7b-Bel-6
5580: PPUSH
5581: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5585: LD_EXP 46
5589: PPUSH
5590: LD_STRING D7b-Bur-6
5592: PPUSH
5593: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5597: LD_EXP 48
5601: PPUSH
5602: LD_STRING D7b-RSol1-6
5604: PPUSH
5605: CALL_OW 88
// InGameOff ;
5609: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 3
5620: PPUSH
5621: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5625: LD_EXP 51
5629: PPUSH
5630: LD_INT 3
5632: PPUSH
5633: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5637: LD_STRING M3
5639: PPUSH
5640: CALL_OW 337
// secondAttack = true ;
5644: LD_ADDR_EXP 17
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// exit ;
5652: POP
5653: POP
5654: GO 5684
// end ;
5656: GO 5424
5658: POP
5659: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5660: LD_EXP 51
5664: PPUSH
5665: LD_STRING D7b-Bel-3
5667: PPUSH
5668: CALL_OW 88
// InGameOff ;
5672: CALL_OW 9
// belkovWaitForGorky = true ;
5676: LD_ADDR_EXP 16
5680: PUSH
5681: LD_INT 1
5683: ST_TO_ADDR
// end ;
5684: PPOPN 3
5686: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5687: LD_EXP 16
5691: PUSH
5692: LD_EXP 18
5696: NOT
5697: AND
5698: IFFALSE 6008
5700: GO 5702
5702: DISABLE
5703: LD_INT 0
5705: PPUSH
5706: PPUSH
// begin enable ;
5707: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5708: LD_ADDR_VAR 0 2
5712: PUSH
5713: LD_INT 22
5715: PUSH
5716: LD_INT 6
5718: PUSH
5719: EMPTY
5720: LIST
5721: LIST
5722: PUSH
5723: LD_INT 21
5725: PUSH
5726: LD_INT 1
5728: PUSH
5729: EMPTY
5730: LIST
5731: LIST
5732: PUSH
5733: EMPTY
5734: LIST
5735: LIST
5736: PPUSH
5737: CALL_OW 69
5741: ST_TO_ADDR
// for unit in ruSolds do
5742: LD_ADDR_VAR 0 1
5746: PUSH
5747: LD_VAR 0 2
5751: PUSH
5752: FOR_IN
5753: IFFALSE 6006
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5755: LD_EXP 46
5759: PPUSH
5760: LD_VAR 0 1
5764: PPUSH
5765: CALL_OW 296
5769: PUSH
5770: LD_INT 7
5772: LESS
5773: IFFALSE 6004
// begin belkovWaitForGorky = false ;
5775: LD_ADDR_EXP 16
5779: PUSH
5780: LD_INT 0
5782: ST_TO_ADDR
// InGameOn ;
5783: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5787: LD_EXP 51
5791: PUSH
5792: LD_EXP 48
5796: PUSH
5797: EMPTY
5798: LIST
5799: LIST
5800: PPUSH
5801: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5805: LD_EXP 46
5809: PPUSH
5810: LD_INT 88
5812: PPUSH
5813: LD_INT 66
5815: PPUSH
5816: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5820: LD_EXP 51
5824: PPUSH
5825: LD_EXP 46
5829: PPUSH
5830: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5834: LD_EXP 46
5838: PPUSH
5839: LD_INT 90
5841: PPUSH
5842: LD_INT 66
5844: PPUSH
5845: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5849: LD_EXP 51
5853: PPUSH
5854: LD_STRING D7b-Bel-3a
5856: PPUSH
5857: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5861: LD_EXP 46
5865: PPUSH
5866: LD_STRING D7b-Bur-3
5868: PPUSH
5869: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5873: LD_EXP 51
5877: PPUSH
5878: LD_STRING D7b-Bel-4
5880: PPUSH
5881: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5885: LD_EXP 46
5889: PPUSH
5890: LD_STRING D7b-Bur-4
5892: PPUSH
5893: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5897: LD_EXP 51
5901: PPUSH
5902: LD_STRING D7b-Bel-5
5904: PPUSH
5905: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5909: LD_EXP 49
5913: PPUSH
5914: LD_STRING D7b-FSol1-5
5916: PPUSH
5917: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5921: LD_EXP 51
5925: PPUSH
5926: LD_STRING D7b-Bel-6
5928: PPUSH
5929: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5933: LD_EXP 46
5937: PPUSH
5938: LD_STRING D7b-Bur-6
5940: PPUSH
5941: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5945: LD_EXP 48
5949: PPUSH
5950: LD_STRING D7a-RSol1-6
5952: PPUSH
5953: CALL_OW 88
// InGameOff ;
5957: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5961: LD_VAR 0 2
5965: PPUSH
5966: LD_INT 3
5968: PPUSH
5969: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5973: LD_EXP 51
5977: PPUSH
5978: LD_INT 3
5980: PPUSH
5981: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5985: LD_STRING M3
5987: PPUSH
5988: CALL_OW 337
// secondAttack = true ;
5992: LD_ADDR_EXP 17
5996: PUSH
5997: LD_INT 1
5999: ST_TO_ADDR
// exit ;
6000: POP
6001: POP
6002: GO 6008
// end ;
6004: GO 5752
6006: POP
6007: POP
// end ;
6008: PPOPN 2
6010: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
6011: LD_INT 0
6013: PPUSH
6014: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6015: LD_EXP 43
6019: PPUSH
6020: LD_STRING D8-FSol1-1
6022: PPUSH
6023: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6027: LD_EXP 44
6031: PPUSH
6032: LD_STRING D8-Glad-1
6034: PPUSH
6035: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6039: LD_EXP 46
6043: PPUSH
6044: LD_STRING D8-Bur-1
6046: PPUSH
6047: CALL_OW 88
// secondAttack = false ;
6051: LD_ADDR_EXP 17
6055: PUSH
6056: LD_INT 0
6058: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6059: LD_ADDR_VAR 0 2
6063: PUSH
6064: LD_INT 22
6066: PUSH
6067: LD_INT 3
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PUSH
6074: LD_INT 21
6076: PUSH
6077: LD_INT 1
6079: PUSH
6080: EMPTY
6081: LIST
6082: LIST
6083: PUSH
6084: EMPTY
6085: LIST
6086: LIST
6087: PPUSH
6088: CALL_OW 69
6092: PPUSH
6093: LD_INT 23
6095: PPUSH
6096: CALL_OW 74
6100: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6101: LD_EXP 45
6105: PPUSH
6106: CALL_OW 122
// wait ( 0 0$1 ) ;
6110: LD_INT 35
6112: PPUSH
6113: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6117: LD_EXP 45
6121: PPUSH
6122: LD_VAR 0 2
6126: PPUSH
6127: CALL_OW 175
// end ;
6131: LD_VAR 0 1
6135: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6136: LD_INT 23
6138: PPUSH
6139: CALL_OW 256
6143: PUSH
6144: LD_INT 350
6146: LESS
6147: PUSH
6148: LD_INT 23
6150: PPUSH
6151: CALL_OW 256
6155: PUSH
6156: LD_INT 250
6158: GREATER
6159: AND
6160: PUSH
6161: LD_INT 20
6163: PPUSH
6164: LD_INT 22
6166: PUSH
6167: LD_INT 3
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: PUSH
6174: LD_INT 21
6176: PUSH
6177: LD_INT 1
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PUSH
6184: EMPTY
6185: LIST
6186: LIST
6187: PPUSH
6188: CALL_OW 70
6192: PUSH
6193: LD_INT 0
6195: GREATER
6196: AND
6197: PUSH
6198: LD_EXP 24
6202: NOT
6203: AND
6204: IFFALSE 6221
6206: GO 6208
6208: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6209: LD_EXP 43
6213: PPUSH
6214: LD_STRING D8-FSol1-2
6216: PPUSH
6217: CALL_OW 88
6221: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6222: LD_INT 23
6224: PPUSH
6225: CALL_OW 303
6229: PUSH
6230: LD_INT 22
6232: PPUSH
6233: CALL_OW 302
6237: AND
6238: PUSH
6239: LD_EXP 24
6243: NOT
6244: AND
6245: IFFALSE 6315
6247: GO 6249
6249: DISABLE
// begin amRetreat = true ;
6250: LD_ADDR_EXP 24
6254: PUSH
6255: LD_INT 1
6257: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6258: LD_EXP 43
6262: PPUSH
6263: LD_STRING D8-FSol1-2a
6265: PPUSH
6266: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6270: LD_EXP 44
6274: PUSH
6275: LD_EXP 43
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PPUSH
6284: LD_INT 21
6286: PPUSH
6287: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6291: LD_EXP 44
6295: PPUSH
6296: LD_STRING D8-Glad-2
6298: PPUSH
6299: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6303: LD_EXP 46
6307: PPUSH
6308: LD_STRING D8-Bur-2
6310: PPUSH
6311: CALL_OW 88
// end ;
6315: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6316: LD_INT 22
6318: PPUSH
6319: CALL_OW 303
6323: PUSH
6324: LD_INT 23
6326: PPUSH
6327: CALL_OW 302
6331: AND
6332: PUSH
6333: LD_EXP 24
6337: NOT
6338: AND
6339: IFFALSE 6409
6341: GO 6343
6343: DISABLE
// begin amRetreat = true ;
6344: LD_ADDR_EXP 24
6348: PUSH
6349: LD_INT 1
6351: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6352: LD_EXP 43
6356: PPUSH
6357: LD_STRING D8-FSol1-2a
6359: PPUSH
6360: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6364: LD_EXP 44
6368: PUSH
6369: LD_EXP 43
6373: PUSH
6374: EMPTY
6375: LIST
6376: LIST
6377: PPUSH
6378: LD_INT 21
6380: PPUSH
6381: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6385: LD_EXP 44
6389: PPUSH
6390: LD_STRING D8-Glad-2
6392: PPUSH
6393: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6397: LD_EXP 46
6401: PPUSH
6402: LD_STRING D8-Bur-2
6404: PPUSH
6405: CALL_OW 88
// end ;
6409: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6410: LD_INT 23
6412: PPUSH
6413: CALL_OW 256
6417: PUSH
6418: LD_INT 500
6420: LESS
6421: PUSH
6422: LD_OWVAR 67
6426: PUSH
6427: LD_INT 3
6429: EQUAL
6430: AND
6431: PUSH
6432: LD_EXP 24
6436: NOT
6437: AND
6438: IFFALSE 6508
6440: GO 6442
6442: DISABLE
// begin amRetreat = true ;
6443: LD_ADDR_EXP 24
6447: PUSH
6448: LD_INT 1
6450: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6451: LD_EXP 43
6455: PPUSH
6456: LD_STRING D8-FSol1-2a
6458: PPUSH
6459: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6463: LD_EXP 44
6467: PUSH
6468: LD_EXP 43
6472: PUSH
6473: EMPTY
6474: LIST
6475: LIST
6476: PPUSH
6477: LD_INT 21
6479: PPUSH
6480: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6484: LD_EXP 44
6488: PPUSH
6489: LD_STRING D8-Glad-2
6491: PPUSH
6492: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6496: LD_EXP 46
6500: PPUSH
6501: LD_STRING D8-Bur-2
6503: PPUSH
6504: CALL_OW 88
// end ;
6508: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6509: LD_INT 22
6511: PUSH
6512: LD_INT 1
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: PUSH
6519: LD_INT 21
6521: PUSH
6522: LD_INT 1
6524: PUSH
6525: EMPTY
6526: LIST
6527: LIST
6528: PUSH
6529: LD_INT 50
6531: PUSH
6532: EMPTY
6533: LIST
6534: PUSH
6535: EMPTY
6536: LIST
6537: LIST
6538: LIST
6539: PPUSH
6540: CALL_OW 69
6544: PUSH
6545: LD_INT 0
6547: GREATER
6548: IFFALSE 6676
6550: GO 6552
6552: DISABLE
6553: LD_INT 0
6555: PPUSH
// begin enable ;
6556: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6557: LD_ADDR_VAR 0 1
6561: PUSH
6562: LD_INT 21
6564: PPUSH
6565: LD_INT 22
6567: PUSH
6568: LD_INT 1
6570: PUSH
6571: EMPTY
6572: LIST
6573: LIST
6574: PUSH
6575: LD_INT 21
6577: PUSH
6578: LD_INT 1
6580: PUSH
6581: EMPTY
6582: LIST
6583: LIST
6584: PUSH
6585: EMPTY
6586: LIST
6587: LIST
6588: PPUSH
6589: CALL_OW 70
6593: PUSH
6594: FOR_IN
6595: IFFALSE 6674
// begin if unit = Gladstone then
6597: LD_VAR 0 1
6601: PUSH
6602: LD_EXP 44
6606: EQUAL
6607: IFFALSE 6637
// begin gladstoneEscape = true ;
6609: LD_ADDR_EXP 19
6613: PUSH
6614: LD_INT 1
6616: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6617: LD_EXP 44
6621: PPUSH
6622: LD_EXP 30
6626: PUSH
6627: LD_STRING Gladstone
6629: STR
6630: PPUSH
6631: CALL_OW 38
// end else
6635: GO 6663
// begin JohannaEscape = true ;
6637: LD_ADDR_EXP 20
6641: PUSH
6642: LD_INT 1
6644: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6645: LD_EXP 43
6649: PPUSH
6650: LD_EXP 30
6654: PUSH
6655: LD_STRING Johanna
6657: STR
6658: PPUSH
6659: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6663: LD_VAR 0 1
6667: PPUSH
6668: CALL_OW 64
// end ;
6672: GO 6594
6674: POP
6675: POP
// end ;
6676: PPOPN 1
6678: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6679: LD_EXP 44
6683: PPUSH
6684: CALL_OW 301
6688: PUSH
6689: LD_EXP 43
6693: PPUSH
6694: CALL_OW 301
6698: AND
6699: IFFALSE 6716
6701: GO 6703
6703: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6704: LD_EXP 46
6708: PPUSH
6709: LD_STRING D9-Bur-1
6711: PPUSH
6712: CALL_OW 88
6716: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6717: LD_EXP 43
6721: PPUSH
6722: CALL_OW 301
6726: PUSH
6727: LD_EXP 19
6731: AND
6732: PUSH
6733: LD_EXP 20
6737: NOT
6738: AND
6739: IFFALSE 6756
6741: GO 6743
6743: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6744: LD_EXP 46
6748: PPUSH
6749: LD_STRING D9-Bur-1a
6751: PPUSH
6752: CALL_OW 88
6756: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6757: LD_EXP 44
6761: PPUSH
6762: CALL_OW 301
6766: PUSH
6767: LD_EXP 19
6771: NOT
6772: AND
6773: PUSH
6774: LD_EXP 20
6778: AND
6779: IFFALSE 6796
6781: GO 6783
6783: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6784: LD_EXP 46
6788: PPUSH
6789: LD_STRING D9-Bur-1b
6791: PPUSH
6792: CALL_OW 88
6796: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6797: LD_EXP 19
6801: PUSH
6802: LD_EXP 20
6806: AND
6807: IFFALSE 6824
6809: GO 6811
6811: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6812: LD_EXP 46
6816: PPUSH
6817: LD_STRING D9-Bur-1c
6819: PPUSH
6820: CALL_OW 88
6824: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6825: LD_INT 22
6827: PUSH
6828: LD_INT 1
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_INT 21
6837: PUSH
6838: LD_INT 3
6840: PUSH
6841: EMPTY
6842: LIST
6843: LIST
6844: PUSH
6845: LD_INT 50
6847: PUSH
6848: EMPTY
6849: LIST
6850: PUSH
6851: EMPTY
6852: LIST
6853: LIST
6854: LIST
6855: PPUSH
6856: CALL_OW 69
6860: PUSH
6861: LD_INT 0
6863: EQUAL
6864: IFFALSE 7112
6866: GO 6868
6868: DISABLE
6869: LD_INT 0
6871: PPUSH
6872: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6873: LD_ADDR_VAR 0 1
6877: PUSH
6878: LD_INT 22
6880: PUSH
6881: LD_INT 3
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 21
6890: PUSH
6891: LD_INT 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 50
6900: PUSH
6901: EMPTY
6902: LIST
6903: PUSH
6904: EMPTY
6905: LIST
6906: LIST
6907: LIST
6908: PPUSH
6909: CALL_OW 69
6913: PUSH
6914: LD_EXP 46
6918: PUSH
6919: LD_EXP 54
6923: PUSH
6924: LD_EXP 51
6928: PUSH
6929: EMPTY
6930: LIST
6931: LIST
6932: LIST
6933: DIFF
6934: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6935: LD_ADDR_VAR 0 2
6939: PUSH
6940: LD_VAR 0 1
6944: PPUSH
6945: LD_INT 26
6947: PUSH
6948: LD_INT 1
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: PPUSH
6955: CALL_OW 72
6959: ST_TO_ADDR
// DialogueOn ;
6960: CALL_OW 6
// if IsOK ( Belkov ) then
6964: LD_EXP 51
6968: PPUSH
6969: CALL_OW 302
6973: IFFALSE 6987
// Say ( Belkov , D10-Bel-1 ) ;
6975: LD_EXP 51
6979: PPUSH
6980: LD_STRING D10-Bel-1
6982: PPUSH
6983: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6987: LD_VAR 0 1
6991: PUSH
6992: LD_INT 0
6994: GREATER
6995: PUSH
6996: LD_VAR 0 2
7000: PUSH
7001: LD_INT 0
7003: GREATER
7004: PUSH
7005: LD_EXP 51
7009: PPUSH
7010: CALL_OW 302
7014: OR
7015: AND
7016: IFFALSE 7083
// begin Say ( Burlak , D10-Bur-1 ) ;
7018: LD_EXP 46
7022: PPUSH
7023: LD_STRING D10-Bur-1
7025: PPUSH
7026: CALL_OW 88
// if IsOK ( Belkov ) then
7030: LD_EXP 51
7034: PPUSH
7035: CALL_OW 302
7039: IFFALSE 7055
// Say ( Belkov , D10-Bel-1a ) else
7041: LD_EXP 51
7045: PPUSH
7046: LD_STRING D10-Bel-1a
7048: PPUSH
7049: CALL_OW 88
7053: GO 7071
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7055: LD_VAR 0 2
7059: PUSH
7060: LD_INT 1
7062: ARRAY
7063: PPUSH
7064: LD_STRING D10-RSol1-1
7066: PPUSH
7067: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7071: LD_EXP 46
7075: PPUSH
7076: LD_STRING D10-Bur-2
7078: PPUSH
7079: CALL_OW 88
// end ; DialogueOff ;
7083: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7087: LD_STRING M4a
7089: PPUSH
7090: CALL_OW 337
// evacuationAvailable = true ;
7094: LD_ADDR_EXP 22
7098: PUSH
7099: LD_INT 1
7101: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7102: LD_INT 1
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: CALL_OW 424
// end ;
7112: PPOPN 2
7114: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7115: LD_EXP 22
7119: PUSH
7120: LD_EXP 25
7124: NOT
7125: AND
7126: IFFALSE 7736
7128: GO 7130
7130: DISABLE
7131: LD_INT 0
7133: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7134: LD_EXP 53
7138: PPUSH
7139: LD_INT 22
7141: PPUSH
7142: LD_INT 1
7144: PPUSH
7145: CALL_OW 49
// wait ( 0 0$3 ) ;
7149: LD_INT 105
7151: PPUSH
7152: CALL_OW 67
// jelenaSpawned = true ;
7156: LD_ADDR_EXP 25
7160: PUSH
7161: LD_INT 1
7163: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7164: LD_INT 22
7166: PUSH
7167: LD_INT 3
7169: PUSH
7170: EMPTY
7171: LIST
7172: LIST
7173: PUSH
7174: LD_INT 21
7176: PUSH
7177: LD_INT 1
7179: PUSH
7180: EMPTY
7181: LIST
7182: LIST
7183: PUSH
7184: LD_INT 50
7186: PUSH
7187: EMPTY
7188: LIST
7189: PUSH
7190: EMPTY
7191: LIST
7192: LIST
7193: LIST
7194: PPUSH
7195: CALL_OW 69
7199: PPUSH
7200: LD_EXP 53
7204: PPUSH
7205: CALL_OW 74
7209: PPUSH
7210: LD_EXP 53
7214: PPUSH
7215: CALL_OW 296
7219: PUSH
7220: LD_INT 9
7222: LESS
7223: IFFALSE 7227
// exit ;
7225: GO 7736
// DialogueOn ;
7227: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7231: LD_EXP 53
7235: PPUSH
7236: LD_STRING D11b-Kir-1
7238: PPUSH
7239: CALL_OW 94
// if IsOK ( Belkov ) then
7243: LD_EXP 51
7247: PPUSH
7248: CALL_OW 302
7252: IFFALSE 7280
// begin Say ( Belkov , D11b-Bel-1 ) ;
7254: LD_EXP 51
7258: PPUSH
7259: LD_STRING D11b-Bel-1
7261: PPUSH
7262: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7266: LD_EXP 51
7270: PPUSH
7271: LD_STRING D11b-Bel-1a
7273: PPUSH
7274: CALL_OW 94
// end else
7278: GO 7335
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7280: LD_ADDR_VAR 0 1
7284: PUSH
7285: LD_INT 22
7287: PUSH
7288: LD_INT 3
7290: PUSH
7291: EMPTY
7292: LIST
7293: LIST
7294: PUSH
7295: LD_INT 21
7297: PUSH
7298: LD_INT 1
7300: PUSH
7301: EMPTY
7302: LIST
7303: LIST
7304: PUSH
7305: LD_INT 50
7307: PUSH
7308: EMPTY
7309: LIST
7310: PUSH
7311: EMPTY
7312: LIST
7313: LIST
7314: LIST
7315: PPUSH
7316: CALL_OW 69
7320: PPUSH
7321: LD_STRING D11b-RSol1-1
7323: PPUSH
7324: LD_STRING D11b-RFSol1-1
7326: PPUSH
7327: LD_INT 0
7329: PPUSH
7330: CALL 8113 0 4
7334: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7335: LD_INT 24
7337: PPUSH
7338: LD_INT 22
7340: PUSH
7341: LD_INT 0
7343: PUSH
7344: EMPTY
7345: LIST
7346: LIST
7347: PUSH
7348: LD_INT 25
7350: PUSH
7351: LD_INT 12
7353: PUSH
7354: EMPTY
7355: LIST
7356: LIST
7357: PUSH
7358: EMPTY
7359: LIST
7360: LIST
7361: PPUSH
7362: CALL_OW 70
7366: PUSH
7367: LD_INT 0
7369: GREATER
7370: IFFALSE 7386
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7372: LD_EXP 53
7376: PPUSH
7377: LD_STRING D11b1-Kir-1
7379: PPUSH
7380: CALL_OW 94
7384: GO 7398
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7386: LD_EXP 53
7390: PPUSH
7391: LD_STRING D11b2-Kir-1
7393: PPUSH
7394: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7398: LD_EXP 6
7402: PUSH
7403: LD_INT 24
7405: PPUSH
7406: LD_INT 22
7408: PUSH
7409: LD_INT 0
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: PUSH
7416: LD_INT 25
7418: PUSH
7419: LD_INT 12
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: PUSH
7426: EMPTY
7427: LIST
7428: LIST
7429: PPUSH
7430: CALL_OW 70
7434: PUSH
7435: LD_INT 0
7437: GREATER
7438: AND
7439: IFFALSE 7574
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7441: LD_EXP 46
7445: PPUSH
7446: LD_STRING D11b1-Bur-1
7448: PPUSH
7449: CALL_OW 88
// if IsOk ( Belkov ) then
7453: LD_EXP 51
7457: PPUSH
7458: CALL_OW 302
7462: IFFALSE 7478
// Say ( Belkov , D11b2-Bel-1 ) else
7464: LD_EXP 51
7468: PPUSH
7469: LD_STRING D11b2-Bel-1
7471: PPUSH
7472: CALL_OW 88
7476: GO 7519
// begin if GetSex ( randomSold ) = sex_male then
7478: LD_VAR 0 1
7482: PPUSH
7483: CALL_OW 258
7487: PUSH
7488: LD_INT 1
7490: EQUAL
7491: IFFALSE 7507
// Say ( randomSold , D11b1-RSol1-1 ) else
7493: LD_VAR 0 1
7497: PPUSH
7498: LD_STRING D11b1-RSol1-1
7500: PPUSH
7501: CALL_OW 88
7505: GO 7519
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7507: LD_VAR 0 1
7511: PPUSH
7512: LD_STRING D11b1-RFSol1-1
7514: PPUSH
7515: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7519: LD_INT 22
7521: PUSH
7522: LD_INT 1
7524: PUSH
7525: EMPTY
7526: LIST
7527: LIST
7528: PUSH
7529: LD_INT 21
7531: PUSH
7532: LD_INT 1
7534: PUSH
7535: EMPTY
7536: LIST
7537: LIST
7538: PUSH
7539: LD_INT 50
7541: PUSH
7542: EMPTY
7543: LIST
7544: PUSH
7545: EMPTY
7546: LIST
7547: LIST
7548: LIST
7549: PPUSH
7550: CALL_OW 69
7554: PPUSH
7555: LD_STRING D11b1-RSol1-1
7557: PPUSH
7558: LD_STRING D11b1-RFSol1-1
7560: PPUSH
7561: LD_INT 0
7563: PPUSH
7564: CALL 8113 0 4
// DialogueOff ;
7568: CALL_OW 7
// exit ;
7572: GO 7736
// end ; if spotWaterfall then
7574: LD_EXP 7
7578: IFFALSE 7664
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7580: LD_EXP 46
7584: PPUSH
7585: LD_STRING D11b1-Bur-1a
7587: PPUSH
7588: CALL_OW 88
// if IsOk ( Belkov ) then
7592: LD_EXP 51
7596: PPUSH
7597: CALL_OW 302
7601: IFFALSE 7617
// Say ( Belkov , D11b2-Bel-1 ) else
7603: LD_EXP 51
7607: PPUSH
7608: LD_STRING D11b2-Bel-1
7610: PPUSH
7611: CALL_OW 88
7615: GO 7658
// begin if GetSex ( randomSold ) = sex_male then
7617: LD_VAR 0 1
7621: PPUSH
7622: CALL_OW 258
7626: PUSH
7627: LD_INT 1
7629: EQUAL
7630: IFFALSE 7646
// Say ( randomSold , D11b1-RSol1-1 ) else
7632: LD_VAR 0 1
7636: PPUSH
7637: LD_STRING D11b1-RSol1-1
7639: PPUSH
7640: CALL_OW 88
7644: GO 7658
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7646: LD_VAR 0 1
7650: PPUSH
7651: LD_STRING D11b1-RFSol1-1
7653: PPUSH
7654: CALL_OW 88
// end ; DialogueOff ;
7658: CALL_OW 7
// exit ;
7662: GO 7736
// end ; if IsOk ( Belkov ) then
7664: LD_EXP 51
7668: PPUSH
7669: CALL_OW 302
7673: IFFALSE 7689
// Say ( Belkov , D11b1-Bel-1 ) else
7675: LD_EXP 51
7679: PPUSH
7680: LD_STRING D11b1-Bel-1
7682: PPUSH
7683: CALL_OW 88
7687: GO 7730
// begin if GetSex ( randomSold ) = sex_male then
7689: LD_VAR 0 1
7693: PPUSH
7694: CALL_OW 258
7698: PUSH
7699: LD_INT 1
7701: EQUAL
7702: IFFALSE 7718
// Say ( randomSold , D11b1-RSol1-1 ) else
7704: LD_VAR 0 1
7708: PPUSH
7709: LD_STRING D11b1-RSol1-1
7711: PPUSH
7712: CALL_OW 88
7716: GO 7730
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7718: LD_VAR 0 1
7722: PPUSH
7723: LD_STRING D11b1-RFSol1-1
7725: PPUSH
7726: CALL_OW 88
// end ; DialogueOff ;
7730: CALL_OW 7
// exit ;
7734: GO 7736
// end ;
7736: PPOPN 1
7738: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7739: LD_INT 3
7741: PPUSH
7742: LD_EXP 53
7746: PPUSH
7747: CALL_OW 292
7751: PUSH
7752: LD_EXP 25
7756: AND
7757: IFFALSE 7993
7759: GO 7761
7761: DISABLE
7762: LD_INT 0
7764: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7765: LD_EXP 53
7769: PPUSH
7770: LD_INT 3
7772: PPUSH
7773: CALL_OW 235
// jelenaSaved = true ;
7777: LD_ADDR_EXP 21
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7785: LD_EXP 53
7789: PPUSH
7790: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7794: LD_ADDR_VAR 0 1
7798: PUSH
7799: LD_INT 22
7801: PUSH
7802: LD_INT 3
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: PUSH
7809: LD_INT 21
7811: PUSH
7812: LD_INT 1
7814: PUSH
7815: EMPTY
7816: LIST
7817: LIST
7818: PUSH
7819: LD_INT 50
7821: PUSH
7822: EMPTY
7823: LIST
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: LIST
7829: PPUSH
7830: CALL_OW 69
7834: PUSH
7835: LD_EXP 53
7839: DIFF
7840: PPUSH
7841: LD_EXP 53
7845: PPUSH
7846: CALL_OW 74
7850: ST_TO_ADDR
// DialogueOn ;
7851: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7855: LD_EXP 53
7859: PPUSH
7860: LD_STRING D11a-Kir-1
7862: PPUSH
7863: CALL_OW 88
// if nearUnit = Belkov then
7867: LD_VAR 0 1
7871: PUSH
7872: LD_EXP 51
7876: EQUAL
7877: IFFALSE 7917
// begin Say ( Belkov , D11a-Bel-1 ) ;
7879: LD_EXP 51
7883: PPUSH
7884: LD_STRING D11a-Bel-1
7886: PPUSH
7887: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7891: LD_EXP 53
7895: PPUSH
7896: LD_STRING D11a-Kir-2
7898: PPUSH
7899: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7903: LD_EXP 51
7907: PPUSH
7908: LD_STRING D11a-Bel-2
7910: PPUSH
7911: CALL_OW 88
// end else
7915: GO 7958
// begin if GetSex ( nearUnit ) = sex_male then
7917: LD_VAR 0 1
7921: PPUSH
7922: CALL_OW 258
7926: PUSH
7927: LD_INT 1
7929: EQUAL
7930: IFFALSE 7946
// Say ( nearUnit , D11a-RSol1-2 ) else
7932: LD_VAR 0 1
7936: PPUSH
7937: LD_STRING D11a-RSol1-2
7939: PPUSH
7940: CALL_OW 88
7944: GO 7958
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7946: LD_VAR 0 1
7950: PPUSH
7951: LD_STRING D11a-RFSol1-2
7953: PPUSH
7954: CALL_OW 88
// end ; DialogueOff ;
7958: CALL_OW 7
// wait ( 0 0$5 ) ;
7962: LD_INT 175
7964: PPUSH
7965: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7969: LD_EXP 53
7973: PPUSH
7974: LD_STRING D11c-Kir-1
7976: PPUSH
7977: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7981: LD_EXP 46
7985: PPUSH
7986: LD_STRING D11c-Bur-1
7988: PPUSH
7989: CALL_OW 88
// end ;
7993: PPOPN 1
7995: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7996: LD_EXP 22
8000: PUSH
8001: LD_INT 1
8003: PPUSH
8004: LD_INT 22
8006: PUSH
8007: LD_INT 3
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: PUSH
8014: LD_INT 21
8016: PUSH
8017: LD_INT 1
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PUSH
8024: EMPTY
8025: LIST
8026: LIST
8027: PPUSH
8028: CALL_OW 70
8032: PUSH
8033: LD_INT 0
8035: GREATER
8036: AND
8037: IFFALSE 8049
8039: GO 8041
8041: DISABLE
// begin Query ( QExit1 ) ;
8042: LD_STRING QExit1
8044: PPUSH
8045: CALL_OW 97
// end ; end_of_file
8049: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8050: LD_INT 0
8052: PPUSH
8053: PPUSH
// if exist_mode then
8054: LD_VAR 0 2
8058: IFFALSE 8083
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8060: LD_ADDR_VAR 0 4
8064: PUSH
8065: LD_EXP 31
8069: PUSH
8070: LD_VAR 0 1
8074: STR
8075: PPUSH
8076: CALL_OW 34
8080: ST_TO_ADDR
8081: GO 8098
// unit := NewCharacter ( ident ) ;
8083: LD_ADDR_VAR 0 4
8087: PUSH
8088: LD_VAR 0 1
8092: PPUSH
8093: CALL_OW 25
8097: ST_TO_ADDR
// result := unit ;
8098: LD_ADDR_VAR 0 3
8102: PUSH
8103: LD_VAR 0 4
8107: ST_TO_ADDR
// end ;
8108: LD_VAR 0 3
8112: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8113: LD_INT 0
8115: PPUSH
8116: PPUSH
8117: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8118: LD_ADDR_VAR 0 1
8122: PUSH
8123: LD_VAR 0 1
8127: PUSH
8128: LD_EXP 46
8132: PUSH
8133: LD_EXP 54
8137: PUSH
8138: LD_EXP 51
8142: PUSH
8143: LD_EXP 53
8147: PUSH
8148: EMPTY
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: DIFF
8154: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8155: LD_ADDR_VAR 0 7
8159: PUSH
8160: LD_VAR 0 1
8164: PUSH
8165: LD_INT 1
8167: PPUSH
8168: LD_VAR 0 1
8172: PPUSH
8173: CALL_OW 12
8177: ARRAY
8178: ST_TO_ADDR
// if radio then
8179: LD_VAR 0 4
8183: IFFALSE 8232
// begin if GetSex ( speaker ) = sex_male then
8185: LD_VAR 0 7
8189: PPUSH
8190: CALL_OW 258
8194: PUSH
8195: LD_INT 1
8197: EQUAL
8198: IFFALSE 8216
// SayRadio ( speaker , dialogMID ) else
8200: LD_VAR 0 7
8204: PPUSH
8205: LD_VAR 0 2
8209: PPUSH
8210: CALL_OW 94
8214: GO 8230
// SayRadio ( speaker , dialogFID ) ;
8216: LD_VAR 0 7
8220: PPUSH
8221: LD_VAR 0 3
8225: PPUSH
8226: CALL_OW 94
// end else
8230: GO 8277
// begin if GetSex ( speaker ) = sex_male then
8232: LD_VAR 0 7
8236: PPUSH
8237: CALL_OW 258
8241: PUSH
8242: LD_INT 1
8244: EQUAL
8245: IFFALSE 8263
// Say ( speaker , dialogMID ) else
8247: LD_VAR 0 7
8251: PPUSH
8252: LD_VAR 0 2
8256: PPUSH
8257: CALL_OW 88
8261: GO 8277
// Say ( speaker , dialogFID ) ;
8263: LD_VAR 0 7
8267: PPUSH
8268: LD_VAR 0 3
8272: PPUSH
8273: CALL_OW 88
// end ; result := speaker ;
8277: LD_ADDR_VAR 0 5
8281: PUSH
8282: LD_VAR 0 7
8286: ST_TO_ADDR
// end ;
8287: LD_VAR 0 5
8291: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8292: LD_INT 0
8294: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8295: LD_VAR 0 1
8299: PPUSH
8300: CALL_OW 255
8304: PUSH
8305: LD_OWVAR 2
8309: EQUAL
8310: PUSH
8311: LD_VAR 0 1
8315: PPUSH
8316: CALL_OW 302
8320: AND
8321: IFFALSE 8343
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8323: LD_VAR 0 1
8327: PPUSH
8328: LD_EXP 30
8332: PUSH
8333: LD_VAR 0 2
8337: STR
8338: PPUSH
8339: CALL_OW 38
// end ;
8343: LD_VAR 0 3
8347: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8348: LD_INT 0
8350: PPUSH
8351: PPUSH
8352: PPUSH
// resultCharactersToSave = [ ] ;
8353: LD_ADDR_VAR 0 5
8357: PUSH
8358: EMPTY
8359: ST_TO_ADDR
// for unit in characters do
8360: LD_ADDR_VAR 0 4
8364: PUSH
8365: LD_VAR 0 1
8369: PUSH
8370: FOR_IN
8371: IFFALSE 8419
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8373: LD_VAR 0 4
8377: PPUSH
8378: CALL_OW 255
8382: PUSH
8383: LD_OWVAR 2
8387: EQUAL
8388: PUSH
8389: LD_VAR 0 4
8393: PPUSH
8394: CALL_OW 302
8398: AND
8399: IFFALSE 8417
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8401: LD_ADDR_VAR 0 5
8405: PUSH
8406: LD_VAR 0 5
8410: PUSH
8411: LD_VAR 0 4
8415: ADD
8416: ST_TO_ADDR
8417: GO 8370
8419: POP
8420: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8421: LD_VAR 0 5
8425: PPUSH
8426: LD_EXP 30
8430: PUSH
8431: LD_VAR 0 2
8435: STR
8436: PPUSH
8437: CALL_OW 38
// end ;
8441: LD_VAR 0 3
8445: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8446: LD_INT 0
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
8453: PPUSH
8454: PPUSH
8455: PPUSH
8456: PPUSH
8457: PPUSH
8458: PPUSH
8459: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8460: LD_VAR 0 1
8464: PPUSH
8465: CALL_OW 302
8469: NOT
8470: PUSH
8471: LD_VAR 0 4
8475: PUSH
8476: LD_INT 1
8478: EQUAL
8479: OR
8480: PUSH
8481: LD_VAR 0 2
8485: PPUSH
8486: LD_VAR 0 3
8490: PPUSH
8491: CALL_OW 488
8495: NOT
8496: OR
8497: PUSH
8498: LD_VAR 0 1
8502: PPUSH
8503: LD_VAR 0 2
8507: PPUSH
8508: LD_VAR 0 3
8512: PPUSH
8513: CALL_OW 297
8517: PUSH
8518: LD_VAR 0 4
8522: GREATEREQUAL
8523: OR
8524: PUSH
8525: LD_VAR 0 5
8529: PUSH
8530: LD_INT 1
8532: PUSH
8533: LD_INT 0
8535: PUSH
8536: EMPTY
8537: LIST
8538: LIST
8539: IN
8540: NOT
8541: OR
8542: IFFALSE 8546
// exit ;
8544: GO 10103
// attempts = 0 ;
8546: LD_ADDR_VAR 0 17
8550: PUSH
8551: LD_INT 0
8553: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8554: LD_ADDR_VAR 0 7
8558: PUSH
8559: EMPTY
8560: ST_TO_ADDR
// list_coords = [ ] ;
8561: LD_ADDR_VAR 0 8
8565: PUSH
8566: EMPTY
8567: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8568: LD_ADDR_VAR 0 9
8572: PUSH
8573: LD_VAR 0 2
8577: PPUSH
8578: LD_VAR 0 3
8582: PPUSH
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 250
8592: PPUSH
8593: LD_VAR 0 1
8597: PPUSH
8598: CALL_OW 251
8602: PPUSH
8603: CALL 10108 0 4
8607: ST_TO_ADDR
// if attempts = 0 then
8608: LD_VAR 0 17
8612: PUSH
8613: LD_INT 0
8615: EQUAL
8616: IFFALSE 8724
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8618: LD_ADDR_VAR 0 10
8622: PUSH
8623: LD_VAR 0 9
8627: PUSH
8628: LD_VAR 0 9
8632: PUSH
8633: LD_INT 1
8635: PLUS
8636: PUSH
8637: LD_VAR 0 9
8641: PUSH
8642: LD_INT 1
8644: MINUS
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8651: LD_VAR 0 10
8655: PUSH
8656: LD_INT 2
8658: ARRAY
8659: PUSH
8660: LD_INT 6
8662: EQUAL
8663: IFFALSE 8686
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8665: LD_ADDR_VAR 0 10
8669: PUSH
8670: LD_VAR 0 10
8674: PPUSH
8675: LD_INT 2
8677: PPUSH
8678: LD_INT 0
8680: PPUSH
8681: CALL_OW 1
8685: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8686: LD_VAR 0 10
8690: PUSH
8691: LD_INT 3
8693: ARRAY
8694: PUSH
8695: LD_INT 1
8697: NEG
8698: EQUAL
8699: IFFALSE 8722
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8701: LD_ADDR_VAR 0 10
8705: PUSH
8706: LD_VAR 0 10
8710: PPUSH
8711: LD_INT 3
8713: PPUSH
8714: LD_INT 5
8716: PPUSH
8717: CALL_OW 1
8721: ST_TO_ADDR
// end else
8722: GO 8761
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8724: LD_ADDR_VAR 0 10
8728: PUSH
8729: LD_INT 0
8731: PUSH
8732: LD_INT 1
8734: PUSH
8735: LD_INT 2
8737: PUSH
8738: LD_INT 3
8740: PUSH
8741: LD_INT 4
8743: PUSH
8744: LD_INT 5
8746: PUSH
8747: EMPTY
8748: LIST
8749: LIST
8750: LIST
8751: LIST
8752: LIST
8753: LIST
8754: PUSH
8755: LD_VAR 0 9
8759: DIFF
8760: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8761: LD_ADDR_VAR 0 14
8765: PUSH
8766: DOUBLE
8767: LD_INT 1
8769: DEC
8770: ST_TO_ADDR
8771: LD_VAR 0 10
8775: PUSH
8776: LD_INT 0
8778: PLUS
8779: PUSH
8780: FOR_TO
8781: IFFALSE 9103
// case dir_list [ c ] of 0 :
8783: LD_VAR 0 10
8787: PUSH
8788: LD_VAR 0 14
8792: ARRAY
8793: PUSH
8794: LD_INT 0
8796: DOUBLE
8797: EQUAL
8798: IFTRUE 8802
8800: GO 8843
8802: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8803: LD_ADDR_VAR 0 8
8807: PUSH
8808: LD_VAR 0 8
8812: PPUSH
8813: LD_INT 1
8815: PPUSH
8816: LD_VAR 0 2
8820: PUSH
8821: LD_VAR 0 3
8825: PUSH
8826: LD_VAR 0 4
8830: MINUS
8831: PUSH
8832: EMPTY
8833: LIST
8834: LIST
8835: PPUSH
8836: CALL_OW 2
8840: ST_TO_ADDR
8841: GO 9101
8843: LD_INT 1
8845: DOUBLE
8846: EQUAL
8847: IFTRUE 8851
8849: GO 8892
8851: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8852: LD_ADDR_VAR 0 8
8856: PUSH
8857: LD_VAR 0 8
8861: PPUSH
8862: LD_INT 1
8864: PPUSH
8865: LD_VAR 0 2
8869: PUSH
8870: LD_VAR 0 4
8874: PLUS
8875: PUSH
8876: LD_VAR 0 3
8880: PUSH
8881: EMPTY
8882: LIST
8883: LIST
8884: PPUSH
8885: CALL_OW 2
8889: ST_TO_ADDR
8890: GO 9101
8892: LD_INT 2
8894: DOUBLE
8895: EQUAL
8896: IFTRUE 8900
8898: GO 8947
8900: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8901: LD_ADDR_VAR 0 8
8905: PUSH
8906: LD_VAR 0 8
8910: PPUSH
8911: LD_INT 1
8913: PPUSH
8914: LD_VAR 0 2
8918: PUSH
8919: LD_VAR 0 4
8923: PLUS
8924: PUSH
8925: LD_VAR 0 3
8929: PUSH
8930: LD_VAR 0 4
8934: PLUS
8935: PUSH
8936: EMPTY
8937: LIST
8938: LIST
8939: PPUSH
8940: CALL_OW 2
8944: ST_TO_ADDR
8945: GO 9101
8947: LD_INT 3
8949: DOUBLE
8950: EQUAL
8951: IFTRUE 8955
8953: GO 8996
8955: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8956: LD_ADDR_VAR 0 8
8960: PUSH
8961: LD_VAR 0 8
8965: PPUSH
8966: LD_INT 1
8968: PPUSH
8969: LD_VAR 0 2
8973: PUSH
8974: LD_VAR 0 3
8978: PUSH
8979: LD_VAR 0 4
8983: PLUS
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: PPUSH
8989: CALL_OW 2
8993: ST_TO_ADDR
8994: GO 9101
8996: LD_INT 4
8998: DOUBLE
8999: EQUAL
9000: IFTRUE 9004
9002: GO 9045
9004: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9005: LD_ADDR_VAR 0 8
9009: PUSH
9010: LD_VAR 0 8
9014: PPUSH
9015: LD_INT 1
9017: PPUSH
9018: LD_VAR 0 2
9022: PUSH
9023: LD_VAR 0 4
9027: MINUS
9028: PUSH
9029: LD_VAR 0 3
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: PPUSH
9038: CALL_OW 2
9042: ST_TO_ADDR
9043: GO 9101
9045: LD_INT 5
9047: DOUBLE
9048: EQUAL
9049: IFTRUE 9053
9051: GO 9100
9053: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9054: LD_ADDR_VAR 0 8
9058: PUSH
9059: LD_VAR 0 8
9063: PPUSH
9064: LD_INT 1
9066: PPUSH
9067: LD_VAR 0 2
9071: PUSH
9072: LD_VAR 0 4
9076: MINUS
9077: PUSH
9078: LD_VAR 0 3
9082: PUSH
9083: LD_VAR 0 4
9087: MINUS
9088: PUSH
9089: EMPTY
9090: LIST
9091: LIST
9092: PPUSH
9093: CALL_OW 2
9097: ST_TO_ADDR
9098: GO 9101
9100: POP
9101: GO 8780
9103: POP
9104: POP
// if dist < 30 then
9105: LD_VAR 0 4
9109: PUSH
9110: LD_INT 30
9112: LESS
9113: IFFALSE 9125
// c = 1 else
9115: LD_ADDR_VAR 0 14
9119: PUSH
9120: LD_INT 1
9122: ST_TO_ADDR
9123: GO 9133
// c = 2 ;
9125: LD_ADDR_VAR 0 14
9129: PUSH
9130: LD_INT 2
9132: ST_TO_ADDR
// b = 1 ;
9133: LD_ADDR_VAR 0 11
9137: PUSH
9138: LD_INT 1
9140: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9141: LD_VAR 0 11
9145: PUSH
9146: LD_VAR 0 4
9150: PUSH
9151: LD_INT 1
9153: MINUS
9154: LESSEQUAL
9155: IFFALSE 9583
// begin if 0 in dir_list and 1 in dir_list then
9157: LD_INT 0
9159: PUSH
9160: LD_VAR 0 10
9164: IN
9165: PUSH
9166: LD_INT 1
9168: PUSH
9169: LD_VAR 0 10
9173: IN
9174: AND
9175: IFFALSE 9227
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9177: LD_ADDR_VAR 0 8
9181: PUSH
9182: LD_VAR 0 8
9186: PPUSH
9187: LD_INT 1
9189: PPUSH
9190: LD_VAR 0 2
9194: PUSH
9195: LD_VAR 0 11
9199: PLUS
9200: PUSH
9201: LD_VAR 0 3
9205: PUSH
9206: LD_VAR 0 4
9210: MINUS
9211: PUSH
9212: LD_VAR 0 11
9216: PLUS
9217: PUSH
9218: EMPTY
9219: LIST
9220: LIST
9221: PPUSH
9222: CALL_OW 2
9226: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9227: LD_INT 1
9229: PUSH
9230: LD_VAR 0 10
9234: IN
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: LD_VAR 0 10
9243: IN
9244: AND
9245: IFFALSE 9291
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9247: LD_ADDR_VAR 0 8
9251: PUSH
9252: LD_VAR 0 8
9256: PPUSH
9257: LD_INT 1
9259: PPUSH
9260: LD_VAR 0 2
9264: PUSH
9265: LD_VAR 0 4
9269: PLUS
9270: PUSH
9271: LD_VAR 0 3
9275: PUSH
9276: LD_VAR 0 11
9280: PLUS
9281: PUSH
9282: EMPTY
9283: LIST
9284: LIST
9285: PPUSH
9286: CALL_OW 2
9290: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9291: LD_INT 2
9293: PUSH
9294: LD_VAR 0 10
9298: IN
9299: PUSH
9300: LD_INT 3
9302: PUSH
9303: LD_VAR 0 10
9307: IN
9308: AND
9309: IFFALSE 9361
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9311: LD_ADDR_VAR 0 8
9315: PUSH
9316: LD_VAR 0 8
9320: PPUSH
9321: LD_INT 1
9323: PPUSH
9324: LD_VAR 0 2
9328: PUSH
9329: LD_VAR 0 4
9333: PLUS
9334: PUSH
9335: LD_VAR 0 11
9339: MINUS
9340: PUSH
9341: LD_VAR 0 3
9345: PUSH
9346: LD_VAR 0 4
9350: PLUS
9351: PUSH
9352: EMPTY
9353: LIST
9354: LIST
9355: PPUSH
9356: CALL_OW 2
9360: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9361: LD_INT 3
9363: PUSH
9364: LD_VAR 0 10
9368: IN
9369: PUSH
9370: LD_INT 4
9372: PUSH
9373: LD_VAR 0 10
9377: IN
9378: AND
9379: IFFALSE 9431
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9381: LD_ADDR_VAR 0 8
9385: PUSH
9386: LD_VAR 0 8
9390: PPUSH
9391: LD_INT 1
9393: PPUSH
9394: LD_VAR 0 2
9398: PUSH
9399: LD_VAR 0 11
9403: MINUS
9404: PUSH
9405: LD_VAR 0 3
9409: PUSH
9410: LD_VAR 0 4
9414: PLUS
9415: PUSH
9416: LD_VAR 0 11
9420: MINUS
9421: PUSH
9422: EMPTY
9423: LIST
9424: LIST
9425: PPUSH
9426: CALL_OW 2
9430: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9431: LD_INT 4
9433: PUSH
9434: LD_VAR 0 10
9438: IN
9439: PUSH
9440: LD_INT 5
9442: PUSH
9443: LD_VAR 0 10
9447: IN
9448: AND
9449: IFFALSE 9495
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9451: LD_ADDR_VAR 0 8
9455: PUSH
9456: LD_VAR 0 8
9460: PPUSH
9461: LD_INT 1
9463: PPUSH
9464: LD_VAR 0 2
9468: PUSH
9469: LD_VAR 0 4
9473: MINUS
9474: PUSH
9475: LD_VAR 0 3
9479: PUSH
9480: LD_VAR 0 11
9484: MINUS
9485: PUSH
9486: EMPTY
9487: LIST
9488: LIST
9489: PPUSH
9490: CALL_OW 2
9494: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9495: LD_INT 5
9497: PUSH
9498: LD_VAR 0 10
9502: IN
9503: PUSH
9504: LD_INT 0
9506: PUSH
9507: LD_VAR 0 10
9511: IN
9512: AND
9513: IFFALSE 9565
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9515: LD_ADDR_VAR 0 8
9519: PUSH
9520: LD_VAR 0 8
9524: PPUSH
9525: LD_INT 1
9527: PPUSH
9528: LD_VAR 0 2
9532: PUSH
9533: LD_VAR 0 4
9537: MINUS
9538: PUSH
9539: LD_VAR 0 11
9543: PLUS
9544: PUSH
9545: LD_VAR 0 3
9549: PUSH
9550: LD_VAR 0 4
9554: MINUS
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: PPUSH
9560: CALL_OW 2
9564: ST_TO_ADDR
// b = b + c end ;
9565: LD_ADDR_VAR 0 11
9569: PUSH
9570: LD_VAR 0 11
9574: PUSH
9575: LD_VAR 0 14
9579: PLUS
9580: ST_TO_ADDR
9581: GO 9141
// if list_coords = 0 then
9583: LD_VAR 0 8
9587: PUSH
9588: LD_INT 0
9590: EQUAL
9591: IFFALSE 9595
// exit ;
9593: GO 10103
// repeat min_dist = 5000 ;
9595: LD_ADDR_VAR 0 12
9599: PUSH
9600: LD_INT 5000
9602: ST_TO_ADDR
// for b in list_coords do
9603: LD_ADDR_VAR 0 11
9607: PUSH
9608: LD_VAR 0 8
9612: PUSH
9613: FOR_IN
9614: IFFALSE 9673
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9616: LD_ADDR_VAR 0 13
9620: PUSH
9621: LD_VAR 0 1
9625: PPUSH
9626: LD_VAR 0 11
9630: PUSH
9631: LD_INT 1
9633: ARRAY
9634: PPUSH
9635: LD_VAR 0 11
9639: PUSH
9640: LD_INT 2
9642: ARRAY
9643: PPUSH
9644: CALL_OW 297
9648: ST_TO_ADDR
// if temp_dist < min_dist then
9649: LD_VAR 0 13
9653: PUSH
9654: LD_VAR 0 12
9658: LESS
9659: IFFALSE 9671
// min_dist = temp_dist ;
9661: LD_ADDR_VAR 0 12
9665: PUSH
9666: LD_VAR 0 13
9670: ST_TO_ADDR
// end ;
9671: GO 9613
9673: POP
9674: POP
// c = 0 ;
9675: LD_ADDR_VAR 0 14
9679: PUSH
9680: LD_INT 0
9682: ST_TO_ADDR
// repeat c = c + 1 ;
9683: LD_ADDR_VAR 0 14
9687: PUSH
9688: LD_VAR 0 14
9692: PUSH
9693: LD_INT 1
9695: PLUS
9696: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9697: LD_VAR 0 1
9701: PPUSH
9702: LD_VAR 0 8
9706: PUSH
9707: LD_VAR 0 14
9711: ARRAY
9712: PUSH
9713: LD_INT 1
9715: ARRAY
9716: PPUSH
9717: LD_VAR 0 8
9721: PUSH
9722: LD_VAR 0 14
9726: ARRAY
9727: PUSH
9728: LD_INT 2
9730: ARRAY
9731: PPUSH
9732: CALL_OW 297
9736: PUSH
9737: LD_VAR 0 12
9741: EQUAL
9742: IFFALSE 9807
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9744: LD_ADDR_VAR 0 7
9748: PUSH
9749: LD_VAR 0 7
9753: PPUSH
9754: LD_INT 1
9756: PPUSH
9757: LD_VAR 0 8
9761: PUSH
9762: LD_VAR 0 14
9766: ARRAY
9767: PPUSH
9768: CALL_OW 2
9772: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9773: LD_ADDR_VAR 0 8
9777: PUSH
9778: LD_VAR 0 8
9782: PPUSH
9783: LD_VAR 0 14
9787: PPUSH
9788: CALL_OW 3
9792: ST_TO_ADDR
// c = c - 1 ;
9793: LD_ADDR_VAR 0 14
9797: PUSH
9798: LD_VAR 0 14
9802: PUSH
9803: LD_INT 1
9805: MINUS
9806: ST_TO_ADDR
// end ; until c = list_coords ;
9807: LD_VAR 0 14
9811: PUSH
9812: LD_VAR 0 8
9816: EQUAL
9817: IFFALSE 9683
// c = 0 ;
9819: LD_ADDR_VAR 0 14
9823: PUSH
9824: LD_INT 0
9826: ST_TO_ADDR
// if list_nearest > 0 then
9827: LD_VAR 0 7
9831: PUSH
9832: LD_INT 0
9834: GREATER
9835: IFFALSE 9977
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9837: LD_ADDR_VAR 0 15
9841: PUSH
9842: LD_INT 1
9844: PPUSH
9845: LD_VAR 0 7
9849: PPUSH
9850: CALL_OW 12
9854: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9855: LD_ADDR_VAR 0 16
9859: PUSH
9860: LD_VAR 0 7
9864: PUSH
9865: LD_VAR 0 15
9869: ARRAY
9870: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9871: LD_VAR 0 16
9875: PUSH
9876: LD_INT 1
9878: ARRAY
9879: PPUSH
9880: LD_VAR 0 16
9884: PUSH
9885: LD_INT 2
9887: ARRAY
9888: PPUSH
9889: CALL_OW 488
9893: PUSH
9894: LD_INT 0
9896: GREATER
9897: PUSH
9898: LD_VAR 0 16
9902: PUSH
9903: LD_INT 1
9905: ARRAY
9906: PPUSH
9907: LD_VAR 0 16
9911: PUSH
9912: LD_INT 2
9914: ARRAY
9915: PPUSH
9916: CALL_OW 428
9920: PUSH
9921: LD_INT 0
9923: EQUAL
9924: AND
9925: IFFALSE 9937
// c = 1 else
9927: LD_ADDR_VAR 0 14
9931: PUSH
9932: LD_INT 1
9934: ST_TO_ADDR
9935: GO 9957
// list_nearest = Delete ( list_nearest , rand_num ) ;
9937: LD_ADDR_VAR 0 7
9941: PUSH
9942: LD_VAR 0 7
9946: PPUSH
9947: LD_VAR 0 15
9951: PPUSH
9952: CALL_OW 3
9956: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9957: LD_VAR 0 14
9961: PUSH
9962: LD_INT 1
9964: EQUAL
9965: PUSH
9966: LD_VAR 0 7
9970: PUSH
9971: LD_INT 0
9973: EQUAL
9974: OR
9975: IFFALSE 9837
// end ; until c = 1 or list_coords = 0 ;
9977: LD_VAR 0 14
9981: PUSH
9982: LD_INT 1
9984: EQUAL
9985: PUSH
9986: LD_VAR 0 8
9990: PUSH
9991: LD_INT 0
9993: EQUAL
9994: OR
9995: IFFALSE 9595
// attempts = attempts + 1 ;
9997: LD_ADDR_VAR 0 17
10001: PUSH
10002: LD_VAR 0 17
10006: PUSH
10007: LD_INT 1
10009: PLUS
10010: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10011: LD_VAR 0 14
10015: PUSH
10016: LD_INT 1
10018: EQUAL
10019: PUSH
10020: LD_VAR 0 17
10024: PUSH
10025: LD_INT 1
10027: GREATER
10028: OR
10029: IFFALSE 8554
// if c = 1 then
10031: LD_VAR 0 14
10035: PUSH
10036: LD_INT 1
10038: EQUAL
10039: IFFALSE 10103
// if add then
10041: LD_VAR 0 5
10045: IFFALSE 10076
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10047: LD_VAR 0 1
10051: PPUSH
10052: LD_VAR 0 16
10056: PUSH
10057: LD_INT 1
10059: ARRAY
10060: PPUSH
10061: LD_VAR 0 16
10065: PUSH
10066: LD_INT 2
10068: ARRAY
10069: PPUSH
10070: CALL_OW 171
10074: GO 10103
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10076: LD_VAR 0 1
10080: PPUSH
10081: LD_VAR 0 16
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_VAR 0 16
10094: PUSH
10095: LD_INT 2
10097: ARRAY
10098: PPUSH
10099: CALL_OW 111
// end ;
10103: LD_VAR 0 6
10107: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10108: LD_INT 0
10110: PPUSH
10111: PPUSH
10112: PPUSH
10113: PPUSH
10114: PPUSH
10115: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10116: LD_VAR 0 1
10120: PPUSH
10121: LD_VAR 0 2
10125: PPUSH
10126: CALL_OW 488
10130: NOT
10131: PUSH
10132: LD_VAR 0 3
10136: PPUSH
10137: LD_VAR 0 4
10141: PPUSH
10142: CALL_OW 488
10146: NOT
10147: OR
10148: IFFALSE 10161
// begin result = - 1 ;
10150: LD_ADDR_VAR 0 5
10154: PUSH
10155: LD_INT 1
10157: NEG
10158: ST_TO_ADDR
// exit ;
10159: GO 10321
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10161: LD_ADDR_VAR 0 6
10165: PUSH
10166: LD_VAR 0 1
10170: PPUSH
10171: LD_VAR 0 2
10175: PPUSH
10176: LD_VAR 0 3
10180: PPUSH
10181: LD_VAR 0 4
10185: PPUSH
10186: CALL_OW 298
10190: ST_TO_ADDR
// dist_2 = 99999 ;
10191: LD_ADDR_VAR 0 7
10195: PUSH
10196: LD_INT 99999
10198: ST_TO_ADDR
// for b = 0 to 5 do
10199: LD_ADDR_VAR 0 8
10203: PUSH
10204: DOUBLE
10205: LD_INT 0
10207: DEC
10208: ST_TO_ADDR
10209: LD_INT 5
10211: PUSH
10212: FOR_TO
10213: IFFALSE 10309
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10215: LD_ADDR_VAR 0 9
10219: PUSH
10220: LD_VAR 0 1
10224: PPUSH
10225: LD_VAR 0 8
10229: PPUSH
10230: LD_VAR 0 6
10234: PPUSH
10235: CALL_OW 272
10239: PPUSH
10240: LD_VAR 0 2
10244: PPUSH
10245: LD_VAR 0 8
10249: PPUSH
10250: LD_VAR 0 6
10254: PPUSH
10255: CALL_OW 273
10259: PPUSH
10260: LD_VAR 0 3
10264: PPUSH
10265: LD_VAR 0 4
10269: PPUSH
10270: CALL_OW 298
10274: ST_TO_ADDR
// if temp_dist < dist_2 then
10275: LD_VAR 0 9
10279: PUSH
10280: LD_VAR 0 7
10284: LESS
10285: IFFALSE 10307
// begin dist_2 = temp_dist ;
10287: LD_ADDR_VAR 0 7
10291: PUSH
10292: LD_VAR 0 9
10296: ST_TO_ADDR
// dir = b ;
10297: LD_ADDR_VAR 0 10
10301: PUSH
10302: LD_VAR 0 8
10306: ST_TO_ADDR
// end ; end ;
10307: GO 10212
10309: POP
10310: POP
// result = dir ;
10311: LD_ADDR_VAR 0 5
10315: PUSH
10316: LD_VAR 0 10
10320: ST_TO_ADDR
// end ;
10321: LD_VAR 0 5
10325: RET
// export function MoveToHill ; begin
10326: LD_INT 0
10328: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10329: LD_EXP 47
10333: PPUSH
10334: LD_INT 65
10336: PPUSH
10337: LD_INT 59
10339: PPUSH
10340: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10344: LD_EXP 47
10348: PPUSH
10349: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10353: LD_EXP 48
10357: PPUSH
10358: LD_INT 65
10360: PPUSH
10361: LD_INT 58
10363: PPUSH
10364: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10368: LD_EXP 48
10372: PPUSH
10373: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10377: LD_EXP 49
10381: PPUSH
10382: LD_INT 64
10384: PPUSH
10385: LD_INT 57
10387: PPUSH
10388: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10392: LD_EXP 49
10396: PPUSH
10397: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10401: LD_EXP 50
10405: PPUSH
10406: LD_INT 64
10408: PPUSH
10409: LD_INT 56
10411: PPUSH
10412: CALL_OW 111
// AddComCrawl ( Balei ) ;
10416: LD_EXP 50
10420: PPUSH
10421: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10425: LD_EXP 51
10429: PPUSH
10430: LD_INT 63
10432: PPUSH
10433: LD_INT 55
10435: PPUSH
10436: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10440: LD_EXP 51
10444: PPUSH
10445: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10449: LD_EXP 52
10453: PPUSH
10454: LD_INT 66
10456: PPUSH
10457: LD_INT 58
10459: PPUSH
10460: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10464: LD_EXP 52
10468: PPUSH
10469: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10473: LD_EXP 54
10477: PPUSH
10478: CALL_OW 255
10482: PUSH
10483: LD_INT 6
10485: EQUAL
10486: PUSH
10487: LD_EXP 12
10491: AND
10492: IFFALSE 10518
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10494: LD_EXP 54
10498: PPUSH
10499: LD_INT 63
10501: PPUSH
10502: LD_INT 54
10504: PPUSH
10505: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10509: LD_EXP 54
10513: PPUSH
10514: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10518: LD_EXP 47
10522: PPUSH
10523: LD_INT 65
10525: PPUSH
10526: LD_INT 59
10528: PPUSH
10529: CALL_OW 297
10533: PUSH
10534: LD_INT 7
10536: LESS
10537: IFFALSE 10563
// begin ComCrawl ( Pokryshkin ) ;
10539: LD_EXP 47
10543: PPUSH
10544: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10548: LD_EXP 47
10552: PPUSH
10553: LD_INT 65
10555: PPUSH
10556: LD_INT 59
10558: PPUSH
10559: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10563: LD_EXP 48
10567: PPUSH
10568: LD_INT 65
10570: PPUSH
10571: LD_INT 58
10573: PPUSH
10574: CALL_OW 297
10578: PUSH
10579: LD_INT 7
10581: LESS
10582: IFFALSE 10608
// begin ComCrawl ( Saseda ) ;
10584: LD_EXP 48
10588: PPUSH
10589: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10593: LD_EXP 48
10597: PPUSH
10598: LD_INT 65
10600: PPUSH
10601: LD_INT 58
10603: PPUSH
10604: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
10608: LD_EXP 49
10612: PPUSH
10613: LD_INT 64
10615: PPUSH
10616: LD_INT 57
10618: PPUSH
10619: CALL_OW 297
10623: PUSH
10624: LD_INT 7
10626: LESS
10627: IFFALSE 10653
// begin ComCrawl ( Jaworska ) ;
10629: LD_EXP 49
10633: PPUSH
10634: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10638: LD_EXP 49
10642: PPUSH
10643: LD_INT 64
10645: PPUSH
10646: LD_INT 57
10648: PPUSH
10649: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
10653: LD_EXP 50
10657: PPUSH
10658: LD_INT 64
10660: PPUSH
10661: LD_INT 56
10663: PPUSH
10664: CALL_OW 297
10668: PUSH
10669: LD_INT 7
10671: LESS
10672: IFFALSE 10698
// begin ComCrawl ( Balei ) ;
10674: LD_EXP 50
10678: PPUSH
10679: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10683: LD_EXP 50
10687: PPUSH
10688: LD_INT 64
10690: PPUSH
10691: LD_INT 56
10693: PPUSH
10694: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
10698: LD_EXP 51
10702: PPUSH
10703: LD_INT 63
10705: PPUSH
10706: LD_INT 55
10708: PPUSH
10709: CALL_OW 297
10713: PUSH
10714: LD_INT 7
10716: LESS
10717: IFFALSE 10743
// begin ComCrawl ( Belkov ) ;
10719: LD_EXP 51
10723: PPUSH
10724: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10728: LD_EXP 51
10732: PPUSH
10733: LD_INT 63
10735: PPUSH
10736: LD_INT 55
10738: PPUSH
10739: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
10743: LD_EXP 52
10747: PPUSH
10748: LD_INT 66
10750: PPUSH
10751: LD_INT 58
10753: PPUSH
10754: CALL_OW 297
10758: PUSH
10759: LD_INT 7
10761: LESS
10762: IFFALSE 10788
// begin ComCrawl ( Jaunzeme ) ;
10764: LD_EXP 52
10768: PPUSH
10769: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10773: LD_EXP 52
10777: PPUSH
10778: LD_INT 66
10780: PPUSH
10781: LD_INT 58
10783: PPUSH
10784: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10788: LD_EXP 54
10792: PPUSH
10793: LD_INT 63
10795: PPUSH
10796: LD_INT 54
10798: PPUSH
10799: CALL_OW 297
10803: PUSH
10804: LD_INT 7
10806: LESS
10807: PUSH
10808: LD_EXP 54
10812: PPUSH
10813: CALL_OW 255
10817: PUSH
10818: LD_INT 6
10820: EQUAL
10821: AND
10822: PUSH
10823: LD_EXP 12
10827: AND
10828: IFFALSE 10854
// begin ComCrawl ( Gnyevko ) ;
10830: LD_EXP 54
10834: PPUSH
10835: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10839: LD_EXP 54
10843: PPUSH
10844: LD_INT 63
10846: PPUSH
10847: LD_INT 54
10849: PPUSH
10850: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10854: LD_INT 35
10856: PPUSH
10857: CALL_OW 67
// until IsDying ( Charles ) or IsDead ( Charles ) ;
10861: LD_EXP 42
10865: PPUSH
10866: CALL_OW 303
10870: PUSH
10871: LD_EXP 42
10875: PPUSH
10876: CALL_OW 301
10880: OR
10881: IFFALSE 10518
// end ;
10883: LD_VAR 0 1
10887: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
10888: LD_EXP 42
10892: PPUSH
10893: CALL_OW 303
10897: NOT
10898: PUSH
10899: LD_EXP 42
10903: PPUSH
10904: CALL_OW 301
10908: NOT
10909: OR
10910: PUSH
10911: LD_EXP 15
10915: AND
10916: IFFALSE 11258
10918: GO 10920
10920: DISABLE
// begin enable ;
10921: ENABLE
// if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10922: LD_EXP 47
10926: PPUSH
10927: LD_INT 65
10929: PPUSH
10930: LD_INT 59
10932: PPUSH
10933: CALL_OW 297
10937: PUSH
10938: LD_INT 7
10940: LESS
10941: IFFALSE 10967
// begin ComCrawl ( Pokryshkin ) ;
10943: LD_EXP 47
10947: PPUSH
10948: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10952: LD_EXP 47
10956: PPUSH
10957: LD_INT 65
10959: PPUSH
10960: LD_INT 59
10962: PPUSH
10963: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10967: LD_EXP 48
10971: PPUSH
10972: LD_INT 65
10974: PPUSH
10975: LD_INT 58
10977: PPUSH
10978: CALL_OW 297
10982: PUSH
10983: LD_INT 7
10985: LESS
10986: IFFALSE 11012
// begin ComCrawl ( Saseda ) ;
10988: LD_EXP 48
10992: PPUSH
10993: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10997: LD_EXP 48
11001: PPUSH
11002: LD_INT 65
11004: PPUSH
11005: LD_INT 58
11007: PPUSH
11008: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11012: LD_EXP 49
11016: PPUSH
11017: LD_INT 64
11019: PPUSH
11020: LD_INT 57
11022: PPUSH
11023: CALL_OW 297
11027: PUSH
11028: LD_INT 7
11030: LESS
11031: IFFALSE 11057
// begin ComCrawl ( Jaworska ) ;
11033: LD_EXP 49
11037: PPUSH
11038: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11042: LD_EXP 49
11046: PPUSH
11047: LD_INT 64
11049: PPUSH
11050: LD_INT 57
11052: PPUSH
11053: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11057: LD_EXP 50
11061: PPUSH
11062: LD_INT 64
11064: PPUSH
11065: LD_INT 56
11067: PPUSH
11068: CALL_OW 297
11072: PUSH
11073: LD_INT 7
11075: LESS
11076: IFFALSE 11102
// begin ComCrawl ( Balei ) ;
11078: LD_EXP 50
11082: PPUSH
11083: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11087: LD_EXP 50
11091: PPUSH
11092: LD_INT 64
11094: PPUSH
11095: LD_INT 56
11097: PPUSH
11098: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11102: LD_EXP 51
11106: PPUSH
11107: LD_INT 63
11109: PPUSH
11110: LD_INT 55
11112: PPUSH
11113: CALL_OW 297
11117: PUSH
11118: LD_INT 7
11120: LESS
11121: IFFALSE 11147
// begin ComCrawl ( Belkov ) ;
11123: LD_EXP 51
11127: PPUSH
11128: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11132: LD_EXP 51
11136: PPUSH
11137: LD_INT 63
11139: PPUSH
11140: LD_INT 55
11142: PPUSH
11143: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11147: LD_EXP 52
11151: PPUSH
11152: LD_INT 66
11154: PPUSH
11155: LD_INT 58
11157: PPUSH
11158: CALL_OW 297
11162: PUSH
11163: LD_INT 7
11165: LESS
11166: IFFALSE 11192
// begin ComCrawl ( Jaunzeme ) ;
11168: LD_EXP 52
11172: PPUSH
11173: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11177: LD_EXP 52
11181: PPUSH
11182: LD_INT 66
11184: PPUSH
11185: LD_INT 58
11187: PPUSH
11188: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11192: LD_EXP 54
11196: PPUSH
11197: LD_INT 63
11199: PPUSH
11200: LD_INT 54
11202: PPUSH
11203: CALL_OW 297
11207: PUSH
11208: LD_INT 7
11210: LESS
11211: PUSH
11212: LD_EXP 54
11216: PPUSH
11217: CALL_OW 255
11221: PUSH
11222: LD_INT 6
11224: EQUAL
11225: AND
11226: PUSH
11227: LD_EXP 12
11231: AND
11232: IFFALSE 11258
// begin ComCrawl ( Gnyevko ) ;
11234: LD_EXP 54
11238: PPUSH
11239: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11243: LD_EXP 54
11247: PPUSH
11248: LD_INT 63
11250: PPUSH
11251: LD_INT 54
11253: PPUSH
11254: CALL_OW 171
// end ; end ; end_of_file
11258: END
// export function BurlakDying ; begin
11259: LD_INT 0
11261: PPUSH
// YouLost ( Burlak ) ;
11262: LD_STRING Burlak
11264: PPUSH
11265: CALL_OW 104
// end ;
11269: LD_VAR 0 1
11273: RET
// every 0 0$1 trigger kirovSolds = 0 do
11274: LD_EXP 56
11278: PUSH
11279: LD_INT 0
11281: EQUAL
11282: IFFALSE 11294
11284: GO 11286
11286: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11287: LD_STRING KirovSoldsDie
11289: PPUSH
11290: CALL_OW 104
11294: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11295: LD_EXP 22
11299: PUSH
11300: LD_INT 1
11302: PPUSH
11303: LD_INT 22
11305: PUSH
11306: LD_INT 3
11308: PUSH
11309: EMPTY
11310: LIST
11311: LIST
11312: PUSH
11313: LD_INT 21
11315: PUSH
11316: LD_INT 1
11318: PUSH
11319: EMPTY
11320: LIST
11321: LIST
11322: PUSH
11323: EMPTY
11324: LIST
11325: LIST
11326: PPUSH
11327: CALL_OW 71
11331: PUSH
11332: LD_INT 0
11334: EQUAL
11335: AND
11336: IFFALSE 11615
11338: GO 11340
11340: DISABLE
11341: LD_INT 0
11343: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11344: LD_EXP 53
11348: PPUSH
11349: CALL_OW 302
11353: PUSH
11354: LD_EXP 53
11358: PPUSH
11359: CALL_OW 255
11363: PUSH
11364: LD_INT 8
11366: EQUAL
11367: AND
11368: PUSH
11369: LD_EXP 54
11373: PPUSH
11374: CALL_OW 302
11378: PUSH
11379: LD_EXP 54
11383: PPUSH
11384: CALL_OW 255
11388: PUSH
11389: LD_INT 8
11391: EQUAL
11392: AND
11393: OR
11394: IFFALSE 11526
// begin case Query ( QExit2 ) of 1 :
11396: LD_STRING QExit2
11398: PPUSH
11399: CALL_OW 97
11403: PUSH
11404: LD_INT 1
11406: DOUBLE
11407: EQUAL
11408: IFTRUE 11412
11410: GO 11504
11412: POP
// begin if IsOk ( Belkov ) then
11413: LD_EXP 51
11417: PPUSH
11418: CALL_OW 302
11422: IFFALSE 11438
// Say ( Belkov , D12-Bel-1 ) else
11424: LD_EXP 51
11428: PPUSH
11429: LD_STRING D12-Bel-1
11431: PPUSH
11432: CALL_OW 88
11436: GO 11498
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11438: LD_INT 22
11440: PUSH
11441: LD_INT 3
11443: PUSH
11444: EMPTY
11445: LIST
11446: LIST
11447: PUSH
11448: LD_INT 21
11450: PUSH
11451: LD_INT 1
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PUSH
11458: LD_INT 50
11460: PUSH
11461: EMPTY
11462: LIST
11463: PUSH
11464: LD_INT 26
11466: PUSH
11467: LD_INT 1
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PPUSH
11480: CALL_OW 69
11484: PPUSH
11485: LD_STRING D12-RSol1-1
11487: PPUSH
11488: LD_STRING 
11490: PPUSH
11491: LD_INT 0
11493: PPUSH
11494: CALL 8113 0 4
// FinishMission ;
11498: CALL 11618 0 0
// end ; 2 :
11502: GO 11524
11504: LD_INT 2
11506: DOUBLE
11507: EQUAL
11508: IFTRUE 11512
11510: GO 11523
11512: POP
// begin wait ( 0 0$5 ) ;
11513: LD_INT 175
11515: PPUSH
11516: CALL_OW 67
// enable ;
11520: ENABLE
// end ; end ;
11521: GO 11524
11523: POP
// end else
11524: GO 11615
// begin if IsOk ( Belkov ) then
11526: LD_EXP 51
11530: PPUSH
11531: CALL_OW 302
11535: IFFALSE 11551
// Say ( Belkov , D12-Bel-1 ) else
11537: LD_EXP 51
11541: PPUSH
11542: LD_STRING D12-Bel-1
11544: PPUSH
11545: CALL_OW 88
11549: GO 11611
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11551: LD_INT 22
11553: PUSH
11554: LD_INT 3
11556: PUSH
11557: EMPTY
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 21
11563: PUSH
11564: LD_INT 1
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: PUSH
11571: LD_INT 50
11573: PUSH
11574: EMPTY
11575: LIST
11576: PUSH
11577: LD_INT 26
11579: PUSH
11580: LD_INT 1
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: PPUSH
11593: CALL_OW 69
11597: PPUSH
11598: LD_STRING D12-RSol1-1
11600: PPUSH
11601: LD_STRING 
11603: PPUSH
11604: LD_INT 0
11606: PPUSH
11607: CALL 8113 0 4
// FinishMission ;
11611: CALL 11618 0 0
// end ; end ;
11615: PPOPN 1
11617: END
// function FinishMission ; begin
11618: LD_INT 0
11620: PPUSH
// SetRewards ;
11621: CALL 11642 0 0
// SavePlayerCharacters ;
11625: CALL 11993 0 0
// SaveGlobalVariables ;
11629: CALL 12123 0 0
// YouWin ;
11633: CALL_OW 103
// end ;
11637: LD_VAR 0 1
11641: RET
// function SetRewards ; begin
11642: LD_INT 0
11644: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11645: LD_EXP 19
11649: NOT
11650: PUSH
11651: LD_EXP 20
11655: NOT
11656: AND
11657: IFFALSE 11669
// AddMedal ( NoEscape , 1 ) ;
11659: LD_STRING NoEscape
11661: PPUSH
11662: LD_INT 1
11664: PPUSH
11665: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11669: LD_EXP 19
11673: PUSH
11674: LD_EXP 20
11678: NOT
11679: AND
11680: IFFALSE 11693
// AddMedal ( NoEscape , - 1 ) ;
11682: LD_STRING NoEscape
11684: PPUSH
11685: LD_INT 1
11687: NEG
11688: PPUSH
11689: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11693: LD_EXP 19
11697: NOT
11698: PUSH
11699: LD_EXP 20
11703: AND
11704: IFFALSE 11717
// AddMedal ( NoEscape , - 2 ) ;
11706: LD_STRING NoEscape
11708: PPUSH
11709: LD_INT 2
11711: NEG
11712: PPUSH
11713: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11717: LD_EXP 19
11721: PUSH
11722: LD_EXP 20
11726: AND
11727: IFFALSE 11740
// AddMedal ( NoEscape , - 3 ) ;
11729: LD_STRING NoEscape
11731: PPUSH
11732: LD_INT 3
11734: NEG
11735: PPUSH
11736: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11740: LD_EXP 12
11744: PUSH
11745: LD_EXP 54
11749: PPUSH
11750: CALL_OW 302
11754: AND
11755: PUSH
11756: LD_EXP 21
11760: AND
11761: PUSH
11762: LD_EXP 53
11766: PPUSH
11767: CALL_OW 302
11771: AND
11772: IFFALSE 11784
// AddMedal ( Gnyevko , 1 ) ;
11774: LD_STRING Gnyevko
11776: PPUSH
11777: LD_INT 1
11779: PPUSH
11780: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11784: LD_EXP 12
11788: NOT
11789: PUSH
11790: LD_EXP 21
11794: AND
11795: PUSH
11796: LD_EXP 53
11800: PPUSH
11801: CALL_OW 302
11805: AND
11806: IFFALSE 11819
// AddMedal ( Gnyevko , - 1 ) ;
11808: LD_STRING Gnyevko
11810: PPUSH
11811: LD_INT 1
11813: NEG
11814: PPUSH
11815: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11819: LD_EXP 12
11823: PUSH
11824: LD_EXP 21
11828: NOT
11829: PUSH
11830: LD_EXP 54
11834: PPUSH
11835: CALL_OW 302
11839: NOT
11840: OR
11841: PUSH
11842: LD_EXP 53
11846: PPUSH
11847: CALL_OW 302
11851: NOT
11852: OR
11853: AND
11854: IFFALSE 11867
// AddMedal ( Gnyevko , - 2 ) ;
11856: LD_STRING Gnyevko
11858: PPUSH
11859: LD_INT 2
11861: NEG
11862: PPUSH
11863: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11867: LD_EXP 12
11871: NOT
11872: PUSH
11873: LD_EXP 21
11877: NOT
11878: AND
11879: PUSH
11880: LD_EXP 54
11884: PPUSH
11885: CALL_OW 302
11889: NOT
11890: PUSH
11891: LD_EXP 53
11895: PPUSH
11896: CALL_OW 302
11900: NOT
11901: AND
11902: OR
11903: IFFALSE 11916
// AddMedal ( Gnyevko , - 3 ) ;
11905: LD_STRING Gnyevko
11907: PPUSH
11908: LD_INT 3
11910: NEG
11911: PPUSH
11912: CALL_OW 101
// if lostComradesCounter = 0 then
11916: LD_EXP 23
11920: PUSH
11921: LD_INT 0
11923: EQUAL
11924: IFFALSE 11938
// AddMedal ( NoLosses , 1 ) else
11926: LD_STRING NoLosses
11928: PPUSH
11929: LD_INT 1
11931: PPUSH
11932: CALL_OW 101
11936: GO 11948
// AddMedal ( NoLosses , 0 ) ;
11938: LD_STRING NoLosses
11940: PPUSH
11941: LD_INT 0
11943: PPUSH
11944: CALL_OW 101
// GiveMedals ( Main ) ;
11948: LD_STRING Main
11950: PPUSH
11951: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11955: LD_INT 22
11957: PUSH
11958: LD_INT 3
11960: PUSH
11961: EMPTY
11962: LIST
11963: LIST
11964: PUSH
11965: LD_INT 21
11967: PUSH
11968: LD_INT 1
11970: PUSH
11971: EMPTY
11972: LIST
11973: LIST
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PPUSH
11979: CALL_OW 69
11983: PPUSH
11984: CALL_OW 43
// end ;
11988: LD_VAR 0 1
11992: RET
// function SavePlayerCharacters ; var others ; begin
11993: LD_INT 0
11995: PPUSH
11996: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
11997: LD_EXP 46
12001: PPUSH
12002: LD_STRING Burlak
12004: PPUSH
12005: CALL 8292 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12009: LD_EXP 54
12013: PPUSH
12014: LD_STRING Gnyevko
12016: PPUSH
12017: CALL 8292 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12021: LD_EXP 51
12025: PPUSH
12026: LD_STRING Belkov
12028: PPUSH
12029: CALL 8292 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12033: LD_EXP 53
12037: PPUSH
12038: LD_STRING Kirilenkova
12040: PPUSH
12041: CALL 8292 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12045: LD_ADDR_VAR 0 2
12049: PUSH
12050: LD_INT 22
12052: PUSH
12053: LD_INT 3
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 21
12062: PUSH
12063: LD_INT 1
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: PUSH
12070: EMPTY
12071: LIST
12072: LIST
12073: PPUSH
12074: CALL_OW 69
12078: PUSH
12079: LD_EXP 46
12083: PUSH
12084: LD_EXP 54
12088: PUSH
12089: LD_EXP 51
12093: PUSH
12094: LD_EXP 53
12098: PUSH
12099: EMPTY
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: DIFF
12105: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
12106: LD_VAR 0 2
12110: PPUSH
12111: LD_STRING other_survivors
12113: PPUSH
12114: CALL 8348 0 2
// end ;
12118: LD_VAR 0 1
12122: RET
// function SaveGlobalVariables ; begin
12123: LD_INT 0
12125: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12126: LD_EXP 1
12130: PPUSH
12131: LD_STRING 01_GladstoneStatus
12133: PPUSH
12134: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12138: LD_EXP 2
12142: PPUSH
12143: LD_STRING 01_JohannaStatus
12145: PPUSH
12146: CALL_OW 39
// end ; end_of_file
12150: LD_VAR 0 1
12154: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12155: LD_INT 0
12157: PPUSH
12158: PPUSH
12159: PPUSH
// uc_side = 1 ;
12160: LD_ADDR_OWVAR 20
12164: PUSH
12165: LD_INT 1
12167: ST_TO_ADDR
// hc_class := 1 ;
12168: LD_ADDR_OWVAR 28
12172: PUSH
12173: LD_INT 1
12175: ST_TO_ADDR
// hc_sex := sex_male ;
12176: LD_ADDR_OWVAR 27
12180: PUSH
12181: LD_INT 1
12183: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12184: LD_ADDR_OWVAR 33
12188: PUSH
12189: LD_STRING AmGalRemake
12191: ST_TO_ADDR
// hc_face_number := 1 ;
12192: LD_ADDR_OWVAR 34
12196: PUSH
12197: LD_INT 1
12199: ST_TO_ADDR
// hc_name := Charles Brown ;
12200: LD_ADDR_OWVAR 26
12204: PUSH
12205: LD_STRING Charles Brown
12207: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12208: LD_ADDR_OWVAR 29
12212: PUSH
12213: LD_INT 12
12215: PUSH
12216: LD_INT 11
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12223: LD_ADDR_OWVAR 31
12227: PUSH
12228: LD_INT 1
12230: PUSH
12231: LD_INT 0
12233: PUSH
12234: LD_INT 1
12236: PUSH
12237: LD_INT 1
12239: PUSH
12240: EMPTY
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: ST_TO_ADDR
// Charles = CreateHuman ;
12246: LD_ADDR_EXP 42
12250: PUSH
12251: CALL_OW 44
12255: ST_TO_ADDR
// hc_class := 1 ;
12256: LD_ADDR_OWVAR 28
12260: PUSH
12261: LD_INT 1
12263: ST_TO_ADDR
// hc_sex := sex_female ;
12264: LD_ADDR_OWVAR 27
12268: PUSH
12269: LD_INT 2
12271: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12272: LD_ADDR_OWVAR 33
12276: PUSH
12277: LD_STRING AmGalRemake
12279: ST_TO_ADDR
// hc_face_number := 2 ;
12280: LD_ADDR_OWVAR 34
12284: PUSH
12285: LD_INT 2
12287: ST_TO_ADDR
// hc_name := Johanna Holland ;
12288: LD_ADDR_OWVAR 26
12292: PUSH
12293: LD_STRING Johanna Holland
12295: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12296: LD_ADDR_OWVAR 29
12300: PUSH
12301: LD_INT 12
12303: PUSH
12304: LD_INT 11
12306: PUSH
12307: EMPTY
12308: LIST
12309: LIST
12310: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12311: LD_ADDR_OWVAR 31
12315: PUSH
12316: LD_EXP 36
12320: PUSH
12321: LD_INT 0
12323: PPUSH
12324: LD_INT 2
12326: PPUSH
12327: CALL_OW 12
12331: PUSH
12332: LD_INT 0
12334: PPUSH
12335: LD_INT 2
12337: PPUSH
12338: CALL_OW 12
12342: PUSH
12343: LD_INT 0
12345: PPUSH
12346: LD_INT 2
12348: PPUSH
12349: CALL_OW 12
12353: PUSH
12354: EMPTY
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: ST_TO_ADDR
// Johanna = CreateHuman ;
12360: LD_ADDR_EXP 43
12364: PUSH
12365: CALL_OW 44
12369: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12370: LD_EXP 43
12374: PPUSH
12375: LD_INT 19
12377: PPUSH
12378: LD_INT 0
12380: PPUSH
12381: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12385: LD_EXP 43
12389: PPUSH
12390: LD_INT 23
12392: PPUSH
12393: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
12397: LD_ADDR_EXP 44
12401: PUSH
12402: LD_STRING Gladstone
12404: PPUSH
12405: LD_INT 0
12407: PPUSH
12408: CALL 8050 0 2
12412: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12413: LD_EXP 44
12417: PPUSH
12418: LD_INT 22
12420: PPUSH
12421: CALL_OW 52
// amApemans = [ ] ;
12425: LD_ADDR_EXP 45
12429: PUSH
12430: EMPTY
12431: ST_TO_ADDR
// for i := 1 to amApeAmount do
12432: LD_ADDR_VAR 0 2
12436: PUSH
12437: DOUBLE
12438: LD_INT 1
12440: DEC
12441: ST_TO_ADDR
12442: LD_EXP 35
12446: PUSH
12447: FOR_TO
12448: IFFALSE 12563
// begin hc_class := class_apeman ;
12450: LD_ADDR_OWVAR 28
12454: PUSH
12455: LD_INT 12
12457: ST_TO_ADDR
// hc_gallery :=  ;
12458: LD_ADDR_OWVAR 33
12462: PUSH
12463: LD_STRING 
12465: ST_TO_ADDR
// hc_name :=  ;
12466: LD_ADDR_OWVAR 26
12470: PUSH
12471: LD_STRING 
12473: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12474: LD_ADDR_OWVAR 31
12478: PUSH
12479: LD_EXP 36
12483: PUSH
12484: LD_INT 0
12486: PPUSH
12487: LD_INT 2
12489: PPUSH
12490: CALL_OW 12
12494: PUSH
12495: LD_INT 0
12497: PPUSH
12498: LD_INT 2
12500: PPUSH
12501: CALL_OW 12
12505: PUSH
12506: LD_INT 0
12508: PPUSH
12509: LD_INT 2
12511: PPUSH
12512: CALL_OW 12
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: ST_TO_ADDR
// ape = CreateHuman ;
12523: LD_ADDR_VAR 0 3
12527: PUSH
12528: CALL_OW 44
12532: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12533: LD_VAR 0 3
12537: PPUSH
12538: LD_INT 22
12540: PPUSH
12541: CALL_OW 52
// amApemans = amApemans ^ ape ;
12545: LD_ADDR_EXP 45
12549: PUSH
12550: LD_EXP 45
12554: PUSH
12555: LD_VAR 0 3
12559: ADD
12560: ST_TO_ADDR
// end ;
12561: GO 12447
12563: POP
12564: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12565: LD_INT 23
12567: PPUSH
12568: LD_EXP 33
12572: PPUSH
12573: CALL_OW 234
// end ; end_of_file
12577: LD_VAR 0 1
12581: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12582: LD_INT 0
12584: PPUSH
// PrepareHero ;
12585: CALL 12610 0 0
// PreparePokryshkinTeams ;
12589: CALL 12704 0 0
// PrepareJelena ;
12593: CALL 12969 0 0
// PrepareGnyevko ;
12597: CALL 13001 0 0
// PrepareKurin ;
12601: CALL 12672 0 0
// end ;
12605: LD_VAR 0 1
12609: RET
// function PrepareHero ; begin
12610: LD_INT 0
12612: PPUSH
// uc_side = 3 ;
12613: LD_ADDR_OWVAR 20
12617: PUSH
12618: LD_INT 3
12620: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
12621: LD_ADDR_EXP 46
12625: PUSH
12626: LD_STRING Burlak
12628: PPUSH
12629: LD_INT 0
12631: PPUSH
12632: CALL 8050 0 2
12636: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12637: LD_EXP 46
12641: PPUSH
12642: LD_EXP 37
12646: PUSH
12647: LD_INT 1
12649: ARRAY
12650: PPUSH
12651: LD_EXP 37
12655: PUSH
12656: LD_INT 2
12658: ARRAY
12659: PPUSH
12660: LD_INT 1
12662: PPUSH
12663: CALL_OW 48
// end ;
12667: LD_VAR 0 1
12671: RET
// function PrepareKurin ; begin
12672: LD_INT 0
12674: PPUSH
// uc_side = 6 ;
12675: LD_ADDR_OWVAR 20
12679: PUSH
12680: LD_INT 6
12682: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
12683: LD_ADDR_EXP 55
12687: PUSH
12688: LD_STRING Kurin
12690: PPUSH
12691: LD_INT 0
12693: PPUSH
12694: CALL 8050 0 2
12698: ST_TO_ADDR
// end ;
12699: LD_VAR 0 1
12703: RET
// function PreparePokryshkinTeams ; begin
12704: LD_INT 0
12706: PPUSH
// uc_side = 6 ;
12707: LD_ADDR_OWVAR 20
12711: PUSH
12712: LD_INT 6
12714: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
12715: LD_ADDR_EXP 47
12719: PUSH
12720: LD_STRING Pokryshkin
12722: PPUSH
12723: LD_INT 0
12725: PPUSH
12726: CALL 8050 0 2
12730: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
12731: LD_ADDR_EXP 48
12735: PUSH
12736: LD_STRING Saseda
12738: PPUSH
12739: LD_INT 0
12741: PPUSH
12742: CALL 8050 0 2
12746: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
12747: LD_ADDR_EXP 49
12751: PUSH
12752: LD_STRING Jaworska
12754: PPUSH
12755: LD_INT 0
12757: PPUSH
12758: CALL 8050 0 2
12762: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
12763: LD_ADDR_EXP 50
12767: PUSH
12768: LD_STRING Balei
12770: PPUSH
12771: LD_INT 0
12773: PPUSH
12774: CALL 8050 0 2
12778: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
12779: LD_ADDR_EXP 51
12783: PUSH
12784: LD_STRING Belkov
12786: PPUSH
12787: LD_INT 0
12789: PPUSH
12790: CALL 8050 0 2
12794: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12795: LD_EXP 47
12799: PPUSH
12800: LD_INT 25
12802: PPUSH
12803: LD_INT 0
12805: PPUSH
12806: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12810: LD_EXP 48
12814: PPUSH
12815: LD_INT 17
12817: PPUSH
12818: LD_INT 0
12820: PPUSH
12821: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12825: LD_EXP 49
12829: PPUSH
12830: LD_INT 17
12832: PPUSH
12833: LD_INT 0
12835: PPUSH
12836: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12840: LD_EXP 50
12844: PPUSH
12845: LD_INT 17
12847: PPUSH
12848: LD_INT 0
12850: PPUSH
12851: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12855: LD_EXP 51
12859: PPUSH
12860: LD_INT 17
12862: PPUSH
12863: LD_INT 0
12865: PPUSH
12866: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12870: LD_ADDR_EXP 56
12874: PUSH
12875: LD_EXP 47
12879: PUSH
12880: LD_EXP 48
12884: PUSH
12885: LD_EXP 50
12889: PUSH
12890: LD_EXP 51
12894: PUSH
12895: LD_EXP 49
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: ST_TO_ADDR
// if Difficulty < 3 then
12907: LD_OWVAR 67
12911: PUSH
12912: LD_INT 3
12914: LESS
12915: IFFALSE 12964
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
12917: LD_ADDR_EXP 52
12921: PUSH
12922: LD_STRING Jaunzeme
12924: PPUSH
12925: LD_INT 0
12927: PPUSH
12928: CALL 8050 0 2
12932: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12933: LD_EXP 52
12937: PPUSH
12938: LD_INT 26
12940: PPUSH
12941: LD_INT 0
12943: PPUSH
12944: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12948: LD_ADDR_EXP 56
12952: PUSH
12953: LD_EXP 56
12957: PUSH
12958: LD_EXP 52
12962: ADD
12963: ST_TO_ADDR
// end ; end ;
12964: LD_VAR 0 1
12968: RET
// function PrepareJelena ; begin
12969: LD_INT 0
12971: PPUSH
// uc_side = 8 ;
12972: LD_ADDR_OWVAR 20
12976: PUSH
12977: LD_INT 8
12979: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
12980: LD_ADDR_EXP 53
12984: PUSH
12985: LD_STRING Kirilenkova
12987: PPUSH
12988: LD_INT 0
12990: PPUSH
12991: CALL 8050 0 2
12995: ST_TO_ADDR
// end ;
12996: LD_VAR 0 1
13000: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13001: LD_INT 0
13003: PPUSH
13004: PPUSH
13005: PPUSH
13006: PPUSH
// uc_side = 8 ;
13007: LD_ADDR_OWVAR 20
13011: PUSH
13012: LD_INT 8
13014: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13015: LD_ADDR_EXP 54
13019: PUSH
13020: LD_STRING Gnyevko
13022: PPUSH
13023: LD_INT 0
13025: PPUSH
13026: CALL 8050 0 2
13030: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13031: LD_ADDR_VAR 0 4
13035: PUSH
13036: LD_EXP 38
13040: PUSH
13041: LD_INT 1
13043: PPUSH
13044: LD_EXP 38
13048: PPUSH
13049: CALL_OW 12
13053: ARRAY
13054: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13055: LD_EXP 54
13059: PPUSH
13060: LD_VAR 0 4
13064: PUSH
13065: LD_INT 1
13067: ARRAY
13068: PPUSH
13069: LD_VAR 0 4
13073: PUSH
13074: LD_INT 2
13076: ARRAY
13077: PPUSH
13078: LD_INT 0
13080: PPUSH
13081: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13085: LD_EXP 54
13089: PPUSH
13090: LD_EXP 39
13094: PPUSH
13095: CALL_OW 234
// ComHold ( Gnyevko ) ;
13099: LD_EXP 54
13103: PPUSH
13104: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
13108: LD_ADDR_VAR 0 3
13112: PUSH
13113: DOUBLE
13114: LD_INT 1
13116: DEC
13117: ST_TO_ADDR
13118: LD_EXP 27
13122: PUSH
13123: LD_INT 1
13125: ARRAY
13126: PUSH
13127: LD_INT 3
13129: PUSH
13130: LD_INT 2
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: PUSH
13141: LD_OWVAR 67
13145: ARRAY
13146: MINUS
13147: PUSH
13148: FOR_TO
13149: IFFALSE 13279
// begin uc_side = 0 ;
13151: LD_ADDR_OWVAR 20
13155: PUSH
13156: LD_INT 0
13158: ST_TO_ADDR
// uc_nation = nation_nature ;
13159: LD_ADDR_OWVAR 21
13163: PUSH
13164: LD_INT 0
13166: ST_TO_ADDR
// hc_class = class_apeman ;
13167: LD_ADDR_OWVAR 28
13171: PUSH
13172: LD_INT 12
13174: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13175: LD_ADDR_OWVAR 31
13179: PUSH
13180: LD_EXP 28
13184: PUSH
13185: LD_INT 1
13187: ARRAY
13188: PUSH
13189: LD_EXP 28
13193: PUSH
13194: LD_INT 2
13196: ARRAY
13197: PUSH
13198: LD_EXP 28
13202: PUSH
13203: LD_INT 3
13205: ARRAY
13206: PUSH
13207: LD_EXP 28
13211: PUSH
13212: LD_INT 4
13214: ARRAY
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13222: LD_ADDR_OWVAR 35
13226: PUSH
13227: LD_EXP 34
13231: ST_TO_ADDR
// un = CreateHuman ;
13232: LD_ADDR_VAR 0 2
13236: PUSH
13237: CALL_OW 44
13241: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13242: LD_VAR 0 2
13246: PPUSH
13247: LD_EXP 54
13251: PPUSH
13252: CALL_OW 250
13256: PPUSH
13257: LD_EXP 54
13261: PPUSH
13262: CALL_OW 251
13266: PPUSH
13267: LD_INT 8
13269: PPUSH
13270: LD_INT 0
13272: PPUSH
13273: CALL_OW 50
// end ;
13277: GO 13148
13279: POP
13280: POP
// end ; end_of_file
13281: LD_VAR 0 1
13285: RET
// export function CreateNature ; var i , un ; begin
13286: LD_INT 0
13288: PPUSH
13289: PPUSH
13290: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13291: LD_ADDR_VAR 0 2
13295: PUSH
13296: DOUBLE
13297: LD_INT 1
13299: DEC
13300: ST_TO_ADDR
13301: LD_EXP 27
13305: PUSH
13306: LD_INT 1
13308: ARRAY
13309: PUSH
13310: FOR_TO
13311: IFFALSE 13421
// begin uc_side = 0 ;
13313: LD_ADDR_OWVAR 20
13317: PUSH
13318: LD_INT 0
13320: ST_TO_ADDR
// uc_nation = nation_nature ;
13321: LD_ADDR_OWVAR 21
13325: PUSH
13326: LD_INT 0
13328: ST_TO_ADDR
// hc_class = class_apeman ;
13329: LD_ADDR_OWVAR 28
13333: PUSH
13334: LD_INT 12
13336: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13337: LD_ADDR_OWVAR 31
13341: PUSH
13342: LD_EXP 28
13346: PUSH
13347: LD_INT 1
13349: ARRAY
13350: PUSH
13351: LD_EXP 28
13355: PUSH
13356: LD_INT 2
13358: ARRAY
13359: PUSH
13360: LD_EXP 28
13364: PUSH
13365: LD_INT 3
13367: ARRAY
13368: PUSH
13369: LD_EXP 28
13373: PUSH
13374: LD_INT 4
13376: ARRAY
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13384: LD_ADDR_OWVAR 35
13388: PUSH
13389: LD_EXP 34
13393: ST_TO_ADDR
// un = CreateHuman ;
13394: LD_ADDR_VAR 0 3
13398: PUSH
13399: CALL_OW 44
13403: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13404: LD_VAR 0 3
13408: PPUSH
13409: LD_INT 16
13411: PPUSH
13412: LD_INT 0
13414: PPUSH
13415: CALL_OW 49
// end ;
13419: GO 13310
13421: POP
13422: POP
// for i := 1 to animalsAmount [ 2 ] do
13423: LD_ADDR_VAR 0 2
13427: PUSH
13428: DOUBLE
13429: LD_INT 1
13431: DEC
13432: ST_TO_ADDR
13433: LD_EXP 27
13437: PUSH
13438: LD_INT 2
13440: ARRAY
13441: PUSH
13442: FOR_TO
13443: IFFALSE 13553
// begin uc_side = 0 ;
13445: LD_ADDR_OWVAR 20
13449: PUSH
13450: LD_INT 0
13452: ST_TO_ADDR
// uc_nation = nation_nature ;
13453: LD_ADDR_OWVAR 21
13457: PUSH
13458: LD_INT 0
13460: ST_TO_ADDR
// hc_class = class_phororhacos ;
13461: LD_ADDR_OWVAR 28
13465: PUSH
13466: LD_INT 18
13468: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13469: LD_ADDR_OWVAR 31
13473: PUSH
13474: LD_EXP 28
13478: PUSH
13479: LD_INT 1
13481: ARRAY
13482: PUSH
13483: LD_EXP 28
13487: PUSH
13488: LD_INT 2
13490: ARRAY
13491: PUSH
13492: LD_EXP 28
13496: PUSH
13497: LD_INT 3
13499: ARRAY
13500: PUSH
13501: LD_EXP 28
13505: PUSH
13506: LD_INT 4
13508: ARRAY
13509: PUSH
13510: EMPTY
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13516: LD_ADDR_OWVAR 35
13520: PUSH
13521: LD_EXP 29
13525: ST_TO_ADDR
// un = CreateHuman ;
13526: LD_ADDR_VAR 0 3
13530: PUSH
13531: CALL_OW 44
13535: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13536: LD_VAR 0 3
13540: PPUSH
13541: LD_INT 15
13543: PPUSH
13544: LD_INT 0
13546: PPUSH
13547: CALL_OW 49
// end ;
13551: GO 13442
13553: POP
13554: POP
// for i := 1 to animalsAmount [ 3 ] do
13555: LD_ADDR_VAR 0 2
13559: PUSH
13560: DOUBLE
13561: LD_INT 1
13563: DEC
13564: ST_TO_ADDR
13565: LD_EXP 27
13569: PUSH
13570: LD_INT 3
13572: ARRAY
13573: PUSH
13574: FOR_TO
13575: IFFALSE 13685
// begin uc_side = 0 ;
13577: LD_ADDR_OWVAR 20
13581: PUSH
13582: LD_INT 0
13584: ST_TO_ADDR
// uc_nation = nation_nature ;
13585: LD_ADDR_OWVAR 21
13589: PUSH
13590: LD_INT 0
13592: ST_TO_ADDR
// hc_class = class_tiger ;
13593: LD_ADDR_OWVAR 28
13597: PUSH
13598: LD_INT 14
13600: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13601: LD_ADDR_OWVAR 31
13605: PUSH
13606: LD_EXP 28
13610: PUSH
13611: LD_INT 1
13613: ARRAY
13614: PUSH
13615: LD_EXP 28
13619: PUSH
13620: LD_INT 2
13622: ARRAY
13623: PUSH
13624: LD_EXP 28
13628: PUSH
13629: LD_INT 3
13631: ARRAY
13632: PUSH
13633: LD_EXP 28
13637: PUSH
13638: LD_INT 4
13640: ARRAY
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13648: LD_ADDR_OWVAR 35
13652: PUSH
13653: LD_EXP 29
13657: ST_TO_ADDR
// un = CreateHuman ;
13658: LD_ADDR_VAR 0 3
13662: PUSH
13663: CALL_OW 44
13667: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13668: LD_VAR 0 3
13672: PPUSH
13673: LD_INT 15
13675: PPUSH
13676: LD_INT 0
13678: PPUSH
13679: CALL_OW 49
// end ;
13683: GO 13574
13685: POP
13686: POP
// for i := 1 to animalsAmount [ 4 ] do
13687: LD_ADDR_VAR 0 2
13691: PUSH
13692: DOUBLE
13693: LD_INT 1
13695: DEC
13696: ST_TO_ADDR
13697: LD_EXP 27
13701: PUSH
13702: LD_INT 4
13704: ARRAY
13705: PUSH
13706: FOR_TO
13707: IFFALSE 13817
// begin uc_side = 0 ;
13709: LD_ADDR_OWVAR 20
13713: PUSH
13714: LD_INT 0
13716: ST_TO_ADDR
// uc_nation = nation_nature ;
13717: LD_ADDR_OWVAR 21
13721: PUSH
13722: LD_INT 0
13724: ST_TO_ADDR
// hc_class = 21 ;
13725: LD_ADDR_OWVAR 28
13729: PUSH
13730: LD_INT 21
13732: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13733: LD_ADDR_OWVAR 31
13737: PUSH
13738: LD_EXP 28
13742: PUSH
13743: LD_INT 1
13745: ARRAY
13746: PUSH
13747: LD_EXP 28
13751: PUSH
13752: LD_INT 2
13754: ARRAY
13755: PUSH
13756: LD_EXP 28
13760: PUSH
13761: LD_INT 3
13763: ARRAY
13764: PUSH
13765: LD_EXP 28
13769: PUSH
13770: LD_INT 4
13772: ARRAY
13773: PUSH
13774: EMPTY
13775: LIST
13776: LIST
13777: LIST
13778: LIST
13779: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13780: LD_ADDR_OWVAR 35
13784: PUSH
13785: LD_EXP 29
13789: ST_TO_ADDR
// un = CreateHuman ;
13790: LD_ADDR_VAR 0 3
13794: PUSH
13795: CALL_OW 44
13799: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13800: LD_VAR 0 3
13804: PPUSH
13805: LD_INT 15
13807: PPUSH
13808: LD_INT 0
13810: PPUSH
13811: CALL_OW 49
// end ;
13815: GO 13706
13817: POP
13818: POP
// end ; end_of_file
13819: LD_VAR 0 1
13823: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13824: LD_VAR 0 1
13828: PUSH
13829: LD_EXP 46
13833: EQUAL
13834: PUSH
13835: LD_EXP 53
13839: PPUSH
13840: CALL_OW 255
13844: PUSH
13845: LD_INT 3
13847: EQUAL
13848: NOT
13849: AND
13850: PUSH
13851: LD_EXP 53
13855: PPUSH
13856: CALL_OW 302
13860: NOT
13861: AND
13862: IFFALSE 13868
// BurlakDying ;
13864: CALL 11259 0 0
// if unit = Gladstone then
13868: LD_VAR 0 1
13872: PUSH
13873: LD_EXP 44
13877: EQUAL
13878: IFFALSE 13888
// gladstoneStatus = 0 ;
13880: LD_ADDR_EXP 1
13884: PUSH
13885: LD_INT 0
13887: ST_TO_ADDR
// if unit = Johanna then
13888: LD_VAR 0 1
13892: PUSH
13893: LD_EXP 43
13897: EQUAL
13898: IFFALSE 13908
// johannaStatus = 0 ;
13900: LD_ADDR_EXP 2
13904: PUSH
13905: LD_INT 0
13907: ST_TO_ADDR
// end ;
13908: PPOPN 1
13910: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13911: LD_VAR 0 1
13915: PUSH
13916: LD_EXP 46
13920: EQUAL
13921: IFFALSE 13927
// BurlakDying ;
13923: CALL 11259 0 0
// if GetSide ( unit ) = 3 then
13927: LD_VAR 0 1
13931: PPUSH
13932: CALL_OW 255
13936: PUSH
13937: LD_INT 3
13939: EQUAL
13940: IFFALSE 13956
// lostComradesCounter = lostComradesCounter + 1 ;
13942: LD_ADDR_EXP 23
13946: PUSH
13947: LD_EXP 23
13951: PUSH
13952: LD_INT 1
13954: PLUS
13955: ST_TO_ADDR
// if unit in kirovSolds then
13956: LD_VAR 0 1
13960: PUSH
13961: LD_EXP 56
13965: IN
13966: IFFALSE 13984
// kirovSolds = kirovSolds diff unit ;
13968: LD_ADDR_EXP 56
13972: PUSH
13973: LD_EXP 56
13977: PUSH
13978: LD_VAR 0 1
13982: DIFF
13983: ST_TO_ADDR
// end ;
13984: PPOPN 1
13986: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
13987: LD_VAR 0 1
13991: PUSH
13992: LD_INT 3
13994: EQUAL
13995: PUSH
13996: LD_VAR 0 2
14000: PUSH
14001: LD_INT 1
14003: EQUAL
14004: AND
14005: PUSH
14006: LD_VAR 0 1
14010: PUSH
14011: LD_INT 1
14013: EQUAL
14014: PUSH
14015: LD_VAR 0 2
14019: PUSH
14020: LD_INT 3
14022: EQUAL
14023: AND
14024: PUSH
14025: LD_EXP 17
14029: PUSH
14030: LD_INT 1
14032: EQUAL
14033: AND
14034: OR
14035: IFFALSE 14041
// Dial_SecondAttack ;
14037: CALL 6011 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14041: LD_VAR 0 1
14045: PUSH
14046: LD_INT 3
14048: EQUAL
14049: PUSH
14050: LD_VAR 0 2
14054: PUSH
14055: LD_INT 6
14057: EQUAL
14058: AND
14059: PUSH
14060: LD_EXP 18
14064: NOT
14065: AND
14066: IFFALSE 14072
// Dialogue_AttackComrade ;
14068: CALL 4123 0 0
// end ; end_of_file
14072: PPOPN 2
14074: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14075: LD_EXP 53
14079: PPUSH
14080: CALL_OW 255
14084: PUSH
14085: LD_INT 3
14087: EQUAL
14088: PUSH
14089: LD_EXP 26
14093: PUSH
14094: LD_INT 525
14096: LESS
14097: AND
14098: IFFALSE 14110
14100: GO 14102
14102: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14103: LD_STRING ACH_YELENA
14105: PPUSH
14106: CALL_OW 543
14110: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14111: LD_INT 23
14113: PUSH
14114: LD_INT 0
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PUSH
14121: LD_INT 2
14123: PUSH
14124: LD_INT 25
14126: PUSH
14127: LD_INT 14
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: PUSH
14134: LD_INT 25
14136: PUSH
14137: LD_INT 18
14139: PUSH
14140: EMPTY
14141: LIST
14142: LIST
14143: PUSH
14144: LD_INT 25
14146: PUSH
14147: LD_INT 12
14149: PUSH
14150: EMPTY
14151: LIST
14152: LIST
14153: PUSH
14154: EMPTY
14155: LIST
14156: LIST
14157: LIST
14158: LIST
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: PPUSH
14164: CALL_OW 69
14168: NOT
14169: IFFALSE 14181
14171: GO 14173
14173: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14174: LD_STRING ACH_NATURE
14176: PPUSH
14177: CALL_OW 543
14181: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
14182: LD_INT 0
14184: PPUSH
14185: PPUSH
// if not missionNumber then
14186: LD_VAR 0 2
14190: NOT
14191: IFFALSE 14195
// exit ;
14193: GO 14325
// achiv := false ;
14195: LD_ADDR_VAR 0 7
14199: PUSH
14200: LD_INT 0
14202: ST_TO_ADDR
// case campaignNumber of 1 :
14203: LD_VAR 0 1
14207: PUSH
14208: LD_INT 1
14210: DOUBLE
14211: EQUAL
14212: IFTRUE 14216
14214: GO 14227
14216: POP
// achiv := ACH_GOTA ; 2 :
14217: LD_ADDR_VAR 0 7
14221: PUSH
14222: LD_STRING ACH_GOTA
14224: ST_TO_ADDR
14225: GO 14277
14227: LD_INT 2
14229: DOUBLE
14230: EQUAL
14231: IFTRUE 14235
14233: GO 14238
14235: POP
// ; 3 :
14236: GO 14277
14238: LD_INT 3
14240: DOUBLE
14241: EQUAL
14242: IFTRUE 14246
14244: GO 14257
14246: POP
// achiv := ACH_MOTSU ; 4 :
14247: LD_ADDR_VAR 0 7
14251: PUSH
14252: LD_STRING ACH_MOTSU
14254: ST_TO_ADDR
14255: GO 14277
14257: LD_INT 4
14259: DOUBLE
14260: EQUAL
14261: IFTRUE 14265
14263: GO 14276
14265: POP
// achiv := ACH_LOP ; end ;
14266: LD_ADDR_VAR 0 7
14270: PUSH
14271: LD_STRING ACH_LOP
14273: ST_TO_ADDR
14274: GO 14277
14276: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
14277: LD_OWVAR 67
14281: PUSH
14282: LD_INT 3
14284: EQUAL
14285: PUSH
14286: LD_VAR 0 7
14290: AND
14291: PUSH
14292: LD_VAR 0 3
14296: AND
14297: PUSH
14298: LD_VAR 0 4
14302: AND
14303: PUSH
14304: LD_VAR 0 5
14308: AND
14309: IFFALSE 14325
// SetAchievementEX ( achiv , missionNumber ) ;
14311: LD_VAR 0 7
14315: PPUSH
14316: LD_VAR 0 2
14320: PPUSH
14321: CALL_OW 564
// end ;
14325: LD_VAR 0 6
14329: RET
// export function SA_BehemothConstructed ; begin
14330: LD_INT 0
14332: PPUSH
// SetAchievement ( ACH_SMC ) ;
14333: LD_STRING ACH_SMC
14335: PPUSH
14336: CALL_OW 543
// end ; end_of_file
14340: LD_VAR 0 1
14344: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14345: LD_VAR 0 2
14349: PUSH
14350: LD_INT 100
14352: EQUAL
14353: IFFALSE 15302
// begin if not StreamModeActive then
14355: LD_EXP 57
14359: NOT
14360: IFFALSE 14370
// StreamModeActive := true ;
14362: LD_ADDR_EXP 57
14366: PUSH
14367: LD_INT 1
14369: ST_TO_ADDR
// if p3 = 0 then
14370: LD_VAR 0 3
14374: PUSH
14375: LD_INT 0
14377: EQUAL
14378: IFFALSE 14384
// InitStreamMode ;
14380: CALL 15460 0 0
// if p3 = 1 then
14384: LD_VAR 0 3
14388: PUSH
14389: LD_INT 1
14391: EQUAL
14392: IFFALSE 14402
// sRocket := true ;
14394: LD_ADDR_EXP 62
14398: PUSH
14399: LD_INT 1
14401: ST_TO_ADDR
// if p3 = 2 then
14402: LD_VAR 0 3
14406: PUSH
14407: LD_INT 2
14409: EQUAL
14410: IFFALSE 14420
// sSpeed := true ;
14412: LD_ADDR_EXP 61
14416: PUSH
14417: LD_INT 1
14419: ST_TO_ADDR
// if p3 = 3 then
14420: LD_VAR 0 3
14424: PUSH
14425: LD_INT 3
14427: EQUAL
14428: IFFALSE 14438
// sEngine := true ;
14430: LD_ADDR_EXP 63
14434: PUSH
14435: LD_INT 1
14437: ST_TO_ADDR
// if p3 = 4 then
14438: LD_VAR 0 3
14442: PUSH
14443: LD_INT 4
14445: EQUAL
14446: IFFALSE 14456
// sSpec := true ;
14448: LD_ADDR_EXP 60
14452: PUSH
14453: LD_INT 1
14455: ST_TO_ADDR
// if p3 = 5 then
14456: LD_VAR 0 3
14460: PUSH
14461: LD_INT 5
14463: EQUAL
14464: IFFALSE 14474
// sLevel := true ;
14466: LD_ADDR_EXP 64
14470: PUSH
14471: LD_INT 1
14473: ST_TO_ADDR
// if p3 = 6 then
14474: LD_VAR 0 3
14478: PUSH
14479: LD_INT 6
14481: EQUAL
14482: IFFALSE 14492
// sArmoury := true ;
14484: LD_ADDR_EXP 65
14488: PUSH
14489: LD_INT 1
14491: ST_TO_ADDR
// if p3 = 7 then
14492: LD_VAR 0 3
14496: PUSH
14497: LD_INT 7
14499: EQUAL
14500: IFFALSE 14510
// sRadar := true ;
14502: LD_ADDR_EXP 66
14506: PUSH
14507: LD_INT 1
14509: ST_TO_ADDR
// if p3 = 8 then
14510: LD_VAR 0 3
14514: PUSH
14515: LD_INT 8
14517: EQUAL
14518: IFFALSE 14528
// sBunker := true ;
14520: LD_ADDR_EXP 67
14524: PUSH
14525: LD_INT 1
14527: ST_TO_ADDR
// if p3 = 9 then
14528: LD_VAR 0 3
14532: PUSH
14533: LD_INT 9
14535: EQUAL
14536: IFFALSE 14546
// sHack := true ;
14538: LD_ADDR_EXP 68
14542: PUSH
14543: LD_INT 1
14545: ST_TO_ADDR
// if p3 = 10 then
14546: LD_VAR 0 3
14550: PUSH
14551: LD_INT 10
14553: EQUAL
14554: IFFALSE 14564
// sFire := true ;
14556: LD_ADDR_EXP 69
14560: PUSH
14561: LD_INT 1
14563: ST_TO_ADDR
// if p3 = 11 then
14564: LD_VAR 0 3
14568: PUSH
14569: LD_INT 11
14571: EQUAL
14572: IFFALSE 14582
// sRefresh := true ;
14574: LD_ADDR_EXP 70
14578: PUSH
14579: LD_INT 1
14581: ST_TO_ADDR
// if p3 = 12 then
14582: LD_VAR 0 3
14586: PUSH
14587: LD_INT 12
14589: EQUAL
14590: IFFALSE 14600
// sExp := true ;
14592: LD_ADDR_EXP 71
14596: PUSH
14597: LD_INT 1
14599: ST_TO_ADDR
// if p3 = 13 then
14600: LD_VAR 0 3
14604: PUSH
14605: LD_INT 13
14607: EQUAL
14608: IFFALSE 14618
// sDepot := true ;
14610: LD_ADDR_EXP 72
14614: PUSH
14615: LD_INT 1
14617: ST_TO_ADDR
// if p3 = 14 then
14618: LD_VAR 0 3
14622: PUSH
14623: LD_INT 14
14625: EQUAL
14626: IFFALSE 14636
// sFlag := true ;
14628: LD_ADDR_EXP 73
14632: PUSH
14633: LD_INT 1
14635: ST_TO_ADDR
// if p3 = 15 then
14636: LD_VAR 0 3
14640: PUSH
14641: LD_INT 15
14643: EQUAL
14644: IFFALSE 14654
// sKamikadze := true ;
14646: LD_ADDR_EXP 81
14650: PUSH
14651: LD_INT 1
14653: ST_TO_ADDR
// if p3 = 16 then
14654: LD_VAR 0 3
14658: PUSH
14659: LD_INT 16
14661: EQUAL
14662: IFFALSE 14672
// sTroll := true ;
14664: LD_ADDR_EXP 82
14668: PUSH
14669: LD_INT 1
14671: ST_TO_ADDR
// if p3 = 17 then
14672: LD_VAR 0 3
14676: PUSH
14677: LD_INT 17
14679: EQUAL
14680: IFFALSE 14690
// sSlow := true ;
14682: LD_ADDR_EXP 83
14686: PUSH
14687: LD_INT 1
14689: ST_TO_ADDR
// if p3 = 18 then
14690: LD_VAR 0 3
14694: PUSH
14695: LD_INT 18
14697: EQUAL
14698: IFFALSE 14708
// sLack := true ;
14700: LD_ADDR_EXP 84
14704: PUSH
14705: LD_INT 1
14707: ST_TO_ADDR
// if p3 = 19 then
14708: LD_VAR 0 3
14712: PUSH
14713: LD_INT 19
14715: EQUAL
14716: IFFALSE 14726
// sTank := true ;
14718: LD_ADDR_EXP 86
14722: PUSH
14723: LD_INT 1
14725: ST_TO_ADDR
// if p3 = 20 then
14726: LD_VAR 0 3
14730: PUSH
14731: LD_INT 20
14733: EQUAL
14734: IFFALSE 14744
// sRemote := true ;
14736: LD_ADDR_EXP 87
14740: PUSH
14741: LD_INT 1
14743: ST_TO_ADDR
// if p3 = 21 then
14744: LD_VAR 0 3
14748: PUSH
14749: LD_INT 21
14751: EQUAL
14752: IFFALSE 14762
// sPowell := true ;
14754: LD_ADDR_EXP 88
14758: PUSH
14759: LD_INT 1
14761: ST_TO_ADDR
// if p3 = 22 then
14762: LD_VAR 0 3
14766: PUSH
14767: LD_INT 22
14769: EQUAL
14770: IFFALSE 14780
// sTeleport := true ;
14772: LD_ADDR_EXP 91
14776: PUSH
14777: LD_INT 1
14779: ST_TO_ADDR
// if p3 = 23 then
14780: LD_VAR 0 3
14784: PUSH
14785: LD_INT 23
14787: EQUAL
14788: IFFALSE 14798
// sOilTower := true ;
14790: LD_ADDR_EXP 93
14794: PUSH
14795: LD_INT 1
14797: ST_TO_ADDR
// if p3 = 24 then
14798: LD_VAR 0 3
14802: PUSH
14803: LD_INT 24
14805: EQUAL
14806: IFFALSE 14816
// sShovel := true ;
14808: LD_ADDR_EXP 94
14812: PUSH
14813: LD_INT 1
14815: ST_TO_ADDR
// if p3 = 25 then
14816: LD_VAR 0 3
14820: PUSH
14821: LD_INT 25
14823: EQUAL
14824: IFFALSE 14834
// sSheik := true ;
14826: LD_ADDR_EXP 95
14830: PUSH
14831: LD_INT 1
14833: ST_TO_ADDR
// if p3 = 26 then
14834: LD_VAR 0 3
14838: PUSH
14839: LD_INT 26
14841: EQUAL
14842: IFFALSE 14852
// sEarthquake := true ;
14844: LD_ADDR_EXP 97
14848: PUSH
14849: LD_INT 1
14851: ST_TO_ADDR
// if p3 = 27 then
14852: LD_VAR 0 3
14856: PUSH
14857: LD_INT 27
14859: EQUAL
14860: IFFALSE 14870
// sAI := true ;
14862: LD_ADDR_EXP 98
14866: PUSH
14867: LD_INT 1
14869: ST_TO_ADDR
// if p3 = 28 then
14870: LD_VAR 0 3
14874: PUSH
14875: LD_INT 28
14877: EQUAL
14878: IFFALSE 14888
// sCargo := true ;
14880: LD_ADDR_EXP 101
14884: PUSH
14885: LD_INT 1
14887: ST_TO_ADDR
// if p3 = 29 then
14888: LD_VAR 0 3
14892: PUSH
14893: LD_INT 29
14895: EQUAL
14896: IFFALSE 14906
// sDLaser := true ;
14898: LD_ADDR_EXP 102
14902: PUSH
14903: LD_INT 1
14905: ST_TO_ADDR
// if p3 = 30 then
14906: LD_VAR 0 3
14910: PUSH
14911: LD_INT 30
14913: EQUAL
14914: IFFALSE 14924
// sExchange := true ;
14916: LD_ADDR_EXP 103
14920: PUSH
14921: LD_INT 1
14923: ST_TO_ADDR
// if p3 = 31 then
14924: LD_VAR 0 3
14928: PUSH
14929: LD_INT 31
14931: EQUAL
14932: IFFALSE 14942
// sFac := true ;
14934: LD_ADDR_EXP 104
14938: PUSH
14939: LD_INT 1
14941: ST_TO_ADDR
// if p3 = 32 then
14942: LD_VAR 0 3
14946: PUSH
14947: LD_INT 32
14949: EQUAL
14950: IFFALSE 14960
// sPower := true ;
14952: LD_ADDR_EXP 105
14956: PUSH
14957: LD_INT 1
14959: ST_TO_ADDR
// if p3 = 33 then
14960: LD_VAR 0 3
14964: PUSH
14965: LD_INT 33
14967: EQUAL
14968: IFFALSE 14978
// sRandom := true ;
14970: LD_ADDR_EXP 106
14974: PUSH
14975: LD_INT 1
14977: ST_TO_ADDR
// if p3 = 34 then
14978: LD_VAR 0 3
14982: PUSH
14983: LD_INT 34
14985: EQUAL
14986: IFFALSE 14996
// sShield := true ;
14988: LD_ADDR_EXP 107
14992: PUSH
14993: LD_INT 1
14995: ST_TO_ADDR
// if p3 = 35 then
14996: LD_VAR 0 3
15000: PUSH
15001: LD_INT 35
15003: EQUAL
15004: IFFALSE 15014
// sTime := true ;
15006: LD_ADDR_EXP 108
15010: PUSH
15011: LD_INT 1
15013: ST_TO_ADDR
// if p3 = 36 then
15014: LD_VAR 0 3
15018: PUSH
15019: LD_INT 36
15021: EQUAL
15022: IFFALSE 15032
// sTools := true ;
15024: LD_ADDR_EXP 109
15028: PUSH
15029: LD_INT 1
15031: ST_TO_ADDR
// if p3 = 101 then
15032: LD_VAR 0 3
15036: PUSH
15037: LD_INT 101
15039: EQUAL
15040: IFFALSE 15050
// sSold := true ;
15042: LD_ADDR_EXP 74
15046: PUSH
15047: LD_INT 1
15049: ST_TO_ADDR
// if p3 = 102 then
15050: LD_VAR 0 3
15054: PUSH
15055: LD_INT 102
15057: EQUAL
15058: IFFALSE 15068
// sDiff := true ;
15060: LD_ADDR_EXP 75
15064: PUSH
15065: LD_INT 1
15067: ST_TO_ADDR
// if p3 = 103 then
15068: LD_VAR 0 3
15072: PUSH
15073: LD_INT 103
15075: EQUAL
15076: IFFALSE 15086
// sFog := true ;
15078: LD_ADDR_EXP 78
15082: PUSH
15083: LD_INT 1
15085: ST_TO_ADDR
// if p3 = 104 then
15086: LD_VAR 0 3
15090: PUSH
15091: LD_INT 104
15093: EQUAL
15094: IFFALSE 15104
// sReset := true ;
15096: LD_ADDR_EXP 79
15100: PUSH
15101: LD_INT 1
15103: ST_TO_ADDR
// if p3 = 105 then
15104: LD_VAR 0 3
15108: PUSH
15109: LD_INT 105
15111: EQUAL
15112: IFFALSE 15122
// sSun := true ;
15114: LD_ADDR_EXP 80
15118: PUSH
15119: LD_INT 1
15121: ST_TO_ADDR
// if p3 = 106 then
15122: LD_VAR 0 3
15126: PUSH
15127: LD_INT 106
15129: EQUAL
15130: IFFALSE 15140
// sTiger := true ;
15132: LD_ADDR_EXP 76
15136: PUSH
15137: LD_INT 1
15139: ST_TO_ADDR
// if p3 = 107 then
15140: LD_VAR 0 3
15144: PUSH
15145: LD_INT 107
15147: EQUAL
15148: IFFALSE 15158
// sBomb := true ;
15150: LD_ADDR_EXP 77
15154: PUSH
15155: LD_INT 1
15157: ST_TO_ADDR
// if p3 = 108 then
15158: LD_VAR 0 3
15162: PUSH
15163: LD_INT 108
15165: EQUAL
15166: IFFALSE 15176
// sWound := true ;
15168: LD_ADDR_EXP 85
15172: PUSH
15173: LD_INT 1
15175: ST_TO_ADDR
// if p3 = 109 then
15176: LD_VAR 0 3
15180: PUSH
15181: LD_INT 109
15183: EQUAL
15184: IFFALSE 15194
// sBetray := true ;
15186: LD_ADDR_EXP 89
15190: PUSH
15191: LD_INT 1
15193: ST_TO_ADDR
// if p3 = 110 then
15194: LD_VAR 0 3
15198: PUSH
15199: LD_INT 110
15201: EQUAL
15202: IFFALSE 15212
// sContamin := true ;
15204: LD_ADDR_EXP 90
15208: PUSH
15209: LD_INT 1
15211: ST_TO_ADDR
// if p3 = 111 then
15212: LD_VAR 0 3
15216: PUSH
15217: LD_INT 111
15219: EQUAL
15220: IFFALSE 15230
// sOil := true ;
15222: LD_ADDR_EXP 92
15226: PUSH
15227: LD_INT 1
15229: ST_TO_ADDR
// if p3 = 112 then
15230: LD_VAR 0 3
15234: PUSH
15235: LD_INT 112
15237: EQUAL
15238: IFFALSE 15248
// sStu := true ;
15240: LD_ADDR_EXP 96
15244: PUSH
15245: LD_INT 1
15247: ST_TO_ADDR
// if p3 = 113 then
15248: LD_VAR 0 3
15252: PUSH
15253: LD_INT 113
15255: EQUAL
15256: IFFALSE 15266
// sBazooka := true ;
15258: LD_ADDR_EXP 99
15262: PUSH
15263: LD_INT 1
15265: ST_TO_ADDR
// if p3 = 114 then
15266: LD_VAR 0 3
15270: PUSH
15271: LD_INT 114
15273: EQUAL
15274: IFFALSE 15284
// sMortar := true ;
15276: LD_ADDR_EXP 100
15280: PUSH
15281: LD_INT 1
15283: ST_TO_ADDR
// if p3 = 115 then
15284: LD_VAR 0 3
15288: PUSH
15289: LD_INT 115
15291: EQUAL
15292: IFFALSE 15302
// sRanger := true ;
15294: LD_ADDR_EXP 110
15298: PUSH
15299: LD_INT 1
15301: ST_TO_ADDR
// end ; if p2 = 101 then
15302: LD_VAR 0 2
15306: PUSH
15307: LD_INT 101
15309: EQUAL
15310: IFFALSE 15438
// begin case p3 of 1 :
15312: LD_VAR 0 3
15316: PUSH
15317: LD_INT 1
15319: DOUBLE
15320: EQUAL
15321: IFTRUE 15325
15323: GO 15332
15325: POP
// hHackUnlimitedResources ; 2 :
15326: CALL 26473 0 0
15330: GO 15438
15332: LD_INT 2
15334: DOUBLE
15335: EQUAL
15336: IFTRUE 15340
15338: GO 15347
15340: POP
// hHackSetLevel10 ; 3 :
15341: CALL 26606 0 0
15345: GO 15438
15347: LD_INT 3
15349: DOUBLE
15350: EQUAL
15351: IFTRUE 15355
15353: GO 15362
15355: POP
// hHackSetLevel10YourUnits ; 4 :
15356: CALL 26691 0 0
15360: GO 15438
15362: LD_INT 4
15364: DOUBLE
15365: EQUAL
15366: IFTRUE 15370
15368: GO 15377
15370: POP
// hHackInvincible ; 5 :
15371: CALL 27139 0 0
15375: GO 15438
15377: LD_INT 5
15379: DOUBLE
15380: EQUAL
15381: IFTRUE 15385
15383: GO 15392
15385: POP
// hHackInvisible ; 6 :
15386: CALL 27250 0 0
15390: GO 15438
15392: LD_INT 6
15394: DOUBLE
15395: EQUAL
15396: IFTRUE 15400
15398: GO 15407
15400: POP
// hHackChangeYourSide ; 7 :
15401: CALL 27307 0 0
15405: GO 15438
15407: LD_INT 7
15409: DOUBLE
15410: EQUAL
15411: IFTRUE 15415
15413: GO 15422
15415: POP
// hHackChangeUnitSide ; 8 :
15416: CALL 27349 0 0
15420: GO 15438
15422: LD_INT 8
15424: DOUBLE
15425: EQUAL
15426: IFTRUE 15430
15428: GO 15437
15430: POP
// hHackFog ; end ;
15431: CALL 27450 0 0
15435: GO 15438
15437: POP
// end ; end ;
15438: PPOPN 6
15440: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15441: GO 15443
15443: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15444: LD_STRING initStreamRollete();
15446: PPUSH
15447: CALL_OW 559
// InitStreamMode ;
15451: CALL 15460 0 0
// DefineStreamItems ( ) ;
15455: CALL 15900 0 0
// end ;
15459: END
// function InitStreamMode ; begin
15460: LD_INT 0
15462: PPUSH
// streamModeActive := false ;
15463: LD_ADDR_EXP 57
15467: PUSH
15468: LD_INT 0
15470: ST_TO_ADDR
// normalCounter := 36 ;
15471: LD_ADDR_EXP 58
15475: PUSH
15476: LD_INT 36
15478: ST_TO_ADDR
// hardcoreCounter := 16 ;
15479: LD_ADDR_EXP 59
15483: PUSH
15484: LD_INT 16
15486: ST_TO_ADDR
// sRocket := false ;
15487: LD_ADDR_EXP 62
15491: PUSH
15492: LD_INT 0
15494: ST_TO_ADDR
// sSpeed := false ;
15495: LD_ADDR_EXP 61
15499: PUSH
15500: LD_INT 0
15502: ST_TO_ADDR
// sEngine := false ;
15503: LD_ADDR_EXP 63
15507: PUSH
15508: LD_INT 0
15510: ST_TO_ADDR
// sSpec := false ;
15511: LD_ADDR_EXP 60
15515: PUSH
15516: LD_INT 0
15518: ST_TO_ADDR
// sLevel := false ;
15519: LD_ADDR_EXP 64
15523: PUSH
15524: LD_INT 0
15526: ST_TO_ADDR
// sArmoury := false ;
15527: LD_ADDR_EXP 65
15531: PUSH
15532: LD_INT 0
15534: ST_TO_ADDR
// sRadar := false ;
15535: LD_ADDR_EXP 66
15539: PUSH
15540: LD_INT 0
15542: ST_TO_ADDR
// sBunker := false ;
15543: LD_ADDR_EXP 67
15547: PUSH
15548: LD_INT 0
15550: ST_TO_ADDR
// sHack := false ;
15551: LD_ADDR_EXP 68
15555: PUSH
15556: LD_INT 0
15558: ST_TO_ADDR
// sFire := false ;
15559: LD_ADDR_EXP 69
15563: PUSH
15564: LD_INT 0
15566: ST_TO_ADDR
// sRefresh := false ;
15567: LD_ADDR_EXP 70
15571: PUSH
15572: LD_INT 0
15574: ST_TO_ADDR
// sExp := false ;
15575: LD_ADDR_EXP 71
15579: PUSH
15580: LD_INT 0
15582: ST_TO_ADDR
// sDepot := false ;
15583: LD_ADDR_EXP 72
15587: PUSH
15588: LD_INT 0
15590: ST_TO_ADDR
// sFlag := false ;
15591: LD_ADDR_EXP 73
15595: PUSH
15596: LD_INT 0
15598: ST_TO_ADDR
// sKamikadze := false ;
15599: LD_ADDR_EXP 81
15603: PUSH
15604: LD_INT 0
15606: ST_TO_ADDR
// sTroll := false ;
15607: LD_ADDR_EXP 82
15611: PUSH
15612: LD_INT 0
15614: ST_TO_ADDR
// sSlow := false ;
15615: LD_ADDR_EXP 83
15619: PUSH
15620: LD_INT 0
15622: ST_TO_ADDR
// sLack := false ;
15623: LD_ADDR_EXP 84
15627: PUSH
15628: LD_INT 0
15630: ST_TO_ADDR
// sTank := false ;
15631: LD_ADDR_EXP 86
15635: PUSH
15636: LD_INT 0
15638: ST_TO_ADDR
// sRemote := false ;
15639: LD_ADDR_EXP 87
15643: PUSH
15644: LD_INT 0
15646: ST_TO_ADDR
// sPowell := false ;
15647: LD_ADDR_EXP 88
15651: PUSH
15652: LD_INT 0
15654: ST_TO_ADDR
// sTeleport := false ;
15655: LD_ADDR_EXP 91
15659: PUSH
15660: LD_INT 0
15662: ST_TO_ADDR
// sOilTower := false ;
15663: LD_ADDR_EXP 93
15667: PUSH
15668: LD_INT 0
15670: ST_TO_ADDR
// sShovel := false ;
15671: LD_ADDR_EXP 94
15675: PUSH
15676: LD_INT 0
15678: ST_TO_ADDR
// sSheik := false ;
15679: LD_ADDR_EXP 95
15683: PUSH
15684: LD_INT 0
15686: ST_TO_ADDR
// sEarthquake := false ;
15687: LD_ADDR_EXP 97
15691: PUSH
15692: LD_INT 0
15694: ST_TO_ADDR
// sAI := false ;
15695: LD_ADDR_EXP 98
15699: PUSH
15700: LD_INT 0
15702: ST_TO_ADDR
// sCargo := false ;
15703: LD_ADDR_EXP 101
15707: PUSH
15708: LD_INT 0
15710: ST_TO_ADDR
// sDLaser := false ;
15711: LD_ADDR_EXP 102
15715: PUSH
15716: LD_INT 0
15718: ST_TO_ADDR
// sExchange := false ;
15719: LD_ADDR_EXP 103
15723: PUSH
15724: LD_INT 0
15726: ST_TO_ADDR
// sFac := false ;
15727: LD_ADDR_EXP 104
15731: PUSH
15732: LD_INT 0
15734: ST_TO_ADDR
// sPower := false ;
15735: LD_ADDR_EXP 105
15739: PUSH
15740: LD_INT 0
15742: ST_TO_ADDR
// sRandom := false ;
15743: LD_ADDR_EXP 106
15747: PUSH
15748: LD_INT 0
15750: ST_TO_ADDR
// sShield := false ;
15751: LD_ADDR_EXP 107
15755: PUSH
15756: LD_INT 0
15758: ST_TO_ADDR
// sTime := false ;
15759: LD_ADDR_EXP 108
15763: PUSH
15764: LD_INT 0
15766: ST_TO_ADDR
// sTools := false ;
15767: LD_ADDR_EXP 109
15771: PUSH
15772: LD_INT 0
15774: ST_TO_ADDR
// sSold := false ;
15775: LD_ADDR_EXP 74
15779: PUSH
15780: LD_INT 0
15782: ST_TO_ADDR
// sDiff := false ;
15783: LD_ADDR_EXP 75
15787: PUSH
15788: LD_INT 0
15790: ST_TO_ADDR
// sFog := false ;
15791: LD_ADDR_EXP 78
15795: PUSH
15796: LD_INT 0
15798: ST_TO_ADDR
// sReset := false ;
15799: LD_ADDR_EXP 79
15803: PUSH
15804: LD_INT 0
15806: ST_TO_ADDR
// sSun := false ;
15807: LD_ADDR_EXP 80
15811: PUSH
15812: LD_INT 0
15814: ST_TO_ADDR
// sTiger := false ;
15815: LD_ADDR_EXP 76
15819: PUSH
15820: LD_INT 0
15822: ST_TO_ADDR
// sBomb := false ;
15823: LD_ADDR_EXP 77
15827: PUSH
15828: LD_INT 0
15830: ST_TO_ADDR
// sWound := false ;
15831: LD_ADDR_EXP 85
15835: PUSH
15836: LD_INT 0
15838: ST_TO_ADDR
// sBetray := false ;
15839: LD_ADDR_EXP 89
15843: PUSH
15844: LD_INT 0
15846: ST_TO_ADDR
// sContamin := false ;
15847: LD_ADDR_EXP 90
15851: PUSH
15852: LD_INT 0
15854: ST_TO_ADDR
// sOil := false ;
15855: LD_ADDR_EXP 92
15859: PUSH
15860: LD_INT 0
15862: ST_TO_ADDR
// sStu := false ;
15863: LD_ADDR_EXP 96
15867: PUSH
15868: LD_INT 0
15870: ST_TO_ADDR
// sBazooka := false ;
15871: LD_ADDR_EXP 99
15875: PUSH
15876: LD_INT 0
15878: ST_TO_ADDR
// sMortar := false ;
15879: LD_ADDR_EXP 100
15883: PUSH
15884: LD_INT 0
15886: ST_TO_ADDR
// sRanger := false ;
15887: LD_ADDR_EXP 110
15891: PUSH
15892: LD_INT 0
15894: ST_TO_ADDR
// end ;
15895: LD_VAR 0 1
15899: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
15900: LD_INT 0
15902: PPUSH
15903: PPUSH
15904: PPUSH
15905: PPUSH
15906: PPUSH
// result := [ ] ;
15907: LD_ADDR_VAR 0 1
15911: PUSH
15912: EMPTY
15913: ST_TO_ADDR
// if campaign_id = 1 then
15914: LD_OWVAR 69
15918: PUSH
15919: LD_INT 1
15921: EQUAL
15922: IFFALSE 18860
// begin case mission_number of 1 :
15924: LD_OWVAR 70
15928: PUSH
15929: LD_INT 1
15931: DOUBLE
15932: EQUAL
15933: IFTRUE 15937
15935: GO 16001
15937: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
15938: LD_ADDR_VAR 0 1
15942: PUSH
15943: LD_INT 2
15945: PUSH
15946: LD_INT 4
15948: PUSH
15949: LD_INT 11
15951: PUSH
15952: LD_INT 12
15954: PUSH
15955: LD_INT 15
15957: PUSH
15958: LD_INT 16
15960: PUSH
15961: LD_INT 22
15963: PUSH
15964: LD_INT 23
15966: PUSH
15967: LD_INT 26
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: LIST
15975: LIST
15976: LIST
15977: LIST
15978: LIST
15979: LIST
15980: PUSH
15981: LD_INT 101
15983: PUSH
15984: LD_INT 102
15986: PUSH
15987: LD_INT 106
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: PUSH
15995: EMPTY
15996: LIST
15997: LIST
15998: ST_TO_ADDR
15999: GO 18858
16001: LD_INT 2
16003: DOUBLE
16004: EQUAL
16005: IFTRUE 16009
16007: GO 16081
16009: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16010: LD_ADDR_VAR 0 1
16014: PUSH
16015: LD_INT 2
16017: PUSH
16018: LD_INT 4
16020: PUSH
16021: LD_INT 11
16023: PUSH
16024: LD_INT 12
16026: PUSH
16027: LD_INT 15
16029: PUSH
16030: LD_INT 16
16032: PUSH
16033: LD_INT 22
16035: PUSH
16036: LD_INT 23
16038: PUSH
16039: LD_INT 26
16041: PUSH
16042: EMPTY
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: LIST
16049: LIST
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 101
16055: PUSH
16056: LD_INT 102
16058: PUSH
16059: LD_INT 105
16061: PUSH
16062: LD_INT 106
16064: PUSH
16065: LD_INT 108
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: LIST
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: ST_TO_ADDR
16079: GO 18858
16081: LD_INT 3
16083: DOUBLE
16084: EQUAL
16085: IFTRUE 16089
16087: GO 16165
16089: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16090: LD_ADDR_VAR 0 1
16094: PUSH
16095: LD_INT 2
16097: PUSH
16098: LD_INT 4
16100: PUSH
16101: LD_INT 5
16103: PUSH
16104: LD_INT 11
16106: PUSH
16107: LD_INT 12
16109: PUSH
16110: LD_INT 15
16112: PUSH
16113: LD_INT 16
16115: PUSH
16116: LD_INT 22
16118: PUSH
16119: LD_INT 26
16121: PUSH
16122: LD_INT 36
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: LIST
16130: LIST
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: PUSH
16137: LD_INT 101
16139: PUSH
16140: LD_INT 102
16142: PUSH
16143: LD_INT 105
16145: PUSH
16146: LD_INT 106
16148: PUSH
16149: LD_INT 108
16151: PUSH
16152: EMPTY
16153: LIST
16154: LIST
16155: LIST
16156: LIST
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: ST_TO_ADDR
16163: GO 18858
16165: LD_INT 4
16167: DOUBLE
16168: EQUAL
16169: IFTRUE 16173
16171: GO 16257
16173: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16174: LD_ADDR_VAR 0 1
16178: PUSH
16179: LD_INT 2
16181: PUSH
16182: LD_INT 4
16184: PUSH
16185: LD_INT 5
16187: PUSH
16188: LD_INT 8
16190: PUSH
16191: LD_INT 11
16193: PUSH
16194: LD_INT 12
16196: PUSH
16197: LD_INT 15
16199: PUSH
16200: LD_INT 16
16202: PUSH
16203: LD_INT 22
16205: PUSH
16206: LD_INT 23
16208: PUSH
16209: LD_INT 26
16211: PUSH
16212: LD_INT 36
16214: PUSH
16215: EMPTY
16216: LIST
16217: LIST
16218: LIST
16219: LIST
16220: LIST
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: LIST
16227: LIST
16228: PUSH
16229: LD_INT 101
16231: PUSH
16232: LD_INT 102
16234: PUSH
16235: LD_INT 105
16237: PUSH
16238: LD_INT 106
16240: PUSH
16241: LD_INT 108
16243: PUSH
16244: EMPTY
16245: LIST
16246: LIST
16247: LIST
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: ST_TO_ADDR
16255: GO 18858
16257: LD_INT 5
16259: DOUBLE
16260: EQUAL
16261: IFTRUE 16265
16263: GO 16365
16265: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16266: LD_ADDR_VAR 0 1
16270: PUSH
16271: LD_INT 2
16273: PUSH
16274: LD_INT 4
16276: PUSH
16277: LD_INT 5
16279: PUSH
16280: LD_INT 6
16282: PUSH
16283: LD_INT 8
16285: PUSH
16286: LD_INT 11
16288: PUSH
16289: LD_INT 12
16291: PUSH
16292: LD_INT 15
16294: PUSH
16295: LD_INT 16
16297: PUSH
16298: LD_INT 22
16300: PUSH
16301: LD_INT 23
16303: PUSH
16304: LD_INT 25
16306: PUSH
16307: LD_INT 26
16309: PUSH
16310: LD_INT 36
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: LIST
16319: LIST
16320: LIST
16321: LIST
16322: LIST
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: LIST
16328: PUSH
16329: LD_INT 101
16331: PUSH
16332: LD_INT 102
16334: PUSH
16335: LD_INT 105
16337: PUSH
16338: LD_INT 106
16340: PUSH
16341: LD_INT 108
16343: PUSH
16344: LD_INT 109
16346: PUSH
16347: LD_INT 112
16349: PUSH
16350: EMPTY
16351: LIST
16352: LIST
16353: LIST
16354: LIST
16355: LIST
16356: LIST
16357: LIST
16358: PUSH
16359: EMPTY
16360: LIST
16361: LIST
16362: ST_TO_ADDR
16363: GO 18858
16365: LD_INT 6
16367: DOUBLE
16368: EQUAL
16369: IFTRUE 16373
16371: GO 16493
16373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16374: LD_ADDR_VAR 0 1
16378: PUSH
16379: LD_INT 2
16381: PUSH
16382: LD_INT 4
16384: PUSH
16385: LD_INT 5
16387: PUSH
16388: LD_INT 6
16390: PUSH
16391: LD_INT 8
16393: PUSH
16394: LD_INT 11
16396: PUSH
16397: LD_INT 12
16399: PUSH
16400: LD_INT 15
16402: PUSH
16403: LD_INT 16
16405: PUSH
16406: LD_INT 20
16408: PUSH
16409: LD_INT 21
16411: PUSH
16412: LD_INT 22
16414: PUSH
16415: LD_INT 23
16417: PUSH
16418: LD_INT 25
16420: PUSH
16421: LD_INT 26
16423: PUSH
16424: LD_INT 30
16426: PUSH
16427: LD_INT 31
16429: PUSH
16430: LD_INT 32
16432: PUSH
16433: LD_INT 36
16435: PUSH
16436: EMPTY
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 101
16459: PUSH
16460: LD_INT 102
16462: PUSH
16463: LD_INT 105
16465: PUSH
16466: LD_INT 106
16468: PUSH
16469: LD_INT 108
16471: PUSH
16472: LD_INT 109
16474: PUSH
16475: LD_INT 112
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: LIST
16482: LIST
16483: LIST
16484: LIST
16485: LIST
16486: PUSH
16487: EMPTY
16488: LIST
16489: LIST
16490: ST_TO_ADDR
16491: GO 18858
16493: LD_INT 7
16495: DOUBLE
16496: EQUAL
16497: IFTRUE 16501
16499: GO 16601
16501: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16502: LD_ADDR_VAR 0 1
16506: PUSH
16507: LD_INT 2
16509: PUSH
16510: LD_INT 4
16512: PUSH
16513: LD_INT 5
16515: PUSH
16516: LD_INT 7
16518: PUSH
16519: LD_INT 11
16521: PUSH
16522: LD_INT 12
16524: PUSH
16525: LD_INT 15
16527: PUSH
16528: LD_INT 16
16530: PUSH
16531: LD_INT 20
16533: PUSH
16534: LD_INT 21
16536: PUSH
16537: LD_INT 22
16539: PUSH
16540: LD_INT 23
16542: PUSH
16543: LD_INT 25
16545: PUSH
16546: LD_INT 26
16548: PUSH
16549: EMPTY
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: LIST
16555: LIST
16556: LIST
16557: LIST
16558: LIST
16559: LIST
16560: LIST
16561: LIST
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 101
16567: PUSH
16568: LD_INT 102
16570: PUSH
16571: LD_INT 103
16573: PUSH
16574: LD_INT 105
16576: PUSH
16577: LD_INT 106
16579: PUSH
16580: LD_INT 108
16582: PUSH
16583: LD_INT 112
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: ST_TO_ADDR
16599: GO 18858
16601: LD_INT 8
16603: DOUBLE
16604: EQUAL
16605: IFTRUE 16609
16607: GO 16737
16609: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16610: LD_ADDR_VAR 0 1
16614: PUSH
16615: LD_INT 2
16617: PUSH
16618: LD_INT 4
16620: PUSH
16621: LD_INT 5
16623: PUSH
16624: LD_INT 6
16626: PUSH
16627: LD_INT 7
16629: PUSH
16630: LD_INT 8
16632: PUSH
16633: LD_INT 11
16635: PUSH
16636: LD_INT 12
16638: PUSH
16639: LD_INT 15
16641: PUSH
16642: LD_INT 16
16644: PUSH
16645: LD_INT 20
16647: PUSH
16648: LD_INT 21
16650: PUSH
16651: LD_INT 22
16653: PUSH
16654: LD_INT 23
16656: PUSH
16657: LD_INT 25
16659: PUSH
16660: LD_INT 26
16662: PUSH
16663: LD_INT 30
16665: PUSH
16666: LD_INT 31
16668: PUSH
16669: LD_INT 32
16671: PUSH
16672: LD_INT 36
16674: PUSH
16675: EMPTY
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: PUSH
16697: LD_INT 101
16699: PUSH
16700: LD_INT 102
16702: PUSH
16703: LD_INT 103
16705: PUSH
16706: LD_INT 105
16708: PUSH
16709: LD_INT 106
16711: PUSH
16712: LD_INT 108
16714: PUSH
16715: LD_INT 109
16717: PUSH
16718: LD_INT 112
16720: PUSH
16721: EMPTY
16722: LIST
16723: LIST
16724: LIST
16725: LIST
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: PUSH
16731: EMPTY
16732: LIST
16733: LIST
16734: ST_TO_ADDR
16735: GO 18858
16737: LD_INT 9
16739: DOUBLE
16740: EQUAL
16741: IFTRUE 16745
16743: GO 16881
16745: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16746: LD_ADDR_VAR 0 1
16750: PUSH
16751: LD_INT 2
16753: PUSH
16754: LD_INT 4
16756: PUSH
16757: LD_INT 5
16759: PUSH
16760: LD_INT 6
16762: PUSH
16763: LD_INT 7
16765: PUSH
16766: LD_INT 8
16768: PUSH
16769: LD_INT 11
16771: PUSH
16772: LD_INT 12
16774: PUSH
16775: LD_INT 15
16777: PUSH
16778: LD_INT 16
16780: PUSH
16781: LD_INT 20
16783: PUSH
16784: LD_INT 21
16786: PUSH
16787: LD_INT 22
16789: PUSH
16790: LD_INT 23
16792: PUSH
16793: LD_INT 25
16795: PUSH
16796: LD_INT 26
16798: PUSH
16799: LD_INT 28
16801: PUSH
16802: LD_INT 30
16804: PUSH
16805: LD_INT 31
16807: PUSH
16808: LD_INT 32
16810: PUSH
16811: LD_INT 36
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: LIST
16836: PUSH
16837: LD_INT 101
16839: PUSH
16840: LD_INT 102
16842: PUSH
16843: LD_INT 103
16845: PUSH
16846: LD_INT 105
16848: PUSH
16849: LD_INT 106
16851: PUSH
16852: LD_INT 108
16854: PUSH
16855: LD_INT 109
16857: PUSH
16858: LD_INT 112
16860: PUSH
16861: LD_INT 114
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: LIST
16870: LIST
16871: LIST
16872: LIST
16873: LIST
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: ST_TO_ADDR
16879: GO 18858
16881: LD_INT 10
16883: DOUBLE
16884: EQUAL
16885: IFTRUE 16889
16887: GO 17073
16889: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
16890: LD_ADDR_VAR 0 1
16894: PUSH
16895: LD_INT 2
16897: PUSH
16898: LD_INT 4
16900: PUSH
16901: LD_INT 5
16903: PUSH
16904: LD_INT 6
16906: PUSH
16907: LD_INT 7
16909: PUSH
16910: LD_INT 8
16912: PUSH
16913: LD_INT 9
16915: PUSH
16916: LD_INT 10
16918: PUSH
16919: LD_INT 11
16921: PUSH
16922: LD_INT 12
16924: PUSH
16925: LD_INT 13
16927: PUSH
16928: LD_INT 14
16930: PUSH
16931: LD_INT 15
16933: PUSH
16934: LD_INT 16
16936: PUSH
16937: LD_INT 17
16939: PUSH
16940: LD_INT 18
16942: PUSH
16943: LD_INT 19
16945: PUSH
16946: LD_INT 20
16948: PUSH
16949: LD_INT 21
16951: PUSH
16952: LD_INT 22
16954: PUSH
16955: LD_INT 23
16957: PUSH
16958: LD_INT 24
16960: PUSH
16961: LD_INT 25
16963: PUSH
16964: LD_INT 26
16966: PUSH
16967: LD_INT 28
16969: PUSH
16970: LD_INT 30
16972: PUSH
16973: LD_INT 31
16975: PUSH
16976: LD_INT 32
16978: PUSH
16979: LD_INT 36
16981: PUSH
16982: EMPTY
16983: LIST
16984: LIST
16985: LIST
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: LIST
17003: LIST
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 101
17015: PUSH
17016: LD_INT 102
17018: PUSH
17019: LD_INT 103
17021: PUSH
17022: LD_INT 104
17024: PUSH
17025: LD_INT 105
17027: PUSH
17028: LD_INT 106
17030: PUSH
17031: LD_INT 107
17033: PUSH
17034: LD_INT 108
17036: PUSH
17037: LD_INT 109
17039: PUSH
17040: LD_INT 110
17042: PUSH
17043: LD_INT 111
17045: PUSH
17046: LD_INT 112
17048: PUSH
17049: LD_INT 114
17051: PUSH
17052: EMPTY
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: PUSH
17067: EMPTY
17068: LIST
17069: LIST
17070: ST_TO_ADDR
17071: GO 18858
17073: LD_INT 11
17075: DOUBLE
17076: EQUAL
17077: IFTRUE 17081
17079: GO 17273
17081: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17082: LD_ADDR_VAR 0 1
17086: PUSH
17087: LD_INT 2
17089: PUSH
17090: LD_INT 3
17092: PUSH
17093: LD_INT 4
17095: PUSH
17096: LD_INT 5
17098: PUSH
17099: LD_INT 6
17101: PUSH
17102: LD_INT 7
17104: PUSH
17105: LD_INT 8
17107: PUSH
17108: LD_INT 9
17110: PUSH
17111: LD_INT 10
17113: PUSH
17114: LD_INT 11
17116: PUSH
17117: LD_INT 12
17119: PUSH
17120: LD_INT 13
17122: PUSH
17123: LD_INT 14
17125: PUSH
17126: LD_INT 15
17128: PUSH
17129: LD_INT 16
17131: PUSH
17132: LD_INT 17
17134: PUSH
17135: LD_INT 18
17137: PUSH
17138: LD_INT 19
17140: PUSH
17141: LD_INT 20
17143: PUSH
17144: LD_INT 21
17146: PUSH
17147: LD_INT 22
17149: PUSH
17150: LD_INT 23
17152: PUSH
17153: LD_INT 24
17155: PUSH
17156: LD_INT 25
17158: PUSH
17159: LD_INT 26
17161: PUSH
17162: LD_INT 28
17164: PUSH
17165: LD_INT 30
17167: PUSH
17168: LD_INT 31
17170: PUSH
17171: LD_INT 32
17173: PUSH
17174: LD_INT 34
17176: PUSH
17177: LD_INT 36
17179: PUSH
17180: EMPTY
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: LIST
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: LIST
17206: LIST
17207: LIST
17208: LIST
17209: LIST
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 101
17215: PUSH
17216: LD_INT 102
17218: PUSH
17219: LD_INT 103
17221: PUSH
17222: LD_INT 104
17224: PUSH
17225: LD_INT 105
17227: PUSH
17228: LD_INT 106
17230: PUSH
17231: LD_INT 107
17233: PUSH
17234: LD_INT 108
17236: PUSH
17237: LD_INT 109
17239: PUSH
17240: LD_INT 110
17242: PUSH
17243: LD_INT 111
17245: PUSH
17246: LD_INT 112
17248: PUSH
17249: LD_INT 114
17251: PUSH
17252: EMPTY
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: PUSH
17267: EMPTY
17268: LIST
17269: LIST
17270: ST_TO_ADDR
17271: GO 18858
17273: LD_INT 12
17275: DOUBLE
17276: EQUAL
17277: IFTRUE 17281
17279: GO 17489
17281: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17282: LD_ADDR_VAR 0 1
17286: PUSH
17287: LD_INT 1
17289: PUSH
17290: LD_INT 2
17292: PUSH
17293: LD_INT 3
17295: PUSH
17296: LD_INT 4
17298: PUSH
17299: LD_INT 5
17301: PUSH
17302: LD_INT 6
17304: PUSH
17305: LD_INT 7
17307: PUSH
17308: LD_INT 8
17310: PUSH
17311: LD_INT 9
17313: PUSH
17314: LD_INT 10
17316: PUSH
17317: LD_INT 11
17319: PUSH
17320: LD_INT 12
17322: PUSH
17323: LD_INT 13
17325: PUSH
17326: LD_INT 14
17328: PUSH
17329: LD_INT 15
17331: PUSH
17332: LD_INT 16
17334: PUSH
17335: LD_INT 17
17337: PUSH
17338: LD_INT 18
17340: PUSH
17341: LD_INT 19
17343: PUSH
17344: LD_INT 20
17346: PUSH
17347: LD_INT 21
17349: PUSH
17350: LD_INT 22
17352: PUSH
17353: LD_INT 23
17355: PUSH
17356: LD_INT 24
17358: PUSH
17359: LD_INT 25
17361: PUSH
17362: LD_INT 26
17364: PUSH
17365: LD_INT 27
17367: PUSH
17368: LD_INT 28
17370: PUSH
17371: LD_INT 30
17373: PUSH
17374: LD_INT 31
17376: PUSH
17377: LD_INT 32
17379: PUSH
17380: LD_INT 33
17382: PUSH
17383: LD_INT 34
17385: PUSH
17386: LD_INT 36
17388: PUSH
17389: EMPTY
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: LIST
17410: LIST
17411: LIST
17412: LIST
17413: LIST
17414: LIST
17415: LIST
17416: LIST
17417: LIST
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: LIST
17423: LIST
17424: PUSH
17425: LD_INT 101
17427: PUSH
17428: LD_INT 102
17430: PUSH
17431: LD_INT 103
17433: PUSH
17434: LD_INT 104
17436: PUSH
17437: LD_INT 105
17439: PUSH
17440: LD_INT 106
17442: PUSH
17443: LD_INT 107
17445: PUSH
17446: LD_INT 108
17448: PUSH
17449: LD_INT 109
17451: PUSH
17452: LD_INT 110
17454: PUSH
17455: LD_INT 111
17457: PUSH
17458: LD_INT 112
17460: PUSH
17461: LD_INT 113
17463: PUSH
17464: LD_INT 114
17466: PUSH
17467: EMPTY
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: ST_TO_ADDR
17487: GO 18858
17489: LD_INT 13
17491: DOUBLE
17492: EQUAL
17493: IFTRUE 17497
17495: GO 17693
17497: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17498: LD_ADDR_VAR 0 1
17502: PUSH
17503: LD_INT 1
17505: PUSH
17506: LD_INT 2
17508: PUSH
17509: LD_INT 3
17511: PUSH
17512: LD_INT 4
17514: PUSH
17515: LD_INT 5
17517: PUSH
17518: LD_INT 8
17520: PUSH
17521: LD_INT 9
17523: PUSH
17524: LD_INT 10
17526: PUSH
17527: LD_INT 11
17529: PUSH
17530: LD_INT 12
17532: PUSH
17533: LD_INT 14
17535: PUSH
17536: LD_INT 15
17538: PUSH
17539: LD_INT 16
17541: PUSH
17542: LD_INT 17
17544: PUSH
17545: LD_INT 18
17547: PUSH
17548: LD_INT 19
17550: PUSH
17551: LD_INT 20
17553: PUSH
17554: LD_INT 21
17556: PUSH
17557: LD_INT 22
17559: PUSH
17560: LD_INT 23
17562: PUSH
17563: LD_INT 24
17565: PUSH
17566: LD_INT 25
17568: PUSH
17569: LD_INT 26
17571: PUSH
17572: LD_INT 27
17574: PUSH
17575: LD_INT 28
17577: PUSH
17578: LD_INT 30
17580: PUSH
17581: LD_INT 31
17583: PUSH
17584: LD_INT 32
17586: PUSH
17587: LD_INT 33
17589: PUSH
17590: LD_INT 34
17592: PUSH
17593: LD_INT 36
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: LIST
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: PUSH
17629: LD_INT 101
17631: PUSH
17632: LD_INT 102
17634: PUSH
17635: LD_INT 103
17637: PUSH
17638: LD_INT 104
17640: PUSH
17641: LD_INT 105
17643: PUSH
17644: LD_INT 106
17646: PUSH
17647: LD_INT 107
17649: PUSH
17650: LD_INT 108
17652: PUSH
17653: LD_INT 109
17655: PUSH
17656: LD_INT 110
17658: PUSH
17659: LD_INT 111
17661: PUSH
17662: LD_INT 112
17664: PUSH
17665: LD_INT 113
17667: PUSH
17668: LD_INT 114
17670: PUSH
17671: EMPTY
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: PUSH
17687: EMPTY
17688: LIST
17689: LIST
17690: ST_TO_ADDR
17691: GO 18858
17693: LD_INT 14
17695: DOUBLE
17696: EQUAL
17697: IFTRUE 17701
17699: GO 17913
17701: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17702: LD_ADDR_VAR 0 1
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 3
17715: PUSH
17716: LD_INT 4
17718: PUSH
17719: LD_INT 5
17721: PUSH
17722: LD_INT 6
17724: PUSH
17725: LD_INT 7
17727: PUSH
17728: LD_INT 8
17730: PUSH
17731: LD_INT 9
17733: PUSH
17734: LD_INT 10
17736: PUSH
17737: LD_INT 11
17739: PUSH
17740: LD_INT 12
17742: PUSH
17743: LD_INT 13
17745: PUSH
17746: LD_INT 14
17748: PUSH
17749: LD_INT 15
17751: PUSH
17752: LD_INT 16
17754: PUSH
17755: LD_INT 17
17757: PUSH
17758: LD_INT 18
17760: PUSH
17761: LD_INT 19
17763: PUSH
17764: LD_INT 20
17766: PUSH
17767: LD_INT 21
17769: PUSH
17770: LD_INT 22
17772: PUSH
17773: LD_INT 23
17775: PUSH
17776: LD_INT 24
17778: PUSH
17779: LD_INT 25
17781: PUSH
17782: LD_INT 26
17784: PUSH
17785: LD_INT 27
17787: PUSH
17788: LD_INT 28
17790: PUSH
17791: LD_INT 29
17793: PUSH
17794: LD_INT 30
17796: PUSH
17797: LD_INT 31
17799: PUSH
17800: LD_INT 32
17802: PUSH
17803: LD_INT 33
17805: PUSH
17806: LD_INT 34
17808: PUSH
17809: LD_INT 36
17811: PUSH
17812: EMPTY
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: LIST
17826: LIST
17827: LIST
17828: LIST
17829: LIST
17830: LIST
17831: LIST
17832: LIST
17833: LIST
17834: LIST
17835: LIST
17836: LIST
17837: LIST
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: LIST
17843: LIST
17844: LIST
17845: LIST
17846: LIST
17847: LIST
17848: PUSH
17849: LD_INT 101
17851: PUSH
17852: LD_INT 102
17854: PUSH
17855: LD_INT 103
17857: PUSH
17858: LD_INT 104
17860: PUSH
17861: LD_INT 105
17863: PUSH
17864: LD_INT 106
17866: PUSH
17867: LD_INT 107
17869: PUSH
17870: LD_INT 108
17872: PUSH
17873: LD_INT 109
17875: PUSH
17876: LD_INT 110
17878: PUSH
17879: LD_INT 111
17881: PUSH
17882: LD_INT 112
17884: PUSH
17885: LD_INT 113
17887: PUSH
17888: LD_INT 114
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: PUSH
17907: EMPTY
17908: LIST
17909: LIST
17910: ST_TO_ADDR
17911: GO 18858
17913: LD_INT 15
17915: DOUBLE
17916: EQUAL
17917: IFTRUE 17921
17919: GO 18133
17921: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
17922: LD_ADDR_VAR 0 1
17926: PUSH
17927: LD_INT 1
17929: PUSH
17930: LD_INT 2
17932: PUSH
17933: LD_INT 3
17935: PUSH
17936: LD_INT 4
17938: PUSH
17939: LD_INT 5
17941: PUSH
17942: LD_INT 6
17944: PUSH
17945: LD_INT 7
17947: PUSH
17948: LD_INT 8
17950: PUSH
17951: LD_INT 9
17953: PUSH
17954: LD_INT 10
17956: PUSH
17957: LD_INT 11
17959: PUSH
17960: LD_INT 12
17962: PUSH
17963: LD_INT 13
17965: PUSH
17966: LD_INT 14
17968: PUSH
17969: LD_INT 15
17971: PUSH
17972: LD_INT 16
17974: PUSH
17975: LD_INT 17
17977: PUSH
17978: LD_INT 18
17980: PUSH
17981: LD_INT 19
17983: PUSH
17984: LD_INT 20
17986: PUSH
17987: LD_INT 21
17989: PUSH
17990: LD_INT 22
17992: PUSH
17993: LD_INT 23
17995: PUSH
17996: LD_INT 24
17998: PUSH
17999: LD_INT 25
18001: PUSH
18002: LD_INT 26
18004: PUSH
18005: LD_INT 27
18007: PUSH
18008: LD_INT 28
18010: PUSH
18011: LD_INT 29
18013: PUSH
18014: LD_INT 30
18016: PUSH
18017: LD_INT 31
18019: PUSH
18020: LD_INT 32
18022: PUSH
18023: LD_INT 33
18025: PUSH
18026: LD_INT 34
18028: PUSH
18029: LD_INT 36
18031: PUSH
18032: EMPTY
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: LIST
18047: LIST
18048: LIST
18049: LIST
18050: LIST
18051: LIST
18052: LIST
18053: LIST
18054: LIST
18055: LIST
18056: LIST
18057: LIST
18058: LIST
18059: LIST
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: LIST
18065: LIST
18066: LIST
18067: LIST
18068: PUSH
18069: LD_INT 101
18071: PUSH
18072: LD_INT 102
18074: PUSH
18075: LD_INT 103
18077: PUSH
18078: LD_INT 104
18080: PUSH
18081: LD_INT 105
18083: PUSH
18084: LD_INT 106
18086: PUSH
18087: LD_INT 107
18089: PUSH
18090: LD_INT 108
18092: PUSH
18093: LD_INT 109
18095: PUSH
18096: LD_INT 110
18098: PUSH
18099: LD_INT 111
18101: PUSH
18102: LD_INT 112
18104: PUSH
18105: LD_INT 113
18107: PUSH
18108: LD_INT 114
18110: PUSH
18111: EMPTY
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: ST_TO_ADDR
18131: GO 18858
18133: LD_INT 16
18135: DOUBLE
18136: EQUAL
18137: IFTRUE 18141
18139: GO 18265
18141: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18142: LD_ADDR_VAR 0 1
18146: PUSH
18147: LD_INT 2
18149: PUSH
18150: LD_INT 4
18152: PUSH
18153: LD_INT 5
18155: PUSH
18156: LD_INT 7
18158: PUSH
18159: LD_INT 11
18161: PUSH
18162: LD_INT 12
18164: PUSH
18165: LD_INT 15
18167: PUSH
18168: LD_INT 16
18170: PUSH
18171: LD_INT 20
18173: PUSH
18174: LD_INT 21
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_INT 23
18182: PUSH
18183: LD_INT 25
18185: PUSH
18186: LD_INT 26
18188: PUSH
18189: LD_INT 30
18191: PUSH
18192: LD_INT 31
18194: PUSH
18195: LD_INT 32
18197: PUSH
18198: LD_INT 33
18200: PUSH
18201: LD_INT 34
18203: PUSH
18204: EMPTY
18205: LIST
18206: LIST
18207: LIST
18208: LIST
18209: LIST
18210: LIST
18211: LIST
18212: LIST
18213: LIST
18214: LIST
18215: LIST
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: LIST
18221: LIST
18222: LIST
18223: LIST
18224: PUSH
18225: LD_INT 101
18227: PUSH
18228: LD_INT 102
18230: PUSH
18231: LD_INT 103
18233: PUSH
18234: LD_INT 106
18236: PUSH
18237: LD_INT 108
18239: PUSH
18240: LD_INT 112
18242: PUSH
18243: LD_INT 113
18245: PUSH
18246: LD_INT 114
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: ST_TO_ADDR
18263: GO 18858
18265: LD_INT 17
18267: DOUBLE
18268: EQUAL
18269: IFTRUE 18273
18271: GO 18485
18273: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18274: LD_ADDR_VAR 0 1
18278: PUSH
18279: LD_INT 1
18281: PUSH
18282: LD_INT 2
18284: PUSH
18285: LD_INT 3
18287: PUSH
18288: LD_INT 4
18290: PUSH
18291: LD_INT 5
18293: PUSH
18294: LD_INT 6
18296: PUSH
18297: LD_INT 7
18299: PUSH
18300: LD_INT 8
18302: PUSH
18303: LD_INT 9
18305: PUSH
18306: LD_INT 10
18308: PUSH
18309: LD_INT 11
18311: PUSH
18312: LD_INT 12
18314: PUSH
18315: LD_INT 13
18317: PUSH
18318: LD_INT 14
18320: PUSH
18321: LD_INT 15
18323: PUSH
18324: LD_INT 16
18326: PUSH
18327: LD_INT 17
18329: PUSH
18330: LD_INT 18
18332: PUSH
18333: LD_INT 19
18335: PUSH
18336: LD_INT 20
18338: PUSH
18339: LD_INT 21
18341: PUSH
18342: LD_INT 22
18344: PUSH
18345: LD_INT 23
18347: PUSH
18348: LD_INT 24
18350: PUSH
18351: LD_INT 25
18353: PUSH
18354: LD_INT 26
18356: PUSH
18357: LD_INT 27
18359: PUSH
18360: LD_INT 28
18362: PUSH
18363: LD_INT 29
18365: PUSH
18366: LD_INT 30
18368: PUSH
18369: LD_INT 31
18371: PUSH
18372: LD_INT 32
18374: PUSH
18375: LD_INT 33
18377: PUSH
18378: LD_INT 34
18380: PUSH
18381: LD_INT 36
18383: PUSH
18384: EMPTY
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: LIST
18400: LIST
18401: LIST
18402: LIST
18403: LIST
18404: LIST
18405: LIST
18406: LIST
18407: LIST
18408: LIST
18409: LIST
18410: LIST
18411: LIST
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: PUSH
18421: LD_INT 101
18423: PUSH
18424: LD_INT 102
18426: PUSH
18427: LD_INT 103
18429: PUSH
18430: LD_INT 104
18432: PUSH
18433: LD_INT 105
18435: PUSH
18436: LD_INT 106
18438: PUSH
18439: LD_INT 107
18441: PUSH
18442: LD_INT 108
18444: PUSH
18445: LD_INT 109
18447: PUSH
18448: LD_INT 110
18450: PUSH
18451: LD_INT 111
18453: PUSH
18454: LD_INT 112
18456: PUSH
18457: LD_INT 113
18459: PUSH
18460: LD_INT 114
18462: PUSH
18463: EMPTY
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: PUSH
18479: EMPTY
18480: LIST
18481: LIST
18482: ST_TO_ADDR
18483: GO 18858
18485: LD_INT 18
18487: DOUBLE
18488: EQUAL
18489: IFTRUE 18493
18491: GO 18629
18493: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18494: LD_ADDR_VAR 0 1
18498: PUSH
18499: LD_INT 2
18501: PUSH
18502: LD_INT 4
18504: PUSH
18505: LD_INT 5
18507: PUSH
18508: LD_INT 7
18510: PUSH
18511: LD_INT 11
18513: PUSH
18514: LD_INT 12
18516: PUSH
18517: LD_INT 15
18519: PUSH
18520: LD_INT 16
18522: PUSH
18523: LD_INT 20
18525: PUSH
18526: LD_INT 21
18528: PUSH
18529: LD_INT 22
18531: PUSH
18532: LD_INT 23
18534: PUSH
18535: LD_INT 25
18537: PUSH
18538: LD_INT 26
18540: PUSH
18541: LD_INT 30
18543: PUSH
18544: LD_INT 31
18546: PUSH
18547: LD_INT 32
18549: PUSH
18550: LD_INT 33
18552: PUSH
18553: LD_INT 34
18555: PUSH
18556: LD_INT 35
18558: PUSH
18559: LD_INT 36
18561: PUSH
18562: EMPTY
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: LIST
18581: LIST
18582: LIST
18583: LIST
18584: PUSH
18585: LD_INT 101
18587: PUSH
18588: LD_INT 102
18590: PUSH
18591: LD_INT 103
18593: PUSH
18594: LD_INT 106
18596: PUSH
18597: LD_INT 108
18599: PUSH
18600: LD_INT 112
18602: PUSH
18603: LD_INT 113
18605: PUSH
18606: LD_INT 114
18608: PUSH
18609: LD_INT 115
18611: PUSH
18612: EMPTY
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: PUSH
18623: EMPTY
18624: LIST
18625: LIST
18626: ST_TO_ADDR
18627: GO 18858
18629: LD_INT 19
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 18857
18637: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18638: LD_ADDR_VAR 0 1
18642: PUSH
18643: LD_INT 1
18645: PUSH
18646: LD_INT 2
18648: PUSH
18649: LD_INT 3
18651: PUSH
18652: LD_INT 4
18654: PUSH
18655: LD_INT 5
18657: PUSH
18658: LD_INT 6
18660: PUSH
18661: LD_INT 7
18663: PUSH
18664: LD_INT 8
18666: PUSH
18667: LD_INT 9
18669: PUSH
18670: LD_INT 10
18672: PUSH
18673: LD_INT 11
18675: PUSH
18676: LD_INT 12
18678: PUSH
18679: LD_INT 13
18681: PUSH
18682: LD_INT 14
18684: PUSH
18685: LD_INT 15
18687: PUSH
18688: LD_INT 16
18690: PUSH
18691: LD_INT 17
18693: PUSH
18694: LD_INT 18
18696: PUSH
18697: LD_INT 19
18699: PUSH
18700: LD_INT 20
18702: PUSH
18703: LD_INT 21
18705: PUSH
18706: LD_INT 22
18708: PUSH
18709: LD_INT 23
18711: PUSH
18712: LD_INT 24
18714: PUSH
18715: LD_INT 25
18717: PUSH
18718: LD_INT 26
18720: PUSH
18721: LD_INT 27
18723: PUSH
18724: LD_INT 28
18726: PUSH
18727: LD_INT 29
18729: PUSH
18730: LD_INT 30
18732: PUSH
18733: LD_INT 31
18735: PUSH
18736: LD_INT 32
18738: PUSH
18739: LD_INT 33
18741: PUSH
18742: LD_INT 34
18744: PUSH
18745: LD_INT 35
18747: PUSH
18748: LD_INT 36
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: LIST
18762: LIST
18763: LIST
18764: LIST
18765: LIST
18766: LIST
18767: LIST
18768: LIST
18769: LIST
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: PUSH
18789: LD_INT 101
18791: PUSH
18792: LD_INT 102
18794: PUSH
18795: LD_INT 103
18797: PUSH
18798: LD_INT 104
18800: PUSH
18801: LD_INT 105
18803: PUSH
18804: LD_INT 106
18806: PUSH
18807: LD_INT 107
18809: PUSH
18810: LD_INT 108
18812: PUSH
18813: LD_INT 109
18815: PUSH
18816: LD_INT 110
18818: PUSH
18819: LD_INT 111
18821: PUSH
18822: LD_INT 112
18824: PUSH
18825: LD_INT 113
18827: PUSH
18828: LD_INT 114
18830: PUSH
18831: LD_INT 115
18833: PUSH
18834: EMPTY
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: PUSH
18851: EMPTY
18852: LIST
18853: LIST
18854: ST_TO_ADDR
18855: GO 18858
18857: POP
// end else
18858: GO 19077
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
18860: LD_ADDR_VAR 0 1
18864: PUSH
18865: LD_INT 1
18867: PUSH
18868: LD_INT 2
18870: PUSH
18871: LD_INT 3
18873: PUSH
18874: LD_INT 4
18876: PUSH
18877: LD_INT 5
18879: PUSH
18880: LD_INT 6
18882: PUSH
18883: LD_INT 7
18885: PUSH
18886: LD_INT 8
18888: PUSH
18889: LD_INT 9
18891: PUSH
18892: LD_INT 10
18894: PUSH
18895: LD_INT 11
18897: PUSH
18898: LD_INT 12
18900: PUSH
18901: LD_INT 13
18903: PUSH
18904: LD_INT 14
18906: PUSH
18907: LD_INT 15
18909: PUSH
18910: LD_INT 16
18912: PUSH
18913: LD_INT 17
18915: PUSH
18916: LD_INT 18
18918: PUSH
18919: LD_INT 19
18921: PUSH
18922: LD_INT 20
18924: PUSH
18925: LD_INT 21
18927: PUSH
18928: LD_INT 22
18930: PUSH
18931: LD_INT 23
18933: PUSH
18934: LD_INT 24
18936: PUSH
18937: LD_INT 25
18939: PUSH
18940: LD_INT 26
18942: PUSH
18943: LD_INT 27
18945: PUSH
18946: LD_INT 28
18948: PUSH
18949: LD_INT 29
18951: PUSH
18952: LD_INT 30
18954: PUSH
18955: LD_INT 31
18957: PUSH
18958: LD_INT 32
18960: PUSH
18961: LD_INT 33
18963: PUSH
18964: LD_INT 34
18966: PUSH
18967: LD_INT 35
18969: PUSH
18970: LD_INT 36
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: LIST
18999: LIST
19000: LIST
19001: LIST
19002: LIST
19003: LIST
19004: LIST
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: PUSH
19011: LD_INT 101
19013: PUSH
19014: LD_INT 102
19016: PUSH
19017: LD_INT 103
19019: PUSH
19020: LD_INT 104
19022: PUSH
19023: LD_INT 105
19025: PUSH
19026: LD_INT 106
19028: PUSH
19029: LD_INT 107
19031: PUSH
19032: LD_INT 108
19034: PUSH
19035: LD_INT 109
19037: PUSH
19038: LD_INT 110
19040: PUSH
19041: LD_INT 111
19043: PUSH
19044: LD_INT 112
19046: PUSH
19047: LD_INT 113
19049: PUSH
19050: LD_INT 114
19052: PUSH
19053: LD_INT 115
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: PUSH
19073: EMPTY
19074: LIST
19075: LIST
19076: ST_TO_ADDR
// if result then
19077: LD_VAR 0 1
19081: IFFALSE 19370
// begin normal :=  ;
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_STRING 
19090: ST_TO_ADDR
// hardcore :=  ;
19091: LD_ADDR_VAR 0 4
19095: PUSH
19096: LD_STRING 
19098: ST_TO_ADDR
// for i = 1 to normalCounter do
19099: LD_ADDR_VAR 0 5
19103: PUSH
19104: DOUBLE
19105: LD_INT 1
19107: DEC
19108: ST_TO_ADDR
19109: LD_EXP 58
19113: PUSH
19114: FOR_TO
19115: IFFALSE 19216
// begin tmp := 0 ;
19117: LD_ADDR_VAR 0 2
19121: PUSH
19122: LD_STRING 0
19124: ST_TO_ADDR
// if result [ 1 ] then
19125: LD_VAR 0 1
19129: PUSH
19130: LD_INT 1
19132: ARRAY
19133: IFFALSE 19198
// if result [ 1 ] [ 1 ] = i then
19135: LD_VAR 0 1
19139: PUSH
19140: LD_INT 1
19142: ARRAY
19143: PUSH
19144: LD_INT 1
19146: ARRAY
19147: PUSH
19148: LD_VAR 0 5
19152: EQUAL
19153: IFFALSE 19198
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19155: LD_ADDR_VAR 0 1
19159: PUSH
19160: LD_VAR 0 1
19164: PPUSH
19165: LD_INT 1
19167: PPUSH
19168: LD_VAR 0 1
19172: PUSH
19173: LD_INT 1
19175: ARRAY
19176: PPUSH
19177: LD_INT 1
19179: PPUSH
19180: CALL_OW 3
19184: PPUSH
19185: CALL_OW 1
19189: ST_TO_ADDR
// tmp := 1 ;
19190: LD_ADDR_VAR 0 2
19194: PUSH
19195: LD_STRING 1
19197: ST_TO_ADDR
// end ; normal := normal & tmp ;
19198: LD_ADDR_VAR 0 3
19202: PUSH
19203: LD_VAR 0 3
19207: PUSH
19208: LD_VAR 0 2
19212: STR
19213: ST_TO_ADDR
// end ;
19214: GO 19114
19216: POP
19217: POP
// for i = 1 to hardcoreCounter do
19218: LD_ADDR_VAR 0 5
19222: PUSH
19223: DOUBLE
19224: LD_INT 1
19226: DEC
19227: ST_TO_ADDR
19228: LD_EXP 59
19232: PUSH
19233: FOR_TO
19234: IFFALSE 19339
// begin tmp := 0 ;
19236: LD_ADDR_VAR 0 2
19240: PUSH
19241: LD_STRING 0
19243: ST_TO_ADDR
// if result [ 2 ] then
19244: LD_VAR 0 1
19248: PUSH
19249: LD_INT 2
19251: ARRAY
19252: IFFALSE 19321
// if result [ 2 ] [ 1 ] = 100 + i then
19254: LD_VAR 0 1
19258: PUSH
19259: LD_INT 2
19261: ARRAY
19262: PUSH
19263: LD_INT 1
19265: ARRAY
19266: PUSH
19267: LD_INT 100
19269: PUSH
19270: LD_VAR 0 5
19274: PLUS
19275: EQUAL
19276: IFFALSE 19321
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19278: LD_ADDR_VAR 0 1
19282: PUSH
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_INT 2
19290: PPUSH
19291: LD_VAR 0 1
19295: PUSH
19296: LD_INT 2
19298: ARRAY
19299: PPUSH
19300: LD_INT 1
19302: PPUSH
19303: CALL_OW 3
19307: PPUSH
19308: CALL_OW 1
19312: ST_TO_ADDR
// tmp := 1 ;
19313: LD_ADDR_VAR 0 2
19317: PUSH
19318: LD_STRING 1
19320: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19321: LD_ADDR_VAR 0 4
19325: PUSH
19326: LD_VAR 0 4
19330: PUSH
19331: LD_VAR 0 2
19335: STR
19336: ST_TO_ADDR
// end ;
19337: GO 19233
19339: POP
19340: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19341: LD_STRING getStreamItemsFromMission("
19343: PUSH
19344: LD_VAR 0 3
19348: STR
19349: PUSH
19350: LD_STRING ","
19352: STR
19353: PUSH
19354: LD_VAR 0 4
19358: STR
19359: PUSH
19360: LD_STRING ")
19362: STR
19363: PPUSH
19364: CALL_OW 559
// end else
19368: GO 19377
// ToLua ( getStreamItemsFromMission("","") ) ;
19370: LD_STRING getStreamItemsFromMission("","")
19372: PPUSH
19373: CALL_OW 559
// end ;
19377: LD_VAR 0 1
19381: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19382: LD_EXP 57
19386: PUSH
19387: LD_EXP 62
19391: AND
19392: IFFALSE 19516
19394: GO 19396
19396: DISABLE
19397: LD_INT 0
19399: PPUSH
19400: PPUSH
// begin enable ;
19401: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19402: LD_ADDR_VAR 0 2
19406: PUSH
19407: LD_INT 22
19409: PUSH
19410: LD_OWVAR 2
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: PUSH
19419: LD_INT 2
19421: PUSH
19422: LD_INT 34
19424: PUSH
19425: LD_INT 7
19427: PUSH
19428: EMPTY
19429: LIST
19430: LIST
19431: PUSH
19432: LD_INT 34
19434: PUSH
19435: LD_INT 45
19437: PUSH
19438: EMPTY
19439: LIST
19440: LIST
19441: PUSH
19442: LD_INT 34
19444: PUSH
19445: LD_INT 28
19447: PUSH
19448: EMPTY
19449: LIST
19450: LIST
19451: PUSH
19452: LD_INT 34
19454: PUSH
19455: LD_INT 47
19457: PUSH
19458: EMPTY
19459: LIST
19460: LIST
19461: PUSH
19462: EMPTY
19463: LIST
19464: LIST
19465: LIST
19466: LIST
19467: LIST
19468: PUSH
19469: EMPTY
19470: LIST
19471: LIST
19472: PPUSH
19473: CALL_OW 69
19477: ST_TO_ADDR
// if not tmp then
19478: LD_VAR 0 2
19482: NOT
19483: IFFALSE 19487
// exit ;
19485: GO 19516
// for i in tmp do
19487: LD_ADDR_VAR 0 1
19491: PUSH
19492: LD_VAR 0 2
19496: PUSH
19497: FOR_IN
19498: IFFALSE 19514
// begin SetLives ( i , 0 ) ;
19500: LD_VAR 0 1
19504: PPUSH
19505: LD_INT 0
19507: PPUSH
19508: CALL_OW 234
// end ;
19512: GO 19497
19514: POP
19515: POP
// end ;
19516: PPOPN 2
19518: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19519: LD_EXP 57
19523: PUSH
19524: LD_EXP 63
19528: AND
19529: IFFALSE 19613
19531: GO 19533
19533: DISABLE
19534: LD_INT 0
19536: PPUSH
19537: PPUSH
// begin enable ;
19538: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19539: LD_ADDR_VAR 0 2
19543: PUSH
19544: LD_INT 22
19546: PUSH
19547: LD_OWVAR 2
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: PUSH
19556: LD_INT 32
19558: PUSH
19559: LD_INT 3
19561: PUSH
19562: EMPTY
19563: LIST
19564: LIST
19565: PUSH
19566: EMPTY
19567: LIST
19568: LIST
19569: PPUSH
19570: CALL_OW 69
19574: ST_TO_ADDR
// if not tmp then
19575: LD_VAR 0 2
19579: NOT
19580: IFFALSE 19584
// exit ;
19582: GO 19613
// for i in tmp do
19584: LD_ADDR_VAR 0 1
19588: PUSH
19589: LD_VAR 0 2
19593: PUSH
19594: FOR_IN
19595: IFFALSE 19611
// begin SetLives ( i , 0 ) ;
19597: LD_VAR 0 1
19601: PPUSH
19602: LD_INT 0
19604: PPUSH
19605: CALL_OW 234
// end ;
19609: GO 19594
19611: POP
19612: POP
// end ;
19613: PPOPN 2
19615: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19616: LD_EXP 57
19620: PUSH
19621: LD_EXP 60
19625: AND
19626: IFFALSE 19719
19628: GO 19630
19630: DISABLE
19631: LD_INT 0
19633: PPUSH
// begin enable ;
19634: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19635: LD_ADDR_VAR 0 1
19639: PUSH
19640: LD_INT 22
19642: PUSH
19643: LD_OWVAR 2
19647: PUSH
19648: EMPTY
19649: LIST
19650: LIST
19651: PUSH
19652: LD_INT 2
19654: PUSH
19655: LD_INT 25
19657: PUSH
19658: LD_INT 5
19660: PUSH
19661: EMPTY
19662: LIST
19663: LIST
19664: PUSH
19665: LD_INT 25
19667: PUSH
19668: LD_INT 9
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PUSH
19675: LD_INT 25
19677: PUSH
19678: LD_INT 8
19680: PUSH
19681: EMPTY
19682: LIST
19683: LIST
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PPUSH
19695: CALL_OW 69
19699: PUSH
19700: FOR_IN
19701: IFFALSE 19717
// begin SetClass ( i , 1 ) ;
19703: LD_VAR 0 1
19707: PPUSH
19708: LD_INT 1
19710: PPUSH
19711: CALL_OW 336
// end ;
19715: GO 19700
19717: POP
19718: POP
// end ;
19719: PPOPN 1
19721: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19722: LD_EXP 57
19726: PUSH
19727: LD_EXP 61
19731: AND
19732: PUSH
19733: LD_OWVAR 65
19737: PUSH
19738: LD_INT 7
19740: LESS
19741: AND
19742: IFFALSE 19756
19744: GO 19746
19746: DISABLE
// begin enable ;
19747: ENABLE
// game_speed := 7 ;
19748: LD_ADDR_OWVAR 65
19752: PUSH
19753: LD_INT 7
19755: ST_TO_ADDR
// end ;
19756: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19757: LD_EXP 57
19761: PUSH
19762: LD_EXP 64
19766: AND
19767: IFFALSE 19969
19769: GO 19771
19771: DISABLE
19772: LD_INT 0
19774: PPUSH
19775: PPUSH
19776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19777: LD_ADDR_VAR 0 3
19781: PUSH
19782: LD_INT 81
19784: PUSH
19785: LD_OWVAR 2
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 21
19796: PUSH
19797: LD_INT 1
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: ST_TO_ADDR
// if not tmp then
19813: LD_VAR 0 3
19817: NOT
19818: IFFALSE 19822
// exit ;
19820: GO 19969
// if tmp > 5 then
19822: LD_VAR 0 3
19826: PUSH
19827: LD_INT 5
19829: GREATER
19830: IFFALSE 19842
// k := 5 else
19832: LD_ADDR_VAR 0 2
19836: PUSH
19837: LD_INT 5
19839: ST_TO_ADDR
19840: GO 19852
// k := tmp ;
19842: LD_ADDR_VAR 0 2
19846: PUSH
19847: LD_VAR 0 3
19851: ST_TO_ADDR
// for i := 1 to k do
19852: LD_ADDR_VAR 0 1
19856: PUSH
19857: DOUBLE
19858: LD_INT 1
19860: DEC
19861: ST_TO_ADDR
19862: LD_VAR 0 2
19866: PUSH
19867: FOR_TO
19868: IFFALSE 19967
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19870: LD_VAR 0 3
19874: PUSH
19875: LD_VAR 0 1
19879: ARRAY
19880: PPUSH
19881: LD_VAR 0 1
19885: PUSH
19886: LD_INT 4
19888: MOD
19889: PUSH
19890: LD_INT 1
19892: PLUS
19893: PPUSH
19894: CALL_OW 259
19898: PUSH
19899: LD_INT 10
19901: LESS
19902: IFFALSE 19965
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19904: LD_VAR 0 3
19908: PUSH
19909: LD_VAR 0 1
19913: ARRAY
19914: PPUSH
19915: LD_VAR 0 1
19919: PUSH
19920: LD_INT 4
19922: MOD
19923: PUSH
19924: LD_INT 1
19926: PLUS
19927: PPUSH
19928: LD_VAR 0 3
19932: PUSH
19933: LD_VAR 0 1
19937: ARRAY
19938: PPUSH
19939: LD_VAR 0 1
19943: PUSH
19944: LD_INT 4
19946: MOD
19947: PUSH
19948: LD_INT 1
19950: PLUS
19951: PPUSH
19952: CALL_OW 259
19956: PUSH
19957: LD_INT 1
19959: PLUS
19960: PPUSH
19961: CALL_OW 237
19965: GO 19867
19967: POP
19968: POP
// end ;
19969: PPOPN 3
19971: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
19972: LD_EXP 57
19976: PUSH
19977: LD_EXP 65
19981: AND
19982: IFFALSE 20002
19984: GO 19986
19986: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
19987: LD_INT 4
19989: PPUSH
19990: LD_OWVAR 2
19994: PPUSH
19995: LD_INT 0
19997: PPUSH
19998: CALL_OW 324
20002: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20003: LD_EXP 57
20007: PUSH
20008: LD_EXP 94
20012: AND
20013: IFFALSE 20033
20015: GO 20017
20017: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20018: LD_INT 19
20020: PPUSH
20021: LD_OWVAR 2
20025: PPUSH
20026: LD_INT 0
20028: PPUSH
20029: CALL_OW 324
20033: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20034: LD_EXP 57
20038: PUSH
20039: LD_EXP 66
20043: AND
20044: IFFALSE 20146
20046: GO 20048
20048: DISABLE
20049: LD_INT 0
20051: PPUSH
20052: PPUSH
// begin enable ;
20053: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20054: LD_ADDR_VAR 0 2
20058: PUSH
20059: LD_INT 22
20061: PUSH
20062: LD_OWVAR 2
20066: PUSH
20067: EMPTY
20068: LIST
20069: LIST
20070: PUSH
20071: LD_INT 2
20073: PUSH
20074: LD_INT 34
20076: PUSH
20077: LD_INT 11
20079: PUSH
20080: EMPTY
20081: LIST
20082: LIST
20083: PUSH
20084: LD_INT 34
20086: PUSH
20087: LD_INT 30
20089: PUSH
20090: EMPTY
20091: LIST
20092: LIST
20093: PUSH
20094: EMPTY
20095: LIST
20096: LIST
20097: LIST
20098: PUSH
20099: EMPTY
20100: LIST
20101: LIST
20102: PPUSH
20103: CALL_OW 69
20107: ST_TO_ADDR
// if not tmp then
20108: LD_VAR 0 2
20112: NOT
20113: IFFALSE 20117
// exit ;
20115: GO 20146
// for i in tmp do
20117: LD_ADDR_VAR 0 1
20121: PUSH
20122: LD_VAR 0 2
20126: PUSH
20127: FOR_IN
20128: IFFALSE 20144
// begin SetLives ( i , 0 ) ;
20130: LD_VAR 0 1
20134: PPUSH
20135: LD_INT 0
20137: PPUSH
20138: CALL_OW 234
// end ;
20142: GO 20127
20144: POP
20145: POP
// end ;
20146: PPOPN 2
20148: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20149: LD_EXP 57
20153: PUSH
20154: LD_EXP 67
20158: AND
20159: IFFALSE 20179
20161: GO 20163
20163: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20164: LD_INT 32
20166: PPUSH
20167: LD_OWVAR 2
20171: PPUSH
20172: LD_INT 0
20174: PPUSH
20175: CALL_OW 324
20179: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20180: LD_EXP 57
20184: PUSH
20185: LD_EXP 68
20189: AND
20190: IFFALSE 20371
20192: GO 20194
20194: DISABLE
20195: LD_INT 0
20197: PPUSH
20198: PPUSH
20199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20200: LD_ADDR_VAR 0 2
20204: PUSH
20205: LD_INT 22
20207: PUSH
20208: LD_OWVAR 2
20212: PUSH
20213: EMPTY
20214: LIST
20215: LIST
20216: PUSH
20217: LD_INT 33
20219: PUSH
20220: LD_INT 3
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PUSH
20227: EMPTY
20228: LIST
20229: LIST
20230: PPUSH
20231: CALL_OW 69
20235: ST_TO_ADDR
// if not tmp then
20236: LD_VAR 0 2
20240: NOT
20241: IFFALSE 20245
// exit ;
20243: GO 20371
// side := 0 ;
20245: LD_ADDR_VAR 0 3
20249: PUSH
20250: LD_INT 0
20252: ST_TO_ADDR
// for i := 1 to 8 do
20253: LD_ADDR_VAR 0 1
20257: PUSH
20258: DOUBLE
20259: LD_INT 1
20261: DEC
20262: ST_TO_ADDR
20263: LD_INT 8
20265: PUSH
20266: FOR_TO
20267: IFFALSE 20315
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20269: LD_OWVAR 2
20273: PUSH
20274: LD_VAR 0 1
20278: NONEQUAL
20279: PUSH
20280: LD_OWVAR 2
20284: PPUSH
20285: LD_VAR 0 1
20289: PPUSH
20290: CALL_OW 81
20294: PUSH
20295: LD_INT 2
20297: EQUAL
20298: AND
20299: IFFALSE 20313
// begin side := i ;
20301: LD_ADDR_VAR 0 3
20305: PUSH
20306: LD_VAR 0 1
20310: ST_TO_ADDR
// break ;
20311: GO 20315
// end ;
20313: GO 20266
20315: POP
20316: POP
// if not side then
20317: LD_VAR 0 3
20321: NOT
20322: IFFALSE 20326
// exit ;
20324: GO 20371
// for i := 1 to tmp do
20326: LD_ADDR_VAR 0 1
20330: PUSH
20331: DOUBLE
20332: LD_INT 1
20334: DEC
20335: ST_TO_ADDR
20336: LD_VAR 0 2
20340: PUSH
20341: FOR_TO
20342: IFFALSE 20369
// if Prob ( 60 ) then
20344: LD_INT 60
20346: PPUSH
20347: CALL_OW 13
20351: IFFALSE 20367
// SetSide ( i , side ) ;
20353: LD_VAR 0 1
20357: PPUSH
20358: LD_VAR 0 3
20362: PPUSH
20363: CALL_OW 235
20367: GO 20341
20369: POP
20370: POP
// end ;
20371: PPOPN 3
20373: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20374: LD_EXP 57
20378: PUSH
20379: LD_EXP 70
20383: AND
20384: IFFALSE 20503
20386: GO 20388
20388: DISABLE
20389: LD_INT 0
20391: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20392: LD_ADDR_VAR 0 1
20396: PUSH
20397: LD_INT 22
20399: PUSH
20400: LD_OWVAR 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 21
20411: PUSH
20412: LD_INT 1
20414: PUSH
20415: EMPTY
20416: LIST
20417: LIST
20418: PUSH
20419: LD_INT 3
20421: PUSH
20422: LD_INT 23
20424: PUSH
20425: LD_INT 0
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: PUSH
20436: EMPTY
20437: LIST
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: PUSH
20446: FOR_IN
20447: IFFALSE 20501
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20449: LD_VAR 0 1
20453: PPUSH
20454: CALL_OW 257
20458: PUSH
20459: LD_INT 1
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: LD_INT 3
20467: PUSH
20468: LD_INT 4
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: LIST
20475: LIST
20476: IN
20477: IFFALSE 20499
// SetClass ( un , rand ( 1 , 4 ) ) ;
20479: LD_VAR 0 1
20483: PPUSH
20484: LD_INT 1
20486: PPUSH
20487: LD_INT 4
20489: PPUSH
20490: CALL_OW 12
20494: PPUSH
20495: CALL_OW 336
20499: GO 20446
20501: POP
20502: POP
// end ;
20503: PPOPN 1
20505: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20506: LD_EXP 57
20510: PUSH
20511: LD_EXP 69
20515: AND
20516: IFFALSE 20595
20518: GO 20520
20520: DISABLE
20521: LD_INT 0
20523: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20524: LD_ADDR_VAR 0 1
20528: PUSH
20529: LD_INT 22
20531: PUSH
20532: LD_OWVAR 2
20536: PUSH
20537: EMPTY
20538: LIST
20539: LIST
20540: PUSH
20541: LD_INT 21
20543: PUSH
20544: LD_INT 3
20546: PUSH
20547: EMPTY
20548: LIST
20549: LIST
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PPUSH
20555: CALL_OW 69
20559: ST_TO_ADDR
// if not tmp then
20560: LD_VAR 0 1
20564: NOT
20565: IFFALSE 20569
// exit ;
20567: GO 20595
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20569: LD_VAR 0 1
20573: PUSH
20574: LD_INT 1
20576: PPUSH
20577: LD_VAR 0 1
20581: PPUSH
20582: CALL_OW 12
20586: ARRAY
20587: PPUSH
20588: LD_INT 100
20590: PPUSH
20591: CALL_OW 234
// end ;
20595: PPOPN 1
20597: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20598: LD_EXP 57
20602: PUSH
20603: LD_EXP 71
20607: AND
20608: IFFALSE 20706
20610: GO 20612
20612: DISABLE
20613: LD_INT 0
20615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20616: LD_ADDR_VAR 0 1
20620: PUSH
20621: LD_INT 22
20623: PUSH
20624: LD_OWVAR 2
20628: PUSH
20629: EMPTY
20630: LIST
20631: LIST
20632: PUSH
20633: LD_INT 21
20635: PUSH
20636: LD_INT 1
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PPUSH
20647: CALL_OW 69
20651: ST_TO_ADDR
// if not tmp then
20652: LD_VAR 0 1
20656: NOT
20657: IFFALSE 20661
// exit ;
20659: GO 20706
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20661: LD_VAR 0 1
20665: PUSH
20666: LD_INT 1
20668: PPUSH
20669: LD_VAR 0 1
20673: PPUSH
20674: CALL_OW 12
20678: ARRAY
20679: PPUSH
20680: LD_INT 1
20682: PPUSH
20683: LD_INT 4
20685: PPUSH
20686: CALL_OW 12
20690: PPUSH
20691: LD_INT 3000
20693: PPUSH
20694: LD_INT 9000
20696: PPUSH
20697: CALL_OW 12
20701: PPUSH
20702: CALL_OW 492
// end ;
20706: PPOPN 1
20708: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20709: LD_EXP 57
20713: PUSH
20714: LD_EXP 72
20718: AND
20719: IFFALSE 20739
20721: GO 20723
20723: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20724: LD_INT 1
20726: PPUSH
20727: LD_OWVAR 2
20731: PPUSH
20732: LD_INT 0
20734: PPUSH
20735: CALL_OW 324
20739: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20740: LD_EXP 57
20744: PUSH
20745: LD_EXP 73
20749: AND
20750: IFFALSE 20833
20752: GO 20754
20754: DISABLE
20755: LD_INT 0
20757: PPUSH
20758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20759: LD_ADDR_VAR 0 2
20763: PUSH
20764: LD_INT 22
20766: PUSH
20767: LD_OWVAR 2
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: LD_INT 21
20778: PUSH
20779: LD_INT 3
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PUSH
20786: EMPTY
20787: LIST
20788: LIST
20789: PPUSH
20790: CALL_OW 69
20794: ST_TO_ADDR
// if not tmp then
20795: LD_VAR 0 2
20799: NOT
20800: IFFALSE 20804
// exit ;
20802: GO 20833
// for i in tmp do
20804: LD_ADDR_VAR 0 1
20808: PUSH
20809: LD_VAR 0 2
20813: PUSH
20814: FOR_IN
20815: IFFALSE 20831
// SetBLevel ( i , 10 ) ;
20817: LD_VAR 0 1
20821: PPUSH
20822: LD_INT 10
20824: PPUSH
20825: CALL_OW 241
20829: GO 20814
20831: POP
20832: POP
// end ;
20833: PPOPN 2
20835: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20836: LD_EXP 57
20840: PUSH
20841: LD_EXP 74
20845: AND
20846: IFFALSE 20957
20848: GO 20850
20850: DISABLE
20851: LD_INT 0
20853: PPUSH
20854: PPUSH
20855: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20856: LD_ADDR_VAR 0 3
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_OWVAR 2
20868: PUSH
20869: EMPTY
20870: LIST
20871: LIST
20872: PUSH
20873: LD_INT 25
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: EMPTY
20884: LIST
20885: LIST
20886: PPUSH
20887: CALL_OW 69
20891: ST_TO_ADDR
// if not tmp then
20892: LD_VAR 0 3
20896: NOT
20897: IFFALSE 20901
// exit ;
20899: GO 20957
// un := tmp [ rand ( 1 , tmp ) ] ;
20901: LD_ADDR_VAR 0 2
20905: PUSH
20906: LD_VAR 0 3
20910: PUSH
20911: LD_INT 1
20913: PPUSH
20914: LD_VAR 0 3
20918: PPUSH
20919: CALL_OW 12
20923: ARRAY
20924: ST_TO_ADDR
// if Crawls ( un ) then
20925: LD_VAR 0 2
20929: PPUSH
20930: CALL_OW 318
20934: IFFALSE 20945
// ComWalk ( un ) ;
20936: LD_VAR 0 2
20940: PPUSH
20941: CALL_OW 138
// SetClass ( un , class_sniper ) ;
20945: LD_VAR 0 2
20949: PPUSH
20950: LD_INT 5
20952: PPUSH
20953: CALL_OW 336
// end ;
20957: PPOPN 3
20959: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
20960: LD_EXP 57
20964: PUSH
20965: LD_EXP 75
20969: AND
20970: PUSH
20971: LD_OWVAR 67
20975: PUSH
20976: LD_INT 3
20978: LESS
20979: AND
20980: IFFALSE 20999
20982: GO 20984
20984: DISABLE
// Difficulty := Difficulty + 1 ;
20985: LD_ADDR_OWVAR 67
20989: PUSH
20990: LD_OWVAR 67
20994: PUSH
20995: LD_INT 1
20997: PLUS
20998: ST_TO_ADDR
20999: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21000: LD_EXP 57
21004: PUSH
21005: LD_EXP 76
21009: AND
21010: IFFALSE 21113
21012: GO 21014
21014: DISABLE
21015: LD_INT 0
21017: PPUSH
// begin for i := 1 to 5 do
21018: LD_ADDR_VAR 0 1
21022: PUSH
21023: DOUBLE
21024: LD_INT 1
21026: DEC
21027: ST_TO_ADDR
21028: LD_INT 5
21030: PUSH
21031: FOR_TO
21032: IFFALSE 21111
// begin uc_nation := nation_nature ;
21034: LD_ADDR_OWVAR 21
21038: PUSH
21039: LD_INT 0
21041: ST_TO_ADDR
// uc_side := 0 ;
21042: LD_ADDR_OWVAR 20
21046: PUSH
21047: LD_INT 0
21049: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21050: LD_ADDR_OWVAR 29
21054: PUSH
21055: LD_INT 12
21057: PUSH
21058: LD_INT 12
21060: PUSH
21061: EMPTY
21062: LIST
21063: LIST
21064: ST_TO_ADDR
// hc_agressivity := 20 ;
21065: LD_ADDR_OWVAR 35
21069: PUSH
21070: LD_INT 20
21072: ST_TO_ADDR
// hc_class := class_tiger ;
21073: LD_ADDR_OWVAR 28
21077: PUSH
21078: LD_INT 14
21080: ST_TO_ADDR
// hc_gallery :=  ;
21081: LD_ADDR_OWVAR 33
21085: PUSH
21086: LD_STRING 
21088: ST_TO_ADDR
// hc_name :=  ;
21089: LD_ADDR_OWVAR 26
21093: PUSH
21094: LD_STRING 
21096: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21097: CALL_OW 44
21101: PPUSH
21102: LD_INT 0
21104: PPUSH
21105: CALL_OW 51
// end ;
21109: GO 21031
21111: POP
21112: POP
// end ;
21113: PPOPN 1
21115: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21116: LD_EXP 57
21120: PUSH
21121: LD_EXP 77
21125: AND
21126: IFFALSE 21135
21128: GO 21130
21130: DISABLE
// StreamSibBomb ;
21131: CALL 21136 0 0
21135: END
// export function StreamSibBomb ; var i , x , y ; begin
21136: LD_INT 0
21138: PPUSH
21139: PPUSH
21140: PPUSH
21141: PPUSH
// result := false ;
21142: LD_ADDR_VAR 0 1
21146: PUSH
21147: LD_INT 0
21149: ST_TO_ADDR
// for i := 1 to 16 do
21150: LD_ADDR_VAR 0 2
21154: PUSH
21155: DOUBLE
21156: LD_INT 1
21158: DEC
21159: ST_TO_ADDR
21160: LD_INT 16
21162: PUSH
21163: FOR_TO
21164: IFFALSE 21363
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21166: LD_ADDR_VAR 0 3
21170: PUSH
21171: LD_INT 10
21173: PUSH
21174: LD_INT 20
21176: PUSH
21177: LD_INT 30
21179: PUSH
21180: LD_INT 40
21182: PUSH
21183: LD_INT 50
21185: PUSH
21186: LD_INT 60
21188: PUSH
21189: LD_INT 70
21191: PUSH
21192: LD_INT 80
21194: PUSH
21195: LD_INT 90
21197: PUSH
21198: LD_INT 100
21200: PUSH
21201: LD_INT 110
21203: PUSH
21204: LD_INT 120
21206: PUSH
21207: LD_INT 130
21209: PUSH
21210: LD_INT 140
21212: PUSH
21213: LD_INT 150
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 1
21235: PPUSH
21236: LD_INT 15
21238: PPUSH
21239: CALL_OW 12
21243: ARRAY
21244: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21245: LD_ADDR_VAR 0 4
21249: PUSH
21250: LD_INT 10
21252: PUSH
21253: LD_INT 20
21255: PUSH
21256: LD_INT 30
21258: PUSH
21259: LD_INT 40
21261: PUSH
21262: LD_INT 50
21264: PUSH
21265: LD_INT 60
21267: PUSH
21268: LD_INT 70
21270: PUSH
21271: LD_INT 80
21273: PUSH
21274: LD_INT 90
21276: PUSH
21277: LD_INT 100
21279: PUSH
21280: LD_INT 110
21282: PUSH
21283: LD_INT 120
21285: PUSH
21286: LD_INT 130
21288: PUSH
21289: LD_INT 140
21291: PUSH
21292: LD_INT 150
21294: PUSH
21295: EMPTY
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: LIST
21301: LIST
21302: LIST
21303: LIST
21304: LIST
21305: LIST
21306: LIST
21307: LIST
21308: LIST
21309: LIST
21310: LIST
21311: PUSH
21312: LD_INT 1
21314: PPUSH
21315: LD_INT 15
21317: PPUSH
21318: CALL_OW 12
21322: ARRAY
21323: ST_TO_ADDR
// if ValidHex ( x , y ) then
21324: LD_VAR 0 3
21328: PPUSH
21329: LD_VAR 0 4
21333: PPUSH
21334: CALL_OW 488
21338: IFFALSE 21361
// begin result := [ x , y ] ;
21340: LD_ADDR_VAR 0 1
21344: PUSH
21345: LD_VAR 0 3
21349: PUSH
21350: LD_VAR 0 4
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: ST_TO_ADDR
// break ;
21359: GO 21363
// end ; end ;
21361: GO 21163
21363: POP
21364: POP
// if result then
21365: LD_VAR 0 1
21369: IFFALSE 21429
// begin ToLua ( playSibBomb() ) ;
21371: LD_STRING playSibBomb()
21373: PPUSH
21374: CALL_OW 559
// wait ( 0 0$14 ) ;
21378: LD_INT 490
21380: PPUSH
21381: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21385: LD_VAR 0 1
21389: PUSH
21390: LD_INT 1
21392: ARRAY
21393: PPUSH
21394: LD_VAR 0 1
21398: PUSH
21399: LD_INT 2
21401: ARRAY
21402: PPUSH
21403: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21407: LD_VAR 0 1
21411: PUSH
21412: LD_INT 1
21414: ARRAY
21415: PPUSH
21416: LD_VAR 0 1
21420: PUSH
21421: LD_INT 2
21423: ARRAY
21424: PPUSH
21425: CALL_OW 429
// end ; end ;
21429: LD_VAR 0 1
21433: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21434: LD_EXP 57
21438: PUSH
21439: LD_EXP 79
21443: AND
21444: IFFALSE 21456
21446: GO 21448
21448: DISABLE
// YouLost (  ) ;
21449: LD_STRING 
21451: PPUSH
21452: CALL_OW 104
21456: END
// every 0 0$1 trigger StreamModeActive and sFog do
21457: LD_EXP 57
21461: PUSH
21462: LD_EXP 78
21466: AND
21467: IFFALSE 21481
21469: GO 21471
21471: DISABLE
// FogOff ( your_side ) ;
21472: LD_OWVAR 2
21476: PPUSH
21477: CALL_OW 344
21481: END
// every 0 0$1 trigger StreamModeActive and sSun do
21482: LD_EXP 57
21486: PUSH
21487: LD_EXP 80
21491: AND
21492: IFFALSE 21520
21494: GO 21496
21496: DISABLE
// begin solar_recharge_percent := 0 ;
21497: LD_ADDR_OWVAR 79
21501: PUSH
21502: LD_INT 0
21504: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21505: LD_INT 10500
21507: PPUSH
21508: CALL_OW 67
// solar_recharge_percent := 100 ;
21512: LD_ADDR_OWVAR 79
21516: PUSH
21517: LD_INT 100
21519: ST_TO_ADDR
// end ;
21520: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21521: LD_EXP 57
21525: PUSH
21526: LD_EXP 81
21530: AND
21531: IFFALSE 21770
21533: GO 21535
21535: DISABLE
21536: LD_INT 0
21538: PPUSH
21539: PPUSH
21540: PPUSH
// begin tmp := [ ] ;
21541: LD_ADDR_VAR 0 3
21545: PUSH
21546: EMPTY
21547: ST_TO_ADDR
// for i := 1 to 6 do
21548: LD_ADDR_VAR 0 1
21552: PUSH
21553: DOUBLE
21554: LD_INT 1
21556: DEC
21557: ST_TO_ADDR
21558: LD_INT 6
21560: PUSH
21561: FOR_TO
21562: IFFALSE 21667
// begin uc_nation := nation_nature ;
21564: LD_ADDR_OWVAR 21
21568: PUSH
21569: LD_INT 0
21571: ST_TO_ADDR
// uc_side := 0 ;
21572: LD_ADDR_OWVAR 20
21576: PUSH
21577: LD_INT 0
21579: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21580: LD_ADDR_OWVAR 29
21584: PUSH
21585: LD_INT 12
21587: PUSH
21588: LD_INT 12
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: ST_TO_ADDR
// hc_agressivity := 20 ;
21595: LD_ADDR_OWVAR 35
21599: PUSH
21600: LD_INT 20
21602: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21603: LD_ADDR_OWVAR 28
21607: PUSH
21608: LD_INT 17
21610: ST_TO_ADDR
// hc_gallery :=  ;
21611: LD_ADDR_OWVAR 33
21615: PUSH
21616: LD_STRING 
21618: ST_TO_ADDR
// hc_name :=  ;
21619: LD_ADDR_OWVAR 26
21623: PUSH
21624: LD_STRING 
21626: ST_TO_ADDR
// un := CreateHuman ;
21627: LD_ADDR_VAR 0 2
21631: PUSH
21632: CALL_OW 44
21636: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21637: LD_VAR 0 2
21641: PPUSH
21642: LD_INT 1
21644: PPUSH
21645: CALL_OW 51
// tmp := tmp ^ un ;
21649: LD_ADDR_VAR 0 3
21653: PUSH
21654: LD_VAR 0 3
21658: PUSH
21659: LD_VAR 0 2
21663: ADD
21664: ST_TO_ADDR
// end ;
21665: GO 21561
21667: POP
21668: POP
// repeat wait ( 0 0$1 ) ;
21669: LD_INT 35
21671: PPUSH
21672: CALL_OW 67
// for un in tmp do
21676: LD_ADDR_VAR 0 2
21680: PUSH
21681: LD_VAR 0 3
21685: PUSH
21686: FOR_IN
21687: IFFALSE 21761
// begin if IsDead ( un ) then
21689: LD_VAR 0 2
21693: PPUSH
21694: CALL_OW 301
21698: IFFALSE 21718
// begin tmp := tmp diff un ;
21700: LD_ADDR_VAR 0 3
21704: PUSH
21705: LD_VAR 0 3
21709: PUSH
21710: LD_VAR 0 2
21714: DIFF
21715: ST_TO_ADDR
// continue ;
21716: GO 21686
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21718: LD_VAR 0 2
21722: PPUSH
21723: LD_INT 3
21725: PUSH
21726: LD_INT 22
21728: PUSH
21729: LD_INT 0
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: EMPTY
21737: LIST
21738: LIST
21739: PPUSH
21740: CALL_OW 69
21744: PPUSH
21745: LD_VAR 0 2
21749: PPUSH
21750: CALL_OW 74
21754: PPUSH
21755: CALL_OW 115
// end ;
21759: GO 21686
21761: POP
21762: POP
// until not tmp ;
21763: LD_VAR 0 3
21767: NOT
21768: IFFALSE 21669
// end ;
21770: PPOPN 3
21772: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21773: LD_EXP 57
21777: PUSH
21778: LD_EXP 82
21782: AND
21783: IFFALSE 21837
21785: GO 21787
21787: DISABLE
// begin ToLua ( displayTroll(); ) ;
21788: LD_STRING displayTroll();
21790: PPUSH
21791: CALL_OW 559
// wait ( 3 3$00 ) ;
21795: LD_INT 6300
21797: PPUSH
21798: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21802: LD_STRING hideTroll();
21804: PPUSH
21805: CALL_OW 559
// wait ( 1 1$00 ) ;
21809: LD_INT 2100
21811: PPUSH
21812: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21816: LD_STRING displayTroll();
21818: PPUSH
21819: CALL_OW 559
// wait ( 1 1$00 ) ;
21823: LD_INT 2100
21825: PPUSH
21826: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21830: LD_STRING hideTroll();
21832: PPUSH
21833: CALL_OW 559
// end ;
21837: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21838: LD_EXP 57
21842: PUSH
21843: LD_EXP 83
21847: AND
21848: IFFALSE 21911
21850: GO 21852
21852: DISABLE
21853: LD_INT 0
21855: PPUSH
// begin p := 0 ;
21856: LD_ADDR_VAR 0 1
21860: PUSH
21861: LD_INT 0
21863: ST_TO_ADDR
// repeat game_speed := 1 ;
21864: LD_ADDR_OWVAR 65
21868: PUSH
21869: LD_INT 1
21871: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21872: LD_INT 35
21874: PPUSH
21875: CALL_OW 67
// p := p + 1 ;
21879: LD_ADDR_VAR 0 1
21883: PUSH
21884: LD_VAR 0 1
21888: PUSH
21889: LD_INT 1
21891: PLUS
21892: ST_TO_ADDR
// until p >= 60 ;
21893: LD_VAR 0 1
21897: PUSH
21898: LD_INT 60
21900: GREATEREQUAL
21901: IFFALSE 21864
// game_speed := 4 ;
21903: LD_ADDR_OWVAR 65
21907: PUSH
21908: LD_INT 4
21910: ST_TO_ADDR
// end ;
21911: PPOPN 1
21913: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21914: LD_EXP 57
21918: PUSH
21919: LD_EXP 84
21923: AND
21924: IFFALSE 22070
21926: GO 21928
21928: DISABLE
21929: LD_INT 0
21931: PPUSH
21932: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_OWVAR 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 2
21952: PUSH
21953: LD_INT 30
21955: PUSH
21956: LD_INT 0
21958: PUSH
21959: EMPTY
21960: LIST
21961: LIST
21962: PUSH
21963: LD_INT 30
21965: PUSH
21966: LD_INT 1
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: LIST
21977: PUSH
21978: EMPTY
21979: LIST
21980: LIST
21981: PPUSH
21982: CALL_OW 69
21986: ST_TO_ADDR
// if not depot then
21987: LD_VAR 0 1
21991: NOT
21992: IFFALSE 21996
// exit ;
21994: GO 22070
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
21996: LD_ADDR_VAR 0 2
22000: PUSH
22001: LD_VAR 0 1
22005: PUSH
22006: LD_INT 1
22008: PPUSH
22009: LD_VAR 0 1
22013: PPUSH
22014: CALL_OW 12
22018: ARRAY
22019: PPUSH
22020: CALL_OW 274
22024: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22025: LD_VAR 0 2
22029: PPUSH
22030: LD_INT 1
22032: PPUSH
22033: LD_INT 0
22035: PPUSH
22036: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22040: LD_VAR 0 2
22044: PPUSH
22045: LD_INT 2
22047: PPUSH
22048: LD_INT 0
22050: PPUSH
22051: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22055: LD_VAR 0 2
22059: PPUSH
22060: LD_INT 3
22062: PPUSH
22063: LD_INT 0
22065: PPUSH
22066: CALL_OW 277
// end ;
22070: PPOPN 2
22072: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22073: LD_EXP 57
22077: PUSH
22078: LD_EXP 85
22082: AND
22083: IFFALSE 22180
22085: GO 22087
22087: DISABLE
22088: LD_INT 0
22090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22091: LD_ADDR_VAR 0 1
22095: PUSH
22096: LD_INT 22
22098: PUSH
22099: LD_OWVAR 2
22103: PUSH
22104: EMPTY
22105: LIST
22106: LIST
22107: PUSH
22108: LD_INT 21
22110: PUSH
22111: LD_INT 1
22113: PUSH
22114: EMPTY
22115: LIST
22116: LIST
22117: PUSH
22118: LD_INT 3
22120: PUSH
22121: LD_INT 23
22123: PUSH
22124: LD_INT 0
22126: PUSH
22127: EMPTY
22128: LIST
22129: LIST
22130: PUSH
22131: EMPTY
22132: LIST
22133: LIST
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: LIST
22139: PPUSH
22140: CALL_OW 69
22144: ST_TO_ADDR
// if not tmp then
22145: LD_VAR 0 1
22149: NOT
22150: IFFALSE 22154
// exit ;
22152: GO 22180
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22154: LD_VAR 0 1
22158: PUSH
22159: LD_INT 1
22161: PPUSH
22162: LD_VAR 0 1
22166: PPUSH
22167: CALL_OW 12
22171: ARRAY
22172: PPUSH
22173: LD_INT 200
22175: PPUSH
22176: CALL_OW 234
// end ;
22180: PPOPN 1
22182: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22183: LD_EXP 57
22187: PUSH
22188: LD_EXP 86
22192: AND
22193: IFFALSE 22272
22195: GO 22197
22197: DISABLE
22198: LD_INT 0
22200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22201: LD_ADDR_VAR 0 1
22205: PUSH
22206: LD_INT 22
22208: PUSH
22209: LD_OWVAR 2
22213: PUSH
22214: EMPTY
22215: LIST
22216: LIST
22217: PUSH
22218: LD_INT 21
22220: PUSH
22221: LD_INT 2
22223: PUSH
22224: EMPTY
22225: LIST
22226: LIST
22227: PUSH
22228: EMPTY
22229: LIST
22230: LIST
22231: PPUSH
22232: CALL_OW 69
22236: ST_TO_ADDR
// if not tmp then
22237: LD_VAR 0 1
22241: NOT
22242: IFFALSE 22246
// exit ;
22244: GO 22272
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22246: LD_VAR 0 1
22250: PUSH
22251: LD_INT 1
22253: PPUSH
22254: LD_VAR 0 1
22258: PPUSH
22259: CALL_OW 12
22263: ARRAY
22264: PPUSH
22265: LD_INT 60
22267: PPUSH
22268: CALL_OW 234
// end ;
22272: PPOPN 1
22274: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22275: LD_EXP 57
22279: PUSH
22280: LD_EXP 87
22284: AND
22285: IFFALSE 22384
22287: GO 22289
22289: DISABLE
22290: LD_INT 0
22292: PPUSH
22293: PPUSH
// begin enable ;
22294: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22295: LD_ADDR_VAR 0 1
22299: PUSH
22300: LD_INT 22
22302: PUSH
22303: LD_OWVAR 2
22307: PUSH
22308: EMPTY
22309: LIST
22310: LIST
22311: PUSH
22312: LD_INT 61
22314: PUSH
22315: EMPTY
22316: LIST
22317: PUSH
22318: LD_INT 33
22320: PUSH
22321: LD_INT 2
22323: PUSH
22324: EMPTY
22325: LIST
22326: LIST
22327: PUSH
22328: EMPTY
22329: LIST
22330: LIST
22331: LIST
22332: PPUSH
22333: CALL_OW 69
22337: ST_TO_ADDR
// if not tmp then
22338: LD_VAR 0 1
22342: NOT
22343: IFFALSE 22347
// exit ;
22345: GO 22384
// for i in tmp do
22347: LD_ADDR_VAR 0 2
22351: PUSH
22352: LD_VAR 0 1
22356: PUSH
22357: FOR_IN
22358: IFFALSE 22382
// if IsControledBy ( i ) then
22360: LD_VAR 0 2
22364: PPUSH
22365: CALL_OW 312
22369: IFFALSE 22380
// ComUnlink ( i ) ;
22371: LD_VAR 0 2
22375: PPUSH
22376: CALL_OW 136
22380: GO 22357
22382: POP
22383: POP
// end ;
22384: PPOPN 2
22386: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22387: LD_EXP 57
22391: PUSH
22392: LD_EXP 88
22396: AND
22397: IFFALSE 22537
22399: GO 22401
22401: DISABLE
22402: LD_INT 0
22404: PPUSH
22405: PPUSH
// begin ToLua ( displayPowell(); ) ;
22406: LD_STRING displayPowell();
22408: PPUSH
22409: CALL_OW 559
// uc_side := 0 ;
22413: LD_ADDR_OWVAR 20
22417: PUSH
22418: LD_INT 0
22420: ST_TO_ADDR
// uc_nation := 2 ;
22421: LD_ADDR_OWVAR 21
22425: PUSH
22426: LD_INT 2
22428: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22429: LD_ADDR_OWVAR 37
22433: PUSH
22434: LD_INT 14
22436: ST_TO_ADDR
// vc_engine := engine_siberite ;
22437: LD_ADDR_OWVAR 39
22441: PUSH
22442: LD_INT 3
22444: ST_TO_ADDR
// vc_control := control_apeman ;
22445: LD_ADDR_OWVAR 38
22449: PUSH
22450: LD_INT 5
22452: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22453: LD_ADDR_OWVAR 40
22457: PUSH
22458: LD_INT 29
22460: ST_TO_ADDR
// un := CreateVehicle ;
22461: LD_ADDR_VAR 0 2
22465: PUSH
22466: CALL_OW 45
22470: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22471: LD_VAR 0 2
22475: PPUSH
22476: LD_INT 1
22478: PPUSH
22479: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22483: LD_INT 35
22485: PPUSH
22486: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22490: LD_VAR 0 2
22494: PPUSH
22495: LD_INT 22
22497: PUSH
22498: LD_OWVAR 2
22502: PUSH
22503: EMPTY
22504: LIST
22505: LIST
22506: PPUSH
22507: CALL_OW 69
22511: PPUSH
22512: LD_VAR 0 2
22516: PPUSH
22517: CALL_OW 74
22521: PPUSH
22522: CALL_OW 115
// until IsDead ( un ) ;
22526: LD_VAR 0 2
22530: PPUSH
22531: CALL_OW 301
22535: IFFALSE 22483
// end ;
22537: PPOPN 2
22539: END
// every 0 0$1 trigger StreamModeActive and sStu do
22540: LD_EXP 57
22544: PUSH
22545: LD_EXP 96
22549: AND
22550: IFFALSE 22566
22552: GO 22554
22554: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22555: LD_STRING displayStucuk();
22557: PPUSH
22558: CALL_OW 559
// ResetFog ;
22562: CALL_OW 335
// end ;
22566: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22567: LD_EXP 57
22571: PUSH
22572: LD_EXP 89
22576: AND
22577: IFFALSE 22718
22579: GO 22581
22581: DISABLE
22582: LD_INT 0
22584: PPUSH
22585: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22586: LD_ADDR_VAR 0 2
22590: PUSH
22591: LD_INT 22
22593: PUSH
22594: LD_OWVAR 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 21
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: EMPTY
22614: LIST
22615: LIST
22616: PPUSH
22617: CALL_OW 69
22621: ST_TO_ADDR
// if not tmp then
22622: LD_VAR 0 2
22626: NOT
22627: IFFALSE 22631
// exit ;
22629: GO 22718
// un := tmp [ rand ( 1 , tmp ) ] ;
22631: LD_ADDR_VAR 0 1
22635: PUSH
22636: LD_VAR 0 2
22640: PUSH
22641: LD_INT 1
22643: PPUSH
22644: LD_VAR 0 2
22648: PPUSH
22649: CALL_OW 12
22653: ARRAY
22654: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22655: LD_VAR 0 1
22659: PPUSH
22660: LD_INT 0
22662: PPUSH
22663: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22667: LD_VAR 0 1
22671: PPUSH
22672: LD_OWVAR 3
22676: PUSH
22677: LD_VAR 0 1
22681: DIFF
22682: PPUSH
22683: LD_VAR 0 1
22687: PPUSH
22688: CALL_OW 74
22692: PPUSH
22693: CALL_OW 115
// wait ( 0 0$20 ) ;
22697: LD_INT 700
22699: PPUSH
22700: CALL_OW 67
// SetSide ( un , your_side ) ;
22704: LD_VAR 0 1
22708: PPUSH
22709: LD_OWVAR 2
22713: PPUSH
22714: CALL_OW 235
// end ;
22718: PPOPN 2
22720: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22721: LD_EXP 57
22725: PUSH
22726: LD_EXP 90
22730: AND
22731: IFFALSE 22837
22733: GO 22735
22735: DISABLE
22736: LD_INT 0
22738: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22739: LD_ADDR_VAR 0 1
22743: PUSH
22744: LD_INT 22
22746: PUSH
22747: LD_OWVAR 2
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PUSH
22756: LD_INT 2
22758: PUSH
22759: LD_INT 30
22761: PUSH
22762: LD_INT 0
22764: PUSH
22765: EMPTY
22766: LIST
22767: LIST
22768: PUSH
22769: LD_INT 30
22771: PUSH
22772: LD_INT 1
22774: PUSH
22775: EMPTY
22776: LIST
22777: LIST
22778: PUSH
22779: EMPTY
22780: LIST
22781: LIST
22782: LIST
22783: PUSH
22784: EMPTY
22785: LIST
22786: LIST
22787: PPUSH
22788: CALL_OW 69
22792: ST_TO_ADDR
// if not depot then
22793: LD_VAR 0 1
22797: NOT
22798: IFFALSE 22802
// exit ;
22800: GO 22837
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22802: LD_VAR 0 1
22806: PUSH
22807: LD_INT 1
22809: ARRAY
22810: PPUSH
22811: CALL_OW 250
22815: PPUSH
22816: LD_VAR 0 1
22820: PUSH
22821: LD_INT 1
22823: ARRAY
22824: PPUSH
22825: CALL_OW 251
22829: PPUSH
22830: LD_INT 70
22832: PPUSH
22833: CALL_OW 495
// end ;
22837: PPOPN 1
22839: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22840: LD_EXP 57
22844: PUSH
22845: LD_EXP 91
22849: AND
22850: IFFALSE 23061
22852: GO 22854
22854: DISABLE
22855: LD_INT 0
22857: PPUSH
22858: PPUSH
22859: PPUSH
22860: PPUSH
22861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22862: LD_ADDR_VAR 0 5
22866: PUSH
22867: LD_INT 22
22869: PUSH
22870: LD_OWVAR 2
22874: PUSH
22875: EMPTY
22876: LIST
22877: LIST
22878: PUSH
22879: LD_INT 21
22881: PUSH
22882: LD_INT 1
22884: PUSH
22885: EMPTY
22886: LIST
22887: LIST
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PPUSH
22893: CALL_OW 69
22897: ST_TO_ADDR
// if not tmp then
22898: LD_VAR 0 5
22902: NOT
22903: IFFALSE 22907
// exit ;
22905: GO 23061
// for i in tmp do
22907: LD_ADDR_VAR 0 1
22911: PUSH
22912: LD_VAR 0 5
22916: PUSH
22917: FOR_IN
22918: IFFALSE 23059
// begin d := rand ( 0 , 5 ) ;
22920: LD_ADDR_VAR 0 4
22924: PUSH
22925: LD_INT 0
22927: PPUSH
22928: LD_INT 5
22930: PPUSH
22931: CALL_OW 12
22935: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
22936: LD_ADDR_VAR 0 2
22940: PUSH
22941: LD_VAR 0 1
22945: PPUSH
22946: CALL_OW 250
22950: PPUSH
22951: LD_VAR 0 4
22955: PPUSH
22956: LD_INT 3
22958: PPUSH
22959: LD_INT 12
22961: PPUSH
22962: CALL_OW 12
22966: PPUSH
22967: CALL_OW 272
22971: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
22972: LD_ADDR_VAR 0 3
22976: PUSH
22977: LD_VAR 0 1
22981: PPUSH
22982: CALL_OW 251
22986: PPUSH
22987: LD_VAR 0 4
22991: PPUSH
22992: LD_INT 3
22994: PPUSH
22995: LD_INT 12
22997: PPUSH
22998: CALL_OW 12
23002: PPUSH
23003: CALL_OW 273
23007: ST_TO_ADDR
// if ValidHex ( x , y ) then
23008: LD_VAR 0 2
23012: PPUSH
23013: LD_VAR 0 3
23017: PPUSH
23018: CALL_OW 488
23022: IFFALSE 23057
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23024: LD_VAR 0 1
23028: PPUSH
23029: LD_VAR 0 2
23033: PPUSH
23034: LD_VAR 0 3
23038: PPUSH
23039: LD_INT 3
23041: PPUSH
23042: LD_INT 6
23044: PPUSH
23045: CALL_OW 12
23049: PPUSH
23050: LD_INT 1
23052: PPUSH
23053: CALL_OW 483
// end ;
23057: GO 22917
23059: POP
23060: POP
// end ;
23061: PPOPN 5
23063: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23064: LD_EXP 57
23068: PUSH
23069: LD_EXP 92
23073: AND
23074: IFFALSE 23168
23076: GO 23078
23078: DISABLE
23079: LD_INT 0
23081: PPUSH
23082: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23083: LD_ADDR_VAR 0 2
23087: PUSH
23088: LD_INT 22
23090: PUSH
23091: LD_OWVAR 2
23095: PUSH
23096: EMPTY
23097: LIST
23098: LIST
23099: PUSH
23100: LD_INT 32
23102: PUSH
23103: LD_INT 1
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 21
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: EMPTY
23117: LIST
23118: LIST
23119: PUSH
23120: EMPTY
23121: LIST
23122: LIST
23123: LIST
23124: PPUSH
23125: CALL_OW 69
23129: ST_TO_ADDR
// if not tmp then
23130: LD_VAR 0 2
23134: NOT
23135: IFFALSE 23139
// exit ;
23137: GO 23168
// for i in tmp do
23139: LD_ADDR_VAR 0 1
23143: PUSH
23144: LD_VAR 0 2
23148: PUSH
23149: FOR_IN
23150: IFFALSE 23166
// SetFuel ( i , 0 ) ;
23152: LD_VAR 0 1
23156: PPUSH
23157: LD_INT 0
23159: PPUSH
23160: CALL_OW 240
23164: GO 23149
23166: POP
23167: POP
// end ;
23168: PPOPN 2
23170: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23171: LD_EXP 57
23175: PUSH
23176: LD_EXP 93
23180: AND
23181: IFFALSE 23247
23183: GO 23185
23185: DISABLE
23186: LD_INT 0
23188: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23189: LD_ADDR_VAR 0 1
23193: PUSH
23194: LD_INT 22
23196: PUSH
23197: LD_OWVAR 2
23201: PUSH
23202: EMPTY
23203: LIST
23204: LIST
23205: PUSH
23206: LD_INT 30
23208: PUSH
23209: LD_INT 29
23211: PUSH
23212: EMPTY
23213: LIST
23214: LIST
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 69
23224: ST_TO_ADDR
// if not tmp then
23225: LD_VAR 0 1
23229: NOT
23230: IFFALSE 23234
// exit ;
23232: GO 23247
// DestroyUnit ( tmp [ 1 ] ) ;
23234: LD_VAR 0 1
23238: PUSH
23239: LD_INT 1
23241: ARRAY
23242: PPUSH
23243: CALL_OW 65
// end ;
23247: PPOPN 1
23249: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23250: LD_EXP 57
23254: PUSH
23255: LD_EXP 95
23259: AND
23260: IFFALSE 23389
23262: GO 23264
23264: DISABLE
23265: LD_INT 0
23267: PPUSH
// begin uc_side := 0 ;
23268: LD_ADDR_OWVAR 20
23272: PUSH
23273: LD_INT 0
23275: ST_TO_ADDR
// uc_nation := nation_arabian ;
23276: LD_ADDR_OWVAR 21
23280: PUSH
23281: LD_INT 2
23283: ST_TO_ADDR
// hc_gallery :=  ;
23284: LD_ADDR_OWVAR 33
23288: PUSH
23289: LD_STRING 
23291: ST_TO_ADDR
// hc_name :=  ;
23292: LD_ADDR_OWVAR 26
23296: PUSH
23297: LD_STRING 
23299: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23300: LD_INT 1
23302: PPUSH
23303: LD_INT 11
23305: PPUSH
23306: LD_INT 10
23308: PPUSH
23309: CALL_OW 380
// un := CreateHuman ;
23313: LD_ADDR_VAR 0 1
23317: PUSH
23318: CALL_OW 44
23322: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23323: LD_VAR 0 1
23327: PPUSH
23328: LD_INT 1
23330: PPUSH
23331: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23335: LD_INT 35
23337: PPUSH
23338: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23342: LD_VAR 0 1
23346: PPUSH
23347: LD_INT 22
23349: PUSH
23350: LD_OWVAR 2
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: PPUSH
23364: LD_VAR 0 1
23368: PPUSH
23369: CALL_OW 74
23373: PPUSH
23374: CALL_OW 115
// until IsDead ( un ) ;
23378: LD_VAR 0 1
23382: PPUSH
23383: CALL_OW 301
23387: IFFALSE 23335
// end ;
23389: PPOPN 1
23391: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23392: LD_EXP 57
23396: PUSH
23397: LD_EXP 97
23401: AND
23402: IFFALSE 23414
23404: GO 23406
23406: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23407: LD_STRING earthquake(getX(game), 0, 32)
23409: PPUSH
23410: CALL_OW 559
23414: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23415: LD_EXP 57
23419: PUSH
23420: LD_EXP 98
23424: AND
23425: IFFALSE 23516
23427: GO 23429
23429: DISABLE
23430: LD_INT 0
23432: PPUSH
// begin enable ;
23433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23434: LD_ADDR_VAR 0 1
23438: PUSH
23439: LD_INT 22
23441: PUSH
23442: LD_OWVAR 2
23446: PUSH
23447: EMPTY
23448: LIST
23449: LIST
23450: PUSH
23451: LD_INT 21
23453: PUSH
23454: LD_INT 2
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 33
23463: PUSH
23464: LD_INT 3
23466: PUSH
23467: EMPTY
23468: LIST
23469: LIST
23470: PUSH
23471: EMPTY
23472: LIST
23473: LIST
23474: LIST
23475: PPUSH
23476: CALL_OW 69
23480: ST_TO_ADDR
// if not tmp then
23481: LD_VAR 0 1
23485: NOT
23486: IFFALSE 23490
// exit ;
23488: GO 23516
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23490: LD_VAR 0 1
23494: PUSH
23495: LD_INT 1
23497: PPUSH
23498: LD_VAR 0 1
23502: PPUSH
23503: CALL_OW 12
23507: ARRAY
23508: PPUSH
23509: LD_INT 1
23511: PPUSH
23512: CALL_OW 234
// end ;
23516: PPOPN 1
23518: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23519: LD_EXP 57
23523: PUSH
23524: LD_EXP 99
23528: AND
23529: IFFALSE 23670
23531: GO 23533
23533: DISABLE
23534: LD_INT 0
23536: PPUSH
23537: PPUSH
23538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23539: LD_ADDR_VAR 0 3
23543: PUSH
23544: LD_INT 22
23546: PUSH
23547: LD_OWVAR 2
23551: PUSH
23552: EMPTY
23553: LIST
23554: LIST
23555: PUSH
23556: LD_INT 25
23558: PUSH
23559: LD_INT 1
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: PPUSH
23570: CALL_OW 69
23574: ST_TO_ADDR
// if not tmp then
23575: LD_VAR 0 3
23579: NOT
23580: IFFALSE 23584
// exit ;
23582: GO 23670
// un := tmp [ rand ( 1 , tmp ) ] ;
23584: LD_ADDR_VAR 0 2
23588: PUSH
23589: LD_VAR 0 3
23593: PUSH
23594: LD_INT 1
23596: PPUSH
23597: LD_VAR 0 3
23601: PPUSH
23602: CALL_OW 12
23606: ARRAY
23607: ST_TO_ADDR
// if Crawls ( un ) then
23608: LD_VAR 0 2
23612: PPUSH
23613: CALL_OW 318
23617: IFFALSE 23628
// ComWalk ( un ) ;
23619: LD_VAR 0 2
23623: PPUSH
23624: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23628: LD_VAR 0 2
23632: PPUSH
23633: LD_INT 9
23635: PPUSH
23636: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23640: LD_INT 28
23642: PPUSH
23643: LD_OWVAR 2
23647: PPUSH
23648: LD_INT 2
23650: PPUSH
23651: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23655: LD_INT 29
23657: PPUSH
23658: LD_OWVAR 2
23662: PPUSH
23663: LD_INT 2
23665: PPUSH
23666: CALL_OW 322
// end ;
23670: PPOPN 3
23672: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23673: LD_EXP 57
23677: PUSH
23678: LD_EXP 100
23682: AND
23683: IFFALSE 23794
23685: GO 23687
23687: DISABLE
23688: LD_INT 0
23690: PPUSH
23691: PPUSH
23692: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23693: LD_ADDR_VAR 0 3
23697: PUSH
23698: LD_INT 22
23700: PUSH
23701: LD_OWVAR 2
23705: PUSH
23706: EMPTY
23707: LIST
23708: LIST
23709: PUSH
23710: LD_INT 25
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: PPUSH
23724: CALL_OW 69
23728: ST_TO_ADDR
// if not tmp then
23729: LD_VAR 0 3
23733: NOT
23734: IFFALSE 23738
// exit ;
23736: GO 23794
// un := tmp [ rand ( 1 , tmp ) ] ;
23738: LD_ADDR_VAR 0 2
23742: PUSH
23743: LD_VAR 0 3
23747: PUSH
23748: LD_INT 1
23750: PPUSH
23751: LD_VAR 0 3
23755: PPUSH
23756: CALL_OW 12
23760: ARRAY
23761: ST_TO_ADDR
// if Crawls ( un ) then
23762: LD_VAR 0 2
23766: PPUSH
23767: CALL_OW 318
23771: IFFALSE 23782
// ComWalk ( un ) ;
23773: LD_VAR 0 2
23777: PPUSH
23778: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23782: LD_VAR 0 2
23786: PPUSH
23787: LD_INT 8
23789: PPUSH
23790: CALL_OW 336
// end ;
23794: PPOPN 3
23796: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23797: LD_EXP 57
23801: PUSH
23802: LD_EXP 101
23806: AND
23807: IFFALSE 23951
23809: GO 23811
23811: DISABLE
23812: LD_INT 0
23814: PPUSH
23815: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23816: LD_ADDR_VAR 0 2
23820: PUSH
23821: LD_INT 22
23823: PUSH
23824: LD_OWVAR 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 21
23835: PUSH
23836: LD_INT 2
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: LD_INT 2
23845: PUSH
23846: LD_INT 34
23848: PUSH
23849: LD_INT 12
23851: PUSH
23852: EMPTY
23853: LIST
23854: LIST
23855: PUSH
23856: LD_INT 34
23858: PUSH
23859: LD_INT 51
23861: PUSH
23862: EMPTY
23863: LIST
23864: LIST
23865: PUSH
23866: LD_INT 34
23868: PUSH
23869: LD_INT 32
23871: PUSH
23872: EMPTY
23873: LIST
23874: LIST
23875: PUSH
23876: EMPTY
23877: LIST
23878: LIST
23879: LIST
23880: LIST
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: LIST
23886: PPUSH
23887: CALL_OW 69
23891: ST_TO_ADDR
// if not tmp then
23892: LD_VAR 0 2
23896: NOT
23897: IFFALSE 23901
// exit ;
23899: GO 23951
// for i in tmp do
23901: LD_ADDR_VAR 0 1
23905: PUSH
23906: LD_VAR 0 2
23910: PUSH
23911: FOR_IN
23912: IFFALSE 23949
// if GetCargo ( i , mat_artifact ) = 0 then
23914: LD_VAR 0 1
23918: PPUSH
23919: LD_INT 4
23921: PPUSH
23922: CALL_OW 289
23926: PUSH
23927: LD_INT 0
23929: EQUAL
23930: IFFALSE 23947
// SetCargo ( i , mat_siberit , 100 ) ;
23932: LD_VAR 0 1
23936: PPUSH
23937: LD_INT 3
23939: PPUSH
23940: LD_INT 100
23942: PPUSH
23943: CALL_OW 290
23947: GO 23911
23949: POP
23950: POP
// end ;
23951: PPOPN 2
23953: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
23954: LD_EXP 57
23958: PUSH
23959: LD_EXP 102
23963: AND
23964: IFFALSE 24147
23966: GO 23968
23968: DISABLE
23969: LD_INT 0
23971: PPUSH
23972: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
23973: LD_ADDR_VAR 0 2
23977: PUSH
23978: LD_INT 22
23980: PUSH
23981: LD_OWVAR 2
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: PPUSH
23990: CALL_OW 69
23994: ST_TO_ADDR
// if not tmp then
23995: LD_VAR 0 2
23999: NOT
24000: IFFALSE 24004
// exit ;
24002: GO 24147
// for i := 1 to 2 do
24004: LD_ADDR_VAR 0 1
24008: PUSH
24009: DOUBLE
24010: LD_INT 1
24012: DEC
24013: ST_TO_ADDR
24014: LD_INT 2
24016: PUSH
24017: FOR_TO
24018: IFFALSE 24145
// begin uc_side := your_side ;
24020: LD_ADDR_OWVAR 20
24024: PUSH
24025: LD_OWVAR 2
24029: ST_TO_ADDR
// uc_nation := nation_american ;
24030: LD_ADDR_OWVAR 21
24034: PUSH
24035: LD_INT 1
24037: ST_TO_ADDR
// vc_chassis := us_morphling ;
24038: LD_ADDR_OWVAR 37
24042: PUSH
24043: LD_INT 5
24045: ST_TO_ADDR
// vc_engine := engine_siberite ;
24046: LD_ADDR_OWVAR 39
24050: PUSH
24051: LD_INT 3
24053: ST_TO_ADDR
// vc_control := control_computer ;
24054: LD_ADDR_OWVAR 38
24058: PUSH
24059: LD_INT 3
24061: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24062: LD_ADDR_OWVAR 40
24066: PUSH
24067: LD_INT 10
24069: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24070: LD_VAR 0 2
24074: PUSH
24075: LD_INT 1
24077: ARRAY
24078: PPUSH
24079: CALL_OW 310
24083: NOT
24084: IFFALSE 24131
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24086: CALL_OW 45
24090: PPUSH
24091: LD_VAR 0 2
24095: PUSH
24096: LD_INT 1
24098: ARRAY
24099: PPUSH
24100: CALL_OW 250
24104: PPUSH
24105: LD_VAR 0 2
24109: PUSH
24110: LD_INT 1
24112: ARRAY
24113: PPUSH
24114: CALL_OW 251
24118: PPUSH
24119: LD_INT 12
24121: PPUSH
24122: LD_INT 1
24124: PPUSH
24125: CALL_OW 50
24129: GO 24143
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24131: CALL_OW 45
24135: PPUSH
24136: LD_INT 1
24138: PPUSH
24139: CALL_OW 51
// end ;
24143: GO 24017
24145: POP
24146: POP
// end ;
24147: PPOPN 2
24149: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24150: LD_EXP 57
24154: PUSH
24155: LD_EXP 103
24159: AND
24160: IFFALSE 24382
24162: GO 24164
24164: DISABLE
24165: LD_INT 0
24167: PPUSH
24168: PPUSH
24169: PPUSH
24170: PPUSH
24171: PPUSH
24172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24173: LD_ADDR_VAR 0 6
24177: PUSH
24178: LD_INT 22
24180: PUSH
24181: LD_OWVAR 2
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 21
24192: PUSH
24193: LD_INT 1
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 3
24202: PUSH
24203: LD_INT 23
24205: PUSH
24206: LD_INT 0
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PUSH
24213: EMPTY
24214: LIST
24215: LIST
24216: PUSH
24217: EMPTY
24218: LIST
24219: LIST
24220: LIST
24221: PPUSH
24222: CALL_OW 69
24226: ST_TO_ADDR
// if not tmp then
24227: LD_VAR 0 6
24231: NOT
24232: IFFALSE 24236
// exit ;
24234: GO 24382
// s1 := rand ( 1 , 4 ) ;
24236: LD_ADDR_VAR 0 2
24240: PUSH
24241: LD_INT 1
24243: PPUSH
24244: LD_INT 4
24246: PPUSH
24247: CALL_OW 12
24251: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24252: LD_ADDR_VAR 0 4
24256: PUSH
24257: LD_VAR 0 6
24261: PUSH
24262: LD_INT 1
24264: ARRAY
24265: PPUSH
24266: LD_VAR 0 2
24270: PPUSH
24271: CALL_OW 259
24275: ST_TO_ADDR
// if s1 = 1 then
24276: LD_VAR 0 2
24280: PUSH
24281: LD_INT 1
24283: EQUAL
24284: IFFALSE 24304
// s2 := rand ( 2 , 4 ) else
24286: LD_ADDR_VAR 0 3
24290: PUSH
24291: LD_INT 2
24293: PPUSH
24294: LD_INT 4
24296: PPUSH
24297: CALL_OW 12
24301: ST_TO_ADDR
24302: GO 24312
// s2 := 1 ;
24304: LD_ADDR_VAR 0 3
24308: PUSH
24309: LD_INT 1
24311: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24312: LD_ADDR_VAR 0 5
24316: PUSH
24317: LD_VAR 0 6
24321: PUSH
24322: LD_INT 1
24324: ARRAY
24325: PPUSH
24326: LD_VAR 0 3
24330: PPUSH
24331: CALL_OW 259
24335: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24336: LD_VAR 0 6
24340: PUSH
24341: LD_INT 1
24343: ARRAY
24344: PPUSH
24345: LD_VAR 0 2
24349: PPUSH
24350: LD_VAR 0 5
24354: PPUSH
24355: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24359: LD_VAR 0 6
24363: PUSH
24364: LD_INT 1
24366: ARRAY
24367: PPUSH
24368: LD_VAR 0 3
24372: PPUSH
24373: LD_VAR 0 4
24377: PPUSH
24378: CALL_OW 237
// end ;
24382: PPOPN 6
24384: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24385: LD_EXP 57
24389: PUSH
24390: LD_EXP 104
24394: AND
24395: IFFALSE 24474
24397: GO 24399
24399: DISABLE
24400: LD_INT 0
24402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24403: LD_ADDR_VAR 0 1
24407: PUSH
24408: LD_INT 22
24410: PUSH
24411: LD_OWVAR 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 30
24422: PUSH
24423: LD_INT 3
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PPUSH
24434: CALL_OW 69
24438: ST_TO_ADDR
// if not tmp then
24439: LD_VAR 0 1
24443: NOT
24444: IFFALSE 24448
// exit ;
24446: GO 24474
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24448: LD_VAR 0 1
24452: PUSH
24453: LD_INT 1
24455: PPUSH
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 12
24465: ARRAY
24466: PPUSH
24467: LD_INT 1
24469: PPUSH
24470: CALL_OW 234
// end ;
24474: PPOPN 1
24476: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24477: LD_EXP 57
24481: PUSH
24482: LD_EXP 105
24486: AND
24487: IFFALSE 24599
24489: GO 24491
24491: DISABLE
24492: LD_INT 0
24494: PPUSH
24495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24496: LD_ADDR_VAR 0 2
24500: PUSH
24501: LD_INT 22
24503: PUSH
24504: LD_OWVAR 2
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 2
24515: PUSH
24516: LD_INT 30
24518: PUSH
24519: LD_INT 27
24521: PUSH
24522: EMPTY
24523: LIST
24524: LIST
24525: PUSH
24526: LD_INT 30
24528: PUSH
24529: LD_INT 26
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: LD_INT 30
24538: PUSH
24539: LD_INT 28
24541: PUSH
24542: EMPTY
24543: LIST
24544: LIST
24545: PUSH
24546: EMPTY
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: PUSH
24552: EMPTY
24553: LIST
24554: LIST
24555: PPUSH
24556: CALL_OW 69
24560: ST_TO_ADDR
// if not tmp then
24561: LD_VAR 0 2
24565: NOT
24566: IFFALSE 24570
// exit ;
24568: GO 24599
// for i in tmp do
24570: LD_ADDR_VAR 0 1
24574: PUSH
24575: LD_VAR 0 2
24579: PUSH
24580: FOR_IN
24581: IFFALSE 24597
// SetLives ( i , 1 ) ;
24583: LD_VAR 0 1
24587: PPUSH
24588: LD_INT 1
24590: PPUSH
24591: CALL_OW 234
24595: GO 24580
24597: POP
24598: POP
// end ;
24599: PPOPN 2
24601: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24602: LD_EXP 57
24606: PUSH
24607: LD_EXP 106
24611: AND
24612: IFFALSE 24886
24614: GO 24616
24616: DISABLE
24617: LD_INT 0
24619: PPUSH
24620: PPUSH
24621: PPUSH
// begin i := rand ( 1 , 7 ) ;
24622: LD_ADDR_VAR 0 1
24626: PUSH
24627: LD_INT 1
24629: PPUSH
24630: LD_INT 7
24632: PPUSH
24633: CALL_OW 12
24637: ST_TO_ADDR
// case i of 1 :
24638: LD_VAR 0 1
24642: PUSH
24643: LD_INT 1
24645: DOUBLE
24646: EQUAL
24647: IFTRUE 24651
24649: GO 24661
24651: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24652: LD_STRING earthquake(getX(game), 0, 32)
24654: PPUSH
24655: CALL_OW 559
24659: GO 24886
24661: LD_INT 2
24663: DOUBLE
24664: EQUAL
24665: IFTRUE 24669
24667: GO 24683
24669: POP
// begin ToLua ( displayStucuk(); ) ;
24670: LD_STRING displayStucuk();
24672: PPUSH
24673: CALL_OW 559
// ResetFog ;
24677: CALL_OW 335
// end ; 3 :
24681: GO 24886
24683: LD_INT 3
24685: DOUBLE
24686: EQUAL
24687: IFTRUE 24691
24689: GO 24795
24691: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24692: LD_ADDR_VAR 0 2
24696: PUSH
24697: LD_INT 22
24699: PUSH
24700: LD_OWVAR 2
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: PUSH
24709: LD_INT 25
24711: PUSH
24712: LD_INT 1
24714: PUSH
24715: EMPTY
24716: LIST
24717: LIST
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PPUSH
24723: CALL_OW 69
24727: ST_TO_ADDR
// if not tmp then
24728: LD_VAR 0 2
24732: NOT
24733: IFFALSE 24737
// exit ;
24735: GO 24886
// un := tmp [ rand ( 1 , tmp ) ] ;
24737: LD_ADDR_VAR 0 3
24741: PUSH
24742: LD_VAR 0 2
24746: PUSH
24747: LD_INT 1
24749: PPUSH
24750: LD_VAR 0 2
24754: PPUSH
24755: CALL_OW 12
24759: ARRAY
24760: ST_TO_ADDR
// if Crawls ( un ) then
24761: LD_VAR 0 3
24765: PPUSH
24766: CALL_OW 318
24770: IFFALSE 24781
// ComWalk ( un ) ;
24772: LD_VAR 0 3
24776: PPUSH
24777: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24781: LD_VAR 0 3
24785: PPUSH
24786: LD_INT 8
24788: PPUSH
24789: CALL_OW 336
// end ; 4 :
24793: GO 24886
24795: LD_INT 4
24797: DOUBLE
24798: EQUAL
24799: IFTRUE 24803
24801: GO 24864
24803: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24804: LD_ADDR_VAR 0 2
24808: PUSH
24809: LD_INT 22
24811: PUSH
24812: LD_OWVAR 2
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 30
24823: PUSH
24824: LD_INT 29
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: ST_TO_ADDR
// if not tmp then
24840: LD_VAR 0 2
24844: NOT
24845: IFFALSE 24849
// exit ;
24847: GO 24886
// DestroyUnit ( tmp [ 1 ] ) ;
24849: LD_VAR 0 2
24853: PUSH
24854: LD_INT 1
24856: ARRAY
24857: PPUSH
24858: CALL_OW 65
// end ; 5 .. 7 :
24862: GO 24886
24864: LD_INT 5
24866: DOUBLE
24867: GREATEREQUAL
24868: IFFALSE 24876
24870: LD_INT 7
24872: DOUBLE
24873: LESSEQUAL
24874: IFTRUE 24878
24876: GO 24885
24878: POP
// StreamSibBomb ; end ;
24879: CALL 21136 0 0
24883: GO 24886
24885: POP
// end ;
24886: PPOPN 3
24888: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24889: LD_EXP 57
24893: PUSH
24894: LD_EXP 107
24898: AND
24899: IFFALSE 25055
24901: GO 24903
24903: DISABLE
24904: LD_INT 0
24906: PPUSH
24907: PPUSH
24908: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24909: LD_ADDR_VAR 0 2
24913: PUSH
24914: LD_INT 81
24916: PUSH
24917: LD_OWVAR 2
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 21
24931: PUSH
24932: LD_INT 1
24934: PUSH
24935: EMPTY
24936: LIST
24937: LIST
24938: PUSH
24939: LD_INT 21
24941: PUSH
24942: LD_INT 2
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: EMPTY
24950: LIST
24951: LIST
24952: LIST
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PPUSH
24958: CALL_OW 69
24962: ST_TO_ADDR
// if not tmp then
24963: LD_VAR 0 2
24967: NOT
24968: IFFALSE 24972
// exit ;
24970: GO 25055
// p := 0 ;
24972: LD_ADDR_VAR 0 3
24976: PUSH
24977: LD_INT 0
24979: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
24980: LD_INT 35
24982: PPUSH
24983: CALL_OW 67
// p := p + 1 ;
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_VAR 0 3
24996: PUSH
24997: LD_INT 1
24999: PLUS
25000: ST_TO_ADDR
// for i in tmp do
25001: LD_ADDR_VAR 0 1
25005: PUSH
25006: LD_VAR 0 2
25010: PUSH
25011: FOR_IN
25012: IFFALSE 25043
// if GetLives ( i ) < 1000 then
25014: LD_VAR 0 1
25018: PPUSH
25019: CALL_OW 256
25023: PUSH
25024: LD_INT 1000
25026: LESS
25027: IFFALSE 25041
// SetLives ( i , 1000 ) ;
25029: LD_VAR 0 1
25033: PPUSH
25034: LD_INT 1000
25036: PPUSH
25037: CALL_OW 234
25041: GO 25011
25043: POP
25044: POP
// until p > 20 ;
25045: LD_VAR 0 3
25049: PUSH
25050: LD_INT 20
25052: GREATER
25053: IFFALSE 24980
// end ;
25055: PPOPN 3
25057: END
// every 0 0$1 trigger StreamModeActive and sTime do
25058: LD_EXP 57
25062: PUSH
25063: LD_EXP 108
25067: AND
25068: IFFALSE 25103
25070: GO 25072
25072: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25073: LD_INT 28
25075: PPUSH
25076: LD_OWVAR 2
25080: PPUSH
25081: LD_INT 2
25083: PPUSH
25084: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25088: LD_INT 30
25090: PPUSH
25091: LD_OWVAR 2
25095: PPUSH
25096: LD_INT 2
25098: PPUSH
25099: CALL_OW 322
// end ;
25103: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25104: LD_EXP 57
25108: PUSH
25109: LD_EXP 109
25113: AND
25114: IFFALSE 25235
25116: GO 25118
25118: DISABLE
25119: LD_INT 0
25121: PPUSH
25122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25123: LD_ADDR_VAR 0 2
25127: PUSH
25128: LD_INT 22
25130: PUSH
25131: LD_OWVAR 2
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 21
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 3
25152: PUSH
25153: LD_INT 23
25155: PUSH
25156: LD_INT 0
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: EMPTY
25164: LIST
25165: LIST
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: LIST
25171: PPUSH
25172: CALL_OW 69
25176: ST_TO_ADDR
// if not tmp then
25177: LD_VAR 0 2
25181: NOT
25182: IFFALSE 25186
// exit ;
25184: GO 25235
// for i in tmp do
25186: LD_ADDR_VAR 0 1
25190: PUSH
25191: LD_VAR 0 2
25195: PUSH
25196: FOR_IN
25197: IFFALSE 25233
// begin if Crawls ( i ) then
25199: LD_VAR 0 1
25203: PPUSH
25204: CALL_OW 318
25208: IFFALSE 25219
// ComWalk ( i ) ;
25210: LD_VAR 0 1
25214: PPUSH
25215: CALL_OW 138
// SetClass ( i , 2 ) ;
25219: LD_VAR 0 1
25223: PPUSH
25224: LD_INT 2
25226: PPUSH
25227: CALL_OW 336
// end ;
25231: GO 25196
25233: POP
25234: POP
// end ;
25235: PPOPN 2
25237: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25238: LD_EXP 57
25242: PUSH
25243: LD_EXP 110
25247: AND
25248: IFFALSE 25529
25250: GO 25252
25252: DISABLE
25253: LD_INT 0
25255: PPUSH
25256: PPUSH
25257: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25258: LD_OWVAR 2
25262: PPUSH
25263: LD_INT 9
25265: PPUSH
25266: LD_INT 1
25268: PPUSH
25269: LD_INT 1
25271: PPUSH
25272: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25276: LD_INT 9
25278: PPUSH
25279: LD_OWVAR 2
25283: PPUSH
25284: CALL_OW 343
// uc_side := 9 ;
25288: LD_ADDR_OWVAR 20
25292: PUSH
25293: LD_INT 9
25295: ST_TO_ADDR
// uc_nation := 2 ;
25296: LD_ADDR_OWVAR 21
25300: PUSH
25301: LD_INT 2
25303: ST_TO_ADDR
// hc_name := Dark Warrior ;
25304: LD_ADDR_OWVAR 26
25308: PUSH
25309: LD_STRING Dark Warrior
25311: ST_TO_ADDR
// hc_gallery :=  ;
25312: LD_ADDR_OWVAR 33
25316: PUSH
25317: LD_STRING 
25319: ST_TO_ADDR
// hc_noskilllimit := true ;
25320: LD_ADDR_OWVAR 76
25324: PUSH
25325: LD_INT 1
25327: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25328: LD_ADDR_OWVAR 31
25332: PUSH
25333: LD_INT 30
25335: PUSH
25336: LD_INT 30
25338: PUSH
25339: LD_INT 30
25341: PUSH
25342: LD_INT 30
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: LIST
25349: LIST
25350: ST_TO_ADDR
// un := CreateHuman ;
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: CALL_OW 44
25360: ST_TO_ADDR
// hc_noskilllimit := false ;
25361: LD_ADDR_OWVAR 76
25365: PUSH
25366: LD_INT 0
25368: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25369: LD_VAR 0 3
25373: PPUSH
25374: LD_INT 1
25376: PPUSH
25377: CALL_OW 51
// p := 0 ;
25381: LD_ADDR_VAR 0 2
25385: PUSH
25386: LD_INT 0
25388: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25389: LD_INT 35
25391: PPUSH
25392: CALL_OW 67
// p := p + 1 ;
25396: LD_ADDR_VAR 0 2
25400: PUSH
25401: LD_VAR 0 2
25405: PUSH
25406: LD_INT 1
25408: PLUS
25409: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25410: LD_VAR 0 3
25414: PPUSH
25415: CALL_OW 256
25419: PUSH
25420: LD_INT 1000
25422: LESS
25423: IFFALSE 25437
// SetLives ( un , 1000 ) ;
25425: LD_VAR 0 3
25429: PPUSH
25430: LD_INT 1000
25432: PPUSH
25433: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25437: LD_VAR 0 3
25441: PPUSH
25442: LD_INT 81
25444: PUSH
25445: LD_OWVAR 2
25449: PUSH
25450: EMPTY
25451: LIST
25452: LIST
25453: PUSH
25454: LD_INT 91
25456: PUSH
25457: LD_VAR 0 3
25461: PUSH
25462: LD_INT 30
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PPUSH
25474: CALL_OW 69
25478: PPUSH
25479: LD_VAR 0 3
25483: PPUSH
25484: CALL_OW 74
25488: PPUSH
25489: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
25493: LD_VAR 0 2
25497: PUSH
25498: LD_INT 60
25500: GREATER
25501: PUSH
25502: LD_VAR 0 3
25506: PPUSH
25507: CALL_OW 301
25511: OR
25512: IFFALSE 25389
// if un then
25514: LD_VAR 0 3
25518: IFFALSE 25529
// RemoveUnit ( un ) ;
25520: LD_VAR 0 3
25524: PPUSH
25525: CALL_OW 64
// end ;
25529: PPOPN 3
25531: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25532: LD_INT 0
25534: PPUSH
// case cmd of 301 :
25535: LD_VAR 0 1
25539: PUSH
25540: LD_INT 301
25542: DOUBLE
25543: EQUAL
25544: IFTRUE 25548
25546: GO 25580
25548: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25549: LD_VAR 0 6
25553: PPUSH
25554: LD_VAR 0 7
25558: PPUSH
25559: LD_VAR 0 8
25563: PPUSH
25564: LD_VAR 0 4
25568: PPUSH
25569: LD_VAR 0 5
25573: PPUSH
25574: CALL 26781 0 5
25578: GO 25701
25580: LD_INT 302
25582: DOUBLE
25583: EQUAL
25584: IFTRUE 25588
25586: GO 25625
25588: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25589: LD_VAR 0 6
25593: PPUSH
25594: LD_VAR 0 7
25598: PPUSH
25599: LD_VAR 0 8
25603: PPUSH
25604: LD_VAR 0 9
25608: PPUSH
25609: LD_VAR 0 4
25613: PPUSH
25614: LD_VAR 0 5
25618: PPUSH
25619: CALL 26872 0 6
25623: GO 25701
25625: LD_INT 303
25627: DOUBLE
25628: EQUAL
25629: IFTRUE 25633
25631: GO 25670
25633: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25634: LD_VAR 0 6
25638: PPUSH
25639: LD_VAR 0 7
25643: PPUSH
25644: LD_VAR 0 8
25648: PPUSH
25649: LD_VAR 0 9
25653: PPUSH
25654: LD_VAR 0 4
25658: PPUSH
25659: LD_VAR 0 5
25663: PPUSH
25664: CALL 25706 0 6
25668: GO 25701
25670: LD_INT 304
25672: DOUBLE
25673: EQUAL
25674: IFTRUE 25678
25676: GO 25700
25678: POP
// hHackTeleport ( unit , x , y ) ; end ;
25679: LD_VAR 0 2
25683: PPUSH
25684: LD_VAR 0 4
25688: PPUSH
25689: LD_VAR 0 5
25693: PPUSH
25694: CALL 27465 0 3
25698: GO 25701
25700: POP
// end ;
25701: LD_VAR 0 12
25705: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25710: LD_VAR 0 1
25714: PUSH
25715: LD_INT 1
25717: LESS
25718: PUSH
25719: LD_VAR 0 1
25723: PUSH
25724: LD_INT 3
25726: GREATER
25727: OR
25728: PUSH
25729: LD_VAR 0 5
25733: PPUSH
25734: LD_VAR 0 6
25738: PPUSH
25739: CALL_OW 428
25743: OR
25744: IFFALSE 25748
// exit ;
25746: GO 26468
// uc_side := your_side ;
25748: LD_ADDR_OWVAR 20
25752: PUSH
25753: LD_OWVAR 2
25757: ST_TO_ADDR
// uc_nation := nation ;
25758: LD_ADDR_OWVAR 21
25762: PUSH
25763: LD_VAR 0 1
25767: ST_TO_ADDR
// bc_level = 1 ;
25768: LD_ADDR_OWVAR 43
25772: PUSH
25773: LD_INT 1
25775: ST_TO_ADDR
// case btype of 1 :
25776: LD_VAR 0 2
25780: PUSH
25781: LD_INT 1
25783: DOUBLE
25784: EQUAL
25785: IFTRUE 25789
25787: GO 25800
25789: POP
// bc_type := b_depot ; 2 :
25790: LD_ADDR_OWVAR 42
25794: PUSH
25795: LD_INT 0
25797: ST_TO_ADDR
25798: GO 26412
25800: LD_INT 2
25802: DOUBLE
25803: EQUAL
25804: IFTRUE 25808
25806: GO 25819
25808: POP
// bc_type := b_warehouse ; 3 :
25809: LD_ADDR_OWVAR 42
25813: PUSH
25814: LD_INT 1
25816: ST_TO_ADDR
25817: GO 26412
25819: LD_INT 3
25821: DOUBLE
25822: EQUAL
25823: IFTRUE 25827
25825: GO 25838
25827: POP
// bc_type := b_lab ; 4 .. 9 :
25828: LD_ADDR_OWVAR 42
25832: PUSH
25833: LD_INT 6
25835: ST_TO_ADDR
25836: GO 26412
25838: LD_INT 4
25840: DOUBLE
25841: GREATEREQUAL
25842: IFFALSE 25850
25844: LD_INT 9
25846: DOUBLE
25847: LESSEQUAL
25848: IFTRUE 25852
25850: GO 25904
25852: POP
// begin bc_type := b_lab_half ;
25853: LD_ADDR_OWVAR 42
25857: PUSH
25858: LD_INT 7
25860: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
25861: LD_ADDR_OWVAR 44
25865: PUSH
25866: LD_INT 10
25868: PUSH
25869: LD_INT 11
25871: PUSH
25872: LD_INT 12
25874: PUSH
25875: LD_INT 15
25877: PUSH
25878: LD_INT 14
25880: PUSH
25881: LD_INT 13
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: PUSH
25892: LD_VAR 0 2
25896: PUSH
25897: LD_INT 3
25899: MINUS
25900: ARRAY
25901: ST_TO_ADDR
// end ; 10 .. 13 :
25902: GO 26412
25904: LD_INT 10
25906: DOUBLE
25907: GREATEREQUAL
25908: IFFALSE 25916
25910: LD_INT 13
25912: DOUBLE
25913: LESSEQUAL
25914: IFTRUE 25918
25916: GO 25995
25918: POP
// begin bc_type := b_lab_full ;
25919: LD_ADDR_OWVAR 42
25923: PUSH
25924: LD_INT 8
25926: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
25927: LD_ADDR_OWVAR 44
25931: PUSH
25932: LD_INT 10
25934: PUSH
25935: LD_INT 12
25937: PUSH
25938: LD_INT 14
25940: PUSH
25941: LD_INT 13
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: PUSH
25950: LD_VAR 0 2
25954: PUSH
25955: LD_INT 9
25957: MINUS
25958: ARRAY
25959: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
25960: LD_ADDR_OWVAR 45
25964: PUSH
25965: LD_INT 11
25967: PUSH
25968: LD_INT 15
25970: PUSH
25971: LD_INT 12
25973: PUSH
25974: LD_INT 15
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: LIST
25981: LIST
25982: PUSH
25983: LD_VAR 0 2
25987: PUSH
25988: LD_INT 9
25990: MINUS
25991: ARRAY
25992: ST_TO_ADDR
// end ; 14 :
25993: GO 26412
25995: LD_INT 14
25997: DOUBLE
25998: EQUAL
25999: IFTRUE 26003
26001: GO 26014
26003: POP
// bc_type := b_workshop ; 15 :
26004: LD_ADDR_OWVAR 42
26008: PUSH
26009: LD_INT 2
26011: ST_TO_ADDR
26012: GO 26412
26014: LD_INT 15
26016: DOUBLE
26017: EQUAL
26018: IFTRUE 26022
26020: GO 26033
26022: POP
// bc_type := b_factory ; 16 :
26023: LD_ADDR_OWVAR 42
26027: PUSH
26028: LD_INT 3
26030: ST_TO_ADDR
26031: GO 26412
26033: LD_INT 16
26035: DOUBLE
26036: EQUAL
26037: IFTRUE 26041
26039: GO 26052
26041: POP
// bc_type := b_ext_gun ; 17 :
26042: LD_ADDR_OWVAR 42
26046: PUSH
26047: LD_INT 17
26049: ST_TO_ADDR
26050: GO 26412
26052: LD_INT 17
26054: DOUBLE
26055: EQUAL
26056: IFTRUE 26060
26058: GO 26088
26060: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26061: LD_ADDR_OWVAR 42
26065: PUSH
26066: LD_INT 19
26068: PUSH
26069: LD_INT 23
26071: PUSH
26072: LD_INT 19
26074: PUSH
26075: EMPTY
26076: LIST
26077: LIST
26078: LIST
26079: PUSH
26080: LD_VAR 0 1
26084: ARRAY
26085: ST_TO_ADDR
26086: GO 26412
26088: LD_INT 18
26090: DOUBLE
26091: EQUAL
26092: IFTRUE 26096
26094: GO 26107
26096: POP
// bc_type := b_ext_radar ; 19 :
26097: LD_ADDR_OWVAR 42
26101: PUSH
26102: LD_INT 20
26104: ST_TO_ADDR
26105: GO 26412
26107: LD_INT 19
26109: DOUBLE
26110: EQUAL
26111: IFTRUE 26115
26113: GO 26126
26115: POP
// bc_type := b_ext_radio ; 20 :
26116: LD_ADDR_OWVAR 42
26120: PUSH
26121: LD_INT 22
26123: ST_TO_ADDR
26124: GO 26412
26126: LD_INT 20
26128: DOUBLE
26129: EQUAL
26130: IFTRUE 26134
26132: GO 26145
26134: POP
// bc_type := b_ext_siberium ; 21 :
26135: LD_ADDR_OWVAR 42
26139: PUSH
26140: LD_INT 21
26142: ST_TO_ADDR
26143: GO 26412
26145: LD_INT 21
26147: DOUBLE
26148: EQUAL
26149: IFTRUE 26153
26151: GO 26164
26153: POP
// bc_type := b_ext_computer ; 22 :
26154: LD_ADDR_OWVAR 42
26158: PUSH
26159: LD_INT 24
26161: ST_TO_ADDR
26162: GO 26412
26164: LD_INT 22
26166: DOUBLE
26167: EQUAL
26168: IFTRUE 26172
26170: GO 26183
26172: POP
// bc_type := b_ext_track ; 23 :
26173: LD_ADDR_OWVAR 42
26177: PUSH
26178: LD_INT 16
26180: ST_TO_ADDR
26181: GO 26412
26183: LD_INT 23
26185: DOUBLE
26186: EQUAL
26187: IFTRUE 26191
26189: GO 26202
26191: POP
// bc_type := b_ext_laser ; 24 :
26192: LD_ADDR_OWVAR 42
26196: PUSH
26197: LD_INT 25
26199: ST_TO_ADDR
26200: GO 26412
26202: LD_INT 24
26204: DOUBLE
26205: EQUAL
26206: IFTRUE 26210
26208: GO 26221
26210: POP
// bc_type := b_control_tower ; 25 :
26211: LD_ADDR_OWVAR 42
26215: PUSH
26216: LD_INT 36
26218: ST_TO_ADDR
26219: GO 26412
26221: LD_INT 25
26223: DOUBLE
26224: EQUAL
26225: IFTRUE 26229
26227: GO 26240
26229: POP
// bc_type := b_breastwork ; 26 :
26230: LD_ADDR_OWVAR 42
26234: PUSH
26235: LD_INT 31
26237: ST_TO_ADDR
26238: GO 26412
26240: LD_INT 26
26242: DOUBLE
26243: EQUAL
26244: IFTRUE 26248
26246: GO 26259
26248: POP
// bc_type := b_bunker ; 27 :
26249: LD_ADDR_OWVAR 42
26253: PUSH
26254: LD_INT 32
26256: ST_TO_ADDR
26257: GO 26412
26259: LD_INT 27
26261: DOUBLE
26262: EQUAL
26263: IFTRUE 26267
26265: GO 26278
26267: POP
// bc_type := b_turret ; 28 :
26268: LD_ADDR_OWVAR 42
26272: PUSH
26273: LD_INT 33
26275: ST_TO_ADDR
26276: GO 26412
26278: LD_INT 28
26280: DOUBLE
26281: EQUAL
26282: IFTRUE 26286
26284: GO 26297
26286: POP
// bc_type := b_armoury ; 29 :
26287: LD_ADDR_OWVAR 42
26291: PUSH
26292: LD_INT 4
26294: ST_TO_ADDR
26295: GO 26412
26297: LD_INT 29
26299: DOUBLE
26300: EQUAL
26301: IFTRUE 26305
26303: GO 26316
26305: POP
// bc_type := b_barracks ; 30 :
26306: LD_ADDR_OWVAR 42
26310: PUSH
26311: LD_INT 5
26313: ST_TO_ADDR
26314: GO 26412
26316: LD_INT 30
26318: DOUBLE
26319: EQUAL
26320: IFTRUE 26324
26322: GO 26335
26324: POP
// bc_type := b_solar_power ; 31 :
26325: LD_ADDR_OWVAR 42
26329: PUSH
26330: LD_INT 27
26332: ST_TO_ADDR
26333: GO 26412
26335: LD_INT 31
26337: DOUBLE
26338: EQUAL
26339: IFTRUE 26343
26341: GO 26354
26343: POP
// bc_type := b_oil_power ; 32 :
26344: LD_ADDR_OWVAR 42
26348: PUSH
26349: LD_INT 26
26351: ST_TO_ADDR
26352: GO 26412
26354: LD_INT 32
26356: DOUBLE
26357: EQUAL
26358: IFTRUE 26362
26360: GO 26373
26362: POP
// bc_type := b_siberite_power ; 33 :
26363: LD_ADDR_OWVAR 42
26367: PUSH
26368: LD_INT 28
26370: ST_TO_ADDR
26371: GO 26412
26373: LD_INT 33
26375: DOUBLE
26376: EQUAL
26377: IFTRUE 26381
26379: GO 26392
26381: POP
// bc_type := b_oil_mine ; 34 :
26382: LD_ADDR_OWVAR 42
26386: PUSH
26387: LD_INT 29
26389: ST_TO_ADDR
26390: GO 26412
26392: LD_INT 34
26394: DOUBLE
26395: EQUAL
26396: IFTRUE 26400
26398: GO 26411
26400: POP
// bc_type := b_siberite_mine ; end ;
26401: LD_ADDR_OWVAR 42
26405: PUSH
26406: LD_INT 30
26408: ST_TO_ADDR
26409: GO 26412
26411: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26412: LD_ADDR_VAR 0 8
26416: PUSH
26417: LD_VAR 0 5
26421: PPUSH
26422: LD_VAR 0 6
26426: PPUSH
26427: LD_VAR 0 3
26431: PPUSH
26432: CALL_OW 47
26436: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26437: LD_OWVAR 42
26441: PUSH
26442: LD_INT 32
26444: PUSH
26445: LD_INT 33
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: IN
26452: IFFALSE 26468
// PlaceWeaponTurret ( b , weapon ) ;
26454: LD_VAR 0 8
26458: PPUSH
26459: LD_VAR 0 4
26463: PPUSH
26464: CALL_OW 431
// end ;
26468: LD_VAR 0 7
26472: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26473: LD_INT 0
26475: PPUSH
26476: PPUSH
26477: PPUSH
26478: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26479: LD_ADDR_VAR 0 4
26483: PUSH
26484: LD_INT 22
26486: PUSH
26487: LD_OWVAR 2
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: LD_INT 30
26501: PUSH
26502: LD_INT 0
26504: PUSH
26505: EMPTY
26506: LIST
26507: LIST
26508: PUSH
26509: LD_INT 30
26511: PUSH
26512: LD_INT 1
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: LIST
26523: PUSH
26524: EMPTY
26525: LIST
26526: LIST
26527: PPUSH
26528: CALL_OW 69
26532: ST_TO_ADDR
// if not tmp then
26533: LD_VAR 0 4
26537: NOT
26538: IFFALSE 26542
// exit ;
26540: GO 26601
// for i in tmp do
26542: LD_ADDR_VAR 0 2
26546: PUSH
26547: LD_VAR 0 4
26551: PUSH
26552: FOR_IN
26553: IFFALSE 26599
// for j = 1 to 3 do
26555: LD_ADDR_VAR 0 3
26559: PUSH
26560: DOUBLE
26561: LD_INT 1
26563: DEC
26564: ST_TO_ADDR
26565: LD_INT 3
26567: PUSH
26568: FOR_TO
26569: IFFALSE 26595
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26571: LD_VAR 0 2
26575: PPUSH
26576: CALL_OW 274
26580: PPUSH
26581: LD_VAR 0 3
26585: PPUSH
26586: LD_INT 99999
26588: PPUSH
26589: CALL_OW 277
26593: GO 26568
26595: POP
26596: POP
26597: GO 26552
26599: POP
26600: POP
// end ;
26601: LD_VAR 0 1
26605: RET
// export function hHackSetLevel10 ; var i , j ; begin
26606: LD_INT 0
26608: PPUSH
26609: PPUSH
26610: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26611: LD_ADDR_VAR 0 2
26615: PUSH
26616: LD_INT 21
26618: PUSH
26619: LD_INT 1
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PPUSH
26626: CALL_OW 69
26630: PUSH
26631: FOR_IN
26632: IFFALSE 26684
// if IsSelected ( i ) then
26634: LD_VAR 0 2
26638: PPUSH
26639: CALL_OW 306
26643: IFFALSE 26682
// begin for j := 1 to 4 do
26645: LD_ADDR_VAR 0 3
26649: PUSH
26650: DOUBLE
26651: LD_INT 1
26653: DEC
26654: ST_TO_ADDR
26655: LD_INT 4
26657: PUSH
26658: FOR_TO
26659: IFFALSE 26680
// SetSkill ( i , j , 10 ) ;
26661: LD_VAR 0 2
26665: PPUSH
26666: LD_VAR 0 3
26670: PPUSH
26671: LD_INT 10
26673: PPUSH
26674: CALL_OW 237
26678: GO 26658
26680: POP
26681: POP
// end ;
26682: GO 26631
26684: POP
26685: POP
// end ;
26686: LD_VAR 0 1
26690: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26691: LD_INT 0
26693: PPUSH
26694: PPUSH
26695: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26696: LD_ADDR_VAR 0 2
26700: PUSH
26701: LD_INT 22
26703: PUSH
26704: LD_OWVAR 2
26708: PUSH
26709: EMPTY
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 21
26715: PUSH
26716: LD_INT 1
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: PUSH
26723: EMPTY
26724: LIST
26725: LIST
26726: PPUSH
26727: CALL_OW 69
26731: PUSH
26732: FOR_IN
26733: IFFALSE 26774
// begin for j := 1 to 4 do
26735: LD_ADDR_VAR 0 3
26739: PUSH
26740: DOUBLE
26741: LD_INT 1
26743: DEC
26744: ST_TO_ADDR
26745: LD_INT 4
26747: PUSH
26748: FOR_TO
26749: IFFALSE 26770
// SetSkill ( i , j , 10 ) ;
26751: LD_VAR 0 2
26755: PPUSH
26756: LD_VAR 0 3
26760: PPUSH
26761: LD_INT 10
26763: PPUSH
26764: CALL_OW 237
26768: GO 26748
26770: POP
26771: POP
// end ;
26772: GO 26732
26774: POP
26775: POP
// end ;
26776: LD_VAR 0 1
26780: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26781: LD_INT 0
26783: PPUSH
// uc_side := your_side ;
26784: LD_ADDR_OWVAR 20
26788: PUSH
26789: LD_OWVAR 2
26793: ST_TO_ADDR
// uc_nation := nation ;
26794: LD_ADDR_OWVAR 21
26798: PUSH
26799: LD_VAR 0 1
26803: ST_TO_ADDR
// InitHc ;
26804: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26808: LD_INT 0
26810: PPUSH
26811: LD_VAR 0 2
26815: PPUSH
26816: LD_VAR 0 3
26820: PPUSH
26821: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26825: LD_VAR 0 4
26829: PPUSH
26830: LD_VAR 0 5
26834: PPUSH
26835: CALL_OW 428
26839: PUSH
26840: LD_INT 0
26842: EQUAL
26843: IFFALSE 26867
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26845: CALL_OW 44
26849: PPUSH
26850: LD_VAR 0 4
26854: PPUSH
26855: LD_VAR 0 5
26859: PPUSH
26860: LD_INT 1
26862: PPUSH
26863: CALL_OW 48
// end ;
26867: LD_VAR 0 6
26871: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
26872: LD_INT 0
26874: PPUSH
26875: PPUSH
// uc_side := your_side ;
26876: LD_ADDR_OWVAR 20
26880: PUSH
26881: LD_OWVAR 2
26885: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
26886: LD_VAR 0 1
26890: PUSH
26891: LD_INT 1
26893: PUSH
26894: LD_INT 2
26896: PUSH
26897: LD_INT 3
26899: PUSH
26900: LD_INT 4
26902: PUSH
26903: LD_INT 5
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: LIST
26910: LIST
26911: LIST
26912: IN
26913: IFFALSE 26925
// uc_nation := nation_american else
26915: LD_ADDR_OWVAR 21
26919: PUSH
26920: LD_INT 1
26922: ST_TO_ADDR
26923: GO 26968
// if chassis in [ 11 , 12 , 13 , 14 ] then
26925: LD_VAR 0 1
26929: PUSH
26930: LD_INT 11
26932: PUSH
26933: LD_INT 12
26935: PUSH
26936: LD_INT 13
26938: PUSH
26939: LD_INT 14
26941: PUSH
26942: EMPTY
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: IN
26948: IFFALSE 26960
// uc_nation := nation_arabian else
26950: LD_ADDR_OWVAR 21
26954: PUSH
26955: LD_INT 2
26957: ST_TO_ADDR
26958: GO 26968
// uc_nation := nation_russian ;
26960: LD_ADDR_OWVAR 21
26964: PUSH
26965: LD_INT 3
26967: ST_TO_ADDR
// vc_chassis := chassis ;
26968: LD_ADDR_OWVAR 37
26972: PUSH
26973: LD_VAR 0 1
26977: ST_TO_ADDR
// vc_engine := engine ;
26978: LD_ADDR_OWVAR 39
26982: PUSH
26983: LD_VAR 0 2
26987: ST_TO_ADDR
// vc_control := control ;
26988: LD_ADDR_OWVAR 38
26992: PUSH
26993: LD_VAR 0 3
26997: ST_TO_ADDR
// vc_weapon := weapon ;
26998: LD_ADDR_OWVAR 40
27002: PUSH
27003: LD_VAR 0 4
27007: ST_TO_ADDR
// un := CreateVehicle ;
27008: LD_ADDR_VAR 0 8
27012: PUSH
27013: CALL_OW 45
27017: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27018: LD_VAR 0 8
27022: PPUSH
27023: LD_INT 0
27025: PPUSH
27026: LD_INT 5
27028: PPUSH
27029: CALL_OW 12
27033: PPUSH
27034: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27038: LD_VAR 0 8
27042: PPUSH
27043: LD_VAR 0 5
27047: PPUSH
27048: LD_VAR 0 6
27052: PPUSH
27053: LD_INT 1
27055: PPUSH
27056: CALL_OW 48
// end ;
27060: LD_VAR 0 7
27064: RET
// export hInvincible ; every 1 do
27065: GO 27067
27067: DISABLE
// hInvincible := [ ] ;
27068: LD_ADDR_EXP 111
27072: PUSH
27073: EMPTY
27074: ST_TO_ADDR
27075: END
// every 10 do var i ;
27076: GO 27078
27078: DISABLE
27079: LD_INT 0
27081: PPUSH
// begin enable ;
27082: ENABLE
// if not hInvincible then
27083: LD_EXP 111
27087: NOT
27088: IFFALSE 27092
// exit ;
27090: GO 27136
// for i in hInvincible do
27092: LD_ADDR_VAR 0 1
27096: PUSH
27097: LD_EXP 111
27101: PUSH
27102: FOR_IN
27103: IFFALSE 27134
// if GetLives ( i ) < 1000 then
27105: LD_VAR 0 1
27109: PPUSH
27110: CALL_OW 256
27114: PUSH
27115: LD_INT 1000
27117: LESS
27118: IFFALSE 27132
// SetLives ( i , 1000 ) ;
27120: LD_VAR 0 1
27124: PPUSH
27125: LD_INT 1000
27127: PPUSH
27128: CALL_OW 234
27132: GO 27102
27134: POP
27135: POP
// end ;
27136: PPOPN 1
27138: END
// export function hHackInvincible ; var i ; begin
27139: LD_INT 0
27141: PPUSH
27142: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27143: LD_ADDR_VAR 0 2
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 21
27153: PUSH
27154: LD_INT 1
27156: PUSH
27157: EMPTY
27158: LIST
27159: LIST
27160: PUSH
27161: LD_INT 21
27163: PUSH
27164: LD_INT 2
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: LIST
27175: PPUSH
27176: CALL_OW 69
27180: PUSH
27181: FOR_IN
27182: IFFALSE 27243
// if IsSelected ( i ) then
27184: LD_VAR 0 2
27188: PPUSH
27189: CALL_OW 306
27193: IFFALSE 27241
// begin if i in hInvincible then
27195: LD_VAR 0 2
27199: PUSH
27200: LD_EXP 111
27204: IN
27205: IFFALSE 27225
// hInvincible := hInvincible diff i else
27207: LD_ADDR_EXP 111
27211: PUSH
27212: LD_EXP 111
27216: PUSH
27217: LD_VAR 0 2
27221: DIFF
27222: ST_TO_ADDR
27223: GO 27241
// hInvincible := hInvincible union i ;
27225: LD_ADDR_EXP 111
27229: PUSH
27230: LD_EXP 111
27234: PUSH
27235: LD_VAR 0 2
27239: UNION
27240: ST_TO_ADDR
// end ;
27241: GO 27181
27243: POP
27244: POP
// end ;
27245: LD_VAR 0 1
27249: RET
// export function hHackInvisible ; var i , j ; begin
27250: LD_INT 0
27252: PPUSH
27253: PPUSH
27254: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27255: LD_ADDR_VAR 0 2
27259: PUSH
27260: LD_INT 21
27262: PUSH
27263: LD_INT 1
27265: PUSH
27266: EMPTY
27267: LIST
27268: LIST
27269: PPUSH
27270: CALL_OW 69
27274: PUSH
27275: FOR_IN
27276: IFFALSE 27300
// if IsSelected ( i ) then
27278: LD_VAR 0 2
27282: PPUSH
27283: CALL_OW 306
27287: IFFALSE 27298
// ComForceInvisible ( i ) ;
27289: LD_VAR 0 2
27293: PPUSH
27294: CALL_OW 496
27298: GO 27275
27300: POP
27301: POP
// end ;
27302: LD_VAR 0 1
27306: RET
// export function hHackChangeYourSide ; begin
27307: LD_INT 0
27309: PPUSH
// if your_side = 8 then
27310: LD_OWVAR 2
27314: PUSH
27315: LD_INT 8
27317: EQUAL
27318: IFFALSE 27330
// your_side := 0 else
27320: LD_ADDR_OWVAR 2
27324: PUSH
27325: LD_INT 0
27327: ST_TO_ADDR
27328: GO 27344
// your_side := your_side + 1 ;
27330: LD_ADDR_OWVAR 2
27334: PUSH
27335: LD_OWVAR 2
27339: PUSH
27340: LD_INT 1
27342: PLUS
27343: ST_TO_ADDR
// end ;
27344: LD_VAR 0 1
27348: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27349: LD_INT 0
27351: PPUSH
27352: PPUSH
27353: PPUSH
// for i in all_units do
27354: LD_ADDR_VAR 0 2
27358: PUSH
27359: LD_OWVAR 3
27363: PUSH
27364: FOR_IN
27365: IFFALSE 27443
// if IsSelected ( i ) then
27367: LD_VAR 0 2
27371: PPUSH
27372: CALL_OW 306
27376: IFFALSE 27441
// begin j := GetSide ( i ) ;
27378: LD_ADDR_VAR 0 3
27382: PUSH
27383: LD_VAR 0 2
27387: PPUSH
27388: CALL_OW 255
27392: ST_TO_ADDR
// if j = 8 then
27393: LD_VAR 0 3
27397: PUSH
27398: LD_INT 8
27400: EQUAL
27401: IFFALSE 27413
// j := 0 else
27403: LD_ADDR_VAR 0 3
27407: PUSH
27408: LD_INT 0
27410: ST_TO_ADDR
27411: GO 27427
// j := j + 1 ;
27413: LD_ADDR_VAR 0 3
27417: PUSH
27418: LD_VAR 0 3
27422: PUSH
27423: LD_INT 1
27425: PLUS
27426: ST_TO_ADDR
// SetSide ( i , j ) ;
27427: LD_VAR 0 2
27431: PPUSH
27432: LD_VAR 0 3
27436: PPUSH
27437: CALL_OW 235
// end ;
27441: GO 27364
27443: POP
27444: POP
// end ;
27445: LD_VAR 0 1
27449: RET
// export function hHackFog ; begin
27450: LD_INT 0
27452: PPUSH
// FogOff ( true ) ;
27453: LD_INT 1
27455: PPUSH
27456: CALL_OW 344
// end ;
27460: LD_VAR 0 1
27464: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27465: LD_INT 0
27467: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27468: LD_VAR 0 1
27472: PPUSH
27473: LD_VAR 0 2
27477: PPUSH
27478: LD_VAR 0 3
27482: PPUSH
27483: LD_INT 1
27485: PPUSH
27486: LD_INT 1
27488: PPUSH
27489: CALL_OW 483
// CenterOnXY ( x , y ) ;
27493: LD_VAR 0 2
27497: PPUSH
27498: LD_VAR 0 3
27502: PPUSH
27503: CALL_OW 84
// end ; end_of_file
27507: LD_VAR 0 4
27511: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27512: LD_INT 0
27514: PPUSH
27515: PPUSH
27516: PPUSH
27517: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27518: LD_VAR 0 1
27522: PPUSH
27523: CALL_OW 264
27527: PUSH
27528: LD_EXP 126
27532: EQUAL
27533: IFFALSE 27605
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27535: LD_INT 68
27537: PPUSH
27538: LD_VAR 0 1
27542: PPUSH
27543: CALL_OW 255
27547: PPUSH
27548: CALL_OW 321
27552: PUSH
27553: LD_INT 2
27555: EQUAL
27556: IFFALSE 27568
// eff := 70 else
27558: LD_ADDR_VAR 0 4
27562: PUSH
27563: LD_INT 70
27565: ST_TO_ADDR
27566: GO 27576
// eff := 30 ;
27568: LD_ADDR_VAR 0 4
27572: PUSH
27573: LD_INT 30
27575: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27576: LD_VAR 0 1
27580: PPUSH
27581: CALL_OW 250
27585: PPUSH
27586: LD_VAR 0 1
27590: PPUSH
27591: CALL_OW 251
27595: PPUSH
27596: LD_VAR 0 4
27600: PPUSH
27601: CALL_OW 495
// end ; end ;
27605: LD_VAR 0 2
27609: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27610: LD_INT 0
27612: PPUSH
// end ;
27613: LD_VAR 0 4
27617: RET
// export function SOS_Command ( cmd ) ; begin
27618: LD_INT 0
27620: PPUSH
// end ;
27621: LD_VAR 0 2
27625: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27626: LD_INT 0
27628: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27629: LD_VAR 0 1
27633: PUSH
27634: LD_INT 250
27636: EQUAL
27637: PUSH
27638: LD_VAR 0 2
27642: PPUSH
27643: CALL_OW 264
27647: PUSH
27648: LD_EXP 129
27652: EQUAL
27653: AND
27654: IFFALSE 27675
// MinerPlaceMine ( unit , x , y ) ;
27656: LD_VAR 0 2
27660: PPUSH
27661: LD_VAR 0 4
27665: PPUSH
27666: LD_VAR 0 5
27670: PPUSH
27671: CALL 30016 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27675: LD_VAR 0 1
27679: PUSH
27680: LD_INT 251
27682: EQUAL
27683: PUSH
27684: LD_VAR 0 2
27688: PPUSH
27689: CALL_OW 264
27693: PUSH
27694: LD_EXP 129
27698: EQUAL
27699: AND
27700: IFFALSE 27721
// MinerDetonateMine ( unit , x , y ) ;
27702: LD_VAR 0 2
27706: PPUSH
27707: LD_VAR 0 4
27711: PPUSH
27712: LD_VAR 0 5
27716: PPUSH
27717: CALL 30293 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27721: LD_VAR 0 1
27725: PUSH
27726: LD_INT 252
27728: EQUAL
27729: PUSH
27730: LD_VAR 0 2
27734: PPUSH
27735: CALL_OW 264
27739: PUSH
27740: LD_EXP 129
27744: EQUAL
27745: AND
27746: IFFALSE 27767
// MinerCreateMinefield ( unit , x , y ) ;
27748: LD_VAR 0 2
27752: PPUSH
27753: LD_VAR 0 4
27757: PPUSH
27758: LD_VAR 0 5
27762: PPUSH
27763: CALL 30710 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27767: LD_VAR 0 1
27771: PUSH
27772: LD_INT 253
27774: EQUAL
27775: PUSH
27776: LD_VAR 0 2
27780: PPUSH
27781: CALL_OW 257
27785: PUSH
27786: LD_INT 5
27788: EQUAL
27789: AND
27790: IFFALSE 27811
// ComBinocular ( unit , x , y ) ;
27792: LD_VAR 0 2
27796: PPUSH
27797: LD_VAR 0 4
27801: PPUSH
27802: LD_VAR 0 5
27806: PPUSH
27807: CALL 31081 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27811: LD_VAR 0 1
27815: PUSH
27816: LD_INT 254
27818: EQUAL
27819: PUSH
27820: LD_VAR 0 2
27824: PPUSH
27825: CALL_OW 264
27829: PUSH
27830: LD_EXP 124
27834: EQUAL
27835: AND
27836: PUSH
27837: LD_VAR 0 3
27841: PPUSH
27842: CALL_OW 263
27846: PUSH
27847: LD_INT 3
27849: EQUAL
27850: AND
27851: IFFALSE 27867
// HackDestroyVehicle ( unit , selectedUnit ) ;
27853: LD_VAR 0 2
27857: PPUSH
27858: LD_VAR 0 3
27862: PPUSH
27863: CALL 29376 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
27867: LD_VAR 0 1
27871: PUSH
27872: LD_INT 255
27874: EQUAL
27875: PUSH
27876: LD_VAR 0 2
27880: PPUSH
27881: CALL_OW 264
27885: PUSH
27886: LD_INT 14
27888: PUSH
27889: LD_INT 53
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: IN
27896: AND
27897: PUSH
27898: LD_VAR 0 4
27902: PPUSH
27903: LD_VAR 0 5
27907: PPUSH
27908: CALL_OW 488
27912: AND
27913: IFFALSE 27937
// CutTreeXYR ( unit , x , y , 12 ) ;
27915: LD_VAR 0 2
27919: PPUSH
27920: LD_VAR 0 4
27924: PPUSH
27925: LD_VAR 0 5
27929: PPUSH
27930: LD_INT 12
27932: PPUSH
27933: CALL 27942 0 4
// end ;
27937: LD_VAR 0 6
27941: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
27942: LD_INT 0
27944: PPUSH
27945: PPUSH
27946: PPUSH
27947: PPUSH
27948: PPUSH
27949: PPUSH
27950: PPUSH
27951: PPUSH
27952: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
27953: LD_VAR 0 1
27957: NOT
27958: PUSH
27959: LD_VAR 0 2
27963: PPUSH
27964: LD_VAR 0 3
27968: PPUSH
27969: CALL_OW 488
27973: NOT
27974: OR
27975: PUSH
27976: LD_VAR 0 4
27980: NOT
27981: OR
27982: IFFALSE 27986
// exit ;
27984: GO 28326
// list := [ ] ;
27986: LD_ADDR_VAR 0 13
27990: PUSH
27991: EMPTY
27992: ST_TO_ADDR
// if x - r < 0 then
27993: LD_VAR 0 2
27997: PUSH
27998: LD_VAR 0 4
28002: MINUS
28003: PUSH
28004: LD_INT 0
28006: LESS
28007: IFFALSE 28019
// min_x := 0 else
28009: LD_ADDR_VAR 0 7
28013: PUSH
28014: LD_INT 0
28016: ST_TO_ADDR
28017: GO 28035
// min_x := x - r ;
28019: LD_ADDR_VAR 0 7
28023: PUSH
28024: LD_VAR 0 2
28028: PUSH
28029: LD_VAR 0 4
28033: MINUS
28034: ST_TO_ADDR
// if y - r < 0 then
28035: LD_VAR 0 3
28039: PUSH
28040: LD_VAR 0 4
28044: MINUS
28045: PUSH
28046: LD_INT 0
28048: LESS
28049: IFFALSE 28061
// min_y := 0 else
28051: LD_ADDR_VAR 0 8
28055: PUSH
28056: LD_INT 0
28058: ST_TO_ADDR
28059: GO 28077
// min_y := y - r ;
28061: LD_ADDR_VAR 0 8
28065: PUSH
28066: LD_VAR 0 3
28070: PUSH
28071: LD_VAR 0 4
28075: MINUS
28076: ST_TO_ADDR
// max_x := x + r ;
28077: LD_ADDR_VAR 0 9
28081: PUSH
28082: LD_VAR 0 2
28086: PUSH
28087: LD_VAR 0 4
28091: PLUS
28092: ST_TO_ADDR
// max_y := y + r ;
28093: LD_ADDR_VAR 0 10
28097: PUSH
28098: LD_VAR 0 3
28102: PUSH
28103: LD_VAR 0 4
28107: PLUS
28108: ST_TO_ADDR
// for _x = min_x to max_x do
28109: LD_ADDR_VAR 0 11
28113: PUSH
28114: DOUBLE
28115: LD_VAR 0 7
28119: DEC
28120: ST_TO_ADDR
28121: LD_VAR 0 9
28125: PUSH
28126: FOR_TO
28127: IFFALSE 28244
// for _y = min_y to max_y do
28129: LD_ADDR_VAR 0 12
28133: PUSH
28134: DOUBLE
28135: LD_VAR 0 8
28139: DEC
28140: ST_TO_ADDR
28141: LD_VAR 0 10
28145: PUSH
28146: FOR_TO
28147: IFFALSE 28240
// begin if not ValidHex ( _x , _y ) then
28149: LD_VAR 0 11
28153: PPUSH
28154: LD_VAR 0 12
28158: PPUSH
28159: CALL_OW 488
28163: NOT
28164: IFFALSE 28168
// continue ;
28166: GO 28146
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28168: LD_VAR 0 11
28172: PPUSH
28173: LD_VAR 0 12
28177: PPUSH
28178: CALL_OW 351
28182: PUSH
28183: LD_VAR 0 11
28187: PPUSH
28188: LD_VAR 0 12
28192: PPUSH
28193: CALL_OW 554
28197: AND
28198: IFFALSE 28238
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28200: LD_ADDR_VAR 0 13
28204: PUSH
28205: LD_VAR 0 13
28209: PPUSH
28210: LD_VAR 0 13
28214: PUSH
28215: LD_INT 1
28217: PLUS
28218: PPUSH
28219: LD_VAR 0 11
28223: PUSH
28224: LD_VAR 0 12
28228: PUSH
28229: EMPTY
28230: LIST
28231: LIST
28232: PPUSH
28233: CALL_OW 2
28237: ST_TO_ADDR
// end ;
28238: GO 28146
28240: POP
28241: POP
28242: GO 28126
28244: POP
28245: POP
// if not list then
28246: LD_VAR 0 13
28250: NOT
28251: IFFALSE 28255
// exit ;
28253: GO 28326
// for i in list do
28255: LD_ADDR_VAR 0 6
28259: PUSH
28260: LD_VAR 0 13
28264: PUSH
28265: FOR_IN
28266: IFFALSE 28324
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28268: LD_VAR 0 1
28272: PPUSH
28273: LD_STRING M
28275: PUSH
28276: LD_VAR 0 6
28280: PUSH
28281: LD_INT 1
28283: ARRAY
28284: PUSH
28285: LD_VAR 0 6
28289: PUSH
28290: LD_INT 2
28292: ARRAY
28293: PUSH
28294: LD_INT 0
28296: PUSH
28297: LD_INT 0
28299: PUSH
28300: LD_INT 0
28302: PUSH
28303: LD_INT 0
28305: PUSH
28306: EMPTY
28307: LIST
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: PUSH
28315: EMPTY
28316: LIST
28317: PPUSH
28318: CALL_OW 447
28322: GO 28265
28324: POP
28325: POP
// end ;
28326: LD_VAR 0 5
28330: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28331: LD_EXP 112
28335: NOT
28336: IFFALSE 28386
28338: GO 28340
28340: DISABLE
// begin initHack := true ;
28341: LD_ADDR_EXP 112
28345: PUSH
28346: LD_INT 1
28348: ST_TO_ADDR
// hackTanks := [ ] ;
28349: LD_ADDR_EXP 113
28353: PUSH
28354: EMPTY
28355: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28356: LD_ADDR_EXP 114
28360: PUSH
28361: EMPTY
28362: ST_TO_ADDR
// hackLimit := 3 ;
28363: LD_ADDR_EXP 115
28367: PUSH
28368: LD_INT 3
28370: ST_TO_ADDR
// hackDist := 12 ;
28371: LD_ADDR_EXP 116
28375: PUSH
28376: LD_INT 12
28378: ST_TO_ADDR
// hackCounter := [ ] ;
28379: LD_ADDR_EXP 117
28383: PUSH
28384: EMPTY
28385: ST_TO_ADDR
// end ;
28386: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28387: LD_EXP 112
28391: PUSH
28392: LD_INT 34
28394: PUSH
28395: LD_EXP 124
28399: PUSH
28400: EMPTY
28401: LIST
28402: LIST
28403: PPUSH
28404: CALL_OW 69
28408: AND
28409: IFFALSE 28664
28411: GO 28413
28413: DISABLE
28414: LD_INT 0
28416: PPUSH
28417: PPUSH
// begin enable ;
28418: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28419: LD_ADDR_VAR 0 1
28423: PUSH
28424: LD_INT 34
28426: PUSH
28427: LD_EXP 124
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 69
28440: PUSH
28441: FOR_IN
28442: IFFALSE 28662
// begin if not i in hackTanks then
28444: LD_VAR 0 1
28448: PUSH
28449: LD_EXP 113
28453: IN
28454: NOT
28455: IFFALSE 28538
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28457: LD_ADDR_EXP 113
28461: PUSH
28462: LD_EXP 113
28466: PPUSH
28467: LD_EXP 113
28471: PUSH
28472: LD_INT 1
28474: PLUS
28475: PPUSH
28476: LD_VAR 0 1
28480: PPUSH
28481: CALL_OW 1
28485: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28486: LD_ADDR_EXP 114
28490: PUSH
28491: LD_EXP 114
28495: PPUSH
28496: LD_EXP 114
28500: PUSH
28501: LD_INT 1
28503: PLUS
28504: PPUSH
28505: EMPTY
28506: PPUSH
28507: CALL_OW 1
28511: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28512: LD_ADDR_EXP 117
28516: PUSH
28517: LD_EXP 117
28521: PPUSH
28522: LD_EXP 117
28526: PUSH
28527: LD_INT 1
28529: PLUS
28530: PPUSH
28531: EMPTY
28532: PPUSH
28533: CALL_OW 1
28537: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28538: LD_VAR 0 1
28542: PPUSH
28543: CALL_OW 302
28547: NOT
28548: IFFALSE 28561
// begin HackUnlinkAll ( i ) ;
28550: LD_VAR 0 1
28554: PPUSH
28555: CALL 28667 0 1
// continue ;
28559: GO 28441
// end ; HackCheckCapturedStatus ( i ) ;
28561: LD_VAR 0 1
28565: PPUSH
28566: CALL 29110 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28570: LD_ADDR_VAR 0 2
28574: PUSH
28575: LD_INT 81
28577: PUSH
28578: LD_VAR 0 1
28582: PPUSH
28583: CALL_OW 255
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 33
28594: PUSH
28595: LD_INT 3
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: PUSH
28602: LD_INT 91
28604: PUSH
28605: LD_VAR 0 1
28609: PUSH
28610: LD_EXP 116
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: LIST
28619: PUSH
28620: LD_INT 50
28622: PUSH
28623: EMPTY
28624: LIST
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: PPUSH
28632: CALL_OW 69
28636: ST_TO_ADDR
// if not tmp then
28637: LD_VAR 0 2
28641: NOT
28642: IFFALSE 28646
// continue ;
28644: GO 28441
// HackLink ( i , tmp ) ;
28646: LD_VAR 0 1
28650: PPUSH
28651: LD_VAR 0 2
28655: PPUSH
28656: CALL 28803 0 2
// end ;
28660: GO 28441
28662: POP
28663: POP
// end ;
28664: PPOPN 2
28666: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28667: LD_INT 0
28669: PPUSH
28670: PPUSH
28671: PPUSH
// if not hack in hackTanks then
28672: LD_VAR 0 1
28676: PUSH
28677: LD_EXP 113
28681: IN
28682: NOT
28683: IFFALSE 28687
// exit ;
28685: GO 28798
// index := GetElementIndex ( hackTanks , hack ) ;
28687: LD_ADDR_VAR 0 4
28691: PUSH
28692: LD_EXP 113
28696: PPUSH
28697: LD_VAR 0 1
28701: PPUSH
28702: CALL 36507 0 2
28706: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28707: LD_EXP 114
28711: PUSH
28712: LD_VAR 0 4
28716: ARRAY
28717: IFFALSE 28798
// begin for i in hackTanksCaptured [ index ] do
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: LD_EXP 114
28728: PUSH
28729: LD_VAR 0 4
28733: ARRAY
28734: PUSH
28735: FOR_IN
28736: IFFALSE 28762
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28738: LD_VAR 0 3
28742: PUSH
28743: LD_INT 1
28745: ARRAY
28746: PPUSH
28747: LD_VAR 0 3
28751: PUSH
28752: LD_INT 2
28754: ARRAY
28755: PPUSH
28756: CALL_OW 235
28760: GO 28735
28762: POP
28763: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28764: LD_ADDR_EXP 114
28768: PUSH
28769: LD_EXP 114
28773: PPUSH
28774: LD_VAR 0 4
28778: PPUSH
28779: EMPTY
28780: PPUSH
28781: CALL_OW 1
28785: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28786: LD_VAR 0 1
28790: PPUSH
28791: LD_INT 0
28793: PPUSH
28794: CALL_OW 505
// end ; end ;
28798: LD_VAR 0 2
28802: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28803: LD_INT 0
28805: PPUSH
28806: PPUSH
28807: PPUSH
// if not hack in hackTanks or not vehicles then
28808: LD_VAR 0 1
28812: PUSH
28813: LD_EXP 113
28817: IN
28818: NOT
28819: PUSH
28820: LD_VAR 0 2
28824: NOT
28825: OR
28826: IFFALSE 28830
// exit ;
28828: GO 29105
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28830: LD_ADDR_VAR 0 2
28834: PUSH
28835: LD_VAR 0 1
28839: PPUSH
28840: LD_VAR 0 2
28844: PPUSH
28845: LD_INT 1
28847: PPUSH
28848: LD_INT 1
28850: PPUSH
28851: CALL 37157 0 4
28855: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
28856: LD_ADDR_VAR 0 5
28860: PUSH
28861: LD_EXP 113
28865: PPUSH
28866: LD_VAR 0 1
28870: PPUSH
28871: CALL 36507 0 2
28875: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
28876: LD_EXP 114
28880: PUSH
28881: LD_VAR 0 5
28885: ARRAY
28886: PUSH
28887: LD_EXP 115
28891: LESS
28892: IFFALSE 29081
// begin for i := 1 to vehicles do
28894: LD_ADDR_VAR 0 4
28898: PUSH
28899: DOUBLE
28900: LD_INT 1
28902: DEC
28903: ST_TO_ADDR
28904: LD_VAR 0 2
28908: PUSH
28909: FOR_TO
28910: IFFALSE 29079
// begin if hackTanksCaptured [ index ] = hackLimit then
28912: LD_EXP 114
28916: PUSH
28917: LD_VAR 0 5
28921: ARRAY
28922: PUSH
28923: LD_EXP 115
28927: EQUAL
28928: IFFALSE 28932
// break ;
28930: GO 29079
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
28932: LD_ADDR_EXP 117
28936: PUSH
28937: LD_EXP 117
28941: PPUSH
28942: LD_VAR 0 5
28946: PPUSH
28947: LD_EXP 117
28951: PUSH
28952: LD_VAR 0 5
28956: ARRAY
28957: PUSH
28958: LD_INT 1
28960: PLUS
28961: PPUSH
28962: CALL_OW 1
28966: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
28967: LD_ADDR_EXP 114
28971: PUSH
28972: LD_EXP 114
28976: PPUSH
28977: LD_VAR 0 5
28981: PUSH
28982: LD_EXP 114
28986: PUSH
28987: LD_VAR 0 5
28991: ARRAY
28992: PUSH
28993: LD_INT 1
28995: PLUS
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PPUSH
29001: LD_VAR 0 2
29005: PUSH
29006: LD_VAR 0 4
29010: ARRAY
29011: PUSH
29012: LD_VAR 0 2
29016: PUSH
29017: LD_VAR 0 4
29021: ARRAY
29022: PPUSH
29023: CALL_OW 255
29027: PUSH
29028: EMPTY
29029: LIST
29030: LIST
29031: PPUSH
29032: CALL 36722 0 3
29036: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29037: LD_VAR 0 2
29041: PUSH
29042: LD_VAR 0 4
29046: ARRAY
29047: PPUSH
29048: LD_VAR 0 1
29052: PPUSH
29053: CALL_OW 255
29057: PPUSH
29058: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29062: LD_VAR 0 2
29066: PUSH
29067: LD_VAR 0 4
29071: ARRAY
29072: PPUSH
29073: CALL_OW 141
// end ;
29077: GO 28909
29079: POP
29080: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29081: LD_VAR 0 1
29085: PPUSH
29086: LD_EXP 114
29090: PUSH
29091: LD_VAR 0 5
29095: ARRAY
29096: PUSH
29097: LD_INT 0
29099: PLUS
29100: PPUSH
29101: CALL_OW 505
// end ;
29105: LD_VAR 0 3
29109: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29110: LD_INT 0
29112: PPUSH
29113: PPUSH
29114: PPUSH
29115: PPUSH
// if not hack in hackTanks then
29116: LD_VAR 0 1
29120: PUSH
29121: LD_EXP 113
29125: IN
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29371
// index := GetElementIndex ( hackTanks , hack ) ;
29131: LD_ADDR_VAR 0 4
29135: PUSH
29136: LD_EXP 113
29140: PPUSH
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL 36507 0 2
29150: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29151: LD_ADDR_VAR 0 3
29155: PUSH
29156: DOUBLE
29157: LD_EXP 114
29161: PUSH
29162: LD_VAR 0 4
29166: ARRAY
29167: INC
29168: ST_TO_ADDR
29169: LD_INT 1
29171: PUSH
29172: FOR_DOWNTO
29173: IFFALSE 29345
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29175: LD_ADDR_VAR 0 5
29179: PUSH
29180: LD_EXP 114
29184: PUSH
29185: LD_VAR 0 4
29189: ARRAY
29190: PUSH
29191: LD_VAR 0 3
29195: ARRAY
29196: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29197: LD_VAR 0 5
29201: PUSH
29202: LD_INT 1
29204: ARRAY
29205: PPUSH
29206: CALL_OW 302
29210: NOT
29211: PUSH
29212: LD_VAR 0 5
29216: PUSH
29217: LD_INT 1
29219: ARRAY
29220: PPUSH
29221: CALL_OW 255
29225: PUSH
29226: LD_VAR 0 1
29230: PPUSH
29231: CALL_OW 255
29235: NONEQUAL
29236: OR
29237: IFFALSE 29343
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29239: LD_VAR 0 5
29243: PUSH
29244: LD_INT 1
29246: ARRAY
29247: PPUSH
29248: CALL_OW 305
29252: PUSH
29253: LD_VAR 0 5
29257: PUSH
29258: LD_INT 1
29260: ARRAY
29261: PPUSH
29262: CALL_OW 255
29266: PUSH
29267: LD_VAR 0 1
29271: PPUSH
29272: CALL_OW 255
29276: EQUAL
29277: AND
29278: IFFALSE 29302
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29280: LD_VAR 0 5
29284: PUSH
29285: LD_INT 1
29287: ARRAY
29288: PPUSH
29289: LD_VAR 0 5
29293: PUSH
29294: LD_INT 2
29296: ARRAY
29297: PPUSH
29298: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29302: LD_ADDR_EXP 114
29306: PUSH
29307: LD_EXP 114
29311: PPUSH
29312: LD_VAR 0 4
29316: PPUSH
29317: LD_EXP 114
29321: PUSH
29322: LD_VAR 0 4
29326: ARRAY
29327: PPUSH
29328: LD_VAR 0 3
29332: PPUSH
29333: CALL_OW 3
29337: PPUSH
29338: CALL_OW 1
29342: ST_TO_ADDR
// end ; end ;
29343: GO 29172
29345: POP
29346: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29347: LD_VAR 0 1
29351: PPUSH
29352: LD_EXP 114
29356: PUSH
29357: LD_VAR 0 4
29361: ARRAY
29362: PUSH
29363: LD_INT 0
29365: PLUS
29366: PPUSH
29367: CALL_OW 505
// end ;
29371: LD_VAR 0 2
29375: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29376: LD_INT 0
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
// if not hack in hackTanks then
29382: LD_VAR 0 1
29386: PUSH
29387: LD_EXP 113
29391: IN
29392: NOT
29393: IFFALSE 29397
// exit ;
29395: GO 29482
// index := GetElementIndex ( hackTanks , hack ) ;
29397: LD_ADDR_VAR 0 5
29401: PUSH
29402: LD_EXP 113
29406: PPUSH
29407: LD_VAR 0 1
29411: PPUSH
29412: CALL 36507 0 2
29416: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29417: LD_ADDR_VAR 0 4
29421: PUSH
29422: DOUBLE
29423: LD_INT 1
29425: DEC
29426: ST_TO_ADDR
29427: LD_EXP 114
29431: PUSH
29432: LD_VAR 0 5
29436: ARRAY
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29480
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29441: LD_EXP 114
29445: PUSH
29446: LD_VAR 0 5
29450: ARRAY
29451: PUSH
29452: LD_VAR 0 4
29456: ARRAY
29457: PUSH
29458: LD_INT 1
29460: ARRAY
29461: PUSH
29462: LD_VAR 0 2
29466: EQUAL
29467: IFFALSE 29478
// KillUnit ( vehicle ) ;
29469: LD_VAR 0 2
29473: PPUSH
29474: CALL_OW 66
29478: GO 29438
29480: POP
29481: POP
// end ;
29482: LD_VAR 0 3
29486: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29487: LD_EXP 118
29491: NOT
29492: IFFALSE 29527
29494: GO 29496
29496: DISABLE
// begin initMiner := true ;
29497: LD_ADDR_EXP 118
29501: PUSH
29502: LD_INT 1
29504: ST_TO_ADDR
// minersList := [ ] ;
29505: LD_ADDR_EXP 119
29509: PUSH
29510: EMPTY
29511: ST_TO_ADDR
// minerMinesList := [ ] ;
29512: LD_ADDR_EXP 120
29516: PUSH
29517: EMPTY
29518: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29519: LD_ADDR_EXP 121
29523: PUSH
29524: LD_INT 5
29526: ST_TO_ADDR
// end ;
29527: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29528: LD_EXP 118
29532: PUSH
29533: LD_INT 34
29535: PUSH
29536: LD_EXP 129
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PPUSH
29545: CALL_OW 69
29549: AND
29550: IFFALSE 30013
29552: GO 29554
29554: DISABLE
29555: LD_INT 0
29557: PPUSH
29558: PPUSH
29559: PPUSH
29560: PPUSH
// begin enable ;
29561: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29562: LD_ADDR_VAR 0 1
29566: PUSH
29567: LD_INT 34
29569: PUSH
29570: LD_EXP 129
29574: PUSH
29575: EMPTY
29576: LIST
29577: LIST
29578: PPUSH
29579: CALL_OW 69
29583: PUSH
29584: FOR_IN
29585: IFFALSE 29657
// begin if not i in minersList then
29587: LD_VAR 0 1
29591: PUSH
29592: LD_EXP 119
29596: IN
29597: NOT
29598: IFFALSE 29655
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29600: LD_ADDR_EXP 119
29604: PUSH
29605: LD_EXP 119
29609: PPUSH
29610: LD_EXP 119
29614: PUSH
29615: LD_INT 1
29617: PLUS
29618: PPUSH
29619: LD_VAR 0 1
29623: PPUSH
29624: CALL_OW 1
29628: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29629: LD_ADDR_EXP 120
29633: PUSH
29634: LD_EXP 120
29638: PPUSH
29639: LD_EXP 120
29643: PUSH
29644: LD_INT 1
29646: PLUS
29647: PPUSH
29648: EMPTY
29649: PPUSH
29650: CALL_OW 1
29654: ST_TO_ADDR
// end end ;
29655: GO 29584
29657: POP
29658: POP
// for i := minerMinesList downto 1 do
29659: LD_ADDR_VAR 0 1
29663: PUSH
29664: DOUBLE
29665: LD_EXP 120
29669: INC
29670: ST_TO_ADDR
29671: LD_INT 1
29673: PUSH
29674: FOR_DOWNTO
29675: IFFALSE 30011
// begin if IsLive ( minersList [ i ] ) then
29677: LD_EXP 119
29681: PUSH
29682: LD_VAR 0 1
29686: ARRAY
29687: PPUSH
29688: CALL_OW 300
29692: IFFALSE 29720
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29694: LD_EXP 119
29698: PUSH
29699: LD_VAR 0 1
29703: ARRAY
29704: PPUSH
29705: LD_EXP 120
29709: PUSH
29710: LD_VAR 0 1
29714: ARRAY
29715: PPUSH
29716: CALL_OW 505
// if not minerMinesList [ i ] then
29720: LD_EXP 120
29724: PUSH
29725: LD_VAR 0 1
29729: ARRAY
29730: NOT
29731: IFFALSE 29735
// continue ;
29733: GO 29674
// for j := minerMinesList [ i ] downto 1 do
29735: LD_ADDR_VAR 0 2
29739: PUSH
29740: DOUBLE
29741: LD_EXP 120
29745: PUSH
29746: LD_VAR 0 1
29750: ARRAY
29751: INC
29752: ST_TO_ADDR
29753: LD_INT 1
29755: PUSH
29756: FOR_DOWNTO
29757: IFFALSE 30007
// begin side := GetSide ( minersList [ i ] ) ;
29759: LD_ADDR_VAR 0 3
29763: PUSH
29764: LD_EXP 119
29768: PUSH
29769: LD_VAR 0 1
29773: ARRAY
29774: PPUSH
29775: CALL_OW 255
29779: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29780: LD_ADDR_VAR 0 4
29784: PUSH
29785: LD_EXP 120
29789: PUSH
29790: LD_VAR 0 1
29794: ARRAY
29795: PUSH
29796: LD_VAR 0 2
29800: ARRAY
29801: PUSH
29802: LD_INT 1
29804: ARRAY
29805: PPUSH
29806: LD_EXP 120
29810: PUSH
29811: LD_VAR 0 1
29815: ARRAY
29816: PUSH
29817: LD_VAR 0 2
29821: ARRAY
29822: PUSH
29823: LD_INT 2
29825: ARRAY
29826: PPUSH
29827: CALL_OW 428
29831: ST_TO_ADDR
// if not tmp then
29832: LD_VAR 0 4
29836: NOT
29837: IFFALSE 29841
// continue ;
29839: GO 29756
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
29841: LD_VAR 0 4
29845: PUSH
29846: LD_INT 81
29848: PUSH
29849: LD_VAR 0 3
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PPUSH
29858: CALL_OW 69
29862: IN
29863: PUSH
29864: LD_EXP 120
29868: PUSH
29869: LD_VAR 0 1
29873: ARRAY
29874: PUSH
29875: LD_VAR 0 2
29879: ARRAY
29880: PUSH
29881: LD_INT 1
29883: ARRAY
29884: PPUSH
29885: LD_EXP 120
29889: PUSH
29890: LD_VAR 0 1
29894: ARRAY
29895: PUSH
29896: LD_VAR 0 2
29900: ARRAY
29901: PUSH
29902: LD_INT 2
29904: ARRAY
29905: PPUSH
29906: CALL_OW 458
29910: AND
29911: IFFALSE 30005
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
29913: LD_EXP 120
29917: PUSH
29918: LD_VAR 0 1
29922: ARRAY
29923: PUSH
29924: LD_VAR 0 2
29928: ARRAY
29929: PUSH
29930: LD_INT 1
29932: ARRAY
29933: PPUSH
29934: LD_EXP 120
29938: PUSH
29939: LD_VAR 0 1
29943: ARRAY
29944: PUSH
29945: LD_VAR 0 2
29949: ARRAY
29950: PUSH
29951: LD_INT 2
29953: ARRAY
29954: PPUSH
29955: LD_VAR 0 3
29959: PPUSH
29960: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
29964: LD_ADDR_EXP 120
29968: PUSH
29969: LD_EXP 120
29973: PPUSH
29974: LD_VAR 0 1
29978: PPUSH
29979: LD_EXP 120
29983: PUSH
29984: LD_VAR 0 1
29988: ARRAY
29989: PPUSH
29990: LD_VAR 0 2
29994: PPUSH
29995: CALL_OW 3
29999: PPUSH
30000: CALL_OW 1
30004: ST_TO_ADDR
// end ; end ;
30005: GO 29756
30007: POP
30008: POP
// end ;
30009: GO 29674
30011: POP
30012: POP
// end ;
30013: PPOPN 4
30015: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30016: LD_INT 0
30018: PPUSH
30019: PPUSH
// result := false ;
30020: LD_ADDR_VAR 0 4
30024: PUSH
30025: LD_INT 0
30027: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30028: LD_VAR 0 1
30032: PPUSH
30033: CALL_OW 264
30037: PUSH
30038: LD_EXP 129
30042: EQUAL
30043: NOT
30044: IFFALSE 30048
// exit ;
30046: GO 30288
// index := GetElementIndex ( minersList , unit ) ;
30048: LD_ADDR_VAR 0 5
30052: PUSH
30053: LD_EXP 119
30057: PPUSH
30058: LD_VAR 0 1
30062: PPUSH
30063: CALL 36507 0 2
30067: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30068: LD_EXP 120
30072: PUSH
30073: LD_VAR 0 5
30077: ARRAY
30078: PUSH
30079: LD_EXP 121
30083: GREATEREQUAL
30084: IFFALSE 30088
// exit ;
30086: GO 30288
// ComMoveXY ( unit , x , y ) ;
30088: LD_VAR 0 1
30092: PPUSH
30093: LD_VAR 0 2
30097: PPUSH
30098: LD_VAR 0 3
30102: PPUSH
30103: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30107: LD_INT 35
30109: PPUSH
30110: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30114: LD_VAR 0 1
30118: PPUSH
30119: LD_VAR 0 2
30123: PPUSH
30124: LD_VAR 0 3
30128: PPUSH
30129: CALL 66571 0 3
30133: NOT
30134: PUSH
30135: LD_VAR 0 1
30139: PPUSH
30140: CALL_OW 314
30144: AND
30145: IFFALSE 30149
// exit ;
30147: GO 30288
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30149: LD_VAR 0 2
30153: PPUSH
30154: LD_VAR 0 3
30158: PPUSH
30159: CALL_OW 428
30163: PUSH
30164: LD_VAR 0 1
30168: EQUAL
30169: PUSH
30170: LD_VAR 0 1
30174: PPUSH
30175: CALL_OW 314
30179: NOT
30180: AND
30181: IFFALSE 30107
// PlaySoundXY ( x , y , PlantMine ) ;
30183: LD_VAR 0 2
30187: PPUSH
30188: LD_VAR 0 3
30192: PPUSH
30193: LD_STRING PlantMine
30195: PPUSH
30196: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30200: LD_VAR 0 2
30204: PPUSH
30205: LD_VAR 0 3
30209: PPUSH
30210: LD_VAR 0 1
30214: PPUSH
30215: CALL_OW 255
30219: PPUSH
30220: LD_INT 0
30222: PPUSH
30223: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30227: LD_ADDR_EXP 120
30231: PUSH
30232: LD_EXP 120
30236: PPUSH
30237: LD_VAR 0 5
30241: PUSH
30242: LD_EXP 120
30246: PUSH
30247: LD_VAR 0 5
30251: ARRAY
30252: PUSH
30253: LD_INT 1
30255: PLUS
30256: PUSH
30257: EMPTY
30258: LIST
30259: LIST
30260: PPUSH
30261: LD_VAR 0 2
30265: PUSH
30266: LD_VAR 0 3
30270: PUSH
30271: EMPTY
30272: LIST
30273: LIST
30274: PPUSH
30275: CALL 36722 0 3
30279: ST_TO_ADDR
// result := true ;
30280: LD_ADDR_VAR 0 4
30284: PUSH
30285: LD_INT 1
30287: ST_TO_ADDR
// end ;
30288: LD_VAR 0 4
30292: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30293: LD_INT 0
30295: PPUSH
30296: PPUSH
30297: PPUSH
// if not unit in minersList then
30298: LD_VAR 0 1
30302: PUSH
30303: LD_EXP 119
30307: IN
30308: NOT
30309: IFFALSE 30313
// exit ;
30311: GO 30705
// index := GetElementIndex ( minersList , unit ) ;
30313: LD_ADDR_VAR 0 6
30317: PUSH
30318: LD_EXP 119
30322: PPUSH
30323: LD_VAR 0 1
30327: PPUSH
30328: CALL 36507 0 2
30332: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30333: LD_ADDR_VAR 0 5
30337: PUSH
30338: DOUBLE
30339: LD_EXP 120
30343: PUSH
30344: LD_VAR 0 6
30348: ARRAY
30349: INC
30350: ST_TO_ADDR
30351: LD_INT 1
30353: PUSH
30354: FOR_DOWNTO
30355: IFFALSE 30516
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30357: LD_EXP 120
30361: PUSH
30362: LD_VAR 0 6
30366: ARRAY
30367: PUSH
30368: LD_VAR 0 5
30372: ARRAY
30373: PUSH
30374: LD_INT 1
30376: ARRAY
30377: PUSH
30378: LD_VAR 0 2
30382: EQUAL
30383: PUSH
30384: LD_EXP 120
30388: PUSH
30389: LD_VAR 0 6
30393: ARRAY
30394: PUSH
30395: LD_VAR 0 5
30399: ARRAY
30400: PUSH
30401: LD_INT 2
30403: ARRAY
30404: PUSH
30405: LD_VAR 0 3
30409: EQUAL
30410: AND
30411: IFFALSE 30514
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30413: LD_EXP 120
30417: PUSH
30418: LD_VAR 0 6
30422: ARRAY
30423: PUSH
30424: LD_VAR 0 5
30428: ARRAY
30429: PUSH
30430: LD_INT 1
30432: ARRAY
30433: PPUSH
30434: LD_EXP 120
30438: PUSH
30439: LD_VAR 0 6
30443: ARRAY
30444: PUSH
30445: LD_VAR 0 5
30449: ARRAY
30450: PUSH
30451: LD_INT 2
30453: ARRAY
30454: PPUSH
30455: LD_VAR 0 1
30459: PPUSH
30460: CALL_OW 255
30464: PPUSH
30465: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30469: LD_ADDR_EXP 120
30473: PUSH
30474: LD_EXP 120
30478: PPUSH
30479: LD_VAR 0 6
30483: PPUSH
30484: LD_EXP 120
30488: PUSH
30489: LD_VAR 0 6
30493: ARRAY
30494: PPUSH
30495: LD_VAR 0 5
30499: PPUSH
30500: CALL_OW 3
30504: PPUSH
30505: CALL_OW 1
30509: ST_TO_ADDR
// exit ;
30510: POP
30511: POP
30512: GO 30705
// end ; end ;
30514: GO 30354
30516: POP
30517: POP
// for i := minerMinesList [ index ] downto 1 do
30518: LD_ADDR_VAR 0 5
30522: PUSH
30523: DOUBLE
30524: LD_EXP 120
30528: PUSH
30529: LD_VAR 0 6
30533: ARRAY
30534: INC
30535: ST_TO_ADDR
30536: LD_INT 1
30538: PUSH
30539: FOR_DOWNTO
30540: IFFALSE 30703
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30542: LD_EXP 120
30546: PUSH
30547: LD_VAR 0 6
30551: ARRAY
30552: PUSH
30553: LD_VAR 0 5
30557: ARRAY
30558: PUSH
30559: LD_INT 1
30561: ARRAY
30562: PPUSH
30563: LD_EXP 120
30567: PUSH
30568: LD_VAR 0 6
30572: ARRAY
30573: PUSH
30574: LD_VAR 0 5
30578: ARRAY
30579: PUSH
30580: LD_INT 2
30582: ARRAY
30583: PPUSH
30584: LD_VAR 0 2
30588: PPUSH
30589: LD_VAR 0 3
30593: PPUSH
30594: CALL_OW 298
30598: PUSH
30599: LD_INT 6
30601: LESS
30602: IFFALSE 30701
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30604: LD_EXP 120
30608: PUSH
30609: LD_VAR 0 6
30613: ARRAY
30614: PUSH
30615: LD_VAR 0 5
30619: ARRAY
30620: PUSH
30621: LD_INT 1
30623: ARRAY
30624: PPUSH
30625: LD_EXP 120
30629: PUSH
30630: LD_VAR 0 6
30634: ARRAY
30635: PUSH
30636: LD_VAR 0 5
30640: ARRAY
30641: PUSH
30642: LD_INT 2
30644: ARRAY
30645: PPUSH
30646: LD_VAR 0 1
30650: PPUSH
30651: CALL_OW 255
30655: PPUSH
30656: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30660: LD_ADDR_EXP 120
30664: PUSH
30665: LD_EXP 120
30669: PPUSH
30670: LD_VAR 0 6
30674: PPUSH
30675: LD_EXP 120
30679: PUSH
30680: LD_VAR 0 6
30684: ARRAY
30685: PPUSH
30686: LD_VAR 0 5
30690: PPUSH
30691: CALL_OW 3
30695: PPUSH
30696: CALL_OW 1
30700: ST_TO_ADDR
// end ; end ;
30701: GO 30539
30703: POP
30704: POP
// end ;
30705: LD_VAR 0 4
30709: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30710: LD_INT 0
30712: PPUSH
30713: PPUSH
30714: PPUSH
30715: PPUSH
30716: PPUSH
30717: PPUSH
30718: PPUSH
30719: PPUSH
30720: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30721: LD_VAR 0 1
30725: PPUSH
30726: CALL_OW 264
30730: PUSH
30731: LD_EXP 129
30735: EQUAL
30736: NOT
30737: PUSH
30738: LD_VAR 0 1
30742: PUSH
30743: LD_EXP 119
30747: IN
30748: NOT
30749: OR
30750: IFFALSE 30754
// exit ;
30752: GO 31076
// index := GetElementIndex ( minersList , unit ) ;
30754: LD_ADDR_VAR 0 6
30758: PUSH
30759: LD_EXP 119
30763: PPUSH
30764: LD_VAR 0 1
30768: PPUSH
30769: CALL 36507 0 2
30773: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30774: LD_ADDR_VAR 0 8
30778: PUSH
30779: LD_EXP 121
30783: PUSH
30784: LD_EXP 120
30788: PUSH
30789: LD_VAR 0 6
30793: ARRAY
30794: MINUS
30795: ST_TO_ADDR
// if not minesFreeAmount then
30796: LD_VAR 0 8
30800: NOT
30801: IFFALSE 30805
// exit ;
30803: GO 31076
// tmp := [ ] ;
30805: LD_ADDR_VAR 0 7
30809: PUSH
30810: EMPTY
30811: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30812: LD_ADDR_VAR 0 5
30816: PUSH
30817: DOUBLE
30818: LD_INT 1
30820: DEC
30821: ST_TO_ADDR
30822: LD_VAR 0 8
30826: PUSH
30827: FOR_TO
30828: IFFALSE 31023
// begin _d := rand ( 0 , 5 ) ;
30830: LD_ADDR_VAR 0 11
30834: PUSH
30835: LD_INT 0
30837: PPUSH
30838: LD_INT 5
30840: PPUSH
30841: CALL_OW 12
30845: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
30846: LD_ADDR_VAR 0 12
30850: PUSH
30851: LD_INT 2
30853: PPUSH
30854: LD_INT 6
30856: PPUSH
30857: CALL_OW 12
30861: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
30862: LD_ADDR_VAR 0 9
30866: PUSH
30867: LD_VAR 0 2
30871: PPUSH
30872: LD_VAR 0 11
30876: PPUSH
30877: LD_VAR 0 12
30881: PPUSH
30882: CALL_OW 272
30886: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
30887: LD_ADDR_VAR 0 10
30891: PUSH
30892: LD_VAR 0 3
30896: PPUSH
30897: LD_VAR 0 11
30901: PPUSH
30902: LD_VAR 0 12
30906: PPUSH
30907: CALL_OW 273
30911: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
30912: LD_VAR 0 9
30916: PPUSH
30917: LD_VAR 0 10
30921: PPUSH
30922: CALL_OW 488
30926: PUSH
30927: LD_VAR 0 9
30931: PUSH
30932: LD_VAR 0 10
30936: PUSH
30937: EMPTY
30938: LIST
30939: LIST
30940: PUSH
30941: LD_VAR 0 7
30945: IN
30946: NOT
30947: AND
30948: PUSH
30949: LD_VAR 0 9
30953: PPUSH
30954: LD_VAR 0 10
30958: PPUSH
30959: CALL_OW 458
30963: NOT
30964: AND
30965: IFFALSE 31007
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
30967: LD_ADDR_VAR 0 7
30971: PUSH
30972: LD_VAR 0 7
30976: PPUSH
30977: LD_VAR 0 7
30981: PUSH
30982: LD_INT 1
30984: PLUS
30985: PPUSH
30986: LD_VAR 0 9
30990: PUSH
30991: LD_VAR 0 10
30995: PUSH
30996: EMPTY
30997: LIST
30998: LIST
30999: PPUSH
31000: CALL_OW 1
31004: ST_TO_ADDR
31005: GO 31021
// i := i - 1 ;
31007: LD_ADDR_VAR 0 5
31011: PUSH
31012: LD_VAR 0 5
31016: PUSH
31017: LD_INT 1
31019: MINUS
31020: ST_TO_ADDR
// end ;
31021: GO 30827
31023: POP
31024: POP
// for i in tmp do
31025: LD_ADDR_VAR 0 5
31029: PUSH
31030: LD_VAR 0 7
31034: PUSH
31035: FOR_IN
31036: IFFALSE 31074
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31038: LD_VAR 0 1
31042: PPUSH
31043: LD_VAR 0 5
31047: PUSH
31048: LD_INT 1
31050: ARRAY
31051: PPUSH
31052: LD_VAR 0 5
31056: PUSH
31057: LD_INT 2
31059: ARRAY
31060: PPUSH
31061: CALL 30016 0 3
31065: NOT
31066: IFFALSE 31072
// exit ;
31068: POP
31069: POP
31070: GO 31076
31072: GO 31035
31074: POP
31075: POP
// end ;
31076: LD_VAR 0 4
31080: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31081: LD_INT 0
31083: PPUSH
31084: PPUSH
31085: PPUSH
31086: PPUSH
31087: PPUSH
31088: PPUSH
31089: PPUSH
// if not GetClass ( unit ) = class_sniper then
31090: LD_VAR 0 1
31094: PPUSH
31095: CALL_OW 257
31099: PUSH
31100: LD_INT 5
31102: EQUAL
31103: NOT
31104: IFFALSE 31108
// exit ;
31106: GO 31496
// dist := 8 ;
31108: LD_ADDR_VAR 0 5
31112: PUSH
31113: LD_INT 8
31115: ST_TO_ADDR
// viewRange := 12 ;
31116: LD_ADDR_VAR 0 7
31120: PUSH
31121: LD_INT 12
31123: ST_TO_ADDR
// side := GetSide ( unit ) ;
31124: LD_ADDR_VAR 0 6
31128: PUSH
31129: LD_VAR 0 1
31133: PPUSH
31134: CALL_OW 255
31138: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31139: LD_INT 61
31141: PPUSH
31142: LD_VAR 0 6
31146: PPUSH
31147: CALL_OW 321
31151: PUSH
31152: LD_INT 2
31154: EQUAL
31155: IFFALSE 31165
// viewRange := 16 ;
31157: LD_ADDR_VAR 0 7
31161: PUSH
31162: LD_INT 16
31164: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31165: LD_VAR 0 1
31169: PPUSH
31170: LD_VAR 0 2
31174: PPUSH
31175: LD_VAR 0 3
31179: PPUSH
31180: CALL_OW 297
31184: PUSH
31185: LD_VAR 0 5
31189: GREATER
31190: IFFALSE 31269
// begin ComMoveXY ( unit , x , y ) ;
31192: LD_VAR 0 1
31196: PPUSH
31197: LD_VAR 0 2
31201: PPUSH
31202: LD_VAR 0 3
31206: PPUSH
31207: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31211: LD_INT 35
31213: PPUSH
31214: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31218: LD_VAR 0 1
31222: PPUSH
31223: LD_VAR 0 2
31227: PPUSH
31228: LD_VAR 0 3
31232: PPUSH
31233: CALL 66571 0 3
31237: NOT
31238: IFFALSE 31242
// exit ;
31240: GO 31496
// until GetDistUnitXY ( unit , x , y ) < dist ;
31242: LD_VAR 0 1
31246: PPUSH
31247: LD_VAR 0 2
31251: PPUSH
31252: LD_VAR 0 3
31256: PPUSH
31257: CALL_OW 297
31261: PUSH
31262: LD_VAR 0 5
31266: LESS
31267: IFFALSE 31211
// end ; ComTurnXY ( unit , x , y ) ;
31269: LD_VAR 0 1
31273: PPUSH
31274: LD_VAR 0 2
31278: PPUSH
31279: LD_VAR 0 3
31283: PPUSH
31284: CALL_OW 118
// wait ( 5 ) ;
31288: LD_INT 5
31290: PPUSH
31291: CALL_OW 67
// _d := GetDir ( unit ) ;
31295: LD_ADDR_VAR 0 10
31299: PUSH
31300: LD_VAR 0 1
31304: PPUSH
31305: CALL_OW 254
31309: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31310: LD_ADDR_VAR 0 8
31314: PUSH
31315: LD_VAR 0 1
31319: PPUSH
31320: CALL_OW 250
31324: PPUSH
31325: LD_VAR 0 10
31329: PPUSH
31330: LD_VAR 0 5
31334: PPUSH
31335: CALL_OW 272
31339: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31340: LD_ADDR_VAR 0 9
31344: PUSH
31345: LD_VAR 0 1
31349: PPUSH
31350: CALL_OW 251
31354: PPUSH
31355: LD_VAR 0 10
31359: PPUSH
31360: LD_VAR 0 5
31364: PPUSH
31365: CALL_OW 273
31369: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31370: LD_VAR 0 8
31374: PPUSH
31375: LD_VAR 0 9
31379: PPUSH
31380: CALL_OW 488
31384: NOT
31385: IFFALSE 31389
// exit ;
31387: GO 31496
// ComAnimCustom ( unit , 1 ) ;
31389: LD_VAR 0 1
31393: PPUSH
31394: LD_INT 1
31396: PPUSH
31397: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31401: LD_VAR 0 8
31405: PPUSH
31406: LD_VAR 0 9
31410: PPUSH
31411: LD_VAR 0 6
31415: PPUSH
31416: LD_VAR 0 7
31420: PPUSH
31421: CALL_OW 330
// repeat wait ( 1 ) ;
31425: LD_INT 1
31427: PPUSH
31428: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31432: LD_VAR 0 1
31436: PPUSH
31437: CALL_OW 316
31441: PUSH
31442: LD_VAR 0 1
31446: PPUSH
31447: CALL_OW 314
31451: OR
31452: PUSH
31453: LD_VAR 0 1
31457: PPUSH
31458: CALL_OW 302
31462: NOT
31463: OR
31464: PUSH
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL_OW 301
31474: OR
31475: IFFALSE 31425
// RemoveSeeing ( _x , _y , side ) ;
31477: LD_VAR 0 8
31481: PPUSH
31482: LD_VAR 0 9
31486: PPUSH
31487: LD_VAR 0 6
31491: PPUSH
31492: CALL_OW 331
// end ; end_of_file
31496: LD_VAR 0 4
31500: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31501: LD_VAR 0 1
31505: PUSH
31506: LD_INT 200
31508: DOUBLE
31509: GREATEREQUAL
31510: IFFALSE 31518
31512: LD_INT 299
31514: DOUBLE
31515: LESSEQUAL
31516: IFTRUE 31520
31518: GO 31552
31520: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
31521: LD_VAR 0 1
31525: PPUSH
31526: LD_VAR 0 2
31530: PPUSH
31531: LD_VAR 0 3
31535: PPUSH
31536: LD_VAR 0 4
31540: PPUSH
31541: LD_VAR 0 5
31545: PPUSH
31546: CALL 27626 0 5
31550: GO 31629
31552: LD_INT 300
31554: DOUBLE
31555: GREATEREQUAL
31556: IFFALSE 31564
31558: LD_INT 399
31560: DOUBLE
31561: LESSEQUAL
31562: IFTRUE 31566
31564: GO 31628
31566: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
31567: LD_VAR 0 1
31571: PPUSH
31572: LD_VAR 0 2
31576: PPUSH
31577: LD_VAR 0 3
31581: PPUSH
31582: LD_VAR 0 4
31586: PPUSH
31587: LD_VAR 0 5
31591: PPUSH
31592: LD_VAR 0 6
31596: PPUSH
31597: LD_VAR 0 7
31601: PPUSH
31602: LD_VAR 0 8
31606: PPUSH
31607: LD_VAR 0 9
31611: PPUSH
31612: LD_VAR 0 10
31616: PPUSH
31617: LD_VAR 0 11
31621: PPUSH
31622: CALL 25532 0 11
31626: GO 31629
31628: POP
// end ; end_of_file end_of_file
31629: PPOPN 11
31631: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
31632: LD_INT 0
31634: PPUSH
// ar_miner := 81 ;
31635: LD_ADDR_EXP 129
31639: PUSH
31640: LD_INT 81
31642: ST_TO_ADDR
// ar_crane := 88 ;
31643: LD_ADDR_EXP 128
31647: PUSH
31648: LD_INT 88
31650: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31651: LD_ADDR_EXP 123
31655: PUSH
31656: LD_INT 89
31658: ST_TO_ADDR
// us_hack := 99 ;
31659: LD_ADDR_EXP 124
31663: PUSH
31664: LD_INT 99
31666: ST_TO_ADDR
// us_artillery := 97 ;
31667: LD_ADDR_EXP 125
31671: PUSH
31672: LD_INT 97
31674: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31675: LD_ADDR_EXP 126
31679: PUSH
31680: LD_INT 91
31682: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
31683: LD_ADDR_EXP 127
31687: PUSH
31688: LD_INT 92
31690: ST_TO_ADDR
// ru_radar := 98 ;
31691: LD_ADDR_EXP 122
31695: PUSH
31696: LD_INT 98
31698: ST_TO_ADDR
// tech_Artillery := 80 ;
31699: LD_ADDR_EXP 130
31703: PUSH
31704: LD_INT 80
31706: ST_TO_ADDR
// tech_RadMat := 81 ;
31707: LD_ADDR_EXP 131
31711: PUSH
31712: LD_INT 81
31714: ST_TO_ADDR
// tech_BasicTools := 82 ;
31715: LD_ADDR_EXP 132
31719: PUSH
31720: LD_INT 82
31722: ST_TO_ADDR
// tech_Cargo := 83 ;
31723: LD_ADDR_EXP 133
31727: PUSH
31728: LD_INT 83
31730: ST_TO_ADDR
// tech_Track := 84 ;
31731: LD_ADDR_EXP 134
31735: PUSH
31736: LD_INT 84
31738: ST_TO_ADDR
// tech_Crane := 85 ;
31739: LD_ADDR_EXP 135
31743: PUSH
31744: LD_INT 85
31746: ST_TO_ADDR
// tech_Bulldozer := 86 ;
31747: LD_ADDR_EXP 136
31751: PUSH
31752: LD_INT 86
31754: ST_TO_ADDR
// tech_Hovercraft := 87 ;
31755: LD_ADDR_EXP 137
31759: PUSH
31760: LD_INT 87
31762: ST_TO_ADDR
// end ;
31763: LD_VAR 0 1
31767: RET
// every 1 do
31768: GO 31770
31770: DISABLE
// InitGlobalVariables ; end_of_file
31771: CALL 31632 0 0
31775: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31776: LD_INT 0
31778: PPUSH
31779: PPUSH
// if exist_mode then
31780: LD_VAR 0 2
31784: IFFALSE 31809
// unit := CreateCharacter ( prefix & ident ) else
31786: LD_ADDR_VAR 0 5
31790: PUSH
31791: LD_VAR 0 3
31795: PUSH
31796: LD_VAR 0 1
31800: STR
31801: PPUSH
31802: CALL_OW 34
31806: ST_TO_ADDR
31807: GO 31824
// unit := NewCharacter ( ident ) ;
31809: LD_ADDR_VAR 0 5
31813: PUSH
31814: LD_VAR 0 1
31818: PPUSH
31819: CALL_OW 25
31823: ST_TO_ADDR
// result := unit ;
31824: LD_ADDR_VAR 0 4
31828: PUSH
31829: LD_VAR 0 5
31833: ST_TO_ADDR
// end ;
31834: LD_VAR 0 4
31838: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
31839: LD_INT 0
31841: PPUSH
31842: PPUSH
// if not side or not nation then
31843: LD_VAR 0 1
31847: NOT
31848: PUSH
31849: LD_VAR 0 2
31853: NOT
31854: OR
31855: IFFALSE 31859
// exit ;
31857: GO 32623
// case nation of nation_american :
31859: LD_VAR 0 2
31863: PUSH
31864: LD_INT 1
31866: DOUBLE
31867: EQUAL
31868: IFTRUE 31872
31870: GO 32086
31872: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
31873: LD_ADDR_VAR 0 4
31877: PUSH
31878: LD_INT 35
31880: PUSH
31881: LD_INT 45
31883: PUSH
31884: LD_INT 46
31886: PUSH
31887: LD_INT 47
31889: PUSH
31890: LD_INT 82
31892: PUSH
31893: LD_INT 83
31895: PUSH
31896: LD_INT 84
31898: PUSH
31899: LD_INT 85
31901: PUSH
31902: LD_INT 86
31904: PUSH
31905: LD_INT 1
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: LD_INT 6
31913: PUSH
31914: LD_INT 15
31916: PUSH
31917: LD_INT 16
31919: PUSH
31920: LD_INT 7
31922: PUSH
31923: LD_INT 12
31925: PUSH
31926: LD_INT 13
31928: PUSH
31929: LD_INT 10
31931: PUSH
31932: LD_INT 14
31934: PUSH
31935: LD_INT 20
31937: PUSH
31938: LD_INT 21
31940: PUSH
31941: LD_INT 22
31943: PUSH
31944: LD_INT 25
31946: PUSH
31947: LD_INT 32
31949: PUSH
31950: LD_INT 27
31952: PUSH
31953: LD_INT 36
31955: PUSH
31956: LD_INT 69
31958: PUSH
31959: LD_INT 39
31961: PUSH
31962: LD_INT 34
31964: PUSH
31965: LD_INT 40
31967: PUSH
31968: LD_INT 48
31970: PUSH
31971: LD_INT 49
31973: PUSH
31974: LD_INT 50
31976: PUSH
31977: LD_INT 51
31979: PUSH
31980: LD_INT 52
31982: PUSH
31983: LD_INT 53
31985: PUSH
31986: LD_INT 54
31988: PUSH
31989: LD_INT 55
31991: PUSH
31992: LD_INT 56
31994: PUSH
31995: LD_INT 57
31997: PUSH
31998: LD_INT 58
32000: PUSH
32001: LD_INT 59
32003: PUSH
32004: LD_INT 60
32006: PUSH
32007: LD_INT 61
32009: PUSH
32010: LD_INT 62
32012: PUSH
32013: LD_INT 80
32015: PUSH
32016: LD_INT 82
32018: PUSH
32019: LD_INT 83
32021: PUSH
32022: LD_INT 84
32024: PUSH
32025: LD_INT 85
32027: PUSH
32028: LD_INT 86
32030: PUSH
32031: EMPTY
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: ST_TO_ADDR
32084: GO 32547
32086: LD_INT 2
32088: DOUBLE
32089: EQUAL
32090: IFTRUE 32094
32092: GO 32316
32094: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32095: LD_ADDR_VAR 0 4
32099: PUSH
32100: LD_INT 35
32102: PUSH
32103: LD_INT 45
32105: PUSH
32106: LD_INT 46
32108: PUSH
32109: LD_INT 47
32111: PUSH
32112: LD_INT 82
32114: PUSH
32115: LD_INT 83
32117: PUSH
32118: LD_INT 84
32120: PUSH
32121: LD_INT 85
32123: PUSH
32124: LD_INT 87
32126: PUSH
32127: LD_INT 70
32129: PUSH
32130: LD_INT 1
32132: PUSH
32133: LD_INT 11
32135: PUSH
32136: LD_INT 3
32138: PUSH
32139: LD_INT 4
32141: PUSH
32142: LD_INT 5
32144: PUSH
32145: LD_INT 6
32147: PUSH
32148: LD_INT 15
32150: PUSH
32151: LD_INT 18
32153: PUSH
32154: LD_INT 7
32156: PUSH
32157: LD_INT 17
32159: PUSH
32160: LD_INT 8
32162: PUSH
32163: LD_INT 20
32165: PUSH
32166: LD_INT 21
32168: PUSH
32169: LD_INT 22
32171: PUSH
32172: LD_INT 72
32174: PUSH
32175: LD_INT 26
32177: PUSH
32178: LD_INT 69
32180: PUSH
32181: LD_INT 39
32183: PUSH
32184: LD_INT 40
32186: PUSH
32187: LD_INT 41
32189: PUSH
32190: LD_INT 42
32192: PUSH
32193: LD_INT 43
32195: PUSH
32196: LD_INT 48
32198: PUSH
32199: LD_INT 49
32201: PUSH
32202: LD_INT 50
32204: PUSH
32205: LD_INT 51
32207: PUSH
32208: LD_INT 52
32210: PUSH
32211: LD_INT 53
32213: PUSH
32214: LD_INT 54
32216: PUSH
32217: LD_INT 55
32219: PUSH
32220: LD_INT 56
32222: PUSH
32223: LD_INT 60
32225: PUSH
32226: LD_INT 61
32228: PUSH
32229: LD_INT 62
32231: PUSH
32232: LD_INT 66
32234: PUSH
32235: LD_INT 67
32237: PUSH
32238: LD_INT 68
32240: PUSH
32241: LD_INT 81
32243: PUSH
32244: LD_INT 82
32246: PUSH
32247: LD_INT 83
32249: PUSH
32250: LD_INT 84
32252: PUSH
32253: LD_INT 85
32255: PUSH
32256: LD_INT 87
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: ST_TO_ADDR
32314: GO 32547
32316: LD_INT 3
32318: DOUBLE
32319: EQUAL
32320: IFTRUE 32324
32322: GO 32546
32324: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32325: LD_ADDR_VAR 0 4
32329: PUSH
32330: LD_INT 46
32332: PUSH
32333: LD_INT 47
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 2
32341: PUSH
32342: LD_INT 82
32344: PUSH
32345: LD_INT 83
32347: PUSH
32348: LD_INT 84
32350: PUSH
32351: LD_INT 85
32353: PUSH
32354: LD_INT 86
32356: PUSH
32357: LD_INT 11
32359: PUSH
32360: LD_INT 9
32362: PUSH
32363: LD_INT 20
32365: PUSH
32366: LD_INT 19
32368: PUSH
32369: LD_INT 21
32371: PUSH
32372: LD_INT 24
32374: PUSH
32375: LD_INT 22
32377: PUSH
32378: LD_INT 25
32380: PUSH
32381: LD_INT 28
32383: PUSH
32384: LD_INT 29
32386: PUSH
32387: LD_INT 30
32389: PUSH
32390: LD_INT 31
32392: PUSH
32393: LD_INT 37
32395: PUSH
32396: LD_INT 38
32398: PUSH
32399: LD_INT 32
32401: PUSH
32402: LD_INT 27
32404: PUSH
32405: LD_INT 33
32407: PUSH
32408: LD_INT 69
32410: PUSH
32411: LD_INT 39
32413: PUSH
32414: LD_INT 34
32416: PUSH
32417: LD_INT 40
32419: PUSH
32420: LD_INT 71
32422: PUSH
32423: LD_INT 23
32425: PUSH
32426: LD_INT 44
32428: PUSH
32429: LD_INT 48
32431: PUSH
32432: LD_INT 49
32434: PUSH
32435: LD_INT 50
32437: PUSH
32438: LD_INT 51
32440: PUSH
32441: LD_INT 52
32443: PUSH
32444: LD_INT 53
32446: PUSH
32447: LD_INT 54
32449: PUSH
32450: LD_INT 55
32452: PUSH
32453: LD_INT 56
32455: PUSH
32456: LD_INT 57
32458: PUSH
32459: LD_INT 58
32461: PUSH
32462: LD_INT 59
32464: PUSH
32465: LD_INT 63
32467: PUSH
32468: LD_INT 64
32470: PUSH
32471: LD_INT 65
32473: PUSH
32474: LD_INT 82
32476: PUSH
32477: LD_INT 83
32479: PUSH
32480: LD_INT 84
32482: PUSH
32483: LD_INT 85
32485: PUSH
32486: LD_INT 86
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: ST_TO_ADDR
32544: GO 32547
32546: POP
// if state > - 1 and state < 3 then
32547: LD_VAR 0 3
32551: PUSH
32552: LD_INT 1
32554: NEG
32555: GREATER
32556: PUSH
32557: LD_VAR 0 3
32561: PUSH
32562: LD_INT 3
32564: LESS
32565: AND
32566: IFFALSE 32623
// for i in result do
32568: LD_ADDR_VAR 0 5
32572: PUSH
32573: LD_VAR 0 4
32577: PUSH
32578: FOR_IN
32579: IFFALSE 32621
// if GetTech ( i , side ) <> state then
32581: LD_VAR 0 5
32585: PPUSH
32586: LD_VAR 0 1
32590: PPUSH
32591: CALL_OW 321
32595: PUSH
32596: LD_VAR 0 3
32600: NONEQUAL
32601: IFFALSE 32619
// result := result diff i ;
32603: LD_ADDR_VAR 0 4
32607: PUSH
32608: LD_VAR 0 4
32612: PUSH
32613: LD_VAR 0 5
32617: DIFF
32618: ST_TO_ADDR
32619: GO 32578
32621: POP
32622: POP
// end ;
32623: LD_VAR 0 4
32627: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32628: LD_INT 0
32630: PPUSH
32631: PPUSH
32632: PPUSH
// result := true ;
32633: LD_ADDR_VAR 0 3
32637: PUSH
32638: LD_INT 1
32640: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32641: LD_ADDR_VAR 0 5
32645: PUSH
32646: LD_VAR 0 2
32650: PPUSH
32651: CALL_OW 480
32655: ST_TO_ADDR
// if not tmp then
32656: LD_VAR 0 5
32660: NOT
32661: IFFALSE 32665
// exit ;
32663: GO 32714
// for i in tmp do
32665: LD_ADDR_VAR 0 4
32669: PUSH
32670: LD_VAR 0 5
32674: PUSH
32675: FOR_IN
32676: IFFALSE 32712
// if GetTech ( i , side ) <> state_researched then
32678: LD_VAR 0 4
32682: PPUSH
32683: LD_VAR 0 1
32687: PPUSH
32688: CALL_OW 321
32692: PUSH
32693: LD_INT 2
32695: NONEQUAL
32696: IFFALSE 32710
// begin result := false ;
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_INT 0
32705: ST_TO_ADDR
// exit ;
32706: POP
32707: POP
32708: GO 32714
// end ;
32710: GO 32675
32712: POP
32713: POP
// end ;
32714: LD_VAR 0 3
32718: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32719: LD_INT 0
32721: PPUSH
32722: PPUSH
32723: PPUSH
32724: PPUSH
32725: PPUSH
32726: PPUSH
32727: PPUSH
32728: PPUSH
32729: PPUSH
32730: PPUSH
32731: PPUSH
32732: PPUSH
32733: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32734: LD_VAR 0 1
32738: NOT
32739: PUSH
32740: LD_VAR 0 1
32744: PPUSH
32745: CALL_OW 257
32749: PUSH
32750: LD_INT 9
32752: NONEQUAL
32753: OR
32754: IFFALSE 32758
// exit ;
32756: GO 33331
// side := GetSide ( unit ) ;
32758: LD_ADDR_VAR 0 9
32762: PUSH
32763: LD_VAR 0 1
32767: PPUSH
32768: CALL_OW 255
32772: ST_TO_ADDR
// tech_space := tech_spacanom ;
32773: LD_ADDR_VAR 0 12
32777: PUSH
32778: LD_INT 29
32780: ST_TO_ADDR
// tech_time := tech_taurad ;
32781: LD_ADDR_VAR 0 13
32785: PUSH
32786: LD_INT 28
32788: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32789: LD_ADDR_VAR 0 11
32793: PUSH
32794: LD_VAR 0 1
32798: PPUSH
32799: CALL_OW 310
32803: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
32804: LD_VAR 0 11
32808: PPUSH
32809: CALL_OW 247
32813: PUSH
32814: LD_INT 2
32816: EQUAL
32817: IFFALSE 32821
// exit ;
32819: GO 33331
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
32821: LD_ADDR_VAR 0 8
32825: PUSH
32826: LD_INT 81
32828: PUSH
32829: LD_VAR 0 9
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 3
32840: PUSH
32841: LD_INT 21
32843: PUSH
32844: LD_INT 3
32846: PUSH
32847: EMPTY
32848: LIST
32849: LIST
32850: PUSH
32851: EMPTY
32852: LIST
32853: LIST
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PPUSH
32859: CALL_OW 69
32863: ST_TO_ADDR
// if not tmp then
32864: LD_VAR 0 8
32868: NOT
32869: IFFALSE 32873
// exit ;
32871: GO 33331
// if in_unit then
32873: LD_VAR 0 11
32877: IFFALSE 32901
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
32879: LD_ADDR_VAR 0 10
32883: PUSH
32884: LD_VAR 0 8
32888: PPUSH
32889: LD_VAR 0 11
32893: PPUSH
32894: CALL_OW 74
32898: ST_TO_ADDR
32899: GO 32921
// enemy := NearestUnitToUnit ( tmp , unit ) ;
32901: LD_ADDR_VAR 0 10
32905: PUSH
32906: LD_VAR 0 8
32910: PPUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 74
32920: ST_TO_ADDR
// if not enemy then
32921: LD_VAR 0 10
32925: NOT
32926: IFFALSE 32930
// exit ;
32928: GO 33331
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
32930: LD_VAR 0 11
32934: PUSH
32935: LD_VAR 0 11
32939: PPUSH
32940: LD_VAR 0 10
32944: PPUSH
32945: CALL_OW 296
32949: PUSH
32950: LD_INT 13
32952: GREATER
32953: AND
32954: PUSH
32955: LD_VAR 0 1
32959: PPUSH
32960: LD_VAR 0 10
32964: PPUSH
32965: CALL_OW 296
32969: PUSH
32970: LD_INT 12
32972: GREATER
32973: OR
32974: IFFALSE 32978
// exit ;
32976: GO 33331
// missile := [ 1 ] ;
32978: LD_ADDR_VAR 0 14
32982: PUSH
32983: LD_INT 1
32985: PUSH
32986: EMPTY
32987: LIST
32988: ST_TO_ADDR
// if Researched ( side , tech_space ) then
32989: LD_VAR 0 9
32993: PPUSH
32994: LD_VAR 0 12
32998: PPUSH
32999: CALL_OW 325
33003: IFFALSE 33032
// missile := Insert ( missile , missile + 1 , 2 ) ;
33005: LD_ADDR_VAR 0 14
33009: PUSH
33010: LD_VAR 0 14
33014: PPUSH
33015: LD_VAR 0 14
33019: PUSH
33020: LD_INT 1
33022: PLUS
33023: PPUSH
33024: LD_INT 2
33026: PPUSH
33027: CALL_OW 2
33031: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33032: LD_VAR 0 9
33036: PPUSH
33037: LD_VAR 0 13
33041: PPUSH
33042: CALL_OW 325
33046: PUSH
33047: LD_VAR 0 10
33051: PPUSH
33052: CALL_OW 255
33056: PPUSH
33057: LD_VAR 0 13
33061: PPUSH
33062: CALL_OW 325
33066: NOT
33067: AND
33068: IFFALSE 33097
// missile := Insert ( missile , missile + 1 , 3 ) ;
33070: LD_ADDR_VAR 0 14
33074: PUSH
33075: LD_VAR 0 14
33079: PPUSH
33080: LD_VAR 0 14
33084: PUSH
33085: LD_INT 1
33087: PLUS
33088: PPUSH
33089: LD_INT 3
33091: PPUSH
33092: CALL_OW 2
33096: ST_TO_ADDR
// if missile < 2 then
33097: LD_VAR 0 14
33101: PUSH
33102: LD_INT 2
33104: LESS
33105: IFFALSE 33109
// exit ;
33107: GO 33331
// x := GetX ( enemy ) ;
33109: LD_ADDR_VAR 0 4
33113: PUSH
33114: LD_VAR 0 10
33118: PPUSH
33119: CALL_OW 250
33123: ST_TO_ADDR
// y := GetY ( enemy ) ;
33124: LD_ADDR_VAR 0 5
33128: PUSH
33129: LD_VAR 0 10
33133: PPUSH
33134: CALL_OW 251
33138: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33139: LD_ADDR_VAR 0 6
33143: PUSH
33144: LD_VAR 0 4
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PPUSH
33153: LD_INT 1
33155: PPUSH
33156: CALL_OW 12
33160: PLUS
33161: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33162: LD_ADDR_VAR 0 7
33166: PUSH
33167: LD_VAR 0 5
33171: PUSH
33172: LD_INT 1
33174: NEG
33175: PPUSH
33176: LD_INT 1
33178: PPUSH
33179: CALL_OW 12
33183: PLUS
33184: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33185: LD_VAR 0 6
33189: PPUSH
33190: LD_VAR 0 7
33194: PPUSH
33195: CALL_OW 488
33199: NOT
33200: IFFALSE 33222
// begin _x := x ;
33202: LD_ADDR_VAR 0 6
33206: PUSH
33207: LD_VAR 0 4
33211: ST_TO_ADDR
// _y := y ;
33212: LD_ADDR_VAR 0 7
33216: PUSH
33217: LD_VAR 0 5
33221: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33222: LD_ADDR_VAR 0 3
33226: PUSH
33227: LD_INT 1
33229: PPUSH
33230: LD_VAR 0 14
33234: PPUSH
33235: CALL_OW 12
33239: ST_TO_ADDR
// case i of 1 :
33240: LD_VAR 0 3
33244: PUSH
33245: LD_INT 1
33247: DOUBLE
33248: EQUAL
33249: IFTRUE 33253
33251: GO 33270
33253: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33254: LD_VAR 0 1
33258: PPUSH
33259: LD_VAR 0 10
33263: PPUSH
33264: CALL_OW 115
33268: GO 33331
33270: LD_INT 2
33272: DOUBLE
33273: EQUAL
33274: IFTRUE 33278
33276: GO 33300
33278: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33279: LD_VAR 0 1
33283: PPUSH
33284: LD_VAR 0 6
33288: PPUSH
33289: LD_VAR 0 7
33293: PPUSH
33294: CALL_OW 153
33298: GO 33331
33300: LD_INT 3
33302: DOUBLE
33303: EQUAL
33304: IFTRUE 33308
33306: GO 33330
33308: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33309: LD_VAR 0 1
33313: PPUSH
33314: LD_VAR 0 6
33318: PPUSH
33319: LD_VAR 0 7
33323: PPUSH
33324: CALL_OW 154
33328: GO 33331
33330: POP
// end ;
33331: LD_VAR 0 2
33335: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33336: LD_INT 0
33338: PPUSH
33339: PPUSH
33340: PPUSH
33341: PPUSH
33342: PPUSH
33343: PPUSH
// if not unit or not building then
33344: LD_VAR 0 1
33348: NOT
33349: PUSH
33350: LD_VAR 0 2
33354: NOT
33355: OR
33356: IFFALSE 33360
// exit ;
33358: GO 33518
// x := GetX ( building ) ;
33360: LD_ADDR_VAR 0 5
33364: PUSH
33365: LD_VAR 0 2
33369: PPUSH
33370: CALL_OW 250
33374: ST_TO_ADDR
// y := GetY ( building ) ;
33375: LD_ADDR_VAR 0 6
33379: PUSH
33380: LD_VAR 0 2
33384: PPUSH
33385: CALL_OW 251
33389: ST_TO_ADDR
// for i = 0 to 5 do
33390: LD_ADDR_VAR 0 4
33394: PUSH
33395: DOUBLE
33396: LD_INT 0
33398: DEC
33399: ST_TO_ADDR
33400: LD_INT 5
33402: PUSH
33403: FOR_TO
33404: IFFALSE 33516
// begin _x := ShiftX ( x , i , 3 ) ;
33406: LD_ADDR_VAR 0 7
33410: PUSH
33411: LD_VAR 0 5
33415: PPUSH
33416: LD_VAR 0 4
33420: PPUSH
33421: LD_INT 3
33423: PPUSH
33424: CALL_OW 272
33428: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33429: LD_ADDR_VAR 0 8
33433: PUSH
33434: LD_VAR 0 6
33438: PPUSH
33439: LD_VAR 0 4
33443: PPUSH
33444: LD_INT 3
33446: PPUSH
33447: CALL_OW 273
33451: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33452: LD_VAR 0 7
33456: PPUSH
33457: LD_VAR 0 8
33461: PPUSH
33462: CALL_OW 488
33466: NOT
33467: IFFALSE 33471
// continue ;
33469: GO 33403
// if HexInfo ( _x , _y ) = 0 then
33471: LD_VAR 0 7
33475: PPUSH
33476: LD_VAR 0 8
33480: PPUSH
33481: CALL_OW 428
33485: PUSH
33486: LD_INT 0
33488: EQUAL
33489: IFFALSE 33514
// begin ComMoveXY ( unit , _x , _y ) ;
33491: LD_VAR 0 1
33495: PPUSH
33496: LD_VAR 0 7
33500: PPUSH
33501: LD_VAR 0 8
33505: PPUSH
33506: CALL_OW 111
// exit ;
33510: POP
33511: POP
33512: GO 33518
// end ; end ;
33514: GO 33403
33516: POP
33517: POP
// end ;
33518: LD_VAR 0 3
33522: RET
// export function ScanBase ( side , base_area ) ; begin
33523: LD_INT 0
33525: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33526: LD_ADDR_VAR 0 3
33530: PUSH
33531: LD_VAR 0 2
33535: PPUSH
33536: LD_INT 81
33538: PUSH
33539: LD_VAR 0 1
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: PPUSH
33548: CALL_OW 70
33552: ST_TO_ADDR
// end ;
33553: LD_VAR 0 3
33557: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33558: LD_INT 0
33560: PPUSH
33561: PPUSH
33562: PPUSH
33563: PPUSH
// result := false ;
33564: LD_ADDR_VAR 0 2
33568: PUSH
33569: LD_INT 0
33571: ST_TO_ADDR
// side := GetSide ( unit ) ;
33572: LD_ADDR_VAR 0 3
33576: PUSH
33577: LD_VAR 0 1
33581: PPUSH
33582: CALL_OW 255
33586: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33587: LD_ADDR_VAR 0 4
33591: PUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL_OW 248
33601: ST_TO_ADDR
// case nat of 1 :
33602: LD_VAR 0 4
33606: PUSH
33607: LD_INT 1
33609: DOUBLE
33610: EQUAL
33611: IFTRUE 33615
33613: GO 33626
33615: POP
// tech := tech_lassight ; 2 :
33616: LD_ADDR_VAR 0 5
33620: PUSH
33621: LD_INT 12
33623: ST_TO_ADDR
33624: GO 33665
33626: LD_INT 2
33628: DOUBLE
33629: EQUAL
33630: IFTRUE 33634
33632: GO 33645
33634: POP
// tech := tech_mortar ; 3 :
33635: LD_ADDR_VAR 0 5
33639: PUSH
33640: LD_INT 41
33642: ST_TO_ADDR
33643: GO 33665
33645: LD_INT 3
33647: DOUBLE
33648: EQUAL
33649: IFTRUE 33653
33651: GO 33664
33653: POP
// tech := tech_bazooka ; end ;
33654: LD_ADDR_VAR 0 5
33658: PUSH
33659: LD_INT 44
33661: ST_TO_ADDR
33662: GO 33665
33664: POP
// if Researched ( side , tech ) then
33665: LD_VAR 0 3
33669: PPUSH
33670: LD_VAR 0 5
33674: PPUSH
33675: CALL_OW 325
33679: IFFALSE 33706
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33681: LD_ADDR_VAR 0 2
33685: PUSH
33686: LD_INT 5
33688: PUSH
33689: LD_INT 8
33691: PUSH
33692: LD_INT 9
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: LIST
33699: PUSH
33700: LD_VAR 0 4
33704: ARRAY
33705: ST_TO_ADDR
// end ;
33706: LD_VAR 0 2
33710: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33711: LD_INT 0
33713: PPUSH
33714: PPUSH
33715: PPUSH
// if not mines then
33716: LD_VAR 0 2
33720: NOT
33721: IFFALSE 33725
// exit ;
33723: GO 33869
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33725: LD_ADDR_VAR 0 5
33729: PUSH
33730: LD_INT 81
33732: PUSH
33733: LD_VAR 0 1
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 3
33744: PUSH
33745: LD_INT 21
33747: PUSH
33748: LD_INT 3
33750: PUSH
33751: EMPTY
33752: LIST
33753: LIST
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PPUSH
33763: CALL_OW 69
33767: ST_TO_ADDR
// for i in mines do
33768: LD_ADDR_VAR 0 4
33772: PUSH
33773: LD_VAR 0 2
33777: PUSH
33778: FOR_IN
33779: IFFALSE 33867
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33781: LD_VAR 0 4
33785: PUSH
33786: LD_INT 1
33788: ARRAY
33789: PPUSH
33790: LD_VAR 0 4
33794: PUSH
33795: LD_INT 2
33797: ARRAY
33798: PPUSH
33799: CALL_OW 458
33803: NOT
33804: IFFALSE 33808
// continue ;
33806: GO 33778
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
33808: LD_VAR 0 4
33812: PUSH
33813: LD_INT 1
33815: ARRAY
33816: PPUSH
33817: LD_VAR 0 4
33821: PUSH
33822: LD_INT 2
33824: ARRAY
33825: PPUSH
33826: CALL_OW 428
33830: PUSH
33831: LD_VAR 0 5
33835: IN
33836: IFFALSE 33865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
33838: LD_VAR 0 4
33842: PUSH
33843: LD_INT 1
33845: ARRAY
33846: PPUSH
33847: LD_VAR 0 4
33851: PUSH
33852: LD_INT 2
33854: ARRAY
33855: PPUSH
33856: LD_VAR 0 1
33860: PPUSH
33861: CALL_OW 456
// end ;
33865: GO 33778
33867: POP
33868: POP
// end ;
33869: LD_VAR 0 3
33873: RET
// export function Count ( array ) ; var i ; begin
33874: LD_INT 0
33876: PPUSH
33877: PPUSH
// result := 0 ;
33878: LD_ADDR_VAR 0 2
33882: PUSH
33883: LD_INT 0
33885: ST_TO_ADDR
// for i in array do
33886: LD_ADDR_VAR 0 3
33890: PUSH
33891: LD_VAR 0 1
33895: PUSH
33896: FOR_IN
33897: IFFALSE 33921
// if i then
33899: LD_VAR 0 3
33903: IFFALSE 33919
// result := result + 1 ;
33905: LD_ADDR_VAR 0 2
33909: PUSH
33910: LD_VAR 0 2
33914: PUSH
33915: LD_INT 1
33917: PLUS
33918: ST_TO_ADDR
33919: GO 33896
33921: POP
33922: POP
// end ;
33923: LD_VAR 0 2
33927: RET
// export function IsEmpty ( building ) ; begin
33928: LD_INT 0
33930: PPUSH
// if not building then
33931: LD_VAR 0 1
33935: NOT
33936: IFFALSE 33940
// exit ;
33938: GO 33983
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
33940: LD_ADDR_VAR 0 2
33944: PUSH
33945: LD_VAR 0 1
33949: PUSH
33950: LD_INT 22
33952: PUSH
33953: LD_VAR 0 1
33957: PPUSH
33958: CALL_OW 255
33962: PUSH
33963: EMPTY
33964: LIST
33965: LIST
33966: PUSH
33967: LD_INT 58
33969: PUSH
33970: EMPTY
33971: LIST
33972: PUSH
33973: EMPTY
33974: LIST
33975: LIST
33976: PPUSH
33977: CALL_OW 69
33981: IN
33982: ST_TO_ADDR
// end ;
33983: LD_VAR 0 2
33987: RET
// export function IsNotFull ( building ) ; begin
33988: LD_INT 0
33990: PPUSH
// if not building then
33991: LD_VAR 0 1
33995: NOT
33996: IFFALSE 34000
// exit ;
33998: GO 34019
// result := UnitsInside ( building ) < 6 ;
34000: LD_ADDR_VAR 0 2
34004: PUSH
34005: LD_VAR 0 1
34009: PPUSH
34010: CALL_OW 313
34014: PUSH
34015: LD_INT 6
34017: LESS
34018: ST_TO_ADDR
// end ;
34019: LD_VAR 0 2
34023: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34024: LD_INT 0
34026: PPUSH
34027: PPUSH
34028: PPUSH
34029: PPUSH
// tmp := [ ] ;
34030: LD_ADDR_VAR 0 3
34034: PUSH
34035: EMPTY
34036: ST_TO_ADDR
// list := [ ] ;
34037: LD_ADDR_VAR 0 5
34041: PUSH
34042: EMPTY
34043: ST_TO_ADDR
// for i = 16 to 25 do
34044: LD_ADDR_VAR 0 4
34048: PUSH
34049: DOUBLE
34050: LD_INT 16
34052: DEC
34053: ST_TO_ADDR
34054: LD_INT 25
34056: PUSH
34057: FOR_TO
34058: IFFALSE 34131
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34060: LD_ADDR_VAR 0 3
34064: PUSH
34065: LD_VAR 0 3
34069: PUSH
34070: LD_INT 22
34072: PUSH
34073: LD_VAR 0 1
34077: PPUSH
34078: CALL_OW 255
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 91
34089: PUSH
34090: LD_VAR 0 1
34094: PUSH
34095: LD_INT 6
34097: PUSH
34098: EMPTY
34099: LIST
34100: LIST
34101: LIST
34102: PUSH
34103: LD_INT 30
34105: PUSH
34106: LD_VAR 0 4
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: EMPTY
34116: LIST
34117: LIST
34118: LIST
34119: PUSH
34120: EMPTY
34121: LIST
34122: PPUSH
34123: CALL_OW 69
34127: ADD
34128: ST_TO_ADDR
34129: GO 34057
34131: POP
34132: POP
// for i = 1 to tmp do
34133: LD_ADDR_VAR 0 4
34137: PUSH
34138: DOUBLE
34139: LD_INT 1
34141: DEC
34142: ST_TO_ADDR
34143: LD_VAR 0 3
34147: PUSH
34148: FOR_TO
34149: IFFALSE 34237
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34151: LD_ADDR_VAR 0 5
34155: PUSH
34156: LD_VAR 0 5
34160: PUSH
34161: LD_VAR 0 3
34165: PUSH
34166: LD_VAR 0 4
34170: ARRAY
34171: PPUSH
34172: CALL_OW 266
34176: PUSH
34177: LD_VAR 0 3
34181: PUSH
34182: LD_VAR 0 4
34186: ARRAY
34187: PPUSH
34188: CALL_OW 250
34192: PUSH
34193: LD_VAR 0 3
34197: PUSH
34198: LD_VAR 0 4
34202: ARRAY
34203: PPUSH
34204: CALL_OW 251
34208: PUSH
34209: LD_VAR 0 3
34213: PUSH
34214: LD_VAR 0 4
34218: ARRAY
34219: PPUSH
34220: CALL_OW 254
34224: PUSH
34225: EMPTY
34226: LIST
34227: LIST
34228: LIST
34229: LIST
34230: PUSH
34231: EMPTY
34232: LIST
34233: ADD
34234: ST_TO_ADDR
34235: GO 34148
34237: POP
34238: POP
// result := list ;
34239: LD_ADDR_VAR 0 2
34243: PUSH
34244: LD_VAR 0 5
34248: ST_TO_ADDR
// end ;
34249: LD_VAR 0 2
34253: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34254: LD_INT 0
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
// if not factory then
34263: LD_VAR 0 1
34267: NOT
34268: IFFALSE 34272
// exit ;
34270: GO 34865
// if control = control_apeman then
34272: LD_VAR 0 4
34276: PUSH
34277: LD_INT 5
34279: EQUAL
34280: IFFALSE 34389
// begin tmp := UnitsInside ( factory ) ;
34282: LD_ADDR_VAR 0 8
34286: PUSH
34287: LD_VAR 0 1
34291: PPUSH
34292: CALL_OW 313
34296: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34297: LD_VAR 0 8
34301: PPUSH
34302: LD_INT 25
34304: PUSH
34305: LD_INT 12
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PPUSH
34312: CALL_OW 72
34316: NOT
34317: IFFALSE 34327
// control := control_manual ;
34319: LD_ADDR_VAR 0 4
34323: PUSH
34324: LD_INT 1
34326: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34327: LD_ADDR_VAR 0 8
34331: PUSH
34332: LD_VAR 0 1
34336: PPUSH
34337: CALL 34024 0 1
34341: ST_TO_ADDR
// if tmp then
34342: LD_VAR 0 8
34346: IFFALSE 34389
// begin for i in tmp do
34348: LD_ADDR_VAR 0 7
34352: PUSH
34353: LD_VAR 0 8
34357: PUSH
34358: FOR_IN
34359: IFFALSE 34387
// if i [ 1 ] = b_ext_radio then
34361: LD_VAR 0 7
34365: PUSH
34366: LD_INT 1
34368: ARRAY
34369: PUSH
34370: LD_INT 22
34372: EQUAL
34373: IFFALSE 34385
// begin control := control_remote ;
34375: LD_ADDR_VAR 0 4
34379: PUSH
34380: LD_INT 2
34382: ST_TO_ADDR
// break ;
34383: GO 34387
// end ;
34385: GO 34358
34387: POP
34388: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34389: LD_VAR 0 1
34393: PPUSH
34394: LD_VAR 0 2
34398: PPUSH
34399: LD_VAR 0 3
34403: PPUSH
34404: LD_VAR 0 4
34408: PPUSH
34409: LD_VAR 0 5
34413: PPUSH
34414: CALL_OW 448
34418: IFFALSE 34453
// begin result := [ chassis , engine , control , weapon ] ;
34420: LD_ADDR_VAR 0 6
34424: PUSH
34425: LD_VAR 0 2
34429: PUSH
34430: LD_VAR 0 3
34434: PUSH
34435: LD_VAR 0 4
34439: PUSH
34440: LD_VAR 0 5
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: ST_TO_ADDR
// exit ;
34451: GO 34865
// end ; _chassis := AvailableChassisList ( factory ) ;
34453: LD_ADDR_VAR 0 9
34457: PUSH
34458: LD_VAR 0 1
34462: PPUSH
34463: CALL_OW 475
34467: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34468: LD_ADDR_VAR 0 11
34472: PUSH
34473: LD_VAR 0 1
34477: PPUSH
34478: CALL_OW 476
34482: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34483: LD_ADDR_VAR 0 12
34487: PUSH
34488: LD_VAR 0 1
34492: PPUSH
34493: CALL_OW 477
34497: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34498: LD_ADDR_VAR 0 10
34502: PUSH
34503: LD_VAR 0 1
34507: PPUSH
34508: CALL_OW 478
34512: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34513: LD_VAR 0 9
34517: NOT
34518: PUSH
34519: LD_VAR 0 11
34523: NOT
34524: OR
34525: PUSH
34526: LD_VAR 0 12
34530: NOT
34531: OR
34532: PUSH
34533: LD_VAR 0 10
34537: NOT
34538: OR
34539: IFFALSE 34574
// begin result := [ chassis , engine , control , weapon ] ;
34541: LD_ADDR_VAR 0 6
34545: PUSH
34546: LD_VAR 0 2
34550: PUSH
34551: LD_VAR 0 3
34555: PUSH
34556: LD_VAR 0 4
34560: PUSH
34561: LD_VAR 0 5
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: ST_TO_ADDR
// exit ;
34572: GO 34865
// end ; if not chassis in _chassis then
34574: LD_VAR 0 2
34578: PUSH
34579: LD_VAR 0 9
34583: IN
34584: NOT
34585: IFFALSE 34611
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34587: LD_ADDR_VAR 0 2
34591: PUSH
34592: LD_VAR 0 9
34596: PUSH
34597: LD_INT 1
34599: PPUSH
34600: LD_VAR 0 9
34604: PPUSH
34605: CALL_OW 12
34609: ARRAY
34610: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34611: LD_VAR 0 2
34615: PPUSH
34616: LD_VAR 0 3
34620: PPUSH
34621: CALL 34870 0 2
34625: NOT
34626: IFFALSE 34685
// repeat engine := _engine [ 1 ] ;
34628: LD_ADDR_VAR 0 3
34632: PUSH
34633: LD_VAR 0 11
34637: PUSH
34638: LD_INT 1
34640: ARRAY
34641: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34642: LD_ADDR_VAR 0 11
34646: PUSH
34647: LD_VAR 0 11
34651: PPUSH
34652: LD_INT 1
34654: PPUSH
34655: CALL_OW 3
34659: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34660: LD_VAR 0 2
34664: PPUSH
34665: LD_VAR 0 3
34669: PPUSH
34670: CALL 34870 0 2
34674: PUSH
34675: LD_VAR 0 11
34679: PUSH
34680: EMPTY
34681: EQUAL
34682: OR
34683: IFFALSE 34628
// if not control in _control then
34685: LD_VAR 0 4
34689: PUSH
34690: LD_VAR 0 12
34694: IN
34695: NOT
34696: IFFALSE 34722
// control := _control [ rand ( 1 , _control ) ] ;
34698: LD_ADDR_VAR 0 4
34702: PUSH
34703: LD_VAR 0 12
34707: PUSH
34708: LD_INT 1
34710: PPUSH
34711: LD_VAR 0 12
34715: PPUSH
34716: CALL_OW 12
34720: ARRAY
34721: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34722: LD_VAR 0 2
34726: PPUSH
34727: LD_VAR 0 5
34731: PPUSH
34732: CALL 35090 0 2
34736: NOT
34737: IFFALSE 34796
// repeat weapon := _weapon [ 1 ] ;
34739: LD_ADDR_VAR 0 5
34743: PUSH
34744: LD_VAR 0 10
34748: PUSH
34749: LD_INT 1
34751: ARRAY
34752: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34753: LD_ADDR_VAR 0 10
34757: PUSH
34758: LD_VAR 0 10
34762: PPUSH
34763: LD_INT 1
34765: PPUSH
34766: CALL_OW 3
34770: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34771: LD_VAR 0 2
34775: PPUSH
34776: LD_VAR 0 5
34780: PPUSH
34781: CALL 35090 0 2
34785: PUSH
34786: LD_VAR 0 10
34790: PUSH
34791: EMPTY
34792: EQUAL
34793: OR
34794: IFFALSE 34739
// result := [ ] ;
34796: LD_ADDR_VAR 0 6
34800: PUSH
34801: EMPTY
34802: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34803: LD_VAR 0 1
34807: PPUSH
34808: LD_VAR 0 2
34812: PPUSH
34813: LD_VAR 0 3
34817: PPUSH
34818: LD_VAR 0 4
34822: PPUSH
34823: LD_VAR 0 5
34827: PPUSH
34828: CALL_OW 448
34832: IFFALSE 34865
// result := [ chassis , engine , control , weapon ] ;
34834: LD_ADDR_VAR 0 6
34838: PUSH
34839: LD_VAR 0 2
34843: PUSH
34844: LD_VAR 0 3
34848: PUSH
34849: LD_VAR 0 4
34853: PUSH
34854: LD_VAR 0 5
34858: PUSH
34859: EMPTY
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: ST_TO_ADDR
// end ;
34865: LD_VAR 0 6
34869: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
34870: LD_INT 0
34872: PPUSH
// if not chassis or not engine then
34873: LD_VAR 0 1
34877: NOT
34878: PUSH
34879: LD_VAR 0 2
34883: NOT
34884: OR
34885: IFFALSE 34889
// exit ;
34887: GO 35085
// case engine of engine_solar :
34889: LD_VAR 0 2
34893: PUSH
34894: LD_INT 2
34896: DOUBLE
34897: EQUAL
34898: IFTRUE 34902
34900: GO 34940
34902: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
34903: LD_ADDR_VAR 0 3
34907: PUSH
34908: LD_INT 11
34910: PUSH
34911: LD_INT 12
34913: PUSH
34914: LD_INT 13
34916: PUSH
34917: LD_INT 14
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: LD_INT 2
34925: PUSH
34926: LD_INT 3
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
34938: GO 35069
34940: LD_INT 1
34942: DOUBLE
34943: EQUAL
34944: IFTRUE 34948
34946: GO 35010
34948: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
34949: LD_ADDR_VAR 0 3
34953: PUSH
34954: LD_INT 11
34956: PUSH
34957: LD_INT 12
34959: PUSH
34960: LD_INT 13
34962: PUSH
34963: LD_INT 14
34965: PUSH
34966: LD_INT 1
34968: PUSH
34969: LD_INT 2
34971: PUSH
34972: LD_INT 3
34974: PUSH
34975: LD_INT 4
34977: PUSH
34978: LD_INT 5
34980: PUSH
34981: LD_INT 21
34983: PUSH
34984: LD_INT 23
34986: PUSH
34987: LD_INT 22
34989: PUSH
34990: LD_INT 24
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: ST_TO_ADDR
35008: GO 35069
35010: LD_INT 3
35012: DOUBLE
35013: EQUAL
35014: IFTRUE 35018
35016: GO 35068
35018: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35019: LD_ADDR_VAR 0 3
35023: PUSH
35024: LD_INT 13
35026: PUSH
35027: LD_INT 14
35029: PUSH
35030: LD_INT 2
35032: PUSH
35033: LD_INT 3
35035: PUSH
35036: LD_INT 4
35038: PUSH
35039: LD_INT 5
35041: PUSH
35042: LD_INT 21
35044: PUSH
35045: LD_INT 22
35047: PUSH
35048: LD_INT 23
35050: PUSH
35051: LD_INT 24
35053: PUSH
35054: EMPTY
35055: LIST
35056: LIST
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: ST_TO_ADDR
35066: GO 35069
35068: POP
// result := ( chassis in result ) ;
35069: LD_ADDR_VAR 0 3
35073: PUSH
35074: LD_VAR 0 1
35078: PUSH
35079: LD_VAR 0 3
35083: IN
35084: ST_TO_ADDR
// end ;
35085: LD_VAR 0 3
35089: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35090: LD_INT 0
35092: PPUSH
// if not chassis or not weapon then
35093: LD_VAR 0 1
35097: NOT
35098: PUSH
35099: LD_VAR 0 2
35103: NOT
35104: OR
35105: IFFALSE 35109
// exit ;
35107: GO 36135
// case weapon of us_machine_gun :
35109: LD_VAR 0 2
35113: PUSH
35114: LD_INT 2
35116: DOUBLE
35117: EQUAL
35118: IFTRUE 35122
35120: GO 35152
35122: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35123: LD_ADDR_VAR 0 3
35127: PUSH
35128: LD_INT 1
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 3
35136: PUSH
35137: LD_INT 4
35139: PUSH
35140: LD_INT 5
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: ST_TO_ADDR
35150: GO 36119
35152: LD_INT 3
35154: DOUBLE
35155: EQUAL
35156: IFTRUE 35160
35158: GO 35190
35160: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35161: LD_ADDR_VAR 0 3
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: LD_INT 2
35171: PUSH
35172: LD_INT 3
35174: PUSH
35175: LD_INT 4
35177: PUSH
35178: LD_INT 5
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: ST_TO_ADDR
35188: GO 36119
35190: LD_INT 11
35192: DOUBLE
35193: EQUAL
35194: IFTRUE 35198
35196: GO 35228
35198: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35199: LD_ADDR_VAR 0 3
35203: PUSH
35204: LD_INT 1
35206: PUSH
35207: LD_INT 2
35209: PUSH
35210: LD_INT 3
35212: PUSH
35213: LD_INT 4
35215: PUSH
35216: LD_INT 5
35218: PUSH
35219: EMPTY
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: ST_TO_ADDR
35226: GO 36119
35228: LD_INT 4
35230: DOUBLE
35231: EQUAL
35232: IFTRUE 35236
35234: GO 35262
35236: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35237: LD_ADDR_VAR 0 3
35241: PUSH
35242: LD_INT 2
35244: PUSH
35245: LD_INT 3
35247: PUSH
35248: LD_INT 4
35250: PUSH
35251: LD_INT 5
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: ST_TO_ADDR
35260: GO 36119
35262: LD_INT 5
35264: DOUBLE
35265: EQUAL
35266: IFTRUE 35270
35268: GO 35296
35270: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35271: LD_ADDR_VAR 0 3
35275: PUSH
35276: LD_INT 2
35278: PUSH
35279: LD_INT 3
35281: PUSH
35282: LD_INT 4
35284: PUSH
35285: LD_INT 5
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: ST_TO_ADDR
35294: GO 36119
35296: LD_INT 9
35298: DOUBLE
35299: EQUAL
35300: IFTRUE 35304
35302: GO 35330
35304: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35305: LD_ADDR_VAR 0 3
35309: PUSH
35310: LD_INT 2
35312: PUSH
35313: LD_INT 3
35315: PUSH
35316: LD_INT 4
35318: PUSH
35319: LD_INT 5
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: ST_TO_ADDR
35328: GO 36119
35330: LD_INT 7
35332: DOUBLE
35333: EQUAL
35334: IFTRUE 35338
35336: GO 35364
35338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35339: LD_ADDR_VAR 0 3
35343: PUSH
35344: LD_INT 2
35346: PUSH
35347: LD_INT 3
35349: PUSH
35350: LD_INT 4
35352: PUSH
35353: LD_INT 5
35355: PUSH
35356: EMPTY
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: ST_TO_ADDR
35362: GO 36119
35364: LD_INT 12
35366: DOUBLE
35367: EQUAL
35368: IFTRUE 35372
35370: GO 35398
35372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35373: LD_ADDR_VAR 0 3
35377: PUSH
35378: LD_INT 2
35380: PUSH
35381: LD_INT 3
35383: PUSH
35384: LD_INT 4
35386: PUSH
35387: LD_INT 5
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: ST_TO_ADDR
35396: GO 36119
35398: LD_INT 13
35400: DOUBLE
35401: EQUAL
35402: IFTRUE 35406
35404: GO 35432
35406: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_INT 2
35414: PUSH
35415: LD_INT 3
35417: PUSH
35418: LD_INT 4
35420: PUSH
35421: LD_INT 5
35423: PUSH
35424: EMPTY
35425: LIST
35426: LIST
35427: LIST
35428: LIST
35429: ST_TO_ADDR
35430: GO 36119
35432: LD_INT 14
35434: DOUBLE
35435: EQUAL
35436: IFTRUE 35440
35438: GO 35458
35440: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35441: LD_ADDR_VAR 0 3
35445: PUSH
35446: LD_INT 4
35448: PUSH
35449: LD_INT 5
35451: PUSH
35452: EMPTY
35453: LIST
35454: LIST
35455: ST_TO_ADDR
35456: GO 36119
35458: LD_INT 6
35460: DOUBLE
35461: EQUAL
35462: IFTRUE 35466
35464: GO 35484
35466: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35467: LD_ADDR_VAR 0 3
35471: PUSH
35472: LD_INT 4
35474: PUSH
35475: LD_INT 5
35477: PUSH
35478: EMPTY
35479: LIST
35480: LIST
35481: ST_TO_ADDR
35482: GO 36119
35484: LD_INT 10
35486: DOUBLE
35487: EQUAL
35488: IFTRUE 35492
35490: GO 35510
35492: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35493: LD_ADDR_VAR 0 3
35497: PUSH
35498: LD_INT 4
35500: PUSH
35501: LD_INT 5
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: ST_TO_ADDR
35508: GO 36119
35510: LD_INT 22
35512: DOUBLE
35513: EQUAL
35514: IFTRUE 35518
35516: GO 35544
35518: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35519: LD_ADDR_VAR 0 3
35523: PUSH
35524: LD_INT 11
35526: PUSH
35527: LD_INT 12
35529: PUSH
35530: LD_INT 13
35532: PUSH
35533: LD_INT 14
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: ST_TO_ADDR
35542: GO 36119
35544: LD_INT 23
35546: DOUBLE
35547: EQUAL
35548: IFTRUE 35552
35550: GO 35578
35552: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35553: LD_ADDR_VAR 0 3
35557: PUSH
35558: LD_INT 11
35560: PUSH
35561: LD_INT 12
35563: PUSH
35564: LD_INT 13
35566: PUSH
35567: LD_INT 14
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: ST_TO_ADDR
35576: GO 36119
35578: LD_INT 24
35580: DOUBLE
35581: EQUAL
35582: IFTRUE 35586
35584: GO 35612
35586: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_INT 11
35594: PUSH
35595: LD_INT 12
35597: PUSH
35598: LD_INT 13
35600: PUSH
35601: LD_INT 14
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: LIST
35608: LIST
35609: ST_TO_ADDR
35610: GO 36119
35612: LD_INT 30
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35620
35618: GO 35646
35620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35621: LD_ADDR_VAR 0 3
35625: PUSH
35626: LD_INT 11
35628: PUSH
35629: LD_INT 12
35631: PUSH
35632: LD_INT 13
35634: PUSH
35635: LD_INT 14
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: ST_TO_ADDR
35644: GO 36119
35646: LD_INT 25
35648: DOUBLE
35649: EQUAL
35650: IFTRUE 35654
35652: GO 35672
35654: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35655: LD_ADDR_VAR 0 3
35659: PUSH
35660: LD_INT 13
35662: PUSH
35663: LD_INT 14
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: ST_TO_ADDR
35670: GO 36119
35672: LD_INT 27
35674: DOUBLE
35675: EQUAL
35676: IFTRUE 35680
35678: GO 35698
35680: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35681: LD_ADDR_VAR 0 3
35685: PUSH
35686: LD_INT 13
35688: PUSH
35689: LD_INT 14
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: ST_TO_ADDR
35696: GO 36119
35698: LD_INT 28
35700: DOUBLE
35701: EQUAL
35702: IFTRUE 35706
35704: GO 35724
35706: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35707: LD_ADDR_VAR 0 3
35711: PUSH
35712: LD_INT 13
35714: PUSH
35715: LD_INT 14
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: ST_TO_ADDR
35722: GO 36119
35724: LD_INT 29
35726: DOUBLE
35727: EQUAL
35728: IFTRUE 35732
35730: GO 35750
35732: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35733: LD_ADDR_VAR 0 3
35737: PUSH
35738: LD_INT 13
35740: PUSH
35741: LD_INT 14
35743: PUSH
35744: EMPTY
35745: LIST
35746: LIST
35747: ST_TO_ADDR
35748: GO 36119
35750: LD_INT 31
35752: DOUBLE
35753: EQUAL
35754: IFTRUE 35758
35756: GO 35776
35758: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35759: LD_ADDR_VAR 0 3
35763: PUSH
35764: LD_INT 13
35766: PUSH
35767: LD_INT 14
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: ST_TO_ADDR
35774: GO 36119
35776: LD_INT 26
35778: DOUBLE
35779: EQUAL
35780: IFTRUE 35784
35782: GO 35802
35784: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35785: LD_ADDR_VAR 0 3
35789: PUSH
35790: LD_INT 13
35792: PUSH
35793: LD_INT 14
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: ST_TO_ADDR
35800: GO 36119
35802: LD_INT 42
35804: DOUBLE
35805: EQUAL
35806: IFTRUE 35810
35808: GO 35836
35810: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
35811: LD_ADDR_VAR 0 3
35815: PUSH
35816: LD_INT 21
35818: PUSH
35819: LD_INT 22
35821: PUSH
35822: LD_INT 23
35824: PUSH
35825: LD_INT 24
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: ST_TO_ADDR
35834: GO 36119
35836: LD_INT 43
35838: DOUBLE
35839: EQUAL
35840: IFTRUE 35844
35842: GO 35870
35844: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
35845: LD_ADDR_VAR 0 3
35849: PUSH
35850: LD_INT 21
35852: PUSH
35853: LD_INT 22
35855: PUSH
35856: LD_INT 23
35858: PUSH
35859: LD_INT 24
35861: PUSH
35862: EMPTY
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: ST_TO_ADDR
35868: GO 36119
35870: LD_INT 44
35872: DOUBLE
35873: EQUAL
35874: IFTRUE 35878
35876: GO 35904
35878: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
35879: LD_ADDR_VAR 0 3
35883: PUSH
35884: LD_INT 21
35886: PUSH
35887: LD_INT 22
35889: PUSH
35890: LD_INT 23
35892: PUSH
35893: LD_INT 24
35895: PUSH
35896: EMPTY
35897: LIST
35898: LIST
35899: LIST
35900: LIST
35901: ST_TO_ADDR
35902: GO 36119
35904: LD_INT 45
35906: DOUBLE
35907: EQUAL
35908: IFTRUE 35912
35910: GO 35938
35912: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
35913: LD_ADDR_VAR 0 3
35917: PUSH
35918: LD_INT 21
35920: PUSH
35921: LD_INT 22
35923: PUSH
35924: LD_INT 23
35926: PUSH
35927: LD_INT 24
35929: PUSH
35930: EMPTY
35931: LIST
35932: LIST
35933: LIST
35934: LIST
35935: ST_TO_ADDR
35936: GO 36119
35938: LD_INT 49
35940: DOUBLE
35941: EQUAL
35942: IFTRUE 35946
35944: GO 35972
35946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
35947: LD_ADDR_VAR 0 3
35951: PUSH
35952: LD_INT 21
35954: PUSH
35955: LD_INT 22
35957: PUSH
35958: LD_INT 23
35960: PUSH
35961: LD_INT 24
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: ST_TO_ADDR
35970: GO 36119
35972: LD_INT 51
35974: DOUBLE
35975: EQUAL
35976: IFTRUE 35980
35978: GO 36006
35980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
35981: LD_ADDR_VAR 0 3
35985: PUSH
35986: LD_INT 21
35988: PUSH
35989: LD_INT 22
35991: PUSH
35992: LD_INT 23
35994: PUSH
35995: LD_INT 24
35997: PUSH
35998: EMPTY
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: ST_TO_ADDR
36004: GO 36119
36006: LD_INT 52
36008: DOUBLE
36009: EQUAL
36010: IFTRUE 36014
36012: GO 36040
36014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36015: LD_ADDR_VAR 0 3
36019: PUSH
36020: LD_INT 21
36022: PUSH
36023: LD_INT 22
36025: PUSH
36026: LD_INT 23
36028: PUSH
36029: LD_INT 24
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: ST_TO_ADDR
36038: GO 36119
36040: LD_INT 53
36042: DOUBLE
36043: EQUAL
36044: IFTRUE 36048
36046: GO 36066
36048: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36049: LD_ADDR_VAR 0 3
36053: PUSH
36054: LD_INT 23
36056: PUSH
36057: LD_INT 24
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: ST_TO_ADDR
36064: GO 36119
36066: LD_INT 46
36068: DOUBLE
36069: EQUAL
36070: IFTRUE 36074
36072: GO 36092
36074: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36075: LD_ADDR_VAR 0 3
36079: PUSH
36080: LD_INT 23
36082: PUSH
36083: LD_INT 24
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: ST_TO_ADDR
36090: GO 36119
36092: LD_INT 47
36094: DOUBLE
36095: EQUAL
36096: IFTRUE 36100
36098: GO 36118
36100: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36101: LD_ADDR_VAR 0 3
36105: PUSH
36106: LD_INT 23
36108: PUSH
36109: LD_INT 24
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: ST_TO_ADDR
36116: GO 36119
36118: POP
// result := ( chassis in result ) ;
36119: LD_ADDR_VAR 0 3
36123: PUSH
36124: LD_VAR 0 1
36128: PUSH
36129: LD_VAR 0 3
36133: IN
36134: ST_TO_ADDR
// end ;
36135: LD_VAR 0 3
36139: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36140: LD_INT 0
36142: PPUSH
36143: PPUSH
36144: PPUSH
36145: PPUSH
36146: PPUSH
36147: PPUSH
36148: PPUSH
// result := array ;
36149: LD_ADDR_VAR 0 5
36153: PUSH
36154: LD_VAR 0 1
36158: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36159: LD_VAR 0 1
36163: NOT
36164: PUSH
36165: LD_VAR 0 2
36169: NOT
36170: OR
36171: PUSH
36172: LD_VAR 0 3
36176: NOT
36177: OR
36178: PUSH
36179: LD_VAR 0 2
36183: PUSH
36184: LD_VAR 0 1
36188: GREATER
36189: OR
36190: PUSH
36191: LD_VAR 0 3
36195: PUSH
36196: LD_VAR 0 1
36200: GREATER
36201: OR
36202: IFFALSE 36206
// exit ;
36204: GO 36502
// if direction then
36206: LD_VAR 0 4
36210: IFFALSE 36274
// begin d := 1 ;
36212: LD_ADDR_VAR 0 9
36216: PUSH
36217: LD_INT 1
36219: ST_TO_ADDR
// if i_from > i_to then
36220: LD_VAR 0 2
36224: PUSH
36225: LD_VAR 0 3
36229: GREATER
36230: IFFALSE 36256
// length := ( array - i_from ) + i_to else
36232: LD_ADDR_VAR 0 11
36236: PUSH
36237: LD_VAR 0 1
36241: PUSH
36242: LD_VAR 0 2
36246: MINUS
36247: PUSH
36248: LD_VAR 0 3
36252: PLUS
36253: ST_TO_ADDR
36254: GO 36272
// length := i_to - i_from ;
36256: LD_ADDR_VAR 0 11
36260: PUSH
36261: LD_VAR 0 3
36265: PUSH
36266: LD_VAR 0 2
36270: MINUS
36271: ST_TO_ADDR
// end else
36272: GO 36335
// begin d := - 1 ;
36274: LD_ADDR_VAR 0 9
36278: PUSH
36279: LD_INT 1
36281: NEG
36282: ST_TO_ADDR
// if i_from > i_to then
36283: LD_VAR 0 2
36287: PUSH
36288: LD_VAR 0 3
36292: GREATER
36293: IFFALSE 36313
// length := i_from - i_to else
36295: LD_ADDR_VAR 0 11
36299: PUSH
36300: LD_VAR 0 2
36304: PUSH
36305: LD_VAR 0 3
36309: MINUS
36310: ST_TO_ADDR
36311: GO 36335
// length := ( array - i_to ) + i_from ;
36313: LD_ADDR_VAR 0 11
36317: PUSH
36318: LD_VAR 0 1
36322: PUSH
36323: LD_VAR 0 3
36327: MINUS
36328: PUSH
36329: LD_VAR 0 2
36333: PLUS
36334: ST_TO_ADDR
// end ; if not length then
36335: LD_VAR 0 11
36339: NOT
36340: IFFALSE 36344
// exit ;
36342: GO 36502
// tmp := array ;
36344: LD_ADDR_VAR 0 10
36348: PUSH
36349: LD_VAR 0 1
36353: ST_TO_ADDR
// for i = 1 to length do
36354: LD_ADDR_VAR 0 6
36358: PUSH
36359: DOUBLE
36360: LD_INT 1
36362: DEC
36363: ST_TO_ADDR
36364: LD_VAR 0 11
36368: PUSH
36369: FOR_TO
36370: IFFALSE 36490
// begin for j = 1 to array do
36372: LD_ADDR_VAR 0 7
36376: PUSH
36377: DOUBLE
36378: LD_INT 1
36380: DEC
36381: ST_TO_ADDR
36382: LD_VAR 0 1
36386: PUSH
36387: FOR_TO
36388: IFFALSE 36476
// begin k := j + d ;
36390: LD_ADDR_VAR 0 8
36394: PUSH
36395: LD_VAR 0 7
36399: PUSH
36400: LD_VAR 0 9
36404: PLUS
36405: ST_TO_ADDR
// if k > array then
36406: LD_VAR 0 8
36410: PUSH
36411: LD_VAR 0 1
36415: GREATER
36416: IFFALSE 36426
// k := 1 ;
36418: LD_ADDR_VAR 0 8
36422: PUSH
36423: LD_INT 1
36425: ST_TO_ADDR
// if not k then
36426: LD_VAR 0 8
36430: NOT
36431: IFFALSE 36443
// k := array ;
36433: LD_ADDR_VAR 0 8
36437: PUSH
36438: LD_VAR 0 1
36442: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36443: LD_ADDR_VAR 0 10
36447: PUSH
36448: LD_VAR 0 10
36452: PPUSH
36453: LD_VAR 0 8
36457: PPUSH
36458: LD_VAR 0 1
36462: PUSH
36463: LD_VAR 0 7
36467: ARRAY
36468: PPUSH
36469: CALL_OW 1
36473: ST_TO_ADDR
// end ;
36474: GO 36387
36476: POP
36477: POP
// array := tmp ;
36478: LD_ADDR_VAR 0 1
36482: PUSH
36483: LD_VAR 0 10
36487: ST_TO_ADDR
// end ;
36488: GO 36369
36490: POP
36491: POP
// result := array ;
36492: LD_ADDR_VAR 0 5
36496: PUSH
36497: LD_VAR 0 1
36501: ST_TO_ADDR
// end ;
36502: LD_VAR 0 5
36506: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36507: LD_INT 0
36509: PPUSH
36510: PPUSH
// result := 0 ;
36511: LD_ADDR_VAR 0 3
36515: PUSH
36516: LD_INT 0
36518: ST_TO_ADDR
// if not array or not value in array then
36519: LD_VAR 0 1
36523: NOT
36524: PUSH
36525: LD_VAR 0 2
36529: PUSH
36530: LD_VAR 0 1
36534: IN
36535: NOT
36536: OR
36537: IFFALSE 36541
// exit ;
36539: GO 36595
// for i = 1 to array do
36541: LD_ADDR_VAR 0 4
36545: PUSH
36546: DOUBLE
36547: LD_INT 1
36549: DEC
36550: ST_TO_ADDR
36551: LD_VAR 0 1
36555: PUSH
36556: FOR_TO
36557: IFFALSE 36593
// if value = array [ i ] then
36559: LD_VAR 0 2
36563: PUSH
36564: LD_VAR 0 1
36568: PUSH
36569: LD_VAR 0 4
36573: ARRAY
36574: EQUAL
36575: IFFALSE 36591
// begin result := i ;
36577: LD_ADDR_VAR 0 3
36581: PUSH
36582: LD_VAR 0 4
36586: ST_TO_ADDR
// exit ;
36587: POP
36588: POP
36589: GO 36595
// end ;
36591: GO 36556
36593: POP
36594: POP
// end ;
36595: LD_VAR 0 3
36599: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36600: LD_INT 0
36602: PPUSH
// vc_chassis := chassis ;
36603: LD_ADDR_OWVAR 37
36607: PUSH
36608: LD_VAR 0 1
36612: ST_TO_ADDR
// vc_engine := engine ;
36613: LD_ADDR_OWVAR 39
36617: PUSH
36618: LD_VAR 0 2
36622: ST_TO_ADDR
// vc_control := control ;
36623: LD_ADDR_OWVAR 38
36627: PUSH
36628: LD_VAR 0 3
36632: ST_TO_ADDR
// vc_weapon := weapon ;
36633: LD_ADDR_OWVAR 40
36637: PUSH
36638: LD_VAR 0 4
36642: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36643: LD_ADDR_OWVAR 41
36647: PUSH
36648: LD_VAR 0 5
36652: ST_TO_ADDR
// end ;
36653: LD_VAR 0 6
36657: RET
// export function WantPlant ( unit ) ; var task ; begin
36658: LD_INT 0
36660: PPUSH
36661: PPUSH
// result := false ;
36662: LD_ADDR_VAR 0 2
36666: PUSH
36667: LD_INT 0
36669: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36670: LD_ADDR_VAR 0 3
36674: PUSH
36675: LD_VAR 0 1
36679: PPUSH
36680: CALL_OW 437
36684: ST_TO_ADDR
// if task then
36685: LD_VAR 0 3
36689: IFFALSE 36717
// if task [ 1 ] [ 1 ] = p then
36691: LD_VAR 0 3
36695: PUSH
36696: LD_INT 1
36698: ARRAY
36699: PUSH
36700: LD_INT 1
36702: ARRAY
36703: PUSH
36704: LD_STRING p
36706: EQUAL
36707: IFFALSE 36717
// result := true ;
36709: LD_ADDR_VAR 0 2
36713: PUSH
36714: LD_INT 1
36716: ST_TO_ADDR
// end ;
36717: LD_VAR 0 2
36721: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36722: LD_INT 0
36724: PPUSH
36725: PPUSH
36726: PPUSH
36727: PPUSH
// if pos < 1 then
36728: LD_VAR 0 2
36732: PUSH
36733: LD_INT 1
36735: LESS
36736: IFFALSE 36740
// exit ;
36738: GO 37043
// if pos = 1 then
36740: LD_VAR 0 2
36744: PUSH
36745: LD_INT 1
36747: EQUAL
36748: IFFALSE 36781
// result := Replace ( arr , pos [ 1 ] , value ) else
36750: LD_ADDR_VAR 0 4
36754: PUSH
36755: LD_VAR 0 1
36759: PPUSH
36760: LD_VAR 0 2
36764: PUSH
36765: LD_INT 1
36767: ARRAY
36768: PPUSH
36769: LD_VAR 0 3
36773: PPUSH
36774: CALL_OW 1
36778: ST_TO_ADDR
36779: GO 37043
// begin tmp := arr ;
36781: LD_ADDR_VAR 0 6
36785: PUSH
36786: LD_VAR 0 1
36790: ST_TO_ADDR
// s_arr := [ tmp ] ;
36791: LD_ADDR_VAR 0 7
36795: PUSH
36796: LD_VAR 0 6
36800: PUSH
36801: EMPTY
36802: LIST
36803: ST_TO_ADDR
// for i = 1 to pos - 1 do
36804: LD_ADDR_VAR 0 5
36808: PUSH
36809: DOUBLE
36810: LD_INT 1
36812: DEC
36813: ST_TO_ADDR
36814: LD_VAR 0 2
36818: PUSH
36819: LD_INT 1
36821: MINUS
36822: PUSH
36823: FOR_TO
36824: IFFALSE 36869
// begin tmp := tmp [ pos [ i ] ] ;
36826: LD_ADDR_VAR 0 6
36830: PUSH
36831: LD_VAR 0 6
36835: PUSH
36836: LD_VAR 0 2
36840: PUSH
36841: LD_VAR 0 5
36845: ARRAY
36846: ARRAY
36847: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
36848: LD_ADDR_VAR 0 7
36852: PUSH
36853: LD_VAR 0 7
36857: PUSH
36858: LD_VAR 0 6
36862: PUSH
36863: EMPTY
36864: LIST
36865: ADD
36866: ST_TO_ADDR
// end ;
36867: GO 36823
36869: POP
36870: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
36871: LD_ADDR_VAR 0 6
36875: PUSH
36876: LD_VAR 0 6
36880: PPUSH
36881: LD_VAR 0 2
36885: PUSH
36886: LD_VAR 0 2
36890: ARRAY
36891: PPUSH
36892: LD_VAR 0 3
36896: PPUSH
36897: CALL_OW 1
36901: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
36902: LD_ADDR_VAR 0 7
36906: PUSH
36907: LD_VAR 0 7
36911: PPUSH
36912: LD_VAR 0 7
36916: PPUSH
36917: LD_VAR 0 6
36921: PPUSH
36922: CALL_OW 1
36926: ST_TO_ADDR
// for i = s_arr downto 2 do
36927: LD_ADDR_VAR 0 5
36931: PUSH
36932: DOUBLE
36933: LD_VAR 0 7
36937: INC
36938: ST_TO_ADDR
36939: LD_INT 2
36941: PUSH
36942: FOR_DOWNTO
36943: IFFALSE 37027
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
36945: LD_ADDR_VAR 0 6
36949: PUSH
36950: LD_VAR 0 7
36954: PUSH
36955: LD_VAR 0 5
36959: PUSH
36960: LD_INT 1
36962: MINUS
36963: ARRAY
36964: PPUSH
36965: LD_VAR 0 2
36969: PUSH
36970: LD_VAR 0 5
36974: PUSH
36975: LD_INT 1
36977: MINUS
36978: ARRAY
36979: PPUSH
36980: LD_VAR 0 7
36984: PUSH
36985: LD_VAR 0 5
36989: ARRAY
36990: PPUSH
36991: CALL_OW 1
36995: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
36996: LD_ADDR_VAR 0 7
37000: PUSH
37001: LD_VAR 0 7
37005: PPUSH
37006: LD_VAR 0 5
37010: PUSH
37011: LD_INT 1
37013: MINUS
37014: PPUSH
37015: LD_VAR 0 6
37019: PPUSH
37020: CALL_OW 1
37024: ST_TO_ADDR
// end ;
37025: GO 36942
37027: POP
37028: POP
// result := s_arr [ 1 ] ;
37029: LD_ADDR_VAR 0 4
37033: PUSH
37034: LD_VAR 0 7
37038: PUSH
37039: LD_INT 1
37041: ARRAY
37042: ST_TO_ADDR
// end ; end ;
37043: LD_VAR 0 4
37047: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37048: LD_INT 0
37050: PPUSH
37051: PPUSH
// if not list then
37052: LD_VAR 0 1
37056: NOT
37057: IFFALSE 37061
// exit ;
37059: GO 37152
// i := list [ pos1 ] ;
37061: LD_ADDR_VAR 0 5
37065: PUSH
37066: LD_VAR 0 1
37070: PUSH
37071: LD_VAR 0 2
37075: ARRAY
37076: ST_TO_ADDR
// if not i then
37077: LD_VAR 0 5
37081: NOT
37082: IFFALSE 37086
// exit ;
37084: GO 37152
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37086: LD_ADDR_VAR 0 1
37090: PUSH
37091: LD_VAR 0 1
37095: PPUSH
37096: LD_VAR 0 2
37100: PPUSH
37101: LD_VAR 0 1
37105: PUSH
37106: LD_VAR 0 3
37110: ARRAY
37111: PPUSH
37112: CALL_OW 1
37116: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37117: LD_ADDR_VAR 0 1
37121: PUSH
37122: LD_VAR 0 1
37126: PPUSH
37127: LD_VAR 0 3
37131: PPUSH
37132: LD_VAR 0 5
37136: PPUSH
37137: CALL_OW 1
37141: ST_TO_ADDR
// result := list ;
37142: LD_ADDR_VAR 0 4
37146: PUSH
37147: LD_VAR 0 1
37151: ST_TO_ADDR
// end ;
37152: LD_VAR 0 4
37156: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37157: LD_INT 0
37159: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37160: LD_ADDR_VAR 0 5
37164: PUSH
37165: LD_VAR 0 1
37169: PPUSH
37170: CALL_OW 250
37174: PPUSH
37175: LD_VAR 0 1
37179: PPUSH
37180: CALL_OW 251
37184: PPUSH
37185: LD_VAR 0 2
37189: PPUSH
37190: LD_VAR 0 3
37194: PPUSH
37195: LD_VAR 0 4
37199: PPUSH
37200: CALL 37210 0 5
37204: ST_TO_ADDR
// end ;
37205: LD_VAR 0 5
37209: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37210: LD_INT 0
37212: PPUSH
37213: PPUSH
37214: PPUSH
37215: PPUSH
// if not list then
37216: LD_VAR 0 3
37220: NOT
37221: IFFALSE 37225
// exit ;
37223: GO 37613
// result := [ ] ;
37225: LD_ADDR_VAR 0 6
37229: PUSH
37230: EMPTY
37231: ST_TO_ADDR
// for i in list do
37232: LD_ADDR_VAR 0 7
37236: PUSH
37237: LD_VAR 0 3
37241: PUSH
37242: FOR_IN
37243: IFFALSE 37445
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37245: LD_ADDR_VAR 0 9
37249: PUSH
37250: LD_VAR 0 7
37254: PPUSH
37255: LD_VAR 0 1
37259: PPUSH
37260: LD_VAR 0 2
37264: PPUSH
37265: CALL_OW 297
37269: ST_TO_ADDR
// if not result then
37270: LD_VAR 0 6
37274: NOT
37275: IFFALSE 37301
// result := [ [ i , tmp ] ] else
37277: LD_ADDR_VAR 0 6
37281: PUSH
37282: LD_VAR 0 7
37286: PUSH
37287: LD_VAR 0 9
37291: PUSH
37292: EMPTY
37293: LIST
37294: LIST
37295: PUSH
37296: EMPTY
37297: LIST
37298: ST_TO_ADDR
37299: GO 37443
// begin if result [ result ] [ 2 ] < tmp then
37301: LD_VAR 0 6
37305: PUSH
37306: LD_VAR 0 6
37310: ARRAY
37311: PUSH
37312: LD_INT 2
37314: ARRAY
37315: PUSH
37316: LD_VAR 0 9
37320: LESS
37321: IFFALSE 37363
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37323: LD_ADDR_VAR 0 6
37327: PUSH
37328: LD_VAR 0 6
37332: PPUSH
37333: LD_VAR 0 6
37337: PUSH
37338: LD_INT 1
37340: PLUS
37341: PPUSH
37342: LD_VAR 0 7
37346: PUSH
37347: LD_VAR 0 9
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: PPUSH
37356: CALL_OW 2
37360: ST_TO_ADDR
37361: GO 37443
// for j = 1 to result do
37363: LD_ADDR_VAR 0 8
37367: PUSH
37368: DOUBLE
37369: LD_INT 1
37371: DEC
37372: ST_TO_ADDR
37373: LD_VAR 0 6
37377: PUSH
37378: FOR_TO
37379: IFFALSE 37441
// begin if tmp < result [ j ] [ 2 ] then
37381: LD_VAR 0 9
37385: PUSH
37386: LD_VAR 0 6
37390: PUSH
37391: LD_VAR 0 8
37395: ARRAY
37396: PUSH
37397: LD_INT 2
37399: ARRAY
37400: LESS
37401: IFFALSE 37439
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37403: LD_ADDR_VAR 0 6
37407: PUSH
37408: LD_VAR 0 6
37412: PPUSH
37413: LD_VAR 0 8
37417: PPUSH
37418: LD_VAR 0 7
37422: PUSH
37423: LD_VAR 0 9
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PPUSH
37432: CALL_OW 2
37436: ST_TO_ADDR
// break ;
37437: GO 37441
// end ; end ;
37439: GO 37378
37441: POP
37442: POP
// end ; end ;
37443: GO 37242
37445: POP
37446: POP
// if result and not asc then
37447: LD_VAR 0 6
37451: PUSH
37452: LD_VAR 0 4
37456: NOT
37457: AND
37458: IFFALSE 37533
// begin tmp := result ;
37460: LD_ADDR_VAR 0 9
37464: PUSH
37465: LD_VAR 0 6
37469: ST_TO_ADDR
// for i = tmp downto 1 do
37470: LD_ADDR_VAR 0 7
37474: PUSH
37475: DOUBLE
37476: LD_VAR 0 9
37480: INC
37481: ST_TO_ADDR
37482: LD_INT 1
37484: PUSH
37485: FOR_DOWNTO
37486: IFFALSE 37531
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37488: LD_ADDR_VAR 0 6
37492: PUSH
37493: LD_VAR 0 6
37497: PPUSH
37498: LD_VAR 0 9
37502: PUSH
37503: LD_VAR 0 7
37507: MINUS
37508: PUSH
37509: LD_INT 1
37511: PLUS
37512: PPUSH
37513: LD_VAR 0 9
37517: PUSH
37518: LD_VAR 0 7
37522: ARRAY
37523: PPUSH
37524: CALL_OW 1
37528: ST_TO_ADDR
37529: GO 37485
37531: POP
37532: POP
// end ; tmp := [ ] ;
37533: LD_ADDR_VAR 0 9
37537: PUSH
37538: EMPTY
37539: ST_TO_ADDR
// if mode then
37540: LD_VAR 0 5
37544: IFFALSE 37613
// begin for i = 1 to result do
37546: LD_ADDR_VAR 0 7
37550: PUSH
37551: DOUBLE
37552: LD_INT 1
37554: DEC
37555: ST_TO_ADDR
37556: LD_VAR 0 6
37560: PUSH
37561: FOR_TO
37562: IFFALSE 37601
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37564: LD_ADDR_VAR 0 9
37568: PUSH
37569: LD_VAR 0 9
37573: PPUSH
37574: LD_VAR 0 7
37578: PPUSH
37579: LD_VAR 0 6
37583: PUSH
37584: LD_VAR 0 7
37588: ARRAY
37589: PUSH
37590: LD_INT 1
37592: ARRAY
37593: PPUSH
37594: CALL_OW 1
37598: ST_TO_ADDR
37599: GO 37561
37601: POP
37602: POP
// result := tmp ;
37603: LD_ADDR_VAR 0 6
37607: PUSH
37608: LD_VAR 0 9
37612: ST_TO_ADDR
// end ; end ;
37613: LD_VAR 0 6
37617: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37618: LD_INT 0
37620: PPUSH
37621: PPUSH
37622: PPUSH
37623: PPUSH
37624: PPUSH
37625: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37626: LD_ADDR_VAR 0 5
37630: PUSH
37631: LD_INT 0
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: LD_INT 0
37639: PUSH
37640: EMPTY
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: ST_TO_ADDR
// if not x or not y then
37648: LD_VAR 0 2
37652: NOT
37653: PUSH
37654: LD_VAR 0 3
37658: NOT
37659: OR
37660: IFFALSE 37664
// exit ;
37662: GO 39310
// if not range then
37664: LD_VAR 0 4
37668: NOT
37669: IFFALSE 37679
// range := 10 ;
37671: LD_ADDR_VAR 0 4
37675: PUSH
37676: LD_INT 10
37678: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37679: LD_ADDR_VAR 0 8
37683: PUSH
37684: LD_INT 81
37686: PUSH
37687: LD_VAR 0 1
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 92
37698: PUSH
37699: LD_VAR 0 2
37703: PUSH
37704: LD_VAR 0 3
37708: PUSH
37709: LD_VAR 0 4
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: PUSH
37720: LD_INT 3
37722: PUSH
37723: LD_INT 21
37725: PUSH
37726: LD_INT 3
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: EMPTY
37738: LIST
37739: LIST
37740: LIST
37741: PPUSH
37742: CALL_OW 69
37746: ST_TO_ADDR
// if not tmp then
37747: LD_VAR 0 8
37751: NOT
37752: IFFALSE 37756
// exit ;
37754: GO 39310
// for i in tmp do
37756: LD_ADDR_VAR 0 6
37760: PUSH
37761: LD_VAR 0 8
37765: PUSH
37766: FOR_IN
37767: IFFALSE 39285
// begin points := [ 0 , 0 , 0 ] ;
37769: LD_ADDR_VAR 0 9
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 0
37779: PUSH
37780: LD_INT 0
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: ST_TO_ADDR
// bpoints := 1 ;
37788: LD_ADDR_VAR 0 10
37792: PUSH
37793: LD_INT 1
37795: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37796: LD_VAR 0 6
37800: PPUSH
37801: CALL_OW 247
37805: PUSH
37806: LD_INT 1
37808: DOUBLE
37809: EQUAL
37810: IFTRUE 37814
37812: GO 38392
37814: POP
// begin if GetClass ( i ) = 1 then
37815: LD_VAR 0 6
37819: PPUSH
37820: CALL_OW 257
37824: PUSH
37825: LD_INT 1
37827: EQUAL
37828: IFFALSE 37849
// points := [ 10 , 5 , 3 ] ;
37830: LD_ADDR_VAR 0 9
37834: PUSH
37835: LD_INT 10
37837: PUSH
37838: LD_INT 5
37840: PUSH
37841: LD_INT 3
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: LIST
37848: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
37849: LD_VAR 0 6
37853: PPUSH
37854: CALL_OW 257
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: LD_INT 3
37864: PUSH
37865: LD_INT 4
37867: PUSH
37868: EMPTY
37869: LIST
37870: LIST
37871: LIST
37872: IN
37873: IFFALSE 37894
// points := [ 3 , 2 , 1 ] ;
37875: LD_ADDR_VAR 0 9
37879: PUSH
37880: LD_INT 3
37882: PUSH
37883: LD_INT 2
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: LIST
37893: ST_TO_ADDR
// if GetClass ( i ) = 5 then
37894: LD_VAR 0 6
37898: PPUSH
37899: CALL_OW 257
37903: PUSH
37904: LD_INT 5
37906: EQUAL
37907: IFFALSE 37928
// points := [ 130 , 5 , 2 ] ;
37909: LD_ADDR_VAR 0 9
37913: PUSH
37914: LD_INT 130
37916: PUSH
37917: LD_INT 5
37919: PUSH
37920: LD_INT 2
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: LIST
37927: ST_TO_ADDR
// if GetClass ( i ) = 8 then
37928: LD_VAR 0 6
37932: PPUSH
37933: CALL_OW 257
37937: PUSH
37938: LD_INT 8
37940: EQUAL
37941: IFFALSE 37962
// points := [ 35 , 35 , 30 ] ;
37943: LD_ADDR_VAR 0 9
37947: PUSH
37948: LD_INT 35
37950: PUSH
37951: LD_INT 35
37953: PUSH
37954: LD_INT 30
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: LIST
37961: ST_TO_ADDR
// if GetClass ( i ) = 9 then
37962: LD_VAR 0 6
37966: PPUSH
37967: CALL_OW 257
37971: PUSH
37972: LD_INT 9
37974: EQUAL
37975: IFFALSE 37996
// points := [ 20 , 55 , 40 ] ;
37977: LD_ADDR_VAR 0 9
37981: PUSH
37982: LD_INT 20
37984: PUSH
37985: LD_INT 55
37987: PUSH
37988: LD_INT 40
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: LIST
37995: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
37996: LD_VAR 0 6
38000: PPUSH
38001: CALL_OW 257
38005: PUSH
38006: LD_INT 12
38008: PUSH
38009: LD_INT 16
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: IN
38016: IFFALSE 38037
// points := [ 5 , 3 , 2 ] ;
38018: LD_ADDR_VAR 0 9
38022: PUSH
38023: LD_INT 5
38025: PUSH
38026: LD_INT 3
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: LIST
38036: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38037: LD_VAR 0 6
38041: PPUSH
38042: CALL_OW 257
38046: PUSH
38047: LD_INT 17
38049: EQUAL
38050: IFFALSE 38071
// points := [ 100 , 50 , 75 ] ;
38052: LD_ADDR_VAR 0 9
38056: PUSH
38057: LD_INT 100
38059: PUSH
38060: LD_INT 50
38062: PUSH
38063: LD_INT 75
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: LIST
38070: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38071: LD_VAR 0 6
38075: PPUSH
38076: CALL_OW 257
38080: PUSH
38081: LD_INT 15
38083: EQUAL
38084: IFFALSE 38105
// points := [ 10 , 5 , 3 ] ;
38086: LD_ADDR_VAR 0 9
38090: PUSH
38091: LD_INT 10
38093: PUSH
38094: LD_INT 5
38096: PUSH
38097: LD_INT 3
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: LIST
38104: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38105: LD_VAR 0 6
38109: PPUSH
38110: CALL_OW 257
38114: PUSH
38115: LD_INT 14
38117: EQUAL
38118: IFFALSE 38139
// points := [ 10 , 0 , 0 ] ;
38120: LD_ADDR_VAR 0 9
38124: PUSH
38125: LD_INT 10
38127: PUSH
38128: LD_INT 0
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: LIST
38138: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38139: LD_VAR 0 6
38143: PPUSH
38144: CALL_OW 257
38148: PUSH
38149: LD_INT 11
38151: EQUAL
38152: IFFALSE 38173
// points := [ 30 , 10 , 5 ] ;
38154: LD_ADDR_VAR 0 9
38158: PUSH
38159: LD_INT 30
38161: PUSH
38162: LD_INT 10
38164: PUSH
38165: LD_INT 5
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: LIST
38172: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38173: LD_VAR 0 1
38177: PPUSH
38178: LD_INT 5
38180: PPUSH
38181: CALL_OW 321
38185: PUSH
38186: LD_INT 2
38188: EQUAL
38189: IFFALSE 38206
// bpoints := bpoints * 1.8 ;
38191: LD_ADDR_VAR 0 10
38195: PUSH
38196: LD_VAR 0 10
38200: PUSH
38201: LD_REAL  1.80000000000000E+0000
38204: MUL
38205: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38206: LD_VAR 0 6
38210: PPUSH
38211: CALL_OW 257
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 2
38221: PUSH
38222: LD_INT 3
38224: PUSH
38225: LD_INT 4
38227: PUSH
38228: EMPTY
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: IN
38234: PUSH
38235: LD_VAR 0 1
38239: PPUSH
38240: LD_INT 51
38242: PPUSH
38243: CALL_OW 321
38247: PUSH
38248: LD_INT 2
38250: EQUAL
38251: AND
38252: IFFALSE 38269
// bpoints := bpoints * 1.2 ;
38254: LD_ADDR_VAR 0 10
38258: PUSH
38259: LD_VAR 0 10
38263: PUSH
38264: LD_REAL  1.20000000000000E+0000
38267: MUL
38268: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38269: LD_VAR 0 6
38273: PPUSH
38274: CALL_OW 257
38278: PUSH
38279: LD_INT 5
38281: PUSH
38282: LD_INT 7
38284: PUSH
38285: LD_INT 9
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: LIST
38292: IN
38293: PUSH
38294: LD_VAR 0 1
38298: PPUSH
38299: LD_INT 52
38301: PPUSH
38302: CALL_OW 321
38306: PUSH
38307: LD_INT 2
38309: EQUAL
38310: AND
38311: IFFALSE 38328
// bpoints := bpoints * 1.5 ;
38313: LD_ADDR_VAR 0 10
38317: PUSH
38318: LD_VAR 0 10
38322: PUSH
38323: LD_REAL  1.50000000000000E+0000
38326: MUL
38327: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38328: LD_VAR 0 1
38332: PPUSH
38333: LD_INT 66
38335: PPUSH
38336: CALL_OW 321
38340: PUSH
38341: LD_INT 2
38343: EQUAL
38344: IFFALSE 38361
// bpoints := bpoints * 1.1 ;
38346: LD_ADDR_VAR 0 10
38350: PUSH
38351: LD_VAR 0 10
38355: PUSH
38356: LD_REAL  1.10000000000000E+0000
38359: MUL
38360: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38361: LD_ADDR_VAR 0 10
38365: PUSH
38366: LD_VAR 0 10
38370: PUSH
38371: LD_VAR 0 6
38375: PPUSH
38376: LD_INT 1
38378: PPUSH
38379: CALL_OW 259
38383: PUSH
38384: LD_REAL  1.15000000000000E+0000
38387: MUL
38388: MUL
38389: ST_TO_ADDR
// end ; unit_vehicle :
38390: GO 39214
38392: LD_INT 2
38394: DOUBLE
38395: EQUAL
38396: IFTRUE 38400
38398: GO 39202
38400: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38401: LD_VAR 0 6
38405: PPUSH
38406: CALL_OW 264
38410: PUSH
38411: LD_INT 2
38413: PUSH
38414: LD_INT 42
38416: PUSH
38417: LD_INT 24
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: LIST
38424: IN
38425: IFFALSE 38446
// points := [ 25 , 5 , 3 ] ;
38427: LD_ADDR_VAR 0 9
38431: PUSH
38432: LD_INT 25
38434: PUSH
38435: LD_INT 5
38437: PUSH
38438: LD_INT 3
38440: PUSH
38441: EMPTY
38442: LIST
38443: LIST
38444: LIST
38445: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38446: LD_VAR 0 6
38450: PPUSH
38451: CALL_OW 264
38455: PUSH
38456: LD_INT 4
38458: PUSH
38459: LD_INT 43
38461: PUSH
38462: LD_INT 25
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: LIST
38469: IN
38470: IFFALSE 38491
// points := [ 40 , 15 , 5 ] ;
38472: LD_ADDR_VAR 0 9
38476: PUSH
38477: LD_INT 40
38479: PUSH
38480: LD_INT 15
38482: PUSH
38483: LD_INT 5
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: LIST
38490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38491: LD_VAR 0 6
38495: PPUSH
38496: CALL_OW 264
38500: PUSH
38501: LD_INT 3
38503: PUSH
38504: LD_INT 23
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: IN
38511: IFFALSE 38532
// points := [ 7 , 25 , 8 ] ;
38513: LD_ADDR_VAR 0 9
38517: PUSH
38518: LD_INT 7
38520: PUSH
38521: LD_INT 25
38523: PUSH
38524: LD_INT 8
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: LIST
38531: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38532: LD_VAR 0 6
38536: PPUSH
38537: CALL_OW 264
38541: PUSH
38542: LD_INT 5
38544: PUSH
38545: LD_INT 27
38547: PUSH
38548: LD_INT 44
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: IN
38556: IFFALSE 38577
// points := [ 14 , 50 , 16 ] ;
38558: LD_ADDR_VAR 0 9
38562: PUSH
38563: LD_INT 14
38565: PUSH
38566: LD_INT 50
38568: PUSH
38569: LD_INT 16
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: LIST
38576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38577: LD_VAR 0 6
38581: PPUSH
38582: CALL_OW 264
38586: PUSH
38587: LD_INT 6
38589: PUSH
38590: LD_INT 46
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: IN
38597: IFFALSE 38618
// points := [ 32 , 120 , 70 ] ;
38599: LD_ADDR_VAR 0 9
38603: PUSH
38604: LD_INT 32
38606: PUSH
38607: LD_INT 120
38609: PUSH
38610: LD_INT 70
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
38618: LD_VAR 0 6
38622: PPUSH
38623: CALL_OW 264
38627: PUSH
38628: LD_INT 7
38630: PUSH
38631: LD_INT 28
38633: PUSH
38634: LD_INT 45
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: IN
38642: IFFALSE 38663
// points := [ 35 , 20 , 45 ] ;
38644: LD_ADDR_VAR 0 9
38648: PUSH
38649: LD_INT 35
38651: PUSH
38652: LD_INT 20
38654: PUSH
38655: LD_INT 45
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: LIST
38662: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38663: LD_VAR 0 6
38667: PPUSH
38668: CALL_OW 264
38672: PUSH
38673: LD_INT 47
38675: PUSH
38676: EMPTY
38677: LIST
38678: IN
38679: IFFALSE 38700
// points := [ 67 , 45 , 75 ] ;
38681: LD_ADDR_VAR 0 9
38685: PUSH
38686: LD_INT 67
38688: PUSH
38689: LD_INT 45
38691: PUSH
38692: LD_INT 75
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38700: LD_VAR 0 6
38704: PPUSH
38705: CALL_OW 264
38709: PUSH
38710: LD_INT 26
38712: PUSH
38713: EMPTY
38714: LIST
38715: IN
38716: IFFALSE 38737
// points := [ 120 , 30 , 80 ] ;
38718: LD_ADDR_VAR 0 9
38722: PUSH
38723: LD_INT 120
38725: PUSH
38726: LD_INT 30
38728: PUSH
38729: LD_INT 80
38731: PUSH
38732: EMPTY
38733: LIST
38734: LIST
38735: LIST
38736: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38737: LD_VAR 0 6
38741: PPUSH
38742: CALL_OW 264
38746: PUSH
38747: LD_INT 22
38749: PUSH
38750: EMPTY
38751: LIST
38752: IN
38753: IFFALSE 38774
// points := [ 40 , 1 , 1 ] ;
38755: LD_ADDR_VAR 0 9
38759: PUSH
38760: LD_INT 40
38762: PUSH
38763: LD_INT 1
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38774: LD_VAR 0 6
38778: PPUSH
38779: CALL_OW 264
38783: PUSH
38784: LD_INT 29
38786: PUSH
38787: EMPTY
38788: LIST
38789: IN
38790: IFFALSE 38811
// points := [ 70 , 200 , 400 ] ;
38792: LD_ADDR_VAR 0 9
38796: PUSH
38797: LD_INT 70
38799: PUSH
38800: LD_INT 200
38802: PUSH
38803: LD_INT 400
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: LIST
38810: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
38811: LD_VAR 0 6
38815: PPUSH
38816: CALL_OW 264
38820: PUSH
38821: LD_INT 14
38823: PUSH
38824: LD_INT 53
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: IN
38831: IFFALSE 38852
// points := [ 40 , 10 , 20 ] ;
38833: LD_ADDR_VAR 0 9
38837: PUSH
38838: LD_INT 40
38840: PUSH
38841: LD_INT 10
38843: PUSH
38844: LD_INT 20
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: LIST
38851: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
38852: LD_VAR 0 6
38856: PPUSH
38857: CALL_OW 264
38861: PUSH
38862: LD_INT 9
38864: PUSH
38865: EMPTY
38866: LIST
38867: IN
38868: IFFALSE 38889
// points := [ 5 , 70 , 20 ] ;
38870: LD_ADDR_VAR 0 9
38874: PUSH
38875: LD_INT 5
38877: PUSH
38878: LD_INT 70
38880: PUSH
38881: LD_INT 20
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: LIST
38888: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
38889: LD_VAR 0 6
38893: PPUSH
38894: CALL_OW 264
38898: PUSH
38899: LD_INT 10
38901: PUSH
38902: EMPTY
38903: LIST
38904: IN
38905: IFFALSE 38926
// points := [ 35 , 110 , 70 ] ;
38907: LD_ADDR_VAR 0 9
38911: PUSH
38912: LD_INT 35
38914: PUSH
38915: LD_INT 110
38917: PUSH
38918: LD_INT 70
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
38926: LD_VAR 0 6
38930: PPUSH
38931: CALL_OW 265
38935: PUSH
38936: LD_INT 25
38938: EQUAL
38939: IFFALSE 38960
// points := [ 80 , 65 , 100 ] ;
38941: LD_ADDR_VAR 0 9
38945: PUSH
38946: LD_INT 80
38948: PUSH
38949: LD_INT 65
38951: PUSH
38952: LD_INT 100
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: LIST
38959: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
38960: LD_VAR 0 6
38964: PPUSH
38965: CALL_OW 263
38969: PUSH
38970: LD_INT 1
38972: EQUAL
38973: IFFALSE 39008
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
38975: LD_ADDR_VAR 0 10
38979: PUSH
38980: LD_VAR 0 10
38984: PUSH
38985: LD_VAR 0 6
38989: PPUSH
38990: CALL_OW 311
38994: PPUSH
38995: LD_INT 3
38997: PPUSH
38998: CALL_OW 259
39002: PUSH
39003: LD_INT 4
39005: MUL
39006: MUL
39007: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39008: LD_VAR 0 6
39012: PPUSH
39013: CALL_OW 263
39017: PUSH
39018: LD_INT 2
39020: EQUAL
39021: IFFALSE 39072
// begin j := IsControledBy ( i ) ;
39023: LD_ADDR_VAR 0 7
39027: PUSH
39028: LD_VAR 0 6
39032: PPUSH
39033: CALL_OW 312
39037: ST_TO_ADDR
// if j then
39038: LD_VAR 0 7
39042: IFFALSE 39072
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39044: LD_ADDR_VAR 0 10
39048: PUSH
39049: LD_VAR 0 10
39053: PUSH
39054: LD_VAR 0 7
39058: PPUSH
39059: LD_INT 3
39061: PPUSH
39062: CALL_OW 259
39066: PUSH
39067: LD_INT 3
39069: MUL
39070: MUL
39071: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39072: LD_VAR 0 6
39076: PPUSH
39077: CALL_OW 264
39081: PUSH
39082: LD_INT 5
39084: PUSH
39085: LD_INT 6
39087: PUSH
39088: LD_INT 46
39090: PUSH
39091: LD_INT 44
39093: PUSH
39094: LD_INT 47
39096: PUSH
39097: LD_INT 45
39099: PUSH
39100: LD_INT 28
39102: PUSH
39103: LD_INT 7
39105: PUSH
39106: LD_INT 27
39108: PUSH
39109: LD_INT 29
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: LIST
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: IN
39124: PUSH
39125: LD_VAR 0 1
39129: PPUSH
39130: LD_INT 52
39132: PPUSH
39133: CALL_OW 321
39137: PUSH
39138: LD_INT 2
39140: EQUAL
39141: AND
39142: IFFALSE 39159
// bpoints := bpoints * 1.2 ;
39144: LD_ADDR_VAR 0 10
39148: PUSH
39149: LD_VAR 0 10
39153: PUSH
39154: LD_REAL  1.20000000000000E+0000
39157: MUL
39158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39159: LD_VAR 0 6
39163: PPUSH
39164: CALL_OW 264
39168: PUSH
39169: LD_INT 6
39171: PUSH
39172: LD_INT 46
39174: PUSH
39175: LD_INT 47
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: IN
39183: IFFALSE 39200
// bpoints := bpoints * 1.2 ;
39185: LD_ADDR_VAR 0 10
39189: PUSH
39190: LD_VAR 0 10
39194: PUSH
39195: LD_REAL  1.20000000000000E+0000
39198: MUL
39199: ST_TO_ADDR
// end ; unit_building :
39200: GO 39214
39202: LD_INT 3
39204: DOUBLE
39205: EQUAL
39206: IFTRUE 39210
39208: GO 39213
39210: POP
// ; end ;
39211: GO 39214
39213: POP
// for j = 1 to 3 do
39214: LD_ADDR_VAR 0 7
39218: PUSH
39219: DOUBLE
39220: LD_INT 1
39222: DEC
39223: ST_TO_ADDR
39224: LD_INT 3
39226: PUSH
39227: FOR_TO
39228: IFFALSE 39281
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39230: LD_ADDR_VAR 0 5
39234: PUSH
39235: LD_VAR 0 5
39239: PPUSH
39240: LD_VAR 0 7
39244: PPUSH
39245: LD_VAR 0 5
39249: PUSH
39250: LD_VAR 0 7
39254: ARRAY
39255: PUSH
39256: LD_VAR 0 9
39260: PUSH
39261: LD_VAR 0 7
39265: ARRAY
39266: PUSH
39267: LD_VAR 0 10
39271: MUL
39272: PLUS
39273: PPUSH
39274: CALL_OW 1
39278: ST_TO_ADDR
39279: GO 39227
39281: POP
39282: POP
// end ;
39283: GO 37766
39285: POP
39286: POP
// result := Replace ( result , 4 , tmp ) ;
39287: LD_ADDR_VAR 0 5
39291: PUSH
39292: LD_VAR 0 5
39296: PPUSH
39297: LD_INT 4
39299: PPUSH
39300: LD_VAR 0 8
39304: PPUSH
39305: CALL_OW 1
39309: ST_TO_ADDR
// end ;
39310: LD_VAR 0 5
39314: RET
// export function DangerAtRange ( unit , range ) ; begin
39315: LD_INT 0
39317: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39318: LD_ADDR_VAR 0 3
39322: PUSH
39323: LD_VAR 0 1
39327: PPUSH
39328: CALL_OW 255
39332: PPUSH
39333: LD_VAR 0 1
39337: PPUSH
39338: CALL_OW 250
39342: PPUSH
39343: LD_VAR 0 1
39347: PPUSH
39348: CALL_OW 251
39352: PPUSH
39353: LD_VAR 0 2
39357: PPUSH
39358: CALL 37618 0 4
39362: ST_TO_ADDR
// end ;
39363: LD_VAR 0 3
39367: RET
// export function DangerInArea ( side , area ) ; begin
39368: LD_INT 0
39370: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39371: LD_ADDR_VAR 0 3
39375: PUSH
39376: LD_VAR 0 2
39380: PPUSH
39381: LD_INT 81
39383: PUSH
39384: LD_VAR 0 1
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PPUSH
39393: CALL_OW 70
39397: ST_TO_ADDR
// end ;
39398: LD_VAR 0 3
39402: RET
// export function IsExtension ( b ) ; begin
39403: LD_INT 0
39405: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39406: LD_ADDR_VAR 0 2
39410: PUSH
39411: LD_VAR 0 1
39415: PUSH
39416: LD_INT 23
39418: PUSH
39419: LD_INT 20
39421: PUSH
39422: LD_INT 22
39424: PUSH
39425: LD_INT 17
39427: PUSH
39428: LD_INT 24
39430: PUSH
39431: LD_INT 21
39433: PUSH
39434: LD_INT 19
39436: PUSH
39437: LD_INT 16
39439: PUSH
39440: LD_INT 25
39442: PUSH
39443: LD_INT 18
39445: PUSH
39446: EMPTY
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: IN
39458: ST_TO_ADDR
// end ;
39459: LD_VAR 0 2
39463: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
39464: LD_INT 0
39466: PPUSH
39467: PPUSH
39468: PPUSH
// result := [ ] ;
39469: LD_ADDR_VAR 0 3
39473: PUSH
39474: EMPTY
39475: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39476: LD_ADDR_VAR 0 4
39480: PUSH
39481: LD_VAR 0 2
39485: PPUSH
39486: LD_INT 21
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PPUSH
39496: CALL_OW 70
39500: ST_TO_ADDR
// if not tmp then
39501: LD_VAR 0 4
39505: NOT
39506: IFFALSE 39510
// exit ;
39508: GO 39568
// for i in tmp do
39510: LD_ADDR_VAR 0 5
39514: PUSH
39515: LD_VAR 0 4
39519: PUSH
39520: FOR_IN
39521: IFFALSE 39556
// if GetBase ( i ) <> base then
39523: LD_VAR 0 5
39527: PPUSH
39528: CALL_OW 274
39532: PUSH
39533: LD_VAR 0 1
39537: NONEQUAL
39538: IFFALSE 39554
// ComLinkToBase ( base , i ) ;
39540: LD_VAR 0 1
39544: PPUSH
39545: LD_VAR 0 5
39549: PPUSH
39550: CALL_OW 169
39554: GO 39520
39556: POP
39557: POP
// result := tmp ;
39558: LD_ADDR_VAR 0 3
39562: PUSH
39563: LD_VAR 0 4
39567: ST_TO_ADDR
// end ;
39568: LD_VAR 0 3
39572: RET
// export function ComComplete ( unit , b ) ; var i ; begin
39573: LD_INT 0
39575: PPUSH
39576: PPUSH
// if BuildingStatus ( b ) = bs_build then
39577: LD_VAR 0 2
39581: PPUSH
39582: CALL_OW 461
39586: PUSH
39587: LD_INT 1
39589: EQUAL
39590: IFFALSE 39650
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39592: LD_VAR 0 1
39596: PPUSH
39597: LD_STRING h
39599: PUSH
39600: LD_VAR 0 2
39604: PPUSH
39605: CALL_OW 250
39609: PUSH
39610: LD_VAR 0 2
39614: PPUSH
39615: CALL_OW 251
39619: PUSH
39620: LD_VAR 0 2
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 0
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: LIST
39638: LIST
39639: LIST
39640: LIST
39641: LIST
39642: PUSH
39643: EMPTY
39644: LIST
39645: PPUSH
39646: CALL_OW 446
// end ;
39650: LD_VAR 0 3
39654: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39655: LD_INT 0
39657: PPUSH
39658: PPUSH
39659: PPUSH
39660: PPUSH
39661: PPUSH
39662: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39663: LD_VAR 0 1
39667: NOT
39668: PUSH
39669: LD_VAR 0 1
39673: PPUSH
39674: CALL_OW 263
39678: PUSH
39679: LD_INT 2
39681: EQUAL
39682: NOT
39683: OR
39684: IFFALSE 39688
// exit ;
39686: GO 40004
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39688: LD_ADDR_VAR 0 6
39692: PUSH
39693: LD_INT 22
39695: PUSH
39696: LD_VAR 0 1
39700: PPUSH
39701: CALL_OW 255
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 2
39712: PUSH
39713: LD_INT 30
39715: PUSH
39716: LD_INT 36
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 34
39725: PUSH
39726: LD_INT 31
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: LIST
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PPUSH
39742: CALL_OW 69
39746: ST_TO_ADDR
// if not tmp then
39747: LD_VAR 0 6
39751: NOT
39752: IFFALSE 39756
// exit ;
39754: GO 40004
// result := [ ] ;
39756: LD_ADDR_VAR 0 2
39760: PUSH
39761: EMPTY
39762: ST_TO_ADDR
// for i in tmp do
39763: LD_ADDR_VAR 0 3
39767: PUSH
39768: LD_VAR 0 6
39772: PUSH
39773: FOR_IN
39774: IFFALSE 39845
// begin t := UnitsInside ( i ) ;
39776: LD_ADDR_VAR 0 4
39780: PUSH
39781: LD_VAR 0 3
39785: PPUSH
39786: CALL_OW 313
39790: ST_TO_ADDR
// if t then
39791: LD_VAR 0 4
39795: IFFALSE 39843
// for j in t do
39797: LD_ADDR_VAR 0 7
39801: PUSH
39802: LD_VAR 0 4
39806: PUSH
39807: FOR_IN
39808: IFFALSE 39841
// result := Insert ( result , result + 1 , j ) ;
39810: LD_ADDR_VAR 0 2
39814: PUSH
39815: LD_VAR 0 2
39819: PPUSH
39820: LD_VAR 0 2
39824: PUSH
39825: LD_INT 1
39827: PLUS
39828: PPUSH
39829: LD_VAR 0 7
39833: PPUSH
39834: CALL_OW 2
39838: ST_TO_ADDR
39839: GO 39807
39841: POP
39842: POP
// end ;
39843: GO 39773
39845: POP
39846: POP
// if not result then
39847: LD_VAR 0 2
39851: NOT
39852: IFFALSE 39856
// exit ;
39854: GO 40004
// mech := result [ 1 ] ;
39856: LD_ADDR_VAR 0 5
39860: PUSH
39861: LD_VAR 0 2
39865: PUSH
39866: LD_INT 1
39868: ARRAY
39869: ST_TO_ADDR
// if result > 1 then
39870: LD_VAR 0 2
39874: PUSH
39875: LD_INT 1
39877: GREATER
39878: IFFALSE 39990
// for i = 2 to result do
39880: LD_ADDR_VAR 0 3
39884: PUSH
39885: DOUBLE
39886: LD_INT 2
39888: DEC
39889: ST_TO_ADDR
39890: LD_VAR 0 2
39894: PUSH
39895: FOR_TO
39896: IFFALSE 39988
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
39898: LD_ADDR_VAR 0 4
39902: PUSH
39903: LD_VAR 0 2
39907: PUSH
39908: LD_VAR 0 3
39912: ARRAY
39913: PPUSH
39914: LD_INT 3
39916: PPUSH
39917: CALL_OW 259
39921: PUSH
39922: LD_VAR 0 2
39926: PUSH
39927: LD_VAR 0 3
39931: ARRAY
39932: PPUSH
39933: CALL_OW 432
39937: MINUS
39938: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
39939: LD_VAR 0 4
39943: PUSH
39944: LD_VAR 0 5
39948: PPUSH
39949: LD_INT 3
39951: PPUSH
39952: CALL_OW 259
39956: PUSH
39957: LD_VAR 0 5
39961: PPUSH
39962: CALL_OW 432
39966: MINUS
39967: GREATEREQUAL
39968: IFFALSE 39986
// mech := result [ i ] ;
39970: LD_ADDR_VAR 0 5
39974: PUSH
39975: LD_VAR 0 2
39979: PUSH
39980: LD_VAR 0 3
39984: ARRAY
39985: ST_TO_ADDR
// end ;
39986: GO 39895
39988: POP
39989: POP
// ComLinkTo ( vehicle , mech ) ;
39990: LD_VAR 0 1
39994: PPUSH
39995: LD_VAR 0 5
39999: PPUSH
40000: CALL_OW 135
// end ;
40004: LD_VAR 0 2
40008: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40009: LD_INT 0
40011: PPUSH
40012: PPUSH
40013: PPUSH
40014: PPUSH
40015: PPUSH
40016: PPUSH
40017: PPUSH
40018: PPUSH
40019: PPUSH
40020: PPUSH
40021: PPUSH
40022: PPUSH
40023: PPUSH
// result := [ ] ;
40024: LD_ADDR_VAR 0 7
40028: PUSH
40029: EMPTY
40030: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40031: LD_VAR 0 1
40035: PPUSH
40036: CALL_OW 266
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 1
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: IN
40051: NOT
40052: IFFALSE 40056
// exit ;
40054: GO 41687
// if name then
40056: LD_VAR 0 3
40060: IFFALSE 40076
// SetBName ( base_dep , name ) ;
40062: LD_VAR 0 1
40066: PPUSH
40067: LD_VAR 0 3
40071: PPUSH
40072: CALL_OW 500
// base := GetBase ( base_dep ) ;
40076: LD_ADDR_VAR 0 15
40080: PUSH
40081: LD_VAR 0 1
40085: PPUSH
40086: CALL_OW 274
40090: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40091: LD_ADDR_VAR 0 16
40095: PUSH
40096: LD_VAR 0 1
40100: PPUSH
40101: CALL_OW 255
40105: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40106: LD_ADDR_VAR 0 17
40110: PUSH
40111: LD_VAR 0 1
40115: PPUSH
40116: CALL_OW 248
40120: ST_TO_ADDR
// if sources then
40121: LD_VAR 0 5
40125: IFFALSE 40172
// for i = 1 to 3 do
40127: LD_ADDR_VAR 0 8
40131: PUSH
40132: DOUBLE
40133: LD_INT 1
40135: DEC
40136: ST_TO_ADDR
40137: LD_INT 3
40139: PUSH
40140: FOR_TO
40141: IFFALSE 40170
// AddResourceType ( base , i , sources [ i ] ) ;
40143: LD_VAR 0 15
40147: PPUSH
40148: LD_VAR 0 8
40152: PPUSH
40153: LD_VAR 0 5
40157: PUSH
40158: LD_VAR 0 8
40162: ARRAY
40163: PPUSH
40164: CALL_OW 276
40168: GO 40140
40170: POP
40171: POP
// buildings := GetBaseBuildings ( base , area ) ;
40172: LD_ADDR_VAR 0 18
40176: PUSH
40177: LD_VAR 0 15
40181: PPUSH
40182: LD_VAR 0 2
40186: PPUSH
40187: CALL 39464 0 2
40191: ST_TO_ADDR
// InitHc ;
40192: CALL_OW 19
// InitUc ;
40196: CALL_OW 18
// uc_side := side ;
40200: LD_ADDR_OWVAR 20
40204: PUSH
40205: LD_VAR 0 16
40209: ST_TO_ADDR
// uc_nation := nation ;
40210: LD_ADDR_OWVAR 21
40214: PUSH
40215: LD_VAR 0 17
40219: ST_TO_ADDR
// if buildings then
40220: LD_VAR 0 18
40224: IFFALSE 41546
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40226: LD_ADDR_VAR 0 19
40230: PUSH
40231: LD_VAR 0 18
40235: PPUSH
40236: LD_INT 2
40238: PUSH
40239: LD_INT 30
40241: PUSH
40242: LD_INT 29
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 30
40251: PUSH
40252: LD_INT 30
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: LIST
40263: PPUSH
40264: CALL_OW 72
40268: ST_TO_ADDR
// if tmp then
40269: LD_VAR 0 19
40273: IFFALSE 40321
// for i in tmp do
40275: LD_ADDR_VAR 0 8
40279: PUSH
40280: LD_VAR 0 19
40284: PUSH
40285: FOR_IN
40286: IFFALSE 40319
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40288: LD_VAR 0 8
40292: PPUSH
40293: CALL_OW 250
40297: PPUSH
40298: LD_VAR 0 8
40302: PPUSH
40303: CALL_OW 251
40307: PPUSH
40308: LD_VAR 0 16
40312: PPUSH
40313: CALL_OW 441
40317: GO 40285
40319: POP
40320: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40321: LD_VAR 0 18
40325: PPUSH
40326: LD_INT 2
40328: PUSH
40329: LD_INT 30
40331: PUSH
40332: LD_INT 32
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 30
40341: PUSH
40342: LD_INT 33
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: LIST
40353: PPUSH
40354: CALL_OW 72
40358: IFFALSE 40446
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40360: LD_ADDR_VAR 0 8
40364: PUSH
40365: LD_VAR 0 18
40369: PPUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 30
40375: PUSH
40376: LD_INT 32
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: LD_INT 30
40385: PUSH
40386: LD_INT 33
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: LIST
40397: PPUSH
40398: CALL_OW 72
40402: PUSH
40403: FOR_IN
40404: IFFALSE 40444
// begin if not GetBWeapon ( i ) then
40406: LD_VAR 0 8
40410: PPUSH
40411: CALL_OW 269
40415: NOT
40416: IFFALSE 40442
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40418: LD_VAR 0 8
40422: PPUSH
40423: LD_VAR 0 8
40427: PPUSH
40428: LD_VAR 0 2
40432: PPUSH
40433: CALL 41692 0 2
40437: PPUSH
40438: CALL_OW 431
// end ;
40442: GO 40403
40444: POP
40445: POP
// end ; for i = 1 to personel do
40446: LD_ADDR_VAR 0 8
40450: PUSH
40451: DOUBLE
40452: LD_INT 1
40454: DEC
40455: ST_TO_ADDR
40456: LD_VAR 0 6
40460: PUSH
40461: FOR_TO
40462: IFFALSE 41526
// begin if i > 4 then
40464: LD_VAR 0 8
40468: PUSH
40469: LD_INT 4
40471: GREATER
40472: IFFALSE 40476
// break ;
40474: GO 41526
// case i of 1 :
40476: LD_VAR 0 8
40480: PUSH
40481: LD_INT 1
40483: DOUBLE
40484: EQUAL
40485: IFTRUE 40489
40487: GO 40569
40489: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40490: LD_ADDR_VAR 0 12
40494: PUSH
40495: LD_VAR 0 18
40499: PPUSH
40500: LD_INT 22
40502: PUSH
40503: LD_VAR 0 16
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 58
40514: PUSH
40515: EMPTY
40516: LIST
40517: PUSH
40518: LD_INT 2
40520: PUSH
40521: LD_INT 30
40523: PUSH
40524: LD_INT 32
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 30
40533: PUSH
40534: LD_INT 4
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 30
40543: PUSH
40544: LD_INT 5
40546: PUSH
40547: EMPTY
40548: LIST
40549: LIST
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: LIST
40561: PPUSH
40562: CALL_OW 72
40566: ST_TO_ADDR
40567: GO 40791
40569: LD_INT 2
40571: DOUBLE
40572: EQUAL
40573: IFTRUE 40577
40575: GO 40639
40577: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40578: LD_ADDR_VAR 0 12
40582: PUSH
40583: LD_VAR 0 18
40587: PPUSH
40588: LD_INT 22
40590: PUSH
40591: LD_VAR 0 16
40595: PUSH
40596: EMPTY
40597: LIST
40598: LIST
40599: PUSH
40600: LD_INT 2
40602: PUSH
40603: LD_INT 30
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 30
40615: PUSH
40616: LD_INT 1
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: LIST
40627: PUSH
40628: EMPTY
40629: LIST
40630: LIST
40631: PPUSH
40632: CALL_OW 72
40636: ST_TO_ADDR
40637: GO 40791
40639: LD_INT 3
40641: DOUBLE
40642: EQUAL
40643: IFTRUE 40647
40645: GO 40709
40647: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40648: LD_ADDR_VAR 0 12
40652: PUSH
40653: LD_VAR 0 18
40657: PPUSH
40658: LD_INT 22
40660: PUSH
40661: LD_VAR 0 16
40665: PUSH
40666: EMPTY
40667: LIST
40668: LIST
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: LD_INT 30
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: EMPTY
40680: LIST
40681: LIST
40682: PUSH
40683: LD_INT 30
40685: PUSH
40686: LD_INT 3
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: LIST
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PPUSH
40702: CALL_OW 72
40706: ST_TO_ADDR
40707: GO 40791
40709: LD_INT 4
40711: DOUBLE
40712: EQUAL
40713: IFTRUE 40717
40715: GO 40790
40717: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40718: LD_ADDR_VAR 0 12
40722: PUSH
40723: LD_VAR 0 18
40727: PPUSH
40728: LD_INT 22
40730: PUSH
40731: LD_VAR 0 16
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: PUSH
40743: LD_INT 30
40745: PUSH
40746: LD_INT 6
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 30
40755: PUSH
40756: LD_INT 7
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 30
40765: PUSH
40766: LD_INT 8
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PPUSH
40783: CALL_OW 72
40787: ST_TO_ADDR
40788: GO 40791
40790: POP
// if i = 1 then
40791: LD_VAR 0 8
40795: PUSH
40796: LD_INT 1
40798: EQUAL
40799: IFFALSE 40910
// begin tmp := [ ] ;
40801: LD_ADDR_VAR 0 19
40805: PUSH
40806: EMPTY
40807: ST_TO_ADDR
// for j in f do
40808: LD_ADDR_VAR 0 9
40812: PUSH
40813: LD_VAR 0 12
40817: PUSH
40818: FOR_IN
40819: IFFALSE 40892
// if GetBType ( j ) = b_bunker then
40821: LD_VAR 0 9
40825: PPUSH
40826: CALL_OW 266
40830: PUSH
40831: LD_INT 32
40833: EQUAL
40834: IFFALSE 40861
// tmp := Insert ( tmp , 1 , j ) else
40836: LD_ADDR_VAR 0 19
40840: PUSH
40841: LD_VAR 0 19
40845: PPUSH
40846: LD_INT 1
40848: PPUSH
40849: LD_VAR 0 9
40853: PPUSH
40854: CALL_OW 2
40858: ST_TO_ADDR
40859: GO 40890
// tmp := Insert ( tmp , tmp + 1 , j ) ;
40861: LD_ADDR_VAR 0 19
40865: PUSH
40866: LD_VAR 0 19
40870: PPUSH
40871: LD_VAR 0 19
40875: PUSH
40876: LD_INT 1
40878: PLUS
40879: PPUSH
40880: LD_VAR 0 9
40884: PPUSH
40885: CALL_OW 2
40889: ST_TO_ADDR
40890: GO 40818
40892: POP
40893: POP
// if tmp then
40894: LD_VAR 0 19
40898: IFFALSE 40910
// f := tmp ;
40900: LD_ADDR_VAR 0 12
40904: PUSH
40905: LD_VAR 0 19
40909: ST_TO_ADDR
// end ; x := personel [ i ] ;
40910: LD_ADDR_VAR 0 13
40914: PUSH
40915: LD_VAR 0 6
40919: PUSH
40920: LD_VAR 0 8
40924: ARRAY
40925: ST_TO_ADDR
// if x = - 1 then
40926: LD_VAR 0 13
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: EQUAL
40935: IFFALSE 41144
// begin for j in f do
40937: LD_ADDR_VAR 0 9
40941: PUSH
40942: LD_VAR 0 12
40946: PUSH
40947: FOR_IN
40948: IFFALSE 41140
// repeat InitHc ;
40950: CALL_OW 19
// if GetBType ( j ) = b_barracks then
40954: LD_VAR 0 9
40958: PPUSH
40959: CALL_OW 266
40963: PUSH
40964: LD_INT 5
40966: EQUAL
40967: IFFALSE 41037
// begin if UnitsInside ( j ) < 3 then
40969: LD_VAR 0 9
40973: PPUSH
40974: CALL_OW 313
40978: PUSH
40979: LD_INT 3
40981: LESS
40982: IFFALSE 41018
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
40984: LD_INT 0
40986: PPUSH
40987: LD_INT 5
40989: PUSH
40990: LD_INT 8
40992: PUSH
40993: LD_INT 9
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: LIST
41000: PUSH
41001: LD_VAR 0 17
41005: ARRAY
41006: PPUSH
41007: LD_VAR 0 4
41011: PPUSH
41012: CALL_OW 380
41016: GO 41035
// PrepareHuman ( false , i , skill ) ;
41018: LD_INT 0
41020: PPUSH
41021: LD_VAR 0 8
41025: PPUSH
41026: LD_VAR 0 4
41030: PPUSH
41031: CALL_OW 380
// end else
41035: GO 41054
// PrepareHuman ( false , i , skill ) ;
41037: LD_INT 0
41039: PPUSH
41040: LD_VAR 0 8
41044: PPUSH
41045: LD_VAR 0 4
41049: PPUSH
41050: CALL_OW 380
// un := CreateHuman ;
41054: LD_ADDR_VAR 0 14
41058: PUSH
41059: CALL_OW 44
41063: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41064: LD_ADDR_VAR 0 7
41068: PUSH
41069: LD_VAR 0 7
41073: PPUSH
41074: LD_INT 1
41076: PPUSH
41077: LD_VAR 0 14
41081: PPUSH
41082: CALL_OW 2
41086: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41087: LD_VAR 0 14
41091: PPUSH
41092: LD_VAR 0 9
41096: PPUSH
41097: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41101: LD_VAR 0 9
41105: PPUSH
41106: CALL_OW 313
41110: PUSH
41111: LD_INT 6
41113: EQUAL
41114: PUSH
41115: LD_VAR 0 9
41119: PPUSH
41120: CALL_OW 266
41124: PUSH
41125: LD_INT 32
41127: PUSH
41128: LD_INT 31
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: IN
41135: OR
41136: IFFALSE 40950
41138: GO 40947
41140: POP
41141: POP
// end else
41142: GO 41524
// for j = 1 to x do
41144: LD_ADDR_VAR 0 9
41148: PUSH
41149: DOUBLE
41150: LD_INT 1
41152: DEC
41153: ST_TO_ADDR
41154: LD_VAR 0 13
41158: PUSH
41159: FOR_TO
41160: IFFALSE 41522
// begin InitHc ;
41162: CALL_OW 19
// if not f then
41166: LD_VAR 0 12
41170: NOT
41171: IFFALSE 41260
// begin PrepareHuman ( false , i , skill ) ;
41173: LD_INT 0
41175: PPUSH
41176: LD_VAR 0 8
41180: PPUSH
41181: LD_VAR 0 4
41185: PPUSH
41186: CALL_OW 380
// un := CreateHuman ;
41190: LD_ADDR_VAR 0 14
41194: PUSH
41195: CALL_OW 44
41199: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41200: LD_ADDR_VAR 0 7
41204: PUSH
41205: LD_VAR 0 7
41209: PPUSH
41210: LD_INT 1
41212: PPUSH
41213: LD_VAR 0 14
41217: PPUSH
41218: CALL_OW 2
41222: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41223: LD_VAR 0 14
41227: PPUSH
41228: LD_VAR 0 1
41232: PPUSH
41233: CALL_OW 250
41237: PPUSH
41238: LD_VAR 0 1
41242: PPUSH
41243: CALL_OW 251
41247: PPUSH
41248: LD_INT 10
41250: PPUSH
41251: LD_INT 0
41253: PPUSH
41254: CALL_OW 50
// continue ;
41258: GO 41159
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41260: LD_VAR 0 12
41264: PUSH
41265: LD_INT 1
41267: ARRAY
41268: PPUSH
41269: CALL_OW 313
41273: PUSH
41274: LD_VAR 0 12
41278: PUSH
41279: LD_INT 1
41281: ARRAY
41282: PPUSH
41283: CALL_OW 266
41287: PUSH
41288: LD_INT 32
41290: PUSH
41291: LD_INT 31
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: IN
41298: AND
41299: PUSH
41300: LD_VAR 0 12
41304: PUSH
41305: LD_INT 1
41307: ARRAY
41308: PPUSH
41309: CALL_OW 313
41313: PUSH
41314: LD_INT 6
41316: EQUAL
41317: OR
41318: IFFALSE 41338
// f := Delete ( f , 1 ) ;
41320: LD_ADDR_VAR 0 12
41324: PUSH
41325: LD_VAR 0 12
41329: PPUSH
41330: LD_INT 1
41332: PPUSH
41333: CALL_OW 3
41337: ST_TO_ADDR
// if not f then
41338: LD_VAR 0 12
41342: NOT
41343: IFFALSE 41361
// begin x := x + 2 ;
41345: LD_ADDR_VAR 0 13
41349: PUSH
41350: LD_VAR 0 13
41354: PUSH
41355: LD_INT 2
41357: PLUS
41358: ST_TO_ADDR
// continue ;
41359: GO 41159
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41361: LD_VAR 0 12
41365: PUSH
41366: LD_INT 1
41368: ARRAY
41369: PPUSH
41370: CALL_OW 266
41374: PUSH
41375: LD_INT 5
41377: EQUAL
41378: IFFALSE 41452
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41380: LD_VAR 0 12
41384: PUSH
41385: LD_INT 1
41387: ARRAY
41388: PPUSH
41389: CALL_OW 313
41393: PUSH
41394: LD_INT 3
41396: LESS
41397: IFFALSE 41433
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41399: LD_INT 0
41401: PPUSH
41402: LD_INT 5
41404: PUSH
41405: LD_INT 8
41407: PUSH
41408: LD_INT 9
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: LIST
41415: PUSH
41416: LD_VAR 0 17
41420: ARRAY
41421: PPUSH
41422: LD_VAR 0 4
41426: PPUSH
41427: CALL_OW 380
41431: GO 41450
// PrepareHuman ( false , i , skill ) ;
41433: LD_INT 0
41435: PPUSH
41436: LD_VAR 0 8
41440: PPUSH
41441: LD_VAR 0 4
41445: PPUSH
41446: CALL_OW 380
// end else
41450: GO 41469
// PrepareHuman ( false , i , skill ) ;
41452: LD_INT 0
41454: PPUSH
41455: LD_VAR 0 8
41459: PPUSH
41460: LD_VAR 0 4
41464: PPUSH
41465: CALL_OW 380
// un := CreateHuman ;
41469: LD_ADDR_VAR 0 14
41473: PUSH
41474: CALL_OW 44
41478: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41479: LD_ADDR_VAR 0 7
41483: PUSH
41484: LD_VAR 0 7
41488: PPUSH
41489: LD_INT 1
41491: PPUSH
41492: LD_VAR 0 14
41496: PPUSH
41497: CALL_OW 2
41501: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41502: LD_VAR 0 14
41506: PPUSH
41507: LD_VAR 0 12
41511: PUSH
41512: LD_INT 1
41514: ARRAY
41515: PPUSH
41516: CALL_OW 52
// end ;
41520: GO 41159
41522: POP
41523: POP
// end ;
41524: GO 40461
41526: POP
41527: POP
// result := result ^ buildings ;
41528: LD_ADDR_VAR 0 7
41532: PUSH
41533: LD_VAR 0 7
41537: PUSH
41538: LD_VAR 0 18
41542: ADD
41543: ST_TO_ADDR
// end else
41544: GO 41687
// begin for i = 1 to personel do
41546: LD_ADDR_VAR 0 8
41550: PUSH
41551: DOUBLE
41552: LD_INT 1
41554: DEC
41555: ST_TO_ADDR
41556: LD_VAR 0 6
41560: PUSH
41561: FOR_TO
41562: IFFALSE 41685
// begin if i > 4 then
41564: LD_VAR 0 8
41568: PUSH
41569: LD_INT 4
41571: GREATER
41572: IFFALSE 41576
// break ;
41574: GO 41685
// x := personel [ i ] ;
41576: LD_ADDR_VAR 0 13
41580: PUSH
41581: LD_VAR 0 6
41585: PUSH
41586: LD_VAR 0 8
41590: ARRAY
41591: ST_TO_ADDR
// if x = - 1 then
41592: LD_VAR 0 13
41596: PUSH
41597: LD_INT 1
41599: NEG
41600: EQUAL
41601: IFFALSE 41605
// continue ;
41603: GO 41561
// PrepareHuman ( false , i , skill ) ;
41605: LD_INT 0
41607: PPUSH
41608: LD_VAR 0 8
41612: PPUSH
41613: LD_VAR 0 4
41617: PPUSH
41618: CALL_OW 380
// un := CreateHuman ;
41622: LD_ADDR_VAR 0 14
41626: PUSH
41627: CALL_OW 44
41631: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41632: LD_VAR 0 14
41636: PPUSH
41637: LD_VAR 0 1
41641: PPUSH
41642: CALL_OW 250
41646: PPUSH
41647: LD_VAR 0 1
41651: PPUSH
41652: CALL_OW 251
41656: PPUSH
41657: LD_INT 10
41659: PPUSH
41660: LD_INT 0
41662: PPUSH
41663: CALL_OW 50
// result := result ^ un ;
41667: LD_ADDR_VAR 0 7
41671: PUSH
41672: LD_VAR 0 7
41676: PUSH
41677: LD_VAR 0 14
41681: ADD
41682: ST_TO_ADDR
// end ;
41683: GO 41561
41685: POP
41686: POP
// end ; end ;
41687: LD_VAR 0 7
41691: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41692: LD_INT 0
41694: PPUSH
41695: PPUSH
41696: PPUSH
41697: PPUSH
41698: PPUSH
41699: PPUSH
41700: PPUSH
41701: PPUSH
41702: PPUSH
41703: PPUSH
41704: PPUSH
41705: PPUSH
41706: PPUSH
41707: PPUSH
41708: PPUSH
41709: PPUSH
// result := false ;
41710: LD_ADDR_VAR 0 3
41714: PUSH
41715: LD_INT 0
41717: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41718: LD_VAR 0 1
41722: NOT
41723: PUSH
41724: LD_VAR 0 1
41728: PPUSH
41729: CALL_OW 266
41733: PUSH
41734: LD_INT 32
41736: PUSH
41737: LD_INT 33
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: IN
41744: NOT
41745: OR
41746: IFFALSE 41750
// exit ;
41748: GO 42886
// nat := GetNation ( tower ) ;
41750: LD_ADDR_VAR 0 12
41754: PUSH
41755: LD_VAR 0 1
41759: PPUSH
41760: CALL_OW 248
41764: ST_TO_ADDR
// side := GetSide ( tower ) ;
41765: LD_ADDR_VAR 0 16
41769: PUSH
41770: LD_VAR 0 1
41774: PPUSH
41775: CALL_OW 255
41779: ST_TO_ADDR
// x := GetX ( tower ) ;
41780: LD_ADDR_VAR 0 10
41784: PUSH
41785: LD_VAR 0 1
41789: PPUSH
41790: CALL_OW 250
41794: ST_TO_ADDR
// y := GetY ( tower ) ;
41795: LD_ADDR_VAR 0 11
41799: PUSH
41800: LD_VAR 0 1
41804: PPUSH
41805: CALL_OW 251
41809: ST_TO_ADDR
// if not x or not y then
41810: LD_VAR 0 10
41814: NOT
41815: PUSH
41816: LD_VAR 0 11
41820: NOT
41821: OR
41822: IFFALSE 41826
// exit ;
41824: GO 42886
// weapon := 0 ;
41826: LD_ADDR_VAR 0 18
41830: PUSH
41831: LD_INT 0
41833: ST_TO_ADDR
// fac_list := [ ] ;
41834: LD_ADDR_VAR 0 17
41838: PUSH
41839: EMPTY
41840: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
41841: LD_ADDR_VAR 0 6
41845: PUSH
41846: LD_VAR 0 1
41850: PPUSH
41851: CALL_OW 274
41855: PPUSH
41856: LD_VAR 0 2
41860: PPUSH
41861: CALL 39464 0 2
41865: PPUSH
41866: LD_INT 30
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PPUSH
41876: CALL_OW 72
41880: ST_TO_ADDR
// if not factories then
41881: LD_VAR 0 6
41885: NOT
41886: IFFALSE 41890
// exit ;
41888: GO 42886
// for i in factories do
41890: LD_ADDR_VAR 0 8
41894: PUSH
41895: LD_VAR 0 6
41899: PUSH
41900: FOR_IN
41901: IFFALSE 41926
// fac_list := fac_list union AvailableWeaponList ( i ) ;
41903: LD_ADDR_VAR 0 17
41907: PUSH
41908: LD_VAR 0 17
41912: PUSH
41913: LD_VAR 0 8
41917: PPUSH
41918: CALL_OW 478
41922: UNION
41923: ST_TO_ADDR
41924: GO 41900
41926: POP
41927: POP
// if not fac_list then
41928: LD_VAR 0 17
41932: NOT
41933: IFFALSE 41937
// exit ;
41935: GO 42886
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
41937: LD_ADDR_VAR 0 5
41941: PUSH
41942: LD_INT 4
41944: PUSH
41945: LD_INT 5
41947: PUSH
41948: LD_INT 9
41950: PUSH
41951: LD_INT 10
41953: PUSH
41954: LD_INT 6
41956: PUSH
41957: LD_INT 7
41959: PUSH
41960: LD_INT 11
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: LIST
41971: PUSH
41972: LD_INT 27
41974: PUSH
41975: LD_INT 28
41977: PUSH
41978: LD_INT 26
41980: PUSH
41981: LD_INT 30
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 43
41992: PUSH
41993: LD_INT 44
41995: PUSH
41996: LD_INT 46
41998: PUSH
41999: LD_INT 45
42001: PUSH
42002: LD_INT 47
42004: PUSH
42005: LD_INT 49
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: LIST
42012: LIST
42013: LIST
42014: LIST
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: LIST
42020: PUSH
42021: LD_VAR 0 12
42025: ARRAY
42026: ST_TO_ADDR
// for i in list do
42027: LD_ADDR_VAR 0 8
42031: PUSH
42032: LD_VAR 0 5
42036: PUSH
42037: FOR_IN
42038: IFFALSE 42071
// if not i in fac_list then
42040: LD_VAR 0 8
42044: PUSH
42045: LD_VAR 0 17
42049: IN
42050: NOT
42051: IFFALSE 42069
// list := list diff i ;
42053: LD_ADDR_VAR 0 5
42057: PUSH
42058: LD_VAR 0 5
42062: PUSH
42063: LD_VAR 0 8
42067: DIFF
42068: ST_TO_ADDR
42069: GO 42037
42071: POP
42072: POP
// if not list then
42073: LD_VAR 0 5
42077: NOT
42078: IFFALSE 42082
// exit ;
42080: GO 42886
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42082: LD_VAR 0 12
42086: PUSH
42087: LD_INT 3
42089: EQUAL
42090: PUSH
42091: LD_INT 49
42093: PUSH
42094: LD_VAR 0 5
42098: IN
42099: AND
42100: PUSH
42101: LD_INT 31
42103: PPUSH
42104: LD_VAR 0 16
42108: PPUSH
42109: CALL_OW 321
42113: PUSH
42114: LD_INT 2
42116: EQUAL
42117: AND
42118: IFFALSE 42178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42120: LD_INT 22
42122: PUSH
42123: LD_VAR 0 16
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 35
42134: PUSH
42135: LD_INT 49
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 91
42144: PUSH
42145: LD_VAR 0 1
42149: PUSH
42150: LD_INT 10
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: LIST
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: LIST
42162: PPUSH
42163: CALL_OW 69
42167: NOT
42168: IFFALSE 42178
// weapon := ru_time_lapser ;
42170: LD_ADDR_VAR 0 18
42174: PUSH
42175: LD_INT 49
42177: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42178: LD_VAR 0 12
42182: PUSH
42183: LD_INT 1
42185: PUSH
42186: LD_INT 2
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: IN
42193: PUSH
42194: LD_INT 11
42196: PUSH
42197: LD_VAR 0 5
42201: IN
42202: PUSH
42203: LD_INT 30
42205: PUSH
42206: LD_VAR 0 5
42210: IN
42211: OR
42212: AND
42213: PUSH
42214: LD_INT 6
42216: PPUSH
42217: LD_VAR 0 16
42221: PPUSH
42222: CALL_OW 321
42226: PUSH
42227: LD_INT 2
42229: EQUAL
42230: AND
42231: IFFALSE 42396
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42233: LD_INT 22
42235: PUSH
42236: LD_VAR 0 16
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: LD_INT 35
42250: PUSH
42251: LD_INT 11
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 35
42260: PUSH
42261: LD_INT 30
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: EMPTY
42269: LIST
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 91
42275: PUSH
42276: LD_VAR 0 1
42280: PUSH
42281: LD_INT 18
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: PUSH
42289: EMPTY
42290: LIST
42291: LIST
42292: LIST
42293: PPUSH
42294: CALL_OW 69
42298: NOT
42299: PUSH
42300: LD_INT 22
42302: PUSH
42303: LD_VAR 0 16
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 2
42314: PUSH
42315: LD_INT 30
42317: PUSH
42318: LD_INT 32
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 30
42327: PUSH
42328: LD_INT 33
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 91
42342: PUSH
42343: LD_VAR 0 1
42347: PUSH
42348: LD_INT 12
42350: PUSH
42351: EMPTY
42352: LIST
42353: LIST
42354: LIST
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: LIST
42360: PUSH
42361: EMPTY
42362: LIST
42363: PPUSH
42364: CALL_OW 69
42368: PUSH
42369: LD_INT 2
42371: GREATER
42372: AND
42373: IFFALSE 42396
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42375: LD_ADDR_VAR 0 18
42379: PUSH
42380: LD_INT 11
42382: PUSH
42383: LD_INT 30
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_VAR 0 12
42394: ARRAY
42395: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42396: LD_VAR 0 18
42400: NOT
42401: PUSH
42402: LD_INT 40
42404: PPUSH
42405: LD_VAR 0 16
42409: PPUSH
42410: CALL_OW 321
42414: PUSH
42415: LD_INT 2
42417: EQUAL
42418: AND
42419: PUSH
42420: LD_INT 7
42422: PUSH
42423: LD_VAR 0 5
42427: IN
42428: PUSH
42429: LD_INT 28
42431: PUSH
42432: LD_VAR 0 5
42436: IN
42437: OR
42438: PUSH
42439: LD_INT 45
42441: PUSH
42442: LD_VAR 0 5
42446: IN
42447: OR
42448: AND
42449: IFFALSE 42703
// begin hex := GetHexInfo ( x , y ) ;
42451: LD_ADDR_VAR 0 4
42455: PUSH
42456: LD_VAR 0 10
42460: PPUSH
42461: LD_VAR 0 11
42465: PPUSH
42466: CALL_OW 546
42470: ST_TO_ADDR
// if hex [ 1 ] then
42471: LD_VAR 0 4
42475: PUSH
42476: LD_INT 1
42478: ARRAY
42479: IFFALSE 42483
// exit ;
42481: GO 42886
// height := hex [ 2 ] ;
42483: LD_ADDR_VAR 0 15
42487: PUSH
42488: LD_VAR 0 4
42492: PUSH
42493: LD_INT 2
42495: ARRAY
42496: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42497: LD_ADDR_VAR 0 14
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: LD_INT 2
42507: PUSH
42508: LD_INT 3
42510: PUSH
42511: LD_INT 5
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: ST_TO_ADDR
// for i in tmp do
42520: LD_ADDR_VAR 0 8
42524: PUSH
42525: LD_VAR 0 14
42529: PUSH
42530: FOR_IN
42531: IFFALSE 42701
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42533: LD_ADDR_VAR 0 9
42537: PUSH
42538: LD_VAR 0 10
42542: PPUSH
42543: LD_VAR 0 8
42547: PPUSH
42548: LD_INT 5
42550: PPUSH
42551: CALL_OW 272
42555: PUSH
42556: LD_VAR 0 11
42560: PPUSH
42561: LD_VAR 0 8
42565: PPUSH
42566: LD_INT 5
42568: PPUSH
42569: CALL_OW 273
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42578: LD_VAR 0 9
42582: PUSH
42583: LD_INT 1
42585: ARRAY
42586: PPUSH
42587: LD_VAR 0 9
42591: PUSH
42592: LD_INT 2
42594: ARRAY
42595: PPUSH
42596: CALL_OW 488
42600: IFFALSE 42699
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42602: LD_ADDR_VAR 0 4
42606: PUSH
42607: LD_VAR 0 9
42611: PUSH
42612: LD_INT 1
42614: ARRAY
42615: PPUSH
42616: LD_VAR 0 9
42620: PUSH
42621: LD_INT 2
42623: ARRAY
42624: PPUSH
42625: CALL_OW 546
42629: ST_TO_ADDR
// if hex [ 1 ] then
42630: LD_VAR 0 4
42634: PUSH
42635: LD_INT 1
42637: ARRAY
42638: IFFALSE 42642
// continue ;
42640: GO 42530
// h := hex [ 2 ] ;
42642: LD_ADDR_VAR 0 13
42646: PUSH
42647: LD_VAR 0 4
42651: PUSH
42652: LD_INT 2
42654: ARRAY
42655: ST_TO_ADDR
// if h + 7 < height then
42656: LD_VAR 0 13
42660: PUSH
42661: LD_INT 7
42663: PLUS
42664: PUSH
42665: LD_VAR 0 15
42669: LESS
42670: IFFALSE 42699
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42672: LD_ADDR_VAR 0 18
42676: PUSH
42677: LD_INT 7
42679: PUSH
42680: LD_INT 28
42682: PUSH
42683: LD_INT 45
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: LIST
42690: PUSH
42691: LD_VAR 0 12
42695: ARRAY
42696: ST_TO_ADDR
// break ;
42697: GO 42701
// end ; end ; end ;
42699: GO 42530
42701: POP
42702: POP
// end ; if not weapon then
42703: LD_VAR 0 18
42707: NOT
42708: IFFALSE 42768
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42710: LD_ADDR_VAR 0 5
42714: PUSH
42715: LD_VAR 0 5
42719: PUSH
42720: LD_INT 11
42722: PUSH
42723: LD_INT 30
42725: PUSH
42726: LD_INT 49
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: LIST
42733: DIFF
42734: ST_TO_ADDR
// if not list then
42735: LD_VAR 0 5
42739: NOT
42740: IFFALSE 42744
// exit ;
42742: GO 42886
// weapon := list [ rand ( 1 , list ) ] ;
42744: LD_ADDR_VAR 0 18
42748: PUSH
42749: LD_VAR 0 5
42753: PUSH
42754: LD_INT 1
42756: PPUSH
42757: LD_VAR 0 5
42761: PPUSH
42762: CALL_OW 12
42766: ARRAY
42767: ST_TO_ADDR
// end ; if weapon then
42768: LD_VAR 0 18
42772: IFFALSE 42886
// begin tmp := CostOfWeapon ( weapon ) ;
42774: LD_ADDR_VAR 0 14
42778: PUSH
42779: LD_VAR 0 18
42783: PPUSH
42784: CALL_OW 451
42788: ST_TO_ADDR
// j := GetBase ( tower ) ;
42789: LD_ADDR_VAR 0 9
42793: PUSH
42794: LD_VAR 0 1
42798: PPUSH
42799: CALL_OW 274
42803: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
42804: LD_VAR 0 9
42808: PPUSH
42809: LD_INT 1
42811: PPUSH
42812: CALL_OW 275
42816: PUSH
42817: LD_VAR 0 14
42821: PUSH
42822: LD_INT 1
42824: ARRAY
42825: GREATEREQUAL
42826: PUSH
42827: LD_VAR 0 9
42831: PPUSH
42832: LD_INT 2
42834: PPUSH
42835: CALL_OW 275
42839: PUSH
42840: LD_VAR 0 14
42844: PUSH
42845: LD_INT 2
42847: ARRAY
42848: GREATEREQUAL
42849: AND
42850: PUSH
42851: LD_VAR 0 9
42855: PPUSH
42856: LD_INT 3
42858: PPUSH
42859: CALL_OW 275
42863: PUSH
42864: LD_VAR 0 14
42868: PUSH
42869: LD_INT 3
42871: ARRAY
42872: GREATEREQUAL
42873: AND
42874: IFFALSE 42886
// result := weapon ;
42876: LD_ADDR_VAR 0 3
42880: PUSH
42881: LD_VAR 0 18
42885: ST_TO_ADDR
// end ; end ;
42886: LD_VAR 0 3
42890: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
42891: LD_INT 0
42893: PPUSH
42894: PPUSH
// result := true ;
42895: LD_ADDR_VAR 0 3
42899: PUSH
42900: LD_INT 1
42902: ST_TO_ADDR
// if array1 = array2 then
42903: LD_VAR 0 1
42907: PUSH
42908: LD_VAR 0 2
42912: EQUAL
42913: IFFALSE 42973
// begin for i = 1 to array1 do
42915: LD_ADDR_VAR 0 4
42919: PUSH
42920: DOUBLE
42921: LD_INT 1
42923: DEC
42924: ST_TO_ADDR
42925: LD_VAR 0 1
42929: PUSH
42930: FOR_TO
42931: IFFALSE 42969
// if array1 [ i ] <> array2 [ i ] then
42933: LD_VAR 0 1
42937: PUSH
42938: LD_VAR 0 4
42942: ARRAY
42943: PUSH
42944: LD_VAR 0 2
42948: PUSH
42949: LD_VAR 0 4
42953: ARRAY
42954: NONEQUAL
42955: IFFALSE 42967
// begin result := false ;
42957: LD_ADDR_VAR 0 3
42961: PUSH
42962: LD_INT 0
42964: ST_TO_ADDR
// break ;
42965: GO 42969
// end ;
42967: GO 42930
42969: POP
42970: POP
// end else
42971: GO 42981
// result := false ;
42973: LD_ADDR_VAR 0 3
42977: PUSH
42978: LD_INT 0
42980: ST_TO_ADDR
// end ;
42981: LD_VAR 0 3
42985: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
42986: LD_INT 0
42988: PPUSH
42989: PPUSH
42990: PPUSH
// pom := GetBase ( fac ) ;
42991: LD_ADDR_VAR 0 5
42995: PUSH
42996: LD_VAR 0 1
43000: PPUSH
43001: CALL_OW 274
43005: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43006: LD_ADDR_VAR 0 4
43010: PUSH
43011: LD_VAR 0 2
43015: PUSH
43016: LD_INT 1
43018: ARRAY
43019: PPUSH
43020: LD_VAR 0 2
43024: PUSH
43025: LD_INT 2
43027: ARRAY
43028: PPUSH
43029: LD_VAR 0 2
43033: PUSH
43034: LD_INT 3
43036: ARRAY
43037: PPUSH
43038: LD_VAR 0 2
43042: PUSH
43043: LD_INT 4
43045: ARRAY
43046: PPUSH
43047: CALL_OW 449
43051: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43052: LD_ADDR_VAR 0 3
43056: PUSH
43057: LD_VAR 0 5
43061: PPUSH
43062: LD_INT 1
43064: PPUSH
43065: CALL_OW 275
43069: PUSH
43070: LD_VAR 0 4
43074: PUSH
43075: LD_INT 1
43077: ARRAY
43078: GREATEREQUAL
43079: PUSH
43080: LD_VAR 0 5
43084: PPUSH
43085: LD_INT 2
43087: PPUSH
43088: CALL_OW 275
43092: PUSH
43093: LD_VAR 0 4
43097: PUSH
43098: LD_INT 2
43100: ARRAY
43101: GREATEREQUAL
43102: AND
43103: PUSH
43104: LD_VAR 0 5
43108: PPUSH
43109: LD_INT 3
43111: PPUSH
43112: CALL_OW 275
43116: PUSH
43117: LD_VAR 0 4
43121: PUSH
43122: LD_INT 3
43124: ARRAY
43125: GREATEREQUAL
43126: AND
43127: ST_TO_ADDR
// end ;
43128: LD_VAR 0 3
43132: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43133: LD_INT 0
43135: PPUSH
43136: PPUSH
43137: PPUSH
43138: PPUSH
// pom := GetBase ( building ) ;
43139: LD_ADDR_VAR 0 3
43143: PUSH
43144: LD_VAR 0 1
43148: PPUSH
43149: CALL_OW 274
43153: ST_TO_ADDR
// if not pom then
43154: LD_VAR 0 3
43158: NOT
43159: IFFALSE 43163
// exit ;
43161: GO 43333
// btype := GetBType ( building ) ;
43163: LD_ADDR_VAR 0 5
43167: PUSH
43168: LD_VAR 0 1
43172: PPUSH
43173: CALL_OW 266
43177: ST_TO_ADDR
// if btype = b_armoury then
43178: LD_VAR 0 5
43182: PUSH
43183: LD_INT 4
43185: EQUAL
43186: IFFALSE 43196
// btype := b_barracks ;
43188: LD_ADDR_VAR 0 5
43192: PUSH
43193: LD_INT 5
43195: ST_TO_ADDR
// if btype = b_depot then
43196: LD_VAR 0 5
43200: PUSH
43201: LD_INT 0
43203: EQUAL
43204: IFFALSE 43214
// btype := b_warehouse ;
43206: LD_ADDR_VAR 0 5
43210: PUSH
43211: LD_INT 1
43213: ST_TO_ADDR
// if btype = b_workshop then
43214: LD_VAR 0 5
43218: PUSH
43219: LD_INT 2
43221: EQUAL
43222: IFFALSE 43232
// btype := b_factory ;
43224: LD_ADDR_VAR 0 5
43228: PUSH
43229: LD_INT 3
43231: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43232: LD_ADDR_VAR 0 4
43236: PUSH
43237: LD_VAR 0 5
43241: PPUSH
43242: LD_VAR 0 1
43246: PPUSH
43247: CALL_OW 248
43251: PPUSH
43252: CALL_OW 450
43256: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43257: LD_ADDR_VAR 0 2
43261: PUSH
43262: LD_VAR 0 3
43266: PPUSH
43267: LD_INT 1
43269: PPUSH
43270: CALL_OW 275
43274: PUSH
43275: LD_VAR 0 4
43279: PUSH
43280: LD_INT 1
43282: ARRAY
43283: GREATEREQUAL
43284: PUSH
43285: LD_VAR 0 3
43289: PPUSH
43290: LD_INT 2
43292: PPUSH
43293: CALL_OW 275
43297: PUSH
43298: LD_VAR 0 4
43302: PUSH
43303: LD_INT 2
43305: ARRAY
43306: GREATEREQUAL
43307: AND
43308: PUSH
43309: LD_VAR 0 3
43313: PPUSH
43314: LD_INT 3
43316: PPUSH
43317: CALL_OW 275
43321: PUSH
43322: LD_VAR 0 4
43326: PUSH
43327: LD_INT 3
43329: ARRAY
43330: GREATEREQUAL
43331: AND
43332: ST_TO_ADDR
// end ;
43333: LD_VAR 0 2
43337: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43338: LD_INT 0
43340: PPUSH
43341: PPUSH
43342: PPUSH
// pom := GetBase ( building ) ;
43343: LD_ADDR_VAR 0 4
43347: PUSH
43348: LD_VAR 0 1
43352: PPUSH
43353: CALL_OW 274
43357: ST_TO_ADDR
// if not pom then
43358: LD_VAR 0 4
43362: NOT
43363: IFFALSE 43367
// exit ;
43365: GO 43468
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43367: LD_ADDR_VAR 0 5
43371: PUSH
43372: LD_VAR 0 2
43376: PPUSH
43377: LD_VAR 0 1
43381: PPUSH
43382: CALL_OW 248
43386: PPUSH
43387: CALL_OW 450
43391: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43392: LD_ADDR_VAR 0 3
43396: PUSH
43397: LD_VAR 0 4
43401: PPUSH
43402: LD_INT 1
43404: PPUSH
43405: CALL_OW 275
43409: PUSH
43410: LD_VAR 0 5
43414: PUSH
43415: LD_INT 1
43417: ARRAY
43418: GREATEREQUAL
43419: PUSH
43420: LD_VAR 0 4
43424: PPUSH
43425: LD_INT 2
43427: PPUSH
43428: CALL_OW 275
43432: PUSH
43433: LD_VAR 0 5
43437: PUSH
43438: LD_INT 2
43440: ARRAY
43441: GREATEREQUAL
43442: AND
43443: PUSH
43444: LD_VAR 0 4
43448: PPUSH
43449: LD_INT 3
43451: PPUSH
43452: CALL_OW 275
43456: PUSH
43457: LD_VAR 0 5
43461: PUSH
43462: LD_INT 3
43464: ARRAY
43465: GREATEREQUAL
43466: AND
43467: ST_TO_ADDR
// end ;
43468: LD_VAR 0 3
43472: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
43473: LD_INT 0
43475: PPUSH
43476: PPUSH
43477: PPUSH
43478: PPUSH
43479: PPUSH
43480: PPUSH
43481: PPUSH
43482: PPUSH
43483: PPUSH
43484: PPUSH
// result := false ;
43485: LD_ADDR_VAR 0 6
43489: PUSH
43490: LD_INT 0
43492: ST_TO_ADDR
// if not base or not btype or not x or not y then
43493: LD_VAR 0 1
43497: NOT
43498: PUSH
43499: LD_VAR 0 2
43503: NOT
43504: OR
43505: PUSH
43506: LD_VAR 0 3
43510: NOT
43511: OR
43512: PUSH
43513: LD_VAR 0 4
43517: NOT
43518: OR
43519: IFFALSE 43523
// exit ;
43521: GO 44132
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
43523: LD_ADDR_VAR 0 12
43527: PUSH
43528: LD_VAR 0 2
43532: PPUSH
43533: LD_VAR 0 3
43537: PPUSH
43538: LD_VAR 0 4
43542: PPUSH
43543: LD_VAR 0 5
43547: PPUSH
43548: LD_VAR 0 1
43552: PUSH
43553: LD_INT 1
43555: ARRAY
43556: PPUSH
43557: CALL_OW 248
43561: PPUSH
43562: LD_INT 0
43564: PPUSH
43565: CALL 44969 0 6
43569: ST_TO_ADDR
// if not hexes then
43570: LD_VAR 0 12
43574: NOT
43575: IFFALSE 43579
// exit ;
43577: GO 44132
// for i = 1 to hexes do
43579: LD_ADDR_VAR 0 7
43583: PUSH
43584: DOUBLE
43585: LD_INT 1
43587: DEC
43588: ST_TO_ADDR
43589: LD_VAR 0 12
43593: PUSH
43594: FOR_TO
43595: IFFALSE 44130
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43597: LD_ADDR_VAR 0 11
43601: PUSH
43602: LD_VAR 0 12
43606: PUSH
43607: LD_VAR 0 7
43611: ARRAY
43612: PUSH
43613: LD_INT 1
43615: ARRAY
43616: PPUSH
43617: LD_VAR 0 12
43621: PUSH
43622: LD_VAR 0 7
43626: ARRAY
43627: PUSH
43628: LD_INT 2
43630: ARRAY
43631: PPUSH
43632: CALL_OW 428
43636: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
43637: LD_VAR 0 12
43641: PUSH
43642: LD_VAR 0 7
43646: ARRAY
43647: PUSH
43648: LD_INT 1
43650: ARRAY
43651: PPUSH
43652: LD_VAR 0 12
43656: PUSH
43657: LD_VAR 0 7
43661: ARRAY
43662: PUSH
43663: LD_INT 2
43665: ARRAY
43666: PPUSH
43667: CALL_OW 351
43671: PUSH
43672: LD_VAR 0 12
43676: PUSH
43677: LD_VAR 0 7
43681: ARRAY
43682: PUSH
43683: LD_INT 1
43685: ARRAY
43686: PPUSH
43687: LD_VAR 0 12
43691: PUSH
43692: LD_VAR 0 7
43696: ARRAY
43697: PUSH
43698: LD_INT 2
43700: ARRAY
43701: PPUSH
43702: CALL_OW 488
43706: NOT
43707: OR
43708: PUSH
43709: LD_VAR 0 11
43713: PPUSH
43714: CALL_OW 247
43718: PUSH
43719: LD_INT 3
43721: EQUAL
43722: OR
43723: IFFALSE 43729
// exit ;
43725: POP
43726: POP
43727: GO 44132
// if not tmp or not tmp in base then
43729: LD_VAR 0 11
43733: NOT
43734: PUSH
43735: LD_VAR 0 11
43739: PUSH
43740: LD_VAR 0 1
43744: IN
43745: NOT
43746: OR
43747: IFFALSE 43751
// continue ;
43749: GO 43594
// result := true ;
43751: LD_ADDR_VAR 0 6
43755: PUSH
43756: LD_INT 1
43758: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43759: LD_ADDR_VAR 0 15
43763: PUSH
43764: LD_VAR 0 1
43768: PPUSH
43769: LD_INT 22
43771: PUSH
43772: LD_VAR 0 11
43776: PPUSH
43777: CALL_OW 255
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 2
43788: PUSH
43789: LD_INT 30
43791: PUSH
43792: LD_INT 0
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: LD_INT 30
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: LIST
43813: PUSH
43814: EMPTY
43815: LIST
43816: LIST
43817: PPUSH
43818: CALL_OW 72
43822: ST_TO_ADDR
// if dep then
43823: LD_VAR 0 15
43827: IFFALSE 43963
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
43829: LD_ADDR_VAR 0 14
43833: PUSH
43834: LD_VAR 0 15
43838: PUSH
43839: LD_INT 1
43841: ARRAY
43842: PPUSH
43843: CALL_OW 250
43847: PPUSH
43848: LD_VAR 0 15
43852: PUSH
43853: LD_INT 1
43855: ARRAY
43856: PPUSH
43857: CALL_OW 254
43861: PPUSH
43862: LD_INT 5
43864: PPUSH
43865: CALL_OW 272
43869: PUSH
43870: LD_VAR 0 15
43874: PUSH
43875: LD_INT 1
43877: ARRAY
43878: PPUSH
43879: CALL_OW 251
43883: PPUSH
43884: LD_VAR 0 15
43888: PUSH
43889: LD_INT 1
43891: ARRAY
43892: PPUSH
43893: CALL_OW 254
43897: PPUSH
43898: LD_INT 5
43900: PPUSH
43901: CALL_OW 273
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
43910: LD_VAR 0 14
43914: PUSH
43915: LD_INT 1
43917: ARRAY
43918: PPUSH
43919: LD_VAR 0 14
43923: PUSH
43924: LD_INT 2
43926: ARRAY
43927: PPUSH
43928: CALL_OW 488
43932: IFFALSE 43963
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
43934: LD_VAR 0 11
43938: PPUSH
43939: LD_VAR 0 14
43943: PUSH
43944: LD_INT 1
43946: ARRAY
43947: PPUSH
43948: LD_VAR 0 14
43952: PUSH
43953: LD_INT 2
43955: ARRAY
43956: PPUSH
43957: CALL_OW 111
// continue ;
43961: GO 43594
// end ; end ; r := GetDir ( tmp ) ;
43963: LD_ADDR_VAR 0 13
43967: PUSH
43968: LD_VAR 0 11
43972: PPUSH
43973: CALL_OW 254
43977: ST_TO_ADDR
// if r = 5 then
43978: LD_VAR 0 13
43982: PUSH
43983: LD_INT 5
43985: EQUAL
43986: IFFALSE 43996
// r := 0 ;
43988: LD_ADDR_VAR 0 13
43992: PUSH
43993: LD_INT 0
43995: ST_TO_ADDR
// for j = r to 5 do
43996: LD_ADDR_VAR 0 8
44000: PUSH
44001: DOUBLE
44002: LD_VAR 0 13
44006: DEC
44007: ST_TO_ADDR
44008: LD_INT 5
44010: PUSH
44011: FOR_TO
44012: IFFALSE 44126
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44014: LD_ADDR_VAR 0 9
44018: PUSH
44019: LD_VAR 0 11
44023: PPUSH
44024: CALL_OW 250
44028: PPUSH
44029: LD_VAR 0 8
44033: PPUSH
44034: LD_INT 2
44036: PPUSH
44037: CALL_OW 272
44041: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44042: LD_ADDR_VAR 0 10
44046: PUSH
44047: LD_VAR 0 11
44051: PPUSH
44052: CALL_OW 251
44056: PPUSH
44057: LD_VAR 0 8
44061: PPUSH
44062: LD_INT 2
44064: PPUSH
44065: CALL_OW 273
44069: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44070: LD_VAR 0 9
44074: PPUSH
44075: LD_VAR 0 10
44079: PPUSH
44080: CALL_OW 488
44084: PUSH
44085: LD_VAR 0 9
44089: PPUSH
44090: LD_VAR 0 10
44094: PPUSH
44095: CALL_OW 428
44099: NOT
44100: AND
44101: IFFALSE 44124
// begin ComMoveXY ( tmp , _x , _y ) ;
44103: LD_VAR 0 11
44107: PPUSH
44108: LD_VAR 0 9
44112: PPUSH
44113: LD_VAR 0 10
44117: PPUSH
44118: CALL_OW 111
// break ;
44122: GO 44126
// end ; end ;
44124: GO 44011
44126: POP
44127: POP
// end ;
44128: GO 43594
44130: POP
44131: POP
// end ;
44132: LD_VAR 0 6
44136: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
44137: LD_INT 0
44139: PPUSH
44140: PPUSH
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
// result := false ;
44149: LD_ADDR_VAR 0 6
44153: PUSH
44154: LD_INT 0
44156: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44157: LD_VAR 0 1
44161: NOT
44162: PUSH
44163: LD_VAR 0 1
44167: PPUSH
44168: CALL_OW 266
44172: PUSH
44173: LD_INT 0
44175: PUSH
44176: LD_INT 1
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: IN
44183: NOT
44184: OR
44185: PUSH
44186: LD_VAR 0 2
44190: NOT
44191: OR
44192: PUSH
44193: LD_VAR 0 5
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 1
44203: PUSH
44204: LD_INT 2
44206: PUSH
44207: LD_INT 3
44209: PUSH
44210: LD_INT 4
44212: PUSH
44213: LD_INT 5
44215: PUSH
44216: EMPTY
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: IN
44224: NOT
44225: OR
44226: PUSH
44227: LD_VAR 0 3
44231: PPUSH
44232: LD_VAR 0 4
44236: PPUSH
44237: CALL_OW 488
44241: NOT
44242: OR
44243: IFFALSE 44247
// exit ;
44245: GO 44964
// pom := GetBase ( depot ) ;
44247: LD_ADDR_VAR 0 10
44251: PUSH
44252: LD_VAR 0 1
44256: PPUSH
44257: CALL_OW 274
44261: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44262: LD_ADDR_VAR 0 11
44266: PUSH
44267: LD_VAR 0 2
44271: PPUSH
44272: LD_VAR 0 1
44276: PPUSH
44277: CALL_OW 248
44281: PPUSH
44282: CALL_OW 450
44286: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44287: LD_VAR 0 10
44291: PPUSH
44292: LD_INT 1
44294: PPUSH
44295: CALL_OW 275
44299: PUSH
44300: LD_VAR 0 11
44304: PUSH
44305: LD_INT 1
44307: ARRAY
44308: GREATEREQUAL
44309: PUSH
44310: LD_VAR 0 10
44314: PPUSH
44315: LD_INT 2
44317: PPUSH
44318: CALL_OW 275
44322: PUSH
44323: LD_VAR 0 11
44327: PUSH
44328: LD_INT 2
44330: ARRAY
44331: GREATEREQUAL
44332: AND
44333: PUSH
44334: LD_VAR 0 10
44338: PPUSH
44339: LD_INT 3
44341: PPUSH
44342: CALL_OW 275
44346: PUSH
44347: LD_VAR 0 11
44351: PUSH
44352: LD_INT 3
44354: ARRAY
44355: GREATEREQUAL
44356: AND
44357: NOT
44358: IFFALSE 44362
// exit ;
44360: GO 44964
// if GetBType ( depot ) = b_depot then
44362: LD_VAR 0 1
44366: PPUSH
44367: CALL_OW 266
44371: PUSH
44372: LD_INT 0
44374: EQUAL
44375: IFFALSE 44387
// dist := 28 else
44377: LD_ADDR_VAR 0 14
44381: PUSH
44382: LD_INT 28
44384: ST_TO_ADDR
44385: GO 44395
// dist := 36 ;
44387: LD_ADDR_VAR 0 14
44391: PUSH
44392: LD_INT 36
44394: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44395: LD_VAR 0 1
44399: PPUSH
44400: LD_VAR 0 3
44404: PPUSH
44405: LD_VAR 0 4
44409: PPUSH
44410: CALL_OW 297
44414: PUSH
44415: LD_VAR 0 14
44419: GREATER
44420: IFFALSE 44424
// exit ;
44422: GO 44964
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44424: LD_ADDR_VAR 0 12
44428: PUSH
44429: LD_VAR 0 2
44433: PPUSH
44434: LD_VAR 0 3
44438: PPUSH
44439: LD_VAR 0 4
44443: PPUSH
44444: LD_VAR 0 5
44448: PPUSH
44449: LD_VAR 0 1
44453: PPUSH
44454: CALL_OW 248
44458: PPUSH
44459: LD_INT 0
44461: PPUSH
44462: CALL 44969 0 6
44466: ST_TO_ADDR
// if not hexes then
44467: LD_VAR 0 12
44471: NOT
44472: IFFALSE 44476
// exit ;
44474: GO 44964
// hex := GetHexInfo ( x , y ) ;
44476: LD_ADDR_VAR 0 15
44480: PUSH
44481: LD_VAR 0 3
44485: PPUSH
44486: LD_VAR 0 4
44490: PPUSH
44491: CALL_OW 546
44495: ST_TO_ADDR
// if hex [ 1 ] then
44496: LD_VAR 0 15
44500: PUSH
44501: LD_INT 1
44503: ARRAY
44504: IFFALSE 44508
// exit ;
44506: GO 44964
// height := hex [ 2 ] ;
44508: LD_ADDR_VAR 0 13
44512: PUSH
44513: LD_VAR 0 15
44517: PUSH
44518: LD_INT 2
44520: ARRAY
44521: ST_TO_ADDR
// for i = 1 to hexes do
44522: LD_ADDR_VAR 0 7
44526: PUSH
44527: DOUBLE
44528: LD_INT 1
44530: DEC
44531: ST_TO_ADDR
44532: LD_VAR 0 12
44536: PUSH
44537: FOR_TO
44538: IFFALSE 44868
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
44540: LD_VAR 0 12
44544: PUSH
44545: LD_VAR 0 7
44549: ARRAY
44550: PUSH
44551: LD_INT 1
44553: ARRAY
44554: PPUSH
44555: LD_VAR 0 12
44559: PUSH
44560: LD_VAR 0 7
44564: ARRAY
44565: PUSH
44566: LD_INT 2
44568: ARRAY
44569: PPUSH
44570: CALL_OW 488
44574: NOT
44575: PUSH
44576: LD_VAR 0 12
44580: PUSH
44581: LD_VAR 0 7
44585: ARRAY
44586: PUSH
44587: LD_INT 1
44589: ARRAY
44590: PPUSH
44591: LD_VAR 0 12
44595: PUSH
44596: LD_VAR 0 7
44600: ARRAY
44601: PUSH
44602: LD_INT 2
44604: ARRAY
44605: PPUSH
44606: CALL_OW 428
44610: PUSH
44611: LD_INT 0
44613: GREATER
44614: OR
44615: PUSH
44616: LD_VAR 0 12
44620: PUSH
44621: LD_VAR 0 7
44625: ARRAY
44626: PUSH
44627: LD_INT 1
44629: ARRAY
44630: PPUSH
44631: LD_VAR 0 12
44635: PUSH
44636: LD_VAR 0 7
44640: ARRAY
44641: PUSH
44642: LD_INT 2
44644: ARRAY
44645: PPUSH
44646: CALL_OW 351
44650: OR
44651: IFFALSE 44657
// exit ;
44653: POP
44654: POP
44655: GO 44964
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
44657: LD_ADDR_VAR 0 8
44661: PUSH
44662: LD_VAR 0 12
44666: PUSH
44667: LD_VAR 0 7
44671: ARRAY
44672: PUSH
44673: LD_INT 1
44675: ARRAY
44676: PPUSH
44677: LD_VAR 0 12
44681: PUSH
44682: LD_VAR 0 7
44686: ARRAY
44687: PUSH
44688: LD_INT 2
44690: ARRAY
44691: PPUSH
44692: CALL_OW 546
44696: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
44697: LD_VAR 0 8
44701: PUSH
44702: LD_INT 1
44704: ARRAY
44705: PUSH
44706: LD_VAR 0 8
44710: PUSH
44711: LD_INT 2
44713: ARRAY
44714: PUSH
44715: LD_VAR 0 13
44719: PUSH
44720: LD_INT 2
44722: PLUS
44723: GREATER
44724: OR
44725: PUSH
44726: LD_VAR 0 8
44730: PUSH
44731: LD_INT 2
44733: ARRAY
44734: PUSH
44735: LD_VAR 0 13
44739: PUSH
44740: LD_INT 2
44742: MINUS
44743: LESS
44744: OR
44745: PUSH
44746: LD_VAR 0 8
44750: PUSH
44751: LD_INT 3
44753: ARRAY
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 8
44760: PUSH
44761: LD_INT 9
44763: PUSH
44764: LD_INT 10
44766: PUSH
44767: LD_INT 11
44769: PUSH
44770: LD_INT 12
44772: PUSH
44773: LD_INT 13
44775: PUSH
44776: LD_INT 16
44778: PUSH
44779: LD_INT 17
44781: PUSH
44782: LD_INT 18
44784: PUSH
44785: LD_INT 19
44787: PUSH
44788: LD_INT 20
44790: PUSH
44791: LD_INT 21
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: LIST
44798: LIST
44799: LIST
44800: LIST
44801: LIST
44802: LIST
44803: LIST
44804: LIST
44805: LIST
44806: LIST
44807: LIST
44808: IN
44809: NOT
44810: OR
44811: PUSH
44812: LD_VAR 0 8
44816: PUSH
44817: LD_INT 5
44819: ARRAY
44820: NOT
44821: OR
44822: PUSH
44823: LD_VAR 0 8
44827: PUSH
44828: LD_INT 6
44830: ARRAY
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: LD_INT 7
44840: PUSH
44841: LD_INT 9
44843: PUSH
44844: LD_INT 10
44846: PUSH
44847: LD_INT 11
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: IN
44858: NOT
44859: OR
44860: IFFALSE 44866
// exit ;
44862: POP
44863: POP
44864: GO 44964
// end ;
44866: GO 44537
44868: POP
44869: POP
// side := GetSide ( depot ) ;
44870: LD_ADDR_VAR 0 9
44874: PUSH
44875: LD_VAR 0 1
44879: PPUSH
44880: CALL_OW 255
44884: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
44885: LD_VAR 0 9
44889: PPUSH
44890: LD_VAR 0 3
44894: PPUSH
44895: LD_VAR 0 4
44899: PPUSH
44900: LD_INT 20
44902: PPUSH
44903: CALL 37618 0 4
44907: PUSH
44908: LD_INT 4
44910: ARRAY
44911: IFFALSE 44915
// exit ;
44913: GO 44964
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
44915: LD_VAR 0 2
44919: PUSH
44920: LD_INT 29
44922: PUSH
44923: LD_INT 30
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: IN
44930: PUSH
44931: LD_VAR 0 3
44935: PPUSH
44936: LD_VAR 0 4
44940: PPUSH
44941: LD_VAR 0 9
44945: PPUSH
44946: CALL_OW 440
44950: NOT
44951: AND
44952: IFFALSE 44956
// exit ;
44954: GO 44964
// result := true ;
44956: LD_ADDR_VAR 0 6
44960: PUSH
44961: LD_INT 1
44963: ST_TO_ADDR
// end ;
44964: LD_VAR 0 6
44968: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
44969: LD_INT 0
44971: PPUSH
44972: PPUSH
44973: PPUSH
44974: PPUSH
44975: PPUSH
44976: PPUSH
44977: PPUSH
44978: PPUSH
44979: PPUSH
44980: PPUSH
44981: PPUSH
44982: PPUSH
44983: PPUSH
44984: PPUSH
44985: PPUSH
44986: PPUSH
44987: PPUSH
44988: PPUSH
44989: PPUSH
44990: PPUSH
44991: PPUSH
44992: PPUSH
44993: PPUSH
44994: PPUSH
44995: PPUSH
44996: PPUSH
44997: PPUSH
44998: PPUSH
44999: PPUSH
45000: PPUSH
45001: PPUSH
45002: PPUSH
45003: PPUSH
45004: PPUSH
45005: PPUSH
45006: PPUSH
45007: PPUSH
45008: PPUSH
45009: PPUSH
45010: PPUSH
45011: PPUSH
45012: PPUSH
45013: PPUSH
45014: PPUSH
45015: PPUSH
45016: PPUSH
45017: PPUSH
45018: PPUSH
45019: PPUSH
45020: PPUSH
45021: PPUSH
45022: PPUSH
45023: PPUSH
45024: PPUSH
45025: PPUSH
45026: PPUSH
45027: PPUSH
45028: PPUSH
// result = [ ] ;
45029: LD_ADDR_VAR 0 7
45033: PUSH
45034: EMPTY
45035: ST_TO_ADDR
// temp_list = [ ] ;
45036: LD_ADDR_VAR 0 9
45040: PUSH
45041: EMPTY
45042: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45043: LD_VAR 0 4
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: LD_INT 2
45056: PUSH
45057: LD_INT 3
45059: PUSH
45060: LD_INT 4
45062: PUSH
45063: LD_INT 5
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: IN
45074: NOT
45075: PUSH
45076: LD_VAR 0 1
45080: PUSH
45081: LD_INT 0
45083: PUSH
45084: LD_INT 1
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: IN
45091: PUSH
45092: LD_VAR 0 5
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: LD_INT 2
45102: PUSH
45103: LD_INT 3
45105: PUSH
45106: EMPTY
45107: LIST
45108: LIST
45109: LIST
45110: IN
45111: NOT
45112: AND
45113: OR
45114: IFFALSE 45118
// exit ;
45116: GO 63509
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45118: LD_VAR 0 1
45122: PUSH
45123: LD_INT 6
45125: PUSH
45126: LD_INT 7
45128: PUSH
45129: LD_INT 8
45131: PUSH
45132: LD_INT 13
45134: PUSH
45135: LD_INT 12
45137: PUSH
45138: LD_INT 15
45140: PUSH
45141: LD_INT 11
45143: PUSH
45144: LD_INT 14
45146: PUSH
45147: LD_INT 10
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: LIST
45156: LIST
45157: LIST
45158: LIST
45159: LIST
45160: IN
45161: IFFALSE 45171
// btype = b_lab ;
45163: LD_ADDR_VAR 0 1
45167: PUSH
45168: LD_INT 6
45170: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45171: LD_VAR 0 6
45175: PUSH
45176: LD_INT 0
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: LIST
45189: IN
45190: NOT
45191: PUSH
45192: LD_VAR 0 1
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 1
45202: PUSH
45203: LD_INT 2
45205: PUSH
45206: LD_INT 3
45208: PUSH
45209: LD_INT 6
45211: PUSH
45212: LD_INT 36
45214: PUSH
45215: LD_INT 4
45217: PUSH
45218: LD_INT 5
45220: PUSH
45221: LD_INT 31
45223: PUSH
45224: LD_INT 32
45226: PUSH
45227: LD_INT 33
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: IN
45243: NOT
45244: PUSH
45245: LD_VAR 0 6
45249: PUSH
45250: LD_INT 1
45252: EQUAL
45253: AND
45254: OR
45255: PUSH
45256: LD_VAR 0 1
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: LD_INT 3
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: IN
45271: NOT
45272: PUSH
45273: LD_VAR 0 6
45277: PUSH
45278: LD_INT 2
45280: EQUAL
45281: AND
45282: OR
45283: IFFALSE 45293
// mode = 0 ;
45285: LD_ADDR_VAR 0 6
45289: PUSH
45290: LD_INT 0
45292: ST_TO_ADDR
// case mode of 0 :
45293: LD_VAR 0 6
45297: PUSH
45298: LD_INT 0
45300: DOUBLE
45301: EQUAL
45302: IFTRUE 45306
45304: GO 56759
45306: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45307: LD_ADDR_VAR 0 11
45311: PUSH
45312: LD_INT 0
45314: PUSH
45315: LD_INT 0
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: LD_INT 1
45327: NEG
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: LD_INT 0
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 1
45345: PUSH
45346: LD_INT 1
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: LD_INT 1
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: NEG
45366: PUSH
45367: LD_INT 0
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: LD_INT 1
45380: NEG
45381: PUSH
45382: EMPTY
45383: LIST
45384: LIST
45385: PUSH
45386: LD_INT 1
45388: NEG
45389: PUSH
45390: LD_INT 2
45392: NEG
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 2
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 1
45414: NEG
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: PUSH
45423: LD_INT 2
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 0
45432: PUSH
45433: LD_INT 2
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 1
45453: PUSH
45454: LD_INT 3
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 0
45463: PUSH
45464: LD_INT 3
45466: PUSH
45467: EMPTY
45468: LIST
45469: LIST
45470: PUSH
45471: LD_INT 1
45473: NEG
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: LIST
45497: LIST
45498: LIST
45499: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45500: LD_ADDR_VAR 0 12
45504: PUSH
45505: LD_INT 0
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 0
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 1
45538: PUSH
45539: LD_INT 1
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: LD_INT 1
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: LD_INT 1
45573: NEG
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 1
45584: NEG
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: PUSH
45593: LD_INT 0
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 2
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: NEG
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 0
45627: PUSH
45628: EMPTY
45629: LIST
45630: LIST
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: LD_INT 1
45638: NEG
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 3
45657: NEG
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45696: LD_ADDR_VAR 0 13
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: PUSH
45790: LD_INT 1
45792: PUSH
45793: EMPTY
45794: LIST
45795: LIST
45796: PUSH
45797: LD_INT 2
45799: PUSH
45800: LD_INT 2
45802: PUSH
45803: EMPTY
45804: LIST
45805: LIST
45806: PUSH
45807: LD_INT 1
45809: PUSH
45810: LD_INT 2
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 2
45831: NEG
45832: PUSH
45833: LD_INT 2
45835: NEG
45836: PUSH
45837: EMPTY
45838: LIST
45839: LIST
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 3
45867: NEG
45868: PUSH
45869: LD_INT 3
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45895: LD_ADDR_VAR 0 14
45899: PUSH
45900: LD_INT 0
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 0
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: PUSH
45924: LD_INT 0
45926: PUSH
45927: EMPTY
45928: LIST
45929: LIST
45930: PUSH
45931: LD_INT 1
45933: PUSH
45934: LD_INT 1
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 1
45946: PUSH
45947: EMPTY
45948: LIST
45949: LIST
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: NEG
45965: PUSH
45966: LD_INT 1
45968: NEG
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: NEG
45977: PUSH
45978: LD_INT 2
45980: NEG
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: LD_INT 2
45991: NEG
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: PUSH
46000: LD_INT 1
46002: NEG
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: NEG
46042: PUSH
46043: LD_INT 3
46045: NEG
46046: PUSH
46047: EMPTY
46048: LIST
46049: LIST
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 3
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46091: LD_ADDR_VAR 0 15
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 1
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 1
46129: PUSH
46130: LD_INT 1
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 1
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PUSH
46147: LD_INT 1
46149: NEG
46150: PUSH
46151: LD_INT 0
46153: PUSH
46154: EMPTY
46155: LIST
46156: LIST
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: EMPTY
46167: LIST
46168: LIST
46169: PUSH
46170: LD_INT 1
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: LD_INT 2
46183: PUSH
46184: LD_INT 0
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 2
46193: PUSH
46194: LD_INT 1
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 1
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: PUSH
46212: LD_INT 2
46214: NEG
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: NEG
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: EMPTY
46232: LIST
46233: LIST
46234: PUSH
46235: LD_INT 2
46237: PUSH
46238: LD_INT 1
46240: NEG
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 3
46248: PUSH
46249: LD_INT 0
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 3
46258: PUSH
46259: LD_INT 1
46261: PUSH
46262: EMPTY
46263: LIST
46264: LIST
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: LIST
46270: LIST
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: LIST
46282: LIST
46283: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46284: LD_ADDR_VAR 0 16
46288: PUSH
46289: LD_INT 0
46291: PUSH
46292: LD_INT 0
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: LD_INT 0
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 1
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: LD_INT 1
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: NEG
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: LD_INT 2
46369: NEG
46370: PUSH
46371: EMPTY
46372: LIST
46373: LIST
46374: PUSH
46375: LD_INT 2
46377: PUSH
46378: LD_INT 1
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 2
46387: PUSH
46388: LD_INT 2
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 2
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 2
46407: NEG
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: NEG
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 3
46431: PUSH
46432: LD_INT 2
46434: PUSH
46435: EMPTY
46436: LIST
46437: LIST
46438: PUSH
46439: LD_INT 3
46441: PUSH
46442: LD_INT 3
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: LD_INT 3
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: LIST
46463: LIST
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46477: LD_ADDR_VAR 0 17
46481: PUSH
46482: LD_INT 0
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 0
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 1
46515: PUSH
46516: LD_INT 1
46518: PUSH
46519: EMPTY
46520: LIST
46521: LIST
46522: PUSH
46523: LD_INT 0
46525: PUSH
46526: LD_INT 1
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 1
46535: NEG
46536: PUSH
46537: LD_INT 0
46539: PUSH
46540: EMPTY
46541: LIST
46542: LIST
46543: PUSH
46544: LD_INT 1
46546: NEG
46547: PUSH
46548: LD_INT 1
46550: NEG
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 1
46558: NEG
46559: PUSH
46560: LD_INT 2
46562: NEG
46563: PUSH
46564: EMPTY
46565: LIST
46566: LIST
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: LD_INT 2
46573: NEG
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 1
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 2
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 2
46602: PUSH
46603: LD_INT 1
46605: PUSH
46606: EMPTY
46607: LIST
46608: LIST
46609: PUSH
46610: LD_INT 2
46612: PUSH
46613: LD_INT 2
46615: PUSH
46616: EMPTY
46617: LIST
46618: LIST
46619: PUSH
46620: LD_INT 1
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: EMPTY
46637: LIST
46638: LIST
46639: PUSH
46640: LD_INT 1
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 2
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 2
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 2
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: LIST
46699: LIST
46700: LIST
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46707: LD_ADDR_VAR 0 18
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: EMPTY
46740: LIST
46741: LIST
46742: PUSH
46743: LD_INT 1
46745: PUSH
46746: LD_INT 1
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 0
46755: PUSH
46756: LD_INT 1
46758: PUSH
46759: EMPTY
46760: LIST
46761: LIST
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: LD_INT 0
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 1
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 1
46788: NEG
46789: PUSH
46790: LD_INT 2
46792: NEG
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: LD_INT 2
46803: NEG
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 1
46811: PUSH
46812: LD_INT 1
46814: NEG
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 2
46822: PUSH
46823: LD_INT 0
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 2
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 2
46842: PUSH
46843: LD_INT 2
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 2
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 2
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 1
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 2
46883: NEG
46884: PUSH
46885: LD_INT 0
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 2
46894: NEG
46895: PUSH
46896: LD_INT 1
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 2
46906: NEG
46907: PUSH
46908: LD_INT 2
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46937: LD_ADDR_VAR 0 19
46941: PUSH
46942: LD_INT 0
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: PUSH
46966: LD_INT 0
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 1
46975: PUSH
46976: LD_INT 1
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 0
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: NEG
46996: PUSH
46997: LD_INT 0
46999: PUSH
47000: EMPTY
47001: LIST
47002: LIST
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: LD_INT 1
47010: NEG
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: NEG
47019: PUSH
47020: LD_INT 2
47022: NEG
47023: PUSH
47024: EMPTY
47025: LIST
47026: LIST
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: LD_INT 2
47033: NEG
47034: PUSH
47035: EMPTY
47036: LIST
47037: LIST
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: EMPTY
47047: LIST
47048: LIST
47049: PUSH
47050: LD_INT 2
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 2
47113: NEG
47114: PUSH
47115: LD_INT 0
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 2
47124: NEG
47125: PUSH
47126: LD_INT 1
47128: NEG
47129: PUSH
47130: EMPTY
47131: LIST
47132: LIST
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 2
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: LIST
47150: LIST
47151: LIST
47152: LIST
47153: LIST
47154: LIST
47155: LIST
47156: LIST
47157: LIST
47158: LIST
47159: LIST
47160: LIST
47161: LIST
47162: LIST
47163: LIST
47164: LIST
47165: LIST
47166: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47167: LD_ADDR_VAR 0 20
47171: PUSH
47172: LD_INT 0
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: PUSH
47196: LD_INT 0
47198: PUSH
47199: EMPTY
47200: LIST
47201: LIST
47202: PUSH
47203: LD_INT 1
47205: PUSH
47206: LD_INT 1
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 1
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 1
47225: NEG
47226: PUSH
47227: LD_INT 0
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: NEG
47237: PUSH
47238: LD_INT 1
47240: NEG
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 1
47248: NEG
47249: PUSH
47250: LD_INT 2
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: LD_INT 2
47263: NEG
47264: PUSH
47265: EMPTY
47266: LIST
47267: LIST
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: LD_INT 1
47274: NEG
47275: PUSH
47276: EMPTY
47277: LIST
47278: LIST
47279: PUSH
47280: LD_INT 2
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: EMPTY
47287: LIST
47288: LIST
47289: PUSH
47290: LD_INT 2
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 2
47302: PUSH
47303: LD_INT 2
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 2
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 0
47322: PUSH
47323: LD_INT 2
47325: PUSH
47326: EMPTY
47327: LIST
47328: LIST
47329: PUSH
47330: LD_INT 1
47332: NEG
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 2
47343: NEG
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 2
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 2
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: LIST
47392: LIST
47393: LIST
47394: LIST
47395: LIST
47396: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47397: LD_ADDR_VAR 0 21
47401: PUSH
47402: LD_INT 0
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 0
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: LD_INT 0
47428: PUSH
47429: EMPTY
47430: LIST
47431: LIST
47432: PUSH
47433: LD_INT 1
47435: PUSH
47436: LD_INT 1
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: LD_INT 1
47455: NEG
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: LD_INT 1
47470: NEG
47471: PUSH
47472: EMPTY
47473: LIST
47474: LIST
47475: PUSH
47476: LD_INT 1
47478: NEG
47479: PUSH
47480: LD_INT 2
47482: NEG
47483: PUSH
47484: EMPTY
47485: LIST
47486: LIST
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: LD_INT 2
47493: NEG
47494: PUSH
47495: EMPTY
47496: LIST
47497: LIST
47498: PUSH
47499: LD_INT 1
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 2
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: LD_INT 2
47522: PUSH
47523: LD_INT 1
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 2
47532: PUSH
47533: LD_INT 2
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 0
47552: PUSH
47553: LD_INT 2
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 1
47562: NEG
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 2
47573: NEG
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 2
47584: NEG
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 2
47596: NEG
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: LIST
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: LIST
47617: LIST
47618: LIST
47619: LIST
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: LIST
47625: LIST
47626: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47627: LD_ADDR_VAR 0 22
47631: PUSH
47632: LD_INT 0
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: EMPTY
47639: LIST
47640: LIST
47641: PUSH
47642: LD_INT 0
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 1
47655: PUSH
47656: LD_INT 0
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PUSH
47683: LD_INT 1
47685: NEG
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: NEG
47697: PUSH
47698: LD_INT 1
47700: NEG
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 2
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 2
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 1
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 2
47762: PUSH
47763: LD_INT 2
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: LD_INT 2
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: LD_INT 0
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: PUSH
47790: LD_INT 1
47792: NEG
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 2
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 2
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: LIST
47840: LIST
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: LIST
47846: LIST
47847: LIST
47848: LIST
47849: LIST
47850: LIST
47851: LIST
47852: LIST
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47857: LD_ADDR_VAR 0 23
47861: PUSH
47862: LD_INT 0
47864: PUSH
47865: LD_INT 0
47867: PUSH
47868: EMPTY
47869: LIST
47870: LIST
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 1
47877: NEG
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 1
47885: PUSH
47886: LD_INT 0
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 1
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: NEG
47939: PUSH
47940: LD_INT 2
47942: NEG
47943: PUSH
47944: EMPTY
47945: LIST
47946: LIST
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: LD_INT 2
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 1
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 2
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: PUSH
47980: LD_INT 2
47982: PUSH
47983: LD_INT 1
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 2
47992: PUSH
47993: LD_INT 2
47995: PUSH
47996: EMPTY
47997: LIST
47998: LIST
47999: PUSH
48000: LD_INT 1
48002: PUSH
48003: LD_INT 2
48005: PUSH
48006: EMPTY
48007: LIST
48008: LIST
48009: PUSH
48010: LD_INT 0
48012: PUSH
48013: LD_INT 2
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 2
48033: NEG
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 2
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: LD_INT 3
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: LD_INT 3
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 2
48095: NEG
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 1
48106: NEG
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: EMPTY
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: LIST
48118: LIST
48119: LIST
48120: LIST
48121: LIST
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48137: LD_ADDR_VAR 0 24
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: LD_INT 0
48147: PUSH
48148: EMPTY
48149: LIST
48150: LIST
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: LD_INT 1
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 0
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 1
48175: PUSH
48176: LD_INT 1
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 1
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: NEG
48196: PUSH
48197: LD_INT 0
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 1
48206: NEG
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: LD_INT 2
48222: NEG
48223: PUSH
48224: EMPTY
48225: LIST
48226: LIST
48227: PUSH
48228: LD_INT 0
48230: PUSH
48231: LD_INT 2
48233: NEG
48234: PUSH
48235: EMPTY
48236: LIST
48237: LIST
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: LD_INT 2
48252: PUSH
48253: LD_INT 0
48255: PUSH
48256: EMPTY
48257: LIST
48258: LIST
48259: PUSH
48260: LD_INT 2
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 2
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 0
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: NEG
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: NEG
48314: PUSH
48315: LD_INT 0
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 2
48324: NEG
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 2
48336: NEG
48337: PUSH
48338: LD_INT 2
48340: NEG
48341: PUSH
48342: EMPTY
48343: LIST
48344: LIST
48345: PUSH
48346: LD_INT 1
48348: PUSH
48349: LD_INT 2
48351: NEG
48352: PUSH
48353: EMPTY
48354: LIST
48355: LIST
48356: PUSH
48357: LD_INT 2
48359: PUSH
48360: LD_INT 1
48362: NEG
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 3
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 3
48380: PUSH
48381: LD_INT 2
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: PUSH
48388: EMPTY
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: LIST
48400: LIST
48401: LIST
48402: LIST
48403: LIST
48404: LIST
48405: LIST
48406: LIST
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48413: LD_ADDR_VAR 0 25
48417: PUSH
48418: LD_INT 0
48420: PUSH
48421: LD_INT 0
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: LD_INT 0
48430: PUSH
48431: LD_INT 1
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: LD_INT 0
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: LD_INT 1
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 1
48471: NEG
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 1
48482: NEG
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 0
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 2
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: LD_INT 1
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: LD_INT 2
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PUSH
48556: LD_INT 1
48558: PUSH
48559: LD_INT 2
48561: PUSH
48562: EMPTY
48563: LIST
48564: LIST
48565: PUSH
48566: LD_INT 0
48568: PUSH
48569: LD_INT 2
48571: PUSH
48572: EMPTY
48573: LIST
48574: LIST
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: LD_INT 2
48589: NEG
48590: PUSH
48591: LD_INT 0
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 2
48600: NEG
48601: PUSH
48602: LD_INT 1
48604: NEG
48605: PUSH
48606: EMPTY
48607: LIST
48608: LIST
48609: PUSH
48610: LD_INT 2
48612: NEG
48613: PUSH
48614: LD_INT 2
48616: NEG
48617: PUSH
48618: EMPTY
48619: LIST
48620: LIST
48621: PUSH
48622: LD_INT 3
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 3
48634: PUSH
48635: LD_INT 2
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 2
48644: PUSH
48645: LD_INT 3
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: PUSH
48655: LD_INT 3
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: LIST
48669: LIST
48670: LIST
48671: LIST
48672: LIST
48673: LIST
48674: LIST
48675: LIST
48676: LIST
48677: LIST
48678: LIST
48679: LIST
48680: LIST
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: LIST
48686: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48687: LD_ADDR_VAR 0 26
48691: PUSH
48692: LD_INT 0
48694: PUSH
48695: LD_INT 0
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 0
48704: PUSH
48705: LD_INT 1
48707: NEG
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 1
48715: PUSH
48716: LD_INT 0
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: PUSH
48726: LD_INT 1
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 0
48735: PUSH
48736: LD_INT 1
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 1
48745: NEG
48746: PUSH
48747: LD_INT 0
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 1
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: NEG
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: EMPTY
48775: LIST
48776: LIST
48777: PUSH
48778: LD_INT 0
48780: PUSH
48781: LD_INT 2
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 1
48794: NEG
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 0
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 2
48812: PUSH
48813: LD_INT 1
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 2
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: LD_INT 2
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 0
48842: PUSH
48843: LD_INT 2
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 1
48852: NEG
48853: PUSH
48854: LD_INT 1
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 2
48863: NEG
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: LD_INT 2
48874: NEG
48875: PUSH
48876: LD_INT 1
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 2
48886: NEG
48887: PUSH
48888: LD_INT 2
48890: NEG
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 2
48898: PUSH
48899: LD_INT 3
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 2
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 2
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: LIST
48942: LIST
48943: LIST
48944: LIST
48945: LIST
48946: LIST
48947: LIST
48948: LIST
48949: LIST
48950: LIST
48951: LIST
48952: LIST
48953: LIST
48954: LIST
48955: LIST
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48963: LD_ADDR_VAR 0 27
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 0
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 0
48980: PUSH
48981: LD_INT 1
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 1
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 1
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 0
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: NEG
49045: PUSH
49046: LD_INT 2
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: LD_INT 0
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 1
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: LD_INT 0
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 2
49088: PUSH
49089: LD_INT 1
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 2
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: LD_INT 2
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 0
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 1
49132: PUSH
49133: EMPTY
49134: LIST
49135: LIST
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: LD_INT 0
49143: PUSH
49144: EMPTY
49145: LIST
49146: LIST
49147: PUSH
49148: LD_INT 2
49150: NEG
49151: PUSH
49152: LD_INT 1
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: LD_INT 2
49162: NEG
49163: PUSH
49164: LD_INT 2
49166: NEG
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 2
49178: PUSH
49179: EMPTY
49180: LIST
49181: LIST
49182: PUSH
49183: LD_INT 2
49185: NEG
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: PUSH
49194: LD_INT 3
49196: NEG
49197: PUSH
49198: LD_INT 1
49200: NEG
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 3
49208: NEG
49209: PUSH
49210: LD_INT 2
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: LIST
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49243: LD_ADDR_VAR 0 28
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: LD_INT 2
49328: NEG
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 0
49336: PUSH
49337: LD_INT 2
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: LD_INT 1
49350: NEG
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 2
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 2
49378: PUSH
49379: LD_INT 2
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 1
49388: PUSH
49389: LD_INT 2
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: PUSH
49396: LD_INT 0
49398: PUSH
49399: LD_INT 2
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: LD_INT 1
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 0
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: LD_INT 1
49434: NEG
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 2
49442: NEG
49443: PUSH
49444: LD_INT 2
49446: NEG
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: NEG
49455: PUSH
49456: LD_INT 3
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 3
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 3
49478: NEG
49479: PUSH
49480: LD_INT 1
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: LD_INT 2
49494: NEG
49495: PUSH
49496: EMPTY
49497: LIST
49498: LIST
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: LIST
49504: LIST
49505: LIST
49506: LIST
49507: LIST
49508: LIST
49509: LIST
49510: LIST
49511: LIST
49512: LIST
49513: LIST
49514: LIST
49515: LIST
49516: LIST
49517: LIST
49518: LIST
49519: LIST
49520: LIST
49521: LIST
49522: LIST
49523: LIST
49524: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
49525: LD_ADDR_VAR 0 29
49529: PUSH
49530: LD_INT 0
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 0
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: LD_INT 0
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: PUSH
49564: LD_INT 1
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: PUSH
49571: LD_INT 0
49573: PUSH
49574: LD_INT 1
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 1
49583: NEG
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: LD_INT 1
49598: NEG
49599: PUSH
49600: EMPTY
49601: LIST
49602: LIST
49603: PUSH
49604: LD_INT 1
49606: NEG
49607: PUSH
49608: LD_INT 2
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 0
49618: PUSH
49619: LD_INT 2
49621: NEG
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 2
49640: PUSH
49641: LD_INT 0
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 2
49650: PUSH
49651: LD_INT 1
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 1
49660: PUSH
49661: LD_INT 2
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 0
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 1
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 2
49691: NEG
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: LD_INT 2
49707: NEG
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 3
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 2
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: LD_INT 1
49741: PUSH
49742: EMPTY
49743: LIST
49744: LIST
49745: PUSH
49746: LD_INT 1
49748: PUSH
49749: LD_INT 3
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 1
49758: NEG
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: EMPTY
49764: LIST
49765: LIST
49766: PUSH
49767: LD_INT 3
49769: NEG
49770: PUSH
49771: LD_INT 2
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: LIST
49786: LIST
49787: LIST
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49804: LD_ADDR_VAR 0 30
49808: PUSH
49809: LD_INT 0
49811: PUSH
49812: LD_INT 0
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 1
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 1
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 1
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 0
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: NEG
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 1
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 1
49885: NEG
49886: PUSH
49887: LD_INT 2
49889: NEG
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 0
49897: PUSH
49898: LD_INT 2
49900: NEG
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: PUSH
49909: LD_INT 1
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 2
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 2
49929: PUSH
49930: LD_INT 1
49932: PUSH
49933: EMPTY
49934: LIST
49935: LIST
49936: PUSH
49937: LD_INT 2
49939: PUSH
49940: LD_INT 2
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 1
49949: PUSH
49950: LD_INT 2
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 1
49959: NEG
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 2
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: LD_INT 1
49993: NEG
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 1
50005: PUSH
50006: LD_INT 2
50008: NEG
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 3
50016: PUSH
50017: LD_INT 2
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 2
50026: PUSH
50027: LD_INT 3
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 2
50036: NEG
50037: PUSH
50038: LD_INT 1
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: LD_INT 1
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: LIST
50064: LIST
50065: LIST
50066: LIST
50067: LIST
50068: LIST
50069: LIST
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: LIST
50078: LIST
50079: LIST
50080: LIST
50081: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50082: LD_ADDR_VAR 0 31
50086: PUSH
50087: LD_INT 0
50089: PUSH
50090: LD_INT 0
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 0
50099: PUSH
50100: LD_INT 1
50102: NEG
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 1
50110: PUSH
50111: LD_INT 0
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: PUSH
50121: LD_INT 1
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 0
50130: PUSH
50131: LD_INT 1
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: NEG
50141: PUSH
50142: LD_INT 0
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 2
50167: NEG
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: PUSH
50173: LD_INT 1
50175: PUSH
50176: LD_INT 1
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: LD_INT 0
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: LD_INT 1
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: LD_INT 2
50209: PUSH
50210: EMPTY
50211: LIST
50212: LIST
50213: PUSH
50214: LD_INT 1
50216: PUSH
50217: LD_INT 2
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: LD_INT 0
50226: PUSH
50227: LD_INT 2
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 1
50236: NEG
50237: PUSH
50238: LD_INT 1
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 1
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: LD_INT 2
50259: NEG
50260: PUSH
50261: LD_INT 2
50263: NEG
50264: PUSH
50265: EMPTY
50266: LIST
50267: LIST
50268: PUSH
50269: LD_INT 2
50271: NEG
50272: PUSH
50273: LD_INT 3
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 3
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 1
50304: PUSH
50305: LD_INT 3
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 1
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: EMPTY
50320: LIST
50321: LIST
50322: PUSH
50323: LD_INT 3
50325: NEG
50326: PUSH
50327: LD_INT 2
50329: NEG
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50360: LD_ADDR_VAR 0 32
50364: PUSH
50365: LD_INT 0
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 0
50377: PUSH
50378: LD_INT 1
50380: NEG
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 1
50398: PUSH
50399: LD_INT 1
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 0
50408: PUSH
50409: LD_INT 1
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: NEG
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 1
50433: NEG
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: LD_INT 2
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 0
50453: PUSH
50454: LD_INT 2
50456: NEG
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 1
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 2
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 2
50485: PUSH
50486: LD_INT 2
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 1
50495: PUSH
50496: LD_INT 2
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 0
50505: PUSH
50506: LD_INT 2
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 2
50526: NEG
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 2
50537: NEG
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: EMPTY
50544: LIST
50545: LIST
50546: PUSH
50547: LD_INT 1
50549: NEG
50550: PUSH
50551: LD_INT 3
50553: NEG
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: PUSH
50559: LD_INT 1
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: LD_INT 2
50575: PUSH
50576: EMPTY
50577: LIST
50578: LIST
50579: PUSH
50580: LD_INT 2
50582: PUSH
50583: LD_INT 3
50585: PUSH
50586: EMPTY
50587: LIST
50588: LIST
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: LD_INT 1
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: LD_INT 1
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50638: LD_ADDR_VAR 0 33
50642: PUSH
50643: LD_INT 0
50645: PUSH
50646: LD_INT 0
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 1
50658: NEG
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: LD_INT 0
50686: PUSH
50687: LD_INT 1
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 1
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 1
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 1
50731: PUSH
50732: LD_INT 1
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 2
50752: PUSH
50753: LD_INT 1
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 1
50762: PUSH
50763: LD_INT 2
50765: PUSH
50766: EMPTY
50767: LIST
50768: LIST
50769: PUSH
50770: LD_INT 0
50772: PUSH
50773: LD_INT 2
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 1
50782: NEG
50783: PUSH
50784: LD_INT 1
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: LD_INT 0
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 2
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: NEG
50809: PUSH
50810: EMPTY
50811: LIST
50812: LIST
50813: PUSH
50814: LD_INT 2
50816: NEG
50817: PUSH
50818: LD_INT 2
50820: NEG
50821: PUSH
50822: EMPTY
50823: LIST
50824: LIST
50825: PUSH
50826: LD_INT 2
50828: NEG
50829: PUSH
50830: LD_INT 3
50832: NEG
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: PUSH
50838: LD_INT 2
50840: PUSH
50841: LD_INT 1
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: LD_INT 3
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: EMPTY
50856: LIST
50857: LIST
50858: PUSH
50859: LD_INT 1
50861: PUSH
50862: LD_INT 3
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: PUSH
50869: LD_INT 1
50871: NEG
50872: PUSH
50873: LD_INT 2
50875: PUSH
50876: EMPTY
50877: LIST
50878: LIST
50879: PUSH
50880: LD_INT 3
50882: NEG
50883: PUSH
50884: LD_INT 2
50886: NEG
50887: PUSH
50888: EMPTY
50889: LIST
50890: LIST
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50917: LD_ADDR_VAR 0 34
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: EMPTY
50929: LIST
50930: LIST
50931: PUSH
50932: LD_INT 0
50934: PUSH
50935: LD_INT 1
50937: NEG
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: LD_INT 1
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: LD_INT 0
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: NEG
50987: PUSH
50988: LD_INT 1
50990: NEG
50991: PUSH
50992: EMPTY
50993: LIST
50994: LIST
50995: PUSH
50996: LD_INT 1
50998: NEG
50999: PUSH
51000: LD_INT 2
51002: NEG
51003: PUSH
51004: EMPTY
51005: LIST
51006: LIST
51007: PUSH
51008: LD_INT 0
51010: PUSH
51011: LD_INT 2
51013: NEG
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: PUSH
51019: LD_INT 1
51021: PUSH
51022: LD_INT 1
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 1
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 1
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: LD_INT 1
51066: PUSH
51067: EMPTY
51068: LIST
51069: LIST
51070: PUSH
51071: LD_INT 2
51073: NEG
51074: PUSH
51075: LD_INT 0
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: LD_INT 1
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 2
51096: NEG
51097: PUSH
51098: LD_INT 2
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 3
51131: PUSH
51132: LD_INT 2
51134: PUSH
51135: EMPTY
51136: LIST
51137: LIST
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: LD_INT 3
51144: PUSH
51145: EMPTY
51146: LIST
51147: LIST
51148: PUSH
51149: LD_INT 2
51151: NEG
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 3
51162: NEG
51163: PUSH
51164: LD_INT 1
51166: NEG
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: LIST
51176: LIST
51177: LIST
51178: LIST
51179: LIST
51180: LIST
51181: LIST
51182: LIST
51183: LIST
51184: LIST
51185: LIST
51186: LIST
51187: LIST
51188: LIST
51189: LIST
51190: LIST
51191: LIST
51192: LIST
51193: LIST
51194: LIST
51195: LIST
51196: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51197: LD_ADDR_VAR 0 35
51201: PUSH
51202: LD_INT 0
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 0
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: LD_INT 1
51225: PUSH
51226: LD_INT 0
51228: PUSH
51229: EMPTY
51230: LIST
51231: LIST
51232: PUSH
51233: LD_INT 1
51235: PUSH
51236: LD_INT 1
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PUSH
51243: LD_INT 0
51245: PUSH
51246: LD_INT 1
51248: PUSH
51249: EMPTY
51250: LIST
51251: LIST
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 0
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 1
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: NEG
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 2
51278: PUSH
51279: LD_INT 1
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 2
51288: NEG
51289: PUSH
51290: LD_INT 1
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51309: LD_ADDR_VAR 0 36
51313: PUSH
51314: LD_INT 0
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 1
51337: PUSH
51338: LD_INT 0
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: LD_INT 1
51347: PUSH
51348: LD_INT 1
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: PUSH
51355: LD_INT 0
51357: PUSH
51358: LD_INT 1
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 1
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 1
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 1
51390: NEG
51391: PUSH
51392: LD_INT 2
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: LIST
51420: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51421: LD_ADDR_VAR 0 37
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: LD_INT 0
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 0
51438: PUSH
51439: LD_INT 1
51441: NEG
51442: PUSH
51443: EMPTY
51444: LIST
51445: LIST
51446: PUSH
51447: LD_INT 1
51449: PUSH
51450: LD_INT 0
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 1
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 1
51479: NEG
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 1
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: LD_INT 1
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: EMPTY
51508: LIST
51509: LIST
51510: PUSH
51511: LD_INT 1
51513: NEG
51514: PUSH
51515: LD_INT 1
51517: PUSH
51518: EMPTY
51519: LIST
51520: LIST
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: LIST
51531: LIST
51532: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51533: LD_ADDR_VAR 0 38
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 0
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 0
51550: PUSH
51551: LD_INT 1
51553: NEG
51554: PUSH
51555: EMPTY
51556: LIST
51557: LIST
51558: PUSH
51559: LD_INT 1
51561: PUSH
51562: LD_INT 0
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 1
51571: PUSH
51572: LD_INT 1
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 0
51581: PUSH
51582: LD_INT 1
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: NEG
51592: PUSH
51593: LD_INT 0
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 1
51606: NEG
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: PUSH
51615: LD_INT 1
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 2
51624: NEG
51625: PUSH
51626: LD_INT 1
51628: NEG
51629: PUSH
51630: EMPTY
51631: LIST
51632: LIST
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: LIST
51643: LIST
51644: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51645: LD_ADDR_VAR 0 39
51649: PUSH
51650: LD_INT 0
51652: PUSH
51653: LD_INT 0
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 0
51662: PUSH
51663: LD_INT 1
51665: NEG
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 0
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 1
51683: PUSH
51684: LD_INT 1
51686: PUSH
51687: EMPTY
51688: LIST
51689: LIST
51690: PUSH
51691: LD_INT 0
51693: PUSH
51694: LD_INT 1
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 1
51703: NEG
51704: PUSH
51705: LD_INT 0
51707: PUSH
51708: EMPTY
51709: LIST
51710: LIST
51711: PUSH
51712: LD_INT 1
51714: NEG
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 1
51726: NEG
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: LD_INT 2
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51757: LD_ADDR_VAR 0 40
51761: PUSH
51762: LD_INT 0
51764: PUSH
51765: LD_INT 0
51767: PUSH
51768: EMPTY
51769: LIST
51770: LIST
51771: PUSH
51772: LD_INT 0
51774: PUSH
51775: LD_INT 1
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 1
51795: PUSH
51796: LD_INT 1
51798: PUSH
51799: EMPTY
51800: LIST
51801: LIST
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 1
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 1
51815: NEG
51816: PUSH
51817: LD_INT 0
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: NEG
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 1
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: NEG
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51869: LD_ADDR_VAR 0 41
51873: PUSH
51874: LD_INT 0
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 0
51886: PUSH
51887: LD_INT 1
51889: NEG
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 0
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: PUSH
51908: LD_INT 1
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 0
51917: PUSH
51918: LD_INT 1
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 1
51927: NEG
51928: PUSH
51929: LD_INT 0
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 1
51938: NEG
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 1
51950: NEG
51951: PUSH
51952: LD_INT 2
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 1
51962: PUSH
51963: LD_INT 1
51965: NEG
51966: PUSH
51967: EMPTY
51968: LIST
51969: LIST
51970: PUSH
51971: LD_INT 2
51973: PUSH
51974: LD_INT 0
51976: PUSH
51977: EMPTY
51978: LIST
51979: LIST
51980: PUSH
51981: LD_INT 2
51983: PUSH
51984: LD_INT 1
51986: PUSH
51987: EMPTY
51988: LIST
51989: LIST
51990: PUSH
51991: LD_INT 2
51993: PUSH
51994: LD_INT 2
51996: PUSH
51997: EMPTY
51998: LIST
51999: LIST
52000: PUSH
52001: LD_INT 1
52003: PUSH
52004: LD_INT 2
52006: PUSH
52007: EMPTY
52008: LIST
52009: LIST
52010: PUSH
52011: LD_INT 1
52013: NEG
52014: PUSH
52015: LD_INT 1
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 2
52024: NEG
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 2
52035: NEG
52036: PUSH
52037: LD_INT 1
52039: NEG
52040: PUSH
52041: EMPTY
52042: LIST
52043: LIST
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: LD_INT 2
52051: NEG
52052: PUSH
52053: EMPTY
52054: LIST
52055: LIST
52056: PUSH
52057: LD_INT 2
52059: NEG
52060: PUSH
52061: LD_INT 3
52063: NEG
52064: PUSH
52065: EMPTY
52066: LIST
52067: LIST
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: LD_INT 1
52074: NEG
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 0
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: PUSH
52113: LD_INT 3
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 2
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 2
52132: NEG
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 3
52143: NEG
52144: PUSH
52145: LD_INT 0
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 3
52154: NEG
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: NEG
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 3
52178: NEG
52179: PUSH
52180: LD_INT 3
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: LIST
52192: LIST
52193: LIST
52194: LIST
52195: LIST
52196: LIST
52197: LIST
52198: LIST
52199: LIST
52200: LIST
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52219: LD_ADDR_VAR 0 42
52223: PUSH
52224: LD_INT 0
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 0
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 1
52247: PUSH
52248: LD_INT 0
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 1
52257: PUSH
52258: LD_INT 1
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 1
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 1
52277: NEG
52278: PUSH
52279: LD_INT 0
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 1
52288: NEG
52289: PUSH
52290: LD_INT 1
52292: NEG
52293: PUSH
52294: EMPTY
52295: LIST
52296: LIST
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: LD_INT 2
52304: NEG
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 0
52312: PUSH
52313: LD_INT 2
52315: NEG
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 1
52323: PUSH
52324: LD_INT 1
52326: NEG
52327: PUSH
52328: EMPTY
52329: LIST
52330: LIST
52331: PUSH
52332: LD_INT 2
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 2
52344: PUSH
52345: LD_INT 2
52347: PUSH
52348: EMPTY
52349: LIST
52350: LIST
52351: PUSH
52352: LD_INT 1
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: LD_INT 2
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: LD_INT 1
52378: PUSH
52379: EMPTY
52380: LIST
52381: LIST
52382: PUSH
52383: LD_INT 2
52385: NEG
52386: PUSH
52387: LD_INT 1
52389: NEG
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 2
52401: NEG
52402: PUSH
52403: EMPTY
52404: LIST
52405: LIST
52406: PUSH
52407: LD_INT 2
52409: NEG
52410: PUSH
52411: LD_INT 3
52413: NEG
52414: PUSH
52415: EMPTY
52416: LIST
52417: LIST
52418: PUSH
52419: LD_INT 1
52421: NEG
52422: PUSH
52423: LD_INT 3
52425: NEG
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: LD_INT 3
52436: NEG
52437: PUSH
52438: EMPTY
52439: LIST
52440: LIST
52441: PUSH
52442: LD_INT 1
52444: PUSH
52445: LD_INT 2
52447: NEG
52448: PUSH
52449: EMPTY
52450: LIST
52451: LIST
52452: PUSH
52453: LD_INT 3
52455: PUSH
52456: LD_INT 2
52458: PUSH
52459: EMPTY
52460: LIST
52461: LIST
52462: PUSH
52463: LD_INT 3
52465: PUSH
52466: LD_INT 3
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: PUSH
52473: LD_INT 2
52475: PUSH
52476: LD_INT 3
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 3
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 0
52495: PUSH
52496: LD_INT 3
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PUSH
52503: LD_INT 1
52505: NEG
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: EMPTY
52511: LIST
52512: LIST
52513: PUSH
52514: LD_INT 3
52516: NEG
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 3
52528: NEG
52529: PUSH
52530: LD_INT 3
52532: NEG
52533: PUSH
52534: EMPTY
52535: LIST
52536: LIST
52537: PUSH
52538: EMPTY
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: LIST
52548: LIST
52549: LIST
52550: LIST
52551: LIST
52552: LIST
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52569: LD_ADDR_VAR 0 43
52573: PUSH
52574: LD_INT 0
52576: PUSH
52577: LD_INT 0
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: LD_INT 1
52589: NEG
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: PUSH
52598: LD_INT 0
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 1
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: PUSH
52615: LD_INT 0
52617: PUSH
52618: LD_INT 1
52620: PUSH
52621: EMPTY
52622: LIST
52623: LIST
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: LD_INT 0
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: NEG
52639: PUSH
52640: LD_INT 1
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 1
52650: NEG
52651: PUSH
52652: LD_INT 2
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 0
52662: PUSH
52663: LD_INT 2
52665: NEG
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 1
52673: PUSH
52674: LD_INT 1
52676: NEG
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 2
52684: PUSH
52685: LD_INT 0
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: LD_INT 1
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PUSH
52702: LD_INT 1
52704: PUSH
52705: LD_INT 2
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 0
52714: PUSH
52715: LD_INT 2
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 1
52724: NEG
52725: PUSH
52726: LD_INT 1
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 2
52735: NEG
52736: PUSH
52737: LD_INT 0
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 2
52746: NEG
52747: PUSH
52748: LD_INT 1
52750: NEG
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 1
52758: NEG
52759: PUSH
52760: LD_INT 3
52762: NEG
52763: PUSH
52764: EMPTY
52765: LIST
52766: LIST
52767: PUSH
52768: LD_INT 0
52770: PUSH
52771: LD_INT 3
52773: NEG
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 1
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 1
52795: NEG
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: PUSH
52804: LD_INT 0
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 3
52813: PUSH
52814: LD_INT 1
52816: PUSH
52817: EMPTY
52818: LIST
52819: LIST
52820: PUSH
52821: LD_INT 1
52823: PUSH
52824: LD_INT 3
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 0
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 1
52843: NEG
52844: PUSH
52845: LD_INT 2
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: PUSH
52852: LD_INT 2
52854: NEG
52855: PUSH
52856: LD_INT 1
52858: PUSH
52859: EMPTY
52860: LIST
52861: LIST
52862: PUSH
52863: LD_INT 3
52865: NEG
52866: PUSH
52867: LD_INT 0
52869: PUSH
52870: EMPTY
52871: LIST
52872: LIST
52873: PUSH
52874: LD_INT 3
52876: NEG
52877: PUSH
52878: LD_INT 1
52880: NEG
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52917: LD_ADDR_VAR 0 44
52921: PUSH
52922: LD_INT 0
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: LD_INT 0
52934: PUSH
52935: LD_INT 1
52937: NEG
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: PUSH
52943: LD_INT 1
52945: PUSH
52946: LD_INT 0
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 1
52955: PUSH
52956: LD_INT 1
52958: PUSH
52959: EMPTY
52960: LIST
52961: LIST
52962: PUSH
52963: LD_INT 0
52965: PUSH
52966: LD_INT 1
52968: PUSH
52969: EMPTY
52970: LIST
52971: LIST
52972: PUSH
52973: LD_INT 1
52975: NEG
52976: PUSH
52977: LD_INT 0
52979: PUSH
52980: EMPTY
52981: LIST
52982: LIST
52983: PUSH
52984: LD_INT 1
52986: NEG
52987: PUSH
52988: LD_INT 1
52990: NEG
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: NEG
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: PUSH
53008: LD_INT 1
53010: PUSH
53011: LD_INT 1
53013: NEG
53014: PUSH
53015: EMPTY
53016: LIST
53017: LIST
53018: PUSH
53019: LD_INT 2
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 2
53031: PUSH
53032: LD_INT 1
53034: PUSH
53035: EMPTY
53036: LIST
53037: LIST
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 2
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: LD_INT 2
53054: PUSH
53055: EMPTY
53056: LIST
53057: LIST
53058: PUSH
53059: LD_INT 1
53061: NEG
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: LD_INT 2
53072: NEG
53073: PUSH
53074: LD_INT 0
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 2
53083: NEG
53084: PUSH
53085: LD_INT 1
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 2
53095: NEG
53096: PUSH
53097: LD_INT 2
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 2
53107: NEG
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 2
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: LD_INT 0
53133: PUSH
53134: EMPTY
53135: LIST
53136: LIST
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: LD_INT 1
53143: PUSH
53144: EMPTY
53145: LIST
53146: LIST
53147: PUSH
53148: LD_INT 3
53150: PUSH
53151: LD_INT 2
53153: PUSH
53154: EMPTY
53155: LIST
53156: LIST
53157: PUSH
53158: LD_INT 3
53160: PUSH
53161: LD_INT 3
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 2
53170: PUSH
53171: LD_INT 3
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 2
53180: NEG
53181: PUSH
53182: LD_INT 1
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 3
53191: NEG
53192: PUSH
53193: LD_INT 0
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 3
53202: NEG
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 3
53214: NEG
53215: PUSH
53216: LD_INT 2
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: LD_INT 3
53230: NEG
53231: PUSH
53232: EMPTY
53233: LIST
53234: LIST
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: LIST
53258: LIST
53259: LIST
53260: LIST
53261: LIST
53262: LIST
53263: LIST
53264: LIST
53265: LIST
53266: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53267: LD_ADDR_VAR 0 45
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: LD_INT 1
53287: NEG
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 1
53295: PUSH
53296: LD_INT 0
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 1
53305: PUSH
53306: LD_INT 1
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 0
53315: PUSH
53316: LD_INT 1
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: EMPTY
53331: LIST
53332: LIST
53333: PUSH
53334: LD_INT 1
53336: NEG
53337: PUSH
53338: LD_INT 1
53340: NEG
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 1
53348: NEG
53349: PUSH
53350: LD_INT 2
53352: NEG
53353: PUSH
53354: EMPTY
53355: LIST
53356: LIST
53357: PUSH
53358: LD_INT 0
53360: PUSH
53361: LD_INT 2
53363: NEG
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 2
53392: PUSH
53393: LD_INT 2
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: PUSH
53403: LD_INT 2
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 2
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 1
53422: NEG
53423: PUSH
53424: LD_INT 1
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: PUSH
53431: LD_INT 2
53433: NEG
53434: PUSH
53435: LD_INT 1
53437: NEG
53438: PUSH
53439: EMPTY
53440: LIST
53441: LIST
53442: PUSH
53443: LD_INT 2
53445: NEG
53446: PUSH
53447: LD_INT 2
53449: NEG
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: PUSH
53455: LD_INT 2
53457: NEG
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: EMPTY
53464: LIST
53465: LIST
53466: PUSH
53467: LD_INT 1
53469: NEG
53470: PUSH
53471: LD_INT 3
53473: NEG
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: EMPTY
53487: LIST
53488: LIST
53489: PUSH
53490: LD_INT 1
53492: PUSH
53493: LD_INT 2
53495: NEG
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: PUSH
53501: LD_INT 3
53503: PUSH
53504: LD_INT 2
53506: PUSH
53507: EMPTY
53508: LIST
53509: LIST
53510: PUSH
53511: LD_INT 3
53513: PUSH
53514: LD_INT 3
53516: PUSH
53517: EMPTY
53518: LIST
53519: LIST
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 1
53533: PUSH
53534: LD_INT 3
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: LD_INT 0
53543: PUSH
53544: LD_INT 3
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 1
53553: NEG
53554: PUSH
53555: LD_INT 2
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 3
53564: NEG
53565: PUSH
53566: LD_INT 2
53568: NEG
53569: PUSH
53570: EMPTY
53571: LIST
53572: LIST
53573: PUSH
53574: LD_INT 3
53576: NEG
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53617: LD_ADDR_VAR 0 46
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 0
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 1
53637: NEG
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: PUSH
53643: LD_INT 1
53645: PUSH
53646: LD_INT 0
53648: PUSH
53649: EMPTY
53650: LIST
53651: LIST
53652: PUSH
53653: LD_INT 1
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 1
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 1
53675: NEG
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 1
53698: NEG
53699: PUSH
53700: LD_INT 2
53702: NEG
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 0
53710: PUSH
53711: LD_INT 2
53713: NEG
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 1
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 2
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 1
53752: PUSH
53753: LD_INT 2
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 0
53762: PUSH
53763: LD_INT 2
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 1
53772: NEG
53773: PUSH
53774: LD_INT 1
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: NEG
53784: PUSH
53785: LD_INT 0
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 2
53794: NEG
53795: PUSH
53796: LD_INT 1
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 1
53806: NEG
53807: PUSH
53808: LD_INT 3
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 0
53818: PUSH
53819: LD_INT 3
53821: NEG
53822: PUSH
53823: EMPTY
53824: LIST
53825: LIST
53826: PUSH
53827: LD_INT 1
53829: PUSH
53830: LD_INT 2
53832: NEG
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: PUSH
53845: EMPTY
53846: LIST
53847: LIST
53848: PUSH
53849: LD_INT 3
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 3
53861: PUSH
53862: LD_INT 1
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: LD_INT 1
53871: PUSH
53872: LD_INT 3
53874: PUSH
53875: EMPTY
53876: LIST
53877: LIST
53878: PUSH
53879: LD_INT 0
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: EMPTY
53886: LIST
53887: LIST
53888: PUSH
53889: LD_INT 1
53891: NEG
53892: PUSH
53893: LD_INT 2
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 2
53902: NEG
53903: PUSH
53904: LD_INT 1
53906: PUSH
53907: EMPTY
53908: LIST
53909: LIST
53910: PUSH
53911: LD_INT 3
53913: NEG
53914: PUSH
53915: LD_INT 0
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 3
53924: NEG
53925: PUSH
53926: LD_INT 1
53928: NEG
53929: PUSH
53930: EMPTY
53931: LIST
53932: LIST
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: LIST
53939: LIST
53940: LIST
53941: LIST
53942: LIST
53943: LIST
53944: LIST
53945: LIST
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: LIST
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: LIST
53958: LIST
53959: LIST
53960: LIST
53961: LIST
53962: LIST
53963: LIST
53964: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
53965: LD_ADDR_VAR 0 47
53969: PUSH
53970: LD_INT 0
53972: PUSH
53973: LD_INT 0
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 0
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 1
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 1
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 0
54013: PUSH
54014: LD_INT 1
54016: PUSH
54017: EMPTY
54018: LIST
54019: LIST
54020: PUSH
54021: LD_INT 1
54023: NEG
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 1
54034: NEG
54035: PUSH
54036: LD_INT 1
54038: NEG
54039: PUSH
54040: EMPTY
54041: LIST
54042: LIST
54043: PUSH
54044: LD_INT 1
54046: NEG
54047: PUSH
54048: LD_INT 2
54050: NEG
54051: PUSH
54052: EMPTY
54053: LIST
54054: LIST
54055: PUSH
54056: LD_INT 0
54058: PUSH
54059: LD_INT 2
54061: NEG
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: LD_INT 1
54072: NEG
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 2
54080: NEG
54081: PUSH
54082: LD_INT 1
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 2
54092: NEG
54093: PUSH
54094: LD_INT 2
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54116: LD_ADDR_VAR 0 48
54120: PUSH
54121: LD_INT 0
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 0
54133: PUSH
54134: LD_INT 1
54136: NEG
54137: PUSH
54138: EMPTY
54139: LIST
54140: LIST
54141: PUSH
54142: LD_INT 1
54144: PUSH
54145: LD_INT 0
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 1
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 1
54174: NEG
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: NEG
54186: PUSH
54187: LD_INT 1
54189: NEG
54190: PUSH
54191: EMPTY
54192: LIST
54193: LIST
54194: PUSH
54195: LD_INT 1
54197: NEG
54198: PUSH
54199: LD_INT 2
54201: NEG
54202: PUSH
54203: EMPTY
54204: LIST
54205: LIST
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: LD_INT 2
54212: NEG
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 1
54220: PUSH
54221: LD_INT 1
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 2
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 2
54241: PUSH
54242: LD_INT 1
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54263: LD_ADDR_VAR 0 49
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 0
54273: PUSH
54274: EMPTY
54275: LIST
54276: LIST
54277: PUSH
54278: LD_INT 0
54280: PUSH
54281: LD_INT 1
54283: NEG
54284: PUSH
54285: EMPTY
54286: LIST
54287: LIST
54288: PUSH
54289: LD_INT 1
54291: PUSH
54292: LD_INT 0
54294: PUSH
54295: EMPTY
54296: LIST
54297: LIST
54298: PUSH
54299: LD_INT 1
54301: PUSH
54302: LD_INT 1
54304: PUSH
54305: EMPTY
54306: LIST
54307: LIST
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: LD_INT 1
54314: PUSH
54315: EMPTY
54316: LIST
54317: LIST
54318: PUSH
54319: LD_INT 1
54321: NEG
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: EMPTY
54327: LIST
54328: LIST
54329: PUSH
54330: LD_INT 1
54332: NEG
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: EMPTY
54339: LIST
54340: LIST
54341: PUSH
54342: LD_INT 1
54344: PUSH
54345: LD_INT 1
54347: NEG
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: PUSH
54353: LD_INT 2
54355: PUSH
54356: LD_INT 0
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: PUSH
54366: LD_INT 1
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 2
54375: PUSH
54376: LD_INT 2
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 1
54385: PUSH
54386: LD_INT 2
54388: PUSH
54389: EMPTY
54390: LIST
54391: LIST
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: LIST
54406: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54407: LD_ADDR_VAR 0 50
54411: PUSH
54412: LD_INT 0
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 0
54424: PUSH
54425: LD_INT 1
54427: NEG
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 1
54435: PUSH
54436: LD_INT 0
54438: PUSH
54439: EMPTY
54440: LIST
54441: LIST
54442: PUSH
54443: LD_INT 1
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 0
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 1
54465: NEG
54466: PUSH
54467: LD_INT 0
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 1
54476: NEG
54477: PUSH
54478: LD_INT 1
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 2
54498: PUSH
54499: LD_INT 2
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: PUSH
54509: LD_INT 2
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: LD_INT 0
54518: PUSH
54519: LD_INT 2
54521: PUSH
54522: EMPTY
54523: LIST
54524: LIST
54525: PUSH
54526: LD_INT 1
54528: NEG
54529: PUSH
54530: LD_INT 1
54532: PUSH
54533: EMPTY
54534: LIST
54535: LIST
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
54551: LD_ADDR_VAR 0 51
54555: PUSH
54556: LD_INT 0
54558: PUSH
54559: LD_INT 0
54561: PUSH
54562: EMPTY
54563: LIST
54564: LIST
54565: PUSH
54566: LD_INT 0
54568: PUSH
54569: LD_INT 1
54571: NEG
54572: PUSH
54573: EMPTY
54574: LIST
54575: LIST
54576: PUSH
54577: LD_INT 1
54579: PUSH
54580: LD_INT 0
54582: PUSH
54583: EMPTY
54584: LIST
54585: LIST
54586: PUSH
54587: LD_INT 1
54589: PUSH
54590: LD_INT 1
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 1
54602: PUSH
54603: EMPTY
54604: LIST
54605: LIST
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: LD_INT 0
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 1
54620: NEG
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 1
54632: PUSH
54633: LD_INT 2
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 0
54642: PUSH
54643: LD_INT 2
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 1
54652: NEG
54653: PUSH
54654: LD_INT 1
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 2
54663: NEG
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 2
54674: NEG
54675: PUSH
54676: LD_INT 1
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54698: LD_ADDR_VAR 0 52
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 0
54715: PUSH
54716: LD_INT 1
54718: NEG
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: PUSH
54724: LD_INT 1
54726: PUSH
54727: LD_INT 0
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 1
54736: PUSH
54737: LD_INT 1
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 0
54746: PUSH
54747: LD_INT 1
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: NEG
54757: PUSH
54758: LD_INT 0
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 1
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 1
54779: NEG
54780: PUSH
54781: LD_INT 2
54783: NEG
54784: PUSH
54785: EMPTY
54786: LIST
54787: LIST
54788: PUSH
54789: LD_INT 1
54791: NEG
54792: PUSH
54793: LD_INT 1
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 2
54802: NEG
54803: PUSH
54804: LD_INT 0
54806: PUSH
54807: EMPTY
54808: LIST
54809: LIST
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: LD_INT 1
54817: NEG
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 2
54825: NEG
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: LIST
54842: LIST
54843: LIST
54844: LIST
54845: LIST
54846: LIST
54847: LIST
54848: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54849: LD_ADDR_VAR 0 53
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: LD_INT 0
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: LD_INT 0
54866: PUSH
54867: LD_INT 1
54869: NEG
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 1
54887: PUSH
54888: LD_INT 1
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 0
54897: PUSH
54898: LD_INT 1
54900: PUSH
54901: EMPTY
54902: LIST
54903: LIST
54904: PUSH
54905: LD_INT 1
54907: NEG
54908: PUSH
54909: LD_INT 0
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 1
54918: NEG
54919: PUSH
54920: LD_INT 1
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 1
54930: NEG
54931: PUSH
54932: LD_INT 2
54934: NEG
54935: PUSH
54936: EMPTY
54937: LIST
54938: LIST
54939: PUSH
54940: LD_INT 0
54942: PUSH
54943: LD_INT 2
54945: NEG
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: LD_INT 1
54956: NEG
54957: PUSH
54958: EMPTY
54959: LIST
54960: LIST
54961: PUSH
54962: LD_INT 2
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: LD_INT 1
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: LD_INT 2
54984: PUSH
54985: LD_INT 2
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: PUSH
54995: LD_INT 2
54997: PUSH
54998: EMPTY
54999: LIST
55000: LIST
55001: PUSH
55002: LD_INT 0
55004: PUSH
55005: LD_INT 2
55007: PUSH
55008: EMPTY
55009: LIST
55010: LIST
55011: PUSH
55012: LD_INT 1
55014: NEG
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 2
55025: NEG
55026: PUSH
55027: LD_INT 0
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: PUSH
55034: LD_INT 2
55036: NEG
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 2
55048: NEG
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: EMPTY
55055: LIST
55056: LIST
55057: PUSH
55058: EMPTY
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55079: LD_ADDR_VAR 0 54
55083: PUSH
55084: LD_INT 0
55086: PUSH
55087: LD_INT 0
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 0
55096: PUSH
55097: LD_INT 1
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 1
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 1
55117: PUSH
55118: LD_INT 1
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_INT 0
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: EMPTY
55132: LIST
55133: LIST
55134: PUSH
55135: LD_INT 1
55137: NEG
55138: PUSH
55139: LD_INT 0
55141: PUSH
55142: EMPTY
55143: LIST
55144: LIST
55145: PUSH
55146: LD_INT 1
55148: NEG
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 1
55160: NEG
55161: PUSH
55162: LD_INT 2
55164: NEG
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 2
55175: NEG
55176: PUSH
55177: EMPTY
55178: LIST
55179: LIST
55180: PUSH
55181: LD_INT 1
55183: PUSH
55184: LD_INT 1
55186: NEG
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: PUSH
55205: LD_INT 1
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: LD_INT 2
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 1
55224: PUSH
55225: LD_INT 2
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 2
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: NEG
55245: PUSH
55246: LD_INT 1
55248: PUSH
55249: EMPTY
55250: LIST
55251: LIST
55252: PUSH
55253: LD_INT 2
55255: NEG
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 2
55266: NEG
55267: PUSH
55268: LD_INT 1
55270: NEG
55271: PUSH
55272: EMPTY
55273: LIST
55274: LIST
55275: PUSH
55276: LD_INT 2
55278: NEG
55279: PUSH
55280: LD_INT 2
55282: NEG
55283: PUSH
55284: EMPTY
55285: LIST
55286: LIST
55287: PUSH
55288: EMPTY
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: LIST
55295: LIST
55296: LIST
55297: LIST
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55309: LD_ADDR_VAR 0 55
55313: PUSH
55314: LD_INT 0
55316: PUSH
55317: LD_INT 0
55319: PUSH
55320: EMPTY
55321: LIST
55322: LIST
55323: PUSH
55324: LD_INT 0
55326: PUSH
55327: LD_INT 1
55329: NEG
55330: PUSH
55331: EMPTY
55332: LIST
55333: LIST
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 1
55347: PUSH
55348: LD_INT 1
55350: PUSH
55351: EMPTY
55352: LIST
55353: LIST
55354: PUSH
55355: LD_INT 0
55357: PUSH
55358: LD_INT 1
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: LD_INT 1
55367: NEG
55368: PUSH
55369: LD_INT 0
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 1
55378: NEG
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: LD_INT 1
55390: NEG
55391: PUSH
55392: LD_INT 2
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 0
55402: PUSH
55403: LD_INT 2
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 1
55413: PUSH
55414: LD_INT 1
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 2
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 2
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: EMPTY
55439: LIST
55440: LIST
55441: PUSH
55442: LD_INT 2
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: EMPTY
55449: LIST
55450: LIST
55451: PUSH
55452: LD_INT 1
55454: PUSH
55455: LD_INT 2
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: PUSH
55462: LD_INT 0
55464: PUSH
55465: LD_INT 2
55467: PUSH
55468: EMPTY
55469: LIST
55470: LIST
55471: PUSH
55472: LD_INT 1
55474: NEG
55475: PUSH
55476: LD_INT 1
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 2
55485: NEG
55486: PUSH
55487: LD_INT 0
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: LIST
55525: LIST
55526: LIST
55527: LIST
55528: LIST
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: LIST
55535: LIST
55536: LIST
55537: LIST
55538: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55539: LD_ADDR_VAR 0 56
55543: PUSH
55544: LD_INT 0
55546: PUSH
55547: LD_INT 0
55549: PUSH
55550: EMPTY
55551: LIST
55552: LIST
55553: PUSH
55554: LD_INT 0
55556: PUSH
55557: LD_INT 1
55559: NEG
55560: PUSH
55561: EMPTY
55562: LIST
55563: LIST
55564: PUSH
55565: LD_INT 1
55567: PUSH
55568: LD_INT 0
55570: PUSH
55571: EMPTY
55572: LIST
55573: LIST
55574: PUSH
55575: LD_INT 1
55577: PUSH
55578: LD_INT 1
55580: PUSH
55581: EMPTY
55582: LIST
55583: LIST
55584: PUSH
55585: LD_INT 0
55587: PUSH
55588: LD_INT 1
55590: PUSH
55591: EMPTY
55592: LIST
55593: LIST
55594: PUSH
55595: LD_INT 1
55597: NEG
55598: PUSH
55599: LD_INT 0
55601: PUSH
55602: EMPTY
55603: LIST
55604: LIST
55605: PUSH
55606: LD_INT 1
55608: NEG
55609: PUSH
55610: LD_INT 1
55612: NEG
55613: PUSH
55614: EMPTY
55615: LIST
55616: LIST
55617: PUSH
55618: LD_INT 1
55620: NEG
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 0
55632: PUSH
55633: LD_INT 2
55635: NEG
55636: PUSH
55637: EMPTY
55638: LIST
55639: LIST
55640: PUSH
55641: LD_INT 1
55643: PUSH
55644: LD_INT 1
55646: NEG
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 2
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 2
55664: PUSH
55665: LD_INT 1
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 2
55674: PUSH
55675: LD_INT 2
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 2
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 2
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 2
55715: NEG
55716: PUSH
55717: LD_INT 0
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: NEG
55727: PUSH
55728: LD_INT 1
55730: NEG
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 2
55738: NEG
55739: PUSH
55740: LD_INT 2
55742: NEG
55743: PUSH
55744: EMPTY
55745: LIST
55746: LIST
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: LIST
55759: LIST
55760: LIST
55761: LIST
55762: LIST
55763: LIST
55764: LIST
55765: LIST
55766: LIST
55767: LIST
55768: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55769: LD_ADDR_VAR 0 57
55773: PUSH
55774: LD_INT 0
55776: PUSH
55777: LD_INT 0
55779: PUSH
55780: EMPTY
55781: LIST
55782: LIST
55783: PUSH
55784: LD_INT 0
55786: PUSH
55787: LD_INT 1
55789: NEG
55790: PUSH
55791: EMPTY
55792: LIST
55793: LIST
55794: PUSH
55795: LD_INT 1
55797: PUSH
55798: LD_INT 0
55800: PUSH
55801: EMPTY
55802: LIST
55803: LIST
55804: PUSH
55805: LD_INT 1
55807: PUSH
55808: LD_INT 1
55810: PUSH
55811: EMPTY
55812: LIST
55813: LIST
55814: PUSH
55815: LD_INT 0
55817: PUSH
55818: LD_INT 1
55820: PUSH
55821: EMPTY
55822: LIST
55823: LIST
55824: PUSH
55825: LD_INT 1
55827: NEG
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PUSH
55840: LD_INT 1
55842: NEG
55843: PUSH
55844: EMPTY
55845: LIST
55846: LIST
55847: PUSH
55848: LD_INT 1
55850: NEG
55851: PUSH
55852: LD_INT 2
55854: NEG
55855: PUSH
55856: EMPTY
55857: LIST
55858: LIST
55859: PUSH
55860: LD_INT 0
55862: PUSH
55863: LD_INT 2
55865: NEG
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: PUSH
55871: LD_INT 1
55873: PUSH
55874: LD_INT 1
55876: NEG
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 2
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: LD_INT 2
55894: PUSH
55895: LD_INT 1
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 2
55904: PUSH
55905: LD_INT 2
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 1
55914: PUSH
55915: LD_INT 2
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 0
55924: PUSH
55925: LD_INT 2
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: NEG
55935: PUSH
55936: LD_INT 1
55938: PUSH
55939: EMPTY
55940: LIST
55941: LIST
55942: PUSH
55943: LD_INT 2
55945: NEG
55946: PUSH
55947: LD_INT 0
55949: PUSH
55950: EMPTY
55951: LIST
55952: LIST
55953: PUSH
55954: LD_INT 2
55956: NEG
55957: PUSH
55958: LD_INT 1
55960: NEG
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PUSH
55966: LD_INT 2
55968: NEG
55969: PUSH
55970: LD_INT 2
55972: NEG
55973: PUSH
55974: EMPTY
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: LIST
55996: LIST
55997: LIST
55998: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55999: LD_ADDR_VAR 0 58
56003: PUSH
56004: LD_INT 0
56006: PUSH
56007: LD_INT 0
56009: PUSH
56010: EMPTY
56011: LIST
56012: LIST
56013: PUSH
56014: LD_INT 0
56016: PUSH
56017: LD_INT 1
56019: NEG
56020: PUSH
56021: EMPTY
56022: LIST
56023: LIST
56024: PUSH
56025: LD_INT 1
56027: PUSH
56028: LD_INT 0
56030: PUSH
56031: EMPTY
56032: LIST
56033: LIST
56034: PUSH
56035: LD_INT 1
56037: PUSH
56038: LD_INT 1
56040: PUSH
56041: EMPTY
56042: LIST
56043: LIST
56044: PUSH
56045: LD_INT 0
56047: PUSH
56048: LD_INT 1
56050: PUSH
56051: EMPTY
56052: LIST
56053: LIST
56054: PUSH
56055: LD_INT 1
56057: NEG
56058: PUSH
56059: LD_INT 0
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: PUSH
56066: LD_INT 1
56068: NEG
56069: PUSH
56070: LD_INT 1
56072: NEG
56073: PUSH
56074: EMPTY
56075: LIST
56076: LIST
56077: PUSH
56078: LD_INT 1
56080: NEG
56081: PUSH
56082: LD_INT 2
56084: NEG
56085: PUSH
56086: EMPTY
56087: LIST
56088: LIST
56089: PUSH
56090: LD_INT 0
56092: PUSH
56093: LD_INT 2
56095: NEG
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: PUSH
56104: LD_INT 1
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: EMPTY
56119: LIST
56120: LIST
56121: PUSH
56122: LD_INT 2
56124: PUSH
56125: LD_INT 1
56127: PUSH
56128: EMPTY
56129: LIST
56130: LIST
56131: PUSH
56132: LD_INT 2
56134: PUSH
56135: LD_INT 2
56137: PUSH
56138: EMPTY
56139: LIST
56140: LIST
56141: PUSH
56142: LD_INT 1
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: PUSH
56152: LD_INT 0
56154: PUSH
56155: LD_INT 2
56157: PUSH
56158: EMPTY
56159: LIST
56160: LIST
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: LD_INT 1
56168: PUSH
56169: EMPTY
56170: LIST
56171: LIST
56172: PUSH
56173: LD_INT 2
56175: NEG
56176: PUSH
56177: LD_INT 0
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 2
56186: NEG
56187: PUSH
56188: LD_INT 1
56190: NEG
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: PUSH
56196: LD_INT 2
56198: NEG
56199: PUSH
56200: LD_INT 2
56202: NEG
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: LIST
56215: LIST
56216: LIST
56217: LIST
56218: LIST
56219: LIST
56220: LIST
56221: LIST
56222: LIST
56223: LIST
56224: LIST
56225: LIST
56226: LIST
56227: LIST
56228: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56229: LD_ADDR_VAR 0 59
56233: PUSH
56234: LD_INT 0
56236: PUSH
56237: LD_INT 0
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 0
56246: PUSH
56247: LD_INT 1
56249: NEG
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: LD_INT 1
56257: PUSH
56258: LD_INT 0
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: LD_INT 1
56267: PUSH
56268: LD_INT 1
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: PUSH
56275: LD_INT 0
56277: PUSH
56278: LD_INT 1
56280: PUSH
56281: EMPTY
56282: LIST
56283: LIST
56284: PUSH
56285: LD_INT 1
56287: NEG
56288: PUSH
56289: LD_INT 0
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: LD_INT 1
56298: NEG
56299: PUSH
56300: LD_INT 1
56302: NEG
56303: PUSH
56304: EMPTY
56305: LIST
56306: LIST
56307: PUSH
56308: EMPTY
56309: LIST
56310: LIST
56311: LIST
56312: LIST
56313: LIST
56314: LIST
56315: LIST
56316: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56317: LD_ADDR_VAR 0 60
56321: PUSH
56322: LD_INT 0
56324: PUSH
56325: LD_INT 0
56327: PUSH
56328: EMPTY
56329: LIST
56330: LIST
56331: PUSH
56332: LD_INT 0
56334: PUSH
56335: LD_INT 1
56337: NEG
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: PUSH
56343: LD_INT 1
56345: PUSH
56346: LD_INT 0
56348: PUSH
56349: EMPTY
56350: LIST
56351: LIST
56352: PUSH
56353: LD_INT 1
56355: PUSH
56356: LD_INT 1
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: PUSH
56363: LD_INT 0
56365: PUSH
56366: LD_INT 1
56368: PUSH
56369: EMPTY
56370: LIST
56371: LIST
56372: PUSH
56373: LD_INT 1
56375: NEG
56376: PUSH
56377: LD_INT 0
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: PUSH
56384: LD_INT 1
56386: NEG
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: EMPTY
56393: LIST
56394: LIST
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56405: LD_ADDR_VAR 0 61
56409: PUSH
56410: LD_INT 0
56412: PUSH
56413: LD_INT 0
56415: PUSH
56416: EMPTY
56417: LIST
56418: LIST
56419: PUSH
56420: LD_INT 0
56422: PUSH
56423: LD_INT 1
56425: NEG
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: PUSH
56431: LD_INT 1
56433: PUSH
56434: LD_INT 0
56436: PUSH
56437: EMPTY
56438: LIST
56439: LIST
56440: PUSH
56441: LD_INT 1
56443: PUSH
56444: LD_INT 1
56446: PUSH
56447: EMPTY
56448: LIST
56449: LIST
56450: PUSH
56451: LD_INT 0
56453: PUSH
56454: LD_INT 1
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 1
56463: NEG
56464: PUSH
56465: LD_INT 0
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: PUSH
56472: LD_INT 1
56474: NEG
56475: PUSH
56476: LD_INT 1
56478: NEG
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: EMPTY
56485: LIST
56486: LIST
56487: LIST
56488: LIST
56489: LIST
56490: LIST
56491: LIST
56492: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56493: LD_ADDR_VAR 0 62
56497: PUSH
56498: LD_INT 0
56500: PUSH
56501: LD_INT 0
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: LD_INT 0
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: PUSH
56515: EMPTY
56516: LIST
56517: LIST
56518: PUSH
56519: LD_INT 1
56521: PUSH
56522: LD_INT 0
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: PUSH
56529: LD_INT 1
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: EMPTY
56536: LIST
56537: LIST
56538: PUSH
56539: LD_INT 0
56541: PUSH
56542: LD_INT 1
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: PUSH
56549: LD_INT 1
56551: NEG
56552: PUSH
56553: LD_INT 0
56555: PUSH
56556: EMPTY
56557: LIST
56558: LIST
56559: PUSH
56560: LD_INT 1
56562: NEG
56563: PUSH
56564: LD_INT 1
56566: NEG
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: LIST
56579: LIST
56580: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56581: LD_ADDR_VAR 0 63
56585: PUSH
56586: LD_INT 0
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 0
56598: PUSH
56599: LD_INT 1
56601: NEG
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: PUSH
56607: LD_INT 1
56609: PUSH
56610: LD_INT 0
56612: PUSH
56613: EMPTY
56614: LIST
56615: LIST
56616: PUSH
56617: LD_INT 1
56619: PUSH
56620: LD_INT 1
56622: PUSH
56623: EMPTY
56624: LIST
56625: LIST
56626: PUSH
56627: LD_INT 0
56629: PUSH
56630: LD_INT 1
56632: PUSH
56633: EMPTY
56634: LIST
56635: LIST
56636: PUSH
56637: LD_INT 1
56639: NEG
56640: PUSH
56641: LD_INT 0
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 1
56650: NEG
56651: PUSH
56652: LD_INT 1
56654: NEG
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: EMPTY
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56669: LD_ADDR_VAR 0 64
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: PUSH
56684: LD_INT 0
56686: PUSH
56687: LD_INT 1
56689: NEG
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 0
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 1
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 0
56717: PUSH
56718: LD_INT 1
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: PUSH
56725: LD_INT 1
56727: NEG
56728: PUSH
56729: LD_INT 0
56731: PUSH
56732: EMPTY
56733: LIST
56734: LIST
56735: PUSH
56736: LD_INT 1
56738: NEG
56739: PUSH
56740: LD_INT 1
56742: NEG
56743: PUSH
56744: EMPTY
56745: LIST
56746: LIST
56747: PUSH
56748: EMPTY
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: ST_TO_ADDR
// end ; 1 :
56757: GO 62654
56759: LD_INT 1
56761: DOUBLE
56762: EQUAL
56763: IFTRUE 56767
56765: GO 59390
56767: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
56768: LD_ADDR_VAR 0 11
56772: PUSH
56773: LD_INT 1
56775: NEG
56776: PUSH
56777: LD_INT 3
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 0
56787: PUSH
56788: LD_INT 3
56790: NEG
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_INT 1
56798: PUSH
56799: LD_INT 2
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: EMPTY
56808: LIST
56809: LIST
56810: LIST
56811: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
56812: LD_ADDR_VAR 0 12
56816: PUSH
56817: LD_INT 2
56819: PUSH
56820: LD_INT 1
56822: NEG
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: LD_INT 3
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 3
56840: PUSH
56841: LD_INT 1
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
56853: LD_ADDR_VAR 0 13
56857: PUSH
56858: LD_INT 3
56860: PUSH
56861: LD_INT 2
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: LD_INT 3
56870: PUSH
56871: LD_INT 3
56873: PUSH
56874: EMPTY
56875: LIST
56876: LIST
56877: PUSH
56878: LD_INT 2
56880: PUSH
56881: LD_INT 3
56883: PUSH
56884: EMPTY
56885: LIST
56886: LIST
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
56893: LD_ADDR_VAR 0 14
56897: PUSH
56898: LD_INT 1
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 0
56910: PUSH
56911: LD_INT 3
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: LD_INT 2
56924: PUSH
56925: EMPTY
56926: LIST
56927: LIST
56928: PUSH
56929: EMPTY
56930: LIST
56931: LIST
56932: LIST
56933: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56934: LD_ADDR_VAR 0 15
56938: PUSH
56939: LD_INT 2
56941: NEG
56942: PUSH
56943: LD_INT 1
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 3
56952: NEG
56953: PUSH
56954: LD_INT 0
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 3
56963: NEG
56964: PUSH
56965: LD_INT 1
56967: NEG
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: PUSH
56973: EMPTY
56974: LIST
56975: LIST
56976: LIST
56977: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56978: LD_ADDR_VAR 0 16
56982: PUSH
56983: LD_INT 2
56985: NEG
56986: PUSH
56987: LD_INT 3
56989: NEG
56990: PUSH
56991: EMPTY
56992: LIST
56993: LIST
56994: PUSH
56995: LD_INT 3
56997: NEG
56998: PUSH
56999: LD_INT 2
57001: NEG
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PUSH
57007: LD_INT 3
57009: NEG
57010: PUSH
57011: LD_INT 3
57013: NEG
57014: PUSH
57015: EMPTY
57016: LIST
57017: LIST
57018: PUSH
57019: EMPTY
57020: LIST
57021: LIST
57022: LIST
57023: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57024: LD_ADDR_VAR 0 17
57028: PUSH
57029: LD_INT 1
57031: NEG
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: EMPTY
57038: LIST
57039: LIST
57040: PUSH
57041: LD_INT 0
57043: PUSH
57044: LD_INT 3
57046: NEG
57047: PUSH
57048: EMPTY
57049: LIST
57050: LIST
57051: PUSH
57052: LD_INT 1
57054: PUSH
57055: LD_INT 2
57057: NEG
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: EMPTY
57064: LIST
57065: LIST
57066: LIST
57067: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57068: LD_ADDR_VAR 0 18
57072: PUSH
57073: LD_INT 2
57075: PUSH
57076: LD_INT 1
57078: NEG
57079: PUSH
57080: EMPTY
57081: LIST
57082: LIST
57083: PUSH
57084: LD_INT 3
57086: PUSH
57087: LD_INT 0
57089: PUSH
57090: EMPTY
57091: LIST
57092: LIST
57093: PUSH
57094: LD_INT 3
57096: PUSH
57097: LD_INT 1
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: LIST
57108: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57109: LD_ADDR_VAR 0 19
57113: PUSH
57114: LD_INT 3
57116: PUSH
57117: LD_INT 2
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 3
57126: PUSH
57127: LD_INT 3
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: LD_INT 2
57136: PUSH
57137: LD_INT 3
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: PUSH
57144: EMPTY
57145: LIST
57146: LIST
57147: LIST
57148: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57149: LD_ADDR_VAR 0 20
57153: PUSH
57154: LD_INT 1
57156: PUSH
57157: LD_INT 3
57159: PUSH
57160: EMPTY
57161: LIST
57162: LIST
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: PUSH
57174: LD_INT 1
57176: NEG
57177: PUSH
57178: LD_INT 2
57180: PUSH
57181: EMPTY
57182: LIST
57183: LIST
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: LIST
57189: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57190: LD_ADDR_VAR 0 21
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 1
57201: PUSH
57202: EMPTY
57203: LIST
57204: LIST
57205: PUSH
57206: LD_INT 3
57208: NEG
57209: PUSH
57210: LD_INT 0
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: PUSH
57217: LD_INT 3
57219: NEG
57220: PUSH
57221: LD_INT 1
57223: NEG
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: LIST
57233: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57234: LD_ADDR_VAR 0 22
57238: PUSH
57239: LD_INT 2
57241: NEG
57242: PUSH
57243: LD_INT 3
57245: NEG
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PUSH
57251: LD_INT 3
57253: NEG
57254: PUSH
57255: LD_INT 2
57257: NEG
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 3
57265: NEG
57266: PUSH
57267: LD_INT 3
57269: NEG
57270: PUSH
57271: EMPTY
57272: LIST
57273: LIST
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: LIST
57279: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57280: LD_ADDR_VAR 0 23
57284: PUSH
57285: LD_INT 0
57287: PUSH
57288: LD_INT 3
57290: NEG
57291: PUSH
57292: EMPTY
57293: LIST
57294: LIST
57295: PUSH
57296: LD_INT 1
57298: NEG
57299: PUSH
57300: LD_INT 4
57302: NEG
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 3
57313: NEG
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: PUSH
57319: EMPTY
57320: LIST
57321: LIST
57322: LIST
57323: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57324: LD_ADDR_VAR 0 24
57328: PUSH
57329: LD_INT 3
57331: PUSH
57332: LD_INT 0
57334: PUSH
57335: EMPTY
57336: LIST
57337: LIST
57338: PUSH
57339: LD_INT 3
57341: PUSH
57342: LD_INT 1
57344: NEG
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 4
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57365: LD_ADDR_VAR 0 25
57369: PUSH
57370: LD_INT 3
57372: PUSH
57373: LD_INT 3
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 4
57382: PUSH
57383: LD_INT 3
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PUSH
57390: LD_INT 3
57392: PUSH
57393: LD_INT 4
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: EMPTY
57401: LIST
57402: LIST
57403: LIST
57404: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57405: LD_ADDR_VAR 0 26
57409: PUSH
57410: LD_INT 0
57412: PUSH
57413: LD_INT 3
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 1
57422: PUSH
57423: LD_INT 4
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 3
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57446: LD_ADDR_VAR 0 27
57450: PUSH
57451: LD_INT 3
57453: NEG
57454: PUSH
57455: LD_INT 0
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: PUSH
57462: LD_INT 3
57464: NEG
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: EMPTY
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 4
57475: NEG
57476: PUSH
57477: LD_INT 1
57479: NEG
57480: PUSH
57481: EMPTY
57482: LIST
57483: LIST
57484: PUSH
57485: EMPTY
57486: LIST
57487: LIST
57488: LIST
57489: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
57490: LD_ADDR_VAR 0 28
57494: PUSH
57495: LD_INT 3
57497: NEG
57498: PUSH
57499: LD_INT 3
57501: NEG
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: LD_INT 4
57513: NEG
57514: PUSH
57515: EMPTY
57516: LIST
57517: LIST
57518: PUSH
57519: LD_INT 4
57521: NEG
57522: PUSH
57523: LD_INT 3
57525: NEG
57526: PUSH
57527: EMPTY
57528: LIST
57529: LIST
57530: PUSH
57531: EMPTY
57532: LIST
57533: LIST
57534: LIST
57535: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
57536: LD_ADDR_VAR 0 29
57540: PUSH
57541: LD_INT 1
57543: NEG
57544: PUSH
57545: LD_INT 3
57547: NEG
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: PUSH
57553: LD_INT 0
57555: PUSH
57556: LD_INT 3
57558: NEG
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 1
57566: PUSH
57567: LD_INT 2
57569: NEG
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: PUSH
57575: LD_INT 1
57577: NEG
57578: PUSH
57579: LD_INT 4
57581: NEG
57582: PUSH
57583: EMPTY
57584: LIST
57585: LIST
57586: PUSH
57587: LD_INT 0
57589: PUSH
57590: LD_INT 4
57592: NEG
57593: PUSH
57594: EMPTY
57595: LIST
57596: LIST
57597: PUSH
57598: LD_INT 1
57600: PUSH
57601: LD_INT 3
57603: NEG
57604: PUSH
57605: EMPTY
57606: LIST
57607: LIST
57608: PUSH
57609: LD_INT 1
57611: NEG
57612: PUSH
57613: LD_INT 5
57615: NEG
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 0
57623: PUSH
57624: LD_INT 5
57626: NEG
57627: PUSH
57628: EMPTY
57629: LIST
57630: LIST
57631: PUSH
57632: LD_INT 1
57634: PUSH
57635: LD_INT 4
57637: NEG
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: PUSH
57643: LD_INT 1
57645: NEG
57646: PUSH
57647: LD_INT 6
57649: NEG
57650: PUSH
57651: EMPTY
57652: LIST
57653: LIST
57654: PUSH
57655: LD_INT 0
57657: PUSH
57658: LD_INT 6
57660: NEG
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 1
57668: PUSH
57669: LD_INT 5
57671: NEG
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: EMPTY
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
57691: LD_ADDR_VAR 0 30
57695: PUSH
57696: LD_INT 2
57698: PUSH
57699: LD_INT 1
57701: NEG
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 3
57719: PUSH
57720: LD_INT 1
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 3
57729: PUSH
57730: LD_INT 1
57732: NEG
57733: PUSH
57734: EMPTY
57735: LIST
57736: LIST
57737: PUSH
57738: LD_INT 4
57740: PUSH
57741: LD_INT 0
57743: PUSH
57744: EMPTY
57745: LIST
57746: LIST
57747: PUSH
57748: LD_INT 4
57750: PUSH
57751: LD_INT 1
57753: PUSH
57754: EMPTY
57755: LIST
57756: LIST
57757: PUSH
57758: LD_INT 4
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: EMPTY
57766: LIST
57767: LIST
57768: PUSH
57769: LD_INT 5
57771: PUSH
57772: LD_INT 0
57774: PUSH
57775: EMPTY
57776: LIST
57777: LIST
57778: PUSH
57779: LD_INT 5
57781: PUSH
57782: LD_INT 1
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: PUSH
57789: LD_INT 5
57791: PUSH
57792: LD_INT 1
57794: NEG
57795: PUSH
57796: EMPTY
57797: LIST
57798: LIST
57799: PUSH
57800: LD_INT 6
57802: PUSH
57803: LD_INT 0
57805: PUSH
57806: EMPTY
57807: LIST
57808: LIST
57809: PUSH
57810: LD_INT 6
57812: PUSH
57813: LD_INT 1
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: LIST
57830: LIST
57831: LIST
57832: LIST
57833: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
57834: LD_ADDR_VAR 0 31
57838: PUSH
57839: LD_INT 3
57841: PUSH
57842: LD_INT 2
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: LD_INT 3
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: EMPTY
57856: LIST
57857: LIST
57858: PUSH
57859: LD_INT 2
57861: PUSH
57862: LD_INT 3
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 4
57871: PUSH
57872: LD_INT 3
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 4
57881: PUSH
57882: LD_INT 4
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: LD_INT 3
57891: PUSH
57892: LD_INT 4
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: PUSH
57899: LD_INT 5
57901: PUSH
57902: LD_INT 4
57904: PUSH
57905: EMPTY
57906: LIST
57907: LIST
57908: PUSH
57909: LD_INT 5
57911: PUSH
57912: LD_INT 5
57914: PUSH
57915: EMPTY
57916: LIST
57917: LIST
57918: PUSH
57919: LD_INT 4
57921: PUSH
57922: LD_INT 5
57924: PUSH
57925: EMPTY
57926: LIST
57927: LIST
57928: PUSH
57929: LD_INT 6
57931: PUSH
57932: LD_INT 5
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 6
57941: PUSH
57942: LD_INT 6
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 5
57951: PUSH
57952: LD_INT 6
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: EMPTY
57960: LIST
57961: LIST
57962: LIST
57963: LIST
57964: LIST
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
57973: LD_ADDR_VAR 0 32
57977: PUSH
57978: LD_INT 1
57980: PUSH
57981: LD_INT 3
57983: PUSH
57984: EMPTY
57985: LIST
57986: LIST
57987: PUSH
57988: LD_INT 0
57990: PUSH
57991: LD_INT 3
57993: PUSH
57994: EMPTY
57995: LIST
57996: LIST
57997: PUSH
57998: LD_INT 1
58000: NEG
58001: PUSH
58002: LD_INT 2
58004: PUSH
58005: EMPTY
58006: LIST
58007: LIST
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: LD_INT 4
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: PUSH
58019: LD_INT 0
58021: PUSH
58022: LD_INT 4
58024: PUSH
58025: EMPTY
58026: LIST
58027: LIST
58028: PUSH
58029: LD_INT 1
58031: NEG
58032: PUSH
58033: LD_INT 3
58035: PUSH
58036: EMPTY
58037: LIST
58038: LIST
58039: PUSH
58040: LD_INT 1
58042: PUSH
58043: LD_INT 5
58045: PUSH
58046: EMPTY
58047: LIST
58048: LIST
58049: PUSH
58050: LD_INT 0
58052: PUSH
58053: LD_INT 5
58055: PUSH
58056: EMPTY
58057: LIST
58058: LIST
58059: PUSH
58060: LD_INT 1
58062: NEG
58063: PUSH
58064: LD_INT 4
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: PUSH
58071: LD_INT 1
58073: PUSH
58074: LD_INT 6
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 0
58083: PUSH
58084: LD_INT 6
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: PUSH
58095: LD_INT 5
58097: PUSH
58098: EMPTY
58099: LIST
58100: LIST
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: LIST
58109: LIST
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: LIST
58115: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58116: LD_ADDR_VAR 0 33
58120: PUSH
58121: LD_INT 2
58123: NEG
58124: PUSH
58125: LD_INT 1
58127: PUSH
58128: EMPTY
58129: LIST
58130: LIST
58131: PUSH
58132: LD_INT 3
58134: NEG
58135: PUSH
58136: LD_INT 0
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 3
58145: NEG
58146: PUSH
58147: LD_INT 1
58149: NEG
58150: PUSH
58151: EMPTY
58152: LIST
58153: LIST
58154: PUSH
58155: LD_INT 3
58157: NEG
58158: PUSH
58159: LD_INT 1
58161: PUSH
58162: EMPTY
58163: LIST
58164: LIST
58165: PUSH
58166: LD_INT 4
58168: NEG
58169: PUSH
58170: LD_INT 0
58172: PUSH
58173: EMPTY
58174: LIST
58175: LIST
58176: PUSH
58177: LD_INT 4
58179: NEG
58180: PUSH
58181: LD_INT 1
58183: NEG
58184: PUSH
58185: EMPTY
58186: LIST
58187: LIST
58188: PUSH
58189: LD_INT 4
58191: NEG
58192: PUSH
58193: LD_INT 1
58195: PUSH
58196: EMPTY
58197: LIST
58198: LIST
58199: PUSH
58200: LD_INT 5
58202: NEG
58203: PUSH
58204: LD_INT 0
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 5
58213: NEG
58214: PUSH
58215: LD_INT 1
58217: NEG
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: PUSH
58223: LD_INT 5
58225: NEG
58226: PUSH
58227: LD_INT 1
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PUSH
58234: LD_INT 6
58236: NEG
58237: PUSH
58238: LD_INT 0
58240: PUSH
58241: EMPTY
58242: LIST
58243: LIST
58244: PUSH
58245: LD_INT 6
58247: NEG
58248: PUSH
58249: LD_INT 1
58251: NEG
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: EMPTY
58258: LIST
58259: LIST
58260: LIST
58261: LIST
58262: LIST
58263: LIST
58264: LIST
58265: LIST
58266: LIST
58267: LIST
58268: LIST
58269: LIST
58270: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58271: LD_ADDR_VAR 0 34
58275: PUSH
58276: LD_INT 2
58278: NEG
58279: PUSH
58280: LD_INT 3
58282: NEG
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 3
58290: NEG
58291: PUSH
58292: LD_INT 2
58294: NEG
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: PUSH
58300: LD_INT 3
58302: NEG
58303: PUSH
58304: LD_INT 3
58306: NEG
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: PUSH
58312: LD_INT 3
58314: NEG
58315: PUSH
58316: LD_INT 4
58318: NEG
58319: PUSH
58320: EMPTY
58321: LIST
58322: LIST
58323: PUSH
58324: LD_INT 4
58326: NEG
58327: PUSH
58328: LD_INT 3
58330: NEG
58331: PUSH
58332: EMPTY
58333: LIST
58334: LIST
58335: PUSH
58336: LD_INT 4
58338: NEG
58339: PUSH
58340: LD_INT 4
58342: NEG
58343: PUSH
58344: EMPTY
58345: LIST
58346: LIST
58347: PUSH
58348: LD_INT 4
58350: NEG
58351: PUSH
58352: LD_INT 5
58354: NEG
58355: PUSH
58356: EMPTY
58357: LIST
58358: LIST
58359: PUSH
58360: LD_INT 5
58362: NEG
58363: PUSH
58364: LD_INT 4
58366: NEG
58367: PUSH
58368: EMPTY
58369: LIST
58370: LIST
58371: PUSH
58372: LD_INT 5
58374: NEG
58375: PUSH
58376: LD_INT 5
58378: NEG
58379: PUSH
58380: EMPTY
58381: LIST
58382: LIST
58383: PUSH
58384: LD_INT 5
58386: NEG
58387: PUSH
58388: LD_INT 6
58390: NEG
58391: PUSH
58392: EMPTY
58393: LIST
58394: LIST
58395: PUSH
58396: LD_INT 6
58398: NEG
58399: PUSH
58400: LD_INT 5
58402: NEG
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PUSH
58408: LD_INT 6
58410: NEG
58411: PUSH
58412: LD_INT 6
58414: NEG
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: LIST
58431: LIST
58432: LIST
58433: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58434: LD_ADDR_VAR 0 41
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 2
58444: NEG
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: PUSH
58450: LD_INT 1
58452: NEG
58453: PUSH
58454: LD_INT 3
58456: NEG
58457: PUSH
58458: EMPTY
58459: LIST
58460: LIST
58461: PUSH
58462: LD_INT 1
58464: PUSH
58465: LD_INT 2
58467: NEG
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: EMPTY
58474: LIST
58475: LIST
58476: LIST
58477: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
58478: LD_ADDR_VAR 0 42
58482: PUSH
58483: LD_INT 2
58485: PUSH
58486: LD_INT 0
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: PUSH
58493: LD_INT 2
58495: PUSH
58496: LD_INT 1
58498: NEG
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: PUSH
58504: LD_INT 3
58506: PUSH
58507: LD_INT 1
58509: PUSH
58510: EMPTY
58511: LIST
58512: LIST
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: LIST
58518: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
58519: LD_ADDR_VAR 0 43
58523: PUSH
58524: LD_INT 2
58526: PUSH
58527: LD_INT 2
58529: PUSH
58530: EMPTY
58531: LIST
58532: LIST
58533: PUSH
58534: LD_INT 3
58536: PUSH
58537: LD_INT 2
58539: PUSH
58540: EMPTY
58541: LIST
58542: LIST
58543: PUSH
58544: LD_INT 2
58546: PUSH
58547: LD_INT 3
58549: PUSH
58550: EMPTY
58551: LIST
58552: LIST
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
58559: LD_ADDR_VAR 0 44
58563: PUSH
58564: LD_INT 0
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 1
58576: PUSH
58577: LD_INT 3
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: PUSH
58584: LD_INT 1
58586: NEG
58587: PUSH
58588: LD_INT 2
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PUSH
58595: EMPTY
58596: LIST
58597: LIST
58598: LIST
58599: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
58600: LD_ADDR_VAR 0 45
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: LD_INT 0
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 2
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: LD_INT 3
58629: NEG
58630: PUSH
58631: LD_INT 1
58633: NEG
58634: PUSH
58635: EMPTY
58636: LIST
58637: LIST
58638: PUSH
58639: EMPTY
58640: LIST
58641: LIST
58642: LIST
58643: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
58644: LD_ADDR_VAR 0 46
58648: PUSH
58649: LD_INT 2
58651: NEG
58652: PUSH
58653: LD_INT 2
58655: NEG
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 2
58663: NEG
58664: PUSH
58665: LD_INT 3
58667: NEG
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: LD_INT 2
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: EMPTY
58686: LIST
58687: LIST
58688: LIST
58689: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
58690: LD_ADDR_VAR 0 47
58694: PUSH
58695: LD_INT 2
58697: NEG
58698: PUSH
58699: LD_INT 3
58701: NEG
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 1
58709: NEG
58710: PUSH
58711: LD_INT 3
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
58723: LD_ADDR_VAR 0 48
58727: PUSH
58728: LD_INT 1
58730: PUSH
58731: LD_INT 2
58733: NEG
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: PUSH
58739: LD_INT 2
58741: PUSH
58742: LD_INT 1
58744: NEG
58745: PUSH
58746: EMPTY
58747: LIST
58748: LIST
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
58754: LD_ADDR_VAR 0 49
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 3
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
58783: LD_ADDR_VAR 0 50
58787: PUSH
58788: LD_INT 2
58790: PUSH
58791: LD_INT 3
58793: PUSH
58794: EMPTY
58795: LIST
58796: LIST
58797: PUSH
58798: LD_INT 1
58800: PUSH
58801: LD_INT 3
58803: PUSH
58804: EMPTY
58805: LIST
58806: LIST
58807: PUSH
58808: EMPTY
58809: LIST
58810: LIST
58811: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
58812: LD_ADDR_VAR 0 51
58816: PUSH
58817: LD_INT 1
58819: NEG
58820: PUSH
58821: LD_INT 2
58823: PUSH
58824: EMPTY
58825: LIST
58826: LIST
58827: PUSH
58828: LD_INT 2
58830: NEG
58831: PUSH
58832: LD_INT 1
58834: PUSH
58835: EMPTY
58836: LIST
58837: LIST
58838: PUSH
58839: EMPTY
58840: LIST
58841: LIST
58842: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
58843: LD_ADDR_VAR 0 52
58847: PUSH
58848: LD_INT 3
58850: NEG
58851: PUSH
58852: LD_INT 1
58854: NEG
58855: PUSH
58856: EMPTY
58857: LIST
58858: LIST
58859: PUSH
58860: LD_INT 3
58862: NEG
58863: PUSH
58864: LD_INT 2
58866: NEG
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: EMPTY
58873: LIST
58874: LIST
58875: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
58876: LD_ADDR_VAR 0 53
58880: PUSH
58881: LD_INT 1
58883: NEG
58884: PUSH
58885: LD_INT 3
58887: NEG
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: PUSH
58893: LD_INT 0
58895: PUSH
58896: LD_INT 3
58898: NEG
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: PUSH
58904: LD_INT 1
58906: PUSH
58907: LD_INT 2
58909: NEG
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
58920: LD_ADDR_VAR 0 54
58924: PUSH
58925: LD_INT 2
58927: PUSH
58928: LD_INT 1
58930: NEG
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 3
58938: PUSH
58939: LD_INT 0
58941: PUSH
58942: EMPTY
58943: LIST
58944: LIST
58945: PUSH
58946: LD_INT 3
58948: PUSH
58949: LD_INT 1
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: EMPTY
58957: LIST
58958: LIST
58959: LIST
58960: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
58961: LD_ADDR_VAR 0 55
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: LD_INT 2
58971: PUSH
58972: EMPTY
58973: LIST
58974: LIST
58975: PUSH
58976: LD_INT 3
58978: PUSH
58979: LD_INT 3
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: LD_INT 3
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: LIST
59000: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59001: LD_ADDR_VAR 0 56
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: LD_INT 3
59011: PUSH
59012: EMPTY
59013: LIST
59014: LIST
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: LD_INT 3
59021: PUSH
59022: EMPTY
59023: LIST
59024: LIST
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: LD_INT 2
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59042: LD_ADDR_VAR 0 57
59046: PUSH
59047: LD_INT 2
59049: NEG
59050: PUSH
59051: LD_INT 1
59053: PUSH
59054: EMPTY
59055: LIST
59056: LIST
59057: PUSH
59058: LD_INT 3
59060: NEG
59061: PUSH
59062: LD_INT 0
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 3
59071: NEG
59072: PUSH
59073: LD_INT 1
59075: NEG
59076: PUSH
59077: EMPTY
59078: LIST
59079: LIST
59080: PUSH
59081: EMPTY
59082: LIST
59083: LIST
59084: LIST
59085: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59086: LD_ADDR_VAR 0 58
59090: PUSH
59091: LD_INT 2
59093: NEG
59094: PUSH
59095: LD_INT 3
59097: NEG
59098: PUSH
59099: EMPTY
59100: LIST
59101: LIST
59102: PUSH
59103: LD_INT 3
59105: NEG
59106: PUSH
59107: LD_INT 2
59109: NEG
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 3
59117: NEG
59118: PUSH
59119: LD_INT 3
59121: NEG
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: LIST
59131: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59132: LD_ADDR_VAR 0 59
59136: PUSH
59137: LD_INT 1
59139: NEG
59140: PUSH
59141: LD_INT 2
59143: NEG
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 0
59151: PUSH
59152: LD_INT 2
59154: NEG
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: PUSH
59160: LD_INT 1
59162: PUSH
59163: LD_INT 1
59165: NEG
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: LIST
59175: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59176: LD_ADDR_VAR 0 60
59180: PUSH
59181: LD_INT 1
59183: PUSH
59184: LD_INT 1
59186: NEG
59187: PUSH
59188: EMPTY
59189: LIST
59190: LIST
59191: PUSH
59192: LD_INT 2
59194: PUSH
59195: LD_INT 0
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: PUSH
59202: LD_INT 2
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: EMPTY
59213: LIST
59214: LIST
59215: LIST
59216: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59217: LD_ADDR_VAR 0 61
59221: PUSH
59222: LD_INT 2
59224: PUSH
59225: LD_INT 1
59227: PUSH
59228: EMPTY
59229: LIST
59230: LIST
59231: PUSH
59232: LD_INT 2
59234: PUSH
59235: LD_INT 2
59237: PUSH
59238: EMPTY
59239: LIST
59240: LIST
59241: PUSH
59242: LD_INT 1
59244: PUSH
59245: LD_INT 2
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: PUSH
59252: EMPTY
59253: LIST
59254: LIST
59255: LIST
59256: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59257: LD_ADDR_VAR 0 62
59261: PUSH
59262: LD_INT 1
59264: PUSH
59265: LD_INT 2
59267: PUSH
59268: EMPTY
59269: LIST
59270: LIST
59271: PUSH
59272: LD_INT 0
59274: PUSH
59275: LD_INT 2
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 1
59284: NEG
59285: PUSH
59286: LD_INT 1
59288: PUSH
59289: EMPTY
59290: LIST
59291: LIST
59292: PUSH
59293: EMPTY
59294: LIST
59295: LIST
59296: LIST
59297: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59298: LD_ADDR_VAR 0 63
59302: PUSH
59303: LD_INT 1
59305: NEG
59306: PUSH
59307: LD_INT 1
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: NEG
59317: PUSH
59318: LD_INT 0
59320: PUSH
59321: EMPTY
59322: LIST
59323: LIST
59324: PUSH
59325: LD_INT 2
59327: NEG
59328: PUSH
59329: LD_INT 1
59331: NEG
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: EMPTY
59338: LIST
59339: LIST
59340: LIST
59341: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59342: LD_ADDR_VAR 0 64
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: LD_INT 2
59353: NEG
59354: PUSH
59355: EMPTY
59356: LIST
59357: LIST
59358: PUSH
59359: LD_INT 2
59361: NEG
59362: PUSH
59363: LD_INT 1
59365: NEG
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: PUSH
59371: LD_INT 2
59373: NEG
59374: PUSH
59375: LD_INT 2
59377: NEG
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: ST_TO_ADDR
// end ; 2 :
59388: GO 62654
59390: LD_INT 2
59392: DOUBLE
59393: EQUAL
59394: IFTRUE 59398
59396: GO 62653
59398: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59399: LD_ADDR_VAR 0 29
59403: PUSH
59404: LD_INT 4
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 4
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 5
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 5
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 4
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 3
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: PUSH
59465: LD_INT 3
59467: PUSH
59468: LD_INT 1
59470: NEG
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: LD_INT 2
59481: NEG
59482: PUSH
59483: EMPTY
59484: LIST
59485: LIST
59486: PUSH
59487: LD_INT 5
59489: PUSH
59490: LD_INT 2
59492: PUSH
59493: EMPTY
59494: LIST
59495: LIST
59496: PUSH
59497: LD_INT 3
59499: PUSH
59500: LD_INT 3
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: LD_INT 3
59509: PUSH
59510: LD_INT 2
59512: PUSH
59513: EMPTY
59514: LIST
59515: LIST
59516: PUSH
59517: LD_INT 4
59519: PUSH
59520: LD_INT 3
59522: PUSH
59523: EMPTY
59524: LIST
59525: LIST
59526: PUSH
59527: LD_INT 4
59529: PUSH
59530: LD_INT 4
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: PUSH
59537: LD_INT 3
59539: PUSH
59540: LD_INT 4
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: PUSH
59547: LD_INT 2
59549: PUSH
59550: LD_INT 3
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: PUSH
59557: LD_INT 2
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: LD_INT 4
59569: PUSH
59570: LD_INT 2
59572: PUSH
59573: EMPTY
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 2
59579: PUSH
59580: LD_INT 4
59582: PUSH
59583: EMPTY
59584: LIST
59585: LIST
59586: PUSH
59587: LD_INT 0
59589: PUSH
59590: LD_INT 4
59592: PUSH
59593: EMPTY
59594: LIST
59595: LIST
59596: PUSH
59597: LD_INT 0
59599: PUSH
59600: LD_INT 3
59602: PUSH
59603: EMPTY
59604: LIST
59605: LIST
59606: PUSH
59607: LD_INT 1
59609: PUSH
59610: LD_INT 4
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: PUSH
59617: LD_INT 1
59619: PUSH
59620: LD_INT 5
59622: PUSH
59623: EMPTY
59624: LIST
59625: LIST
59626: PUSH
59627: LD_INT 0
59629: PUSH
59630: LD_INT 5
59632: PUSH
59633: EMPTY
59634: LIST
59635: LIST
59636: PUSH
59637: LD_INT 1
59639: NEG
59640: PUSH
59641: LD_INT 4
59643: PUSH
59644: EMPTY
59645: LIST
59646: LIST
59647: PUSH
59648: LD_INT 1
59650: NEG
59651: PUSH
59652: LD_INT 3
59654: PUSH
59655: EMPTY
59656: LIST
59657: LIST
59658: PUSH
59659: LD_INT 2
59661: PUSH
59662: LD_INT 5
59664: PUSH
59665: EMPTY
59666: LIST
59667: LIST
59668: PUSH
59669: LD_INT 2
59671: NEG
59672: PUSH
59673: LD_INT 3
59675: PUSH
59676: EMPTY
59677: LIST
59678: LIST
59679: PUSH
59680: LD_INT 3
59682: NEG
59683: PUSH
59684: LD_INT 0
59686: PUSH
59687: EMPTY
59688: LIST
59689: LIST
59690: PUSH
59691: LD_INT 3
59693: NEG
59694: PUSH
59695: LD_INT 1
59697: NEG
59698: PUSH
59699: EMPTY
59700: LIST
59701: LIST
59702: PUSH
59703: LD_INT 2
59705: NEG
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: EMPTY
59711: LIST
59712: LIST
59713: PUSH
59714: LD_INT 2
59716: NEG
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: EMPTY
59722: LIST
59723: LIST
59724: PUSH
59725: LD_INT 3
59727: NEG
59728: PUSH
59729: LD_INT 1
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: PUSH
59736: LD_INT 4
59738: NEG
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: EMPTY
59744: LIST
59745: LIST
59746: PUSH
59747: LD_INT 4
59749: NEG
59750: PUSH
59751: LD_INT 1
59753: NEG
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 4
59761: NEG
59762: PUSH
59763: LD_INT 2
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: LD_INT 2
59773: NEG
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 4
59784: NEG
59785: PUSH
59786: LD_INT 4
59788: NEG
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PUSH
59794: LD_INT 4
59796: NEG
59797: PUSH
59798: LD_INT 5
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 3
59808: NEG
59809: PUSH
59810: LD_INT 4
59812: NEG
59813: PUSH
59814: EMPTY
59815: LIST
59816: LIST
59817: PUSH
59818: LD_INT 3
59820: NEG
59821: PUSH
59822: LD_INT 3
59824: NEG
59825: PUSH
59826: EMPTY
59827: LIST
59828: LIST
59829: PUSH
59830: LD_INT 4
59832: NEG
59833: PUSH
59834: LD_INT 3
59836: NEG
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: PUSH
59842: LD_INT 5
59844: NEG
59845: PUSH
59846: LD_INT 4
59848: NEG
59849: PUSH
59850: EMPTY
59851: LIST
59852: LIST
59853: PUSH
59854: LD_INT 5
59856: NEG
59857: PUSH
59858: LD_INT 5
59860: NEG
59861: PUSH
59862: EMPTY
59863: LIST
59864: LIST
59865: PUSH
59866: LD_INT 3
59868: NEG
59869: PUSH
59870: LD_INT 5
59872: NEG
59873: PUSH
59874: EMPTY
59875: LIST
59876: LIST
59877: PUSH
59878: LD_INT 5
59880: NEG
59881: PUSH
59882: LD_INT 3
59884: NEG
59885: PUSH
59886: EMPTY
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: LIST
59894: LIST
59895: LIST
59896: LIST
59897: LIST
59898: LIST
59899: LIST
59900: LIST
59901: LIST
59902: LIST
59903: LIST
59904: LIST
59905: LIST
59906: LIST
59907: LIST
59908: LIST
59909: LIST
59910: LIST
59911: LIST
59912: LIST
59913: LIST
59914: LIST
59915: LIST
59916: LIST
59917: LIST
59918: LIST
59919: LIST
59920: LIST
59921: LIST
59922: LIST
59923: LIST
59924: LIST
59925: LIST
59926: LIST
59927: LIST
59928: LIST
59929: LIST
59930: LIST
59931: LIST
59932: LIST
59933: LIST
59934: LIST
59935: LIST
59936: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
59937: LD_ADDR_VAR 0 30
59941: PUSH
59942: LD_INT 4
59944: PUSH
59945: LD_INT 4
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: PUSH
59952: LD_INT 4
59954: PUSH
59955: LD_INT 3
59957: PUSH
59958: EMPTY
59959: LIST
59960: LIST
59961: PUSH
59962: LD_INT 5
59964: PUSH
59965: LD_INT 4
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 5
59974: PUSH
59975: LD_INT 5
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 4
59984: PUSH
59985: LD_INT 5
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: LD_INT 4
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 3
60004: PUSH
60005: LD_INT 3
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 5
60014: PUSH
60015: LD_INT 3
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: LD_INT 5
60027: PUSH
60028: EMPTY
60029: LIST
60030: LIST
60031: PUSH
60032: LD_INT 0
60034: PUSH
60035: LD_INT 3
60037: PUSH
60038: EMPTY
60039: LIST
60040: LIST
60041: PUSH
60042: LD_INT 0
60044: PUSH
60045: LD_INT 2
60047: PUSH
60048: EMPTY
60049: LIST
60050: LIST
60051: PUSH
60052: LD_INT 1
60054: PUSH
60055: LD_INT 3
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: PUSH
60062: LD_INT 1
60064: PUSH
60065: LD_INT 4
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 0
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: PUSH
60082: LD_INT 1
60084: NEG
60085: PUSH
60086: LD_INT 3
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PUSH
60093: LD_INT 1
60095: NEG
60096: PUSH
60097: LD_INT 2
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 2
60106: PUSH
60107: LD_INT 4
60109: PUSH
60110: EMPTY
60111: LIST
60112: LIST
60113: PUSH
60114: LD_INT 2
60116: NEG
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 4
60127: NEG
60128: PUSH
60129: LD_INT 0
60131: PUSH
60132: EMPTY
60133: LIST
60134: LIST
60135: PUSH
60136: LD_INT 4
60138: NEG
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: EMPTY
60145: LIST
60146: LIST
60147: PUSH
60148: LD_INT 3
60150: NEG
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: EMPTY
60156: LIST
60157: LIST
60158: PUSH
60159: LD_INT 3
60161: NEG
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: EMPTY
60167: LIST
60168: LIST
60169: PUSH
60170: LD_INT 4
60172: NEG
60173: PUSH
60174: LD_INT 1
60176: PUSH
60177: EMPTY
60178: LIST
60179: LIST
60180: PUSH
60181: LD_INT 5
60183: NEG
60184: PUSH
60185: LD_INT 0
60187: PUSH
60188: EMPTY
60189: LIST
60190: LIST
60191: PUSH
60192: LD_INT 5
60194: NEG
60195: PUSH
60196: LD_INT 1
60198: NEG
60199: PUSH
60200: EMPTY
60201: LIST
60202: LIST
60203: PUSH
60204: LD_INT 5
60206: NEG
60207: PUSH
60208: LD_INT 2
60210: NEG
60211: PUSH
60212: EMPTY
60213: LIST
60214: LIST
60215: PUSH
60216: LD_INT 3
60218: NEG
60219: PUSH
60220: LD_INT 2
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PUSH
60227: LD_INT 3
60229: NEG
60230: PUSH
60231: LD_INT 3
60233: NEG
60234: PUSH
60235: EMPTY
60236: LIST
60237: LIST
60238: PUSH
60239: LD_INT 3
60241: NEG
60242: PUSH
60243: LD_INT 4
60245: NEG
60246: PUSH
60247: EMPTY
60248: LIST
60249: LIST
60250: PUSH
60251: LD_INT 2
60253: NEG
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 2
60269: NEG
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 3
60277: NEG
60278: PUSH
60279: LD_INT 2
60281: NEG
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 4
60289: NEG
60290: PUSH
60291: LD_INT 3
60293: NEG
60294: PUSH
60295: EMPTY
60296: LIST
60297: LIST
60298: PUSH
60299: LD_INT 4
60301: NEG
60302: PUSH
60303: LD_INT 4
60305: NEG
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: NEG
60314: PUSH
60315: LD_INT 4
60317: NEG
60318: PUSH
60319: EMPTY
60320: LIST
60321: LIST
60322: PUSH
60323: LD_INT 4
60325: NEG
60326: PUSH
60327: LD_INT 2
60329: NEG
60330: PUSH
60331: EMPTY
60332: LIST
60333: LIST
60334: PUSH
60335: LD_INT 0
60337: PUSH
60338: LD_INT 4
60340: NEG
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 0
60348: PUSH
60349: LD_INT 5
60351: NEG
60352: PUSH
60353: EMPTY
60354: LIST
60355: LIST
60356: PUSH
60357: LD_INT 1
60359: PUSH
60360: LD_INT 4
60362: NEG
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: LD_INT 3
60373: NEG
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: LD_INT 3
60384: NEG
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: LD_INT 4
60396: NEG
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: PUSH
60402: LD_INT 1
60404: NEG
60405: PUSH
60406: LD_INT 5
60408: NEG
60409: PUSH
60410: EMPTY
60411: LIST
60412: LIST
60413: PUSH
60414: LD_INT 2
60416: PUSH
60417: LD_INT 3
60419: NEG
60420: PUSH
60421: EMPTY
60422: LIST
60423: LIST
60424: PUSH
60425: LD_INT 2
60427: NEG
60428: PUSH
60429: LD_INT 5
60431: NEG
60432: PUSH
60433: EMPTY
60434: LIST
60435: LIST
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: LIST
60472: LIST
60473: LIST
60474: LIST
60475: LIST
60476: LIST
60477: LIST
60478: LIST
60479: LIST
60480: LIST
60481: LIST
60482: LIST
60483: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
60484: LD_ADDR_VAR 0 31
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 4
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: PUSH
60499: LD_INT 0
60501: PUSH
60502: LD_INT 3
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: PUSH
60509: LD_INT 1
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 1
60521: PUSH
60522: LD_INT 5
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 0
60531: PUSH
60532: LD_INT 5
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 1
60541: NEG
60542: PUSH
60543: LD_INT 4
60545: PUSH
60546: EMPTY
60547: LIST
60548: LIST
60549: PUSH
60550: LD_INT 1
60552: NEG
60553: PUSH
60554: LD_INT 3
60556: PUSH
60557: EMPTY
60558: LIST
60559: LIST
60560: PUSH
60561: LD_INT 2
60563: PUSH
60564: LD_INT 5
60566: PUSH
60567: EMPTY
60568: LIST
60569: LIST
60570: PUSH
60571: LD_INT 2
60573: NEG
60574: PUSH
60575: LD_INT 3
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 3
60584: NEG
60585: PUSH
60586: LD_INT 0
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: LD_INT 3
60595: NEG
60596: PUSH
60597: LD_INT 1
60599: NEG
60600: PUSH
60601: EMPTY
60602: LIST
60603: LIST
60604: PUSH
60605: LD_INT 2
60607: NEG
60608: PUSH
60609: LD_INT 0
60611: PUSH
60612: EMPTY
60613: LIST
60614: LIST
60615: PUSH
60616: LD_INT 2
60618: NEG
60619: PUSH
60620: LD_INT 1
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: LD_INT 3
60629: NEG
60630: PUSH
60631: LD_INT 1
60633: PUSH
60634: EMPTY
60635: LIST
60636: LIST
60637: PUSH
60638: LD_INT 4
60640: NEG
60641: PUSH
60642: LD_INT 0
60644: PUSH
60645: EMPTY
60646: LIST
60647: LIST
60648: PUSH
60649: LD_INT 4
60651: NEG
60652: PUSH
60653: LD_INT 1
60655: NEG
60656: PUSH
60657: EMPTY
60658: LIST
60659: LIST
60660: PUSH
60661: LD_INT 4
60663: NEG
60664: PUSH
60665: LD_INT 2
60667: NEG
60668: PUSH
60669: EMPTY
60670: LIST
60671: LIST
60672: PUSH
60673: LD_INT 2
60675: NEG
60676: PUSH
60677: LD_INT 2
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 4
60686: NEG
60687: PUSH
60688: LD_INT 4
60690: NEG
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: PUSH
60696: LD_INT 4
60698: NEG
60699: PUSH
60700: LD_INT 5
60702: NEG
60703: PUSH
60704: EMPTY
60705: LIST
60706: LIST
60707: PUSH
60708: LD_INT 3
60710: NEG
60711: PUSH
60712: LD_INT 4
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 3
60722: NEG
60723: PUSH
60724: LD_INT 3
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 4
60734: NEG
60735: PUSH
60736: LD_INT 3
60738: NEG
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 5
60746: NEG
60747: PUSH
60748: LD_INT 4
60750: NEG
60751: PUSH
60752: EMPTY
60753: LIST
60754: LIST
60755: PUSH
60756: LD_INT 5
60758: NEG
60759: PUSH
60760: LD_INT 5
60762: NEG
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PUSH
60768: LD_INT 3
60770: NEG
60771: PUSH
60772: LD_INT 5
60774: NEG
60775: PUSH
60776: EMPTY
60777: LIST
60778: LIST
60779: PUSH
60780: LD_INT 5
60782: NEG
60783: PUSH
60784: LD_INT 3
60786: NEG
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: LD_INT 3
60797: NEG
60798: PUSH
60799: EMPTY
60800: LIST
60801: LIST
60802: PUSH
60803: LD_INT 0
60805: PUSH
60806: LD_INT 4
60808: NEG
60809: PUSH
60810: EMPTY
60811: LIST
60812: LIST
60813: PUSH
60814: LD_INT 1
60816: PUSH
60817: LD_INT 3
60819: NEG
60820: PUSH
60821: EMPTY
60822: LIST
60823: LIST
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: LD_INT 2
60830: NEG
60831: PUSH
60832: EMPTY
60833: LIST
60834: LIST
60835: PUSH
60836: LD_INT 0
60838: PUSH
60839: LD_INT 2
60841: NEG
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: PUSH
60847: LD_INT 1
60849: NEG
60850: PUSH
60851: LD_INT 3
60853: NEG
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 1
60861: NEG
60862: PUSH
60863: LD_INT 4
60865: NEG
60866: PUSH
60867: EMPTY
60868: LIST
60869: LIST
60870: PUSH
60871: LD_INT 2
60873: PUSH
60874: LD_INT 2
60876: NEG
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: LD_INT 2
60884: NEG
60885: PUSH
60886: LD_INT 4
60888: NEG
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: PUSH
60894: LD_INT 4
60896: PUSH
60897: LD_INT 0
60899: PUSH
60900: EMPTY
60901: LIST
60902: LIST
60903: PUSH
60904: LD_INT 4
60906: PUSH
60907: LD_INT 1
60909: NEG
60910: PUSH
60911: EMPTY
60912: LIST
60913: LIST
60914: PUSH
60915: LD_INT 5
60917: PUSH
60918: LD_INT 0
60920: PUSH
60921: EMPTY
60922: LIST
60923: LIST
60924: PUSH
60925: LD_INT 5
60927: PUSH
60928: LD_INT 1
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: PUSH
60935: LD_INT 4
60937: PUSH
60938: LD_INT 1
60940: PUSH
60941: EMPTY
60942: LIST
60943: LIST
60944: PUSH
60945: LD_INT 3
60947: PUSH
60948: LD_INT 0
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 3
60957: PUSH
60958: LD_INT 1
60960: NEG
60961: PUSH
60962: EMPTY
60963: LIST
60964: LIST
60965: PUSH
60966: LD_INT 3
60968: PUSH
60969: LD_INT 2
60971: NEG
60972: PUSH
60973: EMPTY
60974: LIST
60975: LIST
60976: PUSH
60977: LD_INT 5
60979: PUSH
60980: LD_INT 2
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: PUSH
60987: EMPTY
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: LIST
61015: LIST
61016: LIST
61017: LIST
61018: LIST
61019: LIST
61020: LIST
61021: LIST
61022: LIST
61023: LIST
61024: LIST
61025: LIST
61026: LIST
61027: LIST
61028: LIST
61029: LIST
61030: LIST
61031: LIST
61032: LIST
61033: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61034: LD_ADDR_VAR 0 32
61038: PUSH
61039: LD_INT 4
61041: NEG
61042: PUSH
61043: LD_INT 0
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 4
61052: NEG
61053: PUSH
61054: LD_INT 1
61056: NEG
61057: PUSH
61058: EMPTY
61059: LIST
61060: LIST
61061: PUSH
61062: LD_INT 3
61064: NEG
61065: PUSH
61066: LD_INT 0
61068: PUSH
61069: EMPTY
61070: LIST
61071: LIST
61072: PUSH
61073: LD_INT 3
61075: NEG
61076: PUSH
61077: LD_INT 1
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: PUSH
61084: LD_INT 4
61086: NEG
61087: PUSH
61088: LD_INT 1
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: PUSH
61095: LD_INT 5
61097: NEG
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: EMPTY
61103: LIST
61104: LIST
61105: PUSH
61106: LD_INT 5
61108: NEG
61109: PUSH
61110: LD_INT 1
61112: NEG
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PUSH
61118: LD_INT 5
61120: NEG
61121: PUSH
61122: LD_INT 2
61124: NEG
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 3
61132: NEG
61133: PUSH
61134: LD_INT 2
61136: PUSH
61137: EMPTY
61138: LIST
61139: LIST
61140: PUSH
61141: LD_INT 3
61143: NEG
61144: PUSH
61145: LD_INT 3
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: LD_INT 3
61155: NEG
61156: PUSH
61157: LD_INT 4
61159: NEG
61160: PUSH
61161: EMPTY
61162: LIST
61163: LIST
61164: PUSH
61165: LD_INT 2
61167: NEG
61168: PUSH
61169: LD_INT 3
61171: NEG
61172: PUSH
61173: EMPTY
61174: LIST
61175: LIST
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: LD_INT 2
61183: NEG
61184: PUSH
61185: EMPTY
61186: LIST
61187: LIST
61188: PUSH
61189: LD_INT 3
61191: NEG
61192: PUSH
61193: LD_INT 2
61195: NEG
61196: PUSH
61197: EMPTY
61198: LIST
61199: LIST
61200: PUSH
61201: LD_INT 4
61203: NEG
61204: PUSH
61205: LD_INT 3
61207: NEG
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: LD_INT 4
61215: NEG
61216: PUSH
61217: LD_INT 4
61219: NEG
61220: PUSH
61221: EMPTY
61222: LIST
61223: LIST
61224: PUSH
61225: LD_INT 2
61227: NEG
61228: PUSH
61229: LD_INT 4
61231: NEG
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: PUSH
61237: LD_INT 4
61239: NEG
61240: PUSH
61241: LD_INT 2
61243: NEG
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: PUSH
61249: LD_INT 0
61251: PUSH
61252: LD_INT 4
61254: NEG
61255: PUSH
61256: EMPTY
61257: LIST
61258: LIST
61259: PUSH
61260: LD_INT 0
61262: PUSH
61263: LD_INT 5
61265: NEG
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 1
61273: PUSH
61274: LD_INT 4
61276: NEG
61277: PUSH
61278: EMPTY
61279: LIST
61280: LIST
61281: PUSH
61282: LD_INT 1
61284: PUSH
61285: LD_INT 3
61287: NEG
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: EMPTY
61301: LIST
61302: LIST
61303: PUSH
61304: LD_INT 1
61306: NEG
61307: PUSH
61308: LD_INT 4
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: NEG
61319: PUSH
61320: LD_INT 5
61322: NEG
61323: PUSH
61324: EMPTY
61325: LIST
61326: LIST
61327: PUSH
61328: LD_INT 2
61330: PUSH
61331: LD_INT 3
61333: NEG
61334: PUSH
61335: EMPTY
61336: LIST
61337: LIST
61338: PUSH
61339: LD_INT 2
61341: NEG
61342: PUSH
61343: LD_INT 5
61345: NEG
61346: PUSH
61347: EMPTY
61348: LIST
61349: LIST
61350: PUSH
61351: LD_INT 3
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: PUSH
61361: LD_INT 3
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: PUSH
61372: LD_INT 4
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 4
61384: PUSH
61385: LD_INT 1
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: LD_INT 3
61394: PUSH
61395: LD_INT 1
61397: PUSH
61398: EMPTY
61399: LIST
61400: LIST
61401: PUSH
61402: LD_INT 2
61404: PUSH
61405: LD_INT 0
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: PUSH
61415: LD_INT 1
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 2
61425: PUSH
61426: LD_INT 2
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 4
61436: PUSH
61437: LD_INT 2
61439: PUSH
61440: EMPTY
61441: LIST
61442: LIST
61443: PUSH
61444: LD_INT 4
61446: PUSH
61447: LD_INT 4
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: PUSH
61454: LD_INT 4
61456: PUSH
61457: LD_INT 3
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: PUSH
61464: LD_INT 5
61466: PUSH
61467: LD_INT 4
61469: PUSH
61470: EMPTY
61471: LIST
61472: LIST
61473: PUSH
61474: LD_INT 5
61476: PUSH
61477: LD_INT 5
61479: PUSH
61480: EMPTY
61481: LIST
61482: LIST
61483: PUSH
61484: LD_INT 4
61486: PUSH
61487: LD_INT 5
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: LD_INT 4
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 3
61506: PUSH
61507: LD_INT 3
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 5
61516: PUSH
61517: LD_INT 3
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: LD_INT 5
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: EMPTY
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: LIST
61564: LIST
61565: LIST
61566: LIST
61567: LIST
61568: LIST
61569: LIST
61570: LIST
61571: LIST
61572: LIST
61573: LIST
61574: LIST
61575: LIST
61576: LIST
61577: LIST
61578: LIST
61579: LIST
61580: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
61581: LD_ADDR_VAR 0 33
61585: PUSH
61586: LD_INT 4
61588: NEG
61589: PUSH
61590: LD_INT 4
61592: NEG
61593: PUSH
61594: EMPTY
61595: LIST
61596: LIST
61597: PUSH
61598: LD_INT 4
61600: NEG
61601: PUSH
61602: LD_INT 5
61604: NEG
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 3
61612: NEG
61613: PUSH
61614: LD_INT 4
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 3
61624: NEG
61625: PUSH
61626: LD_INT 3
61628: NEG
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: PUSH
61634: LD_INT 4
61636: NEG
61637: PUSH
61638: LD_INT 3
61640: NEG
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: PUSH
61646: LD_INT 5
61648: NEG
61649: PUSH
61650: LD_INT 4
61652: NEG
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: LD_INT 5
61660: NEG
61661: PUSH
61662: LD_INT 5
61664: NEG
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: PUSH
61670: LD_INT 3
61672: NEG
61673: PUSH
61674: LD_INT 5
61676: NEG
61677: PUSH
61678: EMPTY
61679: LIST
61680: LIST
61681: PUSH
61682: LD_INT 5
61684: NEG
61685: PUSH
61686: LD_INT 3
61688: NEG
61689: PUSH
61690: EMPTY
61691: LIST
61692: LIST
61693: PUSH
61694: LD_INT 0
61696: PUSH
61697: LD_INT 3
61699: NEG
61700: PUSH
61701: EMPTY
61702: LIST
61703: LIST
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: LD_INT 4
61710: NEG
61711: PUSH
61712: EMPTY
61713: LIST
61714: LIST
61715: PUSH
61716: LD_INT 1
61718: PUSH
61719: LD_INT 3
61721: NEG
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 1
61729: PUSH
61730: LD_INT 2
61732: NEG
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 0
61740: PUSH
61741: LD_INT 2
61743: NEG
61744: PUSH
61745: EMPTY
61746: LIST
61747: LIST
61748: PUSH
61749: LD_INT 1
61751: NEG
61752: PUSH
61753: LD_INT 3
61755: NEG
61756: PUSH
61757: EMPTY
61758: LIST
61759: LIST
61760: PUSH
61761: LD_INT 1
61763: NEG
61764: PUSH
61765: LD_INT 4
61767: NEG
61768: PUSH
61769: EMPTY
61770: LIST
61771: LIST
61772: PUSH
61773: LD_INT 2
61775: PUSH
61776: LD_INT 2
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 2
61786: NEG
61787: PUSH
61788: LD_INT 4
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: LD_INT 4
61798: PUSH
61799: LD_INT 0
61801: PUSH
61802: EMPTY
61803: LIST
61804: LIST
61805: PUSH
61806: LD_INT 4
61808: PUSH
61809: LD_INT 1
61811: NEG
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 5
61819: PUSH
61820: LD_INT 0
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 5
61829: PUSH
61830: LD_INT 1
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: LD_INT 4
61839: PUSH
61840: LD_INT 1
61842: PUSH
61843: EMPTY
61844: LIST
61845: LIST
61846: PUSH
61847: LD_INT 3
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: PUSH
61857: LD_INT 3
61859: PUSH
61860: LD_INT 1
61862: NEG
61863: PUSH
61864: EMPTY
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 3
61870: PUSH
61871: LD_INT 2
61873: NEG
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 5
61881: PUSH
61882: LD_INT 2
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: PUSH
61889: LD_INT 3
61891: PUSH
61892: LD_INT 3
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 3
61901: PUSH
61902: LD_INT 2
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 4
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 4
61921: PUSH
61922: LD_INT 4
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 3
61931: PUSH
61932: LD_INT 4
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: LD_INT 2
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 4
61961: PUSH
61962: LD_INT 2
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 2
61971: PUSH
61972: LD_INT 4
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 0
61981: PUSH
61982: LD_INT 4
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 0
61991: PUSH
61992: LD_INT 3
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 1
62001: PUSH
62002: LD_INT 4
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: PUSH
62012: LD_INT 5
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 0
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 1
62031: NEG
62032: PUSH
62033: LD_INT 4
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: NEG
62043: PUSH
62044: LD_INT 3
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: LD_INT 2
62053: PUSH
62054: LD_INT 5
62056: PUSH
62057: EMPTY
62058: LIST
62059: LIST
62060: PUSH
62061: LD_INT 2
62063: NEG
62064: PUSH
62065: LD_INT 3
62067: PUSH
62068: EMPTY
62069: LIST
62070: LIST
62071: PUSH
62072: EMPTY
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: LIST
62118: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62119: LD_ADDR_VAR 0 34
62123: PUSH
62124: LD_INT 0
62126: PUSH
62127: LD_INT 4
62129: NEG
62130: PUSH
62131: EMPTY
62132: LIST
62133: LIST
62134: PUSH
62135: LD_INT 0
62137: PUSH
62138: LD_INT 5
62140: NEG
62141: PUSH
62142: EMPTY
62143: LIST
62144: LIST
62145: PUSH
62146: LD_INT 1
62148: PUSH
62149: LD_INT 4
62151: NEG
62152: PUSH
62153: EMPTY
62154: LIST
62155: LIST
62156: PUSH
62157: LD_INT 1
62159: PUSH
62160: LD_INT 3
62162: NEG
62163: PUSH
62164: EMPTY
62165: LIST
62166: LIST
62167: PUSH
62168: LD_INT 0
62170: PUSH
62171: LD_INT 3
62173: NEG
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 4
62185: NEG
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PUSH
62191: LD_INT 1
62193: NEG
62194: PUSH
62195: LD_INT 5
62197: NEG
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 2
62205: PUSH
62206: LD_INT 3
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 2
62216: NEG
62217: PUSH
62218: LD_INT 5
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 3
62228: PUSH
62229: LD_INT 0
62231: PUSH
62232: EMPTY
62233: LIST
62234: LIST
62235: PUSH
62236: LD_INT 3
62238: PUSH
62239: LD_INT 1
62241: NEG
62242: PUSH
62243: EMPTY
62244: LIST
62245: LIST
62246: PUSH
62247: LD_INT 4
62249: PUSH
62250: LD_INT 0
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 4
62259: PUSH
62260: LD_INT 1
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 3
62269: PUSH
62270: LD_INT 1
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 2
62279: PUSH
62280: LD_INT 0
62282: PUSH
62283: EMPTY
62284: LIST
62285: LIST
62286: PUSH
62287: LD_INT 2
62289: PUSH
62290: LD_INT 1
62292: NEG
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 2
62300: PUSH
62301: LD_INT 2
62303: NEG
62304: PUSH
62305: EMPTY
62306: LIST
62307: LIST
62308: PUSH
62309: LD_INT 4
62311: PUSH
62312: LD_INT 2
62314: PUSH
62315: EMPTY
62316: LIST
62317: LIST
62318: PUSH
62319: LD_INT 4
62321: PUSH
62322: LD_INT 4
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 4
62331: PUSH
62332: LD_INT 3
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: LD_INT 5
62341: PUSH
62342: LD_INT 4
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: PUSH
62349: LD_INT 5
62351: PUSH
62352: LD_INT 5
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: PUSH
62359: LD_INT 4
62361: PUSH
62362: LD_INT 5
62364: PUSH
62365: EMPTY
62366: LIST
62367: LIST
62368: PUSH
62369: LD_INT 3
62371: PUSH
62372: LD_INT 4
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: PUSH
62379: LD_INT 3
62381: PUSH
62382: LD_INT 3
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PUSH
62389: LD_INT 5
62391: PUSH
62392: LD_INT 3
62394: PUSH
62395: EMPTY
62396: LIST
62397: LIST
62398: PUSH
62399: LD_INT 3
62401: PUSH
62402: LD_INT 5
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 0
62411: PUSH
62412: LD_INT 3
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 0
62421: PUSH
62422: LD_INT 2
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 1
62431: PUSH
62432: LD_INT 3
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 1
62441: PUSH
62442: LD_INT 4
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 1
62461: NEG
62462: PUSH
62463: LD_INT 3
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 1
62472: NEG
62473: PUSH
62474: LD_INT 2
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 2
62483: PUSH
62484: LD_INT 4
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 2
62493: NEG
62494: PUSH
62495: LD_INT 2
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: PUSH
62502: LD_INT 4
62504: NEG
62505: PUSH
62506: LD_INT 0
62508: PUSH
62509: EMPTY
62510: LIST
62511: LIST
62512: PUSH
62513: LD_INT 4
62515: NEG
62516: PUSH
62517: LD_INT 1
62519: NEG
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 3
62527: NEG
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 3
62538: NEG
62539: PUSH
62540: LD_INT 1
62542: PUSH
62543: EMPTY
62544: LIST
62545: LIST
62546: PUSH
62547: LD_INT 4
62549: NEG
62550: PUSH
62551: LD_INT 1
62553: PUSH
62554: EMPTY
62555: LIST
62556: LIST
62557: PUSH
62558: LD_INT 5
62560: NEG
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PUSH
62569: LD_INT 5
62571: NEG
62572: PUSH
62573: LD_INT 1
62575: NEG
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 5
62583: NEG
62584: PUSH
62585: LD_INT 2
62587: NEG
62588: PUSH
62589: EMPTY
62590: LIST
62591: LIST
62592: PUSH
62593: LD_INT 3
62595: NEG
62596: PUSH
62597: LD_INT 2
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: LIST
62649: LIST
62650: ST_TO_ADDR
// end ; end ;
62651: GO 62654
62653: POP
// case btype of b_depot , b_warehouse :
62654: LD_VAR 0 1
62658: PUSH
62659: LD_INT 0
62661: DOUBLE
62662: EQUAL
62663: IFTRUE 62673
62665: LD_INT 1
62667: DOUBLE
62668: EQUAL
62669: IFTRUE 62673
62671: GO 62874
62673: POP
// case nation of nation_american :
62674: LD_VAR 0 5
62678: PUSH
62679: LD_INT 1
62681: DOUBLE
62682: EQUAL
62683: IFTRUE 62687
62685: GO 62743
62687: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
62688: LD_ADDR_VAR 0 9
62692: PUSH
62693: LD_VAR 0 11
62697: PUSH
62698: LD_VAR 0 12
62702: PUSH
62703: LD_VAR 0 13
62707: PUSH
62708: LD_VAR 0 14
62712: PUSH
62713: LD_VAR 0 15
62717: PUSH
62718: LD_VAR 0 16
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: PUSH
62731: LD_VAR 0 4
62735: PUSH
62736: LD_INT 1
62738: PLUS
62739: ARRAY
62740: ST_TO_ADDR
62741: GO 62872
62743: LD_INT 2
62745: DOUBLE
62746: EQUAL
62747: IFTRUE 62751
62749: GO 62807
62751: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
62752: LD_ADDR_VAR 0 9
62756: PUSH
62757: LD_VAR 0 17
62761: PUSH
62762: LD_VAR 0 18
62766: PUSH
62767: LD_VAR 0 19
62771: PUSH
62772: LD_VAR 0 20
62776: PUSH
62777: LD_VAR 0 21
62781: PUSH
62782: LD_VAR 0 22
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: LIST
62791: LIST
62792: LIST
62793: LIST
62794: PUSH
62795: LD_VAR 0 4
62799: PUSH
62800: LD_INT 1
62802: PLUS
62803: ARRAY
62804: ST_TO_ADDR
62805: GO 62872
62807: LD_INT 3
62809: DOUBLE
62810: EQUAL
62811: IFTRUE 62815
62813: GO 62871
62815: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
62816: LD_ADDR_VAR 0 9
62820: PUSH
62821: LD_VAR 0 23
62825: PUSH
62826: LD_VAR 0 24
62830: PUSH
62831: LD_VAR 0 25
62835: PUSH
62836: LD_VAR 0 26
62840: PUSH
62841: LD_VAR 0 27
62845: PUSH
62846: LD_VAR 0 28
62850: PUSH
62851: EMPTY
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: LIST
62857: LIST
62858: PUSH
62859: LD_VAR 0 4
62863: PUSH
62864: LD_INT 1
62866: PLUS
62867: ARRAY
62868: ST_TO_ADDR
62869: GO 62872
62871: POP
62872: GO 63427
62874: LD_INT 2
62876: DOUBLE
62877: EQUAL
62878: IFTRUE 62888
62880: LD_INT 3
62882: DOUBLE
62883: EQUAL
62884: IFTRUE 62888
62886: GO 62944
62888: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
62889: LD_ADDR_VAR 0 9
62893: PUSH
62894: LD_VAR 0 29
62898: PUSH
62899: LD_VAR 0 30
62903: PUSH
62904: LD_VAR 0 31
62908: PUSH
62909: LD_VAR 0 32
62913: PUSH
62914: LD_VAR 0 33
62918: PUSH
62919: LD_VAR 0 34
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: LIST
62928: LIST
62929: LIST
62930: LIST
62931: PUSH
62932: LD_VAR 0 4
62936: PUSH
62937: LD_INT 1
62939: PLUS
62940: ARRAY
62941: ST_TO_ADDR
62942: GO 63427
62944: LD_INT 16
62946: DOUBLE
62947: EQUAL
62948: IFTRUE 63006
62950: LD_INT 17
62952: DOUBLE
62953: EQUAL
62954: IFTRUE 63006
62956: LD_INT 18
62958: DOUBLE
62959: EQUAL
62960: IFTRUE 63006
62962: LD_INT 19
62964: DOUBLE
62965: EQUAL
62966: IFTRUE 63006
62968: LD_INT 22
62970: DOUBLE
62971: EQUAL
62972: IFTRUE 63006
62974: LD_INT 20
62976: DOUBLE
62977: EQUAL
62978: IFTRUE 63006
62980: LD_INT 21
62982: DOUBLE
62983: EQUAL
62984: IFTRUE 63006
62986: LD_INT 23
62988: DOUBLE
62989: EQUAL
62990: IFTRUE 63006
62992: LD_INT 24
62994: DOUBLE
62995: EQUAL
62996: IFTRUE 63006
62998: LD_INT 25
63000: DOUBLE
63001: EQUAL
63002: IFTRUE 63006
63004: GO 63062
63006: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63007: LD_ADDR_VAR 0 9
63011: PUSH
63012: LD_VAR 0 35
63016: PUSH
63017: LD_VAR 0 36
63021: PUSH
63022: LD_VAR 0 37
63026: PUSH
63027: LD_VAR 0 38
63031: PUSH
63032: LD_VAR 0 39
63036: PUSH
63037: LD_VAR 0 40
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: PUSH
63050: LD_VAR 0 4
63054: PUSH
63055: LD_INT 1
63057: PLUS
63058: ARRAY
63059: ST_TO_ADDR
63060: GO 63427
63062: LD_INT 6
63064: DOUBLE
63065: EQUAL
63066: IFTRUE 63118
63068: LD_INT 7
63070: DOUBLE
63071: EQUAL
63072: IFTRUE 63118
63074: LD_INT 8
63076: DOUBLE
63077: EQUAL
63078: IFTRUE 63118
63080: LD_INT 13
63082: DOUBLE
63083: EQUAL
63084: IFTRUE 63118
63086: LD_INT 12
63088: DOUBLE
63089: EQUAL
63090: IFTRUE 63118
63092: LD_INT 15
63094: DOUBLE
63095: EQUAL
63096: IFTRUE 63118
63098: LD_INT 11
63100: DOUBLE
63101: EQUAL
63102: IFTRUE 63118
63104: LD_INT 14
63106: DOUBLE
63107: EQUAL
63108: IFTRUE 63118
63110: LD_INT 10
63112: DOUBLE
63113: EQUAL
63114: IFTRUE 63118
63116: GO 63174
63118: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63119: LD_ADDR_VAR 0 9
63123: PUSH
63124: LD_VAR 0 41
63128: PUSH
63129: LD_VAR 0 42
63133: PUSH
63134: LD_VAR 0 43
63138: PUSH
63139: LD_VAR 0 44
63143: PUSH
63144: LD_VAR 0 45
63148: PUSH
63149: LD_VAR 0 46
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: PUSH
63162: LD_VAR 0 4
63166: PUSH
63167: LD_INT 1
63169: PLUS
63170: ARRAY
63171: ST_TO_ADDR
63172: GO 63427
63174: LD_INT 36
63176: DOUBLE
63177: EQUAL
63178: IFTRUE 63182
63180: GO 63238
63182: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63183: LD_ADDR_VAR 0 9
63187: PUSH
63188: LD_VAR 0 47
63192: PUSH
63193: LD_VAR 0 48
63197: PUSH
63198: LD_VAR 0 49
63202: PUSH
63203: LD_VAR 0 50
63207: PUSH
63208: LD_VAR 0 51
63212: PUSH
63213: LD_VAR 0 52
63217: PUSH
63218: EMPTY
63219: LIST
63220: LIST
63221: LIST
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: LD_VAR 0 4
63230: PUSH
63231: LD_INT 1
63233: PLUS
63234: ARRAY
63235: ST_TO_ADDR
63236: GO 63427
63238: LD_INT 4
63240: DOUBLE
63241: EQUAL
63242: IFTRUE 63264
63244: LD_INT 5
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63264
63250: LD_INT 34
63252: DOUBLE
63253: EQUAL
63254: IFTRUE 63264
63256: LD_INT 37
63258: DOUBLE
63259: EQUAL
63260: IFTRUE 63264
63262: GO 63320
63264: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63265: LD_ADDR_VAR 0 9
63269: PUSH
63270: LD_VAR 0 53
63274: PUSH
63275: LD_VAR 0 54
63279: PUSH
63280: LD_VAR 0 55
63284: PUSH
63285: LD_VAR 0 56
63289: PUSH
63290: LD_VAR 0 57
63294: PUSH
63295: LD_VAR 0 58
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: LIST
63304: LIST
63305: LIST
63306: LIST
63307: PUSH
63308: LD_VAR 0 4
63312: PUSH
63313: LD_INT 1
63315: PLUS
63316: ARRAY
63317: ST_TO_ADDR
63318: GO 63427
63320: LD_INT 31
63322: DOUBLE
63323: EQUAL
63324: IFTRUE 63370
63326: LD_INT 32
63328: DOUBLE
63329: EQUAL
63330: IFTRUE 63370
63332: LD_INT 33
63334: DOUBLE
63335: EQUAL
63336: IFTRUE 63370
63338: LD_INT 27
63340: DOUBLE
63341: EQUAL
63342: IFTRUE 63370
63344: LD_INT 26
63346: DOUBLE
63347: EQUAL
63348: IFTRUE 63370
63350: LD_INT 28
63352: DOUBLE
63353: EQUAL
63354: IFTRUE 63370
63356: LD_INT 29
63358: DOUBLE
63359: EQUAL
63360: IFTRUE 63370
63362: LD_INT 30
63364: DOUBLE
63365: EQUAL
63366: IFTRUE 63370
63368: GO 63426
63370: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63371: LD_ADDR_VAR 0 9
63375: PUSH
63376: LD_VAR 0 59
63380: PUSH
63381: LD_VAR 0 60
63385: PUSH
63386: LD_VAR 0 61
63390: PUSH
63391: LD_VAR 0 62
63395: PUSH
63396: LD_VAR 0 63
63400: PUSH
63401: LD_VAR 0 64
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: LIST
63413: PUSH
63414: LD_VAR 0 4
63418: PUSH
63419: LD_INT 1
63421: PLUS
63422: ARRAY
63423: ST_TO_ADDR
63424: GO 63427
63426: POP
// temp_list2 = [ ] ;
63427: LD_ADDR_VAR 0 10
63431: PUSH
63432: EMPTY
63433: ST_TO_ADDR
// for i in temp_list do
63434: LD_ADDR_VAR 0 8
63438: PUSH
63439: LD_VAR 0 9
63443: PUSH
63444: FOR_IN
63445: IFFALSE 63497
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63447: LD_ADDR_VAR 0 10
63451: PUSH
63452: LD_VAR 0 10
63456: PUSH
63457: LD_VAR 0 8
63461: PUSH
63462: LD_INT 1
63464: ARRAY
63465: PUSH
63466: LD_VAR 0 2
63470: PLUS
63471: PUSH
63472: LD_VAR 0 8
63476: PUSH
63477: LD_INT 2
63479: ARRAY
63480: PUSH
63481: LD_VAR 0 3
63485: PLUS
63486: PUSH
63487: EMPTY
63488: LIST
63489: LIST
63490: PUSH
63491: EMPTY
63492: LIST
63493: ADD
63494: ST_TO_ADDR
63495: GO 63444
63497: POP
63498: POP
// result = temp_list2 ;
63499: LD_ADDR_VAR 0 7
63503: PUSH
63504: LD_VAR 0 10
63508: ST_TO_ADDR
// end ;
63509: LD_VAR 0 7
63513: RET
// export function EnemyInRange ( unit , dist ) ; begin
63514: LD_INT 0
63516: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
63517: LD_ADDR_VAR 0 3
63521: PUSH
63522: LD_VAR 0 1
63526: PPUSH
63527: CALL_OW 255
63531: PPUSH
63532: LD_VAR 0 1
63536: PPUSH
63537: CALL_OW 250
63541: PPUSH
63542: LD_VAR 0 1
63546: PPUSH
63547: CALL_OW 251
63551: PPUSH
63552: LD_VAR 0 2
63556: PPUSH
63557: CALL 37618 0 4
63561: PUSH
63562: LD_INT 4
63564: ARRAY
63565: ST_TO_ADDR
// end ;
63566: LD_VAR 0 3
63570: RET
// export function PlayerSeeMe ( unit ) ; begin
63571: LD_INT 0
63573: PPUSH
// result := See ( your_side , unit ) ;
63574: LD_ADDR_VAR 0 2
63578: PUSH
63579: LD_OWVAR 2
63583: PPUSH
63584: LD_VAR 0 1
63588: PPUSH
63589: CALL_OW 292
63593: ST_TO_ADDR
// end ;
63594: LD_VAR 0 2
63598: RET
// export function ReverseDir ( unit ) ; begin
63599: LD_INT 0
63601: PPUSH
// if not unit then
63602: LD_VAR 0 1
63606: NOT
63607: IFFALSE 63611
// exit ;
63609: GO 63634
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
63611: LD_ADDR_VAR 0 2
63615: PUSH
63616: LD_VAR 0 1
63620: PPUSH
63621: CALL_OW 254
63625: PUSH
63626: LD_INT 3
63628: PLUS
63629: PUSH
63630: LD_INT 6
63632: MOD
63633: ST_TO_ADDR
// end ;
63634: LD_VAR 0 2
63638: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
63639: LD_INT 0
63641: PPUSH
63642: PPUSH
63643: PPUSH
63644: PPUSH
63645: PPUSH
// if not hexes then
63646: LD_VAR 0 2
63650: NOT
63651: IFFALSE 63655
// exit ;
63653: GO 63803
// dist := 9999 ;
63655: LD_ADDR_VAR 0 5
63659: PUSH
63660: LD_INT 9999
63662: ST_TO_ADDR
// for i = 1 to hexes do
63663: LD_ADDR_VAR 0 4
63667: PUSH
63668: DOUBLE
63669: LD_INT 1
63671: DEC
63672: ST_TO_ADDR
63673: LD_VAR 0 2
63677: PUSH
63678: FOR_TO
63679: IFFALSE 63791
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
63681: LD_VAR 0 1
63685: PPUSH
63686: LD_VAR 0 2
63690: PUSH
63691: LD_VAR 0 4
63695: ARRAY
63696: PUSH
63697: LD_INT 1
63699: ARRAY
63700: PPUSH
63701: LD_VAR 0 2
63705: PUSH
63706: LD_VAR 0 4
63710: ARRAY
63711: PUSH
63712: LD_INT 2
63714: ARRAY
63715: PPUSH
63716: CALL_OW 297
63720: PUSH
63721: LD_VAR 0 5
63725: LESS
63726: IFFALSE 63789
// begin hex := hexes [ i ] ;
63728: LD_ADDR_VAR 0 7
63732: PUSH
63733: LD_VAR 0 2
63737: PUSH
63738: LD_VAR 0 4
63742: ARRAY
63743: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63744: LD_ADDR_VAR 0 5
63748: PUSH
63749: LD_VAR 0 1
63753: PPUSH
63754: LD_VAR 0 2
63758: PUSH
63759: LD_VAR 0 4
63763: ARRAY
63764: PUSH
63765: LD_INT 1
63767: ARRAY
63768: PPUSH
63769: LD_VAR 0 2
63773: PUSH
63774: LD_VAR 0 4
63778: ARRAY
63779: PUSH
63780: LD_INT 2
63782: ARRAY
63783: PPUSH
63784: CALL_OW 297
63788: ST_TO_ADDR
// end ; end ;
63789: GO 63678
63791: POP
63792: POP
// result := hex ;
63793: LD_ADDR_VAR 0 3
63797: PUSH
63798: LD_VAR 0 7
63802: ST_TO_ADDR
// end ;
63803: LD_VAR 0 3
63807: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
63808: LD_INT 0
63810: PPUSH
63811: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
63812: LD_VAR 0 1
63816: NOT
63817: PUSH
63818: LD_VAR 0 1
63822: PUSH
63823: LD_INT 21
63825: PUSH
63826: LD_INT 2
63828: PUSH
63829: EMPTY
63830: LIST
63831: LIST
63832: PUSH
63833: LD_INT 23
63835: PUSH
63836: LD_INT 2
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: EMPTY
63844: LIST
63845: LIST
63846: PPUSH
63847: CALL_OW 69
63851: IN
63852: NOT
63853: OR
63854: IFFALSE 63858
// exit ;
63856: GO 63905
// for i = 1 to 3 do
63858: LD_ADDR_VAR 0 3
63862: PUSH
63863: DOUBLE
63864: LD_INT 1
63866: DEC
63867: ST_TO_ADDR
63868: LD_INT 3
63870: PUSH
63871: FOR_TO
63872: IFFALSE 63903
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
63874: LD_VAR 0 1
63878: PPUSH
63879: CALL_OW 250
63883: PPUSH
63884: LD_VAR 0 1
63888: PPUSH
63889: CALL_OW 251
63893: PPUSH
63894: LD_INT 1
63896: PPUSH
63897: CALL_OW 453
63901: GO 63871
63903: POP
63904: POP
// end ;
63905: LD_VAR 0 2
63909: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
63910: LD_INT 0
63912: PPUSH
63913: PPUSH
63914: PPUSH
63915: PPUSH
63916: PPUSH
63917: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
63918: LD_VAR 0 1
63922: NOT
63923: PUSH
63924: LD_VAR 0 2
63928: NOT
63929: OR
63930: PUSH
63931: LD_VAR 0 1
63935: PPUSH
63936: CALL_OW 314
63940: OR
63941: IFFALSE 63945
// exit ;
63943: GO 64386
// x := GetX ( enemy_unit ) ;
63945: LD_ADDR_VAR 0 7
63949: PUSH
63950: LD_VAR 0 2
63954: PPUSH
63955: CALL_OW 250
63959: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
63960: LD_ADDR_VAR 0 8
63964: PUSH
63965: LD_VAR 0 2
63969: PPUSH
63970: CALL_OW 251
63974: ST_TO_ADDR
// if not x or not y then
63975: LD_VAR 0 7
63979: NOT
63980: PUSH
63981: LD_VAR 0 8
63985: NOT
63986: OR
63987: IFFALSE 63991
// exit ;
63989: GO 64386
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
63991: LD_ADDR_VAR 0 6
63995: PUSH
63996: LD_VAR 0 7
64000: PPUSH
64001: LD_INT 0
64003: PPUSH
64004: LD_INT 4
64006: PPUSH
64007: CALL_OW 272
64011: PUSH
64012: LD_VAR 0 8
64016: PPUSH
64017: LD_INT 0
64019: PPUSH
64020: LD_INT 4
64022: PPUSH
64023: CALL_OW 273
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_VAR 0 7
64036: PPUSH
64037: LD_INT 1
64039: PPUSH
64040: LD_INT 4
64042: PPUSH
64043: CALL_OW 272
64047: PUSH
64048: LD_VAR 0 8
64052: PPUSH
64053: LD_INT 1
64055: PPUSH
64056: LD_INT 4
64058: PPUSH
64059: CALL_OW 273
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_VAR 0 7
64072: PPUSH
64073: LD_INT 2
64075: PPUSH
64076: LD_INT 4
64078: PPUSH
64079: CALL_OW 272
64083: PUSH
64084: LD_VAR 0 8
64088: PPUSH
64089: LD_INT 2
64091: PPUSH
64092: LD_INT 4
64094: PPUSH
64095: CALL_OW 273
64099: PUSH
64100: EMPTY
64101: LIST
64102: LIST
64103: PUSH
64104: LD_VAR 0 7
64108: PPUSH
64109: LD_INT 3
64111: PPUSH
64112: LD_INT 4
64114: PPUSH
64115: CALL_OW 272
64119: PUSH
64120: LD_VAR 0 8
64124: PPUSH
64125: LD_INT 3
64127: PPUSH
64128: LD_INT 4
64130: PPUSH
64131: CALL_OW 273
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: PUSH
64140: LD_VAR 0 7
64144: PPUSH
64145: LD_INT 4
64147: PPUSH
64148: LD_INT 4
64150: PPUSH
64151: CALL_OW 272
64155: PUSH
64156: LD_VAR 0 8
64160: PPUSH
64161: LD_INT 4
64163: PPUSH
64164: LD_INT 4
64166: PPUSH
64167: CALL_OW 273
64171: PUSH
64172: EMPTY
64173: LIST
64174: LIST
64175: PUSH
64176: LD_VAR 0 7
64180: PPUSH
64181: LD_INT 5
64183: PPUSH
64184: LD_INT 4
64186: PPUSH
64187: CALL_OW 272
64191: PUSH
64192: LD_VAR 0 8
64196: PPUSH
64197: LD_INT 5
64199: PPUSH
64200: LD_INT 4
64202: PPUSH
64203: CALL_OW 273
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: PUSH
64212: EMPTY
64213: LIST
64214: LIST
64215: LIST
64216: LIST
64217: LIST
64218: LIST
64219: ST_TO_ADDR
// for i = tmp downto 1 do
64220: LD_ADDR_VAR 0 4
64224: PUSH
64225: DOUBLE
64226: LD_VAR 0 6
64230: INC
64231: ST_TO_ADDR
64232: LD_INT 1
64234: PUSH
64235: FOR_DOWNTO
64236: IFFALSE 64337
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64238: LD_VAR 0 6
64242: PUSH
64243: LD_VAR 0 4
64247: ARRAY
64248: PUSH
64249: LD_INT 1
64251: ARRAY
64252: PPUSH
64253: LD_VAR 0 6
64257: PUSH
64258: LD_VAR 0 4
64262: ARRAY
64263: PUSH
64264: LD_INT 2
64266: ARRAY
64267: PPUSH
64268: CALL_OW 488
64272: NOT
64273: PUSH
64274: LD_VAR 0 6
64278: PUSH
64279: LD_VAR 0 4
64283: ARRAY
64284: PUSH
64285: LD_INT 1
64287: ARRAY
64288: PPUSH
64289: LD_VAR 0 6
64293: PUSH
64294: LD_VAR 0 4
64298: ARRAY
64299: PUSH
64300: LD_INT 2
64302: ARRAY
64303: PPUSH
64304: CALL_OW 428
64308: PUSH
64309: LD_INT 0
64311: NONEQUAL
64312: OR
64313: IFFALSE 64335
// tmp := Delete ( tmp , i ) ;
64315: LD_ADDR_VAR 0 6
64319: PUSH
64320: LD_VAR 0 6
64324: PPUSH
64325: LD_VAR 0 4
64329: PPUSH
64330: CALL_OW 3
64334: ST_TO_ADDR
64335: GO 64235
64337: POP
64338: POP
// j := GetClosestHex ( unit , tmp ) ;
64339: LD_ADDR_VAR 0 5
64343: PUSH
64344: LD_VAR 0 1
64348: PPUSH
64349: LD_VAR 0 6
64353: PPUSH
64354: CALL 63639 0 2
64358: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64359: LD_VAR 0 1
64363: PPUSH
64364: LD_VAR 0 5
64368: PUSH
64369: LD_INT 1
64371: ARRAY
64372: PPUSH
64373: LD_VAR 0 5
64377: PUSH
64378: LD_INT 2
64380: ARRAY
64381: PPUSH
64382: CALL_OW 111
// end ;
64386: LD_VAR 0 3
64390: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64391: LD_INT 0
64393: PPUSH
64394: PPUSH
64395: PPUSH
// uc_side = 0 ;
64396: LD_ADDR_OWVAR 20
64400: PUSH
64401: LD_INT 0
64403: ST_TO_ADDR
// uc_nation = 0 ;
64404: LD_ADDR_OWVAR 21
64408: PUSH
64409: LD_INT 0
64411: ST_TO_ADDR
// InitHc_All ( ) ;
64412: CALL_OW 584
// InitVc ;
64416: CALL_OW 20
// if mastodonts then
64420: LD_VAR 0 6
64424: IFFALSE 64491
// for i = 1 to mastodonts do
64426: LD_ADDR_VAR 0 11
64430: PUSH
64431: DOUBLE
64432: LD_INT 1
64434: DEC
64435: ST_TO_ADDR
64436: LD_VAR 0 6
64440: PUSH
64441: FOR_TO
64442: IFFALSE 64489
// begin vc_chassis := 31 ;
64444: LD_ADDR_OWVAR 37
64448: PUSH
64449: LD_INT 31
64451: ST_TO_ADDR
// vc_control := control_rider ;
64452: LD_ADDR_OWVAR 38
64456: PUSH
64457: LD_INT 4
64459: ST_TO_ADDR
// animal := CreateVehicle ;
64460: LD_ADDR_VAR 0 12
64464: PUSH
64465: CALL_OW 45
64469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64470: LD_VAR 0 12
64474: PPUSH
64475: LD_VAR 0 8
64479: PPUSH
64480: LD_INT 0
64482: PPUSH
64483: CALL 66679 0 3
// end ;
64487: GO 64441
64489: POP
64490: POP
// if horses then
64491: LD_VAR 0 5
64495: IFFALSE 64562
// for i = 1 to horses do
64497: LD_ADDR_VAR 0 11
64501: PUSH
64502: DOUBLE
64503: LD_INT 1
64505: DEC
64506: ST_TO_ADDR
64507: LD_VAR 0 5
64511: PUSH
64512: FOR_TO
64513: IFFALSE 64560
// begin hc_class := 21 ;
64515: LD_ADDR_OWVAR 28
64519: PUSH
64520: LD_INT 21
64522: ST_TO_ADDR
// hc_gallery :=  ;
64523: LD_ADDR_OWVAR 33
64527: PUSH
64528: LD_STRING 
64530: ST_TO_ADDR
// animal := CreateHuman ;
64531: LD_ADDR_VAR 0 12
64535: PUSH
64536: CALL_OW 44
64540: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64541: LD_VAR 0 12
64545: PPUSH
64546: LD_VAR 0 8
64550: PPUSH
64551: LD_INT 0
64553: PPUSH
64554: CALL 66679 0 3
// end ;
64558: GO 64512
64560: POP
64561: POP
// if birds then
64562: LD_VAR 0 1
64566: IFFALSE 64633
// for i = 1 to birds do
64568: LD_ADDR_VAR 0 11
64572: PUSH
64573: DOUBLE
64574: LD_INT 1
64576: DEC
64577: ST_TO_ADDR
64578: LD_VAR 0 1
64582: PUSH
64583: FOR_TO
64584: IFFALSE 64631
// begin hc_class = 18 ;
64586: LD_ADDR_OWVAR 28
64590: PUSH
64591: LD_INT 18
64593: ST_TO_ADDR
// hc_gallery =  ;
64594: LD_ADDR_OWVAR 33
64598: PUSH
64599: LD_STRING 
64601: ST_TO_ADDR
// animal := CreateHuman ;
64602: LD_ADDR_VAR 0 12
64606: PUSH
64607: CALL_OW 44
64611: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64612: LD_VAR 0 12
64616: PPUSH
64617: LD_VAR 0 8
64621: PPUSH
64622: LD_INT 0
64624: PPUSH
64625: CALL 66679 0 3
// end ;
64629: GO 64583
64631: POP
64632: POP
// if tigers then
64633: LD_VAR 0 2
64637: IFFALSE 64721
// for i = 1 to tigers do
64639: LD_ADDR_VAR 0 11
64643: PUSH
64644: DOUBLE
64645: LD_INT 1
64647: DEC
64648: ST_TO_ADDR
64649: LD_VAR 0 2
64653: PUSH
64654: FOR_TO
64655: IFFALSE 64719
// begin hc_class = class_tiger ;
64657: LD_ADDR_OWVAR 28
64661: PUSH
64662: LD_INT 14
64664: ST_TO_ADDR
// hc_gallery =  ;
64665: LD_ADDR_OWVAR 33
64669: PUSH
64670: LD_STRING 
64672: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
64673: LD_ADDR_OWVAR 35
64677: PUSH
64678: LD_INT 7
64680: NEG
64681: PPUSH
64682: LD_INT 7
64684: PPUSH
64685: CALL_OW 12
64689: ST_TO_ADDR
// animal := CreateHuman ;
64690: LD_ADDR_VAR 0 12
64694: PUSH
64695: CALL_OW 44
64699: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64700: LD_VAR 0 12
64704: PPUSH
64705: LD_VAR 0 8
64709: PPUSH
64710: LD_INT 0
64712: PPUSH
64713: CALL 66679 0 3
// end ;
64717: GO 64654
64719: POP
64720: POP
// if apemans then
64721: LD_VAR 0 3
64725: IFFALSE 64848
// for i = 1 to apemans do
64727: LD_ADDR_VAR 0 11
64731: PUSH
64732: DOUBLE
64733: LD_INT 1
64735: DEC
64736: ST_TO_ADDR
64737: LD_VAR 0 3
64741: PUSH
64742: FOR_TO
64743: IFFALSE 64846
// begin hc_class = class_apeman ;
64745: LD_ADDR_OWVAR 28
64749: PUSH
64750: LD_INT 12
64752: ST_TO_ADDR
// hc_gallery =  ;
64753: LD_ADDR_OWVAR 33
64757: PUSH
64758: LD_STRING 
64760: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
64761: LD_ADDR_OWVAR 35
64765: PUSH
64766: LD_INT 5
64768: NEG
64769: PPUSH
64770: LD_INT 5
64772: PPUSH
64773: CALL_OW 12
64777: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
64778: LD_ADDR_OWVAR 31
64782: PUSH
64783: LD_INT 1
64785: PPUSH
64786: LD_INT 3
64788: PPUSH
64789: CALL_OW 12
64793: PUSH
64794: LD_INT 1
64796: PPUSH
64797: LD_INT 3
64799: PPUSH
64800: CALL_OW 12
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: LD_INT 0
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: LIST
64815: LIST
64816: ST_TO_ADDR
// animal := CreateHuman ;
64817: LD_ADDR_VAR 0 12
64821: PUSH
64822: CALL_OW 44
64826: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64827: LD_VAR 0 12
64831: PPUSH
64832: LD_VAR 0 8
64836: PPUSH
64837: LD_INT 0
64839: PPUSH
64840: CALL 66679 0 3
// end ;
64844: GO 64742
64846: POP
64847: POP
// if enchidnas then
64848: LD_VAR 0 4
64852: IFFALSE 64919
// for i = 1 to enchidnas do
64854: LD_ADDR_VAR 0 11
64858: PUSH
64859: DOUBLE
64860: LD_INT 1
64862: DEC
64863: ST_TO_ADDR
64864: LD_VAR 0 4
64868: PUSH
64869: FOR_TO
64870: IFFALSE 64917
// begin hc_class = 13 ;
64872: LD_ADDR_OWVAR 28
64876: PUSH
64877: LD_INT 13
64879: ST_TO_ADDR
// hc_gallery =  ;
64880: LD_ADDR_OWVAR 33
64884: PUSH
64885: LD_STRING 
64887: ST_TO_ADDR
// animal := CreateHuman ;
64888: LD_ADDR_VAR 0 12
64892: PUSH
64893: CALL_OW 44
64897: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
64898: LD_VAR 0 12
64902: PPUSH
64903: LD_VAR 0 8
64907: PPUSH
64908: LD_INT 0
64910: PPUSH
64911: CALL 66679 0 3
// end ;
64915: GO 64869
64917: POP
64918: POP
// if fishes then
64919: LD_VAR 0 7
64923: IFFALSE 64990
// for i = 1 to fishes do
64925: LD_ADDR_VAR 0 11
64929: PUSH
64930: DOUBLE
64931: LD_INT 1
64933: DEC
64934: ST_TO_ADDR
64935: LD_VAR 0 7
64939: PUSH
64940: FOR_TO
64941: IFFALSE 64988
// begin hc_class = 20 ;
64943: LD_ADDR_OWVAR 28
64947: PUSH
64948: LD_INT 20
64950: ST_TO_ADDR
// hc_gallery =  ;
64951: LD_ADDR_OWVAR 33
64955: PUSH
64956: LD_STRING 
64958: ST_TO_ADDR
// animal := CreateHuman ;
64959: LD_ADDR_VAR 0 12
64963: PUSH
64964: CALL_OW 44
64968: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
64969: LD_VAR 0 12
64973: PPUSH
64974: LD_VAR 0 9
64978: PPUSH
64979: LD_INT 0
64981: PPUSH
64982: CALL 66679 0 3
// end ;
64986: GO 64940
64988: POP
64989: POP
// end ;
64990: LD_VAR 0 10
64994: RET
// export function WantHeal ( sci , unit ) ; begin
64995: LD_INT 0
64997: PPUSH
// if GetTaskList ( sci ) > 0 then
64998: LD_VAR 0 1
65002: PPUSH
65003: CALL_OW 437
65007: PUSH
65008: LD_INT 0
65010: GREATER
65011: IFFALSE 65081
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65013: LD_VAR 0 1
65017: PPUSH
65018: CALL_OW 437
65022: PUSH
65023: LD_INT 1
65025: ARRAY
65026: PUSH
65027: LD_INT 1
65029: ARRAY
65030: PUSH
65031: LD_STRING l
65033: EQUAL
65034: PUSH
65035: LD_VAR 0 1
65039: PPUSH
65040: CALL_OW 437
65044: PUSH
65045: LD_INT 1
65047: ARRAY
65048: PUSH
65049: LD_INT 4
65051: ARRAY
65052: PUSH
65053: LD_VAR 0 2
65057: EQUAL
65058: AND
65059: IFFALSE 65071
// result := true else
65061: LD_ADDR_VAR 0 3
65065: PUSH
65066: LD_INT 1
65068: ST_TO_ADDR
65069: GO 65079
// result := false ;
65071: LD_ADDR_VAR 0 3
65075: PUSH
65076: LD_INT 0
65078: ST_TO_ADDR
// end else
65079: GO 65089
// result := false ;
65081: LD_ADDR_VAR 0 3
65085: PUSH
65086: LD_INT 0
65088: ST_TO_ADDR
// end ;
65089: LD_VAR 0 3
65093: RET
// export function HealTarget ( sci ) ; begin
65094: LD_INT 0
65096: PPUSH
// if not sci then
65097: LD_VAR 0 1
65101: NOT
65102: IFFALSE 65106
// exit ;
65104: GO 65171
// result := 0 ;
65106: LD_ADDR_VAR 0 2
65110: PUSH
65111: LD_INT 0
65113: ST_TO_ADDR
// if GetTaskList ( sci ) then
65114: LD_VAR 0 1
65118: PPUSH
65119: CALL_OW 437
65123: IFFALSE 65171
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65125: LD_VAR 0 1
65129: PPUSH
65130: CALL_OW 437
65134: PUSH
65135: LD_INT 1
65137: ARRAY
65138: PUSH
65139: LD_INT 1
65141: ARRAY
65142: PUSH
65143: LD_STRING l
65145: EQUAL
65146: IFFALSE 65171
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65148: LD_ADDR_VAR 0 2
65152: PUSH
65153: LD_VAR 0 1
65157: PPUSH
65158: CALL_OW 437
65162: PUSH
65163: LD_INT 1
65165: ARRAY
65166: PUSH
65167: LD_INT 4
65169: ARRAY
65170: ST_TO_ADDR
// end ;
65171: LD_VAR 0 2
65175: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65176: LD_INT 0
65178: PPUSH
65179: PPUSH
65180: PPUSH
65181: PPUSH
// if not base_units then
65182: LD_VAR 0 1
65186: NOT
65187: IFFALSE 65191
// exit ;
65189: GO 65278
// result := false ;
65191: LD_ADDR_VAR 0 2
65195: PUSH
65196: LD_INT 0
65198: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65199: LD_ADDR_VAR 0 5
65203: PUSH
65204: LD_VAR 0 1
65208: PPUSH
65209: LD_INT 21
65211: PUSH
65212: LD_INT 3
65214: PUSH
65215: EMPTY
65216: LIST
65217: LIST
65218: PPUSH
65219: CALL_OW 72
65223: ST_TO_ADDR
// if not tmp then
65224: LD_VAR 0 5
65228: NOT
65229: IFFALSE 65233
// exit ;
65231: GO 65278
// for i in tmp do
65233: LD_ADDR_VAR 0 3
65237: PUSH
65238: LD_VAR 0 5
65242: PUSH
65243: FOR_IN
65244: IFFALSE 65276
// begin result := EnemyInRange ( i , 22 ) ;
65246: LD_ADDR_VAR 0 2
65250: PUSH
65251: LD_VAR 0 3
65255: PPUSH
65256: LD_INT 22
65258: PPUSH
65259: CALL 63514 0 2
65263: ST_TO_ADDR
// if result then
65264: LD_VAR 0 2
65268: IFFALSE 65274
// exit ;
65270: POP
65271: POP
65272: GO 65278
// end ;
65274: GO 65243
65276: POP
65277: POP
// end ;
65278: LD_VAR 0 2
65282: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65283: LD_INT 0
65285: PPUSH
65286: PPUSH
// if not units then
65287: LD_VAR 0 1
65291: NOT
65292: IFFALSE 65296
// exit ;
65294: GO 65366
// result := [ ] ;
65296: LD_ADDR_VAR 0 3
65300: PUSH
65301: EMPTY
65302: ST_TO_ADDR
// for i in units do
65303: LD_ADDR_VAR 0 4
65307: PUSH
65308: LD_VAR 0 1
65312: PUSH
65313: FOR_IN
65314: IFFALSE 65364
// if GetTag ( i ) = tag then
65316: LD_VAR 0 4
65320: PPUSH
65321: CALL_OW 110
65325: PUSH
65326: LD_VAR 0 2
65330: EQUAL
65331: IFFALSE 65362
// result := Insert ( result , result + 1 , i ) ;
65333: LD_ADDR_VAR 0 3
65337: PUSH
65338: LD_VAR 0 3
65342: PPUSH
65343: LD_VAR 0 3
65347: PUSH
65348: LD_INT 1
65350: PLUS
65351: PPUSH
65352: LD_VAR 0 4
65356: PPUSH
65357: CALL_OW 2
65361: ST_TO_ADDR
65362: GO 65313
65364: POP
65365: POP
// end ;
65366: LD_VAR 0 3
65370: RET
// export function IsDriver ( un ) ; begin
65371: LD_INT 0
65373: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65374: LD_ADDR_VAR 0 2
65378: PUSH
65379: LD_VAR 0 1
65383: PUSH
65384: LD_INT 55
65386: PUSH
65387: EMPTY
65388: LIST
65389: PPUSH
65390: CALL_OW 69
65394: IN
65395: ST_TO_ADDR
// end ;
65396: LD_VAR 0 2
65400: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65401: LD_INT 0
65403: PPUSH
65404: PPUSH
// list := [ ] ;
65405: LD_ADDR_VAR 0 5
65409: PUSH
65410: EMPTY
65411: ST_TO_ADDR
// case d of 0 :
65412: LD_VAR 0 3
65416: PUSH
65417: LD_INT 0
65419: DOUBLE
65420: EQUAL
65421: IFTRUE 65425
65423: GO 65558
65425: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65426: LD_ADDR_VAR 0 5
65430: PUSH
65431: LD_VAR 0 1
65435: PUSH
65436: LD_INT 4
65438: MINUS
65439: PUSH
65440: LD_VAR 0 2
65444: PUSH
65445: LD_INT 4
65447: MINUS
65448: PUSH
65449: LD_INT 2
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: LIST
65456: PUSH
65457: LD_VAR 0 1
65461: PUSH
65462: LD_INT 3
65464: MINUS
65465: PUSH
65466: LD_VAR 0 2
65470: PUSH
65471: LD_INT 1
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: LIST
65478: PUSH
65479: LD_VAR 0 1
65483: PUSH
65484: LD_INT 4
65486: PLUS
65487: PUSH
65488: LD_VAR 0 2
65492: PUSH
65493: LD_INT 4
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: PUSH
65501: LD_VAR 0 1
65505: PUSH
65506: LD_INT 3
65508: PLUS
65509: PUSH
65510: LD_VAR 0 2
65514: PUSH
65515: LD_INT 3
65517: PLUS
65518: PUSH
65519: LD_INT 5
65521: PUSH
65522: EMPTY
65523: LIST
65524: LIST
65525: LIST
65526: PUSH
65527: LD_VAR 0 1
65531: PUSH
65532: LD_VAR 0 2
65536: PUSH
65537: LD_INT 4
65539: PLUS
65540: PUSH
65541: LD_INT 0
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: LIST
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: ST_TO_ADDR
// end ; 1 :
65556: GO 66256
65558: LD_INT 1
65560: DOUBLE
65561: EQUAL
65562: IFTRUE 65566
65564: GO 65699
65566: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
65567: LD_ADDR_VAR 0 5
65571: PUSH
65572: LD_VAR 0 1
65576: PUSH
65577: LD_VAR 0 2
65581: PUSH
65582: LD_INT 4
65584: MINUS
65585: PUSH
65586: LD_INT 3
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: LIST
65593: PUSH
65594: LD_VAR 0 1
65598: PUSH
65599: LD_INT 3
65601: MINUS
65602: PUSH
65603: LD_VAR 0 2
65607: PUSH
65608: LD_INT 3
65610: MINUS
65611: PUSH
65612: LD_INT 2
65614: PUSH
65615: EMPTY
65616: LIST
65617: LIST
65618: LIST
65619: PUSH
65620: LD_VAR 0 1
65624: PUSH
65625: LD_INT 4
65627: MINUS
65628: PUSH
65629: LD_VAR 0 2
65633: PUSH
65634: LD_INT 1
65636: PUSH
65637: EMPTY
65638: LIST
65639: LIST
65640: LIST
65641: PUSH
65642: LD_VAR 0 1
65646: PUSH
65647: LD_VAR 0 2
65651: PUSH
65652: LD_INT 3
65654: PLUS
65655: PUSH
65656: LD_INT 0
65658: PUSH
65659: EMPTY
65660: LIST
65661: LIST
65662: LIST
65663: PUSH
65664: LD_VAR 0 1
65668: PUSH
65669: LD_INT 4
65671: PLUS
65672: PUSH
65673: LD_VAR 0 2
65677: PUSH
65678: LD_INT 4
65680: PLUS
65681: PUSH
65682: LD_INT 5
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: LIST
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: ST_TO_ADDR
// end ; 2 :
65697: GO 66256
65699: LD_INT 2
65701: DOUBLE
65702: EQUAL
65703: IFTRUE 65707
65705: GO 65836
65707: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
65708: LD_ADDR_VAR 0 5
65712: PUSH
65713: LD_VAR 0 1
65717: PUSH
65718: LD_VAR 0 2
65722: PUSH
65723: LD_INT 3
65725: MINUS
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: LIST
65734: PUSH
65735: LD_VAR 0 1
65739: PUSH
65740: LD_INT 4
65742: PLUS
65743: PUSH
65744: LD_VAR 0 2
65748: PUSH
65749: LD_INT 4
65751: PUSH
65752: EMPTY
65753: LIST
65754: LIST
65755: LIST
65756: PUSH
65757: LD_VAR 0 1
65761: PUSH
65762: LD_VAR 0 2
65766: PUSH
65767: LD_INT 4
65769: PLUS
65770: PUSH
65771: LD_INT 0
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: LIST
65778: PUSH
65779: LD_VAR 0 1
65783: PUSH
65784: LD_INT 3
65786: MINUS
65787: PUSH
65788: LD_VAR 0 2
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: PUSH
65801: LD_VAR 0 1
65805: PUSH
65806: LD_INT 4
65808: MINUS
65809: PUSH
65810: LD_VAR 0 2
65814: PUSH
65815: LD_INT 4
65817: MINUS
65818: PUSH
65819: LD_INT 2
65821: PUSH
65822: EMPTY
65823: LIST
65824: LIST
65825: LIST
65826: PUSH
65827: EMPTY
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: ST_TO_ADDR
// end ; 3 :
65834: GO 66256
65836: LD_INT 3
65838: DOUBLE
65839: EQUAL
65840: IFTRUE 65844
65842: GO 65977
65844: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
65845: LD_ADDR_VAR 0 5
65849: PUSH
65850: LD_VAR 0 1
65854: PUSH
65855: LD_INT 3
65857: PLUS
65858: PUSH
65859: LD_VAR 0 2
65863: PUSH
65864: LD_INT 4
65866: PUSH
65867: EMPTY
65868: LIST
65869: LIST
65870: LIST
65871: PUSH
65872: LD_VAR 0 1
65876: PUSH
65877: LD_INT 4
65879: PLUS
65880: PUSH
65881: LD_VAR 0 2
65885: PUSH
65886: LD_INT 4
65888: PLUS
65889: PUSH
65890: LD_INT 5
65892: PUSH
65893: EMPTY
65894: LIST
65895: LIST
65896: LIST
65897: PUSH
65898: LD_VAR 0 1
65902: PUSH
65903: LD_INT 4
65905: MINUS
65906: PUSH
65907: LD_VAR 0 2
65911: PUSH
65912: LD_INT 1
65914: PUSH
65915: EMPTY
65916: LIST
65917: LIST
65918: LIST
65919: PUSH
65920: LD_VAR 0 1
65924: PUSH
65925: LD_VAR 0 2
65929: PUSH
65930: LD_INT 4
65932: MINUS
65933: PUSH
65934: LD_INT 3
65936: PUSH
65937: EMPTY
65938: LIST
65939: LIST
65940: LIST
65941: PUSH
65942: LD_VAR 0 1
65946: PUSH
65947: LD_INT 3
65949: MINUS
65950: PUSH
65951: LD_VAR 0 2
65955: PUSH
65956: LD_INT 3
65958: MINUS
65959: PUSH
65960: LD_INT 2
65962: PUSH
65963: EMPTY
65964: LIST
65965: LIST
65966: LIST
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: ST_TO_ADDR
// end ; 4 :
65975: GO 66256
65977: LD_INT 4
65979: DOUBLE
65980: EQUAL
65981: IFTRUE 65985
65983: GO 66118
65985: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
65986: LD_ADDR_VAR 0 5
65990: PUSH
65991: LD_VAR 0 1
65995: PUSH
65996: LD_VAR 0 2
66000: PUSH
66001: LD_INT 4
66003: PLUS
66004: PUSH
66005: LD_INT 0
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: LIST
66012: PUSH
66013: LD_VAR 0 1
66017: PUSH
66018: LD_INT 3
66020: PLUS
66021: PUSH
66022: LD_VAR 0 2
66026: PUSH
66027: LD_INT 3
66029: PLUS
66030: PUSH
66031: LD_INT 5
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: LIST
66038: PUSH
66039: LD_VAR 0 1
66043: PUSH
66044: LD_INT 4
66046: PLUS
66047: PUSH
66048: LD_VAR 0 2
66052: PUSH
66053: LD_INT 4
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: LIST
66060: PUSH
66061: LD_VAR 0 1
66065: PUSH
66066: LD_VAR 0 2
66070: PUSH
66071: LD_INT 3
66073: MINUS
66074: PUSH
66075: LD_INT 3
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: LIST
66082: PUSH
66083: LD_VAR 0 1
66087: PUSH
66088: LD_INT 4
66090: MINUS
66091: PUSH
66092: LD_VAR 0 2
66096: PUSH
66097: LD_INT 4
66099: MINUS
66100: PUSH
66101: LD_INT 2
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: LIST
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: ST_TO_ADDR
// end ; 5 :
66116: GO 66256
66118: LD_INT 5
66120: DOUBLE
66121: EQUAL
66122: IFTRUE 66126
66124: GO 66255
66126: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66127: LD_ADDR_VAR 0 5
66131: PUSH
66132: LD_VAR 0 1
66136: PUSH
66137: LD_INT 4
66139: MINUS
66140: PUSH
66141: LD_VAR 0 2
66145: PUSH
66146: LD_INT 1
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: LIST
66153: PUSH
66154: LD_VAR 0 1
66158: PUSH
66159: LD_VAR 0 2
66163: PUSH
66164: LD_INT 4
66166: MINUS
66167: PUSH
66168: LD_INT 3
66170: PUSH
66171: EMPTY
66172: LIST
66173: LIST
66174: LIST
66175: PUSH
66176: LD_VAR 0 1
66180: PUSH
66181: LD_INT 4
66183: PLUS
66184: PUSH
66185: LD_VAR 0 2
66189: PUSH
66190: LD_INT 4
66192: PLUS
66193: PUSH
66194: LD_INT 5
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: LIST
66201: PUSH
66202: LD_VAR 0 1
66206: PUSH
66207: LD_INT 3
66209: PLUS
66210: PUSH
66211: LD_VAR 0 2
66215: PUSH
66216: LD_INT 4
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: LIST
66223: PUSH
66224: LD_VAR 0 1
66228: PUSH
66229: LD_VAR 0 2
66233: PUSH
66234: LD_INT 3
66236: PLUS
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: LIST
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: ST_TO_ADDR
// end ; end ;
66253: GO 66256
66255: POP
// result := list ;
66256: LD_ADDR_VAR 0 4
66260: PUSH
66261: LD_VAR 0 5
66265: ST_TO_ADDR
// end ;
66266: LD_VAR 0 4
66270: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66271: LD_INT 0
66273: PPUSH
66274: PPUSH
66275: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66276: LD_VAR 0 1
66280: NOT
66281: PUSH
66282: LD_VAR 0 2
66286: PUSH
66287: LD_INT 1
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: LD_INT 3
66295: PUSH
66296: LD_INT 4
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: LIST
66303: LIST
66304: IN
66305: NOT
66306: OR
66307: IFFALSE 66311
// exit ;
66309: GO 66403
// tmp := [ ] ;
66311: LD_ADDR_VAR 0 5
66315: PUSH
66316: EMPTY
66317: ST_TO_ADDR
// for i in units do
66318: LD_ADDR_VAR 0 4
66322: PUSH
66323: LD_VAR 0 1
66327: PUSH
66328: FOR_IN
66329: IFFALSE 66372
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66331: LD_ADDR_VAR 0 5
66335: PUSH
66336: LD_VAR 0 5
66340: PPUSH
66341: LD_VAR 0 5
66345: PUSH
66346: LD_INT 1
66348: PLUS
66349: PPUSH
66350: LD_VAR 0 4
66354: PPUSH
66355: LD_VAR 0 2
66359: PPUSH
66360: CALL_OW 259
66364: PPUSH
66365: CALL_OW 2
66369: ST_TO_ADDR
66370: GO 66328
66372: POP
66373: POP
// if not tmp then
66374: LD_VAR 0 5
66378: NOT
66379: IFFALSE 66383
// exit ;
66381: GO 66403
// result := SortListByListDesc ( units , tmp ) ;
66383: LD_ADDR_VAR 0 3
66387: PUSH
66388: LD_VAR 0 1
66392: PPUSH
66393: LD_VAR 0 5
66397: PPUSH
66398: CALL_OW 77
66402: ST_TO_ADDR
// end ;
66403: LD_VAR 0 3
66407: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66408: LD_INT 0
66410: PPUSH
66411: PPUSH
66412: PPUSH
// result := false ;
66413: LD_ADDR_VAR 0 3
66417: PUSH
66418: LD_INT 0
66420: ST_TO_ADDR
// x := GetX ( building ) ;
66421: LD_ADDR_VAR 0 4
66425: PUSH
66426: LD_VAR 0 2
66430: PPUSH
66431: CALL_OW 250
66435: ST_TO_ADDR
// y := GetY ( building ) ;
66436: LD_ADDR_VAR 0 5
66440: PUSH
66441: LD_VAR 0 2
66445: PPUSH
66446: CALL_OW 251
66450: ST_TO_ADDR
// if not building or not x or not y then
66451: LD_VAR 0 2
66455: NOT
66456: PUSH
66457: LD_VAR 0 4
66461: NOT
66462: OR
66463: PUSH
66464: LD_VAR 0 5
66468: NOT
66469: OR
66470: IFFALSE 66474
// exit ;
66472: GO 66566
// if GetTaskList ( unit ) then
66474: LD_VAR 0 1
66478: PPUSH
66479: CALL_OW 437
66483: IFFALSE 66566
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66485: LD_STRING e
66487: PUSH
66488: LD_VAR 0 1
66492: PPUSH
66493: CALL_OW 437
66497: PUSH
66498: LD_INT 1
66500: ARRAY
66501: PUSH
66502: LD_INT 1
66504: ARRAY
66505: EQUAL
66506: PUSH
66507: LD_VAR 0 4
66511: PUSH
66512: LD_VAR 0 1
66516: PPUSH
66517: CALL_OW 437
66521: PUSH
66522: LD_INT 1
66524: ARRAY
66525: PUSH
66526: LD_INT 2
66528: ARRAY
66529: EQUAL
66530: AND
66531: PUSH
66532: LD_VAR 0 5
66536: PUSH
66537: LD_VAR 0 1
66541: PPUSH
66542: CALL_OW 437
66546: PUSH
66547: LD_INT 1
66549: ARRAY
66550: PUSH
66551: LD_INT 3
66553: ARRAY
66554: EQUAL
66555: AND
66556: IFFALSE 66566
// result := true end ;
66558: LD_ADDR_VAR 0 3
66562: PUSH
66563: LD_INT 1
66565: ST_TO_ADDR
// end ;
66566: LD_VAR 0 3
66570: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
66571: LD_INT 0
66573: PPUSH
// result := false ;
66574: LD_ADDR_VAR 0 4
66578: PUSH
66579: LD_INT 0
66581: ST_TO_ADDR
// if GetTaskList ( unit ) then
66582: LD_VAR 0 1
66586: PPUSH
66587: CALL_OW 437
66591: IFFALSE 66674
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
66593: LD_STRING M
66595: PUSH
66596: LD_VAR 0 1
66600: PPUSH
66601: CALL_OW 437
66605: PUSH
66606: LD_INT 1
66608: ARRAY
66609: PUSH
66610: LD_INT 1
66612: ARRAY
66613: EQUAL
66614: PUSH
66615: LD_VAR 0 2
66619: PUSH
66620: LD_VAR 0 1
66624: PPUSH
66625: CALL_OW 437
66629: PUSH
66630: LD_INT 1
66632: ARRAY
66633: PUSH
66634: LD_INT 2
66636: ARRAY
66637: EQUAL
66638: AND
66639: PUSH
66640: LD_VAR 0 3
66644: PUSH
66645: LD_VAR 0 1
66649: PPUSH
66650: CALL_OW 437
66654: PUSH
66655: LD_INT 1
66657: ARRAY
66658: PUSH
66659: LD_INT 3
66661: ARRAY
66662: EQUAL
66663: AND
66664: IFFALSE 66674
// result := true ;
66666: LD_ADDR_VAR 0 4
66670: PUSH
66671: LD_INT 1
66673: ST_TO_ADDR
// end ; end ;
66674: LD_VAR 0 4
66678: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
66679: LD_INT 0
66681: PPUSH
66682: PPUSH
66683: PPUSH
66684: PPUSH
// if not unit or not area then
66685: LD_VAR 0 1
66689: NOT
66690: PUSH
66691: LD_VAR 0 2
66695: NOT
66696: OR
66697: IFFALSE 66701
// exit ;
66699: GO 66865
// tmp := AreaToList ( area , i ) ;
66701: LD_ADDR_VAR 0 6
66705: PUSH
66706: LD_VAR 0 2
66710: PPUSH
66711: LD_VAR 0 5
66715: PPUSH
66716: CALL_OW 517
66720: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
66721: LD_ADDR_VAR 0 5
66725: PUSH
66726: DOUBLE
66727: LD_INT 1
66729: DEC
66730: ST_TO_ADDR
66731: LD_VAR 0 6
66735: PUSH
66736: LD_INT 1
66738: ARRAY
66739: PUSH
66740: FOR_TO
66741: IFFALSE 66863
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
66743: LD_ADDR_VAR 0 7
66747: PUSH
66748: LD_VAR 0 6
66752: PUSH
66753: LD_INT 1
66755: ARRAY
66756: PUSH
66757: LD_VAR 0 5
66761: ARRAY
66762: PUSH
66763: LD_VAR 0 6
66767: PUSH
66768: LD_INT 2
66770: ARRAY
66771: PUSH
66772: LD_VAR 0 5
66776: ARRAY
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
66782: LD_VAR 0 7
66786: PUSH
66787: LD_INT 1
66789: ARRAY
66790: PPUSH
66791: LD_VAR 0 7
66795: PUSH
66796: LD_INT 2
66798: ARRAY
66799: PPUSH
66800: CALL_OW 428
66804: PUSH
66805: LD_INT 0
66807: EQUAL
66808: IFFALSE 66861
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
66810: LD_VAR 0 1
66814: PPUSH
66815: LD_VAR 0 7
66819: PUSH
66820: LD_INT 1
66822: ARRAY
66823: PPUSH
66824: LD_VAR 0 7
66828: PUSH
66829: LD_INT 2
66831: ARRAY
66832: PPUSH
66833: LD_VAR 0 3
66837: PPUSH
66838: CALL_OW 48
// result := IsPlaced ( unit ) ;
66842: LD_ADDR_VAR 0 4
66846: PUSH
66847: LD_VAR 0 1
66851: PPUSH
66852: CALL_OW 305
66856: ST_TO_ADDR
// exit ;
66857: POP
66858: POP
66859: GO 66865
// end ; end ;
66861: GO 66740
66863: POP
66864: POP
// end ;
66865: LD_VAR 0 4
66869: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
66870: LD_INT 0
66872: PPUSH
66873: PPUSH
66874: PPUSH
// if not side or side > 8 then
66875: LD_VAR 0 1
66879: NOT
66880: PUSH
66881: LD_VAR 0 1
66885: PUSH
66886: LD_INT 8
66888: GREATER
66889: OR
66890: IFFALSE 66894
// exit ;
66892: GO 67081
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
66894: LD_ADDR_VAR 0 4
66898: PUSH
66899: LD_INT 22
66901: PUSH
66902: LD_VAR 0 1
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 21
66913: PUSH
66914: LD_INT 3
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PPUSH
66925: CALL_OW 69
66929: ST_TO_ADDR
// if not tmp then
66930: LD_VAR 0 4
66934: NOT
66935: IFFALSE 66939
// exit ;
66937: GO 67081
// enable_addtolog := true ;
66939: LD_ADDR_OWVAR 81
66943: PUSH
66944: LD_INT 1
66946: ST_TO_ADDR
// AddToLog ( [ ) ;
66947: LD_STRING [
66949: PPUSH
66950: CALL_OW 561
// for i in tmp do
66954: LD_ADDR_VAR 0 3
66958: PUSH
66959: LD_VAR 0 4
66963: PUSH
66964: FOR_IN
66965: IFFALSE 67072
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
66967: LD_STRING [
66969: PUSH
66970: LD_VAR 0 3
66974: PPUSH
66975: CALL_OW 266
66979: STR
66980: PUSH
66981: LD_STRING , 
66983: STR
66984: PUSH
66985: LD_VAR 0 3
66989: PPUSH
66990: CALL_OW 250
66994: STR
66995: PUSH
66996: LD_STRING , 
66998: STR
66999: PUSH
67000: LD_VAR 0 3
67004: PPUSH
67005: CALL_OW 251
67009: STR
67010: PUSH
67011: LD_STRING , 
67013: STR
67014: PUSH
67015: LD_VAR 0 3
67019: PPUSH
67020: CALL_OW 254
67024: STR
67025: PUSH
67026: LD_STRING , 
67028: STR
67029: PUSH
67030: LD_VAR 0 3
67034: PPUSH
67035: LD_INT 1
67037: PPUSH
67038: CALL_OW 268
67042: STR
67043: PUSH
67044: LD_STRING , 
67046: STR
67047: PUSH
67048: LD_VAR 0 3
67052: PPUSH
67053: LD_INT 2
67055: PPUSH
67056: CALL_OW 268
67060: STR
67061: PUSH
67062: LD_STRING ],
67064: STR
67065: PPUSH
67066: CALL_OW 561
// end ;
67070: GO 66964
67072: POP
67073: POP
// AddToLog ( ]; ) ;
67074: LD_STRING ];
67076: PPUSH
67077: CALL_OW 561
// end ;
67081: LD_VAR 0 2
67085: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67086: LD_INT 0
67088: PPUSH
67089: PPUSH
67090: PPUSH
67091: PPUSH
67092: PPUSH
// if not area or not rate or not max then
67093: LD_VAR 0 1
67097: NOT
67098: PUSH
67099: LD_VAR 0 2
67103: NOT
67104: OR
67105: PUSH
67106: LD_VAR 0 4
67110: NOT
67111: OR
67112: IFFALSE 67116
// exit ;
67114: GO 67308
// while 1 do
67116: LD_INT 1
67118: IFFALSE 67308
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67120: LD_ADDR_VAR 0 9
67124: PUSH
67125: LD_VAR 0 1
67129: PPUSH
67130: LD_INT 1
67132: PPUSH
67133: CALL_OW 287
67137: PUSH
67138: LD_INT 10
67140: MUL
67141: ST_TO_ADDR
// r := rate / 10 ;
67142: LD_ADDR_VAR 0 7
67146: PUSH
67147: LD_VAR 0 2
67151: PUSH
67152: LD_INT 10
67154: DIVREAL
67155: ST_TO_ADDR
// time := 1 1$00 ;
67156: LD_ADDR_VAR 0 8
67160: PUSH
67161: LD_INT 2100
67163: ST_TO_ADDR
// if amount < min then
67164: LD_VAR 0 9
67168: PUSH
67169: LD_VAR 0 3
67173: LESS
67174: IFFALSE 67192
// r := r * 2 else
67176: LD_ADDR_VAR 0 7
67180: PUSH
67181: LD_VAR 0 7
67185: PUSH
67186: LD_INT 2
67188: MUL
67189: ST_TO_ADDR
67190: GO 67218
// if amount > max then
67192: LD_VAR 0 9
67196: PUSH
67197: LD_VAR 0 4
67201: GREATER
67202: IFFALSE 67218
// r := r / 2 ;
67204: LD_ADDR_VAR 0 7
67208: PUSH
67209: LD_VAR 0 7
67213: PUSH
67214: LD_INT 2
67216: DIVREAL
67217: ST_TO_ADDR
// time := time / r ;
67218: LD_ADDR_VAR 0 8
67222: PUSH
67223: LD_VAR 0 8
67227: PUSH
67228: LD_VAR 0 7
67232: DIVREAL
67233: ST_TO_ADDR
// if time < 0 then
67234: LD_VAR 0 8
67238: PUSH
67239: LD_INT 0
67241: LESS
67242: IFFALSE 67259
// time := time * - 1 ;
67244: LD_ADDR_VAR 0 8
67248: PUSH
67249: LD_VAR 0 8
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: MUL
67258: ST_TO_ADDR
// wait ( time ) ;
67259: LD_VAR 0 8
67263: PPUSH
67264: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67268: LD_INT 35
67270: PPUSH
67271: LD_INT 875
67273: PPUSH
67274: CALL_OW 12
67278: PPUSH
67279: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67283: LD_INT 1
67285: PPUSH
67286: LD_INT 5
67288: PPUSH
67289: CALL_OW 12
67293: PPUSH
67294: LD_VAR 0 1
67298: PPUSH
67299: LD_INT 1
67301: PPUSH
67302: CALL_OW 55
// end ;
67306: GO 67116
// end ;
67308: LD_VAR 0 5
67312: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67313: LD_INT 0
67315: PPUSH
67316: PPUSH
67317: PPUSH
67318: PPUSH
67319: PPUSH
67320: PPUSH
67321: PPUSH
67322: PPUSH
// if not turrets or not factories then
67323: LD_VAR 0 1
67327: NOT
67328: PUSH
67329: LD_VAR 0 2
67333: NOT
67334: OR
67335: IFFALSE 67339
// exit ;
67337: GO 67646
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67339: LD_ADDR_VAR 0 10
67343: PUSH
67344: LD_INT 5
67346: PUSH
67347: LD_INT 6
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 2
67356: PUSH
67357: LD_INT 4
67359: PUSH
67360: EMPTY
67361: LIST
67362: LIST
67363: PUSH
67364: LD_INT 3
67366: PUSH
67367: LD_INT 5
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: LIST
67378: PUSH
67379: LD_INT 24
67381: PUSH
67382: LD_INT 25
67384: PUSH
67385: EMPTY
67386: LIST
67387: LIST
67388: PUSH
67389: LD_INT 23
67391: PUSH
67392: LD_INT 27
67394: PUSH
67395: EMPTY
67396: LIST
67397: LIST
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 42
67405: PUSH
67406: LD_INT 43
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 44
67415: PUSH
67416: LD_INT 46
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 45
67425: PUSH
67426: LD_INT 47
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: EMPTY
67434: LIST
67435: LIST
67436: LIST
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: ST_TO_ADDR
// result := [ ] ;
67443: LD_ADDR_VAR 0 3
67447: PUSH
67448: EMPTY
67449: ST_TO_ADDR
// for i in turrets do
67450: LD_ADDR_VAR 0 4
67454: PUSH
67455: LD_VAR 0 1
67459: PUSH
67460: FOR_IN
67461: IFFALSE 67644
// begin nat := GetNation ( i ) ;
67463: LD_ADDR_VAR 0 7
67467: PUSH
67468: LD_VAR 0 4
67472: PPUSH
67473: CALL_OW 248
67477: ST_TO_ADDR
// weapon := 0 ;
67478: LD_ADDR_VAR 0 8
67482: PUSH
67483: LD_INT 0
67485: ST_TO_ADDR
// if not nat then
67486: LD_VAR 0 7
67490: NOT
67491: IFFALSE 67495
// continue ;
67493: GO 67460
// for j in list [ nat ] do
67495: LD_ADDR_VAR 0 5
67499: PUSH
67500: LD_VAR 0 10
67504: PUSH
67505: LD_VAR 0 7
67509: ARRAY
67510: PUSH
67511: FOR_IN
67512: IFFALSE 67553
// if GetBWeapon ( i ) = j [ 1 ] then
67514: LD_VAR 0 4
67518: PPUSH
67519: CALL_OW 269
67523: PUSH
67524: LD_VAR 0 5
67528: PUSH
67529: LD_INT 1
67531: ARRAY
67532: EQUAL
67533: IFFALSE 67551
// begin weapon := j [ 2 ] ;
67535: LD_ADDR_VAR 0 8
67539: PUSH
67540: LD_VAR 0 5
67544: PUSH
67545: LD_INT 2
67547: ARRAY
67548: ST_TO_ADDR
// break ;
67549: GO 67553
// end ;
67551: GO 67511
67553: POP
67554: POP
// if not weapon then
67555: LD_VAR 0 8
67559: NOT
67560: IFFALSE 67564
// continue ;
67562: GO 67460
// for k in factories do
67564: LD_ADDR_VAR 0 6
67568: PUSH
67569: LD_VAR 0 2
67573: PUSH
67574: FOR_IN
67575: IFFALSE 67640
// begin weapons := AvailableWeaponList ( k ) ;
67577: LD_ADDR_VAR 0 9
67581: PUSH
67582: LD_VAR 0 6
67586: PPUSH
67587: CALL_OW 478
67591: ST_TO_ADDR
// if not weapons then
67592: LD_VAR 0 9
67596: NOT
67597: IFFALSE 67601
// continue ;
67599: GO 67574
// if weapon in weapons then
67601: LD_VAR 0 8
67605: PUSH
67606: LD_VAR 0 9
67610: IN
67611: IFFALSE 67638
// begin result := [ i , weapon ] ;
67613: LD_ADDR_VAR 0 3
67617: PUSH
67618: LD_VAR 0 4
67622: PUSH
67623: LD_VAR 0 8
67627: PUSH
67628: EMPTY
67629: LIST
67630: LIST
67631: ST_TO_ADDR
// exit ;
67632: POP
67633: POP
67634: POP
67635: POP
67636: GO 67646
// end ; end ;
67638: GO 67574
67640: POP
67641: POP
// end ;
67642: GO 67460
67644: POP
67645: POP
// end ;
67646: LD_VAR 0 3
67650: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
67651: LD_INT 0
67653: PPUSH
// if not side or side > 8 then
67654: LD_VAR 0 3
67658: NOT
67659: PUSH
67660: LD_VAR 0 3
67664: PUSH
67665: LD_INT 8
67667: GREATER
67668: OR
67669: IFFALSE 67673
// exit ;
67671: GO 67732
// if not range then
67673: LD_VAR 0 4
67677: NOT
67678: IFFALSE 67689
// range := - 12 ;
67680: LD_ADDR_VAR 0 4
67684: PUSH
67685: LD_INT 12
67687: NEG
67688: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
67689: LD_VAR 0 1
67693: PPUSH
67694: LD_VAR 0 2
67698: PPUSH
67699: LD_VAR 0 3
67703: PPUSH
67704: LD_VAR 0 4
67708: PPUSH
67709: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
67713: LD_VAR 0 1
67717: PPUSH
67718: LD_VAR 0 2
67722: PPUSH
67723: LD_VAR 0 3
67727: PPUSH
67728: CALL_OW 331
// end ;
67732: LD_VAR 0 5
67736: RET
// export function Video ( mode ) ; begin
67737: LD_INT 0
67739: PPUSH
// ingame_video = mode ;
67740: LD_ADDR_OWVAR 52
67744: PUSH
67745: LD_VAR 0 1
67749: ST_TO_ADDR
// interface_hidden = mode ;
67750: LD_ADDR_OWVAR 54
67754: PUSH
67755: LD_VAR 0 1
67759: ST_TO_ADDR
// end ;
67760: LD_VAR 0 2
67764: RET
// export function Join ( array , element ) ; begin
67765: LD_INT 0
67767: PPUSH
// result := Replace ( array , array + 1 , element ) ;
67768: LD_ADDR_VAR 0 3
67772: PUSH
67773: LD_VAR 0 1
67777: PPUSH
67778: LD_VAR 0 1
67782: PUSH
67783: LD_INT 1
67785: PLUS
67786: PPUSH
67787: LD_VAR 0 2
67791: PPUSH
67792: CALL_OW 1
67796: ST_TO_ADDR
// end ;
67797: LD_VAR 0 3
67801: RET
// export function JoinUnion ( array , element ) ; begin
67802: LD_INT 0
67804: PPUSH
// result := array union element ;
67805: LD_ADDR_VAR 0 3
67809: PUSH
67810: LD_VAR 0 1
67814: PUSH
67815: LD_VAR 0 2
67819: UNION
67820: ST_TO_ADDR
// end ;
67821: LD_VAR 0 3
67825: RET
// export function GetBehemoths ( side ) ; begin
67826: LD_INT 0
67828: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
67829: LD_ADDR_VAR 0 2
67833: PUSH
67834: LD_INT 22
67836: PUSH
67837: LD_VAR 0 1
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 31
67848: PUSH
67849: LD_INT 25
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PPUSH
67860: CALL_OW 69
67864: ST_TO_ADDR
// end ;
67865: LD_VAR 0 2
67869: RET
// export function Shuffle ( array ) ; var i , index ; begin
67870: LD_INT 0
67872: PPUSH
67873: PPUSH
67874: PPUSH
// result := [ ] ;
67875: LD_ADDR_VAR 0 2
67879: PUSH
67880: EMPTY
67881: ST_TO_ADDR
// if not array then
67882: LD_VAR 0 1
67886: NOT
67887: IFFALSE 67891
// exit ;
67889: GO 67990
// Randomize ;
67891: CALL_OW 10
// for i = array downto 1 do
67895: LD_ADDR_VAR 0 3
67899: PUSH
67900: DOUBLE
67901: LD_VAR 0 1
67905: INC
67906: ST_TO_ADDR
67907: LD_INT 1
67909: PUSH
67910: FOR_DOWNTO
67911: IFFALSE 67988
// begin index := rand ( 1 , array ) ;
67913: LD_ADDR_VAR 0 4
67917: PUSH
67918: LD_INT 1
67920: PPUSH
67921: LD_VAR 0 1
67925: PPUSH
67926: CALL_OW 12
67930: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
67931: LD_ADDR_VAR 0 2
67935: PUSH
67936: LD_VAR 0 2
67940: PPUSH
67941: LD_VAR 0 2
67945: PUSH
67946: LD_INT 1
67948: PLUS
67949: PPUSH
67950: LD_VAR 0 1
67954: PUSH
67955: LD_VAR 0 4
67959: ARRAY
67960: PPUSH
67961: CALL_OW 2
67965: ST_TO_ADDR
// array := Delete ( array , index ) ;
67966: LD_ADDR_VAR 0 1
67970: PUSH
67971: LD_VAR 0 1
67975: PPUSH
67976: LD_VAR 0 4
67980: PPUSH
67981: CALL_OW 3
67985: ST_TO_ADDR
// end ;
67986: GO 67910
67988: POP
67989: POP
// end ;
67990: LD_VAR 0 2
67994: RET
// export function GetBaseMaterials ( base ) ; begin
67995: LD_INT 0
67997: PPUSH
// result := [ 0 , 0 , 0 ] ;
67998: LD_ADDR_VAR 0 2
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: LD_INT 0
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: ST_TO_ADDR
// if not base then
68017: LD_VAR 0 1
68021: NOT
68022: IFFALSE 68026
// exit ;
68024: GO 68075
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68026: LD_ADDR_VAR 0 2
68030: PUSH
68031: LD_VAR 0 1
68035: PPUSH
68036: LD_INT 1
68038: PPUSH
68039: CALL_OW 275
68043: PUSH
68044: LD_VAR 0 1
68048: PPUSH
68049: LD_INT 2
68051: PPUSH
68052: CALL_OW 275
68056: PUSH
68057: LD_VAR 0 1
68061: PPUSH
68062: LD_INT 3
68064: PPUSH
68065: CALL_OW 275
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: LIST
68074: ST_TO_ADDR
// end ;
68075: LD_VAR 0 2
68079: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68080: LD_INT 0
68082: PPUSH
68083: PPUSH
// result := array ;
68084: LD_ADDR_VAR 0 3
68088: PUSH
68089: LD_VAR 0 1
68093: ST_TO_ADDR
// if size > 0 then
68094: LD_VAR 0 2
68098: PUSH
68099: LD_INT 0
68101: GREATER
68102: IFFALSE 68148
// for i := array downto size do
68104: LD_ADDR_VAR 0 4
68108: PUSH
68109: DOUBLE
68110: LD_VAR 0 1
68114: INC
68115: ST_TO_ADDR
68116: LD_VAR 0 2
68120: PUSH
68121: FOR_DOWNTO
68122: IFFALSE 68146
// result := Delete ( result , result ) ;
68124: LD_ADDR_VAR 0 3
68128: PUSH
68129: LD_VAR 0 3
68133: PPUSH
68134: LD_VAR 0 3
68138: PPUSH
68139: CALL_OW 3
68143: ST_TO_ADDR
68144: GO 68121
68146: POP
68147: POP
// end ;
68148: LD_VAR 0 3
68152: RET
// export function ComExit ( unit ) ; var tmp ; begin
68153: LD_INT 0
68155: PPUSH
68156: PPUSH
// if not IsInUnit ( unit ) then
68157: LD_VAR 0 1
68161: PPUSH
68162: CALL_OW 310
68166: NOT
68167: IFFALSE 68171
// exit ;
68169: GO 68231
// tmp := IsInUnit ( unit ) ;
68171: LD_ADDR_VAR 0 3
68175: PUSH
68176: LD_VAR 0 1
68180: PPUSH
68181: CALL_OW 310
68185: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68186: LD_VAR 0 3
68190: PPUSH
68191: CALL_OW 247
68195: PUSH
68196: LD_INT 2
68198: EQUAL
68199: IFFALSE 68212
// ComExitVehicle ( unit ) else
68201: LD_VAR 0 1
68205: PPUSH
68206: CALL_OW 121
68210: GO 68221
// ComExitBuilding ( unit ) ;
68212: LD_VAR 0 1
68216: PPUSH
68217: CALL_OW 122
// result := tmp ;
68221: LD_ADDR_VAR 0 2
68225: PUSH
68226: LD_VAR 0 3
68230: ST_TO_ADDR
// end ;
68231: LD_VAR 0 2
68235: RET
// export function ResetHc ; begin
68236: LD_INT 0
68238: PPUSH
// InitHc ;
68239: CALL_OW 19
// hc_importance := 0 ;
68243: LD_ADDR_OWVAR 32
68247: PUSH
68248: LD_INT 0
68250: ST_TO_ADDR
// end ;
68251: LD_VAR 0 1
68255: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68256: LD_INT 0
68258: PPUSH
68259: PPUSH
68260: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68261: LD_ADDR_VAR 0 6
68265: PUSH
68266: LD_VAR 0 1
68270: PUSH
68271: LD_VAR 0 3
68275: PLUS
68276: PUSH
68277: LD_INT 2
68279: DIV
68280: ST_TO_ADDR
// if _x < 0 then
68281: LD_VAR 0 6
68285: PUSH
68286: LD_INT 0
68288: LESS
68289: IFFALSE 68306
// _x := _x * - 1 ;
68291: LD_ADDR_VAR 0 6
68295: PUSH
68296: LD_VAR 0 6
68300: PUSH
68301: LD_INT 1
68303: NEG
68304: MUL
68305: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68306: LD_ADDR_VAR 0 7
68310: PUSH
68311: LD_VAR 0 2
68315: PUSH
68316: LD_VAR 0 4
68320: PLUS
68321: PUSH
68322: LD_INT 2
68324: DIV
68325: ST_TO_ADDR
// if _y < 0 then
68326: LD_VAR 0 7
68330: PUSH
68331: LD_INT 0
68333: LESS
68334: IFFALSE 68351
// _y := _y * - 1 ;
68336: LD_ADDR_VAR 0 7
68340: PUSH
68341: LD_VAR 0 7
68345: PUSH
68346: LD_INT 1
68348: NEG
68349: MUL
68350: ST_TO_ADDR
// result := [ _x , _y ] ;
68351: LD_ADDR_VAR 0 5
68355: PUSH
68356: LD_VAR 0 6
68360: PUSH
68361: LD_VAR 0 7
68365: PUSH
68366: EMPTY
68367: LIST
68368: LIST
68369: ST_TO_ADDR
// end ;
68370: LD_VAR 0 5
68374: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68375: LD_INT 0
68377: PPUSH
68378: PPUSH
68379: PPUSH
68380: PPUSH
// task := GetTaskList ( unit ) ;
68381: LD_ADDR_VAR 0 7
68385: PUSH
68386: LD_VAR 0 1
68390: PPUSH
68391: CALL_OW 437
68395: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68396: LD_VAR 0 7
68400: NOT
68401: PUSH
68402: LD_VAR 0 1
68406: PPUSH
68407: LD_VAR 0 2
68411: PPUSH
68412: CALL_OW 308
68416: NOT
68417: AND
68418: IFFALSE 68422
// exit ;
68420: GO 68540
// if IsInArea ( unit , area ) then
68422: LD_VAR 0 1
68426: PPUSH
68427: LD_VAR 0 2
68431: PPUSH
68432: CALL_OW 308
68436: IFFALSE 68454
// begin ComMoveToArea ( unit , goAway ) ;
68438: LD_VAR 0 1
68442: PPUSH
68443: LD_VAR 0 3
68447: PPUSH
68448: CALL_OW 113
// exit ;
68452: GO 68540
// end ; if task [ 1 ] [ 1 ] <> M then
68454: LD_VAR 0 7
68458: PUSH
68459: LD_INT 1
68461: ARRAY
68462: PUSH
68463: LD_INT 1
68465: ARRAY
68466: PUSH
68467: LD_STRING M
68469: NONEQUAL
68470: IFFALSE 68474
// exit ;
68472: GO 68540
// x := task [ 1 ] [ 2 ] ;
68474: LD_ADDR_VAR 0 5
68478: PUSH
68479: LD_VAR 0 7
68483: PUSH
68484: LD_INT 1
68486: ARRAY
68487: PUSH
68488: LD_INT 2
68490: ARRAY
68491: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
68492: LD_ADDR_VAR 0 6
68496: PUSH
68497: LD_VAR 0 7
68501: PUSH
68502: LD_INT 1
68504: ARRAY
68505: PUSH
68506: LD_INT 3
68508: ARRAY
68509: ST_TO_ADDR
// if InArea ( x , y , area ) then
68510: LD_VAR 0 5
68514: PPUSH
68515: LD_VAR 0 6
68519: PPUSH
68520: LD_VAR 0 2
68524: PPUSH
68525: CALL_OW 309
68529: IFFALSE 68540
// ComStop ( unit ) ;
68531: LD_VAR 0 1
68535: PPUSH
68536: CALL_OW 141
// end ;
68540: LD_VAR 0 4
68544: RET
// export function Abs ( value ) ; begin
68545: LD_INT 0
68547: PPUSH
// result := value ;
68548: LD_ADDR_VAR 0 2
68552: PUSH
68553: LD_VAR 0 1
68557: ST_TO_ADDR
// if value < 0 then
68558: LD_VAR 0 1
68562: PUSH
68563: LD_INT 0
68565: LESS
68566: IFFALSE 68583
// result := value * - 1 ;
68568: LD_ADDR_VAR 0 2
68572: PUSH
68573: LD_VAR 0 1
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: MUL
68582: ST_TO_ADDR
// end ;
68583: LD_VAR 0 2
68587: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
68588: LD_INT 0
68590: PPUSH
68591: PPUSH
68592: PPUSH
68593: PPUSH
68594: PPUSH
68595: PPUSH
68596: PPUSH
68597: PPUSH
// if not unit or not building then
68598: LD_VAR 0 1
68602: NOT
68603: PUSH
68604: LD_VAR 0 2
68608: NOT
68609: OR
68610: IFFALSE 68614
// exit ;
68612: GO 68840
// x := GetX ( building ) ;
68614: LD_ADDR_VAR 0 4
68618: PUSH
68619: LD_VAR 0 2
68623: PPUSH
68624: CALL_OW 250
68628: ST_TO_ADDR
// y := GetY ( building ) ;
68629: LD_ADDR_VAR 0 6
68633: PUSH
68634: LD_VAR 0 2
68638: PPUSH
68639: CALL_OW 251
68643: ST_TO_ADDR
// d := GetDir ( building ) ;
68644: LD_ADDR_VAR 0 8
68648: PUSH
68649: LD_VAR 0 2
68653: PPUSH
68654: CALL_OW 254
68658: ST_TO_ADDR
// r := 4 ;
68659: LD_ADDR_VAR 0 9
68663: PUSH
68664: LD_INT 4
68666: ST_TO_ADDR
// for i := 1 to 5 do
68667: LD_ADDR_VAR 0 10
68671: PUSH
68672: DOUBLE
68673: LD_INT 1
68675: DEC
68676: ST_TO_ADDR
68677: LD_INT 5
68679: PUSH
68680: FOR_TO
68681: IFFALSE 68838
// begin _x := ShiftX ( x , d , r + i ) ;
68683: LD_ADDR_VAR 0 5
68687: PUSH
68688: LD_VAR 0 4
68692: PPUSH
68693: LD_VAR 0 8
68697: PPUSH
68698: LD_VAR 0 9
68702: PUSH
68703: LD_VAR 0 10
68707: PLUS
68708: PPUSH
68709: CALL_OW 272
68713: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
68714: LD_ADDR_VAR 0 7
68718: PUSH
68719: LD_VAR 0 6
68723: PPUSH
68724: LD_VAR 0 8
68728: PPUSH
68729: LD_VAR 0 9
68733: PUSH
68734: LD_VAR 0 10
68738: PLUS
68739: PPUSH
68740: CALL_OW 273
68744: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
68745: LD_VAR 0 5
68749: PPUSH
68750: LD_VAR 0 7
68754: PPUSH
68755: CALL_OW 488
68759: PUSH
68760: LD_VAR 0 5
68764: PPUSH
68765: LD_VAR 0 7
68769: PPUSH
68770: CALL_OW 428
68774: PPUSH
68775: CALL_OW 247
68779: PUSH
68780: LD_INT 3
68782: PUSH
68783: LD_INT 2
68785: PUSH
68786: EMPTY
68787: LIST
68788: LIST
68789: IN
68790: NOT
68791: AND
68792: IFFALSE 68836
// begin ComMoveXY ( unit , _x , _y ) ;
68794: LD_VAR 0 1
68798: PPUSH
68799: LD_VAR 0 5
68803: PPUSH
68804: LD_VAR 0 7
68808: PPUSH
68809: CALL_OW 111
// result := [ _x , _y ] ;
68813: LD_ADDR_VAR 0 3
68817: PUSH
68818: LD_VAR 0 5
68822: PUSH
68823: LD_VAR 0 7
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: ST_TO_ADDR
// exit ;
68832: POP
68833: POP
68834: GO 68840
// end ; end ;
68836: GO 68680
68838: POP
68839: POP
// end ;
68840: LD_VAR 0 3
68844: RET
