// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export introEnd , apemansContact , attackedByApeman ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , amSolEscape ; export evacuationAvailable ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// InitMapConfig ;
   8: CALL 216 0 0
// PrepareNature ;
  12: CALL 7095 0 0
// PrepareRussian ;
  16: CALL 6687 0 0
// PrepareAmericans ;
  20: CALL 6453 0 0
// introEnd = false ;
  24: LD_ADDR_EXP 1
  28: PUSH
  29: LD_INT 0
  31: ST_TO_ADDR
// apemansContact = false ;
  32: LD_ADDR_EXP 2
  36: PUSH
  37: LD_INT 0
  39: ST_TO_ADDR
// attackedByApeman = false ;
  40: LD_ADDR_EXP 3
  44: PUSH
  45: LD_INT 0
  47: ST_TO_ADDR
// spotWaterfall = false ;
  48: LD_ADDR_EXP 4
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// gnyevkoSaved = false ;
  56: LD_ADDR_EXP 8
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// meetPokryshkin = false ;
  64: LD_ADDR_EXP 10
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// goToHill = false ;
  72: LD_ADDR_EXP 11
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
  80: LD_ADDR_EXP 9
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// traitor = false ;
  88: LD_ADDR_EXP 14
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// gladstoneEscape = false ;
  96: LD_ADDR_EXP 15
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// amSolEscape = false ;
 104: LD_ADDR_EXP 16
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// belkovWaitForGorky = false ;
 112: LD_ADDR_EXP 12
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// evacuationAvailable = false ;
 120: LD_ADDR_EXP 17
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// radioDropPosition = [ ] ;
 128: LD_ADDR_EXP 7
 132: PUSH
 133: EMPTY
 134: ST_TO_ADDR
// apemanWithRadio = FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 135: LD_ADDR_EXP 6
 139: PUSH
 140: LD_INT 22
 142: PUSH
 143: LD_INT 0
 145: PUSH
 146: EMPTY
 147: LIST
 148: LIST
 149: PUSH
 150: LD_INT 25
 152: PUSH
 153: LD_INT 12
 155: PUSH
 156: EMPTY
 157: LIST
 158: LIST
 159: PUSH
 160: EMPTY
 161: LIST
 162: LIST
 163: PPUSH
 164: CALL_OW 69
 168: PUSH
 169: LD_INT 1
 171: PPUSH
 172: LD_INT 22
 174: PUSH
 175: LD_INT 0
 177: PUSH
 178: EMPTY
 179: LIST
 180: LIST
 181: PUSH
 182: LD_INT 25
 184: PUSH
 185: LD_INT 12
 187: PUSH
 188: EMPTY
 189: LIST
 190: LIST
 191: PUSH
 192: EMPTY
 193: LIST
 194: LIST
 195: PPUSH
 196: CALL_OW 69
 200: PPUSH
 201: CALL_OW 12
 205: ARRAY
 206: ST_TO_ADDR
// MissionIntro ;
 207: CALL 725 0 0
// end ; end_of_file
 211: LD_VAR 0 1
 215: RET
// export function InitMapConfig ; begin
 216: LD_INT 0
 218: PPUSH
// BaseMapConfig ;
 219: CALL 236 0 0
// MissionMapConfig ;
 223: CALL 322 0 0
// InitDevelopMode ;
 227: CALL 497 0 0
// end ;
 231: LD_VAR 0 1
 235: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 236: LD_INT 0
 238: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 239: LD_ADDR_EXP 18
 243: PUSH
 244: LD_INT 5
 246: PUSH
 247: LD_INT 4
 249: PUSH
 250: LD_INT 2
 252: PUSH
 253: LD_INT 2
 255: PUSH
 256: EMPTY
 257: LIST
 258: LIST
 259: LIST
 260: LIST
 261: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 2
 269: PUSH
 270: LD_INT 2
 272: PUSH
 273: LD_INT 2
 275: PUSH
 276: LD_INT 2
 278: PUSH
 279: EMPTY
 280: LIST
 281: LIST
 282: LIST
 283: LIST
 284: ST_TO_ADDR
// animalsAgression = 0 ;
 285: LD_ADDR_EXP 20
 289: PUSH
 290: LD_INT 0
 292: ST_TO_ADDR
// debugMode = 0 ;
 293: LD_ADDR_EXP 23
 297: PUSH
 298: LD_INT 0
 300: ST_TO_ADDR
// missionPrefix = 01 ;
 301: LD_ADDR_EXP 21
 305: PUSH
 306: LD_STRING 01
 308: ST_TO_ADDR
// previousMissionPrefix =  ;
 309: LD_ADDR_EXP 22
 313: PUSH
 314: LD_STRING 
 316: ST_TO_ADDR
// end ;
 317: LD_VAR 0 1
 321: RET
// export americanBunkerHP , apeAgression , amApeAmount , amSoldSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions ; function MissionMapConfig ; begin
 322: LD_INT 0
 324: PPUSH
// americanBunkerHP = [ 20 , 20 , 20 ] [ Difficulty ] ;
 325: LD_ADDR_EXP 24
 329: PUSH
 330: LD_INT 20
 332: PUSH
 333: LD_INT 20
 335: PUSH
 336: LD_INT 20
 338: PUSH
 339: EMPTY
 340: LIST
 341: LIST
 342: LIST
 343: PUSH
 344: LD_OWVAR 67
 348: ARRAY
 349: ST_TO_ADDR
// apeAgression = rand ( - 5 , 5 ) * Difficulty ;
 350: LD_ADDR_EXP 25
 354: PUSH
 355: LD_INT 5
 357: NEG
 358: PPUSH
 359: LD_INT 5
 361: PPUSH
 362: CALL_OW 12
 366: PUSH
 367: LD_OWVAR 67
 371: MUL
 372: ST_TO_ADDR
// amApeAmount = [ 2 , 2 , 2 ] [ Difficulty ] ;
 373: LD_ADDR_EXP 26
 377: PUSH
 378: LD_INT 2
 380: PUSH
 381: LD_INT 2
 383: PUSH
 384: LD_INT 2
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_OWVAR 67
 396: ARRAY
 397: ST_TO_ADDR
// amSoldSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 398: LD_ADDR_EXP 27
 402: PUSH
 403: LD_INT 0
 405: PUSH
 406: LD_INT 1
 408: PUSH
 409: LD_INT 2
 411: PUSH
 412: EMPTY
 413: LIST
 414: LIST
 415: LIST
 416: PUSH
 417: LD_OWVAR 67
 421: ARRAY
 422: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 423: LD_ADDR_EXP 28
 427: PUSH
 428: LD_INT 78
 430: PUSH
 431: LD_INT 87
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 15 , 7 ] , [ 99 , 7 ] , [ 131 , 81 ] ] [ Rand ( 1 , gnyevkoSpawnPositions ) ] ;
 438: LD_ADDR_EXP 29
 442: PUSH
 443: LD_INT 15
 445: PUSH
 446: LD_INT 7
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 99
 455: PUSH
 456: LD_INT 7
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: LD_INT 131
 465: PUSH
 466: LD_INT 81
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_INT 1
 480: PPUSH
 481: LD_EXP 29
 485: PPUSH
 486: CALL_OW 12
 490: ARRAY
 491: ST_TO_ADDR
// end ;
 492: LD_VAR 0 1
 496: RET
// function InitDevelopMode ; var i ; begin
 497: LD_INT 0
 499: PPUSH
 500: PPUSH
// if not debugMode then
 501: LD_EXP 23
 505: NOT
 506: IFFALSE 510
// exit ;
 508: GO 720
// FogOff ( your_side ) ;
 510: LD_OWVAR 2
 514: PPUSH
 515: CALL_OW 344
// repeat for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_and , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 519: LD_ADDR_VAR 0 2
 523: PUSH
 524: LD_INT 22
 526: PUSH
 527: LD_INT 3
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: LD_INT 1
 536: PUSH
 537: LD_INT 21
 539: PUSH
 540: LD_INT 1
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: PUSH
 547: LD_INT 21
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PPUSH
 566: CALL_OW 69
 570: PUSH
 571: FOR_IN
 572: IFFALSE 588
// SetLives ( i , 1000 ) ;
 574: LD_VAR 0 2
 578: PPUSH
 579: LD_INT 1000
 581: PPUSH
 582: CALL_OW 234
 586: GO 571
 588: POP
 589: POP
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 590: LD_ADDR_VAR 0 2
 594: PUSH
 595: LD_INT 22
 597: PUSH
 598: LD_INT 3
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: PUSH
 605: LD_INT 2
 607: PUSH
 608: LD_INT 30
 610: PUSH
 611: LD_INT 0
 613: PUSH
 614: EMPTY
 615: LIST
 616: LIST
 617: PUSH
 618: LD_INT 30
 620: PUSH
 621: LD_INT 1
 623: PUSH
 624: EMPTY
 625: LIST
 626: LIST
 627: PUSH
 628: EMPTY
 629: LIST
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PPUSH
 637: CALL_OW 69
 641: PUSH
 642: FOR_IN
 643: IFFALSE 707
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 645: LD_VAR 0 2
 649: PPUSH
 650: CALL_OW 274
 654: PPUSH
 655: LD_INT 1
 657: PPUSH
 658: LD_INT 9999
 660: PPUSH
 661: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 665: LD_VAR 0 2
 669: PPUSH
 670: CALL_OW 274
 674: PPUSH
 675: LD_INT 2
 677: PPUSH
 678: LD_INT 9999
 680: PPUSH
 681: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 685: LD_VAR 0 2
 689: PPUSH
 690: CALL_OW 274
 694: PPUSH
 695: LD_INT 3
 697: PPUSH
 698: LD_INT 9999
 700: PPUSH
 701: CALL_OW 277
// end ;
 705: GO 642
 707: POP
 708: POP
// wait ( 0 0$1 ) ;
 709: LD_INT 35
 711: PPUSH
 712: CALL_OW 67
// until ( true ) ;
 716: LD_INT 1
 718: IFFALSE 519
// end ; end_of_file
 720: LD_VAR 0 1
 724: RET
// export function MissionIntro ; begin
 725: LD_INT 0
 727: PPUSH
// InGameOn ;
 728: CALL_OW 8
// CenterNowOnXY ( burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] ) ;
 732: LD_EXP 28
 736: PUSH
 737: LD_INT 1
 739: ARRAY
 740: PPUSH
 741: LD_EXP 28
 745: PUSH
 746: LD_INT 2
 748: ARRAY
 749: PPUSH
 750: CALL_OW 86
// wait ( 0 0$3 ) ;
 754: LD_INT 105
 756: PPUSH
 757: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 761: LD_EXP 33
 765: PPUSH
 766: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 770: LD_EXP 33
 774: PPUSH
 775: LD_STRING D1-Bur-1
 777: PPUSH
 778: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 782: LD_EXP 33
 786: PPUSH
 787: LD_INT 94
 789: PPUSH
 790: LD_INT 89
 792: PPUSH
 793: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
 797: LD_EXP 33
 801: PPUSH
 802: CALL_OW 87
// Say ( Burlak , D1-Bur-1a ) ;
 806: LD_EXP 33
 810: PPUSH
 811: LD_STRING D1-Bur-1a
 813: PPUSH
 814: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 818: LD_EXP 33
 822: PPUSH
 823: LD_INT 102
 825: PPUSH
 826: LD_INT 88
 828: PPUSH
 829: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
 833: LD_EXP 33
 837: PPUSH
 838: CALL_OW 87
// Say ( Burlak , D1-Bur-1b ) ;
 842: LD_EXP 33
 846: PPUSH
 847: LD_STRING D1-Bur-1b
 849: PPUSH
 850: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
 854: LD_EXP 33
 858: PPUSH
 859: CALL_OW 87
// InGameOff ;
 863: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 867: LD_STRING M1
 869: PPUSH
 870: CALL_OW 337
// SaveForQuickRestart ;
 874: CALL_OW 22
// introEnd = true ;
 878: LD_ADDR_EXP 1
 882: PUSH
 883: LD_INT 1
 885: ST_TO_ADDR
// end ;
 886: LD_VAR 0 1
 890: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
 891: LD_EXP 33
 895: PPUSH
 896: LD_INT 74
 898: PPUSH
 899: LD_INT 88
 901: PPUSH
 902: CALL_OW 297
 906: PUSH
 907: LD_INT 5
 909: LESS
 910: PUSH
 911: LD_EXP 1
 915: AND
 916: IFFALSE 941
 918: GO 920
 920: DISABLE
// begin spotWaterfall = true ;
 921: LD_ADDR_EXP 4
 925: PUSH
 926: LD_INT 1
 928: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
 929: LD_EXP 33
 933: PPUSH
 934: LD_STRING DWaterfall-Bur-1
 936: PPUSH
 937: CALL_OW 88
// end ;
 941: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
 942: LD_EXP 33
 946: PPUSH
 947: LD_INT 130
 949: PPUSH
 950: LD_INT 96
 952: PPUSH
 953: CALL_OW 297
 957: PUSH
 958: LD_INT 5
 960: LESS
 961: PUSH
 962: LD_EXP 1
 966: AND
 967: IFFALSE 984
 969: GO 971
 971: DISABLE
// begin Say ( Burlak , DCorpse-Bur-1 ) ;
 972: LD_EXP 33
 976: PPUSH
 977: LD_STRING DCorpse-Bur-1
 979: PPUSH
 980: CALL_OW 88
// end ;
 984: END
// every 0 0$1 trigger not apemansContact do var apeman ;
 985: LD_EXP 2
 989: NOT
 990: IFFALSE 1086
 992: GO 994
 994: DISABLE
 995: LD_INT 0
 997: PPUSH
// begin enable ;
 998: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , apeman ] ] ) do
 999: LD_ADDR_VAR 0 1
1003: PUSH
1004: LD_INT 22
1006: PUSH
1007: LD_INT 0
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: PUSH
1014: LD_INT 25
1016: PUSH
1017: LD_VAR 0 1
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: EMPTY
1027: LIST
1028: LIST
1029: PPUSH
1030: CALL_OW 69
1034: PUSH
1035: FOR_IN
1036: IFFALSE 1084
// if GetDistUnits ( apeman , Burlak ) < 7 then
1038: LD_VAR 0 1
1042: PPUSH
1043: LD_EXP 33
1047: PPUSH
1048: CALL_OW 296
1052: PUSH
1053: LD_INT 7
1055: LESS
1056: IFFALSE 1082
// begin apemansContact = true ;
1058: LD_ADDR_EXP 2
1062: PUSH
1063: LD_INT 1
1065: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1066: LD_EXP 33
1070: PPUSH
1071: LD_STRING D2-Bur-1
1073: PPUSH
1074: CALL_OW 88
// exit ;
1078: POP
1079: POP
1080: GO 1086
// end ;
1082: GO 1035
1084: POP
1085: POP
// end ;
1086: PPOPN 1
1088: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1089: LD_EXP 3
1093: NOT
1094: IFFALSE 1212
1096: GO 1098
1098: DISABLE
1099: LD_INT 0
1101: PPUSH
1102: PPUSH
// begin enable ;
1103: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , apeman ] ] ) do
1104: LD_ADDR_VAR 0 2
1108: PUSH
1109: LD_INT 22
1111: PUSH
1112: LD_INT 0
1114: PUSH
1115: EMPTY
1116: LIST
1117: LIST
1118: PUSH
1119: LD_INT 25
1121: PUSH
1122: LD_VAR 0 2
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: PUSH
1140: FOR_IN
1141: IFFALSE 1210
// if Attacks ( apeman ) then
1143: LD_VAR 0 2
1147: PPUSH
1148: CALL_OW 320
1152: IFFALSE 1208
// if GetSide ( Attacks ( apeman ) ) = 3 then
1154: LD_VAR 0 2
1158: PPUSH
1159: CALL_OW 320
1163: PPUSH
1164: CALL_OW 255
1168: PUSH
1169: LD_INT 3
1171: EQUAL
1172: IFFALSE 1208
// begin attackedByApeman = true ;
1174: LD_ADDR_EXP 3
1178: PUSH
1179: LD_INT 1
1181: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1182: LD_ADDR_EXP 5
1186: PUSH
1187: LD_VAR 0 2
1191: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1192: LD_EXP 33
1196: PPUSH
1197: LD_STRING D2-Bur-1a
1199: PPUSH
1200: CALL_OW 88
// exit ;
1204: POP
1205: POP
1206: GO 1212
// end ;
1208: GO 1140
1210: POP
1211: POP
// end ;
1212: PPOPN 2
1214: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1215: LD_EXP 6
1219: PPUSH
1220: CALL_OW 303
1224: IFFALSE 1258
1226: GO 1228
1228: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1229: LD_ADDR_EXP 7
1233: PUSH
1234: LD_EXP 6
1238: PPUSH
1239: CALL_OW 250
1243: PUSH
1244: LD_EXP 6
1248: PPUSH
1249: CALL_OW 251
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: ST_TO_ADDR
1258: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1259: LD_EXP 6
1263: PPUSH
1264: CALL_OW 301
1268: PUSH
1269: LD_INT 3
1271: PPUSH
1272: LD_EXP 7
1276: PUSH
1277: LD_INT 1
1279: ARRAY
1280: PPUSH
1281: LD_EXP 7
1285: PUSH
1286: LD_INT 2
1288: ARRAY
1289: PPUSH
1290: CALL_OW 293
1294: AND
1295: IFFALSE 1620
1297: GO 1299
1299: DISABLE
1300: LD_INT 0
1302: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1303: LD_EXP 33
1307: PPUSH
1308: LD_STRING D2a-Bur-1
1310: PPUSH
1311: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] ] ) = 1 then
1315: LD_INT 22
1317: PUSH
1318: LD_INT 3
1320: PUSH
1321: EMPTY
1322: LIST
1323: LIST
1324: PUSH
1325: EMPTY
1326: LIST
1327: PPUSH
1328: CALL_OW 69
1332: PUSH
1333: LD_INT 1
1335: EQUAL
1336: IFFALSE 1352
// begin Say ( Burlak , D2a-Bur-2 ) ;
1338: LD_EXP 33
1342: PPUSH
1343: LD_STRING D2a-Bur-2
1345: PPUSH
1346: CALL_OW 88
// end else
1350: GO 1620
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1352: LD_ADDR_VAR 0 1
1356: PUSH
1357: LD_INT 22
1359: PUSH
1360: LD_INT 3
1362: PUSH
1363: EMPTY
1364: LIST
1365: LIST
1366: PUSH
1367: LD_INT 21
1369: PUSH
1370: LD_INT 1
1372: PUSH
1373: EMPTY
1374: LIST
1375: LIST
1376: PUSH
1377: EMPTY
1378: LIST
1379: LIST
1380: PPUSH
1381: CALL_OW 69
1385: PPUSH
1386: LD_EXP 7
1390: PUSH
1391: LD_INT 1
1393: ARRAY
1394: PPUSH
1395: LD_EXP 7
1399: PUSH
1400: LD_INT 2
1402: ARRAY
1403: PPUSH
1404: CALL_OW 73
1408: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1409: LD_VAR 0 1
1413: PPUSH
1414: LD_EXP 7
1418: PUSH
1419: LD_INT 1
1421: ARRAY
1422: PPUSH
1423: LD_EXP 7
1427: PUSH
1428: LD_INT 2
1430: ARRAY
1431: PPUSH
1432: CALL_OW 111
// DialogueOn ;
1436: CALL_OW 6
// case nearUnit of Burlak :
1440: LD_VAR 0 1
1444: PUSH
1445: LD_EXP 33
1449: DOUBLE
1450: EQUAL
1451: IFTRUE 1455
1453: GO 1470
1455: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1456: LD_EXP 33
1460: PPUSH
1461: LD_STRING D3-Bur-2a
1463: PPUSH
1464: CALL_OW 88
1468: GO 1592
1470: LD_EXP 38
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1495
1480: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1481: LD_EXP 38
1485: PPUSH
1486: LD_STRING D2a-Bel-1
1488: PPUSH
1489: CALL_OW 88
1493: GO 1592
1495: LD_EXP 39
1499: DOUBLE
1500: EQUAL
1501: IFTRUE 1505
1503: GO 1520
1505: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; Gnyevko :
1506: LD_EXP 39
1510: PPUSH
1511: LD_STRING D2a-Kir-1
1513: PPUSH
1514: CALL_OW 88
1518: GO 1592
1520: LD_EXP 40
1524: DOUBLE
1525: EQUAL
1526: IFTRUE 1530
1528: GO 1545
1530: POP
// Say ( Gnyevko , D2a-Gny-1 ) ; else
1531: LD_EXP 40
1535: PPUSH
1536: LD_STRING D2a-Gny-1
1538: PPUSH
1539: CALL_OW 88
1543: GO 1592
1545: POP
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D2a-RSol1-1 , D2a-RFSol1-1 ) ; end ;
1546: LD_INT 22
1548: PUSH
1549: LD_INT 3
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: PUSH
1556: LD_INT 21
1558: PUSH
1559: LD_INT 1
1561: PUSH
1562: EMPTY
1563: LIST
1564: LIST
1565: PUSH
1566: LD_INT 50
1568: PUSH
1569: EMPTY
1570: LIST
1571: PUSH
1572: EMPTY
1573: LIST
1574: LIST
1575: LIST
1576: PPUSH
1577: CALL_OW 69
1581: PPUSH
1582: LD_STRING D2a-RSol1-1
1584: PPUSH
1585: LD_STRING D2a-RFSol1-1
1587: PPUSH
1588: CALL 6144 0 3
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1592: LD_EXP 6
1596: PUSH
1597: LD_EXP 5
1601: EQUAL
1602: IFFALSE 1616
// Say ( Burlak , D3-Bur-2 ) ;
1604: LD_EXP 33
1608: PPUSH
1609: LD_STRING D3-Bur-2
1611: PPUSH
1612: CALL_OW 88
// DialogueOff ;
1616: CALL_OW 7
// end ; end ;
1620: PPOPN 1
1622: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1623: LD_INT 3
1625: PPUSH
1626: LD_EXP 40
1630: PPUSH
1631: CALL_OW 292
1635: IFFALSE 2034
1637: GO 1639
1639: DISABLE
1640: LD_INT 0
1642: PPUSH
1643: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1644: LD_EXP 40
1648: PPUSH
1649: CALL_OW 87
// DialogueOn ;
1653: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1657: LD_ADDR_VAR 0 1
1661: PUSH
1662: LD_INT 22
1664: PUSH
1665: LD_INT 3
1667: PUSH
1668: EMPTY
1669: LIST
1670: LIST
1671: PUSH
1672: LD_INT 21
1674: PUSH
1675: LD_INT 1
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: PPUSH
1686: CALL_OW 69
1690: PPUSH
1691: LD_EXP 40
1695: PPUSH
1696: CALL_OW 74
1700: ST_TO_ADDR
// if nearUnit = Burlak then
1701: LD_VAR 0 1
1705: PUSH
1706: LD_EXP 33
1710: EQUAL
1711: IFFALSE 1931
// begin Say ( Burlak , D3-Bur-1 ) ;
1713: LD_EXP 33
1717: PPUSH
1718: LD_STRING D3-Bur-1
1720: PPUSH
1721: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
1725: LD_EXP 40
1729: PPUSH
1730: LD_STRING D3-Gny-1
1732: PPUSH
1733: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
1737: LD_EXP 33
1741: PPUSH
1742: LD_STRING D3-Bur-2b
1744: PPUSH
1745: CALL_OW 88
// if IsLive ( Pokryshkin ) or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1749: LD_EXP 34
1753: PPUSH
1754: CALL_OW 300
1758: PUSH
1759: LD_INT 22
1761: PUSH
1762: LD_INT 3
1764: PUSH
1765: EMPTY
1766: LIST
1767: LIST
1768: PUSH
1769: LD_INT 21
1771: PUSH
1772: LD_INT 1
1774: PUSH
1775: EMPTY
1776: LIST
1777: LIST
1778: PUSH
1779: EMPTY
1780: LIST
1781: LIST
1782: PPUSH
1783: CALL_OW 69
1787: PUSH
1788: LD_INT 1
1790: EQUAL
1791: OR
1792: IFFALSE 1808
// begin Say ( Burlak , D3-Bur-2c ) ;
1794: LD_EXP 33
1798: PPUSH
1799: LD_STRING D3-Bur-2c
1801: PPUSH
1802: CALL_OW 88
// exit ;
1806: GO 2034
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and not evacuationAvailable then
1808: LD_INT 22
1810: PUSH
1811: LD_INT 3
1813: PUSH
1814: EMPTY
1815: LIST
1816: LIST
1817: PUSH
1818: LD_INT 21
1820: PUSH
1821: LD_INT 1
1823: PUSH
1824: EMPTY
1825: LIST
1826: LIST
1827: PUSH
1828: EMPTY
1829: LIST
1830: LIST
1831: PPUSH
1832: CALL_OW 69
1836: PUSH
1837: LD_INT 1
1839: GREATER
1840: PUSH
1841: LD_EXP 17
1845: NOT
1846: AND
1847: IFFALSE 1863
// begin Say ( Burlak , D3-Bur-2c ) ;
1849: LD_EXP 33
1853: PPUSH
1854: LD_STRING D3-Bur-2c
1856: PPUSH
1857: CALL_OW 88
// exit ;
1861: GO 2034
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
1863: LD_INT 22
1865: PUSH
1866: LD_INT 3
1868: PUSH
1869: EMPTY
1870: LIST
1871: LIST
1872: PUSH
1873: LD_INT 21
1875: PUSH
1876: LD_INT 1
1878: PUSH
1879: EMPTY
1880: LIST
1881: LIST
1882: PUSH
1883: EMPTY
1884: LIST
1885: LIST
1886: PPUSH
1887: CALL_OW 69
1891: PUSH
1892: LD_INT 1
1894: GREATER
1895: PUSH
1896: LD_EXP 17
1900: AND
1901: IFFALSE 1917
// begin Say ( Burlak , D3-Bur-2e ) ;
1903: LD_EXP 33
1907: PPUSH
1908: LD_STRING D3-Bur-2e
1910: PPUSH
1911: CALL_OW 88
// exit ;
1915: GO 2034
// end ; Say ( Gnyevko , D3-Gny-2 ) ;
1917: LD_EXP 40
1921: PPUSH
1922: LD_STRING D3-Gny-2
1924: PPUSH
1925: CALL_OW 88
// end else
1929: GO 2010
// begin randomUnit = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D3-RSol1-1 , D3-RFSol1-1 ) ;
1931: LD_ADDR_VAR 0 2
1935: PUSH
1936: LD_INT 22
1938: PUSH
1939: LD_INT 3
1941: PUSH
1942: EMPTY
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 21
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: EMPTY
1953: LIST
1954: LIST
1955: PUSH
1956: LD_INT 50
1958: PUSH
1959: EMPTY
1960: LIST
1961: PUSH
1962: EMPTY
1963: LIST
1964: LIST
1965: LIST
1966: PPUSH
1967: CALL_OW 69
1971: PPUSH
1972: LD_STRING D3-RSol1-1
1974: PPUSH
1975: LD_STRING D3-RFSol1-1
1977: PPUSH
1978: CALL 6144 0 3
1982: ST_TO_ADDR
// DialogRandom ( randomUnit , D3-RSol1-2 , D3-RFSol1-2 ) ;
1983: LD_VAR 0 2
1987: PPUSH
1988: LD_STRING D3-RSol1-2
1990: PPUSH
1991: LD_STRING D3-RFSol1-2
1993: PPUSH
1994: CALL 6144 0 3
// Say ( Gnyevko , D3-Gny-2a ) ;
1998: LD_EXP 40
2002: PPUSH
2003: LD_STRING D3-Gny-2a
2005: PPUSH
2006: CALL_OW 88
// end ; DialogueOff ;
2010: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2014: LD_EXP 40
2018: PPUSH
2019: LD_INT 3
2021: PPUSH
2022: CALL_OW 235
// gnyevkoSaved = true ;
2026: LD_ADDR_EXP 8
2030: PUSH
2031: LD_INT 1
2033: ST_TO_ADDR
// end ;
2034: PPOPN 2
2036: END
// every 0 0$1 trigger See ( 3 , Pokryshkin ) and not meetPokryshkin do
2037: LD_INT 3
2039: PPUSH
2040: LD_EXP 34
2044: PPUSH
2045: CALL_OW 292
2049: PUSH
2050: LD_EXP 10
2054: NOT
2055: AND
2056: IFFALSE 2624
2058: GO 2060
2060: DISABLE
// begin enable ;
2061: ENABLE
// InGameOn ;
2062: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2066: LD_EXP 34
2070: PPUSH
2071: CALL_OW 87
// ComHold ( [ Burlak , Gnyevko ] ) ;
2075: LD_EXP 33
2079: PUSH
2080: LD_EXP 40
2084: PUSH
2085: EMPTY
2086: LIST
2087: LIST
2088: PPUSH
2089: CALL_OW 140
// DialogueOn ;
2093: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2097: LD_EXP 9
2101: IFFALSE 2292
// begin meetPokryshkin = true ;
2103: LD_ADDR_EXP 10
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2111: LD_INT 6
2113: PPUSH
2114: LD_INT 3
2116: PPUSH
2117: CALL_OW 343
// Say ( Gnyevko , D4-Gny-3 ) ;
2121: LD_EXP 40
2125: PPUSH
2126: LD_STRING D4-Gny-3
2128: PPUSH
2129: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
2133: LD_EXP 33
2137: PPUSH
2138: LD_STRING D4-Bur-3
2140: PPUSH
2141: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2145: LD_EXP 34
2149: PPUSH
2150: LD_STRING D4-Pok-4
2152: PPUSH
2153: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2157: LD_EXP 30
2161: PPUSH
2162: LD_INT 18
2164: PPUSH
2165: LD_INT 1
2167: PPUSH
2168: CALL_OW 49
// wait ( 0 0$2 ) ;
2172: LD_INT 70
2174: PPUSH
2175: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
2179: LD_EXP 33
2183: PPUSH
2184: LD_STRING D4-Bur-4
2186: PPUSH
2187: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
2191: LD_EXP 34
2195: PPUSH
2196: LD_STRING D4-Pok-5
2198: PPUSH
2199: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
2203: LD_EXP 30
2207: PPUSH
2208: LD_STRING D4-Sol1-5
2210: PPUSH
2211: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
2215: LD_EXP 34
2219: PPUSH
2220: LD_STRING D4-Pok-6
2222: PPUSH
2223: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
2227: LD_EXP 34
2231: PPUSH
2232: LD_STRING D4-Pok-6a
2234: PPUSH
2235: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
2239: LD_EXP 33
2243: PPUSH
2244: LD_STRING D4-Bur-6
2246: PPUSH
2247: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
2251: LD_EXP 34
2255: PPUSH
2256: LD_STRING D4-Pok-7
2258: PPUSH
2259: CALL_OW 88
// DialogueOff ;
2263: CALL_OW 7
// InGameOff ;
2267: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
2271: LD_STRING M2
2273: PPUSH
2274: CALL_OW 337
// goToHill = true ;
2278: LD_ADDR_EXP 11
2282: PUSH
2283: LD_INT 1
2285: ST_TO_ADDR
// MoveToHill ;
2286: CALL 6270 0 0
// exit ;
2290: GO 2624
// end ; Say ( Pokryshkin , D4-Pok-1 ) ;
2292: LD_EXP 34
2296: PPUSH
2297: LD_STRING D4-Pok-1
2299: PPUSH
2300: CALL_OW 88
// if GetSide ( Gnyevko = 3 ) and IsOK ( Gnyevko ) then
2304: LD_EXP 40
2308: PUSH
2309: LD_INT 3
2311: EQUAL
2312: PPUSH
2313: CALL_OW 255
2317: PUSH
2318: LD_EXP 40
2322: PPUSH
2323: CALL_OW 302
2327: AND
2328: IFFALSE 2616
// begin Say ( Gnyevko , D4-Gny-1 ) ;
2330: LD_EXP 40
2334: PPUSH
2335: LD_STRING D4-Gny-1
2337: PPUSH
2338: CALL_OW 88
// if GetDistUnits ( Burlak , Pokryshkin ) < 10 then
2342: LD_EXP 33
2346: PPUSH
2347: LD_EXP 34
2351: PPUSH
2352: CALL_OW 296
2356: PUSH
2357: LD_INT 10
2359: LESS
2360: IFFALSE 2449
// begin Say ( Pokryshkin , D4-Pok-2 ) ;
2362: LD_EXP 34
2366: PPUSH
2367: LD_STRING D4-Pok-2
2369: PPUSH
2370: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
2374: LD_EXP 40
2378: PPUSH
2379: LD_STRING D4-Gny-2
2381: PPUSH
2382: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
2386: LD_EXP 34
2390: PPUSH
2391: LD_STRING D4-Pok-3
2393: PPUSH
2394: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
2398: LD_ADDR_EXP 9
2402: PUSH
2403: LD_INT 1
2405: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
2406: LD_EXP 40
2410: PPUSH
2411: LD_INT 6
2413: PPUSH
2414: CALL_OW 235
// ComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2418: LD_EXP 40
2422: PPUSH
2423: LD_EXP 34
2427: PPUSH
2428: CALL_OW 250
2432: PPUSH
2433: LD_EXP 34
2437: PPUSH
2438: CALL_OW 251
2442: PPUSH
2443: CALL_OW 111
// end else
2447: GO 2616
// begin meetPokryshkin = true ;
2449: LD_ADDR_EXP 10
2453: PUSH
2454: LD_INT 1
2456: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2457: LD_INT 6
2459: PPUSH
2460: LD_INT 3
2462: PPUSH
2463: CALL_OW 343
// Say ( Burlak , D4-Bur-3 ) ;
2467: LD_EXP 33
2471: PPUSH
2472: LD_STRING D4-Bur-3
2474: PPUSH
2475: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2479: LD_EXP 34
2483: PPUSH
2484: LD_STRING D4-Pok-4
2486: PPUSH
2487: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2491: LD_EXP 30
2495: PPUSH
2496: LD_INT 18
2498: PPUSH
2499: LD_INT 1
2501: PPUSH
2502: CALL_OW 49
// wait ( 0 0$2 ) ;
2506: LD_INT 70
2508: PPUSH
2509: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
2513: LD_EXP 33
2517: PPUSH
2518: LD_STRING D4-Bur-4
2520: PPUSH
2521: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
2525: LD_EXP 34
2529: PPUSH
2530: LD_STRING D4-Pok-5
2532: PPUSH
2533: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
2537: LD_EXP 30
2541: PPUSH
2542: LD_STRING D4-Sol1-5
2544: PPUSH
2545: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
2549: LD_EXP 34
2553: PPUSH
2554: LD_STRING D4-Pok-6
2556: PPUSH
2557: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
2561: LD_EXP 34
2565: PPUSH
2566: LD_STRING D4-Pok-6a
2568: PPUSH
2569: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
2573: LD_EXP 33
2577: PPUSH
2578: LD_STRING D4-Bur-6
2580: PPUSH
2581: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
2585: LD_EXP 34
2589: PPUSH
2590: LD_STRING D4-Pok-7
2592: PPUSH
2593: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
2597: LD_STRING M2
2599: PPUSH
2600: CALL_OW 337
// goToHill = true ;
2604: LD_ADDR_EXP 11
2608: PUSH
2609: LD_INT 1
2611: ST_TO_ADDR
// MoveToHill ;
2612: CALL 6270 0 0
// end ; end ; DialogueOff ;
2616: CALL_OW 7
// InGameOff ;
2620: CALL_OW 9
// end ;
2624: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
2625: LD_EXP 33
2629: PPUSH
2630: LD_EXP 34
2634: PPUSH
2635: CALL_OW 296
2639: PUSH
2640: LD_INT 10
2642: GREATER
2643: PUSH
2644: LD_EXP 11
2648: AND
2649: PUSH
2650: LD_EXP 14
2654: NOT
2655: AND
2656: IFFALSE 2857
2658: GO 2660
2660: DISABLE
2661: LD_INT 0
2663: PPUSH
// begin enable ;
2664: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
2665: LD_ADDR_VAR 0 1
2669: PUSH
2670: LD_EXP 34
2674: PUSH
2675: LD_EXP 35
2679: PUSH
2680: LD_EXP 36
2684: PUSH
2685: LD_EXP 37
2689: PUSH
2690: LD_EXP 38
2694: PUSH
2695: EMPTY
2696: LIST
2697: LIST
2698: LIST
2699: LIST
2700: LIST
2701: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
2702: LD_EXP 40
2706: PPUSH
2707: CALL_OW 255
2711: PUSH
2712: LD_INT 6
2714: EQUAL
2715: PUSH
2716: LD_EXP 8
2720: AND
2721: IFFALSE 2739
// ruSolds = ruSolds ^ Gnyevko ;
2723: LD_ADDR_VAR 0 1
2727: PUSH
2728: LD_VAR 0 1
2732: PUSH
2733: LD_EXP 40
2737: ADD
2738: ST_TO_ADDR
// ComStop ( ruSolds ) ;
2739: LD_VAR 0 1
2743: PPUSH
2744: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
2748: LD_EXP 33
2752: PPUSH
2753: CALL_OW 87
// DialogueOn ;
2757: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
2761: LD_EXP 34
2765: PPUSH
2766: LD_STRING DSplit-Pok-1
2768: PPUSH
2769: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
2773: LD_EXP 33
2777: PPUSH
2778: LD_STRING DSplit-Bur-1
2780: PPUSH
2781: CALL_OW 88
// DialogueOff ;
2785: CALL_OW 7
// InGameOn ;
2789: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2793: LD_EXP 33
2797: PPUSH
2798: LD_EXP 34
2802: PPUSH
2803: CALL_OW 250
2807: PPUSH
2808: LD_EXP 34
2812: PPUSH
2813: CALL_OW 251
2817: PPUSH
2818: CALL_OW 111
// wait ( 0 0$1 ) ;
2822: LD_INT 35
2824: PPUSH
2825: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
2829: LD_EXP 33
2833: PPUSH
2834: LD_EXP 34
2838: PPUSH
2839: CALL_OW 296
2843: PUSH
2844: LD_INT 6
2846: LESS
2847: IFFALSE 2793
// InGameOff ;
2849: CALL_OW 9
// MoveToHill ;
2853: CALL 6270 0 0
// end ;
2857: PPOPN 1
2859: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
2860: LD_INT 0
2862: PPUSH
2863: PPUSH
// traitor = true ;
2864: LD_ADDR_EXP 14
2868: PUSH
2869: LD_INT 1
2871: ST_TO_ADDR
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
2872: LD_ADDR_VAR 0 2
2876: PUSH
2877: LD_EXP 34
2881: PUSH
2882: LD_EXP 35
2886: PUSH
2887: LD_EXP 36
2891: PUSH
2892: LD_EXP 37
2896: PUSH
2897: LD_EXP 38
2901: PUSH
2902: EMPTY
2903: LIST
2904: LIST
2905: LIST
2906: LIST
2907: LIST
2908: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
2909: LD_EXP 40
2913: PPUSH
2914: CALL_OW 255
2918: PUSH
2919: LD_INT 6
2921: EQUAL
2922: PUSH
2923: LD_EXP 8
2927: AND
2928: IFFALSE 2946
// ruSolds = ruSolds ^ Gnyevko ;
2930: LD_ADDR_VAR 0 2
2934: PUSH
2935: LD_VAR 0 2
2939: PUSH
2940: LD_EXP 40
2944: ADD
2945: ST_TO_ADDR
// DialogueOn ;
2946: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
2950: LD_EXP 34
2954: PPUSH
2955: LD_STRING DAttack-Pok-1
2957: PPUSH
2958: CALL_OW 88
// DialogueOff ;
2962: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
2966: LD_INT 3
2968: PPUSH
2969: LD_INT 6
2971: PPUSH
2972: LD_INT 2
2974: PPUSH
2975: LD_INT 1
2977: PPUSH
2978: CALL_OW 80
// ComAttackUnit ( ruSolds , Burlak ) ;
2982: LD_VAR 0 2
2986: PPUSH
2987: LD_EXP 33
2991: PPUSH
2992: CALL_OW 115
// end ;
2996: LD_VAR 0 1
3000: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
3001: LD_EXP 34
3005: PPUSH
3006: LD_INT 65
3008: PPUSH
3009: LD_INT 59
3011: PPUSH
3012: CALL_OW 297
3016: PUSH
3017: LD_INT 4
3019: LESS
3020: PUSH
3021: LD_EXP 14
3025: NOT
3026: AND
3027: IFFALSE 3208
3029: GO 3031
3031: DISABLE
// begin InGameOn ;
3032: CALL_OW 8
// CenterOnXY ( 59 , 55 ) ;
3036: LD_INT 59
3038: PPUSH
3039: LD_INT 55
3041: PPUSH
3042: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
3046: LD_EXP 33
3050: PPUSH
3051: LD_INT 66
3053: PPUSH
3054: LD_INT 57
3056: PPUSH
3057: CALL_OW 111
// AddComHold ( Burlak ) ;
3061: LD_EXP 33
3065: PPUSH
3066: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
3070: LD_EXP 30
3074: PPUSH
3075: LD_INT 59
3077: PPUSH
3078: LD_INT 55
3080: PPUSH
3081: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3085: LD_INT 35
3087: PPUSH
3088: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
3092: LD_INT 1
3094: PPUSH
3095: LD_EXP 34
3099: PPUSH
3100: CALL_OW 292
3104: IFFALSE 3085
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
3106: LD_EXP 30
3110: PUSH
3111: LD_EXP 34
3115: PUSH
3116: EMPTY
3117: LIST
3118: LIST
3119: PPUSH
3120: CALL_OW 87
// ComStop ( Charles ) ;
3124: LD_EXP 30
3128: PPUSH
3129: CALL_OW 141
// AddComHold ( Charles ) ;
3133: LD_EXP 30
3137: PPUSH
3138: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
3142: LD_EXP 30
3146: PPUSH
3147: LD_EXP 34
3151: PPUSH
3152: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
3156: LD_EXP 30
3160: PPUSH
3161: LD_STRING D5-Sol1-1
3163: PPUSH
3164: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
3168: LD_EXP 34
3172: PPUSH
3173: LD_STRING D5-Pok-1
3175: PPUSH
3176: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
3180: LD_INT 1
3182: PPUSH
3183: LD_INT 6
3185: PPUSH
3186: LD_INT 2
3188: PPUSH
3189: LD_INT 1
3191: PPUSH
3192: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
3196: LD_EXP 30
3200: PPUSH
3201: LD_STRING D5-Sol1-2
3203: PPUSH
3204: CALL_OW 88
// end ;
3208: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
3209: LD_EXP 30
3213: PPUSH
3214: CALL_OW 301
3218: PUSH
3219: LD_EXP 11
3223: AND
3224: IFFALSE 3698
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
// begin goToHill = false ;
3232: LD_ADDR_EXP 11
3236: PUSH
3237: LD_INT 0
3239: ST_TO_ADDR
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3240: LD_ADDR_VAR 0 1
3244: PUSH
3245: LD_EXP 34
3249: PUSH
3250: LD_EXP 35
3254: PUSH
3255: LD_EXP 36
3259: PUSH
3260: LD_EXP 37
3264: PUSH
3265: LD_EXP 38
3269: PUSH
3270: EMPTY
3271: LIST
3272: LIST
3273: LIST
3274: LIST
3275: LIST
3276: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3277: LD_EXP 40
3281: PPUSH
3282: CALL_OW 255
3286: PUSH
3287: LD_INT 6
3289: EQUAL
3290: PUSH
3291: LD_EXP 8
3295: AND
3296: IFFALSE 3314
// ruSolds = ruSolds ^ Gnyevko ;
3298: LD_ADDR_VAR 0 1
3302: PUSH
3303: LD_VAR 0 1
3307: PUSH
3308: LD_EXP 40
3312: ADD
3313: ST_TO_ADDR
// ComWalk ( ruSolds ) ;
3314: LD_VAR 0 1
3318: PPUSH
3319: CALL_OW 138
// CenterOnXY ( 63 , 76 ) ;
3323: LD_INT 63
3325: PPUSH
3326: LD_INT 76
3328: PPUSH
3329: CALL_OW 84
// AddComMoveXY ( [ Burlak , ruSolds ] , 63 , 76 ) ;
3333: LD_EXP 33
3337: PUSH
3338: LD_VAR 0 1
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PPUSH
3347: LD_INT 63
3349: PPUSH
3350: LD_INT 76
3352: PPUSH
3353: CALL_OW 171
// Say ( Burlak , D5-Bur-2 ) ;
3357: LD_EXP 33
3361: PPUSH
3362: LD_STRING D5-Bur-2
3364: PPUSH
3365: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
3369: LD_EXP 34
3373: PPUSH
3374: LD_STRING D5-Pok-2
3376: PPUSH
3377: CALL_OW 88
// Say ( Pokryshkin , D5-Bel-2 ) ;
3381: LD_EXP 34
3385: PPUSH
3386: LD_STRING D5-Bel-2
3388: PPUSH
3389: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
3393: LD_EXP 34
3397: PPUSH
3398: LD_STRING D5-Pok-3
3400: PPUSH
3401: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3405: LD_EXP 40
3409: PPUSH
3410: CALL_OW 255
3414: PUSH
3415: LD_INT 6
3417: EQUAL
3418: PUSH
3419: LD_EXP 8
3423: AND
3424: IFFALSE 3438
// Say ( Gnyevko , D5-Gny-3 ) ;
3426: LD_EXP 40
3430: PPUSH
3431: LD_STRING D5-Gny-3
3433: PPUSH
3434: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
3438: LD_EXP 33
3442: PPUSH
3443: LD_STRING D5-Bur-3
3445: PPUSH
3446: CALL_OW 88
// wait ( 0 0$2 ) ;
3450: LD_INT 70
3452: PPUSH
3453: CALL_OW 67
// ComMoveXY ( [ Burlak , ruSolds ] , 97 , 83 ) ;
3457: LD_EXP 33
3461: PUSH
3462: LD_VAR 0 1
3466: PUSH
3467: EMPTY
3468: LIST
3469: LIST
3470: PPUSH
3471: LD_INT 97
3473: PPUSH
3474: LD_INT 83
3476: PPUSH
3477: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
3481: LD_EXP 33
3485: PPUSH
3486: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
3490: LD_EXP 34
3494: PPUSH
3495: LD_STRING D6-Pok-1
3497: PPUSH
3498: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3502: LD_EXP 33
3506: PPUSH
3507: CALL_OW 87
// Say ( Pokryshkin , D6-Bur-1 ) ;
3511: LD_EXP 34
3515: PPUSH
3516: LD_STRING D6-Bur-1
3518: PPUSH
3519: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3523: LD_EXP 33
3527: PPUSH
3528: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
3532: LD_EXP 34
3536: PPUSH
3537: LD_STRING D6-Pok-2
3539: PPUSH
3540: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3544: LD_EXP 33
3548: PPUSH
3549: CALL_OW 87
// Say ( Pokryshkin , D6-Bel-2 ) ;
3553: LD_EXP 34
3557: PPUSH
3558: LD_STRING D6-Bel-2
3560: PPUSH
3561: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3565: LD_EXP 33
3569: PPUSH
3570: CALL_OW 87
// Say ( Pokryshkin , D6-Bur-2 ) ;
3574: LD_EXP 34
3578: PPUSH
3579: LD_STRING D6-Bur-2
3581: PPUSH
3582: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3586: LD_EXP 33
3590: PPUSH
3591: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
3595: LD_EXP 34
3599: PPUSH
3600: LD_STRING D6-Pok-3
3602: PPUSH
3603: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3607: LD_EXP 33
3611: PPUSH
3612: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
3616: LD_EXP 41
3620: PPUSH
3621: LD_STRING D6-Kur-3
3623: PPUSH
3624: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
3628: LD_EXP 33
3632: PPUSH
3633: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
3637: LD_EXP 34
3641: PPUSH
3642: LD_STRING D6-Pok-4
3644: PPUSH
3645: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3649: LD_EXP 33
3653: PPUSH
3654: CALL_OW 87
// Say ( Pokryshkin , D6-Bel-4 ) ;
3658: LD_EXP 34
3662: PPUSH
3663: LD_STRING D6-Bel-4
3665: PPUSH
3666: CALL_OW 88
// InGameOff ;
3670: CALL_OW 9
// ComAttackUnit ( ruSolds , am_bun ) ;
3674: LD_VAR 0 1
3678: PPUSH
3679: LD_INT 23
3681: PPUSH
3682: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
3686: LD_INT 1
3688: PPUSH
3689: LD_EXP 40
3693: PPUSH
3694: CALL_OW 471
// end ;
3698: PPOPN 1
3700: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
3701: LD_INT 1
3703: PPUSH
3704: LD_EXP 34
3708: PPUSH
3709: CALL_OW 292
3713: PUSH
3714: LD_EXP 30
3718: PPUSH
3719: CALL_OW 301
3723: AND
3724: IFFALSE 3743
3726: GO 3728
3728: DISABLE
// ComAttackUnit ( AmSol , Pokryshkin ) ;
3729: LD_EXP 31
3733: PPUSH
3734: LD_EXP 34
3738: PPUSH
3739: CALL_OW 115
3743: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
3744: LD_INT 3
3746: PPUSH
3747: LD_INT 23
3749: PPUSH
3750: CALL_OW 292
3754: IFFALSE 3783
3756: GO 3758
3758: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
3759: LD_EXP 34
3763: PPUSH
3764: LD_STRING D7-Pok-1
3766: PPUSH
3767: CALL_OW 88
// Say ( AmSol , D7-FSol1-1 ) ;
3771: LD_EXP 31
3775: PPUSH
3776: LD_STRING D7-FSol1-1
3778: PPUSH
3779: CALL_OW 88
// end ;
3783: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
3784: LD_EXP 34
3788: PPUSH
3789: CALL_OW 303
3793: IFFALSE 4334
3795: GO 3797
3797: DISABLE
3798: LD_INT 0
3800: PPUSH
3801: PPUSH
3802: PPUSH
// begin ruSolds = [ Saseda , Jaworska , Balei , Belkov ] ;
3803: LD_ADDR_VAR 0 3
3807: PUSH
3808: LD_EXP 35
3812: PUSH
3813: LD_EXP 36
3817: PUSH
3818: LD_EXP 37
3822: PUSH
3823: LD_EXP 38
3827: PUSH
3828: EMPTY
3829: LIST
3830: LIST
3831: LIST
3832: LIST
3833: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3834: LD_EXP 40
3838: PPUSH
3839: CALL_OW 255
3843: PUSH
3844: LD_INT 6
3846: EQUAL
3847: PUSH
3848: LD_EXP 8
3852: AND
3853: IFFALSE 3871
// ruSolds = ruSolds ^ Gnyevko ;
3855: LD_ADDR_VAR 0 3
3859: PUSH
3860: LD_VAR 0 3
3864: PUSH
3865: LD_EXP 40
3869: ADD
3870: ST_TO_ADDR
// DialogueOn ;
3871: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
3875: LD_EXP 38
3879: PPUSH
3880: LD_STRING D7a-Bel-1
3882: PPUSH
3883: CALL_OW 88
// DialogueOff ;
3887: CALL_OW 7
// for i := 1 to ruSolds do
3891: LD_ADDR_VAR 0 1
3895: PUSH
3896: DOUBLE
3897: LD_INT 1
3899: DEC
3900: ST_TO_ADDR
3901: LD_VAR 0 3
3905: PUSH
3906: FOR_TO
3907: IFFALSE 3965
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
3909: LD_VAR 0 3
3913: PUSH
3914: LD_VAR 0 1
3918: ARRAY
3919: PPUSH
3920: LD_INT 87
3922: PUSH
3923: LD_VAR 0 1
3927: PLUS
3928: PPUSH
3929: LD_INT 63
3931: PUSH
3932: LD_VAR 0 1
3936: PLUS
3937: PPUSH
3938: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
3942: LD_VAR 0 3
3946: PUSH
3947: LD_VAR 0 1
3951: ARRAY
3952: PPUSH
3953: LD_INT 89
3955: PPUSH
3956: LD_INT 67
3958: PPUSH
3959: CALL_OW 178
// end ;
3963: GO 3906
3965: POP
3966: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
3967: LD_EXP 38
3971: PPUSH
3972: LD_INT 89
3974: PPUSH
3975: LD_INT 67
3977: PPUSH
3978: CALL_OW 111
// AddComTurnXY ( Belkov , 90 , 66 ) ;
3982: LD_EXP 38
3986: PPUSH
3987: LD_INT 90
3989: PPUSH
3990: LD_INT 66
3992: PPUSH
3993: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
3997: LD_EXP 35
4001: PPUSH
4002: LD_STRING D7a-RSol1-1
4004: PPUSH
4005: CALL_OW 88
// Say ( AmSol , D7a-FSol1-1 ) ;
4009: LD_EXP 31
4013: PPUSH
4014: LD_STRING D7a-FSol1-1
4016: PPUSH
4017: CALL_OW 88
// wait ( 0 0$12 ) ;
4021: LD_INT 420
4023: PPUSH
4024: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
4028: LD_EXP 38
4032: PPUSH
4033: LD_STRING D7b-Bel-1
4035: PPUSH
4036: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
4040: LD_EXP 36
4044: PPUSH
4045: LD_STRING D7b-FSol1-1
4047: PPUSH
4048: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
4052: LD_EXP 38
4056: PPUSH
4057: LD_STRING D7b-Bel-2
4059: PPUSH
4060: CALL_OW 88
// Say ( Saseda , D7a-RSol1-2 ) ;
4064: LD_EXP 35
4068: PPUSH
4069: LD_STRING D7a-RSol1-2
4071: PPUSH
4072: CALL_OW 88
// for unit in ruSolds do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: LD_VAR 0 3
4085: PUSH
4086: FOR_IN
4087: IFFALSE 4308
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
4089: LD_EXP 33
4093: PPUSH
4094: LD_VAR 0 2
4098: PPUSH
4099: CALL_OW 296
4103: PUSH
4104: LD_INT 7
4106: LESS
4107: IFFALSE 4306
// begin InGameOn ;
4109: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
4113: LD_EXP 38
4117: PUSH
4118: LD_EXP 35
4122: PUSH
4123: EMPTY
4124: LIST
4125: LIST
4126: PPUSH
4127: CALL_OW 87
// ComMoveXY ( Burlak , 90 , 68 ) ;
4131: LD_EXP 33
4135: PPUSH
4136: LD_INT 90
4138: PPUSH
4139: LD_INT 68
4141: PPUSH
4142: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
4146: LD_EXP 38
4150: PPUSH
4151: LD_EXP 33
4155: PPUSH
4156: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
4160: LD_EXP 33
4164: PPUSH
4165: LD_INT 90
4167: PPUSH
4168: LD_INT 66
4170: PPUSH
4171: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
4175: LD_EXP 33
4179: PPUSH
4180: LD_STRING D7b-Bur-3
4182: PPUSH
4183: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
4187: LD_EXP 38
4191: PPUSH
4192: LD_STRING D7b-Bel-4
4194: PPUSH
4195: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
4199: LD_EXP 33
4203: PPUSH
4204: LD_STRING D7b-Bur-4
4206: PPUSH
4207: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
4211: LD_EXP 38
4215: PPUSH
4216: LD_STRING D7b-Bel-5
4218: PPUSH
4219: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
4223: LD_EXP 36
4227: PPUSH
4228: LD_STRING D7b-FSol1-5
4230: PPUSH
4231: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
4235: LD_EXP 38
4239: PPUSH
4240: LD_STRING D7b-Bel-6
4242: PPUSH
4243: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
4247: LD_EXP 33
4251: PPUSH
4252: LD_STRING D7b-Bur-6
4254: PPUSH
4255: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
4259: LD_EXP 35
4263: PPUSH
4264: LD_STRING D7a-RSol1-6
4266: PPUSH
4267: CALL_OW 88
// InGameOff ;
4271: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
4275: LD_VAR 0 3
4279: PPUSH
4280: LD_INT 3
4282: PPUSH
4283: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
4287: LD_STRING M3
4289: PPUSH
4290: CALL_OW 337
// secondAttack = true ;
4294: LD_ADDR_EXP 13
4298: PUSH
4299: LD_INT 1
4301: ST_TO_ADDR
// exit ;
4302: POP
4303: POP
4304: GO 4334
// end ;
4306: GO 4086
4308: POP
4309: POP
// Say ( Belkov , D7b-Bel-3 ) ;
4310: LD_EXP 38
4314: PPUSH
4315: LD_STRING D7b-Bel-3
4317: PPUSH
4318: CALL_OW 88
// InGameOff ;
4322: CALL_OW 9
// belkovWaitForGorky = true ;
4326: LD_ADDR_EXP 12
4330: PUSH
4331: LD_INT 1
4333: ST_TO_ADDR
// end ;
4334: PPOPN 3
4336: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
4337: LD_EXP 12
4341: IFFALSE 4673
4343: GO 4345
4345: DISABLE
4346: LD_INT 0
4348: PPUSH
4349: PPUSH
// begin enable ;
4350: ENABLE
// ruSolds = [ Saseda , Jaworska , Balei , Belkov ] ;
4351: LD_ADDR_VAR 0 2
4355: PUSH
4356: LD_EXP 35
4360: PUSH
4361: LD_EXP 36
4365: PUSH
4366: LD_EXP 37
4370: PUSH
4371: LD_EXP 38
4375: PUSH
4376: EMPTY
4377: LIST
4378: LIST
4379: LIST
4380: LIST
4381: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
4382: LD_EXP 40
4386: PPUSH
4387: CALL_OW 255
4391: PUSH
4392: LD_INT 6
4394: EQUAL
4395: PUSH
4396: LD_EXP 8
4400: AND
4401: IFFALSE 4419
// ruSolds = ruSolds ^ Gnyevko ;
4403: LD_ADDR_VAR 0 2
4407: PUSH
4408: LD_VAR 0 2
4412: PUSH
4413: LD_EXP 40
4417: ADD
4418: ST_TO_ADDR
// for unit in ruSolds do
4419: LD_ADDR_VAR 0 1
4423: PUSH
4424: LD_VAR 0 2
4428: PUSH
4429: FOR_IN
4430: IFFALSE 4671
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
4432: LD_EXP 33
4436: PPUSH
4437: LD_VAR 0 1
4441: PPUSH
4442: CALL_OW 296
4446: PUSH
4447: LD_INT 7
4449: LESS
4450: IFFALSE 4669
// begin belkovWaitForGorky = false ;
4452: LD_ADDR_EXP 12
4456: PUSH
4457: LD_INT 0
4459: ST_TO_ADDR
// InGameOn ;
4460: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
4464: LD_EXP 38
4468: PUSH
4469: LD_EXP 35
4473: PUSH
4474: EMPTY
4475: LIST
4476: LIST
4477: PPUSH
4478: CALL_OW 87
// ComMoveXY ( Burlak , 90 , 68 ) ;
4482: LD_EXP 33
4486: PPUSH
4487: LD_INT 90
4489: PPUSH
4490: LD_INT 68
4492: PPUSH
4493: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
4497: LD_EXP 38
4501: PPUSH
4502: LD_EXP 33
4506: PPUSH
4507: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
4511: LD_EXP 33
4515: PPUSH
4516: LD_INT 90
4518: PPUSH
4519: LD_INT 66
4521: PPUSH
4522: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
4526: LD_EXP 38
4530: PPUSH
4531: LD_STRING D7b-Bel-3a
4533: PPUSH
4534: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
4538: LD_EXP 33
4542: PPUSH
4543: LD_STRING D7b-Bur-3
4545: PPUSH
4546: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
4550: LD_EXP 38
4554: PPUSH
4555: LD_STRING D7b-Bel-4
4557: PPUSH
4558: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
4562: LD_EXP 33
4566: PPUSH
4567: LD_STRING D7b-Bur-4
4569: PPUSH
4570: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
4574: LD_EXP 38
4578: PPUSH
4579: LD_STRING D7b-Bel-5
4581: PPUSH
4582: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
4586: LD_EXP 36
4590: PPUSH
4591: LD_STRING D7b-FSol1-5
4593: PPUSH
4594: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
4598: LD_EXP 38
4602: PPUSH
4603: LD_STRING D7b-Bel-6
4605: PPUSH
4606: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
4610: LD_EXP 33
4614: PPUSH
4615: LD_STRING D7b-Bur-6
4617: PPUSH
4618: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
4622: LD_EXP 35
4626: PPUSH
4627: LD_STRING D7a-RSol1-6
4629: PPUSH
4630: CALL_OW 88
// InGameOff ;
4634: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
4638: LD_VAR 0 2
4642: PPUSH
4643: LD_INT 3
4645: PPUSH
4646: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
4650: LD_STRING M3
4652: PPUSH
4653: CALL_OW 337
// secondAttack = true ;
4657: LD_ADDR_EXP 13
4661: PUSH
4662: LD_INT 1
4664: ST_TO_ADDR
// exit ;
4665: POP
4666: POP
4667: GO 4673
// end ;
4669: GO 4429
4671: POP
4672: POP
// end ;
4673: PPOPN 2
4675: END
// export function Dial_SecondAttack ; begin
4676: LD_INT 0
4678: PPUSH
// Say ( AmSol , D8-FSol1-1 ) ;
4679: LD_EXP 31
4683: PPUSH
4684: LD_STRING D8-FSol1-1
4686: PPUSH
4687: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
4691: LD_EXP 32
4695: PPUSH
4696: LD_STRING D8-Glad-1
4698: PPUSH
4699: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
4703: LD_EXP 33
4707: PPUSH
4708: LD_STRING D8-Bur-1
4710: PPUSH
4711: CALL_OW 88
// end ;
4715: LD_VAR 0 1
4719: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
4720: LD_INT 23
4722: PPUSH
4723: CALL_OW 256
4727: PUSH
4728: LD_INT 350
4730: LESS
4731: PUSH
4732: LD_INT 20
4734: PPUSH
4735: LD_INT 22
4737: PUSH
4738: LD_INT 3
4740: PUSH
4741: EMPTY
4742: LIST
4743: LIST
4744: PUSH
4745: LD_INT 21
4747: PUSH
4748: LD_INT 1
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: PPUSH
4759: CALL_OW 70
4763: PUSH
4764: LD_INT 0
4766: GREATER
4767: AND
4768: IFFALSE 4785
4770: GO 4772
4772: DISABLE
// begin Say ( AmSol , D8-FSol1-2 ) ;
4773: LD_EXP 31
4777: PPUSH
4778: LD_STRING D8-FSol1-2
4780: PPUSH
4781: CALL_OW 88
// end ;
4785: END
// every 0 0$1 trigger IsDying ( am_bun ) do
4786: LD_INT 23
4788: PPUSH
4789: CALL_OW 303
4793: IFFALSE 4855
4795: GO 4797
4797: DISABLE
// begin Say ( AmSol , D8-FSol1-2a ) ;
4798: LD_EXP 31
4802: PPUSH
4803: LD_STRING D8-FSol1-2a
4805: PPUSH
4806: CALL_OW 88
// Say ( Gladstone , D8-Glad-2 ) ;
4810: LD_EXP 32
4814: PPUSH
4815: LD_STRING D8-Glad-2
4817: PPUSH
4818: CALL_OW 88
// ComMoveToArea ( [ Gladstone , AmSol ] , AmericanExitArea ) ;
4822: LD_EXP 32
4826: PUSH
4827: LD_EXP 31
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: LD_INT 21
4838: PPUSH
4839: CALL_OW 113
// Say ( Burlak , D8-Bur-2 ) ;
4843: LD_EXP 33
4847: PPUSH
4848: LD_STRING D8-Bur-2
4850: PPUSH
4851: CALL_OW 88
// end ;
4855: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( AmSol ) and not gladstoneEscape and not amSolEscape do
4856: LD_EXP 32
4860: PPUSH
4861: CALL_OW 301
4865: PUSH
4866: LD_EXP 31
4870: PPUSH
4871: CALL_OW 301
4875: AND
4876: PUSH
4877: LD_EXP 15
4881: NOT
4882: AND
4883: PUSH
4884: LD_EXP 16
4888: NOT
4889: AND
4890: IFFALSE 4907
4892: GO 4894
4894: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
4895: LD_EXP 33
4899: PPUSH
4900: LD_STRING D9-Bur-1
4902: PPUSH
4903: CALL_OW 88
4907: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( AmSol ) and gladstoneEscape and not amSolEscape do
4908: LD_EXP 32
4912: PPUSH
4913: CALL_OW 301
4917: PUSH
4918: LD_EXP 31
4922: PPUSH
4923: CALL_OW 301
4927: AND
4928: PUSH
4929: LD_EXP 15
4933: AND
4934: PUSH
4935: LD_EXP 16
4939: NOT
4940: AND
4941: IFFALSE 4958
4943: GO 4945
4945: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
4946: LD_EXP 33
4950: PPUSH
4951: LD_STRING D9-Bur-1a
4953: PPUSH
4954: CALL_OW 88
4958: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( AmSol ) and not gladstoneEscape and amSolEscape do
4959: LD_EXP 32
4963: PPUSH
4964: CALL_OW 301
4968: PUSH
4969: LD_EXP 31
4973: PPUSH
4974: CALL_OW 301
4978: AND
4979: PUSH
4980: LD_EXP 15
4984: NOT
4985: AND
4986: PUSH
4987: LD_EXP 16
4991: AND
4992: IFFALSE 5009
4994: GO 4996
4996: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
4997: LD_EXP 33
5001: PPUSH
5002: LD_STRING D9-Bur-1b
5004: PPUSH
5005: CALL_OW 88
5009: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( AmSol ) and gladstoneEscape and amSolEscape do
5010: LD_EXP 32
5014: PPUSH
5015: CALL_OW 301
5019: PUSH
5020: LD_EXP 31
5024: PPUSH
5025: CALL_OW 301
5029: AND
5030: PUSH
5031: LD_EXP 15
5035: AND
5036: PUSH
5037: LD_EXP 16
5041: AND
5042: IFFALSE 5059
5044: GO 5046
5046: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
5047: LD_EXP 33
5051: PPUSH
5052: LD_STRING D9-Bur-1c
5054: PPUSH
5055: CALL_OW 88
5059: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
5060: LD_INT 22
5062: PUSH
5063: LD_INT 1
5065: PUSH
5066: EMPTY
5067: LIST
5068: LIST
5069: PUSH
5070: LD_INT 21
5072: PUSH
5073: LD_INT 3
5075: PUSH
5076: EMPTY
5077: LIST
5078: LIST
5079: PUSH
5080: LD_INT 50
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: EMPTY
5087: LIST
5088: LIST
5089: LIST
5090: PPUSH
5091: CALL_OW 69
5095: PUSH
5096: LD_INT 0
5098: EQUAL
5099: IFFALSE 5341
5101: GO 5103
5103: DISABLE
5104: LD_INT 0
5106: PPUSH
5107: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko ] ;
5108: LD_ADDR_VAR 0 1
5112: PUSH
5113: LD_INT 22
5115: PUSH
5116: LD_INT 1
5118: PUSH
5119: EMPTY
5120: LIST
5121: LIST
5122: PUSH
5123: LD_INT 21
5125: PUSH
5126: LD_INT 1
5128: PUSH
5129: EMPTY
5130: LIST
5131: LIST
5132: PUSH
5133: LD_INT 50
5135: PUSH
5136: EMPTY
5137: LIST
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: LIST
5143: PPUSH
5144: CALL_OW 69
5148: PUSH
5149: LD_EXP 33
5153: PUSH
5154: LD_EXP 40
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: DIFF
5163: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
5164: LD_ADDR_VAR 0 2
5168: PUSH
5169: LD_VAR 0 1
5173: PPUSH
5174: LD_INT 26
5176: PUSH
5177: LD_INT 1
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: PPUSH
5184: CALL_OW 72
5188: ST_TO_ADDR
// DialogueOn ;
5189: CALL_OW 6
// if IsOK ( Belkov ) then
5193: LD_EXP 38
5197: PPUSH
5198: CALL_OW 302
5202: IFFALSE 5216
// Say ( Belkov , D10-Bel-1 ) ;
5204: LD_EXP 38
5208: PPUSH
5209: LD_STRING D10-Bel-1
5211: PPUSH
5212: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
5216: LD_VAR 0 1
5220: PUSH
5221: LD_INT 0
5223: GREATER
5224: PUSH
5225: LD_VAR 0 2
5229: PUSH
5230: LD_INT 0
5232: GREATER
5233: PUSH
5234: LD_EXP 38
5238: PPUSH
5239: CALL_OW 302
5243: OR
5244: AND
5245: IFFALSE 5312
// begin Say ( Burlak , D10-Bur-1 ) ;
5247: LD_EXP 33
5251: PPUSH
5252: LD_STRING D10-Bur-1
5254: PPUSH
5255: CALL_OW 88
// if IsOK ( Belkov ) then
5259: LD_EXP 38
5263: PPUSH
5264: CALL_OW 302
5268: IFFALSE 5284
// Say ( Belkov , D10-Bel-1a ) else
5270: LD_EXP 38
5274: PPUSH
5275: LD_STRING D10-Bel-1a
5277: PPUSH
5278: CALL_OW 88
5282: GO 5300
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
5284: LD_VAR 0 2
5288: PUSH
5289: LD_INT 1
5291: ARRAY
5292: PPUSH
5293: LD_STRING D10-RSol1-1
5295: PPUSH
5296: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
5300: LD_EXP 33
5304: PPUSH
5305: LD_STRING D10-Bur-2
5307: PPUSH
5308: CALL_OW 88
// end ; DialogueOff ;
5312: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
5316: LD_STRING M4a
5318: PPUSH
5319: CALL_OW 337
// evacuationAvailable = true ;
5323: LD_ADDR_EXP 17
5327: PUSH
5328: LD_INT 1
5330: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
5331: LD_INT 1
5333: PPUSH
5334: LD_INT 1
5336: PPUSH
5337: CALL_OW 424
// end ;
5341: PPOPN 2
5343: END
// every 0 0$15 trigger evacuationAvailable do
5344: LD_EXP 17
5348: IFFALSE 5839
5350: GO 5352
5352: DISABLE
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
5353: LD_EXP 39
5357: PPUSH
5358: LD_INT 22
5360: PPUSH
5361: LD_INT 1
5363: PPUSH
5364: CALL_OW 49
// wait ( 0 0$3 ) ;
5368: LD_INT 105
5370: PPUSH
5371: CALL_OW 67
// DialogueOn ;
5375: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
5379: LD_EXP 39
5383: PPUSH
5384: LD_STRING D11b-Kir-1
5386: PPUSH
5387: CALL_OW 94
// if IsOK ( Belkov ) then
5391: LD_EXP 38
5395: PPUSH
5396: CALL_OW 302
5400: IFFALSE 5428
// begin Say ( Belkov , D11b-Bel-1 ) ;
5402: LD_EXP 38
5406: PPUSH
5407: LD_STRING D11b-Bel-1
5409: PPUSH
5410: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
5414: LD_EXP 38
5418: PPUSH
5419: LD_STRING D11b-Bel-1a
5421: PPUSH
5422: CALL_OW 94
// end else
5426: GO 5835
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 ) ;
5428: LD_INT 22
5430: PUSH
5431: LD_INT 1
5433: PUSH
5434: EMPTY
5435: LIST
5436: LIST
5437: PUSH
5438: LD_INT 21
5440: PUSH
5441: LD_INT 1
5443: PUSH
5444: EMPTY
5445: LIST
5446: LIST
5447: PUSH
5448: LD_INT 50
5450: PUSH
5451: EMPTY
5452: LIST
5453: PUSH
5454: EMPTY
5455: LIST
5456: LIST
5457: LIST
5458: PPUSH
5459: CALL_OW 69
5463: PPUSH
5464: LD_STRING D11b-RSol1-1
5466: PPUSH
5467: LD_STRING D11b-RFSol1-1
5469: PPUSH
5470: CALL 6144 0 3
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
5474: LD_INT 22
5476: PUSH
5477: LD_INT 0
5479: PUSH
5480: EMPTY
5481: LIST
5482: LIST
5483: PUSH
5484: LD_INT 25
5486: PUSH
5487: LD_INT 12
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: PUSH
5494: EMPTY
5495: LIST
5496: LIST
5497: PPUSH
5498: CALL_OW 69
5502: PUSH
5503: LD_INT 0
5505: GREATER
5506: IFFALSE 5522
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
5508: LD_EXP 39
5512: PPUSH
5513: LD_STRING D11b1-Kir-1
5515: PPUSH
5516: CALL_OW 94
5520: GO 5534
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
5522: LD_EXP 39
5526: PPUSH
5527: LD_STRING D11b2-Kir-1
5529: PPUSH
5530: CALL_OW 94
// if attackedByApeman and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
5534: LD_EXP 3
5538: PUSH
5539: LD_INT 22
5541: PUSH
5542: LD_INT 0
5544: PUSH
5545: EMPTY
5546: LIST
5547: LIST
5548: PUSH
5549: LD_INT 25
5551: PUSH
5552: LD_INT 12
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: PPUSH
5563: CALL_OW 69
5567: PUSH
5568: LD_INT 0
5570: GREATER
5571: AND
5572: IFFALSE 5663
// begin Say ( Burlak , D11b1-Bur-1 ) ;
5574: LD_EXP 33
5578: PPUSH
5579: LD_STRING D11b1-Bur-1
5581: PPUSH
5582: CALL_OW 88
// if IsOk ( Belkov ) then
5586: LD_EXP 38
5590: PPUSH
5591: CALL_OW 302
5595: IFFALSE 5611
// Say ( Belkov , D11b2-Bel-1 ) else
5597: LD_EXP 38
5601: PPUSH
5602: LD_STRING D11b2-Bel-1
5604: PPUSH
5605: CALL_OW 88
5609: GO 5657
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 ) ;
5611: LD_INT 22
5613: PUSH
5614: LD_INT 1
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 21
5623: PUSH
5624: LD_INT 1
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 50
5633: PUSH
5634: EMPTY
5635: LIST
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: LIST
5641: PPUSH
5642: CALL_OW 69
5646: PPUSH
5647: LD_STRING D11b1-RSol1-1
5649: PPUSH
5650: LD_STRING D11b1-RFSol1-1
5652: PPUSH
5653: CALL 6144 0 3
// DialogueOff ;
5657: CALL_OW 7
// exit ;
5661: GO 5839
// end ; if spotWaterfall then
5663: LD_EXP 4
5667: IFFALSE 5758
// begin Say ( Burlak , D11b1-Bur-1a ) ;
5669: LD_EXP 33
5673: PPUSH
5674: LD_STRING D11b1-Bur-1a
5676: PPUSH
5677: CALL_OW 88
// if IsOk ( Belkov ) then
5681: LD_EXP 38
5685: PPUSH
5686: CALL_OW 302
5690: IFFALSE 5706
// Say ( Belkov , D11b2-Bel-1 ) else
5692: LD_EXP 38
5696: PPUSH
5697: LD_STRING D11b2-Bel-1
5699: PPUSH
5700: CALL_OW 88
5704: GO 5752
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 ) ;
5706: LD_INT 22
5708: PUSH
5709: LD_INT 1
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 21
5718: PUSH
5719: LD_INT 1
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: LD_INT 50
5728: PUSH
5729: EMPTY
5730: LIST
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: LIST
5736: PPUSH
5737: CALL_OW 69
5741: PPUSH
5742: LD_STRING D11b1-RSol1-1
5744: PPUSH
5745: LD_STRING D11b1-RFSol1-1
5747: PPUSH
5748: CALL 6144 0 3
// DialogueOff ;
5752: CALL_OW 7
// exit ;
5756: GO 5839
// end ; if IsOk ( Belkov ) then
5758: LD_EXP 38
5762: PPUSH
5763: CALL_OW 302
5767: IFFALSE 5783
// Say ( Belkov , D11b1-Bel-1 ) else
5769: LD_EXP 38
5773: PPUSH
5774: LD_STRING D11b1-Bel-1
5776: PPUSH
5777: CALL_OW 88
5781: GO 5829
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 ) ;
5783: LD_INT 22
5785: PUSH
5786: LD_INT 1
5788: PUSH
5789: EMPTY
5790: LIST
5791: LIST
5792: PUSH
5793: LD_INT 21
5795: PUSH
5796: LD_INT 1
5798: PUSH
5799: EMPTY
5800: LIST
5801: LIST
5802: PUSH
5803: LD_INT 50
5805: PUSH
5806: EMPTY
5807: LIST
5808: PUSH
5809: EMPTY
5810: LIST
5811: LIST
5812: LIST
5813: PPUSH
5814: CALL_OW 69
5818: PPUSH
5819: LD_STRING D11b1-RSol1-1
5821: PPUSH
5822: LD_STRING D11b1-RFSol1-1
5824: PPUSH
5825: CALL 6144 0 3
// DialogueOff ;
5829: CALL_OW 7
// exit ;
5833: GO 5839
// end ; DialogueOff ;
5835: CALL_OW 7
// end ;
5839: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
5840: LD_INT 3
5842: PPUSH
5843: LD_EXP 39
5847: PPUSH
5848: CALL_OW 292
5852: IFFALSE 6074
5854: GO 5856
5856: DISABLE
5857: LD_INT 0
5859: PPUSH
// begin CenterNowOnUnits ( Kirilenkova ) ;
5860: LD_EXP 39
5864: PPUSH
5865: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
5869: LD_ADDR_VAR 0 1
5873: PUSH
5874: LD_INT 22
5876: PUSH
5877: LD_INT 3
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: PUSH
5884: LD_INT 21
5886: PUSH
5887: LD_INT 1
5889: PUSH
5890: EMPTY
5891: LIST
5892: LIST
5893: PUSH
5894: LD_INT 50
5896: PUSH
5897: EMPTY
5898: LIST
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: LIST
5904: PPUSH
5905: CALL_OW 69
5909: PPUSH
5910: LD_EXP 39
5914: PPUSH
5915: CALL_OW 74
5919: ST_TO_ADDR
// DialogueOn ;
5920: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
5924: LD_EXP 39
5928: PPUSH
5929: LD_STRING D11a-Kir-1
5931: PPUSH
5932: CALL_OW 88
// if nearUnit = Belkov then
5936: LD_VAR 0 1
5940: PUSH
5941: LD_EXP 38
5945: EQUAL
5946: IFFALSE 5986
// begin Say ( Belkov , D11a-Bel-1 ) ;
5948: LD_EXP 38
5952: PPUSH
5953: LD_STRING D11a-Bel-1
5955: PPUSH
5956: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
5960: LD_EXP 39
5964: PPUSH
5965: LD_STRING D11a-Kir-2
5967: PPUSH
5968: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
5972: LD_EXP 38
5976: PPUSH
5977: LD_STRING D11a-Bel-2
5979: PPUSH
5980: CALL_OW 88
// end else
5984: GO 6027
// begin if GetSex ( nearUnit ) = sex_male then
5986: LD_VAR 0 1
5990: PPUSH
5991: CALL_OW 258
5995: PUSH
5996: LD_INT 1
5998: EQUAL
5999: IFFALSE 6015
// Say ( nearUnit , D11a-RSol1-2 ) else
6001: LD_VAR 0 1
6005: PPUSH
6006: LD_STRING D11a-RSol1-2
6008: PPUSH
6009: CALL_OW 88
6013: GO 6027
// Say ( nearUnit , D11a-RFSol1-2 ) ;
6015: LD_VAR 0 1
6019: PPUSH
6020: LD_STRING D11a-RFSol1-2
6022: PPUSH
6023: CALL_OW 88
// end ; DialogueOff ;
6027: CALL_OW 7
// SetSide ( Kirilenkova , 3 ) ;
6031: LD_EXP 39
6035: PPUSH
6036: LD_INT 3
6038: PPUSH
6039: CALL_OW 235
// wait ( 0 0$3 ) ;
6043: LD_INT 105
6045: PPUSH
6046: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
6050: LD_EXP 39
6054: PPUSH
6055: LD_STRING D11c-Kir-1
6057: PPUSH
6058: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
6062: LD_EXP 33
6066: PPUSH
6067: LD_STRING D11c-Bur-1
6069: PPUSH
6070: CALL_OW 88
// end ; end_of_file
6074: PPOPN 1
6076: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6077: LD_INT 0
6079: PPUSH
6080: PPUSH
// if exist_mode then
6081: LD_VAR 0 2
6085: IFFALSE 6114
// unit := CreateCharacter ( previousMissionPrefix & _ & ident ) else
6087: LD_ADDR_VAR 0 4
6091: PUSH
6092: LD_EXP 22
6096: PUSH
6097: LD_STRING _
6099: STR
6100: PUSH
6101: LD_VAR 0 1
6105: STR
6106: PPUSH
6107: CALL_OW 34
6111: ST_TO_ADDR
6112: GO 6129
// unit := NewCharacter ( ident ) ;
6114: LD_ADDR_VAR 0 4
6118: PUSH
6119: LD_VAR 0 1
6123: PPUSH
6124: CALL_OW 25
6128: ST_TO_ADDR
// result := unit ;
6129: LD_ADDR_VAR 0 3
6133: PUSH
6134: LD_VAR 0 4
6138: ST_TO_ADDR
// end ;
6139: LD_VAR 0 3
6143: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
6144: LD_INT 0
6146: PPUSH
6147: PPUSH
6148: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
6149: LD_ADDR_VAR 0 1
6153: PUSH
6154: LD_VAR 0 1
6158: PUSH
6159: LD_EXP 33
6163: PUSH
6164: LD_EXP 40
6168: PUSH
6169: LD_EXP 38
6173: PUSH
6174: LD_EXP 39
6178: PUSH
6179: EMPTY
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: DIFF
6185: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
6186: LD_ADDR_VAR 0 6
6190: PUSH
6191: LD_VAR 0 1
6195: PUSH
6196: LD_INT 1
6198: PPUSH
6199: LD_VAR 0 1
6203: PPUSH
6204: CALL_OW 12
6208: ARRAY
6209: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
6210: LD_VAR 0 6
6214: PPUSH
6215: CALL_OW 258
6219: PUSH
6220: LD_INT 1
6222: EQUAL
6223: IFFALSE 6241
// Say ( speaker , dialogMID ) else
6225: LD_VAR 0 6
6229: PPUSH
6230: LD_VAR 0 2
6234: PPUSH
6235: CALL_OW 88
6239: GO 6255
// Say ( speaker , dialogFID ) ;
6241: LD_VAR 0 6
6245: PPUSH
6246: LD_VAR 0 3
6250: PPUSH
6251: CALL_OW 88
// result := speaker ;
6255: LD_ADDR_VAR 0 4
6259: PUSH
6260: LD_VAR 0 6
6264: ST_TO_ADDR
// end ;
6265: LD_VAR 0 4
6269: RET
// export function MoveToHill ; begin
6270: LD_INT 0
6272: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
6273: LD_EXP 34
6277: PPUSH
6278: LD_INT 65
6280: PPUSH
6281: LD_INT 59
6283: PPUSH
6284: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6288: LD_EXP 34
6292: PPUSH
6293: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
6297: LD_EXP 35
6301: PPUSH
6302: LD_INT 65
6304: PPUSH
6305: LD_INT 58
6307: PPUSH
6308: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6312: LD_EXP 34
6316: PPUSH
6317: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
6321: LD_EXP 36
6325: PPUSH
6326: LD_INT 64
6328: PPUSH
6329: LD_INT 57
6331: PPUSH
6332: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6336: LD_EXP 34
6340: PPUSH
6341: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
6345: LD_EXP 37
6349: PPUSH
6350: LD_INT 64
6352: PPUSH
6353: LD_INT 56
6355: PPUSH
6356: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6360: LD_EXP 34
6364: PPUSH
6365: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
6369: LD_EXP 38
6373: PPUSH
6374: LD_INT 63
6376: PPUSH
6377: LD_INT 55
6379: PPUSH
6380: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6384: LD_EXP 34
6388: PPUSH
6389: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
6393: LD_EXP 40
6397: PPUSH
6398: CALL_OW 255
6402: PUSH
6403: LD_INT 6
6405: EQUAL
6406: PUSH
6407: LD_EXP 8
6411: AND
6412: IFFALSE 6438
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
6414: LD_EXP 40
6418: PPUSH
6419: LD_INT 63
6421: PPUSH
6422: LD_INT 54
6424: PPUSH
6425: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6429: LD_EXP 34
6433: PPUSH
6434: CALL_OW 197
// end ; end ; end_of_file end_of_file
6438: LD_VAR 0 1
6442: RET
// every 0 0$1 trigger evacuationAvailable do
6443: LD_EXP 17
6447: IFFALSE 6452
6449: GO 6451
6451: DISABLE
// begin end ; end_of_file
6452: END
// export Charles , AmSol , Gladstone ; export function PrepareAmericans ; begin
6453: LD_INT 0
6455: PPUSH
// uc_side = 1 ;
6456: LD_ADDR_OWVAR 20
6460: PUSH
6461: LD_INT 1
6463: ST_TO_ADDR
// hc_class := 1 ;
6464: LD_ADDR_OWVAR 28
6468: PUSH
6469: LD_INT 1
6471: ST_TO_ADDR
// hc_sex := sex_male ;
6472: LD_ADDR_OWVAR 27
6476: PUSH
6477: LD_INT 1
6479: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
6480: LD_ADDR_OWVAR 33
6484: PUSH
6485: LD_STRING AmGalRemake
6487: ST_TO_ADDR
// hc_face_number := 1 ;
6488: LD_ADDR_OWVAR 34
6492: PUSH
6493: LD_INT 1
6495: ST_TO_ADDR
// hc_name := Charles Brown ;
6496: LD_ADDR_OWVAR 26
6500: PUSH
6501: LD_STRING Charles Brown
6503: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
6504: LD_ADDR_OWVAR 29
6508: PUSH
6509: LD_INT 12
6511: PUSH
6512: LD_INT 11
6514: PUSH
6515: EMPTY
6516: LIST
6517: LIST
6518: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
6519: LD_ADDR_OWVAR 31
6523: PUSH
6524: LD_INT 1
6526: PUSH
6527: LD_INT 0
6529: PUSH
6530: LD_INT 1
6532: PUSH
6533: LD_INT 1
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: ST_TO_ADDR
// Charles = CreateHuman ;
6542: LD_ADDR_EXP 30
6546: PUSH
6547: CALL_OW 44
6551: ST_TO_ADDR
// hc_class := 1 ;
6552: LD_ADDR_OWVAR 28
6556: PUSH
6557: LD_INT 1
6559: ST_TO_ADDR
// hc_sex := sex_female ;
6560: LD_ADDR_OWVAR 27
6564: PUSH
6565: LD_INT 2
6567: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
6568: LD_ADDR_OWVAR 33
6572: PUSH
6573: LD_STRING AmGalRemake
6575: ST_TO_ADDR
// hc_face_number := 2 ;
6576: LD_ADDR_OWVAR 34
6580: PUSH
6581: LD_INT 2
6583: ST_TO_ADDR
// hc_name := Holland ;
6584: LD_ADDR_OWVAR 26
6588: PUSH
6589: LD_STRING Holland
6591: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
6592: LD_ADDR_OWVAR 29
6596: PUSH
6597: LD_INT 12
6599: PUSH
6600: LD_INT 11
6602: PUSH
6603: EMPTY
6604: LIST
6605: LIST
6606: ST_TO_ADDR
// hc_skills := amSoldSkillLevel ;
6607: LD_ADDR_OWVAR 31
6611: PUSH
6612: LD_EXP 27
6616: ST_TO_ADDR
// AmSol = CreateHuman ;
6617: LD_ADDR_EXP 31
6621: PUSH
6622: CALL_OW 44
6626: ST_TO_ADDR
// PlaceUnitArea ( AmSol , JohannaSpawnArea , false ) ;
6627: LD_EXP 31
6631: PPUSH
6632: LD_INT 19
6634: PPUSH
6635: LD_INT 0
6637: PPUSH
6638: CALL_OW 49
// ComEnterUnit ( AmSol , am_bun ) ;
6642: LD_EXP 31
6646: PPUSH
6647: LD_INT 23
6649: PPUSH
6650: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
6654: LD_ADDR_EXP 32
6658: PUSH
6659: LD_STRING Gladstone
6661: PPUSH
6662: LD_INT 0
6664: PPUSH
6665: CALL 6077 0 2
6669: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
6670: LD_EXP 32
6674: PPUSH
6675: LD_INT 22
6677: PPUSH
6678: CALL_OW 52
// end ; end_of_file
6682: LD_VAR 0 1
6686: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov ; export Kirilenkova ; export Gnyevko ; export Kurin ; export function PrepareRussian ; begin
6687: LD_INT 0
6689: PPUSH
// PrepareHero ;
6690: CALL 6715 0 0
// PreparePokryshkinTeams ;
6694: CALL 6809 0 0
// PrepareJelena ;
6698: CALL 6980 0 0
// PrepareGnyevko ;
6702: CALL 7012 0 0
// PrepareKurin ;
6706: CALL 6777 0 0
// end ;
6710: LD_VAR 0 1
6714: RET
// function PrepareHero ; begin
6715: LD_INT 0
6717: PPUSH
// uc_side = 3 ;
6718: LD_ADDR_OWVAR 20
6722: PUSH
6723: LD_INT 3
6725: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
6726: LD_ADDR_EXP 33
6730: PUSH
6731: LD_STRING Burlak
6733: PPUSH
6734: LD_INT 0
6736: PPUSH
6737: CALL 6077 0 2
6741: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
6742: LD_EXP 33
6746: PPUSH
6747: LD_EXP 28
6751: PUSH
6752: LD_INT 1
6754: ARRAY
6755: PPUSH
6756: LD_EXP 28
6760: PUSH
6761: LD_INT 2
6763: ARRAY
6764: PPUSH
6765: LD_INT 1
6767: PPUSH
6768: CALL_OW 48
// end ;
6772: LD_VAR 0 1
6776: RET
// function PrepareKurin ; begin
6777: LD_INT 0
6779: PPUSH
// uc_side = 6 ;
6780: LD_ADDR_OWVAR 20
6784: PUSH
6785: LD_INT 6
6787: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
6788: LD_ADDR_EXP 41
6792: PUSH
6793: LD_STRING Kurin
6795: PPUSH
6796: LD_INT 0
6798: PPUSH
6799: CALL 6077 0 2
6803: ST_TO_ADDR
// end ;
6804: LD_VAR 0 1
6808: RET
// function PreparePokryshkinTeams ; begin
6809: LD_INT 0
6811: PPUSH
// uc_side = 6 ;
6812: LD_ADDR_OWVAR 20
6816: PUSH
6817: LD_INT 6
6819: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
6820: LD_ADDR_EXP 34
6824: PUSH
6825: LD_STRING Pokryshkin
6827: PPUSH
6828: LD_INT 0
6830: PPUSH
6831: CALL 6077 0 2
6835: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
6836: LD_ADDR_EXP 35
6840: PUSH
6841: LD_STRING Saseda
6843: PPUSH
6844: LD_INT 0
6846: PPUSH
6847: CALL 6077 0 2
6851: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
6852: LD_ADDR_EXP 36
6856: PUSH
6857: LD_STRING Jaworska
6859: PPUSH
6860: LD_INT 0
6862: PPUSH
6863: CALL 6077 0 2
6867: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
6868: LD_ADDR_EXP 37
6872: PUSH
6873: LD_STRING Balei
6875: PPUSH
6876: LD_INT 0
6878: PPUSH
6879: CALL 6077 0 2
6883: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
6884: LD_ADDR_EXP 38
6888: PUSH
6889: LD_STRING Belkov
6891: PPUSH
6892: LD_INT 0
6894: PPUSH
6895: CALL 6077 0 2
6899: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , Ru2SpawnArea , false ) ;
6900: LD_EXP 34
6904: PPUSH
6905: LD_INT 17
6907: PPUSH
6908: LD_INT 0
6910: PPUSH
6911: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
6915: LD_EXP 35
6919: PPUSH
6920: LD_INT 17
6922: PPUSH
6923: LD_INT 0
6925: PPUSH
6926: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
6930: LD_EXP 36
6934: PPUSH
6935: LD_INT 17
6937: PPUSH
6938: LD_INT 0
6940: PPUSH
6941: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
6945: LD_EXP 37
6949: PPUSH
6950: LD_INT 17
6952: PPUSH
6953: LD_INT 0
6955: PPUSH
6956: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
6960: LD_EXP 38
6964: PPUSH
6965: LD_INT 17
6967: PPUSH
6968: LD_INT 0
6970: PPUSH
6971: CALL_OW 49
// end ;
6975: LD_VAR 0 1
6979: RET
// function PrepareJelena ; begin
6980: LD_INT 0
6982: PPUSH
// uc_side = 8 ;
6983: LD_ADDR_OWVAR 20
6987: PUSH
6988: LD_INT 8
6990: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
6991: LD_ADDR_EXP 39
6995: PUSH
6996: LD_STRING Kirilenkova
6998: PPUSH
6999: LD_INT 0
7001: PPUSH
7002: CALL 6077 0 2
7006: ST_TO_ADDR
// end ;
7007: LD_VAR 0 1
7011: RET
// function PrepareGnyevko ; begin
7012: LD_INT 0
7014: PPUSH
// uc_side = 8 ;
7015: LD_ADDR_OWVAR 20
7019: PUSH
7020: LD_INT 8
7022: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
7023: LD_ADDR_EXP 40
7027: PUSH
7028: LD_STRING Gnyevko
7030: PPUSH
7031: LD_INT 0
7033: PPUSH
7034: CALL 6077 0 2
7038: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , gnyevkoSpawnPositions [ 1 ] , gnyevkoSpawnPositions [ 2 ] , false ) ;
7039: LD_EXP 40
7043: PPUSH
7044: LD_EXP 29
7048: PUSH
7049: LD_INT 1
7051: ARRAY
7052: PPUSH
7053: LD_EXP 29
7057: PUSH
7058: LD_INT 2
7060: ARRAY
7061: PPUSH
7062: LD_INT 0
7064: PPUSH
7065: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
7069: LD_EXP 40
7073: PPUSH
7074: LD_INT 500
7076: PPUSH
7077: CALL_OW 234
// ComHold ( Gnyevko ) ;
7081: LD_EXP 40
7085: PPUSH
7086: CALL_OW 140
// end ; end_of_file
7090: LD_VAR 0 1
7094: RET
// export function PrepareNature ; var i , un ; begin
7095: LD_INT 0
7097: PPUSH
7098: PPUSH
7099: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
7100: LD_ADDR_VAR 0 2
7104: PUSH
7105: DOUBLE
7106: LD_INT 1
7108: DEC
7109: ST_TO_ADDR
7110: LD_EXP 18
7114: PUSH
7115: LD_INT 1
7117: ARRAY
7118: PUSH
7119: FOR_TO
7120: IFFALSE 7230
// begin uc_side = 0 ;
7122: LD_ADDR_OWVAR 20
7126: PUSH
7127: LD_INT 0
7129: ST_TO_ADDR
// uc_nation = nation_nature ;
7130: LD_ADDR_OWVAR 21
7134: PUSH
7135: LD_INT 0
7137: ST_TO_ADDR
// hc_class = class_apeman ;
7138: LD_ADDR_OWVAR 28
7142: PUSH
7143: LD_INT 12
7145: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
7146: LD_ADDR_OWVAR 31
7150: PUSH
7151: LD_EXP 19
7155: PUSH
7156: LD_INT 1
7158: ARRAY
7159: PUSH
7160: LD_EXP 19
7164: PUSH
7165: LD_INT 2
7167: ARRAY
7168: PUSH
7169: LD_EXP 19
7173: PUSH
7174: LD_INT 3
7176: ARRAY
7177: PUSH
7178: LD_EXP 19
7182: PUSH
7183: LD_INT 4
7185: ARRAY
7186: PUSH
7187: EMPTY
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: ST_TO_ADDR
// hc_agressivity = apeAgression ;
7193: LD_ADDR_OWVAR 35
7197: PUSH
7198: LD_EXP 25
7202: ST_TO_ADDR
// un = CreateHuman ;
7203: LD_ADDR_VAR 0 3
7207: PUSH
7208: CALL_OW 44
7212: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
7213: LD_VAR 0 3
7217: PPUSH
7218: LD_INT 16
7220: PPUSH
7221: LD_INT 0
7223: PPUSH
7224: CALL_OW 49
// end ;
7228: GO 7119
7230: POP
7231: POP
// for i := 1 to animalsAmount [ 2 ] do
7232: LD_ADDR_VAR 0 2
7236: PUSH
7237: DOUBLE
7238: LD_INT 1
7240: DEC
7241: ST_TO_ADDR
7242: LD_EXP 18
7246: PUSH
7247: LD_INT 2
7249: ARRAY
7250: PUSH
7251: FOR_TO
7252: IFFALSE 7362
// begin uc_side = 0 ;
7254: LD_ADDR_OWVAR 20
7258: PUSH
7259: LD_INT 0
7261: ST_TO_ADDR
// uc_nation = nation_nature ;
7262: LD_ADDR_OWVAR 21
7266: PUSH
7267: LD_INT 0
7269: ST_TO_ADDR
// hc_class = class_phororhacos ;
7270: LD_ADDR_OWVAR 28
7274: PUSH
7275: LD_INT 18
7277: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
7278: LD_ADDR_OWVAR 31
7282: PUSH
7283: LD_EXP 19
7287: PUSH
7288: LD_INT 1
7290: ARRAY
7291: PUSH
7292: LD_EXP 19
7296: PUSH
7297: LD_INT 2
7299: ARRAY
7300: PUSH
7301: LD_EXP 19
7305: PUSH
7306: LD_INT 3
7308: ARRAY
7309: PUSH
7310: LD_EXP 19
7314: PUSH
7315: LD_INT 4
7317: ARRAY
7318: PUSH
7319: EMPTY
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
7325: LD_ADDR_OWVAR 35
7329: PUSH
7330: LD_EXP 20
7334: ST_TO_ADDR
// un = CreateHuman ;
7335: LD_ADDR_VAR 0 3
7339: PUSH
7340: CALL_OW 44
7344: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
7345: LD_VAR 0 3
7349: PPUSH
7350: LD_INT 15
7352: PPUSH
7353: LD_INT 0
7355: PPUSH
7356: CALL_OW 49
// end ;
7360: GO 7251
7362: POP
7363: POP
// for i := 1 to animalsAmount [ 3 ] do
7364: LD_ADDR_VAR 0 2
7368: PUSH
7369: DOUBLE
7370: LD_INT 1
7372: DEC
7373: ST_TO_ADDR
7374: LD_EXP 18
7378: PUSH
7379: LD_INT 3
7381: ARRAY
7382: PUSH
7383: FOR_TO
7384: IFFALSE 7494
// begin uc_side = 0 ;
7386: LD_ADDR_OWVAR 20
7390: PUSH
7391: LD_INT 0
7393: ST_TO_ADDR
// uc_nation = nation_nature ;
7394: LD_ADDR_OWVAR 21
7398: PUSH
7399: LD_INT 0
7401: ST_TO_ADDR
// hc_class = class_tiger ;
7402: LD_ADDR_OWVAR 28
7406: PUSH
7407: LD_INT 14
7409: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
7410: LD_ADDR_OWVAR 31
7414: PUSH
7415: LD_EXP 19
7419: PUSH
7420: LD_INT 1
7422: ARRAY
7423: PUSH
7424: LD_EXP 19
7428: PUSH
7429: LD_INT 2
7431: ARRAY
7432: PUSH
7433: LD_EXP 19
7437: PUSH
7438: LD_INT 3
7440: ARRAY
7441: PUSH
7442: LD_EXP 19
7446: PUSH
7447: LD_INT 4
7449: ARRAY
7450: PUSH
7451: EMPTY
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
7457: LD_ADDR_OWVAR 35
7461: PUSH
7462: LD_EXP 20
7466: ST_TO_ADDR
// un = CreateHuman ;
7467: LD_ADDR_VAR 0 3
7471: PUSH
7472: CALL_OW 44
7476: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
7477: LD_VAR 0 3
7481: PPUSH
7482: LD_INT 15
7484: PPUSH
7485: LD_INT 0
7487: PPUSH
7488: CALL_OW 49
// end ;
7492: GO 7383
7494: POP
7495: POP
// for i := 1 to animalsAmount [ 4 ] do
7496: LD_ADDR_VAR 0 2
7500: PUSH
7501: DOUBLE
7502: LD_INT 1
7504: DEC
7505: ST_TO_ADDR
7506: LD_EXP 18
7510: PUSH
7511: LD_INT 4
7513: ARRAY
7514: PUSH
7515: FOR_TO
7516: IFFALSE 7626
// begin uc_side = 0 ;
7518: LD_ADDR_OWVAR 20
7522: PUSH
7523: LD_INT 0
7525: ST_TO_ADDR
// uc_nation = nation_nature ;
7526: LD_ADDR_OWVAR 21
7530: PUSH
7531: LD_INT 0
7533: ST_TO_ADDR
// hc_class = 21 ;
7534: LD_ADDR_OWVAR 28
7538: PUSH
7539: LD_INT 21
7541: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
7542: LD_ADDR_OWVAR 31
7546: PUSH
7547: LD_EXP 19
7551: PUSH
7552: LD_INT 1
7554: ARRAY
7555: PUSH
7556: LD_EXP 19
7560: PUSH
7561: LD_INT 2
7563: ARRAY
7564: PUSH
7565: LD_EXP 19
7569: PUSH
7570: LD_INT 3
7572: ARRAY
7573: PUSH
7574: LD_EXP 19
7578: PUSH
7579: LD_INT 4
7581: ARRAY
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
7589: LD_ADDR_OWVAR 35
7593: PUSH
7594: LD_EXP 20
7598: ST_TO_ADDR
// un = CreateHuman ;
7599: LD_ADDR_VAR 0 3
7603: PUSH
7604: CALL_OW 44
7608: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
7609: LD_VAR 0 3
7613: PPUSH
7614: LD_INT 15
7616: PPUSH
7617: LD_INT 0
7619: PPUSH
7620: CALL_OW 49
// end ;
7624: GO 7515
7626: POP
7627: POP
// end ; end_of_file
7628: LD_VAR 0 1
7632: RET
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
7633: LD_INT 0
7635: PPUSH
7636: PPUSH
// if not missionNumber then
7637: LD_VAR 0 2
7641: NOT
7642: IFFALSE 7646
// exit ;
7644: GO 7776
// achiv := false ;
7646: LD_ADDR_VAR 0 7
7650: PUSH
7651: LD_INT 0
7653: ST_TO_ADDR
// case campaignNumber of 1 :
7654: LD_VAR 0 1
7658: PUSH
7659: LD_INT 1
7661: DOUBLE
7662: EQUAL
7663: IFTRUE 7667
7665: GO 7678
7667: POP
// achiv := ACH_GOTA ; 2 :
7668: LD_ADDR_VAR 0 7
7672: PUSH
7673: LD_STRING ACH_GOTA
7675: ST_TO_ADDR
7676: GO 7728
7678: LD_INT 2
7680: DOUBLE
7681: EQUAL
7682: IFTRUE 7686
7684: GO 7689
7686: POP
// ; 3 :
7687: GO 7728
7689: LD_INT 3
7691: DOUBLE
7692: EQUAL
7693: IFTRUE 7697
7695: GO 7708
7697: POP
// achiv := ACH_MOTSU ; 4 :
7698: LD_ADDR_VAR 0 7
7702: PUSH
7703: LD_STRING ACH_MOTSU
7705: ST_TO_ADDR
7706: GO 7728
7708: LD_INT 4
7710: DOUBLE
7711: EQUAL
7712: IFTRUE 7716
7714: GO 7727
7716: POP
// achiv := ACH_LOP ; end ;
7717: LD_ADDR_VAR 0 7
7721: PUSH
7722: LD_STRING ACH_LOP
7724: ST_TO_ADDR
7725: GO 7728
7727: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
7728: LD_OWVAR 67
7732: PUSH
7733: LD_INT 3
7735: EQUAL
7736: PUSH
7737: LD_VAR 0 7
7741: AND
7742: PUSH
7743: LD_VAR 0 3
7747: AND
7748: PUSH
7749: LD_VAR 0 4
7753: AND
7754: PUSH
7755: LD_VAR 0 5
7759: AND
7760: IFFALSE 7776
// SetAchievementEX ( achiv , missionNumber ) ;
7762: LD_VAR 0 7
7766: PPUSH
7767: LD_VAR 0 2
7771: PPUSH
7772: CALL_OW 564
// end ;
7776: LD_VAR 0 6
7780: RET
// export function SA_BehemothConstructed ; begin
7781: LD_INT 0
7783: PPUSH
// SetAchievement ( ACH_SMC ) ;
7784: LD_STRING ACH_SMC
7786: PPUSH
7787: CALL_OW 543
// end ;
7791: LD_VAR 0 1
7795: RET
