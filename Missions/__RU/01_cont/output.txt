// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12575 0 0
// PrepareAmericans ;
  28: CALL 12148 0 0
// PrepareNature ;
  32: CALL 13279 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 34
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 35
 454: PUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_INT 6
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 37
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 38
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 39
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 40
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 32
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 37
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 37
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 46
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 46
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 46
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 46
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 46
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 46
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// end ;
1016: LD_VAR 0 1
1020: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1021: LD_EXP 46
1025: PPUSH
1026: LD_INT 74
1028: PPUSH
1029: LD_INT 88
1031: PPUSH
1032: CALL_OW 297
1036: PUSH
1037: LD_INT 5
1039: LESS
1040: PUSH
1041: LD_EXP 3
1045: AND
1046: IFFALSE 1071
1048: GO 1050
1050: DISABLE
// begin spotWaterfall = true ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1059: LD_EXP 46
1063: PPUSH
1064: LD_STRING DWaterfall-Bur-1
1066: PPUSH
1067: CALL_OW 88
// end ;
1071: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1072: LD_EXP 46
1076: PPUSH
1077: LD_INT 130
1079: PPUSH
1080: LD_INT 96
1082: PPUSH
1083: CALL_OW 297
1087: PUSH
1088: LD_INT 5
1090: LESS
1091: PUSH
1092: LD_EXP 3
1096: AND
1097: IFFALSE 1114
1099: GO 1101
1101: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1102: LD_EXP 46
1106: PPUSH
1107: LD_STRING DCorpse-Bur-1
1109: PPUSH
1110: CALL_OW 88
1114: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1115: LD_EXP 4
1119: NOT
1120: IFFALSE 1214
1122: GO 1124
1124: DISABLE
1125: LD_INT 0
1127: PPUSH
// begin enable ;
1128: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1129: LD_ADDR_VAR 0 1
1133: PUSH
1134: LD_INT 22
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 25
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PPUSH
1158: CALL_OW 69
1162: PUSH
1163: FOR_IN
1164: IFFALSE 1212
// if GetDistUnits ( apeman , Burlak ) < 7 then
1166: LD_VAR 0 1
1170: PPUSH
1171: LD_EXP 46
1175: PPUSH
1176: CALL_OW 296
1180: PUSH
1181: LD_INT 7
1183: LESS
1184: IFFALSE 1210
// begin apemansContact = true ;
1186: LD_ADDR_EXP 4
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1194: LD_EXP 46
1198: PPUSH
1199: LD_STRING D2-Bur-1
1201: PPUSH
1202: CALL_OW 88
// exit ;
1206: POP
1207: POP
1208: GO 1214
// end ;
1210: GO 1163
1212: POP
1213: POP
// end ;
1214: PPOPN 1
1216: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1217: LD_EXP 5
1221: NOT
1222: IFFALSE 1338
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
// begin enable ;
1231: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 0
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 25
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 69
1265: PUSH
1266: FOR_IN
1267: IFFALSE 1336
// if Attacks ( apeman ) then
1269: LD_VAR 0 2
1273: PPUSH
1274: CALL_OW 320
1278: IFFALSE 1334
// if GetSide ( Attacks ( apeman ) ) = 3 then
1280: LD_VAR 0 2
1284: PPUSH
1285: CALL_OW 320
1289: PPUSH
1290: CALL_OW 255
1294: PUSH
1295: LD_INT 3
1297: EQUAL
1298: IFFALSE 1334
// begin attackedByApeman = true ;
1300: LD_ADDR_EXP 5
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1308: LD_ADDR_EXP 8
1312: PUSH
1313: LD_VAR 0 2
1317: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1318: LD_EXP 46
1322: PPUSH
1323: LD_STRING D2-Bur-1a
1325: PPUSH
1326: CALL_OW 88
// exit ;
1330: POP
1331: POP
1332: GO 1338
// end ;
1334: GO 1266
1336: POP
1337: POP
// end ;
1338: PPOPN 2
1340: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1341: LD_EXP 6
1345: NOT
1346: IFFALSE 1443
1348: GO 1350
1350: DISABLE
1351: LD_INT 0
1353: PPUSH
1354: PPUSH
// begin enable ;
1355: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 24
1363: PPUSH
1364: LD_INT 22
1366: PUSH
1367: LD_INT 0
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 25
1376: PUSH
1377: LD_INT 12
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PPUSH
1388: CALL_OW 70
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1441
// if Attacks ( apeman ) then
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 320
1405: IFFALSE 1439
// if GetSide ( Attacks ( apeman ) ) = 3 then
1407: LD_VAR 0 2
1411: PPUSH
1412: CALL_OW 320
1416: PPUSH
1417: CALL_OW 255
1421: PUSH
1422: LD_INT 3
1424: EQUAL
1425: IFFALSE 1439
// begin attackedByApemanNearLake = true ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// exit ;
1435: POP
1436: POP
1437: GO 1443
// end ;
1439: GO 1393
1441: POP
1442: POP
// end ;
1443: PPOPN 2
1445: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1446: LD_EXP 9
1450: PPUSH
1451: CALL_OW 303
1455: IFFALSE 1489
1457: GO 1459
1459: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1460: LD_ADDR_EXP 10
1464: PUSH
1465: LD_EXP 9
1469: PPUSH
1470: CALL_OW 250
1474: PUSH
1475: LD_EXP 9
1479: PPUSH
1480: CALL_OW 251
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: ST_TO_ADDR
1489: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1490: LD_EXP 9
1494: PPUSH
1495: CALL_OW 303
1499: PUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_EXP 10
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: PPUSH
1512: LD_EXP 10
1516: PUSH
1517: LD_INT 2
1519: ARRAY
1520: PPUSH
1521: CALL_OW 293
1525: AND
1526: IFFALSE 1910
1528: GO 1530
1530: DISABLE
1531: LD_INT 0
1533: PPUSH
// begin wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1541: LD_EXP 46
1545: PPUSH
1546: LD_STRING D2a-Bur-1
1548: PPUSH
1549: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1553: LD_INT 22
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 21
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PPUSH
1577: CALL_OW 69
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1601
// Say ( Burlak , D2a-Bur-2 ) else
1587: LD_EXP 46
1591: PPUSH
1592: LD_STRING D2a-Bur-2
1594: PPUSH
1595: CALL_OW 88
1599: GO 1910
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1601: LD_ADDR_VAR 0 1
1605: PUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 69
1634: PUSH
1635: LD_EXP 46
1639: PUSH
1640: LD_EXP 54
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: DIFF
1649: PPUSH
1650: LD_EXP 10
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_EXP 10
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: CALL_OW 73
1672: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1673: LD_ADDR_EXP 11
1677: PUSH
1678: LD_VAR 0 1
1682: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1683: LD_VAR 0 1
1687: PPUSH
1688: LD_EXP 10
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: LD_EXP 10
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PPUSH
1706: CALL_OW 111
// case nearUnit of Belkov :
1710: LD_VAR 0 1
1714: PUSH
1715: LD_EXP 51
1719: DOUBLE
1720: EQUAL
1721: IFTRUE 1725
1723: GO 1740
1725: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1726: LD_EXP 51
1730: PPUSH
1731: LD_STRING D2a-Bel-1
1733: PPUSH
1734: CALL_OW 88
1738: GO 1807
1740: LD_EXP 53
1744: DOUBLE
1745: EQUAL
1746: IFTRUE 1750
1748: GO 1765
1750: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1751: LD_EXP 53
1755: PPUSH
1756: LD_STRING D2a-Kir-1
1758: PPUSH
1759: CALL_OW 88
1763: GO 1807
1765: POP
// if GetSex ( nearUnit ) = sex_male then
1766: LD_VAR 0 1
1770: PPUSH
1771: CALL_OW 258
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1795
// Say ( nearUnit , D2a-RSol1-1 ) else
1781: LD_VAR 0 1
1785: PPUSH
1786: LD_STRING D2a-RSol1-1
1788: PPUSH
1789: CALL_OW 88
1793: GO 1807
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1795: LD_VAR 0 1
1799: PPUSH
1800: LD_STRING D2a-RFSol1-1
1802: PPUSH
1803: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1807: LD_EXP 54
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 3
1819: EQUAL
1820: PUSH
1821: LD_EXP 54
1825: PPUSH
1826: CALL_OW 302
1830: AND
1831: IFFALSE 1845
// Say ( Gnyevko , D2a-Gny-1 ) ;
1833: LD_EXP 54
1837: PPUSH
1838: LD_STRING D2a-Gny-1
1840: PPUSH
1841: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 255
1854: PUSH
1855: LD_INT 8
1857: EQUAL
1858: IFFALSE 1910
// begin Say ( Burlak , D12-Bur-1 ) ;
1860: LD_EXP 46
1864: PPUSH
1865: LD_STRING D12-Bur-1
1867: PPUSH
1868: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1872: LD_EXP 51
1876: PPUSH
1877: CALL_OW 255
1881: PUSH
1882: LD_INT 3
1884: EQUAL
1885: PUSH
1886: LD_EXP 51
1890: PPUSH
1891: CALL_OW 302
1895: AND
1896: IFFALSE 1910
// Say ( Belkov , D12-Bel-2 ) ;
1898: LD_EXP 51
1902: PPUSH
1903: LD_STRING D12-Bel-2
1905: PPUSH
1906: CALL_OW 88
// end ; end ; end ;
1910: PPOPN 1
1912: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1913: LD_EXP 12
1917: NOT
1918: PUSH
1919: LD_EXP 40
1923: PUSH
1924: LD_INT 70
1926: GREATER
1927: AND
1928: IFFALSE 1948
1930: GO 1932
1932: DISABLE
// begin enable ;
1933: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1934: LD_EXP 54
1938: PPUSH
1939: LD_EXP 39
1943: PPUSH
1944: CALL_OW 234
// end ;
1948: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1949: LD_INT 3
1951: PPUSH
1952: LD_EXP 54
1956: PPUSH
1957: CALL_OW 292
1961: IFFALSE 2573
1963: GO 1965
1965: DISABLE
1966: LD_INT 0
1968: PPUSH
1969: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1970: LD_EXP 54
1974: PPUSH
1975: CALL_OW 87
// DialogueOn ;
1979: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1983: LD_ADDR_VAR 0 1
1987: PUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 1
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PPUSH
2017: LD_EXP 54
2021: PPUSH
2022: CALL_OW 74
2026: ST_TO_ADDR
// if nearUnit = Burlak then
2027: LD_VAR 0 1
2031: PUSH
2032: LD_EXP 46
2036: EQUAL
2037: IFFALSE 2399
// begin Say ( Burlak , D3-Bur-1 ) ;
2039: LD_EXP 46
2043: PPUSH
2044: LD_STRING D3-Bur-1
2046: PPUSH
2047: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2051: LD_EXP 54
2055: PPUSH
2056: LD_STRING D3-Gny-1
2058: PPUSH
2059: CALL_OW 88
// if apeWithRadioKiller then
2063: LD_EXP 11
2067: IFFALSE 2107
// begin if apeWithRadioKiller = Burlak then
2069: LD_EXP 11
2073: PUSH
2074: LD_EXP 46
2078: EQUAL
2079: IFFALSE 2095
// Say ( Burlak , D3-Bur-2 ) else
2081: LD_EXP 46
2085: PPUSH
2086: LD_STRING D3-Bur-2
2088: PPUSH
2089: CALL_OW 88
2093: GO 2107
// Say ( Burlak , D3-Bur-2a ) ;
2095: LD_EXP 46
2099: PPUSH
2100: LD_STRING D3-Bur-2a
2102: PPUSH
2103: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2107: LD_EXP 46
2111: PPUSH
2112: LD_STRING D3-Bur-2b
2114: PPUSH
2115: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: EQUAL
2151: PUSH
2152: LD_EXP 14
2156: NOT
2157: AND
2158: IFFALSE 2210
// begin Say ( Burlak , D3-Bur-2c ) ;
2160: LD_EXP 46
2164: PPUSH
2165: LD_STRING D3-Bur-2c
2167: PPUSH
2168: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2172: LD_EXP 54
2176: PPUSH
2177: LD_STRING D3-Gny-2
2179: PPUSH
2180: CALL_OW 88
// DialogueOff ;
2184: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2188: LD_EXP 54
2192: PPUSH
2193: LD_INT 3
2195: PPUSH
2196: CALL_OW 235
// gnyevkoSaved = true ;
2200: LD_ADDR_EXP 12
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// exit ;
2208: GO 2573
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2210: LD_INT 22
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: LD_INT 1
2241: GREATER
2242: PUSH
2243: LD_EXP 14
2247: OR
2248: PUSH
2249: LD_EXP 22
2253: NOT
2254: AND
2255: IFFALSE 2307
// begin Say ( Burlak , D3-Bur-2d ) ;
2257: LD_EXP 46
2261: PPUSH
2262: LD_STRING D3-Bur-2d
2264: PPUSH
2265: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2269: LD_EXP 54
2273: PPUSH
2274: LD_STRING D3-Gny-2
2276: PPUSH
2277: CALL_OW 88
// DialogueOff ;
2281: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2285: LD_EXP 54
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL_OW 235
// gnyevkoSaved = true ;
2297: LD_ADDR_EXP 12
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// exit ;
2305: GO 2573
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2307: LD_INT 22
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 21
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PPUSH
2331: CALL_OW 69
2335: PUSH
2336: LD_INT 1
2338: GREATER
2339: PUSH
2340: LD_EXP 22
2344: AND
2345: IFFALSE 2397
// begin Say ( Burlak , D3-Bur-2e ) ;
2347: LD_EXP 46
2351: PPUSH
2352: LD_STRING D3-Bur-2e
2354: PPUSH
2355: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2359: LD_EXP 54
2363: PPUSH
2364: LD_STRING D3-Gny-2
2366: PPUSH
2367: CALL_OW 88
// DialogueOff ;
2371: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2375: LD_EXP 54
2379: PPUSH
2380: LD_INT 3
2382: PPUSH
2383: CALL_OW 235
// gnyevkoSaved = true ;
2387: LD_ADDR_EXP 12
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// exit ;
2395: GO 2573
// end ; end else
2397: GO 2573
// begin if GetSex ( nearUnit ) = sex_male then
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 258
2408: PUSH
2409: LD_INT 1
2411: EQUAL
2412: IFFALSE 2428
// Say ( nearUnit , D3-RSol1-1 ) else
2414: LD_VAR 0 1
2418: PPUSH
2419: LD_STRING D3-RSol1-1
2421: PPUSH
2422: CALL_OW 88
2426: GO 2440
// Say ( nearUnit , D3-RFSol1-1 ) ;
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_STRING D3-RFSol1-1
2435: PPUSH
2436: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2440: LD_EXP 54
2444: PPUSH
2445: LD_STRING D3-Gny-1
2447: PPUSH
2448: CALL_OW 88
// if apeWithRadioKiller then
2452: LD_EXP 11
2456: IFFALSE 2496
// begin if apeWithRadioKiller = Burlak then
2458: LD_EXP 11
2462: PUSH
2463: LD_EXP 46
2467: EQUAL
2468: IFFALSE 2484
// Say ( Burlak , D3-Bur-2 ) else
2470: LD_EXP 46
2474: PPUSH
2475: LD_STRING D3-Bur-2
2477: PPUSH
2478: CALL_OW 88
2482: GO 2496
// Say ( Burlak , D3-Bur-2a ) ;
2484: LD_EXP 46
2488: PPUSH
2489: LD_STRING D3-Bur-2a
2491: PPUSH
2492: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 258
2505: PUSH
2506: LD_INT 1
2508: EQUAL
2509: IFFALSE 2525
// Say ( nearUnit , D3-RSol1-2 ) else
2511: LD_VAR 0 1
2515: PPUSH
2516: LD_STRING D3-RSol1-2
2518: PPUSH
2519: CALL_OW 88
2523: GO 2537
// Say ( nearUnit , D3-RFSol1-2 ) ;
2525: LD_VAR 0 1
2529: PPUSH
2530: LD_STRING D3-RFSol1-2
2532: PPUSH
2533: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2537: LD_EXP 54
2541: PPUSH
2542: LD_STRING D3-Gny-2a
2544: PPUSH
2545: CALL_OW 88
// DialogueOff ;
2549: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2553: LD_EXP 54
2557: PPUSH
2558: LD_INT 3
2560: PPUSH
2561: CALL_OW 235
// gnyevkoSaved = true ;
2565: LD_ADDR_EXP 12
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// end ; end ;
2573: PPOPN 2
2575: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2576: LD_EXP 12
2580: NOT
2581: PUSH
2582: LD_EXP 21
2586: NOT
2587: OR
2588: IFFALSE 2783
2590: GO 2592
2592: DISABLE
2593: LD_INT 0
2595: PPUSH
// begin enable ;
2596: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2597: LD_EXP 12
2601: NOT
2602: PUSH
2603: LD_EXP 40
2607: PUSH
2608: LD_INT 70
2610: GREATER
2611: AND
2612: IFFALSE 2690
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2614: LD_ADDR_VAR 0 1
2618: PUSH
2619: LD_INT 22
2621: PUSH
2622: LD_INT 0
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 25
2631: PUSH
2632: LD_INT 12
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 69
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2688
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: LD_EXP 54
2660: PPUSH
2661: CALL_OW 250
2665: PPUSH
2666: LD_EXP 54
2670: PPUSH
2671: CALL_OW 251
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL 8439 0 5
2686: GO 2648
2688: POP
2689: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2690: LD_EXP 21
2694: NOT
2695: PUSH
2696: LD_EXP 41
2700: PUSH
2701: LD_INT 70
2703: GREATER
2704: AND
2705: IFFALSE 2783
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 12
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 69
2740: PUSH
2741: FOR_IN
2742: IFFALSE 2781
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2744: LD_VAR 0 1
2748: PPUSH
2749: LD_EXP 53
2753: PPUSH
2754: CALL_OW 250
2758: PPUSH
2759: LD_EXP 53
2763: PPUSH
2764: CALL_OW 251
2768: PPUSH
2769: LD_INT 10
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL 8439 0 5
2779: GO 2741
2781: POP
2782: POP
// end ;
2783: PPOPN 1
2785: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2786: LD_EXP 12
2790: NOT
2791: PUSH
2792: LD_EXP 21
2796: NOT
2797: OR
2798: IFFALSE 2909
2800: GO 2802
2802: DISABLE
// begin enable ;
2803: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2804: LD_EXP 12
2808: NOT
2809: PUSH
2810: LD_EXP 40
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: AND
2819: IFFALSE 2835
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2821: LD_ADDR_EXP 40
2825: PUSH
2826: LD_EXP 40
2830: PUSH
2831: LD_INT 35
2833: MINUS
2834: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2835: LD_EXP 53
2839: PPUSH
2840: CALL_OW 305
2844: PUSH
2845: LD_EXP 21
2849: NOT
2850: AND
2851: PUSH
2852: LD_EXP 41
2856: PUSH
2857: LD_INT 0
2859: GREATER
2860: AND
2861: IFFALSE 2877
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2863: LD_ADDR_EXP 41
2867: PUSH
2868: LD_EXP 41
2872: PUSH
2873: LD_INT 35
2875: MINUS
2876: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2877: LD_EXP 53
2881: PPUSH
2882: CALL_OW 305
2886: PUSH
2887: LD_EXP 21
2891: NOT
2892: AND
2893: IFFALSE 2909
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2895: LD_ADDR_EXP 26
2899: PUSH
2900: LD_EXP 26
2904: PUSH
2905: LD_INT 35
2907: PLUS
2908: ST_TO_ADDR
// end ;
2909: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2910: LD_INT 3
2912: PPUSH
2913: LD_EXP 47
2917: PPUSH
2918: CALL_OW 292
2922: PUSH
2923: LD_INT 6
2925: PPUSH
2926: LD_EXP 46
2930: PPUSH
2931: CALL_OW 292
2935: OR
2936: PUSH
2937: LD_EXP 54
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 3
2949: EQUAL
2950: PUSH
2951: LD_INT 6
2953: PPUSH
2954: LD_EXP 54
2958: PPUSH
2959: CALL_OW 292
2963: AND
2964: OR
2965: PUSH
2966: LD_EXP 14
2970: NOT
2971: AND
2972: IFFALSE 3887
2974: GO 2976
2976: DISABLE
// begin enable ;
2977: ENABLE
// InGameOn ;
2978: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2982: LD_EXP 47
2986: PPUSH
2987: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2991: LD_EXP 54
2995: PPUSH
2996: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3000: LD_EXP 46
3004: PUSH
3005: LD_EXP 54
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 200
// DialogueOn ;
3018: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3022: LD_EXP 13
3026: IFFALSE 3278
// begin meetPokryshkin = true ;
3028: LD_ADDR_EXP 14
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3036: LD_INT 6
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 343
// DialogueOff ;
3046: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3050: LD_EXP 46
3054: PPUSH
3055: LD_EXP 47
3059: PPUSH
3060: CALL_OW 250
3064: PPUSH
3065: LD_EXP 47
3069: PPUSH
3070: CALL_OW 251
3074: PPUSH
3075: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3079: LD_EXP 46
3083: PPUSH
3084: LD_EXP 47
3088: PPUSH
3089: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3093: LD_EXP 47
3097: PPUSH
3098: LD_EXP 46
3102: PPUSH
3103: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3107: LD_EXP 54
3111: PPUSH
3112: LD_STRING D4-Gny-3
3114: PPUSH
3115: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3119: LD_EXP 46
3123: PPUSH
3124: LD_STRING D4-Bur-3
3126: PPUSH
3127: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3131: LD_EXP 47
3135: PPUSH
3136: LD_STRING D4-Pok-4
3138: PPUSH
3139: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3143: LD_EXP 42
3147: PPUSH
3148: LD_INT 18
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: CALL_OW 49
// wait ( 0 0$2 ) ;
3158: LD_INT 70
3160: PPUSH
3161: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3165: LD_EXP 46
3169: PPUSH
3170: LD_STRING D4-Bur-4
3172: PPUSH
3173: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3177: LD_EXP 47
3181: PPUSH
3182: LD_STRING D4-Pok-5
3184: PPUSH
3185: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3189: LD_EXP 42
3193: PPUSH
3194: LD_STRING D4-Sol1-5
3196: PPUSH
3197: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3201: LD_EXP 47
3205: PPUSH
3206: LD_STRING D4-Pok-6
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3213: LD_EXP 47
3217: PPUSH
3218: LD_STRING D4-Pok-6a
3220: PPUSH
3221: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3225: LD_EXP 46
3229: PPUSH
3230: LD_STRING D4-Bur-6
3232: PPUSH
3233: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3237: LD_EXP 47
3241: PPUSH
3242: LD_STRING D4-Pok-7
3244: PPUSH
3245: CALL_OW 88
// DialogueOff ;
3249: CALL_OW 7
// InGameOff ;
3253: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3257: LD_STRING M2
3259: PPUSH
3260: CALL_OW 337
// goToHill = true ;
3264: LD_ADDR_EXP 15
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// MoveToHill ;
3272: CALL 10319 0 0
// exit ;
3276: GO 3887
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3278: LD_EXP 46
3282: PUSH
3283: LD_EXP 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3296: LD_EXP 47
3300: PPUSH
3301: LD_STRING D4-Pok-1
3303: PPUSH
3304: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3308: LD_EXP 54
3312: PPUSH
3313: CALL_OW 255
3317: PUSH
3318: LD_INT 3
3320: EQUAL
3321: PUSH
3322: LD_EXP 54
3326: PPUSH
3327: CALL_OW 302
3331: AND
3332: IFFALSE 3346
// Say ( Gnyevko , D4-Gny-1 ) ;
3334: LD_EXP 54
3338: PPUSH
3339: LD_STRING D4-Gny-1
3341: PPUSH
3342: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3346: LD_EXP 46
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 6
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 21
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: PPUSH
3380: LD_EXP 46
3384: PPUSH
3385: CALL_OW 74
3389: PPUSH
3390: CALL_OW 296
3394: PUSH
3395: LD_INT 8
3397: GREATER
3398: PUSH
3399: LD_EXP 46
3403: PPUSH
3404: LD_EXP 54
3408: PPUSH
3409: CALL_OW 296
3413: PUSH
3414: LD_INT 8
3416: GREATER
3417: AND
3418: PUSH
3419: LD_EXP 54
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: LD_INT 3
3431: EQUAL
3432: AND
3433: PUSH
3434: LD_EXP 54
3438: PPUSH
3439: CALL_OW 302
3443: AND
3444: IFFALSE 3542
// begin ComWalk ( Gnyevko ) ;
3446: LD_EXP 54
3450: PPUSH
3451: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3455: LD_EXP 47
3459: PPUSH
3460: LD_STRING D4-Pok-2
3462: PPUSH
3463: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3467: LD_EXP 54
3471: PPUSH
3472: LD_STRING D4-Gny-2
3474: PPUSH
3475: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3479: LD_EXP 47
3483: PPUSH
3484: LD_STRING D4-Pok-3
3486: PPUSH
3487: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3491: LD_ADDR_EXP 13
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3499: LD_EXP 54
3503: PPUSH
3504: LD_INT 6
3506: PPUSH
3507: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3511: LD_EXP 54
3515: PPUSH
3516: LD_EXP 47
3520: PPUSH
3521: CALL_OW 250
3525: PPUSH
3526: LD_EXP 47
3530: PPUSH
3531: CALL_OW 251
3535: PPUSH
3536: CALL_OW 171
// end else
3540: GO 3879
// begin meetPokryshkin = true ;
3542: LD_ADDR_EXP 14
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3550: LD_INT 6
3552: PPUSH
3553: LD_INT 3
3555: PPUSH
3556: CALL_OW 343
// DialogueOff ;
3560: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3564: LD_EXP 54
3568: PPUSH
3569: CALL_OW 255
3573: PUSH
3574: LD_INT 3
3576: EQUAL
3577: PUSH
3578: LD_EXP 54
3582: PPUSH
3583: CALL_OW 302
3587: AND
3588: IFFALSE 3665
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3590: LD_EXP 46
3594: PUSH
3595: LD_EXP 54
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: LD_EXP 47
3608: PPUSH
3609: CALL_OW 250
3613: PPUSH
3614: LD_EXP 47
3618: PPUSH
3619: CALL_OW 251
3623: PPUSH
3624: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3628: LD_EXP 46
3632: PUSH
3633: LD_EXP 54
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: LD_EXP 47
3646: PPUSH
3647: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3651: LD_EXP 54
3655: PPUSH
3656: LD_INT 6
3658: PPUSH
3659: CALL_OW 235
// end else
3663: GO 3708
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3665: LD_EXP 46
3669: PPUSH
3670: LD_EXP 47
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 47
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_EXP 47
3703: PPUSH
3704: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3708: LD_EXP 47
3712: PPUSH
3713: LD_EXP 46
3717: PPUSH
3718: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3722: LD_EXP 46
3726: PPUSH
3727: LD_STRING D4-Bur-3
3729: PPUSH
3730: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3734: LD_EXP 47
3738: PPUSH
3739: LD_STRING D4-Pok-4
3741: PPUSH
3742: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3746: LD_EXP 42
3750: PPUSH
3751: LD_INT 18
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: CALL_OW 49
// wait ( 0 0$2 ) ;
3761: LD_INT 70
3763: PPUSH
3764: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3768: LD_EXP 46
3772: PPUSH
3773: LD_STRING D4-Bur-4
3775: PPUSH
3776: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3780: LD_EXP 47
3784: PPUSH
3785: LD_STRING D4-Pok-5
3787: PPUSH
3788: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3792: LD_EXP 42
3796: PPUSH
3797: LD_STRING D4-Sol1-5
3799: PPUSH
3800: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3804: LD_EXP 47
3808: PPUSH
3809: LD_STRING D4-Pok-6
3811: PPUSH
3812: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3816: LD_EXP 47
3820: PPUSH
3821: LD_STRING D4-Pok-6a
3823: PPUSH
3824: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3828: LD_EXP 46
3832: PPUSH
3833: LD_STRING D4-Bur-6
3835: PPUSH
3836: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3840: LD_EXP 47
3844: PPUSH
3845: LD_STRING D4-Pok-7
3847: PPUSH
3848: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3852: LD_STRING M2
3854: PPUSH
3855: CALL_OW 337
// goToHill = true ;
3859: LD_ADDR_EXP 15
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// DialogueOff ;
3867: CALL_OW 7
// InGameOff ;
3871: CALL_OW 9
// MoveToHill ;
3875: CALL 10319 0 0
// end ; DialogueOff ;
3879: CALL_OW 7
// InGameOff ;
3883: CALL_OW 9
// end ;
3887: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3888: LD_EXP 46
3892: PPUSH
3893: LD_EXP 47
3897: PPUSH
3898: CALL_OW 296
3902: PUSH
3903: LD_INT 10
3905: GREATER
3906: PUSH
3907: LD_EXP 15
3911: AND
3912: PUSH
3913: LD_EXP 18
3917: NOT
3918: AND
3919: IFFALSE 4120
3921: GO 3923
3923: DISABLE
3924: LD_INT 0
3926: PPUSH
// begin enable ;
3927: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_EXP 47
3937: PUSH
3938: LD_EXP 48
3942: PUSH
3943: LD_EXP 49
3947: PUSH
3948: LD_EXP 50
3952: PUSH
3953: LD_EXP 51
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3965: LD_EXP 54
3969: PPUSH
3970: CALL_OW 255
3974: PUSH
3975: LD_INT 6
3977: EQUAL
3978: PUSH
3979: LD_EXP 12
3983: AND
3984: IFFALSE 4002
// ruSolds = ruSolds ^ Gnyevko ;
3986: LD_ADDR_VAR 0 1
3990: PUSH
3991: LD_VAR 0 1
3995: PUSH
3996: LD_EXP 54
4000: ADD
4001: ST_TO_ADDR
// ComStop ( ruSolds ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
4011: LD_EXP 46
4015: PPUSH
4016: CALL_OW 87
// DialogueOn ;
4020: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4024: LD_EXP 47
4028: PPUSH
4029: LD_STRING DSplit-Pok-1
4031: PPUSH
4032: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4036: LD_EXP 46
4040: PPUSH
4041: LD_STRING DSplit-Bur-1
4043: PPUSH
4044: CALL_OW 88
// DialogueOff ;
4048: CALL_OW 7
// InGameOn ;
4052: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_EXP 47
4065: PPUSH
4066: CALL_OW 250
4070: PPUSH
4071: LD_EXP 47
4075: PPUSH
4076: CALL_OW 251
4080: PPUSH
4081: CALL_OW 111
// wait ( 0 0$1 ) ;
4085: LD_INT 35
4087: PPUSH
4088: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4092: LD_EXP 46
4096: PPUSH
4097: LD_EXP 47
4101: PPUSH
4102: CALL_OW 296
4106: PUSH
4107: LD_INT 6
4109: LESS
4110: IFFALSE 4056
// InGameOff ;
4112: CALL_OW 9
// MoveToHill ;
4116: CALL 10319 0 0
// end ;
4120: PPOPN 1
4122: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
// traitor = true ;
4127: LD_ADDR_EXP 18
4131: PUSH
4132: LD_INT 1
4134: ST_TO_ADDR
// DialogueOn ;
4135: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4139: LD_EXP 47
4143: PPUSH
4144: LD_STRING DAttack-Pok-1
4146: PPUSH
4147: CALL_OW 88
// DialogueOff ;
4151: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4155: LD_INT 3
4157: PPUSH
4158: LD_INT 6
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4171: LD_INT 22
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 1
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 69
4199: PPUSH
4200: LD_EXP 46
4204: PPUSH
4205: CALL_OW 115
// end ;
4209: LD_VAR 0 1
4213: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4214: LD_EXP 47
4218: PPUSH
4219: LD_INT 65
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: CALL_OW 297
4229: PUSH
4230: LD_INT 4
4232: LESS
4233: PUSH
4234: LD_EXP 18
4238: NOT
4239: AND
4240: IFFALSE 4437
4242: GO 4244
4244: DISABLE
// begin InGameOn ;
4245: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4249: LD_INT 55
4251: PPUSH
4252: LD_INT 50
4254: PPUSH
4255: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4259: LD_EXP 46
4263: PPUSH
4264: LD_INT 66
4266: PPUSH
4267: LD_INT 57
4269: PPUSH
4270: CALL_OW 111
// AddComHold ( Burlak ) ;
4274: LD_EXP 46
4278: PPUSH
4279: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4283: LD_EXP 42
4287: PPUSH
4288: LD_INT 59
4290: PPUSH
4291: LD_INT 55
4293: PPUSH
4294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4298: LD_INT 35
4300: PPUSH
4301: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4305: LD_INT 1
4307: PPUSH
4308: LD_EXP 47
4312: PPUSH
4313: CALL_OW 292
4317: IFFALSE 4298
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4319: LD_EXP 42
4323: PUSH
4324: LD_EXP 47
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 87
// ComStop ( Charles ) ;
4337: LD_EXP 42
4341: PPUSH
4342: CALL_OW 141
// AddComHold ( Charles ) ;
4346: LD_EXP 42
4350: PPUSH
4351: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4355: LD_EXP 42
4359: PPUSH
4360: LD_EXP 47
4364: PPUSH
4365: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4369: LD_EXP 42
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4381: LD_EXP 47
4385: PPUSH
4386: LD_STRING D5-Pok-1
4388: PPUSH
4389: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4393: LD_INT 1
4395: PPUSH
4396: LD_INT 6
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4409: LD_INT 1
4411: PPUSH
4412: LD_INT 3
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4425: LD_EXP 42
4429: PPUSH
4430: LD_STRING D5-Sol1-2
4432: PPUSH
4433: CALL_OW 88
// end ;
4437: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4438: LD_EXP 42
4442: PPUSH
4443: CALL_OW 301
4447: PUSH
4448: LD_EXP 15
4452: AND
4453: IFFALSE 5057
4455: GO 4457
4457: DISABLE
4458: LD_INT 0
4460: PPUSH
// begin InGameOn ;
4461: CALL_OW 8
// goToHill = false ;
4465: LD_ADDR_EXP 15
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4473: LD_INT 22
4475: PUSH
4476: LD_INT 6
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PPUSH
4502: CALL_OW 141
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4513: LD_INT 22
4515: PUSH
4516: LD_INT 6
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 1
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PPUSH
4537: CALL_OW 69
4541: PPUSH
4542: CALL_OW 138
// wait ( 0 0$1 ) ;
4546: LD_INT 35
4548: PPUSH
4549: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4553: LD_INT 55
4555: PPUSH
4556: LD_INT 50
4558: PPUSH
4559: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4563: LD_EXP 46
4567: PPUSH
4568: LD_INT 56
4570: PPUSH
4571: LD_INT 56
4573: PPUSH
4574: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4578: LD_INT 22
4580: PUSH
4581: LD_INT 6
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PPUSH
4607: LD_INT 56
4609: PPUSH
4610: LD_INT 56
4612: PPUSH
4613: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4617: LD_EXP 46
4621: PPUSH
4622: LD_STRING D5-Bur-2
4624: PPUSH
4625: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4629: LD_EXP 47
4633: PPUSH
4634: LD_STRING D5-Pok-2
4636: PPUSH
4637: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4641: LD_EXP 51
4645: PPUSH
4646: LD_STRING D5-Bel-2
4648: PPUSH
4649: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_STRING D5-Pok-3
4660: PPUSH
4661: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4665: LD_EXP 54
4669: PPUSH
4670: CALL_OW 255
4674: PUSH
4675: LD_INT 6
4677: EQUAL
4678: IFFALSE 4692
// Say ( Gnyevko , D5-Gny-3 ) ;
4680: LD_EXP 54
4684: PPUSH
4685: LD_STRING D5-Gny-3
4687: PPUSH
4688: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4692: LD_EXP 46
4696: PPUSH
4697: LD_STRING D5-Bur-3
4699: PPUSH
4700: CALL_OW 88
// interface_hidden = true ;
4704: LD_ADDR_OWVAR 54
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// IngameOff ;
4712: CALL_OW 9
// wait ( 0 0$2 ) ;
4716: LD_INT 70
4718: PPUSH
4719: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4723: LD_EXP 46
4727: PPUSH
4728: LD_INT 85
4730: PPUSH
4731: LD_INT 64
4733: PPUSH
4734: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 6
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 21
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PPUSH
4762: CALL_OW 69
4766: PPUSH
4767: LD_INT 85
4769: PPUSH
4770: LD_INT 64
4772: PPUSH
4773: CALL_OW 111
// interface_hidden = false ;
4777: LD_ADDR_OWVAR 54
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// InGameOn ;
4785: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4789: LD_EXP 46
4793: PPUSH
4794: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4798: LD_EXP 47
4802: PPUSH
4803: LD_STRING D6-Pok-1
4805: PPUSH
4806: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4810: LD_EXP 46
4814: PPUSH
4815: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4819: LD_EXP 46
4823: PPUSH
4824: LD_STRING D6-Bur-1
4826: PPUSH
4827: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4831: LD_EXP 46
4835: PPUSH
4836: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4840: LD_EXP 47
4844: PPUSH
4845: LD_STRING D6-Pok-2
4847: PPUSH
4848: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4852: LD_EXP 46
4856: PPUSH
4857: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4861: LD_EXP 51
4865: PPUSH
4866: LD_STRING D6-Bel-2
4868: PPUSH
4869: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4873: LD_EXP 46
4877: PPUSH
4878: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4882: LD_EXP 46
4886: PPUSH
4887: LD_STRING D6-Bur-2
4889: PPUSH
4890: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4894: LD_EXP 46
4898: PPUSH
4899: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4903: LD_EXP 47
4907: PPUSH
4908: LD_STRING D6-Pok-3
4910: PPUSH
4911: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4915: LD_EXP 46
4919: PPUSH
4920: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4924: LD_EXP 55
4928: PPUSH
4929: LD_STRING D6-Kur-3
4931: PPUSH
4932: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4936: LD_EXP 46
4940: PPUSH
4941: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4945: LD_EXP 47
4949: PPUSH
4950: LD_STRING D6-Pok-4
4952: PPUSH
4953: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4957: LD_EXP 46
4961: PPUSH
4962: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4966: LD_EXP 51
4970: PPUSH
4971: LD_STRING D6-Bel-4
4973: PPUSH
4974: CALL_OW 88
// InGameOff ;
4978: CALL_OW 9
// interface_hidden = false ;
4982: LD_ADDR_OWVAR 54
4986: PUSH
4987: LD_INT 0
4989: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4990: LD_EXP 47
4994: PPUSH
4995: LD_INT 23
4997: PPUSH
4998: CALL_OW 115
// wait ( 0 0$5 ) ;
5002: LD_INT 175
5004: PPUSH
5005: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5009: LD_INT 22
5011: PUSH
5012: LD_INT 6
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: PPUSH
5038: LD_INT 23
5040: PPUSH
5041: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5045: LD_INT 1
5047: PPUSH
5048: LD_EXP 54
5052: PPUSH
5053: CALL_OW 471
// end ;
5057: PPOPN 1
5059: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5060: LD_INT 1
5062: PPUSH
5063: LD_EXP 47
5067: PPUSH
5068: CALL_OW 292
5072: PUSH
5073: LD_EXP 42
5077: PPUSH
5078: CALL_OW 301
5082: AND
5083: IFFALSE 5102
5085: GO 5087
5087: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5088: LD_EXP 43
5092: PPUSH
5093: LD_EXP 47
5097: PPUSH
5098: CALL_OW 115
5102: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5103: LD_INT 3
5105: PPUSH
5106: LD_INT 23
5108: PPUSH
5109: CALL_OW 292
5113: IFFALSE 5142
5115: GO 5117
5117: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5118: LD_EXP 47
5122: PPUSH
5123: LD_STRING D7-Pok-1
5125: PPUSH
5126: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5130: LD_EXP 43
5134: PPUSH
5135: LD_STRING D7-FSol1-1
5137: PPUSH
5138: CALL_OW 88
// end ;
5142: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5143: LD_EXP 47
5147: PPUSH
5148: CALL_OW 303
5152: IFFALSE 5684
5154: GO 5156
5156: DISABLE
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 6
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 50
5189: PUSH
5190: EMPTY
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 69
5202: PUSH
5203: LD_EXP 51
5207: DIFF
5208: ST_TO_ADDR
// DialogueOn ;
5209: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5213: LD_EXP 51
5217: PPUSH
5218: LD_STRING D7a-Bel-1
5220: PPUSH
5221: CALL_OW 88
// DialogueOff ;
5225: CALL_OW 7
// for i := 1 to ruSolds do
5229: LD_ADDR_VAR 0 1
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_VAR 0 3
5243: PUSH
5244: FOR_TO
5245: IFFALSE 5303
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5247: LD_VAR 0 3
5251: PUSH
5252: LD_VAR 0 1
5256: ARRAY
5257: PPUSH
5258: LD_INT 87
5260: PUSH
5261: LD_VAR 0 1
5265: PLUS
5266: PPUSH
5267: LD_INT 63
5269: PUSH
5270: LD_VAR 0 1
5274: PLUS
5275: PPUSH
5276: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5280: LD_VAR 0 3
5284: PUSH
5285: LD_VAR 0 1
5289: ARRAY
5290: PPUSH
5291: LD_INT 89
5293: PPUSH
5294: LD_INT 67
5296: PPUSH
5297: CALL_OW 178
// end ;
5301: GO 5244
5303: POP
5304: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5305: LD_EXP 51
5309: PPUSH
5310: LD_INT 89
5312: PPUSH
5313: LD_INT 67
5315: PPUSH
5316: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5320: LD_EXP 51
5324: PPUSH
5325: LD_INT 88
5327: PPUSH
5328: LD_INT 66
5330: PPUSH
5331: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5335: LD_EXP 48
5339: PPUSH
5340: LD_STRING D7a-RSol1-1
5342: PPUSH
5343: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5347: LD_EXP 43
5351: PPUSH
5352: LD_STRING D7a-FSol1-1
5354: PPUSH
5355: CALL_OW 88
// wait ( 0 0$12 ) ;
5359: LD_INT 420
5361: PPUSH
5362: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5366: LD_EXP 51
5370: PPUSH
5371: LD_STRING D7b-Bel-1
5373: PPUSH
5374: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5378: LD_EXP 49
5382: PPUSH
5383: LD_STRING D7b-FSol1-1
5385: PPUSH
5386: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5390: LD_EXP 51
5394: PPUSH
5395: LD_STRING D7b-Bel-2
5397: PPUSH
5398: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5402: LD_EXP 48
5406: PPUSH
5407: LD_STRING D7b-RSol1-2
5409: PPUSH
5410: CALL_OW 88
// for unit in ruSolds do
5414: LD_ADDR_VAR 0 2
5418: PUSH
5419: LD_VAR 0 3
5423: PUSH
5424: FOR_IN
5425: IFFALSE 5658
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5427: LD_EXP 46
5431: PPUSH
5432: LD_VAR 0 2
5436: PPUSH
5437: CALL_OW 296
5441: PUSH
5442: LD_INT 7
5444: LESS
5445: IFFALSE 5656
// begin InGameOn ;
5447: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5451: LD_EXP 51
5455: PUSH
5456: LD_EXP 48
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5469: LD_EXP 46
5473: PPUSH
5474: LD_INT 88
5476: PPUSH
5477: LD_INT 66
5479: PPUSH
5480: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5484: LD_EXP 51
5488: PPUSH
5489: LD_EXP 46
5493: PPUSH
5494: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5498: LD_EXP 46
5502: PPUSH
5503: LD_INT 90
5505: PPUSH
5506: LD_INT 66
5508: PPUSH
5509: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5513: LD_EXP 46
5517: PPUSH
5518: LD_STRING D7b-Bur-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5525: LD_EXP 51
5529: PPUSH
5530: LD_STRING D7b-Bel-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5537: LD_EXP 46
5541: PPUSH
5542: LD_STRING D7b-Bur-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5549: LD_EXP 51
5553: PPUSH
5554: LD_STRING D7b-Bel-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5561: LD_EXP 49
5565: PPUSH
5566: LD_STRING D7b-FSol1-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5573: LD_EXP 51
5577: PPUSH
5578: LD_STRING D7b-Bel-6
5580: PPUSH
5581: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5585: LD_EXP 46
5589: PPUSH
5590: LD_STRING D7b-Bur-6
5592: PPUSH
5593: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5597: LD_EXP 48
5601: PPUSH
5602: LD_STRING D7b-RSol1-6
5604: PPUSH
5605: CALL_OW 88
// InGameOff ;
5609: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 3
5620: PPUSH
5621: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5625: LD_EXP 51
5629: PPUSH
5630: LD_INT 3
5632: PPUSH
5633: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5637: LD_STRING M3
5639: PPUSH
5640: CALL_OW 337
// secondAttack = true ;
5644: LD_ADDR_EXP 17
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// exit ;
5652: POP
5653: POP
5654: GO 5684
// end ;
5656: GO 5424
5658: POP
5659: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5660: LD_EXP 51
5664: PPUSH
5665: LD_STRING D7b-Bel-3
5667: PPUSH
5668: CALL_OW 88
// InGameOff ;
5672: CALL_OW 9
// belkovWaitForGorky = true ;
5676: LD_ADDR_EXP 16
5680: PUSH
5681: LD_INT 1
5683: ST_TO_ADDR
// end ;
5684: PPOPN 3
5686: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5687: LD_EXP 16
5691: IFFALSE 6001
5693: GO 5695
5695: DISABLE
5696: LD_INT 0
5698: PPUSH
5699: PPUSH
// begin enable ;
5700: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 22
5708: PUSH
5709: LD_INT 6
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 21
5718: PUSH
5719: LD_INT 1
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 69
5734: ST_TO_ADDR
// for unit in ruSolds do
5735: LD_ADDR_VAR 0 1
5739: PUSH
5740: LD_VAR 0 2
5744: PUSH
5745: FOR_IN
5746: IFFALSE 5999
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5748: LD_EXP 46
5752: PPUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 296
5762: PUSH
5763: LD_INT 7
5765: LESS
5766: IFFALSE 5997
// begin belkovWaitForGorky = false ;
5768: LD_ADDR_EXP 16
5772: PUSH
5773: LD_INT 0
5775: ST_TO_ADDR
// InGameOn ;
5776: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5780: LD_EXP 51
5784: PUSH
5785: LD_EXP 48
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5798: LD_EXP 46
5802: PPUSH
5803: LD_INT 88
5805: PPUSH
5806: LD_INT 66
5808: PPUSH
5809: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5813: LD_EXP 51
5817: PPUSH
5818: LD_EXP 46
5822: PPUSH
5823: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5827: LD_EXP 46
5831: PPUSH
5832: LD_INT 90
5834: PPUSH
5835: LD_INT 66
5837: PPUSH
5838: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5842: LD_EXP 51
5846: PPUSH
5847: LD_STRING D7b-Bel-3a
5849: PPUSH
5850: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5854: LD_EXP 46
5858: PPUSH
5859: LD_STRING D7b-Bur-3
5861: PPUSH
5862: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5866: LD_EXP 51
5870: PPUSH
5871: LD_STRING D7b-Bel-4
5873: PPUSH
5874: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5878: LD_EXP 46
5882: PPUSH
5883: LD_STRING D7b-Bur-4
5885: PPUSH
5886: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5890: LD_EXP 51
5894: PPUSH
5895: LD_STRING D7b-Bel-5
5897: PPUSH
5898: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5902: LD_EXP 49
5906: PPUSH
5907: LD_STRING D7b-FSol1-5
5909: PPUSH
5910: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5914: LD_EXP 51
5918: PPUSH
5919: LD_STRING D7b-Bel-6
5921: PPUSH
5922: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5926: LD_EXP 46
5930: PPUSH
5931: LD_STRING D7b-Bur-6
5933: PPUSH
5934: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5938: LD_EXP 48
5942: PPUSH
5943: LD_STRING D7a-RSol1-6
5945: PPUSH
5946: CALL_OW 88
// InGameOff ;
5950: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5966: LD_EXP 51
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5978: LD_STRING M3
5980: PPUSH
5981: CALL_OW 337
// secondAttack = true ;
5985: LD_ADDR_EXP 17
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// exit ;
5993: POP
5994: POP
5995: GO 6001
// end ;
5997: GO 5745
5999: POP
6000: POP
// end ;
6001: PPOPN 2
6003: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
6004: LD_INT 0
6006: PPUSH
6007: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6008: LD_EXP 43
6012: PPUSH
6013: LD_STRING D8-FSol1-1
6015: PPUSH
6016: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6020: LD_EXP 44
6024: PPUSH
6025: LD_STRING D8-Glad-1
6027: PPUSH
6028: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6032: LD_EXP 46
6036: PPUSH
6037: LD_STRING D8-Bur-1
6039: PPUSH
6040: CALL_OW 88
// secondAttack = false ;
6044: LD_ADDR_EXP 17
6048: PUSH
6049: LD_INT 0
6051: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 3
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 21
6069: PUSH
6070: LD_INT 1
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PPUSH
6081: CALL_OW 69
6085: PPUSH
6086: LD_INT 23
6088: PPUSH
6089: CALL_OW 74
6093: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6094: LD_EXP 45
6098: PPUSH
6099: CALL_OW 122
// wait ( 0 0$1 ) ;
6103: LD_INT 35
6105: PPUSH
6106: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6110: LD_EXP 45
6114: PPUSH
6115: LD_VAR 0 2
6119: PPUSH
6120: CALL_OW 175
// end ;
6124: LD_VAR 0 1
6128: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6129: LD_INT 23
6131: PPUSH
6132: CALL_OW 256
6136: PUSH
6137: LD_INT 350
6139: LESS
6140: PUSH
6141: LD_INT 23
6143: PPUSH
6144: CALL_OW 256
6148: PUSH
6149: LD_INT 250
6151: GREATER
6152: AND
6153: PUSH
6154: LD_INT 20
6156: PPUSH
6157: LD_INT 22
6159: PUSH
6160: LD_INT 3
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 21
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 70
6185: PUSH
6186: LD_INT 0
6188: GREATER
6189: AND
6190: PUSH
6191: LD_EXP 24
6195: NOT
6196: AND
6197: IFFALSE 6214
6199: GO 6201
6201: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6202: LD_EXP 43
6206: PPUSH
6207: LD_STRING D8-FSol1-2
6209: PPUSH
6210: CALL_OW 88
6214: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6215: LD_INT 23
6217: PPUSH
6218: CALL_OW 303
6222: PUSH
6223: LD_INT 22
6225: PPUSH
6226: CALL_OW 302
6230: AND
6231: PUSH
6232: LD_EXP 24
6236: NOT
6237: AND
6238: IFFALSE 6308
6240: GO 6242
6242: DISABLE
// begin amRetreat = true ;
6243: LD_ADDR_EXP 24
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6251: LD_EXP 43
6255: PPUSH
6256: LD_STRING D8-FSol1-2a
6258: PPUSH
6259: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6263: LD_EXP 44
6267: PUSH
6268: LD_EXP 43
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PPUSH
6277: LD_INT 21
6279: PPUSH
6280: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6284: LD_EXP 44
6288: PPUSH
6289: LD_STRING D8-Glad-2
6291: PPUSH
6292: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6296: LD_EXP 46
6300: PPUSH
6301: LD_STRING D8-Bur-2
6303: PPUSH
6304: CALL_OW 88
// end ;
6308: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6309: LD_INT 22
6311: PPUSH
6312: CALL_OW 303
6316: PUSH
6317: LD_INT 23
6319: PPUSH
6320: CALL_OW 302
6324: AND
6325: PUSH
6326: LD_EXP 24
6330: NOT
6331: AND
6332: IFFALSE 6402
6334: GO 6336
6336: DISABLE
// begin amRetreat = true ;
6337: LD_ADDR_EXP 24
6341: PUSH
6342: LD_INT 1
6344: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6345: LD_EXP 43
6349: PPUSH
6350: LD_STRING D8-FSol1-2a
6352: PPUSH
6353: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6357: LD_EXP 44
6361: PUSH
6362: LD_EXP 43
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: LD_INT 21
6373: PPUSH
6374: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6378: LD_EXP 44
6382: PPUSH
6383: LD_STRING D8-Glad-2
6385: PPUSH
6386: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6390: LD_EXP 46
6394: PPUSH
6395: LD_STRING D8-Bur-2
6397: PPUSH
6398: CALL_OW 88
// end ;
6402: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6403: LD_INT 23
6405: PPUSH
6406: CALL_OW 256
6410: PUSH
6411: LD_INT 500
6413: LESS
6414: PUSH
6415: LD_OWVAR 67
6419: PUSH
6420: LD_INT 3
6422: EQUAL
6423: AND
6424: PUSH
6425: LD_EXP 24
6429: NOT
6430: AND
6431: IFFALSE 6501
6433: GO 6435
6435: DISABLE
// begin amRetreat = true ;
6436: LD_ADDR_EXP 24
6440: PUSH
6441: LD_INT 1
6443: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6444: LD_EXP 43
6448: PPUSH
6449: LD_STRING D8-FSol1-2a
6451: PPUSH
6452: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6456: LD_EXP 44
6460: PUSH
6461: LD_EXP 43
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PPUSH
6470: LD_INT 21
6472: PPUSH
6473: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6477: LD_EXP 44
6481: PPUSH
6482: LD_STRING D8-Glad-2
6484: PPUSH
6485: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6489: LD_EXP 46
6493: PPUSH
6494: LD_STRING D8-Bur-2
6496: PPUSH
6497: CALL_OW 88
// end ;
6501: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6502: LD_INT 22
6504: PUSH
6505: LD_INT 1
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: PUSH
6512: LD_INT 21
6514: PUSH
6515: LD_INT 1
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: LD_INT 50
6524: PUSH
6525: EMPTY
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: LIST
6532: PPUSH
6533: CALL_OW 69
6537: PUSH
6538: LD_INT 0
6540: GREATER
6541: IFFALSE 6669
6543: GO 6545
6545: DISABLE
6546: LD_INT 0
6548: PPUSH
// begin enable ;
6549: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_INT 21
6557: PPUSH
6558: LD_INT 22
6560: PUSH
6561: LD_INT 1
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 21
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 70
6586: PUSH
6587: FOR_IN
6588: IFFALSE 6667
// begin if unit = Gladstone then
6590: LD_VAR 0 1
6594: PUSH
6595: LD_EXP 44
6599: EQUAL
6600: IFFALSE 6630
// begin gladstoneEscape = true ;
6602: LD_ADDR_EXP 19
6606: PUSH
6607: LD_INT 1
6609: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6610: LD_EXP 44
6614: PPUSH
6615: LD_EXP 30
6619: PUSH
6620: LD_STRING Gladstone
6622: STR
6623: PPUSH
6624: CALL_OW 38
// end else
6628: GO 6656
// begin JohannaEscape = true ;
6630: LD_ADDR_EXP 20
6634: PUSH
6635: LD_INT 1
6637: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6638: LD_EXP 43
6642: PPUSH
6643: LD_EXP 30
6647: PUSH
6648: LD_STRING Johanna
6650: STR
6651: PPUSH
6652: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6656: LD_VAR 0 1
6660: PPUSH
6661: CALL_OW 64
// end ;
6665: GO 6587
6667: POP
6668: POP
// end ;
6669: PPOPN 1
6671: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6672: LD_EXP 44
6676: PPUSH
6677: CALL_OW 301
6681: PUSH
6682: LD_EXP 43
6686: PPUSH
6687: CALL_OW 301
6691: AND
6692: IFFALSE 6709
6694: GO 6696
6696: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6697: LD_EXP 46
6701: PPUSH
6702: LD_STRING D9-Bur-1
6704: PPUSH
6705: CALL_OW 88
6709: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6710: LD_EXP 43
6714: PPUSH
6715: CALL_OW 301
6719: PUSH
6720: LD_EXP 19
6724: AND
6725: PUSH
6726: LD_EXP 20
6730: NOT
6731: AND
6732: IFFALSE 6749
6734: GO 6736
6736: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6737: LD_EXP 46
6741: PPUSH
6742: LD_STRING D9-Bur-1a
6744: PPUSH
6745: CALL_OW 88
6749: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6750: LD_EXP 44
6754: PPUSH
6755: CALL_OW 301
6759: PUSH
6760: LD_EXP 19
6764: NOT
6765: AND
6766: PUSH
6767: LD_EXP 20
6771: AND
6772: IFFALSE 6789
6774: GO 6776
6776: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6777: LD_EXP 46
6781: PPUSH
6782: LD_STRING D9-Bur-1b
6784: PPUSH
6785: CALL_OW 88
6789: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6790: LD_EXP 19
6794: PUSH
6795: LD_EXP 20
6799: AND
6800: IFFALSE 6817
6802: GO 6804
6804: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6805: LD_EXP 46
6809: PPUSH
6810: LD_STRING D9-Bur-1c
6812: PPUSH
6813: CALL_OW 88
6817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6818: LD_INT 22
6820: PUSH
6821: LD_INT 1
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 21
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 50
6840: PUSH
6841: EMPTY
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 69
6853: PUSH
6854: LD_INT 0
6856: EQUAL
6857: IFFALSE 7105
6859: GO 6861
6861: DISABLE
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6866: LD_ADDR_VAR 0 1
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 21
6883: PUSH
6884: LD_INT 1
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: LD_INT 50
6893: PUSH
6894: EMPTY
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 69
6906: PUSH
6907: LD_EXP 46
6911: PUSH
6912: LD_EXP 54
6916: PUSH
6917: LD_EXP 51
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: DIFF
6927: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_VAR 0 1
6937: PPUSH
6938: LD_INT 26
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PPUSH
6948: CALL_OW 72
6952: ST_TO_ADDR
// DialogueOn ;
6953: CALL_OW 6
// if IsOK ( Belkov ) then
6957: LD_EXP 51
6961: PPUSH
6962: CALL_OW 302
6966: IFFALSE 6980
// Say ( Belkov , D10-Bel-1 ) ;
6968: LD_EXP 51
6972: PPUSH
6973: LD_STRING D10-Bel-1
6975: PPUSH
6976: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6980: LD_VAR 0 1
6984: PUSH
6985: LD_INT 0
6987: GREATER
6988: PUSH
6989: LD_VAR 0 2
6993: PUSH
6994: LD_INT 0
6996: GREATER
6997: PUSH
6998: LD_EXP 51
7002: PPUSH
7003: CALL_OW 302
7007: OR
7008: AND
7009: IFFALSE 7076
// begin Say ( Burlak , D10-Bur-1 ) ;
7011: LD_EXP 46
7015: PPUSH
7016: LD_STRING D10-Bur-1
7018: PPUSH
7019: CALL_OW 88
// if IsOK ( Belkov ) then
7023: LD_EXP 51
7027: PPUSH
7028: CALL_OW 302
7032: IFFALSE 7048
// Say ( Belkov , D10-Bel-1a ) else
7034: LD_EXP 51
7038: PPUSH
7039: LD_STRING D10-Bel-1a
7041: PPUSH
7042: CALL_OW 88
7046: GO 7064
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7048: LD_VAR 0 2
7052: PUSH
7053: LD_INT 1
7055: ARRAY
7056: PPUSH
7057: LD_STRING D10-RSol1-1
7059: PPUSH
7060: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7064: LD_EXP 46
7068: PPUSH
7069: LD_STRING D10-Bur-2
7071: PPUSH
7072: CALL_OW 88
// end ; DialogueOff ;
7076: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7080: LD_STRING M4a
7082: PPUSH
7083: CALL_OW 337
// evacuationAvailable = true ;
7087: LD_ADDR_EXP 22
7091: PUSH
7092: LD_INT 1
7094: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7095: LD_INT 1
7097: PPUSH
7098: LD_INT 1
7100: PPUSH
7101: CALL_OW 424
// end ;
7105: PPOPN 2
7107: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7108: LD_EXP 22
7112: PUSH
7113: LD_EXP 25
7117: NOT
7118: AND
7119: IFFALSE 7729
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7127: LD_EXP 53
7131: PPUSH
7132: LD_INT 22
7134: PPUSH
7135: LD_INT 1
7137: PPUSH
7138: CALL_OW 49
// wait ( 0 0$3 ) ;
7142: LD_INT 105
7144: PPUSH
7145: CALL_OW 67
// jelenaSpawned = true ;
7149: LD_ADDR_EXP 25
7153: PUSH
7154: LD_INT 1
7156: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 50
7179: PUSH
7180: EMPTY
7181: LIST
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 69
7192: PPUSH
7193: LD_EXP 53
7197: PPUSH
7198: CALL_OW 74
7202: PPUSH
7203: LD_EXP 53
7207: PPUSH
7208: CALL_OW 296
7212: PUSH
7213: LD_INT 9
7215: LESS
7216: IFFALSE 7220
// exit ;
7218: GO 7729
// DialogueOn ;
7220: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7224: LD_EXP 53
7228: PPUSH
7229: LD_STRING D11b-Kir-1
7231: PPUSH
7232: CALL_OW 94
// if IsOK ( Belkov ) then
7236: LD_EXP 51
7240: PPUSH
7241: CALL_OW 302
7245: IFFALSE 7273
// begin Say ( Belkov , D11b-Bel-1 ) ;
7247: LD_EXP 51
7251: PPUSH
7252: LD_STRING D11b-Bel-1
7254: PPUSH
7255: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7259: LD_EXP 51
7263: PPUSH
7264: LD_STRING D11b-Bel-1a
7266: PPUSH
7267: CALL_OW 94
// end else
7271: GO 7328
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7273: LD_ADDR_VAR 0 1
7277: PUSH
7278: LD_INT 22
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 21
7290: PUSH
7291: LD_INT 1
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 50
7300: PUSH
7301: EMPTY
7302: LIST
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: PPUSH
7309: CALL_OW 69
7313: PPUSH
7314: LD_STRING D11b-RSol1-1
7316: PPUSH
7317: LD_STRING D11b-RFSol1-1
7319: PPUSH
7320: LD_INT 0
7322: PPUSH
7323: CALL 8106 0 4
7327: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7328: LD_INT 24
7330: PPUSH
7331: LD_INT 22
7333: PUSH
7334: LD_INT 0
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 25
7343: PUSH
7344: LD_INT 12
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 70
7359: PUSH
7360: LD_INT 0
7362: GREATER
7363: IFFALSE 7379
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7365: LD_EXP 53
7369: PPUSH
7370: LD_STRING D11b1-Kir-1
7372: PPUSH
7373: CALL_OW 94
7377: GO 7391
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7379: LD_EXP 53
7383: PPUSH
7384: LD_STRING D11b2-Kir-1
7386: PPUSH
7387: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7391: LD_EXP 6
7395: PUSH
7396: LD_INT 24
7398: PPUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 0
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 25
7411: PUSH
7412: LD_INT 12
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 70
7427: PUSH
7428: LD_INT 0
7430: GREATER
7431: AND
7432: IFFALSE 7567
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7434: LD_EXP 46
7438: PPUSH
7439: LD_STRING D11b1-Bur-1
7441: PPUSH
7442: CALL_OW 88
// if IsOk ( Belkov ) then
7446: LD_EXP 51
7450: PPUSH
7451: CALL_OW 302
7455: IFFALSE 7471
// Say ( Belkov , D11b2-Bel-1 ) else
7457: LD_EXP 51
7461: PPUSH
7462: LD_STRING D11b2-Bel-1
7464: PPUSH
7465: CALL_OW 88
7469: GO 7512
// begin if GetSex ( randomSold ) = sex_male then
7471: LD_VAR 0 1
7475: PPUSH
7476: CALL_OW 258
7480: PUSH
7481: LD_INT 1
7483: EQUAL
7484: IFFALSE 7500
// Say ( randomSold , D11b1-RSol1-1 ) else
7486: LD_VAR 0 1
7490: PPUSH
7491: LD_STRING D11b1-RSol1-1
7493: PPUSH
7494: CALL_OW 88
7498: GO 7512
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7500: LD_VAR 0 1
7504: PPUSH
7505: LD_STRING D11b1-RFSol1-1
7507: PPUSH
7508: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7512: LD_INT 22
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 21
7524: PUSH
7525: LD_INT 1
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 50
7534: PUSH
7535: EMPTY
7536: LIST
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: PPUSH
7548: LD_STRING D11b1-RSol1-1
7550: PPUSH
7551: LD_STRING D11b1-RFSol1-1
7553: PPUSH
7554: LD_INT 0
7556: PPUSH
7557: CALL 8106 0 4
// DialogueOff ;
7561: CALL_OW 7
// exit ;
7565: GO 7729
// end ; if spotWaterfall then
7567: LD_EXP 7
7571: IFFALSE 7657
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7573: LD_EXP 46
7577: PPUSH
7578: LD_STRING D11b1-Bur-1a
7580: PPUSH
7581: CALL_OW 88
// if IsOk ( Belkov ) then
7585: LD_EXP 51
7589: PPUSH
7590: CALL_OW 302
7594: IFFALSE 7610
// Say ( Belkov , D11b2-Bel-1 ) else
7596: LD_EXP 51
7600: PPUSH
7601: LD_STRING D11b2-Bel-1
7603: PPUSH
7604: CALL_OW 88
7608: GO 7651
// begin if GetSex ( randomSold ) = sex_male then
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 258
7619: PUSH
7620: LD_INT 1
7622: EQUAL
7623: IFFALSE 7639
// Say ( randomSold , D11b1-RSol1-1 ) else
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_STRING D11b1-RSol1-1
7632: PPUSH
7633: CALL_OW 88
7637: GO 7651
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7639: LD_VAR 0 1
7643: PPUSH
7644: LD_STRING D11b1-RFSol1-1
7646: PPUSH
7647: CALL_OW 88
// end ; DialogueOff ;
7651: CALL_OW 7
// exit ;
7655: GO 7729
// end ; if IsOk ( Belkov ) then
7657: LD_EXP 51
7661: PPUSH
7662: CALL_OW 302
7666: IFFALSE 7682
// Say ( Belkov , D11b1-Bel-1 ) else
7668: LD_EXP 51
7672: PPUSH
7673: LD_STRING D11b1-Bel-1
7675: PPUSH
7676: CALL_OW 88
7680: GO 7723
// begin if GetSex ( randomSold ) = sex_male then
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 258
7691: PUSH
7692: LD_INT 1
7694: EQUAL
7695: IFFALSE 7711
// Say ( randomSold , D11b1-RSol1-1 ) else
7697: LD_VAR 0 1
7701: PPUSH
7702: LD_STRING D11b1-RSol1-1
7704: PPUSH
7705: CALL_OW 88
7709: GO 7723
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7711: LD_VAR 0 1
7715: PPUSH
7716: LD_STRING D11b1-RFSol1-1
7718: PPUSH
7719: CALL_OW 88
// end ; DialogueOff ;
7723: CALL_OW 7
// exit ;
7727: GO 7729
// end ;
7729: PPOPN 1
7731: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7732: LD_INT 3
7734: PPUSH
7735: LD_EXP 53
7739: PPUSH
7740: CALL_OW 292
7744: PUSH
7745: LD_EXP 25
7749: AND
7750: IFFALSE 7986
7752: GO 7754
7754: DISABLE
7755: LD_INT 0
7757: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7758: LD_EXP 53
7762: PPUSH
7763: LD_INT 3
7765: PPUSH
7766: CALL_OW 235
// jelenaSaved = true ;
7770: LD_ADDR_EXP 21
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7778: LD_EXP 53
7782: PPUSH
7783: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7787: LD_ADDR_VAR 0 1
7791: PUSH
7792: LD_INT 22
7794: PUSH
7795: LD_INT 3
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 21
7804: PUSH
7805: LD_INT 1
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 50
7814: PUSH
7815: EMPTY
7816: LIST
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 69
7827: PUSH
7828: LD_EXP 53
7832: DIFF
7833: PPUSH
7834: LD_EXP 53
7838: PPUSH
7839: CALL_OW 74
7843: ST_TO_ADDR
// DialogueOn ;
7844: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7848: LD_EXP 53
7852: PPUSH
7853: LD_STRING D11a-Kir-1
7855: PPUSH
7856: CALL_OW 88
// if nearUnit = Belkov then
7860: LD_VAR 0 1
7864: PUSH
7865: LD_EXP 51
7869: EQUAL
7870: IFFALSE 7910
// begin Say ( Belkov , D11a-Bel-1 ) ;
7872: LD_EXP 51
7876: PPUSH
7877: LD_STRING D11a-Bel-1
7879: PPUSH
7880: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7884: LD_EXP 53
7888: PPUSH
7889: LD_STRING D11a-Kir-2
7891: PPUSH
7892: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7896: LD_EXP 51
7900: PPUSH
7901: LD_STRING D11a-Bel-2
7903: PPUSH
7904: CALL_OW 88
// end else
7908: GO 7951
// begin if GetSex ( nearUnit ) = sex_male then
7910: LD_VAR 0 1
7914: PPUSH
7915: CALL_OW 258
7919: PUSH
7920: LD_INT 1
7922: EQUAL
7923: IFFALSE 7939
// Say ( nearUnit , D11a-RSol1-2 ) else
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_STRING D11a-RSol1-2
7932: PPUSH
7933: CALL_OW 88
7937: GO 7951
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7939: LD_VAR 0 1
7943: PPUSH
7944: LD_STRING D11a-RFSol1-2
7946: PPUSH
7947: CALL_OW 88
// end ; DialogueOff ;
7951: CALL_OW 7
// wait ( 0 0$5 ) ;
7955: LD_INT 175
7957: PPUSH
7958: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7962: LD_EXP 53
7966: PPUSH
7967: LD_STRING D11c-Kir-1
7969: PPUSH
7970: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7974: LD_EXP 46
7978: PPUSH
7979: LD_STRING D11c-Bur-1
7981: PPUSH
7982: CALL_OW 88
// end ;
7986: PPOPN 1
7988: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7989: LD_EXP 22
7993: PUSH
7994: LD_INT 1
7996: PPUSH
7997: LD_INT 22
7999: PUSH
8000: LD_INT 3
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 21
8009: PUSH
8010: LD_INT 1
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PPUSH
8021: CALL_OW 70
8025: PUSH
8026: LD_INT 0
8028: GREATER
8029: AND
8030: IFFALSE 8042
8032: GO 8034
8034: DISABLE
// begin Query ( QExit1 ) ;
8035: LD_STRING QExit1
8037: PPUSH
8038: CALL_OW 97
// end ; end_of_file
8042: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
8043: LD_INT 0
8045: PPUSH
8046: PPUSH
// if exist_mode then
8047: LD_VAR 0 2
8051: IFFALSE 8076
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8053: LD_ADDR_VAR 0 4
8057: PUSH
8058: LD_EXP 31
8062: PUSH
8063: LD_VAR 0 1
8067: STR
8068: PPUSH
8069: CALL_OW 34
8073: ST_TO_ADDR
8074: GO 8091
// unit := NewCharacter ( ident ) ;
8076: LD_ADDR_VAR 0 4
8080: PUSH
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 25
8090: ST_TO_ADDR
// result := unit ;
8091: LD_ADDR_VAR 0 3
8095: PUSH
8096: LD_VAR 0 4
8100: ST_TO_ADDR
// end ;
8101: LD_VAR 0 3
8105: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8106: LD_INT 0
8108: PPUSH
8109: PPUSH
8110: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8111: LD_ADDR_VAR 0 1
8115: PUSH
8116: LD_VAR 0 1
8120: PUSH
8121: LD_EXP 46
8125: PUSH
8126: LD_EXP 54
8130: PUSH
8131: LD_EXP 51
8135: PUSH
8136: LD_EXP 53
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: DIFF
8147: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8148: LD_ADDR_VAR 0 7
8152: PUSH
8153: LD_VAR 0 1
8157: PUSH
8158: LD_INT 1
8160: PPUSH
8161: LD_VAR 0 1
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// if radio then
8172: LD_VAR 0 4
8176: IFFALSE 8225
// begin if GetSex ( speaker ) = sex_male then
8178: LD_VAR 0 7
8182: PPUSH
8183: CALL_OW 258
8187: PUSH
8188: LD_INT 1
8190: EQUAL
8191: IFFALSE 8209
// SayRadio ( speaker , dialogMID ) else
8193: LD_VAR 0 7
8197: PPUSH
8198: LD_VAR 0 2
8202: PPUSH
8203: CALL_OW 94
8207: GO 8223
// SayRadio ( speaker , dialogFID ) ;
8209: LD_VAR 0 7
8213: PPUSH
8214: LD_VAR 0 3
8218: PPUSH
8219: CALL_OW 94
// end else
8223: GO 8270
// begin if GetSex ( speaker ) = sex_male then
8225: LD_VAR 0 7
8229: PPUSH
8230: CALL_OW 258
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8256
// Say ( speaker , dialogMID ) else
8240: LD_VAR 0 7
8244: PPUSH
8245: LD_VAR 0 2
8249: PPUSH
8250: CALL_OW 88
8254: GO 8270
// Say ( speaker , dialogFID ) ;
8256: LD_VAR 0 7
8260: PPUSH
8261: LD_VAR 0 3
8265: PPUSH
8266: CALL_OW 88
// end ; result := speaker ;
8270: LD_ADDR_VAR 0 5
8274: PUSH
8275: LD_VAR 0 7
8279: ST_TO_ADDR
// end ;
8280: LD_VAR 0 5
8284: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8285: LD_INT 0
8287: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 255
8297: PUSH
8298: LD_OWVAR 2
8302: EQUAL
8303: PUSH
8304: LD_VAR 0 1
8308: PPUSH
8309: CALL_OW 302
8313: AND
8314: IFFALSE 8336
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8316: LD_VAR 0 1
8320: PPUSH
8321: LD_EXP 30
8325: PUSH
8326: LD_VAR 0 2
8330: STR
8331: PPUSH
8332: CALL_OW 38
// end ;
8336: LD_VAR 0 3
8340: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8341: LD_INT 0
8343: PPUSH
8344: PPUSH
8345: PPUSH
// resultCharactersToSave = [ ] ;
8346: LD_ADDR_VAR 0 5
8350: PUSH
8351: EMPTY
8352: ST_TO_ADDR
// for unit in characters do
8353: LD_ADDR_VAR 0 4
8357: PUSH
8358: LD_VAR 0 1
8362: PUSH
8363: FOR_IN
8364: IFFALSE 8412
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8366: LD_VAR 0 4
8370: PPUSH
8371: CALL_OW 255
8375: PUSH
8376: LD_OWVAR 2
8380: EQUAL
8381: PUSH
8382: LD_VAR 0 4
8386: PPUSH
8387: CALL_OW 302
8391: AND
8392: IFFALSE 8410
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8394: LD_ADDR_VAR 0 5
8398: PUSH
8399: LD_VAR 0 5
8403: PUSH
8404: LD_VAR 0 4
8408: ADD
8409: ST_TO_ADDR
8410: GO 8363
8412: POP
8413: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8414: LD_VAR 0 5
8418: PPUSH
8419: LD_EXP 30
8423: PUSH
8424: LD_VAR 0 2
8428: STR
8429: PPUSH
8430: CALL_OW 38
// end ;
8434: LD_VAR 0 3
8438: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8453: LD_VAR 0 1
8457: PPUSH
8458: CALL_OW 302
8462: NOT
8463: PUSH
8464: LD_VAR 0 4
8468: PUSH
8469: LD_INT 1
8471: EQUAL
8472: OR
8473: PUSH
8474: LD_VAR 0 2
8478: PPUSH
8479: LD_VAR 0 3
8483: PPUSH
8484: CALL_OW 488
8488: NOT
8489: OR
8490: PUSH
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_VAR 0 2
8500: PPUSH
8501: LD_VAR 0 3
8505: PPUSH
8506: CALL_OW 297
8510: PUSH
8511: LD_VAR 0 4
8515: GREATEREQUAL
8516: OR
8517: PUSH
8518: LD_VAR 0 5
8522: PUSH
8523: LD_INT 1
8525: PUSH
8526: LD_INT 0
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: IN
8533: NOT
8534: OR
8535: IFFALSE 8539
// exit ;
8537: GO 10096
// attempts = 0 ;
8539: LD_ADDR_VAR 0 17
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8547: LD_ADDR_VAR 0 7
8551: PUSH
8552: EMPTY
8553: ST_TO_ADDR
// list_coords = [ ] ;
8554: LD_ADDR_VAR 0 8
8558: PUSH
8559: EMPTY
8560: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8561: LD_ADDR_VAR 0 9
8565: PUSH
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_VAR 0 3
8575: PPUSH
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 250
8585: PPUSH
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 251
8595: PPUSH
8596: CALL 10101 0 4
8600: ST_TO_ADDR
// if attempts = 0 then
8601: LD_VAR 0 17
8605: PUSH
8606: LD_INT 0
8608: EQUAL
8609: IFFALSE 8717
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8611: LD_ADDR_VAR 0 10
8615: PUSH
8616: LD_VAR 0 9
8620: PUSH
8621: LD_VAR 0 9
8625: PUSH
8626: LD_INT 1
8628: PLUS
8629: PUSH
8630: LD_VAR 0 9
8634: PUSH
8635: LD_INT 1
8637: MINUS
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8644: LD_VAR 0 10
8648: PUSH
8649: LD_INT 2
8651: ARRAY
8652: PUSH
8653: LD_INT 6
8655: EQUAL
8656: IFFALSE 8679
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8658: LD_ADDR_VAR 0 10
8662: PUSH
8663: LD_VAR 0 10
8667: PPUSH
8668: LD_INT 2
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 1
8678: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8679: LD_VAR 0 10
8683: PUSH
8684: LD_INT 3
8686: ARRAY
8687: PUSH
8688: LD_INT 1
8690: NEG
8691: EQUAL
8692: IFFALSE 8715
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8694: LD_ADDR_VAR 0 10
8698: PUSH
8699: LD_VAR 0 10
8703: PPUSH
8704: LD_INT 3
8706: PPUSH
8707: LD_INT 5
8709: PPUSH
8710: CALL_OW 1
8714: ST_TO_ADDR
// end else
8715: GO 8754
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8717: LD_ADDR_VAR 0 10
8721: PUSH
8722: LD_INT 0
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: LD_INT 2
8730: PUSH
8731: LD_INT 3
8733: PUSH
8734: LD_INT 4
8736: PUSH
8737: LD_INT 5
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PUSH
8748: LD_VAR 0 9
8752: DIFF
8753: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8754: LD_ADDR_VAR 0 14
8758: PUSH
8759: DOUBLE
8760: LD_INT 1
8762: DEC
8763: ST_TO_ADDR
8764: LD_VAR 0 10
8768: PUSH
8769: LD_INT 0
8771: PLUS
8772: PUSH
8773: FOR_TO
8774: IFFALSE 9096
// case dir_list [ c ] of 0 :
8776: LD_VAR 0 10
8780: PUSH
8781: LD_VAR 0 14
8785: ARRAY
8786: PUSH
8787: LD_INT 0
8789: DOUBLE
8790: EQUAL
8791: IFTRUE 8795
8793: GO 8836
8795: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8796: LD_ADDR_VAR 0 8
8800: PUSH
8801: LD_VAR 0 8
8805: PPUSH
8806: LD_INT 1
8808: PPUSH
8809: LD_VAR 0 2
8813: PUSH
8814: LD_VAR 0 3
8818: PUSH
8819: LD_VAR 0 4
8823: MINUS
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 2
8833: ST_TO_ADDR
8834: GO 9094
8836: LD_INT 1
8838: DOUBLE
8839: EQUAL
8840: IFTRUE 8844
8842: GO 8885
8844: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8845: LD_ADDR_VAR 0 8
8849: PUSH
8850: LD_VAR 0 8
8854: PPUSH
8855: LD_INT 1
8857: PPUSH
8858: LD_VAR 0 2
8862: PUSH
8863: LD_VAR 0 4
8867: PLUS
8868: PUSH
8869: LD_VAR 0 3
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PPUSH
8878: CALL_OW 2
8882: ST_TO_ADDR
8883: GO 9094
8885: LD_INT 2
8887: DOUBLE
8888: EQUAL
8889: IFTRUE 8893
8891: GO 8940
8893: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8894: LD_ADDR_VAR 0 8
8898: PUSH
8899: LD_VAR 0 8
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: LD_VAR 0 2
8911: PUSH
8912: LD_VAR 0 4
8916: PLUS
8917: PUSH
8918: LD_VAR 0 3
8922: PUSH
8923: LD_VAR 0 4
8927: PLUS
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PPUSH
8933: CALL_OW 2
8937: ST_TO_ADDR
8938: GO 9094
8940: LD_INT 3
8942: DOUBLE
8943: EQUAL
8944: IFTRUE 8948
8946: GO 8989
8948: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8949: LD_ADDR_VAR 0 8
8953: PUSH
8954: LD_VAR 0 8
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 2
8966: PUSH
8967: LD_VAR 0 3
8971: PUSH
8972: LD_VAR 0 4
8976: PLUS
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PPUSH
8982: CALL_OW 2
8986: ST_TO_ADDR
8987: GO 9094
8989: LD_INT 4
8991: DOUBLE
8992: EQUAL
8993: IFTRUE 8997
8995: GO 9038
8997: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8998: LD_ADDR_VAR 0 8
9002: PUSH
9003: LD_VAR 0 8
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: LD_VAR 0 2
9015: PUSH
9016: LD_VAR 0 4
9020: MINUS
9021: PUSH
9022: LD_VAR 0 3
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PPUSH
9031: CALL_OW 2
9035: ST_TO_ADDR
9036: GO 9094
9038: LD_INT 5
9040: DOUBLE
9041: EQUAL
9042: IFTRUE 9046
9044: GO 9093
9046: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9047: LD_ADDR_VAR 0 8
9051: PUSH
9052: LD_VAR 0 8
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: LD_VAR 0 2
9064: PUSH
9065: LD_VAR 0 4
9069: MINUS
9070: PUSH
9071: LD_VAR 0 3
9075: PUSH
9076: LD_VAR 0 4
9080: MINUS
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PPUSH
9086: CALL_OW 2
9090: ST_TO_ADDR
9091: GO 9094
9093: POP
9094: GO 8773
9096: POP
9097: POP
// if dist < 30 then
9098: LD_VAR 0 4
9102: PUSH
9103: LD_INT 30
9105: LESS
9106: IFFALSE 9118
// c = 1 else
9108: LD_ADDR_VAR 0 14
9112: PUSH
9113: LD_INT 1
9115: ST_TO_ADDR
9116: GO 9126
// c = 2 ;
9118: LD_ADDR_VAR 0 14
9122: PUSH
9123: LD_INT 2
9125: ST_TO_ADDR
// b = 1 ;
9126: LD_ADDR_VAR 0 11
9130: PUSH
9131: LD_INT 1
9133: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9134: LD_VAR 0 11
9138: PUSH
9139: LD_VAR 0 4
9143: PUSH
9144: LD_INT 1
9146: MINUS
9147: LESSEQUAL
9148: IFFALSE 9576
// begin if 0 in dir_list and 1 in dir_list then
9150: LD_INT 0
9152: PUSH
9153: LD_VAR 0 10
9157: IN
9158: PUSH
9159: LD_INT 1
9161: PUSH
9162: LD_VAR 0 10
9166: IN
9167: AND
9168: IFFALSE 9220
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9170: LD_ADDR_VAR 0 8
9174: PUSH
9175: LD_VAR 0 8
9179: PPUSH
9180: LD_INT 1
9182: PPUSH
9183: LD_VAR 0 2
9187: PUSH
9188: LD_VAR 0 11
9192: PLUS
9193: PUSH
9194: LD_VAR 0 3
9198: PUSH
9199: LD_VAR 0 4
9203: MINUS
9204: PUSH
9205: LD_VAR 0 11
9209: PLUS
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 2
9219: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9220: LD_INT 1
9222: PUSH
9223: LD_VAR 0 10
9227: IN
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_VAR 0 10
9236: IN
9237: AND
9238: IFFALSE 9284
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9240: LD_ADDR_VAR 0 8
9244: PUSH
9245: LD_VAR 0 8
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_VAR 0 2
9257: PUSH
9258: LD_VAR 0 4
9262: PLUS
9263: PUSH
9264: LD_VAR 0 3
9268: PUSH
9269: LD_VAR 0 11
9273: PLUS
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PPUSH
9279: CALL_OW 2
9283: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9284: LD_INT 2
9286: PUSH
9287: LD_VAR 0 10
9291: IN
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: LD_VAR 0 10
9300: IN
9301: AND
9302: IFFALSE 9354
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9304: LD_ADDR_VAR 0 8
9308: PUSH
9309: LD_VAR 0 8
9313: PPUSH
9314: LD_INT 1
9316: PPUSH
9317: LD_VAR 0 2
9321: PUSH
9322: LD_VAR 0 4
9326: PLUS
9327: PUSH
9328: LD_VAR 0 11
9332: MINUS
9333: PUSH
9334: LD_VAR 0 3
9338: PUSH
9339: LD_VAR 0 4
9343: PLUS
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PPUSH
9349: CALL_OW 2
9353: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9354: LD_INT 3
9356: PUSH
9357: LD_VAR 0 10
9361: IN
9362: PUSH
9363: LD_INT 4
9365: PUSH
9366: LD_VAR 0 10
9370: IN
9371: AND
9372: IFFALSE 9424
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9374: LD_ADDR_VAR 0 8
9378: PUSH
9379: LD_VAR 0 8
9383: PPUSH
9384: LD_INT 1
9386: PPUSH
9387: LD_VAR 0 2
9391: PUSH
9392: LD_VAR 0 11
9396: MINUS
9397: PUSH
9398: LD_VAR 0 3
9402: PUSH
9403: LD_VAR 0 4
9407: PLUS
9408: PUSH
9409: LD_VAR 0 11
9413: MINUS
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PPUSH
9419: CALL_OW 2
9423: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9424: LD_INT 4
9426: PUSH
9427: LD_VAR 0 10
9431: IN
9432: PUSH
9433: LD_INT 5
9435: PUSH
9436: LD_VAR 0 10
9440: IN
9441: AND
9442: IFFALSE 9488
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9444: LD_ADDR_VAR 0 8
9448: PUSH
9449: LD_VAR 0 8
9453: PPUSH
9454: LD_INT 1
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_VAR 0 4
9466: MINUS
9467: PUSH
9468: LD_VAR 0 3
9472: PUSH
9473: LD_VAR 0 11
9477: MINUS
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PPUSH
9483: CALL_OW 2
9487: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9488: LD_INT 5
9490: PUSH
9491: LD_VAR 0 10
9495: IN
9496: PUSH
9497: LD_INT 0
9499: PUSH
9500: LD_VAR 0 10
9504: IN
9505: AND
9506: IFFALSE 9558
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9508: LD_ADDR_VAR 0 8
9512: PUSH
9513: LD_VAR 0 8
9517: PPUSH
9518: LD_INT 1
9520: PPUSH
9521: LD_VAR 0 2
9525: PUSH
9526: LD_VAR 0 4
9530: MINUS
9531: PUSH
9532: LD_VAR 0 11
9536: PLUS
9537: PUSH
9538: LD_VAR 0 3
9542: PUSH
9543: LD_VAR 0 4
9547: MINUS
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PPUSH
9553: CALL_OW 2
9557: ST_TO_ADDR
// b = b + c end ;
9558: LD_ADDR_VAR 0 11
9562: PUSH
9563: LD_VAR 0 11
9567: PUSH
9568: LD_VAR 0 14
9572: PLUS
9573: ST_TO_ADDR
9574: GO 9134
// if list_coords = 0 then
9576: LD_VAR 0 8
9580: PUSH
9581: LD_INT 0
9583: EQUAL
9584: IFFALSE 9588
// exit ;
9586: GO 10096
// repeat min_dist = 5000 ;
9588: LD_ADDR_VAR 0 12
9592: PUSH
9593: LD_INT 5000
9595: ST_TO_ADDR
// for b in list_coords do
9596: LD_ADDR_VAR 0 11
9600: PUSH
9601: LD_VAR 0 8
9605: PUSH
9606: FOR_IN
9607: IFFALSE 9666
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9609: LD_ADDR_VAR 0 13
9613: PUSH
9614: LD_VAR 0 1
9618: PPUSH
9619: LD_VAR 0 11
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 11
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 297
9641: ST_TO_ADDR
// if temp_dist < min_dist then
9642: LD_VAR 0 13
9646: PUSH
9647: LD_VAR 0 12
9651: LESS
9652: IFFALSE 9664
// min_dist = temp_dist ;
9654: LD_ADDR_VAR 0 12
9658: PUSH
9659: LD_VAR 0 13
9663: ST_TO_ADDR
// end ;
9664: GO 9606
9666: POP
9667: POP
// c = 0 ;
9668: LD_ADDR_VAR 0 14
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// repeat c = c + 1 ;
9676: LD_ADDR_VAR 0 14
9680: PUSH
9681: LD_VAR 0 14
9685: PUSH
9686: LD_INT 1
9688: PLUS
9689: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9690: LD_VAR 0 1
9694: PPUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_VAR 0 14
9704: ARRAY
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: PPUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_VAR 0 14
9719: ARRAY
9720: PUSH
9721: LD_INT 2
9723: ARRAY
9724: PPUSH
9725: CALL_OW 297
9729: PUSH
9730: LD_VAR 0 12
9734: EQUAL
9735: IFFALSE 9800
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9737: LD_ADDR_VAR 0 7
9741: PUSH
9742: LD_VAR 0 7
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: LD_VAR 0 8
9754: PUSH
9755: LD_VAR 0 14
9759: ARRAY
9760: PPUSH
9761: CALL_OW 2
9765: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9766: LD_ADDR_VAR 0 8
9770: PUSH
9771: LD_VAR 0 8
9775: PPUSH
9776: LD_VAR 0 14
9780: PPUSH
9781: CALL_OW 3
9785: ST_TO_ADDR
// c = c - 1 ;
9786: LD_ADDR_VAR 0 14
9790: PUSH
9791: LD_VAR 0 14
9795: PUSH
9796: LD_INT 1
9798: MINUS
9799: ST_TO_ADDR
// end ; until c = list_coords ;
9800: LD_VAR 0 14
9804: PUSH
9805: LD_VAR 0 8
9809: EQUAL
9810: IFFALSE 9676
// c = 0 ;
9812: LD_ADDR_VAR 0 14
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// if list_nearest > 0 then
9820: LD_VAR 0 7
9824: PUSH
9825: LD_INT 0
9827: GREATER
9828: IFFALSE 9970
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9830: LD_ADDR_VAR 0 15
9834: PUSH
9835: LD_INT 1
9837: PPUSH
9838: LD_VAR 0 7
9842: PPUSH
9843: CALL_OW 12
9847: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9848: LD_ADDR_VAR 0 16
9852: PUSH
9853: LD_VAR 0 7
9857: PUSH
9858: LD_VAR 0 15
9862: ARRAY
9863: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9864: LD_VAR 0 16
9868: PUSH
9869: LD_INT 1
9871: ARRAY
9872: PPUSH
9873: LD_VAR 0 16
9877: PUSH
9878: LD_INT 2
9880: ARRAY
9881: PPUSH
9882: CALL_OW 488
9886: PUSH
9887: LD_INT 0
9889: GREATER
9890: PUSH
9891: LD_VAR 0 16
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: LD_VAR 0 16
9904: PUSH
9905: LD_INT 2
9907: ARRAY
9908: PPUSH
9909: CALL_OW 428
9913: PUSH
9914: LD_INT 0
9916: EQUAL
9917: AND
9918: IFFALSE 9930
// c = 1 else
9920: LD_ADDR_VAR 0 14
9924: PUSH
9925: LD_INT 1
9927: ST_TO_ADDR
9928: GO 9950
// list_nearest = Delete ( list_nearest , rand_num ) ;
9930: LD_ADDR_VAR 0 7
9934: PUSH
9935: LD_VAR 0 7
9939: PPUSH
9940: LD_VAR 0 15
9944: PPUSH
9945: CALL_OW 3
9949: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9950: LD_VAR 0 14
9954: PUSH
9955: LD_INT 1
9957: EQUAL
9958: PUSH
9959: LD_VAR 0 7
9963: PUSH
9964: LD_INT 0
9966: EQUAL
9967: OR
9968: IFFALSE 9830
// end ; until c = 1 or list_coords = 0 ;
9970: LD_VAR 0 14
9974: PUSH
9975: LD_INT 1
9977: EQUAL
9978: PUSH
9979: LD_VAR 0 8
9983: PUSH
9984: LD_INT 0
9986: EQUAL
9987: OR
9988: IFFALSE 9588
// attempts = attempts + 1 ;
9990: LD_ADDR_VAR 0 17
9994: PUSH
9995: LD_VAR 0 17
9999: PUSH
10000: LD_INT 1
10002: PLUS
10003: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10004: LD_VAR 0 14
10008: PUSH
10009: LD_INT 1
10011: EQUAL
10012: PUSH
10013: LD_VAR 0 17
10017: PUSH
10018: LD_INT 1
10020: GREATER
10021: OR
10022: IFFALSE 8547
// if c = 1 then
10024: LD_VAR 0 14
10028: PUSH
10029: LD_INT 1
10031: EQUAL
10032: IFFALSE 10096
// if add then
10034: LD_VAR 0 5
10038: IFFALSE 10069
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10040: LD_VAR 0 1
10044: PPUSH
10045: LD_VAR 0 16
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: LD_VAR 0 16
10058: PUSH
10059: LD_INT 2
10061: ARRAY
10062: PPUSH
10063: CALL_OW 171
10067: GO 10096
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10069: LD_VAR 0 1
10073: PPUSH
10074: LD_VAR 0 16
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: LD_VAR 0 16
10087: PUSH
10088: LD_INT 2
10090: ARRAY
10091: PPUSH
10092: CALL_OW 111
// end ;
10096: LD_VAR 0 6
10100: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10101: LD_INT 0
10103: PPUSH
10104: PPUSH
10105: PPUSH
10106: PPUSH
10107: PPUSH
10108: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_VAR 0 2
10118: PPUSH
10119: CALL_OW 488
10123: NOT
10124: PUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: LD_VAR 0 4
10134: PPUSH
10135: CALL_OW 488
10139: NOT
10140: OR
10141: IFFALSE 10154
// begin result = - 1 ;
10143: LD_ADDR_VAR 0 5
10147: PUSH
10148: LD_INT 1
10150: NEG
10151: ST_TO_ADDR
// exit ;
10152: GO 10314
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10154: LD_ADDR_VAR 0 6
10158: PUSH
10159: LD_VAR 0 1
10163: PPUSH
10164: LD_VAR 0 2
10168: PPUSH
10169: LD_VAR 0 3
10173: PPUSH
10174: LD_VAR 0 4
10178: PPUSH
10179: CALL_OW 298
10183: ST_TO_ADDR
// dist_2 = 99999 ;
10184: LD_ADDR_VAR 0 7
10188: PUSH
10189: LD_INT 99999
10191: ST_TO_ADDR
// for b = 0 to 5 do
10192: LD_ADDR_VAR 0 8
10196: PUSH
10197: DOUBLE
10198: LD_INT 0
10200: DEC
10201: ST_TO_ADDR
10202: LD_INT 5
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10302
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10208: LD_ADDR_VAR 0 9
10212: PUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: LD_VAR 0 8
10222: PPUSH
10223: LD_VAR 0 6
10227: PPUSH
10228: CALL_OW 272
10232: PPUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: LD_VAR 0 8
10242: PPUSH
10243: LD_VAR 0 6
10247: PPUSH
10248: CALL_OW 273
10252: PPUSH
10253: LD_VAR 0 3
10257: PPUSH
10258: LD_VAR 0 4
10262: PPUSH
10263: CALL_OW 298
10267: ST_TO_ADDR
// if temp_dist < dist_2 then
10268: LD_VAR 0 9
10272: PUSH
10273: LD_VAR 0 7
10277: LESS
10278: IFFALSE 10300
// begin dist_2 = temp_dist ;
10280: LD_ADDR_VAR 0 7
10284: PUSH
10285: LD_VAR 0 9
10289: ST_TO_ADDR
// dir = b ;
10290: LD_ADDR_VAR 0 10
10294: PUSH
10295: LD_VAR 0 8
10299: ST_TO_ADDR
// end ; end ;
10300: GO 10205
10302: POP
10303: POP
// result = dir ;
10304: LD_ADDR_VAR 0 5
10308: PUSH
10309: LD_VAR 0 10
10313: ST_TO_ADDR
// end ;
10314: LD_VAR 0 5
10318: RET
// export function MoveToHill ; begin
10319: LD_INT 0
10321: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10322: LD_EXP 47
10326: PPUSH
10327: LD_INT 65
10329: PPUSH
10330: LD_INT 59
10332: PPUSH
10333: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10337: LD_EXP 47
10341: PPUSH
10342: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10346: LD_EXP 48
10350: PPUSH
10351: LD_INT 65
10353: PPUSH
10354: LD_INT 58
10356: PPUSH
10357: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10361: LD_EXP 48
10365: PPUSH
10366: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10370: LD_EXP 49
10374: PPUSH
10375: LD_INT 64
10377: PPUSH
10378: LD_INT 57
10380: PPUSH
10381: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10385: LD_EXP 49
10389: PPUSH
10390: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10394: LD_EXP 50
10398: PPUSH
10399: LD_INT 64
10401: PPUSH
10402: LD_INT 56
10404: PPUSH
10405: CALL_OW 111
// AddComCrawl ( Balei ) ;
10409: LD_EXP 50
10413: PPUSH
10414: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10418: LD_EXP 51
10422: PPUSH
10423: LD_INT 63
10425: PPUSH
10426: LD_INT 55
10428: PPUSH
10429: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10433: LD_EXP 51
10437: PPUSH
10438: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10442: LD_EXP 52
10446: PPUSH
10447: LD_INT 66
10449: PPUSH
10450: LD_INT 58
10452: PPUSH
10453: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10457: LD_EXP 52
10461: PPUSH
10462: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10466: LD_EXP 54
10470: PPUSH
10471: CALL_OW 255
10475: PUSH
10476: LD_INT 6
10478: EQUAL
10479: PUSH
10480: LD_EXP 12
10484: AND
10485: IFFALSE 10511
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10487: LD_EXP 54
10491: PPUSH
10492: LD_INT 63
10494: PPUSH
10495: LD_INT 54
10497: PPUSH
10498: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10502: LD_EXP 54
10506: PPUSH
10507: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10511: LD_EXP 47
10515: PPUSH
10516: LD_INT 65
10518: PPUSH
10519: LD_INT 59
10521: PPUSH
10522: CALL_OW 297
10526: PUSH
10527: LD_INT 7
10529: LESS
10530: IFFALSE 10556
// begin ComCrawl ( Pokryshkin ) ;
10532: LD_EXP 47
10536: PPUSH
10537: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10541: LD_EXP 47
10545: PPUSH
10546: LD_INT 65
10548: PPUSH
10549: LD_INT 59
10551: PPUSH
10552: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10556: LD_EXP 48
10560: PPUSH
10561: LD_INT 65
10563: PPUSH
10564: LD_INT 58
10566: PPUSH
10567: CALL_OW 297
10571: PUSH
10572: LD_INT 7
10574: LESS
10575: IFFALSE 10601
// begin ComCrawl ( Saseda ) ;
10577: LD_EXP 48
10581: PPUSH
10582: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10586: LD_EXP 48
10590: PPUSH
10591: LD_INT 65
10593: PPUSH
10594: LD_INT 58
10596: PPUSH
10597: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
10601: LD_EXP 49
10605: PPUSH
10606: LD_INT 64
10608: PPUSH
10609: LD_INT 57
10611: PPUSH
10612: CALL_OW 297
10616: PUSH
10617: LD_INT 7
10619: LESS
10620: IFFALSE 10646
// begin ComCrawl ( Jaworska ) ;
10622: LD_EXP 49
10626: PPUSH
10627: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10631: LD_EXP 49
10635: PPUSH
10636: LD_INT 64
10638: PPUSH
10639: LD_INT 57
10641: PPUSH
10642: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
10646: LD_EXP 50
10650: PPUSH
10651: LD_INT 64
10653: PPUSH
10654: LD_INT 56
10656: PPUSH
10657: CALL_OW 297
10661: PUSH
10662: LD_INT 7
10664: LESS
10665: IFFALSE 10691
// begin ComCrawl ( Balei ) ;
10667: LD_EXP 50
10671: PPUSH
10672: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10676: LD_EXP 50
10680: PPUSH
10681: LD_INT 64
10683: PPUSH
10684: LD_INT 56
10686: PPUSH
10687: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
10691: LD_EXP 51
10695: PPUSH
10696: LD_INT 63
10698: PPUSH
10699: LD_INT 55
10701: PPUSH
10702: CALL_OW 297
10706: PUSH
10707: LD_INT 7
10709: LESS
10710: IFFALSE 10736
// begin ComCrawl ( Belkov ) ;
10712: LD_EXP 51
10716: PPUSH
10717: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10721: LD_EXP 51
10725: PPUSH
10726: LD_INT 63
10728: PPUSH
10729: LD_INT 55
10731: PPUSH
10732: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
10736: LD_EXP 52
10740: PPUSH
10741: LD_INT 66
10743: PPUSH
10744: LD_INT 58
10746: PPUSH
10747: CALL_OW 297
10751: PUSH
10752: LD_INT 7
10754: LESS
10755: IFFALSE 10781
// begin ComCrawl ( Jaunzeme ) ;
10757: LD_EXP 52
10761: PPUSH
10762: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10766: LD_EXP 52
10770: PPUSH
10771: LD_INT 66
10773: PPUSH
10774: LD_INT 58
10776: PPUSH
10777: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10781: LD_EXP 54
10785: PPUSH
10786: LD_INT 63
10788: PPUSH
10789: LD_INT 54
10791: PPUSH
10792: CALL_OW 297
10796: PUSH
10797: LD_INT 7
10799: LESS
10800: PUSH
10801: LD_EXP 54
10805: PPUSH
10806: CALL_OW 255
10810: PUSH
10811: LD_INT 6
10813: EQUAL
10814: AND
10815: PUSH
10816: LD_EXP 12
10820: AND
10821: IFFALSE 10847
// begin ComCrawl ( Gnyevko ) ;
10823: LD_EXP 54
10827: PPUSH
10828: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10832: LD_EXP 54
10836: PPUSH
10837: LD_INT 63
10839: PPUSH
10840: LD_INT 54
10842: PPUSH
10843: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10847: LD_INT 35
10849: PPUSH
10850: CALL_OW 67
// until IsDying ( Charles ) or IsDead ( Charles ) ;
10854: LD_EXP 42
10858: PPUSH
10859: CALL_OW 303
10863: PUSH
10864: LD_EXP 42
10868: PPUSH
10869: CALL_OW 301
10873: OR
10874: IFFALSE 10511
// end ;
10876: LD_VAR 0 1
10880: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
10881: LD_EXP 42
10885: PPUSH
10886: CALL_OW 303
10890: NOT
10891: PUSH
10892: LD_EXP 42
10896: PPUSH
10897: CALL_OW 301
10901: NOT
10902: OR
10903: PUSH
10904: LD_EXP 15
10908: AND
10909: IFFALSE 11251
10911: GO 10913
10913: DISABLE
// begin enable ;
10914: ENABLE
// if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10915: LD_EXP 47
10919: PPUSH
10920: LD_INT 65
10922: PPUSH
10923: LD_INT 59
10925: PPUSH
10926: CALL_OW 297
10930: PUSH
10931: LD_INT 7
10933: LESS
10934: IFFALSE 10960
// begin ComCrawl ( Pokryshkin ) ;
10936: LD_EXP 47
10940: PPUSH
10941: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10945: LD_EXP 47
10949: PPUSH
10950: LD_INT 65
10952: PPUSH
10953: LD_INT 59
10955: PPUSH
10956: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10960: LD_EXP 48
10964: PPUSH
10965: LD_INT 65
10967: PPUSH
10968: LD_INT 58
10970: PPUSH
10971: CALL_OW 297
10975: PUSH
10976: LD_INT 7
10978: LESS
10979: IFFALSE 11005
// begin ComCrawl ( Saseda ) ;
10981: LD_EXP 48
10985: PPUSH
10986: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10990: LD_EXP 48
10994: PPUSH
10995: LD_INT 65
10997: PPUSH
10998: LD_INT 58
11000: PPUSH
11001: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11005: LD_EXP 49
11009: PPUSH
11010: LD_INT 64
11012: PPUSH
11013: LD_INT 57
11015: PPUSH
11016: CALL_OW 297
11020: PUSH
11021: LD_INT 7
11023: LESS
11024: IFFALSE 11050
// begin ComCrawl ( Jaworska ) ;
11026: LD_EXP 49
11030: PPUSH
11031: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11035: LD_EXP 49
11039: PPUSH
11040: LD_INT 64
11042: PPUSH
11043: LD_INT 57
11045: PPUSH
11046: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11050: LD_EXP 50
11054: PPUSH
11055: LD_INT 64
11057: PPUSH
11058: LD_INT 56
11060: PPUSH
11061: CALL_OW 297
11065: PUSH
11066: LD_INT 7
11068: LESS
11069: IFFALSE 11095
// begin ComCrawl ( Balei ) ;
11071: LD_EXP 50
11075: PPUSH
11076: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11080: LD_EXP 50
11084: PPUSH
11085: LD_INT 64
11087: PPUSH
11088: LD_INT 56
11090: PPUSH
11091: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11095: LD_EXP 51
11099: PPUSH
11100: LD_INT 63
11102: PPUSH
11103: LD_INT 55
11105: PPUSH
11106: CALL_OW 297
11110: PUSH
11111: LD_INT 7
11113: LESS
11114: IFFALSE 11140
// begin ComCrawl ( Belkov ) ;
11116: LD_EXP 51
11120: PPUSH
11121: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11125: LD_EXP 51
11129: PPUSH
11130: LD_INT 63
11132: PPUSH
11133: LD_INT 55
11135: PPUSH
11136: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11140: LD_EXP 52
11144: PPUSH
11145: LD_INT 66
11147: PPUSH
11148: LD_INT 58
11150: PPUSH
11151: CALL_OW 297
11155: PUSH
11156: LD_INT 7
11158: LESS
11159: IFFALSE 11185
// begin ComCrawl ( Jaunzeme ) ;
11161: LD_EXP 52
11165: PPUSH
11166: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11170: LD_EXP 52
11174: PPUSH
11175: LD_INT 66
11177: PPUSH
11178: LD_INT 58
11180: PPUSH
11181: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11185: LD_EXP 54
11189: PPUSH
11190: LD_INT 63
11192: PPUSH
11193: LD_INT 54
11195: PPUSH
11196: CALL_OW 297
11200: PUSH
11201: LD_INT 7
11203: LESS
11204: PUSH
11205: LD_EXP 54
11209: PPUSH
11210: CALL_OW 255
11214: PUSH
11215: LD_INT 6
11217: EQUAL
11218: AND
11219: PUSH
11220: LD_EXP 12
11224: AND
11225: IFFALSE 11251
// begin ComCrawl ( Gnyevko ) ;
11227: LD_EXP 54
11231: PPUSH
11232: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11236: LD_EXP 54
11240: PPUSH
11241: LD_INT 63
11243: PPUSH
11244: LD_INT 54
11246: PPUSH
11247: CALL_OW 171
// end ; end ; end_of_file
11251: END
// export function BurlakDying ; begin
11252: LD_INT 0
11254: PPUSH
// YouLost ( Burlak ) ;
11255: LD_STRING Burlak
11257: PPUSH
11258: CALL_OW 104
// end ;
11262: LD_VAR 0 1
11266: RET
// every 0 0$1 trigger kirovSolds = 0 do
11267: LD_EXP 56
11271: PUSH
11272: LD_INT 0
11274: EQUAL
11275: IFFALSE 11287
11277: GO 11279
11279: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11280: LD_STRING KirovSoldsDie
11282: PPUSH
11283: CALL_OW 104
11287: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11288: LD_EXP 22
11292: PUSH
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 22
11298: PUSH
11299: LD_INT 3
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 21
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 71
11324: PUSH
11325: LD_INT 0
11327: EQUAL
11328: AND
11329: IFFALSE 11608
11331: GO 11333
11333: DISABLE
11334: LD_INT 0
11336: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11337: LD_EXP 53
11341: PPUSH
11342: CALL_OW 302
11346: PUSH
11347: LD_EXP 53
11351: PPUSH
11352: CALL_OW 255
11356: PUSH
11357: LD_INT 8
11359: EQUAL
11360: AND
11361: PUSH
11362: LD_EXP 54
11366: PPUSH
11367: CALL_OW 302
11371: PUSH
11372: LD_EXP 54
11376: PPUSH
11377: CALL_OW 255
11381: PUSH
11382: LD_INT 8
11384: EQUAL
11385: AND
11386: OR
11387: IFFALSE 11519
// begin case Query ( QExit2 ) of 1 :
11389: LD_STRING QExit2
11391: PPUSH
11392: CALL_OW 97
11396: PUSH
11397: LD_INT 1
11399: DOUBLE
11400: EQUAL
11401: IFTRUE 11405
11403: GO 11497
11405: POP
// begin if IsOk ( Belkov ) then
11406: LD_EXP 51
11410: PPUSH
11411: CALL_OW 302
11415: IFFALSE 11431
// Say ( Belkov , D12-Bel-1 ) else
11417: LD_EXP 51
11421: PPUSH
11422: LD_STRING D12-Bel-1
11424: PPUSH
11425: CALL_OW 88
11429: GO 11491
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11431: LD_INT 22
11433: PUSH
11434: LD_INT 3
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 21
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 50
11453: PUSH
11454: EMPTY
11455: LIST
11456: PUSH
11457: LD_INT 26
11459: PUSH
11460: LD_INT 1
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PPUSH
11473: CALL_OW 69
11477: PPUSH
11478: LD_STRING D12-RSol1-1
11480: PPUSH
11481: LD_STRING 
11483: PPUSH
11484: LD_INT 0
11486: PPUSH
11487: CALL 8106 0 4
// FinishMission ;
11491: CALL 11611 0 0
// end ; 2 :
11495: GO 11517
11497: LD_INT 2
11499: DOUBLE
11500: EQUAL
11501: IFTRUE 11505
11503: GO 11516
11505: POP
// begin wait ( 0 0$5 ) ;
11506: LD_INT 175
11508: PPUSH
11509: CALL_OW 67
// enable ;
11513: ENABLE
// end ; end ;
11514: GO 11517
11516: POP
// end else
11517: GO 11608
// begin if IsOk ( Belkov ) then
11519: LD_EXP 51
11523: PPUSH
11524: CALL_OW 302
11528: IFFALSE 11544
// Say ( Belkov , D12-Bel-1 ) else
11530: LD_EXP 51
11534: PPUSH
11535: LD_STRING D12-Bel-1
11537: PPUSH
11538: CALL_OW 88
11542: GO 11604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11544: LD_INT 22
11546: PUSH
11547: LD_INT 3
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 21
11556: PUSH
11557: LD_INT 1
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 50
11566: PUSH
11567: EMPTY
11568: LIST
11569: PUSH
11570: LD_INT 26
11572: PUSH
11573: LD_INT 1
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 69
11590: PPUSH
11591: LD_STRING D12-RSol1-1
11593: PPUSH
11594: LD_STRING 
11596: PPUSH
11597: LD_INT 0
11599: PPUSH
11600: CALL 8106 0 4
// FinishMission ;
11604: CALL 11611 0 0
// end ; end ;
11608: PPOPN 1
11610: END
// function FinishMission ; begin
11611: LD_INT 0
11613: PPUSH
// SetRewards ;
11614: CALL 11635 0 0
// SavePlayerCharacters ;
11618: CALL 11986 0 0
// SaveGlobalVariables ;
11622: CALL 12116 0 0
// YouWin ;
11626: CALL_OW 103
// end ;
11630: LD_VAR 0 1
11634: RET
// function SetRewards ; begin
11635: LD_INT 0
11637: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11638: LD_EXP 19
11642: NOT
11643: PUSH
11644: LD_EXP 20
11648: NOT
11649: AND
11650: IFFALSE 11662
// AddMedal ( NoEscape , 1 ) ;
11652: LD_STRING NoEscape
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11662: LD_EXP 19
11666: PUSH
11667: LD_EXP 20
11671: NOT
11672: AND
11673: IFFALSE 11686
// AddMedal ( NoEscape , - 1 ) ;
11675: LD_STRING NoEscape
11677: PPUSH
11678: LD_INT 1
11680: NEG
11681: PPUSH
11682: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11686: LD_EXP 19
11690: NOT
11691: PUSH
11692: LD_EXP 20
11696: AND
11697: IFFALSE 11710
// AddMedal ( NoEscape , - 2 ) ;
11699: LD_STRING NoEscape
11701: PPUSH
11702: LD_INT 2
11704: NEG
11705: PPUSH
11706: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11710: LD_EXP 19
11714: PUSH
11715: LD_EXP 20
11719: AND
11720: IFFALSE 11733
// AddMedal ( NoEscape , - 3 ) ;
11722: LD_STRING NoEscape
11724: PPUSH
11725: LD_INT 3
11727: NEG
11728: PPUSH
11729: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11733: LD_EXP 12
11737: PUSH
11738: LD_EXP 54
11742: PPUSH
11743: CALL_OW 302
11747: AND
11748: PUSH
11749: LD_EXP 21
11753: AND
11754: PUSH
11755: LD_EXP 53
11759: PPUSH
11760: CALL_OW 302
11764: AND
11765: IFFALSE 11777
// AddMedal ( Gnyevko , 1 ) ;
11767: LD_STRING Gnyevko
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11777: LD_EXP 12
11781: NOT
11782: PUSH
11783: LD_EXP 21
11787: AND
11788: PUSH
11789: LD_EXP 53
11793: PPUSH
11794: CALL_OW 302
11798: AND
11799: IFFALSE 11812
// AddMedal ( Gnyevko , - 1 ) ;
11801: LD_STRING Gnyevko
11803: PPUSH
11804: LD_INT 1
11806: NEG
11807: PPUSH
11808: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11812: LD_EXP 12
11816: PUSH
11817: LD_EXP 21
11821: NOT
11822: PUSH
11823: LD_EXP 54
11827: PPUSH
11828: CALL_OW 302
11832: NOT
11833: OR
11834: PUSH
11835: LD_EXP 53
11839: PPUSH
11840: CALL_OW 302
11844: NOT
11845: OR
11846: AND
11847: IFFALSE 11860
// AddMedal ( Gnyevko , - 2 ) ;
11849: LD_STRING Gnyevko
11851: PPUSH
11852: LD_INT 2
11854: NEG
11855: PPUSH
11856: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11860: LD_EXP 12
11864: NOT
11865: PUSH
11866: LD_EXP 21
11870: NOT
11871: AND
11872: PUSH
11873: LD_EXP 54
11877: PPUSH
11878: CALL_OW 302
11882: NOT
11883: PUSH
11884: LD_EXP 53
11888: PPUSH
11889: CALL_OW 302
11893: NOT
11894: AND
11895: OR
11896: IFFALSE 11909
// AddMedal ( Gnyevko , - 3 ) ;
11898: LD_STRING Gnyevko
11900: PPUSH
11901: LD_INT 3
11903: NEG
11904: PPUSH
11905: CALL_OW 101
// if lostComradesCounter = 0 then
11909: LD_EXP 23
11913: PUSH
11914: LD_INT 0
11916: EQUAL
11917: IFFALSE 11931
// AddMedal ( NoLosses , 1 ) else
11919: LD_STRING NoLosses
11921: PPUSH
11922: LD_INT 1
11924: PPUSH
11925: CALL_OW 101
11929: GO 11941
// AddMedal ( NoLosses , 0 ) ;
11931: LD_STRING NoLosses
11933: PPUSH
11934: LD_INT 0
11936: PPUSH
11937: CALL_OW 101
// GiveMedals ( Main ) ;
11941: LD_STRING Main
11943: PPUSH
11944: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11948: LD_INT 22
11950: PUSH
11951: LD_INT 3
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 21
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PPUSH
11972: CALL_OW 69
11976: PPUSH
11977: CALL_OW 43
// end ;
11981: LD_VAR 0 1
11985: RET
// function SavePlayerCharacters ; var others ; begin
11986: LD_INT 0
11988: PPUSH
11989: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
11990: LD_EXP 46
11994: PPUSH
11995: LD_STRING Burlak
11997: PPUSH
11998: CALL 8285 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12002: LD_EXP 54
12006: PPUSH
12007: LD_STRING Gnyevko
12009: PPUSH
12010: CALL 8285 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12014: LD_EXP 51
12018: PPUSH
12019: LD_STRING Belkov
12021: PPUSH
12022: CALL 8285 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12026: LD_EXP 53
12030: PPUSH
12031: LD_STRING Kirilenkova
12033: PPUSH
12034: CALL 8285 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12038: LD_ADDR_VAR 0 2
12042: PUSH
12043: LD_INT 22
12045: PUSH
12046: LD_INT 3
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 21
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: CALL_OW 69
12071: PUSH
12072: LD_EXP 46
12076: PUSH
12077: LD_EXP 54
12081: PUSH
12082: LD_EXP 51
12086: PUSH
12087: LD_EXP 53
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: DIFF
12098: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
12099: LD_VAR 0 2
12103: PPUSH
12104: LD_STRING other_survivors
12106: PPUSH
12107: CALL 8341 0 2
// end ;
12111: LD_VAR 0 1
12115: RET
// function SaveGlobalVariables ; begin
12116: LD_INT 0
12118: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12119: LD_EXP 1
12123: PPUSH
12124: LD_STRING 01_GladstoneStatus
12126: PPUSH
12127: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12131: LD_EXP 2
12135: PPUSH
12136: LD_STRING 01_JohannaStatus
12138: PPUSH
12139: CALL_OW 39
// end ; end_of_file
12143: LD_VAR 0 1
12147: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12148: LD_INT 0
12150: PPUSH
12151: PPUSH
12152: PPUSH
// uc_side = 1 ;
12153: LD_ADDR_OWVAR 20
12157: PUSH
12158: LD_INT 1
12160: ST_TO_ADDR
// hc_class := 1 ;
12161: LD_ADDR_OWVAR 28
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
// hc_sex := sex_male ;
12169: LD_ADDR_OWVAR 27
12173: PUSH
12174: LD_INT 1
12176: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12177: LD_ADDR_OWVAR 33
12181: PUSH
12182: LD_STRING AmGalRemake
12184: ST_TO_ADDR
// hc_face_number := 1 ;
12185: LD_ADDR_OWVAR 34
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// hc_name := Charles Brown ;
12193: LD_ADDR_OWVAR 26
12197: PUSH
12198: LD_STRING Charles Brown
12200: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12201: LD_ADDR_OWVAR 29
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: LD_INT 11
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12216: LD_ADDR_OWVAR 31
12220: PUSH
12221: LD_INT 1
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: LD_INT 1
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: ST_TO_ADDR
// Charles = CreateHuman ;
12239: LD_ADDR_EXP 42
12243: PUSH
12244: CALL_OW 44
12248: ST_TO_ADDR
// hc_class := 1 ;
12249: LD_ADDR_OWVAR 28
12253: PUSH
12254: LD_INT 1
12256: ST_TO_ADDR
// hc_sex := sex_female ;
12257: LD_ADDR_OWVAR 27
12261: PUSH
12262: LD_INT 2
12264: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12265: LD_ADDR_OWVAR 33
12269: PUSH
12270: LD_STRING AmGalRemake
12272: ST_TO_ADDR
// hc_face_number := 2 ;
12273: LD_ADDR_OWVAR 34
12277: PUSH
12278: LD_INT 2
12280: ST_TO_ADDR
// hc_name := Johanna Holland ;
12281: LD_ADDR_OWVAR 26
12285: PUSH
12286: LD_STRING Johanna Holland
12288: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12289: LD_ADDR_OWVAR 29
12293: PUSH
12294: LD_INT 12
12296: PUSH
12297: LD_INT 11
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12304: LD_ADDR_OWVAR 31
12308: PUSH
12309: LD_EXP 36
12313: PUSH
12314: LD_INT 0
12316: PPUSH
12317: LD_INT 2
12319: PPUSH
12320: CALL_OW 12
12324: PUSH
12325: LD_INT 0
12327: PPUSH
12328: LD_INT 2
12330: PPUSH
12331: CALL_OW 12
12335: PUSH
12336: LD_INT 0
12338: PPUSH
12339: LD_INT 2
12341: PPUSH
12342: CALL_OW 12
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: ST_TO_ADDR
// Johanna = CreateHuman ;
12353: LD_ADDR_EXP 43
12357: PUSH
12358: CALL_OW 44
12362: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12363: LD_EXP 43
12367: PPUSH
12368: LD_INT 19
12370: PPUSH
12371: LD_INT 0
12373: PPUSH
12374: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12378: LD_EXP 43
12382: PPUSH
12383: LD_INT 23
12385: PPUSH
12386: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
12390: LD_ADDR_EXP 44
12394: PUSH
12395: LD_STRING Gladstone
12397: PPUSH
12398: LD_INT 0
12400: PPUSH
12401: CALL 8043 0 2
12405: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12406: LD_EXP 44
12410: PPUSH
12411: LD_INT 22
12413: PPUSH
12414: CALL_OW 52
// amApemans = [ ] ;
12418: LD_ADDR_EXP 45
12422: PUSH
12423: EMPTY
12424: ST_TO_ADDR
// for i := 1 to amApeAmount do
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: DOUBLE
12431: LD_INT 1
12433: DEC
12434: ST_TO_ADDR
12435: LD_EXP 35
12439: PUSH
12440: FOR_TO
12441: IFFALSE 12556
// begin hc_class := class_apeman ;
12443: LD_ADDR_OWVAR 28
12447: PUSH
12448: LD_INT 12
12450: ST_TO_ADDR
// hc_gallery :=  ;
12451: LD_ADDR_OWVAR 33
12455: PUSH
12456: LD_STRING 
12458: ST_TO_ADDR
// hc_name :=  ;
12459: LD_ADDR_OWVAR 26
12463: PUSH
12464: LD_STRING 
12466: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12467: LD_ADDR_OWVAR 31
12471: PUSH
12472: LD_EXP 36
12476: PUSH
12477: LD_INT 0
12479: PPUSH
12480: LD_INT 2
12482: PPUSH
12483: CALL_OW 12
12487: PUSH
12488: LD_INT 0
12490: PPUSH
12491: LD_INT 2
12493: PPUSH
12494: CALL_OW 12
12498: PUSH
12499: LD_INT 0
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: ST_TO_ADDR
// ape = CreateHuman ;
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: CALL_OW 44
12525: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12526: LD_VAR 0 3
12530: PPUSH
12531: LD_INT 22
12533: PPUSH
12534: CALL_OW 52
// amApemans = amApemans ^ ape ;
12538: LD_ADDR_EXP 45
12542: PUSH
12543: LD_EXP 45
12547: PUSH
12548: LD_VAR 0 3
12552: ADD
12553: ST_TO_ADDR
// end ;
12554: GO 12440
12556: POP
12557: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12558: LD_INT 23
12560: PPUSH
12561: LD_EXP 33
12565: PPUSH
12566: CALL_OW 234
// end ; end_of_file
12570: LD_VAR 0 1
12574: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12575: LD_INT 0
12577: PPUSH
// PrepareHero ;
12578: CALL 12603 0 0
// PreparePokryshkinTeams ;
12582: CALL 12697 0 0
// PrepareJelena ;
12586: CALL 12962 0 0
// PrepareGnyevko ;
12590: CALL 12994 0 0
// PrepareKurin ;
12594: CALL 12665 0 0
// end ;
12598: LD_VAR 0 1
12602: RET
// function PrepareHero ; begin
12603: LD_INT 0
12605: PPUSH
// uc_side = 3 ;
12606: LD_ADDR_OWVAR 20
12610: PUSH
12611: LD_INT 3
12613: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
12614: LD_ADDR_EXP 46
12618: PUSH
12619: LD_STRING Burlak
12621: PPUSH
12622: LD_INT 0
12624: PPUSH
12625: CALL 8043 0 2
12629: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12630: LD_EXP 46
12634: PPUSH
12635: LD_EXP 37
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: LD_EXP 37
12648: PUSH
12649: LD_INT 2
12651: ARRAY
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 48
// end ;
12660: LD_VAR 0 1
12664: RET
// function PrepareKurin ; begin
12665: LD_INT 0
12667: PPUSH
// uc_side = 6 ;
12668: LD_ADDR_OWVAR 20
12672: PUSH
12673: LD_INT 6
12675: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
12676: LD_ADDR_EXP 55
12680: PUSH
12681: LD_STRING Kurin
12683: PPUSH
12684: LD_INT 0
12686: PPUSH
12687: CALL 8043 0 2
12691: ST_TO_ADDR
// end ;
12692: LD_VAR 0 1
12696: RET
// function PreparePokryshkinTeams ; begin
12697: LD_INT 0
12699: PPUSH
// uc_side = 6 ;
12700: LD_ADDR_OWVAR 20
12704: PUSH
12705: LD_INT 6
12707: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
12708: LD_ADDR_EXP 47
12712: PUSH
12713: LD_STRING Pokryshkin
12715: PPUSH
12716: LD_INT 0
12718: PPUSH
12719: CALL 8043 0 2
12723: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
12724: LD_ADDR_EXP 48
12728: PUSH
12729: LD_STRING Saseda
12731: PPUSH
12732: LD_INT 0
12734: PPUSH
12735: CALL 8043 0 2
12739: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
12740: LD_ADDR_EXP 49
12744: PUSH
12745: LD_STRING Jaworska
12747: PPUSH
12748: LD_INT 0
12750: PPUSH
12751: CALL 8043 0 2
12755: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
12756: LD_ADDR_EXP 50
12760: PUSH
12761: LD_STRING Balei
12763: PPUSH
12764: LD_INT 0
12766: PPUSH
12767: CALL 8043 0 2
12771: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
12772: LD_ADDR_EXP 51
12776: PUSH
12777: LD_STRING Belkov
12779: PPUSH
12780: LD_INT 0
12782: PPUSH
12783: CALL 8043 0 2
12787: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12788: LD_EXP 47
12792: PPUSH
12793: LD_INT 25
12795: PPUSH
12796: LD_INT 0
12798: PPUSH
12799: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12803: LD_EXP 48
12807: PPUSH
12808: LD_INT 17
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12818: LD_EXP 49
12822: PPUSH
12823: LD_INT 17
12825: PPUSH
12826: LD_INT 0
12828: PPUSH
12829: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12833: LD_EXP 50
12837: PPUSH
12838: LD_INT 17
12840: PPUSH
12841: LD_INT 0
12843: PPUSH
12844: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12848: LD_EXP 51
12852: PPUSH
12853: LD_INT 17
12855: PPUSH
12856: LD_INT 0
12858: PPUSH
12859: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12863: LD_ADDR_EXP 56
12867: PUSH
12868: LD_EXP 47
12872: PUSH
12873: LD_EXP 48
12877: PUSH
12878: LD_EXP 50
12882: PUSH
12883: LD_EXP 51
12887: PUSH
12888: LD_EXP 49
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: ST_TO_ADDR
// if Difficulty < 3 then
12900: LD_OWVAR 67
12904: PUSH
12905: LD_INT 3
12907: LESS
12908: IFFALSE 12957
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
12910: LD_ADDR_EXP 52
12914: PUSH
12915: LD_STRING Jaunzeme
12917: PPUSH
12918: LD_INT 0
12920: PPUSH
12921: CALL 8043 0 2
12925: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12926: LD_EXP 52
12930: PPUSH
12931: LD_INT 26
12933: PPUSH
12934: LD_INT 0
12936: PPUSH
12937: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12941: LD_ADDR_EXP 56
12945: PUSH
12946: LD_EXP 56
12950: PUSH
12951: LD_EXP 52
12955: ADD
12956: ST_TO_ADDR
// end ; end ;
12957: LD_VAR 0 1
12961: RET
// function PrepareJelena ; begin
12962: LD_INT 0
12964: PPUSH
// uc_side = 8 ;
12965: LD_ADDR_OWVAR 20
12969: PUSH
12970: LD_INT 8
12972: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
12973: LD_ADDR_EXP 53
12977: PUSH
12978: LD_STRING Kirilenkova
12980: PPUSH
12981: LD_INT 0
12983: PPUSH
12984: CALL 8043 0 2
12988: ST_TO_ADDR
// end ;
12989: LD_VAR 0 1
12993: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
12994: LD_INT 0
12996: PPUSH
12997: PPUSH
12998: PPUSH
12999: PPUSH
// uc_side = 8 ;
13000: LD_ADDR_OWVAR 20
13004: PUSH
13005: LD_INT 8
13007: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
13008: LD_ADDR_EXP 54
13012: PUSH
13013: LD_STRING Gnyevko
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL 8043 0 2
13023: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 38
13033: PUSH
13034: LD_INT 1
13036: PPUSH
13037: LD_EXP 38
13041: PPUSH
13042: CALL_OW 12
13046: ARRAY
13047: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13048: LD_EXP 54
13052: PPUSH
13053: LD_VAR 0 4
13057: PUSH
13058: LD_INT 1
13060: ARRAY
13061: PPUSH
13062: LD_VAR 0 4
13066: PUSH
13067: LD_INT 2
13069: ARRAY
13070: PPUSH
13071: LD_INT 0
13073: PPUSH
13074: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13078: LD_EXP 54
13082: PPUSH
13083: LD_EXP 39
13087: PPUSH
13088: CALL_OW 234
// ComHold ( Gnyevko ) ;
13092: LD_EXP 54
13096: PPUSH
13097: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
13101: LD_ADDR_VAR 0 3
13105: PUSH
13106: DOUBLE
13107: LD_INT 1
13109: DEC
13110: ST_TO_ADDR
13111: LD_EXP 27
13115: PUSH
13116: LD_INT 1
13118: ARRAY
13119: PUSH
13120: LD_INT 3
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_OWVAR 67
13138: ARRAY
13139: MINUS
13140: PUSH
13141: FOR_TO
13142: IFFALSE 13272
// begin uc_side = 0 ;
13144: LD_ADDR_OWVAR 20
13148: PUSH
13149: LD_INT 0
13151: ST_TO_ADDR
// uc_nation = nation_nature ;
13152: LD_ADDR_OWVAR 21
13156: PUSH
13157: LD_INT 0
13159: ST_TO_ADDR
// hc_class = class_apeman ;
13160: LD_ADDR_OWVAR 28
13164: PUSH
13165: LD_INT 12
13167: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13168: LD_ADDR_OWVAR 31
13172: PUSH
13173: LD_EXP 28
13177: PUSH
13178: LD_INT 1
13180: ARRAY
13181: PUSH
13182: LD_EXP 28
13186: PUSH
13187: LD_INT 2
13189: ARRAY
13190: PUSH
13191: LD_EXP 28
13195: PUSH
13196: LD_INT 3
13198: ARRAY
13199: PUSH
13200: LD_EXP 28
13204: PUSH
13205: LD_INT 4
13207: ARRAY
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13215: LD_ADDR_OWVAR 35
13219: PUSH
13220: LD_EXP 34
13224: ST_TO_ADDR
// un = CreateHuman ;
13225: LD_ADDR_VAR 0 2
13229: PUSH
13230: CALL_OW 44
13234: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13235: LD_VAR 0 2
13239: PPUSH
13240: LD_EXP 54
13244: PPUSH
13245: CALL_OW 250
13249: PPUSH
13250: LD_EXP 54
13254: PPUSH
13255: CALL_OW 251
13259: PPUSH
13260: LD_INT 8
13262: PPUSH
13263: LD_INT 0
13265: PPUSH
13266: CALL_OW 50
// end ;
13270: GO 13141
13272: POP
13273: POP
// end ; end_of_file
13274: LD_VAR 0 1
13278: RET
// export function PrepareNature ; var i , un ; begin
13279: LD_INT 0
13281: PPUSH
13282: PPUSH
13283: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: DOUBLE
13290: LD_INT 1
13292: DEC
13293: ST_TO_ADDR
13294: LD_EXP 27
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PUSH
13303: FOR_TO
13304: IFFALSE 13414
// begin uc_side = 0 ;
13306: LD_ADDR_OWVAR 20
13310: PUSH
13311: LD_INT 0
13313: ST_TO_ADDR
// uc_nation = nation_nature ;
13314: LD_ADDR_OWVAR 21
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// hc_class = class_apeman ;
13322: LD_ADDR_OWVAR 28
13326: PUSH
13327: LD_INT 12
13329: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13330: LD_ADDR_OWVAR 31
13334: PUSH
13335: LD_EXP 28
13339: PUSH
13340: LD_INT 1
13342: ARRAY
13343: PUSH
13344: LD_EXP 28
13348: PUSH
13349: LD_INT 2
13351: ARRAY
13352: PUSH
13353: LD_EXP 28
13357: PUSH
13358: LD_INT 3
13360: ARRAY
13361: PUSH
13362: LD_EXP 28
13366: PUSH
13367: LD_INT 4
13369: ARRAY
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13377: LD_ADDR_OWVAR 35
13381: PUSH
13382: LD_EXP 34
13386: ST_TO_ADDR
// un = CreateHuman ;
13387: LD_ADDR_VAR 0 3
13391: PUSH
13392: CALL_OW 44
13396: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13397: LD_VAR 0 3
13401: PPUSH
13402: LD_INT 16
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: CALL_OW 49
// end ;
13412: GO 13303
13414: POP
13415: POP
// for i := 1 to animalsAmount [ 2 ] do
13416: LD_ADDR_VAR 0 2
13420: PUSH
13421: DOUBLE
13422: LD_INT 1
13424: DEC
13425: ST_TO_ADDR
13426: LD_EXP 27
13430: PUSH
13431: LD_INT 2
13433: ARRAY
13434: PUSH
13435: FOR_TO
13436: IFFALSE 13546
// begin uc_side = 0 ;
13438: LD_ADDR_OWVAR 20
13442: PUSH
13443: LD_INT 0
13445: ST_TO_ADDR
// uc_nation = nation_nature ;
13446: LD_ADDR_OWVAR 21
13450: PUSH
13451: LD_INT 0
13453: ST_TO_ADDR
// hc_class = class_phororhacos ;
13454: LD_ADDR_OWVAR 28
13458: PUSH
13459: LD_INT 18
13461: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13462: LD_ADDR_OWVAR 31
13466: PUSH
13467: LD_EXP 28
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PUSH
13476: LD_EXP 28
13480: PUSH
13481: LD_INT 2
13483: ARRAY
13484: PUSH
13485: LD_EXP 28
13489: PUSH
13490: LD_INT 3
13492: ARRAY
13493: PUSH
13494: LD_EXP 28
13498: PUSH
13499: LD_INT 4
13501: ARRAY
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13509: LD_ADDR_OWVAR 35
13513: PUSH
13514: LD_EXP 29
13518: ST_TO_ADDR
// un = CreateHuman ;
13519: LD_ADDR_VAR 0 3
13523: PUSH
13524: CALL_OW 44
13528: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13529: LD_VAR 0 3
13533: PPUSH
13534: LD_INT 15
13536: PPUSH
13537: LD_INT 0
13539: PPUSH
13540: CALL_OW 49
// end ;
13544: GO 13435
13546: POP
13547: POP
// for i := 1 to animalsAmount [ 3 ] do
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: DOUBLE
13554: LD_INT 1
13556: DEC
13557: ST_TO_ADDR
13558: LD_EXP 27
13562: PUSH
13563: LD_INT 3
13565: ARRAY
13566: PUSH
13567: FOR_TO
13568: IFFALSE 13678
// begin uc_side = 0 ;
13570: LD_ADDR_OWVAR 20
13574: PUSH
13575: LD_INT 0
13577: ST_TO_ADDR
// uc_nation = nation_nature ;
13578: LD_ADDR_OWVAR 21
13582: PUSH
13583: LD_INT 0
13585: ST_TO_ADDR
// hc_class = class_tiger ;
13586: LD_ADDR_OWVAR 28
13590: PUSH
13591: LD_INT 14
13593: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13594: LD_ADDR_OWVAR 31
13598: PUSH
13599: LD_EXP 28
13603: PUSH
13604: LD_INT 1
13606: ARRAY
13607: PUSH
13608: LD_EXP 28
13612: PUSH
13613: LD_INT 2
13615: ARRAY
13616: PUSH
13617: LD_EXP 28
13621: PUSH
13622: LD_INT 3
13624: ARRAY
13625: PUSH
13626: LD_EXP 28
13630: PUSH
13631: LD_INT 4
13633: ARRAY
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13641: LD_ADDR_OWVAR 35
13645: PUSH
13646: LD_EXP 29
13650: ST_TO_ADDR
// un = CreateHuman ;
13651: LD_ADDR_VAR 0 3
13655: PUSH
13656: CALL_OW 44
13660: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13661: LD_VAR 0 3
13665: PPUSH
13666: LD_INT 15
13668: PPUSH
13669: LD_INT 0
13671: PPUSH
13672: CALL_OW 49
// end ;
13676: GO 13567
13678: POP
13679: POP
// for i := 1 to animalsAmount [ 4 ] do
13680: LD_ADDR_VAR 0 2
13684: PUSH
13685: DOUBLE
13686: LD_INT 1
13688: DEC
13689: ST_TO_ADDR
13690: LD_EXP 27
13694: PUSH
13695: LD_INT 4
13697: ARRAY
13698: PUSH
13699: FOR_TO
13700: IFFALSE 13810
// begin uc_side = 0 ;
13702: LD_ADDR_OWVAR 20
13706: PUSH
13707: LD_INT 0
13709: ST_TO_ADDR
// uc_nation = nation_nature ;
13710: LD_ADDR_OWVAR 21
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// hc_class = 21 ;
13718: LD_ADDR_OWVAR 28
13722: PUSH
13723: LD_INT 21
13725: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13726: LD_ADDR_OWVAR 31
13730: PUSH
13731: LD_EXP 28
13735: PUSH
13736: LD_INT 1
13738: ARRAY
13739: PUSH
13740: LD_EXP 28
13744: PUSH
13745: LD_INT 2
13747: ARRAY
13748: PUSH
13749: LD_EXP 28
13753: PUSH
13754: LD_INT 3
13756: ARRAY
13757: PUSH
13758: LD_EXP 28
13762: PUSH
13763: LD_INT 4
13765: ARRAY
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13773: LD_ADDR_OWVAR 35
13777: PUSH
13778: LD_EXP 29
13782: ST_TO_ADDR
// un = CreateHuman ;
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: CALL_OW 44
13792: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13793: LD_VAR 0 3
13797: PPUSH
13798: LD_INT 15
13800: PPUSH
13801: LD_INT 0
13803: PPUSH
13804: CALL_OW 49
// end ;
13808: GO 13699
13810: POP
13811: POP
// end ; end_of_file
13812: LD_VAR 0 1
13816: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13817: LD_VAR 0 1
13821: PUSH
13822: LD_EXP 46
13826: EQUAL
13827: PUSH
13828: LD_EXP 53
13832: PPUSH
13833: CALL_OW 255
13837: PUSH
13838: LD_INT 3
13840: EQUAL
13841: NOT
13842: AND
13843: PUSH
13844: LD_EXP 53
13848: PPUSH
13849: CALL_OW 302
13853: NOT
13854: AND
13855: IFFALSE 13861
// BurlakDying ;
13857: CALL 11252 0 0
// if unit = Gladstone then
13861: LD_VAR 0 1
13865: PUSH
13866: LD_EXP 44
13870: EQUAL
13871: IFFALSE 13881
// gladstoneStatus = 0 ;
13873: LD_ADDR_EXP 1
13877: PUSH
13878: LD_INT 0
13880: ST_TO_ADDR
// if unit = Johanna then
13881: LD_VAR 0 1
13885: PUSH
13886: LD_EXP 43
13890: EQUAL
13891: IFFALSE 13901
// johannaStatus = 0 ;
13893: LD_ADDR_EXP 2
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// end ;
13901: PPOPN 1
13903: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13904: LD_VAR 0 1
13908: PUSH
13909: LD_EXP 46
13913: EQUAL
13914: IFFALSE 13920
// BurlakDying ;
13916: CALL 11252 0 0
// if GetSide ( unit ) = 3 then
13920: LD_VAR 0 1
13924: PPUSH
13925: CALL_OW 255
13929: PUSH
13930: LD_INT 3
13932: EQUAL
13933: IFFALSE 13949
// lostComradesCounter = lostComradesCounter + 1 ;
13935: LD_ADDR_EXP 23
13939: PUSH
13940: LD_EXP 23
13944: PUSH
13945: LD_INT 1
13947: PLUS
13948: ST_TO_ADDR
// if unit in kirovSolds then
13949: LD_VAR 0 1
13953: PUSH
13954: LD_EXP 56
13958: IN
13959: IFFALSE 13977
// kirovSolds = kirovSolds diff unit ;
13961: LD_ADDR_EXP 56
13965: PUSH
13966: LD_EXP 56
13970: PUSH
13971: LD_VAR 0 1
13975: DIFF
13976: ST_TO_ADDR
// end ;
13977: PPOPN 1
13979: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
13980: LD_VAR 0 1
13984: PUSH
13985: LD_INT 3
13987: EQUAL
13988: PUSH
13989: LD_VAR 0 2
13993: PUSH
13994: LD_INT 1
13996: EQUAL
13997: AND
13998: PUSH
13999: LD_VAR 0 1
14003: PUSH
14004: LD_INT 1
14006: EQUAL
14007: PUSH
14008: LD_VAR 0 2
14012: PUSH
14013: LD_INT 3
14015: EQUAL
14016: AND
14017: PUSH
14018: LD_EXP 17
14022: PUSH
14023: LD_INT 1
14025: EQUAL
14026: AND
14027: OR
14028: IFFALSE 14034
// Dial_SecondAttack ;
14030: CALL 6004 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14034: LD_VAR 0 1
14038: PUSH
14039: LD_INT 3
14041: EQUAL
14042: PUSH
14043: LD_VAR 0 2
14047: PUSH
14048: LD_INT 6
14050: EQUAL
14051: AND
14052: PUSH
14053: LD_EXP 18
14057: NOT
14058: AND
14059: IFFALSE 14065
// Dialogue_AttackComrade ;
14061: CALL 4123 0 0
// end ; end_of_file
14065: PPOPN 2
14067: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$30 do
14068: LD_EXP 53
14072: PPUSH
14073: CALL_OW 255
14077: PUSH
14078: LD_INT 3
14080: EQUAL
14081: PUSH
14082: LD_EXP 26
14086: PUSH
14087: LD_INT 1050
14089: LESS
14090: AND
14091: IFFALSE 14103
14093: GO 14095
14095: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14096: LD_STRING ACH_YELENA
14098: PPUSH
14099: CALL_OW 543
14103: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14104: LD_INT 23
14106: PUSH
14107: LD_INT 0
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 2
14116: PUSH
14117: LD_INT 25
14119: PUSH
14120: LD_INT 14
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 25
14129: PUSH
14130: LD_INT 18
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 25
14139: PUSH
14140: LD_INT 12
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PPUSH
14157: CALL_OW 69
14161: NOT
14162: IFFALSE 14174
14164: GO 14166
14166: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14167: LD_STRING ACH_NATURE
14169: PPUSH
14170: CALL_OW 543
14174: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
14175: LD_INT 0
14177: PPUSH
14178: PPUSH
// if not missionNumber then
14179: LD_VAR 0 2
14183: NOT
14184: IFFALSE 14188
// exit ;
14186: GO 14318
// achiv := false ;
14188: LD_ADDR_VAR 0 7
14192: PUSH
14193: LD_INT 0
14195: ST_TO_ADDR
// case campaignNumber of 1 :
14196: LD_VAR 0 1
14200: PUSH
14201: LD_INT 1
14203: DOUBLE
14204: EQUAL
14205: IFTRUE 14209
14207: GO 14220
14209: POP
// achiv := ACH_GOTA ; 2 :
14210: LD_ADDR_VAR 0 7
14214: PUSH
14215: LD_STRING ACH_GOTA
14217: ST_TO_ADDR
14218: GO 14270
14220: LD_INT 2
14222: DOUBLE
14223: EQUAL
14224: IFTRUE 14228
14226: GO 14231
14228: POP
// ; 3 :
14229: GO 14270
14231: LD_INT 3
14233: DOUBLE
14234: EQUAL
14235: IFTRUE 14239
14237: GO 14250
14239: POP
// achiv := ACH_MOTSU ; 4 :
14240: LD_ADDR_VAR 0 7
14244: PUSH
14245: LD_STRING ACH_MOTSU
14247: ST_TO_ADDR
14248: GO 14270
14250: LD_INT 4
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14258
14256: GO 14269
14258: POP
// achiv := ACH_LOP ; end ;
14259: LD_ADDR_VAR 0 7
14263: PUSH
14264: LD_STRING ACH_LOP
14266: ST_TO_ADDR
14267: GO 14270
14269: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
14270: LD_OWVAR 67
14274: PUSH
14275: LD_INT 3
14277: EQUAL
14278: PUSH
14279: LD_VAR 0 7
14283: AND
14284: PUSH
14285: LD_VAR 0 3
14289: AND
14290: PUSH
14291: LD_VAR 0 4
14295: AND
14296: PUSH
14297: LD_VAR 0 5
14301: AND
14302: IFFALSE 14318
// SetAchievementEX ( achiv , missionNumber ) ;
14304: LD_VAR 0 7
14308: PPUSH
14309: LD_VAR 0 2
14313: PPUSH
14314: CALL_OW 564
// end ;
14318: LD_VAR 0 6
14322: RET
// export function SA_BehemothConstructed ; begin
14323: LD_INT 0
14325: PPUSH
// SetAchievement ( ACH_SMC ) ;
14326: LD_STRING ACH_SMC
14328: PPUSH
14329: CALL_OW 543
// end ;
14333: LD_VAR 0 1
14337: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
14338: LD_VAR 0 2
14342: PUSH
14343: LD_INT 1
14345: DOUBLE
14346: EQUAL
14347: IFTRUE 14351
14349: GO 14358
14351: POP
// HackUnlimitedResources ; 2 :
14352: CALL 14542 0 0
14356: GO 14539
14358: LD_INT 2
14360: DOUBLE
14361: EQUAL
14362: IFTRUE 14366
14364: GO 14373
14366: POP
// HackSetLevel10 ; 3 :
14367: CALL 14675 0 0
14371: GO 14539
14373: LD_INT 3
14375: DOUBLE
14376: EQUAL
14377: IFTRUE 14381
14379: GO 14388
14381: POP
// HackSetLevel10YourUnits ; 4 :
14382: CALL 14760 0 0
14386: GO 14539
14388: LD_INT 4
14390: DOUBLE
14391: EQUAL
14392: IFTRUE 14396
14394: GO 14418
14396: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
14397: LD_VAR 0 3
14401: PPUSH
14402: LD_VAR 0 4
14406: PPUSH
14407: LD_VAR 0 5
14411: PPUSH
14412: CALL 14850 0 3
14416: GO 14539
14418: LD_INT 5
14420: DOUBLE
14421: EQUAL
14422: IFTRUE 14426
14424: GO 14433
14426: POP
// HackSpawnVehicle ; 6 :
14427: CALL 14911 0 0
14431: GO 14539
14433: LD_INT 6
14435: DOUBLE
14436: EQUAL
14437: IFTRUE 14441
14439: GO 14448
14441: POP
// HackInvincible ; 7 :
14442: CALL 15986 0 0
14446: GO 14539
14448: LD_INT 7
14450: DOUBLE
14451: EQUAL
14452: IFTRUE 14456
14454: GO 14463
14456: POP
// HackInvisible ; 8 :
14457: CALL 16097 0 0
14461: GO 14539
14463: LD_INT 8
14465: DOUBLE
14466: EQUAL
14467: IFTRUE 14471
14469: GO 14478
14471: POP
// HackChangeYourSide ; 9 :
14472: CALL 16154 0 0
14476: GO 14539
14478: LD_INT 9
14480: DOUBLE
14481: EQUAL
14482: IFTRUE 14486
14484: GO 14493
14486: POP
// HackChangeUnitSide ; 10 :
14487: CALL 16196 0 0
14491: GO 14539
14493: LD_INT 10
14495: DOUBLE
14496: EQUAL
14497: IFTRUE 14501
14499: GO 14508
14501: POP
// HackFog ; 11 :
14502: CALL 16297 0 0
14506: GO 14539
14508: LD_INT 11
14510: DOUBLE
14511: EQUAL
14512: IFTRUE 14516
14514: GO 14523
14516: POP
// HackApeman ; 12 :
14517: CALL 16312 0 0
14521: GO 14539
14523: LD_INT 12
14525: DOUBLE
14526: EQUAL
14527: IFTRUE 14531
14529: GO 14538
14531: POP
// HackBoom ; end ;
14532: CALL 16397 0 0
14536: GO 14539
14538: POP
// end ;
14539: PPOPN 6
14541: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
14542: LD_INT 0
14544: PPUSH
14545: PPUSH
14546: PPUSH
14547: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14548: LD_ADDR_VAR 0 4
14552: PUSH
14553: LD_INT 22
14555: PUSH
14556: LD_OWVAR 2
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PUSH
14565: LD_INT 2
14567: PUSH
14568: LD_INT 30
14570: PUSH
14571: LD_INT 0
14573: PUSH
14574: EMPTY
14575: LIST
14576: LIST
14577: PUSH
14578: LD_INT 30
14580: PUSH
14581: LD_INT 1
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: PUSH
14588: EMPTY
14589: LIST
14590: LIST
14591: LIST
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PPUSH
14597: CALL_OW 69
14601: ST_TO_ADDR
// if not tmp then
14602: LD_VAR 0 4
14606: NOT
14607: IFFALSE 14611
// exit ;
14609: GO 14670
// for i in tmp do
14611: LD_ADDR_VAR 0 2
14615: PUSH
14616: LD_VAR 0 4
14620: PUSH
14621: FOR_IN
14622: IFFALSE 14668
// for j = 1 to 3 do
14624: LD_ADDR_VAR 0 3
14628: PUSH
14629: DOUBLE
14630: LD_INT 1
14632: DEC
14633: ST_TO_ADDR
14634: LD_INT 3
14636: PUSH
14637: FOR_TO
14638: IFFALSE 14664
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
14640: LD_VAR 0 2
14644: PPUSH
14645: CALL_OW 274
14649: PPUSH
14650: LD_VAR 0 3
14654: PPUSH
14655: LD_INT 99999
14657: PPUSH
14658: CALL_OW 277
14662: GO 14637
14664: POP
14665: POP
14666: GO 14621
14668: POP
14669: POP
// end ;
14670: LD_VAR 0 1
14674: RET
// export function HackSetLevel10 ; var i , j ; begin
14675: LD_INT 0
14677: PPUSH
14678: PPUSH
14679: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14680: LD_ADDR_VAR 0 2
14684: PUSH
14685: LD_INT 21
14687: PUSH
14688: LD_INT 1
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PPUSH
14695: CALL_OW 69
14699: PUSH
14700: FOR_IN
14701: IFFALSE 14753
// if IsSelected ( i ) then
14703: LD_VAR 0 2
14707: PPUSH
14708: CALL_OW 306
14712: IFFALSE 14751
// begin for j := 1 to 4 do
14714: LD_ADDR_VAR 0 3
14718: PUSH
14719: DOUBLE
14720: LD_INT 1
14722: DEC
14723: ST_TO_ADDR
14724: LD_INT 4
14726: PUSH
14727: FOR_TO
14728: IFFALSE 14749
// SetSkill ( i , j , 10 ) ;
14730: LD_VAR 0 2
14734: PPUSH
14735: LD_VAR 0 3
14739: PPUSH
14740: LD_INT 10
14742: PPUSH
14743: CALL_OW 237
14747: GO 14727
14749: POP
14750: POP
// end ;
14751: GO 14700
14753: POP
14754: POP
// end ;
14755: LD_VAR 0 1
14759: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
14760: LD_INT 0
14762: PPUSH
14763: PPUSH
14764: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
14765: LD_ADDR_VAR 0 2
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_OWVAR 2
14777: PUSH
14778: EMPTY
14779: LIST
14780: LIST
14781: PUSH
14782: LD_INT 21
14784: PUSH
14785: LD_INT 1
14787: PUSH
14788: EMPTY
14789: LIST
14790: LIST
14791: PUSH
14792: EMPTY
14793: LIST
14794: LIST
14795: PPUSH
14796: CALL_OW 69
14800: PUSH
14801: FOR_IN
14802: IFFALSE 14843
// begin for j := 1 to 4 do
14804: LD_ADDR_VAR 0 3
14808: PUSH
14809: DOUBLE
14810: LD_INT 1
14812: DEC
14813: ST_TO_ADDR
14814: LD_INT 4
14816: PUSH
14817: FOR_TO
14818: IFFALSE 14839
// SetSkill ( i , j , 10 ) ;
14820: LD_VAR 0 2
14824: PPUSH
14825: LD_VAR 0 3
14829: PPUSH
14830: LD_INT 10
14832: PPUSH
14833: CALL_OW 237
14837: GO 14817
14839: POP
14840: POP
// end ;
14841: GO 14801
14843: POP
14844: POP
// end ;
14845: LD_VAR 0 1
14849: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
14850: LD_INT 0
14852: PPUSH
// uc_side := your_side ;
14853: LD_ADDR_OWVAR 20
14857: PUSH
14858: LD_OWVAR 2
14862: ST_TO_ADDR
// uc_nation := nation ;
14863: LD_ADDR_OWVAR 21
14867: PUSH
14868: LD_VAR 0 1
14872: ST_TO_ADDR
// InitHc ;
14873: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
14877: LD_INT 0
14879: PPUSH
14880: LD_VAR 0 2
14884: PPUSH
14885: LD_VAR 0 3
14889: PPUSH
14890: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
14894: CALL_OW 44
14898: PPUSH
14899: LD_INT 1
14901: PPUSH
14902: CALL_OW 51
// end ;
14906: LD_VAR 0 4
14910: RET
// export function HackSpawnVehicle ; begin
14911: LD_INT 0
14913: PPUSH
// uc_side := your_side ;
14914: LD_ADDR_OWVAR 20
14918: PUSH
14919: LD_OWVAR 2
14923: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
14924: LD_ADDR_OWVAR 21
14928: PUSH
14929: LD_INT 1
14931: PPUSH
14932: LD_INT 3
14934: PPUSH
14935: CALL_OW 12
14939: ST_TO_ADDR
// InitVc ;
14940: CALL_OW 20
// case uc_nation of 1 :
14944: LD_OWVAR 21
14948: PUSH
14949: LD_INT 1
14951: DOUBLE
14952: EQUAL
14953: IFTRUE 14957
14955: GO 15264
14957: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14958: LD_ADDR_OWVAR 37
14962: PUSH
14963: LD_INT 1
14965: PUSH
14966: LD_INT 2
14968: PUSH
14969: LD_INT 3
14971: PUSH
14972: LD_INT 4
14974: PUSH
14975: LD_INT 5
14977: PUSH
14978: LD_INT 11
14980: PUSH
14981: LD_INT 12
14983: PUSH
14984: LD_INT 13
14986: PUSH
14987: LD_INT 14
14989: PUSH
14990: LD_INT 21
14992: PUSH
14993: LD_INT 22
14995: PUSH
14996: LD_INT 23
14998: PUSH
14999: LD_INT 24
15001: PUSH
15002: EMPTY
15003: LIST
15004: LIST
15005: LIST
15006: LIST
15007: LIST
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: LIST
15016: PUSH
15017: LD_INT 1
15019: PPUSH
15020: LD_INT 13
15022: PPUSH
15023: CALL_OW 12
15027: ARRAY
15028: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
15029: LD_ADDR_OWVAR 38
15033: PUSH
15034: LD_INT 1
15036: PUSH
15037: LD_INT 3
15039: PUSH
15040: LD_INT 4
15042: PUSH
15043: LD_INT 5
15045: PUSH
15046: EMPTY
15047: LIST
15048: LIST
15049: LIST
15050: LIST
15051: PUSH
15052: LD_INT 1
15054: PPUSH
15055: LD_INT 4
15057: PPUSH
15058: CALL_OW 12
15062: ARRAY
15063: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
15064: LD_ADDR_OWVAR 39
15068: PUSH
15069: LD_INT 1
15071: PUSH
15072: LD_INT 2
15074: PUSH
15075: LD_INT 3
15077: PUSH
15078: EMPTY
15079: LIST
15080: LIST
15081: LIST
15082: PUSH
15083: LD_INT 1
15085: PPUSH
15086: LD_INT 3
15088: PPUSH
15089: CALL_OW 12
15093: ARRAY
15094: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
15095: LD_ADDR_OWVAR 40
15099: PUSH
15100: LD_INT 14
15102: PUSH
15103: LD_INT 12
15105: PUSH
15106: LD_INT 13
15108: PUSH
15109: LD_INT 5
15111: PUSH
15112: LD_INT 10
15114: PUSH
15115: LD_INT 4
15117: PUSH
15118: LD_INT 6
15120: PUSH
15121: LD_INT 9
15123: PUSH
15124: LD_INT 3
15126: PUSH
15127: LD_INT 2
15129: PUSH
15130: LD_INT 11
15132: PUSH
15133: LD_INT 7
15135: PUSH
15136: LD_INT 8
15138: PUSH
15139: LD_INT 15
15141: PUSH
15142: LD_INT 32
15144: PUSH
15145: LD_INT 31
15147: PUSH
15148: LD_INT 24
15150: PUSH
15151: LD_INT 26
15153: PUSH
15154: LD_INT 25
15156: PUSH
15157: LD_INT 27
15159: PUSH
15160: LD_INT 23
15162: PUSH
15163: LD_INT 22
15165: PUSH
15166: LD_INT 30
15168: PUSH
15169: LD_INT 28
15171: PUSH
15172: LD_INT 29
15174: PUSH
15175: LD_INT 53
15177: PUSH
15178: LD_INT 51
15180: PUSH
15181: LD_INT 52
15183: PUSH
15184: LD_INT 43
15186: PUSH
15187: LD_INT 44
15189: PUSH
15190: LD_INT 46
15192: PUSH
15193: LD_INT 42
15195: PUSH
15196: LD_INT 47
15198: PUSH
15199: LD_INT 45
15201: PUSH
15202: LD_INT 48
15204: PUSH
15205: LD_INT 55
15207: PUSH
15208: LD_INT 49
15210: PUSH
15211: EMPTY
15212: LIST
15213: LIST
15214: LIST
15215: LIST
15216: LIST
15217: LIST
15218: LIST
15219: LIST
15220: LIST
15221: LIST
15222: LIST
15223: LIST
15224: LIST
15225: LIST
15226: LIST
15227: LIST
15228: LIST
15229: LIST
15230: LIST
15231: LIST
15232: LIST
15233: LIST
15234: LIST
15235: LIST
15236: LIST
15237: LIST
15238: LIST
15239: LIST
15240: LIST
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 1
15252: PPUSH
15253: LD_INT 37
15255: PPUSH
15256: CALL_OW 12
15260: ARRAY
15261: ST_TO_ADDR
// end ; 2 :
15262: GO 15895
15264: LD_INT 2
15266: DOUBLE
15267: EQUAL
15268: IFTRUE 15272
15270: GO 15579
15272: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
15273: LD_ADDR_OWVAR 37
15277: PUSH
15278: LD_INT 1
15280: PUSH
15281: LD_INT 2
15283: PUSH
15284: LD_INT 3
15286: PUSH
15287: LD_INT 4
15289: PUSH
15290: LD_INT 5
15292: PUSH
15293: LD_INT 11
15295: PUSH
15296: LD_INT 12
15298: PUSH
15299: LD_INT 13
15301: PUSH
15302: LD_INT 14
15304: PUSH
15305: LD_INT 21
15307: PUSH
15308: LD_INT 22
15310: PUSH
15311: LD_INT 23
15313: PUSH
15314: LD_INT 24
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: LIST
15322: LIST
15323: LIST
15324: LIST
15325: LIST
15326: LIST
15327: LIST
15328: LIST
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 1
15334: PPUSH
15335: LD_INT 13
15337: PPUSH
15338: CALL_OW 12
15342: ARRAY
15343: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
15344: LD_ADDR_OWVAR 38
15348: PUSH
15349: LD_INT 1
15351: PUSH
15352: LD_INT 3
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: LD_INT 5
15360: PUSH
15361: EMPTY
15362: LIST
15363: LIST
15364: LIST
15365: LIST
15366: PUSH
15367: LD_INT 1
15369: PPUSH
15370: LD_INT 4
15372: PPUSH
15373: CALL_OW 12
15377: ARRAY
15378: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
15379: LD_ADDR_OWVAR 39
15383: PUSH
15384: LD_INT 1
15386: PUSH
15387: LD_INT 2
15389: PUSH
15390: LD_INT 3
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: PUSH
15398: LD_INT 1
15400: PPUSH
15401: LD_INT 3
15403: PPUSH
15404: CALL_OW 12
15408: ARRAY
15409: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
15410: LD_ADDR_OWVAR 40
15414: PUSH
15415: LD_INT 14
15417: PUSH
15418: LD_INT 12
15420: PUSH
15421: LD_INT 13
15423: PUSH
15424: LD_INT 5
15426: PUSH
15427: LD_INT 10
15429: PUSH
15430: LD_INT 4
15432: PUSH
15433: LD_INT 6
15435: PUSH
15436: LD_INT 9
15438: PUSH
15439: LD_INT 3
15441: PUSH
15442: LD_INT 2
15444: PUSH
15445: LD_INT 11
15447: PUSH
15448: LD_INT 7
15450: PUSH
15451: LD_INT 8
15453: PUSH
15454: LD_INT 15
15456: PUSH
15457: LD_INT 32
15459: PUSH
15460: LD_INT 31
15462: PUSH
15463: LD_INT 24
15465: PUSH
15466: LD_INT 26
15468: PUSH
15469: LD_INT 25
15471: PUSH
15472: LD_INT 27
15474: PUSH
15475: LD_INT 23
15477: PUSH
15478: LD_INT 22
15480: PUSH
15481: LD_INT 30
15483: PUSH
15484: LD_INT 28
15486: PUSH
15487: LD_INT 29
15489: PUSH
15490: LD_INT 53
15492: PUSH
15493: LD_INT 51
15495: PUSH
15496: LD_INT 52
15498: PUSH
15499: LD_INT 43
15501: PUSH
15502: LD_INT 44
15504: PUSH
15505: LD_INT 46
15507: PUSH
15508: LD_INT 42
15510: PUSH
15511: LD_INT 47
15513: PUSH
15514: LD_INT 45
15516: PUSH
15517: LD_INT 48
15519: PUSH
15520: LD_INT 55
15522: PUSH
15523: LD_INT 49
15525: PUSH
15526: EMPTY
15527: LIST
15528: LIST
15529: LIST
15530: LIST
15531: LIST
15532: LIST
15533: LIST
15534: LIST
15535: LIST
15536: LIST
15537: LIST
15538: LIST
15539: LIST
15540: LIST
15541: LIST
15542: LIST
15543: LIST
15544: LIST
15545: LIST
15546: LIST
15547: LIST
15548: LIST
15549: LIST
15550: LIST
15551: LIST
15552: LIST
15553: LIST
15554: LIST
15555: LIST
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: PUSH
15565: LD_INT 1
15567: PPUSH
15568: LD_INT 37
15570: PPUSH
15571: CALL_OW 12
15575: ARRAY
15576: ST_TO_ADDR
// end ; 3 :
15577: GO 15895
15579: LD_INT 3
15581: DOUBLE
15582: EQUAL
15583: IFTRUE 15587
15585: GO 15894
15587: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
15588: LD_ADDR_OWVAR 37
15592: PUSH
15593: LD_INT 1
15595: PUSH
15596: LD_INT 2
15598: PUSH
15599: LD_INT 3
15601: PUSH
15602: LD_INT 4
15604: PUSH
15605: LD_INT 5
15607: PUSH
15608: LD_INT 11
15610: PUSH
15611: LD_INT 12
15613: PUSH
15614: LD_INT 13
15616: PUSH
15617: LD_INT 14
15619: PUSH
15620: LD_INT 21
15622: PUSH
15623: LD_INT 22
15625: PUSH
15626: LD_INT 23
15628: PUSH
15629: LD_INT 24
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 1
15649: PPUSH
15650: LD_INT 13
15652: PPUSH
15653: CALL_OW 12
15657: ARRAY
15658: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
15659: LD_ADDR_OWVAR 38
15663: PUSH
15664: LD_INT 1
15666: PUSH
15667: LD_INT 3
15669: PUSH
15670: LD_INT 4
15672: PUSH
15673: LD_INT 5
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: LIST
15680: LIST
15681: PUSH
15682: LD_INT 1
15684: PPUSH
15685: LD_INT 4
15687: PPUSH
15688: CALL_OW 12
15692: ARRAY
15693: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
15694: LD_ADDR_OWVAR 39
15698: PUSH
15699: LD_INT 1
15701: PUSH
15702: LD_INT 2
15704: PUSH
15705: LD_INT 3
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 1
15715: PPUSH
15716: LD_INT 3
15718: PPUSH
15719: CALL_OW 12
15723: ARRAY
15724: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
15725: LD_ADDR_OWVAR 40
15729: PUSH
15730: LD_INT 14
15732: PUSH
15733: LD_INT 12
15735: PUSH
15736: LD_INT 13
15738: PUSH
15739: LD_INT 5
15741: PUSH
15742: LD_INT 10
15744: PUSH
15745: LD_INT 4
15747: PUSH
15748: LD_INT 6
15750: PUSH
15751: LD_INT 9
15753: PUSH
15754: LD_INT 3
15756: PUSH
15757: LD_INT 2
15759: PUSH
15760: LD_INT 11
15762: PUSH
15763: LD_INT 7
15765: PUSH
15766: LD_INT 8
15768: PUSH
15769: LD_INT 15
15771: PUSH
15772: LD_INT 32
15774: PUSH
15775: LD_INT 31
15777: PUSH
15778: LD_INT 24
15780: PUSH
15781: LD_INT 26
15783: PUSH
15784: LD_INT 25
15786: PUSH
15787: LD_INT 27
15789: PUSH
15790: LD_INT 23
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_INT 30
15798: PUSH
15799: LD_INT 28
15801: PUSH
15802: LD_INT 29
15804: PUSH
15805: LD_INT 53
15807: PUSH
15808: LD_INT 51
15810: PUSH
15811: LD_INT 52
15813: PUSH
15814: LD_INT 43
15816: PUSH
15817: LD_INT 44
15819: PUSH
15820: LD_INT 46
15822: PUSH
15823: LD_INT 42
15825: PUSH
15826: LD_INT 47
15828: PUSH
15829: LD_INT 45
15831: PUSH
15832: LD_INT 48
15834: PUSH
15835: LD_INT 55
15837: PUSH
15838: LD_INT 49
15840: PUSH
15841: EMPTY
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: LIST
15848: LIST
15849: LIST
15850: LIST
15851: LIST
15852: LIST
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: LIST
15862: LIST
15863: LIST
15864: LIST
15865: LIST
15866: LIST
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: LIST
15872: LIST
15873: LIST
15874: LIST
15875: LIST
15876: LIST
15877: LIST
15878: LIST
15879: PUSH
15880: LD_INT 1
15882: PPUSH
15883: LD_INT 37
15885: PPUSH
15886: CALL_OW 12
15890: ARRAY
15891: ST_TO_ADDR
// end ; end ;
15892: GO 15895
15894: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15895: CALL_OW 45
15899: PPUSH
15900: LD_INT 1
15902: PPUSH
15903: CALL_OW 51
// end ;
15907: LD_VAR 0 1
15911: RET
// export invincible ; every 1 do
15912: GO 15914
15914: DISABLE
// invincible := [ ] ;
15915: LD_ADDR_EXP 57
15919: PUSH
15920: EMPTY
15921: ST_TO_ADDR
15922: END
// every 10 do var i ;
15923: GO 15925
15925: DISABLE
15926: LD_INT 0
15928: PPUSH
// begin enable ;
15929: ENABLE
// if not invincible then
15930: LD_EXP 57
15934: NOT
15935: IFFALSE 15939
// exit ;
15937: GO 15983
// for i in invincible do
15939: LD_ADDR_VAR 0 1
15943: PUSH
15944: LD_EXP 57
15948: PUSH
15949: FOR_IN
15950: IFFALSE 15981
// if GetLives ( i ) < 1000 then
15952: LD_VAR 0 1
15956: PPUSH
15957: CALL_OW 256
15961: PUSH
15962: LD_INT 1000
15964: LESS
15965: IFFALSE 15979
// SetLives ( i , 1000 ) ;
15967: LD_VAR 0 1
15971: PPUSH
15972: LD_INT 1000
15974: PPUSH
15975: CALL_OW 234
15979: GO 15949
15981: POP
15982: POP
// end ;
15983: PPOPN 1
15985: END
// export function HackInvincible ; var i ; begin
15986: LD_INT 0
15988: PPUSH
15989: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
15990: LD_ADDR_VAR 0 2
15994: PUSH
15995: LD_INT 2
15997: PUSH
15998: LD_INT 21
16000: PUSH
16001: LD_INT 1
16003: PUSH
16004: EMPTY
16005: LIST
16006: LIST
16007: PUSH
16008: LD_INT 21
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: LIST
16022: PPUSH
16023: CALL_OW 69
16027: PUSH
16028: FOR_IN
16029: IFFALSE 16090
// if IsSelected ( i ) then
16031: LD_VAR 0 2
16035: PPUSH
16036: CALL_OW 306
16040: IFFALSE 16088
// begin if i in invincible then
16042: LD_VAR 0 2
16046: PUSH
16047: LD_EXP 57
16051: IN
16052: IFFALSE 16072
// invincible := invincible diff i else
16054: LD_ADDR_EXP 57
16058: PUSH
16059: LD_EXP 57
16063: PUSH
16064: LD_VAR 0 2
16068: DIFF
16069: ST_TO_ADDR
16070: GO 16088
// invincible := invincible union i ;
16072: LD_ADDR_EXP 57
16076: PUSH
16077: LD_EXP 57
16081: PUSH
16082: LD_VAR 0 2
16086: UNION
16087: ST_TO_ADDR
// end ;
16088: GO 16028
16090: POP
16091: POP
// end ;
16092: LD_VAR 0 1
16096: RET
// export function HackInvisible ; var i , j ; begin
16097: LD_INT 0
16099: PPUSH
16100: PPUSH
16101: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
16102: LD_ADDR_VAR 0 2
16106: PUSH
16107: LD_INT 21
16109: PUSH
16110: LD_INT 1
16112: PUSH
16113: EMPTY
16114: LIST
16115: LIST
16116: PPUSH
16117: CALL_OW 69
16121: PUSH
16122: FOR_IN
16123: IFFALSE 16147
// if IsSelected ( i ) then
16125: LD_VAR 0 2
16129: PPUSH
16130: CALL_OW 306
16134: IFFALSE 16145
// begin ComForceInvisible ( i ) ;
16136: LD_VAR 0 2
16140: PPUSH
16141: CALL_OW 496
// end ;
16145: GO 16122
16147: POP
16148: POP
// end ;
16149: LD_VAR 0 1
16153: RET
// export function HackChangeYourSide ; begin
16154: LD_INT 0
16156: PPUSH
// if your_side = 8 then
16157: LD_OWVAR 2
16161: PUSH
16162: LD_INT 8
16164: EQUAL
16165: IFFALSE 16177
// your_side := 0 else
16167: LD_ADDR_OWVAR 2
16171: PUSH
16172: LD_INT 0
16174: ST_TO_ADDR
16175: GO 16191
// your_side := your_side + 1 ;
16177: LD_ADDR_OWVAR 2
16181: PUSH
16182: LD_OWVAR 2
16186: PUSH
16187: LD_INT 1
16189: PLUS
16190: ST_TO_ADDR
// end ;
16191: LD_VAR 0 1
16195: RET
// export function HackChangeUnitSide ; var i , j ; begin
16196: LD_INT 0
16198: PPUSH
16199: PPUSH
16200: PPUSH
// for i in all_units do
16201: LD_ADDR_VAR 0 2
16205: PUSH
16206: LD_OWVAR 3
16210: PUSH
16211: FOR_IN
16212: IFFALSE 16290
// if IsSelected ( i ) then
16214: LD_VAR 0 2
16218: PPUSH
16219: CALL_OW 306
16223: IFFALSE 16288
// begin j := GetSide ( i ) ;
16225: LD_ADDR_VAR 0 3
16229: PUSH
16230: LD_VAR 0 2
16234: PPUSH
16235: CALL_OW 255
16239: ST_TO_ADDR
// if j = 8 then
16240: LD_VAR 0 3
16244: PUSH
16245: LD_INT 8
16247: EQUAL
16248: IFFALSE 16260
// j := 0 else
16250: LD_ADDR_VAR 0 3
16254: PUSH
16255: LD_INT 0
16257: ST_TO_ADDR
16258: GO 16274
// j := j + 1 ;
16260: LD_ADDR_VAR 0 3
16264: PUSH
16265: LD_VAR 0 3
16269: PUSH
16270: LD_INT 1
16272: PLUS
16273: ST_TO_ADDR
// SetSide ( i , j ) ;
16274: LD_VAR 0 2
16278: PPUSH
16279: LD_VAR 0 3
16283: PPUSH
16284: CALL_OW 235
// end ;
16288: GO 16211
16290: POP
16291: POP
// end ;
16292: LD_VAR 0 1
16296: RET
// export function HackFog ; begin
16297: LD_INT 0
16299: PPUSH
// FogOff ( true ) ;
16300: LD_INT 1
16302: PPUSH
16303: CALL_OW 344
// end ;
16307: LD_VAR 0 1
16311: RET
// export function HackApeman ; begin
16312: LD_INT 0
16314: PPUSH
// uc_side := your_side ;
16315: LD_ADDR_OWVAR 20
16319: PUSH
16320: LD_OWVAR 2
16324: ST_TO_ADDR
// uc_nation := 0 ;
16325: LD_ADDR_OWVAR 21
16329: PUSH
16330: LD_INT 0
16332: ST_TO_ADDR
// hc_name :=  ;
16333: LD_ADDR_OWVAR 26
16337: PUSH
16338: LD_STRING 
16340: ST_TO_ADDR
// hc_gallery :=  ;
16341: LD_ADDR_OWVAR 33
16345: PUSH
16346: LD_STRING 
16348: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
16349: LD_ADDR_OWVAR 31
16353: PUSH
16354: LD_INT 0
16356: PUSH
16357: LD_INT 0
16359: PUSH
16360: LD_INT 0
16362: PUSH
16363: LD_INT 0
16365: PUSH
16366: EMPTY
16367: LIST
16368: LIST
16369: LIST
16370: LIST
16371: ST_TO_ADDR
// hc_class := class_apeman ;
16372: LD_ADDR_OWVAR 28
16376: PUSH
16377: LD_INT 12
16379: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
16380: CALL_OW 44
16384: PPUSH
16385: LD_INT 1
16387: PPUSH
16388: CALL_OW 51
// end ;
16392: LD_VAR 0 1
16396: RET
// export function HackBoom ; begin
16397: LD_INT 0
16399: PPUSH
// uc_side := your_side ;
16400: LD_ADDR_OWVAR 20
16404: PUSH
16405: LD_OWVAR 2
16409: ST_TO_ADDR
// uc_nation := 1 ;
16410: LD_ADDR_OWVAR 21
16414: PUSH
16415: LD_INT 1
16417: ST_TO_ADDR
// vc_chassis := us_morphling ;
16418: LD_ADDR_OWVAR 37
16422: PUSH
16423: LD_INT 5
16425: ST_TO_ADDR
// vc_engine := engine_siberite ;
16426: LD_ADDR_OWVAR 39
16430: PUSH
16431: LD_INT 3
16433: ST_TO_ADDR
// vc_control := control_computer ;
16434: LD_ADDR_OWVAR 38
16438: PUSH
16439: LD_INT 3
16441: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
16442: LD_ADDR_OWVAR 40
16446: PUSH
16447: LD_INT 8
16449: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
16450: CALL_OW 45
16454: PPUSH
16455: LD_INT 1
16457: PPUSH
16458: CALL_OW 51
// end ;
16462: LD_VAR 0 1
16466: RET
