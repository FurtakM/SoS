// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 268 0 0
// PrepareNature ;
  24: CALL 9240 0 0
// PrepareRussian ;
  28: CALL 8733 0 0
// PrepareAmericans ;
  32: CALL 8306 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 6
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 10
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 12
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 13
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 11
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 16
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 17
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 18
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 19
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 14
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 20
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// lostComradesCounter = 0 ;
 164: LD_ADDR_EXP 21
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 172: LD_ADDR_EXP 9
 176: PUSH
 177: LD_INT 999
 179: PUSH
 180: LD_INT 999
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: ST_TO_ADDR
// apemanWithRadio = FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 187: LD_ADDR_EXP 8
 191: PUSH
 192: LD_INT 22
 194: PUSH
 195: LD_INT 0
 197: PUSH
 198: EMPTY
 199: LIST
 200: LIST
 201: PUSH
 202: LD_INT 25
 204: PUSH
 205: LD_INT 12
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: PUSH
 212: EMPTY
 213: LIST
 214: LIST
 215: PPUSH
 216: CALL_OW 69
 220: PUSH
 221: LD_INT 1
 223: PPUSH
 224: LD_INT 22
 226: PUSH
 227: LD_INT 0
 229: PUSH
 230: EMPTY
 231: LIST
 232: LIST
 233: PUSH
 234: LD_INT 25
 236: PUSH
 237: LD_INT 12
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PPUSH
 248: CALL_OW 69
 252: PPUSH
 253: CALL_OW 12
 257: ARRAY
 258: ST_TO_ADDR
// MissionIntro ;
 259: CALL 750 0 0
// end ; end_of_file
 263: LD_VAR 0 1
 267: RET
// export function InitMapConfig ; begin
 268: LD_INT 0
 270: PPUSH
// BaseMapConfig ;
 271: CALL 284 0 0
// MissionMapConfig ;
 275: CALL 370 0 0
// end ;
 279: LD_VAR 0 1
 283: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 284: LD_INT 0
 286: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 287: LD_ADDR_EXP 22
 291: PUSH
 292: LD_INT 5
 294: PUSH
 295: LD_INT 4
 297: PUSH
 298: LD_INT 2
 300: PUSH
 301: LD_INT 2
 303: PUSH
 304: EMPTY
 305: LIST
 306: LIST
 307: LIST
 308: LIST
 309: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 310: LD_ADDR_EXP 23
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: LD_INT 2
 320: PUSH
 321: LD_INT 2
 323: PUSH
 324: LD_INT 2
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: LIST
 331: LIST
 332: ST_TO_ADDR
// animalsAgression = 0 ;
 333: LD_ADDR_EXP 24
 337: PUSH
 338: LD_INT 0
 340: ST_TO_ADDR
// debugMode = 0 ;
 341: LD_ADDR_EXP 27
 345: PUSH
 346: LD_INT 0
 348: ST_TO_ADDR
// missionPrefix = 01_ ;
 349: LD_ADDR_EXP 25
 353: PUSH
 354: LD_STRING 01_
 356: ST_TO_ADDR
// previousMissionPrefix =  ;
 357: LD_ADDR_EXP 26
 361: PUSH
 362: LD_STRING 
 364: ST_TO_ADDR
// end ;
 365: LD_VAR 0 1
 369: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions ; function MissionMapConfig ; begin
 370: LD_INT 0
 372: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 373: LD_ADDR_EXP 28
 377: PUSH
 378: LD_INT 800
 380: PUSH
 381: LD_INT 900
 383: PUSH
 384: LD_INT 950
 386: PUSH
 387: EMPTY
 388: LIST
 389: LIST
 390: LIST
 391: PUSH
 392: LD_OWVAR 67
 396: ARRAY
 397: ST_TO_ADDR
// apeAgression = rand ( - 5 , 5 ) * Difficulty ;
 398: LD_ADDR_EXP 29
 402: PUSH
 403: LD_INT 5
 405: NEG
 406: PPUSH
 407: LD_INT 5
 409: PPUSH
 410: CALL_OW 12
 414: PUSH
 415: LD_OWVAR 67
 419: MUL
 420: ST_TO_ADDR
// amApeAmount = [ 3 , 4 , 5 ] [ Difficulty ] ;
 421: LD_ADDR_EXP 30
 425: PUSH
 426: LD_INT 3
 428: PUSH
 429: LD_INT 4
 431: PUSH
 432: LD_INT 5
 434: PUSH
 435: EMPTY
 436: LIST
 437: LIST
 438: LIST
 439: PUSH
 440: LD_OWVAR 67
 444: ARRAY
 445: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 446: LD_ADDR_EXP 31
 450: PUSH
 451: LD_INT 0
 453: PUSH
 454: LD_INT 1
 456: PUSH
 457: LD_INT 2
 459: PUSH
 460: EMPTY
 461: LIST
 462: LIST
 463: LIST
 464: PUSH
 465: LD_OWVAR 67
 469: ARRAY
 470: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 471: LD_ADDR_EXP 32
 475: PUSH
 476: LD_INT 78
 478: PUSH
 479: LD_INT 87
 481: PUSH
 482: EMPTY
 483: LIST
 484: LIST
 485: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 15 , 7 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 486: LD_ADDR_EXP 33
 490: PUSH
 491: LD_INT 15
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 99
 503: PUSH
 504: LD_INT 7
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: LD_INT 131
 513: PUSH
 514: LD_INT 81
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: LIST
 525: ST_TO_ADDR
// end ;
 526: LD_VAR 0 1
 530: RET
// every 0 0$1 trigger debugMode do var i ;
 531: LD_EXP 27
 535: IFFALSE 747
 537: GO 539
 539: DISABLE
 540: LD_INT 0
 542: PPUSH
// begin enable ;
 543: ENABLE
// FogOff ( your_side ) ;
 544: LD_OWVAR 2
 548: PPUSH
 549: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 553: LD_ADDR_VAR 0 1
 557: PUSH
 558: LD_INT 22
 560: PUSH
 561: LD_OWVAR 2
 565: PUSH
 566: EMPTY
 567: LIST
 568: LIST
 569: PUSH
 570: LD_INT 2
 572: PUSH
 573: LD_INT 21
 575: PUSH
 576: LD_INT 1
 578: PUSH
 579: EMPTY
 580: LIST
 581: LIST
 582: PUSH
 583: LD_INT 21
 585: PUSH
 586: LD_INT 2
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: PUSH
 593: EMPTY
 594: LIST
 595: LIST
 596: LIST
 597: PUSH
 598: EMPTY
 599: LIST
 600: LIST
 601: PPUSH
 602: CALL_OW 69
 606: PUSH
 607: FOR_IN
 608: IFFALSE 624
// SetLives ( i , 1000 ) ;
 610: LD_VAR 0 1
 614: PPUSH
 615: LD_INT 1000
 617: PPUSH
 618: CALL_OW 234
 622: GO 607
 624: POP
 625: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 626: LD_ADDR_VAR 0 1
 630: PUSH
 631: LD_INT 22
 633: PUSH
 634: LD_OWVAR 2
 638: PUSH
 639: EMPTY
 640: LIST
 641: LIST
 642: PUSH
 643: LD_INT 2
 645: PUSH
 646: LD_INT 30
 648: PUSH
 649: LD_INT 0
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: PUSH
 656: LD_INT 30
 658: PUSH
 659: LD_INT 1
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PPUSH
 675: CALL_OW 69
 679: PUSH
 680: FOR_IN
 681: IFFALSE 745
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 683: LD_VAR 0 1
 687: PPUSH
 688: CALL_OW 274
 692: PPUSH
 693: LD_INT 1
 695: PPUSH
 696: LD_INT 9999
 698: PPUSH
 699: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 703: LD_VAR 0 1
 707: PPUSH
 708: CALL_OW 274
 712: PPUSH
 713: LD_INT 2
 715: PPUSH
 716: LD_INT 9999
 718: PPUSH
 719: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 723: LD_VAR 0 1
 727: PPUSH
 728: CALL_OW 274
 732: PPUSH
 733: LD_INT 3
 735: PPUSH
 736: LD_INT 9999
 738: PPUSH
 739: CALL_OW 277
// end ;
 743: GO 680
 745: POP
 746: POP
// end ; end_of_file
 747: PPOPN 1
 749: END
// export function MissionIntro ; begin
 750: LD_INT 0
 752: PPUSH
// InGameOn ;
 753: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 757: LD_EXP 32
 761: PUSH
 762: LD_INT 1
 764: ARRAY
 765: PUSH
 766: LD_INT 8
 768: MINUS
 769: PPUSH
 770: LD_EXP 32
 774: PUSH
 775: LD_INT 2
 777: ARRAY
 778: PUSH
 779: LD_INT 8
 781: MINUS
 782: PPUSH
 783: CALL_OW 84
// wait ( 0 0$3 ) ;
 787: LD_INT 105
 789: PPUSH
 790: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 794: LD_EXP 38
 798: PPUSH
 799: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 803: LD_EXP 38
 807: PPUSH
 808: LD_STRING D1-Bur-1
 810: PPUSH
 811: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 815: LD_EXP 38
 819: PPUSH
 820: LD_INT 94
 822: PPUSH
 823: LD_INT 89
 825: PPUSH
 826: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 830: LD_INT 94
 832: PPUSH
 833: LD_INT 89
 835: PPUSH
 836: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 840: LD_EXP 38
 844: PPUSH
 845: LD_STRING D1-Bur-1a
 847: PPUSH
 848: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 852: LD_EXP 38
 856: PPUSH
 857: LD_INT 102
 859: PPUSH
 860: LD_INT 88
 862: PPUSH
 863: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 867: LD_INT 102
 869: PPUSH
 870: LD_INT 88
 872: PPUSH
 873: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 877: LD_EXP 38
 881: PPUSH
 882: LD_STRING D1-Bur-1b
 884: PPUSH
 885: CALL_OW 88
// InGameOff ;
 889: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 893: LD_STRING M1
 895: PPUSH
 896: CALL_OW 337
// SaveForQuickRestart ;
 900: CALL_OW 22
// introEnd = true ;
 904: LD_ADDR_EXP 3
 908: PUSH
 909: LD_INT 1
 911: ST_TO_ADDR
// end ;
 912: LD_VAR 0 1
 916: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
 917: LD_EXP 38
 921: PPUSH
 922: LD_INT 74
 924: PPUSH
 925: LD_INT 88
 927: PPUSH
 928: CALL_OW 297
 932: PUSH
 933: LD_INT 5
 935: LESS
 936: PUSH
 937: LD_EXP 3
 941: AND
 942: IFFALSE 967
 944: GO 946
 946: DISABLE
// begin spotWaterfall = true ;
 947: LD_ADDR_EXP 6
 951: PUSH
 952: LD_INT 1
 954: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
 955: LD_EXP 38
 959: PPUSH
 960: LD_STRING DWaterfall-Bur-1
 962: PPUSH
 963: CALL_OW 88
// end ;
 967: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
 968: LD_EXP 38
 972: PPUSH
 973: LD_INT 130
 975: PPUSH
 976: LD_INT 96
 978: PPUSH
 979: CALL_OW 297
 983: PUSH
 984: LD_INT 5
 986: LESS
 987: PUSH
 988: LD_EXP 3
 992: AND
 993: IFFALSE 1010
 995: GO 997
 997: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
 998: LD_EXP 38
1002: PPUSH
1003: LD_STRING DCorpse-Bur-1
1005: PPUSH
1006: CALL_OW 88
1010: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1011: LD_EXP 4
1015: NOT
1016: IFFALSE 1110
1018: GO 1020
1020: DISABLE
1021: LD_INT 0
1023: PPUSH
// begin enable ;
1024: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1025: LD_ADDR_VAR 0 1
1029: PUSH
1030: LD_INT 22
1032: PUSH
1033: LD_INT 0
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 25
1042: PUSH
1043: LD_INT 12
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PPUSH
1054: CALL_OW 69
1058: PUSH
1059: FOR_IN
1060: IFFALSE 1108
// if GetDistUnits ( apeman , Burlak ) < 7 then
1062: LD_VAR 0 1
1066: PPUSH
1067: LD_EXP 38
1071: PPUSH
1072: CALL_OW 296
1076: PUSH
1077: LD_INT 7
1079: LESS
1080: IFFALSE 1106
// begin apemansContact = true ;
1082: LD_ADDR_EXP 4
1086: PUSH
1087: LD_INT 1
1089: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1090: LD_EXP 38
1094: PPUSH
1095: LD_STRING D2-Bur-1
1097: PPUSH
1098: CALL_OW 88
// exit ;
1102: POP
1103: POP
1104: GO 1110
// end ;
1106: GO 1059
1108: POP
1109: POP
// end ;
1110: PPOPN 1
1112: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1113: LD_EXP 5
1117: NOT
1118: IFFALSE 1234
1120: GO 1122
1122: DISABLE
1123: LD_INT 0
1125: PPUSH
1126: PPUSH
// begin enable ;
1127: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1128: LD_ADDR_VAR 0 2
1132: PUSH
1133: LD_INT 22
1135: PUSH
1136: LD_INT 0
1138: PUSH
1139: EMPTY
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 25
1145: PUSH
1146: LD_INT 12
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PUSH
1153: EMPTY
1154: LIST
1155: LIST
1156: PPUSH
1157: CALL_OW 69
1161: PUSH
1162: FOR_IN
1163: IFFALSE 1232
// if Attacks ( apeman ) then
1165: LD_VAR 0 2
1169: PPUSH
1170: CALL_OW 320
1174: IFFALSE 1230
// if GetSide ( Attacks ( apeman ) ) = 3 then
1176: LD_VAR 0 2
1180: PPUSH
1181: CALL_OW 320
1185: PPUSH
1186: CALL_OW 255
1190: PUSH
1191: LD_INT 3
1193: EQUAL
1194: IFFALSE 1230
// begin attackedByApeman = true ;
1196: LD_ADDR_EXP 5
1200: PUSH
1201: LD_INT 1
1203: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1204: LD_ADDR_EXP 7
1208: PUSH
1209: LD_VAR 0 2
1213: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1214: LD_EXP 38
1218: PPUSH
1219: LD_STRING D2-Bur-1a
1221: PPUSH
1222: CALL_OW 88
// exit ;
1226: POP
1227: POP
1228: GO 1234
// end ;
1230: GO 1162
1232: POP
1233: POP
// end ;
1234: PPOPN 2
1236: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1237: LD_EXP 8
1241: PPUSH
1242: CALL_OW 303
1246: IFFALSE 1280
1248: GO 1250
1250: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1251: LD_ADDR_EXP 9
1255: PUSH
1256: LD_EXP 8
1260: PPUSH
1261: CALL_OW 250
1265: PUSH
1266: LD_EXP 8
1270: PPUSH
1271: CALL_OW 251
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: ST_TO_ADDR
1280: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1281: LD_EXP 8
1285: PPUSH
1286: CALL_OW 301
1290: PUSH
1291: LD_INT 3
1293: PPUSH
1294: LD_EXP 9
1298: PUSH
1299: LD_INT 1
1301: ARRAY
1302: PPUSH
1303: LD_EXP 9
1307: PUSH
1308: LD_INT 2
1310: ARRAY
1311: PPUSH
1312: CALL_OW 293
1316: AND
1317: IFFALSE 1718
1319: GO 1321
1321: DISABLE
1322: LD_INT 0
1324: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1325: LD_EXP 38
1329: PPUSH
1330: LD_STRING D2a-Bur-1
1332: PPUSH
1333: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1337: LD_INT 22
1339: PUSH
1340: LD_INT 3
1342: PUSH
1343: EMPTY
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 21
1349: PUSH
1350: LD_INT 1
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: EMPTY
1358: LIST
1359: LIST
1360: PPUSH
1361: CALL_OW 69
1365: PUSH
1366: LD_INT 1
1368: EQUAL
1369: IFFALSE 1385
// Say ( Burlak , D2a-Bur-2 ) else
1371: LD_EXP 38
1375: PPUSH
1376: LD_STRING D2a-Bur-2
1378: PPUSH
1379: CALL_OW 88
1383: GO 1718
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1385: LD_ADDR_VAR 0 1
1389: PUSH
1390: LD_INT 22
1392: PUSH
1393: LD_INT 3
1395: PUSH
1396: EMPTY
1397: LIST
1398: LIST
1399: PUSH
1400: LD_INT 21
1402: PUSH
1403: LD_INT 1
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PPUSH
1414: CALL_OW 69
1418: PPUSH
1419: LD_EXP 9
1423: PUSH
1424: LD_INT 1
1426: ARRAY
1427: PPUSH
1428: LD_EXP 9
1432: PUSH
1433: LD_INT 2
1435: ARRAY
1436: PPUSH
1437: CALL_OW 73
1441: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1442: LD_VAR 0 1
1446: PPUSH
1447: LD_EXP 9
1451: PUSH
1452: LD_INT 1
1454: ARRAY
1455: PPUSH
1456: LD_EXP 9
1460: PUSH
1461: LD_INT 2
1463: ARRAY
1464: PPUSH
1465: CALL_OW 111
// case nearUnit of Burlak :
1469: LD_VAR 0 1
1473: PUSH
1474: LD_EXP 38
1478: DOUBLE
1479: EQUAL
1480: IFTRUE 1484
1482: GO 1499
1484: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1485: LD_EXP 38
1489: PPUSH
1490: LD_STRING D3-Bur-2a
1492: PPUSH
1493: CALL_OW 88
1497: GO 1591
1499: LD_EXP 43
1503: DOUBLE
1504: EQUAL
1505: IFTRUE 1509
1507: GO 1524
1509: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1510: LD_EXP 43
1514: PPUSH
1515: LD_STRING D2a-Bel-1
1517: PPUSH
1518: CALL_OW 88
1522: GO 1591
1524: LD_EXP 45
1528: DOUBLE
1529: EQUAL
1530: IFTRUE 1534
1532: GO 1549
1534: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1535: LD_EXP 45
1539: PPUSH
1540: LD_STRING D2a-Kir-1
1542: PPUSH
1543: CALL_OW 88
1547: GO 1591
1549: POP
// if GetSex ( nearUnit ) = sex_male then
1550: LD_VAR 0 1
1554: PPUSH
1555: CALL_OW 258
1559: PUSH
1560: LD_INT 1
1562: EQUAL
1563: IFFALSE 1579
// Say ( nearUnit , D2a-RSol1-1 ) else
1565: LD_VAR 0 1
1569: PPUSH
1570: LD_STRING D2a-RSol1-1
1572: PPUSH
1573: CALL_OW 88
1577: GO 1591
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1579: LD_VAR 0 1
1583: PPUSH
1584: LD_STRING D2a-RFSol1-1
1586: PPUSH
1587: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1591: LD_EXP 46
1595: PPUSH
1596: CALL_OW 255
1600: PUSH
1601: LD_INT 3
1603: EQUAL
1604: PUSH
1605: LD_EXP 46
1609: PPUSH
1610: CALL_OW 302
1614: AND
1615: IFFALSE 1629
// Say ( Gnyevko , D2a-Gny-1 ) ;
1617: LD_EXP 46
1621: PPUSH
1622: LD_STRING D2a-Gny-1
1624: PPUSH
1625: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1629: LD_EXP 8
1633: PUSH
1634: LD_EXP 7
1638: EQUAL
1639: IFFALSE 1653
// Say ( Burlak , D3-Bur-2 ) ;
1641: LD_EXP 38
1645: PPUSH
1646: LD_STRING D3-Bur-2
1648: PPUSH
1649: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1653: LD_EXP 46
1657: PPUSH
1658: CALL_OW 255
1662: PUSH
1663: LD_INT 8
1665: EQUAL
1666: IFFALSE 1718
// begin Say ( Burlak , D12-Bur-1 ) ;
1668: LD_EXP 38
1672: PPUSH
1673: LD_STRING D12-Bur-1
1675: PPUSH
1676: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1680: LD_EXP 43
1684: PPUSH
1685: CALL_OW 255
1689: PUSH
1690: LD_INT 3
1692: EQUAL
1693: PUSH
1694: LD_EXP 43
1698: PPUSH
1699: CALL_OW 302
1703: AND
1704: IFFALSE 1718
// Say ( Belkov , D12-Bel-2 ) ;
1706: LD_EXP 43
1710: PPUSH
1711: LD_STRING D12-Bel-2
1713: PPUSH
1714: CALL_OW 88
// end ; end ; end ;
1718: PPOPN 1
1720: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1721: LD_INT 3
1723: PPUSH
1724: LD_EXP 46
1728: PPUSH
1729: CALL_OW 292
1733: IFFALSE 2257
1735: GO 1737
1737: DISABLE
1738: LD_INT 0
1740: PPUSH
1741: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1742: LD_EXP 46
1746: PPUSH
1747: CALL_OW 87
// DialogueOn ;
1751: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_INT 22
1762: PUSH
1763: LD_INT 3
1765: PUSH
1766: EMPTY
1767: LIST
1768: LIST
1769: PUSH
1770: LD_INT 21
1772: PUSH
1773: LD_INT 1
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PUSH
1780: EMPTY
1781: LIST
1782: LIST
1783: PPUSH
1784: CALL_OW 69
1788: PPUSH
1789: LD_EXP 46
1793: PPUSH
1794: CALL_OW 74
1798: ST_TO_ADDR
// if nearUnit = Burlak then
1799: LD_VAR 0 1
1803: PUSH
1804: LD_EXP 38
1808: EQUAL
1809: IFFALSE 2127
// begin Say ( Burlak , D3-Bur-1 ) ;
1811: LD_EXP 38
1815: PPUSH
1816: LD_STRING D3-Bur-1
1818: PPUSH
1819: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
1823: LD_EXP 46
1827: PPUSH
1828: LD_STRING D3-Gny-1
1830: PPUSH
1831: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
1835: LD_EXP 38
1839: PPUSH
1840: LD_STRING D3-Bur-2b
1842: PPUSH
1843: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
1847: LD_INT 22
1849: PUSH
1850: LD_INT 3
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: PUSH
1857: LD_INT 21
1859: PUSH
1860: LD_INT 1
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PUSH
1867: EMPTY
1868: LIST
1869: LIST
1870: PPUSH
1871: CALL_OW 69
1875: PUSH
1876: LD_INT 1
1878: EQUAL
1879: PUSH
1880: LD_EXP 12
1884: NOT
1885: AND
1886: IFFALSE 1938
// begin Say ( Burlak , D3-Bur-2c ) ;
1888: LD_EXP 38
1892: PPUSH
1893: LD_STRING D3-Bur-2c
1895: PPUSH
1896: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
1900: LD_EXP 46
1904: PPUSH
1905: LD_STRING D3-Gny-2
1907: PPUSH
1908: CALL_OW 88
// DialogueOff ;
1912: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
1916: LD_EXP 46
1920: PPUSH
1921: LD_INT 3
1923: PPUSH
1924: CALL_OW 235
// gnyevkoSaved = true ;
1928: LD_ADDR_EXP 10
1932: PUSH
1933: LD_INT 1
1935: ST_TO_ADDR
// exit ;
1936: GO 2257
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
1938: LD_INT 22
1940: PUSH
1941: LD_INT 3
1943: PUSH
1944: EMPTY
1945: LIST
1946: LIST
1947: PUSH
1948: LD_INT 21
1950: PUSH
1951: LD_INT 1
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: PPUSH
1962: CALL_OW 69
1966: PUSH
1967: LD_INT 1
1969: GREATER
1970: PUSH
1971: LD_EXP 12
1975: OR
1976: PUSH
1977: LD_EXP 20
1981: NOT
1982: AND
1983: IFFALSE 2035
// begin Say ( Burlak , D3-Bur-2d ) ;
1985: LD_EXP 38
1989: PPUSH
1990: LD_STRING D3-Bur-2d
1992: PPUSH
1993: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
1997: LD_EXP 46
2001: PPUSH
2002: LD_STRING D3-Gny-2
2004: PPUSH
2005: CALL_OW 88
// DialogueOff ;
2009: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2013: LD_EXP 46
2017: PPUSH
2018: LD_INT 3
2020: PPUSH
2021: CALL_OW 235
// gnyevkoSaved = true ;
2025: LD_ADDR_EXP 10
2029: PUSH
2030: LD_INT 1
2032: ST_TO_ADDR
// exit ;
2033: GO 2257
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2035: LD_INT 22
2037: PUSH
2038: LD_INT 3
2040: PUSH
2041: EMPTY
2042: LIST
2043: LIST
2044: PUSH
2045: LD_INT 21
2047: PUSH
2048: LD_INT 1
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PPUSH
2059: CALL_OW 69
2063: PUSH
2064: LD_INT 1
2066: GREATER
2067: PUSH
2068: LD_EXP 20
2072: AND
2073: IFFALSE 2125
// begin Say ( Burlak , D3-Bur-2e ) ;
2075: LD_EXP 38
2079: PPUSH
2080: LD_STRING D3-Bur-2e
2082: PPUSH
2083: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2087: LD_EXP 46
2091: PPUSH
2092: LD_STRING D3-Gny-2
2094: PPUSH
2095: CALL_OW 88
// DialogueOff ;
2099: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2103: LD_EXP 46
2107: PPUSH
2108: LD_INT 3
2110: PPUSH
2111: CALL_OW 235
// gnyevkoSaved = true ;
2115: LD_ADDR_EXP 10
2119: PUSH
2120: LD_INT 1
2122: ST_TO_ADDR
// exit ;
2123: GO 2257
// end ; end else
2125: GO 2257
// begin if GetSex ( nearUnit ) = sex_male then
2127: LD_VAR 0 1
2131: PPUSH
2132: CALL_OW 258
2136: PUSH
2137: LD_INT 1
2139: EQUAL
2140: IFFALSE 2156
// Say ( nearUnit , D3-RSol1-1 ) else
2142: LD_VAR 0 1
2146: PPUSH
2147: LD_STRING D3-RSol1-1
2149: PPUSH
2150: CALL_OW 88
2154: GO 2168
// Say ( nearUnit , D3-RFSol1-1 ) ;
2156: LD_VAR 0 1
2160: PPUSH
2161: LD_STRING D3-RFSol1-1
2163: PPUSH
2164: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2168: LD_EXP 46
2172: PPUSH
2173: LD_STRING D3-Gny-1
2175: PPUSH
2176: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2180: LD_VAR 0 1
2184: PPUSH
2185: CALL_OW 258
2189: PUSH
2190: LD_INT 1
2192: EQUAL
2193: IFFALSE 2209
// Say ( nearUnit , D3-RSol1-2 ) else
2195: LD_VAR 0 1
2199: PPUSH
2200: LD_STRING D3-RSol1-2
2202: PPUSH
2203: CALL_OW 88
2207: GO 2221
// Say ( nearUnit , D3-RFSol1-2 ) ;
2209: LD_VAR 0 1
2213: PPUSH
2214: LD_STRING D3-RFSol1-2
2216: PPUSH
2217: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2221: LD_EXP 46
2225: PPUSH
2226: LD_STRING D3-Gny-2a
2228: PPUSH
2229: CALL_OW 88
// DialogueOff ;
2233: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2237: LD_EXP 46
2241: PPUSH
2242: LD_INT 3
2244: PPUSH
2245: CALL_OW 235
// gnyevkoSaved = true ;
2249: LD_ADDR_EXP 10
2253: PUSH
2254: LD_INT 1
2256: ST_TO_ADDR
// end ; end ;
2257: PPOPN 2
2259: END
// every 0 0$1 trigger See ( 3 , Pokryshkin ) and not meetPokryshkin do
2260: LD_INT 3
2262: PPUSH
2263: LD_EXP 39
2267: PPUSH
2268: CALL_OW 292
2272: PUSH
2273: LD_EXP 12
2277: NOT
2278: AND
2279: IFFALSE 3114
2281: GO 2283
2283: DISABLE
// begin enable ;
2284: ENABLE
// InGameOn ;
2285: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2289: LD_EXP 39
2293: PPUSH
2294: CALL_OW 87
// ComHold ( [ Burlak , Gnyevko ] ) ;
2298: LD_EXP 38
2302: PUSH
2303: LD_EXP 46
2307: PUSH
2308: EMPTY
2309: LIST
2310: LIST
2311: PPUSH
2312: CALL_OW 140
// DialogueOn ;
2316: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2320: LD_EXP 11
2324: IFFALSE 2576
// begin meetPokryshkin = true ;
2326: LD_ADDR_EXP 12
2330: PUSH
2331: LD_INT 1
2333: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2334: LD_INT 6
2336: PPUSH
2337: LD_INT 3
2339: PPUSH
2340: CALL_OW 343
// DialogueOff ;
2344: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2348: LD_EXP 38
2352: PPUSH
2353: LD_EXP 39
2357: PPUSH
2358: CALL_OW 250
2362: PPUSH
2363: LD_EXP 39
2367: PPUSH
2368: CALL_OW 251
2372: PPUSH
2373: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2377: LD_EXP 38
2381: PPUSH
2382: LD_EXP 39
2386: PPUSH
2387: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
2391: LD_EXP 39
2395: PPUSH
2396: LD_EXP 38
2400: PPUSH
2401: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
2405: LD_EXP 46
2409: PPUSH
2410: LD_STRING D4-Gny-3
2412: PPUSH
2413: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
2417: LD_EXP 38
2421: PPUSH
2422: LD_STRING D4-Bur-3
2424: PPUSH
2425: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2429: LD_EXP 39
2433: PPUSH
2434: LD_STRING D4-Pok-4
2436: PPUSH
2437: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2441: LD_EXP 34
2445: PPUSH
2446: LD_INT 18
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: CALL_OW 49
// wait ( 0 0$2 ) ;
2456: LD_INT 70
2458: PPUSH
2459: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
2463: LD_EXP 38
2467: PPUSH
2468: LD_STRING D4-Bur-4
2470: PPUSH
2471: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
2475: LD_EXP 39
2479: PPUSH
2480: LD_STRING D4-Pok-5
2482: PPUSH
2483: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
2487: LD_EXP 34
2491: PPUSH
2492: LD_STRING D4-Sol1-5
2494: PPUSH
2495: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
2499: LD_EXP 39
2503: PPUSH
2504: LD_STRING D4-Pok-6
2506: PPUSH
2507: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
2511: LD_EXP 39
2515: PPUSH
2516: LD_STRING D4-Pok-6a
2518: PPUSH
2519: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
2523: LD_EXP 38
2527: PPUSH
2528: LD_STRING D4-Bur-6
2530: PPUSH
2531: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
2535: LD_EXP 39
2539: PPUSH
2540: LD_STRING D4-Pok-7
2542: PPUSH
2543: CALL_OW 88
// DialogueOff ;
2547: CALL_OW 7
// InGameOff ;
2551: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
2555: LD_STRING M2
2557: PPUSH
2558: CALL_OW 337
// goToHill = true ;
2562: LD_ADDR_EXP 13
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// MoveToHill ;
2570: CALL 7404 0 0
// exit ;
2574: GO 3114
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
2576: LD_EXP 38
2580: PUSH
2581: LD_EXP 46
2585: PUSH
2586: EMPTY
2587: LIST
2588: LIST
2589: PPUSH
2590: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
2594: LD_EXP 39
2598: PPUSH
2599: LD_STRING D4-Pok-1
2601: PPUSH
2602: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
2606: LD_EXP 46
2610: PPUSH
2611: CALL_OW 255
2615: PUSH
2616: LD_INT 3
2618: EQUAL
2619: PUSH
2620: LD_EXP 46
2624: PPUSH
2625: CALL_OW 302
2629: AND
2630: IFFALSE 2644
// Say ( Gnyevko , D4-Gny-1 ) ;
2632: LD_EXP 46
2636: PPUSH
2637: LD_STRING D4-Gny-1
2639: PPUSH
2640: CALL_OW 88
// if GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
2644: LD_EXP 38
2648: PPUSH
2649: LD_EXP 46
2653: PPUSH
2654: CALL_OW 296
2658: PUSH
2659: LD_INT 8
2661: GREATER
2662: PUSH
2663: LD_EXP 46
2667: PPUSH
2668: CALL_OW 255
2672: PUSH
2673: LD_INT 3
2675: EQUAL
2676: AND
2677: PUSH
2678: LD_EXP 46
2682: PPUSH
2683: CALL_OW 302
2687: AND
2688: IFFALSE 2777
// begin Say ( Pokryshkin , D4-Pok-2 ) ;
2690: LD_EXP 39
2694: PPUSH
2695: LD_STRING D4-Pok-2
2697: PPUSH
2698: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
2702: LD_EXP 46
2706: PPUSH
2707: LD_STRING D4-Gny-2
2709: PPUSH
2710: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
2714: LD_EXP 39
2718: PPUSH
2719: LD_STRING D4-Pok-3
2721: PPUSH
2722: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
2726: LD_ADDR_EXP 11
2730: PUSH
2731: LD_INT 1
2733: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
2734: LD_EXP 46
2738: PPUSH
2739: LD_INT 6
2741: PPUSH
2742: CALL_OW 235
// ComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2746: LD_EXP 46
2750: PPUSH
2751: LD_EXP 39
2755: PPUSH
2756: CALL_OW 250
2760: PPUSH
2761: LD_EXP 39
2765: PPUSH
2766: CALL_OW 251
2770: PPUSH
2771: CALL_OW 111
// end else
2775: GO 3106
// begin meetPokryshkin = true ;
2777: LD_ADDR_EXP 12
2781: PUSH
2782: LD_INT 1
2784: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2785: LD_INT 6
2787: PPUSH
2788: LD_INT 3
2790: PPUSH
2791: CALL_OW 343
// DialogueOff ;
2795: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
2799: LD_EXP 46
2803: PPUSH
2804: CALL_OW 255
2808: PUSH
2809: LD_INT 3
2811: EQUAL
2812: PUSH
2813: LD_EXP 46
2817: PPUSH
2818: CALL_OW 302
2822: AND
2823: IFFALSE 2900
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2825: LD_EXP 38
2829: PUSH
2830: LD_EXP 46
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: PPUSH
2839: LD_EXP 39
2843: PPUSH
2844: CALL_OW 250
2848: PPUSH
2849: LD_EXP 39
2853: PPUSH
2854: CALL_OW 251
2858: PPUSH
2859: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
2863: LD_EXP 38
2867: PUSH
2868: LD_EXP 46
2872: PUSH
2873: EMPTY
2874: LIST
2875: LIST
2876: PPUSH
2877: LD_EXP 39
2881: PPUSH
2882: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
2886: LD_EXP 46
2890: PPUSH
2891: LD_INT 6
2893: PPUSH
2894: CALL_OW 235
// end else
2898: GO 2943
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2900: LD_EXP 38
2904: PPUSH
2905: LD_EXP 39
2909: PPUSH
2910: CALL_OW 250
2914: PPUSH
2915: LD_EXP 39
2919: PPUSH
2920: CALL_OW 251
2924: PPUSH
2925: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2929: LD_EXP 38
2933: PPUSH
2934: LD_EXP 39
2938: PPUSH
2939: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
2943: LD_EXP 39
2947: PPUSH
2948: LD_EXP 38
2952: PPUSH
2953: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
2957: LD_EXP 38
2961: PPUSH
2962: LD_STRING D4-Bur-3
2964: PPUSH
2965: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2969: LD_EXP 39
2973: PPUSH
2974: LD_STRING D4-Pok-4
2976: PPUSH
2977: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2981: LD_EXP 34
2985: PPUSH
2986: LD_INT 18
2988: PPUSH
2989: LD_INT 1
2991: PPUSH
2992: CALL_OW 49
// wait ( 0 0$2 ) ;
2996: LD_INT 70
2998: PPUSH
2999: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3003: LD_EXP 38
3007: PPUSH
3008: LD_STRING D4-Bur-4
3010: PPUSH
3011: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3015: LD_EXP 39
3019: PPUSH
3020: LD_STRING D4-Pok-5
3022: PPUSH
3023: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3027: LD_EXP 34
3031: PPUSH
3032: LD_STRING D4-Sol1-5
3034: PPUSH
3035: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3039: LD_EXP 39
3043: PPUSH
3044: LD_STRING D4-Pok-6
3046: PPUSH
3047: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3051: LD_EXP 39
3055: PPUSH
3056: LD_STRING D4-Pok-6a
3058: PPUSH
3059: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3063: LD_EXP 38
3067: PPUSH
3068: LD_STRING D4-Bur-6
3070: PPUSH
3071: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3075: LD_EXP 39
3079: PPUSH
3080: LD_STRING D4-Pok-7
3082: PPUSH
3083: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3087: LD_STRING M2
3089: PPUSH
3090: CALL_OW 337
// goToHill = true ;
3094: LD_ADDR_EXP 13
3098: PUSH
3099: LD_INT 1
3101: ST_TO_ADDR
// MoveToHill ;
3102: CALL 7404 0 0
// end ; DialogueOff ;
3106: CALL_OW 7
// InGameOff ;
3110: CALL_OW 9
// end ;
3114: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3115: LD_EXP 38
3119: PPUSH
3120: LD_EXP 39
3124: PPUSH
3125: CALL_OW 296
3129: PUSH
3130: LD_INT 10
3132: GREATER
3133: PUSH
3134: LD_EXP 13
3138: AND
3139: PUSH
3140: LD_EXP 16
3144: NOT
3145: AND
3146: IFFALSE 3347
3148: GO 3150
3150: DISABLE
3151: LD_INT 0
3153: PPUSH
// begin enable ;
3154: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3155: LD_ADDR_VAR 0 1
3159: PUSH
3160: LD_EXP 39
3164: PUSH
3165: LD_EXP 40
3169: PUSH
3170: LD_EXP 41
3174: PUSH
3175: LD_EXP 42
3179: PUSH
3180: LD_EXP 43
3184: PUSH
3185: EMPTY
3186: LIST
3187: LIST
3188: LIST
3189: LIST
3190: LIST
3191: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3192: LD_EXP 46
3196: PPUSH
3197: CALL_OW 255
3201: PUSH
3202: LD_INT 6
3204: EQUAL
3205: PUSH
3206: LD_EXP 10
3210: AND
3211: IFFALSE 3229
// ruSolds = ruSolds ^ Gnyevko ;
3213: LD_ADDR_VAR 0 1
3217: PUSH
3218: LD_VAR 0 1
3222: PUSH
3223: LD_EXP 46
3227: ADD
3228: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3229: LD_VAR 0 1
3233: PPUSH
3234: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3238: LD_EXP 38
3242: PPUSH
3243: CALL_OW 87
// DialogueOn ;
3247: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3251: LD_EXP 39
3255: PPUSH
3256: LD_STRING DSplit-Pok-1
3258: PPUSH
3259: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3263: LD_EXP 38
3267: PPUSH
3268: LD_STRING DSplit-Bur-1
3270: PPUSH
3271: CALL_OW 88
// DialogueOff ;
3275: CALL_OW 7
// InGameOn ;
3279: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3283: LD_EXP 38
3287: PPUSH
3288: LD_EXP 39
3292: PPUSH
3293: CALL_OW 250
3297: PPUSH
3298: LD_EXP 39
3302: PPUSH
3303: CALL_OW 251
3307: PPUSH
3308: CALL_OW 111
// wait ( 0 0$1 ) ;
3312: LD_INT 35
3314: PPUSH
3315: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3319: LD_EXP 38
3323: PPUSH
3324: LD_EXP 39
3328: PPUSH
3329: CALL_OW 296
3333: PUSH
3334: LD_INT 6
3336: LESS
3337: IFFALSE 3283
// InGameOff ;
3339: CALL_OW 9
// MoveToHill ;
3343: CALL 7404 0 0
// end ;
3347: PPOPN 1
3349: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
3350: LD_INT 0
3352: PPUSH
3353: PPUSH
// traitor = true ;
3354: LD_ADDR_EXP 16
3358: PUSH
3359: LD_INT 1
3361: ST_TO_ADDR
// DialogueOn ;
3362: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
3366: LD_EXP 39
3370: PPUSH
3371: LD_STRING DAttack-Pok-1
3373: PPUSH
3374: CALL_OW 88
// DialogueOff ;
3378: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
3382: LD_INT 3
3384: PPUSH
3385: LD_INT 6
3387: PPUSH
3388: LD_INT 2
3390: PPUSH
3391: LD_INT 1
3393: PPUSH
3394: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
3398: LD_INT 22
3400: PUSH
3401: LD_INT 6
3403: PUSH
3404: EMPTY
3405: LIST
3406: LIST
3407: PUSH
3408: LD_INT 21
3410: PUSH
3411: LD_INT 1
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PPUSH
3422: CALL_OW 69
3426: PPUSH
3427: LD_EXP 38
3431: PPUSH
3432: CALL_OW 115
// end ;
3436: LD_VAR 0 1
3440: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
3441: LD_EXP 39
3445: PPUSH
3446: LD_INT 65
3448: PPUSH
3449: LD_INT 59
3451: PPUSH
3452: CALL_OW 297
3456: PUSH
3457: LD_INT 4
3459: LESS
3460: PUSH
3461: LD_EXP 16
3465: NOT
3466: AND
3467: IFFALSE 3664
3469: GO 3471
3471: DISABLE
// begin InGameOn ;
3472: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
3476: LD_INT 55
3478: PPUSH
3479: LD_INT 50
3481: PPUSH
3482: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
3486: LD_EXP 38
3490: PPUSH
3491: LD_INT 66
3493: PPUSH
3494: LD_INT 57
3496: PPUSH
3497: CALL_OW 111
// AddComHold ( Burlak ) ;
3501: LD_EXP 38
3505: PPUSH
3506: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
3510: LD_EXP 34
3514: PPUSH
3515: LD_INT 59
3517: PPUSH
3518: LD_INT 55
3520: PPUSH
3521: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3525: LD_INT 35
3527: PPUSH
3528: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
3532: LD_INT 1
3534: PPUSH
3535: LD_EXP 39
3539: PPUSH
3540: CALL_OW 292
3544: IFFALSE 3525
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
3546: LD_EXP 34
3550: PUSH
3551: LD_EXP 39
3555: PUSH
3556: EMPTY
3557: LIST
3558: LIST
3559: PPUSH
3560: CALL_OW 87
// ComStop ( Charles ) ;
3564: LD_EXP 34
3568: PPUSH
3569: CALL_OW 141
// AddComHold ( Charles ) ;
3573: LD_EXP 34
3577: PPUSH
3578: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
3582: LD_EXP 34
3586: PPUSH
3587: LD_EXP 39
3591: PPUSH
3592: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
3596: LD_EXP 34
3600: PPUSH
3601: LD_STRING D5-Sol1-1
3603: PPUSH
3604: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
3608: LD_EXP 39
3612: PPUSH
3613: LD_STRING D5-Pok-1
3615: PPUSH
3616: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
3620: LD_INT 1
3622: PPUSH
3623: LD_INT 6
3625: PPUSH
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
3636: LD_INT 1
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 2
3644: PPUSH
3645: LD_INT 1
3647: PPUSH
3648: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
3652: LD_EXP 34
3656: PPUSH
3657: LD_STRING D5-Sol1-2
3659: PPUSH
3660: CALL_OW 88
// end ;
3664: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
3665: LD_EXP 34
3669: PPUSH
3670: CALL_OW 301
3674: PUSH
3675: LD_EXP 13
3679: AND
3680: IFFALSE 4208
3682: GO 3684
3684: DISABLE
3685: LD_INT 0
3687: PPUSH
// begin goToHill = false ;
3688: LD_ADDR_EXP 13
3692: PUSH
3693: LD_INT 0
3695: ST_TO_ADDR
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
3696: LD_INT 22
3698: PUSH
3699: LD_INT 6
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: LD_INT 21
3708: PUSH
3709: LD_INT 1
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PUSH
3716: EMPTY
3717: LIST
3718: LIST
3719: PPUSH
3720: CALL_OW 69
3724: PPUSH
3725: CALL_OW 138
// wait ( 0 0$1 ) ;
3729: LD_INT 35
3731: PPUSH
3732: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
3736: LD_INT 55
3738: PPUSH
3739: LD_INT 50
3741: PPUSH
3742: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
3746: LD_EXP 38
3750: PPUSH
3751: LD_INT 56
3753: PPUSH
3754: LD_INT 56
3756: PPUSH
3757: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
3761: LD_INT 22
3763: PUSH
3764: LD_INT 6
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: PUSH
3771: LD_INT 21
3773: PUSH
3774: LD_INT 1
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PUSH
3781: EMPTY
3782: LIST
3783: LIST
3784: PPUSH
3785: CALL_OW 69
3789: PPUSH
3790: LD_INT 56
3792: PPUSH
3793: LD_INT 56
3795: PPUSH
3796: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
3800: LD_EXP 38
3804: PPUSH
3805: LD_STRING D5-Bur-2
3807: PPUSH
3808: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
3812: LD_EXP 39
3816: PPUSH
3817: LD_STRING D5-Pok-2
3819: PPUSH
3820: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
3824: LD_EXP 43
3828: PPUSH
3829: LD_STRING D5-Bel-2
3831: PPUSH
3832: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
3836: LD_EXP 39
3840: PPUSH
3841: LD_STRING D5-Pok-3
3843: PPUSH
3844: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
3848: LD_EXP 46
3852: PPUSH
3853: CALL_OW 255
3857: PUSH
3858: LD_INT 6
3860: EQUAL
3861: IFFALSE 3875
// Say ( Gnyevko , D5-Gny-3 ) ;
3863: LD_EXP 46
3867: PPUSH
3868: LD_STRING D5-Gny-3
3870: PPUSH
3871: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
3875: LD_EXP 38
3879: PPUSH
3880: LD_STRING D5-Bur-3
3882: PPUSH
3883: CALL_OW 88
// wait ( 0 0$2 ) ;
3887: LD_INT 70
3889: PPUSH
3890: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
3894: LD_EXP 38
3898: PPUSH
3899: LD_INT 85
3901: PPUSH
3902: LD_INT 64
3904: PPUSH
3905: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
3909: LD_INT 22
3911: PUSH
3912: LD_INT 6
3914: PUSH
3915: EMPTY
3916: LIST
3917: LIST
3918: PUSH
3919: LD_INT 21
3921: PUSH
3922: LD_INT 1
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PUSH
3929: EMPTY
3930: LIST
3931: LIST
3932: PPUSH
3933: CALL_OW 69
3937: PPUSH
3938: LD_INT 85
3940: PPUSH
3941: LD_INT 64
3943: PPUSH
3944: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
3948: LD_EXP 38
3952: PPUSH
3953: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
3957: LD_EXP 39
3961: PPUSH
3962: LD_STRING D6-Pok-1
3964: PPUSH
3965: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3969: LD_EXP 38
3973: PPUSH
3974: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
3978: LD_EXP 38
3982: PPUSH
3983: LD_STRING D6-Bur-1
3985: PPUSH
3986: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3990: LD_EXP 38
3994: PPUSH
3995: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
3999: LD_EXP 39
4003: PPUSH
4004: LD_STRING D6-Pok-2
4006: PPUSH
4007: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4011: LD_EXP 38
4015: PPUSH
4016: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4020: LD_EXP 43
4024: PPUSH
4025: LD_STRING D6-Bel-2
4027: PPUSH
4028: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4032: LD_EXP 38
4036: PPUSH
4037: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4041: LD_EXP 38
4045: PPUSH
4046: LD_STRING D6-Bur-2
4048: PPUSH
4049: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4053: LD_EXP 38
4057: PPUSH
4058: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4062: LD_EXP 39
4066: PPUSH
4067: LD_STRING D6-Pok-3
4069: PPUSH
4070: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4074: LD_EXP 38
4078: PPUSH
4079: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4083: LD_EXP 47
4087: PPUSH
4088: LD_STRING D6-Kur-3
4090: PPUSH
4091: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4095: LD_EXP 38
4099: PPUSH
4100: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4104: LD_EXP 39
4108: PPUSH
4109: LD_STRING D6-Pok-4
4111: PPUSH
4112: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4116: LD_EXP 38
4120: PPUSH
4121: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4125: LD_EXP 43
4129: PPUSH
4130: LD_STRING D6-Bel-4
4132: PPUSH
4133: CALL_OW 88
// InGameOff ;
4137: CALL_OW 9
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4141: LD_EXP 39
4145: PPUSH
4146: LD_INT 23
4148: PPUSH
4149: CALL_OW 115
// wait ( 0 0$5 ) ;
4153: LD_INT 175
4155: PPUSH
4156: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4160: LD_INT 22
4162: PUSH
4163: LD_INT 6
4165: PUSH
4166: EMPTY
4167: LIST
4168: LIST
4169: PUSH
4170: LD_INT 21
4172: PUSH
4173: LD_INT 1
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PUSH
4180: EMPTY
4181: LIST
4182: LIST
4183: PPUSH
4184: CALL_OW 69
4188: PPUSH
4189: LD_INT 23
4191: PPUSH
4192: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4196: LD_INT 1
4198: PPUSH
4199: LD_EXP 46
4203: PPUSH
4204: CALL_OW 471
// end ;
4208: PPOPN 1
4210: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4211: LD_INT 1
4213: PPUSH
4214: LD_EXP 39
4218: PPUSH
4219: CALL_OW 292
4223: PUSH
4224: LD_EXP 34
4228: PPUSH
4229: CALL_OW 301
4233: AND
4234: IFFALSE 4253
4236: GO 4238
4238: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4239: LD_EXP 35
4243: PPUSH
4244: LD_EXP 39
4248: PPUSH
4249: CALL_OW 115
4253: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4254: LD_INT 3
4256: PPUSH
4257: LD_INT 23
4259: PPUSH
4260: CALL_OW 292
4264: IFFALSE 4293
4266: GO 4268
4268: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4269: LD_EXP 39
4273: PPUSH
4274: LD_STRING D7-Pok-1
4276: PPUSH
4277: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4281: LD_EXP 35
4285: PPUSH
4286: LD_STRING D7-FSol1-1
4288: PPUSH
4289: CALL_OW 88
// end ;
4293: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4294: LD_EXP 39
4298: PPUSH
4299: CALL_OW 303
4303: IFFALSE 4835
4305: GO 4307
4307: DISABLE
4308: LD_INT 0
4310: PPUSH
4311: PPUSH
4312: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4313: LD_ADDR_VAR 0 3
4317: PUSH
4318: LD_INT 22
4320: PUSH
4321: LD_INT 6
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 21
4330: PUSH
4331: LD_INT 1
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PUSH
4338: LD_INT 50
4340: PUSH
4341: EMPTY
4342: LIST
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: PPUSH
4349: CALL_OW 69
4353: PUSH
4354: LD_EXP 43
4358: DIFF
4359: ST_TO_ADDR
// DialogueOn ;
4360: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
4364: LD_EXP 43
4368: PPUSH
4369: LD_STRING D7a-Bel-1
4371: PPUSH
4372: CALL_OW 88
// DialogueOff ;
4376: CALL_OW 7
// for i := 1 to ruSolds do
4380: LD_ADDR_VAR 0 1
4384: PUSH
4385: DOUBLE
4386: LD_INT 1
4388: DEC
4389: ST_TO_ADDR
4390: LD_VAR 0 3
4394: PUSH
4395: FOR_TO
4396: IFFALSE 4454
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
4398: LD_VAR 0 3
4402: PUSH
4403: LD_VAR 0 1
4407: ARRAY
4408: PPUSH
4409: LD_INT 87
4411: PUSH
4412: LD_VAR 0 1
4416: PLUS
4417: PPUSH
4418: LD_INT 63
4420: PUSH
4421: LD_VAR 0 1
4425: PLUS
4426: PPUSH
4427: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
4431: LD_VAR 0 3
4435: PUSH
4436: LD_VAR 0 1
4440: ARRAY
4441: PPUSH
4442: LD_INT 89
4444: PPUSH
4445: LD_INT 67
4447: PPUSH
4448: CALL_OW 178
// end ;
4452: GO 4395
4454: POP
4455: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
4456: LD_EXP 43
4460: PPUSH
4461: LD_INT 89
4463: PPUSH
4464: LD_INT 67
4466: PPUSH
4467: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
4471: LD_EXP 43
4475: PPUSH
4476: LD_INT 88
4478: PPUSH
4479: LD_INT 66
4481: PPUSH
4482: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
4486: LD_EXP 40
4490: PPUSH
4491: LD_STRING D7a-RSol1-1
4493: PPUSH
4494: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
4498: LD_EXP 35
4502: PPUSH
4503: LD_STRING D7a-FSol1-1
4505: PPUSH
4506: CALL_OW 88
// wait ( 0 0$12 ) ;
4510: LD_INT 420
4512: PPUSH
4513: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
4517: LD_EXP 43
4521: PPUSH
4522: LD_STRING D7b-Bel-1
4524: PPUSH
4525: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
4529: LD_EXP 41
4533: PPUSH
4534: LD_STRING D7b-FSol1-1
4536: PPUSH
4537: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
4541: LD_EXP 43
4545: PPUSH
4546: LD_STRING D7b-Bel-2
4548: PPUSH
4549: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
4553: LD_EXP 40
4557: PPUSH
4558: LD_STRING D7b-RSol1-2
4560: PPUSH
4561: CALL_OW 88
// for unit in ruSolds do
4565: LD_ADDR_VAR 0 2
4569: PUSH
4570: LD_VAR 0 3
4574: PUSH
4575: FOR_IN
4576: IFFALSE 4809
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
4578: LD_EXP 38
4582: PPUSH
4583: LD_VAR 0 2
4587: PPUSH
4588: CALL_OW 296
4592: PUSH
4593: LD_INT 7
4595: LESS
4596: IFFALSE 4807
// begin InGameOn ;
4598: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
4602: LD_EXP 43
4606: PUSH
4607: LD_EXP 40
4611: PUSH
4612: EMPTY
4613: LIST
4614: LIST
4615: PPUSH
4616: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
4620: LD_EXP 38
4624: PPUSH
4625: LD_INT 88
4627: PPUSH
4628: LD_INT 66
4630: PPUSH
4631: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
4635: LD_EXP 43
4639: PPUSH
4640: LD_EXP 38
4644: PPUSH
4645: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
4649: LD_EXP 38
4653: PPUSH
4654: LD_INT 90
4656: PPUSH
4657: LD_INT 66
4659: PPUSH
4660: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
4664: LD_EXP 38
4668: PPUSH
4669: LD_STRING D7b-Bur-3
4671: PPUSH
4672: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
4676: LD_EXP 43
4680: PPUSH
4681: LD_STRING D7b-Bel-4
4683: PPUSH
4684: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
4688: LD_EXP 38
4692: PPUSH
4693: LD_STRING D7b-Bur-4
4695: PPUSH
4696: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
4700: LD_EXP 43
4704: PPUSH
4705: LD_STRING D7b-Bel-5
4707: PPUSH
4708: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
4712: LD_EXP 41
4716: PPUSH
4717: LD_STRING D7b-FSol1-5
4719: PPUSH
4720: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
4724: LD_EXP 43
4728: PPUSH
4729: LD_STRING D7b-Bel-6
4731: PPUSH
4732: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
4736: LD_EXP 38
4740: PPUSH
4741: LD_STRING D7b-Bur-6
4743: PPUSH
4744: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
4748: LD_EXP 40
4752: PPUSH
4753: LD_STRING D7b-RSol1-6
4755: PPUSH
4756: CALL_OW 88
// InGameOff ;
4760: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
4764: LD_VAR 0 3
4768: PPUSH
4769: LD_INT 3
4771: PPUSH
4772: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
4776: LD_EXP 43
4780: PPUSH
4781: LD_INT 3
4783: PPUSH
4784: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
4788: LD_STRING M3
4790: PPUSH
4791: CALL_OW 337
// secondAttack = true ;
4795: LD_ADDR_EXP 15
4799: PUSH
4800: LD_INT 1
4802: ST_TO_ADDR
// exit ;
4803: POP
4804: POP
4805: GO 4835
// end ;
4807: GO 4575
4809: POP
4810: POP
// Say ( Belkov , D7b-Bel-3 ) ;
4811: LD_EXP 43
4815: PPUSH
4816: LD_STRING D7b-Bel-3
4818: PPUSH
4819: CALL_OW 88
// InGameOff ;
4823: CALL_OW 9
// belkovWaitForGorky = true ;
4827: LD_ADDR_EXP 14
4831: PUSH
4832: LD_INT 1
4834: ST_TO_ADDR
// end ;
4835: PPOPN 3
4837: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
4838: LD_EXP 14
4842: IFFALSE 5152
4844: GO 4846
4846: DISABLE
4847: LD_INT 0
4849: PPUSH
4850: PPUSH
// begin enable ;
4851: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
4852: LD_ADDR_VAR 0 2
4856: PUSH
4857: LD_INT 22
4859: PUSH
4860: LD_INT 6
4862: PUSH
4863: EMPTY
4864: LIST
4865: LIST
4866: PUSH
4867: LD_INT 21
4869: PUSH
4870: LD_INT 1
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PUSH
4877: EMPTY
4878: LIST
4879: LIST
4880: PPUSH
4881: CALL_OW 69
4885: ST_TO_ADDR
// for unit in ruSolds do
4886: LD_ADDR_VAR 0 1
4890: PUSH
4891: LD_VAR 0 2
4895: PUSH
4896: FOR_IN
4897: IFFALSE 5150
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
4899: LD_EXP 38
4903: PPUSH
4904: LD_VAR 0 1
4908: PPUSH
4909: CALL_OW 296
4913: PUSH
4914: LD_INT 7
4916: LESS
4917: IFFALSE 5148
// begin belkovWaitForGorky = false ;
4919: LD_ADDR_EXP 14
4923: PUSH
4924: LD_INT 0
4926: ST_TO_ADDR
// InGameOn ;
4927: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
4931: LD_EXP 43
4935: PUSH
4936: LD_EXP 40
4940: PUSH
4941: EMPTY
4942: LIST
4943: LIST
4944: PPUSH
4945: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
4949: LD_EXP 38
4953: PPUSH
4954: LD_INT 88
4956: PPUSH
4957: LD_INT 66
4959: PPUSH
4960: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
4964: LD_EXP 43
4968: PPUSH
4969: LD_EXP 38
4973: PPUSH
4974: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
4978: LD_EXP 38
4982: PPUSH
4983: LD_INT 90
4985: PPUSH
4986: LD_INT 66
4988: PPUSH
4989: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
4993: LD_EXP 43
4997: PPUSH
4998: LD_STRING D7b-Bel-3a
5000: PPUSH
5001: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5005: LD_EXP 38
5009: PPUSH
5010: LD_STRING D7b-Bur-3
5012: PPUSH
5013: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5017: LD_EXP 43
5021: PPUSH
5022: LD_STRING D7b-Bel-4
5024: PPUSH
5025: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5029: LD_EXP 38
5033: PPUSH
5034: LD_STRING D7b-Bur-4
5036: PPUSH
5037: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5041: LD_EXP 43
5045: PPUSH
5046: LD_STRING D7b-Bel-5
5048: PPUSH
5049: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5053: LD_EXP 41
5057: PPUSH
5058: LD_STRING D7b-FSol1-5
5060: PPUSH
5061: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5065: LD_EXP 43
5069: PPUSH
5070: LD_STRING D7b-Bel-6
5072: PPUSH
5073: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5077: LD_EXP 38
5081: PPUSH
5082: LD_STRING D7b-Bur-6
5084: PPUSH
5085: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5089: LD_EXP 40
5093: PPUSH
5094: LD_STRING D7a-RSol1-6
5096: PPUSH
5097: CALL_OW 88
// InGameOff ;
5101: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5105: LD_VAR 0 2
5109: PPUSH
5110: LD_INT 3
5112: PPUSH
5113: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5117: LD_EXP 43
5121: PPUSH
5122: LD_INT 3
5124: PPUSH
5125: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5129: LD_STRING M3
5131: PPUSH
5132: CALL_OW 337
// secondAttack = true ;
5136: LD_ADDR_EXP 15
5140: PUSH
5141: LD_INT 1
5143: ST_TO_ADDR
// exit ;
5144: POP
5145: POP
5146: GO 5152
// end ;
5148: GO 4896
5150: POP
5151: POP
// end ;
5152: PPOPN 2
5154: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5155: LD_INT 0
5157: PPUSH
5158: PPUSH
// DialogueOn ;
5159: CALL_OW 6
// Say ( Johanna , D8-FSol1-1 ) ;
5163: LD_EXP 35
5167: PPUSH
5168: LD_STRING D8-FSol1-1
5170: PPUSH
5171: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5175: LD_EXP 36
5179: PPUSH
5180: LD_STRING D8-Glad-1
5182: PPUSH
5183: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5187: LD_EXP 38
5191: PPUSH
5192: LD_STRING D8-Bur-1
5194: PPUSH
5195: CALL_OW 88
// DialogueOff ;
5199: CALL_OW 7
// secondAttack = false ;
5203: LD_ADDR_EXP 15
5207: PUSH
5208: LD_INT 0
5210: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: LD_INT 22
5218: PUSH
5219: LD_INT 3
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: PUSH
5226: LD_INT 21
5228: PUSH
5229: LD_INT 1
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: EMPTY
5237: LIST
5238: LIST
5239: PPUSH
5240: CALL_OW 69
5244: PPUSH
5245: LD_INT 23
5247: PPUSH
5248: CALL_OW 74
5252: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5253: LD_EXP 37
5257: PPUSH
5258: CALL_OW 122
// wait ( 0 0$1 ) ;
5262: LD_INT 35
5264: PPUSH
5265: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5269: LD_EXP 37
5273: PPUSH
5274: LD_VAR 0 2
5278: PPUSH
5279: CALL_OW 175
// end ;
5283: LD_VAR 0 1
5287: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
5288: LD_INT 23
5290: PPUSH
5291: CALL_OW 256
5295: PUSH
5296: LD_INT 350
5298: LESS
5299: PUSH
5300: LD_INT 23
5302: PPUSH
5303: CALL_OW 256
5307: PUSH
5308: LD_INT 250
5310: GREATER
5311: AND
5312: PUSH
5313: LD_INT 20
5315: PPUSH
5316: LD_INT 22
5318: PUSH
5319: LD_INT 3
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: PUSH
5326: LD_INT 21
5328: PUSH
5329: LD_INT 1
5331: PUSH
5332: EMPTY
5333: LIST
5334: LIST
5335: PUSH
5336: EMPTY
5337: LIST
5338: LIST
5339: PPUSH
5340: CALL_OW 70
5344: PUSH
5345: LD_INT 0
5347: GREATER
5348: AND
5349: IFFALSE 5366
5351: GO 5353
5353: DISABLE
// begin Say ( Johanna , D8-FSol1-2 ) ;
5354: LD_EXP 35
5358: PPUSH
5359: LD_STRING D8-FSol1-2
5361: PPUSH
5362: CALL_OW 88
// end ;
5366: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) do
5367: LD_INT 23
5369: PPUSH
5370: CALL_OW 303
5374: PUSH
5375: LD_INT 22
5377: PPUSH
5378: CALL_OW 302
5382: AND
5383: IFFALSE 5445
5385: GO 5387
5387: DISABLE
// begin Say ( Johanna , D8-FSol1-2a ) ;
5388: LD_EXP 35
5392: PPUSH
5393: LD_STRING D8-FSol1-2a
5395: PPUSH
5396: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
5400: LD_EXP 36
5404: PUSH
5405: LD_EXP 35
5409: PUSH
5410: EMPTY
5411: LIST
5412: LIST
5413: PPUSH
5414: LD_INT 21
5416: PPUSH
5417: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
5421: LD_EXP 36
5425: PPUSH
5426: LD_STRING D8-Glad-2
5428: PPUSH
5429: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
5433: LD_EXP 38
5437: PPUSH
5438: LD_STRING D8-Bur-2
5440: PPUSH
5441: CALL_OW 88
// end ;
5445: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) do
5446: LD_INT 22
5448: PPUSH
5449: CALL_OW 303
5453: PUSH
5454: LD_INT 23
5456: PPUSH
5457: CALL_OW 302
5461: AND
5462: IFFALSE 5524
5464: GO 5466
5466: DISABLE
// begin Say ( Johanna , D8-FSol1-2a ) ;
5467: LD_EXP 35
5471: PPUSH
5472: LD_STRING D8-FSol1-2a
5474: PPUSH
5475: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
5479: LD_EXP 36
5483: PUSH
5484: LD_EXP 35
5488: PUSH
5489: EMPTY
5490: LIST
5491: LIST
5492: PPUSH
5493: LD_INT 21
5495: PPUSH
5496: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
5500: LD_EXP 36
5504: PPUSH
5505: LD_STRING D8-Glad-2
5507: PPUSH
5508: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
5512: LD_EXP 38
5516: PPUSH
5517: LD_STRING D8-Bur-2
5519: PPUSH
5520: CALL_OW 88
// end ;
5524: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
5525: LD_INT 22
5527: PUSH
5528: LD_INT 1
5530: PUSH
5531: EMPTY
5532: LIST
5533: LIST
5534: PUSH
5535: LD_INT 21
5537: PUSH
5538: LD_INT 1
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PUSH
5545: LD_INT 50
5547: PUSH
5548: EMPTY
5549: LIST
5550: PUSH
5551: EMPTY
5552: LIST
5553: LIST
5554: LIST
5555: PPUSH
5556: CALL_OW 69
5560: PUSH
5561: LD_INT 0
5563: GREATER
5564: IFFALSE 5692
5566: GO 5568
5568: DISABLE
5569: LD_INT 0
5571: PPUSH
// begin enable ;
5572: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5573: LD_ADDR_VAR 0 1
5577: PUSH
5578: LD_INT 21
5580: PPUSH
5581: LD_INT 22
5583: PUSH
5584: LD_INT 1
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PUSH
5591: LD_INT 21
5593: PUSH
5594: LD_INT 1
5596: PUSH
5597: EMPTY
5598: LIST
5599: LIST
5600: PUSH
5601: EMPTY
5602: LIST
5603: LIST
5604: PPUSH
5605: CALL_OW 70
5609: PUSH
5610: FOR_IN
5611: IFFALSE 5690
// begin if unit = Gladstone then
5613: LD_VAR 0 1
5617: PUSH
5618: LD_EXP 36
5622: EQUAL
5623: IFFALSE 5653
// begin gladstoneEscape = true ;
5625: LD_ADDR_EXP 17
5629: PUSH
5630: LD_INT 1
5632: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
5633: LD_EXP 36
5637: PPUSH
5638: LD_EXP 25
5642: PUSH
5643: LD_STRING Gladstone
5645: STR
5646: PPUSH
5647: CALL_OW 38
// end else
5651: GO 5679
// begin JohannaEscape = true ;
5653: LD_ADDR_EXP 18
5657: PUSH
5658: LD_INT 1
5660: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
5661: LD_EXP 35
5665: PPUSH
5666: LD_EXP 25
5670: PUSH
5671: LD_STRING Johanna
5673: STR
5674: PPUSH
5675: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
5679: LD_VAR 0 1
5683: PPUSH
5684: CALL_OW 64
// end ;
5688: GO 5610
5690: POP
5691: POP
// end ;
5692: PPOPN 1
5694: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
5695: LD_EXP 36
5699: PPUSH
5700: CALL_OW 301
5704: PUSH
5705: LD_EXP 35
5709: PPUSH
5710: CALL_OW 301
5714: AND
5715: IFFALSE 5732
5717: GO 5719
5719: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
5720: LD_EXP 38
5724: PPUSH
5725: LD_STRING D9-Bur-1
5727: PPUSH
5728: CALL_OW 88
5732: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
5733: LD_EXP 35
5737: PPUSH
5738: CALL_OW 301
5742: PUSH
5743: LD_EXP 17
5747: AND
5748: PUSH
5749: LD_EXP 18
5753: NOT
5754: AND
5755: IFFALSE 5772
5757: GO 5759
5759: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
5760: LD_EXP 38
5764: PPUSH
5765: LD_STRING D9-Bur-1a
5767: PPUSH
5768: CALL_OW 88
5772: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
5773: LD_EXP 36
5777: PPUSH
5778: CALL_OW 301
5782: PUSH
5783: LD_EXP 17
5787: NOT
5788: AND
5789: PUSH
5790: LD_EXP 18
5794: AND
5795: IFFALSE 5812
5797: GO 5799
5799: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
5800: LD_EXP 38
5804: PPUSH
5805: LD_STRING D9-Bur-1b
5807: PPUSH
5808: CALL_OW 88
5812: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
5813: LD_EXP 17
5817: PUSH
5818: LD_EXP 18
5822: AND
5823: IFFALSE 5840
5825: GO 5827
5827: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
5828: LD_EXP 38
5832: PPUSH
5833: LD_STRING D9-Bur-1c
5835: PPUSH
5836: CALL_OW 88
5840: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
5841: LD_INT 22
5843: PUSH
5844: LD_INT 1
5846: PUSH
5847: EMPTY
5848: LIST
5849: LIST
5850: PUSH
5851: LD_INT 21
5853: PUSH
5854: LD_INT 3
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PUSH
5861: LD_INT 50
5863: PUSH
5864: EMPTY
5865: LIST
5866: PUSH
5867: EMPTY
5868: LIST
5869: LIST
5870: LIST
5871: PPUSH
5872: CALL_OW 69
5876: PUSH
5877: LD_INT 0
5879: EQUAL
5880: IFFALSE 6128
5882: GO 5884
5884: DISABLE
5885: LD_INT 0
5887: PPUSH
5888: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
5889: LD_ADDR_VAR 0 1
5893: PUSH
5894: LD_INT 22
5896: PUSH
5897: LD_INT 3
5899: PUSH
5900: EMPTY
5901: LIST
5902: LIST
5903: PUSH
5904: LD_INT 21
5906: PUSH
5907: LD_INT 1
5909: PUSH
5910: EMPTY
5911: LIST
5912: LIST
5913: PUSH
5914: LD_INT 50
5916: PUSH
5917: EMPTY
5918: LIST
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: PPUSH
5925: CALL_OW 69
5929: PUSH
5930: LD_EXP 38
5934: PUSH
5935: LD_EXP 46
5939: PUSH
5940: LD_EXP 43
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: DIFF
5950: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
5951: LD_ADDR_VAR 0 2
5955: PUSH
5956: LD_VAR 0 1
5960: PPUSH
5961: LD_INT 26
5963: PUSH
5964: LD_INT 1
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: PPUSH
5971: CALL_OW 72
5975: ST_TO_ADDR
// DialogueOn ;
5976: CALL_OW 6
// if IsOK ( Belkov ) then
5980: LD_EXP 43
5984: PPUSH
5985: CALL_OW 302
5989: IFFALSE 6003
// Say ( Belkov , D10-Bel-1 ) ;
5991: LD_EXP 43
5995: PPUSH
5996: LD_STRING D10-Bel-1
5998: PPUSH
5999: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6003: LD_VAR 0 1
6007: PUSH
6008: LD_INT 0
6010: GREATER
6011: PUSH
6012: LD_VAR 0 2
6016: PUSH
6017: LD_INT 0
6019: GREATER
6020: PUSH
6021: LD_EXP 43
6025: PPUSH
6026: CALL_OW 302
6030: OR
6031: AND
6032: IFFALSE 6099
// begin Say ( Burlak , D10-Bur-1 ) ;
6034: LD_EXP 38
6038: PPUSH
6039: LD_STRING D10-Bur-1
6041: PPUSH
6042: CALL_OW 88
// if IsOK ( Belkov ) then
6046: LD_EXP 43
6050: PPUSH
6051: CALL_OW 302
6055: IFFALSE 6071
// Say ( Belkov , D10-Bel-1a ) else
6057: LD_EXP 43
6061: PPUSH
6062: LD_STRING D10-Bel-1a
6064: PPUSH
6065: CALL_OW 88
6069: GO 6087
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6071: LD_VAR 0 2
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PPUSH
6080: LD_STRING D10-RSol1-1
6082: PPUSH
6083: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6087: LD_EXP 38
6091: PPUSH
6092: LD_STRING D10-Bur-2
6094: PPUSH
6095: CALL_OW 88
// end ; DialogueOff ;
6099: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6103: LD_STRING M4a
6105: PPUSH
6106: CALL_OW 337
// evacuationAvailable = true ;
6110: LD_ADDR_EXP 20
6114: PUSH
6115: LD_INT 1
6117: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6118: LD_INT 1
6120: PPUSH
6121: LD_INT 1
6123: PPUSH
6124: CALL_OW 424
// end ;
6128: PPOPN 2
6130: END
// every 0 0$15 trigger evacuationAvailable do
6131: LD_EXP 20
6135: IFFALSE 6708
6137: GO 6139
6139: DISABLE
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6140: LD_EXP 45
6144: PPUSH
6145: LD_INT 22
6147: PPUSH
6148: LD_INT 1
6150: PPUSH
6151: CALL_OW 49
// wait ( 0 0$3 ) ;
6155: LD_INT 105
6157: PPUSH
6158: CALL_OW 67
// DialogueOn ;
6162: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6166: LD_EXP 45
6170: PPUSH
6171: LD_STRING D11b-Kir-1
6173: PPUSH
6174: CALL_OW 94
// if IsOK ( Belkov ) then
6178: LD_EXP 43
6182: PPUSH
6183: CALL_OW 302
6187: IFFALSE 6215
// begin Say ( Belkov , D11b-Bel-1 ) ;
6189: LD_EXP 43
6193: PPUSH
6194: LD_STRING D11b-Bel-1
6196: PPUSH
6197: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
6201: LD_EXP 43
6205: PPUSH
6206: LD_STRING D11b-Bel-1a
6208: PPUSH
6209: CALL_OW 94
// end else
6213: GO 6264
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , true ) ;
6215: LD_INT 22
6217: PUSH
6218: LD_INT 3
6220: PUSH
6221: EMPTY
6222: LIST
6223: LIST
6224: PUSH
6225: LD_INT 21
6227: PUSH
6228: LD_INT 1
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PUSH
6235: LD_INT 50
6237: PUSH
6238: EMPTY
6239: LIST
6240: PUSH
6241: EMPTY
6242: LIST
6243: LIST
6244: LIST
6245: PPUSH
6246: CALL_OW 69
6250: PPUSH
6251: LD_STRING D11b-RSol1-1
6253: PPUSH
6254: LD_STRING D11b-RFSol1-1
6256: PPUSH
6257: LD_INT 1
6259: PPUSH
6260: CALL 7071 0 4
// end ; if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
6264: LD_INT 22
6266: PUSH
6267: LD_INT 0
6269: PUSH
6270: EMPTY
6271: LIST
6272: LIST
6273: PUSH
6274: LD_INT 25
6276: PUSH
6277: LD_INT 12
6279: PUSH
6280: EMPTY
6281: LIST
6282: LIST
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: PPUSH
6288: CALL_OW 69
6292: PUSH
6293: LD_INT 0
6295: GREATER
6296: IFFALSE 6312
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
6298: LD_EXP 45
6302: PPUSH
6303: LD_STRING D11b1-Kir-1
6305: PPUSH
6306: CALL_OW 94
6310: GO 6324
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
6312: LD_EXP 45
6316: PPUSH
6317: LD_STRING D11b2-Kir-1
6319: PPUSH
6320: CALL_OW 94
// if attackedByApeman and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
6324: LD_EXP 5
6328: PUSH
6329: LD_INT 22
6331: PUSH
6332: LD_INT 0
6334: PUSH
6335: EMPTY
6336: LIST
6337: LIST
6338: PUSH
6339: LD_INT 25
6341: PUSH
6342: LD_INT 12
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PPUSH
6353: CALL_OW 69
6357: PUSH
6358: LD_INT 0
6360: GREATER
6361: AND
6362: IFFALSE 6530
// begin Say ( Burlak , D11b1-Bur-1 ) ;
6364: LD_EXP 38
6368: PPUSH
6369: LD_STRING D11b1-Bur-1
6371: PPUSH
6372: CALL_OW 88
// if IsOk ( Belkov ) then
6376: LD_EXP 43
6380: PPUSH
6381: CALL_OW 302
6385: IFFALSE 6401
// Say ( Belkov , D11b2-Bel-1 ) else
6387: LD_EXP 43
6391: PPUSH
6392: LD_STRING D11b2-Bel-1
6394: PPUSH
6395: CALL_OW 88
6399: GO 6450
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6401: LD_INT 22
6403: PUSH
6404: LD_INT 1
6406: PUSH
6407: EMPTY
6408: LIST
6409: LIST
6410: PUSH
6411: LD_INT 21
6413: PUSH
6414: LD_INT 1
6416: PUSH
6417: EMPTY
6418: LIST
6419: LIST
6420: PUSH
6421: LD_INT 50
6423: PUSH
6424: EMPTY
6425: LIST
6426: PUSH
6427: EMPTY
6428: LIST
6429: LIST
6430: LIST
6431: PPUSH
6432: CALL_OW 69
6436: PPUSH
6437: LD_STRING D11b1-RSol1-1
6439: PPUSH
6440: LD_STRING D11b1-RFSol1-1
6442: PPUSH
6443: LD_INT 0
6445: PPUSH
6446: CALL 7071 0 4
// if IsOk ( Belkov ) then
6450: LD_EXP 43
6454: PPUSH
6455: CALL_OW 302
6459: IFFALSE 6475
// Say ( Belkov , D11b1-Bel-1 ) else
6461: LD_EXP 43
6465: PPUSH
6466: LD_STRING D11b1-Bel-1
6468: PPUSH
6469: CALL_OW 88
6473: GO 6524
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6475: LD_INT 22
6477: PUSH
6478: LD_INT 1
6480: PUSH
6481: EMPTY
6482: LIST
6483: LIST
6484: PUSH
6485: LD_INT 21
6487: PUSH
6488: LD_INT 1
6490: PUSH
6491: EMPTY
6492: LIST
6493: LIST
6494: PUSH
6495: LD_INT 50
6497: PUSH
6498: EMPTY
6499: LIST
6500: PUSH
6501: EMPTY
6502: LIST
6503: LIST
6504: LIST
6505: PPUSH
6506: CALL_OW 69
6510: PPUSH
6511: LD_STRING D11b1-RSol1-1
6513: PPUSH
6514: LD_STRING D11b1-RFSol1-1
6516: PPUSH
6517: LD_INT 0
6519: PPUSH
6520: CALL 7071 0 4
// DialogueOff ;
6524: CALL_OW 7
// exit ;
6528: GO 6708
// end ; if spotWaterfall then
6530: LD_EXP 6
6534: IFFALSE 6628
// begin Say ( Burlak , D11b1-Bur-1a ) ;
6536: LD_EXP 38
6540: PPUSH
6541: LD_STRING D11b1-Bur-1a
6543: PPUSH
6544: CALL_OW 88
// if IsOk ( Belkov ) then
6548: LD_EXP 43
6552: PPUSH
6553: CALL_OW 302
6557: IFFALSE 6573
// Say ( Belkov , D11b2-Bel-1 ) else
6559: LD_EXP 43
6563: PPUSH
6564: LD_STRING D11b2-Bel-1
6566: PPUSH
6567: CALL_OW 88
6571: GO 6622
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6573: LD_INT 22
6575: PUSH
6576: LD_INT 1
6578: PUSH
6579: EMPTY
6580: LIST
6581: LIST
6582: PUSH
6583: LD_INT 21
6585: PUSH
6586: LD_INT 1
6588: PUSH
6589: EMPTY
6590: LIST
6591: LIST
6592: PUSH
6593: LD_INT 50
6595: PUSH
6596: EMPTY
6597: LIST
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: PPUSH
6604: CALL_OW 69
6608: PPUSH
6609: LD_STRING D11b1-RSol1-1
6611: PPUSH
6612: LD_STRING D11b1-RFSol1-1
6614: PPUSH
6615: LD_INT 0
6617: PPUSH
6618: CALL 7071 0 4
// DialogueOff ;
6622: CALL_OW 7
// exit ;
6626: GO 6708
// end ; if IsOk ( Belkov ) then
6628: LD_EXP 43
6632: PPUSH
6633: CALL_OW 302
6637: IFFALSE 6653
// Say ( Belkov , D11b1-Bel-1 ) else
6639: LD_EXP 43
6643: PPUSH
6644: LD_STRING D11b1-Bel-1
6646: PPUSH
6647: CALL_OW 88
6651: GO 6702
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6653: LD_INT 22
6655: PUSH
6656: LD_INT 1
6658: PUSH
6659: EMPTY
6660: LIST
6661: LIST
6662: PUSH
6663: LD_INT 21
6665: PUSH
6666: LD_INT 1
6668: PUSH
6669: EMPTY
6670: LIST
6671: LIST
6672: PUSH
6673: LD_INT 50
6675: PUSH
6676: EMPTY
6677: LIST
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: LIST
6683: PPUSH
6684: CALL_OW 69
6688: PPUSH
6689: LD_STRING D11b1-RSol1-1
6691: PPUSH
6692: LD_STRING D11b1-RFSol1-1
6694: PPUSH
6695: LD_INT 0
6697: PPUSH
6698: CALL 7071 0 4
// DialogueOff ;
6702: CALL_OW 7
// exit ;
6706: GO 6708
// end ;
6708: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
6709: LD_INT 3
6711: PPUSH
6712: LD_EXP 45
6716: PPUSH
6717: CALL_OW 292
6721: IFFALSE 6951
6723: GO 6725
6725: DISABLE
6726: LD_INT 0
6728: PPUSH
// begin CenterNowOnUnits ( Kirilenkova ) ;
6729: LD_EXP 45
6733: PPUSH
6734: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
6738: LD_ADDR_VAR 0 1
6742: PUSH
6743: LD_INT 22
6745: PUSH
6746: LD_INT 3
6748: PUSH
6749: EMPTY
6750: LIST
6751: LIST
6752: PUSH
6753: LD_INT 21
6755: PUSH
6756: LD_INT 1
6758: PUSH
6759: EMPTY
6760: LIST
6761: LIST
6762: PUSH
6763: LD_INT 50
6765: PUSH
6766: EMPTY
6767: LIST
6768: PUSH
6769: EMPTY
6770: LIST
6771: LIST
6772: LIST
6773: PPUSH
6774: CALL_OW 69
6778: PPUSH
6779: LD_EXP 45
6783: PPUSH
6784: CALL_OW 74
6788: ST_TO_ADDR
// DialogueOn ;
6789: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
6793: LD_EXP 45
6797: PPUSH
6798: LD_STRING D11a-Kir-1
6800: PPUSH
6801: CALL_OW 88
// if nearUnit = Belkov then
6805: LD_VAR 0 1
6809: PUSH
6810: LD_EXP 43
6814: EQUAL
6815: IFFALSE 6855
// begin Say ( Belkov , D11a-Bel-1 ) ;
6817: LD_EXP 43
6821: PPUSH
6822: LD_STRING D11a-Bel-1
6824: PPUSH
6825: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
6829: LD_EXP 45
6833: PPUSH
6834: LD_STRING D11a-Kir-2
6836: PPUSH
6837: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
6841: LD_EXP 43
6845: PPUSH
6846: LD_STRING D11a-Bel-2
6848: PPUSH
6849: CALL_OW 88
// end else
6853: GO 6896
// begin if GetSex ( nearUnit ) = sex_male then
6855: LD_VAR 0 1
6859: PPUSH
6860: CALL_OW 258
6864: PUSH
6865: LD_INT 1
6867: EQUAL
6868: IFFALSE 6884
// Say ( nearUnit , D11a-RSol1-2 ) else
6870: LD_VAR 0 1
6874: PPUSH
6875: LD_STRING D11a-RSol1-2
6877: PPUSH
6878: CALL_OW 88
6882: GO 6896
// Say ( nearUnit , D11a-RFSol1-2 ) ;
6884: LD_VAR 0 1
6888: PPUSH
6889: LD_STRING D11a-RFSol1-2
6891: PPUSH
6892: CALL_OW 88
// end ; DialogueOff ;
6896: CALL_OW 7
// SetSide ( Kirilenkova , 3 ) ;
6900: LD_EXP 45
6904: PPUSH
6905: LD_INT 3
6907: PPUSH
6908: CALL_OW 235
// jelenaSaved = true ;
6912: LD_ADDR_EXP 19
6916: PUSH
6917: LD_INT 1
6919: ST_TO_ADDR
// wait ( 0 0$5 ) ;
6920: LD_INT 175
6922: PPUSH
6923: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
6927: LD_EXP 45
6931: PPUSH
6932: LD_STRING D11c-Kir-1
6934: PPUSH
6935: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
6939: LD_EXP 38
6943: PPUSH
6944: LD_STRING D11c-Bur-1
6946: PPUSH
6947: CALL_OW 88
// end ;
6951: PPOPN 1
6953: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
6954: LD_EXP 20
6958: PUSH
6959: LD_INT 1
6961: PPUSH
6962: LD_INT 22
6964: PUSH
6965: LD_INT 3
6967: PUSH
6968: EMPTY
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 21
6974: PUSH
6975: LD_INT 1
6977: PUSH
6978: EMPTY
6979: LIST
6980: LIST
6981: PUSH
6982: EMPTY
6983: LIST
6984: LIST
6985: PPUSH
6986: CALL_OW 70
6990: PUSH
6991: LD_INT 0
6993: GREATER
6994: AND
6995: IFFALSE 7007
6997: GO 6999
6999: DISABLE
// begin Query ( QExit1 ) ;
7000: LD_STRING QExit1
7002: PPUSH
7003: CALL_OW 97
// end ; end_of_file
7007: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7008: LD_INT 0
7010: PPUSH
7011: PPUSH
// if exist_mode then
7012: LD_VAR 0 2
7016: IFFALSE 7041
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7018: LD_ADDR_VAR 0 4
7022: PUSH
7023: LD_EXP 26
7027: PUSH
7028: LD_VAR 0 1
7032: STR
7033: PPUSH
7034: CALL_OW 34
7038: ST_TO_ADDR
7039: GO 7056
// unit := NewCharacter ( ident ) ;
7041: LD_ADDR_VAR 0 4
7045: PUSH
7046: LD_VAR 0 1
7050: PPUSH
7051: CALL_OW 25
7055: ST_TO_ADDR
// result := unit ;
7056: LD_ADDR_VAR 0 3
7060: PUSH
7061: LD_VAR 0 4
7065: ST_TO_ADDR
// end ;
7066: LD_VAR 0 3
7070: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7071: LD_INT 0
7073: PPUSH
7074: PPUSH
7075: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7076: LD_ADDR_VAR 0 1
7080: PUSH
7081: LD_VAR 0 1
7085: PUSH
7086: LD_EXP 38
7090: PUSH
7091: LD_EXP 46
7095: PUSH
7096: LD_EXP 43
7100: PUSH
7101: LD_EXP 45
7105: PUSH
7106: EMPTY
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: DIFF
7112: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7113: LD_ADDR_VAR 0 7
7117: PUSH
7118: LD_VAR 0 1
7122: PUSH
7123: LD_INT 1
7125: PPUSH
7126: LD_VAR 0 1
7130: PPUSH
7131: CALL_OW 12
7135: ARRAY
7136: ST_TO_ADDR
// if radio then
7137: LD_VAR 0 4
7141: IFFALSE 7190
// begin if GetSex ( speaker ) = sex_male then
7143: LD_VAR 0 7
7147: PPUSH
7148: CALL_OW 258
7152: PUSH
7153: LD_INT 1
7155: EQUAL
7156: IFFALSE 7174
// SayRadio ( speaker , dialogMID ) else
7158: LD_VAR 0 7
7162: PPUSH
7163: LD_VAR 0 2
7167: PPUSH
7168: CALL_OW 94
7172: GO 7188
// SayRadio ( speaker , dialogFID ) ;
7174: LD_VAR 0 7
7178: PPUSH
7179: LD_VAR 0 3
7183: PPUSH
7184: CALL_OW 94
// end else
7188: GO 7235
// begin if GetSex ( speaker ) = sex_male then
7190: LD_VAR 0 7
7194: PPUSH
7195: CALL_OW 258
7199: PUSH
7200: LD_INT 1
7202: EQUAL
7203: IFFALSE 7221
// Say ( speaker , dialogMID ) else
7205: LD_VAR 0 7
7209: PPUSH
7210: LD_VAR 0 2
7214: PPUSH
7215: CALL_OW 88
7219: GO 7235
// Say ( speaker , dialogFID ) ;
7221: LD_VAR 0 7
7225: PPUSH
7226: LD_VAR 0 3
7230: PPUSH
7231: CALL_OW 88
// end ; result := speaker ;
7235: LD_ADDR_VAR 0 5
7239: PUSH
7240: LD_VAR 0 7
7244: ST_TO_ADDR
// end ;
7245: LD_VAR 0 5
7249: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
7250: LD_INT 0
7252: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
7253: LD_VAR 0 1
7257: PPUSH
7258: CALL_OW 255
7262: PUSH
7263: LD_OWVAR 2
7267: EQUAL
7268: PUSH
7269: LD_VAR 0 1
7273: PPUSH
7274: CALL_OW 302
7278: AND
7279: IFFALSE 7301
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7281: LD_VAR 0 1
7285: PPUSH
7286: LD_EXP 25
7290: PUSH
7291: LD_VAR 0 2
7295: STR
7296: PPUSH
7297: CALL_OW 38
// end ;
7301: LD_VAR 0 3
7305: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
7306: LD_INT 0
7308: PPUSH
7309: PPUSH
7310: PPUSH
// resultCharactersToSave = [ ] ;
7311: LD_ADDR_VAR 0 5
7315: PUSH
7316: EMPTY
7317: ST_TO_ADDR
// for unit in characters do
7318: LD_ADDR_VAR 0 4
7322: PUSH
7323: LD_VAR 0 1
7327: PUSH
7328: FOR_IN
7329: IFFALSE 7377
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
7331: LD_VAR 0 4
7335: PPUSH
7336: CALL_OW 255
7340: PUSH
7341: LD_OWVAR 2
7345: EQUAL
7346: PUSH
7347: LD_VAR 0 4
7351: PPUSH
7352: CALL_OW 302
7356: AND
7357: IFFALSE 7375
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7359: LD_ADDR_VAR 0 5
7363: PUSH
7364: LD_VAR 0 5
7368: PUSH
7369: LD_VAR 0 4
7373: ADD
7374: ST_TO_ADDR
7375: GO 7328
7377: POP
7378: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7379: LD_VAR 0 5
7383: PPUSH
7384: LD_EXP 25
7388: PUSH
7389: LD_VAR 0 2
7393: STR
7394: PPUSH
7395: CALL_OW 38
// end ;
7399: LD_VAR 0 3
7403: RET
// export function MoveToHill ; begin
7404: LD_INT 0
7406: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
7407: LD_EXP 39
7411: PPUSH
7412: LD_INT 65
7414: PPUSH
7415: LD_INT 59
7417: PPUSH
7418: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
7422: LD_EXP 39
7426: PPUSH
7427: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
7431: LD_EXP 40
7435: PPUSH
7436: LD_INT 65
7438: PPUSH
7439: LD_INT 58
7441: PPUSH
7442: CALL_OW 111
// AddComCrawl ( Saseda ) ;
7446: LD_EXP 40
7450: PPUSH
7451: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
7455: LD_EXP 41
7459: PPUSH
7460: LD_INT 64
7462: PPUSH
7463: LD_INT 57
7465: PPUSH
7466: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
7470: LD_EXP 41
7474: PPUSH
7475: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
7479: LD_EXP 42
7483: PPUSH
7484: LD_INT 64
7486: PPUSH
7487: LD_INT 56
7489: PPUSH
7490: CALL_OW 111
// AddComCrawl ( Balei ) ;
7494: LD_EXP 42
7498: PPUSH
7499: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
7503: LD_EXP 43
7507: PPUSH
7508: LD_INT 63
7510: PPUSH
7511: LD_INT 55
7513: PPUSH
7514: CALL_OW 111
// AddComCrawl ( Belkov ) ;
7518: LD_EXP 43
7522: PPUSH
7523: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
7527: LD_EXP 44
7531: PPUSH
7532: LD_INT 66
7534: PPUSH
7535: LD_INT 58
7537: PPUSH
7538: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
7542: LD_EXP 44
7546: PPUSH
7547: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
7551: LD_EXP 46
7555: PPUSH
7556: CALL_OW 255
7560: PUSH
7561: LD_INT 6
7563: EQUAL
7564: PUSH
7565: LD_EXP 10
7569: AND
7570: IFFALSE 7596
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
7572: LD_EXP 46
7576: PPUSH
7577: LD_INT 63
7579: PPUSH
7580: LD_INT 54
7582: PPUSH
7583: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
7587: LD_EXP 46
7591: PPUSH
7592: CALL_OW 197
// end ; end ; end_of_file
7596: LD_VAR 0 1
7600: RET
// export function BurlakDying ; begin
7601: LD_INT 0
7603: PPUSH
// YouLost ( Burlak ) ;
7604: LD_STRING Burlak
7606: PPUSH
7607: CALL_OW 104
// end ;
7611: LD_VAR 0 1
7615: RET
// every 0 0$1 trigger kirovSolds = 0 do
7616: LD_EXP 48
7620: PUSH
7621: LD_INT 0
7623: EQUAL
7624: IFFALSE 7636
7626: GO 7628
7628: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
7629: LD_STRING KirovSoldsDie
7631: PPUSH
7632: CALL_OW 104
7636: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
7637: LD_EXP 20
7641: PUSH
7642: LD_INT 1
7644: PPUSH
7645: LD_INT 22
7647: PUSH
7648: LD_INT 3
7650: PUSH
7651: EMPTY
7652: LIST
7653: LIST
7654: PUSH
7655: LD_INT 21
7657: PUSH
7658: LD_INT 1
7660: PUSH
7661: EMPTY
7662: LIST
7663: LIST
7664: PUSH
7665: EMPTY
7666: LIST
7667: LIST
7668: PPUSH
7669: CALL_OW 71
7673: PUSH
7674: LD_INT 0
7676: EQUAL
7677: AND
7678: IFFALSE 7822
7680: GO 7682
7682: DISABLE
7683: LD_INT 0
7685: PPUSH
// begin case Query ( QExit2 ) of 1 :
7686: LD_STRING QExit2
7688: PPUSH
7689: CALL_OW 97
7693: PUSH
7694: LD_INT 1
7696: DOUBLE
7697: EQUAL
7698: IFTRUE 7702
7700: GO 7802
7702: POP
// begin if IsOk ( Belkov ) then
7703: LD_EXP 43
7707: PPUSH
7708: CALL_OW 302
7712: IFFALSE 7728
// Say ( Belkov , D12-Bel-1 ) else
7714: LD_EXP 43
7718: PPUSH
7719: LD_STRING D12-Bel-1
7721: PPUSH
7722: CALL_OW 88
7726: GO 7788
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
7728: LD_INT 22
7730: PUSH
7731: LD_INT 3
7733: PUSH
7734: EMPTY
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 21
7740: PUSH
7741: LD_INT 1
7743: PUSH
7744: EMPTY
7745: LIST
7746: LIST
7747: PUSH
7748: LD_INT 50
7750: PUSH
7751: EMPTY
7752: LIST
7753: PUSH
7754: LD_INT 26
7756: PUSH
7757: LD_INT 1
7759: PUSH
7760: EMPTY
7761: LIST
7762: LIST
7763: PUSH
7764: EMPTY
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: PPUSH
7770: CALL_OW 69
7774: PPUSH
7775: LD_STRING D12-RSol1-1
7777: PPUSH
7778: LD_STRING 
7780: PPUSH
7781: LD_INT 0
7783: PPUSH
7784: CALL 7071 0 4
// SetRewards ;
7788: CALL 7825 0 0
// SavePlayerCharacters ;
7792: CALL 8176 0 0
// YouWin ;
7796: CALL_OW 103
// end ; 2 :
7800: GO 7822
7802: LD_INT 2
7804: DOUBLE
7805: EQUAL
7806: IFTRUE 7810
7808: GO 7821
7810: POP
// begin wait ( 0 0$5 ) ;
7811: LD_INT 175
7813: PPUSH
7814: CALL_OW 67
// enable ;
7818: ENABLE
// end ; end ;
7819: GO 7822
7821: POP
// end ;
7822: PPOPN 1
7824: END
// function SetRewards ; begin
7825: LD_INT 0
7827: PPUSH
// if not gladstoneEscape and not JohannaEscape then
7828: LD_EXP 17
7832: NOT
7833: PUSH
7834: LD_EXP 18
7838: NOT
7839: AND
7840: IFFALSE 7852
// AddMedal ( NoEscape , 1 ) ;
7842: LD_STRING NoEscape
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
7852: LD_EXP 17
7856: PUSH
7857: LD_EXP 18
7861: NOT
7862: AND
7863: IFFALSE 7876
// AddMedal ( NoEscape , - 1 ) ;
7865: LD_STRING NoEscape
7867: PPUSH
7868: LD_INT 1
7870: NEG
7871: PPUSH
7872: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
7876: LD_EXP 17
7880: NOT
7881: PUSH
7882: LD_EXP 18
7886: AND
7887: IFFALSE 7900
// AddMedal ( NoEscape , - 2 ) ;
7889: LD_STRING NoEscape
7891: PPUSH
7892: LD_INT 2
7894: NEG
7895: PPUSH
7896: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
7900: LD_EXP 17
7904: PUSH
7905: LD_EXP 18
7909: AND
7910: IFFALSE 7923
// AddMedal ( NoEscape , - 3 ) ;
7912: LD_STRING NoEscape
7914: PPUSH
7915: LD_INT 3
7917: NEG
7918: PPUSH
7919: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
7923: LD_EXP 10
7927: PUSH
7928: LD_EXP 46
7932: PPUSH
7933: CALL_OW 302
7937: AND
7938: PUSH
7939: LD_EXP 19
7943: AND
7944: PUSH
7945: LD_EXP 45
7949: PPUSH
7950: CALL_OW 302
7954: AND
7955: IFFALSE 7967
// AddMedal ( Gnyevko , 1 ) ;
7957: LD_STRING Gnyevko
7959: PPUSH
7960: LD_INT 1
7962: PPUSH
7963: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
7967: LD_EXP 10
7971: NOT
7972: PUSH
7973: LD_EXP 19
7977: AND
7978: PUSH
7979: LD_EXP 45
7983: PPUSH
7984: CALL_OW 302
7988: AND
7989: IFFALSE 8002
// AddMedal ( Gnyevko , - 1 ) ;
7991: LD_STRING Gnyevko
7993: PPUSH
7994: LD_INT 1
7996: NEG
7997: PPUSH
7998: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
8002: LD_EXP 10
8006: PUSH
8007: LD_EXP 19
8011: NOT
8012: PUSH
8013: LD_EXP 46
8017: PPUSH
8018: CALL_OW 302
8022: NOT
8023: OR
8024: PUSH
8025: LD_EXP 45
8029: PPUSH
8030: CALL_OW 302
8034: NOT
8035: OR
8036: AND
8037: IFFALSE 8050
// AddMedal ( Gnyevko , - 2 ) ;
8039: LD_STRING Gnyevko
8041: PPUSH
8042: LD_INT 2
8044: NEG
8045: PPUSH
8046: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
8050: LD_EXP 10
8054: NOT
8055: PUSH
8056: LD_EXP 19
8060: NOT
8061: AND
8062: PUSH
8063: LD_EXP 46
8067: PPUSH
8068: CALL_OW 302
8072: NOT
8073: PUSH
8074: LD_EXP 45
8078: PPUSH
8079: CALL_OW 302
8083: NOT
8084: AND
8085: OR
8086: IFFALSE 8099
// AddMedal ( Gnyevko , - 3 ) ;
8088: LD_STRING Gnyevko
8090: PPUSH
8091: LD_INT 3
8093: NEG
8094: PPUSH
8095: CALL_OW 101
// if lostComradesCounter = 0 then
8099: LD_EXP 21
8103: PUSH
8104: LD_INT 0
8106: EQUAL
8107: IFFALSE 8121
// AddMedal ( NoLosses , 1 ) else
8109: LD_STRING NoLosses
8111: PPUSH
8112: LD_INT 1
8114: PPUSH
8115: CALL_OW 101
8119: GO 8131
// AddMedal ( NoLosses , 0 ) ;
8121: LD_STRING NoLosses
8123: PPUSH
8124: LD_INT 0
8126: PPUSH
8127: CALL_OW 101
// GiveMedals ( Main ) ;
8131: LD_STRING Main
8133: PPUSH
8134: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
8138: LD_INT 22
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: EMPTY
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 21
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: EMPTY
8159: LIST
8160: LIST
8161: PPUSH
8162: CALL_OW 69
8166: PPUSH
8167: CALL_OW 43
// end ;
8171: LD_VAR 0 1
8175: RET
// function SavePlayerCharacters ; var others ; begin
8176: LD_INT 0
8178: PPUSH
8179: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
8180: LD_EXP 38
8184: PPUSH
8185: LD_STRING Burlak
8187: PPUSH
8188: CALL 7250 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
8192: LD_EXP 46
8196: PPUSH
8197: LD_STRING Gnyevko
8199: PPUSH
8200: CALL 7250 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
8204: LD_EXP 43
8208: PPUSH
8209: LD_STRING Belkov
8211: PPUSH
8212: CALL 7250 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
8216: LD_EXP 45
8220: PPUSH
8221: LD_STRING Kirilenkova
8223: PPUSH
8224: CALL 7250 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8228: LD_ADDR_VAR 0 2
8232: PUSH
8233: LD_INT 22
8235: PUSH
8236: LD_INT 3
8238: PUSH
8239: EMPTY
8240: LIST
8241: LIST
8242: PUSH
8243: LD_INT 21
8245: PUSH
8246: LD_INT 1
8248: PUSH
8249: EMPTY
8250: LIST
8251: LIST
8252: PUSH
8253: EMPTY
8254: LIST
8255: LIST
8256: PPUSH
8257: CALL_OW 69
8261: PUSH
8262: LD_EXP 38
8266: PUSH
8267: LD_EXP 46
8271: PUSH
8272: LD_EXP 43
8276: PUSH
8277: LD_EXP 45
8281: PUSH
8282: EMPTY
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: DIFF
8288: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
8289: LD_VAR 0 2
8293: PPUSH
8294: LD_STRING other_survivors
8296: PPUSH
8297: CALL 7306 0 2
// end ; end_of_file
8301: LD_VAR 0 1
8305: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
8306: LD_INT 0
8308: PPUSH
8309: PPUSH
8310: PPUSH
// uc_side = 1 ;
8311: LD_ADDR_OWVAR 20
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// hc_class := 1 ;
8319: LD_ADDR_OWVAR 28
8323: PUSH
8324: LD_INT 1
8326: ST_TO_ADDR
// hc_sex := sex_male ;
8327: LD_ADDR_OWVAR 27
8331: PUSH
8332: LD_INT 1
8334: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
8335: LD_ADDR_OWVAR 33
8339: PUSH
8340: LD_STRING AmGalRemake
8342: ST_TO_ADDR
// hc_face_number := 1 ;
8343: LD_ADDR_OWVAR 34
8347: PUSH
8348: LD_INT 1
8350: ST_TO_ADDR
// hc_name := Charles Brown ;
8351: LD_ADDR_OWVAR 26
8355: PUSH
8356: LD_STRING Charles Brown
8358: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
8359: LD_ADDR_OWVAR 29
8363: PUSH
8364: LD_INT 12
8366: PUSH
8367: LD_INT 11
8369: PUSH
8370: EMPTY
8371: LIST
8372: LIST
8373: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
8374: LD_ADDR_OWVAR 31
8378: PUSH
8379: LD_INT 1
8381: PUSH
8382: LD_INT 0
8384: PUSH
8385: LD_INT 1
8387: PUSH
8388: LD_INT 1
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: ST_TO_ADDR
// Charles = CreateHuman ;
8397: LD_ADDR_EXP 34
8401: PUSH
8402: CALL_OW 44
8406: ST_TO_ADDR
// hc_class := 1 ;
8407: LD_ADDR_OWVAR 28
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// hc_sex := sex_female ;
8415: LD_ADDR_OWVAR 27
8419: PUSH
8420: LD_INT 2
8422: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
8423: LD_ADDR_OWVAR 33
8427: PUSH
8428: LD_STRING AmGalRemake
8430: ST_TO_ADDR
// hc_face_number := 2 ;
8431: LD_ADDR_OWVAR 34
8435: PUSH
8436: LD_INT 2
8438: ST_TO_ADDR
// hc_name := Johanna Holland ;
8439: LD_ADDR_OWVAR 26
8443: PUSH
8444: LD_STRING Johanna Holland
8446: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
8447: LD_ADDR_OWVAR 29
8451: PUSH
8452: LD_INT 12
8454: PUSH
8455: LD_INT 11
8457: PUSH
8458: EMPTY
8459: LIST
8460: LIST
8461: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
8462: LD_ADDR_OWVAR 31
8466: PUSH
8467: LD_EXP 31
8471: PUSH
8472: LD_INT 0
8474: PPUSH
8475: LD_INT 2
8477: PPUSH
8478: CALL_OW 12
8482: PUSH
8483: LD_INT 0
8485: PPUSH
8486: LD_INT 2
8488: PPUSH
8489: CALL_OW 12
8493: PUSH
8494: LD_INT 0
8496: PPUSH
8497: LD_INT 2
8499: PPUSH
8500: CALL_OW 12
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: ST_TO_ADDR
// Johanna = CreateHuman ;
8511: LD_ADDR_EXP 35
8515: PUSH
8516: CALL_OW 44
8520: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
8521: LD_EXP 35
8525: PPUSH
8526: LD_INT 19
8528: PPUSH
8529: LD_INT 0
8531: PPUSH
8532: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
8536: LD_EXP 35
8540: PPUSH
8541: LD_INT 23
8543: PPUSH
8544: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
8548: LD_ADDR_EXP 36
8552: PUSH
8553: LD_STRING Gladstone
8555: PPUSH
8556: LD_INT 0
8558: PPUSH
8559: CALL 7008 0 2
8563: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
8564: LD_EXP 36
8568: PPUSH
8569: LD_INT 22
8571: PPUSH
8572: CALL_OW 52
// amApemans = [ ] ;
8576: LD_ADDR_EXP 37
8580: PUSH
8581: EMPTY
8582: ST_TO_ADDR
// for i := 1 to amApeAmount do
8583: LD_ADDR_VAR 0 2
8587: PUSH
8588: DOUBLE
8589: LD_INT 1
8591: DEC
8592: ST_TO_ADDR
8593: LD_EXP 30
8597: PUSH
8598: FOR_TO
8599: IFFALSE 8714
// begin hc_class := class_apeman ;
8601: LD_ADDR_OWVAR 28
8605: PUSH
8606: LD_INT 12
8608: ST_TO_ADDR
// hc_gallery :=  ;
8609: LD_ADDR_OWVAR 33
8613: PUSH
8614: LD_STRING 
8616: ST_TO_ADDR
// hc_name :=  ;
8617: LD_ADDR_OWVAR 26
8621: PUSH
8622: LD_STRING 
8624: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
8625: LD_ADDR_OWVAR 31
8629: PUSH
8630: LD_EXP 31
8634: PUSH
8635: LD_INT 0
8637: PPUSH
8638: LD_INT 2
8640: PPUSH
8641: CALL_OW 12
8645: PUSH
8646: LD_INT 0
8648: PPUSH
8649: LD_INT 2
8651: PPUSH
8652: CALL_OW 12
8656: PUSH
8657: LD_INT 0
8659: PPUSH
8660: LD_INT 2
8662: PPUSH
8663: CALL_OW 12
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: ST_TO_ADDR
// ape = CreateHuman ;
8674: LD_ADDR_VAR 0 3
8678: PUSH
8679: CALL_OW 44
8683: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
8684: LD_VAR 0 3
8688: PPUSH
8689: LD_INT 22
8691: PPUSH
8692: CALL_OW 52
// amApemans = amApemans ^ ape ;
8696: LD_ADDR_EXP 37
8700: PUSH
8701: LD_EXP 37
8705: PUSH
8706: LD_VAR 0 3
8710: ADD
8711: ST_TO_ADDR
// end ;
8712: GO 8598
8714: POP
8715: POP
// SetLives ( am_bun , americanBunkerHP ) ;
8716: LD_INT 23
8718: PPUSH
8719: LD_EXP 28
8723: PPUSH
8724: CALL_OW 234
// end ; end_of_file
8728: LD_VAR 0 1
8732: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
8733: LD_INT 0
8735: PPUSH
// PrepareHero ;
8736: CALL 8761 0 0
// PreparePokryshkinTeams ;
8740: CALL 8855 0 0
// PrepareJelena ;
8744: CALL 9100 0 0
// PrepareGnyevko ;
8748: CALL 9132 0 0
// PrepareKurin ;
8752: CALL 8823 0 0
// end ;
8756: LD_VAR 0 1
8760: RET
// function PrepareHero ; begin
8761: LD_INT 0
8763: PPUSH
// uc_side = 3 ;
8764: LD_ADDR_OWVAR 20
8768: PUSH
8769: LD_INT 3
8771: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
8772: LD_ADDR_EXP 38
8776: PUSH
8777: LD_STRING Burlak
8779: PPUSH
8780: LD_INT 0
8782: PPUSH
8783: CALL 7008 0 2
8787: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
8788: LD_EXP 38
8792: PPUSH
8793: LD_EXP 32
8797: PUSH
8798: LD_INT 1
8800: ARRAY
8801: PPUSH
8802: LD_EXP 32
8806: PUSH
8807: LD_INT 2
8809: ARRAY
8810: PPUSH
8811: LD_INT 1
8813: PPUSH
8814: CALL_OW 48
// end ;
8818: LD_VAR 0 1
8822: RET
// function PrepareKurin ; begin
8823: LD_INT 0
8825: PPUSH
// uc_side = 6 ;
8826: LD_ADDR_OWVAR 20
8830: PUSH
8831: LD_INT 6
8833: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
8834: LD_ADDR_EXP 47
8838: PUSH
8839: LD_STRING Kurin
8841: PPUSH
8842: LD_INT 0
8844: PPUSH
8845: CALL 7008 0 2
8849: ST_TO_ADDR
// end ;
8850: LD_VAR 0 1
8854: RET
// function PreparePokryshkinTeams ; begin
8855: LD_INT 0
8857: PPUSH
// uc_side = 6 ;
8858: LD_ADDR_OWVAR 20
8862: PUSH
8863: LD_INT 6
8865: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
8866: LD_ADDR_EXP 39
8870: PUSH
8871: LD_STRING Pokryshkin
8873: PPUSH
8874: LD_INT 0
8876: PPUSH
8877: CALL 7008 0 2
8881: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
8882: LD_ADDR_EXP 40
8886: PUSH
8887: LD_STRING Saseda
8889: PPUSH
8890: LD_INT 0
8892: PPUSH
8893: CALL 7008 0 2
8897: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
8898: LD_ADDR_EXP 41
8902: PUSH
8903: LD_STRING Jaworska
8905: PPUSH
8906: LD_INT 0
8908: PPUSH
8909: CALL 7008 0 2
8913: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
8914: LD_ADDR_EXP 42
8918: PUSH
8919: LD_STRING Balei
8921: PPUSH
8922: LD_INT 0
8924: PPUSH
8925: CALL 7008 0 2
8929: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
8930: LD_ADDR_EXP 43
8934: PUSH
8935: LD_STRING Belkov
8937: PPUSH
8938: LD_INT 0
8940: PPUSH
8941: CALL 7008 0 2
8945: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
8946: LD_ADDR_EXP 44
8950: PUSH
8951: LD_STRING Jaunzeme
8953: PPUSH
8954: LD_INT 0
8956: PPUSH
8957: CALL 7008 0 2
8961: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , Ru2SpawnArea , false ) ;
8962: LD_EXP 39
8966: PPUSH
8967: LD_INT 17
8969: PPUSH
8970: LD_INT 0
8972: PPUSH
8973: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
8977: LD_EXP 40
8981: PPUSH
8982: LD_INT 17
8984: PPUSH
8985: LD_INT 0
8987: PPUSH
8988: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
8992: LD_EXP 41
8996: PPUSH
8997: LD_INT 17
8999: PPUSH
9000: LD_INT 0
9002: PPUSH
9003: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
9007: LD_EXP 42
9011: PPUSH
9012: LD_INT 17
9014: PPUSH
9015: LD_INT 0
9017: PPUSH
9018: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
9022: LD_EXP 43
9026: PPUSH
9027: LD_INT 17
9029: PPUSH
9030: LD_INT 0
9032: PPUSH
9033: CALL_OW 49
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea , false ) ;
9037: LD_EXP 44
9041: PPUSH
9042: LD_INT 17
9044: PPUSH
9045: LD_INT 0
9047: PPUSH
9048: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Jaunzeme , Balei , Belkov , Jaworska ] ;
9052: LD_ADDR_EXP 48
9056: PUSH
9057: LD_EXP 39
9061: PUSH
9062: LD_EXP 40
9066: PUSH
9067: LD_EXP 44
9071: PUSH
9072: LD_EXP 42
9076: PUSH
9077: LD_EXP 43
9081: PUSH
9082: LD_EXP 41
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: ST_TO_ADDR
// end ;
9095: LD_VAR 0 1
9099: RET
// function PrepareJelena ; begin
9100: LD_INT 0
9102: PPUSH
// uc_side = 8 ;
9103: LD_ADDR_OWVAR 20
9107: PUSH
9108: LD_INT 8
9110: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
9111: LD_ADDR_EXP 45
9115: PUSH
9116: LD_STRING Kirilenkova
9118: PPUSH
9119: LD_INT 0
9121: PPUSH
9122: CALL 7008 0 2
9126: ST_TO_ADDR
// end ;
9127: LD_VAR 0 1
9131: RET
// function PrepareGnyevko ; var randomPosition ; begin
9132: LD_INT 0
9134: PPUSH
9135: PPUSH
// uc_side = 8 ;
9136: LD_ADDR_OWVAR 20
9140: PUSH
9141: LD_INT 8
9143: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
9144: LD_ADDR_EXP 46
9148: PUSH
9149: LD_STRING Gnyevko
9151: PPUSH
9152: LD_INT 0
9154: PPUSH
9155: CALL 7008 0 2
9159: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
9160: LD_ADDR_VAR 0 2
9164: PUSH
9165: LD_EXP 33
9169: PUSH
9170: LD_INT 1
9172: PPUSH
9173: LD_EXP 33
9177: PPUSH
9178: CALL_OW 12
9182: ARRAY
9183: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
9184: LD_EXP 46
9188: PPUSH
9189: LD_VAR 0 2
9193: PUSH
9194: LD_INT 1
9196: ARRAY
9197: PPUSH
9198: LD_VAR 0 2
9202: PUSH
9203: LD_INT 2
9205: ARRAY
9206: PPUSH
9207: LD_INT 0
9209: PPUSH
9210: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
9214: LD_EXP 46
9218: PPUSH
9219: LD_INT 500
9221: PPUSH
9222: CALL_OW 234
// ComHold ( Gnyevko ) ;
9226: LD_EXP 46
9230: PPUSH
9231: CALL_OW 140
// end ; end_of_file
9235: LD_VAR 0 1
9239: RET
// export function PrepareNature ; var i , un ; begin
9240: LD_INT 0
9242: PPUSH
9243: PPUSH
9244: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
9245: LD_ADDR_VAR 0 2
9249: PUSH
9250: DOUBLE
9251: LD_INT 1
9253: DEC
9254: ST_TO_ADDR
9255: LD_EXP 22
9259: PUSH
9260: LD_INT 1
9262: ARRAY
9263: PUSH
9264: FOR_TO
9265: IFFALSE 9375
// begin uc_side = 0 ;
9267: LD_ADDR_OWVAR 20
9271: PUSH
9272: LD_INT 0
9274: ST_TO_ADDR
// uc_nation = nation_nature ;
9275: LD_ADDR_OWVAR 21
9279: PUSH
9280: LD_INT 0
9282: ST_TO_ADDR
// hc_class = class_apeman ;
9283: LD_ADDR_OWVAR 28
9287: PUSH
9288: LD_INT 12
9290: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9291: LD_ADDR_OWVAR 31
9295: PUSH
9296: LD_EXP 23
9300: PUSH
9301: LD_INT 1
9303: ARRAY
9304: PUSH
9305: LD_EXP 23
9309: PUSH
9310: LD_INT 2
9312: ARRAY
9313: PUSH
9314: LD_EXP 23
9318: PUSH
9319: LD_INT 3
9321: ARRAY
9322: PUSH
9323: LD_EXP 23
9327: PUSH
9328: LD_INT 4
9330: ARRAY
9331: PUSH
9332: EMPTY
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: ST_TO_ADDR
// hc_agressivity = apeAgression ;
9338: LD_ADDR_OWVAR 35
9342: PUSH
9343: LD_EXP 29
9347: ST_TO_ADDR
// un = CreateHuman ;
9348: LD_ADDR_VAR 0 3
9352: PUSH
9353: CALL_OW 44
9357: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
9358: LD_VAR 0 3
9362: PPUSH
9363: LD_INT 16
9365: PPUSH
9366: LD_INT 0
9368: PPUSH
9369: CALL_OW 49
// end ;
9373: GO 9264
9375: POP
9376: POP
// for i := 1 to animalsAmount [ 2 ] do
9377: LD_ADDR_VAR 0 2
9381: PUSH
9382: DOUBLE
9383: LD_INT 1
9385: DEC
9386: ST_TO_ADDR
9387: LD_EXP 22
9391: PUSH
9392: LD_INT 2
9394: ARRAY
9395: PUSH
9396: FOR_TO
9397: IFFALSE 9507
// begin uc_side = 0 ;
9399: LD_ADDR_OWVAR 20
9403: PUSH
9404: LD_INT 0
9406: ST_TO_ADDR
// uc_nation = nation_nature ;
9407: LD_ADDR_OWVAR 21
9411: PUSH
9412: LD_INT 0
9414: ST_TO_ADDR
// hc_class = class_phororhacos ;
9415: LD_ADDR_OWVAR 28
9419: PUSH
9420: LD_INT 18
9422: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9423: LD_ADDR_OWVAR 31
9427: PUSH
9428: LD_EXP 23
9432: PUSH
9433: LD_INT 1
9435: ARRAY
9436: PUSH
9437: LD_EXP 23
9441: PUSH
9442: LD_INT 2
9444: ARRAY
9445: PUSH
9446: LD_EXP 23
9450: PUSH
9451: LD_INT 3
9453: ARRAY
9454: PUSH
9455: LD_EXP 23
9459: PUSH
9460: LD_INT 4
9462: ARRAY
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
9470: LD_ADDR_OWVAR 35
9474: PUSH
9475: LD_EXP 24
9479: ST_TO_ADDR
// un = CreateHuman ;
9480: LD_ADDR_VAR 0 3
9484: PUSH
9485: CALL_OW 44
9489: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
9490: LD_VAR 0 3
9494: PPUSH
9495: LD_INT 15
9497: PPUSH
9498: LD_INT 0
9500: PPUSH
9501: CALL_OW 49
// end ;
9505: GO 9396
9507: POP
9508: POP
// for i := 1 to animalsAmount [ 3 ] do
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: DOUBLE
9515: LD_INT 1
9517: DEC
9518: ST_TO_ADDR
9519: LD_EXP 22
9523: PUSH
9524: LD_INT 3
9526: ARRAY
9527: PUSH
9528: FOR_TO
9529: IFFALSE 9639
// begin uc_side = 0 ;
9531: LD_ADDR_OWVAR 20
9535: PUSH
9536: LD_INT 0
9538: ST_TO_ADDR
// uc_nation = nation_nature ;
9539: LD_ADDR_OWVAR 21
9543: PUSH
9544: LD_INT 0
9546: ST_TO_ADDR
// hc_class = class_tiger ;
9547: LD_ADDR_OWVAR 28
9551: PUSH
9552: LD_INT 14
9554: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9555: LD_ADDR_OWVAR 31
9559: PUSH
9560: LD_EXP 23
9564: PUSH
9565: LD_INT 1
9567: ARRAY
9568: PUSH
9569: LD_EXP 23
9573: PUSH
9574: LD_INT 2
9576: ARRAY
9577: PUSH
9578: LD_EXP 23
9582: PUSH
9583: LD_INT 3
9585: ARRAY
9586: PUSH
9587: LD_EXP 23
9591: PUSH
9592: LD_INT 4
9594: ARRAY
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
9602: LD_ADDR_OWVAR 35
9606: PUSH
9607: LD_EXP 24
9611: ST_TO_ADDR
// un = CreateHuman ;
9612: LD_ADDR_VAR 0 3
9616: PUSH
9617: CALL_OW 44
9621: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
9622: LD_VAR 0 3
9626: PPUSH
9627: LD_INT 15
9629: PPUSH
9630: LD_INT 0
9632: PPUSH
9633: CALL_OW 49
// end ;
9637: GO 9528
9639: POP
9640: POP
// for i := 1 to animalsAmount [ 4 ] do
9641: LD_ADDR_VAR 0 2
9645: PUSH
9646: DOUBLE
9647: LD_INT 1
9649: DEC
9650: ST_TO_ADDR
9651: LD_EXP 22
9655: PUSH
9656: LD_INT 4
9658: ARRAY
9659: PUSH
9660: FOR_TO
9661: IFFALSE 9771
// begin uc_side = 0 ;
9663: LD_ADDR_OWVAR 20
9667: PUSH
9668: LD_INT 0
9670: ST_TO_ADDR
// uc_nation = nation_nature ;
9671: LD_ADDR_OWVAR 21
9675: PUSH
9676: LD_INT 0
9678: ST_TO_ADDR
// hc_class = 21 ;
9679: LD_ADDR_OWVAR 28
9683: PUSH
9684: LD_INT 21
9686: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9687: LD_ADDR_OWVAR 31
9691: PUSH
9692: LD_EXP 23
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PUSH
9701: LD_EXP 23
9705: PUSH
9706: LD_INT 2
9708: ARRAY
9709: PUSH
9710: LD_EXP 23
9714: PUSH
9715: LD_INT 3
9717: ARRAY
9718: PUSH
9719: LD_EXP 23
9723: PUSH
9724: LD_INT 4
9726: ARRAY
9727: PUSH
9728: EMPTY
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
9734: LD_ADDR_OWVAR 35
9738: PUSH
9739: LD_EXP 24
9743: ST_TO_ADDR
// un = CreateHuman ;
9744: LD_ADDR_VAR 0 3
9748: PUSH
9749: CALL_OW 44
9753: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
9754: LD_VAR 0 3
9758: PPUSH
9759: LD_INT 15
9761: PPUSH
9762: LD_INT 0
9764: PPUSH
9765: CALL_OW 49
// end ;
9769: GO 9660
9771: POP
9772: POP
// end ; end_of_file
9773: LD_VAR 0 1
9777: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
9778: LD_VAR 0 1
9782: PUSH
9783: LD_EXP 38
9787: EQUAL
9788: PUSH
9789: LD_EXP 45
9793: PPUSH
9794: CALL_OW 255
9798: PUSH
9799: LD_INT 3
9801: EQUAL
9802: NOT
9803: AND
9804: PUSH
9805: LD_EXP 45
9809: PPUSH
9810: CALL_OW 302
9814: NOT
9815: AND
9816: IFFALSE 9822
// BurlakDying ;
9818: CALL 7601 0 0
// if unit = Gladstone then
9822: LD_VAR 0 1
9826: PUSH
9827: LD_EXP 36
9831: EQUAL
9832: IFFALSE 9842
// gladstoneStatus = 0 ;
9834: LD_ADDR_EXP 1
9838: PUSH
9839: LD_INT 0
9841: ST_TO_ADDR
// if unit = Johanna then
9842: LD_VAR 0 1
9846: PUSH
9847: LD_EXP 35
9851: EQUAL
9852: IFFALSE 9862
// johannaStatus = 0 ;
9854: LD_ADDR_EXP 2
9858: PUSH
9859: LD_INT 0
9861: ST_TO_ADDR
// end ;
9862: PPOPN 1
9864: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9865: LD_VAR 0 1
9869: PUSH
9870: LD_EXP 38
9874: EQUAL
9875: IFFALSE 9881
// BurlakDying ;
9877: CALL 7601 0 0
// if GetSide ( unit ) = 3 then
9881: LD_VAR 0 1
9885: PPUSH
9886: CALL_OW 255
9890: PUSH
9891: LD_INT 3
9893: EQUAL
9894: IFFALSE 9910
// lostComradesCounter = lostComradesCounter + 1 ;
9896: LD_ADDR_EXP 21
9900: PUSH
9901: LD_EXP 21
9905: PUSH
9906: LD_INT 1
9908: PLUS
9909: ST_TO_ADDR
// if unit in kirovSolds then
9910: LD_VAR 0 1
9914: PUSH
9915: LD_EXP 48
9919: IN
9920: IFFALSE 9938
// kirovSolds = kirovSolds diff unit ;
9922: LD_ADDR_EXP 48
9926: PUSH
9927: LD_EXP 48
9931: PUSH
9932: LD_VAR 0 1
9936: DIFF
9937: ST_TO_ADDR
// end ;
9938: PPOPN 1
9940: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
9941: LD_VAR 0 1
9945: PUSH
9946: LD_INT 3
9948: EQUAL
9949: PUSH
9950: LD_VAR 0 2
9954: PUSH
9955: LD_INT 1
9957: EQUAL
9958: AND
9959: PUSH
9960: LD_VAR 0 1
9964: PUSH
9965: LD_INT 1
9967: EQUAL
9968: PUSH
9969: LD_VAR 0 2
9973: PUSH
9974: LD_INT 3
9976: EQUAL
9977: AND
9978: PUSH
9979: LD_EXP 15
9983: PUSH
9984: LD_INT 1
9986: EQUAL
9987: AND
9988: OR
9989: IFFALSE 9995
// Dial_SecondAttack ;
9991: CALL 5155 0 0
// if side1 = 3 and side2 = 6 and not traitor then
9995: LD_VAR 0 1
9999: PUSH
10000: LD_INT 3
10002: EQUAL
10003: PUSH
10004: LD_VAR 0 2
10008: PUSH
10009: LD_INT 6
10011: EQUAL
10012: AND
10013: PUSH
10014: LD_EXP 16
10018: NOT
10019: AND
10020: IFFALSE 10026
// Dialogue_AttackComrade ;
10022: CALL 3350 0 0
// end ; end_of_file
10026: PPOPN 2
10028: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
10029: LD_INT 0
10031: PPUSH
10032: PPUSH
// if not missionNumber then
10033: LD_VAR 0 2
10037: NOT
10038: IFFALSE 10042
// exit ;
10040: GO 10172
// achiv := false ;
10042: LD_ADDR_VAR 0 7
10046: PUSH
10047: LD_INT 0
10049: ST_TO_ADDR
// case campaignNumber of 1 :
10050: LD_VAR 0 1
10054: PUSH
10055: LD_INT 1
10057: DOUBLE
10058: EQUAL
10059: IFTRUE 10063
10061: GO 10074
10063: POP
// achiv := ACH_GOTA ; 2 :
10064: LD_ADDR_VAR 0 7
10068: PUSH
10069: LD_STRING ACH_GOTA
10071: ST_TO_ADDR
10072: GO 10124
10074: LD_INT 2
10076: DOUBLE
10077: EQUAL
10078: IFTRUE 10082
10080: GO 10085
10082: POP
// ; 3 :
10083: GO 10124
10085: LD_INT 3
10087: DOUBLE
10088: EQUAL
10089: IFTRUE 10093
10091: GO 10104
10093: POP
// achiv := ACH_MOTSU ; 4 :
10094: LD_ADDR_VAR 0 7
10098: PUSH
10099: LD_STRING ACH_MOTSU
10101: ST_TO_ADDR
10102: GO 10124
10104: LD_INT 4
10106: DOUBLE
10107: EQUAL
10108: IFTRUE 10112
10110: GO 10123
10112: POP
// achiv := ACH_LOP ; end ;
10113: LD_ADDR_VAR 0 7
10117: PUSH
10118: LD_STRING ACH_LOP
10120: ST_TO_ADDR
10121: GO 10124
10123: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
10124: LD_OWVAR 67
10128: PUSH
10129: LD_INT 3
10131: EQUAL
10132: PUSH
10133: LD_VAR 0 7
10137: AND
10138: PUSH
10139: LD_VAR 0 3
10143: AND
10144: PUSH
10145: LD_VAR 0 4
10149: AND
10150: PUSH
10151: LD_VAR 0 5
10155: AND
10156: IFFALSE 10172
// SetAchievementEX ( achiv , missionNumber ) ;
10158: LD_VAR 0 7
10162: PPUSH
10163: LD_VAR 0 2
10167: PPUSH
10168: CALL_OW 564
// end ;
10172: LD_VAR 0 6
10176: RET
// export function SA_BehemothConstructed ; begin
10177: LD_INT 0
10179: PPUSH
// SetAchievement ( ACH_SMC ) ;
10180: LD_STRING ACH_SMC
10182: PPUSH
10183: CALL_OW 543
// end ;
10187: LD_VAR 0 1
10191: RET
