// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12575 0 0
// PrepareAmericans ;
  28: CALL 12148 0 0
// PrepareNature ;
  32: CALL 13279 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 34
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 35
 454: PUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_INT 6
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 37
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 38
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 39
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 40
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 32
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 37
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 37
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 46
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 46
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 46
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 46
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 46
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 46
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// end ;
1016: LD_VAR 0 1
1020: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1021: LD_EXP 46
1025: PPUSH
1026: LD_INT 74
1028: PPUSH
1029: LD_INT 88
1031: PPUSH
1032: CALL_OW 297
1036: PUSH
1037: LD_INT 5
1039: LESS
1040: PUSH
1041: LD_EXP 3
1045: AND
1046: IFFALSE 1071
1048: GO 1050
1050: DISABLE
// begin spotWaterfall = true ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1059: LD_EXP 46
1063: PPUSH
1064: LD_STRING DWaterfall-Bur-1
1066: PPUSH
1067: CALL_OW 88
// end ;
1071: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1072: LD_EXP 46
1076: PPUSH
1077: LD_INT 130
1079: PPUSH
1080: LD_INT 96
1082: PPUSH
1083: CALL_OW 297
1087: PUSH
1088: LD_INT 5
1090: LESS
1091: PUSH
1092: LD_EXP 3
1096: AND
1097: IFFALSE 1114
1099: GO 1101
1101: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1102: LD_EXP 46
1106: PPUSH
1107: LD_STRING DCorpse-Bur-1
1109: PPUSH
1110: CALL_OW 88
1114: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1115: LD_EXP 4
1119: NOT
1120: IFFALSE 1214
1122: GO 1124
1124: DISABLE
1125: LD_INT 0
1127: PPUSH
// begin enable ;
1128: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1129: LD_ADDR_VAR 0 1
1133: PUSH
1134: LD_INT 22
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 25
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PPUSH
1158: CALL_OW 69
1162: PUSH
1163: FOR_IN
1164: IFFALSE 1212
// if GetDistUnits ( apeman , Burlak ) < 7 then
1166: LD_VAR 0 1
1170: PPUSH
1171: LD_EXP 46
1175: PPUSH
1176: CALL_OW 296
1180: PUSH
1181: LD_INT 7
1183: LESS
1184: IFFALSE 1210
// begin apemansContact = true ;
1186: LD_ADDR_EXP 4
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1194: LD_EXP 46
1198: PPUSH
1199: LD_STRING D2-Bur-1
1201: PPUSH
1202: CALL_OW 88
// exit ;
1206: POP
1207: POP
1208: GO 1214
// end ;
1210: GO 1163
1212: POP
1213: POP
// end ;
1214: PPOPN 1
1216: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1217: LD_EXP 5
1221: NOT
1222: IFFALSE 1338
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
// begin enable ;
1231: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 0
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 25
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 69
1265: PUSH
1266: FOR_IN
1267: IFFALSE 1336
// if Attacks ( apeman ) then
1269: LD_VAR 0 2
1273: PPUSH
1274: CALL_OW 320
1278: IFFALSE 1334
// if GetSide ( Attacks ( apeman ) ) = 3 then
1280: LD_VAR 0 2
1284: PPUSH
1285: CALL_OW 320
1289: PPUSH
1290: CALL_OW 255
1294: PUSH
1295: LD_INT 3
1297: EQUAL
1298: IFFALSE 1334
// begin attackedByApeman = true ;
1300: LD_ADDR_EXP 5
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1308: LD_ADDR_EXP 8
1312: PUSH
1313: LD_VAR 0 2
1317: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1318: LD_EXP 46
1322: PPUSH
1323: LD_STRING D2-Bur-1a
1325: PPUSH
1326: CALL_OW 88
// exit ;
1330: POP
1331: POP
1332: GO 1338
// end ;
1334: GO 1266
1336: POP
1337: POP
// end ;
1338: PPOPN 2
1340: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1341: LD_EXP 6
1345: NOT
1346: IFFALSE 1443
1348: GO 1350
1350: DISABLE
1351: LD_INT 0
1353: PPUSH
1354: PPUSH
// begin enable ;
1355: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 24
1363: PPUSH
1364: LD_INT 22
1366: PUSH
1367: LD_INT 0
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 25
1376: PUSH
1377: LD_INT 12
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PPUSH
1388: CALL_OW 70
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1441
// if Attacks ( apeman ) then
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 320
1405: IFFALSE 1439
// if GetSide ( Attacks ( apeman ) ) = 3 then
1407: LD_VAR 0 2
1411: PPUSH
1412: CALL_OW 320
1416: PPUSH
1417: CALL_OW 255
1421: PUSH
1422: LD_INT 3
1424: EQUAL
1425: IFFALSE 1439
// begin attackedByApemanNearLake = true ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// exit ;
1435: POP
1436: POP
1437: GO 1443
// end ;
1439: GO 1393
1441: POP
1442: POP
// end ;
1443: PPOPN 2
1445: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1446: LD_EXP 9
1450: PPUSH
1451: CALL_OW 303
1455: IFFALSE 1489
1457: GO 1459
1459: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1460: LD_ADDR_EXP 10
1464: PUSH
1465: LD_EXP 9
1469: PPUSH
1470: CALL_OW 250
1474: PUSH
1475: LD_EXP 9
1479: PPUSH
1480: CALL_OW 251
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: ST_TO_ADDR
1489: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1490: LD_EXP 9
1494: PPUSH
1495: CALL_OW 303
1499: PUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_EXP 10
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: PPUSH
1512: LD_EXP 10
1516: PUSH
1517: LD_INT 2
1519: ARRAY
1520: PPUSH
1521: CALL_OW 293
1525: AND
1526: IFFALSE 1910
1528: GO 1530
1530: DISABLE
1531: LD_INT 0
1533: PPUSH
// begin wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1541: LD_EXP 46
1545: PPUSH
1546: LD_STRING D2a-Bur-1
1548: PPUSH
1549: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1553: LD_INT 22
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 21
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PPUSH
1577: CALL_OW 69
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1601
// Say ( Burlak , D2a-Bur-2 ) else
1587: LD_EXP 46
1591: PPUSH
1592: LD_STRING D2a-Bur-2
1594: PPUSH
1595: CALL_OW 88
1599: GO 1910
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1601: LD_ADDR_VAR 0 1
1605: PUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 69
1634: PUSH
1635: LD_EXP 46
1639: PUSH
1640: LD_EXP 54
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: DIFF
1649: PPUSH
1650: LD_EXP 10
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_EXP 10
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: CALL_OW 73
1672: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1673: LD_ADDR_EXP 11
1677: PUSH
1678: LD_VAR 0 1
1682: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1683: LD_VAR 0 1
1687: PPUSH
1688: LD_EXP 10
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: LD_EXP 10
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PPUSH
1706: CALL_OW 111
// case nearUnit of Belkov :
1710: LD_VAR 0 1
1714: PUSH
1715: LD_EXP 51
1719: DOUBLE
1720: EQUAL
1721: IFTRUE 1725
1723: GO 1740
1725: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1726: LD_EXP 51
1730: PPUSH
1731: LD_STRING D2a-Bel-1
1733: PPUSH
1734: CALL_OW 88
1738: GO 1807
1740: LD_EXP 53
1744: DOUBLE
1745: EQUAL
1746: IFTRUE 1750
1748: GO 1765
1750: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1751: LD_EXP 53
1755: PPUSH
1756: LD_STRING D2a-Kir-1
1758: PPUSH
1759: CALL_OW 88
1763: GO 1807
1765: POP
// if GetSex ( nearUnit ) = sex_male then
1766: LD_VAR 0 1
1770: PPUSH
1771: CALL_OW 258
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1795
// Say ( nearUnit , D2a-RSol1-1 ) else
1781: LD_VAR 0 1
1785: PPUSH
1786: LD_STRING D2a-RSol1-1
1788: PPUSH
1789: CALL_OW 88
1793: GO 1807
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1795: LD_VAR 0 1
1799: PPUSH
1800: LD_STRING D2a-RFSol1-1
1802: PPUSH
1803: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1807: LD_EXP 54
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 3
1819: EQUAL
1820: PUSH
1821: LD_EXP 54
1825: PPUSH
1826: CALL_OW 302
1830: AND
1831: IFFALSE 1845
// Say ( Gnyevko , D2a-Gny-1 ) ;
1833: LD_EXP 54
1837: PPUSH
1838: LD_STRING D2a-Gny-1
1840: PPUSH
1841: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 255
1854: PUSH
1855: LD_INT 8
1857: EQUAL
1858: IFFALSE 1910
// begin Say ( Burlak , D12-Bur-1 ) ;
1860: LD_EXP 46
1864: PPUSH
1865: LD_STRING D12-Bur-1
1867: PPUSH
1868: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1872: LD_EXP 51
1876: PPUSH
1877: CALL_OW 255
1881: PUSH
1882: LD_INT 3
1884: EQUAL
1885: PUSH
1886: LD_EXP 51
1890: PPUSH
1891: CALL_OW 302
1895: AND
1896: IFFALSE 1910
// Say ( Belkov , D12-Bel-2 ) ;
1898: LD_EXP 51
1902: PPUSH
1903: LD_STRING D12-Bel-2
1905: PPUSH
1906: CALL_OW 88
// end ; end ; end ;
1910: PPOPN 1
1912: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1913: LD_EXP 12
1917: NOT
1918: PUSH
1919: LD_EXP 40
1923: PUSH
1924: LD_INT 70
1926: GREATER
1927: AND
1928: IFFALSE 1948
1930: GO 1932
1932: DISABLE
// begin enable ;
1933: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1934: LD_EXP 54
1938: PPUSH
1939: LD_EXP 39
1943: PPUSH
1944: CALL_OW 234
// end ;
1948: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1949: LD_INT 3
1951: PPUSH
1952: LD_EXP 54
1956: PPUSH
1957: CALL_OW 292
1961: IFFALSE 2573
1963: GO 1965
1965: DISABLE
1966: LD_INT 0
1968: PPUSH
1969: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1970: LD_EXP 54
1974: PPUSH
1975: CALL_OW 87
// DialogueOn ;
1979: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1983: LD_ADDR_VAR 0 1
1987: PUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 1
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PPUSH
2017: LD_EXP 54
2021: PPUSH
2022: CALL_OW 74
2026: ST_TO_ADDR
// if nearUnit = Burlak then
2027: LD_VAR 0 1
2031: PUSH
2032: LD_EXP 46
2036: EQUAL
2037: IFFALSE 2399
// begin Say ( Burlak , D3-Bur-1 ) ;
2039: LD_EXP 46
2043: PPUSH
2044: LD_STRING D3-Bur-1
2046: PPUSH
2047: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2051: LD_EXP 54
2055: PPUSH
2056: LD_STRING D3-Gny-1
2058: PPUSH
2059: CALL_OW 88
// if apeWithRadioKiller then
2063: LD_EXP 11
2067: IFFALSE 2107
// begin if apeWithRadioKiller = Burlak then
2069: LD_EXP 11
2073: PUSH
2074: LD_EXP 46
2078: EQUAL
2079: IFFALSE 2095
// Say ( Burlak , D3-Bur-2 ) else
2081: LD_EXP 46
2085: PPUSH
2086: LD_STRING D3-Bur-2
2088: PPUSH
2089: CALL_OW 88
2093: GO 2107
// Say ( Burlak , D3-Bur-2a ) ;
2095: LD_EXP 46
2099: PPUSH
2100: LD_STRING D3-Bur-2a
2102: PPUSH
2103: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2107: LD_EXP 46
2111: PPUSH
2112: LD_STRING D3-Bur-2b
2114: PPUSH
2115: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: EQUAL
2151: PUSH
2152: LD_EXP 14
2156: NOT
2157: AND
2158: IFFALSE 2210
// begin Say ( Burlak , D3-Bur-2c ) ;
2160: LD_EXP 46
2164: PPUSH
2165: LD_STRING D3-Bur-2c
2167: PPUSH
2168: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2172: LD_EXP 54
2176: PPUSH
2177: LD_STRING D3-Gny-2
2179: PPUSH
2180: CALL_OW 88
// DialogueOff ;
2184: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2188: LD_EXP 54
2192: PPUSH
2193: LD_INT 3
2195: PPUSH
2196: CALL_OW 235
// gnyevkoSaved = true ;
2200: LD_ADDR_EXP 12
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// exit ;
2208: GO 2573
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2210: LD_INT 22
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: LD_INT 1
2241: GREATER
2242: PUSH
2243: LD_EXP 14
2247: OR
2248: PUSH
2249: LD_EXP 22
2253: NOT
2254: AND
2255: IFFALSE 2307
// begin Say ( Burlak , D3-Bur-2d ) ;
2257: LD_EXP 46
2261: PPUSH
2262: LD_STRING D3-Bur-2d
2264: PPUSH
2265: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2269: LD_EXP 54
2273: PPUSH
2274: LD_STRING D3-Gny-2
2276: PPUSH
2277: CALL_OW 88
// DialogueOff ;
2281: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2285: LD_EXP 54
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL_OW 235
// gnyevkoSaved = true ;
2297: LD_ADDR_EXP 12
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// exit ;
2305: GO 2573
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2307: LD_INT 22
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 21
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PPUSH
2331: CALL_OW 69
2335: PUSH
2336: LD_INT 1
2338: GREATER
2339: PUSH
2340: LD_EXP 22
2344: AND
2345: IFFALSE 2397
// begin Say ( Burlak , D3-Bur-2e ) ;
2347: LD_EXP 46
2351: PPUSH
2352: LD_STRING D3-Bur-2e
2354: PPUSH
2355: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2359: LD_EXP 54
2363: PPUSH
2364: LD_STRING D3-Gny-2
2366: PPUSH
2367: CALL_OW 88
// DialogueOff ;
2371: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2375: LD_EXP 54
2379: PPUSH
2380: LD_INT 3
2382: PPUSH
2383: CALL_OW 235
// gnyevkoSaved = true ;
2387: LD_ADDR_EXP 12
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// exit ;
2395: GO 2573
// end ; end else
2397: GO 2573
// begin if GetSex ( nearUnit ) = sex_male then
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 258
2408: PUSH
2409: LD_INT 1
2411: EQUAL
2412: IFFALSE 2428
// Say ( nearUnit , D3-RSol1-1 ) else
2414: LD_VAR 0 1
2418: PPUSH
2419: LD_STRING D3-RSol1-1
2421: PPUSH
2422: CALL_OW 88
2426: GO 2440
// Say ( nearUnit , D3-RFSol1-1 ) ;
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_STRING D3-RFSol1-1
2435: PPUSH
2436: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2440: LD_EXP 54
2444: PPUSH
2445: LD_STRING D3-Gny-1
2447: PPUSH
2448: CALL_OW 88
// if apeWithRadioKiller then
2452: LD_EXP 11
2456: IFFALSE 2496
// begin if apeWithRadioKiller = Burlak then
2458: LD_EXP 11
2462: PUSH
2463: LD_EXP 46
2467: EQUAL
2468: IFFALSE 2484
// Say ( Burlak , D3-Bur-2 ) else
2470: LD_EXP 46
2474: PPUSH
2475: LD_STRING D3-Bur-2
2477: PPUSH
2478: CALL_OW 88
2482: GO 2496
// Say ( Burlak , D3-Bur-2a ) ;
2484: LD_EXP 46
2488: PPUSH
2489: LD_STRING D3-Bur-2a
2491: PPUSH
2492: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 258
2505: PUSH
2506: LD_INT 1
2508: EQUAL
2509: IFFALSE 2525
// Say ( nearUnit , D3-RSol1-2 ) else
2511: LD_VAR 0 1
2515: PPUSH
2516: LD_STRING D3-RSol1-2
2518: PPUSH
2519: CALL_OW 88
2523: GO 2537
// Say ( nearUnit , D3-RFSol1-2 ) ;
2525: LD_VAR 0 1
2529: PPUSH
2530: LD_STRING D3-RFSol1-2
2532: PPUSH
2533: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2537: LD_EXP 54
2541: PPUSH
2542: LD_STRING D3-Gny-2a
2544: PPUSH
2545: CALL_OW 88
// DialogueOff ;
2549: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2553: LD_EXP 54
2557: PPUSH
2558: LD_INT 3
2560: PPUSH
2561: CALL_OW 235
// gnyevkoSaved = true ;
2565: LD_ADDR_EXP 12
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// end ; end ;
2573: PPOPN 2
2575: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2576: LD_EXP 12
2580: NOT
2581: PUSH
2582: LD_EXP 21
2586: NOT
2587: OR
2588: IFFALSE 2783
2590: GO 2592
2592: DISABLE
2593: LD_INT 0
2595: PPUSH
// begin enable ;
2596: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2597: LD_EXP 12
2601: NOT
2602: PUSH
2603: LD_EXP 40
2607: PUSH
2608: LD_INT 70
2610: GREATER
2611: AND
2612: IFFALSE 2690
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2614: LD_ADDR_VAR 0 1
2618: PUSH
2619: LD_INT 22
2621: PUSH
2622: LD_INT 0
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 25
2631: PUSH
2632: LD_INT 12
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 69
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2688
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: LD_EXP 54
2660: PPUSH
2661: CALL_OW 250
2665: PPUSH
2666: LD_EXP 54
2670: PPUSH
2671: CALL_OW 251
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL 8439 0 5
2686: GO 2648
2688: POP
2689: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2690: LD_EXP 21
2694: NOT
2695: PUSH
2696: LD_EXP 41
2700: PUSH
2701: LD_INT 70
2703: GREATER
2704: AND
2705: IFFALSE 2783
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 12
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 69
2740: PUSH
2741: FOR_IN
2742: IFFALSE 2781
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2744: LD_VAR 0 1
2748: PPUSH
2749: LD_EXP 53
2753: PPUSH
2754: CALL_OW 250
2758: PPUSH
2759: LD_EXP 53
2763: PPUSH
2764: CALL_OW 251
2768: PPUSH
2769: LD_INT 10
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL 8439 0 5
2779: GO 2741
2781: POP
2782: POP
// end ;
2783: PPOPN 1
2785: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2786: LD_EXP 12
2790: NOT
2791: PUSH
2792: LD_EXP 21
2796: NOT
2797: OR
2798: IFFALSE 2909
2800: GO 2802
2802: DISABLE
// begin enable ;
2803: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2804: LD_EXP 12
2808: NOT
2809: PUSH
2810: LD_EXP 40
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: AND
2819: IFFALSE 2835
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2821: LD_ADDR_EXP 40
2825: PUSH
2826: LD_EXP 40
2830: PUSH
2831: LD_INT 35
2833: MINUS
2834: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2835: LD_EXP 53
2839: PPUSH
2840: CALL_OW 305
2844: PUSH
2845: LD_EXP 21
2849: NOT
2850: AND
2851: PUSH
2852: LD_EXP 41
2856: PUSH
2857: LD_INT 0
2859: GREATER
2860: AND
2861: IFFALSE 2877
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2863: LD_ADDR_EXP 41
2867: PUSH
2868: LD_EXP 41
2872: PUSH
2873: LD_INT 35
2875: MINUS
2876: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2877: LD_EXP 53
2881: PPUSH
2882: CALL_OW 305
2886: PUSH
2887: LD_EXP 21
2891: NOT
2892: AND
2893: IFFALSE 2909
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2895: LD_ADDR_EXP 26
2899: PUSH
2900: LD_EXP 26
2904: PUSH
2905: LD_INT 35
2907: PLUS
2908: ST_TO_ADDR
// end ;
2909: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2910: LD_INT 3
2912: PPUSH
2913: LD_EXP 47
2917: PPUSH
2918: CALL_OW 292
2922: PUSH
2923: LD_INT 6
2925: PPUSH
2926: LD_EXP 46
2930: PPUSH
2931: CALL_OW 292
2935: OR
2936: PUSH
2937: LD_EXP 54
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 3
2949: EQUAL
2950: PUSH
2951: LD_INT 6
2953: PPUSH
2954: LD_EXP 54
2958: PPUSH
2959: CALL_OW 292
2963: AND
2964: OR
2965: PUSH
2966: LD_EXP 14
2970: NOT
2971: AND
2972: IFFALSE 3887
2974: GO 2976
2976: DISABLE
// begin enable ;
2977: ENABLE
// InGameOn ;
2978: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2982: LD_EXP 47
2986: PPUSH
2987: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2991: LD_EXP 54
2995: PPUSH
2996: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3000: LD_EXP 46
3004: PUSH
3005: LD_EXP 54
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 200
// DialogueOn ;
3018: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3022: LD_EXP 13
3026: IFFALSE 3278
// begin meetPokryshkin = true ;
3028: LD_ADDR_EXP 14
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3036: LD_INT 6
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 343
// DialogueOff ;
3046: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3050: LD_EXP 46
3054: PPUSH
3055: LD_EXP 47
3059: PPUSH
3060: CALL_OW 250
3064: PPUSH
3065: LD_EXP 47
3069: PPUSH
3070: CALL_OW 251
3074: PPUSH
3075: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3079: LD_EXP 46
3083: PPUSH
3084: LD_EXP 47
3088: PPUSH
3089: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3093: LD_EXP 47
3097: PPUSH
3098: LD_EXP 46
3102: PPUSH
3103: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3107: LD_EXP 54
3111: PPUSH
3112: LD_STRING D4-Gny-3
3114: PPUSH
3115: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3119: LD_EXP 46
3123: PPUSH
3124: LD_STRING D4-Bur-3
3126: PPUSH
3127: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3131: LD_EXP 47
3135: PPUSH
3136: LD_STRING D4-Pok-4
3138: PPUSH
3139: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3143: LD_EXP 42
3147: PPUSH
3148: LD_INT 18
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: CALL_OW 49
// wait ( 0 0$2 ) ;
3158: LD_INT 70
3160: PPUSH
3161: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3165: LD_EXP 46
3169: PPUSH
3170: LD_STRING D4-Bur-4
3172: PPUSH
3173: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3177: LD_EXP 47
3181: PPUSH
3182: LD_STRING D4-Pok-5
3184: PPUSH
3185: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3189: LD_EXP 42
3193: PPUSH
3194: LD_STRING D4-Sol1-5
3196: PPUSH
3197: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3201: LD_EXP 47
3205: PPUSH
3206: LD_STRING D4-Pok-6
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3213: LD_EXP 47
3217: PPUSH
3218: LD_STRING D4-Pok-6a
3220: PPUSH
3221: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3225: LD_EXP 46
3229: PPUSH
3230: LD_STRING D4-Bur-6
3232: PPUSH
3233: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3237: LD_EXP 47
3241: PPUSH
3242: LD_STRING D4-Pok-7
3244: PPUSH
3245: CALL_OW 88
// DialogueOff ;
3249: CALL_OW 7
// InGameOff ;
3253: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3257: LD_STRING M2
3259: PPUSH
3260: CALL_OW 337
// goToHill = true ;
3264: LD_ADDR_EXP 15
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// MoveToHill ;
3272: CALL 10319 0 0
// exit ;
3276: GO 3887
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3278: LD_EXP 46
3282: PUSH
3283: LD_EXP 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3296: LD_EXP 47
3300: PPUSH
3301: LD_STRING D4-Pok-1
3303: PPUSH
3304: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3308: LD_EXP 54
3312: PPUSH
3313: CALL_OW 255
3317: PUSH
3318: LD_INT 3
3320: EQUAL
3321: PUSH
3322: LD_EXP 54
3326: PPUSH
3327: CALL_OW 302
3331: AND
3332: IFFALSE 3346
// Say ( Gnyevko , D4-Gny-1 ) ;
3334: LD_EXP 54
3338: PPUSH
3339: LD_STRING D4-Gny-1
3341: PPUSH
3342: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3346: LD_EXP 46
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 6
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 21
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: PPUSH
3380: LD_EXP 46
3384: PPUSH
3385: CALL_OW 74
3389: PPUSH
3390: CALL_OW 296
3394: PUSH
3395: LD_INT 8
3397: GREATER
3398: PUSH
3399: LD_EXP 46
3403: PPUSH
3404: LD_EXP 54
3408: PPUSH
3409: CALL_OW 296
3413: PUSH
3414: LD_INT 8
3416: GREATER
3417: AND
3418: PUSH
3419: LD_EXP 54
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: LD_INT 3
3431: EQUAL
3432: AND
3433: PUSH
3434: LD_EXP 54
3438: PPUSH
3439: CALL_OW 302
3443: AND
3444: IFFALSE 3542
// begin ComWalk ( Gnyevko ) ;
3446: LD_EXP 54
3450: PPUSH
3451: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3455: LD_EXP 47
3459: PPUSH
3460: LD_STRING D4-Pok-2
3462: PPUSH
3463: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3467: LD_EXP 54
3471: PPUSH
3472: LD_STRING D4-Gny-2
3474: PPUSH
3475: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3479: LD_EXP 47
3483: PPUSH
3484: LD_STRING D4-Pok-3
3486: PPUSH
3487: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3491: LD_ADDR_EXP 13
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3499: LD_EXP 54
3503: PPUSH
3504: LD_INT 6
3506: PPUSH
3507: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3511: LD_EXP 54
3515: PPUSH
3516: LD_EXP 47
3520: PPUSH
3521: CALL_OW 250
3525: PPUSH
3526: LD_EXP 47
3530: PPUSH
3531: CALL_OW 251
3535: PPUSH
3536: CALL_OW 171
// end else
3540: GO 3879
// begin meetPokryshkin = true ;
3542: LD_ADDR_EXP 14
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3550: LD_INT 6
3552: PPUSH
3553: LD_INT 3
3555: PPUSH
3556: CALL_OW 343
// DialogueOff ;
3560: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3564: LD_EXP 54
3568: PPUSH
3569: CALL_OW 255
3573: PUSH
3574: LD_INT 3
3576: EQUAL
3577: PUSH
3578: LD_EXP 54
3582: PPUSH
3583: CALL_OW 302
3587: AND
3588: IFFALSE 3665
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3590: LD_EXP 46
3594: PUSH
3595: LD_EXP 54
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: LD_EXP 47
3608: PPUSH
3609: CALL_OW 250
3613: PPUSH
3614: LD_EXP 47
3618: PPUSH
3619: CALL_OW 251
3623: PPUSH
3624: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3628: LD_EXP 46
3632: PUSH
3633: LD_EXP 54
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: LD_EXP 47
3646: PPUSH
3647: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3651: LD_EXP 54
3655: PPUSH
3656: LD_INT 6
3658: PPUSH
3659: CALL_OW 235
// end else
3663: GO 3708
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3665: LD_EXP 46
3669: PPUSH
3670: LD_EXP 47
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 47
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_EXP 47
3703: PPUSH
3704: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3708: LD_EXP 47
3712: PPUSH
3713: LD_EXP 46
3717: PPUSH
3718: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3722: LD_EXP 46
3726: PPUSH
3727: LD_STRING D4-Bur-3
3729: PPUSH
3730: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3734: LD_EXP 47
3738: PPUSH
3739: LD_STRING D4-Pok-4
3741: PPUSH
3742: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3746: LD_EXP 42
3750: PPUSH
3751: LD_INT 18
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: CALL_OW 49
// wait ( 0 0$2 ) ;
3761: LD_INT 70
3763: PPUSH
3764: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3768: LD_EXP 46
3772: PPUSH
3773: LD_STRING D4-Bur-4
3775: PPUSH
3776: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3780: LD_EXP 47
3784: PPUSH
3785: LD_STRING D4-Pok-5
3787: PPUSH
3788: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3792: LD_EXP 42
3796: PPUSH
3797: LD_STRING D4-Sol1-5
3799: PPUSH
3800: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3804: LD_EXP 47
3808: PPUSH
3809: LD_STRING D4-Pok-6
3811: PPUSH
3812: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3816: LD_EXP 47
3820: PPUSH
3821: LD_STRING D4-Pok-6a
3823: PPUSH
3824: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3828: LD_EXP 46
3832: PPUSH
3833: LD_STRING D4-Bur-6
3835: PPUSH
3836: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3840: LD_EXP 47
3844: PPUSH
3845: LD_STRING D4-Pok-7
3847: PPUSH
3848: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3852: LD_STRING M2
3854: PPUSH
3855: CALL_OW 337
// goToHill = true ;
3859: LD_ADDR_EXP 15
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// DialogueOff ;
3867: CALL_OW 7
// InGameOff ;
3871: CALL_OW 9
// MoveToHill ;
3875: CALL 10319 0 0
// end ; DialogueOff ;
3879: CALL_OW 7
// InGameOff ;
3883: CALL_OW 9
// end ;
3887: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3888: LD_EXP 46
3892: PPUSH
3893: LD_EXP 47
3897: PPUSH
3898: CALL_OW 296
3902: PUSH
3903: LD_INT 10
3905: GREATER
3906: PUSH
3907: LD_EXP 15
3911: AND
3912: PUSH
3913: LD_EXP 18
3917: NOT
3918: AND
3919: IFFALSE 4120
3921: GO 3923
3923: DISABLE
3924: LD_INT 0
3926: PPUSH
// begin enable ;
3927: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_EXP 47
3937: PUSH
3938: LD_EXP 48
3942: PUSH
3943: LD_EXP 49
3947: PUSH
3948: LD_EXP 50
3952: PUSH
3953: LD_EXP 51
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3965: LD_EXP 54
3969: PPUSH
3970: CALL_OW 255
3974: PUSH
3975: LD_INT 6
3977: EQUAL
3978: PUSH
3979: LD_EXP 12
3983: AND
3984: IFFALSE 4002
// ruSolds = ruSolds ^ Gnyevko ;
3986: LD_ADDR_VAR 0 1
3990: PUSH
3991: LD_VAR 0 1
3995: PUSH
3996: LD_EXP 54
4000: ADD
4001: ST_TO_ADDR
// ComStop ( ruSolds ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
4011: LD_EXP 46
4015: PPUSH
4016: CALL_OW 87
// DialogueOn ;
4020: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4024: LD_EXP 47
4028: PPUSH
4029: LD_STRING DSplit-Pok-1
4031: PPUSH
4032: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4036: LD_EXP 46
4040: PPUSH
4041: LD_STRING DSplit-Bur-1
4043: PPUSH
4044: CALL_OW 88
// DialogueOff ;
4048: CALL_OW 7
// InGameOn ;
4052: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_EXP 47
4065: PPUSH
4066: CALL_OW 250
4070: PPUSH
4071: LD_EXP 47
4075: PPUSH
4076: CALL_OW 251
4080: PPUSH
4081: CALL_OW 111
// wait ( 0 0$1 ) ;
4085: LD_INT 35
4087: PPUSH
4088: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4092: LD_EXP 46
4096: PPUSH
4097: LD_EXP 47
4101: PPUSH
4102: CALL_OW 296
4106: PUSH
4107: LD_INT 6
4109: LESS
4110: IFFALSE 4056
// InGameOff ;
4112: CALL_OW 9
// MoveToHill ;
4116: CALL 10319 0 0
// end ;
4120: PPOPN 1
4122: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
// traitor = true ;
4127: LD_ADDR_EXP 18
4131: PUSH
4132: LD_INT 1
4134: ST_TO_ADDR
// DialogueOn ;
4135: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4139: LD_EXP 47
4143: PPUSH
4144: LD_STRING DAttack-Pok-1
4146: PPUSH
4147: CALL_OW 88
// DialogueOff ;
4151: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4155: LD_INT 3
4157: PPUSH
4158: LD_INT 6
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4171: LD_INT 22
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 1
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 69
4199: PPUSH
4200: LD_EXP 46
4204: PPUSH
4205: CALL_OW 115
// end ;
4209: LD_VAR 0 1
4213: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4214: LD_EXP 47
4218: PPUSH
4219: LD_INT 65
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: CALL_OW 297
4229: PUSH
4230: LD_INT 4
4232: LESS
4233: PUSH
4234: LD_EXP 18
4238: NOT
4239: AND
4240: IFFALSE 4437
4242: GO 4244
4244: DISABLE
// begin InGameOn ;
4245: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4249: LD_INT 55
4251: PPUSH
4252: LD_INT 50
4254: PPUSH
4255: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4259: LD_EXP 46
4263: PPUSH
4264: LD_INT 66
4266: PPUSH
4267: LD_INT 57
4269: PPUSH
4270: CALL_OW 111
// AddComHold ( Burlak ) ;
4274: LD_EXP 46
4278: PPUSH
4279: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4283: LD_EXP 42
4287: PPUSH
4288: LD_INT 59
4290: PPUSH
4291: LD_INT 55
4293: PPUSH
4294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4298: LD_INT 35
4300: PPUSH
4301: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4305: LD_INT 1
4307: PPUSH
4308: LD_EXP 47
4312: PPUSH
4313: CALL_OW 292
4317: IFFALSE 4298
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4319: LD_EXP 42
4323: PUSH
4324: LD_EXP 47
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 87
// ComStop ( Charles ) ;
4337: LD_EXP 42
4341: PPUSH
4342: CALL_OW 141
// AddComHold ( Charles ) ;
4346: LD_EXP 42
4350: PPUSH
4351: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4355: LD_EXP 42
4359: PPUSH
4360: LD_EXP 47
4364: PPUSH
4365: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4369: LD_EXP 42
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4381: LD_EXP 47
4385: PPUSH
4386: LD_STRING D5-Pok-1
4388: PPUSH
4389: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4393: LD_INT 1
4395: PPUSH
4396: LD_INT 6
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4409: LD_INT 1
4411: PPUSH
4412: LD_INT 3
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4425: LD_EXP 42
4429: PPUSH
4430: LD_STRING D5-Sol1-2
4432: PPUSH
4433: CALL_OW 88
// end ;
4437: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4438: LD_EXP 42
4442: PPUSH
4443: CALL_OW 301
4447: PUSH
4448: LD_EXP 15
4452: AND
4453: IFFALSE 5057
4455: GO 4457
4457: DISABLE
4458: LD_INT 0
4460: PPUSH
// begin InGameOn ;
4461: CALL_OW 8
// goToHill = false ;
4465: LD_ADDR_EXP 15
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4473: LD_INT 22
4475: PUSH
4476: LD_INT 6
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PPUSH
4502: CALL_OW 141
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4513: LD_INT 22
4515: PUSH
4516: LD_INT 6
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 1
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PPUSH
4537: CALL_OW 69
4541: PPUSH
4542: CALL_OW 138
// wait ( 0 0$1 ) ;
4546: LD_INT 35
4548: PPUSH
4549: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4553: LD_INT 55
4555: PPUSH
4556: LD_INT 50
4558: PPUSH
4559: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4563: LD_EXP 46
4567: PPUSH
4568: LD_INT 56
4570: PPUSH
4571: LD_INT 56
4573: PPUSH
4574: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4578: LD_INT 22
4580: PUSH
4581: LD_INT 6
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PPUSH
4607: LD_INT 56
4609: PPUSH
4610: LD_INT 56
4612: PPUSH
4613: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4617: LD_EXP 46
4621: PPUSH
4622: LD_STRING D5-Bur-2
4624: PPUSH
4625: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4629: LD_EXP 47
4633: PPUSH
4634: LD_STRING D5-Pok-2
4636: PPUSH
4637: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4641: LD_EXP 51
4645: PPUSH
4646: LD_STRING D5-Bel-2
4648: PPUSH
4649: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_STRING D5-Pok-3
4660: PPUSH
4661: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4665: LD_EXP 54
4669: PPUSH
4670: CALL_OW 255
4674: PUSH
4675: LD_INT 6
4677: EQUAL
4678: IFFALSE 4692
// Say ( Gnyevko , D5-Gny-3 ) ;
4680: LD_EXP 54
4684: PPUSH
4685: LD_STRING D5-Gny-3
4687: PPUSH
4688: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4692: LD_EXP 46
4696: PPUSH
4697: LD_STRING D5-Bur-3
4699: PPUSH
4700: CALL_OW 88
// interface_hidden = true ;
4704: LD_ADDR_OWVAR 54
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// IngameOff ;
4712: CALL_OW 9
// wait ( 0 0$2 ) ;
4716: LD_INT 70
4718: PPUSH
4719: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4723: LD_EXP 46
4727: PPUSH
4728: LD_INT 85
4730: PPUSH
4731: LD_INT 64
4733: PPUSH
4734: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 6
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 21
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PPUSH
4762: CALL_OW 69
4766: PPUSH
4767: LD_INT 85
4769: PPUSH
4770: LD_INT 64
4772: PPUSH
4773: CALL_OW 111
// interface_hidden = false ;
4777: LD_ADDR_OWVAR 54
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// InGameOn ;
4785: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4789: LD_EXP 46
4793: PPUSH
4794: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4798: LD_EXP 47
4802: PPUSH
4803: LD_STRING D6-Pok-1
4805: PPUSH
4806: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4810: LD_EXP 46
4814: PPUSH
4815: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4819: LD_EXP 46
4823: PPUSH
4824: LD_STRING D6-Bur-1
4826: PPUSH
4827: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4831: LD_EXP 46
4835: PPUSH
4836: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4840: LD_EXP 47
4844: PPUSH
4845: LD_STRING D6-Pok-2
4847: PPUSH
4848: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4852: LD_EXP 46
4856: PPUSH
4857: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4861: LD_EXP 51
4865: PPUSH
4866: LD_STRING D6-Bel-2
4868: PPUSH
4869: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4873: LD_EXP 46
4877: PPUSH
4878: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4882: LD_EXP 46
4886: PPUSH
4887: LD_STRING D6-Bur-2
4889: PPUSH
4890: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4894: LD_EXP 46
4898: PPUSH
4899: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4903: LD_EXP 47
4907: PPUSH
4908: LD_STRING D6-Pok-3
4910: PPUSH
4911: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4915: LD_EXP 46
4919: PPUSH
4920: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4924: LD_EXP 55
4928: PPUSH
4929: LD_STRING D6-Kur-3
4931: PPUSH
4932: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4936: LD_EXP 46
4940: PPUSH
4941: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4945: LD_EXP 47
4949: PPUSH
4950: LD_STRING D6-Pok-4
4952: PPUSH
4953: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4957: LD_EXP 46
4961: PPUSH
4962: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4966: LD_EXP 51
4970: PPUSH
4971: LD_STRING D6-Bel-4
4973: PPUSH
4974: CALL_OW 88
// InGameOff ;
4978: CALL_OW 9
// interface_hidden = false ;
4982: LD_ADDR_OWVAR 54
4986: PUSH
4987: LD_INT 0
4989: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4990: LD_EXP 47
4994: PPUSH
4995: LD_INT 23
4997: PPUSH
4998: CALL_OW 115
// wait ( 0 0$5 ) ;
5002: LD_INT 175
5004: PPUSH
5005: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5009: LD_INT 22
5011: PUSH
5012: LD_INT 6
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: PPUSH
5038: LD_INT 23
5040: PPUSH
5041: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5045: LD_INT 1
5047: PPUSH
5048: LD_EXP 54
5052: PPUSH
5053: CALL_OW 471
// end ;
5057: PPOPN 1
5059: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5060: LD_INT 1
5062: PPUSH
5063: LD_EXP 47
5067: PPUSH
5068: CALL_OW 292
5072: PUSH
5073: LD_EXP 42
5077: PPUSH
5078: CALL_OW 301
5082: AND
5083: IFFALSE 5102
5085: GO 5087
5087: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5088: LD_EXP 43
5092: PPUSH
5093: LD_EXP 47
5097: PPUSH
5098: CALL_OW 115
5102: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5103: LD_INT 3
5105: PPUSH
5106: LD_INT 23
5108: PPUSH
5109: CALL_OW 292
5113: IFFALSE 5142
5115: GO 5117
5117: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5118: LD_EXP 47
5122: PPUSH
5123: LD_STRING D7-Pok-1
5125: PPUSH
5126: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5130: LD_EXP 43
5134: PPUSH
5135: LD_STRING D7-FSol1-1
5137: PPUSH
5138: CALL_OW 88
// end ;
5142: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5143: LD_EXP 47
5147: PPUSH
5148: CALL_OW 303
5152: IFFALSE 5684
5154: GO 5156
5156: DISABLE
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 6
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 50
5189: PUSH
5190: EMPTY
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 69
5202: PUSH
5203: LD_EXP 51
5207: DIFF
5208: ST_TO_ADDR
// DialogueOn ;
5209: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5213: LD_EXP 51
5217: PPUSH
5218: LD_STRING D7a-Bel-1
5220: PPUSH
5221: CALL_OW 88
// DialogueOff ;
5225: CALL_OW 7
// for i := 1 to ruSolds do
5229: LD_ADDR_VAR 0 1
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_VAR 0 3
5243: PUSH
5244: FOR_TO
5245: IFFALSE 5303
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5247: LD_VAR 0 3
5251: PUSH
5252: LD_VAR 0 1
5256: ARRAY
5257: PPUSH
5258: LD_INT 87
5260: PUSH
5261: LD_VAR 0 1
5265: PLUS
5266: PPUSH
5267: LD_INT 63
5269: PUSH
5270: LD_VAR 0 1
5274: PLUS
5275: PPUSH
5276: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5280: LD_VAR 0 3
5284: PUSH
5285: LD_VAR 0 1
5289: ARRAY
5290: PPUSH
5291: LD_INT 89
5293: PPUSH
5294: LD_INT 67
5296: PPUSH
5297: CALL_OW 178
// end ;
5301: GO 5244
5303: POP
5304: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5305: LD_EXP 51
5309: PPUSH
5310: LD_INT 89
5312: PPUSH
5313: LD_INT 67
5315: PPUSH
5316: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5320: LD_EXP 51
5324: PPUSH
5325: LD_INT 88
5327: PPUSH
5328: LD_INT 66
5330: PPUSH
5331: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5335: LD_EXP 48
5339: PPUSH
5340: LD_STRING D7a-RSol1-1
5342: PPUSH
5343: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5347: LD_EXP 43
5351: PPUSH
5352: LD_STRING D7a-FSol1-1
5354: PPUSH
5355: CALL_OW 88
// wait ( 0 0$12 ) ;
5359: LD_INT 420
5361: PPUSH
5362: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5366: LD_EXP 51
5370: PPUSH
5371: LD_STRING D7b-Bel-1
5373: PPUSH
5374: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5378: LD_EXP 49
5382: PPUSH
5383: LD_STRING D7b-FSol1-1
5385: PPUSH
5386: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5390: LD_EXP 51
5394: PPUSH
5395: LD_STRING D7b-Bel-2
5397: PPUSH
5398: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5402: LD_EXP 48
5406: PPUSH
5407: LD_STRING D7b-RSol1-2
5409: PPUSH
5410: CALL_OW 88
// for unit in ruSolds do
5414: LD_ADDR_VAR 0 2
5418: PUSH
5419: LD_VAR 0 3
5423: PUSH
5424: FOR_IN
5425: IFFALSE 5658
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5427: LD_EXP 46
5431: PPUSH
5432: LD_VAR 0 2
5436: PPUSH
5437: CALL_OW 296
5441: PUSH
5442: LD_INT 7
5444: LESS
5445: IFFALSE 5656
// begin InGameOn ;
5447: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5451: LD_EXP 51
5455: PUSH
5456: LD_EXP 48
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5469: LD_EXP 46
5473: PPUSH
5474: LD_INT 88
5476: PPUSH
5477: LD_INT 66
5479: PPUSH
5480: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5484: LD_EXP 51
5488: PPUSH
5489: LD_EXP 46
5493: PPUSH
5494: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5498: LD_EXP 46
5502: PPUSH
5503: LD_INT 90
5505: PPUSH
5506: LD_INT 66
5508: PPUSH
5509: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5513: LD_EXP 46
5517: PPUSH
5518: LD_STRING D7b-Bur-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5525: LD_EXP 51
5529: PPUSH
5530: LD_STRING D7b-Bel-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5537: LD_EXP 46
5541: PPUSH
5542: LD_STRING D7b-Bur-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5549: LD_EXP 51
5553: PPUSH
5554: LD_STRING D7b-Bel-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5561: LD_EXP 49
5565: PPUSH
5566: LD_STRING D7b-FSol1-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5573: LD_EXP 51
5577: PPUSH
5578: LD_STRING D7b-Bel-6
5580: PPUSH
5581: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5585: LD_EXP 46
5589: PPUSH
5590: LD_STRING D7b-Bur-6
5592: PPUSH
5593: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5597: LD_EXP 48
5601: PPUSH
5602: LD_STRING D7b-RSol1-6
5604: PPUSH
5605: CALL_OW 88
// InGameOff ;
5609: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 3
5620: PPUSH
5621: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5625: LD_EXP 51
5629: PPUSH
5630: LD_INT 3
5632: PPUSH
5633: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5637: LD_STRING M3
5639: PPUSH
5640: CALL_OW 337
// secondAttack = true ;
5644: LD_ADDR_EXP 17
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// exit ;
5652: POP
5653: POP
5654: GO 5684
// end ;
5656: GO 5424
5658: POP
5659: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5660: LD_EXP 51
5664: PPUSH
5665: LD_STRING D7b-Bel-3
5667: PPUSH
5668: CALL_OW 88
// InGameOff ;
5672: CALL_OW 9
// belkovWaitForGorky = true ;
5676: LD_ADDR_EXP 16
5680: PUSH
5681: LD_INT 1
5683: ST_TO_ADDR
// end ;
5684: PPOPN 3
5686: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5687: LD_EXP 16
5691: IFFALSE 6001
5693: GO 5695
5695: DISABLE
5696: LD_INT 0
5698: PPUSH
5699: PPUSH
// begin enable ;
5700: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5701: LD_ADDR_VAR 0 2
5705: PUSH
5706: LD_INT 22
5708: PUSH
5709: LD_INT 6
5711: PUSH
5712: EMPTY
5713: LIST
5714: LIST
5715: PUSH
5716: LD_INT 21
5718: PUSH
5719: LD_INT 1
5721: PUSH
5722: EMPTY
5723: LIST
5724: LIST
5725: PUSH
5726: EMPTY
5727: LIST
5728: LIST
5729: PPUSH
5730: CALL_OW 69
5734: ST_TO_ADDR
// for unit in ruSolds do
5735: LD_ADDR_VAR 0 1
5739: PUSH
5740: LD_VAR 0 2
5744: PUSH
5745: FOR_IN
5746: IFFALSE 5999
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5748: LD_EXP 46
5752: PPUSH
5753: LD_VAR 0 1
5757: PPUSH
5758: CALL_OW 296
5762: PUSH
5763: LD_INT 7
5765: LESS
5766: IFFALSE 5997
// begin belkovWaitForGorky = false ;
5768: LD_ADDR_EXP 16
5772: PUSH
5773: LD_INT 0
5775: ST_TO_ADDR
// InGameOn ;
5776: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5780: LD_EXP 51
5784: PUSH
5785: LD_EXP 48
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: PPUSH
5794: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5798: LD_EXP 46
5802: PPUSH
5803: LD_INT 88
5805: PPUSH
5806: LD_INT 66
5808: PPUSH
5809: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5813: LD_EXP 51
5817: PPUSH
5818: LD_EXP 46
5822: PPUSH
5823: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5827: LD_EXP 46
5831: PPUSH
5832: LD_INT 90
5834: PPUSH
5835: LD_INT 66
5837: PPUSH
5838: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5842: LD_EXP 51
5846: PPUSH
5847: LD_STRING D7b-Bel-3a
5849: PPUSH
5850: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5854: LD_EXP 46
5858: PPUSH
5859: LD_STRING D7b-Bur-3
5861: PPUSH
5862: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5866: LD_EXP 51
5870: PPUSH
5871: LD_STRING D7b-Bel-4
5873: PPUSH
5874: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5878: LD_EXP 46
5882: PPUSH
5883: LD_STRING D7b-Bur-4
5885: PPUSH
5886: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5890: LD_EXP 51
5894: PPUSH
5895: LD_STRING D7b-Bel-5
5897: PPUSH
5898: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5902: LD_EXP 49
5906: PPUSH
5907: LD_STRING D7b-FSol1-5
5909: PPUSH
5910: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5914: LD_EXP 51
5918: PPUSH
5919: LD_STRING D7b-Bel-6
5921: PPUSH
5922: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5926: LD_EXP 46
5930: PPUSH
5931: LD_STRING D7b-Bur-6
5933: PPUSH
5934: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5938: LD_EXP 48
5942: PPUSH
5943: LD_STRING D7a-RSol1-6
5945: PPUSH
5946: CALL_OW 88
// InGameOff ;
5950: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5954: LD_VAR 0 2
5958: PPUSH
5959: LD_INT 3
5961: PPUSH
5962: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5966: LD_EXP 51
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5978: LD_STRING M3
5980: PPUSH
5981: CALL_OW 337
// secondAttack = true ;
5985: LD_ADDR_EXP 17
5989: PUSH
5990: LD_INT 1
5992: ST_TO_ADDR
// exit ;
5993: POP
5994: POP
5995: GO 6001
// end ;
5997: GO 5745
5999: POP
6000: POP
// end ;
6001: PPOPN 2
6003: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
6004: LD_INT 0
6006: PPUSH
6007: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6008: LD_EXP 43
6012: PPUSH
6013: LD_STRING D8-FSol1-1
6015: PPUSH
6016: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6020: LD_EXP 44
6024: PPUSH
6025: LD_STRING D8-Glad-1
6027: PPUSH
6028: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6032: LD_EXP 46
6036: PPUSH
6037: LD_STRING D8-Bur-1
6039: PPUSH
6040: CALL_OW 88
// secondAttack = false ;
6044: LD_ADDR_EXP 17
6048: PUSH
6049: LD_INT 0
6051: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6052: LD_ADDR_VAR 0 2
6056: PUSH
6057: LD_INT 22
6059: PUSH
6060: LD_INT 3
6062: PUSH
6063: EMPTY
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 21
6069: PUSH
6070: LD_INT 1
6072: PUSH
6073: EMPTY
6074: LIST
6075: LIST
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PPUSH
6081: CALL_OW 69
6085: PPUSH
6086: LD_INT 23
6088: PPUSH
6089: CALL_OW 74
6093: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6094: LD_EXP 45
6098: PPUSH
6099: CALL_OW 122
// wait ( 0 0$1 ) ;
6103: LD_INT 35
6105: PPUSH
6106: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6110: LD_EXP 45
6114: PPUSH
6115: LD_VAR 0 2
6119: PPUSH
6120: CALL_OW 175
// end ;
6124: LD_VAR 0 1
6128: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6129: LD_INT 23
6131: PPUSH
6132: CALL_OW 256
6136: PUSH
6137: LD_INT 350
6139: LESS
6140: PUSH
6141: LD_INT 23
6143: PPUSH
6144: CALL_OW 256
6148: PUSH
6149: LD_INT 250
6151: GREATER
6152: AND
6153: PUSH
6154: LD_INT 20
6156: PPUSH
6157: LD_INT 22
6159: PUSH
6160: LD_INT 3
6162: PUSH
6163: EMPTY
6164: LIST
6165: LIST
6166: PUSH
6167: LD_INT 21
6169: PUSH
6170: LD_INT 1
6172: PUSH
6173: EMPTY
6174: LIST
6175: LIST
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: PPUSH
6181: CALL_OW 70
6185: PUSH
6186: LD_INT 0
6188: GREATER
6189: AND
6190: PUSH
6191: LD_EXP 24
6195: NOT
6196: AND
6197: IFFALSE 6214
6199: GO 6201
6201: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6202: LD_EXP 43
6206: PPUSH
6207: LD_STRING D8-FSol1-2
6209: PPUSH
6210: CALL_OW 88
6214: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6215: LD_INT 23
6217: PPUSH
6218: CALL_OW 303
6222: PUSH
6223: LD_INT 22
6225: PPUSH
6226: CALL_OW 302
6230: AND
6231: PUSH
6232: LD_EXP 24
6236: NOT
6237: AND
6238: IFFALSE 6308
6240: GO 6242
6242: DISABLE
// begin amRetreat = true ;
6243: LD_ADDR_EXP 24
6247: PUSH
6248: LD_INT 1
6250: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6251: LD_EXP 43
6255: PPUSH
6256: LD_STRING D8-FSol1-2a
6258: PPUSH
6259: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6263: LD_EXP 44
6267: PUSH
6268: LD_EXP 43
6272: PUSH
6273: EMPTY
6274: LIST
6275: LIST
6276: PPUSH
6277: LD_INT 21
6279: PPUSH
6280: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6284: LD_EXP 44
6288: PPUSH
6289: LD_STRING D8-Glad-2
6291: PPUSH
6292: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6296: LD_EXP 46
6300: PPUSH
6301: LD_STRING D8-Bur-2
6303: PPUSH
6304: CALL_OW 88
// end ;
6308: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6309: LD_INT 22
6311: PPUSH
6312: CALL_OW 303
6316: PUSH
6317: LD_INT 23
6319: PPUSH
6320: CALL_OW 302
6324: AND
6325: PUSH
6326: LD_EXP 24
6330: NOT
6331: AND
6332: IFFALSE 6402
6334: GO 6336
6336: DISABLE
// begin amRetreat = true ;
6337: LD_ADDR_EXP 24
6341: PUSH
6342: LD_INT 1
6344: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6345: LD_EXP 43
6349: PPUSH
6350: LD_STRING D8-FSol1-2a
6352: PPUSH
6353: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6357: LD_EXP 44
6361: PUSH
6362: LD_EXP 43
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: LD_INT 21
6373: PPUSH
6374: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6378: LD_EXP 44
6382: PPUSH
6383: LD_STRING D8-Glad-2
6385: PPUSH
6386: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6390: LD_EXP 46
6394: PPUSH
6395: LD_STRING D8-Bur-2
6397: PPUSH
6398: CALL_OW 88
// end ;
6402: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6403: LD_INT 23
6405: PPUSH
6406: CALL_OW 256
6410: PUSH
6411: LD_INT 500
6413: LESS
6414: PUSH
6415: LD_OWVAR 67
6419: PUSH
6420: LD_INT 3
6422: EQUAL
6423: AND
6424: PUSH
6425: LD_EXP 24
6429: NOT
6430: AND
6431: IFFALSE 6501
6433: GO 6435
6435: DISABLE
// begin amRetreat = true ;
6436: LD_ADDR_EXP 24
6440: PUSH
6441: LD_INT 1
6443: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6444: LD_EXP 43
6448: PPUSH
6449: LD_STRING D8-FSol1-2a
6451: PPUSH
6452: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6456: LD_EXP 44
6460: PUSH
6461: LD_EXP 43
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: PPUSH
6470: LD_INT 21
6472: PPUSH
6473: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6477: LD_EXP 44
6481: PPUSH
6482: LD_STRING D8-Glad-2
6484: PPUSH
6485: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6489: LD_EXP 46
6493: PPUSH
6494: LD_STRING D8-Bur-2
6496: PPUSH
6497: CALL_OW 88
// end ;
6501: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6502: LD_INT 22
6504: PUSH
6505: LD_INT 1
6507: PUSH
6508: EMPTY
6509: LIST
6510: LIST
6511: PUSH
6512: LD_INT 21
6514: PUSH
6515: LD_INT 1
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: PUSH
6522: LD_INT 50
6524: PUSH
6525: EMPTY
6526: LIST
6527: PUSH
6528: EMPTY
6529: LIST
6530: LIST
6531: LIST
6532: PPUSH
6533: CALL_OW 69
6537: PUSH
6538: LD_INT 0
6540: GREATER
6541: IFFALSE 6669
6543: GO 6545
6545: DISABLE
6546: LD_INT 0
6548: PPUSH
// begin enable ;
6549: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6550: LD_ADDR_VAR 0 1
6554: PUSH
6555: LD_INT 21
6557: PPUSH
6558: LD_INT 22
6560: PUSH
6561: LD_INT 1
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PUSH
6568: LD_INT 21
6570: PUSH
6571: LD_INT 1
6573: PUSH
6574: EMPTY
6575: LIST
6576: LIST
6577: PUSH
6578: EMPTY
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 70
6586: PUSH
6587: FOR_IN
6588: IFFALSE 6667
// begin if unit = Gladstone then
6590: LD_VAR 0 1
6594: PUSH
6595: LD_EXP 44
6599: EQUAL
6600: IFFALSE 6630
// begin gladstoneEscape = true ;
6602: LD_ADDR_EXP 19
6606: PUSH
6607: LD_INT 1
6609: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6610: LD_EXP 44
6614: PPUSH
6615: LD_EXP 30
6619: PUSH
6620: LD_STRING Gladstone
6622: STR
6623: PPUSH
6624: CALL_OW 38
// end else
6628: GO 6656
// begin JohannaEscape = true ;
6630: LD_ADDR_EXP 20
6634: PUSH
6635: LD_INT 1
6637: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6638: LD_EXP 43
6642: PPUSH
6643: LD_EXP 30
6647: PUSH
6648: LD_STRING Johanna
6650: STR
6651: PPUSH
6652: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6656: LD_VAR 0 1
6660: PPUSH
6661: CALL_OW 64
// end ;
6665: GO 6587
6667: POP
6668: POP
// end ;
6669: PPOPN 1
6671: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6672: LD_EXP 44
6676: PPUSH
6677: CALL_OW 301
6681: PUSH
6682: LD_EXP 43
6686: PPUSH
6687: CALL_OW 301
6691: AND
6692: IFFALSE 6709
6694: GO 6696
6696: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6697: LD_EXP 46
6701: PPUSH
6702: LD_STRING D9-Bur-1
6704: PPUSH
6705: CALL_OW 88
6709: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6710: LD_EXP 43
6714: PPUSH
6715: CALL_OW 301
6719: PUSH
6720: LD_EXP 19
6724: AND
6725: PUSH
6726: LD_EXP 20
6730: NOT
6731: AND
6732: IFFALSE 6749
6734: GO 6736
6736: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6737: LD_EXP 46
6741: PPUSH
6742: LD_STRING D9-Bur-1a
6744: PPUSH
6745: CALL_OW 88
6749: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6750: LD_EXP 44
6754: PPUSH
6755: CALL_OW 301
6759: PUSH
6760: LD_EXP 19
6764: NOT
6765: AND
6766: PUSH
6767: LD_EXP 20
6771: AND
6772: IFFALSE 6789
6774: GO 6776
6776: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6777: LD_EXP 46
6781: PPUSH
6782: LD_STRING D9-Bur-1b
6784: PPUSH
6785: CALL_OW 88
6789: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6790: LD_EXP 19
6794: PUSH
6795: LD_EXP 20
6799: AND
6800: IFFALSE 6817
6802: GO 6804
6804: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6805: LD_EXP 46
6809: PPUSH
6810: LD_STRING D9-Bur-1c
6812: PPUSH
6813: CALL_OW 88
6817: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6818: LD_INT 22
6820: PUSH
6821: LD_INT 1
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: PUSH
6828: LD_INT 21
6830: PUSH
6831: LD_INT 3
6833: PUSH
6834: EMPTY
6835: LIST
6836: LIST
6837: PUSH
6838: LD_INT 50
6840: PUSH
6841: EMPTY
6842: LIST
6843: PUSH
6844: EMPTY
6845: LIST
6846: LIST
6847: LIST
6848: PPUSH
6849: CALL_OW 69
6853: PUSH
6854: LD_INT 0
6856: EQUAL
6857: IFFALSE 7105
6859: GO 6861
6861: DISABLE
6862: LD_INT 0
6864: PPUSH
6865: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6866: LD_ADDR_VAR 0 1
6870: PUSH
6871: LD_INT 22
6873: PUSH
6874: LD_INT 3
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: PUSH
6881: LD_INT 21
6883: PUSH
6884: LD_INT 1
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: PUSH
6891: LD_INT 50
6893: PUSH
6894: EMPTY
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: LIST
6901: PPUSH
6902: CALL_OW 69
6906: PUSH
6907: LD_EXP 46
6911: PUSH
6912: LD_EXP 54
6916: PUSH
6917: LD_EXP 51
6921: PUSH
6922: EMPTY
6923: LIST
6924: LIST
6925: LIST
6926: DIFF
6927: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_VAR 0 1
6937: PPUSH
6938: LD_INT 26
6940: PUSH
6941: LD_INT 1
6943: PUSH
6944: EMPTY
6945: LIST
6946: LIST
6947: PPUSH
6948: CALL_OW 72
6952: ST_TO_ADDR
// DialogueOn ;
6953: CALL_OW 6
// if IsOK ( Belkov ) then
6957: LD_EXP 51
6961: PPUSH
6962: CALL_OW 302
6966: IFFALSE 6980
// Say ( Belkov , D10-Bel-1 ) ;
6968: LD_EXP 51
6972: PPUSH
6973: LD_STRING D10-Bel-1
6975: PPUSH
6976: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6980: LD_VAR 0 1
6984: PUSH
6985: LD_INT 0
6987: GREATER
6988: PUSH
6989: LD_VAR 0 2
6993: PUSH
6994: LD_INT 0
6996: GREATER
6997: PUSH
6998: LD_EXP 51
7002: PPUSH
7003: CALL_OW 302
7007: OR
7008: AND
7009: IFFALSE 7076
// begin Say ( Burlak , D10-Bur-1 ) ;
7011: LD_EXP 46
7015: PPUSH
7016: LD_STRING D10-Bur-1
7018: PPUSH
7019: CALL_OW 88
// if IsOK ( Belkov ) then
7023: LD_EXP 51
7027: PPUSH
7028: CALL_OW 302
7032: IFFALSE 7048
// Say ( Belkov , D10-Bel-1a ) else
7034: LD_EXP 51
7038: PPUSH
7039: LD_STRING D10-Bel-1a
7041: PPUSH
7042: CALL_OW 88
7046: GO 7064
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7048: LD_VAR 0 2
7052: PUSH
7053: LD_INT 1
7055: ARRAY
7056: PPUSH
7057: LD_STRING D10-RSol1-1
7059: PPUSH
7060: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7064: LD_EXP 46
7068: PPUSH
7069: LD_STRING D10-Bur-2
7071: PPUSH
7072: CALL_OW 88
// end ; DialogueOff ;
7076: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7080: LD_STRING M4a
7082: PPUSH
7083: CALL_OW 337
// evacuationAvailable = true ;
7087: LD_ADDR_EXP 22
7091: PUSH
7092: LD_INT 1
7094: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7095: LD_INT 1
7097: PPUSH
7098: LD_INT 1
7100: PPUSH
7101: CALL_OW 424
// end ;
7105: PPOPN 2
7107: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7108: LD_EXP 22
7112: PUSH
7113: LD_EXP 25
7117: NOT
7118: AND
7119: IFFALSE 7729
7121: GO 7123
7123: DISABLE
7124: LD_INT 0
7126: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7127: LD_EXP 53
7131: PPUSH
7132: LD_INT 22
7134: PPUSH
7135: LD_INT 1
7137: PPUSH
7138: CALL_OW 49
// wait ( 0 0$3 ) ;
7142: LD_INT 105
7144: PPUSH
7145: CALL_OW 67
// jelenaSpawned = true ;
7149: LD_ADDR_EXP 25
7153: PUSH
7154: LD_INT 1
7156: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7157: LD_INT 22
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: EMPTY
7164: LIST
7165: LIST
7166: PUSH
7167: LD_INT 21
7169: PUSH
7170: LD_INT 1
7172: PUSH
7173: EMPTY
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 50
7179: PUSH
7180: EMPTY
7181: LIST
7182: PUSH
7183: EMPTY
7184: LIST
7185: LIST
7186: LIST
7187: PPUSH
7188: CALL_OW 69
7192: PPUSH
7193: LD_EXP 53
7197: PPUSH
7198: CALL_OW 74
7202: PPUSH
7203: LD_EXP 53
7207: PPUSH
7208: CALL_OW 296
7212: PUSH
7213: LD_INT 9
7215: LESS
7216: IFFALSE 7220
// exit ;
7218: GO 7729
// DialogueOn ;
7220: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7224: LD_EXP 53
7228: PPUSH
7229: LD_STRING D11b-Kir-1
7231: PPUSH
7232: CALL_OW 94
// if IsOK ( Belkov ) then
7236: LD_EXP 51
7240: PPUSH
7241: CALL_OW 302
7245: IFFALSE 7273
// begin Say ( Belkov , D11b-Bel-1 ) ;
7247: LD_EXP 51
7251: PPUSH
7252: LD_STRING D11b-Bel-1
7254: PPUSH
7255: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7259: LD_EXP 51
7263: PPUSH
7264: LD_STRING D11b-Bel-1a
7266: PPUSH
7267: CALL_OW 94
// end else
7271: GO 7328
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7273: LD_ADDR_VAR 0 1
7277: PUSH
7278: LD_INT 22
7280: PUSH
7281: LD_INT 3
7283: PUSH
7284: EMPTY
7285: LIST
7286: LIST
7287: PUSH
7288: LD_INT 21
7290: PUSH
7291: LD_INT 1
7293: PUSH
7294: EMPTY
7295: LIST
7296: LIST
7297: PUSH
7298: LD_INT 50
7300: PUSH
7301: EMPTY
7302: LIST
7303: PUSH
7304: EMPTY
7305: LIST
7306: LIST
7307: LIST
7308: PPUSH
7309: CALL_OW 69
7313: PPUSH
7314: LD_STRING D11b-RSol1-1
7316: PPUSH
7317: LD_STRING D11b-RFSol1-1
7319: PPUSH
7320: LD_INT 0
7322: PPUSH
7323: CALL 8106 0 4
7327: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7328: LD_INT 24
7330: PPUSH
7331: LD_INT 22
7333: PUSH
7334: LD_INT 0
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: PUSH
7341: LD_INT 25
7343: PUSH
7344: LD_INT 12
7346: PUSH
7347: EMPTY
7348: LIST
7349: LIST
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: PPUSH
7355: CALL_OW 70
7359: PUSH
7360: LD_INT 0
7362: GREATER
7363: IFFALSE 7379
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7365: LD_EXP 53
7369: PPUSH
7370: LD_STRING D11b1-Kir-1
7372: PPUSH
7373: CALL_OW 94
7377: GO 7391
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7379: LD_EXP 53
7383: PPUSH
7384: LD_STRING D11b2-Kir-1
7386: PPUSH
7387: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7391: LD_EXP 6
7395: PUSH
7396: LD_INT 24
7398: PPUSH
7399: LD_INT 22
7401: PUSH
7402: LD_INT 0
7404: PUSH
7405: EMPTY
7406: LIST
7407: LIST
7408: PUSH
7409: LD_INT 25
7411: PUSH
7412: LD_INT 12
7414: PUSH
7415: EMPTY
7416: LIST
7417: LIST
7418: PUSH
7419: EMPTY
7420: LIST
7421: LIST
7422: PPUSH
7423: CALL_OW 70
7427: PUSH
7428: LD_INT 0
7430: GREATER
7431: AND
7432: IFFALSE 7567
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7434: LD_EXP 46
7438: PPUSH
7439: LD_STRING D11b1-Bur-1
7441: PPUSH
7442: CALL_OW 88
// if IsOk ( Belkov ) then
7446: LD_EXP 51
7450: PPUSH
7451: CALL_OW 302
7455: IFFALSE 7471
// Say ( Belkov , D11b2-Bel-1 ) else
7457: LD_EXP 51
7461: PPUSH
7462: LD_STRING D11b2-Bel-1
7464: PPUSH
7465: CALL_OW 88
7469: GO 7512
// begin if GetSex ( randomSold ) = sex_male then
7471: LD_VAR 0 1
7475: PPUSH
7476: CALL_OW 258
7480: PUSH
7481: LD_INT 1
7483: EQUAL
7484: IFFALSE 7500
// Say ( randomSold , D11b1-RSol1-1 ) else
7486: LD_VAR 0 1
7490: PPUSH
7491: LD_STRING D11b1-RSol1-1
7493: PPUSH
7494: CALL_OW 88
7498: GO 7512
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7500: LD_VAR 0 1
7504: PPUSH
7505: LD_STRING D11b1-RFSol1-1
7507: PPUSH
7508: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7512: LD_INT 22
7514: PUSH
7515: LD_INT 1
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: PUSH
7522: LD_INT 21
7524: PUSH
7525: LD_INT 1
7527: PUSH
7528: EMPTY
7529: LIST
7530: LIST
7531: PUSH
7532: LD_INT 50
7534: PUSH
7535: EMPTY
7536: LIST
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: LIST
7542: PPUSH
7543: CALL_OW 69
7547: PPUSH
7548: LD_STRING D11b1-RSol1-1
7550: PPUSH
7551: LD_STRING D11b1-RFSol1-1
7553: PPUSH
7554: LD_INT 0
7556: PPUSH
7557: CALL 8106 0 4
// DialogueOff ;
7561: CALL_OW 7
// exit ;
7565: GO 7729
// end ; if spotWaterfall then
7567: LD_EXP 7
7571: IFFALSE 7657
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7573: LD_EXP 46
7577: PPUSH
7578: LD_STRING D11b1-Bur-1a
7580: PPUSH
7581: CALL_OW 88
// if IsOk ( Belkov ) then
7585: LD_EXP 51
7589: PPUSH
7590: CALL_OW 302
7594: IFFALSE 7610
// Say ( Belkov , D11b2-Bel-1 ) else
7596: LD_EXP 51
7600: PPUSH
7601: LD_STRING D11b2-Bel-1
7603: PPUSH
7604: CALL_OW 88
7608: GO 7651
// begin if GetSex ( randomSold ) = sex_male then
7610: LD_VAR 0 1
7614: PPUSH
7615: CALL_OW 258
7619: PUSH
7620: LD_INT 1
7622: EQUAL
7623: IFFALSE 7639
// Say ( randomSold , D11b1-RSol1-1 ) else
7625: LD_VAR 0 1
7629: PPUSH
7630: LD_STRING D11b1-RSol1-1
7632: PPUSH
7633: CALL_OW 88
7637: GO 7651
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7639: LD_VAR 0 1
7643: PPUSH
7644: LD_STRING D11b1-RFSol1-1
7646: PPUSH
7647: CALL_OW 88
// end ; DialogueOff ;
7651: CALL_OW 7
// exit ;
7655: GO 7729
// end ; if IsOk ( Belkov ) then
7657: LD_EXP 51
7661: PPUSH
7662: CALL_OW 302
7666: IFFALSE 7682
// Say ( Belkov , D11b1-Bel-1 ) else
7668: LD_EXP 51
7672: PPUSH
7673: LD_STRING D11b1-Bel-1
7675: PPUSH
7676: CALL_OW 88
7680: GO 7723
// begin if GetSex ( randomSold ) = sex_male then
7682: LD_VAR 0 1
7686: PPUSH
7687: CALL_OW 258
7691: PUSH
7692: LD_INT 1
7694: EQUAL
7695: IFFALSE 7711
// Say ( randomSold , D11b1-RSol1-1 ) else
7697: LD_VAR 0 1
7701: PPUSH
7702: LD_STRING D11b1-RSol1-1
7704: PPUSH
7705: CALL_OW 88
7709: GO 7723
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7711: LD_VAR 0 1
7715: PPUSH
7716: LD_STRING D11b1-RFSol1-1
7718: PPUSH
7719: CALL_OW 88
// end ; DialogueOff ;
7723: CALL_OW 7
// exit ;
7727: GO 7729
// end ;
7729: PPOPN 1
7731: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7732: LD_INT 3
7734: PPUSH
7735: LD_EXP 53
7739: PPUSH
7740: CALL_OW 292
7744: PUSH
7745: LD_EXP 25
7749: AND
7750: IFFALSE 7986
7752: GO 7754
7754: DISABLE
7755: LD_INT 0
7757: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7758: LD_EXP 53
7762: PPUSH
7763: LD_INT 3
7765: PPUSH
7766: CALL_OW 235
// jelenaSaved = true ;
7770: LD_ADDR_EXP 21
7774: PUSH
7775: LD_INT 1
7777: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7778: LD_EXP 53
7782: PPUSH
7783: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7787: LD_ADDR_VAR 0 1
7791: PUSH
7792: LD_INT 22
7794: PUSH
7795: LD_INT 3
7797: PUSH
7798: EMPTY
7799: LIST
7800: LIST
7801: PUSH
7802: LD_INT 21
7804: PUSH
7805: LD_INT 1
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: PUSH
7812: LD_INT 50
7814: PUSH
7815: EMPTY
7816: LIST
7817: PUSH
7818: EMPTY
7819: LIST
7820: LIST
7821: LIST
7822: PPUSH
7823: CALL_OW 69
7827: PUSH
7828: LD_EXP 53
7832: DIFF
7833: PPUSH
7834: LD_EXP 53
7838: PPUSH
7839: CALL_OW 74
7843: ST_TO_ADDR
// DialogueOn ;
7844: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7848: LD_EXP 53
7852: PPUSH
7853: LD_STRING D11a-Kir-1
7855: PPUSH
7856: CALL_OW 88
// if nearUnit = Belkov then
7860: LD_VAR 0 1
7864: PUSH
7865: LD_EXP 51
7869: EQUAL
7870: IFFALSE 7910
// begin Say ( Belkov , D11a-Bel-1 ) ;
7872: LD_EXP 51
7876: PPUSH
7877: LD_STRING D11a-Bel-1
7879: PPUSH
7880: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7884: LD_EXP 53
7888: PPUSH
7889: LD_STRING D11a-Kir-2
7891: PPUSH
7892: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7896: LD_EXP 51
7900: PPUSH
7901: LD_STRING D11a-Bel-2
7903: PPUSH
7904: CALL_OW 88
// end else
7908: GO 7951
// begin if GetSex ( nearUnit ) = sex_male then
7910: LD_VAR 0 1
7914: PPUSH
7915: CALL_OW 258
7919: PUSH
7920: LD_INT 1
7922: EQUAL
7923: IFFALSE 7939
// Say ( nearUnit , D11a-RSol1-2 ) else
7925: LD_VAR 0 1
7929: PPUSH
7930: LD_STRING D11a-RSol1-2
7932: PPUSH
7933: CALL_OW 88
7937: GO 7951
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7939: LD_VAR 0 1
7943: PPUSH
7944: LD_STRING D11a-RFSol1-2
7946: PPUSH
7947: CALL_OW 88
// end ; DialogueOff ;
7951: CALL_OW 7
// wait ( 0 0$5 ) ;
7955: LD_INT 175
7957: PPUSH
7958: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7962: LD_EXP 53
7966: PPUSH
7967: LD_STRING D11c-Kir-1
7969: PPUSH
7970: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7974: LD_EXP 46
7978: PPUSH
7979: LD_STRING D11c-Bur-1
7981: PPUSH
7982: CALL_OW 88
// end ;
7986: PPOPN 1
7988: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7989: LD_EXP 22
7993: PUSH
7994: LD_INT 1
7996: PPUSH
7997: LD_INT 22
7999: PUSH
8000: LD_INT 3
8002: PUSH
8003: EMPTY
8004: LIST
8005: LIST
8006: PUSH
8007: LD_INT 21
8009: PUSH
8010: LD_INT 1
8012: PUSH
8013: EMPTY
8014: LIST
8015: LIST
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PPUSH
8021: CALL_OW 70
8025: PUSH
8026: LD_INT 0
8028: GREATER
8029: AND
8030: IFFALSE 8042
8032: GO 8034
8034: DISABLE
// begin Query ( QExit1 ) ;
8035: LD_STRING QExit1
8037: PPUSH
8038: CALL_OW 97
// end ; end_of_file
8042: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
8043: LD_INT 0
8045: PPUSH
8046: PPUSH
// if exist_mode then
8047: LD_VAR 0 2
8051: IFFALSE 8076
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8053: LD_ADDR_VAR 0 4
8057: PUSH
8058: LD_EXP 31
8062: PUSH
8063: LD_VAR 0 1
8067: STR
8068: PPUSH
8069: CALL_OW 34
8073: ST_TO_ADDR
8074: GO 8091
// unit := NewCharacter ( ident ) ;
8076: LD_ADDR_VAR 0 4
8080: PUSH
8081: LD_VAR 0 1
8085: PPUSH
8086: CALL_OW 25
8090: ST_TO_ADDR
// result := unit ;
8091: LD_ADDR_VAR 0 3
8095: PUSH
8096: LD_VAR 0 4
8100: ST_TO_ADDR
// end ;
8101: LD_VAR 0 3
8105: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8106: LD_INT 0
8108: PPUSH
8109: PPUSH
8110: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8111: LD_ADDR_VAR 0 1
8115: PUSH
8116: LD_VAR 0 1
8120: PUSH
8121: LD_EXP 46
8125: PUSH
8126: LD_EXP 54
8130: PUSH
8131: LD_EXP 51
8135: PUSH
8136: LD_EXP 53
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: LIST
8145: LIST
8146: DIFF
8147: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8148: LD_ADDR_VAR 0 7
8152: PUSH
8153: LD_VAR 0 1
8157: PUSH
8158: LD_INT 1
8160: PPUSH
8161: LD_VAR 0 1
8165: PPUSH
8166: CALL_OW 12
8170: ARRAY
8171: ST_TO_ADDR
// if radio then
8172: LD_VAR 0 4
8176: IFFALSE 8225
// begin if GetSex ( speaker ) = sex_male then
8178: LD_VAR 0 7
8182: PPUSH
8183: CALL_OW 258
8187: PUSH
8188: LD_INT 1
8190: EQUAL
8191: IFFALSE 8209
// SayRadio ( speaker , dialogMID ) else
8193: LD_VAR 0 7
8197: PPUSH
8198: LD_VAR 0 2
8202: PPUSH
8203: CALL_OW 94
8207: GO 8223
// SayRadio ( speaker , dialogFID ) ;
8209: LD_VAR 0 7
8213: PPUSH
8214: LD_VAR 0 3
8218: PPUSH
8219: CALL_OW 94
// end else
8223: GO 8270
// begin if GetSex ( speaker ) = sex_male then
8225: LD_VAR 0 7
8229: PPUSH
8230: CALL_OW 258
8234: PUSH
8235: LD_INT 1
8237: EQUAL
8238: IFFALSE 8256
// Say ( speaker , dialogMID ) else
8240: LD_VAR 0 7
8244: PPUSH
8245: LD_VAR 0 2
8249: PPUSH
8250: CALL_OW 88
8254: GO 8270
// Say ( speaker , dialogFID ) ;
8256: LD_VAR 0 7
8260: PPUSH
8261: LD_VAR 0 3
8265: PPUSH
8266: CALL_OW 88
// end ; result := speaker ;
8270: LD_ADDR_VAR 0 5
8274: PUSH
8275: LD_VAR 0 7
8279: ST_TO_ADDR
// end ;
8280: LD_VAR 0 5
8284: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8285: LD_INT 0
8287: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8288: LD_VAR 0 1
8292: PPUSH
8293: CALL_OW 255
8297: PUSH
8298: LD_OWVAR 2
8302: EQUAL
8303: PUSH
8304: LD_VAR 0 1
8308: PPUSH
8309: CALL_OW 302
8313: AND
8314: IFFALSE 8336
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8316: LD_VAR 0 1
8320: PPUSH
8321: LD_EXP 30
8325: PUSH
8326: LD_VAR 0 2
8330: STR
8331: PPUSH
8332: CALL_OW 38
// end ;
8336: LD_VAR 0 3
8340: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8341: LD_INT 0
8343: PPUSH
8344: PPUSH
8345: PPUSH
// resultCharactersToSave = [ ] ;
8346: LD_ADDR_VAR 0 5
8350: PUSH
8351: EMPTY
8352: ST_TO_ADDR
// for unit in characters do
8353: LD_ADDR_VAR 0 4
8357: PUSH
8358: LD_VAR 0 1
8362: PUSH
8363: FOR_IN
8364: IFFALSE 8412
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8366: LD_VAR 0 4
8370: PPUSH
8371: CALL_OW 255
8375: PUSH
8376: LD_OWVAR 2
8380: EQUAL
8381: PUSH
8382: LD_VAR 0 4
8386: PPUSH
8387: CALL_OW 302
8391: AND
8392: IFFALSE 8410
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8394: LD_ADDR_VAR 0 5
8398: PUSH
8399: LD_VAR 0 5
8403: PUSH
8404: LD_VAR 0 4
8408: ADD
8409: ST_TO_ADDR
8410: GO 8363
8412: POP
8413: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8414: LD_VAR 0 5
8418: PPUSH
8419: LD_EXP 30
8423: PUSH
8424: LD_VAR 0 2
8428: STR
8429: PPUSH
8430: CALL_OW 38
// end ;
8434: LD_VAR 0 3
8438: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8439: LD_INT 0
8441: PPUSH
8442: PPUSH
8443: PPUSH
8444: PPUSH
8445: PPUSH
8446: PPUSH
8447: PPUSH
8448: PPUSH
8449: PPUSH
8450: PPUSH
8451: PPUSH
8452: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8453: LD_VAR 0 1
8457: PPUSH
8458: CALL_OW 302
8462: NOT
8463: PUSH
8464: LD_VAR 0 4
8468: PUSH
8469: LD_INT 1
8471: EQUAL
8472: OR
8473: PUSH
8474: LD_VAR 0 2
8478: PPUSH
8479: LD_VAR 0 3
8483: PPUSH
8484: CALL_OW 488
8488: NOT
8489: OR
8490: PUSH
8491: LD_VAR 0 1
8495: PPUSH
8496: LD_VAR 0 2
8500: PPUSH
8501: LD_VAR 0 3
8505: PPUSH
8506: CALL_OW 297
8510: PUSH
8511: LD_VAR 0 4
8515: GREATEREQUAL
8516: OR
8517: PUSH
8518: LD_VAR 0 5
8522: PUSH
8523: LD_INT 1
8525: PUSH
8526: LD_INT 0
8528: PUSH
8529: EMPTY
8530: LIST
8531: LIST
8532: IN
8533: NOT
8534: OR
8535: IFFALSE 8539
// exit ;
8537: GO 10096
// attempts = 0 ;
8539: LD_ADDR_VAR 0 17
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8547: LD_ADDR_VAR 0 7
8551: PUSH
8552: EMPTY
8553: ST_TO_ADDR
// list_coords = [ ] ;
8554: LD_ADDR_VAR 0 8
8558: PUSH
8559: EMPTY
8560: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8561: LD_ADDR_VAR 0 9
8565: PUSH
8566: LD_VAR 0 2
8570: PPUSH
8571: LD_VAR 0 3
8575: PPUSH
8576: LD_VAR 0 1
8580: PPUSH
8581: CALL_OW 250
8585: PPUSH
8586: LD_VAR 0 1
8590: PPUSH
8591: CALL_OW 251
8595: PPUSH
8596: CALL 10101 0 4
8600: ST_TO_ADDR
// if attempts = 0 then
8601: LD_VAR 0 17
8605: PUSH
8606: LD_INT 0
8608: EQUAL
8609: IFFALSE 8717
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8611: LD_ADDR_VAR 0 10
8615: PUSH
8616: LD_VAR 0 9
8620: PUSH
8621: LD_VAR 0 9
8625: PUSH
8626: LD_INT 1
8628: PLUS
8629: PUSH
8630: LD_VAR 0 9
8634: PUSH
8635: LD_INT 1
8637: MINUS
8638: PUSH
8639: EMPTY
8640: LIST
8641: LIST
8642: LIST
8643: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8644: LD_VAR 0 10
8648: PUSH
8649: LD_INT 2
8651: ARRAY
8652: PUSH
8653: LD_INT 6
8655: EQUAL
8656: IFFALSE 8679
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8658: LD_ADDR_VAR 0 10
8662: PUSH
8663: LD_VAR 0 10
8667: PPUSH
8668: LD_INT 2
8670: PPUSH
8671: LD_INT 0
8673: PPUSH
8674: CALL_OW 1
8678: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8679: LD_VAR 0 10
8683: PUSH
8684: LD_INT 3
8686: ARRAY
8687: PUSH
8688: LD_INT 1
8690: NEG
8691: EQUAL
8692: IFFALSE 8715
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8694: LD_ADDR_VAR 0 10
8698: PUSH
8699: LD_VAR 0 10
8703: PPUSH
8704: LD_INT 3
8706: PPUSH
8707: LD_INT 5
8709: PPUSH
8710: CALL_OW 1
8714: ST_TO_ADDR
// end else
8715: GO 8754
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8717: LD_ADDR_VAR 0 10
8721: PUSH
8722: LD_INT 0
8724: PUSH
8725: LD_INT 1
8727: PUSH
8728: LD_INT 2
8730: PUSH
8731: LD_INT 3
8733: PUSH
8734: LD_INT 4
8736: PUSH
8737: LD_INT 5
8739: PUSH
8740: EMPTY
8741: LIST
8742: LIST
8743: LIST
8744: LIST
8745: LIST
8746: LIST
8747: PUSH
8748: LD_VAR 0 9
8752: DIFF
8753: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8754: LD_ADDR_VAR 0 14
8758: PUSH
8759: DOUBLE
8760: LD_INT 1
8762: DEC
8763: ST_TO_ADDR
8764: LD_VAR 0 10
8768: PUSH
8769: LD_INT 0
8771: PLUS
8772: PUSH
8773: FOR_TO
8774: IFFALSE 9096
// case dir_list [ c ] of 0 :
8776: LD_VAR 0 10
8780: PUSH
8781: LD_VAR 0 14
8785: ARRAY
8786: PUSH
8787: LD_INT 0
8789: DOUBLE
8790: EQUAL
8791: IFTRUE 8795
8793: GO 8836
8795: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8796: LD_ADDR_VAR 0 8
8800: PUSH
8801: LD_VAR 0 8
8805: PPUSH
8806: LD_INT 1
8808: PPUSH
8809: LD_VAR 0 2
8813: PUSH
8814: LD_VAR 0 3
8818: PUSH
8819: LD_VAR 0 4
8823: MINUS
8824: PUSH
8825: EMPTY
8826: LIST
8827: LIST
8828: PPUSH
8829: CALL_OW 2
8833: ST_TO_ADDR
8834: GO 9094
8836: LD_INT 1
8838: DOUBLE
8839: EQUAL
8840: IFTRUE 8844
8842: GO 8885
8844: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8845: LD_ADDR_VAR 0 8
8849: PUSH
8850: LD_VAR 0 8
8854: PPUSH
8855: LD_INT 1
8857: PPUSH
8858: LD_VAR 0 2
8862: PUSH
8863: LD_VAR 0 4
8867: PLUS
8868: PUSH
8869: LD_VAR 0 3
8873: PUSH
8874: EMPTY
8875: LIST
8876: LIST
8877: PPUSH
8878: CALL_OW 2
8882: ST_TO_ADDR
8883: GO 9094
8885: LD_INT 2
8887: DOUBLE
8888: EQUAL
8889: IFTRUE 8893
8891: GO 8940
8893: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8894: LD_ADDR_VAR 0 8
8898: PUSH
8899: LD_VAR 0 8
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: LD_VAR 0 2
8911: PUSH
8912: LD_VAR 0 4
8916: PLUS
8917: PUSH
8918: LD_VAR 0 3
8922: PUSH
8923: LD_VAR 0 4
8927: PLUS
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PPUSH
8933: CALL_OW 2
8937: ST_TO_ADDR
8938: GO 9094
8940: LD_INT 3
8942: DOUBLE
8943: EQUAL
8944: IFTRUE 8948
8946: GO 8989
8948: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8949: LD_ADDR_VAR 0 8
8953: PUSH
8954: LD_VAR 0 8
8958: PPUSH
8959: LD_INT 1
8961: PPUSH
8962: LD_VAR 0 2
8966: PUSH
8967: LD_VAR 0 3
8971: PUSH
8972: LD_VAR 0 4
8976: PLUS
8977: PUSH
8978: EMPTY
8979: LIST
8980: LIST
8981: PPUSH
8982: CALL_OW 2
8986: ST_TO_ADDR
8987: GO 9094
8989: LD_INT 4
8991: DOUBLE
8992: EQUAL
8993: IFTRUE 8997
8995: GO 9038
8997: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8998: LD_ADDR_VAR 0 8
9002: PUSH
9003: LD_VAR 0 8
9007: PPUSH
9008: LD_INT 1
9010: PPUSH
9011: LD_VAR 0 2
9015: PUSH
9016: LD_VAR 0 4
9020: MINUS
9021: PUSH
9022: LD_VAR 0 3
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: PPUSH
9031: CALL_OW 2
9035: ST_TO_ADDR
9036: GO 9094
9038: LD_INT 5
9040: DOUBLE
9041: EQUAL
9042: IFTRUE 9046
9044: GO 9093
9046: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9047: LD_ADDR_VAR 0 8
9051: PUSH
9052: LD_VAR 0 8
9056: PPUSH
9057: LD_INT 1
9059: PPUSH
9060: LD_VAR 0 2
9064: PUSH
9065: LD_VAR 0 4
9069: MINUS
9070: PUSH
9071: LD_VAR 0 3
9075: PUSH
9076: LD_VAR 0 4
9080: MINUS
9081: PUSH
9082: EMPTY
9083: LIST
9084: LIST
9085: PPUSH
9086: CALL_OW 2
9090: ST_TO_ADDR
9091: GO 9094
9093: POP
9094: GO 8773
9096: POP
9097: POP
// if dist < 30 then
9098: LD_VAR 0 4
9102: PUSH
9103: LD_INT 30
9105: LESS
9106: IFFALSE 9118
// c = 1 else
9108: LD_ADDR_VAR 0 14
9112: PUSH
9113: LD_INT 1
9115: ST_TO_ADDR
9116: GO 9126
// c = 2 ;
9118: LD_ADDR_VAR 0 14
9122: PUSH
9123: LD_INT 2
9125: ST_TO_ADDR
// b = 1 ;
9126: LD_ADDR_VAR 0 11
9130: PUSH
9131: LD_INT 1
9133: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9134: LD_VAR 0 11
9138: PUSH
9139: LD_VAR 0 4
9143: PUSH
9144: LD_INT 1
9146: MINUS
9147: LESSEQUAL
9148: IFFALSE 9576
// begin if 0 in dir_list and 1 in dir_list then
9150: LD_INT 0
9152: PUSH
9153: LD_VAR 0 10
9157: IN
9158: PUSH
9159: LD_INT 1
9161: PUSH
9162: LD_VAR 0 10
9166: IN
9167: AND
9168: IFFALSE 9220
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9170: LD_ADDR_VAR 0 8
9174: PUSH
9175: LD_VAR 0 8
9179: PPUSH
9180: LD_INT 1
9182: PPUSH
9183: LD_VAR 0 2
9187: PUSH
9188: LD_VAR 0 11
9192: PLUS
9193: PUSH
9194: LD_VAR 0 3
9198: PUSH
9199: LD_VAR 0 4
9203: MINUS
9204: PUSH
9205: LD_VAR 0 11
9209: PLUS
9210: PUSH
9211: EMPTY
9212: LIST
9213: LIST
9214: PPUSH
9215: CALL_OW 2
9219: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9220: LD_INT 1
9222: PUSH
9223: LD_VAR 0 10
9227: IN
9228: PUSH
9229: LD_INT 2
9231: PUSH
9232: LD_VAR 0 10
9236: IN
9237: AND
9238: IFFALSE 9284
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9240: LD_ADDR_VAR 0 8
9244: PUSH
9245: LD_VAR 0 8
9249: PPUSH
9250: LD_INT 1
9252: PPUSH
9253: LD_VAR 0 2
9257: PUSH
9258: LD_VAR 0 4
9262: PLUS
9263: PUSH
9264: LD_VAR 0 3
9268: PUSH
9269: LD_VAR 0 11
9273: PLUS
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PPUSH
9279: CALL_OW 2
9283: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9284: LD_INT 2
9286: PUSH
9287: LD_VAR 0 10
9291: IN
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: LD_VAR 0 10
9300: IN
9301: AND
9302: IFFALSE 9354
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9304: LD_ADDR_VAR 0 8
9308: PUSH
9309: LD_VAR 0 8
9313: PPUSH
9314: LD_INT 1
9316: PPUSH
9317: LD_VAR 0 2
9321: PUSH
9322: LD_VAR 0 4
9326: PLUS
9327: PUSH
9328: LD_VAR 0 11
9332: MINUS
9333: PUSH
9334: LD_VAR 0 3
9338: PUSH
9339: LD_VAR 0 4
9343: PLUS
9344: PUSH
9345: EMPTY
9346: LIST
9347: LIST
9348: PPUSH
9349: CALL_OW 2
9353: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9354: LD_INT 3
9356: PUSH
9357: LD_VAR 0 10
9361: IN
9362: PUSH
9363: LD_INT 4
9365: PUSH
9366: LD_VAR 0 10
9370: IN
9371: AND
9372: IFFALSE 9424
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9374: LD_ADDR_VAR 0 8
9378: PUSH
9379: LD_VAR 0 8
9383: PPUSH
9384: LD_INT 1
9386: PPUSH
9387: LD_VAR 0 2
9391: PUSH
9392: LD_VAR 0 11
9396: MINUS
9397: PUSH
9398: LD_VAR 0 3
9402: PUSH
9403: LD_VAR 0 4
9407: PLUS
9408: PUSH
9409: LD_VAR 0 11
9413: MINUS
9414: PUSH
9415: EMPTY
9416: LIST
9417: LIST
9418: PPUSH
9419: CALL_OW 2
9423: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9424: LD_INT 4
9426: PUSH
9427: LD_VAR 0 10
9431: IN
9432: PUSH
9433: LD_INT 5
9435: PUSH
9436: LD_VAR 0 10
9440: IN
9441: AND
9442: IFFALSE 9488
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9444: LD_ADDR_VAR 0 8
9448: PUSH
9449: LD_VAR 0 8
9453: PPUSH
9454: LD_INT 1
9456: PPUSH
9457: LD_VAR 0 2
9461: PUSH
9462: LD_VAR 0 4
9466: MINUS
9467: PUSH
9468: LD_VAR 0 3
9472: PUSH
9473: LD_VAR 0 11
9477: MINUS
9478: PUSH
9479: EMPTY
9480: LIST
9481: LIST
9482: PPUSH
9483: CALL_OW 2
9487: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9488: LD_INT 5
9490: PUSH
9491: LD_VAR 0 10
9495: IN
9496: PUSH
9497: LD_INT 0
9499: PUSH
9500: LD_VAR 0 10
9504: IN
9505: AND
9506: IFFALSE 9558
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9508: LD_ADDR_VAR 0 8
9512: PUSH
9513: LD_VAR 0 8
9517: PPUSH
9518: LD_INT 1
9520: PPUSH
9521: LD_VAR 0 2
9525: PUSH
9526: LD_VAR 0 4
9530: MINUS
9531: PUSH
9532: LD_VAR 0 11
9536: PLUS
9537: PUSH
9538: LD_VAR 0 3
9542: PUSH
9543: LD_VAR 0 4
9547: MINUS
9548: PUSH
9549: EMPTY
9550: LIST
9551: LIST
9552: PPUSH
9553: CALL_OW 2
9557: ST_TO_ADDR
// b = b + c end ;
9558: LD_ADDR_VAR 0 11
9562: PUSH
9563: LD_VAR 0 11
9567: PUSH
9568: LD_VAR 0 14
9572: PLUS
9573: ST_TO_ADDR
9574: GO 9134
// if list_coords = 0 then
9576: LD_VAR 0 8
9580: PUSH
9581: LD_INT 0
9583: EQUAL
9584: IFFALSE 9588
// exit ;
9586: GO 10096
// repeat min_dist = 5000 ;
9588: LD_ADDR_VAR 0 12
9592: PUSH
9593: LD_INT 5000
9595: ST_TO_ADDR
// for b in list_coords do
9596: LD_ADDR_VAR 0 11
9600: PUSH
9601: LD_VAR 0 8
9605: PUSH
9606: FOR_IN
9607: IFFALSE 9666
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9609: LD_ADDR_VAR 0 13
9613: PUSH
9614: LD_VAR 0 1
9618: PPUSH
9619: LD_VAR 0 11
9623: PUSH
9624: LD_INT 1
9626: ARRAY
9627: PPUSH
9628: LD_VAR 0 11
9632: PUSH
9633: LD_INT 2
9635: ARRAY
9636: PPUSH
9637: CALL_OW 297
9641: ST_TO_ADDR
// if temp_dist < min_dist then
9642: LD_VAR 0 13
9646: PUSH
9647: LD_VAR 0 12
9651: LESS
9652: IFFALSE 9664
// min_dist = temp_dist ;
9654: LD_ADDR_VAR 0 12
9658: PUSH
9659: LD_VAR 0 13
9663: ST_TO_ADDR
// end ;
9664: GO 9606
9666: POP
9667: POP
// c = 0 ;
9668: LD_ADDR_VAR 0 14
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// repeat c = c + 1 ;
9676: LD_ADDR_VAR 0 14
9680: PUSH
9681: LD_VAR 0 14
9685: PUSH
9686: LD_INT 1
9688: PLUS
9689: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9690: LD_VAR 0 1
9694: PPUSH
9695: LD_VAR 0 8
9699: PUSH
9700: LD_VAR 0 14
9704: ARRAY
9705: PUSH
9706: LD_INT 1
9708: ARRAY
9709: PPUSH
9710: LD_VAR 0 8
9714: PUSH
9715: LD_VAR 0 14
9719: ARRAY
9720: PUSH
9721: LD_INT 2
9723: ARRAY
9724: PPUSH
9725: CALL_OW 297
9729: PUSH
9730: LD_VAR 0 12
9734: EQUAL
9735: IFFALSE 9800
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9737: LD_ADDR_VAR 0 7
9741: PUSH
9742: LD_VAR 0 7
9746: PPUSH
9747: LD_INT 1
9749: PPUSH
9750: LD_VAR 0 8
9754: PUSH
9755: LD_VAR 0 14
9759: ARRAY
9760: PPUSH
9761: CALL_OW 2
9765: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9766: LD_ADDR_VAR 0 8
9770: PUSH
9771: LD_VAR 0 8
9775: PPUSH
9776: LD_VAR 0 14
9780: PPUSH
9781: CALL_OW 3
9785: ST_TO_ADDR
// c = c - 1 ;
9786: LD_ADDR_VAR 0 14
9790: PUSH
9791: LD_VAR 0 14
9795: PUSH
9796: LD_INT 1
9798: MINUS
9799: ST_TO_ADDR
// end ; until c = list_coords ;
9800: LD_VAR 0 14
9804: PUSH
9805: LD_VAR 0 8
9809: EQUAL
9810: IFFALSE 9676
// c = 0 ;
9812: LD_ADDR_VAR 0 14
9816: PUSH
9817: LD_INT 0
9819: ST_TO_ADDR
// if list_nearest > 0 then
9820: LD_VAR 0 7
9824: PUSH
9825: LD_INT 0
9827: GREATER
9828: IFFALSE 9970
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9830: LD_ADDR_VAR 0 15
9834: PUSH
9835: LD_INT 1
9837: PPUSH
9838: LD_VAR 0 7
9842: PPUSH
9843: CALL_OW 12
9847: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9848: LD_ADDR_VAR 0 16
9852: PUSH
9853: LD_VAR 0 7
9857: PUSH
9858: LD_VAR 0 15
9862: ARRAY
9863: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9864: LD_VAR 0 16
9868: PUSH
9869: LD_INT 1
9871: ARRAY
9872: PPUSH
9873: LD_VAR 0 16
9877: PUSH
9878: LD_INT 2
9880: ARRAY
9881: PPUSH
9882: CALL_OW 488
9886: PUSH
9887: LD_INT 0
9889: GREATER
9890: PUSH
9891: LD_VAR 0 16
9895: PUSH
9896: LD_INT 1
9898: ARRAY
9899: PPUSH
9900: LD_VAR 0 16
9904: PUSH
9905: LD_INT 2
9907: ARRAY
9908: PPUSH
9909: CALL_OW 428
9913: PUSH
9914: LD_INT 0
9916: EQUAL
9917: AND
9918: IFFALSE 9930
// c = 1 else
9920: LD_ADDR_VAR 0 14
9924: PUSH
9925: LD_INT 1
9927: ST_TO_ADDR
9928: GO 9950
// list_nearest = Delete ( list_nearest , rand_num ) ;
9930: LD_ADDR_VAR 0 7
9934: PUSH
9935: LD_VAR 0 7
9939: PPUSH
9940: LD_VAR 0 15
9944: PPUSH
9945: CALL_OW 3
9949: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9950: LD_VAR 0 14
9954: PUSH
9955: LD_INT 1
9957: EQUAL
9958: PUSH
9959: LD_VAR 0 7
9963: PUSH
9964: LD_INT 0
9966: EQUAL
9967: OR
9968: IFFALSE 9830
// end ; until c = 1 or list_coords = 0 ;
9970: LD_VAR 0 14
9974: PUSH
9975: LD_INT 1
9977: EQUAL
9978: PUSH
9979: LD_VAR 0 8
9983: PUSH
9984: LD_INT 0
9986: EQUAL
9987: OR
9988: IFFALSE 9588
// attempts = attempts + 1 ;
9990: LD_ADDR_VAR 0 17
9994: PUSH
9995: LD_VAR 0 17
9999: PUSH
10000: LD_INT 1
10002: PLUS
10003: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10004: LD_VAR 0 14
10008: PUSH
10009: LD_INT 1
10011: EQUAL
10012: PUSH
10013: LD_VAR 0 17
10017: PUSH
10018: LD_INT 1
10020: GREATER
10021: OR
10022: IFFALSE 8547
// if c = 1 then
10024: LD_VAR 0 14
10028: PUSH
10029: LD_INT 1
10031: EQUAL
10032: IFFALSE 10096
// if add then
10034: LD_VAR 0 5
10038: IFFALSE 10069
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10040: LD_VAR 0 1
10044: PPUSH
10045: LD_VAR 0 16
10049: PUSH
10050: LD_INT 1
10052: ARRAY
10053: PPUSH
10054: LD_VAR 0 16
10058: PUSH
10059: LD_INT 2
10061: ARRAY
10062: PPUSH
10063: CALL_OW 171
10067: GO 10096
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10069: LD_VAR 0 1
10073: PPUSH
10074: LD_VAR 0 16
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: LD_VAR 0 16
10087: PUSH
10088: LD_INT 2
10090: ARRAY
10091: PPUSH
10092: CALL_OW 111
// end ;
10096: LD_VAR 0 6
10100: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10101: LD_INT 0
10103: PPUSH
10104: PPUSH
10105: PPUSH
10106: PPUSH
10107: PPUSH
10108: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10109: LD_VAR 0 1
10113: PPUSH
10114: LD_VAR 0 2
10118: PPUSH
10119: CALL_OW 488
10123: NOT
10124: PUSH
10125: LD_VAR 0 3
10129: PPUSH
10130: LD_VAR 0 4
10134: PPUSH
10135: CALL_OW 488
10139: NOT
10140: OR
10141: IFFALSE 10154
// begin result = - 1 ;
10143: LD_ADDR_VAR 0 5
10147: PUSH
10148: LD_INT 1
10150: NEG
10151: ST_TO_ADDR
// exit ;
10152: GO 10314
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10154: LD_ADDR_VAR 0 6
10158: PUSH
10159: LD_VAR 0 1
10163: PPUSH
10164: LD_VAR 0 2
10168: PPUSH
10169: LD_VAR 0 3
10173: PPUSH
10174: LD_VAR 0 4
10178: PPUSH
10179: CALL_OW 298
10183: ST_TO_ADDR
// dist_2 = 99999 ;
10184: LD_ADDR_VAR 0 7
10188: PUSH
10189: LD_INT 99999
10191: ST_TO_ADDR
// for b = 0 to 5 do
10192: LD_ADDR_VAR 0 8
10196: PUSH
10197: DOUBLE
10198: LD_INT 0
10200: DEC
10201: ST_TO_ADDR
10202: LD_INT 5
10204: PUSH
10205: FOR_TO
10206: IFFALSE 10302
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10208: LD_ADDR_VAR 0 9
10212: PUSH
10213: LD_VAR 0 1
10217: PPUSH
10218: LD_VAR 0 8
10222: PPUSH
10223: LD_VAR 0 6
10227: PPUSH
10228: CALL_OW 272
10232: PPUSH
10233: LD_VAR 0 2
10237: PPUSH
10238: LD_VAR 0 8
10242: PPUSH
10243: LD_VAR 0 6
10247: PPUSH
10248: CALL_OW 273
10252: PPUSH
10253: LD_VAR 0 3
10257: PPUSH
10258: LD_VAR 0 4
10262: PPUSH
10263: CALL_OW 298
10267: ST_TO_ADDR
// if temp_dist < dist_2 then
10268: LD_VAR 0 9
10272: PUSH
10273: LD_VAR 0 7
10277: LESS
10278: IFFALSE 10300
// begin dist_2 = temp_dist ;
10280: LD_ADDR_VAR 0 7
10284: PUSH
10285: LD_VAR 0 9
10289: ST_TO_ADDR
// dir = b ;
10290: LD_ADDR_VAR 0 10
10294: PUSH
10295: LD_VAR 0 8
10299: ST_TO_ADDR
// end ; end ;
10300: GO 10205
10302: POP
10303: POP
// result = dir ;
10304: LD_ADDR_VAR 0 5
10308: PUSH
10309: LD_VAR 0 10
10313: ST_TO_ADDR
// end ;
10314: LD_VAR 0 5
10318: RET
// export function MoveToHill ; begin
10319: LD_INT 0
10321: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10322: LD_EXP 47
10326: PPUSH
10327: LD_INT 65
10329: PPUSH
10330: LD_INT 59
10332: PPUSH
10333: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10337: LD_EXP 47
10341: PPUSH
10342: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10346: LD_EXP 48
10350: PPUSH
10351: LD_INT 65
10353: PPUSH
10354: LD_INT 58
10356: PPUSH
10357: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10361: LD_EXP 48
10365: PPUSH
10366: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10370: LD_EXP 49
10374: PPUSH
10375: LD_INT 64
10377: PPUSH
10378: LD_INT 57
10380: PPUSH
10381: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10385: LD_EXP 49
10389: PPUSH
10390: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10394: LD_EXP 50
10398: PPUSH
10399: LD_INT 64
10401: PPUSH
10402: LD_INT 56
10404: PPUSH
10405: CALL_OW 111
// AddComCrawl ( Balei ) ;
10409: LD_EXP 50
10413: PPUSH
10414: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10418: LD_EXP 51
10422: PPUSH
10423: LD_INT 63
10425: PPUSH
10426: LD_INT 55
10428: PPUSH
10429: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10433: LD_EXP 51
10437: PPUSH
10438: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10442: LD_EXP 52
10446: PPUSH
10447: LD_INT 66
10449: PPUSH
10450: LD_INT 58
10452: PPUSH
10453: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10457: LD_EXP 52
10461: PPUSH
10462: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10466: LD_EXP 54
10470: PPUSH
10471: CALL_OW 255
10475: PUSH
10476: LD_INT 6
10478: EQUAL
10479: PUSH
10480: LD_EXP 12
10484: AND
10485: IFFALSE 10511
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10487: LD_EXP 54
10491: PPUSH
10492: LD_INT 63
10494: PPUSH
10495: LD_INT 54
10497: PPUSH
10498: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10502: LD_EXP 54
10506: PPUSH
10507: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10511: LD_EXP 47
10515: PPUSH
10516: LD_INT 65
10518: PPUSH
10519: LD_INT 59
10521: PPUSH
10522: CALL_OW 297
10526: PUSH
10527: LD_INT 7
10529: LESS
10530: IFFALSE 10556
// begin ComCrawl ( Pokryshkin ) ;
10532: LD_EXP 47
10536: PPUSH
10537: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10541: LD_EXP 47
10545: PPUSH
10546: LD_INT 65
10548: PPUSH
10549: LD_INT 59
10551: PPUSH
10552: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10556: LD_EXP 48
10560: PPUSH
10561: LD_INT 65
10563: PPUSH
10564: LD_INT 58
10566: PPUSH
10567: CALL_OW 297
10571: PUSH
10572: LD_INT 7
10574: LESS
10575: IFFALSE 10601
// begin ComCrawl ( Saseda ) ;
10577: LD_EXP 48
10581: PPUSH
10582: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10586: LD_EXP 48
10590: PPUSH
10591: LD_INT 65
10593: PPUSH
10594: LD_INT 58
10596: PPUSH
10597: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
10601: LD_EXP 49
10605: PPUSH
10606: LD_INT 64
10608: PPUSH
10609: LD_INT 57
10611: PPUSH
10612: CALL_OW 297
10616: PUSH
10617: LD_INT 7
10619: LESS
10620: IFFALSE 10646
// begin ComCrawl ( Jaworska ) ;
10622: LD_EXP 49
10626: PPUSH
10627: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10631: LD_EXP 49
10635: PPUSH
10636: LD_INT 64
10638: PPUSH
10639: LD_INT 57
10641: PPUSH
10642: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
10646: LD_EXP 50
10650: PPUSH
10651: LD_INT 64
10653: PPUSH
10654: LD_INT 56
10656: PPUSH
10657: CALL_OW 297
10661: PUSH
10662: LD_INT 7
10664: LESS
10665: IFFALSE 10691
// begin ComCrawl ( Balei ) ;
10667: LD_EXP 50
10671: PPUSH
10672: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10676: LD_EXP 50
10680: PPUSH
10681: LD_INT 64
10683: PPUSH
10684: LD_INT 56
10686: PPUSH
10687: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
10691: LD_EXP 51
10695: PPUSH
10696: LD_INT 63
10698: PPUSH
10699: LD_INT 55
10701: PPUSH
10702: CALL_OW 297
10706: PUSH
10707: LD_INT 7
10709: LESS
10710: IFFALSE 10736
// begin ComCrawl ( Belkov ) ;
10712: LD_EXP 51
10716: PPUSH
10717: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10721: LD_EXP 51
10725: PPUSH
10726: LD_INT 63
10728: PPUSH
10729: LD_INT 55
10731: PPUSH
10732: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
10736: LD_EXP 52
10740: PPUSH
10741: LD_INT 66
10743: PPUSH
10744: LD_INT 58
10746: PPUSH
10747: CALL_OW 297
10751: PUSH
10752: LD_INT 7
10754: LESS
10755: IFFALSE 10781
// begin ComCrawl ( Jaunzeme ) ;
10757: LD_EXP 52
10761: PPUSH
10762: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10766: LD_EXP 52
10770: PPUSH
10771: LD_INT 66
10773: PPUSH
10774: LD_INT 58
10776: PPUSH
10777: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10781: LD_EXP 54
10785: PPUSH
10786: LD_INT 63
10788: PPUSH
10789: LD_INT 54
10791: PPUSH
10792: CALL_OW 297
10796: PUSH
10797: LD_INT 7
10799: LESS
10800: PUSH
10801: LD_EXP 54
10805: PPUSH
10806: CALL_OW 255
10810: PUSH
10811: LD_INT 6
10813: EQUAL
10814: AND
10815: PUSH
10816: LD_EXP 12
10820: AND
10821: IFFALSE 10847
// begin ComCrawl ( Gnyevko ) ;
10823: LD_EXP 54
10827: PPUSH
10828: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10832: LD_EXP 54
10836: PPUSH
10837: LD_INT 63
10839: PPUSH
10840: LD_INT 54
10842: PPUSH
10843: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10847: LD_INT 35
10849: PPUSH
10850: CALL_OW 67
// until IsDying ( Charles ) or IsDead ( Charles ) ;
10854: LD_EXP 42
10858: PPUSH
10859: CALL_OW 303
10863: PUSH
10864: LD_EXP 42
10868: PPUSH
10869: CALL_OW 301
10873: OR
10874: IFFALSE 10511
// end ;
10876: LD_VAR 0 1
10880: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
10881: LD_EXP 42
10885: PPUSH
10886: CALL_OW 303
10890: NOT
10891: PUSH
10892: LD_EXP 42
10896: PPUSH
10897: CALL_OW 301
10901: NOT
10902: OR
10903: PUSH
10904: LD_EXP 15
10908: AND
10909: IFFALSE 11251
10911: GO 10913
10913: DISABLE
// begin enable ;
10914: ENABLE
// if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10915: LD_EXP 47
10919: PPUSH
10920: LD_INT 65
10922: PPUSH
10923: LD_INT 59
10925: PPUSH
10926: CALL_OW 297
10930: PUSH
10931: LD_INT 7
10933: LESS
10934: IFFALSE 10960
// begin ComCrawl ( Pokryshkin ) ;
10936: LD_EXP 47
10940: PPUSH
10941: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10945: LD_EXP 47
10949: PPUSH
10950: LD_INT 65
10952: PPUSH
10953: LD_INT 59
10955: PPUSH
10956: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10960: LD_EXP 48
10964: PPUSH
10965: LD_INT 65
10967: PPUSH
10968: LD_INT 58
10970: PPUSH
10971: CALL_OW 297
10975: PUSH
10976: LD_INT 7
10978: LESS
10979: IFFALSE 11005
// begin ComCrawl ( Saseda ) ;
10981: LD_EXP 48
10985: PPUSH
10986: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10990: LD_EXP 48
10994: PPUSH
10995: LD_INT 65
10997: PPUSH
10998: LD_INT 58
11000: PPUSH
11001: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11005: LD_EXP 49
11009: PPUSH
11010: LD_INT 64
11012: PPUSH
11013: LD_INT 57
11015: PPUSH
11016: CALL_OW 297
11020: PUSH
11021: LD_INT 7
11023: LESS
11024: IFFALSE 11050
// begin ComCrawl ( Jaworska ) ;
11026: LD_EXP 49
11030: PPUSH
11031: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11035: LD_EXP 49
11039: PPUSH
11040: LD_INT 64
11042: PPUSH
11043: LD_INT 57
11045: PPUSH
11046: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11050: LD_EXP 50
11054: PPUSH
11055: LD_INT 64
11057: PPUSH
11058: LD_INT 56
11060: PPUSH
11061: CALL_OW 297
11065: PUSH
11066: LD_INT 7
11068: LESS
11069: IFFALSE 11095
// begin ComCrawl ( Balei ) ;
11071: LD_EXP 50
11075: PPUSH
11076: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11080: LD_EXP 50
11084: PPUSH
11085: LD_INT 64
11087: PPUSH
11088: LD_INT 56
11090: PPUSH
11091: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11095: LD_EXP 51
11099: PPUSH
11100: LD_INT 63
11102: PPUSH
11103: LD_INT 55
11105: PPUSH
11106: CALL_OW 297
11110: PUSH
11111: LD_INT 7
11113: LESS
11114: IFFALSE 11140
// begin ComCrawl ( Belkov ) ;
11116: LD_EXP 51
11120: PPUSH
11121: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11125: LD_EXP 51
11129: PPUSH
11130: LD_INT 63
11132: PPUSH
11133: LD_INT 55
11135: PPUSH
11136: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11140: LD_EXP 52
11144: PPUSH
11145: LD_INT 66
11147: PPUSH
11148: LD_INT 58
11150: PPUSH
11151: CALL_OW 297
11155: PUSH
11156: LD_INT 7
11158: LESS
11159: IFFALSE 11185
// begin ComCrawl ( Jaunzeme ) ;
11161: LD_EXP 52
11165: PPUSH
11166: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11170: LD_EXP 52
11174: PPUSH
11175: LD_INT 66
11177: PPUSH
11178: LD_INT 58
11180: PPUSH
11181: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11185: LD_EXP 54
11189: PPUSH
11190: LD_INT 63
11192: PPUSH
11193: LD_INT 54
11195: PPUSH
11196: CALL_OW 297
11200: PUSH
11201: LD_INT 7
11203: LESS
11204: PUSH
11205: LD_EXP 54
11209: PPUSH
11210: CALL_OW 255
11214: PUSH
11215: LD_INT 6
11217: EQUAL
11218: AND
11219: PUSH
11220: LD_EXP 12
11224: AND
11225: IFFALSE 11251
// begin ComCrawl ( Gnyevko ) ;
11227: LD_EXP 54
11231: PPUSH
11232: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11236: LD_EXP 54
11240: PPUSH
11241: LD_INT 63
11243: PPUSH
11244: LD_INT 54
11246: PPUSH
11247: CALL_OW 171
// end ; end ; end_of_file
11251: END
// export function BurlakDying ; begin
11252: LD_INT 0
11254: PPUSH
// YouLost ( Burlak ) ;
11255: LD_STRING Burlak
11257: PPUSH
11258: CALL_OW 104
// end ;
11262: LD_VAR 0 1
11266: RET
// every 0 0$1 trigger kirovSolds = 0 do
11267: LD_EXP 56
11271: PUSH
11272: LD_INT 0
11274: EQUAL
11275: IFFALSE 11287
11277: GO 11279
11279: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11280: LD_STRING KirovSoldsDie
11282: PPUSH
11283: CALL_OW 104
11287: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11288: LD_EXP 22
11292: PUSH
11293: LD_INT 1
11295: PPUSH
11296: LD_INT 22
11298: PUSH
11299: LD_INT 3
11301: PUSH
11302: EMPTY
11303: LIST
11304: LIST
11305: PUSH
11306: LD_INT 21
11308: PUSH
11309: LD_INT 1
11311: PUSH
11312: EMPTY
11313: LIST
11314: LIST
11315: PUSH
11316: EMPTY
11317: LIST
11318: LIST
11319: PPUSH
11320: CALL_OW 71
11324: PUSH
11325: LD_INT 0
11327: EQUAL
11328: AND
11329: IFFALSE 11608
11331: GO 11333
11333: DISABLE
11334: LD_INT 0
11336: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11337: LD_EXP 53
11341: PPUSH
11342: CALL_OW 302
11346: PUSH
11347: LD_EXP 53
11351: PPUSH
11352: CALL_OW 255
11356: PUSH
11357: LD_INT 8
11359: EQUAL
11360: AND
11361: PUSH
11362: LD_EXP 54
11366: PPUSH
11367: CALL_OW 302
11371: PUSH
11372: LD_EXP 54
11376: PPUSH
11377: CALL_OW 255
11381: PUSH
11382: LD_INT 8
11384: EQUAL
11385: AND
11386: OR
11387: IFFALSE 11519
// begin case Query ( QExit2 ) of 1 :
11389: LD_STRING QExit2
11391: PPUSH
11392: CALL_OW 97
11396: PUSH
11397: LD_INT 1
11399: DOUBLE
11400: EQUAL
11401: IFTRUE 11405
11403: GO 11497
11405: POP
// begin if IsOk ( Belkov ) then
11406: LD_EXP 51
11410: PPUSH
11411: CALL_OW 302
11415: IFFALSE 11431
// Say ( Belkov , D12-Bel-1 ) else
11417: LD_EXP 51
11421: PPUSH
11422: LD_STRING D12-Bel-1
11424: PPUSH
11425: CALL_OW 88
11429: GO 11491
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11431: LD_INT 22
11433: PUSH
11434: LD_INT 3
11436: PUSH
11437: EMPTY
11438: LIST
11439: LIST
11440: PUSH
11441: LD_INT 21
11443: PUSH
11444: LD_INT 1
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: PUSH
11451: LD_INT 50
11453: PUSH
11454: EMPTY
11455: LIST
11456: PUSH
11457: LD_INT 26
11459: PUSH
11460: LD_INT 1
11462: PUSH
11463: EMPTY
11464: LIST
11465: LIST
11466: PUSH
11467: EMPTY
11468: LIST
11469: LIST
11470: LIST
11471: LIST
11472: PPUSH
11473: CALL_OW 69
11477: PPUSH
11478: LD_STRING D12-RSol1-1
11480: PPUSH
11481: LD_STRING 
11483: PPUSH
11484: LD_INT 0
11486: PPUSH
11487: CALL 8106 0 4
// FinishMission ;
11491: CALL 11611 0 0
// end ; 2 :
11495: GO 11517
11497: LD_INT 2
11499: DOUBLE
11500: EQUAL
11501: IFTRUE 11505
11503: GO 11516
11505: POP
// begin wait ( 0 0$5 ) ;
11506: LD_INT 175
11508: PPUSH
11509: CALL_OW 67
// enable ;
11513: ENABLE
// end ; end ;
11514: GO 11517
11516: POP
// end else
11517: GO 11608
// begin if IsOk ( Belkov ) then
11519: LD_EXP 51
11523: PPUSH
11524: CALL_OW 302
11528: IFFALSE 11544
// Say ( Belkov , D12-Bel-1 ) else
11530: LD_EXP 51
11534: PPUSH
11535: LD_STRING D12-Bel-1
11537: PPUSH
11538: CALL_OW 88
11542: GO 11604
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11544: LD_INT 22
11546: PUSH
11547: LD_INT 3
11549: PUSH
11550: EMPTY
11551: LIST
11552: LIST
11553: PUSH
11554: LD_INT 21
11556: PUSH
11557: LD_INT 1
11559: PUSH
11560: EMPTY
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 50
11566: PUSH
11567: EMPTY
11568: LIST
11569: PUSH
11570: LD_INT 26
11572: PUSH
11573: LD_INT 1
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: PUSH
11580: EMPTY
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: PPUSH
11586: CALL_OW 69
11590: PPUSH
11591: LD_STRING D12-RSol1-1
11593: PPUSH
11594: LD_STRING 
11596: PPUSH
11597: LD_INT 0
11599: PPUSH
11600: CALL 8106 0 4
// FinishMission ;
11604: CALL 11611 0 0
// end ; end ;
11608: PPOPN 1
11610: END
// function FinishMission ; begin
11611: LD_INT 0
11613: PPUSH
// SetRewards ;
11614: CALL 11635 0 0
// SavePlayerCharacters ;
11618: CALL 11986 0 0
// SaveGlobalVariables ;
11622: CALL 12116 0 0
// YouWin ;
11626: CALL_OW 103
// end ;
11630: LD_VAR 0 1
11634: RET
// function SetRewards ; begin
11635: LD_INT 0
11637: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11638: LD_EXP 19
11642: NOT
11643: PUSH
11644: LD_EXP 20
11648: NOT
11649: AND
11650: IFFALSE 11662
// AddMedal ( NoEscape , 1 ) ;
11652: LD_STRING NoEscape
11654: PPUSH
11655: LD_INT 1
11657: PPUSH
11658: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11662: LD_EXP 19
11666: PUSH
11667: LD_EXP 20
11671: NOT
11672: AND
11673: IFFALSE 11686
// AddMedal ( NoEscape , - 1 ) ;
11675: LD_STRING NoEscape
11677: PPUSH
11678: LD_INT 1
11680: NEG
11681: PPUSH
11682: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11686: LD_EXP 19
11690: NOT
11691: PUSH
11692: LD_EXP 20
11696: AND
11697: IFFALSE 11710
// AddMedal ( NoEscape , - 2 ) ;
11699: LD_STRING NoEscape
11701: PPUSH
11702: LD_INT 2
11704: NEG
11705: PPUSH
11706: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11710: LD_EXP 19
11714: PUSH
11715: LD_EXP 20
11719: AND
11720: IFFALSE 11733
// AddMedal ( NoEscape , - 3 ) ;
11722: LD_STRING NoEscape
11724: PPUSH
11725: LD_INT 3
11727: NEG
11728: PPUSH
11729: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11733: LD_EXP 12
11737: PUSH
11738: LD_EXP 54
11742: PPUSH
11743: CALL_OW 302
11747: AND
11748: PUSH
11749: LD_EXP 21
11753: AND
11754: PUSH
11755: LD_EXP 53
11759: PPUSH
11760: CALL_OW 302
11764: AND
11765: IFFALSE 11777
// AddMedal ( Gnyevko , 1 ) ;
11767: LD_STRING Gnyevko
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11777: LD_EXP 12
11781: NOT
11782: PUSH
11783: LD_EXP 21
11787: AND
11788: PUSH
11789: LD_EXP 53
11793: PPUSH
11794: CALL_OW 302
11798: AND
11799: IFFALSE 11812
// AddMedal ( Gnyevko , - 1 ) ;
11801: LD_STRING Gnyevko
11803: PPUSH
11804: LD_INT 1
11806: NEG
11807: PPUSH
11808: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11812: LD_EXP 12
11816: PUSH
11817: LD_EXP 21
11821: NOT
11822: PUSH
11823: LD_EXP 54
11827: PPUSH
11828: CALL_OW 302
11832: NOT
11833: OR
11834: PUSH
11835: LD_EXP 53
11839: PPUSH
11840: CALL_OW 302
11844: NOT
11845: OR
11846: AND
11847: IFFALSE 11860
// AddMedal ( Gnyevko , - 2 ) ;
11849: LD_STRING Gnyevko
11851: PPUSH
11852: LD_INT 2
11854: NEG
11855: PPUSH
11856: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11860: LD_EXP 12
11864: NOT
11865: PUSH
11866: LD_EXP 21
11870: NOT
11871: AND
11872: PUSH
11873: LD_EXP 54
11877: PPUSH
11878: CALL_OW 302
11882: NOT
11883: PUSH
11884: LD_EXP 53
11888: PPUSH
11889: CALL_OW 302
11893: NOT
11894: AND
11895: OR
11896: IFFALSE 11909
// AddMedal ( Gnyevko , - 3 ) ;
11898: LD_STRING Gnyevko
11900: PPUSH
11901: LD_INT 3
11903: NEG
11904: PPUSH
11905: CALL_OW 101
// if lostComradesCounter = 0 then
11909: LD_EXP 23
11913: PUSH
11914: LD_INT 0
11916: EQUAL
11917: IFFALSE 11931
// AddMedal ( NoLosses , 1 ) else
11919: LD_STRING NoLosses
11921: PPUSH
11922: LD_INT 1
11924: PPUSH
11925: CALL_OW 101
11929: GO 11941
// AddMedal ( NoLosses , 0 ) ;
11931: LD_STRING NoLosses
11933: PPUSH
11934: LD_INT 0
11936: PPUSH
11937: CALL_OW 101
// GiveMedals ( Main ) ;
11941: LD_STRING Main
11943: PPUSH
11944: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11948: LD_INT 22
11950: PUSH
11951: LD_INT 3
11953: PUSH
11954: EMPTY
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 21
11960: PUSH
11961: LD_INT 1
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: PPUSH
11972: CALL_OW 69
11976: PPUSH
11977: CALL_OW 43
// end ;
11981: LD_VAR 0 1
11985: RET
// function SavePlayerCharacters ; var others ; begin
11986: LD_INT 0
11988: PPUSH
11989: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
11990: LD_EXP 46
11994: PPUSH
11995: LD_STRING Burlak
11997: PPUSH
11998: CALL 8285 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12002: LD_EXP 54
12006: PPUSH
12007: LD_STRING Gnyevko
12009: PPUSH
12010: CALL 8285 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12014: LD_EXP 51
12018: PPUSH
12019: LD_STRING Belkov
12021: PPUSH
12022: CALL 8285 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12026: LD_EXP 53
12030: PPUSH
12031: LD_STRING Kirilenkova
12033: PPUSH
12034: CALL 8285 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12038: LD_ADDR_VAR 0 2
12042: PUSH
12043: LD_INT 22
12045: PUSH
12046: LD_INT 3
12048: PUSH
12049: EMPTY
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 21
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: PUSH
12063: EMPTY
12064: LIST
12065: LIST
12066: PPUSH
12067: CALL_OW 69
12071: PUSH
12072: LD_EXP 46
12076: PUSH
12077: LD_EXP 54
12081: PUSH
12082: LD_EXP 51
12086: PUSH
12087: LD_EXP 53
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: DIFF
12098: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
12099: LD_VAR 0 2
12103: PPUSH
12104: LD_STRING other_survivors
12106: PPUSH
12107: CALL 8341 0 2
// end ;
12111: LD_VAR 0 1
12115: RET
// function SaveGlobalVariables ; begin
12116: LD_INT 0
12118: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12119: LD_EXP 1
12123: PPUSH
12124: LD_STRING 01_GladstoneStatus
12126: PPUSH
12127: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12131: LD_EXP 2
12135: PPUSH
12136: LD_STRING 01_JohannaStatus
12138: PPUSH
12139: CALL_OW 39
// end ; end_of_file
12143: LD_VAR 0 1
12147: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12148: LD_INT 0
12150: PPUSH
12151: PPUSH
12152: PPUSH
// uc_side = 1 ;
12153: LD_ADDR_OWVAR 20
12157: PUSH
12158: LD_INT 1
12160: ST_TO_ADDR
// hc_class := 1 ;
12161: LD_ADDR_OWVAR 28
12165: PUSH
12166: LD_INT 1
12168: ST_TO_ADDR
// hc_sex := sex_male ;
12169: LD_ADDR_OWVAR 27
12173: PUSH
12174: LD_INT 1
12176: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12177: LD_ADDR_OWVAR 33
12181: PUSH
12182: LD_STRING AmGalRemake
12184: ST_TO_ADDR
// hc_face_number := 1 ;
12185: LD_ADDR_OWVAR 34
12189: PUSH
12190: LD_INT 1
12192: ST_TO_ADDR
// hc_name := Charles Brown ;
12193: LD_ADDR_OWVAR 26
12197: PUSH
12198: LD_STRING Charles Brown
12200: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12201: LD_ADDR_OWVAR 29
12205: PUSH
12206: LD_INT 12
12208: PUSH
12209: LD_INT 11
12211: PUSH
12212: EMPTY
12213: LIST
12214: LIST
12215: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12216: LD_ADDR_OWVAR 31
12220: PUSH
12221: LD_INT 1
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: LD_INT 1
12229: PUSH
12230: LD_INT 1
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: ST_TO_ADDR
// Charles = CreateHuman ;
12239: LD_ADDR_EXP 42
12243: PUSH
12244: CALL_OW 44
12248: ST_TO_ADDR
// hc_class := 1 ;
12249: LD_ADDR_OWVAR 28
12253: PUSH
12254: LD_INT 1
12256: ST_TO_ADDR
// hc_sex := sex_female ;
12257: LD_ADDR_OWVAR 27
12261: PUSH
12262: LD_INT 2
12264: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12265: LD_ADDR_OWVAR 33
12269: PUSH
12270: LD_STRING AmGalRemake
12272: ST_TO_ADDR
// hc_face_number := 2 ;
12273: LD_ADDR_OWVAR 34
12277: PUSH
12278: LD_INT 2
12280: ST_TO_ADDR
// hc_name := Johanna Holland ;
12281: LD_ADDR_OWVAR 26
12285: PUSH
12286: LD_STRING Johanna Holland
12288: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12289: LD_ADDR_OWVAR 29
12293: PUSH
12294: LD_INT 12
12296: PUSH
12297: LD_INT 11
12299: PUSH
12300: EMPTY
12301: LIST
12302: LIST
12303: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12304: LD_ADDR_OWVAR 31
12308: PUSH
12309: LD_EXP 36
12313: PUSH
12314: LD_INT 0
12316: PPUSH
12317: LD_INT 2
12319: PPUSH
12320: CALL_OW 12
12324: PUSH
12325: LD_INT 0
12327: PPUSH
12328: LD_INT 2
12330: PPUSH
12331: CALL_OW 12
12335: PUSH
12336: LD_INT 0
12338: PPUSH
12339: LD_INT 2
12341: PPUSH
12342: CALL_OW 12
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: ST_TO_ADDR
// Johanna = CreateHuman ;
12353: LD_ADDR_EXP 43
12357: PUSH
12358: CALL_OW 44
12362: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12363: LD_EXP 43
12367: PPUSH
12368: LD_INT 19
12370: PPUSH
12371: LD_INT 0
12373: PPUSH
12374: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12378: LD_EXP 43
12382: PPUSH
12383: LD_INT 23
12385: PPUSH
12386: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
12390: LD_ADDR_EXP 44
12394: PUSH
12395: LD_STRING Gladstone
12397: PPUSH
12398: LD_INT 0
12400: PPUSH
12401: CALL 8043 0 2
12405: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12406: LD_EXP 44
12410: PPUSH
12411: LD_INT 22
12413: PPUSH
12414: CALL_OW 52
// amApemans = [ ] ;
12418: LD_ADDR_EXP 45
12422: PUSH
12423: EMPTY
12424: ST_TO_ADDR
// for i := 1 to amApeAmount do
12425: LD_ADDR_VAR 0 2
12429: PUSH
12430: DOUBLE
12431: LD_INT 1
12433: DEC
12434: ST_TO_ADDR
12435: LD_EXP 35
12439: PUSH
12440: FOR_TO
12441: IFFALSE 12556
// begin hc_class := class_apeman ;
12443: LD_ADDR_OWVAR 28
12447: PUSH
12448: LD_INT 12
12450: ST_TO_ADDR
// hc_gallery :=  ;
12451: LD_ADDR_OWVAR 33
12455: PUSH
12456: LD_STRING 
12458: ST_TO_ADDR
// hc_name :=  ;
12459: LD_ADDR_OWVAR 26
12463: PUSH
12464: LD_STRING 
12466: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12467: LD_ADDR_OWVAR 31
12471: PUSH
12472: LD_EXP 36
12476: PUSH
12477: LD_INT 0
12479: PPUSH
12480: LD_INT 2
12482: PPUSH
12483: CALL_OW 12
12487: PUSH
12488: LD_INT 0
12490: PPUSH
12491: LD_INT 2
12493: PPUSH
12494: CALL_OW 12
12498: PUSH
12499: LD_INT 0
12501: PPUSH
12502: LD_INT 2
12504: PPUSH
12505: CALL_OW 12
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: ST_TO_ADDR
// ape = CreateHuman ;
12516: LD_ADDR_VAR 0 3
12520: PUSH
12521: CALL_OW 44
12525: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12526: LD_VAR 0 3
12530: PPUSH
12531: LD_INT 22
12533: PPUSH
12534: CALL_OW 52
// amApemans = amApemans ^ ape ;
12538: LD_ADDR_EXP 45
12542: PUSH
12543: LD_EXP 45
12547: PUSH
12548: LD_VAR 0 3
12552: ADD
12553: ST_TO_ADDR
// end ;
12554: GO 12440
12556: POP
12557: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12558: LD_INT 23
12560: PPUSH
12561: LD_EXP 33
12565: PPUSH
12566: CALL_OW 234
// end ; end_of_file
12570: LD_VAR 0 1
12574: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12575: LD_INT 0
12577: PPUSH
// PrepareHero ;
12578: CALL 12603 0 0
// PreparePokryshkinTeams ;
12582: CALL 12697 0 0
// PrepareJelena ;
12586: CALL 12962 0 0
// PrepareGnyevko ;
12590: CALL 12994 0 0
// PrepareKurin ;
12594: CALL 12665 0 0
// end ;
12598: LD_VAR 0 1
12602: RET
// function PrepareHero ; begin
12603: LD_INT 0
12605: PPUSH
// uc_side = 3 ;
12606: LD_ADDR_OWVAR 20
12610: PUSH
12611: LD_INT 3
12613: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
12614: LD_ADDR_EXP 46
12618: PUSH
12619: LD_STRING Burlak
12621: PPUSH
12622: LD_INT 0
12624: PPUSH
12625: CALL 8043 0 2
12629: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12630: LD_EXP 46
12634: PPUSH
12635: LD_EXP 37
12639: PUSH
12640: LD_INT 1
12642: ARRAY
12643: PPUSH
12644: LD_EXP 37
12648: PUSH
12649: LD_INT 2
12651: ARRAY
12652: PPUSH
12653: LD_INT 1
12655: PPUSH
12656: CALL_OW 48
// end ;
12660: LD_VAR 0 1
12664: RET
// function PrepareKurin ; begin
12665: LD_INT 0
12667: PPUSH
// uc_side = 6 ;
12668: LD_ADDR_OWVAR 20
12672: PUSH
12673: LD_INT 6
12675: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
12676: LD_ADDR_EXP 55
12680: PUSH
12681: LD_STRING Kurin
12683: PPUSH
12684: LD_INT 0
12686: PPUSH
12687: CALL 8043 0 2
12691: ST_TO_ADDR
// end ;
12692: LD_VAR 0 1
12696: RET
// function PreparePokryshkinTeams ; begin
12697: LD_INT 0
12699: PPUSH
// uc_side = 6 ;
12700: LD_ADDR_OWVAR 20
12704: PUSH
12705: LD_INT 6
12707: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
12708: LD_ADDR_EXP 47
12712: PUSH
12713: LD_STRING Pokryshkin
12715: PPUSH
12716: LD_INT 0
12718: PPUSH
12719: CALL 8043 0 2
12723: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
12724: LD_ADDR_EXP 48
12728: PUSH
12729: LD_STRING Saseda
12731: PPUSH
12732: LD_INT 0
12734: PPUSH
12735: CALL 8043 0 2
12739: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
12740: LD_ADDR_EXP 49
12744: PUSH
12745: LD_STRING Jaworska
12747: PPUSH
12748: LD_INT 0
12750: PPUSH
12751: CALL 8043 0 2
12755: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
12756: LD_ADDR_EXP 50
12760: PUSH
12761: LD_STRING Balei
12763: PPUSH
12764: LD_INT 0
12766: PPUSH
12767: CALL 8043 0 2
12771: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
12772: LD_ADDR_EXP 51
12776: PUSH
12777: LD_STRING Belkov
12779: PPUSH
12780: LD_INT 0
12782: PPUSH
12783: CALL 8043 0 2
12787: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12788: LD_EXP 47
12792: PPUSH
12793: LD_INT 25
12795: PPUSH
12796: LD_INT 0
12798: PPUSH
12799: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12803: LD_EXP 48
12807: PPUSH
12808: LD_INT 17
12810: PPUSH
12811: LD_INT 0
12813: PPUSH
12814: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12818: LD_EXP 49
12822: PPUSH
12823: LD_INT 17
12825: PPUSH
12826: LD_INT 0
12828: PPUSH
12829: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12833: LD_EXP 50
12837: PPUSH
12838: LD_INT 17
12840: PPUSH
12841: LD_INT 0
12843: PPUSH
12844: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12848: LD_EXP 51
12852: PPUSH
12853: LD_INT 17
12855: PPUSH
12856: LD_INT 0
12858: PPUSH
12859: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12863: LD_ADDR_EXP 56
12867: PUSH
12868: LD_EXP 47
12872: PUSH
12873: LD_EXP 48
12877: PUSH
12878: LD_EXP 50
12882: PUSH
12883: LD_EXP 51
12887: PUSH
12888: LD_EXP 49
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: LIST
12899: ST_TO_ADDR
// if Difficulty < 3 then
12900: LD_OWVAR 67
12904: PUSH
12905: LD_INT 3
12907: LESS
12908: IFFALSE 12957
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
12910: LD_ADDR_EXP 52
12914: PUSH
12915: LD_STRING Jaunzeme
12917: PPUSH
12918: LD_INT 0
12920: PPUSH
12921: CALL 8043 0 2
12925: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12926: LD_EXP 52
12930: PPUSH
12931: LD_INT 26
12933: PPUSH
12934: LD_INT 0
12936: PPUSH
12937: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12941: LD_ADDR_EXP 56
12945: PUSH
12946: LD_EXP 56
12950: PUSH
12951: LD_EXP 52
12955: ADD
12956: ST_TO_ADDR
// end ; end ;
12957: LD_VAR 0 1
12961: RET
// function PrepareJelena ; begin
12962: LD_INT 0
12964: PPUSH
// uc_side = 8 ;
12965: LD_ADDR_OWVAR 20
12969: PUSH
12970: LD_INT 8
12972: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
12973: LD_ADDR_EXP 53
12977: PUSH
12978: LD_STRING Kirilenkova
12980: PPUSH
12981: LD_INT 0
12983: PPUSH
12984: CALL 8043 0 2
12988: ST_TO_ADDR
// end ;
12989: LD_VAR 0 1
12993: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
12994: LD_INT 0
12996: PPUSH
12997: PPUSH
12998: PPUSH
12999: PPUSH
// uc_side = 8 ;
13000: LD_ADDR_OWVAR 20
13004: PUSH
13005: LD_INT 8
13007: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
13008: LD_ADDR_EXP 54
13012: PUSH
13013: LD_STRING Gnyevko
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL 8043 0 2
13023: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13024: LD_ADDR_VAR 0 4
13028: PUSH
13029: LD_EXP 38
13033: PUSH
13034: LD_INT 1
13036: PPUSH
13037: LD_EXP 38
13041: PPUSH
13042: CALL_OW 12
13046: ARRAY
13047: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13048: LD_EXP 54
13052: PPUSH
13053: LD_VAR 0 4
13057: PUSH
13058: LD_INT 1
13060: ARRAY
13061: PPUSH
13062: LD_VAR 0 4
13066: PUSH
13067: LD_INT 2
13069: ARRAY
13070: PPUSH
13071: LD_INT 0
13073: PPUSH
13074: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13078: LD_EXP 54
13082: PPUSH
13083: LD_EXP 39
13087: PPUSH
13088: CALL_OW 234
// ComHold ( Gnyevko ) ;
13092: LD_EXP 54
13096: PPUSH
13097: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
13101: LD_ADDR_VAR 0 3
13105: PUSH
13106: DOUBLE
13107: LD_INT 1
13109: DEC
13110: ST_TO_ADDR
13111: LD_EXP 27
13115: PUSH
13116: LD_INT 1
13118: ARRAY
13119: PUSH
13120: LD_INT 3
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: LD_INT 1
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: PUSH
13134: LD_OWVAR 67
13138: ARRAY
13139: MINUS
13140: PUSH
13141: FOR_TO
13142: IFFALSE 13272
// begin uc_side = 0 ;
13144: LD_ADDR_OWVAR 20
13148: PUSH
13149: LD_INT 0
13151: ST_TO_ADDR
// uc_nation = nation_nature ;
13152: LD_ADDR_OWVAR 21
13156: PUSH
13157: LD_INT 0
13159: ST_TO_ADDR
// hc_class = class_apeman ;
13160: LD_ADDR_OWVAR 28
13164: PUSH
13165: LD_INT 12
13167: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13168: LD_ADDR_OWVAR 31
13172: PUSH
13173: LD_EXP 28
13177: PUSH
13178: LD_INT 1
13180: ARRAY
13181: PUSH
13182: LD_EXP 28
13186: PUSH
13187: LD_INT 2
13189: ARRAY
13190: PUSH
13191: LD_EXP 28
13195: PUSH
13196: LD_INT 3
13198: ARRAY
13199: PUSH
13200: LD_EXP 28
13204: PUSH
13205: LD_INT 4
13207: ARRAY
13208: PUSH
13209: EMPTY
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13215: LD_ADDR_OWVAR 35
13219: PUSH
13220: LD_EXP 34
13224: ST_TO_ADDR
// un = CreateHuman ;
13225: LD_ADDR_VAR 0 2
13229: PUSH
13230: CALL_OW 44
13234: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13235: LD_VAR 0 2
13239: PPUSH
13240: LD_EXP 54
13244: PPUSH
13245: CALL_OW 250
13249: PPUSH
13250: LD_EXP 54
13254: PPUSH
13255: CALL_OW 251
13259: PPUSH
13260: LD_INT 8
13262: PPUSH
13263: LD_INT 0
13265: PPUSH
13266: CALL_OW 50
// end ;
13270: GO 13141
13272: POP
13273: POP
// end ; end_of_file
13274: LD_VAR 0 1
13278: RET
// export function PrepareNature ; var i , un ; begin
13279: LD_INT 0
13281: PPUSH
13282: PPUSH
13283: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13284: LD_ADDR_VAR 0 2
13288: PUSH
13289: DOUBLE
13290: LD_INT 1
13292: DEC
13293: ST_TO_ADDR
13294: LD_EXP 27
13298: PUSH
13299: LD_INT 1
13301: ARRAY
13302: PUSH
13303: FOR_TO
13304: IFFALSE 13414
// begin uc_side = 0 ;
13306: LD_ADDR_OWVAR 20
13310: PUSH
13311: LD_INT 0
13313: ST_TO_ADDR
// uc_nation = nation_nature ;
13314: LD_ADDR_OWVAR 21
13318: PUSH
13319: LD_INT 0
13321: ST_TO_ADDR
// hc_class = class_apeman ;
13322: LD_ADDR_OWVAR 28
13326: PUSH
13327: LD_INT 12
13329: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13330: LD_ADDR_OWVAR 31
13334: PUSH
13335: LD_EXP 28
13339: PUSH
13340: LD_INT 1
13342: ARRAY
13343: PUSH
13344: LD_EXP 28
13348: PUSH
13349: LD_INT 2
13351: ARRAY
13352: PUSH
13353: LD_EXP 28
13357: PUSH
13358: LD_INT 3
13360: ARRAY
13361: PUSH
13362: LD_EXP 28
13366: PUSH
13367: LD_INT 4
13369: ARRAY
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13377: LD_ADDR_OWVAR 35
13381: PUSH
13382: LD_EXP 34
13386: ST_TO_ADDR
// un = CreateHuman ;
13387: LD_ADDR_VAR 0 3
13391: PUSH
13392: CALL_OW 44
13396: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13397: LD_VAR 0 3
13401: PPUSH
13402: LD_INT 16
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: CALL_OW 49
// end ;
13412: GO 13303
13414: POP
13415: POP
// for i := 1 to animalsAmount [ 2 ] do
13416: LD_ADDR_VAR 0 2
13420: PUSH
13421: DOUBLE
13422: LD_INT 1
13424: DEC
13425: ST_TO_ADDR
13426: LD_EXP 27
13430: PUSH
13431: LD_INT 2
13433: ARRAY
13434: PUSH
13435: FOR_TO
13436: IFFALSE 13546
// begin uc_side = 0 ;
13438: LD_ADDR_OWVAR 20
13442: PUSH
13443: LD_INT 0
13445: ST_TO_ADDR
// uc_nation = nation_nature ;
13446: LD_ADDR_OWVAR 21
13450: PUSH
13451: LD_INT 0
13453: ST_TO_ADDR
// hc_class = class_phororhacos ;
13454: LD_ADDR_OWVAR 28
13458: PUSH
13459: LD_INT 18
13461: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13462: LD_ADDR_OWVAR 31
13466: PUSH
13467: LD_EXP 28
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PUSH
13476: LD_EXP 28
13480: PUSH
13481: LD_INT 2
13483: ARRAY
13484: PUSH
13485: LD_EXP 28
13489: PUSH
13490: LD_INT 3
13492: ARRAY
13493: PUSH
13494: LD_EXP 28
13498: PUSH
13499: LD_INT 4
13501: ARRAY
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13509: LD_ADDR_OWVAR 35
13513: PUSH
13514: LD_EXP 29
13518: ST_TO_ADDR
// un = CreateHuman ;
13519: LD_ADDR_VAR 0 3
13523: PUSH
13524: CALL_OW 44
13528: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13529: LD_VAR 0 3
13533: PPUSH
13534: LD_INT 15
13536: PPUSH
13537: LD_INT 0
13539: PPUSH
13540: CALL_OW 49
// end ;
13544: GO 13435
13546: POP
13547: POP
// for i := 1 to animalsAmount [ 3 ] do
13548: LD_ADDR_VAR 0 2
13552: PUSH
13553: DOUBLE
13554: LD_INT 1
13556: DEC
13557: ST_TO_ADDR
13558: LD_EXP 27
13562: PUSH
13563: LD_INT 3
13565: ARRAY
13566: PUSH
13567: FOR_TO
13568: IFFALSE 13678
// begin uc_side = 0 ;
13570: LD_ADDR_OWVAR 20
13574: PUSH
13575: LD_INT 0
13577: ST_TO_ADDR
// uc_nation = nation_nature ;
13578: LD_ADDR_OWVAR 21
13582: PUSH
13583: LD_INT 0
13585: ST_TO_ADDR
// hc_class = class_tiger ;
13586: LD_ADDR_OWVAR 28
13590: PUSH
13591: LD_INT 14
13593: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13594: LD_ADDR_OWVAR 31
13598: PUSH
13599: LD_EXP 28
13603: PUSH
13604: LD_INT 1
13606: ARRAY
13607: PUSH
13608: LD_EXP 28
13612: PUSH
13613: LD_INT 2
13615: ARRAY
13616: PUSH
13617: LD_EXP 28
13621: PUSH
13622: LD_INT 3
13624: ARRAY
13625: PUSH
13626: LD_EXP 28
13630: PUSH
13631: LD_INT 4
13633: ARRAY
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13641: LD_ADDR_OWVAR 35
13645: PUSH
13646: LD_EXP 29
13650: ST_TO_ADDR
// un = CreateHuman ;
13651: LD_ADDR_VAR 0 3
13655: PUSH
13656: CALL_OW 44
13660: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13661: LD_VAR 0 3
13665: PPUSH
13666: LD_INT 15
13668: PPUSH
13669: LD_INT 0
13671: PPUSH
13672: CALL_OW 49
// end ;
13676: GO 13567
13678: POP
13679: POP
// for i := 1 to animalsAmount [ 4 ] do
13680: LD_ADDR_VAR 0 2
13684: PUSH
13685: DOUBLE
13686: LD_INT 1
13688: DEC
13689: ST_TO_ADDR
13690: LD_EXP 27
13694: PUSH
13695: LD_INT 4
13697: ARRAY
13698: PUSH
13699: FOR_TO
13700: IFFALSE 13810
// begin uc_side = 0 ;
13702: LD_ADDR_OWVAR 20
13706: PUSH
13707: LD_INT 0
13709: ST_TO_ADDR
// uc_nation = nation_nature ;
13710: LD_ADDR_OWVAR 21
13714: PUSH
13715: LD_INT 0
13717: ST_TO_ADDR
// hc_class = 21 ;
13718: LD_ADDR_OWVAR 28
13722: PUSH
13723: LD_INT 21
13725: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13726: LD_ADDR_OWVAR 31
13730: PUSH
13731: LD_EXP 28
13735: PUSH
13736: LD_INT 1
13738: ARRAY
13739: PUSH
13740: LD_EXP 28
13744: PUSH
13745: LD_INT 2
13747: ARRAY
13748: PUSH
13749: LD_EXP 28
13753: PUSH
13754: LD_INT 3
13756: ARRAY
13757: PUSH
13758: LD_EXP 28
13762: PUSH
13763: LD_INT 4
13765: ARRAY
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13773: LD_ADDR_OWVAR 35
13777: PUSH
13778: LD_EXP 29
13782: ST_TO_ADDR
// un = CreateHuman ;
13783: LD_ADDR_VAR 0 3
13787: PUSH
13788: CALL_OW 44
13792: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13793: LD_VAR 0 3
13797: PPUSH
13798: LD_INT 15
13800: PPUSH
13801: LD_INT 0
13803: PPUSH
13804: CALL_OW 49
// end ;
13808: GO 13699
13810: POP
13811: POP
// end ; end_of_file
13812: LD_VAR 0 1
13816: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13817: LD_VAR 0 1
13821: PUSH
13822: LD_EXP 46
13826: EQUAL
13827: PUSH
13828: LD_EXP 53
13832: PPUSH
13833: CALL_OW 255
13837: PUSH
13838: LD_INT 3
13840: EQUAL
13841: NOT
13842: AND
13843: PUSH
13844: LD_EXP 53
13848: PPUSH
13849: CALL_OW 302
13853: NOT
13854: AND
13855: IFFALSE 13861
// BurlakDying ;
13857: CALL 11252 0 0
// if unit = Gladstone then
13861: LD_VAR 0 1
13865: PUSH
13866: LD_EXP 44
13870: EQUAL
13871: IFFALSE 13881
// gladstoneStatus = 0 ;
13873: LD_ADDR_EXP 1
13877: PUSH
13878: LD_INT 0
13880: ST_TO_ADDR
// if unit = Johanna then
13881: LD_VAR 0 1
13885: PUSH
13886: LD_EXP 43
13890: EQUAL
13891: IFFALSE 13901
// johannaStatus = 0 ;
13893: LD_ADDR_EXP 2
13897: PUSH
13898: LD_INT 0
13900: ST_TO_ADDR
// end ;
13901: PPOPN 1
13903: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13904: LD_VAR 0 1
13908: PUSH
13909: LD_EXP 46
13913: EQUAL
13914: IFFALSE 13920
// BurlakDying ;
13916: CALL 11252 0 0
// if GetSide ( unit ) = 3 then
13920: LD_VAR 0 1
13924: PPUSH
13925: CALL_OW 255
13929: PUSH
13930: LD_INT 3
13932: EQUAL
13933: IFFALSE 13949
// lostComradesCounter = lostComradesCounter + 1 ;
13935: LD_ADDR_EXP 23
13939: PUSH
13940: LD_EXP 23
13944: PUSH
13945: LD_INT 1
13947: PLUS
13948: ST_TO_ADDR
// if unit in kirovSolds then
13949: LD_VAR 0 1
13953: PUSH
13954: LD_EXP 56
13958: IN
13959: IFFALSE 13977
// kirovSolds = kirovSolds diff unit ;
13961: LD_ADDR_EXP 56
13965: PUSH
13966: LD_EXP 56
13970: PUSH
13971: LD_VAR 0 1
13975: DIFF
13976: ST_TO_ADDR
// end ;
13977: PPOPN 1
13979: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
13980: LD_VAR 0 1
13984: PUSH
13985: LD_INT 3
13987: EQUAL
13988: PUSH
13989: LD_VAR 0 2
13993: PUSH
13994: LD_INT 1
13996: EQUAL
13997: AND
13998: PUSH
13999: LD_VAR 0 1
14003: PUSH
14004: LD_INT 1
14006: EQUAL
14007: PUSH
14008: LD_VAR 0 2
14012: PUSH
14013: LD_INT 3
14015: EQUAL
14016: AND
14017: PUSH
14018: LD_EXP 17
14022: PUSH
14023: LD_INT 1
14025: EQUAL
14026: AND
14027: OR
14028: IFFALSE 14034
// Dial_SecondAttack ;
14030: CALL 6004 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14034: LD_VAR 0 1
14038: PUSH
14039: LD_INT 3
14041: EQUAL
14042: PUSH
14043: LD_VAR 0 2
14047: PUSH
14048: LD_INT 6
14050: EQUAL
14051: AND
14052: PUSH
14053: LD_EXP 18
14057: NOT
14058: AND
14059: IFFALSE 14065
// Dialogue_AttackComrade ;
14061: CALL 4123 0 0
// end ; end_of_file
14065: PPOPN 2
14067: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14068: LD_EXP 53
14072: PPUSH
14073: CALL_OW 255
14077: PUSH
14078: LD_INT 3
14080: EQUAL
14081: PUSH
14082: LD_EXP 26
14086: PUSH
14087: LD_INT 525
14089: LESS
14090: AND
14091: IFFALSE 14103
14093: GO 14095
14095: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14096: LD_STRING ACH_YELENA
14098: PPUSH
14099: CALL_OW 543
14103: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14104: LD_INT 23
14106: PUSH
14107: LD_INT 0
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: PUSH
14114: LD_INT 2
14116: PUSH
14117: LD_INT 25
14119: PUSH
14120: LD_INT 14
14122: PUSH
14123: EMPTY
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 25
14129: PUSH
14130: LD_INT 18
14132: PUSH
14133: EMPTY
14134: LIST
14135: LIST
14136: PUSH
14137: LD_INT 25
14139: PUSH
14140: LD_INT 12
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: EMPTY
14148: LIST
14149: LIST
14150: LIST
14151: LIST
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PPUSH
14157: CALL_OW 69
14161: NOT
14162: IFFALSE 14174
14164: GO 14166
14166: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14167: LD_STRING ACH_NATURE
14169: PPUSH
14170: CALL_OW 543
14174: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
14175: LD_INT 0
14177: PPUSH
14178: PPUSH
// if not missionNumber then
14179: LD_VAR 0 2
14183: NOT
14184: IFFALSE 14188
// exit ;
14186: GO 14318
// achiv := false ;
14188: LD_ADDR_VAR 0 7
14192: PUSH
14193: LD_INT 0
14195: ST_TO_ADDR
// case campaignNumber of 1 :
14196: LD_VAR 0 1
14200: PUSH
14201: LD_INT 1
14203: DOUBLE
14204: EQUAL
14205: IFTRUE 14209
14207: GO 14220
14209: POP
// achiv := ACH_GOTA ; 2 :
14210: LD_ADDR_VAR 0 7
14214: PUSH
14215: LD_STRING ACH_GOTA
14217: ST_TO_ADDR
14218: GO 14270
14220: LD_INT 2
14222: DOUBLE
14223: EQUAL
14224: IFTRUE 14228
14226: GO 14231
14228: POP
// ; 3 :
14229: GO 14270
14231: LD_INT 3
14233: DOUBLE
14234: EQUAL
14235: IFTRUE 14239
14237: GO 14250
14239: POP
// achiv := ACH_MOTSU ; 4 :
14240: LD_ADDR_VAR 0 7
14244: PUSH
14245: LD_STRING ACH_MOTSU
14247: ST_TO_ADDR
14248: GO 14270
14250: LD_INT 4
14252: DOUBLE
14253: EQUAL
14254: IFTRUE 14258
14256: GO 14269
14258: POP
// achiv := ACH_LOP ; end ;
14259: LD_ADDR_VAR 0 7
14263: PUSH
14264: LD_STRING ACH_LOP
14266: ST_TO_ADDR
14267: GO 14270
14269: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
14270: LD_OWVAR 67
14274: PUSH
14275: LD_INT 3
14277: EQUAL
14278: PUSH
14279: LD_VAR 0 7
14283: AND
14284: PUSH
14285: LD_VAR 0 3
14289: AND
14290: PUSH
14291: LD_VAR 0 4
14295: AND
14296: PUSH
14297: LD_VAR 0 5
14301: AND
14302: IFFALSE 14318
// SetAchievementEX ( achiv , missionNumber ) ;
14304: LD_VAR 0 7
14308: PPUSH
14309: LD_VAR 0 2
14313: PPUSH
14314: CALL_OW 564
// end ;
14318: LD_VAR 0 6
14322: RET
// export function SA_BehemothConstructed ; begin
14323: LD_INT 0
14325: PPUSH
// SetAchievement ( ACH_SMC ) ;
14326: LD_STRING ACH_SMC
14328: PPUSH
14329: CALL_OW 543
// end ; end_of_file
14333: LD_VAR 0 1
14337: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14338: LD_VAR 0 2
14342: PUSH
14343: LD_INT 100
14345: EQUAL
14346: IFFALSE 15295
// begin if not StreamModeActive then
14348: LD_EXP 57
14352: NOT
14353: IFFALSE 14363
// StreamModeActive := true ;
14355: LD_ADDR_EXP 57
14359: PUSH
14360: LD_INT 1
14362: ST_TO_ADDR
// if p3 = 0 then
14363: LD_VAR 0 3
14367: PUSH
14368: LD_INT 0
14370: EQUAL
14371: IFFALSE 14377
// InitStreamMode ;
14373: CALL 15528 0 0
// if p3 = 1 then
14377: LD_VAR 0 3
14381: PUSH
14382: LD_INT 1
14384: EQUAL
14385: IFFALSE 14395
// sRocket := true ;
14387: LD_ADDR_EXP 62
14391: PUSH
14392: LD_INT 1
14394: ST_TO_ADDR
// if p3 = 2 then
14395: LD_VAR 0 3
14399: PUSH
14400: LD_INT 2
14402: EQUAL
14403: IFFALSE 14413
// sSpeed := true ;
14405: LD_ADDR_EXP 61
14409: PUSH
14410: LD_INT 1
14412: ST_TO_ADDR
// if p3 = 3 then
14413: LD_VAR 0 3
14417: PUSH
14418: LD_INT 3
14420: EQUAL
14421: IFFALSE 14431
// sEngine := true ;
14423: LD_ADDR_EXP 63
14427: PUSH
14428: LD_INT 1
14430: ST_TO_ADDR
// if p3 = 4 then
14431: LD_VAR 0 3
14435: PUSH
14436: LD_INT 4
14438: EQUAL
14439: IFFALSE 14449
// sSpec := true ;
14441: LD_ADDR_EXP 60
14445: PUSH
14446: LD_INT 1
14448: ST_TO_ADDR
// if p3 = 5 then
14449: LD_VAR 0 3
14453: PUSH
14454: LD_INT 5
14456: EQUAL
14457: IFFALSE 14467
// sLevel := true ;
14459: LD_ADDR_EXP 64
14463: PUSH
14464: LD_INT 1
14466: ST_TO_ADDR
// if p3 = 6 then
14467: LD_VAR 0 3
14471: PUSH
14472: LD_INT 6
14474: EQUAL
14475: IFFALSE 14485
// sArmoury := true ;
14477: LD_ADDR_EXP 65
14481: PUSH
14482: LD_INT 1
14484: ST_TO_ADDR
// if p3 = 7 then
14485: LD_VAR 0 3
14489: PUSH
14490: LD_INT 7
14492: EQUAL
14493: IFFALSE 14503
// sRadar := true ;
14495: LD_ADDR_EXP 66
14499: PUSH
14500: LD_INT 1
14502: ST_TO_ADDR
// if p3 = 8 then
14503: LD_VAR 0 3
14507: PUSH
14508: LD_INT 8
14510: EQUAL
14511: IFFALSE 14521
// sBunker := true ;
14513: LD_ADDR_EXP 67
14517: PUSH
14518: LD_INT 1
14520: ST_TO_ADDR
// if p3 = 9 then
14521: LD_VAR 0 3
14525: PUSH
14526: LD_INT 9
14528: EQUAL
14529: IFFALSE 14539
// sHack := true ;
14531: LD_ADDR_EXP 68
14535: PUSH
14536: LD_INT 1
14538: ST_TO_ADDR
// if p3 = 10 then
14539: LD_VAR 0 3
14543: PUSH
14544: LD_INT 10
14546: EQUAL
14547: IFFALSE 14557
// sFire := true ;
14549: LD_ADDR_EXP 69
14553: PUSH
14554: LD_INT 1
14556: ST_TO_ADDR
// if p3 = 11 then
14557: LD_VAR 0 3
14561: PUSH
14562: LD_INT 11
14564: EQUAL
14565: IFFALSE 14575
// sRefresh := true ;
14567: LD_ADDR_EXP 70
14571: PUSH
14572: LD_INT 1
14574: ST_TO_ADDR
// if p3 = 12 then
14575: LD_VAR 0 3
14579: PUSH
14580: LD_INT 12
14582: EQUAL
14583: IFFALSE 14593
// sExp := true ;
14585: LD_ADDR_EXP 71
14589: PUSH
14590: LD_INT 1
14592: ST_TO_ADDR
// if p3 = 13 then
14593: LD_VAR 0 3
14597: PUSH
14598: LD_INT 13
14600: EQUAL
14601: IFFALSE 14611
// sDepot := true ;
14603: LD_ADDR_EXP 72
14607: PUSH
14608: LD_INT 1
14610: ST_TO_ADDR
// if p3 = 14 then
14611: LD_VAR 0 3
14615: PUSH
14616: LD_INT 14
14618: EQUAL
14619: IFFALSE 14629
// sFlag := true ;
14621: LD_ADDR_EXP 73
14625: PUSH
14626: LD_INT 1
14628: ST_TO_ADDR
// if p3 = 15 then
14629: LD_VAR 0 3
14633: PUSH
14634: LD_INT 15
14636: EQUAL
14637: IFFALSE 14647
// sKamikadze := true ;
14639: LD_ADDR_EXP 81
14643: PUSH
14644: LD_INT 1
14646: ST_TO_ADDR
// if p3 = 16 then
14647: LD_VAR 0 3
14651: PUSH
14652: LD_INT 16
14654: EQUAL
14655: IFFALSE 14665
// sTroll := true ;
14657: LD_ADDR_EXP 82
14661: PUSH
14662: LD_INT 1
14664: ST_TO_ADDR
// if p3 = 17 then
14665: LD_VAR 0 3
14669: PUSH
14670: LD_INT 17
14672: EQUAL
14673: IFFALSE 14683
// sSlow := true ;
14675: LD_ADDR_EXP 83
14679: PUSH
14680: LD_INT 1
14682: ST_TO_ADDR
// if p3 = 18 then
14683: LD_VAR 0 3
14687: PUSH
14688: LD_INT 18
14690: EQUAL
14691: IFFALSE 14701
// sLack := true ;
14693: LD_ADDR_EXP 84
14697: PUSH
14698: LD_INT 1
14700: ST_TO_ADDR
// if p3 = 19 then
14701: LD_VAR 0 3
14705: PUSH
14706: LD_INT 19
14708: EQUAL
14709: IFFALSE 14719
// sTank := true ;
14711: LD_ADDR_EXP 86
14715: PUSH
14716: LD_INT 1
14718: ST_TO_ADDR
// if p3 = 20 then
14719: LD_VAR 0 3
14723: PUSH
14724: LD_INT 20
14726: EQUAL
14727: IFFALSE 14737
// sRemote := true ;
14729: LD_ADDR_EXP 87
14733: PUSH
14734: LD_INT 1
14736: ST_TO_ADDR
// if p3 = 21 then
14737: LD_VAR 0 3
14741: PUSH
14742: LD_INT 21
14744: EQUAL
14745: IFFALSE 14755
// sPowell := true ;
14747: LD_ADDR_EXP 88
14751: PUSH
14752: LD_INT 1
14754: ST_TO_ADDR
// if p3 = 22 then
14755: LD_VAR 0 3
14759: PUSH
14760: LD_INT 22
14762: EQUAL
14763: IFFALSE 14773
// sTeleport := true ;
14765: LD_ADDR_EXP 91
14769: PUSH
14770: LD_INT 1
14772: ST_TO_ADDR
// if p3 = 23 then
14773: LD_VAR 0 3
14777: PUSH
14778: LD_INT 23
14780: EQUAL
14781: IFFALSE 14791
// sOilTower := true ;
14783: LD_ADDR_EXP 93
14787: PUSH
14788: LD_INT 1
14790: ST_TO_ADDR
// if p3 = 24 then
14791: LD_VAR 0 3
14795: PUSH
14796: LD_INT 24
14798: EQUAL
14799: IFFALSE 14809
// sShovel := true ;
14801: LD_ADDR_EXP 94
14805: PUSH
14806: LD_INT 1
14808: ST_TO_ADDR
// if p3 = 25 then
14809: LD_VAR 0 3
14813: PUSH
14814: LD_INT 25
14816: EQUAL
14817: IFFALSE 14827
// sSheik := true ;
14819: LD_ADDR_EXP 95
14823: PUSH
14824: LD_INT 1
14826: ST_TO_ADDR
// if p3 = 26 then
14827: LD_VAR 0 3
14831: PUSH
14832: LD_INT 26
14834: EQUAL
14835: IFFALSE 14845
// sEarthquake := true ;
14837: LD_ADDR_EXP 97
14841: PUSH
14842: LD_INT 1
14844: ST_TO_ADDR
// if p3 = 27 then
14845: LD_VAR 0 3
14849: PUSH
14850: LD_INT 27
14852: EQUAL
14853: IFFALSE 14863
// sAI := true ;
14855: LD_ADDR_EXP 98
14859: PUSH
14860: LD_INT 1
14862: ST_TO_ADDR
// if p3 = 28 then
14863: LD_VAR 0 3
14867: PUSH
14868: LD_INT 28
14870: EQUAL
14871: IFFALSE 14881
// sCargo := true ;
14873: LD_ADDR_EXP 101
14877: PUSH
14878: LD_INT 1
14880: ST_TO_ADDR
// if p3 = 29 then
14881: LD_VAR 0 3
14885: PUSH
14886: LD_INT 29
14888: EQUAL
14889: IFFALSE 14899
// sDLaser := true ;
14891: LD_ADDR_EXP 102
14895: PUSH
14896: LD_INT 1
14898: ST_TO_ADDR
// if p3 = 30 then
14899: LD_VAR 0 3
14903: PUSH
14904: LD_INT 30
14906: EQUAL
14907: IFFALSE 14917
// sExchange := true ;
14909: LD_ADDR_EXP 103
14913: PUSH
14914: LD_INT 1
14916: ST_TO_ADDR
// if p3 = 31 then
14917: LD_VAR 0 3
14921: PUSH
14922: LD_INT 31
14924: EQUAL
14925: IFFALSE 14935
// sFac := true ;
14927: LD_ADDR_EXP 104
14931: PUSH
14932: LD_INT 1
14934: ST_TO_ADDR
// if p3 = 32 then
14935: LD_VAR 0 3
14939: PUSH
14940: LD_INT 32
14942: EQUAL
14943: IFFALSE 14953
// sPower := true ;
14945: LD_ADDR_EXP 105
14949: PUSH
14950: LD_INT 1
14952: ST_TO_ADDR
// if p3 = 33 then
14953: LD_VAR 0 3
14957: PUSH
14958: LD_INT 33
14960: EQUAL
14961: IFFALSE 14971
// sRandom := true ;
14963: LD_ADDR_EXP 106
14967: PUSH
14968: LD_INT 1
14970: ST_TO_ADDR
// if p3 = 34 then
14971: LD_VAR 0 3
14975: PUSH
14976: LD_INT 34
14978: EQUAL
14979: IFFALSE 14989
// sShield := true ;
14981: LD_ADDR_EXP 107
14985: PUSH
14986: LD_INT 1
14988: ST_TO_ADDR
// if p3 = 35 then
14989: LD_VAR 0 3
14993: PUSH
14994: LD_INT 35
14996: EQUAL
14997: IFFALSE 15007
// sTime := true ;
14999: LD_ADDR_EXP 108
15003: PUSH
15004: LD_INT 1
15006: ST_TO_ADDR
// if p3 = 36 then
15007: LD_VAR 0 3
15011: PUSH
15012: LD_INT 36
15014: EQUAL
15015: IFFALSE 15025
// sTools := true ;
15017: LD_ADDR_EXP 109
15021: PUSH
15022: LD_INT 1
15024: ST_TO_ADDR
// if p3 = 101 then
15025: LD_VAR 0 3
15029: PUSH
15030: LD_INT 101
15032: EQUAL
15033: IFFALSE 15043
// sSold := true ;
15035: LD_ADDR_EXP 74
15039: PUSH
15040: LD_INT 1
15042: ST_TO_ADDR
// if p3 = 102 then
15043: LD_VAR 0 3
15047: PUSH
15048: LD_INT 102
15050: EQUAL
15051: IFFALSE 15061
// sDiff := true ;
15053: LD_ADDR_EXP 75
15057: PUSH
15058: LD_INT 1
15060: ST_TO_ADDR
// if p3 = 103 then
15061: LD_VAR 0 3
15065: PUSH
15066: LD_INT 103
15068: EQUAL
15069: IFFALSE 15079
// sFog := true ;
15071: LD_ADDR_EXP 78
15075: PUSH
15076: LD_INT 1
15078: ST_TO_ADDR
// if p3 = 104 then
15079: LD_VAR 0 3
15083: PUSH
15084: LD_INT 104
15086: EQUAL
15087: IFFALSE 15097
// sReset := true ;
15089: LD_ADDR_EXP 79
15093: PUSH
15094: LD_INT 1
15096: ST_TO_ADDR
// if p3 = 105 then
15097: LD_VAR 0 3
15101: PUSH
15102: LD_INT 105
15104: EQUAL
15105: IFFALSE 15115
// sSun := true ;
15107: LD_ADDR_EXP 80
15111: PUSH
15112: LD_INT 1
15114: ST_TO_ADDR
// if p3 = 106 then
15115: LD_VAR 0 3
15119: PUSH
15120: LD_INT 106
15122: EQUAL
15123: IFFALSE 15133
// sTiger := true ;
15125: LD_ADDR_EXP 76
15129: PUSH
15130: LD_INT 1
15132: ST_TO_ADDR
// if p3 = 107 then
15133: LD_VAR 0 3
15137: PUSH
15138: LD_INT 107
15140: EQUAL
15141: IFFALSE 15151
// sBomb := true ;
15143: LD_ADDR_EXP 77
15147: PUSH
15148: LD_INT 1
15150: ST_TO_ADDR
// if p3 = 108 then
15151: LD_VAR 0 3
15155: PUSH
15156: LD_INT 108
15158: EQUAL
15159: IFFALSE 15169
// sWound := true ;
15161: LD_ADDR_EXP 85
15165: PUSH
15166: LD_INT 1
15168: ST_TO_ADDR
// if p3 = 109 then
15169: LD_VAR 0 3
15173: PUSH
15174: LD_INT 109
15176: EQUAL
15177: IFFALSE 15187
// sBetray := true ;
15179: LD_ADDR_EXP 89
15183: PUSH
15184: LD_INT 1
15186: ST_TO_ADDR
// if p3 = 110 then
15187: LD_VAR 0 3
15191: PUSH
15192: LD_INT 110
15194: EQUAL
15195: IFFALSE 15205
// sContamin := true ;
15197: LD_ADDR_EXP 90
15201: PUSH
15202: LD_INT 1
15204: ST_TO_ADDR
// if p3 = 111 then
15205: LD_VAR 0 3
15209: PUSH
15210: LD_INT 111
15212: EQUAL
15213: IFFALSE 15223
// sOil := true ;
15215: LD_ADDR_EXP 92
15219: PUSH
15220: LD_INT 1
15222: ST_TO_ADDR
// if p3 = 112 then
15223: LD_VAR 0 3
15227: PUSH
15228: LD_INT 112
15230: EQUAL
15231: IFFALSE 15241
// sStu := true ;
15233: LD_ADDR_EXP 96
15237: PUSH
15238: LD_INT 1
15240: ST_TO_ADDR
// if p3 = 113 then
15241: LD_VAR 0 3
15245: PUSH
15246: LD_INT 113
15248: EQUAL
15249: IFFALSE 15259
// sBazooka := true ;
15251: LD_ADDR_EXP 99
15255: PUSH
15256: LD_INT 1
15258: ST_TO_ADDR
// if p3 = 114 then
15259: LD_VAR 0 3
15263: PUSH
15264: LD_INT 114
15266: EQUAL
15267: IFFALSE 15277
// sMortar := true ;
15269: LD_ADDR_EXP 100
15273: PUSH
15274: LD_INT 1
15276: ST_TO_ADDR
// if p3 = 115 then
15277: LD_VAR 0 3
15281: PUSH
15282: LD_INT 115
15284: EQUAL
15285: IFFALSE 15295
// sRanger := true ;
15287: LD_ADDR_EXP 110
15291: PUSH
15292: LD_INT 1
15294: ST_TO_ADDR
// end ; if p2 = 101 then
15295: LD_VAR 0 2
15299: PUSH
15300: LD_INT 101
15302: EQUAL
15303: IFFALSE 15506
// begin case p3 of 1 :
15305: LD_VAR 0 3
15309: PUSH
15310: LD_INT 1
15312: DOUBLE
15313: EQUAL
15314: IFTRUE 15318
15316: GO 15325
15318: POP
// hHackUnlimitedResources ; 2 :
15319: CALL 25600 0 0
15323: GO 15506
15325: LD_INT 2
15327: DOUBLE
15328: EQUAL
15329: IFTRUE 15333
15331: GO 15340
15333: POP
// hHackSetLevel10 ; 3 :
15334: CALL 25733 0 0
15338: GO 15506
15340: LD_INT 3
15342: DOUBLE
15343: EQUAL
15344: IFTRUE 15348
15346: GO 15355
15348: POP
// hHackSetLevel10YourUnits ; 4 :
15349: CALL 25818 0 0
15353: GO 15506
15355: LD_INT 4
15357: DOUBLE
15358: EQUAL
15359: IFTRUE 15363
15361: GO 15385
15363: POP
// hHackSpawnHuman ( p4 , p5 , p6 ) ; 5 :
15364: LD_VAR 0 4
15368: PPUSH
15369: LD_VAR 0 5
15373: PPUSH
15374: LD_VAR 0 6
15378: PPUSH
15379: CALL 25908 0 3
15383: GO 15506
15385: LD_INT 5
15387: DOUBLE
15388: EQUAL
15389: IFTRUE 15393
15391: GO 15400
15393: POP
// hHackSpawnVehicle ; 6 :
15394: CALL 25969 0 0
15398: GO 15506
15400: LD_INT 6
15402: DOUBLE
15403: EQUAL
15404: IFTRUE 15408
15406: GO 15415
15408: POP
// hHackInvincible ; 7 :
15409: CALL 26515 0 0
15413: GO 15506
15415: LD_INT 7
15417: DOUBLE
15418: EQUAL
15419: IFTRUE 15423
15421: GO 15430
15423: POP
// hHackInvisible ; 8 :
15424: CALL 26626 0 0
15428: GO 15506
15430: LD_INT 8
15432: DOUBLE
15433: EQUAL
15434: IFTRUE 15438
15436: GO 15445
15438: POP
// hHackChangeYourSide ; 9 :
15439: CALL 26683 0 0
15443: GO 15506
15445: LD_INT 9
15447: DOUBLE
15448: EQUAL
15449: IFTRUE 15453
15451: GO 15460
15453: POP
// hHackChangeUnitSide ; 10 :
15454: CALL 26725 0 0
15458: GO 15506
15460: LD_INT 10
15462: DOUBLE
15463: EQUAL
15464: IFTRUE 15468
15466: GO 15475
15468: POP
// hHackFog ; 11 :
15469: CALL 26826 0 0
15473: GO 15506
15475: LD_INT 11
15477: DOUBLE
15478: EQUAL
15479: IFTRUE 15483
15481: GO 15490
15483: POP
// hHackApeman ; 12 :
15484: CALL 26841 0 0
15488: GO 15506
15490: LD_INT 12
15492: DOUBLE
15493: EQUAL
15494: IFTRUE 15498
15496: GO 15505
15498: POP
// hHackBoom ; end ;
15499: CALL 26926 0 0
15503: GO 15506
15505: POP
// end ; end ;
15506: PPOPN 6
15508: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15509: GO 15511
15511: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15512: LD_STRING initStreamRollete();
15514: PPUSH
15515: CALL_OW 559
// InitStreamMode ;
15519: CALL 15528 0 0
// DefineStreamItems ( ) ;
15523: CALL 15968 0 0
// end ;
15527: END
// function InitStreamMode ; begin
15528: LD_INT 0
15530: PPUSH
// streamModeActive := false ;
15531: LD_ADDR_EXP 57
15535: PUSH
15536: LD_INT 0
15538: ST_TO_ADDR
// normalCounter := 36 ;
15539: LD_ADDR_EXP 58
15543: PUSH
15544: LD_INT 36
15546: ST_TO_ADDR
// hardcoreCounter := 16 ;
15547: LD_ADDR_EXP 59
15551: PUSH
15552: LD_INT 16
15554: ST_TO_ADDR
// sRocket := false ;
15555: LD_ADDR_EXP 62
15559: PUSH
15560: LD_INT 0
15562: ST_TO_ADDR
// sSpeed := false ;
15563: LD_ADDR_EXP 61
15567: PUSH
15568: LD_INT 0
15570: ST_TO_ADDR
// sEngine := false ;
15571: LD_ADDR_EXP 63
15575: PUSH
15576: LD_INT 0
15578: ST_TO_ADDR
// sSpec := false ;
15579: LD_ADDR_EXP 60
15583: PUSH
15584: LD_INT 0
15586: ST_TO_ADDR
// sLevel := false ;
15587: LD_ADDR_EXP 64
15591: PUSH
15592: LD_INT 0
15594: ST_TO_ADDR
// sArmoury := false ;
15595: LD_ADDR_EXP 65
15599: PUSH
15600: LD_INT 0
15602: ST_TO_ADDR
// sRadar := false ;
15603: LD_ADDR_EXP 66
15607: PUSH
15608: LD_INT 0
15610: ST_TO_ADDR
// sBunker := false ;
15611: LD_ADDR_EXP 67
15615: PUSH
15616: LD_INT 0
15618: ST_TO_ADDR
// sHack := false ;
15619: LD_ADDR_EXP 68
15623: PUSH
15624: LD_INT 0
15626: ST_TO_ADDR
// sFire := false ;
15627: LD_ADDR_EXP 69
15631: PUSH
15632: LD_INT 0
15634: ST_TO_ADDR
// sRefresh := false ;
15635: LD_ADDR_EXP 70
15639: PUSH
15640: LD_INT 0
15642: ST_TO_ADDR
// sExp := false ;
15643: LD_ADDR_EXP 71
15647: PUSH
15648: LD_INT 0
15650: ST_TO_ADDR
// sDepot := false ;
15651: LD_ADDR_EXP 72
15655: PUSH
15656: LD_INT 0
15658: ST_TO_ADDR
// sFlag := false ;
15659: LD_ADDR_EXP 73
15663: PUSH
15664: LD_INT 0
15666: ST_TO_ADDR
// sKamikadze := false ;
15667: LD_ADDR_EXP 81
15671: PUSH
15672: LD_INT 0
15674: ST_TO_ADDR
// sTroll := false ;
15675: LD_ADDR_EXP 82
15679: PUSH
15680: LD_INT 0
15682: ST_TO_ADDR
// sSlow := false ;
15683: LD_ADDR_EXP 83
15687: PUSH
15688: LD_INT 0
15690: ST_TO_ADDR
// sLack := false ;
15691: LD_ADDR_EXP 84
15695: PUSH
15696: LD_INT 0
15698: ST_TO_ADDR
// sTank := false ;
15699: LD_ADDR_EXP 86
15703: PUSH
15704: LD_INT 0
15706: ST_TO_ADDR
// sRemote := false ;
15707: LD_ADDR_EXP 87
15711: PUSH
15712: LD_INT 0
15714: ST_TO_ADDR
// sPowell := false ;
15715: LD_ADDR_EXP 88
15719: PUSH
15720: LD_INT 0
15722: ST_TO_ADDR
// sTeleport := false ;
15723: LD_ADDR_EXP 91
15727: PUSH
15728: LD_INT 0
15730: ST_TO_ADDR
// sOilTower := false ;
15731: LD_ADDR_EXP 93
15735: PUSH
15736: LD_INT 0
15738: ST_TO_ADDR
// sShovel := false ;
15739: LD_ADDR_EXP 94
15743: PUSH
15744: LD_INT 0
15746: ST_TO_ADDR
// sSheik := false ;
15747: LD_ADDR_EXP 95
15751: PUSH
15752: LD_INT 0
15754: ST_TO_ADDR
// sEarthquake := false ;
15755: LD_ADDR_EXP 97
15759: PUSH
15760: LD_INT 0
15762: ST_TO_ADDR
// sAI := false ;
15763: LD_ADDR_EXP 98
15767: PUSH
15768: LD_INT 0
15770: ST_TO_ADDR
// sCargo := false ;
15771: LD_ADDR_EXP 101
15775: PUSH
15776: LD_INT 0
15778: ST_TO_ADDR
// sDLaser := false ;
15779: LD_ADDR_EXP 102
15783: PUSH
15784: LD_INT 0
15786: ST_TO_ADDR
// sExchange := false ;
15787: LD_ADDR_EXP 103
15791: PUSH
15792: LD_INT 0
15794: ST_TO_ADDR
// sFac := false ;
15795: LD_ADDR_EXP 104
15799: PUSH
15800: LD_INT 0
15802: ST_TO_ADDR
// sPower := false ;
15803: LD_ADDR_EXP 105
15807: PUSH
15808: LD_INT 0
15810: ST_TO_ADDR
// sRandom := false ;
15811: LD_ADDR_EXP 106
15815: PUSH
15816: LD_INT 0
15818: ST_TO_ADDR
// sShield := false ;
15819: LD_ADDR_EXP 107
15823: PUSH
15824: LD_INT 0
15826: ST_TO_ADDR
// sTime := false ;
15827: LD_ADDR_EXP 108
15831: PUSH
15832: LD_INT 0
15834: ST_TO_ADDR
// sTools := false ;
15835: LD_ADDR_EXP 109
15839: PUSH
15840: LD_INT 0
15842: ST_TO_ADDR
// sSold := false ;
15843: LD_ADDR_EXP 74
15847: PUSH
15848: LD_INT 0
15850: ST_TO_ADDR
// sDiff := false ;
15851: LD_ADDR_EXP 75
15855: PUSH
15856: LD_INT 0
15858: ST_TO_ADDR
// sFog := false ;
15859: LD_ADDR_EXP 78
15863: PUSH
15864: LD_INT 0
15866: ST_TO_ADDR
// sReset := false ;
15867: LD_ADDR_EXP 79
15871: PUSH
15872: LD_INT 0
15874: ST_TO_ADDR
// sSun := false ;
15875: LD_ADDR_EXP 80
15879: PUSH
15880: LD_INT 0
15882: ST_TO_ADDR
// sTiger := false ;
15883: LD_ADDR_EXP 76
15887: PUSH
15888: LD_INT 0
15890: ST_TO_ADDR
// sBomb := false ;
15891: LD_ADDR_EXP 77
15895: PUSH
15896: LD_INT 0
15898: ST_TO_ADDR
// sWound := false ;
15899: LD_ADDR_EXP 85
15903: PUSH
15904: LD_INT 0
15906: ST_TO_ADDR
// sBetray := false ;
15907: LD_ADDR_EXP 89
15911: PUSH
15912: LD_INT 0
15914: ST_TO_ADDR
// sContamin := false ;
15915: LD_ADDR_EXP 90
15919: PUSH
15920: LD_INT 0
15922: ST_TO_ADDR
// sOil := false ;
15923: LD_ADDR_EXP 92
15927: PUSH
15928: LD_INT 0
15930: ST_TO_ADDR
// sStu := false ;
15931: LD_ADDR_EXP 96
15935: PUSH
15936: LD_INT 0
15938: ST_TO_ADDR
// sBazooka := false ;
15939: LD_ADDR_EXP 99
15943: PUSH
15944: LD_INT 0
15946: ST_TO_ADDR
// sMortar := false ;
15947: LD_ADDR_EXP 100
15951: PUSH
15952: LD_INT 0
15954: ST_TO_ADDR
// sRanger := false ;
15955: LD_ADDR_EXP 110
15959: PUSH
15960: LD_INT 0
15962: ST_TO_ADDR
// end ;
15963: LD_VAR 0 1
15967: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
15968: LD_INT 0
15970: PPUSH
15971: PPUSH
15972: PPUSH
15973: PPUSH
15974: PPUSH
// result := [ ] ;
15975: LD_ADDR_VAR 0 1
15979: PUSH
15980: EMPTY
15981: ST_TO_ADDR
// if campaign_id = 1 then
15982: LD_OWVAR 69
15986: PUSH
15987: LD_INT 1
15989: EQUAL
15990: IFFALSE 18928
// begin case mission_number of 1 :
15992: LD_OWVAR 70
15996: PUSH
15997: LD_INT 1
15999: DOUBLE
16000: EQUAL
16001: IFTRUE 16005
16003: GO 16069
16005: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16006: LD_ADDR_VAR 0 1
16010: PUSH
16011: LD_INT 2
16013: PUSH
16014: LD_INT 4
16016: PUSH
16017: LD_INT 11
16019: PUSH
16020: LD_INT 12
16022: PUSH
16023: LD_INT 15
16025: PUSH
16026: LD_INT 16
16028: PUSH
16029: LD_INT 22
16031: PUSH
16032: LD_INT 23
16034: PUSH
16035: LD_INT 26
16037: PUSH
16038: EMPTY
16039: LIST
16040: LIST
16041: LIST
16042: LIST
16043: LIST
16044: LIST
16045: LIST
16046: LIST
16047: LIST
16048: PUSH
16049: LD_INT 101
16051: PUSH
16052: LD_INT 102
16054: PUSH
16055: LD_INT 106
16057: PUSH
16058: EMPTY
16059: LIST
16060: LIST
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: ST_TO_ADDR
16067: GO 18926
16069: LD_INT 2
16071: DOUBLE
16072: EQUAL
16073: IFTRUE 16077
16075: GO 16149
16077: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16078: LD_ADDR_VAR 0 1
16082: PUSH
16083: LD_INT 2
16085: PUSH
16086: LD_INT 4
16088: PUSH
16089: LD_INT 11
16091: PUSH
16092: LD_INT 12
16094: PUSH
16095: LD_INT 15
16097: PUSH
16098: LD_INT 16
16100: PUSH
16101: LD_INT 22
16103: PUSH
16104: LD_INT 23
16106: PUSH
16107: LD_INT 26
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: LIST
16120: PUSH
16121: LD_INT 101
16123: PUSH
16124: LD_INT 102
16126: PUSH
16127: LD_INT 105
16129: PUSH
16130: LD_INT 106
16132: PUSH
16133: LD_INT 108
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: LIST
16141: LIST
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: ST_TO_ADDR
16147: GO 18926
16149: LD_INT 3
16151: DOUBLE
16152: EQUAL
16153: IFTRUE 16157
16155: GO 16233
16157: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16158: LD_ADDR_VAR 0 1
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: LD_INT 4
16168: PUSH
16169: LD_INT 5
16171: PUSH
16172: LD_INT 11
16174: PUSH
16175: LD_INT 12
16177: PUSH
16178: LD_INT 15
16180: PUSH
16181: LD_INT 16
16183: PUSH
16184: LD_INT 22
16186: PUSH
16187: LD_INT 26
16189: PUSH
16190: LD_INT 36
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: LIST
16197: LIST
16198: LIST
16199: LIST
16200: LIST
16201: LIST
16202: LIST
16203: LIST
16204: PUSH
16205: LD_INT 101
16207: PUSH
16208: LD_INT 102
16210: PUSH
16211: LD_INT 105
16213: PUSH
16214: LD_INT 106
16216: PUSH
16217: LD_INT 108
16219: PUSH
16220: EMPTY
16221: LIST
16222: LIST
16223: LIST
16224: LIST
16225: LIST
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: ST_TO_ADDR
16231: GO 18926
16233: LD_INT 4
16235: DOUBLE
16236: EQUAL
16237: IFTRUE 16241
16239: GO 16325
16241: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16242: LD_ADDR_VAR 0 1
16246: PUSH
16247: LD_INT 2
16249: PUSH
16250: LD_INT 4
16252: PUSH
16253: LD_INT 5
16255: PUSH
16256: LD_INT 8
16258: PUSH
16259: LD_INT 11
16261: PUSH
16262: LD_INT 12
16264: PUSH
16265: LD_INT 15
16267: PUSH
16268: LD_INT 16
16270: PUSH
16271: LD_INT 22
16273: PUSH
16274: LD_INT 23
16276: PUSH
16277: LD_INT 26
16279: PUSH
16280: LD_INT 36
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: LIST
16287: LIST
16288: LIST
16289: LIST
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: PUSH
16297: LD_INT 101
16299: PUSH
16300: LD_INT 102
16302: PUSH
16303: LD_INT 105
16305: PUSH
16306: LD_INT 106
16308: PUSH
16309: LD_INT 108
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: LIST
16317: LIST
16318: PUSH
16319: EMPTY
16320: LIST
16321: LIST
16322: ST_TO_ADDR
16323: GO 18926
16325: LD_INT 5
16327: DOUBLE
16328: EQUAL
16329: IFTRUE 16333
16331: GO 16433
16333: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16334: LD_ADDR_VAR 0 1
16338: PUSH
16339: LD_INT 2
16341: PUSH
16342: LD_INT 4
16344: PUSH
16345: LD_INT 5
16347: PUSH
16348: LD_INT 6
16350: PUSH
16351: LD_INT 8
16353: PUSH
16354: LD_INT 11
16356: PUSH
16357: LD_INT 12
16359: PUSH
16360: LD_INT 15
16362: PUSH
16363: LD_INT 16
16365: PUSH
16366: LD_INT 22
16368: PUSH
16369: LD_INT 23
16371: PUSH
16372: LD_INT 25
16374: PUSH
16375: LD_INT 26
16377: PUSH
16378: LD_INT 36
16380: PUSH
16381: EMPTY
16382: LIST
16383: LIST
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: LIST
16390: LIST
16391: LIST
16392: LIST
16393: LIST
16394: LIST
16395: LIST
16396: PUSH
16397: LD_INT 101
16399: PUSH
16400: LD_INT 102
16402: PUSH
16403: LD_INT 105
16405: PUSH
16406: LD_INT 106
16408: PUSH
16409: LD_INT 108
16411: PUSH
16412: LD_INT 109
16414: PUSH
16415: LD_INT 112
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: LIST
16426: PUSH
16427: EMPTY
16428: LIST
16429: LIST
16430: ST_TO_ADDR
16431: GO 18926
16433: LD_INT 6
16435: DOUBLE
16436: EQUAL
16437: IFTRUE 16441
16439: GO 16561
16441: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16442: LD_ADDR_VAR 0 1
16446: PUSH
16447: LD_INT 2
16449: PUSH
16450: LD_INT 4
16452: PUSH
16453: LD_INT 5
16455: PUSH
16456: LD_INT 6
16458: PUSH
16459: LD_INT 8
16461: PUSH
16462: LD_INT 11
16464: PUSH
16465: LD_INT 12
16467: PUSH
16468: LD_INT 15
16470: PUSH
16471: LD_INT 16
16473: PUSH
16474: LD_INT 20
16476: PUSH
16477: LD_INT 21
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: LD_INT 23
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 26
16491: PUSH
16492: LD_INT 30
16494: PUSH
16495: LD_INT 31
16497: PUSH
16498: LD_INT 32
16500: PUSH
16501: LD_INT 36
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: LIST
16508: LIST
16509: LIST
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: LIST
16515: LIST
16516: LIST
16517: LIST
16518: LIST
16519: LIST
16520: LIST
16521: LIST
16522: LIST
16523: LIST
16524: PUSH
16525: LD_INT 101
16527: PUSH
16528: LD_INT 102
16530: PUSH
16531: LD_INT 105
16533: PUSH
16534: LD_INT 106
16536: PUSH
16537: LD_INT 108
16539: PUSH
16540: LD_INT 109
16542: PUSH
16543: LD_INT 112
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: LIST
16550: LIST
16551: LIST
16552: LIST
16553: LIST
16554: PUSH
16555: EMPTY
16556: LIST
16557: LIST
16558: ST_TO_ADDR
16559: GO 18926
16561: LD_INT 7
16563: DOUBLE
16564: EQUAL
16565: IFTRUE 16569
16567: GO 16669
16569: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16570: LD_ADDR_VAR 0 1
16574: PUSH
16575: LD_INT 2
16577: PUSH
16578: LD_INT 4
16580: PUSH
16581: LD_INT 5
16583: PUSH
16584: LD_INT 7
16586: PUSH
16587: LD_INT 11
16589: PUSH
16590: LD_INT 12
16592: PUSH
16593: LD_INT 15
16595: PUSH
16596: LD_INT 16
16598: PUSH
16599: LD_INT 20
16601: PUSH
16602: LD_INT 21
16604: PUSH
16605: LD_INT 22
16607: PUSH
16608: LD_INT 23
16610: PUSH
16611: LD_INT 25
16613: PUSH
16614: LD_INT 26
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: LIST
16631: LIST
16632: PUSH
16633: LD_INT 101
16635: PUSH
16636: LD_INT 102
16638: PUSH
16639: LD_INT 103
16641: PUSH
16642: LD_INT 105
16644: PUSH
16645: LD_INT 106
16647: PUSH
16648: LD_INT 108
16650: PUSH
16651: LD_INT 112
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: ST_TO_ADDR
16667: GO 18926
16669: LD_INT 8
16671: DOUBLE
16672: EQUAL
16673: IFTRUE 16677
16675: GO 16805
16677: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16678: LD_ADDR_VAR 0 1
16682: PUSH
16683: LD_INT 2
16685: PUSH
16686: LD_INT 4
16688: PUSH
16689: LD_INT 5
16691: PUSH
16692: LD_INT 6
16694: PUSH
16695: LD_INT 7
16697: PUSH
16698: LD_INT 8
16700: PUSH
16701: LD_INT 11
16703: PUSH
16704: LD_INT 12
16706: PUSH
16707: LD_INT 15
16709: PUSH
16710: LD_INT 16
16712: PUSH
16713: LD_INT 20
16715: PUSH
16716: LD_INT 21
16718: PUSH
16719: LD_INT 22
16721: PUSH
16722: LD_INT 23
16724: PUSH
16725: LD_INT 25
16727: PUSH
16728: LD_INT 26
16730: PUSH
16731: LD_INT 30
16733: PUSH
16734: LD_INT 31
16736: PUSH
16737: LD_INT 32
16739: PUSH
16740: LD_INT 36
16742: PUSH
16743: EMPTY
16744: LIST
16745: LIST
16746: LIST
16747: LIST
16748: LIST
16749: LIST
16750: LIST
16751: LIST
16752: LIST
16753: LIST
16754: LIST
16755: LIST
16756: LIST
16757: LIST
16758: LIST
16759: LIST
16760: LIST
16761: LIST
16762: LIST
16763: LIST
16764: PUSH
16765: LD_INT 101
16767: PUSH
16768: LD_INT 102
16770: PUSH
16771: LD_INT 103
16773: PUSH
16774: LD_INT 105
16776: PUSH
16777: LD_INT 106
16779: PUSH
16780: LD_INT 108
16782: PUSH
16783: LD_INT 109
16785: PUSH
16786: LD_INT 112
16788: PUSH
16789: EMPTY
16790: LIST
16791: LIST
16792: LIST
16793: LIST
16794: LIST
16795: LIST
16796: LIST
16797: LIST
16798: PUSH
16799: EMPTY
16800: LIST
16801: LIST
16802: ST_TO_ADDR
16803: GO 18926
16805: LD_INT 9
16807: DOUBLE
16808: EQUAL
16809: IFTRUE 16813
16811: GO 16949
16813: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16814: LD_ADDR_VAR 0 1
16818: PUSH
16819: LD_INT 2
16821: PUSH
16822: LD_INT 4
16824: PUSH
16825: LD_INT 5
16827: PUSH
16828: LD_INT 6
16830: PUSH
16831: LD_INT 7
16833: PUSH
16834: LD_INT 8
16836: PUSH
16837: LD_INT 11
16839: PUSH
16840: LD_INT 12
16842: PUSH
16843: LD_INT 15
16845: PUSH
16846: LD_INT 16
16848: PUSH
16849: LD_INT 20
16851: PUSH
16852: LD_INT 21
16854: PUSH
16855: LD_INT 22
16857: PUSH
16858: LD_INT 23
16860: PUSH
16861: LD_INT 25
16863: PUSH
16864: LD_INT 26
16866: PUSH
16867: LD_INT 28
16869: PUSH
16870: LD_INT 30
16872: PUSH
16873: LD_INT 31
16875: PUSH
16876: LD_INT 32
16878: PUSH
16879: LD_INT 36
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 101
16907: PUSH
16908: LD_INT 102
16910: PUSH
16911: LD_INT 103
16913: PUSH
16914: LD_INT 105
16916: PUSH
16917: LD_INT 106
16919: PUSH
16920: LD_INT 108
16922: PUSH
16923: LD_INT 109
16925: PUSH
16926: LD_INT 112
16928: PUSH
16929: LD_INT 114
16931: PUSH
16932: EMPTY
16933: LIST
16934: LIST
16935: LIST
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: LIST
16941: LIST
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: ST_TO_ADDR
16947: GO 18926
16949: LD_INT 10
16951: DOUBLE
16952: EQUAL
16953: IFTRUE 16957
16955: GO 17141
16957: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
16958: LD_ADDR_VAR 0 1
16962: PUSH
16963: LD_INT 2
16965: PUSH
16966: LD_INT 4
16968: PUSH
16969: LD_INT 5
16971: PUSH
16972: LD_INT 6
16974: PUSH
16975: LD_INT 7
16977: PUSH
16978: LD_INT 8
16980: PUSH
16981: LD_INT 9
16983: PUSH
16984: LD_INT 10
16986: PUSH
16987: LD_INT 11
16989: PUSH
16990: LD_INT 12
16992: PUSH
16993: LD_INT 13
16995: PUSH
16996: LD_INT 14
16998: PUSH
16999: LD_INT 15
17001: PUSH
17002: LD_INT 16
17004: PUSH
17005: LD_INT 17
17007: PUSH
17008: LD_INT 18
17010: PUSH
17011: LD_INT 19
17013: PUSH
17014: LD_INT 20
17016: PUSH
17017: LD_INT 21
17019: PUSH
17020: LD_INT 22
17022: PUSH
17023: LD_INT 23
17025: PUSH
17026: LD_INT 24
17028: PUSH
17029: LD_INT 25
17031: PUSH
17032: LD_INT 26
17034: PUSH
17035: LD_INT 28
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 31
17043: PUSH
17044: LD_INT 32
17046: PUSH
17047: LD_INT 36
17049: PUSH
17050: EMPTY
17051: LIST
17052: LIST
17053: LIST
17054: LIST
17055: LIST
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: LIST
17069: LIST
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: LIST
17075: LIST
17076: LIST
17077: LIST
17078: LIST
17079: LIST
17080: PUSH
17081: LD_INT 101
17083: PUSH
17084: LD_INT 102
17086: PUSH
17087: LD_INT 103
17089: PUSH
17090: LD_INT 104
17092: PUSH
17093: LD_INT 105
17095: PUSH
17096: LD_INT 106
17098: PUSH
17099: LD_INT 107
17101: PUSH
17102: LD_INT 108
17104: PUSH
17105: LD_INT 109
17107: PUSH
17108: LD_INT 110
17110: PUSH
17111: LD_INT 111
17113: PUSH
17114: LD_INT 112
17116: PUSH
17117: LD_INT 114
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: ST_TO_ADDR
17139: GO 18926
17141: LD_INT 11
17143: DOUBLE
17144: EQUAL
17145: IFTRUE 17149
17147: GO 17341
17149: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17150: LD_ADDR_VAR 0 1
17154: PUSH
17155: LD_INT 2
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: LD_INT 4
17163: PUSH
17164: LD_INT 5
17166: PUSH
17167: LD_INT 6
17169: PUSH
17170: LD_INT 7
17172: PUSH
17173: LD_INT 8
17175: PUSH
17176: LD_INT 9
17178: PUSH
17179: LD_INT 10
17181: PUSH
17182: LD_INT 11
17184: PUSH
17185: LD_INT 12
17187: PUSH
17188: LD_INT 13
17190: PUSH
17191: LD_INT 14
17193: PUSH
17194: LD_INT 15
17196: PUSH
17197: LD_INT 16
17199: PUSH
17200: LD_INT 17
17202: PUSH
17203: LD_INT 18
17205: PUSH
17206: LD_INT 19
17208: PUSH
17209: LD_INT 20
17211: PUSH
17212: LD_INT 21
17214: PUSH
17215: LD_INT 22
17217: PUSH
17218: LD_INT 23
17220: PUSH
17221: LD_INT 24
17223: PUSH
17224: LD_INT 25
17226: PUSH
17227: LD_INT 26
17229: PUSH
17230: LD_INT 28
17232: PUSH
17233: LD_INT 30
17235: PUSH
17236: LD_INT 31
17238: PUSH
17239: LD_INT 32
17241: PUSH
17242: LD_INT 34
17244: PUSH
17245: LD_INT 36
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: LIST
17264: LIST
17265: LIST
17266: LIST
17267: LIST
17268: LIST
17269: LIST
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: LIST
17275: LIST
17276: LIST
17277: LIST
17278: LIST
17279: LIST
17280: PUSH
17281: LD_INT 101
17283: PUSH
17284: LD_INT 102
17286: PUSH
17287: LD_INT 103
17289: PUSH
17290: LD_INT 104
17292: PUSH
17293: LD_INT 105
17295: PUSH
17296: LD_INT 106
17298: PUSH
17299: LD_INT 107
17301: PUSH
17302: LD_INT 108
17304: PUSH
17305: LD_INT 109
17307: PUSH
17308: LD_INT 110
17310: PUSH
17311: LD_INT 111
17313: PUSH
17314: LD_INT 112
17316: PUSH
17317: LD_INT 114
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: PUSH
17335: EMPTY
17336: LIST
17337: LIST
17338: ST_TO_ADDR
17339: GO 18926
17341: LD_INT 12
17343: DOUBLE
17344: EQUAL
17345: IFTRUE 17349
17347: GO 17557
17349: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17350: LD_ADDR_VAR 0 1
17354: PUSH
17355: LD_INT 1
17357: PUSH
17358: LD_INT 2
17360: PUSH
17361: LD_INT 3
17363: PUSH
17364: LD_INT 4
17366: PUSH
17367: LD_INT 5
17369: PUSH
17370: LD_INT 6
17372: PUSH
17373: LD_INT 7
17375: PUSH
17376: LD_INT 8
17378: PUSH
17379: LD_INT 9
17381: PUSH
17382: LD_INT 10
17384: PUSH
17385: LD_INT 11
17387: PUSH
17388: LD_INT 12
17390: PUSH
17391: LD_INT 13
17393: PUSH
17394: LD_INT 14
17396: PUSH
17397: LD_INT 15
17399: PUSH
17400: LD_INT 16
17402: PUSH
17403: LD_INT 17
17405: PUSH
17406: LD_INT 18
17408: PUSH
17409: LD_INT 19
17411: PUSH
17412: LD_INT 20
17414: PUSH
17415: LD_INT 21
17417: PUSH
17418: LD_INT 22
17420: PUSH
17421: LD_INT 23
17423: PUSH
17424: LD_INT 24
17426: PUSH
17427: LD_INT 25
17429: PUSH
17430: LD_INT 26
17432: PUSH
17433: LD_INT 27
17435: PUSH
17436: LD_INT 28
17438: PUSH
17439: LD_INT 30
17441: PUSH
17442: LD_INT 31
17444: PUSH
17445: LD_INT 32
17447: PUSH
17448: LD_INT 33
17450: PUSH
17451: LD_INT 34
17453: PUSH
17454: LD_INT 36
17456: PUSH
17457: EMPTY
17458: LIST
17459: LIST
17460: LIST
17461: LIST
17462: LIST
17463: LIST
17464: LIST
17465: LIST
17466: LIST
17467: LIST
17468: LIST
17469: LIST
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: LIST
17490: LIST
17491: LIST
17492: PUSH
17493: LD_INT 101
17495: PUSH
17496: LD_INT 102
17498: PUSH
17499: LD_INT 103
17501: PUSH
17502: LD_INT 104
17504: PUSH
17505: LD_INT 105
17507: PUSH
17508: LD_INT 106
17510: PUSH
17511: LD_INT 107
17513: PUSH
17514: LD_INT 108
17516: PUSH
17517: LD_INT 109
17519: PUSH
17520: LD_INT 110
17522: PUSH
17523: LD_INT 111
17525: PUSH
17526: LD_INT 112
17528: PUSH
17529: LD_INT 113
17531: PUSH
17532: LD_INT 114
17534: PUSH
17535: EMPTY
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: ST_TO_ADDR
17555: GO 18926
17557: LD_INT 13
17559: DOUBLE
17560: EQUAL
17561: IFTRUE 17565
17563: GO 17761
17565: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17566: LD_ADDR_VAR 0 1
17570: PUSH
17571: LD_INT 1
17573: PUSH
17574: LD_INT 2
17576: PUSH
17577: LD_INT 3
17579: PUSH
17580: LD_INT 4
17582: PUSH
17583: LD_INT 5
17585: PUSH
17586: LD_INT 8
17588: PUSH
17589: LD_INT 9
17591: PUSH
17592: LD_INT 10
17594: PUSH
17595: LD_INT 11
17597: PUSH
17598: LD_INT 12
17600: PUSH
17601: LD_INT 14
17603: PUSH
17604: LD_INT 15
17606: PUSH
17607: LD_INT 16
17609: PUSH
17610: LD_INT 17
17612: PUSH
17613: LD_INT 18
17615: PUSH
17616: LD_INT 19
17618: PUSH
17619: LD_INT 20
17621: PUSH
17622: LD_INT 21
17624: PUSH
17625: LD_INT 22
17627: PUSH
17628: LD_INT 23
17630: PUSH
17631: LD_INT 24
17633: PUSH
17634: LD_INT 25
17636: PUSH
17637: LD_INT 26
17639: PUSH
17640: LD_INT 27
17642: PUSH
17643: LD_INT 28
17645: PUSH
17646: LD_INT 30
17648: PUSH
17649: LD_INT 31
17651: PUSH
17652: LD_INT 32
17654: PUSH
17655: LD_INT 33
17657: PUSH
17658: LD_INT 34
17660: PUSH
17661: LD_INT 36
17663: PUSH
17664: EMPTY
17665: LIST
17666: LIST
17667: LIST
17668: LIST
17669: LIST
17670: LIST
17671: LIST
17672: LIST
17673: LIST
17674: LIST
17675: LIST
17676: LIST
17677: LIST
17678: LIST
17679: LIST
17680: LIST
17681: LIST
17682: LIST
17683: LIST
17684: LIST
17685: LIST
17686: LIST
17687: LIST
17688: LIST
17689: LIST
17690: LIST
17691: LIST
17692: LIST
17693: LIST
17694: LIST
17695: LIST
17696: PUSH
17697: LD_INT 101
17699: PUSH
17700: LD_INT 102
17702: PUSH
17703: LD_INT 103
17705: PUSH
17706: LD_INT 104
17708: PUSH
17709: LD_INT 105
17711: PUSH
17712: LD_INT 106
17714: PUSH
17715: LD_INT 107
17717: PUSH
17718: LD_INT 108
17720: PUSH
17721: LD_INT 109
17723: PUSH
17724: LD_INT 110
17726: PUSH
17727: LD_INT 111
17729: PUSH
17730: LD_INT 112
17732: PUSH
17733: LD_INT 113
17735: PUSH
17736: LD_INT 114
17738: PUSH
17739: EMPTY
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: ST_TO_ADDR
17759: GO 18926
17761: LD_INT 14
17763: DOUBLE
17764: EQUAL
17765: IFTRUE 17769
17767: GO 17981
17769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17770: LD_ADDR_VAR 0 1
17774: PUSH
17775: LD_INT 1
17777: PUSH
17778: LD_INT 2
17780: PUSH
17781: LD_INT 3
17783: PUSH
17784: LD_INT 4
17786: PUSH
17787: LD_INT 5
17789: PUSH
17790: LD_INT 6
17792: PUSH
17793: LD_INT 7
17795: PUSH
17796: LD_INT 8
17798: PUSH
17799: LD_INT 9
17801: PUSH
17802: LD_INT 10
17804: PUSH
17805: LD_INT 11
17807: PUSH
17808: LD_INT 12
17810: PUSH
17811: LD_INT 13
17813: PUSH
17814: LD_INT 14
17816: PUSH
17817: LD_INT 15
17819: PUSH
17820: LD_INT 16
17822: PUSH
17823: LD_INT 17
17825: PUSH
17826: LD_INT 18
17828: PUSH
17829: LD_INT 19
17831: PUSH
17832: LD_INT 20
17834: PUSH
17835: LD_INT 21
17837: PUSH
17838: LD_INT 22
17840: PUSH
17841: LD_INT 23
17843: PUSH
17844: LD_INT 24
17846: PUSH
17847: LD_INT 25
17849: PUSH
17850: LD_INT 26
17852: PUSH
17853: LD_INT 27
17855: PUSH
17856: LD_INT 28
17858: PUSH
17859: LD_INT 29
17861: PUSH
17862: LD_INT 30
17864: PUSH
17865: LD_INT 31
17867: PUSH
17868: LD_INT 32
17870: PUSH
17871: LD_INT 33
17873: PUSH
17874: LD_INT 34
17876: PUSH
17877: LD_INT 36
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: LIST
17884: LIST
17885: LIST
17886: LIST
17887: LIST
17888: LIST
17889: LIST
17890: LIST
17891: LIST
17892: LIST
17893: LIST
17894: LIST
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: PUSH
17917: LD_INT 101
17919: PUSH
17920: LD_INT 102
17922: PUSH
17923: LD_INT 103
17925: PUSH
17926: LD_INT 104
17928: PUSH
17929: LD_INT 105
17931: PUSH
17932: LD_INT 106
17934: PUSH
17935: LD_INT 107
17937: PUSH
17938: LD_INT 108
17940: PUSH
17941: LD_INT 109
17943: PUSH
17944: LD_INT 110
17946: PUSH
17947: LD_INT 111
17949: PUSH
17950: LD_INT 112
17952: PUSH
17953: LD_INT 113
17955: PUSH
17956: LD_INT 114
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: ST_TO_ADDR
17979: GO 18926
17981: LD_INT 15
17983: DOUBLE
17984: EQUAL
17985: IFTRUE 17989
17987: GO 18201
17989: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
17990: LD_ADDR_VAR 0 1
17994: PUSH
17995: LD_INT 1
17997: PUSH
17998: LD_INT 2
18000: PUSH
18001: LD_INT 3
18003: PUSH
18004: LD_INT 4
18006: PUSH
18007: LD_INT 5
18009: PUSH
18010: LD_INT 6
18012: PUSH
18013: LD_INT 7
18015: PUSH
18016: LD_INT 8
18018: PUSH
18019: LD_INT 9
18021: PUSH
18022: LD_INT 10
18024: PUSH
18025: LD_INT 11
18027: PUSH
18028: LD_INT 12
18030: PUSH
18031: LD_INT 13
18033: PUSH
18034: LD_INT 14
18036: PUSH
18037: LD_INT 15
18039: PUSH
18040: LD_INT 16
18042: PUSH
18043: LD_INT 17
18045: PUSH
18046: LD_INT 18
18048: PUSH
18049: LD_INT 19
18051: PUSH
18052: LD_INT 20
18054: PUSH
18055: LD_INT 21
18057: PUSH
18058: LD_INT 22
18060: PUSH
18061: LD_INT 23
18063: PUSH
18064: LD_INT 24
18066: PUSH
18067: LD_INT 25
18069: PUSH
18070: LD_INT 26
18072: PUSH
18073: LD_INT 27
18075: PUSH
18076: LD_INT 28
18078: PUSH
18079: LD_INT 29
18081: PUSH
18082: LD_INT 30
18084: PUSH
18085: LD_INT 31
18087: PUSH
18088: LD_INT 32
18090: PUSH
18091: LD_INT 33
18093: PUSH
18094: LD_INT 34
18096: PUSH
18097: LD_INT 36
18099: PUSH
18100: EMPTY
18101: LIST
18102: LIST
18103: LIST
18104: LIST
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 101
18139: PUSH
18140: LD_INT 102
18142: PUSH
18143: LD_INT 103
18145: PUSH
18146: LD_INT 104
18148: PUSH
18149: LD_INT 105
18151: PUSH
18152: LD_INT 106
18154: PUSH
18155: LD_INT 107
18157: PUSH
18158: LD_INT 108
18160: PUSH
18161: LD_INT 109
18163: PUSH
18164: LD_INT 110
18166: PUSH
18167: LD_INT 111
18169: PUSH
18170: LD_INT 112
18172: PUSH
18173: LD_INT 113
18175: PUSH
18176: LD_INT 114
18178: PUSH
18179: EMPTY
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: ST_TO_ADDR
18199: GO 18926
18201: LD_INT 16
18203: DOUBLE
18204: EQUAL
18205: IFTRUE 18209
18207: GO 18333
18209: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18210: LD_ADDR_VAR 0 1
18214: PUSH
18215: LD_INT 2
18217: PUSH
18218: LD_INT 4
18220: PUSH
18221: LD_INT 5
18223: PUSH
18224: LD_INT 7
18226: PUSH
18227: LD_INT 11
18229: PUSH
18230: LD_INT 12
18232: PUSH
18233: LD_INT 15
18235: PUSH
18236: LD_INT 16
18238: PUSH
18239: LD_INT 20
18241: PUSH
18242: LD_INT 21
18244: PUSH
18245: LD_INT 22
18247: PUSH
18248: LD_INT 23
18250: PUSH
18251: LD_INT 25
18253: PUSH
18254: LD_INT 26
18256: PUSH
18257: LD_INT 30
18259: PUSH
18260: LD_INT 31
18262: PUSH
18263: LD_INT 32
18265: PUSH
18266: LD_INT 33
18268: PUSH
18269: LD_INT 34
18271: PUSH
18272: EMPTY
18273: LIST
18274: LIST
18275: LIST
18276: LIST
18277: LIST
18278: LIST
18279: LIST
18280: LIST
18281: LIST
18282: LIST
18283: LIST
18284: LIST
18285: LIST
18286: LIST
18287: LIST
18288: LIST
18289: LIST
18290: LIST
18291: LIST
18292: PUSH
18293: LD_INT 101
18295: PUSH
18296: LD_INT 102
18298: PUSH
18299: LD_INT 103
18301: PUSH
18302: LD_INT 106
18304: PUSH
18305: LD_INT 108
18307: PUSH
18308: LD_INT 112
18310: PUSH
18311: LD_INT 113
18313: PUSH
18314: LD_INT 114
18316: PUSH
18317: EMPTY
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: LIST
18325: LIST
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: ST_TO_ADDR
18331: GO 18926
18333: LD_INT 17
18335: DOUBLE
18336: EQUAL
18337: IFTRUE 18341
18339: GO 18553
18341: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18342: LD_ADDR_VAR 0 1
18346: PUSH
18347: LD_INT 1
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: LD_INT 3
18355: PUSH
18356: LD_INT 4
18358: PUSH
18359: LD_INT 5
18361: PUSH
18362: LD_INT 6
18364: PUSH
18365: LD_INT 7
18367: PUSH
18368: LD_INT 8
18370: PUSH
18371: LD_INT 9
18373: PUSH
18374: LD_INT 10
18376: PUSH
18377: LD_INT 11
18379: PUSH
18380: LD_INT 12
18382: PUSH
18383: LD_INT 13
18385: PUSH
18386: LD_INT 14
18388: PUSH
18389: LD_INT 15
18391: PUSH
18392: LD_INT 16
18394: PUSH
18395: LD_INT 17
18397: PUSH
18398: LD_INT 18
18400: PUSH
18401: LD_INT 19
18403: PUSH
18404: LD_INT 20
18406: PUSH
18407: LD_INT 21
18409: PUSH
18410: LD_INT 22
18412: PUSH
18413: LD_INT 23
18415: PUSH
18416: LD_INT 24
18418: PUSH
18419: LD_INT 25
18421: PUSH
18422: LD_INT 26
18424: PUSH
18425: LD_INT 27
18427: PUSH
18428: LD_INT 28
18430: PUSH
18431: LD_INT 29
18433: PUSH
18434: LD_INT 30
18436: PUSH
18437: LD_INT 31
18439: PUSH
18440: LD_INT 32
18442: PUSH
18443: LD_INT 33
18445: PUSH
18446: LD_INT 34
18448: PUSH
18449: LD_INT 36
18451: PUSH
18452: EMPTY
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: LIST
18467: LIST
18468: LIST
18469: LIST
18470: LIST
18471: LIST
18472: LIST
18473: LIST
18474: LIST
18475: LIST
18476: LIST
18477: LIST
18478: LIST
18479: LIST
18480: LIST
18481: LIST
18482: LIST
18483: LIST
18484: LIST
18485: LIST
18486: LIST
18487: LIST
18488: PUSH
18489: LD_INT 101
18491: PUSH
18492: LD_INT 102
18494: PUSH
18495: LD_INT 103
18497: PUSH
18498: LD_INT 104
18500: PUSH
18501: LD_INT 105
18503: PUSH
18504: LD_INT 106
18506: PUSH
18507: LD_INT 107
18509: PUSH
18510: LD_INT 108
18512: PUSH
18513: LD_INT 109
18515: PUSH
18516: LD_INT 110
18518: PUSH
18519: LD_INT 111
18521: PUSH
18522: LD_INT 112
18524: PUSH
18525: LD_INT 113
18527: PUSH
18528: LD_INT 114
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: PUSH
18547: EMPTY
18548: LIST
18549: LIST
18550: ST_TO_ADDR
18551: GO 18926
18553: LD_INT 18
18555: DOUBLE
18556: EQUAL
18557: IFTRUE 18561
18559: GO 18697
18561: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18562: LD_ADDR_VAR 0 1
18566: PUSH
18567: LD_INT 2
18569: PUSH
18570: LD_INT 4
18572: PUSH
18573: LD_INT 5
18575: PUSH
18576: LD_INT 7
18578: PUSH
18579: LD_INT 11
18581: PUSH
18582: LD_INT 12
18584: PUSH
18585: LD_INT 15
18587: PUSH
18588: LD_INT 16
18590: PUSH
18591: LD_INT 20
18593: PUSH
18594: LD_INT 21
18596: PUSH
18597: LD_INT 22
18599: PUSH
18600: LD_INT 23
18602: PUSH
18603: LD_INT 25
18605: PUSH
18606: LD_INT 26
18608: PUSH
18609: LD_INT 30
18611: PUSH
18612: LD_INT 31
18614: PUSH
18615: LD_INT 32
18617: PUSH
18618: LD_INT 33
18620: PUSH
18621: LD_INT 34
18623: PUSH
18624: LD_INT 35
18626: PUSH
18627: LD_INT 36
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: LIST
18647: LIST
18648: LIST
18649: LIST
18650: LIST
18651: LIST
18652: PUSH
18653: LD_INT 101
18655: PUSH
18656: LD_INT 102
18658: PUSH
18659: LD_INT 103
18661: PUSH
18662: LD_INT 106
18664: PUSH
18665: LD_INT 108
18667: PUSH
18668: LD_INT 112
18670: PUSH
18671: LD_INT 113
18673: PUSH
18674: LD_INT 114
18676: PUSH
18677: LD_INT 115
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: ST_TO_ADDR
18695: GO 18926
18697: LD_INT 19
18699: DOUBLE
18700: EQUAL
18701: IFTRUE 18705
18703: GO 18925
18705: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18706: LD_ADDR_VAR 0 1
18710: PUSH
18711: LD_INT 1
18713: PUSH
18714: LD_INT 2
18716: PUSH
18717: LD_INT 3
18719: PUSH
18720: LD_INT 4
18722: PUSH
18723: LD_INT 5
18725: PUSH
18726: LD_INT 6
18728: PUSH
18729: LD_INT 7
18731: PUSH
18732: LD_INT 8
18734: PUSH
18735: LD_INT 9
18737: PUSH
18738: LD_INT 10
18740: PUSH
18741: LD_INT 11
18743: PUSH
18744: LD_INT 12
18746: PUSH
18747: LD_INT 13
18749: PUSH
18750: LD_INT 14
18752: PUSH
18753: LD_INT 15
18755: PUSH
18756: LD_INT 16
18758: PUSH
18759: LD_INT 17
18761: PUSH
18762: LD_INT 18
18764: PUSH
18765: LD_INT 19
18767: PUSH
18768: LD_INT 20
18770: PUSH
18771: LD_INT 21
18773: PUSH
18774: LD_INT 22
18776: PUSH
18777: LD_INT 23
18779: PUSH
18780: LD_INT 24
18782: PUSH
18783: LD_INT 25
18785: PUSH
18786: LD_INT 26
18788: PUSH
18789: LD_INT 27
18791: PUSH
18792: LD_INT 28
18794: PUSH
18795: LD_INT 29
18797: PUSH
18798: LD_INT 30
18800: PUSH
18801: LD_INT 31
18803: PUSH
18804: LD_INT 32
18806: PUSH
18807: LD_INT 33
18809: PUSH
18810: LD_INT 34
18812: PUSH
18813: LD_INT 35
18815: PUSH
18816: LD_INT 36
18818: PUSH
18819: EMPTY
18820: LIST
18821: LIST
18822: LIST
18823: LIST
18824: LIST
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 101
18859: PUSH
18860: LD_INT 102
18862: PUSH
18863: LD_INT 103
18865: PUSH
18866: LD_INT 104
18868: PUSH
18869: LD_INT 105
18871: PUSH
18872: LD_INT 106
18874: PUSH
18875: LD_INT 107
18877: PUSH
18878: LD_INT 108
18880: PUSH
18881: LD_INT 109
18883: PUSH
18884: LD_INT 110
18886: PUSH
18887: LD_INT 111
18889: PUSH
18890: LD_INT 112
18892: PUSH
18893: LD_INT 113
18895: PUSH
18896: LD_INT 114
18898: PUSH
18899: LD_INT 115
18901: PUSH
18902: EMPTY
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: PUSH
18919: EMPTY
18920: LIST
18921: LIST
18922: ST_TO_ADDR
18923: GO 18926
18925: POP
// end else
18926: GO 19145
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
18928: LD_ADDR_VAR 0 1
18932: PUSH
18933: LD_INT 1
18935: PUSH
18936: LD_INT 2
18938: PUSH
18939: LD_INT 3
18941: PUSH
18942: LD_INT 4
18944: PUSH
18945: LD_INT 5
18947: PUSH
18948: LD_INT 6
18950: PUSH
18951: LD_INT 7
18953: PUSH
18954: LD_INT 8
18956: PUSH
18957: LD_INT 9
18959: PUSH
18960: LD_INT 10
18962: PUSH
18963: LD_INT 11
18965: PUSH
18966: LD_INT 12
18968: PUSH
18969: LD_INT 13
18971: PUSH
18972: LD_INT 14
18974: PUSH
18975: LD_INT 15
18977: PUSH
18978: LD_INT 16
18980: PUSH
18981: LD_INT 17
18983: PUSH
18984: LD_INT 18
18986: PUSH
18987: LD_INT 19
18989: PUSH
18990: LD_INT 20
18992: PUSH
18993: LD_INT 21
18995: PUSH
18996: LD_INT 22
18998: PUSH
18999: LD_INT 23
19001: PUSH
19002: LD_INT 24
19004: PUSH
19005: LD_INT 25
19007: PUSH
19008: LD_INT 26
19010: PUSH
19011: LD_INT 27
19013: PUSH
19014: LD_INT 28
19016: PUSH
19017: LD_INT 29
19019: PUSH
19020: LD_INT 30
19022: PUSH
19023: LD_INT 31
19025: PUSH
19026: LD_INT 32
19028: PUSH
19029: LD_INT 33
19031: PUSH
19032: LD_INT 34
19034: PUSH
19035: LD_INT 35
19037: PUSH
19038: LD_INT 36
19040: PUSH
19041: EMPTY
19042: LIST
19043: LIST
19044: LIST
19045: LIST
19046: LIST
19047: LIST
19048: LIST
19049: LIST
19050: LIST
19051: LIST
19052: LIST
19053: LIST
19054: LIST
19055: LIST
19056: LIST
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: LIST
19062: LIST
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: LIST
19075: LIST
19076: LIST
19077: LIST
19078: PUSH
19079: LD_INT 101
19081: PUSH
19082: LD_INT 102
19084: PUSH
19085: LD_INT 103
19087: PUSH
19088: LD_INT 104
19090: PUSH
19091: LD_INT 105
19093: PUSH
19094: LD_INT 106
19096: PUSH
19097: LD_INT 107
19099: PUSH
19100: LD_INT 108
19102: PUSH
19103: LD_INT 109
19105: PUSH
19106: LD_INT 110
19108: PUSH
19109: LD_INT 111
19111: PUSH
19112: LD_INT 112
19114: PUSH
19115: LD_INT 113
19117: PUSH
19118: LD_INT 114
19120: PUSH
19121: LD_INT 115
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: ST_TO_ADDR
// if result then
19145: LD_VAR 0 1
19149: IFFALSE 19438
// begin normal :=  ;
19151: LD_ADDR_VAR 0 3
19155: PUSH
19156: LD_STRING 
19158: ST_TO_ADDR
// hardcore :=  ;
19159: LD_ADDR_VAR 0 4
19163: PUSH
19164: LD_STRING 
19166: ST_TO_ADDR
// for i = 1 to normalCounter do
19167: LD_ADDR_VAR 0 5
19171: PUSH
19172: DOUBLE
19173: LD_INT 1
19175: DEC
19176: ST_TO_ADDR
19177: LD_EXP 58
19181: PUSH
19182: FOR_TO
19183: IFFALSE 19284
// begin tmp := 0 ;
19185: LD_ADDR_VAR 0 2
19189: PUSH
19190: LD_STRING 0
19192: ST_TO_ADDR
// if result [ 1 ] then
19193: LD_VAR 0 1
19197: PUSH
19198: LD_INT 1
19200: ARRAY
19201: IFFALSE 19266
// if result [ 1 ] [ 1 ] = i then
19203: LD_VAR 0 1
19207: PUSH
19208: LD_INT 1
19210: ARRAY
19211: PUSH
19212: LD_INT 1
19214: ARRAY
19215: PUSH
19216: LD_VAR 0 5
19220: EQUAL
19221: IFFALSE 19266
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19223: LD_ADDR_VAR 0 1
19227: PUSH
19228: LD_VAR 0 1
19232: PPUSH
19233: LD_INT 1
19235: PPUSH
19236: LD_VAR 0 1
19240: PUSH
19241: LD_INT 1
19243: ARRAY
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: CALL_OW 3
19252: PPUSH
19253: CALL_OW 1
19257: ST_TO_ADDR
// tmp := 1 ;
19258: LD_ADDR_VAR 0 2
19262: PUSH
19263: LD_STRING 1
19265: ST_TO_ADDR
// end ; normal := normal & tmp ;
19266: LD_ADDR_VAR 0 3
19270: PUSH
19271: LD_VAR 0 3
19275: PUSH
19276: LD_VAR 0 2
19280: STR
19281: ST_TO_ADDR
// end ;
19282: GO 19182
19284: POP
19285: POP
// for i = 1 to hardcoreCounter do
19286: LD_ADDR_VAR 0 5
19290: PUSH
19291: DOUBLE
19292: LD_INT 1
19294: DEC
19295: ST_TO_ADDR
19296: LD_EXP 59
19300: PUSH
19301: FOR_TO
19302: IFFALSE 19407
// begin tmp := 0 ;
19304: LD_ADDR_VAR 0 2
19308: PUSH
19309: LD_STRING 0
19311: ST_TO_ADDR
// if result [ 2 ] then
19312: LD_VAR 0 1
19316: PUSH
19317: LD_INT 2
19319: ARRAY
19320: IFFALSE 19389
// if result [ 2 ] [ 1 ] = 100 + i then
19322: LD_VAR 0 1
19326: PUSH
19327: LD_INT 2
19329: ARRAY
19330: PUSH
19331: LD_INT 1
19333: ARRAY
19334: PUSH
19335: LD_INT 100
19337: PUSH
19338: LD_VAR 0 5
19342: PLUS
19343: EQUAL
19344: IFFALSE 19389
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19346: LD_ADDR_VAR 0 1
19350: PUSH
19351: LD_VAR 0 1
19355: PPUSH
19356: LD_INT 2
19358: PPUSH
19359: LD_VAR 0 1
19363: PUSH
19364: LD_INT 2
19366: ARRAY
19367: PPUSH
19368: LD_INT 1
19370: PPUSH
19371: CALL_OW 3
19375: PPUSH
19376: CALL_OW 1
19380: ST_TO_ADDR
// tmp := 1 ;
19381: LD_ADDR_VAR 0 2
19385: PUSH
19386: LD_STRING 1
19388: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19389: LD_ADDR_VAR 0 4
19393: PUSH
19394: LD_VAR 0 4
19398: PUSH
19399: LD_VAR 0 2
19403: STR
19404: ST_TO_ADDR
// end ;
19405: GO 19301
19407: POP
19408: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19409: LD_STRING getStreamItemsFromMission("
19411: PUSH
19412: LD_VAR 0 3
19416: STR
19417: PUSH
19418: LD_STRING ","
19420: STR
19421: PUSH
19422: LD_VAR 0 4
19426: STR
19427: PUSH
19428: LD_STRING ")
19430: STR
19431: PPUSH
19432: CALL_OW 559
// end else
19436: GO 19445
// ToLua ( getStreamItemsFromMission("","") ) ;
19438: LD_STRING getStreamItemsFromMission("","")
19440: PPUSH
19441: CALL_OW 559
// end ;
19445: LD_VAR 0 1
19449: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19450: LD_EXP 57
19454: PUSH
19455: LD_EXP 62
19459: AND
19460: IFFALSE 19584
19462: GO 19464
19464: DISABLE
19465: LD_INT 0
19467: PPUSH
19468: PPUSH
// begin enable ;
19469: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19470: LD_ADDR_VAR 0 2
19474: PUSH
19475: LD_INT 22
19477: PUSH
19478: LD_OWVAR 2
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 2
19489: PUSH
19490: LD_INT 34
19492: PUSH
19493: LD_INT 7
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: PUSH
19500: LD_INT 34
19502: PUSH
19503: LD_INT 45
19505: PUSH
19506: EMPTY
19507: LIST
19508: LIST
19509: PUSH
19510: LD_INT 34
19512: PUSH
19513: LD_INT 28
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: LD_INT 34
19522: PUSH
19523: LD_INT 47
19525: PUSH
19526: EMPTY
19527: LIST
19528: LIST
19529: PUSH
19530: EMPTY
19531: LIST
19532: LIST
19533: LIST
19534: LIST
19535: LIST
19536: PUSH
19537: EMPTY
19538: LIST
19539: LIST
19540: PPUSH
19541: CALL_OW 69
19545: ST_TO_ADDR
// if not tmp then
19546: LD_VAR 0 2
19550: NOT
19551: IFFALSE 19555
// exit ;
19553: GO 19584
// for i in tmp do
19555: LD_ADDR_VAR 0 1
19559: PUSH
19560: LD_VAR 0 2
19564: PUSH
19565: FOR_IN
19566: IFFALSE 19582
// begin SetLives ( i , 0 ) ;
19568: LD_VAR 0 1
19572: PPUSH
19573: LD_INT 0
19575: PPUSH
19576: CALL_OW 234
// end ;
19580: GO 19565
19582: POP
19583: POP
// end ;
19584: PPOPN 2
19586: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19587: LD_EXP 57
19591: PUSH
19592: LD_EXP 63
19596: AND
19597: IFFALSE 19681
19599: GO 19601
19601: DISABLE
19602: LD_INT 0
19604: PPUSH
19605: PPUSH
// begin enable ;
19606: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19607: LD_ADDR_VAR 0 2
19611: PUSH
19612: LD_INT 22
19614: PUSH
19615: LD_OWVAR 2
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: PUSH
19624: LD_INT 32
19626: PUSH
19627: LD_INT 3
19629: PUSH
19630: EMPTY
19631: LIST
19632: LIST
19633: PUSH
19634: EMPTY
19635: LIST
19636: LIST
19637: PPUSH
19638: CALL_OW 69
19642: ST_TO_ADDR
// if not tmp then
19643: LD_VAR 0 2
19647: NOT
19648: IFFALSE 19652
// exit ;
19650: GO 19681
// for i in tmp do
19652: LD_ADDR_VAR 0 1
19656: PUSH
19657: LD_VAR 0 2
19661: PUSH
19662: FOR_IN
19663: IFFALSE 19679
// begin SetLives ( i , 0 ) ;
19665: LD_VAR 0 1
19669: PPUSH
19670: LD_INT 0
19672: PPUSH
19673: CALL_OW 234
// end ;
19677: GO 19662
19679: POP
19680: POP
// end ;
19681: PPOPN 2
19683: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19684: LD_EXP 57
19688: PUSH
19689: LD_EXP 60
19693: AND
19694: IFFALSE 19787
19696: GO 19698
19698: DISABLE
19699: LD_INT 0
19701: PPUSH
// begin enable ;
19702: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19703: LD_ADDR_VAR 0 1
19707: PUSH
19708: LD_INT 22
19710: PUSH
19711: LD_OWVAR 2
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: LD_INT 25
19725: PUSH
19726: LD_INT 5
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 25
19735: PUSH
19736: LD_INT 9
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: LD_INT 25
19745: PUSH
19746: LD_INT 8
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: LIST
19757: LIST
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PPUSH
19763: CALL_OW 69
19767: PUSH
19768: FOR_IN
19769: IFFALSE 19785
// begin SetClass ( i , 1 ) ;
19771: LD_VAR 0 1
19775: PPUSH
19776: LD_INT 1
19778: PPUSH
19779: CALL_OW 336
// end ;
19783: GO 19768
19785: POP
19786: POP
// end ;
19787: PPOPN 1
19789: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19790: LD_EXP 57
19794: PUSH
19795: LD_EXP 61
19799: AND
19800: PUSH
19801: LD_OWVAR 65
19805: PUSH
19806: LD_INT 7
19808: LESS
19809: AND
19810: IFFALSE 19824
19812: GO 19814
19814: DISABLE
// begin enable ;
19815: ENABLE
// game_speed := 7 ;
19816: LD_ADDR_OWVAR 65
19820: PUSH
19821: LD_INT 7
19823: ST_TO_ADDR
// end ;
19824: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19825: LD_EXP 57
19829: PUSH
19830: LD_EXP 64
19834: AND
19835: IFFALSE 20037
19837: GO 19839
19839: DISABLE
19840: LD_INT 0
19842: PPUSH
19843: PPUSH
19844: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19845: LD_ADDR_VAR 0 3
19849: PUSH
19850: LD_INT 81
19852: PUSH
19853: LD_OWVAR 2
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: PUSH
19862: LD_INT 21
19864: PUSH
19865: LD_INT 1
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: EMPTY
19873: LIST
19874: LIST
19875: PPUSH
19876: CALL_OW 69
19880: ST_TO_ADDR
// if not tmp then
19881: LD_VAR 0 3
19885: NOT
19886: IFFALSE 19890
// exit ;
19888: GO 20037
// if tmp > 5 then
19890: LD_VAR 0 3
19894: PUSH
19895: LD_INT 5
19897: GREATER
19898: IFFALSE 19910
// k := 5 else
19900: LD_ADDR_VAR 0 2
19904: PUSH
19905: LD_INT 5
19907: ST_TO_ADDR
19908: GO 19920
// k := tmp ;
19910: LD_ADDR_VAR 0 2
19914: PUSH
19915: LD_VAR 0 3
19919: ST_TO_ADDR
// for i := 1 to k do
19920: LD_ADDR_VAR 0 1
19924: PUSH
19925: DOUBLE
19926: LD_INT 1
19928: DEC
19929: ST_TO_ADDR
19930: LD_VAR 0 2
19934: PUSH
19935: FOR_TO
19936: IFFALSE 20035
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
19938: LD_VAR 0 3
19942: PUSH
19943: LD_VAR 0 1
19947: ARRAY
19948: PPUSH
19949: LD_VAR 0 1
19953: PUSH
19954: LD_INT 4
19956: MOD
19957: PUSH
19958: LD_INT 1
19960: PLUS
19961: PPUSH
19962: CALL_OW 259
19966: PUSH
19967: LD_INT 10
19969: LESS
19970: IFFALSE 20033
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
19972: LD_VAR 0 3
19976: PUSH
19977: LD_VAR 0 1
19981: ARRAY
19982: PPUSH
19983: LD_VAR 0 1
19987: PUSH
19988: LD_INT 4
19990: MOD
19991: PUSH
19992: LD_INT 1
19994: PLUS
19995: PPUSH
19996: LD_VAR 0 3
20000: PUSH
20001: LD_VAR 0 1
20005: ARRAY
20006: PPUSH
20007: LD_VAR 0 1
20011: PUSH
20012: LD_INT 4
20014: MOD
20015: PUSH
20016: LD_INT 1
20018: PLUS
20019: PPUSH
20020: CALL_OW 259
20024: PUSH
20025: LD_INT 1
20027: PLUS
20028: PPUSH
20029: CALL_OW 237
20033: GO 19935
20035: POP
20036: POP
// end ;
20037: PPOPN 3
20039: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20040: LD_EXP 57
20044: PUSH
20045: LD_EXP 65
20049: AND
20050: IFFALSE 20070
20052: GO 20054
20054: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20055: LD_INT 4
20057: PPUSH
20058: LD_OWVAR 2
20062: PPUSH
20063: LD_INT 0
20065: PPUSH
20066: CALL_OW 324
20070: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20071: LD_EXP 57
20075: PUSH
20076: LD_EXP 94
20080: AND
20081: IFFALSE 20101
20083: GO 20085
20085: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20086: LD_INT 19
20088: PPUSH
20089: LD_OWVAR 2
20093: PPUSH
20094: LD_INT 0
20096: PPUSH
20097: CALL_OW 324
20101: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20102: LD_EXP 57
20106: PUSH
20107: LD_EXP 66
20111: AND
20112: IFFALSE 20214
20114: GO 20116
20116: DISABLE
20117: LD_INT 0
20119: PPUSH
20120: PPUSH
// begin enable ;
20121: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20122: LD_ADDR_VAR 0 2
20126: PUSH
20127: LD_INT 22
20129: PUSH
20130: LD_OWVAR 2
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: PUSH
20139: LD_INT 2
20141: PUSH
20142: LD_INT 34
20144: PUSH
20145: LD_INT 11
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: PUSH
20152: LD_INT 34
20154: PUSH
20155: LD_INT 30
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PPUSH
20171: CALL_OW 69
20175: ST_TO_ADDR
// if not tmp then
20176: LD_VAR 0 2
20180: NOT
20181: IFFALSE 20185
// exit ;
20183: GO 20214
// for i in tmp do
20185: LD_ADDR_VAR 0 1
20189: PUSH
20190: LD_VAR 0 2
20194: PUSH
20195: FOR_IN
20196: IFFALSE 20212
// begin SetLives ( i , 0 ) ;
20198: LD_VAR 0 1
20202: PPUSH
20203: LD_INT 0
20205: PPUSH
20206: CALL_OW 234
// end ;
20210: GO 20195
20212: POP
20213: POP
// end ;
20214: PPOPN 2
20216: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20217: LD_EXP 57
20221: PUSH
20222: LD_EXP 67
20226: AND
20227: IFFALSE 20247
20229: GO 20231
20231: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20232: LD_INT 32
20234: PPUSH
20235: LD_OWVAR 2
20239: PPUSH
20240: LD_INT 0
20242: PPUSH
20243: CALL_OW 324
20247: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20248: LD_EXP 57
20252: PUSH
20253: LD_EXP 68
20257: AND
20258: IFFALSE 20439
20260: GO 20262
20262: DISABLE
20263: LD_INT 0
20265: PPUSH
20266: PPUSH
20267: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20268: LD_ADDR_VAR 0 2
20272: PUSH
20273: LD_INT 22
20275: PUSH
20276: LD_OWVAR 2
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 33
20287: PUSH
20288: LD_INT 3
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PPUSH
20299: CALL_OW 69
20303: ST_TO_ADDR
// if not tmp then
20304: LD_VAR 0 2
20308: NOT
20309: IFFALSE 20313
// exit ;
20311: GO 20439
// side := 0 ;
20313: LD_ADDR_VAR 0 3
20317: PUSH
20318: LD_INT 0
20320: ST_TO_ADDR
// for i := 1 to 8 do
20321: LD_ADDR_VAR 0 1
20325: PUSH
20326: DOUBLE
20327: LD_INT 1
20329: DEC
20330: ST_TO_ADDR
20331: LD_INT 8
20333: PUSH
20334: FOR_TO
20335: IFFALSE 20383
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20337: LD_OWVAR 2
20341: PUSH
20342: LD_VAR 0 1
20346: NONEQUAL
20347: PUSH
20348: LD_OWVAR 2
20352: PPUSH
20353: LD_VAR 0 1
20357: PPUSH
20358: CALL_OW 81
20362: PUSH
20363: LD_INT 2
20365: EQUAL
20366: AND
20367: IFFALSE 20381
// begin side := i ;
20369: LD_ADDR_VAR 0 3
20373: PUSH
20374: LD_VAR 0 1
20378: ST_TO_ADDR
// break ;
20379: GO 20383
// end ;
20381: GO 20334
20383: POP
20384: POP
// if not side then
20385: LD_VAR 0 3
20389: NOT
20390: IFFALSE 20394
// exit ;
20392: GO 20439
// for i := 1 to tmp do
20394: LD_ADDR_VAR 0 1
20398: PUSH
20399: DOUBLE
20400: LD_INT 1
20402: DEC
20403: ST_TO_ADDR
20404: LD_VAR 0 2
20408: PUSH
20409: FOR_TO
20410: IFFALSE 20437
// if Prob ( 60 ) then
20412: LD_INT 60
20414: PPUSH
20415: CALL_OW 13
20419: IFFALSE 20435
// SetSide ( i , side ) ;
20421: LD_VAR 0 1
20425: PPUSH
20426: LD_VAR 0 3
20430: PPUSH
20431: CALL_OW 235
20435: GO 20409
20437: POP
20438: POP
// end ;
20439: PPOPN 3
20441: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20442: LD_EXP 57
20446: PUSH
20447: LD_EXP 70
20451: AND
20452: IFFALSE 20571
20454: GO 20456
20456: DISABLE
20457: LD_INT 0
20459: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20460: LD_ADDR_VAR 0 1
20464: PUSH
20465: LD_INT 22
20467: PUSH
20468: LD_OWVAR 2
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: PUSH
20477: LD_INT 21
20479: PUSH
20480: LD_INT 1
20482: PUSH
20483: EMPTY
20484: LIST
20485: LIST
20486: PUSH
20487: LD_INT 3
20489: PUSH
20490: LD_INT 23
20492: PUSH
20493: LD_INT 0
20495: PUSH
20496: EMPTY
20497: LIST
20498: LIST
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: EMPTY
20505: LIST
20506: LIST
20507: LIST
20508: PPUSH
20509: CALL_OW 69
20513: PUSH
20514: FOR_IN
20515: IFFALSE 20569
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20517: LD_VAR 0 1
20521: PPUSH
20522: CALL_OW 257
20526: PUSH
20527: LD_INT 1
20529: PUSH
20530: LD_INT 2
20532: PUSH
20533: LD_INT 3
20535: PUSH
20536: LD_INT 4
20538: PUSH
20539: EMPTY
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: IN
20545: IFFALSE 20567
// SetClass ( un , rand ( 1 , 4 ) ) ;
20547: LD_VAR 0 1
20551: PPUSH
20552: LD_INT 1
20554: PPUSH
20555: LD_INT 4
20557: PPUSH
20558: CALL_OW 12
20562: PPUSH
20563: CALL_OW 336
20567: GO 20514
20569: POP
20570: POP
// end ;
20571: PPOPN 1
20573: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20574: LD_EXP 57
20578: PUSH
20579: LD_EXP 69
20583: AND
20584: IFFALSE 20663
20586: GO 20588
20588: DISABLE
20589: LD_INT 0
20591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20592: LD_ADDR_VAR 0 1
20596: PUSH
20597: LD_INT 22
20599: PUSH
20600: LD_OWVAR 2
20604: PUSH
20605: EMPTY
20606: LIST
20607: LIST
20608: PUSH
20609: LD_INT 21
20611: PUSH
20612: LD_INT 3
20614: PUSH
20615: EMPTY
20616: LIST
20617: LIST
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PPUSH
20623: CALL_OW 69
20627: ST_TO_ADDR
// if not tmp then
20628: LD_VAR 0 1
20632: NOT
20633: IFFALSE 20637
// exit ;
20635: GO 20663
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20637: LD_VAR 0 1
20641: PUSH
20642: LD_INT 1
20644: PPUSH
20645: LD_VAR 0 1
20649: PPUSH
20650: CALL_OW 12
20654: ARRAY
20655: PPUSH
20656: LD_INT 100
20658: PPUSH
20659: CALL_OW 234
// end ;
20663: PPOPN 1
20665: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20666: LD_EXP 57
20670: PUSH
20671: LD_EXP 71
20675: AND
20676: IFFALSE 20774
20678: GO 20680
20680: DISABLE
20681: LD_INT 0
20683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20684: LD_ADDR_VAR 0 1
20688: PUSH
20689: LD_INT 22
20691: PUSH
20692: LD_OWVAR 2
20696: PUSH
20697: EMPTY
20698: LIST
20699: LIST
20700: PUSH
20701: LD_INT 21
20703: PUSH
20704: LD_INT 1
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: EMPTY
20712: LIST
20713: LIST
20714: PPUSH
20715: CALL_OW 69
20719: ST_TO_ADDR
// if not tmp then
20720: LD_VAR 0 1
20724: NOT
20725: IFFALSE 20729
// exit ;
20727: GO 20774
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20729: LD_VAR 0 1
20733: PUSH
20734: LD_INT 1
20736: PPUSH
20737: LD_VAR 0 1
20741: PPUSH
20742: CALL_OW 12
20746: ARRAY
20747: PPUSH
20748: LD_INT 1
20750: PPUSH
20751: LD_INT 4
20753: PPUSH
20754: CALL_OW 12
20758: PPUSH
20759: LD_INT 3000
20761: PPUSH
20762: LD_INT 9000
20764: PPUSH
20765: CALL_OW 12
20769: PPUSH
20770: CALL_OW 492
// end ;
20774: PPOPN 1
20776: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20777: LD_EXP 57
20781: PUSH
20782: LD_EXP 72
20786: AND
20787: IFFALSE 20807
20789: GO 20791
20791: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20792: LD_INT 1
20794: PPUSH
20795: LD_OWVAR 2
20799: PPUSH
20800: LD_INT 0
20802: PPUSH
20803: CALL_OW 324
20807: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20808: LD_EXP 57
20812: PUSH
20813: LD_EXP 73
20817: AND
20818: IFFALSE 20901
20820: GO 20822
20822: DISABLE
20823: LD_INT 0
20825: PPUSH
20826: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20827: LD_ADDR_VAR 0 2
20831: PUSH
20832: LD_INT 22
20834: PUSH
20835: LD_OWVAR 2
20839: PUSH
20840: EMPTY
20841: LIST
20842: LIST
20843: PUSH
20844: LD_INT 21
20846: PUSH
20847: LD_INT 3
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: PPUSH
20858: CALL_OW 69
20862: ST_TO_ADDR
// if not tmp then
20863: LD_VAR 0 2
20867: NOT
20868: IFFALSE 20872
// exit ;
20870: GO 20901
// for i in tmp do
20872: LD_ADDR_VAR 0 1
20876: PUSH
20877: LD_VAR 0 2
20881: PUSH
20882: FOR_IN
20883: IFFALSE 20899
// SetBLevel ( i , 10 ) ;
20885: LD_VAR 0 1
20889: PPUSH
20890: LD_INT 10
20892: PPUSH
20893: CALL_OW 241
20897: GO 20882
20899: POP
20900: POP
// end ;
20901: PPOPN 2
20903: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20904: LD_EXP 57
20908: PUSH
20909: LD_EXP 74
20913: AND
20914: IFFALSE 21025
20916: GO 20918
20918: DISABLE
20919: LD_INT 0
20921: PPUSH
20922: PPUSH
20923: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20924: LD_ADDR_VAR 0 3
20928: PUSH
20929: LD_INT 22
20931: PUSH
20932: LD_OWVAR 2
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: PUSH
20941: LD_INT 25
20943: PUSH
20944: LD_INT 1
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PUSH
20951: EMPTY
20952: LIST
20953: LIST
20954: PPUSH
20955: CALL_OW 69
20959: ST_TO_ADDR
// if not tmp then
20960: LD_VAR 0 3
20964: NOT
20965: IFFALSE 20969
// exit ;
20967: GO 21025
// un := tmp [ rand ( 1 , tmp ) ] ;
20969: LD_ADDR_VAR 0 2
20973: PUSH
20974: LD_VAR 0 3
20978: PUSH
20979: LD_INT 1
20981: PPUSH
20982: LD_VAR 0 3
20986: PPUSH
20987: CALL_OW 12
20991: ARRAY
20992: ST_TO_ADDR
// if Crawls ( un ) then
20993: LD_VAR 0 2
20997: PPUSH
20998: CALL_OW 318
21002: IFFALSE 21013
// ComWalk ( un ) ;
21004: LD_VAR 0 2
21008: PPUSH
21009: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21013: LD_VAR 0 2
21017: PPUSH
21018: LD_INT 5
21020: PPUSH
21021: CALL_OW 336
// end ;
21025: PPOPN 3
21027: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21028: LD_EXP 57
21032: PUSH
21033: LD_EXP 75
21037: AND
21038: PUSH
21039: LD_OWVAR 67
21043: PUSH
21044: LD_INT 3
21046: LESS
21047: AND
21048: IFFALSE 21067
21050: GO 21052
21052: DISABLE
// Difficulty := Difficulty + 1 ;
21053: LD_ADDR_OWVAR 67
21057: PUSH
21058: LD_OWVAR 67
21062: PUSH
21063: LD_INT 1
21065: PLUS
21066: ST_TO_ADDR
21067: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21068: LD_EXP 57
21072: PUSH
21073: LD_EXP 76
21077: AND
21078: IFFALSE 21181
21080: GO 21082
21082: DISABLE
21083: LD_INT 0
21085: PPUSH
// begin for i := 1 to 5 do
21086: LD_ADDR_VAR 0 1
21090: PUSH
21091: DOUBLE
21092: LD_INT 1
21094: DEC
21095: ST_TO_ADDR
21096: LD_INT 5
21098: PUSH
21099: FOR_TO
21100: IFFALSE 21179
// begin uc_nation := nation_nature ;
21102: LD_ADDR_OWVAR 21
21106: PUSH
21107: LD_INT 0
21109: ST_TO_ADDR
// uc_side := 0 ;
21110: LD_ADDR_OWVAR 20
21114: PUSH
21115: LD_INT 0
21117: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21118: LD_ADDR_OWVAR 29
21122: PUSH
21123: LD_INT 12
21125: PUSH
21126: LD_INT 12
21128: PUSH
21129: EMPTY
21130: LIST
21131: LIST
21132: ST_TO_ADDR
// hc_agressivity := 20 ;
21133: LD_ADDR_OWVAR 35
21137: PUSH
21138: LD_INT 20
21140: ST_TO_ADDR
// hc_class := class_tiger ;
21141: LD_ADDR_OWVAR 28
21145: PUSH
21146: LD_INT 14
21148: ST_TO_ADDR
// hc_gallery :=  ;
21149: LD_ADDR_OWVAR 33
21153: PUSH
21154: LD_STRING 
21156: ST_TO_ADDR
// hc_name :=  ;
21157: LD_ADDR_OWVAR 26
21161: PUSH
21162: LD_STRING 
21164: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21165: CALL_OW 44
21169: PPUSH
21170: LD_INT 0
21172: PPUSH
21173: CALL_OW 51
// end ;
21177: GO 21099
21179: POP
21180: POP
// end ;
21181: PPOPN 1
21183: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21184: LD_EXP 57
21188: PUSH
21189: LD_EXP 77
21193: AND
21194: IFFALSE 21203
21196: GO 21198
21198: DISABLE
// StreamSibBomb ;
21199: CALL 21204 0 0
21203: END
// export function StreamSibBomb ; var i , x , y ; begin
21204: LD_INT 0
21206: PPUSH
21207: PPUSH
21208: PPUSH
21209: PPUSH
// result := false ;
21210: LD_ADDR_VAR 0 1
21214: PUSH
21215: LD_INT 0
21217: ST_TO_ADDR
// for i := 1 to 16 do
21218: LD_ADDR_VAR 0 2
21222: PUSH
21223: DOUBLE
21224: LD_INT 1
21226: DEC
21227: ST_TO_ADDR
21228: LD_INT 16
21230: PUSH
21231: FOR_TO
21232: IFFALSE 21431
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21234: LD_ADDR_VAR 0 3
21238: PUSH
21239: LD_INT 10
21241: PUSH
21242: LD_INT 20
21244: PUSH
21245: LD_INT 30
21247: PUSH
21248: LD_INT 40
21250: PUSH
21251: LD_INT 50
21253: PUSH
21254: LD_INT 60
21256: PUSH
21257: LD_INT 70
21259: PUSH
21260: LD_INT 80
21262: PUSH
21263: LD_INT 90
21265: PUSH
21266: LD_INT 100
21268: PUSH
21269: LD_INT 110
21271: PUSH
21272: LD_INT 120
21274: PUSH
21275: LD_INT 130
21277: PUSH
21278: LD_INT 140
21280: PUSH
21281: LD_INT 150
21283: PUSH
21284: EMPTY
21285: LIST
21286: LIST
21287: LIST
21288: LIST
21289: LIST
21290: LIST
21291: LIST
21292: LIST
21293: LIST
21294: LIST
21295: LIST
21296: LIST
21297: LIST
21298: LIST
21299: LIST
21300: PUSH
21301: LD_INT 1
21303: PPUSH
21304: LD_INT 15
21306: PPUSH
21307: CALL_OW 12
21311: ARRAY
21312: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21313: LD_ADDR_VAR 0 4
21317: PUSH
21318: LD_INT 10
21320: PUSH
21321: LD_INT 20
21323: PUSH
21324: LD_INT 30
21326: PUSH
21327: LD_INT 40
21329: PUSH
21330: LD_INT 50
21332: PUSH
21333: LD_INT 60
21335: PUSH
21336: LD_INT 70
21338: PUSH
21339: LD_INT 80
21341: PUSH
21342: LD_INT 90
21344: PUSH
21345: LD_INT 100
21347: PUSH
21348: LD_INT 110
21350: PUSH
21351: LD_INT 120
21353: PUSH
21354: LD_INT 130
21356: PUSH
21357: LD_INT 140
21359: PUSH
21360: LD_INT 150
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: LIST
21372: LIST
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 1
21382: PPUSH
21383: LD_INT 15
21385: PPUSH
21386: CALL_OW 12
21390: ARRAY
21391: ST_TO_ADDR
// if ValidHex ( x , y ) then
21392: LD_VAR 0 3
21396: PPUSH
21397: LD_VAR 0 4
21401: PPUSH
21402: CALL_OW 488
21406: IFFALSE 21429
// begin result := [ x , y ] ;
21408: LD_ADDR_VAR 0 1
21412: PUSH
21413: LD_VAR 0 3
21417: PUSH
21418: LD_VAR 0 4
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: ST_TO_ADDR
// break ;
21427: GO 21431
// end ; end ;
21429: GO 21231
21431: POP
21432: POP
// if result then
21433: LD_VAR 0 1
21437: IFFALSE 21497
// begin ToLua ( playSibBomb() ) ;
21439: LD_STRING playSibBomb()
21441: PPUSH
21442: CALL_OW 559
// wait ( 0 0$14 ) ;
21446: LD_INT 490
21448: PPUSH
21449: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21453: LD_VAR 0 1
21457: PUSH
21458: LD_INT 1
21460: ARRAY
21461: PPUSH
21462: LD_VAR 0 1
21466: PUSH
21467: LD_INT 2
21469: ARRAY
21470: PPUSH
21471: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21475: LD_VAR 0 1
21479: PUSH
21480: LD_INT 1
21482: ARRAY
21483: PPUSH
21484: LD_VAR 0 1
21488: PUSH
21489: LD_INT 2
21491: ARRAY
21492: PPUSH
21493: CALL_OW 429
// end ; end ;
21497: LD_VAR 0 1
21501: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21502: LD_EXP 57
21506: PUSH
21507: LD_EXP 79
21511: AND
21512: IFFALSE 21524
21514: GO 21516
21516: DISABLE
// YouLost (  ) ;
21517: LD_STRING 
21519: PPUSH
21520: CALL_OW 104
21524: END
// every 0 0$1 trigger StreamModeActive and sFog do
21525: LD_EXP 57
21529: PUSH
21530: LD_EXP 78
21534: AND
21535: IFFALSE 21549
21537: GO 21539
21539: DISABLE
// FogOff ( your_side ) ;
21540: LD_OWVAR 2
21544: PPUSH
21545: CALL_OW 344
21549: END
// every 0 0$1 trigger StreamModeActive and sSun do
21550: LD_EXP 57
21554: PUSH
21555: LD_EXP 80
21559: AND
21560: IFFALSE 21588
21562: GO 21564
21564: DISABLE
// begin solar_recharge_percent := 0 ;
21565: LD_ADDR_OWVAR 79
21569: PUSH
21570: LD_INT 0
21572: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21573: LD_INT 10500
21575: PPUSH
21576: CALL_OW 67
// solar_recharge_percent := 100 ;
21580: LD_ADDR_OWVAR 79
21584: PUSH
21585: LD_INT 100
21587: ST_TO_ADDR
// end ;
21588: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21589: LD_EXP 57
21593: PUSH
21594: LD_EXP 81
21598: AND
21599: IFFALSE 21838
21601: GO 21603
21603: DISABLE
21604: LD_INT 0
21606: PPUSH
21607: PPUSH
21608: PPUSH
// begin tmp := [ ] ;
21609: LD_ADDR_VAR 0 3
21613: PUSH
21614: EMPTY
21615: ST_TO_ADDR
// for i := 1 to 6 do
21616: LD_ADDR_VAR 0 1
21620: PUSH
21621: DOUBLE
21622: LD_INT 1
21624: DEC
21625: ST_TO_ADDR
21626: LD_INT 6
21628: PUSH
21629: FOR_TO
21630: IFFALSE 21735
// begin uc_nation := nation_nature ;
21632: LD_ADDR_OWVAR 21
21636: PUSH
21637: LD_INT 0
21639: ST_TO_ADDR
// uc_side := 0 ;
21640: LD_ADDR_OWVAR 20
21644: PUSH
21645: LD_INT 0
21647: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21648: LD_ADDR_OWVAR 29
21652: PUSH
21653: LD_INT 12
21655: PUSH
21656: LD_INT 12
21658: PUSH
21659: EMPTY
21660: LIST
21661: LIST
21662: ST_TO_ADDR
// hc_agressivity := 20 ;
21663: LD_ADDR_OWVAR 35
21667: PUSH
21668: LD_INT 20
21670: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21671: LD_ADDR_OWVAR 28
21675: PUSH
21676: LD_INT 17
21678: ST_TO_ADDR
// hc_gallery :=  ;
21679: LD_ADDR_OWVAR 33
21683: PUSH
21684: LD_STRING 
21686: ST_TO_ADDR
// hc_name :=  ;
21687: LD_ADDR_OWVAR 26
21691: PUSH
21692: LD_STRING 
21694: ST_TO_ADDR
// un := CreateHuman ;
21695: LD_ADDR_VAR 0 2
21699: PUSH
21700: CALL_OW 44
21704: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21705: LD_VAR 0 2
21709: PPUSH
21710: LD_INT 1
21712: PPUSH
21713: CALL_OW 51
// tmp := tmp ^ un ;
21717: LD_ADDR_VAR 0 3
21721: PUSH
21722: LD_VAR 0 3
21726: PUSH
21727: LD_VAR 0 2
21731: ADD
21732: ST_TO_ADDR
// end ;
21733: GO 21629
21735: POP
21736: POP
// repeat wait ( 0 0$1 ) ;
21737: LD_INT 35
21739: PPUSH
21740: CALL_OW 67
// for un in tmp do
21744: LD_ADDR_VAR 0 2
21748: PUSH
21749: LD_VAR 0 3
21753: PUSH
21754: FOR_IN
21755: IFFALSE 21829
// begin if IsDead ( un ) then
21757: LD_VAR 0 2
21761: PPUSH
21762: CALL_OW 301
21766: IFFALSE 21786
// begin tmp := tmp diff un ;
21768: LD_ADDR_VAR 0 3
21772: PUSH
21773: LD_VAR 0 3
21777: PUSH
21778: LD_VAR 0 2
21782: DIFF
21783: ST_TO_ADDR
// continue ;
21784: GO 21754
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21786: LD_VAR 0 2
21790: PPUSH
21791: LD_INT 3
21793: PUSH
21794: LD_INT 22
21796: PUSH
21797: LD_INT 0
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PPUSH
21808: CALL_OW 69
21812: PPUSH
21813: LD_VAR 0 2
21817: PPUSH
21818: CALL_OW 74
21822: PPUSH
21823: CALL_OW 115
// end ;
21827: GO 21754
21829: POP
21830: POP
// until not tmp ;
21831: LD_VAR 0 3
21835: NOT
21836: IFFALSE 21737
// end ;
21838: PPOPN 3
21840: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21841: LD_EXP 57
21845: PUSH
21846: LD_EXP 82
21850: AND
21851: IFFALSE 21905
21853: GO 21855
21855: DISABLE
// begin ToLua ( displayTroll(); ) ;
21856: LD_STRING displayTroll();
21858: PPUSH
21859: CALL_OW 559
// wait ( 3 3$00 ) ;
21863: LD_INT 6300
21865: PPUSH
21866: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21870: LD_STRING hideTroll();
21872: PPUSH
21873: CALL_OW 559
// wait ( 1 1$00 ) ;
21877: LD_INT 2100
21879: PPUSH
21880: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21884: LD_STRING displayTroll();
21886: PPUSH
21887: CALL_OW 559
// wait ( 1 1$00 ) ;
21891: LD_INT 2100
21893: PPUSH
21894: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21898: LD_STRING hideTroll();
21900: PPUSH
21901: CALL_OW 559
// end ;
21905: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21906: LD_EXP 57
21910: PUSH
21911: LD_EXP 83
21915: AND
21916: IFFALSE 21979
21918: GO 21920
21920: DISABLE
21921: LD_INT 0
21923: PPUSH
// begin p := 0 ;
21924: LD_ADDR_VAR 0 1
21928: PUSH
21929: LD_INT 0
21931: ST_TO_ADDR
// repeat game_speed := 1 ;
21932: LD_ADDR_OWVAR 65
21936: PUSH
21937: LD_INT 1
21939: ST_TO_ADDR
// wait ( 0 0$1 ) ;
21940: LD_INT 35
21942: PPUSH
21943: CALL_OW 67
// p := p + 1 ;
21947: LD_ADDR_VAR 0 1
21951: PUSH
21952: LD_VAR 0 1
21956: PUSH
21957: LD_INT 1
21959: PLUS
21960: ST_TO_ADDR
// until p >= 60 ;
21961: LD_VAR 0 1
21965: PUSH
21966: LD_INT 60
21968: GREATEREQUAL
21969: IFFALSE 21932
// game_speed := 4 ;
21971: LD_ADDR_OWVAR 65
21975: PUSH
21976: LD_INT 4
21978: ST_TO_ADDR
// end ;
21979: PPOPN 1
21981: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
21982: LD_EXP 57
21986: PUSH
21987: LD_EXP 84
21991: AND
21992: IFFALSE 22138
21994: GO 21996
21996: DISABLE
21997: LD_INT 0
21999: PPUSH
22000: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22001: LD_ADDR_VAR 0 1
22005: PUSH
22006: LD_INT 22
22008: PUSH
22009: LD_OWVAR 2
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: LD_INT 2
22020: PUSH
22021: LD_INT 30
22023: PUSH
22024: LD_INT 0
22026: PUSH
22027: EMPTY
22028: LIST
22029: LIST
22030: PUSH
22031: LD_INT 30
22033: PUSH
22034: LD_INT 1
22036: PUSH
22037: EMPTY
22038: LIST
22039: LIST
22040: PUSH
22041: EMPTY
22042: LIST
22043: LIST
22044: LIST
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PPUSH
22050: CALL_OW 69
22054: ST_TO_ADDR
// if not depot then
22055: LD_VAR 0 1
22059: NOT
22060: IFFALSE 22064
// exit ;
22062: GO 22138
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22064: LD_ADDR_VAR 0 2
22068: PUSH
22069: LD_VAR 0 1
22073: PUSH
22074: LD_INT 1
22076: PPUSH
22077: LD_VAR 0 1
22081: PPUSH
22082: CALL_OW 12
22086: ARRAY
22087: PPUSH
22088: CALL_OW 274
22092: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22093: LD_VAR 0 2
22097: PPUSH
22098: LD_INT 1
22100: PPUSH
22101: LD_INT 0
22103: PPUSH
22104: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22108: LD_VAR 0 2
22112: PPUSH
22113: LD_INT 2
22115: PPUSH
22116: LD_INT 0
22118: PPUSH
22119: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22123: LD_VAR 0 2
22127: PPUSH
22128: LD_INT 3
22130: PPUSH
22131: LD_INT 0
22133: PPUSH
22134: CALL_OW 277
// end ;
22138: PPOPN 2
22140: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22141: LD_EXP 57
22145: PUSH
22146: LD_EXP 85
22150: AND
22151: IFFALSE 22248
22153: GO 22155
22155: DISABLE
22156: LD_INT 0
22158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22159: LD_ADDR_VAR 0 1
22163: PUSH
22164: LD_INT 22
22166: PUSH
22167: LD_OWVAR 2
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PUSH
22176: LD_INT 21
22178: PUSH
22179: LD_INT 1
22181: PUSH
22182: EMPTY
22183: LIST
22184: LIST
22185: PUSH
22186: LD_INT 3
22188: PUSH
22189: LD_INT 23
22191: PUSH
22192: LD_INT 0
22194: PUSH
22195: EMPTY
22196: LIST
22197: LIST
22198: PUSH
22199: EMPTY
22200: LIST
22201: LIST
22202: PUSH
22203: EMPTY
22204: LIST
22205: LIST
22206: LIST
22207: PPUSH
22208: CALL_OW 69
22212: ST_TO_ADDR
// if not tmp then
22213: LD_VAR 0 1
22217: NOT
22218: IFFALSE 22222
// exit ;
22220: GO 22248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22222: LD_VAR 0 1
22226: PUSH
22227: LD_INT 1
22229: PPUSH
22230: LD_VAR 0 1
22234: PPUSH
22235: CALL_OW 12
22239: ARRAY
22240: PPUSH
22241: LD_INT 200
22243: PPUSH
22244: CALL_OW 234
// end ;
22248: PPOPN 1
22250: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22251: LD_EXP 57
22255: PUSH
22256: LD_EXP 86
22260: AND
22261: IFFALSE 22340
22263: GO 22265
22265: DISABLE
22266: LD_INT 0
22268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22269: LD_ADDR_VAR 0 1
22273: PUSH
22274: LD_INT 22
22276: PUSH
22277: LD_OWVAR 2
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PUSH
22286: LD_INT 21
22288: PUSH
22289: LD_INT 2
22291: PUSH
22292: EMPTY
22293: LIST
22294: LIST
22295: PUSH
22296: EMPTY
22297: LIST
22298: LIST
22299: PPUSH
22300: CALL_OW 69
22304: ST_TO_ADDR
// if not tmp then
22305: LD_VAR 0 1
22309: NOT
22310: IFFALSE 22314
// exit ;
22312: GO 22340
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22314: LD_VAR 0 1
22318: PUSH
22319: LD_INT 1
22321: PPUSH
22322: LD_VAR 0 1
22326: PPUSH
22327: CALL_OW 12
22331: ARRAY
22332: PPUSH
22333: LD_INT 60
22335: PPUSH
22336: CALL_OW 234
// end ;
22340: PPOPN 1
22342: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22343: LD_EXP 57
22347: PUSH
22348: LD_EXP 87
22352: AND
22353: IFFALSE 22452
22355: GO 22357
22357: DISABLE
22358: LD_INT 0
22360: PPUSH
22361: PPUSH
// begin enable ;
22362: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22363: LD_ADDR_VAR 0 1
22367: PUSH
22368: LD_INT 22
22370: PUSH
22371: LD_OWVAR 2
22375: PUSH
22376: EMPTY
22377: LIST
22378: LIST
22379: PUSH
22380: LD_INT 61
22382: PUSH
22383: EMPTY
22384: LIST
22385: PUSH
22386: LD_INT 33
22388: PUSH
22389: LD_INT 2
22391: PUSH
22392: EMPTY
22393: LIST
22394: LIST
22395: PUSH
22396: EMPTY
22397: LIST
22398: LIST
22399: LIST
22400: PPUSH
22401: CALL_OW 69
22405: ST_TO_ADDR
// if not tmp then
22406: LD_VAR 0 1
22410: NOT
22411: IFFALSE 22415
// exit ;
22413: GO 22452
// for i in tmp do
22415: LD_ADDR_VAR 0 2
22419: PUSH
22420: LD_VAR 0 1
22424: PUSH
22425: FOR_IN
22426: IFFALSE 22450
// if IsControledBy ( i ) then
22428: LD_VAR 0 2
22432: PPUSH
22433: CALL_OW 312
22437: IFFALSE 22448
// ComUnlink ( i ) ;
22439: LD_VAR 0 2
22443: PPUSH
22444: CALL_OW 136
22448: GO 22425
22450: POP
22451: POP
// end ;
22452: PPOPN 2
22454: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22455: LD_EXP 57
22459: PUSH
22460: LD_EXP 88
22464: AND
22465: IFFALSE 22605
22467: GO 22469
22469: DISABLE
22470: LD_INT 0
22472: PPUSH
22473: PPUSH
// begin ToLua ( displayPowell(); ) ;
22474: LD_STRING displayPowell();
22476: PPUSH
22477: CALL_OW 559
// uc_side := 0 ;
22481: LD_ADDR_OWVAR 20
22485: PUSH
22486: LD_INT 0
22488: ST_TO_ADDR
// uc_nation := 2 ;
22489: LD_ADDR_OWVAR 21
22493: PUSH
22494: LD_INT 2
22496: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22497: LD_ADDR_OWVAR 37
22501: PUSH
22502: LD_INT 14
22504: ST_TO_ADDR
// vc_engine := engine_siberite ;
22505: LD_ADDR_OWVAR 39
22509: PUSH
22510: LD_INT 3
22512: ST_TO_ADDR
// vc_control := control_apeman ;
22513: LD_ADDR_OWVAR 38
22517: PUSH
22518: LD_INT 5
22520: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22521: LD_ADDR_OWVAR 40
22525: PUSH
22526: LD_INT 29
22528: ST_TO_ADDR
// un := CreateVehicle ;
22529: LD_ADDR_VAR 0 2
22533: PUSH
22534: CALL_OW 45
22538: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22539: LD_VAR 0 2
22543: PPUSH
22544: LD_INT 1
22546: PPUSH
22547: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22551: LD_INT 35
22553: PPUSH
22554: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22558: LD_VAR 0 2
22562: PPUSH
22563: LD_INT 22
22565: PUSH
22566: LD_OWVAR 2
22570: PUSH
22571: EMPTY
22572: LIST
22573: LIST
22574: PPUSH
22575: CALL_OW 69
22579: PPUSH
22580: LD_VAR 0 2
22584: PPUSH
22585: CALL_OW 74
22589: PPUSH
22590: CALL_OW 115
// until IsDead ( un ) ;
22594: LD_VAR 0 2
22598: PPUSH
22599: CALL_OW 301
22603: IFFALSE 22551
// end ;
22605: PPOPN 2
22607: END
// every 0 0$1 trigger StreamModeActive and sStu do
22608: LD_EXP 57
22612: PUSH
22613: LD_EXP 96
22617: AND
22618: IFFALSE 22634
22620: GO 22622
22622: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22623: LD_STRING displayStucuk();
22625: PPUSH
22626: CALL_OW 559
// ResetFog ;
22630: CALL_OW 335
// end ;
22634: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22635: LD_EXP 57
22639: PUSH
22640: LD_EXP 89
22644: AND
22645: IFFALSE 22786
22647: GO 22649
22649: DISABLE
22650: LD_INT 0
22652: PPUSH
22653: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22654: LD_ADDR_VAR 0 2
22658: PUSH
22659: LD_INT 22
22661: PUSH
22662: LD_OWVAR 2
22666: PUSH
22667: EMPTY
22668: LIST
22669: LIST
22670: PUSH
22671: LD_INT 21
22673: PUSH
22674: LD_INT 1
22676: PUSH
22677: EMPTY
22678: LIST
22679: LIST
22680: PUSH
22681: EMPTY
22682: LIST
22683: LIST
22684: PPUSH
22685: CALL_OW 69
22689: ST_TO_ADDR
// if not tmp then
22690: LD_VAR 0 2
22694: NOT
22695: IFFALSE 22699
// exit ;
22697: GO 22786
// un := tmp [ rand ( 1 , tmp ) ] ;
22699: LD_ADDR_VAR 0 1
22703: PUSH
22704: LD_VAR 0 2
22708: PUSH
22709: LD_INT 1
22711: PPUSH
22712: LD_VAR 0 2
22716: PPUSH
22717: CALL_OW 12
22721: ARRAY
22722: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22723: LD_VAR 0 1
22727: PPUSH
22728: LD_INT 0
22730: PPUSH
22731: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22735: LD_VAR 0 1
22739: PPUSH
22740: LD_OWVAR 3
22744: PUSH
22745: LD_VAR 0 1
22749: DIFF
22750: PPUSH
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 74
22760: PPUSH
22761: CALL_OW 115
// wait ( 0 0$20 ) ;
22765: LD_INT 700
22767: PPUSH
22768: CALL_OW 67
// SetSide ( un , your_side ) ;
22772: LD_VAR 0 1
22776: PPUSH
22777: LD_OWVAR 2
22781: PPUSH
22782: CALL_OW 235
// end ;
22786: PPOPN 2
22788: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22789: LD_EXP 57
22793: PUSH
22794: LD_EXP 90
22798: AND
22799: IFFALSE 22905
22801: GO 22803
22803: DISABLE
22804: LD_INT 0
22806: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22807: LD_ADDR_VAR 0 1
22811: PUSH
22812: LD_INT 22
22814: PUSH
22815: LD_OWVAR 2
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 2
22826: PUSH
22827: LD_INT 30
22829: PUSH
22830: LD_INT 0
22832: PUSH
22833: EMPTY
22834: LIST
22835: LIST
22836: PUSH
22837: LD_INT 30
22839: PUSH
22840: LD_INT 1
22842: PUSH
22843: EMPTY
22844: LIST
22845: LIST
22846: PUSH
22847: EMPTY
22848: LIST
22849: LIST
22850: LIST
22851: PUSH
22852: EMPTY
22853: LIST
22854: LIST
22855: PPUSH
22856: CALL_OW 69
22860: ST_TO_ADDR
// if not depot then
22861: LD_VAR 0 1
22865: NOT
22866: IFFALSE 22870
// exit ;
22868: GO 22905
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22870: LD_VAR 0 1
22874: PUSH
22875: LD_INT 1
22877: ARRAY
22878: PPUSH
22879: CALL_OW 250
22883: PPUSH
22884: LD_VAR 0 1
22888: PUSH
22889: LD_INT 1
22891: ARRAY
22892: PPUSH
22893: CALL_OW 251
22897: PPUSH
22898: LD_INT 70
22900: PPUSH
22901: CALL_OW 495
// end ;
22905: PPOPN 1
22907: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22908: LD_EXP 57
22912: PUSH
22913: LD_EXP 91
22917: AND
22918: IFFALSE 23129
22920: GO 22922
22922: DISABLE
22923: LD_INT 0
22925: PPUSH
22926: PPUSH
22927: PPUSH
22928: PPUSH
22929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22930: LD_ADDR_VAR 0 5
22934: PUSH
22935: LD_INT 22
22937: PUSH
22938: LD_OWVAR 2
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PUSH
22947: LD_INT 21
22949: PUSH
22950: LD_INT 1
22952: PUSH
22953: EMPTY
22954: LIST
22955: LIST
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PPUSH
22961: CALL_OW 69
22965: ST_TO_ADDR
// if not tmp then
22966: LD_VAR 0 5
22970: NOT
22971: IFFALSE 22975
// exit ;
22973: GO 23129
// for i in tmp do
22975: LD_ADDR_VAR 0 1
22979: PUSH
22980: LD_VAR 0 5
22984: PUSH
22985: FOR_IN
22986: IFFALSE 23127
// begin d := rand ( 0 , 5 ) ;
22988: LD_ADDR_VAR 0 4
22992: PUSH
22993: LD_INT 0
22995: PPUSH
22996: LD_INT 5
22998: PPUSH
22999: CALL_OW 12
23003: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23004: LD_ADDR_VAR 0 2
23008: PUSH
23009: LD_VAR 0 1
23013: PPUSH
23014: CALL_OW 250
23018: PPUSH
23019: LD_VAR 0 4
23023: PPUSH
23024: LD_INT 3
23026: PPUSH
23027: LD_INT 12
23029: PPUSH
23030: CALL_OW 12
23034: PPUSH
23035: CALL_OW 272
23039: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23040: LD_ADDR_VAR 0 3
23044: PUSH
23045: LD_VAR 0 1
23049: PPUSH
23050: CALL_OW 251
23054: PPUSH
23055: LD_VAR 0 4
23059: PPUSH
23060: LD_INT 3
23062: PPUSH
23063: LD_INT 12
23065: PPUSH
23066: CALL_OW 12
23070: PPUSH
23071: CALL_OW 273
23075: ST_TO_ADDR
// if ValidHex ( x , y ) then
23076: LD_VAR 0 2
23080: PPUSH
23081: LD_VAR 0 3
23085: PPUSH
23086: CALL_OW 488
23090: IFFALSE 23125
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23092: LD_VAR 0 1
23096: PPUSH
23097: LD_VAR 0 2
23101: PPUSH
23102: LD_VAR 0 3
23106: PPUSH
23107: LD_INT 3
23109: PPUSH
23110: LD_INT 6
23112: PPUSH
23113: CALL_OW 12
23117: PPUSH
23118: LD_INT 1
23120: PPUSH
23121: CALL_OW 483
// end ;
23125: GO 22985
23127: POP
23128: POP
// end ;
23129: PPOPN 5
23131: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23132: LD_EXP 57
23136: PUSH
23137: LD_EXP 92
23141: AND
23142: IFFALSE 23236
23144: GO 23146
23146: DISABLE
23147: LD_INT 0
23149: PPUSH
23150: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23151: LD_ADDR_VAR 0 2
23155: PUSH
23156: LD_INT 22
23158: PUSH
23159: LD_OWVAR 2
23163: PUSH
23164: EMPTY
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 32
23170: PUSH
23171: LD_INT 1
23173: PUSH
23174: EMPTY
23175: LIST
23176: LIST
23177: PUSH
23178: LD_INT 21
23180: PUSH
23181: LD_INT 2
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: LIST
23191: LIST
23192: PPUSH
23193: CALL_OW 69
23197: ST_TO_ADDR
// if not tmp then
23198: LD_VAR 0 2
23202: NOT
23203: IFFALSE 23207
// exit ;
23205: GO 23236
// for i in tmp do
23207: LD_ADDR_VAR 0 1
23211: PUSH
23212: LD_VAR 0 2
23216: PUSH
23217: FOR_IN
23218: IFFALSE 23234
// SetFuel ( i , 0 ) ;
23220: LD_VAR 0 1
23224: PPUSH
23225: LD_INT 0
23227: PPUSH
23228: CALL_OW 240
23232: GO 23217
23234: POP
23235: POP
// end ;
23236: PPOPN 2
23238: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23239: LD_EXP 57
23243: PUSH
23244: LD_EXP 93
23248: AND
23249: IFFALSE 23315
23251: GO 23253
23253: DISABLE
23254: LD_INT 0
23256: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23257: LD_ADDR_VAR 0 1
23261: PUSH
23262: LD_INT 22
23264: PUSH
23265: LD_OWVAR 2
23269: PUSH
23270: EMPTY
23271: LIST
23272: LIST
23273: PUSH
23274: LD_INT 30
23276: PUSH
23277: LD_INT 29
23279: PUSH
23280: EMPTY
23281: LIST
23282: LIST
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PPUSH
23288: CALL_OW 69
23292: ST_TO_ADDR
// if not tmp then
23293: LD_VAR 0 1
23297: NOT
23298: IFFALSE 23302
// exit ;
23300: GO 23315
// DestroyUnit ( tmp [ 1 ] ) ;
23302: LD_VAR 0 1
23306: PUSH
23307: LD_INT 1
23309: ARRAY
23310: PPUSH
23311: CALL_OW 65
// end ;
23315: PPOPN 1
23317: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23318: LD_EXP 57
23322: PUSH
23323: LD_EXP 95
23327: AND
23328: IFFALSE 23457
23330: GO 23332
23332: DISABLE
23333: LD_INT 0
23335: PPUSH
// begin uc_side := 0 ;
23336: LD_ADDR_OWVAR 20
23340: PUSH
23341: LD_INT 0
23343: ST_TO_ADDR
// uc_nation := nation_arabian ;
23344: LD_ADDR_OWVAR 21
23348: PUSH
23349: LD_INT 2
23351: ST_TO_ADDR
// hc_gallery :=  ;
23352: LD_ADDR_OWVAR 33
23356: PUSH
23357: LD_STRING 
23359: ST_TO_ADDR
// hc_name :=  ;
23360: LD_ADDR_OWVAR 26
23364: PUSH
23365: LD_STRING 
23367: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23368: LD_INT 1
23370: PPUSH
23371: LD_INT 11
23373: PPUSH
23374: LD_INT 10
23376: PPUSH
23377: CALL_OW 380
// un := CreateHuman ;
23381: LD_ADDR_VAR 0 1
23385: PUSH
23386: CALL_OW 44
23390: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_INT 1
23398: PPUSH
23399: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23403: LD_INT 35
23405: PPUSH
23406: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23410: LD_VAR 0 1
23414: PPUSH
23415: LD_INT 22
23417: PUSH
23418: LD_OWVAR 2
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PPUSH
23427: CALL_OW 69
23431: PPUSH
23432: LD_VAR 0 1
23436: PPUSH
23437: CALL_OW 74
23441: PPUSH
23442: CALL_OW 115
// until IsDead ( un ) ;
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 301
23455: IFFALSE 23403
// end ;
23457: PPOPN 1
23459: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23460: LD_EXP 57
23464: PUSH
23465: LD_EXP 97
23469: AND
23470: IFFALSE 23482
23472: GO 23474
23474: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23475: LD_STRING earthquake(getX(game), 0, 32)
23477: PPUSH
23478: CALL_OW 559
23482: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23483: LD_EXP 57
23487: PUSH
23488: LD_EXP 98
23492: AND
23493: IFFALSE 23584
23495: GO 23497
23497: DISABLE
23498: LD_INT 0
23500: PPUSH
// begin enable ;
23501: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23502: LD_ADDR_VAR 0 1
23506: PUSH
23507: LD_INT 22
23509: PUSH
23510: LD_OWVAR 2
23514: PUSH
23515: EMPTY
23516: LIST
23517: LIST
23518: PUSH
23519: LD_INT 21
23521: PUSH
23522: LD_INT 2
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PUSH
23529: LD_INT 33
23531: PUSH
23532: LD_INT 3
23534: PUSH
23535: EMPTY
23536: LIST
23537: LIST
23538: PUSH
23539: EMPTY
23540: LIST
23541: LIST
23542: LIST
23543: PPUSH
23544: CALL_OW 69
23548: ST_TO_ADDR
// if not tmp then
23549: LD_VAR 0 1
23553: NOT
23554: IFFALSE 23558
// exit ;
23556: GO 23584
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23558: LD_VAR 0 1
23562: PUSH
23563: LD_INT 1
23565: PPUSH
23566: LD_VAR 0 1
23570: PPUSH
23571: CALL_OW 12
23575: ARRAY
23576: PPUSH
23577: LD_INT 1
23579: PPUSH
23580: CALL_OW 234
// end ;
23584: PPOPN 1
23586: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23587: LD_EXP 57
23591: PUSH
23592: LD_EXP 99
23596: AND
23597: IFFALSE 23738
23599: GO 23601
23601: DISABLE
23602: LD_INT 0
23604: PPUSH
23605: PPUSH
23606: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23607: LD_ADDR_VAR 0 3
23611: PUSH
23612: LD_INT 22
23614: PUSH
23615: LD_OWVAR 2
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: PUSH
23624: LD_INT 25
23626: PUSH
23627: LD_INT 1
23629: PUSH
23630: EMPTY
23631: LIST
23632: LIST
23633: PUSH
23634: EMPTY
23635: LIST
23636: LIST
23637: PPUSH
23638: CALL_OW 69
23642: ST_TO_ADDR
// if not tmp then
23643: LD_VAR 0 3
23647: NOT
23648: IFFALSE 23652
// exit ;
23650: GO 23738
// un := tmp [ rand ( 1 , tmp ) ] ;
23652: LD_ADDR_VAR 0 2
23656: PUSH
23657: LD_VAR 0 3
23661: PUSH
23662: LD_INT 1
23664: PPUSH
23665: LD_VAR 0 3
23669: PPUSH
23670: CALL_OW 12
23674: ARRAY
23675: ST_TO_ADDR
// if Crawls ( un ) then
23676: LD_VAR 0 2
23680: PPUSH
23681: CALL_OW 318
23685: IFFALSE 23696
// ComWalk ( un ) ;
23687: LD_VAR 0 2
23691: PPUSH
23692: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23696: LD_VAR 0 2
23700: PPUSH
23701: LD_INT 9
23703: PPUSH
23704: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23708: LD_INT 28
23710: PPUSH
23711: LD_OWVAR 2
23715: PPUSH
23716: LD_INT 2
23718: PPUSH
23719: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23723: LD_INT 29
23725: PPUSH
23726: LD_OWVAR 2
23730: PPUSH
23731: LD_INT 2
23733: PPUSH
23734: CALL_OW 322
// end ;
23738: PPOPN 3
23740: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23741: LD_EXP 57
23745: PUSH
23746: LD_EXP 100
23750: AND
23751: IFFALSE 23862
23753: GO 23755
23755: DISABLE
23756: LD_INT 0
23758: PPUSH
23759: PPUSH
23760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23761: LD_ADDR_VAR 0 3
23765: PUSH
23766: LD_INT 22
23768: PUSH
23769: LD_OWVAR 2
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 25
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: EMPTY
23789: LIST
23790: LIST
23791: PPUSH
23792: CALL_OW 69
23796: ST_TO_ADDR
// if not tmp then
23797: LD_VAR 0 3
23801: NOT
23802: IFFALSE 23806
// exit ;
23804: GO 23862
// un := tmp [ rand ( 1 , tmp ) ] ;
23806: LD_ADDR_VAR 0 2
23810: PUSH
23811: LD_VAR 0 3
23815: PUSH
23816: LD_INT 1
23818: PPUSH
23819: LD_VAR 0 3
23823: PPUSH
23824: CALL_OW 12
23828: ARRAY
23829: ST_TO_ADDR
// if Crawls ( un ) then
23830: LD_VAR 0 2
23834: PPUSH
23835: CALL_OW 318
23839: IFFALSE 23850
// ComWalk ( un ) ;
23841: LD_VAR 0 2
23845: PPUSH
23846: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23850: LD_VAR 0 2
23854: PPUSH
23855: LD_INT 8
23857: PPUSH
23858: CALL_OW 336
// end ;
23862: PPOPN 3
23864: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23865: LD_EXP 57
23869: PUSH
23870: LD_EXP 101
23874: AND
23875: IFFALSE 24019
23877: GO 23879
23879: DISABLE
23880: LD_INT 0
23882: PPUSH
23883: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23884: LD_ADDR_VAR 0 2
23888: PUSH
23889: LD_INT 22
23891: PUSH
23892: LD_OWVAR 2
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 21
23903: PUSH
23904: LD_INT 2
23906: PUSH
23907: EMPTY
23908: LIST
23909: LIST
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: LD_INT 34
23916: PUSH
23917: LD_INT 12
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 34
23926: PUSH
23927: LD_INT 51
23929: PUSH
23930: EMPTY
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 34
23936: PUSH
23937: LD_INT 32
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: EMPTY
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: PPUSH
23955: CALL_OW 69
23959: ST_TO_ADDR
// if not tmp then
23960: LD_VAR 0 2
23964: NOT
23965: IFFALSE 23969
// exit ;
23967: GO 24019
// for i in tmp do
23969: LD_ADDR_VAR 0 1
23973: PUSH
23974: LD_VAR 0 2
23978: PUSH
23979: FOR_IN
23980: IFFALSE 24017
// if GetCargo ( i , mat_artifact ) = 0 then
23982: LD_VAR 0 1
23986: PPUSH
23987: LD_INT 4
23989: PPUSH
23990: CALL_OW 289
23994: PUSH
23995: LD_INT 0
23997: EQUAL
23998: IFFALSE 24015
// SetCargo ( i , mat_siberit , 100 ) ;
24000: LD_VAR 0 1
24004: PPUSH
24005: LD_INT 3
24007: PPUSH
24008: LD_INT 100
24010: PPUSH
24011: CALL_OW 290
24015: GO 23979
24017: POP
24018: POP
// end ;
24019: PPOPN 2
24021: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24022: LD_EXP 57
24026: PUSH
24027: LD_EXP 102
24031: AND
24032: IFFALSE 24215
24034: GO 24036
24036: DISABLE
24037: LD_INT 0
24039: PPUSH
24040: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24041: LD_ADDR_VAR 0 2
24045: PUSH
24046: LD_INT 22
24048: PUSH
24049: LD_OWVAR 2
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PPUSH
24058: CALL_OW 69
24062: ST_TO_ADDR
// if not tmp then
24063: LD_VAR 0 2
24067: NOT
24068: IFFALSE 24072
// exit ;
24070: GO 24215
// for i := 1 to 2 do
24072: LD_ADDR_VAR 0 1
24076: PUSH
24077: DOUBLE
24078: LD_INT 1
24080: DEC
24081: ST_TO_ADDR
24082: LD_INT 2
24084: PUSH
24085: FOR_TO
24086: IFFALSE 24213
// begin uc_side := your_side ;
24088: LD_ADDR_OWVAR 20
24092: PUSH
24093: LD_OWVAR 2
24097: ST_TO_ADDR
// uc_nation := nation_american ;
24098: LD_ADDR_OWVAR 21
24102: PUSH
24103: LD_INT 1
24105: ST_TO_ADDR
// vc_chassis := us_morphling ;
24106: LD_ADDR_OWVAR 37
24110: PUSH
24111: LD_INT 5
24113: ST_TO_ADDR
// vc_engine := engine_siberite ;
24114: LD_ADDR_OWVAR 39
24118: PUSH
24119: LD_INT 3
24121: ST_TO_ADDR
// vc_control := control_computer ;
24122: LD_ADDR_OWVAR 38
24126: PUSH
24127: LD_INT 3
24129: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24130: LD_ADDR_OWVAR 40
24134: PUSH
24135: LD_INT 10
24137: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24138: LD_VAR 0 2
24142: PUSH
24143: LD_INT 1
24145: ARRAY
24146: PPUSH
24147: CALL_OW 310
24151: NOT
24152: IFFALSE 24199
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24154: CALL_OW 45
24158: PPUSH
24159: LD_VAR 0 2
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: PPUSH
24168: CALL_OW 250
24172: PPUSH
24173: LD_VAR 0 2
24177: PUSH
24178: LD_INT 1
24180: ARRAY
24181: PPUSH
24182: CALL_OW 251
24186: PPUSH
24187: LD_INT 12
24189: PPUSH
24190: LD_INT 1
24192: PPUSH
24193: CALL_OW 50
24197: GO 24211
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24199: CALL_OW 45
24203: PPUSH
24204: LD_INT 1
24206: PPUSH
24207: CALL_OW 51
// end ;
24211: GO 24085
24213: POP
24214: POP
// end ;
24215: PPOPN 2
24217: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24218: LD_EXP 57
24222: PUSH
24223: LD_EXP 103
24227: AND
24228: IFFALSE 24450
24230: GO 24232
24232: DISABLE
24233: LD_INT 0
24235: PPUSH
24236: PPUSH
24237: PPUSH
24238: PPUSH
24239: PPUSH
24240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24241: LD_ADDR_VAR 0 6
24245: PUSH
24246: LD_INT 22
24248: PUSH
24249: LD_OWVAR 2
24253: PUSH
24254: EMPTY
24255: LIST
24256: LIST
24257: PUSH
24258: LD_INT 21
24260: PUSH
24261: LD_INT 1
24263: PUSH
24264: EMPTY
24265: LIST
24266: LIST
24267: PUSH
24268: LD_INT 3
24270: PUSH
24271: LD_INT 23
24273: PUSH
24274: LD_INT 0
24276: PUSH
24277: EMPTY
24278: LIST
24279: LIST
24280: PUSH
24281: EMPTY
24282: LIST
24283: LIST
24284: PUSH
24285: EMPTY
24286: LIST
24287: LIST
24288: LIST
24289: PPUSH
24290: CALL_OW 69
24294: ST_TO_ADDR
// if not tmp then
24295: LD_VAR 0 6
24299: NOT
24300: IFFALSE 24304
// exit ;
24302: GO 24450
// s1 := rand ( 1 , 4 ) ;
24304: LD_ADDR_VAR 0 2
24308: PUSH
24309: LD_INT 1
24311: PPUSH
24312: LD_INT 4
24314: PPUSH
24315: CALL_OW 12
24319: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24320: LD_ADDR_VAR 0 4
24324: PUSH
24325: LD_VAR 0 6
24329: PUSH
24330: LD_INT 1
24332: ARRAY
24333: PPUSH
24334: LD_VAR 0 2
24338: PPUSH
24339: CALL_OW 259
24343: ST_TO_ADDR
// if s1 = 1 then
24344: LD_VAR 0 2
24348: PUSH
24349: LD_INT 1
24351: EQUAL
24352: IFFALSE 24372
// s2 := rand ( 2 , 4 ) else
24354: LD_ADDR_VAR 0 3
24358: PUSH
24359: LD_INT 2
24361: PPUSH
24362: LD_INT 4
24364: PPUSH
24365: CALL_OW 12
24369: ST_TO_ADDR
24370: GO 24380
// s2 := 1 ;
24372: LD_ADDR_VAR 0 3
24376: PUSH
24377: LD_INT 1
24379: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24380: LD_ADDR_VAR 0 5
24384: PUSH
24385: LD_VAR 0 6
24389: PUSH
24390: LD_INT 1
24392: ARRAY
24393: PPUSH
24394: LD_VAR 0 3
24398: PPUSH
24399: CALL_OW 259
24403: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24404: LD_VAR 0 6
24408: PUSH
24409: LD_INT 1
24411: ARRAY
24412: PPUSH
24413: LD_VAR 0 2
24417: PPUSH
24418: LD_VAR 0 5
24422: PPUSH
24423: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24427: LD_VAR 0 6
24431: PUSH
24432: LD_INT 1
24434: ARRAY
24435: PPUSH
24436: LD_VAR 0 3
24440: PPUSH
24441: LD_VAR 0 4
24445: PPUSH
24446: CALL_OW 237
// end ;
24450: PPOPN 6
24452: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24453: LD_EXP 57
24457: PUSH
24458: LD_EXP 104
24462: AND
24463: IFFALSE 24542
24465: GO 24467
24467: DISABLE
24468: LD_INT 0
24470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24471: LD_ADDR_VAR 0 1
24475: PUSH
24476: LD_INT 22
24478: PUSH
24479: LD_OWVAR 2
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 30
24490: PUSH
24491: LD_INT 3
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PPUSH
24502: CALL_OW 69
24506: ST_TO_ADDR
// if not tmp then
24507: LD_VAR 0 1
24511: NOT
24512: IFFALSE 24516
// exit ;
24514: GO 24542
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24516: LD_VAR 0 1
24520: PUSH
24521: LD_INT 1
24523: PPUSH
24524: LD_VAR 0 1
24528: PPUSH
24529: CALL_OW 12
24533: ARRAY
24534: PPUSH
24535: LD_INT 1
24537: PPUSH
24538: CALL_OW 234
// end ;
24542: PPOPN 1
24544: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24545: LD_EXP 57
24549: PUSH
24550: LD_EXP 105
24554: AND
24555: IFFALSE 24667
24557: GO 24559
24559: DISABLE
24560: LD_INT 0
24562: PPUSH
24563: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24564: LD_ADDR_VAR 0 2
24568: PUSH
24569: LD_INT 22
24571: PUSH
24572: LD_OWVAR 2
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PUSH
24581: LD_INT 2
24583: PUSH
24584: LD_INT 30
24586: PUSH
24587: LD_INT 27
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: PUSH
24594: LD_INT 30
24596: PUSH
24597: LD_INT 26
24599: PUSH
24600: EMPTY
24601: LIST
24602: LIST
24603: PUSH
24604: LD_INT 30
24606: PUSH
24607: LD_INT 28
24609: PUSH
24610: EMPTY
24611: LIST
24612: LIST
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PPUSH
24624: CALL_OW 69
24628: ST_TO_ADDR
// if not tmp then
24629: LD_VAR 0 2
24633: NOT
24634: IFFALSE 24638
// exit ;
24636: GO 24667
// for i in tmp do
24638: LD_ADDR_VAR 0 1
24642: PUSH
24643: LD_VAR 0 2
24647: PUSH
24648: FOR_IN
24649: IFFALSE 24665
// SetLives ( i , 1 ) ;
24651: LD_VAR 0 1
24655: PPUSH
24656: LD_INT 1
24658: PPUSH
24659: CALL_OW 234
24663: GO 24648
24665: POP
24666: POP
// end ;
24667: PPOPN 2
24669: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24670: LD_EXP 57
24674: PUSH
24675: LD_EXP 106
24679: AND
24680: IFFALSE 24954
24682: GO 24684
24684: DISABLE
24685: LD_INT 0
24687: PPUSH
24688: PPUSH
24689: PPUSH
// begin i := rand ( 1 , 7 ) ;
24690: LD_ADDR_VAR 0 1
24694: PUSH
24695: LD_INT 1
24697: PPUSH
24698: LD_INT 7
24700: PPUSH
24701: CALL_OW 12
24705: ST_TO_ADDR
// case i of 1 :
24706: LD_VAR 0 1
24710: PUSH
24711: LD_INT 1
24713: DOUBLE
24714: EQUAL
24715: IFTRUE 24719
24717: GO 24729
24719: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24720: LD_STRING earthquake(getX(game), 0, 32)
24722: PPUSH
24723: CALL_OW 559
24727: GO 24954
24729: LD_INT 2
24731: DOUBLE
24732: EQUAL
24733: IFTRUE 24737
24735: GO 24751
24737: POP
// begin ToLua ( displayStucuk(); ) ;
24738: LD_STRING displayStucuk();
24740: PPUSH
24741: CALL_OW 559
// ResetFog ;
24745: CALL_OW 335
// end ; 3 :
24749: GO 24954
24751: LD_INT 3
24753: DOUBLE
24754: EQUAL
24755: IFTRUE 24759
24757: GO 24863
24759: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24760: LD_ADDR_VAR 0 2
24764: PUSH
24765: LD_INT 22
24767: PUSH
24768: LD_OWVAR 2
24772: PUSH
24773: EMPTY
24774: LIST
24775: LIST
24776: PUSH
24777: LD_INT 25
24779: PUSH
24780: LD_INT 1
24782: PUSH
24783: EMPTY
24784: LIST
24785: LIST
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PPUSH
24791: CALL_OW 69
24795: ST_TO_ADDR
// if not tmp then
24796: LD_VAR 0 2
24800: NOT
24801: IFFALSE 24805
// exit ;
24803: GO 24954
// un := tmp [ rand ( 1 , tmp ) ] ;
24805: LD_ADDR_VAR 0 3
24809: PUSH
24810: LD_VAR 0 2
24814: PUSH
24815: LD_INT 1
24817: PPUSH
24818: LD_VAR 0 2
24822: PPUSH
24823: CALL_OW 12
24827: ARRAY
24828: ST_TO_ADDR
// if Crawls ( un ) then
24829: LD_VAR 0 3
24833: PPUSH
24834: CALL_OW 318
24838: IFFALSE 24849
// ComWalk ( un ) ;
24840: LD_VAR 0 3
24844: PPUSH
24845: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24849: LD_VAR 0 3
24853: PPUSH
24854: LD_INT 8
24856: PPUSH
24857: CALL_OW 336
// end ; 4 :
24861: GO 24954
24863: LD_INT 4
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24932
24871: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24872: LD_ADDR_VAR 0 2
24876: PUSH
24877: LD_INT 22
24879: PUSH
24880: LD_OWVAR 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 30
24891: PUSH
24892: LD_INT 29
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PPUSH
24903: CALL_OW 69
24907: ST_TO_ADDR
// if not tmp then
24908: LD_VAR 0 2
24912: NOT
24913: IFFALSE 24917
// exit ;
24915: GO 24954
// DestroyUnit ( tmp [ 1 ] ) ;
24917: LD_VAR 0 2
24921: PUSH
24922: LD_INT 1
24924: ARRAY
24925: PPUSH
24926: CALL_OW 65
// end ; 5 .. 7 :
24930: GO 24954
24932: LD_INT 5
24934: DOUBLE
24935: GREATEREQUAL
24936: IFFALSE 24944
24938: LD_INT 7
24940: DOUBLE
24941: LESSEQUAL
24942: IFTRUE 24946
24944: GO 24953
24946: POP
// StreamSibBomb ; end ;
24947: CALL 21204 0 0
24951: GO 24954
24953: POP
// end ;
24954: PPOPN 3
24956: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
24957: LD_EXP 57
24961: PUSH
24962: LD_EXP 107
24966: AND
24967: IFFALSE 25123
24969: GO 24971
24971: DISABLE
24972: LD_INT 0
24974: PPUSH
24975: PPUSH
24976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
24977: LD_ADDR_VAR 0 2
24981: PUSH
24982: LD_INT 81
24984: PUSH
24985: LD_OWVAR 2
24989: PUSH
24990: EMPTY
24991: LIST
24992: LIST
24993: PUSH
24994: LD_INT 2
24996: PUSH
24997: LD_INT 21
24999: PUSH
25000: LD_INT 1
25002: PUSH
25003: EMPTY
25004: LIST
25005: LIST
25006: PUSH
25007: LD_INT 21
25009: PUSH
25010: LD_INT 2
25012: PUSH
25013: EMPTY
25014: LIST
25015: LIST
25016: PUSH
25017: EMPTY
25018: LIST
25019: LIST
25020: LIST
25021: PUSH
25022: EMPTY
25023: LIST
25024: LIST
25025: PPUSH
25026: CALL_OW 69
25030: ST_TO_ADDR
// if not tmp then
25031: LD_VAR 0 2
25035: NOT
25036: IFFALSE 25040
// exit ;
25038: GO 25123
// p := 0 ;
25040: LD_ADDR_VAR 0 3
25044: PUSH
25045: LD_INT 0
25047: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25048: LD_INT 35
25050: PPUSH
25051: CALL_OW 67
// p := p + 1 ;
25055: LD_ADDR_VAR 0 3
25059: PUSH
25060: LD_VAR 0 3
25064: PUSH
25065: LD_INT 1
25067: PLUS
25068: ST_TO_ADDR
// for i in tmp do
25069: LD_ADDR_VAR 0 1
25073: PUSH
25074: LD_VAR 0 2
25078: PUSH
25079: FOR_IN
25080: IFFALSE 25111
// if GetLives ( i ) < 1000 then
25082: LD_VAR 0 1
25086: PPUSH
25087: CALL_OW 256
25091: PUSH
25092: LD_INT 1000
25094: LESS
25095: IFFALSE 25109
// SetLives ( i , 1000 ) ;
25097: LD_VAR 0 1
25101: PPUSH
25102: LD_INT 1000
25104: PPUSH
25105: CALL_OW 234
25109: GO 25079
25111: POP
25112: POP
// until p > 20 ;
25113: LD_VAR 0 3
25117: PUSH
25118: LD_INT 20
25120: GREATER
25121: IFFALSE 25048
// end ;
25123: PPOPN 3
25125: END
// every 0 0$1 trigger StreamModeActive and sTime do
25126: LD_EXP 57
25130: PUSH
25131: LD_EXP 108
25135: AND
25136: IFFALSE 25171
25138: GO 25140
25140: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25141: LD_INT 28
25143: PPUSH
25144: LD_OWVAR 2
25148: PPUSH
25149: LD_INT 2
25151: PPUSH
25152: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25156: LD_INT 30
25158: PPUSH
25159: LD_OWVAR 2
25163: PPUSH
25164: LD_INT 2
25166: PPUSH
25167: CALL_OW 322
// end ;
25171: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25172: LD_EXP 57
25176: PUSH
25177: LD_EXP 109
25181: AND
25182: IFFALSE 25303
25184: GO 25186
25186: DISABLE
25187: LD_INT 0
25189: PPUSH
25190: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25191: LD_ADDR_VAR 0 2
25195: PUSH
25196: LD_INT 22
25198: PUSH
25199: LD_OWVAR 2
25203: PUSH
25204: EMPTY
25205: LIST
25206: LIST
25207: PUSH
25208: LD_INT 21
25210: PUSH
25211: LD_INT 1
25213: PUSH
25214: EMPTY
25215: LIST
25216: LIST
25217: PUSH
25218: LD_INT 3
25220: PUSH
25221: LD_INT 23
25223: PUSH
25224: LD_INT 0
25226: PUSH
25227: EMPTY
25228: LIST
25229: LIST
25230: PUSH
25231: EMPTY
25232: LIST
25233: LIST
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: PPUSH
25240: CALL_OW 69
25244: ST_TO_ADDR
// if not tmp then
25245: LD_VAR 0 2
25249: NOT
25250: IFFALSE 25254
// exit ;
25252: GO 25303
// for i in tmp do
25254: LD_ADDR_VAR 0 1
25258: PUSH
25259: LD_VAR 0 2
25263: PUSH
25264: FOR_IN
25265: IFFALSE 25301
// begin if Crawls ( i ) then
25267: LD_VAR 0 1
25271: PPUSH
25272: CALL_OW 318
25276: IFFALSE 25287
// ComWalk ( i ) ;
25278: LD_VAR 0 1
25282: PPUSH
25283: CALL_OW 138
// SetClass ( i , 2 ) ;
25287: LD_VAR 0 1
25291: PPUSH
25292: LD_INT 2
25294: PPUSH
25295: CALL_OW 336
// end ;
25299: GO 25264
25301: POP
25302: POP
// end ;
25303: PPOPN 2
25305: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25306: LD_EXP 57
25310: PUSH
25311: LD_EXP 110
25315: AND
25316: IFFALSE 25597
25318: GO 25320
25320: DISABLE
25321: LD_INT 0
25323: PPUSH
25324: PPUSH
25325: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25326: LD_OWVAR 2
25330: PPUSH
25331: LD_INT 9
25333: PPUSH
25334: LD_INT 1
25336: PPUSH
25337: LD_INT 1
25339: PPUSH
25340: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25344: LD_INT 9
25346: PPUSH
25347: LD_OWVAR 2
25351: PPUSH
25352: CALL_OW 343
// uc_side := 9 ;
25356: LD_ADDR_OWVAR 20
25360: PUSH
25361: LD_INT 9
25363: ST_TO_ADDR
// uc_nation := 2 ;
25364: LD_ADDR_OWVAR 21
25368: PUSH
25369: LD_INT 2
25371: ST_TO_ADDR
// hc_name := Dark Warrior ;
25372: LD_ADDR_OWVAR 26
25376: PUSH
25377: LD_STRING Dark Warrior
25379: ST_TO_ADDR
// hc_gallery :=  ;
25380: LD_ADDR_OWVAR 33
25384: PUSH
25385: LD_STRING 
25387: ST_TO_ADDR
// hc_noskilllimit := true ;
25388: LD_ADDR_OWVAR 76
25392: PUSH
25393: LD_INT 1
25395: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25396: LD_ADDR_OWVAR 31
25400: PUSH
25401: LD_INT 30
25403: PUSH
25404: LD_INT 30
25406: PUSH
25407: LD_INT 30
25409: PUSH
25410: LD_INT 30
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: ST_TO_ADDR
// un := CreateHuman ;
25419: LD_ADDR_VAR 0 3
25423: PUSH
25424: CALL_OW 44
25428: ST_TO_ADDR
// hc_noskilllimit := false ;
25429: LD_ADDR_OWVAR 76
25433: PUSH
25434: LD_INT 0
25436: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25437: LD_VAR 0 3
25441: PPUSH
25442: LD_INT 1
25444: PPUSH
25445: CALL_OW 51
// p := 0 ;
25449: LD_ADDR_VAR 0 2
25453: PUSH
25454: LD_INT 0
25456: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25457: LD_INT 35
25459: PPUSH
25460: CALL_OW 67
// p := p + 1 ;
25464: LD_ADDR_VAR 0 2
25468: PUSH
25469: LD_VAR 0 2
25473: PUSH
25474: LD_INT 1
25476: PLUS
25477: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25478: LD_VAR 0 3
25482: PPUSH
25483: CALL_OW 256
25487: PUSH
25488: LD_INT 1000
25490: LESS
25491: IFFALSE 25505
// SetLives ( un , 1000 ) ;
25493: LD_VAR 0 3
25497: PPUSH
25498: LD_INT 1000
25500: PPUSH
25501: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25505: LD_VAR 0 3
25509: PPUSH
25510: LD_INT 81
25512: PUSH
25513: LD_OWVAR 2
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PUSH
25522: LD_INT 91
25524: PUSH
25525: LD_VAR 0 3
25529: PUSH
25530: LD_INT 30
25532: PUSH
25533: EMPTY
25534: LIST
25535: LIST
25536: LIST
25537: PUSH
25538: EMPTY
25539: LIST
25540: LIST
25541: PPUSH
25542: CALL_OW 69
25546: PPUSH
25547: LD_VAR 0 3
25551: PPUSH
25552: CALL_OW 74
25556: PPUSH
25557: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
25561: LD_VAR 0 2
25565: PUSH
25566: LD_INT 60
25568: GREATER
25569: PUSH
25570: LD_VAR 0 3
25574: PPUSH
25575: CALL_OW 301
25579: OR
25580: IFFALSE 25457
// if un then
25582: LD_VAR 0 3
25586: IFFALSE 25597
// RemoveUnit ( un ) ;
25588: LD_VAR 0 3
25592: PPUSH
25593: CALL_OW 64
// end ;
25597: PPOPN 3
25599: END
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
25600: LD_INT 0
25602: PPUSH
25603: PPUSH
25604: PPUSH
25605: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
25606: LD_ADDR_VAR 0 4
25610: PUSH
25611: LD_INT 22
25613: PUSH
25614: LD_OWVAR 2
25618: PUSH
25619: EMPTY
25620: LIST
25621: LIST
25622: PUSH
25623: LD_INT 2
25625: PUSH
25626: LD_INT 30
25628: PUSH
25629: LD_INT 0
25631: PUSH
25632: EMPTY
25633: LIST
25634: LIST
25635: PUSH
25636: LD_INT 30
25638: PUSH
25639: LD_INT 1
25641: PUSH
25642: EMPTY
25643: LIST
25644: LIST
25645: PUSH
25646: EMPTY
25647: LIST
25648: LIST
25649: LIST
25650: PUSH
25651: EMPTY
25652: LIST
25653: LIST
25654: PPUSH
25655: CALL_OW 69
25659: ST_TO_ADDR
// if not tmp then
25660: LD_VAR 0 4
25664: NOT
25665: IFFALSE 25669
// exit ;
25667: GO 25728
// for i in tmp do
25669: LD_ADDR_VAR 0 2
25673: PUSH
25674: LD_VAR 0 4
25678: PUSH
25679: FOR_IN
25680: IFFALSE 25726
// for j = 1 to 3 do
25682: LD_ADDR_VAR 0 3
25686: PUSH
25687: DOUBLE
25688: LD_INT 1
25690: DEC
25691: ST_TO_ADDR
25692: LD_INT 3
25694: PUSH
25695: FOR_TO
25696: IFFALSE 25722
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
25698: LD_VAR 0 2
25702: PPUSH
25703: CALL_OW 274
25707: PPUSH
25708: LD_VAR 0 3
25712: PPUSH
25713: LD_INT 99999
25715: PPUSH
25716: CALL_OW 277
25720: GO 25695
25722: POP
25723: POP
25724: GO 25679
25726: POP
25727: POP
// end ;
25728: LD_VAR 0 1
25732: RET
// export function hHackSetLevel10 ; var i , j ; begin
25733: LD_INT 0
25735: PPUSH
25736: PPUSH
25737: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
25738: LD_ADDR_VAR 0 2
25742: PUSH
25743: LD_INT 21
25745: PUSH
25746: LD_INT 1
25748: PUSH
25749: EMPTY
25750: LIST
25751: LIST
25752: PPUSH
25753: CALL_OW 69
25757: PUSH
25758: FOR_IN
25759: IFFALSE 25811
// if IsSelected ( i ) then
25761: LD_VAR 0 2
25765: PPUSH
25766: CALL_OW 306
25770: IFFALSE 25809
// begin for j := 1 to 4 do
25772: LD_ADDR_VAR 0 3
25776: PUSH
25777: DOUBLE
25778: LD_INT 1
25780: DEC
25781: ST_TO_ADDR
25782: LD_INT 4
25784: PUSH
25785: FOR_TO
25786: IFFALSE 25807
// SetSkill ( i , j , 10 ) ;
25788: LD_VAR 0 2
25792: PPUSH
25793: LD_VAR 0 3
25797: PPUSH
25798: LD_INT 10
25800: PPUSH
25801: CALL_OW 237
25805: GO 25785
25807: POP
25808: POP
// end ;
25809: GO 25758
25811: POP
25812: POP
// end ;
25813: LD_VAR 0 1
25817: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
25818: LD_INT 0
25820: PPUSH
25821: PPUSH
25822: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
25823: LD_ADDR_VAR 0 2
25827: PUSH
25828: LD_INT 22
25830: PUSH
25831: LD_OWVAR 2
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 21
25842: PUSH
25843: LD_INT 1
25845: PUSH
25846: EMPTY
25847: LIST
25848: LIST
25849: PUSH
25850: EMPTY
25851: LIST
25852: LIST
25853: PPUSH
25854: CALL_OW 69
25858: PUSH
25859: FOR_IN
25860: IFFALSE 25901
// begin for j := 1 to 4 do
25862: LD_ADDR_VAR 0 3
25866: PUSH
25867: DOUBLE
25868: LD_INT 1
25870: DEC
25871: ST_TO_ADDR
25872: LD_INT 4
25874: PUSH
25875: FOR_TO
25876: IFFALSE 25897
// SetSkill ( i , j , 10 ) ;
25878: LD_VAR 0 2
25882: PPUSH
25883: LD_VAR 0 3
25887: PPUSH
25888: LD_INT 10
25890: PPUSH
25891: CALL_OW 237
25895: GO 25875
25897: POP
25898: POP
// end ;
25899: GO 25859
25901: POP
25902: POP
// end ;
25903: LD_VAR 0 1
25907: RET
// export function hHackSpawnHuman ( nation , class , skill ) ; begin
25908: LD_INT 0
25910: PPUSH
// uc_side := your_side ;
25911: LD_ADDR_OWVAR 20
25915: PUSH
25916: LD_OWVAR 2
25920: ST_TO_ADDR
// uc_nation := nation ;
25921: LD_ADDR_OWVAR 21
25925: PUSH
25926: LD_VAR 0 1
25930: ST_TO_ADDR
// InitHc ;
25931: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
25935: LD_INT 0
25937: PPUSH
25938: LD_VAR 0 2
25942: PPUSH
25943: LD_VAR 0 3
25947: PPUSH
25948: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
25952: CALL_OW 44
25956: PPUSH
25957: LD_INT 1
25959: PPUSH
25960: CALL_OW 51
// end ;
25964: LD_VAR 0 4
25968: RET
// export function hHackSpawnVehicle ; begin
25969: LD_INT 0
25971: PPUSH
// uc_side := your_side ;
25972: LD_ADDR_OWVAR 20
25976: PUSH
25977: LD_OWVAR 2
25981: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
25982: LD_ADDR_OWVAR 21
25986: PUSH
25987: LD_INT 1
25989: PPUSH
25990: LD_INT 3
25992: PPUSH
25993: CALL_OW 12
25997: ST_TO_ADDR
// InitVc ;
25998: CALL_OW 20
// case uc_nation of 1 :
26002: LD_OWVAR 21
26006: PUSH
26007: LD_INT 1
26009: DOUBLE
26010: EQUAL
26011: IFTRUE 26015
26013: GO 26159
26015: POP
// begin vc_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] [ rand ( 1 , 5 ) ] ;
26016: LD_ADDR_OWVAR 37
26020: PUSH
26021: LD_INT 1
26023: PUSH
26024: LD_INT 2
26026: PUSH
26027: LD_INT 3
26029: PUSH
26030: LD_INT 4
26032: PUSH
26033: LD_INT 5
26035: PUSH
26036: EMPTY
26037: LIST
26038: LIST
26039: LIST
26040: LIST
26041: LIST
26042: PUSH
26043: LD_INT 1
26045: PPUSH
26046: LD_INT 5
26048: PPUSH
26049: CALL_OW 12
26053: ARRAY
26054: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
26055: LD_ADDR_OWVAR 39
26059: PUSH
26060: LD_INT 1
26062: PPUSH
26063: LD_INT 3
26065: PPUSH
26066: CALL_OW 12
26070: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_computer ] [ rand ( 1 , 3 ) ] ;
26071: LD_ADDR_OWVAR 38
26075: PUSH
26076: LD_INT 1
26078: PUSH
26079: LD_INT 2
26081: PUSH
26082: LD_INT 3
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: LIST
26089: PUSH
26090: LD_INT 1
26092: PPUSH
26093: LD_INT 3
26095: PPUSH
26096: CALL_OW 12
26100: ARRAY
26101: ST_TO_ADDR
// vc_weapon := [ us_machine_gun , us_gatling_gun , us_double_gun , us_light_gun , us_rocket_launcher , us_siberium_rocket , us_laser , us_double_laser , us_heavy_gun ] [ rand ( 1 , 9 ) ] ;
26102: LD_ADDR_OWVAR 40
26106: PUSH
26107: LD_INT 2
26109: PUSH
26110: LD_INT 4
26112: PUSH
26113: LD_INT 5
26115: PUSH
26116: LD_INT 3
26118: PUSH
26119: LD_INT 7
26121: PUSH
26122: LD_INT 8
26124: PUSH
26125: LD_INT 9
26127: PUSH
26128: LD_INT 10
26130: PUSH
26131: LD_INT 6
26133: PUSH
26134: EMPTY
26135: LIST
26136: LIST
26137: LIST
26138: LIST
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: LIST
26144: PUSH
26145: LD_INT 1
26147: PPUSH
26148: LD_INT 9
26150: PPUSH
26151: CALL_OW 12
26155: ARRAY
26156: ST_TO_ADDR
// end ; 2 :
26157: GO 26424
26159: LD_INT 2
26161: DOUBLE
26162: EQUAL
26163: IFTRUE 26167
26165: GO 26291
26167: POP
// begin vc_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] [ rand ( 1 , 4 ) ] ;
26168: LD_ADDR_OWVAR 37
26172: PUSH
26173: LD_INT 11
26175: PUSH
26176: LD_INT 12
26178: PUSH
26179: LD_INT 13
26181: PUSH
26182: LD_INT 14
26184: PUSH
26185: EMPTY
26186: LIST
26187: LIST
26188: LIST
26189: LIST
26190: PUSH
26191: LD_INT 1
26193: PPUSH
26194: LD_INT 4
26196: PPUSH
26197: CALL_OW 12
26201: ARRAY
26202: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
26203: LD_ADDR_OWVAR 39
26207: PUSH
26208: LD_INT 1
26210: PPUSH
26211: LD_INT 3
26213: PPUSH
26214: CALL_OW 12
26218: ST_TO_ADDR
// vc_control := [ control_manual , control_remote , control_apeman ] [ rand ( 1 , 3 ) ] ;
26219: LD_ADDR_OWVAR 38
26223: PUSH
26224: LD_INT 1
26226: PUSH
26227: LD_INT 2
26229: PUSH
26230: LD_INT 5
26232: PUSH
26233: EMPTY
26234: LIST
26235: LIST
26236: LIST
26237: PUSH
26238: LD_INT 1
26240: PPUSH
26241: LD_INT 3
26243: PPUSH
26244: CALL_OW 12
26248: ARRAY
26249: ST_TO_ADDR
// vc_weapon := [ ar_double_machine_gun , ar_flame_thrower , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb ] [ rand ( 1 , 5 ) ] ;
26250: LD_ADDR_OWVAR 40
26254: PUSH
26255: LD_INT 24
26257: PUSH
26258: LD_INT 26
26260: PUSH
26261: LD_INT 27
26263: PUSH
26264: LD_INT 28
26266: PUSH
26267: LD_INT 29
26269: PUSH
26270: EMPTY
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: PUSH
26277: LD_INT 1
26279: PPUSH
26280: LD_INT 5
26282: PPUSH
26283: CALL_OW 12
26287: ARRAY
26288: ST_TO_ADDR
// end ; 3 :
26289: GO 26424
26291: LD_INT 3
26293: DOUBLE
26294: EQUAL
26295: IFTRUE 26299
26297: GO 26423
26299: POP
// begin vc_chassis := [ ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] ;
26300: LD_ADDR_OWVAR 37
26304: PUSH
26305: LD_INT 21
26307: PUSH
26308: LD_INT 23
26310: PUSH
26311: LD_INT 22
26313: PUSH
26314: LD_INT 24
26316: PUSH
26317: EMPTY
26318: LIST
26319: LIST
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_INT 4
26328: PPUSH
26329: CALL_OW 12
26333: ARRAY
26334: ST_TO_ADDR
// vc_engine := rand ( 1 , 3 ) ;
26335: LD_ADDR_OWVAR 39
26339: PUSH
26340: LD_INT 1
26342: PPUSH
26343: LD_INT 3
26345: PPUSH
26346: CALL_OW 12
26350: ST_TO_ADDR
// vc_control := [ control_manual , control_computer ] [ rand ( 1 , 2 ) ] ;
26351: LD_ADDR_OWVAR 38
26355: PUSH
26356: LD_INT 1
26358: PUSH
26359: LD_INT 3
26361: PUSH
26362: EMPTY
26363: LIST
26364: LIST
26365: PUSH
26366: LD_INT 1
26368: PPUSH
26369: LD_INT 2
26371: PPUSH
26372: CALL_OW 12
26376: ARRAY
26377: ST_TO_ADDR
// vc_weapon := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , ru_heavy_gun , ru_siberium_rocket , ru_rocket ] [ rand ( 1 , 6 ) ] ;
26378: LD_ADDR_OWVAR 40
26382: PUSH
26383: LD_INT 42
26385: PUSH
26386: LD_INT 43
26388: PUSH
26389: LD_INT 44
26391: PUSH
26392: LD_INT 46
26394: PUSH
26395: LD_INT 48
26397: PUSH
26398: LD_INT 47
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: LIST
26407: LIST
26408: PUSH
26409: LD_INT 1
26411: PPUSH
26412: LD_INT 6
26414: PPUSH
26415: CALL_OW 12
26419: ARRAY
26420: ST_TO_ADDR
// end ; end ;
26421: GO 26424
26423: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26424: CALL_OW 45
26428: PPUSH
26429: LD_INT 1
26431: PPUSH
26432: CALL_OW 51
// end ;
26436: LD_VAR 0 1
26440: RET
// export hInvincible ; every 1 do
26441: GO 26443
26443: DISABLE
// hInvincible := [ ] ;
26444: LD_ADDR_EXP 111
26448: PUSH
26449: EMPTY
26450: ST_TO_ADDR
26451: END
// every 10 do var i ;
26452: GO 26454
26454: DISABLE
26455: LD_INT 0
26457: PPUSH
// begin enable ;
26458: ENABLE
// if not hInvincible then
26459: LD_EXP 111
26463: NOT
26464: IFFALSE 26468
// exit ;
26466: GO 26512
// for i in hInvincible do
26468: LD_ADDR_VAR 0 1
26472: PUSH
26473: LD_EXP 111
26477: PUSH
26478: FOR_IN
26479: IFFALSE 26510
// if GetLives ( i ) < 1000 then
26481: LD_VAR 0 1
26485: PPUSH
26486: CALL_OW 256
26490: PUSH
26491: LD_INT 1000
26493: LESS
26494: IFFALSE 26508
// SetLives ( i , 1000 ) ;
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_INT 1000
26503: PPUSH
26504: CALL_OW 234
26508: GO 26478
26510: POP
26511: POP
// end ;
26512: PPOPN 1
26514: END
// export function hHackInvincible ; var i ; begin
26515: LD_INT 0
26517: PPUSH
26518: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
26519: LD_ADDR_VAR 0 2
26523: PUSH
26524: LD_INT 2
26526: PUSH
26527: LD_INT 21
26529: PUSH
26530: LD_INT 1
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: LD_INT 21
26539: PUSH
26540: LD_INT 2
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: PPUSH
26552: CALL_OW 69
26556: PUSH
26557: FOR_IN
26558: IFFALSE 26619
// if IsSelected ( i ) then
26560: LD_VAR 0 2
26564: PPUSH
26565: CALL_OW 306
26569: IFFALSE 26617
// begin if i in hInvincible then
26571: LD_VAR 0 2
26575: PUSH
26576: LD_EXP 111
26580: IN
26581: IFFALSE 26601
// hInvincible := hInvincible diff i else
26583: LD_ADDR_EXP 111
26587: PUSH
26588: LD_EXP 111
26592: PUSH
26593: LD_VAR 0 2
26597: DIFF
26598: ST_TO_ADDR
26599: GO 26617
// hInvincible := hInvincible union i ;
26601: LD_ADDR_EXP 111
26605: PUSH
26606: LD_EXP 111
26610: PUSH
26611: LD_VAR 0 2
26615: UNION
26616: ST_TO_ADDR
// end ;
26617: GO 26557
26619: POP
26620: POP
// end ;
26621: LD_VAR 0 1
26625: RET
// export function hHackInvisible ; var i , j ; begin
26626: LD_INT 0
26628: PPUSH
26629: PPUSH
26630: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26631: LD_ADDR_VAR 0 2
26635: PUSH
26636: LD_INT 21
26638: PUSH
26639: LD_INT 1
26641: PUSH
26642: EMPTY
26643: LIST
26644: LIST
26645: PPUSH
26646: CALL_OW 69
26650: PUSH
26651: FOR_IN
26652: IFFALSE 26676
// if IsSelected ( i ) then
26654: LD_VAR 0 2
26658: PPUSH
26659: CALL_OW 306
26663: IFFALSE 26674
// ComForceInvisible ( i ) ;
26665: LD_VAR 0 2
26669: PPUSH
26670: CALL_OW 496
26674: GO 26651
26676: POP
26677: POP
// end ;
26678: LD_VAR 0 1
26682: RET
// export function hHackChangeYourSide ; begin
26683: LD_INT 0
26685: PPUSH
// if your_side = 8 then
26686: LD_OWVAR 2
26690: PUSH
26691: LD_INT 8
26693: EQUAL
26694: IFFALSE 26706
// your_side := 0 else
26696: LD_ADDR_OWVAR 2
26700: PUSH
26701: LD_INT 0
26703: ST_TO_ADDR
26704: GO 26720
// your_side := your_side + 1 ;
26706: LD_ADDR_OWVAR 2
26710: PUSH
26711: LD_OWVAR 2
26715: PUSH
26716: LD_INT 1
26718: PLUS
26719: ST_TO_ADDR
// end ;
26720: LD_VAR 0 1
26724: RET
// export function hHackChangeUnitSide ; var i , j ; begin
26725: LD_INT 0
26727: PPUSH
26728: PPUSH
26729: PPUSH
// for i in all_units do
26730: LD_ADDR_VAR 0 2
26734: PUSH
26735: LD_OWVAR 3
26739: PUSH
26740: FOR_IN
26741: IFFALSE 26819
// if IsSelected ( i ) then
26743: LD_VAR 0 2
26747: PPUSH
26748: CALL_OW 306
26752: IFFALSE 26817
// begin j := GetSide ( i ) ;
26754: LD_ADDR_VAR 0 3
26758: PUSH
26759: LD_VAR 0 2
26763: PPUSH
26764: CALL_OW 255
26768: ST_TO_ADDR
// if j = 8 then
26769: LD_VAR 0 3
26773: PUSH
26774: LD_INT 8
26776: EQUAL
26777: IFFALSE 26789
// j := 0 else
26779: LD_ADDR_VAR 0 3
26783: PUSH
26784: LD_INT 0
26786: ST_TO_ADDR
26787: GO 26803
// j := j + 1 ;
26789: LD_ADDR_VAR 0 3
26793: PUSH
26794: LD_VAR 0 3
26798: PUSH
26799: LD_INT 1
26801: PLUS
26802: ST_TO_ADDR
// SetSide ( i , j ) ;
26803: LD_VAR 0 2
26807: PPUSH
26808: LD_VAR 0 3
26812: PPUSH
26813: CALL_OW 235
// end ;
26817: GO 26740
26819: POP
26820: POP
// end ;
26821: LD_VAR 0 1
26825: RET
// export function hHackFog ; begin
26826: LD_INT 0
26828: PPUSH
// FogOff ( true ) ;
26829: LD_INT 1
26831: PPUSH
26832: CALL_OW 344
// end ;
26836: LD_VAR 0 1
26840: RET
// export function hHackApeman ; begin
26841: LD_INT 0
26843: PPUSH
// uc_side := your_side ;
26844: LD_ADDR_OWVAR 20
26848: PUSH
26849: LD_OWVAR 2
26853: ST_TO_ADDR
// uc_nation := 0 ;
26854: LD_ADDR_OWVAR 21
26858: PUSH
26859: LD_INT 0
26861: ST_TO_ADDR
// hc_name :=  ;
26862: LD_ADDR_OWVAR 26
26866: PUSH
26867: LD_STRING 
26869: ST_TO_ADDR
// hc_gallery :=  ;
26870: LD_ADDR_OWVAR 33
26874: PUSH
26875: LD_STRING 
26877: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
26878: LD_ADDR_OWVAR 31
26882: PUSH
26883: LD_INT 0
26885: PUSH
26886: LD_INT 0
26888: PUSH
26889: LD_INT 0
26891: PUSH
26892: LD_INT 0
26894: PUSH
26895: EMPTY
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: ST_TO_ADDR
// hc_class := class_apeman ;
26901: LD_ADDR_OWVAR 28
26905: PUSH
26906: LD_INT 12
26908: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
26909: CALL_OW 44
26913: PPUSH
26914: LD_INT 1
26916: PPUSH
26917: CALL_OW 51
// end ;
26921: LD_VAR 0 1
26925: RET
// export function hHackBoom ; begin
26926: LD_INT 0
26928: PPUSH
// uc_side := your_side ;
26929: LD_ADDR_OWVAR 20
26933: PUSH
26934: LD_OWVAR 2
26938: ST_TO_ADDR
// uc_nation := 1 ;
26939: LD_ADDR_OWVAR 21
26943: PUSH
26944: LD_INT 1
26946: ST_TO_ADDR
// vc_chassis := us_morphling ;
26947: LD_ADDR_OWVAR 37
26951: PUSH
26952: LD_INT 5
26954: ST_TO_ADDR
// vc_engine := engine_siberite ;
26955: LD_ADDR_OWVAR 39
26959: PUSH
26960: LD_INT 3
26962: ST_TO_ADDR
// vc_control := control_computer ;
26963: LD_ADDR_OWVAR 38
26967: PUSH
26968: LD_INT 3
26970: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
26971: LD_ADDR_OWVAR 40
26975: PUSH
26976: LD_INT 8
26978: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
26979: CALL_OW 45
26983: PPUSH
26984: LD_INT 1
26986: PPUSH
26987: CALL_OW 51
// end ;
26991: LD_VAR 0 1
26995: RET
