// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export LakeApes ; export it_is_your ; export your_units ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 13227 0 0
// PrepareAmericans ;
  28: CALL 12789 0 0
// CreateNature ;
  32: CALL 13939 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 29
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 878 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 30
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 31
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 32
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 35
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 33
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 34
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 , 970 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 36
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: LD_INT 970
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: LD_OWVAR 67
 430: ARRAY
 431: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 5
 442: PPUSH
 443: CALL_OW 12
 447: PUSH
 448: LD_OWVAR 67
 452: MUL
 453: ST_TO_ADDR
// amApeAmount = [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 454: LD_ADDR_EXP 38
 458: PUSH
 459: LD_INT 4
 461: PUSH
 462: LD_INT 5
 464: PUSH
 465: LD_INT 6
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_OWVAR 67
 481: ARRAY
 482: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 , 3 ] [ Difficulty ] ;
 483: LD_ADDR_EXP 39
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 512: LD_ADDR_EXP 40
 516: PUSH
 517: LD_INT 78
 519: PUSH
 520: LD_INT 87
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 527: LD_ADDR_EXP 41
 531: PUSH
 532: LD_INT 72
 534: PUSH
 535: LD_INT 115
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 99
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 131
 554: PUSH
 555: LD_INT 81
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 , 300 ] [ Difficulty ] ;
 567: LD_ADDR_EXP 42
 571: PUSH
 572: LD_INT 500
 574: PUSH
 575: LD_INT 400
 577: PUSH
 578: LD_INT 350
 580: PUSH
 581: LD_INT 300
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_OWVAR 67
 594: ARRAY
 595: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 596: LD_ADDR_EXP 43
 600: PUSH
 601: LD_INT 21000
 603: PUSH
 604: LD_INT 16800
 606: PUSH
 607: LD_INT 12600
 609: PUSH
 610: LD_INT 10500
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: LD_OWVAR 67
 623: ARRAY
 624: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$30 ] [ Difficulty ] ;
 625: LD_ADDR_EXP 44
 629: PUSH
 630: LD_INT 6300
 632: PUSH
 633: LD_INT 5250
 635: PUSH
 636: LD_INT 4200
 638: PUSH
 639: LD_INT 3150
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: ST_TO_ADDR
// end ;
 654: LD_VAR 0 1
 658: RET
// every 0 0$1 trigger debugMode do var i ;
 659: LD_EXP 35
 663: IFFALSE 875
 665: GO 667
 667: DISABLE
 668: LD_INT 0
 670: PPUSH
// begin enable ;
 671: ENABLE
// FogOff ( your_side ) ;
 672: LD_OWVAR 2
 676: PPUSH
 677: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 21
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: FOR_IN
 736: IFFALSE 752
// SetLives ( i , 1000 ) ;
 738: LD_VAR 0 1
 742: PPUSH
 743: LD_INT 1000
 745: PPUSH
 746: CALL_OW 234
 750: GO 735
 752: POP
 753: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_OWVAR 2
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 30
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 30
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 274
 840: PPUSH
 841: LD_INT 2
 843: PPUSH
 844: LD_INT 9999
 846: PPUSH
 847: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 274
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 9999
 866: PPUSH
 867: CALL_OW 277
// end ;
 871: GO 808
 873: POP
 874: POP
// end ; end_of_file
 875: PPOPN 1
 877: END
// export function MissionIntro ; begin
 878: LD_INT 0
 880: PPUSH
// InGameOn ;
 881: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 885: LD_EXP 40
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PUSH
 894: LD_INT 8
 896: MINUS
 897: PPUSH
 898: LD_EXP 40
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 8
 909: MINUS
 910: PPUSH
 911: CALL_OW 84
// wait ( 0 0$3 ) ;
 915: LD_INT 105
 917: PPUSH
 918: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 922: LD_EXP 49
 926: PPUSH
 927: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 931: LD_EXP 49
 935: PPUSH
 936: LD_STRING D1-Bur-1
 938: PPUSH
 939: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 943: LD_EXP 49
 947: PPUSH
 948: LD_INT 94
 950: PPUSH
 951: LD_INT 89
 953: PPUSH
 954: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 958: LD_INT 94
 960: PPUSH
 961: LD_INT 89
 963: PPUSH
 964: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 968: LD_EXP 49
 972: PPUSH
 973: LD_STRING D1-Bur-1a
 975: PPUSH
 976: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 980: LD_EXP 49
 984: PPUSH
 985: LD_INT 102
 987: PPUSH
 988: LD_INT 88
 990: PPUSH
 991: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 995: LD_INT 102
 997: PPUSH
 998: LD_INT 88
1000: PPUSH
1001: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
1005: LD_EXP 49
1009: PPUSH
1010: LD_STRING D1-Bur-1b
1012: PPUSH
1013: CALL_OW 88
// InGameOff ;
1017: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1021: LD_STRING M1
1023: PPUSH
1024: CALL_OW 337
// SaveForQuickRestart ;
1028: CALL_OW 22
// introEnd = true ;
1032: LD_ADDR_EXP 3
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// LakeApes = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
1040: LD_ADDR_EXP 26
1044: PUSH
1045: LD_INT 24
1047: PPUSH
1048: LD_INT 22
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 25
1060: PUSH
1061: LD_INT 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 70
1076: ST_TO_ADDR
// end ;
1077: LD_VAR 0 1
1081: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1082: LD_EXP 49
1086: PPUSH
1087: LD_INT 74
1089: PPUSH
1090: LD_INT 88
1092: PPUSH
1093: CALL_OW 297
1097: PUSH
1098: LD_INT 5
1100: LESS
1101: PUSH
1102: LD_EXP 3
1106: AND
1107: IFFALSE 1132
1109: GO 1111
1111: DISABLE
// begin spotWaterfall = true ;
1112: LD_ADDR_EXP 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1120: LD_EXP 49
1124: PPUSH
1125: LD_STRING DWaterfall-Bur-1
1127: PPUSH
1128: CALL_OW 88
// end ;
1132: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1133: LD_EXP 49
1137: PPUSH
1138: LD_INT 130
1140: PPUSH
1141: LD_INT 96
1143: PPUSH
1144: CALL_OW 297
1148: PUSH
1149: LD_INT 5
1151: LESS
1152: PUSH
1153: LD_EXP 3
1157: AND
1158: IFFALSE 1175
1160: GO 1162
1162: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1163: LD_EXP 49
1167: PPUSH
1168: LD_STRING DCorpse-Bur-1
1170: PPUSH
1171: CALL_OW 88
1175: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1176: LD_EXP 4
1180: NOT
1181: IFFALSE 1275
1183: GO 1185
1185: DISABLE
1186: LD_INT 0
1188: PPUSH
// begin enable ;
1189: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1190: LD_ADDR_VAR 0 1
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 25
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: PUSH
1224: FOR_IN
1225: IFFALSE 1273
// if GetDistUnits ( apeman , Burlak ) < 7 then
1227: LD_VAR 0 1
1231: PPUSH
1232: LD_EXP 49
1236: PPUSH
1237: CALL_OW 296
1241: PUSH
1242: LD_INT 7
1244: LESS
1245: IFFALSE 1271
// begin apemansContact = true ;
1247: LD_ADDR_EXP 4
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1255: LD_EXP 49
1259: PPUSH
1260: LD_STRING D2-Bur-1
1262: PPUSH
1263: CALL_OW 88
// exit ;
1267: POP
1268: POP
1269: GO 1275
// end ;
1271: GO 1224
1273: POP
1274: POP
// end ;
1275: PPOPN 1
1277: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1278: LD_EXP 5
1282: NOT
1283: IFFALSE 1399
1285: GO 1287
1287: DISABLE
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
// begin enable ;
1292: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 12
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: PUSH
1327: FOR_IN
1328: IFFALSE 1397
// if Attacks ( apeman ) then
1330: LD_VAR 0 2
1334: PPUSH
1335: CALL_OW 320
1339: IFFALSE 1395
// if GetSide ( Attacks ( apeman ) ) = 3 then
1341: LD_VAR 0 2
1345: PPUSH
1346: CALL_OW 320
1350: PPUSH
1351: CALL_OW 255
1355: PUSH
1356: LD_INT 3
1358: EQUAL
1359: IFFALSE 1395
// begin attackedByApeman = true ;
1361: LD_ADDR_EXP 5
1365: PUSH
1366: LD_INT 1
1368: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1369: LD_ADDR_EXP 8
1373: PUSH
1374: LD_VAR 0 2
1378: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1379: LD_EXP 49
1383: PPUSH
1384: LD_STRING D2-Bur-1a
1386: PPUSH
1387: CALL_OW 88
// exit ;
1391: POP
1392: POP
1393: GO 1399
// end ;
1395: GO 1327
1397: POP
1398: POP
// end ;
1399: PPOPN 2
1401: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1402: LD_EXP 6
1406: NOT
1407: IFFALSE 1504
1409: GO 1411
1411: DISABLE
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
// begin enable ;
1416: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 24
1424: PPUSH
1425: LD_INT 22
1427: PUSH
1428: LD_INT 0
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 25
1437: PUSH
1438: LD_INT 12
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 70
1453: PUSH
1454: FOR_IN
1455: IFFALSE 1502
// if Attacks ( apeman ) then
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 320
1466: IFFALSE 1500
// if GetSide ( Attacks ( apeman ) ) = 3 then
1468: LD_VAR 0 2
1472: PPUSH
1473: CALL_OW 320
1477: PPUSH
1478: CALL_OW 255
1482: PUSH
1483: LD_INT 3
1485: EQUAL
1486: IFFALSE 1500
// begin attackedByApemanNearLake = true ;
1488: LD_ADDR_EXP 6
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// exit ;
1496: POP
1497: POP
1498: GO 1504
// end ;
1500: GO 1454
1502: POP
1503: POP
// end ;
1504: PPOPN 2
1506: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1507: LD_EXP 9
1511: PPUSH
1512: CALL_OW 303
1516: IFFALSE 1550
1518: GO 1520
1520: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1521: LD_ADDR_EXP 10
1525: PUSH
1526: LD_EXP 9
1530: PPUSH
1531: CALL_OW 250
1535: PUSH
1536: LD_EXP 9
1540: PPUSH
1541: CALL_OW 251
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: ST_TO_ADDR
1550: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1551: LD_EXP 9
1555: PPUSH
1556: CALL_OW 303
1560: PUSH
1561: LD_INT 3
1563: PPUSH
1564: LD_EXP 10
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_EXP 10
1577: PUSH
1578: LD_INT 2
1580: ARRAY
1581: PPUSH
1582: CALL_OW 293
1586: AND
1587: IFFALSE 1906
1589: GO 1591
1591: DISABLE
1592: LD_INT 0
1594: PPUSH
// begin wait ( 0 0$2 ) ;
1595: LD_INT 70
1597: PPUSH
1598: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1602: LD_EXP 49
1606: PPUSH
1607: LD_STRING D2a-Bur-1
1609: PPUSH
1610: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1614: LD_INT 22
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 21
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 69
1642: PUSH
1643: LD_INT 1
1645: EQUAL
1646: IFFALSE 1662
// Say ( Burlak , D2a-Bur-2 ) else
1648: LD_EXP 49
1652: PPUSH
1653: LD_STRING D2a-Bur-2
1655: PPUSH
1656: CALL_OW 88
1660: GO 1906
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1662: LD_ADDR_VAR 0 1
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 69
1695: PUSH
1696: LD_EXP 49
1700: PUSH
1701: LD_EXP 57
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: DIFF
1710: PPUSH
1711: LD_EXP 10
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: LD_EXP 10
1724: PUSH
1725: LD_INT 2
1727: ARRAY
1728: PPUSH
1729: CALL_OW 73
1733: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1734: LD_ADDR_EXP 11
1738: PUSH
1739: LD_VAR 0 1
1743: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_EXP 10
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PPUSH
1758: LD_EXP 10
1762: PUSH
1763: LD_INT 2
1765: ARRAY
1766: PPUSH
1767: CALL_OW 111
// case nearUnit of Belkov :
1771: LD_VAR 0 1
1775: PUSH
1776: LD_EXP 54
1780: DOUBLE
1781: EQUAL
1782: IFTRUE 1786
1784: GO 1801
1786: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1787: LD_EXP 54
1791: PPUSH
1792: LD_STRING D2a-Bel-1
1794: PPUSH
1795: CALL_OW 88
1799: GO 1868
1801: LD_EXP 56
1805: DOUBLE
1806: EQUAL
1807: IFTRUE 1811
1809: GO 1826
1811: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1812: LD_EXP 56
1816: PPUSH
1817: LD_STRING D2a-Kir-1
1819: PPUSH
1820: CALL_OW 88
1824: GO 1868
1826: POP
// if GetSex ( nearUnit ) = sex_male then
1827: LD_VAR 0 1
1831: PPUSH
1832: CALL_OW 258
1836: PUSH
1837: LD_INT 1
1839: EQUAL
1840: IFFALSE 1856
// Say ( nearUnit , D2a-RSol1-1 ) else
1842: LD_VAR 0 1
1846: PPUSH
1847: LD_STRING D2a-RSol1-1
1849: PPUSH
1850: CALL_OW 88
1854: GO 1868
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1856: LD_VAR 0 1
1860: PPUSH
1861: LD_STRING D2a-RFSol1-1
1863: PPUSH
1864: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1868: LD_EXP 57
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: PUSH
1882: LD_EXP 57
1886: PPUSH
1887: CALL_OW 302
1891: AND
1892: IFFALSE 1906
// Say ( Gnyevko , D2a-Gny-1 ) ;
1894: LD_EXP 57
1898: PPUSH
1899: LD_STRING D2a-Gny-1
1901: PPUSH
1902: CALL_OW 88
// end ; end ;
1906: PPOPN 1
1908: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1909: LD_EXP 12
1913: NOT
1914: PUSH
1915: LD_EXP 43
1919: PUSH
1920: LD_INT 70
1922: GREATER
1923: AND
1924: IFFALSE 1944
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1930: LD_EXP 57
1934: PPUSH
1935: LD_EXP 42
1939: PPUSH
1940: CALL_OW 234
// end ;
1944: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1945: LD_INT 3
1947: PPUSH
1948: LD_EXP 57
1952: PPUSH
1953: CALL_OW 292
1957: IFFALSE 2569
1959: GO 1961
1961: DISABLE
1962: LD_INT 0
1964: PPUSH
1965: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1966: LD_EXP 57
1970: PPUSH
1971: CALL_OW 87
// DialogueOn ;
1975: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1979: LD_ADDR_VAR 0 1
1983: PUSH
1984: LD_INT 22
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 21
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PPUSH
2008: CALL_OW 69
2012: PPUSH
2013: LD_EXP 57
2017: PPUSH
2018: CALL_OW 74
2022: ST_TO_ADDR
// if nearUnit = Burlak then
2023: LD_VAR 0 1
2027: PUSH
2028: LD_EXP 49
2032: EQUAL
2033: IFFALSE 2395
// begin Say ( Burlak , D3-Bur-1 ) ;
2035: LD_EXP 49
2039: PPUSH
2040: LD_STRING D3-Bur-1
2042: PPUSH
2043: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2047: LD_EXP 57
2051: PPUSH
2052: LD_STRING D3-Gny-1
2054: PPUSH
2055: CALL_OW 88
// if apeWithRadioKiller then
2059: LD_EXP 11
2063: IFFALSE 2103
// begin if apeWithRadioKiller = Burlak then
2065: LD_EXP 11
2069: PUSH
2070: LD_EXP 49
2074: EQUAL
2075: IFFALSE 2091
// Say ( Burlak , D3-Bur-2 ) else
2077: LD_EXP 49
2081: PPUSH
2082: LD_STRING D3-Bur-2
2084: PPUSH
2085: CALL_OW 88
2089: GO 2103
// Say ( Burlak , D3-Bur-2a ) ;
2091: LD_EXP 49
2095: PPUSH
2096: LD_STRING D3-Bur-2a
2098: PPUSH
2099: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2103: LD_EXP 49
2107: PPUSH
2108: LD_STRING D3-Bur-2b
2110: PPUSH
2111: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: EQUAL
2147: PUSH
2148: LD_EXP 14
2152: NOT
2153: AND
2154: IFFALSE 2206
// begin Say ( Burlak , D3-Bur-2c ) ;
2156: LD_EXP 49
2160: PPUSH
2161: LD_STRING D3-Bur-2c
2163: PPUSH
2164: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2168: LD_EXP 57
2172: PPUSH
2173: LD_STRING D3-Gny-2
2175: PPUSH
2176: CALL_OW 88
// DialogueOff ;
2180: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2184: LD_EXP 57
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 235
// gnyevkoSaved = true ;
2196: LD_ADDR_EXP 12
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
// exit ;
2204: GO 2569
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2206: LD_INT 22
2208: PUSH
2209: LD_INT 3
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 21
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PPUSH
2230: CALL_OW 69
2234: PUSH
2235: LD_INT 1
2237: GREATER
2238: PUSH
2239: LD_EXP 14
2243: OR
2244: PUSH
2245: LD_EXP 22
2249: NOT
2250: AND
2251: IFFALSE 2303
// begin Say ( Burlak , D3-Bur-2d ) ;
2253: LD_EXP 49
2257: PPUSH
2258: LD_STRING D3-Bur-2d
2260: PPUSH
2261: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2265: LD_EXP 57
2269: PPUSH
2270: LD_STRING D3-Gny-2
2272: PPUSH
2273: CALL_OW 88
// DialogueOff ;
2277: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2281: LD_EXP 57
2285: PPUSH
2286: LD_INT 3
2288: PPUSH
2289: CALL_OW 235
// gnyevkoSaved = true ;
2293: LD_ADDR_EXP 12
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// exit ;
2301: GO 2569
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2303: LD_INT 22
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 21
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: GREATER
2335: PUSH
2336: LD_EXP 22
2340: AND
2341: IFFALSE 2393
// begin Say ( Burlak , D3-Bur-2e ) ;
2343: LD_EXP 49
2347: PPUSH
2348: LD_STRING D3-Bur-2e
2350: PPUSH
2351: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2355: LD_EXP 57
2359: PPUSH
2360: LD_STRING D3-Gny-2
2362: PPUSH
2363: CALL_OW 88
// DialogueOff ;
2367: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2371: LD_EXP 57
2375: PPUSH
2376: LD_INT 3
2378: PPUSH
2379: CALL_OW 235
// gnyevkoSaved = true ;
2383: LD_ADDR_EXP 12
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// exit ;
2391: GO 2569
// end ; end else
2393: GO 2569
// begin if GetSex ( nearUnit ) = sex_male then
2395: LD_VAR 0 1
2399: PPUSH
2400: CALL_OW 258
2404: PUSH
2405: LD_INT 1
2407: EQUAL
2408: IFFALSE 2424
// Say ( nearUnit , D3-RSol1-1 ) else
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_STRING D3-RSol1-1
2417: PPUSH
2418: CALL_OW 88
2422: GO 2436
// Say ( nearUnit , D3-RFSol1-1 ) ;
2424: LD_VAR 0 1
2428: PPUSH
2429: LD_STRING D3-RFSol1-1
2431: PPUSH
2432: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2436: LD_EXP 57
2440: PPUSH
2441: LD_STRING D3-Gny-1
2443: PPUSH
2444: CALL_OW 88
// if apeWithRadioKiller then
2448: LD_EXP 11
2452: IFFALSE 2492
// begin if apeWithRadioKiller = Burlak then
2454: LD_EXP 11
2458: PUSH
2459: LD_EXP 49
2463: EQUAL
2464: IFFALSE 2480
// Say ( Burlak , D3-Bur-2 ) else
2466: LD_EXP 49
2470: PPUSH
2471: LD_STRING D3-Bur-2
2473: PPUSH
2474: CALL_OW 88
2478: GO 2492
// Say ( Burlak , D3-Bur-2a ) ;
2480: LD_EXP 49
2484: PPUSH
2485: LD_STRING D3-Bur-2a
2487: PPUSH
2488: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 258
2501: PUSH
2502: LD_INT 1
2504: EQUAL
2505: IFFALSE 2521
// Say ( nearUnit , D3-RSol1-2 ) else
2507: LD_VAR 0 1
2511: PPUSH
2512: LD_STRING D3-RSol1-2
2514: PPUSH
2515: CALL_OW 88
2519: GO 2533
// Say ( nearUnit , D3-RFSol1-2 ) ;
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_STRING D3-RFSol1-2
2528: PPUSH
2529: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2533: LD_EXP 57
2537: PPUSH
2538: LD_STRING D3-Gny-2a
2540: PPUSH
2541: CALL_OW 88
// DialogueOff ;
2545: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2549: LD_EXP 57
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL_OW 235
// gnyevkoSaved = true ;
2561: LD_ADDR_EXP 12
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// end ; end ;
2569: PPOPN 2
2571: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2572: LD_EXP 12
2576: NOT
2577: PUSH
2578: LD_EXP 21
2582: NOT
2583: OR
2584: IFFALSE 2779
2586: GO 2588
2588: DISABLE
2589: LD_INT 0
2591: PPUSH
// begin enable ;
2592: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2593: LD_EXP 12
2597: NOT
2598: PUSH
2599: LD_EXP 43
2603: PUSH
2604: LD_INT 70
2606: GREATER
2607: AND
2608: IFFALSE 2686
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2610: LD_ADDR_VAR 0 1
2614: PUSH
2615: LD_INT 22
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 25
2627: PUSH
2628: LD_INT 12
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2684
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_EXP 57
2656: PPUSH
2657: CALL_OW 250
2661: PPUSH
2662: LD_EXP 57
2666: PPUSH
2667: CALL_OW 251
2671: PPUSH
2672: LD_INT 10
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL 9015 0 5
2682: GO 2644
2684: POP
2685: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2686: LD_EXP 21
2690: NOT
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_INT 70
2699: GREATER
2700: AND
2701: IFFALSE 2779
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2703: LD_ADDR_VAR 0 1
2707: PUSH
2708: LD_INT 22
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 25
2720: PUSH
2721: LD_INT 12
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2777
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2740: LD_VAR 0 1
2744: PPUSH
2745: LD_EXP 56
2749: PPUSH
2750: CALL_OW 250
2754: PPUSH
2755: LD_EXP 56
2759: PPUSH
2760: CALL_OW 251
2764: PPUSH
2765: LD_INT 10
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL 9015 0 5
2775: GO 2737
2777: POP
2778: POP
// end ;
2779: PPOPN 1
2781: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2782: LD_EXP 12
2786: NOT
2787: PUSH
2788: LD_EXP 21
2792: NOT
2793: OR
2794: IFFALSE 2905
2796: GO 2798
2798: DISABLE
// begin enable ;
2799: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2800: LD_EXP 12
2804: NOT
2805: PUSH
2806: LD_EXP 43
2810: PUSH
2811: LD_INT 0
2813: GREATER
2814: AND
2815: IFFALSE 2831
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2817: LD_ADDR_EXP 43
2821: PUSH
2822: LD_EXP 43
2826: PUSH
2827: LD_INT 35
2829: MINUS
2830: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2831: LD_EXP 56
2835: PPUSH
2836: CALL_OW 305
2840: PUSH
2841: LD_EXP 21
2845: NOT
2846: AND
2847: PUSH
2848: LD_EXP 44
2852: PUSH
2853: LD_INT 0
2855: GREATER
2856: AND
2857: IFFALSE 2873
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2859: LD_ADDR_EXP 44
2863: PUSH
2864: LD_EXP 44
2868: PUSH
2869: LD_INT 35
2871: MINUS
2872: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2873: LD_EXP 56
2877: PPUSH
2878: CALL_OW 305
2882: PUSH
2883: LD_EXP 21
2887: NOT
2888: AND
2889: IFFALSE 2905
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2891: LD_ADDR_EXP 29
2895: PUSH
2896: LD_EXP 29
2900: PUSH
2901: LD_INT 35
2903: PLUS
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2906: LD_INT 3
2908: PPUSH
2909: LD_EXP 50
2913: PPUSH
2914: CALL_OW 292
2918: PUSH
2919: LD_INT 6
2921: PPUSH
2922: LD_EXP 49
2926: PPUSH
2927: CALL_OW 292
2931: OR
2932: PUSH
2933: LD_EXP 57
2937: PPUSH
2938: CALL_OW 255
2942: PUSH
2943: LD_INT 3
2945: EQUAL
2946: PUSH
2947: LD_INT 6
2949: PPUSH
2950: LD_EXP 57
2954: PPUSH
2955: CALL_OW 292
2959: AND
2960: OR
2961: PUSH
2962: LD_EXP 14
2966: NOT
2967: AND
2968: IFFALSE 3821
2970: GO 2972
2972: DISABLE
// begin enable ;
2973: ENABLE
// InGameOn ;
2974: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2978: LD_EXP 50
2982: PPUSH
2983: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2987: LD_EXP 57
2991: PPUSH
2992: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2996: LD_EXP 49
3000: PUSH
3001: LD_EXP 57
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 200
// DialogueOn ;
3014: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3018: LD_EXP 13
3022: IFFALSE 3286
// begin meetPokryshkin = true ;
3024: LD_ADDR_EXP 14
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3032: LD_INT 6
3034: PPUSH
3035: LD_INT 3
3037: PPUSH
3038: CALL_OW 343
// DialogueOff ;
3042: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3046: LD_EXP 49
3050: PPUSH
3051: LD_EXP 50
3055: PPUSH
3056: CALL_OW 250
3060: PPUSH
3061: LD_EXP 50
3065: PPUSH
3066: CALL_OW 251
3070: PPUSH
3071: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3075: LD_EXP 49
3079: PPUSH
3080: LD_EXP 50
3084: PPUSH
3085: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3089: LD_EXP 50
3093: PPUSH
3094: LD_EXP 49
3098: PPUSH
3099: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3103: LD_EXP 57
3107: PPUSH
3108: LD_STRING D4-Gny-3
3110: PPUSH
3111: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3115: LD_EXP 49
3119: PPUSH
3120: LD_STRING D4-Bur-3
3122: PPUSH
3123: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3127: LD_EXP 50
3131: PPUSH
3132: LD_STRING D4-Pok-4
3134: PPUSH
3135: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3139: LD_EXP 45
3143: PPUSH
3144: LD_INT 18
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 49
// wait ( 0 0$2 ) ;
3154: LD_INT 70
3156: PPUSH
3157: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3161: LD_EXP 49
3165: PPUSH
3166: LD_STRING D4-Bur-4
3168: PPUSH
3169: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3173: LD_EXP 50
3177: PPUSH
3178: LD_STRING D4-Pok-5
3180: PPUSH
3181: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3185: LD_EXP 45
3189: PPUSH
3190: LD_STRING D4-Sol1-5
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3209: LD_EXP 50
3213: PPUSH
3214: LD_STRING D4-Pok-6
3216: PPUSH
3217: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3221: LD_EXP 50
3225: PPUSH
3226: LD_STRING D4-Pok-6a
3228: PPUSH
3229: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3233: LD_EXP 49
3237: PPUSH
3238: LD_STRING D4-Bur-6
3240: PPUSH
3241: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3245: LD_EXP 50
3249: PPUSH
3250: LD_STRING D4-Pok-7
3252: PPUSH
3253: CALL_OW 88
// DialogueOff ;
3257: CALL_OW 7
// InGameOff ;
3261: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3265: LD_STRING M2
3267: PPUSH
3268: CALL_OW 337
// goToHill = true ;
3272: LD_ADDR_EXP 15
3276: PUSH
3277: LD_INT 1
3279: ST_TO_ADDR
// MoveToHill ;
3280: CALL 10895 0 0
// exit ;
3284: GO 3821
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3286: LD_EXP 49
3290: PUSH
3291: LD_EXP 57
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3304: LD_EXP 50
3308: PPUSH
3309: LD_STRING D4-Pok-1
3311: PPUSH
3312: CALL_OW 88
// if GetDistUnits ( Gnyevko , Pokryshkin ) <= 15 and GetDistUnits ( Burlak , Pokryshkin ) > 20 then
3316: LD_EXP 57
3320: PPUSH
3321: LD_EXP 50
3325: PPUSH
3326: CALL_OW 296
3330: PUSH
3331: LD_INT 15
3333: LESSEQUAL
3334: PUSH
3335: LD_EXP 49
3339: PPUSH
3340: LD_EXP 50
3344: PPUSH
3345: CALL_OW 296
3349: PUSH
3350: LD_INT 20
3352: GREATER
3353: AND
3354: IFFALSE 3464
// begin ComWalk ( Gnyevko ) ;
3356: LD_EXP 57
3360: PPUSH
3361: CALL_OW 138
// Say ( Gnyevko , D4-Gny-1 ) ;
3365: LD_EXP 57
3369: PPUSH
3370: LD_STRING D4-Gny-1
3372: PPUSH
3373: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-2 ) ;
3377: LD_EXP 50
3381: PPUSH
3382: LD_STRING D4-Pok-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3389: LD_EXP 57
3393: PPUSH
3394: LD_STRING D4-Gny-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3401: LD_EXP 50
3405: PPUSH
3406: LD_STRING D4-Pok-3
3408: PPUSH
3409: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3413: LD_ADDR_EXP 13
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3421: LD_EXP 57
3425: PPUSH
3426: LD_INT 6
3428: PPUSH
3429: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3433: LD_EXP 57
3437: PPUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_EXP 50
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: CALL_OW 171
// end else
3462: GO 3813
// begin meetPokryshkin = true ;
3464: LD_ADDR_EXP 14
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3472: LD_INT 6
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: CALL_OW 343
// DialogueOff ;
3482: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3486: LD_EXP 57
3490: PPUSH
3491: CALL_OW 255
3495: PUSH
3496: LD_INT 3
3498: EQUAL
3499: PUSH
3500: LD_EXP 57
3504: PPUSH
3505: CALL_OW 302
3509: AND
3510: IFFALSE 3587
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3512: LD_EXP 49
3516: PUSH
3517: LD_EXP 57
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PPUSH
3526: LD_EXP 50
3530: PPUSH
3531: CALL_OW 250
3535: PPUSH
3536: LD_EXP 50
3540: PPUSH
3541: CALL_OW 251
3545: PPUSH
3546: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3550: LD_EXP 49
3554: PUSH
3555: LD_EXP 57
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: LD_EXP 50
3568: PPUSH
3569: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3573: LD_EXP 57
3577: PPUSH
3578: LD_INT 6
3580: PPUSH
3581: CALL_OW 235
// end else
3585: GO 3630
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3587: LD_EXP 49
3591: PPUSH
3592: LD_EXP 50
3596: PPUSH
3597: CALL_OW 250
3601: PPUSH
3602: LD_EXP 50
3606: PPUSH
3607: CALL_OW 251
3611: PPUSH
3612: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3616: LD_EXP 49
3620: PPUSH
3621: LD_EXP 50
3625: PPUSH
3626: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3630: LD_EXP 50
3634: PPUSH
3635: LD_EXP 49
3639: PPUSH
3640: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3644: LD_EXP 49
3648: PPUSH
3649: LD_STRING D4-Bur-3
3651: PPUSH
3652: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3656: LD_EXP 50
3660: PPUSH
3661: LD_STRING D4-Pok-4
3663: PPUSH
3664: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3668: LD_EXP 45
3672: PPUSH
3673: LD_INT 18
3675: PPUSH
3676: LD_INT 1
3678: PPUSH
3679: CALL_OW 49
// wait ( 0 0$2 ) ;
3683: LD_INT 70
3685: PPUSH
3686: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3690: LD_EXP 49
3694: PPUSH
3695: LD_STRING D4-Bur-4
3697: PPUSH
3698: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3702: LD_EXP 50
3706: PPUSH
3707: LD_STRING D4-Pok-5
3709: PPUSH
3710: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3714: LD_EXP 45
3718: PPUSH
3719: LD_STRING D4-Sol1-5
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3738: LD_EXP 50
3742: PPUSH
3743: LD_STRING D4-Pok-6
3745: PPUSH
3746: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3750: LD_EXP 50
3754: PPUSH
3755: LD_STRING D4-Pok-6a
3757: PPUSH
3758: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3762: LD_EXP 49
3766: PPUSH
3767: LD_STRING D4-Bur-6
3769: PPUSH
3770: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3774: LD_EXP 50
3778: PPUSH
3779: LD_STRING D4-Pok-7
3781: PPUSH
3782: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3786: LD_STRING M2
3788: PPUSH
3789: CALL_OW 337
// goToHill = true ;
3793: LD_ADDR_EXP 15
3797: PUSH
3798: LD_INT 1
3800: ST_TO_ADDR
// DialogueOff ;
3801: CALL_OW 7
// InGameOff ;
3805: CALL_OW 9
// MoveToHill ;
3809: CALL 10895 0 0
// end ; DialogueOff ;
3813: CALL_OW 7
// InGameOff ;
3817: CALL_OW 9
// end ;
3821: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3822: LD_EXP 49
3826: PPUSH
3827: LD_EXP 50
3831: PPUSH
3832: CALL_OW 296
3836: PUSH
3837: LD_INT 10
3839: GREATER
3840: PUSH
3841: LD_EXP 15
3845: AND
3846: PUSH
3847: LD_EXP 18
3851: NOT
3852: AND
3853: IFFALSE 4054
3855: GO 3857
3857: DISABLE
3858: LD_INT 0
3860: PPUSH
// begin enable ;
3861: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3862: LD_ADDR_VAR 0 1
3866: PUSH
3867: LD_EXP 50
3871: PUSH
3872: LD_EXP 51
3876: PUSH
3877: LD_EXP 52
3881: PUSH
3882: LD_EXP 53
3886: PUSH
3887: LD_EXP 54
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3899: LD_EXP 57
3903: PPUSH
3904: CALL_OW 255
3908: PUSH
3909: LD_INT 6
3911: EQUAL
3912: PUSH
3913: LD_EXP 12
3917: AND
3918: IFFALSE 3936
// ruSolds = ruSolds ^ Gnyevko ;
3920: LD_ADDR_VAR 0 1
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_EXP 57
3934: ADD
3935: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3945: LD_EXP 49
3949: PPUSH
3950: CALL_OW 87
// DialogueOn ;
3954: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3958: LD_EXP 50
3962: PPUSH
3963: LD_STRING DSplit-Pok-1
3965: PPUSH
3966: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3970: LD_EXP 49
3974: PPUSH
3975: LD_STRING DSplit-Bur-1
3977: PPUSH
3978: CALL_OW 88
// DialogueOff ;
3982: CALL_OW 7
// InGameOn ;
3986: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3990: LD_EXP 49
3994: PPUSH
3995: LD_EXP 50
3999: PPUSH
4000: CALL_OW 250
4004: PPUSH
4005: LD_EXP 50
4009: PPUSH
4010: CALL_OW 251
4014: PPUSH
4015: CALL_OW 111
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4026: LD_EXP 49
4030: PPUSH
4031: LD_EXP 50
4035: PPUSH
4036: CALL_OW 296
4040: PUSH
4041: LD_INT 6
4043: LESS
4044: IFFALSE 3990
// InGameOff ;
4046: CALL_OW 9
// MoveToHill ;
4050: CALL 10895 0 0
// end ;
4054: PPOPN 1
4056: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
// traitor = true ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// DialogueOn ;
4069: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4073: LD_EXP 50
4077: PPUSH
4078: LD_STRING DAttack-Pok-1
4080: PPUSH
4081: CALL_OW 88
// DialogueOff ;
4085: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 6
4094: PPUSH
4095: LD_INT 2
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4105: LD_INT 22
4107: PUSH
4108: LD_INT 6
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PPUSH
4134: LD_EXP 49
4138: PPUSH
4139: CALL_OW 115
// end ;
4143: LD_VAR 0 1
4147: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4148: LD_EXP 50
4152: PPUSH
4153: LD_INT 65
4155: PPUSH
4156: LD_INT 59
4158: PPUSH
4159: CALL_OW 297
4163: PUSH
4164: LD_INT 4
4166: LESS
4167: PUSH
4168: LD_EXP 18
4172: NOT
4173: AND
4174: IFFALSE 4371
4176: GO 4178
4178: DISABLE
// begin InGameOn ;
4179: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4183: LD_INT 55
4185: PPUSH
4186: LD_INT 50
4188: PPUSH
4189: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4193: LD_EXP 49
4197: PPUSH
4198: LD_INT 66
4200: PPUSH
4201: LD_INT 57
4203: PPUSH
4204: CALL_OW 111
// AddComHold ( Burlak ) ;
4208: LD_EXP 49
4212: PPUSH
4213: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4217: LD_EXP 45
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: LD_INT 55
4227: PPUSH
4228: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4232: LD_INT 35
4234: PPUSH
4235: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_EXP 50
4246: PPUSH
4247: CALL_OW 292
4251: IFFALSE 4232
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4253: LD_EXP 45
4257: PUSH
4258: LD_EXP 50
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 87
// ComStop ( Charles ) ;
4271: LD_EXP 45
4275: PPUSH
4276: CALL_OW 141
// AddComHold ( Charles ) ;
4280: LD_EXP 45
4284: PPUSH
4285: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4289: LD_EXP 45
4293: PPUSH
4294: LD_EXP 50
4298: PPUSH
4299: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4303: LD_EXP 45
4307: PPUSH
4308: LD_STRING D5-Sol1-1
4310: PPUSH
4311: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4315: LD_EXP 50
4319: PPUSH
4320: LD_STRING D5-Pok-1
4322: PPUSH
4323: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4327: LD_INT 1
4329: PPUSH
4330: LD_INT 6
4332: PPUSH
4333: LD_INT 2
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4343: LD_INT 1
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: LD_INT 2
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4359: LD_EXP 45
4363: PPUSH
4364: LD_STRING D5-Sol1-2
4366: PPUSH
4367: CALL_OW 88
// end ;
4371: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4372: LD_EXP 45
4376: PPUSH
4377: CALL_OW 301
4381: PUSH
4382: LD_EXP 15
4386: AND
4387: IFFALSE 4978
4389: GO 4391
4391: DISABLE
4392: LD_INT 0
4394: PPUSH
// begin InGameOn ;
4395: CALL_OW 8
// goToHill = false ;
4399: LD_ADDR_EXP 15
4403: PUSH
4404: LD_INT 0
4406: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 6
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PPUSH
4436: CALL_OW 141
// wait ( 0 0$1 ) ;
4440: LD_INT 35
4442: PPUSH
4443: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4447: LD_INT 22
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 21
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PPUSH
4476: CALL_OW 138
// wait ( 0 0$1 ) ;
4480: LD_INT 35
4482: PPUSH
4483: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4487: LD_INT 55
4489: PPUSH
4490: LD_INT 50
4492: PPUSH
4493: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4497: LD_EXP 49
4501: PPUSH
4502: LD_INT 56
4504: PPUSH
4505: LD_INT 56
4507: PPUSH
4508: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4512: LD_INT 22
4514: PUSH
4515: LD_INT 6
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 1
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_INT 56
4543: PPUSH
4544: LD_INT 56
4546: PPUSH
4547: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4551: LD_EXP 49
4555: PPUSH
4556: LD_STRING D5-Bur-2
4558: PPUSH
4559: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4563: LD_EXP 50
4567: PPUSH
4568: LD_STRING D5-Pok-2
4570: PPUSH
4571: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4575: LD_EXP 54
4579: PPUSH
4580: LD_STRING D5-Bel-2
4582: PPUSH
4583: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4587: LD_EXP 50
4591: PPUSH
4592: LD_STRING D5-Pok-3
4594: PPUSH
4595: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4599: LD_EXP 57
4603: PPUSH
4604: CALL_OW 255
4608: PUSH
4609: LD_INT 6
4611: EQUAL
4612: IFFALSE 4626
// Say ( Gnyevko , D5-Gny-3 ) ;
4614: LD_EXP 57
4618: PPUSH
4619: LD_STRING D5-Gny-3
4621: PPUSH
4622: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4626: LD_EXP 49
4630: PPUSH
4631: LD_STRING D5-Bur-3
4633: PPUSH
4634: CALL_OW 88
// interface_hidden = true ;
4638: LD_ADDR_OWVAR 54
4642: PUSH
4643: LD_INT 1
4645: ST_TO_ADDR
// IngameOff ;
4646: CALL_OW 9
// wait ( 0 0$2 ) ;
4650: LD_INT 70
4652: PPUSH
4653: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4657: LD_EXP 49
4661: PPUSH
4662: LD_INT 85
4664: PPUSH
4665: LD_INT 64
4667: PPUSH
4668: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4672: LD_INT 22
4674: PUSH
4675: LD_INT 6
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: PPUSH
4701: LD_INT 85
4703: PPUSH
4704: LD_INT 64
4706: PPUSH
4707: CALL_OW 111
// interface_hidden = false ;
4711: LD_ADDR_OWVAR 54
4715: PUSH
4716: LD_INT 0
4718: ST_TO_ADDR
// InGameOn ;
4719: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4723: LD_EXP 49
4727: PPUSH
4728: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4732: LD_EXP 50
4736: PPUSH
4737: LD_STRING D6-Pok-1
4739: PPUSH
4740: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4744: LD_EXP 49
4748: PPUSH
4749: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4753: LD_EXP 49
4757: PPUSH
4758: LD_STRING D6-Bur-1
4760: PPUSH
4761: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4765: LD_EXP 49
4769: PPUSH
4770: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4774: LD_EXP 50
4778: PPUSH
4779: LD_STRING D6-Pok-2
4781: PPUSH
4782: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4786: LD_EXP 49
4790: PPUSH
4791: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4795: LD_EXP 54
4799: PPUSH
4800: LD_STRING D6-Bel-2
4802: PPUSH
4803: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4807: LD_EXP 49
4811: PPUSH
4812: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4816: LD_EXP 49
4820: PPUSH
4821: LD_STRING D6-Bur-2
4823: PPUSH
4824: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4828: LD_EXP 49
4832: PPUSH
4833: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4837: LD_EXP 50
4841: PPUSH
4842: LD_STRING D6-Pok-3
4844: PPUSH
4845: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4849: LD_EXP 49
4853: PPUSH
4854: CALL_OW 87
// SayRadioNoFace ( Kurin , D6-Kur-3 ) ;
4858: LD_EXP 58
4862: PPUSH
4863: LD_STRING D6-Kur-3
4865: PPUSH
4866: CALL_OW 586
// CenterNowOnUnits ( Burlak ) ;
4870: LD_EXP 49
4874: PPUSH
4875: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING D6-Pok-4
4886: PPUSH
4887: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4891: LD_EXP 49
4895: PPUSH
4896: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4900: LD_EXP 54
4904: PPUSH
4905: LD_STRING D6-Bel-4
4907: PPUSH
4908: CALL_OW 88
// InGameOff ;
4912: CALL_OW 9
// interface_hidden = false ;
4916: LD_ADDR_OWVAR 54
4920: PUSH
4921: LD_INT 0
4923: ST_TO_ADDR
// ComMoveToArea ( Pokryshkin , PokryszkinAttack ) ;
4924: LD_EXP 50
4928: PPUSH
4929: LD_INT 27
4931: PPUSH
4932: CALL_OW 113
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , PokryszkinAttack ) ;
4936: LD_INT 22
4938: PUSH
4939: LD_INT 6
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PPUSH
4960: CALL_OW 69
4964: PUSH
4965: LD_EXP 50
4969: DIFF
4970: PPUSH
4971: LD_INT 27
4973: PPUSH
4974: CALL_OW 113
// end ;
4978: PPOPN 1
4980: END
// every 0 0$1 trigger IsInArea ( Pokryshkin , PokryszkinAttack ) do
4981: LD_EXP 50
4985: PPUSH
4986: LD_INT 27
4988: PPUSH
4989: CALL_OW 308
4993: IFFALSE 5076
4995: GO 4997
4997: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4998: LD_EXP 50
5002: PPUSH
5003: LD_STRING D7-Pok-1
5005: PPUSH
5006: CALL_OW 88
// AddComAttackUnit ( Pokryshkin , am_bun ) ;
5010: LD_EXP 50
5014: PPUSH
5015: LD_INT 23
5017: PPUSH
5018: CALL_OW 175
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , am_bun ) ;
5022: LD_INT 22
5024: PUSH
5025: LD_INT 6
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 21
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: CALL_OW 69
5050: PUSH
5051: LD_EXP 50
5055: DIFF
5056: PPUSH
5057: LD_INT 23
5059: PPUSH
5060: CALL_OW 175
// DoNotAttack ( 1 , Gnyevko ) ;
5064: LD_INT 1
5066: PPUSH
5067: LD_EXP 57
5071: PPUSH
5072: CALL_OW 471
// end ;
5076: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5077: LD_INT 1
5079: PPUSH
5080: LD_EXP 50
5084: PPUSH
5085: CALL_OW 292
5089: PUSH
5090: LD_EXP 45
5094: PPUSH
5095: CALL_OW 301
5099: AND
5100: IFFALSE 5119
5102: GO 5104
5104: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5105: LD_EXP 46
5109: PPUSH
5110: LD_EXP 50
5114: PPUSH
5115: CALL_OW 115
5119: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 23
5125: PPUSH
5126: CALL_OW 292
5130: IFFALSE 5147
5132: GO 5134
5134: DISABLE
// begin Say ( Johanna , D7-FSol1-1 ) ;
5135: LD_EXP 46
5139: PPUSH
5140: LD_STRING D7-FSol1-1
5142: PPUSH
5143: CALL_OW 88
// end ;
5147: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5148: LD_EXP 50
5152: PPUSH
5153: CALL_OW 303
5157: IFFALSE 5689
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 6
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 21
5184: PUSH
5185: LD_INT 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 50
5194: PUSH
5195: EMPTY
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 69
5207: PUSH
5208: LD_EXP 54
5212: DIFF
5213: ST_TO_ADDR
// DialogueOn ;
5214: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5218: LD_EXP 54
5222: PPUSH
5223: LD_STRING D7a-Bel-1
5225: PPUSH
5226: CALL_OW 88
// DialogueOff ;
5230: CALL_OW 7
// for i := 1 to ruSolds do
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5308
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5252: LD_VAR 0 3
5256: PUSH
5257: LD_VAR 0 1
5261: ARRAY
5262: PPUSH
5263: LD_INT 87
5265: PUSH
5266: LD_VAR 0 1
5270: PLUS
5271: PPUSH
5272: LD_INT 63
5274: PUSH
5275: LD_VAR 0 1
5279: PLUS
5280: PPUSH
5281: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5285: LD_VAR 0 3
5289: PUSH
5290: LD_VAR 0 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 89
5298: PPUSH
5299: LD_INT 67
5301: PPUSH
5302: CALL_OW 178
// end ;
5306: GO 5249
5308: POP
5309: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5310: LD_EXP 54
5314: PPUSH
5315: LD_INT 89
5317: PPUSH
5318: LD_INT 67
5320: PPUSH
5321: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5325: LD_EXP 54
5329: PPUSH
5330: LD_INT 88
5332: PPUSH
5333: LD_INT 66
5335: PPUSH
5336: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5340: LD_EXP 51
5344: PPUSH
5345: LD_STRING D7a-RSol1-1
5347: PPUSH
5348: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5352: LD_EXP 46
5356: PPUSH
5357: LD_STRING D7a-FSol1-1
5359: PPUSH
5360: CALL_OW 88
// wait ( 0 0$12 ) ;
5364: LD_INT 420
5366: PPUSH
5367: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5371: LD_EXP 54
5375: PPUSH
5376: LD_STRING D7b-Bel-1
5378: PPUSH
5379: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5383: LD_EXP 52
5387: PPUSH
5388: LD_STRING D7b-FSol1-1
5390: PPUSH
5391: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5395: LD_EXP 54
5399: PPUSH
5400: LD_STRING D7b-Bel-2
5402: PPUSH
5403: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5407: LD_EXP 51
5411: PPUSH
5412: LD_STRING D7b-RSol1-2
5414: PPUSH
5415: CALL_OW 88
// for unit in ruSolds do
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 3
5428: PUSH
5429: FOR_IN
5430: IFFALSE 5663
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5432: LD_EXP 49
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 296
5446: PUSH
5447: LD_INT 7
5449: LESS
5450: IFFALSE 5661
// begin InGameOn ;
5452: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5456: LD_EXP 54
5460: PUSH
5461: LD_EXP 51
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5474: LD_EXP 49
5478: PPUSH
5479: LD_INT 88
5481: PPUSH
5482: LD_INT 66
5484: PPUSH
5485: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5489: LD_EXP 54
5493: PPUSH
5494: LD_EXP 49
5498: PPUSH
5499: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5503: LD_EXP 49
5507: PPUSH
5508: LD_INT 90
5510: PPUSH
5511: LD_INT 66
5513: PPUSH
5514: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5518: LD_EXP 49
5522: PPUSH
5523: LD_STRING D7b-Bur-3
5525: PPUSH
5526: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5530: LD_EXP 54
5534: PPUSH
5535: LD_STRING D7b-Bel-4
5537: PPUSH
5538: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5542: LD_EXP 49
5546: PPUSH
5547: LD_STRING D7b-Bur-4
5549: PPUSH
5550: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5554: LD_EXP 54
5558: PPUSH
5559: LD_STRING D7b-Bel-5
5561: PPUSH
5562: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5566: LD_EXP 52
5570: PPUSH
5571: LD_STRING D7b-FSol1-5
5573: PPUSH
5574: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5578: LD_EXP 54
5582: PPUSH
5583: LD_STRING D7b-Bel-6
5585: PPUSH
5586: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING D7b-Bur-6
5597: PPUSH
5598: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5602: LD_EXP 51
5606: PPUSH
5607: LD_STRING D7b-RSol1-6
5609: PPUSH
5610: CALL_OW 88
// InGameOff ;
5614: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5630: LD_EXP 54
5634: PPUSH
5635: LD_INT 3
5637: PPUSH
5638: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5642: LD_STRING M3
5644: PPUSH
5645: CALL_OW 337
// secondAttack = true ;
5649: LD_ADDR_EXP 17
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// exit ;
5657: POP
5658: POP
5659: GO 5689
// end ;
5661: GO 5429
5663: POP
5664: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5665: LD_EXP 54
5669: PPUSH
5670: LD_STRING D7b-Bel-3
5672: PPUSH
5673: CALL_OW 88
// InGameOff ;
5677: CALL_OW 9
// belkovWaitForGorky = true ;
5681: LD_ADDR_EXP 16
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// end ;
5689: PPOPN 3
5691: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5692: LD_EXP 16
5696: PUSH
5697: LD_EXP 18
5701: NOT
5702: AND
5703: IFFALSE 6013
5705: GO 5707
5707: DISABLE
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
// begin enable ;
5712: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 21
5730: PUSH
5731: LD_INT 1
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PPUSH
5742: CALL_OW 69
5746: ST_TO_ADDR
// for unit in ruSolds do
5747: LD_ADDR_VAR 0 1
5751: PUSH
5752: LD_VAR 0 2
5756: PUSH
5757: FOR_IN
5758: IFFALSE 6011
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5760: LD_EXP 49
5764: PPUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 296
5774: PUSH
5775: LD_INT 7
5777: LESS
5778: IFFALSE 6009
// begin belkovWaitForGorky = false ;
5780: LD_ADDR_EXP 16
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// InGameOn ;
5788: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5792: LD_EXP 54
5796: PUSH
5797: LD_EXP 51
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5810: LD_EXP 49
5814: PPUSH
5815: LD_INT 88
5817: PPUSH
5818: LD_INT 66
5820: PPUSH
5821: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5825: LD_EXP 54
5829: PPUSH
5830: LD_EXP 49
5834: PPUSH
5835: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5839: LD_EXP 49
5843: PPUSH
5844: LD_INT 90
5846: PPUSH
5847: LD_INT 66
5849: PPUSH
5850: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5854: LD_EXP 54
5858: PPUSH
5859: LD_STRING D7b-Bel-3a
5861: PPUSH
5862: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5866: LD_EXP 49
5870: PPUSH
5871: LD_STRING D7b-Bur-3
5873: PPUSH
5874: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5878: LD_EXP 54
5882: PPUSH
5883: LD_STRING D7b-Bel-4
5885: PPUSH
5886: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_STRING D7b-Bur-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5902: LD_EXP 54
5906: PPUSH
5907: LD_STRING D7b-Bel-5
5909: PPUSH
5910: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5914: LD_EXP 52
5918: PPUSH
5919: LD_STRING D7b-FSol1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5926: LD_EXP 54
5930: PPUSH
5931: LD_STRING D7b-Bel-6
5933: PPUSH
5934: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5938: LD_EXP 49
5942: PPUSH
5943: LD_STRING D7b-Bur-6
5945: PPUSH
5946: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5950: LD_EXP 51
5954: PPUSH
5955: LD_STRING D7a-RSol1-6
5957: PPUSH
5958: CALL_OW 88
// InGameOff ;
5962: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5978: LD_EXP 54
5982: PPUSH
5983: LD_INT 3
5985: PPUSH
5986: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5990: LD_STRING M3
5992: PPUSH
5993: CALL_OW 337
// secondAttack = true ;
5997: LD_ADDR_EXP 17
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// exit ;
6005: POP
6006: POP
6007: GO 6013
// end ;
6009: GO 5757
6011: POP
6012: POP
// end ;
6013: PPOPN 2
6015: END
// export function Dial_SecondAttack ; var units , i ; begin
6016: LD_INT 0
6018: PPUSH
6019: PPUSH
6020: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6021: LD_EXP 46
6025: PPUSH
6026: LD_STRING D8-FSol1-1
6028: PPUSH
6029: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6033: LD_EXP 47
6037: PPUSH
6038: LD_STRING D8-Glad-1
6040: PPUSH
6041: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6045: LD_EXP 49
6049: PPUSH
6050: LD_STRING D8-Bur-1
6052: PPUSH
6053: CALL_OW 88
// secondAttack = false ;
6057: LD_ADDR_EXP 17
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// units = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 1
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6099: LD_EXP 48
6103: PPUSH
6104: CALL_OW 122
// wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i in amApemans do
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: LD_EXP 48
6131: PUSH
6132: FOR_IN
6133: IFFALSE 6199
// begin if rand ( 0 , 1 ) then
6135: LD_INT 0
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 12
6145: IFFALSE 6173
// ComAttackUnit ( i , NearestUnitToUnit ( units , i ) ) else
6147: LD_VAR 0 3
6151: PPUSH
6152: LD_VAR 0 2
6156: PPUSH
6157: LD_VAR 0 3
6161: PPUSH
6162: CALL_OW 74
6166: PPUSH
6167: CALL_OW 115
6171: GO 6197
// ComAttackUnit ( i , SecondNearestUnitToUnit ( units , i ) ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_VAR 0 2
6182: PPUSH
6183: LD_VAR 0 3
6187: PPUSH
6188: CALL 6224 0 2
6192: PPUSH
6193: CALL_OW 115
// end ;
6197: GO 6132
6199: POP
6200: POP
// until not UnitFilter ( amApemans , [ f_ok ] ) ;
6201: LD_EXP 48
6205: PPUSH
6206: LD_INT 50
6208: PUSH
6209: EMPTY
6210: LIST
6211: PPUSH
6212: CALL_OW 72
6216: NOT
6217: IFFALSE 6115
// end ;
6219: LD_VAR 0 1
6223: RET
// export function SecondNearestUnitToUnit ( group , unit ) ; var tmp ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// if group < 2 then
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 2
6235: LESS
6236: IFFALSE 6260
// begin result := NearestUnitToUnit ( group , unit ) ;
6238: LD_ADDR_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: CALL_OW 74
6257: ST_TO_ADDR
// exit ;
6258: GO 6306
// end ; tmp := NearestUnitToUnit ( group , unit ) ;
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_VAR 0 2
6274: PPUSH
6275: CALL_OW 74
6279: ST_TO_ADDR
// result := NearestUnitToUnit ( group diff tmp , unit ) ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 4
6294: DIFF
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 74
6305: ST_TO_ADDR
// end ;
6306: LD_VAR 0 3
6310: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6311: LD_INT 23
6313: PPUSH
6314: CALL_OW 256
6318: PUSH
6319: LD_INT 350
6321: LESS
6322: PUSH
6323: LD_INT 23
6325: PPUSH
6326: CALL_OW 256
6330: PUSH
6331: LD_INT 250
6333: GREATER
6334: AND
6335: PUSH
6336: LD_INT 20
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 70
6367: PUSH
6368: LD_INT 0
6370: GREATER
6371: AND
6372: PUSH
6373: LD_EXP 24
6377: NOT
6378: AND
6379: IFFALSE 6396
6381: GO 6383
6383: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING D8-FSol1-2
6391: PPUSH
6392: CALL_OW 88
6396: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6397: LD_INT 23
6399: PPUSH
6400: CALL_OW 303
6404: PUSH
6405: LD_INT 22
6407: PPUSH
6408: CALL_OW 302
6412: AND
6413: PUSH
6414: LD_EXP 24
6418: NOT
6419: AND
6420: IFFALSE 6490
6422: GO 6424
6424: DISABLE
// begin amRetreat = true ;
6425: LD_ADDR_EXP 24
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6433: LD_EXP 46
6437: PPUSH
6438: LD_STRING D8-FSol1-2a
6440: PPUSH
6441: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6445: LD_EXP 47
6449: PUSH
6450: LD_EXP 46
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: LD_INT 21
6461: PPUSH
6462: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6466: LD_EXP 47
6470: PPUSH
6471: LD_STRING D8-Glad-2
6473: PPUSH
6474: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6478: LD_EXP 49
6482: PPUSH
6483: LD_STRING D8-Bur-2
6485: PPUSH
6486: CALL_OW 88
// end ;
6490: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6491: LD_INT 22
6493: PPUSH
6494: CALL_OW 303
6498: PUSH
6499: LD_INT 23
6501: PPUSH
6502: CALL_OW 302
6506: AND
6507: PUSH
6508: LD_EXP 24
6512: NOT
6513: AND
6514: IFFALSE 6584
6516: GO 6518
6518: DISABLE
// begin amRetreat = true ;
6519: LD_ADDR_EXP 24
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6527: LD_EXP 46
6531: PPUSH
6532: LD_STRING D8-FSol1-2a
6534: PPUSH
6535: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6539: LD_EXP 47
6543: PUSH
6544: LD_EXP 46
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: LD_INT 21
6555: PPUSH
6556: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6560: LD_EXP 47
6564: PPUSH
6565: LD_STRING D8-Glad-2
6567: PPUSH
6568: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6572: LD_EXP 49
6576: PPUSH
6577: LD_STRING D8-Bur-2
6579: PPUSH
6580: CALL_OW 88
// end ;
6584: END
// every 0 0$1 trigger ( IsDead ( amApemans ) and Difficulty >= 3 ) and not amRetreat do
6585: LD_EXP 48
6589: PPUSH
6590: CALL_OW 301
6594: PUSH
6595: LD_OWVAR 67
6599: PUSH
6600: LD_INT 3
6602: GREATEREQUAL
6603: AND
6604: PUSH
6605: LD_EXP 24
6609: NOT
6610: AND
6611: IFFALSE 6681
6613: GO 6615
6615: DISABLE
// begin amRetreat = true ;
6616: LD_ADDR_EXP 24
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6624: LD_EXP 46
6628: PPUSH
6629: LD_STRING D8-FSol1-2a
6631: PPUSH
6632: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6636: LD_EXP 47
6640: PUSH
6641: LD_EXP 46
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: LD_INT 21
6652: PPUSH
6653: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6657: LD_EXP 47
6661: PPUSH
6662: LD_STRING D8-Glad-2
6664: PPUSH
6665: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6669: LD_EXP 49
6673: PPUSH
6674: LD_STRING D8-Bur-2
6676: PPUSH
6677: CALL_OW 88
// end ;
6681: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty >= 3 and not amRetreat do
6682: LD_INT 23
6684: PPUSH
6685: CALL_OW 256
6689: PUSH
6690: LD_INT 500
6692: LESS
6693: PUSH
6694: LD_OWVAR 67
6698: PUSH
6699: LD_INT 3
6701: GREATEREQUAL
6702: AND
6703: PUSH
6704: LD_EXP 24
6708: NOT
6709: AND
6710: IFFALSE 6780
6712: GO 6714
6714: DISABLE
// begin amRetreat = true ;
6715: LD_ADDR_EXP 24
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6723: LD_EXP 46
6727: PPUSH
6728: LD_STRING D8-FSol1-2a
6730: PPUSH
6731: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6735: LD_EXP 47
6739: PUSH
6740: LD_EXP 46
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PPUSH
6749: LD_INT 21
6751: PPUSH
6752: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6756: LD_EXP 47
6760: PPUSH
6761: LD_STRING D8-Glad-2
6763: PPUSH
6764: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6768: LD_EXP 49
6772: PPUSH
6773: LD_STRING D8-Bur-2
6775: PPUSH
6776: CALL_OW 88
// end ;
6780: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6781: LD_INT 22
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 1
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 50
6803: PUSH
6804: EMPTY
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PPUSH
6812: CALL_OW 69
6816: PUSH
6817: LD_INT 0
6819: GREATER
6820: IFFALSE 6948
6822: GO 6824
6824: DISABLE
6825: LD_INT 0
6827: PPUSH
// begin enable ;
6828: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: LD_INT 21
6836: PPUSH
6837: LD_INT 22
6839: PUSH
6840: LD_INT 1
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: CALL_OW 70
6865: PUSH
6866: FOR_IN
6867: IFFALSE 6946
// begin if unit = Gladstone then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_EXP 47
6878: EQUAL
6879: IFFALSE 6909
// begin gladstoneEscape = true ;
6881: LD_ADDR_EXP 19
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6889: LD_EXP 47
6893: PPUSH
6894: LD_EXP 33
6898: PUSH
6899: LD_STRING Gladstone
6901: STR
6902: PPUSH
6903: CALL_OW 38
// end else
6907: GO 6935
// begin JohannaEscape = true ;
6909: LD_ADDR_EXP 20
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6917: LD_EXP 46
6921: PPUSH
6922: LD_EXP 33
6926: PUSH
6927: LD_STRING Johanna
6929: STR
6930: PPUSH
6931: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 64
// end ;
6944: GO 6866
6946: POP
6947: POP
// end ;
6948: PPOPN 1
6950: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6951: LD_EXP 47
6955: PPUSH
6956: CALL_OW 301
6960: PUSH
6961: LD_EXP 46
6965: PPUSH
6966: CALL_OW 301
6970: AND
6971: IFFALSE 6988
6973: GO 6975
6975: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6976: LD_EXP 49
6980: PPUSH
6981: LD_STRING D9-Bur-1
6983: PPUSH
6984: CALL_OW 88
6988: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6989: LD_EXP 46
6993: PPUSH
6994: CALL_OW 301
6998: PUSH
6999: LD_EXP 19
7003: AND
7004: PUSH
7005: LD_EXP 20
7009: NOT
7010: AND
7011: IFFALSE 7028
7013: GO 7015
7015: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
7016: LD_EXP 49
7020: PPUSH
7021: LD_STRING D9-Bur-1a
7023: PPUSH
7024: CALL_OW 88
7028: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
7029: LD_EXP 47
7033: PPUSH
7034: CALL_OW 301
7038: PUSH
7039: LD_EXP 19
7043: NOT
7044: AND
7045: PUSH
7046: LD_EXP 20
7050: AND
7051: IFFALSE 7068
7053: GO 7055
7055: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
7056: LD_EXP 49
7060: PPUSH
7061: LD_STRING D9-Bur-1b
7063: PPUSH
7064: CALL_OW 88
7068: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
7069: LD_EXP 19
7073: PUSH
7074: LD_EXP 20
7078: AND
7079: IFFALSE 7096
7081: GO 7083
7083: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
7084: LD_EXP 49
7088: PPUSH
7089: LD_STRING D9-Bur-1c
7091: PPUSH
7092: CALL_OW 88
7096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
7097: LD_INT 22
7099: PUSH
7100: LD_INT 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 50
7119: PUSH
7120: EMPTY
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: IFFALSE 7384
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
7145: LD_ADDR_VAR 0 1
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 21
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 50
7172: PUSH
7173: EMPTY
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: LD_EXP 49
7190: PUSH
7191: LD_EXP 57
7195: PUSH
7196: LD_EXP 54
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: DIFF
7206: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
7207: LD_ADDR_VAR 0 2
7211: PUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 26
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: ST_TO_ADDR
// DialogueOn ;
7232: CALL_OW 6
// if IsOK ( Belkov ) then
7236: LD_EXP 54
7240: PPUSH
7241: CALL_OW 302
7245: IFFALSE 7259
// Say ( Belkov , D10-Bel-1 ) ;
7247: LD_EXP 54
7251: PPUSH
7252: LD_STRING D10-Bel-1
7254: PPUSH
7255: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7259: LD_VAR 0 1
7263: PUSH
7264: LD_INT 0
7266: GREATER
7267: PUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_INT 0
7275: GREATER
7276: PUSH
7277: LD_EXP 54
7281: PPUSH
7282: CALL_OW 302
7286: OR
7287: AND
7288: IFFALSE 7355
// begin Say ( Burlak , D10-Bur-1 ) ;
7290: LD_EXP 49
7294: PPUSH
7295: LD_STRING D10-Bur-1
7297: PPUSH
7298: CALL_OW 88
// if IsOK ( Belkov ) then
7302: LD_EXP 54
7306: PPUSH
7307: CALL_OW 302
7311: IFFALSE 7327
// Say ( Belkov , D10-Bel-1a ) else
7313: LD_EXP 54
7317: PPUSH
7318: LD_STRING D10-Bel-1a
7320: PPUSH
7321: CALL_OW 88
7325: GO 7343
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7327: LD_VAR 0 2
7331: PUSH
7332: LD_INT 1
7334: ARRAY
7335: PPUSH
7336: LD_STRING D10-RSol1-1
7338: PPUSH
7339: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7343: LD_EXP 49
7347: PPUSH
7348: LD_STRING D10-Bur-2
7350: PPUSH
7351: CALL_OW 88
// end ; DialogueOff ;
7355: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7359: LD_STRING M4a
7361: PPUSH
7362: CALL_OW 337
// evacuationAvailable = true ;
7366: LD_ADDR_EXP 22
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7374: LD_INT 1
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL_OW 424
// end ;
7384: PPOPN 2
7386: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7387: LD_EXP 22
7391: PUSH
7392: LD_EXP 25
7396: NOT
7397: AND
7398: IFFALSE 8008
7400: GO 7402
7402: DISABLE
7403: LD_INT 0
7405: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7406: LD_EXP 56
7410: PPUSH
7411: LD_INT 22
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL_OW 49
// wait ( 0 0$3 ) ;
7421: LD_INT 105
7423: PPUSH
7424: CALL_OW 67
// jelenaSpawned = true ;
7428: LD_ADDR_EXP 25
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 20 then
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 50
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 69
7471: PPUSH
7472: LD_EXP 56
7476: PPUSH
7477: CALL_OW 74
7481: PPUSH
7482: LD_EXP 56
7486: PPUSH
7487: CALL_OW 296
7491: PUSH
7492: LD_INT 20
7494: LESS
7495: IFFALSE 7499
// exit ;
7497: GO 8008
// DialogueOn ;
7499: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7503: LD_EXP 56
7507: PPUSH
7508: LD_STRING D11b-Kir-1
7510: PPUSH
7511: CALL_OW 94
// if IsOK ( Belkov ) then
7515: LD_EXP 54
7519: PPUSH
7520: CALL_OW 302
7524: IFFALSE 7552
// begin Say ( Belkov , D11b-Bel-1 ) ;
7526: LD_EXP 54
7530: PPUSH
7531: LD_STRING D11b-Bel-1
7533: PPUSH
7534: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7538: LD_EXP 54
7542: PPUSH
7543: LD_STRING D11b-Bel-1a
7545: PPUSH
7546: CALL_OW 94
// end else
7550: GO 7607
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 50
7579: PUSH
7580: EMPTY
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 69
7592: PPUSH
7593: LD_STRING D11b-RSol1-1
7595: PPUSH
7596: LD_STRING D11b-RFSol1-1
7598: PPUSH
7599: LD_INT 0
7601: PPUSH
7602: CALL 8631 0 4
7606: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7607: LD_INT 24
7609: PPUSH
7610: LD_INT 22
7612: PUSH
7613: LD_INT 0
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 25
7622: PUSH
7623: LD_INT 12
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 70
7638: PUSH
7639: LD_INT 0
7641: GREATER
7642: IFFALSE 7658
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7644: LD_EXP 56
7648: PPUSH
7649: LD_STRING D11b1-Kir-1
7651: PPUSH
7652: CALL_OW 94
7656: GO 7670
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7658: LD_EXP 56
7662: PPUSH
7663: LD_STRING D11b2-Kir-1
7665: PPUSH
7666: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7670: LD_EXP 6
7674: PUSH
7675: LD_INT 24
7677: PPUSH
7678: LD_INT 22
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 12
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 70
7706: PUSH
7707: LD_INT 0
7709: GREATER
7710: AND
7711: IFFALSE 7846
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7713: LD_EXP 49
7717: PPUSH
7718: LD_STRING D11b1-Bur-1
7720: PPUSH
7721: CALL_OW 88
// if IsOk ( Belkov ) then
7725: LD_EXP 54
7729: PPUSH
7730: CALL_OW 302
7734: IFFALSE 7750
// Say ( Belkov , D11b2-Bel-1 ) else
7736: LD_EXP 54
7740: PPUSH
7741: LD_STRING D11b2-Bel-1
7743: PPUSH
7744: CALL_OW 88
7748: GO 7791
// begin if GetSex ( randomSold ) = sex_male then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 258
7759: PUSH
7760: LD_INT 1
7762: EQUAL
7763: IFFALSE 7779
// Say ( randomSold , D11b1-RSol1-1 ) else
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_STRING D11b1-RSol1-1
7772: PPUSH
7773: CALL_OW 88
7777: GO 7791
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_STRING D11b1-RFSol1-1
7786: PPUSH
7787: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7791: LD_INT 22
7793: PUSH
7794: LD_INT 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 1
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 50
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 69
7826: PPUSH
7827: LD_STRING D11b1-RSol1-1
7829: PPUSH
7830: LD_STRING D11b1-RFSol1-1
7832: PPUSH
7833: LD_INT 0
7835: PPUSH
7836: CALL 8631 0 4
// DialogueOff ;
7840: CALL_OW 7
// exit ;
7844: GO 8008
// end ; if spotWaterfall then
7846: LD_EXP 7
7850: IFFALSE 7936
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7852: LD_EXP 49
7856: PPUSH
7857: LD_STRING D11b1-Bur-1a
7859: PPUSH
7860: CALL_OW 88
// if IsOk ( Belkov ) then
7864: LD_EXP 54
7868: PPUSH
7869: CALL_OW 302
7873: IFFALSE 7889
// Say ( Belkov , D11b2-Bel-1 ) else
7875: LD_EXP 54
7879: PPUSH
7880: LD_STRING D11b2-Bel-1
7882: PPUSH
7883: CALL_OW 88
7887: GO 7930
// begin if GetSex ( randomSold ) = sex_male then
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 258
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: IFFALSE 7918
// Say ( randomSold , D11b1-RSol1-1 ) else
7904: LD_VAR 0 1
7908: PPUSH
7909: LD_STRING D11b1-RSol1-1
7911: PPUSH
7912: CALL_OW 88
7916: GO 7930
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_STRING D11b1-RFSol1-1
7925: PPUSH
7926: CALL_OW 88
// end ; DialogueOff ;
7930: CALL_OW 7
// exit ;
7934: GO 8008
// end ; if IsOk ( Belkov ) then
7936: LD_EXP 54
7940: PPUSH
7941: CALL_OW 302
7945: IFFALSE 7961
// Say ( Belkov , D11b1-Bel-1 ) else
7947: LD_EXP 54
7951: PPUSH
7952: LD_STRING D11b1-Bel-1
7954: PPUSH
7955: CALL_OW 88
7959: GO 8002
// begin if GetSex ( randomSold ) = sex_male then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 258
7970: PUSH
7971: LD_INT 1
7973: EQUAL
7974: IFFALSE 7990
// Say ( randomSold , D11b1-RSol1-1 ) else
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_STRING D11b1-RSol1-1
7983: PPUSH
7984: CALL_OW 88
7988: GO 8002
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_STRING D11b1-RFSol1-1
7997: PPUSH
7998: CALL_OW 88
// end ; DialogueOff ;
8002: CALL_OW 7
// exit ;
8006: GO 8008
// end ;
8008: PPOPN 1
8010: END
// every 0 0$1.8 trigger FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) do var un , saved ;
8011: LD_INT 24
8013: PPUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PPUSH
8024: CALL_OW 70
8028: IFFALSE 8227
8030: GO 8032
8032: DISABLE
8033: LD_INT 0
8035: PPUSH
8036: PPUSH
// begin if not LakeApes then
8037: LD_EXP 26
8041: NOT
8042: IFFALSE 8046
// exit ;
8044: GO 8227
// if FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) > 2 then
8046: LD_INT 24
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PPUSH
8059: CALL_OW 70
8063: PUSH
8064: LD_INT 2
8066: GREATER
8067: IFFALSE 8226
// begin ComAttackUnit ( LakeApes [ 1 ] , NearestUnitToUnit ( your_units , LakeApes [ 1 ] ) ) ;
8069: LD_EXP 26
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PPUSH
8078: LD_EXP 28
8082: PPUSH
8083: LD_EXP 26
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: CALL_OW 74
8096: PPUSH
8097: CALL_OW 115
// ComMoveToArea ( LakeApes diff LakeApes [ 1 ] , ApeEscape ) ;
8101: LD_EXP 26
8105: PUSH
8106: LD_EXP 26
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: DIFF
8115: PPUSH
8116: LD_INT 28
8118: PPUSH
8119: CALL_OW 113
// AddComWait ( LakeApes diff LakeApes [ 1 ] , 0 0$1 ) ;
8123: LD_EXP 26
8127: PUSH
8128: LD_EXP 26
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: DIFF
8137: PPUSH
8138: LD_INT 35
8140: PPUSH
8141: CALL_OW 202
// repeat wait ( 0 0$0.3 ) ;
8145: LD_INT 10
8147: PPUSH
8148: CALL_OW 67
// saved := FilterUnitsInArea ( ApeEscape , [ f_side , 0 ] ) ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_INT 28
8159: PPUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// for un in saved do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: LD_VAR 0 2
8184: PUSH
8185: FOR_IN
8186: IFFALSE 8215
// begin RemoveUnit ( un ) ;
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 64
// LakeApes := LakeApes diff un ;
8197: LD_ADDR_EXP 26
8201: PUSH
8202: LD_EXP 26
8206: PUSH
8207: LD_VAR 0 1
8211: DIFF
8212: ST_TO_ADDR
// end ;
8213: GO 8185
8215: POP
8216: POP
// until not LakeApes ;
8217: LD_EXP 26
8221: NOT
8222: IFFALSE 8145
// end else
8224: GO 8227
// enable ;
8226: ENABLE
// end ;
8227: PPOPN 2
8229: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
8230: LD_INT 3
8232: PPUSH
8233: LD_EXP 56
8237: PPUSH
8238: CALL_OW 292
8242: PUSH
8243: LD_EXP 25
8247: AND
8248: IFFALSE 8511
8250: GO 8252
8252: DISABLE
8253: LD_INT 0
8255: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
8256: LD_EXP 56
8260: PPUSH
8261: LD_INT 3
8263: PPUSH
8264: CALL_OW 235
// jelenaSaved = true ;
8268: LD_ADDR_EXP 21
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
8276: LD_EXP 56
8280: PPUSH
8281: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
8285: LD_ADDR_VAR 0 1
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 3
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 50
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_EXP 56
8330: DIFF
8331: PPUSH
8332: LD_EXP 56
8336: PPUSH
8337: CALL_OW 74
8341: ST_TO_ADDR
// DialogueOn ;
8342: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8346: LD_EXP 56
8350: PPUSH
8351: LD_STRING D11a-Kir-1
8353: PPUSH
8354: CALL_OW 88
// if nearUnit = Belkov then
8358: LD_VAR 0 1
8362: PUSH
8363: LD_EXP 54
8367: EQUAL
8368: IFFALSE 8408
// begin Say ( Belkov , D11a-Bel-1 ) ;
8370: LD_EXP 54
8374: PPUSH
8375: LD_STRING D11a-Bel-1
8377: PPUSH
8378: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8382: LD_EXP 56
8386: PPUSH
8387: LD_STRING D11a-Kir-2
8389: PPUSH
8390: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
8394: LD_EXP 54
8398: PPUSH
8399: LD_STRING D11a-Bel-2
8401: PPUSH
8402: CALL_OW 88
// end else
8406: GO 8449
// begin if GetSex ( nearUnit ) = sex_male then
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 258
8417: PUSH
8418: LD_INT 1
8420: EQUAL
8421: IFFALSE 8437
// Say ( nearUnit , D11a-RSol1-2 ) else
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_STRING D11a-RSol1-2
8430: PPUSH
8431: CALL_OW 88
8435: GO 8449
// Say ( nearUnit , D11a-RFSol1-2 ) ;
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_STRING D11a-RFSol1-2
8444: PPUSH
8445: CALL_OW 88
// end ; DialogueOff ;
8449: CALL_OW 7
// wait ( 0 0$5 ) ;
8453: LD_INT 175
8455: PPUSH
8456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8460: LD_INT 35
8462: PPUSH
8463: CALL_OW 67
// until GetDistUnits ( Burlak , Kirilenkova ) < 6 ;
8467: LD_EXP 49
8471: PPUSH
8472: LD_EXP 56
8476: PPUSH
8477: CALL_OW 296
8481: PUSH
8482: LD_INT 6
8484: LESS
8485: IFFALSE 8460
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8487: LD_EXP 56
8491: PPUSH
8492: LD_STRING D11c-Kir-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8499: LD_EXP 49
8503: PPUSH
8504: LD_STRING D11c-Bur-1
8506: PPUSH
8507: CALL_OW 88
// end ;
8511: PPOPN 1
8513: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8514: LD_EXP 22
8518: PUSH
8519: LD_INT 1
8521: PPUSH
8522: LD_INT 22
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 70
8550: PUSH
8551: LD_INT 0
8553: GREATER
8554: AND
8555: IFFALSE 8567
8557: GO 8559
8559: DISABLE
// begin Query ( QExit1 ) ;
8560: LD_STRING QExit1
8562: PPUSH
8563: CALL_OW 97
// end ; end_of_file
8567: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8568: LD_INT 0
8570: PPUSH
8571: PPUSH
// if exist_mode then
8572: LD_VAR 0 2
8576: IFFALSE 8601
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_EXP 34
8587: PUSH
8588: LD_VAR 0 1
8592: STR
8593: PPUSH
8594: CALL_OW 34
8598: ST_TO_ADDR
8599: GO 8616
// unit := NewCharacter ( ident ) ;
8601: LD_ADDR_VAR 0 4
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 25
8615: ST_TO_ADDR
// result := unit ;
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_VAR 0 4
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 3
8630: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8631: LD_INT 0
8633: PPUSH
8634: PPUSH
8635: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8636: LD_ADDR_VAR 0 1
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: LD_EXP 49
8650: PUSH
8651: LD_EXP 57
8655: PUSH
8656: LD_EXP 54
8660: PUSH
8661: LD_EXP 56
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: DIFF
8672: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8673: LD_ADDR_VAR 0 7
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 12
8695: ARRAY
8696: ST_TO_ADDR
// if radio then
8697: LD_VAR 0 4
8701: IFFALSE 8750
// begin if GetSex ( speaker ) = sex_male then
8703: LD_VAR 0 7
8707: PPUSH
8708: CALL_OW 258
8712: PUSH
8713: LD_INT 1
8715: EQUAL
8716: IFFALSE 8734
// SayRadio ( speaker , dialogMID ) else
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 2
8727: PPUSH
8728: CALL_OW 94
8732: GO 8748
// SayRadio ( speaker , dialogFID ) ;
8734: LD_VAR 0 7
8738: PPUSH
8739: LD_VAR 0 3
8743: PPUSH
8744: CALL_OW 94
// end else
8748: GO 8795
// begin if GetSex ( speaker ) = sex_male then
8750: LD_VAR 0 7
8754: PPUSH
8755: CALL_OW 258
8759: PUSH
8760: LD_INT 1
8762: EQUAL
8763: IFFALSE 8781
// Say ( speaker , dialogMID ) else
8765: LD_VAR 0 7
8769: PPUSH
8770: LD_VAR 0 2
8774: PPUSH
8775: CALL_OW 88
8779: GO 8795
// Say ( speaker , dialogFID ) ;
8781: LD_VAR 0 7
8785: PPUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: CALL_OW 88
// end ; result := speaker ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: LD_VAR 0 7
8804: ST_TO_ADDR
// end ;
8805: LD_VAR 0 5
8809: RET
// export function Length ( tab ) ; var i , count ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
// for i in tab do
8815: LD_ADDR_VAR 0 3
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8844
// count = count + 1 ;
8828: LD_ADDR_VAR 0 4
8832: PUSH
8833: LD_VAR 0 4
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: ST_TO_ADDR
8842: GO 8825
8844: POP
8845: POP
// Result := count ;
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_VAR 0 4
8855: ST_TO_ADDR
// end ;
8856: LD_VAR 0 2
8860: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8861: LD_INT 0
8863: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: PUSH
8874: LD_OWVAR 2
8878: EQUAL
8879: PUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 302
8889: AND
8890: IFFALSE 8912
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_EXP 33
8901: PUSH
8902: LD_VAR 0 2
8906: STR
8907: PPUSH
8908: CALL_OW 38
// end ;
8912: LD_VAR 0 3
8916: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8917: LD_INT 0
8919: PPUSH
8920: PPUSH
8921: PPUSH
// resultCharactersToSave = [ ] ;
8922: LD_ADDR_VAR 0 5
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// for unit in characters do
8929: LD_ADDR_VAR 0 4
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: FOR_IN
8940: IFFALSE 8988
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8942: LD_VAR 0 4
8946: PPUSH
8947: CALL_OW 255
8951: PUSH
8952: LD_OWVAR 2
8956: EQUAL
8957: PUSH
8958: LD_VAR 0 4
8962: PPUSH
8963: CALL_OW 302
8967: AND
8968: IFFALSE 8986
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8970: LD_ADDR_VAR 0 5
8974: PUSH
8975: LD_VAR 0 5
8979: PUSH
8980: LD_VAR 0 4
8984: ADD
8985: ST_TO_ADDR
8986: GO 8939
8988: POP
8989: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8990: LD_VAR 0 5
8994: PPUSH
8995: LD_EXP 33
8999: PUSH
9000: LD_VAR 0 2
9004: STR
9005: PPUSH
9006: CALL_OW 38
// end ;
9010: LD_VAR 0 3
9014: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 302
9038: NOT
9039: PUSH
9040: LD_VAR 0 4
9044: PUSH
9045: LD_INT 1
9047: EQUAL
9048: OR
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 488
9064: NOT
9065: OR
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_VAR 0 2
9076: PPUSH
9077: LD_VAR 0 3
9081: PPUSH
9082: CALL_OW 297
9086: PUSH
9087: LD_VAR 0 4
9091: GREATEREQUAL
9092: OR
9093: PUSH
9094: LD_VAR 0 5
9098: PUSH
9099: LD_INT 1
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: IN
9109: NOT
9110: OR
9111: IFFALSE 9115
// exit ;
9113: GO 10672
// attempts = 0 ;
9115: LD_ADDR_VAR 0 17
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9123: LD_ADDR_VAR 0 7
9127: PUSH
9128: EMPTY
9129: ST_TO_ADDR
// list_coords = [ ] ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9137: LD_ADDR_VAR 0 9
9141: PUSH
9142: LD_VAR 0 2
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL_OW 250
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 251
9171: PPUSH
9172: CALL 10677 0 4
9176: ST_TO_ADDR
// if attempts = 0 then
9177: LD_VAR 0 17
9181: PUSH
9182: LD_INT 0
9184: EQUAL
9185: IFFALSE 9293
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9187: LD_ADDR_VAR 0 10
9191: PUSH
9192: LD_VAR 0 9
9196: PUSH
9197: LD_VAR 0 9
9201: PUSH
9202: LD_INT 1
9204: PLUS
9205: PUSH
9206: LD_VAR 0 9
9210: PUSH
9211: LD_INT 1
9213: MINUS
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9220: LD_VAR 0 10
9224: PUSH
9225: LD_INT 2
9227: ARRAY
9228: PUSH
9229: LD_INT 6
9231: EQUAL
9232: IFFALSE 9255
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9234: LD_ADDR_VAR 0 10
9238: PUSH
9239: LD_VAR 0 10
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 1
9254: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9255: LD_VAR 0 10
9259: PUSH
9260: LD_INT 3
9262: ARRAY
9263: PUSH
9264: LD_INT 1
9266: NEG
9267: EQUAL
9268: IFFALSE 9291
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9270: LD_ADDR_VAR 0 10
9274: PUSH
9275: LD_VAR 0 10
9279: PPUSH
9280: LD_INT 3
9282: PPUSH
9283: LD_INT 5
9285: PPUSH
9286: CALL_OW 1
9290: ST_TO_ADDR
// end else
9291: GO 9330
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9293: LD_ADDR_VAR 0 10
9297: PUSH
9298: LD_INT 0
9300: PUSH
9301: LD_INT 1
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 4
9312: PUSH
9313: LD_INT 5
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_VAR 0 9
9328: DIFF
9329: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9330: LD_ADDR_VAR 0 14
9334: PUSH
9335: DOUBLE
9336: LD_INT 1
9338: DEC
9339: ST_TO_ADDR
9340: LD_VAR 0 10
9344: PUSH
9345: LD_INT 0
9347: PLUS
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9672
// case dir_list [ c ] of 0 :
9352: LD_VAR 0 10
9356: PUSH
9357: LD_VAR 0 14
9361: ARRAY
9362: PUSH
9363: LD_INT 0
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9412
9371: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_VAR 0 8
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: LD_VAR 0 2
9389: PUSH
9390: LD_VAR 0 3
9394: PUSH
9395: LD_VAR 0 4
9399: MINUS
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 2
9409: ST_TO_ADDR
9410: GO 9670
9412: LD_INT 1
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9461
9420: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: LD_VAR 0 8
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: LD_VAR 0 2
9438: PUSH
9439: LD_VAR 0 4
9443: PLUS
9444: PUSH
9445: LD_VAR 0 3
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 2
9458: ST_TO_ADDR
9459: GO 9670
9461: LD_INT 2
9463: DOUBLE
9464: EQUAL
9465: IFTRUE 9469
9467: GO 9516
9469: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
9470: LD_ADDR_VAR 0 8
9474: PUSH
9475: LD_VAR 0 8
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_VAR 0 4
9492: PLUS
9493: PUSH
9494: LD_VAR 0 3
9498: PUSH
9499: LD_VAR 0 4
9503: PLUS
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 2
9513: ST_TO_ADDR
9514: GO 9670
9516: LD_INT 3
9518: DOUBLE
9519: EQUAL
9520: IFTRUE 9524
9522: GO 9565
9524: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9525: LD_ADDR_VAR 0 8
9529: PUSH
9530: LD_VAR 0 8
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_VAR 0 3
9547: PUSH
9548: LD_VAR 0 4
9552: PLUS
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
9563: GO 9670
9565: LD_INT 4
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9614
9573: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9574: LD_ADDR_VAR 0 8
9578: PUSH
9579: LD_VAR 0 8
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_VAR 0 2
9591: PUSH
9592: LD_VAR 0 4
9596: MINUS
9597: PUSH
9598: LD_VAR 0 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 2
9611: ST_TO_ADDR
9612: GO 9670
9614: LD_INT 5
9616: DOUBLE
9617: EQUAL
9618: IFTRUE 9622
9620: GO 9669
9622: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_VAR 0 8
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_VAR 0 2
9640: PUSH
9641: LD_VAR 0 4
9645: MINUS
9646: PUSH
9647: LD_VAR 0 3
9651: PUSH
9652: LD_VAR 0 4
9656: MINUS
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 2
9666: ST_TO_ADDR
9667: GO 9670
9669: POP
9670: GO 9349
9672: POP
9673: POP
// if dist < 30 then
9674: LD_VAR 0 4
9678: PUSH
9679: LD_INT 30
9681: LESS
9682: IFFALSE 9694
// c = 1 else
9684: LD_ADDR_VAR 0 14
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
9692: GO 9702
// c = 2 ;
9694: LD_ADDR_VAR 0 14
9698: PUSH
9699: LD_INT 2
9701: ST_TO_ADDR
// b = 1 ;
9702: LD_ADDR_VAR 0 11
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9710: LD_VAR 0 11
9714: PUSH
9715: LD_VAR 0 4
9719: PUSH
9720: LD_INT 1
9722: MINUS
9723: LESSEQUAL
9724: IFFALSE 10152
// begin if 0 in dir_list and 1 in dir_list then
9726: LD_INT 0
9728: PUSH
9729: LD_VAR 0 10
9733: IN
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: LD_VAR 0 10
9742: IN
9743: AND
9744: IFFALSE 9796
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9746: LD_ADDR_VAR 0 8
9750: PUSH
9751: LD_VAR 0 8
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_VAR 0 2
9763: PUSH
9764: LD_VAR 0 11
9768: PLUS
9769: PUSH
9770: LD_VAR 0 3
9774: PUSH
9775: LD_VAR 0 4
9779: MINUS
9780: PUSH
9781: LD_VAR 0 11
9785: PLUS
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 2
9795: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9796: LD_INT 1
9798: PUSH
9799: LD_VAR 0 10
9803: IN
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: LD_VAR 0 10
9812: IN
9813: AND
9814: IFFALSE 9860
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9816: LD_ADDR_VAR 0 8
9820: PUSH
9821: LD_VAR 0 8
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: LD_VAR 0 2
9833: PUSH
9834: LD_VAR 0 4
9838: PLUS
9839: PUSH
9840: LD_VAR 0 3
9844: PUSH
9845: LD_VAR 0 11
9849: PLUS
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 2
9859: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9860: LD_INT 2
9862: PUSH
9863: LD_VAR 0 10
9867: IN
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_VAR 0 10
9876: IN
9877: AND
9878: IFFALSE 9930
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9880: LD_ADDR_VAR 0 8
9884: PUSH
9885: LD_VAR 0 8
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_VAR 0 4
9902: PLUS
9903: PUSH
9904: LD_VAR 0 11
9908: MINUS
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 4
9919: PLUS
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 2
9929: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9930: LD_INT 3
9932: PUSH
9933: LD_VAR 0 10
9937: IN
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: LD_VAR 0 10
9946: IN
9947: AND
9948: IFFALSE 10000
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9950: LD_ADDR_VAR 0 8
9954: PUSH
9955: LD_VAR 0 8
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_VAR 0 11
9972: MINUS
9973: PUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 4
9983: PLUS
9984: PUSH
9985: LD_VAR 0 11
9989: MINUS
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 2
9999: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10000: LD_INT 4
10002: PUSH
10003: LD_VAR 0 10
10007: IN
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_VAR 0 10
10016: IN
10017: AND
10018: IFFALSE 10064
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_VAR 0 4
10042: MINUS
10043: PUSH
10044: LD_VAR 0 3
10048: PUSH
10049: LD_VAR 0 11
10053: MINUS
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 2
10063: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10064: LD_INT 5
10066: PUSH
10067: LD_VAR 0 10
10071: IN
10072: PUSH
10073: LD_INT 0
10075: PUSH
10076: LD_VAR 0 10
10080: IN
10081: AND
10082: IFFALSE 10134
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10084: LD_ADDR_VAR 0 8
10088: PUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: LD_VAR 0 2
10101: PUSH
10102: LD_VAR 0 4
10106: MINUS
10107: PUSH
10108: LD_VAR 0 11
10112: PLUS
10113: PUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_VAR 0 4
10123: MINUS
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 2
10133: ST_TO_ADDR
// b = b + c end ;
10134: LD_ADDR_VAR 0 11
10138: PUSH
10139: LD_VAR 0 11
10143: PUSH
10144: LD_VAR 0 14
10148: PLUS
10149: ST_TO_ADDR
10150: GO 9710
// if list_coords = 0 then
10152: LD_VAR 0 8
10156: PUSH
10157: LD_INT 0
10159: EQUAL
10160: IFFALSE 10164
// exit ;
10162: GO 10672
// repeat min_dist = 5000 ;
10164: LD_ADDR_VAR 0 12
10168: PUSH
10169: LD_INT 5000
10171: ST_TO_ADDR
// for b in list_coords do
10172: LD_ADDR_VAR 0 11
10176: PUSH
10177: LD_VAR 0 8
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10242
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10185: LD_ADDR_VAR 0 13
10189: PUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_VAR 0 11
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PPUSH
10204: LD_VAR 0 11
10208: PUSH
10209: LD_INT 2
10211: ARRAY
10212: PPUSH
10213: CALL_OW 297
10217: ST_TO_ADDR
// if temp_dist < min_dist then
10218: LD_VAR 0 13
10222: PUSH
10223: LD_VAR 0 12
10227: LESS
10228: IFFALSE 10240
// min_dist = temp_dist ;
10230: LD_ADDR_VAR 0 12
10234: PUSH
10235: LD_VAR 0 13
10239: ST_TO_ADDR
// end ;
10240: GO 10182
10242: POP
10243: POP
// c = 0 ;
10244: LD_ADDR_VAR 0 14
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// repeat c = c + 1 ;
10252: LD_ADDR_VAR 0 14
10256: PUSH
10257: LD_VAR 0 14
10261: PUSH
10262: LD_INT 1
10264: PLUS
10265: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10266: LD_VAR 0 1
10270: PPUSH
10271: LD_VAR 0 8
10275: PUSH
10276: LD_VAR 0 14
10280: ARRAY
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PPUSH
10286: LD_VAR 0 8
10290: PUSH
10291: LD_VAR 0 14
10295: ARRAY
10296: PUSH
10297: LD_INT 2
10299: ARRAY
10300: PPUSH
10301: CALL_OW 297
10305: PUSH
10306: LD_VAR 0 12
10310: EQUAL
10311: IFFALSE 10376
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 7
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_VAR 0 8
10330: PUSH
10331: LD_VAR 0 14
10335: ARRAY
10336: PPUSH
10337: CALL_OW 2
10341: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10342: LD_ADDR_VAR 0 8
10346: PUSH
10347: LD_VAR 0 8
10351: PPUSH
10352: LD_VAR 0 14
10356: PPUSH
10357: CALL_OW 3
10361: ST_TO_ADDR
// c = c - 1 ;
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: LD_VAR 0 14
10371: PUSH
10372: LD_INT 1
10374: MINUS
10375: ST_TO_ADDR
// end ; until c = list_coords ;
10376: LD_VAR 0 14
10380: PUSH
10381: LD_VAR 0 8
10385: EQUAL
10386: IFFALSE 10252
// c = 0 ;
10388: LD_ADDR_VAR 0 14
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
// if list_nearest > 0 then
10396: LD_VAR 0 7
10400: PUSH
10401: LD_INT 0
10403: GREATER
10404: IFFALSE 10546
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10406: LD_ADDR_VAR 0 15
10410: PUSH
10411: LD_INT 1
10413: PPUSH
10414: LD_VAR 0 7
10418: PPUSH
10419: CALL_OW 12
10423: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10424: LD_ADDR_VAR 0 16
10428: PUSH
10429: LD_VAR 0 7
10433: PUSH
10434: LD_VAR 0 15
10438: ARRAY
10439: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10440: LD_VAR 0 16
10444: PUSH
10445: LD_INT 1
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 16
10453: PUSH
10454: LD_INT 2
10456: ARRAY
10457: PPUSH
10458: CALL_OW 488
10462: PUSH
10463: LD_INT 0
10465: GREATER
10466: PUSH
10467: LD_VAR 0 16
10471: PUSH
10472: LD_INT 1
10474: ARRAY
10475: PPUSH
10476: LD_VAR 0 16
10480: PUSH
10481: LD_INT 2
10483: ARRAY
10484: PPUSH
10485: CALL_OW 428
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: AND
10494: IFFALSE 10506
// c = 1 else
10496: LD_ADDR_VAR 0 14
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
10504: GO 10526
// list_nearest = Delete ( list_nearest , rand_num ) ;
10506: LD_ADDR_VAR 0 7
10510: PUSH
10511: LD_VAR 0 7
10515: PPUSH
10516: LD_VAR 0 15
10520: PPUSH
10521: CALL_OW 3
10525: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10526: LD_VAR 0 14
10530: PUSH
10531: LD_INT 1
10533: EQUAL
10534: PUSH
10535: LD_VAR 0 7
10539: PUSH
10540: LD_INT 0
10542: EQUAL
10543: OR
10544: IFFALSE 10406
// end ; until c = 1 or list_coords = 0 ;
10546: LD_VAR 0 14
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: PUSH
10555: LD_VAR 0 8
10559: PUSH
10560: LD_INT 0
10562: EQUAL
10563: OR
10564: IFFALSE 10164
// attempts = attempts + 1 ;
10566: LD_ADDR_VAR 0 17
10570: PUSH
10571: LD_VAR 0 17
10575: PUSH
10576: LD_INT 1
10578: PLUS
10579: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10580: LD_VAR 0 14
10584: PUSH
10585: LD_INT 1
10587: EQUAL
10588: PUSH
10589: LD_VAR 0 17
10593: PUSH
10594: LD_INT 1
10596: GREATER
10597: OR
10598: IFFALSE 9123
// if c = 1 then
10600: LD_VAR 0 14
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: IFFALSE 10672
// if add then
10610: LD_VAR 0 5
10614: IFFALSE 10645
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_VAR 0 16
10625: PUSH
10626: LD_INT 1
10628: ARRAY
10629: PPUSH
10630: LD_VAR 0 16
10634: PUSH
10635: LD_INT 2
10637: ARRAY
10638: PPUSH
10639: CALL_OW 171
10643: GO 10672
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_VAR 0 16
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 16
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// end ;
10672: LD_VAR 0 6
10676: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
10682: PPUSH
10683: PPUSH
10684: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 488
10699: NOT
10700: PUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: CALL_OW 488
10715: NOT
10716: OR
10717: IFFALSE 10730
// begin result = - 1 ;
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_INT 1
10726: NEG
10727: ST_TO_ADDR
// exit ;
10728: GO 10890
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10730: LD_ADDR_VAR 0 6
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_VAR 0 4
10754: PPUSH
10755: CALL_OW 298
10759: ST_TO_ADDR
// dist_2 = 99999 ;
10760: LD_ADDR_VAR 0 7
10764: PUSH
10765: LD_INT 99999
10767: ST_TO_ADDR
// for b = 0 to 5 do
10768: LD_ADDR_VAR 0 8
10772: PUSH
10773: DOUBLE
10774: LD_INT 0
10776: DEC
10777: ST_TO_ADDR
10778: LD_INT 5
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10878
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10784: LD_ADDR_VAR 0 9
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_VAR 0 8
10798: PPUSH
10799: LD_VAR 0 6
10803: PPUSH
10804: CALL_OW 272
10808: PPUSH
10809: LD_VAR 0 2
10813: PPUSH
10814: LD_VAR 0 8
10818: PPUSH
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 273
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_VAR 0 4
10838: PPUSH
10839: CALL_OW 298
10843: ST_TO_ADDR
// if temp_dist < dist_2 then
10844: LD_VAR 0 9
10848: PUSH
10849: LD_VAR 0 7
10853: LESS
10854: IFFALSE 10876
// begin dist_2 = temp_dist ;
10856: LD_ADDR_VAR 0 7
10860: PUSH
10861: LD_VAR 0 9
10865: ST_TO_ADDR
// dir = b ;
10866: LD_ADDR_VAR 0 10
10870: PUSH
10871: LD_VAR 0 8
10875: ST_TO_ADDR
// end ; end ;
10876: GO 10781
10878: POP
10879: POP
// result = dir ;
10880: LD_ADDR_VAR 0 5
10884: PUSH
10885: LD_VAR 0 10
10889: ST_TO_ADDR
// end ;
10890: LD_VAR 0 5
10894: RET
// export function MoveToHill ; begin
10895: LD_INT 0
10897: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10898: LD_EXP 50
10902: PPUSH
10903: LD_INT 65
10905: PPUSH
10906: LD_INT 59
10908: PPUSH
10909: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10913: LD_EXP 50
10917: PPUSH
10918: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10922: LD_EXP 51
10926: PPUSH
10927: LD_INT 65
10929: PPUSH
10930: LD_INT 58
10932: PPUSH
10933: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10937: LD_EXP 51
10941: PPUSH
10942: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10946: LD_EXP 52
10950: PPUSH
10951: LD_INT 64
10953: PPUSH
10954: LD_INT 57
10956: PPUSH
10957: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10961: LD_EXP 52
10965: PPUSH
10966: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10970: LD_EXP 53
10974: PPUSH
10975: LD_INT 64
10977: PPUSH
10978: LD_INT 56
10980: PPUSH
10981: CALL_OW 111
// AddComCrawl ( Balei ) ;
10985: LD_EXP 53
10989: PPUSH
10990: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10994: LD_EXP 54
10998: PPUSH
10999: LD_INT 63
11001: PPUSH
11002: LD_INT 55
11004: PPUSH
11005: CALL_OW 111
// AddComCrawl ( Belkov ) ;
11009: LD_EXP 54
11013: PPUSH
11014: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
11018: LD_EXP 55
11022: PPUSH
11023: LD_INT 66
11025: PPUSH
11026: LD_INT 58
11028: PPUSH
11029: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
11033: LD_EXP 55
11037: PPUSH
11038: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
11042: LD_EXP 57
11046: PPUSH
11047: CALL_OW 255
11051: PUSH
11052: LD_INT 6
11054: EQUAL
11055: PUSH
11056: LD_EXP 12
11060: AND
11061: IFFALSE 11087
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
11063: LD_EXP 57
11067: PPUSH
11068: LD_INT 63
11070: PPUSH
11071: LD_INT 54
11073: PPUSH
11074: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
11078: LD_EXP 57
11082: PPUSH
11083: CALL_OW 197
// end ; if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11087: LD_EXP 50
11091: PPUSH
11092: LD_INT 65
11094: PPUSH
11095: LD_INT 59
11097: PPUSH
11098: CALL_OW 297
11102: PUSH
11103: LD_INT 7
11105: LESS
11106: IFFALSE 11132
// begin ComCrawl ( Pokryshkin ) ;
11108: LD_EXP 50
11112: PPUSH
11113: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11117: LD_EXP 50
11121: PPUSH
11122: LD_INT 65
11124: PPUSH
11125: LD_INT 59
11127: PPUSH
11128: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11132: LD_EXP 51
11136: PPUSH
11137: LD_INT 65
11139: PPUSH
11140: LD_INT 58
11142: PPUSH
11143: CALL_OW 297
11147: PUSH
11148: LD_INT 7
11150: LESS
11151: IFFALSE 11177
// begin ComCrawl ( Saseda ) ;
11153: LD_EXP 51
11157: PPUSH
11158: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11162: LD_EXP 51
11166: PPUSH
11167: LD_INT 65
11169: PPUSH
11170: LD_INT 58
11172: PPUSH
11173: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11177: LD_EXP 52
11181: PPUSH
11182: LD_INT 64
11184: PPUSH
11185: LD_INT 57
11187: PPUSH
11188: CALL_OW 297
11192: PUSH
11193: LD_INT 7
11195: LESS
11196: IFFALSE 11222
// begin ComCrawl ( Jaworska ) ;
11198: LD_EXP 52
11202: PPUSH
11203: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11207: LD_EXP 52
11211: PPUSH
11212: LD_INT 64
11214: PPUSH
11215: LD_INT 57
11217: PPUSH
11218: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11222: LD_EXP 53
11226: PPUSH
11227: LD_INT 64
11229: PPUSH
11230: LD_INT 56
11232: PPUSH
11233: CALL_OW 297
11237: PUSH
11238: LD_INT 7
11240: LESS
11241: IFFALSE 11267
// begin ComCrawl ( Balei ) ;
11243: LD_EXP 53
11247: PPUSH
11248: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11252: LD_EXP 53
11256: PPUSH
11257: LD_INT 64
11259: PPUSH
11260: LD_INT 56
11262: PPUSH
11263: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11267: LD_EXP 54
11271: PPUSH
11272: LD_INT 63
11274: PPUSH
11275: LD_INT 55
11277: PPUSH
11278: CALL_OW 297
11282: PUSH
11283: LD_INT 7
11285: LESS
11286: IFFALSE 11312
// begin ComCrawl ( Belkov ) ;
11288: LD_EXP 54
11292: PPUSH
11293: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11297: LD_EXP 54
11301: PPUSH
11302: LD_INT 63
11304: PPUSH
11305: LD_INT 55
11307: PPUSH
11308: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11312: LD_EXP 55
11316: PPUSH
11317: LD_INT 66
11319: PPUSH
11320: LD_INT 58
11322: PPUSH
11323: CALL_OW 297
11327: PUSH
11328: LD_INT 7
11330: LESS
11331: IFFALSE 11357
// begin ComCrawl ( Jaunzeme ) ;
11333: LD_EXP 55
11337: PPUSH
11338: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11342: LD_EXP 55
11346: PPUSH
11347: LD_INT 66
11349: PPUSH
11350: LD_INT 58
11352: PPUSH
11353: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11357: LD_EXP 57
11361: PPUSH
11362: LD_INT 63
11364: PPUSH
11365: LD_INT 54
11367: PPUSH
11368: CALL_OW 297
11372: PUSH
11373: LD_INT 7
11375: LESS
11376: PUSH
11377: LD_EXP 57
11381: PPUSH
11382: CALL_OW 255
11386: PUSH
11387: LD_INT 6
11389: EQUAL
11390: AND
11391: PUSH
11392: LD_EXP 12
11396: AND
11397: IFFALSE 11423
// begin ComCrawl ( Gnyevko ) ;
11399: LD_EXP 57
11403: PPUSH
11404: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11408: LD_EXP 57
11412: PPUSH
11413: LD_INT 63
11415: PPUSH
11416: LD_INT 54
11418: PPUSH
11419: CALL_OW 171
// end ; end ;
11423: LD_VAR 0 1
11427: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
11428: LD_EXP 45
11432: PPUSH
11433: CALL_OW 303
11437: NOT
11438: PUSH
11439: LD_EXP 45
11443: PPUSH
11444: CALL_OW 301
11448: NOT
11449: OR
11450: PUSH
11451: LD_EXP 15
11455: AND
11456: IFFALSE 11797
11458: GO 11460
11460: DISABLE
// begin if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11461: LD_EXP 50
11465: PPUSH
11466: LD_INT 65
11468: PPUSH
11469: LD_INT 59
11471: PPUSH
11472: CALL_OW 297
11476: PUSH
11477: LD_INT 7
11479: LESS
11480: IFFALSE 11506
// begin ComCrawl ( Pokryshkin ) ;
11482: LD_EXP 50
11486: PPUSH
11487: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11491: LD_EXP 50
11495: PPUSH
11496: LD_INT 65
11498: PPUSH
11499: LD_INT 59
11501: PPUSH
11502: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11506: LD_EXP 51
11510: PPUSH
11511: LD_INT 65
11513: PPUSH
11514: LD_INT 58
11516: PPUSH
11517: CALL_OW 297
11521: PUSH
11522: LD_INT 7
11524: LESS
11525: IFFALSE 11551
// begin ComCrawl ( Saseda ) ;
11527: LD_EXP 51
11531: PPUSH
11532: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11536: LD_EXP 51
11540: PPUSH
11541: LD_INT 65
11543: PPUSH
11544: LD_INT 58
11546: PPUSH
11547: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11551: LD_EXP 52
11555: PPUSH
11556: LD_INT 64
11558: PPUSH
11559: LD_INT 57
11561: PPUSH
11562: CALL_OW 297
11566: PUSH
11567: LD_INT 7
11569: LESS
11570: IFFALSE 11596
// begin ComCrawl ( Jaworska ) ;
11572: LD_EXP 52
11576: PPUSH
11577: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11581: LD_EXP 52
11585: PPUSH
11586: LD_INT 64
11588: PPUSH
11589: LD_INT 57
11591: PPUSH
11592: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11596: LD_EXP 53
11600: PPUSH
11601: LD_INT 64
11603: PPUSH
11604: LD_INT 56
11606: PPUSH
11607: CALL_OW 297
11611: PUSH
11612: LD_INT 7
11614: LESS
11615: IFFALSE 11641
// begin ComCrawl ( Balei ) ;
11617: LD_EXP 53
11621: PPUSH
11622: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11626: LD_EXP 53
11630: PPUSH
11631: LD_INT 64
11633: PPUSH
11634: LD_INT 56
11636: PPUSH
11637: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11641: LD_EXP 54
11645: PPUSH
11646: LD_INT 63
11648: PPUSH
11649: LD_INT 55
11651: PPUSH
11652: CALL_OW 297
11656: PUSH
11657: LD_INT 7
11659: LESS
11660: IFFALSE 11686
// begin ComCrawl ( Belkov ) ;
11662: LD_EXP 54
11666: PPUSH
11667: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11671: LD_EXP 54
11675: PPUSH
11676: LD_INT 63
11678: PPUSH
11679: LD_INT 55
11681: PPUSH
11682: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11686: LD_EXP 55
11690: PPUSH
11691: LD_INT 66
11693: PPUSH
11694: LD_INT 58
11696: PPUSH
11697: CALL_OW 297
11701: PUSH
11702: LD_INT 7
11704: LESS
11705: IFFALSE 11731
// begin ComCrawl ( Jaunzeme ) ;
11707: LD_EXP 55
11711: PPUSH
11712: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11716: LD_EXP 55
11720: PPUSH
11721: LD_INT 66
11723: PPUSH
11724: LD_INT 58
11726: PPUSH
11727: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11731: LD_EXP 57
11735: PPUSH
11736: LD_INT 63
11738: PPUSH
11739: LD_INT 54
11741: PPUSH
11742: CALL_OW 297
11746: PUSH
11747: LD_INT 7
11749: LESS
11750: PUSH
11751: LD_EXP 57
11755: PPUSH
11756: CALL_OW 255
11760: PUSH
11761: LD_INT 6
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_EXP 12
11770: AND
11771: IFFALSE 11797
// begin ComCrawl ( Gnyevko ) ;
11773: LD_EXP 57
11777: PPUSH
11778: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11782: LD_EXP 57
11786: PPUSH
11787: LD_INT 63
11789: PPUSH
11790: LD_INT 54
11792: PPUSH
11793: CALL_OW 171
// end ; end ; end_of_file
11797: END
// export function BurlakDying ; begin
11798: LD_INT 0
11800: PPUSH
// YouLost ( Burlak ) ;
11801: LD_STRING Burlak
11803: PPUSH
11804: CALL_OW 104
// end ;
11808: LD_VAR 0 1
11812: RET
// every 0 0$1 trigger kirovSolds = 0 do
11813: LD_EXP 59
11817: PUSH
11818: LD_INT 0
11820: EQUAL
11821: IFFALSE 11833
11823: GO 11825
11825: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11826: LD_STRING KirovSoldsDie
11828: PPUSH
11829: CALL_OW 104
11833: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11834: LD_EXP 22
11838: PUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_INT 22
11844: PUSH
11845: LD_INT 3
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 71
11870: PUSH
11871: LD_INT 0
11873: EQUAL
11874: AND
11875: IFFALSE 12249
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin if IsOk ( Belkov ) then
11883: LD_EXP 54
11887: PPUSH
11888: CALL_OW 302
11892: IFFALSE 11908
// Say ( Belkov , D12-Bel-1 ) else
11894: LD_EXP 54
11898: PPUSH
11899: LD_STRING D12-Bel-1
11901: PPUSH
11902: CALL_OW 88
11906: GO 11968
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11908: LD_INT 22
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 1
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 50
11930: PUSH
11931: EMPTY
11932: LIST
11933: PUSH
11934: LD_INT 26
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_STRING D12-RSol1-1
11957: PPUSH
11958: LD_STRING 
11960: PPUSH
11961: LD_INT 0
11963: PPUSH
11964: CALL 8631 0 4
// if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or not gnyevkoSaved then
11968: LD_EXP 56
11972: PPUSH
11973: CALL_OW 302
11977: PUSH
11978: LD_EXP 56
11982: PPUSH
11983: CALL_OW 255
11987: PUSH
11988: LD_INT 8
11990: EQUAL
11991: AND
11992: PUSH
11993: LD_EXP 12
11997: NOT
11998: OR
11999: IFFALSE 12160
// begin case Query ( QExit2 ) of 1 :
12001: LD_STRING QExit2
12003: PPUSH
12004: CALL_OW 97
12008: PUSH
12009: LD_INT 1
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// begin FinishMission ;
12018: CALL 12252 0 0
// end ; 2 :
12022: GO 12158
12024: LD_INT 2
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12157
12032: POP
// begin if not gnyevkoSaved then
12033: LD_EXP 12
12037: NOT
12038: IFFALSE 12090
// begin Say ( Burlak , D12-Bur-1 ) ;
12040: LD_EXP 49
12044: PPUSH
12045: LD_STRING D12-Bur-1
12047: PPUSH
12048: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
12052: LD_EXP 54
12056: PPUSH
12057: CALL_OW 255
12061: PUSH
12062: LD_INT 3
12064: EQUAL
12065: PUSH
12066: LD_EXP 54
12070: PPUSH
12071: CALL_OW 302
12075: AND
12076: IFFALSE 12090
// Say ( Belkov , D12-Bel-2 ) ;
12078: LD_EXP 54
12082: PPUSH
12083: LD_STRING D12-Bel-2
12085: PPUSH
12086: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12090: LD_INT 35
12092: PPUSH
12093: CALL_OW 67
// until ( gnyevkoSaved or IsDead ( Gnyevko ) ) and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12097: LD_EXP 12
12101: PUSH
12102: LD_EXP 57
12106: PPUSH
12107: CALL_OW 301
12111: OR
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 22
12118: PUSH
12119: LD_INT 3
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 71
12144: PUSH
12145: LD_INT 0
12147: EQUAL
12148: AND
12149: IFFALSE 12090
// FinishMission ;
12151: CALL 12252 0 0
// end ; end ;
12155: GO 12158
12157: POP
// end else
12158: GO 12249
// begin if IsOk ( Belkov ) then
12160: LD_EXP 54
12164: PPUSH
12165: CALL_OW 302
12169: IFFALSE 12185
// Say ( Belkov , D12-Bel-1 ) else
12171: LD_EXP 54
12175: PPUSH
12176: LD_STRING D12-Bel-1
12178: PPUSH
12179: CALL_OW 88
12183: GO 12245
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 21
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 50
12207: PUSH
12208: EMPTY
12209: LIST
12210: PUSH
12211: LD_INT 26
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: PPUSH
12232: LD_STRING D12-RSol1-1
12234: PPUSH
12235: LD_STRING 
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL 8631 0 4
// FinishMission ;
12245: CALL 12252 0 0
// end ; end ;
12249: PPOPN 1
12251: END
// function FinishMission ; begin
12252: LD_INT 0
12254: PPUSH
// SetRewards ;
12255: CALL 12276 0 0
// SavePlayerCharacters ;
12259: CALL 12627 0 0
// SaveGlobalVariables ;
12263: CALL 12757 0 0
// YouWin ;
12267: CALL_OW 103
// end ;
12271: LD_VAR 0 1
12275: RET
// function SetRewards ; begin
12276: LD_INT 0
12278: PPUSH
// if not gladstoneEscape and not JohannaEscape then
12279: LD_EXP 19
12283: NOT
12284: PUSH
12285: LD_EXP 20
12289: NOT
12290: AND
12291: IFFALSE 12303
// AddMedal ( NoEscape , 1 ) ;
12293: LD_STRING NoEscape
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
12303: LD_EXP 19
12307: PUSH
12308: LD_EXP 20
12312: NOT
12313: AND
12314: IFFALSE 12327
// AddMedal ( NoEscape , - 1 ) ;
12316: LD_STRING NoEscape
12318: PPUSH
12319: LD_INT 1
12321: NEG
12322: PPUSH
12323: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
12327: LD_EXP 19
12331: NOT
12332: PUSH
12333: LD_EXP 20
12337: AND
12338: IFFALSE 12351
// AddMedal ( NoEscape , - 2 ) ;
12340: LD_STRING NoEscape
12342: PPUSH
12343: LD_INT 2
12345: NEG
12346: PPUSH
12347: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
12351: LD_EXP 19
12355: PUSH
12356: LD_EXP 20
12360: AND
12361: IFFALSE 12374
// AddMedal ( NoEscape , - 3 ) ;
12363: LD_STRING NoEscape
12365: PPUSH
12366: LD_INT 3
12368: NEG
12369: PPUSH
12370: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
12374: LD_EXP 12
12378: PUSH
12379: LD_EXP 57
12383: PPUSH
12384: CALL_OW 302
12388: AND
12389: PUSH
12390: LD_EXP 21
12394: AND
12395: PUSH
12396: LD_EXP 56
12400: PPUSH
12401: CALL_OW 302
12405: AND
12406: IFFALSE 12418
// AddMedal ( Gnyevko , 1 ) ;
12408: LD_STRING Gnyevko
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
12418: LD_EXP 12
12422: NOT
12423: PUSH
12424: LD_EXP 21
12428: AND
12429: PUSH
12430: LD_EXP 56
12434: PPUSH
12435: CALL_OW 302
12439: AND
12440: IFFALSE 12453
// AddMedal ( Gnyevko , - 1 ) ;
12442: LD_STRING Gnyevko
12444: PPUSH
12445: LD_INT 1
12447: NEG
12448: PPUSH
12449: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
12453: LD_EXP 12
12457: PUSH
12458: LD_EXP 21
12462: NOT
12463: PUSH
12464: LD_EXP 57
12468: PPUSH
12469: CALL_OW 302
12473: NOT
12474: OR
12475: PUSH
12476: LD_EXP 56
12480: PPUSH
12481: CALL_OW 302
12485: NOT
12486: OR
12487: AND
12488: IFFALSE 12501
// AddMedal ( Gnyevko , - 2 ) ;
12490: LD_STRING Gnyevko
12492: PPUSH
12493: LD_INT 2
12495: NEG
12496: PPUSH
12497: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
12501: LD_EXP 12
12505: NOT
12506: PUSH
12507: LD_EXP 21
12511: NOT
12512: AND
12513: PUSH
12514: LD_EXP 57
12518: PPUSH
12519: CALL_OW 302
12523: NOT
12524: PUSH
12525: LD_EXP 56
12529: PPUSH
12530: CALL_OW 302
12534: NOT
12535: AND
12536: OR
12537: IFFALSE 12550
// AddMedal ( Gnyevko , - 3 ) ;
12539: LD_STRING Gnyevko
12541: PPUSH
12542: LD_INT 3
12544: NEG
12545: PPUSH
12546: CALL_OW 101
// if lostComradesCounter = 0 then
12550: LD_EXP 23
12554: PUSH
12555: LD_INT 0
12557: EQUAL
12558: IFFALSE 12572
// AddMedal ( NoLosses , 1 ) else
12560: LD_STRING NoLosses
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 101
12570: GO 12582
// AddMedal ( NoLosses , 0 ) ;
12572: LD_STRING NoLosses
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 101
// GiveMedals ( Main ) ;
12582: LD_STRING Main
12584: PPUSH
12585: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PPUSH
12618: CALL_OW 43
// end ;
12622: LD_VAR 0 1
12626: RET
// function SavePlayerCharacters ; var others ; begin
12627: LD_INT 0
12629: PPUSH
12630: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12631: LD_EXP 49
12635: PPUSH
12636: LD_STRING Burlak
12638: PPUSH
12639: CALL 8861 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12643: LD_EXP 57
12647: PPUSH
12648: LD_STRING Gnyevko
12650: PPUSH
12651: CALL 8861 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12655: LD_EXP 54
12659: PPUSH
12660: LD_STRING Belkov
12662: PPUSH
12663: CALL 8861 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12667: LD_EXP 56
12671: PPUSH
12672: LD_STRING Kirilenkova
12674: PPUSH
12675: CALL 8861 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12679: LD_ADDR_VAR 0 2
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: PUSH
12713: LD_EXP 49
12717: PUSH
12718: LD_EXP 57
12722: PUSH
12723: LD_EXP 54
12727: PUSH
12728: LD_EXP 56
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: DIFF
12739: ST_TO_ADDR
// ExtSaveCharacters ( others , OtherSurvivors ) ;
12740: LD_VAR 0 2
12744: PPUSH
12745: LD_STRING OtherSurvivors
12747: PPUSH
12748: CALL 8917 0 2
// end ;
12752: LD_VAR 0 1
12756: RET
// function SaveGlobalVariables ; begin
12757: LD_INT 0
12759: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12760: LD_EXP 1
12764: PPUSH
12765: LD_STRING 01_GladstoneStatus
12767: PPUSH
12768: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12772: LD_EXP 2
12776: PPUSH
12777: LD_STRING 01_JohannaStatus
12779: PPUSH
12780: CALL_OW 39
// end ; end_of_file
12784: LD_VAR 0 1
12788: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12789: LD_INT 0
12791: PPUSH
12792: PPUSH
12793: PPUSH
// InitHc_All ( ) ;
12794: CALL_OW 584
// uc_side = 1 ;
12798: LD_ADDR_OWVAR 20
12802: PUSH
12803: LD_INT 1
12805: ST_TO_ADDR
// hc_class := 1 ;
12806: LD_ADDR_OWVAR 28
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// hc_sex := sex_male ;
12814: LD_ADDR_OWVAR 27
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12822: LD_ADDR_OWVAR 33
12826: PUSH
12827: LD_STRING AmGalRemake
12829: ST_TO_ADDR
// hc_face_number := 1 ;
12830: LD_ADDR_OWVAR 34
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// hc_name := Charles Brown ;
12838: LD_ADDR_OWVAR 26
12842: PUSH
12843: LD_STRING Charles Brown
12845: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12846: LD_ADDR_OWVAR 29
12850: PUSH
12851: LD_INT 12
12853: PUSH
12854: LD_INT 11
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12861: LD_ADDR_OWVAR 31
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: LD_INT 0
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// Charles = CreateHuman ;
12884: LD_ADDR_EXP 45
12888: PUSH
12889: CALL_OW 44
12893: ST_TO_ADDR
// hc_class := 1 ;
12894: LD_ADDR_OWVAR 28
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// hc_sex := sex_female ;
12902: LD_ADDR_OWVAR 27
12906: PUSH
12907: LD_INT 2
12909: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12910: LD_ADDR_OWVAR 33
12914: PUSH
12915: LD_STRING AmGalRemake
12917: ST_TO_ADDR
// hc_face_number := 2 ;
12918: LD_ADDR_OWVAR 34
12922: PUSH
12923: LD_INT 2
12925: ST_TO_ADDR
// hc_name := Johanna Holland ;
12926: LD_ADDR_OWVAR 26
12930: PUSH
12931: LD_STRING Johanna Holland
12933: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12934: LD_ADDR_OWVAR 29
12938: PUSH
12939: LD_INT 12
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12949: LD_ADDR_OWVAR 31
12953: PUSH
12954: LD_EXP 39
12958: PUSH
12959: LD_INT 0
12961: PPUSH
12962: LD_INT 2
12964: PPUSH
12965: CALL_OW 12
12969: PUSH
12970: LD_INT 0
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 12
12980: PUSH
12981: LD_INT 0
12983: PPUSH
12984: LD_INT 2
12986: PPUSH
12987: CALL_OW 12
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// Johanna = CreateHuman ;
12998: LD_ADDR_EXP 46
13002: PUSH
13003: CALL_OW 44
13007: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
13008: LD_EXP 46
13012: PPUSH
13013: LD_INT 19
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
13023: LD_EXP 46
13027: PPUSH
13028: LD_INT 23
13030: PPUSH
13031: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
13035: LD_ADDR_EXP 47
13039: PUSH
13040: LD_STRING Gladstone
13042: PPUSH
13043: LD_INT 0
13045: PPUSH
13046: CALL 8568 0 2
13050: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
13051: LD_EXP 47
13055: PPUSH
13056: LD_INT 22
13058: PPUSH
13059: CALL_OW 52
// amApemans = [ ] ;
13063: LD_ADDR_EXP 48
13067: PUSH
13068: EMPTY
13069: ST_TO_ADDR
// for i := 1 to amApeAmount do
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: DOUBLE
13076: LD_INT 1
13078: DEC
13079: ST_TO_ADDR
13080: LD_EXP 38
13084: PUSH
13085: FOR_TO
13086: IFFALSE 13208
// begin InitHC_All ( ) ;
13088: CALL_OW 584
// hc_class := class_apeman ;
13092: LD_ADDR_OWVAR 28
13096: PUSH
13097: LD_INT 12
13099: ST_TO_ADDR
// hc_gallery :=  ;
13100: LD_ADDR_OWVAR 33
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// hc_name :=  ;
13108: LD_ADDR_OWVAR 26
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
13116: LD_ADDR_OWVAR 31
13120: PUSH
13121: LD_EXP 39
13125: PUSH
13126: LD_INT 0
13128: PPUSH
13129: LD_INT 2
13131: PPUSH
13132: CALL_OW 12
13136: PUSH
13137: LD_INT 0
13139: PPUSH
13140: LD_INT 2
13142: PPUSH
13143: CALL_OW 12
13147: PUSH
13148: LD_INT 0
13150: PPUSH
13151: LD_INT 2
13153: PPUSH
13154: CALL_OW 12
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: ST_TO_ADDR
// ape = CreateHuman ;
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: CALL_OW 44
13174: ST_TO_ADDR
// PlaceUnitArea ( ape , AmApeResp , false ) ;
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 29
13182: PPUSH
13183: LD_INT 0
13185: PPUSH
13186: CALL_OW 49
// amApemans = amApemans ^ ape ;
13190: LD_ADDR_EXP 48
13194: PUSH
13195: LD_EXP 48
13199: PUSH
13200: LD_VAR 0 3
13204: ADD
13205: ST_TO_ADDR
// end ;
13206: GO 13085
13208: POP
13209: POP
// SetLives ( am_bun , americanBunkerHP ) ;
13210: LD_INT 23
13212: PPUSH
13213: LD_EXP 36
13217: PPUSH
13218: CALL_OW 234
// end ; end_of_file
13222: LD_VAR 0 1
13226: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
13227: LD_INT 0
13229: PPUSH
// PrepareHero ;
13230: CALL 13255 0 0
// PreparePokryshkinTeams ;
13234: CALL 13349 0 0
// PrepareJelena ;
13238: CALL 13614 0 0
// PrepareGnyevko ;
13242: CALL 13646 0 0
// PrepareKurin ;
13246: CALL 13317 0 0
// end ;
13250: LD_VAR 0 1
13254: RET
// function PrepareHero ; begin
13255: LD_INT 0
13257: PPUSH
// uc_side = 3 ;
13258: LD_ADDR_OWVAR 20
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
13266: LD_ADDR_EXP 49
13270: PUSH
13271: LD_STRING Burlak
13273: PPUSH
13274: LD_INT 0
13276: PPUSH
13277: CALL 8568 0 2
13281: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
13282: LD_EXP 49
13286: PPUSH
13287: LD_EXP 40
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: LD_EXP 40
13300: PUSH
13301: LD_INT 2
13303: ARRAY
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 48
// end ;
13312: LD_VAR 0 1
13316: RET
// function PrepareKurin ; begin
13317: LD_INT 0
13319: PPUSH
// uc_side = 6 ;
13320: LD_ADDR_OWVAR 20
13324: PUSH
13325: LD_INT 6
13327: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
13328: LD_ADDR_EXP 58
13332: PUSH
13333: LD_STRING Kurin
13335: PPUSH
13336: LD_INT 0
13338: PPUSH
13339: CALL 8568 0 2
13343: ST_TO_ADDR
// end ;
13344: LD_VAR 0 1
13348: RET
// function PreparePokryshkinTeams ; begin
13349: LD_INT 0
13351: PPUSH
// uc_side = 6 ;
13352: LD_ADDR_OWVAR 20
13356: PUSH
13357: LD_INT 6
13359: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
13360: LD_ADDR_EXP 50
13364: PUSH
13365: LD_STRING Pokryshkin
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL 8568 0 2
13375: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
13376: LD_ADDR_EXP 51
13380: PUSH
13381: LD_STRING Saseda
13383: PPUSH
13384: LD_INT 0
13386: PPUSH
13387: CALL 8568 0 2
13391: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
13392: LD_ADDR_EXP 52
13396: PUSH
13397: LD_STRING Jaworska
13399: PPUSH
13400: LD_INT 0
13402: PPUSH
13403: CALL 8568 0 2
13407: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
13408: LD_ADDR_EXP 53
13412: PUSH
13413: LD_STRING Balei
13415: PPUSH
13416: LD_INT 0
13418: PPUSH
13419: CALL 8568 0 2
13423: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
13424: LD_ADDR_EXP 54
13428: PUSH
13429: LD_STRING Belkov
13431: PPUSH
13432: LD_INT 0
13434: PPUSH
13435: CALL 8568 0 2
13439: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
13440: LD_EXP 50
13444: PPUSH
13445: LD_INT 25
13447: PPUSH
13448: LD_INT 0
13450: PPUSH
13451: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
13455: LD_EXP 51
13459: PPUSH
13460: LD_INT 17
13462: PPUSH
13463: LD_INT 0
13465: PPUSH
13466: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
13470: LD_EXP 52
13474: PPUSH
13475: LD_INT 17
13477: PPUSH
13478: LD_INT 0
13480: PPUSH
13481: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
13485: LD_EXP 53
13489: PPUSH
13490: LD_INT 17
13492: PPUSH
13493: LD_INT 0
13495: PPUSH
13496: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
13500: LD_EXP 54
13504: PPUSH
13505: LD_INT 17
13507: PPUSH
13508: LD_INT 0
13510: PPUSH
13511: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
13515: LD_ADDR_EXP 59
13519: PUSH
13520: LD_EXP 50
13524: PUSH
13525: LD_EXP 51
13529: PUSH
13530: LD_EXP 53
13534: PUSH
13535: LD_EXP 54
13539: PUSH
13540: LD_EXP 52
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: ST_TO_ADDR
// if Difficulty < 3 then
13552: LD_OWVAR 67
13556: PUSH
13557: LD_INT 3
13559: LESS
13560: IFFALSE 13609
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
13562: LD_ADDR_EXP 55
13566: PUSH
13567: LD_STRING Jaunzeme
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL 8568 0 2
13577: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
13578: LD_EXP 55
13582: PPUSH
13583: LD_INT 26
13585: PPUSH
13586: LD_INT 0
13588: PPUSH
13589: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
13593: LD_ADDR_EXP 59
13597: PUSH
13598: LD_EXP 59
13602: PUSH
13603: LD_EXP 55
13607: ADD
13608: ST_TO_ADDR
// end ; end ;
13609: LD_VAR 0 1
13613: RET
// function PrepareJelena ; begin
13614: LD_INT 0
13616: PPUSH
// uc_side = 5 ;
13617: LD_ADDR_OWVAR 20
13621: PUSH
13622: LD_INT 5
13624: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13625: LD_ADDR_EXP 56
13629: PUSH
13630: LD_STRING Kirilenkova
13632: PPUSH
13633: LD_INT 0
13635: PPUSH
13636: CALL 8568 0 2
13640: ST_TO_ADDR
// end ;
13641: LD_VAR 0 1
13645: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
// uc_side = 5 ;
13652: LD_ADDR_OWVAR 20
13656: PUSH
13657: LD_INT 5
13659: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13660: LD_ADDR_EXP 57
13664: PUSH
13665: LD_STRING Gnyevko
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL 8568 0 2
13675: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13676: LD_ADDR_VAR 0 4
13680: PUSH
13681: LD_EXP 41
13685: PUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_EXP 41
13693: PPUSH
13694: CALL_OW 12
13698: ARRAY
13699: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13700: LD_EXP 57
13704: PPUSH
13705: LD_VAR 0 4
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13730: LD_EXP 57
13734: PPUSH
13735: LD_EXP 42
13739: PPUSH
13740: CALL_OW 234
// ComHold ( Gnyevko ) ;
13744: LD_EXP 57
13748: PPUSH
13749: CALL_OW 140
// InitHC_All ( ) ;
13753: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_EXP 30
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_OWVAR 67
13798: ARRAY
13799: MINUS
13800: PUSH
13801: FOR_TO
13802: IFFALSE 13932
// begin uc_side = 0 ;
13804: LD_ADDR_OWVAR 20
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// uc_nation = nation_nature ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_INT 0
13819: ST_TO_ADDR
// hc_class = class_apeman ;
13820: LD_ADDR_OWVAR 28
13824: PUSH
13825: LD_INT 12
13827: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13828: LD_ADDR_OWVAR 31
13832: PUSH
13833: LD_EXP 31
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PUSH
13842: LD_EXP 31
13846: PUSH
13847: LD_INT 2
13849: ARRAY
13850: PUSH
13851: LD_EXP 31
13855: PUSH
13856: LD_INT 3
13858: ARRAY
13859: PUSH
13860: LD_EXP 31
13864: PUSH
13865: LD_INT 4
13867: ARRAY
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13875: LD_ADDR_OWVAR 35
13879: PUSH
13880: LD_EXP 37
13884: ST_TO_ADDR
// un = CreateHuman ;
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13895: LD_VAR 0 2
13899: PPUSH
13900: LD_EXP 57
13904: PPUSH
13905: CALL_OW 250
13909: PPUSH
13910: LD_EXP 57
13914: PPUSH
13915: CALL_OW 251
13919: PPUSH
13920: LD_INT 8
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 50
// end ;
13930: GO 13801
13932: POP
13933: POP
// end ; end_of_file
13934: LD_VAR 0 1
13938: RET
// export function CreateNature ; var i , un ; begin
13939: LD_INT 0
13941: PPUSH
13942: PPUSH
13943: PPUSH
// InitHC_All ( ) ;
13944: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] do
13948: LD_ADDR_VAR 0 2
13952: PUSH
13953: DOUBLE
13954: LD_INT 1
13956: DEC
13957: ST_TO_ADDR
13958: LD_EXP 30
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PUSH
13967: FOR_TO
13968: IFFALSE 14078
// begin uc_side = 0 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// uc_nation = nation_nature ;
13978: LD_ADDR_OWVAR 21
13982: PUSH
13983: LD_INT 0
13985: ST_TO_ADDR
// hc_class = class_apeman ;
13986: LD_ADDR_OWVAR 28
13990: PUSH
13991: LD_INT 12
13993: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13994: LD_ADDR_OWVAR 31
13998: PUSH
13999: LD_EXP 31
14003: PUSH
14004: LD_INT 1
14006: ARRAY
14007: PUSH
14008: LD_EXP 31
14012: PUSH
14013: LD_INT 2
14015: ARRAY
14016: PUSH
14017: LD_EXP 31
14021: PUSH
14022: LD_INT 3
14024: ARRAY
14025: PUSH
14026: LD_EXP 31
14030: PUSH
14031: LD_INT 4
14033: ARRAY
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: ST_TO_ADDR
// hc_agressivity = apeAgression ;
14041: LD_ADDR_OWVAR 35
14045: PUSH
14046: LD_EXP 37
14050: ST_TO_ADDR
// un = CreateHuman ;
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: CALL_OW 44
14060: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 16
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// end ;
14076: GO 13967
14078: POP
14079: POP
// for i := 1 to animalsAmount [ 2 ] do
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_EXP 30
14094: PUSH
14095: LD_INT 2
14097: ARRAY
14098: PUSH
14099: FOR_TO
14100: IFFALSE 14210
// begin uc_side = 0 ;
14102: LD_ADDR_OWVAR 20
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// uc_nation = nation_nature ;
14110: LD_ADDR_OWVAR 21
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// hc_class = class_phororhacos ;
14118: LD_ADDR_OWVAR 28
14122: PUSH
14123: LD_INT 18
14125: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14126: LD_ADDR_OWVAR 31
14130: PUSH
14131: LD_EXP 31
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PUSH
14140: LD_EXP 31
14144: PUSH
14145: LD_INT 2
14147: ARRAY
14148: PUSH
14149: LD_EXP 31
14153: PUSH
14154: LD_INT 3
14156: ARRAY
14157: PUSH
14158: LD_EXP 31
14162: PUSH
14163: LD_INT 4
14165: ARRAY
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14173: LD_ADDR_OWVAR 35
14177: PUSH
14178: LD_EXP 32
14182: ST_TO_ADDR
// un = CreateHuman ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: CALL_OW 44
14192: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14193: LD_VAR 0 3
14197: PPUSH
14198: LD_INT 15
14200: PPUSH
14201: LD_INT 0
14203: PPUSH
14204: CALL_OW 49
// end ;
14208: GO 14099
14210: POP
14211: POP
// for i := 1 to animalsAmount [ 3 ] do
14212: LD_ADDR_VAR 0 2
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_EXP 30
14226: PUSH
14227: LD_INT 3
14229: ARRAY
14230: PUSH
14231: FOR_TO
14232: IFFALSE 14342
// begin uc_side = 0 ;
14234: LD_ADDR_OWVAR 20
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// uc_nation = nation_nature ;
14242: LD_ADDR_OWVAR 21
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// hc_class = class_tiger ;
14250: LD_ADDR_OWVAR 28
14254: PUSH
14255: LD_INT 14
14257: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14258: LD_ADDR_OWVAR 31
14262: PUSH
14263: LD_EXP 31
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PUSH
14272: LD_EXP 31
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PUSH
14281: LD_EXP 31
14285: PUSH
14286: LD_INT 3
14288: ARRAY
14289: PUSH
14290: LD_EXP 31
14294: PUSH
14295: LD_INT 4
14297: ARRAY
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14305: LD_ADDR_OWVAR 35
14309: PUSH
14310: LD_EXP 32
14314: ST_TO_ADDR
// un = CreateHuman ;
14315: LD_ADDR_VAR 0 3
14319: PUSH
14320: CALL_OW 44
14324: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_INT 15
14332: PPUSH
14333: LD_INT 0
14335: PPUSH
14336: CALL_OW 49
// end ;
14340: GO 14231
14342: POP
14343: POP
// for i := 1 to animalsAmount [ 4 ] do
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_EXP 30
14358: PUSH
14359: LD_INT 4
14361: ARRAY
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14474
// begin uc_side = 0 ;
14366: LD_ADDR_OWVAR 20
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// uc_nation = nation_nature ;
14374: LD_ADDR_OWVAR 21
14378: PUSH
14379: LD_INT 0
14381: ST_TO_ADDR
// hc_class = 21 ;
14382: LD_ADDR_OWVAR 28
14386: PUSH
14387: LD_INT 21
14389: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14390: LD_ADDR_OWVAR 31
14394: PUSH
14395: LD_EXP 31
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PUSH
14404: LD_EXP 31
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PUSH
14413: LD_EXP 31
14417: PUSH
14418: LD_INT 3
14420: ARRAY
14421: PUSH
14422: LD_EXP 31
14426: PUSH
14427: LD_INT 4
14429: ARRAY
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14437: LD_ADDR_OWVAR 35
14441: PUSH
14442: LD_EXP 32
14446: ST_TO_ADDR
// un = CreateHuman ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: CALL_OW 44
14456: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14457: LD_VAR 0 3
14461: PPUSH
14462: LD_INT 15
14464: PPUSH
14465: LD_INT 0
14467: PPUSH
14468: CALL_OW 49
// end ;
14472: GO 14363
14474: POP
14475: POP
// end ; end_of_file
14476: LD_VAR 0 1
14480: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
14481: LD_VAR 0 1
14485: PUSH
14486: LD_EXP 49
14490: EQUAL
14491: PUSH
14492: LD_EXP 56
14496: PPUSH
14497: CALL_OW 255
14501: PUSH
14502: LD_INT 3
14504: EQUAL
14505: NOT
14506: AND
14507: PUSH
14508: LD_EXP 56
14512: PPUSH
14513: CALL_OW 302
14517: NOT
14518: AND
14519: IFFALSE 14525
// BurlakDying ;
14521: CALL 11798 0 0
// if unit = Gladstone then
14525: LD_VAR 0 1
14529: PUSH
14530: LD_EXP 47
14534: EQUAL
14535: IFFALSE 14545
// gladstoneStatus = 0 ;
14537: LD_ADDR_EXP 1
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// if unit = Johanna then
14545: LD_VAR 0 1
14549: PUSH
14550: LD_EXP 46
14554: EQUAL
14555: IFFALSE 14565
// johannaStatus = 0 ;
14557: LD_ADDR_EXP 2
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// end ;
14565: PPOPN 1
14567: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
14568: LD_VAR 0 1
14572: PUSH
14573: LD_EXP 49
14577: EQUAL
14578: IFFALSE 14584
// BurlakDying ;
14580: CALL 11798 0 0
// if GetSide ( unit ) = 3 then
14584: LD_VAR 0 1
14588: PPUSH
14589: CALL_OW 255
14593: PUSH
14594: LD_INT 3
14596: EQUAL
14597: IFFALSE 14613
// lostComradesCounter = lostComradesCounter + 1 ;
14599: LD_ADDR_EXP 23
14603: PUSH
14604: LD_EXP 23
14608: PUSH
14609: LD_INT 1
14611: PLUS
14612: ST_TO_ADDR
// if unit in kirovSolds then
14613: LD_VAR 0 1
14617: PUSH
14618: LD_EXP 59
14622: IN
14623: IFFALSE 14641
// kirovSolds = kirovSolds diff unit ;
14625: LD_ADDR_EXP 59
14629: PUSH
14630: LD_EXP 59
14634: PUSH
14635: LD_VAR 0 1
14639: DIFF
14640: ST_TO_ADDR
// end ;
14641: PPOPN 1
14643: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14644: LD_VAR 0 1
14648: PUSH
14649: LD_INT 3
14651: EQUAL
14652: PUSH
14653: LD_VAR 0 2
14657: PUSH
14658: LD_INT 1
14660: EQUAL
14661: AND
14662: PUSH
14663: LD_VAR 0 1
14667: PUSH
14668: LD_INT 1
14670: EQUAL
14671: PUSH
14672: LD_VAR 0 2
14676: PUSH
14677: LD_INT 3
14679: EQUAL
14680: AND
14681: PUSH
14682: LD_EXP 17
14686: PUSH
14687: LD_INT 1
14689: EQUAL
14690: AND
14691: OR
14692: IFFALSE 14698
// Dial_SecondAttack ;
14694: CALL 6016 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14698: LD_VAR 0 1
14702: PUSH
14703: LD_INT 3
14705: EQUAL
14706: PUSH
14707: LD_VAR 0 2
14711: PUSH
14712: LD_INT 6
14714: EQUAL
14715: AND
14716: PUSH
14717: LD_EXP 18
14721: NOT
14722: AND
14723: IFFALSE 14729
// Dialogue_AttackComrade ;
14725: CALL 4057 0 0
// end ; end_of_file
14729: PPOPN 2
14731: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14732: LD_EXP 56
14736: PPUSH
14737: CALL_OW 255
14741: PUSH
14742: LD_INT 3
14744: EQUAL
14745: PUSH
14746: LD_EXP 29
14750: PUSH
14751: LD_INT 525
14753: LESS
14754: AND
14755: IFFALSE 14767
14757: GO 14759
14759: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14760: LD_STRING ACH_YELENA
14762: PPUSH
14763: CALL_OW 543
14767: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14768: LD_INT 23
14770: PUSH
14771: LD_INT 0
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: PUSH
14778: LD_INT 2
14780: PUSH
14781: LD_INT 25
14783: PUSH
14784: LD_INT 14
14786: PUSH
14787: EMPTY
14788: LIST
14789: LIST
14790: PUSH
14791: LD_INT 25
14793: PUSH
14794: LD_INT 18
14796: PUSH
14797: EMPTY
14798: LIST
14799: LIST
14800: PUSH
14801: LD_INT 25
14803: PUSH
14804: LD_INT 12
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PPUSH
14821: CALL_OW 69
14825: NOT
14826: IFFALSE 14838
14828: GO 14830
14830: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14831: LD_STRING ACH_NATURE
14833: PPUSH
14834: CALL_OW 543
14838: END
// every 0 0$1 do
14839: GO 14841
14841: DISABLE
// begin enable ;
14842: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14843: LD_STRING updateTimer(
14845: PUSH
14846: LD_OWVAR 1
14850: STR
14851: PUSH
14852: LD_STRING );
14854: STR
14855: PPUSH
14856: CALL_OW 559
// end ;
14860: END
// on MapStart ( p ) do begin if streamModeActive then
14861: LD_EXP 60
14865: IFFALSE 14874
// DefineStreamItems ( true ) ;
14867: LD_INT 1
14869: PPUSH
14870: CALL 16522 0 1
// UpdateFactoryWaypoints ( ) ;
14874: CALL 30106 0 0
// end ;
14878: PPOPN 1
14880: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
14881: LD_INT 0
14883: PPUSH
// if p2 = 100 then
14884: LD_VAR 0 2
14888: PUSH
14889: LD_INT 100
14891: EQUAL
14892: IFFALSE 15895
// begin if not StreamModeActive then
14894: LD_EXP 60
14898: NOT
14899: IFFALSE 14909
// StreamModeActive := true ;
14901: LD_ADDR_EXP 60
14905: PUSH
14906: LD_INT 1
14908: ST_TO_ADDR
// if p3 = 0 then
14909: LD_VAR 0 3
14913: PUSH
14914: LD_INT 0
14916: EQUAL
14917: IFFALSE 14923
// InitStreamMode ;
14919: CALL 16058 0 0
// if p3 = 1 then
14923: LD_VAR 0 3
14927: PUSH
14928: LD_INT 1
14930: EQUAL
14931: IFFALSE 14941
// sRocket := true ;
14933: LD_ADDR_EXP 65
14937: PUSH
14938: LD_INT 1
14940: ST_TO_ADDR
// if p3 = 2 then
14941: LD_VAR 0 3
14945: PUSH
14946: LD_INT 2
14948: EQUAL
14949: IFFALSE 14959
// sSpeed := true ;
14951: LD_ADDR_EXP 64
14955: PUSH
14956: LD_INT 1
14958: ST_TO_ADDR
// if p3 = 3 then
14959: LD_VAR 0 3
14963: PUSH
14964: LD_INT 3
14966: EQUAL
14967: IFFALSE 14977
// sEngine := true ;
14969: LD_ADDR_EXP 66
14973: PUSH
14974: LD_INT 1
14976: ST_TO_ADDR
// if p3 = 4 then
14977: LD_VAR 0 3
14981: PUSH
14982: LD_INT 4
14984: EQUAL
14985: IFFALSE 14995
// sSpec := true ;
14987: LD_ADDR_EXP 63
14991: PUSH
14992: LD_INT 1
14994: ST_TO_ADDR
// if p3 = 5 then
14995: LD_VAR 0 3
14999: PUSH
15000: LD_INT 5
15002: EQUAL
15003: IFFALSE 15013
// sLevel := true ;
15005: LD_ADDR_EXP 67
15009: PUSH
15010: LD_INT 1
15012: ST_TO_ADDR
// if p3 = 6 then
15013: LD_VAR 0 3
15017: PUSH
15018: LD_INT 6
15020: EQUAL
15021: IFFALSE 15031
// sArmoury := true ;
15023: LD_ADDR_EXP 68
15027: PUSH
15028: LD_INT 1
15030: ST_TO_ADDR
// if p3 = 7 then
15031: LD_VAR 0 3
15035: PUSH
15036: LD_INT 7
15038: EQUAL
15039: IFFALSE 15049
// sRadar := true ;
15041: LD_ADDR_EXP 69
15045: PUSH
15046: LD_INT 1
15048: ST_TO_ADDR
// if p3 = 8 then
15049: LD_VAR 0 3
15053: PUSH
15054: LD_INT 8
15056: EQUAL
15057: IFFALSE 15067
// sBunker := true ;
15059: LD_ADDR_EXP 70
15063: PUSH
15064: LD_INT 1
15066: ST_TO_ADDR
// if p3 = 9 then
15067: LD_VAR 0 3
15071: PUSH
15072: LD_INT 9
15074: EQUAL
15075: IFFALSE 15085
// sHack := true ;
15077: LD_ADDR_EXP 71
15081: PUSH
15082: LD_INT 1
15084: ST_TO_ADDR
// if p3 = 10 then
15085: LD_VAR 0 3
15089: PUSH
15090: LD_INT 10
15092: EQUAL
15093: IFFALSE 15103
// sFire := true ;
15095: LD_ADDR_EXP 72
15099: PUSH
15100: LD_INT 1
15102: ST_TO_ADDR
// if p3 = 11 then
15103: LD_VAR 0 3
15107: PUSH
15108: LD_INT 11
15110: EQUAL
15111: IFFALSE 15121
// sRefresh := true ;
15113: LD_ADDR_EXP 73
15117: PUSH
15118: LD_INT 1
15120: ST_TO_ADDR
// if p3 = 12 then
15121: LD_VAR 0 3
15125: PUSH
15126: LD_INT 12
15128: EQUAL
15129: IFFALSE 15139
// sExp := true ;
15131: LD_ADDR_EXP 74
15135: PUSH
15136: LD_INT 1
15138: ST_TO_ADDR
// if p3 = 13 then
15139: LD_VAR 0 3
15143: PUSH
15144: LD_INT 13
15146: EQUAL
15147: IFFALSE 15157
// sDepot := true ;
15149: LD_ADDR_EXP 75
15153: PUSH
15154: LD_INT 1
15156: ST_TO_ADDR
// if p3 = 14 then
15157: LD_VAR 0 3
15161: PUSH
15162: LD_INT 14
15164: EQUAL
15165: IFFALSE 15175
// sFlag := true ;
15167: LD_ADDR_EXP 76
15171: PUSH
15172: LD_INT 1
15174: ST_TO_ADDR
// if p3 = 15 then
15175: LD_VAR 0 3
15179: PUSH
15180: LD_INT 15
15182: EQUAL
15183: IFFALSE 15193
// sKamikadze := true ;
15185: LD_ADDR_EXP 84
15189: PUSH
15190: LD_INT 1
15192: ST_TO_ADDR
// if p3 = 16 then
15193: LD_VAR 0 3
15197: PUSH
15198: LD_INT 16
15200: EQUAL
15201: IFFALSE 15211
// sTroll := true ;
15203: LD_ADDR_EXP 85
15207: PUSH
15208: LD_INT 1
15210: ST_TO_ADDR
// if p3 = 17 then
15211: LD_VAR 0 3
15215: PUSH
15216: LD_INT 17
15218: EQUAL
15219: IFFALSE 15229
// sSlow := true ;
15221: LD_ADDR_EXP 86
15225: PUSH
15226: LD_INT 1
15228: ST_TO_ADDR
// if p3 = 18 then
15229: LD_VAR 0 3
15233: PUSH
15234: LD_INT 18
15236: EQUAL
15237: IFFALSE 15247
// sLack := true ;
15239: LD_ADDR_EXP 87
15243: PUSH
15244: LD_INT 1
15246: ST_TO_ADDR
// if p3 = 19 then
15247: LD_VAR 0 3
15251: PUSH
15252: LD_INT 19
15254: EQUAL
15255: IFFALSE 15265
// sTank := true ;
15257: LD_ADDR_EXP 89
15261: PUSH
15262: LD_INT 1
15264: ST_TO_ADDR
// if p3 = 20 then
15265: LD_VAR 0 3
15269: PUSH
15270: LD_INT 20
15272: EQUAL
15273: IFFALSE 15283
// sRemote := true ;
15275: LD_ADDR_EXP 90
15279: PUSH
15280: LD_INT 1
15282: ST_TO_ADDR
// if p3 = 21 then
15283: LD_VAR 0 3
15287: PUSH
15288: LD_INT 21
15290: EQUAL
15291: IFFALSE 15301
// sPowell := true ;
15293: LD_ADDR_EXP 91
15297: PUSH
15298: LD_INT 1
15300: ST_TO_ADDR
// if p3 = 22 then
15301: LD_VAR 0 3
15305: PUSH
15306: LD_INT 22
15308: EQUAL
15309: IFFALSE 15319
// sTeleport := true ;
15311: LD_ADDR_EXP 94
15315: PUSH
15316: LD_INT 1
15318: ST_TO_ADDR
// if p3 = 23 then
15319: LD_VAR 0 3
15323: PUSH
15324: LD_INT 23
15326: EQUAL
15327: IFFALSE 15337
// sOilTower := true ;
15329: LD_ADDR_EXP 96
15333: PUSH
15334: LD_INT 1
15336: ST_TO_ADDR
// if p3 = 24 then
15337: LD_VAR 0 3
15341: PUSH
15342: LD_INT 24
15344: EQUAL
15345: IFFALSE 15355
// sShovel := true ;
15347: LD_ADDR_EXP 97
15351: PUSH
15352: LD_INT 1
15354: ST_TO_ADDR
// if p3 = 25 then
15355: LD_VAR 0 3
15359: PUSH
15360: LD_INT 25
15362: EQUAL
15363: IFFALSE 15373
// sSheik := true ;
15365: LD_ADDR_EXP 98
15369: PUSH
15370: LD_INT 1
15372: ST_TO_ADDR
// if p3 = 26 then
15373: LD_VAR 0 3
15377: PUSH
15378: LD_INT 26
15380: EQUAL
15381: IFFALSE 15391
// sEarthquake := true ;
15383: LD_ADDR_EXP 100
15387: PUSH
15388: LD_INT 1
15390: ST_TO_ADDR
// if p3 = 27 then
15391: LD_VAR 0 3
15395: PUSH
15396: LD_INT 27
15398: EQUAL
15399: IFFALSE 15409
// sAI := true ;
15401: LD_ADDR_EXP 101
15405: PUSH
15406: LD_INT 1
15408: ST_TO_ADDR
// if p3 = 28 then
15409: LD_VAR 0 3
15413: PUSH
15414: LD_INT 28
15416: EQUAL
15417: IFFALSE 15427
// sCargo := true ;
15419: LD_ADDR_EXP 104
15423: PUSH
15424: LD_INT 1
15426: ST_TO_ADDR
// if p3 = 29 then
15427: LD_VAR 0 3
15431: PUSH
15432: LD_INT 29
15434: EQUAL
15435: IFFALSE 15445
// sDLaser := true ;
15437: LD_ADDR_EXP 105
15441: PUSH
15442: LD_INT 1
15444: ST_TO_ADDR
// if p3 = 30 then
15445: LD_VAR 0 3
15449: PUSH
15450: LD_INT 30
15452: EQUAL
15453: IFFALSE 15463
// sExchange := true ;
15455: LD_ADDR_EXP 106
15459: PUSH
15460: LD_INT 1
15462: ST_TO_ADDR
// if p3 = 31 then
15463: LD_VAR 0 3
15467: PUSH
15468: LD_INT 31
15470: EQUAL
15471: IFFALSE 15481
// sFac := true ;
15473: LD_ADDR_EXP 107
15477: PUSH
15478: LD_INT 1
15480: ST_TO_ADDR
// if p3 = 32 then
15481: LD_VAR 0 3
15485: PUSH
15486: LD_INT 32
15488: EQUAL
15489: IFFALSE 15499
// sPower := true ;
15491: LD_ADDR_EXP 108
15495: PUSH
15496: LD_INT 1
15498: ST_TO_ADDR
// if p3 = 33 then
15499: LD_VAR 0 3
15503: PUSH
15504: LD_INT 33
15506: EQUAL
15507: IFFALSE 15517
// sRandom := true ;
15509: LD_ADDR_EXP 109
15513: PUSH
15514: LD_INT 1
15516: ST_TO_ADDR
// if p3 = 34 then
15517: LD_VAR 0 3
15521: PUSH
15522: LD_INT 34
15524: EQUAL
15525: IFFALSE 15535
// sShield := true ;
15527: LD_ADDR_EXP 110
15531: PUSH
15532: LD_INT 1
15534: ST_TO_ADDR
// if p3 = 35 then
15535: LD_VAR 0 3
15539: PUSH
15540: LD_INT 35
15542: EQUAL
15543: IFFALSE 15553
// sTime := true ;
15545: LD_ADDR_EXP 111
15549: PUSH
15550: LD_INT 1
15552: ST_TO_ADDR
// if p3 = 36 then
15553: LD_VAR 0 3
15557: PUSH
15558: LD_INT 36
15560: EQUAL
15561: IFFALSE 15571
// sTools := true ;
15563: LD_ADDR_EXP 112
15567: PUSH
15568: LD_INT 1
15570: ST_TO_ADDR
// if p3 = 101 then
15571: LD_VAR 0 3
15575: PUSH
15576: LD_INT 101
15578: EQUAL
15579: IFFALSE 15589
// sSold := true ;
15581: LD_ADDR_EXP 77
15585: PUSH
15586: LD_INT 1
15588: ST_TO_ADDR
// if p3 = 102 then
15589: LD_VAR 0 3
15593: PUSH
15594: LD_INT 102
15596: EQUAL
15597: IFFALSE 15607
// sDiff := true ;
15599: LD_ADDR_EXP 78
15603: PUSH
15604: LD_INT 1
15606: ST_TO_ADDR
// if p3 = 103 then
15607: LD_VAR 0 3
15611: PUSH
15612: LD_INT 103
15614: EQUAL
15615: IFFALSE 15625
// sFog := true ;
15617: LD_ADDR_EXP 81
15621: PUSH
15622: LD_INT 1
15624: ST_TO_ADDR
// if p3 = 104 then
15625: LD_VAR 0 3
15629: PUSH
15630: LD_INT 104
15632: EQUAL
15633: IFFALSE 15643
// sReset := true ;
15635: LD_ADDR_EXP 82
15639: PUSH
15640: LD_INT 1
15642: ST_TO_ADDR
// if p3 = 105 then
15643: LD_VAR 0 3
15647: PUSH
15648: LD_INT 105
15650: EQUAL
15651: IFFALSE 15661
// sSun := true ;
15653: LD_ADDR_EXP 83
15657: PUSH
15658: LD_INT 1
15660: ST_TO_ADDR
// if p3 = 106 then
15661: LD_VAR 0 3
15665: PUSH
15666: LD_INT 106
15668: EQUAL
15669: IFFALSE 15679
// sTiger := true ;
15671: LD_ADDR_EXP 79
15675: PUSH
15676: LD_INT 1
15678: ST_TO_ADDR
// if p3 = 107 then
15679: LD_VAR 0 3
15683: PUSH
15684: LD_INT 107
15686: EQUAL
15687: IFFALSE 15697
// sBomb := true ;
15689: LD_ADDR_EXP 80
15693: PUSH
15694: LD_INT 1
15696: ST_TO_ADDR
// if p3 = 108 then
15697: LD_VAR 0 3
15701: PUSH
15702: LD_INT 108
15704: EQUAL
15705: IFFALSE 15715
// sWound := true ;
15707: LD_ADDR_EXP 88
15711: PUSH
15712: LD_INT 1
15714: ST_TO_ADDR
// if p3 = 109 then
15715: LD_VAR 0 3
15719: PUSH
15720: LD_INT 109
15722: EQUAL
15723: IFFALSE 15733
// sBetray := true ;
15725: LD_ADDR_EXP 92
15729: PUSH
15730: LD_INT 1
15732: ST_TO_ADDR
// if p3 = 110 then
15733: LD_VAR 0 3
15737: PUSH
15738: LD_INT 110
15740: EQUAL
15741: IFFALSE 15751
// sContamin := true ;
15743: LD_ADDR_EXP 93
15747: PUSH
15748: LD_INT 1
15750: ST_TO_ADDR
// if p3 = 111 then
15751: LD_VAR 0 3
15755: PUSH
15756: LD_INT 111
15758: EQUAL
15759: IFFALSE 15769
// sOil := true ;
15761: LD_ADDR_EXP 95
15765: PUSH
15766: LD_INT 1
15768: ST_TO_ADDR
// if p3 = 112 then
15769: LD_VAR 0 3
15773: PUSH
15774: LD_INT 112
15776: EQUAL
15777: IFFALSE 15787
// sStu := true ;
15779: LD_ADDR_EXP 99
15783: PUSH
15784: LD_INT 1
15786: ST_TO_ADDR
// if p3 = 113 then
15787: LD_VAR 0 3
15791: PUSH
15792: LD_INT 113
15794: EQUAL
15795: IFFALSE 15805
// sBazooka := true ;
15797: LD_ADDR_EXP 102
15801: PUSH
15802: LD_INT 1
15804: ST_TO_ADDR
// if p3 = 114 then
15805: LD_VAR 0 3
15809: PUSH
15810: LD_INT 114
15812: EQUAL
15813: IFFALSE 15823
// sMortar := true ;
15815: LD_ADDR_EXP 103
15819: PUSH
15820: LD_INT 1
15822: ST_TO_ADDR
// if p3 = 115 then
15823: LD_VAR 0 3
15827: PUSH
15828: LD_INT 115
15830: EQUAL
15831: IFFALSE 15841
// sRanger := true ;
15833: LD_ADDR_EXP 113
15837: PUSH
15838: LD_INT 1
15840: ST_TO_ADDR
// if p3 = 116 then
15841: LD_VAR 0 3
15845: PUSH
15846: LD_INT 116
15848: EQUAL
15849: IFFALSE 15859
// sComputer := true ;
15851: LD_ADDR_EXP 114
15855: PUSH
15856: LD_INT 1
15858: ST_TO_ADDR
// if p3 = 117 then
15859: LD_VAR 0 3
15863: PUSH
15864: LD_INT 117
15866: EQUAL
15867: IFFALSE 15877
// s30 := true ;
15869: LD_ADDR_EXP 115
15873: PUSH
15874: LD_INT 1
15876: ST_TO_ADDR
// if p3 = 118 then
15877: LD_VAR 0 3
15881: PUSH
15882: LD_INT 118
15884: EQUAL
15885: IFFALSE 15895
// s60 := true ;
15887: LD_ADDR_EXP 116
15891: PUSH
15892: LD_INT 1
15894: ST_TO_ADDR
// end ; if p2 = 101 then
15895: LD_VAR 0 2
15899: PUSH
15900: LD_INT 101
15902: EQUAL
15903: IFFALSE 16031
// begin case p3 of 1 :
15905: LD_VAR 0 3
15909: PUSH
15910: LD_INT 1
15912: DOUBLE
15913: EQUAL
15914: IFTRUE 15918
15916: GO 15925
15918: POP
// hHackUnlimitedResources ; 2 :
15919: CALL 28129 0 0
15923: GO 16031
15925: LD_INT 2
15927: DOUBLE
15928: EQUAL
15929: IFTRUE 15933
15931: GO 15940
15933: POP
// hHackSetLevel10 ; 3 :
15934: CALL 28262 0 0
15938: GO 16031
15940: LD_INT 3
15942: DOUBLE
15943: EQUAL
15944: IFTRUE 15948
15946: GO 15955
15948: POP
// hHackSetLevel10YourUnits ; 4 :
15949: CALL 28347 0 0
15953: GO 16031
15955: LD_INT 4
15957: DOUBLE
15958: EQUAL
15959: IFTRUE 15963
15961: GO 15970
15963: POP
// hHackInvincible ; 5 :
15964: CALL 28795 0 0
15968: GO 16031
15970: LD_INT 5
15972: DOUBLE
15973: EQUAL
15974: IFTRUE 15978
15976: GO 15985
15978: POP
// hHackInvisible ; 6 :
15979: CALL 28906 0 0
15983: GO 16031
15985: LD_INT 6
15987: DOUBLE
15988: EQUAL
15989: IFTRUE 15993
15991: GO 16000
15993: POP
// hHackChangeYourSide ; 7 :
15994: CALL 28963 0 0
15998: GO 16031
16000: LD_INT 7
16002: DOUBLE
16003: EQUAL
16004: IFTRUE 16008
16006: GO 16015
16008: POP
// hHackChangeUnitSide ; 8 :
16009: CALL 29005 0 0
16013: GO 16031
16015: LD_INT 8
16017: DOUBLE
16018: EQUAL
16019: IFTRUE 16023
16021: GO 16030
16023: POP
// hHackFog ; end ;
16024: CALL 29106 0 0
16028: GO 16031
16030: POP
// end ; end ;
16031: LD_VAR 0 7
16035: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
16036: GO 16038
16038: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
16039: LD_STRING initStreamRollete();
16041: PPUSH
16042: CALL_OW 559
// InitStreamMode ;
16046: CALL 16058 0 0
// DefineStreamItems ( false ) ;
16050: LD_INT 0
16052: PPUSH
16053: CALL 16522 0 1
// end ;
16057: END
// function InitStreamMode ; begin
16058: LD_INT 0
16060: PPUSH
// streamModeActive := false ;
16061: LD_ADDR_EXP 60
16065: PUSH
16066: LD_INT 0
16068: ST_TO_ADDR
// normalCounter := 36 ;
16069: LD_ADDR_EXP 61
16073: PUSH
16074: LD_INT 36
16076: ST_TO_ADDR
// hardcoreCounter := 18 ;
16077: LD_ADDR_EXP 62
16081: PUSH
16082: LD_INT 18
16084: ST_TO_ADDR
// sRocket := false ;
16085: LD_ADDR_EXP 65
16089: PUSH
16090: LD_INT 0
16092: ST_TO_ADDR
// sSpeed := false ;
16093: LD_ADDR_EXP 64
16097: PUSH
16098: LD_INT 0
16100: ST_TO_ADDR
// sEngine := false ;
16101: LD_ADDR_EXP 66
16105: PUSH
16106: LD_INT 0
16108: ST_TO_ADDR
// sSpec := false ;
16109: LD_ADDR_EXP 63
16113: PUSH
16114: LD_INT 0
16116: ST_TO_ADDR
// sLevel := false ;
16117: LD_ADDR_EXP 67
16121: PUSH
16122: LD_INT 0
16124: ST_TO_ADDR
// sArmoury := false ;
16125: LD_ADDR_EXP 68
16129: PUSH
16130: LD_INT 0
16132: ST_TO_ADDR
// sRadar := false ;
16133: LD_ADDR_EXP 69
16137: PUSH
16138: LD_INT 0
16140: ST_TO_ADDR
// sBunker := false ;
16141: LD_ADDR_EXP 70
16145: PUSH
16146: LD_INT 0
16148: ST_TO_ADDR
// sHack := false ;
16149: LD_ADDR_EXP 71
16153: PUSH
16154: LD_INT 0
16156: ST_TO_ADDR
// sFire := false ;
16157: LD_ADDR_EXP 72
16161: PUSH
16162: LD_INT 0
16164: ST_TO_ADDR
// sRefresh := false ;
16165: LD_ADDR_EXP 73
16169: PUSH
16170: LD_INT 0
16172: ST_TO_ADDR
// sExp := false ;
16173: LD_ADDR_EXP 74
16177: PUSH
16178: LD_INT 0
16180: ST_TO_ADDR
// sDepot := false ;
16181: LD_ADDR_EXP 75
16185: PUSH
16186: LD_INT 0
16188: ST_TO_ADDR
// sFlag := false ;
16189: LD_ADDR_EXP 76
16193: PUSH
16194: LD_INT 0
16196: ST_TO_ADDR
// sKamikadze := false ;
16197: LD_ADDR_EXP 84
16201: PUSH
16202: LD_INT 0
16204: ST_TO_ADDR
// sTroll := false ;
16205: LD_ADDR_EXP 85
16209: PUSH
16210: LD_INT 0
16212: ST_TO_ADDR
// sSlow := false ;
16213: LD_ADDR_EXP 86
16217: PUSH
16218: LD_INT 0
16220: ST_TO_ADDR
// sLack := false ;
16221: LD_ADDR_EXP 87
16225: PUSH
16226: LD_INT 0
16228: ST_TO_ADDR
// sTank := false ;
16229: LD_ADDR_EXP 89
16233: PUSH
16234: LD_INT 0
16236: ST_TO_ADDR
// sRemote := false ;
16237: LD_ADDR_EXP 90
16241: PUSH
16242: LD_INT 0
16244: ST_TO_ADDR
// sPowell := false ;
16245: LD_ADDR_EXP 91
16249: PUSH
16250: LD_INT 0
16252: ST_TO_ADDR
// sTeleport := false ;
16253: LD_ADDR_EXP 94
16257: PUSH
16258: LD_INT 0
16260: ST_TO_ADDR
// sOilTower := false ;
16261: LD_ADDR_EXP 96
16265: PUSH
16266: LD_INT 0
16268: ST_TO_ADDR
// sShovel := false ;
16269: LD_ADDR_EXP 97
16273: PUSH
16274: LD_INT 0
16276: ST_TO_ADDR
// sSheik := false ;
16277: LD_ADDR_EXP 98
16281: PUSH
16282: LD_INT 0
16284: ST_TO_ADDR
// sEarthquake := false ;
16285: LD_ADDR_EXP 100
16289: PUSH
16290: LD_INT 0
16292: ST_TO_ADDR
// sAI := false ;
16293: LD_ADDR_EXP 101
16297: PUSH
16298: LD_INT 0
16300: ST_TO_ADDR
// sCargo := false ;
16301: LD_ADDR_EXP 104
16305: PUSH
16306: LD_INT 0
16308: ST_TO_ADDR
// sDLaser := false ;
16309: LD_ADDR_EXP 105
16313: PUSH
16314: LD_INT 0
16316: ST_TO_ADDR
// sExchange := false ;
16317: LD_ADDR_EXP 106
16321: PUSH
16322: LD_INT 0
16324: ST_TO_ADDR
// sFac := false ;
16325: LD_ADDR_EXP 107
16329: PUSH
16330: LD_INT 0
16332: ST_TO_ADDR
// sPower := false ;
16333: LD_ADDR_EXP 108
16337: PUSH
16338: LD_INT 0
16340: ST_TO_ADDR
// sRandom := false ;
16341: LD_ADDR_EXP 109
16345: PUSH
16346: LD_INT 0
16348: ST_TO_ADDR
// sShield := false ;
16349: LD_ADDR_EXP 110
16353: PUSH
16354: LD_INT 0
16356: ST_TO_ADDR
// sTime := false ;
16357: LD_ADDR_EXP 111
16361: PUSH
16362: LD_INT 0
16364: ST_TO_ADDR
// sTools := false ;
16365: LD_ADDR_EXP 112
16369: PUSH
16370: LD_INT 0
16372: ST_TO_ADDR
// sSold := false ;
16373: LD_ADDR_EXP 77
16377: PUSH
16378: LD_INT 0
16380: ST_TO_ADDR
// sDiff := false ;
16381: LD_ADDR_EXP 78
16385: PUSH
16386: LD_INT 0
16388: ST_TO_ADDR
// sFog := false ;
16389: LD_ADDR_EXP 81
16393: PUSH
16394: LD_INT 0
16396: ST_TO_ADDR
// sReset := false ;
16397: LD_ADDR_EXP 82
16401: PUSH
16402: LD_INT 0
16404: ST_TO_ADDR
// sSun := false ;
16405: LD_ADDR_EXP 83
16409: PUSH
16410: LD_INT 0
16412: ST_TO_ADDR
// sTiger := false ;
16413: LD_ADDR_EXP 79
16417: PUSH
16418: LD_INT 0
16420: ST_TO_ADDR
// sBomb := false ;
16421: LD_ADDR_EXP 80
16425: PUSH
16426: LD_INT 0
16428: ST_TO_ADDR
// sWound := false ;
16429: LD_ADDR_EXP 88
16433: PUSH
16434: LD_INT 0
16436: ST_TO_ADDR
// sBetray := false ;
16437: LD_ADDR_EXP 92
16441: PUSH
16442: LD_INT 0
16444: ST_TO_ADDR
// sContamin := false ;
16445: LD_ADDR_EXP 93
16449: PUSH
16450: LD_INT 0
16452: ST_TO_ADDR
// sOil := false ;
16453: LD_ADDR_EXP 95
16457: PUSH
16458: LD_INT 0
16460: ST_TO_ADDR
// sStu := false ;
16461: LD_ADDR_EXP 99
16465: PUSH
16466: LD_INT 0
16468: ST_TO_ADDR
// sBazooka := false ;
16469: LD_ADDR_EXP 102
16473: PUSH
16474: LD_INT 0
16476: ST_TO_ADDR
// sMortar := false ;
16477: LD_ADDR_EXP 103
16481: PUSH
16482: LD_INT 0
16484: ST_TO_ADDR
// sRanger := false ;
16485: LD_ADDR_EXP 113
16489: PUSH
16490: LD_INT 0
16492: ST_TO_ADDR
// sComputer := false ;
16493: LD_ADDR_EXP 114
16497: PUSH
16498: LD_INT 0
16500: ST_TO_ADDR
// s30 := false ;
16501: LD_ADDR_EXP 115
16505: PUSH
16506: LD_INT 0
16508: ST_TO_ADDR
// s60 := false ;
16509: LD_ADDR_EXP 116
16513: PUSH
16514: LD_INT 0
16516: ST_TO_ADDR
// end ;
16517: LD_VAR 0 1
16521: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16522: LD_INT 0
16524: PPUSH
16525: PPUSH
16526: PPUSH
16527: PPUSH
16528: PPUSH
16529: PPUSH
16530: PPUSH
// result := [ ] ;
16531: LD_ADDR_VAR 0 2
16535: PUSH
16536: EMPTY
16537: ST_TO_ADDR
// if campaign_id = 1 then
16538: LD_OWVAR 69
16542: PUSH
16543: LD_INT 1
16545: EQUAL
16546: IFFALSE 19712
// begin case mission_number of 1 :
16548: LD_OWVAR 70
16552: PUSH
16553: LD_INT 1
16555: DOUBLE
16556: EQUAL
16557: IFTRUE 16561
16559: GO 16637
16561: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16562: LD_ADDR_VAR 0 2
16566: PUSH
16567: LD_INT 2
16569: PUSH
16570: LD_INT 4
16572: PUSH
16573: LD_INT 11
16575: PUSH
16576: LD_INT 12
16578: PUSH
16579: LD_INT 15
16581: PUSH
16582: LD_INT 16
16584: PUSH
16585: LD_INT 22
16587: PUSH
16588: LD_INT 23
16590: PUSH
16591: LD_INT 26
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: LIST
16600: LIST
16601: LIST
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 101
16607: PUSH
16608: LD_INT 102
16610: PUSH
16611: LD_INT 106
16613: PUSH
16614: LD_INT 116
16616: PUSH
16617: LD_INT 117
16619: PUSH
16620: LD_INT 118
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: LIST
16627: LIST
16628: LIST
16629: LIST
16630: PUSH
16631: EMPTY
16632: LIST
16633: LIST
16634: ST_TO_ADDR
16635: GO 19710
16637: LD_INT 2
16639: DOUBLE
16640: EQUAL
16641: IFTRUE 16645
16643: GO 16729
16645: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16646: LD_ADDR_VAR 0 2
16650: PUSH
16651: LD_INT 2
16653: PUSH
16654: LD_INT 4
16656: PUSH
16657: LD_INT 11
16659: PUSH
16660: LD_INT 12
16662: PUSH
16663: LD_INT 15
16665: PUSH
16666: LD_INT 16
16668: PUSH
16669: LD_INT 22
16671: PUSH
16672: LD_INT 23
16674: PUSH
16675: LD_INT 26
16677: PUSH
16678: EMPTY
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 101
16691: PUSH
16692: LD_INT 102
16694: PUSH
16695: LD_INT 105
16697: PUSH
16698: LD_INT 106
16700: PUSH
16701: LD_INT 108
16703: PUSH
16704: LD_INT 116
16706: PUSH
16707: LD_INT 117
16709: PUSH
16710: LD_INT 118
16712: PUSH
16713: EMPTY
16714: LIST
16715: LIST
16716: LIST
16717: LIST
16718: LIST
16719: LIST
16720: LIST
16721: LIST
16722: PUSH
16723: EMPTY
16724: LIST
16725: LIST
16726: ST_TO_ADDR
16727: GO 19710
16729: LD_INT 3
16731: DOUBLE
16732: EQUAL
16733: IFTRUE 16737
16735: GO 16825
16737: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16738: LD_ADDR_VAR 0 2
16742: PUSH
16743: LD_INT 2
16745: PUSH
16746: LD_INT 4
16748: PUSH
16749: LD_INT 5
16751: PUSH
16752: LD_INT 11
16754: PUSH
16755: LD_INT 12
16757: PUSH
16758: LD_INT 15
16760: PUSH
16761: LD_INT 16
16763: PUSH
16764: LD_INT 22
16766: PUSH
16767: LD_INT 26
16769: PUSH
16770: LD_INT 36
16772: PUSH
16773: EMPTY
16774: LIST
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 101
16787: PUSH
16788: LD_INT 102
16790: PUSH
16791: LD_INT 105
16793: PUSH
16794: LD_INT 106
16796: PUSH
16797: LD_INT 108
16799: PUSH
16800: LD_INT 116
16802: PUSH
16803: LD_INT 117
16805: PUSH
16806: LD_INT 118
16808: PUSH
16809: EMPTY
16810: LIST
16811: LIST
16812: LIST
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: LIST
16818: PUSH
16819: EMPTY
16820: LIST
16821: LIST
16822: ST_TO_ADDR
16823: GO 19710
16825: LD_INT 4
16827: DOUBLE
16828: EQUAL
16829: IFTRUE 16833
16831: GO 16929
16833: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
16834: LD_ADDR_VAR 0 2
16838: PUSH
16839: LD_INT 2
16841: PUSH
16842: LD_INT 4
16844: PUSH
16845: LD_INT 5
16847: PUSH
16848: LD_INT 8
16850: PUSH
16851: LD_INT 11
16853: PUSH
16854: LD_INT 12
16856: PUSH
16857: LD_INT 15
16859: PUSH
16860: LD_INT 16
16862: PUSH
16863: LD_INT 22
16865: PUSH
16866: LD_INT 23
16868: PUSH
16869: LD_INT 26
16871: PUSH
16872: LD_INT 36
16874: PUSH
16875: EMPTY
16876: LIST
16877: LIST
16878: LIST
16879: LIST
16880: LIST
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 101
16891: PUSH
16892: LD_INT 102
16894: PUSH
16895: LD_INT 105
16897: PUSH
16898: LD_INT 106
16900: PUSH
16901: LD_INT 108
16903: PUSH
16904: LD_INT 116
16906: PUSH
16907: LD_INT 117
16909: PUSH
16910: LD_INT 118
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: ST_TO_ADDR
16927: GO 19710
16929: LD_INT 5
16931: DOUBLE
16932: EQUAL
16933: IFTRUE 16937
16935: GO 17049
16937: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
16938: LD_ADDR_VAR 0 2
16942: PUSH
16943: LD_INT 2
16945: PUSH
16946: LD_INT 4
16948: PUSH
16949: LD_INT 5
16951: PUSH
16952: LD_INT 6
16954: PUSH
16955: LD_INT 8
16957: PUSH
16958: LD_INT 11
16960: PUSH
16961: LD_INT 12
16963: PUSH
16964: LD_INT 15
16966: PUSH
16967: LD_INT 16
16969: PUSH
16970: LD_INT 22
16972: PUSH
16973: LD_INT 23
16975: PUSH
16976: LD_INT 25
16978: PUSH
16979: LD_INT 26
16981: PUSH
16982: LD_INT 36
16984: PUSH
16985: EMPTY
16986: LIST
16987: LIST
16988: LIST
16989: LIST
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: PUSH
17001: LD_INT 101
17003: PUSH
17004: LD_INT 102
17006: PUSH
17007: LD_INT 105
17009: PUSH
17010: LD_INT 106
17012: PUSH
17013: LD_INT 108
17015: PUSH
17016: LD_INT 109
17018: PUSH
17019: LD_INT 112
17021: PUSH
17022: LD_INT 116
17024: PUSH
17025: LD_INT 117
17027: PUSH
17028: LD_INT 118
17030: PUSH
17031: EMPTY
17032: LIST
17033: LIST
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: ST_TO_ADDR
17047: GO 19710
17049: LD_INT 6
17051: DOUBLE
17052: EQUAL
17053: IFTRUE 17057
17055: GO 17189
17057: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17058: LD_ADDR_VAR 0 2
17062: PUSH
17063: LD_INT 2
17065: PUSH
17066: LD_INT 4
17068: PUSH
17069: LD_INT 5
17071: PUSH
17072: LD_INT 6
17074: PUSH
17075: LD_INT 8
17077: PUSH
17078: LD_INT 11
17080: PUSH
17081: LD_INT 12
17083: PUSH
17084: LD_INT 15
17086: PUSH
17087: LD_INT 16
17089: PUSH
17090: LD_INT 20
17092: PUSH
17093: LD_INT 21
17095: PUSH
17096: LD_INT 22
17098: PUSH
17099: LD_INT 23
17101: PUSH
17102: LD_INT 25
17104: PUSH
17105: LD_INT 26
17107: PUSH
17108: LD_INT 30
17110: PUSH
17111: LD_INT 31
17113: PUSH
17114: LD_INT 32
17116: PUSH
17117: LD_INT 36
17119: PUSH
17120: EMPTY
17121: LIST
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: PUSH
17141: LD_INT 101
17143: PUSH
17144: LD_INT 102
17146: PUSH
17147: LD_INT 105
17149: PUSH
17150: LD_INT 106
17152: PUSH
17153: LD_INT 108
17155: PUSH
17156: LD_INT 109
17158: PUSH
17159: LD_INT 112
17161: PUSH
17162: LD_INT 116
17164: PUSH
17165: LD_INT 117
17167: PUSH
17168: LD_INT 118
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: LIST
17181: LIST
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: ST_TO_ADDR
17187: GO 19710
17189: LD_INT 7
17191: DOUBLE
17192: EQUAL
17193: IFTRUE 17197
17195: GO 17309
17197: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17198: LD_ADDR_VAR 0 2
17202: PUSH
17203: LD_INT 2
17205: PUSH
17206: LD_INT 4
17208: PUSH
17209: LD_INT 5
17211: PUSH
17212: LD_INT 7
17214: PUSH
17215: LD_INT 11
17217: PUSH
17218: LD_INT 12
17220: PUSH
17221: LD_INT 15
17223: PUSH
17224: LD_INT 16
17226: PUSH
17227: LD_INT 20
17229: PUSH
17230: LD_INT 21
17232: PUSH
17233: LD_INT 22
17235: PUSH
17236: LD_INT 23
17238: PUSH
17239: LD_INT 25
17241: PUSH
17242: LD_INT 26
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: LIST
17249: LIST
17250: LIST
17251: LIST
17252: LIST
17253: LIST
17254: LIST
17255: LIST
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: LD_INT 101
17263: PUSH
17264: LD_INT 102
17266: PUSH
17267: LD_INT 103
17269: PUSH
17270: LD_INT 105
17272: PUSH
17273: LD_INT 106
17275: PUSH
17276: LD_INT 108
17278: PUSH
17279: LD_INT 112
17281: PUSH
17282: LD_INT 116
17284: PUSH
17285: LD_INT 117
17287: PUSH
17288: LD_INT 118
17290: PUSH
17291: EMPTY
17292: LIST
17293: LIST
17294: LIST
17295: LIST
17296: LIST
17297: LIST
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: PUSH
17303: EMPTY
17304: LIST
17305: LIST
17306: ST_TO_ADDR
17307: GO 19710
17309: LD_INT 8
17311: DOUBLE
17312: EQUAL
17313: IFTRUE 17317
17315: GO 17457
17317: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17318: LD_ADDR_VAR 0 2
17322: PUSH
17323: LD_INT 2
17325: PUSH
17326: LD_INT 4
17328: PUSH
17329: LD_INT 5
17331: PUSH
17332: LD_INT 6
17334: PUSH
17335: LD_INT 7
17337: PUSH
17338: LD_INT 8
17340: PUSH
17341: LD_INT 11
17343: PUSH
17344: LD_INT 12
17346: PUSH
17347: LD_INT 15
17349: PUSH
17350: LD_INT 16
17352: PUSH
17353: LD_INT 20
17355: PUSH
17356: LD_INT 21
17358: PUSH
17359: LD_INT 22
17361: PUSH
17362: LD_INT 23
17364: PUSH
17365: LD_INT 25
17367: PUSH
17368: LD_INT 26
17370: PUSH
17371: LD_INT 30
17373: PUSH
17374: LD_INT 31
17376: PUSH
17377: LD_INT 32
17379: PUSH
17380: LD_INT 36
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: LIST
17387: LIST
17388: LIST
17389: LIST
17390: LIST
17391: LIST
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: PUSH
17405: LD_INT 101
17407: PUSH
17408: LD_INT 102
17410: PUSH
17411: LD_INT 103
17413: PUSH
17414: LD_INT 105
17416: PUSH
17417: LD_INT 106
17419: PUSH
17420: LD_INT 108
17422: PUSH
17423: LD_INT 109
17425: PUSH
17426: LD_INT 112
17428: PUSH
17429: LD_INT 116
17431: PUSH
17432: LD_INT 117
17434: PUSH
17435: LD_INT 118
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: LIST
17448: LIST
17449: LIST
17450: PUSH
17451: EMPTY
17452: LIST
17453: LIST
17454: ST_TO_ADDR
17455: GO 19710
17457: LD_INT 9
17459: DOUBLE
17460: EQUAL
17461: IFTRUE 17465
17463: GO 17613
17465: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17466: LD_ADDR_VAR 0 2
17470: PUSH
17471: LD_INT 2
17473: PUSH
17474: LD_INT 4
17476: PUSH
17477: LD_INT 5
17479: PUSH
17480: LD_INT 6
17482: PUSH
17483: LD_INT 7
17485: PUSH
17486: LD_INT 8
17488: PUSH
17489: LD_INT 11
17491: PUSH
17492: LD_INT 12
17494: PUSH
17495: LD_INT 15
17497: PUSH
17498: LD_INT 16
17500: PUSH
17501: LD_INT 20
17503: PUSH
17504: LD_INT 21
17506: PUSH
17507: LD_INT 22
17509: PUSH
17510: LD_INT 23
17512: PUSH
17513: LD_INT 25
17515: PUSH
17516: LD_INT 26
17518: PUSH
17519: LD_INT 28
17521: PUSH
17522: LD_INT 30
17524: PUSH
17525: LD_INT 31
17527: PUSH
17528: LD_INT 32
17530: PUSH
17531: LD_INT 36
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 101
17559: PUSH
17560: LD_INT 102
17562: PUSH
17563: LD_INT 103
17565: PUSH
17566: LD_INT 105
17568: PUSH
17569: LD_INT 106
17571: PUSH
17572: LD_INT 108
17574: PUSH
17575: LD_INT 109
17577: PUSH
17578: LD_INT 112
17580: PUSH
17581: LD_INT 114
17583: PUSH
17584: LD_INT 116
17586: PUSH
17587: LD_INT 117
17589: PUSH
17590: LD_INT 118
17592: PUSH
17593: EMPTY
17594: LIST
17595: LIST
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: LIST
17601: LIST
17602: LIST
17603: LIST
17604: LIST
17605: LIST
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: ST_TO_ADDR
17611: GO 19710
17613: LD_INT 10
17615: DOUBLE
17616: EQUAL
17617: IFTRUE 17621
17619: GO 17817
17621: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17622: LD_ADDR_VAR 0 2
17626: PUSH
17627: LD_INT 2
17629: PUSH
17630: LD_INT 4
17632: PUSH
17633: LD_INT 5
17635: PUSH
17636: LD_INT 6
17638: PUSH
17639: LD_INT 7
17641: PUSH
17642: LD_INT 8
17644: PUSH
17645: LD_INT 9
17647: PUSH
17648: LD_INT 10
17650: PUSH
17651: LD_INT 11
17653: PUSH
17654: LD_INT 12
17656: PUSH
17657: LD_INT 13
17659: PUSH
17660: LD_INT 14
17662: PUSH
17663: LD_INT 15
17665: PUSH
17666: LD_INT 16
17668: PUSH
17669: LD_INT 17
17671: PUSH
17672: LD_INT 18
17674: PUSH
17675: LD_INT 19
17677: PUSH
17678: LD_INT 20
17680: PUSH
17681: LD_INT 21
17683: PUSH
17684: LD_INT 22
17686: PUSH
17687: LD_INT 23
17689: PUSH
17690: LD_INT 24
17692: PUSH
17693: LD_INT 25
17695: PUSH
17696: LD_INT 26
17698: PUSH
17699: LD_INT 28
17701: PUSH
17702: LD_INT 30
17704: PUSH
17705: LD_INT 31
17707: PUSH
17708: LD_INT 32
17710: PUSH
17711: LD_INT 36
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: PUSH
17745: LD_INT 101
17747: PUSH
17748: LD_INT 102
17750: PUSH
17751: LD_INT 103
17753: PUSH
17754: LD_INT 104
17756: PUSH
17757: LD_INT 105
17759: PUSH
17760: LD_INT 106
17762: PUSH
17763: LD_INT 107
17765: PUSH
17766: LD_INT 108
17768: PUSH
17769: LD_INT 109
17771: PUSH
17772: LD_INT 110
17774: PUSH
17775: LD_INT 111
17777: PUSH
17778: LD_INT 112
17780: PUSH
17781: LD_INT 114
17783: PUSH
17784: LD_INT 116
17786: PUSH
17787: LD_INT 117
17789: PUSH
17790: LD_INT 118
17792: PUSH
17793: EMPTY
17794: LIST
17795: LIST
17796: LIST
17797: LIST
17798: LIST
17799: LIST
17800: LIST
17801: LIST
17802: LIST
17803: LIST
17804: LIST
17805: LIST
17806: LIST
17807: LIST
17808: LIST
17809: LIST
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: ST_TO_ADDR
17815: GO 19710
17817: LD_INT 11
17819: DOUBLE
17820: EQUAL
17821: IFTRUE 17825
17823: GO 18029
17825: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
17826: LD_ADDR_VAR 0 2
17830: PUSH
17831: LD_INT 2
17833: PUSH
17834: LD_INT 3
17836: PUSH
17837: LD_INT 4
17839: PUSH
17840: LD_INT 5
17842: PUSH
17843: LD_INT 6
17845: PUSH
17846: LD_INT 7
17848: PUSH
17849: LD_INT 8
17851: PUSH
17852: LD_INT 9
17854: PUSH
17855: LD_INT 10
17857: PUSH
17858: LD_INT 11
17860: PUSH
17861: LD_INT 12
17863: PUSH
17864: LD_INT 13
17866: PUSH
17867: LD_INT 14
17869: PUSH
17870: LD_INT 15
17872: PUSH
17873: LD_INT 16
17875: PUSH
17876: LD_INT 17
17878: PUSH
17879: LD_INT 18
17881: PUSH
17882: LD_INT 19
17884: PUSH
17885: LD_INT 20
17887: PUSH
17888: LD_INT 21
17890: PUSH
17891: LD_INT 22
17893: PUSH
17894: LD_INT 23
17896: PUSH
17897: LD_INT 24
17899: PUSH
17900: LD_INT 25
17902: PUSH
17903: LD_INT 26
17905: PUSH
17906: LD_INT 28
17908: PUSH
17909: LD_INT 30
17911: PUSH
17912: LD_INT 31
17914: PUSH
17915: LD_INT 32
17917: PUSH
17918: LD_INT 34
17920: PUSH
17921: LD_INT 36
17923: PUSH
17924: EMPTY
17925: LIST
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: LIST
17931: LIST
17932: LIST
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: LIST
17938: LIST
17939: LIST
17940: LIST
17941: LIST
17942: LIST
17943: LIST
17944: LIST
17945: LIST
17946: LIST
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: PUSH
17957: LD_INT 101
17959: PUSH
17960: LD_INT 102
17962: PUSH
17963: LD_INT 103
17965: PUSH
17966: LD_INT 104
17968: PUSH
17969: LD_INT 105
17971: PUSH
17972: LD_INT 106
17974: PUSH
17975: LD_INT 107
17977: PUSH
17978: LD_INT 108
17980: PUSH
17981: LD_INT 109
17983: PUSH
17984: LD_INT 110
17986: PUSH
17987: LD_INT 111
17989: PUSH
17990: LD_INT 112
17992: PUSH
17993: LD_INT 114
17995: PUSH
17996: LD_INT 116
17998: PUSH
17999: LD_INT 117
18001: PUSH
18002: LD_INT 118
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: LIST
18011: LIST
18012: LIST
18013: LIST
18014: LIST
18015: LIST
18016: LIST
18017: LIST
18018: LIST
18019: LIST
18020: LIST
18021: LIST
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: ST_TO_ADDR
18027: GO 19710
18029: LD_INT 12
18031: DOUBLE
18032: EQUAL
18033: IFTRUE 18037
18035: GO 18257
18037: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18038: LD_ADDR_VAR 0 2
18042: PUSH
18043: LD_INT 1
18045: PUSH
18046: LD_INT 2
18048: PUSH
18049: LD_INT 3
18051: PUSH
18052: LD_INT 4
18054: PUSH
18055: LD_INT 5
18057: PUSH
18058: LD_INT 6
18060: PUSH
18061: LD_INT 7
18063: PUSH
18064: LD_INT 8
18066: PUSH
18067: LD_INT 9
18069: PUSH
18070: LD_INT 10
18072: PUSH
18073: LD_INT 11
18075: PUSH
18076: LD_INT 12
18078: PUSH
18079: LD_INT 13
18081: PUSH
18082: LD_INT 14
18084: PUSH
18085: LD_INT 15
18087: PUSH
18088: LD_INT 16
18090: PUSH
18091: LD_INT 17
18093: PUSH
18094: LD_INT 18
18096: PUSH
18097: LD_INT 19
18099: PUSH
18100: LD_INT 20
18102: PUSH
18103: LD_INT 21
18105: PUSH
18106: LD_INT 22
18108: PUSH
18109: LD_INT 23
18111: PUSH
18112: LD_INT 24
18114: PUSH
18115: LD_INT 25
18117: PUSH
18118: LD_INT 26
18120: PUSH
18121: LD_INT 27
18123: PUSH
18124: LD_INT 28
18126: PUSH
18127: LD_INT 30
18129: PUSH
18130: LD_INT 31
18132: PUSH
18133: LD_INT 32
18135: PUSH
18136: LD_INT 33
18138: PUSH
18139: LD_INT 34
18141: PUSH
18142: LD_INT 36
18144: PUSH
18145: EMPTY
18146: LIST
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: LIST
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: LIST
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: LIST
18164: LIST
18165: LIST
18166: LIST
18167: LIST
18168: LIST
18169: LIST
18170: LIST
18171: LIST
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: PUSH
18181: LD_INT 101
18183: PUSH
18184: LD_INT 102
18186: PUSH
18187: LD_INT 103
18189: PUSH
18190: LD_INT 104
18192: PUSH
18193: LD_INT 105
18195: PUSH
18196: LD_INT 106
18198: PUSH
18199: LD_INT 107
18201: PUSH
18202: LD_INT 108
18204: PUSH
18205: LD_INT 109
18207: PUSH
18208: LD_INT 110
18210: PUSH
18211: LD_INT 111
18213: PUSH
18214: LD_INT 112
18216: PUSH
18217: LD_INT 113
18219: PUSH
18220: LD_INT 114
18222: PUSH
18223: LD_INT 116
18225: PUSH
18226: LD_INT 117
18228: PUSH
18229: LD_INT 118
18231: PUSH
18232: EMPTY
18233: LIST
18234: LIST
18235: LIST
18236: LIST
18237: LIST
18238: LIST
18239: LIST
18240: LIST
18241: LIST
18242: LIST
18243: LIST
18244: LIST
18245: LIST
18246: LIST
18247: LIST
18248: LIST
18249: LIST
18250: PUSH
18251: EMPTY
18252: LIST
18253: LIST
18254: ST_TO_ADDR
18255: GO 19710
18257: LD_INT 13
18259: DOUBLE
18260: EQUAL
18261: IFTRUE 18265
18263: GO 18473
18265: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18266: LD_ADDR_VAR 0 2
18270: PUSH
18271: LD_INT 1
18273: PUSH
18274: LD_INT 2
18276: PUSH
18277: LD_INT 3
18279: PUSH
18280: LD_INT 4
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: LD_INT 8
18288: PUSH
18289: LD_INT 9
18291: PUSH
18292: LD_INT 10
18294: PUSH
18295: LD_INT 11
18297: PUSH
18298: LD_INT 12
18300: PUSH
18301: LD_INT 14
18303: PUSH
18304: LD_INT 15
18306: PUSH
18307: LD_INT 16
18309: PUSH
18310: LD_INT 17
18312: PUSH
18313: LD_INT 18
18315: PUSH
18316: LD_INT 19
18318: PUSH
18319: LD_INT 20
18321: PUSH
18322: LD_INT 21
18324: PUSH
18325: LD_INT 22
18327: PUSH
18328: LD_INT 23
18330: PUSH
18331: LD_INT 24
18333: PUSH
18334: LD_INT 25
18336: PUSH
18337: LD_INT 26
18339: PUSH
18340: LD_INT 27
18342: PUSH
18343: LD_INT 28
18345: PUSH
18346: LD_INT 30
18348: PUSH
18349: LD_INT 31
18351: PUSH
18352: LD_INT 32
18354: PUSH
18355: LD_INT 33
18357: PUSH
18358: LD_INT 34
18360: PUSH
18361: LD_INT 36
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: LIST
18368: LIST
18369: LIST
18370: LIST
18371: LIST
18372: LIST
18373: LIST
18374: LIST
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: LIST
18383: LIST
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: LIST
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: PUSH
18397: LD_INT 101
18399: PUSH
18400: LD_INT 102
18402: PUSH
18403: LD_INT 103
18405: PUSH
18406: LD_INT 104
18408: PUSH
18409: LD_INT 105
18411: PUSH
18412: LD_INT 106
18414: PUSH
18415: LD_INT 107
18417: PUSH
18418: LD_INT 108
18420: PUSH
18421: LD_INT 109
18423: PUSH
18424: LD_INT 110
18426: PUSH
18427: LD_INT 111
18429: PUSH
18430: LD_INT 112
18432: PUSH
18433: LD_INT 113
18435: PUSH
18436: LD_INT 114
18438: PUSH
18439: LD_INT 116
18441: PUSH
18442: LD_INT 117
18444: PUSH
18445: LD_INT 118
18447: PUSH
18448: EMPTY
18449: LIST
18450: LIST
18451: LIST
18452: LIST
18453: LIST
18454: LIST
18455: LIST
18456: LIST
18457: LIST
18458: LIST
18459: LIST
18460: LIST
18461: LIST
18462: LIST
18463: LIST
18464: LIST
18465: LIST
18466: PUSH
18467: EMPTY
18468: LIST
18469: LIST
18470: ST_TO_ADDR
18471: GO 19710
18473: LD_INT 14
18475: DOUBLE
18476: EQUAL
18477: IFTRUE 18481
18479: GO 18705
18481: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18482: LD_ADDR_VAR 0 2
18486: PUSH
18487: LD_INT 1
18489: PUSH
18490: LD_INT 2
18492: PUSH
18493: LD_INT 3
18495: PUSH
18496: LD_INT 4
18498: PUSH
18499: LD_INT 5
18501: PUSH
18502: LD_INT 6
18504: PUSH
18505: LD_INT 7
18507: PUSH
18508: LD_INT 8
18510: PUSH
18511: LD_INT 9
18513: PUSH
18514: LD_INT 10
18516: PUSH
18517: LD_INT 11
18519: PUSH
18520: LD_INT 12
18522: PUSH
18523: LD_INT 13
18525: PUSH
18526: LD_INT 14
18528: PUSH
18529: LD_INT 15
18531: PUSH
18532: LD_INT 16
18534: PUSH
18535: LD_INT 17
18537: PUSH
18538: LD_INT 18
18540: PUSH
18541: LD_INT 19
18543: PUSH
18544: LD_INT 20
18546: PUSH
18547: LD_INT 21
18549: PUSH
18550: LD_INT 22
18552: PUSH
18553: LD_INT 23
18555: PUSH
18556: LD_INT 24
18558: PUSH
18559: LD_INT 25
18561: PUSH
18562: LD_INT 26
18564: PUSH
18565: LD_INT 27
18567: PUSH
18568: LD_INT 28
18570: PUSH
18571: LD_INT 29
18573: PUSH
18574: LD_INT 30
18576: PUSH
18577: LD_INT 31
18579: PUSH
18580: LD_INT 32
18582: PUSH
18583: LD_INT 33
18585: PUSH
18586: LD_INT 34
18588: PUSH
18589: LD_INT 36
18591: PUSH
18592: EMPTY
18593: LIST
18594: LIST
18595: LIST
18596: LIST
18597: LIST
18598: LIST
18599: LIST
18600: LIST
18601: LIST
18602: LIST
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: LIST
18622: LIST
18623: LIST
18624: LIST
18625: LIST
18626: LIST
18627: LIST
18628: PUSH
18629: LD_INT 101
18631: PUSH
18632: LD_INT 102
18634: PUSH
18635: LD_INT 103
18637: PUSH
18638: LD_INT 104
18640: PUSH
18641: LD_INT 105
18643: PUSH
18644: LD_INT 106
18646: PUSH
18647: LD_INT 107
18649: PUSH
18650: LD_INT 108
18652: PUSH
18653: LD_INT 109
18655: PUSH
18656: LD_INT 110
18658: PUSH
18659: LD_INT 111
18661: PUSH
18662: LD_INT 112
18664: PUSH
18665: LD_INT 113
18667: PUSH
18668: LD_INT 114
18670: PUSH
18671: LD_INT 116
18673: PUSH
18674: LD_INT 117
18676: PUSH
18677: LD_INT 118
18679: PUSH
18680: EMPTY
18681: LIST
18682: LIST
18683: LIST
18684: LIST
18685: LIST
18686: LIST
18687: LIST
18688: LIST
18689: LIST
18690: LIST
18691: LIST
18692: LIST
18693: LIST
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: ST_TO_ADDR
18703: GO 19710
18705: LD_INT 15
18707: DOUBLE
18708: EQUAL
18709: IFTRUE 18713
18711: GO 18937
18713: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18714: LD_ADDR_VAR 0 2
18718: PUSH
18719: LD_INT 1
18721: PUSH
18722: LD_INT 2
18724: PUSH
18725: LD_INT 3
18727: PUSH
18728: LD_INT 4
18730: PUSH
18731: LD_INT 5
18733: PUSH
18734: LD_INT 6
18736: PUSH
18737: LD_INT 7
18739: PUSH
18740: LD_INT 8
18742: PUSH
18743: LD_INT 9
18745: PUSH
18746: LD_INT 10
18748: PUSH
18749: LD_INT 11
18751: PUSH
18752: LD_INT 12
18754: PUSH
18755: LD_INT 13
18757: PUSH
18758: LD_INT 14
18760: PUSH
18761: LD_INT 15
18763: PUSH
18764: LD_INT 16
18766: PUSH
18767: LD_INT 17
18769: PUSH
18770: LD_INT 18
18772: PUSH
18773: LD_INT 19
18775: PUSH
18776: LD_INT 20
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 22
18784: PUSH
18785: LD_INT 23
18787: PUSH
18788: LD_INT 24
18790: PUSH
18791: LD_INT 25
18793: PUSH
18794: LD_INT 26
18796: PUSH
18797: LD_INT 27
18799: PUSH
18800: LD_INT 28
18802: PUSH
18803: LD_INT 29
18805: PUSH
18806: LD_INT 30
18808: PUSH
18809: LD_INT 31
18811: PUSH
18812: LD_INT 32
18814: PUSH
18815: LD_INT 33
18817: PUSH
18818: LD_INT 34
18820: PUSH
18821: LD_INT 36
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: LIST
18828: LIST
18829: LIST
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: LIST
18835: LIST
18836: LIST
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: LIST
18842: LIST
18843: LIST
18844: LIST
18845: LIST
18846: LIST
18847: LIST
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: LIST
18853: LIST
18854: LIST
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: PUSH
18861: LD_INT 101
18863: PUSH
18864: LD_INT 102
18866: PUSH
18867: LD_INT 103
18869: PUSH
18870: LD_INT 104
18872: PUSH
18873: LD_INT 105
18875: PUSH
18876: LD_INT 106
18878: PUSH
18879: LD_INT 107
18881: PUSH
18882: LD_INT 108
18884: PUSH
18885: LD_INT 109
18887: PUSH
18888: LD_INT 110
18890: PUSH
18891: LD_INT 111
18893: PUSH
18894: LD_INT 112
18896: PUSH
18897: LD_INT 113
18899: PUSH
18900: LD_INT 114
18902: PUSH
18903: LD_INT 116
18905: PUSH
18906: LD_INT 117
18908: PUSH
18909: LD_INT 118
18911: PUSH
18912: EMPTY
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: LIST
18928: LIST
18929: LIST
18930: PUSH
18931: EMPTY
18932: LIST
18933: LIST
18934: ST_TO_ADDR
18935: GO 19710
18937: LD_INT 16
18939: DOUBLE
18940: EQUAL
18941: IFTRUE 18945
18943: GO 19081
18945: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
18946: LD_ADDR_VAR 0 2
18950: PUSH
18951: LD_INT 2
18953: PUSH
18954: LD_INT 4
18956: PUSH
18957: LD_INT 5
18959: PUSH
18960: LD_INT 7
18962: PUSH
18963: LD_INT 11
18965: PUSH
18966: LD_INT 12
18968: PUSH
18969: LD_INT 15
18971: PUSH
18972: LD_INT 16
18974: PUSH
18975: LD_INT 20
18977: PUSH
18978: LD_INT 21
18980: PUSH
18981: LD_INT 22
18983: PUSH
18984: LD_INT 23
18986: PUSH
18987: LD_INT 25
18989: PUSH
18990: LD_INT 26
18992: PUSH
18993: LD_INT 30
18995: PUSH
18996: LD_INT 31
18998: PUSH
18999: LD_INT 32
19001: PUSH
19002: LD_INT 33
19004: PUSH
19005: LD_INT 34
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: PUSH
19029: LD_INT 101
19031: PUSH
19032: LD_INT 102
19034: PUSH
19035: LD_INT 103
19037: PUSH
19038: LD_INT 106
19040: PUSH
19041: LD_INT 108
19043: PUSH
19044: LD_INT 112
19046: PUSH
19047: LD_INT 113
19049: PUSH
19050: LD_INT 114
19052: PUSH
19053: LD_INT 116
19055: PUSH
19056: LD_INT 117
19058: PUSH
19059: LD_INT 118
19061: PUSH
19062: EMPTY
19063: LIST
19064: LIST
19065: LIST
19066: LIST
19067: LIST
19068: LIST
19069: LIST
19070: LIST
19071: LIST
19072: LIST
19073: LIST
19074: PUSH
19075: EMPTY
19076: LIST
19077: LIST
19078: ST_TO_ADDR
19079: GO 19710
19081: LD_INT 17
19083: DOUBLE
19084: EQUAL
19085: IFTRUE 19089
19087: GO 19313
19089: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19090: LD_ADDR_VAR 0 2
19094: PUSH
19095: LD_INT 1
19097: PUSH
19098: LD_INT 2
19100: PUSH
19101: LD_INT 3
19103: PUSH
19104: LD_INT 4
19106: PUSH
19107: LD_INT 5
19109: PUSH
19110: LD_INT 6
19112: PUSH
19113: LD_INT 7
19115: PUSH
19116: LD_INT 8
19118: PUSH
19119: LD_INT 9
19121: PUSH
19122: LD_INT 10
19124: PUSH
19125: LD_INT 11
19127: PUSH
19128: LD_INT 12
19130: PUSH
19131: LD_INT 13
19133: PUSH
19134: LD_INT 14
19136: PUSH
19137: LD_INT 15
19139: PUSH
19140: LD_INT 16
19142: PUSH
19143: LD_INT 17
19145: PUSH
19146: LD_INT 18
19148: PUSH
19149: LD_INT 19
19151: PUSH
19152: LD_INT 20
19154: PUSH
19155: LD_INT 21
19157: PUSH
19158: LD_INT 22
19160: PUSH
19161: LD_INT 23
19163: PUSH
19164: LD_INT 24
19166: PUSH
19167: LD_INT 25
19169: PUSH
19170: LD_INT 26
19172: PUSH
19173: LD_INT 27
19175: PUSH
19176: LD_INT 28
19178: PUSH
19179: LD_INT 29
19181: PUSH
19182: LD_INT 30
19184: PUSH
19185: LD_INT 31
19187: PUSH
19188: LD_INT 32
19190: PUSH
19191: LD_INT 33
19193: PUSH
19194: LD_INT 34
19196: PUSH
19197: LD_INT 36
19199: PUSH
19200: EMPTY
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: LIST
19212: LIST
19213: LIST
19214: LIST
19215: LIST
19216: LIST
19217: LIST
19218: LIST
19219: LIST
19220: LIST
19221: LIST
19222: LIST
19223: LIST
19224: LIST
19225: LIST
19226: LIST
19227: LIST
19228: LIST
19229: LIST
19230: LIST
19231: LIST
19232: LIST
19233: LIST
19234: LIST
19235: LIST
19236: PUSH
19237: LD_INT 101
19239: PUSH
19240: LD_INT 102
19242: PUSH
19243: LD_INT 103
19245: PUSH
19246: LD_INT 104
19248: PUSH
19249: LD_INT 105
19251: PUSH
19252: LD_INT 106
19254: PUSH
19255: LD_INT 107
19257: PUSH
19258: LD_INT 108
19260: PUSH
19261: LD_INT 109
19263: PUSH
19264: LD_INT 110
19266: PUSH
19267: LD_INT 111
19269: PUSH
19270: LD_INT 112
19272: PUSH
19273: LD_INT 113
19275: PUSH
19276: LD_INT 114
19278: PUSH
19279: LD_INT 116
19281: PUSH
19282: LD_INT 117
19284: PUSH
19285: LD_INT 118
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: LIST
19292: LIST
19293: LIST
19294: LIST
19295: LIST
19296: LIST
19297: LIST
19298: LIST
19299: LIST
19300: LIST
19301: LIST
19302: LIST
19303: LIST
19304: LIST
19305: LIST
19306: PUSH
19307: EMPTY
19308: LIST
19309: LIST
19310: ST_TO_ADDR
19311: GO 19710
19313: LD_INT 18
19315: DOUBLE
19316: EQUAL
19317: IFTRUE 19321
19319: GO 19469
19321: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19322: LD_ADDR_VAR 0 2
19326: PUSH
19327: LD_INT 2
19329: PUSH
19330: LD_INT 4
19332: PUSH
19333: LD_INT 5
19335: PUSH
19336: LD_INT 7
19338: PUSH
19339: LD_INT 11
19341: PUSH
19342: LD_INT 12
19344: PUSH
19345: LD_INT 15
19347: PUSH
19348: LD_INT 16
19350: PUSH
19351: LD_INT 20
19353: PUSH
19354: LD_INT 21
19356: PUSH
19357: LD_INT 22
19359: PUSH
19360: LD_INT 23
19362: PUSH
19363: LD_INT 25
19365: PUSH
19366: LD_INT 26
19368: PUSH
19369: LD_INT 30
19371: PUSH
19372: LD_INT 31
19374: PUSH
19375: LD_INT 32
19377: PUSH
19378: LD_INT 33
19380: PUSH
19381: LD_INT 34
19383: PUSH
19384: LD_INT 35
19386: PUSH
19387: LD_INT 36
19389: PUSH
19390: EMPTY
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: PUSH
19413: LD_INT 101
19415: PUSH
19416: LD_INT 102
19418: PUSH
19419: LD_INT 103
19421: PUSH
19422: LD_INT 106
19424: PUSH
19425: LD_INT 108
19427: PUSH
19428: LD_INT 112
19430: PUSH
19431: LD_INT 113
19433: PUSH
19434: LD_INT 114
19436: PUSH
19437: LD_INT 115
19439: PUSH
19440: LD_INT 116
19442: PUSH
19443: LD_INT 117
19445: PUSH
19446: LD_INT 118
19448: PUSH
19449: EMPTY
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: LIST
19457: LIST
19458: LIST
19459: LIST
19460: LIST
19461: LIST
19462: PUSH
19463: EMPTY
19464: LIST
19465: LIST
19466: ST_TO_ADDR
19467: GO 19710
19469: LD_INT 19
19471: DOUBLE
19472: EQUAL
19473: IFTRUE 19477
19475: GO 19709
19477: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19478: LD_ADDR_VAR 0 2
19482: PUSH
19483: LD_INT 1
19485: PUSH
19486: LD_INT 2
19488: PUSH
19489: LD_INT 3
19491: PUSH
19492: LD_INT 4
19494: PUSH
19495: LD_INT 5
19497: PUSH
19498: LD_INT 6
19500: PUSH
19501: LD_INT 7
19503: PUSH
19504: LD_INT 8
19506: PUSH
19507: LD_INT 9
19509: PUSH
19510: LD_INT 10
19512: PUSH
19513: LD_INT 11
19515: PUSH
19516: LD_INT 12
19518: PUSH
19519: LD_INT 13
19521: PUSH
19522: LD_INT 14
19524: PUSH
19525: LD_INT 15
19527: PUSH
19528: LD_INT 16
19530: PUSH
19531: LD_INT 17
19533: PUSH
19534: LD_INT 18
19536: PUSH
19537: LD_INT 19
19539: PUSH
19540: LD_INT 20
19542: PUSH
19543: LD_INT 21
19545: PUSH
19546: LD_INT 22
19548: PUSH
19549: LD_INT 23
19551: PUSH
19552: LD_INT 24
19554: PUSH
19555: LD_INT 25
19557: PUSH
19558: LD_INT 26
19560: PUSH
19561: LD_INT 27
19563: PUSH
19564: LD_INT 28
19566: PUSH
19567: LD_INT 29
19569: PUSH
19570: LD_INT 30
19572: PUSH
19573: LD_INT 31
19575: PUSH
19576: LD_INT 32
19578: PUSH
19579: LD_INT 33
19581: PUSH
19582: LD_INT 34
19584: PUSH
19585: LD_INT 35
19587: PUSH
19588: LD_INT 36
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: LIST
19608: LIST
19609: LIST
19610: LIST
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: LIST
19624: LIST
19625: LIST
19626: LIST
19627: LIST
19628: PUSH
19629: LD_INT 101
19631: PUSH
19632: LD_INT 102
19634: PUSH
19635: LD_INT 103
19637: PUSH
19638: LD_INT 104
19640: PUSH
19641: LD_INT 105
19643: PUSH
19644: LD_INT 106
19646: PUSH
19647: LD_INT 107
19649: PUSH
19650: LD_INT 108
19652: PUSH
19653: LD_INT 109
19655: PUSH
19656: LD_INT 110
19658: PUSH
19659: LD_INT 111
19661: PUSH
19662: LD_INT 112
19664: PUSH
19665: LD_INT 113
19667: PUSH
19668: LD_INT 114
19670: PUSH
19671: LD_INT 115
19673: PUSH
19674: LD_INT 116
19676: PUSH
19677: LD_INT 117
19679: PUSH
19680: LD_INT 118
19682: PUSH
19683: EMPTY
19684: LIST
19685: LIST
19686: LIST
19687: LIST
19688: LIST
19689: LIST
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: LIST
19695: LIST
19696: LIST
19697: LIST
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: PUSH
19703: EMPTY
19704: LIST
19705: LIST
19706: ST_TO_ADDR
19707: GO 19710
19709: POP
// end else
19710: GO 19941
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19712: LD_ADDR_VAR 0 2
19716: PUSH
19717: LD_INT 1
19719: PUSH
19720: LD_INT 2
19722: PUSH
19723: LD_INT 3
19725: PUSH
19726: LD_INT 4
19728: PUSH
19729: LD_INT 5
19731: PUSH
19732: LD_INT 6
19734: PUSH
19735: LD_INT 7
19737: PUSH
19738: LD_INT 8
19740: PUSH
19741: LD_INT 9
19743: PUSH
19744: LD_INT 10
19746: PUSH
19747: LD_INT 11
19749: PUSH
19750: LD_INT 12
19752: PUSH
19753: LD_INT 13
19755: PUSH
19756: LD_INT 14
19758: PUSH
19759: LD_INT 15
19761: PUSH
19762: LD_INT 16
19764: PUSH
19765: LD_INT 17
19767: PUSH
19768: LD_INT 18
19770: PUSH
19771: LD_INT 19
19773: PUSH
19774: LD_INT 20
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 22
19782: PUSH
19783: LD_INT 23
19785: PUSH
19786: LD_INT 24
19788: PUSH
19789: LD_INT 25
19791: PUSH
19792: LD_INT 26
19794: PUSH
19795: LD_INT 27
19797: PUSH
19798: LD_INT 28
19800: PUSH
19801: LD_INT 29
19803: PUSH
19804: LD_INT 30
19806: PUSH
19807: LD_INT 31
19809: PUSH
19810: LD_INT 32
19812: PUSH
19813: LD_INT 33
19815: PUSH
19816: LD_INT 34
19818: PUSH
19819: LD_INT 35
19821: PUSH
19822: LD_INT 36
19824: PUSH
19825: EMPTY
19826: LIST
19827: LIST
19828: LIST
19829: LIST
19830: LIST
19831: LIST
19832: LIST
19833: LIST
19834: LIST
19835: LIST
19836: LIST
19837: LIST
19838: LIST
19839: LIST
19840: LIST
19841: LIST
19842: LIST
19843: LIST
19844: LIST
19845: LIST
19846: LIST
19847: LIST
19848: LIST
19849: LIST
19850: LIST
19851: LIST
19852: LIST
19853: LIST
19854: LIST
19855: LIST
19856: LIST
19857: LIST
19858: LIST
19859: LIST
19860: LIST
19861: LIST
19862: PUSH
19863: LD_INT 101
19865: PUSH
19866: LD_INT 102
19868: PUSH
19869: LD_INT 103
19871: PUSH
19872: LD_INT 104
19874: PUSH
19875: LD_INT 105
19877: PUSH
19878: LD_INT 106
19880: PUSH
19881: LD_INT 107
19883: PUSH
19884: LD_INT 108
19886: PUSH
19887: LD_INT 109
19889: PUSH
19890: LD_INT 110
19892: PUSH
19893: LD_INT 111
19895: PUSH
19896: LD_INT 112
19898: PUSH
19899: LD_INT 113
19901: PUSH
19902: LD_INT 114
19904: PUSH
19905: LD_INT 115
19907: PUSH
19908: LD_INT 116
19910: PUSH
19911: LD_INT 117
19913: PUSH
19914: LD_INT 118
19916: PUSH
19917: EMPTY
19918: LIST
19919: LIST
19920: LIST
19921: LIST
19922: LIST
19923: LIST
19924: LIST
19925: LIST
19926: LIST
19927: LIST
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: LIST
19933: LIST
19934: LIST
19935: LIST
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: ST_TO_ADDR
// if result then
19941: LD_VAR 0 2
19945: IFFALSE 20731
// begin normal :=  ;
19947: LD_ADDR_VAR 0 5
19951: PUSH
19952: LD_STRING 
19954: ST_TO_ADDR
// hardcore :=  ;
19955: LD_ADDR_VAR 0 6
19959: PUSH
19960: LD_STRING 
19962: ST_TO_ADDR
// active :=  ;
19963: LD_ADDR_VAR 0 7
19967: PUSH
19968: LD_STRING 
19970: ST_TO_ADDR
// for i = 1 to normalCounter do
19971: LD_ADDR_VAR 0 8
19975: PUSH
19976: DOUBLE
19977: LD_INT 1
19979: DEC
19980: ST_TO_ADDR
19981: LD_EXP 61
19985: PUSH
19986: FOR_TO
19987: IFFALSE 20088
// begin tmp := 0 ;
19989: LD_ADDR_VAR 0 3
19993: PUSH
19994: LD_STRING 0
19996: ST_TO_ADDR
// if result [ 1 ] then
19997: LD_VAR 0 2
20001: PUSH
20002: LD_INT 1
20004: ARRAY
20005: IFFALSE 20070
// if result [ 1 ] [ 1 ] = i then
20007: LD_VAR 0 2
20011: PUSH
20012: LD_INT 1
20014: ARRAY
20015: PUSH
20016: LD_INT 1
20018: ARRAY
20019: PUSH
20020: LD_VAR 0 8
20024: EQUAL
20025: IFFALSE 20070
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_VAR 0 2
20036: PPUSH
20037: LD_INT 1
20039: PPUSH
20040: LD_VAR 0 2
20044: PUSH
20045: LD_INT 1
20047: ARRAY
20048: PPUSH
20049: LD_INT 1
20051: PPUSH
20052: CALL_OW 3
20056: PPUSH
20057: CALL_OW 1
20061: ST_TO_ADDR
// tmp := 1 ;
20062: LD_ADDR_VAR 0 3
20066: PUSH
20067: LD_STRING 1
20069: ST_TO_ADDR
// end ; normal := normal & tmp ;
20070: LD_ADDR_VAR 0 5
20074: PUSH
20075: LD_VAR 0 5
20079: PUSH
20080: LD_VAR 0 3
20084: STR
20085: ST_TO_ADDR
// end ;
20086: GO 19986
20088: POP
20089: POP
// for i = 1 to hardcoreCounter do
20090: LD_ADDR_VAR 0 8
20094: PUSH
20095: DOUBLE
20096: LD_INT 1
20098: DEC
20099: ST_TO_ADDR
20100: LD_EXP 62
20104: PUSH
20105: FOR_TO
20106: IFFALSE 20211
// begin tmp := 0 ;
20108: LD_ADDR_VAR 0 3
20112: PUSH
20113: LD_STRING 0
20115: ST_TO_ADDR
// if result [ 2 ] then
20116: LD_VAR 0 2
20120: PUSH
20121: LD_INT 2
20123: ARRAY
20124: IFFALSE 20193
// if result [ 2 ] [ 1 ] = 100 + i then
20126: LD_VAR 0 2
20130: PUSH
20131: LD_INT 2
20133: ARRAY
20134: PUSH
20135: LD_INT 1
20137: ARRAY
20138: PUSH
20139: LD_INT 100
20141: PUSH
20142: LD_VAR 0 8
20146: PLUS
20147: EQUAL
20148: IFFALSE 20193
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20150: LD_ADDR_VAR 0 2
20154: PUSH
20155: LD_VAR 0 2
20159: PPUSH
20160: LD_INT 2
20162: PPUSH
20163: LD_VAR 0 2
20167: PUSH
20168: LD_INT 2
20170: ARRAY
20171: PPUSH
20172: LD_INT 1
20174: PPUSH
20175: CALL_OW 3
20179: PPUSH
20180: CALL_OW 1
20184: ST_TO_ADDR
// tmp := 1 ;
20185: LD_ADDR_VAR 0 3
20189: PUSH
20190: LD_STRING 1
20192: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20193: LD_ADDR_VAR 0 6
20197: PUSH
20198: LD_VAR 0 6
20202: PUSH
20203: LD_VAR 0 3
20207: STR
20208: ST_TO_ADDR
// end ;
20209: GO 20105
20211: POP
20212: POP
// if isGameLoad then
20213: LD_VAR 0 1
20217: IFFALSE 20692
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20219: LD_ADDR_VAR 0 4
20223: PUSH
20224: LD_EXP 65
20228: PUSH
20229: LD_EXP 64
20233: PUSH
20234: LD_EXP 66
20238: PUSH
20239: LD_EXP 63
20243: PUSH
20244: LD_EXP 67
20248: PUSH
20249: LD_EXP 68
20253: PUSH
20254: LD_EXP 69
20258: PUSH
20259: LD_EXP 70
20263: PUSH
20264: LD_EXP 71
20268: PUSH
20269: LD_EXP 72
20273: PUSH
20274: LD_EXP 73
20278: PUSH
20279: LD_EXP 74
20283: PUSH
20284: LD_EXP 75
20288: PUSH
20289: LD_EXP 76
20293: PUSH
20294: LD_EXP 84
20298: PUSH
20299: LD_EXP 85
20303: PUSH
20304: LD_EXP 86
20308: PUSH
20309: LD_EXP 87
20313: PUSH
20314: LD_EXP 89
20318: PUSH
20319: LD_EXP 90
20323: PUSH
20324: LD_EXP 91
20328: PUSH
20329: LD_EXP 94
20333: PUSH
20334: LD_EXP 96
20338: PUSH
20339: LD_EXP 97
20343: PUSH
20344: LD_EXP 98
20348: PUSH
20349: LD_EXP 100
20353: PUSH
20354: LD_EXP 101
20358: PUSH
20359: LD_EXP 104
20363: PUSH
20364: LD_EXP 105
20368: PUSH
20369: LD_EXP 106
20373: PUSH
20374: LD_EXP 107
20378: PUSH
20379: LD_EXP 108
20383: PUSH
20384: LD_EXP 109
20388: PUSH
20389: LD_EXP 110
20393: PUSH
20394: LD_EXP 111
20398: PUSH
20399: LD_EXP 112
20403: PUSH
20404: LD_EXP 77
20408: PUSH
20409: LD_EXP 78
20413: PUSH
20414: LD_EXP 81
20418: PUSH
20419: LD_EXP 82
20423: PUSH
20424: LD_EXP 83
20428: PUSH
20429: LD_EXP 79
20433: PUSH
20434: LD_EXP 80
20438: PUSH
20439: LD_EXP 88
20443: PUSH
20444: LD_EXP 92
20448: PUSH
20449: LD_EXP 93
20453: PUSH
20454: LD_EXP 95
20458: PUSH
20459: LD_EXP 99
20463: PUSH
20464: LD_EXP 102
20468: PUSH
20469: LD_EXP 103
20473: PUSH
20474: LD_EXP 113
20478: PUSH
20479: LD_EXP 114
20483: PUSH
20484: LD_EXP 115
20488: PUSH
20489: LD_EXP 116
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: LIST
20531: LIST
20532: LIST
20533: LIST
20534: LIST
20535: LIST
20536: LIST
20537: LIST
20538: LIST
20539: LIST
20540: LIST
20541: LIST
20542: LIST
20543: LIST
20544: LIST
20545: LIST
20546: LIST
20547: LIST
20548: LIST
20549: ST_TO_ADDR
// tmp :=  ;
20550: LD_ADDR_VAR 0 3
20554: PUSH
20555: LD_STRING 
20557: ST_TO_ADDR
// for i = 1 to normalCounter do
20558: LD_ADDR_VAR 0 8
20562: PUSH
20563: DOUBLE
20564: LD_INT 1
20566: DEC
20567: ST_TO_ADDR
20568: LD_EXP 61
20572: PUSH
20573: FOR_TO
20574: IFFALSE 20610
// begin if flags [ i ] then
20576: LD_VAR 0 4
20580: PUSH
20581: LD_VAR 0 8
20585: ARRAY
20586: IFFALSE 20608
// tmp := tmp & i & ; ;
20588: LD_ADDR_VAR 0 3
20592: PUSH
20593: LD_VAR 0 3
20597: PUSH
20598: LD_VAR 0 8
20602: STR
20603: PUSH
20604: LD_STRING ;
20606: STR
20607: ST_TO_ADDR
// end ;
20608: GO 20573
20610: POP
20611: POP
// for i = 1 to hardcoreCounter do
20612: LD_ADDR_VAR 0 8
20616: PUSH
20617: DOUBLE
20618: LD_INT 1
20620: DEC
20621: ST_TO_ADDR
20622: LD_EXP 62
20626: PUSH
20627: FOR_TO
20628: IFFALSE 20674
// begin if flags [ normalCounter + i ] then
20630: LD_VAR 0 4
20634: PUSH
20635: LD_EXP 61
20639: PUSH
20640: LD_VAR 0 8
20644: PLUS
20645: ARRAY
20646: IFFALSE 20672
// tmp := tmp & ( 100 + i ) & ; ;
20648: LD_ADDR_VAR 0 3
20652: PUSH
20653: LD_VAR 0 3
20657: PUSH
20658: LD_INT 100
20660: PUSH
20661: LD_VAR 0 8
20665: PLUS
20666: STR
20667: PUSH
20668: LD_STRING ;
20670: STR
20671: ST_TO_ADDR
// end ;
20672: GO 20627
20674: POP
20675: POP
// if tmp then
20676: LD_VAR 0 3
20680: IFFALSE 20692
// active := tmp ;
20682: LD_ADDR_VAR 0 7
20686: PUSH
20687: LD_VAR 0 3
20691: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20692: LD_STRING getStreamItemsFromMission("
20694: PUSH
20695: LD_VAR 0 5
20699: STR
20700: PUSH
20701: LD_STRING ","
20703: STR
20704: PUSH
20705: LD_VAR 0 6
20709: STR
20710: PUSH
20711: LD_STRING ","
20713: STR
20714: PUSH
20715: LD_VAR 0 7
20719: STR
20720: PUSH
20721: LD_STRING ")
20723: STR
20724: PPUSH
20725: CALL_OW 559
// end else
20729: GO 20738
// ToLua ( getStreamItemsFromMission("","","") ) ;
20731: LD_STRING getStreamItemsFromMission("","","")
20733: PPUSH
20734: CALL_OW 559
// end ;
20738: LD_VAR 0 2
20742: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20743: LD_EXP 60
20747: PUSH
20748: LD_EXP 65
20752: AND
20753: IFFALSE 20877
20755: GO 20757
20757: DISABLE
20758: LD_INT 0
20760: PPUSH
20761: PPUSH
// begin enable ;
20762: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20763: LD_ADDR_VAR 0 2
20767: PUSH
20768: LD_INT 22
20770: PUSH
20771: LD_OWVAR 2
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: PUSH
20780: LD_INT 2
20782: PUSH
20783: LD_INT 34
20785: PUSH
20786: LD_INT 7
20788: PUSH
20789: EMPTY
20790: LIST
20791: LIST
20792: PUSH
20793: LD_INT 34
20795: PUSH
20796: LD_INT 45
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: PUSH
20803: LD_INT 34
20805: PUSH
20806: LD_INT 28
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 34
20815: PUSH
20816: LD_INT 47
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: LIST
20828: LIST
20829: PUSH
20830: EMPTY
20831: LIST
20832: LIST
20833: PPUSH
20834: CALL_OW 69
20838: ST_TO_ADDR
// if not tmp then
20839: LD_VAR 0 2
20843: NOT
20844: IFFALSE 20848
// exit ;
20846: GO 20877
// for i in tmp do
20848: LD_ADDR_VAR 0 1
20852: PUSH
20853: LD_VAR 0 2
20857: PUSH
20858: FOR_IN
20859: IFFALSE 20875
// begin SetLives ( i , 0 ) ;
20861: LD_VAR 0 1
20865: PPUSH
20866: LD_INT 0
20868: PPUSH
20869: CALL_OW 234
// end ;
20873: GO 20858
20875: POP
20876: POP
// end ;
20877: PPOPN 2
20879: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
20880: LD_EXP 60
20884: PUSH
20885: LD_EXP 66
20889: AND
20890: IFFALSE 20974
20892: GO 20894
20894: DISABLE
20895: LD_INT 0
20897: PPUSH
20898: PPUSH
// begin enable ;
20899: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
20900: LD_ADDR_VAR 0 2
20904: PUSH
20905: LD_INT 22
20907: PUSH
20908: LD_OWVAR 2
20912: PUSH
20913: EMPTY
20914: LIST
20915: LIST
20916: PUSH
20917: LD_INT 32
20919: PUSH
20920: LD_INT 3
20922: PUSH
20923: EMPTY
20924: LIST
20925: LIST
20926: PUSH
20927: EMPTY
20928: LIST
20929: LIST
20930: PPUSH
20931: CALL_OW 69
20935: ST_TO_ADDR
// if not tmp then
20936: LD_VAR 0 2
20940: NOT
20941: IFFALSE 20945
// exit ;
20943: GO 20974
// for i in tmp do
20945: LD_ADDR_VAR 0 1
20949: PUSH
20950: LD_VAR 0 2
20954: PUSH
20955: FOR_IN
20956: IFFALSE 20972
// begin SetLives ( i , 0 ) ;
20958: LD_VAR 0 1
20962: PPUSH
20963: LD_INT 0
20965: PPUSH
20966: CALL_OW 234
// end ;
20970: GO 20955
20972: POP
20973: POP
// end ;
20974: PPOPN 2
20976: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
20977: LD_EXP 60
20981: PUSH
20982: LD_EXP 63
20986: AND
20987: IFFALSE 21080
20989: GO 20991
20991: DISABLE
20992: LD_INT 0
20994: PPUSH
// begin enable ;
20995: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
20996: LD_ADDR_VAR 0 1
21000: PUSH
21001: LD_INT 22
21003: PUSH
21004: LD_OWVAR 2
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 2
21015: PUSH
21016: LD_INT 25
21018: PUSH
21019: LD_INT 5
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PUSH
21026: LD_INT 25
21028: PUSH
21029: LD_INT 9
21031: PUSH
21032: EMPTY
21033: LIST
21034: LIST
21035: PUSH
21036: LD_INT 25
21038: PUSH
21039: LD_INT 8
21041: PUSH
21042: EMPTY
21043: LIST
21044: LIST
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: LIST
21050: LIST
21051: PUSH
21052: EMPTY
21053: LIST
21054: LIST
21055: PPUSH
21056: CALL_OW 69
21060: PUSH
21061: FOR_IN
21062: IFFALSE 21078
// begin SetClass ( i , 1 ) ;
21064: LD_VAR 0 1
21068: PPUSH
21069: LD_INT 1
21071: PPUSH
21072: CALL_OW 336
// end ;
21076: GO 21061
21078: POP
21079: POP
// end ;
21080: PPOPN 1
21082: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21083: LD_EXP 60
21087: PUSH
21088: LD_EXP 64
21092: AND
21093: PUSH
21094: LD_OWVAR 65
21098: PUSH
21099: LD_INT 7
21101: LESS
21102: AND
21103: IFFALSE 21117
21105: GO 21107
21107: DISABLE
// begin enable ;
21108: ENABLE
// game_speed := 7 ;
21109: LD_ADDR_OWVAR 65
21113: PUSH
21114: LD_INT 7
21116: ST_TO_ADDR
// end ;
21117: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21118: LD_EXP 60
21122: PUSH
21123: LD_EXP 67
21127: AND
21128: IFFALSE 21330
21130: GO 21132
21132: DISABLE
21133: LD_INT 0
21135: PPUSH
21136: PPUSH
21137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21138: LD_ADDR_VAR 0 3
21142: PUSH
21143: LD_INT 81
21145: PUSH
21146: LD_OWVAR 2
21150: PUSH
21151: EMPTY
21152: LIST
21153: LIST
21154: PUSH
21155: LD_INT 21
21157: PUSH
21158: LD_INT 1
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: PUSH
21165: EMPTY
21166: LIST
21167: LIST
21168: PPUSH
21169: CALL_OW 69
21173: ST_TO_ADDR
// if not tmp then
21174: LD_VAR 0 3
21178: NOT
21179: IFFALSE 21183
// exit ;
21181: GO 21330
// if tmp > 5 then
21183: LD_VAR 0 3
21187: PUSH
21188: LD_INT 5
21190: GREATER
21191: IFFALSE 21203
// k := 5 else
21193: LD_ADDR_VAR 0 2
21197: PUSH
21198: LD_INT 5
21200: ST_TO_ADDR
21201: GO 21213
// k := tmp ;
21203: LD_ADDR_VAR 0 2
21207: PUSH
21208: LD_VAR 0 3
21212: ST_TO_ADDR
// for i := 1 to k do
21213: LD_ADDR_VAR 0 1
21217: PUSH
21218: DOUBLE
21219: LD_INT 1
21221: DEC
21222: ST_TO_ADDR
21223: LD_VAR 0 2
21227: PUSH
21228: FOR_TO
21229: IFFALSE 21328
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21231: LD_VAR 0 3
21235: PUSH
21236: LD_VAR 0 1
21240: ARRAY
21241: PPUSH
21242: LD_VAR 0 1
21246: PUSH
21247: LD_INT 4
21249: MOD
21250: PUSH
21251: LD_INT 1
21253: PLUS
21254: PPUSH
21255: CALL_OW 259
21259: PUSH
21260: LD_INT 10
21262: LESS
21263: IFFALSE 21326
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21265: LD_VAR 0 3
21269: PUSH
21270: LD_VAR 0 1
21274: ARRAY
21275: PPUSH
21276: LD_VAR 0 1
21280: PUSH
21281: LD_INT 4
21283: MOD
21284: PUSH
21285: LD_INT 1
21287: PLUS
21288: PPUSH
21289: LD_VAR 0 3
21293: PUSH
21294: LD_VAR 0 1
21298: ARRAY
21299: PPUSH
21300: LD_VAR 0 1
21304: PUSH
21305: LD_INT 4
21307: MOD
21308: PUSH
21309: LD_INT 1
21311: PLUS
21312: PPUSH
21313: CALL_OW 259
21317: PUSH
21318: LD_INT 1
21320: PLUS
21321: PPUSH
21322: CALL_OW 237
21326: GO 21228
21328: POP
21329: POP
// end ;
21330: PPOPN 3
21332: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21333: LD_EXP 60
21337: PUSH
21338: LD_EXP 68
21342: AND
21343: IFFALSE 21363
21345: GO 21347
21347: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21348: LD_INT 4
21350: PPUSH
21351: LD_OWVAR 2
21355: PPUSH
21356: LD_INT 0
21358: PPUSH
21359: CALL_OW 324
21363: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21364: LD_EXP 60
21368: PUSH
21369: LD_EXP 97
21373: AND
21374: IFFALSE 21394
21376: GO 21378
21378: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21379: LD_INT 19
21381: PPUSH
21382: LD_OWVAR 2
21386: PPUSH
21387: LD_INT 0
21389: PPUSH
21390: CALL_OW 324
21394: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21395: LD_EXP 60
21399: PUSH
21400: LD_EXP 69
21404: AND
21405: IFFALSE 21507
21407: GO 21409
21409: DISABLE
21410: LD_INT 0
21412: PPUSH
21413: PPUSH
// begin enable ;
21414: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21415: LD_ADDR_VAR 0 2
21419: PUSH
21420: LD_INT 22
21422: PUSH
21423: LD_OWVAR 2
21427: PUSH
21428: EMPTY
21429: LIST
21430: LIST
21431: PUSH
21432: LD_INT 2
21434: PUSH
21435: LD_INT 34
21437: PUSH
21438: LD_INT 11
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 34
21447: PUSH
21448: LD_INT 30
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: LIST
21459: PUSH
21460: EMPTY
21461: LIST
21462: LIST
21463: PPUSH
21464: CALL_OW 69
21468: ST_TO_ADDR
// if not tmp then
21469: LD_VAR 0 2
21473: NOT
21474: IFFALSE 21478
// exit ;
21476: GO 21507
// for i in tmp do
21478: LD_ADDR_VAR 0 1
21482: PUSH
21483: LD_VAR 0 2
21487: PUSH
21488: FOR_IN
21489: IFFALSE 21505
// begin SetLives ( i , 0 ) ;
21491: LD_VAR 0 1
21495: PPUSH
21496: LD_INT 0
21498: PPUSH
21499: CALL_OW 234
// end ;
21503: GO 21488
21505: POP
21506: POP
// end ;
21507: PPOPN 2
21509: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21510: LD_EXP 60
21514: PUSH
21515: LD_EXP 70
21519: AND
21520: IFFALSE 21540
21522: GO 21524
21524: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21525: LD_INT 32
21527: PPUSH
21528: LD_OWVAR 2
21532: PPUSH
21533: LD_INT 0
21535: PPUSH
21536: CALL_OW 324
21540: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21541: LD_EXP 60
21545: PUSH
21546: LD_EXP 71
21550: AND
21551: IFFALSE 21732
21553: GO 21555
21555: DISABLE
21556: LD_INT 0
21558: PPUSH
21559: PPUSH
21560: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21561: LD_ADDR_VAR 0 2
21565: PUSH
21566: LD_INT 22
21568: PUSH
21569: LD_OWVAR 2
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: LD_INT 33
21580: PUSH
21581: LD_INT 3
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: LIST
21591: PPUSH
21592: CALL_OW 69
21596: ST_TO_ADDR
// if not tmp then
21597: LD_VAR 0 2
21601: NOT
21602: IFFALSE 21606
// exit ;
21604: GO 21732
// side := 0 ;
21606: LD_ADDR_VAR 0 3
21610: PUSH
21611: LD_INT 0
21613: ST_TO_ADDR
// for i := 1 to 8 do
21614: LD_ADDR_VAR 0 1
21618: PUSH
21619: DOUBLE
21620: LD_INT 1
21622: DEC
21623: ST_TO_ADDR
21624: LD_INT 8
21626: PUSH
21627: FOR_TO
21628: IFFALSE 21676
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21630: LD_OWVAR 2
21634: PUSH
21635: LD_VAR 0 1
21639: NONEQUAL
21640: PUSH
21641: LD_OWVAR 2
21645: PPUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: CALL_OW 81
21655: PUSH
21656: LD_INT 2
21658: EQUAL
21659: AND
21660: IFFALSE 21674
// begin side := i ;
21662: LD_ADDR_VAR 0 3
21666: PUSH
21667: LD_VAR 0 1
21671: ST_TO_ADDR
// break ;
21672: GO 21676
// end ;
21674: GO 21627
21676: POP
21677: POP
// if not side then
21678: LD_VAR 0 3
21682: NOT
21683: IFFALSE 21687
// exit ;
21685: GO 21732
// for i := 1 to tmp do
21687: LD_ADDR_VAR 0 1
21691: PUSH
21692: DOUBLE
21693: LD_INT 1
21695: DEC
21696: ST_TO_ADDR
21697: LD_VAR 0 2
21701: PUSH
21702: FOR_TO
21703: IFFALSE 21730
// if Prob ( 60 ) then
21705: LD_INT 60
21707: PPUSH
21708: CALL_OW 13
21712: IFFALSE 21728
// SetSide ( i , side ) ;
21714: LD_VAR 0 1
21718: PPUSH
21719: LD_VAR 0 3
21723: PPUSH
21724: CALL_OW 235
21728: GO 21702
21730: POP
21731: POP
// end ;
21732: PPOPN 3
21734: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21735: LD_EXP 60
21739: PUSH
21740: LD_EXP 73
21744: AND
21745: IFFALSE 21864
21747: GO 21749
21749: DISABLE
21750: LD_INT 0
21752: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21753: LD_ADDR_VAR 0 1
21757: PUSH
21758: LD_INT 22
21760: PUSH
21761: LD_OWVAR 2
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PUSH
21770: LD_INT 21
21772: PUSH
21773: LD_INT 1
21775: PUSH
21776: EMPTY
21777: LIST
21778: LIST
21779: PUSH
21780: LD_INT 3
21782: PUSH
21783: LD_INT 23
21785: PUSH
21786: LD_INT 0
21788: PUSH
21789: EMPTY
21790: LIST
21791: LIST
21792: PUSH
21793: EMPTY
21794: LIST
21795: LIST
21796: PUSH
21797: EMPTY
21798: LIST
21799: LIST
21800: LIST
21801: PPUSH
21802: CALL_OW 69
21806: PUSH
21807: FOR_IN
21808: IFFALSE 21862
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21810: LD_VAR 0 1
21814: PPUSH
21815: CALL_OW 257
21819: PUSH
21820: LD_INT 1
21822: PUSH
21823: LD_INT 2
21825: PUSH
21826: LD_INT 3
21828: PUSH
21829: LD_INT 4
21831: PUSH
21832: EMPTY
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: IN
21838: IFFALSE 21860
// SetClass ( un , rand ( 1 , 4 ) ) ;
21840: LD_VAR 0 1
21844: PPUSH
21845: LD_INT 1
21847: PPUSH
21848: LD_INT 4
21850: PPUSH
21851: CALL_OW 12
21855: PPUSH
21856: CALL_OW 336
21860: GO 21807
21862: POP
21863: POP
// end ;
21864: PPOPN 1
21866: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
21867: LD_EXP 60
21871: PUSH
21872: LD_EXP 72
21876: AND
21877: IFFALSE 21956
21879: GO 21881
21881: DISABLE
21882: LD_INT 0
21884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
21885: LD_ADDR_VAR 0 1
21889: PUSH
21890: LD_INT 22
21892: PUSH
21893: LD_OWVAR 2
21897: PUSH
21898: EMPTY
21899: LIST
21900: LIST
21901: PUSH
21902: LD_INT 21
21904: PUSH
21905: LD_INT 3
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PUSH
21912: EMPTY
21913: LIST
21914: LIST
21915: PPUSH
21916: CALL_OW 69
21920: ST_TO_ADDR
// if not tmp then
21921: LD_VAR 0 1
21925: NOT
21926: IFFALSE 21930
// exit ;
21928: GO 21956
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
21930: LD_VAR 0 1
21934: PUSH
21935: LD_INT 1
21937: PPUSH
21938: LD_VAR 0 1
21942: PPUSH
21943: CALL_OW 12
21947: ARRAY
21948: PPUSH
21949: LD_INT 100
21951: PPUSH
21952: CALL_OW 234
// end ;
21956: PPOPN 1
21958: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
21959: LD_EXP 60
21963: PUSH
21964: LD_EXP 74
21968: AND
21969: IFFALSE 22067
21971: GO 21973
21973: DISABLE
21974: LD_INT 0
21976: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
21977: LD_ADDR_VAR 0 1
21981: PUSH
21982: LD_INT 22
21984: PUSH
21985: LD_OWVAR 2
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: PUSH
21994: LD_INT 21
21996: PUSH
21997: LD_INT 1
21999: PUSH
22000: EMPTY
22001: LIST
22002: LIST
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PPUSH
22008: CALL_OW 69
22012: ST_TO_ADDR
// if not tmp then
22013: LD_VAR 0 1
22017: NOT
22018: IFFALSE 22022
// exit ;
22020: GO 22067
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22022: LD_VAR 0 1
22026: PUSH
22027: LD_INT 1
22029: PPUSH
22030: LD_VAR 0 1
22034: PPUSH
22035: CALL_OW 12
22039: ARRAY
22040: PPUSH
22041: LD_INT 1
22043: PPUSH
22044: LD_INT 4
22046: PPUSH
22047: CALL_OW 12
22051: PPUSH
22052: LD_INT 3000
22054: PPUSH
22055: LD_INT 9000
22057: PPUSH
22058: CALL_OW 12
22062: PPUSH
22063: CALL_OW 492
// end ;
22067: PPOPN 1
22069: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22070: LD_EXP 60
22074: PUSH
22075: LD_EXP 75
22079: AND
22080: IFFALSE 22100
22082: GO 22084
22084: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22085: LD_INT 1
22087: PPUSH
22088: LD_OWVAR 2
22092: PPUSH
22093: LD_INT 0
22095: PPUSH
22096: CALL_OW 324
22100: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22101: LD_EXP 60
22105: PUSH
22106: LD_EXP 76
22110: AND
22111: IFFALSE 22194
22113: GO 22115
22115: DISABLE
22116: LD_INT 0
22118: PPUSH
22119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22120: LD_ADDR_VAR 0 2
22124: PUSH
22125: LD_INT 22
22127: PUSH
22128: LD_OWVAR 2
22132: PUSH
22133: EMPTY
22134: LIST
22135: LIST
22136: PUSH
22137: LD_INT 21
22139: PUSH
22140: LD_INT 3
22142: PUSH
22143: EMPTY
22144: LIST
22145: LIST
22146: PUSH
22147: EMPTY
22148: LIST
22149: LIST
22150: PPUSH
22151: CALL_OW 69
22155: ST_TO_ADDR
// if not tmp then
22156: LD_VAR 0 2
22160: NOT
22161: IFFALSE 22165
// exit ;
22163: GO 22194
// for i in tmp do
22165: LD_ADDR_VAR 0 1
22169: PUSH
22170: LD_VAR 0 2
22174: PUSH
22175: FOR_IN
22176: IFFALSE 22192
// SetBLevel ( i , 10 ) ;
22178: LD_VAR 0 1
22182: PPUSH
22183: LD_INT 10
22185: PPUSH
22186: CALL_OW 241
22190: GO 22175
22192: POP
22193: POP
// end ;
22194: PPOPN 2
22196: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22197: LD_EXP 60
22201: PUSH
22202: LD_EXP 77
22206: AND
22207: IFFALSE 22318
22209: GO 22211
22211: DISABLE
22212: LD_INT 0
22214: PPUSH
22215: PPUSH
22216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22217: LD_ADDR_VAR 0 3
22221: PUSH
22222: LD_INT 22
22224: PUSH
22225: LD_OWVAR 2
22229: PUSH
22230: EMPTY
22231: LIST
22232: LIST
22233: PUSH
22234: LD_INT 25
22236: PUSH
22237: LD_INT 1
22239: PUSH
22240: EMPTY
22241: LIST
22242: LIST
22243: PUSH
22244: EMPTY
22245: LIST
22246: LIST
22247: PPUSH
22248: CALL_OW 69
22252: ST_TO_ADDR
// if not tmp then
22253: LD_VAR 0 3
22257: NOT
22258: IFFALSE 22262
// exit ;
22260: GO 22318
// un := tmp [ rand ( 1 , tmp ) ] ;
22262: LD_ADDR_VAR 0 2
22266: PUSH
22267: LD_VAR 0 3
22271: PUSH
22272: LD_INT 1
22274: PPUSH
22275: LD_VAR 0 3
22279: PPUSH
22280: CALL_OW 12
22284: ARRAY
22285: ST_TO_ADDR
// if Crawls ( un ) then
22286: LD_VAR 0 2
22290: PPUSH
22291: CALL_OW 318
22295: IFFALSE 22306
// ComWalk ( un ) ;
22297: LD_VAR 0 2
22301: PPUSH
22302: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22306: LD_VAR 0 2
22310: PPUSH
22311: LD_INT 5
22313: PPUSH
22314: CALL_OW 336
// end ;
22318: PPOPN 3
22320: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22321: LD_EXP 60
22325: PUSH
22326: LD_EXP 78
22330: AND
22331: PUSH
22332: LD_OWVAR 67
22336: PUSH
22337: LD_INT 4
22339: LESS
22340: AND
22341: IFFALSE 22360
22343: GO 22345
22345: DISABLE
// begin Difficulty := Difficulty + 1 ;
22346: LD_ADDR_OWVAR 67
22350: PUSH
22351: LD_OWVAR 67
22355: PUSH
22356: LD_INT 1
22358: PLUS
22359: ST_TO_ADDR
// end ;
22360: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22361: LD_EXP 60
22365: PUSH
22366: LD_EXP 79
22370: AND
22371: IFFALSE 22474
22373: GO 22375
22375: DISABLE
22376: LD_INT 0
22378: PPUSH
// begin for i := 1 to 5 do
22379: LD_ADDR_VAR 0 1
22383: PUSH
22384: DOUBLE
22385: LD_INT 1
22387: DEC
22388: ST_TO_ADDR
22389: LD_INT 5
22391: PUSH
22392: FOR_TO
22393: IFFALSE 22472
// begin uc_nation := nation_nature ;
22395: LD_ADDR_OWVAR 21
22399: PUSH
22400: LD_INT 0
22402: ST_TO_ADDR
// uc_side := 0 ;
22403: LD_ADDR_OWVAR 20
22407: PUSH
22408: LD_INT 0
22410: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22411: LD_ADDR_OWVAR 29
22415: PUSH
22416: LD_INT 12
22418: PUSH
22419: LD_INT 12
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: ST_TO_ADDR
// hc_agressivity := 20 ;
22426: LD_ADDR_OWVAR 35
22430: PUSH
22431: LD_INT 20
22433: ST_TO_ADDR
// hc_class := class_tiger ;
22434: LD_ADDR_OWVAR 28
22438: PUSH
22439: LD_INT 14
22441: ST_TO_ADDR
// hc_gallery :=  ;
22442: LD_ADDR_OWVAR 33
22446: PUSH
22447: LD_STRING 
22449: ST_TO_ADDR
// hc_name :=  ;
22450: LD_ADDR_OWVAR 26
22454: PUSH
22455: LD_STRING 
22457: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22458: CALL_OW 44
22462: PPUSH
22463: LD_INT 0
22465: PPUSH
22466: CALL_OW 51
// end ;
22470: GO 22392
22472: POP
22473: POP
// end ;
22474: PPOPN 1
22476: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22477: LD_EXP 60
22481: PUSH
22482: LD_EXP 80
22486: AND
22487: IFFALSE 22496
22489: GO 22491
22491: DISABLE
// StreamSibBomb ;
22492: CALL 22497 0 0
22496: END
// export function StreamSibBomb ; var i , x , y ; begin
22497: LD_INT 0
22499: PPUSH
22500: PPUSH
22501: PPUSH
22502: PPUSH
// result := false ;
22503: LD_ADDR_VAR 0 1
22507: PUSH
22508: LD_INT 0
22510: ST_TO_ADDR
// for i := 1 to 16 do
22511: LD_ADDR_VAR 0 2
22515: PUSH
22516: DOUBLE
22517: LD_INT 1
22519: DEC
22520: ST_TO_ADDR
22521: LD_INT 16
22523: PUSH
22524: FOR_TO
22525: IFFALSE 22724
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22527: LD_ADDR_VAR 0 3
22531: PUSH
22532: LD_INT 10
22534: PUSH
22535: LD_INT 20
22537: PUSH
22538: LD_INT 30
22540: PUSH
22541: LD_INT 40
22543: PUSH
22544: LD_INT 50
22546: PUSH
22547: LD_INT 60
22549: PUSH
22550: LD_INT 70
22552: PUSH
22553: LD_INT 80
22555: PUSH
22556: LD_INT 90
22558: PUSH
22559: LD_INT 100
22561: PUSH
22562: LD_INT 110
22564: PUSH
22565: LD_INT 120
22567: PUSH
22568: LD_INT 130
22570: PUSH
22571: LD_INT 140
22573: PUSH
22574: LD_INT 150
22576: PUSH
22577: EMPTY
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: LIST
22591: LIST
22592: LIST
22593: PUSH
22594: LD_INT 1
22596: PPUSH
22597: LD_INT 15
22599: PPUSH
22600: CALL_OW 12
22604: ARRAY
22605: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22606: LD_ADDR_VAR 0 4
22610: PUSH
22611: LD_INT 10
22613: PUSH
22614: LD_INT 20
22616: PUSH
22617: LD_INT 30
22619: PUSH
22620: LD_INT 40
22622: PUSH
22623: LD_INT 50
22625: PUSH
22626: LD_INT 60
22628: PUSH
22629: LD_INT 70
22631: PUSH
22632: LD_INT 80
22634: PUSH
22635: LD_INT 90
22637: PUSH
22638: LD_INT 100
22640: PUSH
22641: LD_INT 110
22643: PUSH
22644: LD_INT 120
22646: PUSH
22647: LD_INT 130
22649: PUSH
22650: LD_INT 140
22652: PUSH
22653: LD_INT 150
22655: PUSH
22656: EMPTY
22657: LIST
22658: LIST
22659: LIST
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: LIST
22665: LIST
22666: LIST
22667: LIST
22668: LIST
22669: LIST
22670: LIST
22671: LIST
22672: PUSH
22673: LD_INT 1
22675: PPUSH
22676: LD_INT 15
22678: PPUSH
22679: CALL_OW 12
22683: ARRAY
22684: ST_TO_ADDR
// if ValidHex ( x , y ) then
22685: LD_VAR 0 3
22689: PPUSH
22690: LD_VAR 0 4
22694: PPUSH
22695: CALL_OW 488
22699: IFFALSE 22722
// begin result := [ x , y ] ;
22701: LD_ADDR_VAR 0 1
22705: PUSH
22706: LD_VAR 0 3
22710: PUSH
22711: LD_VAR 0 4
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: ST_TO_ADDR
// break ;
22720: GO 22724
// end ; end ;
22722: GO 22524
22724: POP
22725: POP
// if result then
22726: LD_VAR 0 1
22730: IFFALSE 22790
// begin ToLua ( playSibBomb() ) ;
22732: LD_STRING playSibBomb()
22734: PPUSH
22735: CALL_OW 559
// wait ( 0 0$14 ) ;
22739: LD_INT 490
22741: PPUSH
22742: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22746: LD_VAR 0 1
22750: PUSH
22751: LD_INT 1
22753: ARRAY
22754: PPUSH
22755: LD_VAR 0 1
22759: PUSH
22760: LD_INT 2
22762: ARRAY
22763: PPUSH
22764: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22768: LD_VAR 0 1
22772: PUSH
22773: LD_INT 1
22775: ARRAY
22776: PPUSH
22777: LD_VAR 0 1
22781: PUSH
22782: LD_INT 2
22784: ARRAY
22785: PPUSH
22786: CALL_OW 429
// end ; end ;
22790: LD_VAR 0 1
22794: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22795: LD_EXP 60
22799: PUSH
22800: LD_EXP 82
22804: AND
22805: IFFALSE 22817
22807: GO 22809
22809: DISABLE
// YouLost (  ) ;
22810: LD_STRING 
22812: PPUSH
22813: CALL_OW 104
22817: END
// every 0 0$1 trigger StreamModeActive and sFog do
22818: LD_EXP 60
22822: PUSH
22823: LD_EXP 81
22827: AND
22828: IFFALSE 22842
22830: GO 22832
22832: DISABLE
// FogOff ( your_side ) ;
22833: LD_OWVAR 2
22837: PPUSH
22838: CALL_OW 344
22842: END
// every 0 0$1 trigger StreamModeActive and sSun do
22843: LD_EXP 60
22847: PUSH
22848: LD_EXP 83
22852: AND
22853: IFFALSE 22881
22855: GO 22857
22857: DISABLE
// begin solar_recharge_percent := 0 ;
22858: LD_ADDR_OWVAR 79
22862: PUSH
22863: LD_INT 0
22865: ST_TO_ADDR
// wait ( 5 5$00 ) ;
22866: LD_INT 10500
22868: PPUSH
22869: CALL_OW 67
// solar_recharge_percent := 100 ;
22873: LD_ADDR_OWVAR 79
22877: PUSH
22878: LD_INT 100
22880: ST_TO_ADDR
// end ;
22881: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
22882: LD_EXP 60
22886: PUSH
22887: LD_EXP 84
22891: AND
22892: IFFALSE 23131
22894: GO 22896
22896: DISABLE
22897: LD_INT 0
22899: PPUSH
22900: PPUSH
22901: PPUSH
// begin tmp := [ ] ;
22902: LD_ADDR_VAR 0 3
22906: PUSH
22907: EMPTY
22908: ST_TO_ADDR
// for i := 1 to 6 do
22909: LD_ADDR_VAR 0 1
22913: PUSH
22914: DOUBLE
22915: LD_INT 1
22917: DEC
22918: ST_TO_ADDR
22919: LD_INT 6
22921: PUSH
22922: FOR_TO
22923: IFFALSE 23028
// begin uc_nation := nation_nature ;
22925: LD_ADDR_OWVAR 21
22929: PUSH
22930: LD_INT 0
22932: ST_TO_ADDR
// uc_side := 0 ;
22933: LD_ADDR_OWVAR 20
22937: PUSH
22938: LD_INT 0
22940: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22941: LD_ADDR_OWVAR 29
22945: PUSH
22946: LD_INT 12
22948: PUSH
22949: LD_INT 12
22951: PUSH
22952: EMPTY
22953: LIST
22954: LIST
22955: ST_TO_ADDR
// hc_agressivity := 20 ;
22956: LD_ADDR_OWVAR 35
22960: PUSH
22961: LD_INT 20
22963: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
22964: LD_ADDR_OWVAR 28
22968: PUSH
22969: LD_INT 17
22971: ST_TO_ADDR
// hc_gallery :=  ;
22972: LD_ADDR_OWVAR 33
22976: PUSH
22977: LD_STRING 
22979: ST_TO_ADDR
// hc_name :=  ;
22980: LD_ADDR_OWVAR 26
22984: PUSH
22985: LD_STRING 
22987: ST_TO_ADDR
// un := CreateHuman ;
22988: LD_ADDR_VAR 0 2
22992: PUSH
22993: CALL_OW 44
22997: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
22998: LD_VAR 0 2
23002: PPUSH
23003: LD_INT 1
23005: PPUSH
23006: CALL_OW 51
// tmp := tmp ^ un ;
23010: LD_ADDR_VAR 0 3
23014: PUSH
23015: LD_VAR 0 3
23019: PUSH
23020: LD_VAR 0 2
23024: ADD
23025: ST_TO_ADDR
// end ;
23026: GO 22922
23028: POP
23029: POP
// repeat wait ( 0 0$1 ) ;
23030: LD_INT 35
23032: PPUSH
23033: CALL_OW 67
// for un in tmp do
23037: LD_ADDR_VAR 0 2
23041: PUSH
23042: LD_VAR 0 3
23046: PUSH
23047: FOR_IN
23048: IFFALSE 23122
// begin if IsDead ( un ) then
23050: LD_VAR 0 2
23054: PPUSH
23055: CALL_OW 301
23059: IFFALSE 23079
// begin tmp := tmp diff un ;
23061: LD_ADDR_VAR 0 3
23065: PUSH
23066: LD_VAR 0 3
23070: PUSH
23071: LD_VAR 0 2
23075: DIFF
23076: ST_TO_ADDR
// continue ;
23077: GO 23047
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23079: LD_VAR 0 2
23083: PPUSH
23084: LD_INT 3
23086: PUSH
23087: LD_INT 22
23089: PUSH
23090: LD_INT 0
23092: PUSH
23093: EMPTY
23094: LIST
23095: LIST
23096: PUSH
23097: EMPTY
23098: LIST
23099: LIST
23100: PPUSH
23101: CALL_OW 69
23105: PPUSH
23106: LD_VAR 0 2
23110: PPUSH
23111: CALL_OW 74
23115: PPUSH
23116: CALL_OW 115
// end ;
23120: GO 23047
23122: POP
23123: POP
// until not tmp ;
23124: LD_VAR 0 3
23128: NOT
23129: IFFALSE 23030
// end ;
23131: PPOPN 3
23133: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23134: LD_EXP 60
23138: PUSH
23139: LD_EXP 85
23143: AND
23144: IFFALSE 23198
23146: GO 23148
23148: DISABLE
// begin ToLua ( displayTroll(); ) ;
23149: LD_STRING displayTroll();
23151: PPUSH
23152: CALL_OW 559
// wait ( 3 3$00 ) ;
23156: LD_INT 6300
23158: PPUSH
23159: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23163: LD_STRING hideTroll();
23165: PPUSH
23166: CALL_OW 559
// wait ( 1 1$00 ) ;
23170: LD_INT 2100
23172: PPUSH
23173: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23177: LD_STRING displayTroll();
23179: PPUSH
23180: CALL_OW 559
// wait ( 1 1$00 ) ;
23184: LD_INT 2100
23186: PPUSH
23187: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23191: LD_STRING hideTroll();
23193: PPUSH
23194: CALL_OW 559
// end ;
23198: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23199: LD_EXP 60
23203: PUSH
23204: LD_EXP 86
23208: AND
23209: IFFALSE 23272
23211: GO 23213
23213: DISABLE
23214: LD_INT 0
23216: PPUSH
// begin p := 0 ;
23217: LD_ADDR_VAR 0 1
23221: PUSH
23222: LD_INT 0
23224: ST_TO_ADDR
// repeat game_speed := 1 ;
23225: LD_ADDR_OWVAR 65
23229: PUSH
23230: LD_INT 1
23232: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23233: LD_INT 35
23235: PPUSH
23236: CALL_OW 67
// p := p + 1 ;
23240: LD_ADDR_VAR 0 1
23244: PUSH
23245: LD_VAR 0 1
23249: PUSH
23250: LD_INT 1
23252: PLUS
23253: ST_TO_ADDR
// until p >= 60 ;
23254: LD_VAR 0 1
23258: PUSH
23259: LD_INT 60
23261: GREATEREQUAL
23262: IFFALSE 23225
// game_speed := 4 ;
23264: LD_ADDR_OWVAR 65
23268: PUSH
23269: LD_INT 4
23271: ST_TO_ADDR
// end ;
23272: PPOPN 1
23274: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23275: LD_EXP 60
23279: PUSH
23280: LD_EXP 87
23284: AND
23285: IFFALSE 23431
23287: GO 23289
23289: DISABLE
23290: LD_INT 0
23292: PPUSH
23293: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23294: LD_ADDR_VAR 0 1
23298: PUSH
23299: LD_INT 22
23301: PUSH
23302: LD_OWVAR 2
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: LD_INT 2
23313: PUSH
23314: LD_INT 30
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 30
23326: PUSH
23327: LD_INT 1
23329: PUSH
23330: EMPTY
23331: LIST
23332: LIST
23333: PUSH
23334: EMPTY
23335: LIST
23336: LIST
23337: LIST
23338: PUSH
23339: EMPTY
23340: LIST
23341: LIST
23342: PPUSH
23343: CALL_OW 69
23347: ST_TO_ADDR
// if not depot then
23348: LD_VAR 0 1
23352: NOT
23353: IFFALSE 23357
// exit ;
23355: GO 23431
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23357: LD_ADDR_VAR 0 2
23361: PUSH
23362: LD_VAR 0 1
23366: PUSH
23367: LD_INT 1
23369: PPUSH
23370: LD_VAR 0 1
23374: PPUSH
23375: CALL_OW 12
23379: ARRAY
23380: PPUSH
23381: CALL_OW 274
23385: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23386: LD_VAR 0 2
23390: PPUSH
23391: LD_INT 1
23393: PPUSH
23394: LD_INT 0
23396: PPUSH
23397: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23401: LD_VAR 0 2
23405: PPUSH
23406: LD_INT 2
23408: PPUSH
23409: LD_INT 0
23411: PPUSH
23412: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23416: LD_VAR 0 2
23420: PPUSH
23421: LD_INT 3
23423: PPUSH
23424: LD_INT 0
23426: PPUSH
23427: CALL_OW 277
// end ;
23431: PPOPN 2
23433: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23434: LD_EXP 60
23438: PUSH
23439: LD_EXP 88
23443: AND
23444: IFFALSE 23541
23446: GO 23448
23448: DISABLE
23449: LD_INT 0
23451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23452: LD_ADDR_VAR 0 1
23456: PUSH
23457: LD_INT 22
23459: PUSH
23460: LD_OWVAR 2
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: PUSH
23469: LD_INT 21
23471: PUSH
23472: LD_INT 1
23474: PUSH
23475: EMPTY
23476: LIST
23477: LIST
23478: PUSH
23479: LD_INT 3
23481: PUSH
23482: LD_INT 23
23484: PUSH
23485: LD_INT 0
23487: PUSH
23488: EMPTY
23489: LIST
23490: LIST
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: PUSH
23496: EMPTY
23497: LIST
23498: LIST
23499: LIST
23500: PPUSH
23501: CALL_OW 69
23505: ST_TO_ADDR
// if not tmp then
23506: LD_VAR 0 1
23510: NOT
23511: IFFALSE 23515
// exit ;
23513: GO 23541
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23515: LD_VAR 0 1
23519: PUSH
23520: LD_INT 1
23522: PPUSH
23523: LD_VAR 0 1
23527: PPUSH
23528: CALL_OW 12
23532: ARRAY
23533: PPUSH
23534: LD_INT 200
23536: PPUSH
23537: CALL_OW 234
// end ;
23541: PPOPN 1
23543: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23544: LD_EXP 60
23548: PUSH
23549: LD_EXP 89
23553: AND
23554: IFFALSE 23633
23556: GO 23558
23558: DISABLE
23559: LD_INT 0
23561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23562: LD_ADDR_VAR 0 1
23566: PUSH
23567: LD_INT 22
23569: PUSH
23570: LD_OWVAR 2
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: PUSH
23579: LD_INT 21
23581: PUSH
23582: LD_INT 2
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: PUSH
23589: EMPTY
23590: LIST
23591: LIST
23592: PPUSH
23593: CALL_OW 69
23597: ST_TO_ADDR
// if not tmp then
23598: LD_VAR 0 1
23602: NOT
23603: IFFALSE 23607
// exit ;
23605: GO 23633
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23607: LD_VAR 0 1
23611: PUSH
23612: LD_INT 1
23614: PPUSH
23615: LD_VAR 0 1
23619: PPUSH
23620: CALL_OW 12
23624: ARRAY
23625: PPUSH
23626: LD_INT 60
23628: PPUSH
23629: CALL_OW 234
// end ;
23633: PPOPN 1
23635: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23636: LD_EXP 60
23640: PUSH
23641: LD_EXP 90
23645: AND
23646: IFFALSE 23745
23648: GO 23650
23650: DISABLE
23651: LD_INT 0
23653: PPUSH
23654: PPUSH
// begin enable ;
23655: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23656: LD_ADDR_VAR 0 1
23660: PUSH
23661: LD_INT 22
23663: PUSH
23664: LD_OWVAR 2
23668: PUSH
23669: EMPTY
23670: LIST
23671: LIST
23672: PUSH
23673: LD_INT 61
23675: PUSH
23676: EMPTY
23677: LIST
23678: PUSH
23679: LD_INT 33
23681: PUSH
23682: LD_INT 2
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: EMPTY
23690: LIST
23691: LIST
23692: LIST
23693: PPUSH
23694: CALL_OW 69
23698: ST_TO_ADDR
// if not tmp then
23699: LD_VAR 0 1
23703: NOT
23704: IFFALSE 23708
// exit ;
23706: GO 23745
// for i in tmp do
23708: LD_ADDR_VAR 0 2
23712: PUSH
23713: LD_VAR 0 1
23717: PUSH
23718: FOR_IN
23719: IFFALSE 23743
// if IsControledBy ( i ) then
23721: LD_VAR 0 2
23725: PPUSH
23726: CALL_OW 312
23730: IFFALSE 23741
// ComUnlink ( i ) ;
23732: LD_VAR 0 2
23736: PPUSH
23737: CALL_OW 136
23741: GO 23718
23743: POP
23744: POP
// end ;
23745: PPOPN 2
23747: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23748: LD_EXP 60
23752: PUSH
23753: LD_EXP 91
23757: AND
23758: IFFALSE 23898
23760: GO 23762
23762: DISABLE
23763: LD_INT 0
23765: PPUSH
23766: PPUSH
// begin ToLua ( displayPowell(); ) ;
23767: LD_STRING displayPowell();
23769: PPUSH
23770: CALL_OW 559
// uc_side := 0 ;
23774: LD_ADDR_OWVAR 20
23778: PUSH
23779: LD_INT 0
23781: ST_TO_ADDR
// uc_nation := 2 ;
23782: LD_ADDR_OWVAR 21
23786: PUSH
23787: LD_INT 2
23789: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23790: LD_ADDR_OWVAR 37
23794: PUSH
23795: LD_INT 14
23797: ST_TO_ADDR
// vc_engine := engine_siberite ;
23798: LD_ADDR_OWVAR 39
23802: PUSH
23803: LD_INT 3
23805: ST_TO_ADDR
// vc_control := control_apeman ;
23806: LD_ADDR_OWVAR 38
23810: PUSH
23811: LD_INT 5
23813: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23814: LD_ADDR_OWVAR 40
23818: PUSH
23819: LD_INT 29
23821: ST_TO_ADDR
// un := CreateVehicle ;
23822: LD_ADDR_VAR 0 2
23826: PUSH
23827: CALL_OW 45
23831: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23832: LD_VAR 0 2
23836: PPUSH
23837: LD_INT 1
23839: PPUSH
23840: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23844: LD_INT 35
23846: PPUSH
23847: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23851: LD_VAR 0 2
23855: PPUSH
23856: LD_INT 22
23858: PUSH
23859: LD_OWVAR 2
23863: PUSH
23864: EMPTY
23865: LIST
23866: LIST
23867: PPUSH
23868: CALL_OW 69
23872: PPUSH
23873: LD_VAR 0 2
23877: PPUSH
23878: CALL_OW 74
23882: PPUSH
23883: CALL_OW 115
// until IsDead ( un ) ;
23887: LD_VAR 0 2
23891: PPUSH
23892: CALL_OW 301
23896: IFFALSE 23844
// end ;
23898: PPOPN 2
23900: END
// every 0 0$1 trigger StreamModeActive and sStu do
23901: LD_EXP 60
23905: PUSH
23906: LD_EXP 99
23910: AND
23911: IFFALSE 23927
23913: GO 23915
23915: DISABLE
// begin ToLua ( displayStucuk(); ) ;
23916: LD_STRING displayStucuk();
23918: PPUSH
23919: CALL_OW 559
// ResetFog ;
23923: CALL_OW 335
// end ;
23927: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
23928: LD_EXP 60
23932: PUSH
23933: LD_EXP 92
23937: AND
23938: IFFALSE 24079
23940: GO 23942
23942: DISABLE
23943: LD_INT 0
23945: PPUSH
23946: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23947: LD_ADDR_VAR 0 2
23951: PUSH
23952: LD_INT 22
23954: PUSH
23955: LD_OWVAR 2
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PUSH
23964: LD_INT 21
23966: PUSH
23967: LD_INT 1
23969: PUSH
23970: EMPTY
23971: LIST
23972: LIST
23973: PUSH
23974: EMPTY
23975: LIST
23976: LIST
23977: PPUSH
23978: CALL_OW 69
23982: ST_TO_ADDR
// if not tmp then
23983: LD_VAR 0 2
23987: NOT
23988: IFFALSE 23992
// exit ;
23990: GO 24079
// un := tmp [ rand ( 1 , tmp ) ] ;
23992: LD_ADDR_VAR 0 1
23996: PUSH
23997: LD_VAR 0 2
24001: PUSH
24002: LD_INT 1
24004: PPUSH
24005: LD_VAR 0 2
24009: PPUSH
24010: CALL_OW 12
24014: ARRAY
24015: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24016: LD_VAR 0 1
24020: PPUSH
24021: LD_INT 0
24023: PPUSH
24024: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24028: LD_VAR 0 1
24032: PPUSH
24033: LD_OWVAR 3
24037: PUSH
24038: LD_VAR 0 1
24042: DIFF
24043: PPUSH
24044: LD_VAR 0 1
24048: PPUSH
24049: CALL_OW 74
24053: PPUSH
24054: CALL_OW 115
// wait ( 0 0$20 ) ;
24058: LD_INT 700
24060: PPUSH
24061: CALL_OW 67
// SetSide ( un , your_side ) ;
24065: LD_VAR 0 1
24069: PPUSH
24070: LD_OWVAR 2
24074: PPUSH
24075: CALL_OW 235
// end ;
24079: PPOPN 2
24081: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24082: LD_EXP 60
24086: PUSH
24087: LD_EXP 93
24091: AND
24092: IFFALSE 24198
24094: GO 24096
24096: DISABLE
24097: LD_INT 0
24099: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24100: LD_ADDR_VAR 0 1
24104: PUSH
24105: LD_INT 22
24107: PUSH
24108: LD_OWVAR 2
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: PUSH
24117: LD_INT 2
24119: PUSH
24120: LD_INT 30
24122: PUSH
24123: LD_INT 0
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 30
24132: PUSH
24133: LD_INT 1
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: LIST
24144: PUSH
24145: EMPTY
24146: LIST
24147: LIST
24148: PPUSH
24149: CALL_OW 69
24153: ST_TO_ADDR
// if not depot then
24154: LD_VAR 0 1
24158: NOT
24159: IFFALSE 24163
// exit ;
24161: GO 24198
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24163: LD_VAR 0 1
24167: PUSH
24168: LD_INT 1
24170: ARRAY
24171: PPUSH
24172: CALL_OW 250
24176: PPUSH
24177: LD_VAR 0 1
24181: PUSH
24182: LD_INT 1
24184: ARRAY
24185: PPUSH
24186: CALL_OW 251
24190: PPUSH
24191: LD_INT 70
24193: PPUSH
24194: CALL_OW 495
// end ;
24198: PPOPN 1
24200: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24201: LD_EXP 60
24205: PUSH
24206: LD_EXP 94
24210: AND
24211: IFFALSE 24422
24213: GO 24215
24215: DISABLE
24216: LD_INT 0
24218: PPUSH
24219: PPUSH
24220: PPUSH
24221: PPUSH
24222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24223: LD_ADDR_VAR 0 5
24227: PUSH
24228: LD_INT 22
24230: PUSH
24231: LD_OWVAR 2
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: PUSH
24240: LD_INT 21
24242: PUSH
24243: LD_INT 1
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PPUSH
24254: CALL_OW 69
24258: ST_TO_ADDR
// if not tmp then
24259: LD_VAR 0 5
24263: NOT
24264: IFFALSE 24268
// exit ;
24266: GO 24422
// for i in tmp do
24268: LD_ADDR_VAR 0 1
24272: PUSH
24273: LD_VAR 0 5
24277: PUSH
24278: FOR_IN
24279: IFFALSE 24420
// begin d := rand ( 0 , 5 ) ;
24281: LD_ADDR_VAR 0 4
24285: PUSH
24286: LD_INT 0
24288: PPUSH
24289: LD_INT 5
24291: PPUSH
24292: CALL_OW 12
24296: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24297: LD_ADDR_VAR 0 2
24301: PUSH
24302: LD_VAR 0 1
24306: PPUSH
24307: CALL_OW 250
24311: PPUSH
24312: LD_VAR 0 4
24316: PPUSH
24317: LD_INT 3
24319: PPUSH
24320: LD_INT 12
24322: PPUSH
24323: CALL_OW 12
24327: PPUSH
24328: CALL_OW 272
24332: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24333: LD_ADDR_VAR 0 3
24337: PUSH
24338: LD_VAR 0 1
24342: PPUSH
24343: CALL_OW 251
24347: PPUSH
24348: LD_VAR 0 4
24352: PPUSH
24353: LD_INT 3
24355: PPUSH
24356: LD_INT 12
24358: PPUSH
24359: CALL_OW 12
24363: PPUSH
24364: CALL_OW 273
24368: ST_TO_ADDR
// if ValidHex ( x , y ) then
24369: LD_VAR 0 2
24373: PPUSH
24374: LD_VAR 0 3
24378: PPUSH
24379: CALL_OW 488
24383: IFFALSE 24418
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24385: LD_VAR 0 1
24389: PPUSH
24390: LD_VAR 0 2
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: LD_INT 3
24402: PPUSH
24403: LD_INT 6
24405: PPUSH
24406: CALL_OW 12
24410: PPUSH
24411: LD_INT 1
24413: PPUSH
24414: CALL_OW 483
// end ;
24418: GO 24278
24420: POP
24421: POP
// end ;
24422: PPOPN 5
24424: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24425: LD_EXP 60
24429: PUSH
24430: LD_EXP 95
24434: AND
24435: IFFALSE 24529
24437: GO 24439
24439: DISABLE
24440: LD_INT 0
24442: PPUSH
24443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24444: LD_ADDR_VAR 0 2
24448: PUSH
24449: LD_INT 22
24451: PUSH
24452: LD_OWVAR 2
24456: PUSH
24457: EMPTY
24458: LIST
24459: LIST
24460: PUSH
24461: LD_INT 32
24463: PUSH
24464: LD_INT 1
24466: PUSH
24467: EMPTY
24468: LIST
24469: LIST
24470: PUSH
24471: LD_INT 21
24473: PUSH
24474: LD_INT 2
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: EMPTY
24482: LIST
24483: LIST
24484: LIST
24485: PPUSH
24486: CALL_OW 69
24490: ST_TO_ADDR
// if not tmp then
24491: LD_VAR 0 2
24495: NOT
24496: IFFALSE 24500
// exit ;
24498: GO 24529
// for i in tmp do
24500: LD_ADDR_VAR 0 1
24504: PUSH
24505: LD_VAR 0 2
24509: PUSH
24510: FOR_IN
24511: IFFALSE 24527
// SetFuel ( i , 0 ) ;
24513: LD_VAR 0 1
24517: PPUSH
24518: LD_INT 0
24520: PPUSH
24521: CALL_OW 240
24525: GO 24510
24527: POP
24528: POP
// end ;
24529: PPOPN 2
24531: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24532: LD_EXP 60
24536: PUSH
24537: LD_EXP 96
24541: AND
24542: IFFALSE 24608
24544: GO 24546
24546: DISABLE
24547: LD_INT 0
24549: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24550: LD_ADDR_VAR 0 1
24554: PUSH
24555: LD_INT 22
24557: PUSH
24558: LD_OWVAR 2
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PUSH
24567: LD_INT 30
24569: PUSH
24570: LD_INT 29
24572: PUSH
24573: EMPTY
24574: LIST
24575: LIST
24576: PUSH
24577: EMPTY
24578: LIST
24579: LIST
24580: PPUSH
24581: CALL_OW 69
24585: ST_TO_ADDR
// if not tmp then
24586: LD_VAR 0 1
24590: NOT
24591: IFFALSE 24595
// exit ;
24593: GO 24608
// DestroyUnit ( tmp [ 1 ] ) ;
24595: LD_VAR 0 1
24599: PUSH
24600: LD_INT 1
24602: ARRAY
24603: PPUSH
24604: CALL_OW 65
// end ;
24608: PPOPN 1
24610: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24611: LD_EXP 60
24615: PUSH
24616: LD_EXP 98
24620: AND
24621: IFFALSE 24750
24623: GO 24625
24625: DISABLE
24626: LD_INT 0
24628: PPUSH
// begin uc_side := 0 ;
24629: LD_ADDR_OWVAR 20
24633: PUSH
24634: LD_INT 0
24636: ST_TO_ADDR
// uc_nation := nation_arabian ;
24637: LD_ADDR_OWVAR 21
24641: PUSH
24642: LD_INT 2
24644: ST_TO_ADDR
// hc_gallery :=  ;
24645: LD_ADDR_OWVAR 33
24649: PUSH
24650: LD_STRING 
24652: ST_TO_ADDR
// hc_name :=  ;
24653: LD_ADDR_OWVAR 26
24657: PUSH
24658: LD_STRING 
24660: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24661: LD_INT 1
24663: PPUSH
24664: LD_INT 11
24666: PPUSH
24667: LD_INT 10
24669: PPUSH
24670: CALL_OW 380
// un := CreateHuman ;
24674: LD_ADDR_VAR 0 1
24678: PUSH
24679: CALL_OW 44
24683: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24684: LD_VAR 0 1
24688: PPUSH
24689: LD_INT 1
24691: PPUSH
24692: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24696: LD_INT 35
24698: PPUSH
24699: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24703: LD_VAR 0 1
24707: PPUSH
24708: LD_INT 22
24710: PUSH
24711: LD_OWVAR 2
24715: PUSH
24716: EMPTY
24717: LIST
24718: LIST
24719: PPUSH
24720: CALL_OW 69
24724: PPUSH
24725: LD_VAR 0 1
24729: PPUSH
24730: CALL_OW 74
24734: PPUSH
24735: CALL_OW 115
// until IsDead ( un ) ;
24739: LD_VAR 0 1
24743: PPUSH
24744: CALL_OW 301
24748: IFFALSE 24696
// end ;
24750: PPOPN 1
24752: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24753: LD_EXP 60
24757: PUSH
24758: LD_EXP 100
24762: AND
24763: IFFALSE 24775
24765: GO 24767
24767: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24768: LD_STRING earthquake(getX(game), 0, 32)
24770: PPUSH
24771: CALL_OW 559
24775: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24776: LD_EXP 60
24780: PUSH
24781: LD_EXP 101
24785: AND
24786: IFFALSE 24877
24788: GO 24790
24790: DISABLE
24791: LD_INT 0
24793: PPUSH
// begin enable ;
24794: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24795: LD_ADDR_VAR 0 1
24799: PUSH
24800: LD_INT 22
24802: PUSH
24803: LD_OWVAR 2
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 21
24814: PUSH
24815: LD_INT 2
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: LD_INT 33
24824: PUSH
24825: LD_INT 3
24827: PUSH
24828: EMPTY
24829: LIST
24830: LIST
24831: PUSH
24832: EMPTY
24833: LIST
24834: LIST
24835: LIST
24836: PPUSH
24837: CALL_OW 69
24841: ST_TO_ADDR
// if not tmp then
24842: LD_VAR 0 1
24846: NOT
24847: IFFALSE 24851
// exit ;
24849: GO 24877
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24851: LD_VAR 0 1
24855: PUSH
24856: LD_INT 1
24858: PPUSH
24859: LD_VAR 0 1
24863: PPUSH
24864: CALL_OW 12
24868: ARRAY
24869: PPUSH
24870: LD_INT 1
24872: PPUSH
24873: CALL_OW 234
// end ;
24877: PPOPN 1
24879: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
24880: LD_EXP 60
24884: PUSH
24885: LD_EXP 102
24889: AND
24890: IFFALSE 25031
24892: GO 24894
24894: DISABLE
24895: LD_INT 0
24897: PPUSH
24898: PPUSH
24899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24900: LD_ADDR_VAR 0 3
24904: PUSH
24905: LD_INT 22
24907: PUSH
24908: LD_OWVAR 2
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 25
24919: PUSH
24920: LD_INT 1
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PPUSH
24931: CALL_OW 69
24935: ST_TO_ADDR
// if not tmp then
24936: LD_VAR 0 3
24940: NOT
24941: IFFALSE 24945
// exit ;
24943: GO 25031
// un := tmp [ rand ( 1 , tmp ) ] ;
24945: LD_ADDR_VAR 0 2
24949: PUSH
24950: LD_VAR 0 3
24954: PUSH
24955: LD_INT 1
24957: PPUSH
24958: LD_VAR 0 3
24962: PPUSH
24963: CALL_OW 12
24967: ARRAY
24968: ST_TO_ADDR
// if Crawls ( un ) then
24969: LD_VAR 0 2
24973: PPUSH
24974: CALL_OW 318
24978: IFFALSE 24989
// ComWalk ( un ) ;
24980: LD_VAR 0 2
24984: PPUSH
24985: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
24989: LD_VAR 0 2
24993: PPUSH
24994: LD_INT 9
24996: PPUSH
24997: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25001: LD_INT 28
25003: PPUSH
25004: LD_OWVAR 2
25008: PPUSH
25009: LD_INT 2
25011: PPUSH
25012: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25016: LD_INT 29
25018: PPUSH
25019: LD_OWVAR 2
25023: PPUSH
25024: LD_INT 2
25026: PPUSH
25027: CALL_OW 322
// end ;
25031: PPOPN 3
25033: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25034: LD_EXP 60
25038: PUSH
25039: LD_EXP 103
25043: AND
25044: IFFALSE 25155
25046: GO 25048
25048: DISABLE
25049: LD_INT 0
25051: PPUSH
25052: PPUSH
25053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25054: LD_ADDR_VAR 0 3
25058: PUSH
25059: LD_INT 22
25061: PUSH
25062: LD_OWVAR 2
25066: PUSH
25067: EMPTY
25068: LIST
25069: LIST
25070: PUSH
25071: LD_INT 25
25073: PUSH
25074: LD_INT 1
25076: PUSH
25077: EMPTY
25078: LIST
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PPUSH
25085: CALL_OW 69
25089: ST_TO_ADDR
// if not tmp then
25090: LD_VAR 0 3
25094: NOT
25095: IFFALSE 25099
// exit ;
25097: GO 25155
// un := tmp [ rand ( 1 , tmp ) ] ;
25099: LD_ADDR_VAR 0 2
25103: PUSH
25104: LD_VAR 0 3
25108: PUSH
25109: LD_INT 1
25111: PPUSH
25112: LD_VAR 0 3
25116: PPUSH
25117: CALL_OW 12
25121: ARRAY
25122: ST_TO_ADDR
// if Crawls ( un ) then
25123: LD_VAR 0 2
25127: PPUSH
25128: CALL_OW 318
25132: IFFALSE 25143
// ComWalk ( un ) ;
25134: LD_VAR 0 2
25138: PPUSH
25139: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25143: LD_VAR 0 2
25147: PPUSH
25148: LD_INT 8
25150: PPUSH
25151: CALL_OW 336
// end ;
25155: PPOPN 3
25157: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25158: LD_EXP 60
25162: PUSH
25163: LD_EXP 104
25167: AND
25168: IFFALSE 25312
25170: GO 25172
25172: DISABLE
25173: LD_INT 0
25175: PPUSH
25176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25177: LD_ADDR_VAR 0 2
25181: PUSH
25182: LD_INT 22
25184: PUSH
25185: LD_OWVAR 2
25189: PUSH
25190: EMPTY
25191: LIST
25192: LIST
25193: PUSH
25194: LD_INT 21
25196: PUSH
25197: LD_INT 2
25199: PUSH
25200: EMPTY
25201: LIST
25202: LIST
25203: PUSH
25204: LD_INT 2
25206: PUSH
25207: LD_INT 34
25209: PUSH
25210: LD_INT 12
25212: PUSH
25213: EMPTY
25214: LIST
25215: LIST
25216: PUSH
25217: LD_INT 34
25219: PUSH
25220: LD_INT 51
25222: PUSH
25223: EMPTY
25224: LIST
25225: LIST
25226: PUSH
25227: LD_INT 34
25229: PUSH
25230: LD_INT 32
25232: PUSH
25233: EMPTY
25234: LIST
25235: LIST
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: PUSH
25243: EMPTY
25244: LIST
25245: LIST
25246: LIST
25247: PPUSH
25248: CALL_OW 69
25252: ST_TO_ADDR
// if not tmp then
25253: LD_VAR 0 2
25257: NOT
25258: IFFALSE 25262
// exit ;
25260: GO 25312
// for i in tmp do
25262: LD_ADDR_VAR 0 1
25266: PUSH
25267: LD_VAR 0 2
25271: PUSH
25272: FOR_IN
25273: IFFALSE 25310
// if GetCargo ( i , mat_artifact ) = 0 then
25275: LD_VAR 0 1
25279: PPUSH
25280: LD_INT 4
25282: PPUSH
25283: CALL_OW 289
25287: PUSH
25288: LD_INT 0
25290: EQUAL
25291: IFFALSE 25308
// SetCargo ( i , mat_siberit , 100 ) ;
25293: LD_VAR 0 1
25297: PPUSH
25298: LD_INT 3
25300: PPUSH
25301: LD_INT 100
25303: PPUSH
25304: CALL_OW 290
25308: GO 25272
25310: POP
25311: POP
// end ;
25312: PPOPN 2
25314: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25315: LD_EXP 60
25319: PUSH
25320: LD_EXP 105
25324: AND
25325: IFFALSE 25508
25327: GO 25329
25329: DISABLE
25330: LD_INT 0
25332: PPUSH
25333: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25334: LD_ADDR_VAR 0 2
25338: PUSH
25339: LD_INT 22
25341: PUSH
25342: LD_OWVAR 2
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PPUSH
25351: CALL_OW 69
25355: ST_TO_ADDR
// if not tmp then
25356: LD_VAR 0 2
25360: NOT
25361: IFFALSE 25365
// exit ;
25363: GO 25508
// for i := 1 to 2 do
25365: LD_ADDR_VAR 0 1
25369: PUSH
25370: DOUBLE
25371: LD_INT 1
25373: DEC
25374: ST_TO_ADDR
25375: LD_INT 2
25377: PUSH
25378: FOR_TO
25379: IFFALSE 25506
// begin uc_side := your_side ;
25381: LD_ADDR_OWVAR 20
25385: PUSH
25386: LD_OWVAR 2
25390: ST_TO_ADDR
// uc_nation := nation_american ;
25391: LD_ADDR_OWVAR 21
25395: PUSH
25396: LD_INT 1
25398: ST_TO_ADDR
// vc_chassis := us_morphling ;
25399: LD_ADDR_OWVAR 37
25403: PUSH
25404: LD_INT 5
25406: ST_TO_ADDR
// vc_engine := engine_siberite ;
25407: LD_ADDR_OWVAR 39
25411: PUSH
25412: LD_INT 3
25414: ST_TO_ADDR
// vc_control := control_computer ;
25415: LD_ADDR_OWVAR 38
25419: PUSH
25420: LD_INT 3
25422: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25423: LD_ADDR_OWVAR 40
25427: PUSH
25428: LD_INT 10
25430: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25431: LD_VAR 0 2
25435: PUSH
25436: LD_INT 1
25438: ARRAY
25439: PPUSH
25440: CALL_OW 310
25444: NOT
25445: IFFALSE 25492
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25447: CALL_OW 45
25451: PPUSH
25452: LD_VAR 0 2
25456: PUSH
25457: LD_INT 1
25459: ARRAY
25460: PPUSH
25461: CALL_OW 250
25465: PPUSH
25466: LD_VAR 0 2
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: PPUSH
25475: CALL_OW 251
25479: PPUSH
25480: LD_INT 12
25482: PPUSH
25483: LD_INT 1
25485: PPUSH
25486: CALL_OW 50
25490: GO 25504
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25492: CALL_OW 45
25496: PPUSH
25497: LD_INT 1
25499: PPUSH
25500: CALL_OW 51
// end ;
25504: GO 25378
25506: POP
25507: POP
// end ;
25508: PPOPN 2
25510: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25511: LD_EXP 60
25515: PUSH
25516: LD_EXP 106
25520: AND
25521: IFFALSE 25743
25523: GO 25525
25525: DISABLE
25526: LD_INT 0
25528: PPUSH
25529: PPUSH
25530: PPUSH
25531: PPUSH
25532: PPUSH
25533: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25534: LD_ADDR_VAR 0 6
25538: PUSH
25539: LD_INT 22
25541: PUSH
25542: LD_OWVAR 2
25546: PUSH
25547: EMPTY
25548: LIST
25549: LIST
25550: PUSH
25551: LD_INT 21
25553: PUSH
25554: LD_INT 1
25556: PUSH
25557: EMPTY
25558: LIST
25559: LIST
25560: PUSH
25561: LD_INT 3
25563: PUSH
25564: LD_INT 23
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: EMPTY
25575: LIST
25576: LIST
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: LIST
25582: PPUSH
25583: CALL_OW 69
25587: ST_TO_ADDR
// if not tmp then
25588: LD_VAR 0 6
25592: NOT
25593: IFFALSE 25597
// exit ;
25595: GO 25743
// s1 := rand ( 1 , 4 ) ;
25597: LD_ADDR_VAR 0 2
25601: PUSH
25602: LD_INT 1
25604: PPUSH
25605: LD_INT 4
25607: PPUSH
25608: CALL_OW 12
25612: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25613: LD_ADDR_VAR 0 4
25617: PUSH
25618: LD_VAR 0 6
25622: PUSH
25623: LD_INT 1
25625: ARRAY
25626: PPUSH
25627: LD_VAR 0 2
25631: PPUSH
25632: CALL_OW 259
25636: ST_TO_ADDR
// if s1 = 1 then
25637: LD_VAR 0 2
25641: PUSH
25642: LD_INT 1
25644: EQUAL
25645: IFFALSE 25665
// s2 := rand ( 2 , 4 ) else
25647: LD_ADDR_VAR 0 3
25651: PUSH
25652: LD_INT 2
25654: PPUSH
25655: LD_INT 4
25657: PPUSH
25658: CALL_OW 12
25662: ST_TO_ADDR
25663: GO 25673
// s2 := 1 ;
25665: LD_ADDR_VAR 0 3
25669: PUSH
25670: LD_INT 1
25672: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25673: LD_ADDR_VAR 0 5
25677: PUSH
25678: LD_VAR 0 6
25682: PUSH
25683: LD_INT 1
25685: ARRAY
25686: PPUSH
25687: LD_VAR 0 3
25691: PPUSH
25692: CALL_OW 259
25696: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25697: LD_VAR 0 6
25701: PUSH
25702: LD_INT 1
25704: ARRAY
25705: PPUSH
25706: LD_VAR 0 2
25710: PPUSH
25711: LD_VAR 0 5
25715: PPUSH
25716: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25720: LD_VAR 0 6
25724: PUSH
25725: LD_INT 1
25727: ARRAY
25728: PPUSH
25729: LD_VAR 0 3
25733: PPUSH
25734: LD_VAR 0 4
25738: PPUSH
25739: CALL_OW 237
// end ;
25743: PPOPN 6
25745: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25746: LD_EXP 60
25750: PUSH
25751: LD_EXP 107
25755: AND
25756: IFFALSE 25835
25758: GO 25760
25760: DISABLE
25761: LD_INT 0
25763: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25764: LD_ADDR_VAR 0 1
25768: PUSH
25769: LD_INT 22
25771: PUSH
25772: LD_OWVAR 2
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: PUSH
25781: LD_INT 30
25783: PUSH
25784: LD_INT 3
25786: PUSH
25787: EMPTY
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: PPUSH
25795: CALL_OW 69
25799: ST_TO_ADDR
// if not tmp then
25800: LD_VAR 0 1
25804: NOT
25805: IFFALSE 25809
// exit ;
25807: GO 25835
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25809: LD_VAR 0 1
25813: PUSH
25814: LD_INT 1
25816: PPUSH
25817: LD_VAR 0 1
25821: PPUSH
25822: CALL_OW 12
25826: ARRAY
25827: PPUSH
25828: LD_INT 1
25830: PPUSH
25831: CALL_OW 234
// end ;
25835: PPOPN 1
25837: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
25838: LD_EXP 60
25842: PUSH
25843: LD_EXP 108
25847: AND
25848: IFFALSE 25960
25850: GO 25852
25852: DISABLE
25853: LD_INT 0
25855: PPUSH
25856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
25857: LD_ADDR_VAR 0 2
25861: PUSH
25862: LD_INT 22
25864: PUSH
25865: LD_OWVAR 2
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 2
25876: PUSH
25877: LD_INT 30
25879: PUSH
25880: LD_INT 27
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: LD_INT 30
25889: PUSH
25890: LD_INT 26
25892: PUSH
25893: EMPTY
25894: LIST
25895: LIST
25896: PUSH
25897: LD_INT 30
25899: PUSH
25900: LD_INT 28
25902: PUSH
25903: EMPTY
25904: LIST
25905: LIST
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: PPUSH
25917: CALL_OW 69
25921: ST_TO_ADDR
// if not tmp then
25922: LD_VAR 0 2
25926: NOT
25927: IFFALSE 25931
// exit ;
25929: GO 25960
// for i in tmp do
25931: LD_ADDR_VAR 0 1
25935: PUSH
25936: LD_VAR 0 2
25940: PUSH
25941: FOR_IN
25942: IFFALSE 25958
// SetLives ( i , 1 ) ;
25944: LD_VAR 0 1
25948: PPUSH
25949: LD_INT 1
25951: PPUSH
25952: CALL_OW 234
25956: GO 25941
25958: POP
25959: POP
// end ;
25960: PPOPN 2
25962: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
25963: LD_EXP 60
25967: PUSH
25968: LD_EXP 109
25972: AND
25973: IFFALSE 26260
25975: GO 25977
25977: DISABLE
25978: LD_INT 0
25980: PPUSH
25981: PPUSH
25982: PPUSH
// begin i := rand ( 1 , 7 ) ;
25983: LD_ADDR_VAR 0 1
25987: PUSH
25988: LD_INT 1
25990: PPUSH
25991: LD_INT 7
25993: PPUSH
25994: CALL_OW 12
25998: ST_TO_ADDR
// case i of 1 :
25999: LD_VAR 0 1
26003: PUSH
26004: LD_INT 1
26006: DOUBLE
26007: EQUAL
26008: IFTRUE 26012
26010: GO 26022
26012: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26013: LD_STRING earthquake(getX(game), 0, 32)
26015: PPUSH
26016: CALL_OW 559
26020: GO 26260
26022: LD_INT 2
26024: DOUBLE
26025: EQUAL
26026: IFTRUE 26030
26028: GO 26044
26030: POP
// begin ToLua ( displayStucuk(); ) ;
26031: LD_STRING displayStucuk();
26033: PPUSH
26034: CALL_OW 559
// ResetFog ;
26038: CALL_OW 335
// end ; 3 :
26042: GO 26260
26044: LD_INT 3
26046: DOUBLE
26047: EQUAL
26048: IFTRUE 26052
26050: GO 26156
26052: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26053: LD_ADDR_VAR 0 2
26057: PUSH
26058: LD_INT 22
26060: PUSH
26061: LD_OWVAR 2
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 25
26072: PUSH
26073: LD_INT 1
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PUSH
26080: EMPTY
26081: LIST
26082: LIST
26083: PPUSH
26084: CALL_OW 69
26088: ST_TO_ADDR
// if not tmp then
26089: LD_VAR 0 2
26093: NOT
26094: IFFALSE 26098
// exit ;
26096: GO 26260
// un := tmp [ rand ( 1 , tmp ) ] ;
26098: LD_ADDR_VAR 0 3
26102: PUSH
26103: LD_VAR 0 2
26107: PUSH
26108: LD_INT 1
26110: PPUSH
26111: LD_VAR 0 2
26115: PPUSH
26116: CALL_OW 12
26120: ARRAY
26121: ST_TO_ADDR
// if Crawls ( un ) then
26122: LD_VAR 0 3
26126: PPUSH
26127: CALL_OW 318
26131: IFFALSE 26142
// ComWalk ( un ) ;
26133: LD_VAR 0 3
26137: PPUSH
26138: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26142: LD_VAR 0 3
26146: PPUSH
26147: LD_INT 8
26149: PPUSH
26150: CALL_OW 336
// end ; 4 :
26154: GO 26260
26156: LD_INT 4
26158: DOUBLE
26159: EQUAL
26160: IFTRUE 26164
26162: GO 26238
26164: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26165: LD_ADDR_VAR 0 2
26169: PUSH
26170: LD_INT 22
26172: PUSH
26173: LD_OWVAR 2
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 30
26184: PUSH
26185: LD_INT 29
26187: PUSH
26188: EMPTY
26189: LIST
26190: LIST
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PPUSH
26196: CALL_OW 69
26200: ST_TO_ADDR
// if not tmp then
26201: LD_VAR 0 2
26205: NOT
26206: IFFALSE 26210
// exit ;
26208: GO 26260
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26210: LD_VAR 0 2
26214: PUSH
26215: LD_INT 1
26217: ARRAY
26218: PPUSH
26219: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26223: LD_VAR 0 2
26227: PUSH
26228: LD_INT 1
26230: ARRAY
26231: PPUSH
26232: CALL_OW 65
// end ; 5 .. 7 :
26236: GO 26260
26238: LD_INT 5
26240: DOUBLE
26241: GREATEREQUAL
26242: IFFALSE 26250
26244: LD_INT 7
26246: DOUBLE
26247: LESSEQUAL
26248: IFTRUE 26252
26250: GO 26259
26252: POP
// StreamSibBomb ; end ;
26253: CALL 22497 0 0
26257: GO 26260
26259: POP
// end ;
26260: PPOPN 3
26262: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26263: LD_EXP 60
26267: PUSH
26268: LD_EXP 110
26272: AND
26273: IFFALSE 26429
26275: GO 26277
26277: DISABLE
26278: LD_INT 0
26280: PPUSH
26281: PPUSH
26282: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26283: LD_ADDR_VAR 0 2
26287: PUSH
26288: LD_INT 81
26290: PUSH
26291: LD_OWVAR 2
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: PUSH
26303: LD_INT 21
26305: PUSH
26306: LD_INT 1
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: PUSH
26313: LD_INT 21
26315: PUSH
26316: LD_INT 2
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: EMPTY
26324: LIST
26325: LIST
26326: LIST
26327: PUSH
26328: EMPTY
26329: LIST
26330: LIST
26331: PPUSH
26332: CALL_OW 69
26336: ST_TO_ADDR
// if not tmp then
26337: LD_VAR 0 2
26341: NOT
26342: IFFALSE 26346
// exit ;
26344: GO 26429
// p := 0 ;
26346: LD_ADDR_VAR 0 3
26350: PUSH
26351: LD_INT 0
26353: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26354: LD_INT 35
26356: PPUSH
26357: CALL_OW 67
// p := p + 1 ;
26361: LD_ADDR_VAR 0 3
26365: PUSH
26366: LD_VAR 0 3
26370: PUSH
26371: LD_INT 1
26373: PLUS
26374: ST_TO_ADDR
// for i in tmp do
26375: LD_ADDR_VAR 0 1
26379: PUSH
26380: LD_VAR 0 2
26384: PUSH
26385: FOR_IN
26386: IFFALSE 26417
// if GetLives ( i ) < 1000 then
26388: LD_VAR 0 1
26392: PPUSH
26393: CALL_OW 256
26397: PUSH
26398: LD_INT 1000
26400: LESS
26401: IFFALSE 26415
// SetLives ( i , 1000 ) ;
26403: LD_VAR 0 1
26407: PPUSH
26408: LD_INT 1000
26410: PPUSH
26411: CALL_OW 234
26415: GO 26385
26417: POP
26418: POP
// until p > 20 ;
26419: LD_VAR 0 3
26423: PUSH
26424: LD_INT 20
26426: GREATER
26427: IFFALSE 26354
// end ;
26429: PPOPN 3
26431: END
// every 0 0$1 trigger StreamModeActive and sTime do
26432: LD_EXP 60
26436: PUSH
26437: LD_EXP 111
26441: AND
26442: IFFALSE 26477
26444: GO 26446
26446: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26447: LD_INT 28
26449: PPUSH
26450: LD_OWVAR 2
26454: PPUSH
26455: LD_INT 2
26457: PPUSH
26458: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26462: LD_INT 30
26464: PPUSH
26465: LD_OWVAR 2
26469: PPUSH
26470: LD_INT 2
26472: PPUSH
26473: CALL_OW 322
// end ;
26477: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26478: LD_EXP 60
26482: PUSH
26483: LD_EXP 112
26487: AND
26488: IFFALSE 26609
26490: GO 26492
26492: DISABLE
26493: LD_INT 0
26495: PPUSH
26496: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26497: LD_ADDR_VAR 0 2
26501: PUSH
26502: LD_INT 22
26504: PUSH
26505: LD_OWVAR 2
26509: PUSH
26510: EMPTY
26511: LIST
26512: LIST
26513: PUSH
26514: LD_INT 21
26516: PUSH
26517: LD_INT 1
26519: PUSH
26520: EMPTY
26521: LIST
26522: LIST
26523: PUSH
26524: LD_INT 3
26526: PUSH
26527: LD_INT 23
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: EMPTY
26542: LIST
26543: LIST
26544: LIST
26545: PPUSH
26546: CALL_OW 69
26550: ST_TO_ADDR
// if not tmp then
26551: LD_VAR 0 2
26555: NOT
26556: IFFALSE 26560
// exit ;
26558: GO 26609
// for i in tmp do
26560: LD_ADDR_VAR 0 1
26564: PUSH
26565: LD_VAR 0 2
26569: PUSH
26570: FOR_IN
26571: IFFALSE 26607
// begin if Crawls ( i ) then
26573: LD_VAR 0 1
26577: PPUSH
26578: CALL_OW 318
26582: IFFALSE 26593
// ComWalk ( i ) ;
26584: LD_VAR 0 1
26588: PPUSH
26589: CALL_OW 138
// SetClass ( i , 2 ) ;
26593: LD_VAR 0 1
26597: PPUSH
26598: LD_INT 2
26600: PPUSH
26601: CALL_OW 336
// end ;
26605: GO 26570
26607: POP
26608: POP
// end ;
26609: PPOPN 2
26611: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26612: LD_EXP 60
26616: PUSH
26617: LD_EXP 113
26621: AND
26622: IFFALSE 26910
26624: GO 26626
26626: DISABLE
26627: LD_INT 0
26629: PPUSH
26630: PPUSH
26631: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26632: LD_OWVAR 2
26636: PPUSH
26637: LD_INT 9
26639: PPUSH
26640: LD_INT 1
26642: PPUSH
26643: LD_INT 1
26645: PPUSH
26646: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26650: LD_INT 9
26652: PPUSH
26653: LD_OWVAR 2
26657: PPUSH
26658: CALL_OW 343
// uc_side := 9 ;
26662: LD_ADDR_OWVAR 20
26666: PUSH
26667: LD_INT 9
26669: ST_TO_ADDR
// uc_nation := 2 ;
26670: LD_ADDR_OWVAR 21
26674: PUSH
26675: LD_INT 2
26677: ST_TO_ADDR
// hc_name := Dark Warrior ;
26678: LD_ADDR_OWVAR 26
26682: PUSH
26683: LD_STRING Dark Warrior
26685: ST_TO_ADDR
// hc_gallery :=  ;
26686: LD_ADDR_OWVAR 33
26690: PUSH
26691: LD_STRING 
26693: ST_TO_ADDR
// hc_noskilllimit := true ;
26694: LD_ADDR_OWVAR 76
26698: PUSH
26699: LD_INT 1
26701: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26702: LD_ADDR_OWVAR 31
26706: PUSH
26707: LD_INT 30
26709: PUSH
26710: LD_INT 30
26712: PUSH
26713: LD_INT 30
26715: PUSH
26716: LD_INT 30
26718: PUSH
26719: EMPTY
26720: LIST
26721: LIST
26722: LIST
26723: LIST
26724: ST_TO_ADDR
// un := CreateHuman ;
26725: LD_ADDR_VAR 0 3
26729: PUSH
26730: CALL_OW 44
26734: ST_TO_ADDR
// hc_noskilllimit := false ;
26735: LD_ADDR_OWVAR 76
26739: PUSH
26740: LD_INT 0
26742: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26743: LD_VAR 0 3
26747: PPUSH
26748: LD_INT 1
26750: PPUSH
26751: CALL_OW 51
// ToLua ( playRanger() ) ;
26755: LD_STRING playRanger()
26757: PPUSH
26758: CALL_OW 559
// p := 0 ;
26762: LD_ADDR_VAR 0 2
26766: PUSH
26767: LD_INT 0
26769: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26770: LD_INT 35
26772: PPUSH
26773: CALL_OW 67
// p := p + 1 ;
26777: LD_ADDR_VAR 0 2
26781: PUSH
26782: LD_VAR 0 2
26786: PUSH
26787: LD_INT 1
26789: PLUS
26790: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26791: LD_VAR 0 3
26795: PPUSH
26796: CALL_OW 256
26800: PUSH
26801: LD_INT 1000
26803: LESS
26804: IFFALSE 26818
// SetLives ( un , 1000 ) ;
26806: LD_VAR 0 3
26810: PPUSH
26811: LD_INT 1000
26813: PPUSH
26814: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26818: LD_VAR 0 3
26822: PPUSH
26823: LD_INT 81
26825: PUSH
26826: LD_OWVAR 2
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 91
26837: PUSH
26838: LD_VAR 0 3
26842: PUSH
26843: LD_INT 30
26845: PUSH
26846: EMPTY
26847: LIST
26848: LIST
26849: LIST
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: PPUSH
26855: CALL_OW 69
26859: PPUSH
26860: LD_VAR 0 3
26864: PPUSH
26865: CALL_OW 74
26869: PPUSH
26870: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
26874: LD_VAR 0 2
26878: PUSH
26879: LD_INT 80
26881: GREATER
26882: PUSH
26883: LD_VAR 0 3
26887: PPUSH
26888: CALL_OW 301
26892: OR
26893: IFFALSE 26770
// if un then
26895: LD_VAR 0 3
26899: IFFALSE 26910
// RemoveUnit ( un ) ;
26901: LD_VAR 0 3
26905: PPUSH
26906: CALL_OW 64
// end ;
26910: PPOPN 3
26912: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
26913: LD_EXP 114
26917: IFFALSE 27033
26919: GO 26921
26921: DISABLE
26922: LD_INT 0
26924: PPUSH
26925: PPUSH
26926: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
26927: LD_ADDR_VAR 0 2
26931: PUSH
26932: LD_INT 81
26934: PUSH
26935: LD_OWVAR 2
26939: PUSH
26940: EMPTY
26941: LIST
26942: LIST
26943: PUSH
26944: LD_INT 21
26946: PUSH
26947: LD_INT 1
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: PPUSH
26958: CALL_OW 69
26962: ST_TO_ADDR
// ToLua ( playComputer() ) ;
26963: LD_STRING playComputer()
26965: PPUSH
26966: CALL_OW 559
// if not tmp then
26970: LD_VAR 0 2
26974: NOT
26975: IFFALSE 26979
// exit ;
26977: GO 27033
// for i in tmp do
26979: LD_ADDR_VAR 0 1
26983: PUSH
26984: LD_VAR 0 2
26988: PUSH
26989: FOR_IN
26990: IFFALSE 27031
// for j := 1 to 4 do
26992: LD_ADDR_VAR 0 3
26996: PUSH
26997: DOUBLE
26998: LD_INT 1
27000: DEC
27001: ST_TO_ADDR
27002: LD_INT 4
27004: PUSH
27005: FOR_TO
27006: IFFALSE 27027
// SetSkill ( i , j , 10 ) ;
27008: LD_VAR 0 1
27012: PPUSH
27013: LD_VAR 0 3
27017: PPUSH
27018: LD_INT 10
27020: PPUSH
27021: CALL_OW 237
27025: GO 27005
27027: POP
27028: POP
27029: GO 26989
27031: POP
27032: POP
// end ;
27033: PPOPN 3
27035: END
// every 0 0$1 trigger s30 do var i , tmp ;
27036: LD_EXP 115
27040: IFFALSE 27109
27042: GO 27044
27044: DISABLE
27045: LD_INT 0
27047: PPUSH
27048: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27049: LD_ADDR_VAR 0 2
27053: PUSH
27054: LD_INT 22
27056: PUSH
27057: LD_OWVAR 2
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PPUSH
27066: CALL_OW 69
27070: ST_TO_ADDR
// if not tmp then
27071: LD_VAR 0 2
27075: NOT
27076: IFFALSE 27080
// exit ;
27078: GO 27109
// for i in tmp do
27080: LD_ADDR_VAR 0 1
27084: PUSH
27085: LD_VAR 0 2
27089: PUSH
27090: FOR_IN
27091: IFFALSE 27107
// SetLives ( i , 300 ) ;
27093: LD_VAR 0 1
27097: PPUSH
27098: LD_INT 300
27100: PPUSH
27101: CALL_OW 234
27105: GO 27090
27107: POP
27108: POP
// end ;
27109: PPOPN 2
27111: END
// every 0 0$1 trigger s60 do var i , tmp ;
27112: LD_EXP 116
27116: IFFALSE 27185
27118: GO 27120
27120: DISABLE
27121: LD_INT 0
27123: PPUSH
27124: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27125: LD_ADDR_VAR 0 2
27129: PUSH
27130: LD_INT 22
27132: PUSH
27133: LD_OWVAR 2
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: PPUSH
27142: CALL_OW 69
27146: ST_TO_ADDR
// if not tmp then
27147: LD_VAR 0 2
27151: NOT
27152: IFFALSE 27156
// exit ;
27154: GO 27185
// for i in tmp do
27156: LD_ADDR_VAR 0 1
27160: PUSH
27161: LD_VAR 0 2
27165: PUSH
27166: FOR_IN
27167: IFFALSE 27183
// SetLives ( i , 600 ) ;
27169: LD_VAR 0 1
27173: PPUSH
27174: LD_INT 600
27176: PPUSH
27177: CALL_OW 234
27181: GO 27166
27183: POP
27184: POP
// end ;
27185: PPOPN 2
27187: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27188: LD_INT 0
27190: PPUSH
// case cmd of 301 :
27191: LD_VAR 0 1
27195: PUSH
27196: LD_INT 301
27198: DOUBLE
27199: EQUAL
27200: IFTRUE 27204
27202: GO 27236
27204: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27205: LD_VAR 0 6
27209: PPUSH
27210: LD_VAR 0 7
27214: PPUSH
27215: LD_VAR 0 8
27219: PPUSH
27220: LD_VAR 0 4
27224: PPUSH
27225: LD_VAR 0 5
27229: PPUSH
27230: CALL 28437 0 5
27234: GO 27357
27236: LD_INT 302
27238: DOUBLE
27239: EQUAL
27240: IFTRUE 27244
27242: GO 27281
27244: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27245: LD_VAR 0 6
27249: PPUSH
27250: LD_VAR 0 7
27254: PPUSH
27255: LD_VAR 0 8
27259: PPUSH
27260: LD_VAR 0 9
27264: PPUSH
27265: LD_VAR 0 4
27269: PPUSH
27270: LD_VAR 0 5
27274: PPUSH
27275: CALL 28528 0 6
27279: GO 27357
27281: LD_INT 303
27283: DOUBLE
27284: EQUAL
27285: IFTRUE 27289
27287: GO 27326
27289: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27290: LD_VAR 0 6
27294: PPUSH
27295: LD_VAR 0 7
27299: PPUSH
27300: LD_VAR 0 8
27304: PPUSH
27305: LD_VAR 0 9
27309: PPUSH
27310: LD_VAR 0 4
27314: PPUSH
27315: LD_VAR 0 5
27319: PPUSH
27320: CALL 27362 0 6
27324: GO 27357
27326: LD_INT 304
27328: DOUBLE
27329: EQUAL
27330: IFTRUE 27334
27332: GO 27356
27334: POP
// hHackTeleport ( unit , x , y ) ; end ;
27335: LD_VAR 0 2
27339: PPUSH
27340: LD_VAR 0 4
27344: PPUSH
27345: LD_VAR 0 5
27349: PPUSH
27350: CALL 29121 0 3
27354: GO 27357
27356: POP
// end ;
27357: LD_VAR 0 12
27361: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27362: LD_INT 0
27364: PPUSH
27365: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27366: LD_VAR 0 1
27370: PUSH
27371: LD_INT 1
27373: LESS
27374: PUSH
27375: LD_VAR 0 1
27379: PUSH
27380: LD_INT 3
27382: GREATER
27383: OR
27384: PUSH
27385: LD_VAR 0 5
27389: PPUSH
27390: LD_VAR 0 6
27394: PPUSH
27395: CALL_OW 428
27399: OR
27400: IFFALSE 27404
// exit ;
27402: GO 28124
// uc_side := your_side ;
27404: LD_ADDR_OWVAR 20
27408: PUSH
27409: LD_OWVAR 2
27413: ST_TO_ADDR
// uc_nation := nation ;
27414: LD_ADDR_OWVAR 21
27418: PUSH
27419: LD_VAR 0 1
27423: ST_TO_ADDR
// bc_level = 1 ;
27424: LD_ADDR_OWVAR 43
27428: PUSH
27429: LD_INT 1
27431: ST_TO_ADDR
// case btype of 1 :
27432: LD_VAR 0 2
27436: PUSH
27437: LD_INT 1
27439: DOUBLE
27440: EQUAL
27441: IFTRUE 27445
27443: GO 27456
27445: POP
// bc_type := b_depot ; 2 :
27446: LD_ADDR_OWVAR 42
27450: PUSH
27451: LD_INT 0
27453: ST_TO_ADDR
27454: GO 28068
27456: LD_INT 2
27458: DOUBLE
27459: EQUAL
27460: IFTRUE 27464
27462: GO 27475
27464: POP
// bc_type := b_warehouse ; 3 :
27465: LD_ADDR_OWVAR 42
27469: PUSH
27470: LD_INT 1
27472: ST_TO_ADDR
27473: GO 28068
27475: LD_INT 3
27477: DOUBLE
27478: EQUAL
27479: IFTRUE 27483
27481: GO 27494
27483: POP
// bc_type := b_lab ; 4 .. 9 :
27484: LD_ADDR_OWVAR 42
27488: PUSH
27489: LD_INT 6
27491: ST_TO_ADDR
27492: GO 28068
27494: LD_INT 4
27496: DOUBLE
27497: GREATEREQUAL
27498: IFFALSE 27506
27500: LD_INT 9
27502: DOUBLE
27503: LESSEQUAL
27504: IFTRUE 27508
27506: GO 27560
27508: POP
// begin bc_type := b_lab_half ;
27509: LD_ADDR_OWVAR 42
27513: PUSH
27514: LD_INT 7
27516: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27517: LD_ADDR_OWVAR 44
27521: PUSH
27522: LD_INT 10
27524: PUSH
27525: LD_INT 11
27527: PUSH
27528: LD_INT 12
27530: PUSH
27531: LD_INT 15
27533: PUSH
27534: LD_INT 14
27536: PUSH
27537: LD_INT 13
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: LIST
27544: LIST
27545: LIST
27546: LIST
27547: PUSH
27548: LD_VAR 0 2
27552: PUSH
27553: LD_INT 3
27555: MINUS
27556: ARRAY
27557: ST_TO_ADDR
// end ; 10 .. 13 :
27558: GO 28068
27560: LD_INT 10
27562: DOUBLE
27563: GREATEREQUAL
27564: IFFALSE 27572
27566: LD_INT 13
27568: DOUBLE
27569: LESSEQUAL
27570: IFTRUE 27574
27572: GO 27651
27574: POP
// begin bc_type := b_lab_full ;
27575: LD_ADDR_OWVAR 42
27579: PUSH
27580: LD_INT 8
27582: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27583: LD_ADDR_OWVAR 44
27587: PUSH
27588: LD_INT 10
27590: PUSH
27591: LD_INT 12
27593: PUSH
27594: LD_INT 14
27596: PUSH
27597: LD_INT 13
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: LIST
27604: LIST
27605: PUSH
27606: LD_VAR 0 2
27610: PUSH
27611: LD_INT 9
27613: MINUS
27614: ARRAY
27615: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27616: LD_ADDR_OWVAR 45
27620: PUSH
27621: LD_INT 11
27623: PUSH
27624: LD_INT 15
27626: PUSH
27627: LD_INT 12
27629: PUSH
27630: LD_INT 15
27632: PUSH
27633: EMPTY
27634: LIST
27635: LIST
27636: LIST
27637: LIST
27638: PUSH
27639: LD_VAR 0 2
27643: PUSH
27644: LD_INT 9
27646: MINUS
27647: ARRAY
27648: ST_TO_ADDR
// end ; 14 :
27649: GO 28068
27651: LD_INT 14
27653: DOUBLE
27654: EQUAL
27655: IFTRUE 27659
27657: GO 27670
27659: POP
// bc_type := b_workshop ; 15 :
27660: LD_ADDR_OWVAR 42
27664: PUSH
27665: LD_INT 2
27667: ST_TO_ADDR
27668: GO 28068
27670: LD_INT 15
27672: DOUBLE
27673: EQUAL
27674: IFTRUE 27678
27676: GO 27689
27678: POP
// bc_type := b_factory ; 16 :
27679: LD_ADDR_OWVAR 42
27683: PUSH
27684: LD_INT 3
27686: ST_TO_ADDR
27687: GO 28068
27689: LD_INT 16
27691: DOUBLE
27692: EQUAL
27693: IFTRUE 27697
27695: GO 27708
27697: POP
// bc_type := b_ext_gun ; 17 :
27698: LD_ADDR_OWVAR 42
27702: PUSH
27703: LD_INT 17
27705: ST_TO_ADDR
27706: GO 28068
27708: LD_INT 17
27710: DOUBLE
27711: EQUAL
27712: IFTRUE 27716
27714: GO 27744
27716: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27717: LD_ADDR_OWVAR 42
27721: PUSH
27722: LD_INT 19
27724: PUSH
27725: LD_INT 23
27727: PUSH
27728: LD_INT 19
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: PUSH
27736: LD_VAR 0 1
27740: ARRAY
27741: ST_TO_ADDR
27742: GO 28068
27744: LD_INT 18
27746: DOUBLE
27747: EQUAL
27748: IFTRUE 27752
27750: GO 27763
27752: POP
// bc_type := b_ext_radar ; 19 :
27753: LD_ADDR_OWVAR 42
27757: PUSH
27758: LD_INT 20
27760: ST_TO_ADDR
27761: GO 28068
27763: LD_INT 19
27765: DOUBLE
27766: EQUAL
27767: IFTRUE 27771
27769: GO 27782
27771: POP
// bc_type := b_ext_radio ; 20 :
27772: LD_ADDR_OWVAR 42
27776: PUSH
27777: LD_INT 22
27779: ST_TO_ADDR
27780: GO 28068
27782: LD_INT 20
27784: DOUBLE
27785: EQUAL
27786: IFTRUE 27790
27788: GO 27801
27790: POP
// bc_type := b_ext_siberium ; 21 :
27791: LD_ADDR_OWVAR 42
27795: PUSH
27796: LD_INT 21
27798: ST_TO_ADDR
27799: GO 28068
27801: LD_INT 21
27803: DOUBLE
27804: EQUAL
27805: IFTRUE 27809
27807: GO 27820
27809: POP
// bc_type := b_ext_computer ; 22 :
27810: LD_ADDR_OWVAR 42
27814: PUSH
27815: LD_INT 24
27817: ST_TO_ADDR
27818: GO 28068
27820: LD_INT 22
27822: DOUBLE
27823: EQUAL
27824: IFTRUE 27828
27826: GO 27839
27828: POP
// bc_type := b_ext_track ; 23 :
27829: LD_ADDR_OWVAR 42
27833: PUSH
27834: LD_INT 16
27836: ST_TO_ADDR
27837: GO 28068
27839: LD_INT 23
27841: DOUBLE
27842: EQUAL
27843: IFTRUE 27847
27845: GO 27858
27847: POP
// bc_type := b_ext_laser ; 24 :
27848: LD_ADDR_OWVAR 42
27852: PUSH
27853: LD_INT 25
27855: ST_TO_ADDR
27856: GO 28068
27858: LD_INT 24
27860: DOUBLE
27861: EQUAL
27862: IFTRUE 27866
27864: GO 27877
27866: POP
// bc_type := b_control_tower ; 25 :
27867: LD_ADDR_OWVAR 42
27871: PUSH
27872: LD_INT 36
27874: ST_TO_ADDR
27875: GO 28068
27877: LD_INT 25
27879: DOUBLE
27880: EQUAL
27881: IFTRUE 27885
27883: GO 27896
27885: POP
// bc_type := b_breastwork ; 26 :
27886: LD_ADDR_OWVAR 42
27890: PUSH
27891: LD_INT 31
27893: ST_TO_ADDR
27894: GO 28068
27896: LD_INT 26
27898: DOUBLE
27899: EQUAL
27900: IFTRUE 27904
27902: GO 27915
27904: POP
// bc_type := b_bunker ; 27 :
27905: LD_ADDR_OWVAR 42
27909: PUSH
27910: LD_INT 32
27912: ST_TO_ADDR
27913: GO 28068
27915: LD_INT 27
27917: DOUBLE
27918: EQUAL
27919: IFTRUE 27923
27921: GO 27934
27923: POP
// bc_type := b_turret ; 28 :
27924: LD_ADDR_OWVAR 42
27928: PUSH
27929: LD_INT 33
27931: ST_TO_ADDR
27932: GO 28068
27934: LD_INT 28
27936: DOUBLE
27937: EQUAL
27938: IFTRUE 27942
27940: GO 27953
27942: POP
// bc_type := b_armoury ; 29 :
27943: LD_ADDR_OWVAR 42
27947: PUSH
27948: LD_INT 4
27950: ST_TO_ADDR
27951: GO 28068
27953: LD_INT 29
27955: DOUBLE
27956: EQUAL
27957: IFTRUE 27961
27959: GO 27972
27961: POP
// bc_type := b_barracks ; 30 :
27962: LD_ADDR_OWVAR 42
27966: PUSH
27967: LD_INT 5
27969: ST_TO_ADDR
27970: GO 28068
27972: LD_INT 30
27974: DOUBLE
27975: EQUAL
27976: IFTRUE 27980
27978: GO 27991
27980: POP
// bc_type := b_solar_power ; 31 :
27981: LD_ADDR_OWVAR 42
27985: PUSH
27986: LD_INT 27
27988: ST_TO_ADDR
27989: GO 28068
27991: LD_INT 31
27993: DOUBLE
27994: EQUAL
27995: IFTRUE 27999
27997: GO 28010
27999: POP
// bc_type := b_oil_power ; 32 :
28000: LD_ADDR_OWVAR 42
28004: PUSH
28005: LD_INT 26
28007: ST_TO_ADDR
28008: GO 28068
28010: LD_INT 32
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28018
28016: GO 28029
28018: POP
// bc_type := b_siberite_power ; 33 :
28019: LD_ADDR_OWVAR 42
28023: PUSH
28024: LD_INT 28
28026: ST_TO_ADDR
28027: GO 28068
28029: LD_INT 33
28031: DOUBLE
28032: EQUAL
28033: IFTRUE 28037
28035: GO 28048
28037: POP
// bc_type := b_oil_mine ; 34 :
28038: LD_ADDR_OWVAR 42
28042: PUSH
28043: LD_INT 29
28045: ST_TO_ADDR
28046: GO 28068
28048: LD_INT 34
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28067
28056: POP
// bc_type := b_siberite_mine ; end ;
28057: LD_ADDR_OWVAR 42
28061: PUSH
28062: LD_INT 30
28064: ST_TO_ADDR
28065: GO 28068
28067: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28068: LD_ADDR_VAR 0 8
28072: PUSH
28073: LD_VAR 0 5
28077: PPUSH
28078: LD_VAR 0 6
28082: PPUSH
28083: LD_VAR 0 3
28087: PPUSH
28088: CALL_OW 47
28092: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28093: LD_OWVAR 42
28097: PUSH
28098: LD_INT 32
28100: PUSH
28101: LD_INT 33
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: IN
28108: IFFALSE 28124
// PlaceWeaponTurret ( b , weapon ) ;
28110: LD_VAR 0 8
28114: PPUSH
28115: LD_VAR 0 4
28119: PPUSH
28120: CALL_OW 431
// end ;
28124: LD_VAR 0 7
28128: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28129: LD_INT 0
28131: PPUSH
28132: PPUSH
28133: PPUSH
28134: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28135: LD_ADDR_VAR 0 4
28139: PUSH
28140: LD_INT 22
28142: PUSH
28143: LD_OWVAR 2
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 2
28154: PUSH
28155: LD_INT 30
28157: PUSH
28158: LD_INT 0
28160: PUSH
28161: EMPTY
28162: LIST
28163: LIST
28164: PUSH
28165: LD_INT 30
28167: PUSH
28168: LD_INT 1
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: EMPTY
28176: LIST
28177: LIST
28178: LIST
28179: PUSH
28180: EMPTY
28181: LIST
28182: LIST
28183: PPUSH
28184: CALL_OW 69
28188: ST_TO_ADDR
// if not tmp then
28189: LD_VAR 0 4
28193: NOT
28194: IFFALSE 28198
// exit ;
28196: GO 28257
// for i in tmp do
28198: LD_ADDR_VAR 0 2
28202: PUSH
28203: LD_VAR 0 4
28207: PUSH
28208: FOR_IN
28209: IFFALSE 28255
// for j = 1 to 3 do
28211: LD_ADDR_VAR 0 3
28215: PUSH
28216: DOUBLE
28217: LD_INT 1
28219: DEC
28220: ST_TO_ADDR
28221: LD_INT 3
28223: PUSH
28224: FOR_TO
28225: IFFALSE 28251
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28227: LD_VAR 0 2
28231: PPUSH
28232: CALL_OW 274
28236: PPUSH
28237: LD_VAR 0 3
28241: PPUSH
28242: LD_INT 99999
28244: PPUSH
28245: CALL_OW 277
28249: GO 28224
28251: POP
28252: POP
28253: GO 28208
28255: POP
28256: POP
// end ;
28257: LD_VAR 0 1
28261: RET
// export function hHackSetLevel10 ; var i , j ; begin
28262: LD_INT 0
28264: PPUSH
28265: PPUSH
28266: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28267: LD_ADDR_VAR 0 2
28271: PUSH
28272: LD_INT 21
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: EMPTY
28279: LIST
28280: LIST
28281: PPUSH
28282: CALL_OW 69
28286: PUSH
28287: FOR_IN
28288: IFFALSE 28340
// if IsSelected ( i ) then
28290: LD_VAR 0 2
28294: PPUSH
28295: CALL_OW 306
28299: IFFALSE 28338
// begin for j := 1 to 4 do
28301: LD_ADDR_VAR 0 3
28305: PUSH
28306: DOUBLE
28307: LD_INT 1
28309: DEC
28310: ST_TO_ADDR
28311: LD_INT 4
28313: PUSH
28314: FOR_TO
28315: IFFALSE 28336
// SetSkill ( i , j , 10 ) ;
28317: LD_VAR 0 2
28321: PPUSH
28322: LD_VAR 0 3
28326: PPUSH
28327: LD_INT 10
28329: PPUSH
28330: CALL_OW 237
28334: GO 28314
28336: POP
28337: POP
// end ;
28338: GO 28287
28340: POP
28341: POP
// end ;
28342: LD_VAR 0 1
28346: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28347: LD_INT 0
28349: PPUSH
28350: PPUSH
28351: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28352: LD_ADDR_VAR 0 2
28356: PUSH
28357: LD_INT 22
28359: PUSH
28360: LD_OWVAR 2
28364: PUSH
28365: EMPTY
28366: LIST
28367: LIST
28368: PUSH
28369: LD_INT 21
28371: PUSH
28372: LD_INT 1
28374: PUSH
28375: EMPTY
28376: LIST
28377: LIST
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PPUSH
28383: CALL_OW 69
28387: PUSH
28388: FOR_IN
28389: IFFALSE 28430
// begin for j := 1 to 4 do
28391: LD_ADDR_VAR 0 3
28395: PUSH
28396: DOUBLE
28397: LD_INT 1
28399: DEC
28400: ST_TO_ADDR
28401: LD_INT 4
28403: PUSH
28404: FOR_TO
28405: IFFALSE 28426
// SetSkill ( i , j , 10 ) ;
28407: LD_VAR 0 2
28411: PPUSH
28412: LD_VAR 0 3
28416: PPUSH
28417: LD_INT 10
28419: PPUSH
28420: CALL_OW 237
28424: GO 28404
28426: POP
28427: POP
// end ;
28428: GO 28388
28430: POP
28431: POP
// end ;
28432: LD_VAR 0 1
28436: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28437: LD_INT 0
28439: PPUSH
// uc_side := your_side ;
28440: LD_ADDR_OWVAR 20
28444: PUSH
28445: LD_OWVAR 2
28449: ST_TO_ADDR
// uc_nation := nation ;
28450: LD_ADDR_OWVAR 21
28454: PUSH
28455: LD_VAR 0 1
28459: ST_TO_ADDR
// InitHc ;
28460: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28464: LD_INT 0
28466: PPUSH
28467: LD_VAR 0 2
28471: PPUSH
28472: LD_VAR 0 3
28476: PPUSH
28477: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28481: LD_VAR 0 4
28485: PPUSH
28486: LD_VAR 0 5
28490: PPUSH
28491: CALL_OW 428
28495: PUSH
28496: LD_INT 0
28498: EQUAL
28499: IFFALSE 28523
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28501: CALL_OW 44
28505: PPUSH
28506: LD_VAR 0 4
28510: PPUSH
28511: LD_VAR 0 5
28515: PPUSH
28516: LD_INT 1
28518: PPUSH
28519: CALL_OW 48
// end ;
28523: LD_VAR 0 6
28527: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
// uc_side := your_side ;
28532: LD_ADDR_OWVAR 20
28536: PUSH
28537: LD_OWVAR 2
28541: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28542: LD_VAR 0 1
28546: PUSH
28547: LD_INT 1
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: LD_INT 3
28555: PUSH
28556: LD_INT 4
28558: PUSH
28559: LD_INT 5
28561: PUSH
28562: EMPTY
28563: LIST
28564: LIST
28565: LIST
28566: LIST
28567: LIST
28568: IN
28569: IFFALSE 28581
// uc_nation := nation_american else
28571: LD_ADDR_OWVAR 21
28575: PUSH
28576: LD_INT 1
28578: ST_TO_ADDR
28579: GO 28624
// if chassis in [ 11 , 12 , 13 , 14 ] then
28581: LD_VAR 0 1
28585: PUSH
28586: LD_INT 11
28588: PUSH
28589: LD_INT 12
28591: PUSH
28592: LD_INT 13
28594: PUSH
28595: LD_INT 14
28597: PUSH
28598: EMPTY
28599: LIST
28600: LIST
28601: LIST
28602: LIST
28603: IN
28604: IFFALSE 28616
// uc_nation := nation_arabian else
28606: LD_ADDR_OWVAR 21
28610: PUSH
28611: LD_INT 2
28613: ST_TO_ADDR
28614: GO 28624
// uc_nation := nation_russian ;
28616: LD_ADDR_OWVAR 21
28620: PUSH
28621: LD_INT 3
28623: ST_TO_ADDR
// vc_chassis := chassis ;
28624: LD_ADDR_OWVAR 37
28628: PUSH
28629: LD_VAR 0 1
28633: ST_TO_ADDR
// vc_engine := engine ;
28634: LD_ADDR_OWVAR 39
28638: PUSH
28639: LD_VAR 0 2
28643: ST_TO_ADDR
// vc_control := control ;
28644: LD_ADDR_OWVAR 38
28648: PUSH
28649: LD_VAR 0 3
28653: ST_TO_ADDR
// vc_weapon := weapon ;
28654: LD_ADDR_OWVAR 40
28658: PUSH
28659: LD_VAR 0 4
28663: ST_TO_ADDR
// un := CreateVehicle ;
28664: LD_ADDR_VAR 0 8
28668: PUSH
28669: CALL_OW 45
28673: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28674: LD_VAR 0 8
28678: PPUSH
28679: LD_INT 0
28681: PPUSH
28682: LD_INT 5
28684: PPUSH
28685: CALL_OW 12
28689: PPUSH
28690: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28694: LD_VAR 0 8
28698: PPUSH
28699: LD_VAR 0 5
28703: PPUSH
28704: LD_VAR 0 6
28708: PPUSH
28709: LD_INT 1
28711: PPUSH
28712: CALL_OW 48
// end ;
28716: LD_VAR 0 7
28720: RET
// export hInvincible ; every 1 do
28721: GO 28723
28723: DISABLE
// hInvincible := [ ] ;
28724: LD_ADDR_EXP 117
28728: PUSH
28729: EMPTY
28730: ST_TO_ADDR
28731: END
// every 10 do var i ;
28732: GO 28734
28734: DISABLE
28735: LD_INT 0
28737: PPUSH
// begin enable ;
28738: ENABLE
// if not hInvincible then
28739: LD_EXP 117
28743: NOT
28744: IFFALSE 28748
// exit ;
28746: GO 28792
// for i in hInvincible do
28748: LD_ADDR_VAR 0 1
28752: PUSH
28753: LD_EXP 117
28757: PUSH
28758: FOR_IN
28759: IFFALSE 28790
// if GetLives ( i ) < 1000 then
28761: LD_VAR 0 1
28765: PPUSH
28766: CALL_OW 256
28770: PUSH
28771: LD_INT 1000
28773: LESS
28774: IFFALSE 28788
// SetLives ( i , 1000 ) ;
28776: LD_VAR 0 1
28780: PPUSH
28781: LD_INT 1000
28783: PPUSH
28784: CALL_OW 234
28788: GO 28758
28790: POP
28791: POP
// end ;
28792: PPOPN 1
28794: END
// export function hHackInvincible ; var i ; begin
28795: LD_INT 0
28797: PPUSH
28798: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28799: LD_ADDR_VAR 0 2
28803: PUSH
28804: LD_INT 2
28806: PUSH
28807: LD_INT 21
28809: PUSH
28810: LD_INT 1
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 21
28819: PUSH
28820: LD_INT 2
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: LIST
28831: PPUSH
28832: CALL_OW 69
28836: PUSH
28837: FOR_IN
28838: IFFALSE 28899
// if IsSelected ( i ) then
28840: LD_VAR 0 2
28844: PPUSH
28845: CALL_OW 306
28849: IFFALSE 28897
// begin if i in hInvincible then
28851: LD_VAR 0 2
28855: PUSH
28856: LD_EXP 117
28860: IN
28861: IFFALSE 28881
// hInvincible := hInvincible diff i else
28863: LD_ADDR_EXP 117
28867: PUSH
28868: LD_EXP 117
28872: PUSH
28873: LD_VAR 0 2
28877: DIFF
28878: ST_TO_ADDR
28879: GO 28897
// hInvincible := hInvincible union i ;
28881: LD_ADDR_EXP 117
28885: PUSH
28886: LD_EXP 117
28890: PUSH
28891: LD_VAR 0 2
28895: UNION
28896: ST_TO_ADDR
// end ;
28897: GO 28837
28899: POP
28900: POP
// end ;
28901: LD_VAR 0 1
28905: RET
// export function hHackInvisible ; var i , j ; begin
28906: LD_INT 0
28908: PPUSH
28909: PPUSH
28910: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28911: LD_ADDR_VAR 0 2
28915: PUSH
28916: LD_INT 21
28918: PUSH
28919: LD_INT 1
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PPUSH
28926: CALL_OW 69
28930: PUSH
28931: FOR_IN
28932: IFFALSE 28956
// if IsSelected ( i ) then
28934: LD_VAR 0 2
28938: PPUSH
28939: CALL_OW 306
28943: IFFALSE 28954
// ComForceInvisible ( i ) ;
28945: LD_VAR 0 2
28949: PPUSH
28950: CALL_OW 496
28954: GO 28931
28956: POP
28957: POP
// end ;
28958: LD_VAR 0 1
28962: RET
// export function hHackChangeYourSide ; begin
28963: LD_INT 0
28965: PPUSH
// if your_side = 8 then
28966: LD_OWVAR 2
28970: PUSH
28971: LD_INT 8
28973: EQUAL
28974: IFFALSE 28986
// your_side := 0 else
28976: LD_ADDR_OWVAR 2
28980: PUSH
28981: LD_INT 0
28983: ST_TO_ADDR
28984: GO 29000
// your_side := your_side + 1 ;
28986: LD_ADDR_OWVAR 2
28990: PUSH
28991: LD_OWVAR 2
28995: PUSH
28996: LD_INT 1
28998: PLUS
28999: ST_TO_ADDR
// end ;
29000: LD_VAR 0 1
29004: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29005: LD_INT 0
29007: PPUSH
29008: PPUSH
29009: PPUSH
// for i in all_units do
29010: LD_ADDR_VAR 0 2
29014: PUSH
29015: LD_OWVAR 3
29019: PUSH
29020: FOR_IN
29021: IFFALSE 29099
// if IsSelected ( i ) then
29023: LD_VAR 0 2
29027: PPUSH
29028: CALL_OW 306
29032: IFFALSE 29097
// begin j := GetSide ( i ) ;
29034: LD_ADDR_VAR 0 3
29038: PUSH
29039: LD_VAR 0 2
29043: PPUSH
29044: CALL_OW 255
29048: ST_TO_ADDR
// if j = 8 then
29049: LD_VAR 0 3
29053: PUSH
29054: LD_INT 8
29056: EQUAL
29057: IFFALSE 29069
// j := 0 else
29059: LD_ADDR_VAR 0 3
29063: PUSH
29064: LD_INT 0
29066: ST_TO_ADDR
29067: GO 29083
// j := j + 1 ;
29069: LD_ADDR_VAR 0 3
29073: PUSH
29074: LD_VAR 0 3
29078: PUSH
29079: LD_INT 1
29081: PLUS
29082: ST_TO_ADDR
// SetSide ( i , j ) ;
29083: LD_VAR 0 2
29087: PPUSH
29088: LD_VAR 0 3
29092: PPUSH
29093: CALL_OW 235
// end ;
29097: GO 29020
29099: POP
29100: POP
// end ;
29101: LD_VAR 0 1
29105: RET
// export function hHackFog ; begin
29106: LD_INT 0
29108: PPUSH
// FogOff ( true ) ;
29109: LD_INT 1
29111: PPUSH
29112: CALL_OW 344
// end ;
29116: LD_VAR 0 1
29120: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29121: LD_INT 0
29123: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29124: LD_VAR 0 1
29128: PPUSH
29129: LD_VAR 0 2
29133: PPUSH
29134: LD_VAR 0 3
29138: PPUSH
29139: LD_INT 1
29141: PPUSH
29142: LD_INT 1
29144: PPUSH
29145: CALL_OW 483
// CenterOnXY ( x , y ) ;
29149: LD_VAR 0 2
29153: PPUSH
29154: LD_VAR 0 3
29158: PPUSH
29159: CALL_OW 84
// end ; end_of_file
29163: LD_VAR 0 4
29167: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
29168: LD_INT 0
29170: PPUSH
29171: PPUSH
29172: PPUSH
29173: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
29174: LD_VAR 0 1
29178: PPUSH
29179: CALL_OW 264
29183: PUSH
29184: LD_EXP 133
29188: EQUAL
29189: IFFALSE 29261
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
29191: LD_INT 68
29193: PPUSH
29194: LD_VAR 0 1
29198: PPUSH
29199: CALL_OW 255
29203: PPUSH
29204: CALL_OW 321
29208: PUSH
29209: LD_INT 2
29211: EQUAL
29212: IFFALSE 29224
// eff := 70 else
29214: LD_ADDR_VAR 0 4
29218: PUSH
29219: LD_INT 70
29221: ST_TO_ADDR
29222: GO 29232
// eff := 30 ;
29224: LD_ADDR_VAR 0 4
29228: PUSH
29229: LD_INT 30
29231: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
29232: LD_VAR 0 1
29236: PPUSH
29237: CALL_OW 250
29241: PPUSH
29242: LD_VAR 0 1
29246: PPUSH
29247: CALL_OW 251
29251: PPUSH
29252: LD_VAR 0 4
29256: PPUSH
29257: CALL_OW 495
// end ; end ;
29261: LD_VAR 0 2
29265: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
29266: LD_INT 0
29268: PPUSH
// end ;
29269: LD_VAR 0 4
29273: RET
// export function SOS_Command ( cmd ) ; begin
29274: LD_INT 0
29276: PPUSH
// end ;
29277: LD_VAR 0 2
29281: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
29282: LD_INT 0
29284: PPUSH
// end ;
29285: LD_VAR 0 6
29289: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
29290: LD_INT 0
29292: PPUSH
29293: PPUSH
// if not vehicle or not factory then
29294: LD_VAR 0 1
29298: NOT
29299: PUSH
29300: LD_VAR 0 2
29304: NOT
29305: OR
29306: IFFALSE 29310
// exit ;
29308: GO 29541
// if factoryWaypoints >= factory then
29310: LD_EXP 118
29314: PUSH
29315: LD_VAR 0 2
29319: GREATEREQUAL
29320: IFFALSE 29541
// if factoryWaypoints [ factory ] then
29322: LD_EXP 118
29326: PUSH
29327: LD_VAR 0 2
29331: ARRAY
29332: IFFALSE 29541
// begin if GetControl ( vehicle ) = control_manual then
29334: LD_VAR 0 1
29338: PPUSH
29339: CALL_OW 263
29343: PUSH
29344: LD_INT 1
29346: EQUAL
29347: IFFALSE 29428
// begin driver := IsDrivenBy ( vehicle ) ;
29349: LD_ADDR_VAR 0 4
29353: PUSH
29354: LD_VAR 0 1
29358: PPUSH
29359: CALL_OW 311
29363: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
29364: LD_VAR 0 4
29368: PPUSH
29369: LD_EXP 118
29373: PUSH
29374: LD_VAR 0 2
29378: ARRAY
29379: PUSH
29380: LD_INT 1
29382: ARRAY
29383: PPUSH
29384: LD_EXP 118
29388: PUSH
29389: LD_VAR 0 2
29393: ARRAY
29394: PUSH
29395: LD_INT 2
29397: ARRAY
29398: PPUSH
29399: CALL_OW 171
// AddComExitVehicle ( driver ) ;
29403: LD_VAR 0 4
29407: PPUSH
29408: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
29412: LD_VAR 0 4
29416: PPUSH
29417: LD_VAR 0 2
29421: PPUSH
29422: CALL_OW 180
// end else
29426: GO 29541
// if GetControl ( vehicle ) = control_remote then
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 263
29437: PUSH
29438: LD_INT 2
29440: EQUAL
29441: IFFALSE 29502
// begin wait ( 0 0$2 ) ;
29443: LD_INT 70
29445: PPUSH
29446: CALL_OW 67
// if Connect ( vehicle ) then
29450: LD_VAR 0 1
29454: PPUSH
29455: CALL 42096 0 1
29459: IFFALSE 29500
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
29461: LD_VAR 0 1
29465: PPUSH
29466: LD_EXP 118
29470: PUSH
29471: LD_VAR 0 2
29475: ARRAY
29476: PUSH
29477: LD_INT 1
29479: ARRAY
29480: PPUSH
29481: LD_EXP 118
29485: PUSH
29486: LD_VAR 0 2
29490: ARRAY
29491: PUSH
29492: LD_INT 2
29494: ARRAY
29495: PPUSH
29496: CALL_OW 171
// end else
29500: GO 29541
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
29502: LD_VAR 0 1
29506: PPUSH
29507: LD_EXP 118
29511: PUSH
29512: LD_VAR 0 2
29516: ARRAY
29517: PUSH
29518: LD_INT 1
29520: ARRAY
29521: PPUSH
29522: LD_EXP 118
29526: PUSH
29527: LD_VAR 0 2
29531: ARRAY
29532: PUSH
29533: LD_INT 2
29535: ARRAY
29536: PPUSH
29537: CALL_OW 171
// end ; end ;
29541: LD_VAR 0 3
29545: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
29546: LD_INT 0
29548: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
29549: LD_VAR 0 1
29553: PUSH
29554: LD_INT 250
29556: EQUAL
29557: PUSH
29558: LD_VAR 0 2
29562: PPUSH
29563: CALL_OW 264
29567: PUSH
29568: LD_EXP 136
29572: EQUAL
29573: AND
29574: IFFALSE 29595
// MinerPlaceMine ( unit , x , y ) ;
29576: LD_VAR 0 2
29580: PPUSH
29581: LD_VAR 0 4
29585: PPUSH
29586: LD_VAR 0 5
29590: PPUSH
29591: CALL 32323 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
29595: LD_VAR 0 1
29599: PUSH
29600: LD_INT 251
29602: EQUAL
29603: PUSH
29604: LD_VAR 0 2
29608: PPUSH
29609: CALL_OW 264
29613: PUSH
29614: LD_EXP 136
29618: EQUAL
29619: AND
29620: IFFALSE 29641
// MinerDetonateMine ( unit , x , y ) ;
29622: LD_VAR 0 2
29626: PPUSH
29627: LD_VAR 0 4
29631: PPUSH
29632: LD_VAR 0 5
29636: PPUSH
29637: CALL 32600 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
29641: LD_VAR 0 1
29645: PUSH
29646: LD_INT 252
29648: EQUAL
29649: PUSH
29650: LD_VAR 0 2
29654: PPUSH
29655: CALL_OW 264
29659: PUSH
29660: LD_EXP 136
29664: EQUAL
29665: AND
29666: IFFALSE 29687
// MinerCreateMinefield ( unit , x , y ) ;
29668: LD_VAR 0 2
29672: PPUSH
29673: LD_VAR 0 4
29677: PPUSH
29678: LD_VAR 0 5
29682: PPUSH
29683: CALL 33017 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
29687: LD_VAR 0 1
29691: PUSH
29692: LD_INT 253
29694: EQUAL
29695: PUSH
29696: LD_VAR 0 2
29700: PPUSH
29701: CALL_OW 257
29705: PUSH
29706: LD_INT 5
29708: EQUAL
29709: AND
29710: IFFALSE 29731
// ComBinocular ( unit , x , y ) ;
29712: LD_VAR 0 2
29716: PPUSH
29717: LD_VAR 0 4
29721: PPUSH
29722: LD_VAR 0 5
29726: PPUSH
29727: CALL 33388 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
29731: LD_VAR 0 1
29735: PUSH
29736: LD_INT 254
29738: EQUAL
29739: PUSH
29740: LD_VAR 0 2
29744: PPUSH
29745: CALL_OW 264
29749: PUSH
29750: LD_EXP 131
29754: EQUAL
29755: AND
29756: PUSH
29757: LD_VAR 0 3
29761: PPUSH
29762: CALL_OW 263
29766: PUSH
29767: LD_INT 3
29769: EQUAL
29770: AND
29771: IFFALSE 29787
// HackDestroyVehicle ( unit , selectedUnit ) ;
29773: LD_VAR 0 2
29777: PPUSH
29778: LD_VAR 0 3
29782: PPUSH
29783: CALL 31683 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
29787: LD_VAR 0 1
29791: PUSH
29792: LD_INT 255
29794: EQUAL
29795: PUSH
29796: LD_VAR 0 2
29800: PPUSH
29801: CALL_OW 264
29805: PUSH
29806: LD_INT 14
29808: PUSH
29809: LD_INT 53
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: IN
29816: AND
29817: PUSH
29818: LD_VAR 0 4
29822: PPUSH
29823: LD_VAR 0 5
29827: PPUSH
29828: CALL_OW 488
29832: AND
29833: IFFALSE 29857
// CutTreeXYR ( unit , x , y , 12 ) ;
29835: LD_VAR 0 2
29839: PPUSH
29840: LD_VAR 0 4
29844: PPUSH
29845: LD_VAR 0 5
29849: PPUSH
29850: LD_INT 12
29852: PPUSH
29853: CALL 30249 0 4
// if cmd = 256 then
29857: LD_VAR 0 1
29861: PUSH
29862: LD_INT 256
29864: EQUAL
29865: IFFALSE 29886
// SetFactoryWaypoint ( unit , x , y ) ;
29867: LD_VAR 0 2
29871: PPUSH
29872: LD_VAR 0 4
29876: PPUSH
29877: LD_VAR 0 5
29881: PPUSH
29882: CALL 29891 0 3
// end ;
29886: LD_VAR 0 6
29890: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29891: LD_INT 0
29893: PPUSH
29894: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29895: LD_VAR 0 1
29899: NOT
29900: PUSH
29901: LD_VAR 0 2
29905: PPUSH
29906: LD_VAR 0 3
29910: PPUSH
29911: CALL_OW 488
29915: NOT
29916: OR
29917: PUSH
29918: LD_VAR 0 1
29922: PPUSH
29923: CALL_OW 266
29927: PUSH
29928: LD_INT 3
29930: NONEQUAL
29931: PUSH
29932: LD_VAR 0 1
29936: PPUSH
29937: CALL_OW 247
29941: PUSH
29942: LD_INT 1
29944: EQUAL
29945: NOT
29946: AND
29947: OR
29948: IFFALSE 29952
// exit ;
29950: GO 30101
// if GetType ( factory ) = unit_human then
29952: LD_VAR 0 1
29956: PPUSH
29957: CALL_OW 247
29961: PUSH
29962: LD_INT 1
29964: EQUAL
29965: IFFALSE 29982
// factory := IsInUnit ( factory ) ;
29967: LD_ADDR_VAR 0 1
29971: PUSH
29972: LD_VAR 0 1
29976: PPUSH
29977: CALL_OW 310
29981: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29982: LD_VAR 0 1
29986: PPUSH
29987: CALL_OW 266
29991: PUSH
29992: LD_INT 3
29994: NONEQUAL
29995: IFFALSE 29999
// exit ;
29997: GO 30101
// if HexInfo ( x , y ) = factory then
29999: LD_VAR 0 2
30003: PPUSH
30004: LD_VAR 0 3
30008: PPUSH
30009: CALL_OW 428
30013: PUSH
30014: LD_VAR 0 1
30018: EQUAL
30019: IFFALSE 30046
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
30021: LD_ADDR_EXP 118
30025: PUSH
30026: LD_EXP 118
30030: PPUSH
30031: LD_VAR 0 1
30035: PPUSH
30036: LD_INT 0
30038: PPUSH
30039: CALL_OW 1
30043: ST_TO_ADDR
30044: GO 30097
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
30046: LD_ADDR_EXP 118
30050: PUSH
30051: LD_EXP 118
30055: PPUSH
30056: LD_VAR 0 1
30060: PPUSH
30061: LD_VAR 0 1
30065: PPUSH
30066: CALL_OW 255
30070: PUSH
30071: LD_VAR 0 1
30075: PUSH
30076: LD_VAR 0 2
30080: PUSH
30081: LD_VAR 0 3
30085: PUSH
30086: EMPTY
30087: LIST
30088: LIST
30089: LIST
30090: LIST
30091: PPUSH
30092: CALL_OW 1
30096: ST_TO_ADDR
// UpdateFactoryWaypoints ;
30097: CALL 30106 0 0
// end ;
30101: LD_VAR 0 4
30105: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
30106: LD_INT 0
30108: PPUSH
30109: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
30110: LD_STRING resetFactoryWaypoint();
30112: PPUSH
30113: CALL_OW 559
// if factoryWaypoints then
30117: LD_EXP 118
30121: IFFALSE 30244
// begin for i := 1 to factoryWaypoints do
30123: LD_ADDR_VAR 0 2
30127: PUSH
30128: DOUBLE
30129: LD_INT 1
30131: DEC
30132: ST_TO_ADDR
30133: LD_EXP 118
30137: PUSH
30138: FOR_TO
30139: IFFALSE 30242
// if factoryWaypoints [ i ] then
30141: LD_EXP 118
30145: PUSH
30146: LD_VAR 0 2
30150: ARRAY
30151: IFFALSE 30240
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
30153: LD_STRING setFactoryWaypointXY(
30155: PUSH
30156: LD_EXP 118
30160: PUSH
30161: LD_VAR 0 2
30165: ARRAY
30166: PUSH
30167: LD_INT 1
30169: ARRAY
30170: STR
30171: PUSH
30172: LD_STRING ,
30174: STR
30175: PUSH
30176: LD_EXP 118
30180: PUSH
30181: LD_VAR 0 2
30185: ARRAY
30186: PUSH
30187: LD_INT 2
30189: ARRAY
30190: STR
30191: PUSH
30192: LD_STRING ,
30194: STR
30195: PUSH
30196: LD_EXP 118
30200: PUSH
30201: LD_VAR 0 2
30205: ARRAY
30206: PUSH
30207: LD_INT 3
30209: ARRAY
30210: STR
30211: PUSH
30212: LD_STRING ,
30214: STR
30215: PUSH
30216: LD_EXP 118
30220: PUSH
30221: LD_VAR 0 2
30225: ARRAY
30226: PUSH
30227: LD_INT 4
30229: ARRAY
30230: STR
30231: PUSH
30232: LD_STRING )
30234: STR
30235: PPUSH
30236: CALL_OW 559
30240: GO 30138
30242: POP
30243: POP
// end ; end ;
30244: LD_VAR 0 1
30248: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
30249: LD_INT 0
30251: PPUSH
30252: PPUSH
30253: PPUSH
30254: PPUSH
30255: PPUSH
30256: PPUSH
30257: PPUSH
30258: PPUSH
30259: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
30260: LD_VAR 0 1
30264: NOT
30265: PUSH
30266: LD_VAR 0 2
30270: PPUSH
30271: LD_VAR 0 3
30275: PPUSH
30276: CALL_OW 488
30280: NOT
30281: OR
30282: PUSH
30283: LD_VAR 0 4
30287: NOT
30288: OR
30289: IFFALSE 30293
// exit ;
30291: GO 30633
// list := [ ] ;
30293: LD_ADDR_VAR 0 13
30297: PUSH
30298: EMPTY
30299: ST_TO_ADDR
// if x - r < 0 then
30300: LD_VAR 0 2
30304: PUSH
30305: LD_VAR 0 4
30309: MINUS
30310: PUSH
30311: LD_INT 0
30313: LESS
30314: IFFALSE 30326
// min_x := 0 else
30316: LD_ADDR_VAR 0 7
30320: PUSH
30321: LD_INT 0
30323: ST_TO_ADDR
30324: GO 30342
// min_x := x - r ;
30326: LD_ADDR_VAR 0 7
30330: PUSH
30331: LD_VAR 0 2
30335: PUSH
30336: LD_VAR 0 4
30340: MINUS
30341: ST_TO_ADDR
// if y - r < 0 then
30342: LD_VAR 0 3
30346: PUSH
30347: LD_VAR 0 4
30351: MINUS
30352: PUSH
30353: LD_INT 0
30355: LESS
30356: IFFALSE 30368
// min_y := 0 else
30358: LD_ADDR_VAR 0 8
30362: PUSH
30363: LD_INT 0
30365: ST_TO_ADDR
30366: GO 30384
// min_y := y - r ;
30368: LD_ADDR_VAR 0 8
30372: PUSH
30373: LD_VAR 0 3
30377: PUSH
30378: LD_VAR 0 4
30382: MINUS
30383: ST_TO_ADDR
// max_x := x + r ;
30384: LD_ADDR_VAR 0 9
30388: PUSH
30389: LD_VAR 0 2
30393: PUSH
30394: LD_VAR 0 4
30398: PLUS
30399: ST_TO_ADDR
// max_y := y + r ;
30400: LD_ADDR_VAR 0 10
30404: PUSH
30405: LD_VAR 0 3
30409: PUSH
30410: LD_VAR 0 4
30414: PLUS
30415: ST_TO_ADDR
// for _x = min_x to max_x do
30416: LD_ADDR_VAR 0 11
30420: PUSH
30421: DOUBLE
30422: LD_VAR 0 7
30426: DEC
30427: ST_TO_ADDR
30428: LD_VAR 0 9
30432: PUSH
30433: FOR_TO
30434: IFFALSE 30551
// for _y = min_y to max_y do
30436: LD_ADDR_VAR 0 12
30440: PUSH
30441: DOUBLE
30442: LD_VAR 0 8
30446: DEC
30447: ST_TO_ADDR
30448: LD_VAR 0 10
30452: PUSH
30453: FOR_TO
30454: IFFALSE 30547
// begin if not ValidHex ( _x , _y ) then
30456: LD_VAR 0 11
30460: PPUSH
30461: LD_VAR 0 12
30465: PPUSH
30466: CALL_OW 488
30470: NOT
30471: IFFALSE 30475
// continue ;
30473: GO 30453
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
30475: LD_VAR 0 11
30479: PPUSH
30480: LD_VAR 0 12
30484: PPUSH
30485: CALL_OW 351
30489: PUSH
30490: LD_VAR 0 11
30494: PPUSH
30495: LD_VAR 0 12
30499: PPUSH
30500: CALL_OW 554
30504: AND
30505: IFFALSE 30545
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
30507: LD_ADDR_VAR 0 13
30511: PUSH
30512: LD_VAR 0 13
30516: PPUSH
30517: LD_VAR 0 13
30521: PUSH
30522: LD_INT 1
30524: PLUS
30525: PPUSH
30526: LD_VAR 0 11
30530: PUSH
30531: LD_VAR 0 12
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: PPUSH
30540: CALL_OW 2
30544: ST_TO_ADDR
// end ;
30545: GO 30453
30547: POP
30548: POP
30549: GO 30433
30551: POP
30552: POP
// if not list then
30553: LD_VAR 0 13
30557: NOT
30558: IFFALSE 30562
// exit ;
30560: GO 30633
// for i in list do
30562: LD_ADDR_VAR 0 6
30566: PUSH
30567: LD_VAR 0 13
30571: PUSH
30572: FOR_IN
30573: IFFALSE 30631
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
30575: LD_VAR 0 1
30579: PPUSH
30580: LD_STRING M
30582: PUSH
30583: LD_VAR 0 6
30587: PUSH
30588: LD_INT 1
30590: ARRAY
30591: PUSH
30592: LD_VAR 0 6
30596: PUSH
30597: LD_INT 2
30599: ARRAY
30600: PUSH
30601: LD_INT 0
30603: PUSH
30604: LD_INT 0
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: LD_INT 0
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: PUSH
30622: EMPTY
30623: LIST
30624: PPUSH
30625: CALL_OW 447
30629: GO 30572
30631: POP
30632: POP
// end ;
30633: LD_VAR 0 5
30637: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
30638: LD_EXP 119
30642: NOT
30643: IFFALSE 30693
30645: GO 30647
30647: DISABLE
// begin initHack := true ;
30648: LD_ADDR_EXP 119
30652: PUSH
30653: LD_INT 1
30655: ST_TO_ADDR
// hackTanks := [ ] ;
30656: LD_ADDR_EXP 120
30660: PUSH
30661: EMPTY
30662: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
30663: LD_ADDR_EXP 121
30667: PUSH
30668: EMPTY
30669: ST_TO_ADDR
// hackLimit := 3 ;
30670: LD_ADDR_EXP 122
30674: PUSH
30675: LD_INT 3
30677: ST_TO_ADDR
// hackDist := 12 ;
30678: LD_ADDR_EXP 123
30682: PUSH
30683: LD_INT 12
30685: ST_TO_ADDR
// hackCounter := [ ] ;
30686: LD_ADDR_EXP 124
30690: PUSH
30691: EMPTY
30692: ST_TO_ADDR
// end ;
30693: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
30694: LD_EXP 119
30698: PUSH
30699: LD_INT 34
30701: PUSH
30702: LD_EXP 131
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PPUSH
30711: CALL_OW 69
30715: AND
30716: IFFALSE 30971
30718: GO 30720
30720: DISABLE
30721: LD_INT 0
30723: PPUSH
30724: PPUSH
// begin enable ;
30725: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
30726: LD_ADDR_VAR 0 1
30730: PUSH
30731: LD_INT 34
30733: PUSH
30734: LD_EXP 131
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PPUSH
30743: CALL_OW 69
30747: PUSH
30748: FOR_IN
30749: IFFALSE 30969
// begin if not i in hackTanks then
30751: LD_VAR 0 1
30755: PUSH
30756: LD_EXP 120
30760: IN
30761: NOT
30762: IFFALSE 30845
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
30764: LD_ADDR_EXP 120
30768: PUSH
30769: LD_EXP 120
30773: PPUSH
30774: LD_EXP 120
30778: PUSH
30779: LD_INT 1
30781: PLUS
30782: PPUSH
30783: LD_VAR 0 1
30787: PPUSH
30788: CALL_OW 1
30792: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
30793: LD_ADDR_EXP 121
30797: PUSH
30798: LD_EXP 121
30802: PPUSH
30803: LD_EXP 121
30807: PUSH
30808: LD_INT 1
30810: PLUS
30811: PPUSH
30812: EMPTY
30813: PPUSH
30814: CALL_OW 1
30818: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
30819: LD_ADDR_EXP 124
30823: PUSH
30824: LD_EXP 124
30828: PPUSH
30829: LD_EXP 124
30833: PUSH
30834: LD_INT 1
30836: PLUS
30837: PPUSH
30838: EMPTY
30839: PPUSH
30840: CALL_OW 1
30844: ST_TO_ADDR
// end ; if not IsOk ( i ) then
30845: LD_VAR 0 1
30849: PPUSH
30850: CALL_OW 302
30854: NOT
30855: IFFALSE 30868
// begin HackUnlinkAll ( i ) ;
30857: LD_VAR 0 1
30861: PPUSH
30862: CALL 30974 0 1
// continue ;
30866: GO 30748
// end ; HackCheckCapturedStatus ( i ) ;
30868: LD_VAR 0 1
30872: PPUSH
30873: CALL 31417 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
30877: LD_ADDR_VAR 0 2
30881: PUSH
30882: LD_INT 81
30884: PUSH
30885: LD_VAR 0 1
30889: PPUSH
30890: CALL_OW 255
30894: PUSH
30895: EMPTY
30896: LIST
30897: LIST
30898: PUSH
30899: LD_INT 33
30901: PUSH
30902: LD_INT 3
30904: PUSH
30905: EMPTY
30906: LIST
30907: LIST
30908: PUSH
30909: LD_INT 91
30911: PUSH
30912: LD_VAR 0 1
30916: PUSH
30917: LD_EXP 123
30921: PUSH
30922: EMPTY
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: LD_INT 50
30929: PUSH
30930: EMPTY
30931: LIST
30932: PUSH
30933: EMPTY
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: PPUSH
30939: CALL_OW 69
30943: ST_TO_ADDR
// if not tmp then
30944: LD_VAR 0 2
30948: NOT
30949: IFFALSE 30953
// continue ;
30951: GO 30748
// HackLink ( i , tmp ) ;
30953: LD_VAR 0 1
30957: PPUSH
30958: LD_VAR 0 2
30962: PPUSH
30963: CALL 31110 0 2
// end ;
30967: GO 30748
30969: POP
30970: POP
// end ;
30971: PPOPN 2
30973: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
30974: LD_INT 0
30976: PPUSH
30977: PPUSH
30978: PPUSH
// if not hack in hackTanks then
30979: LD_VAR 0 1
30983: PUSH
30984: LD_EXP 120
30988: IN
30989: NOT
30990: IFFALSE 30994
// exit ;
30992: GO 31105
// index := GetElementIndex ( hackTanks , hack ) ;
30994: LD_ADDR_VAR 0 4
30998: PUSH
30999: LD_EXP 120
31003: PPUSH
31004: LD_VAR 0 1
31008: PPUSH
31009: CALL 38910 0 2
31013: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
31014: LD_EXP 121
31018: PUSH
31019: LD_VAR 0 4
31023: ARRAY
31024: IFFALSE 31105
// begin for i in hackTanksCaptured [ index ] do
31026: LD_ADDR_VAR 0 3
31030: PUSH
31031: LD_EXP 121
31035: PUSH
31036: LD_VAR 0 4
31040: ARRAY
31041: PUSH
31042: FOR_IN
31043: IFFALSE 31069
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
31045: LD_VAR 0 3
31049: PUSH
31050: LD_INT 1
31052: ARRAY
31053: PPUSH
31054: LD_VAR 0 3
31058: PUSH
31059: LD_INT 2
31061: ARRAY
31062: PPUSH
31063: CALL_OW 235
31067: GO 31042
31069: POP
31070: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
31071: LD_ADDR_EXP 121
31075: PUSH
31076: LD_EXP 121
31080: PPUSH
31081: LD_VAR 0 4
31085: PPUSH
31086: EMPTY
31087: PPUSH
31088: CALL_OW 1
31092: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
31093: LD_VAR 0 1
31097: PPUSH
31098: LD_INT 0
31100: PPUSH
31101: CALL_OW 505
// end ; end ;
31105: LD_VAR 0 2
31109: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
31110: LD_INT 0
31112: PPUSH
31113: PPUSH
31114: PPUSH
// if not hack in hackTanks or not vehicles then
31115: LD_VAR 0 1
31119: PUSH
31120: LD_EXP 120
31124: IN
31125: NOT
31126: PUSH
31127: LD_VAR 0 2
31131: NOT
31132: OR
31133: IFFALSE 31137
// exit ;
31135: GO 31412
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
31137: LD_ADDR_VAR 0 2
31141: PUSH
31142: LD_VAR 0 1
31146: PPUSH
31147: LD_VAR 0 2
31151: PPUSH
31152: LD_INT 1
31154: PPUSH
31155: LD_INT 1
31157: PPUSH
31158: CALL 39560 0 4
31162: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
31163: LD_ADDR_VAR 0 5
31167: PUSH
31168: LD_EXP 120
31172: PPUSH
31173: LD_VAR 0 1
31177: PPUSH
31178: CALL 38910 0 2
31182: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
31183: LD_EXP 121
31187: PUSH
31188: LD_VAR 0 5
31192: ARRAY
31193: PUSH
31194: LD_EXP 122
31198: LESS
31199: IFFALSE 31388
// begin for i := 1 to vehicles do
31201: LD_ADDR_VAR 0 4
31205: PUSH
31206: DOUBLE
31207: LD_INT 1
31209: DEC
31210: ST_TO_ADDR
31211: LD_VAR 0 2
31215: PUSH
31216: FOR_TO
31217: IFFALSE 31386
// begin if hackTanksCaptured [ index ] = hackLimit then
31219: LD_EXP 121
31223: PUSH
31224: LD_VAR 0 5
31228: ARRAY
31229: PUSH
31230: LD_EXP 122
31234: EQUAL
31235: IFFALSE 31239
// break ;
31237: GO 31386
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
31239: LD_ADDR_EXP 124
31243: PUSH
31244: LD_EXP 124
31248: PPUSH
31249: LD_VAR 0 5
31253: PPUSH
31254: LD_EXP 124
31258: PUSH
31259: LD_VAR 0 5
31263: ARRAY
31264: PUSH
31265: LD_INT 1
31267: PLUS
31268: PPUSH
31269: CALL_OW 1
31273: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
31274: LD_ADDR_EXP 121
31278: PUSH
31279: LD_EXP 121
31283: PPUSH
31284: LD_VAR 0 5
31288: PUSH
31289: LD_EXP 121
31293: PUSH
31294: LD_VAR 0 5
31298: ARRAY
31299: PUSH
31300: LD_INT 1
31302: PLUS
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PPUSH
31308: LD_VAR 0 2
31312: PUSH
31313: LD_VAR 0 4
31317: ARRAY
31318: PUSH
31319: LD_VAR 0 2
31323: PUSH
31324: LD_VAR 0 4
31328: ARRAY
31329: PPUSH
31330: CALL_OW 255
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PPUSH
31339: CALL 39125 0 3
31343: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
31344: LD_VAR 0 2
31348: PUSH
31349: LD_VAR 0 4
31353: ARRAY
31354: PPUSH
31355: LD_VAR 0 1
31359: PPUSH
31360: CALL_OW 255
31364: PPUSH
31365: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
31369: LD_VAR 0 2
31373: PUSH
31374: LD_VAR 0 4
31378: ARRAY
31379: PPUSH
31380: CALL_OW 141
// end ;
31384: GO 31216
31386: POP
31387: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31388: LD_VAR 0 1
31392: PPUSH
31393: LD_EXP 121
31397: PUSH
31398: LD_VAR 0 5
31402: ARRAY
31403: PUSH
31404: LD_INT 0
31406: PLUS
31407: PPUSH
31408: CALL_OW 505
// end ;
31412: LD_VAR 0 3
31416: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
31417: LD_INT 0
31419: PPUSH
31420: PPUSH
31421: PPUSH
31422: PPUSH
// if not hack in hackTanks then
31423: LD_VAR 0 1
31427: PUSH
31428: LD_EXP 120
31432: IN
31433: NOT
31434: IFFALSE 31438
// exit ;
31436: GO 31678
// index := GetElementIndex ( hackTanks , hack ) ;
31438: LD_ADDR_VAR 0 4
31442: PUSH
31443: LD_EXP 120
31447: PPUSH
31448: LD_VAR 0 1
31452: PPUSH
31453: CALL 38910 0 2
31457: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
31458: LD_ADDR_VAR 0 3
31462: PUSH
31463: DOUBLE
31464: LD_EXP 121
31468: PUSH
31469: LD_VAR 0 4
31473: ARRAY
31474: INC
31475: ST_TO_ADDR
31476: LD_INT 1
31478: PUSH
31479: FOR_DOWNTO
31480: IFFALSE 31652
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
31482: LD_ADDR_VAR 0 5
31486: PUSH
31487: LD_EXP 121
31491: PUSH
31492: LD_VAR 0 4
31496: ARRAY
31497: PUSH
31498: LD_VAR 0 3
31502: ARRAY
31503: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
31504: LD_VAR 0 5
31508: PUSH
31509: LD_INT 1
31511: ARRAY
31512: PPUSH
31513: CALL_OW 302
31517: NOT
31518: PUSH
31519: LD_VAR 0 5
31523: PUSH
31524: LD_INT 1
31526: ARRAY
31527: PPUSH
31528: CALL_OW 255
31532: PUSH
31533: LD_VAR 0 1
31537: PPUSH
31538: CALL_OW 255
31542: NONEQUAL
31543: OR
31544: IFFALSE 31650
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
31546: LD_VAR 0 5
31550: PUSH
31551: LD_INT 1
31553: ARRAY
31554: PPUSH
31555: CALL_OW 305
31559: PUSH
31560: LD_VAR 0 5
31564: PUSH
31565: LD_INT 1
31567: ARRAY
31568: PPUSH
31569: CALL_OW 255
31573: PUSH
31574: LD_VAR 0 1
31578: PPUSH
31579: CALL_OW 255
31583: EQUAL
31584: AND
31585: IFFALSE 31609
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
31587: LD_VAR 0 5
31591: PUSH
31592: LD_INT 1
31594: ARRAY
31595: PPUSH
31596: LD_VAR 0 5
31600: PUSH
31601: LD_INT 2
31603: ARRAY
31604: PPUSH
31605: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
31609: LD_ADDR_EXP 121
31613: PUSH
31614: LD_EXP 121
31618: PPUSH
31619: LD_VAR 0 4
31623: PPUSH
31624: LD_EXP 121
31628: PUSH
31629: LD_VAR 0 4
31633: ARRAY
31634: PPUSH
31635: LD_VAR 0 3
31639: PPUSH
31640: CALL_OW 3
31644: PPUSH
31645: CALL_OW 1
31649: ST_TO_ADDR
// end ; end ;
31650: GO 31479
31652: POP
31653: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
31654: LD_VAR 0 1
31658: PPUSH
31659: LD_EXP 121
31663: PUSH
31664: LD_VAR 0 4
31668: ARRAY
31669: PUSH
31670: LD_INT 0
31672: PLUS
31673: PPUSH
31674: CALL_OW 505
// end ;
31678: LD_VAR 0 2
31682: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
31683: LD_INT 0
31685: PPUSH
31686: PPUSH
31687: PPUSH
31688: PPUSH
// if not hack in hackTanks then
31689: LD_VAR 0 1
31693: PUSH
31694: LD_EXP 120
31698: IN
31699: NOT
31700: IFFALSE 31704
// exit ;
31702: GO 31789
// index := GetElementIndex ( hackTanks , hack ) ;
31704: LD_ADDR_VAR 0 5
31708: PUSH
31709: LD_EXP 120
31713: PPUSH
31714: LD_VAR 0 1
31718: PPUSH
31719: CALL 38910 0 2
31723: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
31724: LD_ADDR_VAR 0 4
31728: PUSH
31729: DOUBLE
31730: LD_INT 1
31732: DEC
31733: ST_TO_ADDR
31734: LD_EXP 121
31738: PUSH
31739: LD_VAR 0 5
31743: ARRAY
31744: PUSH
31745: FOR_TO
31746: IFFALSE 31787
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
31748: LD_EXP 121
31752: PUSH
31753: LD_VAR 0 5
31757: ARRAY
31758: PUSH
31759: LD_VAR 0 4
31763: ARRAY
31764: PUSH
31765: LD_INT 1
31767: ARRAY
31768: PUSH
31769: LD_VAR 0 2
31773: EQUAL
31774: IFFALSE 31785
// KillUnit ( vehicle ) ;
31776: LD_VAR 0 2
31780: PPUSH
31781: CALL_OW 66
31785: GO 31745
31787: POP
31788: POP
// end ;
31789: LD_VAR 0 3
31793: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
31794: LD_EXP 125
31798: NOT
31799: IFFALSE 31834
31801: GO 31803
31803: DISABLE
// begin initMiner := true ;
31804: LD_ADDR_EXP 125
31808: PUSH
31809: LD_INT 1
31811: ST_TO_ADDR
// minersList := [ ] ;
31812: LD_ADDR_EXP 126
31816: PUSH
31817: EMPTY
31818: ST_TO_ADDR
// minerMinesList := [ ] ;
31819: LD_ADDR_EXP 127
31823: PUSH
31824: EMPTY
31825: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
31826: LD_ADDR_EXP 128
31830: PUSH
31831: LD_INT 5
31833: ST_TO_ADDR
// end ;
31834: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
31835: LD_EXP 125
31839: PUSH
31840: LD_INT 34
31842: PUSH
31843: LD_EXP 136
31847: PUSH
31848: EMPTY
31849: LIST
31850: LIST
31851: PPUSH
31852: CALL_OW 69
31856: AND
31857: IFFALSE 32320
31859: GO 31861
31861: DISABLE
31862: LD_INT 0
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
// begin enable ;
31868: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
31869: LD_ADDR_VAR 0 1
31873: PUSH
31874: LD_INT 34
31876: PUSH
31877: LD_EXP 136
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: PPUSH
31886: CALL_OW 69
31890: PUSH
31891: FOR_IN
31892: IFFALSE 31964
// begin if not i in minersList then
31894: LD_VAR 0 1
31898: PUSH
31899: LD_EXP 126
31903: IN
31904: NOT
31905: IFFALSE 31962
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
31907: LD_ADDR_EXP 126
31911: PUSH
31912: LD_EXP 126
31916: PPUSH
31917: LD_EXP 126
31921: PUSH
31922: LD_INT 1
31924: PLUS
31925: PPUSH
31926: LD_VAR 0 1
31930: PPUSH
31931: CALL_OW 1
31935: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
31936: LD_ADDR_EXP 127
31940: PUSH
31941: LD_EXP 127
31945: PPUSH
31946: LD_EXP 127
31950: PUSH
31951: LD_INT 1
31953: PLUS
31954: PPUSH
31955: EMPTY
31956: PPUSH
31957: CALL_OW 1
31961: ST_TO_ADDR
// end end ;
31962: GO 31891
31964: POP
31965: POP
// for i := minerMinesList downto 1 do
31966: LD_ADDR_VAR 0 1
31970: PUSH
31971: DOUBLE
31972: LD_EXP 127
31976: INC
31977: ST_TO_ADDR
31978: LD_INT 1
31980: PUSH
31981: FOR_DOWNTO
31982: IFFALSE 32318
// begin if IsLive ( minersList [ i ] ) then
31984: LD_EXP 126
31988: PUSH
31989: LD_VAR 0 1
31993: ARRAY
31994: PPUSH
31995: CALL_OW 300
31999: IFFALSE 32027
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
32001: LD_EXP 126
32005: PUSH
32006: LD_VAR 0 1
32010: ARRAY
32011: PPUSH
32012: LD_EXP 127
32016: PUSH
32017: LD_VAR 0 1
32021: ARRAY
32022: PPUSH
32023: CALL_OW 505
// if not minerMinesList [ i ] then
32027: LD_EXP 127
32031: PUSH
32032: LD_VAR 0 1
32036: ARRAY
32037: NOT
32038: IFFALSE 32042
// continue ;
32040: GO 31981
// for j := minerMinesList [ i ] downto 1 do
32042: LD_ADDR_VAR 0 2
32046: PUSH
32047: DOUBLE
32048: LD_EXP 127
32052: PUSH
32053: LD_VAR 0 1
32057: ARRAY
32058: INC
32059: ST_TO_ADDR
32060: LD_INT 1
32062: PUSH
32063: FOR_DOWNTO
32064: IFFALSE 32314
// begin side := GetSide ( minersList [ i ] ) ;
32066: LD_ADDR_VAR 0 3
32070: PUSH
32071: LD_EXP 126
32075: PUSH
32076: LD_VAR 0 1
32080: ARRAY
32081: PPUSH
32082: CALL_OW 255
32086: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
32087: LD_ADDR_VAR 0 4
32091: PUSH
32092: LD_EXP 127
32096: PUSH
32097: LD_VAR 0 1
32101: ARRAY
32102: PUSH
32103: LD_VAR 0 2
32107: ARRAY
32108: PUSH
32109: LD_INT 1
32111: ARRAY
32112: PPUSH
32113: LD_EXP 127
32117: PUSH
32118: LD_VAR 0 1
32122: ARRAY
32123: PUSH
32124: LD_VAR 0 2
32128: ARRAY
32129: PUSH
32130: LD_INT 2
32132: ARRAY
32133: PPUSH
32134: CALL_OW 428
32138: ST_TO_ADDR
// if not tmp then
32139: LD_VAR 0 4
32143: NOT
32144: IFFALSE 32148
// continue ;
32146: GO 32063
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
32148: LD_VAR 0 4
32152: PUSH
32153: LD_INT 81
32155: PUSH
32156: LD_VAR 0 3
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PPUSH
32165: CALL_OW 69
32169: IN
32170: PUSH
32171: LD_EXP 127
32175: PUSH
32176: LD_VAR 0 1
32180: ARRAY
32181: PUSH
32182: LD_VAR 0 2
32186: ARRAY
32187: PUSH
32188: LD_INT 1
32190: ARRAY
32191: PPUSH
32192: LD_EXP 127
32196: PUSH
32197: LD_VAR 0 1
32201: ARRAY
32202: PUSH
32203: LD_VAR 0 2
32207: ARRAY
32208: PUSH
32209: LD_INT 2
32211: ARRAY
32212: PPUSH
32213: CALL_OW 458
32217: AND
32218: IFFALSE 32312
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
32220: LD_EXP 127
32224: PUSH
32225: LD_VAR 0 1
32229: ARRAY
32230: PUSH
32231: LD_VAR 0 2
32235: ARRAY
32236: PUSH
32237: LD_INT 1
32239: ARRAY
32240: PPUSH
32241: LD_EXP 127
32245: PUSH
32246: LD_VAR 0 1
32250: ARRAY
32251: PUSH
32252: LD_VAR 0 2
32256: ARRAY
32257: PUSH
32258: LD_INT 2
32260: ARRAY
32261: PPUSH
32262: LD_VAR 0 3
32266: PPUSH
32267: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
32271: LD_ADDR_EXP 127
32275: PUSH
32276: LD_EXP 127
32280: PPUSH
32281: LD_VAR 0 1
32285: PPUSH
32286: LD_EXP 127
32290: PUSH
32291: LD_VAR 0 1
32295: ARRAY
32296: PPUSH
32297: LD_VAR 0 2
32301: PPUSH
32302: CALL_OW 3
32306: PPUSH
32307: CALL_OW 1
32311: ST_TO_ADDR
// end ; end ;
32312: GO 32063
32314: POP
32315: POP
// end ;
32316: GO 31981
32318: POP
32319: POP
// end ;
32320: PPOPN 4
32322: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
32323: LD_INT 0
32325: PPUSH
32326: PPUSH
// result := false ;
32327: LD_ADDR_VAR 0 4
32331: PUSH
32332: LD_INT 0
32334: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
32335: LD_VAR 0 1
32339: PPUSH
32340: CALL_OW 264
32344: PUSH
32345: LD_EXP 136
32349: EQUAL
32350: NOT
32351: IFFALSE 32355
// exit ;
32353: GO 32595
// index := GetElementIndex ( minersList , unit ) ;
32355: LD_ADDR_VAR 0 5
32359: PUSH
32360: LD_EXP 126
32364: PPUSH
32365: LD_VAR 0 1
32369: PPUSH
32370: CALL 38910 0 2
32374: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
32375: LD_EXP 127
32379: PUSH
32380: LD_VAR 0 5
32384: ARRAY
32385: PUSH
32386: LD_EXP 128
32390: GREATEREQUAL
32391: IFFALSE 32395
// exit ;
32393: GO 32595
// ComMoveXY ( unit , x , y ) ;
32395: LD_VAR 0 1
32399: PPUSH
32400: LD_VAR 0 2
32404: PPUSH
32405: LD_VAR 0 3
32409: PPUSH
32410: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
32414: LD_INT 35
32416: PPUSH
32417: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
32421: LD_VAR 0 1
32425: PPUSH
32426: LD_VAR 0 2
32430: PPUSH
32431: LD_VAR 0 3
32435: PPUSH
32436: CALL 69682 0 3
32440: NOT
32441: PUSH
32442: LD_VAR 0 1
32446: PPUSH
32447: CALL_OW 314
32451: AND
32452: IFFALSE 32456
// exit ;
32454: GO 32595
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
32456: LD_VAR 0 2
32460: PPUSH
32461: LD_VAR 0 3
32465: PPUSH
32466: CALL_OW 428
32470: PUSH
32471: LD_VAR 0 1
32475: EQUAL
32476: PUSH
32477: LD_VAR 0 1
32481: PPUSH
32482: CALL_OW 314
32486: NOT
32487: AND
32488: IFFALSE 32414
// PlaySoundXY ( x , y , PlantMine ) ;
32490: LD_VAR 0 2
32494: PPUSH
32495: LD_VAR 0 3
32499: PPUSH
32500: LD_STRING PlantMine
32502: PPUSH
32503: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
32507: LD_VAR 0 2
32511: PPUSH
32512: LD_VAR 0 3
32516: PPUSH
32517: LD_VAR 0 1
32521: PPUSH
32522: CALL_OW 255
32526: PPUSH
32527: LD_INT 0
32529: PPUSH
32530: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
32534: LD_ADDR_EXP 127
32538: PUSH
32539: LD_EXP 127
32543: PPUSH
32544: LD_VAR 0 5
32548: PUSH
32549: LD_EXP 127
32553: PUSH
32554: LD_VAR 0 5
32558: ARRAY
32559: PUSH
32560: LD_INT 1
32562: PLUS
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PPUSH
32568: LD_VAR 0 2
32572: PUSH
32573: LD_VAR 0 3
32577: PUSH
32578: EMPTY
32579: LIST
32580: LIST
32581: PPUSH
32582: CALL 39125 0 3
32586: ST_TO_ADDR
// result := true ;
32587: LD_ADDR_VAR 0 4
32591: PUSH
32592: LD_INT 1
32594: ST_TO_ADDR
// end ;
32595: LD_VAR 0 4
32599: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
32600: LD_INT 0
32602: PPUSH
32603: PPUSH
32604: PPUSH
// if not unit in minersList then
32605: LD_VAR 0 1
32609: PUSH
32610: LD_EXP 126
32614: IN
32615: NOT
32616: IFFALSE 32620
// exit ;
32618: GO 33012
// index := GetElementIndex ( minersList , unit ) ;
32620: LD_ADDR_VAR 0 6
32624: PUSH
32625: LD_EXP 126
32629: PPUSH
32630: LD_VAR 0 1
32634: PPUSH
32635: CALL 38910 0 2
32639: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
32640: LD_ADDR_VAR 0 5
32644: PUSH
32645: DOUBLE
32646: LD_EXP 127
32650: PUSH
32651: LD_VAR 0 6
32655: ARRAY
32656: INC
32657: ST_TO_ADDR
32658: LD_INT 1
32660: PUSH
32661: FOR_DOWNTO
32662: IFFALSE 32823
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
32664: LD_EXP 127
32668: PUSH
32669: LD_VAR 0 6
32673: ARRAY
32674: PUSH
32675: LD_VAR 0 5
32679: ARRAY
32680: PUSH
32681: LD_INT 1
32683: ARRAY
32684: PUSH
32685: LD_VAR 0 2
32689: EQUAL
32690: PUSH
32691: LD_EXP 127
32695: PUSH
32696: LD_VAR 0 6
32700: ARRAY
32701: PUSH
32702: LD_VAR 0 5
32706: ARRAY
32707: PUSH
32708: LD_INT 2
32710: ARRAY
32711: PUSH
32712: LD_VAR 0 3
32716: EQUAL
32717: AND
32718: IFFALSE 32821
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32720: LD_EXP 127
32724: PUSH
32725: LD_VAR 0 6
32729: ARRAY
32730: PUSH
32731: LD_VAR 0 5
32735: ARRAY
32736: PUSH
32737: LD_INT 1
32739: ARRAY
32740: PPUSH
32741: LD_EXP 127
32745: PUSH
32746: LD_VAR 0 6
32750: ARRAY
32751: PUSH
32752: LD_VAR 0 5
32756: ARRAY
32757: PUSH
32758: LD_INT 2
32760: ARRAY
32761: PPUSH
32762: LD_VAR 0 1
32766: PPUSH
32767: CALL_OW 255
32771: PPUSH
32772: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32776: LD_ADDR_EXP 127
32780: PUSH
32781: LD_EXP 127
32785: PPUSH
32786: LD_VAR 0 6
32790: PPUSH
32791: LD_EXP 127
32795: PUSH
32796: LD_VAR 0 6
32800: ARRAY
32801: PPUSH
32802: LD_VAR 0 5
32806: PPUSH
32807: CALL_OW 3
32811: PPUSH
32812: CALL_OW 1
32816: ST_TO_ADDR
// exit ;
32817: POP
32818: POP
32819: GO 33012
// end ; end ;
32821: GO 32661
32823: POP
32824: POP
// for i := minerMinesList [ index ] downto 1 do
32825: LD_ADDR_VAR 0 5
32829: PUSH
32830: DOUBLE
32831: LD_EXP 127
32835: PUSH
32836: LD_VAR 0 6
32840: ARRAY
32841: INC
32842: ST_TO_ADDR
32843: LD_INT 1
32845: PUSH
32846: FOR_DOWNTO
32847: IFFALSE 33010
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
32849: LD_EXP 127
32853: PUSH
32854: LD_VAR 0 6
32858: ARRAY
32859: PUSH
32860: LD_VAR 0 5
32864: ARRAY
32865: PUSH
32866: LD_INT 1
32868: ARRAY
32869: PPUSH
32870: LD_EXP 127
32874: PUSH
32875: LD_VAR 0 6
32879: ARRAY
32880: PUSH
32881: LD_VAR 0 5
32885: ARRAY
32886: PUSH
32887: LD_INT 2
32889: ARRAY
32890: PPUSH
32891: LD_VAR 0 2
32895: PPUSH
32896: LD_VAR 0 3
32900: PPUSH
32901: CALL_OW 298
32905: PUSH
32906: LD_INT 6
32908: LESS
32909: IFFALSE 33008
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
32911: LD_EXP 127
32915: PUSH
32916: LD_VAR 0 6
32920: ARRAY
32921: PUSH
32922: LD_VAR 0 5
32926: ARRAY
32927: PUSH
32928: LD_INT 1
32930: ARRAY
32931: PPUSH
32932: LD_EXP 127
32936: PUSH
32937: LD_VAR 0 6
32941: ARRAY
32942: PUSH
32943: LD_VAR 0 5
32947: ARRAY
32948: PUSH
32949: LD_INT 2
32951: ARRAY
32952: PPUSH
32953: LD_VAR 0 1
32957: PPUSH
32958: CALL_OW 255
32962: PPUSH
32963: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
32967: LD_ADDR_EXP 127
32971: PUSH
32972: LD_EXP 127
32976: PPUSH
32977: LD_VAR 0 6
32981: PPUSH
32982: LD_EXP 127
32986: PUSH
32987: LD_VAR 0 6
32991: ARRAY
32992: PPUSH
32993: LD_VAR 0 5
32997: PPUSH
32998: CALL_OW 3
33002: PPUSH
33003: CALL_OW 1
33007: ST_TO_ADDR
// end ; end ;
33008: GO 32846
33010: POP
33011: POP
// end ;
33012: LD_VAR 0 4
33016: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
33017: LD_INT 0
33019: PPUSH
33020: PPUSH
33021: PPUSH
33022: PPUSH
33023: PPUSH
33024: PPUSH
33025: PPUSH
33026: PPUSH
33027: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
33028: LD_VAR 0 1
33032: PPUSH
33033: CALL_OW 264
33037: PUSH
33038: LD_EXP 136
33042: EQUAL
33043: NOT
33044: PUSH
33045: LD_VAR 0 1
33049: PUSH
33050: LD_EXP 126
33054: IN
33055: NOT
33056: OR
33057: IFFALSE 33061
// exit ;
33059: GO 33383
// index := GetElementIndex ( minersList , unit ) ;
33061: LD_ADDR_VAR 0 6
33065: PUSH
33066: LD_EXP 126
33070: PPUSH
33071: LD_VAR 0 1
33075: PPUSH
33076: CALL 38910 0 2
33080: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
33081: LD_ADDR_VAR 0 8
33085: PUSH
33086: LD_EXP 128
33090: PUSH
33091: LD_EXP 127
33095: PUSH
33096: LD_VAR 0 6
33100: ARRAY
33101: MINUS
33102: ST_TO_ADDR
// if not minesFreeAmount then
33103: LD_VAR 0 8
33107: NOT
33108: IFFALSE 33112
// exit ;
33110: GO 33383
// tmp := [ ] ;
33112: LD_ADDR_VAR 0 7
33116: PUSH
33117: EMPTY
33118: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
33119: LD_ADDR_VAR 0 5
33123: PUSH
33124: DOUBLE
33125: LD_INT 1
33127: DEC
33128: ST_TO_ADDR
33129: LD_VAR 0 8
33133: PUSH
33134: FOR_TO
33135: IFFALSE 33330
// begin _d := rand ( 0 , 5 ) ;
33137: LD_ADDR_VAR 0 11
33141: PUSH
33142: LD_INT 0
33144: PPUSH
33145: LD_INT 5
33147: PPUSH
33148: CALL_OW 12
33152: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
33153: LD_ADDR_VAR 0 12
33157: PUSH
33158: LD_INT 2
33160: PPUSH
33161: LD_INT 6
33163: PPUSH
33164: CALL_OW 12
33168: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
33169: LD_ADDR_VAR 0 9
33173: PUSH
33174: LD_VAR 0 2
33178: PPUSH
33179: LD_VAR 0 11
33183: PPUSH
33184: LD_VAR 0 12
33188: PPUSH
33189: CALL_OW 272
33193: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
33194: LD_ADDR_VAR 0 10
33198: PUSH
33199: LD_VAR 0 3
33203: PPUSH
33204: LD_VAR 0 11
33208: PPUSH
33209: LD_VAR 0 12
33213: PPUSH
33214: CALL_OW 273
33218: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
33219: LD_VAR 0 9
33223: PPUSH
33224: LD_VAR 0 10
33228: PPUSH
33229: CALL_OW 488
33233: PUSH
33234: LD_VAR 0 9
33238: PUSH
33239: LD_VAR 0 10
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: PUSH
33248: LD_VAR 0 7
33252: IN
33253: NOT
33254: AND
33255: PUSH
33256: LD_VAR 0 9
33260: PPUSH
33261: LD_VAR 0 10
33265: PPUSH
33266: CALL_OW 458
33270: NOT
33271: AND
33272: IFFALSE 33314
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
33274: LD_ADDR_VAR 0 7
33278: PUSH
33279: LD_VAR 0 7
33283: PPUSH
33284: LD_VAR 0 7
33288: PUSH
33289: LD_INT 1
33291: PLUS
33292: PPUSH
33293: LD_VAR 0 9
33297: PUSH
33298: LD_VAR 0 10
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PPUSH
33307: CALL_OW 1
33311: ST_TO_ADDR
33312: GO 33328
// i := i - 1 ;
33314: LD_ADDR_VAR 0 5
33318: PUSH
33319: LD_VAR 0 5
33323: PUSH
33324: LD_INT 1
33326: MINUS
33327: ST_TO_ADDR
// end ;
33328: GO 33134
33330: POP
33331: POP
// for i in tmp do
33332: LD_ADDR_VAR 0 5
33336: PUSH
33337: LD_VAR 0 7
33341: PUSH
33342: FOR_IN
33343: IFFALSE 33381
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
33345: LD_VAR 0 1
33349: PPUSH
33350: LD_VAR 0 5
33354: PUSH
33355: LD_INT 1
33357: ARRAY
33358: PPUSH
33359: LD_VAR 0 5
33363: PUSH
33364: LD_INT 2
33366: ARRAY
33367: PPUSH
33368: CALL 32323 0 3
33372: NOT
33373: IFFALSE 33379
// exit ;
33375: POP
33376: POP
33377: GO 33383
33379: GO 33342
33381: POP
33382: POP
// end ;
33383: LD_VAR 0 4
33387: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
// if not GetClass ( unit ) = class_sniper then
33397: LD_VAR 0 1
33401: PPUSH
33402: CALL_OW 257
33406: PUSH
33407: LD_INT 5
33409: EQUAL
33410: NOT
33411: IFFALSE 33415
// exit ;
33413: GO 33803
// dist := 8 ;
33415: LD_ADDR_VAR 0 5
33419: PUSH
33420: LD_INT 8
33422: ST_TO_ADDR
// viewRange := 12 ;
33423: LD_ADDR_VAR 0 7
33427: PUSH
33428: LD_INT 12
33430: ST_TO_ADDR
// side := GetSide ( unit ) ;
33431: LD_ADDR_VAR 0 6
33435: PUSH
33436: LD_VAR 0 1
33440: PPUSH
33441: CALL_OW 255
33445: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
33446: LD_INT 61
33448: PPUSH
33449: LD_VAR 0 6
33453: PPUSH
33454: CALL_OW 321
33458: PUSH
33459: LD_INT 2
33461: EQUAL
33462: IFFALSE 33472
// viewRange := 16 ;
33464: LD_ADDR_VAR 0 7
33468: PUSH
33469: LD_INT 16
33471: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
33472: LD_VAR 0 1
33476: PPUSH
33477: LD_VAR 0 2
33481: PPUSH
33482: LD_VAR 0 3
33486: PPUSH
33487: CALL_OW 297
33491: PUSH
33492: LD_VAR 0 5
33496: GREATER
33497: IFFALSE 33576
// begin ComMoveXY ( unit , x , y ) ;
33499: LD_VAR 0 1
33503: PPUSH
33504: LD_VAR 0 2
33508: PPUSH
33509: LD_VAR 0 3
33513: PPUSH
33514: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33518: LD_INT 35
33520: PPUSH
33521: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
33525: LD_VAR 0 1
33529: PPUSH
33530: LD_VAR 0 2
33534: PPUSH
33535: LD_VAR 0 3
33539: PPUSH
33540: CALL 69682 0 3
33544: NOT
33545: IFFALSE 33549
// exit ;
33547: GO 33803
// until GetDistUnitXY ( unit , x , y ) < dist ;
33549: LD_VAR 0 1
33553: PPUSH
33554: LD_VAR 0 2
33558: PPUSH
33559: LD_VAR 0 3
33563: PPUSH
33564: CALL_OW 297
33568: PUSH
33569: LD_VAR 0 5
33573: LESS
33574: IFFALSE 33518
// end ; ComTurnXY ( unit , x , y ) ;
33576: LD_VAR 0 1
33580: PPUSH
33581: LD_VAR 0 2
33585: PPUSH
33586: LD_VAR 0 3
33590: PPUSH
33591: CALL_OW 118
// wait ( 5 ) ;
33595: LD_INT 5
33597: PPUSH
33598: CALL_OW 67
// _d := GetDir ( unit ) ;
33602: LD_ADDR_VAR 0 10
33606: PUSH
33607: LD_VAR 0 1
33611: PPUSH
33612: CALL_OW 254
33616: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
33617: LD_ADDR_VAR 0 8
33621: PUSH
33622: LD_VAR 0 1
33626: PPUSH
33627: CALL_OW 250
33631: PPUSH
33632: LD_VAR 0 10
33636: PPUSH
33637: LD_VAR 0 5
33641: PPUSH
33642: CALL_OW 272
33646: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
33647: LD_ADDR_VAR 0 9
33651: PUSH
33652: LD_VAR 0 1
33656: PPUSH
33657: CALL_OW 251
33661: PPUSH
33662: LD_VAR 0 10
33666: PPUSH
33667: LD_VAR 0 5
33671: PPUSH
33672: CALL_OW 273
33676: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33677: LD_VAR 0 8
33681: PPUSH
33682: LD_VAR 0 9
33686: PPUSH
33687: CALL_OW 488
33691: NOT
33692: IFFALSE 33696
// exit ;
33694: GO 33803
// ComAnimCustom ( unit , 1 ) ;
33696: LD_VAR 0 1
33700: PPUSH
33701: LD_INT 1
33703: PPUSH
33704: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
33708: LD_VAR 0 8
33712: PPUSH
33713: LD_VAR 0 9
33717: PPUSH
33718: LD_VAR 0 6
33722: PPUSH
33723: LD_VAR 0 7
33727: PPUSH
33728: CALL_OW 330
// repeat wait ( 1 ) ;
33732: LD_INT 1
33734: PPUSH
33735: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
33739: LD_VAR 0 1
33743: PPUSH
33744: CALL_OW 316
33748: PUSH
33749: LD_VAR 0 1
33753: PPUSH
33754: CALL_OW 314
33758: OR
33759: PUSH
33760: LD_VAR 0 1
33764: PPUSH
33765: CALL_OW 302
33769: NOT
33770: OR
33771: PUSH
33772: LD_VAR 0 1
33776: PPUSH
33777: CALL_OW 301
33781: OR
33782: IFFALSE 33732
// RemoveSeeing ( _x , _y , side ) ;
33784: LD_VAR 0 8
33788: PPUSH
33789: LD_VAR 0 9
33793: PPUSH
33794: LD_VAR 0 6
33798: PPUSH
33799: CALL_OW 331
// end ; end_of_file
33803: LD_VAR 0 4
33807: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
33808: LD_VAR 0 1
33812: PUSH
33813: LD_INT 200
33815: DOUBLE
33816: GREATEREQUAL
33817: IFFALSE 33825
33819: LD_INT 299
33821: DOUBLE
33822: LESSEQUAL
33823: IFTRUE 33827
33825: GO 33859
33827: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
33828: LD_VAR 0 1
33832: PPUSH
33833: LD_VAR 0 2
33837: PPUSH
33838: LD_VAR 0 3
33842: PPUSH
33843: LD_VAR 0 4
33847: PPUSH
33848: LD_VAR 0 5
33852: PPUSH
33853: CALL 29546 0 5
33857: GO 33936
33859: LD_INT 300
33861: DOUBLE
33862: GREATEREQUAL
33863: IFFALSE 33871
33865: LD_INT 399
33867: DOUBLE
33868: LESSEQUAL
33869: IFTRUE 33873
33871: GO 33935
33873: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
33874: LD_VAR 0 1
33878: PPUSH
33879: LD_VAR 0 2
33883: PPUSH
33884: LD_VAR 0 3
33888: PPUSH
33889: LD_VAR 0 4
33893: PPUSH
33894: LD_VAR 0 5
33898: PPUSH
33899: LD_VAR 0 6
33903: PPUSH
33904: LD_VAR 0 7
33908: PPUSH
33909: LD_VAR 0 8
33913: PPUSH
33914: LD_VAR 0 9
33918: PPUSH
33919: LD_VAR 0 10
33923: PPUSH
33924: LD_VAR 0 11
33928: PPUSH
33929: CALL 27188 0 11
33933: GO 33936
33935: POP
// end ;
33936: PPOPN 11
33938: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
33939: LD_VAR 0 1
33943: PPUSH
33944: LD_VAR 0 2
33948: PPUSH
33949: LD_VAR 0 3
33953: PPUSH
33954: LD_VAR 0 4
33958: PPUSH
33959: LD_VAR 0 5
33963: PPUSH
33964: CALL 29282 0 5
// end ; end_of_file end_of_file
33968: PPOPN 5
33970: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
33971: LD_INT 0
33973: PPUSH
// ar_miner := 81 ;
33974: LD_ADDR_EXP 136
33978: PUSH
33979: LD_INT 81
33981: ST_TO_ADDR
// ar_crane := 88 ;
33982: LD_ADDR_EXP 135
33986: PUSH
33987: LD_INT 88
33989: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
33990: LD_ADDR_EXP 130
33994: PUSH
33995: LD_INT 89
33997: ST_TO_ADDR
// us_hack := 99 ;
33998: LD_ADDR_EXP 131
34002: PUSH
34003: LD_INT 99
34005: ST_TO_ADDR
// us_artillery := 97 ;
34006: LD_ADDR_EXP 132
34010: PUSH
34011: LD_INT 97
34013: ST_TO_ADDR
// ar_bio_bomb := 91 ;
34014: LD_ADDR_EXP 133
34018: PUSH
34019: LD_INT 91
34021: ST_TO_ADDR
// ar_mortar := 92 ;
34022: LD_ADDR_EXP 134
34026: PUSH
34027: LD_INT 92
34029: ST_TO_ADDR
// ru_radar := 98 ;
34030: LD_ADDR_EXP 129
34034: PUSH
34035: LD_INT 98
34037: ST_TO_ADDR
// tech_Artillery := 80 ;
34038: LD_ADDR_EXP 137
34042: PUSH
34043: LD_INT 80
34045: ST_TO_ADDR
// tech_RadMat := 81 ;
34046: LD_ADDR_EXP 138
34050: PUSH
34051: LD_INT 81
34053: ST_TO_ADDR
// tech_BasicTools := 82 ;
34054: LD_ADDR_EXP 139
34058: PUSH
34059: LD_INT 82
34061: ST_TO_ADDR
// tech_Cargo := 83 ;
34062: LD_ADDR_EXP 140
34066: PUSH
34067: LD_INT 83
34069: ST_TO_ADDR
// tech_Track := 84 ;
34070: LD_ADDR_EXP 141
34074: PUSH
34075: LD_INT 84
34077: ST_TO_ADDR
// tech_Crane := 85 ;
34078: LD_ADDR_EXP 142
34082: PUSH
34083: LD_INT 85
34085: ST_TO_ADDR
// tech_Bulldozer := 86 ;
34086: LD_ADDR_EXP 143
34090: PUSH
34091: LD_INT 86
34093: ST_TO_ADDR
// tech_Hovercraft := 87 ;
34094: LD_ADDR_EXP 144
34098: PUSH
34099: LD_INT 87
34101: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
34102: LD_ADDR_EXP 145
34106: PUSH
34107: LD_INT 88
34109: ST_TO_ADDR
// class_mastodont := 31 ;
34110: LD_ADDR_EXP 146
34114: PUSH
34115: LD_INT 31
34117: ST_TO_ADDR
// class_horse := 21 ;
34118: LD_ADDR_EXP 147
34122: PUSH
34123: LD_INT 21
34125: ST_TO_ADDR
// end ;
34126: LD_VAR 0 1
34130: RET
// every 1 do
34131: GO 34133
34133: DISABLE
// InitGlobalVariables ; end_of_file
34134: CALL 33971 0 0
34138: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
34139: LD_INT 0
34141: PPUSH
34142: PPUSH
// if exist_mode then
34143: LD_VAR 0 2
34147: IFFALSE 34172
// unit := CreateCharacter ( prefix & ident ) else
34149: LD_ADDR_VAR 0 5
34153: PUSH
34154: LD_VAR 0 3
34158: PUSH
34159: LD_VAR 0 1
34163: STR
34164: PPUSH
34165: CALL_OW 34
34169: ST_TO_ADDR
34170: GO 34187
// unit := NewCharacter ( ident ) ;
34172: LD_ADDR_VAR 0 5
34176: PUSH
34177: LD_VAR 0 1
34181: PPUSH
34182: CALL_OW 25
34186: ST_TO_ADDR
// result := unit ;
34187: LD_ADDR_VAR 0 4
34191: PUSH
34192: LD_VAR 0 5
34196: ST_TO_ADDR
// end ;
34197: LD_VAR 0 4
34201: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
34202: LD_INT 0
34204: PPUSH
34205: PPUSH
// if not side or not nation then
34206: LD_VAR 0 1
34210: NOT
34211: PUSH
34212: LD_VAR 0 2
34216: NOT
34217: OR
34218: IFFALSE 34222
// exit ;
34220: GO 34990
// case nation of nation_american :
34222: LD_VAR 0 2
34226: PUSH
34227: LD_INT 1
34229: DOUBLE
34230: EQUAL
34231: IFTRUE 34235
34233: GO 34449
34235: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
34236: LD_ADDR_VAR 0 4
34240: PUSH
34241: LD_INT 35
34243: PUSH
34244: LD_INT 45
34246: PUSH
34247: LD_INT 46
34249: PUSH
34250: LD_INT 47
34252: PUSH
34253: LD_INT 82
34255: PUSH
34256: LD_INT 83
34258: PUSH
34259: LD_INT 84
34261: PUSH
34262: LD_INT 85
34264: PUSH
34265: LD_INT 86
34267: PUSH
34268: LD_INT 1
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 6
34276: PUSH
34277: LD_INT 15
34279: PUSH
34280: LD_INT 16
34282: PUSH
34283: LD_INT 7
34285: PUSH
34286: LD_INT 12
34288: PUSH
34289: LD_INT 13
34291: PUSH
34292: LD_INT 10
34294: PUSH
34295: LD_INT 14
34297: PUSH
34298: LD_INT 20
34300: PUSH
34301: LD_INT 21
34303: PUSH
34304: LD_INT 22
34306: PUSH
34307: LD_INT 25
34309: PUSH
34310: LD_INT 32
34312: PUSH
34313: LD_INT 27
34315: PUSH
34316: LD_INT 36
34318: PUSH
34319: LD_INT 69
34321: PUSH
34322: LD_INT 39
34324: PUSH
34325: LD_INT 34
34327: PUSH
34328: LD_INT 40
34330: PUSH
34331: LD_INT 48
34333: PUSH
34334: LD_INT 49
34336: PUSH
34337: LD_INT 50
34339: PUSH
34340: LD_INT 51
34342: PUSH
34343: LD_INT 52
34345: PUSH
34346: LD_INT 53
34348: PUSH
34349: LD_INT 54
34351: PUSH
34352: LD_INT 55
34354: PUSH
34355: LD_INT 56
34357: PUSH
34358: LD_INT 57
34360: PUSH
34361: LD_INT 58
34363: PUSH
34364: LD_INT 59
34366: PUSH
34367: LD_INT 60
34369: PUSH
34370: LD_INT 61
34372: PUSH
34373: LD_INT 62
34375: PUSH
34376: LD_INT 80
34378: PUSH
34379: LD_INT 82
34381: PUSH
34382: LD_INT 83
34384: PUSH
34385: LD_INT 84
34387: PUSH
34388: LD_INT 85
34390: PUSH
34391: LD_INT 86
34393: PUSH
34394: EMPTY
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: LIST
34445: LIST
34446: ST_TO_ADDR
34447: GO 34914
34449: LD_INT 2
34451: DOUBLE
34452: EQUAL
34453: IFTRUE 34457
34455: GO 34683
34457: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
34458: LD_ADDR_VAR 0 4
34462: PUSH
34463: LD_INT 35
34465: PUSH
34466: LD_INT 45
34468: PUSH
34469: LD_INT 46
34471: PUSH
34472: LD_INT 47
34474: PUSH
34475: LD_INT 82
34477: PUSH
34478: LD_INT 83
34480: PUSH
34481: LD_INT 84
34483: PUSH
34484: LD_INT 85
34486: PUSH
34487: LD_INT 87
34489: PUSH
34490: LD_INT 70
34492: PUSH
34493: LD_INT 1
34495: PUSH
34496: LD_INT 11
34498: PUSH
34499: LD_INT 3
34501: PUSH
34502: LD_INT 4
34504: PUSH
34505: LD_INT 5
34507: PUSH
34508: LD_INT 6
34510: PUSH
34511: LD_INT 15
34513: PUSH
34514: LD_INT 18
34516: PUSH
34517: LD_INT 7
34519: PUSH
34520: LD_INT 17
34522: PUSH
34523: LD_INT 8
34525: PUSH
34526: LD_INT 20
34528: PUSH
34529: LD_INT 21
34531: PUSH
34532: LD_INT 22
34534: PUSH
34535: LD_INT 72
34537: PUSH
34538: LD_INT 26
34540: PUSH
34541: LD_INT 69
34543: PUSH
34544: LD_INT 39
34546: PUSH
34547: LD_INT 40
34549: PUSH
34550: LD_INT 41
34552: PUSH
34553: LD_INT 42
34555: PUSH
34556: LD_INT 43
34558: PUSH
34559: LD_INT 48
34561: PUSH
34562: LD_INT 49
34564: PUSH
34565: LD_INT 50
34567: PUSH
34568: LD_INT 51
34570: PUSH
34571: LD_INT 52
34573: PUSH
34574: LD_INT 53
34576: PUSH
34577: LD_INT 54
34579: PUSH
34580: LD_INT 55
34582: PUSH
34583: LD_INT 56
34585: PUSH
34586: LD_INT 60
34588: PUSH
34589: LD_INT 61
34591: PUSH
34592: LD_INT 62
34594: PUSH
34595: LD_INT 66
34597: PUSH
34598: LD_INT 67
34600: PUSH
34601: LD_INT 68
34603: PUSH
34604: LD_INT 81
34606: PUSH
34607: LD_INT 82
34609: PUSH
34610: LD_INT 83
34612: PUSH
34613: LD_INT 84
34615: PUSH
34616: LD_INT 85
34618: PUSH
34619: LD_INT 87
34621: PUSH
34622: LD_INT 88
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: LIST
34664: LIST
34665: LIST
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: LIST
34676: LIST
34677: LIST
34678: LIST
34679: LIST
34680: ST_TO_ADDR
34681: GO 34914
34683: LD_INT 3
34685: DOUBLE
34686: EQUAL
34687: IFTRUE 34691
34689: GO 34913
34691: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
34692: LD_ADDR_VAR 0 4
34696: PUSH
34697: LD_INT 46
34699: PUSH
34700: LD_INT 47
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: LD_INT 2
34708: PUSH
34709: LD_INT 82
34711: PUSH
34712: LD_INT 83
34714: PUSH
34715: LD_INT 84
34717: PUSH
34718: LD_INT 85
34720: PUSH
34721: LD_INT 86
34723: PUSH
34724: LD_INT 11
34726: PUSH
34727: LD_INT 9
34729: PUSH
34730: LD_INT 20
34732: PUSH
34733: LD_INT 19
34735: PUSH
34736: LD_INT 21
34738: PUSH
34739: LD_INT 24
34741: PUSH
34742: LD_INT 22
34744: PUSH
34745: LD_INT 25
34747: PUSH
34748: LD_INT 28
34750: PUSH
34751: LD_INT 29
34753: PUSH
34754: LD_INT 30
34756: PUSH
34757: LD_INT 31
34759: PUSH
34760: LD_INT 37
34762: PUSH
34763: LD_INT 38
34765: PUSH
34766: LD_INT 32
34768: PUSH
34769: LD_INT 27
34771: PUSH
34772: LD_INT 33
34774: PUSH
34775: LD_INT 69
34777: PUSH
34778: LD_INT 39
34780: PUSH
34781: LD_INT 34
34783: PUSH
34784: LD_INT 40
34786: PUSH
34787: LD_INT 71
34789: PUSH
34790: LD_INT 23
34792: PUSH
34793: LD_INT 44
34795: PUSH
34796: LD_INT 48
34798: PUSH
34799: LD_INT 49
34801: PUSH
34802: LD_INT 50
34804: PUSH
34805: LD_INT 51
34807: PUSH
34808: LD_INT 52
34810: PUSH
34811: LD_INT 53
34813: PUSH
34814: LD_INT 54
34816: PUSH
34817: LD_INT 55
34819: PUSH
34820: LD_INT 56
34822: PUSH
34823: LD_INT 57
34825: PUSH
34826: LD_INT 58
34828: PUSH
34829: LD_INT 59
34831: PUSH
34832: LD_INT 63
34834: PUSH
34835: LD_INT 64
34837: PUSH
34838: LD_INT 65
34840: PUSH
34841: LD_INT 82
34843: PUSH
34844: LD_INT 83
34846: PUSH
34847: LD_INT 84
34849: PUSH
34850: LD_INT 85
34852: PUSH
34853: LD_INT 86
34855: PUSH
34856: EMPTY
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: LIST
34868: LIST
34869: LIST
34870: LIST
34871: LIST
34872: LIST
34873: LIST
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: LIST
34891: LIST
34892: LIST
34893: LIST
34894: LIST
34895: LIST
34896: LIST
34897: LIST
34898: LIST
34899: LIST
34900: LIST
34901: LIST
34902: LIST
34903: LIST
34904: LIST
34905: LIST
34906: LIST
34907: LIST
34908: LIST
34909: LIST
34910: ST_TO_ADDR
34911: GO 34914
34913: POP
// if state > - 1 and state < 3 then
34914: LD_VAR 0 3
34918: PUSH
34919: LD_INT 1
34921: NEG
34922: GREATER
34923: PUSH
34924: LD_VAR 0 3
34928: PUSH
34929: LD_INT 3
34931: LESS
34932: AND
34933: IFFALSE 34990
// for i in result do
34935: LD_ADDR_VAR 0 5
34939: PUSH
34940: LD_VAR 0 4
34944: PUSH
34945: FOR_IN
34946: IFFALSE 34988
// if GetTech ( i , side ) <> state then
34948: LD_VAR 0 5
34952: PPUSH
34953: LD_VAR 0 1
34957: PPUSH
34958: CALL_OW 321
34962: PUSH
34963: LD_VAR 0 3
34967: NONEQUAL
34968: IFFALSE 34986
// result := result diff i ;
34970: LD_ADDR_VAR 0 4
34974: PUSH
34975: LD_VAR 0 4
34979: PUSH
34980: LD_VAR 0 5
34984: DIFF
34985: ST_TO_ADDR
34986: GO 34945
34988: POP
34989: POP
// end ;
34990: LD_VAR 0 4
34994: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
34995: LD_INT 0
34997: PPUSH
34998: PPUSH
34999: PPUSH
// result := true ;
35000: LD_ADDR_VAR 0 3
35004: PUSH
35005: LD_INT 1
35007: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35008: LD_ADDR_VAR 0 5
35012: PUSH
35013: LD_VAR 0 2
35017: PPUSH
35018: CALL_OW 480
35022: ST_TO_ADDR
// if not tmp then
35023: LD_VAR 0 5
35027: NOT
35028: IFFALSE 35032
// exit ;
35030: GO 35081
// for i in tmp do
35032: LD_ADDR_VAR 0 4
35036: PUSH
35037: LD_VAR 0 5
35041: PUSH
35042: FOR_IN
35043: IFFALSE 35079
// if GetTech ( i , side ) <> state_researched then
35045: LD_VAR 0 4
35049: PPUSH
35050: LD_VAR 0 1
35054: PPUSH
35055: CALL_OW 321
35059: PUSH
35060: LD_INT 2
35062: NONEQUAL
35063: IFFALSE 35077
// begin result := false ;
35065: LD_ADDR_VAR 0 3
35069: PUSH
35070: LD_INT 0
35072: ST_TO_ADDR
// exit ;
35073: POP
35074: POP
35075: GO 35081
// end ;
35077: GO 35042
35079: POP
35080: POP
// end ;
35081: LD_VAR 0 3
35085: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
35086: LD_INT 0
35088: PPUSH
35089: PPUSH
35090: PPUSH
35091: PPUSH
35092: PPUSH
35093: PPUSH
35094: PPUSH
35095: PPUSH
35096: PPUSH
35097: PPUSH
35098: PPUSH
35099: PPUSH
35100: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
35101: LD_VAR 0 1
35105: NOT
35106: PUSH
35107: LD_VAR 0 1
35111: PPUSH
35112: CALL_OW 257
35116: PUSH
35117: LD_INT 9
35119: NONEQUAL
35120: OR
35121: IFFALSE 35125
// exit ;
35123: GO 35698
// side := GetSide ( unit ) ;
35125: LD_ADDR_VAR 0 9
35129: PUSH
35130: LD_VAR 0 1
35134: PPUSH
35135: CALL_OW 255
35139: ST_TO_ADDR
// tech_space := tech_spacanom ;
35140: LD_ADDR_VAR 0 12
35144: PUSH
35145: LD_INT 29
35147: ST_TO_ADDR
// tech_time := tech_taurad ;
35148: LD_ADDR_VAR 0 13
35152: PUSH
35153: LD_INT 28
35155: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
35156: LD_ADDR_VAR 0 11
35160: PUSH
35161: LD_VAR 0 1
35165: PPUSH
35166: CALL_OW 310
35170: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
35171: LD_VAR 0 11
35175: PPUSH
35176: CALL_OW 247
35180: PUSH
35181: LD_INT 2
35183: EQUAL
35184: IFFALSE 35188
// exit ;
35186: GO 35698
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
35188: LD_ADDR_VAR 0 8
35192: PUSH
35193: LD_INT 81
35195: PUSH
35196: LD_VAR 0 9
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 3
35207: PUSH
35208: LD_INT 21
35210: PUSH
35211: LD_INT 3
35213: PUSH
35214: EMPTY
35215: LIST
35216: LIST
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PPUSH
35226: CALL_OW 69
35230: ST_TO_ADDR
// if not tmp then
35231: LD_VAR 0 8
35235: NOT
35236: IFFALSE 35240
// exit ;
35238: GO 35698
// if in_unit then
35240: LD_VAR 0 11
35244: IFFALSE 35268
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
35246: LD_ADDR_VAR 0 10
35250: PUSH
35251: LD_VAR 0 8
35255: PPUSH
35256: LD_VAR 0 11
35260: PPUSH
35261: CALL_OW 74
35265: ST_TO_ADDR
35266: GO 35288
// enemy := NearestUnitToUnit ( tmp , unit ) ;
35268: LD_ADDR_VAR 0 10
35272: PUSH
35273: LD_VAR 0 8
35277: PPUSH
35278: LD_VAR 0 1
35282: PPUSH
35283: CALL_OW 74
35287: ST_TO_ADDR
// if not enemy then
35288: LD_VAR 0 10
35292: NOT
35293: IFFALSE 35297
// exit ;
35295: GO 35698
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
35297: LD_VAR 0 11
35301: PUSH
35302: LD_VAR 0 11
35306: PPUSH
35307: LD_VAR 0 10
35311: PPUSH
35312: CALL_OW 296
35316: PUSH
35317: LD_INT 13
35319: GREATER
35320: AND
35321: PUSH
35322: LD_VAR 0 1
35326: PPUSH
35327: LD_VAR 0 10
35331: PPUSH
35332: CALL_OW 296
35336: PUSH
35337: LD_INT 12
35339: GREATER
35340: OR
35341: IFFALSE 35345
// exit ;
35343: GO 35698
// missile := [ 1 ] ;
35345: LD_ADDR_VAR 0 14
35349: PUSH
35350: LD_INT 1
35352: PUSH
35353: EMPTY
35354: LIST
35355: ST_TO_ADDR
// if Researched ( side , tech_space ) then
35356: LD_VAR 0 9
35360: PPUSH
35361: LD_VAR 0 12
35365: PPUSH
35366: CALL_OW 325
35370: IFFALSE 35399
// missile := Insert ( missile , missile + 1 , 2 ) ;
35372: LD_ADDR_VAR 0 14
35376: PUSH
35377: LD_VAR 0 14
35381: PPUSH
35382: LD_VAR 0 14
35386: PUSH
35387: LD_INT 1
35389: PLUS
35390: PPUSH
35391: LD_INT 2
35393: PPUSH
35394: CALL_OW 2
35398: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
35399: LD_VAR 0 9
35403: PPUSH
35404: LD_VAR 0 13
35408: PPUSH
35409: CALL_OW 325
35413: PUSH
35414: LD_VAR 0 10
35418: PPUSH
35419: CALL_OW 255
35423: PPUSH
35424: LD_VAR 0 13
35428: PPUSH
35429: CALL_OW 325
35433: NOT
35434: AND
35435: IFFALSE 35464
// missile := Insert ( missile , missile + 1 , 3 ) ;
35437: LD_ADDR_VAR 0 14
35441: PUSH
35442: LD_VAR 0 14
35446: PPUSH
35447: LD_VAR 0 14
35451: PUSH
35452: LD_INT 1
35454: PLUS
35455: PPUSH
35456: LD_INT 3
35458: PPUSH
35459: CALL_OW 2
35463: ST_TO_ADDR
// if missile < 2 then
35464: LD_VAR 0 14
35468: PUSH
35469: LD_INT 2
35471: LESS
35472: IFFALSE 35476
// exit ;
35474: GO 35698
// x := GetX ( enemy ) ;
35476: LD_ADDR_VAR 0 4
35480: PUSH
35481: LD_VAR 0 10
35485: PPUSH
35486: CALL_OW 250
35490: ST_TO_ADDR
// y := GetY ( enemy ) ;
35491: LD_ADDR_VAR 0 5
35495: PUSH
35496: LD_VAR 0 10
35500: PPUSH
35501: CALL_OW 251
35505: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
35506: LD_ADDR_VAR 0 6
35510: PUSH
35511: LD_VAR 0 4
35515: PUSH
35516: LD_INT 1
35518: NEG
35519: PPUSH
35520: LD_INT 1
35522: PPUSH
35523: CALL_OW 12
35527: PLUS
35528: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
35529: LD_ADDR_VAR 0 7
35533: PUSH
35534: LD_VAR 0 5
35538: PUSH
35539: LD_INT 1
35541: NEG
35542: PPUSH
35543: LD_INT 1
35545: PPUSH
35546: CALL_OW 12
35550: PLUS
35551: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35552: LD_VAR 0 6
35556: PPUSH
35557: LD_VAR 0 7
35561: PPUSH
35562: CALL_OW 488
35566: NOT
35567: IFFALSE 35589
// begin _x := x ;
35569: LD_ADDR_VAR 0 6
35573: PUSH
35574: LD_VAR 0 4
35578: ST_TO_ADDR
// _y := y ;
35579: LD_ADDR_VAR 0 7
35583: PUSH
35584: LD_VAR 0 5
35588: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
35589: LD_ADDR_VAR 0 3
35593: PUSH
35594: LD_INT 1
35596: PPUSH
35597: LD_VAR 0 14
35601: PPUSH
35602: CALL_OW 12
35606: ST_TO_ADDR
// case i of 1 :
35607: LD_VAR 0 3
35611: PUSH
35612: LD_INT 1
35614: DOUBLE
35615: EQUAL
35616: IFTRUE 35620
35618: GO 35637
35620: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
35621: LD_VAR 0 1
35625: PPUSH
35626: LD_VAR 0 10
35630: PPUSH
35631: CALL_OW 115
35635: GO 35698
35637: LD_INT 2
35639: DOUBLE
35640: EQUAL
35641: IFTRUE 35645
35643: GO 35667
35645: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
35646: LD_VAR 0 1
35650: PPUSH
35651: LD_VAR 0 6
35655: PPUSH
35656: LD_VAR 0 7
35660: PPUSH
35661: CALL_OW 153
35665: GO 35698
35667: LD_INT 3
35669: DOUBLE
35670: EQUAL
35671: IFTRUE 35675
35673: GO 35697
35675: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
35676: LD_VAR 0 1
35680: PPUSH
35681: LD_VAR 0 6
35685: PPUSH
35686: LD_VAR 0 7
35690: PPUSH
35691: CALL_OW 154
35695: GO 35698
35697: POP
// end ;
35698: LD_VAR 0 2
35702: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
35703: LD_INT 0
35705: PPUSH
35706: PPUSH
35707: PPUSH
35708: PPUSH
35709: PPUSH
35710: PPUSH
// if not unit or not building then
35711: LD_VAR 0 1
35715: NOT
35716: PUSH
35717: LD_VAR 0 2
35721: NOT
35722: OR
35723: IFFALSE 35727
// exit ;
35725: GO 35885
// x := GetX ( building ) ;
35727: LD_ADDR_VAR 0 5
35731: PUSH
35732: LD_VAR 0 2
35736: PPUSH
35737: CALL_OW 250
35741: ST_TO_ADDR
// y := GetY ( building ) ;
35742: LD_ADDR_VAR 0 6
35746: PUSH
35747: LD_VAR 0 2
35751: PPUSH
35752: CALL_OW 251
35756: ST_TO_ADDR
// for i = 0 to 5 do
35757: LD_ADDR_VAR 0 4
35761: PUSH
35762: DOUBLE
35763: LD_INT 0
35765: DEC
35766: ST_TO_ADDR
35767: LD_INT 5
35769: PUSH
35770: FOR_TO
35771: IFFALSE 35883
// begin _x := ShiftX ( x , i , 3 ) ;
35773: LD_ADDR_VAR 0 7
35777: PUSH
35778: LD_VAR 0 5
35782: PPUSH
35783: LD_VAR 0 4
35787: PPUSH
35788: LD_INT 3
35790: PPUSH
35791: CALL_OW 272
35795: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
35796: LD_ADDR_VAR 0 8
35800: PUSH
35801: LD_VAR 0 6
35805: PPUSH
35806: LD_VAR 0 4
35810: PPUSH
35811: LD_INT 3
35813: PPUSH
35814: CALL_OW 273
35818: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
35819: LD_VAR 0 7
35823: PPUSH
35824: LD_VAR 0 8
35828: PPUSH
35829: CALL_OW 488
35833: NOT
35834: IFFALSE 35838
// continue ;
35836: GO 35770
// if HexInfo ( _x , _y ) = 0 then
35838: LD_VAR 0 7
35842: PPUSH
35843: LD_VAR 0 8
35847: PPUSH
35848: CALL_OW 428
35852: PUSH
35853: LD_INT 0
35855: EQUAL
35856: IFFALSE 35881
// begin ComMoveXY ( unit , _x , _y ) ;
35858: LD_VAR 0 1
35862: PPUSH
35863: LD_VAR 0 7
35867: PPUSH
35868: LD_VAR 0 8
35872: PPUSH
35873: CALL_OW 111
// exit ;
35877: POP
35878: POP
35879: GO 35885
// end ; end ;
35881: GO 35770
35883: POP
35884: POP
// end ;
35885: LD_VAR 0 3
35889: RET
// export function ScanBase ( side , base_area ) ; begin
35890: LD_INT 0
35892: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
35893: LD_ADDR_VAR 0 3
35897: PUSH
35898: LD_VAR 0 2
35902: PPUSH
35903: LD_INT 81
35905: PUSH
35906: LD_VAR 0 1
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PPUSH
35915: CALL_OW 70
35919: ST_TO_ADDR
// end ;
35920: LD_VAR 0 3
35924: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
35925: LD_INT 0
35927: PPUSH
35928: PPUSH
35929: PPUSH
35930: PPUSH
// result := false ;
35931: LD_ADDR_VAR 0 2
35935: PUSH
35936: LD_INT 0
35938: ST_TO_ADDR
// side := GetSide ( unit ) ;
35939: LD_ADDR_VAR 0 3
35943: PUSH
35944: LD_VAR 0 1
35948: PPUSH
35949: CALL_OW 255
35953: ST_TO_ADDR
// nat := GetNation ( unit ) ;
35954: LD_ADDR_VAR 0 4
35958: PUSH
35959: LD_VAR 0 1
35963: PPUSH
35964: CALL_OW 248
35968: ST_TO_ADDR
// case nat of 1 :
35969: LD_VAR 0 4
35973: PUSH
35974: LD_INT 1
35976: DOUBLE
35977: EQUAL
35978: IFTRUE 35982
35980: GO 35993
35982: POP
// tech := tech_lassight ; 2 :
35983: LD_ADDR_VAR 0 5
35987: PUSH
35988: LD_INT 12
35990: ST_TO_ADDR
35991: GO 36032
35993: LD_INT 2
35995: DOUBLE
35996: EQUAL
35997: IFTRUE 36001
35999: GO 36012
36001: POP
// tech := tech_mortar ; 3 :
36002: LD_ADDR_VAR 0 5
36006: PUSH
36007: LD_INT 41
36009: ST_TO_ADDR
36010: GO 36032
36012: LD_INT 3
36014: DOUBLE
36015: EQUAL
36016: IFTRUE 36020
36018: GO 36031
36020: POP
// tech := tech_bazooka ; end ;
36021: LD_ADDR_VAR 0 5
36025: PUSH
36026: LD_INT 44
36028: ST_TO_ADDR
36029: GO 36032
36031: POP
// if Researched ( side , tech ) then
36032: LD_VAR 0 3
36036: PPUSH
36037: LD_VAR 0 5
36041: PPUSH
36042: CALL_OW 325
36046: IFFALSE 36073
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
36048: LD_ADDR_VAR 0 2
36052: PUSH
36053: LD_INT 5
36055: PUSH
36056: LD_INT 8
36058: PUSH
36059: LD_INT 9
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: LIST
36066: PUSH
36067: LD_VAR 0 4
36071: ARRAY
36072: ST_TO_ADDR
// end ;
36073: LD_VAR 0 2
36077: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
36078: LD_INT 0
36080: PPUSH
36081: PPUSH
36082: PPUSH
// if not mines then
36083: LD_VAR 0 2
36087: NOT
36088: IFFALSE 36092
// exit ;
36090: GO 36236
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36092: LD_ADDR_VAR 0 5
36096: PUSH
36097: LD_INT 81
36099: PUSH
36100: LD_VAR 0 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 3
36111: PUSH
36112: LD_INT 21
36114: PUSH
36115: LD_INT 3
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PPUSH
36130: CALL_OW 69
36134: ST_TO_ADDR
// for i in mines do
36135: LD_ADDR_VAR 0 4
36139: PUSH
36140: LD_VAR 0 2
36144: PUSH
36145: FOR_IN
36146: IFFALSE 36234
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
36148: LD_VAR 0 4
36152: PUSH
36153: LD_INT 1
36155: ARRAY
36156: PPUSH
36157: LD_VAR 0 4
36161: PUSH
36162: LD_INT 2
36164: ARRAY
36165: PPUSH
36166: CALL_OW 458
36170: NOT
36171: IFFALSE 36175
// continue ;
36173: GO 36145
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
36175: LD_VAR 0 4
36179: PUSH
36180: LD_INT 1
36182: ARRAY
36183: PPUSH
36184: LD_VAR 0 4
36188: PUSH
36189: LD_INT 2
36191: ARRAY
36192: PPUSH
36193: CALL_OW 428
36197: PUSH
36198: LD_VAR 0 5
36202: IN
36203: IFFALSE 36232
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
36205: LD_VAR 0 4
36209: PUSH
36210: LD_INT 1
36212: ARRAY
36213: PPUSH
36214: LD_VAR 0 4
36218: PUSH
36219: LD_INT 2
36221: ARRAY
36222: PPUSH
36223: LD_VAR 0 1
36227: PPUSH
36228: CALL_OW 456
// end ;
36232: GO 36145
36234: POP
36235: POP
// end ;
36236: LD_VAR 0 3
36240: RET
// export function Count ( array ) ; var i ; begin
36241: LD_INT 0
36243: PPUSH
36244: PPUSH
// result := 0 ;
36245: LD_ADDR_VAR 0 2
36249: PUSH
36250: LD_INT 0
36252: ST_TO_ADDR
// for i in array do
36253: LD_ADDR_VAR 0 3
36257: PUSH
36258: LD_VAR 0 1
36262: PUSH
36263: FOR_IN
36264: IFFALSE 36288
// if i then
36266: LD_VAR 0 3
36270: IFFALSE 36286
// result := result + 1 ;
36272: LD_ADDR_VAR 0 2
36276: PUSH
36277: LD_VAR 0 2
36281: PUSH
36282: LD_INT 1
36284: PLUS
36285: ST_TO_ADDR
36286: GO 36263
36288: POP
36289: POP
// end ;
36290: LD_VAR 0 2
36294: RET
// export function IsEmpty ( building ) ; begin
36295: LD_INT 0
36297: PPUSH
// if not building then
36298: LD_VAR 0 1
36302: NOT
36303: IFFALSE 36307
// exit ;
36305: GO 36350
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
36307: LD_ADDR_VAR 0 2
36311: PUSH
36312: LD_VAR 0 1
36316: PUSH
36317: LD_INT 22
36319: PUSH
36320: LD_VAR 0 1
36324: PPUSH
36325: CALL_OW 255
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 58
36336: PUSH
36337: EMPTY
36338: LIST
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PPUSH
36344: CALL_OW 69
36348: IN
36349: ST_TO_ADDR
// end ;
36350: LD_VAR 0 2
36354: RET
// export function IsNotFull ( building ) ; begin
36355: LD_INT 0
36357: PPUSH
// if not building then
36358: LD_VAR 0 1
36362: NOT
36363: IFFALSE 36367
// exit ;
36365: GO 36386
// result := UnitsInside ( building ) < 6 ;
36367: LD_ADDR_VAR 0 2
36371: PUSH
36372: LD_VAR 0 1
36376: PPUSH
36377: CALL_OW 313
36381: PUSH
36382: LD_INT 6
36384: LESS
36385: ST_TO_ADDR
// end ;
36386: LD_VAR 0 2
36390: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
36391: LD_INT 0
36393: PPUSH
36394: PPUSH
36395: PPUSH
36396: PPUSH
// tmp := [ ] ;
36397: LD_ADDR_VAR 0 3
36401: PUSH
36402: EMPTY
36403: ST_TO_ADDR
// list := [ ] ;
36404: LD_ADDR_VAR 0 5
36408: PUSH
36409: EMPTY
36410: ST_TO_ADDR
// for i = 16 to 25 do
36411: LD_ADDR_VAR 0 4
36415: PUSH
36416: DOUBLE
36417: LD_INT 16
36419: DEC
36420: ST_TO_ADDR
36421: LD_INT 25
36423: PUSH
36424: FOR_TO
36425: IFFALSE 36498
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
36427: LD_ADDR_VAR 0 3
36431: PUSH
36432: LD_VAR 0 3
36436: PUSH
36437: LD_INT 22
36439: PUSH
36440: LD_VAR 0 1
36444: PPUSH
36445: CALL_OW 255
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 91
36456: PUSH
36457: LD_VAR 0 1
36461: PUSH
36462: LD_INT 6
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 30
36472: PUSH
36473: LD_VAR 0 4
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: EMPTY
36483: LIST
36484: LIST
36485: LIST
36486: PUSH
36487: EMPTY
36488: LIST
36489: PPUSH
36490: CALL_OW 69
36494: ADD
36495: ST_TO_ADDR
36496: GO 36424
36498: POP
36499: POP
// for i = 1 to tmp do
36500: LD_ADDR_VAR 0 4
36504: PUSH
36505: DOUBLE
36506: LD_INT 1
36508: DEC
36509: ST_TO_ADDR
36510: LD_VAR 0 3
36514: PUSH
36515: FOR_TO
36516: IFFALSE 36604
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
36518: LD_ADDR_VAR 0 5
36522: PUSH
36523: LD_VAR 0 5
36527: PUSH
36528: LD_VAR 0 3
36532: PUSH
36533: LD_VAR 0 4
36537: ARRAY
36538: PPUSH
36539: CALL_OW 266
36543: PUSH
36544: LD_VAR 0 3
36548: PUSH
36549: LD_VAR 0 4
36553: ARRAY
36554: PPUSH
36555: CALL_OW 250
36559: PUSH
36560: LD_VAR 0 3
36564: PUSH
36565: LD_VAR 0 4
36569: ARRAY
36570: PPUSH
36571: CALL_OW 251
36575: PUSH
36576: LD_VAR 0 3
36580: PUSH
36581: LD_VAR 0 4
36585: ARRAY
36586: PPUSH
36587: CALL_OW 254
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: PUSH
36598: EMPTY
36599: LIST
36600: ADD
36601: ST_TO_ADDR
36602: GO 36515
36604: POP
36605: POP
// result := list ;
36606: LD_ADDR_VAR 0 2
36610: PUSH
36611: LD_VAR 0 5
36615: ST_TO_ADDR
// end ;
36616: LD_VAR 0 2
36620: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
36621: LD_INT 0
36623: PPUSH
36624: PPUSH
36625: PPUSH
36626: PPUSH
36627: PPUSH
36628: PPUSH
36629: PPUSH
// if not factory then
36630: LD_VAR 0 1
36634: NOT
36635: IFFALSE 36639
// exit ;
36637: GO 37232
// if control = control_apeman then
36639: LD_VAR 0 4
36643: PUSH
36644: LD_INT 5
36646: EQUAL
36647: IFFALSE 36756
// begin tmp := UnitsInside ( factory ) ;
36649: LD_ADDR_VAR 0 8
36653: PUSH
36654: LD_VAR 0 1
36658: PPUSH
36659: CALL_OW 313
36663: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
36664: LD_VAR 0 8
36668: PPUSH
36669: LD_INT 25
36671: PUSH
36672: LD_INT 12
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PPUSH
36679: CALL_OW 72
36683: NOT
36684: IFFALSE 36694
// control := control_manual ;
36686: LD_ADDR_VAR 0 4
36690: PUSH
36691: LD_INT 1
36693: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
36694: LD_ADDR_VAR 0 8
36698: PUSH
36699: LD_VAR 0 1
36703: PPUSH
36704: CALL 36391 0 1
36708: ST_TO_ADDR
// if tmp then
36709: LD_VAR 0 8
36713: IFFALSE 36756
// begin for i in tmp do
36715: LD_ADDR_VAR 0 7
36719: PUSH
36720: LD_VAR 0 8
36724: PUSH
36725: FOR_IN
36726: IFFALSE 36754
// if i [ 1 ] = b_ext_radio then
36728: LD_VAR 0 7
36732: PUSH
36733: LD_INT 1
36735: ARRAY
36736: PUSH
36737: LD_INT 22
36739: EQUAL
36740: IFFALSE 36752
// begin control := control_remote ;
36742: LD_ADDR_VAR 0 4
36746: PUSH
36747: LD_INT 2
36749: ST_TO_ADDR
// break ;
36750: GO 36754
// end ;
36752: GO 36725
36754: POP
36755: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
36756: LD_VAR 0 1
36760: PPUSH
36761: LD_VAR 0 2
36765: PPUSH
36766: LD_VAR 0 3
36770: PPUSH
36771: LD_VAR 0 4
36775: PPUSH
36776: LD_VAR 0 5
36780: PPUSH
36781: CALL_OW 448
36785: IFFALSE 36820
// begin result := [ chassis , engine , control , weapon ] ;
36787: LD_ADDR_VAR 0 6
36791: PUSH
36792: LD_VAR 0 2
36796: PUSH
36797: LD_VAR 0 3
36801: PUSH
36802: LD_VAR 0 4
36806: PUSH
36807: LD_VAR 0 5
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: LIST
36816: LIST
36817: ST_TO_ADDR
// exit ;
36818: GO 37232
// end ; _chassis := AvailableChassisList ( factory ) ;
36820: LD_ADDR_VAR 0 9
36824: PUSH
36825: LD_VAR 0 1
36829: PPUSH
36830: CALL_OW 475
36834: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
36835: LD_ADDR_VAR 0 11
36839: PUSH
36840: LD_VAR 0 1
36844: PPUSH
36845: CALL_OW 476
36849: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
36850: LD_ADDR_VAR 0 12
36854: PUSH
36855: LD_VAR 0 1
36859: PPUSH
36860: CALL_OW 477
36864: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
36865: LD_ADDR_VAR 0 10
36869: PUSH
36870: LD_VAR 0 1
36874: PPUSH
36875: CALL_OW 478
36879: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
36880: LD_VAR 0 9
36884: NOT
36885: PUSH
36886: LD_VAR 0 11
36890: NOT
36891: OR
36892: PUSH
36893: LD_VAR 0 12
36897: NOT
36898: OR
36899: PUSH
36900: LD_VAR 0 10
36904: NOT
36905: OR
36906: IFFALSE 36941
// begin result := [ chassis , engine , control , weapon ] ;
36908: LD_ADDR_VAR 0 6
36912: PUSH
36913: LD_VAR 0 2
36917: PUSH
36918: LD_VAR 0 3
36922: PUSH
36923: LD_VAR 0 4
36927: PUSH
36928: LD_VAR 0 5
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: ST_TO_ADDR
// exit ;
36939: GO 37232
// end ; if not chassis in _chassis then
36941: LD_VAR 0 2
36945: PUSH
36946: LD_VAR 0 9
36950: IN
36951: NOT
36952: IFFALSE 36978
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
36954: LD_ADDR_VAR 0 2
36958: PUSH
36959: LD_VAR 0 9
36963: PUSH
36964: LD_INT 1
36966: PPUSH
36967: LD_VAR 0 9
36971: PPUSH
36972: CALL_OW 12
36976: ARRAY
36977: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
36978: LD_VAR 0 2
36982: PPUSH
36983: LD_VAR 0 3
36987: PPUSH
36988: CALL 37237 0 2
36992: NOT
36993: IFFALSE 37052
// repeat engine := _engine [ 1 ] ;
36995: LD_ADDR_VAR 0 3
36999: PUSH
37000: LD_VAR 0 11
37004: PUSH
37005: LD_INT 1
37007: ARRAY
37008: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37009: LD_ADDR_VAR 0 11
37013: PUSH
37014: LD_VAR 0 11
37018: PPUSH
37019: LD_INT 1
37021: PPUSH
37022: CALL_OW 3
37026: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37027: LD_VAR 0 2
37031: PPUSH
37032: LD_VAR 0 3
37036: PPUSH
37037: CALL 37237 0 2
37041: PUSH
37042: LD_VAR 0 11
37046: PUSH
37047: EMPTY
37048: EQUAL
37049: OR
37050: IFFALSE 36995
// if not control in _control then
37052: LD_VAR 0 4
37056: PUSH
37057: LD_VAR 0 12
37061: IN
37062: NOT
37063: IFFALSE 37089
// control := _control [ rand ( 1 , _control ) ] ;
37065: LD_ADDR_VAR 0 4
37069: PUSH
37070: LD_VAR 0 12
37074: PUSH
37075: LD_INT 1
37077: PPUSH
37078: LD_VAR 0 12
37082: PPUSH
37083: CALL_OW 12
37087: ARRAY
37088: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
37089: LD_VAR 0 2
37093: PPUSH
37094: LD_VAR 0 5
37098: PPUSH
37099: CALL 37457 0 2
37103: NOT
37104: IFFALSE 37163
// repeat weapon := _weapon [ 1 ] ;
37106: LD_ADDR_VAR 0 5
37110: PUSH
37111: LD_VAR 0 10
37115: PUSH
37116: LD_INT 1
37118: ARRAY
37119: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
37120: LD_ADDR_VAR 0 10
37124: PUSH
37125: LD_VAR 0 10
37129: PPUSH
37130: LD_INT 1
37132: PPUSH
37133: CALL_OW 3
37137: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
37138: LD_VAR 0 2
37142: PPUSH
37143: LD_VAR 0 5
37147: PPUSH
37148: CALL 37457 0 2
37152: PUSH
37153: LD_VAR 0 10
37157: PUSH
37158: EMPTY
37159: EQUAL
37160: OR
37161: IFFALSE 37106
// result := [ ] ;
37163: LD_ADDR_VAR 0 6
37167: PUSH
37168: EMPTY
37169: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37170: LD_VAR 0 1
37174: PPUSH
37175: LD_VAR 0 2
37179: PPUSH
37180: LD_VAR 0 3
37184: PPUSH
37185: LD_VAR 0 4
37189: PPUSH
37190: LD_VAR 0 5
37194: PPUSH
37195: CALL_OW 448
37199: IFFALSE 37232
// result := [ chassis , engine , control , weapon ] ;
37201: LD_ADDR_VAR 0 6
37205: PUSH
37206: LD_VAR 0 2
37210: PUSH
37211: LD_VAR 0 3
37215: PUSH
37216: LD_VAR 0 4
37220: PUSH
37221: LD_VAR 0 5
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: ST_TO_ADDR
// end ;
37232: LD_VAR 0 6
37236: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
37237: LD_INT 0
37239: PPUSH
// if not chassis or not engine then
37240: LD_VAR 0 1
37244: NOT
37245: PUSH
37246: LD_VAR 0 2
37250: NOT
37251: OR
37252: IFFALSE 37256
// exit ;
37254: GO 37452
// case engine of engine_solar :
37256: LD_VAR 0 2
37260: PUSH
37261: LD_INT 2
37263: DOUBLE
37264: EQUAL
37265: IFTRUE 37269
37267: GO 37307
37269: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
37270: LD_ADDR_VAR 0 3
37274: PUSH
37275: LD_INT 11
37277: PUSH
37278: LD_INT 12
37280: PUSH
37281: LD_INT 13
37283: PUSH
37284: LD_INT 14
37286: PUSH
37287: LD_INT 1
37289: PUSH
37290: LD_INT 2
37292: PUSH
37293: LD_INT 3
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
37305: GO 37436
37307: LD_INT 1
37309: DOUBLE
37310: EQUAL
37311: IFTRUE 37315
37313: GO 37377
37315: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
37316: LD_ADDR_VAR 0 3
37320: PUSH
37321: LD_INT 11
37323: PUSH
37324: LD_INT 12
37326: PUSH
37327: LD_INT 13
37329: PUSH
37330: LD_INT 14
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: LD_INT 2
37338: PUSH
37339: LD_INT 3
37341: PUSH
37342: LD_INT 4
37344: PUSH
37345: LD_INT 5
37347: PUSH
37348: LD_INT 21
37350: PUSH
37351: LD_INT 23
37353: PUSH
37354: LD_INT 22
37356: PUSH
37357: LD_INT 24
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: ST_TO_ADDR
37375: GO 37436
37377: LD_INT 3
37379: DOUBLE
37380: EQUAL
37381: IFTRUE 37385
37383: GO 37435
37385: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
37386: LD_ADDR_VAR 0 3
37390: PUSH
37391: LD_INT 13
37393: PUSH
37394: LD_INT 14
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: LD_INT 3
37402: PUSH
37403: LD_INT 4
37405: PUSH
37406: LD_INT 5
37408: PUSH
37409: LD_INT 21
37411: PUSH
37412: LD_INT 22
37414: PUSH
37415: LD_INT 23
37417: PUSH
37418: LD_INT 24
37420: PUSH
37421: EMPTY
37422: LIST
37423: LIST
37424: LIST
37425: LIST
37426: LIST
37427: LIST
37428: LIST
37429: LIST
37430: LIST
37431: LIST
37432: ST_TO_ADDR
37433: GO 37436
37435: POP
// result := ( chassis in result ) ;
37436: LD_ADDR_VAR 0 3
37440: PUSH
37441: LD_VAR 0 1
37445: PUSH
37446: LD_VAR 0 3
37450: IN
37451: ST_TO_ADDR
// end ;
37452: LD_VAR 0 3
37456: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
37457: LD_INT 0
37459: PPUSH
// if not chassis or not weapon then
37460: LD_VAR 0 1
37464: NOT
37465: PUSH
37466: LD_VAR 0 2
37470: NOT
37471: OR
37472: IFFALSE 37476
// exit ;
37474: GO 38538
// case weapon of us_machine_gun :
37476: LD_VAR 0 2
37480: PUSH
37481: LD_INT 2
37483: DOUBLE
37484: EQUAL
37485: IFTRUE 37489
37487: GO 37519
37489: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
37490: LD_ADDR_VAR 0 3
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: LD_INT 2
37500: PUSH
37501: LD_INT 3
37503: PUSH
37504: LD_INT 4
37506: PUSH
37507: LD_INT 5
37509: PUSH
37510: EMPTY
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: ST_TO_ADDR
37517: GO 38522
37519: LD_INT 3
37521: DOUBLE
37522: EQUAL
37523: IFTRUE 37527
37525: GO 37557
37527: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
37528: LD_ADDR_VAR 0 3
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 2
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: LD_INT 4
37544: PUSH
37545: LD_INT 5
37547: PUSH
37548: EMPTY
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: ST_TO_ADDR
37555: GO 38522
37557: LD_INT 11
37559: DOUBLE
37560: EQUAL
37561: IFTRUE 37565
37563: GO 37595
37565: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
37566: LD_ADDR_VAR 0 3
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: LD_INT 2
37576: PUSH
37577: LD_INT 3
37579: PUSH
37580: LD_INT 4
37582: PUSH
37583: LD_INT 5
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: ST_TO_ADDR
37593: GO 38522
37595: LD_INT 4
37597: DOUBLE
37598: EQUAL
37599: IFTRUE 37603
37601: GO 37629
37603: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
37604: LD_ADDR_VAR 0 3
37608: PUSH
37609: LD_INT 2
37611: PUSH
37612: LD_INT 3
37614: PUSH
37615: LD_INT 4
37617: PUSH
37618: LD_INT 5
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: ST_TO_ADDR
37627: GO 38522
37629: LD_INT 5
37631: DOUBLE
37632: EQUAL
37633: IFTRUE 37637
37635: GO 37663
37637: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
37638: LD_ADDR_VAR 0 3
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: LD_INT 3
37648: PUSH
37649: LD_INT 4
37651: PUSH
37652: LD_INT 5
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: ST_TO_ADDR
37661: GO 38522
37663: LD_INT 9
37665: DOUBLE
37666: EQUAL
37667: IFTRUE 37671
37669: GO 37697
37671: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
37672: LD_ADDR_VAR 0 3
37676: PUSH
37677: LD_INT 2
37679: PUSH
37680: LD_INT 3
37682: PUSH
37683: LD_INT 4
37685: PUSH
37686: LD_INT 5
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: ST_TO_ADDR
37695: GO 38522
37697: LD_INT 7
37699: DOUBLE
37700: EQUAL
37701: IFTRUE 37705
37703: GO 37731
37705: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
37706: LD_ADDR_VAR 0 3
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: LD_INT 4
37719: PUSH
37720: LD_INT 5
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
37729: GO 38522
37731: LD_INT 12
37733: DOUBLE
37734: EQUAL
37735: IFTRUE 37739
37737: GO 37765
37739: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
37740: LD_ADDR_VAR 0 3
37744: PUSH
37745: LD_INT 2
37747: PUSH
37748: LD_INT 3
37750: PUSH
37751: LD_INT 4
37753: PUSH
37754: LD_INT 5
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: ST_TO_ADDR
37763: GO 38522
37765: LD_INT 13
37767: DOUBLE
37768: EQUAL
37769: IFTRUE 37773
37771: GO 37799
37773: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
37774: LD_ADDR_VAR 0 3
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: LD_INT 3
37784: PUSH
37785: LD_INT 4
37787: PUSH
37788: LD_INT 5
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: LIST
37795: LIST
37796: ST_TO_ADDR
37797: GO 38522
37799: LD_INT 14
37801: DOUBLE
37802: EQUAL
37803: IFTRUE 37807
37805: GO 37825
37807: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
37808: LD_ADDR_VAR 0 3
37812: PUSH
37813: LD_INT 4
37815: PUSH
37816: LD_INT 5
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: ST_TO_ADDR
37823: GO 38522
37825: LD_INT 6
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37833
37831: GO 37851
37833: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
37834: LD_ADDR_VAR 0 3
37838: PUSH
37839: LD_INT 4
37841: PUSH
37842: LD_INT 5
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: ST_TO_ADDR
37849: GO 38522
37851: LD_INT 10
37853: DOUBLE
37854: EQUAL
37855: IFTRUE 37859
37857: GO 37877
37859: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
37860: LD_ADDR_VAR 0 3
37864: PUSH
37865: LD_INT 4
37867: PUSH
37868: LD_INT 5
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: ST_TO_ADDR
37875: GO 38522
37877: LD_INT 22
37879: DOUBLE
37880: EQUAL
37881: IFTRUE 37885
37883: GO 37911
37885: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
37886: LD_ADDR_VAR 0 3
37890: PUSH
37891: LD_INT 11
37893: PUSH
37894: LD_INT 12
37896: PUSH
37897: LD_INT 13
37899: PUSH
37900: LD_INT 14
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: ST_TO_ADDR
37909: GO 38522
37911: LD_INT 23
37913: DOUBLE
37914: EQUAL
37915: IFTRUE 37919
37917: GO 37945
37919: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
37920: LD_ADDR_VAR 0 3
37924: PUSH
37925: LD_INT 11
37927: PUSH
37928: LD_INT 12
37930: PUSH
37931: LD_INT 13
37933: PUSH
37934: LD_INT 14
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: ST_TO_ADDR
37943: GO 38522
37945: LD_INT 24
37947: DOUBLE
37948: EQUAL
37949: IFTRUE 37953
37951: GO 37979
37953: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
37954: LD_ADDR_VAR 0 3
37958: PUSH
37959: LD_INT 11
37961: PUSH
37962: LD_INT 12
37964: PUSH
37965: LD_INT 13
37967: PUSH
37968: LD_INT 14
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: LIST
37975: LIST
37976: ST_TO_ADDR
37977: GO 38522
37979: LD_INT 30
37981: DOUBLE
37982: EQUAL
37983: IFTRUE 37987
37985: GO 38013
37987: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
37988: LD_ADDR_VAR 0 3
37992: PUSH
37993: LD_INT 11
37995: PUSH
37996: LD_INT 12
37998: PUSH
37999: LD_INT 13
38001: PUSH
38002: LD_INT 14
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: ST_TO_ADDR
38011: GO 38522
38013: LD_INT 25
38015: DOUBLE
38016: EQUAL
38017: IFTRUE 38021
38019: GO 38039
38021: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38022: LD_ADDR_VAR 0 3
38026: PUSH
38027: LD_INT 13
38029: PUSH
38030: LD_INT 14
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: ST_TO_ADDR
38037: GO 38522
38039: LD_INT 27
38041: DOUBLE
38042: EQUAL
38043: IFTRUE 38047
38045: GO 38065
38047: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
38048: LD_ADDR_VAR 0 3
38052: PUSH
38053: LD_INT 13
38055: PUSH
38056: LD_INT 14
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: ST_TO_ADDR
38063: GO 38522
38065: LD_EXP 134
38069: DOUBLE
38070: EQUAL
38071: IFTRUE 38075
38073: GO 38101
38075: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
38076: LD_ADDR_VAR 0 3
38080: PUSH
38081: LD_INT 11
38083: PUSH
38084: LD_INT 12
38086: PUSH
38087: LD_INT 13
38089: PUSH
38090: LD_INT 14
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: ST_TO_ADDR
38099: GO 38522
38101: LD_INT 28
38103: DOUBLE
38104: EQUAL
38105: IFTRUE 38109
38107: GO 38127
38109: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
38110: LD_ADDR_VAR 0 3
38114: PUSH
38115: LD_INT 13
38117: PUSH
38118: LD_INT 14
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: ST_TO_ADDR
38125: GO 38522
38127: LD_INT 29
38129: DOUBLE
38130: EQUAL
38131: IFTRUE 38135
38133: GO 38153
38135: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
38136: LD_ADDR_VAR 0 3
38140: PUSH
38141: LD_INT 13
38143: PUSH
38144: LD_INT 14
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: ST_TO_ADDR
38151: GO 38522
38153: LD_INT 31
38155: DOUBLE
38156: EQUAL
38157: IFTRUE 38161
38159: GO 38179
38161: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
38162: LD_ADDR_VAR 0 3
38166: PUSH
38167: LD_INT 13
38169: PUSH
38170: LD_INT 14
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: ST_TO_ADDR
38177: GO 38522
38179: LD_INT 26
38181: DOUBLE
38182: EQUAL
38183: IFTRUE 38187
38185: GO 38205
38187: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
38188: LD_ADDR_VAR 0 3
38192: PUSH
38193: LD_INT 13
38195: PUSH
38196: LD_INT 14
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: ST_TO_ADDR
38203: GO 38522
38205: LD_INT 42
38207: DOUBLE
38208: EQUAL
38209: IFTRUE 38213
38211: GO 38239
38213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
38214: LD_ADDR_VAR 0 3
38218: PUSH
38219: LD_INT 21
38221: PUSH
38222: LD_INT 22
38224: PUSH
38225: LD_INT 23
38227: PUSH
38228: LD_INT 24
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: ST_TO_ADDR
38237: GO 38522
38239: LD_INT 43
38241: DOUBLE
38242: EQUAL
38243: IFTRUE 38247
38245: GO 38273
38247: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
38248: LD_ADDR_VAR 0 3
38252: PUSH
38253: LD_INT 21
38255: PUSH
38256: LD_INT 22
38258: PUSH
38259: LD_INT 23
38261: PUSH
38262: LD_INT 24
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: ST_TO_ADDR
38271: GO 38522
38273: LD_INT 44
38275: DOUBLE
38276: EQUAL
38277: IFTRUE 38281
38279: GO 38307
38281: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
38282: LD_ADDR_VAR 0 3
38286: PUSH
38287: LD_INT 21
38289: PUSH
38290: LD_INT 22
38292: PUSH
38293: LD_INT 23
38295: PUSH
38296: LD_INT 24
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: ST_TO_ADDR
38305: GO 38522
38307: LD_INT 45
38309: DOUBLE
38310: EQUAL
38311: IFTRUE 38315
38313: GO 38341
38315: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
38316: LD_ADDR_VAR 0 3
38320: PUSH
38321: LD_INT 21
38323: PUSH
38324: LD_INT 22
38326: PUSH
38327: LD_INT 23
38329: PUSH
38330: LD_INT 24
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: ST_TO_ADDR
38339: GO 38522
38341: LD_INT 49
38343: DOUBLE
38344: EQUAL
38345: IFTRUE 38349
38347: GO 38375
38349: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
38350: LD_ADDR_VAR 0 3
38354: PUSH
38355: LD_INT 21
38357: PUSH
38358: LD_INT 22
38360: PUSH
38361: LD_INT 23
38363: PUSH
38364: LD_INT 24
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: ST_TO_ADDR
38373: GO 38522
38375: LD_INT 51
38377: DOUBLE
38378: EQUAL
38379: IFTRUE 38383
38381: GO 38409
38383: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
38384: LD_ADDR_VAR 0 3
38388: PUSH
38389: LD_INT 21
38391: PUSH
38392: LD_INT 22
38394: PUSH
38395: LD_INT 23
38397: PUSH
38398: LD_INT 24
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: ST_TO_ADDR
38407: GO 38522
38409: LD_INT 52
38411: DOUBLE
38412: EQUAL
38413: IFTRUE 38417
38415: GO 38443
38417: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
38418: LD_ADDR_VAR 0 3
38422: PUSH
38423: LD_INT 21
38425: PUSH
38426: LD_INT 22
38428: PUSH
38429: LD_INT 23
38431: PUSH
38432: LD_INT 24
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: ST_TO_ADDR
38441: GO 38522
38443: LD_INT 53
38445: DOUBLE
38446: EQUAL
38447: IFTRUE 38451
38449: GO 38469
38451: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
38452: LD_ADDR_VAR 0 3
38456: PUSH
38457: LD_INT 23
38459: PUSH
38460: LD_INT 24
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: ST_TO_ADDR
38467: GO 38522
38469: LD_INT 46
38471: DOUBLE
38472: EQUAL
38473: IFTRUE 38477
38475: GO 38495
38477: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
38478: LD_ADDR_VAR 0 3
38482: PUSH
38483: LD_INT 23
38485: PUSH
38486: LD_INT 24
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: ST_TO_ADDR
38493: GO 38522
38495: LD_INT 47
38497: DOUBLE
38498: EQUAL
38499: IFTRUE 38503
38501: GO 38521
38503: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38504: LD_ADDR_VAR 0 3
38508: PUSH
38509: LD_INT 23
38511: PUSH
38512: LD_INT 24
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: ST_TO_ADDR
38519: GO 38522
38521: POP
// result := ( chassis in result ) ;
38522: LD_ADDR_VAR 0 3
38526: PUSH
38527: LD_VAR 0 1
38531: PUSH
38532: LD_VAR 0 3
38536: IN
38537: ST_TO_ADDR
// end ;
38538: LD_VAR 0 3
38542: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
38543: LD_INT 0
38545: PPUSH
38546: PPUSH
38547: PPUSH
38548: PPUSH
38549: PPUSH
38550: PPUSH
38551: PPUSH
// result := array ;
38552: LD_ADDR_VAR 0 5
38556: PUSH
38557: LD_VAR 0 1
38561: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
38562: LD_VAR 0 1
38566: NOT
38567: PUSH
38568: LD_VAR 0 2
38572: NOT
38573: OR
38574: PUSH
38575: LD_VAR 0 3
38579: NOT
38580: OR
38581: PUSH
38582: LD_VAR 0 2
38586: PUSH
38587: LD_VAR 0 1
38591: GREATER
38592: OR
38593: PUSH
38594: LD_VAR 0 3
38598: PUSH
38599: LD_VAR 0 1
38603: GREATER
38604: OR
38605: IFFALSE 38609
// exit ;
38607: GO 38905
// if direction then
38609: LD_VAR 0 4
38613: IFFALSE 38677
// begin d := 1 ;
38615: LD_ADDR_VAR 0 9
38619: PUSH
38620: LD_INT 1
38622: ST_TO_ADDR
// if i_from > i_to then
38623: LD_VAR 0 2
38627: PUSH
38628: LD_VAR 0 3
38632: GREATER
38633: IFFALSE 38659
// length := ( array - i_from ) + i_to else
38635: LD_ADDR_VAR 0 11
38639: PUSH
38640: LD_VAR 0 1
38644: PUSH
38645: LD_VAR 0 2
38649: MINUS
38650: PUSH
38651: LD_VAR 0 3
38655: PLUS
38656: ST_TO_ADDR
38657: GO 38675
// length := i_to - i_from ;
38659: LD_ADDR_VAR 0 11
38663: PUSH
38664: LD_VAR 0 3
38668: PUSH
38669: LD_VAR 0 2
38673: MINUS
38674: ST_TO_ADDR
// end else
38675: GO 38738
// begin d := - 1 ;
38677: LD_ADDR_VAR 0 9
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: ST_TO_ADDR
// if i_from > i_to then
38686: LD_VAR 0 2
38690: PUSH
38691: LD_VAR 0 3
38695: GREATER
38696: IFFALSE 38716
// length := i_from - i_to else
38698: LD_ADDR_VAR 0 11
38702: PUSH
38703: LD_VAR 0 2
38707: PUSH
38708: LD_VAR 0 3
38712: MINUS
38713: ST_TO_ADDR
38714: GO 38738
// length := ( array - i_to ) + i_from ;
38716: LD_ADDR_VAR 0 11
38720: PUSH
38721: LD_VAR 0 1
38725: PUSH
38726: LD_VAR 0 3
38730: MINUS
38731: PUSH
38732: LD_VAR 0 2
38736: PLUS
38737: ST_TO_ADDR
// end ; if not length then
38738: LD_VAR 0 11
38742: NOT
38743: IFFALSE 38747
// exit ;
38745: GO 38905
// tmp := array ;
38747: LD_ADDR_VAR 0 10
38751: PUSH
38752: LD_VAR 0 1
38756: ST_TO_ADDR
// for i = 1 to length do
38757: LD_ADDR_VAR 0 6
38761: PUSH
38762: DOUBLE
38763: LD_INT 1
38765: DEC
38766: ST_TO_ADDR
38767: LD_VAR 0 11
38771: PUSH
38772: FOR_TO
38773: IFFALSE 38893
// begin for j = 1 to array do
38775: LD_ADDR_VAR 0 7
38779: PUSH
38780: DOUBLE
38781: LD_INT 1
38783: DEC
38784: ST_TO_ADDR
38785: LD_VAR 0 1
38789: PUSH
38790: FOR_TO
38791: IFFALSE 38879
// begin k := j + d ;
38793: LD_ADDR_VAR 0 8
38797: PUSH
38798: LD_VAR 0 7
38802: PUSH
38803: LD_VAR 0 9
38807: PLUS
38808: ST_TO_ADDR
// if k > array then
38809: LD_VAR 0 8
38813: PUSH
38814: LD_VAR 0 1
38818: GREATER
38819: IFFALSE 38829
// k := 1 ;
38821: LD_ADDR_VAR 0 8
38825: PUSH
38826: LD_INT 1
38828: ST_TO_ADDR
// if not k then
38829: LD_VAR 0 8
38833: NOT
38834: IFFALSE 38846
// k := array ;
38836: LD_ADDR_VAR 0 8
38840: PUSH
38841: LD_VAR 0 1
38845: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
38846: LD_ADDR_VAR 0 10
38850: PUSH
38851: LD_VAR 0 10
38855: PPUSH
38856: LD_VAR 0 8
38860: PPUSH
38861: LD_VAR 0 1
38865: PUSH
38866: LD_VAR 0 7
38870: ARRAY
38871: PPUSH
38872: CALL_OW 1
38876: ST_TO_ADDR
// end ;
38877: GO 38790
38879: POP
38880: POP
// array := tmp ;
38881: LD_ADDR_VAR 0 1
38885: PUSH
38886: LD_VAR 0 10
38890: ST_TO_ADDR
// end ;
38891: GO 38772
38893: POP
38894: POP
// result := array ;
38895: LD_ADDR_VAR 0 5
38899: PUSH
38900: LD_VAR 0 1
38904: ST_TO_ADDR
// end ;
38905: LD_VAR 0 5
38909: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
38910: LD_INT 0
38912: PPUSH
38913: PPUSH
// result := 0 ;
38914: LD_ADDR_VAR 0 3
38918: PUSH
38919: LD_INT 0
38921: ST_TO_ADDR
// if not array or not value in array then
38922: LD_VAR 0 1
38926: NOT
38927: PUSH
38928: LD_VAR 0 2
38932: PUSH
38933: LD_VAR 0 1
38937: IN
38938: NOT
38939: OR
38940: IFFALSE 38944
// exit ;
38942: GO 38998
// for i = 1 to array do
38944: LD_ADDR_VAR 0 4
38948: PUSH
38949: DOUBLE
38950: LD_INT 1
38952: DEC
38953: ST_TO_ADDR
38954: LD_VAR 0 1
38958: PUSH
38959: FOR_TO
38960: IFFALSE 38996
// if value = array [ i ] then
38962: LD_VAR 0 2
38966: PUSH
38967: LD_VAR 0 1
38971: PUSH
38972: LD_VAR 0 4
38976: ARRAY
38977: EQUAL
38978: IFFALSE 38994
// begin result := i ;
38980: LD_ADDR_VAR 0 3
38984: PUSH
38985: LD_VAR 0 4
38989: ST_TO_ADDR
// exit ;
38990: POP
38991: POP
38992: GO 38998
// end ;
38994: GO 38959
38996: POP
38997: POP
// end ;
38998: LD_VAR 0 3
39002: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39003: LD_INT 0
39005: PPUSH
// vc_chassis := chassis ;
39006: LD_ADDR_OWVAR 37
39010: PUSH
39011: LD_VAR 0 1
39015: ST_TO_ADDR
// vc_engine := engine ;
39016: LD_ADDR_OWVAR 39
39020: PUSH
39021: LD_VAR 0 2
39025: ST_TO_ADDR
// vc_control := control ;
39026: LD_ADDR_OWVAR 38
39030: PUSH
39031: LD_VAR 0 3
39035: ST_TO_ADDR
// vc_weapon := weapon ;
39036: LD_ADDR_OWVAR 40
39040: PUSH
39041: LD_VAR 0 4
39045: ST_TO_ADDR
// vc_fuel_battery := fuel ;
39046: LD_ADDR_OWVAR 41
39050: PUSH
39051: LD_VAR 0 5
39055: ST_TO_ADDR
// end ;
39056: LD_VAR 0 6
39060: RET
// export function WantPlant ( unit ) ; var task ; begin
39061: LD_INT 0
39063: PPUSH
39064: PPUSH
// result := false ;
39065: LD_ADDR_VAR 0 2
39069: PUSH
39070: LD_INT 0
39072: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
39073: LD_ADDR_VAR 0 3
39077: PUSH
39078: LD_VAR 0 1
39082: PPUSH
39083: CALL_OW 437
39087: ST_TO_ADDR
// if task then
39088: LD_VAR 0 3
39092: IFFALSE 39120
// if task [ 1 ] [ 1 ] = p then
39094: LD_VAR 0 3
39098: PUSH
39099: LD_INT 1
39101: ARRAY
39102: PUSH
39103: LD_INT 1
39105: ARRAY
39106: PUSH
39107: LD_STRING p
39109: EQUAL
39110: IFFALSE 39120
// result := true ;
39112: LD_ADDR_VAR 0 2
39116: PUSH
39117: LD_INT 1
39119: ST_TO_ADDR
// end ;
39120: LD_VAR 0 2
39124: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
39125: LD_INT 0
39127: PPUSH
39128: PPUSH
39129: PPUSH
39130: PPUSH
// if pos < 1 then
39131: LD_VAR 0 2
39135: PUSH
39136: LD_INT 1
39138: LESS
39139: IFFALSE 39143
// exit ;
39141: GO 39446
// if pos = 1 then
39143: LD_VAR 0 2
39147: PUSH
39148: LD_INT 1
39150: EQUAL
39151: IFFALSE 39184
// result := Replace ( arr , pos [ 1 ] , value ) else
39153: LD_ADDR_VAR 0 4
39157: PUSH
39158: LD_VAR 0 1
39162: PPUSH
39163: LD_VAR 0 2
39167: PUSH
39168: LD_INT 1
39170: ARRAY
39171: PPUSH
39172: LD_VAR 0 3
39176: PPUSH
39177: CALL_OW 1
39181: ST_TO_ADDR
39182: GO 39446
// begin tmp := arr ;
39184: LD_ADDR_VAR 0 6
39188: PUSH
39189: LD_VAR 0 1
39193: ST_TO_ADDR
// s_arr := [ tmp ] ;
39194: LD_ADDR_VAR 0 7
39198: PUSH
39199: LD_VAR 0 6
39203: PUSH
39204: EMPTY
39205: LIST
39206: ST_TO_ADDR
// for i = 1 to pos - 1 do
39207: LD_ADDR_VAR 0 5
39211: PUSH
39212: DOUBLE
39213: LD_INT 1
39215: DEC
39216: ST_TO_ADDR
39217: LD_VAR 0 2
39221: PUSH
39222: LD_INT 1
39224: MINUS
39225: PUSH
39226: FOR_TO
39227: IFFALSE 39272
// begin tmp := tmp [ pos [ i ] ] ;
39229: LD_ADDR_VAR 0 6
39233: PUSH
39234: LD_VAR 0 6
39238: PUSH
39239: LD_VAR 0 2
39243: PUSH
39244: LD_VAR 0 5
39248: ARRAY
39249: ARRAY
39250: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
39251: LD_ADDR_VAR 0 7
39255: PUSH
39256: LD_VAR 0 7
39260: PUSH
39261: LD_VAR 0 6
39265: PUSH
39266: EMPTY
39267: LIST
39268: ADD
39269: ST_TO_ADDR
// end ;
39270: GO 39226
39272: POP
39273: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
39274: LD_ADDR_VAR 0 6
39278: PUSH
39279: LD_VAR 0 6
39283: PPUSH
39284: LD_VAR 0 2
39288: PUSH
39289: LD_VAR 0 2
39293: ARRAY
39294: PPUSH
39295: LD_VAR 0 3
39299: PPUSH
39300: CALL_OW 1
39304: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
39305: LD_ADDR_VAR 0 7
39309: PUSH
39310: LD_VAR 0 7
39314: PPUSH
39315: LD_VAR 0 7
39319: PPUSH
39320: LD_VAR 0 6
39324: PPUSH
39325: CALL_OW 1
39329: ST_TO_ADDR
// for i = s_arr downto 2 do
39330: LD_ADDR_VAR 0 5
39334: PUSH
39335: DOUBLE
39336: LD_VAR 0 7
39340: INC
39341: ST_TO_ADDR
39342: LD_INT 2
39344: PUSH
39345: FOR_DOWNTO
39346: IFFALSE 39430
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
39348: LD_ADDR_VAR 0 6
39352: PUSH
39353: LD_VAR 0 7
39357: PUSH
39358: LD_VAR 0 5
39362: PUSH
39363: LD_INT 1
39365: MINUS
39366: ARRAY
39367: PPUSH
39368: LD_VAR 0 2
39372: PUSH
39373: LD_VAR 0 5
39377: PUSH
39378: LD_INT 1
39380: MINUS
39381: ARRAY
39382: PPUSH
39383: LD_VAR 0 7
39387: PUSH
39388: LD_VAR 0 5
39392: ARRAY
39393: PPUSH
39394: CALL_OW 1
39398: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
39399: LD_ADDR_VAR 0 7
39403: PUSH
39404: LD_VAR 0 7
39408: PPUSH
39409: LD_VAR 0 5
39413: PUSH
39414: LD_INT 1
39416: MINUS
39417: PPUSH
39418: LD_VAR 0 6
39422: PPUSH
39423: CALL_OW 1
39427: ST_TO_ADDR
// end ;
39428: GO 39345
39430: POP
39431: POP
// result := s_arr [ 1 ] ;
39432: LD_ADDR_VAR 0 4
39436: PUSH
39437: LD_VAR 0 7
39441: PUSH
39442: LD_INT 1
39444: ARRAY
39445: ST_TO_ADDR
// end ; end ;
39446: LD_VAR 0 4
39450: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
39451: LD_INT 0
39453: PPUSH
39454: PPUSH
// if not list then
39455: LD_VAR 0 1
39459: NOT
39460: IFFALSE 39464
// exit ;
39462: GO 39555
// i := list [ pos1 ] ;
39464: LD_ADDR_VAR 0 5
39468: PUSH
39469: LD_VAR 0 1
39473: PUSH
39474: LD_VAR 0 2
39478: ARRAY
39479: ST_TO_ADDR
// if not i then
39480: LD_VAR 0 5
39484: NOT
39485: IFFALSE 39489
// exit ;
39487: GO 39555
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
39489: LD_ADDR_VAR 0 1
39493: PUSH
39494: LD_VAR 0 1
39498: PPUSH
39499: LD_VAR 0 2
39503: PPUSH
39504: LD_VAR 0 1
39508: PUSH
39509: LD_VAR 0 3
39513: ARRAY
39514: PPUSH
39515: CALL_OW 1
39519: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
39520: LD_ADDR_VAR 0 1
39524: PUSH
39525: LD_VAR 0 1
39529: PPUSH
39530: LD_VAR 0 3
39534: PPUSH
39535: LD_VAR 0 5
39539: PPUSH
39540: CALL_OW 1
39544: ST_TO_ADDR
// result := list ;
39545: LD_ADDR_VAR 0 4
39549: PUSH
39550: LD_VAR 0 1
39554: ST_TO_ADDR
// end ;
39555: LD_VAR 0 4
39559: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
39560: LD_INT 0
39562: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
39563: LD_ADDR_VAR 0 5
39567: PUSH
39568: LD_VAR 0 1
39572: PPUSH
39573: CALL_OW 250
39577: PPUSH
39578: LD_VAR 0 1
39582: PPUSH
39583: CALL_OW 251
39587: PPUSH
39588: LD_VAR 0 2
39592: PPUSH
39593: LD_VAR 0 3
39597: PPUSH
39598: LD_VAR 0 4
39602: PPUSH
39603: CALL 39613 0 5
39607: ST_TO_ADDR
// end ;
39608: LD_VAR 0 5
39612: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
39613: LD_INT 0
39615: PPUSH
39616: PPUSH
39617: PPUSH
39618: PPUSH
// if not list then
39619: LD_VAR 0 3
39623: NOT
39624: IFFALSE 39628
// exit ;
39626: GO 40016
// result := [ ] ;
39628: LD_ADDR_VAR 0 6
39632: PUSH
39633: EMPTY
39634: ST_TO_ADDR
// for i in list do
39635: LD_ADDR_VAR 0 7
39639: PUSH
39640: LD_VAR 0 3
39644: PUSH
39645: FOR_IN
39646: IFFALSE 39848
// begin tmp := GetDistUnitXY ( i , x , y ) ;
39648: LD_ADDR_VAR 0 9
39652: PUSH
39653: LD_VAR 0 7
39657: PPUSH
39658: LD_VAR 0 1
39662: PPUSH
39663: LD_VAR 0 2
39667: PPUSH
39668: CALL_OW 297
39672: ST_TO_ADDR
// if not result then
39673: LD_VAR 0 6
39677: NOT
39678: IFFALSE 39704
// result := [ [ i , tmp ] ] else
39680: LD_ADDR_VAR 0 6
39684: PUSH
39685: LD_VAR 0 7
39689: PUSH
39690: LD_VAR 0 9
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: EMPTY
39700: LIST
39701: ST_TO_ADDR
39702: GO 39846
// begin if result [ result ] [ 2 ] < tmp then
39704: LD_VAR 0 6
39708: PUSH
39709: LD_VAR 0 6
39713: ARRAY
39714: PUSH
39715: LD_INT 2
39717: ARRAY
39718: PUSH
39719: LD_VAR 0 9
39723: LESS
39724: IFFALSE 39766
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
39726: LD_ADDR_VAR 0 6
39730: PUSH
39731: LD_VAR 0 6
39735: PPUSH
39736: LD_VAR 0 6
39740: PUSH
39741: LD_INT 1
39743: PLUS
39744: PPUSH
39745: LD_VAR 0 7
39749: PUSH
39750: LD_VAR 0 9
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PPUSH
39759: CALL_OW 2
39763: ST_TO_ADDR
39764: GO 39846
// for j = 1 to result do
39766: LD_ADDR_VAR 0 8
39770: PUSH
39771: DOUBLE
39772: LD_INT 1
39774: DEC
39775: ST_TO_ADDR
39776: LD_VAR 0 6
39780: PUSH
39781: FOR_TO
39782: IFFALSE 39844
// begin if tmp < result [ j ] [ 2 ] then
39784: LD_VAR 0 9
39788: PUSH
39789: LD_VAR 0 6
39793: PUSH
39794: LD_VAR 0 8
39798: ARRAY
39799: PUSH
39800: LD_INT 2
39802: ARRAY
39803: LESS
39804: IFFALSE 39842
// begin result := Insert ( result , j , [ i , tmp ] ) ;
39806: LD_ADDR_VAR 0 6
39810: PUSH
39811: LD_VAR 0 6
39815: PPUSH
39816: LD_VAR 0 8
39820: PPUSH
39821: LD_VAR 0 7
39825: PUSH
39826: LD_VAR 0 9
39830: PUSH
39831: EMPTY
39832: LIST
39833: LIST
39834: PPUSH
39835: CALL_OW 2
39839: ST_TO_ADDR
// break ;
39840: GO 39844
// end ; end ;
39842: GO 39781
39844: POP
39845: POP
// end ; end ;
39846: GO 39645
39848: POP
39849: POP
// if result and not asc then
39850: LD_VAR 0 6
39854: PUSH
39855: LD_VAR 0 4
39859: NOT
39860: AND
39861: IFFALSE 39936
// begin tmp := result ;
39863: LD_ADDR_VAR 0 9
39867: PUSH
39868: LD_VAR 0 6
39872: ST_TO_ADDR
// for i = tmp downto 1 do
39873: LD_ADDR_VAR 0 7
39877: PUSH
39878: DOUBLE
39879: LD_VAR 0 9
39883: INC
39884: ST_TO_ADDR
39885: LD_INT 1
39887: PUSH
39888: FOR_DOWNTO
39889: IFFALSE 39934
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
39891: LD_ADDR_VAR 0 6
39895: PUSH
39896: LD_VAR 0 6
39900: PPUSH
39901: LD_VAR 0 9
39905: PUSH
39906: LD_VAR 0 7
39910: MINUS
39911: PUSH
39912: LD_INT 1
39914: PLUS
39915: PPUSH
39916: LD_VAR 0 9
39920: PUSH
39921: LD_VAR 0 7
39925: ARRAY
39926: PPUSH
39927: CALL_OW 1
39931: ST_TO_ADDR
39932: GO 39888
39934: POP
39935: POP
// end ; tmp := [ ] ;
39936: LD_ADDR_VAR 0 9
39940: PUSH
39941: EMPTY
39942: ST_TO_ADDR
// if mode then
39943: LD_VAR 0 5
39947: IFFALSE 40016
// begin for i = 1 to result do
39949: LD_ADDR_VAR 0 7
39953: PUSH
39954: DOUBLE
39955: LD_INT 1
39957: DEC
39958: ST_TO_ADDR
39959: LD_VAR 0 6
39963: PUSH
39964: FOR_TO
39965: IFFALSE 40004
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
39967: LD_ADDR_VAR 0 9
39971: PUSH
39972: LD_VAR 0 9
39976: PPUSH
39977: LD_VAR 0 7
39981: PPUSH
39982: LD_VAR 0 6
39986: PUSH
39987: LD_VAR 0 7
39991: ARRAY
39992: PUSH
39993: LD_INT 1
39995: ARRAY
39996: PPUSH
39997: CALL_OW 1
40001: ST_TO_ADDR
40002: GO 39964
40004: POP
40005: POP
// result := tmp ;
40006: LD_ADDR_VAR 0 6
40010: PUSH
40011: LD_VAR 0 9
40015: ST_TO_ADDR
// end ; end ;
40016: LD_VAR 0 6
40020: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40021: LD_INT 0
40023: PPUSH
40024: PPUSH
40025: PPUSH
40026: PPUSH
40027: PPUSH
40028: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40029: LD_ADDR_VAR 0 5
40033: PUSH
40034: LD_INT 0
40036: PUSH
40037: LD_INT 0
40039: PUSH
40040: LD_INT 0
40042: PUSH
40043: EMPTY
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: ST_TO_ADDR
// if not x or not y then
40051: LD_VAR 0 2
40055: NOT
40056: PUSH
40057: LD_VAR 0 3
40061: NOT
40062: OR
40063: IFFALSE 40067
// exit ;
40065: GO 41719
// if not range then
40067: LD_VAR 0 4
40071: NOT
40072: IFFALSE 40082
// range := 10 ;
40074: LD_ADDR_VAR 0 4
40078: PUSH
40079: LD_INT 10
40081: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
40082: LD_ADDR_VAR 0 8
40086: PUSH
40087: LD_INT 81
40089: PUSH
40090: LD_VAR 0 1
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 92
40101: PUSH
40102: LD_VAR 0 2
40106: PUSH
40107: LD_VAR 0 3
40111: PUSH
40112: LD_VAR 0 4
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 3
40125: PUSH
40126: LD_INT 21
40128: PUSH
40129: LD_INT 3
40131: PUSH
40132: EMPTY
40133: LIST
40134: LIST
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: LIST
40144: PPUSH
40145: CALL_OW 69
40149: ST_TO_ADDR
// if not tmp then
40150: LD_VAR 0 8
40154: NOT
40155: IFFALSE 40159
// exit ;
40157: GO 41719
// for i in tmp do
40159: LD_ADDR_VAR 0 6
40163: PUSH
40164: LD_VAR 0 8
40168: PUSH
40169: FOR_IN
40170: IFFALSE 41694
// begin points := [ 0 , 0 , 0 ] ;
40172: LD_ADDR_VAR 0 9
40176: PUSH
40177: LD_INT 0
40179: PUSH
40180: LD_INT 0
40182: PUSH
40183: LD_INT 0
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: LIST
40190: ST_TO_ADDR
// bpoints := 1 ;
40191: LD_ADDR_VAR 0 10
40195: PUSH
40196: LD_INT 1
40198: ST_TO_ADDR
// case GetType ( i ) of unit_human :
40199: LD_VAR 0 6
40203: PPUSH
40204: CALL_OW 247
40208: PUSH
40209: LD_INT 1
40211: DOUBLE
40212: EQUAL
40213: IFTRUE 40217
40215: GO 40795
40217: POP
// begin if GetClass ( i ) = 1 then
40218: LD_VAR 0 6
40222: PPUSH
40223: CALL_OW 257
40227: PUSH
40228: LD_INT 1
40230: EQUAL
40231: IFFALSE 40252
// points := [ 10 , 5 , 3 ] ;
40233: LD_ADDR_VAR 0 9
40237: PUSH
40238: LD_INT 10
40240: PUSH
40241: LD_INT 5
40243: PUSH
40244: LD_INT 3
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: LIST
40251: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
40252: LD_VAR 0 6
40256: PPUSH
40257: CALL_OW 257
40261: PUSH
40262: LD_INT 2
40264: PUSH
40265: LD_INT 3
40267: PUSH
40268: LD_INT 4
40270: PUSH
40271: EMPTY
40272: LIST
40273: LIST
40274: LIST
40275: IN
40276: IFFALSE 40297
// points := [ 3 , 2 , 1 ] ;
40278: LD_ADDR_VAR 0 9
40282: PUSH
40283: LD_INT 3
40285: PUSH
40286: LD_INT 2
40288: PUSH
40289: LD_INT 1
40291: PUSH
40292: EMPTY
40293: LIST
40294: LIST
40295: LIST
40296: ST_TO_ADDR
// if GetClass ( i ) = 5 then
40297: LD_VAR 0 6
40301: PPUSH
40302: CALL_OW 257
40306: PUSH
40307: LD_INT 5
40309: EQUAL
40310: IFFALSE 40331
// points := [ 130 , 5 , 2 ] ;
40312: LD_ADDR_VAR 0 9
40316: PUSH
40317: LD_INT 130
40319: PUSH
40320: LD_INT 5
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: LIST
40330: ST_TO_ADDR
// if GetClass ( i ) = 8 then
40331: LD_VAR 0 6
40335: PPUSH
40336: CALL_OW 257
40340: PUSH
40341: LD_INT 8
40343: EQUAL
40344: IFFALSE 40365
// points := [ 35 , 35 , 30 ] ;
40346: LD_ADDR_VAR 0 9
40350: PUSH
40351: LD_INT 35
40353: PUSH
40354: LD_INT 35
40356: PUSH
40357: LD_INT 30
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: LIST
40364: ST_TO_ADDR
// if GetClass ( i ) = 9 then
40365: LD_VAR 0 6
40369: PPUSH
40370: CALL_OW 257
40374: PUSH
40375: LD_INT 9
40377: EQUAL
40378: IFFALSE 40399
// points := [ 20 , 55 , 40 ] ;
40380: LD_ADDR_VAR 0 9
40384: PUSH
40385: LD_INT 20
40387: PUSH
40388: LD_INT 55
40390: PUSH
40391: LD_INT 40
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: LIST
40398: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
40399: LD_VAR 0 6
40403: PPUSH
40404: CALL_OW 257
40408: PUSH
40409: LD_INT 12
40411: PUSH
40412: LD_INT 16
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: IN
40419: IFFALSE 40440
// points := [ 5 , 3 , 2 ] ;
40421: LD_ADDR_VAR 0 9
40425: PUSH
40426: LD_INT 5
40428: PUSH
40429: LD_INT 3
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: LIST
40439: ST_TO_ADDR
// if GetClass ( i ) = 17 then
40440: LD_VAR 0 6
40444: PPUSH
40445: CALL_OW 257
40449: PUSH
40450: LD_INT 17
40452: EQUAL
40453: IFFALSE 40474
// points := [ 100 , 50 , 75 ] ;
40455: LD_ADDR_VAR 0 9
40459: PUSH
40460: LD_INT 100
40462: PUSH
40463: LD_INT 50
40465: PUSH
40466: LD_INT 75
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: LIST
40473: ST_TO_ADDR
// if GetClass ( i ) = 15 then
40474: LD_VAR 0 6
40478: PPUSH
40479: CALL_OW 257
40483: PUSH
40484: LD_INT 15
40486: EQUAL
40487: IFFALSE 40508
// points := [ 10 , 5 , 3 ] ;
40489: LD_ADDR_VAR 0 9
40493: PUSH
40494: LD_INT 10
40496: PUSH
40497: LD_INT 5
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: LIST
40507: ST_TO_ADDR
// if GetClass ( i ) = 14 then
40508: LD_VAR 0 6
40512: PPUSH
40513: CALL_OW 257
40517: PUSH
40518: LD_INT 14
40520: EQUAL
40521: IFFALSE 40542
// points := [ 10 , 0 , 0 ] ;
40523: LD_ADDR_VAR 0 9
40527: PUSH
40528: LD_INT 10
40530: PUSH
40531: LD_INT 0
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: LIST
40541: ST_TO_ADDR
// if GetClass ( i ) = 11 then
40542: LD_VAR 0 6
40546: PPUSH
40547: CALL_OW 257
40551: PUSH
40552: LD_INT 11
40554: EQUAL
40555: IFFALSE 40576
// points := [ 30 , 10 , 5 ] ;
40557: LD_ADDR_VAR 0 9
40561: PUSH
40562: LD_INT 30
40564: PUSH
40565: LD_INT 10
40567: PUSH
40568: LD_INT 5
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: LIST
40575: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
40576: LD_VAR 0 1
40580: PPUSH
40581: LD_INT 5
40583: PPUSH
40584: CALL_OW 321
40588: PUSH
40589: LD_INT 2
40591: EQUAL
40592: IFFALSE 40609
// bpoints := bpoints * 1.8 ;
40594: LD_ADDR_VAR 0 10
40598: PUSH
40599: LD_VAR 0 10
40603: PUSH
40604: LD_REAL  1.80000000000000E+0000
40607: MUL
40608: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
40609: LD_VAR 0 6
40613: PPUSH
40614: CALL_OW 257
40618: PUSH
40619: LD_INT 1
40621: PUSH
40622: LD_INT 2
40624: PUSH
40625: LD_INT 3
40627: PUSH
40628: LD_INT 4
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: IN
40637: PUSH
40638: LD_VAR 0 1
40642: PPUSH
40643: LD_INT 51
40645: PPUSH
40646: CALL_OW 321
40650: PUSH
40651: LD_INT 2
40653: EQUAL
40654: AND
40655: IFFALSE 40672
// bpoints := bpoints * 1.2 ;
40657: LD_ADDR_VAR 0 10
40661: PUSH
40662: LD_VAR 0 10
40666: PUSH
40667: LD_REAL  1.20000000000000E+0000
40670: MUL
40671: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
40672: LD_VAR 0 6
40676: PPUSH
40677: CALL_OW 257
40681: PUSH
40682: LD_INT 5
40684: PUSH
40685: LD_INT 7
40687: PUSH
40688: LD_INT 9
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: IN
40696: PUSH
40697: LD_VAR 0 1
40701: PPUSH
40702: LD_INT 52
40704: PPUSH
40705: CALL_OW 321
40709: PUSH
40710: LD_INT 2
40712: EQUAL
40713: AND
40714: IFFALSE 40731
// bpoints := bpoints * 1.5 ;
40716: LD_ADDR_VAR 0 10
40720: PUSH
40721: LD_VAR 0 10
40725: PUSH
40726: LD_REAL  1.50000000000000E+0000
40729: MUL
40730: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
40731: LD_VAR 0 1
40735: PPUSH
40736: LD_INT 66
40738: PPUSH
40739: CALL_OW 321
40743: PUSH
40744: LD_INT 2
40746: EQUAL
40747: IFFALSE 40764
// bpoints := bpoints * 1.1 ;
40749: LD_ADDR_VAR 0 10
40753: PUSH
40754: LD_VAR 0 10
40758: PUSH
40759: LD_REAL  1.10000000000000E+0000
40762: MUL
40763: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
40764: LD_ADDR_VAR 0 10
40768: PUSH
40769: LD_VAR 0 10
40773: PUSH
40774: LD_VAR 0 6
40778: PPUSH
40779: LD_INT 1
40781: PPUSH
40782: CALL_OW 259
40786: PUSH
40787: LD_REAL  1.15000000000000E+0000
40790: MUL
40791: MUL
40792: ST_TO_ADDR
// end ; unit_vehicle :
40793: GO 41623
40795: LD_INT 2
40797: DOUBLE
40798: EQUAL
40799: IFTRUE 40803
40801: GO 41611
40803: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
40804: LD_VAR 0 6
40808: PPUSH
40809: CALL_OW 264
40813: PUSH
40814: LD_INT 2
40816: PUSH
40817: LD_INT 42
40819: PUSH
40820: LD_INT 24
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: LIST
40827: IN
40828: IFFALSE 40849
// points := [ 25 , 5 , 3 ] ;
40830: LD_ADDR_VAR 0 9
40834: PUSH
40835: LD_INT 25
40837: PUSH
40838: LD_INT 5
40840: PUSH
40841: LD_INT 3
40843: PUSH
40844: EMPTY
40845: LIST
40846: LIST
40847: LIST
40848: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
40849: LD_VAR 0 6
40853: PPUSH
40854: CALL_OW 264
40858: PUSH
40859: LD_INT 4
40861: PUSH
40862: LD_INT 43
40864: PUSH
40865: LD_INT 25
40867: PUSH
40868: EMPTY
40869: LIST
40870: LIST
40871: LIST
40872: IN
40873: IFFALSE 40894
// points := [ 40 , 15 , 5 ] ;
40875: LD_ADDR_VAR 0 9
40879: PUSH
40880: LD_INT 40
40882: PUSH
40883: LD_INT 15
40885: PUSH
40886: LD_INT 5
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: LIST
40893: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
40894: LD_VAR 0 6
40898: PPUSH
40899: CALL_OW 264
40903: PUSH
40904: LD_INT 3
40906: PUSH
40907: LD_INT 23
40909: PUSH
40910: EMPTY
40911: LIST
40912: LIST
40913: IN
40914: IFFALSE 40935
// points := [ 7 , 25 , 8 ] ;
40916: LD_ADDR_VAR 0 9
40920: PUSH
40921: LD_INT 7
40923: PUSH
40924: LD_INT 25
40926: PUSH
40927: LD_INT 8
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: LIST
40934: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
40935: LD_VAR 0 6
40939: PPUSH
40940: CALL_OW 264
40944: PUSH
40945: LD_INT 5
40947: PUSH
40948: LD_INT 27
40950: PUSH
40951: LD_INT 44
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: LIST
40958: IN
40959: IFFALSE 40980
// points := [ 14 , 50 , 16 ] ;
40961: LD_ADDR_VAR 0 9
40965: PUSH
40966: LD_INT 14
40968: PUSH
40969: LD_INT 50
40971: PUSH
40972: LD_INT 16
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: LIST
40979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
40980: LD_VAR 0 6
40984: PPUSH
40985: CALL_OW 264
40989: PUSH
40990: LD_INT 6
40992: PUSH
40993: LD_INT 46
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: IN
41000: IFFALSE 41021
// points := [ 32 , 120 , 70 ] ;
41002: LD_ADDR_VAR 0 9
41006: PUSH
41007: LD_INT 32
41009: PUSH
41010: LD_INT 120
41012: PUSH
41013: LD_INT 70
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: LIST
41020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41021: LD_VAR 0 6
41025: PPUSH
41026: CALL_OW 264
41030: PUSH
41031: LD_INT 7
41033: PUSH
41034: LD_INT 28
41036: PUSH
41037: LD_INT 45
41039: PUSH
41040: LD_EXP 134
41044: PUSH
41045: EMPTY
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: IN
41051: IFFALSE 41072
// points := [ 35 , 20 , 45 ] ;
41053: LD_ADDR_VAR 0 9
41057: PUSH
41058: LD_INT 35
41060: PUSH
41061: LD_INT 20
41063: PUSH
41064: LD_INT 45
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: LIST
41071: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
41072: LD_VAR 0 6
41076: PPUSH
41077: CALL_OW 264
41081: PUSH
41082: LD_INT 47
41084: PUSH
41085: EMPTY
41086: LIST
41087: IN
41088: IFFALSE 41109
// points := [ 67 , 45 , 75 ] ;
41090: LD_ADDR_VAR 0 9
41094: PUSH
41095: LD_INT 67
41097: PUSH
41098: LD_INT 45
41100: PUSH
41101: LD_INT 75
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: LIST
41108: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
41109: LD_VAR 0 6
41113: PPUSH
41114: CALL_OW 264
41118: PUSH
41119: LD_INT 26
41121: PUSH
41122: EMPTY
41123: LIST
41124: IN
41125: IFFALSE 41146
// points := [ 120 , 30 , 80 ] ;
41127: LD_ADDR_VAR 0 9
41131: PUSH
41132: LD_INT 120
41134: PUSH
41135: LD_INT 30
41137: PUSH
41138: LD_INT 80
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: LIST
41145: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
41146: LD_VAR 0 6
41150: PPUSH
41151: CALL_OW 264
41155: PUSH
41156: LD_INT 22
41158: PUSH
41159: EMPTY
41160: LIST
41161: IN
41162: IFFALSE 41183
// points := [ 40 , 1 , 1 ] ;
41164: LD_ADDR_VAR 0 9
41168: PUSH
41169: LD_INT 40
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: LIST
41182: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
41183: LD_VAR 0 6
41187: PPUSH
41188: CALL_OW 264
41192: PUSH
41193: LD_INT 29
41195: PUSH
41196: EMPTY
41197: LIST
41198: IN
41199: IFFALSE 41220
// points := [ 70 , 200 , 400 ] ;
41201: LD_ADDR_VAR 0 9
41205: PUSH
41206: LD_INT 70
41208: PUSH
41209: LD_INT 200
41211: PUSH
41212: LD_INT 400
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: LIST
41219: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
41220: LD_VAR 0 6
41224: PPUSH
41225: CALL_OW 264
41229: PUSH
41230: LD_INT 14
41232: PUSH
41233: LD_INT 53
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: IN
41240: IFFALSE 41261
// points := [ 40 , 10 , 20 ] ;
41242: LD_ADDR_VAR 0 9
41246: PUSH
41247: LD_INT 40
41249: PUSH
41250: LD_INT 10
41252: PUSH
41253: LD_INT 20
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
41261: LD_VAR 0 6
41265: PPUSH
41266: CALL_OW 264
41270: PUSH
41271: LD_INT 9
41273: PUSH
41274: EMPTY
41275: LIST
41276: IN
41277: IFFALSE 41298
// points := [ 5 , 70 , 20 ] ;
41279: LD_ADDR_VAR 0 9
41283: PUSH
41284: LD_INT 5
41286: PUSH
41287: LD_INT 70
41289: PUSH
41290: LD_INT 20
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: LIST
41297: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
41298: LD_VAR 0 6
41302: PPUSH
41303: CALL_OW 264
41307: PUSH
41308: LD_INT 10
41310: PUSH
41311: EMPTY
41312: LIST
41313: IN
41314: IFFALSE 41335
// points := [ 35 , 110 , 70 ] ;
41316: LD_ADDR_VAR 0 9
41320: PUSH
41321: LD_INT 35
41323: PUSH
41324: LD_INT 110
41326: PUSH
41327: LD_INT 70
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: LIST
41334: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
41335: LD_VAR 0 6
41339: PPUSH
41340: CALL_OW 265
41344: PUSH
41345: LD_INT 25
41347: EQUAL
41348: IFFALSE 41369
// points := [ 80 , 65 , 100 ] ;
41350: LD_ADDR_VAR 0 9
41354: PUSH
41355: LD_INT 80
41357: PUSH
41358: LD_INT 65
41360: PUSH
41361: LD_INT 100
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
41369: LD_VAR 0 6
41373: PPUSH
41374: CALL_OW 263
41378: PUSH
41379: LD_INT 1
41381: EQUAL
41382: IFFALSE 41417
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
41384: LD_ADDR_VAR 0 10
41388: PUSH
41389: LD_VAR 0 10
41393: PUSH
41394: LD_VAR 0 6
41398: PPUSH
41399: CALL_OW 311
41403: PPUSH
41404: LD_INT 3
41406: PPUSH
41407: CALL_OW 259
41411: PUSH
41412: LD_INT 4
41414: MUL
41415: MUL
41416: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
41417: LD_VAR 0 6
41421: PPUSH
41422: CALL_OW 263
41426: PUSH
41427: LD_INT 2
41429: EQUAL
41430: IFFALSE 41481
// begin j := IsControledBy ( i ) ;
41432: LD_ADDR_VAR 0 7
41436: PUSH
41437: LD_VAR 0 6
41441: PPUSH
41442: CALL_OW 312
41446: ST_TO_ADDR
// if j then
41447: LD_VAR 0 7
41451: IFFALSE 41481
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
41453: LD_ADDR_VAR 0 10
41457: PUSH
41458: LD_VAR 0 10
41462: PUSH
41463: LD_VAR 0 7
41467: PPUSH
41468: LD_INT 3
41470: PPUSH
41471: CALL_OW 259
41475: PUSH
41476: LD_INT 3
41478: MUL
41479: MUL
41480: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
41481: LD_VAR 0 6
41485: PPUSH
41486: CALL_OW 264
41490: PUSH
41491: LD_INT 5
41493: PUSH
41494: LD_INT 6
41496: PUSH
41497: LD_INT 46
41499: PUSH
41500: LD_INT 44
41502: PUSH
41503: LD_INT 47
41505: PUSH
41506: LD_INT 45
41508: PUSH
41509: LD_INT 28
41511: PUSH
41512: LD_INT 7
41514: PUSH
41515: LD_INT 27
41517: PUSH
41518: LD_INT 29
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: IN
41533: PUSH
41534: LD_VAR 0 1
41538: PPUSH
41539: LD_INT 52
41541: PPUSH
41542: CALL_OW 321
41546: PUSH
41547: LD_INT 2
41549: EQUAL
41550: AND
41551: IFFALSE 41568
// bpoints := bpoints * 1.2 ;
41553: LD_ADDR_VAR 0 10
41557: PUSH
41558: LD_VAR 0 10
41562: PUSH
41563: LD_REAL  1.20000000000000E+0000
41566: MUL
41567: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
41568: LD_VAR 0 6
41572: PPUSH
41573: CALL_OW 264
41577: PUSH
41578: LD_INT 6
41580: PUSH
41581: LD_INT 46
41583: PUSH
41584: LD_INT 47
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: IN
41592: IFFALSE 41609
// bpoints := bpoints * 1.2 ;
41594: LD_ADDR_VAR 0 10
41598: PUSH
41599: LD_VAR 0 10
41603: PUSH
41604: LD_REAL  1.20000000000000E+0000
41607: MUL
41608: ST_TO_ADDR
// end ; unit_building :
41609: GO 41623
41611: LD_INT 3
41613: DOUBLE
41614: EQUAL
41615: IFTRUE 41619
41617: GO 41622
41619: POP
// ; end ;
41620: GO 41623
41622: POP
// for j = 1 to 3 do
41623: LD_ADDR_VAR 0 7
41627: PUSH
41628: DOUBLE
41629: LD_INT 1
41631: DEC
41632: ST_TO_ADDR
41633: LD_INT 3
41635: PUSH
41636: FOR_TO
41637: IFFALSE 41690
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
41639: LD_ADDR_VAR 0 5
41643: PUSH
41644: LD_VAR 0 5
41648: PPUSH
41649: LD_VAR 0 7
41653: PPUSH
41654: LD_VAR 0 5
41658: PUSH
41659: LD_VAR 0 7
41663: ARRAY
41664: PUSH
41665: LD_VAR 0 9
41669: PUSH
41670: LD_VAR 0 7
41674: ARRAY
41675: PUSH
41676: LD_VAR 0 10
41680: MUL
41681: PLUS
41682: PPUSH
41683: CALL_OW 1
41687: ST_TO_ADDR
41688: GO 41636
41690: POP
41691: POP
// end ;
41692: GO 40169
41694: POP
41695: POP
// result := Replace ( result , 4 , tmp ) ;
41696: LD_ADDR_VAR 0 5
41700: PUSH
41701: LD_VAR 0 5
41705: PPUSH
41706: LD_INT 4
41708: PPUSH
41709: LD_VAR 0 8
41713: PPUSH
41714: CALL_OW 1
41718: ST_TO_ADDR
// end ;
41719: LD_VAR 0 5
41723: RET
// export function DangerAtRange ( unit , range ) ; begin
41724: LD_INT 0
41726: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
41727: LD_ADDR_VAR 0 3
41731: PUSH
41732: LD_VAR 0 1
41736: PPUSH
41737: CALL_OW 255
41741: PPUSH
41742: LD_VAR 0 1
41746: PPUSH
41747: CALL_OW 250
41751: PPUSH
41752: LD_VAR 0 1
41756: PPUSH
41757: CALL_OW 251
41761: PPUSH
41762: LD_VAR 0 2
41766: PPUSH
41767: CALL 40021 0 4
41771: ST_TO_ADDR
// end ;
41772: LD_VAR 0 3
41776: RET
// export function DangerInArea ( side , area ) ; begin
41777: LD_INT 0
41779: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
41780: LD_ADDR_VAR 0 3
41784: PUSH
41785: LD_VAR 0 2
41789: PPUSH
41790: LD_INT 81
41792: PUSH
41793: LD_VAR 0 1
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PPUSH
41802: CALL_OW 70
41806: ST_TO_ADDR
// end ;
41807: LD_VAR 0 3
41811: RET
// export function IsExtension ( b ) ; begin
41812: LD_INT 0
41814: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
41815: LD_ADDR_VAR 0 2
41819: PUSH
41820: LD_VAR 0 1
41824: PUSH
41825: LD_INT 23
41827: PUSH
41828: LD_INT 20
41830: PUSH
41831: LD_INT 22
41833: PUSH
41834: LD_INT 17
41836: PUSH
41837: LD_INT 24
41839: PUSH
41840: LD_INT 21
41842: PUSH
41843: LD_INT 19
41845: PUSH
41846: LD_INT 16
41848: PUSH
41849: LD_INT 25
41851: PUSH
41852: LD_INT 18
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: LIST
41859: LIST
41860: LIST
41861: LIST
41862: LIST
41863: LIST
41864: LIST
41865: LIST
41866: IN
41867: ST_TO_ADDR
// end ;
41868: LD_VAR 0 2
41872: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
41873: LD_INT 0
41875: PPUSH
41876: PPUSH
41877: PPUSH
// result := [ ] ;
41878: LD_ADDR_VAR 0 4
41882: PUSH
41883: EMPTY
41884: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
41885: LD_ADDR_VAR 0 5
41889: PUSH
41890: LD_VAR 0 2
41894: PPUSH
41895: LD_INT 21
41897: PUSH
41898: LD_INT 3
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PPUSH
41905: CALL_OW 70
41909: ST_TO_ADDR
// if not tmp then
41910: LD_VAR 0 5
41914: NOT
41915: IFFALSE 41919
// exit ;
41917: GO 41983
// if checkLink then
41919: LD_VAR 0 3
41923: IFFALSE 41973
// begin for i in tmp do
41925: LD_ADDR_VAR 0 6
41929: PUSH
41930: LD_VAR 0 5
41934: PUSH
41935: FOR_IN
41936: IFFALSE 41971
// if GetBase ( i ) <> base then
41938: LD_VAR 0 6
41942: PPUSH
41943: CALL_OW 274
41947: PUSH
41948: LD_VAR 0 1
41952: NONEQUAL
41953: IFFALSE 41969
// ComLinkToBase ( base , i ) ;
41955: LD_VAR 0 1
41959: PPUSH
41960: LD_VAR 0 6
41964: PPUSH
41965: CALL_OW 169
41969: GO 41935
41971: POP
41972: POP
// end ; result := tmp ;
41973: LD_ADDR_VAR 0 4
41977: PUSH
41978: LD_VAR 0 5
41982: ST_TO_ADDR
// end ;
41983: LD_VAR 0 4
41987: RET
// export function ComComplete ( units , b ) ; var i ; begin
41988: LD_INT 0
41990: PPUSH
41991: PPUSH
// if not units then
41992: LD_VAR 0 1
41996: NOT
41997: IFFALSE 42001
// exit ;
41999: GO 42091
// for i in units do
42001: LD_ADDR_VAR 0 4
42005: PUSH
42006: LD_VAR 0 1
42010: PUSH
42011: FOR_IN
42012: IFFALSE 42089
// if BuildingStatus ( b ) = bs_build then
42014: LD_VAR 0 2
42018: PPUSH
42019: CALL_OW 461
42023: PUSH
42024: LD_INT 1
42026: EQUAL
42027: IFFALSE 42087
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42029: LD_VAR 0 4
42033: PPUSH
42034: LD_STRING h
42036: PUSH
42037: LD_VAR 0 2
42041: PPUSH
42042: CALL_OW 250
42046: PUSH
42047: LD_VAR 0 2
42051: PPUSH
42052: CALL_OW 251
42056: PUSH
42057: LD_VAR 0 2
42061: PUSH
42062: LD_INT 0
42064: PUSH
42065: LD_INT 0
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: PUSH
42080: EMPTY
42081: LIST
42082: PPUSH
42083: CALL_OW 446
42087: GO 42011
42089: POP
42090: POP
// end ;
42091: LD_VAR 0 3
42095: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
42096: LD_INT 0
42098: PPUSH
42099: PPUSH
42100: PPUSH
42101: PPUSH
42102: PPUSH
42103: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
42104: LD_VAR 0 1
42108: NOT
42109: PUSH
42110: LD_VAR 0 1
42114: PPUSH
42115: CALL_OW 263
42119: PUSH
42120: LD_INT 2
42122: NONEQUAL
42123: OR
42124: IFFALSE 42128
// exit ;
42126: GO 42444
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
42128: LD_ADDR_VAR 0 6
42132: PUSH
42133: LD_INT 22
42135: PUSH
42136: LD_VAR 0 1
42140: PPUSH
42141: CALL_OW 255
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 2
42152: PUSH
42153: LD_INT 30
42155: PUSH
42156: LD_INT 36
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 34
42165: PUSH
42166: LD_INT 31
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: LIST
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PPUSH
42182: CALL_OW 69
42186: ST_TO_ADDR
// if not tmp then
42187: LD_VAR 0 6
42191: NOT
42192: IFFALSE 42196
// exit ;
42194: GO 42444
// result := [ ] ;
42196: LD_ADDR_VAR 0 2
42200: PUSH
42201: EMPTY
42202: ST_TO_ADDR
// for i in tmp do
42203: LD_ADDR_VAR 0 3
42207: PUSH
42208: LD_VAR 0 6
42212: PUSH
42213: FOR_IN
42214: IFFALSE 42285
// begin t := UnitsInside ( i ) ;
42216: LD_ADDR_VAR 0 4
42220: PUSH
42221: LD_VAR 0 3
42225: PPUSH
42226: CALL_OW 313
42230: ST_TO_ADDR
// if t then
42231: LD_VAR 0 4
42235: IFFALSE 42283
// for j in t do
42237: LD_ADDR_VAR 0 7
42241: PUSH
42242: LD_VAR 0 4
42246: PUSH
42247: FOR_IN
42248: IFFALSE 42281
// result := Replace ( result , result + 1 , j ) ;
42250: LD_ADDR_VAR 0 2
42254: PUSH
42255: LD_VAR 0 2
42259: PPUSH
42260: LD_VAR 0 2
42264: PUSH
42265: LD_INT 1
42267: PLUS
42268: PPUSH
42269: LD_VAR 0 7
42273: PPUSH
42274: CALL_OW 1
42278: ST_TO_ADDR
42279: GO 42247
42281: POP
42282: POP
// end ;
42283: GO 42213
42285: POP
42286: POP
// if not result then
42287: LD_VAR 0 2
42291: NOT
42292: IFFALSE 42296
// exit ;
42294: GO 42444
// mech := result [ 1 ] ;
42296: LD_ADDR_VAR 0 5
42300: PUSH
42301: LD_VAR 0 2
42305: PUSH
42306: LD_INT 1
42308: ARRAY
42309: ST_TO_ADDR
// if result > 1 then
42310: LD_VAR 0 2
42314: PUSH
42315: LD_INT 1
42317: GREATER
42318: IFFALSE 42430
// begin for i = 2 to result do
42320: LD_ADDR_VAR 0 3
42324: PUSH
42325: DOUBLE
42326: LD_INT 2
42328: DEC
42329: ST_TO_ADDR
42330: LD_VAR 0 2
42334: PUSH
42335: FOR_TO
42336: IFFALSE 42428
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
42338: LD_ADDR_VAR 0 4
42342: PUSH
42343: LD_VAR 0 2
42347: PUSH
42348: LD_VAR 0 3
42352: ARRAY
42353: PPUSH
42354: LD_INT 3
42356: PPUSH
42357: CALL_OW 259
42361: PUSH
42362: LD_VAR 0 2
42366: PUSH
42367: LD_VAR 0 3
42371: ARRAY
42372: PPUSH
42373: CALL_OW 432
42377: MINUS
42378: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
42379: LD_VAR 0 4
42383: PUSH
42384: LD_VAR 0 5
42388: PPUSH
42389: LD_INT 3
42391: PPUSH
42392: CALL_OW 259
42396: PUSH
42397: LD_VAR 0 5
42401: PPUSH
42402: CALL_OW 432
42406: MINUS
42407: GREATEREQUAL
42408: IFFALSE 42426
// mech := result [ i ] ;
42410: LD_ADDR_VAR 0 5
42414: PUSH
42415: LD_VAR 0 2
42419: PUSH
42420: LD_VAR 0 3
42424: ARRAY
42425: ST_TO_ADDR
// end ;
42426: GO 42335
42428: POP
42429: POP
// end ; ComLinkTo ( vehicle , mech ) ;
42430: LD_VAR 0 1
42434: PPUSH
42435: LD_VAR 0 5
42439: PPUSH
42440: CALL_OW 135
// end ;
42444: LD_VAR 0 2
42448: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
42449: LD_INT 0
42451: PPUSH
42452: PPUSH
42453: PPUSH
42454: PPUSH
42455: PPUSH
42456: PPUSH
42457: PPUSH
42458: PPUSH
42459: PPUSH
42460: PPUSH
42461: PPUSH
42462: PPUSH
42463: PPUSH
// result := [ ] ;
42464: LD_ADDR_VAR 0 7
42468: PUSH
42469: EMPTY
42470: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
42471: LD_VAR 0 1
42475: PPUSH
42476: CALL_OW 266
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 1
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: IN
42491: NOT
42492: IFFALSE 42496
// exit ;
42494: GO 44130
// if name then
42496: LD_VAR 0 3
42500: IFFALSE 42516
// SetBName ( base_dep , name ) ;
42502: LD_VAR 0 1
42506: PPUSH
42507: LD_VAR 0 3
42511: PPUSH
42512: CALL_OW 500
// base := GetBase ( base_dep ) ;
42516: LD_ADDR_VAR 0 15
42520: PUSH
42521: LD_VAR 0 1
42525: PPUSH
42526: CALL_OW 274
42530: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
42531: LD_ADDR_VAR 0 16
42535: PUSH
42536: LD_VAR 0 1
42540: PPUSH
42541: CALL_OW 255
42545: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
42546: LD_ADDR_VAR 0 17
42550: PUSH
42551: LD_VAR 0 1
42555: PPUSH
42556: CALL_OW 248
42560: ST_TO_ADDR
// if sources then
42561: LD_VAR 0 5
42565: IFFALSE 42612
// for i = 1 to 3 do
42567: LD_ADDR_VAR 0 8
42571: PUSH
42572: DOUBLE
42573: LD_INT 1
42575: DEC
42576: ST_TO_ADDR
42577: LD_INT 3
42579: PUSH
42580: FOR_TO
42581: IFFALSE 42610
// AddResourceType ( base , i , sources [ i ] ) ;
42583: LD_VAR 0 15
42587: PPUSH
42588: LD_VAR 0 8
42592: PPUSH
42593: LD_VAR 0 5
42597: PUSH
42598: LD_VAR 0 8
42602: ARRAY
42603: PPUSH
42604: CALL_OW 276
42608: GO 42580
42610: POP
42611: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
42612: LD_ADDR_VAR 0 18
42616: PUSH
42617: LD_VAR 0 15
42621: PPUSH
42622: LD_VAR 0 2
42626: PPUSH
42627: LD_INT 1
42629: PPUSH
42630: CALL 41873 0 3
42634: ST_TO_ADDR
// InitHc ;
42635: CALL_OW 19
// InitUc ;
42639: CALL_OW 18
// uc_side := side ;
42643: LD_ADDR_OWVAR 20
42647: PUSH
42648: LD_VAR 0 16
42652: ST_TO_ADDR
// uc_nation := nation ;
42653: LD_ADDR_OWVAR 21
42657: PUSH
42658: LD_VAR 0 17
42662: ST_TO_ADDR
// if buildings then
42663: LD_VAR 0 18
42667: IFFALSE 43989
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
42669: LD_ADDR_VAR 0 19
42673: PUSH
42674: LD_VAR 0 18
42678: PPUSH
42679: LD_INT 2
42681: PUSH
42682: LD_INT 30
42684: PUSH
42685: LD_INT 29
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 30
42694: PUSH
42695: LD_INT 30
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: LIST
42706: PPUSH
42707: CALL_OW 72
42711: ST_TO_ADDR
// if tmp then
42712: LD_VAR 0 19
42716: IFFALSE 42764
// for i in tmp do
42718: LD_ADDR_VAR 0 8
42722: PUSH
42723: LD_VAR 0 19
42727: PUSH
42728: FOR_IN
42729: IFFALSE 42762
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
42731: LD_VAR 0 8
42735: PPUSH
42736: CALL_OW 250
42740: PPUSH
42741: LD_VAR 0 8
42745: PPUSH
42746: CALL_OW 251
42750: PPUSH
42751: LD_VAR 0 16
42755: PPUSH
42756: CALL_OW 441
42760: GO 42728
42762: POP
42763: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
42764: LD_VAR 0 18
42768: PPUSH
42769: LD_INT 2
42771: PUSH
42772: LD_INT 30
42774: PUSH
42775: LD_INT 32
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 30
42784: PUSH
42785: LD_INT 33
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: PPUSH
42797: CALL_OW 72
42801: IFFALSE 42889
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
42803: LD_ADDR_VAR 0 8
42807: PUSH
42808: LD_VAR 0 18
42812: PPUSH
42813: LD_INT 2
42815: PUSH
42816: LD_INT 30
42818: PUSH
42819: LD_INT 32
42821: PUSH
42822: EMPTY
42823: LIST
42824: LIST
42825: PUSH
42826: LD_INT 30
42828: PUSH
42829: LD_INT 33
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: LIST
42840: PPUSH
42841: CALL_OW 72
42845: PUSH
42846: FOR_IN
42847: IFFALSE 42887
// begin if not GetBWeapon ( i ) then
42849: LD_VAR 0 8
42853: PPUSH
42854: CALL_OW 269
42858: NOT
42859: IFFALSE 42885
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
42861: LD_VAR 0 8
42865: PPUSH
42866: LD_VAR 0 8
42870: PPUSH
42871: LD_VAR 0 2
42875: PPUSH
42876: CALL 44135 0 2
42880: PPUSH
42881: CALL_OW 431
// end ;
42885: GO 42846
42887: POP
42888: POP
// end ; for i = 1 to personel do
42889: LD_ADDR_VAR 0 8
42893: PUSH
42894: DOUBLE
42895: LD_INT 1
42897: DEC
42898: ST_TO_ADDR
42899: LD_VAR 0 6
42903: PUSH
42904: FOR_TO
42905: IFFALSE 43969
// begin if i > 4 then
42907: LD_VAR 0 8
42911: PUSH
42912: LD_INT 4
42914: GREATER
42915: IFFALSE 42919
// break ;
42917: GO 43969
// case i of 1 :
42919: LD_VAR 0 8
42923: PUSH
42924: LD_INT 1
42926: DOUBLE
42927: EQUAL
42928: IFTRUE 42932
42930: GO 43012
42932: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
42933: LD_ADDR_VAR 0 12
42937: PUSH
42938: LD_VAR 0 18
42942: PPUSH
42943: LD_INT 22
42945: PUSH
42946: LD_VAR 0 16
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 58
42957: PUSH
42958: EMPTY
42959: LIST
42960: PUSH
42961: LD_INT 2
42963: PUSH
42964: LD_INT 30
42966: PUSH
42967: LD_INT 32
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 30
42976: PUSH
42977: LD_INT 4
42979: PUSH
42980: EMPTY
42981: LIST
42982: LIST
42983: PUSH
42984: LD_INT 30
42986: PUSH
42987: LD_INT 5
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: EMPTY
42995: LIST
42996: LIST
42997: LIST
42998: LIST
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: LIST
43004: PPUSH
43005: CALL_OW 72
43009: ST_TO_ADDR
43010: GO 43234
43012: LD_INT 2
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43020
43018: GO 43082
43020: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43021: LD_ADDR_VAR 0 12
43025: PUSH
43026: LD_VAR 0 18
43030: PPUSH
43031: LD_INT 22
43033: PUSH
43034: LD_VAR 0 16
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: PUSH
43046: LD_INT 30
43048: PUSH
43049: LD_INT 0
43051: PUSH
43052: EMPTY
43053: LIST
43054: LIST
43055: PUSH
43056: LD_INT 30
43058: PUSH
43059: LD_INT 1
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: LIST
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PPUSH
43075: CALL_OW 72
43079: ST_TO_ADDR
43080: GO 43234
43082: LD_INT 3
43084: DOUBLE
43085: EQUAL
43086: IFTRUE 43090
43088: GO 43152
43090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
43091: LD_ADDR_VAR 0 12
43095: PUSH
43096: LD_VAR 0 18
43100: PPUSH
43101: LD_INT 22
43103: PUSH
43104: LD_VAR 0 16
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 30
43118: PUSH
43119: LD_INT 2
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 30
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PPUSH
43145: CALL_OW 72
43149: ST_TO_ADDR
43150: GO 43234
43152: LD_INT 4
43154: DOUBLE
43155: EQUAL
43156: IFTRUE 43160
43158: GO 43233
43160: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
43161: LD_ADDR_VAR 0 12
43165: PUSH
43166: LD_VAR 0 18
43170: PPUSH
43171: LD_INT 22
43173: PUSH
43174: LD_VAR 0 16
43178: PUSH
43179: EMPTY
43180: LIST
43181: LIST
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: LD_INT 30
43188: PUSH
43189: LD_INT 6
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 30
43198: PUSH
43199: LD_INT 7
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 30
43208: PUSH
43209: LD_INT 8
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PPUSH
43226: CALL_OW 72
43230: ST_TO_ADDR
43231: GO 43234
43233: POP
// if i = 1 then
43234: LD_VAR 0 8
43238: PUSH
43239: LD_INT 1
43241: EQUAL
43242: IFFALSE 43353
// begin tmp := [ ] ;
43244: LD_ADDR_VAR 0 19
43248: PUSH
43249: EMPTY
43250: ST_TO_ADDR
// for j in f do
43251: LD_ADDR_VAR 0 9
43255: PUSH
43256: LD_VAR 0 12
43260: PUSH
43261: FOR_IN
43262: IFFALSE 43335
// if GetBType ( j ) = b_bunker then
43264: LD_VAR 0 9
43268: PPUSH
43269: CALL_OW 266
43273: PUSH
43274: LD_INT 32
43276: EQUAL
43277: IFFALSE 43304
// tmp := Insert ( tmp , 1 , j ) else
43279: LD_ADDR_VAR 0 19
43283: PUSH
43284: LD_VAR 0 19
43288: PPUSH
43289: LD_INT 1
43291: PPUSH
43292: LD_VAR 0 9
43296: PPUSH
43297: CALL_OW 2
43301: ST_TO_ADDR
43302: GO 43333
// tmp := Insert ( tmp , tmp + 1 , j ) ;
43304: LD_ADDR_VAR 0 19
43308: PUSH
43309: LD_VAR 0 19
43313: PPUSH
43314: LD_VAR 0 19
43318: PUSH
43319: LD_INT 1
43321: PLUS
43322: PPUSH
43323: LD_VAR 0 9
43327: PPUSH
43328: CALL_OW 2
43332: ST_TO_ADDR
43333: GO 43261
43335: POP
43336: POP
// if tmp then
43337: LD_VAR 0 19
43341: IFFALSE 43353
// f := tmp ;
43343: LD_ADDR_VAR 0 12
43347: PUSH
43348: LD_VAR 0 19
43352: ST_TO_ADDR
// end ; x := personel [ i ] ;
43353: LD_ADDR_VAR 0 13
43357: PUSH
43358: LD_VAR 0 6
43362: PUSH
43363: LD_VAR 0 8
43367: ARRAY
43368: ST_TO_ADDR
// if x = - 1 then
43369: LD_VAR 0 13
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: EQUAL
43378: IFFALSE 43587
// begin for j in f do
43380: LD_ADDR_VAR 0 9
43384: PUSH
43385: LD_VAR 0 12
43389: PUSH
43390: FOR_IN
43391: IFFALSE 43583
// repeat InitHc ;
43393: CALL_OW 19
// if GetBType ( j ) = b_barracks then
43397: LD_VAR 0 9
43401: PPUSH
43402: CALL_OW 266
43406: PUSH
43407: LD_INT 5
43409: EQUAL
43410: IFFALSE 43480
// begin if UnitsInside ( j ) < 3 then
43412: LD_VAR 0 9
43416: PPUSH
43417: CALL_OW 313
43421: PUSH
43422: LD_INT 3
43424: LESS
43425: IFFALSE 43461
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43427: LD_INT 0
43429: PPUSH
43430: LD_INT 5
43432: PUSH
43433: LD_INT 8
43435: PUSH
43436: LD_INT 9
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: LIST
43443: PUSH
43444: LD_VAR 0 17
43448: ARRAY
43449: PPUSH
43450: LD_VAR 0 4
43454: PPUSH
43455: CALL_OW 380
43459: GO 43478
// PrepareHuman ( false , i , skill ) ;
43461: LD_INT 0
43463: PPUSH
43464: LD_VAR 0 8
43468: PPUSH
43469: LD_VAR 0 4
43473: PPUSH
43474: CALL_OW 380
// end else
43478: GO 43497
// PrepareHuman ( false , i , skill ) ;
43480: LD_INT 0
43482: PPUSH
43483: LD_VAR 0 8
43487: PPUSH
43488: LD_VAR 0 4
43492: PPUSH
43493: CALL_OW 380
// un := CreateHuman ;
43497: LD_ADDR_VAR 0 14
43501: PUSH
43502: CALL_OW 44
43506: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43507: LD_ADDR_VAR 0 7
43511: PUSH
43512: LD_VAR 0 7
43516: PPUSH
43517: LD_INT 1
43519: PPUSH
43520: LD_VAR 0 14
43524: PPUSH
43525: CALL_OW 2
43529: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
43530: LD_VAR 0 14
43534: PPUSH
43535: LD_VAR 0 9
43539: PPUSH
43540: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
43544: LD_VAR 0 9
43548: PPUSH
43549: CALL_OW 313
43553: PUSH
43554: LD_INT 6
43556: EQUAL
43557: PUSH
43558: LD_VAR 0 9
43562: PPUSH
43563: CALL_OW 266
43567: PUSH
43568: LD_INT 32
43570: PUSH
43571: LD_INT 31
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: IN
43578: OR
43579: IFFALSE 43393
43581: GO 43390
43583: POP
43584: POP
// end else
43585: GO 43967
// for j = 1 to x do
43587: LD_ADDR_VAR 0 9
43591: PUSH
43592: DOUBLE
43593: LD_INT 1
43595: DEC
43596: ST_TO_ADDR
43597: LD_VAR 0 13
43601: PUSH
43602: FOR_TO
43603: IFFALSE 43965
// begin InitHc ;
43605: CALL_OW 19
// if not f then
43609: LD_VAR 0 12
43613: NOT
43614: IFFALSE 43703
// begin PrepareHuman ( false , i , skill ) ;
43616: LD_INT 0
43618: PPUSH
43619: LD_VAR 0 8
43623: PPUSH
43624: LD_VAR 0 4
43628: PPUSH
43629: CALL_OW 380
// un := CreateHuman ;
43633: LD_ADDR_VAR 0 14
43637: PUSH
43638: CALL_OW 44
43642: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43643: LD_ADDR_VAR 0 7
43647: PUSH
43648: LD_VAR 0 7
43652: PPUSH
43653: LD_INT 1
43655: PPUSH
43656: LD_VAR 0 14
43660: PPUSH
43661: CALL_OW 2
43665: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
43666: LD_VAR 0 14
43670: PPUSH
43671: LD_VAR 0 1
43675: PPUSH
43676: CALL_OW 250
43680: PPUSH
43681: LD_VAR 0 1
43685: PPUSH
43686: CALL_OW 251
43690: PPUSH
43691: LD_INT 10
43693: PPUSH
43694: LD_INT 0
43696: PPUSH
43697: CALL_OW 50
// continue ;
43701: GO 43602
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
43703: LD_VAR 0 12
43707: PUSH
43708: LD_INT 1
43710: ARRAY
43711: PPUSH
43712: CALL_OW 313
43716: PUSH
43717: LD_VAR 0 12
43721: PUSH
43722: LD_INT 1
43724: ARRAY
43725: PPUSH
43726: CALL_OW 266
43730: PUSH
43731: LD_INT 32
43733: PUSH
43734: LD_INT 31
43736: PUSH
43737: EMPTY
43738: LIST
43739: LIST
43740: IN
43741: AND
43742: PUSH
43743: LD_VAR 0 12
43747: PUSH
43748: LD_INT 1
43750: ARRAY
43751: PPUSH
43752: CALL_OW 313
43756: PUSH
43757: LD_INT 6
43759: EQUAL
43760: OR
43761: IFFALSE 43781
// f := Delete ( f , 1 ) ;
43763: LD_ADDR_VAR 0 12
43767: PUSH
43768: LD_VAR 0 12
43772: PPUSH
43773: LD_INT 1
43775: PPUSH
43776: CALL_OW 3
43780: ST_TO_ADDR
// if not f then
43781: LD_VAR 0 12
43785: NOT
43786: IFFALSE 43804
// begin x := x + 2 ;
43788: LD_ADDR_VAR 0 13
43792: PUSH
43793: LD_VAR 0 13
43797: PUSH
43798: LD_INT 2
43800: PLUS
43801: ST_TO_ADDR
// continue ;
43802: GO 43602
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
43804: LD_VAR 0 12
43808: PUSH
43809: LD_INT 1
43811: ARRAY
43812: PPUSH
43813: CALL_OW 266
43817: PUSH
43818: LD_INT 5
43820: EQUAL
43821: IFFALSE 43895
// begin if UnitsInside ( f [ 1 ] ) < 3 then
43823: LD_VAR 0 12
43827: PUSH
43828: LD_INT 1
43830: ARRAY
43831: PPUSH
43832: CALL_OW 313
43836: PUSH
43837: LD_INT 3
43839: LESS
43840: IFFALSE 43876
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
43842: LD_INT 0
43844: PPUSH
43845: LD_INT 5
43847: PUSH
43848: LD_INT 8
43850: PUSH
43851: LD_INT 9
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: LIST
43858: PUSH
43859: LD_VAR 0 17
43863: ARRAY
43864: PPUSH
43865: LD_VAR 0 4
43869: PPUSH
43870: CALL_OW 380
43874: GO 43893
// PrepareHuman ( false , i , skill ) ;
43876: LD_INT 0
43878: PPUSH
43879: LD_VAR 0 8
43883: PPUSH
43884: LD_VAR 0 4
43888: PPUSH
43889: CALL_OW 380
// end else
43893: GO 43912
// PrepareHuman ( false , i , skill ) ;
43895: LD_INT 0
43897: PPUSH
43898: LD_VAR 0 8
43902: PPUSH
43903: LD_VAR 0 4
43907: PPUSH
43908: CALL_OW 380
// un := CreateHuman ;
43912: LD_ADDR_VAR 0 14
43916: PUSH
43917: CALL_OW 44
43921: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
43922: LD_ADDR_VAR 0 7
43926: PUSH
43927: LD_VAR 0 7
43931: PPUSH
43932: LD_INT 1
43934: PPUSH
43935: LD_VAR 0 14
43939: PPUSH
43940: CALL_OW 2
43944: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
43945: LD_VAR 0 14
43949: PPUSH
43950: LD_VAR 0 12
43954: PUSH
43955: LD_INT 1
43957: ARRAY
43958: PPUSH
43959: CALL_OW 52
// end ;
43963: GO 43602
43965: POP
43966: POP
// end ;
43967: GO 42904
43969: POP
43970: POP
// result := result ^ buildings ;
43971: LD_ADDR_VAR 0 7
43975: PUSH
43976: LD_VAR 0 7
43980: PUSH
43981: LD_VAR 0 18
43985: ADD
43986: ST_TO_ADDR
// end else
43987: GO 44130
// begin for i = 1 to personel do
43989: LD_ADDR_VAR 0 8
43993: PUSH
43994: DOUBLE
43995: LD_INT 1
43997: DEC
43998: ST_TO_ADDR
43999: LD_VAR 0 6
44003: PUSH
44004: FOR_TO
44005: IFFALSE 44128
// begin if i > 4 then
44007: LD_VAR 0 8
44011: PUSH
44012: LD_INT 4
44014: GREATER
44015: IFFALSE 44019
// break ;
44017: GO 44128
// x := personel [ i ] ;
44019: LD_ADDR_VAR 0 13
44023: PUSH
44024: LD_VAR 0 6
44028: PUSH
44029: LD_VAR 0 8
44033: ARRAY
44034: ST_TO_ADDR
// if x = - 1 then
44035: LD_VAR 0 13
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: EQUAL
44044: IFFALSE 44048
// continue ;
44046: GO 44004
// PrepareHuman ( false , i , skill ) ;
44048: LD_INT 0
44050: PPUSH
44051: LD_VAR 0 8
44055: PPUSH
44056: LD_VAR 0 4
44060: PPUSH
44061: CALL_OW 380
// un := CreateHuman ;
44065: LD_ADDR_VAR 0 14
44069: PUSH
44070: CALL_OW 44
44074: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44075: LD_VAR 0 14
44079: PPUSH
44080: LD_VAR 0 1
44084: PPUSH
44085: CALL_OW 250
44089: PPUSH
44090: LD_VAR 0 1
44094: PPUSH
44095: CALL_OW 251
44099: PPUSH
44100: LD_INT 10
44102: PPUSH
44103: LD_INT 0
44105: PPUSH
44106: CALL_OW 50
// result := result ^ un ;
44110: LD_ADDR_VAR 0 7
44114: PUSH
44115: LD_VAR 0 7
44119: PUSH
44120: LD_VAR 0 14
44124: ADD
44125: ST_TO_ADDR
// end ;
44126: GO 44004
44128: POP
44129: POP
// end ; end ;
44130: LD_VAR 0 7
44134: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
44135: LD_INT 0
44137: PPUSH
44138: PPUSH
44139: PPUSH
44140: PPUSH
44141: PPUSH
44142: PPUSH
44143: PPUSH
44144: PPUSH
44145: PPUSH
44146: PPUSH
44147: PPUSH
44148: PPUSH
44149: PPUSH
44150: PPUSH
44151: PPUSH
44152: PPUSH
// result := false ;
44153: LD_ADDR_VAR 0 3
44157: PUSH
44158: LD_INT 0
44160: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
44161: LD_VAR 0 1
44165: NOT
44166: PUSH
44167: LD_VAR 0 1
44171: PPUSH
44172: CALL_OW 266
44176: PUSH
44177: LD_INT 32
44179: PUSH
44180: LD_INT 33
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: IN
44187: NOT
44188: OR
44189: IFFALSE 44193
// exit ;
44191: GO 45302
// nat := GetNation ( tower ) ;
44193: LD_ADDR_VAR 0 12
44197: PUSH
44198: LD_VAR 0 1
44202: PPUSH
44203: CALL_OW 248
44207: ST_TO_ADDR
// side := GetSide ( tower ) ;
44208: LD_ADDR_VAR 0 16
44212: PUSH
44213: LD_VAR 0 1
44217: PPUSH
44218: CALL_OW 255
44222: ST_TO_ADDR
// x := GetX ( tower ) ;
44223: LD_ADDR_VAR 0 10
44227: PUSH
44228: LD_VAR 0 1
44232: PPUSH
44233: CALL_OW 250
44237: ST_TO_ADDR
// y := GetY ( tower ) ;
44238: LD_ADDR_VAR 0 11
44242: PUSH
44243: LD_VAR 0 1
44247: PPUSH
44248: CALL_OW 251
44252: ST_TO_ADDR
// if not x or not y then
44253: LD_VAR 0 10
44257: NOT
44258: PUSH
44259: LD_VAR 0 11
44263: NOT
44264: OR
44265: IFFALSE 44269
// exit ;
44267: GO 45302
// weapon := 0 ;
44269: LD_ADDR_VAR 0 18
44273: PUSH
44274: LD_INT 0
44276: ST_TO_ADDR
// fac_list := [ ] ;
44277: LD_ADDR_VAR 0 17
44281: PUSH
44282: EMPTY
44283: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
44284: LD_ADDR_VAR 0 6
44288: PUSH
44289: LD_VAR 0 1
44293: PPUSH
44294: CALL_OW 274
44298: PPUSH
44299: LD_VAR 0 2
44303: PPUSH
44304: LD_INT 0
44306: PPUSH
44307: CALL 41873 0 3
44311: PPUSH
44312: LD_INT 30
44314: PUSH
44315: LD_INT 3
44317: PUSH
44318: EMPTY
44319: LIST
44320: LIST
44321: PPUSH
44322: CALL_OW 72
44326: ST_TO_ADDR
// if not factories then
44327: LD_VAR 0 6
44331: NOT
44332: IFFALSE 44336
// exit ;
44334: GO 45302
// for i in factories do
44336: LD_ADDR_VAR 0 8
44340: PUSH
44341: LD_VAR 0 6
44345: PUSH
44346: FOR_IN
44347: IFFALSE 44372
// fac_list := fac_list union AvailableWeaponList ( i ) ;
44349: LD_ADDR_VAR 0 17
44353: PUSH
44354: LD_VAR 0 17
44358: PUSH
44359: LD_VAR 0 8
44363: PPUSH
44364: CALL_OW 478
44368: UNION
44369: ST_TO_ADDR
44370: GO 44346
44372: POP
44373: POP
// if not fac_list then
44374: LD_VAR 0 17
44378: NOT
44379: IFFALSE 44383
// exit ;
44381: GO 45302
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
44383: LD_ADDR_VAR 0 5
44387: PUSH
44388: LD_INT 4
44390: PUSH
44391: LD_INT 5
44393: PUSH
44394: LD_INT 9
44396: PUSH
44397: LD_INT 10
44399: PUSH
44400: LD_INT 6
44402: PUSH
44403: LD_INT 7
44405: PUSH
44406: LD_INT 11
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: PUSH
44418: LD_INT 27
44420: PUSH
44421: LD_INT 28
44423: PUSH
44424: LD_INT 26
44426: PUSH
44427: LD_INT 30
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 43
44438: PUSH
44439: LD_INT 44
44441: PUSH
44442: LD_INT 46
44444: PUSH
44445: LD_INT 45
44447: PUSH
44448: LD_INT 47
44450: PUSH
44451: LD_INT 49
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: LIST
44458: LIST
44459: LIST
44460: LIST
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: PUSH
44467: LD_VAR 0 12
44471: ARRAY
44472: ST_TO_ADDR
// list := list isect fac_list ;
44473: LD_ADDR_VAR 0 5
44477: PUSH
44478: LD_VAR 0 5
44482: PUSH
44483: LD_VAR 0 17
44487: ISECT
44488: ST_TO_ADDR
// if not list then
44489: LD_VAR 0 5
44493: NOT
44494: IFFALSE 44498
// exit ;
44496: GO 45302
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
44498: LD_VAR 0 12
44502: PUSH
44503: LD_INT 3
44505: EQUAL
44506: PUSH
44507: LD_INT 49
44509: PUSH
44510: LD_VAR 0 5
44514: IN
44515: AND
44516: PUSH
44517: LD_INT 31
44519: PPUSH
44520: LD_VAR 0 16
44524: PPUSH
44525: CALL_OW 321
44529: PUSH
44530: LD_INT 2
44532: EQUAL
44533: AND
44534: IFFALSE 44594
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
44536: LD_INT 22
44538: PUSH
44539: LD_VAR 0 16
44543: PUSH
44544: EMPTY
44545: LIST
44546: LIST
44547: PUSH
44548: LD_INT 35
44550: PUSH
44551: LD_INT 49
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 91
44560: PUSH
44561: LD_VAR 0 1
44565: PUSH
44566: LD_INT 10
44568: PUSH
44569: EMPTY
44570: LIST
44571: LIST
44572: LIST
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: LIST
44578: PPUSH
44579: CALL_OW 69
44583: NOT
44584: IFFALSE 44594
// weapon := ru_time_lapser ;
44586: LD_ADDR_VAR 0 18
44590: PUSH
44591: LD_INT 49
44593: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
44594: LD_VAR 0 12
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: LD_INT 2
44604: PUSH
44605: EMPTY
44606: LIST
44607: LIST
44608: IN
44609: PUSH
44610: LD_INT 11
44612: PUSH
44613: LD_VAR 0 5
44617: IN
44618: PUSH
44619: LD_INT 30
44621: PUSH
44622: LD_VAR 0 5
44626: IN
44627: OR
44628: AND
44629: PUSH
44630: LD_INT 6
44632: PPUSH
44633: LD_VAR 0 16
44637: PPUSH
44638: CALL_OW 321
44642: PUSH
44643: LD_INT 2
44645: EQUAL
44646: AND
44647: IFFALSE 44812
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
44649: LD_INT 22
44651: PUSH
44652: LD_VAR 0 16
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: PUSH
44664: LD_INT 35
44666: PUSH
44667: LD_INT 11
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 35
44676: PUSH
44677: LD_INT 30
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: EMPTY
44685: LIST
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 91
44691: PUSH
44692: LD_VAR 0 1
44696: PUSH
44697: LD_INT 18
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: LIST
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: LIST
44709: PPUSH
44710: CALL_OW 69
44714: NOT
44715: PUSH
44716: LD_INT 22
44718: PUSH
44719: LD_VAR 0 16
44723: PUSH
44724: EMPTY
44725: LIST
44726: LIST
44727: PUSH
44728: LD_INT 2
44730: PUSH
44731: LD_INT 30
44733: PUSH
44734: LD_INT 32
44736: PUSH
44737: EMPTY
44738: LIST
44739: LIST
44740: PUSH
44741: LD_INT 30
44743: PUSH
44744: LD_INT 33
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: LIST
44755: PUSH
44756: LD_INT 91
44758: PUSH
44759: LD_VAR 0 1
44763: PUSH
44764: LD_INT 12
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: LIST
44776: PUSH
44777: EMPTY
44778: LIST
44779: PPUSH
44780: CALL_OW 69
44784: PUSH
44785: LD_INT 2
44787: GREATER
44788: AND
44789: IFFALSE 44812
// weapon := [ us_radar , ar_radar ] [ nat ] ;
44791: LD_ADDR_VAR 0 18
44795: PUSH
44796: LD_INT 11
44798: PUSH
44799: LD_INT 30
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_VAR 0 12
44810: ARRAY
44811: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
44812: LD_VAR 0 18
44816: NOT
44817: PUSH
44818: LD_INT 40
44820: PPUSH
44821: LD_VAR 0 16
44825: PPUSH
44826: CALL_OW 321
44830: PUSH
44831: LD_INT 2
44833: EQUAL
44834: AND
44835: PUSH
44836: LD_INT 7
44838: PUSH
44839: LD_VAR 0 5
44843: IN
44844: PUSH
44845: LD_INT 28
44847: PUSH
44848: LD_VAR 0 5
44852: IN
44853: OR
44854: PUSH
44855: LD_INT 45
44857: PUSH
44858: LD_VAR 0 5
44862: IN
44863: OR
44864: AND
44865: IFFALSE 45119
// begin hex := GetHexInfo ( x , y ) ;
44867: LD_ADDR_VAR 0 4
44871: PUSH
44872: LD_VAR 0 10
44876: PPUSH
44877: LD_VAR 0 11
44881: PPUSH
44882: CALL_OW 546
44886: ST_TO_ADDR
// if hex [ 1 ] then
44887: LD_VAR 0 4
44891: PUSH
44892: LD_INT 1
44894: ARRAY
44895: IFFALSE 44899
// exit ;
44897: GO 45302
// height := hex [ 2 ] ;
44899: LD_ADDR_VAR 0 15
44903: PUSH
44904: LD_VAR 0 4
44908: PUSH
44909: LD_INT 2
44911: ARRAY
44912: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
44913: LD_ADDR_VAR 0 14
44917: PUSH
44918: LD_INT 0
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 3
44926: PUSH
44927: LD_INT 5
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: LIST
44934: LIST
44935: ST_TO_ADDR
// for i in tmp do
44936: LD_ADDR_VAR 0 8
44940: PUSH
44941: LD_VAR 0 14
44945: PUSH
44946: FOR_IN
44947: IFFALSE 45117
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
44949: LD_ADDR_VAR 0 9
44953: PUSH
44954: LD_VAR 0 10
44958: PPUSH
44959: LD_VAR 0 8
44963: PPUSH
44964: LD_INT 5
44966: PPUSH
44967: CALL_OW 272
44971: PUSH
44972: LD_VAR 0 11
44976: PPUSH
44977: LD_VAR 0 8
44981: PPUSH
44982: LD_INT 5
44984: PPUSH
44985: CALL_OW 273
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
44994: LD_VAR 0 9
44998: PUSH
44999: LD_INT 1
45001: ARRAY
45002: PPUSH
45003: LD_VAR 0 9
45007: PUSH
45008: LD_INT 2
45010: ARRAY
45011: PPUSH
45012: CALL_OW 488
45016: IFFALSE 45115
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45018: LD_ADDR_VAR 0 4
45022: PUSH
45023: LD_VAR 0 9
45027: PUSH
45028: LD_INT 1
45030: ARRAY
45031: PPUSH
45032: LD_VAR 0 9
45036: PUSH
45037: LD_INT 2
45039: ARRAY
45040: PPUSH
45041: CALL_OW 546
45045: ST_TO_ADDR
// if hex [ 1 ] then
45046: LD_VAR 0 4
45050: PUSH
45051: LD_INT 1
45053: ARRAY
45054: IFFALSE 45058
// continue ;
45056: GO 44946
// h := hex [ 2 ] ;
45058: LD_ADDR_VAR 0 13
45062: PUSH
45063: LD_VAR 0 4
45067: PUSH
45068: LD_INT 2
45070: ARRAY
45071: ST_TO_ADDR
// if h + 7 < height then
45072: LD_VAR 0 13
45076: PUSH
45077: LD_INT 7
45079: PLUS
45080: PUSH
45081: LD_VAR 0 15
45085: LESS
45086: IFFALSE 45115
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
45088: LD_ADDR_VAR 0 18
45092: PUSH
45093: LD_INT 7
45095: PUSH
45096: LD_INT 28
45098: PUSH
45099: LD_INT 45
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: LIST
45106: PUSH
45107: LD_VAR 0 12
45111: ARRAY
45112: ST_TO_ADDR
// break ;
45113: GO 45117
// end ; end ; end ;
45115: GO 44946
45117: POP
45118: POP
// end ; if not weapon then
45119: LD_VAR 0 18
45123: NOT
45124: IFFALSE 45184
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
45126: LD_ADDR_VAR 0 5
45130: PUSH
45131: LD_VAR 0 5
45135: PUSH
45136: LD_INT 11
45138: PUSH
45139: LD_INT 30
45141: PUSH
45142: LD_INT 49
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: LIST
45149: DIFF
45150: ST_TO_ADDR
// if not list then
45151: LD_VAR 0 5
45155: NOT
45156: IFFALSE 45160
// exit ;
45158: GO 45302
// weapon := list [ rand ( 1 , list ) ] ;
45160: LD_ADDR_VAR 0 18
45164: PUSH
45165: LD_VAR 0 5
45169: PUSH
45170: LD_INT 1
45172: PPUSH
45173: LD_VAR 0 5
45177: PPUSH
45178: CALL_OW 12
45182: ARRAY
45183: ST_TO_ADDR
// end ; if weapon then
45184: LD_VAR 0 18
45188: IFFALSE 45302
// begin tmp := CostOfWeapon ( weapon ) ;
45190: LD_ADDR_VAR 0 14
45194: PUSH
45195: LD_VAR 0 18
45199: PPUSH
45200: CALL_OW 451
45204: ST_TO_ADDR
// j := GetBase ( tower ) ;
45205: LD_ADDR_VAR 0 9
45209: PUSH
45210: LD_VAR 0 1
45214: PPUSH
45215: CALL_OW 274
45219: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
45220: LD_VAR 0 9
45224: PPUSH
45225: LD_INT 1
45227: PPUSH
45228: CALL_OW 275
45232: PUSH
45233: LD_VAR 0 14
45237: PUSH
45238: LD_INT 1
45240: ARRAY
45241: GREATEREQUAL
45242: PUSH
45243: LD_VAR 0 9
45247: PPUSH
45248: LD_INT 2
45250: PPUSH
45251: CALL_OW 275
45255: PUSH
45256: LD_VAR 0 14
45260: PUSH
45261: LD_INT 2
45263: ARRAY
45264: GREATEREQUAL
45265: AND
45266: PUSH
45267: LD_VAR 0 9
45271: PPUSH
45272: LD_INT 3
45274: PPUSH
45275: CALL_OW 275
45279: PUSH
45280: LD_VAR 0 14
45284: PUSH
45285: LD_INT 3
45287: ARRAY
45288: GREATEREQUAL
45289: AND
45290: IFFALSE 45302
// result := weapon ;
45292: LD_ADDR_VAR 0 3
45296: PUSH
45297: LD_VAR 0 18
45301: ST_TO_ADDR
// end ; end ;
45302: LD_VAR 0 3
45306: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
45307: LD_INT 0
45309: PPUSH
45310: PPUSH
// result := true ;
45311: LD_ADDR_VAR 0 3
45315: PUSH
45316: LD_INT 1
45318: ST_TO_ADDR
// if array1 = array2 then
45319: LD_VAR 0 1
45323: PUSH
45324: LD_VAR 0 2
45328: EQUAL
45329: IFFALSE 45389
// begin for i = 1 to array1 do
45331: LD_ADDR_VAR 0 4
45335: PUSH
45336: DOUBLE
45337: LD_INT 1
45339: DEC
45340: ST_TO_ADDR
45341: LD_VAR 0 1
45345: PUSH
45346: FOR_TO
45347: IFFALSE 45385
// if array1 [ i ] <> array2 [ i ] then
45349: LD_VAR 0 1
45353: PUSH
45354: LD_VAR 0 4
45358: ARRAY
45359: PUSH
45360: LD_VAR 0 2
45364: PUSH
45365: LD_VAR 0 4
45369: ARRAY
45370: NONEQUAL
45371: IFFALSE 45383
// begin result := false ;
45373: LD_ADDR_VAR 0 3
45377: PUSH
45378: LD_INT 0
45380: ST_TO_ADDR
// break ;
45381: GO 45385
// end ;
45383: GO 45346
45385: POP
45386: POP
// end else
45387: GO 45397
// result := false ;
45389: LD_ADDR_VAR 0 3
45393: PUSH
45394: LD_INT 0
45396: ST_TO_ADDR
// end ;
45397: LD_VAR 0 3
45401: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
45402: LD_INT 0
45404: PPUSH
45405: PPUSH
// if not array1 or not array2 then
45406: LD_VAR 0 1
45410: NOT
45411: PUSH
45412: LD_VAR 0 2
45416: NOT
45417: OR
45418: IFFALSE 45422
// exit ;
45420: GO 45486
// result := true ;
45422: LD_ADDR_VAR 0 3
45426: PUSH
45427: LD_INT 1
45429: ST_TO_ADDR
// for i = 1 to array1 do
45430: LD_ADDR_VAR 0 4
45434: PUSH
45435: DOUBLE
45436: LD_INT 1
45438: DEC
45439: ST_TO_ADDR
45440: LD_VAR 0 1
45444: PUSH
45445: FOR_TO
45446: IFFALSE 45484
// if array1 [ i ] <> array2 [ i ] then
45448: LD_VAR 0 1
45452: PUSH
45453: LD_VAR 0 4
45457: ARRAY
45458: PUSH
45459: LD_VAR 0 2
45463: PUSH
45464: LD_VAR 0 4
45468: ARRAY
45469: NONEQUAL
45470: IFFALSE 45482
// begin result := false ;
45472: LD_ADDR_VAR 0 3
45476: PUSH
45477: LD_INT 0
45479: ST_TO_ADDR
// break ;
45480: GO 45484
// end ;
45482: GO 45445
45484: POP
45485: POP
// end ;
45486: LD_VAR 0 3
45490: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
45491: LD_INT 0
45493: PPUSH
45494: PPUSH
45495: PPUSH
// pom := GetBase ( fac ) ;
45496: LD_ADDR_VAR 0 5
45500: PUSH
45501: LD_VAR 0 1
45505: PPUSH
45506: CALL_OW 274
45510: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
45511: LD_ADDR_VAR 0 4
45515: PUSH
45516: LD_VAR 0 2
45520: PUSH
45521: LD_INT 1
45523: ARRAY
45524: PPUSH
45525: LD_VAR 0 2
45529: PUSH
45530: LD_INT 2
45532: ARRAY
45533: PPUSH
45534: LD_VAR 0 2
45538: PUSH
45539: LD_INT 3
45541: ARRAY
45542: PPUSH
45543: LD_VAR 0 2
45547: PUSH
45548: LD_INT 4
45550: ARRAY
45551: PPUSH
45552: CALL_OW 449
45556: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45557: LD_ADDR_VAR 0 3
45561: PUSH
45562: LD_VAR 0 5
45566: PPUSH
45567: LD_INT 1
45569: PPUSH
45570: CALL_OW 275
45574: PUSH
45575: LD_VAR 0 4
45579: PUSH
45580: LD_INT 1
45582: ARRAY
45583: GREATEREQUAL
45584: PUSH
45585: LD_VAR 0 5
45589: PPUSH
45590: LD_INT 2
45592: PPUSH
45593: CALL_OW 275
45597: PUSH
45598: LD_VAR 0 4
45602: PUSH
45603: LD_INT 2
45605: ARRAY
45606: GREATEREQUAL
45607: AND
45608: PUSH
45609: LD_VAR 0 5
45613: PPUSH
45614: LD_INT 3
45616: PPUSH
45617: CALL_OW 275
45621: PUSH
45622: LD_VAR 0 4
45626: PUSH
45627: LD_INT 3
45629: ARRAY
45630: GREATEREQUAL
45631: AND
45632: ST_TO_ADDR
// end ;
45633: LD_VAR 0 3
45637: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
45638: LD_INT 0
45640: PPUSH
45641: PPUSH
45642: PPUSH
45643: PPUSH
// pom := GetBase ( building ) ;
45644: LD_ADDR_VAR 0 3
45648: PUSH
45649: LD_VAR 0 1
45653: PPUSH
45654: CALL_OW 274
45658: ST_TO_ADDR
// if not pom then
45659: LD_VAR 0 3
45663: NOT
45664: IFFALSE 45668
// exit ;
45666: GO 45838
// btype := GetBType ( building ) ;
45668: LD_ADDR_VAR 0 5
45672: PUSH
45673: LD_VAR 0 1
45677: PPUSH
45678: CALL_OW 266
45682: ST_TO_ADDR
// if btype = b_armoury then
45683: LD_VAR 0 5
45687: PUSH
45688: LD_INT 4
45690: EQUAL
45691: IFFALSE 45701
// btype := b_barracks ;
45693: LD_ADDR_VAR 0 5
45697: PUSH
45698: LD_INT 5
45700: ST_TO_ADDR
// if btype = b_depot then
45701: LD_VAR 0 5
45705: PUSH
45706: LD_INT 0
45708: EQUAL
45709: IFFALSE 45719
// btype := b_warehouse ;
45711: LD_ADDR_VAR 0 5
45715: PUSH
45716: LD_INT 1
45718: ST_TO_ADDR
// if btype = b_workshop then
45719: LD_VAR 0 5
45723: PUSH
45724: LD_INT 2
45726: EQUAL
45727: IFFALSE 45737
// btype := b_factory ;
45729: LD_ADDR_VAR 0 5
45733: PUSH
45734: LD_INT 3
45736: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45737: LD_ADDR_VAR 0 4
45741: PUSH
45742: LD_VAR 0 5
45746: PPUSH
45747: LD_VAR 0 1
45751: PPUSH
45752: CALL_OW 248
45756: PPUSH
45757: CALL_OW 450
45761: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45762: LD_ADDR_VAR 0 2
45766: PUSH
45767: LD_VAR 0 3
45771: PPUSH
45772: LD_INT 1
45774: PPUSH
45775: CALL_OW 275
45779: PUSH
45780: LD_VAR 0 4
45784: PUSH
45785: LD_INT 1
45787: ARRAY
45788: GREATEREQUAL
45789: PUSH
45790: LD_VAR 0 3
45794: PPUSH
45795: LD_INT 2
45797: PPUSH
45798: CALL_OW 275
45802: PUSH
45803: LD_VAR 0 4
45807: PUSH
45808: LD_INT 2
45810: ARRAY
45811: GREATEREQUAL
45812: AND
45813: PUSH
45814: LD_VAR 0 3
45818: PPUSH
45819: LD_INT 3
45821: PPUSH
45822: CALL_OW 275
45826: PUSH
45827: LD_VAR 0 4
45831: PUSH
45832: LD_INT 3
45834: ARRAY
45835: GREATEREQUAL
45836: AND
45837: ST_TO_ADDR
// end ;
45838: LD_VAR 0 2
45842: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
45843: LD_INT 0
45845: PPUSH
45846: PPUSH
45847: PPUSH
// pom := GetBase ( building ) ;
45848: LD_ADDR_VAR 0 4
45852: PUSH
45853: LD_VAR 0 1
45857: PPUSH
45858: CALL_OW 274
45862: ST_TO_ADDR
// if not pom then
45863: LD_VAR 0 4
45867: NOT
45868: IFFALSE 45872
// exit ;
45870: GO 45973
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
45872: LD_ADDR_VAR 0 5
45876: PUSH
45877: LD_VAR 0 2
45881: PPUSH
45882: LD_VAR 0 1
45886: PPUSH
45887: CALL_OW 248
45891: PPUSH
45892: CALL_OW 450
45896: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
45897: LD_ADDR_VAR 0 3
45901: PUSH
45902: LD_VAR 0 4
45906: PPUSH
45907: LD_INT 1
45909: PPUSH
45910: CALL_OW 275
45914: PUSH
45915: LD_VAR 0 5
45919: PUSH
45920: LD_INT 1
45922: ARRAY
45923: GREATEREQUAL
45924: PUSH
45925: LD_VAR 0 4
45929: PPUSH
45930: LD_INT 2
45932: PPUSH
45933: CALL_OW 275
45937: PUSH
45938: LD_VAR 0 5
45942: PUSH
45943: LD_INT 2
45945: ARRAY
45946: GREATEREQUAL
45947: AND
45948: PUSH
45949: LD_VAR 0 4
45953: PPUSH
45954: LD_INT 3
45956: PPUSH
45957: CALL_OW 275
45961: PUSH
45962: LD_VAR 0 5
45966: PUSH
45967: LD_INT 3
45969: ARRAY
45970: GREATEREQUAL
45971: AND
45972: ST_TO_ADDR
// end ;
45973: LD_VAR 0 3
45977: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
45978: LD_INT 0
45980: PPUSH
45981: PPUSH
45982: PPUSH
45983: PPUSH
45984: PPUSH
45985: PPUSH
45986: PPUSH
45987: PPUSH
45988: PPUSH
45989: PPUSH
45990: PPUSH
// result := false ;
45991: LD_ADDR_VAR 0 8
45995: PUSH
45996: LD_INT 0
45998: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
45999: LD_VAR 0 5
46003: NOT
46004: PUSH
46005: LD_VAR 0 1
46009: NOT
46010: OR
46011: PUSH
46012: LD_VAR 0 2
46016: NOT
46017: OR
46018: PUSH
46019: LD_VAR 0 3
46023: NOT
46024: OR
46025: IFFALSE 46029
// exit ;
46027: GO 46843
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46029: LD_ADDR_VAR 0 14
46033: PUSH
46034: LD_VAR 0 1
46038: PPUSH
46039: LD_VAR 0 2
46043: PPUSH
46044: LD_VAR 0 3
46048: PPUSH
46049: LD_VAR 0 4
46053: PPUSH
46054: LD_VAR 0 5
46058: PUSH
46059: LD_INT 1
46061: ARRAY
46062: PPUSH
46063: CALL_OW 248
46067: PPUSH
46068: LD_INT 0
46070: PPUSH
46071: CALL 48080 0 6
46075: ST_TO_ADDR
// if not hexes then
46076: LD_VAR 0 14
46080: NOT
46081: IFFALSE 46085
// exit ;
46083: GO 46843
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
46085: LD_ADDR_VAR 0 17
46089: PUSH
46090: LD_VAR 0 5
46094: PPUSH
46095: LD_INT 22
46097: PUSH
46098: LD_VAR 0 13
46102: PPUSH
46103: CALL_OW 255
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: PUSH
46112: LD_INT 2
46114: PUSH
46115: LD_INT 30
46117: PUSH
46118: LD_INT 0
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 30
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: LIST
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PPUSH
46144: CALL_OW 72
46148: ST_TO_ADDR
// for i = 1 to hexes do
46149: LD_ADDR_VAR 0 9
46153: PUSH
46154: DOUBLE
46155: LD_INT 1
46157: DEC
46158: ST_TO_ADDR
46159: LD_VAR 0 14
46163: PUSH
46164: FOR_TO
46165: IFFALSE 46841
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
46167: LD_ADDR_VAR 0 13
46171: PUSH
46172: LD_VAR 0 14
46176: PUSH
46177: LD_VAR 0 9
46181: ARRAY
46182: PUSH
46183: LD_INT 1
46185: ARRAY
46186: PPUSH
46187: LD_VAR 0 14
46191: PUSH
46192: LD_VAR 0 9
46196: ARRAY
46197: PUSH
46198: LD_INT 2
46200: ARRAY
46201: PPUSH
46202: CALL_OW 428
46206: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
46207: LD_VAR 0 14
46211: PUSH
46212: LD_VAR 0 9
46216: ARRAY
46217: PUSH
46218: LD_INT 1
46220: ARRAY
46221: PPUSH
46222: LD_VAR 0 14
46226: PUSH
46227: LD_VAR 0 9
46231: ARRAY
46232: PUSH
46233: LD_INT 2
46235: ARRAY
46236: PPUSH
46237: CALL_OW 351
46241: PUSH
46242: LD_VAR 0 14
46246: PUSH
46247: LD_VAR 0 9
46251: ARRAY
46252: PUSH
46253: LD_INT 1
46255: ARRAY
46256: PPUSH
46257: LD_VAR 0 14
46261: PUSH
46262: LD_VAR 0 9
46266: ARRAY
46267: PUSH
46268: LD_INT 2
46270: ARRAY
46271: PPUSH
46272: CALL_OW 488
46276: NOT
46277: OR
46278: PUSH
46279: LD_VAR 0 13
46283: PPUSH
46284: CALL_OW 247
46288: PUSH
46289: LD_INT 3
46291: EQUAL
46292: OR
46293: IFFALSE 46299
// exit ;
46295: POP
46296: POP
46297: GO 46843
// if not tmp then
46299: LD_VAR 0 13
46303: NOT
46304: IFFALSE 46308
// continue ;
46306: GO 46164
// result := true ;
46308: LD_ADDR_VAR 0 8
46312: PUSH
46313: LD_INT 1
46315: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
46316: LD_VAR 0 6
46320: PUSH
46321: LD_VAR 0 13
46325: PPUSH
46326: CALL_OW 247
46330: PUSH
46331: LD_INT 2
46333: EQUAL
46334: AND
46335: PUSH
46336: LD_VAR 0 13
46340: PPUSH
46341: CALL_OW 263
46345: PUSH
46346: LD_INT 1
46348: EQUAL
46349: AND
46350: IFFALSE 46514
// begin if IsDrivenBy ( tmp ) then
46352: LD_VAR 0 13
46356: PPUSH
46357: CALL_OW 311
46361: IFFALSE 46365
// continue ;
46363: GO 46164
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
46365: LD_VAR 0 6
46369: PPUSH
46370: LD_INT 3
46372: PUSH
46373: LD_INT 60
46375: PUSH
46376: EMPTY
46377: LIST
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 3
46385: PUSH
46386: LD_INT 55
46388: PUSH
46389: EMPTY
46390: LIST
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PPUSH
46400: CALL_OW 72
46404: IFFALSE 46512
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
46406: LD_ADDR_VAR 0 18
46410: PUSH
46411: LD_VAR 0 6
46415: PPUSH
46416: LD_INT 3
46418: PUSH
46419: LD_INT 60
46421: PUSH
46422: EMPTY
46423: LIST
46424: PUSH
46425: EMPTY
46426: LIST
46427: LIST
46428: PUSH
46429: LD_INT 3
46431: PUSH
46432: LD_INT 55
46434: PUSH
46435: EMPTY
46436: LIST
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PPUSH
46446: CALL_OW 72
46450: PUSH
46451: LD_INT 1
46453: ARRAY
46454: ST_TO_ADDR
// if IsInUnit ( driver ) then
46455: LD_VAR 0 18
46459: PPUSH
46460: CALL_OW 310
46464: IFFALSE 46475
// ComExit ( driver ) ;
46466: LD_VAR 0 18
46470: PPUSH
46471: CALL 71264 0 1
// AddComEnterUnit ( driver , tmp ) ;
46475: LD_VAR 0 18
46479: PPUSH
46480: LD_VAR 0 13
46484: PPUSH
46485: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
46489: LD_VAR 0 18
46493: PPUSH
46494: LD_VAR 0 7
46498: PPUSH
46499: CALL_OW 173
// AddComExitVehicle ( driver ) ;
46503: LD_VAR 0 18
46507: PPUSH
46508: CALL_OW 181
// end ; continue ;
46512: GO 46164
// end ; if not cleaners or not tmp in cleaners then
46514: LD_VAR 0 6
46518: NOT
46519: PUSH
46520: LD_VAR 0 13
46524: PUSH
46525: LD_VAR 0 6
46529: IN
46530: NOT
46531: OR
46532: IFFALSE 46839
// begin if dep then
46534: LD_VAR 0 17
46538: IFFALSE 46674
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
46540: LD_ADDR_VAR 0 16
46544: PUSH
46545: LD_VAR 0 17
46549: PUSH
46550: LD_INT 1
46552: ARRAY
46553: PPUSH
46554: CALL_OW 250
46558: PPUSH
46559: LD_VAR 0 17
46563: PUSH
46564: LD_INT 1
46566: ARRAY
46567: PPUSH
46568: CALL_OW 254
46572: PPUSH
46573: LD_INT 5
46575: PPUSH
46576: CALL_OW 272
46580: PUSH
46581: LD_VAR 0 17
46585: PUSH
46586: LD_INT 1
46588: ARRAY
46589: PPUSH
46590: CALL_OW 251
46594: PPUSH
46595: LD_VAR 0 17
46599: PUSH
46600: LD_INT 1
46602: ARRAY
46603: PPUSH
46604: CALL_OW 254
46608: PPUSH
46609: LD_INT 5
46611: PPUSH
46612: CALL_OW 273
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
46621: LD_VAR 0 16
46625: PUSH
46626: LD_INT 1
46628: ARRAY
46629: PPUSH
46630: LD_VAR 0 16
46634: PUSH
46635: LD_INT 2
46637: ARRAY
46638: PPUSH
46639: CALL_OW 488
46643: IFFALSE 46674
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
46645: LD_VAR 0 13
46649: PPUSH
46650: LD_VAR 0 16
46654: PUSH
46655: LD_INT 1
46657: ARRAY
46658: PPUSH
46659: LD_VAR 0 16
46663: PUSH
46664: LD_INT 2
46666: ARRAY
46667: PPUSH
46668: CALL_OW 111
// continue ;
46672: GO 46164
// end ; end ; r := GetDir ( tmp ) ;
46674: LD_ADDR_VAR 0 15
46678: PUSH
46679: LD_VAR 0 13
46683: PPUSH
46684: CALL_OW 254
46688: ST_TO_ADDR
// if r = 5 then
46689: LD_VAR 0 15
46693: PUSH
46694: LD_INT 5
46696: EQUAL
46697: IFFALSE 46707
// r := 0 ;
46699: LD_ADDR_VAR 0 15
46703: PUSH
46704: LD_INT 0
46706: ST_TO_ADDR
// for j = r to 5 do
46707: LD_ADDR_VAR 0 10
46711: PUSH
46712: DOUBLE
46713: LD_VAR 0 15
46717: DEC
46718: ST_TO_ADDR
46719: LD_INT 5
46721: PUSH
46722: FOR_TO
46723: IFFALSE 46837
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
46725: LD_ADDR_VAR 0 11
46729: PUSH
46730: LD_VAR 0 13
46734: PPUSH
46735: CALL_OW 250
46739: PPUSH
46740: LD_VAR 0 10
46744: PPUSH
46745: LD_INT 2
46747: PPUSH
46748: CALL_OW 272
46752: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
46753: LD_ADDR_VAR 0 12
46757: PUSH
46758: LD_VAR 0 13
46762: PPUSH
46763: CALL_OW 251
46767: PPUSH
46768: LD_VAR 0 10
46772: PPUSH
46773: LD_INT 2
46775: PPUSH
46776: CALL_OW 273
46780: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
46781: LD_VAR 0 11
46785: PPUSH
46786: LD_VAR 0 12
46790: PPUSH
46791: CALL_OW 488
46795: PUSH
46796: LD_VAR 0 11
46800: PPUSH
46801: LD_VAR 0 12
46805: PPUSH
46806: CALL_OW 428
46810: NOT
46811: AND
46812: IFFALSE 46835
// begin ComMoveXY ( tmp , _x , _y ) ;
46814: LD_VAR 0 13
46818: PPUSH
46819: LD_VAR 0 11
46823: PPUSH
46824: LD_VAR 0 12
46828: PPUSH
46829: CALL_OW 111
// break ;
46833: GO 46837
// end ; end ;
46835: GO 46722
46837: POP
46838: POP
// end ; end ;
46839: GO 46164
46841: POP
46842: POP
// end ;
46843: LD_VAR 0 8
46847: RET
// export function BuildingTechInvented ( side , btype ) ; begin
46848: LD_INT 0
46850: PPUSH
// result := true ;
46851: LD_ADDR_VAR 0 3
46855: PUSH
46856: LD_INT 1
46858: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
46859: LD_VAR 0 2
46863: PUSH
46864: LD_INT 24
46866: DOUBLE
46867: EQUAL
46868: IFTRUE 46878
46870: LD_INT 33
46872: DOUBLE
46873: EQUAL
46874: IFTRUE 46878
46876: GO 46903
46878: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
46879: LD_ADDR_VAR 0 3
46883: PUSH
46884: LD_INT 32
46886: PPUSH
46887: LD_VAR 0 1
46891: PPUSH
46892: CALL_OW 321
46896: PUSH
46897: LD_INT 2
46899: EQUAL
46900: ST_TO_ADDR
46901: GO 47223
46903: LD_INT 20
46905: DOUBLE
46906: EQUAL
46907: IFTRUE 46911
46909: GO 46936
46911: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
46912: LD_ADDR_VAR 0 3
46916: PUSH
46917: LD_INT 6
46919: PPUSH
46920: LD_VAR 0 1
46924: PPUSH
46925: CALL_OW 321
46929: PUSH
46930: LD_INT 2
46932: EQUAL
46933: ST_TO_ADDR
46934: GO 47223
46936: LD_INT 22
46938: DOUBLE
46939: EQUAL
46940: IFTRUE 46950
46942: LD_INT 36
46944: DOUBLE
46945: EQUAL
46946: IFTRUE 46950
46948: GO 46975
46950: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
46951: LD_ADDR_VAR 0 3
46955: PUSH
46956: LD_INT 15
46958: PPUSH
46959: LD_VAR 0 1
46963: PPUSH
46964: CALL_OW 321
46968: PUSH
46969: LD_INT 2
46971: EQUAL
46972: ST_TO_ADDR
46973: GO 47223
46975: LD_INT 30
46977: DOUBLE
46978: EQUAL
46979: IFTRUE 46983
46981: GO 47008
46983: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
46984: LD_ADDR_VAR 0 3
46988: PUSH
46989: LD_INT 20
46991: PPUSH
46992: LD_VAR 0 1
46996: PPUSH
46997: CALL_OW 321
47001: PUSH
47002: LD_INT 2
47004: EQUAL
47005: ST_TO_ADDR
47006: GO 47223
47008: LD_INT 28
47010: DOUBLE
47011: EQUAL
47012: IFTRUE 47022
47014: LD_INT 21
47016: DOUBLE
47017: EQUAL
47018: IFTRUE 47022
47020: GO 47047
47022: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47023: LD_ADDR_VAR 0 3
47027: PUSH
47028: LD_INT 21
47030: PPUSH
47031: LD_VAR 0 1
47035: PPUSH
47036: CALL_OW 321
47040: PUSH
47041: LD_INT 2
47043: EQUAL
47044: ST_TO_ADDR
47045: GO 47223
47047: LD_INT 16
47049: DOUBLE
47050: EQUAL
47051: IFTRUE 47055
47053: GO 47082
47055: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
47056: LD_ADDR_VAR 0 3
47060: PUSH
47061: LD_EXP 141
47065: PPUSH
47066: LD_VAR 0 1
47070: PPUSH
47071: CALL_OW 321
47075: PUSH
47076: LD_INT 2
47078: EQUAL
47079: ST_TO_ADDR
47080: GO 47223
47082: LD_INT 19
47084: DOUBLE
47085: EQUAL
47086: IFTRUE 47096
47088: LD_INT 23
47090: DOUBLE
47091: EQUAL
47092: IFTRUE 47096
47094: GO 47123
47096: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
47097: LD_ADDR_VAR 0 3
47101: PUSH
47102: LD_EXP 140
47106: PPUSH
47107: LD_VAR 0 1
47111: PPUSH
47112: CALL_OW 321
47116: PUSH
47117: LD_INT 2
47119: EQUAL
47120: ST_TO_ADDR
47121: GO 47223
47123: LD_INT 17
47125: DOUBLE
47126: EQUAL
47127: IFTRUE 47131
47129: GO 47156
47131: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
47132: LD_ADDR_VAR 0 3
47136: PUSH
47137: LD_INT 39
47139: PPUSH
47140: LD_VAR 0 1
47144: PPUSH
47145: CALL_OW 321
47149: PUSH
47150: LD_INT 2
47152: EQUAL
47153: ST_TO_ADDR
47154: GO 47223
47156: LD_INT 18
47158: DOUBLE
47159: EQUAL
47160: IFTRUE 47164
47162: GO 47189
47164: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
47165: LD_ADDR_VAR 0 3
47169: PUSH
47170: LD_INT 40
47172: PPUSH
47173: LD_VAR 0 1
47177: PPUSH
47178: CALL_OW 321
47182: PUSH
47183: LD_INT 2
47185: EQUAL
47186: ST_TO_ADDR
47187: GO 47223
47189: LD_INT 27
47191: DOUBLE
47192: EQUAL
47193: IFTRUE 47197
47195: GO 47222
47197: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
47198: LD_ADDR_VAR 0 3
47202: PUSH
47203: LD_INT 35
47205: PPUSH
47206: LD_VAR 0 1
47210: PPUSH
47211: CALL_OW 321
47215: PUSH
47216: LD_INT 2
47218: EQUAL
47219: ST_TO_ADDR
47220: GO 47223
47222: POP
// end ;
47223: LD_VAR 0 3
47227: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
47228: LD_INT 0
47230: PPUSH
47231: PPUSH
47232: PPUSH
47233: PPUSH
47234: PPUSH
47235: PPUSH
47236: PPUSH
47237: PPUSH
47238: PPUSH
47239: PPUSH
47240: PPUSH
// result := false ;
47241: LD_ADDR_VAR 0 6
47245: PUSH
47246: LD_INT 0
47248: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
47249: LD_VAR 0 1
47253: NOT
47254: PUSH
47255: LD_VAR 0 1
47259: PPUSH
47260: CALL_OW 266
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 1
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: IN
47275: NOT
47276: OR
47277: PUSH
47278: LD_VAR 0 2
47282: NOT
47283: OR
47284: PUSH
47285: LD_VAR 0 5
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 1
47295: PUSH
47296: LD_INT 2
47298: PUSH
47299: LD_INT 3
47301: PUSH
47302: LD_INT 4
47304: PUSH
47305: LD_INT 5
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: LIST
47314: LIST
47315: IN
47316: NOT
47317: OR
47318: PUSH
47319: LD_VAR 0 3
47323: PPUSH
47324: LD_VAR 0 4
47328: PPUSH
47329: CALL_OW 488
47333: NOT
47334: OR
47335: IFFALSE 47339
// exit ;
47337: GO 48075
// side := GetSide ( depot ) ;
47339: LD_ADDR_VAR 0 9
47343: PUSH
47344: LD_VAR 0 1
47348: PPUSH
47349: CALL_OW 255
47353: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
47354: LD_VAR 0 9
47358: PPUSH
47359: LD_VAR 0 2
47363: PPUSH
47364: CALL 46848 0 2
47368: NOT
47369: IFFALSE 47373
// exit ;
47371: GO 48075
// pom := GetBase ( depot ) ;
47373: LD_ADDR_VAR 0 10
47377: PUSH
47378: LD_VAR 0 1
47382: PPUSH
47383: CALL_OW 274
47387: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
47388: LD_ADDR_VAR 0 11
47392: PUSH
47393: LD_VAR 0 2
47397: PPUSH
47398: LD_VAR 0 1
47402: PPUSH
47403: CALL_OW 248
47407: PPUSH
47408: CALL_OW 450
47412: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
47413: LD_VAR 0 10
47417: PPUSH
47418: LD_INT 1
47420: PPUSH
47421: CALL_OW 275
47425: PUSH
47426: LD_VAR 0 11
47430: PUSH
47431: LD_INT 1
47433: ARRAY
47434: GREATEREQUAL
47435: PUSH
47436: LD_VAR 0 10
47440: PPUSH
47441: LD_INT 2
47443: PPUSH
47444: CALL_OW 275
47448: PUSH
47449: LD_VAR 0 11
47453: PUSH
47454: LD_INT 2
47456: ARRAY
47457: GREATEREQUAL
47458: AND
47459: PUSH
47460: LD_VAR 0 10
47464: PPUSH
47465: LD_INT 3
47467: PPUSH
47468: CALL_OW 275
47472: PUSH
47473: LD_VAR 0 11
47477: PUSH
47478: LD_INT 3
47480: ARRAY
47481: GREATEREQUAL
47482: AND
47483: NOT
47484: IFFALSE 47488
// exit ;
47486: GO 48075
// if GetBType ( depot ) = b_depot then
47488: LD_VAR 0 1
47492: PPUSH
47493: CALL_OW 266
47497: PUSH
47498: LD_INT 0
47500: EQUAL
47501: IFFALSE 47513
// dist := 28 else
47503: LD_ADDR_VAR 0 14
47507: PUSH
47508: LD_INT 28
47510: ST_TO_ADDR
47511: GO 47521
// dist := 36 ;
47513: LD_ADDR_VAR 0 14
47517: PUSH
47518: LD_INT 36
47520: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
47521: LD_VAR 0 1
47525: PPUSH
47526: LD_VAR 0 3
47530: PPUSH
47531: LD_VAR 0 4
47535: PPUSH
47536: CALL_OW 297
47540: PUSH
47541: LD_VAR 0 14
47545: GREATER
47546: IFFALSE 47550
// exit ;
47548: GO 48075
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
47550: LD_ADDR_VAR 0 12
47554: PUSH
47555: LD_VAR 0 2
47559: PPUSH
47560: LD_VAR 0 3
47564: PPUSH
47565: LD_VAR 0 4
47569: PPUSH
47570: LD_VAR 0 5
47574: PPUSH
47575: LD_VAR 0 1
47579: PPUSH
47580: CALL_OW 248
47584: PPUSH
47585: LD_INT 0
47587: PPUSH
47588: CALL 48080 0 6
47592: ST_TO_ADDR
// if not hexes then
47593: LD_VAR 0 12
47597: NOT
47598: IFFALSE 47602
// exit ;
47600: GO 48075
// hex := GetHexInfo ( x , y ) ;
47602: LD_ADDR_VAR 0 15
47606: PUSH
47607: LD_VAR 0 3
47611: PPUSH
47612: LD_VAR 0 4
47616: PPUSH
47617: CALL_OW 546
47621: ST_TO_ADDR
// if hex [ 1 ] then
47622: LD_VAR 0 15
47626: PUSH
47627: LD_INT 1
47629: ARRAY
47630: IFFALSE 47634
// exit ;
47632: GO 48075
// height := hex [ 2 ] ;
47634: LD_ADDR_VAR 0 13
47638: PUSH
47639: LD_VAR 0 15
47643: PUSH
47644: LD_INT 2
47646: ARRAY
47647: ST_TO_ADDR
// for i = 1 to hexes do
47648: LD_ADDR_VAR 0 7
47652: PUSH
47653: DOUBLE
47654: LD_INT 1
47656: DEC
47657: ST_TO_ADDR
47658: LD_VAR 0 12
47662: PUSH
47663: FOR_TO
47664: IFFALSE 47994
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
47666: LD_VAR 0 12
47670: PUSH
47671: LD_VAR 0 7
47675: ARRAY
47676: PUSH
47677: LD_INT 1
47679: ARRAY
47680: PPUSH
47681: LD_VAR 0 12
47685: PUSH
47686: LD_VAR 0 7
47690: ARRAY
47691: PUSH
47692: LD_INT 2
47694: ARRAY
47695: PPUSH
47696: CALL_OW 488
47700: NOT
47701: PUSH
47702: LD_VAR 0 12
47706: PUSH
47707: LD_VAR 0 7
47711: ARRAY
47712: PUSH
47713: LD_INT 1
47715: ARRAY
47716: PPUSH
47717: LD_VAR 0 12
47721: PUSH
47722: LD_VAR 0 7
47726: ARRAY
47727: PUSH
47728: LD_INT 2
47730: ARRAY
47731: PPUSH
47732: CALL_OW 428
47736: PUSH
47737: LD_INT 0
47739: GREATER
47740: OR
47741: PUSH
47742: LD_VAR 0 12
47746: PUSH
47747: LD_VAR 0 7
47751: ARRAY
47752: PUSH
47753: LD_INT 1
47755: ARRAY
47756: PPUSH
47757: LD_VAR 0 12
47761: PUSH
47762: LD_VAR 0 7
47766: ARRAY
47767: PUSH
47768: LD_INT 2
47770: ARRAY
47771: PPUSH
47772: CALL_OW 351
47776: OR
47777: IFFALSE 47783
// exit ;
47779: POP
47780: POP
47781: GO 48075
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47783: LD_ADDR_VAR 0 8
47787: PUSH
47788: LD_VAR 0 12
47792: PUSH
47793: LD_VAR 0 7
47797: ARRAY
47798: PUSH
47799: LD_INT 1
47801: ARRAY
47802: PPUSH
47803: LD_VAR 0 12
47807: PUSH
47808: LD_VAR 0 7
47812: ARRAY
47813: PUSH
47814: LD_INT 2
47816: ARRAY
47817: PPUSH
47818: CALL_OW 546
47822: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
47823: LD_VAR 0 8
47827: PUSH
47828: LD_INT 1
47830: ARRAY
47831: PUSH
47832: LD_VAR 0 8
47836: PUSH
47837: LD_INT 2
47839: ARRAY
47840: PUSH
47841: LD_VAR 0 13
47845: PUSH
47846: LD_INT 2
47848: PLUS
47849: GREATER
47850: OR
47851: PUSH
47852: LD_VAR 0 8
47856: PUSH
47857: LD_INT 2
47859: ARRAY
47860: PUSH
47861: LD_VAR 0 13
47865: PUSH
47866: LD_INT 2
47868: MINUS
47869: LESS
47870: OR
47871: PUSH
47872: LD_VAR 0 8
47876: PUSH
47877: LD_INT 3
47879: ARRAY
47880: PUSH
47881: LD_INT 0
47883: PUSH
47884: LD_INT 8
47886: PUSH
47887: LD_INT 9
47889: PUSH
47890: LD_INT 10
47892: PUSH
47893: LD_INT 11
47895: PUSH
47896: LD_INT 12
47898: PUSH
47899: LD_INT 13
47901: PUSH
47902: LD_INT 16
47904: PUSH
47905: LD_INT 17
47907: PUSH
47908: LD_INT 18
47910: PUSH
47911: LD_INT 19
47913: PUSH
47914: LD_INT 20
47916: PUSH
47917: LD_INT 21
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: LIST
47927: LIST
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: IN
47935: NOT
47936: OR
47937: PUSH
47938: LD_VAR 0 8
47942: PUSH
47943: LD_INT 5
47945: ARRAY
47946: NOT
47947: OR
47948: PUSH
47949: LD_VAR 0 8
47953: PUSH
47954: LD_INT 6
47956: ARRAY
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: LD_INT 7
47966: PUSH
47967: LD_INT 9
47969: PUSH
47970: LD_INT 10
47972: PUSH
47973: LD_INT 11
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: LIST
47980: LIST
47981: LIST
47982: LIST
47983: IN
47984: NOT
47985: OR
47986: IFFALSE 47992
// exit ;
47988: POP
47989: POP
47990: GO 48075
// end ;
47992: GO 47663
47994: POP
47995: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
47996: LD_VAR 0 9
48000: PPUSH
48001: LD_VAR 0 3
48005: PPUSH
48006: LD_VAR 0 4
48010: PPUSH
48011: LD_INT 20
48013: PPUSH
48014: CALL 40021 0 4
48018: PUSH
48019: LD_INT 4
48021: ARRAY
48022: IFFALSE 48026
// exit ;
48024: GO 48075
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
48026: LD_VAR 0 2
48030: PUSH
48031: LD_INT 29
48033: PUSH
48034: LD_INT 30
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: IN
48041: PUSH
48042: LD_VAR 0 3
48046: PPUSH
48047: LD_VAR 0 4
48051: PPUSH
48052: LD_VAR 0 9
48056: PPUSH
48057: CALL_OW 440
48061: NOT
48062: AND
48063: IFFALSE 48067
// exit ;
48065: GO 48075
// result := true ;
48067: LD_ADDR_VAR 0 6
48071: PUSH
48072: LD_INT 1
48074: ST_TO_ADDR
// end ;
48075: LD_VAR 0 6
48079: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
48080: LD_INT 0
48082: PPUSH
48083: PPUSH
48084: PPUSH
48085: PPUSH
48086: PPUSH
48087: PPUSH
48088: PPUSH
48089: PPUSH
48090: PPUSH
48091: PPUSH
48092: PPUSH
48093: PPUSH
48094: PPUSH
48095: PPUSH
48096: PPUSH
48097: PPUSH
48098: PPUSH
48099: PPUSH
48100: PPUSH
48101: PPUSH
48102: PPUSH
48103: PPUSH
48104: PPUSH
48105: PPUSH
48106: PPUSH
48107: PPUSH
48108: PPUSH
48109: PPUSH
48110: PPUSH
48111: PPUSH
48112: PPUSH
48113: PPUSH
48114: PPUSH
48115: PPUSH
48116: PPUSH
48117: PPUSH
48118: PPUSH
48119: PPUSH
48120: PPUSH
48121: PPUSH
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
48126: PPUSH
48127: PPUSH
48128: PPUSH
48129: PPUSH
48130: PPUSH
48131: PPUSH
48132: PPUSH
48133: PPUSH
48134: PPUSH
48135: PPUSH
48136: PPUSH
48137: PPUSH
48138: PPUSH
48139: PPUSH
// result = [ ] ;
48140: LD_ADDR_VAR 0 7
48144: PUSH
48145: EMPTY
48146: ST_TO_ADDR
// temp_list = [ ] ;
48147: LD_ADDR_VAR 0 9
48151: PUSH
48152: EMPTY
48153: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
48154: LD_VAR 0 4
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: LD_INT 2
48167: PUSH
48168: LD_INT 3
48170: PUSH
48171: LD_INT 4
48173: PUSH
48174: LD_INT 5
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: IN
48185: NOT
48186: PUSH
48187: LD_VAR 0 1
48191: PUSH
48192: LD_INT 0
48194: PUSH
48195: LD_INT 1
48197: PUSH
48198: EMPTY
48199: LIST
48200: LIST
48201: IN
48202: PUSH
48203: LD_VAR 0 5
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: LD_INT 2
48213: PUSH
48214: LD_INT 3
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: LIST
48221: IN
48222: NOT
48223: AND
48224: OR
48225: IFFALSE 48229
// exit ;
48227: GO 66620
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
48229: LD_VAR 0 1
48233: PUSH
48234: LD_INT 6
48236: PUSH
48237: LD_INT 7
48239: PUSH
48240: LD_INT 8
48242: PUSH
48243: LD_INT 13
48245: PUSH
48246: LD_INT 12
48248: PUSH
48249: LD_INT 15
48251: PUSH
48252: LD_INT 11
48254: PUSH
48255: LD_INT 14
48257: PUSH
48258: LD_INT 10
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: IN
48272: IFFALSE 48282
// btype = b_lab ;
48274: LD_ADDR_VAR 0 1
48278: PUSH
48279: LD_INT 6
48281: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
48282: LD_VAR 0 6
48286: PUSH
48287: LD_INT 0
48289: PUSH
48290: LD_INT 1
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: IN
48301: NOT
48302: PUSH
48303: LD_VAR 0 1
48307: PUSH
48308: LD_INT 0
48310: PUSH
48311: LD_INT 1
48313: PUSH
48314: LD_INT 2
48316: PUSH
48317: LD_INT 3
48319: PUSH
48320: LD_INT 6
48322: PUSH
48323: LD_INT 36
48325: PUSH
48326: LD_INT 4
48328: PUSH
48329: LD_INT 5
48331: PUSH
48332: LD_INT 31
48334: PUSH
48335: LD_INT 32
48337: PUSH
48338: LD_INT 33
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: LIST
48348: LIST
48349: LIST
48350: LIST
48351: LIST
48352: LIST
48353: IN
48354: NOT
48355: PUSH
48356: LD_VAR 0 6
48360: PUSH
48361: LD_INT 1
48363: EQUAL
48364: AND
48365: OR
48366: PUSH
48367: LD_VAR 0 1
48371: PUSH
48372: LD_INT 2
48374: PUSH
48375: LD_INT 3
48377: PUSH
48378: EMPTY
48379: LIST
48380: LIST
48381: IN
48382: NOT
48383: PUSH
48384: LD_VAR 0 6
48388: PUSH
48389: LD_INT 2
48391: EQUAL
48392: AND
48393: OR
48394: IFFALSE 48404
// mode = 0 ;
48396: LD_ADDR_VAR 0 6
48400: PUSH
48401: LD_INT 0
48403: ST_TO_ADDR
// case mode of 0 :
48404: LD_VAR 0 6
48408: PUSH
48409: LD_INT 0
48411: DOUBLE
48412: EQUAL
48413: IFTRUE 48417
48415: GO 59870
48417: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48418: LD_ADDR_VAR 0 11
48422: PUSH
48423: LD_INT 0
48425: PUSH
48426: LD_INT 0
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: NEG
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 1
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 1
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 1
48476: NEG
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: NEG
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 2
48503: NEG
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: LD_INT 0
48511: PUSH
48512: LD_INT 2
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: PUSH
48523: LD_INT 1
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: LD_INT 2
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 0
48543: PUSH
48544: LD_INT 2
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 1
48553: NEG
48554: PUSH
48555: LD_INT 1
48557: PUSH
48558: EMPTY
48559: LIST
48560: LIST
48561: PUSH
48562: LD_INT 1
48564: PUSH
48565: LD_INT 3
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 0
48574: PUSH
48575: LD_INT 3
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 2
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: LIST
48597: LIST
48598: LIST
48599: LIST
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48611: LD_ADDR_VAR 0 12
48615: PUSH
48616: LD_INT 0
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 0
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 1
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 0
48659: PUSH
48660: LD_INT 1
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: PUSH
48667: LD_INT 1
48669: NEG
48670: PUSH
48671: LD_INT 0
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: NEG
48685: PUSH
48686: EMPTY
48687: LIST
48688: LIST
48689: PUSH
48690: LD_INT 1
48692: PUSH
48693: LD_INT 1
48695: NEG
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 1
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 2
48734: NEG
48735: PUSH
48736: LD_INT 0
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: NEG
48746: PUSH
48747: LD_INT 1
48749: NEG
48750: PUSH
48751: EMPTY
48752: LIST
48753: LIST
48754: PUSH
48755: LD_INT 2
48757: NEG
48758: PUSH
48759: LD_INT 1
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 3
48768: NEG
48769: PUSH
48770: LD_INT 0
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: LD_INT 3
48779: NEG
48780: PUSH
48781: LD_INT 1
48783: NEG
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48807: LD_ADDR_VAR 0 13
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 0
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 1
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: LD_INT 0
48855: PUSH
48856: LD_INT 1
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 1
48865: NEG
48866: PUSH
48867: LD_INT 0
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: NEG
48889: PUSH
48890: LD_INT 2
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 2
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 2
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: LD_INT 1
48920: PUSH
48921: LD_INT 2
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: PUSH
48928: LD_INT 2
48930: NEG
48931: PUSH
48932: LD_INT 1
48934: NEG
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 2
48942: NEG
48943: PUSH
48944: LD_INT 2
48946: NEG
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 2
48954: NEG
48955: PUSH
48956: LD_INT 3
48958: NEG
48959: PUSH
48960: EMPTY
48961: LIST
48962: LIST
48963: PUSH
48964: LD_INT 3
48966: NEG
48967: PUSH
48968: LD_INT 2
48970: NEG
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: NEG
48979: PUSH
48980: LD_INT 3
48982: NEG
48983: PUSH
48984: EMPTY
48985: LIST
48986: LIST
48987: PUSH
48988: EMPTY
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49006: LD_ADDR_VAR 0 14
49010: PUSH
49011: LD_INT 0
49013: PUSH
49014: LD_INT 0
49016: PUSH
49017: EMPTY
49018: LIST
49019: LIST
49020: PUSH
49021: LD_INT 0
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 0
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: PUSH
49042: LD_INT 1
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: EMPTY
49049: LIST
49050: LIST
49051: PUSH
49052: LD_INT 0
49054: PUSH
49055: LD_INT 1
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 1
49064: NEG
49065: PUSH
49066: LD_INT 0
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: LD_INT 2
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 0
49099: PUSH
49100: LD_INT 2
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 1
49113: NEG
49114: PUSH
49115: EMPTY
49116: LIST
49117: LIST
49118: PUSH
49119: LD_INT 1
49121: PUSH
49122: LD_INT 2
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: PUSH
49150: LD_INT 1
49152: NEG
49153: PUSH
49154: LD_INT 3
49156: NEG
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 0
49164: PUSH
49165: LD_INT 3
49167: NEG
49168: PUSH
49169: EMPTY
49170: LIST
49171: LIST
49172: PUSH
49173: LD_INT 1
49175: PUSH
49176: LD_INT 2
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49202: LD_ADDR_VAR 0 15
49206: PUSH
49207: LD_INT 0
49209: PUSH
49210: LD_INT 0
49212: PUSH
49213: EMPTY
49214: LIST
49215: LIST
49216: PUSH
49217: LD_INT 0
49219: PUSH
49220: LD_INT 1
49222: NEG
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 1
49230: PUSH
49231: LD_INT 0
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 1
49240: PUSH
49241: LD_INT 1
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 1
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 1
49260: NEG
49261: PUSH
49262: LD_INT 0
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: NEG
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: PUSH
49295: LD_INT 0
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: LD_INT 1
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 1
49314: NEG
49315: PUSH
49316: LD_INT 1
49318: PUSH
49319: EMPTY
49320: LIST
49321: LIST
49322: PUSH
49323: LD_INT 2
49325: NEG
49326: PUSH
49327: LD_INT 0
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: PUSH
49334: LD_INT 2
49336: NEG
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 2
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 3
49359: PUSH
49360: LD_INT 0
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 3
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: LIST
49381: LIST
49382: LIST
49383: LIST
49384: LIST
49385: LIST
49386: LIST
49387: LIST
49388: LIST
49389: LIST
49390: LIST
49391: LIST
49392: LIST
49393: LIST
49394: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49395: LD_ADDR_VAR 0 16
49399: PUSH
49400: LD_INT 0
49402: PUSH
49403: LD_INT 0
49405: PUSH
49406: EMPTY
49407: LIST
49408: LIST
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: LD_INT 1
49415: NEG
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: PUSH
49421: LD_INT 1
49423: PUSH
49424: LD_INT 0
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: LD_INT 1
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: LD_INT 1
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 1
49453: NEG
49454: PUSH
49455: LD_INT 0
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: LD_INT 1
49464: NEG
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 1
49476: NEG
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 2
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: LD_INT 2
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 1
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: LD_INT 2
49518: NEG
49519: PUSH
49520: LD_INT 1
49522: NEG
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: NEG
49531: PUSH
49532: LD_INT 2
49534: NEG
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: PUSH
49543: LD_INT 2
49545: PUSH
49546: EMPTY
49547: LIST
49548: LIST
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 2
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49588: LD_ADDR_VAR 0 17
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 0
49619: PUSH
49620: EMPTY
49621: LIST
49622: LIST
49623: PUSH
49624: LD_INT 1
49626: PUSH
49627: LD_INT 1
49629: PUSH
49630: EMPTY
49631: LIST
49632: LIST
49633: PUSH
49634: LD_INT 0
49636: PUSH
49637: LD_INT 1
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 1
49646: NEG
49647: PUSH
49648: LD_INT 0
49650: PUSH
49651: EMPTY
49652: LIST
49653: LIST
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: LD_INT 2
49673: NEG
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 0
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 1
49692: PUSH
49693: LD_INT 1
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 2
49703: PUSH
49704: LD_INT 0
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: PUSH
49714: LD_INT 1
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: PUSH
49721: LD_INT 2
49723: PUSH
49724: LD_INT 2
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: PUSH
49731: LD_INT 1
49733: PUSH
49734: LD_INT 2
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 2
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 1
49753: NEG
49754: PUSH
49755: LD_INT 1
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 2
49764: NEG
49765: PUSH
49766: LD_INT 0
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 2
49775: NEG
49776: PUSH
49777: LD_INT 1
49779: NEG
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 2
49787: NEG
49788: PUSH
49789: LD_INT 2
49791: NEG
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49818: LD_ADDR_VAR 0 18
49822: PUSH
49823: LD_INT 0
49825: PUSH
49826: LD_INT 0
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: LD_INT 1
49838: NEG
49839: PUSH
49840: EMPTY
49841: LIST
49842: LIST
49843: PUSH
49844: LD_INT 1
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 1
49856: PUSH
49857: LD_INT 1
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 1
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: PUSH
49874: LD_INT 1
49876: NEG
49877: PUSH
49878: LD_INT 0
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: LD_INT 1
49891: NEG
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: LD_INT 2
49903: NEG
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 0
49911: PUSH
49912: LD_INT 2
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 1
49922: PUSH
49923: LD_INT 1
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: PUSH
49934: LD_INT 0
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 2
49943: PUSH
49944: LD_INT 1
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PUSH
49951: LD_INT 2
49953: PUSH
49954: LD_INT 2
49956: PUSH
49957: EMPTY
49958: LIST
49959: LIST
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: LD_INT 2
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: PUSH
49971: LD_INT 0
49973: PUSH
49974: LD_INT 2
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: LD_INT 1
49983: NEG
49984: PUSH
49985: LD_INT 1
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 2
49994: NEG
49995: PUSH
49996: LD_INT 0
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: LD_INT 1
50009: NEG
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: LD_INT 2
50017: NEG
50018: PUSH
50019: LD_INT 2
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: LIST
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50048: LD_ADDR_VAR 0 19
50052: PUSH
50053: LD_INT 0
50055: PUSH
50056: LD_INT 0
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: LD_INT 1
50068: NEG
50069: PUSH
50070: EMPTY
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 1
50076: PUSH
50077: LD_INT 0
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 0
50096: PUSH
50097: LD_INT 1
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 1
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 1
50129: NEG
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: LD_INT 2
50144: NEG
50145: PUSH
50146: EMPTY
50147: LIST
50148: LIST
50149: PUSH
50150: LD_INT 1
50152: PUSH
50153: LD_INT 1
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 2
50163: PUSH
50164: LD_INT 0
50166: PUSH
50167: EMPTY
50168: LIST
50169: LIST
50170: PUSH
50171: LD_INT 2
50173: PUSH
50174: LD_INT 1
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 2
50183: PUSH
50184: LD_INT 2
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: PUSH
50191: LD_INT 1
50193: PUSH
50194: LD_INT 2
50196: PUSH
50197: EMPTY
50198: LIST
50199: LIST
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: LD_INT 2
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: NEG
50214: PUSH
50215: LD_INT 1
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: NEG
50225: PUSH
50226: LD_INT 0
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 2
50235: NEG
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 2
50247: NEG
50248: PUSH
50249: LD_INT 2
50251: NEG
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: PUSH
50257: EMPTY
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50278: LD_ADDR_VAR 0 20
50282: PUSH
50283: LD_INT 0
50285: PUSH
50286: LD_INT 0
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 1
50298: NEG
50299: PUSH
50300: EMPTY
50301: LIST
50302: LIST
50303: PUSH
50304: LD_INT 1
50306: PUSH
50307: LD_INT 0
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: LD_INT 1
50316: PUSH
50317: LD_INT 1
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: LD_INT 0
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: LD_INT 1
50336: NEG
50337: PUSH
50338: LD_INT 0
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 1
50347: NEG
50348: PUSH
50349: LD_INT 1
50351: NEG
50352: PUSH
50353: EMPTY
50354: LIST
50355: LIST
50356: PUSH
50357: LD_INT 1
50359: NEG
50360: PUSH
50361: LD_INT 2
50363: NEG
50364: PUSH
50365: EMPTY
50366: LIST
50367: LIST
50368: PUSH
50369: LD_INT 0
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 1
50382: PUSH
50383: LD_INT 1
50385: NEG
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: LD_INT 1
50406: PUSH
50407: EMPTY
50408: LIST
50409: LIST
50410: PUSH
50411: LD_INT 2
50413: PUSH
50414: LD_INT 2
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 1
50423: PUSH
50424: LD_INT 2
50426: PUSH
50427: EMPTY
50428: LIST
50429: LIST
50430: PUSH
50431: LD_INT 0
50433: PUSH
50434: LD_INT 2
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 2
50454: NEG
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 2
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: NEG
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: NEG
50478: PUSH
50479: LD_INT 2
50481: NEG
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: LIST
50494: LIST
50495: LIST
50496: LIST
50497: LIST
50498: LIST
50499: LIST
50500: LIST
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50508: LD_ADDR_VAR 0 21
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 0
50525: PUSH
50526: LD_INT 1
50528: NEG
50529: PUSH
50530: EMPTY
50531: LIST
50532: LIST
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 1
50546: PUSH
50547: LD_INT 1
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 0
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: NEG
50567: PUSH
50568: LD_INT 0
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 1
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: LD_INT 1
50589: NEG
50590: PUSH
50591: LD_INT 2
50593: NEG
50594: PUSH
50595: EMPTY
50596: LIST
50597: LIST
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: LD_INT 2
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: LD_INT 1
50612: PUSH
50613: LD_INT 1
50615: NEG
50616: PUSH
50617: EMPTY
50618: LIST
50619: LIST
50620: PUSH
50621: LD_INT 2
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 1
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 2
50643: PUSH
50644: LD_INT 2
50646: PUSH
50647: EMPTY
50648: LIST
50649: LIST
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: LD_INT 2
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 2
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 1
50673: NEG
50674: PUSH
50675: LD_INT 1
50677: PUSH
50678: EMPTY
50679: LIST
50680: LIST
50681: PUSH
50682: LD_INT 2
50684: NEG
50685: PUSH
50686: LD_INT 0
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: LD_INT 2
50695: NEG
50696: PUSH
50697: LD_INT 1
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 2
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: LIST
50735: LIST
50736: LIST
50737: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50738: LD_ADDR_VAR 0 22
50742: PUSH
50743: LD_INT 0
50745: PUSH
50746: LD_INT 0
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 0
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 1
50776: PUSH
50777: LD_INT 1
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 0
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: LD_INT 0
50800: PUSH
50801: EMPTY
50802: LIST
50803: LIST
50804: PUSH
50805: LD_INT 1
50807: NEG
50808: PUSH
50809: LD_INT 1
50811: NEG
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 1
50819: NEG
50820: PUSH
50821: LD_INT 2
50823: NEG
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 0
50831: PUSH
50832: LD_INT 2
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 2
50853: PUSH
50854: LD_INT 0
50856: PUSH
50857: EMPTY
50858: LIST
50859: LIST
50860: PUSH
50861: LD_INT 2
50863: PUSH
50864: LD_INT 1
50866: PUSH
50867: EMPTY
50868: LIST
50869: LIST
50870: PUSH
50871: LD_INT 2
50873: PUSH
50874: LD_INT 2
50876: PUSH
50877: EMPTY
50878: LIST
50879: LIST
50880: PUSH
50881: LD_INT 1
50883: PUSH
50884: LD_INT 2
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 0
50893: PUSH
50894: LD_INT 2
50896: PUSH
50897: EMPTY
50898: LIST
50899: LIST
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: LD_INT 1
50907: PUSH
50908: EMPTY
50909: LIST
50910: LIST
50911: PUSH
50912: LD_INT 2
50914: NEG
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: EMPTY
50920: LIST
50921: LIST
50922: PUSH
50923: LD_INT 2
50925: NEG
50926: PUSH
50927: LD_INT 1
50929: NEG
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 2
50937: NEG
50938: PUSH
50939: LD_INT 2
50941: NEG
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50968: LD_ADDR_VAR 0 23
50972: PUSH
50973: LD_INT 0
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 0
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: LD_INT 0
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 1
51009: PUSH
51010: EMPTY
51011: LIST
51012: LIST
51013: PUSH
51014: LD_INT 0
51016: PUSH
51017: LD_INT 1
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 0
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: LD_INT 1
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: LD_INT 1
51049: NEG
51050: PUSH
51051: LD_INT 2
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 0
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 1
51072: PUSH
51073: LD_INT 1
51075: NEG
51076: PUSH
51077: EMPTY
51078: LIST
51079: LIST
51080: PUSH
51081: LD_INT 2
51083: PUSH
51084: LD_INT 0
51086: PUSH
51087: EMPTY
51088: LIST
51089: LIST
51090: PUSH
51091: LD_INT 2
51093: PUSH
51094: LD_INT 1
51096: PUSH
51097: EMPTY
51098: LIST
51099: LIST
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: LD_INT 2
51106: PUSH
51107: EMPTY
51108: LIST
51109: LIST
51110: PUSH
51111: LD_INT 1
51113: PUSH
51114: LD_INT 2
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 0
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: NEG
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 2
51155: NEG
51156: PUSH
51157: LD_INT 1
51159: NEG
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: LD_INT 2
51171: NEG
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 2
51179: NEG
51180: PUSH
51181: LD_INT 3
51183: NEG
51184: PUSH
51185: EMPTY
51186: LIST
51187: LIST
51188: PUSH
51189: LD_INT 1
51191: NEG
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: LD_INT 2
51206: NEG
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: PUSH
51215: LD_INT 1
51217: NEG
51218: PUSH
51219: EMPTY
51220: LIST
51221: LIST
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: LIST
51227: LIST
51228: LIST
51229: LIST
51230: LIST
51231: LIST
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
51248: LD_ADDR_VAR 0 24
51252: PUSH
51253: LD_INT 0
51255: PUSH
51256: LD_INT 0
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: PUSH
51263: LD_INT 0
51265: PUSH
51266: LD_INT 1
51268: NEG
51269: PUSH
51270: EMPTY
51271: LIST
51272: LIST
51273: PUSH
51274: LD_INT 1
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 1
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: EMPTY
51291: LIST
51292: LIST
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: EMPTY
51301: LIST
51302: LIST
51303: PUSH
51304: LD_INT 1
51306: NEG
51307: PUSH
51308: LD_INT 0
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: PUSH
51315: LD_INT 1
51317: NEG
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: NEG
51330: PUSH
51331: LD_INT 2
51333: NEG
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 0
51341: PUSH
51342: LD_INT 2
51344: NEG
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: LD_INT 1
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 2
51373: PUSH
51374: LD_INT 1
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 2
51383: PUSH
51384: LD_INT 2
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 1
51393: PUSH
51394: LD_INT 2
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 0
51403: PUSH
51404: LD_INT 2
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 1
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: NEG
51425: PUSH
51426: LD_INT 0
51428: PUSH
51429: EMPTY
51430: LIST
51431: LIST
51432: PUSH
51433: LD_INT 2
51435: NEG
51436: PUSH
51437: LD_INT 1
51439: NEG
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 2
51447: NEG
51448: PUSH
51449: LD_INT 2
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 1
51459: PUSH
51460: LD_INT 2
51462: NEG
51463: PUSH
51464: EMPTY
51465: LIST
51466: LIST
51467: PUSH
51468: LD_INT 2
51470: PUSH
51471: LD_INT 1
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: PUSH
51482: LD_INT 1
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: LD_INT 3
51491: PUSH
51492: LD_INT 2
51494: PUSH
51495: EMPTY
51496: LIST
51497: LIST
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
51524: LD_ADDR_VAR 0 25
51528: PUSH
51529: LD_INT 0
51531: PUSH
51532: LD_INT 0
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: LD_INT 1
51544: NEG
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 1
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 0
51572: PUSH
51573: LD_INT 1
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: NEG
51583: PUSH
51584: LD_INT 0
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 1
51593: NEG
51594: PUSH
51595: LD_INT 1
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 1
51605: NEG
51606: PUSH
51607: LD_INT 2
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 0
51617: PUSH
51618: LD_INT 2
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 1
51628: PUSH
51629: LD_INT 1
51631: NEG
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: EMPTY
51644: LIST
51645: LIST
51646: PUSH
51647: LD_INT 2
51649: PUSH
51650: LD_INT 1
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 2
51659: PUSH
51660: LD_INT 2
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: PUSH
51667: LD_INT 1
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 0
51679: PUSH
51680: LD_INT 2
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 1
51689: NEG
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 2
51700: NEG
51701: PUSH
51702: LD_INT 0
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PUSH
51709: LD_INT 2
51711: NEG
51712: PUSH
51713: LD_INT 1
51715: NEG
51716: PUSH
51717: EMPTY
51718: LIST
51719: LIST
51720: PUSH
51721: LD_INT 2
51723: NEG
51724: PUSH
51725: LD_INT 2
51727: NEG
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: PUSH
51733: LD_INT 3
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 3
51745: PUSH
51746: LD_INT 2
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 2
51755: PUSH
51756: LD_INT 3
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 3
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51798: LD_ADDR_VAR 0 26
51802: PUSH
51803: LD_INT 0
51805: PUSH
51806: LD_INT 0
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 1
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 1
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: EMPTY
51831: LIST
51832: LIST
51833: PUSH
51834: LD_INT 1
51836: PUSH
51837: LD_INT 1
51839: PUSH
51840: EMPTY
51841: LIST
51842: LIST
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 1
51856: NEG
51857: PUSH
51858: LD_INT 0
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: NEG
51868: PUSH
51869: LD_INT 1
51871: NEG
51872: PUSH
51873: EMPTY
51874: LIST
51875: LIST
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 2
51883: NEG
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PUSH
51889: LD_INT 0
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: EMPTY
51897: LIST
51898: LIST
51899: PUSH
51900: LD_INT 1
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: LD_INT 2
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: EMPTY
51918: LIST
51919: LIST
51920: PUSH
51921: LD_INT 2
51923: PUSH
51924: LD_INT 1
51926: PUSH
51927: EMPTY
51928: LIST
51929: LIST
51930: PUSH
51931: LD_INT 2
51933: PUSH
51934: LD_INT 2
51936: PUSH
51937: EMPTY
51938: LIST
51939: LIST
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: LD_INT 2
51946: PUSH
51947: EMPTY
51948: LIST
51949: LIST
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: LD_INT 2
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: PUSH
51961: LD_INT 1
51963: NEG
51964: PUSH
51965: LD_INT 1
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 2
51974: NEG
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: NEG
51986: PUSH
51987: LD_INT 1
51989: NEG
51990: PUSH
51991: EMPTY
51992: LIST
51993: LIST
51994: PUSH
51995: LD_INT 2
51997: NEG
51998: PUSH
51999: LD_INT 2
52001: NEG
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 2
52009: PUSH
52010: LD_INT 3
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 3
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: NEG
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 2
52040: NEG
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52074: LD_ADDR_VAR 0 27
52078: PUSH
52079: LD_INT 0
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 0
52091: PUSH
52092: LD_INT 1
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 1
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: PUSH
52113: LD_INT 1
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 1
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 0
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 1
52143: NEG
52144: PUSH
52145: LD_INT 1
52147: NEG
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 1
52155: NEG
52156: PUSH
52157: LD_INT 2
52159: NEG
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 0
52167: PUSH
52168: LD_INT 2
52170: NEG
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 1
52178: PUSH
52179: LD_INT 1
52181: NEG
52182: PUSH
52183: EMPTY
52184: LIST
52185: LIST
52186: PUSH
52187: LD_INT 2
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: PUSH
52197: LD_INT 2
52199: PUSH
52200: LD_INT 1
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: PUSH
52210: LD_INT 2
52212: PUSH
52213: EMPTY
52214: LIST
52215: LIST
52216: PUSH
52217: LD_INT 1
52219: PUSH
52220: LD_INT 2
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 0
52229: PUSH
52230: LD_INT 2
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 1
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 0
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 2
52261: NEG
52262: PUSH
52263: LD_INT 1
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 2
52273: NEG
52274: PUSH
52275: LD_INT 2
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 2
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 2
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 3
52307: NEG
52308: PUSH
52309: LD_INT 1
52311: NEG
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52354: LD_ADDR_VAR 0 28
52358: PUSH
52359: LD_INT 0
52361: PUSH
52362: LD_INT 0
52364: PUSH
52365: EMPTY
52366: LIST
52367: LIST
52368: PUSH
52369: LD_INT 0
52371: PUSH
52372: LD_INT 1
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 1
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: PUSH
52393: LD_INT 1
52395: PUSH
52396: EMPTY
52397: LIST
52398: LIST
52399: PUSH
52400: LD_INT 0
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 1
52423: NEG
52424: PUSH
52425: LD_INT 1
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 1
52435: NEG
52436: PUSH
52437: LD_INT 2
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 2
52450: NEG
52451: PUSH
52452: EMPTY
52453: LIST
52454: LIST
52455: PUSH
52456: LD_INT 1
52458: PUSH
52459: LD_INT 1
52461: NEG
52462: PUSH
52463: EMPTY
52464: LIST
52465: LIST
52466: PUSH
52467: LD_INT 2
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 2
52479: PUSH
52480: LD_INT 1
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 2
52489: PUSH
52490: LD_INT 2
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 1
52499: PUSH
52500: LD_INT 2
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 0
52509: PUSH
52510: LD_INT 2
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 1
52523: PUSH
52524: EMPTY
52525: LIST
52526: LIST
52527: PUSH
52528: LD_INT 2
52530: NEG
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 2
52541: NEG
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 2
52553: NEG
52554: PUSH
52555: LD_INT 2
52557: NEG
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 3
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: NEG
52578: PUSH
52579: LD_INT 3
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 3
52589: NEG
52590: PUSH
52591: LD_INT 1
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 3
52601: NEG
52602: PUSH
52603: LD_INT 2
52605: NEG
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: EMPTY
52612: LIST
52613: LIST
52614: LIST
52615: LIST
52616: LIST
52617: LIST
52618: LIST
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
52636: LD_ADDR_VAR 0 29
52640: PUSH
52641: LD_INT 0
52643: PUSH
52644: LD_INT 0
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 1
52656: NEG
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: PUSH
52662: LD_INT 1
52664: PUSH
52665: LD_INT 0
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: PUSH
52675: LD_INT 1
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 0
52684: PUSH
52685: LD_INT 1
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: LD_INT 0
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 1
52705: NEG
52706: PUSH
52707: LD_INT 1
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 1
52717: NEG
52718: PUSH
52719: LD_INT 2
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 0
52729: PUSH
52730: LD_INT 2
52732: NEG
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 1
52740: PUSH
52741: LD_INT 1
52743: NEG
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 2
52751: PUSH
52752: LD_INT 0
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 2
52761: PUSH
52762: LD_INT 1
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: LD_INT 2
52774: PUSH
52775: EMPTY
52776: LIST
52777: LIST
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: LD_INT 2
52784: PUSH
52785: EMPTY
52786: LIST
52787: LIST
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: LD_INT 1
52806: NEG
52807: PUSH
52808: EMPTY
52809: LIST
52810: LIST
52811: PUSH
52812: LD_INT 2
52814: NEG
52815: PUSH
52816: LD_INT 2
52818: NEG
52819: PUSH
52820: EMPTY
52821: LIST
52822: LIST
52823: PUSH
52824: LD_INT 2
52826: NEG
52827: PUSH
52828: LD_INT 3
52830: NEG
52831: PUSH
52832: EMPTY
52833: LIST
52834: LIST
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 1
52841: NEG
52842: PUSH
52843: EMPTY
52844: LIST
52845: LIST
52846: PUSH
52847: LD_INT 3
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: EMPTY
52854: LIST
52855: LIST
52856: PUSH
52857: LD_INT 1
52859: PUSH
52860: LD_INT 3
52862: PUSH
52863: EMPTY
52864: LIST
52865: LIST
52866: PUSH
52867: LD_INT 1
52869: NEG
52870: PUSH
52871: LD_INT 2
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: NEG
52881: PUSH
52882: LD_INT 2
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
52915: LD_ADDR_VAR 0 30
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 0
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 1
52935: NEG
52936: PUSH
52937: EMPTY
52938: LIST
52939: LIST
52940: PUSH
52941: LD_INT 1
52943: PUSH
52944: LD_INT 0
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 1
52953: PUSH
52954: LD_INT 1
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 1
52966: PUSH
52967: EMPTY
52968: LIST
52969: LIST
52970: PUSH
52971: LD_INT 1
52973: NEG
52974: PUSH
52975: LD_INT 0
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: PUSH
52982: LD_INT 1
52984: NEG
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: EMPTY
52991: LIST
52992: LIST
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: LD_INT 2
53000: NEG
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 0
53008: PUSH
53009: LD_INT 2
53011: NEG
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 1
53019: PUSH
53020: LD_INT 1
53022: NEG
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: LD_INT 2
53030: PUSH
53031: LD_INT 0
53033: PUSH
53034: EMPTY
53035: LIST
53036: LIST
53037: PUSH
53038: LD_INT 2
53040: PUSH
53041: LD_INT 1
53043: PUSH
53044: EMPTY
53045: LIST
53046: LIST
53047: PUSH
53048: LD_INT 2
53050: PUSH
53051: LD_INT 2
53053: PUSH
53054: EMPTY
53055: LIST
53056: LIST
53057: PUSH
53058: LD_INT 1
53060: PUSH
53061: LD_INT 2
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 1
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 2
53081: NEG
53082: PUSH
53083: LD_INT 0
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 2
53092: NEG
53093: PUSH
53094: LD_INT 1
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 1
53104: NEG
53105: PUSH
53106: LD_INT 3
53108: NEG
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 1
53116: PUSH
53117: LD_INT 2
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 3
53127: PUSH
53128: LD_INT 2
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: LD_INT 3
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 1
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 1
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53193: LD_ADDR_VAR 0 31
53197: PUSH
53198: LD_INT 0
53200: PUSH
53201: LD_INT 0
53203: PUSH
53204: EMPTY
53205: LIST
53206: LIST
53207: PUSH
53208: LD_INT 0
53210: PUSH
53211: LD_INT 1
53213: NEG
53214: PUSH
53215: EMPTY
53216: LIST
53217: LIST
53218: PUSH
53219: LD_INT 1
53221: PUSH
53222: LD_INT 0
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 1
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 1
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: PUSH
53249: LD_INT 1
53251: NEG
53252: PUSH
53253: LD_INT 0
53255: PUSH
53256: EMPTY
53257: LIST
53258: LIST
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: LD_INT 1
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 1
53274: NEG
53275: PUSH
53276: LD_INT 2
53278: NEG
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 1
53286: PUSH
53287: LD_INT 1
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 2
53307: PUSH
53308: LD_INT 1
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 2
53317: PUSH
53318: LD_INT 2
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: PUSH
53328: LD_INT 2
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 0
53337: PUSH
53338: LD_INT 2
53340: PUSH
53341: EMPTY
53342: LIST
53343: LIST
53344: PUSH
53345: LD_INT 1
53347: NEG
53348: PUSH
53349: LD_INT 1
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: NEG
53359: PUSH
53360: LD_INT 1
53362: NEG
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 2
53370: NEG
53371: PUSH
53372: LD_INT 2
53374: NEG
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 2
53382: NEG
53383: PUSH
53384: LD_INT 3
53386: NEG
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 2
53394: PUSH
53395: LD_INT 1
53397: NEG
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 1
53415: PUSH
53416: LD_INT 3
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: LD_INT 1
53425: NEG
53426: PUSH
53427: LD_INT 2
53429: PUSH
53430: EMPTY
53431: LIST
53432: LIST
53433: PUSH
53434: LD_INT 3
53436: NEG
53437: PUSH
53438: LD_INT 2
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: LIST
53470: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53471: LD_ADDR_VAR 0 32
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 1
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: LD_INT 1
53499: PUSH
53500: LD_INT 0
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: LD_INT 1
53512: PUSH
53513: EMPTY
53514: LIST
53515: LIST
53516: PUSH
53517: LD_INT 0
53519: PUSH
53520: LD_INT 1
53522: PUSH
53523: EMPTY
53524: LIST
53525: LIST
53526: PUSH
53527: LD_INT 1
53529: NEG
53530: PUSH
53531: LD_INT 0
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: LD_INT 1
53544: NEG
53545: PUSH
53546: EMPTY
53547: LIST
53548: LIST
53549: PUSH
53550: LD_INT 1
53552: NEG
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: PUSH
53562: LD_INT 0
53564: PUSH
53565: LD_INT 2
53567: NEG
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: PUSH
53573: LD_INT 1
53575: PUSH
53576: LD_INT 1
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: PUSH
53587: LD_INT 1
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: PUSH
53597: LD_INT 2
53599: PUSH
53600: EMPTY
53601: LIST
53602: LIST
53603: PUSH
53604: LD_INT 1
53606: PUSH
53607: LD_INT 2
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 0
53616: PUSH
53617: LD_INT 2
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 1
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: LD_INT 0
53641: PUSH
53642: EMPTY
53643: LIST
53644: LIST
53645: PUSH
53646: LD_INT 2
53648: NEG
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 1
53660: NEG
53661: PUSH
53662: LD_INT 3
53664: NEG
53665: PUSH
53666: EMPTY
53667: LIST
53668: LIST
53669: PUSH
53670: LD_INT 1
53672: PUSH
53673: LD_INT 2
53675: NEG
53676: PUSH
53677: EMPTY
53678: LIST
53679: LIST
53680: PUSH
53681: LD_INT 3
53683: PUSH
53684: LD_INT 2
53686: PUSH
53687: EMPTY
53688: LIST
53689: LIST
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: EMPTY
53698: LIST
53699: LIST
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: LD_INT 1
53707: PUSH
53708: EMPTY
53709: LIST
53710: LIST
53711: PUSH
53712: LD_INT 3
53714: NEG
53715: PUSH
53716: LD_INT 1
53718: NEG
53719: PUSH
53720: EMPTY
53721: LIST
53722: LIST
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: LIST
53728: LIST
53729: LIST
53730: LIST
53731: LIST
53732: LIST
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: LIST
53745: LIST
53746: LIST
53747: LIST
53748: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53749: LD_ADDR_VAR 0 33
53753: PUSH
53754: LD_INT 0
53756: PUSH
53757: LD_INT 0
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 0
53766: PUSH
53767: LD_INT 1
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 1
53777: PUSH
53778: LD_INT 0
53780: PUSH
53781: EMPTY
53782: LIST
53783: LIST
53784: PUSH
53785: LD_INT 1
53787: PUSH
53788: LD_INT 1
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: LD_INT 0
53797: PUSH
53798: LD_INT 1
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_INT 1
53807: NEG
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 1
53818: NEG
53819: PUSH
53820: LD_INT 1
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 1
53830: NEG
53831: PUSH
53832: LD_INT 2
53834: NEG
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 1
53845: NEG
53846: PUSH
53847: EMPTY
53848: LIST
53849: LIST
53850: PUSH
53851: LD_INT 2
53853: PUSH
53854: LD_INT 0
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 2
53863: PUSH
53864: LD_INT 1
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: PUSH
53874: LD_INT 2
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 0
53883: PUSH
53884: LD_INT 2
53886: PUSH
53887: EMPTY
53888: LIST
53889: LIST
53890: PUSH
53891: LD_INT 1
53893: NEG
53894: PUSH
53895: LD_INT 1
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: NEG
53905: PUSH
53906: LD_INT 0
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 1
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 2
53927: NEG
53928: PUSH
53929: LD_INT 2
53931: NEG
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: LD_INT 3
53943: NEG
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 2
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: LD_INT 1
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 1
53972: PUSH
53973: LD_INT 3
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 1
53982: NEG
53983: PUSH
53984: LD_INT 2
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 3
53993: NEG
53994: PUSH
53995: LD_INT 2
53997: NEG
53998: PUSH
53999: EMPTY
54000: LIST
54001: LIST
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54028: LD_ADDR_VAR 0 34
54032: PUSH
54033: LD_INT 0
54035: PUSH
54036: LD_INT 0
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 0
54045: PUSH
54046: LD_INT 1
54048: NEG
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_INT 1
54056: PUSH
54057: LD_INT 0
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 1
54066: PUSH
54067: LD_INT 1
54069: PUSH
54070: EMPTY
54071: LIST
54072: LIST
54073: PUSH
54074: LD_INT 0
54076: PUSH
54077: LD_INT 1
54079: PUSH
54080: EMPTY
54081: LIST
54082: LIST
54083: PUSH
54084: LD_INT 1
54086: NEG
54087: PUSH
54088: LD_INT 0
54090: PUSH
54091: EMPTY
54092: LIST
54093: LIST
54094: PUSH
54095: LD_INT 1
54097: NEG
54098: PUSH
54099: LD_INT 1
54101: NEG
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: PUSH
54107: LD_INT 1
54109: NEG
54110: PUSH
54111: LD_INT 2
54113: NEG
54114: PUSH
54115: EMPTY
54116: LIST
54117: LIST
54118: PUSH
54119: LD_INT 0
54121: PUSH
54122: LD_INT 2
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 1
54132: PUSH
54133: LD_INT 1
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 2
54143: PUSH
54144: LD_INT 1
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 2
54153: PUSH
54154: LD_INT 2
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 1
54163: PUSH
54164: LD_INT 2
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 1
54173: NEG
54174: PUSH
54175: LD_INT 1
54177: PUSH
54178: EMPTY
54179: LIST
54180: LIST
54181: PUSH
54182: LD_INT 2
54184: NEG
54185: PUSH
54186: LD_INT 0
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 2
54195: NEG
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: EMPTY
54202: LIST
54203: LIST
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: LD_INT 2
54211: NEG
54212: PUSH
54213: EMPTY
54214: LIST
54215: LIST
54216: PUSH
54217: LD_INT 1
54219: NEG
54220: PUSH
54221: LD_INT 3
54223: NEG
54224: PUSH
54225: EMPTY
54226: LIST
54227: LIST
54228: PUSH
54229: LD_INT 1
54231: PUSH
54232: LD_INT 2
54234: NEG
54235: PUSH
54236: EMPTY
54237: LIST
54238: LIST
54239: PUSH
54240: LD_INT 3
54242: PUSH
54243: LD_INT 2
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: PUSH
54250: LD_INT 2
54252: PUSH
54253: LD_INT 3
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: NEG
54263: PUSH
54264: LD_INT 1
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: LD_INT 1
54277: NEG
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: LIST
54289: LIST
54290: LIST
54291: LIST
54292: LIST
54293: LIST
54294: LIST
54295: LIST
54296: LIST
54297: LIST
54298: LIST
54299: LIST
54300: LIST
54301: LIST
54302: LIST
54303: LIST
54304: LIST
54305: LIST
54306: LIST
54307: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54308: LD_ADDR_VAR 0 35
54312: PUSH
54313: LD_INT 0
54315: PUSH
54316: LD_INT 0
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 0
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: PUSH
54337: LD_INT 0
54339: PUSH
54340: EMPTY
54341: LIST
54342: LIST
54343: PUSH
54344: LD_INT 1
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 0
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: EMPTY
54361: LIST
54362: LIST
54363: PUSH
54364: LD_INT 1
54366: NEG
54367: PUSH
54368: LD_INT 0
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: LD_INT 1
54381: NEG
54382: PUSH
54383: EMPTY
54384: LIST
54385: LIST
54386: PUSH
54387: LD_INT 2
54389: PUSH
54390: LD_INT 1
54392: PUSH
54393: EMPTY
54394: LIST
54395: LIST
54396: PUSH
54397: LD_INT 2
54399: NEG
54400: PUSH
54401: LD_INT 1
54403: NEG
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: LIST
54415: LIST
54416: LIST
54417: LIST
54418: LIST
54419: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54420: LD_ADDR_VAR 0 36
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 0
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 0
54437: PUSH
54438: LD_INT 1
54440: NEG
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: PUSH
54446: LD_INT 1
54448: PUSH
54449: LD_INT 0
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 1
54458: PUSH
54459: LD_INT 1
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_INT 0
54468: PUSH
54469: LD_INT 1
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 0
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 1
54489: NEG
54490: PUSH
54491: LD_INT 1
54493: NEG
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: PUSH
54499: LD_INT 1
54501: NEG
54502: PUSH
54503: LD_INT 2
54505: NEG
54506: PUSH
54507: EMPTY
54508: LIST
54509: LIST
54510: PUSH
54511: LD_INT 1
54513: PUSH
54514: LD_INT 2
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54532: LD_ADDR_VAR 0 37
54536: PUSH
54537: LD_INT 0
54539: PUSH
54540: LD_INT 0
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 0
54549: PUSH
54550: LD_INT 1
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 1
54560: PUSH
54561: LD_INT 0
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 1
54570: PUSH
54571: LD_INT 1
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 0
54580: PUSH
54581: LD_INT 1
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: NEG
54591: PUSH
54592: LD_INT 0
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: PUSH
54599: LD_INT 1
54601: NEG
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: EMPTY
54608: LIST
54609: LIST
54610: PUSH
54611: LD_INT 1
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: EMPTY
54619: LIST
54620: LIST
54621: PUSH
54622: LD_INT 1
54624: NEG
54625: PUSH
54626: LD_INT 1
54628: PUSH
54629: EMPTY
54630: LIST
54631: LIST
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
54644: LD_ADDR_VAR 0 38
54648: PUSH
54649: LD_INT 0
54651: PUSH
54652: LD_INT 0
54654: PUSH
54655: EMPTY
54656: LIST
54657: LIST
54658: PUSH
54659: LD_INT 0
54661: PUSH
54662: LD_INT 1
54664: NEG
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 1
54672: PUSH
54673: LD_INT 0
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 1
54682: PUSH
54683: LD_INT 1
54685: PUSH
54686: EMPTY
54687: LIST
54688: LIST
54689: PUSH
54690: LD_INT 0
54692: PUSH
54693: LD_INT 1
54695: PUSH
54696: EMPTY
54697: LIST
54698: LIST
54699: PUSH
54700: LD_INT 1
54702: NEG
54703: PUSH
54704: LD_INT 0
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: PUSH
54711: LD_INT 1
54713: NEG
54714: PUSH
54715: LD_INT 1
54717: NEG
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 1
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: NEG
54736: PUSH
54737: LD_INT 1
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: LIST
54751: LIST
54752: LIST
54753: LIST
54754: LIST
54755: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
54756: LD_ADDR_VAR 0 39
54760: PUSH
54761: LD_INT 0
54763: PUSH
54764: LD_INT 0
54766: PUSH
54767: EMPTY
54768: LIST
54769: LIST
54770: PUSH
54771: LD_INT 0
54773: PUSH
54774: LD_INT 1
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 1
54784: PUSH
54785: LD_INT 0
54787: PUSH
54788: EMPTY
54789: LIST
54790: LIST
54791: PUSH
54792: LD_INT 1
54794: PUSH
54795: LD_INT 1
54797: PUSH
54798: EMPTY
54799: LIST
54800: LIST
54801: PUSH
54802: LD_INT 0
54804: PUSH
54805: LD_INT 1
54807: PUSH
54808: EMPTY
54809: LIST
54810: LIST
54811: PUSH
54812: LD_INT 1
54814: NEG
54815: PUSH
54816: LD_INT 0
54818: PUSH
54819: EMPTY
54820: LIST
54821: LIST
54822: PUSH
54823: LD_INT 1
54825: NEG
54826: PUSH
54827: LD_INT 1
54829: NEG
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 1
54837: NEG
54838: PUSH
54839: LD_INT 2
54841: NEG
54842: PUSH
54843: EMPTY
54844: LIST
54845: LIST
54846: PUSH
54847: LD_INT 1
54849: PUSH
54850: LD_INT 2
54852: PUSH
54853: EMPTY
54854: LIST
54855: LIST
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
54868: LD_ADDR_VAR 0 40
54872: PUSH
54873: LD_INT 0
54875: PUSH
54876: LD_INT 0
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 0
54885: PUSH
54886: LD_INT 1
54888: NEG
54889: PUSH
54890: EMPTY
54891: LIST
54892: LIST
54893: PUSH
54894: LD_INT 1
54896: PUSH
54897: LD_INT 0
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 1
54906: PUSH
54907: LD_INT 1
54909: PUSH
54910: EMPTY
54911: LIST
54912: LIST
54913: PUSH
54914: LD_INT 0
54916: PUSH
54917: LD_INT 1
54919: PUSH
54920: EMPTY
54921: LIST
54922: LIST
54923: PUSH
54924: LD_INT 1
54926: NEG
54927: PUSH
54928: LD_INT 0
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: PUSH
54935: LD_INT 1
54937: NEG
54938: PUSH
54939: LD_INT 1
54941: NEG
54942: PUSH
54943: EMPTY
54944: LIST
54945: LIST
54946: PUSH
54947: LD_INT 1
54949: PUSH
54950: LD_INT 1
54952: NEG
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 1
54960: NEG
54961: PUSH
54962: LD_INT 1
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: LIST
54978: LIST
54979: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
54980: LD_ADDR_VAR 0 41
54984: PUSH
54985: LD_INT 0
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: EMPTY
54992: LIST
54993: LIST
54994: PUSH
54995: LD_INT 0
54997: PUSH
54998: LD_INT 1
55000: NEG
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: PUSH
55006: LD_INT 1
55008: PUSH
55009: LD_INT 0
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 1
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 1
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: NEG
55039: PUSH
55040: LD_INT 0
55042: PUSH
55043: EMPTY
55044: LIST
55045: LIST
55046: PUSH
55047: LD_INT 1
55049: NEG
55050: PUSH
55051: LD_INT 1
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 1
55061: NEG
55062: PUSH
55063: LD_INT 2
55065: NEG
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 2
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 2
55094: PUSH
55095: LD_INT 1
55097: PUSH
55098: EMPTY
55099: LIST
55100: LIST
55101: PUSH
55102: LD_INT 2
55104: PUSH
55105: LD_INT 2
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: PUSH
55112: LD_INT 1
55114: PUSH
55115: LD_INT 2
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 1
55124: NEG
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: EMPTY
55130: LIST
55131: LIST
55132: PUSH
55133: LD_INT 2
55135: NEG
55136: PUSH
55137: LD_INT 0
55139: PUSH
55140: EMPTY
55141: LIST
55142: LIST
55143: PUSH
55144: LD_INT 2
55146: NEG
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: PUSH
55156: LD_INT 2
55158: NEG
55159: PUSH
55160: LD_INT 2
55162: NEG
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 2
55170: NEG
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 2
55182: PUSH
55183: LD_INT 1
55185: NEG
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: LD_INT 0
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: LD_INT 1
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: LD_INT 2
55216: PUSH
55217: EMPTY
55218: LIST
55219: LIST
55220: PUSH
55221: LD_INT 3
55223: PUSH
55224: LD_INT 3
55226: PUSH
55227: EMPTY
55228: LIST
55229: LIST
55230: PUSH
55231: LD_INT 2
55233: PUSH
55234: LD_INT 3
55236: PUSH
55237: EMPTY
55238: LIST
55239: LIST
55240: PUSH
55241: LD_INT 2
55243: NEG
55244: PUSH
55245: LD_INT 1
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 3
55254: NEG
55255: PUSH
55256: LD_INT 0
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: PUSH
55263: LD_INT 3
55265: NEG
55266: PUSH
55267: LD_INT 1
55269: NEG
55270: PUSH
55271: EMPTY
55272: LIST
55273: LIST
55274: PUSH
55275: LD_INT 3
55277: NEG
55278: PUSH
55279: LD_INT 2
55281: NEG
55282: PUSH
55283: EMPTY
55284: LIST
55285: LIST
55286: PUSH
55287: LD_INT 3
55289: NEG
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: LIST
55310: LIST
55311: LIST
55312: LIST
55313: LIST
55314: LIST
55315: LIST
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55330: LD_ADDR_VAR 0 42
55334: PUSH
55335: LD_INT 0
55337: PUSH
55338: LD_INT 0
55340: PUSH
55341: EMPTY
55342: LIST
55343: LIST
55344: PUSH
55345: LD_INT 0
55347: PUSH
55348: LD_INT 1
55350: NEG
55351: PUSH
55352: EMPTY
55353: LIST
55354: LIST
55355: PUSH
55356: LD_INT 1
55358: PUSH
55359: LD_INT 0
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 1
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 0
55378: PUSH
55379: LD_INT 1
55381: PUSH
55382: EMPTY
55383: LIST
55384: LIST
55385: PUSH
55386: LD_INT 1
55388: NEG
55389: PUSH
55390: LD_INT 0
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: LD_INT 1
55403: NEG
55404: PUSH
55405: EMPTY
55406: LIST
55407: LIST
55408: PUSH
55409: LD_INT 1
55411: NEG
55412: PUSH
55413: LD_INT 2
55415: NEG
55416: PUSH
55417: EMPTY
55418: LIST
55419: LIST
55420: PUSH
55421: LD_INT 0
55423: PUSH
55424: LD_INT 2
55426: NEG
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: PUSH
55432: LD_INT 1
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: EMPTY
55440: LIST
55441: LIST
55442: PUSH
55443: LD_INT 2
55445: PUSH
55446: LD_INT 1
55448: PUSH
55449: EMPTY
55450: LIST
55451: LIST
55452: PUSH
55453: LD_INT 2
55455: PUSH
55456: LD_INT 2
55458: PUSH
55459: EMPTY
55460: LIST
55461: LIST
55462: PUSH
55463: LD_INT 1
55465: PUSH
55466: LD_INT 2
55468: PUSH
55469: EMPTY
55470: LIST
55471: LIST
55472: PUSH
55473: LD_INT 0
55475: PUSH
55476: LD_INT 2
55478: PUSH
55479: EMPTY
55480: LIST
55481: LIST
55482: PUSH
55483: LD_INT 1
55485: NEG
55486: PUSH
55487: LD_INT 1
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 2
55496: NEG
55497: PUSH
55498: LD_INT 1
55500: NEG
55501: PUSH
55502: EMPTY
55503: LIST
55504: LIST
55505: PUSH
55506: LD_INT 2
55508: NEG
55509: PUSH
55510: LD_INT 2
55512: NEG
55513: PUSH
55514: EMPTY
55515: LIST
55516: LIST
55517: PUSH
55518: LD_INT 2
55520: NEG
55521: PUSH
55522: LD_INT 3
55524: NEG
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 1
55532: NEG
55533: PUSH
55534: LD_INT 3
55536: NEG
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 0
55544: PUSH
55545: LD_INT 3
55547: NEG
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 1
55555: PUSH
55556: LD_INT 2
55558: NEG
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 3
55566: PUSH
55567: LD_INT 2
55569: PUSH
55570: EMPTY
55571: LIST
55572: LIST
55573: PUSH
55574: LD_INT 3
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: EMPTY
55581: LIST
55582: LIST
55583: PUSH
55584: LD_INT 2
55586: PUSH
55587: LD_INT 3
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PUSH
55594: LD_INT 1
55596: PUSH
55597: LD_INT 3
55599: PUSH
55600: EMPTY
55601: LIST
55602: LIST
55603: PUSH
55604: LD_INT 0
55606: PUSH
55607: LD_INT 3
55609: PUSH
55610: EMPTY
55611: LIST
55612: LIST
55613: PUSH
55614: LD_INT 1
55616: NEG
55617: PUSH
55618: LD_INT 2
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: PUSH
55625: LD_INT 3
55627: NEG
55628: PUSH
55629: LD_INT 2
55631: NEG
55632: PUSH
55633: EMPTY
55634: LIST
55635: LIST
55636: PUSH
55637: LD_INT 3
55639: NEG
55640: PUSH
55641: LD_INT 3
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: EMPTY
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55680: LD_ADDR_VAR 0 43
55684: PUSH
55685: LD_INT 0
55687: PUSH
55688: LD_INT 0
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: LD_INT 0
55697: PUSH
55698: LD_INT 1
55700: NEG
55701: PUSH
55702: EMPTY
55703: LIST
55704: LIST
55705: PUSH
55706: LD_INT 1
55708: PUSH
55709: LD_INT 0
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 1
55718: PUSH
55719: LD_INT 1
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: LD_INT 0
55728: PUSH
55729: LD_INT 1
55731: PUSH
55732: EMPTY
55733: LIST
55734: LIST
55735: PUSH
55736: LD_INT 1
55738: NEG
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: EMPTY
55744: LIST
55745: LIST
55746: PUSH
55747: LD_INT 1
55749: NEG
55750: PUSH
55751: LD_INT 1
55753: NEG
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 1
55761: NEG
55762: PUSH
55763: LD_INT 2
55765: NEG
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 0
55773: PUSH
55774: LD_INT 2
55776: NEG
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: PUSH
55782: LD_INT 1
55784: PUSH
55785: LD_INT 1
55787: NEG
55788: PUSH
55789: EMPTY
55790: LIST
55791: LIST
55792: PUSH
55793: LD_INT 2
55795: PUSH
55796: LD_INT 0
55798: PUSH
55799: EMPTY
55800: LIST
55801: LIST
55802: PUSH
55803: LD_INT 2
55805: PUSH
55806: LD_INT 1
55808: PUSH
55809: EMPTY
55810: LIST
55811: LIST
55812: PUSH
55813: LD_INT 1
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 0
55825: PUSH
55826: LD_INT 2
55828: PUSH
55829: EMPTY
55830: LIST
55831: LIST
55832: PUSH
55833: LD_INT 1
55835: NEG
55836: PUSH
55837: LD_INT 1
55839: PUSH
55840: EMPTY
55841: LIST
55842: LIST
55843: PUSH
55844: LD_INT 2
55846: NEG
55847: PUSH
55848: LD_INT 0
55850: PUSH
55851: EMPTY
55852: LIST
55853: LIST
55854: PUSH
55855: LD_INT 2
55857: NEG
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: EMPTY
55864: LIST
55865: LIST
55866: PUSH
55867: LD_INT 1
55869: NEG
55870: PUSH
55871: LD_INT 3
55873: NEG
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 0
55881: PUSH
55882: LD_INT 3
55884: NEG
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 1
55892: PUSH
55893: LD_INT 2
55895: NEG
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PUSH
55901: LD_INT 2
55903: PUSH
55904: LD_INT 1
55906: NEG
55907: PUSH
55908: EMPTY
55909: LIST
55910: LIST
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: LD_INT 0
55917: PUSH
55918: EMPTY
55919: LIST
55920: LIST
55921: PUSH
55922: LD_INT 3
55924: PUSH
55925: LD_INT 1
55927: PUSH
55928: EMPTY
55929: LIST
55930: LIST
55931: PUSH
55932: LD_INT 1
55934: PUSH
55935: LD_INT 3
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PUSH
55942: LD_INT 0
55944: PUSH
55945: LD_INT 3
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 1
55954: NEG
55955: PUSH
55956: LD_INT 2
55958: PUSH
55959: EMPTY
55960: LIST
55961: LIST
55962: PUSH
55963: LD_INT 2
55965: NEG
55966: PUSH
55967: LD_INT 1
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 3
55976: NEG
55977: PUSH
55978: LD_INT 0
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 3
55987: NEG
55988: PUSH
55989: LD_INT 1
55991: NEG
55992: PUSH
55993: EMPTY
55994: LIST
55995: LIST
55996: PUSH
55997: EMPTY
55998: LIST
55999: LIST
56000: LIST
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: LIST
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: LIST
56015: LIST
56016: LIST
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: LIST
56023: LIST
56024: LIST
56025: LIST
56026: LIST
56027: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56028: LD_ADDR_VAR 0 44
56032: PUSH
56033: LD_INT 0
56035: PUSH
56036: LD_INT 0
56038: PUSH
56039: EMPTY
56040: LIST
56041: LIST
56042: PUSH
56043: LD_INT 0
56045: PUSH
56046: LD_INT 1
56048: NEG
56049: PUSH
56050: EMPTY
56051: LIST
56052: LIST
56053: PUSH
56054: LD_INT 1
56056: PUSH
56057: LD_INT 0
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 1
56066: PUSH
56067: LD_INT 1
56069: PUSH
56070: EMPTY
56071: LIST
56072: LIST
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 1
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 1
56086: NEG
56087: PUSH
56088: LD_INT 0
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: NEG
56098: PUSH
56099: LD_INT 1
56101: NEG
56102: PUSH
56103: EMPTY
56104: LIST
56105: LIST
56106: PUSH
56107: LD_INT 1
56109: NEG
56110: PUSH
56111: LD_INT 2
56113: NEG
56114: PUSH
56115: EMPTY
56116: LIST
56117: LIST
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: LD_INT 1
56124: NEG
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: PUSH
56130: LD_INT 2
56132: PUSH
56133: LD_INT 0
56135: PUSH
56136: EMPTY
56137: LIST
56138: LIST
56139: PUSH
56140: LD_INT 2
56142: PUSH
56143: LD_INT 1
56145: PUSH
56146: EMPTY
56147: LIST
56148: LIST
56149: PUSH
56150: LD_INT 2
56152: PUSH
56153: LD_INT 2
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 1
56162: PUSH
56163: LD_INT 2
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 1
56172: NEG
56173: PUSH
56174: LD_INT 1
56176: PUSH
56177: EMPTY
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 2
56183: NEG
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: NEG
56195: PUSH
56196: LD_INT 1
56198: NEG
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 2
56206: NEG
56207: PUSH
56208: LD_INT 2
56210: NEG
56211: PUSH
56212: EMPTY
56213: LIST
56214: LIST
56215: PUSH
56216: LD_INT 2
56218: NEG
56219: PUSH
56220: LD_INT 3
56222: NEG
56223: PUSH
56224: EMPTY
56225: LIST
56226: LIST
56227: PUSH
56228: LD_INT 2
56230: PUSH
56231: LD_INT 1
56233: NEG
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: PUSH
56239: LD_INT 3
56241: PUSH
56242: LD_INT 0
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: PUSH
56249: LD_INT 3
56251: PUSH
56252: LD_INT 1
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PUSH
56259: LD_INT 3
56261: PUSH
56262: LD_INT 2
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: PUSH
56269: LD_INT 3
56271: PUSH
56272: LD_INT 3
56274: PUSH
56275: EMPTY
56276: LIST
56277: LIST
56278: PUSH
56279: LD_INT 2
56281: PUSH
56282: LD_INT 3
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: PUSH
56289: LD_INT 2
56291: NEG
56292: PUSH
56293: LD_INT 1
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: LD_INT 3
56302: NEG
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: EMPTY
56308: LIST
56309: LIST
56310: PUSH
56311: LD_INT 3
56313: NEG
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: EMPTY
56320: LIST
56321: LIST
56322: PUSH
56323: LD_INT 3
56325: NEG
56326: PUSH
56327: LD_INT 2
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 3
56337: NEG
56338: PUSH
56339: LD_INT 3
56341: NEG
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: EMPTY
56348: LIST
56349: LIST
56350: LIST
56351: LIST
56352: LIST
56353: LIST
56354: LIST
56355: LIST
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: LIST
56361: LIST
56362: LIST
56363: LIST
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: LIST
56371: LIST
56372: LIST
56373: LIST
56374: LIST
56375: LIST
56376: LIST
56377: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56378: LD_ADDR_VAR 0 45
56382: PUSH
56383: LD_INT 0
56385: PUSH
56386: LD_INT 0
56388: PUSH
56389: EMPTY
56390: LIST
56391: LIST
56392: PUSH
56393: LD_INT 0
56395: PUSH
56396: LD_INT 1
56398: NEG
56399: PUSH
56400: EMPTY
56401: LIST
56402: LIST
56403: PUSH
56404: LD_INT 1
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: LD_INT 1
56419: PUSH
56420: EMPTY
56421: LIST
56422: LIST
56423: PUSH
56424: LD_INT 0
56426: PUSH
56427: LD_INT 1
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: PUSH
56434: LD_INT 1
56436: NEG
56437: PUSH
56438: LD_INT 0
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: PUSH
56445: LD_INT 1
56447: NEG
56448: PUSH
56449: LD_INT 1
56451: NEG
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: PUSH
56457: LD_INT 1
56459: NEG
56460: PUSH
56461: LD_INT 2
56463: NEG
56464: PUSH
56465: EMPTY
56466: LIST
56467: LIST
56468: PUSH
56469: LD_INT 0
56471: PUSH
56472: LD_INT 2
56474: NEG
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_INT 1
56482: PUSH
56483: LD_INT 1
56485: NEG
56486: PUSH
56487: EMPTY
56488: LIST
56489: LIST
56490: PUSH
56491: LD_INT 2
56493: PUSH
56494: LD_INT 1
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: PUSH
56501: LD_INT 2
56503: PUSH
56504: LD_INT 2
56506: PUSH
56507: EMPTY
56508: LIST
56509: LIST
56510: PUSH
56511: LD_INT 1
56513: PUSH
56514: LD_INT 2
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 2
56526: PUSH
56527: EMPTY
56528: LIST
56529: LIST
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PUSH
56535: LD_INT 1
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: PUSH
56542: LD_INT 2
56544: NEG
56545: PUSH
56546: LD_INT 1
56548: NEG
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: PUSH
56554: LD_INT 2
56556: NEG
56557: PUSH
56558: LD_INT 2
56560: NEG
56561: PUSH
56562: EMPTY
56563: LIST
56564: LIST
56565: PUSH
56566: LD_INT 2
56568: NEG
56569: PUSH
56570: LD_INT 3
56572: NEG
56573: PUSH
56574: EMPTY
56575: LIST
56576: LIST
56577: PUSH
56578: LD_INT 1
56580: NEG
56581: PUSH
56582: LD_INT 3
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 0
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 1
56603: PUSH
56604: LD_INT 2
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 3
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_INT 3
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: PUSH
56632: LD_INT 2
56634: PUSH
56635: LD_INT 3
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 1
56644: PUSH
56645: LD_INT 3
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 0
56654: PUSH
56655: LD_INT 3
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 1
56664: NEG
56665: PUSH
56666: LD_INT 2
56668: PUSH
56669: EMPTY
56670: LIST
56671: LIST
56672: PUSH
56673: LD_INT 3
56675: NEG
56676: PUSH
56677: LD_INT 2
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 3
56687: NEG
56688: PUSH
56689: LD_INT 3
56691: NEG
56692: PUSH
56693: EMPTY
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: LIST
56706: LIST
56707: LIST
56708: LIST
56709: LIST
56710: LIST
56711: LIST
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: LIST
56718: LIST
56719: LIST
56720: LIST
56721: LIST
56722: LIST
56723: LIST
56724: LIST
56725: LIST
56726: LIST
56727: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56728: LD_ADDR_VAR 0 46
56732: PUSH
56733: LD_INT 0
56735: PUSH
56736: LD_INT 0
56738: PUSH
56739: EMPTY
56740: LIST
56741: LIST
56742: PUSH
56743: LD_INT 0
56745: PUSH
56746: LD_INT 1
56748: NEG
56749: PUSH
56750: EMPTY
56751: LIST
56752: LIST
56753: PUSH
56754: LD_INT 1
56756: PUSH
56757: LD_INT 0
56759: PUSH
56760: EMPTY
56761: LIST
56762: LIST
56763: PUSH
56764: LD_INT 1
56766: PUSH
56767: LD_INT 1
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: PUSH
56780: EMPTY
56781: LIST
56782: LIST
56783: PUSH
56784: LD_INT 1
56786: NEG
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: NEG
56798: PUSH
56799: LD_INT 1
56801: NEG
56802: PUSH
56803: EMPTY
56804: LIST
56805: LIST
56806: PUSH
56807: LD_INT 1
56809: NEG
56810: PUSH
56811: LD_INT 2
56813: NEG
56814: PUSH
56815: EMPTY
56816: LIST
56817: LIST
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: LD_INT 2
56824: NEG
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: PUSH
56830: LD_INT 1
56832: PUSH
56833: LD_INT 1
56835: NEG
56836: PUSH
56837: EMPTY
56838: LIST
56839: LIST
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: PUSH
56851: LD_INT 2
56853: PUSH
56854: LD_INT 1
56856: PUSH
56857: EMPTY
56858: LIST
56859: LIST
56860: PUSH
56861: LD_INT 1
56863: PUSH
56864: LD_INT 2
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 0
56873: PUSH
56874: LD_INT 2
56876: PUSH
56877: EMPTY
56878: LIST
56879: LIST
56880: PUSH
56881: LD_INT 1
56883: NEG
56884: PUSH
56885: LD_INT 1
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: PUSH
56892: LD_INT 2
56894: NEG
56895: PUSH
56896: LD_INT 0
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 2
56905: NEG
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: PUSH
56911: EMPTY
56912: LIST
56913: LIST
56914: PUSH
56915: LD_INT 1
56917: NEG
56918: PUSH
56919: LD_INT 3
56921: NEG
56922: PUSH
56923: EMPTY
56924: LIST
56925: LIST
56926: PUSH
56927: LD_INT 0
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: EMPTY
56935: LIST
56936: LIST
56937: PUSH
56938: LD_INT 1
56940: PUSH
56941: LD_INT 2
56943: NEG
56944: PUSH
56945: EMPTY
56946: LIST
56947: LIST
56948: PUSH
56949: LD_INT 2
56951: PUSH
56952: LD_INT 1
56954: NEG
56955: PUSH
56956: EMPTY
56957: LIST
56958: LIST
56959: PUSH
56960: LD_INT 3
56962: PUSH
56963: LD_INT 0
56965: PUSH
56966: EMPTY
56967: LIST
56968: LIST
56969: PUSH
56970: LD_INT 3
56972: PUSH
56973: LD_INT 1
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: PUSH
56980: LD_INT 1
56982: PUSH
56983: LD_INT 3
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 0
56992: PUSH
56993: LD_INT 3
56995: PUSH
56996: EMPTY
56997: LIST
56998: LIST
56999: PUSH
57000: LD_INT 1
57002: NEG
57003: PUSH
57004: LD_INT 2
57006: PUSH
57007: EMPTY
57008: LIST
57009: LIST
57010: PUSH
57011: LD_INT 2
57013: NEG
57014: PUSH
57015: LD_INT 1
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 3
57024: NEG
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 3
57035: NEG
57036: PUSH
57037: LD_INT 1
57039: NEG
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: LIST
57052: LIST
57053: LIST
57054: LIST
57055: LIST
57056: LIST
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: LIST
57064: LIST
57065: LIST
57066: LIST
57067: LIST
57068: LIST
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57076: LD_ADDR_VAR 0 47
57080: PUSH
57081: LD_INT 0
57083: PUSH
57084: LD_INT 0
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: PUSH
57091: LD_INT 0
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: LD_INT 1
57104: PUSH
57105: LD_INT 0
57107: PUSH
57108: EMPTY
57109: LIST
57110: LIST
57111: PUSH
57112: LD_INT 1
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: EMPTY
57119: LIST
57120: LIST
57121: PUSH
57122: LD_INT 0
57124: PUSH
57125: LD_INT 1
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 1
57134: NEG
57135: PUSH
57136: LD_INT 0
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: PUSH
57143: LD_INT 1
57145: NEG
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: PUSH
57151: EMPTY
57152: LIST
57153: LIST
57154: PUSH
57155: LD_INT 1
57157: NEG
57158: PUSH
57159: LD_INT 2
57161: NEG
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 0
57169: PUSH
57170: LD_INT 2
57172: NEG
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: PUSH
57181: LD_INT 1
57183: NEG
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 2
57191: NEG
57192: PUSH
57193: LD_INT 1
57195: NEG
57196: PUSH
57197: EMPTY
57198: LIST
57199: LIST
57200: PUSH
57201: LD_INT 2
57203: NEG
57204: PUSH
57205: LD_INT 2
57207: NEG
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
57227: LD_ADDR_VAR 0 48
57231: PUSH
57232: LD_INT 0
57234: PUSH
57235: LD_INT 0
57237: PUSH
57238: EMPTY
57239: LIST
57240: LIST
57241: PUSH
57242: LD_INT 0
57244: PUSH
57245: LD_INT 1
57247: NEG
57248: PUSH
57249: EMPTY
57250: LIST
57251: LIST
57252: PUSH
57253: LD_INT 1
57255: PUSH
57256: LD_INT 0
57258: PUSH
57259: EMPTY
57260: LIST
57261: LIST
57262: PUSH
57263: LD_INT 1
57265: PUSH
57266: LD_INT 1
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: PUSH
57273: LD_INT 0
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: PUSH
57283: LD_INT 1
57285: NEG
57286: PUSH
57287: LD_INT 0
57289: PUSH
57290: EMPTY
57291: LIST
57292: LIST
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: LD_INT 1
57300: NEG
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 1
57308: NEG
57309: PUSH
57310: LD_INT 2
57312: NEG
57313: PUSH
57314: EMPTY
57315: LIST
57316: LIST
57317: PUSH
57318: LD_INT 0
57320: PUSH
57321: LD_INT 2
57323: NEG
57324: PUSH
57325: EMPTY
57326: LIST
57327: LIST
57328: PUSH
57329: LD_INT 1
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 2
57342: PUSH
57343: LD_INT 0
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: PUSH
57350: LD_INT 2
57352: PUSH
57353: LD_INT 1
57355: PUSH
57356: EMPTY
57357: LIST
57358: LIST
57359: PUSH
57360: EMPTY
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
57374: LD_ADDR_VAR 0 49
57378: PUSH
57379: LD_INT 0
57381: PUSH
57382: LD_INT 0
57384: PUSH
57385: EMPTY
57386: LIST
57387: LIST
57388: PUSH
57389: LD_INT 0
57391: PUSH
57392: LD_INT 1
57394: NEG
57395: PUSH
57396: EMPTY
57397: LIST
57398: LIST
57399: PUSH
57400: LD_INT 1
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: EMPTY
57407: LIST
57408: LIST
57409: PUSH
57410: LD_INT 1
57412: PUSH
57413: LD_INT 1
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: PUSH
57420: LD_INT 0
57422: PUSH
57423: LD_INT 1
57425: PUSH
57426: EMPTY
57427: LIST
57428: LIST
57429: PUSH
57430: LD_INT 1
57432: NEG
57433: PUSH
57434: LD_INT 0
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: PUSH
57441: LD_INT 1
57443: NEG
57444: PUSH
57445: LD_INT 1
57447: NEG
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: PUSH
57453: LD_INT 1
57455: PUSH
57456: LD_INT 1
57458: NEG
57459: PUSH
57460: EMPTY
57461: LIST
57462: LIST
57463: PUSH
57464: LD_INT 2
57466: PUSH
57467: LD_INT 0
57469: PUSH
57470: EMPTY
57471: LIST
57472: LIST
57473: PUSH
57474: LD_INT 2
57476: PUSH
57477: LD_INT 1
57479: PUSH
57480: EMPTY
57481: LIST
57482: LIST
57483: PUSH
57484: LD_INT 2
57486: PUSH
57487: LD_INT 2
57489: PUSH
57490: EMPTY
57491: LIST
57492: LIST
57493: PUSH
57494: LD_INT 1
57496: PUSH
57497: LD_INT 2
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: EMPTY
57505: LIST
57506: LIST
57507: LIST
57508: LIST
57509: LIST
57510: LIST
57511: LIST
57512: LIST
57513: LIST
57514: LIST
57515: LIST
57516: LIST
57517: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
57518: LD_ADDR_VAR 0 50
57522: PUSH
57523: LD_INT 0
57525: PUSH
57526: LD_INT 0
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 0
57535: PUSH
57536: LD_INT 1
57538: NEG
57539: PUSH
57540: EMPTY
57541: LIST
57542: LIST
57543: PUSH
57544: LD_INT 1
57546: PUSH
57547: LD_INT 0
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: PUSH
57554: LD_INT 1
57556: PUSH
57557: LD_INT 1
57559: PUSH
57560: EMPTY
57561: LIST
57562: LIST
57563: PUSH
57564: LD_INT 0
57566: PUSH
57567: LD_INT 1
57569: PUSH
57570: EMPTY
57571: LIST
57572: LIST
57573: PUSH
57574: LD_INT 1
57576: NEG
57577: PUSH
57578: LD_INT 0
57580: PUSH
57581: EMPTY
57582: LIST
57583: LIST
57584: PUSH
57585: LD_INT 1
57587: NEG
57588: PUSH
57589: LD_INT 1
57591: NEG
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: PUSH
57597: LD_INT 2
57599: PUSH
57600: LD_INT 1
57602: PUSH
57603: EMPTY
57604: LIST
57605: LIST
57606: PUSH
57607: LD_INT 2
57609: PUSH
57610: LD_INT 2
57612: PUSH
57613: EMPTY
57614: LIST
57615: LIST
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: LD_INT 2
57622: PUSH
57623: EMPTY
57624: LIST
57625: LIST
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: LD_INT 2
57632: PUSH
57633: EMPTY
57634: LIST
57635: LIST
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: LD_INT 1
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
57662: LD_ADDR_VAR 0 51
57666: PUSH
57667: LD_INT 0
57669: PUSH
57670: LD_INT 0
57672: PUSH
57673: EMPTY
57674: LIST
57675: LIST
57676: PUSH
57677: LD_INT 0
57679: PUSH
57680: LD_INT 1
57682: NEG
57683: PUSH
57684: EMPTY
57685: LIST
57686: LIST
57687: PUSH
57688: LD_INT 1
57690: PUSH
57691: LD_INT 0
57693: PUSH
57694: EMPTY
57695: LIST
57696: LIST
57697: PUSH
57698: LD_INT 1
57700: PUSH
57701: LD_INT 1
57703: PUSH
57704: EMPTY
57705: LIST
57706: LIST
57707: PUSH
57708: LD_INT 0
57710: PUSH
57711: LD_INT 1
57713: PUSH
57714: EMPTY
57715: LIST
57716: LIST
57717: PUSH
57718: LD_INT 1
57720: NEG
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 1
57731: NEG
57732: PUSH
57733: LD_INT 1
57735: NEG
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: EMPTY
57748: LIST
57749: LIST
57750: PUSH
57751: LD_INT 0
57753: PUSH
57754: LD_INT 2
57756: PUSH
57757: EMPTY
57758: LIST
57759: LIST
57760: PUSH
57761: LD_INT 1
57763: NEG
57764: PUSH
57765: LD_INT 1
57767: PUSH
57768: EMPTY
57769: LIST
57770: LIST
57771: PUSH
57772: LD_INT 2
57774: NEG
57775: PUSH
57776: LD_INT 0
57778: PUSH
57779: EMPTY
57780: LIST
57781: LIST
57782: PUSH
57783: LD_INT 2
57785: NEG
57786: PUSH
57787: LD_INT 1
57789: NEG
57790: PUSH
57791: EMPTY
57792: LIST
57793: LIST
57794: PUSH
57795: EMPTY
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57809: LD_ADDR_VAR 0 52
57813: PUSH
57814: LD_INT 0
57816: PUSH
57817: LD_INT 0
57819: PUSH
57820: EMPTY
57821: LIST
57822: LIST
57823: PUSH
57824: LD_INT 0
57826: PUSH
57827: LD_INT 1
57829: NEG
57830: PUSH
57831: EMPTY
57832: LIST
57833: LIST
57834: PUSH
57835: LD_INT 1
57837: PUSH
57838: LD_INT 0
57840: PUSH
57841: EMPTY
57842: LIST
57843: LIST
57844: PUSH
57845: LD_INT 1
57847: PUSH
57848: LD_INT 1
57850: PUSH
57851: EMPTY
57852: LIST
57853: LIST
57854: PUSH
57855: LD_INT 0
57857: PUSH
57858: LD_INT 1
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: PUSH
57865: LD_INT 1
57867: NEG
57868: PUSH
57869: LD_INT 0
57871: PUSH
57872: EMPTY
57873: LIST
57874: LIST
57875: PUSH
57876: LD_INT 1
57878: NEG
57879: PUSH
57880: LD_INT 1
57882: NEG
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: PUSH
57888: LD_INT 1
57890: NEG
57891: PUSH
57892: LD_INT 2
57894: NEG
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: PUSH
57900: LD_INT 1
57902: NEG
57903: PUSH
57904: LD_INT 1
57906: PUSH
57907: EMPTY
57908: LIST
57909: LIST
57910: PUSH
57911: LD_INT 2
57913: NEG
57914: PUSH
57915: LD_INT 0
57917: PUSH
57918: EMPTY
57919: LIST
57920: LIST
57921: PUSH
57922: LD_INT 2
57924: NEG
57925: PUSH
57926: LD_INT 1
57928: NEG
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: PUSH
57934: LD_INT 2
57936: NEG
57937: PUSH
57938: LD_INT 2
57940: NEG
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: LIST
57950: LIST
57951: LIST
57952: LIST
57953: LIST
57954: LIST
57955: LIST
57956: LIST
57957: LIST
57958: LIST
57959: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
57960: LD_ADDR_VAR 0 53
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: PUSH
57975: LD_INT 0
57977: PUSH
57978: LD_INT 1
57980: NEG
57981: PUSH
57982: EMPTY
57983: LIST
57984: LIST
57985: PUSH
57986: LD_INT 1
57988: PUSH
57989: LD_INT 0
57991: PUSH
57992: EMPTY
57993: LIST
57994: LIST
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: LD_INT 1
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 0
58008: PUSH
58009: LD_INT 1
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: LD_INT 0
58022: PUSH
58023: EMPTY
58024: LIST
58025: LIST
58026: PUSH
58027: LD_INT 1
58029: NEG
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 1
58041: NEG
58042: PUSH
58043: LD_INT 2
58045: NEG
58046: PUSH
58047: EMPTY
58048: LIST
58049: LIST
58050: PUSH
58051: LD_INT 0
58053: PUSH
58054: LD_INT 2
58056: NEG
58057: PUSH
58058: EMPTY
58059: LIST
58060: LIST
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: LD_INT 1
58067: NEG
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: PUSH
58073: LD_INT 2
58075: PUSH
58076: LD_INT 0
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 2
58085: PUSH
58086: LD_INT 1
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 2
58098: PUSH
58099: EMPTY
58100: LIST
58101: LIST
58102: PUSH
58103: LD_INT 1
58105: PUSH
58106: LD_INT 2
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: PUSH
58113: LD_INT 0
58115: PUSH
58116: LD_INT 2
58118: PUSH
58119: EMPTY
58120: LIST
58121: LIST
58122: PUSH
58123: LD_INT 1
58125: NEG
58126: PUSH
58127: LD_INT 1
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 2
58136: NEG
58137: PUSH
58138: LD_INT 0
58140: PUSH
58141: EMPTY
58142: LIST
58143: LIST
58144: PUSH
58145: LD_INT 2
58147: NEG
58148: PUSH
58149: LD_INT 1
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 2
58159: NEG
58160: PUSH
58161: LD_INT 2
58163: NEG
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: LIST
58175: LIST
58176: LIST
58177: LIST
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: LIST
58184: LIST
58185: LIST
58186: LIST
58187: LIST
58188: LIST
58189: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58190: LD_ADDR_VAR 0 54
58194: PUSH
58195: LD_INT 0
58197: PUSH
58198: LD_INT 0
58200: PUSH
58201: EMPTY
58202: LIST
58203: LIST
58204: PUSH
58205: LD_INT 0
58207: PUSH
58208: LD_INT 1
58210: NEG
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: PUSH
58216: LD_INT 1
58218: PUSH
58219: LD_INT 0
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: PUSH
58226: LD_INT 1
58228: PUSH
58229: LD_INT 1
58231: PUSH
58232: EMPTY
58233: LIST
58234: LIST
58235: PUSH
58236: LD_INT 0
58238: PUSH
58239: LD_INT 1
58241: PUSH
58242: EMPTY
58243: LIST
58244: LIST
58245: PUSH
58246: LD_INT 1
58248: NEG
58249: PUSH
58250: LD_INT 0
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PUSH
58261: LD_INT 1
58263: NEG
58264: PUSH
58265: EMPTY
58266: LIST
58267: LIST
58268: PUSH
58269: LD_INT 1
58271: NEG
58272: PUSH
58273: LD_INT 2
58275: NEG
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 0
58283: PUSH
58284: LD_INT 2
58286: NEG
58287: PUSH
58288: EMPTY
58289: LIST
58290: LIST
58291: PUSH
58292: LD_INT 1
58294: PUSH
58295: LD_INT 1
58297: NEG
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: PUSH
58303: LD_INT 2
58305: PUSH
58306: LD_INT 0
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PUSH
58313: LD_INT 2
58315: PUSH
58316: LD_INT 1
58318: PUSH
58319: EMPTY
58320: LIST
58321: LIST
58322: PUSH
58323: LD_INT 2
58325: PUSH
58326: LD_INT 2
58328: PUSH
58329: EMPTY
58330: LIST
58331: LIST
58332: PUSH
58333: LD_INT 1
58335: PUSH
58336: LD_INT 2
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: PUSH
58343: LD_INT 0
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: EMPTY
58350: LIST
58351: LIST
58352: PUSH
58353: LD_INT 1
58355: NEG
58356: PUSH
58357: LD_INT 1
58359: PUSH
58360: EMPTY
58361: LIST
58362: LIST
58363: PUSH
58364: LD_INT 2
58366: NEG
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: NEG
58378: PUSH
58379: LD_INT 1
58381: NEG
58382: PUSH
58383: EMPTY
58384: LIST
58385: LIST
58386: PUSH
58387: LD_INT 2
58389: NEG
58390: PUSH
58391: LD_INT 2
58393: NEG
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: EMPTY
58400: LIST
58401: LIST
58402: LIST
58403: LIST
58404: LIST
58405: LIST
58406: LIST
58407: LIST
58408: LIST
58409: LIST
58410: LIST
58411: LIST
58412: LIST
58413: LIST
58414: LIST
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58420: LD_ADDR_VAR 0 55
58424: PUSH
58425: LD_INT 0
58427: PUSH
58428: LD_INT 0
58430: PUSH
58431: EMPTY
58432: LIST
58433: LIST
58434: PUSH
58435: LD_INT 0
58437: PUSH
58438: LD_INT 1
58440: NEG
58441: PUSH
58442: EMPTY
58443: LIST
58444: LIST
58445: PUSH
58446: LD_INT 1
58448: PUSH
58449: LD_INT 0
58451: PUSH
58452: EMPTY
58453: LIST
58454: LIST
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: LD_INT 1
58461: PUSH
58462: EMPTY
58463: LIST
58464: LIST
58465: PUSH
58466: LD_INT 0
58468: PUSH
58469: LD_INT 1
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: PUSH
58476: LD_INT 1
58478: NEG
58479: PUSH
58480: LD_INT 0
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: PUSH
58487: LD_INT 1
58489: NEG
58490: PUSH
58491: LD_INT 1
58493: NEG
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 1
58501: NEG
58502: PUSH
58503: LD_INT 2
58505: NEG
58506: PUSH
58507: EMPTY
58508: LIST
58509: LIST
58510: PUSH
58511: LD_INT 0
58513: PUSH
58514: LD_INT 2
58516: NEG
58517: PUSH
58518: EMPTY
58519: LIST
58520: LIST
58521: PUSH
58522: LD_INT 1
58524: PUSH
58525: LD_INT 1
58527: NEG
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 2
58535: PUSH
58536: LD_INT 0
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 2
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 2
58555: PUSH
58556: LD_INT 2
58558: PUSH
58559: EMPTY
58560: LIST
58561: LIST
58562: PUSH
58563: LD_INT 1
58565: PUSH
58566: LD_INT 2
58568: PUSH
58569: EMPTY
58570: LIST
58571: LIST
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: PUSH
58583: LD_INT 1
58585: NEG
58586: PUSH
58587: LD_INT 1
58589: PUSH
58590: EMPTY
58591: LIST
58592: LIST
58593: PUSH
58594: LD_INT 2
58596: NEG
58597: PUSH
58598: LD_INT 0
58600: PUSH
58601: EMPTY
58602: LIST
58603: LIST
58604: PUSH
58605: LD_INT 2
58607: NEG
58608: PUSH
58609: LD_INT 1
58611: NEG
58612: PUSH
58613: EMPTY
58614: LIST
58615: LIST
58616: PUSH
58617: LD_INT 2
58619: NEG
58620: PUSH
58621: LD_INT 2
58623: NEG
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: PUSH
58629: EMPTY
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: LIST
58649: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58650: LD_ADDR_VAR 0 56
58654: PUSH
58655: LD_INT 0
58657: PUSH
58658: LD_INT 0
58660: PUSH
58661: EMPTY
58662: LIST
58663: LIST
58664: PUSH
58665: LD_INT 0
58667: PUSH
58668: LD_INT 1
58670: NEG
58671: PUSH
58672: EMPTY
58673: LIST
58674: LIST
58675: PUSH
58676: LD_INT 1
58678: PUSH
58679: LD_INT 0
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: PUSH
58686: LD_INT 1
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 0
58698: PUSH
58699: LD_INT 1
58701: PUSH
58702: EMPTY
58703: LIST
58704: LIST
58705: PUSH
58706: LD_INT 1
58708: NEG
58709: PUSH
58710: LD_INT 0
58712: PUSH
58713: EMPTY
58714: LIST
58715: LIST
58716: PUSH
58717: LD_INT 1
58719: NEG
58720: PUSH
58721: LD_INT 1
58723: NEG
58724: PUSH
58725: EMPTY
58726: LIST
58727: LIST
58728: PUSH
58729: LD_INT 1
58731: NEG
58732: PUSH
58733: LD_INT 2
58735: NEG
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 0
58743: PUSH
58744: LD_INT 2
58746: NEG
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: PUSH
58752: LD_INT 1
58754: PUSH
58755: LD_INT 1
58757: NEG
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: PUSH
58763: LD_INT 2
58765: PUSH
58766: LD_INT 0
58768: PUSH
58769: EMPTY
58770: LIST
58771: LIST
58772: PUSH
58773: LD_INT 2
58775: PUSH
58776: LD_INT 1
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: LD_INT 2
58785: PUSH
58786: LD_INT 2
58788: PUSH
58789: EMPTY
58790: LIST
58791: LIST
58792: PUSH
58793: LD_INT 1
58795: PUSH
58796: LD_INT 2
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: LD_INT 2
58808: PUSH
58809: EMPTY
58810: LIST
58811: LIST
58812: PUSH
58813: LD_INT 1
58815: NEG
58816: PUSH
58817: LD_INT 1
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 2
58826: NEG
58827: PUSH
58828: LD_INT 0
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: PUSH
58835: LD_INT 2
58837: NEG
58838: PUSH
58839: LD_INT 1
58841: NEG
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 2
58849: NEG
58850: PUSH
58851: LD_INT 2
58853: NEG
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: LIST
58873: LIST
58874: LIST
58875: LIST
58876: LIST
58877: LIST
58878: LIST
58879: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58880: LD_ADDR_VAR 0 57
58884: PUSH
58885: LD_INT 0
58887: PUSH
58888: LD_INT 0
58890: PUSH
58891: EMPTY
58892: LIST
58893: LIST
58894: PUSH
58895: LD_INT 0
58897: PUSH
58898: LD_INT 1
58900: NEG
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 1
58908: PUSH
58909: LD_INT 0
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: LD_INT 1
58918: PUSH
58919: LD_INT 1
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 0
58928: PUSH
58929: LD_INT 1
58931: PUSH
58932: EMPTY
58933: LIST
58934: LIST
58935: PUSH
58936: LD_INT 1
58938: NEG
58939: PUSH
58940: LD_INT 0
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: PUSH
58947: LD_INT 1
58949: NEG
58950: PUSH
58951: LD_INT 1
58953: NEG
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: LD_INT 1
58961: NEG
58962: PUSH
58963: LD_INT 2
58965: NEG
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: PUSH
58971: LD_INT 0
58973: PUSH
58974: LD_INT 2
58976: NEG
58977: PUSH
58978: EMPTY
58979: LIST
58980: LIST
58981: PUSH
58982: LD_INT 1
58984: PUSH
58985: LD_INT 1
58987: NEG
58988: PUSH
58989: EMPTY
58990: LIST
58991: LIST
58992: PUSH
58993: LD_INT 2
58995: PUSH
58996: LD_INT 0
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: LD_INT 2
59005: PUSH
59006: LD_INT 1
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 2
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 1
59025: PUSH
59026: LD_INT 2
59028: PUSH
59029: EMPTY
59030: LIST
59031: LIST
59032: PUSH
59033: LD_INT 0
59035: PUSH
59036: LD_INT 2
59038: PUSH
59039: EMPTY
59040: LIST
59041: LIST
59042: PUSH
59043: LD_INT 1
59045: NEG
59046: PUSH
59047: LD_INT 1
59049: PUSH
59050: EMPTY
59051: LIST
59052: LIST
59053: PUSH
59054: LD_INT 2
59056: NEG
59057: PUSH
59058: LD_INT 0
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: PUSH
59065: LD_INT 2
59067: NEG
59068: PUSH
59069: LD_INT 1
59071: NEG
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: PUSH
59077: LD_INT 2
59079: NEG
59080: PUSH
59081: LD_INT 2
59083: NEG
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: LIST
59093: LIST
59094: LIST
59095: LIST
59096: LIST
59097: LIST
59098: LIST
59099: LIST
59100: LIST
59101: LIST
59102: LIST
59103: LIST
59104: LIST
59105: LIST
59106: LIST
59107: LIST
59108: LIST
59109: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59110: LD_ADDR_VAR 0 58
59114: PUSH
59115: LD_INT 0
59117: PUSH
59118: LD_INT 0
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 1
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 1
59148: PUSH
59149: LD_INT 1
59151: PUSH
59152: EMPTY
59153: LIST
59154: LIST
59155: PUSH
59156: LD_INT 0
59158: PUSH
59159: LD_INT 1
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 1
59168: NEG
59169: PUSH
59170: LD_INT 0
59172: PUSH
59173: EMPTY
59174: LIST
59175: LIST
59176: PUSH
59177: LD_INT 1
59179: NEG
59180: PUSH
59181: LD_INT 1
59183: NEG
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: LD_INT 1
59191: NEG
59192: PUSH
59193: LD_INT 2
59195: NEG
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: PUSH
59201: LD_INT 0
59203: PUSH
59204: LD_INT 2
59206: NEG
59207: PUSH
59208: EMPTY
59209: LIST
59210: LIST
59211: PUSH
59212: LD_INT 1
59214: PUSH
59215: LD_INT 1
59217: NEG
59218: PUSH
59219: EMPTY
59220: LIST
59221: LIST
59222: PUSH
59223: LD_INT 2
59225: PUSH
59226: LD_INT 0
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: PUSH
59233: LD_INT 2
59235: PUSH
59236: LD_INT 1
59238: PUSH
59239: EMPTY
59240: LIST
59241: LIST
59242: PUSH
59243: LD_INT 2
59245: PUSH
59246: LD_INT 2
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: PUSH
59253: LD_INT 1
59255: PUSH
59256: LD_INT 2
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 0
59265: PUSH
59266: LD_INT 2
59268: PUSH
59269: EMPTY
59270: LIST
59271: LIST
59272: PUSH
59273: LD_INT 1
59275: NEG
59276: PUSH
59277: LD_INT 1
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: PUSH
59284: LD_INT 2
59286: NEG
59287: PUSH
59288: LD_INT 0
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: PUSH
59295: LD_INT 2
59297: NEG
59298: PUSH
59299: LD_INT 1
59301: NEG
59302: PUSH
59303: EMPTY
59304: LIST
59305: LIST
59306: PUSH
59307: LD_INT 2
59309: NEG
59310: PUSH
59311: LD_INT 2
59313: NEG
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: LIST
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: LIST
59330: LIST
59331: LIST
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: LIST
59337: LIST
59338: LIST
59339: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59340: LD_ADDR_VAR 0 59
59344: PUSH
59345: LD_INT 0
59347: PUSH
59348: LD_INT 0
59350: PUSH
59351: EMPTY
59352: LIST
59353: LIST
59354: PUSH
59355: LD_INT 0
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 1
59368: PUSH
59369: LD_INT 0
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 1
59378: PUSH
59379: LD_INT 1
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 0
59388: PUSH
59389: LD_INT 1
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 1
59398: NEG
59399: PUSH
59400: LD_INT 0
59402: PUSH
59403: EMPTY
59404: LIST
59405: LIST
59406: PUSH
59407: LD_INT 1
59409: NEG
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59428: LD_ADDR_VAR 0 60
59432: PUSH
59433: LD_INT 0
59435: PUSH
59436: LD_INT 0
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: PUSH
59443: LD_INT 0
59445: PUSH
59446: LD_INT 1
59448: NEG
59449: PUSH
59450: EMPTY
59451: LIST
59452: LIST
59453: PUSH
59454: LD_INT 1
59456: PUSH
59457: LD_INT 0
59459: PUSH
59460: EMPTY
59461: LIST
59462: LIST
59463: PUSH
59464: LD_INT 1
59466: PUSH
59467: LD_INT 1
59469: PUSH
59470: EMPTY
59471: LIST
59472: LIST
59473: PUSH
59474: LD_INT 0
59476: PUSH
59477: LD_INT 1
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: PUSH
59484: LD_INT 1
59486: NEG
59487: PUSH
59488: LD_INT 0
59490: PUSH
59491: EMPTY
59492: LIST
59493: LIST
59494: PUSH
59495: LD_INT 1
59497: NEG
59498: PUSH
59499: LD_INT 1
59501: NEG
59502: PUSH
59503: EMPTY
59504: LIST
59505: LIST
59506: PUSH
59507: EMPTY
59508: LIST
59509: LIST
59510: LIST
59511: LIST
59512: LIST
59513: LIST
59514: LIST
59515: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59516: LD_ADDR_VAR 0 61
59520: PUSH
59521: LD_INT 0
59523: PUSH
59524: LD_INT 0
59526: PUSH
59527: EMPTY
59528: LIST
59529: LIST
59530: PUSH
59531: LD_INT 0
59533: PUSH
59534: LD_INT 1
59536: NEG
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 0
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 1
59554: PUSH
59555: LD_INT 1
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 0
59564: PUSH
59565: LD_INT 1
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: PUSH
59572: LD_INT 1
59574: NEG
59575: PUSH
59576: LD_INT 0
59578: PUSH
59579: EMPTY
59580: LIST
59581: LIST
59582: PUSH
59583: LD_INT 1
59585: NEG
59586: PUSH
59587: LD_INT 1
59589: NEG
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: LIST
59599: LIST
59600: LIST
59601: LIST
59602: LIST
59603: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59604: LD_ADDR_VAR 0 62
59608: PUSH
59609: LD_INT 0
59611: PUSH
59612: LD_INT 0
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: LD_INT 0
59621: PUSH
59622: LD_INT 1
59624: NEG
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: PUSH
59630: LD_INT 1
59632: PUSH
59633: LD_INT 0
59635: PUSH
59636: EMPTY
59637: LIST
59638: LIST
59639: PUSH
59640: LD_INT 1
59642: PUSH
59643: LD_INT 1
59645: PUSH
59646: EMPTY
59647: LIST
59648: LIST
59649: PUSH
59650: LD_INT 0
59652: PUSH
59653: LD_INT 1
59655: PUSH
59656: EMPTY
59657: LIST
59658: LIST
59659: PUSH
59660: LD_INT 1
59662: NEG
59663: PUSH
59664: LD_INT 0
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PUSH
59671: LD_INT 1
59673: NEG
59674: PUSH
59675: LD_INT 1
59677: NEG
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: PUSH
59683: EMPTY
59684: LIST
59685: LIST
59686: LIST
59687: LIST
59688: LIST
59689: LIST
59690: LIST
59691: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59692: LD_ADDR_VAR 0 63
59696: PUSH
59697: LD_INT 0
59699: PUSH
59700: LD_INT 0
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 0
59709: PUSH
59710: LD_INT 1
59712: NEG
59713: PUSH
59714: EMPTY
59715: LIST
59716: LIST
59717: PUSH
59718: LD_INT 1
59720: PUSH
59721: LD_INT 0
59723: PUSH
59724: EMPTY
59725: LIST
59726: LIST
59727: PUSH
59728: LD_INT 1
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: EMPTY
59735: LIST
59736: LIST
59737: PUSH
59738: LD_INT 0
59740: PUSH
59741: LD_INT 1
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: PUSH
59748: LD_INT 1
59750: NEG
59751: PUSH
59752: LD_INT 0
59754: PUSH
59755: EMPTY
59756: LIST
59757: LIST
59758: PUSH
59759: LD_INT 1
59761: NEG
59762: PUSH
59763: LD_INT 1
59765: NEG
59766: PUSH
59767: EMPTY
59768: LIST
59769: LIST
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: LIST
59775: LIST
59776: LIST
59777: LIST
59778: LIST
59779: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
59780: LD_ADDR_VAR 0 64
59784: PUSH
59785: LD_INT 0
59787: PUSH
59788: LD_INT 0
59790: PUSH
59791: EMPTY
59792: LIST
59793: LIST
59794: PUSH
59795: LD_INT 0
59797: PUSH
59798: LD_INT 1
59800: NEG
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: PUSH
59806: LD_INT 1
59808: PUSH
59809: LD_INT 0
59811: PUSH
59812: EMPTY
59813: LIST
59814: LIST
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: LD_INT 1
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 0
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: PUSH
59836: LD_INT 1
59838: NEG
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: LD_INT 1
59849: NEG
59850: PUSH
59851: LD_INT 1
59853: NEG
59854: PUSH
59855: EMPTY
59856: LIST
59857: LIST
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: LIST
59863: LIST
59864: LIST
59865: LIST
59866: LIST
59867: ST_TO_ADDR
// end ; 1 :
59868: GO 65765
59870: LD_INT 1
59872: DOUBLE
59873: EQUAL
59874: IFTRUE 59878
59876: GO 62501
59878: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59879: LD_ADDR_VAR 0 11
59883: PUSH
59884: LD_INT 1
59886: NEG
59887: PUSH
59888: LD_INT 3
59890: NEG
59891: PUSH
59892: EMPTY
59893: LIST
59894: LIST
59895: PUSH
59896: LD_INT 0
59898: PUSH
59899: LD_INT 3
59901: NEG
59902: PUSH
59903: EMPTY
59904: LIST
59905: LIST
59906: PUSH
59907: LD_INT 1
59909: PUSH
59910: LD_INT 2
59912: NEG
59913: PUSH
59914: EMPTY
59915: LIST
59916: LIST
59917: PUSH
59918: EMPTY
59919: LIST
59920: LIST
59921: LIST
59922: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59923: LD_ADDR_VAR 0 12
59927: PUSH
59928: LD_INT 2
59930: PUSH
59931: LD_INT 1
59933: NEG
59934: PUSH
59935: EMPTY
59936: LIST
59937: LIST
59938: PUSH
59939: LD_INT 3
59941: PUSH
59942: LD_INT 0
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PUSH
59949: LD_INT 3
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: EMPTY
59956: LIST
59957: LIST
59958: PUSH
59959: EMPTY
59960: LIST
59961: LIST
59962: LIST
59963: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59964: LD_ADDR_VAR 0 13
59968: PUSH
59969: LD_INT 3
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: EMPTY
59976: LIST
59977: LIST
59978: PUSH
59979: LD_INT 3
59981: PUSH
59982: LD_INT 3
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: PUSH
59989: LD_INT 2
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: PUSH
59999: EMPTY
60000: LIST
60001: LIST
60002: LIST
60003: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60004: LD_ADDR_VAR 0 14
60008: PUSH
60009: LD_INT 1
60011: PUSH
60012: LD_INT 3
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: PUSH
60019: LD_INT 0
60021: PUSH
60022: LD_INT 3
60024: PUSH
60025: EMPTY
60026: LIST
60027: LIST
60028: PUSH
60029: LD_INT 1
60031: NEG
60032: PUSH
60033: LD_INT 2
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: LIST
60044: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60045: LD_ADDR_VAR 0 15
60049: PUSH
60050: LD_INT 2
60052: NEG
60053: PUSH
60054: LD_INT 1
60056: PUSH
60057: EMPTY
60058: LIST
60059: LIST
60060: PUSH
60061: LD_INT 3
60063: NEG
60064: PUSH
60065: LD_INT 0
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: PUSH
60072: LD_INT 3
60074: NEG
60075: PUSH
60076: LD_INT 1
60078: NEG
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60089: LD_ADDR_VAR 0 16
60093: PUSH
60094: LD_INT 2
60096: NEG
60097: PUSH
60098: LD_INT 3
60100: NEG
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 3
60108: NEG
60109: PUSH
60110: LD_INT 2
60112: NEG
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: PUSH
60118: LD_INT 3
60120: NEG
60121: PUSH
60122: LD_INT 3
60124: NEG
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: LIST
60134: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60135: LD_ADDR_VAR 0 17
60139: PUSH
60140: LD_INT 1
60142: NEG
60143: PUSH
60144: LD_INT 3
60146: NEG
60147: PUSH
60148: EMPTY
60149: LIST
60150: LIST
60151: PUSH
60152: LD_INT 0
60154: PUSH
60155: LD_INT 3
60157: NEG
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 1
60165: PUSH
60166: LD_INT 2
60168: NEG
60169: PUSH
60170: EMPTY
60171: LIST
60172: LIST
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: LIST
60178: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60179: LD_ADDR_VAR 0 18
60183: PUSH
60184: LD_INT 2
60186: PUSH
60187: LD_INT 1
60189: NEG
60190: PUSH
60191: EMPTY
60192: LIST
60193: LIST
60194: PUSH
60195: LD_INT 3
60197: PUSH
60198: LD_INT 0
60200: PUSH
60201: EMPTY
60202: LIST
60203: LIST
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 1
60210: PUSH
60211: EMPTY
60212: LIST
60213: LIST
60214: PUSH
60215: EMPTY
60216: LIST
60217: LIST
60218: LIST
60219: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60220: LD_ADDR_VAR 0 19
60224: PUSH
60225: LD_INT 3
60227: PUSH
60228: LD_INT 2
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 3
60237: PUSH
60238: LD_INT 3
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: LD_INT 3
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: EMPTY
60256: LIST
60257: LIST
60258: LIST
60259: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60260: LD_ADDR_VAR 0 20
60264: PUSH
60265: LD_INT 1
60267: PUSH
60268: LD_INT 3
60270: PUSH
60271: EMPTY
60272: LIST
60273: LIST
60274: PUSH
60275: LD_INT 0
60277: PUSH
60278: LD_INT 3
60280: PUSH
60281: EMPTY
60282: LIST
60283: LIST
60284: PUSH
60285: LD_INT 1
60287: NEG
60288: PUSH
60289: LD_INT 2
60291: PUSH
60292: EMPTY
60293: LIST
60294: LIST
60295: PUSH
60296: EMPTY
60297: LIST
60298: LIST
60299: LIST
60300: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60301: LD_ADDR_VAR 0 21
60305: PUSH
60306: LD_INT 2
60308: NEG
60309: PUSH
60310: LD_INT 1
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: PUSH
60317: LD_INT 3
60319: NEG
60320: PUSH
60321: LD_INT 0
60323: PUSH
60324: EMPTY
60325: LIST
60326: LIST
60327: PUSH
60328: LD_INT 3
60330: NEG
60331: PUSH
60332: LD_INT 1
60334: NEG
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: LIST
60344: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60345: LD_ADDR_VAR 0 22
60349: PUSH
60350: LD_INT 2
60352: NEG
60353: PUSH
60354: LD_INT 3
60356: NEG
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 3
60364: NEG
60365: PUSH
60366: LD_INT 2
60368: NEG
60369: PUSH
60370: EMPTY
60371: LIST
60372: LIST
60373: PUSH
60374: LD_INT 3
60376: NEG
60377: PUSH
60378: LD_INT 3
60380: NEG
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
60391: LD_ADDR_VAR 0 23
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 3
60401: NEG
60402: PUSH
60403: EMPTY
60404: LIST
60405: LIST
60406: PUSH
60407: LD_INT 1
60409: NEG
60410: PUSH
60411: LD_INT 4
60413: NEG
60414: PUSH
60415: EMPTY
60416: LIST
60417: LIST
60418: PUSH
60419: LD_INT 1
60421: PUSH
60422: LD_INT 3
60424: NEG
60425: PUSH
60426: EMPTY
60427: LIST
60428: LIST
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: LIST
60434: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
60435: LD_ADDR_VAR 0 24
60439: PUSH
60440: LD_INT 3
60442: PUSH
60443: LD_INT 0
60445: PUSH
60446: EMPTY
60447: LIST
60448: LIST
60449: PUSH
60450: LD_INT 3
60452: PUSH
60453: LD_INT 1
60455: NEG
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: PUSH
60461: LD_INT 4
60463: PUSH
60464: LD_INT 1
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PUSH
60471: EMPTY
60472: LIST
60473: LIST
60474: LIST
60475: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
60476: LD_ADDR_VAR 0 25
60480: PUSH
60481: LD_INT 3
60483: PUSH
60484: LD_INT 3
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 4
60493: PUSH
60494: LD_INT 3
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 3
60503: PUSH
60504: LD_INT 4
60506: PUSH
60507: EMPTY
60508: LIST
60509: LIST
60510: PUSH
60511: EMPTY
60512: LIST
60513: LIST
60514: LIST
60515: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
60516: LD_ADDR_VAR 0 26
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 4
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 1
60543: NEG
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: EMPTY
60553: LIST
60554: LIST
60555: LIST
60556: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
60557: LD_ADDR_VAR 0 27
60561: PUSH
60562: LD_INT 3
60564: NEG
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 3
60575: NEG
60576: PUSH
60577: LD_INT 1
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: PUSH
60584: LD_INT 4
60586: NEG
60587: PUSH
60588: LD_INT 1
60590: NEG
60591: PUSH
60592: EMPTY
60593: LIST
60594: LIST
60595: PUSH
60596: EMPTY
60597: LIST
60598: LIST
60599: LIST
60600: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
60601: LD_ADDR_VAR 0 28
60605: PUSH
60606: LD_INT 3
60608: NEG
60609: PUSH
60610: LD_INT 3
60612: NEG
60613: PUSH
60614: EMPTY
60615: LIST
60616: LIST
60617: PUSH
60618: LD_INT 3
60620: NEG
60621: PUSH
60622: LD_INT 4
60624: NEG
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PUSH
60630: LD_INT 4
60632: NEG
60633: PUSH
60634: LD_INT 3
60636: NEG
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: PUSH
60642: EMPTY
60643: LIST
60644: LIST
60645: LIST
60646: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
60647: LD_ADDR_VAR 0 29
60651: PUSH
60652: LD_INT 1
60654: NEG
60655: PUSH
60656: LD_INT 3
60658: NEG
60659: PUSH
60660: EMPTY
60661: LIST
60662: LIST
60663: PUSH
60664: LD_INT 0
60666: PUSH
60667: LD_INT 3
60669: NEG
60670: PUSH
60671: EMPTY
60672: LIST
60673: LIST
60674: PUSH
60675: LD_INT 1
60677: PUSH
60678: LD_INT 2
60680: NEG
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 1
60688: NEG
60689: PUSH
60690: LD_INT 4
60692: NEG
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: PUSH
60698: LD_INT 0
60700: PUSH
60701: LD_INT 4
60703: NEG
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: PUSH
60709: LD_INT 1
60711: PUSH
60712: LD_INT 3
60714: NEG
60715: PUSH
60716: EMPTY
60717: LIST
60718: LIST
60719: PUSH
60720: LD_INT 1
60722: NEG
60723: PUSH
60724: LD_INT 5
60726: NEG
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: PUSH
60732: LD_INT 0
60734: PUSH
60735: LD_INT 5
60737: NEG
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: PUSH
60743: LD_INT 1
60745: PUSH
60746: LD_INT 4
60748: NEG
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: PUSH
60754: LD_INT 1
60756: NEG
60757: PUSH
60758: LD_INT 6
60760: NEG
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 0
60768: PUSH
60769: LD_INT 6
60771: NEG
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: LD_INT 1
60779: PUSH
60780: LD_INT 5
60782: NEG
60783: PUSH
60784: EMPTY
60785: LIST
60786: LIST
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
60802: LD_ADDR_VAR 0 30
60806: PUSH
60807: LD_INT 2
60809: PUSH
60810: LD_INT 1
60812: NEG
60813: PUSH
60814: EMPTY
60815: LIST
60816: LIST
60817: PUSH
60818: LD_INT 3
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: EMPTY
60825: LIST
60826: LIST
60827: PUSH
60828: LD_INT 3
60830: PUSH
60831: LD_INT 1
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: LD_INT 3
60840: PUSH
60841: LD_INT 1
60843: NEG
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 4
60851: PUSH
60852: LD_INT 0
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 4
60861: PUSH
60862: LD_INT 1
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: PUSH
60869: LD_INT 4
60871: PUSH
60872: LD_INT 1
60874: NEG
60875: PUSH
60876: EMPTY
60877: LIST
60878: LIST
60879: PUSH
60880: LD_INT 5
60882: PUSH
60883: LD_INT 0
60885: PUSH
60886: EMPTY
60887: LIST
60888: LIST
60889: PUSH
60890: LD_INT 5
60892: PUSH
60893: LD_INT 1
60895: PUSH
60896: EMPTY
60897: LIST
60898: LIST
60899: PUSH
60900: LD_INT 5
60902: PUSH
60903: LD_INT 1
60905: NEG
60906: PUSH
60907: EMPTY
60908: LIST
60909: LIST
60910: PUSH
60911: LD_INT 6
60913: PUSH
60914: LD_INT 0
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 6
60923: PUSH
60924: LD_INT 1
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: EMPTY
60932: LIST
60933: LIST
60934: LIST
60935: LIST
60936: LIST
60937: LIST
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: LIST
60943: LIST
60944: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
60945: LD_ADDR_VAR 0 31
60949: PUSH
60950: LD_INT 3
60952: PUSH
60953: LD_INT 2
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: LD_INT 3
60962: PUSH
60963: LD_INT 3
60965: PUSH
60966: EMPTY
60967: LIST
60968: LIST
60969: PUSH
60970: LD_INT 2
60972: PUSH
60973: LD_INT 3
60975: PUSH
60976: EMPTY
60977: LIST
60978: LIST
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: LD_INT 3
60985: PUSH
60986: EMPTY
60987: LIST
60988: LIST
60989: PUSH
60990: LD_INT 4
60992: PUSH
60993: LD_INT 4
60995: PUSH
60996: EMPTY
60997: LIST
60998: LIST
60999: PUSH
61000: LD_INT 3
61002: PUSH
61003: LD_INT 4
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: PUSH
61010: LD_INT 5
61012: PUSH
61013: LD_INT 4
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PUSH
61020: LD_INT 5
61022: PUSH
61023: LD_INT 5
61025: PUSH
61026: EMPTY
61027: LIST
61028: LIST
61029: PUSH
61030: LD_INT 4
61032: PUSH
61033: LD_INT 5
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 6
61042: PUSH
61043: LD_INT 5
61045: PUSH
61046: EMPTY
61047: LIST
61048: LIST
61049: PUSH
61050: LD_INT 6
61052: PUSH
61053: LD_INT 6
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: PUSH
61060: LD_INT 5
61062: PUSH
61063: LD_INT 6
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: PUSH
61070: EMPTY
61071: LIST
61072: LIST
61073: LIST
61074: LIST
61075: LIST
61076: LIST
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
61084: LD_ADDR_VAR 0 32
61088: PUSH
61089: LD_INT 1
61091: PUSH
61092: LD_INT 3
61094: PUSH
61095: EMPTY
61096: LIST
61097: LIST
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 3
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 1
61111: NEG
61112: PUSH
61113: LD_INT 2
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 4
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 0
61132: PUSH
61133: LD_INT 4
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 1
61142: NEG
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: PUSH
61151: LD_INT 1
61153: PUSH
61154: LD_INT 5
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 0
61163: PUSH
61164: LD_INT 5
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PUSH
61171: LD_INT 1
61173: NEG
61174: PUSH
61175: LD_INT 4
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: PUSH
61182: LD_INT 1
61184: PUSH
61185: LD_INT 6
61187: PUSH
61188: EMPTY
61189: LIST
61190: LIST
61191: PUSH
61192: LD_INT 0
61194: PUSH
61195: LD_INT 6
61197: PUSH
61198: EMPTY
61199: LIST
61200: LIST
61201: PUSH
61202: LD_INT 1
61204: NEG
61205: PUSH
61206: LD_INT 5
61208: PUSH
61209: EMPTY
61210: LIST
61211: LIST
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: LIST
61221: LIST
61222: LIST
61223: LIST
61224: LIST
61225: LIST
61226: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
61227: LD_ADDR_VAR 0 33
61231: PUSH
61232: LD_INT 2
61234: NEG
61235: PUSH
61236: LD_INT 1
61238: PUSH
61239: EMPTY
61240: LIST
61241: LIST
61242: PUSH
61243: LD_INT 3
61245: NEG
61246: PUSH
61247: LD_INT 0
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: LD_INT 1
61260: NEG
61261: PUSH
61262: EMPTY
61263: LIST
61264: LIST
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: LD_INT 1
61272: PUSH
61273: EMPTY
61274: LIST
61275: LIST
61276: PUSH
61277: LD_INT 4
61279: NEG
61280: PUSH
61281: LD_INT 0
61283: PUSH
61284: EMPTY
61285: LIST
61286: LIST
61287: PUSH
61288: LD_INT 4
61290: NEG
61291: PUSH
61292: LD_INT 1
61294: NEG
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 4
61302: NEG
61303: PUSH
61304: LD_INT 1
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 5
61313: NEG
61314: PUSH
61315: LD_INT 0
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 5
61324: NEG
61325: PUSH
61326: LD_INT 1
61328: NEG
61329: PUSH
61330: EMPTY
61331: LIST
61332: LIST
61333: PUSH
61334: LD_INT 5
61336: NEG
61337: PUSH
61338: LD_INT 1
61340: PUSH
61341: EMPTY
61342: LIST
61343: LIST
61344: PUSH
61345: LD_INT 6
61347: NEG
61348: PUSH
61349: LD_INT 0
61351: PUSH
61352: EMPTY
61353: LIST
61354: LIST
61355: PUSH
61356: LD_INT 6
61358: NEG
61359: PUSH
61360: LD_INT 1
61362: NEG
61363: PUSH
61364: EMPTY
61365: LIST
61366: LIST
61367: PUSH
61368: EMPTY
61369: LIST
61370: LIST
61371: LIST
61372: LIST
61373: LIST
61374: LIST
61375: LIST
61376: LIST
61377: LIST
61378: LIST
61379: LIST
61380: LIST
61381: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
61382: LD_ADDR_VAR 0 34
61386: PUSH
61387: LD_INT 2
61389: NEG
61390: PUSH
61391: LD_INT 3
61393: NEG
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: PUSH
61399: LD_INT 3
61401: NEG
61402: PUSH
61403: LD_INT 2
61405: NEG
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 3
61413: NEG
61414: PUSH
61415: LD_INT 3
61417: NEG
61418: PUSH
61419: EMPTY
61420: LIST
61421: LIST
61422: PUSH
61423: LD_INT 3
61425: NEG
61426: PUSH
61427: LD_INT 4
61429: NEG
61430: PUSH
61431: EMPTY
61432: LIST
61433: LIST
61434: PUSH
61435: LD_INT 4
61437: NEG
61438: PUSH
61439: LD_INT 3
61441: NEG
61442: PUSH
61443: EMPTY
61444: LIST
61445: LIST
61446: PUSH
61447: LD_INT 4
61449: NEG
61450: PUSH
61451: LD_INT 4
61453: NEG
61454: PUSH
61455: EMPTY
61456: LIST
61457: LIST
61458: PUSH
61459: LD_INT 4
61461: NEG
61462: PUSH
61463: LD_INT 5
61465: NEG
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: PUSH
61471: LD_INT 5
61473: NEG
61474: PUSH
61475: LD_INT 4
61477: NEG
61478: PUSH
61479: EMPTY
61480: LIST
61481: LIST
61482: PUSH
61483: LD_INT 5
61485: NEG
61486: PUSH
61487: LD_INT 5
61489: NEG
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: LD_INT 5
61497: NEG
61498: PUSH
61499: LD_INT 6
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 6
61509: NEG
61510: PUSH
61511: LD_INT 5
61513: NEG
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 6
61521: NEG
61522: PUSH
61523: LD_INT 6
61525: NEG
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
61545: LD_ADDR_VAR 0 41
61549: PUSH
61550: LD_INT 0
61552: PUSH
61553: LD_INT 2
61555: NEG
61556: PUSH
61557: EMPTY
61558: LIST
61559: LIST
61560: PUSH
61561: LD_INT 1
61563: NEG
61564: PUSH
61565: LD_INT 3
61567: NEG
61568: PUSH
61569: EMPTY
61570: LIST
61571: LIST
61572: PUSH
61573: LD_INT 1
61575: PUSH
61576: LD_INT 2
61578: NEG
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
61589: LD_ADDR_VAR 0 42
61593: PUSH
61594: LD_INT 2
61596: PUSH
61597: LD_INT 0
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: PUSH
61607: LD_INT 1
61609: NEG
61610: PUSH
61611: EMPTY
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 3
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: EMPTY
61626: LIST
61627: LIST
61628: LIST
61629: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
61630: LD_ADDR_VAR 0 43
61634: PUSH
61635: LD_INT 2
61637: PUSH
61638: LD_INT 2
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: PUSH
61645: LD_INT 3
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: PUSH
61655: LD_INT 2
61657: PUSH
61658: LD_INT 3
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: EMPTY
61666: LIST
61667: LIST
61668: LIST
61669: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
61670: LD_ADDR_VAR 0 44
61674: PUSH
61675: LD_INT 0
61677: PUSH
61678: LD_INT 2
61680: PUSH
61681: EMPTY
61682: LIST
61683: LIST
61684: PUSH
61685: LD_INT 1
61687: PUSH
61688: LD_INT 3
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 1
61697: NEG
61698: PUSH
61699: LD_INT 2
61701: PUSH
61702: EMPTY
61703: LIST
61704: LIST
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
61711: LD_ADDR_VAR 0 45
61715: PUSH
61716: LD_INT 2
61718: NEG
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 2
61729: NEG
61730: PUSH
61731: LD_INT 1
61733: PUSH
61734: EMPTY
61735: LIST
61736: LIST
61737: PUSH
61738: LD_INT 3
61740: NEG
61741: PUSH
61742: LD_INT 1
61744: NEG
61745: PUSH
61746: EMPTY
61747: LIST
61748: LIST
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: LIST
61754: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
61755: LD_ADDR_VAR 0 46
61759: PUSH
61760: LD_INT 2
61762: NEG
61763: PUSH
61764: LD_INT 2
61766: NEG
61767: PUSH
61768: EMPTY
61769: LIST
61770: LIST
61771: PUSH
61772: LD_INT 2
61774: NEG
61775: PUSH
61776: LD_INT 3
61778: NEG
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: PUSH
61784: LD_INT 3
61786: NEG
61787: PUSH
61788: LD_INT 2
61790: NEG
61791: PUSH
61792: EMPTY
61793: LIST
61794: LIST
61795: PUSH
61796: EMPTY
61797: LIST
61798: LIST
61799: LIST
61800: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
61801: LD_ADDR_VAR 0 47
61805: PUSH
61806: LD_INT 2
61808: NEG
61809: PUSH
61810: LD_INT 3
61812: NEG
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: PUSH
61818: LD_INT 1
61820: NEG
61821: PUSH
61822: LD_INT 3
61824: NEG
61825: PUSH
61826: EMPTY
61827: LIST
61828: LIST
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
61834: LD_ADDR_VAR 0 48
61838: PUSH
61839: LD_INT 1
61841: PUSH
61842: LD_INT 2
61844: NEG
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: PUSH
61853: LD_INT 1
61855: NEG
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
61865: LD_ADDR_VAR 0 49
61869: PUSH
61870: LD_INT 3
61872: PUSH
61873: LD_INT 1
61875: PUSH
61876: EMPTY
61877: LIST
61878: LIST
61879: PUSH
61880: LD_INT 3
61882: PUSH
61883: LD_INT 2
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
61894: LD_ADDR_VAR 0 50
61898: PUSH
61899: LD_INT 2
61901: PUSH
61902: LD_INT 3
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 3
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
61923: LD_ADDR_VAR 0 51
61927: PUSH
61928: LD_INT 1
61930: NEG
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 2
61941: NEG
61942: PUSH
61943: LD_INT 1
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: PUSH
61950: EMPTY
61951: LIST
61952: LIST
61953: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
61954: LD_ADDR_VAR 0 52
61958: PUSH
61959: LD_INT 3
61961: NEG
61962: PUSH
61963: LD_INT 1
61965: NEG
61966: PUSH
61967: EMPTY
61968: LIST
61969: LIST
61970: PUSH
61971: LD_INT 3
61973: NEG
61974: PUSH
61975: LD_INT 2
61977: NEG
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: EMPTY
61984: LIST
61985: LIST
61986: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61987: LD_ADDR_VAR 0 53
61991: PUSH
61992: LD_INT 1
61994: NEG
61995: PUSH
61996: LD_INT 3
61998: NEG
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 0
62006: PUSH
62007: LD_INT 3
62009: NEG
62010: PUSH
62011: EMPTY
62012: LIST
62013: LIST
62014: PUSH
62015: LD_INT 1
62017: PUSH
62018: LD_INT 2
62020: NEG
62021: PUSH
62022: EMPTY
62023: LIST
62024: LIST
62025: PUSH
62026: EMPTY
62027: LIST
62028: LIST
62029: LIST
62030: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62031: LD_ADDR_VAR 0 54
62035: PUSH
62036: LD_INT 2
62038: PUSH
62039: LD_INT 1
62041: NEG
62042: PUSH
62043: EMPTY
62044: LIST
62045: LIST
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: LD_INT 0
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: PUSH
62057: LD_INT 3
62059: PUSH
62060: LD_INT 1
62062: PUSH
62063: EMPTY
62064: LIST
62065: LIST
62066: PUSH
62067: EMPTY
62068: LIST
62069: LIST
62070: LIST
62071: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62072: LD_ADDR_VAR 0 55
62076: PUSH
62077: LD_INT 3
62079: PUSH
62080: LD_INT 2
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PUSH
62087: LD_INT 3
62089: PUSH
62090: LD_INT 3
62092: PUSH
62093: EMPTY
62094: LIST
62095: LIST
62096: PUSH
62097: LD_INT 2
62099: PUSH
62100: LD_INT 3
62102: PUSH
62103: EMPTY
62104: LIST
62105: LIST
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: LIST
62111: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
62112: LD_ADDR_VAR 0 56
62116: PUSH
62117: LD_INT 1
62119: PUSH
62120: LD_INT 3
62122: PUSH
62123: EMPTY
62124: LIST
62125: LIST
62126: PUSH
62127: LD_INT 0
62129: PUSH
62130: LD_INT 3
62132: PUSH
62133: EMPTY
62134: LIST
62135: LIST
62136: PUSH
62137: LD_INT 1
62139: NEG
62140: PUSH
62141: LD_INT 2
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
62153: LD_ADDR_VAR 0 57
62157: PUSH
62158: LD_INT 2
62160: NEG
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 3
62171: NEG
62172: PUSH
62173: LD_INT 0
62175: PUSH
62176: EMPTY
62177: LIST
62178: LIST
62179: PUSH
62180: LD_INT 3
62182: NEG
62183: PUSH
62184: LD_INT 1
62186: NEG
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
62197: LD_ADDR_VAR 0 58
62201: PUSH
62202: LD_INT 2
62204: NEG
62205: PUSH
62206: LD_INT 3
62208: NEG
62209: PUSH
62210: EMPTY
62211: LIST
62212: LIST
62213: PUSH
62214: LD_INT 3
62216: NEG
62217: PUSH
62218: LD_INT 2
62220: NEG
62221: PUSH
62222: EMPTY
62223: LIST
62224: LIST
62225: PUSH
62226: LD_INT 3
62228: NEG
62229: PUSH
62230: LD_INT 3
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: EMPTY
62239: LIST
62240: LIST
62241: LIST
62242: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
62243: LD_ADDR_VAR 0 59
62247: PUSH
62248: LD_INT 1
62250: NEG
62251: PUSH
62252: LD_INT 2
62254: NEG
62255: PUSH
62256: EMPTY
62257: LIST
62258: LIST
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: LD_INT 2
62265: NEG
62266: PUSH
62267: EMPTY
62268: LIST
62269: LIST
62270: PUSH
62271: LD_INT 1
62273: PUSH
62274: LD_INT 1
62276: NEG
62277: PUSH
62278: EMPTY
62279: LIST
62280: LIST
62281: PUSH
62282: EMPTY
62283: LIST
62284: LIST
62285: LIST
62286: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
62287: LD_ADDR_VAR 0 60
62291: PUSH
62292: LD_INT 1
62294: PUSH
62295: LD_INT 1
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 0
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 2
62315: PUSH
62316: LD_INT 1
62318: PUSH
62319: EMPTY
62320: LIST
62321: LIST
62322: PUSH
62323: EMPTY
62324: LIST
62325: LIST
62326: LIST
62327: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
62328: LD_ADDR_VAR 0 61
62332: PUSH
62333: LD_INT 2
62335: PUSH
62336: LD_INT 1
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PUSH
62343: LD_INT 2
62345: PUSH
62346: LD_INT 2
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 1
62355: PUSH
62356: LD_INT 2
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: LIST
62367: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
62368: LD_ADDR_VAR 0 62
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 0
62385: PUSH
62386: LD_INT 2
62388: PUSH
62389: EMPTY
62390: LIST
62391: LIST
62392: PUSH
62393: LD_INT 1
62395: NEG
62396: PUSH
62397: LD_INT 1
62399: PUSH
62400: EMPTY
62401: LIST
62402: LIST
62403: PUSH
62404: EMPTY
62405: LIST
62406: LIST
62407: LIST
62408: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
62409: LD_ADDR_VAR 0 63
62413: PUSH
62414: LD_INT 1
62416: NEG
62417: PUSH
62418: LD_INT 1
62420: PUSH
62421: EMPTY
62422: LIST
62423: LIST
62424: PUSH
62425: LD_INT 2
62427: NEG
62428: PUSH
62429: LD_INT 0
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: PUSH
62436: LD_INT 2
62438: NEG
62439: PUSH
62440: LD_INT 1
62442: NEG
62443: PUSH
62444: EMPTY
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: LIST
62452: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62453: LD_ADDR_VAR 0 64
62457: PUSH
62458: LD_INT 1
62460: NEG
62461: PUSH
62462: LD_INT 2
62464: NEG
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 2
62472: NEG
62473: PUSH
62474: LD_INT 1
62476: NEG
62477: PUSH
62478: EMPTY
62479: LIST
62480: LIST
62481: PUSH
62482: LD_INT 2
62484: NEG
62485: PUSH
62486: LD_INT 2
62488: NEG
62489: PUSH
62490: EMPTY
62491: LIST
62492: LIST
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: LIST
62498: ST_TO_ADDR
// end ; 2 :
62499: GO 65765
62501: LD_INT 2
62503: DOUBLE
62504: EQUAL
62505: IFTRUE 62509
62507: GO 65764
62509: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
62510: LD_ADDR_VAR 0 29
62514: PUSH
62515: LD_INT 4
62517: PUSH
62518: LD_INT 0
62520: PUSH
62521: EMPTY
62522: LIST
62523: LIST
62524: PUSH
62525: LD_INT 4
62527: PUSH
62528: LD_INT 1
62530: NEG
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: LD_INT 5
62538: PUSH
62539: LD_INT 0
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 5
62548: PUSH
62549: LD_INT 1
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PUSH
62556: LD_INT 4
62558: PUSH
62559: LD_INT 1
62561: PUSH
62562: EMPTY
62563: LIST
62564: LIST
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: LD_INT 0
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: PUSH
62576: LD_INT 3
62578: PUSH
62579: LD_INT 1
62581: NEG
62582: PUSH
62583: EMPTY
62584: LIST
62585: LIST
62586: PUSH
62587: LD_INT 3
62589: PUSH
62590: LD_INT 2
62592: NEG
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 5
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 3
62610: PUSH
62611: LD_INT 3
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 3
62620: PUSH
62621: LD_INT 2
62623: PUSH
62624: EMPTY
62625: LIST
62626: LIST
62627: PUSH
62628: LD_INT 4
62630: PUSH
62631: LD_INT 3
62633: PUSH
62634: EMPTY
62635: LIST
62636: LIST
62637: PUSH
62638: LD_INT 4
62640: PUSH
62641: LD_INT 4
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: PUSH
62648: LD_INT 3
62650: PUSH
62651: LD_INT 4
62653: PUSH
62654: EMPTY
62655: LIST
62656: LIST
62657: PUSH
62658: LD_INT 2
62660: PUSH
62661: LD_INT 3
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: PUSH
62668: LD_INT 2
62670: PUSH
62671: LD_INT 2
62673: PUSH
62674: EMPTY
62675: LIST
62676: LIST
62677: PUSH
62678: LD_INT 4
62680: PUSH
62681: LD_INT 2
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: PUSH
62688: LD_INT 2
62690: PUSH
62691: LD_INT 4
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 4
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 3
62713: PUSH
62714: EMPTY
62715: LIST
62716: LIST
62717: PUSH
62718: LD_INT 1
62720: PUSH
62721: LD_INT 4
62723: PUSH
62724: EMPTY
62725: LIST
62726: LIST
62727: PUSH
62728: LD_INT 1
62730: PUSH
62731: LD_INT 5
62733: PUSH
62734: EMPTY
62735: LIST
62736: LIST
62737: PUSH
62738: LD_INT 0
62740: PUSH
62741: LD_INT 5
62743: PUSH
62744: EMPTY
62745: LIST
62746: LIST
62747: PUSH
62748: LD_INT 1
62750: NEG
62751: PUSH
62752: LD_INT 4
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 3
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: PUSH
62773: LD_INT 5
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: PUSH
62780: LD_INT 2
62782: NEG
62783: PUSH
62784: LD_INT 3
62786: PUSH
62787: EMPTY
62788: LIST
62789: LIST
62790: PUSH
62791: LD_INT 3
62793: NEG
62794: PUSH
62795: LD_INT 0
62797: PUSH
62798: EMPTY
62799: LIST
62800: LIST
62801: PUSH
62802: LD_INT 3
62804: NEG
62805: PUSH
62806: LD_INT 1
62808: NEG
62809: PUSH
62810: EMPTY
62811: LIST
62812: LIST
62813: PUSH
62814: LD_INT 2
62816: NEG
62817: PUSH
62818: LD_INT 0
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: PUSH
62825: LD_INT 2
62827: NEG
62828: PUSH
62829: LD_INT 1
62831: PUSH
62832: EMPTY
62833: LIST
62834: LIST
62835: PUSH
62836: LD_INT 3
62838: NEG
62839: PUSH
62840: LD_INT 1
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: PUSH
62847: LD_INT 4
62849: NEG
62850: PUSH
62851: LD_INT 0
62853: PUSH
62854: EMPTY
62855: LIST
62856: LIST
62857: PUSH
62858: LD_INT 4
62860: NEG
62861: PUSH
62862: LD_INT 1
62864: NEG
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 4
62872: NEG
62873: PUSH
62874: LD_INT 2
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 4
62895: NEG
62896: PUSH
62897: LD_INT 4
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 4
62907: NEG
62908: PUSH
62909: LD_INT 5
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 3
62919: NEG
62920: PUSH
62921: LD_INT 4
62923: NEG
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 3
62931: NEG
62932: PUSH
62933: LD_INT 3
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 4
62943: NEG
62944: PUSH
62945: LD_INT 3
62947: NEG
62948: PUSH
62949: EMPTY
62950: LIST
62951: LIST
62952: PUSH
62953: LD_INT 5
62955: NEG
62956: PUSH
62957: LD_INT 4
62959: NEG
62960: PUSH
62961: EMPTY
62962: LIST
62963: LIST
62964: PUSH
62965: LD_INT 5
62967: NEG
62968: PUSH
62969: LD_INT 5
62971: NEG
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 3
62979: NEG
62980: PUSH
62981: LD_INT 5
62983: NEG
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 5
62991: NEG
62992: PUSH
62993: LD_INT 3
62995: NEG
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: LIST
63005: LIST
63006: LIST
63007: LIST
63008: LIST
63009: LIST
63010: LIST
63011: LIST
63012: LIST
63013: LIST
63014: LIST
63015: LIST
63016: LIST
63017: LIST
63018: LIST
63019: LIST
63020: LIST
63021: LIST
63022: LIST
63023: LIST
63024: LIST
63025: LIST
63026: LIST
63027: LIST
63028: LIST
63029: LIST
63030: LIST
63031: LIST
63032: LIST
63033: LIST
63034: LIST
63035: LIST
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
63048: LD_ADDR_VAR 0 30
63052: PUSH
63053: LD_INT 4
63055: PUSH
63056: LD_INT 4
63058: PUSH
63059: EMPTY
63060: LIST
63061: LIST
63062: PUSH
63063: LD_INT 4
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: EMPTY
63070: LIST
63071: LIST
63072: PUSH
63073: LD_INT 5
63075: PUSH
63076: LD_INT 4
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: PUSH
63083: LD_INT 5
63085: PUSH
63086: LD_INT 5
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: PUSH
63093: LD_INT 4
63095: PUSH
63096: LD_INT 5
63098: PUSH
63099: EMPTY
63100: LIST
63101: LIST
63102: PUSH
63103: LD_INT 3
63105: PUSH
63106: LD_INT 4
63108: PUSH
63109: EMPTY
63110: LIST
63111: LIST
63112: PUSH
63113: LD_INT 3
63115: PUSH
63116: LD_INT 3
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 5
63125: PUSH
63126: LD_INT 3
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: PUSH
63133: LD_INT 3
63135: PUSH
63136: LD_INT 5
63138: PUSH
63139: EMPTY
63140: LIST
63141: LIST
63142: PUSH
63143: LD_INT 0
63145: PUSH
63146: LD_INT 3
63148: PUSH
63149: EMPTY
63150: LIST
63151: LIST
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: LD_INT 2
63158: PUSH
63159: EMPTY
63160: LIST
63161: LIST
63162: PUSH
63163: LD_INT 1
63165: PUSH
63166: LD_INT 3
63168: PUSH
63169: EMPTY
63170: LIST
63171: LIST
63172: PUSH
63173: LD_INT 1
63175: PUSH
63176: LD_INT 4
63178: PUSH
63179: EMPTY
63180: LIST
63181: LIST
63182: PUSH
63183: LD_INT 0
63185: PUSH
63186: LD_INT 4
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 1
63195: NEG
63196: PUSH
63197: LD_INT 3
63199: PUSH
63200: EMPTY
63201: LIST
63202: LIST
63203: PUSH
63204: LD_INT 1
63206: NEG
63207: PUSH
63208: LD_INT 2
63210: PUSH
63211: EMPTY
63212: LIST
63213: LIST
63214: PUSH
63215: LD_INT 2
63217: PUSH
63218: LD_INT 4
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: PUSH
63225: LD_INT 2
63227: NEG
63228: PUSH
63229: LD_INT 2
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 4
63238: NEG
63239: PUSH
63240: LD_INT 0
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 4
63249: NEG
63250: PUSH
63251: LD_INT 1
63253: NEG
63254: PUSH
63255: EMPTY
63256: LIST
63257: LIST
63258: PUSH
63259: LD_INT 3
63261: NEG
63262: PUSH
63263: LD_INT 0
63265: PUSH
63266: EMPTY
63267: LIST
63268: LIST
63269: PUSH
63270: LD_INT 3
63272: NEG
63273: PUSH
63274: LD_INT 1
63276: PUSH
63277: EMPTY
63278: LIST
63279: LIST
63280: PUSH
63281: LD_INT 4
63283: NEG
63284: PUSH
63285: LD_INT 1
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 5
63294: NEG
63295: PUSH
63296: LD_INT 0
63298: PUSH
63299: EMPTY
63300: LIST
63301: LIST
63302: PUSH
63303: LD_INT 5
63305: NEG
63306: PUSH
63307: LD_INT 1
63309: NEG
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: PUSH
63315: LD_INT 5
63317: NEG
63318: PUSH
63319: LD_INT 2
63321: NEG
63322: PUSH
63323: EMPTY
63324: LIST
63325: LIST
63326: PUSH
63327: LD_INT 3
63329: NEG
63330: PUSH
63331: LD_INT 2
63333: PUSH
63334: EMPTY
63335: LIST
63336: LIST
63337: PUSH
63338: LD_INT 3
63340: NEG
63341: PUSH
63342: LD_INT 3
63344: NEG
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: LD_INT 3
63352: NEG
63353: PUSH
63354: LD_INT 4
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 2
63364: NEG
63365: PUSH
63366: LD_INT 3
63368: NEG
63369: PUSH
63370: EMPTY
63371: LIST
63372: LIST
63373: PUSH
63374: LD_INT 2
63376: NEG
63377: PUSH
63378: LD_INT 2
63380: NEG
63381: PUSH
63382: EMPTY
63383: LIST
63384: LIST
63385: PUSH
63386: LD_INT 3
63388: NEG
63389: PUSH
63390: LD_INT 2
63392: NEG
63393: PUSH
63394: EMPTY
63395: LIST
63396: LIST
63397: PUSH
63398: LD_INT 4
63400: NEG
63401: PUSH
63402: LD_INT 3
63404: NEG
63405: PUSH
63406: EMPTY
63407: LIST
63408: LIST
63409: PUSH
63410: LD_INT 4
63412: NEG
63413: PUSH
63414: LD_INT 4
63416: NEG
63417: PUSH
63418: EMPTY
63419: LIST
63420: LIST
63421: PUSH
63422: LD_INT 2
63424: NEG
63425: PUSH
63426: LD_INT 4
63428: NEG
63429: PUSH
63430: EMPTY
63431: LIST
63432: LIST
63433: PUSH
63434: LD_INT 4
63436: NEG
63437: PUSH
63438: LD_INT 2
63440: NEG
63441: PUSH
63442: EMPTY
63443: LIST
63444: LIST
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: LD_INT 4
63451: NEG
63452: PUSH
63453: EMPTY
63454: LIST
63455: LIST
63456: PUSH
63457: LD_INT 0
63459: PUSH
63460: LD_INT 5
63462: NEG
63463: PUSH
63464: EMPTY
63465: LIST
63466: LIST
63467: PUSH
63468: LD_INT 1
63470: PUSH
63471: LD_INT 4
63473: NEG
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 3
63484: NEG
63485: PUSH
63486: EMPTY
63487: LIST
63488: LIST
63489: PUSH
63490: LD_INT 0
63492: PUSH
63493: LD_INT 3
63495: NEG
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 1
63503: NEG
63504: PUSH
63505: LD_INT 4
63507: NEG
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PUSH
63513: LD_INT 1
63515: NEG
63516: PUSH
63517: LD_INT 5
63519: NEG
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 2
63527: PUSH
63528: LD_INT 3
63530: NEG
63531: PUSH
63532: EMPTY
63533: LIST
63534: LIST
63535: PUSH
63536: LD_INT 2
63538: NEG
63539: PUSH
63540: LD_INT 5
63542: NEG
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PUSH
63548: EMPTY
63549: LIST
63550: LIST
63551: LIST
63552: LIST
63553: LIST
63554: LIST
63555: LIST
63556: LIST
63557: LIST
63558: LIST
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: LIST
63567: LIST
63568: LIST
63569: LIST
63570: LIST
63571: LIST
63572: LIST
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: LIST
63580: LIST
63581: LIST
63582: LIST
63583: LIST
63584: LIST
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
63595: LD_ADDR_VAR 0 31
63599: PUSH
63600: LD_INT 0
63602: PUSH
63603: LD_INT 4
63605: PUSH
63606: EMPTY
63607: LIST
63608: LIST
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 3
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 1
63622: PUSH
63623: LD_INT 4
63625: PUSH
63626: EMPTY
63627: LIST
63628: LIST
63629: PUSH
63630: LD_INT 1
63632: PUSH
63633: LD_INT 5
63635: PUSH
63636: EMPTY
63637: LIST
63638: LIST
63639: PUSH
63640: LD_INT 0
63642: PUSH
63643: LD_INT 5
63645: PUSH
63646: EMPTY
63647: LIST
63648: LIST
63649: PUSH
63650: LD_INT 1
63652: NEG
63653: PUSH
63654: LD_INT 4
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 3
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 2
63674: PUSH
63675: LD_INT 5
63677: PUSH
63678: EMPTY
63679: LIST
63680: LIST
63681: PUSH
63682: LD_INT 2
63684: NEG
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 3
63695: NEG
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 3
63706: NEG
63707: PUSH
63708: LD_INT 1
63710: NEG
63711: PUSH
63712: EMPTY
63713: LIST
63714: LIST
63715: PUSH
63716: LD_INT 2
63718: NEG
63719: PUSH
63720: LD_INT 0
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 2
63729: NEG
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 3
63740: NEG
63741: PUSH
63742: LD_INT 1
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 4
63751: NEG
63752: PUSH
63753: LD_INT 0
63755: PUSH
63756: EMPTY
63757: LIST
63758: LIST
63759: PUSH
63760: LD_INT 4
63762: NEG
63763: PUSH
63764: LD_INT 1
63766: NEG
63767: PUSH
63768: EMPTY
63769: LIST
63770: LIST
63771: PUSH
63772: LD_INT 4
63774: NEG
63775: PUSH
63776: LD_INT 2
63778: NEG
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: LD_INT 2
63786: NEG
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: EMPTY
63792: LIST
63793: LIST
63794: PUSH
63795: LD_INT 4
63797: NEG
63798: PUSH
63799: LD_INT 4
63801: NEG
63802: PUSH
63803: EMPTY
63804: LIST
63805: LIST
63806: PUSH
63807: LD_INT 4
63809: NEG
63810: PUSH
63811: LD_INT 5
63813: NEG
63814: PUSH
63815: EMPTY
63816: LIST
63817: LIST
63818: PUSH
63819: LD_INT 3
63821: NEG
63822: PUSH
63823: LD_INT 4
63825: NEG
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 3
63833: NEG
63834: PUSH
63835: LD_INT 3
63837: NEG
63838: PUSH
63839: EMPTY
63840: LIST
63841: LIST
63842: PUSH
63843: LD_INT 4
63845: NEG
63846: PUSH
63847: LD_INT 3
63849: NEG
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: LD_INT 5
63857: NEG
63858: PUSH
63859: LD_INT 4
63861: NEG
63862: PUSH
63863: EMPTY
63864: LIST
63865: LIST
63866: PUSH
63867: LD_INT 5
63869: NEG
63870: PUSH
63871: LD_INT 5
63873: NEG
63874: PUSH
63875: EMPTY
63876: LIST
63877: LIST
63878: PUSH
63879: LD_INT 3
63881: NEG
63882: PUSH
63883: LD_INT 5
63885: NEG
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 5
63893: NEG
63894: PUSH
63895: LD_INT 3
63897: NEG
63898: PUSH
63899: EMPTY
63900: LIST
63901: LIST
63902: PUSH
63903: LD_INT 0
63905: PUSH
63906: LD_INT 3
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 0
63916: PUSH
63917: LD_INT 4
63919: NEG
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: LD_INT 3
63930: NEG
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 1
63938: PUSH
63939: LD_INT 2
63941: NEG
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: LD_INT 0
63949: PUSH
63950: LD_INT 2
63952: NEG
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 1
63960: NEG
63961: PUSH
63962: LD_INT 3
63964: NEG
63965: PUSH
63966: EMPTY
63967: LIST
63968: LIST
63969: PUSH
63970: LD_INT 1
63972: NEG
63973: PUSH
63974: LD_INT 4
63976: NEG
63977: PUSH
63978: EMPTY
63979: LIST
63980: LIST
63981: PUSH
63982: LD_INT 2
63984: PUSH
63985: LD_INT 2
63987: NEG
63988: PUSH
63989: EMPTY
63990: LIST
63991: LIST
63992: PUSH
63993: LD_INT 2
63995: NEG
63996: PUSH
63997: LD_INT 4
63999: NEG
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: PUSH
64005: LD_INT 4
64007: PUSH
64008: LD_INT 0
64010: PUSH
64011: EMPTY
64012: LIST
64013: LIST
64014: PUSH
64015: LD_INT 4
64017: PUSH
64018: LD_INT 1
64020: NEG
64021: PUSH
64022: EMPTY
64023: LIST
64024: LIST
64025: PUSH
64026: LD_INT 5
64028: PUSH
64029: LD_INT 0
64031: PUSH
64032: EMPTY
64033: LIST
64034: LIST
64035: PUSH
64036: LD_INT 5
64038: PUSH
64039: LD_INT 1
64041: PUSH
64042: EMPTY
64043: LIST
64044: LIST
64045: PUSH
64046: LD_INT 4
64048: PUSH
64049: LD_INT 1
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 3
64058: PUSH
64059: LD_INT 0
64061: PUSH
64062: EMPTY
64063: LIST
64064: LIST
64065: PUSH
64066: LD_INT 3
64068: PUSH
64069: LD_INT 1
64071: NEG
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 3
64079: PUSH
64080: LD_INT 2
64082: NEG
64083: PUSH
64084: EMPTY
64085: LIST
64086: LIST
64087: PUSH
64088: LD_INT 5
64090: PUSH
64091: LD_INT 2
64093: PUSH
64094: EMPTY
64095: LIST
64096: LIST
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: LIST
64115: LIST
64116: LIST
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: LIST
64124: LIST
64125: LIST
64126: LIST
64127: LIST
64128: LIST
64129: LIST
64130: LIST
64131: LIST
64132: LIST
64133: LIST
64134: LIST
64135: LIST
64136: LIST
64137: LIST
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
64145: LD_ADDR_VAR 0 32
64149: PUSH
64150: LD_INT 4
64152: NEG
64153: PUSH
64154: LD_INT 0
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 4
64163: NEG
64164: PUSH
64165: LD_INT 1
64167: NEG
64168: PUSH
64169: EMPTY
64170: LIST
64171: LIST
64172: PUSH
64173: LD_INT 3
64175: NEG
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: EMPTY
64181: LIST
64182: LIST
64183: PUSH
64184: LD_INT 3
64186: NEG
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: EMPTY
64192: LIST
64193: LIST
64194: PUSH
64195: LD_INT 4
64197: NEG
64198: PUSH
64199: LD_INT 1
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 5
64208: NEG
64209: PUSH
64210: LD_INT 0
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 5
64219: NEG
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 5
64231: NEG
64232: PUSH
64233: LD_INT 2
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 3
64243: NEG
64244: PUSH
64245: LD_INT 2
64247: PUSH
64248: EMPTY
64249: LIST
64250: LIST
64251: PUSH
64252: LD_INT 3
64254: NEG
64255: PUSH
64256: LD_INT 3
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 3
64266: NEG
64267: PUSH
64268: LD_INT 4
64270: NEG
64271: PUSH
64272: EMPTY
64273: LIST
64274: LIST
64275: PUSH
64276: LD_INT 2
64278: NEG
64279: PUSH
64280: LD_INT 3
64282: NEG
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 2
64290: NEG
64291: PUSH
64292: LD_INT 2
64294: NEG
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 3
64302: NEG
64303: PUSH
64304: LD_INT 2
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 4
64314: NEG
64315: PUSH
64316: LD_INT 3
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 4
64326: NEG
64327: PUSH
64328: LD_INT 4
64330: NEG
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 4
64342: NEG
64343: PUSH
64344: EMPTY
64345: LIST
64346: LIST
64347: PUSH
64348: LD_INT 4
64350: NEG
64351: PUSH
64352: LD_INT 2
64354: NEG
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: LD_INT 0
64362: PUSH
64363: LD_INT 4
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 0
64373: PUSH
64374: LD_INT 5
64376: NEG
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 1
64384: PUSH
64385: LD_INT 4
64387: NEG
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 3
64398: NEG
64399: PUSH
64400: EMPTY
64401: LIST
64402: LIST
64403: PUSH
64404: LD_INT 0
64406: PUSH
64407: LD_INT 3
64409: NEG
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: PUSH
64415: LD_INT 1
64417: NEG
64418: PUSH
64419: LD_INT 4
64421: NEG
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: NEG
64430: PUSH
64431: LD_INT 5
64433: NEG
64434: PUSH
64435: EMPTY
64436: LIST
64437: LIST
64438: PUSH
64439: LD_INT 2
64441: PUSH
64442: LD_INT 3
64444: NEG
64445: PUSH
64446: EMPTY
64447: LIST
64448: LIST
64449: PUSH
64450: LD_INT 2
64452: NEG
64453: PUSH
64454: LD_INT 5
64456: NEG
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 3
64464: PUSH
64465: LD_INT 0
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 3
64474: PUSH
64475: LD_INT 1
64477: NEG
64478: PUSH
64479: EMPTY
64480: LIST
64481: LIST
64482: PUSH
64483: LD_INT 4
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 4
64495: PUSH
64496: LD_INT 1
64498: PUSH
64499: EMPTY
64500: LIST
64501: LIST
64502: PUSH
64503: LD_INT 3
64505: PUSH
64506: LD_INT 1
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: PUSH
64513: LD_INT 2
64515: PUSH
64516: LD_INT 0
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: PUSH
64523: LD_INT 2
64525: PUSH
64526: LD_INT 1
64528: NEG
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 2
64536: PUSH
64537: LD_INT 2
64539: NEG
64540: PUSH
64541: EMPTY
64542: LIST
64543: LIST
64544: PUSH
64545: LD_INT 4
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 4
64557: PUSH
64558: LD_INT 4
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 4
64567: PUSH
64568: LD_INT 3
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 5
64577: PUSH
64578: LD_INT 4
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 5
64587: PUSH
64588: LD_INT 5
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 4
64597: PUSH
64598: LD_INT 5
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 3
64607: PUSH
64608: LD_INT 4
64610: PUSH
64611: EMPTY
64612: LIST
64613: LIST
64614: PUSH
64615: LD_INT 3
64617: PUSH
64618: LD_INT 3
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 5
64627: PUSH
64628: LD_INT 3
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 3
64637: PUSH
64638: LD_INT 5
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: LIST
64665: LIST
64666: LIST
64667: LIST
64668: LIST
64669: LIST
64670: LIST
64671: LIST
64672: LIST
64673: LIST
64674: LIST
64675: LIST
64676: LIST
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: LIST
64688: LIST
64689: LIST
64690: LIST
64691: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
64692: LD_ADDR_VAR 0 33
64696: PUSH
64697: LD_INT 4
64699: NEG
64700: PUSH
64701: LD_INT 4
64703: NEG
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 4
64711: NEG
64712: PUSH
64713: LD_INT 5
64715: NEG
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 3
64723: NEG
64724: PUSH
64725: LD_INT 4
64727: NEG
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: PUSH
64733: LD_INT 3
64735: NEG
64736: PUSH
64737: LD_INT 3
64739: NEG
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 4
64747: NEG
64748: PUSH
64749: LD_INT 3
64751: NEG
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 5
64759: NEG
64760: PUSH
64761: LD_INT 4
64763: NEG
64764: PUSH
64765: EMPTY
64766: LIST
64767: LIST
64768: PUSH
64769: LD_INT 5
64771: NEG
64772: PUSH
64773: LD_INT 5
64775: NEG
64776: PUSH
64777: EMPTY
64778: LIST
64779: LIST
64780: PUSH
64781: LD_INT 3
64783: NEG
64784: PUSH
64785: LD_INT 5
64787: NEG
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 5
64795: NEG
64796: PUSH
64797: LD_INT 3
64799: NEG
64800: PUSH
64801: EMPTY
64802: LIST
64803: LIST
64804: PUSH
64805: LD_INT 0
64807: PUSH
64808: LD_INT 3
64810: NEG
64811: PUSH
64812: EMPTY
64813: LIST
64814: LIST
64815: PUSH
64816: LD_INT 0
64818: PUSH
64819: LD_INT 4
64821: NEG
64822: PUSH
64823: EMPTY
64824: LIST
64825: LIST
64826: PUSH
64827: LD_INT 1
64829: PUSH
64830: LD_INT 3
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 1
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 0
64851: PUSH
64852: LD_INT 2
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 1
64862: NEG
64863: PUSH
64864: LD_INT 3
64866: NEG
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: PUSH
64872: LD_INT 1
64874: NEG
64875: PUSH
64876: LD_INT 4
64878: NEG
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 2
64886: PUSH
64887: LD_INT 2
64889: NEG
64890: PUSH
64891: EMPTY
64892: LIST
64893: LIST
64894: PUSH
64895: LD_INT 2
64897: NEG
64898: PUSH
64899: LD_INT 4
64901: NEG
64902: PUSH
64903: EMPTY
64904: LIST
64905: LIST
64906: PUSH
64907: LD_INT 4
64909: PUSH
64910: LD_INT 0
64912: PUSH
64913: EMPTY
64914: LIST
64915: LIST
64916: PUSH
64917: LD_INT 4
64919: PUSH
64920: LD_INT 1
64922: NEG
64923: PUSH
64924: EMPTY
64925: LIST
64926: LIST
64927: PUSH
64928: LD_INT 5
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: EMPTY
64935: LIST
64936: LIST
64937: PUSH
64938: LD_INT 5
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: EMPTY
64945: LIST
64946: LIST
64947: PUSH
64948: LD_INT 4
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: EMPTY
64955: LIST
64956: LIST
64957: PUSH
64958: LD_INT 3
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PUSH
64968: LD_INT 3
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: EMPTY
64976: LIST
64977: LIST
64978: PUSH
64979: LD_INT 3
64981: PUSH
64982: LD_INT 2
64984: NEG
64985: PUSH
64986: EMPTY
64987: LIST
64988: LIST
64989: PUSH
64990: LD_INT 5
64992: PUSH
64993: LD_INT 2
64995: PUSH
64996: EMPTY
64997: LIST
64998: LIST
64999: PUSH
65000: LD_INT 3
65002: PUSH
65003: LD_INT 3
65005: PUSH
65006: EMPTY
65007: LIST
65008: LIST
65009: PUSH
65010: LD_INT 3
65012: PUSH
65013: LD_INT 2
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 4
65022: PUSH
65023: LD_INT 3
65025: PUSH
65026: EMPTY
65027: LIST
65028: LIST
65029: PUSH
65030: LD_INT 4
65032: PUSH
65033: LD_INT 4
65035: PUSH
65036: EMPTY
65037: LIST
65038: LIST
65039: PUSH
65040: LD_INT 3
65042: PUSH
65043: LD_INT 4
65045: PUSH
65046: EMPTY
65047: LIST
65048: LIST
65049: PUSH
65050: LD_INT 2
65052: PUSH
65053: LD_INT 3
65055: PUSH
65056: EMPTY
65057: LIST
65058: LIST
65059: PUSH
65060: LD_INT 2
65062: PUSH
65063: LD_INT 2
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 4
65072: PUSH
65073: LD_INT 2
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: PUSH
65080: LD_INT 2
65082: PUSH
65083: LD_INT 4
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 0
65092: PUSH
65093: LD_INT 4
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 0
65102: PUSH
65103: LD_INT 3
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 1
65112: PUSH
65113: LD_INT 4
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: LD_INT 5
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 5
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: LD_INT 4
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: NEG
65154: PUSH
65155: LD_INT 3
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 2
65164: PUSH
65165: LD_INT 5
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 2
65174: NEG
65175: PUSH
65176: LD_INT 3
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: LIST
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: LIST
65221: LIST
65222: LIST
65223: LIST
65224: LIST
65225: LIST
65226: LIST
65227: LIST
65228: LIST
65229: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
65230: LD_ADDR_VAR 0 34
65234: PUSH
65235: LD_INT 0
65237: PUSH
65238: LD_INT 4
65240: NEG
65241: PUSH
65242: EMPTY
65243: LIST
65244: LIST
65245: PUSH
65246: LD_INT 0
65248: PUSH
65249: LD_INT 5
65251: NEG
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 4
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 1
65270: PUSH
65271: LD_INT 3
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 0
65281: PUSH
65282: LD_INT 3
65284: NEG
65285: PUSH
65286: EMPTY
65287: LIST
65288: LIST
65289: PUSH
65290: LD_INT 1
65292: NEG
65293: PUSH
65294: LD_INT 4
65296: NEG
65297: PUSH
65298: EMPTY
65299: LIST
65300: LIST
65301: PUSH
65302: LD_INT 1
65304: NEG
65305: PUSH
65306: LD_INT 5
65308: NEG
65309: PUSH
65310: EMPTY
65311: LIST
65312: LIST
65313: PUSH
65314: LD_INT 2
65316: PUSH
65317: LD_INT 3
65319: NEG
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 2
65327: NEG
65328: PUSH
65329: LD_INT 5
65331: NEG
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 3
65339: PUSH
65340: LD_INT 0
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 3
65349: PUSH
65350: LD_INT 1
65352: NEG
65353: PUSH
65354: EMPTY
65355: LIST
65356: LIST
65357: PUSH
65358: LD_INT 4
65360: PUSH
65361: LD_INT 0
65363: PUSH
65364: EMPTY
65365: LIST
65366: LIST
65367: PUSH
65368: LD_INT 4
65370: PUSH
65371: LD_INT 1
65373: PUSH
65374: EMPTY
65375: LIST
65376: LIST
65377: PUSH
65378: LD_INT 3
65380: PUSH
65381: LD_INT 1
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 2
65390: PUSH
65391: LD_INT 0
65393: PUSH
65394: EMPTY
65395: LIST
65396: LIST
65397: PUSH
65398: LD_INT 2
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: EMPTY
65406: LIST
65407: LIST
65408: PUSH
65409: LD_INT 2
65411: PUSH
65412: LD_INT 2
65414: NEG
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: PUSH
65420: LD_INT 4
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 4
65432: PUSH
65433: LD_INT 4
65435: PUSH
65436: EMPTY
65437: LIST
65438: LIST
65439: PUSH
65440: LD_INT 4
65442: PUSH
65443: LD_INT 3
65445: PUSH
65446: EMPTY
65447: LIST
65448: LIST
65449: PUSH
65450: LD_INT 5
65452: PUSH
65453: LD_INT 4
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 5
65462: PUSH
65463: LD_INT 5
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: LD_INT 4
65472: PUSH
65473: LD_INT 5
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 3
65482: PUSH
65483: LD_INT 4
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: PUSH
65490: LD_INT 3
65492: PUSH
65493: LD_INT 3
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: PUSH
65500: LD_INT 5
65502: PUSH
65503: LD_INT 3
65505: PUSH
65506: EMPTY
65507: LIST
65508: LIST
65509: PUSH
65510: LD_INT 3
65512: PUSH
65513: LD_INT 5
65515: PUSH
65516: EMPTY
65517: LIST
65518: LIST
65519: PUSH
65520: LD_INT 0
65522: PUSH
65523: LD_INT 3
65525: PUSH
65526: EMPTY
65527: LIST
65528: LIST
65529: PUSH
65530: LD_INT 0
65532: PUSH
65533: LD_INT 2
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 3
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 4
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 4
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 3
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 2
65587: PUSH
65588: EMPTY
65589: LIST
65590: LIST
65591: PUSH
65592: LD_INT 2
65594: PUSH
65595: LD_INT 4
65597: PUSH
65598: EMPTY
65599: LIST
65600: LIST
65601: PUSH
65602: LD_INT 2
65604: NEG
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: EMPTY
65610: LIST
65611: LIST
65612: PUSH
65613: LD_INT 4
65615: NEG
65616: PUSH
65617: LD_INT 0
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: LD_INT 4
65626: NEG
65627: PUSH
65628: LD_INT 1
65630: NEG
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 3
65638: NEG
65639: PUSH
65640: LD_INT 0
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 3
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: PUSH
65654: EMPTY
65655: LIST
65656: LIST
65657: PUSH
65658: LD_INT 4
65660: NEG
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 5
65671: NEG
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 5
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 5
65694: NEG
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 3
65706: NEG
65707: PUSH
65708: LD_INT 2
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: EMPTY
65716: LIST
65717: LIST
65718: LIST
65719: LIST
65720: LIST
65721: LIST
65722: LIST
65723: LIST
65724: LIST
65725: LIST
65726: LIST
65727: LIST
65728: LIST
65729: LIST
65730: LIST
65731: LIST
65732: LIST
65733: LIST
65734: LIST
65735: LIST
65736: LIST
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: LIST
65757: LIST
65758: LIST
65759: LIST
65760: LIST
65761: ST_TO_ADDR
// end ; end ;
65762: GO 65765
65764: POP
// case btype of b_depot , b_warehouse :
65765: LD_VAR 0 1
65769: PUSH
65770: LD_INT 0
65772: DOUBLE
65773: EQUAL
65774: IFTRUE 65784
65776: LD_INT 1
65778: DOUBLE
65779: EQUAL
65780: IFTRUE 65784
65782: GO 65985
65784: POP
// case nation of nation_american :
65785: LD_VAR 0 5
65789: PUSH
65790: LD_INT 1
65792: DOUBLE
65793: EQUAL
65794: IFTRUE 65798
65796: GO 65854
65798: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
65799: LD_ADDR_VAR 0 9
65803: PUSH
65804: LD_VAR 0 11
65808: PUSH
65809: LD_VAR 0 12
65813: PUSH
65814: LD_VAR 0 13
65818: PUSH
65819: LD_VAR 0 14
65823: PUSH
65824: LD_VAR 0 15
65828: PUSH
65829: LD_VAR 0 16
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: LIST
65838: LIST
65839: LIST
65840: LIST
65841: PUSH
65842: LD_VAR 0 4
65846: PUSH
65847: LD_INT 1
65849: PLUS
65850: ARRAY
65851: ST_TO_ADDR
65852: GO 65983
65854: LD_INT 2
65856: DOUBLE
65857: EQUAL
65858: IFTRUE 65862
65860: GO 65918
65862: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
65863: LD_ADDR_VAR 0 9
65867: PUSH
65868: LD_VAR 0 17
65872: PUSH
65873: LD_VAR 0 18
65877: PUSH
65878: LD_VAR 0 19
65882: PUSH
65883: LD_VAR 0 20
65887: PUSH
65888: LD_VAR 0 21
65892: PUSH
65893: LD_VAR 0 22
65897: PUSH
65898: EMPTY
65899: LIST
65900: LIST
65901: LIST
65902: LIST
65903: LIST
65904: LIST
65905: PUSH
65906: LD_VAR 0 4
65910: PUSH
65911: LD_INT 1
65913: PLUS
65914: ARRAY
65915: ST_TO_ADDR
65916: GO 65983
65918: LD_INT 3
65920: DOUBLE
65921: EQUAL
65922: IFTRUE 65926
65924: GO 65982
65926: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
65927: LD_ADDR_VAR 0 9
65931: PUSH
65932: LD_VAR 0 23
65936: PUSH
65937: LD_VAR 0 24
65941: PUSH
65942: LD_VAR 0 25
65946: PUSH
65947: LD_VAR 0 26
65951: PUSH
65952: LD_VAR 0 27
65956: PUSH
65957: LD_VAR 0 28
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: LIST
65966: LIST
65967: LIST
65968: LIST
65969: PUSH
65970: LD_VAR 0 4
65974: PUSH
65975: LD_INT 1
65977: PLUS
65978: ARRAY
65979: ST_TO_ADDR
65980: GO 65983
65982: POP
65983: GO 66538
65985: LD_INT 2
65987: DOUBLE
65988: EQUAL
65989: IFTRUE 65999
65991: LD_INT 3
65993: DOUBLE
65994: EQUAL
65995: IFTRUE 65999
65997: GO 66055
65999: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66000: LD_ADDR_VAR 0 9
66004: PUSH
66005: LD_VAR 0 29
66009: PUSH
66010: LD_VAR 0 30
66014: PUSH
66015: LD_VAR 0 31
66019: PUSH
66020: LD_VAR 0 32
66024: PUSH
66025: LD_VAR 0 33
66029: PUSH
66030: LD_VAR 0 34
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: PUSH
66043: LD_VAR 0 4
66047: PUSH
66048: LD_INT 1
66050: PLUS
66051: ARRAY
66052: ST_TO_ADDR
66053: GO 66538
66055: LD_INT 16
66057: DOUBLE
66058: EQUAL
66059: IFTRUE 66117
66061: LD_INT 17
66063: DOUBLE
66064: EQUAL
66065: IFTRUE 66117
66067: LD_INT 18
66069: DOUBLE
66070: EQUAL
66071: IFTRUE 66117
66073: LD_INT 19
66075: DOUBLE
66076: EQUAL
66077: IFTRUE 66117
66079: LD_INT 22
66081: DOUBLE
66082: EQUAL
66083: IFTRUE 66117
66085: LD_INT 20
66087: DOUBLE
66088: EQUAL
66089: IFTRUE 66117
66091: LD_INT 21
66093: DOUBLE
66094: EQUAL
66095: IFTRUE 66117
66097: LD_INT 23
66099: DOUBLE
66100: EQUAL
66101: IFTRUE 66117
66103: LD_INT 24
66105: DOUBLE
66106: EQUAL
66107: IFTRUE 66117
66109: LD_INT 25
66111: DOUBLE
66112: EQUAL
66113: IFTRUE 66117
66115: GO 66173
66117: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
66118: LD_ADDR_VAR 0 9
66122: PUSH
66123: LD_VAR 0 35
66127: PUSH
66128: LD_VAR 0 36
66132: PUSH
66133: LD_VAR 0 37
66137: PUSH
66138: LD_VAR 0 38
66142: PUSH
66143: LD_VAR 0 39
66147: PUSH
66148: LD_VAR 0 40
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: PUSH
66161: LD_VAR 0 4
66165: PUSH
66166: LD_INT 1
66168: PLUS
66169: ARRAY
66170: ST_TO_ADDR
66171: GO 66538
66173: LD_INT 6
66175: DOUBLE
66176: EQUAL
66177: IFTRUE 66229
66179: LD_INT 7
66181: DOUBLE
66182: EQUAL
66183: IFTRUE 66229
66185: LD_INT 8
66187: DOUBLE
66188: EQUAL
66189: IFTRUE 66229
66191: LD_INT 13
66193: DOUBLE
66194: EQUAL
66195: IFTRUE 66229
66197: LD_INT 12
66199: DOUBLE
66200: EQUAL
66201: IFTRUE 66229
66203: LD_INT 15
66205: DOUBLE
66206: EQUAL
66207: IFTRUE 66229
66209: LD_INT 11
66211: DOUBLE
66212: EQUAL
66213: IFTRUE 66229
66215: LD_INT 14
66217: DOUBLE
66218: EQUAL
66219: IFTRUE 66229
66221: LD_INT 10
66223: DOUBLE
66224: EQUAL
66225: IFTRUE 66229
66227: GO 66285
66229: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
66230: LD_ADDR_VAR 0 9
66234: PUSH
66235: LD_VAR 0 41
66239: PUSH
66240: LD_VAR 0 42
66244: PUSH
66245: LD_VAR 0 43
66249: PUSH
66250: LD_VAR 0 44
66254: PUSH
66255: LD_VAR 0 45
66259: PUSH
66260: LD_VAR 0 46
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: LIST
66269: LIST
66270: LIST
66271: LIST
66272: PUSH
66273: LD_VAR 0 4
66277: PUSH
66278: LD_INT 1
66280: PLUS
66281: ARRAY
66282: ST_TO_ADDR
66283: GO 66538
66285: LD_INT 36
66287: DOUBLE
66288: EQUAL
66289: IFTRUE 66293
66291: GO 66349
66293: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
66294: LD_ADDR_VAR 0 9
66298: PUSH
66299: LD_VAR 0 47
66303: PUSH
66304: LD_VAR 0 48
66308: PUSH
66309: LD_VAR 0 49
66313: PUSH
66314: LD_VAR 0 50
66318: PUSH
66319: LD_VAR 0 51
66323: PUSH
66324: LD_VAR 0 52
66328: PUSH
66329: EMPTY
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: PUSH
66337: LD_VAR 0 4
66341: PUSH
66342: LD_INT 1
66344: PLUS
66345: ARRAY
66346: ST_TO_ADDR
66347: GO 66538
66349: LD_INT 4
66351: DOUBLE
66352: EQUAL
66353: IFTRUE 66375
66355: LD_INT 5
66357: DOUBLE
66358: EQUAL
66359: IFTRUE 66375
66361: LD_INT 34
66363: DOUBLE
66364: EQUAL
66365: IFTRUE 66375
66367: LD_INT 37
66369: DOUBLE
66370: EQUAL
66371: IFTRUE 66375
66373: GO 66431
66375: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
66376: LD_ADDR_VAR 0 9
66380: PUSH
66381: LD_VAR 0 53
66385: PUSH
66386: LD_VAR 0 54
66390: PUSH
66391: LD_VAR 0 55
66395: PUSH
66396: LD_VAR 0 56
66400: PUSH
66401: LD_VAR 0 57
66405: PUSH
66406: LD_VAR 0 58
66410: PUSH
66411: EMPTY
66412: LIST
66413: LIST
66414: LIST
66415: LIST
66416: LIST
66417: LIST
66418: PUSH
66419: LD_VAR 0 4
66423: PUSH
66424: LD_INT 1
66426: PLUS
66427: ARRAY
66428: ST_TO_ADDR
66429: GO 66538
66431: LD_INT 31
66433: DOUBLE
66434: EQUAL
66435: IFTRUE 66481
66437: LD_INT 32
66439: DOUBLE
66440: EQUAL
66441: IFTRUE 66481
66443: LD_INT 33
66445: DOUBLE
66446: EQUAL
66447: IFTRUE 66481
66449: LD_INT 27
66451: DOUBLE
66452: EQUAL
66453: IFTRUE 66481
66455: LD_INT 26
66457: DOUBLE
66458: EQUAL
66459: IFTRUE 66481
66461: LD_INT 28
66463: DOUBLE
66464: EQUAL
66465: IFTRUE 66481
66467: LD_INT 29
66469: DOUBLE
66470: EQUAL
66471: IFTRUE 66481
66473: LD_INT 30
66475: DOUBLE
66476: EQUAL
66477: IFTRUE 66481
66479: GO 66537
66481: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
66482: LD_ADDR_VAR 0 9
66486: PUSH
66487: LD_VAR 0 59
66491: PUSH
66492: LD_VAR 0 60
66496: PUSH
66497: LD_VAR 0 61
66501: PUSH
66502: LD_VAR 0 62
66506: PUSH
66507: LD_VAR 0 63
66511: PUSH
66512: LD_VAR 0 64
66516: PUSH
66517: EMPTY
66518: LIST
66519: LIST
66520: LIST
66521: LIST
66522: LIST
66523: LIST
66524: PUSH
66525: LD_VAR 0 4
66529: PUSH
66530: LD_INT 1
66532: PLUS
66533: ARRAY
66534: ST_TO_ADDR
66535: GO 66538
66537: POP
// temp_list2 = [ ] ;
66538: LD_ADDR_VAR 0 10
66542: PUSH
66543: EMPTY
66544: ST_TO_ADDR
// for i in temp_list do
66545: LD_ADDR_VAR 0 8
66549: PUSH
66550: LD_VAR 0 9
66554: PUSH
66555: FOR_IN
66556: IFFALSE 66608
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
66558: LD_ADDR_VAR 0 10
66562: PUSH
66563: LD_VAR 0 10
66567: PUSH
66568: LD_VAR 0 8
66572: PUSH
66573: LD_INT 1
66575: ARRAY
66576: PUSH
66577: LD_VAR 0 2
66581: PLUS
66582: PUSH
66583: LD_VAR 0 8
66587: PUSH
66588: LD_INT 2
66590: ARRAY
66591: PUSH
66592: LD_VAR 0 3
66596: PLUS
66597: PUSH
66598: EMPTY
66599: LIST
66600: LIST
66601: PUSH
66602: EMPTY
66603: LIST
66604: ADD
66605: ST_TO_ADDR
66606: GO 66555
66608: POP
66609: POP
// result = temp_list2 ;
66610: LD_ADDR_VAR 0 7
66614: PUSH
66615: LD_VAR 0 10
66619: ST_TO_ADDR
// end ;
66620: LD_VAR 0 7
66624: RET
// export function EnemyInRange ( unit , dist ) ; begin
66625: LD_INT 0
66627: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
66628: LD_ADDR_VAR 0 3
66632: PUSH
66633: LD_VAR 0 1
66637: PPUSH
66638: CALL_OW 255
66642: PPUSH
66643: LD_VAR 0 1
66647: PPUSH
66648: CALL_OW 250
66652: PPUSH
66653: LD_VAR 0 1
66657: PPUSH
66658: CALL_OW 251
66662: PPUSH
66663: LD_VAR 0 2
66667: PPUSH
66668: CALL 40021 0 4
66672: PUSH
66673: LD_INT 4
66675: ARRAY
66676: ST_TO_ADDR
// end ;
66677: LD_VAR 0 3
66681: RET
// export function PlayerSeeMe ( unit ) ; begin
66682: LD_INT 0
66684: PPUSH
// result := See ( your_side , unit ) ;
66685: LD_ADDR_VAR 0 2
66689: PUSH
66690: LD_OWVAR 2
66694: PPUSH
66695: LD_VAR 0 1
66699: PPUSH
66700: CALL_OW 292
66704: ST_TO_ADDR
// end ;
66705: LD_VAR 0 2
66709: RET
// export function ReverseDir ( unit ) ; begin
66710: LD_INT 0
66712: PPUSH
// if not unit then
66713: LD_VAR 0 1
66717: NOT
66718: IFFALSE 66722
// exit ;
66720: GO 66745
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
66722: LD_ADDR_VAR 0 2
66726: PUSH
66727: LD_VAR 0 1
66731: PPUSH
66732: CALL_OW 254
66736: PUSH
66737: LD_INT 3
66739: PLUS
66740: PUSH
66741: LD_INT 6
66743: MOD
66744: ST_TO_ADDR
// end ;
66745: LD_VAR 0 2
66749: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
66750: LD_INT 0
66752: PPUSH
66753: PPUSH
66754: PPUSH
66755: PPUSH
66756: PPUSH
// if not hexes then
66757: LD_VAR 0 2
66761: NOT
66762: IFFALSE 66766
// exit ;
66764: GO 66914
// dist := 9999 ;
66766: LD_ADDR_VAR 0 5
66770: PUSH
66771: LD_INT 9999
66773: ST_TO_ADDR
// for i = 1 to hexes do
66774: LD_ADDR_VAR 0 4
66778: PUSH
66779: DOUBLE
66780: LD_INT 1
66782: DEC
66783: ST_TO_ADDR
66784: LD_VAR 0 2
66788: PUSH
66789: FOR_TO
66790: IFFALSE 66902
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
66792: LD_VAR 0 1
66796: PPUSH
66797: LD_VAR 0 2
66801: PUSH
66802: LD_VAR 0 4
66806: ARRAY
66807: PUSH
66808: LD_INT 1
66810: ARRAY
66811: PPUSH
66812: LD_VAR 0 2
66816: PUSH
66817: LD_VAR 0 4
66821: ARRAY
66822: PUSH
66823: LD_INT 2
66825: ARRAY
66826: PPUSH
66827: CALL_OW 297
66831: PUSH
66832: LD_VAR 0 5
66836: LESS
66837: IFFALSE 66900
// begin hex := hexes [ i ] ;
66839: LD_ADDR_VAR 0 7
66843: PUSH
66844: LD_VAR 0 2
66848: PUSH
66849: LD_VAR 0 4
66853: ARRAY
66854: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66855: LD_ADDR_VAR 0 5
66859: PUSH
66860: LD_VAR 0 1
66864: PPUSH
66865: LD_VAR 0 2
66869: PUSH
66870: LD_VAR 0 4
66874: ARRAY
66875: PUSH
66876: LD_INT 1
66878: ARRAY
66879: PPUSH
66880: LD_VAR 0 2
66884: PUSH
66885: LD_VAR 0 4
66889: ARRAY
66890: PUSH
66891: LD_INT 2
66893: ARRAY
66894: PPUSH
66895: CALL_OW 297
66899: ST_TO_ADDR
// end ; end ;
66900: GO 66789
66902: POP
66903: POP
// result := hex ;
66904: LD_ADDR_VAR 0 3
66908: PUSH
66909: LD_VAR 0 7
66913: ST_TO_ADDR
// end ;
66914: LD_VAR 0 3
66918: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
66919: LD_INT 0
66921: PPUSH
66922: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
66923: LD_VAR 0 1
66927: NOT
66928: PUSH
66929: LD_VAR 0 1
66933: PUSH
66934: LD_INT 21
66936: PUSH
66937: LD_INT 2
66939: PUSH
66940: EMPTY
66941: LIST
66942: LIST
66943: PUSH
66944: LD_INT 23
66946: PUSH
66947: LD_INT 2
66949: PUSH
66950: EMPTY
66951: LIST
66952: LIST
66953: PUSH
66954: EMPTY
66955: LIST
66956: LIST
66957: PPUSH
66958: CALL_OW 69
66962: IN
66963: NOT
66964: OR
66965: IFFALSE 66969
// exit ;
66967: GO 67016
// for i = 1 to 3 do
66969: LD_ADDR_VAR 0 3
66973: PUSH
66974: DOUBLE
66975: LD_INT 1
66977: DEC
66978: ST_TO_ADDR
66979: LD_INT 3
66981: PUSH
66982: FOR_TO
66983: IFFALSE 67014
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
66985: LD_VAR 0 1
66989: PPUSH
66990: CALL_OW 250
66994: PPUSH
66995: LD_VAR 0 1
66999: PPUSH
67000: CALL_OW 251
67004: PPUSH
67005: LD_INT 1
67007: PPUSH
67008: CALL_OW 453
67012: GO 66982
67014: POP
67015: POP
// end ;
67016: LD_VAR 0 2
67020: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
67021: LD_INT 0
67023: PPUSH
67024: PPUSH
67025: PPUSH
67026: PPUSH
67027: PPUSH
67028: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
67029: LD_VAR 0 1
67033: NOT
67034: PUSH
67035: LD_VAR 0 2
67039: NOT
67040: OR
67041: PUSH
67042: LD_VAR 0 1
67046: PPUSH
67047: CALL_OW 314
67051: OR
67052: IFFALSE 67056
// exit ;
67054: GO 67497
// x := GetX ( enemy_unit ) ;
67056: LD_ADDR_VAR 0 7
67060: PUSH
67061: LD_VAR 0 2
67065: PPUSH
67066: CALL_OW 250
67070: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
67071: LD_ADDR_VAR 0 8
67075: PUSH
67076: LD_VAR 0 2
67080: PPUSH
67081: CALL_OW 251
67085: ST_TO_ADDR
// if not x or not y then
67086: LD_VAR 0 7
67090: NOT
67091: PUSH
67092: LD_VAR 0 8
67096: NOT
67097: OR
67098: IFFALSE 67102
// exit ;
67100: GO 67497
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
67102: LD_ADDR_VAR 0 6
67106: PUSH
67107: LD_VAR 0 7
67111: PPUSH
67112: LD_INT 0
67114: PPUSH
67115: LD_INT 4
67117: PPUSH
67118: CALL_OW 272
67122: PUSH
67123: LD_VAR 0 8
67127: PPUSH
67128: LD_INT 0
67130: PPUSH
67131: LD_INT 4
67133: PPUSH
67134: CALL_OW 273
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_VAR 0 7
67147: PPUSH
67148: LD_INT 1
67150: PPUSH
67151: LD_INT 4
67153: PPUSH
67154: CALL_OW 272
67158: PUSH
67159: LD_VAR 0 8
67163: PPUSH
67164: LD_INT 1
67166: PPUSH
67167: LD_INT 4
67169: PPUSH
67170: CALL_OW 273
67174: PUSH
67175: EMPTY
67176: LIST
67177: LIST
67178: PUSH
67179: LD_VAR 0 7
67183: PPUSH
67184: LD_INT 2
67186: PPUSH
67187: LD_INT 4
67189: PPUSH
67190: CALL_OW 272
67194: PUSH
67195: LD_VAR 0 8
67199: PPUSH
67200: LD_INT 2
67202: PPUSH
67203: LD_INT 4
67205: PPUSH
67206: CALL_OW 273
67210: PUSH
67211: EMPTY
67212: LIST
67213: LIST
67214: PUSH
67215: LD_VAR 0 7
67219: PPUSH
67220: LD_INT 3
67222: PPUSH
67223: LD_INT 4
67225: PPUSH
67226: CALL_OW 272
67230: PUSH
67231: LD_VAR 0 8
67235: PPUSH
67236: LD_INT 3
67238: PPUSH
67239: LD_INT 4
67241: PPUSH
67242: CALL_OW 273
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: LD_VAR 0 7
67255: PPUSH
67256: LD_INT 4
67258: PPUSH
67259: LD_INT 4
67261: PPUSH
67262: CALL_OW 272
67266: PUSH
67267: LD_VAR 0 8
67271: PPUSH
67272: LD_INT 4
67274: PPUSH
67275: LD_INT 4
67277: PPUSH
67278: CALL_OW 273
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_VAR 0 7
67291: PPUSH
67292: LD_INT 5
67294: PPUSH
67295: LD_INT 4
67297: PPUSH
67298: CALL_OW 272
67302: PUSH
67303: LD_VAR 0 8
67307: PPUSH
67308: LD_INT 5
67310: PPUSH
67311: LD_INT 4
67313: PPUSH
67314: CALL_OW 273
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: ST_TO_ADDR
// for i = tmp downto 1 do
67331: LD_ADDR_VAR 0 4
67335: PUSH
67336: DOUBLE
67337: LD_VAR 0 6
67341: INC
67342: ST_TO_ADDR
67343: LD_INT 1
67345: PUSH
67346: FOR_DOWNTO
67347: IFFALSE 67448
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
67349: LD_VAR 0 6
67353: PUSH
67354: LD_VAR 0 4
67358: ARRAY
67359: PUSH
67360: LD_INT 1
67362: ARRAY
67363: PPUSH
67364: LD_VAR 0 6
67368: PUSH
67369: LD_VAR 0 4
67373: ARRAY
67374: PUSH
67375: LD_INT 2
67377: ARRAY
67378: PPUSH
67379: CALL_OW 488
67383: NOT
67384: PUSH
67385: LD_VAR 0 6
67389: PUSH
67390: LD_VAR 0 4
67394: ARRAY
67395: PUSH
67396: LD_INT 1
67398: ARRAY
67399: PPUSH
67400: LD_VAR 0 6
67404: PUSH
67405: LD_VAR 0 4
67409: ARRAY
67410: PUSH
67411: LD_INT 2
67413: ARRAY
67414: PPUSH
67415: CALL_OW 428
67419: PUSH
67420: LD_INT 0
67422: NONEQUAL
67423: OR
67424: IFFALSE 67446
// tmp := Delete ( tmp , i ) ;
67426: LD_ADDR_VAR 0 6
67430: PUSH
67431: LD_VAR 0 6
67435: PPUSH
67436: LD_VAR 0 4
67440: PPUSH
67441: CALL_OW 3
67445: ST_TO_ADDR
67446: GO 67346
67448: POP
67449: POP
// j := GetClosestHex ( unit , tmp ) ;
67450: LD_ADDR_VAR 0 5
67454: PUSH
67455: LD_VAR 0 1
67459: PPUSH
67460: LD_VAR 0 6
67464: PPUSH
67465: CALL 66750 0 2
67469: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
67470: LD_VAR 0 1
67474: PPUSH
67475: LD_VAR 0 5
67479: PUSH
67480: LD_INT 1
67482: ARRAY
67483: PPUSH
67484: LD_VAR 0 5
67488: PUSH
67489: LD_INT 2
67491: ARRAY
67492: PPUSH
67493: CALL_OW 111
// end ;
67497: LD_VAR 0 3
67501: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
67502: LD_INT 0
67504: PPUSH
67505: PPUSH
67506: PPUSH
// uc_side = 0 ;
67507: LD_ADDR_OWVAR 20
67511: PUSH
67512: LD_INT 0
67514: ST_TO_ADDR
// uc_nation = 0 ;
67515: LD_ADDR_OWVAR 21
67519: PUSH
67520: LD_INT 0
67522: ST_TO_ADDR
// InitHc_All ( ) ;
67523: CALL_OW 584
// InitVc ;
67527: CALL_OW 20
// if mastodonts then
67531: LD_VAR 0 6
67535: IFFALSE 67602
// for i = 1 to mastodonts do
67537: LD_ADDR_VAR 0 11
67541: PUSH
67542: DOUBLE
67543: LD_INT 1
67545: DEC
67546: ST_TO_ADDR
67547: LD_VAR 0 6
67551: PUSH
67552: FOR_TO
67553: IFFALSE 67600
// begin vc_chassis := 31 ;
67555: LD_ADDR_OWVAR 37
67559: PUSH
67560: LD_INT 31
67562: ST_TO_ADDR
// vc_control := control_rider ;
67563: LD_ADDR_OWVAR 38
67567: PUSH
67568: LD_INT 4
67570: ST_TO_ADDR
// animal := CreateVehicle ;
67571: LD_ADDR_VAR 0 12
67575: PUSH
67576: CALL_OW 45
67580: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67581: LD_VAR 0 12
67585: PPUSH
67586: LD_VAR 0 8
67590: PPUSH
67591: LD_INT 0
67593: PPUSH
67594: CALL 69790 0 3
// end ;
67598: GO 67552
67600: POP
67601: POP
// if horses then
67602: LD_VAR 0 5
67606: IFFALSE 67673
// for i = 1 to horses do
67608: LD_ADDR_VAR 0 11
67612: PUSH
67613: DOUBLE
67614: LD_INT 1
67616: DEC
67617: ST_TO_ADDR
67618: LD_VAR 0 5
67622: PUSH
67623: FOR_TO
67624: IFFALSE 67671
// begin hc_class := 21 ;
67626: LD_ADDR_OWVAR 28
67630: PUSH
67631: LD_INT 21
67633: ST_TO_ADDR
// hc_gallery :=  ;
67634: LD_ADDR_OWVAR 33
67638: PUSH
67639: LD_STRING 
67641: ST_TO_ADDR
// animal := CreateHuman ;
67642: LD_ADDR_VAR 0 12
67646: PUSH
67647: CALL_OW 44
67651: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67652: LD_VAR 0 12
67656: PPUSH
67657: LD_VAR 0 8
67661: PPUSH
67662: LD_INT 0
67664: PPUSH
67665: CALL 69790 0 3
// end ;
67669: GO 67623
67671: POP
67672: POP
// if birds then
67673: LD_VAR 0 1
67677: IFFALSE 67744
// for i = 1 to birds do
67679: LD_ADDR_VAR 0 11
67683: PUSH
67684: DOUBLE
67685: LD_INT 1
67687: DEC
67688: ST_TO_ADDR
67689: LD_VAR 0 1
67693: PUSH
67694: FOR_TO
67695: IFFALSE 67742
// begin hc_class = 18 ;
67697: LD_ADDR_OWVAR 28
67701: PUSH
67702: LD_INT 18
67704: ST_TO_ADDR
// hc_gallery =  ;
67705: LD_ADDR_OWVAR 33
67709: PUSH
67710: LD_STRING 
67712: ST_TO_ADDR
// animal := CreateHuman ;
67713: LD_ADDR_VAR 0 12
67717: PUSH
67718: CALL_OW 44
67722: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67723: LD_VAR 0 12
67727: PPUSH
67728: LD_VAR 0 8
67732: PPUSH
67733: LD_INT 0
67735: PPUSH
67736: CALL 69790 0 3
// end ;
67740: GO 67694
67742: POP
67743: POP
// if tigers then
67744: LD_VAR 0 2
67748: IFFALSE 67832
// for i = 1 to tigers do
67750: LD_ADDR_VAR 0 11
67754: PUSH
67755: DOUBLE
67756: LD_INT 1
67758: DEC
67759: ST_TO_ADDR
67760: LD_VAR 0 2
67764: PUSH
67765: FOR_TO
67766: IFFALSE 67830
// begin hc_class = class_tiger ;
67768: LD_ADDR_OWVAR 28
67772: PUSH
67773: LD_INT 14
67775: ST_TO_ADDR
// hc_gallery =  ;
67776: LD_ADDR_OWVAR 33
67780: PUSH
67781: LD_STRING 
67783: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
67784: LD_ADDR_OWVAR 35
67788: PUSH
67789: LD_INT 7
67791: NEG
67792: PPUSH
67793: LD_INT 7
67795: PPUSH
67796: CALL_OW 12
67800: ST_TO_ADDR
// animal := CreateHuman ;
67801: LD_ADDR_VAR 0 12
67805: PUSH
67806: CALL_OW 44
67810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67811: LD_VAR 0 12
67815: PPUSH
67816: LD_VAR 0 8
67820: PPUSH
67821: LD_INT 0
67823: PPUSH
67824: CALL 69790 0 3
// end ;
67828: GO 67765
67830: POP
67831: POP
// if apemans then
67832: LD_VAR 0 3
67836: IFFALSE 67959
// for i = 1 to apemans do
67838: LD_ADDR_VAR 0 11
67842: PUSH
67843: DOUBLE
67844: LD_INT 1
67846: DEC
67847: ST_TO_ADDR
67848: LD_VAR 0 3
67852: PUSH
67853: FOR_TO
67854: IFFALSE 67957
// begin hc_class = class_apeman ;
67856: LD_ADDR_OWVAR 28
67860: PUSH
67861: LD_INT 12
67863: ST_TO_ADDR
// hc_gallery =  ;
67864: LD_ADDR_OWVAR 33
67868: PUSH
67869: LD_STRING 
67871: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
67872: LD_ADDR_OWVAR 35
67876: PUSH
67877: LD_INT 2
67879: NEG
67880: PPUSH
67881: LD_INT 2
67883: PPUSH
67884: CALL_OW 12
67888: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
67889: LD_ADDR_OWVAR 31
67893: PUSH
67894: LD_INT 1
67896: PPUSH
67897: LD_INT 3
67899: PPUSH
67900: CALL_OW 12
67904: PUSH
67905: LD_INT 1
67907: PPUSH
67908: LD_INT 3
67910: PPUSH
67911: CALL_OW 12
67915: PUSH
67916: LD_INT 0
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: ST_TO_ADDR
// animal := CreateHuman ;
67928: LD_ADDR_VAR 0 12
67932: PUSH
67933: CALL_OW 44
67937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
67938: LD_VAR 0 12
67942: PPUSH
67943: LD_VAR 0 8
67947: PPUSH
67948: LD_INT 0
67950: PPUSH
67951: CALL 69790 0 3
// end ;
67955: GO 67853
67957: POP
67958: POP
// if enchidnas then
67959: LD_VAR 0 4
67963: IFFALSE 68030
// for i = 1 to enchidnas do
67965: LD_ADDR_VAR 0 11
67969: PUSH
67970: DOUBLE
67971: LD_INT 1
67973: DEC
67974: ST_TO_ADDR
67975: LD_VAR 0 4
67979: PUSH
67980: FOR_TO
67981: IFFALSE 68028
// begin hc_class = 13 ;
67983: LD_ADDR_OWVAR 28
67987: PUSH
67988: LD_INT 13
67990: ST_TO_ADDR
// hc_gallery =  ;
67991: LD_ADDR_OWVAR 33
67995: PUSH
67996: LD_STRING 
67998: ST_TO_ADDR
// animal := CreateHuman ;
67999: LD_ADDR_VAR 0 12
68003: PUSH
68004: CALL_OW 44
68008: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
68009: LD_VAR 0 12
68013: PPUSH
68014: LD_VAR 0 8
68018: PPUSH
68019: LD_INT 0
68021: PPUSH
68022: CALL 69790 0 3
// end ;
68026: GO 67980
68028: POP
68029: POP
// if fishes then
68030: LD_VAR 0 7
68034: IFFALSE 68101
// for i = 1 to fishes do
68036: LD_ADDR_VAR 0 11
68040: PUSH
68041: DOUBLE
68042: LD_INT 1
68044: DEC
68045: ST_TO_ADDR
68046: LD_VAR 0 7
68050: PUSH
68051: FOR_TO
68052: IFFALSE 68099
// begin hc_class = 20 ;
68054: LD_ADDR_OWVAR 28
68058: PUSH
68059: LD_INT 20
68061: ST_TO_ADDR
// hc_gallery =  ;
68062: LD_ADDR_OWVAR 33
68066: PUSH
68067: LD_STRING 
68069: ST_TO_ADDR
// animal := CreateHuman ;
68070: LD_ADDR_VAR 0 12
68074: PUSH
68075: CALL_OW 44
68079: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
68080: LD_VAR 0 12
68084: PPUSH
68085: LD_VAR 0 9
68089: PPUSH
68090: LD_INT 0
68092: PPUSH
68093: CALL 69790 0 3
// end ;
68097: GO 68051
68099: POP
68100: POP
// end ;
68101: LD_VAR 0 10
68105: RET
// export function WantHeal ( sci , unit ) ; begin
68106: LD_INT 0
68108: PPUSH
// if GetTaskList ( sci ) > 0 then
68109: LD_VAR 0 1
68113: PPUSH
68114: CALL_OW 437
68118: PUSH
68119: LD_INT 0
68121: GREATER
68122: IFFALSE 68192
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
68124: LD_VAR 0 1
68128: PPUSH
68129: CALL_OW 437
68133: PUSH
68134: LD_INT 1
68136: ARRAY
68137: PUSH
68138: LD_INT 1
68140: ARRAY
68141: PUSH
68142: LD_STRING l
68144: EQUAL
68145: PUSH
68146: LD_VAR 0 1
68150: PPUSH
68151: CALL_OW 437
68155: PUSH
68156: LD_INT 1
68158: ARRAY
68159: PUSH
68160: LD_INT 4
68162: ARRAY
68163: PUSH
68164: LD_VAR 0 2
68168: EQUAL
68169: AND
68170: IFFALSE 68182
// result := true else
68172: LD_ADDR_VAR 0 3
68176: PUSH
68177: LD_INT 1
68179: ST_TO_ADDR
68180: GO 68190
// result := false ;
68182: LD_ADDR_VAR 0 3
68186: PUSH
68187: LD_INT 0
68189: ST_TO_ADDR
// end else
68190: GO 68200
// result := false ;
68192: LD_ADDR_VAR 0 3
68196: PUSH
68197: LD_INT 0
68199: ST_TO_ADDR
// end ;
68200: LD_VAR 0 3
68204: RET
// export function HealTarget ( sci ) ; begin
68205: LD_INT 0
68207: PPUSH
// if not sci then
68208: LD_VAR 0 1
68212: NOT
68213: IFFALSE 68217
// exit ;
68215: GO 68282
// result := 0 ;
68217: LD_ADDR_VAR 0 2
68221: PUSH
68222: LD_INT 0
68224: ST_TO_ADDR
// if GetTaskList ( sci ) then
68225: LD_VAR 0 1
68229: PPUSH
68230: CALL_OW 437
68234: IFFALSE 68282
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
68236: LD_VAR 0 1
68240: PPUSH
68241: CALL_OW 437
68245: PUSH
68246: LD_INT 1
68248: ARRAY
68249: PUSH
68250: LD_INT 1
68252: ARRAY
68253: PUSH
68254: LD_STRING l
68256: EQUAL
68257: IFFALSE 68282
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
68259: LD_ADDR_VAR 0 2
68263: PUSH
68264: LD_VAR 0 1
68268: PPUSH
68269: CALL_OW 437
68273: PUSH
68274: LD_INT 1
68276: ARRAY
68277: PUSH
68278: LD_INT 4
68280: ARRAY
68281: ST_TO_ADDR
// end ;
68282: LD_VAR 0 2
68286: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
68287: LD_INT 0
68289: PPUSH
68290: PPUSH
68291: PPUSH
68292: PPUSH
// if not base_units then
68293: LD_VAR 0 1
68297: NOT
68298: IFFALSE 68302
// exit ;
68300: GO 68389
// result := false ;
68302: LD_ADDR_VAR 0 2
68306: PUSH
68307: LD_INT 0
68309: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
68310: LD_ADDR_VAR 0 5
68314: PUSH
68315: LD_VAR 0 1
68319: PPUSH
68320: LD_INT 21
68322: PUSH
68323: LD_INT 3
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PPUSH
68330: CALL_OW 72
68334: ST_TO_ADDR
// if not tmp then
68335: LD_VAR 0 5
68339: NOT
68340: IFFALSE 68344
// exit ;
68342: GO 68389
// for i in tmp do
68344: LD_ADDR_VAR 0 3
68348: PUSH
68349: LD_VAR 0 5
68353: PUSH
68354: FOR_IN
68355: IFFALSE 68387
// begin result := EnemyInRange ( i , 22 ) ;
68357: LD_ADDR_VAR 0 2
68361: PUSH
68362: LD_VAR 0 3
68366: PPUSH
68367: LD_INT 22
68369: PPUSH
68370: CALL 66625 0 2
68374: ST_TO_ADDR
// if result then
68375: LD_VAR 0 2
68379: IFFALSE 68385
// exit ;
68381: POP
68382: POP
68383: GO 68389
// end ;
68385: GO 68354
68387: POP
68388: POP
// end ;
68389: LD_VAR 0 2
68393: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
68394: LD_INT 0
68396: PPUSH
68397: PPUSH
// if not units then
68398: LD_VAR 0 1
68402: NOT
68403: IFFALSE 68407
// exit ;
68405: GO 68477
// result := [ ] ;
68407: LD_ADDR_VAR 0 3
68411: PUSH
68412: EMPTY
68413: ST_TO_ADDR
// for i in units do
68414: LD_ADDR_VAR 0 4
68418: PUSH
68419: LD_VAR 0 1
68423: PUSH
68424: FOR_IN
68425: IFFALSE 68475
// if GetTag ( i ) = tag then
68427: LD_VAR 0 4
68431: PPUSH
68432: CALL_OW 110
68436: PUSH
68437: LD_VAR 0 2
68441: EQUAL
68442: IFFALSE 68473
// result := Replace ( result , result + 1 , i ) ;
68444: LD_ADDR_VAR 0 3
68448: PUSH
68449: LD_VAR 0 3
68453: PPUSH
68454: LD_VAR 0 3
68458: PUSH
68459: LD_INT 1
68461: PLUS
68462: PPUSH
68463: LD_VAR 0 4
68467: PPUSH
68468: CALL_OW 1
68472: ST_TO_ADDR
68473: GO 68424
68475: POP
68476: POP
// end ;
68477: LD_VAR 0 3
68481: RET
// export function IsDriver ( un ) ; begin
68482: LD_INT 0
68484: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
68485: LD_ADDR_VAR 0 2
68489: PUSH
68490: LD_VAR 0 1
68494: PUSH
68495: LD_INT 55
68497: PUSH
68498: EMPTY
68499: LIST
68500: PPUSH
68501: CALL_OW 69
68505: IN
68506: ST_TO_ADDR
// end ;
68507: LD_VAR 0 2
68511: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
68512: LD_INT 0
68514: PPUSH
68515: PPUSH
// list := [ ] ;
68516: LD_ADDR_VAR 0 5
68520: PUSH
68521: EMPTY
68522: ST_TO_ADDR
// case d of 0 :
68523: LD_VAR 0 3
68527: PUSH
68528: LD_INT 0
68530: DOUBLE
68531: EQUAL
68532: IFTRUE 68536
68534: GO 68669
68536: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
68537: LD_ADDR_VAR 0 5
68541: PUSH
68542: LD_VAR 0 1
68546: PUSH
68547: LD_INT 4
68549: MINUS
68550: PUSH
68551: LD_VAR 0 2
68555: PUSH
68556: LD_INT 4
68558: MINUS
68559: PUSH
68560: LD_INT 2
68562: PUSH
68563: EMPTY
68564: LIST
68565: LIST
68566: LIST
68567: PUSH
68568: LD_VAR 0 1
68572: PUSH
68573: LD_INT 3
68575: MINUS
68576: PUSH
68577: LD_VAR 0 2
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: LIST
68589: PUSH
68590: LD_VAR 0 1
68594: PUSH
68595: LD_INT 4
68597: PLUS
68598: PUSH
68599: LD_VAR 0 2
68603: PUSH
68604: LD_INT 4
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: LIST
68611: PUSH
68612: LD_VAR 0 1
68616: PUSH
68617: LD_INT 3
68619: PLUS
68620: PUSH
68621: LD_VAR 0 2
68625: PUSH
68626: LD_INT 3
68628: PLUS
68629: PUSH
68630: LD_INT 5
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: PUSH
68638: LD_VAR 0 1
68642: PUSH
68643: LD_VAR 0 2
68647: PUSH
68648: LD_INT 4
68650: PLUS
68651: PUSH
68652: LD_INT 0
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: LIST
68659: PUSH
68660: EMPTY
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: ST_TO_ADDR
// end ; 1 :
68667: GO 69367
68669: LD_INT 1
68671: DOUBLE
68672: EQUAL
68673: IFTRUE 68677
68675: GO 68810
68677: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
68678: LD_ADDR_VAR 0 5
68682: PUSH
68683: LD_VAR 0 1
68687: PUSH
68688: LD_VAR 0 2
68692: PUSH
68693: LD_INT 4
68695: MINUS
68696: PUSH
68697: LD_INT 3
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: LIST
68704: PUSH
68705: LD_VAR 0 1
68709: PUSH
68710: LD_INT 3
68712: MINUS
68713: PUSH
68714: LD_VAR 0 2
68718: PUSH
68719: LD_INT 3
68721: MINUS
68722: PUSH
68723: LD_INT 2
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: LIST
68730: PUSH
68731: LD_VAR 0 1
68735: PUSH
68736: LD_INT 4
68738: MINUS
68739: PUSH
68740: LD_VAR 0 2
68744: PUSH
68745: LD_INT 1
68747: PUSH
68748: EMPTY
68749: LIST
68750: LIST
68751: LIST
68752: PUSH
68753: LD_VAR 0 1
68757: PUSH
68758: LD_VAR 0 2
68762: PUSH
68763: LD_INT 3
68765: PLUS
68766: PUSH
68767: LD_INT 0
68769: PUSH
68770: EMPTY
68771: LIST
68772: LIST
68773: LIST
68774: PUSH
68775: LD_VAR 0 1
68779: PUSH
68780: LD_INT 4
68782: PLUS
68783: PUSH
68784: LD_VAR 0 2
68788: PUSH
68789: LD_INT 4
68791: PLUS
68792: PUSH
68793: LD_INT 5
68795: PUSH
68796: EMPTY
68797: LIST
68798: LIST
68799: LIST
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: ST_TO_ADDR
// end ; 2 :
68808: GO 69367
68810: LD_INT 2
68812: DOUBLE
68813: EQUAL
68814: IFTRUE 68818
68816: GO 68947
68818: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
68819: LD_ADDR_VAR 0 5
68823: PUSH
68824: LD_VAR 0 1
68828: PUSH
68829: LD_VAR 0 2
68833: PUSH
68834: LD_INT 3
68836: MINUS
68837: PUSH
68838: LD_INT 3
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: LIST
68845: PUSH
68846: LD_VAR 0 1
68850: PUSH
68851: LD_INT 4
68853: PLUS
68854: PUSH
68855: LD_VAR 0 2
68859: PUSH
68860: LD_INT 4
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: LIST
68867: PUSH
68868: LD_VAR 0 1
68872: PUSH
68873: LD_VAR 0 2
68877: PUSH
68878: LD_INT 4
68880: PLUS
68881: PUSH
68882: LD_INT 0
68884: PUSH
68885: EMPTY
68886: LIST
68887: LIST
68888: LIST
68889: PUSH
68890: LD_VAR 0 1
68894: PUSH
68895: LD_INT 3
68897: MINUS
68898: PUSH
68899: LD_VAR 0 2
68903: PUSH
68904: LD_INT 1
68906: PUSH
68907: EMPTY
68908: LIST
68909: LIST
68910: LIST
68911: PUSH
68912: LD_VAR 0 1
68916: PUSH
68917: LD_INT 4
68919: MINUS
68920: PUSH
68921: LD_VAR 0 2
68925: PUSH
68926: LD_INT 4
68928: MINUS
68929: PUSH
68930: LD_INT 2
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: LIST
68937: PUSH
68938: EMPTY
68939: LIST
68940: LIST
68941: LIST
68942: LIST
68943: LIST
68944: ST_TO_ADDR
// end ; 3 :
68945: GO 69367
68947: LD_INT 3
68949: DOUBLE
68950: EQUAL
68951: IFTRUE 68955
68953: GO 69088
68955: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
68956: LD_ADDR_VAR 0 5
68960: PUSH
68961: LD_VAR 0 1
68965: PUSH
68966: LD_INT 3
68968: PLUS
68969: PUSH
68970: LD_VAR 0 2
68974: PUSH
68975: LD_INT 4
68977: PUSH
68978: EMPTY
68979: LIST
68980: LIST
68981: LIST
68982: PUSH
68983: LD_VAR 0 1
68987: PUSH
68988: LD_INT 4
68990: PLUS
68991: PUSH
68992: LD_VAR 0 2
68996: PUSH
68997: LD_INT 4
68999: PLUS
69000: PUSH
69001: LD_INT 5
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: LIST
69008: PUSH
69009: LD_VAR 0 1
69013: PUSH
69014: LD_INT 4
69016: MINUS
69017: PUSH
69018: LD_VAR 0 2
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: LIST
69030: PUSH
69031: LD_VAR 0 1
69035: PUSH
69036: LD_VAR 0 2
69040: PUSH
69041: LD_INT 4
69043: MINUS
69044: PUSH
69045: LD_INT 3
69047: PUSH
69048: EMPTY
69049: LIST
69050: LIST
69051: LIST
69052: PUSH
69053: LD_VAR 0 1
69057: PUSH
69058: LD_INT 3
69060: MINUS
69061: PUSH
69062: LD_VAR 0 2
69066: PUSH
69067: LD_INT 3
69069: MINUS
69070: PUSH
69071: LD_INT 2
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: LIST
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: ST_TO_ADDR
// end ; 4 :
69086: GO 69367
69088: LD_INT 4
69090: DOUBLE
69091: EQUAL
69092: IFTRUE 69096
69094: GO 69229
69096: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
69097: LD_ADDR_VAR 0 5
69101: PUSH
69102: LD_VAR 0 1
69106: PUSH
69107: LD_VAR 0 2
69111: PUSH
69112: LD_INT 4
69114: PLUS
69115: PUSH
69116: LD_INT 0
69118: PUSH
69119: EMPTY
69120: LIST
69121: LIST
69122: LIST
69123: PUSH
69124: LD_VAR 0 1
69128: PUSH
69129: LD_INT 3
69131: PLUS
69132: PUSH
69133: LD_VAR 0 2
69137: PUSH
69138: LD_INT 3
69140: PLUS
69141: PUSH
69142: LD_INT 5
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: LIST
69149: PUSH
69150: LD_VAR 0 1
69154: PUSH
69155: LD_INT 4
69157: PLUS
69158: PUSH
69159: LD_VAR 0 2
69163: PUSH
69164: LD_INT 4
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: LIST
69171: PUSH
69172: LD_VAR 0 1
69176: PUSH
69177: LD_VAR 0 2
69181: PUSH
69182: LD_INT 3
69184: MINUS
69185: PUSH
69186: LD_INT 3
69188: PUSH
69189: EMPTY
69190: LIST
69191: LIST
69192: LIST
69193: PUSH
69194: LD_VAR 0 1
69198: PUSH
69199: LD_INT 4
69201: MINUS
69202: PUSH
69203: LD_VAR 0 2
69207: PUSH
69208: LD_INT 4
69210: MINUS
69211: PUSH
69212: LD_INT 2
69214: PUSH
69215: EMPTY
69216: LIST
69217: LIST
69218: LIST
69219: PUSH
69220: EMPTY
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: ST_TO_ADDR
// end ; 5 :
69227: GO 69367
69229: LD_INT 5
69231: DOUBLE
69232: EQUAL
69233: IFTRUE 69237
69235: GO 69366
69237: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
69238: LD_ADDR_VAR 0 5
69242: PUSH
69243: LD_VAR 0 1
69247: PUSH
69248: LD_INT 4
69250: MINUS
69251: PUSH
69252: LD_VAR 0 2
69256: PUSH
69257: LD_INT 1
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: LIST
69264: PUSH
69265: LD_VAR 0 1
69269: PUSH
69270: LD_VAR 0 2
69274: PUSH
69275: LD_INT 4
69277: MINUS
69278: PUSH
69279: LD_INT 3
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: LIST
69286: PUSH
69287: LD_VAR 0 1
69291: PUSH
69292: LD_INT 4
69294: PLUS
69295: PUSH
69296: LD_VAR 0 2
69300: PUSH
69301: LD_INT 4
69303: PLUS
69304: PUSH
69305: LD_INT 5
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: LIST
69312: PUSH
69313: LD_VAR 0 1
69317: PUSH
69318: LD_INT 3
69320: PLUS
69321: PUSH
69322: LD_VAR 0 2
69326: PUSH
69327: LD_INT 4
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: LIST
69334: PUSH
69335: LD_VAR 0 1
69339: PUSH
69340: LD_VAR 0 2
69344: PUSH
69345: LD_INT 3
69347: PLUS
69348: PUSH
69349: LD_INT 0
69351: PUSH
69352: EMPTY
69353: LIST
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: ST_TO_ADDR
// end ; end ;
69364: GO 69367
69366: POP
// result := list ;
69367: LD_ADDR_VAR 0 4
69371: PUSH
69372: LD_VAR 0 5
69376: ST_TO_ADDR
// end ;
69377: LD_VAR 0 4
69381: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
69382: LD_INT 0
69384: PPUSH
69385: PPUSH
69386: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
69387: LD_VAR 0 1
69391: NOT
69392: PUSH
69393: LD_VAR 0 2
69397: PUSH
69398: LD_INT 1
69400: PUSH
69401: LD_INT 2
69403: PUSH
69404: LD_INT 3
69406: PUSH
69407: LD_INT 4
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: LIST
69414: LIST
69415: IN
69416: NOT
69417: OR
69418: IFFALSE 69422
// exit ;
69420: GO 69514
// tmp := [ ] ;
69422: LD_ADDR_VAR 0 5
69426: PUSH
69427: EMPTY
69428: ST_TO_ADDR
// for i in units do
69429: LD_ADDR_VAR 0 4
69433: PUSH
69434: LD_VAR 0 1
69438: PUSH
69439: FOR_IN
69440: IFFALSE 69483
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
69442: LD_ADDR_VAR 0 5
69446: PUSH
69447: LD_VAR 0 5
69451: PPUSH
69452: LD_VAR 0 5
69456: PUSH
69457: LD_INT 1
69459: PLUS
69460: PPUSH
69461: LD_VAR 0 4
69465: PPUSH
69466: LD_VAR 0 2
69470: PPUSH
69471: CALL_OW 259
69475: PPUSH
69476: CALL_OW 2
69480: ST_TO_ADDR
69481: GO 69439
69483: POP
69484: POP
// if not tmp then
69485: LD_VAR 0 5
69489: NOT
69490: IFFALSE 69494
// exit ;
69492: GO 69514
// result := SortListByListDesc ( units , tmp ) ;
69494: LD_ADDR_VAR 0 3
69498: PUSH
69499: LD_VAR 0 1
69503: PPUSH
69504: LD_VAR 0 5
69508: PPUSH
69509: CALL_OW 77
69513: ST_TO_ADDR
// end ;
69514: LD_VAR 0 3
69518: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
69519: LD_INT 0
69521: PPUSH
69522: PPUSH
69523: PPUSH
// result := false ;
69524: LD_ADDR_VAR 0 3
69528: PUSH
69529: LD_INT 0
69531: ST_TO_ADDR
// x := GetX ( building ) ;
69532: LD_ADDR_VAR 0 4
69536: PUSH
69537: LD_VAR 0 2
69541: PPUSH
69542: CALL_OW 250
69546: ST_TO_ADDR
// y := GetY ( building ) ;
69547: LD_ADDR_VAR 0 5
69551: PUSH
69552: LD_VAR 0 2
69556: PPUSH
69557: CALL_OW 251
69561: ST_TO_ADDR
// if not building or not x or not y then
69562: LD_VAR 0 2
69566: NOT
69567: PUSH
69568: LD_VAR 0 4
69572: NOT
69573: OR
69574: PUSH
69575: LD_VAR 0 5
69579: NOT
69580: OR
69581: IFFALSE 69585
// exit ;
69583: GO 69677
// if GetTaskList ( unit ) then
69585: LD_VAR 0 1
69589: PPUSH
69590: CALL_OW 437
69594: IFFALSE 69677
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69596: LD_STRING e
69598: PUSH
69599: LD_VAR 0 1
69603: PPUSH
69604: CALL_OW 437
69608: PUSH
69609: LD_INT 1
69611: ARRAY
69612: PUSH
69613: LD_INT 1
69615: ARRAY
69616: EQUAL
69617: PUSH
69618: LD_VAR 0 4
69622: PUSH
69623: LD_VAR 0 1
69627: PPUSH
69628: CALL_OW 437
69632: PUSH
69633: LD_INT 1
69635: ARRAY
69636: PUSH
69637: LD_INT 2
69639: ARRAY
69640: EQUAL
69641: AND
69642: PUSH
69643: LD_VAR 0 5
69647: PUSH
69648: LD_VAR 0 1
69652: PPUSH
69653: CALL_OW 437
69657: PUSH
69658: LD_INT 1
69660: ARRAY
69661: PUSH
69662: LD_INT 3
69664: ARRAY
69665: EQUAL
69666: AND
69667: IFFALSE 69677
// result := true end ;
69669: LD_ADDR_VAR 0 3
69673: PUSH
69674: LD_INT 1
69676: ST_TO_ADDR
// end ;
69677: LD_VAR 0 3
69681: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
69682: LD_INT 0
69684: PPUSH
// result := false ;
69685: LD_ADDR_VAR 0 4
69689: PUSH
69690: LD_INT 0
69692: ST_TO_ADDR
// if GetTaskList ( unit ) then
69693: LD_VAR 0 1
69697: PPUSH
69698: CALL_OW 437
69702: IFFALSE 69785
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
69704: LD_STRING M
69706: PUSH
69707: LD_VAR 0 1
69711: PPUSH
69712: CALL_OW 437
69716: PUSH
69717: LD_INT 1
69719: ARRAY
69720: PUSH
69721: LD_INT 1
69723: ARRAY
69724: EQUAL
69725: PUSH
69726: LD_VAR 0 2
69730: PUSH
69731: LD_VAR 0 1
69735: PPUSH
69736: CALL_OW 437
69740: PUSH
69741: LD_INT 1
69743: ARRAY
69744: PUSH
69745: LD_INT 2
69747: ARRAY
69748: EQUAL
69749: AND
69750: PUSH
69751: LD_VAR 0 3
69755: PUSH
69756: LD_VAR 0 1
69760: PPUSH
69761: CALL_OW 437
69765: PUSH
69766: LD_INT 1
69768: ARRAY
69769: PUSH
69770: LD_INT 3
69772: ARRAY
69773: EQUAL
69774: AND
69775: IFFALSE 69785
// result := true ;
69777: LD_ADDR_VAR 0 4
69781: PUSH
69782: LD_INT 1
69784: ST_TO_ADDR
// end ; end ;
69785: LD_VAR 0 4
69789: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
69790: LD_INT 0
69792: PPUSH
69793: PPUSH
69794: PPUSH
69795: PPUSH
// if not unit or not area then
69796: LD_VAR 0 1
69800: NOT
69801: PUSH
69802: LD_VAR 0 2
69806: NOT
69807: OR
69808: IFFALSE 69812
// exit ;
69810: GO 69976
// tmp := AreaToList ( area , i ) ;
69812: LD_ADDR_VAR 0 6
69816: PUSH
69817: LD_VAR 0 2
69821: PPUSH
69822: LD_VAR 0 5
69826: PPUSH
69827: CALL_OW 517
69831: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
69832: LD_ADDR_VAR 0 5
69836: PUSH
69837: DOUBLE
69838: LD_INT 1
69840: DEC
69841: ST_TO_ADDR
69842: LD_VAR 0 6
69846: PUSH
69847: LD_INT 1
69849: ARRAY
69850: PUSH
69851: FOR_TO
69852: IFFALSE 69974
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
69854: LD_ADDR_VAR 0 7
69858: PUSH
69859: LD_VAR 0 6
69863: PUSH
69864: LD_INT 1
69866: ARRAY
69867: PUSH
69868: LD_VAR 0 5
69872: ARRAY
69873: PUSH
69874: LD_VAR 0 6
69878: PUSH
69879: LD_INT 2
69881: ARRAY
69882: PUSH
69883: LD_VAR 0 5
69887: ARRAY
69888: PUSH
69889: EMPTY
69890: LIST
69891: LIST
69892: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
69893: LD_VAR 0 7
69897: PUSH
69898: LD_INT 1
69900: ARRAY
69901: PPUSH
69902: LD_VAR 0 7
69906: PUSH
69907: LD_INT 2
69909: ARRAY
69910: PPUSH
69911: CALL_OW 428
69915: PUSH
69916: LD_INT 0
69918: EQUAL
69919: IFFALSE 69972
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
69921: LD_VAR 0 1
69925: PPUSH
69926: LD_VAR 0 7
69930: PUSH
69931: LD_INT 1
69933: ARRAY
69934: PPUSH
69935: LD_VAR 0 7
69939: PUSH
69940: LD_INT 2
69942: ARRAY
69943: PPUSH
69944: LD_VAR 0 3
69948: PPUSH
69949: CALL_OW 48
// result := IsPlaced ( unit ) ;
69953: LD_ADDR_VAR 0 4
69957: PUSH
69958: LD_VAR 0 1
69962: PPUSH
69963: CALL_OW 305
69967: ST_TO_ADDR
// exit ;
69968: POP
69969: POP
69970: GO 69976
// end ; end ;
69972: GO 69851
69974: POP
69975: POP
// end ;
69976: LD_VAR 0 4
69980: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
69981: LD_INT 0
69983: PPUSH
69984: PPUSH
69985: PPUSH
// if not side or side > 8 then
69986: LD_VAR 0 1
69990: NOT
69991: PUSH
69992: LD_VAR 0 1
69996: PUSH
69997: LD_INT 8
69999: GREATER
70000: OR
70001: IFFALSE 70005
// exit ;
70003: GO 70192
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
70005: LD_ADDR_VAR 0 4
70009: PUSH
70010: LD_INT 22
70012: PUSH
70013: LD_VAR 0 1
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 21
70024: PUSH
70025: LD_INT 3
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: EMPTY
70033: LIST
70034: LIST
70035: PPUSH
70036: CALL_OW 69
70040: ST_TO_ADDR
// if not tmp then
70041: LD_VAR 0 4
70045: NOT
70046: IFFALSE 70050
// exit ;
70048: GO 70192
// enable_addtolog := true ;
70050: LD_ADDR_OWVAR 81
70054: PUSH
70055: LD_INT 1
70057: ST_TO_ADDR
// AddToLog ( [ ) ;
70058: LD_STRING [
70060: PPUSH
70061: CALL_OW 561
// for i in tmp do
70065: LD_ADDR_VAR 0 3
70069: PUSH
70070: LD_VAR 0 4
70074: PUSH
70075: FOR_IN
70076: IFFALSE 70183
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
70078: LD_STRING [
70080: PUSH
70081: LD_VAR 0 3
70085: PPUSH
70086: CALL_OW 266
70090: STR
70091: PUSH
70092: LD_STRING , 
70094: STR
70095: PUSH
70096: LD_VAR 0 3
70100: PPUSH
70101: CALL_OW 250
70105: STR
70106: PUSH
70107: LD_STRING , 
70109: STR
70110: PUSH
70111: LD_VAR 0 3
70115: PPUSH
70116: CALL_OW 251
70120: STR
70121: PUSH
70122: LD_STRING , 
70124: STR
70125: PUSH
70126: LD_VAR 0 3
70130: PPUSH
70131: CALL_OW 254
70135: STR
70136: PUSH
70137: LD_STRING , 
70139: STR
70140: PUSH
70141: LD_VAR 0 3
70145: PPUSH
70146: LD_INT 1
70148: PPUSH
70149: CALL_OW 268
70153: STR
70154: PUSH
70155: LD_STRING , 
70157: STR
70158: PUSH
70159: LD_VAR 0 3
70163: PPUSH
70164: LD_INT 2
70166: PPUSH
70167: CALL_OW 268
70171: STR
70172: PUSH
70173: LD_STRING ],
70175: STR
70176: PPUSH
70177: CALL_OW 561
// end ;
70181: GO 70075
70183: POP
70184: POP
// AddToLog ( ]; ) ;
70185: LD_STRING ];
70187: PPUSH
70188: CALL_OW 561
// end ;
70192: LD_VAR 0 2
70196: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
70197: LD_INT 0
70199: PPUSH
70200: PPUSH
70201: PPUSH
70202: PPUSH
70203: PPUSH
// if not area or not rate or not max then
70204: LD_VAR 0 1
70208: NOT
70209: PUSH
70210: LD_VAR 0 2
70214: NOT
70215: OR
70216: PUSH
70217: LD_VAR 0 4
70221: NOT
70222: OR
70223: IFFALSE 70227
// exit ;
70225: GO 70419
// while 1 do
70227: LD_INT 1
70229: IFFALSE 70419
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
70231: LD_ADDR_VAR 0 9
70235: PUSH
70236: LD_VAR 0 1
70240: PPUSH
70241: LD_INT 1
70243: PPUSH
70244: CALL_OW 287
70248: PUSH
70249: LD_INT 10
70251: MUL
70252: ST_TO_ADDR
// r := rate / 10 ;
70253: LD_ADDR_VAR 0 7
70257: PUSH
70258: LD_VAR 0 2
70262: PUSH
70263: LD_INT 10
70265: DIVREAL
70266: ST_TO_ADDR
// time := 1 1$00 ;
70267: LD_ADDR_VAR 0 8
70271: PUSH
70272: LD_INT 2100
70274: ST_TO_ADDR
// if amount < min then
70275: LD_VAR 0 9
70279: PUSH
70280: LD_VAR 0 3
70284: LESS
70285: IFFALSE 70303
// r := r * 2 else
70287: LD_ADDR_VAR 0 7
70291: PUSH
70292: LD_VAR 0 7
70296: PUSH
70297: LD_INT 2
70299: MUL
70300: ST_TO_ADDR
70301: GO 70329
// if amount > max then
70303: LD_VAR 0 9
70307: PUSH
70308: LD_VAR 0 4
70312: GREATER
70313: IFFALSE 70329
// r := r / 2 ;
70315: LD_ADDR_VAR 0 7
70319: PUSH
70320: LD_VAR 0 7
70324: PUSH
70325: LD_INT 2
70327: DIVREAL
70328: ST_TO_ADDR
// time := time / r ;
70329: LD_ADDR_VAR 0 8
70333: PUSH
70334: LD_VAR 0 8
70338: PUSH
70339: LD_VAR 0 7
70343: DIVREAL
70344: ST_TO_ADDR
// if time < 0 then
70345: LD_VAR 0 8
70349: PUSH
70350: LD_INT 0
70352: LESS
70353: IFFALSE 70370
// time := time * - 1 ;
70355: LD_ADDR_VAR 0 8
70359: PUSH
70360: LD_VAR 0 8
70364: PUSH
70365: LD_INT 1
70367: NEG
70368: MUL
70369: ST_TO_ADDR
// wait ( time ) ;
70370: LD_VAR 0 8
70374: PPUSH
70375: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
70379: LD_INT 35
70381: PPUSH
70382: LD_INT 875
70384: PPUSH
70385: CALL_OW 12
70389: PPUSH
70390: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
70394: LD_INT 1
70396: PPUSH
70397: LD_INT 5
70399: PPUSH
70400: CALL_OW 12
70404: PPUSH
70405: LD_VAR 0 1
70409: PPUSH
70410: LD_INT 1
70412: PPUSH
70413: CALL_OW 55
// end ;
70417: GO 70227
// end ;
70419: LD_VAR 0 5
70423: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
70424: LD_INT 0
70426: PPUSH
70427: PPUSH
70428: PPUSH
70429: PPUSH
70430: PPUSH
70431: PPUSH
70432: PPUSH
70433: PPUSH
// if not turrets or not factories then
70434: LD_VAR 0 1
70438: NOT
70439: PUSH
70440: LD_VAR 0 2
70444: NOT
70445: OR
70446: IFFALSE 70450
// exit ;
70448: GO 70757
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
70450: LD_ADDR_VAR 0 10
70454: PUSH
70455: LD_INT 5
70457: PUSH
70458: LD_INT 6
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 2
70467: PUSH
70468: LD_INT 4
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 3
70477: PUSH
70478: LD_INT 5
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: EMPTY
70486: LIST
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 24
70492: PUSH
70493: LD_INT 25
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 23
70502: PUSH
70503: LD_INT 27
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: EMPTY
70511: LIST
70512: LIST
70513: PUSH
70514: LD_INT 42
70516: PUSH
70517: LD_INT 43
70519: PUSH
70520: EMPTY
70521: LIST
70522: LIST
70523: PUSH
70524: LD_INT 44
70526: PUSH
70527: LD_INT 46
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 45
70536: PUSH
70537: LD_INT 47
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: EMPTY
70545: LIST
70546: LIST
70547: LIST
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: LIST
70553: ST_TO_ADDR
// result := [ ] ;
70554: LD_ADDR_VAR 0 3
70558: PUSH
70559: EMPTY
70560: ST_TO_ADDR
// for i in turrets do
70561: LD_ADDR_VAR 0 4
70565: PUSH
70566: LD_VAR 0 1
70570: PUSH
70571: FOR_IN
70572: IFFALSE 70755
// begin nat := GetNation ( i ) ;
70574: LD_ADDR_VAR 0 7
70578: PUSH
70579: LD_VAR 0 4
70583: PPUSH
70584: CALL_OW 248
70588: ST_TO_ADDR
// weapon := 0 ;
70589: LD_ADDR_VAR 0 8
70593: PUSH
70594: LD_INT 0
70596: ST_TO_ADDR
// if not nat then
70597: LD_VAR 0 7
70601: NOT
70602: IFFALSE 70606
// continue ;
70604: GO 70571
// for j in list [ nat ] do
70606: LD_ADDR_VAR 0 5
70610: PUSH
70611: LD_VAR 0 10
70615: PUSH
70616: LD_VAR 0 7
70620: ARRAY
70621: PUSH
70622: FOR_IN
70623: IFFALSE 70664
// if GetBWeapon ( i ) = j [ 1 ] then
70625: LD_VAR 0 4
70629: PPUSH
70630: CALL_OW 269
70634: PUSH
70635: LD_VAR 0 5
70639: PUSH
70640: LD_INT 1
70642: ARRAY
70643: EQUAL
70644: IFFALSE 70662
// begin weapon := j [ 2 ] ;
70646: LD_ADDR_VAR 0 8
70650: PUSH
70651: LD_VAR 0 5
70655: PUSH
70656: LD_INT 2
70658: ARRAY
70659: ST_TO_ADDR
// break ;
70660: GO 70664
// end ;
70662: GO 70622
70664: POP
70665: POP
// if not weapon then
70666: LD_VAR 0 8
70670: NOT
70671: IFFALSE 70675
// continue ;
70673: GO 70571
// for k in factories do
70675: LD_ADDR_VAR 0 6
70679: PUSH
70680: LD_VAR 0 2
70684: PUSH
70685: FOR_IN
70686: IFFALSE 70751
// begin weapons := AvailableWeaponList ( k ) ;
70688: LD_ADDR_VAR 0 9
70692: PUSH
70693: LD_VAR 0 6
70697: PPUSH
70698: CALL_OW 478
70702: ST_TO_ADDR
// if not weapons then
70703: LD_VAR 0 9
70707: NOT
70708: IFFALSE 70712
// continue ;
70710: GO 70685
// if weapon in weapons then
70712: LD_VAR 0 8
70716: PUSH
70717: LD_VAR 0 9
70721: IN
70722: IFFALSE 70749
// begin result := [ i , weapon ] ;
70724: LD_ADDR_VAR 0 3
70728: PUSH
70729: LD_VAR 0 4
70733: PUSH
70734: LD_VAR 0 8
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: ST_TO_ADDR
// exit ;
70743: POP
70744: POP
70745: POP
70746: POP
70747: GO 70757
// end ; end ;
70749: GO 70685
70751: POP
70752: POP
// end ;
70753: GO 70571
70755: POP
70756: POP
// end ;
70757: LD_VAR 0 3
70761: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
70762: LD_INT 0
70764: PPUSH
// if not side or side > 8 then
70765: LD_VAR 0 3
70769: NOT
70770: PUSH
70771: LD_VAR 0 3
70775: PUSH
70776: LD_INT 8
70778: GREATER
70779: OR
70780: IFFALSE 70784
// exit ;
70782: GO 70843
// if not range then
70784: LD_VAR 0 4
70788: NOT
70789: IFFALSE 70800
// range := - 12 ;
70791: LD_ADDR_VAR 0 4
70795: PUSH
70796: LD_INT 12
70798: NEG
70799: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
70800: LD_VAR 0 1
70804: PPUSH
70805: LD_VAR 0 2
70809: PPUSH
70810: LD_VAR 0 3
70814: PPUSH
70815: LD_VAR 0 4
70819: PPUSH
70820: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
70824: LD_VAR 0 1
70828: PPUSH
70829: LD_VAR 0 2
70833: PPUSH
70834: LD_VAR 0 3
70838: PPUSH
70839: CALL_OW 331
// end ;
70843: LD_VAR 0 5
70847: RET
// export function Video ( mode ) ; begin
70848: LD_INT 0
70850: PPUSH
// ingame_video = mode ;
70851: LD_ADDR_OWVAR 52
70855: PUSH
70856: LD_VAR 0 1
70860: ST_TO_ADDR
// interface_hidden = mode ;
70861: LD_ADDR_OWVAR 54
70865: PUSH
70866: LD_VAR 0 1
70870: ST_TO_ADDR
// end ;
70871: LD_VAR 0 2
70875: RET
// export function Join ( array , element ) ; begin
70876: LD_INT 0
70878: PPUSH
// result := Replace ( array , array + 1 , element ) ;
70879: LD_ADDR_VAR 0 3
70883: PUSH
70884: LD_VAR 0 1
70888: PPUSH
70889: LD_VAR 0 1
70893: PUSH
70894: LD_INT 1
70896: PLUS
70897: PPUSH
70898: LD_VAR 0 2
70902: PPUSH
70903: CALL_OW 1
70907: ST_TO_ADDR
// end ;
70908: LD_VAR 0 3
70912: RET
// export function JoinUnion ( array , element ) ; begin
70913: LD_INT 0
70915: PPUSH
// result := array union element ;
70916: LD_ADDR_VAR 0 3
70920: PUSH
70921: LD_VAR 0 1
70925: PUSH
70926: LD_VAR 0 2
70930: UNION
70931: ST_TO_ADDR
// end ;
70932: LD_VAR 0 3
70936: RET
// export function GetBehemoths ( side ) ; begin
70937: LD_INT 0
70939: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
70940: LD_ADDR_VAR 0 2
70944: PUSH
70945: LD_INT 22
70947: PUSH
70948: LD_VAR 0 1
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 31
70959: PUSH
70960: LD_INT 25
70962: PUSH
70963: EMPTY
70964: LIST
70965: LIST
70966: PUSH
70967: EMPTY
70968: LIST
70969: LIST
70970: PPUSH
70971: CALL_OW 69
70975: ST_TO_ADDR
// end ;
70976: LD_VAR 0 2
70980: RET
// export function Shuffle ( array ) ; var i , index ; begin
70981: LD_INT 0
70983: PPUSH
70984: PPUSH
70985: PPUSH
// result := [ ] ;
70986: LD_ADDR_VAR 0 2
70990: PUSH
70991: EMPTY
70992: ST_TO_ADDR
// if not array then
70993: LD_VAR 0 1
70997: NOT
70998: IFFALSE 71002
// exit ;
71000: GO 71101
// Randomize ;
71002: CALL_OW 10
// for i = array downto 1 do
71006: LD_ADDR_VAR 0 3
71010: PUSH
71011: DOUBLE
71012: LD_VAR 0 1
71016: INC
71017: ST_TO_ADDR
71018: LD_INT 1
71020: PUSH
71021: FOR_DOWNTO
71022: IFFALSE 71099
// begin index := rand ( 1 , array ) ;
71024: LD_ADDR_VAR 0 4
71028: PUSH
71029: LD_INT 1
71031: PPUSH
71032: LD_VAR 0 1
71036: PPUSH
71037: CALL_OW 12
71041: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
71042: LD_ADDR_VAR 0 2
71046: PUSH
71047: LD_VAR 0 2
71051: PPUSH
71052: LD_VAR 0 2
71056: PUSH
71057: LD_INT 1
71059: PLUS
71060: PPUSH
71061: LD_VAR 0 1
71065: PUSH
71066: LD_VAR 0 4
71070: ARRAY
71071: PPUSH
71072: CALL_OW 2
71076: ST_TO_ADDR
// array := Delete ( array , index ) ;
71077: LD_ADDR_VAR 0 1
71081: PUSH
71082: LD_VAR 0 1
71086: PPUSH
71087: LD_VAR 0 4
71091: PPUSH
71092: CALL_OW 3
71096: ST_TO_ADDR
// end ;
71097: GO 71021
71099: POP
71100: POP
// end ;
71101: LD_VAR 0 2
71105: RET
// export function GetBaseMaterials ( base ) ; begin
71106: LD_INT 0
71108: PPUSH
// result := [ 0 , 0 , 0 ] ;
71109: LD_ADDR_VAR 0 2
71113: PUSH
71114: LD_INT 0
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: LIST
71127: ST_TO_ADDR
// if not base then
71128: LD_VAR 0 1
71132: NOT
71133: IFFALSE 71137
// exit ;
71135: GO 71186
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
71137: LD_ADDR_VAR 0 2
71141: PUSH
71142: LD_VAR 0 1
71146: PPUSH
71147: LD_INT 1
71149: PPUSH
71150: CALL_OW 275
71154: PUSH
71155: LD_VAR 0 1
71159: PPUSH
71160: LD_INT 2
71162: PPUSH
71163: CALL_OW 275
71167: PUSH
71168: LD_VAR 0 1
71172: PPUSH
71173: LD_INT 3
71175: PPUSH
71176: CALL_OW 275
71180: PUSH
71181: EMPTY
71182: LIST
71183: LIST
71184: LIST
71185: ST_TO_ADDR
// end ;
71186: LD_VAR 0 2
71190: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
71191: LD_INT 0
71193: PPUSH
71194: PPUSH
// result := array ;
71195: LD_ADDR_VAR 0 3
71199: PUSH
71200: LD_VAR 0 1
71204: ST_TO_ADDR
// if size > 0 then
71205: LD_VAR 0 2
71209: PUSH
71210: LD_INT 0
71212: GREATER
71213: IFFALSE 71259
// for i := array downto size do
71215: LD_ADDR_VAR 0 4
71219: PUSH
71220: DOUBLE
71221: LD_VAR 0 1
71225: INC
71226: ST_TO_ADDR
71227: LD_VAR 0 2
71231: PUSH
71232: FOR_DOWNTO
71233: IFFALSE 71257
// result := Delete ( result , result ) ;
71235: LD_ADDR_VAR 0 3
71239: PUSH
71240: LD_VAR 0 3
71244: PPUSH
71245: LD_VAR 0 3
71249: PPUSH
71250: CALL_OW 3
71254: ST_TO_ADDR
71255: GO 71232
71257: POP
71258: POP
// end ;
71259: LD_VAR 0 3
71263: RET
// export function ComExit ( unit ) ; var tmp ; begin
71264: LD_INT 0
71266: PPUSH
71267: PPUSH
// if not IsInUnit ( unit ) then
71268: LD_VAR 0 1
71272: PPUSH
71273: CALL_OW 310
71277: NOT
71278: IFFALSE 71282
// exit ;
71280: GO 71342
// tmp := IsInUnit ( unit ) ;
71282: LD_ADDR_VAR 0 3
71286: PUSH
71287: LD_VAR 0 1
71291: PPUSH
71292: CALL_OW 310
71296: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
71297: LD_VAR 0 3
71301: PPUSH
71302: CALL_OW 247
71306: PUSH
71307: LD_INT 2
71309: EQUAL
71310: IFFALSE 71323
// ComExitVehicle ( unit ) else
71312: LD_VAR 0 1
71316: PPUSH
71317: CALL_OW 121
71321: GO 71332
// ComExitBuilding ( unit ) ;
71323: LD_VAR 0 1
71327: PPUSH
71328: CALL_OW 122
// result := tmp ;
71332: LD_ADDR_VAR 0 2
71336: PUSH
71337: LD_VAR 0 3
71341: ST_TO_ADDR
// end ;
71342: LD_VAR 0 2
71346: RET
// export function ComExitAll ( units ) ; var i ; begin
71347: LD_INT 0
71349: PPUSH
71350: PPUSH
// if not units then
71351: LD_VAR 0 1
71355: NOT
71356: IFFALSE 71360
// exit ;
71358: GO 71386
// for i in units do
71360: LD_ADDR_VAR 0 3
71364: PUSH
71365: LD_VAR 0 1
71369: PUSH
71370: FOR_IN
71371: IFFALSE 71384
// ComExit ( i ) ;
71373: LD_VAR 0 3
71377: PPUSH
71378: CALL 71264 0 1
71382: GO 71370
71384: POP
71385: POP
// end ;
71386: LD_VAR 0 2
71390: RET
// export function ResetHc ; begin
71391: LD_INT 0
71393: PPUSH
// InitHc ;
71394: CALL_OW 19
// hc_importance := 0 ;
71398: LD_ADDR_OWVAR 32
71402: PUSH
71403: LD_INT 0
71405: ST_TO_ADDR
// end ;
71406: LD_VAR 0 1
71410: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
71411: LD_INT 0
71413: PPUSH
71414: PPUSH
71415: PPUSH
// _x := ( x1 + x2 ) div 2 ;
71416: LD_ADDR_VAR 0 6
71420: PUSH
71421: LD_VAR 0 1
71425: PUSH
71426: LD_VAR 0 3
71430: PLUS
71431: PUSH
71432: LD_INT 2
71434: DIV
71435: ST_TO_ADDR
// if _x < 0 then
71436: LD_VAR 0 6
71440: PUSH
71441: LD_INT 0
71443: LESS
71444: IFFALSE 71461
// _x := _x * - 1 ;
71446: LD_ADDR_VAR 0 6
71450: PUSH
71451: LD_VAR 0 6
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: MUL
71460: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
71461: LD_ADDR_VAR 0 7
71465: PUSH
71466: LD_VAR 0 2
71470: PUSH
71471: LD_VAR 0 4
71475: PLUS
71476: PUSH
71477: LD_INT 2
71479: DIV
71480: ST_TO_ADDR
// if _y < 0 then
71481: LD_VAR 0 7
71485: PUSH
71486: LD_INT 0
71488: LESS
71489: IFFALSE 71506
// _y := _y * - 1 ;
71491: LD_ADDR_VAR 0 7
71495: PUSH
71496: LD_VAR 0 7
71500: PUSH
71501: LD_INT 1
71503: NEG
71504: MUL
71505: ST_TO_ADDR
// result := [ _x , _y ] ;
71506: LD_ADDR_VAR 0 5
71510: PUSH
71511: LD_VAR 0 6
71515: PUSH
71516: LD_VAR 0 7
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: ST_TO_ADDR
// end ;
71525: LD_VAR 0 5
71529: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
71530: LD_INT 0
71532: PPUSH
71533: PPUSH
71534: PPUSH
71535: PPUSH
// task := GetTaskList ( unit ) ;
71536: LD_ADDR_VAR 0 7
71540: PUSH
71541: LD_VAR 0 1
71545: PPUSH
71546: CALL_OW 437
71550: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
71551: LD_VAR 0 7
71555: NOT
71556: PUSH
71557: LD_VAR 0 1
71561: PPUSH
71562: LD_VAR 0 2
71566: PPUSH
71567: CALL_OW 308
71571: NOT
71572: AND
71573: IFFALSE 71577
// exit ;
71575: GO 71695
// if IsInArea ( unit , area ) then
71577: LD_VAR 0 1
71581: PPUSH
71582: LD_VAR 0 2
71586: PPUSH
71587: CALL_OW 308
71591: IFFALSE 71609
// begin ComMoveToArea ( unit , goAway ) ;
71593: LD_VAR 0 1
71597: PPUSH
71598: LD_VAR 0 3
71602: PPUSH
71603: CALL_OW 113
// exit ;
71607: GO 71695
// end ; if task [ 1 ] [ 1 ] <> M then
71609: LD_VAR 0 7
71613: PUSH
71614: LD_INT 1
71616: ARRAY
71617: PUSH
71618: LD_INT 1
71620: ARRAY
71621: PUSH
71622: LD_STRING M
71624: NONEQUAL
71625: IFFALSE 71629
// exit ;
71627: GO 71695
// x := task [ 1 ] [ 2 ] ;
71629: LD_ADDR_VAR 0 5
71633: PUSH
71634: LD_VAR 0 7
71638: PUSH
71639: LD_INT 1
71641: ARRAY
71642: PUSH
71643: LD_INT 2
71645: ARRAY
71646: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
71647: LD_ADDR_VAR 0 6
71651: PUSH
71652: LD_VAR 0 7
71656: PUSH
71657: LD_INT 1
71659: ARRAY
71660: PUSH
71661: LD_INT 3
71663: ARRAY
71664: ST_TO_ADDR
// if InArea ( x , y , area ) then
71665: LD_VAR 0 5
71669: PPUSH
71670: LD_VAR 0 6
71674: PPUSH
71675: LD_VAR 0 2
71679: PPUSH
71680: CALL_OW 309
71684: IFFALSE 71695
// ComStop ( unit ) ;
71686: LD_VAR 0 1
71690: PPUSH
71691: CALL_OW 141
// end ;
71695: LD_VAR 0 4
71699: RET
// export function Abs ( value ) ; begin
71700: LD_INT 0
71702: PPUSH
// result := value ;
71703: LD_ADDR_VAR 0 2
71707: PUSH
71708: LD_VAR 0 1
71712: ST_TO_ADDR
// if value < 0 then
71713: LD_VAR 0 1
71717: PUSH
71718: LD_INT 0
71720: LESS
71721: IFFALSE 71738
// result := value * - 1 ;
71723: LD_ADDR_VAR 0 2
71727: PUSH
71728: LD_VAR 0 1
71732: PUSH
71733: LD_INT 1
71735: NEG
71736: MUL
71737: ST_TO_ADDR
// end ;
71738: LD_VAR 0 2
71742: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
71743: LD_INT 0
71745: PPUSH
71746: PPUSH
71747: PPUSH
71748: PPUSH
71749: PPUSH
71750: PPUSH
71751: PPUSH
71752: PPUSH
// if not unit or not building then
71753: LD_VAR 0 1
71757: NOT
71758: PUSH
71759: LD_VAR 0 2
71763: NOT
71764: OR
71765: IFFALSE 71769
// exit ;
71767: GO 71995
// x := GetX ( building ) ;
71769: LD_ADDR_VAR 0 4
71773: PUSH
71774: LD_VAR 0 2
71778: PPUSH
71779: CALL_OW 250
71783: ST_TO_ADDR
// y := GetY ( building ) ;
71784: LD_ADDR_VAR 0 6
71788: PUSH
71789: LD_VAR 0 2
71793: PPUSH
71794: CALL_OW 251
71798: ST_TO_ADDR
// d := GetDir ( building ) ;
71799: LD_ADDR_VAR 0 8
71803: PUSH
71804: LD_VAR 0 2
71808: PPUSH
71809: CALL_OW 254
71813: ST_TO_ADDR
// r := 4 ;
71814: LD_ADDR_VAR 0 9
71818: PUSH
71819: LD_INT 4
71821: ST_TO_ADDR
// for i := 1 to 5 do
71822: LD_ADDR_VAR 0 10
71826: PUSH
71827: DOUBLE
71828: LD_INT 1
71830: DEC
71831: ST_TO_ADDR
71832: LD_INT 5
71834: PUSH
71835: FOR_TO
71836: IFFALSE 71993
// begin _x := ShiftX ( x , d , r + i ) ;
71838: LD_ADDR_VAR 0 5
71842: PUSH
71843: LD_VAR 0 4
71847: PPUSH
71848: LD_VAR 0 8
71852: PPUSH
71853: LD_VAR 0 9
71857: PUSH
71858: LD_VAR 0 10
71862: PLUS
71863: PPUSH
71864: CALL_OW 272
71868: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
71869: LD_ADDR_VAR 0 7
71873: PUSH
71874: LD_VAR 0 6
71878: PPUSH
71879: LD_VAR 0 8
71883: PPUSH
71884: LD_VAR 0 9
71888: PUSH
71889: LD_VAR 0 10
71893: PLUS
71894: PPUSH
71895: CALL_OW 273
71899: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
71900: LD_VAR 0 5
71904: PPUSH
71905: LD_VAR 0 7
71909: PPUSH
71910: CALL_OW 488
71914: PUSH
71915: LD_VAR 0 5
71919: PPUSH
71920: LD_VAR 0 7
71924: PPUSH
71925: CALL_OW 428
71929: PPUSH
71930: CALL_OW 247
71934: PUSH
71935: LD_INT 3
71937: PUSH
71938: LD_INT 2
71940: PUSH
71941: EMPTY
71942: LIST
71943: LIST
71944: IN
71945: NOT
71946: AND
71947: IFFALSE 71991
// begin ComMoveXY ( unit , _x , _y ) ;
71949: LD_VAR 0 1
71953: PPUSH
71954: LD_VAR 0 5
71958: PPUSH
71959: LD_VAR 0 7
71963: PPUSH
71964: CALL_OW 111
// result := [ _x , _y ] ;
71968: LD_ADDR_VAR 0 3
71972: PUSH
71973: LD_VAR 0 5
71977: PUSH
71978: LD_VAR 0 7
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: ST_TO_ADDR
// exit ;
71987: POP
71988: POP
71989: GO 71995
// end ; end ;
71991: GO 71835
71993: POP
71994: POP
// end ;
71995: LD_VAR 0 3
71999: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
72000: LD_INT 0
72002: PPUSH
72003: PPUSH
72004: PPUSH
// result := 0 ;
72005: LD_ADDR_VAR 0 3
72009: PUSH
72010: LD_INT 0
72012: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
72013: LD_VAR 0 1
72017: PUSH
72018: LD_INT 0
72020: LESS
72021: PUSH
72022: LD_VAR 0 1
72026: PUSH
72027: LD_INT 8
72029: GREATER
72030: OR
72031: PUSH
72032: LD_VAR 0 2
72036: PUSH
72037: LD_INT 0
72039: LESS
72040: OR
72041: PUSH
72042: LD_VAR 0 2
72046: PUSH
72047: LD_INT 8
72049: GREATER
72050: OR
72051: IFFALSE 72055
// exit ;
72053: GO 72130
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
72055: LD_ADDR_VAR 0 4
72059: PUSH
72060: LD_INT 22
72062: PUSH
72063: LD_VAR 0 2
72067: PUSH
72068: EMPTY
72069: LIST
72070: LIST
72071: PPUSH
72072: CALL_OW 69
72076: PUSH
72077: FOR_IN
72078: IFFALSE 72128
// begin un := UnitShoot ( i ) ;
72080: LD_ADDR_VAR 0 5
72084: PUSH
72085: LD_VAR 0 4
72089: PPUSH
72090: CALL_OW 504
72094: ST_TO_ADDR
// if GetSide ( un ) = side1 then
72095: LD_VAR 0 5
72099: PPUSH
72100: CALL_OW 255
72104: PUSH
72105: LD_VAR 0 1
72109: EQUAL
72110: IFFALSE 72126
// begin result := un ;
72112: LD_ADDR_VAR 0 3
72116: PUSH
72117: LD_VAR 0 5
72121: ST_TO_ADDR
// exit ;
72122: POP
72123: POP
72124: GO 72130
// end ; end ;
72126: GO 72077
72128: POP
72129: POP
// end ;
72130: LD_VAR 0 3
72134: RET
// export function GetCargoBay ( units ) ; begin
72135: LD_INT 0
72137: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
72138: LD_ADDR_VAR 0 2
72142: PUSH
72143: LD_VAR 0 1
72147: PPUSH
72148: LD_INT 2
72150: PUSH
72151: LD_INT 34
72153: PUSH
72154: LD_INT 12
72156: PUSH
72157: EMPTY
72158: LIST
72159: LIST
72160: PUSH
72161: LD_INT 34
72163: PUSH
72164: LD_INT 51
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 34
72173: PUSH
72174: LD_INT 32
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 34
72183: PUSH
72184: LD_EXP 130
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: PPUSH
72200: CALL_OW 72
72204: ST_TO_ADDR
// end ;
72205: LD_VAR 0 2
72209: RET
// export function Negate ( value ) ; begin
72210: LD_INT 0
72212: PPUSH
// result := not value ;
72213: LD_ADDR_VAR 0 2
72217: PUSH
72218: LD_VAR 0 1
72222: NOT
72223: ST_TO_ADDR
// end ;
72224: LD_VAR 0 2
72228: RET
// export function Inc ( value ) ; begin
72229: LD_INT 0
72231: PPUSH
// result := value + 1 ;
72232: LD_ADDR_VAR 0 2
72236: PUSH
72237: LD_VAR 0 1
72241: PUSH
72242: LD_INT 1
72244: PLUS
72245: ST_TO_ADDR
// end ;
72246: LD_VAR 0 2
72250: RET
// export function Dec ( value ) ; begin
72251: LD_INT 0
72253: PPUSH
// result := value - 1 ;
72254: LD_ADDR_VAR 0 2
72258: PUSH
72259: LD_VAR 0 1
72263: PUSH
72264: LD_INT 1
72266: MINUS
72267: ST_TO_ADDR
// end ;
72268: LD_VAR 0 2
72272: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
72273: LD_INT 0
72275: PPUSH
72276: PPUSH
72277: PPUSH
72278: PPUSH
72279: PPUSH
72280: PPUSH
72281: PPUSH
72282: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
72283: LD_VAR 0 1
72287: PPUSH
72288: LD_VAR 0 2
72292: PPUSH
72293: CALL_OW 488
72297: NOT
72298: PUSH
72299: LD_VAR 0 3
72303: PPUSH
72304: LD_VAR 0 4
72308: PPUSH
72309: CALL_OW 488
72313: NOT
72314: OR
72315: IFFALSE 72328
// begin result := - 1 ;
72317: LD_ADDR_VAR 0 5
72321: PUSH
72322: LD_INT 1
72324: NEG
72325: ST_TO_ADDR
// exit ;
72326: GO 72563
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
72328: LD_ADDR_VAR 0 12
72332: PUSH
72333: LD_VAR 0 1
72337: PPUSH
72338: LD_VAR 0 2
72342: PPUSH
72343: LD_VAR 0 3
72347: PPUSH
72348: LD_VAR 0 4
72352: PPUSH
72353: CALL 71411 0 4
72357: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
72358: LD_ADDR_VAR 0 11
72362: PUSH
72363: LD_VAR 0 1
72367: PPUSH
72368: LD_VAR 0 2
72372: PPUSH
72373: LD_VAR 0 12
72377: PUSH
72378: LD_INT 1
72380: ARRAY
72381: PPUSH
72382: LD_VAR 0 12
72386: PUSH
72387: LD_INT 2
72389: ARRAY
72390: PPUSH
72391: CALL_OW 298
72395: ST_TO_ADDR
// distance := 9999 ;
72396: LD_ADDR_VAR 0 10
72400: PUSH
72401: LD_INT 9999
72403: ST_TO_ADDR
// for i := 0 to 5 do
72404: LD_ADDR_VAR 0 6
72408: PUSH
72409: DOUBLE
72410: LD_INT 0
72412: DEC
72413: ST_TO_ADDR
72414: LD_INT 5
72416: PUSH
72417: FOR_TO
72418: IFFALSE 72561
// begin _x := ShiftX ( x1 , i , centerDist ) ;
72420: LD_ADDR_VAR 0 7
72424: PUSH
72425: LD_VAR 0 1
72429: PPUSH
72430: LD_VAR 0 6
72434: PPUSH
72435: LD_VAR 0 11
72439: PPUSH
72440: CALL_OW 272
72444: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
72445: LD_ADDR_VAR 0 8
72449: PUSH
72450: LD_VAR 0 2
72454: PPUSH
72455: LD_VAR 0 6
72459: PPUSH
72460: LD_VAR 0 11
72464: PPUSH
72465: CALL_OW 273
72469: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
72470: LD_VAR 0 7
72474: PPUSH
72475: LD_VAR 0 8
72479: PPUSH
72480: CALL_OW 488
72484: NOT
72485: IFFALSE 72489
// continue ;
72487: GO 72417
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
72489: LD_ADDR_VAR 0 9
72493: PUSH
72494: LD_VAR 0 12
72498: PUSH
72499: LD_INT 1
72501: ARRAY
72502: PPUSH
72503: LD_VAR 0 12
72507: PUSH
72508: LD_INT 2
72510: ARRAY
72511: PPUSH
72512: LD_VAR 0 7
72516: PPUSH
72517: LD_VAR 0 8
72521: PPUSH
72522: CALL_OW 298
72526: ST_TO_ADDR
// if tmp < distance then
72527: LD_VAR 0 9
72531: PUSH
72532: LD_VAR 0 10
72536: LESS
72537: IFFALSE 72559
// begin result := i ;
72539: LD_ADDR_VAR 0 5
72543: PUSH
72544: LD_VAR 0 6
72548: ST_TO_ADDR
// distance := tmp ;
72549: LD_ADDR_VAR 0 10
72553: PUSH
72554: LD_VAR 0 9
72558: ST_TO_ADDR
// end ; end ;
72559: GO 72417
72561: POP
72562: POP
// end ;
72563: LD_VAR 0 5
72567: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72568: LD_INT 0
72570: PPUSH
72571: PPUSH
// if not driver or not IsInUnit ( driver ) then
72572: LD_VAR 0 1
72576: NOT
72577: PUSH
72578: LD_VAR 0 1
72582: PPUSH
72583: CALL_OW 310
72587: NOT
72588: OR
72589: IFFALSE 72593
// exit ;
72591: GO 72683
// vehicle := IsInUnit ( driver ) ;
72593: LD_ADDR_VAR 0 3
72597: PUSH
72598: LD_VAR 0 1
72602: PPUSH
72603: CALL_OW 310
72607: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72608: LD_VAR 0 1
72612: PPUSH
72613: LD_STRING \
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: LD_INT 0
72621: PUSH
72622: LD_INT 0
72624: PUSH
72625: LD_INT 0
72627: PUSH
72628: LD_INT 0
72630: PUSH
72631: LD_INT 0
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: PUSH
72643: LD_STRING E
72645: PUSH
72646: LD_INT 0
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: LD_VAR 0 3
72656: PUSH
72657: LD_INT 0
72659: PUSH
72660: LD_INT 0
72662: PUSH
72663: LD_INT 0
72665: PUSH
72666: EMPTY
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PPUSH
72679: CALL_OW 446
// end ;
72683: LD_VAR 0 2
72687: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
72688: LD_INT 0
72690: PPUSH
72691: PPUSH
// if not driver or not IsInUnit ( driver ) then
72692: LD_VAR 0 1
72696: NOT
72697: PUSH
72698: LD_VAR 0 1
72702: PPUSH
72703: CALL_OW 310
72707: NOT
72708: OR
72709: IFFALSE 72713
// exit ;
72711: GO 72803
// vehicle := IsInUnit ( driver ) ;
72713: LD_ADDR_VAR 0 3
72717: PUSH
72718: LD_VAR 0 1
72722: PPUSH
72723: CALL_OW 310
72727: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
72728: LD_VAR 0 1
72732: PPUSH
72733: LD_STRING \
72735: PUSH
72736: LD_INT 0
72738: PUSH
72739: LD_INT 0
72741: PUSH
72742: LD_INT 0
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: LD_INT 0
72750: PUSH
72751: LD_INT 0
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: LIST
72758: LIST
72759: LIST
72760: LIST
72761: LIST
72762: PUSH
72763: LD_STRING E
72765: PUSH
72766: LD_INT 0
72768: PUSH
72769: LD_INT 0
72771: PUSH
72772: LD_VAR 0 3
72776: PUSH
72777: LD_INT 0
72779: PUSH
72780: LD_INT 0
72782: PUSH
72783: LD_INT 0
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PPUSH
72799: CALL_OW 447
// end ;
72803: LD_VAR 0 2
72807: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
72808: LD_INT 0
72810: PPUSH
72811: PPUSH
72812: PPUSH
// tmp := [ ] ;
72813: LD_ADDR_VAR 0 5
72817: PUSH
72818: EMPTY
72819: ST_TO_ADDR
// for i in units do
72820: LD_ADDR_VAR 0 4
72824: PUSH
72825: LD_VAR 0 1
72829: PUSH
72830: FOR_IN
72831: IFFALSE 72869
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
72833: LD_ADDR_VAR 0 5
72837: PUSH
72838: LD_VAR 0 5
72842: PPUSH
72843: LD_VAR 0 5
72847: PUSH
72848: LD_INT 1
72850: PLUS
72851: PPUSH
72852: LD_VAR 0 4
72856: PPUSH
72857: CALL_OW 256
72861: PPUSH
72862: CALL_OW 2
72866: ST_TO_ADDR
72867: GO 72830
72869: POP
72870: POP
// if not tmp then
72871: LD_VAR 0 5
72875: NOT
72876: IFFALSE 72880
// exit ;
72878: GO 72928
// if asc then
72880: LD_VAR 0 2
72884: IFFALSE 72908
// result := SortListByListAsc ( units , tmp ) else
72886: LD_ADDR_VAR 0 3
72890: PUSH
72891: LD_VAR 0 1
72895: PPUSH
72896: LD_VAR 0 5
72900: PPUSH
72901: CALL_OW 76
72905: ST_TO_ADDR
72906: GO 72928
// result := SortListByListDesc ( units , tmp ) ;
72908: LD_ADDR_VAR 0 3
72912: PUSH
72913: LD_VAR 0 1
72917: PPUSH
72918: LD_VAR 0 5
72922: PPUSH
72923: CALL_OW 77
72927: ST_TO_ADDR
// end ;
72928: LD_VAR 0 3
72932: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
72933: LD_INT 0
72935: PPUSH
72936: PPUSH
// task := GetTaskList ( mech ) ;
72937: LD_ADDR_VAR 0 4
72941: PUSH
72942: LD_VAR 0 1
72946: PPUSH
72947: CALL_OW 437
72951: ST_TO_ADDR
// if not task then
72952: LD_VAR 0 4
72956: NOT
72957: IFFALSE 72961
// exit ;
72959: GO 73003
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
72961: LD_ADDR_VAR 0 3
72965: PUSH
72966: LD_VAR 0 4
72970: PUSH
72971: LD_INT 1
72973: ARRAY
72974: PUSH
72975: LD_INT 1
72977: ARRAY
72978: PUSH
72979: LD_STRING r
72981: EQUAL
72982: PUSH
72983: LD_VAR 0 4
72987: PUSH
72988: LD_INT 1
72990: ARRAY
72991: PUSH
72992: LD_INT 4
72994: ARRAY
72995: PUSH
72996: LD_VAR 0 2
73000: EQUAL
73001: AND
73002: ST_TO_ADDR
// end ;
73003: LD_VAR 0 3
73007: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
73008: LD_INT 0
73010: PPUSH
// SetDir ( unit , d ) ;
73011: LD_VAR 0 1
73015: PPUSH
73016: LD_VAR 0 4
73020: PPUSH
73021: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
73025: LD_VAR 0 1
73029: PPUSH
73030: LD_VAR 0 2
73034: PPUSH
73035: LD_VAR 0 3
73039: PPUSH
73040: LD_VAR 0 5
73044: PPUSH
73045: CALL_OW 48
// end ;
73049: LD_VAR 0 6
73053: RET
// export function ToNaturalNumber ( number ) ; begin
73054: LD_INT 0
73056: PPUSH
// result := number div 1 ;
73057: LD_ADDR_VAR 0 2
73061: PUSH
73062: LD_VAR 0 1
73066: PUSH
73067: LD_INT 1
73069: DIV
73070: ST_TO_ADDR
// if number < 0 then
73071: LD_VAR 0 1
73075: PUSH
73076: LD_INT 0
73078: LESS
73079: IFFALSE 73089
// result := 0 ;
73081: LD_ADDR_VAR 0 2
73085: PUSH
73086: LD_INT 0
73088: ST_TO_ADDR
// end ;
73089: LD_VAR 0 2
73093: RET
// export function SortByClass ( units , class ) ; var un ; begin
73094: LD_INT 0
73096: PPUSH
73097: PPUSH
// if not units or not class then
73098: LD_VAR 0 1
73102: NOT
73103: PUSH
73104: LD_VAR 0 2
73108: NOT
73109: OR
73110: IFFALSE 73114
// exit ;
73112: GO 73209
// result := [ ] ;
73114: LD_ADDR_VAR 0 3
73118: PUSH
73119: EMPTY
73120: ST_TO_ADDR
// for un in units do
73121: LD_ADDR_VAR 0 4
73125: PUSH
73126: LD_VAR 0 1
73130: PUSH
73131: FOR_IN
73132: IFFALSE 73207
// if GetClass ( un ) = class then
73134: LD_VAR 0 4
73138: PPUSH
73139: CALL_OW 257
73143: PUSH
73144: LD_VAR 0 2
73148: EQUAL
73149: IFFALSE 73176
// result := Insert ( result , 1 , un ) else
73151: LD_ADDR_VAR 0 3
73155: PUSH
73156: LD_VAR 0 3
73160: PPUSH
73161: LD_INT 1
73163: PPUSH
73164: LD_VAR 0 4
73168: PPUSH
73169: CALL_OW 2
73173: ST_TO_ADDR
73174: GO 73205
// result := Replace ( result , result + 1 , un ) ;
73176: LD_ADDR_VAR 0 3
73180: PUSH
73181: LD_VAR 0 3
73185: PPUSH
73186: LD_VAR 0 3
73190: PUSH
73191: LD_INT 1
73193: PLUS
73194: PPUSH
73195: LD_VAR 0 4
73199: PPUSH
73200: CALL_OW 1
73204: ST_TO_ADDR
73205: GO 73131
73207: POP
73208: POP
// end ;
73209: LD_VAR 0 3
73213: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
73214: LD_INT 0
73216: PPUSH
73217: PPUSH
73218: PPUSH
73219: PPUSH
73220: PPUSH
73221: PPUSH
73222: PPUSH
// result := [ ] ;
73223: LD_ADDR_VAR 0 4
73227: PUSH
73228: EMPTY
73229: ST_TO_ADDR
// if x - r < 0 then
73230: LD_VAR 0 1
73234: PUSH
73235: LD_VAR 0 3
73239: MINUS
73240: PUSH
73241: LD_INT 0
73243: LESS
73244: IFFALSE 73256
// min_x := 0 else
73246: LD_ADDR_VAR 0 8
73250: PUSH
73251: LD_INT 0
73253: ST_TO_ADDR
73254: GO 73272
// min_x := x - r ;
73256: LD_ADDR_VAR 0 8
73260: PUSH
73261: LD_VAR 0 1
73265: PUSH
73266: LD_VAR 0 3
73270: MINUS
73271: ST_TO_ADDR
// if y - r < 0 then
73272: LD_VAR 0 2
73276: PUSH
73277: LD_VAR 0 3
73281: MINUS
73282: PUSH
73283: LD_INT 0
73285: LESS
73286: IFFALSE 73298
// min_y := 0 else
73288: LD_ADDR_VAR 0 7
73292: PUSH
73293: LD_INT 0
73295: ST_TO_ADDR
73296: GO 73314
// min_y := y - r ;
73298: LD_ADDR_VAR 0 7
73302: PUSH
73303: LD_VAR 0 2
73307: PUSH
73308: LD_VAR 0 3
73312: MINUS
73313: ST_TO_ADDR
// max_x := x + r ;
73314: LD_ADDR_VAR 0 9
73318: PUSH
73319: LD_VAR 0 1
73323: PUSH
73324: LD_VAR 0 3
73328: PLUS
73329: ST_TO_ADDR
// max_y := y + r ;
73330: LD_ADDR_VAR 0 10
73334: PUSH
73335: LD_VAR 0 2
73339: PUSH
73340: LD_VAR 0 3
73344: PLUS
73345: ST_TO_ADDR
// for _x = min_x to max_x do
73346: LD_ADDR_VAR 0 5
73350: PUSH
73351: DOUBLE
73352: LD_VAR 0 8
73356: DEC
73357: ST_TO_ADDR
73358: LD_VAR 0 9
73362: PUSH
73363: FOR_TO
73364: IFFALSE 73465
// for _y = min_y to max_y do
73366: LD_ADDR_VAR 0 6
73370: PUSH
73371: DOUBLE
73372: LD_VAR 0 7
73376: DEC
73377: ST_TO_ADDR
73378: LD_VAR 0 10
73382: PUSH
73383: FOR_TO
73384: IFFALSE 73461
// begin if not ValidHex ( _x , _y ) then
73386: LD_VAR 0 5
73390: PPUSH
73391: LD_VAR 0 6
73395: PPUSH
73396: CALL_OW 488
73400: NOT
73401: IFFALSE 73405
// continue ;
73403: GO 73383
// if GetResourceTypeXY ( _x , _y ) then
73405: LD_VAR 0 5
73409: PPUSH
73410: LD_VAR 0 6
73414: PPUSH
73415: CALL_OW 283
73419: IFFALSE 73459
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
73421: LD_ADDR_VAR 0 4
73425: PUSH
73426: LD_VAR 0 4
73430: PPUSH
73431: LD_VAR 0 4
73435: PUSH
73436: LD_INT 1
73438: PLUS
73439: PPUSH
73440: LD_VAR 0 5
73444: PUSH
73445: LD_VAR 0 6
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PPUSH
73454: CALL_OW 1
73458: ST_TO_ADDR
// end ;
73459: GO 73383
73461: POP
73462: POP
73463: GO 73363
73465: POP
73466: POP
// end ;
73467: LD_VAR 0 4
73471: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
73472: LD_INT 0
73474: PPUSH
73475: PPUSH
73476: PPUSH
73477: PPUSH
73478: PPUSH
73479: PPUSH
73480: PPUSH
73481: PPUSH
// if not units then
73482: LD_VAR 0 1
73486: NOT
73487: IFFALSE 73491
// exit ;
73489: GO 73916
// result := UnitFilter ( units , [ f_ok ] ) ;
73491: LD_ADDR_VAR 0 3
73495: PUSH
73496: LD_VAR 0 1
73500: PPUSH
73501: LD_INT 50
73503: PUSH
73504: EMPTY
73505: LIST
73506: PPUSH
73507: CALL_OW 72
73511: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
73512: LD_ADDR_VAR 0 8
73516: PUSH
73517: LD_VAR 0 1
73521: PUSH
73522: LD_INT 1
73524: ARRAY
73525: PPUSH
73526: CALL_OW 255
73530: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
73531: LD_ADDR_VAR 0 10
73535: PUSH
73536: LD_INT 29
73538: PUSH
73539: LD_EXP 133
73543: PUSH
73544: EMPTY
73545: LIST
73546: LIST
73547: ST_TO_ADDR
// if not result then
73548: LD_VAR 0 3
73552: NOT
73553: IFFALSE 73557
// exit ;
73555: GO 73916
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
73557: LD_ADDR_VAR 0 5
73561: PUSH
73562: LD_INT 81
73564: PUSH
73565: LD_VAR 0 8
73569: PUSH
73570: EMPTY
73571: LIST
73572: LIST
73573: PPUSH
73574: CALL_OW 69
73578: ST_TO_ADDR
// for i in result do
73579: LD_ADDR_VAR 0 4
73583: PUSH
73584: LD_VAR 0 3
73588: PUSH
73589: FOR_IN
73590: IFFALSE 73914
// begin tag := GetTag ( i ) + 1 ;
73592: LD_ADDR_VAR 0 9
73596: PUSH
73597: LD_VAR 0 4
73601: PPUSH
73602: CALL_OW 110
73606: PUSH
73607: LD_INT 1
73609: PLUS
73610: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
73611: LD_ADDR_VAR 0 7
73615: PUSH
73616: LD_VAR 0 4
73620: PPUSH
73621: CALL_OW 250
73625: PPUSH
73626: LD_VAR 0 4
73630: PPUSH
73631: CALL_OW 251
73635: PPUSH
73636: LD_INT 6
73638: PPUSH
73639: CALL 73214 0 3
73643: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
73644: LD_VAR 0 7
73648: PUSH
73649: LD_VAR 0 4
73653: PPUSH
73654: CALL_OW 264
73658: PUSH
73659: LD_VAR 0 10
73663: IN
73664: NOT
73665: AND
73666: IFFALSE 73705
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
73668: LD_VAR 0 4
73672: PPUSH
73673: LD_VAR 0 7
73677: PUSH
73678: LD_INT 1
73680: ARRAY
73681: PUSH
73682: LD_INT 1
73684: ARRAY
73685: PPUSH
73686: LD_VAR 0 7
73690: PUSH
73691: LD_INT 1
73693: ARRAY
73694: PUSH
73695: LD_INT 2
73697: ARRAY
73698: PPUSH
73699: CALL_OW 116
73703: GO 73912
// if path > tag then
73705: LD_VAR 0 2
73709: PUSH
73710: LD_VAR 0 9
73714: GREATER
73715: IFFALSE 73882
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
73717: LD_ADDR_VAR 0 6
73721: PUSH
73722: LD_VAR 0 5
73726: PPUSH
73727: LD_INT 91
73729: PUSH
73730: LD_VAR 0 4
73734: PUSH
73735: LD_INT 12
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: LIST
73742: PPUSH
73743: CALL_OW 72
73747: ST_TO_ADDR
// if nearEnemy then
73748: LD_VAR 0 6
73752: IFFALSE 73780
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
73754: LD_VAR 0 4
73758: PPUSH
73759: LD_VAR 0 6
73763: PPUSH
73764: LD_VAR 0 4
73768: PPUSH
73769: CALL_OW 74
73773: PPUSH
73774: CALL_OW 115
73778: GO 73880
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
73780: LD_VAR 0 4
73784: PPUSH
73785: LD_VAR 0 2
73789: PUSH
73790: LD_VAR 0 9
73794: ARRAY
73795: PUSH
73796: LD_INT 1
73798: ARRAY
73799: PPUSH
73800: LD_VAR 0 2
73804: PUSH
73805: LD_VAR 0 9
73809: ARRAY
73810: PUSH
73811: LD_INT 2
73813: ARRAY
73814: PPUSH
73815: CALL_OW 297
73819: PUSH
73820: LD_INT 6
73822: GREATER
73823: IFFALSE 73866
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
73825: LD_VAR 0 4
73829: PPUSH
73830: LD_VAR 0 2
73834: PUSH
73835: LD_VAR 0 9
73839: ARRAY
73840: PUSH
73841: LD_INT 1
73843: ARRAY
73844: PPUSH
73845: LD_VAR 0 2
73849: PUSH
73850: LD_VAR 0 9
73854: ARRAY
73855: PUSH
73856: LD_INT 2
73858: ARRAY
73859: PPUSH
73860: CALL_OW 114
73864: GO 73880
// SetTag ( i , tag ) ;
73866: LD_VAR 0 4
73870: PPUSH
73871: LD_VAR 0 9
73875: PPUSH
73876: CALL_OW 109
// end else
73880: GO 73912
// if enemy then
73882: LD_VAR 0 5
73886: IFFALSE 73912
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
73888: LD_VAR 0 4
73892: PPUSH
73893: LD_VAR 0 5
73897: PPUSH
73898: LD_VAR 0 4
73902: PPUSH
73903: CALL_OW 74
73907: PPUSH
73908: CALL_OW 115
// end ;
73912: GO 73589
73914: POP
73915: POP
// end ;
73916: LD_VAR 0 3
73920: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
73921: LD_INT 0
73923: PPUSH
73924: PPUSH
73925: PPUSH
// if not unit or IsInUnit ( unit ) then
73926: LD_VAR 0 1
73930: NOT
73931: PUSH
73932: LD_VAR 0 1
73936: PPUSH
73937: CALL_OW 310
73941: OR
73942: IFFALSE 73946
// exit ;
73944: GO 74037
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
73946: LD_ADDR_VAR 0 4
73950: PUSH
73951: LD_VAR 0 1
73955: PPUSH
73956: CALL_OW 250
73960: PPUSH
73961: LD_VAR 0 2
73965: PPUSH
73966: LD_INT 1
73968: PPUSH
73969: CALL_OW 272
73973: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
73974: LD_ADDR_VAR 0 5
73978: PUSH
73979: LD_VAR 0 1
73983: PPUSH
73984: CALL_OW 251
73988: PPUSH
73989: LD_VAR 0 2
73993: PPUSH
73994: LD_INT 1
73996: PPUSH
73997: CALL_OW 273
74001: ST_TO_ADDR
// if ValidHex ( x , y ) then
74002: LD_VAR 0 4
74006: PPUSH
74007: LD_VAR 0 5
74011: PPUSH
74012: CALL_OW 488
74016: IFFALSE 74037
// ComTurnXY ( unit , x , y ) ;
74018: LD_VAR 0 1
74022: PPUSH
74023: LD_VAR 0 4
74027: PPUSH
74028: LD_VAR 0 5
74032: PPUSH
74033: CALL_OW 118
// end ;
74037: LD_VAR 0 3
74041: RET
// export function SeeUnits ( side , units ) ; var i ; begin
74042: LD_INT 0
74044: PPUSH
74045: PPUSH
// result := false ;
74046: LD_ADDR_VAR 0 3
74050: PUSH
74051: LD_INT 0
74053: ST_TO_ADDR
// if not units then
74054: LD_VAR 0 2
74058: NOT
74059: IFFALSE 74063
// exit ;
74061: GO 74108
// for i in units do
74063: LD_ADDR_VAR 0 4
74067: PUSH
74068: LD_VAR 0 2
74072: PUSH
74073: FOR_IN
74074: IFFALSE 74106
// if See ( side , i ) then
74076: LD_VAR 0 1
74080: PPUSH
74081: LD_VAR 0 4
74085: PPUSH
74086: CALL_OW 292
74090: IFFALSE 74104
// begin result := true ;
74092: LD_ADDR_VAR 0 3
74096: PUSH
74097: LD_INT 1
74099: ST_TO_ADDR
// exit ;
74100: POP
74101: POP
74102: GO 74108
// end ;
74104: GO 74073
74106: POP
74107: POP
// end ;
74108: LD_VAR 0 3
74112: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
74113: LD_INT 0
74115: PPUSH
74116: PPUSH
74117: PPUSH
74118: PPUSH
// if not unit or not points then
74119: LD_VAR 0 1
74123: NOT
74124: PUSH
74125: LD_VAR 0 2
74129: NOT
74130: OR
74131: IFFALSE 74135
// exit ;
74133: GO 74225
// dist := 99999 ;
74135: LD_ADDR_VAR 0 5
74139: PUSH
74140: LD_INT 99999
74142: ST_TO_ADDR
// for i in points do
74143: LD_ADDR_VAR 0 4
74147: PUSH
74148: LD_VAR 0 2
74152: PUSH
74153: FOR_IN
74154: IFFALSE 74223
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
74156: LD_ADDR_VAR 0 6
74160: PUSH
74161: LD_VAR 0 1
74165: PPUSH
74166: LD_VAR 0 4
74170: PUSH
74171: LD_INT 1
74173: ARRAY
74174: PPUSH
74175: LD_VAR 0 4
74179: PUSH
74180: LD_INT 2
74182: ARRAY
74183: PPUSH
74184: CALL_OW 297
74188: ST_TO_ADDR
// if tmpDist < dist then
74189: LD_VAR 0 6
74193: PUSH
74194: LD_VAR 0 5
74198: LESS
74199: IFFALSE 74221
// begin result := i ;
74201: LD_ADDR_VAR 0 3
74205: PUSH
74206: LD_VAR 0 4
74210: ST_TO_ADDR
// dist := tmpDist ;
74211: LD_ADDR_VAR 0 5
74215: PUSH
74216: LD_VAR 0 6
74220: ST_TO_ADDR
// end ; end ;
74221: GO 74153
74223: POP
74224: POP
// end ; end_of_file
74225: LD_VAR 0 3
74229: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
74230: LD_VAR 0 1
74234: PPUSH
74235: LD_VAR 0 2
74239: PPUSH
74240: LD_VAR 0 3
74244: PPUSH
74245: LD_VAR 0 4
74249: PPUSH
74250: LD_VAR 0 5
74254: PPUSH
74255: LD_VAR 0 6
74259: PPUSH
74260: CALL 14881 0 6
// end ;
74264: PPOPN 6
74266: END
