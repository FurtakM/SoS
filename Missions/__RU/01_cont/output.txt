// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 282 0 0
// PrepareRussian ;
  24: CALL 11585 0 0
// PrepareAmericans ;
  28: CALL 11158 0 0
// PrepareNature ;
  32: CALL 12287 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 11
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 13
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 14
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 17
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 18
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 19
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 20
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 21
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 23
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// MissionIntro ;
 273: CALL 838 0 0
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function InitMapConfig ; begin
 282: LD_INT 0
 284: PPUSH
// BaseMapConfig ;
 285: CALL 298 0 0
// MissionMapConfig ;
 289: CALL 384 0 0
// end ;
 293: LD_VAR 0 1
 297: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 301: LD_ADDR_EXP 25
 305: PUSH
 306: LD_INT 5
 308: PUSH
 309: LD_INT 4
 311: PUSH
 312: LD_INT 2
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 324: LD_ADDR_EXP 26
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 2
 337: PUSH
 338: LD_INT 2
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: ST_TO_ADDR
// animalsAgression = 0 ;
 347: LD_ADDR_EXP 27
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// debugMode = 0 ;
 355: LD_ADDR_EXP 30
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// missionPrefix = 01_ ;
 363: LD_ADDR_EXP 28
 367: PUSH
 368: LD_STRING 01_
 370: ST_TO_ADDR
// previousMissionPrefix =  ;
 371: LD_ADDR_EXP 29
 375: PUSH
 376: LD_STRING 
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 1
 383: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 384: LD_INT 0
 386: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_INT 800
 394: PUSH
 395: LD_INT 900
 397: PUSH
 398: LD_INT 950
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 412: LD_ADDR_EXP 32
 416: PUSH
 417: LD_INT 3
 419: PPUSH
 420: LD_INT 5
 422: PPUSH
 423: CALL_OW 12
 427: PUSH
 428: LD_OWVAR 67
 432: MUL
 433: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 434: LD_ADDR_EXP 33
 438: PUSH
 439: LD_INT 5
 441: PUSH
 442: LD_INT 6
 444: PUSH
 445: LD_INT 6
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: LD_OWVAR 67
 457: ARRAY
 458: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 459: LD_ADDR_EXP 34
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_OWVAR 67
 482: ARRAY
 483: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 484: LD_ADDR_EXP 35
 488: PUSH
 489: LD_INT 78
 491: PUSH
 492: LD_INT 87
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 499: LD_ADDR_EXP 36
 503: PUSH
 504: LD_INT 72
 506: PUSH
 507: LD_INT 115
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 99
 516: PUSH
 517: LD_INT 7
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: LD_INT 131
 526: PUSH
 527: LD_INT 81
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: ST_TO_ADDR
// gnyevkoStartHP = [ 600 , 550 , 500 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 37
 543: PUSH
 544: LD_INT 600
 546: PUSH
 547: LD_INT 550
 549: PUSH
 550: LD_INT 500
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 38
 568: PUSH
 569: LD_INT 21000
 571: PUSH
 572: LD_INT 16800
 574: PUSH
 575: LD_INT 12600
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 39
 593: PUSH
 594: LD_INT 6300
 596: PUSH
 597: LD_INT 5250
 599: PUSH
 600: LD_INT 4200
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// end ;
 614: LD_VAR 0 1
 618: RET
// every 0 0$1 trigger debugMode do var i ;
 619: LD_EXP 30
 623: IFFALSE 835
 625: GO 627
 627: DISABLE
 628: LD_INT 0
 630: PPUSH
// begin enable ;
 631: ENABLE
// FogOff ( your_side ) ;
 632: LD_OWVAR 2
 636: PPUSH
 637: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 641: LD_ADDR_VAR 0 1
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_OWVAR 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 21
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PPUSH
 690: CALL_OW 69
 694: PUSH
 695: FOR_IN
 696: IFFALSE 712
// SetLives ( i , 1000 ) ;
 698: LD_VAR 0 1
 702: PPUSH
 703: LD_INT 1000
 705: PPUSH
 706: CALL_OW 234
 710: GO 695
 712: POP
 713: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 714: LD_ADDR_VAR 0 1
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_OWVAR 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 0
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 30
 746: PUSH
 747: LD_INT 1
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: CALL_OW 69
 767: PUSH
 768: FOR_IN
 769: IFFALSE 833
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 771: LD_VAR 0 1
 775: PPUSH
 776: CALL_OW 274
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: LD_INT 9999
 786: PPUSH
 787: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 274
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 9999
 806: PPUSH
 807: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 3
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// end ;
 831: GO 768
 833: POP
 834: POP
// end ; end_of_file
 835: PPOPN 1
 837: END
// export function MissionIntro ; begin
 838: LD_INT 0
 840: PPUSH
// InGameOn ;
 841: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 845: LD_EXP 35
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PUSH
 854: LD_INT 8
 856: MINUS
 857: PPUSH
 858: LD_EXP 35
 862: PUSH
 863: LD_INT 2
 865: ARRAY
 866: PUSH
 867: LD_INT 8
 869: MINUS
 870: PPUSH
 871: CALL_OW 84
// wait ( 0 0$3 ) ;
 875: LD_INT 105
 877: PPUSH
 878: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 882: LD_EXP 44
 886: PPUSH
 887: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 891: LD_EXP 44
 895: PPUSH
 896: LD_STRING D1-Bur-1
 898: PPUSH
 899: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 903: LD_EXP 44
 907: PPUSH
 908: LD_INT 94
 910: PPUSH
 911: LD_INT 89
 913: PPUSH
 914: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 918: LD_INT 94
 920: PPUSH
 921: LD_INT 89
 923: PPUSH
 924: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 928: LD_EXP 44
 932: PPUSH
 933: LD_STRING D1-Bur-1a
 935: PPUSH
 936: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 940: LD_EXP 44
 944: PPUSH
 945: LD_INT 102
 947: PPUSH
 948: LD_INT 88
 950: PPUSH
 951: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 955: LD_INT 102
 957: PPUSH
 958: LD_INT 88
 960: PPUSH
 961: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 965: LD_EXP 44
 969: PPUSH
 970: LD_STRING D1-Bur-1b
 972: PPUSH
 973: CALL_OW 88
// InGameOff ;
 977: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 981: LD_STRING M1
 983: PPUSH
 984: CALL_OW 337
// SaveForQuickRestart ;
 988: CALL_OW 22
// introEnd = true ;
 992: LD_ADDR_EXP 3
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// end ;
1000: LD_VAR 0 1
1004: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1005: LD_EXP 44
1009: PPUSH
1010: LD_INT 74
1012: PPUSH
1013: LD_INT 88
1015: PPUSH
1016: CALL_OW 297
1020: PUSH
1021: LD_INT 5
1023: LESS
1024: PUSH
1025: LD_EXP 3
1029: AND
1030: IFFALSE 1055
1032: GO 1034
1034: DISABLE
// begin spotWaterfall = true ;
1035: LD_ADDR_EXP 7
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1043: LD_EXP 44
1047: PPUSH
1048: LD_STRING DWaterfall-Bur-1
1050: PPUSH
1051: CALL_OW 88
// end ;
1055: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1056: LD_EXP 44
1060: PPUSH
1061: LD_INT 130
1063: PPUSH
1064: LD_INT 96
1066: PPUSH
1067: CALL_OW 297
1071: PUSH
1072: LD_INT 5
1074: LESS
1075: PUSH
1076: LD_EXP 3
1080: AND
1081: IFFALSE 1098
1083: GO 1085
1085: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1086: LD_EXP 44
1090: PPUSH
1091: LD_STRING DCorpse-Bur-1
1093: PPUSH
1094: CALL_OW 88
1098: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1099: LD_EXP 4
1103: NOT
1104: IFFALSE 1198
1106: GO 1108
1108: DISABLE
1109: LD_INT 0
1111: PPUSH
// begin enable ;
1112: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1113: LD_ADDR_VAR 0 1
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 25
1130: PUSH
1131: LD_INT 12
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: FOR_IN
1148: IFFALSE 1196
// if GetDistUnits ( apeman , Burlak ) < 7 then
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_EXP 44
1159: PPUSH
1160: CALL_OW 296
1164: PUSH
1165: LD_INT 7
1167: LESS
1168: IFFALSE 1194
// begin apemansContact = true ;
1170: LD_ADDR_EXP 4
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1178: LD_EXP 44
1182: PPUSH
1183: LD_STRING D2-Bur-1
1185: PPUSH
1186: CALL_OW 88
// exit ;
1190: POP
1191: POP
1192: GO 1198
// end ;
1194: GO 1147
1196: POP
1197: POP
// end ;
1198: PPOPN 1
1200: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1201: LD_EXP 5
1205: NOT
1206: IFFALSE 1322
1208: GO 1210
1210: DISABLE
1211: LD_INT 0
1213: PPUSH
1214: PPUSH
// begin enable ;
1215: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1216: LD_ADDR_VAR 0 2
1220: PUSH
1221: LD_INT 22
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: LD_INT 25
1233: PUSH
1234: LD_INT 12
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PPUSH
1245: CALL_OW 69
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1320
// if Attacks ( apeman ) then
1253: LD_VAR 0 2
1257: PPUSH
1258: CALL_OW 320
1262: IFFALSE 1318
// if GetSide ( Attacks ( apeman ) ) = 3 then
1264: LD_VAR 0 2
1268: PPUSH
1269: CALL_OW 320
1273: PPUSH
1274: CALL_OW 255
1278: PUSH
1279: LD_INT 3
1281: EQUAL
1282: IFFALSE 1318
// begin attackedByApeman = true ;
1284: LD_ADDR_EXP 5
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1292: LD_ADDR_EXP 8
1296: PUSH
1297: LD_VAR 0 2
1301: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1302: LD_EXP 44
1306: PPUSH
1307: LD_STRING D2-Bur-1a
1309: PPUSH
1310: CALL_OW 88
// exit ;
1314: POP
1315: POP
1316: GO 1322
// end ;
1318: GO 1250
1320: POP
1321: POP
// end ;
1322: PPOPN 2
1324: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1325: LD_EXP 6
1329: NOT
1330: IFFALSE 1427
1332: GO 1334
1334: DISABLE
1335: LD_INT 0
1337: PPUSH
1338: PPUSH
// begin enable ;
1339: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_INT 24
1347: PPUSH
1348: LD_INT 22
1350: PUSH
1351: LD_INT 0
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 25
1360: PUSH
1361: LD_INT 12
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 70
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1425
// if Attacks ( apeman ) then
1380: LD_VAR 0 2
1384: PPUSH
1385: CALL_OW 320
1389: IFFALSE 1423
// if GetSide ( Attacks ( apeman ) ) = 3 then
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 320
1400: PPUSH
1401: CALL_OW 255
1405: PUSH
1406: LD_INT 3
1408: EQUAL
1409: IFFALSE 1423
// begin attackedByApemanNearLake = true ;
1411: LD_ADDR_EXP 6
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// exit ;
1419: POP
1420: POP
1421: GO 1427
// end ;
1423: GO 1377
1425: POP
1426: POP
// end ;
1427: PPOPN 2
1429: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1430: LD_EXP 9
1434: PPUSH
1435: CALL_OW 303
1439: IFFALSE 1473
1441: GO 1443
1443: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1444: LD_ADDR_EXP 10
1448: PUSH
1449: LD_EXP 9
1453: PPUSH
1454: CALL_OW 250
1458: PUSH
1459: LD_EXP 9
1463: PPUSH
1464: CALL_OW 251
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: ST_TO_ADDR
1473: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1474: LD_EXP 9
1478: PPUSH
1479: CALL_OW 301
1483: PUSH
1484: LD_INT 3
1486: PPUSH
1487: LD_EXP 10
1491: PUSH
1492: LD_INT 1
1494: ARRAY
1495: PPUSH
1496: LD_EXP 10
1500: PUSH
1501: LD_INT 2
1503: ARRAY
1504: PPUSH
1505: CALL_OW 293
1509: AND
1510: IFFALSE 1917
1512: GO 1514
1514: DISABLE
1515: LD_INT 0
1517: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1518: LD_EXP 44
1522: PPUSH
1523: LD_STRING D2a-Bur-1
1525: PPUSH
1526: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1530: LD_INT 22
1532: PUSH
1533: LD_INT 3
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 69
1558: PUSH
1559: LD_INT 1
1561: EQUAL
1562: IFFALSE 1578
// Say ( Burlak , D2a-Bur-2 ) else
1564: LD_EXP 44
1568: PPUSH
1569: LD_STRING D2a-Bur-2
1571: PPUSH
1572: CALL_OW 88
1576: GO 1917
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff Gnyevko , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1578: LD_ADDR_VAR 0 1
1582: PUSH
1583: LD_INT 22
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 21
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PPUSH
1607: CALL_OW 69
1611: PUSH
1612: LD_EXP 52
1616: DIFF
1617: PPUSH
1618: LD_EXP 10
1622: PUSH
1623: LD_INT 1
1625: ARRAY
1626: PPUSH
1627: LD_EXP 10
1631: PUSH
1632: LD_INT 2
1634: ARRAY
1635: PPUSH
1636: CALL_OW 73
1640: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1641: LD_VAR 0 1
1645: PPUSH
1646: LD_EXP 10
1650: PUSH
1651: LD_INT 1
1653: ARRAY
1654: PPUSH
1655: LD_EXP 10
1659: PUSH
1660: LD_INT 2
1662: ARRAY
1663: PPUSH
1664: CALL_OW 111
// case nearUnit of Burlak :
1668: LD_VAR 0 1
1672: PUSH
1673: LD_EXP 44
1677: DOUBLE
1678: EQUAL
1679: IFTRUE 1683
1681: GO 1698
1683: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1684: LD_EXP 44
1688: PPUSH
1689: LD_STRING D3-Bur-2a
1691: PPUSH
1692: CALL_OW 88
1696: GO 1790
1698: LD_EXP 49
1702: DOUBLE
1703: EQUAL
1704: IFTRUE 1708
1706: GO 1723
1708: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1709: LD_EXP 49
1713: PPUSH
1714: LD_STRING D2a-Bel-1
1716: PPUSH
1717: CALL_OW 88
1721: GO 1790
1723: LD_EXP 51
1727: DOUBLE
1728: EQUAL
1729: IFTRUE 1733
1731: GO 1748
1733: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1734: LD_EXP 51
1738: PPUSH
1739: LD_STRING D2a-Kir-1
1741: PPUSH
1742: CALL_OW 88
1746: GO 1790
1748: POP
// if GetSex ( nearUnit ) = sex_male then
1749: LD_VAR 0 1
1753: PPUSH
1754: CALL_OW 258
1758: PUSH
1759: LD_INT 1
1761: EQUAL
1762: IFFALSE 1778
// Say ( nearUnit , D2a-RSol1-1 ) else
1764: LD_VAR 0 1
1768: PPUSH
1769: LD_STRING D2a-RSol1-1
1771: PPUSH
1772: CALL_OW 88
1776: GO 1790
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1778: LD_VAR 0 1
1782: PPUSH
1783: LD_STRING D2a-RFSol1-1
1785: PPUSH
1786: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1790: LD_EXP 52
1794: PPUSH
1795: CALL_OW 255
1799: PUSH
1800: LD_INT 3
1802: EQUAL
1803: PUSH
1804: LD_EXP 52
1808: PPUSH
1809: CALL_OW 302
1813: AND
1814: IFFALSE 1828
// Say ( Gnyevko , D2a-Gny-1 ) ;
1816: LD_EXP 52
1820: PPUSH
1821: LD_STRING D2a-Gny-1
1823: PPUSH
1824: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1828: LD_EXP 9
1832: PUSH
1833: LD_EXP 8
1837: EQUAL
1838: IFFALSE 1852
// Say ( Burlak , D3-Bur-2 ) ;
1840: LD_EXP 44
1844: PPUSH
1845: LD_STRING D3-Bur-2
1847: PPUSH
1848: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1852: LD_EXP 52
1856: PPUSH
1857: CALL_OW 255
1861: PUSH
1862: LD_INT 8
1864: EQUAL
1865: IFFALSE 1917
// begin Say ( Burlak , D12-Bur-1 ) ;
1867: LD_EXP 44
1871: PPUSH
1872: LD_STRING D12-Bur-1
1874: PPUSH
1875: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1879: LD_EXP 49
1883: PPUSH
1884: CALL_OW 255
1888: PUSH
1889: LD_INT 3
1891: EQUAL
1892: PUSH
1893: LD_EXP 49
1897: PPUSH
1898: CALL_OW 302
1902: AND
1903: IFFALSE 1917
// Say ( Belkov , D12-Bel-2 ) ;
1905: LD_EXP 49
1909: PPUSH
1910: LD_STRING D12-Bel-2
1912: PPUSH
1913: CALL_OW 88
// end ; end ; end ;
1917: PPOPN 1
1919: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1920: LD_INT 3
1922: PPUSH
1923: LD_EXP 52
1927: PPUSH
1928: CALL_OW 292
1932: IFFALSE 2470
1934: GO 1936
1936: DISABLE
1937: LD_INT 0
1939: PPUSH
1940: PPUSH
// begin SetLives ( Gnyevko , gnyevkoStartHP ) ;
1941: LD_EXP 52
1945: PPUSH
1946: LD_EXP 37
1950: PPUSH
1951: CALL_OW 234
// CenterNowOnUnits ( Gnyevko ) ;
1955: LD_EXP 52
1959: PPUSH
1960: CALL_OW 87
// DialogueOn ;
1964: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1968: LD_ADDR_VAR 0 1
1972: PUSH
1973: LD_INT 22
1975: PUSH
1976: LD_INT 3
1978: PUSH
1979: EMPTY
1980: LIST
1981: LIST
1982: PUSH
1983: LD_INT 21
1985: PUSH
1986: LD_INT 1
1988: PUSH
1989: EMPTY
1990: LIST
1991: LIST
1992: PUSH
1993: EMPTY
1994: LIST
1995: LIST
1996: PPUSH
1997: CALL_OW 69
2001: PPUSH
2002: LD_EXP 52
2006: PPUSH
2007: CALL_OW 74
2011: ST_TO_ADDR
// if nearUnit = Burlak then
2012: LD_VAR 0 1
2016: PUSH
2017: LD_EXP 44
2021: EQUAL
2022: IFFALSE 2340
// begin Say ( Burlak , D3-Bur-1 ) ;
2024: LD_EXP 44
2028: PPUSH
2029: LD_STRING D3-Bur-1
2031: PPUSH
2032: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2036: LD_EXP 52
2040: PPUSH
2041: LD_STRING D3-Gny-1
2043: PPUSH
2044: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
2048: LD_EXP 44
2052: PPUSH
2053: LD_STRING D3-Bur-2b
2055: PPUSH
2056: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2060: LD_INT 22
2062: PUSH
2063: LD_INT 3
2065: PUSH
2066: EMPTY
2067: LIST
2068: LIST
2069: PUSH
2070: LD_INT 21
2072: PUSH
2073: LD_INT 1
2075: PUSH
2076: EMPTY
2077: LIST
2078: LIST
2079: PUSH
2080: EMPTY
2081: LIST
2082: LIST
2083: PPUSH
2084: CALL_OW 69
2088: PUSH
2089: LD_INT 1
2091: EQUAL
2092: PUSH
2093: LD_EXP 13
2097: NOT
2098: AND
2099: IFFALSE 2151
// begin Say ( Burlak , D3-Bur-2c ) ;
2101: LD_EXP 44
2105: PPUSH
2106: LD_STRING D3-Bur-2c
2108: PPUSH
2109: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2113: LD_EXP 52
2117: PPUSH
2118: LD_STRING D3-Gny-2
2120: PPUSH
2121: CALL_OW 88
// DialogueOff ;
2125: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2129: LD_EXP 52
2133: PPUSH
2134: LD_INT 3
2136: PPUSH
2137: CALL_OW 235
// gnyevkoSaved = true ;
2141: LD_ADDR_EXP 11
2145: PUSH
2146: LD_INT 1
2148: ST_TO_ADDR
// exit ;
2149: GO 2470
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2151: LD_INT 22
2153: PUSH
2154: LD_INT 3
2156: PUSH
2157: EMPTY
2158: LIST
2159: LIST
2160: PUSH
2161: LD_INT 21
2163: PUSH
2164: LD_INT 1
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: PPUSH
2175: CALL_OW 69
2179: PUSH
2180: LD_INT 1
2182: GREATER
2183: PUSH
2184: LD_EXP 13
2188: OR
2189: PUSH
2190: LD_EXP 21
2194: NOT
2195: AND
2196: IFFALSE 2248
// begin Say ( Burlak , D3-Bur-2d ) ;
2198: LD_EXP 44
2202: PPUSH
2203: LD_STRING D3-Bur-2d
2205: PPUSH
2206: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2210: LD_EXP 52
2214: PPUSH
2215: LD_STRING D3-Gny-2
2217: PPUSH
2218: CALL_OW 88
// DialogueOff ;
2222: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2226: LD_EXP 52
2230: PPUSH
2231: LD_INT 3
2233: PPUSH
2234: CALL_OW 235
// gnyevkoSaved = true ;
2238: LD_ADDR_EXP 11
2242: PUSH
2243: LD_INT 1
2245: ST_TO_ADDR
// exit ;
2246: GO 2470
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2248: LD_INT 22
2250: PUSH
2251: LD_INT 3
2253: PUSH
2254: EMPTY
2255: LIST
2256: LIST
2257: PUSH
2258: LD_INT 21
2260: PUSH
2261: LD_INT 1
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: PUSH
2268: EMPTY
2269: LIST
2270: LIST
2271: PPUSH
2272: CALL_OW 69
2276: PUSH
2277: LD_INT 1
2279: GREATER
2280: PUSH
2281: LD_EXP 21
2285: AND
2286: IFFALSE 2338
// begin Say ( Burlak , D3-Bur-2e ) ;
2288: LD_EXP 44
2292: PPUSH
2293: LD_STRING D3-Bur-2e
2295: PPUSH
2296: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2300: LD_EXP 52
2304: PPUSH
2305: LD_STRING D3-Gny-2
2307: PPUSH
2308: CALL_OW 88
// DialogueOff ;
2312: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2316: LD_EXP 52
2320: PPUSH
2321: LD_INT 3
2323: PPUSH
2324: CALL_OW 235
// gnyevkoSaved = true ;
2328: LD_ADDR_EXP 11
2332: PUSH
2333: LD_INT 1
2335: ST_TO_ADDR
// exit ;
2336: GO 2470
// end ; end else
2338: GO 2470
// begin if GetSex ( nearUnit ) = sex_male then
2340: LD_VAR 0 1
2344: PPUSH
2345: CALL_OW 258
2349: PUSH
2350: LD_INT 1
2352: EQUAL
2353: IFFALSE 2369
// Say ( nearUnit , D3-RSol1-1 ) else
2355: LD_VAR 0 1
2359: PPUSH
2360: LD_STRING D3-RSol1-1
2362: PPUSH
2363: CALL_OW 88
2367: GO 2381
// Say ( nearUnit , D3-RFSol1-1 ) ;
2369: LD_VAR 0 1
2373: PPUSH
2374: LD_STRING D3-RFSol1-1
2376: PPUSH
2377: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2381: LD_EXP 52
2385: PPUSH
2386: LD_STRING D3-Gny-1
2388: PPUSH
2389: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2393: LD_VAR 0 1
2397: PPUSH
2398: CALL_OW 258
2402: PUSH
2403: LD_INT 1
2405: EQUAL
2406: IFFALSE 2422
// Say ( nearUnit , D3-RSol1-2 ) else
2408: LD_VAR 0 1
2412: PPUSH
2413: LD_STRING D3-RSol1-2
2415: PPUSH
2416: CALL_OW 88
2420: GO 2434
// Say ( nearUnit , D3-RFSol1-2 ) ;
2422: LD_VAR 0 1
2426: PPUSH
2427: LD_STRING D3-RFSol1-2
2429: PPUSH
2430: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2434: LD_EXP 52
2438: PPUSH
2439: LD_STRING D3-Gny-2a
2441: PPUSH
2442: CALL_OW 88
// DialogueOff ;
2446: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2450: LD_EXP 52
2454: PPUSH
2455: LD_INT 3
2457: PPUSH
2458: CALL_OW 235
// gnyevkoSaved = true ;
2462: LD_ADDR_EXP 11
2466: PUSH
2467: LD_INT 1
2469: ST_TO_ADDR
// end ; end ;
2470: PPOPN 2
2472: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2473: LD_EXP 11
2477: NOT
2478: PUSH
2479: LD_EXP 20
2483: NOT
2484: OR
2485: IFFALSE 2680
2487: GO 2489
2489: DISABLE
2490: LD_INT 0
2492: PPUSH
// begin enable ;
2493: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2494: LD_EXP 11
2498: NOT
2499: PUSH
2500: LD_EXP 38
2504: PUSH
2505: LD_INT 70
2507: GREATER
2508: AND
2509: IFFALSE 2587
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2511: LD_ADDR_VAR 0 1
2515: PUSH
2516: LD_INT 22
2518: PUSH
2519: LD_INT 0
2521: PUSH
2522: EMPTY
2523: LIST
2524: LIST
2525: PUSH
2526: LD_INT 25
2528: PUSH
2529: LD_INT 12
2531: PUSH
2532: EMPTY
2533: LIST
2534: LIST
2535: PUSH
2536: EMPTY
2537: LIST
2538: LIST
2539: PPUSH
2540: CALL_OW 69
2544: PUSH
2545: FOR_IN
2546: IFFALSE 2585
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2548: LD_VAR 0 1
2552: PPUSH
2553: LD_EXP 52
2557: PPUSH
2558: CALL_OW 250
2562: PPUSH
2563: LD_EXP 52
2567: PPUSH
2568: CALL_OW 251
2572: PPUSH
2573: LD_INT 10
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL 8270 0 5
2583: GO 2545
2585: POP
2586: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2587: LD_EXP 20
2591: NOT
2592: PUSH
2593: LD_EXP 39
2597: PUSH
2598: LD_INT 70
2600: GREATER
2601: AND
2602: IFFALSE 2680
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2604: LD_ADDR_VAR 0 1
2608: PUSH
2609: LD_INT 22
2611: PUSH
2612: LD_INT 0
2614: PUSH
2615: EMPTY
2616: LIST
2617: LIST
2618: PUSH
2619: LD_INT 25
2621: PUSH
2622: LD_INT 12
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: EMPTY
2630: LIST
2631: LIST
2632: PPUSH
2633: CALL_OW 69
2637: PUSH
2638: FOR_IN
2639: IFFALSE 2678
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2641: LD_VAR 0 1
2645: PPUSH
2646: LD_EXP 51
2650: PPUSH
2651: CALL_OW 250
2655: PPUSH
2656: LD_EXP 51
2660: PPUSH
2661: CALL_OW 251
2665: PPUSH
2666: LD_INT 10
2668: PPUSH
2669: LD_INT 0
2671: PPUSH
2672: CALL 8270 0 5
2676: GO 2638
2678: POP
2679: POP
// end ;
2680: PPOPN 1
2682: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2683: LD_EXP 11
2687: NOT
2688: PUSH
2689: LD_EXP 20
2693: NOT
2694: OR
2695: IFFALSE 2774
2697: GO 2699
2699: DISABLE
// begin enable ;
2700: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2701: LD_EXP 11
2705: NOT
2706: PUSH
2707: LD_EXP 38
2711: PUSH
2712: LD_INT 0
2714: GREATER
2715: AND
2716: IFFALSE 2732
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2718: LD_ADDR_EXP 38
2722: PUSH
2723: LD_EXP 38
2727: PUSH
2728: LD_INT 35
2730: MINUS
2731: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2732: LD_EXP 51
2736: PPUSH
2737: CALL_OW 305
2741: PUSH
2742: LD_EXP 20
2746: NOT
2747: AND
2748: PUSH
2749: LD_EXP 39
2753: PUSH
2754: LD_INT 0
2756: GREATER
2757: AND
2758: IFFALSE 2774
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2760: LD_ADDR_EXP 39
2764: PUSH
2765: LD_EXP 39
2769: PUSH
2770: LD_INT 35
2772: MINUS
2773: ST_TO_ADDR
// end ;
2774: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or See ( 6 , Gnyevko ) ) and not meetPokryshkin do
2775: LD_INT 3
2777: PPUSH
2778: LD_EXP 45
2782: PPUSH
2783: CALL_OW 292
2787: PUSH
2788: LD_INT 6
2790: PPUSH
2791: LD_EXP 44
2795: PPUSH
2796: CALL_OW 292
2800: OR
2801: PUSH
2802: LD_INT 6
2804: PPUSH
2805: LD_EXP 52
2809: PPUSH
2810: CALL_OW 292
2814: OR
2815: PUSH
2816: LD_EXP 13
2820: NOT
2821: AND
2822: IFFALSE 3729
2824: GO 2826
2826: DISABLE
// begin enable ;
2827: ENABLE
// InGameOn ;
2828: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2832: LD_EXP 45
2836: PPUSH
2837: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2841: LD_EXP 52
2845: PPUSH
2846: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2850: LD_EXP 44
2854: PUSH
2855: LD_EXP 52
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: PPUSH
2864: CALL_OW 200
// DialogueOn ;
2868: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2872: LD_EXP 12
2876: IFFALSE 3128
// begin meetPokryshkin = true ;
2878: LD_ADDR_EXP 13
2882: PUSH
2883: LD_INT 1
2885: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2886: LD_INT 6
2888: PPUSH
2889: LD_INT 3
2891: PPUSH
2892: CALL_OW 343
// DialogueOff ;
2896: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2900: LD_EXP 44
2904: PPUSH
2905: LD_EXP 45
2909: PPUSH
2910: CALL_OW 250
2914: PPUSH
2915: LD_EXP 45
2919: PPUSH
2920: CALL_OW 251
2924: PPUSH
2925: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2929: LD_EXP 44
2933: PPUSH
2934: LD_EXP 45
2938: PPUSH
2939: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
2943: LD_EXP 45
2947: PPUSH
2948: LD_EXP 44
2952: PPUSH
2953: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
2957: LD_EXP 52
2961: PPUSH
2962: LD_STRING D4-Gny-3
2964: PPUSH
2965: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
2969: LD_EXP 44
2973: PPUSH
2974: LD_STRING D4-Bur-3
2976: PPUSH
2977: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2981: LD_EXP 45
2985: PPUSH
2986: LD_STRING D4-Pok-4
2988: PPUSH
2989: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2993: LD_EXP 40
2997: PPUSH
2998: LD_INT 18
3000: PPUSH
3001: LD_INT 1
3003: PPUSH
3004: CALL_OW 49
// wait ( 0 0$2 ) ;
3008: LD_INT 70
3010: PPUSH
3011: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3015: LD_EXP 44
3019: PPUSH
3020: LD_STRING D4-Bur-4
3022: PPUSH
3023: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3027: LD_EXP 45
3031: PPUSH
3032: LD_STRING D4-Pok-5
3034: PPUSH
3035: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3039: LD_EXP 40
3043: PPUSH
3044: LD_STRING D4-Sol1-5
3046: PPUSH
3047: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3051: LD_EXP 45
3055: PPUSH
3056: LD_STRING D4-Pok-6
3058: PPUSH
3059: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3063: LD_EXP 45
3067: PPUSH
3068: LD_STRING D4-Pok-6a
3070: PPUSH
3071: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3075: LD_EXP 44
3079: PPUSH
3080: LD_STRING D4-Bur-6
3082: PPUSH
3083: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3087: LD_EXP 45
3091: PPUSH
3092: LD_STRING D4-Pok-7
3094: PPUSH
3095: CALL_OW 88
// DialogueOff ;
3099: CALL_OW 7
// InGameOff ;
3103: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3107: LD_STRING M2
3109: PPUSH
3110: CALL_OW 337
// goToHill = true ;
3114: LD_ADDR_EXP 14
3118: PUSH
3119: LD_INT 1
3121: ST_TO_ADDR
// MoveToHill ;
3122: CALL 10150 0 0
// exit ;
3126: GO 3729
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3128: LD_EXP 44
3132: PUSH
3133: LD_EXP 52
3137: PUSH
3138: EMPTY
3139: LIST
3140: LIST
3141: PPUSH
3142: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3146: LD_EXP 45
3150: PPUSH
3151: LD_STRING D4-Pok-1
3153: PPUSH
3154: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3158: LD_EXP 52
3162: PPUSH
3163: CALL_OW 255
3167: PUSH
3168: LD_INT 3
3170: EQUAL
3171: PUSH
3172: LD_EXP 52
3176: PPUSH
3177: CALL_OW 302
3181: AND
3182: IFFALSE 3196
// Say ( Gnyevko , D4-Gny-1 ) ;
3184: LD_EXP 52
3188: PPUSH
3189: LD_STRING D4-Gny-1
3191: PPUSH
3192: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3196: LD_EXP 44
3200: PPUSH
3201: LD_INT 22
3203: PUSH
3204: LD_INT 6
3206: PUSH
3207: EMPTY
3208: LIST
3209: LIST
3210: PUSH
3211: LD_INT 21
3213: PUSH
3214: LD_INT 1
3216: PUSH
3217: EMPTY
3218: LIST
3219: LIST
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PPUSH
3225: CALL_OW 69
3229: PPUSH
3230: LD_EXP 44
3234: PPUSH
3235: CALL_OW 74
3239: PPUSH
3240: CALL_OW 296
3244: PUSH
3245: LD_INT 8
3247: GREATER
3248: PUSH
3249: LD_EXP 44
3253: PPUSH
3254: LD_EXP 52
3258: PPUSH
3259: CALL_OW 296
3263: PUSH
3264: LD_INT 8
3266: GREATER
3267: AND
3268: PUSH
3269: LD_EXP 52
3273: PPUSH
3274: CALL_OW 255
3278: PUSH
3279: LD_INT 3
3281: EQUAL
3282: AND
3283: PUSH
3284: LD_EXP 52
3288: PPUSH
3289: CALL_OW 302
3293: AND
3294: IFFALSE 3392
// begin ComWalk ( Gnyevko ) ;
3296: LD_EXP 52
3300: PPUSH
3301: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3305: LD_EXP 45
3309: PPUSH
3310: LD_STRING D4-Pok-2
3312: PPUSH
3313: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3317: LD_EXP 52
3321: PPUSH
3322: LD_STRING D4-Gny-2
3324: PPUSH
3325: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3329: LD_EXP 45
3333: PPUSH
3334: LD_STRING D4-Pok-3
3336: PPUSH
3337: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3341: LD_ADDR_EXP 12
3345: PUSH
3346: LD_INT 1
3348: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3349: LD_EXP 52
3353: PPUSH
3354: LD_INT 6
3356: PPUSH
3357: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3361: LD_EXP 52
3365: PPUSH
3366: LD_EXP 45
3370: PPUSH
3371: CALL_OW 250
3375: PPUSH
3376: LD_EXP 45
3380: PPUSH
3381: CALL_OW 251
3385: PPUSH
3386: CALL_OW 171
// end else
3390: GO 3721
// begin meetPokryshkin = true ;
3392: LD_ADDR_EXP 13
3396: PUSH
3397: LD_INT 1
3399: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3400: LD_INT 6
3402: PPUSH
3403: LD_INT 3
3405: PPUSH
3406: CALL_OW 343
// DialogueOff ;
3410: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3414: LD_EXP 52
3418: PPUSH
3419: CALL_OW 255
3423: PUSH
3424: LD_INT 3
3426: EQUAL
3427: PUSH
3428: LD_EXP 52
3432: PPUSH
3433: CALL_OW 302
3437: AND
3438: IFFALSE 3515
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3440: LD_EXP 44
3444: PUSH
3445: LD_EXP 52
3449: PUSH
3450: EMPTY
3451: LIST
3452: LIST
3453: PPUSH
3454: LD_EXP 45
3458: PPUSH
3459: CALL_OW 250
3463: PPUSH
3464: LD_EXP 45
3468: PPUSH
3469: CALL_OW 251
3473: PPUSH
3474: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3478: LD_EXP 44
3482: PUSH
3483: LD_EXP 52
3487: PUSH
3488: EMPTY
3489: LIST
3490: LIST
3491: PPUSH
3492: LD_EXP 45
3496: PPUSH
3497: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3501: LD_EXP 52
3505: PPUSH
3506: LD_INT 6
3508: PPUSH
3509: CALL_OW 235
// end else
3513: GO 3558
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3515: LD_EXP 44
3519: PPUSH
3520: LD_EXP 45
3524: PPUSH
3525: CALL_OW 250
3529: PPUSH
3530: LD_EXP 45
3534: PPUSH
3535: CALL_OW 251
3539: PPUSH
3540: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3544: LD_EXP 44
3548: PPUSH
3549: LD_EXP 45
3553: PPUSH
3554: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3558: LD_EXP 45
3562: PPUSH
3563: LD_EXP 44
3567: PPUSH
3568: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3572: LD_EXP 44
3576: PPUSH
3577: LD_STRING D4-Bur-3
3579: PPUSH
3580: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3584: LD_EXP 45
3588: PPUSH
3589: LD_STRING D4-Pok-4
3591: PPUSH
3592: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3596: LD_EXP 40
3600: PPUSH
3601: LD_INT 18
3603: PPUSH
3604: LD_INT 1
3606: PPUSH
3607: CALL_OW 49
// wait ( 0 0$2 ) ;
3611: LD_INT 70
3613: PPUSH
3614: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3618: LD_EXP 44
3622: PPUSH
3623: LD_STRING D4-Bur-4
3625: PPUSH
3626: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3630: LD_EXP 45
3634: PPUSH
3635: LD_STRING D4-Pok-5
3637: PPUSH
3638: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3642: LD_EXP 40
3646: PPUSH
3647: LD_STRING D4-Sol1-5
3649: PPUSH
3650: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3654: LD_EXP 45
3658: PPUSH
3659: LD_STRING D4-Pok-6
3661: PPUSH
3662: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3666: LD_EXP 45
3670: PPUSH
3671: LD_STRING D4-Pok-6a
3673: PPUSH
3674: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3678: LD_EXP 44
3682: PPUSH
3683: LD_STRING D4-Bur-6
3685: PPUSH
3686: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3690: LD_EXP 45
3694: PPUSH
3695: LD_STRING D4-Pok-7
3697: PPUSH
3698: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3702: LD_STRING M2
3704: PPUSH
3705: CALL_OW 337
// goToHill = true ;
3709: LD_ADDR_EXP 14
3713: PUSH
3714: LD_INT 1
3716: ST_TO_ADDR
// MoveToHill ;
3717: CALL 10150 0 0
// end ; DialogueOff ;
3721: CALL_OW 7
// InGameOff ;
3725: CALL_OW 9
// end ;
3729: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3730: LD_EXP 44
3734: PPUSH
3735: LD_EXP 45
3739: PPUSH
3740: CALL_OW 296
3744: PUSH
3745: LD_INT 10
3747: GREATER
3748: PUSH
3749: LD_EXP 14
3753: AND
3754: PUSH
3755: LD_EXP 17
3759: NOT
3760: AND
3761: IFFALSE 3962
3763: GO 3765
3765: DISABLE
3766: LD_INT 0
3768: PPUSH
// begin enable ;
3769: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3770: LD_ADDR_VAR 0 1
3774: PUSH
3775: LD_EXP 45
3779: PUSH
3780: LD_EXP 46
3784: PUSH
3785: LD_EXP 47
3789: PUSH
3790: LD_EXP 48
3794: PUSH
3795: LD_EXP 49
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: LIST
3806: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3807: LD_EXP 52
3811: PPUSH
3812: CALL_OW 255
3816: PUSH
3817: LD_INT 6
3819: EQUAL
3820: PUSH
3821: LD_EXP 11
3825: AND
3826: IFFALSE 3844
// ruSolds = ruSolds ^ Gnyevko ;
3828: LD_ADDR_VAR 0 1
3832: PUSH
3833: LD_VAR 0 1
3837: PUSH
3838: LD_EXP 52
3842: ADD
3843: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3844: LD_VAR 0 1
3848: PPUSH
3849: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3853: LD_EXP 44
3857: PPUSH
3858: CALL_OW 87
// DialogueOn ;
3862: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3866: LD_EXP 45
3870: PPUSH
3871: LD_STRING DSplit-Pok-1
3873: PPUSH
3874: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3878: LD_EXP 44
3882: PPUSH
3883: LD_STRING DSplit-Bur-1
3885: PPUSH
3886: CALL_OW 88
// DialogueOff ;
3890: CALL_OW 7
// InGameOn ;
3894: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3898: LD_EXP 44
3902: PPUSH
3903: LD_EXP 45
3907: PPUSH
3908: CALL_OW 250
3912: PPUSH
3913: LD_EXP 45
3917: PPUSH
3918: CALL_OW 251
3922: PPUSH
3923: CALL_OW 111
// wait ( 0 0$1 ) ;
3927: LD_INT 35
3929: PPUSH
3930: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3934: LD_EXP 44
3938: PPUSH
3939: LD_EXP 45
3943: PPUSH
3944: CALL_OW 296
3948: PUSH
3949: LD_INT 6
3951: LESS
3952: IFFALSE 3898
// InGameOff ;
3954: CALL_OW 9
// MoveToHill ;
3958: CALL 10150 0 0
// end ;
3962: PPOPN 1
3964: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
3965: LD_INT 0
3967: PPUSH
3968: PPUSH
// traitor = true ;
3969: LD_ADDR_EXP 17
3973: PUSH
3974: LD_INT 1
3976: ST_TO_ADDR
// DialogueOn ;
3977: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
3981: LD_EXP 45
3985: PPUSH
3986: LD_STRING DAttack-Pok-1
3988: PPUSH
3989: CALL_OW 88
// DialogueOff ;
3993: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
3997: LD_INT 3
3999: PPUSH
4000: LD_INT 6
4002: PPUSH
4003: LD_INT 2
4005: PPUSH
4006: LD_INT 1
4008: PPUSH
4009: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4013: LD_INT 22
4015: PUSH
4016: LD_INT 6
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: PUSH
4023: LD_INT 21
4025: PUSH
4026: LD_INT 1
4028: PUSH
4029: EMPTY
4030: LIST
4031: LIST
4032: PUSH
4033: EMPTY
4034: LIST
4035: LIST
4036: PPUSH
4037: CALL_OW 69
4041: PPUSH
4042: LD_EXP 44
4046: PPUSH
4047: CALL_OW 115
// end ;
4051: LD_VAR 0 1
4055: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4056: LD_EXP 45
4060: PPUSH
4061: LD_INT 65
4063: PPUSH
4064: LD_INT 59
4066: PPUSH
4067: CALL_OW 297
4071: PUSH
4072: LD_INT 4
4074: LESS
4075: PUSH
4076: LD_EXP 17
4080: NOT
4081: AND
4082: IFFALSE 4279
4084: GO 4086
4086: DISABLE
// begin InGameOn ;
4087: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4091: LD_INT 55
4093: PPUSH
4094: LD_INT 50
4096: PPUSH
4097: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4101: LD_EXP 44
4105: PPUSH
4106: LD_INT 66
4108: PPUSH
4109: LD_INT 57
4111: PPUSH
4112: CALL_OW 111
// AddComHold ( Burlak ) ;
4116: LD_EXP 44
4120: PPUSH
4121: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4125: LD_EXP 40
4129: PPUSH
4130: LD_INT 59
4132: PPUSH
4133: LD_INT 55
4135: PPUSH
4136: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4140: LD_INT 35
4142: PPUSH
4143: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4147: LD_INT 1
4149: PPUSH
4150: LD_EXP 45
4154: PPUSH
4155: CALL_OW 292
4159: IFFALSE 4140
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4161: LD_EXP 40
4165: PUSH
4166: LD_EXP 45
4170: PUSH
4171: EMPTY
4172: LIST
4173: LIST
4174: PPUSH
4175: CALL_OW 87
// ComStop ( Charles ) ;
4179: LD_EXP 40
4183: PPUSH
4184: CALL_OW 141
// AddComHold ( Charles ) ;
4188: LD_EXP 40
4192: PPUSH
4193: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4197: LD_EXP 40
4201: PPUSH
4202: LD_EXP 45
4206: PPUSH
4207: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4211: LD_EXP 40
4215: PPUSH
4216: LD_STRING D5-Sol1-1
4218: PPUSH
4219: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4223: LD_EXP 45
4227: PPUSH
4228: LD_STRING D5-Pok-1
4230: PPUSH
4231: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4235: LD_INT 1
4237: PPUSH
4238: LD_INT 6
4240: PPUSH
4241: LD_INT 2
4243: PPUSH
4244: LD_INT 1
4246: PPUSH
4247: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4251: LD_INT 1
4253: PPUSH
4254: LD_INT 3
4256: PPUSH
4257: LD_INT 2
4259: PPUSH
4260: LD_INT 1
4262: PPUSH
4263: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4267: LD_EXP 40
4271: PPUSH
4272: LD_STRING D5-Sol1-2
4274: PPUSH
4275: CALL_OW 88
// end ;
4279: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4280: LD_EXP 40
4284: PPUSH
4285: CALL_OW 301
4289: PUSH
4290: LD_EXP 14
4294: AND
4295: IFFALSE 4888
4297: GO 4299
4299: DISABLE
4300: LD_INT 0
4302: PPUSH
// begin goToHill = false ;
4303: LD_ADDR_EXP 14
4307: PUSH
4308: LD_INT 0
4310: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4311: LD_INT 22
4313: PUSH
4314: LD_INT 6
4316: PUSH
4317: EMPTY
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 21
4323: PUSH
4324: LD_INT 1
4326: PUSH
4327: EMPTY
4328: LIST
4329: LIST
4330: PUSH
4331: EMPTY
4332: LIST
4333: LIST
4334: PPUSH
4335: CALL_OW 69
4339: PPUSH
4340: CALL_OW 141
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4344: LD_INT 22
4346: PUSH
4347: LD_INT 6
4349: PUSH
4350: EMPTY
4351: LIST
4352: LIST
4353: PUSH
4354: LD_INT 21
4356: PUSH
4357: LD_INT 1
4359: PUSH
4360: EMPTY
4361: LIST
4362: LIST
4363: PUSH
4364: EMPTY
4365: LIST
4366: LIST
4367: PPUSH
4368: CALL_OW 69
4372: PPUSH
4373: CALL_OW 138
// wait ( 0 0$1 ) ;
4377: LD_INT 35
4379: PPUSH
4380: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4384: LD_INT 55
4386: PPUSH
4387: LD_INT 50
4389: PPUSH
4390: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4394: LD_EXP 44
4398: PPUSH
4399: LD_INT 56
4401: PPUSH
4402: LD_INT 56
4404: PPUSH
4405: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4409: LD_INT 22
4411: PUSH
4412: LD_INT 6
4414: PUSH
4415: EMPTY
4416: LIST
4417: LIST
4418: PUSH
4419: LD_INT 21
4421: PUSH
4422: LD_INT 1
4424: PUSH
4425: EMPTY
4426: LIST
4427: LIST
4428: PUSH
4429: EMPTY
4430: LIST
4431: LIST
4432: PPUSH
4433: CALL_OW 69
4437: PPUSH
4438: LD_INT 56
4440: PPUSH
4441: LD_INT 56
4443: PPUSH
4444: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4448: LD_EXP 44
4452: PPUSH
4453: LD_STRING D5-Bur-2
4455: PPUSH
4456: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4460: LD_EXP 45
4464: PPUSH
4465: LD_STRING D5-Pok-2
4467: PPUSH
4468: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4472: LD_EXP 49
4476: PPUSH
4477: LD_STRING D5-Bel-2
4479: PPUSH
4480: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4484: LD_EXP 45
4488: PPUSH
4489: LD_STRING D5-Pok-3
4491: PPUSH
4492: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4496: LD_EXP 52
4500: PPUSH
4501: CALL_OW 255
4505: PUSH
4506: LD_INT 6
4508: EQUAL
4509: IFFALSE 4523
// Say ( Gnyevko , D5-Gny-3 ) ;
4511: LD_EXP 52
4515: PPUSH
4516: LD_STRING D5-Gny-3
4518: PPUSH
4519: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4523: LD_EXP 44
4527: PPUSH
4528: LD_STRING D5-Bur-3
4530: PPUSH
4531: CALL_OW 88
// interface_hidden = true ;
4535: LD_ADDR_OWVAR 54
4539: PUSH
4540: LD_INT 1
4542: ST_TO_ADDR
// IngameOff ;
4543: CALL_OW 9
// wait ( 0 0$2 ) ;
4547: LD_INT 70
4549: PPUSH
4550: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4554: LD_EXP 44
4558: PPUSH
4559: LD_INT 85
4561: PPUSH
4562: LD_INT 64
4564: PPUSH
4565: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4569: LD_INT 22
4571: PUSH
4572: LD_INT 6
4574: PUSH
4575: EMPTY
4576: LIST
4577: LIST
4578: PUSH
4579: LD_INT 21
4581: PUSH
4582: LD_INT 1
4584: PUSH
4585: EMPTY
4586: LIST
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PPUSH
4593: CALL_OW 69
4597: PPUSH
4598: LD_INT 85
4600: PPUSH
4601: LD_INT 64
4603: PPUSH
4604: CALL_OW 111
// interface_hidden = false ;
4608: LD_ADDR_OWVAR 54
4612: PUSH
4613: LD_INT 0
4615: ST_TO_ADDR
// InGameOn ;
4616: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4620: LD_EXP 44
4624: PPUSH
4625: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4629: LD_EXP 45
4633: PPUSH
4634: LD_STRING D6-Pok-1
4636: PPUSH
4637: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4641: LD_EXP 44
4645: PPUSH
4646: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4650: LD_EXP 44
4654: PPUSH
4655: LD_STRING D6-Bur-1
4657: PPUSH
4658: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4662: LD_EXP 44
4666: PPUSH
4667: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4671: LD_EXP 45
4675: PPUSH
4676: LD_STRING D6-Pok-2
4678: PPUSH
4679: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4683: LD_EXP 44
4687: PPUSH
4688: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4692: LD_EXP 49
4696: PPUSH
4697: LD_STRING D6-Bel-2
4699: PPUSH
4700: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4704: LD_EXP 44
4708: PPUSH
4709: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4713: LD_EXP 44
4717: PPUSH
4718: LD_STRING D6-Bur-2
4720: PPUSH
4721: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4725: LD_EXP 44
4729: PPUSH
4730: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4734: LD_EXP 45
4738: PPUSH
4739: LD_STRING D6-Pok-3
4741: PPUSH
4742: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4746: LD_EXP 44
4750: PPUSH
4751: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4755: LD_EXP 53
4759: PPUSH
4760: LD_STRING D6-Kur-3
4762: PPUSH
4763: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4767: LD_EXP 44
4771: PPUSH
4772: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4776: LD_EXP 45
4780: PPUSH
4781: LD_STRING D6-Pok-4
4783: PPUSH
4784: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4788: LD_EXP 44
4792: PPUSH
4793: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4797: LD_EXP 49
4801: PPUSH
4802: LD_STRING D6-Bel-4
4804: PPUSH
4805: CALL_OW 88
// InGameOff ;
4809: CALL_OW 9
// interface_hidden = false ;
4813: LD_ADDR_OWVAR 54
4817: PUSH
4818: LD_INT 0
4820: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4821: LD_EXP 45
4825: PPUSH
4826: LD_INT 23
4828: PPUSH
4829: CALL_OW 115
// wait ( 0 0$5 ) ;
4833: LD_INT 175
4835: PPUSH
4836: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4840: LD_INT 22
4842: PUSH
4843: LD_INT 6
4845: PUSH
4846: EMPTY
4847: LIST
4848: LIST
4849: PUSH
4850: LD_INT 21
4852: PUSH
4853: LD_INT 1
4855: PUSH
4856: EMPTY
4857: LIST
4858: LIST
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PPUSH
4864: CALL_OW 69
4868: PPUSH
4869: LD_INT 23
4871: PPUSH
4872: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4876: LD_INT 1
4878: PPUSH
4879: LD_EXP 52
4883: PPUSH
4884: CALL_OW 471
// end ;
4888: PPOPN 1
4890: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4891: LD_INT 1
4893: PPUSH
4894: LD_EXP 45
4898: PPUSH
4899: CALL_OW 292
4903: PUSH
4904: LD_EXP 40
4908: PPUSH
4909: CALL_OW 301
4913: AND
4914: IFFALSE 4933
4916: GO 4918
4918: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4919: LD_EXP 41
4923: PPUSH
4924: LD_EXP 45
4928: PPUSH
4929: CALL_OW 115
4933: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4934: LD_INT 3
4936: PPUSH
4937: LD_INT 23
4939: PPUSH
4940: CALL_OW 292
4944: IFFALSE 4973
4946: GO 4948
4948: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4949: LD_EXP 45
4953: PPUSH
4954: LD_STRING D7-Pok-1
4956: PPUSH
4957: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4961: LD_EXP 41
4965: PPUSH
4966: LD_STRING D7-FSol1-1
4968: PPUSH
4969: CALL_OW 88
// end ;
4973: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4974: LD_EXP 45
4978: PPUSH
4979: CALL_OW 303
4983: IFFALSE 5515
4985: GO 4987
4987: DISABLE
4988: LD_INT 0
4990: PPUSH
4991: PPUSH
4992: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4993: LD_ADDR_VAR 0 3
4997: PUSH
4998: LD_INT 22
5000: PUSH
5001: LD_INT 6
5003: PUSH
5004: EMPTY
5005: LIST
5006: LIST
5007: PUSH
5008: LD_INT 21
5010: PUSH
5011: LD_INT 1
5013: PUSH
5014: EMPTY
5015: LIST
5016: LIST
5017: PUSH
5018: LD_INT 50
5020: PUSH
5021: EMPTY
5022: LIST
5023: PUSH
5024: EMPTY
5025: LIST
5026: LIST
5027: LIST
5028: PPUSH
5029: CALL_OW 69
5033: PUSH
5034: LD_EXP 49
5038: DIFF
5039: ST_TO_ADDR
// DialogueOn ;
5040: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5044: LD_EXP 49
5048: PPUSH
5049: LD_STRING D7a-Bel-1
5051: PPUSH
5052: CALL_OW 88
// DialogueOff ;
5056: CALL_OW 7
// for i := 1 to ruSolds do
5060: LD_ADDR_VAR 0 1
5064: PUSH
5065: DOUBLE
5066: LD_INT 1
5068: DEC
5069: ST_TO_ADDR
5070: LD_VAR 0 3
5074: PUSH
5075: FOR_TO
5076: IFFALSE 5134
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5078: LD_VAR 0 3
5082: PUSH
5083: LD_VAR 0 1
5087: ARRAY
5088: PPUSH
5089: LD_INT 87
5091: PUSH
5092: LD_VAR 0 1
5096: PLUS
5097: PPUSH
5098: LD_INT 63
5100: PUSH
5101: LD_VAR 0 1
5105: PLUS
5106: PPUSH
5107: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5111: LD_VAR 0 3
5115: PUSH
5116: LD_VAR 0 1
5120: ARRAY
5121: PPUSH
5122: LD_INT 89
5124: PPUSH
5125: LD_INT 67
5127: PPUSH
5128: CALL_OW 178
// end ;
5132: GO 5075
5134: POP
5135: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5136: LD_EXP 49
5140: PPUSH
5141: LD_INT 89
5143: PPUSH
5144: LD_INT 67
5146: PPUSH
5147: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5151: LD_EXP 49
5155: PPUSH
5156: LD_INT 88
5158: PPUSH
5159: LD_INT 66
5161: PPUSH
5162: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5166: LD_EXP 46
5170: PPUSH
5171: LD_STRING D7a-RSol1-1
5173: PPUSH
5174: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5178: LD_EXP 41
5182: PPUSH
5183: LD_STRING D7a-FSol1-1
5185: PPUSH
5186: CALL_OW 88
// wait ( 0 0$12 ) ;
5190: LD_INT 420
5192: PPUSH
5193: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5197: LD_EXP 49
5201: PPUSH
5202: LD_STRING D7b-Bel-1
5204: PPUSH
5205: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5209: LD_EXP 47
5213: PPUSH
5214: LD_STRING D7b-FSol1-1
5216: PPUSH
5217: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5221: LD_EXP 49
5225: PPUSH
5226: LD_STRING D7b-Bel-2
5228: PPUSH
5229: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5233: LD_EXP 46
5237: PPUSH
5238: LD_STRING D7b-RSol1-2
5240: PPUSH
5241: CALL_OW 88
// for unit in ruSolds do
5245: LD_ADDR_VAR 0 2
5249: PUSH
5250: LD_VAR 0 3
5254: PUSH
5255: FOR_IN
5256: IFFALSE 5489
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5258: LD_EXP 44
5262: PPUSH
5263: LD_VAR 0 2
5267: PPUSH
5268: CALL_OW 296
5272: PUSH
5273: LD_INT 7
5275: LESS
5276: IFFALSE 5487
// begin InGameOn ;
5278: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5282: LD_EXP 49
5286: PUSH
5287: LD_EXP 46
5291: PUSH
5292: EMPTY
5293: LIST
5294: LIST
5295: PPUSH
5296: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5300: LD_EXP 44
5304: PPUSH
5305: LD_INT 88
5307: PPUSH
5308: LD_INT 66
5310: PPUSH
5311: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5315: LD_EXP 49
5319: PPUSH
5320: LD_EXP 44
5324: PPUSH
5325: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5329: LD_EXP 44
5333: PPUSH
5334: LD_INT 90
5336: PPUSH
5337: LD_INT 66
5339: PPUSH
5340: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5344: LD_EXP 44
5348: PPUSH
5349: LD_STRING D7b-Bur-3
5351: PPUSH
5352: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5356: LD_EXP 49
5360: PPUSH
5361: LD_STRING D7b-Bel-4
5363: PPUSH
5364: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5368: LD_EXP 44
5372: PPUSH
5373: LD_STRING D7b-Bur-4
5375: PPUSH
5376: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5380: LD_EXP 49
5384: PPUSH
5385: LD_STRING D7b-Bel-5
5387: PPUSH
5388: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5392: LD_EXP 47
5396: PPUSH
5397: LD_STRING D7b-FSol1-5
5399: PPUSH
5400: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5404: LD_EXP 49
5408: PPUSH
5409: LD_STRING D7b-Bel-6
5411: PPUSH
5412: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5416: LD_EXP 44
5420: PPUSH
5421: LD_STRING D7b-Bur-6
5423: PPUSH
5424: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5428: LD_EXP 46
5432: PPUSH
5433: LD_STRING D7b-RSol1-6
5435: PPUSH
5436: CALL_OW 88
// InGameOff ;
5440: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5444: LD_VAR 0 3
5448: PPUSH
5449: LD_INT 3
5451: PPUSH
5452: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5456: LD_EXP 49
5460: PPUSH
5461: LD_INT 3
5463: PPUSH
5464: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5468: LD_STRING M3
5470: PPUSH
5471: CALL_OW 337
// secondAttack = true ;
5475: LD_ADDR_EXP 16
5479: PUSH
5480: LD_INT 1
5482: ST_TO_ADDR
// exit ;
5483: POP
5484: POP
5485: GO 5515
// end ;
5487: GO 5255
5489: POP
5490: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5491: LD_EXP 49
5495: PPUSH
5496: LD_STRING D7b-Bel-3
5498: PPUSH
5499: CALL_OW 88
// InGameOff ;
5503: CALL_OW 9
// belkovWaitForGorky = true ;
5507: LD_ADDR_EXP 15
5511: PUSH
5512: LD_INT 1
5514: ST_TO_ADDR
// end ;
5515: PPOPN 3
5517: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5518: LD_EXP 15
5522: IFFALSE 5832
5524: GO 5526
5526: DISABLE
5527: LD_INT 0
5529: PPUSH
5530: PPUSH
// begin enable ;
5531: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5532: LD_ADDR_VAR 0 2
5536: PUSH
5537: LD_INT 22
5539: PUSH
5540: LD_INT 6
5542: PUSH
5543: EMPTY
5544: LIST
5545: LIST
5546: PUSH
5547: LD_INT 21
5549: PUSH
5550: LD_INT 1
5552: PUSH
5553: EMPTY
5554: LIST
5555: LIST
5556: PUSH
5557: EMPTY
5558: LIST
5559: LIST
5560: PPUSH
5561: CALL_OW 69
5565: ST_TO_ADDR
// for unit in ruSolds do
5566: LD_ADDR_VAR 0 1
5570: PUSH
5571: LD_VAR 0 2
5575: PUSH
5576: FOR_IN
5577: IFFALSE 5830
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5579: LD_EXP 44
5583: PPUSH
5584: LD_VAR 0 1
5588: PPUSH
5589: CALL_OW 296
5593: PUSH
5594: LD_INT 7
5596: LESS
5597: IFFALSE 5828
// begin belkovWaitForGorky = false ;
5599: LD_ADDR_EXP 15
5603: PUSH
5604: LD_INT 0
5606: ST_TO_ADDR
// InGameOn ;
5607: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5611: LD_EXP 49
5615: PUSH
5616: LD_EXP 46
5620: PUSH
5621: EMPTY
5622: LIST
5623: LIST
5624: PPUSH
5625: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5629: LD_EXP 44
5633: PPUSH
5634: LD_INT 88
5636: PPUSH
5637: LD_INT 66
5639: PPUSH
5640: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5644: LD_EXP 49
5648: PPUSH
5649: LD_EXP 44
5653: PPUSH
5654: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5658: LD_EXP 44
5662: PPUSH
5663: LD_INT 90
5665: PPUSH
5666: LD_INT 66
5668: PPUSH
5669: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5673: LD_EXP 49
5677: PPUSH
5678: LD_STRING D7b-Bel-3a
5680: PPUSH
5681: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5685: LD_EXP 44
5689: PPUSH
5690: LD_STRING D7b-Bur-3
5692: PPUSH
5693: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5697: LD_EXP 49
5701: PPUSH
5702: LD_STRING D7b-Bel-4
5704: PPUSH
5705: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5709: LD_EXP 44
5713: PPUSH
5714: LD_STRING D7b-Bur-4
5716: PPUSH
5717: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5721: LD_EXP 49
5725: PPUSH
5726: LD_STRING D7b-Bel-5
5728: PPUSH
5729: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5733: LD_EXP 47
5737: PPUSH
5738: LD_STRING D7b-FSol1-5
5740: PPUSH
5741: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5745: LD_EXP 49
5749: PPUSH
5750: LD_STRING D7b-Bel-6
5752: PPUSH
5753: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5757: LD_EXP 44
5761: PPUSH
5762: LD_STRING D7b-Bur-6
5764: PPUSH
5765: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5769: LD_EXP 46
5773: PPUSH
5774: LD_STRING D7a-RSol1-6
5776: PPUSH
5777: CALL_OW 88
// InGameOff ;
5781: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5785: LD_VAR 0 2
5789: PPUSH
5790: LD_INT 3
5792: PPUSH
5793: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5797: LD_EXP 49
5801: PPUSH
5802: LD_INT 3
5804: PPUSH
5805: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5809: LD_STRING M3
5811: PPUSH
5812: CALL_OW 337
// secondAttack = true ;
5816: LD_ADDR_EXP 16
5820: PUSH
5821: LD_INT 1
5823: ST_TO_ADDR
// exit ;
5824: POP
5825: POP
5826: GO 5832
// end ;
5828: GO 5576
5830: POP
5831: POP
// end ;
5832: PPOPN 2
5834: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5835: LD_INT 0
5837: PPUSH
5838: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
5839: LD_EXP 41
5843: PPUSH
5844: LD_STRING D8-FSol1-1
5846: PPUSH
5847: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5851: LD_EXP 42
5855: PPUSH
5856: LD_STRING D8-Glad-1
5858: PPUSH
5859: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5863: LD_EXP 44
5867: PPUSH
5868: LD_STRING D8-Bur-1
5870: PPUSH
5871: CALL_OW 88
// secondAttack = false ;
5875: LD_ADDR_EXP 16
5879: PUSH
5880: LD_INT 0
5882: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5883: LD_ADDR_VAR 0 2
5887: PUSH
5888: LD_INT 22
5890: PUSH
5891: LD_INT 3
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: PUSH
5898: LD_INT 21
5900: PUSH
5901: LD_INT 1
5903: PUSH
5904: EMPTY
5905: LIST
5906: LIST
5907: PUSH
5908: EMPTY
5909: LIST
5910: LIST
5911: PPUSH
5912: CALL_OW 69
5916: PPUSH
5917: LD_INT 23
5919: PPUSH
5920: CALL_OW 74
5924: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5925: LD_EXP 43
5929: PPUSH
5930: CALL_OW 122
// wait ( 0 0$1 ) ;
5934: LD_INT 35
5936: PPUSH
5937: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5941: LD_EXP 43
5945: PPUSH
5946: LD_VAR 0 2
5950: PPUSH
5951: CALL_OW 175
// end ;
5955: LD_VAR 0 1
5959: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
5960: LD_INT 23
5962: PPUSH
5963: CALL_OW 256
5967: PUSH
5968: LD_INT 350
5970: LESS
5971: PUSH
5972: LD_INT 23
5974: PPUSH
5975: CALL_OW 256
5979: PUSH
5980: LD_INT 250
5982: GREATER
5983: AND
5984: PUSH
5985: LD_INT 20
5987: PPUSH
5988: LD_INT 22
5990: PUSH
5991: LD_INT 3
5993: PUSH
5994: EMPTY
5995: LIST
5996: LIST
5997: PUSH
5998: LD_INT 21
6000: PUSH
6001: LD_INT 1
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: PUSH
6008: EMPTY
6009: LIST
6010: LIST
6011: PPUSH
6012: CALL_OW 70
6016: PUSH
6017: LD_INT 0
6019: GREATER
6020: AND
6021: PUSH
6022: LD_EXP 23
6026: NOT
6027: AND
6028: IFFALSE 6045
6030: GO 6032
6032: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6033: LD_EXP 41
6037: PPUSH
6038: LD_STRING D8-FSol1-2
6040: PPUSH
6041: CALL_OW 88
6045: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6046: LD_INT 23
6048: PPUSH
6049: CALL_OW 303
6053: PUSH
6054: LD_INT 22
6056: PPUSH
6057: CALL_OW 302
6061: AND
6062: PUSH
6063: LD_EXP 23
6067: NOT
6068: AND
6069: IFFALSE 6139
6071: GO 6073
6073: DISABLE
// begin amRetreat = true ;
6074: LD_ADDR_EXP 23
6078: PUSH
6079: LD_INT 1
6081: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6082: LD_EXP 41
6086: PPUSH
6087: LD_STRING D8-FSol1-2a
6089: PPUSH
6090: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6094: LD_EXP 42
6098: PUSH
6099: LD_EXP 41
6103: PUSH
6104: EMPTY
6105: LIST
6106: LIST
6107: PPUSH
6108: LD_INT 21
6110: PPUSH
6111: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6115: LD_EXP 42
6119: PPUSH
6120: LD_STRING D8-Glad-2
6122: PPUSH
6123: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6127: LD_EXP 44
6131: PPUSH
6132: LD_STRING D8-Bur-2
6134: PPUSH
6135: CALL_OW 88
// end ;
6139: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6140: LD_INT 22
6142: PPUSH
6143: CALL_OW 303
6147: PUSH
6148: LD_INT 23
6150: PPUSH
6151: CALL_OW 302
6155: AND
6156: PUSH
6157: LD_EXP 23
6161: NOT
6162: AND
6163: IFFALSE 6233
6165: GO 6167
6167: DISABLE
// begin amRetreat = true ;
6168: LD_ADDR_EXP 23
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6176: LD_EXP 41
6180: PPUSH
6181: LD_STRING D8-FSol1-2a
6183: PPUSH
6184: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6188: LD_EXP 42
6192: PUSH
6193: LD_EXP 41
6197: PUSH
6198: EMPTY
6199: LIST
6200: LIST
6201: PPUSH
6202: LD_INT 21
6204: PPUSH
6205: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6209: LD_EXP 42
6213: PPUSH
6214: LD_STRING D8-Glad-2
6216: PPUSH
6217: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6221: LD_EXP 44
6225: PPUSH
6226: LD_STRING D8-Bur-2
6228: PPUSH
6229: CALL_OW 88
// end ;
6233: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6234: LD_INT 23
6236: PPUSH
6237: CALL_OW 256
6241: PUSH
6242: LD_INT 500
6244: LESS
6245: PUSH
6246: LD_OWVAR 67
6250: PUSH
6251: LD_INT 3
6253: EQUAL
6254: AND
6255: PUSH
6256: LD_EXP 23
6260: NOT
6261: AND
6262: IFFALSE 6332
6264: GO 6266
6266: DISABLE
// begin amRetreat = true ;
6267: LD_ADDR_EXP 23
6271: PUSH
6272: LD_INT 1
6274: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6275: LD_EXP 41
6279: PPUSH
6280: LD_STRING D8-FSol1-2a
6282: PPUSH
6283: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6287: LD_EXP 42
6291: PUSH
6292: LD_EXP 41
6296: PUSH
6297: EMPTY
6298: LIST
6299: LIST
6300: PPUSH
6301: LD_INT 21
6303: PPUSH
6304: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6308: LD_EXP 42
6312: PPUSH
6313: LD_STRING D8-Glad-2
6315: PPUSH
6316: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6320: LD_EXP 44
6324: PPUSH
6325: LD_STRING D8-Bur-2
6327: PPUSH
6328: CALL_OW 88
// end ;
6332: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6333: LD_INT 22
6335: PUSH
6336: LD_INT 1
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: PUSH
6343: LD_INT 21
6345: PUSH
6346: LD_INT 1
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: PUSH
6353: LD_INT 50
6355: PUSH
6356: EMPTY
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: LIST
6363: PPUSH
6364: CALL_OW 69
6368: PUSH
6369: LD_INT 0
6371: GREATER
6372: IFFALSE 6500
6374: GO 6376
6376: DISABLE
6377: LD_INT 0
6379: PPUSH
// begin enable ;
6380: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6381: LD_ADDR_VAR 0 1
6385: PUSH
6386: LD_INT 21
6388: PPUSH
6389: LD_INT 22
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 21
6401: PUSH
6402: LD_INT 1
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: PPUSH
6413: CALL_OW 70
6417: PUSH
6418: FOR_IN
6419: IFFALSE 6498
// begin if unit = Gladstone then
6421: LD_VAR 0 1
6425: PUSH
6426: LD_EXP 42
6430: EQUAL
6431: IFFALSE 6461
// begin gladstoneEscape = true ;
6433: LD_ADDR_EXP 18
6437: PUSH
6438: LD_INT 1
6440: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6441: LD_EXP 42
6445: PPUSH
6446: LD_EXP 28
6450: PUSH
6451: LD_STRING Gladstone
6453: STR
6454: PPUSH
6455: CALL_OW 38
// end else
6459: GO 6487
// begin JohannaEscape = true ;
6461: LD_ADDR_EXP 19
6465: PUSH
6466: LD_INT 1
6468: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6469: LD_EXP 41
6473: PPUSH
6474: LD_EXP 28
6478: PUSH
6479: LD_STRING Johanna
6481: STR
6482: PPUSH
6483: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL_OW 64
// end ;
6496: GO 6418
6498: POP
6499: POP
// end ;
6500: PPOPN 1
6502: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6503: LD_EXP 42
6507: PPUSH
6508: CALL_OW 301
6512: PUSH
6513: LD_EXP 41
6517: PPUSH
6518: CALL_OW 301
6522: AND
6523: IFFALSE 6540
6525: GO 6527
6527: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6528: LD_EXP 44
6532: PPUSH
6533: LD_STRING D9-Bur-1
6535: PPUSH
6536: CALL_OW 88
6540: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6541: LD_EXP 41
6545: PPUSH
6546: CALL_OW 301
6550: PUSH
6551: LD_EXP 18
6555: AND
6556: PUSH
6557: LD_EXP 19
6561: NOT
6562: AND
6563: IFFALSE 6580
6565: GO 6567
6567: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6568: LD_EXP 44
6572: PPUSH
6573: LD_STRING D9-Bur-1a
6575: PPUSH
6576: CALL_OW 88
6580: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6581: LD_EXP 42
6585: PPUSH
6586: CALL_OW 301
6590: PUSH
6591: LD_EXP 18
6595: NOT
6596: AND
6597: PUSH
6598: LD_EXP 19
6602: AND
6603: IFFALSE 6620
6605: GO 6607
6607: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6608: LD_EXP 44
6612: PPUSH
6613: LD_STRING D9-Bur-1b
6615: PPUSH
6616: CALL_OW 88
6620: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6621: LD_EXP 18
6625: PUSH
6626: LD_EXP 19
6630: AND
6631: IFFALSE 6648
6633: GO 6635
6635: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6636: LD_EXP 44
6640: PPUSH
6641: LD_STRING D9-Bur-1c
6643: PPUSH
6644: CALL_OW 88
6648: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6649: LD_INT 22
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 21
6661: PUSH
6662: LD_INT 3
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 50
6671: PUSH
6672: EMPTY
6673: LIST
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: LIST
6679: PPUSH
6680: CALL_OW 69
6684: PUSH
6685: LD_INT 0
6687: EQUAL
6688: IFFALSE 6936
6690: GO 6692
6692: DISABLE
6693: LD_INT 0
6695: PPUSH
6696: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6697: LD_ADDR_VAR 0 1
6701: PUSH
6702: LD_INT 22
6704: PUSH
6705: LD_INT 3
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 21
6714: PUSH
6715: LD_INT 1
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: LD_INT 50
6724: PUSH
6725: EMPTY
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: PPUSH
6733: CALL_OW 69
6737: PUSH
6738: LD_EXP 44
6742: PUSH
6743: LD_EXP 52
6747: PUSH
6748: LD_EXP 49
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: DIFF
6758: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6759: LD_ADDR_VAR 0 2
6763: PUSH
6764: LD_VAR 0 1
6768: PPUSH
6769: LD_INT 26
6771: PUSH
6772: LD_INT 1
6774: PUSH
6775: EMPTY
6776: LIST
6777: LIST
6778: PPUSH
6779: CALL_OW 72
6783: ST_TO_ADDR
// DialogueOn ;
6784: CALL_OW 6
// if IsOK ( Belkov ) then
6788: LD_EXP 49
6792: PPUSH
6793: CALL_OW 302
6797: IFFALSE 6811
// Say ( Belkov , D10-Bel-1 ) ;
6799: LD_EXP 49
6803: PPUSH
6804: LD_STRING D10-Bel-1
6806: PPUSH
6807: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6811: LD_VAR 0 1
6815: PUSH
6816: LD_INT 0
6818: GREATER
6819: PUSH
6820: LD_VAR 0 2
6824: PUSH
6825: LD_INT 0
6827: GREATER
6828: PUSH
6829: LD_EXP 49
6833: PPUSH
6834: CALL_OW 302
6838: OR
6839: AND
6840: IFFALSE 6907
// begin Say ( Burlak , D10-Bur-1 ) ;
6842: LD_EXP 44
6846: PPUSH
6847: LD_STRING D10-Bur-1
6849: PPUSH
6850: CALL_OW 88
// if IsOK ( Belkov ) then
6854: LD_EXP 49
6858: PPUSH
6859: CALL_OW 302
6863: IFFALSE 6879
// Say ( Belkov , D10-Bel-1a ) else
6865: LD_EXP 49
6869: PPUSH
6870: LD_STRING D10-Bel-1a
6872: PPUSH
6873: CALL_OW 88
6877: GO 6895
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6879: LD_VAR 0 2
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_STRING D10-RSol1-1
6890: PPUSH
6891: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6895: LD_EXP 44
6899: PPUSH
6900: LD_STRING D10-Bur-2
6902: PPUSH
6903: CALL_OW 88
// end ; DialogueOff ;
6907: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6911: LD_STRING M4a
6913: PPUSH
6914: CALL_OW 337
// evacuationAvailable = true ;
6918: LD_ADDR_EXP 21
6922: PUSH
6923: LD_INT 1
6925: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6926: LD_INT 1
6928: PPUSH
6929: LD_INT 1
6931: PPUSH
6932: CALL_OW 424
// end ;
6936: PPOPN 2
6938: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
6939: LD_EXP 21
6943: PUSH
6944: LD_EXP 24
6948: NOT
6949: AND
6950: IFFALSE 7560
6952: GO 6954
6954: DISABLE
6955: LD_INT 0
6957: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6958: LD_EXP 51
6962: PPUSH
6963: LD_INT 22
6965: PPUSH
6966: LD_INT 1
6968: PPUSH
6969: CALL_OW 49
// wait ( 0 0$3 ) ;
6973: LD_INT 105
6975: PPUSH
6976: CALL_OW 67
// jelenaSpawned = true ;
6980: LD_ADDR_EXP 24
6984: PUSH
6985: LD_INT 1
6987: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
6988: LD_INT 22
6990: PUSH
6991: LD_INT 3
6993: PUSH
6994: EMPTY
6995: LIST
6996: LIST
6997: PUSH
6998: LD_INT 21
7000: PUSH
7001: LD_INT 1
7003: PUSH
7004: EMPTY
7005: LIST
7006: LIST
7007: PUSH
7008: LD_INT 50
7010: PUSH
7011: EMPTY
7012: LIST
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: PPUSH
7019: CALL_OW 69
7023: PPUSH
7024: LD_EXP 51
7028: PPUSH
7029: CALL_OW 74
7033: PPUSH
7034: LD_EXP 51
7038: PPUSH
7039: CALL_OW 296
7043: PUSH
7044: LD_INT 9
7046: LESS
7047: IFFALSE 7051
// exit ;
7049: GO 7560
// DialogueOn ;
7051: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7055: LD_EXP 51
7059: PPUSH
7060: LD_STRING D11b-Kir-1
7062: PPUSH
7063: CALL_OW 94
// if IsOK ( Belkov ) then
7067: LD_EXP 49
7071: PPUSH
7072: CALL_OW 302
7076: IFFALSE 7104
// begin Say ( Belkov , D11b-Bel-1 ) ;
7078: LD_EXP 49
7082: PPUSH
7083: LD_STRING D11b-Bel-1
7085: PPUSH
7086: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7090: LD_EXP 49
7094: PPUSH
7095: LD_STRING D11b-Bel-1a
7097: PPUSH
7098: CALL_OW 94
// end else
7102: GO 7159
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7104: LD_ADDR_VAR 0 1
7108: PUSH
7109: LD_INT 22
7111: PUSH
7112: LD_INT 3
7114: PUSH
7115: EMPTY
7116: LIST
7117: LIST
7118: PUSH
7119: LD_INT 21
7121: PUSH
7122: LD_INT 1
7124: PUSH
7125: EMPTY
7126: LIST
7127: LIST
7128: PUSH
7129: LD_INT 50
7131: PUSH
7132: EMPTY
7133: LIST
7134: PUSH
7135: EMPTY
7136: LIST
7137: LIST
7138: LIST
7139: PPUSH
7140: CALL_OW 69
7144: PPUSH
7145: LD_STRING D11b-RSol1-1
7147: PPUSH
7148: LD_STRING D11b-RFSol1-1
7150: PPUSH
7151: LD_INT 0
7153: PPUSH
7154: CALL 7937 0 4
7158: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7159: LD_INT 24
7161: PPUSH
7162: LD_INT 22
7164: PUSH
7165: LD_INT 0
7167: PUSH
7168: EMPTY
7169: LIST
7170: LIST
7171: PUSH
7172: LD_INT 25
7174: PUSH
7175: LD_INT 12
7177: PUSH
7178: EMPTY
7179: LIST
7180: LIST
7181: PUSH
7182: EMPTY
7183: LIST
7184: LIST
7185: PPUSH
7186: CALL_OW 70
7190: PUSH
7191: LD_INT 0
7193: GREATER
7194: IFFALSE 7210
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7196: LD_EXP 51
7200: PPUSH
7201: LD_STRING D11b1-Kir-1
7203: PPUSH
7204: CALL_OW 94
7208: GO 7222
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7210: LD_EXP 51
7214: PPUSH
7215: LD_STRING D11b2-Kir-1
7217: PPUSH
7218: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7222: LD_EXP 6
7226: PUSH
7227: LD_INT 24
7229: PPUSH
7230: LD_INT 22
7232: PUSH
7233: LD_INT 0
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: LD_INT 25
7242: PUSH
7243: LD_INT 12
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: PUSH
7250: EMPTY
7251: LIST
7252: LIST
7253: PPUSH
7254: CALL_OW 70
7258: PUSH
7259: LD_INT 0
7261: GREATER
7262: AND
7263: IFFALSE 7398
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7265: LD_EXP 44
7269: PPUSH
7270: LD_STRING D11b1-Bur-1
7272: PPUSH
7273: CALL_OW 88
// if IsOk ( Belkov ) then
7277: LD_EXP 49
7281: PPUSH
7282: CALL_OW 302
7286: IFFALSE 7302
// Say ( Belkov , D11b2-Bel-1 ) else
7288: LD_EXP 49
7292: PPUSH
7293: LD_STRING D11b2-Bel-1
7295: PPUSH
7296: CALL_OW 88
7300: GO 7343
// begin if GetSex ( randomSold ) = sex_male then
7302: LD_VAR 0 1
7306: PPUSH
7307: CALL_OW 258
7311: PUSH
7312: LD_INT 1
7314: EQUAL
7315: IFFALSE 7331
// Say ( randomSold , D11b1-RSol1-1 ) else
7317: LD_VAR 0 1
7321: PPUSH
7322: LD_STRING D11b1-RSol1-1
7324: PPUSH
7325: CALL_OW 88
7329: GO 7343
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7331: LD_VAR 0 1
7335: PPUSH
7336: LD_STRING D11b1-RFSol1-1
7338: PPUSH
7339: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7343: LD_INT 22
7345: PUSH
7346: LD_INT 1
7348: PUSH
7349: EMPTY
7350: LIST
7351: LIST
7352: PUSH
7353: LD_INT 21
7355: PUSH
7356: LD_INT 1
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: PUSH
7363: LD_INT 50
7365: PUSH
7366: EMPTY
7367: LIST
7368: PUSH
7369: EMPTY
7370: LIST
7371: LIST
7372: LIST
7373: PPUSH
7374: CALL_OW 69
7378: PPUSH
7379: LD_STRING D11b1-RSol1-1
7381: PPUSH
7382: LD_STRING D11b1-RFSol1-1
7384: PPUSH
7385: LD_INT 0
7387: PPUSH
7388: CALL 7937 0 4
// DialogueOff ;
7392: CALL_OW 7
// exit ;
7396: GO 7560
// end ; if spotWaterfall then
7398: LD_EXP 7
7402: IFFALSE 7488
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7404: LD_EXP 44
7408: PPUSH
7409: LD_STRING D11b1-Bur-1a
7411: PPUSH
7412: CALL_OW 88
// if IsOk ( Belkov ) then
7416: LD_EXP 49
7420: PPUSH
7421: CALL_OW 302
7425: IFFALSE 7441
// Say ( Belkov , D11b2-Bel-1 ) else
7427: LD_EXP 49
7431: PPUSH
7432: LD_STRING D11b2-Bel-1
7434: PPUSH
7435: CALL_OW 88
7439: GO 7482
// begin if GetSex ( randomSold ) = sex_male then
7441: LD_VAR 0 1
7445: PPUSH
7446: CALL_OW 258
7450: PUSH
7451: LD_INT 1
7453: EQUAL
7454: IFFALSE 7470
// Say ( randomSold , D11b1-RSol1-1 ) else
7456: LD_VAR 0 1
7460: PPUSH
7461: LD_STRING D11b1-RSol1-1
7463: PPUSH
7464: CALL_OW 88
7468: GO 7482
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7470: LD_VAR 0 1
7474: PPUSH
7475: LD_STRING D11b1-RFSol1-1
7477: PPUSH
7478: CALL_OW 88
// end ; DialogueOff ;
7482: CALL_OW 7
// exit ;
7486: GO 7560
// end ; if IsOk ( Belkov ) then
7488: LD_EXP 49
7492: PPUSH
7493: CALL_OW 302
7497: IFFALSE 7513
// Say ( Belkov , D11b1-Bel-1 ) else
7499: LD_EXP 49
7503: PPUSH
7504: LD_STRING D11b1-Bel-1
7506: PPUSH
7507: CALL_OW 88
7511: GO 7554
// begin if GetSex ( randomSold ) = sex_male then
7513: LD_VAR 0 1
7517: PPUSH
7518: CALL_OW 258
7522: PUSH
7523: LD_INT 1
7525: EQUAL
7526: IFFALSE 7542
// Say ( randomSold , D11b1-RSol1-1 ) else
7528: LD_VAR 0 1
7532: PPUSH
7533: LD_STRING D11b1-RSol1-1
7535: PPUSH
7536: CALL_OW 88
7540: GO 7554
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7542: LD_VAR 0 1
7546: PPUSH
7547: LD_STRING D11b1-RFSol1-1
7549: PPUSH
7550: CALL_OW 88
// end ; DialogueOff ;
7554: CALL_OW 7
// exit ;
7558: GO 7560
// end ;
7560: PPOPN 1
7562: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7563: LD_INT 3
7565: PPUSH
7566: LD_EXP 51
7570: PPUSH
7571: CALL_OW 292
7575: PUSH
7576: LD_EXP 24
7580: AND
7581: IFFALSE 7817
7583: GO 7585
7585: DISABLE
7586: LD_INT 0
7588: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7589: LD_EXP 51
7593: PPUSH
7594: LD_INT 3
7596: PPUSH
7597: CALL_OW 235
// jelenaSaved = true ;
7601: LD_ADDR_EXP 20
7605: PUSH
7606: LD_INT 1
7608: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7609: LD_EXP 51
7613: PPUSH
7614: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7618: LD_ADDR_VAR 0 1
7622: PUSH
7623: LD_INT 22
7625: PUSH
7626: LD_INT 3
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 21
7635: PUSH
7636: LD_INT 1
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 50
7645: PUSH
7646: EMPTY
7647: LIST
7648: PUSH
7649: EMPTY
7650: LIST
7651: LIST
7652: LIST
7653: PPUSH
7654: CALL_OW 69
7658: PUSH
7659: LD_EXP 51
7663: DIFF
7664: PPUSH
7665: LD_EXP 51
7669: PPUSH
7670: CALL_OW 74
7674: ST_TO_ADDR
// DialogueOn ;
7675: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7679: LD_EXP 51
7683: PPUSH
7684: LD_STRING D11a-Kir-1
7686: PPUSH
7687: CALL_OW 88
// if nearUnit = Belkov then
7691: LD_VAR 0 1
7695: PUSH
7696: LD_EXP 49
7700: EQUAL
7701: IFFALSE 7741
// begin Say ( Belkov , D11a-Bel-1 ) ;
7703: LD_EXP 49
7707: PPUSH
7708: LD_STRING D11a-Bel-1
7710: PPUSH
7711: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7715: LD_EXP 51
7719: PPUSH
7720: LD_STRING D11a-Kir-2
7722: PPUSH
7723: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7727: LD_EXP 49
7731: PPUSH
7732: LD_STRING D11a-Bel-2
7734: PPUSH
7735: CALL_OW 88
// end else
7739: GO 7782
// begin if GetSex ( nearUnit ) = sex_male then
7741: LD_VAR 0 1
7745: PPUSH
7746: CALL_OW 258
7750: PUSH
7751: LD_INT 1
7753: EQUAL
7754: IFFALSE 7770
// Say ( nearUnit , D11a-RSol1-2 ) else
7756: LD_VAR 0 1
7760: PPUSH
7761: LD_STRING D11a-RSol1-2
7763: PPUSH
7764: CALL_OW 88
7768: GO 7782
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7770: LD_VAR 0 1
7774: PPUSH
7775: LD_STRING D11a-RFSol1-2
7777: PPUSH
7778: CALL_OW 88
// end ; DialogueOff ;
7782: CALL_OW 7
// wait ( 0 0$5 ) ;
7786: LD_INT 175
7788: PPUSH
7789: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7793: LD_EXP 51
7797: PPUSH
7798: LD_STRING D11c-Kir-1
7800: PPUSH
7801: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7805: LD_EXP 44
7809: PPUSH
7810: LD_STRING D11c-Bur-1
7812: PPUSH
7813: CALL_OW 88
// end ;
7817: PPOPN 1
7819: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7820: LD_EXP 21
7824: PUSH
7825: LD_INT 1
7827: PPUSH
7828: LD_INT 22
7830: PUSH
7831: LD_INT 3
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 21
7840: PUSH
7841: LD_INT 1
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: PPUSH
7852: CALL_OW 70
7856: PUSH
7857: LD_INT 0
7859: GREATER
7860: AND
7861: IFFALSE 7873
7863: GO 7865
7865: DISABLE
// begin Query ( QExit1 ) ;
7866: LD_STRING QExit1
7868: PPUSH
7869: CALL_OW 97
// end ; end_of_file
7873: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7874: LD_INT 0
7876: PPUSH
7877: PPUSH
// if exist_mode then
7878: LD_VAR 0 2
7882: IFFALSE 7907
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7884: LD_ADDR_VAR 0 4
7888: PUSH
7889: LD_EXP 29
7893: PUSH
7894: LD_VAR 0 1
7898: STR
7899: PPUSH
7900: CALL_OW 34
7904: ST_TO_ADDR
7905: GO 7922
// unit := NewCharacter ( ident ) ;
7907: LD_ADDR_VAR 0 4
7911: PUSH
7912: LD_VAR 0 1
7916: PPUSH
7917: CALL_OW 25
7921: ST_TO_ADDR
// result := unit ;
7922: LD_ADDR_VAR 0 3
7926: PUSH
7927: LD_VAR 0 4
7931: ST_TO_ADDR
// end ;
7932: LD_VAR 0 3
7936: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7937: LD_INT 0
7939: PPUSH
7940: PPUSH
7941: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7942: LD_ADDR_VAR 0 1
7946: PUSH
7947: LD_VAR 0 1
7951: PUSH
7952: LD_EXP 44
7956: PUSH
7957: LD_EXP 52
7961: PUSH
7962: LD_EXP 49
7966: PUSH
7967: LD_EXP 51
7971: PUSH
7972: EMPTY
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: DIFF
7978: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7979: LD_ADDR_VAR 0 7
7983: PUSH
7984: LD_VAR 0 1
7988: PUSH
7989: LD_INT 1
7991: PPUSH
7992: LD_VAR 0 1
7996: PPUSH
7997: CALL_OW 12
8001: ARRAY
8002: ST_TO_ADDR
// if radio then
8003: LD_VAR 0 4
8007: IFFALSE 8056
// begin if GetSex ( speaker ) = sex_male then
8009: LD_VAR 0 7
8013: PPUSH
8014: CALL_OW 258
8018: PUSH
8019: LD_INT 1
8021: EQUAL
8022: IFFALSE 8040
// SayRadio ( speaker , dialogMID ) else
8024: LD_VAR 0 7
8028: PPUSH
8029: LD_VAR 0 2
8033: PPUSH
8034: CALL_OW 94
8038: GO 8054
// SayRadio ( speaker , dialogFID ) ;
8040: LD_VAR 0 7
8044: PPUSH
8045: LD_VAR 0 3
8049: PPUSH
8050: CALL_OW 94
// end else
8054: GO 8101
// begin if GetSex ( speaker ) = sex_male then
8056: LD_VAR 0 7
8060: PPUSH
8061: CALL_OW 258
8065: PUSH
8066: LD_INT 1
8068: EQUAL
8069: IFFALSE 8087
// Say ( speaker , dialogMID ) else
8071: LD_VAR 0 7
8075: PPUSH
8076: LD_VAR 0 2
8080: PPUSH
8081: CALL_OW 88
8085: GO 8101
// Say ( speaker , dialogFID ) ;
8087: LD_VAR 0 7
8091: PPUSH
8092: LD_VAR 0 3
8096: PPUSH
8097: CALL_OW 88
// end ; result := speaker ;
8101: LD_ADDR_VAR 0 5
8105: PUSH
8106: LD_VAR 0 7
8110: ST_TO_ADDR
// end ;
8111: LD_VAR 0 5
8115: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8116: LD_INT 0
8118: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8119: LD_VAR 0 1
8123: PPUSH
8124: CALL_OW 255
8128: PUSH
8129: LD_OWVAR 2
8133: EQUAL
8134: PUSH
8135: LD_VAR 0 1
8139: PPUSH
8140: CALL_OW 302
8144: AND
8145: IFFALSE 8167
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8147: LD_VAR 0 1
8151: PPUSH
8152: LD_EXP 28
8156: PUSH
8157: LD_VAR 0 2
8161: STR
8162: PPUSH
8163: CALL_OW 38
// end ;
8167: LD_VAR 0 3
8171: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8172: LD_INT 0
8174: PPUSH
8175: PPUSH
8176: PPUSH
// resultCharactersToSave = [ ] ;
8177: LD_ADDR_VAR 0 5
8181: PUSH
8182: EMPTY
8183: ST_TO_ADDR
// for unit in characters do
8184: LD_ADDR_VAR 0 4
8188: PUSH
8189: LD_VAR 0 1
8193: PUSH
8194: FOR_IN
8195: IFFALSE 8243
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8197: LD_VAR 0 4
8201: PPUSH
8202: CALL_OW 255
8206: PUSH
8207: LD_OWVAR 2
8211: EQUAL
8212: PUSH
8213: LD_VAR 0 4
8217: PPUSH
8218: CALL_OW 302
8222: AND
8223: IFFALSE 8241
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8225: LD_ADDR_VAR 0 5
8229: PUSH
8230: LD_VAR 0 5
8234: PUSH
8235: LD_VAR 0 4
8239: ADD
8240: ST_TO_ADDR
8241: GO 8194
8243: POP
8244: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8245: LD_VAR 0 5
8249: PPUSH
8250: LD_EXP 28
8254: PUSH
8255: LD_VAR 0 2
8259: STR
8260: PPUSH
8261: CALL_OW 38
// end ;
8265: LD_VAR 0 3
8269: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8270: LD_INT 0
8272: PPUSH
8273: PPUSH
8274: PPUSH
8275: PPUSH
8276: PPUSH
8277: PPUSH
8278: PPUSH
8279: PPUSH
8280: PPUSH
8281: PPUSH
8282: PPUSH
8283: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8284: LD_VAR 0 1
8288: PPUSH
8289: CALL_OW 302
8293: NOT
8294: PUSH
8295: LD_VAR 0 4
8299: PUSH
8300: LD_INT 1
8302: EQUAL
8303: OR
8304: PUSH
8305: LD_VAR 0 2
8309: PPUSH
8310: LD_VAR 0 3
8314: PPUSH
8315: CALL_OW 488
8319: NOT
8320: OR
8321: PUSH
8322: LD_VAR 0 1
8326: PPUSH
8327: LD_VAR 0 2
8331: PPUSH
8332: LD_VAR 0 3
8336: PPUSH
8337: CALL_OW 297
8341: PUSH
8342: LD_VAR 0 4
8346: GREATEREQUAL
8347: OR
8348: PUSH
8349: LD_VAR 0 5
8353: PUSH
8354: LD_INT 1
8356: PUSH
8357: LD_INT 0
8359: PUSH
8360: EMPTY
8361: LIST
8362: LIST
8363: IN
8364: NOT
8365: OR
8366: IFFALSE 8370
// exit ;
8368: GO 9927
// attempts = 0 ;
8370: LD_ADDR_VAR 0 17
8374: PUSH
8375: LD_INT 0
8377: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8378: LD_ADDR_VAR 0 7
8382: PUSH
8383: EMPTY
8384: ST_TO_ADDR
// list_coords = [ ] ;
8385: LD_ADDR_VAR 0 8
8389: PUSH
8390: EMPTY
8391: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8392: LD_ADDR_VAR 0 9
8396: PUSH
8397: LD_VAR 0 2
8401: PPUSH
8402: LD_VAR 0 3
8406: PPUSH
8407: LD_VAR 0 1
8411: PPUSH
8412: CALL_OW 250
8416: PPUSH
8417: LD_VAR 0 1
8421: PPUSH
8422: CALL_OW 251
8426: PPUSH
8427: CALL 9932 0 4
8431: ST_TO_ADDR
// if attempts = 0 then
8432: LD_VAR 0 17
8436: PUSH
8437: LD_INT 0
8439: EQUAL
8440: IFFALSE 8548
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8442: LD_ADDR_VAR 0 10
8446: PUSH
8447: LD_VAR 0 9
8451: PUSH
8452: LD_VAR 0 9
8456: PUSH
8457: LD_INT 1
8459: PLUS
8460: PUSH
8461: LD_VAR 0 9
8465: PUSH
8466: LD_INT 1
8468: MINUS
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8475: LD_VAR 0 10
8479: PUSH
8480: LD_INT 2
8482: ARRAY
8483: PUSH
8484: LD_INT 6
8486: EQUAL
8487: IFFALSE 8510
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8489: LD_ADDR_VAR 0 10
8493: PUSH
8494: LD_VAR 0 10
8498: PPUSH
8499: LD_INT 2
8501: PPUSH
8502: LD_INT 0
8504: PPUSH
8505: CALL_OW 1
8509: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8510: LD_VAR 0 10
8514: PUSH
8515: LD_INT 3
8517: ARRAY
8518: PUSH
8519: LD_INT 1
8521: NEG
8522: EQUAL
8523: IFFALSE 8546
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8525: LD_ADDR_VAR 0 10
8529: PUSH
8530: LD_VAR 0 10
8534: PPUSH
8535: LD_INT 3
8537: PPUSH
8538: LD_INT 5
8540: PPUSH
8541: CALL_OW 1
8545: ST_TO_ADDR
// end else
8546: GO 8585
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8548: LD_ADDR_VAR 0 10
8552: PUSH
8553: LD_INT 0
8555: PUSH
8556: LD_INT 1
8558: PUSH
8559: LD_INT 2
8561: PUSH
8562: LD_INT 3
8564: PUSH
8565: LD_INT 4
8567: PUSH
8568: LD_INT 5
8570: PUSH
8571: EMPTY
8572: LIST
8573: LIST
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: PUSH
8579: LD_VAR 0 9
8583: DIFF
8584: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8585: LD_ADDR_VAR 0 14
8589: PUSH
8590: DOUBLE
8591: LD_INT 1
8593: DEC
8594: ST_TO_ADDR
8595: LD_VAR 0 10
8599: PUSH
8600: LD_INT 0
8602: PLUS
8603: PUSH
8604: FOR_TO
8605: IFFALSE 8927
// case dir_list [ c ] of 0 :
8607: LD_VAR 0 10
8611: PUSH
8612: LD_VAR 0 14
8616: ARRAY
8617: PUSH
8618: LD_INT 0
8620: DOUBLE
8621: EQUAL
8622: IFTRUE 8626
8624: GO 8667
8626: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8627: LD_ADDR_VAR 0 8
8631: PUSH
8632: LD_VAR 0 8
8636: PPUSH
8637: LD_INT 1
8639: PPUSH
8640: LD_VAR 0 2
8644: PUSH
8645: LD_VAR 0 3
8649: PUSH
8650: LD_VAR 0 4
8654: MINUS
8655: PUSH
8656: EMPTY
8657: LIST
8658: LIST
8659: PPUSH
8660: CALL_OW 2
8664: ST_TO_ADDR
8665: GO 8925
8667: LD_INT 1
8669: DOUBLE
8670: EQUAL
8671: IFTRUE 8675
8673: GO 8716
8675: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8676: LD_ADDR_VAR 0 8
8680: PUSH
8681: LD_VAR 0 8
8685: PPUSH
8686: LD_INT 1
8688: PPUSH
8689: LD_VAR 0 2
8693: PUSH
8694: LD_VAR 0 4
8698: PLUS
8699: PUSH
8700: LD_VAR 0 3
8704: PUSH
8705: EMPTY
8706: LIST
8707: LIST
8708: PPUSH
8709: CALL_OW 2
8713: ST_TO_ADDR
8714: GO 8925
8716: LD_INT 2
8718: DOUBLE
8719: EQUAL
8720: IFTRUE 8724
8722: GO 8771
8724: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8725: LD_ADDR_VAR 0 8
8729: PUSH
8730: LD_VAR 0 8
8734: PPUSH
8735: LD_INT 1
8737: PPUSH
8738: LD_VAR 0 2
8742: PUSH
8743: LD_VAR 0 4
8747: PLUS
8748: PUSH
8749: LD_VAR 0 3
8753: PUSH
8754: LD_VAR 0 4
8758: PLUS
8759: PUSH
8760: EMPTY
8761: LIST
8762: LIST
8763: PPUSH
8764: CALL_OW 2
8768: ST_TO_ADDR
8769: GO 8925
8771: LD_INT 3
8773: DOUBLE
8774: EQUAL
8775: IFTRUE 8779
8777: GO 8820
8779: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8780: LD_ADDR_VAR 0 8
8784: PUSH
8785: LD_VAR 0 8
8789: PPUSH
8790: LD_INT 1
8792: PPUSH
8793: LD_VAR 0 2
8797: PUSH
8798: LD_VAR 0 3
8802: PUSH
8803: LD_VAR 0 4
8807: PLUS
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PPUSH
8813: CALL_OW 2
8817: ST_TO_ADDR
8818: GO 8925
8820: LD_INT 4
8822: DOUBLE
8823: EQUAL
8824: IFTRUE 8828
8826: GO 8869
8828: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8829: LD_ADDR_VAR 0 8
8833: PUSH
8834: LD_VAR 0 8
8838: PPUSH
8839: LD_INT 1
8841: PPUSH
8842: LD_VAR 0 2
8846: PUSH
8847: LD_VAR 0 4
8851: MINUS
8852: PUSH
8853: LD_VAR 0 3
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 2
8866: ST_TO_ADDR
8867: GO 8925
8869: LD_INT 5
8871: DOUBLE
8872: EQUAL
8873: IFTRUE 8877
8875: GO 8924
8877: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8878: LD_ADDR_VAR 0 8
8882: PUSH
8883: LD_VAR 0 8
8887: PPUSH
8888: LD_INT 1
8890: PPUSH
8891: LD_VAR 0 2
8895: PUSH
8896: LD_VAR 0 4
8900: MINUS
8901: PUSH
8902: LD_VAR 0 3
8906: PUSH
8907: LD_VAR 0 4
8911: MINUS
8912: PUSH
8913: EMPTY
8914: LIST
8915: LIST
8916: PPUSH
8917: CALL_OW 2
8921: ST_TO_ADDR
8922: GO 8925
8924: POP
8925: GO 8604
8927: POP
8928: POP
// if dist < 30 then
8929: LD_VAR 0 4
8933: PUSH
8934: LD_INT 30
8936: LESS
8937: IFFALSE 8949
// c = 1 else
8939: LD_ADDR_VAR 0 14
8943: PUSH
8944: LD_INT 1
8946: ST_TO_ADDR
8947: GO 8957
// c = 2 ;
8949: LD_ADDR_VAR 0 14
8953: PUSH
8954: LD_INT 2
8956: ST_TO_ADDR
// b = 1 ;
8957: LD_ADDR_VAR 0 11
8961: PUSH
8962: LD_INT 1
8964: ST_TO_ADDR
// while b <= ( dist - 1 ) do
8965: LD_VAR 0 11
8969: PUSH
8970: LD_VAR 0 4
8974: PUSH
8975: LD_INT 1
8977: MINUS
8978: LESSEQUAL
8979: IFFALSE 9407
// begin if 0 in dir_list and 1 in dir_list then
8981: LD_INT 0
8983: PUSH
8984: LD_VAR 0 10
8988: IN
8989: PUSH
8990: LD_INT 1
8992: PUSH
8993: LD_VAR 0 10
8997: IN
8998: AND
8999: IFFALSE 9051
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9001: LD_ADDR_VAR 0 8
9005: PUSH
9006: LD_VAR 0 8
9010: PPUSH
9011: LD_INT 1
9013: PPUSH
9014: LD_VAR 0 2
9018: PUSH
9019: LD_VAR 0 11
9023: PLUS
9024: PUSH
9025: LD_VAR 0 3
9029: PUSH
9030: LD_VAR 0 4
9034: MINUS
9035: PUSH
9036: LD_VAR 0 11
9040: PLUS
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 2
9050: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9051: LD_INT 1
9053: PUSH
9054: LD_VAR 0 10
9058: IN
9059: PUSH
9060: LD_INT 2
9062: PUSH
9063: LD_VAR 0 10
9067: IN
9068: AND
9069: IFFALSE 9115
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9071: LD_ADDR_VAR 0 8
9075: PUSH
9076: LD_VAR 0 8
9080: PPUSH
9081: LD_INT 1
9083: PPUSH
9084: LD_VAR 0 2
9088: PUSH
9089: LD_VAR 0 4
9093: PLUS
9094: PUSH
9095: LD_VAR 0 3
9099: PUSH
9100: LD_VAR 0 11
9104: PLUS
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PPUSH
9110: CALL_OW 2
9114: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9115: LD_INT 2
9117: PUSH
9118: LD_VAR 0 10
9122: IN
9123: PUSH
9124: LD_INT 3
9126: PUSH
9127: LD_VAR 0 10
9131: IN
9132: AND
9133: IFFALSE 9185
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9135: LD_ADDR_VAR 0 8
9139: PUSH
9140: LD_VAR 0 8
9144: PPUSH
9145: LD_INT 1
9147: PPUSH
9148: LD_VAR 0 2
9152: PUSH
9153: LD_VAR 0 4
9157: PLUS
9158: PUSH
9159: LD_VAR 0 11
9163: MINUS
9164: PUSH
9165: LD_VAR 0 3
9169: PUSH
9170: LD_VAR 0 4
9174: PLUS
9175: PUSH
9176: EMPTY
9177: LIST
9178: LIST
9179: PPUSH
9180: CALL_OW 2
9184: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9185: LD_INT 3
9187: PUSH
9188: LD_VAR 0 10
9192: IN
9193: PUSH
9194: LD_INT 4
9196: PUSH
9197: LD_VAR 0 10
9201: IN
9202: AND
9203: IFFALSE 9255
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9205: LD_ADDR_VAR 0 8
9209: PUSH
9210: LD_VAR 0 8
9214: PPUSH
9215: LD_INT 1
9217: PPUSH
9218: LD_VAR 0 2
9222: PUSH
9223: LD_VAR 0 11
9227: MINUS
9228: PUSH
9229: LD_VAR 0 3
9233: PUSH
9234: LD_VAR 0 4
9238: PLUS
9239: PUSH
9240: LD_VAR 0 11
9244: MINUS
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PPUSH
9250: CALL_OW 2
9254: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9255: LD_INT 4
9257: PUSH
9258: LD_VAR 0 10
9262: IN
9263: PUSH
9264: LD_INT 5
9266: PUSH
9267: LD_VAR 0 10
9271: IN
9272: AND
9273: IFFALSE 9319
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9275: LD_ADDR_VAR 0 8
9279: PUSH
9280: LD_VAR 0 8
9284: PPUSH
9285: LD_INT 1
9287: PPUSH
9288: LD_VAR 0 2
9292: PUSH
9293: LD_VAR 0 4
9297: MINUS
9298: PUSH
9299: LD_VAR 0 3
9303: PUSH
9304: LD_VAR 0 11
9308: MINUS
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: PPUSH
9314: CALL_OW 2
9318: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9319: LD_INT 5
9321: PUSH
9322: LD_VAR 0 10
9326: IN
9327: PUSH
9328: LD_INT 0
9330: PUSH
9331: LD_VAR 0 10
9335: IN
9336: AND
9337: IFFALSE 9389
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9339: LD_ADDR_VAR 0 8
9343: PUSH
9344: LD_VAR 0 8
9348: PPUSH
9349: LD_INT 1
9351: PPUSH
9352: LD_VAR 0 2
9356: PUSH
9357: LD_VAR 0 4
9361: MINUS
9362: PUSH
9363: LD_VAR 0 11
9367: PLUS
9368: PUSH
9369: LD_VAR 0 3
9373: PUSH
9374: LD_VAR 0 4
9378: MINUS
9379: PUSH
9380: EMPTY
9381: LIST
9382: LIST
9383: PPUSH
9384: CALL_OW 2
9388: ST_TO_ADDR
// b = b + c end ;
9389: LD_ADDR_VAR 0 11
9393: PUSH
9394: LD_VAR 0 11
9398: PUSH
9399: LD_VAR 0 14
9403: PLUS
9404: ST_TO_ADDR
9405: GO 8965
// if list_coords = 0 then
9407: LD_VAR 0 8
9411: PUSH
9412: LD_INT 0
9414: EQUAL
9415: IFFALSE 9419
// exit ;
9417: GO 9927
// repeat min_dist = 5000 ;
9419: LD_ADDR_VAR 0 12
9423: PUSH
9424: LD_INT 5000
9426: ST_TO_ADDR
// for b in list_coords do
9427: LD_ADDR_VAR 0 11
9431: PUSH
9432: LD_VAR 0 8
9436: PUSH
9437: FOR_IN
9438: IFFALSE 9497
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9440: LD_ADDR_VAR 0 13
9444: PUSH
9445: LD_VAR 0 1
9449: PPUSH
9450: LD_VAR 0 11
9454: PUSH
9455: LD_INT 1
9457: ARRAY
9458: PPUSH
9459: LD_VAR 0 11
9463: PUSH
9464: LD_INT 2
9466: ARRAY
9467: PPUSH
9468: CALL_OW 297
9472: ST_TO_ADDR
// if temp_dist < min_dist then
9473: LD_VAR 0 13
9477: PUSH
9478: LD_VAR 0 12
9482: LESS
9483: IFFALSE 9495
// min_dist = temp_dist ;
9485: LD_ADDR_VAR 0 12
9489: PUSH
9490: LD_VAR 0 13
9494: ST_TO_ADDR
// end ;
9495: GO 9437
9497: POP
9498: POP
// c = 0 ;
9499: LD_ADDR_VAR 0 14
9503: PUSH
9504: LD_INT 0
9506: ST_TO_ADDR
// repeat c = c + 1 ;
9507: LD_ADDR_VAR 0 14
9511: PUSH
9512: LD_VAR 0 14
9516: PUSH
9517: LD_INT 1
9519: PLUS
9520: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9521: LD_VAR 0 1
9525: PPUSH
9526: LD_VAR 0 8
9530: PUSH
9531: LD_VAR 0 14
9535: ARRAY
9536: PUSH
9537: LD_INT 1
9539: ARRAY
9540: PPUSH
9541: LD_VAR 0 8
9545: PUSH
9546: LD_VAR 0 14
9550: ARRAY
9551: PUSH
9552: LD_INT 2
9554: ARRAY
9555: PPUSH
9556: CALL_OW 297
9560: PUSH
9561: LD_VAR 0 12
9565: EQUAL
9566: IFFALSE 9631
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9568: LD_ADDR_VAR 0 7
9572: PUSH
9573: LD_VAR 0 7
9577: PPUSH
9578: LD_INT 1
9580: PPUSH
9581: LD_VAR 0 8
9585: PUSH
9586: LD_VAR 0 14
9590: ARRAY
9591: PPUSH
9592: CALL_OW 2
9596: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9597: LD_ADDR_VAR 0 8
9601: PUSH
9602: LD_VAR 0 8
9606: PPUSH
9607: LD_VAR 0 14
9611: PPUSH
9612: CALL_OW 3
9616: ST_TO_ADDR
// c = c - 1 ;
9617: LD_ADDR_VAR 0 14
9621: PUSH
9622: LD_VAR 0 14
9626: PUSH
9627: LD_INT 1
9629: MINUS
9630: ST_TO_ADDR
// end ; until c = list_coords ;
9631: LD_VAR 0 14
9635: PUSH
9636: LD_VAR 0 8
9640: EQUAL
9641: IFFALSE 9507
// c = 0 ;
9643: LD_ADDR_VAR 0 14
9647: PUSH
9648: LD_INT 0
9650: ST_TO_ADDR
// if list_nearest > 0 then
9651: LD_VAR 0 7
9655: PUSH
9656: LD_INT 0
9658: GREATER
9659: IFFALSE 9801
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9661: LD_ADDR_VAR 0 15
9665: PUSH
9666: LD_INT 1
9668: PPUSH
9669: LD_VAR 0 7
9673: PPUSH
9674: CALL_OW 12
9678: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9679: LD_ADDR_VAR 0 16
9683: PUSH
9684: LD_VAR 0 7
9688: PUSH
9689: LD_VAR 0 15
9693: ARRAY
9694: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9695: LD_VAR 0 16
9699: PUSH
9700: LD_INT 1
9702: ARRAY
9703: PPUSH
9704: LD_VAR 0 16
9708: PUSH
9709: LD_INT 2
9711: ARRAY
9712: PPUSH
9713: CALL_OW 488
9717: PUSH
9718: LD_INT 0
9720: GREATER
9721: PUSH
9722: LD_VAR 0 16
9726: PUSH
9727: LD_INT 1
9729: ARRAY
9730: PPUSH
9731: LD_VAR 0 16
9735: PUSH
9736: LD_INT 2
9738: ARRAY
9739: PPUSH
9740: CALL_OW 428
9744: PUSH
9745: LD_INT 0
9747: EQUAL
9748: AND
9749: IFFALSE 9761
// c = 1 else
9751: LD_ADDR_VAR 0 14
9755: PUSH
9756: LD_INT 1
9758: ST_TO_ADDR
9759: GO 9781
// list_nearest = Delete ( list_nearest , rand_num ) ;
9761: LD_ADDR_VAR 0 7
9765: PUSH
9766: LD_VAR 0 7
9770: PPUSH
9771: LD_VAR 0 15
9775: PPUSH
9776: CALL_OW 3
9780: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9781: LD_VAR 0 14
9785: PUSH
9786: LD_INT 1
9788: EQUAL
9789: PUSH
9790: LD_VAR 0 7
9794: PUSH
9795: LD_INT 0
9797: EQUAL
9798: OR
9799: IFFALSE 9661
// end ; until c = 1 or list_coords = 0 ;
9801: LD_VAR 0 14
9805: PUSH
9806: LD_INT 1
9808: EQUAL
9809: PUSH
9810: LD_VAR 0 8
9814: PUSH
9815: LD_INT 0
9817: EQUAL
9818: OR
9819: IFFALSE 9419
// attempts = attempts + 1 ;
9821: LD_ADDR_VAR 0 17
9825: PUSH
9826: LD_VAR 0 17
9830: PUSH
9831: LD_INT 1
9833: PLUS
9834: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9835: LD_VAR 0 14
9839: PUSH
9840: LD_INT 1
9842: EQUAL
9843: PUSH
9844: LD_VAR 0 17
9848: PUSH
9849: LD_INT 1
9851: GREATER
9852: OR
9853: IFFALSE 8378
// if c = 1 then
9855: LD_VAR 0 14
9859: PUSH
9860: LD_INT 1
9862: EQUAL
9863: IFFALSE 9927
// if add then
9865: LD_VAR 0 5
9869: IFFALSE 9900
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9871: LD_VAR 0 1
9875: PPUSH
9876: LD_VAR 0 16
9880: PUSH
9881: LD_INT 1
9883: ARRAY
9884: PPUSH
9885: LD_VAR 0 16
9889: PUSH
9890: LD_INT 2
9892: ARRAY
9893: PPUSH
9894: CALL_OW 171
9898: GO 9927
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9900: LD_VAR 0 1
9904: PPUSH
9905: LD_VAR 0 16
9909: PUSH
9910: LD_INT 1
9912: ARRAY
9913: PPUSH
9914: LD_VAR 0 16
9918: PUSH
9919: LD_INT 2
9921: ARRAY
9922: PPUSH
9923: CALL_OW 111
// end ;
9927: LD_VAR 0 6
9931: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
9932: LD_INT 0
9934: PPUSH
9935: PPUSH
9936: PPUSH
9937: PPUSH
9938: PPUSH
9939: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_VAR 0 2
9949: PPUSH
9950: CALL_OW 488
9954: NOT
9955: PUSH
9956: LD_VAR 0 3
9960: PPUSH
9961: LD_VAR 0 4
9965: PPUSH
9966: CALL_OW 488
9970: NOT
9971: OR
9972: IFFALSE 9985
// begin result = - 1 ;
9974: LD_ADDR_VAR 0 5
9978: PUSH
9979: LD_INT 1
9981: NEG
9982: ST_TO_ADDR
// exit ;
9983: GO 10145
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
9985: LD_ADDR_VAR 0 6
9989: PUSH
9990: LD_VAR 0 1
9994: PPUSH
9995: LD_VAR 0 2
9999: PPUSH
10000: LD_VAR 0 3
10004: PPUSH
10005: LD_VAR 0 4
10009: PPUSH
10010: CALL_OW 298
10014: ST_TO_ADDR
// dist_2 = 99999 ;
10015: LD_ADDR_VAR 0 7
10019: PUSH
10020: LD_INT 99999
10022: ST_TO_ADDR
// for b = 0 to 5 do
10023: LD_ADDR_VAR 0 8
10027: PUSH
10028: DOUBLE
10029: LD_INT 0
10031: DEC
10032: ST_TO_ADDR
10033: LD_INT 5
10035: PUSH
10036: FOR_TO
10037: IFFALSE 10133
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10039: LD_ADDR_VAR 0 9
10043: PUSH
10044: LD_VAR 0 1
10048: PPUSH
10049: LD_VAR 0 8
10053: PPUSH
10054: LD_VAR 0 6
10058: PPUSH
10059: CALL_OW 272
10063: PPUSH
10064: LD_VAR 0 2
10068: PPUSH
10069: LD_VAR 0 8
10073: PPUSH
10074: LD_VAR 0 6
10078: PPUSH
10079: CALL_OW 273
10083: PPUSH
10084: LD_VAR 0 3
10088: PPUSH
10089: LD_VAR 0 4
10093: PPUSH
10094: CALL_OW 298
10098: ST_TO_ADDR
// if temp_dist < dist_2 then
10099: LD_VAR 0 9
10103: PUSH
10104: LD_VAR 0 7
10108: LESS
10109: IFFALSE 10131
// begin dist_2 = temp_dist ;
10111: LD_ADDR_VAR 0 7
10115: PUSH
10116: LD_VAR 0 9
10120: ST_TO_ADDR
// dir = b ;
10121: LD_ADDR_VAR 0 10
10125: PUSH
10126: LD_VAR 0 8
10130: ST_TO_ADDR
// end ; end ;
10131: GO 10036
10133: POP
10134: POP
// result = dir ;
10135: LD_ADDR_VAR 0 5
10139: PUSH
10140: LD_VAR 0 10
10144: ST_TO_ADDR
// end ;
10145: LD_VAR 0 5
10149: RET
// export function MoveToHill ; begin
10150: LD_INT 0
10152: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10153: LD_EXP 45
10157: PPUSH
10158: LD_INT 65
10160: PPUSH
10161: LD_INT 59
10163: PPUSH
10164: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10168: LD_EXP 45
10172: PPUSH
10173: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10177: LD_EXP 46
10181: PPUSH
10182: LD_INT 65
10184: PPUSH
10185: LD_INT 58
10187: PPUSH
10188: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10192: LD_EXP 46
10196: PPUSH
10197: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10201: LD_EXP 47
10205: PPUSH
10206: LD_INT 64
10208: PPUSH
10209: LD_INT 57
10211: PPUSH
10212: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10216: LD_EXP 47
10220: PPUSH
10221: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10225: LD_EXP 48
10229: PPUSH
10230: LD_INT 64
10232: PPUSH
10233: LD_INT 56
10235: PPUSH
10236: CALL_OW 111
// AddComCrawl ( Balei ) ;
10240: LD_EXP 48
10244: PPUSH
10245: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10249: LD_EXP 49
10253: PPUSH
10254: LD_INT 63
10256: PPUSH
10257: LD_INT 55
10259: PPUSH
10260: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10264: LD_EXP 49
10268: PPUSH
10269: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10273: LD_EXP 50
10277: PPUSH
10278: LD_INT 66
10280: PPUSH
10281: LD_INT 58
10283: PPUSH
10284: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10288: LD_EXP 50
10292: PPUSH
10293: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10297: LD_EXP 52
10301: PPUSH
10302: CALL_OW 255
10306: PUSH
10307: LD_INT 6
10309: EQUAL
10310: PUSH
10311: LD_EXP 11
10315: AND
10316: IFFALSE 10342
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10318: LD_EXP 52
10322: PPUSH
10323: LD_INT 63
10325: PPUSH
10326: LD_INT 54
10328: PPUSH
10329: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10333: LD_EXP 52
10337: PPUSH
10338: CALL_OW 197
// end ; end ; end_of_file
10342: LD_VAR 0 1
10346: RET
// export function BurlakDying ; begin
10347: LD_INT 0
10349: PPUSH
// YouLost ( Burlak ) ;
10350: LD_STRING Burlak
10352: PPUSH
10353: CALL_OW 104
// end ;
10357: LD_VAR 0 1
10361: RET
// every 0 0$1 trigger kirovSolds = 0 do
10362: LD_EXP 54
10366: PUSH
10367: LD_INT 0
10369: EQUAL
10370: IFFALSE 10382
10372: GO 10374
10374: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10375: LD_STRING KirovSoldsDie
10377: PPUSH
10378: CALL_OW 104
10382: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10383: LD_EXP 21
10387: PUSH
10388: LD_INT 1
10390: PPUSH
10391: LD_INT 22
10393: PUSH
10394: LD_INT 3
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PUSH
10401: LD_INT 21
10403: PUSH
10404: LD_INT 1
10406: PUSH
10407: EMPTY
10408: LIST
10409: LIST
10410: PUSH
10411: EMPTY
10412: LIST
10413: LIST
10414: PPUSH
10415: CALL_OW 71
10419: PUSH
10420: LD_INT 0
10422: EQUAL
10423: AND
10424: IFFALSE 10618
10426: GO 10428
10428: DISABLE
10429: LD_INT 0
10431: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
10432: LD_EXP 51
10436: PPUSH
10437: CALL_OW 302
10441: PUSH
10442: LD_EXP 51
10446: PPUSH
10447: CALL_OW 255
10451: PUSH
10452: LD_INT 8
10454: EQUAL
10455: AND
10456: PUSH
10457: LD_EXP 52
10461: PPUSH
10462: CALL_OW 302
10466: PUSH
10467: LD_EXP 52
10471: PPUSH
10472: CALL_OW 255
10476: PUSH
10477: LD_INT 8
10479: EQUAL
10480: AND
10481: OR
10482: IFFALSE 10614
// begin case Query ( QExit2 ) of 1 :
10484: LD_STRING QExit2
10486: PPUSH
10487: CALL_OW 97
10491: PUSH
10492: LD_INT 1
10494: DOUBLE
10495: EQUAL
10496: IFTRUE 10500
10498: GO 10592
10500: POP
// begin if IsOk ( Belkov ) then
10501: LD_EXP 49
10505: PPUSH
10506: CALL_OW 302
10510: IFFALSE 10526
// Say ( Belkov , D12-Bel-1 ) else
10512: LD_EXP 49
10516: PPUSH
10517: LD_STRING D12-Bel-1
10519: PPUSH
10520: CALL_OW 88
10524: GO 10586
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10526: LD_INT 22
10528: PUSH
10529: LD_INT 3
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: PUSH
10536: LD_INT 21
10538: PUSH
10539: LD_INT 1
10541: PUSH
10542: EMPTY
10543: LIST
10544: LIST
10545: PUSH
10546: LD_INT 50
10548: PUSH
10549: EMPTY
10550: LIST
10551: PUSH
10552: LD_INT 26
10554: PUSH
10555: LD_INT 1
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: PUSH
10562: EMPTY
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: PPUSH
10568: CALL_OW 69
10572: PPUSH
10573: LD_STRING D12-RSol1-1
10575: PPUSH
10576: LD_STRING 
10578: PPUSH
10579: LD_INT 0
10581: PPUSH
10582: CALL 7937 0 4
// FinishMission ;
10586: CALL 10621 0 0
// end ; 2 :
10590: GO 10612
10592: LD_INT 2
10594: DOUBLE
10595: EQUAL
10596: IFTRUE 10600
10598: GO 10611
10600: POP
// begin wait ( 0 0$5 ) ;
10601: LD_INT 175
10603: PPUSH
10604: CALL_OW 67
// enable ;
10608: ENABLE
// end ; end ;
10609: GO 10612
10611: POP
// end else
10612: GO 10618
// FinishMission ;
10614: CALL 10621 0 0
// end ;
10618: PPOPN 1
10620: END
// function FinishMission ; begin
10621: LD_INT 0
10623: PPUSH
// SetRewards ;
10624: CALL 10645 0 0
// SavePlayerCharacters ;
10628: CALL 10996 0 0
// SaveGlobalVariables ;
10632: CALL 11126 0 0
// YouWin ;
10636: CALL_OW 103
// end ;
10640: LD_VAR 0 1
10644: RET
// function SetRewards ; begin
10645: LD_INT 0
10647: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10648: LD_EXP 18
10652: NOT
10653: PUSH
10654: LD_EXP 19
10658: NOT
10659: AND
10660: IFFALSE 10672
// AddMedal ( NoEscape , 1 ) ;
10662: LD_STRING NoEscape
10664: PPUSH
10665: LD_INT 1
10667: PPUSH
10668: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10672: LD_EXP 18
10676: PUSH
10677: LD_EXP 19
10681: NOT
10682: AND
10683: IFFALSE 10696
// AddMedal ( NoEscape , - 1 ) ;
10685: LD_STRING NoEscape
10687: PPUSH
10688: LD_INT 1
10690: NEG
10691: PPUSH
10692: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10696: LD_EXP 18
10700: NOT
10701: PUSH
10702: LD_EXP 19
10706: AND
10707: IFFALSE 10720
// AddMedal ( NoEscape , - 2 ) ;
10709: LD_STRING NoEscape
10711: PPUSH
10712: LD_INT 2
10714: NEG
10715: PPUSH
10716: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10720: LD_EXP 18
10724: PUSH
10725: LD_EXP 19
10729: AND
10730: IFFALSE 10743
// AddMedal ( NoEscape , - 3 ) ;
10732: LD_STRING NoEscape
10734: PPUSH
10735: LD_INT 3
10737: NEG
10738: PPUSH
10739: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10743: LD_EXP 11
10747: PUSH
10748: LD_EXP 52
10752: PPUSH
10753: CALL_OW 302
10757: AND
10758: PUSH
10759: LD_EXP 20
10763: AND
10764: PUSH
10765: LD_EXP 51
10769: PPUSH
10770: CALL_OW 302
10774: AND
10775: IFFALSE 10787
// AddMedal ( Gnyevko , 1 ) ;
10777: LD_STRING Gnyevko
10779: PPUSH
10780: LD_INT 1
10782: PPUSH
10783: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10787: LD_EXP 11
10791: NOT
10792: PUSH
10793: LD_EXP 20
10797: AND
10798: PUSH
10799: LD_EXP 51
10803: PPUSH
10804: CALL_OW 302
10808: AND
10809: IFFALSE 10822
// AddMedal ( Gnyevko , - 1 ) ;
10811: LD_STRING Gnyevko
10813: PPUSH
10814: LD_INT 1
10816: NEG
10817: PPUSH
10818: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10822: LD_EXP 11
10826: PUSH
10827: LD_EXP 20
10831: NOT
10832: PUSH
10833: LD_EXP 52
10837: PPUSH
10838: CALL_OW 302
10842: NOT
10843: OR
10844: PUSH
10845: LD_EXP 51
10849: PPUSH
10850: CALL_OW 302
10854: NOT
10855: OR
10856: AND
10857: IFFALSE 10870
// AddMedal ( Gnyevko , - 2 ) ;
10859: LD_STRING Gnyevko
10861: PPUSH
10862: LD_INT 2
10864: NEG
10865: PPUSH
10866: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
10870: LD_EXP 11
10874: NOT
10875: PUSH
10876: LD_EXP 20
10880: NOT
10881: AND
10882: PUSH
10883: LD_EXP 52
10887: PPUSH
10888: CALL_OW 302
10892: NOT
10893: PUSH
10894: LD_EXP 51
10898: PPUSH
10899: CALL_OW 302
10903: NOT
10904: AND
10905: OR
10906: IFFALSE 10919
// AddMedal ( Gnyevko , - 3 ) ;
10908: LD_STRING Gnyevko
10910: PPUSH
10911: LD_INT 3
10913: NEG
10914: PPUSH
10915: CALL_OW 101
// if lostComradesCounter = 0 then
10919: LD_EXP 22
10923: PUSH
10924: LD_INT 0
10926: EQUAL
10927: IFFALSE 10941
// AddMedal ( NoLosses , 1 ) else
10929: LD_STRING NoLosses
10931: PPUSH
10932: LD_INT 1
10934: PPUSH
10935: CALL_OW 101
10939: GO 10951
// AddMedal ( NoLosses , 0 ) ;
10941: LD_STRING NoLosses
10943: PPUSH
10944: LD_INT 0
10946: PPUSH
10947: CALL_OW 101
// GiveMedals ( Main ) ;
10951: LD_STRING Main
10953: PPUSH
10954: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10958: LD_INT 22
10960: PUSH
10961: LD_INT 3
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PUSH
10968: LD_INT 21
10970: PUSH
10971: LD_INT 1
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: PPUSH
10982: CALL_OW 69
10986: PPUSH
10987: CALL_OW 43
// end ;
10991: LD_VAR 0 1
10995: RET
// function SavePlayerCharacters ; var others ; begin
10996: LD_INT 0
10998: PPUSH
10999: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
11000: LD_EXP 44
11004: PPUSH
11005: LD_STRING Burlak
11007: PPUSH
11008: CALL 8116 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
11012: LD_EXP 52
11016: PPUSH
11017: LD_STRING Gnyevko
11019: PPUSH
11020: CALL 8116 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
11024: LD_EXP 49
11028: PPUSH
11029: LD_STRING Belkov
11031: PPUSH
11032: CALL 8116 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
11036: LD_EXP 51
11040: PPUSH
11041: LD_STRING Kirilenkova
11043: PPUSH
11044: CALL 8116 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
11048: LD_ADDR_VAR 0 2
11052: PUSH
11053: LD_INT 22
11055: PUSH
11056: LD_INT 3
11058: PUSH
11059: EMPTY
11060: LIST
11061: LIST
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: PPUSH
11077: CALL_OW 69
11081: PUSH
11082: LD_EXP 44
11086: PUSH
11087: LD_EXP 52
11091: PUSH
11092: LD_EXP 49
11096: PUSH
11097: LD_EXP 51
11101: PUSH
11102: EMPTY
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: DIFF
11108: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
11109: LD_VAR 0 2
11113: PPUSH
11114: LD_STRING other_survivors
11116: PPUSH
11117: CALL 8172 0 2
// end ;
11121: LD_VAR 0 1
11125: RET
// function SaveGlobalVariables ; begin
11126: LD_INT 0
11128: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
11129: LD_EXP 1
11133: PPUSH
11134: LD_STRING 01_GladstoneStatus
11136: PPUSH
11137: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
11141: LD_EXP 2
11145: PPUSH
11146: LD_STRING 01_JohannaStatus
11148: PPUSH
11149: CALL_OW 39
// end ; end_of_file
11153: LD_VAR 0 1
11157: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
11158: LD_INT 0
11160: PPUSH
11161: PPUSH
11162: PPUSH
// uc_side = 1 ;
11163: LD_ADDR_OWVAR 20
11167: PUSH
11168: LD_INT 1
11170: ST_TO_ADDR
// hc_class := 1 ;
11171: LD_ADDR_OWVAR 28
11175: PUSH
11176: LD_INT 1
11178: ST_TO_ADDR
// hc_sex := sex_male ;
11179: LD_ADDR_OWVAR 27
11183: PUSH
11184: LD_INT 1
11186: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11187: LD_ADDR_OWVAR 33
11191: PUSH
11192: LD_STRING AmGalRemake
11194: ST_TO_ADDR
// hc_face_number := 1 ;
11195: LD_ADDR_OWVAR 34
11199: PUSH
11200: LD_INT 1
11202: ST_TO_ADDR
// hc_name := Charles Brown ;
11203: LD_ADDR_OWVAR 26
11207: PUSH
11208: LD_STRING Charles Brown
11210: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11211: LD_ADDR_OWVAR 29
11215: PUSH
11216: LD_INT 12
11218: PUSH
11219: LD_INT 11
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11226: LD_ADDR_OWVAR 31
11230: PUSH
11231: LD_INT 1
11233: PUSH
11234: LD_INT 0
11236: PUSH
11237: LD_INT 1
11239: PUSH
11240: LD_INT 1
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: ST_TO_ADDR
// Charles = CreateHuman ;
11249: LD_ADDR_EXP 40
11253: PUSH
11254: CALL_OW 44
11258: ST_TO_ADDR
// hc_class := 1 ;
11259: LD_ADDR_OWVAR 28
11263: PUSH
11264: LD_INT 1
11266: ST_TO_ADDR
// hc_sex := sex_female ;
11267: LD_ADDR_OWVAR 27
11271: PUSH
11272: LD_INT 2
11274: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11275: LD_ADDR_OWVAR 33
11279: PUSH
11280: LD_STRING AmGalRemake
11282: ST_TO_ADDR
// hc_face_number := 2 ;
11283: LD_ADDR_OWVAR 34
11287: PUSH
11288: LD_INT 2
11290: ST_TO_ADDR
// hc_name := Johanna Holland ;
11291: LD_ADDR_OWVAR 26
11295: PUSH
11296: LD_STRING Johanna Holland
11298: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11299: LD_ADDR_OWVAR 29
11303: PUSH
11304: LD_INT 12
11306: PUSH
11307: LD_INT 11
11309: PUSH
11310: EMPTY
11311: LIST
11312: LIST
11313: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11314: LD_ADDR_OWVAR 31
11318: PUSH
11319: LD_EXP 34
11323: PUSH
11324: LD_INT 0
11326: PPUSH
11327: LD_INT 2
11329: PPUSH
11330: CALL_OW 12
11334: PUSH
11335: LD_INT 0
11337: PPUSH
11338: LD_INT 2
11340: PPUSH
11341: CALL_OW 12
11345: PUSH
11346: LD_INT 0
11348: PPUSH
11349: LD_INT 2
11351: PPUSH
11352: CALL_OW 12
11356: PUSH
11357: EMPTY
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: ST_TO_ADDR
// Johanna = CreateHuman ;
11363: LD_ADDR_EXP 41
11367: PUSH
11368: CALL_OW 44
11372: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11373: LD_EXP 41
11377: PPUSH
11378: LD_INT 19
11380: PPUSH
11381: LD_INT 0
11383: PPUSH
11384: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11388: LD_EXP 41
11392: PPUSH
11393: LD_INT 23
11395: PPUSH
11396: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11400: LD_ADDR_EXP 42
11404: PUSH
11405: LD_STRING Gladstone
11407: PPUSH
11408: LD_INT 0
11410: PPUSH
11411: CALL 7874 0 2
11415: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
11416: LD_EXP 42
11420: PPUSH
11421: LD_INT 22
11423: PPUSH
11424: CALL_OW 52
// amApemans = [ ] ;
11428: LD_ADDR_EXP 43
11432: PUSH
11433: EMPTY
11434: ST_TO_ADDR
// for i := 1 to amApeAmount do
11435: LD_ADDR_VAR 0 2
11439: PUSH
11440: DOUBLE
11441: LD_INT 1
11443: DEC
11444: ST_TO_ADDR
11445: LD_EXP 33
11449: PUSH
11450: FOR_TO
11451: IFFALSE 11566
// begin hc_class := class_apeman ;
11453: LD_ADDR_OWVAR 28
11457: PUSH
11458: LD_INT 12
11460: ST_TO_ADDR
// hc_gallery :=  ;
11461: LD_ADDR_OWVAR 33
11465: PUSH
11466: LD_STRING 
11468: ST_TO_ADDR
// hc_name :=  ;
11469: LD_ADDR_OWVAR 26
11473: PUSH
11474: LD_STRING 
11476: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11477: LD_ADDR_OWVAR 31
11481: PUSH
11482: LD_EXP 34
11486: PUSH
11487: LD_INT 0
11489: PPUSH
11490: LD_INT 2
11492: PPUSH
11493: CALL_OW 12
11497: PUSH
11498: LD_INT 0
11500: PPUSH
11501: LD_INT 2
11503: PPUSH
11504: CALL_OW 12
11508: PUSH
11509: LD_INT 0
11511: PPUSH
11512: LD_INT 2
11514: PPUSH
11515: CALL_OW 12
11519: PUSH
11520: EMPTY
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: ST_TO_ADDR
// ape = CreateHuman ;
11526: LD_ADDR_VAR 0 3
11530: PUSH
11531: CALL_OW 44
11535: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11536: LD_VAR 0 3
11540: PPUSH
11541: LD_INT 22
11543: PPUSH
11544: CALL_OW 52
// amApemans = amApemans ^ ape ;
11548: LD_ADDR_EXP 43
11552: PUSH
11553: LD_EXP 43
11557: PUSH
11558: LD_VAR 0 3
11562: ADD
11563: ST_TO_ADDR
// end ;
11564: GO 11450
11566: POP
11567: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11568: LD_INT 23
11570: PPUSH
11571: LD_EXP 31
11575: PPUSH
11576: CALL_OW 234
// end ; end_of_file
11580: LD_VAR 0 1
11584: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11585: LD_INT 0
11587: PPUSH
// PrepareHero ;
11588: CALL 11613 0 0
// PreparePokryshkinTeams ;
11592: CALL 11707 0 0
// PrepareJelena ;
11596: CALL 11972 0 0
// PrepareGnyevko ;
11600: CALL 12004 0 0
// PrepareKurin ;
11604: CALL 11675 0 0
// end ;
11608: LD_VAR 0 1
11612: RET
// function PrepareHero ; begin
11613: LD_INT 0
11615: PPUSH
// uc_side = 3 ;
11616: LD_ADDR_OWVAR 20
11620: PUSH
11621: LD_INT 3
11623: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11624: LD_ADDR_EXP 44
11628: PUSH
11629: LD_STRING Burlak
11631: PPUSH
11632: LD_INT 0
11634: PPUSH
11635: CALL 7874 0 2
11639: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11640: LD_EXP 44
11644: PPUSH
11645: LD_EXP 35
11649: PUSH
11650: LD_INT 1
11652: ARRAY
11653: PPUSH
11654: LD_EXP 35
11658: PUSH
11659: LD_INT 2
11661: ARRAY
11662: PPUSH
11663: LD_INT 1
11665: PPUSH
11666: CALL_OW 48
// end ;
11670: LD_VAR 0 1
11674: RET
// function PrepareKurin ; begin
11675: LD_INT 0
11677: PPUSH
// uc_side = 6 ;
11678: LD_ADDR_OWVAR 20
11682: PUSH
11683: LD_INT 6
11685: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11686: LD_ADDR_EXP 53
11690: PUSH
11691: LD_STRING Kurin
11693: PPUSH
11694: LD_INT 0
11696: PPUSH
11697: CALL 7874 0 2
11701: ST_TO_ADDR
// end ;
11702: LD_VAR 0 1
11706: RET
// function PreparePokryshkinTeams ; begin
11707: LD_INT 0
11709: PPUSH
// uc_side = 6 ;
11710: LD_ADDR_OWVAR 20
11714: PUSH
11715: LD_INT 6
11717: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11718: LD_ADDR_EXP 45
11722: PUSH
11723: LD_STRING Pokryshkin
11725: PPUSH
11726: LD_INT 0
11728: PPUSH
11729: CALL 7874 0 2
11733: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11734: LD_ADDR_EXP 46
11738: PUSH
11739: LD_STRING Saseda
11741: PPUSH
11742: LD_INT 0
11744: PPUSH
11745: CALL 7874 0 2
11749: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11750: LD_ADDR_EXP 47
11754: PUSH
11755: LD_STRING Jaworska
11757: PPUSH
11758: LD_INT 0
11760: PPUSH
11761: CALL 7874 0 2
11765: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11766: LD_ADDR_EXP 48
11770: PUSH
11771: LD_STRING Balei
11773: PPUSH
11774: LD_INT 0
11776: PPUSH
11777: CALL 7874 0 2
11781: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11782: LD_ADDR_EXP 49
11786: PUSH
11787: LD_STRING Belkov
11789: PPUSH
11790: LD_INT 0
11792: PPUSH
11793: CALL 7874 0 2
11797: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
11798: LD_EXP 45
11802: PPUSH
11803: LD_INT 25
11805: PPUSH
11806: LD_INT 0
11808: PPUSH
11809: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11813: LD_EXP 46
11817: PPUSH
11818: LD_INT 17
11820: PPUSH
11821: LD_INT 0
11823: PPUSH
11824: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11828: LD_EXP 47
11832: PPUSH
11833: LD_INT 17
11835: PPUSH
11836: LD_INT 0
11838: PPUSH
11839: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11843: LD_EXP 48
11847: PPUSH
11848: LD_INT 17
11850: PPUSH
11851: LD_INT 0
11853: PPUSH
11854: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
11858: LD_EXP 49
11862: PPUSH
11863: LD_INT 17
11865: PPUSH
11866: LD_INT 0
11868: PPUSH
11869: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
11873: LD_ADDR_EXP 54
11877: PUSH
11878: LD_EXP 45
11882: PUSH
11883: LD_EXP 46
11887: PUSH
11888: LD_EXP 48
11892: PUSH
11893: LD_EXP 49
11897: PUSH
11898: LD_EXP 47
11902: PUSH
11903: EMPTY
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: ST_TO_ADDR
// if Difficulty < 3 then
11910: LD_OWVAR 67
11914: PUSH
11915: LD_INT 3
11917: LESS
11918: IFFALSE 11967
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
11920: LD_ADDR_EXP 50
11924: PUSH
11925: LD_STRING Jaunzeme
11927: PPUSH
11928: LD_INT 0
11930: PPUSH
11931: CALL 7874 0 2
11935: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
11936: LD_EXP 50
11940: PPUSH
11941: LD_INT 26
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
11951: LD_ADDR_EXP 54
11955: PUSH
11956: LD_EXP 54
11960: PUSH
11961: LD_EXP 50
11965: ADD
11966: ST_TO_ADDR
// end ; end ;
11967: LD_VAR 0 1
11971: RET
// function PrepareJelena ; begin
11972: LD_INT 0
11974: PPUSH
// uc_side = 8 ;
11975: LD_ADDR_OWVAR 20
11979: PUSH
11980: LD_INT 8
11982: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
11983: LD_ADDR_EXP 51
11987: PUSH
11988: LD_STRING Kirilenkova
11990: PPUSH
11991: LD_INT 0
11993: PPUSH
11994: CALL 7874 0 2
11998: ST_TO_ADDR
// end ;
11999: LD_VAR 0 1
12003: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
12004: LD_INT 0
12006: PPUSH
12007: PPUSH
12008: PPUSH
12009: PPUSH
// uc_side = 8 ;
12010: LD_ADDR_OWVAR 20
12014: PUSH
12015: LD_INT 8
12017: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
12018: LD_ADDR_EXP 52
12022: PUSH
12023: LD_STRING Gnyevko
12025: PPUSH
12026: LD_INT 0
12028: PPUSH
12029: CALL 7874 0 2
12033: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
12034: LD_ADDR_VAR 0 4
12038: PUSH
12039: LD_EXP 36
12043: PUSH
12044: LD_INT 1
12046: PPUSH
12047: LD_EXP 36
12051: PPUSH
12052: CALL_OW 12
12056: ARRAY
12057: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
12058: LD_EXP 52
12062: PPUSH
12063: LD_VAR 0 4
12067: PUSH
12068: LD_INT 1
12070: ARRAY
12071: PPUSH
12072: LD_VAR 0 4
12076: PUSH
12077: LD_INT 2
12079: ARRAY
12080: PPUSH
12081: LD_INT 0
12083: PPUSH
12084: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
12088: LD_EXP 52
12092: PPUSH
12093: LD_INT 500
12095: PPUSH
12096: CALL_OW 234
// ComHold ( Gnyevko ) ;
12100: LD_EXP 52
12104: PPUSH
12105: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
12109: LD_ADDR_VAR 0 3
12113: PUSH
12114: DOUBLE
12115: LD_INT 1
12117: DEC
12118: ST_TO_ADDR
12119: LD_EXP 25
12123: PUSH
12124: LD_INT 1
12126: ARRAY
12127: PUSH
12128: LD_INT 3
12130: PUSH
12131: LD_INT 2
12133: PUSH
12134: LD_INT 1
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: PUSH
12142: LD_OWVAR 67
12146: ARRAY
12147: MINUS
12148: PUSH
12149: FOR_TO
12150: IFFALSE 12280
// begin uc_side = 0 ;
12152: LD_ADDR_OWVAR 20
12156: PUSH
12157: LD_INT 0
12159: ST_TO_ADDR
// uc_nation = nation_nature ;
12160: LD_ADDR_OWVAR 21
12164: PUSH
12165: LD_INT 0
12167: ST_TO_ADDR
// hc_class = class_apeman ;
12168: LD_ADDR_OWVAR 28
12172: PUSH
12173: LD_INT 12
12175: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12176: LD_ADDR_OWVAR 31
12180: PUSH
12181: LD_EXP 26
12185: PUSH
12186: LD_INT 1
12188: ARRAY
12189: PUSH
12190: LD_EXP 26
12194: PUSH
12195: LD_INT 2
12197: ARRAY
12198: PUSH
12199: LD_EXP 26
12203: PUSH
12204: LD_INT 3
12206: ARRAY
12207: PUSH
12208: LD_EXP 26
12212: PUSH
12213: LD_INT 4
12215: ARRAY
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12223: LD_ADDR_OWVAR 35
12227: PUSH
12228: LD_EXP 32
12232: ST_TO_ADDR
// un = CreateHuman ;
12233: LD_ADDR_VAR 0 2
12237: PUSH
12238: CALL_OW 44
12242: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12243: LD_VAR 0 2
12247: PPUSH
12248: LD_EXP 52
12252: PPUSH
12253: CALL_OW 250
12257: PPUSH
12258: LD_EXP 52
12262: PPUSH
12263: CALL_OW 251
12267: PPUSH
12268: LD_INT 8
12270: PPUSH
12271: LD_INT 0
12273: PPUSH
12274: CALL_OW 50
// end ;
12278: GO 12149
12280: POP
12281: POP
// end ; end_of_file
12282: LD_VAR 0 1
12286: RET
// export function PrepareNature ; var i , un ; begin
12287: LD_INT 0
12289: PPUSH
12290: PPUSH
12291: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12292: LD_ADDR_VAR 0 2
12296: PUSH
12297: DOUBLE
12298: LD_INT 1
12300: DEC
12301: ST_TO_ADDR
12302: LD_EXP 25
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PUSH
12311: FOR_TO
12312: IFFALSE 12422
// begin uc_side = 0 ;
12314: LD_ADDR_OWVAR 20
12318: PUSH
12319: LD_INT 0
12321: ST_TO_ADDR
// uc_nation = nation_nature ;
12322: LD_ADDR_OWVAR 21
12326: PUSH
12327: LD_INT 0
12329: ST_TO_ADDR
// hc_class = class_apeman ;
12330: LD_ADDR_OWVAR 28
12334: PUSH
12335: LD_INT 12
12337: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12338: LD_ADDR_OWVAR 31
12342: PUSH
12343: LD_EXP 26
12347: PUSH
12348: LD_INT 1
12350: ARRAY
12351: PUSH
12352: LD_EXP 26
12356: PUSH
12357: LD_INT 2
12359: ARRAY
12360: PUSH
12361: LD_EXP 26
12365: PUSH
12366: LD_INT 3
12368: ARRAY
12369: PUSH
12370: LD_EXP 26
12374: PUSH
12375: LD_INT 4
12377: ARRAY
12378: PUSH
12379: EMPTY
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12385: LD_ADDR_OWVAR 35
12389: PUSH
12390: LD_EXP 32
12394: ST_TO_ADDR
// un = CreateHuman ;
12395: LD_ADDR_VAR 0 3
12399: PUSH
12400: CALL_OW 44
12404: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
12405: LD_VAR 0 3
12409: PPUSH
12410: LD_INT 16
12412: PPUSH
12413: LD_INT 0
12415: PPUSH
12416: CALL_OW 49
// end ;
12420: GO 12311
12422: POP
12423: POP
// for i := 1 to animalsAmount [ 2 ] do
12424: LD_ADDR_VAR 0 2
12428: PUSH
12429: DOUBLE
12430: LD_INT 1
12432: DEC
12433: ST_TO_ADDR
12434: LD_EXP 25
12438: PUSH
12439: LD_INT 2
12441: ARRAY
12442: PUSH
12443: FOR_TO
12444: IFFALSE 12554
// begin uc_side = 0 ;
12446: LD_ADDR_OWVAR 20
12450: PUSH
12451: LD_INT 0
12453: ST_TO_ADDR
// uc_nation = nation_nature ;
12454: LD_ADDR_OWVAR 21
12458: PUSH
12459: LD_INT 0
12461: ST_TO_ADDR
// hc_class = class_phororhacos ;
12462: LD_ADDR_OWVAR 28
12466: PUSH
12467: LD_INT 18
12469: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12470: LD_ADDR_OWVAR 31
12474: PUSH
12475: LD_EXP 26
12479: PUSH
12480: LD_INT 1
12482: ARRAY
12483: PUSH
12484: LD_EXP 26
12488: PUSH
12489: LD_INT 2
12491: ARRAY
12492: PUSH
12493: LD_EXP 26
12497: PUSH
12498: LD_INT 3
12500: ARRAY
12501: PUSH
12502: LD_EXP 26
12506: PUSH
12507: LD_INT 4
12509: ARRAY
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12517: LD_ADDR_OWVAR 35
12521: PUSH
12522: LD_EXP 27
12526: ST_TO_ADDR
// un = CreateHuman ;
12527: LD_ADDR_VAR 0 3
12531: PUSH
12532: CALL_OW 44
12536: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12537: LD_VAR 0 3
12541: PPUSH
12542: LD_INT 15
12544: PPUSH
12545: LD_INT 0
12547: PPUSH
12548: CALL_OW 49
// end ;
12552: GO 12443
12554: POP
12555: POP
// for i := 1 to animalsAmount [ 3 ] do
12556: LD_ADDR_VAR 0 2
12560: PUSH
12561: DOUBLE
12562: LD_INT 1
12564: DEC
12565: ST_TO_ADDR
12566: LD_EXP 25
12570: PUSH
12571: LD_INT 3
12573: ARRAY
12574: PUSH
12575: FOR_TO
12576: IFFALSE 12686
// begin uc_side = 0 ;
12578: LD_ADDR_OWVAR 20
12582: PUSH
12583: LD_INT 0
12585: ST_TO_ADDR
// uc_nation = nation_nature ;
12586: LD_ADDR_OWVAR 21
12590: PUSH
12591: LD_INT 0
12593: ST_TO_ADDR
// hc_class = class_tiger ;
12594: LD_ADDR_OWVAR 28
12598: PUSH
12599: LD_INT 14
12601: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12602: LD_ADDR_OWVAR 31
12606: PUSH
12607: LD_EXP 26
12611: PUSH
12612: LD_INT 1
12614: ARRAY
12615: PUSH
12616: LD_EXP 26
12620: PUSH
12621: LD_INT 2
12623: ARRAY
12624: PUSH
12625: LD_EXP 26
12629: PUSH
12630: LD_INT 3
12632: ARRAY
12633: PUSH
12634: LD_EXP 26
12638: PUSH
12639: LD_INT 4
12641: ARRAY
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12649: LD_ADDR_OWVAR 35
12653: PUSH
12654: LD_EXP 27
12658: ST_TO_ADDR
// un = CreateHuman ;
12659: LD_ADDR_VAR 0 3
12663: PUSH
12664: CALL_OW 44
12668: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12669: LD_VAR 0 3
12673: PPUSH
12674: LD_INT 15
12676: PPUSH
12677: LD_INT 0
12679: PPUSH
12680: CALL_OW 49
// end ;
12684: GO 12575
12686: POP
12687: POP
// for i := 1 to animalsAmount [ 4 ] do
12688: LD_ADDR_VAR 0 2
12692: PUSH
12693: DOUBLE
12694: LD_INT 1
12696: DEC
12697: ST_TO_ADDR
12698: LD_EXP 25
12702: PUSH
12703: LD_INT 4
12705: ARRAY
12706: PUSH
12707: FOR_TO
12708: IFFALSE 12818
// begin uc_side = 0 ;
12710: LD_ADDR_OWVAR 20
12714: PUSH
12715: LD_INT 0
12717: ST_TO_ADDR
// uc_nation = nation_nature ;
12718: LD_ADDR_OWVAR 21
12722: PUSH
12723: LD_INT 0
12725: ST_TO_ADDR
// hc_class = 21 ;
12726: LD_ADDR_OWVAR 28
12730: PUSH
12731: LD_INT 21
12733: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12734: LD_ADDR_OWVAR 31
12738: PUSH
12739: LD_EXP 26
12743: PUSH
12744: LD_INT 1
12746: ARRAY
12747: PUSH
12748: LD_EXP 26
12752: PUSH
12753: LD_INT 2
12755: ARRAY
12756: PUSH
12757: LD_EXP 26
12761: PUSH
12762: LD_INT 3
12764: ARRAY
12765: PUSH
12766: LD_EXP 26
12770: PUSH
12771: LD_INT 4
12773: ARRAY
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12781: LD_ADDR_OWVAR 35
12785: PUSH
12786: LD_EXP 27
12790: ST_TO_ADDR
// un = CreateHuman ;
12791: LD_ADDR_VAR 0 3
12795: PUSH
12796: CALL_OW 44
12800: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12801: LD_VAR 0 3
12805: PPUSH
12806: LD_INT 15
12808: PPUSH
12809: LD_INT 0
12811: PPUSH
12812: CALL_OW 49
// end ;
12816: GO 12707
12818: POP
12819: POP
// end ; end_of_file
12820: LD_VAR 0 1
12824: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12825: LD_VAR 0 1
12829: PUSH
12830: LD_EXP 44
12834: EQUAL
12835: PUSH
12836: LD_EXP 51
12840: PPUSH
12841: CALL_OW 255
12845: PUSH
12846: LD_INT 3
12848: EQUAL
12849: NOT
12850: AND
12851: PUSH
12852: LD_EXP 51
12856: PPUSH
12857: CALL_OW 302
12861: NOT
12862: AND
12863: IFFALSE 12869
// BurlakDying ;
12865: CALL 10347 0 0
// if unit = Gladstone then
12869: LD_VAR 0 1
12873: PUSH
12874: LD_EXP 42
12878: EQUAL
12879: IFFALSE 12889
// gladstoneStatus = 0 ;
12881: LD_ADDR_EXP 1
12885: PUSH
12886: LD_INT 0
12888: ST_TO_ADDR
// if unit = Johanna then
12889: LD_VAR 0 1
12893: PUSH
12894: LD_EXP 41
12898: EQUAL
12899: IFFALSE 12909
// johannaStatus = 0 ;
12901: LD_ADDR_EXP 2
12905: PUSH
12906: LD_INT 0
12908: ST_TO_ADDR
// end ;
12909: PPOPN 1
12911: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
12912: LD_VAR 0 1
12916: PUSH
12917: LD_EXP 44
12921: EQUAL
12922: IFFALSE 12928
// BurlakDying ;
12924: CALL 10347 0 0
// if GetSide ( unit ) = 3 then
12928: LD_VAR 0 1
12932: PPUSH
12933: CALL_OW 255
12937: PUSH
12938: LD_INT 3
12940: EQUAL
12941: IFFALSE 12957
// lostComradesCounter = lostComradesCounter + 1 ;
12943: LD_ADDR_EXP 22
12947: PUSH
12948: LD_EXP 22
12952: PUSH
12953: LD_INT 1
12955: PLUS
12956: ST_TO_ADDR
// if unit in kirovSolds then
12957: LD_VAR 0 1
12961: PUSH
12962: LD_EXP 54
12966: IN
12967: IFFALSE 12985
// kirovSolds = kirovSolds diff unit ;
12969: LD_ADDR_EXP 54
12973: PUSH
12974: LD_EXP 54
12978: PUSH
12979: LD_VAR 0 1
12983: DIFF
12984: ST_TO_ADDR
// end ;
12985: PPOPN 1
12987: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
12988: LD_VAR 0 1
12992: PUSH
12993: LD_INT 3
12995: EQUAL
12996: PUSH
12997: LD_VAR 0 2
13001: PUSH
13002: LD_INT 1
13004: EQUAL
13005: AND
13006: PUSH
13007: LD_VAR 0 1
13011: PUSH
13012: LD_INT 1
13014: EQUAL
13015: PUSH
13016: LD_VAR 0 2
13020: PUSH
13021: LD_INT 3
13023: EQUAL
13024: AND
13025: PUSH
13026: LD_EXP 16
13030: PUSH
13031: LD_INT 1
13033: EQUAL
13034: AND
13035: OR
13036: IFFALSE 13042
// Dial_SecondAttack ;
13038: CALL 5835 0 0
// if side1 = 3 and side2 = 6 and not traitor then
13042: LD_VAR 0 1
13046: PUSH
13047: LD_INT 3
13049: EQUAL
13050: PUSH
13051: LD_VAR 0 2
13055: PUSH
13056: LD_INT 6
13058: EQUAL
13059: AND
13060: PUSH
13061: LD_EXP 17
13065: NOT
13066: AND
13067: IFFALSE 13073
// Dialogue_AttackComrade ;
13069: CALL 3965 0 0
// end ; end_of_file
13073: PPOPN 2
13075: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
13076: LD_INT 0
13078: PPUSH
13079: PPUSH
// if not missionNumber then
13080: LD_VAR 0 2
13084: NOT
13085: IFFALSE 13089
// exit ;
13087: GO 13219
// achiv := false ;
13089: LD_ADDR_VAR 0 7
13093: PUSH
13094: LD_INT 0
13096: ST_TO_ADDR
// case campaignNumber of 1 :
13097: LD_VAR 0 1
13101: PUSH
13102: LD_INT 1
13104: DOUBLE
13105: EQUAL
13106: IFTRUE 13110
13108: GO 13121
13110: POP
// achiv := ACH_GOTA ; 2 :
13111: LD_ADDR_VAR 0 7
13115: PUSH
13116: LD_STRING ACH_GOTA
13118: ST_TO_ADDR
13119: GO 13171
13121: LD_INT 2
13123: DOUBLE
13124: EQUAL
13125: IFTRUE 13129
13127: GO 13132
13129: POP
// ; 3 :
13130: GO 13171
13132: LD_INT 3
13134: DOUBLE
13135: EQUAL
13136: IFTRUE 13140
13138: GO 13151
13140: POP
// achiv := ACH_MOTSU ; 4 :
13141: LD_ADDR_VAR 0 7
13145: PUSH
13146: LD_STRING ACH_MOTSU
13148: ST_TO_ADDR
13149: GO 13171
13151: LD_INT 4
13153: DOUBLE
13154: EQUAL
13155: IFTRUE 13159
13157: GO 13170
13159: POP
// achiv := ACH_LOP ; end ;
13160: LD_ADDR_VAR 0 7
13164: PUSH
13165: LD_STRING ACH_LOP
13167: ST_TO_ADDR
13168: GO 13171
13170: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
13171: LD_OWVAR 67
13175: PUSH
13176: LD_INT 3
13178: EQUAL
13179: PUSH
13180: LD_VAR 0 7
13184: AND
13185: PUSH
13186: LD_VAR 0 3
13190: AND
13191: PUSH
13192: LD_VAR 0 4
13196: AND
13197: PUSH
13198: LD_VAR 0 5
13202: AND
13203: IFFALSE 13219
// SetAchievementEX ( achiv , missionNumber ) ;
13205: LD_VAR 0 7
13209: PPUSH
13210: LD_VAR 0 2
13214: PPUSH
13215: CALL_OW 564
// end ;
13219: LD_VAR 0 6
13223: RET
// export function SA_BehemothConstructed ; begin
13224: LD_INT 0
13226: PPUSH
// SetAchievement ( ACH_SMC ) ;
13227: LD_STRING ACH_SMC
13229: PPUSH
13230: CALL_OW 543
// end ;
13234: LD_VAR 0 1
13238: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
13239: LD_VAR 0 2
13243: PUSH
13244: LD_INT 1
13246: DOUBLE
13247: EQUAL
13248: IFTRUE 13252
13250: GO 13259
13252: POP
// HackUnlimitedResources ; 2 :
13253: CALL 13443 0 0
13257: GO 13440
13259: LD_INT 2
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13267
13265: GO 13274
13267: POP
// HackSetLevel10 ; 3 :
13268: CALL 13576 0 0
13272: GO 13440
13274: LD_INT 3
13276: DOUBLE
13277: EQUAL
13278: IFTRUE 13282
13280: GO 13289
13282: POP
// HackSetLevel10YourUnits ; 4 :
13283: CALL 13661 0 0
13287: GO 13440
13289: LD_INT 4
13291: DOUBLE
13292: EQUAL
13293: IFTRUE 13297
13295: GO 13319
13297: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
13298: LD_VAR 0 3
13302: PPUSH
13303: LD_VAR 0 4
13307: PPUSH
13308: LD_VAR 0 5
13312: PPUSH
13313: CALL 13751 0 3
13317: GO 13440
13319: LD_INT 5
13321: DOUBLE
13322: EQUAL
13323: IFTRUE 13327
13325: GO 13334
13327: POP
// HackSpawnVehicle ; 6 :
13328: CALL 13812 0 0
13332: GO 13440
13334: LD_INT 6
13336: DOUBLE
13337: EQUAL
13338: IFTRUE 13342
13340: GO 13349
13342: POP
// HackInvincible ; 7 :
13343: CALL 14887 0 0
13347: GO 13440
13349: LD_INT 7
13351: DOUBLE
13352: EQUAL
13353: IFTRUE 13357
13355: GO 13364
13357: POP
// HackInvisible ; 8 :
13358: CALL 14998 0 0
13362: GO 13440
13364: LD_INT 8
13366: DOUBLE
13367: EQUAL
13368: IFTRUE 13372
13370: GO 13379
13372: POP
// HackChangeYourSide ; 9 :
13373: CALL 15055 0 0
13377: GO 13440
13379: LD_INT 9
13381: DOUBLE
13382: EQUAL
13383: IFTRUE 13387
13385: GO 13394
13387: POP
// HackChangeUnitSide ; 10 :
13388: CALL 15097 0 0
13392: GO 13440
13394: LD_INT 10
13396: DOUBLE
13397: EQUAL
13398: IFTRUE 13402
13400: GO 13409
13402: POP
// HackFog ; 11 :
13403: CALL 15198 0 0
13407: GO 13440
13409: LD_INT 11
13411: DOUBLE
13412: EQUAL
13413: IFTRUE 13417
13415: GO 13424
13417: POP
// HackApeman ; 12 :
13418: CALL 15213 0 0
13422: GO 13440
13424: LD_INT 12
13426: DOUBLE
13427: EQUAL
13428: IFTRUE 13432
13430: GO 13439
13432: POP
// HackBoom ; end ;
13433: CALL 15298 0 0
13437: GO 13440
13439: POP
// end ;
13440: PPOPN 6
13442: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
13443: LD_INT 0
13445: PPUSH
13446: PPUSH
13447: PPUSH
13448: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13449: LD_ADDR_VAR 0 4
13453: PUSH
13454: LD_INT 22
13456: PUSH
13457: LD_OWVAR 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 2
13468: PUSH
13469: LD_INT 30
13471: PUSH
13472: LD_INT 0
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 30
13481: PUSH
13482: LD_INT 1
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: PPUSH
13498: CALL_OW 69
13502: ST_TO_ADDR
// if not tmp then
13503: LD_VAR 0 4
13507: NOT
13508: IFFALSE 13512
// exit ;
13510: GO 13571
// for i in tmp do
13512: LD_ADDR_VAR 0 2
13516: PUSH
13517: LD_VAR 0 4
13521: PUSH
13522: FOR_IN
13523: IFFALSE 13569
// for j = 1 to 3 do
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: DOUBLE
13531: LD_INT 1
13533: DEC
13534: ST_TO_ADDR
13535: LD_INT 3
13537: PUSH
13538: FOR_TO
13539: IFFALSE 13565
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13541: LD_VAR 0 2
13545: PPUSH
13546: CALL_OW 274
13550: PPUSH
13551: LD_VAR 0 3
13555: PPUSH
13556: LD_INT 99999
13558: PPUSH
13559: CALL_OW 277
13563: GO 13538
13565: POP
13566: POP
13567: GO 13522
13569: POP
13570: POP
// end ;
13571: LD_VAR 0 1
13575: RET
// export function HackSetLevel10 ; var i , j ; begin
13576: LD_INT 0
13578: PPUSH
13579: PPUSH
13580: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13581: LD_ADDR_VAR 0 2
13585: PUSH
13586: LD_INT 21
13588: PUSH
13589: LD_INT 1
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 69
13600: PUSH
13601: FOR_IN
13602: IFFALSE 13654
// if IsSelected ( i ) then
13604: LD_VAR 0 2
13608: PPUSH
13609: CALL_OW 306
13613: IFFALSE 13652
// begin for j := 1 to 4 do
13615: LD_ADDR_VAR 0 3
13619: PUSH
13620: DOUBLE
13621: LD_INT 1
13623: DEC
13624: ST_TO_ADDR
13625: LD_INT 4
13627: PUSH
13628: FOR_TO
13629: IFFALSE 13650
// SetSkill ( i , j , 10 ) ;
13631: LD_VAR 0 2
13635: PPUSH
13636: LD_VAR 0 3
13640: PPUSH
13641: LD_INT 10
13643: PPUSH
13644: CALL_OW 237
13648: GO 13628
13650: POP
13651: POP
// end ;
13652: GO 13601
13654: POP
13655: POP
// end ;
13656: LD_VAR 0 1
13660: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
13661: LD_INT 0
13663: PPUSH
13664: PPUSH
13665: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13666: LD_ADDR_VAR 0 2
13670: PUSH
13671: LD_INT 22
13673: PUSH
13674: LD_OWVAR 2
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PUSH
13683: LD_INT 21
13685: PUSH
13686: LD_INT 1
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: PUSH
13693: EMPTY
13694: LIST
13695: LIST
13696: PPUSH
13697: CALL_OW 69
13701: PUSH
13702: FOR_IN
13703: IFFALSE 13744
// begin for j := 1 to 4 do
13705: LD_ADDR_VAR 0 3
13709: PUSH
13710: DOUBLE
13711: LD_INT 1
13713: DEC
13714: ST_TO_ADDR
13715: LD_INT 4
13717: PUSH
13718: FOR_TO
13719: IFFALSE 13740
// SetSkill ( i , j , 10 ) ;
13721: LD_VAR 0 2
13725: PPUSH
13726: LD_VAR 0 3
13730: PPUSH
13731: LD_INT 10
13733: PPUSH
13734: CALL_OW 237
13738: GO 13718
13740: POP
13741: POP
// end ;
13742: GO 13702
13744: POP
13745: POP
// end ;
13746: LD_VAR 0 1
13750: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
13751: LD_INT 0
13753: PPUSH
// uc_side := your_side ;
13754: LD_ADDR_OWVAR 20
13758: PUSH
13759: LD_OWVAR 2
13763: ST_TO_ADDR
// uc_nation := nation ;
13764: LD_ADDR_OWVAR 21
13768: PUSH
13769: LD_VAR 0 1
13773: ST_TO_ADDR
// InitHc ;
13774: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13778: LD_INT 0
13780: PPUSH
13781: LD_VAR 0 2
13785: PPUSH
13786: LD_VAR 0 3
13790: PPUSH
13791: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
13795: CALL_OW 44
13799: PPUSH
13800: LD_INT 1
13802: PPUSH
13803: CALL_OW 51
// end ;
13807: LD_VAR 0 4
13811: RET
// export function HackSpawnVehicle ; begin
13812: LD_INT 0
13814: PPUSH
// uc_side := your_side ;
13815: LD_ADDR_OWVAR 20
13819: PUSH
13820: LD_OWVAR 2
13824: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
13825: LD_ADDR_OWVAR 21
13829: PUSH
13830: LD_INT 1
13832: PPUSH
13833: LD_INT 3
13835: PPUSH
13836: CALL_OW 12
13840: ST_TO_ADDR
// InitVc ;
13841: CALL_OW 20
// case uc_nation of 1 :
13845: LD_OWVAR 21
13849: PUSH
13850: LD_INT 1
13852: DOUBLE
13853: EQUAL
13854: IFTRUE 13858
13856: GO 14165
13858: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
13859: LD_ADDR_OWVAR 37
13863: PUSH
13864: LD_INT 1
13866: PUSH
13867: LD_INT 2
13869: PUSH
13870: LD_INT 3
13872: PUSH
13873: LD_INT 4
13875: PUSH
13876: LD_INT 5
13878: PUSH
13879: LD_INT 11
13881: PUSH
13882: LD_INT 12
13884: PUSH
13885: LD_INT 13
13887: PUSH
13888: LD_INT 14
13890: PUSH
13891: LD_INT 21
13893: PUSH
13894: LD_INT 22
13896: PUSH
13897: LD_INT 23
13899: PUSH
13900: LD_INT 24
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: LIST
13911: LIST
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: PUSH
13918: LD_INT 1
13920: PPUSH
13921: LD_INT 13
13923: PPUSH
13924: CALL_OW 12
13928: ARRAY
13929: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
13930: LD_ADDR_OWVAR 38
13934: PUSH
13935: LD_INT 1
13937: PUSH
13938: LD_INT 3
13940: PUSH
13941: LD_INT 4
13943: PUSH
13944: LD_INT 5
13946: PUSH
13947: EMPTY
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: PUSH
13953: LD_INT 1
13955: PPUSH
13956: LD_INT 4
13958: PPUSH
13959: CALL_OW 12
13963: ARRAY
13964: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
13965: LD_ADDR_OWVAR 39
13969: PUSH
13970: LD_INT 1
13972: PUSH
13973: LD_INT 2
13975: PUSH
13976: LD_INT 3
13978: PUSH
13979: EMPTY
13980: LIST
13981: LIST
13982: LIST
13983: PUSH
13984: LD_INT 1
13986: PPUSH
13987: LD_INT 3
13989: PPUSH
13990: CALL_OW 12
13994: ARRAY
13995: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
13996: LD_ADDR_OWVAR 40
14000: PUSH
14001: LD_INT 14
14003: PUSH
14004: LD_INT 12
14006: PUSH
14007: LD_INT 13
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: LD_INT 10
14015: PUSH
14016: LD_INT 4
14018: PUSH
14019: LD_INT 6
14021: PUSH
14022: LD_INT 9
14024: PUSH
14025: LD_INT 3
14027: PUSH
14028: LD_INT 2
14030: PUSH
14031: LD_INT 11
14033: PUSH
14034: LD_INT 7
14036: PUSH
14037: LD_INT 8
14039: PUSH
14040: LD_INT 15
14042: PUSH
14043: LD_INT 32
14045: PUSH
14046: LD_INT 31
14048: PUSH
14049: LD_INT 24
14051: PUSH
14052: LD_INT 26
14054: PUSH
14055: LD_INT 25
14057: PUSH
14058: LD_INT 27
14060: PUSH
14061: LD_INT 23
14063: PUSH
14064: LD_INT 22
14066: PUSH
14067: LD_INT 30
14069: PUSH
14070: LD_INT 28
14072: PUSH
14073: LD_INT 29
14075: PUSH
14076: LD_INT 53
14078: PUSH
14079: LD_INT 51
14081: PUSH
14082: LD_INT 52
14084: PUSH
14085: LD_INT 43
14087: PUSH
14088: LD_INT 44
14090: PUSH
14091: LD_INT 46
14093: PUSH
14094: LD_INT 42
14096: PUSH
14097: LD_INT 47
14099: PUSH
14100: LD_INT 45
14102: PUSH
14103: LD_INT 48
14105: PUSH
14106: LD_INT 55
14108: PUSH
14109: LD_INT 49
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: LIST
14136: LIST
14137: LIST
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: LIST
14149: LIST
14150: PUSH
14151: LD_INT 1
14153: PPUSH
14154: LD_INT 37
14156: PPUSH
14157: CALL_OW 12
14161: ARRAY
14162: ST_TO_ADDR
// end ; 2 :
14163: GO 14796
14165: LD_INT 2
14167: DOUBLE
14168: EQUAL
14169: IFTRUE 14173
14171: GO 14480
14173: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14174: LD_ADDR_OWVAR 37
14178: PUSH
14179: LD_INT 1
14181: PUSH
14182: LD_INT 2
14184: PUSH
14185: LD_INT 3
14187: PUSH
14188: LD_INT 4
14190: PUSH
14191: LD_INT 5
14193: PUSH
14194: LD_INT 11
14196: PUSH
14197: LD_INT 12
14199: PUSH
14200: LD_INT 13
14202: PUSH
14203: LD_INT 14
14205: PUSH
14206: LD_INT 21
14208: PUSH
14209: LD_INT 22
14211: PUSH
14212: LD_INT 23
14214: PUSH
14215: LD_INT 24
14217: PUSH
14218: EMPTY
14219: LIST
14220: LIST
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 1
14235: PPUSH
14236: LD_INT 13
14238: PPUSH
14239: CALL_OW 12
14243: ARRAY
14244: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14245: LD_ADDR_OWVAR 38
14249: PUSH
14250: LD_INT 1
14252: PUSH
14253: LD_INT 3
14255: PUSH
14256: LD_INT 4
14258: PUSH
14259: LD_INT 5
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: PUSH
14268: LD_INT 1
14270: PPUSH
14271: LD_INT 4
14273: PPUSH
14274: CALL_OW 12
14278: ARRAY
14279: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14280: LD_ADDR_OWVAR 39
14284: PUSH
14285: LD_INT 1
14287: PUSH
14288: LD_INT 2
14290: PUSH
14291: LD_INT 3
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 1
14301: PPUSH
14302: LD_INT 3
14304: PPUSH
14305: CALL_OW 12
14309: ARRAY
14310: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14311: LD_ADDR_OWVAR 40
14315: PUSH
14316: LD_INT 14
14318: PUSH
14319: LD_INT 12
14321: PUSH
14322: LD_INT 13
14324: PUSH
14325: LD_INT 5
14327: PUSH
14328: LD_INT 10
14330: PUSH
14331: LD_INT 4
14333: PUSH
14334: LD_INT 6
14336: PUSH
14337: LD_INT 9
14339: PUSH
14340: LD_INT 3
14342: PUSH
14343: LD_INT 2
14345: PUSH
14346: LD_INT 11
14348: PUSH
14349: LD_INT 7
14351: PUSH
14352: LD_INT 8
14354: PUSH
14355: LD_INT 15
14357: PUSH
14358: LD_INT 32
14360: PUSH
14361: LD_INT 31
14363: PUSH
14364: LD_INT 24
14366: PUSH
14367: LD_INT 26
14369: PUSH
14370: LD_INT 25
14372: PUSH
14373: LD_INT 27
14375: PUSH
14376: LD_INT 23
14378: PUSH
14379: LD_INT 22
14381: PUSH
14382: LD_INT 30
14384: PUSH
14385: LD_INT 28
14387: PUSH
14388: LD_INT 29
14390: PUSH
14391: LD_INT 53
14393: PUSH
14394: LD_INT 51
14396: PUSH
14397: LD_INT 52
14399: PUSH
14400: LD_INT 43
14402: PUSH
14403: LD_INT 44
14405: PUSH
14406: LD_INT 46
14408: PUSH
14409: LD_INT 42
14411: PUSH
14412: LD_INT 47
14414: PUSH
14415: LD_INT 45
14417: PUSH
14418: LD_INT 48
14420: PUSH
14421: LD_INT 55
14423: PUSH
14424: LD_INT 49
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: PUSH
14466: LD_INT 1
14468: PPUSH
14469: LD_INT 37
14471: PPUSH
14472: CALL_OW 12
14476: ARRAY
14477: ST_TO_ADDR
// end ; 3 :
14478: GO 14796
14480: LD_INT 3
14482: DOUBLE
14483: EQUAL
14484: IFTRUE 14488
14486: GO 14795
14488: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14489: LD_ADDR_OWVAR 37
14493: PUSH
14494: LD_INT 1
14496: PUSH
14497: LD_INT 2
14499: PUSH
14500: LD_INT 3
14502: PUSH
14503: LD_INT 4
14505: PUSH
14506: LD_INT 5
14508: PUSH
14509: LD_INT 11
14511: PUSH
14512: LD_INT 12
14514: PUSH
14515: LD_INT 13
14517: PUSH
14518: LD_INT 14
14520: PUSH
14521: LD_INT 21
14523: PUSH
14524: LD_INT 22
14526: PUSH
14527: LD_INT 23
14529: PUSH
14530: LD_INT 24
14532: PUSH
14533: EMPTY
14534: LIST
14535: LIST
14536: LIST
14537: LIST
14538: LIST
14539: LIST
14540: LIST
14541: LIST
14542: LIST
14543: LIST
14544: LIST
14545: LIST
14546: LIST
14547: PUSH
14548: LD_INT 1
14550: PPUSH
14551: LD_INT 13
14553: PPUSH
14554: CALL_OW 12
14558: ARRAY
14559: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14560: LD_ADDR_OWVAR 38
14564: PUSH
14565: LD_INT 1
14567: PUSH
14568: LD_INT 3
14570: PUSH
14571: LD_INT 4
14573: PUSH
14574: LD_INT 5
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: PUSH
14583: LD_INT 1
14585: PPUSH
14586: LD_INT 4
14588: PPUSH
14589: CALL_OW 12
14593: ARRAY
14594: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14595: LD_ADDR_OWVAR 39
14599: PUSH
14600: LD_INT 1
14602: PUSH
14603: LD_INT 2
14605: PUSH
14606: LD_INT 3
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: LIST
14613: PUSH
14614: LD_INT 1
14616: PPUSH
14617: LD_INT 3
14619: PPUSH
14620: CALL_OW 12
14624: ARRAY
14625: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14626: LD_ADDR_OWVAR 40
14630: PUSH
14631: LD_INT 14
14633: PUSH
14634: LD_INT 12
14636: PUSH
14637: LD_INT 13
14639: PUSH
14640: LD_INT 5
14642: PUSH
14643: LD_INT 10
14645: PUSH
14646: LD_INT 4
14648: PUSH
14649: LD_INT 6
14651: PUSH
14652: LD_INT 9
14654: PUSH
14655: LD_INT 3
14657: PUSH
14658: LD_INT 2
14660: PUSH
14661: LD_INT 11
14663: PUSH
14664: LD_INT 7
14666: PUSH
14667: LD_INT 8
14669: PUSH
14670: LD_INT 15
14672: PUSH
14673: LD_INT 32
14675: PUSH
14676: LD_INT 31
14678: PUSH
14679: LD_INT 24
14681: PUSH
14682: LD_INT 26
14684: PUSH
14685: LD_INT 25
14687: PUSH
14688: LD_INT 27
14690: PUSH
14691: LD_INT 23
14693: PUSH
14694: LD_INT 22
14696: PUSH
14697: LD_INT 30
14699: PUSH
14700: LD_INT 28
14702: PUSH
14703: LD_INT 29
14705: PUSH
14706: LD_INT 53
14708: PUSH
14709: LD_INT 51
14711: PUSH
14712: LD_INT 52
14714: PUSH
14715: LD_INT 43
14717: PUSH
14718: LD_INT 44
14720: PUSH
14721: LD_INT 46
14723: PUSH
14724: LD_INT 42
14726: PUSH
14727: LD_INT 47
14729: PUSH
14730: LD_INT 45
14732: PUSH
14733: LD_INT 48
14735: PUSH
14736: LD_INT 55
14738: PUSH
14739: LD_INT 49
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: LIST
14746: LIST
14747: LIST
14748: LIST
14749: LIST
14750: LIST
14751: LIST
14752: LIST
14753: LIST
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: LIST
14761: LIST
14762: LIST
14763: LIST
14764: LIST
14765: LIST
14766: LIST
14767: LIST
14768: LIST
14769: LIST
14770: LIST
14771: LIST
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: PUSH
14781: LD_INT 1
14783: PPUSH
14784: LD_INT 37
14786: PPUSH
14787: CALL_OW 12
14791: ARRAY
14792: ST_TO_ADDR
// end ; end ;
14793: GO 14796
14795: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14796: CALL_OW 45
14800: PPUSH
14801: LD_INT 1
14803: PPUSH
14804: CALL_OW 51
// end ;
14808: LD_VAR 0 1
14812: RET
// export invincible ; every 1 do
14813: GO 14815
14815: DISABLE
// invincible := [ ] ;
14816: LD_ADDR_EXP 55
14820: PUSH
14821: EMPTY
14822: ST_TO_ADDR
14823: END
// every 10 do var i ;
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
// begin enable ;
14830: ENABLE
// if not invincible then
14831: LD_EXP 55
14835: NOT
14836: IFFALSE 14840
// exit ;
14838: GO 14884
// for i in invincible do
14840: LD_ADDR_VAR 0 1
14844: PUSH
14845: LD_EXP 55
14849: PUSH
14850: FOR_IN
14851: IFFALSE 14882
// if GetLives ( i ) < 1000 then
14853: LD_VAR 0 1
14857: PPUSH
14858: CALL_OW 256
14862: PUSH
14863: LD_INT 1000
14865: LESS
14866: IFFALSE 14880
// SetLives ( i , 1000 ) ;
14868: LD_VAR 0 1
14872: PPUSH
14873: LD_INT 1000
14875: PPUSH
14876: CALL_OW 234
14880: GO 14850
14882: POP
14883: POP
// end ;
14884: PPOPN 1
14886: END
// export function HackInvincible ; var i ; begin
14887: LD_INT 0
14889: PPUSH
14890: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14891: LD_ADDR_VAR 0 2
14895: PUSH
14896: LD_INT 2
14898: PUSH
14899: LD_INT 21
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PUSH
14909: LD_INT 21
14911: PUSH
14912: LD_INT 2
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: LIST
14923: PPUSH
14924: CALL_OW 69
14928: PUSH
14929: FOR_IN
14930: IFFALSE 14991
// if IsSelected ( i ) then
14932: LD_VAR 0 2
14936: PPUSH
14937: CALL_OW 306
14941: IFFALSE 14989
// begin if i in invincible then
14943: LD_VAR 0 2
14947: PUSH
14948: LD_EXP 55
14952: IN
14953: IFFALSE 14973
// invincible := invincible diff i else
14955: LD_ADDR_EXP 55
14959: PUSH
14960: LD_EXP 55
14964: PUSH
14965: LD_VAR 0 2
14969: DIFF
14970: ST_TO_ADDR
14971: GO 14989
// invincible := invincible union i ;
14973: LD_ADDR_EXP 55
14977: PUSH
14978: LD_EXP 55
14982: PUSH
14983: LD_VAR 0 2
14987: UNION
14988: ST_TO_ADDR
// end ;
14989: GO 14929
14991: POP
14992: POP
// end ;
14993: LD_VAR 0 1
14997: RET
// export function HackInvisible ; var i , j ; begin
14998: LD_INT 0
15000: PPUSH
15001: PPUSH
15002: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_INT 21
15010: PUSH
15011: LD_INT 1
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PPUSH
15018: CALL_OW 69
15022: PUSH
15023: FOR_IN
15024: IFFALSE 15048
// if IsSelected ( i ) then
15026: LD_VAR 0 2
15030: PPUSH
15031: CALL_OW 306
15035: IFFALSE 15046
// begin ComForceInvisible ( i ) ;
15037: LD_VAR 0 2
15041: PPUSH
15042: CALL_OW 496
// end ;
15046: GO 15023
15048: POP
15049: POP
// end ;
15050: LD_VAR 0 1
15054: RET
// export function HackChangeYourSide ; begin
15055: LD_INT 0
15057: PPUSH
// if your_side = 8 then
15058: LD_OWVAR 2
15062: PUSH
15063: LD_INT 8
15065: EQUAL
15066: IFFALSE 15078
// your_side := 0 else
15068: LD_ADDR_OWVAR 2
15072: PUSH
15073: LD_INT 0
15075: ST_TO_ADDR
15076: GO 15092
// your_side := your_side + 1 ;
15078: LD_ADDR_OWVAR 2
15082: PUSH
15083: LD_OWVAR 2
15087: PUSH
15088: LD_INT 1
15090: PLUS
15091: ST_TO_ADDR
// end ;
15092: LD_VAR 0 1
15096: RET
// export function HackChangeUnitSide ; var i , j ; begin
15097: LD_INT 0
15099: PPUSH
15100: PPUSH
15101: PPUSH
// for i in all_units do
15102: LD_ADDR_VAR 0 2
15106: PUSH
15107: LD_OWVAR 3
15111: PUSH
15112: FOR_IN
15113: IFFALSE 15191
// if IsSelected ( i ) then
15115: LD_VAR 0 2
15119: PPUSH
15120: CALL_OW 306
15124: IFFALSE 15189
// begin j := GetSide ( i ) ;
15126: LD_ADDR_VAR 0 3
15130: PUSH
15131: LD_VAR 0 2
15135: PPUSH
15136: CALL_OW 255
15140: ST_TO_ADDR
// if j = 8 then
15141: LD_VAR 0 3
15145: PUSH
15146: LD_INT 8
15148: EQUAL
15149: IFFALSE 15161
// j := 0 else
15151: LD_ADDR_VAR 0 3
15155: PUSH
15156: LD_INT 0
15158: ST_TO_ADDR
15159: GO 15175
// j := j + 1 ;
15161: LD_ADDR_VAR 0 3
15165: PUSH
15166: LD_VAR 0 3
15170: PUSH
15171: LD_INT 1
15173: PLUS
15174: ST_TO_ADDR
// SetSide ( i , j ) ;
15175: LD_VAR 0 2
15179: PPUSH
15180: LD_VAR 0 3
15184: PPUSH
15185: CALL_OW 235
// end ;
15189: GO 15112
15191: POP
15192: POP
// end ;
15193: LD_VAR 0 1
15197: RET
// export function HackFog ; begin
15198: LD_INT 0
15200: PPUSH
// FogOff ( true ) ;
15201: LD_INT 1
15203: PPUSH
15204: CALL_OW 344
// end ;
15208: LD_VAR 0 1
15212: RET
// export function HackApeman ; begin
15213: LD_INT 0
15215: PPUSH
// uc_side := your_side ;
15216: LD_ADDR_OWVAR 20
15220: PUSH
15221: LD_OWVAR 2
15225: ST_TO_ADDR
// uc_nation := 0 ;
15226: LD_ADDR_OWVAR 21
15230: PUSH
15231: LD_INT 0
15233: ST_TO_ADDR
// hc_name :=  ;
15234: LD_ADDR_OWVAR 26
15238: PUSH
15239: LD_STRING 
15241: ST_TO_ADDR
// hc_gallery :=  ;
15242: LD_ADDR_OWVAR 33
15246: PUSH
15247: LD_STRING 
15249: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15250: LD_ADDR_OWVAR 31
15254: PUSH
15255: LD_INT 0
15257: PUSH
15258: LD_INT 0
15260: PUSH
15261: LD_INT 0
15263: PUSH
15264: LD_INT 0
15266: PUSH
15267: EMPTY
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: ST_TO_ADDR
// hc_class := class_apeman ;
15273: LD_ADDR_OWVAR 28
15277: PUSH
15278: LD_INT 12
15280: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15281: CALL_OW 44
15285: PPUSH
15286: LD_INT 1
15288: PPUSH
15289: CALL_OW 51
// end ;
15293: LD_VAR 0 1
15297: RET
// export function HackBoom ; begin
15298: LD_INT 0
15300: PPUSH
// uc_side := your_side ;
15301: LD_ADDR_OWVAR 20
15305: PUSH
15306: LD_OWVAR 2
15310: ST_TO_ADDR
// uc_nation := 1 ;
15311: LD_ADDR_OWVAR 21
15315: PUSH
15316: LD_INT 1
15318: ST_TO_ADDR
// vc_chassis := us_morphling ;
15319: LD_ADDR_OWVAR 37
15323: PUSH
15324: LD_INT 5
15326: ST_TO_ADDR
// vc_engine := engine_siberite ;
15327: LD_ADDR_OWVAR 39
15331: PUSH
15332: LD_INT 3
15334: ST_TO_ADDR
// vc_control := control_computer ;
15335: LD_ADDR_OWVAR 38
15339: PUSH
15340: LD_INT 3
15342: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
15343: LD_ADDR_OWVAR 40
15347: PUSH
15348: LD_INT 8
15350: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15351: CALL_OW 45
15355: PPUSH
15356: LD_INT 1
15358: PPUSH
15359: CALL_OW 51
// end ;
15363: LD_VAR 0 1
15367: RET
