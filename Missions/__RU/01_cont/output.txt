// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 12608 0 0
// PrepareAmericans ;
  28: CALL 12181 0 0
// CreateNature ;
  32: CALL 13312 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 26
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 854 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 27
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 28
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 29
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 32
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 30
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 31
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 33
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: EMPTY
 418: LIST
 419: LIST
 420: LIST
 421: PUSH
 422: LD_OWVAR 67
 426: ARRAY
 427: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 428: LD_ADDR_EXP 34
 432: PUSH
 433: LD_INT 3
 435: PPUSH
 436: LD_INT 5
 438: PPUSH
 439: CALL_OW 12
 443: PUSH
 444: LD_OWVAR 67
 448: MUL
 449: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 450: LD_ADDR_EXP 35
 454: PUSH
 455: LD_INT 5
 457: PUSH
 458: LD_INT 6
 460: PUSH
 461: LD_INT 6
 463: PUSH
 464: EMPTY
 465: LIST
 466: LIST
 467: LIST
 468: PUSH
 469: LD_OWVAR 67
 473: ARRAY
 474: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 475: LD_ADDR_EXP 36
 479: PUSH
 480: LD_INT 0
 482: PUSH
 483: LD_INT 1
 485: PUSH
 486: LD_INT 2
 488: PUSH
 489: EMPTY
 490: LIST
 491: LIST
 492: LIST
 493: PUSH
 494: LD_OWVAR 67
 498: ARRAY
 499: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 500: LD_ADDR_EXP 37
 504: PUSH
 505: LD_INT 78
 507: PUSH
 508: LD_INT 87
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 515: LD_ADDR_EXP 38
 519: PUSH
 520: LD_INT 72
 522: PUSH
 523: LD_INT 115
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 99
 532: PUSH
 533: LD_INT 7
 535: PUSH
 536: EMPTY
 537: LIST
 538: LIST
 539: PUSH
 540: LD_INT 131
 542: PUSH
 543: LD_INT 81
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: EMPTY
 551: LIST
 552: LIST
 553: LIST
 554: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 ] [ Difficulty ] ;
 555: LD_ADDR_EXP 39
 559: PUSH
 560: LD_INT 500
 562: PUSH
 563: LD_INT 400
 565: PUSH
 566: LD_INT 350
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: LIST
 573: PUSH
 574: LD_OWVAR 67
 578: ARRAY
 579: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 580: LD_ADDR_EXP 40
 584: PUSH
 585: LD_INT 21000
 587: PUSH
 588: LD_INT 16800
 590: PUSH
 591: LD_INT 12600
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: LIST
 598: PUSH
 599: LD_OWVAR 67
 603: ARRAY
 604: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 605: LD_ADDR_EXP 41
 609: PUSH
 610: LD_INT 6300
 612: PUSH
 613: LD_INT 5250
 615: PUSH
 616: LD_INT 4200
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: LIST
 623: PUSH
 624: LD_OWVAR 67
 628: ARRAY
 629: ST_TO_ADDR
// end ;
 630: LD_VAR 0 1
 634: RET
// every 0 0$1 trigger debugMode do var i ;
 635: LD_EXP 32
 639: IFFALSE 851
 641: GO 643
 643: DISABLE
 644: LD_INT 0
 646: PPUSH
// begin enable ;
 647: ENABLE
// FogOff ( your_side ) ;
 648: LD_OWVAR 2
 652: PPUSH
 653: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 657: LD_ADDR_VAR 0 1
 661: PUSH
 662: LD_INT 22
 664: PUSH
 665: LD_OWVAR 2
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: PUSH
 711: FOR_IN
 712: IFFALSE 728
// SetLives ( i , 1000 ) ;
 714: LD_VAR 0 1
 718: PPUSH
 719: LD_INT 1000
 721: PPUSH
 722: CALL_OW 234
 726: GO 711
 728: POP
 729: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 730: LD_ADDR_VAR 0 1
 734: PUSH
 735: LD_INT 22
 737: PUSH
 738: LD_OWVAR 2
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: LD_INT 2
 749: PUSH
 750: LD_INT 30
 752: PUSH
 753: LD_INT 0
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 30
 762: PUSH
 763: LD_INT 1
 765: PUSH
 766: EMPTY
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: LIST
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PPUSH
 779: CALL_OW 69
 783: PUSH
 784: FOR_IN
 785: IFFALSE 849
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 274
 796: PPUSH
 797: LD_INT 1
 799: PPUSH
 800: LD_INT 9999
 802: PPUSH
 803: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 807: LD_VAR 0 1
 811: PPUSH
 812: CALL_OW 274
 816: PPUSH
 817: LD_INT 2
 819: PPUSH
 820: LD_INT 9999
 822: PPUSH
 823: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 827: LD_VAR 0 1
 831: PPUSH
 832: CALL_OW 274
 836: PPUSH
 837: LD_INT 3
 839: PPUSH
 840: LD_INT 9999
 842: PPUSH
 843: CALL_OW 277
// end ;
 847: GO 784
 849: POP
 850: POP
// end ; end_of_file
 851: PPOPN 1
 853: END
// export function MissionIntro ; begin
 854: LD_INT 0
 856: PPUSH
// InGameOn ;
 857: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 861: LD_EXP 37
 865: PUSH
 866: LD_INT 1
 868: ARRAY
 869: PUSH
 870: LD_INT 8
 872: MINUS
 873: PPUSH
 874: LD_EXP 37
 878: PUSH
 879: LD_INT 2
 881: ARRAY
 882: PUSH
 883: LD_INT 8
 885: MINUS
 886: PPUSH
 887: CALL_OW 84
// wait ( 0 0$3 ) ;
 891: LD_INT 105
 893: PPUSH
 894: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 898: LD_EXP 46
 902: PPUSH
 903: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 907: LD_EXP 46
 911: PPUSH
 912: LD_STRING D1-Bur-1
 914: PPUSH
 915: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 919: LD_EXP 46
 923: PPUSH
 924: LD_INT 94
 926: PPUSH
 927: LD_INT 89
 929: PPUSH
 930: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 934: LD_INT 94
 936: PPUSH
 937: LD_INT 89
 939: PPUSH
 940: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 944: LD_EXP 46
 948: PPUSH
 949: LD_STRING D1-Bur-1a
 951: PPUSH
 952: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 956: LD_EXP 46
 960: PPUSH
 961: LD_INT 102
 963: PPUSH
 964: LD_INT 88
 966: PPUSH
 967: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 971: LD_INT 102
 973: PPUSH
 974: LD_INT 88
 976: PPUSH
 977: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 981: LD_EXP 46
 985: PPUSH
 986: LD_STRING D1-Bur-1b
 988: PPUSH
 989: CALL_OW 88
// InGameOff ;
 993: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 997: LD_STRING M1
 999: PPUSH
1000: CALL_OW 337
// SaveForQuickRestart ;
1004: CALL_OW 22
// introEnd = true ;
1008: LD_ADDR_EXP 3
1012: PUSH
1013: LD_INT 1
1015: ST_TO_ADDR
// end ;
1016: LD_VAR 0 1
1020: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1021: LD_EXP 46
1025: PPUSH
1026: LD_INT 74
1028: PPUSH
1029: LD_INT 88
1031: PPUSH
1032: CALL_OW 297
1036: PUSH
1037: LD_INT 5
1039: LESS
1040: PUSH
1041: LD_EXP 3
1045: AND
1046: IFFALSE 1071
1048: GO 1050
1050: DISABLE
// begin spotWaterfall = true ;
1051: LD_ADDR_EXP 7
1055: PUSH
1056: LD_INT 1
1058: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1059: LD_EXP 46
1063: PPUSH
1064: LD_STRING DWaterfall-Bur-1
1066: PPUSH
1067: CALL_OW 88
// end ;
1071: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1072: LD_EXP 46
1076: PPUSH
1077: LD_INT 130
1079: PPUSH
1080: LD_INT 96
1082: PPUSH
1083: CALL_OW 297
1087: PUSH
1088: LD_INT 5
1090: LESS
1091: PUSH
1092: LD_EXP 3
1096: AND
1097: IFFALSE 1114
1099: GO 1101
1101: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1102: LD_EXP 46
1106: PPUSH
1107: LD_STRING DCorpse-Bur-1
1109: PPUSH
1110: CALL_OW 88
1114: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1115: LD_EXP 4
1119: NOT
1120: IFFALSE 1214
1122: GO 1124
1124: DISABLE
1125: LD_INT 0
1127: PPUSH
// begin enable ;
1128: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1129: LD_ADDR_VAR 0 1
1133: PUSH
1134: LD_INT 22
1136: PUSH
1137: LD_INT 0
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PUSH
1144: LD_INT 25
1146: PUSH
1147: LD_INT 12
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PPUSH
1158: CALL_OW 69
1162: PUSH
1163: FOR_IN
1164: IFFALSE 1212
// if GetDistUnits ( apeman , Burlak ) < 7 then
1166: LD_VAR 0 1
1170: PPUSH
1171: LD_EXP 46
1175: PPUSH
1176: CALL_OW 296
1180: PUSH
1181: LD_INT 7
1183: LESS
1184: IFFALSE 1210
// begin apemansContact = true ;
1186: LD_ADDR_EXP 4
1190: PUSH
1191: LD_INT 1
1193: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1194: LD_EXP 46
1198: PPUSH
1199: LD_STRING D2-Bur-1
1201: PPUSH
1202: CALL_OW 88
// exit ;
1206: POP
1207: POP
1208: GO 1214
// end ;
1210: GO 1163
1212: POP
1213: POP
// end ;
1214: PPOPN 1
1216: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1217: LD_EXP 5
1221: NOT
1222: IFFALSE 1338
1224: GO 1226
1226: DISABLE
1227: LD_INT 0
1229: PPUSH
1230: PPUSH
// begin enable ;
1231: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1232: LD_ADDR_VAR 0 2
1236: PUSH
1237: LD_INT 22
1239: PUSH
1240: LD_INT 0
1242: PUSH
1243: EMPTY
1244: LIST
1245: LIST
1246: PUSH
1247: LD_INT 25
1249: PUSH
1250: LD_INT 12
1252: PUSH
1253: EMPTY
1254: LIST
1255: LIST
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: PPUSH
1261: CALL_OW 69
1265: PUSH
1266: FOR_IN
1267: IFFALSE 1336
// if Attacks ( apeman ) then
1269: LD_VAR 0 2
1273: PPUSH
1274: CALL_OW 320
1278: IFFALSE 1334
// if GetSide ( Attacks ( apeman ) ) = 3 then
1280: LD_VAR 0 2
1284: PPUSH
1285: CALL_OW 320
1289: PPUSH
1290: CALL_OW 255
1294: PUSH
1295: LD_INT 3
1297: EQUAL
1298: IFFALSE 1334
// begin attackedByApeman = true ;
1300: LD_ADDR_EXP 5
1304: PUSH
1305: LD_INT 1
1307: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1308: LD_ADDR_EXP 8
1312: PUSH
1313: LD_VAR 0 2
1317: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1318: LD_EXP 46
1322: PPUSH
1323: LD_STRING D2-Bur-1a
1325: PPUSH
1326: CALL_OW 88
// exit ;
1330: POP
1331: POP
1332: GO 1338
// end ;
1334: GO 1266
1336: POP
1337: POP
// end ;
1338: PPOPN 2
1340: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1341: LD_EXP 6
1345: NOT
1346: IFFALSE 1443
1348: GO 1350
1350: DISABLE
1351: LD_INT 0
1353: PPUSH
1354: PPUSH
// begin enable ;
1355: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1356: LD_ADDR_VAR 0 2
1360: PUSH
1361: LD_INT 24
1363: PPUSH
1364: LD_INT 22
1366: PUSH
1367: LD_INT 0
1369: PUSH
1370: EMPTY
1371: LIST
1372: LIST
1373: PUSH
1374: LD_INT 25
1376: PUSH
1377: LD_INT 12
1379: PUSH
1380: EMPTY
1381: LIST
1382: LIST
1383: PUSH
1384: EMPTY
1385: LIST
1386: LIST
1387: PPUSH
1388: CALL_OW 70
1392: PUSH
1393: FOR_IN
1394: IFFALSE 1441
// if Attacks ( apeman ) then
1396: LD_VAR 0 2
1400: PPUSH
1401: CALL_OW 320
1405: IFFALSE 1439
// if GetSide ( Attacks ( apeman ) ) = 3 then
1407: LD_VAR 0 2
1411: PPUSH
1412: CALL_OW 320
1416: PPUSH
1417: CALL_OW 255
1421: PUSH
1422: LD_INT 3
1424: EQUAL
1425: IFFALSE 1439
// begin attackedByApemanNearLake = true ;
1427: LD_ADDR_EXP 6
1431: PUSH
1432: LD_INT 1
1434: ST_TO_ADDR
// exit ;
1435: POP
1436: POP
1437: GO 1443
// end ;
1439: GO 1393
1441: POP
1442: POP
// end ;
1443: PPOPN 2
1445: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1446: LD_EXP 9
1450: PPUSH
1451: CALL_OW 303
1455: IFFALSE 1489
1457: GO 1459
1459: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1460: LD_ADDR_EXP 10
1464: PUSH
1465: LD_EXP 9
1469: PPUSH
1470: CALL_OW 250
1474: PUSH
1475: LD_EXP 9
1479: PPUSH
1480: CALL_OW 251
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: ST_TO_ADDR
1489: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1490: LD_EXP 9
1494: PPUSH
1495: CALL_OW 303
1499: PUSH
1500: LD_INT 3
1502: PPUSH
1503: LD_EXP 10
1507: PUSH
1508: LD_INT 1
1510: ARRAY
1511: PPUSH
1512: LD_EXP 10
1516: PUSH
1517: LD_INT 2
1519: ARRAY
1520: PPUSH
1521: CALL_OW 293
1525: AND
1526: IFFALSE 1910
1528: GO 1530
1530: DISABLE
1531: LD_INT 0
1533: PPUSH
// begin wait ( 0 0$2 ) ;
1534: LD_INT 70
1536: PPUSH
1537: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1541: LD_EXP 46
1545: PPUSH
1546: LD_STRING D2a-Bur-1
1548: PPUSH
1549: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1553: LD_INT 22
1555: PUSH
1556: LD_INT 3
1558: PUSH
1559: EMPTY
1560: LIST
1561: LIST
1562: PUSH
1563: LD_INT 21
1565: PUSH
1566: LD_INT 1
1568: PUSH
1569: EMPTY
1570: LIST
1571: LIST
1572: PUSH
1573: EMPTY
1574: LIST
1575: LIST
1576: PPUSH
1577: CALL_OW 69
1581: PUSH
1582: LD_INT 1
1584: EQUAL
1585: IFFALSE 1601
// Say ( Burlak , D2a-Bur-2 ) else
1587: LD_EXP 46
1591: PPUSH
1592: LD_STRING D2a-Bur-2
1594: PPUSH
1595: CALL_OW 88
1599: GO 1910
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1601: LD_ADDR_VAR 0 1
1605: PUSH
1606: LD_INT 22
1608: PUSH
1609: LD_INT 3
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: PUSH
1616: LD_INT 21
1618: PUSH
1619: LD_INT 1
1621: PUSH
1622: EMPTY
1623: LIST
1624: LIST
1625: PUSH
1626: EMPTY
1627: LIST
1628: LIST
1629: PPUSH
1630: CALL_OW 69
1634: PUSH
1635: LD_EXP 46
1639: PUSH
1640: LD_EXP 54
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: DIFF
1649: PPUSH
1650: LD_EXP 10
1654: PUSH
1655: LD_INT 1
1657: ARRAY
1658: PPUSH
1659: LD_EXP 10
1663: PUSH
1664: LD_INT 2
1666: ARRAY
1667: PPUSH
1668: CALL_OW 73
1672: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1673: LD_ADDR_EXP 11
1677: PUSH
1678: LD_VAR 0 1
1682: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1683: LD_VAR 0 1
1687: PPUSH
1688: LD_EXP 10
1692: PUSH
1693: LD_INT 1
1695: ARRAY
1696: PPUSH
1697: LD_EXP 10
1701: PUSH
1702: LD_INT 2
1704: ARRAY
1705: PPUSH
1706: CALL_OW 111
// case nearUnit of Belkov :
1710: LD_VAR 0 1
1714: PUSH
1715: LD_EXP 51
1719: DOUBLE
1720: EQUAL
1721: IFTRUE 1725
1723: GO 1740
1725: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1726: LD_EXP 51
1730: PPUSH
1731: LD_STRING D2a-Bel-1
1733: PPUSH
1734: CALL_OW 88
1738: GO 1807
1740: LD_EXP 53
1744: DOUBLE
1745: EQUAL
1746: IFTRUE 1750
1748: GO 1765
1750: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1751: LD_EXP 53
1755: PPUSH
1756: LD_STRING D2a-Kir-1
1758: PPUSH
1759: CALL_OW 88
1763: GO 1807
1765: POP
// if GetSex ( nearUnit ) = sex_male then
1766: LD_VAR 0 1
1770: PPUSH
1771: CALL_OW 258
1775: PUSH
1776: LD_INT 1
1778: EQUAL
1779: IFFALSE 1795
// Say ( nearUnit , D2a-RSol1-1 ) else
1781: LD_VAR 0 1
1785: PPUSH
1786: LD_STRING D2a-RSol1-1
1788: PPUSH
1789: CALL_OW 88
1793: GO 1807
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1795: LD_VAR 0 1
1799: PPUSH
1800: LD_STRING D2a-RFSol1-1
1802: PPUSH
1803: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1807: LD_EXP 54
1811: PPUSH
1812: CALL_OW 255
1816: PUSH
1817: LD_INT 3
1819: EQUAL
1820: PUSH
1821: LD_EXP 54
1825: PPUSH
1826: CALL_OW 302
1830: AND
1831: IFFALSE 1845
// Say ( Gnyevko , D2a-Gny-1 ) ;
1833: LD_EXP 54
1837: PPUSH
1838: LD_STRING D2a-Gny-1
1840: PPUSH
1841: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1845: LD_EXP 54
1849: PPUSH
1850: CALL_OW 255
1854: PUSH
1855: LD_INT 8
1857: EQUAL
1858: IFFALSE 1910
// begin Say ( Burlak , D12-Bur-1 ) ;
1860: LD_EXP 46
1864: PPUSH
1865: LD_STRING D12-Bur-1
1867: PPUSH
1868: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1872: LD_EXP 51
1876: PPUSH
1877: CALL_OW 255
1881: PUSH
1882: LD_INT 3
1884: EQUAL
1885: PUSH
1886: LD_EXP 51
1890: PPUSH
1891: CALL_OW 302
1895: AND
1896: IFFALSE 1910
// Say ( Belkov , D12-Bel-2 ) ;
1898: LD_EXP 51
1902: PPUSH
1903: LD_STRING D12-Bel-2
1905: PPUSH
1906: CALL_OW 88
// end ; end ; end ;
1910: PPOPN 1
1912: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1913: LD_EXP 12
1917: NOT
1918: PUSH
1919: LD_EXP 40
1923: PUSH
1924: LD_INT 70
1926: GREATER
1927: AND
1928: IFFALSE 1948
1930: GO 1932
1932: DISABLE
// begin enable ;
1933: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1934: LD_EXP 54
1938: PPUSH
1939: LD_EXP 39
1943: PPUSH
1944: CALL_OW 234
// end ;
1948: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1949: LD_INT 3
1951: PPUSH
1952: LD_EXP 54
1956: PPUSH
1957: CALL_OW 292
1961: IFFALSE 2573
1963: GO 1965
1965: DISABLE
1966: LD_INT 0
1968: PPUSH
1969: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1970: LD_EXP 54
1974: PPUSH
1975: CALL_OW 87
// DialogueOn ;
1979: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1983: LD_ADDR_VAR 0 1
1987: PUSH
1988: LD_INT 22
1990: PUSH
1991: LD_INT 3
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: PUSH
1998: LD_INT 21
2000: PUSH
2001: LD_INT 1
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PUSH
2008: EMPTY
2009: LIST
2010: LIST
2011: PPUSH
2012: CALL_OW 69
2016: PPUSH
2017: LD_EXP 54
2021: PPUSH
2022: CALL_OW 74
2026: ST_TO_ADDR
// if nearUnit = Burlak then
2027: LD_VAR 0 1
2031: PUSH
2032: LD_EXP 46
2036: EQUAL
2037: IFFALSE 2399
// begin Say ( Burlak , D3-Bur-1 ) ;
2039: LD_EXP 46
2043: PPUSH
2044: LD_STRING D3-Bur-1
2046: PPUSH
2047: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2051: LD_EXP 54
2055: PPUSH
2056: LD_STRING D3-Gny-1
2058: PPUSH
2059: CALL_OW 88
// if apeWithRadioKiller then
2063: LD_EXP 11
2067: IFFALSE 2107
// begin if apeWithRadioKiller = Burlak then
2069: LD_EXP 11
2073: PUSH
2074: LD_EXP 46
2078: EQUAL
2079: IFFALSE 2095
// Say ( Burlak , D3-Bur-2 ) else
2081: LD_EXP 46
2085: PPUSH
2086: LD_STRING D3-Bur-2
2088: PPUSH
2089: CALL_OW 88
2093: GO 2107
// Say ( Burlak , D3-Bur-2a ) ;
2095: LD_EXP 46
2099: PPUSH
2100: LD_STRING D3-Bur-2a
2102: PPUSH
2103: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2107: LD_EXP 46
2111: PPUSH
2112: LD_STRING D3-Bur-2b
2114: PPUSH
2115: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 1
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: EMPTY
2140: LIST
2141: LIST
2142: PPUSH
2143: CALL_OW 69
2147: PUSH
2148: LD_INT 1
2150: EQUAL
2151: PUSH
2152: LD_EXP 14
2156: NOT
2157: AND
2158: IFFALSE 2210
// begin Say ( Burlak , D3-Bur-2c ) ;
2160: LD_EXP 46
2164: PPUSH
2165: LD_STRING D3-Bur-2c
2167: PPUSH
2168: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2172: LD_EXP 54
2176: PPUSH
2177: LD_STRING D3-Gny-2
2179: PPUSH
2180: CALL_OW 88
// DialogueOff ;
2184: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2188: LD_EXP 54
2192: PPUSH
2193: LD_INT 3
2195: PPUSH
2196: CALL_OW 235
// gnyevkoSaved = true ;
2200: LD_ADDR_EXP 12
2204: PUSH
2205: LD_INT 1
2207: ST_TO_ADDR
// exit ;
2208: GO 2573
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2210: LD_INT 22
2212: PUSH
2213: LD_INT 3
2215: PUSH
2216: EMPTY
2217: LIST
2218: LIST
2219: PUSH
2220: LD_INT 21
2222: PUSH
2223: LD_INT 1
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PUSH
2230: EMPTY
2231: LIST
2232: LIST
2233: PPUSH
2234: CALL_OW 69
2238: PUSH
2239: LD_INT 1
2241: GREATER
2242: PUSH
2243: LD_EXP 14
2247: OR
2248: PUSH
2249: LD_EXP 22
2253: NOT
2254: AND
2255: IFFALSE 2307
// begin Say ( Burlak , D3-Bur-2d ) ;
2257: LD_EXP 46
2261: PPUSH
2262: LD_STRING D3-Bur-2d
2264: PPUSH
2265: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2269: LD_EXP 54
2273: PPUSH
2274: LD_STRING D3-Gny-2
2276: PPUSH
2277: CALL_OW 88
// DialogueOff ;
2281: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2285: LD_EXP 54
2289: PPUSH
2290: LD_INT 3
2292: PPUSH
2293: CALL_OW 235
// gnyevkoSaved = true ;
2297: LD_ADDR_EXP 12
2301: PUSH
2302: LD_INT 1
2304: ST_TO_ADDR
// exit ;
2305: GO 2573
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2307: LD_INT 22
2309: PUSH
2310: LD_INT 3
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: LD_INT 21
2319: PUSH
2320: LD_INT 1
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: EMPTY
2328: LIST
2329: LIST
2330: PPUSH
2331: CALL_OW 69
2335: PUSH
2336: LD_INT 1
2338: GREATER
2339: PUSH
2340: LD_EXP 22
2344: AND
2345: IFFALSE 2397
// begin Say ( Burlak , D3-Bur-2e ) ;
2347: LD_EXP 46
2351: PPUSH
2352: LD_STRING D3-Bur-2e
2354: PPUSH
2355: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2359: LD_EXP 54
2363: PPUSH
2364: LD_STRING D3-Gny-2
2366: PPUSH
2367: CALL_OW 88
// DialogueOff ;
2371: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2375: LD_EXP 54
2379: PPUSH
2380: LD_INT 3
2382: PPUSH
2383: CALL_OW 235
// gnyevkoSaved = true ;
2387: LD_ADDR_EXP 12
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// exit ;
2395: GO 2573
// end ; end else
2397: GO 2573
// begin if GetSex ( nearUnit ) = sex_male then
2399: LD_VAR 0 1
2403: PPUSH
2404: CALL_OW 258
2408: PUSH
2409: LD_INT 1
2411: EQUAL
2412: IFFALSE 2428
// Say ( nearUnit , D3-RSol1-1 ) else
2414: LD_VAR 0 1
2418: PPUSH
2419: LD_STRING D3-RSol1-1
2421: PPUSH
2422: CALL_OW 88
2426: GO 2440
// Say ( nearUnit , D3-RFSol1-1 ) ;
2428: LD_VAR 0 1
2432: PPUSH
2433: LD_STRING D3-RFSol1-1
2435: PPUSH
2436: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2440: LD_EXP 54
2444: PPUSH
2445: LD_STRING D3-Gny-1
2447: PPUSH
2448: CALL_OW 88
// if apeWithRadioKiller then
2452: LD_EXP 11
2456: IFFALSE 2496
// begin if apeWithRadioKiller = Burlak then
2458: LD_EXP 11
2462: PUSH
2463: LD_EXP 46
2467: EQUAL
2468: IFFALSE 2484
// Say ( Burlak , D3-Bur-2 ) else
2470: LD_EXP 46
2474: PPUSH
2475: LD_STRING D3-Bur-2
2477: PPUSH
2478: CALL_OW 88
2482: GO 2496
// Say ( Burlak , D3-Bur-2a ) ;
2484: LD_EXP 46
2488: PPUSH
2489: LD_STRING D3-Bur-2a
2491: PPUSH
2492: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2496: LD_VAR 0 1
2500: PPUSH
2501: CALL_OW 258
2505: PUSH
2506: LD_INT 1
2508: EQUAL
2509: IFFALSE 2525
// Say ( nearUnit , D3-RSol1-2 ) else
2511: LD_VAR 0 1
2515: PPUSH
2516: LD_STRING D3-RSol1-2
2518: PPUSH
2519: CALL_OW 88
2523: GO 2537
// Say ( nearUnit , D3-RFSol1-2 ) ;
2525: LD_VAR 0 1
2529: PPUSH
2530: LD_STRING D3-RFSol1-2
2532: PPUSH
2533: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2537: LD_EXP 54
2541: PPUSH
2542: LD_STRING D3-Gny-2a
2544: PPUSH
2545: CALL_OW 88
// DialogueOff ;
2549: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2553: LD_EXP 54
2557: PPUSH
2558: LD_INT 3
2560: PPUSH
2561: CALL_OW 235
// gnyevkoSaved = true ;
2565: LD_ADDR_EXP 12
2569: PUSH
2570: LD_INT 1
2572: ST_TO_ADDR
// end ; end ;
2573: PPOPN 2
2575: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2576: LD_EXP 12
2580: NOT
2581: PUSH
2582: LD_EXP 21
2586: NOT
2587: OR
2588: IFFALSE 2783
2590: GO 2592
2592: DISABLE
2593: LD_INT 0
2595: PPUSH
// begin enable ;
2596: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2597: LD_EXP 12
2601: NOT
2602: PUSH
2603: LD_EXP 40
2607: PUSH
2608: LD_INT 70
2610: GREATER
2611: AND
2612: IFFALSE 2690
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2614: LD_ADDR_VAR 0 1
2618: PUSH
2619: LD_INT 22
2621: PUSH
2622: LD_INT 0
2624: PUSH
2625: EMPTY
2626: LIST
2627: LIST
2628: PUSH
2629: LD_INT 25
2631: PUSH
2632: LD_INT 12
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PPUSH
2643: CALL_OW 69
2647: PUSH
2648: FOR_IN
2649: IFFALSE 2688
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2651: LD_VAR 0 1
2655: PPUSH
2656: LD_EXP 54
2660: PPUSH
2661: CALL_OW 250
2665: PPUSH
2666: LD_EXP 54
2670: PPUSH
2671: CALL_OW 251
2675: PPUSH
2676: LD_INT 10
2678: PPUSH
2679: LD_INT 0
2681: PPUSH
2682: CALL 8472 0 5
2686: GO 2648
2688: POP
2689: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2690: LD_EXP 21
2694: NOT
2695: PUSH
2696: LD_EXP 41
2700: PUSH
2701: LD_INT 70
2703: GREATER
2704: AND
2705: IFFALSE 2783
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2707: LD_ADDR_VAR 0 1
2711: PUSH
2712: LD_INT 22
2714: PUSH
2715: LD_INT 0
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PUSH
2722: LD_INT 25
2724: PUSH
2725: LD_INT 12
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PUSH
2732: EMPTY
2733: LIST
2734: LIST
2735: PPUSH
2736: CALL_OW 69
2740: PUSH
2741: FOR_IN
2742: IFFALSE 2781
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2744: LD_VAR 0 1
2748: PPUSH
2749: LD_EXP 53
2753: PPUSH
2754: CALL_OW 250
2758: PPUSH
2759: LD_EXP 53
2763: PPUSH
2764: CALL_OW 251
2768: PPUSH
2769: LD_INT 10
2771: PPUSH
2772: LD_INT 0
2774: PPUSH
2775: CALL 8472 0 5
2779: GO 2741
2781: POP
2782: POP
// end ;
2783: PPOPN 1
2785: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2786: LD_EXP 12
2790: NOT
2791: PUSH
2792: LD_EXP 21
2796: NOT
2797: OR
2798: IFFALSE 2909
2800: GO 2802
2802: DISABLE
// begin enable ;
2803: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2804: LD_EXP 12
2808: NOT
2809: PUSH
2810: LD_EXP 40
2814: PUSH
2815: LD_INT 0
2817: GREATER
2818: AND
2819: IFFALSE 2835
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2821: LD_ADDR_EXP 40
2825: PUSH
2826: LD_EXP 40
2830: PUSH
2831: LD_INT 35
2833: MINUS
2834: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2835: LD_EXP 53
2839: PPUSH
2840: CALL_OW 305
2844: PUSH
2845: LD_EXP 21
2849: NOT
2850: AND
2851: PUSH
2852: LD_EXP 41
2856: PUSH
2857: LD_INT 0
2859: GREATER
2860: AND
2861: IFFALSE 2877
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2863: LD_ADDR_EXP 41
2867: PUSH
2868: LD_EXP 41
2872: PUSH
2873: LD_INT 35
2875: MINUS
2876: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2877: LD_EXP 53
2881: PPUSH
2882: CALL_OW 305
2886: PUSH
2887: LD_EXP 21
2891: NOT
2892: AND
2893: IFFALSE 2909
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2895: LD_ADDR_EXP 26
2899: PUSH
2900: LD_EXP 26
2904: PUSH
2905: LD_INT 35
2907: PLUS
2908: ST_TO_ADDR
// end ;
2909: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2910: LD_INT 3
2912: PPUSH
2913: LD_EXP 47
2917: PPUSH
2918: CALL_OW 292
2922: PUSH
2923: LD_INT 6
2925: PPUSH
2926: LD_EXP 46
2930: PPUSH
2931: CALL_OW 292
2935: OR
2936: PUSH
2937: LD_EXP 54
2941: PPUSH
2942: CALL_OW 255
2946: PUSH
2947: LD_INT 3
2949: EQUAL
2950: PUSH
2951: LD_INT 6
2953: PPUSH
2954: LD_EXP 54
2958: PPUSH
2959: CALL_OW 292
2963: AND
2964: OR
2965: PUSH
2966: LD_EXP 14
2970: NOT
2971: AND
2972: IFFALSE 3887
2974: GO 2976
2976: DISABLE
// begin enable ;
2977: ENABLE
// InGameOn ;
2978: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2982: LD_EXP 47
2986: PPUSH
2987: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2991: LD_EXP 54
2995: PPUSH
2996: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
3000: LD_EXP 46
3004: PUSH
3005: LD_EXP 54
3009: PUSH
3010: EMPTY
3011: LIST
3012: LIST
3013: PPUSH
3014: CALL_OW 200
// DialogueOn ;
3018: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3022: LD_EXP 13
3026: IFFALSE 3278
// begin meetPokryshkin = true ;
3028: LD_ADDR_EXP 14
3032: PUSH
3033: LD_INT 1
3035: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3036: LD_INT 6
3038: PPUSH
3039: LD_INT 3
3041: PPUSH
3042: CALL_OW 343
// DialogueOff ;
3046: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3050: LD_EXP 46
3054: PPUSH
3055: LD_EXP 47
3059: PPUSH
3060: CALL_OW 250
3064: PPUSH
3065: LD_EXP 47
3069: PPUSH
3070: CALL_OW 251
3074: PPUSH
3075: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3079: LD_EXP 46
3083: PPUSH
3084: LD_EXP 47
3088: PPUSH
3089: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3093: LD_EXP 47
3097: PPUSH
3098: LD_EXP 46
3102: PPUSH
3103: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3107: LD_EXP 54
3111: PPUSH
3112: LD_STRING D4-Gny-3
3114: PPUSH
3115: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3119: LD_EXP 46
3123: PPUSH
3124: LD_STRING D4-Bur-3
3126: PPUSH
3127: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3131: LD_EXP 47
3135: PPUSH
3136: LD_STRING D4-Pok-4
3138: PPUSH
3139: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3143: LD_EXP 42
3147: PPUSH
3148: LD_INT 18
3150: PPUSH
3151: LD_INT 1
3153: PPUSH
3154: CALL_OW 49
// wait ( 0 0$2 ) ;
3158: LD_INT 70
3160: PPUSH
3161: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3165: LD_EXP 46
3169: PPUSH
3170: LD_STRING D4-Bur-4
3172: PPUSH
3173: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3177: LD_EXP 47
3181: PPUSH
3182: LD_STRING D4-Pok-5
3184: PPUSH
3185: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3189: LD_EXP 42
3193: PPUSH
3194: LD_STRING D4-Sol1-5
3196: PPUSH
3197: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3201: LD_EXP 47
3205: PPUSH
3206: LD_STRING D4-Pok-6
3208: PPUSH
3209: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3213: LD_EXP 47
3217: PPUSH
3218: LD_STRING D4-Pok-6a
3220: PPUSH
3221: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3225: LD_EXP 46
3229: PPUSH
3230: LD_STRING D4-Bur-6
3232: PPUSH
3233: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3237: LD_EXP 47
3241: PPUSH
3242: LD_STRING D4-Pok-7
3244: PPUSH
3245: CALL_OW 88
// DialogueOff ;
3249: CALL_OW 7
// InGameOff ;
3253: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3257: LD_STRING M2
3259: PPUSH
3260: CALL_OW 337
// goToHill = true ;
3264: LD_ADDR_EXP 15
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// MoveToHill ;
3272: CALL 10352 0 0
// exit ;
3276: GO 3887
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3278: LD_EXP 46
3282: PUSH
3283: LD_EXP 54
3287: PUSH
3288: EMPTY
3289: LIST
3290: LIST
3291: PPUSH
3292: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3296: LD_EXP 47
3300: PPUSH
3301: LD_STRING D4-Pok-1
3303: PPUSH
3304: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3308: LD_EXP 54
3312: PPUSH
3313: CALL_OW 255
3317: PUSH
3318: LD_INT 3
3320: EQUAL
3321: PUSH
3322: LD_EXP 54
3326: PPUSH
3327: CALL_OW 302
3331: AND
3332: IFFALSE 3346
// Say ( Gnyevko , D4-Gny-1 ) ;
3334: LD_EXP 54
3338: PPUSH
3339: LD_STRING D4-Gny-1
3341: PPUSH
3342: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3346: LD_EXP 46
3350: PPUSH
3351: LD_INT 22
3353: PUSH
3354: LD_INT 6
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PUSH
3361: LD_INT 21
3363: PUSH
3364: LD_INT 1
3366: PUSH
3367: EMPTY
3368: LIST
3369: LIST
3370: PUSH
3371: EMPTY
3372: LIST
3373: LIST
3374: PPUSH
3375: CALL_OW 69
3379: PPUSH
3380: LD_EXP 46
3384: PPUSH
3385: CALL_OW 74
3389: PPUSH
3390: CALL_OW 296
3394: PUSH
3395: LD_INT 8
3397: GREATER
3398: PUSH
3399: LD_EXP 46
3403: PPUSH
3404: LD_EXP 54
3408: PPUSH
3409: CALL_OW 296
3413: PUSH
3414: LD_INT 8
3416: GREATER
3417: AND
3418: PUSH
3419: LD_EXP 54
3423: PPUSH
3424: CALL_OW 255
3428: PUSH
3429: LD_INT 3
3431: EQUAL
3432: AND
3433: PUSH
3434: LD_EXP 54
3438: PPUSH
3439: CALL_OW 302
3443: AND
3444: IFFALSE 3542
// begin ComWalk ( Gnyevko ) ;
3446: LD_EXP 54
3450: PPUSH
3451: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3455: LD_EXP 47
3459: PPUSH
3460: LD_STRING D4-Pok-2
3462: PPUSH
3463: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3467: LD_EXP 54
3471: PPUSH
3472: LD_STRING D4-Gny-2
3474: PPUSH
3475: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3479: LD_EXP 47
3483: PPUSH
3484: LD_STRING D4-Pok-3
3486: PPUSH
3487: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3491: LD_ADDR_EXP 13
3495: PUSH
3496: LD_INT 1
3498: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3499: LD_EXP 54
3503: PPUSH
3504: LD_INT 6
3506: PPUSH
3507: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3511: LD_EXP 54
3515: PPUSH
3516: LD_EXP 47
3520: PPUSH
3521: CALL_OW 250
3525: PPUSH
3526: LD_EXP 47
3530: PPUSH
3531: CALL_OW 251
3535: PPUSH
3536: CALL_OW 171
// end else
3540: GO 3879
// begin meetPokryshkin = true ;
3542: LD_ADDR_EXP 14
3546: PUSH
3547: LD_INT 1
3549: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3550: LD_INT 6
3552: PPUSH
3553: LD_INT 3
3555: PPUSH
3556: CALL_OW 343
// DialogueOff ;
3560: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3564: LD_EXP 54
3568: PPUSH
3569: CALL_OW 255
3573: PUSH
3574: LD_INT 3
3576: EQUAL
3577: PUSH
3578: LD_EXP 54
3582: PPUSH
3583: CALL_OW 302
3587: AND
3588: IFFALSE 3665
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3590: LD_EXP 46
3594: PUSH
3595: LD_EXP 54
3599: PUSH
3600: EMPTY
3601: LIST
3602: LIST
3603: PPUSH
3604: LD_EXP 47
3608: PPUSH
3609: CALL_OW 250
3613: PPUSH
3614: LD_EXP 47
3618: PPUSH
3619: CALL_OW 251
3623: PPUSH
3624: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3628: LD_EXP 46
3632: PUSH
3633: LD_EXP 54
3637: PUSH
3638: EMPTY
3639: LIST
3640: LIST
3641: PPUSH
3642: LD_EXP 47
3646: PPUSH
3647: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3651: LD_EXP 54
3655: PPUSH
3656: LD_INT 6
3658: PPUSH
3659: CALL_OW 235
// end else
3663: GO 3708
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3665: LD_EXP 46
3669: PPUSH
3670: LD_EXP 47
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 47
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3694: LD_EXP 46
3698: PPUSH
3699: LD_EXP 47
3703: PPUSH
3704: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3708: LD_EXP 47
3712: PPUSH
3713: LD_EXP 46
3717: PPUSH
3718: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3722: LD_EXP 46
3726: PPUSH
3727: LD_STRING D4-Bur-3
3729: PPUSH
3730: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3734: LD_EXP 47
3738: PPUSH
3739: LD_STRING D4-Pok-4
3741: PPUSH
3742: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3746: LD_EXP 42
3750: PPUSH
3751: LD_INT 18
3753: PPUSH
3754: LD_INT 1
3756: PPUSH
3757: CALL_OW 49
// wait ( 0 0$2 ) ;
3761: LD_INT 70
3763: PPUSH
3764: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3768: LD_EXP 46
3772: PPUSH
3773: LD_STRING D4-Bur-4
3775: PPUSH
3776: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3780: LD_EXP 47
3784: PPUSH
3785: LD_STRING D4-Pok-5
3787: PPUSH
3788: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3792: LD_EXP 42
3796: PPUSH
3797: LD_STRING D4-Sol1-5
3799: PPUSH
3800: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3804: LD_EXP 47
3808: PPUSH
3809: LD_STRING D4-Pok-6
3811: PPUSH
3812: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3816: LD_EXP 47
3820: PPUSH
3821: LD_STRING D4-Pok-6a
3823: PPUSH
3824: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3828: LD_EXP 46
3832: PPUSH
3833: LD_STRING D4-Bur-6
3835: PPUSH
3836: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3840: LD_EXP 47
3844: PPUSH
3845: LD_STRING D4-Pok-7
3847: PPUSH
3848: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3852: LD_STRING M2
3854: PPUSH
3855: CALL_OW 337
// goToHill = true ;
3859: LD_ADDR_EXP 15
3863: PUSH
3864: LD_INT 1
3866: ST_TO_ADDR
// DialogueOff ;
3867: CALL_OW 7
// InGameOff ;
3871: CALL_OW 9
// MoveToHill ;
3875: CALL 10352 0 0
// end ; DialogueOff ;
3879: CALL_OW 7
// InGameOff ;
3883: CALL_OW 9
// end ;
3887: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3888: LD_EXP 46
3892: PPUSH
3893: LD_EXP 47
3897: PPUSH
3898: CALL_OW 296
3902: PUSH
3903: LD_INT 10
3905: GREATER
3906: PUSH
3907: LD_EXP 15
3911: AND
3912: PUSH
3913: LD_EXP 18
3917: NOT
3918: AND
3919: IFFALSE 4120
3921: GO 3923
3923: DISABLE
3924: LD_INT 0
3926: PPUSH
// begin enable ;
3927: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3928: LD_ADDR_VAR 0 1
3932: PUSH
3933: LD_EXP 47
3937: PUSH
3938: LD_EXP 48
3942: PUSH
3943: LD_EXP 49
3947: PUSH
3948: LD_EXP 50
3952: PUSH
3953: LD_EXP 51
3957: PUSH
3958: EMPTY
3959: LIST
3960: LIST
3961: LIST
3962: LIST
3963: LIST
3964: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3965: LD_EXP 54
3969: PPUSH
3970: CALL_OW 255
3974: PUSH
3975: LD_INT 6
3977: EQUAL
3978: PUSH
3979: LD_EXP 12
3983: AND
3984: IFFALSE 4002
// ruSolds = ruSolds ^ Gnyevko ;
3986: LD_ADDR_VAR 0 1
3990: PUSH
3991: LD_VAR 0 1
3995: PUSH
3996: LD_EXP 54
4000: ADD
4001: ST_TO_ADDR
// ComStop ( ruSolds ) ;
4002: LD_VAR 0 1
4006: PPUSH
4007: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
4011: LD_EXP 46
4015: PPUSH
4016: CALL_OW 87
// DialogueOn ;
4020: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
4024: LD_EXP 47
4028: PPUSH
4029: LD_STRING DSplit-Pok-1
4031: PPUSH
4032: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
4036: LD_EXP 46
4040: PPUSH
4041: LD_STRING DSplit-Bur-1
4043: PPUSH
4044: CALL_OW 88
// DialogueOff ;
4048: CALL_OW 7
// InGameOn ;
4052: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
4056: LD_EXP 46
4060: PPUSH
4061: LD_EXP 47
4065: PPUSH
4066: CALL_OW 250
4070: PPUSH
4071: LD_EXP 47
4075: PPUSH
4076: CALL_OW 251
4080: PPUSH
4081: CALL_OW 111
// wait ( 0 0$1 ) ;
4085: LD_INT 35
4087: PPUSH
4088: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4092: LD_EXP 46
4096: PPUSH
4097: LD_EXP 47
4101: PPUSH
4102: CALL_OW 296
4106: PUSH
4107: LD_INT 6
4109: LESS
4110: IFFALSE 4056
// InGameOff ;
4112: CALL_OW 9
// MoveToHill ;
4116: CALL 10352 0 0
// end ;
4120: PPOPN 1
4122: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4123: LD_INT 0
4125: PPUSH
4126: PPUSH
// traitor = true ;
4127: LD_ADDR_EXP 18
4131: PUSH
4132: LD_INT 1
4134: ST_TO_ADDR
// DialogueOn ;
4135: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4139: LD_EXP 47
4143: PPUSH
4144: LD_STRING DAttack-Pok-1
4146: PPUSH
4147: CALL_OW 88
// DialogueOff ;
4151: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4155: LD_INT 3
4157: PPUSH
4158: LD_INT 6
4160: PPUSH
4161: LD_INT 2
4163: PPUSH
4164: LD_INT 1
4166: PPUSH
4167: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4171: LD_INT 22
4173: PUSH
4174: LD_INT 6
4176: PUSH
4177: EMPTY
4178: LIST
4179: LIST
4180: PUSH
4181: LD_INT 21
4183: PUSH
4184: LD_INT 1
4186: PUSH
4187: EMPTY
4188: LIST
4189: LIST
4190: PUSH
4191: EMPTY
4192: LIST
4193: LIST
4194: PPUSH
4195: CALL_OW 69
4199: PPUSH
4200: LD_EXP 46
4204: PPUSH
4205: CALL_OW 115
// end ;
4209: LD_VAR 0 1
4213: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4214: LD_EXP 47
4218: PPUSH
4219: LD_INT 65
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: CALL_OW 297
4229: PUSH
4230: LD_INT 4
4232: LESS
4233: PUSH
4234: LD_EXP 18
4238: NOT
4239: AND
4240: IFFALSE 4437
4242: GO 4244
4244: DISABLE
// begin InGameOn ;
4245: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4249: LD_INT 55
4251: PPUSH
4252: LD_INT 50
4254: PPUSH
4255: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4259: LD_EXP 46
4263: PPUSH
4264: LD_INT 66
4266: PPUSH
4267: LD_INT 57
4269: PPUSH
4270: CALL_OW 111
// AddComHold ( Burlak ) ;
4274: LD_EXP 46
4278: PPUSH
4279: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4283: LD_EXP 42
4287: PPUSH
4288: LD_INT 59
4290: PPUSH
4291: LD_INT 55
4293: PPUSH
4294: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4298: LD_INT 35
4300: PPUSH
4301: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4305: LD_INT 1
4307: PPUSH
4308: LD_EXP 47
4312: PPUSH
4313: CALL_OW 292
4317: IFFALSE 4298
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4319: LD_EXP 42
4323: PUSH
4324: LD_EXP 47
4328: PUSH
4329: EMPTY
4330: LIST
4331: LIST
4332: PPUSH
4333: CALL_OW 87
// ComStop ( Charles ) ;
4337: LD_EXP 42
4341: PPUSH
4342: CALL_OW 141
// AddComHold ( Charles ) ;
4346: LD_EXP 42
4350: PPUSH
4351: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4355: LD_EXP 42
4359: PPUSH
4360: LD_EXP 47
4364: PPUSH
4365: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4369: LD_EXP 42
4373: PPUSH
4374: LD_STRING D5-Sol1-1
4376: PPUSH
4377: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4381: LD_EXP 47
4385: PPUSH
4386: LD_STRING D5-Pok-1
4388: PPUSH
4389: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4393: LD_INT 1
4395: PPUSH
4396: LD_INT 6
4398: PPUSH
4399: LD_INT 2
4401: PPUSH
4402: LD_INT 1
4404: PPUSH
4405: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4409: LD_INT 1
4411: PPUSH
4412: LD_INT 3
4414: PPUSH
4415: LD_INT 2
4417: PPUSH
4418: LD_INT 1
4420: PPUSH
4421: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4425: LD_EXP 42
4429: PPUSH
4430: LD_STRING D5-Sol1-2
4432: PPUSH
4433: CALL_OW 88
// end ;
4437: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4438: LD_EXP 42
4442: PPUSH
4443: CALL_OW 301
4447: PUSH
4448: LD_EXP 15
4452: AND
4453: IFFALSE 5057
4455: GO 4457
4457: DISABLE
4458: LD_INT 0
4460: PPUSH
// begin InGameOn ;
4461: CALL_OW 8
// goToHill = false ;
4465: LD_ADDR_EXP 15
4469: PUSH
4470: LD_INT 0
4472: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4473: LD_INT 22
4475: PUSH
4476: LD_INT 6
4478: PUSH
4479: EMPTY
4480: LIST
4481: LIST
4482: PUSH
4483: LD_INT 21
4485: PUSH
4486: LD_INT 1
4488: PUSH
4489: EMPTY
4490: LIST
4491: LIST
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: PPUSH
4497: CALL_OW 69
4501: PPUSH
4502: CALL_OW 141
// wait ( 0 0$1 ) ;
4506: LD_INT 35
4508: PPUSH
4509: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4513: LD_INT 22
4515: PUSH
4516: LD_INT 6
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: PUSH
4523: LD_INT 21
4525: PUSH
4526: LD_INT 1
4528: PUSH
4529: EMPTY
4530: LIST
4531: LIST
4532: PUSH
4533: EMPTY
4534: LIST
4535: LIST
4536: PPUSH
4537: CALL_OW 69
4541: PPUSH
4542: CALL_OW 138
// wait ( 0 0$1 ) ;
4546: LD_INT 35
4548: PPUSH
4549: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4553: LD_INT 55
4555: PPUSH
4556: LD_INT 50
4558: PPUSH
4559: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4563: LD_EXP 46
4567: PPUSH
4568: LD_INT 56
4570: PPUSH
4571: LD_INT 56
4573: PPUSH
4574: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4578: LD_INT 22
4580: PUSH
4581: LD_INT 6
4583: PUSH
4584: EMPTY
4585: LIST
4586: LIST
4587: PUSH
4588: LD_INT 21
4590: PUSH
4591: LD_INT 1
4593: PUSH
4594: EMPTY
4595: LIST
4596: LIST
4597: PUSH
4598: EMPTY
4599: LIST
4600: LIST
4601: PPUSH
4602: CALL_OW 69
4606: PPUSH
4607: LD_INT 56
4609: PPUSH
4610: LD_INT 56
4612: PPUSH
4613: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4617: LD_EXP 46
4621: PPUSH
4622: LD_STRING D5-Bur-2
4624: PPUSH
4625: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4629: LD_EXP 47
4633: PPUSH
4634: LD_STRING D5-Pok-2
4636: PPUSH
4637: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4641: LD_EXP 51
4645: PPUSH
4646: LD_STRING D5-Bel-2
4648: PPUSH
4649: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4653: LD_EXP 47
4657: PPUSH
4658: LD_STRING D5-Pok-3
4660: PPUSH
4661: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4665: LD_EXP 54
4669: PPUSH
4670: CALL_OW 255
4674: PUSH
4675: LD_INT 6
4677: EQUAL
4678: IFFALSE 4692
// Say ( Gnyevko , D5-Gny-3 ) ;
4680: LD_EXP 54
4684: PPUSH
4685: LD_STRING D5-Gny-3
4687: PPUSH
4688: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4692: LD_EXP 46
4696: PPUSH
4697: LD_STRING D5-Bur-3
4699: PPUSH
4700: CALL_OW 88
// interface_hidden = true ;
4704: LD_ADDR_OWVAR 54
4708: PUSH
4709: LD_INT 1
4711: ST_TO_ADDR
// IngameOff ;
4712: CALL_OW 9
// wait ( 0 0$2 ) ;
4716: LD_INT 70
4718: PPUSH
4719: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4723: LD_EXP 46
4727: PPUSH
4728: LD_INT 85
4730: PPUSH
4731: LD_INT 64
4733: PPUSH
4734: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4738: LD_INT 22
4740: PUSH
4741: LD_INT 6
4743: PUSH
4744: EMPTY
4745: LIST
4746: LIST
4747: PUSH
4748: LD_INT 21
4750: PUSH
4751: LD_INT 1
4753: PUSH
4754: EMPTY
4755: LIST
4756: LIST
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PPUSH
4762: CALL_OW 69
4766: PPUSH
4767: LD_INT 85
4769: PPUSH
4770: LD_INT 64
4772: PPUSH
4773: CALL_OW 111
// interface_hidden = false ;
4777: LD_ADDR_OWVAR 54
4781: PUSH
4782: LD_INT 0
4784: ST_TO_ADDR
// InGameOn ;
4785: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4789: LD_EXP 46
4793: PPUSH
4794: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4798: LD_EXP 47
4802: PPUSH
4803: LD_STRING D6-Pok-1
4805: PPUSH
4806: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4810: LD_EXP 46
4814: PPUSH
4815: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4819: LD_EXP 46
4823: PPUSH
4824: LD_STRING D6-Bur-1
4826: PPUSH
4827: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4831: LD_EXP 46
4835: PPUSH
4836: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4840: LD_EXP 47
4844: PPUSH
4845: LD_STRING D6-Pok-2
4847: PPUSH
4848: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4852: LD_EXP 46
4856: PPUSH
4857: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4861: LD_EXP 51
4865: PPUSH
4866: LD_STRING D6-Bel-2
4868: PPUSH
4869: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4873: LD_EXP 46
4877: PPUSH
4878: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4882: LD_EXP 46
4886: PPUSH
4887: LD_STRING D6-Bur-2
4889: PPUSH
4890: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4894: LD_EXP 46
4898: PPUSH
4899: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4903: LD_EXP 47
4907: PPUSH
4908: LD_STRING D6-Pok-3
4910: PPUSH
4911: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4915: LD_EXP 46
4919: PPUSH
4920: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4924: LD_EXP 55
4928: PPUSH
4929: LD_STRING D6-Kur-3
4931: PPUSH
4932: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4936: LD_EXP 46
4940: PPUSH
4941: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4945: LD_EXP 47
4949: PPUSH
4950: LD_STRING D6-Pok-4
4952: PPUSH
4953: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4957: LD_EXP 46
4961: PPUSH
4962: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4966: LD_EXP 51
4970: PPUSH
4971: LD_STRING D6-Bel-4
4973: PPUSH
4974: CALL_OW 88
// InGameOff ;
4978: CALL_OW 9
// interface_hidden = false ;
4982: LD_ADDR_OWVAR 54
4986: PUSH
4987: LD_INT 0
4989: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4990: LD_EXP 47
4994: PPUSH
4995: LD_INT 23
4997: PPUSH
4998: CALL_OW 115
// wait ( 0 0$5 ) ;
5002: LD_INT 175
5004: PPUSH
5005: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5009: LD_INT 22
5011: PUSH
5012: LD_INT 6
5014: PUSH
5015: EMPTY
5016: LIST
5017: LIST
5018: PUSH
5019: LD_INT 21
5021: PUSH
5022: LD_INT 1
5024: PUSH
5025: EMPTY
5026: LIST
5027: LIST
5028: PUSH
5029: EMPTY
5030: LIST
5031: LIST
5032: PPUSH
5033: CALL_OW 69
5037: PPUSH
5038: LD_INT 23
5040: PPUSH
5041: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
5045: LD_INT 1
5047: PPUSH
5048: LD_EXP 54
5052: PPUSH
5053: CALL_OW 471
// end ;
5057: PPOPN 1
5059: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5060: LD_INT 1
5062: PPUSH
5063: LD_EXP 47
5067: PPUSH
5068: CALL_OW 292
5072: PUSH
5073: LD_EXP 42
5077: PPUSH
5078: CALL_OW 301
5082: AND
5083: IFFALSE 5102
5085: GO 5087
5087: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5088: LD_EXP 43
5092: PPUSH
5093: LD_EXP 47
5097: PPUSH
5098: CALL_OW 115
5102: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5103: LD_INT 3
5105: PPUSH
5106: LD_INT 23
5108: PPUSH
5109: CALL_OW 292
5113: IFFALSE 5142
5115: GO 5117
5117: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
5118: LD_EXP 47
5122: PPUSH
5123: LD_STRING D7-Pok-1
5125: PPUSH
5126: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
5130: LD_EXP 43
5134: PPUSH
5135: LD_STRING D7-FSol1-1
5137: PPUSH
5138: CALL_OW 88
// end ;
5142: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5143: LD_EXP 47
5147: PPUSH
5148: CALL_OW 303
5152: IFFALSE 5686
5154: GO 5156
5156: DISABLE
5157: LD_INT 0
5159: PPUSH
5160: PPUSH
5161: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5162: LD_ADDR_VAR 0 3
5166: PUSH
5167: LD_INT 22
5169: PUSH
5170: LD_INT 6
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 21
5179: PUSH
5180: LD_INT 1
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PUSH
5187: LD_INT 50
5189: PUSH
5190: EMPTY
5191: LIST
5192: PUSH
5193: EMPTY
5194: LIST
5195: LIST
5196: LIST
5197: PPUSH
5198: CALL_OW 69
5202: PUSH
5203: LD_EXP 51
5207: DIFF
5208: ST_TO_ADDR
// DialogueOn ;
5209: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5213: LD_EXP 51
5217: PPUSH
5218: LD_STRING D7a-Bel-1
5220: PPUSH
5221: CALL_OW 88
// DialogueOff ;
5225: CALL_OW 7
// for i := 1 to ruSolds do
5229: LD_ADDR_VAR 0 1
5233: PUSH
5234: DOUBLE
5235: LD_INT 1
5237: DEC
5238: ST_TO_ADDR
5239: LD_VAR 0 3
5243: PUSH
5244: FOR_TO
5245: IFFALSE 5303
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5247: LD_VAR 0 3
5251: PUSH
5252: LD_VAR 0 1
5256: ARRAY
5257: PPUSH
5258: LD_INT 87
5260: PUSH
5261: LD_VAR 0 1
5265: PLUS
5266: PPUSH
5267: LD_INT 63
5269: PUSH
5270: LD_VAR 0 1
5274: PLUS
5275: PPUSH
5276: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5280: LD_VAR 0 3
5284: PUSH
5285: LD_VAR 0 1
5289: ARRAY
5290: PPUSH
5291: LD_INT 89
5293: PPUSH
5294: LD_INT 67
5296: PPUSH
5297: CALL_OW 178
// end ;
5301: GO 5244
5303: POP
5304: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5305: LD_EXP 51
5309: PPUSH
5310: LD_INT 89
5312: PPUSH
5313: LD_INT 67
5315: PPUSH
5316: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5320: LD_EXP 51
5324: PPUSH
5325: LD_INT 88
5327: PPUSH
5328: LD_INT 66
5330: PPUSH
5331: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5335: LD_EXP 48
5339: PPUSH
5340: LD_STRING D7a-RSol1-1
5342: PPUSH
5343: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5347: LD_EXP 43
5351: PPUSH
5352: LD_STRING D7a-FSol1-1
5354: PPUSH
5355: CALL_OW 88
// wait ( 0 0$12 ) ;
5359: LD_INT 420
5361: PPUSH
5362: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5366: LD_EXP 51
5370: PPUSH
5371: LD_STRING D7b-Bel-1
5373: PPUSH
5374: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5378: LD_EXP 49
5382: PPUSH
5383: LD_STRING D7b-FSol1-1
5385: PPUSH
5386: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5390: LD_EXP 51
5394: PPUSH
5395: LD_STRING D7b-Bel-2
5397: PPUSH
5398: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5402: LD_EXP 48
5406: PPUSH
5407: LD_STRING D7b-RSol1-2
5409: PPUSH
5410: CALL_OW 88
// for unit in ruSolds do
5414: LD_ADDR_VAR 0 2
5418: PUSH
5419: LD_VAR 0 3
5423: PUSH
5424: FOR_IN
5425: IFFALSE 5668
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5427: LD_EXP 46
5431: PPUSH
5432: LD_VAR 0 2
5436: PPUSH
5437: CALL_OW 296
5441: PUSH
5442: LD_INT 7
5444: LESS
5445: IFFALSE 5658
// begin InGameOn ;
5447: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5451: LD_EXP 51
5455: PUSH
5456: LD_EXP 48
5460: PUSH
5461: EMPTY
5462: LIST
5463: LIST
5464: PPUSH
5465: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5469: LD_EXP 46
5473: PPUSH
5474: LD_INT 88
5476: PPUSH
5477: LD_INT 66
5479: PPUSH
5480: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5484: LD_EXP 51
5488: PPUSH
5489: LD_EXP 46
5493: PPUSH
5494: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5498: LD_EXP 46
5502: PPUSH
5503: LD_INT 90
5505: PPUSH
5506: LD_INT 66
5508: PPUSH
5509: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5513: LD_EXP 46
5517: PPUSH
5518: LD_STRING D7b-Bur-3
5520: PPUSH
5521: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5525: LD_EXP 51
5529: PPUSH
5530: LD_STRING D7b-Bel-4
5532: PPUSH
5533: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5537: LD_EXP 46
5541: PPUSH
5542: LD_STRING D7b-Bur-4
5544: PPUSH
5545: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5549: LD_EXP 51
5553: PPUSH
5554: LD_STRING D7b-Bel-5
5556: PPUSH
5557: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5561: LD_EXP 49
5565: PPUSH
5566: LD_STRING D7b-FSol1-5
5568: PPUSH
5569: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5573: LD_EXP 51
5577: PPUSH
5578: LD_STRING D7b-Bel-6
5580: PPUSH
5581: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5585: LD_EXP 46
5589: PPUSH
5590: LD_STRING D7b-Bur-6
5592: PPUSH
5593: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5597: LD_EXP 48
5601: PPUSH
5602: LD_STRING D7b-RSol1-6
5604: PPUSH
5605: CALL_OW 88
// InGameOff ;
5609: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5613: LD_VAR 0 3
5617: PPUSH
5618: LD_INT 3
5620: PPUSH
5621: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5625: LD_EXP 51
5629: PPUSH
5630: LD_INT 3
5632: PPUSH
5633: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5637: LD_STRING M3
5639: PPUSH
5640: CALL_OW 337
// secondAttack = true ;
5644: LD_ADDR_EXP 17
5648: PUSH
5649: LD_INT 1
5651: ST_TO_ADDR
// exit ;
5652: POP
5653: POP
5654: GO 5686
// end else
5656: GO 5666
// belkovWaitForGorky = true ;
5658: LD_ADDR_EXP 16
5662: PUSH
5663: LD_INT 1
5665: ST_TO_ADDR
5666: GO 5424
5668: POP
5669: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5670: LD_EXP 51
5674: PPUSH
5675: LD_STRING D7b-Bel-3
5677: PPUSH
5678: CALL_OW 88
// InGameOff ;
5682: CALL_OW 9
// end ;
5686: PPOPN 3
5688: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5689: LD_EXP 16
5693: PUSH
5694: LD_EXP 18
5698: NOT
5699: AND
5700: IFFALSE 6034
5702: GO 5704
5704: DISABLE
5705: LD_INT 0
5707: PPUSH
5708: PPUSH
// begin enable ;
5709: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5710: LD_ADDR_VAR 0 2
5714: PUSH
5715: LD_INT 22
5717: PUSH
5718: LD_INT 6
5720: PUSH
5721: EMPTY
5722: LIST
5723: LIST
5724: PUSH
5725: LD_INT 21
5727: PUSH
5728: LD_INT 1
5730: PUSH
5731: EMPTY
5732: LIST
5733: LIST
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: PPUSH
5739: CALL_OW 69
5743: ST_TO_ADDR
// for unit in ruSolds do
5744: LD_ADDR_VAR 0 1
5748: PUSH
5749: LD_VAR 0 2
5753: PUSH
5754: FOR_IN
5755: IFFALSE 6032
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5757: LD_EXP 46
5761: PPUSH
5762: LD_VAR 0 1
5766: PPUSH
5767: CALL_OW 296
5771: PUSH
5772: LD_INT 7
5774: LESS
5775: IFFALSE 6030
// begin if not IsInUnit ( Johanna ) then
5777: LD_EXP 43
5781: PPUSH
5782: CALL_OW 310
5786: NOT
5787: IFFALSE 5801
// ComEnterUnit ( Johanna , am_bun ) ;
5789: LD_EXP 43
5793: PPUSH
5794: LD_INT 23
5796: PPUSH
5797: CALL_OW 120
// belkovWaitForGorky = false ;
5801: LD_ADDR_EXP 16
5805: PUSH
5806: LD_INT 0
5808: ST_TO_ADDR
// InGameOn ;
5809: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5813: LD_EXP 51
5817: PUSH
5818: LD_EXP 48
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: PPUSH
5827: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5831: LD_EXP 46
5835: PPUSH
5836: LD_INT 88
5838: PPUSH
5839: LD_INT 66
5841: PPUSH
5842: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5846: LD_EXP 51
5850: PPUSH
5851: LD_EXP 46
5855: PPUSH
5856: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5860: LD_EXP 46
5864: PPUSH
5865: LD_INT 90
5867: PPUSH
5868: LD_INT 66
5870: PPUSH
5871: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5875: LD_EXP 51
5879: PPUSH
5880: LD_STRING D7b-Bel-3a
5882: PPUSH
5883: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5887: LD_EXP 46
5891: PPUSH
5892: LD_STRING D7b-Bur-3
5894: PPUSH
5895: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5899: LD_EXP 51
5903: PPUSH
5904: LD_STRING D7b-Bel-4
5906: PPUSH
5907: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5911: LD_EXP 46
5915: PPUSH
5916: LD_STRING D7b-Bur-4
5918: PPUSH
5919: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5923: LD_EXP 51
5927: PPUSH
5928: LD_STRING D7b-Bel-5
5930: PPUSH
5931: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5935: LD_EXP 49
5939: PPUSH
5940: LD_STRING D7b-FSol1-5
5942: PPUSH
5943: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5947: LD_EXP 51
5951: PPUSH
5952: LD_STRING D7b-Bel-6
5954: PPUSH
5955: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5959: LD_EXP 46
5963: PPUSH
5964: LD_STRING D7b-Bur-6
5966: PPUSH
5967: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5971: LD_EXP 48
5975: PPUSH
5976: LD_STRING D7a-RSol1-6
5978: PPUSH
5979: CALL_OW 88
// InGameOff ;
5983: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5987: LD_VAR 0 2
5991: PPUSH
5992: LD_INT 3
5994: PPUSH
5995: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5999: LD_EXP 51
6003: PPUSH
6004: LD_INT 3
6006: PPUSH
6007: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
6011: LD_STRING M3
6013: PPUSH
6014: CALL_OW 337
// secondAttack = true ;
6018: LD_ADDR_EXP 17
6022: PUSH
6023: LD_INT 1
6025: ST_TO_ADDR
// exit ;
6026: POP
6027: POP
6028: GO 6034
// end ;
6030: GO 5754
6032: POP
6033: POP
// end ;
6034: PPOPN 2
6036: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
6037: LD_INT 0
6039: PPUSH
6040: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6041: LD_EXP 43
6045: PPUSH
6046: LD_STRING D8-FSol1-1
6048: PPUSH
6049: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6053: LD_EXP 44
6057: PPUSH
6058: LD_STRING D8-Glad-1
6060: PPUSH
6061: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6065: LD_EXP 46
6069: PPUSH
6070: LD_STRING D8-Bur-1
6072: PPUSH
6073: CALL_OW 88
// secondAttack = false ;
6077: LD_ADDR_EXP 17
6081: PUSH
6082: LD_INT 0
6084: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
6085: LD_ADDR_VAR 0 2
6089: PUSH
6090: LD_INT 22
6092: PUSH
6093: LD_INT 3
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: PUSH
6100: LD_INT 21
6102: PUSH
6103: LD_INT 1
6105: PUSH
6106: EMPTY
6107: LIST
6108: LIST
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PPUSH
6114: CALL_OW 69
6118: PPUSH
6119: LD_INT 23
6121: PPUSH
6122: CALL_OW 74
6126: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6127: LD_EXP 45
6131: PPUSH
6132: CALL_OW 122
// wait ( 0 0$1 ) ;
6136: LD_INT 35
6138: PPUSH
6139: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
6143: LD_EXP 45
6147: PPUSH
6148: LD_VAR 0 2
6152: PPUSH
6153: CALL_OW 175
// end ;
6157: LD_VAR 0 1
6161: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6162: LD_INT 23
6164: PPUSH
6165: CALL_OW 256
6169: PUSH
6170: LD_INT 350
6172: LESS
6173: PUSH
6174: LD_INT 23
6176: PPUSH
6177: CALL_OW 256
6181: PUSH
6182: LD_INT 250
6184: GREATER
6185: AND
6186: PUSH
6187: LD_INT 20
6189: PPUSH
6190: LD_INT 22
6192: PUSH
6193: LD_INT 3
6195: PUSH
6196: EMPTY
6197: LIST
6198: LIST
6199: PUSH
6200: LD_INT 21
6202: PUSH
6203: LD_INT 1
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 70
6218: PUSH
6219: LD_INT 0
6221: GREATER
6222: AND
6223: PUSH
6224: LD_EXP 24
6228: NOT
6229: AND
6230: IFFALSE 6247
6232: GO 6234
6234: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6235: LD_EXP 43
6239: PPUSH
6240: LD_STRING D8-FSol1-2
6242: PPUSH
6243: CALL_OW 88
6247: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6248: LD_INT 23
6250: PPUSH
6251: CALL_OW 303
6255: PUSH
6256: LD_INT 22
6258: PPUSH
6259: CALL_OW 302
6263: AND
6264: PUSH
6265: LD_EXP 24
6269: NOT
6270: AND
6271: IFFALSE 6341
6273: GO 6275
6275: DISABLE
// begin amRetreat = true ;
6276: LD_ADDR_EXP 24
6280: PUSH
6281: LD_INT 1
6283: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6284: LD_EXP 43
6288: PPUSH
6289: LD_STRING D8-FSol1-2a
6291: PPUSH
6292: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6296: LD_EXP 44
6300: PUSH
6301: LD_EXP 43
6305: PUSH
6306: EMPTY
6307: LIST
6308: LIST
6309: PPUSH
6310: LD_INT 21
6312: PPUSH
6313: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6317: LD_EXP 44
6321: PPUSH
6322: LD_STRING D8-Glad-2
6324: PPUSH
6325: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6329: LD_EXP 46
6333: PPUSH
6334: LD_STRING D8-Bur-2
6336: PPUSH
6337: CALL_OW 88
// end ;
6341: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6342: LD_INT 22
6344: PPUSH
6345: CALL_OW 303
6349: PUSH
6350: LD_INT 23
6352: PPUSH
6353: CALL_OW 302
6357: AND
6358: PUSH
6359: LD_EXP 24
6363: NOT
6364: AND
6365: IFFALSE 6435
6367: GO 6369
6369: DISABLE
// begin amRetreat = true ;
6370: LD_ADDR_EXP 24
6374: PUSH
6375: LD_INT 1
6377: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6378: LD_EXP 43
6382: PPUSH
6383: LD_STRING D8-FSol1-2a
6385: PPUSH
6386: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6390: LD_EXP 44
6394: PUSH
6395: LD_EXP 43
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: PPUSH
6404: LD_INT 21
6406: PPUSH
6407: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6411: LD_EXP 44
6415: PPUSH
6416: LD_STRING D8-Glad-2
6418: PPUSH
6419: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6423: LD_EXP 46
6427: PPUSH
6428: LD_STRING D8-Bur-2
6430: PPUSH
6431: CALL_OW 88
// end ;
6435: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6436: LD_INT 23
6438: PPUSH
6439: CALL_OW 256
6443: PUSH
6444: LD_INT 500
6446: LESS
6447: PUSH
6448: LD_OWVAR 67
6452: PUSH
6453: LD_INT 3
6455: EQUAL
6456: AND
6457: PUSH
6458: LD_EXP 24
6462: NOT
6463: AND
6464: IFFALSE 6534
6466: GO 6468
6468: DISABLE
// begin amRetreat = true ;
6469: LD_ADDR_EXP 24
6473: PUSH
6474: LD_INT 1
6476: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6477: LD_EXP 43
6481: PPUSH
6482: LD_STRING D8-FSol1-2a
6484: PPUSH
6485: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6489: LD_EXP 44
6493: PUSH
6494: LD_EXP 43
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: PPUSH
6503: LD_INT 21
6505: PPUSH
6506: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6510: LD_EXP 44
6514: PPUSH
6515: LD_STRING D8-Glad-2
6517: PPUSH
6518: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6522: LD_EXP 46
6526: PPUSH
6527: LD_STRING D8-Bur-2
6529: PPUSH
6530: CALL_OW 88
// end ;
6534: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6535: LD_INT 22
6537: PUSH
6538: LD_INT 1
6540: PUSH
6541: EMPTY
6542: LIST
6543: LIST
6544: PUSH
6545: LD_INT 21
6547: PUSH
6548: LD_INT 1
6550: PUSH
6551: EMPTY
6552: LIST
6553: LIST
6554: PUSH
6555: LD_INT 50
6557: PUSH
6558: EMPTY
6559: LIST
6560: PUSH
6561: EMPTY
6562: LIST
6563: LIST
6564: LIST
6565: PPUSH
6566: CALL_OW 69
6570: PUSH
6571: LD_INT 0
6573: GREATER
6574: IFFALSE 6702
6576: GO 6578
6578: DISABLE
6579: LD_INT 0
6581: PPUSH
// begin enable ;
6582: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6583: LD_ADDR_VAR 0 1
6587: PUSH
6588: LD_INT 21
6590: PPUSH
6591: LD_INT 22
6593: PUSH
6594: LD_INT 1
6596: PUSH
6597: EMPTY
6598: LIST
6599: LIST
6600: PUSH
6601: LD_INT 21
6603: PUSH
6604: LD_INT 1
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: PUSH
6611: EMPTY
6612: LIST
6613: LIST
6614: PPUSH
6615: CALL_OW 70
6619: PUSH
6620: FOR_IN
6621: IFFALSE 6700
// begin if unit = Gladstone then
6623: LD_VAR 0 1
6627: PUSH
6628: LD_EXP 44
6632: EQUAL
6633: IFFALSE 6663
// begin gladstoneEscape = true ;
6635: LD_ADDR_EXP 19
6639: PUSH
6640: LD_INT 1
6642: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6643: LD_EXP 44
6647: PPUSH
6648: LD_EXP 30
6652: PUSH
6653: LD_STRING Gladstone
6655: STR
6656: PPUSH
6657: CALL_OW 38
// end else
6661: GO 6689
// begin JohannaEscape = true ;
6663: LD_ADDR_EXP 20
6667: PUSH
6668: LD_INT 1
6670: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6671: LD_EXP 43
6675: PPUSH
6676: LD_EXP 30
6680: PUSH
6681: LD_STRING Johanna
6683: STR
6684: PPUSH
6685: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6689: LD_VAR 0 1
6693: PPUSH
6694: CALL_OW 64
// end ;
6698: GO 6620
6700: POP
6701: POP
// end ;
6702: PPOPN 1
6704: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6705: LD_EXP 44
6709: PPUSH
6710: CALL_OW 301
6714: PUSH
6715: LD_EXP 43
6719: PPUSH
6720: CALL_OW 301
6724: AND
6725: IFFALSE 6742
6727: GO 6729
6729: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6730: LD_EXP 46
6734: PPUSH
6735: LD_STRING D9-Bur-1
6737: PPUSH
6738: CALL_OW 88
6742: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6743: LD_EXP 43
6747: PPUSH
6748: CALL_OW 301
6752: PUSH
6753: LD_EXP 19
6757: AND
6758: PUSH
6759: LD_EXP 20
6763: NOT
6764: AND
6765: IFFALSE 6782
6767: GO 6769
6769: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6770: LD_EXP 46
6774: PPUSH
6775: LD_STRING D9-Bur-1a
6777: PPUSH
6778: CALL_OW 88
6782: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6783: LD_EXP 44
6787: PPUSH
6788: CALL_OW 301
6792: PUSH
6793: LD_EXP 19
6797: NOT
6798: AND
6799: PUSH
6800: LD_EXP 20
6804: AND
6805: IFFALSE 6822
6807: GO 6809
6809: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6810: LD_EXP 46
6814: PPUSH
6815: LD_STRING D9-Bur-1b
6817: PPUSH
6818: CALL_OW 88
6822: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6823: LD_EXP 19
6827: PUSH
6828: LD_EXP 20
6832: AND
6833: IFFALSE 6850
6835: GO 6837
6837: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6838: LD_EXP 46
6842: PPUSH
6843: LD_STRING D9-Bur-1c
6845: PPUSH
6846: CALL_OW 88
6850: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6851: LD_INT 22
6853: PUSH
6854: LD_INT 1
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PUSH
6861: LD_INT 21
6863: PUSH
6864: LD_INT 3
6866: PUSH
6867: EMPTY
6868: LIST
6869: LIST
6870: PUSH
6871: LD_INT 50
6873: PUSH
6874: EMPTY
6875: LIST
6876: PUSH
6877: EMPTY
6878: LIST
6879: LIST
6880: LIST
6881: PPUSH
6882: CALL_OW 69
6886: PUSH
6887: LD_INT 0
6889: EQUAL
6890: IFFALSE 7138
6892: GO 6894
6894: DISABLE
6895: LD_INT 0
6897: PPUSH
6898: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6899: LD_ADDR_VAR 0 1
6903: PUSH
6904: LD_INT 22
6906: PUSH
6907: LD_INT 3
6909: PUSH
6910: EMPTY
6911: LIST
6912: LIST
6913: PUSH
6914: LD_INT 21
6916: PUSH
6917: LD_INT 1
6919: PUSH
6920: EMPTY
6921: LIST
6922: LIST
6923: PUSH
6924: LD_INT 50
6926: PUSH
6927: EMPTY
6928: LIST
6929: PUSH
6930: EMPTY
6931: LIST
6932: LIST
6933: LIST
6934: PPUSH
6935: CALL_OW 69
6939: PUSH
6940: LD_EXP 46
6944: PUSH
6945: LD_EXP 54
6949: PUSH
6950: LD_EXP 51
6954: PUSH
6955: EMPTY
6956: LIST
6957: LIST
6958: LIST
6959: DIFF
6960: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6961: LD_ADDR_VAR 0 2
6965: PUSH
6966: LD_VAR 0 1
6970: PPUSH
6971: LD_INT 26
6973: PUSH
6974: LD_INT 1
6976: PUSH
6977: EMPTY
6978: LIST
6979: LIST
6980: PPUSH
6981: CALL_OW 72
6985: ST_TO_ADDR
// DialogueOn ;
6986: CALL_OW 6
// if IsOK ( Belkov ) then
6990: LD_EXP 51
6994: PPUSH
6995: CALL_OW 302
6999: IFFALSE 7013
// Say ( Belkov , D10-Bel-1 ) ;
7001: LD_EXP 51
7005: PPUSH
7006: LD_STRING D10-Bel-1
7008: PPUSH
7009: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7013: LD_VAR 0 1
7017: PUSH
7018: LD_INT 0
7020: GREATER
7021: PUSH
7022: LD_VAR 0 2
7026: PUSH
7027: LD_INT 0
7029: GREATER
7030: PUSH
7031: LD_EXP 51
7035: PPUSH
7036: CALL_OW 302
7040: OR
7041: AND
7042: IFFALSE 7109
// begin Say ( Burlak , D10-Bur-1 ) ;
7044: LD_EXP 46
7048: PPUSH
7049: LD_STRING D10-Bur-1
7051: PPUSH
7052: CALL_OW 88
// if IsOK ( Belkov ) then
7056: LD_EXP 51
7060: PPUSH
7061: CALL_OW 302
7065: IFFALSE 7081
// Say ( Belkov , D10-Bel-1a ) else
7067: LD_EXP 51
7071: PPUSH
7072: LD_STRING D10-Bel-1a
7074: PPUSH
7075: CALL_OW 88
7079: GO 7097
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7081: LD_VAR 0 2
7085: PUSH
7086: LD_INT 1
7088: ARRAY
7089: PPUSH
7090: LD_STRING D10-RSol1-1
7092: PPUSH
7093: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7097: LD_EXP 46
7101: PPUSH
7102: LD_STRING D10-Bur-2
7104: PPUSH
7105: CALL_OW 88
// end ; DialogueOff ;
7109: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7113: LD_STRING M4a
7115: PPUSH
7116: CALL_OW 337
// evacuationAvailable = true ;
7120: LD_ADDR_EXP 22
7124: PUSH
7125: LD_INT 1
7127: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7128: LD_INT 1
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: CALL_OW 424
// end ;
7138: PPOPN 2
7140: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7141: LD_EXP 22
7145: PUSH
7146: LD_EXP 25
7150: NOT
7151: AND
7152: IFFALSE 7762
7154: GO 7156
7156: DISABLE
7157: LD_INT 0
7159: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7160: LD_EXP 53
7164: PPUSH
7165: LD_INT 22
7167: PPUSH
7168: LD_INT 1
7170: PPUSH
7171: CALL_OW 49
// wait ( 0 0$3 ) ;
7175: LD_INT 105
7177: PPUSH
7178: CALL_OW 67
// jelenaSpawned = true ;
7182: LD_ADDR_EXP 25
7186: PUSH
7187: LD_INT 1
7189: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 9 then
7190: LD_INT 22
7192: PUSH
7193: LD_INT 3
7195: PUSH
7196: EMPTY
7197: LIST
7198: LIST
7199: PUSH
7200: LD_INT 21
7202: PUSH
7203: LD_INT 1
7205: PUSH
7206: EMPTY
7207: LIST
7208: LIST
7209: PUSH
7210: LD_INT 50
7212: PUSH
7213: EMPTY
7214: LIST
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: LIST
7220: PPUSH
7221: CALL_OW 69
7225: PPUSH
7226: LD_EXP 53
7230: PPUSH
7231: CALL_OW 74
7235: PPUSH
7236: LD_EXP 53
7240: PPUSH
7241: CALL_OW 296
7245: PUSH
7246: LD_INT 9
7248: LESS
7249: IFFALSE 7253
// exit ;
7251: GO 7762
// DialogueOn ;
7253: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7257: LD_EXP 53
7261: PPUSH
7262: LD_STRING D11b-Kir-1
7264: PPUSH
7265: CALL_OW 94
// if IsOK ( Belkov ) then
7269: LD_EXP 51
7273: PPUSH
7274: CALL_OW 302
7278: IFFALSE 7306
// begin Say ( Belkov , D11b-Bel-1 ) ;
7280: LD_EXP 51
7284: PPUSH
7285: LD_STRING D11b-Bel-1
7287: PPUSH
7288: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7292: LD_EXP 51
7296: PPUSH
7297: LD_STRING D11b-Bel-1a
7299: PPUSH
7300: CALL_OW 94
// end else
7304: GO 7361
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7306: LD_ADDR_VAR 0 1
7310: PUSH
7311: LD_INT 22
7313: PUSH
7314: LD_INT 3
7316: PUSH
7317: EMPTY
7318: LIST
7319: LIST
7320: PUSH
7321: LD_INT 21
7323: PUSH
7324: LD_INT 1
7326: PUSH
7327: EMPTY
7328: LIST
7329: LIST
7330: PUSH
7331: LD_INT 50
7333: PUSH
7334: EMPTY
7335: LIST
7336: PUSH
7337: EMPTY
7338: LIST
7339: LIST
7340: LIST
7341: PPUSH
7342: CALL_OW 69
7346: PPUSH
7347: LD_STRING D11b-RSol1-1
7349: PPUSH
7350: LD_STRING D11b-RFSol1-1
7352: PPUSH
7353: LD_INT 0
7355: PPUSH
7356: CALL 8139 0 4
7360: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7361: LD_INT 24
7363: PPUSH
7364: LD_INT 22
7366: PUSH
7367: LD_INT 0
7369: PUSH
7370: EMPTY
7371: LIST
7372: LIST
7373: PUSH
7374: LD_INT 25
7376: PUSH
7377: LD_INT 12
7379: PUSH
7380: EMPTY
7381: LIST
7382: LIST
7383: PUSH
7384: EMPTY
7385: LIST
7386: LIST
7387: PPUSH
7388: CALL_OW 70
7392: PUSH
7393: LD_INT 0
7395: GREATER
7396: IFFALSE 7412
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7398: LD_EXP 53
7402: PPUSH
7403: LD_STRING D11b1-Kir-1
7405: PPUSH
7406: CALL_OW 94
7410: GO 7424
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7412: LD_EXP 53
7416: PPUSH
7417: LD_STRING D11b2-Kir-1
7419: PPUSH
7420: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7424: LD_EXP 6
7428: PUSH
7429: LD_INT 24
7431: PPUSH
7432: LD_INT 22
7434: PUSH
7435: LD_INT 0
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: PUSH
7442: LD_INT 25
7444: PUSH
7445: LD_INT 12
7447: PUSH
7448: EMPTY
7449: LIST
7450: LIST
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PPUSH
7456: CALL_OW 70
7460: PUSH
7461: LD_INT 0
7463: GREATER
7464: AND
7465: IFFALSE 7600
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7467: LD_EXP 46
7471: PPUSH
7472: LD_STRING D11b1-Bur-1
7474: PPUSH
7475: CALL_OW 88
// if IsOk ( Belkov ) then
7479: LD_EXP 51
7483: PPUSH
7484: CALL_OW 302
7488: IFFALSE 7504
// Say ( Belkov , D11b2-Bel-1 ) else
7490: LD_EXP 51
7494: PPUSH
7495: LD_STRING D11b2-Bel-1
7497: PPUSH
7498: CALL_OW 88
7502: GO 7545
// begin if GetSex ( randomSold ) = sex_male then
7504: LD_VAR 0 1
7508: PPUSH
7509: CALL_OW 258
7513: PUSH
7514: LD_INT 1
7516: EQUAL
7517: IFFALSE 7533
// Say ( randomSold , D11b1-RSol1-1 ) else
7519: LD_VAR 0 1
7523: PPUSH
7524: LD_STRING D11b1-RSol1-1
7526: PPUSH
7527: CALL_OW 88
7531: GO 7545
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7533: LD_VAR 0 1
7537: PPUSH
7538: LD_STRING D11b1-RFSol1-1
7540: PPUSH
7541: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7545: LD_INT 22
7547: PUSH
7548: LD_INT 1
7550: PUSH
7551: EMPTY
7552: LIST
7553: LIST
7554: PUSH
7555: LD_INT 21
7557: PUSH
7558: LD_INT 1
7560: PUSH
7561: EMPTY
7562: LIST
7563: LIST
7564: PUSH
7565: LD_INT 50
7567: PUSH
7568: EMPTY
7569: LIST
7570: PUSH
7571: EMPTY
7572: LIST
7573: LIST
7574: LIST
7575: PPUSH
7576: CALL_OW 69
7580: PPUSH
7581: LD_STRING D11b1-RSol1-1
7583: PPUSH
7584: LD_STRING D11b1-RFSol1-1
7586: PPUSH
7587: LD_INT 0
7589: PPUSH
7590: CALL 8139 0 4
// DialogueOff ;
7594: CALL_OW 7
// exit ;
7598: GO 7762
// end ; if spotWaterfall then
7600: LD_EXP 7
7604: IFFALSE 7690
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7606: LD_EXP 46
7610: PPUSH
7611: LD_STRING D11b1-Bur-1a
7613: PPUSH
7614: CALL_OW 88
// if IsOk ( Belkov ) then
7618: LD_EXP 51
7622: PPUSH
7623: CALL_OW 302
7627: IFFALSE 7643
// Say ( Belkov , D11b2-Bel-1 ) else
7629: LD_EXP 51
7633: PPUSH
7634: LD_STRING D11b2-Bel-1
7636: PPUSH
7637: CALL_OW 88
7641: GO 7684
// begin if GetSex ( randomSold ) = sex_male then
7643: LD_VAR 0 1
7647: PPUSH
7648: CALL_OW 258
7652: PUSH
7653: LD_INT 1
7655: EQUAL
7656: IFFALSE 7672
// Say ( randomSold , D11b1-RSol1-1 ) else
7658: LD_VAR 0 1
7662: PPUSH
7663: LD_STRING D11b1-RSol1-1
7665: PPUSH
7666: CALL_OW 88
7670: GO 7684
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7672: LD_VAR 0 1
7676: PPUSH
7677: LD_STRING D11b1-RFSol1-1
7679: PPUSH
7680: CALL_OW 88
// end ; DialogueOff ;
7684: CALL_OW 7
// exit ;
7688: GO 7762
// end ; if IsOk ( Belkov ) then
7690: LD_EXP 51
7694: PPUSH
7695: CALL_OW 302
7699: IFFALSE 7715
// Say ( Belkov , D11b1-Bel-1 ) else
7701: LD_EXP 51
7705: PPUSH
7706: LD_STRING D11b1-Bel-1
7708: PPUSH
7709: CALL_OW 88
7713: GO 7756
// begin if GetSex ( randomSold ) = sex_male then
7715: LD_VAR 0 1
7719: PPUSH
7720: CALL_OW 258
7724: PUSH
7725: LD_INT 1
7727: EQUAL
7728: IFFALSE 7744
// Say ( randomSold , D11b1-RSol1-1 ) else
7730: LD_VAR 0 1
7734: PPUSH
7735: LD_STRING D11b1-RSol1-1
7737: PPUSH
7738: CALL_OW 88
7742: GO 7756
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7744: LD_VAR 0 1
7748: PPUSH
7749: LD_STRING D11b1-RFSol1-1
7751: PPUSH
7752: CALL_OW 88
// end ; DialogueOff ;
7756: CALL_OW 7
// exit ;
7760: GO 7762
// end ;
7762: PPOPN 1
7764: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
7765: LD_INT 3
7767: PPUSH
7768: LD_EXP 53
7772: PPUSH
7773: CALL_OW 292
7777: PUSH
7778: LD_EXP 25
7782: AND
7783: IFFALSE 8019
7785: GO 7787
7787: DISABLE
7788: LD_INT 0
7790: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7791: LD_EXP 53
7795: PPUSH
7796: LD_INT 3
7798: PPUSH
7799: CALL_OW 235
// jelenaSaved = true ;
7803: LD_ADDR_EXP 21
7807: PUSH
7808: LD_INT 1
7810: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7811: LD_EXP 53
7815: PPUSH
7816: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
7820: LD_ADDR_VAR 0 1
7824: PUSH
7825: LD_INT 22
7827: PUSH
7828: LD_INT 3
7830: PUSH
7831: EMPTY
7832: LIST
7833: LIST
7834: PUSH
7835: LD_INT 21
7837: PUSH
7838: LD_INT 1
7840: PUSH
7841: EMPTY
7842: LIST
7843: LIST
7844: PUSH
7845: LD_INT 50
7847: PUSH
7848: EMPTY
7849: LIST
7850: PUSH
7851: EMPTY
7852: LIST
7853: LIST
7854: LIST
7855: PPUSH
7856: CALL_OW 69
7860: PUSH
7861: LD_EXP 53
7865: DIFF
7866: PPUSH
7867: LD_EXP 53
7871: PPUSH
7872: CALL_OW 74
7876: ST_TO_ADDR
// DialogueOn ;
7877: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7881: LD_EXP 53
7885: PPUSH
7886: LD_STRING D11a-Kir-1
7888: PPUSH
7889: CALL_OW 88
// if nearUnit = Belkov then
7893: LD_VAR 0 1
7897: PUSH
7898: LD_EXP 51
7902: EQUAL
7903: IFFALSE 7943
// begin Say ( Belkov , D11a-Bel-1 ) ;
7905: LD_EXP 51
7909: PPUSH
7910: LD_STRING D11a-Bel-1
7912: PPUSH
7913: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7917: LD_EXP 53
7921: PPUSH
7922: LD_STRING D11a-Kir-2
7924: PPUSH
7925: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7929: LD_EXP 51
7933: PPUSH
7934: LD_STRING D11a-Bel-2
7936: PPUSH
7937: CALL_OW 88
// end else
7941: GO 7984
// begin if GetSex ( nearUnit ) = sex_male then
7943: LD_VAR 0 1
7947: PPUSH
7948: CALL_OW 258
7952: PUSH
7953: LD_INT 1
7955: EQUAL
7956: IFFALSE 7972
// Say ( nearUnit , D11a-RSol1-2 ) else
7958: LD_VAR 0 1
7962: PPUSH
7963: LD_STRING D11a-RSol1-2
7965: PPUSH
7966: CALL_OW 88
7970: GO 7984
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7972: LD_VAR 0 1
7976: PPUSH
7977: LD_STRING D11a-RFSol1-2
7979: PPUSH
7980: CALL_OW 88
// end ; DialogueOff ;
7984: CALL_OW 7
// wait ( 0 0$5 ) ;
7988: LD_INT 175
7990: PPUSH
7991: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7995: LD_EXP 53
7999: PPUSH
8000: LD_STRING D11c-Kir-1
8002: PPUSH
8003: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8007: LD_EXP 46
8011: PPUSH
8012: LD_STRING D11c-Bur-1
8014: PPUSH
8015: CALL_OW 88
// end ;
8019: PPOPN 1
8021: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8022: LD_EXP 22
8026: PUSH
8027: LD_INT 1
8029: PPUSH
8030: LD_INT 22
8032: PUSH
8033: LD_INT 3
8035: PUSH
8036: EMPTY
8037: LIST
8038: LIST
8039: PUSH
8040: LD_INT 21
8042: PUSH
8043: LD_INT 1
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PPUSH
8054: CALL_OW 70
8058: PUSH
8059: LD_INT 0
8061: GREATER
8062: AND
8063: IFFALSE 8075
8065: GO 8067
8067: DISABLE
// begin Query ( QExit1 ) ;
8068: LD_STRING QExit1
8070: PPUSH
8071: CALL_OW 97
// end ; end_of_file
8075: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8076: LD_INT 0
8078: PPUSH
8079: PPUSH
// if exist_mode then
8080: LD_VAR 0 2
8084: IFFALSE 8109
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8086: LD_ADDR_VAR 0 4
8090: PUSH
8091: LD_EXP 31
8095: PUSH
8096: LD_VAR 0 1
8100: STR
8101: PPUSH
8102: CALL_OW 34
8106: ST_TO_ADDR
8107: GO 8124
// unit := NewCharacter ( ident ) ;
8109: LD_ADDR_VAR 0 4
8113: PUSH
8114: LD_VAR 0 1
8118: PPUSH
8119: CALL_OW 25
8123: ST_TO_ADDR
// result := unit ;
8124: LD_ADDR_VAR 0 3
8128: PUSH
8129: LD_VAR 0 4
8133: ST_TO_ADDR
// end ;
8134: LD_VAR 0 3
8138: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8139: LD_INT 0
8141: PPUSH
8142: PPUSH
8143: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8144: LD_ADDR_VAR 0 1
8148: PUSH
8149: LD_VAR 0 1
8153: PUSH
8154: LD_EXP 46
8158: PUSH
8159: LD_EXP 54
8163: PUSH
8164: LD_EXP 51
8168: PUSH
8169: LD_EXP 53
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: DIFF
8180: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8181: LD_ADDR_VAR 0 7
8185: PUSH
8186: LD_VAR 0 1
8190: PUSH
8191: LD_INT 1
8193: PPUSH
8194: LD_VAR 0 1
8198: PPUSH
8199: CALL_OW 12
8203: ARRAY
8204: ST_TO_ADDR
// if radio then
8205: LD_VAR 0 4
8209: IFFALSE 8258
// begin if GetSex ( speaker ) = sex_male then
8211: LD_VAR 0 7
8215: PPUSH
8216: CALL_OW 258
8220: PUSH
8221: LD_INT 1
8223: EQUAL
8224: IFFALSE 8242
// SayRadio ( speaker , dialogMID ) else
8226: LD_VAR 0 7
8230: PPUSH
8231: LD_VAR 0 2
8235: PPUSH
8236: CALL_OW 94
8240: GO 8256
// SayRadio ( speaker , dialogFID ) ;
8242: LD_VAR 0 7
8246: PPUSH
8247: LD_VAR 0 3
8251: PPUSH
8252: CALL_OW 94
// end else
8256: GO 8303
// begin if GetSex ( speaker ) = sex_male then
8258: LD_VAR 0 7
8262: PPUSH
8263: CALL_OW 258
8267: PUSH
8268: LD_INT 1
8270: EQUAL
8271: IFFALSE 8289
// Say ( speaker , dialogMID ) else
8273: LD_VAR 0 7
8277: PPUSH
8278: LD_VAR 0 2
8282: PPUSH
8283: CALL_OW 88
8287: GO 8303
// Say ( speaker , dialogFID ) ;
8289: LD_VAR 0 7
8293: PPUSH
8294: LD_VAR 0 3
8298: PPUSH
8299: CALL_OW 88
// end ; result := speaker ;
8303: LD_ADDR_VAR 0 5
8307: PUSH
8308: LD_VAR 0 7
8312: ST_TO_ADDR
// end ;
8313: LD_VAR 0 5
8317: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8318: LD_INT 0
8320: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8321: LD_VAR 0 1
8325: PPUSH
8326: CALL_OW 255
8330: PUSH
8331: LD_OWVAR 2
8335: EQUAL
8336: PUSH
8337: LD_VAR 0 1
8341: PPUSH
8342: CALL_OW 302
8346: AND
8347: IFFALSE 8369
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8349: LD_VAR 0 1
8353: PPUSH
8354: LD_EXP 30
8358: PUSH
8359: LD_VAR 0 2
8363: STR
8364: PPUSH
8365: CALL_OW 38
// end ;
8369: LD_VAR 0 3
8373: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8374: LD_INT 0
8376: PPUSH
8377: PPUSH
8378: PPUSH
// resultCharactersToSave = [ ] ;
8379: LD_ADDR_VAR 0 5
8383: PUSH
8384: EMPTY
8385: ST_TO_ADDR
// for unit in characters do
8386: LD_ADDR_VAR 0 4
8390: PUSH
8391: LD_VAR 0 1
8395: PUSH
8396: FOR_IN
8397: IFFALSE 8445
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8399: LD_VAR 0 4
8403: PPUSH
8404: CALL_OW 255
8408: PUSH
8409: LD_OWVAR 2
8413: EQUAL
8414: PUSH
8415: LD_VAR 0 4
8419: PPUSH
8420: CALL_OW 302
8424: AND
8425: IFFALSE 8443
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8427: LD_ADDR_VAR 0 5
8431: PUSH
8432: LD_VAR 0 5
8436: PUSH
8437: LD_VAR 0 4
8441: ADD
8442: ST_TO_ADDR
8443: GO 8396
8445: POP
8446: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8447: LD_VAR 0 5
8451: PPUSH
8452: LD_EXP 30
8456: PUSH
8457: LD_VAR 0 2
8461: STR
8462: PPUSH
8463: CALL_OW 38
// end ;
8467: LD_VAR 0 3
8471: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8472: LD_INT 0
8474: PPUSH
8475: PPUSH
8476: PPUSH
8477: PPUSH
8478: PPUSH
8479: PPUSH
8480: PPUSH
8481: PPUSH
8482: PPUSH
8483: PPUSH
8484: PPUSH
8485: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8486: LD_VAR 0 1
8490: PPUSH
8491: CALL_OW 302
8495: NOT
8496: PUSH
8497: LD_VAR 0 4
8501: PUSH
8502: LD_INT 1
8504: EQUAL
8505: OR
8506: PUSH
8507: LD_VAR 0 2
8511: PPUSH
8512: LD_VAR 0 3
8516: PPUSH
8517: CALL_OW 488
8521: NOT
8522: OR
8523: PUSH
8524: LD_VAR 0 1
8528: PPUSH
8529: LD_VAR 0 2
8533: PPUSH
8534: LD_VAR 0 3
8538: PPUSH
8539: CALL_OW 297
8543: PUSH
8544: LD_VAR 0 4
8548: GREATEREQUAL
8549: OR
8550: PUSH
8551: LD_VAR 0 5
8555: PUSH
8556: LD_INT 1
8558: PUSH
8559: LD_INT 0
8561: PUSH
8562: EMPTY
8563: LIST
8564: LIST
8565: IN
8566: NOT
8567: OR
8568: IFFALSE 8572
// exit ;
8570: GO 10129
// attempts = 0 ;
8572: LD_ADDR_VAR 0 17
8576: PUSH
8577: LD_INT 0
8579: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8580: LD_ADDR_VAR 0 7
8584: PUSH
8585: EMPTY
8586: ST_TO_ADDR
// list_coords = [ ] ;
8587: LD_ADDR_VAR 0 8
8591: PUSH
8592: EMPTY
8593: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8594: LD_ADDR_VAR 0 9
8598: PUSH
8599: LD_VAR 0 2
8603: PPUSH
8604: LD_VAR 0 3
8608: PPUSH
8609: LD_VAR 0 1
8613: PPUSH
8614: CALL_OW 250
8618: PPUSH
8619: LD_VAR 0 1
8623: PPUSH
8624: CALL_OW 251
8628: PPUSH
8629: CALL 10134 0 4
8633: ST_TO_ADDR
// if attempts = 0 then
8634: LD_VAR 0 17
8638: PUSH
8639: LD_INT 0
8641: EQUAL
8642: IFFALSE 8750
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8644: LD_ADDR_VAR 0 10
8648: PUSH
8649: LD_VAR 0 9
8653: PUSH
8654: LD_VAR 0 9
8658: PUSH
8659: LD_INT 1
8661: PLUS
8662: PUSH
8663: LD_VAR 0 9
8667: PUSH
8668: LD_INT 1
8670: MINUS
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8677: LD_VAR 0 10
8681: PUSH
8682: LD_INT 2
8684: ARRAY
8685: PUSH
8686: LD_INT 6
8688: EQUAL
8689: IFFALSE 8712
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8691: LD_ADDR_VAR 0 10
8695: PUSH
8696: LD_VAR 0 10
8700: PPUSH
8701: LD_INT 2
8703: PPUSH
8704: LD_INT 0
8706: PPUSH
8707: CALL_OW 1
8711: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8712: LD_VAR 0 10
8716: PUSH
8717: LD_INT 3
8719: ARRAY
8720: PUSH
8721: LD_INT 1
8723: NEG
8724: EQUAL
8725: IFFALSE 8748
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8727: LD_ADDR_VAR 0 10
8731: PUSH
8732: LD_VAR 0 10
8736: PPUSH
8737: LD_INT 3
8739: PPUSH
8740: LD_INT 5
8742: PPUSH
8743: CALL_OW 1
8747: ST_TO_ADDR
// end else
8748: GO 8787
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8750: LD_ADDR_VAR 0 10
8754: PUSH
8755: LD_INT 0
8757: PUSH
8758: LD_INT 1
8760: PUSH
8761: LD_INT 2
8763: PUSH
8764: LD_INT 3
8766: PUSH
8767: LD_INT 4
8769: PUSH
8770: LD_INT 5
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: PUSH
8781: LD_VAR 0 9
8785: DIFF
8786: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8787: LD_ADDR_VAR 0 14
8791: PUSH
8792: DOUBLE
8793: LD_INT 1
8795: DEC
8796: ST_TO_ADDR
8797: LD_VAR 0 10
8801: PUSH
8802: LD_INT 0
8804: PLUS
8805: PUSH
8806: FOR_TO
8807: IFFALSE 9129
// case dir_list [ c ] of 0 :
8809: LD_VAR 0 10
8813: PUSH
8814: LD_VAR 0 14
8818: ARRAY
8819: PUSH
8820: LD_INT 0
8822: DOUBLE
8823: EQUAL
8824: IFTRUE 8828
8826: GO 8869
8828: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8829: LD_ADDR_VAR 0 8
8833: PUSH
8834: LD_VAR 0 8
8838: PPUSH
8839: LD_INT 1
8841: PPUSH
8842: LD_VAR 0 2
8846: PUSH
8847: LD_VAR 0 3
8851: PUSH
8852: LD_VAR 0 4
8856: MINUS
8857: PUSH
8858: EMPTY
8859: LIST
8860: LIST
8861: PPUSH
8862: CALL_OW 2
8866: ST_TO_ADDR
8867: GO 9127
8869: LD_INT 1
8871: DOUBLE
8872: EQUAL
8873: IFTRUE 8877
8875: GO 8918
8877: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8878: LD_ADDR_VAR 0 8
8882: PUSH
8883: LD_VAR 0 8
8887: PPUSH
8888: LD_INT 1
8890: PPUSH
8891: LD_VAR 0 2
8895: PUSH
8896: LD_VAR 0 4
8900: PLUS
8901: PUSH
8902: LD_VAR 0 3
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: PPUSH
8911: CALL_OW 2
8915: ST_TO_ADDR
8916: GO 9127
8918: LD_INT 2
8920: DOUBLE
8921: EQUAL
8922: IFTRUE 8926
8924: GO 8973
8926: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8927: LD_ADDR_VAR 0 8
8931: PUSH
8932: LD_VAR 0 8
8936: PPUSH
8937: LD_INT 1
8939: PPUSH
8940: LD_VAR 0 2
8944: PUSH
8945: LD_VAR 0 4
8949: PLUS
8950: PUSH
8951: LD_VAR 0 3
8955: PUSH
8956: LD_VAR 0 4
8960: PLUS
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 2
8970: ST_TO_ADDR
8971: GO 9127
8973: LD_INT 3
8975: DOUBLE
8976: EQUAL
8977: IFTRUE 8981
8979: GO 9022
8981: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8982: LD_ADDR_VAR 0 8
8986: PUSH
8987: LD_VAR 0 8
8991: PPUSH
8992: LD_INT 1
8994: PPUSH
8995: LD_VAR 0 2
8999: PUSH
9000: LD_VAR 0 3
9004: PUSH
9005: LD_VAR 0 4
9009: PLUS
9010: PUSH
9011: EMPTY
9012: LIST
9013: LIST
9014: PPUSH
9015: CALL_OW 2
9019: ST_TO_ADDR
9020: GO 9127
9022: LD_INT 4
9024: DOUBLE
9025: EQUAL
9026: IFTRUE 9030
9028: GO 9071
9030: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9031: LD_ADDR_VAR 0 8
9035: PUSH
9036: LD_VAR 0 8
9040: PPUSH
9041: LD_INT 1
9043: PPUSH
9044: LD_VAR 0 2
9048: PUSH
9049: LD_VAR 0 4
9053: MINUS
9054: PUSH
9055: LD_VAR 0 3
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: PPUSH
9064: CALL_OW 2
9068: ST_TO_ADDR
9069: GO 9127
9071: LD_INT 5
9073: DOUBLE
9074: EQUAL
9075: IFTRUE 9079
9077: GO 9126
9079: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9080: LD_ADDR_VAR 0 8
9084: PUSH
9085: LD_VAR 0 8
9089: PPUSH
9090: LD_INT 1
9092: PPUSH
9093: LD_VAR 0 2
9097: PUSH
9098: LD_VAR 0 4
9102: MINUS
9103: PUSH
9104: LD_VAR 0 3
9108: PUSH
9109: LD_VAR 0 4
9113: MINUS
9114: PUSH
9115: EMPTY
9116: LIST
9117: LIST
9118: PPUSH
9119: CALL_OW 2
9123: ST_TO_ADDR
9124: GO 9127
9126: POP
9127: GO 8806
9129: POP
9130: POP
// if dist < 30 then
9131: LD_VAR 0 4
9135: PUSH
9136: LD_INT 30
9138: LESS
9139: IFFALSE 9151
// c = 1 else
9141: LD_ADDR_VAR 0 14
9145: PUSH
9146: LD_INT 1
9148: ST_TO_ADDR
9149: GO 9159
// c = 2 ;
9151: LD_ADDR_VAR 0 14
9155: PUSH
9156: LD_INT 2
9158: ST_TO_ADDR
// b = 1 ;
9159: LD_ADDR_VAR 0 11
9163: PUSH
9164: LD_INT 1
9166: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9167: LD_VAR 0 11
9171: PUSH
9172: LD_VAR 0 4
9176: PUSH
9177: LD_INT 1
9179: MINUS
9180: LESSEQUAL
9181: IFFALSE 9609
// begin if 0 in dir_list and 1 in dir_list then
9183: LD_INT 0
9185: PUSH
9186: LD_VAR 0 10
9190: IN
9191: PUSH
9192: LD_INT 1
9194: PUSH
9195: LD_VAR 0 10
9199: IN
9200: AND
9201: IFFALSE 9253
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9203: LD_ADDR_VAR 0 8
9207: PUSH
9208: LD_VAR 0 8
9212: PPUSH
9213: LD_INT 1
9215: PPUSH
9216: LD_VAR 0 2
9220: PUSH
9221: LD_VAR 0 11
9225: PLUS
9226: PUSH
9227: LD_VAR 0 3
9231: PUSH
9232: LD_VAR 0 4
9236: MINUS
9237: PUSH
9238: LD_VAR 0 11
9242: PLUS
9243: PUSH
9244: EMPTY
9245: LIST
9246: LIST
9247: PPUSH
9248: CALL_OW 2
9252: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9253: LD_INT 1
9255: PUSH
9256: LD_VAR 0 10
9260: IN
9261: PUSH
9262: LD_INT 2
9264: PUSH
9265: LD_VAR 0 10
9269: IN
9270: AND
9271: IFFALSE 9317
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9273: LD_ADDR_VAR 0 8
9277: PUSH
9278: LD_VAR 0 8
9282: PPUSH
9283: LD_INT 1
9285: PPUSH
9286: LD_VAR 0 2
9290: PUSH
9291: LD_VAR 0 4
9295: PLUS
9296: PUSH
9297: LD_VAR 0 3
9301: PUSH
9302: LD_VAR 0 11
9306: PLUS
9307: PUSH
9308: EMPTY
9309: LIST
9310: LIST
9311: PPUSH
9312: CALL_OW 2
9316: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9317: LD_INT 2
9319: PUSH
9320: LD_VAR 0 10
9324: IN
9325: PUSH
9326: LD_INT 3
9328: PUSH
9329: LD_VAR 0 10
9333: IN
9334: AND
9335: IFFALSE 9387
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9337: LD_ADDR_VAR 0 8
9341: PUSH
9342: LD_VAR 0 8
9346: PPUSH
9347: LD_INT 1
9349: PPUSH
9350: LD_VAR 0 2
9354: PUSH
9355: LD_VAR 0 4
9359: PLUS
9360: PUSH
9361: LD_VAR 0 11
9365: MINUS
9366: PUSH
9367: LD_VAR 0 3
9371: PUSH
9372: LD_VAR 0 4
9376: PLUS
9377: PUSH
9378: EMPTY
9379: LIST
9380: LIST
9381: PPUSH
9382: CALL_OW 2
9386: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9387: LD_INT 3
9389: PUSH
9390: LD_VAR 0 10
9394: IN
9395: PUSH
9396: LD_INT 4
9398: PUSH
9399: LD_VAR 0 10
9403: IN
9404: AND
9405: IFFALSE 9457
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9407: LD_ADDR_VAR 0 8
9411: PUSH
9412: LD_VAR 0 8
9416: PPUSH
9417: LD_INT 1
9419: PPUSH
9420: LD_VAR 0 2
9424: PUSH
9425: LD_VAR 0 11
9429: MINUS
9430: PUSH
9431: LD_VAR 0 3
9435: PUSH
9436: LD_VAR 0 4
9440: PLUS
9441: PUSH
9442: LD_VAR 0 11
9446: MINUS
9447: PUSH
9448: EMPTY
9449: LIST
9450: LIST
9451: PPUSH
9452: CALL_OW 2
9456: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9457: LD_INT 4
9459: PUSH
9460: LD_VAR 0 10
9464: IN
9465: PUSH
9466: LD_INT 5
9468: PUSH
9469: LD_VAR 0 10
9473: IN
9474: AND
9475: IFFALSE 9521
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9477: LD_ADDR_VAR 0 8
9481: PUSH
9482: LD_VAR 0 8
9486: PPUSH
9487: LD_INT 1
9489: PPUSH
9490: LD_VAR 0 2
9494: PUSH
9495: LD_VAR 0 4
9499: MINUS
9500: PUSH
9501: LD_VAR 0 3
9505: PUSH
9506: LD_VAR 0 11
9510: MINUS
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: PPUSH
9516: CALL_OW 2
9520: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9521: LD_INT 5
9523: PUSH
9524: LD_VAR 0 10
9528: IN
9529: PUSH
9530: LD_INT 0
9532: PUSH
9533: LD_VAR 0 10
9537: IN
9538: AND
9539: IFFALSE 9591
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9541: LD_ADDR_VAR 0 8
9545: PUSH
9546: LD_VAR 0 8
9550: PPUSH
9551: LD_INT 1
9553: PPUSH
9554: LD_VAR 0 2
9558: PUSH
9559: LD_VAR 0 4
9563: MINUS
9564: PUSH
9565: LD_VAR 0 11
9569: PLUS
9570: PUSH
9571: LD_VAR 0 3
9575: PUSH
9576: LD_VAR 0 4
9580: MINUS
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: PPUSH
9586: CALL_OW 2
9590: ST_TO_ADDR
// b = b + c end ;
9591: LD_ADDR_VAR 0 11
9595: PUSH
9596: LD_VAR 0 11
9600: PUSH
9601: LD_VAR 0 14
9605: PLUS
9606: ST_TO_ADDR
9607: GO 9167
// if list_coords = 0 then
9609: LD_VAR 0 8
9613: PUSH
9614: LD_INT 0
9616: EQUAL
9617: IFFALSE 9621
// exit ;
9619: GO 10129
// repeat min_dist = 5000 ;
9621: LD_ADDR_VAR 0 12
9625: PUSH
9626: LD_INT 5000
9628: ST_TO_ADDR
// for b in list_coords do
9629: LD_ADDR_VAR 0 11
9633: PUSH
9634: LD_VAR 0 8
9638: PUSH
9639: FOR_IN
9640: IFFALSE 9699
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9642: LD_ADDR_VAR 0 13
9646: PUSH
9647: LD_VAR 0 1
9651: PPUSH
9652: LD_VAR 0 11
9656: PUSH
9657: LD_INT 1
9659: ARRAY
9660: PPUSH
9661: LD_VAR 0 11
9665: PUSH
9666: LD_INT 2
9668: ARRAY
9669: PPUSH
9670: CALL_OW 297
9674: ST_TO_ADDR
// if temp_dist < min_dist then
9675: LD_VAR 0 13
9679: PUSH
9680: LD_VAR 0 12
9684: LESS
9685: IFFALSE 9697
// min_dist = temp_dist ;
9687: LD_ADDR_VAR 0 12
9691: PUSH
9692: LD_VAR 0 13
9696: ST_TO_ADDR
// end ;
9697: GO 9639
9699: POP
9700: POP
// c = 0 ;
9701: LD_ADDR_VAR 0 14
9705: PUSH
9706: LD_INT 0
9708: ST_TO_ADDR
// repeat c = c + 1 ;
9709: LD_ADDR_VAR 0 14
9713: PUSH
9714: LD_VAR 0 14
9718: PUSH
9719: LD_INT 1
9721: PLUS
9722: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9723: LD_VAR 0 1
9727: PPUSH
9728: LD_VAR 0 8
9732: PUSH
9733: LD_VAR 0 14
9737: ARRAY
9738: PUSH
9739: LD_INT 1
9741: ARRAY
9742: PPUSH
9743: LD_VAR 0 8
9747: PUSH
9748: LD_VAR 0 14
9752: ARRAY
9753: PUSH
9754: LD_INT 2
9756: ARRAY
9757: PPUSH
9758: CALL_OW 297
9762: PUSH
9763: LD_VAR 0 12
9767: EQUAL
9768: IFFALSE 9833
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9770: LD_ADDR_VAR 0 7
9774: PUSH
9775: LD_VAR 0 7
9779: PPUSH
9780: LD_INT 1
9782: PPUSH
9783: LD_VAR 0 8
9787: PUSH
9788: LD_VAR 0 14
9792: ARRAY
9793: PPUSH
9794: CALL_OW 2
9798: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9799: LD_ADDR_VAR 0 8
9803: PUSH
9804: LD_VAR 0 8
9808: PPUSH
9809: LD_VAR 0 14
9813: PPUSH
9814: CALL_OW 3
9818: ST_TO_ADDR
// c = c - 1 ;
9819: LD_ADDR_VAR 0 14
9823: PUSH
9824: LD_VAR 0 14
9828: PUSH
9829: LD_INT 1
9831: MINUS
9832: ST_TO_ADDR
// end ; until c = list_coords ;
9833: LD_VAR 0 14
9837: PUSH
9838: LD_VAR 0 8
9842: EQUAL
9843: IFFALSE 9709
// c = 0 ;
9845: LD_ADDR_VAR 0 14
9849: PUSH
9850: LD_INT 0
9852: ST_TO_ADDR
// if list_nearest > 0 then
9853: LD_VAR 0 7
9857: PUSH
9858: LD_INT 0
9860: GREATER
9861: IFFALSE 10003
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9863: LD_ADDR_VAR 0 15
9867: PUSH
9868: LD_INT 1
9870: PPUSH
9871: LD_VAR 0 7
9875: PPUSH
9876: CALL_OW 12
9880: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9881: LD_ADDR_VAR 0 16
9885: PUSH
9886: LD_VAR 0 7
9890: PUSH
9891: LD_VAR 0 15
9895: ARRAY
9896: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9897: LD_VAR 0 16
9901: PUSH
9902: LD_INT 1
9904: ARRAY
9905: PPUSH
9906: LD_VAR 0 16
9910: PUSH
9911: LD_INT 2
9913: ARRAY
9914: PPUSH
9915: CALL_OW 488
9919: PUSH
9920: LD_INT 0
9922: GREATER
9923: PUSH
9924: LD_VAR 0 16
9928: PUSH
9929: LD_INT 1
9931: ARRAY
9932: PPUSH
9933: LD_VAR 0 16
9937: PUSH
9938: LD_INT 2
9940: ARRAY
9941: PPUSH
9942: CALL_OW 428
9946: PUSH
9947: LD_INT 0
9949: EQUAL
9950: AND
9951: IFFALSE 9963
// c = 1 else
9953: LD_ADDR_VAR 0 14
9957: PUSH
9958: LD_INT 1
9960: ST_TO_ADDR
9961: GO 9983
// list_nearest = Delete ( list_nearest , rand_num ) ;
9963: LD_ADDR_VAR 0 7
9967: PUSH
9968: LD_VAR 0 7
9972: PPUSH
9973: LD_VAR 0 15
9977: PPUSH
9978: CALL_OW 3
9982: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9983: LD_VAR 0 14
9987: PUSH
9988: LD_INT 1
9990: EQUAL
9991: PUSH
9992: LD_VAR 0 7
9996: PUSH
9997: LD_INT 0
9999: EQUAL
10000: OR
10001: IFFALSE 9863
// end ; until c = 1 or list_coords = 0 ;
10003: LD_VAR 0 14
10007: PUSH
10008: LD_INT 1
10010: EQUAL
10011: PUSH
10012: LD_VAR 0 8
10016: PUSH
10017: LD_INT 0
10019: EQUAL
10020: OR
10021: IFFALSE 9621
// attempts = attempts + 1 ;
10023: LD_ADDR_VAR 0 17
10027: PUSH
10028: LD_VAR 0 17
10032: PUSH
10033: LD_INT 1
10035: PLUS
10036: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10037: LD_VAR 0 14
10041: PUSH
10042: LD_INT 1
10044: EQUAL
10045: PUSH
10046: LD_VAR 0 17
10050: PUSH
10051: LD_INT 1
10053: GREATER
10054: OR
10055: IFFALSE 8580
// if c = 1 then
10057: LD_VAR 0 14
10061: PUSH
10062: LD_INT 1
10064: EQUAL
10065: IFFALSE 10129
// if add then
10067: LD_VAR 0 5
10071: IFFALSE 10102
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10073: LD_VAR 0 1
10077: PPUSH
10078: LD_VAR 0 16
10082: PUSH
10083: LD_INT 1
10085: ARRAY
10086: PPUSH
10087: LD_VAR 0 16
10091: PUSH
10092: LD_INT 2
10094: ARRAY
10095: PPUSH
10096: CALL_OW 171
10100: GO 10129
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10102: LD_VAR 0 1
10106: PPUSH
10107: LD_VAR 0 16
10111: PUSH
10112: LD_INT 1
10114: ARRAY
10115: PPUSH
10116: LD_VAR 0 16
10120: PUSH
10121: LD_INT 2
10123: ARRAY
10124: PPUSH
10125: CALL_OW 111
// end ;
10129: LD_VAR 0 6
10133: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10134: LD_INT 0
10136: PPUSH
10137: PPUSH
10138: PPUSH
10139: PPUSH
10140: PPUSH
10141: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10142: LD_VAR 0 1
10146: PPUSH
10147: LD_VAR 0 2
10151: PPUSH
10152: CALL_OW 488
10156: NOT
10157: PUSH
10158: LD_VAR 0 3
10162: PPUSH
10163: LD_VAR 0 4
10167: PPUSH
10168: CALL_OW 488
10172: NOT
10173: OR
10174: IFFALSE 10187
// begin result = - 1 ;
10176: LD_ADDR_VAR 0 5
10180: PUSH
10181: LD_INT 1
10183: NEG
10184: ST_TO_ADDR
// exit ;
10185: GO 10347
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10187: LD_ADDR_VAR 0 6
10191: PUSH
10192: LD_VAR 0 1
10196: PPUSH
10197: LD_VAR 0 2
10201: PPUSH
10202: LD_VAR 0 3
10206: PPUSH
10207: LD_VAR 0 4
10211: PPUSH
10212: CALL_OW 298
10216: ST_TO_ADDR
// dist_2 = 99999 ;
10217: LD_ADDR_VAR 0 7
10221: PUSH
10222: LD_INT 99999
10224: ST_TO_ADDR
// for b = 0 to 5 do
10225: LD_ADDR_VAR 0 8
10229: PUSH
10230: DOUBLE
10231: LD_INT 0
10233: DEC
10234: ST_TO_ADDR
10235: LD_INT 5
10237: PUSH
10238: FOR_TO
10239: IFFALSE 10335
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10241: LD_ADDR_VAR 0 9
10245: PUSH
10246: LD_VAR 0 1
10250: PPUSH
10251: LD_VAR 0 8
10255: PPUSH
10256: LD_VAR 0 6
10260: PPUSH
10261: CALL_OW 272
10265: PPUSH
10266: LD_VAR 0 2
10270: PPUSH
10271: LD_VAR 0 8
10275: PPUSH
10276: LD_VAR 0 6
10280: PPUSH
10281: CALL_OW 273
10285: PPUSH
10286: LD_VAR 0 3
10290: PPUSH
10291: LD_VAR 0 4
10295: PPUSH
10296: CALL_OW 298
10300: ST_TO_ADDR
// if temp_dist < dist_2 then
10301: LD_VAR 0 9
10305: PUSH
10306: LD_VAR 0 7
10310: LESS
10311: IFFALSE 10333
// begin dist_2 = temp_dist ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 9
10322: ST_TO_ADDR
// dir = b ;
10323: LD_ADDR_VAR 0 10
10327: PUSH
10328: LD_VAR 0 8
10332: ST_TO_ADDR
// end ; end ;
10333: GO 10238
10335: POP
10336: POP
// result = dir ;
10337: LD_ADDR_VAR 0 5
10341: PUSH
10342: LD_VAR 0 10
10346: ST_TO_ADDR
// end ;
10347: LD_VAR 0 5
10351: RET
// export function MoveToHill ; begin
10352: LD_INT 0
10354: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10355: LD_EXP 47
10359: PPUSH
10360: LD_INT 65
10362: PPUSH
10363: LD_INT 59
10365: PPUSH
10366: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10370: LD_EXP 47
10374: PPUSH
10375: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10379: LD_EXP 48
10383: PPUSH
10384: LD_INT 65
10386: PPUSH
10387: LD_INT 58
10389: PPUSH
10390: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10394: LD_EXP 48
10398: PPUSH
10399: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10403: LD_EXP 49
10407: PPUSH
10408: LD_INT 64
10410: PPUSH
10411: LD_INT 57
10413: PPUSH
10414: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10418: LD_EXP 49
10422: PPUSH
10423: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10427: LD_EXP 50
10431: PPUSH
10432: LD_INT 64
10434: PPUSH
10435: LD_INT 56
10437: PPUSH
10438: CALL_OW 111
// AddComCrawl ( Balei ) ;
10442: LD_EXP 50
10446: PPUSH
10447: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10451: LD_EXP 51
10455: PPUSH
10456: LD_INT 63
10458: PPUSH
10459: LD_INT 55
10461: PPUSH
10462: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10466: LD_EXP 51
10470: PPUSH
10471: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10475: LD_EXP 52
10479: PPUSH
10480: LD_INT 66
10482: PPUSH
10483: LD_INT 58
10485: PPUSH
10486: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10490: LD_EXP 52
10494: PPUSH
10495: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10499: LD_EXP 54
10503: PPUSH
10504: CALL_OW 255
10508: PUSH
10509: LD_INT 6
10511: EQUAL
10512: PUSH
10513: LD_EXP 12
10517: AND
10518: IFFALSE 10544
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10520: LD_EXP 54
10524: PPUSH
10525: LD_INT 63
10527: PPUSH
10528: LD_INT 54
10530: PPUSH
10531: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10535: LD_EXP 54
10539: PPUSH
10540: CALL_OW 197
// end ; repeat if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10544: LD_EXP 47
10548: PPUSH
10549: LD_INT 65
10551: PPUSH
10552: LD_INT 59
10554: PPUSH
10555: CALL_OW 297
10559: PUSH
10560: LD_INT 7
10562: LESS
10563: IFFALSE 10589
// begin ComCrawl ( Pokryshkin ) ;
10565: LD_EXP 47
10569: PPUSH
10570: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10574: LD_EXP 47
10578: PPUSH
10579: LD_INT 65
10581: PPUSH
10582: LD_INT 59
10584: PPUSH
10585: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10589: LD_EXP 48
10593: PPUSH
10594: LD_INT 65
10596: PPUSH
10597: LD_INT 58
10599: PPUSH
10600: CALL_OW 297
10604: PUSH
10605: LD_INT 7
10607: LESS
10608: IFFALSE 10634
// begin ComCrawl ( Saseda ) ;
10610: LD_EXP 48
10614: PPUSH
10615: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
10619: LD_EXP 48
10623: PPUSH
10624: LD_INT 65
10626: PPUSH
10627: LD_INT 58
10629: PPUSH
10630: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
10634: LD_EXP 49
10638: PPUSH
10639: LD_INT 64
10641: PPUSH
10642: LD_INT 57
10644: PPUSH
10645: CALL_OW 297
10649: PUSH
10650: LD_INT 7
10652: LESS
10653: IFFALSE 10679
// begin ComCrawl ( Jaworska ) ;
10655: LD_EXP 49
10659: PPUSH
10660: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
10664: LD_EXP 49
10668: PPUSH
10669: LD_INT 64
10671: PPUSH
10672: LD_INT 57
10674: PPUSH
10675: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
10679: LD_EXP 50
10683: PPUSH
10684: LD_INT 64
10686: PPUSH
10687: LD_INT 56
10689: PPUSH
10690: CALL_OW 297
10694: PUSH
10695: LD_INT 7
10697: LESS
10698: IFFALSE 10724
// begin ComCrawl ( Balei ) ;
10700: LD_EXP 50
10704: PPUSH
10705: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
10709: LD_EXP 50
10713: PPUSH
10714: LD_INT 64
10716: PPUSH
10717: LD_INT 56
10719: PPUSH
10720: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
10724: LD_EXP 51
10728: PPUSH
10729: LD_INT 63
10731: PPUSH
10732: LD_INT 55
10734: PPUSH
10735: CALL_OW 297
10739: PUSH
10740: LD_INT 7
10742: LESS
10743: IFFALSE 10769
// begin ComCrawl ( Belkov ) ;
10745: LD_EXP 51
10749: PPUSH
10750: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
10754: LD_EXP 51
10758: PPUSH
10759: LD_INT 63
10761: PPUSH
10762: LD_INT 55
10764: PPUSH
10765: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
10769: LD_EXP 52
10773: PPUSH
10774: LD_INT 66
10776: PPUSH
10777: LD_INT 58
10779: PPUSH
10780: CALL_OW 297
10784: PUSH
10785: LD_INT 7
10787: LESS
10788: IFFALSE 10814
// begin ComCrawl ( Jaunzeme ) ;
10790: LD_EXP 52
10794: PPUSH
10795: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
10799: LD_EXP 52
10803: PPUSH
10804: LD_INT 66
10806: PPUSH
10807: LD_INT 58
10809: PPUSH
10810: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
10814: LD_EXP 54
10818: PPUSH
10819: LD_INT 63
10821: PPUSH
10822: LD_INT 54
10824: PPUSH
10825: CALL_OW 297
10829: PUSH
10830: LD_INT 7
10832: LESS
10833: PUSH
10834: LD_EXP 54
10838: PPUSH
10839: CALL_OW 255
10843: PUSH
10844: LD_INT 6
10846: EQUAL
10847: AND
10848: PUSH
10849: LD_EXP 12
10853: AND
10854: IFFALSE 10880
// begin ComCrawl ( Gnyevko ) ;
10856: LD_EXP 54
10860: PPUSH
10861: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
10865: LD_EXP 54
10869: PPUSH
10870: LD_INT 63
10872: PPUSH
10873: LD_INT 54
10875: PPUSH
10876: CALL_OW 171
// end ; wait ( 0 0$1 ) ;
10880: LD_INT 35
10882: PPUSH
10883: CALL_OW 67
// until IsDying ( Charles ) or IsDead ( Charles ) ;
10887: LD_EXP 42
10891: PPUSH
10892: CALL_OW 303
10896: PUSH
10897: LD_EXP 42
10901: PPUSH
10902: CALL_OW 301
10906: OR
10907: IFFALSE 10544
// end ;
10909: LD_VAR 0 1
10913: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
10914: LD_EXP 42
10918: PPUSH
10919: CALL_OW 303
10923: NOT
10924: PUSH
10925: LD_EXP 42
10929: PPUSH
10930: CALL_OW 301
10934: NOT
10935: OR
10936: PUSH
10937: LD_EXP 15
10941: AND
10942: IFFALSE 11284
10944: GO 10946
10946: DISABLE
// begin enable ;
10947: ENABLE
// if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
10948: LD_EXP 47
10952: PPUSH
10953: LD_INT 65
10955: PPUSH
10956: LD_INT 59
10958: PPUSH
10959: CALL_OW 297
10963: PUSH
10964: LD_INT 7
10966: LESS
10967: IFFALSE 10993
// begin ComCrawl ( Pokryshkin ) ;
10969: LD_EXP 47
10973: PPUSH
10974: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
10978: LD_EXP 47
10982: PPUSH
10983: LD_INT 65
10985: PPUSH
10986: LD_INT 59
10988: PPUSH
10989: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
10993: LD_EXP 48
10997: PPUSH
10998: LD_INT 65
11000: PPUSH
11001: LD_INT 58
11003: PPUSH
11004: CALL_OW 297
11008: PUSH
11009: LD_INT 7
11011: LESS
11012: IFFALSE 11038
// begin ComCrawl ( Saseda ) ;
11014: LD_EXP 48
11018: PPUSH
11019: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11023: LD_EXP 48
11027: PPUSH
11028: LD_INT 65
11030: PPUSH
11031: LD_INT 58
11033: PPUSH
11034: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11038: LD_EXP 49
11042: PPUSH
11043: LD_INT 64
11045: PPUSH
11046: LD_INT 57
11048: PPUSH
11049: CALL_OW 297
11053: PUSH
11054: LD_INT 7
11056: LESS
11057: IFFALSE 11083
// begin ComCrawl ( Jaworska ) ;
11059: LD_EXP 49
11063: PPUSH
11064: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11068: LD_EXP 49
11072: PPUSH
11073: LD_INT 64
11075: PPUSH
11076: LD_INT 57
11078: PPUSH
11079: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11083: LD_EXP 50
11087: PPUSH
11088: LD_INT 64
11090: PPUSH
11091: LD_INT 56
11093: PPUSH
11094: CALL_OW 297
11098: PUSH
11099: LD_INT 7
11101: LESS
11102: IFFALSE 11128
// begin ComCrawl ( Balei ) ;
11104: LD_EXP 50
11108: PPUSH
11109: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11113: LD_EXP 50
11117: PPUSH
11118: LD_INT 64
11120: PPUSH
11121: LD_INT 56
11123: PPUSH
11124: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11128: LD_EXP 51
11132: PPUSH
11133: LD_INT 63
11135: PPUSH
11136: LD_INT 55
11138: PPUSH
11139: CALL_OW 297
11143: PUSH
11144: LD_INT 7
11146: LESS
11147: IFFALSE 11173
// begin ComCrawl ( Belkov ) ;
11149: LD_EXP 51
11153: PPUSH
11154: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11158: LD_EXP 51
11162: PPUSH
11163: LD_INT 63
11165: PPUSH
11166: LD_INT 55
11168: PPUSH
11169: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11173: LD_EXP 52
11177: PPUSH
11178: LD_INT 66
11180: PPUSH
11181: LD_INT 58
11183: PPUSH
11184: CALL_OW 297
11188: PUSH
11189: LD_INT 7
11191: LESS
11192: IFFALSE 11218
// begin ComCrawl ( Jaunzeme ) ;
11194: LD_EXP 52
11198: PPUSH
11199: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11203: LD_EXP 52
11207: PPUSH
11208: LD_INT 66
11210: PPUSH
11211: LD_INT 58
11213: PPUSH
11214: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11218: LD_EXP 54
11222: PPUSH
11223: LD_INT 63
11225: PPUSH
11226: LD_INT 54
11228: PPUSH
11229: CALL_OW 297
11233: PUSH
11234: LD_INT 7
11236: LESS
11237: PUSH
11238: LD_EXP 54
11242: PPUSH
11243: CALL_OW 255
11247: PUSH
11248: LD_INT 6
11250: EQUAL
11251: AND
11252: PUSH
11253: LD_EXP 12
11257: AND
11258: IFFALSE 11284
// begin ComCrawl ( Gnyevko ) ;
11260: LD_EXP 54
11264: PPUSH
11265: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11269: LD_EXP 54
11273: PPUSH
11274: LD_INT 63
11276: PPUSH
11277: LD_INT 54
11279: PPUSH
11280: CALL_OW 171
// end ; end ; end_of_file
11284: END
// export function BurlakDying ; begin
11285: LD_INT 0
11287: PPUSH
// YouLost ( Burlak ) ;
11288: LD_STRING Burlak
11290: PPUSH
11291: CALL_OW 104
// end ;
11295: LD_VAR 0 1
11299: RET
// every 0 0$1 trigger kirovSolds = 0 do
11300: LD_EXP 56
11304: PUSH
11305: LD_INT 0
11307: EQUAL
11308: IFFALSE 11320
11310: GO 11312
11312: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11313: LD_STRING KirovSoldsDie
11315: PPUSH
11316: CALL_OW 104
11320: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11321: LD_EXP 22
11325: PUSH
11326: LD_INT 1
11328: PPUSH
11329: LD_INT 22
11331: PUSH
11332: LD_INT 3
11334: PUSH
11335: EMPTY
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 21
11341: PUSH
11342: LD_INT 1
11344: PUSH
11345: EMPTY
11346: LIST
11347: LIST
11348: PUSH
11349: EMPTY
11350: LIST
11351: LIST
11352: PPUSH
11353: CALL_OW 71
11357: PUSH
11358: LD_INT 0
11360: EQUAL
11361: AND
11362: IFFALSE 11641
11364: GO 11366
11366: DISABLE
11367: LD_INT 0
11369: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
11370: LD_EXP 53
11374: PPUSH
11375: CALL_OW 302
11379: PUSH
11380: LD_EXP 53
11384: PPUSH
11385: CALL_OW 255
11389: PUSH
11390: LD_INT 8
11392: EQUAL
11393: AND
11394: PUSH
11395: LD_EXP 54
11399: PPUSH
11400: CALL_OW 302
11404: PUSH
11405: LD_EXP 54
11409: PPUSH
11410: CALL_OW 255
11414: PUSH
11415: LD_INT 8
11417: EQUAL
11418: AND
11419: OR
11420: IFFALSE 11552
// begin case Query ( QExit2 ) of 1 :
11422: LD_STRING QExit2
11424: PPUSH
11425: CALL_OW 97
11429: PUSH
11430: LD_INT 1
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 11530
11438: POP
// begin if IsOk ( Belkov ) then
11439: LD_EXP 51
11443: PPUSH
11444: CALL_OW 302
11448: IFFALSE 11464
// Say ( Belkov , D12-Bel-1 ) else
11450: LD_EXP 51
11454: PPUSH
11455: LD_STRING D12-Bel-1
11457: PPUSH
11458: CALL_OW 88
11462: GO 11524
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11464: LD_INT 22
11466: PUSH
11467: LD_INT 3
11469: PUSH
11470: EMPTY
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 21
11476: PUSH
11477: LD_INT 1
11479: PUSH
11480: EMPTY
11481: LIST
11482: LIST
11483: PUSH
11484: LD_INT 50
11486: PUSH
11487: EMPTY
11488: LIST
11489: PUSH
11490: LD_INT 26
11492: PUSH
11493: LD_INT 1
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PUSH
11500: EMPTY
11501: LIST
11502: LIST
11503: LIST
11504: LIST
11505: PPUSH
11506: CALL_OW 69
11510: PPUSH
11511: LD_STRING D12-RSol1-1
11513: PPUSH
11514: LD_STRING 
11516: PPUSH
11517: LD_INT 0
11519: PPUSH
11520: CALL 8139 0 4
// FinishMission ;
11524: CALL 11644 0 0
// end ; 2 :
11528: GO 11550
11530: LD_INT 2
11532: DOUBLE
11533: EQUAL
11534: IFTRUE 11538
11536: GO 11549
11538: POP
// begin wait ( 0 0$5 ) ;
11539: LD_INT 175
11541: PPUSH
11542: CALL_OW 67
// enable ;
11546: ENABLE
// end ; end ;
11547: GO 11550
11549: POP
// end else
11550: GO 11641
// begin if IsOk ( Belkov ) then
11552: LD_EXP 51
11556: PPUSH
11557: CALL_OW 302
11561: IFFALSE 11577
// Say ( Belkov , D12-Bel-1 ) else
11563: LD_EXP 51
11567: PPUSH
11568: LD_STRING D12-Bel-1
11570: PPUSH
11571: CALL_OW 88
11575: GO 11637
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11577: LD_INT 22
11579: PUSH
11580: LD_INT 3
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 21
11589: PUSH
11590: LD_INT 1
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 50
11599: PUSH
11600: EMPTY
11601: LIST
11602: PUSH
11603: LD_INT 26
11605: PUSH
11606: LD_INT 1
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PPUSH
11619: CALL_OW 69
11623: PPUSH
11624: LD_STRING D12-RSol1-1
11626: PPUSH
11627: LD_STRING 
11629: PPUSH
11630: LD_INT 0
11632: PPUSH
11633: CALL 8139 0 4
// FinishMission ;
11637: CALL 11644 0 0
// end ; end ;
11641: PPOPN 1
11643: END
// function FinishMission ; begin
11644: LD_INT 0
11646: PPUSH
// SetRewards ;
11647: CALL 11668 0 0
// SavePlayerCharacters ;
11651: CALL 12019 0 0
// SaveGlobalVariables ;
11655: CALL 12149 0 0
// YouWin ;
11659: CALL_OW 103
// end ;
11663: LD_VAR 0 1
11667: RET
// function SetRewards ; begin
11668: LD_INT 0
11670: PPUSH
// if not gladstoneEscape and not JohannaEscape then
11671: LD_EXP 19
11675: NOT
11676: PUSH
11677: LD_EXP 20
11681: NOT
11682: AND
11683: IFFALSE 11695
// AddMedal ( NoEscape , 1 ) ;
11685: LD_STRING NoEscape
11687: PPUSH
11688: LD_INT 1
11690: PPUSH
11691: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
11695: LD_EXP 19
11699: PUSH
11700: LD_EXP 20
11704: NOT
11705: AND
11706: IFFALSE 11719
// AddMedal ( NoEscape , - 1 ) ;
11708: LD_STRING NoEscape
11710: PPUSH
11711: LD_INT 1
11713: NEG
11714: PPUSH
11715: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
11719: LD_EXP 19
11723: NOT
11724: PUSH
11725: LD_EXP 20
11729: AND
11730: IFFALSE 11743
// AddMedal ( NoEscape , - 2 ) ;
11732: LD_STRING NoEscape
11734: PPUSH
11735: LD_INT 2
11737: NEG
11738: PPUSH
11739: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
11743: LD_EXP 19
11747: PUSH
11748: LD_EXP 20
11752: AND
11753: IFFALSE 11766
// AddMedal ( NoEscape , - 3 ) ;
11755: LD_STRING NoEscape
11757: PPUSH
11758: LD_INT 3
11760: NEG
11761: PPUSH
11762: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
11766: LD_EXP 12
11770: PUSH
11771: LD_EXP 54
11775: PPUSH
11776: CALL_OW 302
11780: AND
11781: PUSH
11782: LD_EXP 21
11786: AND
11787: PUSH
11788: LD_EXP 53
11792: PPUSH
11793: CALL_OW 302
11797: AND
11798: IFFALSE 11810
// AddMedal ( Gnyevko , 1 ) ;
11800: LD_STRING Gnyevko
11802: PPUSH
11803: LD_INT 1
11805: PPUSH
11806: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
11810: LD_EXP 12
11814: NOT
11815: PUSH
11816: LD_EXP 21
11820: AND
11821: PUSH
11822: LD_EXP 53
11826: PPUSH
11827: CALL_OW 302
11831: AND
11832: IFFALSE 11845
// AddMedal ( Gnyevko , - 1 ) ;
11834: LD_STRING Gnyevko
11836: PPUSH
11837: LD_INT 1
11839: NEG
11840: PPUSH
11841: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
11845: LD_EXP 12
11849: PUSH
11850: LD_EXP 21
11854: NOT
11855: PUSH
11856: LD_EXP 54
11860: PPUSH
11861: CALL_OW 302
11865: NOT
11866: OR
11867: PUSH
11868: LD_EXP 53
11872: PPUSH
11873: CALL_OW 302
11877: NOT
11878: OR
11879: AND
11880: IFFALSE 11893
// AddMedal ( Gnyevko , - 2 ) ;
11882: LD_STRING Gnyevko
11884: PPUSH
11885: LD_INT 2
11887: NEG
11888: PPUSH
11889: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
11893: LD_EXP 12
11897: NOT
11898: PUSH
11899: LD_EXP 21
11903: NOT
11904: AND
11905: PUSH
11906: LD_EXP 54
11910: PPUSH
11911: CALL_OW 302
11915: NOT
11916: PUSH
11917: LD_EXP 53
11921: PPUSH
11922: CALL_OW 302
11926: NOT
11927: AND
11928: OR
11929: IFFALSE 11942
// AddMedal ( Gnyevko , - 3 ) ;
11931: LD_STRING Gnyevko
11933: PPUSH
11934: LD_INT 3
11936: NEG
11937: PPUSH
11938: CALL_OW 101
// if lostComradesCounter = 0 then
11942: LD_EXP 23
11946: PUSH
11947: LD_INT 0
11949: EQUAL
11950: IFFALSE 11964
// AddMedal ( NoLosses , 1 ) else
11952: LD_STRING NoLosses
11954: PPUSH
11955: LD_INT 1
11957: PPUSH
11958: CALL_OW 101
11962: GO 11974
// AddMedal ( NoLosses , 0 ) ;
11964: LD_STRING NoLosses
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 101
// GiveMedals ( Main ) ;
11974: LD_STRING Main
11976: PPUSH
11977: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
11981: LD_INT 22
11983: PUSH
11984: LD_INT 3
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 1
11996: PUSH
11997: EMPTY
11998: LIST
11999: LIST
12000: PUSH
12001: EMPTY
12002: LIST
12003: LIST
12004: PPUSH
12005: CALL_OW 69
12009: PPUSH
12010: CALL_OW 43
// end ;
12014: LD_VAR 0 1
12018: RET
// function SavePlayerCharacters ; var others ; begin
12019: LD_INT 0
12021: PPUSH
12022: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12023: LD_EXP 46
12027: PPUSH
12028: LD_STRING Burlak
12030: PPUSH
12031: CALL 8318 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12035: LD_EXP 54
12039: PPUSH
12040: LD_STRING Gnyevko
12042: PPUSH
12043: CALL 8318 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12047: LD_EXP 51
12051: PPUSH
12052: LD_STRING Belkov
12054: PPUSH
12055: CALL 8318 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12059: LD_EXP 53
12063: PPUSH
12064: LD_STRING Kirilenkova
12066: PPUSH
12067: CALL 8318 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12071: LD_ADDR_VAR 0 2
12075: PUSH
12076: LD_INT 22
12078: PUSH
12079: LD_INT 3
12081: PUSH
12082: EMPTY
12083: LIST
12084: LIST
12085: PUSH
12086: LD_INT 21
12088: PUSH
12089: LD_INT 1
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PPUSH
12100: CALL_OW 69
12104: PUSH
12105: LD_EXP 46
12109: PUSH
12110: LD_EXP 54
12114: PUSH
12115: LD_EXP 51
12119: PUSH
12120: LD_EXP 53
12124: PUSH
12125: EMPTY
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: DIFF
12131: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
12132: LD_VAR 0 2
12136: PPUSH
12137: LD_STRING other_survivors
12139: PPUSH
12140: CALL 8374 0 2
// end ;
12144: LD_VAR 0 1
12148: RET
// function SaveGlobalVariables ; begin
12149: LD_INT 0
12151: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12152: LD_EXP 1
12156: PPUSH
12157: LD_STRING 01_GladstoneStatus
12159: PPUSH
12160: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12164: LD_EXP 2
12168: PPUSH
12169: LD_STRING 01_JohannaStatus
12171: PPUSH
12172: CALL_OW 39
// end ; end_of_file
12176: LD_VAR 0 1
12180: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12181: LD_INT 0
12183: PPUSH
12184: PPUSH
12185: PPUSH
// uc_side = 1 ;
12186: LD_ADDR_OWVAR 20
12190: PUSH
12191: LD_INT 1
12193: ST_TO_ADDR
// hc_class := 1 ;
12194: LD_ADDR_OWVAR 28
12198: PUSH
12199: LD_INT 1
12201: ST_TO_ADDR
// hc_sex := sex_male ;
12202: LD_ADDR_OWVAR 27
12206: PUSH
12207: LD_INT 1
12209: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12210: LD_ADDR_OWVAR 33
12214: PUSH
12215: LD_STRING AmGalRemake
12217: ST_TO_ADDR
// hc_face_number := 1 ;
12218: LD_ADDR_OWVAR 34
12222: PUSH
12223: LD_INT 1
12225: ST_TO_ADDR
// hc_name := Charles Brown ;
12226: LD_ADDR_OWVAR 26
12230: PUSH
12231: LD_STRING Charles Brown
12233: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12234: LD_ADDR_OWVAR 29
12238: PUSH
12239: LD_INT 12
12241: PUSH
12242: LD_INT 11
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12249: LD_ADDR_OWVAR 31
12253: PUSH
12254: LD_INT 1
12256: PUSH
12257: LD_INT 0
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: LD_INT 1
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: ST_TO_ADDR
// Charles = CreateHuman ;
12272: LD_ADDR_EXP 42
12276: PUSH
12277: CALL_OW 44
12281: ST_TO_ADDR
// hc_class := 1 ;
12282: LD_ADDR_OWVAR 28
12286: PUSH
12287: LD_INT 1
12289: ST_TO_ADDR
// hc_sex := sex_female ;
12290: LD_ADDR_OWVAR 27
12294: PUSH
12295: LD_INT 2
12297: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12298: LD_ADDR_OWVAR 33
12302: PUSH
12303: LD_STRING AmGalRemake
12305: ST_TO_ADDR
// hc_face_number := 2 ;
12306: LD_ADDR_OWVAR 34
12310: PUSH
12311: LD_INT 2
12313: ST_TO_ADDR
// hc_name := Johanna Holland ;
12314: LD_ADDR_OWVAR 26
12318: PUSH
12319: LD_STRING Johanna Holland
12321: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12322: LD_ADDR_OWVAR 29
12326: PUSH
12327: LD_INT 12
12329: PUSH
12330: LD_INT 11
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12337: LD_ADDR_OWVAR 31
12341: PUSH
12342: LD_EXP 36
12346: PUSH
12347: LD_INT 0
12349: PPUSH
12350: LD_INT 2
12352: PPUSH
12353: CALL_OW 12
12357: PUSH
12358: LD_INT 0
12360: PPUSH
12361: LD_INT 2
12363: PPUSH
12364: CALL_OW 12
12368: PUSH
12369: LD_INT 0
12371: PPUSH
12372: LD_INT 2
12374: PPUSH
12375: CALL_OW 12
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: ST_TO_ADDR
// Johanna = CreateHuman ;
12386: LD_ADDR_EXP 43
12390: PUSH
12391: CALL_OW 44
12395: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
12396: LD_EXP 43
12400: PPUSH
12401: LD_INT 19
12403: PPUSH
12404: LD_INT 0
12406: PPUSH
12407: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
12411: LD_EXP 43
12415: PPUSH
12416: LD_INT 23
12418: PPUSH
12419: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
12423: LD_ADDR_EXP 44
12427: PUSH
12428: LD_STRING Gladstone
12430: PPUSH
12431: LD_INT 0
12433: PPUSH
12434: CALL 8076 0 2
12438: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
12439: LD_EXP 44
12443: PPUSH
12444: LD_INT 22
12446: PPUSH
12447: CALL_OW 52
// amApemans = [ ] ;
12451: LD_ADDR_EXP 45
12455: PUSH
12456: EMPTY
12457: ST_TO_ADDR
// for i := 1 to amApeAmount do
12458: LD_ADDR_VAR 0 2
12462: PUSH
12463: DOUBLE
12464: LD_INT 1
12466: DEC
12467: ST_TO_ADDR
12468: LD_EXP 35
12472: PUSH
12473: FOR_TO
12474: IFFALSE 12589
// begin hc_class := class_apeman ;
12476: LD_ADDR_OWVAR 28
12480: PUSH
12481: LD_INT 12
12483: ST_TO_ADDR
// hc_gallery :=  ;
12484: LD_ADDR_OWVAR 33
12488: PUSH
12489: LD_STRING 
12491: ST_TO_ADDR
// hc_name :=  ;
12492: LD_ADDR_OWVAR 26
12496: PUSH
12497: LD_STRING 
12499: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12500: LD_ADDR_OWVAR 31
12504: PUSH
12505: LD_EXP 36
12509: PUSH
12510: LD_INT 0
12512: PPUSH
12513: LD_INT 2
12515: PPUSH
12516: CALL_OW 12
12520: PUSH
12521: LD_INT 0
12523: PPUSH
12524: LD_INT 2
12526: PPUSH
12527: CALL_OW 12
12531: PUSH
12532: LD_INT 0
12534: PPUSH
12535: LD_INT 2
12537: PPUSH
12538: CALL_OW 12
12542: PUSH
12543: EMPTY
12544: LIST
12545: LIST
12546: LIST
12547: LIST
12548: ST_TO_ADDR
// ape = CreateHuman ;
12549: LD_ADDR_VAR 0 3
12553: PUSH
12554: CALL_OW 44
12558: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
12559: LD_VAR 0 3
12563: PPUSH
12564: LD_INT 22
12566: PPUSH
12567: CALL_OW 52
// amApemans = amApemans ^ ape ;
12571: LD_ADDR_EXP 45
12575: PUSH
12576: LD_EXP 45
12580: PUSH
12581: LD_VAR 0 3
12585: ADD
12586: ST_TO_ADDR
// end ;
12587: GO 12473
12589: POP
12590: POP
// SetLives ( am_bun , americanBunkerHP ) ;
12591: LD_INT 23
12593: PPUSH
12594: LD_EXP 33
12598: PPUSH
12599: CALL_OW 234
// end ; end_of_file
12603: LD_VAR 0 1
12607: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
12608: LD_INT 0
12610: PPUSH
// PrepareHero ;
12611: CALL 12636 0 0
// PreparePokryshkinTeams ;
12615: CALL 12730 0 0
// PrepareJelena ;
12619: CALL 12995 0 0
// PrepareGnyevko ;
12623: CALL 13027 0 0
// PrepareKurin ;
12627: CALL 12698 0 0
// end ;
12631: LD_VAR 0 1
12635: RET
// function PrepareHero ; begin
12636: LD_INT 0
12638: PPUSH
// uc_side = 3 ;
12639: LD_ADDR_OWVAR 20
12643: PUSH
12644: LD_INT 3
12646: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
12647: LD_ADDR_EXP 46
12651: PUSH
12652: LD_STRING Burlak
12654: PPUSH
12655: LD_INT 0
12657: PPUSH
12658: CALL 8076 0 2
12662: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
12663: LD_EXP 46
12667: PPUSH
12668: LD_EXP 37
12672: PUSH
12673: LD_INT 1
12675: ARRAY
12676: PPUSH
12677: LD_EXP 37
12681: PUSH
12682: LD_INT 2
12684: ARRAY
12685: PPUSH
12686: LD_INT 1
12688: PPUSH
12689: CALL_OW 48
// end ;
12693: LD_VAR 0 1
12697: RET
// function PrepareKurin ; begin
12698: LD_INT 0
12700: PPUSH
// uc_side = 6 ;
12701: LD_ADDR_OWVAR 20
12705: PUSH
12706: LD_INT 6
12708: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
12709: LD_ADDR_EXP 55
12713: PUSH
12714: LD_STRING Kurin
12716: PPUSH
12717: LD_INT 0
12719: PPUSH
12720: CALL 8076 0 2
12724: ST_TO_ADDR
// end ;
12725: LD_VAR 0 1
12729: RET
// function PreparePokryshkinTeams ; begin
12730: LD_INT 0
12732: PPUSH
// uc_side = 6 ;
12733: LD_ADDR_OWVAR 20
12737: PUSH
12738: LD_INT 6
12740: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
12741: LD_ADDR_EXP 47
12745: PUSH
12746: LD_STRING Pokryshkin
12748: PPUSH
12749: LD_INT 0
12751: PPUSH
12752: CALL 8076 0 2
12756: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
12757: LD_ADDR_EXP 48
12761: PUSH
12762: LD_STRING Saseda
12764: PPUSH
12765: LD_INT 0
12767: PPUSH
12768: CALL 8076 0 2
12772: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
12773: LD_ADDR_EXP 49
12777: PUSH
12778: LD_STRING Jaworska
12780: PPUSH
12781: LD_INT 0
12783: PPUSH
12784: CALL 8076 0 2
12788: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
12789: LD_ADDR_EXP 50
12793: PUSH
12794: LD_STRING Balei
12796: PPUSH
12797: LD_INT 0
12799: PPUSH
12800: CALL 8076 0 2
12804: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
12805: LD_ADDR_EXP 51
12809: PUSH
12810: LD_STRING Belkov
12812: PPUSH
12813: LD_INT 0
12815: PPUSH
12816: CALL 8076 0 2
12820: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
12821: LD_EXP 47
12825: PPUSH
12826: LD_INT 25
12828: PPUSH
12829: LD_INT 0
12831: PPUSH
12832: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
12836: LD_EXP 48
12840: PPUSH
12841: LD_INT 17
12843: PPUSH
12844: LD_INT 0
12846: PPUSH
12847: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
12851: LD_EXP 49
12855: PPUSH
12856: LD_INT 17
12858: PPUSH
12859: LD_INT 0
12861: PPUSH
12862: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
12866: LD_EXP 50
12870: PPUSH
12871: LD_INT 17
12873: PPUSH
12874: LD_INT 0
12876: PPUSH
12877: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
12881: LD_EXP 51
12885: PPUSH
12886: LD_INT 17
12888: PPUSH
12889: LD_INT 0
12891: PPUSH
12892: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
12896: LD_ADDR_EXP 56
12900: PUSH
12901: LD_EXP 47
12905: PUSH
12906: LD_EXP 48
12910: PUSH
12911: LD_EXP 50
12915: PUSH
12916: LD_EXP 51
12920: PUSH
12921: LD_EXP 49
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: LIST
12932: ST_TO_ADDR
// if Difficulty < 3 then
12933: LD_OWVAR 67
12937: PUSH
12938: LD_INT 3
12940: LESS
12941: IFFALSE 12990
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
12943: LD_ADDR_EXP 52
12947: PUSH
12948: LD_STRING Jaunzeme
12950: PPUSH
12951: LD_INT 0
12953: PPUSH
12954: CALL 8076 0 2
12958: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
12959: LD_EXP 52
12963: PPUSH
12964: LD_INT 26
12966: PPUSH
12967: LD_INT 0
12969: PPUSH
12970: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
12974: LD_ADDR_EXP 56
12978: PUSH
12979: LD_EXP 56
12983: PUSH
12984: LD_EXP 52
12988: ADD
12989: ST_TO_ADDR
// end ; end ;
12990: LD_VAR 0 1
12994: RET
// function PrepareJelena ; begin
12995: LD_INT 0
12997: PPUSH
// uc_side = 8 ;
12998: LD_ADDR_OWVAR 20
13002: PUSH
13003: LD_INT 8
13005: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13006: LD_ADDR_EXP 53
13010: PUSH
13011: LD_STRING Kirilenkova
13013: PPUSH
13014: LD_INT 0
13016: PPUSH
13017: CALL 8076 0 2
13021: ST_TO_ADDR
// end ;
13022: LD_VAR 0 1
13026: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13027: LD_INT 0
13029: PPUSH
13030: PPUSH
13031: PPUSH
13032: PPUSH
// uc_side = 8 ;
13033: LD_ADDR_OWVAR 20
13037: PUSH
13038: LD_INT 8
13040: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13041: LD_ADDR_EXP 54
13045: PUSH
13046: LD_STRING Gnyevko
13048: PPUSH
13049: LD_INT 0
13051: PPUSH
13052: CALL 8076 0 2
13056: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13057: LD_ADDR_VAR 0 4
13061: PUSH
13062: LD_EXP 38
13066: PUSH
13067: LD_INT 1
13069: PPUSH
13070: LD_EXP 38
13074: PPUSH
13075: CALL_OW 12
13079: ARRAY
13080: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13081: LD_EXP 54
13085: PPUSH
13086: LD_VAR 0 4
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PPUSH
13095: LD_VAR 0 4
13099: PUSH
13100: LD_INT 2
13102: ARRAY
13103: PPUSH
13104: LD_INT 0
13106: PPUSH
13107: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13111: LD_EXP 54
13115: PPUSH
13116: LD_EXP 39
13120: PPUSH
13121: CALL_OW 234
// ComHold ( Gnyevko ) ;
13125: LD_EXP 54
13129: PPUSH
13130: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
13134: LD_ADDR_VAR 0 3
13138: PUSH
13139: DOUBLE
13140: LD_INT 1
13142: DEC
13143: ST_TO_ADDR
13144: LD_EXP 27
13148: PUSH
13149: LD_INT 1
13151: ARRAY
13152: PUSH
13153: LD_INT 3
13155: PUSH
13156: LD_INT 2
13158: PUSH
13159: LD_INT 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: PUSH
13167: LD_OWVAR 67
13171: ARRAY
13172: MINUS
13173: PUSH
13174: FOR_TO
13175: IFFALSE 13305
// begin uc_side = 0 ;
13177: LD_ADDR_OWVAR 20
13181: PUSH
13182: LD_INT 0
13184: ST_TO_ADDR
// uc_nation = nation_nature ;
13185: LD_ADDR_OWVAR 21
13189: PUSH
13190: LD_INT 0
13192: ST_TO_ADDR
// hc_class = class_apeman ;
13193: LD_ADDR_OWVAR 28
13197: PUSH
13198: LD_INT 12
13200: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13201: LD_ADDR_OWVAR 31
13205: PUSH
13206: LD_EXP 28
13210: PUSH
13211: LD_INT 1
13213: ARRAY
13214: PUSH
13215: LD_EXP 28
13219: PUSH
13220: LD_INT 2
13222: ARRAY
13223: PUSH
13224: LD_EXP 28
13228: PUSH
13229: LD_INT 3
13231: ARRAY
13232: PUSH
13233: LD_EXP 28
13237: PUSH
13238: LD_INT 4
13240: ARRAY
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13248: LD_ADDR_OWVAR 35
13252: PUSH
13253: LD_EXP 34
13257: ST_TO_ADDR
// un = CreateHuman ;
13258: LD_ADDR_VAR 0 2
13262: PUSH
13263: CALL_OW 44
13267: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_EXP 54
13277: PPUSH
13278: CALL_OW 250
13282: PPUSH
13283: LD_EXP 54
13287: PPUSH
13288: CALL_OW 251
13292: PPUSH
13293: LD_INT 8
13295: PPUSH
13296: LD_INT 0
13298: PPUSH
13299: CALL_OW 50
// end ;
13303: GO 13174
13305: POP
13306: POP
// end ; end_of_file
13307: LD_VAR 0 1
13311: RET
// export function CreateNature ; var i , un ; begin
13312: LD_INT 0
13314: PPUSH
13315: PPUSH
13316: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
13317: LD_ADDR_VAR 0 2
13321: PUSH
13322: DOUBLE
13323: LD_INT 1
13325: DEC
13326: ST_TO_ADDR
13327: LD_EXP 27
13331: PUSH
13332: LD_INT 1
13334: ARRAY
13335: PUSH
13336: FOR_TO
13337: IFFALSE 13447
// begin uc_side = 0 ;
13339: LD_ADDR_OWVAR 20
13343: PUSH
13344: LD_INT 0
13346: ST_TO_ADDR
// uc_nation = nation_nature ;
13347: LD_ADDR_OWVAR 21
13351: PUSH
13352: LD_INT 0
13354: ST_TO_ADDR
// hc_class = class_apeman ;
13355: LD_ADDR_OWVAR 28
13359: PUSH
13360: LD_INT 12
13362: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13363: LD_ADDR_OWVAR 31
13367: PUSH
13368: LD_EXP 28
13372: PUSH
13373: LD_INT 1
13375: ARRAY
13376: PUSH
13377: LD_EXP 28
13381: PUSH
13382: LD_INT 2
13384: ARRAY
13385: PUSH
13386: LD_EXP 28
13390: PUSH
13391: LD_INT 3
13393: ARRAY
13394: PUSH
13395: LD_EXP 28
13399: PUSH
13400: LD_INT 4
13402: ARRAY
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13410: LD_ADDR_OWVAR 35
13414: PUSH
13415: LD_EXP 34
13419: ST_TO_ADDR
// un = CreateHuman ;
13420: LD_ADDR_VAR 0 3
13424: PUSH
13425: CALL_OW 44
13429: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
13430: LD_VAR 0 3
13434: PPUSH
13435: LD_INT 16
13437: PPUSH
13438: LD_INT 0
13440: PPUSH
13441: CALL_OW 49
// end ;
13445: GO 13336
13447: POP
13448: POP
// for i := 1 to animalsAmount [ 2 ] do
13449: LD_ADDR_VAR 0 2
13453: PUSH
13454: DOUBLE
13455: LD_INT 1
13457: DEC
13458: ST_TO_ADDR
13459: LD_EXP 27
13463: PUSH
13464: LD_INT 2
13466: ARRAY
13467: PUSH
13468: FOR_TO
13469: IFFALSE 13579
// begin uc_side = 0 ;
13471: LD_ADDR_OWVAR 20
13475: PUSH
13476: LD_INT 0
13478: ST_TO_ADDR
// uc_nation = nation_nature ;
13479: LD_ADDR_OWVAR 21
13483: PUSH
13484: LD_INT 0
13486: ST_TO_ADDR
// hc_class = class_phororhacos ;
13487: LD_ADDR_OWVAR 28
13491: PUSH
13492: LD_INT 18
13494: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13495: LD_ADDR_OWVAR 31
13499: PUSH
13500: LD_EXP 28
13504: PUSH
13505: LD_INT 1
13507: ARRAY
13508: PUSH
13509: LD_EXP 28
13513: PUSH
13514: LD_INT 2
13516: ARRAY
13517: PUSH
13518: LD_EXP 28
13522: PUSH
13523: LD_INT 3
13525: ARRAY
13526: PUSH
13527: LD_EXP 28
13531: PUSH
13532: LD_INT 4
13534: ARRAY
13535: PUSH
13536: EMPTY
13537: LIST
13538: LIST
13539: LIST
13540: LIST
13541: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13542: LD_ADDR_OWVAR 35
13546: PUSH
13547: LD_EXP 29
13551: ST_TO_ADDR
// un = CreateHuman ;
13552: LD_ADDR_VAR 0 3
13556: PUSH
13557: CALL_OW 44
13561: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13562: LD_VAR 0 3
13566: PPUSH
13567: LD_INT 15
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL_OW 49
// end ;
13577: GO 13468
13579: POP
13580: POP
// for i := 1 to animalsAmount [ 3 ] do
13581: LD_ADDR_VAR 0 2
13585: PUSH
13586: DOUBLE
13587: LD_INT 1
13589: DEC
13590: ST_TO_ADDR
13591: LD_EXP 27
13595: PUSH
13596: LD_INT 3
13598: ARRAY
13599: PUSH
13600: FOR_TO
13601: IFFALSE 13711
// begin uc_side = 0 ;
13603: LD_ADDR_OWVAR 20
13607: PUSH
13608: LD_INT 0
13610: ST_TO_ADDR
// uc_nation = nation_nature ;
13611: LD_ADDR_OWVAR 21
13615: PUSH
13616: LD_INT 0
13618: ST_TO_ADDR
// hc_class = class_tiger ;
13619: LD_ADDR_OWVAR 28
13623: PUSH
13624: LD_INT 14
13626: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13627: LD_ADDR_OWVAR 31
13631: PUSH
13632: LD_EXP 28
13636: PUSH
13637: LD_INT 1
13639: ARRAY
13640: PUSH
13641: LD_EXP 28
13645: PUSH
13646: LD_INT 2
13648: ARRAY
13649: PUSH
13650: LD_EXP 28
13654: PUSH
13655: LD_INT 3
13657: ARRAY
13658: PUSH
13659: LD_EXP 28
13663: PUSH
13664: LD_INT 4
13666: ARRAY
13667: PUSH
13668: EMPTY
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13674: LD_ADDR_OWVAR 35
13678: PUSH
13679: LD_EXP 29
13683: ST_TO_ADDR
// un = CreateHuman ;
13684: LD_ADDR_VAR 0 3
13688: PUSH
13689: CALL_OW 44
13693: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13694: LD_VAR 0 3
13698: PPUSH
13699: LD_INT 15
13701: PPUSH
13702: LD_INT 0
13704: PPUSH
13705: CALL_OW 49
// end ;
13709: GO 13600
13711: POP
13712: POP
// for i := 1 to animalsAmount [ 4 ] do
13713: LD_ADDR_VAR 0 2
13717: PUSH
13718: DOUBLE
13719: LD_INT 1
13721: DEC
13722: ST_TO_ADDR
13723: LD_EXP 27
13727: PUSH
13728: LD_INT 4
13730: ARRAY
13731: PUSH
13732: FOR_TO
13733: IFFALSE 13843
// begin uc_side = 0 ;
13735: LD_ADDR_OWVAR 20
13739: PUSH
13740: LD_INT 0
13742: ST_TO_ADDR
// uc_nation = nation_nature ;
13743: LD_ADDR_OWVAR 21
13747: PUSH
13748: LD_INT 0
13750: ST_TO_ADDR
// hc_class = 21 ;
13751: LD_ADDR_OWVAR 28
13755: PUSH
13756: LD_INT 21
13758: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13759: LD_ADDR_OWVAR 31
13763: PUSH
13764: LD_EXP 28
13768: PUSH
13769: LD_INT 1
13771: ARRAY
13772: PUSH
13773: LD_EXP 28
13777: PUSH
13778: LD_INT 2
13780: ARRAY
13781: PUSH
13782: LD_EXP 28
13786: PUSH
13787: LD_INT 3
13789: ARRAY
13790: PUSH
13791: LD_EXP 28
13795: PUSH
13796: LD_INT 4
13798: ARRAY
13799: PUSH
13800: EMPTY
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
13806: LD_ADDR_OWVAR 35
13810: PUSH
13811: LD_EXP 29
13815: ST_TO_ADDR
// un = CreateHuman ;
13816: LD_ADDR_VAR 0 3
13820: PUSH
13821: CALL_OW 44
13825: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
13826: LD_VAR 0 3
13830: PPUSH
13831: LD_INT 15
13833: PPUSH
13834: LD_INT 0
13836: PPUSH
13837: CALL_OW 49
// end ;
13841: GO 13732
13843: POP
13844: POP
// end ; end_of_file
13845: LD_VAR 0 1
13849: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
13850: LD_VAR 0 1
13854: PUSH
13855: LD_EXP 46
13859: EQUAL
13860: PUSH
13861: LD_EXP 53
13865: PPUSH
13866: CALL_OW 255
13870: PUSH
13871: LD_INT 3
13873: EQUAL
13874: NOT
13875: AND
13876: PUSH
13877: LD_EXP 53
13881: PPUSH
13882: CALL_OW 302
13886: NOT
13887: AND
13888: IFFALSE 13894
// BurlakDying ;
13890: CALL 11285 0 0
// if unit = Gladstone then
13894: LD_VAR 0 1
13898: PUSH
13899: LD_EXP 44
13903: EQUAL
13904: IFFALSE 13914
// gladstoneStatus = 0 ;
13906: LD_ADDR_EXP 1
13910: PUSH
13911: LD_INT 0
13913: ST_TO_ADDR
// if unit = Johanna then
13914: LD_VAR 0 1
13918: PUSH
13919: LD_EXP 43
13923: EQUAL
13924: IFFALSE 13934
// johannaStatus = 0 ;
13926: LD_ADDR_EXP 2
13930: PUSH
13931: LD_INT 0
13933: ST_TO_ADDR
// end ;
13934: PPOPN 1
13936: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
13937: LD_VAR 0 1
13941: PUSH
13942: LD_EXP 46
13946: EQUAL
13947: IFFALSE 13953
// BurlakDying ;
13949: CALL 11285 0 0
// if GetSide ( unit ) = 3 then
13953: LD_VAR 0 1
13957: PPUSH
13958: CALL_OW 255
13962: PUSH
13963: LD_INT 3
13965: EQUAL
13966: IFFALSE 13982
// lostComradesCounter = lostComradesCounter + 1 ;
13968: LD_ADDR_EXP 23
13972: PUSH
13973: LD_EXP 23
13977: PUSH
13978: LD_INT 1
13980: PLUS
13981: ST_TO_ADDR
// if unit in kirovSolds then
13982: LD_VAR 0 1
13986: PUSH
13987: LD_EXP 56
13991: IN
13992: IFFALSE 14010
// kirovSolds = kirovSolds diff unit ;
13994: LD_ADDR_EXP 56
13998: PUSH
13999: LD_EXP 56
14003: PUSH
14004: LD_VAR 0 1
14008: DIFF
14009: ST_TO_ADDR
// end ;
14010: PPOPN 1
14012: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14013: LD_VAR 0 1
14017: PUSH
14018: LD_INT 3
14020: EQUAL
14021: PUSH
14022: LD_VAR 0 2
14026: PUSH
14027: LD_INT 1
14029: EQUAL
14030: AND
14031: PUSH
14032: LD_VAR 0 1
14036: PUSH
14037: LD_INT 1
14039: EQUAL
14040: PUSH
14041: LD_VAR 0 2
14045: PUSH
14046: LD_INT 3
14048: EQUAL
14049: AND
14050: PUSH
14051: LD_EXP 17
14055: PUSH
14056: LD_INT 1
14058: EQUAL
14059: AND
14060: OR
14061: IFFALSE 14067
// Dial_SecondAttack ;
14063: CALL 6037 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14067: LD_VAR 0 1
14071: PUSH
14072: LD_INT 3
14074: EQUAL
14075: PUSH
14076: LD_VAR 0 2
14080: PUSH
14081: LD_INT 6
14083: EQUAL
14084: AND
14085: PUSH
14086: LD_EXP 18
14090: NOT
14091: AND
14092: IFFALSE 14098
// Dialogue_AttackComrade ;
14094: CALL 4123 0 0
// end ; end_of_file
14098: PPOPN 2
14100: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14101: LD_EXP 53
14105: PPUSH
14106: CALL_OW 255
14110: PUSH
14111: LD_INT 3
14113: EQUAL
14114: PUSH
14115: LD_EXP 26
14119: PUSH
14120: LD_INT 525
14122: LESS
14123: AND
14124: IFFALSE 14136
14126: GO 14128
14128: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14129: LD_STRING ACH_YELENA
14131: PPUSH
14132: CALL_OW 543
14136: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14137: LD_INT 23
14139: PUSH
14140: LD_INT 0
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PUSH
14147: LD_INT 2
14149: PUSH
14150: LD_INT 25
14152: PUSH
14153: LD_INT 14
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PUSH
14160: LD_INT 25
14162: PUSH
14163: LD_INT 18
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: PUSH
14170: LD_INT 25
14172: PUSH
14173: LD_INT 12
14175: PUSH
14176: EMPTY
14177: LIST
14178: LIST
14179: PUSH
14180: EMPTY
14181: LIST
14182: LIST
14183: LIST
14184: LIST
14185: PUSH
14186: EMPTY
14187: LIST
14188: LIST
14189: PPUSH
14190: CALL_OW 69
14194: NOT
14195: IFFALSE 14207
14197: GO 14199
14199: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14200: LD_STRING ACH_NATURE
14202: PPUSH
14203: CALL_OW 543
14207: END
// every 0 0$1 trigger Attacks ( Burlak ) = am_bun and belkovWaitForGorky do
14208: LD_EXP 46
14212: PPUSH
14213: CALL_OW 320
14217: PUSH
14218: LD_INT 23
14220: EQUAL
14221: PUSH
14222: LD_EXP 16
14226: AND
14227: IFFALSE 14320
14229: GO 14231
14231: DISABLE
// begin ComExitBuilding ( Johanna ) ;
14232: LD_EXP 43
14236: PPUSH
14237: CALL_OW 122
// wait ( 0 0$1 ) ;
14241: LD_INT 35
14243: PPUSH
14244: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
14248: LD_INT 35
14250: PPUSH
14251: CALL_OW 67
// ComAttackUnit ( Johanna , Burlak ) ;
14255: LD_EXP 43
14259: PPUSH
14260: LD_EXP 46
14264: PPUSH
14265: CALL_OW 115
// until IsDead ( Burlak ) or GetDistUnits ( Burlak , Johanna ) > 10 or not belkovWaitForGorky ;
14269: LD_EXP 46
14273: PPUSH
14274: CALL_OW 301
14278: PUSH
14279: LD_EXP 46
14283: PPUSH
14284: LD_EXP 43
14288: PPUSH
14289: CALL_OW 296
14293: PUSH
14294: LD_INT 10
14296: GREATER
14297: OR
14298: PUSH
14299: LD_EXP 16
14303: NOT
14304: OR
14305: IFFALSE 14248
// ComEnterUnit ( Johanna , am_bun ) ;
14307: LD_EXP 43
14311: PPUSH
14312: LD_INT 23
14314: PPUSH
14315: CALL_OW 120
// enable ;
14319: ENABLE
// end ; end_of_file
14320: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
14321: LD_INT 0
14323: PPUSH
14324: PPUSH
// if not missionNumber then
14325: LD_VAR 0 2
14329: NOT
14330: IFFALSE 14334
// exit ;
14332: GO 14464
// achiv := false ;
14334: LD_ADDR_VAR 0 7
14338: PUSH
14339: LD_INT 0
14341: ST_TO_ADDR
// case campaignNumber of 1 :
14342: LD_VAR 0 1
14346: PUSH
14347: LD_INT 1
14349: DOUBLE
14350: EQUAL
14351: IFTRUE 14355
14353: GO 14366
14355: POP
// achiv := ACH_GOTA ; 2 :
14356: LD_ADDR_VAR 0 7
14360: PUSH
14361: LD_STRING ACH_GOTA
14363: ST_TO_ADDR
14364: GO 14416
14366: LD_INT 2
14368: DOUBLE
14369: EQUAL
14370: IFTRUE 14374
14372: GO 14377
14374: POP
// ; 3 :
14375: GO 14416
14377: LD_INT 3
14379: DOUBLE
14380: EQUAL
14381: IFTRUE 14385
14383: GO 14396
14385: POP
// achiv := ACH_MOTSU ; 4 :
14386: LD_ADDR_VAR 0 7
14390: PUSH
14391: LD_STRING ACH_MOTSU
14393: ST_TO_ADDR
14394: GO 14416
14396: LD_INT 4
14398: DOUBLE
14399: EQUAL
14400: IFTRUE 14404
14402: GO 14415
14404: POP
// achiv := ACH_LOP ; end ;
14405: LD_ADDR_VAR 0 7
14409: PUSH
14410: LD_STRING ACH_LOP
14412: ST_TO_ADDR
14413: GO 14416
14415: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
14416: LD_OWVAR 67
14420: PUSH
14421: LD_INT 3
14423: EQUAL
14424: PUSH
14425: LD_VAR 0 7
14429: AND
14430: PUSH
14431: LD_VAR 0 3
14435: AND
14436: PUSH
14437: LD_VAR 0 4
14441: AND
14442: PUSH
14443: LD_VAR 0 5
14447: AND
14448: IFFALSE 14464
// SetAchievementEX ( achiv , missionNumber ) ;
14450: LD_VAR 0 7
14454: PPUSH
14455: LD_VAR 0 2
14459: PPUSH
14460: CALL_OW 564
// end ;
14464: LD_VAR 0 6
14468: RET
// export function SA_BehemothConstructed ; begin
14469: LD_INT 0
14471: PPUSH
// SetAchievement ( ACH_SMC ) ;
14472: LD_STRING ACH_SMC
14474: PPUSH
14475: CALL_OW 543
// end ; end_of_file
14479: LD_VAR 0 1
14483: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
14484: LD_VAR 0 2
14488: PUSH
14489: LD_INT 100
14491: EQUAL
14492: IFFALSE 15441
// begin if not StreamModeActive then
14494: LD_EXP 57
14498: NOT
14499: IFFALSE 14509
// StreamModeActive := true ;
14501: LD_ADDR_EXP 57
14505: PUSH
14506: LD_INT 1
14508: ST_TO_ADDR
// if p3 = 0 then
14509: LD_VAR 0 3
14513: PUSH
14514: LD_INT 0
14516: EQUAL
14517: IFFALSE 14523
// InitStreamMode ;
14519: CALL 15599 0 0
// if p3 = 1 then
14523: LD_VAR 0 3
14527: PUSH
14528: LD_INT 1
14530: EQUAL
14531: IFFALSE 14541
// sRocket := true ;
14533: LD_ADDR_EXP 62
14537: PUSH
14538: LD_INT 1
14540: ST_TO_ADDR
// if p3 = 2 then
14541: LD_VAR 0 3
14545: PUSH
14546: LD_INT 2
14548: EQUAL
14549: IFFALSE 14559
// sSpeed := true ;
14551: LD_ADDR_EXP 61
14555: PUSH
14556: LD_INT 1
14558: ST_TO_ADDR
// if p3 = 3 then
14559: LD_VAR 0 3
14563: PUSH
14564: LD_INT 3
14566: EQUAL
14567: IFFALSE 14577
// sEngine := true ;
14569: LD_ADDR_EXP 63
14573: PUSH
14574: LD_INT 1
14576: ST_TO_ADDR
// if p3 = 4 then
14577: LD_VAR 0 3
14581: PUSH
14582: LD_INT 4
14584: EQUAL
14585: IFFALSE 14595
// sSpec := true ;
14587: LD_ADDR_EXP 60
14591: PUSH
14592: LD_INT 1
14594: ST_TO_ADDR
// if p3 = 5 then
14595: LD_VAR 0 3
14599: PUSH
14600: LD_INT 5
14602: EQUAL
14603: IFFALSE 14613
// sLevel := true ;
14605: LD_ADDR_EXP 64
14609: PUSH
14610: LD_INT 1
14612: ST_TO_ADDR
// if p3 = 6 then
14613: LD_VAR 0 3
14617: PUSH
14618: LD_INT 6
14620: EQUAL
14621: IFFALSE 14631
// sArmoury := true ;
14623: LD_ADDR_EXP 65
14627: PUSH
14628: LD_INT 1
14630: ST_TO_ADDR
// if p3 = 7 then
14631: LD_VAR 0 3
14635: PUSH
14636: LD_INT 7
14638: EQUAL
14639: IFFALSE 14649
// sRadar := true ;
14641: LD_ADDR_EXP 66
14645: PUSH
14646: LD_INT 1
14648: ST_TO_ADDR
// if p3 = 8 then
14649: LD_VAR 0 3
14653: PUSH
14654: LD_INT 8
14656: EQUAL
14657: IFFALSE 14667
// sBunker := true ;
14659: LD_ADDR_EXP 67
14663: PUSH
14664: LD_INT 1
14666: ST_TO_ADDR
// if p3 = 9 then
14667: LD_VAR 0 3
14671: PUSH
14672: LD_INT 9
14674: EQUAL
14675: IFFALSE 14685
// sHack := true ;
14677: LD_ADDR_EXP 68
14681: PUSH
14682: LD_INT 1
14684: ST_TO_ADDR
// if p3 = 10 then
14685: LD_VAR 0 3
14689: PUSH
14690: LD_INT 10
14692: EQUAL
14693: IFFALSE 14703
// sFire := true ;
14695: LD_ADDR_EXP 69
14699: PUSH
14700: LD_INT 1
14702: ST_TO_ADDR
// if p3 = 11 then
14703: LD_VAR 0 3
14707: PUSH
14708: LD_INT 11
14710: EQUAL
14711: IFFALSE 14721
// sRefresh := true ;
14713: LD_ADDR_EXP 70
14717: PUSH
14718: LD_INT 1
14720: ST_TO_ADDR
// if p3 = 12 then
14721: LD_VAR 0 3
14725: PUSH
14726: LD_INT 12
14728: EQUAL
14729: IFFALSE 14739
// sExp := true ;
14731: LD_ADDR_EXP 71
14735: PUSH
14736: LD_INT 1
14738: ST_TO_ADDR
// if p3 = 13 then
14739: LD_VAR 0 3
14743: PUSH
14744: LD_INT 13
14746: EQUAL
14747: IFFALSE 14757
// sDepot := true ;
14749: LD_ADDR_EXP 72
14753: PUSH
14754: LD_INT 1
14756: ST_TO_ADDR
// if p3 = 14 then
14757: LD_VAR 0 3
14761: PUSH
14762: LD_INT 14
14764: EQUAL
14765: IFFALSE 14775
// sFlag := true ;
14767: LD_ADDR_EXP 73
14771: PUSH
14772: LD_INT 1
14774: ST_TO_ADDR
// if p3 = 15 then
14775: LD_VAR 0 3
14779: PUSH
14780: LD_INT 15
14782: EQUAL
14783: IFFALSE 14793
// sKamikadze := true ;
14785: LD_ADDR_EXP 81
14789: PUSH
14790: LD_INT 1
14792: ST_TO_ADDR
// if p3 = 16 then
14793: LD_VAR 0 3
14797: PUSH
14798: LD_INT 16
14800: EQUAL
14801: IFFALSE 14811
// sTroll := true ;
14803: LD_ADDR_EXP 82
14807: PUSH
14808: LD_INT 1
14810: ST_TO_ADDR
// if p3 = 17 then
14811: LD_VAR 0 3
14815: PUSH
14816: LD_INT 17
14818: EQUAL
14819: IFFALSE 14829
// sSlow := true ;
14821: LD_ADDR_EXP 83
14825: PUSH
14826: LD_INT 1
14828: ST_TO_ADDR
// if p3 = 18 then
14829: LD_VAR 0 3
14833: PUSH
14834: LD_INT 18
14836: EQUAL
14837: IFFALSE 14847
// sLack := true ;
14839: LD_ADDR_EXP 84
14843: PUSH
14844: LD_INT 1
14846: ST_TO_ADDR
// if p3 = 19 then
14847: LD_VAR 0 3
14851: PUSH
14852: LD_INT 19
14854: EQUAL
14855: IFFALSE 14865
// sTank := true ;
14857: LD_ADDR_EXP 86
14861: PUSH
14862: LD_INT 1
14864: ST_TO_ADDR
// if p3 = 20 then
14865: LD_VAR 0 3
14869: PUSH
14870: LD_INT 20
14872: EQUAL
14873: IFFALSE 14883
// sRemote := true ;
14875: LD_ADDR_EXP 87
14879: PUSH
14880: LD_INT 1
14882: ST_TO_ADDR
// if p3 = 21 then
14883: LD_VAR 0 3
14887: PUSH
14888: LD_INT 21
14890: EQUAL
14891: IFFALSE 14901
// sPowell := true ;
14893: LD_ADDR_EXP 88
14897: PUSH
14898: LD_INT 1
14900: ST_TO_ADDR
// if p3 = 22 then
14901: LD_VAR 0 3
14905: PUSH
14906: LD_INT 22
14908: EQUAL
14909: IFFALSE 14919
// sTeleport := true ;
14911: LD_ADDR_EXP 91
14915: PUSH
14916: LD_INT 1
14918: ST_TO_ADDR
// if p3 = 23 then
14919: LD_VAR 0 3
14923: PUSH
14924: LD_INT 23
14926: EQUAL
14927: IFFALSE 14937
// sOilTower := true ;
14929: LD_ADDR_EXP 93
14933: PUSH
14934: LD_INT 1
14936: ST_TO_ADDR
// if p3 = 24 then
14937: LD_VAR 0 3
14941: PUSH
14942: LD_INT 24
14944: EQUAL
14945: IFFALSE 14955
// sShovel := true ;
14947: LD_ADDR_EXP 94
14951: PUSH
14952: LD_INT 1
14954: ST_TO_ADDR
// if p3 = 25 then
14955: LD_VAR 0 3
14959: PUSH
14960: LD_INT 25
14962: EQUAL
14963: IFFALSE 14973
// sSheik := true ;
14965: LD_ADDR_EXP 95
14969: PUSH
14970: LD_INT 1
14972: ST_TO_ADDR
// if p3 = 26 then
14973: LD_VAR 0 3
14977: PUSH
14978: LD_INT 26
14980: EQUAL
14981: IFFALSE 14991
// sEarthquake := true ;
14983: LD_ADDR_EXP 97
14987: PUSH
14988: LD_INT 1
14990: ST_TO_ADDR
// if p3 = 27 then
14991: LD_VAR 0 3
14995: PUSH
14996: LD_INT 27
14998: EQUAL
14999: IFFALSE 15009
// sAI := true ;
15001: LD_ADDR_EXP 98
15005: PUSH
15006: LD_INT 1
15008: ST_TO_ADDR
// if p3 = 28 then
15009: LD_VAR 0 3
15013: PUSH
15014: LD_INT 28
15016: EQUAL
15017: IFFALSE 15027
// sCargo := true ;
15019: LD_ADDR_EXP 101
15023: PUSH
15024: LD_INT 1
15026: ST_TO_ADDR
// if p3 = 29 then
15027: LD_VAR 0 3
15031: PUSH
15032: LD_INT 29
15034: EQUAL
15035: IFFALSE 15045
// sDLaser := true ;
15037: LD_ADDR_EXP 102
15041: PUSH
15042: LD_INT 1
15044: ST_TO_ADDR
// if p3 = 30 then
15045: LD_VAR 0 3
15049: PUSH
15050: LD_INT 30
15052: EQUAL
15053: IFFALSE 15063
// sExchange := true ;
15055: LD_ADDR_EXP 103
15059: PUSH
15060: LD_INT 1
15062: ST_TO_ADDR
// if p3 = 31 then
15063: LD_VAR 0 3
15067: PUSH
15068: LD_INT 31
15070: EQUAL
15071: IFFALSE 15081
// sFac := true ;
15073: LD_ADDR_EXP 104
15077: PUSH
15078: LD_INT 1
15080: ST_TO_ADDR
// if p3 = 32 then
15081: LD_VAR 0 3
15085: PUSH
15086: LD_INT 32
15088: EQUAL
15089: IFFALSE 15099
// sPower := true ;
15091: LD_ADDR_EXP 105
15095: PUSH
15096: LD_INT 1
15098: ST_TO_ADDR
// if p3 = 33 then
15099: LD_VAR 0 3
15103: PUSH
15104: LD_INT 33
15106: EQUAL
15107: IFFALSE 15117
// sRandom := true ;
15109: LD_ADDR_EXP 106
15113: PUSH
15114: LD_INT 1
15116: ST_TO_ADDR
// if p3 = 34 then
15117: LD_VAR 0 3
15121: PUSH
15122: LD_INT 34
15124: EQUAL
15125: IFFALSE 15135
// sShield := true ;
15127: LD_ADDR_EXP 107
15131: PUSH
15132: LD_INT 1
15134: ST_TO_ADDR
// if p3 = 35 then
15135: LD_VAR 0 3
15139: PUSH
15140: LD_INT 35
15142: EQUAL
15143: IFFALSE 15153
// sTime := true ;
15145: LD_ADDR_EXP 108
15149: PUSH
15150: LD_INT 1
15152: ST_TO_ADDR
// if p3 = 36 then
15153: LD_VAR 0 3
15157: PUSH
15158: LD_INT 36
15160: EQUAL
15161: IFFALSE 15171
// sTools := true ;
15163: LD_ADDR_EXP 109
15167: PUSH
15168: LD_INT 1
15170: ST_TO_ADDR
// if p3 = 101 then
15171: LD_VAR 0 3
15175: PUSH
15176: LD_INT 101
15178: EQUAL
15179: IFFALSE 15189
// sSold := true ;
15181: LD_ADDR_EXP 74
15185: PUSH
15186: LD_INT 1
15188: ST_TO_ADDR
// if p3 = 102 then
15189: LD_VAR 0 3
15193: PUSH
15194: LD_INT 102
15196: EQUAL
15197: IFFALSE 15207
// sDiff := true ;
15199: LD_ADDR_EXP 75
15203: PUSH
15204: LD_INT 1
15206: ST_TO_ADDR
// if p3 = 103 then
15207: LD_VAR 0 3
15211: PUSH
15212: LD_INT 103
15214: EQUAL
15215: IFFALSE 15225
// sFog := true ;
15217: LD_ADDR_EXP 78
15221: PUSH
15222: LD_INT 1
15224: ST_TO_ADDR
// if p3 = 104 then
15225: LD_VAR 0 3
15229: PUSH
15230: LD_INT 104
15232: EQUAL
15233: IFFALSE 15243
// sReset := true ;
15235: LD_ADDR_EXP 79
15239: PUSH
15240: LD_INT 1
15242: ST_TO_ADDR
// if p3 = 105 then
15243: LD_VAR 0 3
15247: PUSH
15248: LD_INT 105
15250: EQUAL
15251: IFFALSE 15261
// sSun := true ;
15253: LD_ADDR_EXP 80
15257: PUSH
15258: LD_INT 1
15260: ST_TO_ADDR
// if p3 = 106 then
15261: LD_VAR 0 3
15265: PUSH
15266: LD_INT 106
15268: EQUAL
15269: IFFALSE 15279
// sTiger := true ;
15271: LD_ADDR_EXP 76
15275: PUSH
15276: LD_INT 1
15278: ST_TO_ADDR
// if p3 = 107 then
15279: LD_VAR 0 3
15283: PUSH
15284: LD_INT 107
15286: EQUAL
15287: IFFALSE 15297
// sBomb := true ;
15289: LD_ADDR_EXP 77
15293: PUSH
15294: LD_INT 1
15296: ST_TO_ADDR
// if p3 = 108 then
15297: LD_VAR 0 3
15301: PUSH
15302: LD_INT 108
15304: EQUAL
15305: IFFALSE 15315
// sWound := true ;
15307: LD_ADDR_EXP 85
15311: PUSH
15312: LD_INT 1
15314: ST_TO_ADDR
// if p3 = 109 then
15315: LD_VAR 0 3
15319: PUSH
15320: LD_INT 109
15322: EQUAL
15323: IFFALSE 15333
// sBetray := true ;
15325: LD_ADDR_EXP 89
15329: PUSH
15330: LD_INT 1
15332: ST_TO_ADDR
// if p3 = 110 then
15333: LD_VAR 0 3
15337: PUSH
15338: LD_INT 110
15340: EQUAL
15341: IFFALSE 15351
// sContamin := true ;
15343: LD_ADDR_EXP 90
15347: PUSH
15348: LD_INT 1
15350: ST_TO_ADDR
// if p3 = 111 then
15351: LD_VAR 0 3
15355: PUSH
15356: LD_INT 111
15358: EQUAL
15359: IFFALSE 15369
// sOil := true ;
15361: LD_ADDR_EXP 92
15365: PUSH
15366: LD_INT 1
15368: ST_TO_ADDR
// if p3 = 112 then
15369: LD_VAR 0 3
15373: PUSH
15374: LD_INT 112
15376: EQUAL
15377: IFFALSE 15387
// sStu := true ;
15379: LD_ADDR_EXP 96
15383: PUSH
15384: LD_INT 1
15386: ST_TO_ADDR
// if p3 = 113 then
15387: LD_VAR 0 3
15391: PUSH
15392: LD_INT 113
15394: EQUAL
15395: IFFALSE 15405
// sBazooka := true ;
15397: LD_ADDR_EXP 99
15401: PUSH
15402: LD_INT 1
15404: ST_TO_ADDR
// if p3 = 114 then
15405: LD_VAR 0 3
15409: PUSH
15410: LD_INT 114
15412: EQUAL
15413: IFFALSE 15423
// sMortar := true ;
15415: LD_ADDR_EXP 100
15419: PUSH
15420: LD_INT 1
15422: ST_TO_ADDR
// if p3 = 115 then
15423: LD_VAR 0 3
15427: PUSH
15428: LD_INT 115
15430: EQUAL
15431: IFFALSE 15441
// sRanger := true ;
15433: LD_ADDR_EXP 110
15437: PUSH
15438: LD_INT 1
15440: ST_TO_ADDR
// end ; if p2 = 101 then
15441: LD_VAR 0 2
15445: PUSH
15446: LD_INT 101
15448: EQUAL
15449: IFFALSE 15577
// begin case p3 of 1 :
15451: LD_VAR 0 3
15455: PUSH
15456: LD_INT 1
15458: DOUBLE
15459: EQUAL
15460: IFTRUE 15464
15462: GO 15471
15464: POP
// hHackUnlimitedResources ; 2 :
15465: CALL 26612 0 0
15469: GO 15577
15471: LD_INT 2
15473: DOUBLE
15474: EQUAL
15475: IFTRUE 15479
15477: GO 15486
15479: POP
// hHackSetLevel10 ; 3 :
15480: CALL 26745 0 0
15484: GO 15577
15486: LD_INT 3
15488: DOUBLE
15489: EQUAL
15490: IFTRUE 15494
15492: GO 15501
15494: POP
// hHackSetLevel10YourUnits ; 4 :
15495: CALL 26830 0 0
15499: GO 15577
15501: LD_INT 4
15503: DOUBLE
15504: EQUAL
15505: IFTRUE 15509
15507: GO 15516
15509: POP
// hHackInvincible ; 5 :
15510: CALL 27278 0 0
15514: GO 15577
15516: LD_INT 5
15518: DOUBLE
15519: EQUAL
15520: IFTRUE 15524
15522: GO 15531
15524: POP
// hHackInvisible ; 6 :
15525: CALL 27389 0 0
15529: GO 15577
15531: LD_INT 6
15533: DOUBLE
15534: EQUAL
15535: IFTRUE 15539
15537: GO 15546
15539: POP
// hHackChangeYourSide ; 7 :
15540: CALL 27446 0 0
15544: GO 15577
15546: LD_INT 7
15548: DOUBLE
15549: EQUAL
15550: IFTRUE 15554
15552: GO 15561
15554: POP
// hHackChangeUnitSide ; 8 :
15555: CALL 27488 0 0
15559: GO 15577
15561: LD_INT 8
15563: DOUBLE
15564: EQUAL
15565: IFTRUE 15569
15567: GO 15576
15569: POP
// hHackFog ; end ;
15570: CALL 27589 0 0
15574: GO 15577
15576: POP
// end ; end ;
15577: PPOPN 6
15579: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
15580: GO 15582
15582: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
15583: LD_STRING initStreamRollete();
15585: PPUSH
15586: CALL_OW 559
// InitStreamMode ;
15590: CALL 15599 0 0
// DefineStreamItems ( ) ;
15594: CALL 16039 0 0
// end ;
15598: END
// function InitStreamMode ; begin
15599: LD_INT 0
15601: PPUSH
// streamModeActive := false ;
15602: LD_ADDR_EXP 57
15606: PUSH
15607: LD_INT 0
15609: ST_TO_ADDR
// normalCounter := 36 ;
15610: LD_ADDR_EXP 58
15614: PUSH
15615: LD_INT 36
15617: ST_TO_ADDR
// hardcoreCounter := 16 ;
15618: LD_ADDR_EXP 59
15622: PUSH
15623: LD_INT 16
15625: ST_TO_ADDR
// sRocket := false ;
15626: LD_ADDR_EXP 62
15630: PUSH
15631: LD_INT 0
15633: ST_TO_ADDR
// sSpeed := false ;
15634: LD_ADDR_EXP 61
15638: PUSH
15639: LD_INT 0
15641: ST_TO_ADDR
// sEngine := false ;
15642: LD_ADDR_EXP 63
15646: PUSH
15647: LD_INT 0
15649: ST_TO_ADDR
// sSpec := false ;
15650: LD_ADDR_EXP 60
15654: PUSH
15655: LD_INT 0
15657: ST_TO_ADDR
// sLevel := false ;
15658: LD_ADDR_EXP 64
15662: PUSH
15663: LD_INT 0
15665: ST_TO_ADDR
// sArmoury := false ;
15666: LD_ADDR_EXP 65
15670: PUSH
15671: LD_INT 0
15673: ST_TO_ADDR
// sRadar := false ;
15674: LD_ADDR_EXP 66
15678: PUSH
15679: LD_INT 0
15681: ST_TO_ADDR
// sBunker := false ;
15682: LD_ADDR_EXP 67
15686: PUSH
15687: LD_INT 0
15689: ST_TO_ADDR
// sHack := false ;
15690: LD_ADDR_EXP 68
15694: PUSH
15695: LD_INT 0
15697: ST_TO_ADDR
// sFire := false ;
15698: LD_ADDR_EXP 69
15702: PUSH
15703: LD_INT 0
15705: ST_TO_ADDR
// sRefresh := false ;
15706: LD_ADDR_EXP 70
15710: PUSH
15711: LD_INT 0
15713: ST_TO_ADDR
// sExp := false ;
15714: LD_ADDR_EXP 71
15718: PUSH
15719: LD_INT 0
15721: ST_TO_ADDR
// sDepot := false ;
15722: LD_ADDR_EXP 72
15726: PUSH
15727: LD_INT 0
15729: ST_TO_ADDR
// sFlag := false ;
15730: LD_ADDR_EXP 73
15734: PUSH
15735: LD_INT 0
15737: ST_TO_ADDR
// sKamikadze := false ;
15738: LD_ADDR_EXP 81
15742: PUSH
15743: LD_INT 0
15745: ST_TO_ADDR
// sTroll := false ;
15746: LD_ADDR_EXP 82
15750: PUSH
15751: LD_INT 0
15753: ST_TO_ADDR
// sSlow := false ;
15754: LD_ADDR_EXP 83
15758: PUSH
15759: LD_INT 0
15761: ST_TO_ADDR
// sLack := false ;
15762: LD_ADDR_EXP 84
15766: PUSH
15767: LD_INT 0
15769: ST_TO_ADDR
// sTank := false ;
15770: LD_ADDR_EXP 86
15774: PUSH
15775: LD_INT 0
15777: ST_TO_ADDR
// sRemote := false ;
15778: LD_ADDR_EXP 87
15782: PUSH
15783: LD_INT 0
15785: ST_TO_ADDR
// sPowell := false ;
15786: LD_ADDR_EXP 88
15790: PUSH
15791: LD_INT 0
15793: ST_TO_ADDR
// sTeleport := false ;
15794: LD_ADDR_EXP 91
15798: PUSH
15799: LD_INT 0
15801: ST_TO_ADDR
// sOilTower := false ;
15802: LD_ADDR_EXP 93
15806: PUSH
15807: LD_INT 0
15809: ST_TO_ADDR
// sShovel := false ;
15810: LD_ADDR_EXP 94
15814: PUSH
15815: LD_INT 0
15817: ST_TO_ADDR
// sSheik := false ;
15818: LD_ADDR_EXP 95
15822: PUSH
15823: LD_INT 0
15825: ST_TO_ADDR
// sEarthquake := false ;
15826: LD_ADDR_EXP 97
15830: PUSH
15831: LD_INT 0
15833: ST_TO_ADDR
// sAI := false ;
15834: LD_ADDR_EXP 98
15838: PUSH
15839: LD_INT 0
15841: ST_TO_ADDR
// sCargo := false ;
15842: LD_ADDR_EXP 101
15846: PUSH
15847: LD_INT 0
15849: ST_TO_ADDR
// sDLaser := false ;
15850: LD_ADDR_EXP 102
15854: PUSH
15855: LD_INT 0
15857: ST_TO_ADDR
// sExchange := false ;
15858: LD_ADDR_EXP 103
15862: PUSH
15863: LD_INT 0
15865: ST_TO_ADDR
// sFac := false ;
15866: LD_ADDR_EXP 104
15870: PUSH
15871: LD_INT 0
15873: ST_TO_ADDR
// sPower := false ;
15874: LD_ADDR_EXP 105
15878: PUSH
15879: LD_INT 0
15881: ST_TO_ADDR
// sRandom := false ;
15882: LD_ADDR_EXP 106
15886: PUSH
15887: LD_INT 0
15889: ST_TO_ADDR
// sShield := false ;
15890: LD_ADDR_EXP 107
15894: PUSH
15895: LD_INT 0
15897: ST_TO_ADDR
// sTime := false ;
15898: LD_ADDR_EXP 108
15902: PUSH
15903: LD_INT 0
15905: ST_TO_ADDR
// sTools := false ;
15906: LD_ADDR_EXP 109
15910: PUSH
15911: LD_INT 0
15913: ST_TO_ADDR
// sSold := false ;
15914: LD_ADDR_EXP 74
15918: PUSH
15919: LD_INT 0
15921: ST_TO_ADDR
// sDiff := false ;
15922: LD_ADDR_EXP 75
15926: PUSH
15927: LD_INT 0
15929: ST_TO_ADDR
// sFog := false ;
15930: LD_ADDR_EXP 78
15934: PUSH
15935: LD_INT 0
15937: ST_TO_ADDR
// sReset := false ;
15938: LD_ADDR_EXP 79
15942: PUSH
15943: LD_INT 0
15945: ST_TO_ADDR
// sSun := false ;
15946: LD_ADDR_EXP 80
15950: PUSH
15951: LD_INT 0
15953: ST_TO_ADDR
// sTiger := false ;
15954: LD_ADDR_EXP 76
15958: PUSH
15959: LD_INT 0
15961: ST_TO_ADDR
// sBomb := false ;
15962: LD_ADDR_EXP 77
15966: PUSH
15967: LD_INT 0
15969: ST_TO_ADDR
// sWound := false ;
15970: LD_ADDR_EXP 85
15974: PUSH
15975: LD_INT 0
15977: ST_TO_ADDR
// sBetray := false ;
15978: LD_ADDR_EXP 89
15982: PUSH
15983: LD_INT 0
15985: ST_TO_ADDR
// sContamin := false ;
15986: LD_ADDR_EXP 90
15990: PUSH
15991: LD_INT 0
15993: ST_TO_ADDR
// sOil := false ;
15994: LD_ADDR_EXP 92
15998: PUSH
15999: LD_INT 0
16001: ST_TO_ADDR
// sStu := false ;
16002: LD_ADDR_EXP 96
16006: PUSH
16007: LD_INT 0
16009: ST_TO_ADDR
// sBazooka := false ;
16010: LD_ADDR_EXP 99
16014: PUSH
16015: LD_INT 0
16017: ST_TO_ADDR
// sMortar := false ;
16018: LD_ADDR_EXP 100
16022: PUSH
16023: LD_INT 0
16025: ST_TO_ADDR
// sRanger := false ;
16026: LD_ADDR_EXP 110
16030: PUSH
16031: LD_INT 0
16033: ST_TO_ADDR
// end ;
16034: LD_VAR 0 1
16038: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
16039: LD_INT 0
16041: PPUSH
16042: PPUSH
16043: PPUSH
16044: PPUSH
16045: PPUSH
// result := [ ] ;
16046: LD_ADDR_VAR 0 1
16050: PUSH
16051: EMPTY
16052: ST_TO_ADDR
// if campaign_id = 1 then
16053: LD_OWVAR 69
16057: PUSH
16058: LD_INT 1
16060: EQUAL
16061: IFFALSE 18999
// begin case mission_number of 1 :
16063: LD_OWVAR 70
16067: PUSH
16068: LD_INT 1
16070: DOUBLE
16071: EQUAL
16072: IFTRUE 16076
16074: GO 16140
16076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
16077: LD_ADDR_VAR 0 1
16081: PUSH
16082: LD_INT 2
16084: PUSH
16085: LD_INT 4
16087: PUSH
16088: LD_INT 11
16090: PUSH
16091: LD_INT 12
16093: PUSH
16094: LD_INT 15
16096: PUSH
16097: LD_INT 16
16099: PUSH
16100: LD_INT 22
16102: PUSH
16103: LD_INT 23
16105: PUSH
16106: LD_INT 26
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: LD_INT 101
16122: PUSH
16123: LD_INT 102
16125: PUSH
16126: LD_INT 106
16128: PUSH
16129: EMPTY
16130: LIST
16131: LIST
16132: LIST
16133: PUSH
16134: EMPTY
16135: LIST
16136: LIST
16137: ST_TO_ADDR
16138: GO 18997
16140: LD_INT 2
16142: DOUBLE
16143: EQUAL
16144: IFTRUE 16148
16146: GO 16220
16148: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
16149: LD_ADDR_VAR 0 1
16153: PUSH
16154: LD_INT 2
16156: PUSH
16157: LD_INT 4
16159: PUSH
16160: LD_INT 11
16162: PUSH
16163: LD_INT 12
16165: PUSH
16166: LD_INT 15
16168: PUSH
16169: LD_INT 16
16171: PUSH
16172: LD_INT 22
16174: PUSH
16175: LD_INT 23
16177: PUSH
16178: LD_INT 26
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: LIST
16191: PUSH
16192: LD_INT 101
16194: PUSH
16195: LD_INT 102
16197: PUSH
16198: LD_INT 105
16200: PUSH
16201: LD_INT 106
16203: PUSH
16204: LD_INT 108
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: LIST
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: ST_TO_ADDR
16218: GO 18997
16220: LD_INT 3
16222: DOUBLE
16223: EQUAL
16224: IFTRUE 16228
16226: GO 16304
16228: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
16229: LD_ADDR_VAR 0 1
16233: PUSH
16234: LD_INT 2
16236: PUSH
16237: LD_INT 4
16239: PUSH
16240: LD_INT 5
16242: PUSH
16243: LD_INT 11
16245: PUSH
16246: LD_INT 12
16248: PUSH
16249: LD_INT 15
16251: PUSH
16252: LD_INT 16
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_INT 26
16260: PUSH
16261: LD_INT 36
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: LIST
16268: LIST
16269: LIST
16270: LIST
16271: LIST
16272: LIST
16273: LIST
16274: LIST
16275: PUSH
16276: LD_INT 101
16278: PUSH
16279: LD_INT 102
16281: PUSH
16282: LD_INT 105
16284: PUSH
16285: LD_INT 106
16287: PUSH
16288: LD_INT 108
16290: PUSH
16291: EMPTY
16292: LIST
16293: LIST
16294: LIST
16295: LIST
16296: LIST
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: ST_TO_ADDR
16302: GO 18997
16304: LD_INT 4
16306: DOUBLE
16307: EQUAL
16308: IFTRUE 16312
16310: GO 16396
16312: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
16313: LD_ADDR_VAR 0 1
16317: PUSH
16318: LD_INT 2
16320: PUSH
16321: LD_INT 4
16323: PUSH
16324: LD_INT 5
16326: PUSH
16327: LD_INT 8
16329: PUSH
16330: LD_INT 11
16332: PUSH
16333: LD_INT 12
16335: PUSH
16336: LD_INT 15
16338: PUSH
16339: LD_INT 16
16341: PUSH
16342: LD_INT 22
16344: PUSH
16345: LD_INT 23
16347: PUSH
16348: LD_INT 26
16350: PUSH
16351: LD_INT 36
16353: PUSH
16354: EMPTY
16355: LIST
16356: LIST
16357: LIST
16358: LIST
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: LIST
16364: LIST
16365: LIST
16366: LIST
16367: PUSH
16368: LD_INT 101
16370: PUSH
16371: LD_INT 102
16373: PUSH
16374: LD_INT 105
16376: PUSH
16377: LD_INT 106
16379: PUSH
16380: LD_INT 108
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: LIST
16387: LIST
16388: LIST
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: ST_TO_ADDR
16394: GO 18997
16396: LD_INT 5
16398: DOUBLE
16399: EQUAL
16400: IFTRUE 16404
16402: GO 16504
16404: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
16405: LD_ADDR_VAR 0 1
16409: PUSH
16410: LD_INT 2
16412: PUSH
16413: LD_INT 4
16415: PUSH
16416: LD_INT 5
16418: PUSH
16419: LD_INT 6
16421: PUSH
16422: LD_INT 8
16424: PUSH
16425: LD_INT 11
16427: PUSH
16428: LD_INT 12
16430: PUSH
16431: LD_INT 15
16433: PUSH
16434: LD_INT 16
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_INT 23
16442: PUSH
16443: LD_INT 25
16445: PUSH
16446: LD_INT 26
16448: PUSH
16449: LD_INT 36
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: PUSH
16468: LD_INT 101
16470: PUSH
16471: LD_INT 102
16473: PUSH
16474: LD_INT 105
16476: PUSH
16477: LD_INT 106
16479: PUSH
16480: LD_INT 108
16482: PUSH
16483: LD_INT 109
16485: PUSH
16486: LD_INT 112
16488: PUSH
16489: EMPTY
16490: LIST
16491: LIST
16492: LIST
16493: LIST
16494: LIST
16495: LIST
16496: LIST
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: ST_TO_ADDR
16502: GO 18997
16504: LD_INT 6
16506: DOUBLE
16507: EQUAL
16508: IFTRUE 16512
16510: GO 16632
16512: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
16513: LD_ADDR_VAR 0 1
16517: PUSH
16518: LD_INT 2
16520: PUSH
16521: LD_INT 4
16523: PUSH
16524: LD_INT 5
16526: PUSH
16527: LD_INT 6
16529: PUSH
16530: LD_INT 8
16532: PUSH
16533: LD_INT 11
16535: PUSH
16536: LD_INT 12
16538: PUSH
16539: LD_INT 15
16541: PUSH
16542: LD_INT 16
16544: PUSH
16545: LD_INT 20
16547: PUSH
16548: LD_INT 21
16550: PUSH
16551: LD_INT 22
16553: PUSH
16554: LD_INT 23
16556: PUSH
16557: LD_INT 25
16559: PUSH
16560: LD_INT 26
16562: PUSH
16563: LD_INT 30
16565: PUSH
16566: LD_INT 31
16568: PUSH
16569: LD_INT 32
16571: PUSH
16572: LD_INT 36
16574: PUSH
16575: EMPTY
16576: LIST
16577: LIST
16578: LIST
16579: LIST
16580: LIST
16581: LIST
16582: LIST
16583: LIST
16584: LIST
16585: LIST
16586: LIST
16587: LIST
16588: LIST
16589: LIST
16590: LIST
16591: LIST
16592: LIST
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 101
16598: PUSH
16599: LD_INT 102
16601: PUSH
16602: LD_INT 105
16604: PUSH
16605: LD_INT 106
16607: PUSH
16608: LD_INT 108
16610: PUSH
16611: LD_INT 109
16613: PUSH
16614: LD_INT 112
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: LIST
16622: LIST
16623: LIST
16624: LIST
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: ST_TO_ADDR
16630: GO 18997
16632: LD_INT 7
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16740
16640: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
16641: LD_ADDR_VAR 0 1
16645: PUSH
16646: LD_INT 2
16648: PUSH
16649: LD_INT 4
16651: PUSH
16652: LD_INT 5
16654: PUSH
16655: LD_INT 7
16657: PUSH
16658: LD_INT 11
16660: PUSH
16661: LD_INT 12
16663: PUSH
16664: LD_INT 15
16666: PUSH
16667: LD_INT 16
16669: PUSH
16670: LD_INT 20
16672: PUSH
16673: LD_INT 21
16675: PUSH
16676: LD_INT 22
16678: PUSH
16679: LD_INT 23
16681: PUSH
16682: LD_INT 25
16684: PUSH
16685: LD_INT 26
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 101
16706: PUSH
16707: LD_INT 102
16709: PUSH
16710: LD_INT 103
16712: PUSH
16713: LD_INT 105
16715: PUSH
16716: LD_INT 106
16718: PUSH
16719: LD_INT 108
16721: PUSH
16722: LD_INT 112
16724: PUSH
16725: EMPTY
16726: LIST
16727: LIST
16728: LIST
16729: LIST
16730: LIST
16731: LIST
16732: LIST
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: ST_TO_ADDR
16738: GO 18997
16740: LD_INT 8
16742: DOUBLE
16743: EQUAL
16744: IFTRUE 16748
16746: GO 16876
16748: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
16749: LD_ADDR_VAR 0 1
16753: PUSH
16754: LD_INT 2
16756: PUSH
16757: LD_INT 4
16759: PUSH
16760: LD_INT 5
16762: PUSH
16763: LD_INT 6
16765: PUSH
16766: LD_INT 7
16768: PUSH
16769: LD_INT 8
16771: PUSH
16772: LD_INT 11
16774: PUSH
16775: LD_INT 12
16777: PUSH
16778: LD_INT 15
16780: PUSH
16781: LD_INT 16
16783: PUSH
16784: LD_INT 20
16786: PUSH
16787: LD_INT 21
16789: PUSH
16790: LD_INT 22
16792: PUSH
16793: LD_INT 23
16795: PUSH
16796: LD_INT 25
16798: PUSH
16799: LD_INT 26
16801: PUSH
16802: LD_INT 30
16804: PUSH
16805: LD_INT 31
16807: PUSH
16808: LD_INT 32
16810: PUSH
16811: LD_INT 36
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: LIST
16818: LIST
16819: LIST
16820: LIST
16821: LIST
16822: LIST
16823: LIST
16824: LIST
16825: LIST
16826: LIST
16827: LIST
16828: LIST
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: LIST
16834: LIST
16835: PUSH
16836: LD_INT 101
16838: PUSH
16839: LD_INT 102
16841: PUSH
16842: LD_INT 103
16844: PUSH
16845: LD_INT 105
16847: PUSH
16848: LD_INT 106
16850: PUSH
16851: LD_INT 108
16853: PUSH
16854: LD_INT 109
16856: PUSH
16857: LD_INT 112
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: LIST
16869: PUSH
16870: EMPTY
16871: LIST
16872: LIST
16873: ST_TO_ADDR
16874: GO 18997
16876: LD_INT 9
16878: DOUBLE
16879: EQUAL
16880: IFTRUE 16884
16882: GO 17020
16884: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
16885: LD_ADDR_VAR 0 1
16889: PUSH
16890: LD_INT 2
16892: PUSH
16893: LD_INT 4
16895: PUSH
16896: LD_INT 5
16898: PUSH
16899: LD_INT 6
16901: PUSH
16902: LD_INT 7
16904: PUSH
16905: LD_INT 8
16907: PUSH
16908: LD_INT 11
16910: PUSH
16911: LD_INT 12
16913: PUSH
16914: LD_INT 15
16916: PUSH
16917: LD_INT 16
16919: PUSH
16920: LD_INT 20
16922: PUSH
16923: LD_INT 21
16925: PUSH
16926: LD_INT 22
16928: PUSH
16929: LD_INT 23
16931: PUSH
16932: LD_INT 25
16934: PUSH
16935: LD_INT 26
16937: PUSH
16938: LD_INT 28
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 31
16946: PUSH
16947: LD_INT 32
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: LIST
16967: LIST
16968: LIST
16969: LIST
16970: LIST
16971: LIST
16972: LIST
16973: LIST
16974: LIST
16975: PUSH
16976: LD_INT 101
16978: PUSH
16979: LD_INT 102
16981: PUSH
16982: LD_INT 103
16984: PUSH
16985: LD_INT 105
16987: PUSH
16988: LD_INT 106
16990: PUSH
16991: LD_INT 108
16993: PUSH
16994: LD_INT 109
16996: PUSH
16997: LD_INT 112
16999: PUSH
17000: LD_INT 114
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: LIST
17008: LIST
17009: LIST
17010: LIST
17011: LIST
17012: LIST
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: ST_TO_ADDR
17018: GO 18997
17020: LD_INT 10
17022: DOUBLE
17023: EQUAL
17024: IFTRUE 17028
17026: GO 17212
17028: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
17029: LD_ADDR_VAR 0 1
17033: PUSH
17034: LD_INT 2
17036: PUSH
17037: LD_INT 4
17039: PUSH
17040: LD_INT 5
17042: PUSH
17043: LD_INT 6
17045: PUSH
17046: LD_INT 7
17048: PUSH
17049: LD_INT 8
17051: PUSH
17052: LD_INT 9
17054: PUSH
17055: LD_INT 10
17057: PUSH
17058: LD_INT 11
17060: PUSH
17061: LD_INT 12
17063: PUSH
17064: LD_INT 13
17066: PUSH
17067: LD_INT 14
17069: PUSH
17070: LD_INT 15
17072: PUSH
17073: LD_INT 16
17075: PUSH
17076: LD_INT 17
17078: PUSH
17079: LD_INT 18
17081: PUSH
17082: LD_INT 19
17084: PUSH
17085: LD_INT 20
17087: PUSH
17088: LD_INT 21
17090: PUSH
17091: LD_INT 22
17093: PUSH
17094: LD_INT 23
17096: PUSH
17097: LD_INT 24
17099: PUSH
17100: LD_INT 25
17102: PUSH
17103: LD_INT 26
17105: PUSH
17106: LD_INT 28
17108: PUSH
17109: LD_INT 30
17111: PUSH
17112: LD_INT 31
17114: PUSH
17115: LD_INT 32
17117: PUSH
17118: LD_INT 36
17120: PUSH
17121: EMPTY
17122: LIST
17123: LIST
17124: LIST
17125: LIST
17126: LIST
17127: LIST
17128: LIST
17129: LIST
17130: LIST
17131: LIST
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: LIST
17137: LIST
17138: LIST
17139: LIST
17140: LIST
17141: LIST
17142: LIST
17143: LIST
17144: LIST
17145: LIST
17146: LIST
17147: LIST
17148: LIST
17149: LIST
17150: LIST
17151: PUSH
17152: LD_INT 101
17154: PUSH
17155: LD_INT 102
17157: PUSH
17158: LD_INT 103
17160: PUSH
17161: LD_INT 104
17163: PUSH
17164: LD_INT 105
17166: PUSH
17167: LD_INT 106
17169: PUSH
17170: LD_INT 107
17172: PUSH
17173: LD_INT 108
17175: PUSH
17176: LD_INT 109
17178: PUSH
17179: LD_INT 110
17181: PUSH
17182: LD_INT 111
17184: PUSH
17185: LD_INT 112
17187: PUSH
17188: LD_INT 114
17190: PUSH
17191: EMPTY
17192: LIST
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: LIST
17198: LIST
17199: LIST
17200: LIST
17201: LIST
17202: LIST
17203: LIST
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: ST_TO_ADDR
17210: GO 18997
17212: LD_INT 11
17214: DOUBLE
17215: EQUAL
17216: IFTRUE 17220
17218: GO 17412
17220: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
17221: LD_ADDR_VAR 0 1
17225: PUSH
17226: LD_INT 2
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: LD_INT 4
17234: PUSH
17235: LD_INT 5
17237: PUSH
17238: LD_INT 6
17240: PUSH
17241: LD_INT 7
17243: PUSH
17244: LD_INT 8
17246: PUSH
17247: LD_INT 9
17249: PUSH
17250: LD_INT 10
17252: PUSH
17253: LD_INT 11
17255: PUSH
17256: LD_INT 12
17258: PUSH
17259: LD_INT 13
17261: PUSH
17262: LD_INT 14
17264: PUSH
17265: LD_INT 15
17267: PUSH
17268: LD_INT 16
17270: PUSH
17271: LD_INT 17
17273: PUSH
17274: LD_INT 18
17276: PUSH
17277: LD_INT 19
17279: PUSH
17280: LD_INT 20
17282: PUSH
17283: LD_INT 21
17285: PUSH
17286: LD_INT 22
17288: PUSH
17289: LD_INT 23
17291: PUSH
17292: LD_INT 24
17294: PUSH
17295: LD_INT 25
17297: PUSH
17298: LD_INT 26
17300: PUSH
17301: LD_INT 28
17303: PUSH
17304: LD_INT 30
17306: PUSH
17307: LD_INT 31
17309: PUSH
17310: LD_INT 32
17312: PUSH
17313: LD_INT 34
17315: PUSH
17316: LD_INT 36
17318: PUSH
17319: EMPTY
17320: LIST
17321: LIST
17322: LIST
17323: LIST
17324: LIST
17325: LIST
17326: LIST
17327: LIST
17328: LIST
17329: LIST
17330: LIST
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: LIST
17343: LIST
17344: LIST
17345: LIST
17346: LIST
17347: LIST
17348: LIST
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 101
17354: PUSH
17355: LD_INT 102
17357: PUSH
17358: LD_INT 103
17360: PUSH
17361: LD_INT 104
17363: PUSH
17364: LD_INT 105
17366: PUSH
17367: LD_INT 106
17369: PUSH
17370: LD_INT 107
17372: PUSH
17373: LD_INT 108
17375: PUSH
17376: LD_INT 109
17378: PUSH
17379: LD_INT 110
17381: PUSH
17382: LD_INT 111
17384: PUSH
17385: LD_INT 112
17387: PUSH
17388: LD_INT 114
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: LIST
17395: LIST
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: LIST
17404: LIST
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: ST_TO_ADDR
17410: GO 18997
17412: LD_INT 12
17414: DOUBLE
17415: EQUAL
17416: IFTRUE 17420
17418: GO 17628
17420: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
17421: LD_ADDR_VAR 0 1
17425: PUSH
17426: LD_INT 1
17428: PUSH
17429: LD_INT 2
17431: PUSH
17432: LD_INT 3
17434: PUSH
17435: LD_INT 4
17437: PUSH
17438: LD_INT 5
17440: PUSH
17441: LD_INT 6
17443: PUSH
17444: LD_INT 7
17446: PUSH
17447: LD_INT 8
17449: PUSH
17450: LD_INT 9
17452: PUSH
17453: LD_INT 10
17455: PUSH
17456: LD_INT 11
17458: PUSH
17459: LD_INT 12
17461: PUSH
17462: LD_INT 13
17464: PUSH
17465: LD_INT 14
17467: PUSH
17468: LD_INT 15
17470: PUSH
17471: LD_INT 16
17473: PUSH
17474: LD_INT 17
17476: PUSH
17477: LD_INT 18
17479: PUSH
17480: LD_INT 19
17482: PUSH
17483: LD_INT 20
17485: PUSH
17486: LD_INT 21
17488: PUSH
17489: LD_INT 22
17491: PUSH
17492: LD_INT 23
17494: PUSH
17495: LD_INT 24
17497: PUSH
17498: LD_INT 25
17500: PUSH
17501: LD_INT 26
17503: PUSH
17504: LD_INT 27
17506: PUSH
17507: LD_INT 28
17509: PUSH
17510: LD_INT 30
17512: PUSH
17513: LD_INT 31
17515: PUSH
17516: LD_INT 32
17518: PUSH
17519: LD_INT 33
17521: PUSH
17522: LD_INT 34
17524: PUSH
17525: LD_INT 36
17527: PUSH
17528: EMPTY
17529: LIST
17530: LIST
17531: LIST
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: LIST
17540: LIST
17541: LIST
17542: LIST
17543: LIST
17544: LIST
17545: LIST
17546: LIST
17547: LIST
17548: LIST
17549: LIST
17550: LIST
17551: LIST
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: LIST
17558: LIST
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: PUSH
17564: LD_INT 101
17566: PUSH
17567: LD_INT 102
17569: PUSH
17570: LD_INT 103
17572: PUSH
17573: LD_INT 104
17575: PUSH
17576: LD_INT 105
17578: PUSH
17579: LD_INT 106
17581: PUSH
17582: LD_INT 107
17584: PUSH
17585: LD_INT 108
17587: PUSH
17588: LD_INT 109
17590: PUSH
17591: LD_INT 110
17593: PUSH
17594: LD_INT 111
17596: PUSH
17597: LD_INT 112
17599: PUSH
17600: LD_INT 113
17602: PUSH
17603: LD_INT 114
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: LIST
17610: LIST
17611: LIST
17612: LIST
17613: LIST
17614: LIST
17615: LIST
17616: LIST
17617: LIST
17618: LIST
17619: LIST
17620: LIST
17621: PUSH
17622: EMPTY
17623: LIST
17624: LIST
17625: ST_TO_ADDR
17626: GO 18997
17628: LD_INT 13
17630: DOUBLE
17631: EQUAL
17632: IFTRUE 17636
17634: GO 17832
17636: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
17637: LD_ADDR_VAR 0 1
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: LD_INT 2
17647: PUSH
17648: LD_INT 3
17650: PUSH
17651: LD_INT 4
17653: PUSH
17654: LD_INT 5
17656: PUSH
17657: LD_INT 8
17659: PUSH
17660: LD_INT 9
17662: PUSH
17663: LD_INT 10
17665: PUSH
17666: LD_INT 11
17668: PUSH
17669: LD_INT 12
17671: PUSH
17672: LD_INT 14
17674: PUSH
17675: LD_INT 15
17677: PUSH
17678: LD_INT 16
17680: PUSH
17681: LD_INT 17
17683: PUSH
17684: LD_INT 18
17686: PUSH
17687: LD_INT 19
17689: PUSH
17690: LD_INT 20
17692: PUSH
17693: LD_INT 21
17695: PUSH
17696: LD_INT 22
17698: PUSH
17699: LD_INT 23
17701: PUSH
17702: LD_INT 24
17704: PUSH
17705: LD_INT 25
17707: PUSH
17708: LD_INT 26
17710: PUSH
17711: LD_INT 27
17713: PUSH
17714: LD_INT 28
17716: PUSH
17717: LD_INT 30
17719: PUSH
17720: LD_INT 31
17722: PUSH
17723: LD_INT 32
17725: PUSH
17726: LD_INT 33
17728: PUSH
17729: LD_INT 34
17731: PUSH
17732: LD_INT 36
17734: PUSH
17735: EMPTY
17736: LIST
17737: LIST
17738: LIST
17739: LIST
17740: LIST
17741: LIST
17742: LIST
17743: LIST
17744: LIST
17745: LIST
17746: LIST
17747: LIST
17748: LIST
17749: LIST
17750: LIST
17751: LIST
17752: LIST
17753: LIST
17754: LIST
17755: LIST
17756: LIST
17757: LIST
17758: LIST
17759: LIST
17760: LIST
17761: LIST
17762: LIST
17763: LIST
17764: LIST
17765: LIST
17766: LIST
17767: PUSH
17768: LD_INT 101
17770: PUSH
17771: LD_INT 102
17773: PUSH
17774: LD_INT 103
17776: PUSH
17777: LD_INT 104
17779: PUSH
17780: LD_INT 105
17782: PUSH
17783: LD_INT 106
17785: PUSH
17786: LD_INT 107
17788: PUSH
17789: LD_INT 108
17791: PUSH
17792: LD_INT 109
17794: PUSH
17795: LD_INT 110
17797: PUSH
17798: LD_INT 111
17800: PUSH
17801: LD_INT 112
17803: PUSH
17804: LD_INT 113
17806: PUSH
17807: LD_INT 114
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: LIST
17815: LIST
17816: LIST
17817: LIST
17818: LIST
17819: LIST
17820: LIST
17821: LIST
17822: LIST
17823: LIST
17824: LIST
17825: PUSH
17826: EMPTY
17827: LIST
17828: LIST
17829: ST_TO_ADDR
17830: GO 18997
17832: LD_INT 14
17834: DOUBLE
17835: EQUAL
17836: IFTRUE 17840
17838: GO 18052
17840: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
17841: LD_ADDR_VAR 0 1
17845: PUSH
17846: LD_INT 1
17848: PUSH
17849: LD_INT 2
17851: PUSH
17852: LD_INT 3
17854: PUSH
17855: LD_INT 4
17857: PUSH
17858: LD_INT 5
17860: PUSH
17861: LD_INT 6
17863: PUSH
17864: LD_INT 7
17866: PUSH
17867: LD_INT 8
17869: PUSH
17870: LD_INT 9
17872: PUSH
17873: LD_INT 10
17875: PUSH
17876: LD_INT 11
17878: PUSH
17879: LD_INT 12
17881: PUSH
17882: LD_INT 13
17884: PUSH
17885: LD_INT 14
17887: PUSH
17888: LD_INT 15
17890: PUSH
17891: LD_INT 16
17893: PUSH
17894: LD_INT 17
17896: PUSH
17897: LD_INT 18
17899: PUSH
17900: LD_INT 19
17902: PUSH
17903: LD_INT 20
17905: PUSH
17906: LD_INT 21
17908: PUSH
17909: LD_INT 22
17911: PUSH
17912: LD_INT 23
17914: PUSH
17915: LD_INT 24
17917: PUSH
17918: LD_INT 25
17920: PUSH
17921: LD_INT 26
17923: PUSH
17924: LD_INT 27
17926: PUSH
17927: LD_INT 28
17929: PUSH
17930: LD_INT 29
17932: PUSH
17933: LD_INT 30
17935: PUSH
17936: LD_INT 31
17938: PUSH
17939: LD_INT 32
17941: PUSH
17942: LD_INT 33
17944: PUSH
17945: LD_INT 34
17947: PUSH
17948: LD_INT 36
17950: PUSH
17951: EMPTY
17952: LIST
17953: LIST
17954: LIST
17955: LIST
17956: LIST
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: LIST
17964: LIST
17965: LIST
17966: LIST
17967: LIST
17968: LIST
17969: LIST
17970: LIST
17971: LIST
17972: LIST
17973: LIST
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 101
17990: PUSH
17991: LD_INT 102
17993: PUSH
17994: LD_INT 103
17996: PUSH
17997: LD_INT 104
17999: PUSH
18000: LD_INT 105
18002: PUSH
18003: LD_INT 106
18005: PUSH
18006: LD_INT 107
18008: PUSH
18009: LD_INT 108
18011: PUSH
18012: LD_INT 109
18014: PUSH
18015: LD_INT 110
18017: PUSH
18018: LD_INT 111
18020: PUSH
18021: LD_INT 112
18023: PUSH
18024: LD_INT 113
18026: PUSH
18027: LD_INT 114
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: LIST
18034: LIST
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: LIST
18040: LIST
18041: LIST
18042: LIST
18043: LIST
18044: LIST
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: ST_TO_ADDR
18050: GO 18997
18052: LD_INT 15
18054: DOUBLE
18055: EQUAL
18056: IFTRUE 18060
18058: GO 18272
18060: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
18061: LD_ADDR_VAR 0 1
18065: PUSH
18066: LD_INT 1
18068: PUSH
18069: LD_INT 2
18071: PUSH
18072: LD_INT 3
18074: PUSH
18075: LD_INT 4
18077: PUSH
18078: LD_INT 5
18080: PUSH
18081: LD_INT 6
18083: PUSH
18084: LD_INT 7
18086: PUSH
18087: LD_INT 8
18089: PUSH
18090: LD_INT 9
18092: PUSH
18093: LD_INT 10
18095: PUSH
18096: LD_INT 11
18098: PUSH
18099: LD_INT 12
18101: PUSH
18102: LD_INT 13
18104: PUSH
18105: LD_INT 14
18107: PUSH
18108: LD_INT 15
18110: PUSH
18111: LD_INT 16
18113: PUSH
18114: LD_INT 17
18116: PUSH
18117: LD_INT 18
18119: PUSH
18120: LD_INT 19
18122: PUSH
18123: LD_INT 20
18125: PUSH
18126: LD_INT 21
18128: PUSH
18129: LD_INT 22
18131: PUSH
18132: LD_INT 23
18134: PUSH
18135: LD_INT 24
18137: PUSH
18138: LD_INT 25
18140: PUSH
18141: LD_INT 26
18143: PUSH
18144: LD_INT 27
18146: PUSH
18147: LD_INT 28
18149: PUSH
18150: LD_INT 29
18152: PUSH
18153: LD_INT 30
18155: PUSH
18156: LD_INT 31
18158: PUSH
18159: LD_INT 32
18161: PUSH
18162: LD_INT 33
18164: PUSH
18165: LD_INT 34
18167: PUSH
18168: LD_INT 36
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: LIST
18175: LIST
18176: LIST
18177: LIST
18178: LIST
18179: LIST
18180: LIST
18181: LIST
18182: LIST
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: LIST
18203: LIST
18204: LIST
18205: LIST
18206: LIST
18207: PUSH
18208: LD_INT 101
18210: PUSH
18211: LD_INT 102
18213: PUSH
18214: LD_INT 103
18216: PUSH
18217: LD_INT 104
18219: PUSH
18220: LD_INT 105
18222: PUSH
18223: LD_INT 106
18225: PUSH
18226: LD_INT 107
18228: PUSH
18229: LD_INT 108
18231: PUSH
18232: LD_INT 109
18234: PUSH
18235: LD_INT 110
18237: PUSH
18238: LD_INT 111
18240: PUSH
18241: LD_INT 112
18243: PUSH
18244: LD_INT 113
18246: PUSH
18247: LD_INT 114
18249: PUSH
18250: EMPTY
18251: LIST
18252: LIST
18253: LIST
18254: LIST
18255: LIST
18256: LIST
18257: LIST
18258: LIST
18259: LIST
18260: LIST
18261: LIST
18262: LIST
18263: LIST
18264: LIST
18265: PUSH
18266: EMPTY
18267: LIST
18268: LIST
18269: ST_TO_ADDR
18270: GO 18997
18272: LD_INT 16
18274: DOUBLE
18275: EQUAL
18276: IFTRUE 18280
18278: GO 18404
18280: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
18281: LD_ADDR_VAR 0 1
18285: PUSH
18286: LD_INT 2
18288: PUSH
18289: LD_INT 4
18291: PUSH
18292: LD_INT 5
18294: PUSH
18295: LD_INT 7
18297: PUSH
18298: LD_INT 11
18300: PUSH
18301: LD_INT 12
18303: PUSH
18304: LD_INT 15
18306: PUSH
18307: LD_INT 16
18309: PUSH
18310: LD_INT 20
18312: PUSH
18313: LD_INT 21
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_INT 23
18321: PUSH
18322: LD_INT 25
18324: PUSH
18325: LD_INT 26
18327: PUSH
18328: LD_INT 30
18330: PUSH
18331: LD_INT 31
18333: PUSH
18334: LD_INT 32
18336: PUSH
18337: LD_INT 33
18339: PUSH
18340: LD_INT 34
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 101
18366: PUSH
18367: LD_INT 102
18369: PUSH
18370: LD_INT 103
18372: PUSH
18373: LD_INT 106
18375: PUSH
18376: LD_INT 108
18378: PUSH
18379: LD_INT 112
18381: PUSH
18382: LD_INT 113
18384: PUSH
18385: LD_INT 114
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: LIST
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: ST_TO_ADDR
18402: GO 18997
18404: LD_INT 17
18406: DOUBLE
18407: EQUAL
18408: IFTRUE 18412
18410: GO 18624
18412: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
18413: LD_ADDR_VAR 0 1
18417: PUSH
18418: LD_INT 1
18420: PUSH
18421: LD_INT 2
18423: PUSH
18424: LD_INT 3
18426: PUSH
18427: LD_INT 4
18429: PUSH
18430: LD_INT 5
18432: PUSH
18433: LD_INT 6
18435: PUSH
18436: LD_INT 7
18438: PUSH
18439: LD_INT 8
18441: PUSH
18442: LD_INT 9
18444: PUSH
18445: LD_INT 10
18447: PUSH
18448: LD_INT 11
18450: PUSH
18451: LD_INT 12
18453: PUSH
18454: LD_INT 13
18456: PUSH
18457: LD_INT 14
18459: PUSH
18460: LD_INT 15
18462: PUSH
18463: LD_INT 16
18465: PUSH
18466: LD_INT 17
18468: PUSH
18469: LD_INT 18
18471: PUSH
18472: LD_INT 19
18474: PUSH
18475: LD_INT 20
18477: PUSH
18478: LD_INT 21
18480: PUSH
18481: LD_INT 22
18483: PUSH
18484: LD_INT 23
18486: PUSH
18487: LD_INT 24
18489: PUSH
18490: LD_INT 25
18492: PUSH
18493: LD_INT 26
18495: PUSH
18496: LD_INT 27
18498: PUSH
18499: LD_INT 28
18501: PUSH
18502: LD_INT 29
18504: PUSH
18505: LD_INT 30
18507: PUSH
18508: LD_INT 31
18510: PUSH
18511: LD_INT 32
18513: PUSH
18514: LD_INT 33
18516: PUSH
18517: LD_INT 34
18519: PUSH
18520: LD_INT 36
18522: PUSH
18523: EMPTY
18524: LIST
18525: LIST
18526: LIST
18527: LIST
18528: LIST
18529: LIST
18530: LIST
18531: LIST
18532: LIST
18533: LIST
18534: LIST
18535: LIST
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: PUSH
18560: LD_INT 101
18562: PUSH
18563: LD_INT 102
18565: PUSH
18566: LD_INT 103
18568: PUSH
18569: LD_INT 104
18571: PUSH
18572: LD_INT 105
18574: PUSH
18575: LD_INT 106
18577: PUSH
18578: LD_INT 107
18580: PUSH
18581: LD_INT 108
18583: PUSH
18584: LD_INT 109
18586: PUSH
18587: LD_INT 110
18589: PUSH
18590: LD_INT 111
18592: PUSH
18593: LD_INT 112
18595: PUSH
18596: LD_INT 113
18598: PUSH
18599: LD_INT 114
18601: PUSH
18602: EMPTY
18603: LIST
18604: LIST
18605: LIST
18606: LIST
18607: LIST
18608: LIST
18609: LIST
18610: LIST
18611: LIST
18612: LIST
18613: LIST
18614: LIST
18615: LIST
18616: LIST
18617: PUSH
18618: EMPTY
18619: LIST
18620: LIST
18621: ST_TO_ADDR
18622: GO 18997
18624: LD_INT 18
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18768
18632: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
18633: LD_ADDR_VAR 0 1
18637: PUSH
18638: LD_INT 2
18640: PUSH
18641: LD_INT 4
18643: PUSH
18644: LD_INT 5
18646: PUSH
18647: LD_INT 7
18649: PUSH
18650: LD_INT 11
18652: PUSH
18653: LD_INT 12
18655: PUSH
18656: LD_INT 15
18658: PUSH
18659: LD_INT 16
18661: PUSH
18662: LD_INT 20
18664: PUSH
18665: LD_INT 21
18667: PUSH
18668: LD_INT 22
18670: PUSH
18671: LD_INT 23
18673: PUSH
18674: LD_INT 25
18676: PUSH
18677: LD_INT 26
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 31
18685: PUSH
18686: LD_INT 32
18688: PUSH
18689: LD_INT 33
18691: PUSH
18692: LD_INT 34
18694: PUSH
18695: LD_INT 35
18697: PUSH
18698: LD_INT 36
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: LIST
18705: LIST
18706: LIST
18707: LIST
18708: LIST
18709: LIST
18710: LIST
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: LIST
18721: LIST
18722: LIST
18723: PUSH
18724: LD_INT 101
18726: PUSH
18727: LD_INT 102
18729: PUSH
18730: LD_INT 103
18732: PUSH
18733: LD_INT 106
18735: PUSH
18736: LD_INT 108
18738: PUSH
18739: LD_INT 112
18741: PUSH
18742: LD_INT 113
18744: PUSH
18745: LD_INT 114
18747: PUSH
18748: LD_INT 115
18750: PUSH
18751: EMPTY
18752: LIST
18753: LIST
18754: LIST
18755: LIST
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: LIST
18761: PUSH
18762: EMPTY
18763: LIST
18764: LIST
18765: ST_TO_ADDR
18766: GO 18997
18768: LD_INT 19
18770: DOUBLE
18771: EQUAL
18772: IFTRUE 18776
18774: GO 18996
18776: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
18777: LD_ADDR_VAR 0 1
18781: PUSH
18782: LD_INT 1
18784: PUSH
18785: LD_INT 2
18787: PUSH
18788: LD_INT 3
18790: PUSH
18791: LD_INT 4
18793: PUSH
18794: LD_INT 5
18796: PUSH
18797: LD_INT 6
18799: PUSH
18800: LD_INT 7
18802: PUSH
18803: LD_INT 8
18805: PUSH
18806: LD_INT 9
18808: PUSH
18809: LD_INT 10
18811: PUSH
18812: LD_INT 11
18814: PUSH
18815: LD_INT 12
18817: PUSH
18818: LD_INT 13
18820: PUSH
18821: LD_INT 14
18823: PUSH
18824: LD_INT 15
18826: PUSH
18827: LD_INT 16
18829: PUSH
18830: LD_INT 17
18832: PUSH
18833: LD_INT 18
18835: PUSH
18836: LD_INT 19
18838: PUSH
18839: LD_INT 20
18841: PUSH
18842: LD_INT 21
18844: PUSH
18845: LD_INT 22
18847: PUSH
18848: LD_INT 23
18850: PUSH
18851: LD_INT 24
18853: PUSH
18854: LD_INT 25
18856: PUSH
18857: LD_INT 26
18859: PUSH
18860: LD_INT 27
18862: PUSH
18863: LD_INT 28
18865: PUSH
18866: LD_INT 29
18868: PUSH
18869: LD_INT 30
18871: PUSH
18872: LD_INT 31
18874: PUSH
18875: LD_INT 32
18877: PUSH
18878: LD_INT 33
18880: PUSH
18881: LD_INT 34
18883: PUSH
18884: LD_INT 35
18886: PUSH
18887: LD_INT 36
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: LIST
18896: LIST
18897: LIST
18898: LIST
18899: LIST
18900: LIST
18901: LIST
18902: LIST
18903: LIST
18904: LIST
18905: LIST
18906: LIST
18907: LIST
18908: LIST
18909: LIST
18910: LIST
18911: LIST
18912: LIST
18913: LIST
18914: LIST
18915: LIST
18916: LIST
18917: LIST
18918: LIST
18919: LIST
18920: LIST
18921: LIST
18922: LIST
18923: LIST
18924: LIST
18925: LIST
18926: LIST
18927: PUSH
18928: LD_INT 101
18930: PUSH
18931: LD_INT 102
18933: PUSH
18934: LD_INT 103
18936: PUSH
18937: LD_INT 104
18939: PUSH
18940: LD_INT 105
18942: PUSH
18943: LD_INT 106
18945: PUSH
18946: LD_INT 107
18948: PUSH
18949: LD_INT 108
18951: PUSH
18952: LD_INT 109
18954: PUSH
18955: LD_INT 110
18957: PUSH
18958: LD_INT 111
18960: PUSH
18961: LD_INT 112
18963: PUSH
18964: LD_INT 113
18966: PUSH
18967: LD_INT 114
18969: PUSH
18970: LD_INT 115
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: LIST
18977: LIST
18978: LIST
18979: LIST
18980: LIST
18981: LIST
18982: LIST
18983: LIST
18984: LIST
18985: LIST
18986: LIST
18987: LIST
18988: LIST
18989: PUSH
18990: EMPTY
18991: LIST
18992: LIST
18993: ST_TO_ADDR
18994: GO 18997
18996: POP
// end else
18997: GO 19216
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
18999: LD_ADDR_VAR 0 1
19003: PUSH
19004: LD_INT 1
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: LD_INT 3
19012: PUSH
19013: LD_INT 4
19015: PUSH
19016: LD_INT 5
19018: PUSH
19019: LD_INT 6
19021: PUSH
19022: LD_INT 7
19024: PUSH
19025: LD_INT 8
19027: PUSH
19028: LD_INT 9
19030: PUSH
19031: LD_INT 10
19033: PUSH
19034: LD_INT 11
19036: PUSH
19037: LD_INT 12
19039: PUSH
19040: LD_INT 13
19042: PUSH
19043: LD_INT 14
19045: PUSH
19046: LD_INT 15
19048: PUSH
19049: LD_INT 16
19051: PUSH
19052: LD_INT 17
19054: PUSH
19055: LD_INT 18
19057: PUSH
19058: LD_INT 19
19060: PUSH
19061: LD_INT 20
19063: PUSH
19064: LD_INT 21
19066: PUSH
19067: LD_INT 22
19069: PUSH
19070: LD_INT 23
19072: PUSH
19073: LD_INT 24
19075: PUSH
19076: LD_INT 25
19078: PUSH
19079: LD_INT 26
19081: PUSH
19082: LD_INT 27
19084: PUSH
19085: LD_INT 28
19087: PUSH
19088: LD_INT 29
19090: PUSH
19091: LD_INT 30
19093: PUSH
19094: LD_INT 31
19096: PUSH
19097: LD_INT 32
19099: PUSH
19100: LD_INT 33
19102: PUSH
19103: LD_INT 34
19105: PUSH
19106: LD_INT 35
19108: PUSH
19109: LD_INT 36
19111: PUSH
19112: EMPTY
19113: LIST
19114: LIST
19115: LIST
19116: LIST
19117: LIST
19118: LIST
19119: LIST
19120: LIST
19121: LIST
19122: LIST
19123: LIST
19124: LIST
19125: LIST
19126: LIST
19127: LIST
19128: LIST
19129: LIST
19130: LIST
19131: LIST
19132: LIST
19133: LIST
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: LIST
19139: LIST
19140: LIST
19141: LIST
19142: LIST
19143: LIST
19144: LIST
19145: LIST
19146: LIST
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 101
19152: PUSH
19153: LD_INT 102
19155: PUSH
19156: LD_INT 103
19158: PUSH
19159: LD_INT 104
19161: PUSH
19162: LD_INT 105
19164: PUSH
19165: LD_INT 106
19167: PUSH
19168: LD_INT 107
19170: PUSH
19171: LD_INT 108
19173: PUSH
19174: LD_INT 109
19176: PUSH
19177: LD_INT 110
19179: PUSH
19180: LD_INT 111
19182: PUSH
19183: LD_INT 112
19185: PUSH
19186: LD_INT 113
19188: PUSH
19189: LD_INT 114
19191: PUSH
19192: LD_INT 115
19194: PUSH
19195: EMPTY
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: LIST
19209: LIST
19210: LIST
19211: PUSH
19212: EMPTY
19213: LIST
19214: LIST
19215: ST_TO_ADDR
// if result then
19216: LD_VAR 0 1
19220: IFFALSE 19509
// begin normal :=  ;
19222: LD_ADDR_VAR 0 3
19226: PUSH
19227: LD_STRING 
19229: ST_TO_ADDR
// hardcore :=  ;
19230: LD_ADDR_VAR 0 4
19234: PUSH
19235: LD_STRING 
19237: ST_TO_ADDR
// for i = 1 to normalCounter do
19238: LD_ADDR_VAR 0 5
19242: PUSH
19243: DOUBLE
19244: LD_INT 1
19246: DEC
19247: ST_TO_ADDR
19248: LD_EXP 58
19252: PUSH
19253: FOR_TO
19254: IFFALSE 19355
// begin tmp := 0 ;
19256: LD_ADDR_VAR 0 2
19260: PUSH
19261: LD_STRING 0
19263: ST_TO_ADDR
// if result [ 1 ] then
19264: LD_VAR 0 1
19268: PUSH
19269: LD_INT 1
19271: ARRAY
19272: IFFALSE 19337
// if result [ 1 ] [ 1 ] = i then
19274: LD_VAR 0 1
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PUSH
19283: LD_INT 1
19285: ARRAY
19286: PUSH
19287: LD_VAR 0 5
19291: EQUAL
19292: IFFALSE 19337
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
19294: LD_ADDR_VAR 0 1
19298: PUSH
19299: LD_VAR 0 1
19303: PPUSH
19304: LD_INT 1
19306: PPUSH
19307: LD_VAR 0 1
19311: PUSH
19312: LD_INT 1
19314: ARRAY
19315: PPUSH
19316: LD_INT 1
19318: PPUSH
19319: CALL_OW 3
19323: PPUSH
19324: CALL_OW 1
19328: ST_TO_ADDR
// tmp := 1 ;
19329: LD_ADDR_VAR 0 2
19333: PUSH
19334: LD_STRING 1
19336: ST_TO_ADDR
// end ; normal := normal & tmp ;
19337: LD_ADDR_VAR 0 3
19341: PUSH
19342: LD_VAR 0 3
19346: PUSH
19347: LD_VAR 0 2
19351: STR
19352: ST_TO_ADDR
// end ;
19353: GO 19253
19355: POP
19356: POP
// for i = 1 to hardcoreCounter do
19357: LD_ADDR_VAR 0 5
19361: PUSH
19362: DOUBLE
19363: LD_INT 1
19365: DEC
19366: ST_TO_ADDR
19367: LD_EXP 59
19371: PUSH
19372: FOR_TO
19373: IFFALSE 19478
// begin tmp := 0 ;
19375: LD_ADDR_VAR 0 2
19379: PUSH
19380: LD_STRING 0
19382: ST_TO_ADDR
// if result [ 2 ] then
19383: LD_VAR 0 1
19387: PUSH
19388: LD_INT 2
19390: ARRAY
19391: IFFALSE 19460
// if result [ 2 ] [ 1 ] = 100 + i then
19393: LD_VAR 0 1
19397: PUSH
19398: LD_INT 2
19400: ARRAY
19401: PUSH
19402: LD_INT 1
19404: ARRAY
19405: PUSH
19406: LD_INT 100
19408: PUSH
19409: LD_VAR 0 5
19413: PLUS
19414: EQUAL
19415: IFFALSE 19460
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
19417: LD_ADDR_VAR 0 1
19421: PUSH
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_INT 2
19429: PPUSH
19430: LD_VAR 0 1
19434: PUSH
19435: LD_INT 2
19437: ARRAY
19438: PPUSH
19439: LD_INT 1
19441: PPUSH
19442: CALL_OW 3
19446: PPUSH
19447: CALL_OW 1
19451: ST_TO_ADDR
// tmp := 1 ;
19452: LD_ADDR_VAR 0 2
19456: PUSH
19457: LD_STRING 1
19459: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
19460: LD_ADDR_VAR 0 4
19464: PUSH
19465: LD_VAR 0 4
19469: PUSH
19470: LD_VAR 0 2
19474: STR
19475: ST_TO_ADDR
// end ;
19476: GO 19372
19478: POP
19479: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
19480: LD_STRING getStreamItemsFromMission("
19482: PUSH
19483: LD_VAR 0 3
19487: STR
19488: PUSH
19489: LD_STRING ","
19491: STR
19492: PUSH
19493: LD_VAR 0 4
19497: STR
19498: PUSH
19499: LD_STRING ")
19501: STR
19502: PPUSH
19503: CALL_OW 559
// end else
19507: GO 19516
// ToLua ( getStreamItemsFromMission("","") ) ;
19509: LD_STRING getStreamItemsFromMission("","")
19511: PPUSH
19512: CALL_OW 559
// end ;
19516: LD_VAR 0 1
19520: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
19521: LD_EXP 57
19525: PUSH
19526: LD_EXP 62
19530: AND
19531: IFFALSE 19655
19533: GO 19535
19535: DISABLE
19536: LD_INT 0
19538: PPUSH
19539: PPUSH
// begin enable ;
19540: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
19541: LD_ADDR_VAR 0 2
19545: PUSH
19546: LD_INT 22
19548: PUSH
19549: LD_OWVAR 2
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 2
19560: PUSH
19561: LD_INT 34
19563: PUSH
19564: LD_INT 7
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: LD_INT 34
19573: PUSH
19574: LD_INT 45
19576: PUSH
19577: EMPTY
19578: LIST
19579: LIST
19580: PUSH
19581: LD_INT 34
19583: PUSH
19584: LD_INT 28
19586: PUSH
19587: EMPTY
19588: LIST
19589: LIST
19590: PUSH
19591: LD_INT 34
19593: PUSH
19594: LD_INT 47
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: PUSH
19601: EMPTY
19602: LIST
19603: LIST
19604: LIST
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PPUSH
19612: CALL_OW 69
19616: ST_TO_ADDR
// if not tmp then
19617: LD_VAR 0 2
19621: NOT
19622: IFFALSE 19626
// exit ;
19624: GO 19655
// for i in tmp do
19626: LD_ADDR_VAR 0 1
19630: PUSH
19631: LD_VAR 0 2
19635: PUSH
19636: FOR_IN
19637: IFFALSE 19653
// begin SetLives ( i , 0 ) ;
19639: LD_VAR 0 1
19643: PPUSH
19644: LD_INT 0
19646: PPUSH
19647: CALL_OW 234
// end ;
19651: GO 19636
19653: POP
19654: POP
// end ;
19655: PPOPN 2
19657: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
19658: LD_EXP 57
19662: PUSH
19663: LD_EXP 63
19667: AND
19668: IFFALSE 19752
19670: GO 19672
19672: DISABLE
19673: LD_INT 0
19675: PPUSH
19676: PPUSH
// begin enable ;
19677: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
19678: LD_ADDR_VAR 0 2
19682: PUSH
19683: LD_INT 22
19685: PUSH
19686: LD_OWVAR 2
19690: PUSH
19691: EMPTY
19692: LIST
19693: LIST
19694: PUSH
19695: LD_INT 32
19697: PUSH
19698: LD_INT 3
19700: PUSH
19701: EMPTY
19702: LIST
19703: LIST
19704: PUSH
19705: EMPTY
19706: LIST
19707: LIST
19708: PPUSH
19709: CALL_OW 69
19713: ST_TO_ADDR
// if not tmp then
19714: LD_VAR 0 2
19718: NOT
19719: IFFALSE 19723
// exit ;
19721: GO 19752
// for i in tmp do
19723: LD_ADDR_VAR 0 1
19727: PUSH
19728: LD_VAR 0 2
19732: PUSH
19733: FOR_IN
19734: IFFALSE 19750
// begin SetLives ( i , 0 ) ;
19736: LD_VAR 0 1
19740: PPUSH
19741: LD_INT 0
19743: PPUSH
19744: CALL_OW 234
// end ;
19748: GO 19733
19750: POP
19751: POP
// end ;
19752: PPOPN 2
19754: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
19755: LD_EXP 57
19759: PUSH
19760: LD_EXP 60
19764: AND
19765: IFFALSE 19858
19767: GO 19769
19769: DISABLE
19770: LD_INT 0
19772: PPUSH
// begin enable ;
19773: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
19774: LD_ADDR_VAR 0 1
19778: PUSH
19779: LD_INT 22
19781: PUSH
19782: LD_OWVAR 2
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: LD_INT 25
19796: PUSH
19797: LD_INT 5
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: LD_INT 25
19806: PUSH
19807: LD_INT 9
19809: PUSH
19810: EMPTY
19811: LIST
19812: LIST
19813: PUSH
19814: LD_INT 25
19816: PUSH
19817: LD_INT 8
19819: PUSH
19820: EMPTY
19821: LIST
19822: LIST
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: LIST
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PPUSH
19834: CALL_OW 69
19838: PUSH
19839: FOR_IN
19840: IFFALSE 19856
// begin SetClass ( i , 1 ) ;
19842: LD_VAR 0 1
19846: PPUSH
19847: LD_INT 1
19849: PPUSH
19850: CALL_OW 336
// end ;
19854: GO 19839
19856: POP
19857: POP
// end ;
19858: PPOPN 1
19860: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
19861: LD_EXP 57
19865: PUSH
19866: LD_EXP 61
19870: AND
19871: PUSH
19872: LD_OWVAR 65
19876: PUSH
19877: LD_INT 7
19879: LESS
19880: AND
19881: IFFALSE 19895
19883: GO 19885
19885: DISABLE
// begin enable ;
19886: ENABLE
// game_speed := 7 ;
19887: LD_ADDR_OWVAR 65
19891: PUSH
19892: LD_INT 7
19894: ST_TO_ADDR
// end ;
19895: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
19896: LD_EXP 57
19900: PUSH
19901: LD_EXP 64
19905: AND
19906: IFFALSE 20108
19908: GO 19910
19910: DISABLE
19911: LD_INT 0
19913: PPUSH
19914: PPUSH
19915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19916: LD_ADDR_VAR 0 3
19920: PUSH
19921: LD_INT 81
19923: PUSH
19924: LD_OWVAR 2
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: PUSH
19933: LD_INT 21
19935: PUSH
19936: LD_INT 1
19938: PUSH
19939: EMPTY
19940: LIST
19941: LIST
19942: PUSH
19943: EMPTY
19944: LIST
19945: LIST
19946: PPUSH
19947: CALL_OW 69
19951: ST_TO_ADDR
// if not tmp then
19952: LD_VAR 0 3
19956: NOT
19957: IFFALSE 19961
// exit ;
19959: GO 20108
// if tmp > 5 then
19961: LD_VAR 0 3
19965: PUSH
19966: LD_INT 5
19968: GREATER
19969: IFFALSE 19981
// k := 5 else
19971: LD_ADDR_VAR 0 2
19975: PUSH
19976: LD_INT 5
19978: ST_TO_ADDR
19979: GO 19991
// k := tmp ;
19981: LD_ADDR_VAR 0 2
19985: PUSH
19986: LD_VAR 0 3
19990: ST_TO_ADDR
// for i := 1 to k do
19991: LD_ADDR_VAR 0 1
19995: PUSH
19996: DOUBLE
19997: LD_INT 1
19999: DEC
20000: ST_TO_ADDR
20001: LD_VAR 0 2
20005: PUSH
20006: FOR_TO
20007: IFFALSE 20106
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
20009: LD_VAR 0 3
20013: PUSH
20014: LD_VAR 0 1
20018: ARRAY
20019: PPUSH
20020: LD_VAR 0 1
20024: PUSH
20025: LD_INT 4
20027: MOD
20028: PUSH
20029: LD_INT 1
20031: PLUS
20032: PPUSH
20033: CALL_OW 259
20037: PUSH
20038: LD_INT 10
20040: LESS
20041: IFFALSE 20104
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
20043: LD_VAR 0 3
20047: PUSH
20048: LD_VAR 0 1
20052: ARRAY
20053: PPUSH
20054: LD_VAR 0 1
20058: PUSH
20059: LD_INT 4
20061: MOD
20062: PUSH
20063: LD_INT 1
20065: PLUS
20066: PPUSH
20067: LD_VAR 0 3
20071: PUSH
20072: LD_VAR 0 1
20076: ARRAY
20077: PPUSH
20078: LD_VAR 0 1
20082: PUSH
20083: LD_INT 4
20085: MOD
20086: PUSH
20087: LD_INT 1
20089: PLUS
20090: PPUSH
20091: CALL_OW 259
20095: PUSH
20096: LD_INT 1
20098: PLUS
20099: PPUSH
20100: CALL_OW 237
20104: GO 20006
20106: POP
20107: POP
// end ;
20108: PPOPN 3
20110: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
20111: LD_EXP 57
20115: PUSH
20116: LD_EXP 65
20120: AND
20121: IFFALSE 20141
20123: GO 20125
20125: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
20126: LD_INT 4
20128: PPUSH
20129: LD_OWVAR 2
20133: PPUSH
20134: LD_INT 0
20136: PPUSH
20137: CALL_OW 324
20141: END
// every 0 0$1 trigger StreamModeActive and sShovel do
20142: LD_EXP 57
20146: PUSH
20147: LD_EXP 94
20151: AND
20152: IFFALSE 20172
20154: GO 20156
20156: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
20157: LD_INT 19
20159: PPUSH
20160: LD_OWVAR 2
20164: PPUSH
20165: LD_INT 0
20167: PPUSH
20168: CALL_OW 324
20172: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
20173: LD_EXP 57
20177: PUSH
20178: LD_EXP 66
20182: AND
20183: IFFALSE 20285
20185: GO 20187
20187: DISABLE
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
// begin enable ;
20192: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
20193: LD_ADDR_VAR 0 2
20197: PUSH
20198: LD_INT 22
20200: PUSH
20201: LD_OWVAR 2
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 2
20212: PUSH
20213: LD_INT 34
20215: PUSH
20216: LD_INT 11
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: PUSH
20223: LD_INT 34
20225: PUSH
20226: LD_INT 30
20228: PUSH
20229: EMPTY
20230: LIST
20231: LIST
20232: PUSH
20233: EMPTY
20234: LIST
20235: LIST
20236: LIST
20237: PUSH
20238: EMPTY
20239: LIST
20240: LIST
20241: PPUSH
20242: CALL_OW 69
20246: ST_TO_ADDR
// if not tmp then
20247: LD_VAR 0 2
20251: NOT
20252: IFFALSE 20256
// exit ;
20254: GO 20285
// for i in tmp do
20256: LD_ADDR_VAR 0 1
20260: PUSH
20261: LD_VAR 0 2
20265: PUSH
20266: FOR_IN
20267: IFFALSE 20283
// begin SetLives ( i , 0 ) ;
20269: LD_VAR 0 1
20273: PPUSH
20274: LD_INT 0
20276: PPUSH
20277: CALL_OW 234
// end ;
20281: GO 20266
20283: POP
20284: POP
// end ;
20285: PPOPN 2
20287: END
// every 0 0$1 trigger StreamModeActive and sBunker do
20288: LD_EXP 57
20292: PUSH
20293: LD_EXP 67
20297: AND
20298: IFFALSE 20318
20300: GO 20302
20302: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
20303: LD_INT 32
20305: PPUSH
20306: LD_OWVAR 2
20310: PPUSH
20311: LD_INT 0
20313: PPUSH
20314: CALL_OW 324
20318: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
20319: LD_EXP 57
20323: PUSH
20324: LD_EXP 68
20328: AND
20329: IFFALSE 20510
20331: GO 20333
20333: DISABLE
20334: LD_INT 0
20336: PPUSH
20337: PPUSH
20338: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
20339: LD_ADDR_VAR 0 2
20343: PUSH
20344: LD_INT 22
20346: PUSH
20347: LD_OWVAR 2
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PUSH
20356: LD_INT 33
20358: PUSH
20359: LD_INT 3
20361: PUSH
20362: EMPTY
20363: LIST
20364: LIST
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PPUSH
20370: CALL_OW 69
20374: ST_TO_ADDR
// if not tmp then
20375: LD_VAR 0 2
20379: NOT
20380: IFFALSE 20384
// exit ;
20382: GO 20510
// side := 0 ;
20384: LD_ADDR_VAR 0 3
20388: PUSH
20389: LD_INT 0
20391: ST_TO_ADDR
// for i := 1 to 8 do
20392: LD_ADDR_VAR 0 1
20396: PUSH
20397: DOUBLE
20398: LD_INT 1
20400: DEC
20401: ST_TO_ADDR
20402: LD_INT 8
20404: PUSH
20405: FOR_TO
20406: IFFALSE 20454
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
20408: LD_OWVAR 2
20412: PUSH
20413: LD_VAR 0 1
20417: NONEQUAL
20418: PUSH
20419: LD_OWVAR 2
20423: PPUSH
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 81
20433: PUSH
20434: LD_INT 2
20436: EQUAL
20437: AND
20438: IFFALSE 20452
// begin side := i ;
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_VAR 0 1
20449: ST_TO_ADDR
// break ;
20450: GO 20454
// end ;
20452: GO 20405
20454: POP
20455: POP
// if not side then
20456: LD_VAR 0 3
20460: NOT
20461: IFFALSE 20465
// exit ;
20463: GO 20510
// for i := 1 to tmp do
20465: LD_ADDR_VAR 0 1
20469: PUSH
20470: DOUBLE
20471: LD_INT 1
20473: DEC
20474: ST_TO_ADDR
20475: LD_VAR 0 2
20479: PUSH
20480: FOR_TO
20481: IFFALSE 20508
// if Prob ( 60 ) then
20483: LD_INT 60
20485: PPUSH
20486: CALL_OW 13
20490: IFFALSE 20506
// SetSide ( i , side ) ;
20492: LD_VAR 0 1
20496: PPUSH
20497: LD_VAR 0 3
20501: PPUSH
20502: CALL_OW 235
20506: GO 20480
20508: POP
20509: POP
// end ;
20510: PPOPN 3
20512: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
20513: LD_EXP 57
20517: PUSH
20518: LD_EXP 70
20522: AND
20523: IFFALSE 20642
20525: GO 20527
20527: DISABLE
20528: LD_INT 0
20530: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
20531: LD_ADDR_VAR 0 1
20535: PUSH
20536: LD_INT 22
20538: PUSH
20539: LD_OWVAR 2
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 21
20550: PUSH
20551: LD_INT 1
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: LD_INT 3
20560: PUSH
20561: LD_INT 23
20563: PUSH
20564: LD_INT 0
20566: PUSH
20567: EMPTY
20568: LIST
20569: LIST
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: LIST
20579: PPUSH
20580: CALL_OW 69
20584: PUSH
20585: FOR_IN
20586: IFFALSE 20640
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
20588: LD_VAR 0 1
20592: PPUSH
20593: CALL_OW 257
20597: PUSH
20598: LD_INT 1
20600: PUSH
20601: LD_INT 2
20603: PUSH
20604: LD_INT 3
20606: PUSH
20607: LD_INT 4
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: IN
20616: IFFALSE 20638
// SetClass ( un , rand ( 1 , 4 ) ) ;
20618: LD_VAR 0 1
20622: PPUSH
20623: LD_INT 1
20625: PPUSH
20626: LD_INT 4
20628: PPUSH
20629: CALL_OW 12
20633: PPUSH
20634: CALL_OW 336
20638: GO 20585
20640: POP
20641: POP
// end ;
20642: PPOPN 1
20644: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
20645: LD_EXP 57
20649: PUSH
20650: LD_EXP 69
20654: AND
20655: IFFALSE 20734
20657: GO 20659
20659: DISABLE
20660: LD_INT 0
20662: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20663: LD_ADDR_VAR 0 1
20667: PUSH
20668: LD_INT 22
20670: PUSH
20671: LD_OWVAR 2
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: PUSH
20680: LD_INT 21
20682: PUSH
20683: LD_INT 3
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: PUSH
20690: EMPTY
20691: LIST
20692: LIST
20693: PPUSH
20694: CALL_OW 69
20698: ST_TO_ADDR
// if not tmp then
20699: LD_VAR 0 1
20703: NOT
20704: IFFALSE 20708
// exit ;
20706: GO 20734
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
20708: LD_VAR 0 1
20712: PUSH
20713: LD_INT 1
20715: PPUSH
20716: LD_VAR 0 1
20720: PPUSH
20721: CALL_OW 12
20725: ARRAY
20726: PPUSH
20727: LD_INT 100
20729: PPUSH
20730: CALL_OW 234
// end ;
20734: PPOPN 1
20736: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
20737: LD_EXP 57
20741: PUSH
20742: LD_EXP 71
20746: AND
20747: IFFALSE 20845
20749: GO 20751
20751: DISABLE
20752: LD_INT 0
20754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
20755: LD_ADDR_VAR 0 1
20759: PUSH
20760: LD_INT 22
20762: PUSH
20763: LD_OWVAR 2
20767: PUSH
20768: EMPTY
20769: LIST
20770: LIST
20771: PUSH
20772: LD_INT 21
20774: PUSH
20775: LD_INT 1
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: EMPTY
20783: LIST
20784: LIST
20785: PPUSH
20786: CALL_OW 69
20790: ST_TO_ADDR
// if not tmp then
20791: LD_VAR 0 1
20795: NOT
20796: IFFALSE 20800
// exit ;
20798: GO 20845
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
20800: LD_VAR 0 1
20804: PUSH
20805: LD_INT 1
20807: PPUSH
20808: LD_VAR 0 1
20812: PPUSH
20813: CALL_OW 12
20817: ARRAY
20818: PPUSH
20819: LD_INT 1
20821: PPUSH
20822: LD_INT 4
20824: PPUSH
20825: CALL_OW 12
20829: PPUSH
20830: LD_INT 3000
20832: PPUSH
20833: LD_INT 9000
20835: PPUSH
20836: CALL_OW 12
20840: PPUSH
20841: CALL_OW 492
// end ;
20845: PPOPN 1
20847: END
// every 0 0$1 trigger StreamModeActive and sDepot do
20848: LD_EXP 57
20852: PUSH
20853: LD_EXP 72
20857: AND
20858: IFFALSE 20878
20860: GO 20862
20862: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
20863: LD_INT 1
20865: PPUSH
20866: LD_OWVAR 2
20870: PPUSH
20871: LD_INT 0
20873: PPUSH
20874: CALL_OW 324
20878: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
20879: LD_EXP 57
20883: PUSH
20884: LD_EXP 73
20888: AND
20889: IFFALSE 20972
20891: GO 20893
20893: DISABLE
20894: LD_INT 0
20896: PPUSH
20897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
20898: LD_ADDR_VAR 0 2
20902: PUSH
20903: LD_INT 22
20905: PUSH
20906: LD_OWVAR 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 21
20917: PUSH
20918: LD_INT 3
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PPUSH
20929: CALL_OW 69
20933: ST_TO_ADDR
// if not tmp then
20934: LD_VAR 0 2
20938: NOT
20939: IFFALSE 20943
// exit ;
20941: GO 20972
// for i in tmp do
20943: LD_ADDR_VAR 0 1
20947: PUSH
20948: LD_VAR 0 2
20952: PUSH
20953: FOR_IN
20954: IFFALSE 20970
// SetBLevel ( i , 10 ) ;
20956: LD_VAR 0 1
20960: PPUSH
20961: LD_INT 10
20963: PPUSH
20964: CALL_OW 241
20968: GO 20953
20970: POP
20971: POP
// end ;
20972: PPOPN 2
20974: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
20975: LD_EXP 57
20979: PUSH
20980: LD_EXP 74
20984: AND
20985: IFFALSE 21096
20987: GO 20989
20989: DISABLE
20990: LD_INT 0
20992: PPUSH
20993: PPUSH
20994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
20995: LD_ADDR_VAR 0 3
20999: PUSH
21000: LD_INT 22
21002: PUSH
21003: LD_OWVAR 2
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: PUSH
21012: LD_INT 25
21014: PUSH
21015: LD_INT 1
21017: PUSH
21018: EMPTY
21019: LIST
21020: LIST
21021: PUSH
21022: EMPTY
21023: LIST
21024: LIST
21025: PPUSH
21026: CALL_OW 69
21030: ST_TO_ADDR
// if not tmp then
21031: LD_VAR 0 3
21035: NOT
21036: IFFALSE 21040
// exit ;
21038: GO 21096
// un := tmp [ rand ( 1 , tmp ) ] ;
21040: LD_ADDR_VAR 0 2
21044: PUSH
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 1
21052: PPUSH
21053: LD_VAR 0 3
21057: PPUSH
21058: CALL_OW 12
21062: ARRAY
21063: ST_TO_ADDR
// if Crawls ( un ) then
21064: LD_VAR 0 2
21068: PPUSH
21069: CALL_OW 318
21073: IFFALSE 21084
// ComWalk ( un ) ;
21075: LD_VAR 0 2
21079: PPUSH
21080: CALL_OW 138
// SetClass ( un , class_sniper ) ;
21084: LD_VAR 0 2
21088: PPUSH
21089: LD_INT 5
21091: PPUSH
21092: CALL_OW 336
// end ;
21096: PPOPN 3
21098: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
21099: LD_EXP 57
21103: PUSH
21104: LD_EXP 75
21108: AND
21109: PUSH
21110: LD_OWVAR 67
21114: PUSH
21115: LD_INT 3
21117: LESS
21118: AND
21119: IFFALSE 21138
21121: GO 21123
21123: DISABLE
// Difficulty := Difficulty + 1 ;
21124: LD_ADDR_OWVAR 67
21128: PUSH
21129: LD_OWVAR 67
21133: PUSH
21134: LD_INT 1
21136: PLUS
21137: ST_TO_ADDR
21138: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
21139: LD_EXP 57
21143: PUSH
21144: LD_EXP 76
21148: AND
21149: IFFALSE 21252
21151: GO 21153
21153: DISABLE
21154: LD_INT 0
21156: PPUSH
// begin for i := 1 to 5 do
21157: LD_ADDR_VAR 0 1
21161: PUSH
21162: DOUBLE
21163: LD_INT 1
21165: DEC
21166: ST_TO_ADDR
21167: LD_INT 5
21169: PUSH
21170: FOR_TO
21171: IFFALSE 21250
// begin uc_nation := nation_nature ;
21173: LD_ADDR_OWVAR 21
21177: PUSH
21178: LD_INT 0
21180: ST_TO_ADDR
// uc_side := 0 ;
21181: LD_ADDR_OWVAR 20
21185: PUSH
21186: LD_INT 0
21188: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21189: LD_ADDR_OWVAR 29
21193: PUSH
21194: LD_INT 12
21196: PUSH
21197: LD_INT 12
21199: PUSH
21200: EMPTY
21201: LIST
21202: LIST
21203: ST_TO_ADDR
// hc_agressivity := 20 ;
21204: LD_ADDR_OWVAR 35
21208: PUSH
21209: LD_INT 20
21211: ST_TO_ADDR
// hc_class := class_tiger ;
21212: LD_ADDR_OWVAR 28
21216: PUSH
21217: LD_INT 14
21219: ST_TO_ADDR
// hc_gallery :=  ;
21220: LD_ADDR_OWVAR 33
21224: PUSH
21225: LD_STRING 
21227: ST_TO_ADDR
// hc_name :=  ;
21228: LD_ADDR_OWVAR 26
21232: PUSH
21233: LD_STRING 
21235: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
21236: CALL_OW 44
21240: PPUSH
21241: LD_INT 0
21243: PPUSH
21244: CALL_OW 51
// end ;
21248: GO 21170
21250: POP
21251: POP
// end ;
21252: PPOPN 1
21254: END
// every 0 0$1 trigger StreamModeActive and sBomb do
21255: LD_EXP 57
21259: PUSH
21260: LD_EXP 77
21264: AND
21265: IFFALSE 21274
21267: GO 21269
21269: DISABLE
// StreamSibBomb ;
21270: CALL 21275 0 0
21274: END
// export function StreamSibBomb ; var i , x , y ; begin
21275: LD_INT 0
21277: PPUSH
21278: PPUSH
21279: PPUSH
21280: PPUSH
// result := false ;
21281: LD_ADDR_VAR 0 1
21285: PUSH
21286: LD_INT 0
21288: ST_TO_ADDR
// for i := 1 to 16 do
21289: LD_ADDR_VAR 0 2
21293: PUSH
21294: DOUBLE
21295: LD_INT 1
21297: DEC
21298: ST_TO_ADDR
21299: LD_INT 16
21301: PUSH
21302: FOR_TO
21303: IFFALSE 21502
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21305: LD_ADDR_VAR 0 3
21309: PUSH
21310: LD_INT 10
21312: PUSH
21313: LD_INT 20
21315: PUSH
21316: LD_INT 30
21318: PUSH
21319: LD_INT 40
21321: PUSH
21322: LD_INT 50
21324: PUSH
21325: LD_INT 60
21327: PUSH
21328: LD_INT 70
21330: PUSH
21331: LD_INT 80
21333: PUSH
21334: LD_INT 90
21336: PUSH
21337: LD_INT 100
21339: PUSH
21340: LD_INT 110
21342: PUSH
21343: LD_INT 120
21345: PUSH
21346: LD_INT 130
21348: PUSH
21349: LD_INT 140
21351: PUSH
21352: LD_INT 150
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: LIST
21359: LIST
21360: LIST
21361: LIST
21362: LIST
21363: LIST
21364: LIST
21365: LIST
21366: LIST
21367: LIST
21368: LIST
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 1
21374: PPUSH
21375: LD_INT 15
21377: PPUSH
21378: CALL_OW 12
21382: ARRAY
21383: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
21384: LD_ADDR_VAR 0 4
21388: PUSH
21389: LD_INT 10
21391: PUSH
21392: LD_INT 20
21394: PUSH
21395: LD_INT 30
21397: PUSH
21398: LD_INT 40
21400: PUSH
21401: LD_INT 50
21403: PUSH
21404: LD_INT 60
21406: PUSH
21407: LD_INT 70
21409: PUSH
21410: LD_INT 80
21412: PUSH
21413: LD_INT 90
21415: PUSH
21416: LD_INT 100
21418: PUSH
21419: LD_INT 110
21421: PUSH
21422: LD_INT 120
21424: PUSH
21425: LD_INT 130
21427: PUSH
21428: LD_INT 140
21430: PUSH
21431: LD_INT 150
21433: PUSH
21434: EMPTY
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: PUSH
21451: LD_INT 1
21453: PPUSH
21454: LD_INT 15
21456: PPUSH
21457: CALL_OW 12
21461: ARRAY
21462: ST_TO_ADDR
// if ValidHex ( x , y ) then
21463: LD_VAR 0 3
21467: PPUSH
21468: LD_VAR 0 4
21472: PPUSH
21473: CALL_OW 488
21477: IFFALSE 21500
// begin result := [ x , y ] ;
21479: LD_ADDR_VAR 0 1
21483: PUSH
21484: LD_VAR 0 3
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: ST_TO_ADDR
// break ;
21498: GO 21502
// end ; end ;
21500: GO 21302
21502: POP
21503: POP
// if result then
21504: LD_VAR 0 1
21508: IFFALSE 21568
// begin ToLua ( playSibBomb() ) ;
21510: LD_STRING playSibBomb()
21512: PPUSH
21513: CALL_OW 559
// wait ( 0 0$14 ) ;
21517: LD_INT 490
21519: PPUSH
21520: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
21524: LD_VAR 0 1
21528: PUSH
21529: LD_INT 1
21531: ARRAY
21532: PPUSH
21533: LD_VAR 0 1
21537: PUSH
21538: LD_INT 2
21540: ARRAY
21541: PPUSH
21542: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
21546: LD_VAR 0 1
21550: PUSH
21551: LD_INT 1
21553: ARRAY
21554: PPUSH
21555: LD_VAR 0 1
21559: PUSH
21560: LD_INT 2
21562: ARRAY
21563: PPUSH
21564: CALL_OW 429
// end ; end ;
21568: LD_VAR 0 1
21572: RET
// every 0 0$1 trigger StreamModeActive and sReset do
21573: LD_EXP 57
21577: PUSH
21578: LD_EXP 79
21582: AND
21583: IFFALSE 21595
21585: GO 21587
21587: DISABLE
// YouLost (  ) ;
21588: LD_STRING 
21590: PPUSH
21591: CALL_OW 104
21595: END
// every 0 0$1 trigger StreamModeActive and sFog do
21596: LD_EXP 57
21600: PUSH
21601: LD_EXP 78
21605: AND
21606: IFFALSE 21620
21608: GO 21610
21610: DISABLE
// FogOff ( your_side ) ;
21611: LD_OWVAR 2
21615: PPUSH
21616: CALL_OW 344
21620: END
// every 0 0$1 trigger StreamModeActive and sSun do
21621: LD_EXP 57
21625: PUSH
21626: LD_EXP 80
21630: AND
21631: IFFALSE 21659
21633: GO 21635
21635: DISABLE
// begin solar_recharge_percent := 0 ;
21636: LD_ADDR_OWVAR 79
21640: PUSH
21641: LD_INT 0
21643: ST_TO_ADDR
// wait ( 5 5$00 ) ;
21644: LD_INT 10500
21646: PPUSH
21647: CALL_OW 67
// solar_recharge_percent := 100 ;
21651: LD_ADDR_OWVAR 79
21655: PUSH
21656: LD_INT 100
21658: ST_TO_ADDR
// end ;
21659: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
21660: LD_EXP 57
21664: PUSH
21665: LD_EXP 81
21669: AND
21670: IFFALSE 21909
21672: GO 21674
21674: DISABLE
21675: LD_INT 0
21677: PPUSH
21678: PPUSH
21679: PPUSH
// begin tmp := [ ] ;
21680: LD_ADDR_VAR 0 3
21684: PUSH
21685: EMPTY
21686: ST_TO_ADDR
// for i := 1 to 6 do
21687: LD_ADDR_VAR 0 1
21691: PUSH
21692: DOUBLE
21693: LD_INT 1
21695: DEC
21696: ST_TO_ADDR
21697: LD_INT 6
21699: PUSH
21700: FOR_TO
21701: IFFALSE 21806
// begin uc_nation := nation_nature ;
21703: LD_ADDR_OWVAR 21
21707: PUSH
21708: LD_INT 0
21710: ST_TO_ADDR
// uc_side := 0 ;
21711: LD_ADDR_OWVAR 20
21715: PUSH
21716: LD_INT 0
21718: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
21719: LD_ADDR_OWVAR 29
21723: PUSH
21724: LD_INT 12
21726: PUSH
21727: LD_INT 12
21729: PUSH
21730: EMPTY
21731: LIST
21732: LIST
21733: ST_TO_ADDR
// hc_agressivity := 20 ;
21734: LD_ADDR_OWVAR 35
21738: PUSH
21739: LD_INT 20
21741: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
21742: LD_ADDR_OWVAR 28
21746: PUSH
21747: LD_INT 17
21749: ST_TO_ADDR
// hc_gallery :=  ;
21750: LD_ADDR_OWVAR 33
21754: PUSH
21755: LD_STRING 
21757: ST_TO_ADDR
// hc_name :=  ;
21758: LD_ADDR_OWVAR 26
21762: PUSH
21763: LD_STRING 
21765: ST_TO_ADDR
// un := CreateHuman ;
21766: LD_ADDR_VAR 0 2
21770: PUSH
21771: CALL_OW 44
21775: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
21776: LD_VAR 0 2
21780: PPUSH
21781: LD_INT 1
21783: PPUSH
21784: CALL_OW 51
// tmp := tmp ^ un ;
21788: LD_ADDR_VAR 0 3
21792: PUSH
21793: LD_VAR 0 3
21797: PUSH
21798: LD_VAR 0 2
21802: ADD
21803: ST_TO_ADDR
// end ;
21804: GO 21700
21806: POP
21807: POP
// repeat wait ( 0 0$1 ) ;
21808: LD_INT 35
21810: PPUSH
21811: CALL_OW 67
// for un in tmp do
21815: LD_ADDR_VAR 0 2
21819: PUSH
21820: LD_VAR 0 3
21824: PUSH
21825: FOR_IN
21826: IFFALSE 21900
// begin if IsDead ( un ) then
21828: LD_VAR 0 2
21832: PPUSH
21833: CALL_OW 301
21837: IFFALSE 21857
// begin tmp := tmp diff un ;
21839: LD_ADDR_VAR 0 3
21843: PUSH
21844: LD_VAR 0 3
21848: PUSH
21849: LD_VAR 0 2
21853: DIFF
21854: ST_TO_ADDR
// continue ;
21855: GO 21825
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
21857: LD_VAR 0 2
21861: PPUSH
21862: LD_INT 3
21864: PUSH
21865: LD_INT 22
21867: PUSH
21868: LD_INT 0
21870: PUSH
21871: EMPTY
21872: LIST
21873: LIST
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PPUSH
21879: CALL_OW 69
21883: PPUSH
21884: LD_VAR 0 2
21888: PPUSH
21889: CALL_OW 74
21893: PPUSH
21894: CALL_OW 115
// end ;
21898: GO 21825
21900: POP
21901: POP
// until not tmp ;
21902: LD_VAR 0 3
21906: NOT
21907: IFFALSE 21808
// end ;
21909: PPOPN 3
21911: END
// every 0 0$1 trigger StreamModeActive and sTroll do
21912: LD_EXP 57
21916: PUSH
21917: LD_EXP 82
21921: AND
21922: IFFALSE 21976
21924: GO 21926
21926: DISABLE
// begin ToLua ( displayTroll(); ) ;
21927: LD_STRING displayTroll();
21929: PPUSH
21930: CALL_OW 559
// wait ( 3 3$00 ) ;
21934: LD_INT 6300
21936: PPUSH
21937: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21941: LD_STRING hideTroll();
21943: PPUSH
21944: CALL_OW 559
// wait ( 1 1$00 ) ;
21948: LD_INT 2100
21950: PPUSH
21951: CALL_OW 67
// ToLua ( displayTroll(); ) ;
21955: LD_STRING displayTroll();
21957: PPUSH
21958: CALL_OW 559
// wait ( 1 1$00 ) ;
21962: LD_INT 2100
21964: PPUSH
21965: CALL_OW 67
// ToLua ( hideTroll(); ) ;
21969: LD_STRING hideTroll();
21971: PPUSH
21972: CALL_OW 559
// end ;
21976: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
21977: LD_EXP 57
21981: PUSH
21982: LD_EXP 83
21986: AND
21987: IFFALSE 22050
21989: GO 21991
21991: DISABLE
21992: LD_INT 0
21994: PPUSH
// begin p := 0 ;
21995: LD_ADDR_VAR 0 1
21999: PUSH
22000: LD_INT 0
22002: ST_TO_ADDR
// repeat game_speed := 1 ;
22003: LD_ADDR_OWVAR 65
22007: PUSH
22008: LD_INT 1
22010: ST_TO_ADDR
// wait ( 0 0$1 ) ;
22011: LD_INT 35
22013: PPUSH
22014: CALL_OW 67
// p := p + 1 ;
22018: LD_ADDR_VAR 0 1
22022: PUSH
22023: LD_VAR 0 1
22027: PUSH
22028: LD_INT 1
22030: PLUS
22031: ST_TO_ADDR
// until p >= 60 ;
22032: LD_VAR 0 1
22036: PUSH
22037: LD_INT 60
22039: GREATEREQUAL
22040: IFFALSE 22003
// game_speed := 4 ;
22042: LD_ADDR_OWVAR 65
22046: PUSH
22047: LD_INT 4
22049: ST_TO_ADDR
// end ;
22050: PPOPN 1
22052: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
22053: LD_EXP 57
22057: PUSH
22058: LD_EXP 84
22062: AND
22063: IFFALSE 22209
22065: GO 22067
22067: DISABLE
22068: LD_INT 0
22070: PPUSH
22071: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22072: LD_ADDR_VAR 0 1
22076: PUSH
22077: LD_INT 22
22079: PUSH
22080: LD_OWVAR 2
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: PUSH
22089: LD_INT 2
22091: PUSH
22092: LD_INT 30
22094: PUSH
22095: LD_INT 0
22097: PUSH
22098: EMPTY
22099: LIST
22100: LIST
22101: PUSH
22102: LD_INT 30
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: LIST
22116: PUSH
22117: EMPTY
22118: LIST
22119: LIST
22120: PPUSH
22121: CALL_OW 69
22125: ST_TO_ADDR
// if not depot then
22126: LD_VAR 0 1
22130: NOT
22131: IFFALSE 22135
// exit ;
22133: GO 22209
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
22135: LD_ADDR_VAR 0 2
22139: PUSH
22140: LD_VAR 0 1
22144: PUSH
22145: LD_INT 1
22147: PPUSH
22148: LD_VAR 0 1
22152: PPUSH
22153: CALL_OW 12
22157: ARRAY
22158: PPUSH
22159: CALL_OW 274
22163: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
22164: LD_VAR 0 2
22168: PPUSH
22169: LD_INT 1
22171: PPUSH
22172: LD_INT 0
22174: PPUSH
22175: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
22179: LD_VAR 0 2
22183: PPUSH
22184: LD_INT 2
22186: PPUSH
22187: LD_INT 0
22189: PPUSH
22190: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
22194: LD_VAR 0 2
22198: PPUSH
22199: LD_INT 3
22201: PPUSH
22202: LD_INT 0
22204: PPUSH
22205: CALL_OW 277
// end ;
22209: PPOPN 2
22211: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
22212: LD_EXP 57
22216: PUSH
22217: LD_EXP 85
22221: AND
22222: IFFALSE 22319
22224: GO 22226
22226: DISABLE
22227: LD_INT 0
22229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
22230: LD_ADDR_VAR 0 1
22234: PUSH
22235: LD_INT 22
22237: PUSH
22238: LD_OWVAR 2
22242: PUSH
22243: EMPTY
22244: LIST
22245: LIST
22246: PUSH
22247: LD_INT 21
22249: PUSH
22250: LD_INT 1
22252: PUSH
22253: EMPTY
22254: LIST
22255: LIST
22256: PUSH
22257: LD_INT 3
22259: PUSH
22260: LD_INT 23
22262: PUSH
22263: LD_INT 0
22265: PUSH
22266: EMPTY
22267: LIST
22268: LIST
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: EMPTY
22275: LIST
22276: LIST
22277: LIST
22278: PPUSH
22279: CALL_OW 69
22283: ST_TO_ADDR
// if not tmp then
22284: LD_VAR 0 1
22288: NOT
22289: IFFALSE 22293
// exit ;
22291: GO 22319
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
22293: LD_VAR 0 1
22297: PUSH
22298: LD_INT 1
22300: PPUSH
22301: LD_VAR 0 1
22305: PPUSH
22306: CALL_OW 12
22310: ARRAY
22311: PPUSH
22312: LD_INT 200
22314: PPUSH
22315: CALL_OW 234
// end ;
22319: PPOPN 1
22321: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
22322: LD_EXP 57
22326: PUSH
22327: LD_EXP 86
22331: AND
22332: IFFALSE 22411
22334: GO 22336
22336: DISABLE
22337: LD_INT 0
22339: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
22340: LD_ADDR_VAR 0 1
22344: PUSH
22345: LD_INT 22
22347: PUSH
22348: LD_OWVAR 2
22352: PUSH
22353: EMPTY
22354: LIST
22355: LIST
22356: PUSH
22357: LD_INT 21
22359: PUSH
22360: LD_INT 2
22362: PUSH
22363: EMPTY
22364: LIST
22365: LIST
22366: PUSH
22367: EMPTY
22368: LIST
22369: LIST
22370: PPUSH
22371: CALL_OW 69
22375: ST_TO_ADDR
// if not tmp then
22376: LD_VAR 0 1
22380: NOT
22381: IFFALSE 22385
// exit ;
22383: GO 22411
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
22385: LD_VAR 0 1
22389: PUSH
22390: LD_INT 1
22392: PPUSH
22393: LD_VAR 0 1
22397: PPUSH
22398: CALL_OW 12
22402: ARRAY
22403: PPUSH
22404: LD_INT 60
22406: PPUSH
22407: CALL_OW 234
// end ;
22411: PPOPN 1
22413: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
22414: LD_EXP 57
22418: PUSH
22419: LD_EXP 87
22423: AND
22424: IFFALSE 22523
22426: GO 22428
22428: DISABLE
22429: LD_INT 0
22431: PPUSH
22432: PPUSH
// begin enable ;
22433: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
22434: LD_ADDR_VAR 0 1
22438: PUSH
22439: LD_INT 22
22441: PUSH
22442: LD_OWVAR 2
22446: PUSH
22447: EMPTY
22448: LIST
22449: LIST
22450: PUSH
22451: LD_INT 61
22453: PUSH
22454: EMPTY
22455: LIST
22456: PUSH
22457: LD_INT 33
22459: PUSH
22460: LD_INT 2
22462: PUSH
22463: EMPTY
22464: LIST
22465: LIST
22466: PUSH
22467: EMPTY
22468: LIST
22469: LIST
22470: LIST
22471: PPUSH
22472: CALL_OW 69
22476: ST_TO_ADDR
// if not tmp then
22477: LD_VAR 0 1
22481: NOT
22482: IFFALSE 22486
// exit ;
22484: GO 22523
// for i in tmp do
22486: LD_ADDR_VAR 0 2
22490: PUSH
22491: LD_VAR 0 1
22495: PUSH
22496: FOR_IN
22497: IFFALSE 22521
// if IsControledBy ( i ) then
22499: LD_VAR 0 2
22503: PPUSH
22504: CALL_OW 312
22508: IFFALSE 22519
// ComUnlink ( i ) ;
22510: LD_VAR 0 2
22514: PPUSH
22515: CALL_OW 136
22519: GO 22496
22521: POP
22522: POP
// end ;
22523: PPOPN 2
22525: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
22526: LD_EXP 57
22530: PUSH
22531: LD_EXP 88
22535: AND
22536: IFFALSE 22676
22538: GO 22540
22540: DISABLE
22541: LD_INT 0
22543: PPUSH
22544: PPUSH
// begin ToLua ( displayPowell(); ) ;
22545: LD_STRING displayPowell();
22547: PPUSH
22548: CALL_OW 559
// uc_side := 0 ;
22552: LD_ADDR_OWVAR 20
22556: PUSH
22557: LD_INT 0
22559: ST_TO_ADDR
// uc_nation := 2 ;
22560: LD_ADDR_OWVAR 21
22564: PUSH
22565: LD_INT 2
22567: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
22568: LD_ADDR_OWVAR 37
22572: PUSH
22573: LD_INT 14
22575: ST_TO_ADDR
// vc_engine := engine_siberite ;
22576: LD_ADDR_OWVAR 39
22580: PUSH
22581: LD_INT 3
22583: ST_TO_ADDR
// vc_control := control_apeman ;
22584: LD_ADDR_OWVAR 38
22588: PUSH
22589: LD_INT 5
22591: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
22592: LD_ADDR_OWVAR 40
22596: PUSH
22597: LD_INT 29
22599: ST_TO_ADDR
// un := CreateVehicle ;
22600: LD_ADDR_VAR 0 2
22604: PUSH
22605: CALL_OW 45
22609: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
22610: LD_VAR 0 2
22614: PPUSH
22615: LD_INT 1
22617: PPUSH
22618: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
22622: LD_INT 35
22624: PPUSH
22625: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
22629: LD_VAR 0 2
22633: PPUSH
22634: LD_INT 22
22636: PUSH
22637: LD_OWVAR 2
22641: PUSH
22642: EMPTY
22643: LIST
22644: LIST
22645: PPUSH
22646: CALL_OW 69
22650: PPUSH
22651: LD_VAR 0 2
22655: PPUSH
22656: CALL_OW 74
22660: PPUSH
22661: CALL_OW 115
// until IsDead ( un ) ;
22665: LD_VAR 0 2
22669: PPUSH
22670: CALL_OW 301
22674: IFFALSE 22622
// end ;
22676: PPOPN 2
22678: END
// every 0 0$1 trigger StreamModeActive and sStu do
22679: LD_EXP 57
22683: PUSH
22684: LD_EXP 96
22688: AND
22689: IFFALSE 22705
22691: GO 22693
22693: DISABLE
// begin ToLua ( displayStucuk(); ) ;
22694: LD_STRING displayStucuk();
22696: PPUSH
22697: CALL_OW 559
// ResetFog ;
22701: CALL_OW 335
// end ;
22705: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
22706: LD_EXP 57
22710: PUSH
22711: LD_EXP 89
22715: AND
22716: IFFALSE 22857
22718: GO 22720
22720: DISABLE
22721: LD_INT 0
22723: PPUSH
22724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22725: LD_ADDR_VAR 0 2
22729: PUSH
22730: LD_INT 22
22732: PUSH
22733: LD_OWVAR 2
22737: PUSH
22738: EMPTY
22739: LIST
22740: LIST
22741: PUSH
22742: LD_INT 21
22744: PUSH
22745: LD_INT 1
22747: PUSH
22748: EMPTY
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PPUSH
22756: CALL_OW 69
22760: ST_TO_ADDR
// if not tmp then
22761: LD_VAR 0 2
22765: NOT
22766: IFFALSE 22770
// exit ;
22768: GO 22857
// un := tmp [ rand ( 1 , tmp ) ] ;
22770: LD_ADDR_VAR 0 1
22774: PUSH
22775: LD_VAR 0 2
22779: PUSH
22780: LD_INT 1
22782: PPUSH
22783: LD_VAR 0 2
22787: PPUSH
22788: CALL_OW 12
22792: ARRAY
22793: ST_TO_ADDR
// SetSide ( un , 0 ) ;
22794: LD_VAR 0 1
22798: PPUSH
22799: LD_INT 0
22801: PPUSH
22802: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
22806: LD_VAR 0 1
22810: PPUSH
22811: LD_OWVAR 3
22815: PUSH
22816: LD_VAR 0 1
22820: DIFF
22821: PPUSH
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL_OW 74
22831: PPUSH
22832: CALL_OW 115
// wait ( 0 0$20 ) ;
22836: LD_INT 700
22838: PPUSH
22839: CALL_OW 67
// SetSide ( un , your_side ) ;
22843: LD_VAR 0 1
22847: PPUSH
22848: LD_OWVAR 2
22852: PPUSH
22853: CALL_OW 235
// end ;
22857: PPOPN 2
22859: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
22860: LD_EXP 57
22864: PUSH
22865: LD_EXP 90
22869: AND
22870: IFFALSE 22976
22872: GO 22874
22874: DISABLE
22875: LD_INT 0
22877: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22878: LD_ADDR_VAR 0 1
22882: PUSH
22883: LD_INT 22
22885: PUSH
22886: LD_OWVAR 2
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: PUSH
22895: LD_INT 2
22897: PUSH
22898: LD_INT 30
22900: PUSH
22901: LD_INT 0
22903: PUSH
22904: EMPTY
22905: LIST
22906: LIST
22907: PUSH
22908: LD_INT 30
22910: PUSH
22911: LD_INT 1
22913: PUSH
22914: EMPTY
22915: LIST
22916: LIST
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: PUSH
22923: EMPTY
22924: LIST
22925: LIST
22926: PPUSH
22927: CALL_OW 69
22931: ST_TO_ADDR
// if not depot then
22932: LD_VAR 0 1
22936: NOT
22937: IFFALSE 22941
// exit ;
22939: GO 22976
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
22941: LD_VAR 0 1
22945: PUSH
22946: LD_INT 1
22948: ARRAY
22949: PPUSH
22950: CALL_OW 250
22954: PPUSH
22955: LD_VAR 0 1
22959: PUSH
22960: LD_INT 1
22962: ARRAY
22963: PPUSH
22964: CALL_OW 251
22968: PPUSH
22969: LD_INT 70
22971: PPUSH
22972: CALL_OW 495
// end ;
22976: PPOPN 1
22978: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
22979: LD_EXP 57
22983: PUSH
22984: LD_EXP 91
22988: AND
22989: IFFALSE 23200
22991: GO 22993
22993: DISABLE
22994: LD_INT 0
22996: PPUSH
22997: PPUSH
22998: PPUSH
22999: PPUSH
23000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
23001: LD_ADDR_VAR 0 5
23005: PUSH
23006: LD_INT 22
23008: PUSH
23009: LD_OWVAR 2
23013: PUSH
23014: EMPTY
23015: LIST
23016: LIST
23017: PUSH
23018: LD_INT 21
23020: PUSH
23021: LD_INT 1
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PPUSH
23032: CALL_OW 69
23036: ST_TO_ADDR
// if not tmp then
23037: LD_VAR 0 5
23041: NOT
23042: IFFALSE 23046
// exit ;
23044: GO 23200
// for i in tmp do
23046: LD_ADDR_VAR 0 1
23050: PUSH
23051: LD_VAR 0 5
23055: PUSH
23056: FOR_IN
23057: IFFALSE 23198
// begin d := rand ( 0 , 5 ) ;
23059: LD_ADDR_VAR 0 4
23063: PUSH
23064: LD_INT 0
23066: PPUSH
23067: LD_INT 5
23069: PPUSH
23070: CALL_OW 12
23074: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
23075: LD_ADDR_VAR 0 2
23079: PUSH
23080: LD_VAR 0 1
23084: PPUSH
23085: CALL_OW 250
23089: PPUSH
23090: LD_VAR 0 4
23094: PPUSH
23095: LD_INT 3
23097: PPUSH
23098: LD_INT 12
23100: PPUSH
23101: CALL_OW 12
23105: PPUSH
23106: CALL_OW 272
23110: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
23111: LD_ADDR_VAR 0 3
23115: PUSH
23116: LD_VAR 0 1
23120: PPUSH
23121: CALL_OW 251
23125: PPUSH
23126: LD_VAR 0 4
23130: PPUSH
23131: LD_INT 3
23133: PPUSH
23134: LD_INT 12
23136: PPUSH
23137: CALL_OW 12
23141: PPUSH
23142: CALL_OW 273
23146: ST_TO_ADDR
// if ValidHex ( x , y ) then
23147: LD_VAR 0 2
23151: PPUSH
23152: LD_VAR 0 3
23156: PPUSH
23157: CALL_OW 488
23161: IFFALSE 23196
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
23163: LD_VAR 0 1
23167: PPUSH
23168: LD_VAR 0 2
23172: PPUSH
23173: LD_VAR 0 3
23177: PPUSH
23178: LD_INT 3
23180: PPUSH
23181: LD_INT 6
23183: PPUSH
23184: CALL_OW 12
23188: PPUSH
23189: LD_INT 1
23191: PPUSH
23192: CALL_OW 483
// end ;
23196: GO 23056
23198: POP
23199: POP
// end ;
23200: PPOPN 5
23202: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
23203: LD_EXP 57
23207: PUSH
23208: LD_EXP 92
23212: AND
23213: IFFALSE 23307
23215: GO 23217
23217: DISABLE
23218: LD_INT 0
23220: PPUSH
23221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
23222: LD_ADDR_VAR 0 2
23226: PUSH
23227: LD_INT 22
23229: PUSH
23230: LD_OWVAR 2
23234: PUSH
23235: EMPTY
23236: LIST
23237: LIST
23238: PUSH
23239: LD_INT 32
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 21
23251: PUSH
23252: LD_INT 2
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: LIST
23263: PPUSH
23264: CALL_OW 69
23268: ST_TO_ADDR
// if not tmp then
23269: LD_VAR 0 2
23273: NOT
23274: IFFALSE 23278
// exit ;
23276: GO 23307
// for i in tmp do
23278: LD_ADDR_VAR 0 1
23282: PUSH
23283: LD_VAR 0 2
23287: PUSH
23288: FOR_IN
23289: IFFALSE 23305
// SetFuel ( i , 0 ) ;
23291: LD_VAR 0 1
23295: PPUSH
23296: LD_INT 0
23298: PPUSH
23299: CALL_OW 240
23303: GO 23288
23305: POP
23306: POP
// end ;
23307: PPOPN 2
23309: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
23310: LD_EXP 57
23314: PUSH
23315: LD_EXP 93
23319: AND
23320: IFFALSE 23386
23322: GO 23324
23324: DISABLE
23325: LD_INT 0
23327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
23328: LD_ADDR_VAR 0 1
23332: PUSH
23333: LD_INT 22
23335: PUSH
23336: LD_OWVAR 2
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PUSH
23345: LD_INT 30
23347: PUSH
23348: LD_INT 29
23350: PUSH
23351: EMPTY
23352: LIST
23353: LIST
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: PPUSH
23359: CALL_OW 69
23363: ST_TO_ADDR
// if not tmp then
23364: LD_VAR 0 1
23368: NOT
23369: IFFALSE 23373
// exit ;
23371: GO 23386
// DestroyUnit ( tmp [ 1 ] ) ;
23373: LD_VAR 0 1
23377: PUSH
23378: LD_INT 1
23380: ARRAY
23381: PPUSH
23382: CALL_OW 65
// end ;
23386: PPOPN 1
23388: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
23389: LD_EXP 57
23393: PUSH
23394: LD_EXP 95
23398: AND
23399: IFFALSE 23528
23401: GO 23403
23403: DISABLE
23404: LD_INT 0
23406: PPUSH
// begin uc_side := 0 ;
23407: LD_ADDR_OWVAR 20
23411: PUSH
23412: LD_INT 0
23414: ST_TO_ADDR
// uc_nation := nation_arabian ;
23415: LD_ADDR_OWVAR 21
23419: PUSH
23420: LD_INT 2
23422: ST_TO_ADDR
// hc_gallery :=  ;
23423: LD_ADDR_OWVAR 33
23427: PUSH
23428: LD_STRING 
23430: ST_TO_ADDR
// hc_name :=  ;
23431: LD_ADDR_OWVAR 26
23435: PUSH
23436: LD_STRING 
23438: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
23439: LD_INT 1
23441: PPUSH
23442: LD_INT 11
23444: PPUSH
23445: LD_INT 10
23447: PPUSH
23448: CALL_OW 380
// un := CreateHuman ;
23452: LD_ADDR_VAR 0 1
23456: PUSH
23457: CALL_OW 44
23461: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
23462: LD_VAR 0 1
23466: PPUSH
23467: LD_INT 1
23469: PPUSH
23470: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
23474: LD_INT 35
23476: PPUSH
23477: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
23481: LD_VAR 0 1
23485: PPUSH
23486: LD_INT 22
23488: PUSH
23489: LD_OWVAR 2
23493: PUSH
23494: EMPTY
23495: LIST
23496: LIST
23497: PPUSH
23498: CALL_OW 69
23502: PPUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 74
23512: PPUSH
23513: CALL_OW 115
// until IsDead ( un ) ;
23517: LD_VAR 0 1
23521: PPUSH
23522: CALL_OW 301
23526: IFFALSE 23474
// end ;
23528: PPOPN 1
23530: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
23531: LD_EXP 57
23535: PUSH
23536: LD_EXP 97
23540: AND
23541: IFFALSE 23553
23543: GO 23545
23545: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
23546: LD_STRING earthquake(getX(game), 0, 32)
23548: PPUSH
23549: CALL_OW 559
23553: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
23554: LD_EXP 57
23558: PUSH
23559: LD_EXP 98
23563: AND
23564: IFFALSE 23655
23566: GO 23568
23568: DISABLE
23569: LD_INT 0
23571: PPUSH
// begin enable ;
23572: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
23573: LD_ADDR_VAR 0 1
23577: PUSH
23578: LD_INT 22
23580: PUSH
23581: LD_OWVAR 2
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: LD_INT 21
23592: PUSH
23593: LD_INT 2
23595: PUSH
23596: EMPTY
23597: LIST
23598: LIST
23599: PUSH
23600: LD_INT 33
23602: PUSH
23603: LD_INT 3
23605: PUSH
23606: EMPTY
23607: LIST
23608: LIST
23609: PUSH
23610: EMPTY
23611: LIST
23612: LIST
23613: LIST
23614: PPUSH
23615: CALL_OW 69
23619: ST_TO_ADDR
// if not tmp then
23620: LD_VAR 0 1
23624: NOT
23625: IFFALSE 23629
// exit ;
23627: GO 23655
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
23629: LD_VAR 0 1
23633: PUSH
23634: LD_INT 1
23636: PPUSH
23637: LD_VAR 0 1
23641: PPUSH
23642: CALL_OW 12
23646: ARRAY
23647: PPUSH
23648: LD_INT 1
23650: PPUSH
23651: CALL_OW 234
// end ;
23655: PPOPN 1
23657: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
23658: LD_EXP 57
23662: PUSH
23663: LD_EXP 99
23667: AND
23668: IFFALSE 23809
23670: GO 23672
23672: DISABLE
23673: LD_INT 0
23675: PPUSH
23676: PPUSH
23677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23678: LD_ADDR_VAR 0 3
23682: PUSH
23683: LD_INT 22
23685: PUSH
23686: LD_OWVAR 2
23690: PUSH
23691: EMPTY
23692: LIST
23693: LIST
23694: PUSH
23695: LD_INT 25
23697: PUSH
23698: LD_INT 1
23700: PUSH
23701: EMPTY
23702: LIST
23703: LIST
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PPUSH
23709: CALL_OW 69
23713: ST_TO_ADDR
// if not tmp then
23714: LD_VAR 0 3
23718: NOT
23719: IFFALSE 23723
// exit ;
23721: GO 23809
// un := tmp [ rand ( 1 , tmp ) ] ;
23723: LD_ADDR_VAR 0 2
23727: PUSH
23728: LD_VAR 0 3
23732: PUSH
23733: LD_INT 1
23735: PPUSH
23736: LD_VAR 0 3
23740: PPUSH
23741: CALL_OW 12
23745: ARRAY
23746: ST_TO_ADDR
// if Crawls ( un ) then
23747: LD_VAR 0 2
23751: PPUSH
23752: CALL_OW 318
23756: IFFALSE 23767
// ComWalk ( un ) ;
23758: LD_VAR 0 2
23762: PPUSH
23763: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
23767: LD_VAR 0 2
23771: PPUSH
23772: LD_INT 9
23774: PPUSH
23775: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
23779: LD_INT 28
23781: PPUSH
23782: LD_OWVAR 2
23786: PPUSH
23787: LD_INT 2
23789: PPUSH
23790: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
23794: LD_INT 29
23796: PPUSH
23797: LD_OWVAR 2
23801: PPUSH
23802: LD_INT 2
23804: PPUSH
23805: CALL_OW 322
// end ;
23809: PPOPN 3
23811: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
23812: LD_EXP 57
23816: PUSH
23817: LD_EXP 100
23821: AND
23822: IFFALSE 23933
23824: GO 23826
23826: DISABLE
23827: LD_INT 0
23829: PPUSH
23830: PPUSH
23831: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_INT 22
23839: PUSH
23840: LD_OWVAR 2
23844: PUSH
23845: EMPTY
23846: LIST
23847: LIST
23848: PUSH
23849: LD_INT 25
23851: PUSH
23852: LD_INT 1
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: EMPTY
23860: LIST
23861: LIST
23862: PPUSH
23863: CALL_OW 69
23867: ST_TO_ADDR
// if not tmp then
23868: LD_VAR 0 3
23872: NOT
23873: IFFALSE 23877
// exit ;
23875: GO 23933
// un := tmp [ rand ( 1 , tmp ) ] ;
23877: LD_ADDR_VAR 0 2
23881: PUSH
23882: LD_VAR 0 3
23886: PUSH
23887: LD_INT 1
23889: PPUSH
23890: LD_VAR 0 3
23894: PPUSH
23895: CALL_OW 12
23899: ARRAY
23900: ST_TO_ADDR
// if Crawls ( un ) then
23901: LD_VAR 0 2
23905: PPUSH
23906: CALL_OW 318
23910: IFFALSE 23921
// ComWalk ( un ) ;
23912: LD_VAR 0 2
23916: PPUSH
23917: CALL_OW 138
// SetClass ( un , class_mortar ) ;
23921: LD_VAR 0 2
23925: PPUSH
23926: LD_INT 8
23928: PPUSH
23929: CALL_OW 336
// end ;
23933: PPOPN 3
23935: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
23936: LD_EXP 57
23940: PUSH
23941: LD_EXP 101
23945: AND
23946: IFFALSE 24090
23948: GO 23950
23950: DISABLE
23951: LD_INT 0
23953: PPUSH
23954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
23955: LD_ADDR_VAR 0 2
23959: PUSH
23960: LD_INT 22
23962: PUSH
23963: LD_OWVAR 2
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 21
23974: PUSH
23975: LD_INT 2
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: PUSH
23982: LD_INT 2
23984: PUSH
23985: LD_INT 34
23987: PUSH
23988: LD_INT 12
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PUSH
23995: LD_INT 34
23997: PUSH
23998: LD_INT 51
24000: PUSH
24001: EMPTY
24002: LIST
24003: LIST
24004: PUSH
24005: LD_INT 34
24007: PUSH
24008: LD_INT 32
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: LIST
24025: PPUSH
24026: CALL_OW 69
24030: ST_TO_ADDR
// if not tmp then
24031: LD_VAR 0 2
24035: NOT
24036: IFFALSE 24040
// exit ;
24038: GO 24090
// for i in tmp do
24040: LD_ADDR_VAR 0 1
24044: PUSH
24045: LD_VAR 0 2
24049: PUSH
24050: FOR_IN
24051: IFFALSE 24088
// if GetCargo ( i , mat_artifact ) = 0 then
24053: LD_VAR 0 1
24057: PPUSH
24058: LD_INT 4
24060: PPUSH
24061: CALL_OW 289
24065: PUSH
24066: LD_INT 0
24068: EQUAL
24069: IFFALSE 24086
// SetCargo ( i , mat_siberit , 100 ) ;
24071: LD_VAR 0 1
24075: PPUSH
24076: LD_INT 3
24078: PPUSH
24079: LD_INT 100
24081: PPUSH
24082: CALL_OW 290
24086: GO 24050
24088: POP
24089: POP
// end ;
24090: PPOPN 2
24092: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
24093: LD_EXP 57
24097: PUSH
24098: LD_EXP 102
24102: AND
24103: IFFALSE 24286
24105: GO 24107
24107: DISABLE
24108: LD_INT 0
24110: PPUSH
24111: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
24112: LD_ADDR_VAR 0 2
24116: PUSH
24117: LD_INT 22
24119: PUSH
24120: LD_OWVAR 2
24124: PUSH
24125: EMPTY
24126: LIST
24127: LIST
24128: PPUSH
24129: CALL_OW 69
24133: ST_TO_ADDR
// if not tmp then
24134: LD_VAR 0 2
24138: NOT
24139: IFFALSE 24143
// exit ;
24141: GO 24286
// for i := 1 to 2 do
24143: LD_ADDR_VAR 0 1
24147: PUSH
24148: DOUBLE
24149: LD_INT 1
24151: DEC
24152: ST_TO_ADDR
24153: LD_INT 2
24155: PUSH
24156: FOR_TO
24157: IFFALSE 24284
// begin uc_side := your_side ;
24159: LD_ADDR_OWVAR 20
24163: PUSH
24164: LD_OWVAR 2
24168: ST_TO_ADDR
// uc_nation := nation_american ;
24169: LD_ADDR_OWVAR 21
24173: PUSH
24174: LD_INT 1
24176: ST_TO_ADDR
// vc_chassis := us_morphling ;
24177: LD_ADDR_OWVAR 37
24181: PUSH
24182: LD_INT 5
24184: ST_TO_ADDR
// vc_engine := engine_siberite ;
24185: LD_ADDR_OWVAR 39
24189: PUSH
24190: LD_INT 3
24192: ST_TO_ADDR
// vc_control := control_computer ;
24193: LD_ADDR_OWVAR 38
24197: PUSH
24198: LD_INT 3
24200: ST_TO_ADDR
// vc_weapon := us_double_laser ;
24201: LD_ADDR_OWVAR 40
24205: PUSH
24206: LD_INT 10
24208: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
24209: LD_VAR 0 2
24213: PUSH
24214: LD_INT 1
24216: ARRAY
24217: PPUSH
24218: CALL_OW 310
24222: NOT
24223: IFFALSE 24270
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
24225: CALL_OW 45
24229: PPUSH
24230: LD_VAR 0 2
24234: PUSH
24235: LD_INT 1
24237: ARRAY
24238: PPUSH
24239: CALL_OW 250
24243: PPUSH
24244: LD_VAR 0 2
24248: PUSH
24249: LD_INT 1
24251: ARRAY
24252: PPUSH
24253: CALL_OW 251
24257: PPUSH
24258: LD_INT 12
24260: PPUSH
24261: LD_INT 1
24263: PPUSH
24264: CALL_OW 50
24268: GO 24282
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
24270: CALL_OW 45
24274: PPUSH
24275: LD_INT 1
24277: PPUSH
24278: CALL_OW 51
// end ;
24282: GO 24156
24284: POP
24285: POP
// end ;
24286: PPOPN 2
24288: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
24289: LD_EXP 57
24293: PUSH
24294: LD_EXP 103
24298: AND
24299: IFFALSE 24521
24301: GO 24303
24303: DISABLE
24304: LD_INT 0
24306: PPUSH
24307: PPUSH
24308: PPUSH
24309: PPUSH
24310: PPUSH
24311: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
24312: LD_ADDR_VAR 0 6
24316: PUSH
24317: LD_INT 22
24319: PUSH
24320: LD_OWVAR 2
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PUSH
24329: LD_INT 21
24331: PUSH
24332: LD_INT 1
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PUSH
24339: LD_INT 3
24341: PUSH
24342: LD_INT 23
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: EMPTY
24357: LIST
24358: LIST
24359: LIST
24360: PPUSH
24361: CALL_OW 69
24365: ST_TO_ADDR
// if not tmp then
24366: LD_VAR 0 6
24370: NOT
24371: IFFALSE 24375
// exit ;
24373: GO 24521
// s1 := rand ( 1 , 4 ) ;
24375: LD_ADDR_VAR 0 2
24379: PUSH
24380: LD_INT 1
24382: PPUSH
24383: LD_INT 4
24385: PPUSH
24386: CALL_OW 12
24390: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
24391: LD_ADDR_VAR 0 4
24395: PUSH
24396: LD_VAR 0 6
24400: PUSH
24401: LD_INT 1
24403: ARRAY
24404: PPUSH
24405: LD_VAR 0 2
24409: PPUSH
24410: CALL_OW 259
24414: ST_TO_ADDR
// if s1 = 1 then
24415: LD_VAR 0 2
24419: PUSH
24420: LD_INT 1
24422: EQUAL
24423: IFFALSE 24443
// s2 := rand ( 2 , 4 ) else
24425: LD_ADDR_VAR 0 3
24429: PUSH
24430: LD_INT 2
24432: PPUSH
24433: LD_INT 4
24435: PPUSH
24436: CALL_OW 12
24440: ST_TO_ADDR
24441: GO 24451
// s2 := 1 ;
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 1
24450: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
24451: LD_ADDR_VAR 0 5
24455: PUSH
24456: LD_VAR 0 6
24460: PUSH
24461: LD_INT 1
24463: ARRAY
24464: PPUSH
24465: LD_VAR 0 3
24469: PPUSH
24470: CALL_OW 259
24474: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
24475: LD_VAR 0 6
24479: PUSH
24480: LD_INT 1
24482: ARRAY
24483: PPUSH
24484: LD_VAR 0 2
24488: PPUSH
24489: LD_VAR 0 5
24493: PPUSH
24494: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
24498: LD_VAR 0 6
24502: PUSH
24503: LD_INT 1
24505: ARRAY
24506: PPUSH
24507: LD_VAR 0 3
24511: PPUSH
24512: LD_VAR 0 4
24516: PPUSH
24517: CALL_OW 237
// end ;
24521: PPOPN 6
24523: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
24524: LD_EXP 57
24528: PUSH
24529: LD_EXP 104
24533: AND
24534: IFFALSE 24613
24536: GO 24538
24538: DISABLE
24539: LD_INT 0
24541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
24542: LD_ADDR_VAR 0 1
24546: PUSH
24547: LD_INT 22
24549: PUSH
24550: LD_OWVAR 2
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 30
24561: PUSH
24562: LD_INT 3
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: PPUSH
24573: CALL_OW 69
24577: ST_TO_ADDR
// if not tmp then
24578: LD_VAR 0 1
24582: NOT
24583: IFFALSE 24587
// exit ;
24585: GO 24613
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
24587: LD_VAR 0 1
24591: PUSH
24592: LD_INT 1
24594: PPUSH
24595: LD_VAR 0 1
24599: PPUSH
24600: CALL_OW 12
24604: ARRAY
24605: PPUSH
24606: LD_INT 1
24608: PPUSH
24609: CALL_OW 234
// end ;
24613: PPOPN 1
24615: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
24616: LD_EXP 57
24620: PUSH
24621: LD_EXP 105
24625: AND
24626: IFFALSE 24738
24628: GO 24630
24630: DISABLE
24631: LD_INT 0
24633: PPUSH
24634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
24635: LD_ADDR_VAR 0 2
24639: PUSH
24640: LD_INT 22
24642: PUSH
24643: LD_OWVAR 2
24647: PUSH
24648: EMPTY
24649: LIST
24650: LIST
24651: PUSH
24652: LD_INT 2
24654: PUSH
24655: LD_INT 30
24657: PUSH
24658: LD_INT 27
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: LD_INT 30
24667: PUSH
24668: LD_INT 26
24670: PUSH
24671: EMPTY
24672: LIST
24673: LIST
24674: PUSH
24675: LD_INT 30
24677: PUSH
24678: LD_INT 28
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: EMPTY
24686: LIST
24687: LIST
24688: LIST
24689: LIST
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PPUSH
24695: CALL_OW 69
24699: ST_TO_ADDR
// if not tmp then
24700: LD_VAR 0 2
24704: NOT
24705: IFFALSE 24709
// exit ;
24707: GO 24738
// for i in tmp do
24709: LD_ADDR_VAR 0 1
24713: PUSH
24714: LD_VAR 0 2
24718: PUSH
24719: FOR_IN
24720: IFFALSE 24736
// SetLives ( i , 1 ) ;
24722: LD_VAR 0 1
24726: PPUSH
24727: LD_INT 1
24729: PPUSH
24730: CALL_OW 234
24734: GO 24719
24736: POP
24737: POP
// end ;
24738: PPOPN 2
24740: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
24741: LD_EXP 57
24745: PUSH
24746: LD_EXP 106
24750: AND
24751: IFFALSE 25025
24753: GO 24755
24755: DISABLE
24756: LD_INT 0
24758: PPUSH
24759: PPUSH
24760: PPUSH
// begin i := rand ( 1 , 7 ) ;
24761: LD_ADDR_VAR 0 1
24765: PUSH
24766: LD_INT 1
24768: PPUSH
24769: LD_INT 7
24771: PPUSH
24772: CALL_OW 12
24776: ST_TO_ADDR
// case i of 1 :
24777: LD_VAR 0 1
24781: PUSH
24782: LD_INT 1
24784: DOUBLE
24785: EQUAL
24786: IFTRUE 24790
24788: GO 24800
24790: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
24791: LD_STRING earthquake(getX(game), 0, 32)
24793: PPUSH
24794: CALL_OW 559
24798: GO 25025
24800: LD_INT 2
24802: DOUBLE
24803: EQUAL
24804: IFTRUE 24808
24806: GO 24822
24808: POP
// begin ToLua ( displayStucuk(); ) ;
24809: LD_STRING displayStucuk();
24811: PPUSH
24812: CALL_OW 559
// ResetFog ;
24816: CALL_OW 335
// end ; 3 :
24820: GO 25025
24822: LD_INT 3
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 24934
24830: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
24831: LD_ADDR_VAR 0 2
24835: PUSH
24836: LD_INT 22
24838: PUSH
24839: LD_OWVAR 2
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 25
24850: PUSH
24851: LD_INT 1
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PPUSH
24862: CALL_OW 69
24866: ST_TO_ADDR
// if not tmp then
24867: LD_VAR 0 2
24871: NOT
24872: IFFALSE 24876
// exit ;
24874: GO 25025
// un := tmp [ rand ( 1 , tmp ) ] ;
24876: LD_ADDR_VAR 0 3
24880: PUSH
24881: LD_VAR 0 2
24885: PUSH
24886: LD_INT 1
24888: PPUSH
24889: LD_VAR 0 2
24893: PPUSH
24894: CALL_OW 12
24898: ARRAY
24899: ST_TO_ADDR
// if Crawls ( un ) then
24900: LD_VAR 0 3
24904: PPUSH
24905: CALL_OW 318
24909: IFFALSE 24920
// ComWalk ( un ) ;
24911: LD_VAR 0 3
24915: PPUSH
24916: CALL_OW 138
// SetClass ( un , class_mortar ) ;
24920: LD_VAR 0 3
24924: PPUSH
24925: LD_INT 8
24927: PPUSH
24928: CALL_OW 336
// end ; 4 :
24932: GO 25025
24934: LD_INT 4
24936: DOUBLE
24937: EQUAL
24938: IFTRUE 24942
24940: GO 25003
24942: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24943: LD_ADDR_VAR 0 2
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_OWVAR 2
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: PUSH
24960: LD_INT 30
24962: PUSH
24963: LD_INT 29
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: EMPTY
24971: LIST
24972: LIST
24973: PPUSH
24974: CALL_OW 69
24978: ST_TO_ADDR
// if not tmp then
24979: LD_VAR 0 2
24983: NOT
24984: IFFALSE 24988
// exit ;
24986: GO 25025
// DestroyUnit ( tmp [ 1 ] ) ;
24988: LD_VAR 0 2
24992: PUSH
24993: LD_INT 1
24995: ARRAY
24996: PPUSH
24997: CALL_OW 65
// end ; 5 .. 7 :
25001: GO 25025
25003: LD_INT 5
25005: DOUBLE
25006: GREATEREQUAL
25007: IFFALSE 25015
25009: LD_INT 7
25011: DOUBLE
25012: LESSEQUAL
25013: IFTRUE 25017
25015: GO 25024
25017: POP
// StreamSibBomb ; end ;
25018: CALL 21275 0 0
25022: GO 25025
25024: POP
// end ;
25025: PPOPN 3
25027: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
25028: LD_EXP 57
25032: PUSH
25033: LD_EXP 107
25037: AND
25038: IFFALSE 25194
25040: GO 25042
25042: DISABLE
25043: LD_INT 0
25045: PPUSH
25046: PPUSH
25047: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
25048: LD_ADDR_VAR 0 2
25052: PUSH
25053: LD_INT 81
25055: PUSH
25056: LD_OWVAR 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 2
25067: PUSH
25068: LD_INT 21
25070: PUSH
25071: LD_INT 1
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 21
25080: PUSH
25081: LD_INT 2
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: LIST
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PPUSH
25097: CALL_OW 69
25101: ST_TO_ADDR
// if not tmp then
25102: LD_VAR 0 2
25106: NOT
25107: IFFALSE 25111
// exit ;
25109: GO 25194
// p := 0 ;
25111: LD_ADDR_VAR 0 3
25115: PUSH
25116: LD_INT 0
25118: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25119: LD_INT 35
25121: PPUSH
25122: CALL_OW 67
// p := p + 1 ;
25126: LD_ADDR_VAR 0 3
25130: PUSH
25131: LD_VAR 0 3
25135: PUSH
25136: LD_INT 1
25138: PLUS
25139: ST_TO_ADDR
// for i in tmp do
25140: LD_ADDR_VAR 0 1
25144: PUSH
25145: LD_VAR 0 2
25149: PUSH
25150: FOR_IN
25151: IFFALSE 25182
// if GetLives ( i ) < 1000 then
25153: LD_VAR 0 1
25157: PPUSH
25158: CALL_OW 256
25162: PUSH
25163: LD_INT 1000
25165: LESS
25166: IFFALSE 25180
// SetLives ( i , 1000 ) ;
25168: LD_VAR 0 1
25172: PPUSH
25173: LD_INT 1000
25175: PPUSH
25176: CALL_OW 234
25180: GO 25150
25182: POP
25183: POP
// until p > 20 ;
25184: LD_VAR 0 3
25188: PUSH
25189: LD_INT 20
25191: GREATER
25192: IFFALSE 25119
// end ;
25194: PPOPN 3
25196: END
// every 0 0$1 trigger StreamModeActive and sTime do
25197: LD_EXP 57
25201: PUSH
25202: LD_EXP 108
25206: AND
25207: IFFALSE 25242
25209: GO 25211
25211: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
25212: LD_INT 28
25214: PPUSH
25215: LD_OWVAR 2
25219: PPUSH
25220: LD_INT 2
25222: PPUSH
25223: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
25227: LD_INT 30
25229: PPUSH
25230: LD_OWVAR 2
25234: PPUSH
25235: LD_INT 2
25237: PPUSH
25238: CALL_OW 322
// end ;
25242: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
25243: LD_EXP 57
25247: PUSH
25248: LD_EXP 109
25252: AND
25253: IFFALSE 25374
25255: GO 25257
25257: DISABLE
25258: LD_INT 0
25260: PPUSH
25261: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25262: LD_ADDR_VAR 0 2
25266: PUSH
25267: LD_INT 22
25269: PUSH
25270: LD_OWVAR 2
25274: PUSH
25275: EMPTY
25276: LIST
25277: LIST
25278: PUSH
25279: LD_INT 21
25281: PUSH
25282: LD_INT 1
25284: PUSH
25285: EMPTY
25286: LIST
25287: LIST
25288: PUSH
25289: LD_INT 3
25291: PUSH
25292: LD_INT 23
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: EMPTY
25299: LIST
25300: LIST
25301: PUSH
25302: EMPTY
25303: LIST
25304: LIST
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: LIST
25310: PPUSH
25311: CALL_OW 69
25315: ST_TO_ADDR
// if not tmp then
25316: LD_VAR 0 2
25320: NOT
25321: IFFALSE 25325
// exit ;
25323: GO 25374
// for i in tmp do
25325: LD_ADDR_VAR 0 1
25329: PUSH
25330: LD_VAR 0 2
25334: PUSH
25335: FOR_IN
25336: IFFALSE 25372
// begin if Crawls ( i ) then
25338: LD_VAR 0 1
25342: PPUSH
25343: CALL_OW 318
25347: IFFALSE 25358
// ComWalk ( i ) ;
25349: LD_VAR 0 1
25353: PPUSH
25354: CALL_OW 138
// SetClass ( i , 2 ) ;
25358: LD_VAR 0 1
25362: PPUSH
25363: LD_INT 2
25365: PPUSH
25366: CALL_OW 336
// end ;
25370: GO 25335
25372: POP
25373: POP
// end ;
25374: PPOPN 2
25376: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
25377: LD_EXP 57
25381: PUSH
25382: LD_EXP 110
25386: AND
25387: IFFALSE 25668
25389: GO 25391
25391: DISABLE
25392: LD_INT 0
25394: PPUSH
25395: PPUSH
25396: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
25397: LD_OWVAR 2
25401: PPUSH
25402: LD_INT 9
25404: PPUSH
25405: LD_INT 1
25407: PPUSH
25408: LD_INT 1
25410: PPUSH
25411: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
25415: LD_INT 9
25417: PPUSH
25418: LD_OWVAR 2
25422: PPUSH
25423: CALL_OW 343
// uc_side := 9 ;
25427: LD_ADDR_OWVAR 20
25431: PUSH
25432: LD_INT 9
25434: ST_TO_ADDR
// uc_nation := 2 ;
25435: LD_ADDR_OWVAR 21
25439: PUSH
25440: LD_INT 2
25442: ST_TO_ADDR
// hc_name := Dark Warrior ;
25443: LD_ADDR_OWVAR 26
25447: PUSH
25448: LD_STRING Dark Warrior
25450: ST_TO_ADDR
// hc_gallery :=  ;
25451: LD_ADDR_OWVAR 33
25455: PUSH
25456: LD_STRING 
25458: ST_TO_ADDR
// hc_noskilllimit := true ;
25459: LD_ADDR_OWVAR 76
25463: PUSH
25464: LD_INT 1
25466: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
25467: LD_ADDR_OWVAR 31
25471: PUSH
25472: LD_INT 30
25474: PUSH
25475: LD_INT 30
25477: PUSH
25478: LD_INT 30
25480: PUSH
25481: LD_INT 30
25483: PUSH
25484: EMPTY
25485: LIST
25486: LIST
25487: LIST
25488: LIST
25489: ST_TO_ADDR
// un := CreateHuman ;
25490: LD_ADDR_VAR 0 3
25494: PUSH
25495: CALL_OW 44
25499: ST_TO_ADDR
// hc_noskilllimit := false ;
25500: LD_ADDR_OWVAR 76
25504: PUSH
25505: LD_INT 0
25507: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
25508: LD_VAR 0 3
25512: PPUSH
25513: LD_INT 1
25515: PPUSH
25516: CALL_OW 51
// p := 0 ;
25520: LD_ADDR_VAR 0 2
25524: PUSH
25525: LD_INT 0
25527: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25528: LD_INT 35
25530: PPUSH
25531: CALL_OW 67
// p := p + 1 ;
25535: LD_ADDR_VAR 0 2
25539: PUSH
25540: LD_VAR 0 2
25544: PUSH
25545: LD_INT 1
25547: PLUS
25548: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
25549: LD_VAR 0 3
25553: PPUSH
25554: CALL_OW 256
25558: PUSH
25559: LD_INT 1000
25561: LESS
25562: IFFALSE 25576
// SetLives ( un , 1000 ) ;
25564: LD_VAR 0 3
25568: PPUSH
25569: LD_INT 1000
25571: PPUSH
25572: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
25576: LD_VAR 0 3
25580: PPUSH
25581: LD_INT 81
25583: PUSH
25584: LD_OWVAR 2
25588: PUSH
25589: EMPTY
25590: LIST
25591: LIST
25592: PUSH
25593: LD_INT 91
25595: PUSH
25596: LD_VAR 0 3
25600: PUSH
25601: LD_INT 30
25603: PUSH
25604: EMPTY
25605: LIST
25606: LIST
25607: LIST
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PPUSH
25613: CALL_OW 69
25617: PPUSH
25618: LD_VAR 0 3
25622: PPUSH
25623: CALL_OW 74
25627: PPUSH
25628: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
25632: LD_VAR 0 2
25636: PUSH
25637: LD_INT 60
25639: GREATER
25640: PUSH
25641: LD_VAR 0 3
25645: PPUSH
25646: CALL_OW 301
25650: OR
25651: IFFALSE 25528
// if un then
25653: LD_VAR 0 3
25657: IFFALSE 25668
// RemoveUnit ( un ) ;
25659: LD_VAR 0 3
25663: PPUSH
25664: CALL_OW 64
// end ;
25668: PPOPN 3
25670: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
25671: LD_INT 0
25673: PPUSH
// case cmd of 301 :
25674: LD_VAR 0 1
25678: PUSH
25679: LD_INT 301
25681: DOUBLE
25682: EQUAL
25683: IFTRUE 25687
25685: GO 25719
25687: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
25688: LD_VAR 0 6
25692: PPUSH
25693: LD_VAR 0 7
25697: PPUSH
25698: LD_VAR 0 8
25702: PPUSH
25703: LD_VAR 0 4
25707: PPUSH
25708: LD_VAR 0 5
25712: PPUSH
25713: CALL 26920 0 5
25717: GO 25840
25719: LD_INT 302
25721: DOUBLE
25722: EQUAL
25723: IFTRUE 25727
25725: GO 25764
25727: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
25728: LD_VAR 0 6
25732: PPUSH
25733: LD_VAR 0 7
25737: PPUSH
25738: LD_VAR 0 8
25742: PPUSH
25743: LD_VAR 0 9
25747: PPUSH
25748: LD_VAR 0 4
25752: PPUSH
25753: LD_VAR 0 5
25757: PPUSH
25758: CALL 27011 0 6
25762: GO 25840
25764: LD_INT 303
25766: DOUBLE
25767: EQUAL
25768: IFTRUE 25772
25770: GO 25809
25772: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
25773: LD_VAR 0 6
25777: PPUSH
25778: LD_VAR 0 7
25782: PPUSH
25783: LD_VAR 0 8
25787: PPUSH
25788: LD_VAR 0 9
25792: PPUSH
25793: LD_VAR 0 4
25797: PPUSH
25798: LD_VAR 0 5
25802: PPUSH
25803: CALL 25845 0 6
25807: GO 25840
25809: LD_INT 304
25811: DOUBLE
25812: EQUAL
25813: IFTRUE 25817
25815: GO 25839
25817: POP
// hHackTeleport ( unit , x , y ) ; end ;
25818: LD_VAR 0 2
25822: PPUSH
25823: LD_VAR 0 4
25827: PPUSH
25828: LD_VAR 0 5
25832: PPUSH
25833: CALL 27604 0 3
25837: GO 25840
25839: POP
// end ;
25840: LD_VAR 0 12
25844: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
25845: LD_INT 0
25847: PPUSH
25848: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
25849: LD_VAR 0 1
25853: PUSH
25854: LD_INT 1
25856: LESS
25857: PUSH
25858: LD_VAR 0 1
25862: PUSH
25863: LD_INT 3
25865: GREATER
25866: OR
25867: PUSH
25868: LD_VAR 0 5
25872: PPUSH
25873: LD_VAR 0 6
25877: PPUSH
25878: CALL_OW 428
25882: OR
25883: IFFALSE 25887
// exit ;
25885: GO 26607
// uc_side := your_side ;
25887: LD_ADDR_OWVAR 20
25891: PUSH
25892: LD_OWVAR 2
25896: ST_TO_ADDR
// uc_nation := nation ;
25897: LD_ADDR_OWVAR 21
25901: PUSH
25902: LD_VAR 0 1
25906: ST_TO_ADDR
// bc_level = 1 ;
25907: LD_ADDR_OWVAR 43
25911: PUSH
25912: LD_INT 1
25914: ST_TO_ADDR
// case btype of 1 :
25915: LD_VAR 0 2
25919: PUSH
25920: LD_INT 1
25922: DOUBLE
25923: EQUAL
25924: IFTRUE 25928
25926: GO 25939
25928: POP
// bc_type := b_depot ; 2 :
25929: LD_ADDR_OWVAR 42
25933: PUSH
25934: LD_INT 0
25936: ST_TO_ADDR
25937: GO 26551
25939: LD_INT 2
25941: DOUBLE
25942: EQUAL
25943: IFTRUE 25947
25945: GO 25958
25947: POP
// bc_type := b_warehouse ; 3 :
25948: LD_ADDR_OWVAR 42
25952: PUSH
25953: LD_INT 1
25955: ST_TO_ADDR
25956: GO 26551
25958: LD_INT 3
25960: DOUBLE
25961: EQUAL
25962: IFTRUE 25966
25964: GO 25977
25966: POP
// bc_type := b_lab ; 4 .. 9 :
25967: LD_ADDR_OWVAR 42
25971: PUSH
25972: LD_INT 6
25974: ST_TO_ADDR
25975: GO 26551
25977: LD_INT 4
25979: DOUBLE
25980: GREATEREQUAL
25981: IFFALSE 25989
25983: LD_INT 9
25985: DOUBLE
25986: LESSEQUAL
25987: IFTRUE 25991
25989: GO 26043
25991: POP
// begin bc_type := b_lab_half ;
25992: LD_ADDR_OWVAR 42
25996: PUSH
25997: LD_INT 7
25999: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
26000: LD_ADDR_OWVAR 44
26004: PUSH
26005: LD_INT 10
26007: PUSH
26008: LD_INT 11
26010: PUSH
26011: LD_INT 12
26013: PUSH
26014: LD_INT 15
26016: PUSH
26017: LD_INT 14
26019: PUSH
26020: LD_INT 13
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: LIST
26027: LIST
26028: LIST
26029: LIST
26030: PUSH
26031: LD_VAR 0 2
26035: PUSH
26036: LD_INT 3
26038: MINUS
26039: ARRAY
26040: ST_TO_ADDR
// end ; 10 .. 13 :
26041: GO 26551
26043: LD_INT 10
26045: DOUBLE
26046: GREATEREQUAL
26047: IFFALSE 26055
26049: LD_INT 13
26051: DOUBLE
26052: LESSEQUAL
26053: IFTRUE 26057
26055: GO 26134
26057: POP
// begin bc_type := b_lab_full ;
26058: LD_ADDR_OWVAR 42
26062: PUSH
26063: LD_INT 8
26065: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
26066: LD_ADDR_OWVAR 44
26070: PUSH
26071: LD_INT 10
26073: PUSH
26074: LD_INT 12
26076: PUSH
26077: LD_INT 14
26079: PUSH
26080: LD_INT 13
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: LIST
26087: LIST
26088: PUSH
26089: LD_VAR 0 2
26093: PUSH
26094: LD_INT 9
26096: MINUS
26097: ARRAY
26098: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
26099: LD_ADDR_OWVAR 45
26103: PUSH
26104: LD_INT 11
26106: PUSH
26107: LD_INT 15
26109: PUSH
26110: LD_INT 12
26112: PUSH
26113: LD_INT 15
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: PUSH
26122: LD_VAR 0 2
26126: PUSH
26127: LD_INT 9
26129: MINUS
26130: ARRAY
26131: ST_TO_ADDR
// end ; 14 :
26132: GO 26551
26134: LD_INT 14
26136: DOUBLE
26137: EQUAL
26138: IFTRUE 26142
26140: GO 26153
26142: POP
// bc_type := b_workshop ; 15 :
26143: LD_ADDR_OWVAR 42
26147: PUSH
26148: LD_INT 2
26150: ST_TO_ADDR
26151: GO 26551
26153: LD_INT 15
26155: DOUBLE
26156: EQUAL
26157: IFTRUE 26161
26159: GO 26172
26161: POP
// bc_type := b_factory ; 16 :
26162: LD_ADDR_OWVAR 42
26166: PUSH
26167: LD_INT 3
26169: ST_TO_ADDR
26170: GO 26551
26172: LD_INT 16
26174: DOUBLE
26175: EQUAL
26176: IFTRUE 26180
26178: GO 26191
26180: POP
// bc_type := b_ext_gun ; 17 :
26181: LD_ADDR_OWVAR 42
26185: PUSH
26186: LD_INT 17
26188: ST_TO_ADDR
26189: GO 26551
26191: LD_INT 17
26193: DOUBLE
26194: EQUAL
26195: IFTRUE 26199
26197: GO 26227
26199: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
26200: LD_ADDR_OWVAR 42
26204: PUSH
26205: LD_INT 19
26207: PUSH
26208: LD_INT 23
26210: PUSH
26211: LD_INT 19
26213: PUSH
26214: EMPTY
26215: LIST
26216: LIST
26217: LIST
26218: PUSH
26219: LD_VAR 0 1
26223: ARRAY
26224: ST_TO_ADDR
26225: GO 26551
26227: LD_INT 18
26229: DOUBLE
26230: EQUAL
26231: IFTRUE 26235
26233: GO 26246
26235: POP
// bc_type := b_ext_radar ; 19 :
26236: LD_ADDR_OWVAR 42
26240: PUSH
26241: LD_INT 20
26243: ST_TO_ADDR
26244: GO 26551
26246: LD_INT 19
26248: DOUBLE
26249: EQUAL
26250: IFTRUE 26254
26252: GO 26265
26254: POP
// bc_type := b_ext_radio ; 20 :
26255: LD_ADDR_OWVAR 42
26259: PUSH
26260: LD_INT 22
26262: ST_TO_ADDR
26263: GO 26551
26265: LD_INT 20
26267: DOUBLE
26268: EQUAL
26269: IFTRUE 26273
26271: GO 26284
26273: POP
// bc_type := b_ext_siberium ; 21 :
26274: LD_ADDR_OWVAR 42
26278: PUSH
26279: LD_INT 21
26281: ST_TO_ADDR
26282: GO 26551
26284: LD_INT 21
26286: DOUBLE
26287: EQUAL
26288: IFTRUE 26292
26290: GO 26303
26292: POP
// bc_type := b_ext_computer ; 22 :
26293: LD_ADDR_OWVAR 42
26297: PUSH
26298: LD_INT 24
26300: ST_TO_ADDR
26301: GO 26551
26303: LD_INT 22
26305: DOUBLE
26306: EQUAL
26307: IFTRUE 26311
26309: GO 26322
26311: POP
// bc_type := b_ext_track ; 23 :
26312: LD_ADDR_OWVAR 42
26316: PUSH
26317: LD_INT 16
26319: ST_TO_ADDR
26320: GO 26551
26322: LD_INT 23
26324: DOUBLE
26325: EQUAL
26326: IFTRUE 26330
26328: GO 26341
26330: POP
// bc_type := b_ext_laser ; 24 :
26331: LD_ADDR_OWVAR 42
26335: PUSH
26336: LD_INT 25
26338: ST_TO_ADDR
26339: GO 26551
26341: LD_INT 24
26343: DOUBLE
26344: EQUAL
26345: IFTRUE 26349
26347: GO 26360
26349: POP
// bc_type := b_control_tower ; 25 :
26350: LD_ADDR_OWVAR 42
26354: PUSH
26355: LD_INT 36
26357: ST_TO_ADDR
26358: GO 26551
26360: LD_INT 25
26362: DOUBLE
26363: EQUAL
26364: IFTRUE 26368
26366: GO 26379
26368: POP
// bc_type := b_breastwork ; 26 :
26369: LD_ADDR_OWVAR 42
26373: PUSH
26374: LD_INT 31
26376: ST_TO_ADDR
26377: GO 26551
26379: LD_INT 26
26381: DOUBLE
26382: EQUAL
26383: IFTRUE 26387
26385: GO 26398
26387: POP
// bc_type := b_bunker ; 27 :
26388: LD_ADDR_OWVAR 42
26392: PUSH
26393: LD_INT 32
26395: ST_TO_ADDR
26396: GO 26551
26398: LD_INT 27
26400: DOUBLE
26401: EQUAL
26402: IFTRUE 26406
26404: GO 26417
26406: POP
// bc_type := b_turret ; 28 :
26407: LD_ADDR_OWVAR 42
26411: PUSH
26412: LD_INT 33
26414: ST_TO_ADDR
26415: GO 26551
26417: LD_INT 28
26419: DOUBLE
26420: EQUAL
26421: IFTRUE 26425
26423: GO 26436
26425: POP
// bc_type := b_armoury ; 29 :
26426: LD_ADDR_OWVAR 42
26430: PUSH
26431: LD_INT 4
26433: ST_TO_ADDR
26434: GO 26551
26436: LD_INT 29
26438: DOUBLE
26439: EQUAL
26440: IFTRUE 26444
26442: GO 26455
26444: POP
// bc_type := b_barracks ; 30 :
26445: LD_ADDR_OWVAR 42
26449: PUSH
26450: LD_INT 5
26452: ST_TO_ADDR
26453: GO 26551
26455: LD_INT 30
26457: DOUBLE
26458: EQUAL
26459: IFTRUE 26463
26461: GO 26474
26463: POP
// bc_type := b_solar_power ; 31 :
26464: LD_ADDR_OWVAR 42
26468: PUSH
26469: LD_INT 27
26471: ST_TO_ADDR
26472: GO 26551
26474: LD_INT 31
26476: DOUBLE
26477: EQUAL
26478: IFTRUE 26482
26480: GO 26493
26482: POP
// bc_type := b_oil_power ; 32 :
26483: LD_ADDR_OWVAR 42
26487: PUSH
26488: LD_INT 26
26490: ST_TO_ADDR
26491: GO 26551
26493: LD_INT 32
26495: DOUBLE
26496: EQUAL
26497: IFTRUE 26501
26499: GO 26512
26501: POP
// bc_type := b_siberite_power ; 33 :
26502: LD_ADDR_OWVAR 42
26506: PUSH
26507: LD_INT 28
26509: ST_TO_ADDR
26510: GO 26551
26512: LD_INT 33
26514: DOUBLE
26515: EQUAL
26516: IFTRUE 26520
26518: GO 26531
26520: POP
// bc_type := b_oil_mine ; 34 :
26521: LD_ADDR_OWVAR 42
26525: PUSH
26526: LD_INT 29
26528: ST_TO_ADDR
26529: GO 26551
26531: LD_INT 34
26533: DOUBLE
26534: EQUAL
26535: IFTRUE 26539
26537: GO 26550
26539: POP
// bc_type := b_siberite_mine ; end ;
26540: LD_ADDR_OWVAR 42
26544: PUSH
26545: LD_INT 30
26547: ST_TO_ADDR
26548: GO 26551
26550: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
26551: LD_ADDR_VAR 0 8
26555: PUSH
26556: LD_VAR 0 5
26560: PPUSH
26561: LD_VAR 0 6
26565: PPUSH
26566: LD_VAR 0 3
26570: PPUSH
26571: CALL_OW 47
26575: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
26576: LD_OWVAR 42
26580: PUSH
26581: LD_INT 32
26583: PUSH
26584: LD_INT 33
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: IN
26591: IFFALSE 26607
// PlaceWeaponTurret ( b , weapon ) ;
26593: LD_VAR 0 8
26597: PPUSH
26598: LD_VAR 0 4
26602: PPUSH
26603: CALL_OW 431
// end ;
26607: LD_VAR 0 7
26611: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
26612: LD_INT 0
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
26618: LD_ADDR_VAR 0 4
26622: PUSH
26623: LD_INT 22
26625: PUSH
26626: LD_OWVAR 2
26630: PUSH
26631: EMPTY
26632: LIST
26633: LIST
26634: PUSH
26635: LD_INT 2
26637: PUSH
26638: LD_INT 30
26640: PUSH
26641: LD_INT 0
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 30
26650: PUSH
26651: LD_INT 1
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: EMPTY
26659: LIST
26660: LIST
26661: LIST
26662: PUSH
26663: EMPTY
26664: LIST
26665: LIST
26666: PPUSH
26667: CALL_OW 69
26671: ST_TO_ADDR
// if not tmp then
26672: LD_VAR 0 4
26676: NOT
26677: IFFALSE 26681
// exit ;
26679: GO 26740
// for i in tmp do
26681: LD_ADDR_VAR 0 2
26685: PUSH
26686: LD_VAR 0 4
26690: PUSH
26691: FOR_IN
26692: IFFALSE 26738
// for j = 1 to 3 do
26694: LD_ADDR_VAR 0 3
26698: PUSH
26699: DOUBLE
26700: LD_INT 1
26702: DEC
26703: ST_TO_ADDR
26704: LD_INT 3
26706: PUSH
26707: FOR_TO
26708: IFFALSE 26734
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
26710: LD_VAR 0 2
26714: PPUSH
26715: CALL_OW 274
26719: PPUSH
26720: LD_VAR 0 3
26724: PPUSH
26725: LD_INT 99999
26727: PPUSH
26728: CALL_OW 277
26732: GO 26707
26734: POP
26735: POP
26736: GO 26691
26738: POP
26739: POP
// end ;
26740: LD_VAR 0 1
26744: RET
// export function hHackSetLevel10 ; var i , j ; begin
26745: LD_INT 0
26747: PPUSH
26748: PPUSH
26749: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
26750: LD_ADDR_VAR 0 2
26754: PUSH
26755: LD_INT 21
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: EMPTY
26762: LIST
26763: LIST
26764: PPUSH
26765: CALL_OW 69
26769: PUSH
26770: FOR_IN
26771: IFFALSE 26823
// if IsSelected ( i ) then
26773: LD_VAR 0 2
26777: PPUSH
26778: CALL_OW 306
26782: IFFALSE 26821
// begin for j := 1 to 4 do
26784: LD_ADDR_VAR 0 3
26788: PUSH
26789: DOUBLE
26790: LD_INT 1
26792: DEC
26793: ST_TO_ADDR
26794: LD_INT 4
26796: PUSH
26797: FOR_TO
26798: IFFALSE 26819
// SetSkill ( i , j , 10 ) ;
26800: LD_VAR 0 2
26804: PPUSH
26805: LD_VAR 0 3
26809: PPUSH
26810: LD_INT 10
26812: PPUSH
26813: CALL_OW 237
26817: GO 26797
26819: POP
26820: POP
// end ;
26821: GO 26770
26823: POP
26824: POP
// end ;
26825: LD_VAR 0 1
26829: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
26830: LD_INT 0
26832: PPUSH
26833: PPUSH
26834: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
26835: LD_ADDR_VAR 0 2
26839: PUSH
26840: LD_INT 22
26842: PUSH
26843: LD_OWVAR 2
26847: PUSH
26848: EMPTY
26849: LIST
26850: LIST
26851: PUSH
26852: LD_INT 21
26854: PUSH
26855: LD_INT 1
26857: PUSH
26858: EMPTY
26859: LIST
26860: LIST
26861: PUSH
26862: EMPTY
26863: LIST
26864: LIST
26865: PPUSH
26866: CALL_OW 69
26870: PUSH
26871: FOR_IN
26872: IFFALSE 26913
// begin for j := 1 to 4 do
26874: LD_ADDR_VAR 0 3
26878: PUSH
26879: DOUBLE
26880: LD_INT 1
26882: DEC
26883: ST_TO_ADDR
26884: LD_INT 4
26886: PUSH
26887: FOR_TO
26888: IFFALSE 26909
// SetSkill ( i , j , 10 ) ;
26890: LD_VAR 0 2
26894: PPUSH
26895: LD_VAR 0 3
26899: PPUSH
26900: LD_INT 10
26902: PPUSH
26903: CALL_OW 237
26907: GO 26887
26909: POP
26910: POP
// end ;
26911: GO 26871
26913: POP
26914: POP
// end ;
26915: LD_VAR 0 1
26919: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
26920: LD_INT 0
26922: PPUSH
// uc_side := your_side ;
26923: LD_ADDR_OWVAR 20
26927: PUSH
26928: LD_OWVAR 2
26932: ST_TO_ADDR
// uc_nation := nation ;
26933: LD_ADDR_OWVAR 21
26937: PUSH
26938: LD_VAR 0 1
26942: ST_TO_ADDR
// InitHc ;
26943: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
26947: LD_INT 0
26949: PPUSH
26950: LD_VAR 0 2
26954: PPUSH
26955: LD_VAR 0 3
26959: PPUSH
26960: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
26964: LD_VAR 0 4
26968: PPUSH
26969: LD_VAR 0 5
26973: PPUSH
26974: CALL_OW 428
26978: PUSH
26979: LD_INT 0
26981: EQUAL
26982: IFFALSE 27006
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
26984: CALL_OW 44
26988: PPUSH
26989: LD_VAR 0 4
26993: PPUSH
26994: LD_VAR 0 5
26998: PPUSH
26999: LD_INT 1
27001: PPUSH
27002: CALL_OW 48
// end ;
27006: LD_VAR 0 6
27010: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
27011: LD_INT 0
27013: PPUSH
27014: PPUSH
// uc_side := your_side ;
27015: LD_ADDR_OWVAR 20
27019: PUSH
27020: LD_OWVAR 2
27024: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
27025: LD_VAR 0 1
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: LD_INT 4
27041: PUSH
27042: LD_INT 5
27044: PUSH
27045: EMPTY
27046: LIST
27047: LIST
27048: LIST
27049: LIST
27050: LIST
27051: IN
27052: IFFALSE 27064
// uc_nation := nation_american else
27054: LD_ADDR_OWVAR 21
27058: PUSH
27059: LD_INT 1
27061: ST_TO_ADDR
27062: GO 27107
// if chassis in [ 11 , 12 , 13 , 14 ] then
27064: LD_VAR 0 1
27068: PUSH
27069: LD_INT 11
27071: PUSH
27072: LD_INT 12
27074: PUSH
27075: LD_INT 13
27077: PUSH
27078: LD_INT 14
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: LIST
27085: LIST
27086: IN
27087: IFFALSE 27099
// uc_nation := nation_arabian else
27089: LD_ADDR_OWVAR 21
27093: PUSH
27094: LD_INT 2
27096: ST_TO_ADDR
27097: GO 27107
// uc_nation := nation_russian ;
27099: LD_ADDR_OWVAR 21
27103: PUSH
27104: LD_INT 3
27106: ST_TO_ADDR
// vc_chassis := chassis ;
27107: LD_ADDR_OWVAR 37
27111: PUSH
27112: LD_VAR 0 1
27116: ST_TO_ADDR
// vc_engine := engine ;
27117: LD_ADDR_OWVAR 39
27121: PUSH
27122: LD_VAR 0 2
27126: ST_TO_ADDR
// vc_control := control ;
27127: LD_ADDR_OWVAR 38
27131: PUSH
27132: LD_VAR 0 3
27136: ST_TO_ADDR
// vc_weapon := weapon ;
27137: LD_ADDR_OWVAR 40
27141: PUSH
27142: LD_VAR 0 4
27146: ST_TO_ADDR
// un := CreateVehicle ;
27147: LD_ADDR_VAR 0 8
27151: PUSH
27152: CALL_OW 45
27156: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
27157: LD_VAR 0 8
27161: PPUSH
27162: LD_INT 0
27164: PPUSH
27165: LD_INT 5
27167: PPUSH
27168: CALL_OW 12
27172: PPUSH
27173: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
27177: LD_VAR 0 8
27181: PPUSH
27182: LD_VAR 0 5
27186: PPUSH
27187: LD_VAR 0 6
27191: PPUSH
27192: LD_INT 1
27194: PPUSH
27195: CALL_OW 48
// end ;
27199: LD_VAR 0 7
27203: RET
// export hInvincible ; every 1 do
27204: GO 27206
27206: DISABLE
// hInvincible := [ ] ;
27207: LD_ADDR_EXP 111
27211: PUSH
27212: EMPTY
27213: ST_TO_ADDR
27214: END
// every 10 do var i ;
27215: GO 27217
27217: DISABLE
27218: LD_INT 0
27220: PPUSH
// begin enable ;
27221: ENABLE
// if not hInvincible then
27222: LD_EXP 111
27226: NOT
27227: IFFALSE 27231
// exit ;
27229: GO 27275
// for i in hInvincible do
27231: LD_ADDR_VAR 0 1
27235: PUSH
27236: LD_EXP 111
27240: PUSH
27241: FOR_IN
27242: IFFALSE 27273
// if GetLives ( i ) < 1000 then
27244: LD_VAR 0 1
27248: PPUSH
27249: CALL_OW 256
27253: PUSH
27254: LD_INT 1000
27256: LESS
27257: IFFALSE 27271
// SetLives ( i , 1000 ) ;
27259: LD_VAR 0 1
27263: PPUSH
27264: LD_INT 1000
27266: PPUSH
27267: CALL_OW 234
27271: GO 27241
27273: POP
27274: POP
// end ;
27275: PPOPN 1
27277: END
// export function hHackInvincible ; var i ; begin
27278: LD_INT 0
27280: PPUSH
27281: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
27282: LD_ADDR_VAR 0 2
27286: PUSH
27287: LD_INT 2
27289: PUSH
27290: LD_INT 21
27292: PUSH
27293: LD_INT 1
27295: PUSH
27296: EMPTY
27297: LIST
27298: LIST
27299: PUSH
27300: LD_INT 21
27302: PUSH
27303: LD_INT 2
27305: PUSH
27306: EMPTY
27307: LIST
27308: LIST
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: PPUSH
27315: CALL_OW 69
27319: PUSH
27320: FOR_IN
27321: IFFALSE 27382
// if IsSelected ( i ) then
27323: LD_VAR 0 2
27327: PPUSH
27328: CALL_OW 306
27332: IFFALSE 27380
// begin if i in hInvincible then
27334: LD_VAR 0 2
27338: PUSH
27339: LD_EXP 111
27343: IN
27344: IFFALSE 27364
// hInvincible := hInvincible diff i else
27346: LD_ADDR_EXP 111
27350: PUSH
27351: LD_EXP 111
27355: PUSH
27356: LD_VAR 0 2
27360: DIFF
27361: ST_TO_ADDR
27362: GO 27380
// hInvincible := hInvincible union i ;
27364: LD_ADDR_EXP 111
27368: PUSH
27369: LD_EXP 111
27373: PUSH
27374: LD_VAR 0 2
27378: UNION
27379: ST_TO_ADDR
// end ;
27380: GO 27320
27382: POP
27383: POP
// end ;
27384: LD_VAR 0 1
27388: RET
// export function hHackInvisible ; var i , j ; begin
27389: LD_INT 0
27391: PPUSH
27392: PPUSH
27393: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
27394: LD_ADDR_VAR 0 2
27398: PUSH
27399: LD_INT 21
27401: PUSH
27402: LD_INT 1
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: PPUSH
27409: CALL_OW 69
27413: PUSH
27414: FOR_IN
27415: IFFALSE 27439
// if IsSelected ( i ) then
27417: LD_VAR 0 2
27421: PPUSH
27422: CALL_OW 306
27426: IFFALSE 27437
// ComForceInvisible ( i ) ;
27428: LD_VAR 0 2
27432: PPUSH
27433: CALL_OW 496
27437: GO 27414
27439: POP
27440: POP
// end ;
27441: LD_VAR 0 1
27445: RET
// export function hHackChangeYourSide ; begin
27446: LD_INT 0
27448: PPUSH
// if your_side = 8 then
27449: LD_OWVAR 2
27453: PUSH
27454: LD_INT 8
27456: EQUAL
27457: IFFALSE 27469
// your_side := 0 else
27459: LD_ADDR_OWVAR 2
27463: PUSH
27464: LD_INT 0
27466: ST_TO_ADDR
27467: GO 27483
// your_side := your_side + 1 ;
27469: LD_ADDR_OWVAR 2
27473: PUSH
27474: LD_OWVAR 2
27478: PUSH
27479: LD_INT 1
27481: PLUS
27482: ST_TO_ADDR
// end ;
27483: LD_VAR 0 1
27487: RET
// export function hHackChangeUnitSide ; var i , j ; begin
27488: LD_INT 0
27490: PPUSH
27491: PPUSH
27492: PPUSH
// for i in all_units do
27493: LD_ADDR_VAR 0 2
27497: PUSH
27498: LD_OWVAR 3
27502: PUSH
27503: FOR_IN
27504: IFFALSE 27582
// if IsSelected ( i ) then
27506: LD_VAR 0 2
27510: PPUSH
27511: CALL_OW 306
27515: IFFALSE 27580
// begin j := GetSide ( i ) ;
27517: LD_ADDR_VAR 0 3
27521: PUSH
27522: LD_VAR 0 2
27526: PPUSH
27527: CALL_OW 255
27531: ST_TO_ADDR
// if j = 8 then
27532: LD_VAR 0 3
27536: PUSH
27537: LD_INT 8
27539: EQUAL
27540: IFFALSE 27552
// j := 0 else
27542: LD_ADDR_VAR 0 3
27546: PUSH
27547: LD_INT 0
27549: ST_TO_ADDR
27550: GO 27566
// j := j + 1 ;
27552: LD_ADDR_VAR 0 3
27556: PUSH
27557: LD_VAR 0 3
27561: PUSH
27562: LD_INT 1
27564: PLUS
27565: ST_TO_ADDR
// SetSide ( i , j ) ;
27566: LD_VAR 0 2
27570: PPUSH
27571: LD_VAR 0 3
27575: PPUSH
27576: CALL_OW 235
// end ;
27580: GO 27503
27582: POP
27583: POP
// end ;
27584: LD_VAR 0 1
27588: RET
// export function hHackFog ; begin
27589: LD_INT 0
27591: PPUSH
// FogOff ( true ) ;
27592: LD_INT 1
27594: PPUSH
27595: CALL_OW 344
// end ;
27599: LD_VAR 0 1
27603: RET
// export function hHackTeleport ( unit , x , y ) ; begin
27604: LD_INT 0
27606: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
27607: LD_VAR 0 1
27611: PPUSH
27612: LD_VAR 0 2
27616: PPUSH
27617: LD_VAR 0 3
27621: PPUSH
27622: LD_INT 1
27624: PPUSH
27625: LD_INT 1
27627: PPUSH
27628: CALL_OW 483
// CenterOnXY ( x , y ) ;
27632: LD_VAR 0 2
27636: PPUSH
27637: LD_VAR 0 3
27641: PPUSH
27642: CALL_OW 84
// end ; end_of_file
27646: LD_VAR 0 4
27650: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
27651: LD_INT 0
27653: PPUSH
27654: PPUSH
27655: PPUSH
27656: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27657: LD_VAR 0 1
27661: PPUSH
27662: CALL_OW 264
27666: PUSH
27667: LD_EXP 128
27671: EQUAL
27672: IFFALSE 27744
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27674: LD_INT 68
27676: PPUSH
27677: LD_VAR 0 1
27681: PPUSH
27682: CALL_OW 255
27686: PPUSH
27687: CALL_OW 321
27691: PUSH
27692: LD_INT 2
27694: EQUAL
27695: IFFALSE 27707
// eff := 70 else
27697: LD_ADDR_VAR 0 4
27701: PUSH
27702: LD_INT 70
27704: ST_TO_ADDR
27705: GO 27715
// eff := 30 ;
27707: LD_ADDR_VAR 0 4
27711: PUSH
27712: LD_INT 30
27714: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27715: LD_VAR 0 1
27719: PPUSH
27720: CALL_OW 250
27724: PPUSH
27725: LD_VAR 0 1
27729: PPUSH
27730: CALL_OW 251
27734: PPUSH
27735: LD_VAR 0 4
27739: PPUSH
27740: CALL_OW 495
// end ; end ;
27744: LD_VAR 0 2
27748: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
27749: LD_INT 0
27751: PPUSH
// end ;
27752: LD_VAR 0 4
27756: RET
// export function SOS_Command ( cmd ) ; begin
27757: LD_INT 0
27759: PPUSH
// end ;
27760: LD_VAR 0 2
27764: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
27765: LD_INT 0
27767: PPUSH
// if cmd = 121 then
27768: LD_VAR 0 1
27772: PUSH
27773: LD_INT 121
27775: EQUAL
27776: IFFALSE 27778
// end ;
27778: LD_VAR 0 6
27782: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
27783: LD_INT 0
27785: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
27786: LD_VAR 0 1
27790: PUSH
27791: LD_INT 250
27793: EQUAL
27794: PUSH
27795: LD_VAR 0 2
27799: PPUSH
27800: CALL_OW 264
27804: PUSH
27805: LD_EXP 131
27809: EQUAL
27810: AND
27811: IFFALSE 27832
// MinerPlaceMine ( unit , x , y ) ;
27813: LD_VAR 0 2
27817: PPUSH
27818: LD_VAR 0 4
27822: PPUSH
27823: LD_VAR 0 5
27827: PPUSH
27828: CALL 30181 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
27832: LD_VAR 0 1
27836: PUSH
27837: LD_INT 251
27839: EQUAL
27840: PUSH
27841: LD_VAR 0 2
27845: PPUSH
27846: CALL_OW 264
27850: PUSH
27851: LD_EXP 131
27855: EQUAL
27856: AND
27857: IFFALSE 27878
// MinerDetonateMine ( unit , x , y ) ;
27859: LD_VAR 0 2
27863: PPUSH
27864: LD_VAR 0 4
27868: PPUSH
27869: LD_VAR 0 5
27873: PPUSH
27874: CALL 30458 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
27878: LD_VAR 0 1
27882: PUSH
27883: LD_INT 252
27885: EQUAL
27886: PUSH
27887: LD_VAR 0 2
27891: PPUSH
27892: CALL_OW 264
27896: PUSH
27897: LD_EXP 131
27901: EQUAL
27902: AND
27903: IFFALSE 27924
// MinerCreateMinefield ( unit , x , y ) ;
27905: LD_VAR 0 2
27909: PPUSH
27910: LD_VAR 0 4
27914: PPUSH
27915: LD_VAR 0 5
27919: PPUSH
27920: CALL 30875 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
27924: LD_VAR 0 1
27928: PUSH
27929: LD_INT 253
27931: EQUAL
27932: PUSH
27933: LD_VAR 0 2
27937: PPUSH
27938: CALL_OW 257
27942: PUSH
27943: LD_INT 5
27945: EQUAL
27946: AND
27947: IFFALSE 27968
// ComBinocular ( unit , x , y ) ;
27949: LD_VAR 0 2
27953: PPUSH
27954: LD_VAR 0 4
27958: PPUSH
27959: LD_VAR 0 5
27963: PPUSH
27964: CALL 31246 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
27968: LD_VAR 0 1
27972: PUSH
27973: LD_INT 254
27975: EQUAL
27976: PUSH
27977: LD_VAR 0 2
27981: PPUSH
27982: CALL_OW 264
27986: PUSH
27987: LD_EXP 126
27991: EQUAL
27992: AND
27993: PUSH
27994: LD_VAR 0 3
27998: PPUSH
27999: CALL_OW 263
28003: PUSH
28004: LD_INT 3
28006: EQUAL
28007: AND
28008: IFFALSE 28024
// HackDestroyVehicle ( unit , selectedUnit ) ;
28010: LD_VAR 0 2
28014: PPUSH
28015: LD_VAR 0 3
28019: PPUSH
28020: CALL 29541 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
28024: LD_VAR 0 1
28028: PUSH
28029: LD_INT 255
28031: EQUAL
28032: PUSH
28033: LD_VAR 0 2
28037: PPUSH
28038: CALL_OW 264
28042: PUSH
28043: LD_INT 14
28045: PUSH
28046: LD_INT 53
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: IN
28053: AND
28054: PUSH
28055: LD_VAR 0 4
28059: PPUSH
28060: LD_VAR 0 5
28064: PPUSH
28065: CALL_OW 488
28069: AND
28070: IFFALSE 28094
// CutTreeXYR ( unit , x , y , 12 ) ;
28072: LD_VAR 0 2
28076: PPUSH
28077: LD_VAR 0 4
28081: PPUSH
28082: LD_VAR 0 5
28086: PPUSH
28087: LD_INT 12
28089: PPUSH
28090: CALL 28107 0 4
// end ;
28094: LD_VAR 0 6
28098: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
28099: LD_INT 0
28101: PPUSH
// end ;
28102: LD_VAR 0 4
28106: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28107: LD_INT 0
28109: PPUSH
28110: PPUSH
28111: PPUSH
28112: PPUSH
28113: PPUSH
28114: PPUSH
28115: PPUSH
28116: PPUSH
28117: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28118: LD_VAR 0 1
28122: NOT
28123: PUSH
28124: LD_VAR 0 2
28128: PPUSH
28129: LD_VAR 0 3
28133: PPUSH
28134: CALL_OW 488
28138: NOT
28139: OR
28140: PUSH
28141: LD_VAR 0 4
28145: NOT
28146: OR
28147: IFFALSE 28151
// exit ;
28149: GO 28491
// list := [ ] ;
28151: LD_ADDR_VAR 0 13
28155: PUSH
28156: EMPTY
28157: ST_TO_ADDR
// if x - r < 0 then
28158: LD_VAR 0 2
28162: PUSH
28163: LD_VAR 0 4
28167: MINUS
28168: PUSH
28169: LD_INT 0
28171: LESS
28172: IFFALSE 28184
// min_x := 0 else
28174: LD_ADDR_VAR 0 7
28178: PUSH
28179: LD_INT 0
28181: ST_TO_ADDR
28182: GO 28200
// min_x := x - r ;
28184: LD_ADDR_VAR 0 7
28188: PUSH
28189: LD_VAR 0 2
28193: PUSH
28194: LD_VAR 0 4
28198: MINUS
28199: ST_TO_ADDR
// if y - r < 0 then
28200: LD_VAR 0 3
28204: PUSH
28205: LD_VAR 0 4
28209: MINUS
28210: PUSH
28211: LD_INT 0
28213: LESS
28214: IFFALSE 28226
// min_y := 0 else
28216: LD_ADDR_VAR 0 8
28220: PUSH
28221: LD_INT 0
28223: ST_TO_ADDR
28224: GO 28242
// min_y := y - r ;
28226: LD_ADDR_VAR 0 8
28230: PUSH
28231: LD_VAR 0 3
28235: PUSH
28236: LD_VAR 0 4
28240: MINUS
28241: ST_TO_ADDR
// max_x := x + r ;
28242: LD_ADDR_VAR 0 9
28246: PUSH
28247: LD_VAR 0 2
28251: PUSH
28252: LD_VAR 0 4
28256: PLUS
28257: ST_TO_ADDR
// max_y := y + r ;
28258: LD_ADDR_VAR 0 10
28262: PUSH
28263: LD_VAR 0 3
28267: PUSH
28268: LD_VAR 0 4
28272: PLUS
28273: ST_TO_ADDR
// for _x = min_x to max_x do
28274: LD_ADDR_VAR 0 11
28278: PUSH
28279: DOUBLE
28280: LD_VAR 0 7
28284: DEC
28285: ST_TO_ADDR
28286: LD_VAR 0 9
28290: PUSH
28291: FOR_TO
28292: IFFALSE 28409
// for _y = min_y to max_y do
28294: LD_ADDR_VAR 0 12
28298: PUSH
28299: DOUBLE
28300: LD_VAR 0 8
28304: DEC
28305: ST_TO_ADDR
28306: LD_VAR 0 10
28310: PUSH
28311: FOR_TO
28312: IFFALSE 28405
// begin if not ValidHex ( _x , _y ) then
28314: LD_VAR 0 11
28318: PPUSH
28319: LD_VAR 0 12
28323: PPUSH
28324: CALL_OW 488
28328: NOT
28329: IFFALSE 28333
// continue ;
28331: GO 28311
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28333: LD_VAR 0 11
28337: PPUSH
28338: LD_VAR 0 12
28342: PPUSH
28343: CALL_OW 351
28347: PUSH
28348: LD_VAR 0 11
28352: PPUSH
28353: LD_VAR 0 12
28357: PPUSH
28358: CALL_OW 554
28362: AND
28363: IFFALSE 28403
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28365: LD_ADDR_VAR 0 13
28369: PUSH
28370: LD_VAR 0 13
28374: PPUSH
28375: LD_VAR 0 13
28379: PUSH
28380: LD_INT 1
28382: PLUS
28383: PPUSH
28384: LD_VAR 0 11
28388: PUSH
28389: LD_VAR 0 12
28393: PUSH
28394: EMPTY
28395: LIST
28396: LIST
28397: PPUSH
28398: CALL_OW 2
28402: ST_TO_ADDR
// end ;
28403: GO 28311
28405: POP
28406: POP
28407: GO 28291
28409: POP
28410: POP
// if not list then
28411: LD_VAR 0 13
28415: NOT
28416: IFFALSE 28420
// exit ;
28418: GO 28491
// for i in list do
28420: LD_ADDR_VAR 0 6
28424: PUSH
28425: LD_VAR 0 13
28429: PUSH
28430: FOR_IN
28431: IFFALSE 28489
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28433: LD_VAR 0 1
28437: PPUSH
28438: LD_STRING M
28440: PUSH
28441: LD_VAR 0 6
28445: PUSH
28446: LD_INT 1
28448: ARRAY
28449: PUSH
28450: LD_VAR 0 6
28454: PUSH
28455: LD_INT 2
28457: ARRAY
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: LD_INT 0
28464: PUSH
28465: LD_INT 0
28467: PUSH
28468: LD_INT 0
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: LIST
28476: LIST
28477: LIST
28478: LIST
28479: PUSH
28480: EMPTY
28481: LIST
28482: PPUSH
28483: CALL_OW 447
28487: GO 28430
28489: POP
28490: POP
// end ;
28491: LD_VAR 0 5
28495: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
28496: LD_EXP 114
28500: NOT
28501: IFFALSE 28551
28503: GO 28505
28505: DISABLE
// begin initHack := true ;
28506: LD_ADDR_EXP 114
28510: PUSH
28511: LD_INT 1
28513: ST_TO_ADDR
// hackTanks := [ ] ;
28514: LD_ADDR_EXP 115
28518: PUSH
28519: EMPTY
28520: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
28521: LD_ADDR_EXP 116
28525: PUSH
28526: EMPTY
28527: ST_TO_ADDR
// hackLimit := 3 ;
28528: LD_ADDR_EXP 117
28532: PUSH
28533: LD_INT 3
28535: ST_TO_ADDR
// hackDist := 12 ;
28536: LD_ADDR_EXP 118
28540: PUSH
28541: LD_INT 12
28543: ST_TO_ADDR
// hackCounter := [ ] ;
28544: LD_ADDR_EXP 119
28548: PUSH
28549: EMPTY
28550: ST_TO_ADDR
// end ;
28551: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
28552: LD_EXP 114
28556: PUSH
28557: LD_INT 34
28559: PUSH
28560: LD_EXP 126
28564: PUSH
28565: EMPTY
28566: LIST
28567: LIST
28568: PPUSH
28569: CALL_OW 69
28573: AND
28574: IFFALSE 28829
28576: GO 28578
28578: DISABLE
28579: LD_INT 0
28581: PPUSH
28582: PPUSH
// begin enable ;
28583: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
28584: LD_ADDR_VAR 0 1
28588: PUSH
28589: LD_INT 34
28591: PUSH
28592: LD_EXP 126
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PPUSH
28601: CALL_OW 69
28605: PUSH
28606: FOR_IN
28607: IFFALSE 28827
// begin if not i in hackTanks then
28609: LD_VAR 0 1
28613: PUSH
28614: LD_EXP 115
28618: IN
28619: NOT
28620: IFFALSE 28703
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
28622: LD_ADDR_EXP 115
28626: PUSH
28627: LD_EXP 115
28631: PPUSH
28632: LD_EXP 115
28636: PUSH
28637: LD_INT 1
28639: PLUS
28640: PPUSH
28641: LD_VAR 0 1
28645: PPUSH
28646: CALL_OW 1
28650: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
28651: LD_ADDR_EXP 116
28655: PUSH
28656: LD_EXP 116
28660: PPUSH
28661: LD_EXP 116
28665: PUSH
28666: LD_INT 1
28668: PLUS
28669: PPUSH
28670: EMPTY
28671: PPUSH
28672: CALL_OW 1
28676: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
28677: LD_ADDR_EXP 119
28681: PUSH
28682: LD_EXP 119
28686: PPUSH
28687: LD_EXP 119
28691: PUSH
28692: LD_INT 1
28694: PLUS
28695: PPUSH
28696: EMPTY
28697: PPUSH
28698: CALL_OW 1
28702: ST_TO_ADDR
// end ; if not IsOk ( i ) then
28703: LD_VAR 0 1
28707: PPUSH
28708: CALL_OW 302
28712: NOT
28713: IFFALSE 28726
// begin HackUnlinkAll ( i ) ;
28715: LD_VAR 0 1
28719: PPUSH
28720: CALL 28832 0 1
// continue ;
28724: GO 28606
// end ; HackCheckCapturedStatus ( i ) ;
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL 29275 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
28735: LD_ADDR_VAR 0 2
28739: PUSH
28740: LD_INT 81
28742: PUSH
28743: LD_VAR 0 1
28747: PPUSH
28748: CALL_OW 255
28752: PUSH
28753: EMPTY
28754: LIST
28755: LIST
28756: PUSH
28757: LD_INT 33
28759: PUSH
28760: LD_INT 3
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: PUSH
28767: LD_INT 91
28769: PUSH
28770: LD_VAR 0 1
28774: PUSH
28775: LD_EXP 118
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: PUSH
28785: LD_INT 50
28787: PUSH
28788: EMPTY
28789: LIST
28790: PUSH
28791: EMPTY
28792: LIST
28793: LIST
28794: LIST
28795: LIST
28796: PPUSH
28797: CALL_OW 69
28801: ST_TO_ADDR
// if not tmp then
28802: LD_VAR 0 2
28806: NOT
28807: IFFALSE 28811
// continue ;
28809: GO 28606
// HackLink ( i , tmp ) ;
28811: LD_VAR 0 1
28815: PPUSH
28816: LD_VAR 0 2
28820: PPUSH
28821: CALL 28968 0 2
// end ;
28825: GO 28606
28827: POP
28828: POP
// end ;
28829: PPOPN 2
28831: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
28832: LD_INT 0
28834: PPUSH
28835: PPUSH
28836: PPUSH
// if not hack in hackTanks then
28837: LD_VAR 0 1
28841: PUSH
28842: LD_EXP 115
28846: IN
28847: NOT
28848: IFFALSE 28852
// exit ;
28850: GO 28963
// index := GetElementIndex ( hackTanks , hack ) ;
28852: LD_ADDR_VAR 0 4
28856: PUSH
28857: LD_EXP 115
28861: PPUSH
28862: LD_VAR 0 1
28866: PPUSH
28867: CALL 36704 0 2
28871: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
28872: LD_EXP 116
28876: PUSH
28877: LD_VAR 0 4
28881: ARRAY
28882: IFFALSE 28963
// begin for i in hackTanksCaptured [ index ] do
28884: LD_ADDR_VAR 0 3
28888: PUSH
28889: LD_EXP 116
28893: PUSH
28894: LD_VAR 0 4
28898: ARRAY
28899: PUSH
28900: FOR_IN
28901: IFFALSE 28927
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
28903: LD_VAR 0 3
28907: PUSH
28908: LD_INT 1
28910: ARRAY
28911: PPUSH
28912: LD_VAR 0 3
28916: PUSH
28917: LD_INT 2
28919: ARRAY
28920: PPUSH
28921: CALL_OW 235
28925: GO 28900
28927: POP
28928: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
28929: LD_ADDR_EXP 116
28933: PUSH
28934: LD_EXP 116
28938: PPUSH
28939: LD_VAR 0 4
28943: PPUSH
28944: EMPTY
28945: PPUSH
28946: CALL_OW 1
28950: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
28951: LD_VAR 0 1
28955: PPUSH
28956: LD_INT 0
28958: PPUSH
28959: CALL_OW 505
// end ; end ;
28963: LD_VAR 0 2
28967: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
28968: LD_INT 0
28970: PPUSH
28971: PPUSH
28972: PPUSH
// if not hack in hackTanks or not vehicles then
28973: LD_VAR 0 1
28977: PUSH
28978: LD_EXP 115
28982: IN
28983: NOT
28984: PUSH
28985: LD_VAR 0 2
28989: NOT
28990: OR
28991: IFFALSE 28995
// exit ;
28993: GO 29270
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
28995: LD_ADDR_VAR 0 2
28999: PUSH
29000: LD_VAR 0 1
29004: PPUSH
29005: LD_VAR 0 2
29009: PPUSH
29010: LD_INT 1
29012: PPUSH
29013: LD_INT 1
29015: PPUSH
29016: CALL 37354 0 4
29020: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
29021: LD_ADDR_VAR 0 5
29025: PUSH
29026: LD_EXP 115
29030: PPUSH
29031: LD_VAR 0 1
29035: PPUSH
29036: CALL 36704 0 2
29040: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
29041: LD_EXP 116
29045: PUSH
29046: LD_VAR 0 5
29050: ARRAY
29051: PUSH
29052: LD_EXP 117
29056: LESS
29057: IFFALSE 29246
// begin for i := 1 to vehicles do
29059: LD_ADDR_VAR 0 4
29063: PUSH
29064: DOUBLE
29065: LD_INT 1
29067: DEC
29068: ST_TO_ADDR
29069: LD_VAR 0 2
29073: PUSH
29074: FOR_TO
29075: IFFALSE 29244
// begin if hackTanksCaptured [ index ] = hackLimit then
29077: LD_EXP 116
29081: PUSH
29082: LD_VAR 0 5
29086: ARRAY
29087: PUSH
29088: LD_EXP 117
29092: EQUAL
29093: IFFALSE 29097
// break ;
29095: GO 29244
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
29097: LD_ADDR_EXP 119
29101: PUSH
29102: LD_EXP 119
29106: PPUSH
29107: LD_VAR 0 5
29111: PPUSH
29112: LD_EXP 119
29116: PUSH
29117: LD_VAR 0 5
29121: ARRAY
29122: PUSH
29123: LD_INT 1
29125: PLUS
29126: PPUSH
29127: CALL_OW 1
29131: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
29132: LD_ADDR_EXP 116
29136: PUSH
29137: LD_EXP 116
29141: PPUSH
29142: LD_VAR 0 5
29146: PUSH
29147: LD_EXP 116
29151: PUSH
29152: LD_VAR 0 5
29156: ARRAY
29157: PUSH
29158: LD_INT 1
29160: PLUS
29161: PUSH
29162: EMPTY
29163: LIST
29164: LIST
29165: PPUSH
29166: LD_VAR 0 2
29170: PUSH
29171: LD_VAR 0 4
29175: ARRAY
29176: PUSH
29177: LD_VAR 0 2
29181: PUSH
29182: LD_VAR 0 4
29186: ARRAY
29187: PPUSH
29188: CALL_OW 255
29192: PUSH
29193: EMPTY
29194: LIST
29195: LIST
29196: PPUSH
29197: CALL 36919 0 3
29201: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
29202: LD_VAR 0 2
29206: PUSH
29207: LD_VAR 0 4
29211: ARRAY
29212: PPUSH
29213: LD_VAR 0 1
29217: PPUSH
29218: CALL_OW 255
29222: PPUSH
29223: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
29227: LD_VAR 0 2
29231: PUSH
29232: LD_VAR 0 4
29236: ARRAY
29237: PPUSH
29238: CALL_OW 141
// end ;
29242: GO 29074
29244: POP
29245: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29246: LD_VAR 0 1
29250: PPUSH
29251: LD_EXP 116
29255: PUSH
29256: LD_VAR 0 5
29260: ARRAY
29261: PUSH
29262: LD_INT 0
29264: PLUS
29265: PPUSH
29266: CALL_OW 505
// end ;
29270: LD_VAR 0 3
29274: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
29275: LD_INT 0
29277: PPUSH
29278: PPUSH
29279: PPUSH
29280: PPUSH
// if not hack in hackTanks then
29281: LD_VAR 0 1
29285: PUSH
29286: LD_EXP 115
29290: IN
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 29536
// index := GetElementIndex ( hackTanks , hack ) ;
29296: LD_ADDR_VAR 0 4
29300: PUSH
29301: LD_EXP 115
29305: PPUSH
29306: LD_VAR 0 1
29310: PPUSH
29311: CALL 36704 0 2
29315: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
29316: LD_ADDR_VAR 0 3
29320: PUSH
29321: DOUBLE
29322: LD_EXP 116
29326: PUSH
29327: LD_VAR 0 4
29331: ARRAY
29332: INC
29333: ST_TO_ADDR
29334: LD_INT 1
29336: PUSH
29337: FOR_DOWNTO
29338: IFFALSE 29510
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
29340: LD_ADDR_VAR 0 5
29344: PUSH
29345: LD_EXP 116
29349: PUSH
29350: LD_VAR 0 4
29354: ARRAY
29355: PUSH
29356: LD_VAR 0 3
29360: ARRAY
29361: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
29362: LD_VAR 0 5
29366: PUSH
29367: LD_INT 1
29369: ARRAY
29370: PPUSH
29371: CALL_OW 302
29375: NOT
29376: PUSH
29377: LD_VAR 0 5
29381: PUSH
29382: LD_INT 1
29384: ARRAY
29385: PPUSH
29386: CALL_OW 255
29390: PUSH
29391: LD_VAR 0 1
29395: PPUSH
29396: CALL_OW 255
29400: NONEQUAL
29401: OR
29402: IFFALSE 29508
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
29404: LD_VAR 0 5
29408: PUSH
29409: LD_INT 1
29411: ARRAY
29412: PPUSH
29413: CALL_OW 305
29417: PUSH
29418: LD_VAR 0 5
29422: PUSH
29423: LD_INT 1
29425: ARRAY
29426: PPUSH
29427: CALL_OW 255
29431: PUSH
29432: LD_VAR 0 1
29436: PPUSH
29437: CALL_OW 255
29441: EQUAL
29442: AND
29443: IFFALSE 29467
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
29445: LD_VAR 0 5
29449: PUSH
29450: LD_INT 1
29452: ARRAY
29453: PPUSH
29454: LD_VAR 0 5
29458: PUSH
29459: LD_INT 2
29461: ARRAY
29462: PPUSH
29463: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
29467: LD_ADDR_EXP 116
29471: PUSH
29472: LD_EXP 116
29476: PPUSH
29477: LD_VAR 0 4
29481: PPUSH
29482: LD_EXP 116
29486: PUSH
29487: LD_VAR 0 4
29491: ARRAY
29492: PPUSH
29493: LD_VAR 0 3
29497: PPUSH
29498: CALL_OW 3
29502: PPUSH
29503: CALL_OW 1
29507: ST_TO_ADDR
// end ; end ;
29508: GO 29337
29510: POP
29511: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
29512: LD_VAR 0 1
29516: PPUSH
29517: LD_EXP 116
29521: PUSH
29522: LD_VAR 0 4
29526: ARRAY
29527: PUSH
29528: LD_INT 0
29530: PLUS
29531: PPUSH
29532: CALL_OW 505
// end ;
29536: LD_VAR 0 2
29540: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
29541: LD_INT 0
29543: PPUSH
29544: PPUSH
29545: PPUSH
29546: PPUSH
// if not hack in hackTanks then
29547: LD_VAR 0 1
29551: PUSH
29552: LD_EXP 115
29556: IN
29557: NOT
29558: IFFALSE 29562
// exit ;
29560: GO 29647
// index := GetElementIndex ( hackTanks , hack ) ;
29562: LD_ADDR_VAR 0 5
29566: PUSH
29567: LD_EXP 115
29571: PPUSH
29572: LD_VAR 0 1
29576: PPUSH
29577: CALL 36704 0 2
29581: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
29582: LD_ADDR_VAR 0 4
29586: PUSH
29587: DOUBLE
29588: LD_INT 1
29590: DEC
29591: ST_TO_ADDR
29592: LD_EXP 116
29596: PUSH
29597: LD_VAR 0 5
29601: ARRAY
29602: PUSH
29603: FOR_TO
29604: IFFALSE 29645
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
29606: LD_EXP 116
29610: PUSH
29611: LD_VAR 0 5
29615: ARRAY
29616: PUSH
29617: LD_VAR 0 4
29621: ARRAY
29622: PUSH
29623: LD_INT 1
29625: ARRAY
29626: PUSH
29627: LD_VAR 0 2
29631: EQUAL
29632: IFFALSE 29643
// KillUnit ( vehicle ) ;
29634: LD_VAR 0 2
29638: PPUSH
29639: CALL_OW 66
29643: GO 29603
29645: POP
29646: POP
// end ;
29647: LD_VAR 0 3
29651: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
29652: LD_EXP 120
29656: NOT
29657: IFFALSE 29692
29659: GO 29661
29661: DISABLE
// begin initMiner := true ;
29662: LD_ADDR_EXP 120
29666: PUSH
29667: LD_INT 1
29669: ST_TO_ADDR
// minersList := [ ] ;
29670: LD_ADDR_EXP 121
29674: PUSH
29675: EMPTY
29676: ST_TO_ADDR
// minerMinesList := [ ] ;
29677: LD_ADDR_EXP 122
29681: PUSH
29682: EMPTY
29683: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
29684: LD_ADDR_EXP 123
29688: PUSH
29689: LD_INT 5
29691: ST_TO_ADDR
// end ;
29692: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
29693: LD_EXP 120
29697: PUSH
29698: LD_INT 34
29700: PUSH
29701: LD_EXP 131
29705: PUSH
29706: EMPTY
29707: LIST
29708: LIST
29709: PPUSH
29710: CALL_OW 69
29714: AND
29715: IFFALSE 30178
29717: GO 29719
29719: DISABLE
29720: LD_INT 0
29722: PPUSH
29723: PPUSH
29724: PPUSH
29725: PPUSH
// begin enable ;
29726: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
29727: LD_ADDR_VAR 0 1
29731: PUSH
29732: LD_INT 34
29734: PUSH
29735: LD_EXP 131
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PPUSH
29744: CALL_OW 69
29748: PUSH
29749: FOR_IN
29750: IFFALSE 29822
// begin if not i in minersList then
29752: LD_VAR 0 1
29756: PUSH
29757: LD_EXP 121
29761: IN
29762: NOT
29763: IFFALSE 29820
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
29765: LD_ADDR_EXP 121
29769: PUSH
29770: LD_EXP 121
29774: PPUSH
29775: LD_EXP 121
29779: PUSH
29780: LD_INT 1
29782: PLUS
29783: PPUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 1
29793: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
29794: LD_ADDR_EXP 122
29798: PUSH
29799: LD_EXP 122
29803: PPUSH
29804: LD_EXP 122
29808: PUSH
29809: LD_INT 1
29811: PLUS
29812: PPUSH
29813: EMPTY
29814: PPUSH
29815: CALL_OW 1
29819: ST_TO_ADDR
// end end ;
29820: GO 29749
29822: POP
29823: POP
// for i := minerMinesList downto 1 do
29824: LD_ADDR_VAR 0 1
29828: PUSH
29829: DOUBLE
29830: LD_EXP 122
29834: INC
29835: ST_TO_ADDR
29836: LD_INT 1
29838: PUSH
29839: FOR_DOWNTO
29840: IFFALSE 30176
// begin if IsLive ( minersList [ i ] ) then
29842: LD_EXP 121
29846: PUSH
29847: LD_VAR 0 1
29851: ARRAY
29852: PPUSH
29853: CALL_OW 300
29857: IFFALSE 29885
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
29859: LD_EXP 121
29863: PUSH
29864: LD_VAR 0 1
29868: ARRAY
29869: PPUSH
29870: LD_EXP 122
29874: PUSH
29875: LD_VAR 0 1
29879: ARRAY
29880: PPUSH
29881: CALL_OW 505
// if not minerMinesList [ i ] then
29885: LD_EXP 122
29889: PUSH
29890: LD_VAR 0 1
29894: ARRAY
29895: NOT
29896: IFFALSE 29900
// continue ;
29898: GO 29839
// for j := minerMinesList [ i ] downto 1 do
29900: LD_ADDR_VAR 0 2
29904: PUSH
29905: DOUBLE
29906: LD_EXP 122
29910: PUSH
29911: LD_VAR 0 1
29915: ARRAY
29916: INC
29917: ST_TO_ADDR
29918: LD_INT 1
29920: PUSH
29921: FOR_DOWNTO
29922: IFFALSE 30172
// begin side := GetSide ( minersList [ i ] ) ;
29924: LD_ADDR_VAR 0 3
29928: PUSH
29929: LD_EXP 121
29933: PUSH
29934: LD_VAR 0 1
29938: ARRAY
29939: PPUSH
29940: CALL_OW 255
29944: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
29945: LD_ADDR_VAR 0 4
29949: PUSH
29950: LD_EXP 122
29954: PUSH
29955: LD_VAR 0 1
29959: ARRAY
29960: PUSH
29961: LD_VAR 0 2
29965: ARRAY
29966: PUSH
29967: LD_INT 1
29969: ARRAY
29970: PPUSH
29971: LD_EXP 122
29975: PUSH
29976: LD_VAR 0 1
29980: ARRAY
29981: PUSH
29982: LD_VAR 0 2
29986: ARRAY
29987: PUSH
29988: LD_INT 2
29990: ARRAY
29991: PPUSH
29992: CALL_OW 428
29996: ST_TO_ADDR
// if not tmp then
29997: LD_VAR 0 4
30001: NOT
30002: IFFALSE 30006
// continue ;
30004: GO 29921
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
30006: LD_VAR 0 4
30010: PUSH
30011: LD_INT 81
30013: PUSH
30014: LD_VAR 0 3
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PPUSH
30023: CALL_OW 69
30027: IN
30028: PUSH
30029: LD_EXP 122
30033: PUSH
30034: LD_VAR 0 1
30038: ARRAY
30039: PUSH
30040: LD_VAR 0 2
30044: ARRAY
30045: PUSH
30046: LD_INT 1
30048: ARRAY
30049: PPUSH
30050: LD_EXP 122
30054: PUSH
30055: LD_VAR 0 1
30059: ARRAY
30060: PUSH
30061: LD_VAR 0 2
30065: ARRAY
30066: PUSH
30067: LD_INT 2
30069: ARRAY
30070: PPUSH
30071: CALL_OW 458
30075: AND
30076: IFFALSE 30170
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
30078: LD_EXP 122
30082: PUSH
30083: LD_VAR 0 1
30087: ARRAY
30088: PUSH
30089: LD_VAR 0 2
30093: ARRAY
30094: PUSH
30095: LD_INT 1
30097: ARRAY
30098: PPUSH
30099: LD_EXP 122
30103: PUSH
30104: LD_VAR 0 1
30108: ARRAY
30109: PUSH
30110: LD_VAR 0 2
30114: ARRAY
30115: PUSH
30116: LD_INT 2
30118: ARRAY
30119: PPUSH
30120: LD_VAR 0 3
30124: PPUSH
30125: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
30129: LD_ADDR_EXP 122
30133: PUSH
30134: LD_EXP 122
30138: PPUSH
30139: LD_VAR 0 1
30143: PPUSH
30144: LD_EXP 122
30148: PUSH
30149: LD_VAR 0 1
30153: ARRAY
30154: PPUSH
30155: LD_VAR 0 2
30159: PPUSH
30160: CALL_OW 3
30164: PPUSH
30165: CALL_OW 1
30169: ST_TO_ADDR
// end ; end ;
30170: GO 29921
30172: POP
30173: POP
// end ;
30174: GO 29839
30176: POP
30177: POP
// end ;
30178: PPOPN 4
30180: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
30181: LD_INT 0
30183: PPUSH
30184: PPUSH
// result := false ;
30185: LD_ADDR_VAR 0 4
30189: PUSH
30190: LD_INT 0
30192: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
30193: LD_VAR 0 1
30197: PPUSH
30198: CALL_OW 264
30202: PUSH
30203: LD_EXP 131
30207: EQUAL
30208: NOT
30209: IFFALSE 30213
// exit ;
30211: GO 30453
// index := GetElementIndex ( minersList , unit ) ;
30213: LD_ADDR_VAR 0 5
30217: PUSH
30218: LD_EXP 121
30222: PPUSH
30223: LD_VAR 0 1
30227: PPUSH
30228: CALL 36704 0 2
30232: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
30233: LD_EXP 122
30237: PUSH
30238: LD_VAR 0 5
30242: ARRAY
30243: PUSH
30244: LD_EXP 123
30248: GREATEREQUAL
30249: IFFALSE 30253
// exit ;
30251: GO 30453
// ComMoveXY ( unit , x , y ) ;
30253: LD_VAR 0 1
30257: PPUSH
30258: LD_VAR 0 2
30262: PPUSH
30263: LD_VAR 0 3
30267: PPUSH
30268: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
30272: LD_INT 35
30274: PPUSH
30275: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
30279: LD_VAR 0 1
30283: PPUSH
30284: LD_VAR 0 2
30288: PPUSH
30289: LD_VAR 0 3
30293: PPUSH
30294: CALL 67101 0 3
30298: NOT
30299: PUSH
30300: LD_VAR 0 1
30304: PPUSH
30305: CALL_OW 314
30309: AND
30310: IFFALSE 30314
// exit ;
30312: GO 30453
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
30314: LD_VAR 0 2
30318: PPUSH
30319: LD_VAR 0 3
30323: PPUSH
30324: CALL_OW 428
30328: PUSH
30329: LD_VAR 0 1
30333: EQUAL
30334: PUSH
30335: LD_VAR 0 1
30339: PPUSH
30340: CALL_OW 314
30344: NOT
30345: AND
30346: IFFALSE 30272
// PlaySoundXY ( x , y , PlantMine ) ;
30348: LD_VAR 0 2
30352: PPUSH
30353: LD_VAR 0 3
30357: PPUSH
30358: LD_STRING PlantMine
30360: PPUSH
30361: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
30365: LD_VAR 0 2
30369: PPUSH
30370: LD_VAR 0 3
30374: PPUSH
30375: LD_VAR 0 1
30379: PPUSH
30380: CALL_OW 255
30384: PPUSH
30385: LD_INT 0
30387: PPUSH
30388: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
30392: LD_ADDR_EXP 122
30396: PUSH
30397: LD_EXP 122
30401: PPUSH
30402: LD_VAR 0 5
30406: PUSH
30407: LD_EXP 122
30411: PUSH
30412: LD_VAR 0 5
30416: ARRAY
30417: PUSH
30418: LD_INT 1
30420: PLUS
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PPUSH
30426: LD_VAR 0 2
30430: PUSH
30431: LD_VAR 0 3
30435: PUSH
30436: EMPTY
30437: LIST
30438: LIST
30439: PPUSH
30440: CALL 36919 0 3
30444: ST_TO_ADDR
// result := true ;
30445: LD_ADDR_VAR 0 4
30449: PUSH
30450: LD_INT 1
30452: ST_TO_ADDR
// end ;
30453: LD_VAR 0 4
30457: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
30458: LD_INT 0
30460: PPUSH
30461: PPUSH
30462: PPUSH
// if not unit in minersList then
30463: LD_VAR 0 1
30467: PUSH
30468: LD_EXP 121
30472: IN
30473: NOT
30474: IFFALSE 30478
// exit ;
30476: GO 30870
// index := GetElementIndex ( minersList , unit ) ;
30478: LD_ADDR_VAR 0 6
30482: PUSH
30483: LD_EXP 121
30487: PPUSH
30488: LD_VAR 0 1
30492: PPUSH
30493: CALL 36704 0 2
30497: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
30498: LD_ADDR_VAR 0 5
30502: PUSH
30503: DOUBLE
30504: LD_EXP 122
30508: PUSH
30509: LD_VAR 0 6
30513: ARRAY
30514: INC
30515: ST_TO_ADDR
30516: LD_INT 1
30518: PUSH
30519: FOR_DOWNTO
30520: IFFALSE 30681
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
30522: LD_EXP 122
30526: PUSH
30527: LD_VAR 0 6
30531: ARRAY
30532: PUSH
30533: LD_VAR 0 5
30537: ARRAY
30538: PUSH
30539: LD_INT 1
30541: ARRAY
30542: PUSH
30543: LD_VAR 0 2
30547: EQUAL
30548: PUSH
30549: LD_EXP 122
30553: PUSH
30554: LD_VAR 0 6
30558: ARRAY
30559: PUSH
30560: LD_VAR 0 5
30564: ARRAY
30565: PUSH
30566: LD_INT 2
30568: ARRAY
30569: PUSH
30570: LD_VAR 0 3
30574: EQUAL
30575: AND
30576: IFFALSE 30679
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30578: LD_EXP 122
30582: PUSH
30583: LD_VAR 0 6
30587: ARRAY
30588: PUSH
30589: LD_VAR 0 5
30593: ARRAY
30594: PUSH
30595: LD_INT 1
30597: ARRAY
30598: PPUSH
30599: LD_EXP 122
30603: PUSH
30604: LD_VAR 0 6
30608: ARRAY
30609: PUSH
30610: LD_VAR 0 5
30614: ARRAY
30615: PUSH
30616: LD_INT 2
30618: ARRAY
30619: PPUSH
30620: LD_VAR 0 1
30624: PPUSH
30625: CALL_OW 255
30629: PPUSH
30630: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30634: LD_ADDR_EXP 122
30638: PUSH
30639: LD_EXP 122
30643: PPUSH
30644: LD_VAR 0 6
30648: PPUSH
30649: LD_EXP 122
30653: PUSH
30654: LD_VAR 0 6
30658: ARRAY
30659: PPUSH
30660: LD_VAR 0 5
30664: PPUSH
30665: CALL_OW 3
30669: PPUSH
30670: CALL_OW 1
30674: ST_TO_ADDR
// exit ;
30675: POP
30676: POP
30677: GO 30870
// end ; end ;
30679: GO 30519
30681: POP
30682: POP
// for i := minerMinesList [ index ] downto 1 do
30683: LD_ADDR_VAR 0 5
30687: PUSH
30688: DOUBLE
30689: LD_EXP 122
30693: PUSH
30694: LD_VAR 0 6
30698: ARRAY
30699: INC
30700: ST_TO_ADDR
30701: LD_INT 1
30703: PUSH
30704: FOR_DOWNTO
30705: IFFALSE 30868
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
30707: LD_EXP 122
30711: PUSH
30712: LD_VAR 0 6
30716: ARRAY
30717: PUSH
30718: LD_VAR 0 5
30722: ARRAY
30723: PUSH
30724: LD_INT 1
30726: ARRAY
30727: PPUSH
30728: LD_EXP 122
30732: PUSH
30733: LD_VAR 0 6
30737: ARRAY
30738: PUSH
30739: LD_VAR 0 5
30743: ARRAY
30744: PUSH
30745: LD_INT 2
30747: ARRAY
30748: PPUSH
30749: LD_VAR 0 2
30753: PPUSH
30754: LD_VAR 0 3
30758: PPUSH
30759: CALL_OW 298
30763: PUSH
30764: LD_INT 6
30766: LESS
30767: IFFALSE 30866
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
30769: LD_EXP 122
30773: PUSH
30774: LD_VAR 0 6
30778: ARRAY
30779: PUSH
30780: LD_VAR 0 5
30784: ARRAY
30785: PUSH
30786: LD_INT 1
30788: ARRAY
30789: PPUSH
30790: LD_EXP 122
30794: PUSH
30795: LD_VAR 0 6
30799: ARRAY
30800: PUSH
30801: LD_VAR 0 5
30805: ARRAY
30806: PUSH
30807: LD_INT 2
30809: ARRAY
30810: PPUSH
30811: LD_VAR 0 1
30815: PPUSH
30816: CALL_OW 255
30820: PPUSH
30821: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
30825: LD_ADDR_EXP 122
30829: PUSH
30830: LD_EXP 122
30834: PPUSH
30835: LD_VAR 0 6
30839: PPUSH
30840: LD_EXP 122
30844: PUSH
30845: LD_VAR 0 6
30849: ARRAY
30850: PPUSH
30851: LD_VAR 0 5
30855: PPUSH
30856: CALL_OW 3
30860: PPUSH
30861: CALL_OW 1
30865: ST_TO_ADDR
// end ; end ;
30866: GO 30704
30868: POP
30869: POP
// end ;
30870: LD_VAR 0 4
30874: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
30875: LD_INT 0
30877: PPUSH
30878: PPUSH
30879: PPUSH
30880: PPUSH
30881: PPUSH
30882: PPUSH
30883: PPUSH
30884: PPUSH
30885: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 264
30895: PUSH
30896: LD_EXP 131
30900: EQUAL
30901: NOT
30902: PUSH
30903: LD_VAR 0 1
30907: PUSH
30908: LD_EXP 121
30912: IN
30913: NOT
30914: OR
30915: IFFALSE 30919
// exit ;
30917: GO 31241
// index := GetElementIndex ( minersList , unit ) ;
30919: LD_ADDR_VAR 0 6
30923: PUSH
30924: LD_EXP 121
30928: PPUSH
30929: LD_VAR 0 1
30933: PPUSH
30934: CALL 36704 0 2
30938: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: LD_EXP 123
30948: PUSH
30949: LD_EXP 122
30953: PUSH
30954: LD_VAR 0 6
30958: ARRAY
30959: MINUS
30960: ST_TO_ADDR
// if not minesFreeAmount then
30961: LD_VAR 0 8
30965: NOT
30966: IFFALSE 30970
// exit ;
30968: GO 31241
// tmp := [ ] ;
30970: LD_ADDR_VAR 0 7
30974: PUSH
30975: EMPTY
30976: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
30977: LD_ADDR_VAR 0 5
30981: PUSH
30982: DOUBLE
30983: LD_INT 1
30985: DEC
30986: ST_TO_ADDR
30987: LD_VAR 0 8
30991: PUSH
30992: FOR_TO
30993: IFFALSE 31188
// begin _d := rand ( 0 , 5 ) ;
30995: LD_ADDR_VAR 0 11
30999: PUSH
31000: LD_INT 0
31002: PPUSH
31003: LD_INT 5
31005: PPUSH
31006: CALL_OW 12
31010: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
31011: LD_ADDR_VAR 0 12
31015: PUSH
31016: LD_INT 2
31018: PPUSH
31019: LD_INT 6
31021: PPUSH
31022: CALL_OW 12
31026: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
31027: LD_ADDR_VAR 0 9
31031: PUSH
31032: LD_VAR 0 2
31036: PPUSH
31037: LD_VAR 0 11
31041: PPUSH
31042: LD_VAR 0 12
31046: PPUSH
31047: CALL_OW 272
31051: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
31052: LD_ADDR_VAR 0 10
31056: PUSH
31057: LD_VAR 0 3
31061: PPUSH
31062: LD_VAR 0 11
31066: PPUSH
31067: LD_VAR 0 12
31071: PPUSH
31072: CALL_OW 273
31076: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
31077: LD_VAR 0 9
31081: PPUSH
31082: LD_VAR 0 10
31086: PPUSH
31087: CALL_OW 488
31091: PUSH
31092: LD_VAR 0 9
31096: PUSH
31097: LD_VAR 0 10
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_VAR 0 7
31110: IN
31111: NOT
31112: AND
31113: PUSH
31114: LD_VAR 0 9
31118: PPUSH
31119: LD_VAR 0 10
31123: PPUSH
31124: CALL_OW 458
31128: NOT
31129: AND
31130: IFFALSE 31172
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
31132: LD_ADDR_VAR 0 7
31136: PUSH
31137: LD_VAR 0 7
31141: PPUSH
31142: LD_VAR 0 7
31146: PUSH
31147: LD_INT 1
31149: PLUS
31150: PPUSH
31151: LD_VAR 0 9
31155: PUSH
31156: LD_VAR 0 10
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PPUSH
31165: CALL_OW 1
31169: ST_TO_ADDR
31170: GO 31186
// i := i - 1 ;
31172: LD_ADDR_VAR 0 5
31176: PUSH
31177: LD_VAR 0 5
31181: PUSH
31182: LD_INT 1
31184: MINUS
31185: ST_TO_ADDR
// end ;
31186: GO 30992
31188: POP
31189: POP
// for i in tmp do
31190: LD_ADDR_VAR 0 5
31194: PUSH
31195: LD_VAR 0 7
31199: PUSH
31200: FOR_IN
31201: IFFALSE 31239
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
31203: LD_VAR 0 1
31207: PPUSH
31208: LD_VAR 0 5
31212: PUSH
31213: LD_INT 1
31215: ARRAY
31216: PPUSH
31217: LD_VAR 0 5
31221: PUSH
31222: LD_INT 2
31224: ARRAY
31225: PPUSH
31226: CALL 30181 0 3
31230: NOT
31231: IFFALSE 31237
// exit ;
31233: POP
31234: POP
31235: GO 31241
31237: GO 31200
31239: POP
31240: POP
// end ;
31241: LD_VAR 0 4
31245: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
31246: LD_INT 0
31248: PPUSH
31249: PPUSH
31250: PPUSH
31251: PPUSH
31252: PPUSH
31253: PPUSH
31254: PPUSH
// if not GetClass ( unit ) = class_sniper then
31255: LD_VAR 0 1
31259: PPUSH
31260: CALL_OW 257
31264: PUSH
31265: LD_INT 5
31267: EQUAL
31268: NOT
31269: IFFALSE 31273
// exit ;
31271: GO 31661
// dist := 8 ;
31273: LD_ADDR_VAR 0 5
31277: PUSH
31278: LD_INT 8
31280: ST_TO_ADDR
// viewRange := 12 ;
31281: LD_ADDR_VAR 0 7
31285: PUSH
31286: LD_INT 12
31288: ST_TO_ADDR
// side := GetSide ( unit ) ;
31289: LD_ADDR_VAR 0 6
31293: PUSH
31294: LD_VAR 0 1
31298: PPUSH
31299: CALL_OW 255
31303: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
31304: LD_INT 61
31306: PPUSH
31307: LD_VAR 0 6
31311: PPUSH
31312: CALL_OW 321
31316: PUSH
31317: LD_INT 2
31319: EQUAL
31320: IFFALSE 31330
// viewRange := 16 ;
31322: LD_ADDR_VAR 0 7
31326: PUSH
31327: LD_INT 16
31329: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
31330: LD_VAR 0 1
31334: PPUSH
31335: LD_VAR 0 2
31339: PPUSH
31340: LD_VAR 0 3
31344: PPUSH
31345: CALL_OW 297
31349: PUSH
31350: LD_VAR 0 5
31354: GREATER
31355: IFFALSE 31434
// begin ComMoveXY ( unit , x , y ) ;
31357: LD_VAR 0 1
31361: PPUSH
31362: LD_VAR 0 2
31366: PPUSH
31367: LD_VAR 0 3
31371: PPUSH
31372: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
31376: LD_INT 35
31378: PPUSH
31379: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
31383: LD_VAR 0 1
31387: PPUSH
31388: LD_VAR 0 2
31392: PPUSH
31393: LD_VAR 0 3
31397: PPUSH
31398: CALL 67101 0 3
31402: NOT
31403: IFFALSE 31407
// exit ;
31405: GO 31661
// until GetDistUnitXY ( unit , x , y ) < dist ;
31407: LD_VAR 0 1
31411: PPUSH
31412: LD_VAR 0 2
31416: PPUSH
31417: LD_VAR 0 3
31421: PPUSH
31422: CALL_OW 297
31426: PUSH
31427: LD_VAR 0 5
31431: LESS
31432: IFFALSE 31376
// end ; ComTurnXY ( unit , x , y ) ;
31434: LD_VAR 0 1
31438: PPUSH
31439: LD_VAR 0 2
31443: PPUSH
31444: LD_VAR 0 3
31448: PPUSH
31449: CALL_OW 118
// wait ( 5 ) ;
31453: LD_INT 5
31455: PPUSH
31456: CALL_OW 67
// _d := GetDir ( unit ) ;
31460: LD_ADDR_VAR 0 10
31464: PUSH
31465: LD_VAR 0 1
31469: PPUSH
31470: CALL_OW 254
31474: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
31475: LD_ADDR_VAR 0 8
31479: PUSH
31480: LD_VAR 0 1
31484: PPUSH
31485: CALL_OW 250
31489: PPUSH
31490: LD_VAR 0 10
31494: PPUSH
31495: LD_VAR 0 5
31499: PPUSH
31500: CALL_OW 272
31504: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
31505: LD_ADDR_VAR 0 9
31509: PUSH
31510: LD_VAR 0 1
31514: PPUSH
31515: CALL_OW 251
31519: PPUSH
31520: LD_VAR 0 10
31524: PPUSH
31525: LD_VAR 0 5
31529: PPUSH
31530: CALL_OW 273
31534: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
31535: LD_VAR 0 8
31539: PPUSH
31540: LD_VAR 0 9
31544: PPUSH
31545: CALL_OW 488
31549: NOT
31550: IFFALSE 31554
// exit ;
31552: GO 31661
// ComAnimCustom ( unit , 1 ) ;
31554: LD_VAR 0 1
31558: PPUSH
31559: LD_INT 1
31561: PPUSH
31562: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
31566: LD_VAR 0 8
31570: PPUSH
31571: LD_VAR 0 9
31575: PPUSH
31576: LD_VAR 0 6
31580: PPUSH
31581: LD_VAR 0 7
31585: PPUSH
31586: CALL_OW 330
// repeat wait ( 1 ) ;
31590: LD_INT 1
31592: PPUSH
31593: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
31597: LD_VAR 0 1
31601: PPUSH
31602: CALL_OW 316
31606: PUSH
31607: LD_VAR 0 1
31611: PPUSH
31612: CALL_OW 314
31616: OR
31617: PUSH
31618: LD_VAR 0 1
31622: PPUSH
31623: CALL_OW 302
31627: NOT
31628: OR
31629: PUSH
31630: LD_VAR 0 1
31634: PPUSH
31635: CALL_OW 301
31639: OR
31640: IFFALSE 31590
// RemoveSeeing ( _x , _y , side ) ;
31642: LD_VAR 0 8
31646: PPUSH
31647: LD_VAR 0 9
31651: PPUSH
31652: LD_VAR 0 6
31656: PPUSH
31657: CALL_OW 331
// end ; end_of_file
31661: LD_VAR 0 4
31665: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
31666: LD_VAR 0 1
31670: PUSH
31671: LD_INT 200
31673: DOUBLE
31674: GREATEREQUAL
31675: IFFALSE 31683
31677: LD_INT 299
31679: DOUBLE
31680: LESSEQUAL
31681: IFTRUE 31685
31683: GO 31717
31685: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
31686: LD_VAR 0 1
31690: PPUSH
31691: LD_VAR 0 2
31695: PPUSH
31696: LD_VAR 0 3
31700: PPUSH
31701: LD_VAR 0 4
31705: PPUSH
31706: LD_VAR 0 5
31710: PPUSH
31711: CALL 27783 0 5
31715: GO 31794
31717: LD_INT 300
31719: DOUBLE
31720: GREATEREQUAL
31721: IFFALSE 31729
31723: LD_INT 399
31725: DOUBLE
31726: LESSEQUAL
31727: IFTRUE 31731
31729: GO 31793
31731: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
31732: LD_VAR 0 1
31736: PPUSH
31737: LD_VAR 0 2
31741: PPUSH
31742: LD_VAR 0 3
31746: PPUSH
31747: LD_VAR 0 4
31751: PPUSH
31752: LD_VAR 0 5
31756: PPUSH
31757: LD_VAR 0 6
31761: PPUSH
31762: LD_VAR 0 7
31766: PPUSH
31767: LD_VAR 0 8
31771: PPUSH
31772: LD_VAR 0 9
31776: PPUSH
31777: LD_VAR 0 10
31781: PPUSH
31782: LD_VAR 0 11
31786: PPUSH
31787: CALL 25671 0 11
31791: GO 31794
31793: POP
// end ;
31794: PPOPN 11
31796: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
31797: LD_VAR 0 1
31801: PPUSH
31802: LD_VAR 0 2
31806: PPUSH
31807: LD_VAR 0 3
31811: PPUSH
31812: LD_VAR 0 4
31816: PPUSH
31817: LD_VAR 0 5
31821: PPUSH
31822: CALL 27765 0 5
// end ; end_of_file end_of_file
31826: PPOPN 5
31828: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
31829: LD_INT 0
31831: PPUSH
// ar_miner := 81 ;
31832: LD_ADDR_EXP 131
31836: PUSH
31837: LD_INT 81
31839: ST_TO_ADDR
// ar_crane := 88 ;
31840: LD_ADDR_EXP 130
31844: PUSH
31845: LD_INT 88
31847: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
31848: LD_ADDR_EXP 125
31852: PUSH
31853: LD_INT 89
31855: ST_TO_ADDR
// us_hack := 99 ;
31856: LD_ADDR_EXP 126
31860: PUSH
31861: LD_INT 99
31863: ST_TO_ADDR
// us_artillery := 97 ;
31864: LD_ADDR_EXP 127
31868: PUSH
31869: LD_INT 97
31871: ST_TO_ADDR
// ar_bio_bomb := 91 ;
31872: LD_ADDR_EXP 128
31876: PUSH
31877: LD_INT 91
31879: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
31880: LD_ADDR_EXP 129
31884: PUSH
31885: LD_INT 92
31887: ST_TO_ADDR
// ru_radar := 98 ;
31888: LD_ADDR_EXP 124
31892: PUSH
31893: LD_INT 98
31895: ST_TO_ADDR
// tech_Artillery := 80 ;
31896: LD_ADDR_EXP 132
31900: PUSH
31901: LD_INT 80
31903: ST_TO_ADDR
// tech_RadMat := 81 ;
31904: LD_ADDR_EXP 133
31908: PUSH
31909: LD_INT 81
31911: ST_TO_ADDR
// tech_BasicTools := 82 ;
31912: LD_ADDR_EXP 134
31916: PUSH
31917: LD_INT 82
31919: ST_TO_ADDR
// tech_Cargo := 83 ;
31920: LD_ADDR_EXP 135
31924: PUSH
31925: LD_INT 83
31927: ST_TO_ADDR
// tech_Track := 84 ;
31928: LD_ADDR_EXP 136
31932: PUSH
31933: LD_INT 84
31935: ST_TO_ADDR
// tech_Crane := 85 ;
31936: LD_ADDR_EXP 137
31940: PUSH
31941: LD_INT 85
31943: ST_TO_ADDR
// tech_Bulldozer := 86 ;
31944: LD_ADDR_EXP 138
31948: PUSH
31949: LD_INT 86
31951: ST_TO_ADDR
// tech_Hovercraft := 87 ;
31952: LD_ADDR_EXP 139
31956: PUSH
31957: LD_INT 87
31959: ST_TO_ADDR
// end ;
31960: LD_VAR 0 1
31964: RET
// every 1 do
31965: GO 31967
31967: DISABLE
// InitGlobalVariables ; end_of_file
31968: CALL 31829 0 0
31972: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
31973: LD_INT 0
31975: PPUSH
31976: PPUSH
// if exist_mode then
31977: LD_VAR 0 2
31981: IFFALSE 32006
// unit := CreateCharacter ( prefix & ident ) else
31983: LD_ADDR_VAR 0 5
31987: PUSH
31988: LD_VAR 0 3
31992: PUSH
31993: LD_VAR 0 1
31997: STR
31998: PPUSH
31999: CALL_OW 34
32003: ST_TO_ADDR
32004: GO 32021
// unit := NewCharacter ( ident ) ;
32006: LD_ADDR_VAR 0 5
32010: PUSH
32011: LD_VAR 0 1
32015: PPUSH
32016: CALL_OW 25
32020: ST_TO_ADDR
// result := unit ;
32021: LD_ADDR_VAR 0 4
32025: PUSH
32026: LD_VAR 0 5
32030: ST_TO_ADDR
// end ;
32031: LD_VAR 0 4
32035: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
32036: LD_INT 0
32038: PPUSH
32039: PPUSH
// if not side or not nation then
32040: LD_VAR 0 1
32044: NOT
32045: PUSH
32046: LD_VAR 0 2
32050: NOT
32051: OR
32052: IFFALSE 32056
// exit ;
32054: GO 32820
// case nation of nation_american :
32056: LD_VAR 0 2
32060: PUSH
32061: LD_INT 1
32063: DOUBLE
32064: EQUAL
32065: IFTRUE 32069
32067: GO 32283
32069: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
32070: LD_ADDR_VAR 0 4
32074: PUSH
32075: LD_INT 35
32077: PUSH
32078: LD_INT 45
32080: PUSH
32081: LD_INT 46
32083: PUSH
32084: LD_INT 47
32086: PUSH
32087: LD_INT 82
32089: PUSH
32090: LD_INT 83
32092: PUSH
32093: LD_INT 84
32095: PUSH
32096: LD_INT 85
32098: PUSH
32099: LD_INT 86
32101: PUSH
32102: LD_INT 1
32104: PUSH
32105: LD_INT 2
32107: PUSH
32108: LD_INT 6
32110: PUSH
32111: LD_INT 15
32113: PUSH
32114: LD_INT 16
32116: PUSH
32117: LD_INT 7
32119: PUSH
32120: LD_INT 12
32122: PUSH
32123: LD_INT 13
32125: PUSH
32126: LD_INT 10
32128: PUSH
32129: LD_INT 14
32131: PUSH
32132: LD_INT 20
32134: PUSH
32135: LD_INT 21
32137: PUSH
32138: LD_INT 22
32140: PUSH
32141: LD_INT 25
32143: PUSH
32144: LD_INT 32
32146: PUSH
32147: LD_INT 27
32149: PUSH
32150: LD_INT 36
32152: PUSH
32153: LD_INT 69
32155: PUSH
32156: LD_INT 39
32158: PUSH
32159: LD_INT 34
32161: PUSH
32162: LD_INT 40
32164: PUSH
32165: LD_INT 48
32167: PUSH
32168: LD_INT 49
32170: PUSH
32171: LD_INT 50
32173: PUSH
32174: LD_INT 51
32176: PUSH
32177: LD_INT 52
32179: PUSH
32180: LD_INT 53
32182: PUSH
32183: LD_INT 54
32185: PUSH
32186: LD_INT 55
32188: PUSH
32189: LD_INT 56
32191: PUSH
32192: LD_INT 57
32194: PUSH
32195: LD_INT 58
32197: PUSH
32198: LD_INT 59
32200: PUSH
32201: LD_INT 60
32203: PUSH
32204: LD_INT 61
32206: PUSH
32207: LD_INT 62
32209: PUSH
32210: LD_INT 80
32212: PUSH
32213: LD_INT 82
32215: PUSH
32216: LD_INT 83
32218: PUSH
32219: LD_INT 84
32221: PUSH
32222: LD_INT 85
32224: PUSH
32225: LD_INT 86
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: LIST
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: ST_TO_ADDR
32281: GO 32744
32283: LD_INT 2
32285: DOUBLE
32286: EQUAL
32287: IFTRUE 32291
32289: GO 32513
32291: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
32292: LD_ADDR_VAR 0 4
32296: PUSH
32297: LD_INT 35
32299: PUSH
32300: LD_INT 45
32302: PUSH
32303: LD_INT 46
32305: PUSH
32306: LD_INT 47
32308: PUSH
32309: LD_INT 82
32311: PUSH
32312: LD_INT 83
32314: PUSH
32315: LD_INT 84
32317: PUSH
32318: LD_INT 85
32320: PUSH
32321: LD_INT 87
32323: PUSH
32324: LD_INT 70
32326: PUSH
32327: LD_INT 1
32329: PUSH
32330: LD_INT 11
32332: PUSH
32333: LD_INT 3
32335: PUSH
32336: LD_INT 4
32338: PUSH
32339: LD_INT 5
32341: PUSH
32342: LD_INT 6
32344: PUSH
32345: LD_INT 15
32347: PUSH
32348: LD_INT 18
32350: PUSH
32351: LD_INT 7
32353: PUSH
32354: LD_INT 17
32356: PUSH
32357: LD_INT 8
32359: PUSH
32360: LD_INT 20
32362: PUSH
32363: LD_INT 21
32365: PUSH
32366: LD_INT 22
32368: PUSH
32369: LD_INT 72
32371: PUSH
32372: LD_INT 26
32374: PUSH
32375: LD_INT 69
32377: PUSH
32378: LD_INT 39
32380: PUSH
32381: LD_INT 40
32383: PUSH
32384: LD_INT 41
32386: PUSH
32387: LD_INT 42
32389: PUSH
32390: LD_INT 43
32392: PUSH
32393: LD_INT 48
32395: PUSH
32396: LD_INT 49
32398: PUSH
32399: LD_INT 50
32401: PUSH
32402: LD_INT 51
32404: PUSH
32405: LD_INT 52
32407: PUSH
32408: LD_INT 53
32410: PUSH
32411: LD_INT 54
32413: PUSH
32414: LD_INT 55
32416: PUSH
32417: LD_INT 56
32419: PUSH
32420: LD_INT 60
32422: PUSH
32423: LD_INT 61
32425: PUSH
32426: LD_INT 62
32428: PUSH
32429: LD_INT 66
32431: PUSH
32432: LD_INT 67
32434: PUSH
32435: LD_INT 68
32437: PUSH
32438: LD_INT 81
32440: PUSH
32441: LD_INT 82
32443: PUSH
32444: LD_INT 83
32446: PUSH
32447: LD_INT 84
32449: PUSH
32450: LD_INT 85
32452: PUSH
32453: LD_INT 87
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: LIST
32495: LIST
32496: LIST
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: ST_TO_ADDR
32511: GO 32744
32513: LD_INT 3
32515: DOUBLE
32516: EQUAL
32517: IFTRUE 32521
32519: GO 32743
32521: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
32522: LD_ADDR_VAR 0 4
32526: PUSH
32527: LD_INT 46
32529: PUSH
32530: LD_INT 47
32532: PUSH
32533: LD_INT 1
32535: PUSH
32536: LD_INT 2
32538: PUSH
32539: LD_INT 82
32541: PUSH
32542: LD_INT 83
32544: PUSH
32545: LD_INT 84
32547: PUSH
32548: LD_INT 85
32550: PUSH
32551: LD_INT 86
32553: PUSH
32554: LD_INT 11
32556: PUSH
32557: LD_INT 9
32559: PUSH
32560: LD_INT 20
32562: PUSH
32563: LD_INT 19
32565: PUSH
32566: LD_INT 21
32568: PUSH
32569: LD_INT 24
32571: PUSH
32572: LD_INT 22
32574: PUSH
32575: LD_INT 25
32577: PUSH
32578: LD_INT 28
32580: PUSH
32581: LD_INT 29
32583: PUSH
32584: LD_INT 30
32586: PUSH
32587: LD_INT 31
32589: PUSH
32590: LD_INT 37
32592: PUSH
32593: LD_INT 38
32595: PUSH
32596: LD_INT 32
32598: PUSH
32599: LD_INT 27
32601: PUSH
32602: LD_INT 33
32604: PUSH
32605: LD_INT 69
32607: PUSH
32608: LD_INT 39
32610: PUSH
32611: LD_INT 34
32613: PUSH
32614: LD_INT 40
32616: PUSH
32617: LD_INT 71
32619: PUSH
32620: LD_INT 23
32622: PUSH
32623: LD_INT 44
32625: PUSH
32626: LD_INT 48
32628: PUSH
32629: LD_INT 49
32631: PUSH
32632: LD_INT 50
32634: PUSH
32635: LD_INT 51
32637: PUSH
32638: LD_INT 52
32640: PUSH
32641: LD_INT 53
32643: PUSH
32644: LD_INT 54
32646: PUSH
32647: LD_INT 55
32649: PUSH
32650: LD_INT 56
32652: PUSH
32653: LD_INT 57
32655: PUSH
32656: LD_INT 58
32658: PUSH
32659: LD_INT 59
32661: PUSH
32662: LD_INT 63
32664: PUSH
32665: LD_INT 64
32667: PUSH
32668: LD_INT 65
32670: PUSH
32671: LD_INT 82
32673: PUSH
32674: LD_INT 83
32676: PUSH
32677: LD_INT 84
32679: PUSH
32680: LD_INT 85
32682: PUSH
32683: LD_INT 86
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: LIST
32698: LIST
32699: LIST
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: ST_TO_ADDR
32741: GO 32744
32743: POP
// if state > - 1 and state < 3 then
32744: LD_VAR 0 3
32748: PUSH
32749: LD_INT 1
32751: NEG
32752: GREATER
32753: PUSH
32754: LD_VAR 0 3
32758: PUSH
32759: LD_INT 3
32761: LESS
32762: AND
32763: IFFALSE 32820
// for i in result do
32765: LD_ADDR_VAR 0 5
32769: PUSH
32770: LD_VAR 0 4
32774: PUSH
32775: FOR_IN
32776: IFFALSE 32818
// if GetTech ( i , side ) <> state then
32778: LD_VAR 0 5
32782: PPUSH
32783: LD_VAR 0 1
32787: PPUSH
32788: CALL_OW 321
32792: PUSH
32793: LD_VAR 0 3
32797: NONEQUAL
32798: IFFALSE 32816
// result := result diff i ;
32800: LD_ADDR_VAR 0 4
32804: PUSH
32805: LD_VAR 0 4
32809: PUSH
32810: LD_VAR 0 5
32814: DIFF
32815: ST_TO_ADDR
32816: GO 32775
32818: POP
32819: POP
// end ;
32820: LD_VAR 0 4
32824: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
32825: LD_INT 0
32827: PPUSH
32828: PPUSH
32829: PPUSH
// result := true ;
32830: LD_ADDR_VAR 0 3
32834: PUSH
32835: LD_INT 1
32837: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
32838: LD_ADDR_VAR 0 5
32842: PUSH
32843: LD_VAR 0 2
32847: PPUSH
32848: CALL_OW 480
32852: ST_TO_ADDR
// if not tmp then
32853: LD_VAR 0 5
32857: NOT
32858: IFFALSE 32862
// exit ;
32860: GO 32911
// for i in tmp do
32862: LD_ADDR_VAR 0 4
32866: PUSH
32867: LD_VAR 0 5
32871: PUSH
32872: FOR_IN
32873: IFFALSE 32909
// if GetTech ( i , side ) <> state_researched then
32875: LD_VAR 0 4
32879: PPUSH
32880: LD_VAR 0 1
32884: PPUSH
32885: CALL_OW 321
32889: PUSH
32890: LD_INT 2
32892: NONEQUAL
32893: IFFALSE 32907
// begin result := false ;
32895: LD_ADDR_VAR 0 3
32899: PUSH
32900: LD_INT 0
32902: ST_TO_ADDR
// exit ;
32903: POP
32904: POP
32905: GO 32911
// end ;
32907: GO 32872
32909: POP
32910: POP
// end ;
32911: LD_VAR 0 3
32915: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
32916: LD_INT 0
32918: PPUSH
32919: PPUSH
32920: PPUSH
32921: PPUSH
32922: PPUSH
32923: PPUSH
32924: PPUSH
32925: PPUSH
32926: PPUSH
32927: PPUSH
32928: PPUSH
32929: PPUSH
32930: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
32931: LD_VAR 0 1
32935: NOT
32936: PUSH
32937: LD_VAR 0 1
32941: PPUSH
32942: CALL_OW 257
32946: PUSH
32947: LD_INT 9
32949: NONEQUAL
32950: OR
32951: IFFALSE 32955
// exit ;
32953: GO 33528
// side := GetSide ( unit ) ;
32955: LD_ADDR_VAR 0 9
32959: PUSH
32960: LD_VAR 0 1
32964: PPUSH
32965: CALL_OW 255
32969: ST_TO_ADDR
// tech_space := tech_spacanom ;
32970: LD_ADDR_VAR 0 12
32974: PUSH
32975: LD_INT 29
32977: ST_TO_ADDR
// tech_time := tech_taurad ;
32978: LD_ADDR_VAR 0 13
32982: PUSH
32983: LD_INT 28
32985: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
32986: LD_ADDR_VAR 0 11
32990: PUSH
32991: LD_VAR 0 1
32995: PPUSH
32996: CALL_OW 310
33000: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
33001: LD_VAR 0 11
33005: PPUSH
33006: CALL_OW 247
33010: PUSH
33011: LD_INT 2
33013: EQUAL
33014: IFFALSE 33018
// exit ;
33016: GO 33528
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33018: LD_ADDR_VAR 0 8
33022: PUSH
33023: LD_INT 81
33025: PUSH
33026: LD_VAR 0 9
33030: PUSH
33031: EMPTY
33032: LIST
33033: LIST
33034: PUSH
33035: LD_INT 3
33037: PUSH
33038: LD_INT 21
33040: PUSH
33041: LD_INT 3
33043: PUSH
33044: EMPTY
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PPUSH
33056: CALL_OW 69
33060: ST_TO_ADDR
// if not tmp then
33061: LD_VAR 0 8
33065: NOT
33066: IFFALSE 33070
// exit ;
33068: GO 33528
// if in_unit then
33070: LD_VAR 0 11
33074: IFFALSE 33098
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
33076: LD_ADDR_VAR 0 10
33080: PUSH
33081: LD_VAR 0 8
33085: PPUSH
33086: LD_VAR 0 11
33090: PPUSH
33091: CALL_OW 74
33095: ST_TO_ADDR
33096: GO 33118
// enemy := NearestUnitToUnit ( tmp , unit ) ;
33098: LD_ADDR_VAR 0 10
33102: PUSH
33103: LD_VAR 0 8
33107: PPUSH
33108: LD_VAR 0 1
33112: PPUSH
33113: CALL_OW 74
33117: ST_TO_ADDR
// if not enemy then
33118: LD_VAR 0 10
33122: NOT
33123: IFFALSE 33127
// exit ;
33125: GO 33528
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
33127: LD_VAR 0 11
33131: PUSH
33132: LD_VAR 0 11
33136: PPUSH
33137: LD_VAR 0 10
33141: PPUSH
33142: CALL_OW 296
33146: PUSH
33147: LD_INT 13
33149: GREATER
33150: AND
33151: PUSH
33152: LD_VAR 0 1
33156: PPUSH
33157: LD_VAR 0 10
33161: PPUSH
33162: CALL_OW 296
33166: PUSH
33167: LD_INT 12
33169: GREATER
33170: OR
33171: IFFALSE 33175
// exit ;
33173: GO 33528
// missile := [ 1 ] ;
33175: LD_ADDR_VAR 0 14
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: EMPTY
33184: LIST
33185: ST_TO_ADDR
// if Researched ( side , tech_space ) then
33186: LD_VAR 0 9
33190: PPUSH
33191: LD_VAR 0 12
33195: PPUSH
33196: CALL_OW 325
33200: IFFALSE 33229
// missile := Insert ( missile , missile + 1 , 2 ) ;
33202: LD_ADDR_VAR 0 14
33206: PUSH
33207: LD_VAR 0 14
33211: PPUSH
33212: LD_VAR 0 14
33216: PUSH
33217: LD_INT 1
33219: PLUS
33220: PPUSH
33221: LD_INT 2
33223: PPUSH
33224: CALL_OW 2
33228: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
33229: LD_VAR 0 9
33233: PPUSH
33234: LD_VAR 0 13
33238: PPUSH
33239: CALL_OW 325
33243: PUSH
33244: LD_VAR 0 10
33248: PPUSH
33249: CALL_OW 255
33253: PPUSH
33254: LD_VAR 0 13
33258: PPUSH
33259: CALL_OW 325
33263: NOT
33264: AND
33265: IFFALSE 33294
// missile := Insert ( missile , missile + 1 , 3 ) ;
33267: LD_ADDR_VAR 0 14
33271: PUSH
33272: LD_VAR 0 14
33276: PPUSH
33277: LD_VAR 0 14
33281: PUSH
33282: LD_INT 1
33284: PLUS
33285: PPUSH
33286: LD_INT 3
33288: PPUSH
33289: CALL_OW 2
33293: ST_TO_ADDR
// if missile < 2 then
33294: LD_VAR 0 14
33298: PUSH
33299: LD_INT 2
33301: LESS
33302: IFFALSE 33306
// exit ;
33304: GO 33528
// x := GetX ( enemy ) ;
33306: LD_ADDR_VAR 0 4
33310: PUSH
33311: LD_VAR 0 10
33315: PPUSH
33316: CALL_OW 250
33320: ST_TO_ADDR
// y := GetY ( enemy ) ;
33321: LD_ADDR_VAR 0 5
33325: PUSH
33326: LD_VAR 0 10
33330: PPUSH
33331: CALL_OW 251
33335: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
33336: LD_ADDR_VAR 0 6
33340: PUSH
33341: LD_VAR 0 4
33345: PUSH
33346: LD_INT 1
33348: NEG
33349: PPUSH
33350: LD_INT 1
33352: PPUSH
33353: CALL_OW 12
33357: PLUS
33358: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
33359: LD_ADDR_VAR 0 7
33363: PUSH
33364: LD_VAR 0 5
33368: PUSH
33369: LD_INT 1
33371: NEG
33372: PPUSH
33373: LD_INT 1
33375: PPUSH
33376: CALL_OW 12
33380: PLUS
33381: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33382: LD_VAR 0 6
33386: PPUSH
33387: LD_VAR 0 7
33391: PPUSH
33392: CALL_OW 488
33396: NOT
33397: IFFALSE 33419
// begin _x := x ;
33399: LD_ADDR_VAR 0 6
33403: PUSH
33404: LD_VAR 0 4
33408: ST_TO_ADDR
// _y := y ;
33409: LD_ADDR_VAR 0 7
33413: PUSH
33414: LD_VAR 0 5
33418: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
33419: LD_ADDR_VAR 0 3
33423: PUSH
33424: LD_INT 1
33426: PPUSH
33427: LD_VAR 0 14
33431: PPUSH
33432: CALL_OW 12
33436: ST_TO_ADDR
// case i of 1 :
33437: LD_VAR 0 3
33441: PUSH
33442: LD_INT 1
33444: DOUBLE
33445: EQUAL
33446: IFTRUE 33450
33448: GO 33467
33450: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
33451: LD_VAR 0 1
33455: PPUSH
33456: LD_VAR 0 10
33460: PPUSH
33461: CALL_OW 115
33465: GO 33528
33467: LD_INT 2
33469: DOUBLE
33470: EQUAL
33471: IFTRUE 33475
33473: GO 33497
33475: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
33476: LD_VAR 0 1
33480: PPUSH
33481: LD_VAR 0 6
33485: PPUSH
33486: LD_VAR 0 7
33490: PPUSH
33491: CALL_OW 153
33495: GO 33528
33497: LD_INT 3
33499: DOUBLE
33500: EQUAL
33501: IFTRUE 33505
33503: GO 33527
33505: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
33506: LD_VAR 0 1
33510: PPUSH
33511: LD_VAR 0 6
33515: PPUSH
33516: LD_VAR 0 7
33520: PPUSH
33521: CALL_OW 154
33525: GO 33528
33527: POP
// end ;
33528: LD_VAR 0 2
33532: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
33533: LD_INT 0
33535: PPUSH
33536: PPUSH
33537: PPUSH
33538: PPUSH
33539: PPUSH
33540: PPUSH
// if not unit or not building then
33541: LD_VAR 0 1
33545: NOT
33546: PUSH
33547: LD_VAR 0 2
33551: NOT
33552: OR
33553: IFFALSE 33557
// exit ;
33555: GO 33715
// x := GetX ( building ) ;
33557: LD_ADDR_VAR 0 5
33561: PUSH
33562: LD_VAR 0 2
33566: PPUSH
33567: CALL_OW 250
33571: ST_TO_ADDR
// y := GetY ( building ) ;
33572: LD_ADDR_VAR 0 6
33576: PUSH
33577: LD_VAR 0 2
33581: PPUSH
33582: CALL_OW 251
33586: ST_TO_ADDR
// for i = 0 to 5 do
33587: LD_ADDR_VAR 0 4
33591: PUSH
33592: DOUBLE
33593: LD_INT 0
33595: DEC
33596: ST_TO_ADDR
33597: LD_INT 5
33599: PUSH
33600: FOR_TO
33601: IFFALSE 33713
// begin _x := ShiftX ( x , i , 3 ) ;
33603: LD_ADDR_VAR 0 7
33607: PUSH
33608: LD_VAR 0 5
33612: PPUSH
33613: LD_VAR 0 4
33617: PPUSH
33618: LD_INT 3
33620: PPUSH
33621: CALL_OW 272
33625: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
33626: LD_ADDR_VAR 0 8
33630: PUSH
33631: LD_VAR 0 6
33635: PPUSH
33636: LD_VAR 0 4
33640: PPUSH
33641: LD_INT 3
33643: PPUSH
33644: CALL_OW 273
33648: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
33649: LD_VAR 0 7
33653: PPUSH
33654: LD_VAR 0 8
33658: PPUSH
33659: CALL_OW 488
33663: NOT
33664: IFFALSE 33668
// continue ;
33666: GO 33600
// if HexInfo ( _x , _y ) = 0 then
33668: LD_VAR 0 7
33672: PPUSH
33673: LD_VAR 0 8
33677: PPUSH
33678: CALL_OW 428
33682: PUSH
33683: LD_INT 0
33685: EQUAL
33686: IFFALSE 33711
// begin ComMoveXY ( unit , _x , _y ) ;
33688: LD_VAR 0 1
33692: PPUSH
33693: LD_VAR 0 7
33697: PPUSH
33698: LD_VAR 0 8
33702: PPUSH
33703: CALL_OW 111
// exit ;
33707: POP
33708: POP
33709: GO 33715
// end ; end ;
33711: GO 33600
33713: POP
33714: POP
// end ;
33715: LD_VAR 0 3
33719: RET
// export function ScanBase ( side , base_area ) ; begin
33720: LD_INT 0
33722: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
33723: LD_ADDR_VAR 0 3
33727: PUSH
33728: LD_VAR 0 2
33732: PPUSH
33733: LD_INT 81
33735: PUSH
33736: LD_VAR 0 1
33740: PUSH
33741: EMPTY
33742: LIST
33743: LIST
33744: PPUSH
33745: CALL_OW 70
33749: ST_TO_ADDR
// end ;
33750: LD_VAR 0 3
33754: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
33755: LD_INT 0
33757: PPUSH
33758: PPUSH
33759: PPUSH
33760: PPUSH
// result := false ;
33761: LD_ADDR_VAR 0 2
33765: PUSH
33766: LD_INT 0
33768: ST_TO_ADDR
// side := GetSide ( unit ) ;
33769: LD_ADDR_VAR 0 3
33773: PUSH
33774: LD_VAR 0 1
33778: PPUSH
33779: CALL_OW 255
33783: ST_TO_ADDR
// nat := GetNation ( unit ) ;
33784: LD_ADDR_VAR 0 4
33788: PUSH
33789: LD_VAR 0 1
33793: PPUSH
33794: CALL_OW 248
33798: ST_TO_ADDR
// case nat of 1 :
33799: LD_VAR 0 4
33803: PUSH
33804: LD_INT 1
33806: DOUBLE
33807: EQUAL
33808: IFTRUE 33812
33810: GO 33823
33812: POP
// tech := tech_lassight ; 2 :
33813: LD_ADDR_VAR 0 5
33817: PUSH
33818: LD_INT 12
33820: ST_TO_ADDR
33821: GO 33862
33823: LD_INT 2
33825: DOUBLE
33826: EQUAL
33827: IFTRUE 33831
33829: GO 33842
33831: POP
// tech := tech_mortar ; 3 :
33832: LD_ADDR_VAR 0 5
33836: PUSH
33837: LD_INT 41
33839: ST_TO_ADDR
33840: GO 33862
33842: LD_INT 3
33844: DOUBLE
33845: EQUAL
33846: IFTRUE 33850
33848: GO 33861
33850: POP
// tech := tech_bazooka ; end ;
33851: LD_ADDR_VAR 0 5
33855: PUSH
33856: LD_INT 44
33858: ST_TO_ADDR
33859: GO 33862
33861: POP
// if Researched ( side , tech ) then
33862: LD_VAR 0 3
33866: PPUSH
33867: LD_VAR 0 5
33871: PPUSH
33872: CALL_OW 325
33876: IFFALSE 33903
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
33878: LD_ADDR_VAR 0 2
33882: PUSH
33883: LD_INT 5
33885: PUSH
33886: LD_INT 8
33888: PUSH
33889: LD_INT 9
33891: PUSH
33892: EMPTY
33893: LIST
33894: LIST
33895: LIST
33896: PUSH
33897: LD_VAR 0 4
33901: ARRAY
33902: ST_TO_ADDR
// end ;
33903: LD_VAR 0 2
33907: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
33908: LD_INT 0
33910: PPUSH
33911: PPUSH
33912: PPUSH
// if not mines then
33913: LD_VAR 0 2
33917: NOT
33918: IFFALSE 33922
// exit ;
33920: GO 34066
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33922: LD_ADDR_VAR 0 5
33926: PUSH
33927: LD_INT 81
33929: PUSH
33930: LD_VAR 0 1
33934: PUSH
33935: EMPTY
33936: LIST
33937: LIST
33938: PUSH
33939: LD_INT 3
33941: PUSH
33942: LD_INT 21
33944: PUSH
33945: LD_INT 3
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: EMPTY
33953: LIST
33954: LIST
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PPUSH
33960: CALL_OW 69
33964: ST_TO_ADDR
// for i in mines do
33965: LD_ADDR_VAR 0 4
33969: PUSH
33970: LD_VAR 0 2
33974: PUSH
33975: FOR_IN
33976: IFFALSE 34064
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
33978: LD_VAR 0 4
33982: PUSH
33983: LD_INT 1
33985: ARRAY
33986: PPUSH
33987: LD_VAR 0 4
33991: PUSH
33992: LD_INT 2
33994: ARRAY
33995: PPUSH
33996: CALL_OW 458
34000: NOT
34001: IFFALSE 34005
// continue ;
34003: GO 33975
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
34005: LD_VAR 0 4
34009: PUSH
34010: LD_INT 1
34012: ARRAY
34013: PPUSH
34014: LD_VAR 0 4
34018: PUSH
34019: LD_INT 2
34021: ARRAY
34022: PPUSH
34023: CALL_OW 428
34027: PUSH
34028: LD_VAR 0 5
34032: IN
34033: IFFALSE 34062
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
34035: LD_VAR 0 4
34039: PUSH
34040: LD_INT 1
34042: ARRAY
34043: PPUSH
34044: LD_VAR 0 4
34048: PUSH
34049: LD_INT 2
34051: ARRAY
34052: PPUSH
34053: LD_VAR 0 1
34057: PPUSH
34058: CALL_OW 456
// end ;
34062: GO 33975
34064: POP
34065: POP
// end ;
34066: LD_VAR 0 3
34070: RET
// export function Count ( array ) ; var i ; begin
34071: LD_INT 0
34073: PPUSH
34074: PPUSH
// result := 0 ;
34075: LD_ADDR_VAR 0 2
34079: PUSH
34080: LD_INT 0
34082: ST_TO_ADDR
// for i in array do
34083: LD_ADDR_VAR 0 3
34087: PUSH
34088: LD_VAR 0 1
34092: PUSH
34093: FOR_IN
34094: IFFALSE 34118
// if i then
34096: LD_VAR 0 3
34100: IFFALSE 34116
// result := result + 1 ;
34102: LD_ADDR_VAR 0 2
34106: PUSH
34107: LD_VAR 0 2
34111: PUSH
34112: LD_INT 1
34114: PLUS
34115: ST_TO_ADDR
34116: GO 34093
34118: POP
34119: POP
// end ;
34120: LD_VAR 0 2
34124: RET
// export function IsEmpty ( building ) ; begin
34125: LD_INT 0
34127: PPUSH
// if not building then
34128: LD_VAR 0 1
34132: NOT
34133: IFFALSE 34137
// exit ;
34135: GO 34180
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
34137: LD_ADDR_VAR 0 2
34141: PUSH
34142: LD_VAR 0 1
34146: PUSH
34147: LD_INT 22
34149: PUSH
34150: LD_VAR 0 1
34154: PPUSH
34155: CALL_OW 255
34159: PUSH
34160: EMPTY
34161: LIST
34162: LIST
34163: PUSH
34164: LD_INT 58
34166: PUSH
34167: EMPTY
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: PPUSH
34174: CALL_OW 69
34178: IN
34179: ST_TO_ADDR
// end ;
34180: LD_VAR 0 2
34184: RET
// export function IsNotFull ( building ) ; begin
34185: LD_INT 0
34187: PPUSH
// if not building then
34188: LD_VAR 0 1
34192: NOT
34193: IFFALSE 34197
// exit ;
34195: GO 34216
// result := UnitsInside ( building ) < 6 ;
34197: LD_ADDR_VAR 0 2
34201: PUSH
34202: LD_VAR 0 1
34206: PPUSH
34207: CALL_OW 313
34211: PUSH
34212: LD_INT 6
34214: LESS
34215: ST_TO_ADDR
// end ;
34216: LD_VAR 0 2
34220: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
34221: LD_INT 0
34223: PPUSH
34224: PPUSH
34225: PPUSH
34226: PPUSH
// tmp := [ ] ;
34227: LD_ADDR_VAR 0 3
34231: PUSH
34232: EMPTY
34233: ST_TO_ADDR
// list := [ ] ;
34234: LD_ADDR_VAR 0 5
34238: PUSH
34239: EMPTY
34240: ST_TO_ADDR
// for i = 16 to 25 do
34241: LD_ADDR_VAR 0 4
34245: PUSH
34246: DOUBLE
34247: LD_INT 16
34249: DEC
34250: ST_TO_ADDR
34251: LD_INT 25
34253: PUSH
34254: FOR_TO
34255: IFFALSE 34328
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
34257: LD_ADDR_VAR 0 3
34261: PUSH
34262: LD_VAR 0 3
34266: PUSH
34267: LD_INT 22
34269: PUSH
34270: LD_VAR 0 1
34274: PPUSH
34275: CALL_OW 255
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 91
34286: PUSH
34287: LD_VAR 0 1
34291: PUSH
34292: LD_INT 6
34294: PUSH
34295: EMPTY
34296: LIST
34297: LIST
34298: LIST
34299: PUSH
34300: LD_INT 30
34302: PUSH
34303: LD_VAR 0 4
34307: PUSH
34308: EMPTY
34309: LIST
34310: LIST
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: LIST
34316: PUSH
34317: EMPTY
34318: LIST
34319: PPUSH
34320: CALL_OW 69
34324: ADD
34325: ST_TO_ADDR
34326: GO 34254
34328: POP
34329: POP
// for i = 1 to tmp do
34330: LD_ADDR_VAR 0 4
34334: PUSH
34335: DOUBLE
34336: LD_INT 1
34338: DEC
34339: ST_TO_ADDR
34340: LD_VAR 0 3
34344: PUSH
34345: FOR_TO
34346: IFFALSE 34434
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
34348: LD_ADDR_VAR 0 5
34352: PUSH
34353: LD_VAR 0 5
34357: PUSH
34358: LD_VAR 0 3
34362: PUSH
34363: LD_VAR 0 4
34367: ARRAY
34368: PPUSH
34369: CALL_OW 266
34373: PUSH
34374: LD_VAR 0 3
34378: PUSH
34379: LD_VAR 0 4
34383: ARRAY
34384: PPUSH
34385: CALL_OW 250
34389: PUSH
34390: LD_VAR 0 3
34394: PUSH
34395: LD_VAR 0 4
34399: ARRAY
34400: PPUSH
34401: CALL_OW 251
34405: PUSH
34406: LD_VAR 0 3
34410: PUSH
34411: LD_VAR 0 4
34415: ARRAY
34416: PPUSH
34417: CALL_OW 254
34421: PUSH
34422: EMPTY
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: PUSH
34428: EMPTY
34429: LIST
34430: ADD
34431: ST_TO_ADDR
34432: GO 34345
34434: POP
34435: POP
// result := list ;
34436: LD_ADDR_VAR 0 2
34440: PUSH
34441: LD_VAR 0 5
34445: ST_TO_ADDR
// end ;
34446: LD_VAR 0 2
34450: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
34451: LD_INT 0
34453: PPUSH
34454: PPUSH
34455: PPUSH
34456: PPUSH
34457: PPUSH
34458: PPUSH
34459: PPUSH
// if not factory then
34460: LD_VAR 0 1
34464: NOT
34465: IFFALSE 34469
// exit ;
34467: GO 35062
// if control = control_apeman then
34469: LD_VAR 0 4
34473: PUSH
34474: LD_INT 5
34476: EQUAL
34477: IFFALSE 34586
// begin tmp := UnitsInside ( factory ) ;
34479: LD_ADDR_VAR 0 8
34483: PUSH
34484: LD_VAR 0 1
34488: PPUSH
34489: CALL_OW 313
34493: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
34494: LD_VAR 0 8
34498: PPUSH
34499: LD_INT 25
34501: PUSH
34502: LD_INT 12
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PPUSH
34509: CALL_OW 72
34513: NOT
34514: IFFALSE 34524
// control := control_manual ;
34516: LD_ADDR_VAR 0 4
34520: PUSH
34521: LD_INT 1
34523: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
34524: LD_ADDR_VAR 0 8
34528: PUSH
34529: LD_VAR 0 1
34533: PPUSH
34534: CALL 34221 0 1
34538: ST_TO_ADDR
// if tmp then
34539: LD_VAR 0 8
34543: IFFALSE 34586
// begin for i in tmp do
34545: LD_ADDR_VAR 0 7
34549: PUSH
34550: LD_VAR 0 8
34554: PUSH
34555: FOR_IN
34556: IFFALSE 34584
// if i [ 1 ] = b_ext_radio then
34558: LD_VAR 0 7
34562: PUSH
34563: LD_INT 1
34565: ARRAY
34566: PUSH
34567: LD_INT 22
34569: EQUAL
34570: IFFALSE 34582
// begin control := control_remote ;
34572: LD_ADDR_VAR 0 4
34576: PUSH
34577: LD_INT 2
34579: ST_TO_ADDR
// break ;
34580: GO 34584
// end ;
34582: GO 34555
34584: POP
34585: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
34586: LD_VAR 0 1
34590: PPUSH
34591: LD_VAR 0 2
34595: PPUSH
34596: LD_VAR 0 3
34600: PPUSH
34601: LD_VAR 0 4
34605: PPUSH
34606: LD_VAR 0 5
34610: PPUSH
34611: CALL_OW 448
34615: IFFALSE 34650
// begin result := [ chassis , engine , control , weapon ] ;
34617: LD_ADDR_VAR 0 6
34621: PUSH
34622: LD_VAR 0 2
34626: PUSH
34627: LD_VAR 0 3
34631: PUSH
34632: LD_VAR 0 4
34636: PUSH
34637: LD_VAR 0 5
34641: PUSH
34642: EMPTY
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: ST_TO_ADDR
// exit ;
34648: GO 35062
// end ; _chassis := AvailableChassisList ( factory ) ;
34650: LD_ADDR_VAR 0 9
34654: PUSH
34655: LD_VAR 0 1
34659: PPUSH
34660: CALL_OW 475
34664: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
34665: LD_ADDR_VAR 0 11
34669: PUSH
34670: LD_VAR 0 1
34674: PPUSH
34675: CALL_OW 476
34679: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
34680: LD_ADDR_VAR 0 12
34684: PUSH
34685: LD_VAR 0 1
34689: PPUSH
34690: CALL_OW 477
34694: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
34695: LD_ADDR_VAR 0 10
34699: PUSH
34700: LD_VAR 0 1
34704: PPUSH
34705: CALL_OW 478
34709: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
34710: LD_VAR 0 9
34714: NOT
34715: PUSH
34716: LD_VAR 0 11
34720: NOT
34721: OR
34722: PUSH
34723: LD_VAR 0 12
34727: NOT
34728: OR
34729: PUSH
34730: LD_VAR 0 10
34734: NOT
34735: OR
34736: IFFALSE 34771
// begin result := [ chassis , engine , control , weapon ] ;
34738: LD_ADDR_VAR 0 6
34742: PUSH
34743: LD_VAR 0 2
34747: PUSH
34748: LD_VAR 0 3
34752: PUSH
34753: LD_VAR 0 4
34757: PUSH
34758: LD_VAR 0 5
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: ST_TO_ADDR
// exit ;
34769: GO 35062
// end ; if not chassis in _chassis then
34771: LD_VAR 0 2
34775: PUSH
34776: LD_VAR 0 9
34780: IN
34781: NOT
34782: IFFALSE 34808
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
34784: LD_ADDR_VAR 0 2
34788: PUSH
34789: LD_VAR 0 9
34793: PUSH
34794: LD_INT 1
34796: PPUSH
34797: LD_VAR 0 9
34801: PPUSH
34802: CALL_OW 12
34806: ARRAY
34807: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
34808: LD_VAR 0 2
34812: PPUSH
34813: LD_VAR 0 3
34817: PPUSH
34818: CALL 35067 0 2
34822: NOT
34823: IFFALSE 34882
// repeat engine := _engine [ 1 ] ;
34825: LD_ADDR_VAR 0 3
34829: PUSH
34830: LD_VAR 0 11
34834: PUSH
34835: LD_INT 1
34837: ARRAY
34838: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
34839: LD_ADDR_VAR 0 11
34843: PUSH
34844: LD_VAR 0 11
34848: PPUSH
34849: LD_INT 1
34851: PPUSH
34852: CALL_OW 3
34856: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
34857: LD_VAR 0 2
34861: PPUSH
34862: LD_VAR 0 3
34866: PPUSH
34867: CALL 35067 0 2
34871: PUSH
34872: LD_VAR 0 11
34876: PUSH
34877: EMPTY
34878: EQUAL
34879: OR
34880: IFFALSE 34825
// if not control in _control then
34882: LD_VAR 0 4
34886: PUSH
34887: LD_VAR 0 12
34891: IN
34892: NOT
34893: IFFALSE 34919
// control := _control [ rand ( 1 , _control ) ] ;
34895: LD_ADDR_VAR 0 4
34899: PUSH
34900: LD_VAR 0 12
34904: PUSH
34905: LD_INT 1
34907: PPUSH
34908: LD_VAR 0 12
34912: PPUSH
34913: CALL_OW 12
34917: ARRAY
34918: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
34919: LD_VAR 0 2
34923: PPUSH
34924: LD_VAR 0 5
34928: PPUSH
34929: CALL 35287 0 2
34933: NOT
34934: IFFALSE 34993
// repeat weapon := _weapon [ 1 ] ;
34936: LD_ADDR_VAR 0 5
34940: PUSH
34941: LD_VAR 0 10
34945: PUSH
34946: LD_INT 1
34948: ARRAY
34949: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
34950: LD_ADDR_VAR 0 10
34954: PUSH
34955: LD_VAR 0 10
34959: PPUSH
34960: LD_INT 1
34962: PPUSH
34963: CALL_OW 3
34967: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
34968: LD_VAR 0 2
34972: PPUSH
34973: LD_VAR 0 5
34977: PPUSH
34978: CALL 35287 0 2
34982: PUSH
34983: LD_VAR 0 10
34987: PUSH
34988: EMPTY
34989: EQUAL
34990: OR
34991: IFFALSE 34936
// result := [ ] ;
34993: LD_ADDR_VAR 0 6
34997: PUSH
34998: EMPTY
34999: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
35000: LD_VAR 0 1
35004: PPUSH
35005: LD_VAR 0 2
35009: PPUSH
35010: LD_VAR 0 3
35014: PPUSH
35015: LD_VAR 0 4
35019: PPUSH
35020: LD_VAR 0 5
35024: PPUSH
35025: CALL_OW 448
35029: IFFALSE 35062
// result := [ chassis , engine , control , weapon ] ;
35031: LD_ADDR_VAR 0 6
35035: PUSH
35036: LD_VAR 0 2
35040: PUSH
35041: LD_VAR 0 3
35045: PUSH
35046: LD_VAR 0 4
35050: PUSH
35051: LD_VAR 0 5
35055: PUSH
35056: EMPTY
35057: LIST
35058: LIST
35059: LIST
35060: LIST
35061: ST_TO_ADDR
// end ;
35062: LD_VAR 0 6
35066: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
35067: LD_INT 0
35069: PPUSH
// if not chassis or not engine then
35070: LD_VAR 0 1
35074: NOT
35075: PUSH
35076: LD_VAR 0 2
35080: NOT
35081: OR
35082: IFFALSE 35086
// exit ;
35084: GO 35282
// case engine of engine_solar :
35086: LD_VAR 0 2
35090: PUSH
35091: LD_INT 2
35093: DOUBLE
35094: EQUAL
35095: IFTRUE 35099
35097: GO 35137
35099: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
35100: LD_ADDR_VAR 0 3
35104: PUSH
35105: LD_INT 11
35107: PUSH
35108: LD_INT 12
35110: PUSH
35111: LD_INT 13
35113: PUSH
35114: LD_INT 14
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: LD_INT 2
35122: PUSH
35123: LD_INT 3
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: ST_TO_ADDR
35135: GO 35266
35137: LD_INT 1
35139: DOUBLE
35140: EQUAL
35141: IFTRUE 35145
35143: GO 35207
35145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
35146: LD_ADDR_VAR 0 3
35150: PUSH
35151: LD_INT 11
35153: PUSH
35154: LD_INT 12
35156: PUSH
35157: LD_INT 13
35159: PUSH
35160: LD_INT 14
35162: PUSH
35163: LD_INT 1
35165: PUSH
35166: LD_INT 2
35168: PUSH
35169: LD_INT 3
35171: PUSH
35172: LD_INT 4
35174: PUSH
35175: LD_INT 5
35177: PUSH
35178: LD_INT 21
35180: PUSH
35181: LD_INT 23
35183: PUSH
35184: LD_INT 22
35186: PUSH
35187: LD_INT 24
35189: PUSH
35190: EMPTY
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: ST_TO_ADDR
35205: GO 35266
35207: LD_INT 3
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35215
35213: GO 35265
35215: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
35216: LD_ADDR_VAR 0 3
35220: PUSH
35221: LD_INT 13
35223: PUSH
35224: LD_INT 14
35226: PUSH
35227: LD_INT 2
35229: PUSH
35230: LD_INT 3
35232: PUSH
35233: LD_INT 4
35235: PUSH
35236: LD_INT 5
35238: PUSH
35239: LD_INT 21
35241: PUSH
35242: LD_INT 22
35244: PUSH
35245: LD_INT 23
35247: PUSH
35248: LD_INT 24
35250: PUSH
35251: EMPTY
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: ST_TO_ADDR
35263: GO 35266
35265: POP
// result := ( chassis in result ) ;
35266: LD_ADDR_VAR 0 3
35270: PUSH
35271: LD_VAR 0 1
35275: PUSH
35276: LD_VAR 0 3
35280: IN
35281: ST_TO_ADDR
// end ;
35282: LD_VAR 0 3
35286: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
35287: LD_INT 0
35289: PPUSH
// if not chassis or not weapon then
35290: LD_VAR 0 1
35294: NOT
35295: PUSH
35296: LD_VAR 0 2
35300: NOT
35301: OR
35302: IFFALSE 35306
// exit ;
35304: GO 36332
// case weapon of us_machine_gun :
35306: LD_VAR 0 2
35310: PUSH
35311: LD_INT 2
35313: DOUBLE
35314: EQUAL
35315: IFTRUE 35319
35317: GO 35349
35319: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
35320: LD_ADDR_VAR 0 3
35324: PUSH
35325: LD_INT 1
35327: PUSH
35328: LD_INT 2
35330: PUSH
35331: LD_INT 3
35333: PUSH
35334: LD_INT 4
35336: PUSH
35337: LD_INT 5
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
35347: GO 36316
35349: LD_INT 3
35351: DOUBLE
35352: EQUAL
35353: IFTRUE 35357
35355: GO 35387
35357: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
35358: LD_ADDR_VAR 0 3
35362: PUSH
35363: LD_INT 1
35365: PUSH
35366: LD_INT 2
35368: PUSH
35369: LD_INT 3
35371: PUSH
35372: LD_INT 4
35374: PUSH
35375: LD_INT 5
35377: PUSH
35378: EMPTY
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: ST_TO_ADDR
35385: GO 36316
35387: LD_INT 11
35389: DOUBLE
35390: EQUAL
35391: IFTRUE 35395
35393: GO 35425
35395: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
35396: LD_ADDR_VAR 0 3
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 3
35409: PUSH
35410: LD_INT 4
35412: PUSH
35413: LD_INT 5
35415: PUSH
35416: EMPTY
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: ST_TO_ADDR
35423: GO 36316
35425: LD_INT 4
35427: DOUBLE
35428: EQUAL
35429: IFTRUE 35433
35431: GO 35459
35433: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
35434: LD_ADDR_VAR 0 3
35438: PUSH
35439: LD_INT 2
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: LD_INT 4
35447: PUSH
35448: LD_INT 5
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: ST_TO_ADDR
35457: GO 36316
35459: LD_INT 5
35461: DOUBLE
35462: EQUAL
35463: IFTRUE 35467
35465: GO 35493
35467: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
35468: LD_ADDR_VAR 0 3
35472: PUSH
35473: LD_INT 2
35475: PUSH
35476: LD_INT 3
35478: PUSH
35479: LD_INT 4
35481: PUSH
35482: LD_INT 5
35484: PUSH
35485: EMPTY
35486: LIST
35487: LIST
35488: LIST
35489: LIST
35490: ST_TO_ADDR
35491: GO 36316
35493: LD_INT 9
35495: DOUBLE
35496: EQUAL
35497: IFTRUE 35501
35499: GO 35527
35501: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
35502: LD_ADDR_VAR 0 3
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: LD_INT 4
35515: PUSH
35516: LD_INT 5
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: LIST
35523: LIST
35524: ST_TO_ADDR
35525: GO 36316
35527: LD_INT 7
35529: DOUBLE
35530: EQUAL
35531: IFTRUE 35535
35533: GO 35561
35535: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
35536: LD_ADDR_VAR 0 3
35540: PUSH
35541: LD_INT 2
35543: PUSH
35544: LD_INT 3
35546: PUSH
35547: LD_INT 4
35549: PUSH
35550: LD_INT 5
35552: PUSH
35553: EMPTY
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: ST_TO_ADDR
35559: GO 36316
35561: LD_INT 12
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35595
35569: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_INT 2
35577: PUSH
35578: LD_INT 3
35580: PUSH
35581: LD_INT 4
35583: PUSH
35584: LD_INT 5
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: ST_TO_ADDR
35593: GO 36316
35595: LD_INT 13
35597: DOUBLE
35598: EQUAL
35599: IFTRUE 35603
35601: GO 35629
35603: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
35604: LD_ADDR_VAR 0 3
35608: PUSH
35609: LD_INT 2
35611: PUSH
35612: LD_INT 3
35614: PUSH
35615: LD_INT 4
35617: PUSH
35618: LD_INT 5
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: ST_TO_ADDR
35627: GO 36316
35629: LD_INT 14
35631: DOUBLE
35632: EQUAL
35633: IFTRUE 35637
35635: GO 35655
35637: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
35638: LD_ADDR_VAR 0 3
35642: PUSH
35643: LD_INT 4
35645: PUSH
35646: LD_INT 5
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: ST_TO_ADDR
35653: GO 36316
35655: LD_INT 6
35657: DOUBLE
35658: EQUAL
35659: IFTRUE 35663
35661: GO 35681
35663: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
35664: LD_ADDR_VAR 0 3
35668: PUSH
35669: LD_INT 4
35671: PUSH
35672: LD_INT 5
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: ST_TO_ADDR
35679: GO 36316
35681: LD_INT 10
35683: DOUBLE
35684: EQUAL
35685: IFTRUE 35689
35687: GO 35707
35689: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
35690: LD_ADDR_VAR 0 3
35694: PUSH
35695: LD_INT 4
35697: PUSH
35698: LD_INT 5
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: ST_TO_ADDR
35705: GO 36316
35707: LD_INT 22
35709: DOUBLE
35710: EQUAL
35711: IFTRUE 35715
35713: GO 35741
35715: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
35716: LD_ADDR_VAR 0 3
35720: PUSH
35721: LD_INT 11
35723: PUSH
35724: LD_INT 12
35726: PUSH
35727: LD_INT 13
35729: PUSH
35730: LD_INT 14
35732: PUSH
35733: EMPTY
35734: LIST
35735: LIST
35736: LIST
35737: LIST
35738: ST_TO_ADDR
35739: GO 36316
35741: LD_INT 23
35743: DOUBLE
35744: EQUAL
35745: IFTRUE 35749
35747: GO 35775
35749: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
35750: LD_ADDR_VAR 0 3
35754: PUSH
35755: LD_INT 11
35757: PUSH
35758: LD_INT 12
35760: PUSH
35761: LD_INT 13
35763: PUSH
35764: LD_INT 14
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: ST_TO_ADDR
35773: GO 36316
35775: LD_INT 24
35777: DOUBLE
35778: EQUAL
35779: IFTRUE 35783
35781: GO 35809
35783: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
35784: LD_ADDR_VAR 0 3
35788: PUSH
35789: LD_INT 11
35791: PUSH
35792: LD_INT 12
35794: PUSH
35795: LD_INT 13
35797: PUSH
35798: LD_INT 14
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
35807: GO 36316
35809: LD_INT 30
35811: DOUBLE
35812: EQUAL
35813: IFTRUE 35817
35815: GO 35843
35817: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
35818: LD_ADDR_VAR 0 3
35822: PUSH
35823: LD_INT 11
35825: PUSH
35826: LD_INT 12
35828: PUSH
35829: LD_INT 13
35831: PUSH
35832: LD_INT 14
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: ST_TO_ADDR
35841: GO 36316
35843: LD_INT 25
35845: DOUBLE
35846: EQUAL
35847: IFTRUE 35851
35849: GO 35869
35851: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
35852: LD_ADDR_VAR 0 3
35856: PUSH
35857: LD_INT 13
35859: PUSH
35860: LD_INT 14
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: ST_TO_ADDR
35867: GO 36316
35869: LD_INT 27
35871: DOUBLE
35872: EQUAL
35873: IFTRUE 35877
35875: GO 35895
35877: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
35878: LD_ADDR_VAR 0 3
35882: PUSH
35883: LD_INT 13
35885: PUSH
35886: LD_INT 14
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: ST_TO_ADDR
35893: GO 36316
35895: LD_INT 28
35897: DOUBLE
35898: EQUAL
35899: IFTRUE 35903
35901: GO 35921
35903: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
35904: LD_ADDR_VAR 0 3
35908: PUSH
35909: LD_INT 13
35911: PUSH
35912: LD_INT 14
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: ST_TO_ADDR
35919: GO 36316
35921: LD_INT 29
35923: DOUBLE
35924: EQUAL
35925: IFTRUE 35929
35927: GO 35947
35929: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
35930: LD_ADDR_VAR 0 3
35934: PUSH
35935: LD_INT 13
35937: PUSH
35938: LD_INT 14
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: ST_TO_ADDR
35945: GO 36316
35947: LD_INT 31
35949: DOUBLE
35950: EQUAL
35951: IFTRUE 35955
35953: GO 35973
35955: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
35956: LD_ADDR_VAR 0 3
35960: PUSH
35961: LD_INT 13
35963: PUSH
35964: LD_INT 14
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: ST_TO_ADDR
35971: GO 36316
35973: LD_INT 26
35975: DOUBLE
35976: EQUAL
35977: IFTRUE 35981
35979: GO 35999
35981: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
35982: LD_ADDR_VAR 0 3
35986: PUSH
35987: LD_INT 13
35989: PUSH
35990: LD_INT 14
35992: PUSH
35993: EMPTY
35994: LIST
35995: LIST
35996: ST_TO_ADDR
35997: GO 36316
35999: LD_INT 42
36001: DOUBLE
36002: EQUAL
36003: IFTRUE 36007
36005: GO 36033
36007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
36008: LD_ADDR_VAR 0 3
36012: PUSH
36013: LD_INT 21
36015: PUSH
36016: LD_INT 22
36018: PUSH
36019: LD_INT 23
36021: PUSH
36022: LD_INT 24
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: ST_TO_ADDR
36031: GO 36316
36033: LD_INT 43
36035: DOUBLE
36036: EQUAL
36037: IFTRUE 36041
36039: GO 36067
36041: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
36042: LD_ADDR_VAR 0 3
36046: PUSH
36047: LD_INT 21
36049: PUSH
36050: LD_INT 22
36052: PUSH
36053: LD_INT 23
36055: PUSH
36056: LD_INT 24
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: ST_TO_ADDR
36065: GO 36316
36067: LD_INT 44
36069: DOUBLE
36070: EQUAL
36071: IFTRUE 36075
36073: GO 36101
36075: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
36076: LD_ADDR_VAR 0 3
36080: PUSH
36081: LD_INT 21
36083: PUSH
36084: LD_INT 22
36086: PUSH
36087: LD_INT 23
36089: PUSH
36090: LD_INT 24
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: ST_TO_ADDR
36099: GO 36316
36101: LD_INT 45
36103: DOUBLE
36104: EQUAL
36105: IFTRUE 36109
36107: GO 36135
36109: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
36110: LD_ADDR_VAR 0 3
36114: PUSH
36115: LD_INT 21
36117: PUSH
36118: LD_INT 22
36120: PUSH
36121: LD_INT 23
36123: PUSH
36124: LD_INT 24
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: LIST
36132: ST_TO_ADDR
36133: GO 36316
36135: LD_INT 49
36137: DOUBLE
36138: EQUAL
36139: IFTRUE 36143
36141: GO 36169
36143: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
36144: LD_ADDR_VAR 0 3
36148: PUSH
36149: LD_INT 21
36151: PUSH
36152: LD_INT 22
36154: PUSH
36155: LD_INT 23
36157: PUSH
36158: LD_INT 24
36160: PUSH
36161: EMPTY
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: ST_TO_ADDR
36167: GO 36316
36169: LD_INT 51
36171: DOUBLE
36172: EQUAL
36173: IFTRUE 36177
36175: GO 36203
36177: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
36178: LD_ADDR_VAR 0 3
36182: PUSH
36183: LD_INT 21
36185: PUSH
36186: LD_INT 22
36188: PUSH
36189: LD_INT 23
36191: PUSH
36192: LD_INT 24
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: LIST
36199: LIST
36200: ST_TO_ADDR
36201: GO 36316
36203: LD_INT 52
36205: DOUBLE
36206: EQUAL
36207: IFTRUE 36211
36209: GO 36237
36211: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
36212: LD_ADDR_VAR 0 3
36216: PUSH
36217: LD_INT 21
36219: PUSH
36220: LD_INT 22
36222: PUSH
36223: LD_INT 23
36225: PUSH
36226: LD_INT 24
36228: PUSH
36229: EMPTY
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: ST_TO_ADDR
36235: GO 36316
36237: LD_INT 53
36239: DOUBLE
36240: EQUAL
36241: IFTRUE 36245
36243: GO 36263
36245: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
36246: LD_ADDR_VAR 0 3
36250: PUSH
36251: LD_INT 23
36253: PUSH
36254: LD_INT 24
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: ST_TO_ADDR
36261: GO 36316
36263: LD_INT 46
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36271
36269: GO 36289
36271: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
36272: LD_ADDR_VAR 0 3
36276: PUSH
36277: LD_INT 23
36279: PUSH
36280: LD_INT 24
36282: PUSH
36283: EMPTY
36284: LIST
36285: LIST
36286: ST_TO_ADDR
36287: GO 36316
36289: LD_INT 47
36291: DOUBLE
36292: EQUAL
36293: IFTRUE 36297
36295: GO 36315
36297: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
36298: LD_ADDR_VAR 0 3
36302: PUSH
36303: LD_INT 23
36305: PUSH
36306: LD_INT 24
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: ST_TO_ADDR
36313: GO 36316
36315: POP
// result := ( chassis in result ) ;
36316: LD_ADDR_VAR 0 3
36320: PUSH
36321: LD_VAR 0 1
36325: PUSH
36326: LD_VAR 0 3
36330: IN
36331: ST_TO_ADDR
// end ;
36332: LD_VAR 0 3
36336: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
36337: LD_INT 0
36339: PPUSH
36340: PPUSH
36341: PPUSH
36342: PPUSH
36343: PPUSH
36344: PPUSH
36345: PPUSH
// result := array ;
36346: LD_ADDR_VAR 0 5
36350: PUSH
36351: LD_VAR 0 1
36355: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
36356: LD_VAR 0 1
36360: NOT
36361: PUSH
36362: LD_VAR 0 2
36366: NOT
36367: OR
36368: PUSH
36369: LD_VAR 0 3
36373: NOT
36374: OR
36375: PUSH
36376: LD_VAR 0 2
36380: PUSH
36381: LD_VAR 0 1
36385: GREATER
36386: OR
36387: PUSH
36388: LD_VAR 0 3
36392: PUSH
36393: LD_VAR 0 1
36397: GREATER
36398: OR
36399: IFFALSE 36403
// exit ;
36401: GO 36699
// if direction then
36403: LD_VAR 0 4
36407: IFFALSE 36471
// begin d := 1 ;
36409: LD_ADDR_VAR 0 9
36413: PUSH
36414: LD_INT 1
36416: ST_TO_ADDR
// if i_from > i_to then
36417: LD_VAR 0 2
36421: PUSH
36422: LD_VAR 0 3
36426: GREATER
36427: IFFALSE 36453
// length := ( array - i_from ) + i_to else
36429: LD_ADDR_VAR 0 11
36433: PUSH
36434: LD_VAR 0 1
36438: PUSH
36439: LD_VAR 0 2
36443: MINUS
36444: PUSH
36445: LD_VAR 0 3
36449: PLUS
36450: ST_TO_ADDR
36451: GO 36469
// length := i_to - i_from ;
36453: LD_ADDR_VAR 0 11
36457: PUSH
36458: LD_VAR 0 3
36462: PUSH
36463: LD_VAR 0 2
36467: MINUS
36468: ST_TO_ADDR
// end else
36469: GO 36532
// begin d := - 1 ;
36471: LD_ADDR_VAR 0 9
36475: PUSH
36476: LD_INT 1
36478: NEG
36479: ST_TO_ADDR
// if i_from > i_to then
36480: LD_VAR 0 2
36484: PUSH
36485: LD_VAR 0 3
36489: GREATER
36490: IFFALSE 36510
// length := i_from - i_to else
36492: LD_ADDR_VAR 0 11
36496: PUSH
36497: LD_VAR 0 2
36501: PUSH
36502: LD_VAR 0 3
36506: MINUS
36507: ST_TO_ADDR
36508: GO 36532
// length := ( array - i_to ) + i_from ;
36510: LD_ADDR_VAR 0 11
36514: PUSH
36515: LD_VAR 0 1
36519: PUSH
36520: LD_VAR 0 3
36524: MINUS
36525: PUSH
36526: LD_VAR 0 2
36530: PLUS
36531: ST_TO_ADDR
// end ; if not length then
36532: LD_VAR 0 11
36536: NOT
36537: IFFALSE 36541
// exit ;
36539: GO 36699
// tmp := array ;
36541: LD_ADDR_VAR 0 10
36545: PUSH
36546: LD_VAR 0 1
36550: ST_TO_ADDR
// for i = 1 to length do
36551: LD_ADDR_VAR 0 6
36555: PUSH
36556: DOUBLE
36557: LD_INT 1
36559: DEC
36560: ST_TO_ADDR
36561: LD_VAR 0 11
36565: PUSH
36566: FOR_TO
36567: IFFALSE 36687
// begin for j = 1 to array do
36569: LD_ADDR_VAR 0 7
36573: PUSH
36574: DOUBLE
36575: LD_INT 1
36577: DEC
36578: ST_TO_ADDR
36579: LD_VAR 0 1
36583: PUSH
36584: FOR_TO
36585: IFFALSE 36673
// begin k := j + d ;
36587: LD_ADDR_VAR 0 8
36591: PUSH
36592: LD_VAR 0 7
36596: PUSH
36597: LD_VAR 0 9
36601: PLUS
36602: ST_TO_ADDR
// if k > array then
36603: LD_VAR 0 8
36607: PUSH
36608: LD_VAR 0 1
36612: GREATER
36613: IFFALSE 36623
// k := 1 ;
36615: LD_ADDR_VAR 0 8
36619: PUSH
36620: LD_INT 1
36622: ST_TO_ADDR
// if not k then
36623: LD_VAR 0 8
36627: NOT
36628: IFFALSE 36640
// k := array ;
36630: LD_ADDR_VAR 0 8
36634: PUSH
36635: LD_VAR 0 1
36639: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
36640: LD_ADDR_VAR 0 10
36644: PUSH
36645: LD_VAR 0 10
36649: PPUSH
36650: LD_VAR 0 8
36654: PPUSH
36655: LD_VAR 0 1
36659: PUSH
36660: LD_VAR 0 7
36664: ARRAY
36665: PPUSH
36666: CALL_OW 1
36670: ST_TO_ADDR
// end ;
36671: GO 36584
36673: POP
36674: POP
// array := tmp ;
36675: LD_ADDR_VAR 0 1
36679: PUSH
36680: LD_VAR 0 10
36684: ST_TO_ADDR
// end ;
36685: GO 36566
36687: POP
36688: POP
// result := array ;
36689: LD_ADDR_VAR 0 5
36693: PUSH
36694: LD_VAR 0 1
36698: ST_TO_ADDR
// end ;
36699: LD_VAR 0 5
36703: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
36704: LD_INT 0
36706: PPUSH
36707: PPUSH
// result := 0 ;
36708: LD_ADDR_VAR 0 3
36712: PUSH
36713: LD_INT 0
36715: ST_TO_ADDR
// if not array or not value in array then
36716: LD_VAR 0 1
36720: NOT
36721: PUSH
36722: LD_VAR 0 2
36726: PUSH
36727: LD_VAR 0 1
36731: IN
36732: NOT
36733: OR
36734: IFFALSE 36738
// exit ;
36736: GO 36792
// for i = 1 to array do
36738: LD_ADDR_VAR 0 4
36742: PUSH
36743: DOUBLE
36744: LD_INT 1
36746: DEC
36747: ST_TO_ADDR
36748: LD_VAR 0 1
36752: PUSH
36753: FOR_TO
36754: IFFALSE 36790
// if value = array [ i ] then
36756: LD_VAR 0 2
36760: PUSH
36761: LD_VAR 0 1
36765: PUSH
36766: LD_VAR 0 4
36770: ARRAY
36771: EQUAL
36772: IFFALSE 36788
// begin result := i ;
36774: LD_ADDR_VAR 0 3
36778: PUSH
36779: LD_VAR 0 4
36783: ST_TO_ADDR
// exit ;
36784: POP
36785: POP
36786: GO 36792
// end ;
36788: GO 36753
36790: POP
36791: POP
// end ;
36792: LD_VAR 0 3
36796: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
36797: LD_INT 0
36799: PPUSH
// vc_chassis := chassis ;
36800: LD_ADDR_OWVAR 37
36804: PUSH
36805: LD_VAR 0 1
36809: ST_TO_ADDR
// vc_engine := engine ;
36810: LD_ADDR_OWVAR 39
36814: PUSH
36815: LD_VAR 0 2
36819: ST_TO_ADDR
// vc_control := control ;
36820: LD_ADDR_OWVAR 38
36824: PUSH
36825: LD_VAR 0 3
36829: ST_TO_ADDR
// vc_weapon := weapon ;
36830: LD_ADDR_OWVAR 40
36834: PUSH
36835: LD_VAR 0 4
36839: ST_TO_ADDR
// vc_fuel_battery := fuel ;
36840: LD_ADDR_OWVAR 41
36844: PUSH
36845: LD_VAR 0 5
36849: ST_TO_ADDR
// end ;
36850: LD_VAR 0 6
36854: RET
// export function WantPlant ( unit ) ; var task ; begin
36855: LD_INT 0
36857: PPUSH
36858: PPUSH
// result := false ;
36859: LD_ADDR_VAR 0 2
36863: PUSH
36864: LD_INT 0
36866: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
36867: LD_ADDR_VAR 0 3
36871: PUSH
36872: LD_VAR 0 1
36876: PPUSH
36877: CALL_OW 437
36881: ST_TO_ADDR
// if task then
36882: LD_VAR 0 3
36886: IFFALSE 36914
// if task [ 1 ] [ 1 ] = p then
36888: LD_VAR 0 3
36892: PUSH
36893: LD_INT 1
36895: ARRAY
36896: PUSH
36897: LD_INT 1
36899: ARRAY
36900: PUSH
36901: LD_STRING p
36903: EQUAL
36904: IFFALSE 36914
// result := true ;
36906: LD_ADDR_VAR 0 2
36910: PUSH
36911: LD_INT 1
36913: ST_TO_ADDR
// end ;
36914: LD_VAR 0 2
36918: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
36919: LD_INT 0
36921: PPUSH
36922: PPUSH
36923: PPUSH
36924: PPUSH
// if pos < 1 then
36925: LD_VAR 0 2
36929: PUSH
36930: LD_INT 1
36932: LESS
36933: IFFALSE 36937
// exit ;
36935: GO 37240
// if pos = 1 then
36937: LD_VAR 0 2
36941: PUSH
36942: LD_INT 1
36944: EQUAL
36945: IFFALSE 36978
// result := Replace ( arr , pos [ 1 ] , value ) else
36947: LD_ADDR_VAR 0 4
36951: PUSH
36952: LD_VAR 0 1
36956: PPUSH
36957: LD_VAR 0 2
36961: PUSH
36962: LD_INT 1
36964: ARRAY
36965: PPUSH
36966: LD_VAR 0 3
36970: PPUSH
36971: CALL_OW 1
36975: ST_TO_ADDR
36976: GO 37240
// begin tmp := arr ;
36978: LD_ADDR_VAR 0 6
36982: PUSH
36983: LD_VAR 0 1
36987: ST_TO_ADDR
// s_arr := [ tmp ] ;
36988: LD_ADDR_VAR 0 7
36992: PUSH
36993: LD_VAR 0 6
36997: PUSH
36998: EMPTY
36999: LIST
37000: ST_TO_ADDR
// for i = 1 to pos - 1 do
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: DOUBLE
37007: LD_INT 1
37009: DEC
37010: ST_TO_ADDR
37011: LD_VAR 0 2
37015: PUSH
37016: LD_INT 1
37018: MINUS
37019: PUSH
37020: FOR_TO
37021: IFFALSE 37066
// begin tmp := tmp [ pos [ i ] ] ;
37023: LD_ADDR_VAR 0 6
37027: PUSH
37028: LD_VAR 0 6
37032: PUSH
37033: LD_VAR 0 2
37037: PUSH
37038: LD_VAR 0 5
37042: ARRAY
37043: ARRAY
37044: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
37045: LD_ADDR_VAR 0 7
37049: PUSH
37050: LD_VAR 0 7
37054: PUSH
37055: LD_VAR 0 6
37059: PUSH
37060: EMPTY
37061: LIST
37062: ADD
37063: ST_TO_ADDR
// end ;
37064: GO 37020
37066: POP
37067: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
37068: LD_ADDR_VAR 0 6
37072: PUSH
37073: LD_VAR 0 6
37077: PPUSH
37078: LD_VAR 0 2
37082: PUSH
37083: LD_VAR 0 2
37087: ARRAY
37088: PPUSH
37089: LD_VAR 0 3
37093: PPUSH
37094: CALL_OW 1
37098: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
37099: LD_ADDR_VAR 0 7
37103: PUSH
37104: LD_VAR 0 7
37108: PPUSH
37109: LD_VAR 0 7
37113: PPUSH
37114: LD_VAR 0 6
37118: PPUSH
37119: CALL_OW 1
37123: ST_TO_ADDR
// for i = s_arr downto 2 do
37124: LD_ADDR_VAR 0 5
37128: PUSH
37129: DOUBLE
37130: LD_VAR 0 7
37134: INC
37135: ST_TO_ADDR
37136: LD_INT 2
37138: PUSH
37139: FOR_DOWNTO
37140: IFFALSE 37224
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
37142: LD_ADDR_VAR 0 6
37146: PUSH
37147: LD_VAR 0 7
37151: PUSH
37152: LD_VAR 0 5
37156: PUSH
37157: LD_INT 1
37159: MINUS
37160: ARRAY
37161: PPUSH
37162: LD_VAR 0 2
37166: PUSH
37167: LD_VAR 0 5
37171: PUSH
37172: LD_INT 1
37174: MINUS
37175: ARRAY
37176: PPUSH
37177: LD_VAR 0 7
37181: PUSH
37182: LD_VAR 0 5
37186: ARRAY
37187: PPUSH
37188: CALL_OW 1
37192: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
37193: LD_ADDR_VAR 0 7
37197: PUSH
37198: LD_VAR 0 7
37202: PPUSH
37203: LD_VAR 0 5
37207: PUSH
37208: LD_INT 1
37210: MINUS
37211: PPUSH
37212: LD_VAR 0 6
37216: PPUSH
37217: CALL_OW 1
37221: ST_TO_ADDR
// end ;
37222: GO 37139
37224: POP
37225: POP
// result := s_arr [ 1 ] ;
37226: LD_ADDR_VAR 0 4
37230: PUSH
37231: LD_VAR 0 7
37235: PUSH
37236: LD_INT 1
37238: ARRAY
37239: ST_TO_ADDR
// end ; end ;
37240: LD_VAR 0 4
37244: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
37245: LD_INT 0
37247: PPUSH
37248: PPUSH
// if not list then
37249: LD_VAR 0 1
37253: NOT
37254: IFFALSE 37258
// exit ;
37256: GO 37349
// i := list [ pos1 ] ;
37258: LD_ADDR_VAR 0 5
37262: PUSH
37263: LD_VAR 0 1
37267: PUSH
37268: LD_VAR 0 2
37272: ARRAY
37273: ST_TO_ADDR
// if not i then
37274: LD_VAR 0 5
37278: NOT
37279: IFFALSE 37283
// exit ;
37281: GO 37349
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
37283: LD_ADDR_VAR 0 1
37287: PUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: LD_VAR 0 2
37297: PPUSH
37298: LD_VAR 0 1
37302: PUSH
37303: LD_VAR 0 3
37307: ARRAY
37308: PPUSH
37309: CALL_OW 1
37313: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
37314: LD_ADDR_VAR 0 1
37318: PUSH
37319: LD_VAR 0 1
37323: PPUSH
37324: LD_VAR 0 3
37328: PPUSH
37329: LD_VAR 0 5
37333: PPUSH
37334: CALL_OW 1
37338: ST_TO_ADDR
// result := list ;
37339: LD_ADDR_VAR 0 4
37343: PUSH
37344: LD_VAR 0 1
37348: ST_TO_ADDR
// end ;
37349: LD_VAR 0 4
37353: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
37354: LD_INT 0
37356: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
37357: LD_ADDR_VAR 0 5
37361: PUSH
37362: LD_VAR 0 1
37366: PPUSH
37367: CALL_OW 250
37371: PPUSH
37372: LD_VAR 0 1
37376: PPUSH
37377: CALL_OW 251
37381: PPUSH
37382: LD_VAR 0 2
37386: PPUSH
37387: LD_VAR 0 3
37391: PPUSH
37392: LD_VAR 0 4
37396: PPUSH
37397: CALL 37407 0 5
37401: ST_TO_ADDR
// end ;
37402: LD_VAR 0 5
37406: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
37407: LD_INT 0
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
// if not list then
37413: LD_VAR 0 3
37417: NOT
37418: IFFALSE 37422
// exit ;
37420: GO 37810
// result := [ ] ;
37422: LD_ADDR_VAR 0 6
37426: PUSH
37427: EMPTY
37428: ST_TO_ADDR
// for i in list do
37429: LD_ADDR_VAR 0 7
37433: PUSH
37434: LD_VAR 0 3
37438: PUSH
37439: FOR_IN
37440: IFFALSE 37642
// begin tmp := GetDistUnitXY ( i , x , y ) ;
37442: LD_ADDR_VAR 0 9
37446: PUSH
37447: LD_VAR 0 7
37451: PPUSH
37452: LD_VAR 0 1
37456: PPUSH
37457: LD_VAR 0 2
37461: PPUSH
37462: CALL_OW 297
37466: ST_TO_ADDR
// if not result then
37467: LD_VAR 0 6
37471: NOT
37472: IFFALSE 37498
// result := [ [ i , tmp ] ] else
37474: LD_ADDR_VAR 0 6
37478: PUSH
37479: LD_VAR 0 7
37483: PUSH
37484: LD_VAR 0 9
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: EMPTY
37494: LIST
37495: ST_TO_ADDR
37496: GO 37640
// begin if result [ result ] [ 2 ] < tmp then
37498: LD_VAR 0 6
37502: PUSH
37503: LD_VAR 0 6
37507: ARRAY
37508: PUSH
37509: LD_INT 2
37511: ARRAY
37512: PUSH
37513: LD_VAR 0 9
37517: LESS
37518: IFFALSE 37560
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
37520: LD_ADDR_VAR 0 6
37524: PUSH
37525: LD_VAR 0 6
37529: PPUSH
37530: LD_VAR 0 6
37534: PUSH
37535: LD_INT 1
37537: PLUS
37538: PPUSH
37539: LD_VAR 0 7
37543: PUSH
37544: LD_VAR 0 9
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PPUSH
37553: CALL_OW 2
37557: ST_TO_ADDR
37558: GO 37640
// for j = 1 to result do
37560: LD_ADDR_VAR 0 8
37564: PUSH
37565: DOUBLE
37566: LD_INT 1
37568: DEC
37569: ST_TO_ADDR
37570: LD_VAR 0 6
37574: PUSH
37575: FOR_TO
37576: IFFALSE 37638
// begin if tmp < result [ j ] [ 2 ] then
37578: LD_VAR 0 9
37582: PUSH
37583: LD_VAR 0 6
37587: PUSH
37588: LD_VAR 0 8
37592: ARRAY
37593: PUSH
37594: LD_INT 2
37596: ARRAY
37597: LESS
37598: IFFALSE 37636
// begin result := Insert ( result , j , [ i , tmp ] ) ;
37600: LD_ADDR_VAR 0 6
37604: PUSH
37605: LD_VAR 0 6
37609: PPUSH
37610: LD_VAR 0 8
37614: PPUSH
37615: LD_VAR 0 7
37619: PUSH
37620: LD_VAR 0 9
37624: PUSH
37625: EMPTY
37626: LIST
37627: LIST
37628: PPUSH
37629: CALL_OW 2
37633: ST_TO_ADDR
// break ;
37634: GO 37638
// end ; end ;
37636: GO 37575
37638: POP
37639: POP
// end ; end ;
37640: GO 37439
37642: POP
37643: POP
// if result and not asc then
37644: LD_VAR 0 6
37648: PUSH
37649: LD_VAR 0 4
37653: NOT
37654: AND
37655: IFFALSE 37730
// begin tmp := result ;
37657: LD_ADDR_VAR 0 9
37661: PUSH
37662: LD_VAR 0 6
37666: ST_TO_ADDR
// for i = tmp downto 1 do
37667: LD_ADDR_VAR 0 7
37671: PUSH
37672: DOUBLE
37673: LD_VAR 0 9
37677: INC
37678: ST_TO_ADDR
37679: LD_INT 1
37681: PUSH
37682: FOR_DOWNTO
37683: IFFALSE 37728
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
37685: LD_ADDR_VAR 0 6
37689: PUSH
37690: LD_VAR 0 6
37694: PPUSH
37695: LD_VAR 0 9
37699: PUSH
37700: LD_VAR 0 7
37704: MINUS
37705: PUSH
37706: LD_INT 1
37708: PLUS
37709: PPUSH
37710: LD_VAR 0 9
37714: PUSH
37715: LD_VAR 0 7
37719: ARRAY
37720: PPUSH
37721: CALL_OW 1
37725: ST_TO_ADDR
37726: GO 37682
37728: POP
37729: POP
// end ; tmp := [ ] ;
37730: LD_ADDR_VAR 0 9
37734: PUSH
37735: EMPTY
37736: ST_TO_ADDR
// if mode then
37737: LD_VAR 0 5
37741: IFFALSE 37810
// begin for i = 1 to result do
37743: LD_ADDR_VAR 0 7
37747: PUSH
37748: DOUBLE
37749: LD_INT 1
37751: DEC
37752: ST_TO_ADDR
37753: LD_VAR 0 6
37757: PUSH
37758: FOR_TO
37759: IFFALSE 37798
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
37761: LD_ADDR_VAR 0 9
37765: PUSH
37766: LD_VAR 0 9
37770: PPUSH
37771: LD_VAR 0 7
37775: PPUSH
37776: LD_VAR 0 6
37780: PUSH
37781: LD_VAR 0 7
37785: ARRAY
37786: PUSH
37787: LD_INT 1
37789: ARRAY
37790: PPUSH
37791: CALL_OW 1
37795: ST_TO_ADDR
37796: GO 37758
37798: POP
37799: POP
// result := tmp ;
37800: LD_ADDR_VAR 0 6
37804: PUSH
37805: LD_VAR 0 9
37809: ST_TO_ADDR
// end ; end ;
37810: LD_VAR 0 6
37814: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
37815: LD_INT 0
37817: PPUSH
37818: PPUSH
37819: PPUSH
37820: PPUSH
37821: PPUSH
37822: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
37823: LD_ADDR_VAR 0 5
37827: PUSH
37828: LD_INT 0
37830: PUSH
37831: LD_INT 0
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: EMPTY
37838: PUSH
37839: EMPTY
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: ST_TO_ADDR
// if not x or not y then
37845: LD_VAR 0 2
37849: NOT
37850: PUSH
37851: LD_VAR 0 3
37855: NOT
37856: OR
37857: IFFALSE 37861
// exit ;
37859: GO 39507
// if not range then
37861: LD_VAR 0 4
37865: NOT
37866: IFFALSE 37876
// range := 10 ;
37868: LD_ADDR_VAR 0 4
37872: PUSH
37873: LD_INT 10
37875: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37876: LD_ADDR_VAR 0 8
37880: PUSH
37881: LD_INT 81
37883: PUSH
37884: LD_VAR 0 1
37888: PUSH
37889: EMPTY
37890: LIST
37891: LIST
37892: PUSH
37893: LD_INT 92
37895: PUSH
37896: LD_VAR 0 2
37900: PUSH
37901: LD_VAR 0 3
37905: PUSH
37906: LD_VAR 0 4
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 3
37919: PUSH
37920: LD_INT 21
37922: PUSH
37923: LD_INT 3
37925: PUSH
37926: EMPTY
37927: LIST
37928: LIST
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: LIST
37938: PPUSH
37939: CALL_OW 69
37943: ST_TO_ADDR
// if not tmp then
37944: LD_VAR 0 8
37948: NOT
37949: IFFALSE 37953
// exit ;
37951: GO 39507
// for i in tmp do
37953: LD_ADDR_VAR 0 6
37957: PUSH
37958: LD_VAR 0 8
37962: PUSH
37963: FOR_IN
37964: IFFALSE 39482
// begin points := [ 0 , 0 , 0 ] ;
37966: LD_ADDR_VAR 0 9
37970: PUSH
37971: LD_INT 0
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: LIST
37984: ST_TO_ADDR
// bpoints := 1 ;
37985: LD_ADDR_VAR 0 10
37989: PUSH
37990: LD_INT 1
37992: ST_TO_ADDR
// case GetType ( i ) of unit_human :
37993: LD_VAR 0 6
37997: PPUSH
37998: CALL_OW 247
38002: PUSH
38003: LD_INT 1
38005: DOUBLE
38006: EQUAL
38007: IFTRUE 38011
38009: GO 38589
38011: POP
// begin if GetClass ( i ) = 1 then
38012: LD_VAR 0 6
38016: PPUSH
38017: CALL_OW 257
38021: PUSH
38022: LD_INT 1
38024: EQUAL
38025: IFFALSE 38046
// points := [ 10 , 5 , 3 ] ;
38027: LD_ADDR_VAR 0 9
38031: PUSH
38032: LD_INT 10
38034: PUSH
38035: LD_INT 5
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: LIST
38045: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
38046: LD_VAR 0 6
38050: PPUSH
38051: CALL_OW 257
38055: PUSH
38056: LD_INT 2
38058: PUSH
38059: LD_INT 3
38061: PUSH
38062: LD_INT 4
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: LIST
38069: IN
38070: IFFALSE 38091
// points := [ 3 , 2 , 1 ] ;
38072: LD_ADDR_VAR 0 9
38076: PUSH
38077: LD_INT 3
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: LIST
38090: ST_TO_ADDR
// if GetClass ( i ) = 5 then
38091: LD_VAR 0 6
38095: PPUSH
38096: CALL_OW 257
38100: PUSH
38101: LD_INT 5
38103: EQUAL
38104: IFFALSE 38125
// points := [ 130 , 5 , 2 ] ;
38106: LD_ADDR_VAR 0 9
38110: PUSH
38111: LD_INT 130
38113: PUSH
38114: LD_INT 5
38116: PUSH
38117: LD_INT 2
38119: PUSH
38120: EMPTY
38121: LIST
38122: LIST
38123: LIST
38124: ST_TO_ADDR
// if GetClass ( i ) = 8 then
38125: LD_VAR 0 6
38129: PPUSH
38130: CALL_OW 257
38134: PUSH
38135: LD_INT 8
38137: EQUAL
38138: IFFALSE 38159
// points := [ 35 , 35 , 30 ] ;
38140: LD_ADDR_VAR 0 9
38144: PUSH
38145: LD_INT 35
38147: PUSH
38148: LD_INT 35
38150: PUSH
38151: LD_INT 30
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: LIST
38158: ST_TO_ADDR
// if GetClass ( i ) = 9 then
38159: LD_VAR 0 6
38163: PPUSH
38164: CALL_OW 257
38168: PUSH
38169: LD_INT 9
38171: EQUAL
38172: IFFALSE 38193
// points := [ 20 , 55 , 40 ] ;
38174: LD_ADDR_VAR 0 9
38178: PUSH
38179: LD_INT 20
38181: PUSH
38182: LD_INT 55
38184: PUSH
38185: LD_INT 40
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: LIST
38192: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
38193: LD_VAR 0 6
38197: PPUSH
38198: CALL_OW 257
38202: PUSH
38203: LD_INT 12
38205: PUSH
38206: LD_INT 16
38208: PUSH
38209: EMPTY
38210: LIST
38211: LIST
38212: IN
38213: IFFALSE 38234
// points := [ 5 , 3 , 2 ] ;
38215: LD_ADDR_VAR 0 9
38219: PUSH
38220: LD_INT 5
38222: PUSH
38223: LD_INT 3
38225: PUSH
38226: LD_INT 2
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: ST_TO_ADDR
// if GetClass ( i ) = 17 then
38234: LD_VAR 0 6
38238: PPUSH
38239: CALL_OW 257
38243: PUSH
38244: LD_INT 17
38246: EQUAL
38247: IFFALSE 38268
// points := [ 100 , 50 , 75 ] ;
38249: LD_ADDR_VAR 0 9
38253: PUSH
38254: LD_INT 100
38256: PUSH
38257: LD_INT 50
38259: PUSH
38260: LD_INT 75
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: LIST
38267: ST_TO_ADDR
// if GetClass ( i ) = 15 then
38268: LD_VAR 0 6
38272: PPUSH
38273: CALL_OW 257
38277: PUSH
38278: LD_INT 15
38280: EQUAL
38281: IFFALSE 38302
// points := [ 10 , 5 , 3 ] ;
38283: LD_ADDR_VAR 0 9
38287: PUSH
38288: LD_INT 10
38290: PUSH
38291: LD_INT 5
38293: PUSH
38294: LD_INT 3
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: LIST
38301: ST_TO_ADDR
// if GetClass ( i ) = 14 then
38302: LD_VAR 0 6
38306: PPUSH
38307: CALL_OW 257
38311: PUSH
38312: LD_INT 14
38314: EQUAL
38315: IFFALSE 38336
// points := [ 10 , 0 , 0 ] ;
38317: LD_ADDR_VAR 0 9
38321: PUSH
38322: LD_INT 10
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 0
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: LIST
38335: ST_TO_ADDR
// if GetClass ( i ) = 11 then
38336: LD_VAR 0 6
38340: PPUSH
38341: CALL_OW 257
38345: PUSH
38346: LD_INT 11
38348: EQUAL
38349: IFFALSE 38370
// points := [ 30 , 10 , 5 ] ;
38351: LD_ADDR_VAR 0 9
38355: PUSH
38356: LD_INT 30
38358: PUSH
38359: LD_INT 10
38361: PUSH
38362: LD_INT 5
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
38370: LD_VAR 0 1
38374: PPUSH
38375: LD_INT 5
38377: PPUSH
38378: CALL_OW 321
38382: PUSH
38383: LD_INT 2
38385: EQUAL
38386: IFFALSE 38403
// bpoints := bpoints * 1.8 ;
38388: LD_ADDR_VAR 0 10
38392: PUSH
38393: LD_VAR 0 10
38397: PUSH
38398: LD_REAL  1.80000000000000E+0000
38401: MUL
38402: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
38403: LD_VAR 0 6
38407: PPUSH
38408: CALL_OW 257
38412: PUSH
38413: LD_INT 1
38415: PUSH
38416: LD_INT 2
38418: PUSH
38419: LD_INT 3
38421: PUSH
38422: LD_INT 4
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: IN
38431: PUSH
38432: LD_VAR 0 1
38436: PPUSH
38437: LD_INT 51
38439: PPUSH
38440: CALL_OW 321
38444: PUSH
38445: LD_INT 2
38447: EQUAL
38448: AND
38449: IFFALSE 38466
// bpoints := bpoints * 1.2 ;
38451: LD_ADDR_VAR 0 10
38455: PUSH
38456: LD_VAR 0 10
38460: PUSH
38461: LD_REAL  1.20000000000000E+0000
38464: MUL
38465: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
38466: LD_VAR 0 6
38470: PPUSH
38471: CALL_OW 257
38475: PUSH
38476: LD_INT 5
38478: PUSH
38479: LD_INT 7
38481: PUSH
38482: LD_INT 9
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: LIST
38489: IN
38490: PUSH
38491: LD_VAR 0 1
38495: PPUSH
38496: LD_INT 52
38498: PPUSH
38499: CALL_OW 321
38503: PUSH
38504: LD_INT 2
38506: EQUAL
38507: AND
38508: IFFALSE 38525
// bpoints := bpoints * 1.5 ;
38510: LD_ADDR_VAR 0 10
38514: PUSH
38515: LD_VAR 0 10
38519: PUSH
38520: LD_REAL  1.50000000000000E+0000
38523: MUL
38524: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
38525: LD_VAR 0 1
38529: PPUSH
38530: LD_INT 66
38532: PPUSH
38533: CALL_OW 321
38537: PUSH
38538: LD_INT 2
38540: EQUAL
38541: IFFALSE 38558
// bpoints := bpoints * 1.1 ;
38543: LD_ADDR_VAR 0 10
38547: PUSH
38548: LD_VAR 0 10
38552: PUSH
38553: LD_REAL  1.10000000000000E+0000
38556: MUL
38557: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
38558: LD_ADDR_VAR 0 10
38562: PUSH
38563: LD_VAR 0 10
38567: PUSH
38568: LD_VAR 0 6
38572: PPUSH
38573: LD_INT 1
38575: PPUSH
38576: CALL_OW 259
38580: PUSH
38581: LD_REAL  1.15000000000000E+0000
38584: MUL
38585: MUL
38586: ST_TO_ADDR
// end ; unit_vehicle :
38587: GO 39411
38589: LD_INT 2
38591: DOUBLE
38592: EQUAL
38593: IFTRUE 38597
38595: GO 39399
38597: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
38598: LD_VAR 0 6
38602: PPUSH
38603: CALL_OW 264
38607: PUSH
38608: LD_INT 2
38610: PUSH
38611: LD_INT 42
38613: PUSH
38614: LD_INT 24
38616: PUSH
38617: EMPTY
38618: LIST
38619: LIST
38620: LIST
38621: IN
38622: IFFALSE 38643
// points := [ 25 , 5 , 3 ] ;
38624: LD_ADDR_VAR 0 9
38628: PUSH
38629: LD_INT 25
38631: PUSH
38632: LD_INT 5
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: LIST
38642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
38643: LD_VAR 0 6
38647: PPUSH
38648: CALL_OW 264
38652: PUSH
38653: LD_INT 4
38655: PUSH
38656: LD_INT 43
38658: PUSH
38659: LD_INT 25
38661: PUSH
38662: EMPTY
38663: LIST
38664: LIST
38665: LIST
38666: IN
38667: IFFALSE 38688
// points := [ 40 , 15 , 5 ] ;
38669: LD_ADDR_VAR 0 9
38673: PUSH
38674: LD_INT 40
38676: PUSH
38677: LD_INT 15
38679: PUSH
38680: LD_INT 5
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
38688: LD_VAR 0 6
38692: PPUSH
38693: CALL_OW 264
38697: PUSH
38698: LD_INT 3
38700: PUSH
38701: LD_INT 23
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: IN
38708: IFFALSE 38729
// points := [ 7 , 25 , 8 ] ;
38710: LD_ADDR_VAR 0 9
38714: PUSH
38715: LD_INT 7
38717: PUSH
38718: LD_INT 25
38720: PUSH
38721: LD_INT 8
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: LIST
38728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
38729: LD_VAR 0 6
38733: PPUSH
38734: CALL_OW 264
38738: PUSH
38739: LD_INT 5
38741: PUSH
38742: LD_INT 27
38744: PUSH
38745: LD_INT 44
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: LIST
38752: IN
38753: IFFALSE 38774
// points := [ 14 , 50 , 16 ] ;
38755: LD_ADDR_VAR 0 9
38759: PUSH
38760: LD_INT 14
38762: PUSH
38763: LD_INT 50
38765: PUSH
38766: LD_INT 16
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: LIST
38773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
38774: LD_VAR 0 6
38778: PPUSH
38779: CALL_OW 264
38783: PUSH
38784: LD_INT 6
38786: PUSH
38787: LD_INT 46
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: IN
38794: IFFALSE 38815
// points := [ 32 , 120 , 70 ] ;
38796: LD_ADDR_VAR 0 9
38800: PUSH
38801: LD_INT 32
38803: PUSH
38804: LD_INT 120
38806: PUSH
38807: LD_INT 70
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: LIST
38814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
38815: LD_VAR 0 6
38819: PPUSH
38820: CALL_OW 264
38824: PUSH
38825: LD_INT 7
38827: PUSH
38828: LD_INT 28
38830: PUSH
38831: LD_INT 45
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: LIST
38838: IN
38839: IFFALSE 38860
// points := [ 35 , 20 , 45 ] ;
38841: LD_ADDR_VAR 0 9
38845: PUSH
38846: LD_INT 35
38848: PUSH
38849: LD_INT 20
38851: PUSH
38852: LD_INT 45
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
38860: LD_VAR 0 6
38864: PPUSH
38865: CALL_OW 264
38869: PUSH
38870: LD_INT 47
38872: PUSH
38873: EMPTY
38874: LIST
38875: IN
38876: IFFALSE 38897
// points := [ 67 , 45 , 75 ] ;
38878: LD_ADDR_VAR 0 9
38882: PUSH
38883: LD_INT 67
38885: PUSH
38886: LD_INT 45
38888: PUSH
38889: LD_INT 75
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: LIST
38896: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
38897: LD_VAR 0 6
38901: PPUSH
38902: CALL_OW 264
38906: PUSH
38907: LD_INT 26
38909: PUSH
38910: EMPTY
38911: LIST
38912: IN
38913: IFFALSE 38934
// points := [ 120 , 30 , 80 ] ;
38915: LD_ADDR_VAR 0 9
38919: PUSH
38920: LD_INT 120
38922: PUSH
38923: LD_INT 30
38925: PUSH
38926: LD_INT 80
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
38934: LD_VAR 0 6
38938: PPUSH
38939: CALL_OW 264
38943: PUSH
38944: LD_INT 22
38946: PUSH
38947: EMPTY
38948: LIST
38949: IN
38950: IFFALSE 38971
// points := [ 40 , 1 , 1 ] ;
38952: LD_ADDR_VAR 0 9
38956: PUSH
38957: LD_INT 40
38959: PUSH
38960: LD_INT 1
38962: PUSH
38963: LD_INT 1
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
38971: LD_VAR 0 6
38975: PPUSH
38976: CALL_OW 264
38980: PUSH
38981: LD_INT 29
38983: PUSH
38984: EMPTY
38985: LIST
38986: IN
38987: IFFALSE 39008
// points := [ 70 , 200 , 400 ] ;
38989: LD_ADDR_VAR 0 9
38993: PUSH
38994: LD_INT 70
38996: PUSH
38997: LD_INT 200
38999: PUSH
39000: LD_INT 400
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: LIST
39007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
39008: LD_VAR 0 6
39012: PPUSH
39013: CALL_OW 264
39017: PUSH
39018: LD_INT 14
39020: PUSH
39021: LD_INT 53
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: IN
39028: IFFALSE 39049
// points := [ 40 , 10 , 20 ] ;
39030: LD_ADDR_VAR 0 9
39034: PUSH
39035: LD_INT 40
39037: PUSH
39038: LD_INT 10
39040: PUSH
39041: LD_INT 20
39043: PUSH
39044: EMPTY
39045: LIST
39046: LIST
39047: LIST
39048: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
39049: LD_VAR 0 6
39053: PPUSH
39054: CALL_OW 264
39058: PUSH
39059: LD_INT 9
39061: PUSH
39062: EMPTY
39063: LIST
39064: IN
39065: IFFALSE 39086
// points := [ 5 , 70 , 20 ] ;
39067: LD_ADDR_VAR 0 9
39071: PUSH
39072: LD_INT 5
39074: PUSH
39075: LD_INT 70
39077: PUSH
39078: LD_INT 20
39080: PUSH
39081: EMPTY
39082: LIST
39083: LIST
39084: LIST
39085: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
39086: LD_VAR 0 6
39090: PPUSH
39091: CALL_OW 264
39095: PUSH
39096: LD_INT 10
39098: PUSH
39099: EMPTY
39100: LIST
39101: IN
39102: IFFALSE 39123
// points := [ 35 , 110 , 70 ] ;
39104: LD_ADDR_VAR 0 9
39108: PUSH
39109: LD_INT 35
39111: PUSH
39112: LD_INT 110
39114: PUSH
39115: LD_INT 70
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: LIST
39122: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
39123: LD_VAR 0 6
39127: PPUSH
39128: CALL_OW 265
39132: PUSH
39133: LD_INT 25
39135: EQUAL
39136: IFFALSE 39157
// points := [ 80 , 65 , 100 ] ;
39138: LD_ADDR_VAR 0 9
39142: PUSH
39143: LD_INT 80
39145: PUSH
39146: LD_INT 65
39148: PUSH
39149: LD_INT 100
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: LIST
39156: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
39157: LD_VAR 0 6
39161: PPUSH
39162: CALL_OW 263
39166: PUSH
39167: LD_INT 1
39169: EQUAL
39170: IFFALSE 39205
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
39172: LD_ADDR_VAR 0 10
39176: PUSH
39177: LD_VAR 0 10
39181: PUSH
39182: LD_VAR 0 6
39186: PPUSH
39187: CALL_OW 311
39191: PPUSH
39192: LD_INT 3
39194: PPUSH
39195: CALL_OW 259
39199: PUSH
39200: LD_INT 4
39202: MUL
39203: MUL
39204: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
39205: LD_VAR 0 6
39209: PPUSH
39210: CALL_OW 263
39214: PUSH
39215: LD_INT 2
39217: EQUAL
39218: IFFALSE 39269
// begin j := IsControledBy ( i ) ;
39220: LD_ADDR_VAR 0 7
39224: PUSH
39225: LD_VAR 0 6
39229: PPUSH
39230: CALL_OW 312
39234: ST_TO_ADDR
// if j then
39235: LD_VAR 0 7
39239: IFFALSE 39269
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
39241: LD_ADDR_VAR 0 10
39245: PUSH
39246: LD_VAR 0 10
39250: PUSH
39251: LD_VAR 0 7
39255: PPUSH
39256: LD_INT 3
39258: PPUSH
39259: CALL_OW 259
39263: PUSH
39264: LD_INT 3
39266: MUL
39267: MUL
39268: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
39269: LD_VAR 0 6
39273: PPUSH
39274: CALL_OW 264
39278: PUSH
39279: LD_INT 5
39281: PUSH
39282: LD_INT 6
39284: PUSH
39285: LD_INT 46
39287: PUSH
39288: LD_INT 44
39290: PUSH
39291: LD_INT 47
39293: PUSH
39294: LD_INT 45
39296: PUSH
39297: LD_INT 28
39299: PUSH
39300: LD_INT 7
39302: PUSH
39303: LD_INT 27
39305: PUSH
39306: LD_INT 29
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: LIST
39313: LIST
39314: LIST
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: IN
39321: PUSH
39322: LD_VAR 0 1
39326: PPUSH
39327: LD_INT 52
39329: PPUSH
39330: CALL_OW 321
39334: PUSH
39335: LD_INT 2
39337: EQUAL
39338: AND
39339: IFFALSE 39356
// bpoints := bpoints * 1.2 ;
39341: LD_ADDR_VAR 0 10
39345: PUSH
39346: LD_VAR 0 10
39350: PUSH
39351: LD_REAL  1.20000000000000E+0000
39354: MUL
39355: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
39356: LD_VAR 0 6
39360: PPUSH
39361: CALL_OW 264
39365: PUSH
39366: LD_INT 6
39368: PUSH
39369: LD_INT 46
39371: PUSH
39372: LD_INT 47
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: IN
39380: IFFALSE 39397
// bpoints := bpoints * 1.2 ;
39382: LD_ADDR_VAR 0 10
39386: PUSH
39387: LD_VAR 0 10
39391: PUSH
39392: LD_REAL  1.20000000000000E+0000
39395: MUL
39396: ST_TO_ADDR
// end ; unit_building :
39397: GO 39411
39399: LD_INT 3
39401: DOUBLE
39402: EQUAL
39403: IFTRUE 39407
39405: GO 39410
39407: POP
// ; end ;
39408: GO 39411
39410: POP
// for j = 1 to 3 do
39411: LD_ADDR_VAR 0 7
39415: PUSH
39416: DOUBLE
39417: LD_INT 1
39419: DEC
39420: ST_TO_ADDR
39421: LD_INT 3
39423: PUSH
39424: FOR_TO
39425: IFFALSE 39478
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
39427: LD_ADDR_VAR 0 5
39431: PUSH
39432: LD_VAR 0 5
39436: PPUSH
39437: LD_VAR 0 7
39441: PPUSH
39442: LD_VAR 0 5
39446: PUSH
39447: LD_VAR 0 7
39451: ARRAY
39452: PUSH
39453: LD_VAR 0 9
39457: PUSH
39458: LD_VAR 0 7
39462: ARRAY
39463: PUSH
39464: LD_VAR 0 10
39468: MUL
39469: PLUS
39470: PPUSH
39471: CALL_OW 1
39475: ST_TO_ADDR
39476: GO 39424
39478: POP
39479: POP
// end ;
39480: GO 37963
39482: POP
39483: POP
// result := Replace ( result , 4 , tmp ) ;
39484: LD_ADDR_VAR 0 5
39488: PUSH
39489: LD_VAR 0 5
39493: PPUSH
39494: LD_INT 4
39496: PPUSH
39497: LD_VAR 0 8
39501: PPUSH
39502: CALL_OW 1
39506: ST_TO_ADDR
// end ;
39507: LD_VAR 0 5
39511: RET
// export function DangerAtRange ( unit , range ) ; begin
39512: LD_INT 0
39514: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
39515: LD_ADDR_VAR 0 3
39519: PUSH
39520: LD_VAR 0 1
39524: PPUSH
39525: CALL_OW 255
39529: PPUSH
39530: LD_VAR 0 1
39534: PPUSH
39535: CALL_OW 250
39539: PPUSH
39540: LD_VAR 0 1
39544: PPUSH
39545: CALL_OW 251
39549: PPUSH
39550: LD_VAR 0 2
39554: PPUSH
39555: CALL 37815 0 4
39559: ST_TO_ADDR
// end ;
39560: LD_VAR 0 3
39564: RET
// export function DangerInArea ( side , area ) ; begin
39565: LD_INT 0
39567: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
39568: LD_ADDR_VAR 0 3
39572: PUSH
39573: LD_VAR 0 2
39577: PPUSH
39578: LD_INT 81
39580: PUSH
39581: LD_VAR 0 1
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PPUSH
39590: CALL_OW 70
39594: ST_TO_ADDR
// end ;
39595: LD_VAR 0 3
39599: RET
// export function IsExtension ( b ) ; begin
39600: LD_INT 0
39602: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
39603: LD_ADDR_VAR 0 2
39607: PUSH
39608: LD_VAR 0 1
39612: PUSH
39613: LD_INT 23
39615: PUSH
39616: LD_INT 20
39618: PUSH
39619: LD_INT 22
39621: PUSH
39622: LD_INT 17
39624: PUSH
39625: LD_INT 24
39627: PUSH
39628: LD_INT 21
39630: PUSH
39631: LD_INT 19
39633: PUSH
39634: LD_INT 16
39636: PUSH
39637: LD_INT 25
39639: PUSH
39640: LD_INT 18
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: LIST
39647: LIST
39648: LIST
39649: LIST
39650: LIST
39651: LIST
39652: LIST
39653: LIST
39654: IN
39655: ST_TO_ADDR
// end ;
39656: LD_VAR 0 2
39660: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
39661: LD_INT 0
39663: PPUSH
39664: PPUSH
39665: PPUSH
// result := [ ] ;
39666: LD_ADDR_VAR 0 4
39670: PUSH
39671: EMPTY
39672: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
39673: LD_ADDR_VAR 0 5
39677: PUSH
39678: LD_VAR 0 2
39682: PPUSH
39683: LD_INT 21
39685: PUSH
39686: LD_INT 3
39688: PUSH
39689: EMPTY
39690: LIST
39691: LIST
39692: PPUSH
39693: CALL_OW 70
39697: ST_TO_ADDR
// if not tmp then
39698: LD_VAR 0 5
39702: NOT
39703: IFFALSE 39707
// exit ;
39705: GO 39771
// if checkLink then
39707: LD_VAR 0 3
39711: IFFALSE 39761
// begin for i in tmp do
39713: LD_ADDR_VAR 0 6
39717: PUSH
39718: LD_VAR 0 5
39722: PUSH
39723: FOR_IN
39724: IFFALSE 39759
// if GetBase ( i ) <> base then
39726: LD_VAR 0 6
39730: PPUSH
39731: CALL_OW 274
39735: PUSH
39736: LD_VAR 0 1
39740: NONEQUAL
39741: IFFALSE 39757
// ComLinkToBase ( base , i ) ;
39743: LD_VAR 0 1
39747: PPUSH
39748: LD_VAR 0 6
39752: PPUSH
39753: CALL_OW 169
39757: GO 39723
39759: POP
39760: POP
// end ; result := tmp ;
39761: LD_ADDR_VAR 0 4
39765: PUSH
39766: LD_VAR 0 5
39770: ST_TO_ADDR
// end ;
39771: LD_VAR 0 4
39775: RET
// export function ComComplete ( units , b ) ; var i ; begin
39776: LD_INT 0
39778: PPUSH
39779: PPUSH
// if not units then
39780: LD_VAR 0 1
39784: NOT
39785: IFFALSE 39789
// exit ;
39787: GO 39879
// for i in units do
39789: LD_ADDR_VAR 0 4
39793: PUSH
39794: LD_VAR 0 1
39798: PUSH
39799: FOR_IN
39800: IFFALSE 39877
// if BuildingStatus ( b ) = bs_build then
39802: LD_VAR 0 2
39806: PPUSH
39807: CALL_OW 461
39811: PUSH
39812: LD_INT 1
39814: EQUAL
39815: IFFALSE 39875
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
39817: LD_VAR 0 4
39821: PPUSH
39822: LD_STRING h
39824: PUSH
39825: LD_VAR 0 2
39829: PPUSH
39830: CALL_OW 250
39834: PUSH
39835: LD_VAR 0 2
39839: PPUSH
39840: CALL_OW 251
39844: PUSH
39845: LD_VAR 0 2
39849: PUSH
39850: LD_INT 0
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: LIST
39863: LIST
39864: LIST
39865: LIST
39866: LIST
39867: PUSH
39868: EMPTY
39869: LIST
39870: PPUSH
39871: CALL_OW 446
39875: GO 39799
39877: POP
39878: POP
// end ;
39879: LD_VAR 0 3
39883: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
39884: LD_INT 0
39886: PPUSH
39887: PPUSH
39888: PPUSH
39889: PPUSH
39890: PPUSH
39891: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
39892: LD_VAR 0 1
39896: NOT
39897: PUSH
39898: LD_VAR 0 1
39902: PPUSH
39903: CALL_OW 263
39907: PUSH
39908: LD_INT 2
39910: EQUAL
39911: NOT
39912: OR
39913: IFFALSE 39917
// exit ;
39915: GO 40233
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
39917: LD_ADDR_VAR 0 6
39921: PUSH
39922: LD_INT 22
39924: PUSH
39925: LD_VAR 0 1
39929: PPUSH
39930: CALL_OW 255
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: LD_INT 30
39944: PUSH
39945: LD_INT 36
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 34
39954: PUSH
39955: LD_INT 31
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: LIST
39966: PUSH
39967: EMPTY
39968: LIST
39969: LIST
39970: PPUSH
39971: CALL_OW 69
39975: ST_TO_ADDR
// if not tmp then
39976: LD_VAR 0 6
39980: NOT
39981: IFFALSE 39985
// exit ;
39983: GO 40233
// result := [ ] ;
39985: LD_ADDR_VAR 0 2
39989: PUSH
39990: EMPTY
39991: ST_TO_ADDR
// for i in tmp do
39992: LD_ADDR_VAR 0 3
39996: PUSH
39997: LD_VAR 0 6
40001: PUSH
40002: FOR_IN
40003: IFFALSE 40074
// begin t := UnitsInside ( i ) ;
40005: LD_ADDR_VAR 0 4
40009: PUSH
40010: LD_VAR 0 3
40014: PPUSH
40015: CALL_OW 313
40019: ST_TO_ADDR
// if t then
40020: LD_VAR 0 4
40024: IFFALSE 40072
// for j in t do
40026: LD_ADDR_VAR 0 7
40030: PUSH
40031: LD_VAR 0 4
40035: PUSH
40036: FOR_IN
40037: IFFALSE 40070
// result := Insert ( result , result + 1 , j ) ;
40039: LD_ADDR_VAR 0 2
40043: PUSH
40044: LD_VAR 0 2
40048: PPUSH
40049: LD_VAR 0 2
40053: PUSH
40054: LD_INT 1
40056: PLUS
40057: PPUSH
40058: LD_VAR 0 7
40062: PPUSH
40063: CALL_OW 2
40067: ST_TO_ADDR
40068: GO 40036
40070: POP
40071: POP
// end ;
40072: GO 40002
40074: POP
40075: POP
// if not result then
40076: LD_VAR 0 2
40080: NOT
40081: IFFALSE 40085
// exit ;
40083: GO 40233
// mech := result [ 1 ] ;
40085: LD_ADDR_VAR 0 5
40089: PUSH
40090: LD_VAR 0 2
40094: PUSH
40095: LD_INT 1
40097: ARRAY
40098: ST_TO_ADDR
// if result > 1 then
40099: LD_VAR 0 2
40103: PUSH
40104: LD_INT 1
40106: GREATER
40107: IFFALSE 40219
// for i = 2 to result do
40109: LD_ADDR_VAR 0 3
40113: PUSH
40114: DOUBLE
40115: LD_INT 2
40117: DEC
40118: ST_TO_ADDR
40119: LD_VAR 0 2
40123: PUSH
40124: FOR_TO
40125: IFFALSE 40217
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
40127: LD_ADDR_VAR 0 4
40131: PUSH
40132: LD_VAR 0 2
40136: PUSH
40137: LD_VAR 0 3
40141: ARRAY
40142: PPUSH
40143: LD_INT 3
40145: PPUSH
40146: CALL_OW 259
40150: PUSH
40151: LD_VAR 0 2
40155: PUSH
40156: LD_VAR 0 3
40160: ARRAY
40161: PPUSH
40162: CALL_OW 432
40166: MINUS
40167: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
40168: LD_VAR 0 4
40172: PUSH
40173: LD_VAR 0 5
40177: PPUSH
40178: LD_INT 3
40180: PPUSH
40181: CALL_OW 259
40185: PUSH
40186: LD_VAR 0 5
40190: PPUSH
40191: CALL_OW 432
40195: MINUS
40196: GREATEREQUAL
40197: IFFALSE 40215
// mech := result [ i ] ;
40199: LD_ADDR_VAR 0 5
40203: PUSH
40204: LD_VAR 0 2
40208: PUSH
40209: LD_VAR 0 3
40213: ARRAY
40214: ST_TO_ADDR
// end ;
40215: GO 40124
40217: POP
40218: POP
// ComLinkTo ( vehicle , mech ) ;
40219: LD_VAR 0 1
40223: PPUSH
40224: LD_VAR 0 5
40228: PPUSH
40229: CALL_OW 135
// end ;
40233: LD_VAR 0 2
40237: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
40238: LD_INT 0
40240: PPUSH
40241: PPUSH
40242: PPUSH
40243: PPUSH
40244: PPUSH
40245: PPUSH
40246: PPUSH
40247: PPUSH
40248: PPUSH
40249: PPUSH
40250: PPUSH
40251: PPUSH
40252: PPUSH
// result := [ ] ;
40253: LD_ADDR_VAR 0 7
40257: PUSH
40258: EMPTY
40259: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
40260: LD_VAR 0 1
40264: PPUSH
40265: CALL_OW 266
40269: PUSH
40270: LD_INT 0
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: IN
40280: NOT
40281: IFFALSE 40285
// exit ;
40283: GO 41919
// if name then
40285: LD_VAR 0 3
40289: IFFALSE 40305
// SetBName ( base_dep , name ) ;
40291: LD_VAR 0 1
40295: PPUSH
40296: LD_VAR 0 3
40300: PPUSH
40301: CALL_OW 500
// base := GetBase ( base_dep ) ;
40305: LD_ADDR_VAR 0 15
40309: PUSH
40310: LD_VAR 0 1
40314: PPUSH
40315: CALL_OW 274
40319: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
40320: LD_ADDR_VAR 0 16
40324: PUSH
40325: LD_VAR 0 1
40329: PPUSH
40330: CALL_OW 255
40334: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
40335: LD_ADDR_VAR 0 17
40339: PUSH
40340: LD_VAR 0 1
40344: PPUSH
40345: CALL_OW 248
40349: ST_TO_ADDR
// if sources then
40350: LD_VAR 0 5
40354: IFFALSE 40401
// for i = 1 to 3 do
40356: LD_ADDR_VAR 0 8
40360: PUSH
40361: DOUBLE
40362: LD_INT 1
40364: DEC
40365: ST_TO_ADDR
40366: LD_INT 3
40368: PUSH
40369: FOR_TO
40370: IFFALSE 40399
// AddResourceType ( base , i , sources [ i ] ) ;
40372: LD_VAR 0 15
40376: PPUSH
40377: LD_VAR 0 8
40381: PPUSH
40382: LD_VAR 0 5
40386: PUSH
40387: LD_VAR 0 8
40391: ARRAY
40392: PPUSH
40393: CALL_OW 276
40397: GO 40369
40399: POP
40400: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
40401: LD_ADDR_VAR 0 18
40405: PUSH
40406: LD_VAR 0 15
40410: PPUSH
40411: LD_VAR 0 2
40415: PPUSH
40416: LD_INT 1
40418: PPUSH
40419: CALL 39661 0 3
40423: ST_TO_ADDR
// InitHc ;
40424: CALL_OW 19
// InitUc ;
40428: CALL_OW 18
// uc_side := side ;
40432: LD_ADDR_OWVAR 20
40436: PUSH
40437: LD_VAR 0 16
40441: ST_TO_ADDR
// uc_nation := nation ;
40442: LD_ADDR_OWVAR 21
40446: PUSH
40447: LD_VAR 0 17
40451: ST_TO_ADDR
// if buildings then
40452: LD_VAR 0 18
40456: IFFALSE 41778
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
40458: LD_ADDR_VAR 0 19
40462: PUSH
40463: LD_VAR 0 18
40467: PPUSH
40468: LD_INT 2
40470: PUSH
40471: LD_INT 30
40473: PUSH
40474: LD_INT 29
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 30
40483: PUSH
40484: LD_INT 30
40486: PUSH
40487: EMPTY
40488: LIST
40489: LIST
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: LIST
40495: PPUSH
40496: CALL_OW 72
40500: ST_TO_ADDR
// if tmp then
40501: LD_VAR 0 19
40505: IFFALSE 40553
// for i in tmp do
40507: LD_ADDR_VAR 0 8
40511: PUSH
40512: LD_VAR 0 19
40516: PUSH
40517: FOR_IN
40518: IFFALSE 40551
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
40520: LD_VAR 0 8
40524: PPUSH
40525: CALL_OW 250
40529: PPUSH
40530: LD_VAR 0 8
40534: PPUSH
40535: CALL_OW 251
40539: PPUSH
40540: LD_VAR 0 16
40544: PPUSH
40545: CALL_OW 441
40549: GO 40517
40551: POP
40552: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
40553: LD_VAR 0 18
40557: PPUSH
40558: LD_INT 2
40560: PUSH
40561: LD_INT 30
40563: PUSH
40564: LD_INT 32
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 30
40573: PUSH
40574: LD_INT 33
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: LIST
40585: PPUSH
40586: CALL_OW 72
40590: IFFALSE 40678
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
40592: LD_ADDR_VAR 0 8
40596: PUSH
40597: LD_VAR 0 18
40601: PPUSH
40602: LD_INT 2
40604: PUSH
40605: LD_INT 30
40607: PUSH
40608: LD_INT 32
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PUSH
40615: LD_INT 30
40617: PUSH
40618: LD_INT 33
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: LIST
40629: PPUSH
40630: CALL_OW 72
40634: PUSH
40635: FOR_IN
40636: IFFALSE 40676
// begin if not GetBWeapon ( i ) then
40638: LD_VAR 0 8
40642: PPUSH
40643: CALL_OW 269
40647: NOT
40648: IFFALSE 40674
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
40650: LD_VAR 0 8
40654: PPUSH
40655: LD_VAR 0 8
40659: PPUSH
40660: LD_VAR 0 2
40664: PPUSH
40665: CALL 41924 0 2
40669: PPUSH
40670: CALL_OW 431
// end ;
40674: GO 40635
40676: POP
40677: POP
// end ; for i = 1 to personel do
40678: LD_ADDR_VAR 0 8
40682: PUSH
40683: DOUBLE
40684: LD_INT 1
40686: DEC
40687: ST_TO_ADDR
40688: LD_VAR 0 6
40692: PUSH
40693: FOR_TO
40694: IFFALSE 41758
// begin if i > 4 then
40696: LD_VAR 0 8
40700: PUSH
40701: LD_INT 4
40703: GREATER
40704: IFFALSE 40708
// break ;
40706: GO 41758
// case i of 1 :
40708: LD_VAR 0 8
40712: PUSH
40713: LD_INT 1
40715: DOUBLE
40716: EQUAL
40717: IFTRUE 40721
40719: GO 40801
40721: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
40722: LD_ADDR_VAR 0 12
40726: PUSH
40727: LD_VAR 0 18
40731: PPUSH
40732: LD_INT 22
40734: PUSH
40735: LD_VAR 0 16
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 58
40746: PUSH
40747: EMPTY
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: LD_INT 30
40755: PUSH
40756: LD_INT 32
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 30
40765: PUSH
40766: LD_INT 4
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 30
40775: PUSH
40776: LD_INT 5
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: PPUSH
40794: CALL_OW 72
40798: ST_TO_ADDR
40799: GO 41023
40801: LD_INT 2
40803: DOUBLE
40804: EQUAL
40805: IFTRUE 40809
40807: GO 40871
40809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
40810: LD_ADDR_VAR 0 12
40814: PUSH
40815: LD_VAR 0 18
40819: PPUSH
40820: LD_INT 22
40822: PUSH
40823: LD_VAR 0 16
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: LD_INT 30
40837: PUSH
40838: LD_INT 0
40840: PUSH
40841: EMPTY
40842: LIST
40843: LIST
40844: PUSH
40845: LD_INT 30
40847: PUSH
40848: LD_INT 1
40850: PUSH
40851: EMPTY
40852: LIST
40853: LIST
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: LIST
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PPUSH
40864: CALL_OW 72
40868: ST_TO_ADDR
40869: GO 41023
40871: LD_INT 3
40873: DOUBLE
40874: EQUAL
40875: IFTRUE 40879
40877: GO 40941
40879: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
40880: LD_ADDR_VAR 0 12
40884: PUSH
40885: LD_VAR 0 18
40889: PPUSH
40890: LD_INT 22
40892: PUSH
40893: LD_VAR 0 16
40897: PUSH
40898: EMPTY
40899: LIST
40900: LIST
40901: PUSH
40902: LD_INT 2
40904: PUSH
40905: LD_INT 30
40907: PUSH
40908: LD_INT 2
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 30
40917: PUSH
40918: LD_INT 3
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: EMPTY
40926: LIST
40927: LIST
40928: LIST
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PPUSH
40934: CALL_OW 72
40938: ST_TO_ADDR
40939: GO 41023
40941: LD_INT 4
40943: DOUBLE
40944: EQUAL
40945: IFTRUE 40949
40947: GO 41022
40949: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
40950: LD_ADDR_VAR 0 12
40954: PUSH
40955: LD_VAR 0 18
40959: PPUSH
40960: LD_INT 22
40962: PUSH
40963: LD_VAR 0 16
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: LD_INT 30
40977: PUSH
40978: LD_INT 6
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 30
40987: PUSH
40988: LD_INT 7
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 30
40997: PUSH
40998: LD_INT 8
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PPUSH
41015: CALL_OW 72
41019: ST_TO_ADDR
41020: GO 41023
41022: POP
// if i = 1 then
41023: LD_VAR 0 8
41027: PUSH
41028: LD_INT 1
41030: EQUAL
41031: IFFALSE 41142
// begin tmp := [ ] ;
41033: LD_ADDR_VAR 0 19
41037: PUSH
41038: EMPTY
41039: ST_TO_ADDR
// for j in f do
41040: LD_ADDR_VAR 0 9
41044: PUSH
41045: LD_VAR 0 12
41049: PUSH
41050: FOR_IN
41051: IFFALSE 41124
// if GetBType ( j ) = b_bunker then
41053: LD_VAR 0 9
41057: PPUSH
41058: CALL_OW 266
41062: PUSH
41063: LD_INT 32
41065: EQUAL
41066: IFFALSE 41093
// tmp := Insert ( tmp , 1 , j ) else
41068: LD_ADDR_VAR 0 19
41072: PUSH
41073: LD_VAR 0 19
41077: PPUSH
41078: LD_INT 1
41080: PPUSH
41081: LD_VAR 0 9
41085: PPUSH
41086: CALL_OW 2
41090: ST_TO_ADDR
41091: GO 41122
// tmp := Insert ( tmp , tmp + 1 , j ) ;
41093: LD_ADDR_VAR 0 19
41097: PUSH
41098: LD_VAR 0 19
41102: PPUSH
41103: LD_VAR 0 19
41107: PUSH
41108: LD_INT 1
41110: PLUS
41111: PPUSH
41112: LD_VAR 0 9
41116: PPUSH
41117: CALL_OW 2
41121: ST_TO_ADDR
41122: GO 41050
41124: POP
41125: POP
// if tmp then
41126: LD_VAR 0 19
41130: IFFALSE 41142
// f := tmp ;
41132: LD_ADDR_VAR 0 12
41136: PUSH
41137: LD_VAR 0 19
41141: ST_TO_ADDR
// end ; x := personel [ i ] ;
41142: LD_ADDR_VAR 0 13
41146: PUSH
41147: LD_VAR 0 6
41151: PUSH
41152: LD_VAR 0 8
41156: ARRAY
41157: ST_TO_ADDR
// if x = - 1 then
41158: LD_VAR 0 13
41162: PUSH
41163: LD_INT 1
41165: NEG
41166: EQUAL
41167: IFFALSE 41376
// begin for j in f do
41169: LD_ADDR_VAR 0 9
41173: PUSH
41174: LD_VAR 0 12
41178: PUSH
41179: FOR_IN
41180: IFFALSE 41372
// repeat InitHc ;
41182: CALL_OW 19
// if GetBType ( j ) = b_barracks then
41186: LD_VAR 0 9
41190: PPUSH
41191: CALL_OW 266
41195: PUSH
41196: LD_INT 5
41198: EQUAL
41199: IFFALSE 41269
// begin if UnitsInside ( j ) < 3 then
41201: LD_VAR 0 9
41205: PPUSH
41206: CALL_OW 313
41210: PUSH
41211: LD_INT 3
41213: LESS
41214: IFFALSE 41250
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41216: LD_INT 0
41218: PPUSH
41219: LD_INT 5
41221: PUSH
41222: LD_INT 8
41224: PUSH
41225: LD_INT 9
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: LIST
41232: PUSH
41233: LD_VAR 0 17
41237: ARRAY
41238: PPUSH
41239: LD_VAR 0 4
41243: PPUSH
41244: CALL_OW 380
41248: GO 41267
// PrepareHuman ( false , i , skill ) ;
41250: LD_INT 0
41252: PPUSH
41253: LD_VAR 0 8
41257: PPUSH
41258: LD_VAR 0 4
41262: PPUSH
41263: CALL_OW 380
// end else
41267: GO 41286
// PrepareHuman ( false , i , skill ) ;
41269: LD_INT 0
41271: PPUSH
41272: LD_VAR 0 8
41276: PPUSH
41277: LD_VAR 0 4
41281: PPUSH
41282: CALL_OW 380
// un := CreateHuman ;
41286: LD_ADDR_VAR 0 14
41290: PUSH
41291: CALL_OW 44
41295: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41296: LD_ADDR_VAR 0 7
41300: PUSH
41301: LD_VAR 0 7
41305: PPUSH
41306: LD_INT 1
41308: PPUSH
41309: LD_VAR 0 14
41313: PPUSH
41314: CALL_OW 2
41318: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
41319: LD_VAR 0 14
41323: PPUSH
41324: LD_VAR 0 9
41328: PPUSH
41329: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
41333: LD_VAR 0 9
41337: PPUSH
41338: CALL_OW 313
41342: PUSH
41343: LD_INT 6
41345: EQUAL
41346: PUSH
41347: LD_VAR 0 9
41351: PPUSH
41352: CALL_OW 266
41356: PUSH
41357: LD_INT 32
41359: PUSH
41360: LD_INT 31
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: IN
41367: OR
41368: IFFALSE 41182
41370: GO 41179
41372: POP
41373: POP
// end else
41374: GO 41756
// for j = 1 to x do
41376: LD_ADDR_VAR 0 9
41380: PUSH
41381: DOUBLE
41382: LD_INT 1
41384: DEC
41385: ST_TO_ADDR
41386: LD_VAR 0 13
41390: PUSH
41391: FOR_TO
41392: IFFALSE 41754
// begin InitHc ;
41394: CALL_OW 19
// if not f then
41398: LD_VAR 0 12
41402: NOT
41403: IFFALSE 41492
// begin PrepareHuman ( false , i , skill ) ;
41405: LD_INT 0
41407: PPUSH
41408: LD_VAR 0 8
41412: PPUSH
41413: LD_VAR 0 4
41417: PPUSH
41418: CALL_OW 380
// un := CreateHuman ;
41422: LD_ADDR_VAR 0 14
41426: PUSH
41427: CALL_OW 44
41431: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41432: LD_ADDR_VAR 0 7
41436: PUSH
41437: LD_VAR 0 7
41441: PPUSH
41442: LD_INT 1
41444: PPUSH
41445: LD_VAR 0 14
41449: PPUSH
41450: CALL_OW 2
41454: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41455: LD_VAR 0 14
41459: PPUSH
41460: LD_VAR 0 1
41464: PPUSH
41465: CALL_OW 250
41469: PPUSH
41470: LD_VAR 0 1
41474: PPUSH
41475: CALL_OW 251
41479: PPUSH
41480: LD_INT 10
41482: PPUSH
41483: LD_INT 0
41485: PPUSH
41486: CALL_OW 50
// continue ;
41490: GO 41391
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
41492: LD_VAR 0 12
41496: PUSH
41497: LD_INT 1
41499: ARRAY
41500: PPUSH
41501: CALL_OW 313
41505: PUSH
41506: LD_VAR 0 12
41510: PUSH
41511: LD_INT 1
41513: ARRAY
41514: PPUSH
41515: CALL_OW 266
41519: PUSH
41520: LD_INT 32
41522: PUSH
41523: LD_INT 31
41525: PUSH
41526: EMPTY
41527: LIST
41528: LIST
41529: IN
41530: AND
41531: PUSH
41532: LD_VAR 0 12
41536: PUSH
41537: LD_INT 1
41539: ARRAY
41540: PPUSH
41541: CALL_OW 313
41545: PUSH
41546: LD_INT 6
41548: EQUAL
41549: OR
41550: IFFALSE 41570
// f := Delete ( f , 1 ) ;
41552: LD_ADDR_VAR 0 12
41556: PUSH
41557: LD_VAR 0 12
41561: PPUSH
41562: LD_INT 1
41564: PPUSH
41565: CALL_OW 3
41569: ST_TO_ADDR
// if not f then
41570: LD_VAR 0 12
41574: NOT
41575: IFFALSE 41593
// begin x := x + 2 ;
41577: LD_ADDR_VAR 0 13
41581: PUSH
41582: LD_VAR 0 13
41586: PUSH
41587: LD_INT 2
41589: PLUS
41590: ST_TO_ADDR
// continue ;
41591: GO 41391
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
41593: LD_VAR 0 12
41597: PUSH
41598: LD_INT 1
41600: ARRAY
41601: PPUSH
41602: CALL_OW 266
41606: PUSH
41607: LD_INT 5
41609: EQUAL
41610: IFFALSE 41684
// begin if UnitsInside ( f [ 1 ] ) < 3 then
41612: LD_VAR 0 12
41616: PUSH
41617: LD_INT 1
41619: ARRAY
41620: PPUSH
41621: CALL_OW 313
41625: PUSH
41626: LD_INT 3
41628: LESS
41629: IFFALSE 41665
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
41631: LD_INT 0
41633: PPUSH
41634: LD_INT 5
41636: PUSH
41637: LD_INT 8
41639: PUSH
41640: LD_INT 9
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: PUSH
41648: LD_VAR 0 17
41652: ARRAY
41653: PPUSH
41654: LD_VAR 0 4
41658: PPUSH
41659: CALL_OW 380
41663: GO 41682
// PrepareHuman ( false , i , skill ) ;
41665: LD_INT 0
41667: PPUSH
41668: LD_VAR 0 8
41672: PPUSH
41673: LD_VAR 0 4
41677: PPUSH
41678: CALL_OW 380
// end else
41682: GO 41701
// PrepareHuman ( false , i , skill ) ;
41684: LD_INT 0
41686: PPUSH
41687: LD_VAR 0 8
41691: PPUSH
41692: LD_VAR 0 4
41696: PPUSH
41697: CALL_OW 380
// un := CreateHuman ;
41701: LD_ADDR_VAR 0 14
41705: PUSH
41706: CALL_OW 44
41710: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
41711: LD_ADDR_VAR 0 7
41715: PUSH
41716: LD_VAR 0 7
41720: PPUSH
41721: LD_INT 1
41723: PPUSH
41724: LD_VAR 0 14
41728: PPUSH
41729: CALL_OW 2
41733: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
41734: LD_VAR 0 14
41738: PPUSH
41739: LD_VAR 0 12
41743: PUSH
41744: LD_INT 1
41746: ARRAY
41747: PPUSH
41748: CALL_OW 52
// end ;
41752: GO 41391
41754: POP
41755: POP
// end ;
41756: GO 40693
41758: POP
41759: POP
// result := result ^ buildings ;
41760: LD_ADDR_VAR 0 7
41764: PUSH
41765: LD_VAR 0 7
41769: PUSH
41770: LD_VAR 0 18
41774: ADD
41775: ST_TO_ADDR
// end else
41776: GO 41919
// begin for i = 1 to personel do
41778: LD_ADDR_VAR 0 8
41782: PUSH
41783: DOUBLE
41784: LD_INT 1
41786: DEC
41787: ST_TO_ADDR
41788: LD_VAR 0 6
41792: PUSH
41793: FOR_TO
41794: IFFALSE 41917
// begin if i > 4 then
41796: LD_VAR 0 8
41800: PUSH
41801: LD_INT 4
41803: GREATER
41804: IFFALSE 41808
// break ;
41806: GO 41917
// x := personel [ i ] ;
41808: LD_ADDR_VAR 0 13
41812: PUSH
41813: LD_VAR 0 6
41817: PUSH
41818: LD_VAR 0 8
41822: ARRAY
41823: ST_TO_ADDR
// if x = - 1 then
41824: LD_VAR 0 13
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: EQUAL
41833: IFFALSE 41837
// continue ;
41835: GO 41793
// PrepareHuman ( false , i , skill ) ;
41837: LD_INT 0
41839: PPUSH
41840: LD_VAR 0 8
41844: PPUSH
41845: LD_VAR 0 4
41849: PPUSH
41850: CALL_OW 380
// un := CreateHuman ;
41854: LD_ADDR_VAR 0 14
41858: PUSH
41859: CALL_OW 44
41863: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
41864: LD_VAR 0 14
41868: PPUSH
41869: LD_VAR 0 1
41873: PPUSH
41874: CALL_OW 250
41878: PPUSH
41879: LD_VAR 0 1
41883: PPUSH
41884: CALL_OW 251
41888: PPUSH
41889: LD_INT 10
41891: PPUSH
41892: LD_INT 0
41894: PPUSH
41895: CALL_OW 50
// result := result ^ un ;
41899: LD_ADDR_VAR 0 7
41903: PUSH
41904: LD_VAR 0 7
41908: PUSH
41909: LD_VAR 0 14
41913: ADD
41914: ST_TO_ADDR
// end ;
41915: GO 41793
41917: POP
41918: POP
// end ; end ;
41919: LD_VAR 0 7
41923: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
41924: LD_INT 0
41926: PPUSH
41927: PPUSH
41928: PPUSH
41929: PPUSH
41930: PPUSH
41931: PPUSH
41932: PPUSH
41933: PPUSH
41934: PPUSH
41935: PPUSH
41936: PPUSH
41937: PPUSH
41938: PPUSH
41939: PPUSH
41940: PPUSH
41941: PPUSH
// result := false ;
41942: LD_ADDR_VAR 0 3
41946: PUSH
41947: LD_INT 0
41949: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
41950: LD_VAR 0 1
41954: NOT
41955: PUSH
41956: LD_VAR 0 1
41960: PPUSH
41961: CALL_OW 266
41965: PUSH
41966: LD_INT 32
41968: PUSH
41969: LD_INT 33
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: IN
41976: NOT
41977: OR
41978: IFFALSE 41982
// exit ;
41980: GO 43121
// nat := GetNation ( tower ) ;
41982: LD_ADDR_VAR 0 12
41986: PUSH
41987: LD_VAR 0 1
41991: PPUSH
41992: CALL_OW 248
41996: ST_TO_ADDR
// side := GetSide ( tower ) ;
41997: LD_ADDR_VAR 0 16
42001: PUSH
42002: LD_VAR 0 1
42006: PPUSH
42007: CALL_OW 255
42011: ST_TO_ADDR
// x := GetX ( tower ) ;
42012: LD_ADDR_VAR 0 10
42016: PUSH
42017: LD_VAR 0 1
42021: PPUSH
42022: CALL_OW 250
42026: ST_TO_ADDR
// y := GetY ( tower ) ;
42027: LD_ADDR_VAR 0 11
42031: PUSH
42032: LD_VAR 0 1
42036: PPUSH
42037: CALL_OW 251
42041: ST_TO_ADDR
// if not x or not y then
42042: LD_VAR 0 10
42046: NOT
42047: PUSH
42048: LD_VAR 0 11
42052: NOT
42053: OR
42054: IFFALSE 42058
// exit ;
42056: GO 43121
// weapon := 0 ;
42058: LD_ADDR_VAR 0 18
42062: PUSH
42063: LD_INT 0
42065: ST_TO_ADDR
// fac_list := [ ] ;
42066: LD_ADDR_VAR 0 17
42070: PUSH
42071: EMPTY
42072: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
42073: LD_ADDR_VAR 0 6
42077: PUSH
42078: LD_VAR 0 1
42082: PPUSH
42083: CALL_OW 274
42087: PPUSH
42088: LD_VAR 0 2
42092: PPUSH
42093: LD_INT 0
42095: PPUSH
42096: CALL 39661 0 3
42100: PPUSH
42101: LD_INT 30
42103: PUSH
42104: LD_INT 3
42106: PUSH
42107: EMPTY
42108: LIST
42109: LIST
42110: PPUSH
42111: CALL_OW 72
42115: ST_TO_ADDR
// if not factories then
42116: LD_VAR 0 6
42120: NOT
42121: IFFALSE 42125
// exit ;
42123: GO 43121
// for i in factories do
42125: LD_ADDR_VAR 0 8
42129: PUSH
42130: LD_VAR 0 6
42134: PUSH
42135: FOR_IN
42136: IFFALSE 42161
// fac_list := fac_list union AvailableWeaponList ( i ) ;
42138: LD_ADDR_VAR 0 17
42142: PUSH
42143: LD_VAR 0 17
42147: PUSH
42148: LD_VAR 0 8
42152: PPUSH
42153: CALL_OW 478
42157: UNION
42158: ST_TO_ADDR
42159: GO 42135
42161: POP
42162: POP
// if not fac_list then
42163: LD_VAR 0 17
42167: NOT
42168: IFFALSE 42172
// exit ;
42170: GO 43121
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
42172: LD_ADDR_VAR 0 5
42176: PUSH
42177: LD_INT 4
42179: PUSH
42180: LD_INT 5
42182: PUSH
42183: LD_INT 9
42185: PUSH
42186: LD_INT 10
42188: PUSH
42189: LD_INT 6
42191: PUSH
42192: LD_INT 7
42194: PUSH
42195: LD_INT 11
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 27
42209: PUSH
42210: LD_INT 28
42212: PUSH
42213: LD_INT 26
42215: PUSH
42216: LD_INT 30
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: PUSH
42225: LD_INT 43
42227: PUSH
42228: LD_INT 44
42230: PUSH
42231: LD_INT 46
42233: PUSH
42234: LD_INT 45
42236: PUSH
42237: LD_INT 47
42239: PUSH
42240: LD_INT 49
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: LIST
42255: PUSH
42256: LD_VAR 0 12
42260: ARRAY
42261: ST_TO_ADDR
// for i in list do
42262: LD_ADDR_VAR 0 8
42266: PUSH
42267: LD_VAR 0 5
42271: PUSH
42272: FOR_IN
42273: IFFALSE 42306
// if not i in fac_list then
42275: LD_VAR 0 8
42279: PUSH
42280: LD_VAR 0 17
42284: IN
42285: NOT
42286: IFFALSE 42304
// list := list diff i ;
42288: LD_ADDR_VAR 0 5
42292: PUSH
42293: LD_VAR 0 5
42297: PUSH
42298: LD_VAR 0 8
42302: DIFF
42303: ST_TO_ADDR
42304: GO 42272
42306: POP
42307: POP
// if not list then
42308: LD_VAR 0 5
42312: NOT
42313: IFFALSE 42317
// exit ;
42315: GO 43121
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
42317: LD_VAR 0 12
42321: PUSH
42322: LD_INT 3
42324: EQUAL
42325: PUSH
42326: LD_INT 49
42328: PUSH
42329: LD_VAR 0 5
42333: IN
42334: AND
42335: PUSH
42336: LD_INT 31
42338: PPUSH
42339: LD_VAR 0 16
42343: PPUSH
42344: CALL_OW 321
42348: PUSH
42349: LD_INT 2
42351: EQUAL
42352: AND
42353: IFFALSE 42413
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
42355: LD_INT 22
42357: PUSH
42358: LD_VAR 0 16
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 35
42369: PUSH
42370: LD_INT 49
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 91
42379: PUSH
42380: LD_VAR 0 1
42384: PUSH
42385: LD_INT 10
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: LIST
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: LIST
42397: PPUSH
42398: CALL_OW 69
42402: NOT
42403: IFFALSE 42413
// weapon := ru_time_lapser ;
42405: LD_ADDR_VAR 0 18
42409: PUSH
42410: LD_INT 49
42412: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
42413: LD_VAR 0 12
42417: PUSH
42418: LD_INT 1
42420: PUSH
42421: LD_INT 2
42423: PUSH
42424: EMPTY
42425: LIST
42426: LIST
42427: IN
42428: PUSH
42429: LD_INT 11
42431: PUSH
42432: LD_VAR 0 5
42436: IN
42437: PUSH
42438: LD_INT 30
42440: PUSH
42441: LD_VAR 0 5
42445: IN
42446: OR
42447: AND
42448: PUSH
42449: LD_INT 6
42451: PPUSH
42452: LD_VAR 0 16
42456: PPUSH
42457: CALL_OW 321
42461: PUSH
42462: LD_INT 2
42464: EQUAL
42465: AND
42466: IFFALSE 42631
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
42468: LD_INT 22
42470: PUSH
42471: LD_VAR 0 16
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 2
42482: PUSH
42483: LD_INT 35
42485: PUSH
42486: LD_INT 11
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 35
42495: PUSH
42496: LD_INT 30
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: EMPTY
42504: LIST
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 91
42510: PUSH
42511: LD_VAR 0 1
42515: PUSH
42516: LD_INT 18
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: LIST
42523: PUSH
42524: EMPTY
42525: LIST
42526: LIST
42527: LIST
42528: PPUSH
42529: CALL_OW 69
42533: NOT
42534: PUSH
42535: LD_INT 22
42537: PUSH
42538: LD_VAR 0 16
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: PUSH
42550: LD_INT 30
42552: PUSH
42553: LD_INT 32
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 30
42562: PUSH
42563: LD_INT 33
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 91
42577: PUSH
42578: LD_VAR 0 1
42582: PUSH
42583: LD_INT 12
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: LIST
42590: PUSH
42591: EMPTY
42592: LIST
42593: LIST
42594: LIST
42595: PUSH
42596: EMPTY
42597: LIST
42598: PPUSH
42599: CALL_OW 69
42603: PUSH
42604: LD_INT 2
42606: GREATER
42607: AND
42608: IFFALSE 42631
// weapon := [ us_radar , ar_radar ] [ nat ] ;
42610: LD_ADDR_VAR 0 18
42614: PUSH
42615: LD_INT 11
42617: PUSH
42618: LD_INT 30
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_VAR 0 12
42629: ARRAY
42630: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
42631: LD_VAR 0 18
42635: NOT
42636: PUSH
42637: LD_INT 40
42639: PPUSH
42640: LD_VAR 0 16
42644: PPUSH
42645: CALL_OW 321
42649: PUSH
42650: LD_INT 2
42652: EQUAL
42653: AND
42654: PUSH
42655: LD_INT 7
42657: PUSH
42658: LD_VAR 0 5
42662: IN
42663: PUSH
42664: LD_INT 28
42666: PUSH
42667: LD_VAR 0 5
42671: IN
42672: OR
42673: PUSH
42674: LD_INT 45
42676: PUSH
42677: LD_VAR 0 5
42681: IN
42682: OR
42683: AND
42684: IFFALSE 42938
// begin hex := GetHexInfo ( x , y ) ;
42686: LD_ADDR_VAR 0 4
42690: PUSH
42691: LD_VAR 0 10
42695: PPUSH
42696: LD_VAR 0 11
42700: PPUSH
42701: CALL_OW 546
42705: ST_TO_ADDR
// if hex [ 1 ] then
42706: LD_VAR 0 4
42710: PUSH
42711: LD_INT 1
42713: ARRAY
42714: IFFALSE 42718
// exit ;
42716: GO 43121
// height := hex [ 2 ] ;
42718: LD_ADDR_VAR 0 15
42722: PUSH
42723: LD_VAR 0 4
42727: PUSH
42728: LD_INT 2
42730: ARRAY
42731: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
42732: LD_ADDR_VAR 0 14
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: LD_INT 3
42745: PUSH
42746: LD_INT 5
42748: PUSH
42749: EMPTY
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: ST_TO_ADDR
// for i in tmp do
42755: LD_ADDR_VAR 0 8
42759: PUSH
42760: LD_VAR 0 14
42764: PUSH
42765: FOR_IN
42766: IFFALSE 42936
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
42768: LD_ADDR_VAR 0 9
42772: PUSH
42773: LD_VAR 0 10
42777: PPUSH
42778: LD_VAR 0 8
42782: PPUSH
42783: LD_INT 5
42785: PPUSH
42786: CALL_OW 272
42790: PUSH
42791: LD_VAR 0 11
42795: PPUSH
42796: LD_VAR 0 8
42800: PPUSH
42801: LD_INT 5
42803: PPUSH
42804: CALL_OW 273
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
42813: LD_VAR 0 9
42817: PUSH
42818: LD_INT 1
42820: ARRAY
42821: PPUSH
42822: LD_VAR 0 9
42826: PUSH
42827: LD_INT 2
42829: ARRAY
42830: PPUSH
42831: CALL_OW 488
42835: IFFALSE 42934
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
42837: LD_ADDR_VAR 0 4
42841: PUSH
42842: LD_VAR 0 9
42846: PUSH
42847: LD_INT 1
42849: ARRAY
42850: PPUSH
42851: LD_VAR 0 9
42855: PUSH
42856: LD_INT 2
42858: ARRAY
42859: PPUSH
42860: CALL_OW 546
42864: ST_TO_ADDR
// if hex [ 1 ] then
42865: LD_VAR 0 4
42869: PUSH
42870: LD_INT 1
42872: ARRAY
42873: IFFALSE 42877
// continue ;
42875: GO 42765
// h := hex [ 2 ] ;
42877: LD_ADDR_VAR 0 13
42881: PUSH
42882: LD_VAR 0 4
42886: PUSH
42887: LD_INT 2
42889: ARRAY
42890: ST_TO_ADDR
// if h + 7 < height then
42891: LD_VAR 0 13
42895: PUSH
42896: LD_INT 7
42898: PLUS
42899: PUSH
42900: LD_VAR 0 15
42904: LESS
42905: IFFALSE 42934
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
42907: LD_ADDR_VAR 0 18
42911: PUSH
42912: LD_INT 7
42914: PUSH
42915: LD_INT 28
42917: PUSH
42918: LD_INT 45
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: LIST
42925: PUSH
42926: LD_VAR 0 12
42930: ARRAY
42931: ST_TO_ADDR
// break ;
42932: GO 42936
// end ; end ; end ;
42934: GO 42765
42936: POP
42937: POP
// end ; if not weapon then
42938: LD_VAR 0 18
42942: NOT
42943: IFFALSE 43003
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
42945: LD_ADDR_VAR 0 5
42949: PUSH
42950: LD_VAR 0 5
42954: PUSH
42955: LD_INT 11
42957: PUSH
42958: LD_INT 30
42960: PUSH
42961: LD_INT 49
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: LIST
42968: DIFF
42969: ST_TO_ADDR
// if not list then
42970: LD_VAR 0 5
42974: NOT
42975: IFFALSE 42979
// exit ;
42977: GO 43121
// weapon := list [ rand ( 1 , list ) ] ;
42979: LD_ADDR_VAR 0 18
42983: PUSH
42984: LD_VAR 0 5
42988: PUSH
42989: LD_INT 1
42991: PPUSH
42992: LD_VAR 0 5
42996: PPUSH
42997: CALL_OW 12
43001: ARRAY
43002: ST_TO_ADDR
// end ; if weapon then
43003: LD_VAR 0 18
43007: IFFALSE 43121
// begin tmp := CostOfWeapon ( weapon ) ;
43009: LD_ADDR_VAR 0 14
43013: PUSH
43014: LD_VAR 0 18
43018: PPUSH
43019: CALL_OW 451
43023: ST_TO_ADDR
// j := GetBase ( tower ) ;
43024: LD_ADDR_VAR 0 9
43028: PUSH
43029: LD_VAR 0 1
43033: PPUSH
43034: CALL_OW 274
43038: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
43039: LD_VAR 0 9
43043: PPUSH
43044: LD_INT 1
43046: PPUSH
43047: CALL_OW 275
43051: PUSH
43052: LD_VAR 0 14
43056: PUSH
43057: LD_INT 1
43059: ARRAY
43060: GREATEREQUAL
43061: PUSH
43062: LD_VAR 0 9
43066: PPUSH
43067: LD_INT 2
43069: PPUSH
43070: CALL_OW 275
43074: PUSH
43075: LD_VAR 0 14
43079: PUSH
43080: LD_INT 2
43082: ARRAY
43083: GREATEREQUAL
43084: AND
43085: PUSH
43086: LD_VAR 0 9
43090: PPUSH
43091: LD_INT 3
43093: PPUSH
43094: CALL_OW 275
43098: PUSH
43099: LD_VAR 0 14
43103: PUSH
43104: LD_INT 3
43106: ARRAY
43107: GREATEREQUAL
43108: AND
43109: IFFALSE 43121
// result := weapon ;
43111: LD_ADDR_VAR 0 3
43115: PUSH
43116: LD_VAR 0 18
43120: ST_TO_ADDR
// end ; end ;
43121: LD_VAR 0 3
43125: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
43126: LD_INT 0
43128: PPUSH
43129: PPUSH
// result := true ;
43130: LD_ADDR_VAR 0 3
43134: PUSH
43135: LD_INT 1
43137: ST_TO_ADDR
// if array1 = array2 then
43138: LD_VAR 0 1
43142: PUSH
43143: LD_VAR 0 2
43147: EQUAL
43148: IFFALSE 43208
// begin for i = 1 to array1 do
43150: LD_ADDR_VAR 0 4
43154: PUSH
43155: DOUBLE
43156: LD_INT 1
43158: DEC
43159: ST_TO_ADDR
43160: LD_VAR 0 1
43164: PUSH
43165: FOR_TO
43166: IFFALSE 43204
// if array1 [ i ] <> array2 [ i ] then
43168: LD_VAR 0 1
43172: PUSH
43173: LD_VAR 0 4
43177: ARRAY
43178: PUSH
43179: LD_VAR 0 2
43183: PUSH
43184: LD_VAR 0 4
43188: ARRAY
43189: NONEQUAL
43190: IFFALSE 43202
// begin result := false ;
43192: LD_ADDR_VAR 0 3
43196: PUSH
43197: LD_INT 0
43199: ST_TO_ADDR
// break ;
43200: GO 43204
// end ;
43202: GO 43165
43204: POP
43205: POP
// end else
43206: GO 43216
// result := false ;
43208: LD_ADDR_VAR 0 3
43212: PUSH
43213: LD_INT 0
43215: ST_TO_ADDR
// end ;
43216: LD_VAR 0 3
43220: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
43221: LD_INT 0
43223: PPUSH
43224: PPUSH
// if not array1 or not array2 then
43225: LD_VAR 0 1
43229: NOT
43230: PUSH
43231: LD_VAR 0 2
43235: NOT
43236: OR
43237: IFFALSE 43241
// exit ;
43239: GO 43305
// result := true ;
43241: LD_ADDR_VAR 0 3
43245: PUSH
43246: LD_INT 1
43248: ST_TO_ADDR
// for i = 1 to array1 do
43249: LD_ADDR_VAR 0 4
43253: PUSH
43254: DOUBLE
43255: LD_INT 1
43257: DEC
43258: ST_TO_ADDR
43259: LD_VAR 0 1
43263: PUSH
43264: FOR_TO
43265: IFFALSE 43303
// if array1 [ i ] <> array2 [ i ] then
43267: LD_VAR 0 1
43271: PUSH
43272: LD_VAR 0 4
43276: ARRAY
43277: PUSH
43278: LD_VAR 0 2
43282: PUSH
43283: LD_VAR 0 4
43287: ARRAY
43288: NONEQUAL
43289: IFFALSE 43301
// begin result := false ;
43291: LD_ADDR_VAR 0 3
43295: PUSH
43296: LD_INT 0
43298: ST_TO_ADDR
// break ;
43299: GO 43303
// end ;
43301: GO 43264
43303: POP
43304: POP
// end ;
43305: LD_VAR 0 3
43309: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
43310: LD_INT 0
43312: PPUSH
43313: PPUSH
43314: PPUSH
// pom := GetBase ( fac ) ;
43315: LD_ADDR_VAR 0 5
43319: PUSH
43320: LD_VAR 0 1
43324: PPUSH
43325: CALL_OW 274
43329: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
43330: LD_ADDR_VAR 0 4
43334: PUSH
43335: LD_VAR 0 2
43339: PUSH
43340: LD_INT 1
43342: ARRAY
43343: PPUSH
43344: LD_VAR 0 2
43348: PUSH
43349: LD_INT 2
43351: ARRAY
43352: PPUSH
43353: LD_VAR 0 2
43357: PUSH
43358: LD_INT 3
43360: ARRAY
43361: PPUSH
43362: LD_VAR 0 2
43366: PUSH
43367: LD_INT 4
43369: ARRAY
43370: PPUSH
43371: CALL_OW 449
43375: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43376: LD_ADDR_VAR 0 3
43380: PUSH
43381: LD_VAR 0 5
43385: PPUSH
43386: LD_INT 1
43388: PPUSH
43389: CALL_OW 275
43393: PUSH
43394: LD_VAR 0 4
43398: PUSH
43399: LD_INT 1
43401: ARRAY
43402: GREATEREQUAL
43403: PUSH
43404: LD_VAR 0 5
43408: PPUSH
43409: LD_INT 2
43411: PPUSH
43412: CALL_OW 275
43416: PUSH
43417: LD_VAR 0 4
43421: PUSH
43422: LD_INT 2
43424: ARRAY
43425: GREATEREQUAL
43426: AND
43427: PUSH
43428: LD_VAR 0 5
43432: PPUSH
43433: LD_INT 3
43435: PPUSH
43436: CALL_OW 275
43440: PUSH
43441: LD_VAR 0 4
43445: PUSH
43446: LD_INT 3
43448: ARRAY
43449: GREATEREQUAL
43450: AND
43451: ST_TO_ADDR
// end ;
43452: LD_VAR 0 3
43456: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
43457: LD_INT 0
43459: PPUSH
43460: PPUSH
43461: PPUSH
43462: PPUSH
// pom := GetBase ( building ) ;
43463: LD_ADDR_VAR 0 3
43467: PUSH
43468: LD_VAR 0 1
43472: PPUSH
43473: CALL_OW 274
43477: ST_TO_ADDR
// if not pom then
43478: LD_VAR 0 3
43482: NOT
43483: IFFALSE 43487
// exit ;
43485: GO 43657
// btype := GetBType ( building ) ;
43487: LD_ADDR_VAR 0 5
43491: PUSH
43492: LD_VAR 0 1
43496: PPUSH
43497: CALL_OW 266
43501: ST_TO_ADDR
// if btype = b_armoury then
43502: LD_VAR 0 5
43506: PUSH
43507: LD_INT 4
43509: EQUAL
43510: IFFALSE 43520
// btype := b_barracks ;
43512: LD_ADDR_VAR 0 5
43516: PUSH
43517: LD_INT 5
43519: ST_TO_ADDR
// if btype = b_depot then
43520: LD_VAR 0 5
43524: PUSH
43525: LD_INT 0
43527: EQUAL
43528: IFFALSE 43538
// btype := b_warehouse ;
43530: LD_ADDR_VAR 0 5
43534: PUSH
43535: LD_INT 1
43537: ST_TO_ADDR
// if btype = b_workshop then
43538: LD_VAR 0 5
43542: PUSH
43543: LD_INT 2
43545: EQUAL
43546: IFFALSE 43556
// btype := b_factory ;
43548: LD_ADDR_VAR 0 5
43552: PUSH
43553: LD_INT 3
43555: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43556: LD_ADDR_VAR 0 4
43560: PUSH
43561: LD_VAR 0 5
43565: PPUSH
43566: LD_VAR 0 1
43570: PPUSH
43571: CALL_OW 248
43575: PPUSH
43576: CALL_OW 450
43580: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43581: LD_ADDR_VAR 0 2
43585: PUSH
43586: LD_VAR 0 3
43590: PPUSH
43591: LD_INT 1
43593: PPUSH
43594: CALL_OW 275
43598: PUSH
43599: LD_VAR 0 4
43603: PUSH
43604: LD_INT 1
43606: ARRAY
43607: GREATEREQUAL
43608: PUSH
43609: LD_VAR 0 3
43613: PPUSH
43614: LD_INT 2
43616: PPUSH
43617: CALL_OW 275
43621: PUSH
43622: LD_VAR 0 4
43626: PUSH
43627: LD_INT 2
43629: ARRAY
43630: GREATEREQUAL
43631: AND
43632: PUSH
43633: LD_VAR 0 3
43637: PPUSH
43638: LD_INT 3
43640: PPUSH
43641: CALL_OW 275
43645: PUSH
43646: LD_VAR 0 4
43650: PUSH
43651: LD_INT 3
43653: ARRAY
43654: GREATEREQUAL
43655: AND
43656: ST_TO_ADDR
// end ;
43657: LD_VAR 0 2
43661: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
43662: LD_INT 0
43664: PPUSH
43665: PPUSH
43666: PPUSH
// pom := GetBase ( building ) ;
43667: LD_ADDR_VAR 0 4
43671: PUSH
43672: LD_VAR 0 1
43676: PPUSH
43677: CALL_OW 274
43681: ST_TO_ADDR
// if not pom then
43682: LD_VAR 0 4
43686: NOT
43687: IFFALSE 43691
// exit ;
43689: GO 43792
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
43691: LD_ADDR_VAR 0 5
43695: PUSH
43696: LD_VAR 0 2
43700: PPUSH
43701: LD_VAR 0 1
43705: PPUSH
43706: CALL_OW 248
43710: PPUSH
43711: CALL_OW 450
43715: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
43716: LD_ADDR_VAR 0 3
43720: PUSH
43721: LD_VAR 0 4
43725: PPUSH
43726: LD_INT 1
43728: PPUSH
43729: CALL_OW 275
43733: PUSH
43734: LD_VAR 0 5
43738: PUSH
43739: LD_INT 1
43741: ARRAY
43742: GREATEREQUAL
43743: PUSH
43744: LD_VAR 0 4
43748: PPUSH
43749: LD_INT 2
43751: PPUSH
43752: CALL_OW 275
43756: PUSH
43757: LD_VAR 0 5
43761: PUSH
43762: LD_INT 2
43764: ARRAY
43765: GREATEREQUAL
43766: AND
43767: PUSH
43768: LD_VAR 0 4
43772: PPUSH
43773: LD_INT 3
43775: PPUSH
43776: CALL_OW 275
43780: PUSH
43781: LD_VAR 0 5
43785: PUSH
43786: LD_INT 3
43788: ARRAY
43789: GREATEREQUAL
43790: AND
43791: ST_TO_ADDR
// end ;
43792: LD_VAR 0 3
43796: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
43797: LD_INT 0
43799: PPUSH
43800: PPUSH
43801: PPUSH
43802: PPUSH
43803: PPUSH
43804: PPUSH
43805: PPUSH
43806: PPUSH
43807: PPUSH
43808: PPUSH
43809: PPUSH
// result := false ;
43810: LD_ADDR_VAR 0 8
43814: PUSH
43815: LD_INT 0
43817: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
43818: LD_VAR 0 5
43822: NOT
43823: PUSH
43824: LD_VAR 0 1
43828: NOT
43829: OR
43830: PUSH
43831: LD_VAR 0 2
43835: NOT
43836: OR
43837: PUSH
43838: LD_VAR 0 3
43842: NOT
43843: OR
43844: IFFALSE 43848
// exit ;
43846: GO 44662
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
43848: LD_ADDR_VAR 0 14
43852: PUSH
43853: LD_VAR 0 1
43857: PPUSH
43858: LD_VAR 0 2
43862: PPUSH
43863: LD_VAR 0 3
43867: PPUSH
43868: LD_VAR 0 4
43872: PPUSH
43873: LD_VAR 0 5
43877: PUSH
43878: LD_INT 1
43880: ARRAY
43881: PPUSH
43882: CALL_OW 248
43886: PPUSH
43887: LD_INT 0
43889: PPUSH
43890: CALL 45499 0 6
43894: ST_TO_ADDR
// if not hexes then
43895: LD_VAR 0 14
43899: NOT
43900: IFFALSE 43904
// exit ;
43902: GO 44662
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43904: LD_ADDR_VAR 0 17
43908: PUSH
43909: LD_VAR 0 5
43913: PPUSH
43914: LD_INT 22
43916: PUSH
43917: LD_VAR 0 13
43921: PPUSH
43922: CALL_OW 255
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 2
43933: PUSH
43934: LD_INT 30
43936: PUSH
43937: LD_INT 0
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 30
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: LIST
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PPUSH
43963: CALL_OW 72
43967: ST_TO_ADDR
// for i = 1 to hexes do
43968: LD_ADDR_VAR 0 9
43972: PUSH
43973: DOUBLE
43974: LD_INT 1
43976: DEC
43977: ST_TO_ADDR
43978: LD_VAR 0 14
43982: PUSH
43983: FOR_TO
43984: IFFALSE 44660
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43986: LD_ADDR_VAR 0 13
43990: PUSH
43991: LD_VAR 0 14
43995: PUSH
43996: LD_VAR 0 9
44000: ARRAY
44001: PUSH
44002: LD_INT 1
44004: ARRAY
44005: PPUSH
44006: LD_VAR 0 14
44010: PUSH
44011: LD_VAR 0 9
44015: ARRAY
44016: PUSH
44017: LD_INT 2
44019: ARRAY
44020: PPUSH
44021: CALL_OW 428
44025: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
44026: LD_VAR 0 14
44030: PUSH
44031: LD_VAR 0 9
44035: ARRAY
44036: PUSH
44037: LD_INT 1
44039: ARRAY
44040: PPUSH
44041: LD_VAR 0 14
44045: PUSH
44046: LD_VAR 0 9
44050: ARRAY
44051: PUSH
44052: LD_INT 2
44054: ARRAY
44055: PPUSH
44056: CALL_OW 351
44060: PUSH
44061: LD_VAR 0 14
44065: PUSH
44066: LD_VAR 0 9
44070: ARRAY
44071: PUSH
44072: LD_INT 1
44074: ARRAY
44075: PPUSH
44076: LD_VAR 0 14
44080: PUSH
44081: LD_VAR 0 9
44085: ARRAY
44086: PUSH
44087: LD_INT 2
44089: ARRAY
44090: PPUSH
44091: CALL_OW 488
44095: NOT
44096: OR
44097: PUSH
44098: LD_VAR 0 13
44102: PPUSH
44103: CALL_OW 247
44107: PUSH
44108: LD_INT 3
44110: EQUAL
44111: OR
44112: IFFALSE 44118
// exit ;
44114: POP
44115: POP
44116: GO 44662
// if not tmp then
44118: LD_VAR 0 13
44122: NOT
44123: IFFALSE 44127
// continue ;
44125: GO 43983
// result := true ;
44127: LD_ADDR_VAR 0 8
44131: PUSH
44132: LD_INT 1
44134: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
44135: LD_VAR 0 6
44139: PUSH
44140: LD_VAR 0 13
44144: PPUSH
44145: CALL_OW 247
44149: PUSH
44150: LD_INT 2
44152: EQUAL
44153: AND
44154: PUSH
44155: LD_VAR 0 13
44159: PPUSH
44160: CALL_OW 263
44164: PUSH
44165: LD_INT 1
44167: EQUAL
44168: AND
44169: IFFALSE 44333
// begin if IsDrivenBy ( tmp ) then
44171: LD_VAR 0 13
44175: PPUSH
44176: CALL_OW 311
44180: IFFALSE 44184
// continue ;
44182: GO 43983
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
44184: LD_VAR 0 6
44188: PPUSH
44189: LD_INT 3
44191: PUSH
44192: LD_INT 60
44194: PUSH
44195: EMPTY
44196: LIST
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 3
44204: PUSH
44205: LD_INT 55
44207: PUSH
44208: EMPTY
44209: LIST
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PPUSH
44219: CALL_OW 72
44223: IFFALSE 44331
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
44225: LD_ADDR_VAR 0 18
44229: PUSH
44230: LD_VAR 0 6
44234: PPUSH
44235: LD_INT 3
44237: PUSH
44238: LD_INT 60
44240: PUSH
44241: EMPTY
44242: LIST
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 3
44250: PUSH
44251: LD_INT 55
44253: PUSH
44254: EMPTY
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PPUSH
44265: CALL_OW 72
44269: PUSH
44270: LD_INT 1
44272: ARRAY
44273: ST_TO_ADDR
// if IsInUnit ( driver ) then
44274: LD_VAR 0 18
44278: PPUSH
44279: CALL_OW 310
44283: IFFALSE 44294
// ComExit ( driver ) ;
44285: LD_VAR 0 18
44289: PPUSH
44290: CALL 68683 0 1
// AddComEnterUnit ( driver , tmp ) ;
44294: LD_VAR 0 18
44298: PPUSH
44299: LD_VAR 0 13
44303: PPUSH
44304: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
44308: LD_VAR 0 18
44312: PPUSH
44313: LD_VAR 0 7
44317: PPUSH
44318: CALL_OW 173
// AddComExitVehicle ( driver ) ;
44322: LD_VAR 0 18
44326: PPUSH
44327: CALL_OW 181
// end ; continue ;
44331: GO 43983
// end ; if not cleaners or not tmp in cleaners then
44333: LD_VAR 0 6
44337: NOT
44338: PUSH
44339: LD_VAR 0 13
44343: PUSH
44344: LD_VAR 0 6
44348: IN
44349: NOT
44350: OR
44351: IFFALSE 44658
// begin if dep then
44353: LD_VAR 0 17
44357: IFFALSE 44493
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
44359: LD_ADDR_VAR 0 16
44363: PUSH
44364: LD_VAR 0 17
44368: PUSH
44369: LD_INT 1
44371: ARRAY
44372: PPUSH
44373: CALL_OW 250
44377: PPUSH
44378: LD_VAR 0 17
44382: PUSH
44383: LD_INT 1
44385: ARRAY
44386: PPUSH
44387: CALL_OW 254
44391: PPUSH
44392: LD_INT 5
44394: PPUSH
44395: CALL_OW 272
44399: PUSH
44400: LD_VAR 0 17
44404: PUSH
44405: LD_INT 1
44407: ARRAY
44408: PPUSH
44409: CALL_OW 251
44413: PPUSH
44414: LD_VAR 0 17
44418: PUSH
44419: LD_INT 1
44421: ARRAY
44422: PPUSH
44423: CALL_OW 254
44427: PPUSH
44428: LD_INT 5
44430: PPUSH
44431: CALL_OW 273
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
44440: LD_VAR 0 16
44444: PUSH
44445: LD_INT 1
44447: ARRAY
44448: PPUSH
44449: LD_VAR 0 16
44453: PUSH
44454: LD_INT 2
44456: ARRAY
44457: PPUSH
44458: CALL_OW 488
44462: IFFALSE 44493
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
44464: LD_VAR 0 13
44468: PPUSH
44469: LD_VAR 0 16
44473: PUSH
44474: LD_INT 1
44476: ARRAY
44477: PPUSH
44478: LD_VAR 0 16
44482: PUSH
44483: LD_INT 2
44485: ARRAY
44486: PPUSH
44487: CALL_OW 111
// continue ;
44491: GO 43983
// end ; end ; r := GetDir ( tmp ) ;
44493: LD_ADDR_VAR 0 15
44497: PUSH
44498: LD_VAR 0 13
44502: PPUSH
44503: CALL_OW 254
44507: ST_TO_ADDR
// if r = 5 then
44508: LD_VAR 0 15
44512: PUSH
44513: LD_INT 5
44515: EQUAL
44516: IFFALSE 44526
// r := 0 ;
44518: LD_ADDR_VAR 0 15
44522: PUSH
44523: LD_INT 0
44525: ST_TO_ADDR
// for j = r to 5 do
44526: LD_ADDR_VAR 0 10
44530: PUSH
44531: DOUBLE
44532: LD_VAR 0 15
44536: DEC
44537: ST_TO_ADDR
44538: LD_INT 5
44540: PUSH
44541: FOR_TO
44542: IFFALSE 44656
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
44544: LD_ADDR_VAR 0 11
44548: PUSH
44549: LD_VAR 0 13
44553: PPUSH
44554: CALL_OW 250
44558: PPUSH
44559: LD_VAR 0 10
44563: PPUSH
44564: LD_INT 2
44566: PPUSH
44567: CALL_OW 272
44571: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
44572: LD_ADDR_VAR 0 12
44576: PUSH
44577: LD_VAR 0 13
44581: PPUSH
44582: CALL_OW 251
44586: PPUSH
44587: LD_VAR 0 10
44591: PPUSH
44592: LD_INT 2
44594: PPUSH
44595: CALL_OW 273
44599: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
44600: LD_VAR 0 11
44604: PPUSH
44605: LD_VAR 0 12
44609: PPUSH
44610: CALL_OW 488
44614: PUSH
44615: LD_VAR 0 11
44619: PPUSH
44620: LD_VAR 0 12
44624: PPUSH
44625: CALL_OW 428
44629: NOT
44630: AND
44631: IFFALSE 44654
// begin ComMoveXY ( tmp , _x , _y ) ;
44633: LD_VAR 0 13
44637: PPUSH
44638: LD_VAR 0 11
44642: PPUSH
44643: LD_VAR 0 12
44647: PPUSH
44648: CALL_OW 111
// break ;
44652: GO 44656
// end ; end ;
44654: GO 44541
44656: POP
44657: POP
// end ; end ;
44658: GO 43983
44660: POP
44661: POP
// end ;
44662: LD_VAR 0 8
44666: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
44667: LD_INT 0
44669: PPUSH
44670: PPUSH
44671: PPUSH
44672: PPUSH
44673: PPUSH
44674: PPUSH
44675: PPUSH
44676: PPUSH
44677: PPUSH
44678: PPUSH
// result := false ;
44679: LD_ADDR_VAR 0 6
44683: PUSH
44684: LD_INT 0
44686: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
44687: LD_VAR 0 1
44691: NOT
44692: PUSH
44693: LD_VAR 0 1
44697: PPUSH
44698: CALL_OW 266
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 1
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: IN
44713: NOT
44714: OR
44715: PUSH
44716: LD_VAR 0 2
44720: NOT
44721: OR
44722: PUSH
44723: LD_VAR 0 5
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: LD_INT 1
44733: PUSH
44734: LD_INT 2
44736: PUSH
44737: LD_INT 3
44739: PUSH
44740: LD_INT 4
44742: PUSH
44743: LD_INT 5
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: LIST
44750: LIST
44751: LIST
44752: LIST
44753: IN
44754: NOT
44755: OR
44756: PUSH
44757: LD_VAR 0 3
44761: PPUSH
44762: LD_VAR 0 4
44766: PPUSH
44767: CALL_OW 488
44771: NOT
44772: OR
44773: IFFALSE 44777
// exit ;
44775: GO 45494
// pom := GetBase ( depot ) ;
44777: LD_ADDR_VAR 0 10
44781: PUSH
44782: LD_VAR 0 1
44786: PPUSH
44787: CALL_OW 274
44791: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
44792: LD_ADDR_VAR 0 11
44796: PUSH
44797: LD_VAR 0 2
44801: PPUSH
44802: LD_VAR 0 1
44806: PPUSH
44807: CALL_OW 248
44811: PPUSH
44812: CALL_OW 450
44816: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
44817: LD_VAR 0 10
44821: PPUSH
44822: LD_INT 1
44824: PPUSH
44825: CALL_OW 275
44829: PUSH
44830: LD_VAR 0 11
44834: PUSH
44835: LD_INT 1
44837: ARRAY
44838: GREATEREQUAL
44839: PUSH
44840: LD_VAR 0 10
44844: PPUSH
44845: LD_INT 2
44847: PPUSH
44848: CALL_OW 275
44852: PUSH
44853: LD_VAR 0 11
44857: PUSH
44858: LD_INT 2
44860: ARRAY
44861: GREATEREQUAL
44862: AND
44863: PUSH
44864: LD_VAR 0 10
44868: PPUSH
44869: LD_INT 3
44871: PPUSH
44872: CALL_OW 275
44876: PUSH
44877: LD_VAR 0 11
44881: PUSH
44882: LD_INT 3
44884: ARRAY
44885: GREATEREQUAL
44886: AND
44887: NOT
44888: IFFALSE 44892
// exit ;
44890: GO 45494
// if GetBType ( depot ) = b_depot then
44892: LD_VAR 0 1
44896: PPUSH
44897: CALL_OW 266
44901: PUSH
44902: LD_INT 0
44904: EQUAL
44905: IFFALSE 44917
// dist := 28 else
44907: LD_ADDR_VAR 0 14
44911: PUSH
44912: LD_INT 28
44914: ST_TO_ADDR
44915: GO 44925
// dist := 36 ;
44917: LD_ADDR_VAR 0 14
44921: PUSH
44922: LD_INT 36
44924: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
44925: LD_VAR 0 1
44929: PPUSH
44930: LD_VAR 0 3
44934: PPUSH
44935: LD_VAR 0 4
44939: PPUSH
44940: CALL_OW 297
44944: PUSH
44945: LD_VAR 0 14
44949: GREATER
44950: IFFALSE 44954
// exit ;
44952: GO 45494
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
44954: LD_ADDR_VAR 0 12
44958: PUSH
44959: LD_VAR 0 2
44963: PPUSH
44964: LD_VAR 0 3
44968: PPUSH
44969: LD_VAR 0 4
44973: PPUSH
44974: LD_VAR 0 5
44978: PPUSH
44979: LD_VAR 0 1
44983: PPUSH
44984: CALL_OW 248
44988: PPUSH
44989: LD_INT 0
44991: PPUSH
44992: CALL 45499 0 6
44996: ST_TO_ADDR
// if not hexes then
44997: LD_VAR 0 12
45001: NOT
45002: IFFALSE 45006
// exit ;
45004: GO 45494
// hex := GetHexInfo ( x , y ) ;
45006: LD_ADDR_VAR 0 15
45010: PUSH
45011: LD_VAR 0 3
45015: PPUSH
45016: LD_VAR 0 4
45020: PPUSH
45021: CALL_OW 546
45025: ST_TO_ADDR
// if hex [ 1 ] then
45026: LD_VAR 0 15
45030: PUSH
45031: LD_INT 1
45033: ARRAY
45034: IFFALSE 45038
// exit ;
45036: GO 45494
// height := hex [ 2 ] ;
45038: LD_ADDR_VAR 0 13
45042: PUSH
45043: LD_VAR 0 15
45047: PUSH
45048: LD_INT 2
45050: ARRAY
45051: ST_TO_ADDR
// for i = 1 to hexes do
45052: LD_ADDR_VAR 0 7
45056: PUSH
45057: DOUBLE
45058: LD_INT 1
45060: DEC
45061: ST_TO_ADDR
45062: LD_VAR 0 12
45066: PUSH
45067: FOR_TO
45068: IFFALSE 45398
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
45070: LD_VAR 0 12
45074: PUSH
45075: LD_VAR 0 7
45079: ARRAY
45080: PUSH
45081: LD_INT 1
45083: ARRAY
45084: PPUSH
45085: LD_VAR 0 12
45089: PUSH
45090: LD_VAR 0 7
45094: ARRAY
45095: PUSH
45096: LD_INT 2
45098: ARRAY
45099: PPUSH
45100: CALL_OW 488
45104: NOT
45105: PUSH
45106: LD_VAR 0 12
45110: PUSH
45111: LD_VAR 0 7
45115: ARRAY
45116: PUSH
45117: LD_INT 1
45119: ARRAY
45120: PPUSH
45121: LD_VAR 0 12
45125: PUSH
45126: LD_VAR 0 7
45130: ARRAY
45131: PUSH
45132: LD_INT 2
45134: ARRAY
45135: PPUSH
45136: CALL_OW 428
45140: PUSH
45141: LD_INT 0
45143: GREATER
45144: OR
45145: PUSH
45146: LD_VAR 0 12
45150: PUSH
45151: LD_VAR 0 7
45155: ARRAY
45156: PUSH
45157: LD_INT 1
45159: ARRAY
45160: PPUSH
45161: LD_VAR 0 12
45165: PUSH
45166: LD_VAR 0 7
45170: ARRAY
45171: PUSH
45172: LD_INT 2
45174: ARRAY
45175: PPUSH
45176: CALL_OW 351
45180: OR
45181: IFFALSE 45187
// exit ;
45183: POP
45184: POP
45185: GO 45494
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
45187: LD_ADDR_VAR 0 8
45191: PUSH
45192: LD_VAR 0 12
45196: PUSH
45197: LD_VAR 0 7
45201: ARRAY
45202: PUSH
45203: LD_INT 1
45205: ARRAY
45206: PPUSH
45207: LD_VAR 0 12
45211: PUSH
45212: LD_VAR 0 7
45216: ARRAY
45217: PUSH
45218: LD_INT 2
45220: ARRAY
45221: PPUSH
45222: CALL_OW 546
45226: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
45227: LD_VAR 0 8
45231: PUSH
45232: LD_INT 1
45234: ARRAY
45235: PUSH
45236: LD_VAR 0 8
45240: PUSH
45241: LD_INT 2
45243: ARRAY
45244: PUSH
45245: LD_VAR 0 13
45249: PUSH
45250: LD_INT 2
45252: PLUS
45253: GREATER
45254: OR
45255: PUSH
45256: LD_VAR 0 8
45260: PUSH
45261: LD_INT 2
45263: ARRAY
45264: PUSH
45265: LD_VAR 0 13
45269: PUSH
45270: LD_INT 2
45272: MINUS
45273: LESS
45274: OR
45275: PUSH
45276: LD_VAR 0 8
45280: PUSH
45281: LD_INT 3
45283: ARRAY
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: LD_INT 8
45290: PUSH
45291: LD_INT 9
45293: PUSH
45294: LD_INT 10
45296: PUSH
45297: LD_INT 11
45299: PUSH
45300: LD_INT 12
45302: PUSH
45303: LD_INT 13
45305: PUSH
45306: LD_INT 16
45308: PUSH
45309: LD_INT 17
45311: PUSH
45312: LD_INT 18
45314: PUSH
45315: LD_INT 19
45317: PUSH
45318: LD_INT 20
45320: PUSH
45321: LD_INT 21
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: IN
45339: NOT
45340: OR
45341: PUSH
45342: LD_VAR 0 8
45346: PUSH
45347: LD_INT 5
45349: ARRAY
45350: NOT
45351: OR
45352: PUSH
45353: LD_VAR 0 8
45357: PUSH
45358: LD_INT 6
45360: ARRAY
45361: PUSH
45362: LD_INT 1
45364: PUSH
45365: LD_INT 2
45367: PUSH
45368: LD_INT 7
45370: PUSH
45371: LD_INT 9
45373: PUSH
45374: LD_INT 10
45376: PUSH
45377: LD_INT 11
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: IN
45388: NOT
45389: OR
45390: IFFALSE 45396
// exit ;
45392: POP
45393: POP
45394: GO 45494
// end ;
45396: GO 45067
45398: POP
45399: POP
// side := GetSide ( depot ) ;
45400: LD_ADDR_VAR 0 9
45404: PUSH
45405: LD_VAR 0 1
45409: PPUSH
45410: CALL_OW 255
45414: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
45415: LD_VAR 0 9
45419: PPUSH
45420: LD_VAR 0 3
45424: PPUSH
45425: LD_VAR 0 4
45429: PPUSH
45430: LD_INT 20
45432: PPUSH
45433: CALL 37815 0 4
45437: PUSH
45438: LD_INT 4
45440: ARRAY
45441: IFFALSE 45445
// exit ;
45443: GO 45494
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
45445: LD_VAR 0 2
45449: PUSH
45450: LD_INT 29
45452: PUSH
45453: LD_INT 30
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: IN
45460: PUSH
45461: LD_VAR 0 3
45465: PPUSH
45466: LD_VAR 0 4
45470: PPUSH
45471: LD_VAR 0 9
45475: PPUSH
45476: CALL_OW 440
45480: NOT
45481: AND
45482: IFFALSE 45486
// exit ;
45484: GO 45494
// result := true ;
45486: LD_ADDR_VAR 0 6
45490: PUSH
45491: LD_INT 1
45493: ST_TO_ADDR
// end ;
45494: LD_VAR 0 6
45498: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
45499: LD_INT 0
45501: PPUSH
45502: PPUSH
45503: PPUSH
45504: PPUSH
45505: PPUSH
45506: PPUSH
45507: PPUSH
45508: PPUSH
45509: PPUSH
45510: PPUSH
45511: PPUSH
45512: PPUSH
45513: PPUSH
45514: PPUSH
45515: PPUSH
45516: PPUSH
45517: PPUSH
45518: PPUSH
45519: PPUSH
45520: PPUSH
45521: PPUSH
45522: PPUSH
45523: PPUSH
45524: PPUSH
45525: PPUSH
45526: PPUSH
45527: PPUSH
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
45536: PPUSH
45537: PPUSH
45538: PPUSH
45539: PPUSH
45540: PPUSH
45541: PPUSH
45542: PPUSH
45543: PPUSH
45544: PPUSH
45545: PPUSH
45546: PPUSH
45547: PPUSH
45548: PPUSH
45549: PPUSH
45550: PPUSH
45551: PPUSH
45552: PPUSH
45553: PPUSH
45554: PPUSH
45555: PPUSH
45556: PPUSH
45557: PPUSH
45558: PPUSH
// result = [ ] ;
45559: LD_ADDR_VAR 0 7
45563: PUSH
45564: EMPTY
45565: ST_TO_ADDR
// temp_list = [ ] ;
45566: LD_ADDR_VAR 0 9
45570: PUSH
45571: EMPTY
45572: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
45573: LD_VAR 0 4
45577: PUSH
45578: LD_INT 0
45580: PUSH
45581: LD_INT 1
45583: PUSH
45584: LD_INT 2
45586: PUSH
45587: LD_INT 3
45589: PUSH
45590: LD_INT 4
45592: PUSH
45593: LD_INT 5
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: IN
45604: NOT
45605: PUSH
45606: LD_VAR 0 1
45610: PUSH
45611: LD_INT 0
45613: PUSH
45614: LD_INT 1
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: IN
45621: PUSH
45622: LD_VAR 0 5
45626: PUSH
45627: LD_INT 1
45629: PUSH
45630: LD_INT 2
45632: PUSH
45633: LD_INT 3
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: LIST
45640: IN
45641: NOT
45642: AND
45643: OR
45644: IFFALSE 45648
// exit ;
45646: GO 64039
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
45648: LD_VAR 0 1
45652: PUSH
45653: LD_INT 6
45655: PUSH
45656: LD_INT 7
45658: PUSH
45659: LD_INT 8
45661: PUSH
45662: LD_INT 13
45664: PUSH
45665: LD_INT 12
45667: PUSH
45668: LD_INT 15
45670: PUSH
45671: LD_INT 11
45673: PUSH
45674: LD_INT 14
45676: PUSH
45677: LD_INT 10
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: IN
45691: IFFALSE 45701
// btype = b_lab ;
45693: LD_ADDR_VAR 0 1
45697: PUSH
45698: LD_INT 6
45700: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
45701: LD_VAR 0 6
45705: PUSH
45706: LD_INT 0
45708: PUSH
45709: LD_INT 1
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: LIST
45719: IN
45720: NOT
45721: PUSH
45722: LD_VAR 0 1
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: LD_INT 1
45732: PUSH
45733: LD_INT 2
45735: PUSH
45736: LD_INT 3
45738: PUSH
45739: LD_INT 6
45741: PUSH
45742: LD_INT 36
45744: PUSH
45745: LD_INT 4
45747: PUSH
45748: LD_INT 5
45750: PUSH
45751: LD_INT 31
45753: PUSH
45754: LD_INT 32
45756: PUSH
45757: LD_INT 33
45759: PUSH
45760: EMPTY
45761: LIST
45762: LIST
45763: LIST
45764: LIST
45765: LIST
45766: LIST
45767: LIST
45768: LIST
45769: LIST
45770: LIST
45771: LIST
45772: IN
45773: NOT
45774: PUSH
45775: LD_VAR 0 6
45779: PUSH
45780: LD_INT 1
45782: EQUAL
45783: AND
45784: OR
45785: PUSH
45786: LD_VAR 0 1
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: LD_INT 3
45796: PUSH
45797: EMPTY
45798: LIST
45799: LIST
45800: IN
45801: NOT
45802: PUSH
45803: LD_VAR 0 6
45807: PUSH
45808: LD_INT 2
45810: EQUAL
45811: AND
45812: OR
45813: IFFALSE 45823
// mode = 0 ;
45815: LD_ADDR_VAR 0 6
45819: PUSH
45820: LD_INT 0
45822: ST_TO_ADDR
// case mode of 0 :
45823: LD_VAR 0 6
45827: PUSH
45828: LD_INT 0
45830: DOUBLE
45831: EQUAL
45832: IFTRUE 45836
45834: GO 57289
45836: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45837: LD_ADDR_VAR 0 11
45841: PUSH
45842: LD_INT 0
45844: PUSH
45845: LD_INT 0
45847: PUSH
45848: EMPTY
45849: LIST
45850: LIST
45851: PUSH
45852: LD_INT 0
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: PUSH
45866: LD_INT 0
45868: PUSH
45869: EMPTY
45870: LIST
45871: LIST
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: LD_INT 1
45878: PUSH
45879: EMPTY
45880: LIST
45881: LIST
45882: PUSH
45883: LD_INT 0
45885: PUSH
45886: LD_INT 1
45888: PUSH
45889: EMPTY
45890: LIST
45891: LIST
45892: PUSH
45893: LD_INT 1
45895: NEG
45896: PUSH
45897: LD_INT 0
45899: PUSH
45900: EMPTY
45901: LIST
45902: LIST
45903: PUSH
45904: LD_INT 1
45906: NEG
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: NEG
45919: PUSH
45920: LD_INT 2
45922: NEG
45923: PUSH
45924: EMPTY
45925: LIST
45926: LIST
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: LD_INT 2
45933: NEG
45934: PUSH
45935: EMPTY
45936: LIST
45937: LIST
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: LD_INT 1
45944: NEG
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 1
45952: PUSH
45953: LD_INT 2
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 0
45962: PUSH
45963: LD_INT 2
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 1
45983: PUSH
45984: LD_INT 3
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 0
45993: PUSH
45994: LD_INT 3
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: LD_INT 2
46007: PUSH
46008: EMPTY
46009: LIST
46010: LIST
46011: PUSH
46012: EMPTY
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46030: LD_ADDR_VAR 0 12
46034: PUSH
46035: LD_INT 0
46037: PUSH
46038: LD_INT 0
46040: PUSH
46041: EMPTY
46042: LIST
46043: LIST
46044: PUSH
46045: LD_INT 0
46047: PUSH
46048: LD_INT 1
46050: NEG
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 1
46058: PUSH
46059: LD_INT 0
46061: PUSH
46062: EMPTY
46063: LIST
46064: LIST
46065: PUSH
46066: LD_INT 1
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PUSH
46076: LD_INT 0
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: EMPTY
46083: LIST
46084: LIST
46085: PUSH
46086: LD_INT 1
46088: NEG
46089: PUSH
46090: LD_INT 0
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 1
46114: NEG
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 2
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 2
46132: PUSH
46133: LD_INT 1
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 2
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 2
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 2
46176: NEG
46177: PUSH
46178: LD_INT 1
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: LD_INT 3
46187: NEG
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 3
46198: NEG
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: EMPTY
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46226: LD_ADDR_VAR 0 13
46230: PUSH
46231: LD_INT 0
46233: PUSH
46234: LD_INT 0
46236: PUSH
46237: EMPTY
46238: LIST
46239: LIST
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: LD_INT 1
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: PUSH
46255: LD_INT 0
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: LD_INT 1
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 0
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 1
46284: NEG
46285: PUSH
46286: LD_INT 0
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: NEG
46296: PUSH
46297: LD_INT 1
46299: NEG
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 2
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 2
46319: PUSH
46320: LD_INT 1
46322: PUSH
46323: EMPTY
46324: LIST
46325: LIST
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: EMPTY
46334: LIST
46335: LIST
46336: PUSH
46337: LD_INT 1
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 2
46349: NEG
46350: PUSH
46351: LD_INT 1
46353: NEG
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 2
46361: NEG
46362: PUSH
46363: LD_INT 2
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: LD_INT 3
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 3
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 3
46397: NEG
46398: PUSH
46399: LD_INT 3
46401: NEG
46402: PUSH
46403: EMPTY
46404: LIST
46405: LIST
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: LIST
46411: LIST
46412: LIST
46413: LIST
46414: LIST
46415: LIST
46416: LIST
46417: LIST
46418: LIST
46419: LIST
46420: LIST
46421: LIST
46422: LIST
46423: LIST
46424: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46425: LD_ADDR_VAR 0 14
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: LD_INT 0
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 1
46445: NEG
46446: PUSH
46447: EMPTY
46448: LIST
46449: LIST
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: PUSH
46464: LD_INT 1
46466: PUSH
46467: EMPTY
46468: LIST
46469: LIST
46470: PUSH
46471: LD_INT 0
46473: PUSH
46474: LD_INT 1
46476: PUSH
46477: EMPTY
46478: LIST
46479: LIST
46480: PUSH
46481: LD_INT 1
46483: NEG
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: NEG
46507: PUSH
46508: LD_INT 2
46510: NEG
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: PUSH
46516: LD_INT 0
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: LD_INT 1
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: LD_INT 1
46540: PUSH
46541: LD_INT 2
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 2
46553: PUSH
46554: EMPTY
46555: LIST
46556: LIST
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: PUSH
46562: LD_INT 1
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: NEG
46572: PUSH
46573: LD_INT 3
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 3
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 2
46597: NEG
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: LIST
46607: LIST
46608: LIST
46609: LIST
46610: LIST
46611: LIST
46612: LIST
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46621: LD_ADDR_VAR 0 15
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 1
46702: PUSH
46703: LD_INT 1
46705: NEG
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 2
46723: PUSH
46724: LD_INT 1
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: NEG
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 2
46744: NEG
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 2
46755: NEG
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 2
46767: PUSH
46768: LD_INT 1
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 3
46778: PUSH
46779: LD_INT 0
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 3
46788: PUSH
46789: LD_INT 1
46791: PUSH
46792: EMPTY
46793: LIST
46794: LIST
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: LIST
46800: LIST
46801: LIST
46802: LIST
46803: LIST
46804: LIST
46805: LIST
46806: LIST
46807: LIST
46808: LIST
46809: LIST
46810: LIST
46811: LIST
46812: LIST
46813: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46814: LD_ADDR_VAR 0 16
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: LD_INT 0
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: LD_INT 0
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: PUSH
46853: LD_INT 1
46855: PUSH
46856: EMPTY
46857: LIST
46858: LIST
46859: PUSH
46860: LD_INT 0
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: LD_INT 1
46872: NEG
46873: PUSH
46874: LD_INT 0
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 1
46883: NEG
46884: PUSH
46885: LD_INT 1
46887: NEG
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 2
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: LD_INT 1
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 2
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 2
46937: NEG
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: NEG
46950: PUSH
46951: LD_INT 2
46953: NEG
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: PUSH
46959: LD_INT 3
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: EMPTY
46966: LIST
46967: LIST
46968: PUSH
46969: LD_INT 3
46971: PUSH
46972: LD_INT 3
46974: PUSH
46975: EMPTY
46976: LIST
46977: LIST
46978: PUSH
46979: LD_INT 2
46981: PUSH
46982: LD_INT 3
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: LIST
46995: LIST
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47007: LD_ADDR_VAR 0 17
47011: PUSH
47012: LD_INT 0
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 0
47024: PUSH
47025: LD_INT 1
47027: NEG
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 1
47035: PUSH
47036: LD_INT 0
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 0
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: EMPTY
47060: LIST
47061: LIST
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: LD_INT 0
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: LD_INT 1
47076: NEG
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: LD_INT 0
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: EMPTY
47106: LIST
47107: LIST
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: LD_INT 2
47122: PUSH
47123: LD_INT 0
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: PUSH
47130: LD_INT 2
47132: PUSH
47133: LD_INT 1
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 2
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: EMPTY
47147: LIST
47148: LIST
47149: PUSH
47150: LD_INT 1
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 0
47162: PUSH
47163: LD_INT 2
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: NEG
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 2
47183: NEG
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 2
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: NEG
47207: PUSH
47208: LD_INT 2
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: LIST
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47237: LD_ADDR_VAR 0 18
47241: PUSH
47242: LD_INT 0
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 0
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 1
47265: PUSH
47266: LD_INT 0
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 1
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 1
47295: NEG
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 1
47318: NEG
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 0
47330: PUSH
47331: LD_INT 2
47333: NEG
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: PUSH
47350: LD_INT 2
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: EMPTY
47357: LIST
47358: LIST
47359: PUSH
47360: LD_INT 2
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 2
47372: PUSH
47373: LD_INT 2
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 2
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 0
47392: PUSH
47393: LD_INT 2
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: LD_INT 0
47417: PUSH
47418: EMPTY
47419: LIST
47420: LIST
47421: PUSH
47422: LD_INT 2
47424: NEG
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 2
47436: NEG
47437: PUSH
47438: LD_INT 2
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: LIST
47450: LIST
47451: LIST
47452: LIST
47453: LIST
47454: LIST
47455: LIST
47456: LIST
47457: LIST
47458: LIST
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47467: LD_ADDR_VAR 0 19
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 0
47484: PUSH
47485: LD_INT 1
47487: NEG
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: PUSH
47496: LD_INT 0
47498: PUSH
47499: EMPTY
47500: LIST
47501: LIST
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: LD_INT 1
47508: PUSH
47509: EMPTY
47510: LIST
47511: LIST
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 1
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 1
47525: NEG
47526: PUSH
47527: LD_INT 0
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: NEG
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 1
47548: NEG
47549: PUSH
47550: LD_INT 2
47552: NEG
47553: PUSH
47554: EMPTY
47555: LIST
47556: LIST
47557: PUSH
47558: LD_INT 0
47560: PUSH
47561: LD_INT 2
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 1
47571: PUSH
47572: LD_INT 1
47574: NEG
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 2
47582: PUSH
47583: LD_INT 0
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 2
47592: PUSH
47593: LD_INT 1
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 2
47602: PUSH
47603: LD_INT 2
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 2
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 0
47622: PUSH
47623: LD_INT 2
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 1
47632: NEG
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: NEG
47644: PUSH
47645: LD_INT 0
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PUSH
47652: LD_INT 2
47654: NEG
47655: PUSH
47656: LD_INT 1
47658: NEG
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: LD_INT 2
47666: NEG
47667: PUSH
47668: LD_INT 2
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: EMPTY
47677: LIST
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47697: LD_ADDR_VAR 0 20
47701: PUSH
47702: LD_INT 0
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 0
47714: PUSH
47715: LD_INT 1
47717: NEG
47718: PUSH
47719: EMPTY
47720: LIST
47721: LIST
47722: PUSH
47723: LD_INT 1
47725: PUSH
47726: LD_INT 0
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: PUSH
47736: LD_INT 1
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: NEG
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 1
47778: NEG
47779: PUSH
47780: LD_INT 2
47782: NEG
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: LD_INT 2
47793: NEG
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 1
47801: PUSH
47802: LD_INT 1
47804: NEG
47805: PUSH
47806: EMPTY
47807: LIST
47808: LIST
47809: PUSH
47810: LD_INT 2
47812: PUSH
47813: LD_INT 0
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: LD_INT 1
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: LD_INT 2
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 2
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 2
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: PUSH
47860: LD_INT 1
47862: NEG
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 2
47884: NEG
47885: PUSH
47886: LD_INT 1
47888: NEG
47889: PUSH
47890: EMPTY
47891: LIST
47892: LIST
47893: PUSH
47894: LD_INT 2
47896: NEG
47897: PUSH
47898: LD_INT 2
47900: NEG
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: EMPTY
47907: LIST
47908: LIST
47909: LIST
47910: LIST
47911: LIST
47912: LIST
47913: LIST
47914: LIST
47915: LIST
47916: LIST
47917: LIST
47918: LIST
47919: LIST
47920: LIST
47921: LIST
47922: LIST
47923: LIST
47924: LIST
47925: LIST
47926: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47927: LD_ADDR_VAR 0 21
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: LD_INT 0
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 0
47944: PUSH
47945: LD_INT 1
47947: NEG
47948: PUSH
47949: EMPTY
47950: LIST
47951: LIST
47952: PUSH
47953: LD_INT 1
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: EMPTY
47960: LIST
47961: LIST
47962: PUSH
47963: LD_INT 1
47965: PUSH
47966: LD_INT 1
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 1
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 1
47985: NEG
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: LD_INT 1
48000: NEG
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 1
48008: NEG
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 0
48020: PUSH
48021: LD_INT 2
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 1
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 2
48042: PUSH
48043: LD_INT 0
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 1
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 2
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 2
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 0
48082: PUSH
48083: LD_INT 2
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: NEG
48104: PUSH
48105: LD_INT 0
48107: PUSH
48108: EMPTY
48109: LIST
48110: LIST
48111: PUSH
48112: LD_INT 2
48114: NEG
48115: PUSH
48116: LD_INT 1
48118: NEG
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: LD_INT 2
48126: NEG
48127: PUSH
48128: LD_INT 2
48130: NEG
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: LIST
48140: LIST
48141: LIST
48142: LIST
48143: LIST
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48157: LD_ADDR_VAR 0 22
48161: PUSH
48162: LD_INT 0
48164: PUSH
48165: LD_INT 0
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 0
48174: PUSH
48175: LD_INT 1
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 1
48185: PUSH
48186: LD_INT 0
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 1
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 1
48215: NEG
48216: PUSH
48217: LD_INT 0
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: NEG
48227: PUSH
48228: LD_INT 1
48230: NEG
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 1
48238: NEG
48239: PUSH
48240: LD_INT 2
48242: NEG
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: LD_INT 2
48253: NEG
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: LD_INT 1
48264: NEG
48265: PUSH
48266: EMPTY
48267: LIST
48268: LIST
48269: PUSH
48270: LD_INT 2
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: EMPTY
48277: LIST
48278: LIST
48279: PUSH
48280: LD_INT 2
48282: PUSH
48283: LD_INT 1
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: LD_INT 2
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: LD_INT 2
48315: PUSH
48316: EMPTY
48317: LIST
48318: LIST
48319: PUSH
48320: LD_INT 1
48322: NEG
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: NEG
48334: PUSH
48335: LD_INT 0
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: NEG
48345: PUSH
48346: LD_INT 1
48348: NEG
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: LD_INT 2
48360: NEG
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: LIST
48370: LIST
48371: LIST
48372: LIST
48373: LIST
48374: LIST
48375: LIST
48376: LIST
48377: LIST
48378: LIST
48379: LIST
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48387: LD_ADDR_VAR 0 23
48391: PUSH
48392: LD_INT 0
48394: PUSH
48395: LD_INT 0
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 0
48404: PUSH
48405: LD_INT 1
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 1
48415: PUSH
48416: LD_INT 0
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_INT 1
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: LD_INT 0
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: NEG
48457: PUSH
48458: LD_INT 1
48460: NEG
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 1
48468: NEG
48469: PUSH
48470: LD_INT 2
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 0
48480: PUSH
48481: LD_INT 2
48483: NEG
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: LD_INT 1
48494: NEG
48495: PUSH
48496: EMPTY
48497: LIST
48498: LIST
48499: PUSH
48500: LD_INT 2
48502: PUSH
48503: LD_INT 0
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: PUSH
48510: LD_INT 2
48512: PUSH
48513: LD_INT 1
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 2
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 0
48542: PUSH
48543: LD_INT 2
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: LD_INT 1
48552: NEG
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: NEG
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 2
48586: NEG
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: LD_INT 3
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 3
48614: NEG
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 1
48622: PUSH
48623: LD_INT 2
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 2
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: EMPTY
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: LIST
48665: LIST
48666: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
48667: LD_ADDR_VAR 0 24
48671: PUSH
48672: LD_INT 0
48674: PUSH
48675: LD_INT 0
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 0
48684: PUSH
48685: LD_INT 1
48687: NEG
48688: PUSH
48689: EMPTY
48690: LIST
48691: LIST
48692: PUSH
48693: LD_INT 1
48695: PUSH
48696: LD_INT 0
48698: PUSH
48699: EMPTY
48700: LIST
48701: LIST
48702: PUSH
48703: LD_INT 1
48705: PUSH
48706: LD_INT 1
48708: PUSH
48709: EMPTY
48710: LIST
48711: LIST
48712: PUSH
48713: LD_INT 0
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: EMPTY
48720: LIST
48721: LIST
48722: PUSH
48723: LD_INT 1
48725: NEG
48726: PUSH
48727: LD_INT 0
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 1
48736: NEG
48737: PUSH
48738: LD_INT 1
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 1
48748: NEG
48749: PUSH
48750: LD_INT 2
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 1
48771: PUSH
48772: LD_INT 1
48774: NEG
48775: PUSH
48776: EMPTY
48777: LIST
48778: LIST
48779: PUSH
48780: LD_INT 2
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 2
48792: PUSH
48793: LD_INT 1
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 2
48802: PUSH
48803: LD_INT 2
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 1
48812: PUSH
48813: LD_INT 2
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: LD_INT 2
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 1
48832: NEG
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: LD_INT 2
48843: NEG
48844: PUSH
48845: LD_INT 0
48847: PUSH
48848: EMPTY
48849: LIST
48850: LIST
48851: PUSH
48852: LD_INT 2
48854: NEG
48855: PUSH
48856: LD_INT 1
48858: NEG
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 2
48866: NEG
48867: PUSH
48868: LD_INT 2
48870: NEG
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: PUSH
48876: LD_INT 1
48878: PUSH
48879: LD_INT 2
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 2
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: PUSH
48898: LD_INT 3
48900: PUSH
48901: LD_INT 1
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 3
48910: PUSH
48911: LD_INT 2
48913: PUSH
48914: EMPTY
48915: LIST
48916: LIST
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: LIST
48929: LIST
48930: LIST
48931: LIST
48932: LIST
48933: LIST
48934: LIST
48935: LIST
48936: LIST
48937: LIST
48938: LIST
48939: LIST
48940: LIST
48941: LIST
48942: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
48943: LD_ADDR_VAR 0 25
48947: PUSH
48948: LD_INT 0
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: LD_INT 1
48963: NEG
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: PUSH
48969: LD_INT 1
48971: PUSH
48972: LD_INT 0
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 1
48981: PUSH
48982: LD_INT 1
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 1
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 1
49001: NEG
49002: PUSH
49003: LD_INT 0
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: NEG
49013: PUSH
49014: LD_INT 1
49016: NEG
49017: PUSH
49018: EMPTY
49019: LIST
49020: LIST
49021: PUSH
49022: LD_INT 1
49024: NEG
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 0
49036: PUSH
49037: LD_INT 2
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 1
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 2
49058: PUSH
49059: LD_INT 0
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 2
49068: PUSH
49069: LD_INT 1
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: LD_INT 2
49081: PUSH
49082: EMPTY
49083: LIST
49084: LIST
49085: PUSH
49086: LD_INT 1
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: EMPTY
49103: LIST
49104: LIST
49105: PUSH
49106: LD_INT 1
49108: NEG
49109: PUSH
49110: LD_INT 1
49112: PUSH
49113: EMPTY
49114: LIST
49115: LIST
49116: PUSH
49117: LD_INT 2
49119: NEG
49120: PUSH
49121: LD_INT 0
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 2
49130: NEG
49131: PUSH
49132: LD_INT 1
49134: NEG
49135: PUSH
49136: EMPTY
49137: LIST
49138: LIST
49139: PUSH
49140: LD_INT 2
49142: NEG
49143: PUSH
49144: LD_INT 2
49146: NEG
49147: PUSH
49148: EMPTY
49149: LIST
49150: LIST
49151: PUSH
49152: LD_INT 3
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: PUSH
49162: LD_INT 3
49164: PUSH
49165: LD_INT 2
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: LD_INT 3
49177: PUSH
49178: EMPTY
49179: LIST
49180: LIST
49181: PUSH
49182: LD_INT 1
49184: PUSH
49185: LD_INT 3
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: LIST
49196: LIST
49197: LIST
49198: LIST
49199: LIST
49200: LIST
49201: LIST
49202: LIST
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: LIST
49208: LIST
49209: LIST
49210: LIST
49211: LIST
49212: LIST
49213: LIST
49214: LIST
49215: LIST
49216: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49217: LD_ADDR_VAR 0 26
49221: PUSH
49222: LD_INT 0
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 0
49234: PUSH
49235: LD_INT 1
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 1
49245: PUSH
49246: LD_INT 0
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: LD_INT 1
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: PUSH
49269: EMPTY
49270: LIST
49271: LIST
49272: PUSH
49273: LD_INT 1
49275: NEG
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: NEG
49287: PUSH
49288: LD_INT 1
49290: NEG
49291: PUSH
49292: EMPTY
49293: LIST
49294: LIST
49295: PUSH
49296: LD_INT 1
49298: NEG
49299: PUSH
49300: LD_INT 2
49302: NEG
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: LD_INT 2
49313: NEG
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 1
49324: NEG
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 2
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: EMPTY
49337: LIST
49338: LIST
49339: PUSH
49340: LD_INT 2
49342: PUSH
49343: LD_INT 1
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 2
49352: PUSH
49353: LD_INT 2
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 1
49362: PUSH
49363: LD_INT 2
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 0
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 1
49382: NEG
49383: PUSH
49384: LD_INT 1
49386: PUSH
49387: EMPTY
49388: LIST
49389: LIST
49390: PUSH
49391: LD_INT 2
49393: NEG
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 2
49404: NEG
49405: PUSH
49406: LD_INT 1
49408: NEG
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: LD_INT 2
49420: NEG
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 2
49428: PUSH
49429: LD_INT 3
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: LD_INT 3
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 1
49448: NEG
49449: PUSH
49450: LD_INT 2
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: NEG
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: EMPTY
49465: LIST
49466: LIST
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: LIST
49489: LIST
49490: LIST
49491: LIST
49492: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49493: LD_ADDR_VAR 0 27
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 0
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 1
49521: PUSH
49522: LD_INT 0
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: LD_INT 1
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 0
49541: PUSH
49542: LD_INT 1
49544: PUSH
49545: EMPTY
49546: LIST
49547: LIST
49548: PUSH
49549: LD_INT 1
49551: NEG
49552: PUSH
49553: LD_INT 0
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: LD_INT 1
49566: NEG
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: LD_INT 1
49574: NEG
49575: PUSH
49576: LD_INT 2
49578: NEG
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: PUSH
49584: LD_INT 0
49586: PUSH
49587: LD_INT 2
49589: NEG
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 1
49600: NEG
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 2
49608: PUSH
49609: LD_INT 0
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 2
49618: PUSH
49619: LD_INT 1
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 2
49628: PUSH
49629: LD_INT 2
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 1
49638: PUSH
49639: LD_INT 2
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: LD_INT 2
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: LD_INT 1
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: PUSH
49667: LD_INT 2
49669: NEG
49670: PUSH
49671: LD_INT 0
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: LD_INT 2
49680: NEG
49681: PUSH
49682: LD_INT 1
49684: NEG
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: NEG
49693: PUSH
49694: LD_INT 2
49696: NEG
49697: PUSH
49698: EMPTY
49699: LIST
49700: LIST
49701: PUSH
49702: LD_INT 1
49704: NEG
49705: PUSH
49706: LD_INT 2
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: NEG
49716: PUSH
49717: LD_INT 1
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: PUSH
49724: LD_INT 3
49726: NEG
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: EMPTY
49733: LIST
49734: LIST
49735: PUSH
49736: LD_INT 3
49738: NEG
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: LIST
49754: LIST
49755: LIST
49756: LIST
49757: LIST
49758: LIST
49759: LIST
49760: LIST
49761: LIST
49762: LIST
49763: LIST
49764: LIST
49765: LIST
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: LIST
49771: LIST
49772: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49773: LD_ADDR_VAR 0 28
49777: PUSH
49778: LD_INT 0
49780: PUSH
49781: LD_INT 0
49783: PUSH
49784: EMPTY
49785: LIST
49786: LIST
49787: PUSH
49788: LD_INT 0
49790: PUSH
49791: LD_INT 1
49793: NEG
49794: PUSH
49795: EMPTY
49796: LIST
49797: LIST
49798: PUSH
49799: LD_INT 1
49801: PUSH
49802: LD_INT 0
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 1
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 1
49831: NEG
49832: PUSH
49833: LD_INT 0
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: NEG
49843: PUSH
49844: LD_INT 1
49846: NEG
49847: PUSH
49848: EMPTY
49849: LIST
49850: LIST
49851: PUSH
49852: LD_INT 1
49854: NEG
49855: PUSH
49856: LD_INT 2
49858: NEG
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 2
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 1
49880: NEG
49881: PUSH
49882: EMPTY
49883: LIST
49884: LIST
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: LD_INT 0
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: LD_INT 1
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 2
49908: PUSH
49909: LD_INT 2
49911: PUSH
49912: EMPTY
49913: LIST
49914: LIST
49915: PUSH
49916: LD_INT 1
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 0
49928: PUSH
49929: LD_INT 2
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 1
49938: NEG
49939: PUSH
49940: LD_INT 1
49942: PUSH
49943: EMPTY
49944: LIST
49945: LIST
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: LD_INT 0
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 2
49960: NEG
49961: PUSH
49962: LD_INT 1
49964: NEG
49965: PUSH
49966: EMPTY
49967: LIST
49968: LIST
49969: PUSH
49970: LD_INT 2
49972: NEG
49973: PUSH
49974: LD_INT 2
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 2
49984: NEG
49985: PUSH
49986: LD_INT 3
49988: NEG
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: NEG
49997: PUSH
49998: LD_INT 3
50000: NEG
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 3
50008: NEG
50009: PUSH
50010: LD_INT 1
50012: NEG
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 3
50020: NEG
50021: PUSH
50022: LD_INT 2
50024: NEG
50025: PUSH
50026: EMPTY
50027: LIST
50028: LIST
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: LIST
50034: LIST
50035: LIST
50036: LIST
50037: LIST
50038: LIST
50039: LIST
50040: LIST
50041: LIST
50042: LIST
50043: LIST
50044: LIST
50045: LIST
50046: LIST
50047: LIST
50048: LIST
50049: LIST
50050: LIST
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50055: LD_ADDR_VAR 0 29
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 0
50065: PUSH
50066: EMPTY
50067: LIST
50068: LIST
50069: PUSH
50070: LD_INT 0
50072: PUSH
50073: LD_INT 1
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 1
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 1
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 1
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 0
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 1
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 1
50136: NEG
50137: PUSH
50138: LD_INT 2
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: LD_INT 2
50151: NEG
50152: PUSH
50153: EMPTY
50154: LIST
50155: LIST
50156: PUSH
50157: LD_INT 1
50159: PUSH
50160: LD_INT 1
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 0
50173: PUSH
50174: EMPTY
50175: LIST
50176: LIST
50177: PUSH
50178: LD_INT 2
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: PUSH
50191: LD_INT 2
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 0
50200: PUSH
50201: LD_INT 2
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: LD_INT 1
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 2
50221: NEG
50222: PUSH
50223: LD_INT 1
50225: NEG
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: PUSH
50231: LD_INT 2
50233: NEG
50234: PUSH
50235: LD_INT 2
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 2
50245: NEG
50246: PUSH
50247: LD_INT 3
50249: NEG
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 3
50268: PUSH
50269: LD_INT 1
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 1
50278: PUSH
50279: LD_INT 3
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: LD_INT 2
50292: PUSH
50293: EMPTY
50294: LIST
50295: LIST
50296: PUSH
50297: LD_INT 3
50299: NEG
50300: PUSH
50301: LD_INT 2
50303: NEG
50304: PUSH
50305: EMPTY
50306: LIST
50307: LIST
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: LIST
50313: LIST
50314: LIST
50315: LIST
50316: LIST
50317: LIST
50318: LIST
50319: LIST
50320: LIST
50321: LIST
50322: LIST
50323: LIST
50324: LIST
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50334: LD_ADDR_VAR 0 30
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: LD_INT 0
50344: PUSH
50345: EMPTY
50346: LIST
50347: LIST
50348: PUSH
50349: LD_INT 0
50351: PUSH
50352: LD_INT 1
50354: NEG
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: PUSH
50360: LD_INT 1
50362: PUSH
50363: LD_INT 0
50365: PUSH
50366: EMPTY
50367: LIST
50368: LIST
50369: PUSH
50370: LD_INT 1
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 0
50382: PUSH
50383: LD_INT 1
50385: PUSH
50386: EMPTY
50387: LIST
50388: LIST
50389: PUSH
50390: LD_INT 1
50392: NEG
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: EMPTY
50398: LIST
50399: LIST
50400: PUSH
50401: LD_INT 1
50403: NEG
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: EMPTY
50410: LIST
50411: LIST
50412: PUSH
50413: LD_INT 1
50415: NEG
50416: PUSH
50417: LD_INT 2
50419: NEG
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: LD_INT 0
50427: PUSH
50428: LD_INT 2
50430: NEG
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: PUSH
50439: LD_INT 1
50441: NEG
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 2
50449: PUSH
50450: LD_INT 0
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 2
50459: PUSH
50460: LD_INT 1
50462: PUSH
50463: EMPTY
50464: LIST
50465: LIST
50466: PUSH
50467: LD_INT 2
50469: PUSH
50470: LD_INT 2
50472: PUSH
50473: EMPTY
50474: LIST
50475: LIST
50476: PUSH
50477: LD_INT 1
50479: PUSH
50480: LD_INT 2
50482: PUSH
50483: EMPTY
50484: LIST
50485: LIST
50486: PUSH
50487: LD_INT 1
50489: NEG
50490: PUSH
50491: LD_INT 1
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: LD_INT 0
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 2
50511: NEG
50512: PUSH
50513: LD_INT 1
50515: NEG
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: NEG
50524: PUSH
50525: LD_INT 3
50527: NEG
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: LD_INT 1
50535: PUSH
50536: LD_INT 2
50538: NEG
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: PUSH
50544: LD_INT 3
50546: PUSH
50547: LD_INT 2
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: PUSH
50554: LD_INT 2
50556: PUSH
50557: LD_INT 3
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 2
50566: NEG
50567: PUSH
50568: LD_INT 1
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 3
50577: NEG
50578: PUSH
50579: LD_INT 1
50581: NEG
50582: PUSH
50583: EMPTY
50584: LIST
50585: LIST
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
50612: LD_ADDR_VAR 0 31
50616: PUSH
50617: LD_INT 0
50619: PUSH
50620: LD_INT 0
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: LD_INT 1
50632: NEG
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 0
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 1
50650: PUSH
50651: LD_INT 1
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: EMPTY
50665: LIST
50666: LIST
50667: PUSH
50668: LD_INT 1
50670: NEG
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: EMPTY
50676: LIST
50677: LIST
50678: PUSH
50679: LD_INT 1
50681: NEG
50682: PUSH
50683: LD_INT 1
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 1
50693: NEG
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: EMPTY
50700: LIST
50701: LIST
50702: PUSH
50703: LD_INT 1
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: EMPTY
50711: LIST
50712: LIST
50713: PUSH
50714: LD_INT 2
50716: PUSH
50717: LD_INT 0
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: PUSH
50727: LD_INT 1
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 2
50736: PUSH
50737: LD_INT 2
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: PUSH
50747: LD_INT 2
50749: PUSH
50750: EMPTY
50751: LIST
50752: LIST
50753: PUSH
50754: LD_INT 0
50756: PUSH
50757: LD_INT 2
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 1
50766: NEG
50767: PUSH
50768: LD_INT 1
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_INT 2
50777: NEG
50778: PUSH
50779: LD_INT 1
50781: NEG
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 2
50789: NEG
50790: PUSH
50791: LD_INT 2
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 2
50801: NEG
50802: PUSH
50803: LD_INT 3
50805: NEG
50806: PUSH
50807: EMPTY
50808: LIST
50809: LIST
50810: PUSH
50811: LD_INT 2
50813: PUSH
50814: LD_INT 1
50816: NEG
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 3
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 1
50834: PUSH
50835: LD_INT 3
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 1
50844: NEG
50845: PUSH
50846: LD_INT 2
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 3
50855: NEG
50856: PUSH
50857: LD_INT 2
50859: NEG
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50890: LD_ADDR_VAR 0 32
50894: PUSH
50895: LD_INT 0
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: EMPTY
50902: LIST
50903: LIST
50904: PUSH
50905: LD_INT 0
50907: PUSH
50908: LD_INT 1
50910: NEG
50911: PUSH
50912: EMPTY
50913: LIST
50914: LIST
50915: PUSH
50916: LD_INT 1
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 1
50928: PUSH
50929: LD_INT 1
50931: PUSH
50932: EMPTY
50933: LIST
50934: LIST
50935: PUSH
50936: LD_INT 0
50938: PUSH
50939: LD_INT 1
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: NEG
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: EMPTY
50954: LIST
50955: LIST
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: LD_INT 1
50963: NEG
50964: PUSH
50965: EMPTY
50966: LIST
50967: LIST
50968: PUSH
50969: LD_INT 1
50971: NEG
50972: PUSH
50973: LD_INT 2
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 0
50983: PUSH
50984: LD_INT 2
50986: NEG
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 1
50994: PUSH
50995: LD_INT 1
50997: NEG
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: LD_INT 1
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 2
51015: PUSH
51016: LD_INT 2
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 1
51025: PUSH
51026: LD_INT 2
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 0
51035: PUSH
51036: LD_INT 2
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 1
51045: NEG
51046: PUSH
51047: LD_INT 1
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: PUSH
51054: LD_INT 2
51056: NEG
51057: PUSH
51058: LD_INT 0
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: PUSH
51065: LD_INT 2
51067: NEG
51068: PUSH
51069: LD_INT 1
51071: NEG
51072: PUSH
51073: EMPTY
51074: LIST
51075: LIST
51076: PUSH
51077: LD_INT 1
51079: NEG
51080: PUSH
51081: LD_INT 3
51083: NEG
51084: PUSH
51085: EMPTY
51086: LIST
51087: LIST
51088: PUSH
51089: LD_INT 1
51091: PUSH
51092: LD_INT 2
51094: NEG
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 3
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 2
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 2
51122: NEG
51123: PUSH
51124: LD_INT 1
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 3
51133: NEG
51134: PUSH
51135: LD_INT 1
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: EMPTY
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: LIST
51155: LIST
51156: LIST
51157: LIST
51158: LIST
51159: LIST
51160: LIST
51161: LIST
51162: LIST
51163: LIST
51164: LIST
51165: LIST
51166: LIST
51167: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
51168: LD_ADDR_VAR 0 33
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: LD_INT 0
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: LD_INT 1
51188: NEG
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: LD_INT 0
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 1
51206: PUSH
51207: LD_INT 1
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 0
51216: PUSH
51217: LD_INT 1
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 1
51226: NEG
51227: PUSH
51228: LD_INT 0
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 1
51237: NEG
51238: PUSH
51239: LD_INT 1
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 1
51249: NEG
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 1
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 2
51272: PUSH
51273: LD_INT 0
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: EMPTY
51287: LIST
51288: LIST
51289: PUSH
51290: LD_INT 1
51292: PUSH
51293: LD_INT 2
51295: PUSH
51296: EMPTY
51297: LIST
51298: LIST
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: LD_INT 2
51305: PUSH
51306: EMPTY
51307: LIST
51308: LIST
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: EMPTY
51318: LIST
51319: LIST
51320: PUSH
51321: LD_INT 2
51323: NEG
51324: PUSH
51325: LD_INT 0
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 2
51346: NEG
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 2
51358: NEG
51359: PUSH
51360: LD_INT 3
51362: NEG
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 2
51370: PUSH
51371: LD_INT 1
51373: NEG
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PUSH
51379: LD_INT 3
51381: PUSH
51382: LD_INT 1
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 3
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 1
51401: NEG
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 3
51412: NEG
51413: PUSH
51414: LD_INT 2
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: EMPTY
51423: LIST
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51447: LD_ADDR_VAR 0 34
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 0
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 0
51464: PUSH
51465: LD_INT 1
51467: NEG
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: LD_INT 1
51475: PUSH
51476: LD_INT 0
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 1
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 0
51495: PUSH
51496: LD_INT 1
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 1
51505: NEG
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 1
51516: NEG
51517: PUSH
51518: LD_INT 1
51520: NEG
51521: PUSH
51522: EMPTY
51523: LIST
51524: LIST
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: PUSH
51530: LD_INT 2
51532: NEG
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 0
51540: PUSH
51541: LD_INT 2
51543: NEG
51544: PUSH
51545: EMPTY
51546: LIST
51547: LIST
51548: PUSH
51549: LD_INT 1
51551: PUSH
51552: LD_INT 1
51554: NEG
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 1
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: LD_INT 2
51572: PUSH
51573: LD_INT 2
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 1
51592: NEG
51593: PUSH
51594: LD_INT 1
51596: PUSH
51597: EMPTY
51598: LIST
51599: LIST
51600: PUSH
51601: LD_INT 2
51603: NEG
51604: PUSH
51605: LD_INT 0
51607: PUSH
51608: EMPTY
51609: LIST
51610: LIST
51611: PUSH
51612: LD_INT 2
51614: NEG
51615: PUSH
51616: LD_INT 1
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 2
51626: NEG
51627: PUSH
51628: LD_INT 2
51630: NEG
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: LD_INT 3
51642: NEG
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 1
51650: PUSH
51651: LD_INT 2
51653: NEG
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 3
51661: PUSH
51662: LD_INT 2
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 2
51671: PUSH
51672: LD_INT 3
51674: PUSH
51675: EMPTY
51676: LIST
51677: LIST
51678: PUSH
51679: LD_INT 2
51681: NEG
51682: PUSH
51683: LD_INT 1
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 3
51692: NEG
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: EMPTY
51699: LIST
51700: LIST
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: LIST
51717: LIST
51718: LIST
51719: LIST
51720: LIST
51721: LIST
51722: LIST
51723: LIST
51724: LIST
51725: LIST
51726: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
51727: LD_ADDR_VAR 0 35
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 0
51737: PUSH
51738: EMPTY
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 0
51744: PUSH
51745: LD_INT 1
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 0
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 1
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 0
51775: PUSH
51776: LD_INT 1
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 0
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 1
51796: NEG
51797: PUSH
51798: LD_INT 1
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 1
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 2
51818: NEG
51819: PUSH
51820: LD_INT 1
51822: NEG
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: EMPTY
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
51839: LD_ADDR_VAR 0 36
51843: PUSH
51844: LD_INT 0
51846: PUSH
51847: LD_INT 0
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 0
51856: PUSH
51857: LD_INT 1
51859: NEG
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: LD_INT 0
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: LD_INT 1
51877: PUSH
51878: LD_INT 1
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 1
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: NEG
51898: PUSH
51899: LD_INT 0
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: LD_INT 1
51912: NEG
51913: PUSH
51914: EMPTY
51915: LIST
51916: LIST
51917: PUSH
51918: LD_INT 1
51920: NEG
51921: PUSH
51922: LD_INT 2
51924: NEG
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: PUSH
51930: LD_INT 1
51932: PUSH
51933: LD_INT 2
51935: PUSH
51936: EMPTY
51937: LIST
51938: LIST
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
51951: LD_ADDR_VAR 0 37
51955: PUSH
51956: LD_INT 0
51958: PUSH
51959: LD_INT 0
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 0
51968: PUSH
51969: LD_INT 1
51971: NEG
51972: PUSH
51973: EMPTY
51974: LIST
51975: LIST
51976: PUSH
51977: LD_INT 1
51979: PUSH
51980: LD_INT 0
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 1
51989: PUSH
51990: LD_INT 1
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PUSH
51997: LD_INT 0
51999: PUSH
52000: LD_INT 1
52002: PUSH
52003: EMPTY
52004: LIST
52005: LIST
52006: PUSH
52007: LD_INT 1
52009: NEG
52010: PUSH
52011: LD_INT 0
52013: PUSH
52014: EMPTY
52015: LIST
52016: LIST
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: NEG
52044: PUSH
52045: LD_INT 1
52047: PUSH
52048: EMPTY
52049: LIST
52050: LIST
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
52063: LD_ADDR_VAR 0 38
52067: PUSH
52068: LD_INT 0
52070: PUSH
52071: LD_INT 0
52073: PUSH
52074: EMPTY
52075: LIST
52076: LIST
52077: PUSH
52078: LD_INT 0
52080: PUSH
52081: LD_INT 1
52083: NEG
52084: PUSH
52085: EMPTY
52086: LIST
52087: LIST
52088: PUSH
52089: LD_INT 1
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 1
52101: PUSH
52102: LD_INT 1
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 0
52111: PUSH
52112: LD_INT 1
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: NEG
52122: PUSH
52123: LD_INT 0
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: NEG
52133: PUSH
52134: LD_INT 1
52136: NEG
52137: PUSH
52138: EMPTY
52139: LIST
52140: LIST
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: LD_INT 1
52147: PUSH
52148: EMPTY
52149: LIST
52150: LIST
52151: PUSH
52152: LD_INT 2
52154: NEG
52155: PUSH
52156: LD_INT 1
52158: NEG
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: LIST
52168: LIST
52169: LIST
52170: LIST
52171: LIST
52172: LIST
52173: LIST
52174: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
52175: LD_ADDR_VAR 0 39
52179: PUSH
52180: LD_INT 0
52182: PUSH
52183: LD_INT 0
52185: PUSH
52186: EMPTY
52187: LIST
52188: LIST
52189: PUSH
52190: LD_INT 0
52192: PUSH
52193: LD_INT 1
52195: NEG
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 1
52203: PUSH
52204: LD_INT 0
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: PUSH
52214: LD_INT 1
52216: PUSH
52217: EMPTY
52218: LIST
52219: LIST
52220: PUSH
52221: LD_INT 0
52223: PUSH
52224: LD_INT 1
52226: PUSH
52227: EMPTY
52228: LIST
52229: LIST
52230: PUSH
52231: LD_INT 1
52233: NEG
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 1
52244: NEG
52245: PUSH
52246: LD_INT 1
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 1
52256: NEG
52257: PUSH
52258: LD_INT 2
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: LD_INT 2
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: LIST
52280: LIST
52281: LIST
52282: LIST
52283: LIST
52284: LIST
52285: LIST
52286: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
52287: LD_ADDR_VAR 0 40
52291: PUSH
52292: LD_INT 0
52294: PUSH
52295: LD_INT 0
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 0
52304: PUSH
52305: LD_INT 1
52307: NEG
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 0
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: EMPTY
52340: LIST
52341: LIST
52342: PUSH
52343: LD_INT 1
52345: NEG
52346: PUSH
52347: LD_INT 0
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 1
52356: NEG
52357: PUSH
52358: LD_INT 1
52360: NEG
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: PUSH
52369: LD_INT 1
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 1
52379: NEG
52380: PUSH
52381: LD_INT 1
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52399: LD_ADDR_VAR 0 41
52403: PUSH
52404: LD_INT 0
52406: PUSH
52407: LD_INT 0
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: LD_INT 0
52416: PUSH
52417: LD_INT 1
52419: NEG
52420: PUSH
52421: EMPTY
52422: LIST
52423: LIST
52424: PUSH
52425: LD_INT 1
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 1
52437: PUSH
52438: LD_INT 1
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 0
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 1
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 1
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 1
52480: NEG
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: LD_INT 1
52495: NEG
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 2
52503: PUSH
52504: LD_INT 0
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 2
52513: PUSH
52514: LD_INT 1
52516: PUSH
52517: EMPTY
52518: LIST
52519: LIST
52520: PUSH
52521: LD_INT 2
52523: PUSH
52524: LD_INT 2
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 1
52533: PUSH
52534: LD_INT 2
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 1
52543: NEG
52544: PUSH
52545: LD_INT 1
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 2
52554: NEG
52555: PUSH
52556: LD_INT 0
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 2
52565: NEG
52566: PUSH
52567: LD_INT 1
52569: NEG
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 2
52577: NEG
52578: PUSH
52579: LD_INT 2
52581: NEG
52582: PUSH
52583: EMPTY
52584: LIST
52585: LIST
52586: PUSH
52587: LD_INT 2
52589: NEG
52590: PUSH
52591: LD_INT 3
52593: NEG
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 2
52601: PUSH
52602: LD_INT 1
52604: NEG
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 3
52612: PUSH
52613: LD_INT 0
52615: PUSH
52616: EMPTY
52617: LIST
52618: LIST
52619: PUSH
52620: LD_INT 3
52622: PUSH
52623: LD_INT 1
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: PUSH
52630: LD_INT 3
52632: PUSH
52633: LD_INT 2
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 3
52642: PUSH
52643: LD_INT 3
52645: PUSH
52646: EMPTY
52647: LIST
52648: LIST
52649: PUSH
52650: LD_INT 2
52652: PUSH
52653: LD_INT 3
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 1
52666: PUSH
52667: EMPTY
52668: LIST
52669: LIST
52670: PUSH
52671: LD_INT 3
52673: NEG
52674: PUSH
52675: LD_INT 0
52677: PUSH
52678: EMPTY
52679: LIST
52680: LIST
52681: PUSH
52682: LD_INT 3
52684: NEG
52685: PUSH
52686: LD_INT 1
52688: NEG
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 3
52696: NEG
52697: PUSH
52698: LD_INT 2
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: LD_INT 3
52708: NEG
52709: PUSH
52710: LD_INT 3
52712: NEG
52713: PUSH
52714: EMPTY
52715: LIST
52716: LIST
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: LIST
52729: LIST
52730: LIST
52731: LIST
52732: LIST
52733: LIST
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: LIST
52739: LIST
52740: LIST
52741: LIST
52742: LIST
52743: LIST
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52749: LD_ADDR_VAR 0 42
52753: PUSH
52754: LD_INT 0
52756: PUSH
52757: LD_INT 0
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 1
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 1
52777: PUSH
52778: LD_INT 0
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: PUSH
52788: LD_INT 1
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 0
52797: PUSH
52798: LD_INT 1
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 1
52807: NEG
52808: PUSH
52809: LD_INT 0
52811: PUSH
52812: EMPTY
52813: LIST
52814: LIST
52815: PUSH
52816: LD_INT 1
52818: NEG
52819: PUSH
52820: LD_INT 1
52822: NEG
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 1
52830: NEG
52831: PUSH
52832: LD_INT 2
52834: NEG
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 2
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: LD_INT 1
52856: NEG
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 2
52864: PUSH
52865: LD_INT 1
52867: PUSH
52868: EMPTY
52869: LIST
52870: LIST
52871: PUSH
52872: LD_INT 2
52874: PUSH
52875: LD_INT 2
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: LD_INT 1
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: EMPTY
52889: LIST
52890: LIST
52891: PUSH
52892: LD_INT 0
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 1
52904: NEG
52905: PUSH
52906: LD_INT 1
52908: PUSH
52909: EMPTY
52910: LIST
52911: LIST
52912: PUSH
52913: LD_INT 2
52915: NEG
52916: PUSH
52917: LD_INT 1
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 2
52927: NEG
52928: PUSH
52929: LD_INT 2
52931: NEG
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 2
52939: NEG
52940: PUSH
52941: LD_INT 3
52943: NEG
52944: PUSH
52945: EMPTY
52946: LIST
52947: LIST
52948: PUSH
52949: LD_INT 1
52951: NEG
52952: PUSH
52953: LD_INT 3
52955: NEG
52956: PUSH
52957: EMPTY
52958: LIST
52959: LIST
52960: PUSH
52961: LD_INT 0
52963: PUSH
52964: LD_INT 3
52966: NEG
52967: PUSH
52968: EMPTY
52969: LIST
52970: LIST
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: LD_INT 2
52977: NEG
52978: PUSH
52979: EMPTY
52980: LIST
52981: LIST
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 3
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: LD_INT 2
53005: PUSH
53006: LD_INT 3
53008: PUSH
53009: EMPTY
53010: LIST
53011: LIST
53012: PUSH
53013: LD_INT 1
53015: PUSH
53016: LD_INT 3
53018: PUSH
53019: EMPTY
53020: LIST
53021: LIST
53022: PUSH
53023: LD_INT 0
53025: PUSH
53026: LD_INT 3
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: LD_INT 2
53039: PUSH
53040: EMPTY
53041: LIST
53042: LIST
53043: PUSH
53044: LD_INT 3
53046: NEG
53047: PUSH
53048: LD_INT 2
53050: NEG
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: LD_INT 3
53062: NEG
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: LIST
53078: LIST
53079: LIST
53080: LIST
53081: LIST
53082: LIST
53083: LIST
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53099: LD_ADDR_VAR 0 43
53103: PUSH
53104: LD_INT 0
53106: PUSH
53107: LD_INT 0
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: PUSH
53114: LD_INT 0
53116: PUSH
53117: LD_INT 1
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 1
53127: PUSH
53128: LD_INT 0
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 1
53137: PUSH
53138: LD_INT 1
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 1
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: NEG
53158: PUSH
53159: LD_INT 0
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 1
53168: NEG
53169: PUSH
53170: LD_INT 1
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: NEG
53181: PUSH
53182: LD_INT 2
53184: NEG
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 0
53192: PUSH
53193: LD_INT 2
53195: NEG
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 1
53203: PUSH
53204: LD_INT 1
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 2
53214: PUSH
53215: LD_INT 0
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: PUSH
53222: LD_INT 2
53224: PUSH
53225: LD_INT 1
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: PUSH
53235: LD_INT 2
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PUSH
53242: LD_INT 0
53244: PUSH
53245: LD_INT 2
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 1
53254: NEG
53255: PUSH
53256: LD_INT 1
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 2
53265: NEG
53266: PUSH
53267: LD_INT 0
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 2
53276: NEG
53277: PUSH
53278: LD_INT 1
53280: NEG
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: PUSH
53286: LD_INT 1
53288: NEG
53289: PUSH
53290: LD_INT 3
53292: NEG
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 0
53300: PUSH
53301: LD_INT 3
53303: NEG
53304: PUSH
53305: EMPTY
53306: LIST
53307: LIST
53308: PUSH
53309: LD_INT 1
53311: PUSH
53312: LD_INT 2
53314: NEG
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 2
53322: PUSH
53323: LD_INT 1
53325: NEG
53326: PUSH
53327: EMPTY
53328: LIST
53329: LIST
53330: PUSH
53331: LD_INT 3
53333: PUSH
53334: LD_INT 0
53336: PUSH
53337: EMPTY
53338: LIST
53339: LIST
53340: PUSH
53341: LD_INT 3
53343: PUSH
53344: LD_INT 1
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 1
53353: PUSH
53354: LD_INT 3
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 0
53363: PUSH
53364: LD_INT 3
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 1
53373: NEG
53374: PUSH
53375: LD_INT 2
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 2
53384: NEG
53385: PUSH
53386: LD_INT 1
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 3
53395: NEG
53396: PUSH
53397: LD_INT 0
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 3
53406: NEG
53407: PUSH
53408: LD_INT 1
53410: NEG
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53447: LD_ADDR_VAR 0 44
53451: PUSH
53452: LD_INT 0
53454: PUSH
53455: LD_INT 0
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 1
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 1
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 1
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: EMPTY
53490: LIST
53491: LIST
53492: PUSH
53493: LD_INT 0
53495: PUSH
53496: LD_INT 1
53498: PUSH
53499: EMPTY
53500: LIST
53501: LIST
53502: PUSH
53503: LD_INT 1
53505: NEG
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 1
53516: NEG
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: PUSH
53526: LD_INT 1
53528: NEG
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: EMPTY
53535: LIST
53536: LIST
53537: PUSH
53538: LD_INT 1
53540: PUSH
53541: LD_INT 1
53543: NEG
53544: PUSH
53545: EMPTY
53546: LIST
53547: LIST
53548: PUSH
53549: LD_INT 2
53551: PUSH
53552: LD_INT 0
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: LD_INT 1
53564: PUSH
53565: EMPTY
53566: LIST
53567: LIST
53568: PUSH
53569: LD_INT 2
53571: PUSH
53572: LD_INT 2
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 1
53581: PUSH
53582: LD_INT 2
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 1
53591: NEG
53592: PUSH
53593: LD_INT 1
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: LD_INT 0
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 2
53613: NEG
53614: PUSH
53615: LD_INT 1
53617: NEG
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: PUSH
53623: LD_INT 2
53625: NEG
53626: PUSH
53627: LD_INT 2
53629: NEG
53630: PUSH
53631: EMPTY
53632: LIST
53633: LIST
53634: PUSH
53635: LD_INT 2
53637: NEG
53638: PUSH
53639: LD_INT 3
53641: NEG
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 2
53649: PUSH
53650: LD_INT 1
53652: NEG
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 3
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 3
53670: PUSH
53671: LD_INT 1
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 3
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: EMPTY
53685: LIST
53686: LIST
53687: PUSH
53688: LD_INT 3
53690: PUSH
53691: LD_INT 3
53693: PUSH
53694: EMPTY
53695: LIST
53696: LIST
53697: PUSH
53698: LD_INT 2
53700: PUSH
53701: LD_INT 3
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: PUSH
53708: LD_INT 2
53710: NEG
53711: PUSH
53712: LD_INT 1
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: LD_INT 0
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 3
53732: NEG
53733: PUSH
53734: LD_INT 1
53736: NEG
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 3
53744: NEG
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: PUSH
53754: LD_INT 3
53756: NEG
53757: PUSH
53758: LD_INT 3
53760: NEG
53761: PUSH
53762: EMPTY
53763: LIST
53764: LIST
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53797: LD_ADDR_VAR 0 45
53801: PUSH
53802: LD_INT 0
53804: PUSH
53805: LD_INT 0
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 0
53814: PUSH
53815: LD_INT 1
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 1
53825: PUSH
53826: LD_INT 0
53828: PUSH
53829: EMPTY
53830: LIST
53831: LIST
53832: PUSH
53833: LD_INT 1
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 1
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PUSH
53853: LD_INT 1
53855: NEG
53856: PUSH
53857: LD_INT 0
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: PUSH
53864: LD_INT 1
53866: NEG
53867: PUSH
53868: LD_INT 1
53870: NEG
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_INT 1
53878: NEG
53879: PUSH
53880: LD_INT 2
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 0
53890: PUSH
53891: LD_INT 2
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: LD_INT 1
53901: PUSH
53902: LD_INT 1
53904: NEG
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 1
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: LD_INT 2
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 2
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 2
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 1
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 2
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 2
53975: NEG
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 2
53987: NEG
53988: PUSH
53989: LD_INT 3
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 1
53999: NEG
54000: PUSH
54001: LD_INT 3
54003: NEG
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: PUSH
54009: LD_INT 0
54011: PUSH
54012: LD_INT 3
54014: NEG
54015: PUSH
54016: EMPTY
54017: LIST
54018: LIST
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: LD_INT 2
54025: NEG
54026: PUSH
54027: EMPTY
54028: LIST
54029: LIST
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: LD_INT 2
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 3
54043: PUSH
54044: LD_INT 3
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 2
54053: PUSH
54054: LD_INT 3
54056: PUSH
54057: EMPTY
54058: LIST
54059: LIST
54060: PUSH
54061: LD_INT 1
54063: PUSH
54064: LD_INT 3
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 0
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 2
54087: PUSH
54088: EMPTY
54089: LIST
54090: LIST
54091: PUSH
54092: LD_INT 3
54094: NEG
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: NEG
54107: PUSH
54108: LD_INT 3
54110: NEG
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: PUSH
54116: EMPTY
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
54147: LD_ADDR_VAR 0 46
54151: PUSH
54152: LD_INT 0
54154: PUSH
54155: LD_INT 0
54157: PUSH
54158: EMPTY
54159: LIST
54160: LIST
54161: PUSH
54162: LD_INT 0
54164: PUSH
54165: LD_INT 1
54167: NEG
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PUSH
54173: LD_INT 1
54175: PUSH
54176: LD_INT 0
54178: PUSH
54179: EMPTY
54180: LIST
54181: LIST
54182: PUSH
54183: LD_INT 1
54185: PUSH
54186: LD_INT 1
54188: PUSH
54189: EMPTY
54190: LIST
54191: LIST
54192: PUSH
54193: LD_INT 0
54195: PUSH
54196: LD_INT 1
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 1
54205: NEG
54206: PUSH
54207: LD_INT 0
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: PUSH
54214: LD_INT 1
54216: NEG
54217: PUSH
54218: LD_INT 1
54220: NEG
54221: PUSH
54222: EMPTY
54223: LIST
54224: LIST
54225: PUSH
54226: LD_INT 1
54228: NEG
54229: PUSH
54230: LD_INT 2
54232: NEG
54233: PUSH
54234: EMPTY
54235: LIST
54236: LIST
54237: PUSH
54238: LD_INT 0
54240: PUSH
54241: LD_INT 2
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: LD_INT 1
54254: NEG
54255: PUSH
54256: EMPTY
54257: LIST
54258: LIST
54259: PUSH
54260: LD_INT 2
54262: PUSH
54263: LD_INT 0
54265: PUSH
54266: EMPTY
54267: LIST
54268: LIST
54269: PUSH
54270: LD_INT 2
54272: PUSH
54273: LD_INT 1
54275: PUSH
54276: EMPTY
54277: LIST
54278: LIST
54279: PUSH
54280: LD_INT 1
54282: PUSH
54283: LD_INT 2
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 0
54292: PUSH
54293: LD_INT 2
54295: PUSH
54296: EMPTY
54297: LIST
54298: LIST
54299: PUSH
54300: LD_INT 1
54302: NEG
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: EMPTY
54308: LIST
54309: LIST
54310: PUSH
54311: LD_INT 2
54313: NEG
54314: PUSH
54315: LD_INT 0
54317: PUSH
54318: EMPTY
54319: LIST
54320: LIST
54321: PUSH
54322: LD_INT 2
54324: NEG
54325: PUSH
54326: LD_INT 1
54328: NEG
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: PUSH
54334: LD_INT 1
54336: NEG
54337: PUSH
54338: LD_INT 3
54340: NEG
54341: PUSH
54342: EMPTY
54343: LIST
54344: LIST
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: LD_INT 3
54351: NEG
54352: PUSH
54353: EMPTY
54354: LIST
54355: LIST
54356: PUSH
54357: LD_INT 1
54359: PUSH
54360: LD_INT 2
54362: NEG
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 1
54373: NEG
54374: PUSH
54375: EMPTY
54376: LIST
54377: LIST
54378: PUSH
54379: LD_INT 3
54381: PUSH
54382: LD_INT 0
54384: PUSH
54385: EMPTY
54386: LIST
54387: LIST
54388: PUSH
54389: LD_INT 3
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 1
54401: PUSH
54402: LD_INT 3
54404: PUSH
54405: EMPTY
54406: LIST
54407: LIST
54408: PUSH
54409: LD_INT 0
54411: PUSH
54412: LD_INT 3
54414: PUSH
54415: EMPTY
54416: LIST
54417: LIST
54418: PUSH
54419: LD_INT 1
54421: NEG
54422: PUSH
54423: LD_INT 2
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_INT 2
54432: NEG
54433: PUSH
54434: LD_INT 1
54436: PUSH
54437: EMPTY
54438: LIST
54439: LIST
54440: PUSH
54441: LD_INT 3
54443: NEG
54444: PUSH
54445: LD_INT 0
54447: PUSH
54448: EMPTY
54449: LIST
54450: LIST
54451: PUSH
54452: LD_INT 3
54454: NEG
54455: PUSH
54456: LD_INT 1
54458: NEG
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: LIST
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
54495: LD_ADDR_VAR 0 47
54499: PUSH
54500: LD_INT 0
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: LD_INT 1
54515: NEG
54516: PUSH
54517: EMPTY
54518: LIST
54519: LIST
54520: PUSH
54521: LD_INT 1
54523: PUSH
54524: LD_INT 0
54526: PUSH
54527: EMPTY
54528: LIST
54529: LIST
54530: PUSH
54531: LD_INT 1
54533: PUSH
54534: LD_INT 1
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 1
54546: PUSH
54547: EMPTY
54548: LIST
54549: LIST
54550: PUSH
54551: LD_INT 1
54553: NEG
54554: PUSH
54555: LD_INT 0
54557: PUSH
54558: EMPTY
54559: LIST
54560: LIST
54561: PUSH
54562: LD_INT 1
54564: NEG
54565: PUSH
54566: LD_INT 1
54568: NEG
54569: PUSH
54570: EMPTY
54571: LIST
54572: LIST
54573: PUSH
54574: LD_INT 1
54576: NEG
54577: PUSH
54578: LD_INT 2
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 0
54588: PUSH
54589: LD_INT 2
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 1
54599: PUSH
54600: LD_INT 1
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 2
54610: NEG
54611: PUSH
54612: LD_INT 1
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 2
54622: NEG
54623: PUSH
54624: LD_INT 2
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: LIST
54645: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
54646: LD_ADDR_VAR 0 48
54650: PUSH
54651: LD_INT 0
54653: PUSH
54654: LD_INT 0
54656: PUSH
54657: EMPTY
54658: LIST
54659: LIST
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 1
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 1
54684: PUSH
54685: LD_INT 1
54687: PUSH
54688: EMPTY
54689: LIST
54690: LIST
54691: PUSH
54692: LD_INT 0
54694: PUSH
54695: LD_INT 1
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: PUSH
54702: LD_INT 1
54704: NEG
54705: PUSH
54706: LD_INT 0
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 1
54715: NEG
54716: PUSH
54717: LD_INT 1
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: NEG
54728: PUSH
54729: LD_INT 2
54731: NEG
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 0
54739: PUSH
54740: LD_INT 2
54742: NEG
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 1
54750: PUSH
54751: LD_INT 1
54753: NEG
54754: PUSH
54755: EMPTY
54756: LIST
54757: LIST
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: LD_INT 0
54764: PUSH
54765: EMPTY
54766: LIST
54767: LIST
54768: PUSH
54769: LD_INT 2
54771: PUSH
54772: LD_INT 1
54774: PUSH
54775: EMPTY
54776: LIST
54777: LIST
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
54793: LD_ADDR_VAR 0 49
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: LD_INT 0
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: LD_INT 1
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 0
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: PUSH
54829: LD_INT 1
54831: PUSH
54832: LD_INT 1
54834: PUSH
54835: EMPTY
54836: LIST
54837: LIST
54838: PUSH
54839: LD_INT 0
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 1
54851: NEG
54852: PUSH
54853: LD_INT 0
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 1
54862: NEG
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 1
54874: PUSH
54875: LD_INT 1
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: PUSH
54886: LD_INT 0
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 2
54895: PUSH
54896: LD_INT 1
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 1
54915: PUSH
54916: LD_INT 2
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
54937: LD_ADDR_VAR 0 50
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: LD_INT 0
54947: PUSH
54948: EMPTY
54949: LIST
54950: LIST
54951: PUSH
54952: LD_INT 0
54954: PUSH
54955: LD_INT 1
54957: NEG
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 1
54965: PUSH
54966: LD_INT 0
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 1
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 1
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 1
54995: NEG
54996: PUSH
54997: LD_INT 0
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 1
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 1
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: LD_INT 2
55031: PUSH
55032: EMPTY
55033: LIST
55034: LIST
55035: PUSH
55036: LD_INT 1
55038: PUSH
55039: LD_INT 2
55041: PUSH
55042: EMPTY
55043: LIST
55044: LIST
55045: PUSH
55046: LD_INT 0
55048: PUSH
55049: LD_INT 2
55051: PUSH
55052: EMPTY
55053: LIST
55054: LIST
55055: PUSH
55056: LD_INT 1
55058: NEG
55059: PUSH
55060: LD_INT 1
55062: PUSH
55063: EMPTY
55064: LIST
55065: LIST
55066: PUSH
55067: EMPTY
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55081: LD_ADDR_VAR 0 51
55085: PUSH
55086: LD_INT 0
55088: PUSH
55089: LD_INT 0
55091: PUSH
55092: EMPTY
55093: LIST
55094: LIST
55095: PUSH
55096: LD_INT 0
55098: PUSH
55099: LD_INT 1
55101: NEG
55102: PUSH
55103: EMPTY
55104: LIST
55105: LIST
55106: PUSH
55107: LD_INT 1
55109: PUSH
55110: LD_INT 0
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 1
55119: PUSH
55120: LD_INT 1
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 0
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 1
55139: NEG
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 1
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 1
55162: PUSH
55163: LD_INT 2
55165: PUSH
55166: EMPTY
55167: LIST
55168: LIST
55169: PUSH
55170: LD_INT 0
55172: PUSH
55173: LD_INT 2
55175: PUSH
55176: EMPTY
55177: LIST
55178: LIST
55179: PUSH
55180: LD_INT 1
55182: NEG
55183: PUSH
55184: LD_INT 1
55186: PUSH
55187: EMPTY
55188: LIST
55189: LIST
55190: PUSH
55191: LD_INT 2
55193: NEG
55194: PUSH
55195: LD_INT 0
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 2
55204: NEG
55205: PUSH
55206: LD_INT 1
55208: NEG
55209: PUSH
55210: EMPTY
55211: LIST
55212: LIST
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55228: LD_ADDR_VAR 0 52
55232: PUSH
55233: LD_INT 0
55235: PUSH
55236: LD_INT 0
55238: PUSH
55239: EMPTY
55240: LIST
55241: LIST
55242: PUSH
55243: LD_INT 0
55245: PUSH
55246: LD_INT 1
55248: NEG
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: PUSH
55254: LD_INT 1
55256: PUSH
55257: LD_INT 0
55259: PUSH
55260: EMPTY
55261: LIST
55262: LIST
55263: PUSH
55264: LD_INT 1
55266: PUSH
55267: LD_INT 1
55269: PUSH
55270: EMPTY
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 0
55276: PUSH
55277: LD_INT 1
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: PUSH
55284: LD_INT 1
55286: NEG
55287: PUSH
55288: LD_INT 0
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: LD_INT 1
55301: NEG
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: PUSH
55307: LD_INT 1
55309: NEG
55310: PUSH
55311: LD_INT 2
55313: NEG
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: PUSH
55319: LD_INT 1
55321: NEG
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 2
55332: NEG
55333: PUSH
55334: LD_INT 0
55336: PUSH
55337: EMPTY
55338: LIST
55339: LIST
55340: PUSH
55341: LD_INT 2
55343: NEG
55344: PUSH
55345: LD_INT 1
55347: NEG
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: PUSH
55353: LD_INT 2
55355: NEG
55356: PUSH
55357: LD_INT 2
55359: NEG
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: PUSH
55365: EMPTY
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55379: LD_ADDR_VAR 0 53
55383: PUSH
55384: LD_INT 0
55386: PUSH
55387: LD_INT 0
55389: PUSH
55390: EMPTY
55391: LIST
55392: LIST
55393: PUSH
55394: LD_INT 0
55396: PUSH
55397: LD_INT 1
55399: NEG
55400: PUSH
55401: EMPTY
55402: LIST
55403: LIST
55404: PUSH
55405: LD_INT 1
55407: PUSH
55408: LD_INT 0
55410: PUSH
55411: EMPTY
55412: LIST
55413: LIST
55414: PUSH
55415: LD_INT 1
55417: PUSH
55418: LD_INT 1
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 0
55427: PUSH
55428: LD_INT 1
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: NEG
55438: PUSH
55439: LD_INT 0
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 1
55448: NEG
55449: PUSH
55450: LD_INT 1
55452: NEG
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: LD_INT 1
55460: NEG
55461: PUSH
55462: LD_INT 2
55464: NEG
55465: PUSH
55466: EMPTY
55467: LIST
55468: LIST
55469: PUSH
55470: LD_INT 0
55472: PUSH
55473: LD_INT 2
55475: NEG
55476: PUSH
55477: EMPTY
55478: LIST
55479: LIST
55480: PUSH
55481: LD_INT 1
55483: PUSH
55484: LD_INT 1
55486: NEG
55487: PUSH
55488: EMPTY
55489: LIST
55490: LIST
55491: PUSH
55492: LD_INT 2
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 2
55504: PUSH
55505: LD_INT 1
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 2
55514: PUSH
55515: LD_INT 2
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PUSH
55522: LD_INT 1
55524: PUSH
55525: LD_INT 2
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: PUSH
55532: LD_INT 0
55534: PUSH
55535: LD_INT 2
55537: PUSH
55538: EMPTY
55539: LIST
55540: LIST
55541: PUSH
55542: LD_INT 1
55544: NEG
55545: PUSH
55546: LD_INT 1
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PUSH
55553: LD_INT 2
55555: NEG
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: EMPTY
55561: LIST
55562: LIST
55563: PUSH
55564: LD_INT 2
55566: NEG
55567: PUSH
55568: LD_INT 1
55570: NEG
55571: PUSH
55572: EMPTY
55573: LIST
55574: LIST
55575: PUSH
55576: LD_INT 2
55578: NEG
55579: PUSH
55580: LD_INT 2
55582: NEG
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: LIST
55598: LIST
55599: LIST
55600: LIST
55601: LIST
55602: LIST
55603: LIST
55604: LIST
55605: LIST
55606: LIST
55607: LIST
55608: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55609: LD_ADDR_VAR 0 54
55613: PUSH
55614: LD_INT 0
55616: PUSH
55617: LD_INT 0
55619: PUSH
55620: EMPTY
55621: LIST
55622: LIST
55623: PUSH
55624: LD_INT 0
55626: PUSH
55627: LD_INT 1
55629: NEG
55630: PUSH
55631: EMPTY
55632: LIST
55633: LIST
55634: PUSH
55635: LD_INT 1
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: EMPTY
55642: LIST
55643: LIST
55644: PUSH
55645: LD_INT 1
55647: PUSH
55648: LD_INT 1
55650: PUSH
55651: EMPTY
55652: LIST
55653: LIST
55654: PUSH
55655: LD_INT 0
55657: PUSH
55658: LD_INT 1
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: PUSH
55665: LD_INT 1
55667: NEG
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: EMPTY
55673: LIST
55674: LIST
55675: PUSH
55676: LD_INT 1
55678: NEG
55679: PUSH
55680: LD_INT 1
55682: NEG
55683: PUSH
55684: EMPTY
55685: LIST
55686: LIST
55687: PUSH
55688: LD_INT 1
55690: NEG
55691: PUSH
55692: LD_INT 2
55694: NEG
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 0
55702: PUSH
55703: LD_INT 2
55705: NEG
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 1
55713: PUSH
55714: LD_INT 1
55716: NEG
55717: PUSH
55718: EMPTY
55719: LIST
55720: LIST
55721: PUSH
55722: LD_INT 2
55724: PUSH
55725: LD_INT 0
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: LD_INT 1
55737: PUSH
55738: EMPTY
55739: LIST
55740: LIST
55741: PUSH
55742: LD_INT 2
55744: PUSH
55745: LD_INT 2
55747: PUSH
55748: EMPTY
55749: LIST
55750: LIST
55751: PUSH
55752: LD_INT 1
55754: PUSH
55755: LD_INT 2
55757: PUSH
55758: EMPTY
55759: LIST
55760: LIST
55761: PUSH
55762: LD_INT 0
55764: PUSH
55765: LD_INT 2
55767: PUSH
55768: EMPTY
55769: LIST
55770: LIST
55771: PUSH
55772: LD_INT 1
55774: NEG
55775: PUSH
55776: LD_INT 1
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: PUSH
55783: LD_INT 2
55785: NEG
55786: PUSH
55787: LD_INT 0
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: PUSH
55794: LD_INT 2
55796: NEG
55797: PUSH
55798: LD_INT 1
55800: NEG
55801: PUSH
55802: EMPTY
55803: LIST
55804: LIST
55805: PUSH
55806: LD_INT 2
55808: NEG
55809: PUSH
55810: LD_INT 2
55812: NEG
55813: PUSH
55814: EMPTY
55815: LIST
55816: LIST
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: LIST
55822: LIST
55823: LIST
55824: LIST
55825: LIST
55826: LIST
55827: LIST
55828: LIST
55829: LIST
55830: LIST
55831: LIST
55832: LIST
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: LIST
55838: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55839: LD_ADDR_VAR 0 55
55843: PUSH
55844: LD_INT 0
55846: PUSH
55847: LD_INT 0
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: PUSH
55854: LD_INT 0
55856: PUSH
55857: LD_INT 1
55859: NEG
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: PUSH
55865: LD_INT 1
55867: PUSH
55868: LD_INT 0
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: PUSH
55875: LD_INT 1
55877: PUSH
55878: LD_INT 1
55880: PUSH
55881: EMPTY
55882: LIST
55883: LIST
55884: PUSH
55885: LD_INT 0
55887: PUSH
55888: LD_INT 1
55890: PUSH
55891: EMPTY
55892: LIST
55893: LIST
55894: PUSH
55895: LD_INT 1
55897: NEG
55898: PUSH
55899: LD_INT 0
55901: PUSH
55902: EMPTY
55903: LIST
55904: LIST
55905: PUSH
55906: LD_INT 1
55908: NEG
55909: PUSH
55910: LD_INT 1
55912: NEG
55913: PUSH
55914: EMPTY
55915: LIST
55916: LIST
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: LD_INT 2
55924: NEG
55925: PUSH
55926: EMPTY
55927: LIST
55928: LIST
55929: PUSH
55930: LD_INT 0
55932: PUSH
55933: LD_INT 2
55935: NEG
55936: PUSH
55937: EMPTY
55938: LIST
55939: LIST
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: LD_INT 1
55946: NEG
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 2
55954: PUSH
55955: LD_INT 0
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 2
55964: PUSH
55965: LD_INT 1
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: LD_INT 2
55974: PUSH
55975: LD_INT 2
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PUSH
55982: LD_INT 1
55984: PUSH
55985: LD_INT 2
55987: PUSH
55988: EMPTY
55989: LIST
55990: LIST
55991: PUSH
55992: LD_INT 0
55994: PUSH
55995: LD_INT 2
55997: PUSH
55998: EMPTY
55999: LIST
56000: LIST
56001: PUSH
56002: LD_INT 1
56004: NEG
56005: PUSH
56006: LD_INT 1
56008: PUSH
56009: EMPTY
56010: LIST
56011: LIST
56012: PUSH
56013: LD_INT 2
56015: NEG
56016: PUSH
56017: LD_INT 0
56019: PUSH
56020: EMPTY
56021: LIST
56022: LIST
56023: PUSH
56024: LD_INT 2
56026: NEG
56027: PUSH
56028: LD_INT 1
56030: NEG
56031: PUSH
56032: EMPTY
56033: LIST
56034: LIST
56035: PUSH
56036: LD_INT 2
56038: NEG
56039: PUSH
56040: LD_INT 2
56042: NEG
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: LIST
56052: LIST
56053: LIST
56054: LIST
56055: LIST
56056: LIST
56057: LIST
56058: LIST
56059: LIST
56060: LIST
56061: LIST
56062: LIST
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: LIST
56068: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56069: LD_ADDR_VAR 0 56
56073: PUSH
56074: LD_INT 0
56076: PUSH
56077: LD_INT 0
56079: PUSH
56080: EMPTY
56081: LIST
56082: LIST
56083: PUSH
56084: LD_INT 0
56086: PUSH
56087: LD_INT 1
56089: NEG
56090: PUSH
56091: EMPTY
56092: LIST
56093: LIST
56094: PUSH
56095: LD_INT 1
56097: PUSH
56098: LD_INT 0
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: LD_INT 1
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: PUSH
56115: LD_INT 0
56117: PUSH
56118: LD_INT 1
56120: PUSH
56121: EMPTY
56122: LIST
56123: LIST
56124: PUSH
56125: LD_INT 1
56127: NEG
56128: PUSH
56129: LD_INT 0
56131: PUSH
56132: EMPTY
56133: LIST
56134: LIST
56135: PUSH
56136: LD_INT 1
56138: NEG
56139: PUSH
56140: LD_INT 1
56142: NEG
56143: PUSH
56144: EMPTY
56145: LIST
56146: LIST
56147: PUSH
56148: LD_INT 1
56150: NEG
56151: PUSH
56152: LD_INT 2
56154: NEG
56155: PUSH
56156: EMPTY
56157: LIST
56158: LIST
56159: PUSH
56160: LD_INT 0
56162: PUSH
56163: LD_INT 2
56165: NEG
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: PUSH
56171: LD_INT 1
56173: PUSH
56174: LD_INT 1
56176: NEG
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PUSH
56182: LD_INT 2
56184: PUSH
56185: LD_INT 0
56187: PUSH
56188: EMPTY
56189: LIST
56190: LIST
56191: PUSH
56192: LD_INT 2
56194: PUSH
56195: LD_INT 1
56197: PUSH
56198: EMPTY
56199: LIST
56200: LIST
56201: PUSH
56202: LD_INT 2
56204: PUSH
56205: LD_INT 2
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PUSH
56212: LD_INT 1
56214: PUSH
56215: LD_INT 2
56217: PUSH
56218: EMPTY
56219: LIST
56220: LIST
56221: PUSH
56222: LD_INT 0
56224: PUSH
56225: LD_INT 2
56227: PUSH
56228: EMPTY
56229: LIST
56230: LIST
56231: PUSH
56232: LD_INT 1
56234: NEG
56235: PUSH
56236: LD_INT 1
56238: PUSH
56239: EMPTY
56240: LIST
56241: LIST
56242: PUSH
56243: LD_INT 2
56245: NEG
56246: PUSH
56247: LD_INT 0
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 2
56256: NEG
56257: PUSH
56258: LD_INT 1
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 2
56268: NEG
56269: PUSH
56270: LD_INT 2
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56299: LD_ADDR_VAR 0 57
56303: PUSH
56304: LD_INT 0
56306: PUSH
56307: LD_INT 0
56309: PUSH
56310: EMPTY
56311: LIST
56312: LIST
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 1
56319: NEG
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 1
56327: PUSH
56328: LD_INT 0
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 1
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 0
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 1
56357: NEG
56358: PUSH
56359: LD_INT 0
56361: PUSH
56362: EMPTY
56363: LIST
56364: LIST
56365: PUSH
56366: LD_INT 1
56368: NEG
56369: PUSH
56370: LD_INT 1
56372: NEG
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: PUSH
56378: LD_INT 1
56380: NEG
56381: PUSH
56382: LD_INT 2
56384: NEG
56385: PUSH
56386: EMPTY
56387: LIST
56388: LIST
56389: PUSH
56390: LD_INT 0
56392: PUSH
56393: LD_INT 2
56395: NEG
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: PUSH
56401: LD_INT 1
56403: PUSH
56404: LD_INT 1
56406: NEG
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: PUSH
56412: LD_INT 2
56414: PUSH
56415: LD_INT 0
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 0
56479: PUSH
56480: EMPTY
56481: LIST
56482: LIST
56483: PUSH
56484: LD_INT 2
56486: NEG
56487: PUSH
56488: LD_INT 1
56490: NEG
56491: PUSH
56492: EMPTY
56493: LIST
56494: LIST
56495: PUSH
56496: LD_INT 2
56498: NEG
56499: PUSH
56500: LD_INT 2
56502: NEG
56503: PUSH
56504: EMPTY
56505: LIST
56506: LIST
56507: PUSH
56508: EMPTY
56509: LIST
56510: LIST
56511: LIST
56512: LIST
56513: LIST
56514: LIST
56515: LIST
56516: LIST
56517: LIST
56518: LIST
56519: LIST
56520: LIST
56521: LIST
56522: LIST
56523: LIST
56524: LIST
56525: LIST
56526: LIST
56527: LIST
56528: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
56529: LD_ADDR_VAR 0 58
56533: PUSH
56534: LD_INT 0
56536: PUSH
56537: LD_INT 0
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PUSH
56544: LD_INT 0
56546: PUSH
56547: LD_INT 1
56549: NEG
56550: PUSH
56551: EMPTY
56552: LIST
56553: LIST
56554: PUSH
56555: LD_INT 1
56557: PUSH
56558: LD_INT 0
56560: PUSH
56561: EMPTY
56562: LIST
56563: LIST
56564: PUSH
56565: LD_INT 1
56567: PUSH
56568: LD_INT 1
56570: PUSH
56571: EMPTY
56572: LIST
56573: LIST
56574: PUSH
56575: LD_INT 0
56577: PUSH
56578: LD_INT 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 1
56587: NEG
56588: PUSH
56589: LD_INT 0
56591: PUSH
56592: EMPTY
56593: LIST
56594: LIST
56595: PUSH
56596: LD_INT 1
56598: NEG
56599: PUSH
56600: LD_INT 1
56602: NEG
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: PUSH
56608: LD_INT 1
56610: NEG
56611: PUSH
56612: LD_INT 2
56614: NEG
56615: PUSH
56616: EMPTY
56617: LIST
56618: LIST
56619: PUSH
56620: LD_INT 0
56622: PUSH
56623: LD_INT 2
56625: NEG
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: LD_INT 1
56633: PUSH
56634: LD_INT 1
56636: NEG
56637: PUSH
56638: EMPTY
56639: LIST
56640: LIST
56641: PUSH
56642: LD_INT 2
56644: PUSH
56645: LD_INT 0
56647: PUSH
56648: EMPTY
56649: LIST
56650: LIST
56651: PUSH
56652: LD_INT 2
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PUSH
56662: LD_INT 2
56664: PUSH
56665: LD_INT 2
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: PUSH
56672: LD_INT 1
56674: PUSH
56675: LD_INT 2
56677: PUSH
56678: EMPTY
56679: LIST
56680: LIST
56681: PUSH
56682: LD_INT 0
56684: PUSH
56685: LD_INT 2
56687: PUSH
56688: EMPTY
56689: LIST
56690: LIST
56691: PUSH
56692: LD_INT 1
56694: NEG
56695: PUSH
56696: LD_INT 1
56698: PUSH
56699: EMPTY
56700: LIST
56701: LIST
56702: PUSH
56703: LD_INT 2
56705: NEG
56706: PUSH
56707: LD_INT 0
56709: PUSH
56710: EMPTY
56711: LIST
56712: LIST
56713: PUSH
56714: LD_INT 2
56716: NEG
56717: PUSH
56718: LD_INT 1
56720: NEG
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 2
56728: NEG
56729: PUSH
56730: LD_INT 2
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: EMPTY
56739: LIST
56740: LIST
56741: LIST
56742: LIST
56743: LIST
56744: LIST
56745: LIST
56746: LIST
56747: LIST
56748: LIST
56749: LIST
56750: LIST
56751: LIST
56752: LIST
56753: LIST
56754: LIST
56755: LIST
56756: LIST
56757: LIST
56758: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56759: LD_ADDR_VAR 0 59
56763: PUSH
56764: LD_INT 0
56766: PUSH
56767: LD_INT 0
56769: PUSH
56770: EMPTY
56771: LIST
56772: LIST
56773: PUSH
56774: LD_INT 0
56776: PUSH
56777: LD_INT 1
56779: NEG
56780: PUSH
56781: EMPTY
56782: LIST
56783: LIST
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: LD_INT 0
56790: PUSH
56791: EMPTY
56792: LIST
56793: LIST
56794: PUSH
56795: LD_INT 1
56797: PUSH
56798: LD_INT 1
56800: PUSH
56801: EMPTY
56802: LIST
56803: LIST
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 1
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 1
56817: NEG
56818: PUSH
56819: LD_INT 0
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: PUSH
56826: LD_INT 1
56828: NEG
56829: PUSH
56830: LD_INT 1
56832: NEG
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: EMPTY
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56847: LD_ADDR_VAR 0 60
56851: PUSH
56852: LD_INT 0
56854: PUSH
56855: LD_INT 0
56857: PUSH
56858: EMPTY
56859: LIST
56860: LIST
56861: PUSH
56862: LD_INT 0
56864: PUSH
56865: LD_INT 1
56867: NEG
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: LD_INT 1
56875: PUSH
56876: LD_INT 0
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 1
56885: PUSH
56886: LD_INT 1
56888: PUSH
56889: EMPTY
56890: LIST
56891: LIST
56892: PUSH
56893: LD_INT 0
56895: PUSH
56896: LD_INT 1
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: PUSH
56903: LD_INT 1
56905: NEG
56906: PUSH
56907: LD_INT 0
56909: PUSH
56910: EMPTY
56911: LIST
56912: LIST
56913: PUSH
56914: LD_INT 1
56916: NEG
56917: PUSH
56918: LD_INT 1
56920: NEG
56921: PUSH
56922: EMPTY
56923: LIST
56924: LIST
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: LIST
56930: LIST
56931: LIST
56932: LIST
56933: LIST
56934: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
56935: LD_ADDR_VAR 0 61
56939: PUSH
56940: LD_INT 0
56942: PUSH
56943: LD_INT 0
56945: PUSH
56946: EMPTY
56947: LIST
56948: LIST
56949: PUSH
56950: LD_INT 0
56952: PUSH
56953: LD_INT 1
56955: NEG
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PUSH
56961: LD_INT 1
56963: PUSH
56964: LD_INT 0
56966: PUSH
56967: EMPTY
56968: LIST
56969: LIST
56970: PUSH
56971: LD_INT 1
56973: PUSH
56974: LD_INT 1
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: PUSH
56981: LD_INT 0
56983: PUSH
56984: LD_INT 1
56986: PUSH
56987: EMPTY
56988: LIST
56989: LIST
56990: PUSH
56991: LD_INT 1
56993: NEG
56994: PUSH
56995: LD_INT 0
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 1
57004: NEG
57005: PUSH
57006: LD_INT 1
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57023: LD_ADDR_VAR 0 62
57027: PUSH
57028: LD_INT 0
57030: PUSH
57031: LD_INT 0
57033: PUSH
57034: EMPTY
57035: LIST
57036: LIST
57037: PUSH
57038: LD_INT 0
57040: PUSH
57041: LD_INT 1
57043: NEG
57044: PUSH
57045: EMPTY
57046: LIST
57047: LIST
57048: PUSH
57049: LD_INT 1
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: PUSH
57059: LD_INT 1
57061: PUSH
57062: LD_INT 1
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 0
57071: PUSH
57072: LD_INT 1
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: PUSH
57079: LD_INT 1
57081: NEG
57082: PUSH
57083: LD_INT 0
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 1
57092: NEG
57093: PUSH
57094: LD_INT 1
57096: NEG
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: PUSH
57102: EMPTY
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57111: LD_ADDR_VAR 0 63
57115: PUSH
57116: LD_INT 0
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 0
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 1
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 1
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 0
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 1
57169: NEG
57170: PUSH
57171: LD_INT 0
57173: PUSH
57174: EMPTY
57175: LIST
57176: LIST
57177: PUSH
57178: LD_INT 1
57180: NEG
57181: PUSH
57182: LD_INT 1
57184: NEG
57185: PUSH
57186: EMPTY
57187: LIST
57188: LIST
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: LIST
57194: LIST
57195: LIST
57196: LIST
57197: LIST
57198: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
57199: LD_ADDR_VAR 0 64
57203: PUSH
57204: LD_INT 0
57206: PUSH
57207: LD_INT 0
57209: PUSH
57210: EMPTY
57211: LIST
57212: LIST
57213: PUSH
57214: LD_INT 0
57216: PUSH
57217: LD_INT 1
57219: NEG
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: LD_INT 1
57227: PUSH
57228: LD_INT 0
57230: PUSH
57231: EMPTY
57232: LIST
57233: LIST
57234: PUSH
57235: LD_INT 1
57237: PUSH
57238: LD_INT 1
57240: PUSH
57241: EMPTY
57242: LIST
57243: LIST
57244: PUSH
57245: LD_INT 0
57247: PUSH
57248: LD_INT 1
57250: PUSH
57251: EMPTY
57252: LIST
57253: LIST
57254: PUSH
57255: LD_INT 1
57257: NEG
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: PUSH
57266: LD_INT 1
57268: NEG
57269: PUSH
57270: LD_INT 1
57272: NEG
57273: PUSH
57274: EMPTY
57275: LIST
57276: LIST
57277: PUSH
57278: EMPTY
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: LIST
57285: LIST
57286: ST_TO_ADDR
// end ; 1 :
57287: GO 63184
57289: LD_INT 1
57291: DOUBLE
57292: EQUAL
57293: IFTRUE 57297
57295: GO 59920
57297: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57298: LD_ADDR_VAR 0 11
57302: PUSH
57303: LD_INT 1
57305: NEG
57306: PUSH
57307: LD_INT 3
57309: NEG
57310: PUSH
57311: EMPTY
57312: LIST
57313: LIST
57314: PUSH
57315: LD_INT 0
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: LD_INT 1
57328: PUSH
57329: LD_INT 2
57331: NEG
57332: PUSH
57333: EMPTY
57334: LIST
57335: LIST
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: LIST
57341: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57342: LD_ADDR_VAR 0 12
57346: PUSH
57347: LD_INT 2
57349: PUSH
57350: LD_INT 1
57352: NEG
57353: PUSH
57354: EMPTY
57355: LIST
57356: LIST
57357: PUSH
57358: LD_INT 3
57360: PUSH
57361: LD_INT 0
57363: PUSH
57364: EMPTY
57365: LIST
57366: LIST
57367: PUSH
57368: LD_INT 3
57370: PUSH
57371: LD_INT 1
57373: PUSH
57374: EMPTY
57375: LIST
57376: LIST
57377: PUSH
57378: EMPTY
57379: LIST
57380: LIST
57381: LIST
57382: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57383: LD_ADDR_VAR 0 13
57387: PUSH
57388: LD_INT 3
57390: PUSH
57391: LD_INT 2
57393: PUSH
57394: EMPTY
57395: LIST
57396: LIST
57397: PUSH
57398: LD_INT 3
57400: PUSH
57401: LD_INT 3
57403: PUSH
57404: EMPTY
57405: LIST
57406: LIST
57407: PUSH
57408: LD_INT 2
57410: PUSH
57411: LD_INT 3
57413: PUSH
57414: EMPTY
57415: LIST
57416: LIST
57417: PUSH
57418: EMPTY
57419: LIST
57420: LIST
57421: LIST
57422: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57423: LD_ADDR_VAR 0 14
57427: PUSH
57428: LD_INT 1
57430: PUSH
57431: LD_INT 3
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: LD_INT 0
57440: PUSH
57441: LD_INT 3
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 1
57450: NEG
57451: PUSH
57452: LD_INT 2
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: EMPTY
57460: LIST
57461: LIST
57462: LIST
57463: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57464: LD_ADDR_VAR 0 15
57468: PUSH
57469: LD_INT 2
57471: NEG
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 3
57482: NEG
57483: PUSH
57484: LD_INT 0
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: PUSH
57491: LD_INT 3
57493: NEG
57494: PUSH
57495: LD_INT 1
57497: NEG
57498: PUSH
57499: EMPTY
57500: LIST
57501: LIST
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: LIST
57507: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57508: LD_ADDR_VAR 0 16
57512: PUSH
57513: LD_INT 2
57515: NEG
57516: PUSH
57517: LD_INT 3
57519: NEG
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: PUSH
57525: LD_INT 3
57527: NEG
57528: PUSH
57529: LD_INT 2
57531: NEG
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: LD_INT 3
57539: NEG
57540: PUSH
57541: LD_INT 3
57543: NEG
57544: PUSH
57545: EMPTY
57546: LIST
57547: LIST
57548: PUSH
57549: EMPTY
57550: LIST
57551: LIST
57552: LIST
57553: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
57554: LD_ADDR_VAR 0 17
57558: PUSH
57559: LD_INT 1
57561: NEG
57562: PUSH
57563: LD_INT 3
57565: NEG
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: PUSH
57571: LD_INT 0
57573: PUSH
57574: LD_INT 3
57576: NEG
57577: PUSH
57578: EMPTY
57579: LIST
57580: LIST
57581: PUSH
57582: LD_INT 1
57584: PUSH
57585: LD_INT 2
57587: NEG
57588: PUSH
57589: EMPTY
57590: LIST
57591: LIST
57592: PUSH
57593: EMPTY
57594: LIST
57595: LIST
57596: LIST
57597: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
57598: LD_ADDR_VAR 0 18
57602: PUSH
57603: LD_INT 2
57605: PUSH
57606: LD_INT 1
57608: NEG
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: LD_INT 0
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 3
57626: PUSH
57627: LD_INT 1
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
57639: LD_ADDR_VAR 0 19
57643: PUSH
57644: LD_INT 3
57646: PUSH
57647: LD_INT 2
57649: PUSH
57650: EMPTY
57651: LIST
57652: LIST
57653: PUSH
57654: LD_INT 3
57656: PUSH
57657: LD_INT 3
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 2
57666: PUSH
57667: LD_INT 3
57669: PUSH
57670: EMPTY
57671: LIST
57672: LIST
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: LIST
57678: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
57679: LD_ADDR_VAR 0 20
57683: PUSH
57684: LD_INT 1
57686: PUSH
57687: LD_INT 3
57689: PUSH
57690: EMPTY
57691: LIST
57692: LIST
57693: PUSH
57694: LD_INT 0
57696: PUSH
57697: LD_INT 3
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: PUSH
57704: LD_INT 1
57706: NEG
57707: PUSH
57708: LD_INT 2
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: EMPTY
57716: LIST
57717: LIST
57718: LIST
57719: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57720: LD_ADDR_VAR 0 21
57724: PUSH
57725: LD_INT 2
57727: NEG
57728: PUSH
57729: LD_INT 1
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 3
57738: NEG
57739: PUSH
57740: LD_INT 0
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: PUSH
57747: LD_INT 3
57749: NEG
57750: PUSH
57751: LD_INT 1
57753: NEG
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: LIST
57763: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57764: LD_ADDR_VAR 0 22
57768: PUSH
57769: LD_INT 2
57771: NEG
57772: PUSH
57773: LD_INT 3
57775: NEG
57776: PUSH
57777: EMPTY
57778: LIST
57779: LIST
57780: PUSH
57781: LD_INT 3
57783: NEG
57784: PUSH
57785: LD_INT 2
57787: NEG
57788: PUSH
57789: EMPTY
57790: LIST
57791: LIST
57792: PUSH
57793: LD_INT 3
57795: NEG
57796: PUSH
57797: LD_INT 3
57799: NEG
57800: PUSH
57801: EMPTY
57802: LIST
57803: LIST
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
57810: LD_ADDR_VAR 0 23
57814: PUSH
57815: LD_INT 0
57817: PUSH
57818: LD_INT 3
57820: NEG
57821: PUSH
57822: EMPTY
57823: LIST
57824: LIST
57825: PUSH
57826: LD_INT 1
57828: NEG
57829: PUSH
57830: LD_INT 4
57832: NEG
57833: PUSH
57834: EMPTY
57835: LIST
57836: LIST
57837: PUSH
57838: LD_INT 1
57840: PUSH
57841: LD_INT 3
57843: NEG
57844: PUSH
57845: EMPTY
57846: LIST
57847: LIST
57848: PUSH
57849: EMPTY
57850: LIST
57851: LIST
57852: LIST
57853: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
57854: LD_ADDR_VAR 0 24
57858: PUSH
57859: LD_INT 3
57861: PUSH
57862: LD_INT 0
57864: PUSH
57865: EMPTY
57866: LIST
57867: LIST
57868: PUSH
57869: LD_INT 3
57871: PUSH
57872: LD_INT 1
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 4
57882: PUSH
57883: LD_INT 1
57885: PUSH
57886: EMPTY
57887: LIST
57888: LIST
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: LIST
57894: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
57895: LD_ADDR_VAR 0 25
57899: PUSH
57900: LD_INT 3
57902: PUSH
57903: LD_INT 3
57905: PUSH
57906: EMPTY
57907: LIST
57908: LIST
57909: PUSH
57910: LD_INT 4
57912: PUSH
57913: LD_INT 3
57915: PUSH
57916: EMPTY
57917: LIST
57918: LIST
57919: PUSH
57920: LD_INT 3
57922: PUSH
57923: LD_INT 4
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
57935: LD_ADDR_VAR 0 26
57939: PUSH
57940: LD_INT 0
57942: PUSH
57943: LD_INT 3
57945: PUSH
57946: EMPTY
57947: LIST
57948: LIST
57949: PUSH
57950: LD_INT 1
57952: PUSH
57953: LD_INT 4
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 1
57962: NEG
57963: PUSH
57964: LD_INT 3
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
57976: LD_ADDR_VAR 0 27
57980: PUSH
57981: LD_INT 3
57983: NEG
57984: PUSH
57985: LD_INT 0
57987: PUSH
57988: EMPTY
57989: LIST
57990: LIST
57991: PUSH
57992: LD_INT 3
57994: NEG
57995: PUSH
57996: LD_INT 1
57998: PUSH
57999: EMPTY
58000: LIST
58001: LIST
58002: PUSH
58003: LD_INT 4
58005: NEG
58006: PUSH
58007: LD_INT 1
58009: NEG
58010: PUSH
58011: EMPTY
58012: LIST
58013: LIST
58014: PUSH
58015: EMPTY
58016: LIST
58017: LIST
58018: LIST
58019: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
58020: LD_ADDR_VAR 0 28
58024: PUSH
58025: LD_INT 3
58027: NEG
58028: PUSH
58029: LD_INT 3
58031: NEG
58032: PUSH
58033: EMPTY
58034: LIST
58035: LIST
58036: PUSH
58037: LD_INT 3
58039: NEG
58040: PUSH
58041: LD_INT 4
58043: NEG
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 4
58051: NEG
58052: PUSH
58053: LD_INT 3
58055: NEG
58056: PUSH
58057: EMPTY
58058: LIST
58059: LIST
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
58066: LD_ADDR_VAR 0 29
58070: PUSH
58071: LD_INT 1
58073: NEG
58074: PUSH
58075: LD_INT 3
58077: NEG
58078: PUSH
58079: EMPTY
58080: LIST
58081: LIST
58082: PUSH
58083: LD_INT 0
58085: PUSH
58086: LD_INT 3
58088: NEG
58089: PUSH
58090: EMPTY
58091: LIST
58092: LIST
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: LD_INT 2
58099: NEG
58100: PUSH
58101: EMPTY
58102: LIST
58103: LIST
58104: PUSH
58105: LD_INT 1
58107: NEG
58108: PUSH
58109: LD_INT 4
58111: NEG
58112: PUSH
58113: EMPTY
58114: LIST
58115: LIST
58116: PUSH
58117: LD_INT 0
58119: PUSH
58120: LD_INT 4
58122: NEG
58123: PUSH
58124: EMPTY
58125: LIST
58126: LIST
58127: PUSH
58128: LD_INT 1
58130: PUSH
58131: LD_INT 3
58133: NEG
58134: PUSH
58135: EMPTY
58136: LIST
58137: LIST
58138: PUSH
58139: LD_INT 1
58141: NEG
58142: PUSH
58143: LD_INT 5
58145: NEG
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 0
58153: PUSH
58154: LD_INT 5
58156: NEG
58157: PUSH
58158: EMPTY
58159: LIST
58160: LIST
58161: PUSH
58162: LD_INT 1
58164: PUSH
58165: LD_INT 4
58167: NEG
58168: PUSH
58169: EMPTY
58170: LIST
58171: LIST
58172: PUSH
58173: LD_INT 1
58175: NEG
58176: PUSH
58177: LD_INT 6
58179: NEG
58180: PUSH
58181: EMPTY
58182: LIST
58183: LIST
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 6
58190: NEG
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: PUSH
58196: LD_INT 1
58198: PUSH
58199: LD_INT 5
58201: NEG
58202: PUSH
58203: EMPTY
58204: LIST
58205: LIST
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
58221: LD_ADDR_VAR 0 30
58225: PUSH
58226: LD_INT 2
58228: PUSH
58229: LD_INT 1
58231: NEG
58232: PUSH
58233: EMPTY
58234: LIST
58235: LIST
58236: PUSH
58237: LD_INT 3
58239: PUSH
58240: LD_INT 0
58242: PUSH
58243: EMPTY
58244: LIST
58245: LIST
58246: PUSH
58247: LD_INT 3
58249: PUSH
58250: LD_INT 1
58252: PUSH
58253: EMPTY
58254: LIST
58255: LIST
58256: PUSH
58257: LD_INT 3
58259: PUSH
58260: LD_INT 1
58262: NEG
58263: PUSH
58264: EMPTY
58265: LIST
58266: LIST
58267: PUSH
58268: LD_INT 4
58270: PUSH
58271: LD_INT 0
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: PUSH
58278: LD_INT 4
58280: PUSH
58281: LD_INT 1
58283: PUSH
58284: EMPTY
58285: LIST
58286: LIST
58287: PUSH
58288: LD_INT 4
58290: PUSH
58291: LD_INT 1
58293: NEG
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: PUSH
58299: LD_INT 5
58301: PUSH
58302: LD_INT 0
58304: PUSH
58305: EMPTY
58306: LIST
58307: LIST
58308: PUSH
58309: LD_INT 5
58311: PUSH
58312: LD_INT 1
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 5
58321: PUSH
58322: LD_INT 1
58324: NEG
58325: PUSH
58326: EMPTY
58327: LIST
58328: LIST
58329: PUSH
58330: LD_INT 6
58332: PUSH
58333: LD_INT 0
58335: PUSH
58336: EMPTY
58337: LIST
58338: LIST
58339: PUSH
58340: LD_INT 6
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: EMPTY
58347: LIST
58348: LIST
58349: PUSH
58350: EMPTY
58351: LIST
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
58364: LD_ADDR_VAR 0 31
58368: PUSH
58369: LD_INT 3
58371: PUSH
58372: LD_INT 2
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 3
58381: PUSH
58382: LD_INT 3
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 2
58391: PUSH
58392: LD_INT 3
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 4
58401: PUSH
58402: LD_INT 3
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 4
58411: PUSH
58412: LD_INT 4
58414: PUSH
58415: EMPTY
58416: LIST
58417: LIST
58418: PUSH
58419: LD_INT 3
58421: PUSH
58422: LD_INT 4
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: PUSH
58429: LD_INT 5
58431: PUSH
58432: LD_INT 4
58434: PUSH
58435: EMPTY
58436: LIST
58437: LIST
58438: PUSH
58439: LD_INT 5
58441: PUSH
58442: LD_INT 5
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: PUSH
58449: LD_INT 4
58451: PUSH
58452: LD_INT 5
58454: PUSH
58455: EMPTY
58456: LIST
58457: LIST
58458: PUSH
58459: LD_INT 6
58461: PUSH
58462: LD_INT 5
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 6
58471: PUSH
58472: LD_INT 6
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 5
58481: PUSH
58482: LD_INT 6
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: EMPTY
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
58503: LD_ADDR_VAR 0 32
58507: PUSH
58508: LD_INT 1
58510: PUSH
58511: LD_INT 3
58513: PUSH
58514: EMPTY
58515: LIST
58516: LIST
58517: PUSH
58518: LD_INT 0
58520: PUSH
58521: LD_INT 3
58523: PUSH
58524: EMPTY
58525: LIST
58526: LIST
58527: PUSH
58528: LD_INT 1
58530: NEG
58531: PUSH
58532: LD_INT 2
58534: PUSH
58535: EMPTY
58536: LIST
58537: LIST
58538: PUSH
58539: LD_INT 1
58541: PUSH
58542: LD_INT 4
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: PUSH
58549: LD_INT 0
58551: PUSH
58552: LD_INT 4
58554: PUSH
58555: EMPTY
58556: LIST
58557: LIST
58558: PUSH
58559: LD_INT 1
58561: NEG
58562: PUSH
58563: LD_INT 3
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: PUSH
58570: LD_INT 1
58572: PUSH
58573: LD_INT 5
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: PUSH
58580: LD_INT 0
58582: PUSH
58583: LD_INT 5
58585: PUSH
58586: EMPTY
58587: LIST
58588: LIST
58589: PUSH
58590: LD_INT 1
58592: NEG
58593: PUSH
58594: LD_INT 4
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 1
58603: PUSH
58604: LD_INT 6
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 0
58613: PUSH
58614: LD_INT 6
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 1
58623: NEG
58624: PUSH
58625: LD_INT 5
58627: PUSH
58628: EMPTY
58629: LIST
58630: LIST
58631: PUSH
58632: EMPTY
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: LIST
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
58646: LD_ADDR_VAR 0 33
58650: PUSH
58651: LD_INT 2
58653: NEG
58654: PUSH
58655: LD_INT 1
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PUSH
58662: LD_INT 3
58664: NEG
58665: PUSH
58666: LD_INT 0
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: PUSH
58673: LD_INT 3
58675: NEG
58676: PUSH
58677: LD_INT 1
58679: NEG
58680: PUSH
58681: EMPTY
58682: LIST
58683: LIST
58684: PUSH
58685: LD_INT 3
58687: NEG
58688: PUSH
58689: LD_INT 1
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: PUSH
58696: LD_INT 4
58698: NEG
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: PUSH
58707: LD_INT 4
58709: NEG
58710: PUSH
58711: LD_INT 1
58713: NEG
58714: PUSH
58715: EMPTY
58716: LIST
58717: LIST
58718: PUSH
58719: LD_INT 4
58721: NEG
58722: PUSH
58723: LD_INT 1
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 5
58732: NEG
58733: PUSH
58734: LD_INT 0
58736: PUSH
58737: EMPTY
58738: LIST
58739: LIST
58740: PUSH
58741: LD_INT 5
58743: NEG
58744: PUSH
58745: LD_INT 1
58747: NEG
58748: PUSH
58749: EMPTY
58750: LIST
58751: LIST
58752: PUSH
58753: LD_INT 5
58755: NEG
58756: PUSH
58757: LD_INT 1
58759: PUSH
58760: EMPTY
58761: LIST
58762: LIST
58763: PUSH
58764: LD_INT 6
58766: NEG
58767: PUSH
58768: LD_INT 0
58770: PUSH
58771: EMPTY
58772: LIST
58773: LIST
58774: PUSH
58775: LD_INT 6
58777: NEG
58778: PUSH
58779: LD_INT 1
58781: NEG
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: LIST
58791: LIST
58792: LIST
58793: LIST
58794: LIST
58795: LIST
58796: LIST
58797: LIST
58798: LIST
58799: LIST
58800: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
58801: LD_ADDR_VAR 0 34
58805: PUSH
58806: LD_INT 2
58808: NEG
58809: PUSH
58810: LD_INT 3
58812: NEG
58813: PUSH
58814: EMPTY
58815: LIST
58816: LIST
58817: PUSH
58818: LD_INT 3
58820: NEG
58821: PUSH
58822: LD_INT 2
58824: NEG
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: PUSH
58830: LD_INT 3
58832: NEG
58833: PUSH
58834: LD_INT 3
58836: NEG
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: PUSH
58842: LD_INT 3
58844: NEG
58845: PUSH
58846: LD_INT 4
58848: NEG
58849: PUSH
58850: EMPTY
58851: LIST
58852: LIST
58853: PUSH
58854: LD_INT 4
58856: NEG
58857: PUSH
58858: LD_INT 3
58860: NEG
58861: PUSH
58862: EMPTY
58863: LIST
58864: LIST
58865: PUSH
58866: LD_INT 4
58868: NEG
58869: PUSH
58870: LD_INT 4
58872: NEG
58873: PUSH
58874: EMPTY
58875: LIST
58876: LIST
58877: PUSH
58878: LD_INT 4
58880: NEG
58881: PUSH
58882: LD_INT 5
58884: NEG
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 5
58892: NEG
58893: PUSH
58894: LD_INT 4
58896: NEG
58897: PUSH
58898: EMPTY
58899: LIST
58900: LIST
58901: PUSH
58902: LD_INT 5
58904: NEG
58905: PUSH
58906: LD_INT 5
58908: NEG
58909: PUSH
58910: EMPTY
58911: LIST
58912: LIST
58913: PUSH
58914: LD_INT 5
58916: NEG
58917: PUSH
58918: LD_INT 6
58920: NEG
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: PUSH
58926: LD_INT 6
58928: NEG
58929: PUSH
58930: LD_INT 5
58932: NEG
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: PUSH
58938: LD_INT 6
58940: NEG
58941: PUSH
58942: LD_INT 6
58944: NEG
58945: PUSH
58946: EMPTY
58947: LIST
58948: LIST
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: LIST
58954: LIST
58955: LIST
58956: LIST
58957: LIST
58958: LIST
58959: LIST
58960: LIST
58961: LIST
58962: LIST
58963: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
58964: LD_ADDR_VAR 0 41
58968: PUSH
58969: LD_INT 0
58971: PUSH
58972: LD_INT 2
58974: NEG
58975: PUSH
58976: EMPTY
58977: LIST
58978: LIST
58979: PUSH
58980: LD_INT 1
58982: NEG
58983: PUSH
58984: LD_INT 3
58986: NEG
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 1
58994: PUSH
58995: LD_INT 2
58997: NEG
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PUSH
59003: EMPTY
59004: LIST
59005: LIST
59006: LIST
59007: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
59008: LD_ADDR_VAR 0 42
59012: PUSH
59013: LD_INT 2
59015: PUSH
59016: LD_INT 0
59018: PUSH
59019: EMPTY
59020: LIST
59021: LIST
59022: PUSH
59023: LD_INT 2
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: PUSH
59034: LD_INT 3
59036: PUSH
59037: LD_INT 1
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: PUSH
59044: EMPTY
59045: LIST
59046: LIST
59047: LIST
59048: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
59049: LD_ADDR_VAR 0 43
59053: PUSH
59054: LD_INT 2
59056: PUSH
59057: LD_INT 2
59059: PUSH
59060: EMPTY
59061: LIST
59062: LIST
59063: PUSH
59064: LD_INT 3
59066: PUSH
59067: LD_INT 2
59069: PUSH
59070: EMPTY
59071: LIST
59072: LIST
59073: PUSH
59074: LD_INT 2
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
59089: LD_ADDR_VAR 0 44
59093: PUSH
59094: LD_INT 0
59096: PUSH
59097: LD_INT 2
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: PUSH
59104: LD_INT 1
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 1
59116: NEG
59117: PUSH
59118: LD_INT 2
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
59130: LD_ADDR_VAR 0 45
59134: PUSH
59135: LD_INT 2
59137: NEG
59138: PUSH
59139: LD_INT 0
59141: PUSH
59142: EMPTY
59143: LIST
59144: LIST
59145: PUSH
59146: LD_INT 2
59148: NEG
59149: PUSH
59150: LD_INT 1
59152: PUSH
59153: EMPTY
59154: LIST
59155: LIST
59156: PUSH
59157: LD_INT 3
59159: NEG
59160: PUSH
59161: LD_INT 1
59163: NEG
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PUSH
59169: EMPTY
59170: LIST
59171: LIST
59172: LIST
59173: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
59174: LD_ADDR_VAR 0 46
59178: PUSH
59179: LD_INT 2
59181: NEG
59182: PUSH
59183: LD_INT 2
59185: NEG
59186: PUSH
59187: EMPTY
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 2
59193: NEG
59194: PUSH
59195: LD_INT 3
59197: NEG
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: LD_INT 3
59205: NEG
59206: PUSH
59207: LD_INT 2
59209: NEG
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: EMPTY
59216: LIST
59217: LIST
59218: LIST
59219: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
59220: LD_ADDR_VAR 0 47
59224: PUSH
59225: LD_INT 2
59227: NEG
59228: PUSH
59229: LD_INT 3
59231: NEG
59232: PUSH
59233: EMPTY
59234: LIST
59235: LIST
59236: PUSH
59237: LD_INT 1
59239: NEG
59240: PUSH
59241: LD_INT 3
59243: NEG
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: EMPTY
59250: LIST
59251: LIST
59252: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
59253: LD_ADDR_VAR 0 48
59257: PUSH
59258: LD_INT 1
59260: PUSH
59261: LD_INT 2
59263: NEG
59264: PUSH
59265: EMPTY
59266: LIST
59267: LIST
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: LD_INT 1
59274: NEG
59275: PUSH
59276: EMPTY
59277: LIST
59278: LIST
59279: PUSH
59280: EMPTY
59281: LIST
59282: LIST
59283: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
59284: LD_ADDR_VAR 0 49
59288: PUSH
59289: LD_INT 3
59291: PUSH
59292: LD_INT 1
59294: PUSH
59295: EMPTY
59296: LIST
59297: LIST
59298: PUSH
59299: LD_INT 3
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
59313: LD_ADDR_VAR 0 50
59317: PUSH
59318: LD_INT 2
59320: PUSH
59321: LD_INT 3
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: PUSH
59328: LD_INT 1
59330: PUSH
59331: LD_INT 3
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
59342: LD_ADDR_VAR 0 51
59346: PUSH
59347: LD_INT 1
59349: NEG
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: EMPTY
59355: LIST
59356: LIST
59357: PUSH
59358: LD_INT 2
59360: NEG
59361: PUSH
59362: LD_INT 1
59364: PUSH
59365: EMPTY
59366: LIST
59367: LIST
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
59373: LD_ADDR_VAR 0 52
59377: PUSH
59378: LD_INT 3
59380: NEG
59381: PUSH
59382: LD_INT 1
59384: NEG
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: PUSH
59390: LD_INT 3
59392: NEG
59393: PUSH
59394: LD_INT 2
59396: NEG
59397: PUSH
59398: EMPTY
59399: LIST
59400: LIST
59401: PUSH
59402: EMPTY
59403: LIST
59404: LIST
59405: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
59406: LD_ADDR_VAR 0 53
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: PUSH
59415: LD_INT 3
59417: NEG
59418: PUSH
59419: EMPTY
59420: LIST
59421: LIST
59422: PUSH
59423: LD_INT 0
59425: PUSH
59426: LD_INT 3
59428: NEG
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 1
59436: PUSH
59437: LD_INT 2
59439: NEG
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: EMPTY
59446: LIST
59447: LIST
59448: LIST
59449: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
59450: LD_ADDR_VAR 0 54
59454: PUSH
59455: LD_INT 2
59457: PUSH
59458: LD_INT 1
59460: NEG
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 3
59468: PUSH
59469: LD_INT 0
59471: PUSH
59472: EMPTY
59473: LIST
59474: LIST
59475: PUSH
59476: LD_INT 3
59478: PUSH
59479: LD_INT 1
59481: PUSH
59482: EMPTY
59483: LIST
59484: LIST
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: LIST
59490: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
59491: LD_ADDR_VAR 0 55
59495: PUSH
59496: LD_INT 3
59498: PUSH
59499: LD_INT 2
59501: PUSH
59502: EMPTY
59503: LIST
59504: LIST
59505: PUSH
59506: LD_INT 3
59508: PUSH
59509: LD_INT 3
59511: PUSH
59512: EMPTY
59513: LIST
59514: LIST
59515: PUSH
59516: LD_INT 2
59518: PUSH
59519: LD_INT 3
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: PUSH
59526: EMPTY
59527: LIST
59528: LIST
59529: LIST
59530: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
59531: LD_ADDR_VAR 0 56
59535: PUSH
59536: LD_INT 1
59538: PUSH
59539: LD_INT 3
59541: PUSH
59542: EMPTY
59543: LIST
59544: LIST
59545: PUSH
59546: LD_INT 0
59548: PUSH
59549: LD_INT 3
59551: PUSH
59552: EMPTY
59553: LIST
59554: LIST
59555: PUSH
59556: LD_INT 1
59558: NEG
59559: PUSH
59560: LD_INT 2
59562: PUSH
59563: EMPTY
59564: LIST
59565: LIST
59566: PUSH
59567: EMPTY
59568: LIST
59569: LIST
59570: LIST
59571: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
59572: LD_ADDR_VAR 0 57
59576: PUSH
59577: LD_INT 2
59579: NEG
59580: PUSH
59581: LD_INT 1
59583: PUSH
59584: EMPTY
59585: LIST
59586: LIST
59587: PUSH
59588: LD_INT 3
59590: NEG
59591: PUSH
59592: LD_INT 0
59594: PUSH
59595: EMPTY
59596: LIST
59597: LIST
59598: PUSH
59599: LD_INT 3
59601: NEG
59602: PUSH
59603: LD_INT 1
59605: NEG
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: PUSH
59611: EMPTY
59612: LIST
59613: LIST
59614: LIST
59615: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
59616: LD_ADDR_VAR 0 58
59620: PUSH
59621: LD_INT 2
59623: NEG
59624: PUSH
59625: LD_INT 3
59627: NEG
59628: PUSH
59629: EMPTY
59630: LIST
59631: LIST
59632: PUSH
59633: LD_INT 3
59635: NEG
59636: PUSH
59637: LD_INT 2
59639: NEG
59640: PUSH
59641: EMPTY
59642: LIST
59643: LIST
59644: PUSH
59645: LD_INT 3
59647: NEG
59648: PUSH
59649: LD_INT 3
59651: NEG
59652: PUSH
59653: EMPTY
59654: LIST
59655: LIST
59656: PUSH
59657: EMPTY
59658: LIST
59659: LIST
59660: LIST
59661: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
59662: LD_ADDR_VAR 0 59
59666: PUSH
59667: LD_INT 1
59669: NEG
59670: PUSH
59671: LD_INT 2
59673: NEG
59674: PUSH
59675: EMPTY
59676: LIST
59677: LIST
59678: PUSH
59679: LD_INT 0
59681: PUSH
59682: LD_INT 2
59684: NEG
59685: PUSH
59686: EMPTY
59687: LIST
59688: LIST
59689: PUSH
59690: LD_INT 1
59692: PUSH
59693: LD_INT 1
59695: NEG
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: PUSH
59701: EMPTY
59702: LIST
59703: LIST
59704: LIST
59705: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
59706: LD_ADDR_VAR 0 60
59710: PUSH
59711: LD_INT 1
59713: PUSH
59714: LD_INT 1
59716: NEG
59717: PUSH
59718: EMPTY
59719: LIST
59720: LIST
59721: PUSH
59722: LD_INT 2
59724: PUSH
59725: LD_INT 0
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: PUSH
59732: LD_INT 2
59734: PUSH
59735: LD_INT 1
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: EMPTY
59743: LIST
59744: LIST
59745: LIST
59746: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
59747: LD_ADDR_VAR 0 61
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: EMPTY
59783: LIST
59784: LIST
59785: LIST
59786: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
59787: LD_ADDR_VAR 0 62
59791: PUSH
59792: LD_INT 1
59794: PUSH
59795: LD_INT 2
59797: PUSH
59798: EMPTY
59799: LIST
59800: LIST
59801: PUSH
59802: LD_INT 0
59804: PUSH
59805: LD_INT 2
59807: PUSH
59808: EMPTY
59809: LIST
59810: LIST
59811: PUSH
59812: LD_INT 1
59814: NEG
59815: PUSH
59816: LD_INT 1
59818: PUSH
59819: EMPTY
59820: LIST
59821: LIST
59822: PUSH
59823: EMPTY
59824: LIST
59825: LIST
59826: LIST
59827: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
59828: LD_ADDR_VAR 0 63
59832: PUSH
59833: LD_INT 1
59835: NEG
59836: PUSH
59837: LD_INT 1
59839: PUSH
59840: EMPTY
59841: LIST
59842: LIST
59843: PUSH
59844: LD_INT 2
59846: NEG
59847: PUSH
59848: LD_INT 0
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: PUSH
59855: LD_INT 2
59857: NEG
59858: PUSH
59859: LD_INT 1
59861: NEG
59862: PUSH
59863: EMPTY
59864: LIST
59865: LIST
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: LIST
59871: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59872: LD_ADDR_VAR 0 64
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: LD_INT 2
59883: NEG
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: PUSH
59889: LD_INT 2
59891: NEG
59892: PUSH
59893: LD_INT 1
59895: NEG
59896: PUSH
59897: EMPTY
59898: LIST
59899: LIST
59900: PUSH
59901: LD_INT 2
59903: NEG
59904: PUSH
59905: LD_INT 2
59907: NEG
59908: PUSH
59909: EMPTY
59910: LIST
59911: LIST
59912: PUSH
59913: EMPTY
59914: LIST
59915: LIST
59916: LIST
59917: ST_TO_ADDR
// end ; 2 :
59918: GO 63184
59920: LD_INT 2
59922: DOUBLE
59923: EQUAL
59924: IFTRUE 59928
59926: GO 63183
59928: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
59929: LD_ADDR_VAR 0 29
59933: PUSH
59934: LD_INT 4
59936: PUSH
59937: LD_INT 0
59939: PUSH
59940: EMPTY
59941: LIST
59942: LIST
59943: PUSH
59944: LD_INT 4
59946: PUSH
59947: LD_INT 1
59949: NEG
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: PUSH
59955: LD_INT 5
59957: PUSH
59958: LD_INT 0
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_INT 5
59967: PUSH
59968: LD_INT 1
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: PUSH
59975: LD_INT 4
59977: PUSH
59978: LD_INT 1
59980: PUSH
59981: EMPTY
59982: LIST
59983: LIST
59984: PUSH
59985: LD_INT 3
59987: PUSH
59988: LD_INT 0
59990: PUSH
59991: EMPTY
59992: LIST
59993: LIST
59994: PUSH
59995: LD_INT 3
59997: PUSH
59998: LD_INT 1
60000: NEG
60001: PUSH
60002: EMPTY
60003: LIST
60004: LIST
60005: PUSH
60006: LD_INT 3
60008: PUSH
60009: LD_INT 2
60011: NEG
60012: PUSH
60013: EMPTY
60014: LIST
60015: LIST
60016: PUSH
60017: LD_INT 5
60019: PUSH
60020: LD_INT 2
60022: PUSH
60023: EMPTY
60024: LIST
60025: LIST
60026: PUSH
60027: LD_INT 3
60029: PUSH
60030: LD_INT 3
60032: PUSH
60033: EMPTY
60034: LIST
60035: LIST
60036: PUSH
60037: LD_INT 3
60039: PUSH
60040: LD_INT 2
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: PUSH
60047: LD_INT 4
60049: PUSH
60050: LD_INT 3
60052: PUSH
60053: EMPTY
60054: LIST
60055: LIST
60056: PUSH
60057: LD_INT 4
60059: PUSH
60060: LD_INT 4
60062: PUSH
60063: EMPTY
60064: LIST
60065: LIST
60066: PUSH
60067: LD_INT 3
60069: PUSH
60070: LD_INT 4
60072: PUSH
60073: EMPTY
60074: LIST
60075: LIST
60076: PUSH
60077: LD_INT 2
60079: PUSH
60080: LD_INT 3
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 2
60089: PUSH
60090: LD_INT 2
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 4
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 2
60109: PUSH
60110: LD_INT 4
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: LD_INT 0
60119: PUSH
60120: LD_INT 4
60122: PUSH
60123: EMPTY
60124: LIST
60125: LIST
60126: PUSH
60127: LD_INT 0
60129: PUSH
60130: LD_INT 3
60132: PUSH
60133: EMPTY
60134: LIST
60135: LIST
60136: PUSH
60137: LD_INT 1
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: EMPTY
60144: LIST
60145: LIST
60146: PUSH
60147: LD_INT 1
60149: PUSH
60150: LD_INT 5
60152: PUSH
60153: EMPTY
60154: LIST
60155: LIST
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 5
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: PUSH
60167: LD_INT 1
60169: NEG
60170: PUSH
60171: LD_INT 4
60173: PUSH
60174: EMPTY
60175: LIST
60176: LIST
60177: PUSH
60178: LD_INT 1
60180: NEG
60181: PUSH
60182: LD_INT 3
60184: PUSH
60185: EMPTY
60186: LIST
60187: LIST
60188: PUSH
60189: LD_INT 2
60191: PUSH
60192: LD_INT 5
60194: PUSH
60195: EMPTY
60196: LIST
60197: LIST
60198: PUSH
60199: LD_INT 2
60201: NEG
60202: PUSH
60203: LD_INT 3
60205: PUSH
60206: EMPTY
60207: LIST
60208: LIST
60209: PUSH
60210: LD_INT 3
60212: NEG
60213: PUSH
60214: LD_INT 0
60216: PUSH
60217: EMPTY
60218: LIST
60219: LIST
60220: PUSH
60221: LD_INT 3
60223: NEG
60224: PUSH
60225: LD_INT 1
60227: NEG
60228: PUSH
60229: EMPTY
60230: LIST
60231: LIST
60232: PUSH
60233: LD_INT 2
60235: NEG
60236: PUSH
60237: LD_INT 0
60239: PUSH
60240: EMPTY
60241: LIST
60242: LIST
60243: PUSH
60244: LD_INT 2
60246: NEG
60247: PUSH
60248: LD_INT 1
60250: PUSH
60251: EMPTY
60252: LIST
60253: LIST
60254: PUSH
60255: LD_INT 3
60257: NEG
60258: PUSH
60259: LD_INT 1
60261: PUSH
60262: EMPTY
60263: LIST
60264: LIST
60265: PUSH
60266: LD_INT 4
60268: NEG
60269: PUSH
60270: LD_INT 0
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 4
60279: NEG
60280: PUSH
60281: LD_INT 1
60283: NEG
60284: PUSH
60285: EMPTY
60286: LIST
60287: LIST
60288: PUSH
60289: LD_INT 4
60291: NEG
60292: PUSH
60293: LD_INT 2
60295: NEG
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: PUSH
60301: LD_INT 2
60303: NEG
60304: PUSH
60305: LD_INT 2
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 4
60314: NEG
60315: PUSH
60316: LD_INT 4
60318: NEG
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 4
60326: NEG
60327: PUSH
60328: LD_INT 5
60330: NEG
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 3
60338: NEG
60339: PUSH
60340: LD_INT 4
60342: NEG
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: PUSH
60348: LD_INT 3
60350: NEG
60351: PUSH
60352: LD_INT 3
60354: NEG
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: PUSH
60360: LD_INT 4
60362: NEG
60363: PUSH
60364: LD_INT 3
60366: NEG
60367: PUSH
60368: EMPTY
60369: LIST
60370: LIST
60371: PUSH
60372: LD_INT 5
60374: NEG
60375: PUSH
60376: LD_INT 4
60378: NEG
60379: PUSH
60380: EMPTY
60381: LIST
60382: LIST
60383: PUSH
60384: LD_INT 5
60386: NEG
60387: PUSH
60388: LD_INT 5
60390: NEG
60391: PUSH
60392: EMPTY
60393: LIST
60394: LIST
60395: PUSH
60396: LD_INT 3
60398: NEG
60399: PUSH
60400: LD_INT 5
60402: NEG
60403: PUSH
60404: EMPTY
60405: LIST
60406: LIST
60407: PUSH
60408: LD_INT 5
60410: NEG
60411: PUSH
60412: LD_INT 3
60414: NEG
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: LIST
60424: LIST
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: LIST
60442: LIST
60443: LIST
60444: LIST
60445: LIST
60446: LIST
60447: LIST
60448: LIST
60449: LIST
60450: LIST
60451: LIST
60452: LIST
60453: LIST
60454: LIST
60455: LIST
60456: LIST
60457: LIST
60458: LIST
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: LIST
60464: LIST
60465: LIST
60466: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
60467: LD_ADDR_VAR 0 30
60471: PUSH
60472: LD_INT 4
60474: PUSH
60475: LD_INT 4
60477: PUSH
60478: EMPTY
60479: LIST
60480: LIST
60481: PUSH
60482: LD_INT 4
60484: PUSH
60485: LD_INT 3
60487: PUSH
60488: EMPTY
60489: LIST
60490: LIST
60491: PUSH
60492: LD_INT 5
60494: PUSH
60495: LD_INT 4
60497: PUSH
60498: EMPTY
60499: LIST
60500: LIST
60501: PUSH
60502: LD_INT 5
60504: PUSH
60505: LD_INT 5
60507: PUSH
60508: EMPTY
60509: LIST
60510: LIST
60511: PUSH
60512: LD_INT 4
60514: PUSH
60515: LD_INT 5
60517: PUSH
60518: EMPTY
60519: LIST
60520: LIST
60521: PUSH
60522: LD_INT 3
60524: PUSH
60525: LD_INT 4
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 3
60534: PUSH
60535: LD_INT 3
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 5
60544: PUSH
60545: LD_INT 3
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 3
60554: PUSH
60555: LD_INT 5
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 0
60564: PUSH
60565: LD_INT 3
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: LD_INT 0
60574: PUSH
60575: LD_INT 2
60577: PUSH
60578: EMPTY
60579: LIST
60580: LIST
60581: PUSH
60582: LD_INT 1
60584: PUSH
60585: LD_INT 3
60587: PUSH
60588: EMPTY
60589: LIST
60590: LIST
60591: PUSH
60592: LD_INT 1
60594: PUSH
60595: LD_INT 4
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: PUSH
60602: LD_INT 0
60604: PUSH
60605: LD_INT 4
60607: PUSH
60608: EMPTY
60609: LIST
60610: LIST
60611: PUSH
60612: LD_INT 1
60614: NEG
60615: PUSH
60616: LD_INT 3
60618: PUSH
60619: EMPTY
60620: LIST
60621: LIST
60622: PUSH
60623: LD_INT 1
60625: NEG
60626: PUSH
60627: LD_INT 2
60629: PUSH
60630: EMPTY
60631: LIST
60632: LIST
60633: PUSH
60634: LD_INT 2
60636: PUSH
60637: LD_INT 4
60639: PUSH
60640: EMPTY
60641: LIST
60642: LIST
60643: PUSH
60644: LD_INT 2
60646: NEG
60647: PUSH
60648: LD_INT 2
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PUSH
60655: LD_INT 4
60657: NEG
60658: PUSH
60659: LD_INT 0
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: PUSH
60666: LD_INT 4
60668: NEG
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: EMPTY
60675: LIST
60676: LIST
60677: PUSH
60678: LD_INT 3
60680: NEG
60681: PUSH
60682: LD_INT 0
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 3
60691: NEG
60692: PUSH
60693: LD_INT 1
60695: PUSH
60696: EMPTY
60697: LIST
60698: LIST
60699: PUSH
60700: LD_INT 4
60702: NEG
60703: PUSH
60704: LD_INT 1
60706: PUSH
60707: EMPTY
60708: LIST
60709: LIST
60710: PUSH
60711: LD_INT 5
60713: NEG
60714: PUSH
60715: LD_INT 0
60717: PUSH
60718: EMPTY
60719: LIST
60720: LIST
60721: PUSH
60722: LD_INT 5
60724: NEG
60725: PUSH
60726: LD_INT 1
60728: NEG
60729: PUSH
60730: EMPTY
60731: LIST
60732: LIST
60733: PUSH
60734: LD_INT 5
60736: NEG
60737: PUSH
60738: LD_INT 2
60740: NEG
60741: PUSH
60742: EMPTY
60743: LIST
60744: LIST
60745: PUSH
60746: LD_INT 3
60748: NEG
60749: PUSH
60750: LD_INT 2
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: PUSH
60757: LD_INT 3
60759: NEG
60760: PUSH
60761: LD_INT 3
60763: NEG
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 3
60771: NEG
60772: PUSH
60773: LD_INT 4
60775: NEG
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: LD_INT 2
60783: NEG
60784: PUSH
60785: LD_INT 3
60787: NEG
60788: PUSH
60789: EMPTY
60790: LIST
60791: LIST
60792: PUSH
60793: LD_INT 2
60795: NEG
60796: PUSH
60797: LD_INT 2
60799: NEG
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 3
60807: NEG
60808: PUSH
60809: LD_INT 2
60811: NEG
60812: PUSH
60813: EMPTY
60814: LIST
60815: LIST
60816: PUSH
60817: LD_INT 4
60819: NEG
60820: PUSH
60821: LD_INT 3
60823: NEG
60824: PUSH
60825: EMPTY
60826: LIST
60827: LIST
60828: PUSH
60829: LD_INT 4
60831: NEG
60832: PUSH
60833: LD_INT 4
60835: NEG
60836: PUSH
60837: EMPTY
60838: LIST
60839: LIST
60840: PUSH
60841: LD_INT 2
60843: NEG
60844: PUSH
60845: LD_INT 4
60847: NEG
60848: PUSH
60849: EMPTY
60850: LIST
60851: LIST
60852: PUSH
60853: LD_INT 4
60855: NEG
60856: PUSH
60857: LD_INT 2
60859: NEG
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 0
60867: PUSH
60868: LD_INT 4
60870: NEG
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: PUSH
60876: LD_INT 0
60878: PUSH
60879: LD_INT 5
60881: NEG
60882: PUSH
60883: EMPTY
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 1
60889: PUSH
60890: LD_INT 4
60892: NEG
60893: PUSH
60894: EMPTY
60895: LIST
60896: LIST
60897: PUSH
60898: LD_INT 1
60900: PUSH
60901: LD_INT 3
60903: NEG
60904: PUSH
60905: EMPTY
60906: LIST
60907: LIST
60908: PUSH
60909: LD_INT 0
60911: PUSH
60912: LD_INT 3
60914: NEG
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: PUSH
60920: LD_INT 1
60922: NEG
60923: PUSH
60924: LD_INT 4
60926: NEG
60927: PUSH
60928: EMPTY
60929: LIST
60930: LIST
60931: PUSH
60932: LD_INT 1
60934: NEG
60935: PUSH
60936: LD_INT 5
60938: NEG
60939: PUSH
60940: EMPTY
60941: LIST
60942: LIST
60943: PUSH
60944: LD_INT 2
60946: PUSH
60947: LD_INT 3
60949: NEG
60950: PUSH
60951: EMPTY
60952: LIST
60953: LIST
60954: PUSH
60955: LD_INT 2
60957: NEG
60958: PUSH
60959: LD_INT 5
60961: NEG
60962: PUSH
60963: EMPTY
60964: LIST
60965: LIST
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: LIST
60971: LIST
60972: LIST
60973: LIST
60974: LIST
60975: LIST
60976: LIST
60977: LIST
60978: LIST
60979: LIST
60980: LIST
60981: LIST
60982: LIST
60983: LIST
60984: LIST
60985: LIST
60986: LIST
60987: LIST
60988: LIST
60989: LIST
60990: LIST
60991: LIST
60992: LIST
60993: LIST
60994: LIST
60995: LIST
60996: LIST
60997: LIST
60998: LIST
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: LIST
61004: LIST
61005: LIST
61006: LIST
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
61014: LD_ADDR_VAR 0 31
61018: PUSH
61019: LD_INT 0
61021: PUSH
61022: LD_INT 4
61024: PUSH
61025: EMPTY
61026: LIST
61027: LIST
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 3
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: PUSH
61039: LD_INT 1
61041: PUSH
61042: LD_INT 4
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 1
61051: PUSH
61052: LD_INT 5
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 5
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: PUSH
61069: LD_INT 1
61071: NEG
61072: PUSH
61073: LD_INT 4
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: PUSH
61080: LD_INT 1
61082: NEG
61083: PUSH
61084: LD_INT 3
61086: PUSH
61087: EMPTY
61088: LIST
61089: LIST
61090: PUSH
61091: LD_INT 2
61093: PUSH
61094: LD_INT 5
61096: PUSH
61097: EMPTY
61098: LIST
61099: LIST
61100: PUSH
61101: LD_INT 2
61103: NEG
61104: PUSH
61105: LD_INT 3
61107: PUSH
61108: EMPTY
61109: LIST
61110: LIST
61111: PUSH
61112: LD_INT 3
61114: NEG
61115: PUSH
61116: LD_INT 0
61118: PUSH
61119: EMPTY
61120: LIST
61121: LIST
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: LD_INT 1
61129: NEG
61130: PUSH
61131: EMPTY
61132: LIST
61133: LIST
61134: PUSH
61135: LD_INT 2
61137: NEG
61138: PUSH
61139: LD_INT 0
61141: PUSH
61142: EMPTY
61143: LIST
61144: LIST
61145: PUSH
61146: LD_INT 2
61148: NEG
61149: PUSH
61150: LD_INT 1
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: PUSH
61157: LD_INT 3
61159: NEG
61160: PUSH
61161: LD_INT 1
61163: PUSH
61164: EMPTY
61165: LIST
61166: LIST
61167: PUSH
61168: LD_INT 4
61170: NEG
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: EMPTY
61176: LIST
61177: LIST
61178: PUSH
61179: LD_INT 4
61181: NEG
61182: PUSH
61183: LD_INT 1
61185: NEG
61186: PUSH
61187: EMPTY
61188: LIST
61189: LIST
61190: PUSH
61191: LD_INT 4
61193: NEG
61194: PUSH
61195: LD_INT 2
61197: NEG
61198: PUSH
61199: EMPTY
61200: LIST
61201: LIST
61202: PUSH
61203: LD_INT 2
61205: NEG
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 4
61216: NEG
61217: PUSH
61218: LD_INT 4
61220: NEG
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: PUSH
61226: LD_INT 4
61228: NEG
61229: PUSH
61230: LD_INT 5
61232: NEG
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 3
61240: NEG
61241: PUSH
61242: LD_INT 4
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 3
61252: NEG
61253: PUSH
61254: LD_INT 3
61256: NEG
61257: PUSH
61258: EMPTY
61259: LIST
61260: LIST
61261: PUSH
61262: LD_INT 4
61264: NEG
61265: PUSH
61266: LD_INT 3
61268: NEG
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: LD_INT 5
61276: NEG
61277: PUSH
61278: LD_INT 4
61280: NEG
61281: PUSH
61282: EMPTY
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 5
61288: NEG
61289: PUSH
61290: LD_INT 5
61292: NEG
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: PUSH
61298: LD_INT 3
61300: NEG
61301: PUSH
61302: LD_INT 5
61304: NEG
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 5
61312: NEG
61313: PUSH
61314: LD_INT 3
61316: NEG
61317: PUSH
61318: EMPTY
61319: LIST
61320: LIST
61321: PUSH
61322: LD_INT 0
61324: PUSH
61325: LD_INT 3
61327: NEG
61328: PUSH
61329: EMPTY
61330: LIST
61331: LIST
61332: PUSH
61333: LD_INT 0
61335: PUSH
61336: LD_INT 4
61338: NEG
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: PUSH
61344: LD_INT 1
61346: PUSH
61347: LD_INT 3
61349: NEG
61350: PUSH
61351: EMPTY
61352: LIST
61353: LIST
61354: PUSH
61355: LD_INT 1
61357: PUSH
61358: LD_INT 2
61360: NEG
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: PUSH
61366: LD_INT 0
61368: PUSH
61369: LD_INT 2
61371: NEG
61372: PUSH
61373: EMPTY
61374: LIST
61375: LIST
61376: PUSH
61377: LD_INT 1
61379: NEG
61380: PUSH
61381: LD_INT 3
61383: NEG
61384: PUSH
61385: EMPTY
61386: LIST
61387: LIST
61388: PUSH
61389: LD_INT 1
61391: NEG
61392: PUSH
61393: LD_INT 4
61395: NEG
61396: PUSH
61397: EMPTY
61398: LIST
61399: LIST
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: LD_INT 2
61406: NEG
61407: PUSH
61408: EMPTY
61409: LIST
61410: LIST
61411: PUSH
61412: LD_INT 2
61414: NEG
61415: PUSH
61416: LD_INT 4
61418: NEG
61419: PUSH
61420: EMPTY
61421: LIST
61422: LIST
61423: PUSH
61424: LD_INT 4
61426: PUSH
61427: LD_INT 0
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 4
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 5
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 5
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: LD_INT 4
61467: PUSH
61468: LD_INT 1
61470: PUSH
61471: EMPTY
61472: LIST
61473: LIST
61474: PUSH
61475: LD_INT 3
61477: PUSH
61478: LD_INT 0
61480: PUSH
61481: EMPTY
61482: LIST
61483: LIST
61484: PUSH
61485: LD_INT 3
61487: PUSH
61488: LD_INT 1
61490: NEG
61491: PUSH
61492: EMPTY
61493: LIST
61494: LIST
61495: PUSH
61496: LD_INT 3
61498: PUSH
61499: LD_INT 2
61501: NEG
61502: PUSH
61503: EMPTY
61504: LIST
61505: LIST
61506: PUSH
61507: LD_INT 5
61509: PUSH
61510: LD_INT 2
61512: PUSH
61513: EMPTY
61514: LIST
61515: LIST
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: LIST
61521: LIST
61522: LIST
61523: LIST
61524: LIST
61525: LIST
61526: LIST
61527: LIST
61528: LIST
61529: LIST
61530: LIST
61531: LIST
61532: LIST
61533: LIST
61534: LIST
61535: LIST
61536: LIST
61537: LIST
61538: LIST
61539: LIST
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: LIST
61545: LIST
61546: LIST
61547: LIST
61548: LIST
61549: LIST
61550: LIST
61551: LIST
61552: LIST
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: LIST
61558: LIST
61559: LIST
61560: LIST
61561: LIST
61562: LIST
61563: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
61564: LD_ADDR_VAR 0 32
61568: PUSH
61569: LD_INT 4
61571: NEG
61572: PUSH
61573: LD_INT 0
61575: PUSH
61576: EMPTY
61577: LIST
61578: LIST
61579: PUSH
61580: LD_INT 4
61582: NEG
61583: PUSH
61584: LD_INT 1
61586: NEG
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: PUSH
61592: LD_INT 3
61594: NEG
61595: PUSH
61596: LD_INT 0
61598: PUSH
61599: EMPTY
61600: LIST
61601: LIST
61602: PUSH
61603: LD_INT 3
61605: NEG
61606: PUSH
61607: LD_INT 1
61609: PUSH
61610: EMPTY
61611: LIST
61612: LIST
61613: PUSH
61614: LD_INT 4
61616: NEG
61617: PUSH
61618: LD_INT 1
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: PUSH
61625: LD_INT 5
61627: NEG
61628: PUSH
61629: LD_INT 0
61631: PUSH
61632: EMPTY
61633: LIST
61634: LIST
61635: PUSH
61636: LD_INT 5
61638: NEG
61639: PUSH
61640: LD_INT 1
61642: NEG
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 5
61650: NEG
61651: PUSH
61652: LD_INT 2
61654: NEG
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: PUSH
61660: LD_INT 3
61662: NEG
61663: PUSH
61664: LD_INT 2
61666: PUSH
61667: EMPTY
61668: LIST
61669: LIST
61670: PUSH
61671: LD_INT 3
61673: NEG
61674: PUSH
61675: LD_INT 3
61677: NEG
61678: PUSH
61679: EMPTY
61680: LIST
61681: LIST
61682: PUSH
61683: LD_INT 3
61685: NEG
61686: PUSH
61687: LD_INT 4
61689: NEG
61690: PUSH
61691: EMPTY
61692: LIST
61693: LIST
61694: PUSH
61695: LD_INT 2
61697: NEG
61698: PUSH
61699: LD_INT 3
61701: NEG
61702: PUSH
61703: EMPTY
61704: LIST
61705: LIST
61706: PUSH
61707: LD_INT 2
61709: NEG
61710: PUSH
61711: LD_INT 2
61713: NEG
61714: PUSH
61715: EMPTY
61716: LIST
61717: LIST
61718: PUSH
61719: LD_INT 3
61721: NEG
61722: PUSH
61723: LD_INT 2
61725: NEG
61726: PUSH
61727: EMPTY
61728: LIST
61729: LIST
61730: PUSH
61731: LD_INT 4
61733: NEG
61734: PUSH
61735: LD_INT 3
61737: NEG
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 4
61745: NEG
61746: PUSH
61747: LD_INT 4
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 2
61757: NEG
61758: PUSH
61759: LD_INT 4
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 4
61769: NEG
61770: PUSH
61771: LD_INT 2
61773: NEG
61774: PUSH
61775: EMPTY
61776: LIST
61777: LIST
61778: PUSH
61779: LD_INT 0
61781: PUSH
61782: LD_INT 4
61784: NEG
61785: PUSH
61786: EMPTY
61787: LIST
61788: LIST
61789: PUSH
61790: LD_INT 0
61792: PUSH
61793: LD_INT 5
61795: NEG
61796: PUSH
61797: EMPTY
61798: LIST
61799: LIST
61800: PUSH
61801: LD_INT 1
61803: PUSH
61804: LD_INT 4
61806: NEG
61807: PUSH
61808: EMPTY
61809: LIST
61810: LIST
61811: PUSH
61812: LD_INT 1
61814: PUSH
61815: LD_INT 3
61817: NEG
61818: PUSH
61819: EMPTY
61820: LIST
61821: LIST
61822: PUSH
61823: LD_INT 0
61825: PUSH
61826: LD_INT 3
61828: NEG
61829: PUSH
61830: EMPTY
61831: LIST
61832: LIST
61833: PUSH
61834: LD_INT 1
61836: NEG
61837: PUSH
61838: LD_INT 4
61840: NEG
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: PUSH
61846: LD_INT 1
61848: NEG
61849: PUSH
61850: LD_INT 5
61852: NEG
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: LD_INT 3
61863: NEG
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 2
61871: NEG
61872: PUSH
61873: LD_INT 5
61875: NEG
61876: PUSH
61877: EMPTY
61878: LIST
61879: LIST
61880: PUSH
61881: LD_INT 3
61883: PUSH
61884: LD_INT 0
61886: PUSH
61887: EMPTY
61888: LIST
61889: LIST
61890: PUSH
61891: LD_INT 3
61893: PUSH
61894: LD_INT 1
61896: NEG
61897: PUSH
61898: EMPTY
61899: LIST
61900: LIST
61901: PUSH
61902: LD_INT 4
61904: PUSH
61905: LD_INT 0
61907: PUSH
61908: EMPTY
61909: LIST
61910: LIST
61911: PUSH
61912: LD_INT 4
61914: PUSH
61915: LD_INT 1
61917: PUSH
61918: EMPTY
61919: LIST
61920: LIST
61921: PUSH
61922: LD_INT 3
61924: PUSH
61925: LD_INT 1
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 2
61944: PUSH
61945: LD_INT 1
61947: NEG
61948: PUSH
61949: EMPTY
61950: LIST
61951: LIST
61952: PUSH
61953: LD_INT 2
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 4
61966: PUSH
61967: LD_INT 2
61969: PUSH
61970: EMPTY
61971: LIST
61972: LIST
61973: PUSH
61974: LD_INT 4
61976: PUSH
61977: LD_INT 4
61979: PUSH
61980: EMPTY
61981: LIST
61982: LIST
61983: PUSH
61984: LD_INT 4
61986: PUSH
61987: LD_INT 3
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: PUSH
61994: LD_INT 5
61996: PUSH
61997: LD_INT 4
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: PUSH
62004: LD_INT 5
62006: PUSH
62007: LD_INT 5
62009: PUSH
62010: EMPTY
62011: LIST
62012: LIST
62013: PUSH
62014: LD_INT 4
62016: PUSH
62017: LD_INT 5
62019: PUSH
62020: EMPTY
62021: LIST
62022: LIST
62023: PUSH
62024: LD_INT 3
62026: PUSH
62027: LD_INT 4
62029: PUSH
62030: EMPTY
62031: LIST
62032: LIST
62033: PUSH
62034: LD_INT 3
62036: PUSH
62037: LD_INT 3
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: PUSH
62044: LD_INT 5
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: PUSH
62054: LD_INT 3
62056: PUSH
62057: LD_INT 5
62059: PUSH
62060: EMPTY
62061: LIST
62062: LIST
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: LIST
62068: LIST
62069: LIST
62070: LIST
62071: LIST
62072: LIST
62073: LIST
62074: LIST
62075: LIST
62076: LIST
62077: LIST
62078: LIST
62079: LIST
62080: LIST
62081: LIST
62082: LIST
62083: LIST
62084: LIST
62085: LIST
62086: LIST
62087: LIST
62088: LIST
62089: LIST
62090: LIST
62091: LIST
62092: LIST
62093: LIST
62094: LIST
62095: LIST
62096: LIST
62097: LIST
62098: LIST
62099: LIST
62100: LIST
62101: LIST
62102: LIST
62103: LIST
62104: LIST
62105: LIST
62106: LIST
62107: LIST
62108: LIST
62109: LIST
62110: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
62111: LD_ADDR_VAR 0 33
62115: PUSH
62116: LD_INT 4
62118: NEG
62119: PUSH
62120: LD_INT 4
62122: NEG
62123: PUSH
62124: EMPTY
62125: LIST
62126: LIST
62127: PUSH
62128: LD_INT 4
62130: NEG
62131: PUSH
62132: LD_INT 5
62134: NEG
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 3
62142: NEG
62143: PUSH
62144: LD_INT 4
62146: NEG
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: PUSH
62152: LD_INT 3
62154: NEG
62155: PUSH
62156: LD_INT 3
62158: NEG
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: PUSH
62164: LD_INT 4
62166: NEG
62167: PUSH
62168: LD_INT 3
62170: NEG
62171: PUSH
62172: EMPTY
62173: LIST
62174: LIST
62175: PUSH
62176: LD_INT 5
62178: NEG
62179: PUSH
62180: LD_INT 4
62182: NEG
62183: PUSH
62184: EMPTY
62185: LIST
62186: LIST
62187: PUSH
62188: LD_INT 5
62190: NEG
62191: PUSH
62192: LD_INT 5
62194: NEG
62195: PUSH
62196: EMPTY
62197: LIST
62198: LIST
62199: PUSH
62200: LD_INT 3
62202: NEG
62203: PUSH
62204: LD_INT 5
62206: NEG
62207: PUSH
62208: EMPTY
62209: LIST
62210: LIST
62211: PUSH
62212: LD_INT 5
62214: NEG
62215: PUSH
62216: LD_INT 3
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 0
62226: PUSH
62227: LD_INT 3
62229: NEG
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 0
62237: PUSH
62238: LD_INT 4
62240: NEG
62241: PUSH
62242: EMPTY
62243: LIST
62244: LIST
62245: PUSH
62246: LD_INT 1
62248: PUSH
62249: LD_INT 3
62251: NEG
62252: PUSH
62253: EMPTY
62254: LIST
62255: LIST
62256: PUSH
62257: LD_INT 1
62259: PUSH
62260: LD_INT 2
62262: NEG
62263: PUSH
62264: EMPTY
62265: LIST
62266: LIST
62267: PUSH
62268: LD_INT 0
62270: PUSH
62271: LD_INT 2
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: NEG
62282: PUSH
62283: LD_INT 3
62285: NEG
62286: PUSH
62287: EMPTY
62288: LIST
62289: LIST
62290: PUSH
62291: LD_INT 1
62293: NEG
62294: PUSH
62295: LD_INT 4
62297: NEG
62298: PUSH
62299: EMPTY
62300: LIST
62301: LIST
62302: PUSH
62303: LD_INT 2
62305: PUSH
62306: LD_INT 2
62308: NEG
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: LD_INT 2
62316: NEG
62317: PUSH
62318: LD_INT 4
62320: NEG
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 4
62328: PUSH
62329: LD_INT 0
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: PUSH
62336: LD_INT 4
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: LD_INT 5
62349: PUSH
62350: LD_INT 0
62352: PUSH
62353: EMPTY
62354: LIST
62355: LIST
62356: PUSH
62357: LD_INT 5
62359: PUSH
62360: LD_INT 1
62362: PUSH
62363: EMPTY
62364: LIST
62365: LIST
62366: PUSH
62367: LD_INT 4
62369: PUSH
62370: LD_INT 1
62372: PUSH
62373: EMPTY
62374: LIST
62375: LIST
62376: PUSH
62377: LD_INT 3
62379: PUSH
62380: LD_INT 0
62382: PUSH
62383: EMPTY
62384: LIST
62385: LIST
62386: PUSH
62387: LD_INT 3
62389: PUSH
62390: LD_INT 1
62392: NEG
62393: PUSH
62394: EMPTY
62395: LIST
62396: LIST
62397: PUSH
62398: LD_INT 3
62400: PUSH
62401: LD_INT 2
62403: NEG
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: PUSH
62409: LD_INT 5
62411: PUSH
62412: LD_INT 2
62414: PUSH
62415: EMPTY
62416: LIST
62417: LIST
62418: PUSH
62419: LD_INT 3
62421: PUSH
62422: LD_INT 3
62424: PUSH
62425: EMPTY
62426: LIST
62427: LIST
62428: PUSH
62429: LD_INT 3
62431: PUSH
62432: LD_INT 2
62434: PUSH
62435: EMPTY
62436: LIST
62437: LIST
62438: PUSH
62439: LD_INT 4
62441: PUSH
62442: LD_INT 3
62444: PUSH
62445: EMPTY
62446: LIST
62447: LIST
62448: PUSH
62449: LD_INT 4
62451: PUSH
62452: LD_INT 4
62454: PUSH
62455: EMPTY
62456: LIST
62457: LIST
62458: PUSH
62459: LD_INT 3
62461: PUSH
62462: LD_INT 4
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: PUSH
62469: LD_INT 2
62471: PUSH
62472: LD_INT 3
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: LD_INT 2
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 4
62491: PUSH
62492: LD_INT 2
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: LD_INT 4
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 0
62511: PUSH
62512: LD_INT 4
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 3
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: LD_INT 4
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: PUSH
62539: LD_INT 1
62541: PUSH
62542: LD_INT 5
62544: PUSH
62545: EMPTY
62546: LIST
62547: LIST
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: LD_INT 5
62554: PUSH
62555: EMPTY
62556: LIST
62557: LIST
62558: PUSH
62559: LD_INT 1
62561: NEG
62562: PUSH
62563: LD_INT 4
62565: PUSH
62566: EMPTY
62567: LIST
62568: LIST
62569: PUSH
62570: LD_INT 1
62572: NEG
62573: PUSH
62574: LD_INT 3
62576: PUSH
62577: EMPTY
62578: LIST
62579: LIST
62580: PUSH
62581: LD_INT 2
62583: PUSH
62584: LD_INT 5
62586: PUSH
62587: EMPTY
62588: LIST
62589: LIST
62590: PUSH
62591: LD_INT 2
62593: NEG
62594: PUSH
62595: LD_INT 3
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: LIST
62606: LIST
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: LIST
62615: LIST
62616: LIST
62617: LIST
62618: LIST
62619: LIST
62620: LIST
62621: LIST
62622: LIST
62623: LIST
62624: LIST
62625: LIST
62626: LIST
62627: LIST
62628: LIST
62629: LIST
62630: LIST
62631: LIST
62632: LIST
62633: LIST
62634: LIST
62635: LIST
62636: LIST
62637: LIST
62638: LIST
62639: LIST
62640: LIST
62641: LIST
62642: LIST
62643: LIST
62644: LIST
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
62649: LD_ADDR_VAR 0 34
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 4
62659: NEG
62660: PUSH
62661: EMPTY
62662: LIST
62663: LIST
62664: PUSH
62665: LD_INT 0
62667: PUSH
62668: LD_INT 5
62670: NEG
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: PUSH
62676: LD_INT 1
62678: PUSH
62679: LD_INT 4
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 1
62689: PUSH
62690: LD_INT 3
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 3
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 1
62711: NEG
62712: PUSH
62713: LD_INT 4
62715: NEG
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: LD_INT 5
62727: NEG
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: PUSH
62733: LD_INT 2
62735: PUSH
62736: LD_INT 3
62738: NEG
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: PUSH
62744: LD_INT 2
62746: NEG
62747: PUSH
62748: LD_INT 5
62750: NEG
62751: PUSH
62752: EMPTY
62753: LIST
62754: LIST
62755: PUSH
62756: LD_INT 3
62758: PUSH
62759: LD_INT 0
62761: PUSH
62762: EMPTY
62763: LIST
62764: LIST
62765: PUSH
62766: LD_INT 3
62768: PUSH
62769: LD_INT 1
62771: NEG
62772: PUSH
62773: EMPTY
62774: LIST
62775: LIST
62776: PUSH
62777: LD_INT 4
62779: PUSH
62780: LD_INT 0
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 4
62789: PUSH
62790: LD_INT 1
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 3
62799: PUSH
62800: LD_INT 1
62802: PUSH
62803: EMPTY
62804: LIST
62805: LIST
62806: PUSH
62807: LD_INT 2
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: EMPTY
62814: LIST
62815: LIST
62816: PUSH
62817: LD_INT 2
62819: PUSH
62820: LD_INT 1
62822: NEG
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 2
62830: PUSH
62831: LD_INT 2
62833: NEG
62834: PUSH
62835: EMPTY
62836: LIST
62837: LIST
62838: PUSH
62839: LD_INT 4
62841: PUSH
62842: LD_INT 2
62844: PUSH
62845: EMPTY
62846: LIST
62847: LIST
62848: PUSH
62849: LD_INT 4
62851: PUSH
62852: LD_INT 4
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 4
62861: PUSH
62862: LD_INT 3
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 5
62871: PUSH
62872: LD_INT 4
62874: PUSH
62875: EMPTY
62876: LIST
62877: LIST
62878: PUSH
62879: LD_INT 5
62881: PUSH
62882: LD_INT 5
62884: PUSH
62885: EMPTY
62886: LIST
62887: LIST
62888: PUSH
62889: LD_INT 4
62891: PUSH
62892: LD_INT 5
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: PUSH
62899: LD_INT 3
62901: PUSH
62902: LD_INT 4
62904: PUSH
62905: EMPTY
62906: LIST
62907: LIST
62908: PUSH
62909: LD_INT 3
62911: PUSH
62912: LD_INT 3
62914: PUSH
62915: EMPTY
62916: LIST
62917: LIST
62918: PUSH
62919: LD_INT 5
62921: PUSH
62922: LD_INT 3
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: LD_INT 3
62931: PUSH
62932: LD_INT 5
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 0
62941: PUSH
62942: LD_INT 3
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 0
62951: PUSH
62952: LD_INT 2
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 1
62961: PUSH
62962: LD_INT 3
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 4
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 4
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 3
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 1
63002: NEG
63003: PUSH
63004: LD_INT 2
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: PUSH
63014: LD_INT 4
63016: PUSH
63017: EMPTY
63018: LIST
63019: LIST
63020: PUSH
63021: LD_INT 2
63023: NEG
63024: PUSH
63025: LD_INT 2
63027: PUSH
63028: EMPTY
63029: LIST
63030: LIST
63031: PUSH
63032: LD_INT 4
63034: NEG
63035: PUSH
63036: LD_INT 0
63038: PUSH
63039: EMPTY
63040: LIST
63041: LIST
63042: PUSH
63043: LD_INT 4
63045: NEG
63046: PUSH
63047: LD_INT 1
63049: NEG
63050: PUSH
63051: EMPTY
63052: LIST
63053: LIST
63054: PUSH
63055: LD_INT 3
63057: NEG
63058: PUSH
63059: LD_INT 0
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 3
63068: NEG
63069: PUSH
63070: LD_INT 1
63072: PUSH
63073: EMPTY
63074: LIST
63075: LIST
63076: PUSH
63077: LD_INT 4
63079: NEG
63080: PUSH
63081: LD_INT 1
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: PUSH
63088: LD_INT 5
63090: NEG
63091: PUSH
63092: LD_INT 0
63094: PUSH
63095: EMPTY
63096: LIST
63097: LIST
63098: PUSH
63099: LD_INT 5
63101: NEG
63102: PUSH
63103: LD_INT 1
63105: NEG
63106: PUSH
63107: EMPTY
63108: LIST
63109: LIST
63110: PUSH
63111: LD_INT 5
63113: NEG
63114: PUSH
63115: LD_INT 2
63117: NEG
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 3
63125: NEG
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: LIST
63145: LIST
63146: LIST
63147: LIST
63148: LIST
63149: LIST
63150: LIST
63151: LIST
63152: LIST
63153: LIST
63154: LIST
63155: LIST
63156: LIST
63157: LIST
63158: LIST
63159: LIST
63160: LIST
63161: LIST
63162: LIST
63163: LIST
63164: LIST
63165: LIST
63166: LIST
63167: LIST
63168: LIST
63169: LIST
63170: LIST
63171: LIST
63172: LIST
63173: LIST
63174: LIST
63175: LIST
63176: LIST
63177: LIST
63178: LIST
63179: LIST
63180: ST_TO_ADDR
// end ; end ;
63181: GO 63184
63183: POP
// case btype of b_depot , b_warehouse :
63184: LD_VAR 0 1
63188: PUSH
63189: LD_INT 0
63191: DOUBLE
63192: EQUAL
63193: IFTRUE 63203
63195: LD_INT 1
63197: DOUBLE
63198: EQUAL
63199: IFTRUE 63203
63201: GO 63404
63203: POP
// case nation of nation_american :
63204: LD_VAR 0 5
63208: PUSH
63209: LD_INT 1
63211: DOUBLE
63212: EQUAL
63213: IFTRUE 63217
63215: GO 63273
63217: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
63218: LD_ADDR_VAR 0 9
63222: PUSH
63223: LD_VAR 0 11
63227: PUSH
63228: LD_VAR 0 12
63232: PUSH
63233: LD_VAR 0 13
63237: PUSH
63238: LD_VAR 0 14
63242: PUSH
63243: LD_VAR 0 15
63247: PUSH
63248: LD_VAR 0 16
63252: PUSH
63253: EMPTY
63254: LIST
63255: LIST
63256: LIST
63257: LIST
63258: LIST
63259: LIST
63260: PUSH
63261: LD_VAR 0 4
63265: PUSH
63266: LD_INT 1
63268: PLUS
63269: ARRAY
63270: ST_TO_ADDR
63271: GO 63402
63273: LD_INT 2
63275: DOUBLE
63276: EQUAL
63277: IFTRUE 63281
63279: GO 63337
63281: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
63282: LD_ADDR_VAR 0 9
63286: PUSH
63287: LD_VAR 0 17
63291: PUSH
63292: LD_VAR 0 18
63296: PUSH
63297: LD_VAR 0 19
63301: PUSH
63302: LD_VAR 0 20
63306: PUSH
63307: LD_VAR 0 21
63311: PUSH
63312: LD_VAR 0 22
63316: PUSH
63317: EMPTY
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: PUSH
63325: LD_VAR 0 4
63329: PUSH
63330: LD_INT 1
63332: PLUS
63333: ARRAY
63334: ST_TO_ADDR
63335: GO 63402
63337: LD_INT 3
63339: DOUBLE
63340: EQUAL
63341: IFTRUE 63345
63343: GO 63401
63345: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
63346: LD_ADDR_VAR 0 9
63350: PUSH
63351: LD_VAR 0 23
63355: PUSH
63356: LD_VAR 0 24
63360: PUSH
63361: LD_VAR 0 25
63365: PUSH
63366: LD_VAR 0 26
63370: PUSH
63371: LD_VAR 0 27
63375: PUSH
63376: LD_VAR 0 28
63380: PUSH
63381: EMPTY
63382: LIST
63383: LIST
63384: LIST
63385: LIST
63386: LIST
63387: LIST
63388: PUSH
63389: LD_VAR 0 4
63393: PUSH
63394: LD_INT 1
63396: PLUS
63397: ARRAY
63398: ST_TO_ADDR
63399: GO 63402
63401: POP
63402: GO 63957
63404: LD_INT 2
63406: DOUBLE
63407: EQUAL
63408: IFTRUE 63418
63410: LD_INT 3
63412: DOUBLE
63413: EQUAL
63414: IFTRUE 63418
63416: GO 63474
63418: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
63419: LD_ADDR_VAR 0 9
63423: PUSH
63424: LD_VAR 0 29
63428: PUSH
63429: LD_VAR 0 30
63433: PUSH
63434: LD_VAR 0 31
63438: PUSH
63439: LD_VAR 0 32
63443: PUSH
63444: LD_VAR 0 33
63448: PUSH
63449: LD_VAR 0 34
63453: PUSH
63454: EMPTY
63455: LIST
63456: LIST
63457: LIST
63458: LIST
63459: LIST
63460: LIST
63461: PUSH
63462: LD_VAR 0 4
63466: PUSH
63467: LD_INT 1
63469: PLUS
63470: ARRAY
63471: ST_TO_ADDR
63472: GO 63957
63474: LD_INT 16
63476: DOUBLE
63477: EQUAL
63478: IFTRUE 63536
63480: LD_INT 17
63482: DOUBLE
63483: EQUAL
63484: IFTRUE 63536
63486: LD_INT 18
63488: DOUBLE
63489: EQUAL
63490: IFTRUE 63536
63492: LD_INT 19
63494: DOUBLE
63495: EQUAL
63496: IFTRUE 63536
63498: LD_INT 22
63500: DOUBLE
63501: EQUAL
63502: IFTRUE 63536
63504: LD_INT 20
63506: DOUBLE
63507: EQUAL
63508: IFTRUE 63536
63510: LD_INT 21
63512: DOUBLE
63513: EQUAL
63514: IFTRUE 63536
63516: LD_INT 23
63518: DOUBLE
63519: EQUAL
63520: IFTRUE 63536
63522: LD_INT 24
63524: DOUBLE
63525: EQUAL
63526: IFTRUE 63536
63528: LD_INT 25
63530: DOUBLE
63531: EQUAL
63532: IFTRUE 63536
63534: GO 63592
63536: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
63537: LD_ADDR_VAR 0 9
63541: PUSH
63542: LD_VAR 0 35
63546: PUSH
63547: LD_VAR 0 36
63551: PUSH
63552: LD_VAR 0 37
63556: PUSH
63557: LD_VAR 0 38
63561: PUSH
63562: LD_VAR 0 39
63566: PUSH
63567: LD_VAR 0 40
63571: PUSH
63572: EMPTY
63573: LIST
63574: LIST
63575: LIST
63576: LIST
63577: LIST
63578: LIST
63579: PUSH
63580: LD_VAR 0 4
63584: PUSH
63585: LD_INT 1
63587: PLUS
63588: ARRAY
63589: ST_TO_ADDR
63590: GO 63957
63592: LD_INT 6
63594: DOUBLE
63595: EQUAL
63596: IFTRUE 63648
63598: LD_INT 7
63600: DOUBLE
63601: EQUAL
63602: IFTRUE 63648
63604: LD_INT 8
63606: DOUBLE
63607: EQUAL
63608: IFTRUE 63648
63610: LD_INT 13
63612: DOUBLE
63613: EQUAL
63614: IFTRUE 63648
63616: LD_INT 12
63618: DOUBLE
63619: EQUAL
63620: IFTRUE 63648
63622: LD_INT 15
63624: DOUBLE
63625: EQUAL
63626: IFTRUE 63648
63628: LD_INT 11
63630: DOUBLE
63631: EQUAL
63632: IFTRUE 63648
63634: LD_INT 14
63636: DOUBLE
63637: EQUAL
63638: IFTRUE 63648
63640: LD_INT 10
63642: DOUBLE
63643: EQUAL
63644: IFTRUE 63648
63646: GO 63704
63648: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
63649: LD_ADDR_VAR 0 9
63653: PUSH
63654: LD_VAR 0 41
63658: PUSH
63659: LD_VAR 0 42
63663: PUSH
63664: LD_VAR 0 43
63668: PUSH
63669: LD_VAR 0 44
63673: PUSH
63674: LD_VAR 0 45
63678: PUSH
63679: LD_VAR 0 46
63683: PUSH
63684: EMPTY
63685: LIST
63686: LIST
63687: LIST
63688: LIST
63689: LIST
63690: LIST
63691: PUSH
63692: LD_VAR 0 4
63696: PUSH
63697: LD_INT 1
63699: PLUS
63700: ARRAY
63701: ST_TO_ADDR
63702: GO 63957
63704: LD_INT 36
63706: DOUBLE
63707: EQUAL
63708: IFTRUE 63712
63710: GO 63768
63712: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
63713: LD_ADDR_VAR 0 9
63717: PUSH
63718: LD_VAR 0 47
63722: PUSH
63723: LD_VAR 0 48
63727: PUSH
63728: LD_VAR 0 49
63732: PUSH
63733: LD_VAR 0 50
63737: PUSH
63738: LD_VAR 0 51
63742: PUSH
63743: LD_VAR 0 52
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: LIST
63752: LIST
63753: LIST
63754: LIST
63755: PUSH
63756: LD_VAR 0 4
63760: PUSH
63761: LD_INT 1
63763: PLUS
63764: ARRAY
63765: ST_TO_ADDR
63766: GO 63957
63768: LD_INT 4
63770: DOUBLE
63771: EQUAL
63772: IFTRUE 63794
63774: LD_INT 5
63776: DOUBLE
63777: EQUAL
63778: IFTRUE 63794
63780: LD_INT 34
63782: DOUBLE
63783: EQUAL
63784: IFTRUE 63794
63786: LD_INT 37
63788: DOUBLE
63789: EQUAL
63790: IFTRUE 63794
63792: GO 63850
63794: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
63795: LD_ADDR_VAR 0 9
63799: PUSH
63800: LD_VAR 0 53
63804: PUSH
63805: LD_VAR 0 54
63809: PUSH
63810: LD_VAR 0 55
63814: PUSH
63815: LD_VAR 0 56
63819: PUSH
63820: LD_VAR 0 57
63824: PUSH
63825: LD_VAR 0 58
63829: PUSH
63830: EMPTY
63831: LIST
63832: LIST
63833: LIST
63834: LIST
63835: LIST
63836: LIST
63837: PUSH
63838: LD_VAR 0 4
63842: PUSH
63843: LD_INT 1
63845: PLUS
63846: ARRAY
63847: ST_TO_ADDR
63848: GO 63957
63850: LD_INT 31
63852: DOUBLE
63853: EQUAL
63854: IFTRUE 63900
63856: LD_INT 32
63858: DOUBLE
63859: EQUAL
63860: IFTRUE 63900
63862: LD_INT 33
63864: DOUBLE
63865: EQUAL
63866: IFTRUE 63900
63868: LD_INT 27
63870: DOUBLE
63871: EQUAL
63872: IFTRUE 63900
63874: LD_INT 26
63876: DOUBLE
63877: EQUAL
63878: IFTRUE 63900
63880: LD_INT 28
63882: DOUBLE
63883: EQUAL
63884: IFTRUE 63900
63886: LD_INT 29
63888: DOUBLE
63889: EQUAL
63890: IFTRUE 63900
63892: LD_INT 30
63894: DOUBLE
63895: EQUAL
63896: IFTRUE 63900
63898: GO 63956
63900: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
63901: LD_ADDR_VAR 0 9
63905: PUSH
63906: LD_VAR 0 59
63910: PUSH
63911: LD_VAR 0 60
63915: PUSH
63916: LD_VAR 0 61
63920: PUSH
63921: LD_VAR 0 62
63925: PUSH
63926: LD_VAR 0 63
63930: PUSH
63931: LD_VAR 0 64
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: LIST
63940: LIST
63941: LIST
63942: LIST
63943: PUSH
63944: LD_VAR 0 4
63948: PUSH
63949: LD_INT 1
63951: PLUS
63952: ARRAY
63953: ST_TO_ADDR
63954: GO 63957
63956: POP
// temp_list2 = [ ] ;
63957: LD_ADDR_VAR 0 10
63961: PUSH
63962: EMPTY
63963: ST_TO_ADDR
// for i in temp_list do
63964: LD_ADDR_VAR 0 8
63968: PUSH
63969: LD_VAR 0 9
63973: PUSH
63974: FOR_IN
63975: IFFALSE 64027
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
63977: LD_ADDR_VAR 0 10
63981: PUSH
63982: LD_VAR 0 10
63986: PUSH
63987: LD_VAR 0 8
63991: PUSH
63992: LD_INT 1
63994: ARRAY
63995: PUSH
63996: LD_VAR 0 2
64000: PLUS
64001: PUSH
64002: LD_VAR 0 8
64006: PUSH
64007: LD_INT 2
64009: ARRAY
64010: PUSH
64011: LD_VAR 0 3
64015: PLUS
64016: PUSH
64017: EMPTY
64018: LIST
64019: LIST
64020: PUSH
64021: EMPTY
64022: LIST
64023: ADD
64024: ST_TO_ADDR
64025: GO 63974
64027: POP
64028: POP
// result = temp_list2 ;
64029: LD_ADDR_VAR 0 7
64033: PUSH
64034: LD_VAR 0 10
64038: ST_TO_ADDR
// end ;
64039: LD_VAR 0 7
64043: RET
// export function EnemyInRange ( unit , dist ) ; begin
64044: LD_INT 0
64046: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
64047: LD_ADDR_VAR 0 3
64051: PUSH
64052: LD_VAR 0 1
64056: PPUSH
64057: CALL_OW 255
64061: PPUSH
64062: LD_VAR 0 1
64066: PPUSH
64067: CALL_OW 250
64071: PPUSH
64072: LD_VAR 0 1
64076: PPUSH
64077: CALL_OW 251
64081: PPUSH
64082: LD_VAR 0 2
64086: PPUSH
64087: CALL 37815 0 4
64091: PUSH
64092: LD_INT 4
64094: ARRAY
64095: ST_TO_ADDR
// end ;
64096: LD_VAR 0 3
64100: RET
// export function PlayerSeeMe ( unit ) ; begin
64101: LD_INT 0
64103: PPUSH
// result := See ( your_side , unit ) ;
64104: LD_ADDR_VAR 0 2
64108: PUSH
64109: LD_OWVAR 2
64113: PPUSH
64114: LD_VAR 0 1
64118: PPUSH
64119: CALL_OW 292
64123: ST_TO_ADDR
// end ;
64124: LD_VAR 0 2
64128: RET
// export function ReverseDir ( unit ) ; begin
64129: LD_INT 0
64131: PPUSH
// if not unit then
64132: LD_VAR 0 1
64136: NOT
64137: IFFALSE 64141
// exit ;
64139: GO 64164
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
64141: LD_ADDR_VAR 0 2
64145: PUSH
64146: LD_VAR 0 1
64150: PPUSH
64151: CALL_OW 254
64155: PUSH
64156: LD_INT 3
64158: PLUS
64159: PUSH
64160: LD_INT 6
64162: MOD
64163: ST_TO_ADDR
// end ;
64164: LD_VAR 0 2
64168: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
64169: LD_INT 0
64171: PPUSH
64172: PPUSH
64173: PPUSH
64174: PPUSH
64175: PPUSH
// if not hexes then
64176: LD_VAR 0 2
64180: NOT
64181: IFFALSE 64185
// exit ;
64183: GO 64333
// dist := 9999 ;
64185: LD_ADDR_VAR 0 5
64189: PUSH
64190: LD_INT 9999
64192: ST_TO_ADDR
// for i = 1 to hexes do
64193: LD_ADDR_VAR 0 4
64197: PUSH
64198: DOUBLE
64199: LD_INT 1
64201: DEC
64202: ST_TO_ADDR
64203: LD_VAR 0 2
64207: PUSH
64208: FOR_TO
64209: IFFALSE 64321
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
64211: LD_VAR 0 1
64215: PPUSH
64216: LD_VAR 0 2
64220: PUSH
64221: LD_VAR 0 4
64225: ARRAY
64226: PUSH
64227: LD_INT 1
64229: ARRAY
64230: PPUSH
64231: LD_VAR 0 2
64235: PUSH
64236: LD_VAR 0 4
64240: ARRAY
64241: PUSH
64242: LD_INT 2
64244: ARRAY
64245: PPUSH
64246: CALL_OW 297
64250: PUSH
64251: LD_VAR 0 5
64255: LESS
64256: IFFALSE 64319
// begin hex := hexes [ i ] ;
64258: LD_ADDR_VAR 0 7
64262: PUSH
64263: LD_VAR 0 2
64267: PUSH
64268: LD_VAR 0 4
64272: ARRAY
64273: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64274: LD_ADDR_VAR 0 5
64278: PUSH
64279: LD_VAR 0 1
64283: PPUSH
64284: LD_VAR 0 2
64288: PUSH
64289: LD_VAR 0 4
64293: ARRAY
64294: PUSH
64295: LD_INT 1
64297: ARRAY
64298: PPUSH
64299: LD_VAR 0 2
64303: PUSH
64304: LD_VAR 0 4
64308: ARRAY
64309: PUSH
64310: LD_INT 2
64312: ARRAY
64313: PPUSH
64314: CALL_OW 297
64318: ST_TO_ADDR
// end ; end ;
64319: GO 64208
64321: POP
64322: POP
// result := hex ;
64323: LD_ADDR_VAR 0 3
64327: PUSH
64328: LD_VAR 0 7
64332: ST_TO_ADDR
// end ;
64333: LD_VAR 0 3
64337: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
64338: LD_INT 0
64340: PPUSH
64341: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
64342: LD_VAR 0 1
64346: NOT
64347: PUSH
64348: LD_VAR 0 1
64352: PUSH
64353: LD_INT 21
64355: PUSH
64356: LD_INT 2
64358: PUSH
64359: EMPTY
64360: LIST
64361: LIST
64362: PUSH
64363: LD_INT 23
64365: PUSH
64366: LD_INT 2
64368: PUSH
64369: EMPTY
64370: LIST
64371: LIST
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PPUSH
64377: CALL_OW 69
64381: IN
64382: NOT
64383: OR
64384: IFFALSE 64388
// exit ;
64386: GO 64435
// for i = 1 to 3 do
64388: LD_ADDR_VAR 0 3
64392: PUSH
64393: DOUBLE
64394: LD_INT 1
64396: DEC
64397: ST_TO_ADDR
64398: LD_INT 3
64400: PUSH
64401: FOR_TO
64402: IFFALSE 64433
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
64404: LD_VAR 0 1
64408: PPUSH
64409: CALL_OW 250
64413: PPUSH
64414: LD_VAR 0 1
64418: PPUSH
64419: CALL_OW 251
64423: PPUSH
64424: LD_INT 1
64426: PPUSH
64427: CALL_OW 453
64431: GO 64401
64433: POP
64434: POP
// end ;
64435: LD_VAR 0 2
64439: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
64440: LD_INT 0
64442: PPUSH
64443: PPUSH
64444: PPUSH
64445: PPUSH
64446: PPUSH
64447: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
64448: LD_VAR 0 1
64452: NOT
64453: PUSH
64454: LD_VAR 0 2
64458: NOT
64459: OR
64460: PUSH
64461: LD_VAR 0 1
64465: PPUSH
64466: CALL_OW 314
64470: OR
64471: IFFALSE 64475
// exit ;
64473: GO 64916
// x := GetX ( enemy_unit ) ;
64475: LD_ADDR_VAR 0 7
64479: PUSH
64480: LD_VAR 0 2
64484: PPUSH
64485: CALL_OW 250
64489: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
64490: LD_ADDR_VAR 0 8
64494: PUSH
64495: LD_VAR 0 2
64499: PPUSH
64500: CALL_OW 251
64504: ST_TO_ADDR
// if not x or not y then
64505: LD_VAR 0 7
64509: NOT
64510: PUSH
64511: LD_VAR 0 8
64515: NOT
64516: OR
64517: IFFALSE 64521
// exit ;
64519: GO 64916
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
64521: LD_ADDR_VAR 0 6
64525: PUSH
64526: LD_VAR 0 7
64530: PPUSH
64531: LD_INT 0
64533: PPUSH
64534: LD_INT 4
64536: PPUSH
64537: CALL_OW 272
64541: PUSH
64542: LD_VAR 0 8
64546: PPUSH
64547: LD_INT 0
64549: PPUSH
64550: LD_INT 4
64552: PPUSH
64553: CALL_OW 273
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_VAR 0 7
64566: PPUSH
64567: LD_INT 1
64569: PPUSH
64570: LD_INT 4
64572: PPUSH
64573: CALL_OW 272
64577: PUSH
64578: LD_VAR 0 8
64582: PPUSH
64583: LD_INT 1
64585: PPUSH
64586: LD_INT 4
64588: PPUSH
64589: CALL_OW 273
64593: PUSH
64594: EMPTY
64595: LIST
64596: LIST
64597: PUSH
64598: LD_VAR 0 7
64602: PPUSH
64603: LD_INT 2
64605: PPUSH
64606: LD_INT 4
64608: PPUSH
64609: CALL_OW 272
64613: PUSH
64614: LD_VAR 0 8
64618: PPUSH
64619: LD_INT 2
64621: PPUSH
64622: LD_INT 4
64624: PPUSH
64625: CALL_OW 273
64629: PUSH
64630: EMPTY
64631: LIST
64632: LIST
64633: PUSH
64634: LD_VAR 0 7
64638: PPUSH
64639: LD_INT 3
64641: PPUSH
64642: LD_INT 4
64644: PPUSH
64645: CALL_OW 272
64649: PUSH
64650: LD_VAR 0 8
64654: PPUSH
64655: LD_INT 3
64657: PPUSH
64658: LD_INT 4
64660: PPUSH
64661: CALL_OW 273
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_VAR 0 7
64674: PPUSH
64675: LD_INT 4
64677: PPUSH
64678: LD_INT 4
64680: PPUSH
64681: CALL_OW 272
64685: PUSH
64686: LD_VAR 0 8
64690: PPUSH
64691: LD_INT 4
64693: PPUSH
64694: LD_INT 4
64696: PPUSH
64697: CALL_OW 273
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_VAR 0 7
64710: PPUSH
64711: LD_INT 5
64713: PPUSH
64714: LD_INT 4
64716: PPUSH
64717: CALL_OW 272
64721: PUSH
64722: LD_VAR 0 8
64726: PPUSH
64727: LD_INT 5
64729: PPUSH
64730: LD_INT 4
64732: PPUSH
64733: CALL_OW 273
64737: PUSH
64738: EMPTY
64739: LIST
64740: LIST
64741: PUSH
64742: EMPTY
64743: LIST
64744: LIST
64745: LIST
64746: LIST
64747: LIST
64748: LIST
64749: ST_TO_ADDR
// for i = tmp downto 1 do
64750: LD_ADDR_VAR 0 4
64754: PUSH
64755: DOUBLE
64756: LD_VAR 0 6
64760: INC
64761: ST_TO_ADDR
64762: LD_INT 1
64764: PUSH
64765: FOR_DOWNTO
64766: IFFALSE 64867
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
64768: LD_VAR 0 6
64772: PUSH
64773: LD_VAR 0 4
64777: ARRAY
64778: PUSH
64779: LD_INT 1
64781: ARRAY
64782: PPUSH
64783: LD_VAR 0 6
64787: PUSH
64788: LD_VAR 0 4
64792: ARRAY
64793: PUSH
64794: LD_INT 2
64796: ARRAY
64797: PPUSH
64798: CALL_OW 488
64802: NOT
64803: PUSH
64804: LD_VAR 0 6
64808: PUSH
64809: LD_VAR 0 4
64813: ARRAY
64814: PUSH
64815: LD_INT 1
64817: ARRAY
64818: PPUSH
64819: LD_VAR 0 6
64823: PUSH
64824: LD_VAR 0 4
64828: ARRAY
64829: PUSH
64830: LD_INT 2
64832: ARRAY
64833: PPUSH
64834: CALL_OW 428
64838: PUSH
64839: LD_INT 0
64841: NONEQUAL
64842: OR
64843: IFFALSE 64865
// tmp := Delete ( tmp , i ) ;
64845: LD_ADDR_VAR 0 6
64849: PUSH
64850: LD_VAR 0 6
64854: PPUSH
64855: LD_VAR 0 4
64859: PPUSH
64860: CALL_OW 3
64864: ST_TO_ADDR
64865: GO 64765
64867: POP
64868: POP
// j := GetClosestHex ( unit , tmp ) ;
64869: LD_ADDR_VAR 0 5
64873: PUSH
64874: LD_VAR 0 1
64878: PPUSH
64879: LD_VAR 0 6
64883: PPUSH
64884: CALL 64169 0 2
64888: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
64889: LD_VAR 0 1
64893: PPUSH
64894: LD_VAR 0 5
64898: PUSH
64899: LD_INT 1
64901: ARRAY
64902: PPUSH
64903: LD_VAR 0 5
64907: PUSH
64908: LD_INT 2
64910: ARRAY
64911: PPUSH
64912: CALL_OW 111
// end ;
64916: LD_VAR 0 3
64920: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
64921: LD_INT 0
64923: PPUSH
64924: PPUSH
64925: PPUSH
// uc_side = 0 ;
64926: LD_ADDR_OWVAR 20
64930: PUSH
64931: LD_INT 0
64933: ST_TO_ADDR
// uc_nation = 0 ;
64934: LD_ADDR_OWVAR 21
64938: PUSH
64939: LD_INT 0
64941: ST_TO_ADDR
// InitHc_All ( ) ;
64942: CALL_OW 584
// InitVc ;
64946: CALL_OW 20
// if mastodonts then
64950: LD_VAR 0 6
64954: IFFALSE 65021
// for i = 1 to mastodonts do
64956: LD_ADDR_VAR 0 11
64960: PUSH
64961: DOUBLE
64962: LD_INT 1
64964: DEC
64965: ST_TO_ADDR
64966: LD_VAR 0 6
64970: PUSH
64971: FOR_TO
64972: IFFALSE 65019
// begin vc_chassis := 31 ;
64974: LD_ADDR_OWVAR 37
64978: PUSH
64979: LD_INT 31
64981: ST_TO_ADDR
// vc_control := control_rider ;
64982: LD_ADDR_OWVAR 38
64986: PUSH
64987: LD_INT 4
64989: ST_TO_ADDR
// animal := CreateVehicle ;
64990: LD_ADDR_VAR 0 12
64994: PUSH
64995: CALL_OW 45
64999: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65000: LD_VAR 0 12
65004: PPUSH
65005: LD_VAR 0 8
65009: PPUSH
65010: LD_INT 0
65012: PPUSH
65013: CALL 67209 0 3
// end ;
65017: GO 64971
65019: POP
65020: POP
// if horses then
65021: LD_VAR 0 5
65025: IFFALSE 65092
// for i = 1 to horses do
65027: LD_ADDR_VAR 0 11
65031: PUSH
65032: DOUBLE
65033: LD_INT 1
65035: DEC
65036: ST_TO_ADDR
65037: LD_VAR 0 5
65041: PUSH
65042: FOR_TO
65043: IFFALSE 65090
// begin hc_class := 21 ;
65045: LD_ADDR_OWVAR 28
65049: PUSH
65050: LD_INT 21
65052: ST_TO_ADDR
// hc_gallery :=  ;
65053: LD_ADDR_OWVAR 33
65057: PUSH
65058: LD_STRING 
65060: ST_TO_ADDR
// animal := CreateHuman ;
65061: LD_ADDR_VAR 0 12
65065: PUSH
65066: CALL_OW 44
65070: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65071: LD_VAR 0 12
65075: PPUSH
65076: LD_VAR 0 8
65080: PPUSH
65081: LD_INT 0
65083: PPUSH
65084: CALL 67209 0 3
// end ;
65088: GO 65042
65090: POP
65091: POP
// if birds then
65092: LD_VAR 0 1
65096: IFFALSE 65163
// for i = 1 to birds do
65098: LD_ADDR_VAR 0 11
65102: PUSH
65103: DOUBLE
65104: LD_INT 1
65106: DEC
65107: ST_TO_ADDR
65108: LD_VAR 0 1
65112: PUSH
65113: FOR_TO
65114: IFFALSE 65161
// begin hc_class = 18 ;
65116: LD_ADDR_OWVAR 28
65120: PUSH
65121: LD_INT 18
65123: ST_TO_ADDR
// hc_gallery =  ;
65124: LD_ADDR_OWVAR 33
65128: PUSH
65129: LD_STRING 
65131: ST_TO_ADDR
// animal := CreateHuman ;
65132: LD_ADDR_VAR 0 12
65136: PUSH
65137: CALL_OW 44
65141: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65142: LD_VAR 0 12
65146: PPUSH
65147: LD_VAR 0 8
65151: PPUSH
65152: LD_INT 0
65154: PPUSH
65155: CALL 67209 0 3
// end ;
65159: GO 65113
65161: POP
65162: POP
// if tigers then
65163: LD_VAR 0 2
65167: IFFALSE 65251
// for i = 1 to tigers do
65169: LD_ADDR_VAR 0 11
65173: PUSH
65174: DOUBLE
65175: LD_INT 1
65177: DEC
65178: ST_TO_ADDR
65179: LD_VAR 0 2
65183: PUSH
65184: FOR_TO
65185: IFFALSE 65249
// begin hc_class = class_tiger ;
65187: LD_ADDR_OWVAR 28
65191: PUSH
65192: LD_INT 14
65194: ST_TO_ADDR
// hc_gallery =  ;
65195: LD_ADDR_OWVAR 33
65199: PUSH
65200: LD_STRING 
65202: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
65203: LD_ADDR_OWVAR 35
65207: PUSH
65208: LD_INT 7
65210: NEG
65211: PPUSH
65212: LD_INT 7
65214: PPUSH
65215: CALL_OW 12
65219: ST_TO_ADDR
// animal := CreateHuman ;
65220: LD_ADDR_VAR 0 12
65224: PUSH
65225: CALL_OW 44
65229: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65230: LD_VAR 0 12
65234: PPUSH
65235: LD_VAR 0 8
65239: PPUSH
65240: LD_INT 0
65242: PPUSH
65243: CALL 67209 0 3
// end ;
65247: GO 65184
65249: POP
65250: POP
// if apemans then
65251: LD_VAR 0 3
65255: IFFALSE 65378
// for i = 1 to apemans do
65257: LD_ADDR_VAR 0 11
65261: PUSH
65262: DOUBLE
65263: LD_INT 1
65265: DEC
65266: ST_TO_ADDR
65267: LD_VAR 0 3
65271: PUSH
65272: FOR_TO
65273: IFFALSE 65376
// begin hc_class = class_apeman ;
65275: LD_ADDR_OWVAR 28
65279: PUSH
65280: LD_INT 12
65282: ST_TO_ADDR
// hc_gallery =  ;
65283: LD_ADDR_OWVAR 33
65287: PUSH
65288: LD_STRING 
65290: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
65291: LD_ADDR_OWVAR 35
65295: PUSH
65296: LD_INT 5
65298: NEG
65299: PPUSH
65300: LD_INT 5
65302: PPUSH
65303: CALL_OW 12
65307: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
65308: LD_ADDR_OWVAR 31
65312: PUSH
65313: LD_INT 1
65315: PPUSH
65316: LD_INT 3
65318: PPUSH
65319: CALL_OW 12
65323: PUSH
65324: LD_INT 1
65326: PPUSH
65327: LD_INT 3
65329: PPUSH
65330: CALL_OW 12
65334: PUSH
65335: LD_INT 0
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: LIST
65346: ST_TO_ADDR
// animal := CreateHuman ;
65347: LD_ADDR_VAR 0 12
65351: PUSH
65352: CALL_OW 44
65356: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65357: LD_VAR 0 12
65361: PPUSH
65362: LD_VAR 0 8
65366: PPUSH
65367: LD_INT 0
65369: PPUSH
65370: CALL 67209 0 3
// end ;
65374: GO 65272
65376: POP
65377: POP
// if enchidnas then
65378: LD_VAR 0 4
65382: IFFALSE 65449
// for i = 1 to enchidnas do
65384: LD_ADDR_VAR 0 11
65388: PUSH
65389: DOUBLE
65390: LD_INT 1
65392: DEC
65393: ST_TO_ADDR
65394: LD_VAR 0 4
65398: PUSH
65399: FOR_TO
65400: IFFALSE 65447
// begin hc_class = 13 ;
65402: LD_ADDR_OWVAR 28
65406: PUSH
65407: LD_INT 13
65409: ST_TO_ADDR
// hc_gallery =  ;
65410: LD_ADDR_OWVAR 33
65414: PUSH
65415: LD_STRING 
65417: ST_TO_ADDR
// animal := CreateHuman ;
65418: LD_ADDR_VAR 0 12
65422: PUSH
65423: CALL_OW 44
65427: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
65428: LD_VAR 0 12
65432: PPUSH
65433: LD_VAR 0 8
65437: PPUSH
65438: LD_INT 0
65440: PPUSH
65441: CALL 67209 0 3
// end ;
65445: GO 65399
65447: POP
65448: POP
// if fishes then
65449: LD_VAR 0 7
65453: IFFALSE 65520
// for i = 1 to fishes do
65455: LD_ADDR_VAR 0 11
65459: PUSH
65460: DOUBLE
65461: LD_INT 1
65463: DEC
65464: ST_TO_ADDR
65465: LD_VAR 0 7
65469: PUSH
65470: FOR_TO
65471: IFFALSE 65518
// begin hc_class = 20 ;
65473: LD_ADDR_OWVAR 28
65477: PUSH
65478: LD_INT 20
65480: ST_TO_ADDR
// hc_gallery =  ;
65481: LD_ADDR_OWVAR 33
65485: PUSH
65486: LD_STRING 
65488: ST_TO_ADDR
// animal := CreateHuman ;
65489: LD_ADDR_VAR 0 12
65493: PUSH
65494: CALL_OW 44
65498: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
65499: LD_VAR 0 12
65503: PPUSH
65504: LD_VAR 0 9
65508: PPUSH
65509: LD_INT 0
65511: PPUSH
65512: CALL 67209 0 3
// end ;
65516: GO 65470
65518: POP
65519: POP
// end ;
65520: LD_VAR 0 10
65524: RET
// export function WantHeal ( sci , unit ) ; begin
65525: LD_INT 0
65527: PPUSH
// if GetTaskList ( sci ) > 0 then
65528: LD_VAR 0 1
65532: PPUSH
65533: CALL_OW 437
65537: PUSH
65538: LD_INT 0
65540: GREATER
65541: IFFALSE 65611
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
65543: LD_VAR 0 1
65547: PPUSH
65548: CALL_OW 437
65552: PUSH
65553: LD_INT 1
65555: ARRAY
65556: PUSH
65557: LD_INT 1
65559: ARRAY
65560: PUSH
65561: LD_STRING l
65563: EQUAL
65564: PUSH
65565: LD_VAR 0 1
65569: PPUSH
65570: CALL_OW 437
65574: PUSH
65575: LD_INT 1
65577: ARRAY
65578: PUSH
65579: LD_INT 4
65581: ARRAY
65582: PUSH
65583: LD_VAR 0 2
65587: EQUAL
65588: AND
65589: IFFALSE 65601
// result := true else
65591: LD_ADDR_VAR 0 3
65595: PUSH
65596: LD_INT 1
65598: ST_TO_ADDR
65599: GO 65609
// result := false ;
65601: LD_ADDR_VAR 0 3
65605: PUSH
65606: LD_INT 0
65608: ST_TO_ADDR
// end else
65609: GO 65619
// result := false ;
65611: LD_ADDR_VAR 0 3
65615: PUSH
65616: LD_INT 0
65618: ST_TO_ADDR
// end ;
65619: LD_VAR 0 3
65623: RET
// export function HealTarget ( sci ) ; begin
65624: LD_INT 0
65626: PPUSH
// if not sci then
65627: LD_VAR 0 1
65631: NOT
65632: IFFALSE 65636
// exit ;
65634: GO 65701
// result := 0 ;
65636: LD_ADDR_VAR 0 2
65640: PUSH
65641: LD_INT 0
65643: ST_TO_ADDR
// if GetTaskList ( sci ) then
65644: LD_VAR 0 1
65648: PPUSH
65649: CALL_OW 437
65653: IFFALSE 65701
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
65655: LD_VAR 0 1
65659: PPUSH
65660: CALL_OW 437
65664: PUSH
65665: LD_INT 1
65667: ARRAY
65668: PUSH
65669: LD_INT 1
65671: ARRAY
65672: PUSH
65673: LD_STRING l
65675: EQUAL
65676: IFFALSE 65701
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
65678: LD_ADDR_VAR 0 2
65682: PUSH
65683: LD_VAR 0 1
65687: PPUSH
65688: CALL_OW 437
65692: PUSH
65693: LD_INT 1
65695: ARRAY
65696: PUSH
65697: LD_INT 4
65699: ARRAY
65700: ST_TO_ADDR
// end ;
65701: LD_VAR 0 2
65705: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
65706: LD_INT 0
65708: PPUSH
65709: PPUSH
65710: PPUSH
65711: PPUSH
// if not base_units then
65712: LD_VAR 0 1
65716: NOT
65717: IFFALSE 65721
// exit ;
65719: GO 65808
// result := false ;
65721: LD_ADDR_VAR 0 2
65725: PUSH
65726: LD_INT 0
65728: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
65729: LD_ADDR_VAR 0 5
65733: PUSH
65734: LD_VAR 0 1
65738: PPUSH
65739: LD_INT 21
65741: PUSH
65742: LD_INT 3
65744: PUSH
65745: EMPTY
65746: LIST
65747: LIST
65748: PPUSH
65749: CALL_OW 72
65753: ST_TO_ADDR
// if not tmp then
65754: LD_VAR 0 5
65758: NOT
65759: IFFALSE 65763
// exit ;
65761: GO 65808
// for i in tmp do
65763: LD_ADDR_VAR 0 3
65767: PUSH
65768: LD_VAR 0 5
65772: PUSH
65773: FOR_IN
65774: IFFALSE 65806
// begin result := EnemyInRange ( i , 22 ) ;
65776: LD_ADDR_VAR 0 2
65780: PUSH
65781: LD_VAR 0 3
65785: PPUSH
65786: LD_INT 22
65788: PPUSH
65789: CALL 64044 0 2
65793: ST_TO_ADDR
// if result then
65794: LD_VAR 0 2
65798: IFFALSE 65804
// exit ;
65800: POP
65801: POP
65802: GO 65808
// end ;
65804: GO 65773
65806: POP
65807: POP
// end ;
65808: LD_VAR 0 2
65812: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
65813: LD_INT 0
65815: PPUSH
65816: PPUSH
// if not units then
65817: LD_VAR 0 1
65821: NOT
65822: IFFALSE 65826
// exit ;
65824: GO 65896
// result := [ ] ;
65826: LD_ADDR_VAR 0 3
65830: PUSH
65831: EMPTY
65832: ST_TO_ADDR
// for i in units do
65833: LD_ADDR_VAR 0 4
65837: PUSH
65838: LD_VAR 0 1
65842: PUSH
65843: FOR_IN
65844: IFFALSE 65894
// if GetTag ( i ) = tag then
65846: LD_VAR 0 4
65850: PPUSH
65851: CALL_OW 110
65855: PUSH
65856: LD_VAR 0 2
65860: EQUAL
65861: IFFALSE 65892
// result := Insert ( result , result + 1 , i ) ;
65863: LD_ADDR_VAR 0 3
65867: PUSH
65868: LD_VAR 0 3
65872: PPUSH
65873: LD_VAR 0 3
65877: PUSH
65878: LD_INT 1
65880: PLUS
65881: PPUSH
65882: LD_VAR 0 4
65886: PPUSH
65887: CALL_OW 2
65891: ST_TO_ADDR
65892: GO 65843
65894: POP
65895: POP
// end ;
65896: LD_VAR 0 3
65900: RET
// export function IsDriver ( un ) ; begin
65901: LD_INT 0
65903: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
65904: LD_ADDR_VAR 0 2
65908: PUSH
65909: LD_VAR 0 1
65913: PUSH
65914: LD_INT 55
65916: PUSH
65917: EMPTY
65918: LIST
65919: PPUSH
65920: CALL_OW 69
65924: IN
65925: ST_TO_ADDR
// end ;
65926: LD_VAR 0 2
65930: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
65931: LD_INT 0
65933: PPUSH
65934: PPUSH
// list := [ ] ;
65935: LD_ADDR_VAR 0 5
65939: PUSH
65940: EMPTY
65941: ST_TO_ADDR
// case d of 0 :
65942: LD_VAR 0 3
65946: PUSH
65947: LD_INT 0
65949: DOUBLE
65950: EQUAL
65951: IFTRUE 65955
65953: GO 66088
65955: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
65956: LD_ADDR_VAR 0 5
65960: PUSH
65961: LD_VAR 0 1
65965: PUSH
65966: LD_INT 4
65968: MINUS
65969: PUSH
65970: LD_VAR 0 2
65974: PUSH
65975: LD_INT 4
65977: MINUS
65978: PUSH
65979: LD_INT 2
65981: PUSH
65982: EMPTY
65983: LIST
65984: LIST
65985: LIST
65986: PUSH
65987: LD_VAR 0 1
65991: PUSH
65992: LD_INT 3
65994: MINUS
65995: PUSH
65996: LD_VAR 0 2
66000: PUSH
66001: LD_INT 1
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: PUSH
66009: LD_VAR 0 1
66013: PUSH
66014: LD_INT 4
66016: PLUS
66017: PUSH
66018: LD_VAR 0 2
66022: PUSH
66023: LD_INT 4
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: LIST
66030: PUSH
66031: LD_VAR 0 1
66035: PUSH
66036: LD_INT 3
66038: PLUS
66039: PUSH
66040: LD_VAR 0 2
66044: PUSH
66045: LD_INT 3
66047: PLUS
66048: PUSH
66049: LD_INT 5
66051: PUSH
66052: EMPTY
66053: LIST
66054: LIST
66055: LIST
66056: PUSH
66057: LD_VAR 0 1
66061: PUSH
66062: LD_VAR 0 2
66066: PUSH
66067: LD_INT 4
66069: PLUS
66070: PUSH
66071: LD_INT 0
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: LIST
66078: PUSH
66079: EMPTY
66080: LIST
66081: LIST
66082: LIST
66083: LIST
66084: LIST
66085: ST_TO_ADDR
// end ; 1 :
66086: GO 66786
66088: LD_INT 1
66090: DOUBLE
66091: EQUAL
66092: IFTRUE 66096
66094: GO 66229
66096: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
66097: LD_ADDR_VAR 0 5
66101: PUSH
66102: LD_VAR 0 1
66106: PUSH
66107: LD_VAR 0 2
66111: PUSH
66112: LD_INT 4
66114: MINUS
66115: PUSH
66116: LD_INT 3
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: PUSH
66124: LD_VAR 0 1
66128: PUSH
66129: LD_INT 3
66131: MINUS
66132: PUSH
66133: LD_VAR 0 2
66137: PUSH
66138: LD_INT 3
66140: MINUS
66141: PUSH
66142: LD_INT 2
66144: PUSH
66145: EMPTY
66146: LIST
66147: LIST
66148: LIST
66149: PUSH
66150: LD_VAR 0 1
66154: PUSH
66155: LD_INT 4
66157: MINUS
66158: PUSH
66159: LD_VAR 0 2
66163: PUSH
66164: LD_INT 1
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: LIST
66171: PUSH
66172: LD_VAR 0 1
66176: PUSH
66177: LD_VAR 0 2
66181: PUSH
66182: LD_INT 3
66184: PLUS
66185: PUSH
66186: LD_INT 0
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: LIST
66193: PUSH
66194: LD_VAR 0 1
66198: PUSH
66199: LD_INT 4
66201: PLUS
66202: PUSH
66203: LD_VAR 0 2
66207: PUSH
66208: LD_INT 4
66210: PLUS
66211: PUSH
66212: LD_INT 5
66214: PUSH
66215: EMPTY
66216: LIST
66217: LIST
66218: LIST
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: LIST
66224: LIST
66225: LIST
66226: ST_TO_ADDR
// end ; 2 :
66227: GO 66786
66229: LD_INT 2
66231: DOUBLE
66232: EQUAL
66233: IFTRUE 66237
66235: GO 66366
66237: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
66238: LD_ADDR_VAR 0 5
66242: PUSH
66243: LD_VAR 0 1
66247: PUSH
66248: LD_VAR 0 2
66252: PUSH
66253: LD_INT 3
66255: MINUS
66256: PUSH
66257: LD_INT 3
66259: PUSH
66260: EMPTY
66261: LIST
66262: LIST
66263: LIST
66264: PUSH
66265: LD_VAR 0 1
66269: PUSH
66270: LD_INT 4
66272: PLUS
66273: PUSH
66274: LD_VAR 0 2
66278: PUSH
66279: LD_INT 4
66281: PUSH
66282: EMPTY
66283: LIST
66284: LIST
66285: LIST
66286: PUSH
66287: LD_VAR 0 1
66291: PUSH
66292: LD_VAR 0 2
66296: PUSH
66297: LD_INT 4
66299: PLUS
66300: PUSH
66301: LD_INT 0
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: PUSH
66309: LD_VAR 0 1
66313: PUSH
66314: LD_INT 3
66316: MINUS
66317: PUSH
66318: LD_VAR 0 2
66322: PUSH
66323: LD_INT 1
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: LIST
66330: PUSH
66331: LD_VAR 0 1
66335: PUSH
66336: LD_INT 4
66338: MINUS
66339: PUSH
66340: LD_VAR 0 2
66344: PUSH
66345: LD_INT 4
66347: MINUS
66348: PUSH
66349: LD_INT 2
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: LIST
66356: PUSH
66357: EMPTY
66358: LIST
66359: LIST
66360: LIST
66361: LIST
66362: LIST
66363: ST_TO_ADDR
// end ; 3 :
66364: GO 66786
66366: LD_INT 3
66368: DOUBLE
66369: EQUAL
66370: IFTRUE 66374
66372: GO 66507
66374: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
66375: LD_ADDR_VAR 0 5
66379: PUSH
66380: LD_VAR 0 1
66384: PUSH
66385: LD_INT 3
66387: PLUS
66388: PUSH
66389: LD_VAR 0 2
66393: PUSH
66394: LD_INT 4
66396: PUSH
66397: EMPTY
66398: LIST
66399: LIST
66400: LIST
66401: PUSH
66402: LD_VAR 0 1
66406: PUSH
66407: LD_INT 4
66409: PLUS
66410: PUSH
66411: LD_VAR 0 2
66415: PUSH
66416: LD_INT 4
66418: PLUS
66419: PUSH
66420: LD_INT 5
66422: PUSH
66423: EMPTY
66424: LIST
66425: LIST
66426: LIST
66427: PUSH
66428: LD_VAR 0 1
66432: PUSH
66433: LD_INT 4
66435: MINUS
66436: PUSH
66437: LD_VAR 0 2
66441: PUSH
66442: LD_INT 1
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: LIST
66449: PUSH
66450: LD_VAR 0 1
66454: PUSH
66455: LD_VAR 0 2
66459: PUSH
66460: LD_INT 4
66462: MINUS
66463: PUSH
66464: LD_INT 3
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: LIST
66471: PUSH
66472: LD_VAR 0 1
66476: PUSH
66477: LD_INT 3
66479: MINUS
66480: PUSH
66481: LD_VAR 0 2
66485: PUSH
66486: LD_INT 3
66488: MINUS
66489: PUSH
66490: LD_INT 2
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: LIST
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: ST_TO_ADDR
// end ; 4 :
66505: GO 66786
66507: LD_INT 4
66509: DOUBLE
66510: EQUAL
66511: IFTRUE 66515
66513: GO 66648
66515: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
66516: LD_ADDR_VAR 0 5
66520: PUSH
66521: LD_VAR 0 1
66525: PUSH
66526: LD_VAR 0 2
66530: PUSH
66531: LD_INT 4
66533: PLUS
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: LIST
66542: PUSH
66543: LD_VAR 0 1
66547: PUSH
66548: LD_INT 3
66550: PLUS
66551: PUSH
66552: LD_VAR 0 2
66556: PUSH
66557: LD_INT 3
66559: PLUS
66560: PUSH
66561: LD_INT 5
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: LIST
66568: PUSH
66569: LD_VAR 0 1
66573: PUSH
66574: LD_INT 4
66576: PLUS
66577: PUSH
66578: LD_VAR 0 2
66582: PUSH
66583: LD_INT 4
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: LIST
66590: PUSH
66591: LD_VAR 0 1
66595: PUSH
66596: LD_VAR 0 2
66600: PUSH
66601: LD_INT 3
66603: MINUS
66604: PUSH
66605: LD_INT 3
66607: PUSH
66608: EMPTY
66609: LIST
66610: LIST
66611: LIST
66612: PUSH
66613: LD_VAR 0 1
66617: PUSH
66618: LD_INT 4
66620: MINUS
66621: PUSH
66622: LD_VAR 0 2
66626: PUSH
66627: LD_INT 4
66629: MINUS
66630: PUSH
66631: LD_INT 2
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: LIST
66638: PUSH
66639: EMPTY
66640: LIST
66641: LIST
66642: LIST
66643: LIST
66644: LIST
66645: ST_TO_ADDR
// end ; 5 :
66646: GO 66786
66648: LD_INT 5
66650: DOUBLE
66651: EQUAL
66652: IFTRUE 66656
66654: GO 66785
66656: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
66657: LD_ADDR_VAR 0 5
66661: PUSH
66662: LD_VAR 0 1
66666: PUSH
66667: LD_INT 4
66669: MINUS
66670: PUSH
66671: LD_VAR 0 2
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: LIST
66683: PUSH
66684: LD_VAR 0 1
66688: PUSH
66689: LD_VAR 0 2
66693: PUSH
66694: LD_INT 4
66696: MINUS
66697: PUSH
66698: LD_INT 3
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: LIST
66705: PUSH
66706: LD_VAR 0 1
66710: PUSH
66711: LD_INT 4
66713: PLUS
66714: PUSH
66715: LD_VAR 0 2
66719: PUSH
66720: LD_INT 4
66722: PLUS
66723: PUSH
66724: LD_INT 5
66726: PUSH
66727: EMPTY
66728: LIST
66729: LIST
66730: LIST
66731: PUSH
66732: LD_VAR 0 1
66736: PUSH
66737: LD_INT 3
66739: PLUS
66740: PUSH
66741: LD_VAR 0 2
66745: PUSH
66746: LD_INT 4
66748: PUSH
66749: EMPTY
66750: LIST
66751: LIST
66752: LIST
66753: PUSH
66754: LD_VAR 0 1
66758: PUSH
66759: LD_VAR 0 2
66763: PUSH
66764: LD_INT 3
66766: PLUS
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: EMPTY
66772: LIST
66773: LIST
66774: LIST
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// end ; end ;
66783: GO 66786
66785: POP
// result := list ;
66786: LD_ADDR_VAR 0 4
66790: PUSH
66791: LD_VAR 0 5
66795: ST_TO_ADDR
// end ;
66796: LD_VAR 0 4
66800: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
66801: LD_INT 0
66803: PPUSH
66804: PPUSH
66805: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
66806: LD_VAR 0 1
66810: NOT
66811: PUSH
66812: LD_VAR 0 2
66816: PUSH
66817: LD_INT 1
66819: PUSH
66820: LD_INT 2
66822: PUSH
66823: LD_INT 3
66825: PUSH
66826: LD_INT 4
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: LIST
66833: LIST
66834: IN
66835: NOT
66836: OR
66837: IFFALSE 66841
// exit ;
66839: GO 66933
// tmp := [ ] ;
66841: LD_ADDR_VAR 0 5
66845: PUSH
66846: EMPTY
66847: ST_TO_ADDR
// for i in units do
66848: LD_ADDR_VAR 0 4
66852: PUSH
66853: LD_VAR 0 1
66857: PUSH
66858: FOR_IN
66859: IFFALSE 66902
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
66861: LD_ADDR_VAR 0 5
66865: PUSH
66866: LD_VAR 0 5
66870: PPUSH
66871: LD_VAR 0 5
66875: PUSH
66876: LD_INT 1
66878: PLUS
66879: PPUSH
66880: LD_VAR 0 4
66884: PPUSH
66885: LD_VAR 0 2
66889: PPUSH
66890: CALL_OW 259
66894: PPUSH
66895: CALL_OW 2
66899: ST_TO_ADDR
66900: GO 66858
66902: POP
66903: POP
// if not tmp then
66904: LD_VAR 0 5
66908: NOT
66909: IFFALSE 66913
// exit ;
66911: GO 66933
// result := SortListByListDesc ( units , tmp ) ;
66913: LD_ADDR_VAR 0 3
66917: PUSH
66918: LD_VAR 0 1
66922: PPUSH
66923: LD_VAR 0 5
66927: PPUSH
66928: CALL_OW 77
66932: ST_TO_ADDR
// end ;
66933: LD_VAR 0 3
66937: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
66938: LD_INT 0
66940: PPUSH
66941: PPUSH
66942: PPUSH
// result := false ;
66943: LD_ADDR_VAR 0 3
66947: PUSH
66948: LD_INT 0
66950: ST_TO_ADDR
// x := GetX ( building ) ;
66951: LD_ADDR_VAR 0 4
66955: PUSH
66956: LD_VAR 0 2
66960: PPUSH
66961: CALL_OW 250
66965: ST_TO_ADDR
// y := GetY ( building ) ;
66966: LD_ADDR_VAR 0 5
66970: PUSH
66971: LD_VAR 0 2
66975: PPUSH
66976: CALL_OW 251
66980: ST_TO_ADDR
// if not building or not x or not y then
66981: LD_VAR 0 2
66985: NOT
66986: PUSH
66987: LD_VAR 0 4
66991: NOT
66992: OR
66993: PUSH
66994: LD_VAR 0 5
66998: NOT
66999: OR
67000: IFFALSE 67004
// exit ;
67002: GO 67096
// if GetTaskList ( unit ) then
67004: LD_VAR 0 1
67008: PPUSH
67009: CALL_OW 437
67013: IFFALSE 67096
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67015: LD_STRING e
67017: PUSH
67018: LD_VAR 0 1
67022: PPUSH
67023: CALL_OW 437
67027: PUSH
67028: LD_INT 1
67030: ARRAY
67031: PUSH
67032: LD_INT 1
67034: ARRAY
67035: EQUAL
67036: PUSH
67037: LD_VAR 0 4
67041: PUSH
67042: LD_VAR 0 1
67046: PPUSH
67047: CALL_OW 437
67051: PUSH
67052: LD_INT 1
67054: ARRAY
67055: PUSH
67056: LD_INT 2
67058: ARRAY
67059: EQUAL
67060: AND
67061: PUSH
67062: LD_VAR 0 5
67066: PUSH
67067: LD_VAR 0 1
67071: PPUSH
67072: CALL_OW 437
67076: PUSH
67077: LD_INT 1
67079: ARRAY
67080: PUSH
67081: LD_INT 3
67083: ARRAY
67084: EQUAL
67085: AND
67086: IFFALSE 67096
// result := true end ;
67088: LD_ADDR_VAR 0 3
67092: PUSH
67093: LD_INT 1
67095: ST_TO_ADDR
// end ;
67096: LD_VAR 0 3
67100: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
67101: LD_INT 0
67103: PPUSH
// result := false ;
67104: LD_ADDR_VAR 0 4
67108: PUSH
67109: LD_INT 0
67111: ST_TO_ADDR
// if GetTaskList ( unit ) then
67112: LD_VAR 0 1
67116: PPUSH
67117: CALL_OW 437
67121: IFFALSE 67204
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
67123: LD_STRING M
67125: PUSH
67126: LD_VAR 0 1
67130: PPUSH
67131: CALL_OW 437
67135: PUSH
67136: LD_INT 1
67138: ARRAY
67139: PUSH
67140: LD_INT 1
67142: ARRAY
67143: EQUAL
67144: PUSH
67145: LD_VAR 0 2
67149: PUSH
67150: LD_VAR 0 1
67154: PPUSH
67155: CALL_OW 437
67159: PUSH
67160: LD_INT 1
67162: ARRAY
67163: PUSH
67164: LD_INT 2
67166: ARRAY
67167: EQUAL
67168: AND
67169: PUSH
67170: LD_VAR 0 3
67174: PUSH
67175: LD_VAR 0 1
67179: PPUSH
67180: CALL_OW 437
67184: PUSH
67185: LD_INT 1
67187: ARRAY
67188: PUSH
67189: LD_INT 3
67191: ARRAY
67192: EQUAL
67193: AND
67194: IFFALSE 67204
// result := true ;
67196: LD_ADDR_VAR 0 4
67200: PUSH
67201: LD_INT 1
67203: ST_TO_ADDR
// end ; end ;
67204: LD_VAR 0 4
67208: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
67209: LD_INT 0
67211: PPUSH
67212: PPUSH
67213: PPUSH
67214: PPUSH
// if not unit or not area then
67215: LD_VAR 0 1
67219: NOT
67220: PUSH
67221: LD_VAR 0 2
67225: NOT
67226: OR
67227: IFFALSE 67231
// exit ;
67229: GO 67395
// tmp := AreaToList ( area , i ) ;
67231: LD_ADDR_VAR 0 6
67235: PUSH
67236: LD_VAR 0 2
67240: PPUSH
67241: LD_VAR 0 5
67245: PPUSH
67246: CALL_OW 517
67250: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
67251: LD_ADDR_VAR 0 5
67255: PUSH
67256: DOUBLE
67257: LD_INT 1
67259: DEC
67260: ST_TO_ADDR
67261: LD_VAR 0 6
67265: PUSH
67266: LD_INT 1
67268: ARRAY
67269: PUSH
67270: FOR_TO
67271: IFFALSE 67393
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
67273: LD_ADDR_VAR 0 7
67277: PUSH
67278: LD_VAR 0 6
67282: PUSH
67283: LD_INT 1
67285: ARRAY
67286: PUSH
67287: LD_VAR 0 5
67291: ARRAY
67292: PUSH
67293: LD_VAR 0 6
67297: PUSH
67298: LD_INT 2
67300: ARRAY
67301: PUSH
67302: LD_VAR 0 5
67306: ARRAY
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
67312: LD_VAR 0 7
67316: PUSH
67317: LD_INT 1
67319: ARRAY
67320: PPUSH
67321: LD_VAR 0 7
67325: PUSH
67326: LD_INT 2
67328: ARRAY
67329: PPUSH
67330: CALL_OW 428
67334: PUSH
67335: LD_INT 0
67337: EQUAL
67338: IFFALSE 67391
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
67340: LD_VAR 0 1
67344: PPUSH
67345: LD_VAR 0 7
67349: PUSH
67350: LD_INT 1
67352: ARRAY
67353: PPUSH
67354: LD_VAR 0 7
67358: PUSH
67359: LD_INT 2
67361: ARRAY
67362: PPUSH
67363: LD_VAR 0 3
67367: PPUSH
67368: CALL_OW 48
// result := IsPlaced ( unit ) ;
67372: LD_ADDR_VAR 0 4
67376: PUSH
67377: LD_VAR 0 1
67381: PPUSH
67382: CALL_OW 305
67386: ST_TO_ADDR
// exit ;
67387: POP
67388: POP
67389: GO 67395
// end ; end ;
67391: GO 67270
67393: POP
67394: POP
// end ;
67395: LD_VAR 0 4
67399: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
67400: LD_INT 0
67402: PPUSH
67403: PPUSH
67404: PPUSH
// if not side or side > 8 then
67405: LD_VAR 0 1
67409: NOT
67410: PUSH
67411: LD_VAR 0 1
67415: PUSH
67416: LD_INT 8
67418: GREATER
67419: OR
67420: IFFALSE 67424
// exit ;
67422: GO 67611
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
67424: LD_ADDR_VAR 0 4
67428: PUSH
67429: LD_INT 22
67431: PUSH
67432: LD_VAR 0 1
67436: PUSH
67437: EMPTY
67438: LIST
67439: LIST
67440: PUSH
67441: LD_INT 21
67443: PUSH
67444: LD_INT 3
67446: PUSH
67447: EMPTY
67448: LIST
67449: LIST
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PPUSH
67455: CALL_OW 69
67459: ST_TO_ADDR
// if not tmp then
67460: LD_VAR 0 4
67464: NOT
67465: IFFALSE 67469
// exit ;
67467: GO 67611
// enable_addtolog := true ;
67469: LD_ADDR_OWVAR 81
67473: PUSH
67474: LD_INT 1
67476: ST_TO_ADDR
// AddToLog ( [ ) ;
67477: LD_STRING [
67479: PPUSH
67480: CALL_OW 561
// for i in tmp do
67484: LD_ADDR_VAR 0 3
67488: PUSH
67489: LD_VAR 0 4
67493: PUSH
67494: FOR_IN
67495: IFFALSE 67602
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
67497: LD_STRING [
67499: PUSH
67500: LD_VAR 0 3
67504: PPUSH
67505: CALL_OW 266
67509: STR
67510: PUSH
67511: LD_STRING , 
67513: STR
67514: PUSH
67515: LD_VAR 0 3
67519: PPUSH
67520: CALL_OW 250
67524: STR
67525: PUSH
67526: LD_STRING , 
67528: STR
67529: PUSH
67530: LD_VAR 0 3
67534: PPUSH
67535: CALL_OW 251
67539: STR
67540: PUSH
67541: LD_STRING , 
67543: STR
67544: PUSH
67545: LD_VAR 0 3
67549: PPUSH
67550: CALL_OW 254
67554: STR
67555: PUSH
67556: LD_STRING , 
67558: STR
67559: PUSH
67560: LD_VAR 0 3
67564: PPUSH
67565: LD_INT 1
67567: PPUSH
67568: CALL_OW 268
67572: STR
67573: PUSH
67574: LD_STRING , 
67576: STR
67577: PUSH
67578: LD_VAR 0 3
67582: PPUSH
67583: LD_INT 2
67585: PPUSH
67586: CALL_OW 268
67590: STR
67591: PUSH
67592: LD_STRING ],
67594: STR
67595: PPUSH
67596: CALL_OW 561
// end ;
67600: GO 67494
67602: POP
67603: POP
// AddToLog ( ]; ) ;
67604: LD_STRING ];
67606: PPUSH
67607: CALL_OW 561
// end ;
67611: LD_VAR 0 2
67615: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
67616: LD_INT 0
67618: PPUSH
67619: PPUSH
67620: PPUSH
67621: PPUSH
67622: PPUSH
// if not area or not rate or not max then
67623: LD_VAR 0 1
67627: NOT
67628: PUSH
67629: LD_VAR 0 2
67633: NOT
67634: OR
67635: PUSH
67636: LD_VAR 0 4
67640: NOT
67641: OR
67642: IFFALSE 67646
// exit ;
67644: GO 67838
// while 1 do
67646: LD_INT 1
67648: IFFALSE 67838
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
67650: LD_ADDR_VAR 0 9
67654: PUSH
67655: LD_VAR 0 1
67659: PPUSH
67660: LD_INT 1
67662: PPUSH
67663: CALL_OW 287
67667: PUSH
67668: LD_INT 10
67670: MUL
67671: ST_TO_ADDR
// r := rate / 10 ;
67672: LD_ADDR_VAR 0 7
67676: PUSH
67677: LD_VAR 0 2
67681: PUSH
67682: LD_INT 10
67684: DIVREAL
67685: ST_TO_ADDR
// time := 1 1$00 ;
67686: LD_ADDR_VAR 0 8
67690: PUSH
67691: LD_INT 2100
67693: ST_TO_ADDR
// if amount < min then
67694: LD_VAR 0 9
67698: PUSH
67699: LD_VAR 0 3
67703: LESS
67704: IFFALSE 67722
// r := r * 2 else
67706: LD_ADDR_VAR 0 7
67710: PUSH
67711: LD_VAR 0 7
67715: PUSH
67716: LD_INT 2
67718: MUL
67719: ST_TO_ADDR
67720: GO 67748
// if amount > max then
67722: LD_VAR 0 9
67726: PUSH
67727: LD_VAR 0 4
67731: GREATER
67732: IFFALSE 67748
// r := r / 2 ;
67734: LD_ADDR_VAR 0 7
67738: PUSH
67739: LD_VAR 0 7
67743: PUSH
67744: LD_INT 2
67746: DIVREAL
67747: ST_TO_ADDR
// time := time / r ;
67748: LD_ADDR_VAR 0 8
67752: PUSH
67753: LD_VAR 0 8
67757: PUSH
67758: LD_VAR 0 7
67762: DIVREAL
67763: ST_TO_ADDR
// if time < 0 then
67764: LD_VAR 0 8
67768: PUSH
67769: LD_INT 0
67771: LESS
67772: IFFALSE 67789
// time := time * - 1 ;
67774: LD_ADDR_VAR 0 8
67778: PUSH
67779: LD_VAR 0 8
67783: PUSH
67784: LD_INT 1
67786: NEG
67787: MUL
67788: ST_TO_ADDR
// wait ( time ) ;
67789: LD_VAR 0 8
67793: PPUSH
67794: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
67798: LD_INT 35
67800: PPUSH
67801: LD_INT 875
67803: PPUSH
67804: CALL_OW 12
67808: PPUSH
67809: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
67813: LD_INT 1
67815: PPUSH
67816: LD_INT 5
67818: PPUSH
67819: CALL_OW 12
67823: PPUSH
67824: LD_VAR 0 1
67828: PPUSH
67829: LD_INT 1
67831: PPUSH
67832: CALL_OW 55
// end ;
67836: GO 67646
// end ;
67838: LD_VAR 0 5
67842: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
67843: LD_INT 0
67845: PPUSH
67846: PPUSH
67847: PPUSH
67848: PPUSH
67849: PPUSH
67850: PPUSH
67851: PPUSH
67852: PPUSH
// if not turrets or not factories then
67853: LD_VAR 0 1
67857: NOT
67858: PUSH
67859: LD_VAR 0 2
67863: NOT
67864: OR
67865: IFFALSE 67869
// exit ;
67867: GO 68176
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
67869: LD_ADDR_VAR 0 10
67873: PUSH
67874: LD_INT 5
67876: PUSH
67877: LD_INT 6
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 2
67886: PUSH
67887: LD_INT 4
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 3
67896: PUSH
67897: LD_INT 5
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: PUSH
67909: LD_INT 24
67911: PUSH
67912: LD_INT 25
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 23
67921: PUSH
67922: LD_INT 27
67924: PUSH
67925: EMPTY
67926: LIST
67927: LIST
67928: PUSH
67929: EMPTY
67930: LIST
67931: LIST
67932: PUSH
67933: LD_INT 42
67935: PUSH
67936: LD_INT 43
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 44
67945: PUSH
67946: LD_INT 46
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 45
67955: PUSH
67956: LD_INT 47
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: LIST
67967: PUSH
67968: EMPTY
67969: LIST
67970: LIST
67971: LIST
67972: ST_TO_ADDR
// result := [ ] ;
67973: LD_ADDR_VAR 0 3
67977: PUSH
67978: EMPTY
67979: ST_TO_ADDR
// for i in turrets do
67980: LD_ADDR_VAR 0 4
67984: PUSH
67985: LD_VAR 0 1
67989: PUSH
67990: FOR_IN
67991: IFFALSE 68174
// begin nat := GetNation ( i ) ;
67993: LD_ADDR_VAR 0 7
67997: PUSH
67998: LD_VAR 0 4
68002: PPUSH
68003: CALL_OW 248
68007: ST_TO_ADDR
// weapon := 0 ;
68008: LD_ADDR_VAR 0 8
68012: PUSH
68013: LD_INT 0
68015: ST_TO_ADDR
// if not nat then
68016: LD_VAR 0 7
68020: NOT
68021: IFFALSE 68025
// continue ;
68023: GO 67990
// for j in list [ nat ] do
68025: LD_ADDR_VAR 0 5
68029: PUSH
68030: LD_VAR 0 10
68034: PUSH
68035: LD_VAR 0 7
68039: ARRAY
68040: PUSH
68041: FOR_IN
68042: IFFALSE 68083
// if GetBWeapon ( i ) = j [ 1 ] then
68044: LD_VAR 0 4
68048: PPUSH
68049: CALL_OW 269
68053: PUSH
68054: LD_VAR 0 5
68058: PUSH
68059: LD_INT 1
68061: ARRAY
68062: EQUAL
68063: IFFALSE 68081
// begin weapon := j [ 2 ] ;
68065: LD_ADDR_VAR 0 8
68069: PUSH
68070: LD_VAR 0 5
68074: PUSH
68075: LD_INT 2
68077: ARRAY
68078: ST_TO_ADDR
// break ;
68079: GO 68083
// end ;
68081: GO 68041
68083: POP
68084: POP
// if not weapon then
68085: LD_VAR 0 8
68089: NOT
68090: IFFALSE 68094
// continue ;
68092: GO 67990
// for k in factories do
68094: LD_ADDR_VAR 0 6
68098: PUSH
68099: LD_VAR 0 2
68103: PUSH
68104: FOR_IN
68105: IFFALSE 68170
// begin weapons := AvailableWeaponList ( k ) ;
68107: LD_ADDR_VAR 0 9
68111: PUSH
68112: LD_VAR 0 6
68116: PPUSH
68117: CALL_OW 478
68121: ST_TO_ADDR
// if not weapons then
68122: LD_VAR 0 9
68126: NOT
68127: IFFALSE 68131
// continue ;
68129: GO 68104
// if weapon in weapons then
68131: LD_VAR 0 8
68135: PUSH
68136: LD_VAR 0 9
68140: IN
68141: IFFALSE 68168
// begin result := [ i , weapon ] ;
68143: LD_ADDR_VAR 0 3
68147: PUSH
68148: LD_VAR 0 4
68152: PUSH
68153: LD_VAR 0 8
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: ST_TO_ADDR
// exit ;
68162: POP
68163: POP
68164: POP
68165: POP
68166: GO 68176
// end ; end ;
68168: GO 68104
68170: POP
68171: POP
// end ;
68172: GO 67990
68174: POP
68175: POP
// end ;
68176: LD_VAR 0 3
68180: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
68181: LD_INT 0
68183: PPUSH
// if not side or side > 8 then
68184: LD_VAR 0 3
68188: NOT
68189: PUSH
68190: LD_VAR 0 3
68194: PUSH
68195: LD_INT 8
68197: GREATER
68198: OR
68199: IFFALSE 68203
// exit ;
68201: GO 68262
// if not range then
68203: LD_VAR 0 4
68207: NOT
68208: IFFALSE 68219
// range := - 12 ;
68210: LD_ADDR_VAR 0 4
68214: PUSH
68215: LD_INT 12
68217: NEG
68218: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
68219: LD_VAR 0 1
68223: PPUSH
68224: LD_VAR 0 2
68228: PPUSH
68229: LD_VAR 0 3
68233: PPUSH
68234: LD_VAR 0 4
68238: PPUSH
68239: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
68243: LD_VAR 0 1
68247: PPUSH
68248: LD_VAR 0 2
68252: PPUSH
68253: LD_VAR 0 3
68257: PPUSH
68258: CALL_OW 331
// end ;
68262: LD_VAR 0 5
68266: RET
// export function Video ( mode ) ; begin
68267: LD_INT 0
68269: PPUSH
// ingame_video = mode ;
68270: LD_ADDR_OWVAR 52
68274: PUSH
68275: LD_VAR 0 1
68279: ST_TO_ADDR
// interface_hidden = mode ;
68280: LD_ADDR_OWVAR 54
68284: PUSH
68285: LD_VAR 0 1
68289: ST_TO_ADDR
// end ;
68290: LD_VAR 0 2
68294: RET
// export function Join ( array , element ) ; begin
68295: LD_INT 0
68297: PPUSH
// result := Replace ( array , array + 1 , element ) ;
68298: LD_ADDR_VAR 0 3
68302: PUSH
68303: LD_VAR 0 1
68307: PPUSH
68308: LD_VAR 0 1
68312: PUSH
68313: LD_INT 1
68315: PLUS
68316: PPUSH
68317: LD_VAR 0 2
68321: PPUSH
68322: CALL_OW 1
68326: ST_TO_ADDR
// end ;
68327: LD_VAR 0 3
68331: RET
// export function JoinUnion ( array , element ) ; begin
68332: LD_INT 0
68334: PPUSH
// result := array union element ;
68335: LD_ADDR_VAR 0 3
68339: PUSH
68340: LD_VAR 0 1
68344: PUSH
68345: LD_VAR 0 2
68349: UNION
68350: ST_TO_ADDR
// end ;
68351: LD_VAR 0 3
68355: RET
// export function GetBehemoths ( side ) ; begin
68356: LD_INT 0
68358: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
68359: LD_ADDR_VAR 0 2
68363: PUSH
68364: LD_INT 22
68366: PUSH
68367: LD_VAR 0 1
68371: PUSH
68372: EMPTY
68373: LIST
68374: LIST
68375: PUSH
68376: LD_INT 31
68378: PUSH
68379: LD_INT 25
68381: PUSH
68382: EMPTY
68383: LIST
68384: LIST
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PPUSH
68390: CALL_OW 69
68394: ST_TO_ADDR
// end ;
68395: LD_VAR 0 2
68399: RET
// export function Shuffle ( array ) ; var i , index ; begin
68400: LD_INT 0
68402: PPUSH
68403: PPUSH
68404: PPUSH
// result := [ ] ;
68405: LD_ADDR_VAR 0 2
68409: PUSH
68410: EMPTY
68411: ST_TO_ADDR
// if not array then
68412: LD_VAR 0 1
68416: NOT
68417: IFFALSE 68421
// exit ;
68419: GO 68520
// Randomize ;
68421: CALL_OW 10
// for i = array downto 1 do
68425: LD_ADDR_VAR 0 3
68429: PUSH
68430: DOUBLE
68431: LD_VAR 0 1
68435: INC
68436: ST_TO_ADDR
68437: LD_INT 1
68439: PUSH
68440: FOR_DOWNTO
68441: IFFALSE 68518
// begin index := rand ( 1 , array ) ;
68443: LD_ADDR_VAR 0 4
68447: PUSH
68448: LD_INT 1
68450: PPUSH
68451: LD_VAR 0 1
68455: PPUSH
68456: CALL_OW 12
68460: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
68461: LD_ADDR_VAR 0 2
68465: PUSH
68466: LD_VAR 0 2
68470: PPUSH
68471: LD_VAR 0 2
68475: PUSH
68476: LD_INT 1
68478: PLUS
68479: PPUSH
68480: LD_VAR 0 1
68484: PUSH
68485: LD_VAR 0 4
68489: ARRAY
68490: PPUSH
68491: CALL_OW 2
68495: ST_TO_ADDR
// array := Delete ( array , index ) ;
68496: LD_ADDR_VAR 0 1
68500: PUSH
68501: LD_VAR 0 1
68505: PPUSH
68506: LD_VAR 0 4
68510: PPUSH
68511: CALL_OW 3
68515: ST_TO_ADDR
// end ;
68516: GO 68440
68518: POP
68519: POP
// end ;
68520: LD_VAR 0 2
68524: RET
// export function GetBaseMaterials ( base ) ; begin
68525: LD_INT 0
68527: PPUSH
// result := [ 0 , 0 , 0 ] ;
68528: LD_ADDR_VAR 0 2
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: LD_INT 0
68538: PUSH
68539: LD_INT 0
68541: PUSH
68542: EMPTY
68543: LIST
68544: LIST
68545: LIST
68546: ST_TO_ADDR
// if not base then
68547: LD_VAR 0 1
68551: NOT
68552: IFFALSE 68556
// exit ;
68554: GO 68605
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
68556: LD_ADDR_VAR 0 2
68560: PUSH
68561: LD_VAR 0 1
68565: PPUSH
68566: LD_INT 1
68568: PPUSH
68569: CALL_OW 275
68573: PUSH
68574: LD_VAR 0 1
68578: PPUSH
68579: LD_INT 2
68581: PPUSH
68582: CALL_OW 275
68586: PUSH
68587: LD_VAR 0 1
68591: PPUSH
68592: LD_INT 3
68594: PPUSH
68595: CALL_OW 275
68599: PUSH
68600: EMPTY
68601: LIST
68602: LIST
68603: LIST
68604: ST_TO_ADDR
// end ;
68605: LD_VAR 0 2
68609: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
68610: LD_INT 0
68612: PPUSH
68613: PPUSH
// result := array ;
68614: LD_ADDR_VAR 0 3
68618: PUSH
68619: LD_VAR 0 1
68623: ST_TO_ADDR
// if size > 0 then
68624: LD_VAR 0 2
68628: PUSH
68629: LD_INT 0
68631: GREATER
68632: IFFALSE 68678
// for i := array downto size do
68634: LD_ADDR_VAR 0 4
68638: PUSH
68639: DOUBLE
68640: LD_VAR 0 1
68644: INC
68645: ST_TO_ADDR
68646: LD_VAR 0 2
68650: PUSH
68651: FOR_DOWNTO
68652: IFFALSE 68676
// result := Delete ( result , result ) ;
68654: LD_ADDR_VAR 0 3
68658: PUSH
68659: LD_VAR 0 3
68663: PPUSH
68664: LD_VAR 0 3
68668: PPUSH
68669: CALL_OW 3
68673: ST_TO_ADDR
68674: GO 68651
68676: POP
68677: POP
// end ;
68678: LD_VAR 0 3
68682: RET
// export function ComExit ( unit ) ; var tmp ; begin
68683: LD_INT 0
68685: PPUSH
68686: PPUSH
// if not IsInUnit ( unit ) then
68687: LD_VAR 0 1
68691: PPUSH
68692: CALL_OW 310
68696: NOT
68697: IFFALSE 68701
// exit ;
68699: GO 68761
// tmp := IsInUnit ( unit ) ;
68701: LD_ADDR_VAR 0 3
68705: PUSH
68706: LD_VAR 0 1
68710: PPUSH
68711: CALL_OW 310
68715: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
68716: LD_VAR 0 3
68720: PPUSH
68721: CALL_OW 247
68725: PUSH
68726: LD_INT 2
68728: EQUAL
68729: IFFALSE 68742
// ComExitVehicle ( unit ) else
68731: LD_VAR 0 1
68735: PPUSH
68736: CALL_OW 121
68740: GO 68751
// ComExitBuilding ( unit ) ;
68742: LD_VAR 0 1
68746: PPUSH
68747: CALL_OW 122
// result := tmp ;
68751: LD_ADDR_VAR 0 2
68755: PUSH
68756: LD_VAR 0 3
68760: ST_TO_ADDR
// end ;
68761: LD_VAR 0 2
68765: RET
// export function ComExitAll ( units ) ; var i ; begin
68766: LD_INT 0
68768: PPUSH
68769: PPUSH
// if not units then
68770: LD_VAR 0 1
68774: NOT
68775: IFFALSE 68779
// exit ;
68777: GO 68805
// for i in units do
68779: LD_ADDR_VAR 0 3
68783: PUSH
68784: LD_VAR 0 1
68788: PUSH
68789: FOR_IN
68790: IFFALSE 68803
// ComExit ( i ) ;
68792: LD_VAR 0 3
68796: PPUSH
68797: CALL 68683 0 1
68801: GO 68789
68803: POP
68804: POP
// end ;
68805: LD_VAR 0 2
68809: RET
// export function ResetHc ; begin
68810: LD_INT 0
68812: PPUSH
// InitHc ;
68813: CALL_OW 19
// hc_importance := 0 ;
68817: LD_ADDR_OWVAR 32
68821: PUSH
68822: LD_INT 0
68824: ST_TO_ADDR
// end ;
68825: LD_VAR 0 1
68829: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
68830: LD_INT 0
68832: PPUSH
68833: PPUSH
68834: PPUSH
// _x := ( x1 + x2 ) div 2 ;
68835: LD_ADDR_VAR 0 6
68839: PUSH
68840: LD_VAR 0 1
68844: PUSH
68845: LD_VAR 0 3
68849: PLUS
68850: PUSH
68851: LD_INT 2
68853: DIV
68854: ST_TO_ADDR
// if _x < 0 then
68855: LD_VAR 0 6
68859: PUSH
68860: LD_INT 0
68862: LESS
68863: IFFALSE 68880
// _x := _x * - 1 ;
68865: LD_ADDR_VAR 0 6
68869: PUSH
68870: LD_VAR 0 6
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: MUL
68879: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
68880: LD_ADDR_VAR 0 7
68884: PUSH
68885: LD_VAR 0 2
68889: PUSH
68890: LD_VAR 0 4
68894: PLUS
68895: PUSH
68896: LD_INT 2
68898: DIV
68899: ST_TO_ADDR
// if _y < 0 then
68900: LD_VAR 0 7
68904: PUSH
68905: LD_INT 0
68907: LESS
68908: IFFALSE 68925
// _y := _y * - 1 ;
68910: LD_ADDR_VAR 0 7
68914: PUSH
68915: LD_VAR 0 7
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: MUL
68924: ST_TO_ADDR
// result := [ _x , _y ] ;
68925: LD_ADDR_VAR 0 5
68929: PUSH
68930: LD_VAR 0 6
68934: PUSH
68935: LD_VAR 0 7
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: ST_TO_ADDR
// end ;
68944: LD_VAR 0 5
68948: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
68949: LD_INT 0
68951: PPUSH
68952: PPUSH
68953: PPUSH
68954: PPUSH
// task := GetTaskList ( unit ) ;
68955: LD_ADDR_VAR 0 7
68959: PUSH
68960: LD_VAR 0 1
68964: PPUSH
68965: CALL_OW 437
68969: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
68970: LD_VAR 0 7
68974: NOT
68975: PUSH
68976: LD_VAR 0 1
68980: PPUSH
68981: LD_VAR 0 2
68985: PPUSH
68986: CALL_OW 308
68990: NOT
68991: AND
68992: IFFALSE 68996
// exit ;
68994: GO 69114
// if IsInArea ( unit , area ) then
68996: LD_VAR 0 1
69000: PPUSH
69001: LD_VAR 0 2
69005: PPUSH
69006: CALL_OW 308
69010: IFFALSE 69028
// begin ComMoveToArea ( unit , goAway ) ;
69012: LD_VAR 0 1
69016: PPUSH
69017: LD_VAR 0 3
69021: PPUSH
69022: CALL_OW 113
// exit ;
69026: GO 69114
// end ; if task [ 1 ] [ 1 ] <> M then
69028: LD_VAR 0 7
69032: PUSH
69033: LD_INT 1
69035: ARRAY
69036: PUSH
69037: LD_INT 1
69039: ARRAY
69040: PUSH
69041: LD_STRING M
69043: NONEQUAL
69044: IFFALSE 69048
// exit ;
69046: GO 69114
// x := task [ 1 ] [ 2 ] ;
69048: LD_ADDR_VAR 0 5
69052: PUSH
69053: LD_VAR 0 7
69057: PUSH
69058: LD_INT 1
69060: ARRAY
69061: PUSH
69062: LD_INT 2
69064: ARRAY
69065: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
69066: LD_ADDR_VAR 0 6
69070: PUSH
69071: LD_VAR 0 7
69075: PUSH
69076: LD_INT 1
69078: ARRAY
69079: PUSH
69080: LD_INT 3
69082: ARRAY
69083: ST_TO_ADDR
// if InArea ( x , y , area ) then
69084: LD_VAR 0 5
69088: PPUSH
69089: LD_VAR 0 6
69093: PPUSH
69094: LD_VAR 0 2
69098: PPUSH
69099: CALL_OW 309
69103: IFFALSE 69114
// ComStop ( unit ) ;
69105: LD_VAR 0 1
69109: PPUSH
69110: CALL_OW 141
// end ;
69114: LD_VAR 0 4
69118: RET
// export function Abs ( value ) ; begin
69119: LD_INT 0
69121: PPUSH
// result := value ;
69122: LD_ADDR_VAR 0 2
69126: PUSH
69127: LD_VAR 0 1
69131: ST_TO_ADDR
// if value < 0 then
69132: LD_VAR 0 1
69136: PUSH
69137: LD_INT 0
69139: LESS
69140: IFFALSE 69157
// result := value * - 1 ;
69142: LD_ADDR_VAR 0 2
69146: PUSH
69147: LD_VAR 0 1
69151: PUSH
69152: LD_INT 1
69154: NEG
69155: MUL
69156: ST_TO_ADDR
// end ;
69157: LD_VAR 0 2
69161: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
69162: LD_INT 0
69164: PPUSH
69165: PPUSH
69166: PPUSH
69167: PPUSH
69168: PPUSH
69169: PPUSH
69170: PPUSH
69171: PPUSH
// if not unit or not building then
69172: LD_VAR 0 1
69176: NOT
69177: PUSH
69178: LD_VAR 0 2
69182: NOT
69183: OR
69184: IFFALSE 69188
// exit ;
69186: GO 69414
// x := GetX ( building ) ;
69188: LD_ADDR_VAR 0 4
69192: PUSH
69193: LD_VAR 0 2
69197: PPUSH
69198: CALL_OW 250
69202: ST_TO_ADDR
// y := GetY ( building ) ;
69203: LD_ADDR_VAR 0 6
69207: PUSH
69208: LD_VAR 0 2
69212: PPUSH
69213: CALL_OW 251
69217: ST_TO_ADDR
// d := GetDir ( building ) ;
69218: LD_ADDR_VAR 0 8
69222: PUSH
69223: LD_VAR 0 2
69227: PPUSH
69228: CALL_OW 254
69232: ST_TO_ADDR
// r := 4 ;
69233: LD_ADDR_VAR 0 9
69237: PUSH
69238: LD_INT 4
69240: ST_TO_ADDR
// for i := 1 to 5 do
69241: LD_ADDR_VAR 0 10
69245: PUSH
69246: DOUBLE
69247: LD_INT 1
69249: DEC
69250: ST_TO_ADDR
69251: LD_INT 5
69253: PUSH
69254: FOR_TO
69255: IFFALSE 69412
// begin _x := ShiftX ( x , d , r + i ) ;
69257: LD_ADDR_VAR 0 5
69261: PUSH
69262: LD_VAR 0 4
69266: PPUSH
69267: LD_VAR 0 8
69271: PPUSH
69272: LD_VAR 0 9
69276: PUSH
69277: LD_VAR 0 10
69281: PLUS
69282: PPUSH
69283: CALL_OW 272
69287: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
69288: LD_ADDR_VAR 0 7
69292: PUSH
69293: LD_VAR 0 6
69297: PPUSH
69298: LD_VAR 0 8
69302: PPUSH
69303: LD_VAR 0 9
69307: PUSH
69308: LD_VAR 0 10
69312: PLUS
69313: PPUSH
69314: CALL_OW 273
69318: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
69319: LD_VAR 0 5
69323: PPUSH
69324: LD_VAR 0 7
69328: PPUSH
69329: CALL_OW 488
69333: PUSH
69334: LD_VAR 0 5
69338: PPUSH
69339: LD_VAR 0 7
69343: PPUSH
69344: CALL_OW 428
69348: PPUSH
69349: CALL_OW 247
69353: PUSH
69354: LD_INT 3
69356: PUSH
69357: LD_INT 2
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: IN
69364: NOT
69365: AND
69366: IFFALSE 69410
// begin ComMoveXY ( unit , _x , _y ) ;
69368: LD_VAR 0 1
69372: PPUSH
69373: LD_VAR 0 5
69377: PPUSH
69378: LD_VAR 0 7
69382: PPUSH
69383: CALL_OW 111
// result := [ _x , _y ] ;
69387: LD_ADDR_VAR 0 3
69391: PUSH
69392: LD_VAR 0 5
69396: PUSH
69397: LD_VAR 0 7
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: ST_TO_ADDR
// exit ;
69406: POP
69407: POP
69408: GO 69414
// end ; end ;
69410: GO 69254
69412: POP
69413: POP
// end ;
69414: LD_VAR 0 3
69418: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
69419: LD_INT 0
69421: PPUSH
69422: PPUSH
69423: PPUSH
// result := 0 ;
69424: LD_ADDR_VAR 0 3
69428: PUSH
69429: LD_INT 0
69431: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
69432: LD_VAR 0 1
69436: PUSH
69437: LD_INT 0
69439: LESS
69440: PUSH
69441: LD_VAR 0 1
69445: PUSH
69446: LD_INT 8
69448: GREATER
69449: OR
69450: PUSH
69451: LD_VAR 0 2
69455: PUSH
69456: LD_INT 0
69458: LESS
69459: OR
69460: PUSH
69461: LD_VAR 0 2
69465: PUSH
69466: LD_INT 8
69468: GREATER
69469: OR
69470: IFFALSE 69474
// exit ;
69472: GO 69549
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
69474: LD_ADDR_VAR 0 4
69478: PUSH
69479: LD_INT 22
69481: PUSH
69482: LD_VAR 0 2
69486: PUSH
69487: EMPTY
69488: LIST
69489: LIST
69490: PPUSH
69491: CALL_OW 69
69495: PUSH
69496: FOR_IN
69497: IFFALSE 69547
// begin un := UnitShoot ( i ) ;
69499: LD_ADDR_VAR 0 5
69503: PUSH
69504: LD_VAR 0 4
69508: PPUSH
69509: CALL_OW 504
69513: ST_TO_ADDR
// if GetSide ( un ) = side1 then
69514: LD_VAR 0 5
69518: PPUSH
69519: CALL_OW 255
69523: PUSH
69524: LD_VAR 0 1
69528: EQUAL
69529: IFFALSE 69545
// begin result := un ;
69531: LD_ADDR_VAR 0 3
69535: PUSH
69536: LD_VAR 0 5
69540: ST_TO_ADDR
// exit ;
69541: POP
69542: POP
69543: GO 69549
// end ; end ;
69545: GO 69496
69547: POP
69548: POP
// end ;
69549: LD_VAR 0 3
69553: RET
// export function GetCargoBay ( units ) ; begin
69554: LD_INT 0
69556: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
69557: LD_ADDR_VAR 0 2
69561: PUSH
69562: LD_VAR 0 1
69566: PPUSH
69567: LD_INT 2
69569: PUSH
69570: LD_INT 34
69572: PUSH
69573: LD_INT 12
69575: PUSH
69576: EMPTY
69577: LIST
69578: LIST
69579: PUSH
69580: LD_INT 34
69582: PUSH
69583: LD_INT 51
69585: PUSH
69586: EMPTY
69587: LIST
69588: LIST
69589: PUSH
69590: LD_INT 34
69592: PUSH
69593: LD_INT 32
69595: PUSH
69596: EMPTY
69597: LIST
69598: LIST
69599: PUSH
69600: LD_INT 34
69602: PUSH
69603: LD_EXP 125
69607: PUSH
69608: EMPTY
69609: LIST
69610: LIST
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: LIST
69616: LIST
69617: LIST
69618: PPUSH
69619: CALL_OW 72
69623: ST_TO_ADDR
// end ;
69624: LD_VAR 0 2
69628: RET
