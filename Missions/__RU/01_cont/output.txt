// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition , apeWithRadioKiller ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; export jelenaSpawned ; export LakeApes ; export it_is_your ; export your_units ; export achievement_JelenaTimer ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 298 0 0
// PrepareRussian ;
  24: CALL 13227 0 0
// PrepareAmericans ;
  28: CALL 12789 0 0
// CreateNature ;
  32: CALL 13939 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 12
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 14
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 15
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 13
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 18
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 19
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 20
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 21
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 16
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 22
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 24
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 23
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// apeWithRadioKiller = 0 ;
 273: LD_ADDR_EXP 11
 277: PUSH
 278: LD_INT 0
 280: ST_TO_ADDR
// achievement_JelenaTimer = 0 0$00 ;
 281: LD_ADDR_EXP 29
 285: PUSH
 286: LD_INT 0
 288: ST_TO_ADDR
// MissionIntro ;
 289: CALL 878 0 0
// end ; end_of_file
 293: LD_VAR 0 1
 297: RET
// export function InitMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// BaseMapConfig ;
 301: CALL 314 0 0
// MissionMapConfig ;
 305: CALL 400 0 0
// end ;
 309: LD_VAR 0 1
 313: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 314: LD_INT 0
 316: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 317: LD_ADDR_EXP 30
 321: PUSH
 322: LD_INT 5
 324: PUSH
 325: LD_INT 4
 327: PUSH
 328: LD_INT 2
 330: PUSH
 331: LD_INT 2
 333: PUSH
 334: EMPTY
 335: LIST
 336: LIST
 337: LIST
 338: LIST
 339: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 340: LD_ADDR_EXP 31
 344: PUSH
 345: LD_INT 2
 347: PUSH
 348: LD_INT 2
 350: PUSH
 351: LD_INT 2
 353: PUSH
 354: LD_INT 2
 356: PUSH
 357: EMPTY
 358: LIST
 359: LIST
 360: LIST
 361: LIST
 362: ST_TO_ADDR
// animalsAgression = 0 ;
 363: LD_ADDR_EXP 32
 367: PUSH
 368: LD_INT 0
 370: ST_TO_ADDR
// debugMode = 0 ;
 371: LD_ADDR_EXP 35
 375: PUSH
 376: LD_INT 0
 378: ST_TO_ADDR
// missionPrefix = 01_ ;
 379: LD_ADDR_EXP 33
 383: PUSH
 384: LD_STRING 01_
 386: ST_TO_ADDR
// previousMissionPrefix =  ;
 387: LD_ADDR_EXP 34
 391: PUSH
 392: LD_STRING 
 394: ST_TO_ADDR
// end ;
 395: LD_VAR 0 1
 399: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 400: LD_INT 0
 402: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 , 970 ] [ Difficulty ] ;
 403: LD_ADDR_EXP 36
 407: PUSH
 408: LD_INT 800
 410: PUSH
 411: LD_INT 900
 413: PUSH
 414: LD_INT 950
 416: PUSH
 417: LD_INT 970
 419: PUSH
 420: EMPTY
 421: LIST
 422: LIST
 423: LIST
 424: LIST
 425: PUSH
 426: LD_OWVAR 67
 430: ARRAY
 431: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 432: LD_ADDR_EXP 37
 436: PUSH
 437: LD_INT 3
 439: PPUSH
 440: LD_INT 5
 442: PPUSH
 443: CALL_OW 12
 447: PUSH
 448: LD_OWVAR 67
 452: MUL
 453: ST_TO_ADDR
// amApeAmount = [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
 454: LD_ADDR_EXP 38
 458: PUSH
 459: LD_INT 4
 461: PUSH
 462: LD_INT 5
 464: PUSH
 465: LD_INT 6
 467: PUSH
 468: LD_INT 7
 470: PUSH
 471: EMPTY
 472: LIST
 473: LIST
 474: LIST
 475: LIST
 476: PUSH
 477: LD_OWVAR 67
 481: ARRAY
 482: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 , 3 ] [ Difficulty ] ;
 483: LD_ADDR_EXP 39
 487: PUSH
 488: LD_INT 0
 490: PUSH
 491: LD_INT 1
 493: PUSH
 494: LD_INT 2
 496: PUSH
 497: LD_INT 3
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: LIST
 504: LIST
 505: PUSH
 506: LD_OWVAR 67
 510: ARRAY
 511: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 512: LD_ADDR_EXP 40
 516: PUSH
 517: LD_INT 78
 519: PUSH
 520: LD_INT 87
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 527: LD_ADDR_EXP 41
 531: PUSH
 532: LD_INT 72
 534: PUSH
 535: LD_INT 115
 537: PUSH
 538: EMPTY
 539: LIST
 540: LIST
 541: PUSH
 542: LD_INT 99
 544: PUSH
 545: LD_INT 7
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: PUSH
 552: LD_INT 131
 554: PUSH
 555: LD_INT 81
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: LIST
 566: ST_TO_ADDR
// gnyevkoStartHP = [ 500 , 400 , 350 , 300 ] [ Difficulty ] ;
 567: LD_ADDR_EXP 42
 571: PUSH
 572: LD_INT 500
 574: PUSH
 575: LD_INT 400
 577: PUSH
 578: LD_INT 350
 580: PUSH
 581: LD_INT 300
 583: PUSH
 584: EMPTY
 585: LIST
 586: LIST
 587: LIST
 588: LIST
 589: PUSH
 590: LD_OWVAR 67
 594: ARRAY
 595: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 , 5 5$0 ] [ Difficulty ] ;
 596: LD_ADDR_EXP 43
 600: PUSH
 601: LD_INT 21000
 603: PUSH
 604: LD_INT 16800
 606: PUSH
 607: LD_INT 12600
 609: PUSH
 610: LD_INT 10500
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: LIST
 617: LIST
 618: PUSH
 619: LD_OWVAR 67
 623: ARRAY
 624: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 , 1 1$30 ] [ Difficulty ] ;
 625: LD_ADDR_EXP 44
 629: PUSH
 630: LD_INT 6300
 632: PUSH
 633: LD_INT 5250
 635: PUSH
 636: LD_INT 4200
 638: PUSH
 639: LD_INT 3150
 641: PUSH
 642: EMPTY
 643: LIST
 644: LIST
 645: LIST
 646: LIST
 647: PUSH
 648: LD_OWVAR 67
 652: ARRAY
 653: ST_TO_ADDR
// end ;
 654: LD_VAR 0 1
 658: RET
// every 0 0$1 trigger debugMode do var i ;
 659: LD_EXP 35
 663: IFFALSE 875
 665: GO 667
 667: DISABLE
 668: LD_INT 0
 670: PPUSH
// begin enable ;
 671: ENABLE
// FogOff ( your_side ) ;
 672: LD_OWVAR 2
 676: PPUSH
 677: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 681: LD_ADDR_VAR 0 1
 685: PUSH
 686: LD_INT 22
 688: PUSH
 689: LD_OWVAR 2
 693: PUSH
 694: EMPTY
 695: LIST
 696: LIST
 697: PUSH
 698: LD_INT 2
 700: PUSH
 701: LD_INT 21
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 21
 713: PUSH
 714: LD_INT 2
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: LIST
 725: PUSH
 726: EMPTY
 727: LIST
 728: LIST
 729: PPUSH
 730: CALL_OW 69
 734: PUSH
 735: FOR_IN
 736: IFFALSE 752
// SetLives ( i , 1000 ) ;
 738: LD_VAR 0 1
 742: PPUSH
 743: LD_INT 1000
 745: PPUSH
 746: CALL_OW 234
 750: GO 735
 752: POP
 753: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 754: LD_ADDR_VAR 0 1
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_OWVAR 2
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 2
 773: PUSH
 774: LD_INT 30
 776: PUSH
 777: LD_INT 0
 779: PUSH
 780: EMPTY
 781: LIST
 782: LIST
 783: PUSH
 784: LD_INT 30
 786: PUSH
 787: LD_INT 1
 789: PUSH
 790: EMPTY
 791: LIST
 792: LIST
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: LIST
 798: PUSH
 799: EMPTY
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 69
 807: PUSH
 808: FOR_IN
 809: IFFALSE 873
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 1
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 831: LD_VAR 0 1
 835: PPUSH
 836: CALL_OW 274
 840: PPUSH
 841: LD_INT 2
 843: PPUSH
 844: LD_INT 9999
 846: PPUSH
 847: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 851: LD_VAR 0 1
 855: PPUSH
 856: CALL_OW 274
 860: PPUSH
 861: LD_INT 3
 863: PPUSH
 864: LD_INT 9999
 866: PPUSH
 867: CALL_OW 277
// end ;
 871: GO 808
 873: POP
 874: POP
// end ; end_of_file
 875: PPOPN 1
 877: END
// export function MissionIntro ; begin
 878: LD_INT 0
 880: PPUSH
// InGameOn ;
 881: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 885: LD_EXP 40
 889: PUSH
 890: LD_INT 1
 892: ARRAY
 893: PUSH
 894: LD_INT 8
 896: MINUS
 897: PPUSH
 898: LD_EXP 40
 902: PUSH
 903: LD_INT 2
 905: ARRAY
 906: PUSH
 907: LD_INT 8
 909: MINUS
 910: PPUSH
 911: CALL_OW 84
// wait ( 0 0$3 ) ;
 915: LD_INT 105
 917: PPUSH
 918: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 922: LD_EXP 49
 926: PPUSH
 927: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 931: LD_EXP 49
 935: PPUSH
 936: LD_STRING D1-Bur-1
 938: PPUSH
 939: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 943: LD_EXP 49
 947: PPUSH
 948: LD_INT 94
 950: PPUSH
 951: LD_INT 89
 953: PPUSH
 954: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 958: LD_INT 94
 960: PPUSH
 961: LD_INT 89
 963: PPUSH
 964: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 968: LD_EXP 49
 972: PPUSH
 973: LD_STRING D1-Bur-1a
 975: PPUSH
 976: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 980: LD_EXP 49
 984: PPUSH
 985: LD_INT 102
 987: PPUSH
 988: LD_INT 88
 990: PPUSH
 991: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 995: LD_INT 102
 997: PPUSH
 998: LD_INT 88
1000: PPUSH
1001: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
1005: LD_EXP 49
1009: PPUSH
1010: LD_STRING D1-Bur-1b
1012: PPUSH
1013: CALL_OW 88
// InGameOff ;
1017: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
1021: LD_STRING M1
1023: PPUSH
1024: CALL_OW 337
// SaveForQuickRestart ;
1028: CALL_OW 22
// introEnd = true ;
1032: LD_ADDR_EXP 3
1036: PUSH
1037: LD_INT 1
1039: ST_TO_ADDR
// LakeApes = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ;
1040: LD_ADDR_EXP 26
1044: PUSH
1045: LD_INT 24
1047: PPUSH
1048: LD_INT 22
1050: PUSH
1051: LD_INT 0
1053: PUSH
1054: EMPTY
1055: LIST
1056: LIST
1057: PUSH
1058: LD_INT 25
1060: PUSH
1061: LD_INT 12
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: EMPTY
1069: LIST
1070: LIST
1071: PPUSH
1072: CALL_OW 70
1076: ST_TO_ADDR
// end ;
1077: LD_VAR 0 1
1081: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1082: LD_EXP 49
1086: PPUSH
1087: LD_INT 74
1089: PPUSH
1090: LD_INT 88
1092: PPUSH
1093: CALL_OW 297
1097: PUSH
1098: LD_INT 5
1100: LESS
1101: PUSH
1102: LD_EXP 3
1106: AND
1107: IFFALSE 1132
1109: GO 1111
1111: DISABLE
// begin spotWaterfall = true ;
1112: LD_ADDR_EXP 7
1116: PUSH
1117: LD_INT 1
1119: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1120: LD_EXP 49
1124: PPUSH
1125: LD_STRING DWaterfall-Bur-1
1127: PPUSH
1128: CALL_OW 88
// end ;
1132: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1133: LD_EXP 49
1137: PPUSH
1138: LD_INT 130
1140: PPUSH
1141: LD_INT 96
1143: PPUSH
1144: CALL_OW 297
1148: PUSH
1149: LD_INT 5
1151: LESS
1152: PUSH
1153: LD_EXP 3
1157: AND
1158: IFFALSE 1175
1160: GO 1162
1162: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1163: LD_EXP 49
1167: PPUSH
1168: LD_STRING DCorpse-Bur-1
1170: PPUSH
1171: CALL_OW 88
1175: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1176: LD_EXP 4
1180: NOT
1181: IFFALSE 1275
1183: GO 1185
1185: DISABLE
1186: LD_INT 0
1188: PPUSH
// begin enable ;
1189: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1190: LD_ADDR_VAR 0 1
1194: PUSH
1195: LD_INT 22
1197: PUSH
1198: LD_INT 0
1200: PUSH
1201: EMPTY
1202: LIST
1203: LIST
1204: PUSH
1205: LD_INT 25
1207: PUSH
1208: LD_INT 12
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: PUSH
1215: EMPTY
1216: LIST
1217: LIST
1218: PPUSH
1219: CALL_OW 69
1223: PUSH
1224: FOR_IN
1225: IFFALSE 1273
// if GetDistUnits ( apeman , Burlak ) < 7 then
1227: LD_VAR 0 1
1231: PPUSH
1232: LD_EXP 49
1236: PPUSH
1237: CALL_OW 296
1241: PUSH
1242: LD_INT 7
1244: LESS
1245: IFFALSE 1271
// begin apemansContact = true ;
1247: LD_ADDR_EXP 4
1251: PUSH
1252: LD_INT 1
1254: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1255: LD_EXP 49
1259: PPUSH
1260: LD_STRING D2-Bur-1
1262: PPUSH
1263: CALL_OW 88
// exit ;
1267: POP
1268: POP
1269: GO 1275
// end ;
1271: GO 1224
1273: POP
1274: POP
// end ;
1275: PPOPN 1
1277: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1278: LD_EXP 5
1282: NOT
1283: IFFALSE 1399
1285: GO 1287
1287: DISABLE
1288: LD_INT 0
1290: PPUSH
1291: PPUSH
// begin enable ;
1292: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1293: LD_ADDR_VAR 0 2
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 0
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 25
1310: PUSH
1311: LD_INT 12
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: PUSH
1327: FOR_IN
1328: IFFALSE 1397
// if Attacks ( apeman ) then
1330: LD_VAR 0 2
1334: PPUSH
1335: CALL_OW 320
1339: IFFALSE 1395
// if GetSide ( Attacks ( apeman ) ) = 3 then
1341: LD_VAR 0 2
1345: PPUSH
1346: CALL_OW 320
1350: PPUSH
1351: CALL_OW 255
1355: PUSH
1356: LD_INT 3
1358: EQUAL
1359: IFFALSE 1395
// begin attackedByApeman = true ;
1361: LD_ADDR_EXP 5
1365: PUSH
1366: LD_INT 1
1368: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1369: LD_ADDR_EXP 8
1373: PUSH
1374: LD_VAR 0 2
1378: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1379: LD_EXP 49
1383: PPUSH
1384: LD_STRING D2-Bur-1a
1386: PPUSH
1387: CALL_OW 88
// exit ;
1391: POP
1392: POP
1393: GO 1399
// end ;
1395: GO 1327
1397: POP
1398: POP
// end ;
1399: PPOPN 2
1401: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1402: LD_EXP 6
1406: NOT
1407: IFFALSE 1504
1409: GO 1411
1411: DISABLE
1412: LD_INT 0
1414: PPUSH
1415: PPUSH
// begin enable ;
1416: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1417: LD_ADDR_VAR 0 2
1421: PUSH
1422: LD_INT 24
1424: PPUSH
1425: LD_INT 22
1427: PUSH
1428: LD_INT 0
1430: PUSH
1431: EMPTY
1432: LIST
1433: LIST
1434: PUSH
1435: LD_INT 25
1437: PUSH
1438: LD_INT 12
1440: PUSH
1441: EMPTY
1442: LIST
1443: LIST
1444: PUSH
1445: EMPTY
1446: LIST
1447: LIST
1448: PPUSH
1449: CALL_OW 70
1453: PUSH
1454: FOR_IN
1455: IFFALSE 1502
// if Attacks ( apeman ) then
1457: LD_VAR 0 2
1461: PPUSH
1462: CALL_OW 320
1466: IFFALSE 1500
// if GetSide ( Attacks ( apeman ) ) = 3 then
1468: LD_VAR 0 2
1472: PPUSH
1473: CALL_OW 320
1477: PPUSH
1478: CALL_OW 255
1482: PUSH
1483: LD_INT 3
1485: EQUAL
1486: IFFALSE 1500
// begin attackedByApemanNearLake = true ;
1488: LD_ADDR_EXP 6
1492: PUSH
1493: LD_INT 1
1495: ST_TO_ADDR
// exit ;
1496: POP
1497: POP
1498: GO 1504
// end ;
1500: GO 1454
1502: POP
1503: POP
// end ;
1504: PPOPN 2
1506: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1507: LD_EXP 9
1511: PPUSH
1512: CALL_OW 303
1516: IFFALSE 1550
1518: GO 1520
1520: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1521: LD_ADDR_EXP 10
1525: PUSH
1526: LD_EXP 9
1530: PPUSH
1531: CALL_OW 250
1535: PUSH
1536: LD_EXP 9
1540: PPUSH
1541: CALL_OW 251
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: ST_TO_ADDR
1550: END
// every 0 0$1 trigger IsDying ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1551: LD_EXP 9
1555: PPUSH
1556: CALL_OW 303
1560: PUSH
1561: LD_INT 3
1563: PPUSH
1564: LD_EXP 10
1568: PUSH
1569: LD_INT 1
1571: ARRAY
1572: PPUSH
1573: LD_EXP 10
1577: PUSH
1578: LD_INT 2
1580: ARRAY
1581: PPUSH
1582: CALL_OW 293
1586: AND
1587: IFFALSE 1906
1589: GO 1591
1591: DISABLE
1592: LD_INT 0
1594: PPUSH
// begin wait ( 0 0$2 ) ;
1595: LD_INT 70
1597: PPUSH
1598: CALL_OW 67
// Say ( Burlak , D2a-Bur-1 ) ;
1602: LD_EXP 49
1606: PPUSH
1607: LD_STRING D2a-Bur-1
1609: PPUSH
1610: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1614: LD_INT 22
1616: PUSH
1617: LD_INT 3
1619: PUSH
1620: EMPTY
1621: LIST
1622: LIST
1623: PUSH
1624: LD_INT 21
1626: PUSH
1627: LD_INT 1
1629: PUSH
1630: EMPTY
1631: LIST
1632: LIST
1633: PUSH
1634: EMPTY
1635: LIST
1636: LIST
1637: PPUSH
1638: CALL_OW 69
1642: PUSH
1643: LD_INT 1
1645: EQUAL
1646: IFFALSE 1662
// Say ( Burlak , D2a-Bur-2 ) else
1648: LD_EXP 49
1652: PPUSH
1653: LD_STRING D2a-Bur-2
1655: PPUSH
1656: CALL_OW 88
1660: GO 1906
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko ] , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1662: LD_ADDR_VAR 0 1
1666: PUSH
1667: LD_INT 22
1669: PUSH
1670: LD_INT 3
1672: PUSH
1673: EMPTY
1674: LIST
1675: LIST
1676: PUSH
1677: LD_INT 21
1679: PUSH
1680: LD_INT 1
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: PUSH
1687: EMPTY
1688: LIST
1689: LIST
1690: PPUSH
1691: CALL_OW 69
1695: PUSH
1696: LD_EXP 49
1700: PUSH
1701: LD_EXP 57
1705: PUSH
1706: EMPTY
1707: LIST
1708: LIST
1709: DIFF
1710: PPUSH
1711: LD_EXP 10
1715: PUSH
1716: LD_INT 1
1718: ARRAY
1719: PPUSH
1720: LD_EXP 10
1724: PUSH
1725: LD_INT 2
1727: ARRAY
1728: PPUSH
1729: CALL_OW 73
1733: ST_TO_ADDR
// apeWithRadioKiller = nearUnit ;
1734: LD_ADDR_EXP 11
1738: PUSH
1739: LD_VAR 0 1
1743: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_EXP 10
1753: PUSH
1754: LD_INT 1
1756: ARRAY
1757: PPUSH
1758: LD_EXP 10
1762: PUSH
1763: LD_INT 2
1765: ARRAY
1766: PPUSH
1767: CALL_OW 111
// case nearUnit of Belkov :
1771: LD_VAR 0 1
1775: PUSH
1776: LD_EXP 54
1780: DOUBLE
1781: EQUAL
1782: IFTRUE 1786
1784: GO 1801
1786: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1787: LD_EXP 54
1791: PPUSH
1792: LD_STRING D2a-Bel-1
1794: PPUSH
1795: CALL_OW 88
1799: GO 1868
1801: LD_EXP 56
1805: DOUBLE
1806: EQUAL
1807: IFTRUE 1811
1809: GO 1826
1811: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1812: LD_EXP 56
1816: PPUSH
1817: LD_STRING D2a-Kir-1
1819: PPUSH
1820: CALL_OW 88
1824: GO 1868
1826: POP
// if GetSex ( nearUnit ) = sex_male then
1827: LD_VAR 0 1
1831: PPUSH
1832: CALL_OW 258
1836: PUSH
1837: LD_INT 1
1839: EQUAL
1840: IFFALSE 1856
// Say ( nearUnit , D2a-RSol1-1 ) else
1842: LD_VAR 0 1
1846: PPUSH
1847: LD_STRING D2a-RSol1-1
1849: PPUSH
1850: CALL_OW 88
1854: GO 1868
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1856: LD_VAR 0 1
1860: PPUSH
1861: LD_STRING D2a-RFSol1-1
1863: PPUSH
1864: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1868: LD_EXP 57
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: PUSH
1882: LD_EXP 57
1886: PPUSH
1887: CALL_OW 302
1891: AND
1892: IFFALSE 1906
// Say ( Gnyevko , D2a-Gny-1 ) ;
1894: LD_EXP 57
1898: PPUSH
1899: LD_STRING D2a-Gny-1
1901: PPUSH
1902: CALL_OW 88
// end ; end ;
1906: PPOPN 1
1908: END
// every 1 trigger not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 do
1909: LD_EXP 12
1913: NOT
1914: PUSH
1915: LD_EXP 43
1919: PUSH
1920: LD_INT 70
1922: GREATER
1923: AND
1924: IFFALSE 1944
1926: GO 1928
1928: DISABLE
// begin enable ;
1929: ENABLE
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
1930: LD_EXP 57
1934: PPUSH
1935: LD_EXP 42
1939: PPUSH
1940: CALL_OW 234
// end ;
1944: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1945: LD_INT 3
1947: PPUSH
1948: LD_EXP 57
1952: PPUSH
1953: CALL_OW 292
1957: IFFALSE 2569
1959: GO 1961
1961: DISABLE
1962: LD_INT 0
1964: PPUSH
1965: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1966: LD_EXP 57
1970: PPUSH
1971: CALL_OW 87
// DialogueOn ;
1975: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1979: LD_ADDR_VAR 0 1
1983: PUSH
1984: LD_INT 22
1986: PUSH
1987: LD_INT 3
1989: PUSH
1990: EMPTY
1991: LIST
1992: LIST
1993: PUSH
1994: LD_INT 21
1996: PUSH
1997: LD_INT 1
1999: PUSH
2000: EMPTY
2001: LIST
2002: LIST
2003: PUSH
2004: EMPTY
2005: LIST
2006: LIST
2007: PPUSH
2008: CALL_OW 69
2012: PPUSH
2013: LD_EXP 57
2017: PPUSH
2018: CALL_OW 74
2022: ST_TO_ADDR
// if nearUnit = Burlak then
2023: LD_VAR 0 1
2027: PUSH
2028: LD_EXP 49
2032: EQUAL
2033: IFFALSE 2395
// begin Say ( Burlak , D3-Bur-1 ) ;
2035: LD_EXP 49
2039: PPUSH
2040: LD_STRING D3-Bur-1
2042: PPUSH
2043: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2047: LD_EXP 57
2051: PPUSH
2052: LD_STRING D3-Gny-1
2054: PPUSH
2055: CALL_OW 88
// if apeWithRadioKiller then
2059: LD_EXP 11
2063: IFFALSE 2103
// begin if apeWithRadioKiller = Burlak then
2065: LD_EXP 11
2069: PUSH
2070: LD_EXP 49
2074: EQUAL
2075: IFFALSE 2091
// Say ( Burlak , D3-Bur-2 ) else
2077: LD_EXP 49
2081: PPUSH
2082: LD_STRING D3-Bur-2
2084: PPUSH
2085: CALL_OW 88
2089: GO 2103
// Say ( Burlak , D3-Bur-2a ) ;
2091: LD_EXP 49
2095: PPUSH
2096: LD_STRING D3-Bur-2a
2098: PPUSH
2099: CALL_OW 88
// end ; Say ( Burlak , D3-Bur-2b ) ;
2103: LD_EXP 49
2107: PPUSH
2108: LD_STRING D3-Bur-2b
2110: PPUSH
2111: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2115: LD_INT 22
2117: PUSH
2118: LD_INT 3
2120: PUSH
2121: EMPTY
2122: LIST
2123: LIST
2124: PUSH
2125: LD_INT 21
2127: PUSH
2128: LD_INT 1
2130: PUSH
2131: EMPTY
2132: LIST
2133: LIST
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PPUSH
2139: CALL_OW 69
2143: PUSH
2144: LD_INT 1
2146: EQUAL
2147: PUSH
2148: LD_EXP 14
2152: NOT
2153: AND
2154: IFFALSE 2206
// begin Say ( Burlak , D3-Bur-2c ) ;
2156: LD_EXP 49
2160: PPUSH
2161: LD_STRING D3-Bur-2c
2163: PPUSH
2164: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2168: LD_EXP 57
2172: PPUSH
2173: LD_STRING D3-Gny-2
2175: PPUSH
2176: CALL_OW 88
// DialogueOff ;
2180: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2184: LD_EXP 57
2188: PPUSH
2189: LD_INT 3
2191: PPUSH
2192: CALL_OW 235
// gnyevkoSaved = true ;
2196: LD_ADDR_EXP 12
2200: PUSH
2201: LD_INT 1
2203: ST_TO_ADDR
// exit ;
2204: GO 2569
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2206: LD_INT 22
2208: PUSH
2209: LD_INT 3
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 21
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: EMPTY
2223: LIST
2224: LIST
2225: PUSH
2226: EMPTY
2227: LIST
2228: LIST
2229: PPUSH
2230: CALL_OW 69
2234: PUSH
2235: LD_INT 1
2237: GREATER
2238: PUSH
2239: LD_EXP 14
2243: OR
2244: PUSH
2245: LD_EXP 22
2249: NOT
2250: AND
2251: IFFALSE 2303
// begin Say ( Burlak , D3-Bur-2d ) ;
2253: LD_EXP 49
2257: PPUSH
2258: LD_STRING D3-Bur-2d
2260: PPUSH
2261: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2265: LD_EXP 57
2269: PPUSH
2270: LD_STRING D3-Gny-2
2272: PPUSH
2273: CALL_OW 88
// DialogueOff ;
2277: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2281: LD_EXP 57
2285: PPUSH
2286: LD_INT 3
2288: PPUSH
2289: CALL_OW 235
// gnyevkoSaved = true ;
2293: LD_ADDR_EXP 12
2297: PUSH
2298: LD_INT 1
2300: ST_TO_ADDR
// exit ;
2301: GO 2569
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2303: LD_INT 22
2305: PUSH
2306: LD_INT 3
2308: PUSH
2309: EMPTY
2310: LIST
2311: LIST
2312: PUSH
2313: LD_INT 21
2315: PUSH
2316: LD_INT 1
2318: PUSH
2319: EMPTY
2320: LIST
2321: LIST
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PPUSH
2327: CALL_OW 69
2331: PUSH
2332: LD_INT 1
2334: GREATER
2335: PUSH
2336: LD_EXP 22
2340: AND
2341: IFFALSE 2393
// begin Say ( Burlak , D3-Bur-2e ) ;
2343: LD_EXP 49
2347: PPUSH
2348: LD_STRING D3-Bur-2e
2350: PPUSH
2351: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2355: LD_EXP 57
2359: PPUSH
2360: LD_STRING D3-Gny-2
2362: PPUSH
2363: CALL_OW 88
// DialogueOff ;
2367: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2371: LD_EXP 57
2375: PPUSH
2376: LD_INT 3
2378: PPUSH
2379: CALL_OW 235
// gnyevkoSaved = true ;
2383: LD_ADDR_EXP 12
2387: PUSH
2388: LD_INT 1
2390: ST_TO_ADDR
// exit ;
2391: GO 2569
// end ; end else
2393: GO 2569
// begin if GetSex ( nearUnit ) = sex_male then
2395: LD_VAR 0 1
2399: PPUSH
2400: CALL_OW 258
2404: PUSH
2405: LD_INT 1
2407: EQUAL
2408: IFFALSE 2424
// Say ( nearUnit , D3-RSol1-1 ) else
2410: LD_VAR 0 1
2414: PPUSH
2415: LD_STRING D3-RSol1-1
2417: PPUSH
2418: CALL_OW 88
2422: GO 2436
// Say ( nearUnit , D3-RFSol1-1 ) ;
2424: LD_VAR 0 1
2428: PPUSH
2429: LD_STRING D3-RFSol1-1
2431: PPUSH
2432: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2436: LD_EXP 57
2440: PPUSH
2441: LD_STRING D3-Gny-1
2443: PPUSH
2444: CALL_OW 88
// if apeWithRadioKiller then
2448: LD_EXP 11
2452: IFFALSE 2492
// begin if apeWithRadioKiller = Burlak then
2454: LD_EXP 11
2458: PUSH
2459: LD_EXP 49
2463: EQUAL
2464: IFFALSE 2480
// Say ( Burlak , D3-Bur-2 ) else
2466: LD_EXP 49
2470: PPUSH
2471: LD_STRING D3-Bur-2
2473: PPUSH
2474: CALL_OW 88
2478: GO 2492
// Say ( Burlak , D3-Bur-2a ) ;
2480: LD_EXP 49
2484: PPUSH
2485: LD_STRING D3-Bur-2a
2487: PPUSH
2488: CALL_OW 88
// end ; if GetSex ( nearUnit ) = sex_male then
2492: LD_VAR 0 1
2496: PPUSH
2497: CALL_OW 258
2501: PUSH
2502: LD_INT 1
2504: EQUAL
2505: IFFALSE 2521
// Say ( nearUnit , D3-RSol1-2 ) else
2507: LD_VAR 0 1
2511: PPUSH
2512: LD_STRING D3-RSol1-2
2514: PPUSH
2515: CALL_OW 88
2519: GO 2533
// Say ( nearUnit , D3-RFSol1-2 ) ;
2521: LD_VAR 0 1
2525: PPUSH
2526: LD_STRING D3-RFSol1-2
2528: PPUSH
2529: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2533: LD_EXP 57
2537: PPUSH
2538: LD_STRING D3-Gny-2a
2540: PPUSH
2541: CALL_OW 88
// DialogueOff ;
2545: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2549: LD_EXP 57
2553: PPUSH
2554: LD_INT 3
2556: PPUSH
2557: CALL_OW 235
// gnyevkoSaved = true ;
2561: LD_ADDR_EXP 12
2565: PUSH
2566: LD_INT 1
2568: ST_TO_ADDR
// end ; end ;
2569: PPOPN 2
2571: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2572: LD_EXP 12
2576: NOT
2577: PUSH
2578: LD_EXP 21
2582: NOT
2583: OR
2584: IFFALSE 2779
2586: GO 2588
2588: DISABLE
2589: LD_INT 0
2591: PPUSH
// begin enable ;
2592: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2593: LD_EXP 12
2597: NOT
2598: PUSH
2599: LD_EXP 43
2603: PUSH
2604: LD_INT 70
2606: GREATER
2607: AND
2608: IFFALSE 2686
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2610: LD_ADDR_VAR 0 1
2614: PUSH
2615: LD_INT 22
2617: PUSH
2618: LD_INT 0
2620: PUSH
2621: EMPTY
2622: LIST
2623: LIST
2624: PUSH
2625: LD_INT 25
2627: PUSH
2628: LD_INT 12
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: PUSH
2635: EMPTY
2636: LIST
2637: LIST
2638: PPUSH
2639: CALL_OW 69
2643: PUSH
2644: FOR_IN
2645: IFFALSE 2684
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2647: LD_VAR 0 1
2651: PPUSH
2652: LD_EXP 57
2656: PPUSH
2657: CALL_OW 250
2661: PPUSH
2662: LD_EXP 57
2666: PPUSH
2667: CALL_OW 251
2671: PPUSH
2672: LD_INT 10
2674: PPUSH
2675: LD_INT 0
2677: PPUSH
2678: CALL 9015 0 5
2682: GO 2644
2684: POP
2685: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2686: LD_EXP 21
2690: NOT
2691: PUSH
2692: LD_EXP 44
2696: PUSH
2697: LD_INT 70
2699: GREATER
2700: AND
2701: IFFALSE 2779
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2703: LD_ADDR_VAR 0 1
2707: PUSH
2708: LD_INT 22
2710: PUSH
2711: LD_INT 0
2713: PUSH
2714: EMPTY
2715: LIST
2716: LIST
2717: PUSH
2718: LD_INT 25
2720: PUSH
2721: LD_INT 12
2723: PUSH
2724: EMPTY
2725: LIST
2726: LIST
2727: PUSH
2728: EMPTY
2729: LIST
2730: LIST
2731: PPUSH
2732: CALL_OW 69
2736: PUSH
2737: FOR_IN
2738: IFFALSE 2777
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2740: LD_VAR 0 1
2744: PPUSH
2745: LD_EXP 56
2749: PPUSH
2750: CALL_OW 250
2754: PPUSH
2755: LD_EXP 56
2759: PPUSH
2760: CALL_OW 251
2764: PPUSH
2765: LD_INT 10
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL 9015 0 5
2775: GO 2737
2777: POP
2778: POP
// end ;
2779: PPOPN 1
2781: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2782: LD_EXP 12
2786: NOT
2787: PUSH
2788: LD_EXP 21
2792: NOT
2793: OR
2794: IFFALSE 2905
2796: GO 2798
2798: DISABLE
// begin enable ;
2799: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2800: LD_EXP 12
2804: NOT
2805: PUSH
2806: LD_EXP 43
2810: PUSH
2811: LD_INT 0
2813: GREATER
2814: AND
2815: IFFALSE 2831
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2817: LD_ADDR_EXP 43
2821: PUSH
2822: LD_EXP 43
2826: PUSH
2827: LD_INT 35
2829: MINUS
2830: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2831: LD_EXP 56
2835: PPUSH
2836: CALL_OW 305
2840: PUSH
2841: LD_EXP 21
2845: NOT
2846: AND
2847: PUSH
2848: LD_EXP 44
2852: PUSH
2853: LD_INT 0
2855: GREATER
2856: AND
2857: IFFALSE 2873
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2859: LD_ADDR_EXP 44
2863: PUSH
2864: LD_EXP 44
2868: PUSH
2869: LD_INT 35
2871: MINUS
2872: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved then
2873: LD_EXP 56
2877: PPUSH
2878: CALL_OW 305
2882: PUSH
2883: LD_EXP 21
2887: NOT
2888: AND
2889: IFFALSE 2905
// achievement_JelenaTimer = achievement_JelenaTimer + 0 0$01 ;
2891: LD_ADDR_EXP 29
2895: PUSH
2896: LD_EXP 29
2900: PUSH
2901: LD_INT 35
2903: PLUS
2904: ST_TO_ADDR
// end ;
2905: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or ( GetSide ( Gnyevko ) = 3 and See ( 6 , Gnyevko ) ) ) and not meetPokryshkin do
2906: LD_INT 3
2908: PPUSH
2909: LD_EXP 50
2913: PPUSH
2914: CALL_OW 292
2918: PUSH
2919: LD_INT 6
2921: PPUSH
2922: LD_EXP 49
2926: PPUSH
2927: CALL_OW 292
2931: OR
2932: PUSH
2933: LD_EXP 57
2937: PPUSH
2938: CALL_OW 255
2942: PUSH
2943: LD_INT 3
2945: EQUAL
2946: PUSH
2947: LD_INT 6
2949: PPUSH
2950: LD_EXP 57
2954: PPUSH
2955: CALL_OW 292
2959: AND
2960: OR
2961: PUSH
2962: LD_EXP 14
2966: NOT
2967: AND
2968: IFFALSE 3821
2970: GO 2972
2972: DISABLE
// begin enable ;
2973: ENABLE
// InGameOn ;
2974: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2978: LD_EXP 50
2982: PPUSH
2983: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2987: LD_EXP 57
2991: PPUSH
2992: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2996: LD_EXP 49
3000: PUSH
3001: LD_EXP 57
3005: PUSH
3006: EMPTY
3007: LIST
3008: LIST
3009: PPUSH
3010: CALL_OW 200
// DialogueOn ;
3014: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
3018: LD_EXP 13
3022: IFFALSE 3286
// begin meetPokryshkin = true ;
3024: LD_ADDR_EXP 14
3028: PUSH
3029: LD_INT 1
3031: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3032: LD_INT 6
3034: PPUSH
3035: LD_INT 3
3037: PPUSH
3038: CALL_OW 343
// DialogueOff ;
3042: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3046: LD_EXP 49
3050: PPUSH
3051: LD_EXP 50
3055: PPUSH
3056: CALL_OW 250
3060: PPUSH
3061: LD_EXP 50
3065: PPUSH
3066: CALL_OW 251
3070: PPUSH
3071: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3075: LD_EXP 49
3079: PPUSH
3080: LD_EXP 50
3084: PPUSH
3085: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
3089: LD_EXP 50
3093: PPUSH
3094: LD_EXP 49
3098: PPUSH
3099: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
3103: LD_EXP 57
3107: PPUSH
3108: LD_STRING D4-Gny-3
3110: PPUSH
3111: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
3115: LD_EXP 49
3119: PPUSH
3120: LD_STRING D4-Bur-3
3122: PPUSH
3123: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3127: LD_EXP 50
3131: PPUSH
3132: LD_STRING D4-Pok-4
3134: PPUSH
3135: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3139: LD_EXP 45
3143: PPUSH
3144: LD_INT 18
3146: PPUSH
3147: LD_INT 1
3149: PPUSH
3150: CALL_OW 49
// wait ( 0 0$2 ) ;
3154: LD_INT 70
3156: PPUSH
3157: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3161: LD_EXP 49
3165: PPUSH
3166: LD_STRING D4-Bur-4
3168: PPUSH
3169: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3173: LD_EXP 50
3177: PPUSH
3178: LD_STRING D4-Pok-5
3180: PPUSH
3181: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3185: LD_EXP 45
3189: PPUSH
3190: LD_STRING D4-Sol1-5
3192: PPUSH
3193: LD_INT 0
3195: PPUSH
3196: LD_INT 0
3198: PPUSH
3199: LD_INT 1
3201: PPUSH
3202: LD_INT 0
3204: PPUSH
3205: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3209: LD_EXP 50
3213: PPUSH
3214: LD_STRING D4-Pok-6
3216: PPUSH
3217: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3221: LD_EXP 50
3225: PPUSH
3226: LD_STRING D4-Pok-6a
3228: PPUSH
3229: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3233: LD_EXP 49
3237: PPUSH
3238: LD_STRING D4-Bur-6
3240: PPUSH
3241: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3245: LD_EXP 50
3249: PPUSH
3250: LD_STRING D4-Pok-7
3252: PPUSH
3253: CALL_OW 88
// DialogueOff ;
3257: CALL_OW 7
// InGameOff ;
3261: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3265: LD_STRING M2
3267: PPUSH
3268: CALL_OW 337
// goToHill = true ;
3272: LD_ADDR_EXP 15
3276: PUSH
3277: LD_INT 1
3279: ST_TO_ADDR
// MoveToHill ;
3280: CALL 10895 0 0
// exit ;
3284: GO 3821
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3286: LD_EXP 49
3290: PUSH
3291: LD_EXP 57
3295: PUSH
3296: EMPTY
3297: LIST
3298: LIST
3299: PPUSH
3300: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3304: LD_EXP 50
3308: PPUSH
3309: LD_STRING D4-Pok-1
3311: PPUSH
3312: CALL_OW 88
// if GetDistUnits ( Gnyevko , Pokryshkin ) <= 15 and GetDistUnits ( Burlak , Pokryshkin ) > 20 then
3316: LD_EXP 57
3320: PPUSH
3321: LD_EXP 50
3325: PPUSH
3326: CALL_OW 296
3330: PUSH
3331: LD_INT 15
3333: LESSEQUAL
3334: PUSH
3335: LD_EXP 49
3339: PPUSH
3340: LD_EXP 50
3344: PPUSH
3345: CALL_OW 296
3349: PUSH
3350: LD_INT 20
3352: GREATER
3353: AND
3354: IFFALSE 3464
// begin ComWalk ( Gnyevko ) ;
3356: LD_EXP 57
3360: PPUSH
3361: CALL_OW 138
// Say ( Gnyevko , D4-Gny-1 ) ;
3365: LD_EXP 57
3369: PPUSH
3370: LD_STRING D4-Gny-1
3372: PPUSH
3373: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-2 ) ;
3377: LD_EXP 50
3381: PPUSH
3382: LD_STRING D4-Pok-2
3384: PPUSH
3385: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3389: LD_EXP 57
3393: PPUSH
3394: LD_STRING D4-Gny-2
3396: PPUSH
3397: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3401: LD_EXP 50
3405: PPUSH
3406: LD_STRING D4-Pok-3
3408: PPUSH
3409: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3413: LD_ADDR_EXP 13
3417: PUSH
3418: LD_INT 1
3420: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3421: LD_EXP 57
3425: PPUSH
3426: LD_INT 6
3428: PPUSH
3429: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3433: LD_EXP 57
3437: PPUSH
3438: LD_EXP 50
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_EXP 50
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: CALL_OW 171
// end else
3462: GO 3813
// begin meetPokryshkin = true ;
3464: LD_ADDR_EXP 14
3468: PUSH
3469: LD_INT 1
3471: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3472: LD_INT 6
3474: PPUSH
3475: LD_INT 3
3477: PPUSH
3478: CALL_OW 343
// DialogueOff ;
3482: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3486: LD_EXP 57
3490: PPUSH
3491: CALL_OW 255
3495: PUSH
3496: LD_INT 3
3498: EQUAL
3499: PUSH
3500: LD_EXP 57
3504: PPUSH
3505: CALL_OW 302
3509: AND
3510: IFFALSE 3587
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3512: LD_EXP 49
3516: PUSH
3517: LD_EXP 57
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PPUSH
3526: LD_EXP 50
3530: PPUSH
3531: CALL_OW 250
3535: PPUSH
3536: LD_EXP 50
3540: PPUSH
3541: CALL_OW 251
3545: PPUSH
3546: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3550: LD_EXP 49
3554: PUSH
3555: LD_EXP 57
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PPUSH
3564: LD_EXP 50
3568: PPUSH
3569: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3573: LD_EXP 57
3577: PPUSH
3578: LD_INT 6
3580: PPUSH
3581: CALL_OW 235
// end else
3585: GO 3630
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3587: LD_EXP 49
3591: PPUSH
3592: LD_EXP 50
3596: PPUSH
3597: CALL_OW 250
3601: PPUSH
3602: LD_EXP 50
3606: PPUSH
3607: CALL_OW 251
3611: PPUSH
3612: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3616: LD_EXP 49
3620: PPUSH
3621: LD_EXP 50
3625: PPUSH
3626: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3630: LD_EXP 50
3634: PPUSH
3635: LD_EXP 49
3639: PPUSH
3640: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3644: LD_EXP 49
3648: PPUSH
3649: LD_STRING D4-Bur-3
3651: PPUSH
3652: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3656: LD_EXP 50
3660: PPUSH
3661: LD_STRING D4-Pok-4
3663: PPUSH
3664: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3668: LD_EXP 45
3672: PPUSH
3673: LD_INT 18
3675: PPUSH
3676: LD_INT 1
3678: PPUSH
3679: CALL_OW 49
// wait ( 0 0$2 ) ;
3683: LD_INT 70
3685: PPUSH
3686: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3690: LD_EXP 49
3694: PPUSH
3695: LD_STRING D4-Bur-4
3697: PPUSH
3698: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3702: LD_EXP 50
3706: PPUSH
3707: LD_STRING D4-Pok-5
3709: PPUSH
3710: CALL_OW 88
// SayEX ( Charles , D4-Sol1-5 , false , false , true , false ) ;
3714: LD_EXP 45
3718: PPUSH
3719: LD_STRING D4-Sol1-5
3721: PPUSH
3722: LD_INT 0
3724: PPUSH
3725: LD_INT 0
3727: PPUSH
3728: LD_INT 1
3730: PPUSH
3731: LD_INT 0
3733: PPUSH
3734: CALL_OW 587
// Say ( Pokryshkin , D4-Pok-6 ) ;
3738: LD_EXP 50
3742: PPUSH
3743: LD_STRING D4-Pok-6
3745: PPUSH
3746: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3750: LD_EXP 50
3754: PPUSH
3755: LD_STRING D4-Pok-6a
3757: PPUSH
3758: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3762: LD_EXP 49
3766: PPUSH
3767: LD_STRING D4-Bur-6
3769: PPUSH
3770: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3774: LD_EXP 50
3778: PPUSH
3779: LD_STRING D4-Pok-7
3781: PPUSH
3782: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3786: LD_STRING M2
3788: PPUSH
3789: CALL_OW 337
// goToHill = true ;
3793: LD_ADDR_EXP 15
3797: PUSH
3798: LD_INT 1
3800: ST_TO_ADDR
// DialogueOff ;
3801: CALL_OW 7
// InGameOff ;
3805: CALL_OW 9
// MoveToHill ;
3809: CALL 10895 0 0
// end ; DialogueOff ;
3813: CALL_OW 7
// InGameOff ;
3817: CALL_OW 9
// end ;
3821: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3822: LD_EXP 49
3826: PPUSH
3827: LD_EXP 50
3831: PPUSH
3832: CALL_OW 296
3836: PUSH
3837: LD_INT 10
3839: GREATER
3840: PUSH
3841: LD_EXP 15
3845: AND
3846: PUSH
3847: LD_EXP 18
3851: NOT
3852: AND
3853: IFFALSE 4054
3855: GO 3857
3857: DISABLE
3858: LD_INT 0
3860: PPUSH
// begin enable ;
3861: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3862: LD_ADDR_VAR 0 1
3866: PUSH
3867: LD_EXP 50
3871: PUSH
3872: LD_EXP 51
3876: PUSH
3877: LD_EXP 52
3881: PUSH
3882: LD_EXP 53
3886: PUSH
3887: LD_EXP 54
3891: PUSH
3892: EMPTY
3893: LIST
3894: LIST
3895: LIST
3896: LIST
3897: LIST
3898: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3899: LD_EXP 57
3903: PPUSH
3904: CALL_OW 255
3908: PUSH
3909: LD_INT 6
3911: EQUAL
3912: PUSH
3913: LD_EXP 12
3917: AND
3918: IFFALSE 3936
// ruSolds = ruSolds ^ Gnyevko ;
3920: LD_ADDR_VAR 0 1
3924: PUSH
3925: LD_VAR 0 1
3929: PUSH
3930: LD_EXP 57
3934: ADD
3935: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3936: LD_VAR 0 1
3940: PPUSH
3941: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3945: LD_EXP 49
3949: PPUSH
3950: CALL_OW 87
// DialogueOn ;
3954: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3958: LD_EXP 50
3962: PPUSH
3963: LD_STRING DSplit-Pok-1
3965: PPUSH
3966: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3970: LD_EXP 49
3974: PPUSH
3975: LD_STRING DSplit-Bur-1
3977: PPUSH
3978: CALL_OW 88
// DialogueOff ;
3982: CALL_OW 7
// InGameOn ;
3986: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3990: LD_EXP 49
3994: PPUSH
3995: LD_EXP 50
3999: PPUSH
4000: CALL_OW 250
4004: PPUSH
4005: LD_EXP 50
4009: PPUSH
4010: CALL_OW 251
4014: PPUSH
4015: CALL_OW 111
// wait ( 0 0$1 ) ;
4019: LD_INT 35
4021: PPUSH
4022: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
4026: LD_EXP 49
4030: PPUSH
4031: LD_EXP 50
4035: PPUSH
4036: CALL_OW 296
4040: PUSH
4041: LD_INT 6
4043: LESS
4044: IFFALSE 3990
// InGameOff ;
4046: CALL_OW 9
// MoveToHill ;
4050: CALL 10895 0 0
// end ;
4054: PPOPN 1
4056: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
4057: LD_INT 0
4059: PPUSH
4060: PPUSH
// traitor = true ;
4061: LD_ADDR_EXP 18
4065: PUSH
4066: LD_INT 1
4068: ST_TO_ADDR
// DialogueOn ;
4069: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
4073: LD_EXP 50
4077: PPUSH
4078: LD_STRING DAttack-Pok-1
4080: PPUSH
4081: CALL_OW 88
// DialogueOff ;
4085: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
4089: LD_INT 3
4091: PPUSH
4092: LD_INT 6
4094: PPUSH
4095: LD_INT 2
4097: PPUSH
4098: LD_INT 1
4100: PPUSH
4101: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
4105: LD_INT 22
4107: PUSH
4108: LD_INT 6
4110: PUSH
4111: EMPTY
4112: LIST
4113: LIST
4114: PUSH
4115: LD_INT 21
4117: PUSH
4118: LD_INT 1
4120: PUSH
4121: EMPTY
4122: LIST
4123: LIST
4124: PUSH
4125: EMPTY
4126: LIST
4127: LIST
4128: PPUSH
4129: CALL_OW 69
4133: PPUSH
4134: LD_EXP 49
4138: PPUSH
4139: CALL_OW 115
// end ;
4143: LD_VAR 0 1
4147: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4148: LD_EXP 50
4152: PPUSH
4153: LD_INT 65
4155: PPUSH
4156: LD_INT 59
4158: PPUSH
4159: CALL_OW 297
4163: PUSH
4164: LD_INT 4
4166: LESS
4167: PUSH
4168: LD_EXP 18
4172: NOT
4173: AND
4174: IFFALSE 4371
4176: GO 4178
4178: DISABLE
// begin InGameOn ;
4179: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4183: LD_INT 55
4185: PPUSH
4186: LD_INT 50
4188: PPUSH
4189: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4193: LD_EXP 49
4197: PPUSH
4198: LD_INT 66
4200: PPUSH
4201: LD_INT 57
4203: PPUSH
4204: CALL_OW 111
// AddComHold ( Burlak ) ;
4208: LD_EXP 49
4212: PPUSH
4213: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4217: LD_EXP 45
4221: PPUSH
4222: LD_INT 59
4224: PPUSH
4225: LD_INT 55
4227: PPUSH
4228: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4232: LD_INT 35
4234: PPUSH
4235: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4239: LD_INT 1
4241: PPUSH
4242: LD_EXP 50
4246: PPUSH
4247: CALL_OW 292
4251: IFFALSE 4232
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4253: LD_EXP 45
4257: PUSH
4258: LD_EXP 50
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: PPUSH
4267: CALL_OW 87
// ComStop ( Charles ) ;
4271: LD_EXP 45
4275: PPUSH
4276: CALL_OW 141
// AddComHold ( Charles ) ;
4280: LD_EXP 45
4284: PPUSH
4285: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4289: LD_EXP 45
4293: PPUSH
4294: LD_EXP 50
4298: PPUSH
4299: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4303: LD_EXP 45
4307: PPUSH
4308: LD_STRING D5-Sol1-1
4310: PPUSH
4311: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4315: LD_EXP 50
4319: PPUSH
4320: LD_STRING D5-Pok-1
4322: PPUSH
4323: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4327: LD_INT 1
4329: PPUSH
4330: LD_INT 6
4332: PPUSH
4333: LD_INT 2
4335: PPUSH
4336: LD_INT 1
4338: PPUSH
4339: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4343: LD_INT 1
4345: PPUSH
4346: LD_INT 3
4348: PPUSH
4349: LD_INT 2
4351: PPUSH
4352: LD_INT 1
4354: PPUSH
4355: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4359: LD_EXP 45
4363: PPUSH
4364: LD_STRING D5-Sol1-2
4366: PPUSH
4367: CALL_OW 88
// end ;
4371: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4372: LD_EXP 45
4376: PPUSH
4377: CALL_OW 301
4381: PUSH
4382: LD_EXP 15
4386: AND
4387: IFFALSE 4978
4389: GO 4391
4391: DISABLE
4392: LD_INT 0
4394: PPUSH
// begin InGameOn ;
4395: CALL_OW 8
// goToHill = false ;
4399: LD_ADDR_EXP 15
4403: PUSH
4404: LD_INT 0
4406: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4407: LD_INT 22
4409: PUSH
4410: LD_INT 6
4412: PUSH
4413: EMPTY
4414: LIST
4415: LIST
4416: PUSH
4417: LD_INT 21
4419: PUSH
4420: LD_INT 1
4422: PUSH
4423: EMPTY
4424: LIST
4425: LIST
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: PPUSH
4431: CALL_OW 69
4435: PPUSH
4436: CALL_OW 141
// wait ( 0 0$1 ) ;
4440: LD_INT 35
4442: PPUSH
4443: CALL_OW 67
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4447: LD_INT 22
4449: PUSH
4450: LD_INT 6
4452: PUSH
4453: EMPTY
4454: LIST
4455: LIST
4456: PUSH
4457: LD_INT 21
4459: PUSH
4460: LD_INT 1
4462: PUSH
4463: EMPTY
4464: LIST
4465: LIST
4466: PUSH
4467: EMPTY
4468: LIST
4469: LIST
4470: PPUSH
4471: CALL_OW 69
4475: PPUSH
4476: CALL_OW 138
// wait ( 0 0$1 ) ;
4480: LD_INT 35
4482: PPUSH
4483: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4487: LD_INT 55
4489: PPUSH
4490: LD_INT 50
4492: PPUSH
4493: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4497: LD_EXP 49
4501: PPUSH
4502: LD_INT 56
4504: PPUSH
4505: LD_INT 56
4507: PPUSH
4508: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4512: LD_INT 22
4514: PUSH
4515: LD_INT 6
4517: PUSH
4518: EMPTY
4519: LIST
4520: LIST
4521: PUSH
4522: LD_INT 21
4524: PUSH
4525: LD_INT 1
4527: PUSH
4528: EMPTY
4529: LIST
4530: LIST
4531: PUSH
4532: EMPTY
4533: LIST
4534: LIST
4535: PPUSH
4536: CALL_OW 69
4540: PPUSH
4541: LD_INT 56
4543: PPUSH
4544: LD_INT 56
4546: PPUSH
4547: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4551: LD_EXP 49
4555: PPUSH
4556: LD_STRING D5-Bur-2
4558: PPUSH
4559: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4563: LD_EXP 50
4567: PPUSH
4568: LD_STRING D5-Pok-2
4570: PPUSH
4571: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4575: LD_EXP 54
4579: PPUSH
4580: LD_STRING D5-Bel-2
4582: PPUSH
4583: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4587: LD_EXP 50
4591: PPUSH
4592: LD_STRING D5-Pok-3
4594: PPUSH
4595: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4599: LD_EXP 57
4603: PPUSH
4604: CALL_OW 255
4608: PUSH
4609: LD_INT 6
4611: EQUAL
4612: IFFALSE 4626
// Say ( Gnyevko , D5-Gny-3 ) ;
4614: LD_EXP 57
4618: PPUSH
4619: LD_STRING D5-Gny-3
4621: PPUSH
4622: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4626: LD_EXP 49
4630: PPUSH
4631: LD_STRING D5-Bur-3
4633: PPUSH
4634: CALL_OW 88
// interface_hidden = true ;
4638: LD_ADDR_OWVAR 54
4642: PUSH
4643: LD_INT 1
4645: ST_TO_ADDR
// IngameOff ;
4646: CALL_OW 9
// wait ( 0 0$2 ) ;
4650: LD_INT 70
4652: PPUSH
4653: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4657: LD_EXP 49
4661: PPUSH
4662: LD_INT 85
4664: PPUSH
4665: LD_INT 64
4667: PPUSH
4668: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4672: LD_INT 22
4674: PUSH
4675: LD_INT 6
4677: PUSH
4678: EMPTY
4679: LIST
4680: LIST
4681: PUSH
4682: LD_INT 21
4684: PUSH
4685: LD_INT 1
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: PUSH
4692: EMPTY
4693: LIST
4694: LIST
4695: PPUSH
4696: CALL_OW 69
4700: PPUSH
4701: LD_INT 85
4703: PPUSH
4704: LD_INT 64
4706: PPUSH
4707: CALL_OW 111
// interface_hidden = false ;
4711: LD_ADDR_OWVAR 54
4715: PUSH
4716: LD_INT 0
4718: ST_TO_ADDR
// InGameOn ;
4719: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4723: LD_EXP 49
4727: PPUSH
4728: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4732: LD_EXP 50
4736: PPUSH
4737: LD_STRING D6-Pok-1
4739: PPUSH
4740: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4744: LD_EXP 49
4748: PPUSH
4749: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4753: LD_EXP 49
4757: PPUSH
4758: LD_STRING D6-Bur-1
4760: PPUSH
4761: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4765: LD_EXP 49
4769: PPUSH
4770: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4774: LD_EXP 50
4778: PPUSH
4779: LD_STRING D6-Pok-2
4781: PPUSH
4782: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4786: LD_EXP 49
4790: PPUSH
4791: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4795: LD_EXP 54
4799: PPUSH
4800: LD_STRING D6-Bel-2
4802: PPUSH
4803: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4807: LD_EXP 49
4811: PPUSH
4812: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4816: LD_EXP 49
4820: PPUSH
4821: LD_STRING D6-Bur-2
4823: PPUSH
4824: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4828: LD_EXP 49
4832: PPUSH
4833: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4837: LD_EXP 50
4841: PPUSH
4842: LD_STRING D6-Pok-3
4844: PPUSH
4845: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4849: LD_EXP 49
4853: PPUSH
4854: CALL_OW 87
// SayRadioNoFace ( Kurin , D6-Kur-3 ) ;
4858: LD_EXP 58
4862: PPUSH
4863: LD_STRING D6-Kur-3
4865: PPUSH
4866: CALL_OW 586
// CenterNowOnUnits ( Burlak ) ;
4870: LD_EXP 49
4874: PPUSH
4875: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4879: LD_EXP 50
4883: PPUSH
4884: LD_STRING D6-Pok-4
4886: PPUSH
4887: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4891: LD_EXP 49
4895: PPUSH
4896: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4900: LD_EXP 54
4904: PPUSH
4905: LD_STRING D6-Bel-4
4907: PPUSH
4908: CALL_OW 88
// InGameOff ;
4912: CALL_OW 9
// interface_hidden = false ;
4916: LD_ADDR_OWVAR 54
4920: PUSH
4921: LD_INT 0
4923: ST_TO_ADDR
// ComMoveToArea ( Pokryshkin , PokryszkinAttack ) ;
4924: LD_EXP 50
4928: PPUSH
4929: LD_INT 27
4931: PPUSH
4932: CALL_OW 113
// ComMoveToArea ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , PokryszkinAttack ) ;
4936: LD_INT 22
4938: PUSH
4939: LD_INT 6
4941: PUSH
4942: EMPTY
4943: LIST
4944: LIST
4945: PUSH
4946: LD_INT 21
4948: PUSH
4949: LD_INT 1
4951: PUSH
4952: EMPTY
4953: LIST
4954: LIST
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PPUSH
4960: CALL_OW 69
4964: PUSH
4965: LD_EXP 50
4969: DIFF
4970: PPUSH
4971: LD_INT 27
4973: PPUSH
4974: CALL_OW 113
// end ;
4978: PPOPN 1
4980: END
// every 0 0$1 trigger IsInArea ( Pokryshkin , PokryszkinAttack ) do
4981: LD_EXP 50
4985: PPUSH
4986: LD_INT 27
4988: PPUSH
4989: CALL_OW 308
4993: IFFALSE 5076
4995: GO 4997
4997: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4998: LD_EXP 50
5002: PPUSH
5003: LD_STRING D7-Pok-1
5005: PPUSH
5006: CALL_OW 88
// AddComAttackUnit ( Pokryshkin , am_bun ) ;
5010: LD_EXP 50
5014: PPUSH
5015: LD_INT 23
5017: PPUSH
5018: CALL_OW 175
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin , am_bun ) ;
5022: LD_INT 22
5024: PUSH
5025: LD_INT 6
5027: PUSH
5028: EMPTY
5029: LIST
5030: LIST
5031: PUSH
5032: LD_INT 21
5034: PUSH
5035: LD_INT 1
5037: PUSH
5038: EMPTY
5039: LIST
5040: LIST
5041: PUSH
5042: EMPTY
5043: LIST
5044: LIST
5045: PPUSH
5046: CALL_OW 69
5050: PUSH
5051: LD_EXP 50
5055: DIFF
5056: PPUSH
5057: LD_INT 23
5059: PPUSH
5060: CALL_OW 175
// DoNotAttack ( 1 , Gnyevko ) ;
5064: LD_INT 1
5066: PPUSH
5067: LD_EXP 57
5071: PPUSH
5072: CALL_OW 471
// end ;
5076: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
5077: LD_INT 1
5079: PPUSH
5080: LD_EXP 50
5084: PPUSH
5085: CALL_OW 292
5089: PUSH
5090: LD_EXP 45
5094: PPUSH
5095: CALL_OW 301
5099: AND
5100: IFFALSE 5119
5102: GO 5104
5104: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
5105: LD_EXP 46
5109: PPUSH
5110: LD_EXP 50
5114: PPUSH
5115: CALL_OW 115
5119: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
5120: LD_INT 3
5122: PPUSH
5123: LD_INT 23
5125: PPUSH
5126: CALL_OW 292
5130: IFFALSE 5147
5132: GO 5134
5134: DISABLE
// begin Say ( Johanna , D7-FSol1-1 ) ;
5135: LD_EXP 46
5139: PPUSH
5140: LD_STRING D7-FSol1-1
5142: PPUSH
5143: CALL_OW 88
// end ;
5147: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
5148: LD_EXP 50
5152: PPUSH
5153: CALL_OW 303
5157: IFFALSE 5689
5159: GO 5161
5161: DISABLE
5162: LD_INT 0
5164: PPUSH
5165: PPUSH
5166: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
5167: LD_ADDR_VAR 0 3
5171: PUSH
5172: LD_INT 22
5174: PUSH
5175: LD_INT 6
5177: PUSH
5178: EMPTY
5179: LIST
5180: LIST
5181: PUSH
5182: LD_INT 21
5184: PUSH
5185: LD_INT 1
5187: PUSH
5188: EMPTY
5189: LIST
5190: LIST
5191: PUSH
5192: LD_INT 50
5194: PUSH
5195: EMPTY
5196: LIST
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: LIST
5202: PPUSH
5203: CALL_OW 69
5207: PUSH
5208: LD_EXP 54
5212: DIFF
5213: ST_TO_ADDR
// DialogueOn ;
5214: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5218: LD_EXP 54
5222: PPUSH
5223: LD_STRING D7a-Bel-1
5225: PPUSH
5226: CALL_OW 88
// DialogueOff ;
5230: CALL_OW 7
// for i := 1 to ruSolds do
5234: LD_ADDR_VAR 0 1
5238: PUSH
5239: DOUBLE
5240: LD_INT 1
5242: DEC
5243: ST_TO_ADDR
5244: LD_VAR 0 3
5248: PUSH
5249: FOR_TO
5250: IFFALSE 5308
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5252: LD_VAR 0 3
5256: PUSH
5257: LD_VAR 0 1
5261: ARRAY
5262: PPUSH
5263: LD_INT 87
5265: PUSH
5266: LD_VAR 0 1
5270: PLUS
5271: PPUSH
5272: LD_INT 63
5274: PUSH
5275: LD_VAR 0 1
5279: PLUS
5280: PPUSH
5281: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5285: LD_VAR 0 3
5289: PUSH
5290: LD_VAR 0 1
5294: ARRAY
5295: PPUSH
5296: LD_INT 89
5298: PPUSH
5299: LD_INT 67
5301: PPUSH
5302: CALL_OW 178
// end ;
5306: GO 5249
5308: POP
5309: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5310: LD_EXP 54
5314: PPUSH
5315: LD_INT 89
5317: PPUSH
5318: LD_INT 67
5320: PPUSH
5321: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5325: LD_EXP 54
5329: PPUSH
5330: LD_INT 88
5332: PPUSH
5333: LD_INT 66
5335: PPUSH
5336: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5340: LD_EXP 51
5344: PPUSH
5345: LD_STRING D7a-RSol1-1
5347: PPUSH
5348: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5352: LD_EXP 46
5356: PPUSH
5357: LD_STRING D7a-FSol1-1
5359: PPUSH
5360: CALL_OW 88
// wait ( 0 0$12 ) ;
5364: LD_INT 420
5366: PPUSH
5367: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5371: LD_EXP 54
5375: PPUSH
5376: LD_STRING D7b-Bel-1
5378: PPUSH
5379: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5383: LD_EXP 52
5387: PPUSH
5388: LD_STRING D7b-FSol1-1
5390: PPUSH
5391: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5395: LD_EXP 54
5399: PPUSH
5400: LD_STRING D7b-Bel-2
5402: PPUSH
5403: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5407: LD_EXP 51
5411: PPUSH
5412: LD_STRING D7b-RSol1-2
5414: PPUSH
5415: CALL_OW 88
// for unit in ruSolds do
5419: LD_ADDR_VAR 0 2
5423: PUSH
5424: LD_VAR 0 3
5428: PUSH
5429: FOR_IN
5430: IFFALSE 5663
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5432: LD_EXP 49
5436: PPUSH
5437: LD_VAR 0 2
5441: PPUSH
5442: CALL_OW 296
5446: PUSH
5447: LD_INT 7
5449: LESS
5450: IFFALSE 5661
// begin InGameOn ;
5452: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5456: LD_EXP 54
5460: PUSH
5461: LD_EXP 51
5465: PUSH
5466: EMPTY
5467: LIST
5468: LIST
5469: PPUSH
5470: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5474: LD_EXP 49
5478: PPUSH
5479: LD_INT 88
5481: PPUSH
5482: LD_INT 66
5484: PPUSH
5485: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5489: LD_EXP 54
5493: PPUSH
5494: LD_EXP 49
5498: PPUSH
5499: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5503: LD_EXP 49
5507: PPUSH
5508: LD_INT 90
5510: PPUSH
5511: LD_INT 66
5513: PPUSH
5514: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5518: LD_EXP 49
5522: PPUSH
5523: LD_STRING D7b-Bur-3
5525: PPUSH
5526: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5530: LD_EXP 54
5534: PPUSH
5535: LD_STRING D7b-Bel-4
5537: PPUSH
5538: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5542: LD_EXP 49
5546: PPUSH
5547: LD_STRING D7b-Bur-4
5549: PPUSH
5550: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5554: LD_EXP 54
5558: PPUSH
5559: LD_STRING D7b-Bel-5
5561: PPUSH
5562: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5566: LD_EXP 52
5570: PPUSH
5571: LD_STRING D7b-FSol1-5
5573: PPUSH
5574: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5578: LD_EXP 54
5582: PPUSH
5583: LD_STRING D7b-Bel-6
5585: PPUSH
5586: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5590: LD_EXP 49
5594: PPUSH
5595: LD_STRING D7b-Bur-6
5597: PPUSH
5598: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5602: LD_EXP 51
5606: PPUSH
5607: LD_STRING D7b-RSol1-6
5609: PPUSH
5610: CALL_OW 88
// InGameOff ;
5614: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5618: LD_VAR 0 3
5622: PPUSH
5623: LD_INT 3
5625: PPUSH
5626: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5630: LD_EXP 54
5634: PPUSH
5635: LD_INT 3
5637: PPUSH
5638: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5642: LD_STRING M3
5644: PPUSH
5645: CALL_OW 337
// secondAttack = true ;
5649: LD_ADDR_EXP 17
5653: PUSH
5654: LD_INT 1
5656: ST_TO_ADDR
// exit ;
5657: POP
5658: POP
5659: GO 5689
// end ;
5661: GO 5429
5663: POP
5664: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5665: LD_EXP 54
5669: PPUSH
5670: LD_STRING D7b-Bel-3
5672: PPUSH
5673: CALL_OW 88
// InGameOff ;
5677: CALL_OW 9
// belkovWaitForGorky = true ;
5681: LD_ADDR_EXP 16
5685: PUSH
5686: LD_INT 1
5688: ST_TO_ADDR
// end ;
5689: PPOPN 3
5691: END
// every 0 0$1 trigger belkovWaitForGorky and not traitor do var unit , ruSolds ;
5692: LD_EXP 16
5696: PUSH
5697: LD_EXP 18
5701: NOT
5702: AND
5703: IFFALSE 6013
5705: GO 5707
5707: DISABLE
5708: LD_INT 0
5710: PPUSH
5711: PPUSH
// begin enable ;
5712: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5713: LD_ADDR_VAR 0 2
5717: PUSH
5718: LD_INT 22
5720: PUSH
5721: LD_INT 6
5723: PUSH
5724: EMPTY
5725: LIST
5726: LIST
5727: PUSH
5728: LD_INT 21
5730: PUSH
5731: LD_INT 1
5733: PUSH
5734: EMPTY
5735: LIST
5736: LIST
5737: PUSH
5738: EMPTY
5739: LIST
5740: LIST
5741: PPUSH
5742: CALL_OW 69
5746: ST_TO_ADDR
// for unit in ruSolds do
5747: LD_ADDR_VAR 0 1
5751: PUSH
5752: LD_VAR 0 2
5756: PUSH
5757: FOR_IN
5758: IFFALSE 6011
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5760: LD_EXP 49
5764: PPUSH
5765: LD_VAR 0 1
5769: PPUSH
5770: CALL_OW 296
5774: PUSH
5775: LD_INT 7
5777: LESS
5778: IFFALSE 6009
// begin belkovWaitForGorky = false ;
5780: LD_ADDR_EXP 16
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// InGameOn ;
5788: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5792: LD_EXP 54
5796: PUSH
5797: LD_EXP 51
5801: PUSH
5802: EMPTY
5803: LIST
5804: LIST
5805: PPUSH
5806: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5810: LD_EXP 49
5814: PPUSH
5815: LD_INT 88
5817: PPUSH
5818: LD_INT 66
5820: PPUSH
5821: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5825: LD_EXP 54
5829: PPUSH
5830: LD_EXP 49
5834: PPUSH
5835: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5839: LD_EXP 49
5843: PPUSH
5844: LD_INT 90
5846: PPUSH
5847: LD_INT 66
5849: PPUSH
5850: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5854: LD_EXP 54
5858: PPUSH
5859: LD_STRING D7b-Bel-3a
5861: PPUSH
5862: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5866: LD_EXP 49
5870: PPUSH
5871: LD_STRING D7b-Bur-3
5873: PPUSH
5874: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5878: LD_EXP 54
5882: PPUSH
5883: LD_STRING D7b-Bel-4
5885: PPUSH
5886: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5890: LD_EXP 49
5894: PPUSH
5895: LD_STRING D7b-Bur-4
5897: PPUSH
5898: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5902: LD_EXP 54
5906: PPUSH
5907: LD_STRING D7b-Bel-5
5909: PPUSH
5910: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5914: LD_EXP 52
5918: PPUSH
5919: LD_STRING D7b-FSol1-5
5921: PPUSH
5922: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5926: LD_EXP 54
5930: PPUSH
5931: LD_STRING D7b-Bel-6
5933: PPUSH
5934: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5938: LD_EXP 49
5942: PPUSH
5943: LD_STRING D7b-Bur-6
5945: PPUSH
5946: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5950: LD_EXP 51
5954: PPUSH
5955: LD_STRING D7a-RSol1-6
5957: PPUSH
5958: CALL_OW 88
// InGameOff ;
5962: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5966: LD_VAR 0 2
5970: PPUSH
5971: LD_INT 3
5973: PPUSH
5974: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5978: LD_EXP 54
5982: PPUSH
5983: LD_INT 3
5985: PPUSH
5986: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5990: LD_STRING M3
5992: PPUSH
5993: CALL_OW 337
// secondAttack = true ;
5997: LD_ADDR_EXP 17
6001: PUSH
6002: LD_INT 1
6004: ST_TO_ADDR
// exit ;
6005: POP
6006: POP
6007: GO 6013
// end ;
6009: GO 5757
6011: POP
6012: POP
// end ;
6013: PPOPN 2
6015: END
// export function Dial_SecondAttack ; var units , i ; begin
6016: LD_INT 0
6018: PPUSH
6019: PPUSH
6020: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
6021: LD_EXP 46
6025: PPUSH
6026: LD_STRING D8-FSol1-1
6028: PPUSH
6029: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6033: LD_EXP 47
6037: PPUSH
6038: LD_STRING D8-Glad-1
6040: PPUSH
6041: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
6045: LD_EXP 49
6049: PPUSH
6050: LD_STRING D8-Bur-1
6052: PPUSH
6053: CALL_OW 88
// secondAttack = false ;
6057: LD_ADDR_EXP 17
6061: PUSH
6062: LD_INT 0
6064: ST_TO_ADDR
// units = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ;
6065: LD_ADDR_VAR 0 2
6069: PUSH
6070: LD_INT 22
6072: PUSH
6073: LD_INT 3
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: PUSH
6080: LD_INT 21
6082: PUSH
6083: LD_INT 1
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: PUSH
6090: EMPTY
6091: LIST
6092: LIST
6093: PPUSH
6094: CALL_OW 69
6098: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
6099: LD_EXP 48
6103: PPUSH
6104: CALL_OW 122
// wait ( 0 0$1 ) ;
6108: LD_INT 35
6110: PPUSH
6111: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6115: LD_INT 35
6117: PPUSH
6118: CALL_OW 67
// for i in amApemans do
6122: LD_ADDR_VAR 0 3
6126: PUSH
6127: LD_EXP 48
6131: PUSH
6132: FOR_IN
6133: IFFALSE 6199
// begin if rand ( 0 , 1 ) then
6135: LD_INT 0
6137: PPUSH
6138: LD_INT 1
6140: PPUSH
6141: CALL_OW 12
6145: IFFALSE 6173
// ComAttackUnit ( i , NearestUnitToUnit ( units , i ) ) else
6147: LD_VAR 0 3
6151: PPUSH
6152: LD_VAR 0 2
6156: PPUSH
6157: LD_VAR 0 3
6161: PPUSH
6162: CALL_OW 74
6166: PPUSH
6167: CALL_OW 115
6171: GO 6197
// ComAttackUnit ( i , SecondNearestUnitToUnit ( units , i ) ) ;
6173: LD_VAR 0 3
6177: PPUSH
6178: LD_VAR 0 2
6182: PPUSH
6183: LD_VAR 0 3
6187: PPUSH
6188: CALL 6224 0 2
6192: PPUSH
6193: CALL_OW 115
// end ;
6197: GO 6132
6199: POP
6200: POP
// until not UnitFilter ( amApemans , [ f_ok ] ) ;
6201: LD_EXP 48
6205: PPUSH
6206: LD_INT 50
6208: PUSH
6209: EMPTY
6210: LIST
6211: PPUSH
6212: CALL_OW 72
6216: NOT
6217: IFFALSE 6115
// end ;
6219: LD_VAR 0 1
6223: RET
// export function SecondNearestUnitToUnit ( group , unit ) ; var tmp ; begin
6224: LD_INT 0
6226: PPUSH
6227: PPUSH
// if group < 2 then
6228: LD_VAR 0 1
6232: PUSH
6233: LD_INT 2
6235: LESS
6236: IFFALSE 6260
// begin result := NearestUnitToUnit ( group , unit ) ;
6238: LD_ADDR_VAR 0 3
6242: PUSH
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 2
6252: PPUSH
6253: CALL_OW 74
6257: ST_TO_ADDR
// exit ;
6258: GO 6306
// end ; tmp := NearestUnitToUnit ( group , unit ) ;
6260: LD_ADDR_VAR 0 4
6264: PUSH
6265: LD_VAR 0 1
6269: PPUSH
6270: LD_VAR 0 2
6274: PPUSH
6275: CALL_OW 74
6279: ST_TO_ADDR
// result := NearestUnitToUnit ( group diff tmp , unit ) ;
6280: LD_ADDR_VAR 0 3
6284: PUSH
6285: LD_VAR 0 1
6289: PUSH
6290: LD_VAR 0 4
6294: DIFF
6295: PPUSH
6296: LD_VAR 0 2
6300: PPUSH
6301: CALL_OW 74
6305: ST_TO_ADDR
// end ;
6306: LD_VAR 0 3
6310: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
6311: LD_INT 23
6313: PPUSH
6314: CALL_OW 256
6318: PUSH
6319: LD_INT 350
6321: LESS
6322: PUSH
6323: LD_INT 23
6325: PPUSH
6326: CALL_OW 256
6330: PUSH
6331: LD_INT 250
6333: GREATER
6334: AND
6335: PUSH
6336: LD_INT 20
6338: PPUSH
6339: LD_INT 22
6341: PUSH
6342: LD_INT 3
6344: PUSH
6345: EMPTY
6346: LIST
6347: LIST
6348: PUSH
6349: LD_INT 21
6351: PUSH
6352: LD_INT 1
6354: PUSH
6355: EMPTY
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: PPUSH
6363: CALL_OW 70
6367: PUSH
6368: LD_INT 0
6370: GREATER
6371: AND
6372: PUSH
6373: LD_EXP 24
6377: NOT
6378: AND
6379: IFFALSE 6396
6381: GO 6383
6383: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
6384: LD_EXP 46
6388: PPUSH
6389: LD_STRING D8-FSol1-2
6391: PPUSH
6392: CALL_OW 88
6396: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6397: LD_INT 23
6399: PPUSH
6400: CALL_OW 303
6404: PUSH
6405: LD_INT 22
6407: PPUSH
6408: CALL_OW 302
6412: AND
6413: PUSH
6414: LD_EXP 24
6418: NOT
6419: AND
6420: IFFALSE 6490
6422: GO 6424
6424: DISABLE
// begin amRetreat = true ;
6425: LD_ADDR_EXP 24
6429: PUSH
6430: LD_INT 1
6432: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6433: LD_EXP 46
6437: PPUSH
6438: LD_STRING D8-FSol1-2a
6440: PPUSH
6441: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6445: LD_EXP 47
6449: PUSH
6450: LD_EXP 46
6454: PUSH
6455: EMPTY
6456: LIST
6457: LIST
6458: PPUSH
6459: LD_INT 21
6461: PPUSH
6462: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6466: LD_EXP 47
6470: PPUSH
6471: LD_STRING D8-Glad-2
6473: PPUSH
6474: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6478: LD_EXP 49
6482: PPUSH
6483: LD_STRING D8-Bur-2
6485: PPUSH
6486: CALL_OW 88
// end ;
6490: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6491: LD_INT 22
6493: PPUSH
6494: CALL_OW 303
6498: PUSH
6499: LD_INT 23
6501: PPUSH
6502: CALL_OW 302
6506: AND
6507: PUSH
6508: LD_EXP 24
6512: NOT
6513: AND
6514: IFFALSE 6584
6516: GO 6518
6518: DISABLE
// begin amRetreat = true ;
6519: LD_ADDR_EXP 24
6523: PUSH
6524: LD_INT 1
6526: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6527: LD_EXP 46
6531: PPUSH
6532: LD_STRING D8-FSol1-2a
6534: PPUSH
6535: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6539: LD_EXP 47
6543: PUSH
6544: LD_EXP 46
6548: PUSH
6549: EMPTY
6550: LIST
6551: LIST
6552: PPUSH
6553: LD_INT 21
6555: PPUSH
6556: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6560: LD_EXP 47
6564: PPUSH
6565: LD_STRING D8-Glad-2
6567: PPUSH
6568: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6572: LD_EXP 49
6576: PPUSH
6577: LD_STRING D8-Bur-2
6579: PPUSH
6580: CALL_OW 88
// end ;
6584: END
// every 0 0$1 trigger ( IsDead ( amApemans ) and Difficulty >= 3 ) and not amRetreat do
6585: LD_EXP 48
6589: PPUSH
6590: CALL_OW 301
6594: PUSH
6595: LD_OWVAR 67
6599: PUSH
6600: LD_INT 3
6602: GREATEREQUAL
6603: AND
6604: PUSH
6605: LD_EXP 24
6609: NOT
6610: AND
6611: IFFALSE 6681
6613: GO 6615
6615: DISABLE
// begin amRetreat = true ;
6616: LD_ADDR_EXP 24
6620: PUSH
6621: LD_INT 1
6623: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6624: LD_EXP 46
6628: PPUSH
6629: LD_STRING D8-FSol1-2a
6631: PPUSH
6632: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6636: LD_EXP 47
6640: PUSH
6641: LD_EXP 46
6645: PUSH
6646: EMPTY
6647: LIST
6648: LIST
6649: PPUSH
6650: LD_INT 21
6652: PPUSH
6653: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6657: LD_EXP 47
6661: PPUSH
6662: LD_STRING D8-Glad-2
6664: PPUSH
6665: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6669: LD_EXP 49
6673: PPUSH
6674: LD_STRING D8-Bur-2
6676: PPUSH
6677: CALL_OW 88
// end ;
6681: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty >= 3 and not amRetreat do
6682: LD_INT 23
6684: PPUSH
6685: CALL_OW 256
6689: PUSH
6690: LD_INT 500
6692: LESS
6693: PUSH
6694: LD_OWVAR 67
6698: PUSH
6699: LD_INT 3
6701: GREATEREQUAL
6702: AND
6703: PUSH
6704: LD_EXP 24
6708: NOT
6709: AND
6710: IFFALSE 6780
6712: GO 6714
6714: DISABLE
// begin amRetreat = true ;
6715: LD_ADDR_EXP 24
6719: PUSH
6720: LD_INT 1
6722: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6723: LD_EXP 46
6727: PPUSH
6728: LD_STRING D8-FSol1-2a
6730: PPUSH
6731: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6735: LD_EXP 47
6739: PUSH
6740: LD_EXP 46
6744: PUSH
6745: EMPTY
6746: LIST
6747: LIST
6748: PPUSH
6749: LD_INT 21
6751: PPUSH
6752: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6756: LD_EXP 47
6760: PPUSH
6761: LD_STRING D8-Glad-2
6763: PPUSH
6764: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6768: LD_EXP 49
6772: PPUSH
6773: LD_STRING D8-Bur-2
6775: PPUSH
6776: CALL_OW 88
// end ;
6780: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6781: LD_INT 22
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 21
6793: PUSH
6794: LD_INT 1
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: LD_INT 50
6803: PUSH
6804: EMPTY
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: PPUSH
6812: CALL_OW 69
6816: PUSH
6817: LD_INT 0
6819: GREATER
6820: IFFALSE 6948
6822: GO 6824
6824: DISABLE
6825: LD_INT 0
6827: PPUSH
// begin enable ;
6828: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: LD_INT 21
6836: PPUSH
6837: LD_INT 22
6839: PUSH
6840: LD_INT 1
6842: PUSH
6843: EMPTY
6844: LIST
6845: LIST
6846: PUSH
6847: LD_INT 21
6849: PUSH
6850: LD_INT 1
6852: PUSH
6853: EMPTY
6854: LIST
6855: LIST
6856: PUSH
6857: EMPTY
6858: LIST
6859: LIST
6860: PPUSH
6861: CALL_OW 70
6865: PUSH
6866: FOR_IN
6867: IFFALSE 6946
// begin if unit = Gladstone then
6869: LD_VAR 0 1
6873: PUSH
6874: LD_EXP 47
6878: EQUAL
6879: IFFALSE 6909
// begin gladstoneEscape = true ;
6881: LD_ADDR_EXP 19
6885: PUSH
6886: LD_INT 1
6888: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6889: LD_EXP 47
6893: PPUSH
6894: LD_EXP 33
6898: PUSH
6899: LD_STRING Gladstone
6901: STR
6902: PPUSH
6903: CALL_OW 38
// end else
6907: GO 6935
// begin JohannaEscape = true ;
6909: LD_ADDR_EXP 20
6913: PUSH
6914: LD_INT 1
6916: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6917: LD_EXP 46
6921: PPUSH
6922: LD_EXP 33
6926: PUSH
6927: LD_STRING Johanna
6929: STR
6930: PPUSH
6931: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6935: LD_VAR 0 1
6939: PPUSH
6940: CALL_OW 64
// end ;
6944: GO 6866
6946: POP
6947: POP
// end ;
6948: PPOPN 1
6950: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6951: LD_EXP 47
6955: PPUSH
6956: CALL_OW 301
6960: PUSH
6961: LD_EXP 46
6965: PPUSH
6966: CALL_OW 301
6970: AND
6971: IFFALSE 6988
6973: GO 6975
6975: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6976: LD_EXP 49
6980: PPUSH
6981: LD_STRING D9-Bur-1
6983: PPUSH
6984: CALL_OW 88
6988: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6989: LD_EXP 46
6993: PPUSH
6994: CALL_OW 301
6998: PUSH
6999: LD_EXP 19
7003: AND
7004: PUSH
7005: LD_EXP 20
7009: NOT
7010: AND
7011: IFFALSE 7028
7013: GO 7015
7015: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
7016: LD_EXP 49
7020: PPUSH
7021: LD_STRING D9-Bur-1a
7023: PPUSH
7024: CALL_OW 88
7028: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
7029: LD_EXP 47
7033: PPUSH
7034: CALL_OW 301
7038: PUSH
7039: LD_EXP 19
7043: NOT
7044: AND
7045: PUSH
7046: LD_EXP 20
7050: AND
7051: IFFALSE 7068
7053: GO 7055
7055: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
7056: LD_EXP 49
7060: PPUSH
7061: LD_STRING D9-Bur-1b
7063: PPUSH
7064: CALL_OW 88
7068: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
7069: LD_EXP 19
7073: PUSH
7074: LD_EXP 20
7078: AND
7079: IFFALSE 7096
7081: GO 7083
7083: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
7084: LD_EXP 49
7088: PPUSH
7089: LD_STRING D9-Bur-1c
7091: PPUSH
7092: CALL_OW 88
7096: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
7097: LD_INT 22
7099: PUSH
7100: LD_INT 1
7102: PUSH
7103: EMPTY
7104: LIST
7105: LIST
7106: PUSH
7107: LD_INT 21
7109: PUSH
7110: LD_INT 3
7112: PUSH
7113: EMPTY
7114: LIST
7115: LIST
7116: PUSH
7117: LD_INT 50
7119: PUSH
7120: EMPTY
7121: LIST
7122: PUSH
7123: EMPTY
7124: LIST
7125: LIST
7126: LIST
7127: PPUSH
7128: CALL_OW 69
7132: PUSH
7133: LD_INT 0
7135: EQUAL
7136: IFFALSE 7384
7138: GO 7140
7140: DISABLE
7141: LD_INT 0
7143: PPUSH
7144: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
7145: LD_ADDR_VAR 0 1
7149: PUSH
7150: LD_INT 22
7152: PUSH
7153: LD_INT 3
7155: PUSH
7156: EMPTY
7157: LIST
7158: LIST
7159: PUSH
7160: LD_INT 21
7162: PUSH
7163: LD_INT 1
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: PUSH
7170: LD_INT 50
7172: PUSH
7173: EMPTY
7174: LIST
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: PPUSH
7181: CALL_OW 69
7185: PUSH
7186: LD_EXP 49
7190: PUSH
7191: LD_EXP 57
7195: PUSH
7196: LD_EXP 54
7200: PUSH
7201: EMPTY
7202: LIST
7203: LIST
7204: LIST
7205: DIFF
7206: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
7207: LD_ADDR_VAR 0 2
7211: PUSH
7212: LD_VAR 0 1
7216: PPUSH
7217: LD_INT 26
7219: PUSH
7220: LD_INT 1
7222: PUSH
7223: EMPTY
7224: LIST
7225: LIST
7226: PPUSH
7227: CALL_OW 72
7231: ST_TO_ADDR
// DialogueOn ;
7232: CALL_OW 6
// if IsOK ( Belkov ) then
7236: LD_EXP 54
7240: PPUSH
7241: CALL_OW 302
7245: IFFALSE 7259
// Say ( Belkov , D10-Bel-1 ) ;
7247: LD_EXP 54
7251: PPUSH
7252: LD_STRING D10-Bel-1
7254: PPUSH
7255: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
7259: LD_VAR 0 1
7263: PUSH
7264: LD_INT 0
7266: GREATER
7267: PUSH
7268: LD_VAR 0 2
7272: PUSH
7273: LD_INT 0
7275: GREATER
7276: PUSH
7277: LD_EXP 54
7281: PPUSH
7282: CALL_OW 302
7286: OR
7287: AND
7288: IFFALSE 7355
// begin Say ( Burlak , D10-Bur-1 ) ;
7290: LD_EXP 49
7294: PPUSH
7295: LD_STRING D10-Bur-1
7297: PPUSH
7298: CALL_OW 88
// if IsOK ( Belkov ) then
7302: LD_EXP 54
7306: PPUSH
7307: CALL_OW 302
7311: IFFALSE 7327
// Say ( Belkov , D10-Bel-1a ) else
7313: LD_EXP 54
7317: PPUSH
7318: LD_STRING D10-Bel-1a
7320: PPUSH
7321: CALL_OW 88
7325: GO 7343
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
7327: LD_VAR 0 2
7331: PUSH
7332: LD_INT 1
7334: ARRAY
7335: PPUSH
7336: LD_STRING D10-RSol1-1
7338: PPUSH
7339: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
7343: LD_EXP 49
7347: PPUSH
7348: LD_STRING D10-Bur-2
7350: PPUSH
7351: CALL_OW 88
// end ; DialogueOff ;
7355: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
7359: LD_STRING M4a
7361: PPUSH
7362: CALL_OW 337
// evacuationAvailable = true ;
7366: LD_ADDR_EXP 22
7370: PUSH
7371: LD_INT 1
7373: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
7374: LD_INT 1
7376: PPUSH
7377: LD_INT 1
7379: PPUSH
7380: CALL_OW 424
// end ;
7384: PPOPN 2
7386: END
// every 0 0$15 trigger evacuationAvailable and not jelenaSpawned do var randomSold ;
7387: LD_EXP 22
7391: PUSH
7392: LD_EXP 25
7396: NOT
7397: AND
7398: IFFALSE 8008
7400: GO 7402
7402: DISABLE
7403: LD_INT 0
7405: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
7406: LD_EXP 56
7410: PPUSH
7411: LD_INT 22
7413: PPUSH
7414: LD_INT 1
7416: PPUSH
7417: CALL_OW 49
// wait ( 0 0$3 ) ;
7421: LD_INT 105
7423: PPUSH
7424: CALL_OW 67
// jelenaSpawned = true ;
7428: LD_ADDR_EXP 25
7432: PUSH
7433: LD_INT 1
7435: ST_TO_ADDR
// if GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) , Kirilenkova ) < 20 then
7436: LD_INT 22
7438: PUSH
7439: LD_INT 3
7441: PUSH
7442: EMPTY
7443: LIST
7444: LIST
7445: PUSH
7446: LD_INT 21
7448: PUSH
7449: LD_INT 1
7451: PUSH
7452: EMPTY
7453: LIST
7454: LIST
7455: PUSH
7456: LD_INT 50
7458: PUSH
7459: EMPTY
7460: LIST
7461: PUSH
7462: EMPTY
7463: LIST
7464: LIST
7465: LIST
7466: PPUSH
7467: CALL_OW 69
7471: PPUSH
7472: LD_EXP 56
7476: PPUSH
7477: CALL_OW 74
7481: PPUSH
7482: LD_EXP 56
7486: PPUSH
7487: CALL_OW 296
7491: PUSH
7492: LD_INT 20
7494: LESS
7495: IFFALSE 7499
// exit ;
7497: GO 8008
// DialogueOn ;
7499: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
7503: LD_EXP 56
7507: PPUSH
7508: LD_STRING D11b-Kir-1
7510: PPUSH
7511: CALL_OW 94
// if IsOK ( Belkov ) then
7515: LD_EXP 54
7519: PPUSH
7520: CALL_OW 302
7524: IFFALSE 7552
// begin Say ( Belkov , D11b-Bel-1 ) ;
7526: LD_EXP 54
7530: PPUSH
7531: LD_STRING D11b-Bel-1
7533: PPUSH
7534: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
7538: LD_EXP 54
7542: PPUSH
7543: LD_STRING D11b-Bel-1a
7545: PPUSH
7546: CALL_OW 94
// end else
7550: GO 7607
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7552: LD_ADDR_VAR 0 1
7556: PUSH
7557: LD_INT 22
7559: PUSH
7560: LD_INT 3
7562: PUSH
7563: EMPTY
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 21
7569: PUSH
7570: LD_INT 1
7572: PUSH
7573: EMPTY
7574: LIST
7575: LIST
7576: PUSH
7577: LD_INT 50
7579: PUSH
7580: EMPTY
7581: LIST
7582: PUSH
7583: EMPTY
7584: LIST
7585: LIST
7586: LIST
7587: PPUSH
7588: CALL_OW 69
7592: PPUSH
7593: LD_STRING D11b-RSol1-1
7595: PPUSH
7596: LD_STRING D11b-RFSol1-1
7598: PPUSH
7599: LD_INT 0
7601: PPUSH
7602: CALL 8631 0 4
7606: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7607: LD_INT 24
7609: PPUSH
7610: LD_INT 22
7612: PUSH
7613: LD_INT 0
7615: PUSH
7616: EMPTY
7617: LIST
7618: LIST
7619: PUSH
7620: LD_INT 25
7622: PUSH
7623: LD_INT 12
7625: PUSH
7626: EMPTY
7627: LIST
7628: LIST
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: PPUSH
7634: CALL_OW 70
7638: PUSH
7639: LD_INT 0
7641: GREATER
7642: IFFALSE 7658
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7644: LD_EXP 56
7648: PPUSH
7649: LD_STRING D11b1-Kir-1
7651: PPUSH
7652: CALL_OW 94
7656: GO 7670
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7658: LD_EXP 56
7662: PPUSH
7663: LD_STRING D11b2-Kir-1
7665: PPUSH
7666: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7670: LD_EXP 6
7674: PUSH
7675: LD_INT 24
7677: PPUSH
7678: LD_INT 22
7680: PUSH
7681: LD_INT 0
7683: PUSH
7684: EMPTY
7685: LIST
7686: LIST
7687: PUSH
7688: LD_INT 25
7690: PUSH
7691: LD_INT 12
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: PUSH
7698: EMPTY
7699: LIST
7700: LIST
7701: PPUSH
7702: CALL_OW 70
7706: PUSH
7707: LD_INT 0
7709: GREATER
7710: AND
7711: IFFALSE 7846
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7713: LD_EXP 49
7717: PPUSH
7718: LD_STRING D11b1-Bur-1
7720: PPUSH
7721: CALL_OW 88
// if IsOk ( Belkov ) then
7725: LD_EXP 54
7729: PPUSH
7730: CALL_OW 302
7734: IFFALSE 7750
// Say ( Belkov , D11b2-Bel-1 ) else
7736: LD_EXP 54
7740: PPUSH
7741: LD_STRING D11b2-Bel-1
7743: PPUSH
7744: CALL_OW 88
7748: GO 7791
// begin if GetSex ( randomSold ) = sex_male then
7750: LD_VAR 0 1
7754: PPUSH
7755: CALL_OW 258
7759: PUSH
7760: LD_INT 1
7762: EQUAL
7763: IFFALSE 7779
// Say ( randomSold , D11b1-RSol1-1 ) else
7765: LD_VAR 0 1
7769: PPUSH
7770: LD_STRING D11b1-RSol1-1
7772: PPUSH
7773: CALL_OW 88
7777: GO 7791
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7779: LD_VAR 0 1
7783: PPUSH
7784: LD_STRING D11b1-RFSol1-1
7786: PPUSH
7787: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7791: LD_INT 22
7793: PUSH
7794: LD_INT 1
7796: PUSH
7797: EMPTY
7798: LIST
7799: LIST
7800: PUSH
7801: LD_INT 21
7803: PUSH
7804: LD_INT 1
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: PUSH
7811: LD_INT 50
7813: PUSH
7814: EMPTY
7815: LIST
7816: PUSH
7817: EMPTY
7818: LIST
7819: LIST
7820: LIST
7821: PPUSH
7822: CALL_OW 69
7826: PPUSH
7827: LD_STRING D11b1-RSol1-1
7829: PPUSH
7830: LD_STRING D11b1-RFSol1-1
7832: PPUSH
7833: LD_INT 0
7835: PPUSH
7836: CALL 8631 0 4
// DialogueOff ;
7840: CALL_OW 7
// exit ;
7844: GO 8008
// end ; if spotWaterfall then
7846: LD_EXP 7
7850: IFFALSE 7936
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7852: LD_EXP 49
7856: PPUSH
7857: LD_STRING D11b1-Bur-1a
7859: PPUSH
7860: CALL_OW 88
// if IsOk ( Belkov ) then
7864: LD_EXP 54
7868: PPUSH
7869: CALL_OW 302
7873: IFFALSE 7889
// Say ( Belkov , D11b2-Bel-1 ) else
7875: LD_EXP 54
7879: PPUSH
7880: LD_STRING D11b2-Bel-1
7882: PPUSH
7883: CALL_OW 88
7887: GO 7930
// begin if GetSex ( randomSold ) = sex_male then
7889: LD_VAR 0 1
7893: PPUSH
7894: CALL_OW 258
7898: PUSH
7899: LD_INT 1
7901: EQUAL
7902: IFFALSE 7918
// Say ( randomSold , D11b1-RSol1-1 ) else
7904: LD_VAR 0 1
7908: PPUSH
7909: LD_STRING D11b1-RSol1-1
7911: PPUSH
7912: CALL_OW 88
7916: GO 7930
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7918: LD_VAR 0 1
7922: PPUSH
7923: LD_STRING D11b1-RFSol1-1
7925: PPUSH
7926: CALL_OW 88
// end ; DialogueOff ;
7930: CALL_OW 7
// exit ;
7934: GO 8008
// end ; if IsOk ( Belkov ) then
7936: LD_EXP 54
7940: PPUSH
7941: CALL_OW 302
7945: IFFALSE 7961
// Say ( Belkov , D11b1-Bel-1 ) else
7947: LD_EXP 54
7951: PPUSH
7952: LD_STRING D11b1-Bel-1
7954: PPUSH
7955: CALL_OW 88
7959: GO 8002
// begin if GetSex ( randomSold ) = sex_male then
7961: LD_VAR 0 1
7965: PPUSH
7966: CALL_OW 258
7970: PUSH
7971: LD_INT 1
7973: EQUAL
7974: IFFALSE 7990
// Say ( randomSold , D11b1-RSol1-1 ) else
7976: LD_VAR 0 1
7980: PPUSH
7981: LD_STRING D11b1-RSol1-1
7983: PPUSH
7984: CALL_OW 88
7988: GO 8002
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_STRING D11b1-RFSol1-1
7997: PPUSH
7998: CALL_OW 88
// end ; DialogueOff ;
8002: CALL_OW 7
// exit ;
8006: GO 8008
// end ;
8008: PPOPN 1
8010: END
// every 0 0$1.8 trigger FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) do var un , saved ;
8011: LD_INT 24
8013: PPUSH
8014: LD_INT 22
8016: PUSH
8017: LD_INT 3
8019: PUSH
8020: EMPTY
8021: LIST
8022: LIST
8023: PPUSH
8024: CALL_OW 70
8028: IFFALSE 8227
8030: GO 8032
8032: DISABLE
8033: LD_INT 0
8035: PPUSH
8036: PPUSH
// begin if not LakeApes then
8037: LD_EXP 26
8041: NOT
8042: IFFALSE 8046
// exit ;
8044: GO 8227
// if FilterUnitsInArea ( ApeLakeArea , [ f_side , 3 ] ) > 2 then
8046: LD_INT 24
8048: PPUSH
8049: LD_INT 22
8051: PUSH
8052: LD_INT 3
8054: PUSH
8055: EMPTY
8056: LIST
8057: LIST
8058: PPUSH
8059: CALL_OW 70
8063: PUSH
8064: LD_INT 2
8066: GREATER
8067: IFFALSE 8226
// begin ComAttackUnit ( LakeApes [ 1 ] , NearestUnitToUnit ( your_units , LakeApes [ 1 ] ) ) ;
8069: LD_EXP 26
8073: PUSH
8074: LD_INT 1
8076: ARRAY
8077: PPUSH
8078: LD_EXP 28
8082: PPUSH
8083: LD_EXP 26
8087: PUSH
8088: LD_INT 1
8090: ARRAY
8091: PPUSH
8092: CALL_OW 74
8096: PPUSH
8097: CALL_OW 115
// ComMoveToArea ( LakeApes diff LakeApes [ 1 ] , ApeEscape ) ;
8101: LD_EXP 26
8105: PUSH
8106: LD_EXP 26
8110: PUSH
8111: LD_INT 1
8113: ARRAY
8114: DIFF
8115: PPUSH
8116: LD_INT 28
8118: PPUSH
8119: CALL_OW 113
// AddComWait ( LakeApes diff LakeApes [ 1 ] , 0 0$1 ) ;
8123: LD_EXP 26
8127: PUSH
8128: LD_EXP 26
8132: PUSH
8133: LD_INT 1
8135: ARRAY
8136: DIFF
8137: PPUSH
8138: LD_INT 35
8140: PPUSH
8141: CALL_OW 202
// repeat wait ( 0 0$0.3 ) ;
8145: LD_INT 10
8147: PPUSH
8148: CALL_OW 67
// saved := FilterUnitsInArea ( ApeEscape , [ f_side , 0 ] ) ;
8152: LD_ADDR_VAR 0 2
8156: PUSH
8157: LD_INT 28
8159: PPUSH
8160: LD_INT 22
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PPUSH
8170: CALL_OW 70
8174: ST_TO_ADDR
// for un in saved do
8175: LD_ADDR_VAR 0 1
8179: PUSH
8180: LD_VAR 0 2
8184: PUSH
8185: FOR_IN
8186: IFFALSE 8215
// begin RemoveUnit ( un ) ;
8188: LD_VAR 0 1
8192: PPUSH
8193: CALL_OW 64
// LakeApes := LakeApes diff un ;
8197: LD_ADDR_EXP 26
8201: PUSH
8202: LD_EXP 26
8206: PUSH
8207: LD_VAR 0 1
8211: DIFF
8212: ST_TO_ADDR
// end ;
8213: GO 8185
8215: POP
8216: POP
// until not LakeApes ;
8217: LD_EXP 26
8221: NOT
8222: IFFALSE 8145
// end else
8224: GO 8227
// enable ;
8226: ENABLE
// end ;
8227: PPOPN 2
8229: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) and jelenaSpawned do var nearUnit ;
8230: LD_INT 3
8232: PPUSH
8233: LD_EXP 56
8237: PPUSH
8238: CALL_OW 292
8242: PUSH
8243: LD_EXP 25
8247: AND
8248: IFFALSE 8511
8250: GO 8252
8252: DISABLE
8253: LD_INT 0
8255: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
8256: LD_EXP 56
8260: PPUSH
8261: LD_INT 3
8263: PPUSH
8264: CALL_OW 235
// jelenaSaved = true ;
8268: LD_ADDR_EXP 21
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
8276: LD_EXP 56
8280: PPUSH
8281: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Kirilenkova , Kirilenkova ) ;
8285: LD_ADDR_VAR 0 1
8289: PUSH
8290: LD_INT 22
8292: PUSH
8293: LD_INT 3
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 21
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 50
8312: PUSH
8313: EMPTY
8314: LIST
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: LIST
8320: PPUSH
8321: CALL_OW 69
8325: PUSH
8326: LD_EXP 56
8330: DIFF
8331: PPUSH
8332: LD_EXP 56
8336: PPUSH
8337: CALL_OW 74
8341: ST_TO_ADDR
// DialogueOn ;
8342: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8346: LD_EXP 56
8350: PPUSH
8351: LD_STRING D11a-Kir-1
8353: PPUSH
8354: CALL_OW 88
// if nearUnit = Belkov then
8358: LD_VAR 0 1
8362: PUSH
8363: LD_EXP 54
8367: EQUAL
8368: IFFALSE 8408
// begin Say ( Belkov , D11a-Bel-1 ) ;
8370: LD_EXP 54
8374: PPUSH
8375: LD_STRING D11a-Bel-1
8377: PPUSH
8378: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8382: LD_EXP 56
8386: PPUSH
8387: LD_STRING D11a-Kir-2
8389: PPUSH
8390: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
8394: LD_EXP 54
8398: PPUSH
8399: LD_STRING D11a-Bel-2
8401: PPUSH
8402: CALL_OW 88
// end else
8406: GO 8449
// begin if GetSex ( nearUnit ) = sex_male then
8408: LD_VAR 0 1
8412: PPUSH
8413: CALL_OW 258
8417: PUSH
8418: LD_INT 1
8420: EQUAL
8421: IFFALSE 8437
// Say ( nearUnit , D11a-RSol1-2 ) else
8423: LD_VAR 0 1
8427: PPUSH
8428: LD_STRING D11a-RSol1-2
8430: PPUSH
8431: CALL_OW 88
8435: GO 8449
// Say ( nearUnit , D11a-RFSol1-2 ) ;
8437: LD_VAR 0 1
8441: PPUSH
8442: LD_STRING D11a-RFSol1-2
8444: PPUSH
8445: CALL_OW 88
// end ; DialogueOff ;
8449: CALL_OW 7
// wait ( 0 0$5 ) ;
8453: LD_INT 175
8455: PPUSH
8456: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
8460: LD_INT 35
8462: PPUSH
8463: CALL_OW 67
// until GetDistUnits ( Burlak , Kirilenkova ) < 6 ;
8467: LD_EXP 49
8471: PPUSH
8472: LD_EXP 56
8476: PPUSH
8477: CALL_OW 296
8481: PUSH
8482: LD_INT 6
8484: LESS
8485: IFFALSE 8460
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8487: LD_EXP 56
8491: PPUSH
8492: LD_STRING D11c-Kir-1
8494: PPUSH
8495: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8499: LD_EXP 49
8503: PPUSH
8504: LD_STRING D11c-Bur-1
8506: PPUSH
8507: CALL_OW 88
// end ;
8511: PPOPN 1
8513: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
8514: LD_EXP 22
8518: PUSH
8519: LD_INT 1
8521: PPUSH
8522: LD_INT 22
8524: PUSH
8525: LD_INT 3
8527: PUSH
8528: EMPTY
8529: LIST
8530: LIST
8531: PUSH
8532: LD_INT 21
8534: PUSH
8535: LD_INT 1
8537: PUSH
8538: EMPTY
8539: LIST
8540: LIST
8541: PUSH
8542: EMPTY
8543: LIST
8544: LIST
8545: PPUSH
8546: CALL_OW 70
8550: PUSH
8551: LD_INT 0
8553: GREATER
8554: AND
8555: IFFALSE 8567
8557: GO 8559
8559: DISABLE
// begin Query ( QExit1 ) ;
8560: LD_STRING QExit1
8562: PPUSH
8563: CALL_OW 97
// end ; end_of_file
8567: END
// export function PrepareUnitEx ( ident , exist_mode ) ; var unit ; begin
8568: LD_INT 0
8570: PPUSH
8571: PPUSH
// if exist_mode then
8572: LD_VAR 0 2
8576: IFFALSE 8601
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
8578: LD_ADDR_VAR 0 4
8582: PUSH
8583: LD_EXP 34
8587: PUSH
8588: LD_VAR 0 1
8592: STR
8593: PPUSH
8594: CALL_OW 34
8598: ST_TO_ADDR
8599: GO 8616
// unit := NewCharacter ( ident ) ;
8601: LD_ADDR_VAR 0 4
8605: PUSH
8606: LD_VAR 0 1
8610: PPUSH
8611: CALL_OW 25
8615: ST_TO_ADDR
// result := unit ;
8616: LD_ADDR_VAR 0 3
8620: PUSH
8621: LD_VAR 0 4
8625: ST_TO_ADDR
// end ;
8626: LD_VAR 0 3
8630: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
8631: LD_INT 0
8633: PPUSH
8634: PPUSH
8635: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8636: LD_ADDR_VAR 0 1
8640: PUSH
8641: LD_VAR 0 1
8645: PUSH
8646: LD_EXP 49
8650: PUSH
8651: LD_EXP 57
8655: PUSH
8656: LD_EXP 54
8660: PUSH
8661: LD_EXP 56
8665: PUSH
8666: EMPTY
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: DIFF
8672: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
8673: LD_ADDR_VAR 0 7
8677: PUSH
8678: LD_VAR 0 1
8682: PUSH
8683: LD_INT 1
8685: PPUSH
8686: LD_VAR 0 1
8690: PPUSH
8691: CALL_OW 12
8695: ARRAY
8696: ST_TO_ADDR
// if radio then
8697: LD_VAR 0 4
8701: IFFALSE 8750
// begin if GetSex ( speaker ) = sex_male then
8703: LD_VAR 0 7
8707: PPUSH
8708: CALL_OW 258
8712: PUSH
8713: LD_INT 1
8715: EQUAL
8716: IFFALSE 8734
// SayRadio ( speaker , dialogMID ) else
8718: LD_VAR 0 7
8722: PPUSH
8723: LD_VAR 0 2
8727: PPUSH
8728: CALL_OW 94
8732: GO 8748
// SayRadio ( speaker , dialogFID ) ;
8734: LD_VAR 0 7
8738: PPUSH
8739: LD_VAR 0 3
8743: PPUSH
8744: CALL_OW 94
// end else
8748: GO 8795
// begin if GetSex ( speaker ) = sex_male then
8750: LD_VAR 0 7
8754: PPUSH
8755: CALL_OW 258
8759: PUSH
8760: LD_INT 1
8762: EQUAL
8763: IFFALSE 8781
// Say ( speaker , dialogMID ) else
8765: LD_VAR 0 7
8769: PPUSH
8770: LD_VAR 0 2
8774: PPUSH
8775: CALL_OW 88
8779: GO 8795
// Say ( speaker , dialogFID ) ;
8781: LD_VAR 0 7
8785: PPUSH
8786: LD_VAR 0 3
8790: PPUSH
8791: CALL_OW 88
// end ; result := speaker ;
8795: LD_ADDR_VAR 0 5
8799: PUSH
8800: LD_VAR 0 7
8804: ST_TO_ADDR
// end ;
8805: LD_VAR 0 5
8809: RET
// export function Length ( tab ) ; var i , count ; begin
8810: LD_INT 0
8812: PPUSH
8813: PPUSH
8814: PPUSH
// for i in tab do
8815: LD_ADDR_VAR 0 3
8819: PUSH
8820: LD_VAR 0 1
8824: PUSH
8825: FOR_IN
8826: IFFALSE 8844
// count = count + 1 ;
8828: LD_ADDR_VAR 0 4
8832: PUSH
8833: LD_VAR 0 4
8837: PUSH
8838: LD_INT 1
8840: PLUS
8841: ST_TO_ADDR
8842: GO 8825
8844: POP
8845: POP
// Result := count ;
8846: LD_ADDR_VAR 0 2
8850: PUSH
8851: LD_VAR 0 4
8855: ST_TO_ADDR
// end ;
8856: LD_VAR 0 2
8860: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8861: LD_INT 0
8863: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8864: LD_VAR 0 1
8868: PPUSH
8869: CALL_OW 255
8873: PUSH
8874: LD_OWVAR 2
8878: EQUAL
8879: PUSH
8880: LD_VAR 0 1
8884: PPUSH
8885: CALL_OW 302
8889: AND
8890: IFFALSE 8912
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8892: LD_VAR 0 1
8896: PPUSH
8897: LD_EXP 33
8901: PUSH
8902: LD_VAR 0 2
8906: STR
8907: PPUSH
8908: CALL_OW 38
// end ;
8912: LD_VAR 0 3
8916: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8917: LD_INT 0
8919: PPUSH
8920: PPUSH
8921: PPUSH
// resultCharactersToSave = [ ] ;
8922: LD_ADDR_VAR 0 5
8926: PUSH
8927: EMPTY
8928: ST_TO_ADDR
// for unit in characters do
8929: LD_ADDR_VAR 0 4
8933: PUSH
8934: LD_VAR 0 1
8938: PUSH
8939: FOR_IN
8940: IFFALSE 8988
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8942: LD_VAR 0 4
8946: PPUSH
8947: CALL_OW 255
8951: PUSH
8952: LD_OWVAR 2
8956: EQUAL
8957: PUSH
8958: LD_VAR 0 4
8962: PPUSH
8963: CALL_OW 302
8967: AND
8968: IFFALSE 8986
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8970: LD_ADDR_VAR 0 5
8974: PUSH
8975: LD_VAR 0 5
8979: PUSH
8980: LD_VAR 0 4
8984: ADD
8985: ST_TO_ADDR
8986: GO 8939
8988: POP
8989: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8990: LD_VAR 0 5
8994: PPUSH
8995: LD_EXP 33
8999: PUSH
9000: LD_VAR 0 2
9004: STR
9005: PPUSH
9006: CALL_OW 38
// end ;
9010: LD_VAR 0 3
9014: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
9015: LD_INT 0
9017: PPUSH
9018: PPUSH
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
9024: PPUSH
9025: PPUSH
9026: PPUSH
9027: PPUSH
9028: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
9029: LD_VAR 0 1
9033: PPUSH
9034: CALL_OW 302
9038: NOT
9039: PUSH
9040: LD_VAR 0 4
9044: PUSH
9045: LD_INT 1
9047: EQUAL
9048: OR
9049: PUSH
9050: LD_VAR 0 2
9054: PPUSH
9055: LD_VAR 0 3
9059: PPUSH
9060: CALL_OW 488
9064: NOT
9065: OR
9066: PUSH
9067: LD_VAR 0 1
9071: PPUSH
9072: LD_VAR 0 2
9076: PPUSH
9077: LD_VAR 0 3
9081: PPUSH
9082: CALL_OW 297
9086: PUSH
9087: LD_VAR 0 4
9091: GREATEREQUAL
9092: OR
9093: PUSH
9094: LD_VAR 0 5
9098: PUSH
9099: LD_INT 1
9101: PUSH
9102: LD_INT 0
9104: PUSH
9105: EMPTY
9106: LIST
9107: LIST
9108: IN
9109: NOT
9110: OR
9111: IFFALSE 9115
// exit ;
9113: GO 10672
// attempts = 0 ;
9115: LD_ADDR_VAR 0 17
9119: PUSH
9120: LD_INT 0
9122: ST_TO_ADDR
// repeat list_nearest = [ ] ;
9123: LD_ADDR_VAR 0 7
9127: PUSH
9128: EMPTY
9129: ST_TO_ADDR
// list_coords = [ ] ;
9130: LD_ADDR_VAR 0 8
9134: PUSH
9135: EMPTY
9136: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
9137: LD_ADDR_VAR 0 9
9141: PUSH
9142: LD_VAR 0 2
9146: PPUSH
9147: LD_VAR 0 3
9151: PPUSH
9152: LD_VAR 0 1
9156: PPUSH
9157: CALL_OW 250
9161: PPUSH
9162: LD_VAR 0 1
9166: PPUSH
9167: CALL_OW 251
9171: PPUSH
9172: CALL 10677 0 4
9176: ST_TO_ADDR
// if attempts = 0 then
9177: LD_VAR 0 17
9181: PUSH
9182: LD_INT 0
9184: EQUAL
9185: IFFALSE 9293
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
9187: LD_ADDR_VAR 0 10
9191: PUSH
9192: LD_VAR 0 9
9196: PUSH
9197: LD_VAR 0 9
9201: PUSH
9202: LD_INT 1
9204: PLUS
9205: PUSH
9206: LD_VAR 0 9
9210: PUSH
9211: LD_INT 1
9213: MINUS
9214: PUSH
9215: EMPTY
9216: LIST
9217: LIST
9218: LIST
9219: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
9220: LD_VAR 0 10
9224: PUSH
9225: LD_INT 2
9227: ARRAY
9228: PUSH
9229: LD_INT 6
9231: EQUAL
9232: IFFALSE 9255
// dir_list = Replace ( dir_list , 2 , 0 ) ;
9234: LD_ADDR_VAR 0 10
9238: PUSH
9239: LD_VAR 0 10
9243: PPUSH
9244: LD_INT 2
9246: PPUSH
9247: LD_INT 0
9249: PPUSH
9250: CALL_OW 1
9254: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
9255: LD_VAR 0 10
9259: PUSH
9260: LD_INT 3
9262: ARRAY
9263: PUSH
9264: LD_INT 1
9266: NEG
9267: EQUAL
9268: IFFALSE 9291
// dir_list = Replace ( dir_list , 3 , 5 ) ;
9270: LD_ADDR_VAR 0 10
9274: PUSH
9275: LD_VAR 0 10
9279: PPUSH
9280: LD_INT 3
9282: PPUSH
9283: LD_INT 5
9285: PPUSH
9286: CALL_OW 1
9290: ST_TO_ADDR
// end else
9291: GO 9330
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
9293: LD_ADDR_VAR 0 10
9297: PUSH
9298: LD_INT 0
9300: PUSH
9301: LD_INT 1
9303: PUSH
9304: LD_INT 2
9306: PUSH
9307: LD_INT 3
9309: PUSH
9310: LD_INT 4
9312: PUSH
9313: LD_INT 5
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: PUSH
9324: LD_VAR 0 9
9328: DIFF
9329: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
9330: LD_ADDR_VAR 0 14
9334: PUSH
9335: DOUBLE
9336: LD_INT 1
9338: DEC
9339: ST_TO_ADDR
9340: LD_VAR 0 10
9344: PUSH
9345: LD_INT 0
9347: PLUS
9348: PUSH
9349: FOR_TO
9350: IFFALSE 9672
// case dir_list [ c ] of 0 :
9352: LD_VAR 0 10
9356: PUSH
9357: LD_VAR 0 14
9361: ARRAY
9362: PUSH
9363: LD_INT 0
9365: DOUBLE
9366: EQUAL
9367: IFTRUE 9371
9369: GO 9412
9371: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
9372: LD_ADDR_VAR 0 8
9376: PUSH
9377: LD_VAR 0 8
9381: PPUSH
9382: LD_INT 1
9384: PPUSH
9385: LD_VAR 0 2
9389: PUSH
9390: LD_VAR 0 3
9394: PUSH
9395: LD_VAR 0 4
9399: MINUS
9400: PUSH
9401: EMPTY
9402: LIST
9403: LIST
9404: PPUSH
9405: CALL_OW 2
9409: ST_TO_ADDR
9410: GO 9670
9412: LD_INT 1
9414: DOUBLE
9415: EQUAL
9416: IFTRUE 9420
9418: GO 9461
9420: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
9421: LD_ADDR_VAR 0 8
9425: PUSH
9426: LD_VAR 0 8
9430: PPUSH
9431: LD_INT 1
9433: PPUSH
9434: LD_VAR 0 2
9438: PUSH
9439: LD_VAR 0 4
9443: PLUS
9444: PUSH
9445: LD_VAR 0 3
9449: PUSH
9450: EMPTY
9451: LIST
9452: LIST
9453: PPUSH
9454: CALL_OW 2
9458: ST_TO_ADDR
9459: GO 9670
9461: LD_INT 2
9463: DOUBLE
9464: EQUAL
9465: IFTRUE 9469
9467: GO 9516
9469: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
9470: LD_ADDR_VAR 0 8
9474: PUSH
9475: LD_VAR 0 8
9479: PPUSH
9480: LD_INT 1
9482: PPUSH
9483: LD_VAR 0 2
9487: PUSH
9488: LD_VAR 0 4
9492: PLUS
9493: PUSH
9494: LD_VAR 0 3
9498: PUSH
9499: LD_VAR 0 4
9503: PLUS
9504: PUSH
9505: EMPTY
9506: LIST
9507: LIST
9508: PPUSH
9509: CALL_OW 2
9513: ST_TO_ADDR
9514: GO 9670
9516: LD_INT 3
9518: DOUBLE
9519: EQUAL
9520: IFTRUE 9524
9522: GO 9565
9524: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
9525: LD_ADDR_VAR 0 8
9529: PUSH
9530: LD_VAR 0 8
9534: PPUSH
9535: LD_INT 1
9537: PPUSH
9538: LD_VAR 0 2
9542: PUSH
9543: LD_VAR 0 3
9547: PUSH
9548: LD_VAR 0 4
9552: PLUS
9553: PUSH
9554: EMPTY
9555: LIST
9556: LIST
9557: PPUSH
9558: CALL_OW 2
9562: ST_TO_ADDR
9563: GO 9670
9565: LD_INT 4
9567: DOUBLE
9568: EQUAL
9569: IFTRUE 9573
9571: GO 9614
9573: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
9574: LD_ADDR_VAR 0 8
9578: PUSH
9579: LD_VAR 0 8
9583: PPUSH
9584: LD_INT 1
9586: PPUSH
9587: LD_VAR 0 2
9591: PUSH
9592: LD_VAR 0 4
9596: MINUS
9597: PUSH
9598: LD_VAR 0 3
9602: PUSH
9603: EMPTY
9604: LIST
9605: LIST
9606: PPUSH
9607: CALL_OW 2
9611: ST_TO_ADDR
9612: GO 9670
9614: LD_INT 5
9616: DOUBLE
9617: EQUAL
9618: IFTRUE 9622
9620: GO 9669
9622: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
9623: LD_ADDR_VAR 0 8
9627: PUSH
9628: LD_VAR 0 8
9632: PPUSH
9633: LD_INT 1
9635: PPUSH
9636: LD_VAR 0 2
9640: PUSH
9641: LD_VAR 0 4
9645: MINUS
9646: PUSH
9647: LD_VAR 0 3
9651: PUSH
9652: LD_VAR 0 4
9656: MINUS
9657: PUSH
9658: EMPTY
9659: LIST
9660: LIST
9661: PPUSH
9662: CALL_OW 2
9666: ST_TO_ADDR
9667: GO 9670
9669: POP
9670: GO 9349
9672: POP
9673: POP
// if dist < 30 then
9674: LD_VAR 0 4
9678: PUSH
9679: LD_INT 30
9681: LESS
9682: IFFALSE 9694
// c = 1 else
9684: LD_ADDR_VAR 0 14
9688: PUSH
9689: LD_INT 1
9691: ST_TO_ADDR
9692: GO 9702
// c = 2 ;
9694: LD_ADDR_VAR 0 14
9698: PUSH
9699: LD_INT 2
9701: ST_TO_ADDR
// b = 1 ;
9702: LD_ADDR_VAR 0 11
9706: PUSH
9707: LD_INT 1
9709: ST_TO_ADDR
// while b <= ( dist - 1 ) do
9710: LD_VAR 0 11
9714: PUSH
9715: LD_VAR 0 4
9719: PUSH
9720: LD_INT 1
9722: MINUS
9723: LESSEQUAL
9724: IFFALSE 10152
// begin if 0 in dir_list and 1 in dir_list then
9726: LD_INT 0
9728: PUSH
9729: LD_VAR 0 10
9733: IN
9734: PUSH
9735: LD_INT 1
9737: PUSH
9738: LD_VAR 0 10
9742: IN
9743: AND
9744: IFFALSE 9796
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
9746: LD_ADDR_VAR 0 8
9750: PUSH
9751: LD_VAR 0 8
9755: PPUSH
9756: LD_INT 1
9758: PPUSH
9759: LD_VAR 0 2
9763: PUSH
9764: LD_VAR 0 11
9768: PLUS
9769: PUSH
9770: LD_VAR 0 3
9774: PUSH
9775: LD_VAR 0 4
9779: MINUS
9780: PUSH
9781: LD_VAR 0 11
9785: PLUS
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 2
9795: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
9796: LD_INT 1
9798: PUSH
9799: LD_VAR 0 10
9803: IN
9804: PUSH
9805: LD_INT 2
9807: PUSH
9808: LD_VAR 0 10
9812: IN
9813: AND
9814: IFFALSE 9860
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
9816: LD_ADDR_VAR 0 8
9820: PUSH
9821: LD_VAR 0 8
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: LD_VAR 0 2
9833: PUSH
9834: LD_VAR 0 4
9838: PLUS
9839: PUSH
9840: LD_VAR 0 3
9844: PUSH
9845: LD_VAR 0 11
9849: PLUS
9850: PUSH
9851: EMPTY
9852: LIST
9853: LIST
9854: PPUSH
9855: CALL_OW 2
9859: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9860: LD_INT 2
9862: PUSH
9863: LD_VAR 0 10
9867: IN
9868: PUSH
9869: LD_INT 3
9871: PUSH
9872: LD_VAR 0 10
9876: IN
9877: AND
9878: IFFALSE 9930
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9880: LD_ADDR_VAR 0 8
9884: PUSH
9885: LD_VAR 0 8
9889: PPUSH
9890: LD_INT 1
9892: PPUSH
9893: LD_VAR 0 2
9897: PUSH
9898: LD_VAR 0 4
9902: PLUS
9903: PUSH
9904: LD_VAR 0 11
9908: MINUS
9909: PUSH
9910: LD_VAR 0 3
9914: PUSH
9915: LD_VAR 0 4
9919: PLUS
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: PPUSH
9925: CALL_OW 2
9929: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9930: LD_INT 3
9932: PUSH
9933: LD_VAR 0 10
9937: IN
9938: PUSH
9939: LD_INT 4
9941: PUSH
9942: LD_VAR 0 10
9946: IN
9947: AND
9948: IFFALSE 10000
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9950: LD_ADDR_VAR 0 8
9954: PUSH
9955: LD_VAR 0 8
9959: PPUSH
9960: LD_INT 1
9962: PPUSH
9963: LD_VAR 0 2
9967: PUSH
9968: LD_VAR 0 11
9972: MINUS
9973: PUSH
9974: LD_VAR 0 3
9978: PUSH
9979: LD_VAR 0 4
9983: PLUS
9984: PUSH
9985: LD_VAR 0 11
9989: MINUS
9990: PUSH
9991: EMPTY
9992: LIST
9993: LIST
9994: PPUSH
9995: CALL_OW 2
9999: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
10000: LD_INT 4
10002: PUSH
10003: LD_VAR 0 10
10007: IN
10008: PUSH
10009: LD_INT 5
10011: PUSH
10012: LD_VAR 0 10
10016: IN
10017: AND
10018: IFFALSE 10064
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: LD_VAR 0 8
10029: PPUSH
10030: LD_INT 1
10032: PPUSH
10033: LD_VAR 0 2
10037: PUSH
10038: LD_VAR 0 4
10042: MINUS
10043: PUSH
10044: LD_VAR 0 3
10048: PUSH
10049: LD_VAR 0 11
10053: MINUS
10054: PUSH
10055: EMPTY
10056: LIST
10057: LIST
10058: PPUSH
10059: CALL_OW 2
10063: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
10064: LD_INT 5
10066: PUSH
10067: LD_VAR 0 10
10071: IN
10072: PUSH
10073: LD_INT 0
10075: PUSH
10076: LD_VAR 0 10
10080: IN
10081: AND
10082: IFFALSE 10134
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
10084: LD_ADDR_VAR 0 8
10088: PUSH
10089: LD_VAR 0 8
10093: PPUSH
10094: LD_INT 1
10096: PPUSH
10097: LD_VAR 0 2
10101: PUSH
10102: LD_VAR 0 4
10106: MINUS
10107: PUSH
10108: LD_VAR 0 11
10112: PLUS
10113: PUSH
10114: LD_VAR 0 3
10118: PUSH
10119: LD_VAR 0 4
10123: MINUS
10124: PUSH
10125: EMPTY
10126: LIST
10127: LIST
10128: PPUSH
10129: CALL_OW 2
10133: ST_TO_ADDR
// b = b + c end ;
10134: LD_ADDR_VAR 0 11
10138: PUSH
10139: LD_VAR 0 11
10143: PUSH
10144: LD_VAR 0 14
10148: PLUS
10149: ST_TO_ADDR
10150: GO 9710
// if list_coords = 0 then
10152: LD_VAR 0 8
10156: PUSH
10157: LD_INT 0
10159: EQUAL
10160: IFFALSE 10164
// exit ;
10162: GO 10672
// repeat min_dist = 5000 ;
10164: LD_ADDR_VAR 0 12
10168: PUSH
10169: LD_INT 5000
10171: ST_TO_ADDR
// for b in list_coords do
10172: LD_ADDR_VAR 0 11
10176: PUSH
10177: LD_VAR 0 8
10181: PUSH
10182: FOR_IN
10183: IFFALSE 10242
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
10185: LD_ADDR_VAR 0 13
10189: PUSH
10190: LD_VAR 0 1
10194: PPUSH
10195: LD_VAR 0 11
10199: PUSH
10200: LD_INT 1
10202: ARRAY
10203: PPUSH
10204: LD_VAR 0 11
10208: PUSH
10209: LD_INT 2
10211: ARRAY
10212: PPUSH
10213: CALL_OW 297
10217: ST_TO_ADDR
// if temp_dist < min_dist then
10218: LD_VAR 0 13
10222: PUSH
10223: LD_VAR 0 12
10227: LESS
10228: IFFALSE 10240
// min_dist = temp_dist ;
10230: LD_ADDR_VAR 0 12
10234: PUSH
10235: LD_VAR 0 13
10239: ST_TO_ADDR
// end ;
10240: GO 10182
10242: POP
10243: POP
// c = 0 ;
10244: LD_ADDR_VAR 0 14
10248: PUSH
10249: LD_INT 0
10251: ST_TO_ADDR
// repeat c = c + 1 ;
10252: LD_ADDR_VAR 0 14
10256: PUSH
10257: LD_VAR 0 14
10261: PUSH
10262: LD_INT 1
10264: PLUS
10265: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
10266: LD_VAR 0 1
10270: PPUSH
10271: LD_VAR 0 8
10275: PUSH
10276: LD_VAR 0 14
10280: ARRAY
10281: PUSH
10282: LD_INT 1
10284: ARRAY
10285: PPUSH
10286: LD_VAR 0 8
10290: PUSH
10291: LD_VAR 0 14
10295: ARRAY
10296: PUSH
10297: LD_INT 2
10299: ARRAY
10300: PPUSH
10301: CALL_OW 297
10305: PUSH
10306: LD_VAR 0 12
10310: EQUAL
10311: IFFALSE 10376
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
10313: LD_ADDR_VAR 0 7
10317: PUSH
10318: LD_VAR 0 7
10322: PPUSH
10323: LD_INT 1
10325: PPUSH
10326: LD_VAR 0 8
10330: PUSH
10331: LD_VAR 0 14
10335: ARRAY
10336: PPUSH
10337: CALL_OW 2
10341: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
10342: LD_ADDR_VAR 0 8
10346: PUSH
10347: LD_VAR 0 8
10351: PPUSH
10352: LD_VAR 0 14
10356: PPUSH
10357: CALL_OW 3
10361: ST_TO_ADDR
// c = c - 1 ;
10362: LD_ADDR_VAR 0 14
10366: PUSH
10367: LD_VAR 0 14
10371: PUSH
10372: LD_INT 1
10374: MINUS
10375: ST_TO_ADDR
// end ; until c = list_coords ;
10376: LD_VAR 0 14
10380: PUSH
10381: LD_VAR 0 8
10385: EQUAL
10386: IFFALSE 10252
// c = 0 ;
10388: LD_ADDR_VAR 0 14
10392: PUSH
10393: LD_INT 0
10395: ST_TO_ADDR
// if list_nearest > 0 then
10396: LD_VAR 0 7
10400: PUSH
10401: LD_INT 0
10403: GREATER
10404: IFFALSE 10546
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
10406: LD_ADDR_VAR 0 15
10410: PUSH
10411: LD_INT 1
10413: PPUSH
10414: LD_VAR 0 7
10418: PPUSH
10419: CALL_OW 12
10423: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
10424: LD_ADDR_VAR 0 16
10428: PUSH
10429: LD_VAR 0 7
10433: PUSH
10434: LD_VAR 0 15
10438: ARRAY
10439: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
10440: LD_VAR 0 16
10444: PUSH
10445: LD_INT 1
10447: ARRAY
10448: PPUSH
10449: LD_VAR 0 16
10453: PUSH
10454: LD_INT 2
10456: ARRAY
10457: PPUSH
10458: CALL_OW 488
10462: PUSH
10463: LD_INT 0
10465: GREATER
10466: PUSH
10467: LD_VAR 0 16
10471: PUSH
10472: LD_INT 1
10474: ARRAY
10475: PPUSH
10476: LD_VAR 0 16
10480: PUSH
10481: LD_INT 2
10483: ARRAY
10484: PPUSH
10485: CALL_OW 428
10489: PUSH
10490: LD_INT 0
10492: EQUAL
10493: AND
10494: IFFALSE 10506
// c = 1 else
10496: LD_ADDR_VAR 0 14
10500: PUSH
10501: LD_INT 1
10503: ST_TO_ADDR
10504: GO 10526
// list_nearest = Delete ( list_nearest , rand_num ) ;
10506: LD_ADDR_VAR 0 7
10510: PUSH
10511: LD_VAR 0 7
10515: PPUSH
10516: LD_VAR 0 15
10520: PPUSH
10521: CALL_OW 3
10525: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
10526: LD_VAR 0 14
10530: PUSH
10531: LD_INT 1
10533: EQUAL
10534: PUSH
10535: LD_VAR 0 7
10539: PUSH
10540: LD_INT 0
10542: EQUAL
10543: OR
10544: IFFALSE 10406
// end ; until c = 1 or list_coords = 0 ;
10546: LD_VAR 0 14
10550: PUSH
10551: LD_INT 1
10553: EQUAL
10554: PUSH
10555: LD_VAR 0 8
10559: PUSH
10560: LD_INT 0
10562: EQUAL
10563: OR
10564: IFFALSE 10164
// attempts = attempts + 1 ;
10566: LD_ADDR_VAR 0 17
10570: PUSH
10571: LD_VAR 0 17
10575: PUSH
10576: LD_INT 1
10578: PLUS
10579: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
10580: LD_VAR 0 14
10584: PUSH
10585: LD_INT 1
10587: EQUAL
10588: PUSH
10589: LD_VAR 0 17
10593: PUSH
10594: LD_INT 1
10596: GREATER
10597: OR
10598: IFFALSE 9123
// if c = 1 then
10600: LD_VAR 0 14
10604: PUSH
10605: LD_INT 1
10607: EQUAL
10608: IFFALSE 10672
// if add then
10610: LD_VAR 0 5
10614: IFFALSE 10645
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
10616: LD_VAR 0 1
10620: PPUSH
10621: LD_VAR 0 16
10625: PUSH
10626: LD_INT 1
10628: ARRAY
10629: PPUSH
10630: LD_VAR 0 16
10634: PUSH
10635: LD_INT 2
10637: ARRAY
10638: PPUSH
10639: CALL_OW 171
10643: GO 10672
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
10645: LD_VAR 0 1
10649: PPUSH
10650: LD_VAR 0 16
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 16
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// end ;
10672: LD_VAR 0 6
10676: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
10677: LD_INT 0
10679: PPUSH
10680: PPUSH
10681: PPUSH
10682: PPUSH
10683: PPUSH
10684: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
10685: LD_VAR 0 1
10689: PPUSH
10690: LD_VAR 0 2
10694: PPUSH
10695: CALL_OW 488
10699: NOT
10700: PUSH
10701: LD_VAR 0 3
10705: PPUSH
10706: LD_VAR 0 4
10710: PPUSH
10711: CALL_OW 488
10715: NOT
10716: OR
10717: IFFALSE 10730
// begin result = - 1 ;
10719: LD_ADDR_VAR 0 5
10723: PUSH
10724: LD_INT 1
10726: NEG
10727: ST_TO_ADDR
// exit ;
10728: GO 10890
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
10730: LD_ADDR_VAR 0 6
10734: PUSH
10735: LD_VAR 0 1
10739: PPUSH
10740: LD_VAR 0 2
10744: PPUSH
10745: LD_VAR 0 3
10749: PPUSH
10750: LD_VAR 0 4
10754: PPUSH
10755: CALL_OW 298
10759: ST_TO_ADDR
// dist_2 = 99999 ;
10760: LD_ADDR_VAR 0 7
10764: PUSH
10765: LD_INT 99999
10767: ST_TO_ADDR
// for b = 0 to 5 do
10768: LD_ADDR_VAR 0 8
10772: PUSH
10773: DOUBLE
10774: LD_INT 0
10776: DEC
10777: ST_TO_ADDR
10778: LD_INT 5
10780: PUSH
10781: FOR_TO
10782: IFFALSE 10878
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
10784: LD_ADDR_VAR 0 9
10788: PUSH
10789: LD_VAR 0 1
10793: PPUSH
10794: LD_VAR 0 8
10798: PPUSH
10799: LD_VAR 0 6
10803: PPUSH
10804: CALL_OW 272
10808: PPUSH
10809: LD_VAR 0 2
10813: PPUSH
10814: LD_VAR 0 8
10818: PPUSH
10819: LD_VAR 0 6
10823: PPUSH
10824: CALL_OW 273
10828: PPUSH
10829: LD_VAR 0 3
10833: PPUSH
10834: LD_VAR 0 4
10838: PPUSH
10839: CALL_OW 298
10843: ST_TO_ADDR
// if temp_dist < dist_2 then
10844: LD_VAR 0 9
10848: PUSH
10849: LD_VAR 0 7
10853: LESS
10854: IFFALSE 10876
// begin dist_2 = temp_dist ;
10856: LD_ADDR_VAR 0 7
10860: PUSH
10861: LD_VAR 0 9
10865: ST_TO_ADDR
// dir = b ;
10866: LD_ADDR_VAR 0 10
10870: PUSH
10871: LD_VAR 0 8
10875: ST_TO_ADDR
// end ; end ;
10876: GO 10781
10878: POP
10879: POP
// result = dir ;
10880: LD_ADDR_VAR 0 5
10884: PUSH
10885: LD_VAR 0 10
10889: ST_TO_ADDR
// end ;
10890: LD_VAR 0 5
10894: RET
// export function MoveToHill ; begin
10895: LD_INT 0
10897: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10898: LD_EXP 50
10902: PPUSH
10903: LD_INT 65
10905: PPUSH
10906: LD_INT 59
10908: PPUSH
10909: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10913: LD_EXP 50
10917: PPUSH
10918: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10922: LD_EXP 51
10926: PPUSH
10927: LD_INT 65
10929: PPUSH
10930: LD_INT 58
10932: PPUSH
10933: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10937: LD_EXP 51
10941: PPUSH
10942: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10946: LD_EXP 52
10950: PPUSH
10951: LD_INT 64
10953: PPUSH
10954: LD_INT 57
10956: PPUSH
10957: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10961: LD_EXP 52
10965: PPUSH
10966: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10970: LD_EXP 53
10974: PPUSH
10975: LD_INT 64
10977: PPUSH
10978: LD_INT 56
10980: PPUSH
10981: CALL_OW 111
// AddComCrawl ( Balei ) ;
10985: LD_EXP 53
10989: PPUSH
10990: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10994: LD_EXP 54
10998: PPUSH
10999: LD_INT 63
11001: PPUSH
11002: LD_INT 55
11004: PPUSH
11005: CALL_OW 111
// AddComCrawl ( Belkov ) ;
11009: LD_EXP 54
11013: PPUSH
11014: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
11018: LD_EXP 55
11022: PPUSH
11023: LD_INT 66
11025: PPUSH
11026: LD_INT 58
11028: PPUSH
11029: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
11033: LD_EXP 55
11037: PPUSH
11038: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
11042: LD_EXP 57
11046: PPUSH
11047: CALL_OW 255
11051: PUSH
11052: LD_INT 6
11054: EQUAL
11055: PUSH
11056: LD_EXP 12
11060: AND
11061: IFFALSE 11087
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
11063: LD_EXP 57
11067: PPUSH
11068: LD_INT 63
11070: PPUSH
11071: LD_INT 54
11073: PPUSH
11074: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
11078: LD_EXP 57
11082: PPUSH
11083: CALL_OW 197
// end ; if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11087: LD_EXP 50
11091: PPUSH
11092: LD_INT 65
11094: PPUSH
11095: LD_INT 59
11097: PPUSH
11098: CALL_OW 297
11102: PUSH
11103: LD_INT 7
11105: LESS
11106: IFFALSE 11132
// begin ComCrawl ( Pokryshkin ) ;
11108: LD_EXP 50
11112: PPUSH
11113: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11117: LD_EXP 50
11121: PPUSH
11122: LD_INT 65
11124: PPUSH
11125: LD_INT 59
11127: PPUSH
11128: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11132: LD_EXP 51
11136: PPUSH
11137: LD_INT 65
11139: PPUSH
11140: LD_INT 58
11142: PPUSH
11143: CALL_OW 297
11147: PUSH
11148: LD_INT 7
11150: LESS
11151: IFFALSE 11177
// begin ComCrawl ( Saseda ) ;
11153: LD_EXP 51
11157: PPUSH
11158: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11162: LD_EXP 51
11166: PPUSH
11167: LD_INT 65
11169: PPUSH
11170: LD_INT 58
11172: PPUSH
11173: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11177: LD_EXP 52
11181: PPUSH
11182: LD_INT 64
11184: PPUSH
11185: LD_INT 57
11187: PPUSH
11188: CALL_OW 297
11192: PUSH
11193: LD_INT 7
11195: LESS
11196: IFFALSE 11222
// begin ComCrawl ( Jaworska ) ;
11198: LD_EXP 52
11202: PPUSH
11203: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11207: LD_EXP 52
11211: PPUSH
11212: LD_INT 64
11214: PPUSH
11215: LD_INT 57
11217: PPUSH
11218: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11222: LD_EXP 53
11226: PPUSH
11227: LD_INT 64
11229: PPUSH
11230: LD_INT 56
11232: PPUSH
11233: CALL_OW 297
11237: PUSH
11238: LD_INT 7
11240: LESS
11241: IFFALSE 11267
// begin ComCrawl ( Balei ) ;
11243: LD_EXP 53
11247: PPUSH
11248: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11252: LD_EXP 53
11256: PPUSH
11257: LD_INT 64
11259: PPUSH
11260: LD_INT 56
11262: PPUSH
11263: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11267: LD_EXP 54
11271: PPUSH
11272: LD_INT 63
11274: PPUSH
11275: LD_INT 55
11277: PPUSH
11278: CALL_OW 297
11282: PUSH
11283: LD_INT 7
11285: LESS
11286: IFFALSE 11312
// begin ComCrawl ( Belkov ) ;
11288: LD_EXP 54
11292: PPUSH
11293: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11297: LD_EXP 54
11301: PPUSH
11302: LD_INT 63
11304: PPUSH
11305: LD_INT 55
11307: PPUSH
11308: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11312: LD_EXP 55
11316: PPUSH
11317: LD_INT 66
11319: PPUSH
11320: LD_INT 58
11322: PPUSH
11323: CALL_OW 297
11327: PUSH
11328: LD_INT 7
11330: LESS
11331: IFFALSE 11357
// begin ComCrawl ( Jaunzeme ) ;
11333: LD_EXP 55
11337: PPUSH
11338: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11342: LD_EXP 55
11346: PPUSH
11347: LD_INT 66
11349: PPUSH
11350: LD_INT 58
11352: PPUSH
11353: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11357: LD_EXP 57
11361: PPUSH
11362: LD_INT 63
11364: PPUSH
11365: LD_INT 54
11367: PPUSH
11368: CALL_OW 297
11372: PUSH
11373: LD_INT 7
11375: LESS
11376: PUSH
11377: LD_EXP 57
11381: PPUSH
11382: CALL_OW 255
11386: PUSH
11387: LD_INT 6
11389: EQUAL
11390: AND
11391: PUSH
11392: LD_EXP 12
11396: AND
11397: IFFALSE 11423
// begin ComCrawl ( Gnyevko ) ;
11399: LD_EXP 57
11403: PPUSH
11404: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11408: LD_EXP 57
11412: PPUSH
11413: LD_INT 63
11415: PPUSH
11416: LD_INT 54
11418: PPUSH
11419: CALL_OW 171
// end ; end ;
11423: LD_VAR 0 1
11427: RET
// every 0 0$1 trigger ( not IsDying ( Charles ) or not IsDead ( Charles ) ) and goToHill do
11428: LD_EXP 45
11432: PPUSH
11433: CALL_OW 303
11437: NOT
11438: PUSH
11439: LD_EXP 45
11443: PPUSH
11444: CALL_OW 301
11448: NOT
11449: OR
11450: PUSH
11451: LD_EXP 15
11455: AND
11456: IFFALSE 11797
11458: GO 11460
11460: DISABLE
// begin if GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 7 then
11461: LD_EXP 50
11465: PPUSH
11466: LD_INT 65
11468: PPUSH
11469: LD_INT 59
11471: PPUSH
11472: CALL_OW 297
11476: PUSH
11477: LD_INT 7
11479: LESS
11480: IFFALSE 11506
// begin ComCrawl ( Pokryshkin ) ;
11482: LD_EXP 50
11486: PPUSH
11487: CALL_OW 137
// AddComMoveXY ( Pokryshkin , 65 , 59 ) ;
11491: LD_EXP 50
11495: PPUSH
11496: LD_INT 65
11498: PPUSH
11499: LD_INT 59
11501: PPUSH
11502: CALL_OW 171
// end ; if GetDistUnitXY ( Saseda , 65 , 58 ) < 7 then
11506: LD_EXP 51
11510: PPUSH
11511: LD_INT 65
11513: PPUSH
11514: LD_INT 58
11516: PPUSH
11517: CALL_OW 297
11521: PUSH
11522: LD_INT 7
11524: LESS
11525: IFFALSE 11551
// begin ComCrawl ( Saseda ) ;
11527: LD_EXP 51
11531: PPUSH
11532: CALL_OW 137
// AddComMoveXY ( Saseda , 65 , 58 ) ;
11536: LD_EXP 51
11540: PPUSH
11541: LD_INT 65
11543: PPUSH
11544: LD_INT 58
11546: PPUSH
11547: CALL_OW 171
// end ; if GetDistUnitXY ( Jaworska , 64 , 57 ) < 7 then
11551: LD_EXP 52
11555: PPUSH
11556: LD_INT 64
11558: PPUSH
11559: LD_INT 57
11561: PPUSH
11562: CALL_OW 297
11566: PUSH
11567: LD_INT 7
11569: LESS
11570: IFFALSE 11596
// begin ComCrawl ( Jaworska ) ;
11572: LD_EXP 52
11576: PPUSH
11577: CALL_OW 137
// AddComMoveXY ( Jaworska , 64 , 57 ) ;
11581: LD_EXP 52
11585: PPUSH
11586: LD_INT 64
11588: PPUSH
11589: LD_INT 57
11591: PPUSH
11592: CALL_OW 171
// end ; if GetDistUnitXY ( Balei , 64 , 56 ) < 7 then
11596: LD_EXP 53
11600: PPUSH
11601: LD_INT 64
11603: PPUSH
11604: LD_INT 56
11606: PPUSH
11607: CALL_OW 297
11611: PUSH
11612: LD_INT 7
11614: LESS
11615: IFFALSE 11641
// begin ComCrawl ( Balei ) ;
11617: LD_EXP 53
11621: PPUSH
11622: CALL_OW 137
// AddComMoveXY ( Balei , 64 , 56 ) ;
11626: LD_EXP 53
11630: PPUSH
11631: LD_INT 64
11633: PPUSH
11634: LD_INT 56
11636: PPUSH
11637: CALL_OW 171
// end ; if GetDistUnitXY ( Belkov , 63 , 55 ) < 7 then
11641: LD_EXP 54
11645: PPUSH
11646: LD_INT 63
11648: PPUSH
11649: LD_INT 55
11651: PPUSH
11652: CALL_OW 297
11656: PUSH
11657: LD_INT 7
11659: LESS
11660: IFFALSE 11686
// begin ComCrawl ( Belkov ) ;
11662: LD_EXP 54
11666: PPUSH
11667: CALL_OW 137
// AddComMoveXY ( Belkov , 63 , 55 ) ;
11671: LD_EXP 54
11675: PPUSH
11676: LD_INT 63
11678: PPUSH
11679: LD_INT 55
11681: PPUSH
11682: CALL_OW 171
// end ; if GetDistUnitXY ( Jaunzeme , 66 , 58 ) < 7 then
11686: LD_EXP 55
11690: PPUSH
11691: LD_INT 66
11693: PPUSH
11694: LD_INT 58
11696: PPUSH
11697: CALL_OW 297
11701: PUSH
11702: LD_INT 7
11704: LESS
11705: IFFALSE 11731
// begin ComCrawl ( Jaunzeme ) ;
11707: LD_EXP 55
11711: PPUSH
11712: CALL_OW 137
// AddComMoveXY ( Jaunzeme , 66 , 58 ) ;
11716: LD_EXP 55
11720: PPUSH
11721: LD_INT 66
11723: PPUSH
11724: LD_INT 58
11726: PPUSH
11727: CALL_OW 171
// end ; if GetDistUnitXY ( Gnyevko , 63 , 54 ) < 7 and GetSide ( Gnyevko ) = 6 and gnyevkoSaved then
11731: LD_EXP 57
11735: PPUSH
11736: LD_INT 63
11738: PPUSH
11739: LD_INT 54
11741: PPUSH
11742: CALL_OW 297
11746: PUSH
11747: LD_INT 7
11749: LESS
11750: PUSH
11751: LD_EXP 57
11755: PPUSH
11756: CALL_OW 255
11760: PUSH
11761: LD_INT 6
11763: EQUAL
11764: AND
11765: PUSH
11766: LD_EXP 12
11770: AND
11771: IFFALSE 11797
// begin ComCrawl ( Gnyevko ) ;
11773: LD_EXP 57
11777: PPUSH
11778: CALL_OW 137
// AddComMoveXY ( Gnyevko , 63 , 54 ) ;
11782: LD_EXP 57
11786: PPUSH
11787: LD_INT 63
11789: PPUSH
11790: LD_INT 54
11792: PPUSH
11793: CALL_OW 171
// end ; end ; end_of_file
11797: END
// export function BurlakDying ; begin
11798: LD_INT 0
11800: PPUSH
// YouLost ( Burlak ) ;
11801: LD_STRING Burlak
11803: PPUSH
11804: CALL_OW 104
// end ;
11808: LD_VAR 0 1
11812: RET
// every 0 0$1 trigger kirovSolds = 0 do
11813: LD_EXP 59
11817: PUSH
11818: LD_INT 0
11820: EQUAL
11821: IFFALSE 11833
11823: GO 11825
11825: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
11826: LD_STRING KirovSoldsDie
11828: PPUSH
11829: CALL_OW 104
11833: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
11834: LD_EXP 22
11838: PUSH
11839: LD_INT 1
11841: PPUSH
11842: LD_INT 22
11844: PUSH
11845: LD_INT 3
11847: PUSH
11848: EMPTY
11849: LIST
11850: LIST
11851: PUSH
11852: LD_INT 21
11854: PUSH
11855: LD_INT 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PPUSH
11866: CALL_OW 71
11870: PUSH
11871: LD_INT 0
11873: EQUAL
11874: AND
11875: IFFALSE 12249
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin if IsOk ( Belkov ) then
11883: LD_EXP 54
11887: PPUSH
11888: CALL_OW 302
11892: IFFALSE 11908
// Say ( Belkov , D12-Bel-1 ) else
11894: LD_EXP 54
11898: PPUSH
11899: LD_STRING D12-Bel-1
11901: PPUSH
11902: CALL_OW 88
11906: GO 11968
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
11908: LD_INT 22
11910: PUSH
11911: LD_INT 3
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: PUSH
11918: LD_INT 21
11920: PUSH
11921: LD_INT 1
11923: PUSH
11924: EMPTY
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 50
11930: PUSH
11931: EMPTY
11932: LIST
11933: PUSH
11934: LD_INT 26
11936: PUSH
11937: LD_INT 1
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: PUSH
11944: EMPTY
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: PPUSH
11950: CALL_OW 69
11954: PPUSH
11955: LD_STRING D12-RSol1-1
11957: PPUSH
11958: LD_STRING 
11960: PPUSH
11961: LD_INT 0
11963: PPUSH
11964: CALL 8631 0 4
// if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or not gnyevkoSaved then
11968: LD_EXP 56
11972: PPUSH
11973: CALL_OW 302
11977: PUSH
11978: LD_EXP 56
11982: PPUSH
11983: CALL_OW 255
11987: PUSH
11988: LD_INT 8
11990: EQUAL
11991: AND
11992: PUSH
11993: LD_EXP 12
11997: NOT
11998: OR
11999: IFFALSE 12160
// begin case Query ( QExit2 ) of 1 :
12001: LD_STRING QExit2
12003: PPUSH
12004: CALL_OW 97
12008: PUSH
12009: LD_INT 1
12011: DOUBLE
12012: EQUAL
12013: IFTRUE 12017
12015: GO 12024
12017: POP
// begin FinishMission ;
12018: CALL 12252 0 0
// end ; 2 :
12022: GO 12158
12024: LD_INT 2
12026: DOUBLE
12027: EQUAL
12028: IFTRUE 12032
12030: GO 12157
12032: POP
// begin if not gnyevkoSaved then
12033: LD_EXP 12
12037: NOT
12038: IFFALSE 12090
// begin Say ( Burlak , D12-Bur-1 ) ;
12040: LD_EXP 49
12044: PPUSH
12045: LD_STRING D12-Bur-1
12047: PPUSH
12048: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
12052: LD_EXP 54
12056: PPUSH
12057: CALL_OW 255
12061: PUSH
12062: LD_INT 3
12064: EQUAL
12065: PUSH
12066: LD_EXP 54
12070: PPUSH
12071: CALL_OW 302
12075: AND
12076: IFFALSE 12090
// Say ( Belkov , D12-Bel-2 ) ;
12078: LD_EXP 54
12082: PPUSH
12083: LD_STRING D12-Bel-2
12085: PPUSH
12086: CALL_OW 88
// end ; repeat wait ( 0 0$1 ) ;
12090: LD_INT 35
12092: PPUSH
12093: CALL_OW 67
// until ( gnyevkoSaved or IsDead ( Gnyevko ) ) and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 ;
12097: LD_EXP 12
12101: PUSH
12102: LD_EXP 57
12106: PPUSH
12107: CALL_OW 301
12111: OR
12112: PUSH
12113: LD_INT 1
12115: PPUSH
12116: LD_INT 22
12118: PUSH
12119: LD_INT 3
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 21
12128: PUSH
12129: LD_INT 1
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PPUSH
12140: CALL_OW 71
12144: PUSH
12145: LD_INT 0
12147: EQUAL
12148: AND
12149: IFFALSE 12090
// FinishMission ;
12151: CALL 12252 0 0
// end ; end ;
12155: GO 12158
12157: POP
// end else
12158: GO 12249
// begin if IsOk ( Belkov ) then
12160: LD_EXP 54
12164: PPUSH
12165: CALL_OW 302
12169: IFFALSE 12185
// Say ( Belkov , D12-Bel-1 ) else
12171: LD_EXP 54
12175: PPUSH
12176: LD_STRING D12-Bel-1
12178: PPUSH
12179: CALL_OW 88
12183: GO 12245
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
12185: LD_INT 22
12187: PUSH
12188: LD_INT 3
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: PUSH
12195: LD_INT 21
12197: PUSH
12198: LD_INT 1
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: PUSH
12205: LD_INT 50
12207: PUSH
12208: EMPTY
12209: LIST
12210: PUSH
12211: LD_INT 26
12213: PUSH
12214: LD_INT 1
12216: PUSH
12217: EMPTY
12218: LIST
12219: LIST
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PPUSH
12227: CALL_OW 69
12231: PPUSH
12232: LD_STRING D12-RSol1-1
12234: PPUSH
12235: LD_STRING 
12237: PPUSH
12238: LD_INT 0
12240: PPUSH
12241: CALL 8631 0 4
// FinishMission ;
12245: CALL 12252 0 0
// end ; end ;
12249: PPOPN 1
12251: END
// function FinishMission ; begin
12252: LD_INT 0
12254: PPUSH
// SetRewards ;
12255: CALL 12276 0 0
// SavePlayerCharacters ;
12259: CALL 12627 0 0
// SaveGlobalVariables ;
12263: CALL 12757 0 0
// YouWin ;
12267: CALL_OW 103
// end ;
12271: LD_VAR 0 1
12275: RET
// function SetRewards ; begin
12276: LD_INT 0
12278: PPUSH
// if not gladstoneEscape and not JohannaEscape then
12279: LD_EXP 19
12283: NOT
12284: PUSH
12285: LD_EXP 20
12289: NOT
12290: AND
12291: IFFALSE 12303
// AddMedal ( NoEscape , 1 ) ;
12293: LD_STRING NoEscape
12295: PPUSH
12296: LD_INT 1
12298: PPUSH
12299: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
12303: LD_EXP 19
12307: PUSH
12308: LD_EXP 20
12312: NOT
12313: AND
12314: IFFALSE 12327
// AddMedal ( NoEscape , - 1 ) ;
12316: LD_STRING NoEscape
12318: PPUSH
12319: LD_INT 1
12321: NEG
12322: PPUSH
12323: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
12327: LD_EXP 19
12331: NOT
12332: PUSH
12333: LD_EXP 20
12337: AND
12338: IFFALSE 12351
// AddMedal ( NoEscape , - 2 ) ;
12340: LD_STRING NoEscape
12342: PPUSH
12343: LD_INT 2
12345: NEG
12346: PPUSH
12347: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
12351: LD_EXP 19
12355: PUSH
12356: LD_EXP 20
12360: AND
12361: IFFALSE 12374
// AddMedal ( NoEscape , - 3 ) ;
12363: LD_STRING NoEscape
12365: PPUSH
12366: LD_INT 3
12368: NEG
12369: PPUSH
12370: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
12374: LD_EXP 12
12378: PUSH
12379: LD_EXP 57
12383: PPUSH
12384: CALL_OW 302
12388: AND
12389: PUSH
12390: LD_EXP 21
12394: AND
12395: PUSH
12396: LD_EXP 56
12400: PPUSH
12401: CALL_OW 302
12405: AND
12406: IFFALSE 12418
// AddMedal ( Gnyevko , 1 ) ;
12408: LD_STRING Gnyevko
12410: PPUSH
12411: LD_INT 1
12413: PPUSH
12414: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
12418: LD_EXP 12
12422: NOT
12423: PUSH
12424: LD_EXP 21
12428: AND
12429: PUSH
12430: LD_EXP 56
12434: PPUSH
12435: CALL_OW 302
12439: AND
12440: IFFALSE 12453
// AddMedal ( Gnyevko , - 1 ) ;
12442: LD_STRING Gnyevko
12444: PPUSH
12445: LD_INT 1
12447: NEG
12448: PPUSH
12449: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
12453: LD_EXP 12
12457: PUSH
12458: LD_EXP 21
12462: NOT
12463: PUSH
12464: LD_EXP 57
12468: PPUSH
12469: CALL_OW 302
12473: NOT
12474: OR
12475: PUSH
12476: LD_EXP 56
12480: PPUSH
12481: CALL_OW 302
12485: NOT
12486: OR
12487: AND
12488: IFFALSE 12501
// AddMedal ( Gnyevko , - 2 ) ;
12490: LD_STRING Gnyevko
12492: PPUSH
12493: LD_INT 2
12495: NEG
12496: PPUSH
12497: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
12501: LD_EXP 12
12505: NOT
12506: PUSH
12507: LD_EXP 21
12511: NOT
12512: AND
12513: PUSH
12514: LD_EXP 57
12518: PPUSH
12519: CALL_OW 302
12523: NOT
12524: PUSH
12525: LD_EXP 56
12529: PPUSH
12530: CALL_OW 302
12534: NOT
12535: AND
12536: OR
12537: IFFALSE 12550
// AddMedal ( Gnyevko , - 3 ) ;
12539: LD_STRING Gnyevko
12541: PPUSH
12542: LD_INT 3
12544: NEG
12545: PPUSH
12546: CALL_OW 101
// if lostComradesCounter = 0 then
12550: LD_EXP 23
12554: PUSH
12555: LD_INT 0
12557: EQUAL
12558: IFFALSE 12572
// AddMedal ( NoLosses , 1 ) else
12560: LD_STRING NoLosses
12562: PPUSH
12563: LD_INT 1
12565: PPUSH
12566: CALL_OW 101
12570: GO 12582
// AddMedal ( NoLosses , 0 ) ;
12572: LD_STRING NoLosses
12574: PPUSH
12575: LD_INT 0
12577: PPUSH
12578: CALL_OW 101
// GiveMedals ( Main ) ;
12582: LD_STRING Main
12584: PPUSH
12585: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
12589: LD_INT 22
12591: PUSH
12592: LD_INT 3
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PUSH
12599: LD_INT 21
12601: PUSH
12602: LD_INT 1
12604: PUSH
12605: EMPTY
12606: LIST
12607: LIST
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: PPUSH
12613: CALL_OW 69
12617: PPUSH
12618: CALL_OW 43
// end ;
12622: LD_VAR 0 1
12626: RET
// function SavePlayerCharacters ; var others ; begin
12627: LD_INT 0
12629: PPUSH
12630: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
12631: LD_EXP 49
12635: PPUSH
12636: LD_STRING Burlak
12638: PPUSH
12639: CALL 8861 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
12643: LD_EXP 57
12647: PPUSH
12648: LD_STRING Gnyevko
12650: PPUSH
12651: CALL 8861 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
12655: LD_EXP 54
12659: PPUSH
12660: LD_STRING Belkov
12662: PPUSH
12663: CALL 8861 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
12667: LD_EXP 56
12671: PPUSH
12672: LD_STRING Kirilenkova
12674: PPUSH
12675: CALL 8861 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
12679: LD_ADDR_VAR 0 2
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_INT 3
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 21
12696: PUSH
12697: LD_INT 1
12699: PUSH
12700: EMPTY
12701: LIST
12702: LIST
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: PPUSH
12708: CALL_OW 69
12712: PUSH
12713: LD_EXP 49
12717: PUSH
12718: LD_EXP 57
12722: PUSH
12723: LD_EXP 54
12727: PUSH
12728: LD_EXP 56
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: DIFF
12739: ST_TO_ADDR
// ExtSaveCharacters ( others , OtherSurvivors ) ;
12740: LD_VAR 0 2
12744: PPUSH
12745: LD_STRING OtherSurvivors
12747: PPUSH
12748: CALL 8917 0 2
// end ;
12752: LD_VAR 0 1
12756: RET
// function SaveGlobalVariables ; begin
12757: LD_INT 0
12759: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
12760: LD_EXP 1
12764: PPUSH
12765: LD_STRING 01_GladstoneStatus
12767: PPUSH
12768: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
12772: LD_EXP 2
12776: PPUSH
12777: LD_STRING 01_JohannaStatus
12779: PPUSH
12780: CALL_OW 39
// end ; end_of_file
12784: LD_VAR 0 1
12788: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
12789: LD_INT 0
12791: PPUSH
12792: PPUSH
12793: PPUSH
// InitHc_All ( ) ;
12794: CALL_OW 584
// uc_side = 1 ;
12798: LD_ADDR_OWVAR 20
12802: PUSH
12803: LD_INT 1
12805: ST_TO_ADDR
// hc_class := 1 ;
12806: LD_ADDR_OWVAR 28
12810: PUSH
12811: LD_INT 1
12813: ST_TO_ADDR
// hc_sex := sex_male ;
12814: LD_ADDR_OWVAR 27
12818: PUSH
12819: LD_INT 1
12821: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12822: LD_ADDR_OWVAR 33
12826: PUSH
12827: LD_STRING AmGalRemake
12829: ST_TO_ADDR
// hc_face_number := 1 ;
12830: LD_ADDR_OWVAR 34
12834: PUSH
12835: LD_INT 1
12837: ST_TO_ADDR
// hc_name := Charles Brown ;
12838: LD_ADDR_OWVAR 26
12842: PUSH
12843: LD_STRING Charles Brown
12845: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12846: LD_ADDR_OWVAR 29
12850: PUSH
12851: LD_INT 12
12853: PUSH
12854: LD_INT 11
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
12861: LD_ADDR_OWVAR 31
12865: PUSH
12866: LD_INT 1
12868: PUSH
12869: LD_INT 0
12871: PUSH
12872: LD_INT 1
12874: PUSH
12875: LD_INT 1
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: ST_TO_ADDR
// Charles = CreateHuman ;
12884: LD_ADDR_EXP 45
12888: PUSH
12889: CALL_OW 44
12893: ST_TO_ADDR
// hc_class := 1 ;
12894: LD_ADDR_OWVAR 28
12898: PUSH
12899: LD_INT 1
12901: ST_TO_ADDR
// hc_sex := sex_female ;
12902: LD_ADDR_OWVAR 27
12906: PUSH
12907: LD_INT 2
12909: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
12910: LD_ADDR_OWVAR 33
12914: PUSH
12915: LD_STRING AmGalRemake
12917: ST_TO_ADDR
// hc_face_number := 2 ;
12918: LD_ADDR_OWVAR 34
12922: PUSH
12923: LD_INT 2
12925: ST_TO_ADDR
// hc_name := Johanna Holland ;
12926: LD_ADDR_OWVAR 26
12930: PUSH
12931: LD_STRING Johanna Holland
12933: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
12934: LD_ADDR_OWVAR 29
12938: PUSH
12939: LD_INT 12
12941: PUSH
12942: LD_INT 11
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
12949: LD_ADDR_OWVAR 31
12953: PUSH
12954: LD_EXP 39
12958: PUSH
12959: LD_INT 0
12961: PPUSH
12962: LD_INT 2
12964: PPUSH
12965: CALL_OW 12
12969: PUSH
12970: LD_INT 0
12972: PPUSH
12973: LD_INT 2
12975: PPUSH
12976: CALL_OW 12
12980: PUSH
12981: LD_INT 0
12983: PPUSH
12984: LD_INT 2
12986: PPUSH
12987: CALL_OW 12
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: ST_TO_ADDR
// Johanna = CreateHuman ;
12998: LD_ADDR_EXP 46
13002: PUSH
13003: CALL_OW 44
13007: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
13008: LD_EXP 46
13012: PPUSH
13013: LD_INT 19
13015: PPUSH
13016: LD_INT 0
13018: PPUSH
13019: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
13023: LD_EXP 46
13027: PPUSH
13028: LD_INT 23
13030: PPUSH
13031: CALL_OW 120
// Gladstone := PrepareUnitEx ( Gladstone , false ) ;
13035: LD_ADDR_EXP 47
13039: PUSH
13040: LD_STRING Gladstone
13042: PPUSH
13043: LD_INT 0
13045: PPUSH
13046: CALL 8568 0 2
13050: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
13051: LD_EXP 47
13055: PPUSH
13056: LD_INT 22
13058: PPUSH
13059: CALL_OW 52
// amApemans = [ ] ;
13063: LD_ADDR_EXP 48
13067: PUSH
13068: EMPTY
13069: ST_TO_ADDR
// for i := 1 to amApeAmount do
13070: LD_ADDR_VAR 0 2
13074: PUSH
13075: DOUBLE
13076: LD_INT 1
13078: DEC
13079: ST_TO_ADDR
13080: LD_EXP 38
13084: PUSH
13085: FOR_TO
13086: IFFALSE 13208
// begin InitHC_All ( ) ;
13088: CALL_OW 584
// hc_class := class_apeman ;
13092: LD_ADDR_OWVAR 28
13096: PUSH
13097: LD_INT 12
13099: ST_TO_ADDR
// hc_gallery :=  ;
13100: LD_ADDR_OWVAR 33
13104: PUSH
13105: LD_STRING 
13107: ST_TO_ADDR
// hc_name :=  ;
13108: LD_ADDR_OWVAR 26
13112: PUSH
13113: LD_STRING 
13115: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
13116: LD_ADDR_OWVAR 31
13120: PUSH
13121: LD_EXP 39
13125: PUSH
13126: LD_INT 0
13128: PPUSH
13129: LD_INT 2
13131: PPUSH
13132: CALL_OW 12
13136: PUSH
13137: LD_INT 0
13139: PPUSH
13140: LD_INT 2
13142: PPUSH
13143: CALL_OW 12
13147: PUSH
13148: LD_INT 0
13150: PPUSH
13151: LD_INT 2
13153: PPUSH
13154: CALL_OW 12
13158: PUSH
13159: EMPTY
13160: LIST
13161: LIST
13162: LIST
13163: LIST
13164: ST_TO_ADDR
// ape = CreateHuman ;
13165: LD_ADDR_VAR 0 3
13169: PUSH
13170: CALL_OW 44
13174: ST_TO_ADDR
// PlaceUnitArea ( ape , AmApeResp , false ) ;
13175: LD_VAR 0 3
13179: PPUSH
13180: LD_INT 29
13182: PPUSH
13183: LD_INT 0
13185: PPUSH
13186: CALL_OW 49
// amApemans = amApemans ^ ape ;
13190: LD_ADDR_EXP 48
13194: PUSH
13195: LD_EXP 48
13199: PUSH
13200: LD_VAR 0 3
13204: ADD
13205: ST_TO_ADDR
// end ;
13206: GO 13085
13208: POP
13209: POP
// SetLives ( am_bun , americanBunkerHP ) ;
13210: LD_INT 23
13212: PPUSH
13213: LD_EXP 36
13217: PPUSH
13218: CALL_OW 234
// end ; end_of_file
13222: LD_VAR 0 1
13226: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
13227: LD_INT 0
13229: PPUSH
// PrepareHero ;
13230: CALL 13255 0 0
// PreparePokryshkinTeams ;
13234: CALL 13349 0 0
// PrepareJelena ;
13238: CALL 13614 0 0
// PrepareGnyevko ;
13242: CALL 13646 0 0
// PrepareKurin ;
13246: CALL 13317 0 0
// end ;
13250: LD_VAR 0 1
13254: RET
// function PrepareHero ; begin
13255: LD_INT 0
13257: PPUSH
// uc_side = 3 ;
13258: LD_ADDR_OWVAR 20
13262: PUSH
13263: LD_INT 3
13265: ST_TO_ADDR
// Burlak := PrepareUnitEx ( Burlak , false ) ;
13266: LD_ADDR_EXP 49
13270: PUSH
13271: LD_STRING Burlak
13273: PPUSH
13274: LD_INT 0
13276: PPUSH
13277: CALL 8568 0 2
13281: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
13282: LD_EXP 49
13286: PPUSH
13287: LD_EXP 40
13291: PUSH
13292: LD_INT 1
13294: ARRAY
13295: PPUSH
13296: LD_EXP 40
13300: PUSH
13301: LD_INT 2
13303: ARRAY
13304: PPUSH
13305: LD_INT 1
13307: PPUSH
13308: CALL_OW 48
// end ;
13312: LD_VAR 0 1
13316: RET
// function PrepareKurin ; begin
13317: LD_INT 0
13319: PPUSH
// uc_side = 6 ;
13320: LD_ADDR_OWVAR 20
13324: PUSH
13325: LD_INT 6
13327: ST_TO_ADDR
// Kurin := PrepareUnitEx ( Kurin , false ) ;
13328: LD_ADDR_EXP 58
13332: PUSH
13333: LD_STRING Kurin
13335: PPUSH
13336: LD_INT 0
13338: PPUSH
13339: CALL 8568 0 2
13343: ST_TO_ADDR
// end ;
13344: LD_VAR 0 1
13348: RET
// function PreparePokryshkinTeams ; begin
13349: LD_INT 0
13351: PPUSH
// uc_side = 6 ;
13352: LD_ADDR_OWVAR 20
13356: PUSH
13357: LD_INT 6
13359: ST_TO_ADDR
// Pokryshkin := PrepareUnitEx ( Pokryshkin , false ) ;
13360: LD_ADDR_EXP 50
13364: PUSH
13365: LD_STRING Pokryshkin
13367: PPUSH
13368: LD_INT 0
13370: PPUSH
13371: CALL 8568 0 2
13375: ST_TO_ADDR
// Saseda := PrepareUnitEx ( Saseda , false ) ;
13376: LD_ADDR_EXP 51
13380: PUSH
13381: LD_STRING Saseda
13383: PPUSH
13384: LD_INT 0
13386: PPUSH
13387: CALL 8568 0 2
13391: ST_TO_ADDR
// Jaworska := PrepareUnitEx ( Jaworska , false ) ;
13392: LD_ADDR_EXP 52
13396: PUSH
13397: LD_STRING Jaworska
13399: PPUSH
13400: LD_INT 0
13402: PPUSH
13403: CALL 8568 0 2
13407: ST_TO_ADDR
// Balei := PrepareUnitEx ( Balei , false ) ;
13408: LD_ADDR_EXP 53
13412: PUSH
13413: LD_STRING Balei
13415: PPUSH
13416: LD_INT 0
13418: PPUSH
13419: CALL 8568 0 2
13423: ST_TO_ADDR
// Belkov := PrepareUnitEx ( Belkov , false ) ;
13424: LD_ADDR_EXP 54
13428: PUSH
13429: LD_STRING Belkov
13431: PPUSH
13432: LD_INT 0
13434: PPUSH
13435: CALL 8568 0 2
13439: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
13440: LD_EXP 50
13444: PPUSH
13445: LD_INT 25
13447: PPUSH
13448: LD_INT 0
13450: PPUSH
13451: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
13455: LD_EXP 51
13459: PPUSH
13460: LD_INT 17
13462: PPUSH
13463: LD_INT 0
13465: PPUSH
13466: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
13470: LD_EXP 52
13474: PPUSH
13475: LD_INT 17
13477: PPUSH
13478: LD_INT 0
13480: PPUSH
13481: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
13485: LD_EXP 53
13489: PPUSH
13490: LD_INT 17
13492: PPUSH
13493: LD_INT 0
13495: PPUSH
13496: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
13500: LD_EXP 54
13504: PPUSH
13505: LD_INT 17
13507: PPUSH
13508: LD_INT 0
13510: PPUSH
13511: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
13515: LD_ADDR_EXP 59
13519: PUSH
13520: LD_EXP 50
13524: PUSH
13525: LD_EXP 51
13529: PUSH
13530: LD_EXP 53
13534: PUSH
13535: LD_EXP 54
13539: PUSH
13540: LD_EXP 52
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: LIST
13551: ST_TO_ADDR
// if Difficulty < 3 then
13552: LD_OWVAR 67
13556: PUSH
13557: LD_INT 3
13559: LESS
13560: IFFALSE 13609
// begin Jaunzeme := PrepareUnitEx ( Jaunzeme , false ) ;
13562: LD_ADDR_EXP 55
13566: PUSH
13567: LD_STRING Jaunzeme
13569: PPUSH
13570: LD_INT 0
13572: PPUSH
13573: CALL 8568 0 2
13577: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
13578: LD_EXP 55
13582: PPUSH
13583: LD_INT 26
13585: PPUSH
13586: LD_INT 0
13588: PPUSH
13589: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
13593: LD_ADDR_EXP 59
13597: PUSH
13598: LD_EXP 59
13602: PUSH
13603: LD_EXP 55
13607: ADD
13608: ST_TO_ADDR
// end ; end ;
13609: LD_VAR 0 1
13613: RET
// function PrepareJelena ; begin
13614: LD_INT 0
13616: PPUSH
// uc_side = 5 ;
13617: LD_ADDR_OWVAR 20
13621: PUSH
13622: LD_INT 5
13624: ST_TO_ADDR
// Kirilenkova := PrepareUnitEx ( Kirilenkova , false ) ;
13625: LD_ADDR_EXP 56
13629: PUSH
13630: LD_STRING Kirilenkova
13632: PPUSH
13633: LD_INT 0
13635: PPUSH
13636: CALL 8568 0 2
13640: ST_TO_ADDR
// end ;
13641: LD_VAR 0 1
13645: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
13646: LD_INT 0
13648: PPUSH
13649: PPUSH
13650: PPUSH
13651: PPUSH
// uc_side = 5 ;
13652: LD_ADDR_OWVAR 20
13656: PUSH
13657: LD_INT 5
13659: ST_TO_ADDR
// Gnyevko := PrepareUnitEx ( Gnyevko , false ) ;
13660: LD_ADDR_EXP 57
13664: PUSH
13665: LD_STRING Gnyevko
13667: PPUSH
13668: LD_INT 0
13670: PPUSH
13671: CALL 8568 0 2
13675: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
13676: LD_ADDR_VAR 0 4
13680: PUSH
13681: LD_EXP 41
13685: PUSH
13686: LD_INT 1
13688: PPUSH
13689: LD_EXP 41
13693: PPUSH
13694: CALL_OW 12
13698: ARRAY
13699: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
13700: LD_EXP 57
13704: PPUSH
13705: LD_VAR 0 4
13709: PUSH
13710: LD_INT 1
13712: ARRAY
13713: PPUSH
13714: LD_VAR 0 4
13718: PUSH
13719: LD_INT 2
13721: ARRAY
13722: PPUSH
13723: LD_INT 0
13725: PPUSH
13726: CALL_OW 48
// SetLives ( Gnyevko , gnyevkoStartHP ) ;
13730: LD_EXP 57
13734: PPUSH
13735: LD_EXP 42
13739: PPUSH
13740: CALL_OW 234
// ComHold ( Gnyevko ) ;
13744: LD_EXP 57
13748: PPUSH
13749: CALL_OW 140
// InitHC_All ( ) ;
13753: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 , 1 ] [ Difficulty ] do
13757: LD_ADDR_VAR 0 3
13761: PUSH
13762: DOUBLE
13763: LD_INT 1
13765: DEC
13766: ST_TO_ADDR
13767: LD_EXP 30
13771: PUSH
13772: LD_INT 1
13774: ARRAY
13775: PUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 2
13781: PUSH
13782: LD_INT 1
13784: PUSH
13785: LD_INT 1
13787: PUSH
13788: EMPTY
13789: LIST
13790: LIST
13791: LIST
13792: LIST
13793: PUSH
13794: LD_OWVAR 67
13798: ARRAY
13799: MINUS
13800: PUSH
13801: FOR_TO
13802: IFFALSE 13932
// begin uc_side = 0 ;
13804: LD_ADDR_OWVAR 20
13808: PUSH
13809: LD_INT 0
13811: ST_TO_ADDR
// uc_nation = nation_nature ;
13812: LD_ADDR_OWVAR 21
13816: PUSH
13817: LD_INT 0
13819: ST_TO_ADDR
// hc_class = class_apeman ;
13820: LD_ADDR_OWVAR 28
13824: PUSH
13825: LD_INT 12
13827: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13828: LD_ADDR_OWVAR 31
13832: PUSH
13833: LD_EXP 31
13837: PUSH
13838: LD_INT 1
13840: ARRAY
13841: PUSH
13842: LD_EXP 31
13846: PUSH
13847: LD_INT 2
13849: ARRAY
13850: PUSH
13851: LD_EXP 31
13855: PUSH
13856: LD_INT 3
13858: ARRAY
13859: PUSH
13860: LD_EXP 31
13864: PUSH
13865: LD_INT 4
13867: ARRAY
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: ST_TO_ADDR
// hc_agressivity = apeAgression ;
13875: LD_ADDR_OWVAR 35
13879: PUSH
13880: LD_EXP 37
13884: ST_TO_ADDR
// un = CreateHuman ;
13885: LD_ADDR_VAR 0 2
13889: PUSH
13890: CALL_OW 44
13894: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
13895: LD_VAR 0 2
13899: PPUSH
13900: LD_EXP 57
13904: PPUSH
13905: CALL_OW 250
13909: PPUSH
13910: LD_EXP 57
13914: PPUSH
13915: CALL_OW 251
13919: PPUSH
13920: LD_INT 8
13922: PPUSH
13923: LD_INT 0
13925: PPUSH
13926: CALL_OW 50
// end ;
13930: GO 13801
13932: POP
13933: POP
// end ; end_of_file
13934: LD_VAR 0 1
13938: RET
// export function CreateNature ; var i , un ; begin
13939: LD_INT 0
13941: PPUSH
13942: PPUSH
13943: PPUSH
// InitHC_All ( ) ;
13944: CALL_OW 584
// for i := 1 to animalsAmount [ 1 ] do
13948: LD_ADDR_VAR 0 2
13952: PUSH
13953: DOUBLE
13954: LD_INT 1
13956: DEC
13957: ST_TO_ADDR
13958: LD_EXP 30
13962: PUSH
13963: LD_INT 1
13965: ARRAY
13966: PUSH
13967: FOR_TO
13968: IFFALSE 14078
// begin uc_side = 0 ;
13970: LD_ADDR_OWVAR 20
13974: PUSH
13975: LD_INT 0
13977: ST_TO_ADDR
// uc_nation = nation_nature ;
13978: LD_ADDR_OWVAR 21
13982: PUSH
13983: LD_INT 0
13985: ST_TO_ADDR
// hc_class = class_apeman ;
13986: LD_ADDR_OWVAR 28
13990: PUSH
13991: LD_INT 12
13993: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
13994: LD_ADDR_OWVAR 31
13998: PUSH
13999: LD_EXP 31
14003: PUSH
14004: LD_INT 1
14006: ARRAY
14007: PUSH
14008: LD_EXP 31
14012: PUSH
14013: LD_INT 2
14015: ARRAY
14016: PUSH
14017: LD_EXP 31
14021: PUSH
14022: LD_INT 3
14024: ARRAY
14025: PUSH
14026: LD_EXP 31
14030: PUSH
14031: LD_INT 4
14033: ARRAY
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: ST_TO_ADDR
// hc_agressivity = apeAgression ;
14041: LD_ADDR_OWVAR 35
14045: PUSH
14046: LD_EXP 37
14050: ST_TO_ADDR
// un = CreateHuman ;
14051: LD_ADDR_VAR 0 3
14055: PUSH
14056: CALL_OW 44
14060: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
14061: LD_VAR 0 3
14065: PPUSH
14066: LD_INT 16
14068: PPUSH
14069: LD_INT 0
14071: PPUSH
14072: CALL_OW 49
// end ;
14076: GO 13967
14078: POP
14079: POP
// for i := 1 to animalsAmount [ 2 ] do
14080: LD_ADDR_VAR 0 2
14084: PUSH
14085: DOUBLE
14086: LD_INT 1
14088: DEC
14089: ST_TO_ADDR
14090: LD_EXP 30
14094: PUSH
14095: LD_INT 2
14097: ARRAY
14098: PUSH
14099: FOR_TO
14100: IFFALSE 14210
// begin uc_side = 0 ;
14102: LD_ADDR_OWVAR 20
14106: PUSH
14107: LD_INT 0
14109: ST_TO_ADDR
// uc_nation = nation_nature ;
14110: LD_ADDR_OWVAR 21
14114: PUSH
14115: LD_INT 0
14117: ST_TO_ADDR
// hc_class = class_phororhacos ;
14118: LD_ADDR_OWVAR 28
14122: PUSH
14123: LD_INT 18
14125: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14126: LD_ADDR_OWVAR 31
14130: PUSH
14131: LD_EXP 31
14135: PUSH
14136: LD_INT 1
14138: ARRAY
14139: PUSH
14140: LD_EXP 31
14144: PUSH
14145: LD_INT 2
14147: ARRAY
14148: PUSH
14149: LD_EXP 31
14153: PUSH
14154: LD_INT 3
14156: ARRAY
14157: PUSH
14158: LD_EXP 31
14162: PUSH
14163: LD_INT 4
14165: ARRAY
14166: PUSH
14167: EMPTY
14168: LIST
14169: LIST
14170: LIST
14171: LIST
14172: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14173: LD_ADDR_OWVAR 35
14177: PUSH
14178: LD_EXP 32
14182: ST_TO_ADDR
// un = CreateHuman ;
14183: LD_ADDR_VAR 0 3
14187: PUSH
14188: CALL_OW 44
14192: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14193: LD_VAR 0 3
14197: PPUSH
14198: LD_INT 15
14200: PPUSH
14201: LD_INT 0
14203: PPUSH
14204: CALL_OW 49
// end ;
14208: GO 14099
14210: POP
14211: POP
// for i := 1 to animalsAmount [ 3 ] do
14212: LD_ADDR_VAR 0 2
14216: PUSH
14217: DOUBLE
14218: LD_INT 1
14220: DEC
14221: ST_TO_ADDR
14222: LD_EXP 30
14226: PUSH
14227: LD_INT 3
14229: ARRAY
14230: PUSH
14231: FOR_TO
14232: IFFALSE 14342
// begin uc_side = 0 ;
14234: LD_ADDR_OWVAR 20
14238: PUSH
14239: LD_INT 0
14241: ST_TO_ADDR
// uc_nation = nation_nature ;
14242: LD_ADDR_OWVAR 21
14246: PUSH
14247: LD_INT 0
14249: ST_TO_ADDR
// hc_class = class_tiger ;
14250: LD_ADDR_OWVAR 28
14254: PUSH
14255: LD_INT 14
14257: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14258: LD_ADDR_OWVAR 31
14262: PUSH
14263: LD_EXP 31
14267: PUSH
14268: LD_INT 1
14270: ARRAY
14271: PUSH
14272: LD_EXP 31
14276: PUSH
14277: LD_INT 2
14279: ARRAY
14280: PUSH
14281: LD_EXP 31
14285: PUSH
14286: LD_INT 3
14288: ARRAY
14289: PUSH
14290: LD_EXP 31
14294: PUSH
14295: LD_INT 4
14297: ARRAY
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14305: LD_ADDR_OWVAR 35
14309: PUSH
14310: LD_EXP 32
14314: ST_TO_ADDR
// un = CreateHuman ;
14315: LD_ADDR_VAR 0 3
14319: PUSH
14320: CALL_OW 44
14324: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14325: LD_VAR 0 3
14329: PPUSH
14330: LD_INT 15
14332: PPUSH
14333: LD_INT 0
14335: PPUSH
14336: CALL_OW 49
// end ;
14340: GO 14231
14342: POP
14343: POP
// for i := 1 to animalsAmount [ 4 ] do
14344: LD_ADDR_VAR 0 2
14348: PUSH
14349: DOUBLE
14350: LD_INT 1
14352: DEC
14353: ST_TO_ADDR
14354: LD_EXP 30
14358: PUSH
14359: LD_INT 4
14361: ARRAY
14362: PUSH
14363: FOR_TO
14364: IFFALSE 14474
// begin uc_side = 0 ;
14366: LD_ADDR_OWVAR 20
14370: PUSH
14371: LD_INT 0
14373: ST_TO_ADDR
// uc_nation = nation_nature ;
14374: LD_ADDR_OWVAR 21
14378: PUSH
14379: LD_INT 0
14381: ST_TO_ADDR
// hc_class = 21 ;
14382: LD_ADDR_OWVAR 28
14386: PUSH
14387: LD_INT 21
14389: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
14390: LD_ADDR_OWVAR 31
14394: PUSH
14395: LD_EXP 31
14399: PUSH
14400: LD_INT 1
14402: ARRAY
14403: PUSH
14404: LD_EXP 31
14408: PUSH
14409: LD_INT 2
14411: ARRAY
14412: PUSH
14413: LD_EXP 31
14417: PUSH
14418: LD_INT 3
14420: ARRAY
14421: PUSH
14422: LD_EXP 31
14426: PUSH
14427: LD_INT 4
14429: ARRAY
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
14437: LD_ADDR_OWVAR 35
14441: PUSH
14442: LD_EXP 32
14446: ST_TO_ADDR
// un = CreateHuman ;
14447: LD_ADDR_VAR 0 3
14451: PUSH
14452: CALL_OW 44
14456: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
14457: LD_VAR 0 3
14461: PPUSH
14462: LD_INT 15
14464: PPUSH
14465: LD_INT 0
14467: PPUSH
14468: CALL_OW 49
// end ;
14472: GO 14363
14474: POP
14475: POP
// end ; end_of_file
14476: LD_VAR 0 1
14480: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
14481: LD_VAR 0 1
14485: PUSH
14486: LD_EXP 49
14490: EQUAL
14491: PUSH
14492: LD_EXP 56
14496: PPUSH
14497: CALL_OW 255
14501: PUSH
14502: LD_INT 3
14504: EQUAL
14505: NOT
14506: AND
14507: PUSH
14508: LD_EXP 56
14512: PPUSH
14513: CALL_OW 302
14517: NOT
14518: AND
14519: IFFALSE 14525
// BurlakDying ;
14521: CALL 11798 0 0
// if unit = Gladstone then
14525: LD_VAR 0 1
14529: PUSH
14530: LD_EXP 47
14534: EQUAL
14535: IFFALSE 14545
// gladstoneStatus = 0 ;
14537: LD_ADDR_EXP 1
14541: PUSH
14542: LD_INT 0
14544: ST_TO_ADDR
// if unit = Johanna then
14545: LD_VAR 0 1
14549: PUSH
14550: LD_EXP 46
14554: EQUAL
14555: IFFALSE 14565
// johannaStatus = 0 ;
14557: LD_ADDR_EXP 2
14561: PUSH
14562: LD_INT 0
14564: ST_TO_ADDR
// end ;
14565: PPOPN 1
14567: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
14568: LD_VAR 0 1
14572: PPUSH
14573: CALL 30667 0 1
// if unit = Burlak then
14577: LD_VAR 0 1
14581: PUSH
14582: LD_EXP 49
14586: EQUAL
14587: IFFALSE 14593
// BurlakDying ;
14589: CALL 11798 0 0
// if GetSide ( unit ) = 3 then
14593: LD_VAR 0 1
14597: PPUSH
14598: CALL_OW 255
14602: PUSH
14603: LD_INT 3
14605: EQUAL
14606: IFFALSE 14622
// lostComradesCounter = lostComradesCounter + 1 ;
14608: LD_ADDR_EXP 23
14612: PUSH
14613: LD_EXP 23
14617: PUSH
14618: LD_INT 1
14620: PLUS
14621: ST_TO_ADDR
// if unit in kirovSolds then
14622: LD_VAR 0 1
14626: PUSH
14627: LD_EXP 59
14631: IN
14632: IFFALSE 14650
// kirovSolds = kirovSolds diff unit ;
14634: LD_ADDR_EXP 59
14638: PUSH
14639: LD_EXP 59
14643: PUSH
14644: LD_VAR 0 1
14648: DIFF
14649: ST_TO_ADDR
// end ;
14650: PPOPN 1
14652: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
14653: LD_VAR 0 1
14657: PPUSH
14658: LD_VAR 0 2
14662: PPUSH
14663: CALL 30787 0 2
// end ;
14667: PPOPN 2
14669: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
14670: LD_VAR 0 1
14674: PUSH
14675: LD_INT 3
14677: EQUAL
14678: PUSH
14679: LD_VAR 0 2
14683: PUSH
14684: LD_INT 1
14686: EQUAL
14687: AND
14688: PUSH
14689: LD_VAR 0 1
14693: PUSH
14694: LD_INT 1
14696: EQUAL
14697: PUSH
14698: LD_VAR 0 2
14702: PUSH
14703: LD_INT 3
14705: EQUAL
14706: AND
14707: PUSH
14708: LD_EXP 17
14712: PUSH
14713: LD_INT 1
14715: EQUAL
14716: AND
14717: OR
14718: IFFALSE 14724
// Dial_SecondAttack ;
14720: CALL 6016 0 0
// if side1 = 3 and side2 = 6 and not traitor then
14724: LD_VAR 0 1
14728: PUSH
14729: LD_INT 3
14731: EQUAL
14732: PUSH
14733: LD_VAR 0 2
14737: PUSH
14738: LD_INT 6
14740: EQUAL
14741: AND
14742: PUSH
14743: LD_EXP 18
14747: NOT
14748: AND
14749: IFFALSE 14755
// Dialogue_AttackComrade ;
14751: CALL 4057 0 0
// end ; end_of_file
14755: PPOPN 2
14757: END
// every 1 trigger GetSide ( Kirilenkova ) = 3 and achievement_JelenaTimer < 0 0$15 do
14758: LD_EXP 56
14762: PPUSH
14763: CALL_OW 255
14767: PUSH
14768: LD_INT 3
14770: EQUAL
14771: PUSH
14772: LD_EXP 29
14776: PUSH
14777: LD_INT 525
14779: LESS
14780: AND
14781: IFFALSE 14793
14783: GO 14785
14785: DISABLE
// SetAchievement ( ACH_YELENA ) ;
14786: LD_STRING ACH_YELENA
14788: PPUSH
14789: CALL_OW 543
14793: END
// every 1 trigger not FilterAllUnits ( [ [ f_nation , nation_nature ] , [ f_or , [ f_class , class_tiger ] , [ f_class , class_phororhacos ] , [ f_class , class_apeman ] ] ] ) do
14794: LD_INT 23
14796: PUSH
14797: LD_INT 0
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 2
14806: PUSH
14807: LD_INT 25
14809: PUSH
14810: LD_INT 14
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 25
14819: PUSH
14820: LD_INT 18
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 25
14829: PUSH
14830: LD_INT 12
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: LIST
14841: LIST
14842: PUSH
14843: EMPTY
14844: LIST
14845: LIST
14846: PPUSH
14847: CALL_OW 69
14851: NOT
14852: IFFALSE 14864
14854: GO 14856
14856: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
14857: LD_STRING ACH_NATURE
14859: PPUSH
14860: CALL_OW 543
14864: END
// export globalGameSaveCounter ; every 0 0$1 do
14865: GO 14867
14867: DISABLE
// begin enable ;
14868: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
14869: LD_STRING updateTimer(
14871: PUSH
14872: LD_OWVAR 1
14876: STR
14877: PUSH
14878: LD_STRING );
14880: STR
14881: PPUSH
14882: CALL_OW 559
// end ;
14886: END
// every 0 0$1 do
14887: GO 14889
14889: DISABLE
// begin globalGameSaveCounter := 0 ;
14890: LD_ADDR_EXP 60
14894: PUSH
14895: LD_INT 0
14897: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
14898: LD_STRING setGameSaveCounter(0)
14900: PPUSH
14901: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
14905: LD_STRING initStreamRollete();
14907: PPUSH
14908: CALL_OW 559
// InitStreamMode ;
14912: CALL 16238 0 0
// DefineStreamItems ( false ) ;
14916: LD_INT 0
14918: PPUSH
14919: CALL 16702 0 1
// end ;
14923: END
// export function SOS_MapStart ( ) ; begin
14924: LD_INT 0
14926: PPUSH
// if streamModeActive then
14927: LD_EXP 61
14931: IFFALSE 14940
// DefineStreamItems ( true ) ;
14933: LD_INT 1
14935: PPUSH
14936: CALL 16702 0 1
// UpdateLuaVariables ( ) ;
14940: CALL 14957 0 0
// UpdateFactoryWaypoints ( ) ;
14944: CALL 29571 0 0
// UpdateWarehouseGatheringPoints ( ) ;
14948: CALL 29828 0 0
// end ;
14952: LD_VAR 0 1
14956: RET
// function UpdateLuaVariables ( ) ; begin
14957: LD_INT 0
14959: PPUSH
// if globalGameSaveCounter then
14960: LD_EXP 60
14964: IFFALSE 14998
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
14966: LD_ADDR_EXP 60
14970: PUSH
14971: LD_EXP 60
14975: PPUSH
14976: CALL 73801 0 1
14980: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
14981: LD_STRING setGameSaveCounter(
14983: PUSH
14984: LD_EXP 60
14988: STR
14989: PUSH
14990: LD_STRING )
14992: STR
14993: PPUSH
14994: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
14998: LD_STRING setGameDifficulty(
15000: PUSH
15001: LD_OWVAR 67
15005: STR
15006: PUSH
15007: LD_STRING )
15009: STR
15010: PPUSH
15011: CALL_OW 559
// end ;
15015: LD_VAR 0 1
15019: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
15020: LD_INT 0
15022: PPUSH
// if p2 = stream_mode then
15023: LD_VAR 0 2
15027: PUSH
15028: LD_INT 100
15030: EQUAL
15031: IFFALSE 16034
// begin if not StreamModeActive then
15033: LD_EXP 61
15037: NOT
15038: IFFALSE 15048
// StreamModeActive := true ;
15040: LD_ADDR_EXP 61
15044: PUSH
15045: LD_INT 1
15047: ST_TO_ADDR
// if p3 = 0 then
15048: LD_VAR 0 3
15052: PUSH
15053: LD_INT 0
15055: EQUAL
15056: IFFALSE 15062
// InitStreamMode ;
15058: CALL 16238 0 0
// if p3 = 1 then
15062: LD_VAR 0 3
15066: PUSH
15067: LD_INT 1
15069: EQUAL
15070: IFFALSE 15080
// sRocket := true ;
15072: LD_ADDR_EXP 66
15076: PUSH
15077: LD_INT 1
15079: ST_TO_ADDR
// if p3 = 2 then
15080: LD_VAR 0 3
15084: PUSH
15085: LD_INT 2
15087: EQUAL
15088: IFFALSE 15098
// sSpeed := true ;
15090: LD_ADDR_EXP 65
15094: PUSH
15095: LD_INT 1
15097: ST_TO_ADDR
// if p3 = 3 then
15098: LD_VAR 0 3
15102: PUSH
15103: LD_INT 3
15105: EQUAL
15106: IFFALSE 15116
// sEngine := true ;
15108: LD_ADDR_EXP 67
15112: PUSH
15113: LD_INT 1
15115: ST_TO_ADDR
// if p3 = 4 then
15116: LD_VAR 0 3
15120: PUSH
15121: LD_INT 4
15123: EQUAL
15124: IFFALSE 15134
// sSpec := true ;
15126: LD_ADDR_EXP 64
15130: PUSH
15131: LD_INT 1
15133: ST_TO_ADDR
// if p3 = 5 then
15134: LD_VAR 0 3
15138: PUSH
15139: LD_INT 5
15141: EQUAL
15142: IFFALSE 15152
// sLevel := true ;
15144: LD_ADDR_EXP 68
15148: PUSH
15149: LD_INT 1
15151: ST_TO_ADDR
// if p3 = 6 then
15152: LD_VAR 0 3
15156: PUSH
15157: LD_INT 6
15159: EQUAL
15160: IFFALSE 15170
// sArmoury := true ;
15162: LD_ADDR_EXP 69
15166: PUSH
15167: LD_INT 1
15169: ST_TO_ADDR
// if p3 = 7 then
15170: LD_VAR 0 3
15174: PUSH
15175: LD_INT 7
15177: EQUAL
15178: IFFALSE 15188
// sRadar := true ;
15180: LD_ADDR_EXP 70
15184: PUSH
15185: LD_INT 1
15187: ST_TO_ADDR
// if p3 = 8 then
15188: LD_VAR 0 3
15192: PUSH
15193: LD_INT 8
15195: EQUAL
15196: IFFALSE 15206
// sBunker := true ;
15198: LD_ADDR_EXP 71
15202: PUSH
15203: LD_INT 1
15205: ST_TO_ADDR
// if p3 = 9 then
15206: LD_VAR 0 3
15210: PUSH
15211: LD_INT 9
15213: EQUAL
15214: IFFALSE 15224
// sHack := true ;
15216: LD_ADDR_EXP 72
15220: PUSH
15221: LD_INT 1
15223: ST_TO_ADDR
// if p3 = 10 then
15224: LD_VAR 0 3
15228: PUSH
15229: LD_INT 10
15231: EQUAL
15232: IFFALSE 15242
// sFire := true ;
15234: LD_ADDR_EXP 73
15238: PUSH
15239: LD_INT 1
15241: ST_TO_ADDR
// if p3 = 11 then
15242: LD_VAR 0 3
15246: PUSH
15247: LD_INT 11
15249: EQUAL
15250: IFFALSE 15260
// sRefresh := true ;
15252: LD_ADDR_EXP 74
15256: PUSH
15257: LD_INT 1
15259: ST_TO_ADDR
// if p3 = 12 then
15260: LD_VAR 0 3
15264: PUSH
15265: LD_INT 12
15267: EQUAL
15268: IFFALSE 15278
// sExp := true ;
15270: LD_ADDR_EXP 75
15274: PUSH
15275: LD_INT 1
15277: ST_TO_ADDR
// if p3 = 13 then
15278: LD_VAR 0 3
15282: PUSH
15283: LD_INT 13
15285: EQUAL
15286: IFFALSE 15296
// sDepot := true ;
15288: LD_ADDR_EXP 76
15292: PUSH
15293: LD_INT 1
15295: ST_TO_ADDR
// if p3 = 14 then
15296: LD_VAR 0 3
15300: PUSH
15301: LD_INT 14
15303: EQUAL
15304: IFFALSE 15314
// sFlag := true ;
15306: LD_ADDR_EXP 77
15310: PUSH
15311: LD_INT 1
15313: ST_TO_ADDR
// if p3 = 15 then
15314: LD_VAR 0 3
15318: PUSH
15319: LD_INT 15
15321: EQUAL
15322: IFFALSE 15332
// sKamikadze := true ;
15324: LD_ADDR_EXP 85
15328: PUSH
15329: LD_INT 1
15331: ST_TO_ADDR
// if p3 = 16 then
15332: LD_VAR 0 3
15336: PUSH
15337: LD_INT 16
15339: EQUAL
15340: IFFALSE 15350
// sTroll := true ;
15342: LD_ADDR_EXP 86
15346: PUSH
15347: LD_INT 1
15349: ST_TO_ADDR
// if p3 = 17 then
15350: LD_VAR 0 3
15354: PUSH
15355: LD_INT 17
15357: EQUAL
15358: IFFALSE 15368
// sSlow := true ;
15360: LD_ADDR_EXP 87
15364: PUSH
15365: LD_INT 1
15367: ST_TO_ADDR
// if p3 = 18 then
15368: LD_VAR 0 3
15372: PUSH
15373: LD_INT 18
15375: EQUAL
15376: IFFALSE 15386
// sLack := true ;
15378: LD_ADDR_EXP 88
15382: PUSH
15383: LD_INT 1
15385: ST_TO_ADDR
// if p3 = 19 then
15386: LD_VAR 0 3
15390: PUSH
15391: LD_INT 19
15393: EQUAL
15394: IFFALSE 15404
// sTank := true ;
15396: LD_ADDR_EXP 90
15400: PUSH
15401: LD_INT 1
15403: ST_TO_ADDR
// if p3 = 20 then
15404: LD_VAR 0 3
15408: PUSH
15409: LD_INT 20
15411: EQUAL
15412: IFFALSE 15422
// sRemote := true ;
15414: LD_ADDR_EXP 91
15418: PUSH
15419: LD_INT 1
15421: ST_TO_ADDR
// if p3 = 21 then
15422: LD_VAR 0 3
15426: PUSH
15427: LD_INT 21
15429: EQUAL
15430: IFFALSE 15440
// sPowell := true ;
15432: LD_ADDR_EXP 92
15436: PUSH
15437: LD_INT 1
15439: ST_TO_ADDR
// if p3 = 22 then
15440: LD_VAR 0 3
15444: PUSH
15445: LD_INT 22
15447: EQUAL
15448: IFFALSE 15458
// sTeleport := true ;
15450: LD_ADDR_EXP 95
15454: PUSH
15455: LD_INT 1
15457: ST_TO_ADDR
// if p3 = 23 then
15458: LD_VAR 0 3
15462: PUSH
15463: LD_INT 23
15465: EQUAL
15466: IFFALSE 15476
// sOilTower := true ;
15468: LD_ADDR_EXP 97
15472: PUSH
15473: LD_INT 1
15475: ST_TO_ADDR
// if p3 = 24 then
15476: LD_VAR 0 3
15480: PUSH
15481: LD_INT 24
15483: EQUAL
15484: IFFALSE 15494
// sShovel := true ;
15486: LD_ADDR_EXP 98
15490: PUSH
15491: LD_INT 1
15493: ST_TO_ADDR
// if p3 = 25 then
15494: LD_VAR 0 3
15498: PUSH
15499: LD_INT 25
15501: EQUAL
15502: IFFALSE 15512
// sSheik := true ;
15504: LD_ADDR_EXP 99
15508: PUSH
15509: LD_INT 1
15511: ST_TO_ADDR
// if p3 = 26 then
15512: LD_VAR 0 3
15516: PUSH
15517: LD_INT 26
15519: EQUAL
15520: IFFALSE 15530
// sEarthquake := true ;
15522: LD_ADDR_EXP 101
15526: PUSH
15527: LD_INT 1
15529: ST_TO_ADDR
// if p3 = 27 then
15530: LD_VAR 0 3
15534: PUSH
15535: LD_INT 27
15537: EQUAL
15538: IFFALSE 15548
// sAI := true ;
15540: LD_ADDR_EXP 102
15544: PUSH
15545: LD_INT 1
15547: ST_TO_ADDR
// if p3 = 28 then
15548: LD_VAR 0 3
15552: PUSH
15553: LD_INT 28
15555: EQUAL
15556: IFFALSE 15566
// sCargo := true ;
15558: LD_ADDR_EXP 105
15562: PUSH
15563: LD_INT 1
15565: ST_TO_ADDR
// if p3 = 29 then
15566: LD_VAR 0 3
15570: PUSH
15571: LD_INT 29
15573: EQUAL
15574: IFFALSE 15584
// sDLaser := true ;
15576: LD_ADDR_EXP 106
15580: PUSH
15581: LD_INT 1
15583: ST_TO_ADDR
// if p3 = 30 then
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 30
15591: EQUAL
15592: IFFALSE 15602
// sExchange := true ;
15594: LD_ADDR_EXP 107
15598: PUSH
15599: LD_INT 1
15601: ST_TO_ADDR
// if p3 = 31 then
15602: LD_VAR 0 3
15606: PUSH
15607: LD_INT 31
15609: EQUAL
15610: IFFALSE 15620
// sFac := true ;
15612: LD_ADDR_EXP 108
15616: PUSH
15617: LD_INT 1
15619: ST_TO_ADDR
// if p3 = 32 then
15620: LD_VAR 0 3
15624: PUSH
15625: LD_INT 32
15627: EQUAL
15628: IFFALSE 15638
// sPower := true ;
15630: LD_ADDR_EXP 109
15634: PUSH
15635: LD_INT 1
15637: ST_TO_ADDR
// if p3 = 33 then
15638: LD_VAR 0 3
15642: PUSH
15643: LD_INT 33
15645: EQUAL
15646: IFFALSE 15656
// sRandom := true ;
15648: LD_ADDR_EXP 110
15652: PUSH
15653: LD_INT 1
15655: ST_TO_ADDR
// if p3 = 34 then
15656: LD_VAR 0 3
15660: PUSH
15661: LD_INT 34
15663: EQUAL
15664: IFFALSE 15674
// sShield := true ;
15666: LD_ADDR_EXP 111
15670: PUSH
15671: LD_INT 1
15673: ST_TO_ADDR
// if p3 = 35 then
15674: LD_VAR 0 3
15678: PUSH
15679: LD_INT 35
15681: EQUAL
15682: IFFALSE 15692
// sTime := true ;
15684: LD_ADDR_EXP 112
15688: PUSH
15689: LD_INT 1
15691: ST_TO_ADDR
// if p3 = 36 then
15692: LD_VAR 0 3
15696: PUSH
15697: LD_INT 36
15699: EQUAL
15700: IFFALSE 15710
// sTools := true ;
15702: LD_ADDR_EXP 113
15706: PUSH
15707: LD_INT 1
15709: ST_TO_ADDR
// if p3 = 101 then
15710: LD_VAR 0 3
15714: PUSH
15715: LD_INT 101
15717: EQUAL
15718: IFFALSE 15728
// sSold := true ;
15720: LD_ADDR_EXP 78
15724: PUSH
15725: LD_INT 1
15727: ST_TO_ADDR
// if p3 = 102 then
15728: LD_VAR 0 3
15732: PUSH
15733: LD_INT 102
15735: EQUAL
15736: IFFALSE 15746
// sDiff := true ;
15738: LD_ADDR_EXP 79
15742: PUSH
15743: LD_INT 1
15745: ST_TO_ADDR
// if p3 = 103 then
15746: LD_VAR 0 3
15750: PUSH
15751: LD_INT 103
15753: EQUAL
15754: IFFALSE 15764
// sFog := true ;
15756: LD_ADDR_EXP 82
15760: PUSH
15761: LD_INT 1
15763: ST_TO_ADDR
// if p3 = 104 then
15764: LD_VAR 0 3
15768: PUSH
15769: LD_INT 104
15771: EQUAL
15772: IFFALSE 15782
// sReset := true ;
15774: LD_ADDR_EXP 83
15778: PUSH
15779: LD_INT 1
15781: ST_TO_ADDR
// if p3 = 105 then
15782: LD_VAR 0 3
15786: PUSH
15787: LD_INT 105
15789: EQUAL
15790: IFFALSE 15800
// sSun := true ;
15792: LD_ADDR_EXP 84
15796: PUSH
15797: LD_INT 1
15799: ST_TO_ADDR
// if p3 = 106 then
15800: LD_VAR 0 3
15804: PUSH
15805: LD_INT 106
15807: EQUAL
15808: IFFALSE 15818
// sTiger := true ;
15810: LD_ADDR_EXP 80
15814: PUSH
15815: LD_INT 1
15817: ST_TO_ADDR
// if p3 = 107 then
15818: LD_VAR 0 3
15822: PUSH
15823: LD_INT 107
15825: EQUAL
15826: IFFALSE 15836
// sBomb := true ;
15828: LD_ADDR_EXP 81
15832: PUSH
15833: LD_INT 1
15835: ST_TO_ADDR
// if p3 = 108 then
15836: LD_VAR 0 3
15840: PUSH
15841: LD_INT 108
15843: EQUAL
15844: IFFALSE 15854
// sWound := true ;
15846: LD_ADDR_EXP 89
15850: PUSH
15851: LD_INT 1
15853: ST_TO_ADDR
// if p3 = 109 then
15854: LD_VAR 0 3
15858: PUSH
15859: LD_INT 109
15861: EQUAL
15862: IFFALSE 15872
// sBetray := true ;
15864: LD_ADDR_EXP 93
15868: PUSH
15869: LD_INT 1
15871: ST_TO_ADDR
// if p3 = 110 then
15872: LD_VAR 0 3
15876: PUSH
15877: LD_INT 110
15879: EQUAL
15880: IFFALSE 15890
// sContamin := true ;
15882: LD_ADDR_EXP 94
15886: PUSH
15887: LD_INT 1
15889: ST_TO_ADDR
// if p3 = 111 then
15890: LD_VAR 0 3
15894: PUSH
15895: LD_INT 111
15897: EQUAL
15898: IFFALSE 15908
// sOil := true ;
15900: LD_ADDR_EXP 96
15904: PUSH
15905: LD_INT 1
15907: ST_TO_ADDR
// if p3 = 112 then
15908: LD_VAR 0 3
15912: PUSH
15913: LD_INT 112
15915: EQUAL
15916: IFFALSE 15926
// sStu := true ;
15918: LD_ADDR_EXP 100
15922: PUSH
15923: LD_INT 1
15925: ST_TO_ADDR
// if p3 = 113 then
15926: LD_VAR 0 3
15930: PUSH
15931: LD_INT 113
15933: EQUAL
15934: IFFALSE 15944
// sBazooka := true ;
15936: LD_ADDR_EXP 103
15940: PUSH
15941: LD_INT 1
15943: ST_TO_ADDR
// if p3 = 114 then
15944: LD_VAR 0 3
15948: PUSH
15949: LD_INT 114
15951: EQUAL
15952: IFFALSE 15962
// sMortar := true ;
15954: LD_ADDR_EXP 104
15958: PUSH
15959: LD_INT 1
15961: ST_TO_ADDR
// if p3 = 115 then
15962: LD_VAR 0 3
15966: PUSH
15967: LD_INT 115
15969: EQUAL
15970: IFFALSE 15980
// sRanger := true ;
15972: LD_ADDR_EXP 114
15976: PUSH
15977: LD_INT 1
15979: ST_TO_ADDR
// if p3 = 116 then
15980: LD_VAR 0 3
15984: PUSH
15985: LD_INT 116
15987: EQUAL
15988: IFFALSE 15998
// sComputer := true ;
15990: LD_ADDR_EXP 115
15994: PUSH
15995: LD_INT 1
15997: ST_TO_ADDR
// if p3 = 117 then
15998: LD_VAR 0 3
16002: PUSH
16003: LD_INT 117
16005: EQUAL
16006: IFFALSE 16016
// s30 := true ;
16008: LD_ADDR_EXP 116
16012: PUSH
16013: LD_INT 1
16015: ST_TO_ADDR
// if p3 = 118 then
16016: LD_VAR 0 3
16020: PUSH
16021: LD_INT 118
16023: EQUAL
16024: IFFALSE 16034
// s60 := true ;
16026: LD_ADDR_EXP 117
16030: PUSH
16031: LD_INT 1
16033: ST_TO_ADDR
// end ; if p2 = hack_mode then
16034: LD_VAR 0 2
16038: PUSH
16039: LD_INT 101
16041: EQUAL
16042: IFFALSE 16170
// begin case p3 of 1 :
16044: LD_VAR 0 3
16048: PUSH
16049: LD_INT 1
16051: DOUBLE
16052: EQUAL
16053: IFTRUE 16057
16055: GO 16064
16057: POP
// hHackUnlimitedResources ; 2 :
16058: CALL 28317 0 0
16062: GO 16170
16064: LD_INT 2
16066: DOUBLE
16067: EQUAL
16068: IFTRUE 16072
16070: GO 16079
16072: POP
// hHackSetLevel10 ; 3 :
16073: CALL 28450 0 0
16077: GO 16170
16079: LD_INT 3
16081: DOUBLE
16082: EQUAL
16083: IFTRUE 16087
16085: GO 16094
16087: POP
// hHackSetLevel10YourUnits ; 4 :
16088: CALL 28535 0 0
16092: GO 16170
16094: LD_INT 4
16096: DOUBLE
16097: EQUAL
16098: IFTRUE 16102
16100: GO 16109
16102: POP
// hHackInvincible ; 5 :
16103: CALL 28983 0 0
16107: GO 16170
16109: LD_INT 5
16111: DOUBLE
16112: EQUAL
16113: IFTRUE 16117
16115: GO 16124
16117: POP
// hHackInvisible ; 6 :
16118: CALL 29094 0 0
16122: GO 16170
16124: LD_INT 6
16126: DOUBLE
16127: EQUAL
16128: IFTRUE 16132
16130: GO 16139
16132: POP
// hHackChangeYourSide ; 7 :
16133: CALL 29151 0 0
16137: GO 16170
16139: LD_INT 7
16141: DOUBLE
16142: EQUAL
16143: IFTRUE 16147
16145: GO 16154
16147: POP
// hHackChangeUnitSide ; 8 :
16148: CALL 29193 0 0
16152: GO 16170
16154: LD_INT 8
16156: DOUBLE
16157: EQUAL
16158: IFTRUE 16162
16160: GO 16169
16162: POP
// hHackFog ; end ;
16163: CALL 29294 0 0
16167: GO 16170
16169: POP
// end ; if p2 = game_save_mode then
16170: LD_VAR 0 2
16174: PUSH
16175: LD_INT 102
16177: EQUAL
16178: IFFALSE 16233
// begin if p3 = 1 then
16180: LD_VAR 0 3
16184: PUSH
16185: LD_INT 1
16187: EQUAL
16188: IFFALSE 16200
// globalGameSaveCounter := p4 ;
16190: LD_ADDR_EXP 60
16194: PUSH
16195: LD_VAR 0 4
16199: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
16200: LD_VAR 0 3
16204: PUSH
16205: LD_INT 2
16207: EQUAL
16208: PUSH
16209: LD_EXP 60
16213: AND
16214: IFFALSE 16233
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
16216: LD_STRING setGameSaveCounter(
16218: PUSH
16219: LD_EXP 60
16223: STR
16224: PUSH
16225: LD_STRING )
16227: STR
16228: PPUSH
16229: CALL_OW 559
// end ; end ;
16233: LD_VAR 0 7
16237: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
16238: LD_INT 0
16240: PPUSH
// streamModeActive := false ;
16241: LD_ADDR_EXP 61
16245: PUSH
16246: LD_INT 0
16248: ST_TO_ADDR
// normalCounter := 36 ;
16249: LD_ADDR_EXP 62
16253: PUSH
16254: LD_INT 36
16256: ST_TO_ADDR
// hardcoreCounter := 18 ;
16257: LD_ADDR_EXP 63
16261: PUSH
16262: LD_INT 18
16264: ST_TO_ADDR
// sRocket := false ;
16265: LD_ADDR_EXP 66
16269: PUSH
16270: LD_INT 0
16272: ST_TO_ADDR
// sSpeed := false ;
16273: LD_ADDR_EXP 65
16277: PUSH
16278: LD_INT 0
16280: ST_TO_ADDR
// sEngine := false ;
16281: LD_ADDR_EXP 67
16285: PUSH
16286: LD_INT 0
16288: ST_TO_ADDR
// sSpec := false ;
16289: LD_ADDR_EXP 64
16293: PUSH
16294: LD_INT 0
16296: ST_TO_ADDR
// sLevel := false ;
16297: LD_ADDR_EXP 68
16301: PUSH
16302: LD_INT 0
16304: ST_TO_ADDR
// sArmoury := false ;
16305: LD_ADDR_EXP 69
16309: PUSH
16310: LD_INT 0
16312: ST_TO_ADDR
// sRadar := false ;
16313: LD_ADDR_EXP 70
16317: PUSH
16318: LD_INT 0
16320: ST_TO_ADDR
// sBunker := false ;
16321: LD_ADDR_EXP 71
16325: PUSH
16326: LD_INT 0
16328: ST_TO_ADDR
// sHack := false ;
16329: LD_ADDR_EXP 72
16333: PUSH
16334: LD_INT 0
16336: ST_TO_ADDR
// sFire := false ;
16337: LD_ADDR_EXP 73
16341: PUSH
16342: LD_INT 0
16344: ST_TO_ADDR
// sRefresh := false ;
16345: LD_ADDR_EXP 74
16349: PUSH
16350: LD_INT 0
16352: ST_TO_ADDR
// sExp := false ;
16353: LD_ADDR_EXP 75
16357: PUSH
16358: LD_INT 0
16360: ST_TO_ADDR
// sDepot := false ;
16361: LD_ADDR_EXP 76
16365: PUSH
16366: LD_INT 0
16368: ST_TO_ADDR
// sFlag := false ;
16369: LD_ADDR_EXP 77
16373: PUSH
16374: LD_INT 0
16376: ST_TO_ADDR
// sKamikadze := false ;
16377: LD_ADDR_EXP 85
16381: PUSH
16382: LD_INT 0
16384: ST_TO_ADDR
// sTroll := false ;
16385: LD_ADDR_EXP 86
16389: PUSH
16390: LD_INT 0
16392: ST_TO_ADDR
// sSlow := false ;
16393: LD_ADDR_EXP 87
16397: PUSH
16398: LD_INT 0
16400: ST_TO_ADDR
// sLack := false ;
16401: LD_ADDR_EXP 88
16405: PUSH
16406: LD_INT 0
16408: ST_TO_ADDR
// sTank := false ;
16409: LD_ADDR_EXP 90
16413: PUSH
16414: LD_INT 0
16416: ST_TO_ADDR
// sRemote := false ;
16417: LD_ADDR_EXP 91
16421: PUSH
16422: LD_INT 0
16424: ST_TO_ADDR
// sPowell := false ;
16425: LD_ADDR_EXP 92
16429: PUSH
16430: LD_INT 0
16432: ST_TO_ADDR
// sTeleport := false ;
16433: LD_ADDR_EXP 95
16437: PUSH
16438: LD_INT 0
16440: ST_TO_ADDR
// sOilTower := false ;
16441: LD_ADDR_EXP 97
16445: PUSH
16446: LD_INT 0
16448: ST_TO_ADDR
// sShovel := false ;
16449: LD_ADDR_EXP 98
16453: PUSH
16454: LD_INT 0
16456: ST_TO_ADDR
// sSheik := false ;
16457: LD_ADDR_EXP 99
16461: PUSH
16462: LD_INT 0
16464: ST_TO_ADDR
// sEarthquake := false ;
16465: LD_ADDR_EXP 101
16469: PUSH
16470: LD_INT 0
16472: ST_TO_ADDR
// sAI := false ;
16473: LD_ADDR_EXP 102
16477: PUSH
16478: LD_INT 0
16480: ST_TO_ADDR
// sCargo := false ;
16481: LD_ADDR_EXP 105
16485: PUSH
16486: LD_INT 0
16488: ST_TO_ADDR
// sDLaser := false ;
16489: LD_ADDR_EXP 106
16493: PUSH
16494: LD_INT 0
16496: ST_TO_ADDR
// sExchange := false ;
16497: LD_ADDR_EXP 107
16501: PUSH
16502: LD_INT 0
16504: ST_TO_ADDR
// sFac := false ;
16505: LD_ADDR_EXP 108
16509: PUSH
16510: LD_INT 0
16512: ST_TO_ADDR
// sPower := false ;
16513: LD_ADDR_EXP 109
16517: PUSH
16518: LD_INT 0
16520: ST_TO_ADDR
// sRandom := false ;
16521: LD_ADDR_EXP 110
16525: PUSH
16526: LD_INT 0
16528: ST_TO_ADDR
// sShield := false ;
16529: LD_ADDR_EXP 111
16533: PUSH
16534: LD_INT 0
16536: ST_TO_ADDR
// sTime := false ;
16537: LD_ADDR_EXP 112
16541: PUSH
16542: LD_INT 0
16544: ST_TO_ADDR
// sTools := false ;
16545: LD_ADDR_EXP 113
16549: PUSH
16550: LD_INT 0
16552: ST_TO_ADDR
// sSold := false ;
16553: LD_ADDR_EXP 78
16557: PUSH
16558: LD_INT 0
16560: ST_TO_ADDR
// sDiff := false ;
16561: LD_ADDR_EXP 79
16565: PUSH
16566: LD_INT 0
16568: ST_TO_ADDR
// sFog := false ;
16569: LD_ADDR_EXP 82
16573: PUSH
16574: LD_INT 0
16576: ST_TO_ADDR
// sReset := false ;
16577: LD_ADDR_EXP 83
16581: PUSH
16582: LD_INT 0
16584: ST_TO_ADDR
// sSun := false ;
16585: LD_ADDR_EXP 84
16589: PUSH
16590: LD_INT 0
16592: ST_TO_ADDR
// sTiger := false ;
16593: LD_ADDR_EXP 80
16597: PUSH
16598: LD_INT 0
16600: ST_TO_ADDR
// sBomb := false ;
16601: LD_ADDR_EXP 81
16605: PUSH
16606: LD_INT 0
16608: ST_TO_ADDR
// sWound := false ;
16609: LD_ADDR_EXP 89
16613: PUSH
16614: LD_INT 0
16616: ST_TO_ADDR
// sBetray := false ;
16617: LD_ADDR_EXP 93
16621: PUSH
16622: LD_INT 0
16624: ST_TO_ADDR
// sContamin := false ;
16625: LD_ADDR_EXP 94
16629: PUSH
16630: LD_INT 0
16632: ST_TO_ADDR
// sOil := false ;
16633: LD_ADDR_EXP 96
16637: PUSH
16638: LD_INT 0
16640: ST_TO_ADDR
// sStu := false ;
16641: LD_ADDR_EXP 100
16645: PUSH
16646: LD_INT 0
16648: ST_TO_ADDR
// sBazooka := false ;
16649: LD_ADDR_EXP 103
16653: PUSH
16654: LD_INT 0
16656: ST_TO_ADDR
// sMortar := false ;
16657: LD_ADDR_EXP 104
16661: PUSH
16662: LD_INT 0
16664: ST_TO_ADDR
// sRanger := false ;
16665: LD_ADDR_EXP 114
16669: PUSH
16670: LD_INT 0
16672: ST_TO_ADDR
// sComputer := false ;
16673: LD_ADDR_EXP 115
16677: PUSH
16678: LD_INT 0
16680: ST_TO_ADDR
// s30 := false ;
16681: LD_ADDR_EXP 116
16685: PUSH
16686: LD_INT 0
16688: ST_TO_ADDR
// s60 := false ;
16689: LD_ADDR_EXP 117
16693: PUSH
16694: LD_INT 0
16696: ST_TO_ADDR
// end ;
16697: LD_VAR 0 1
16701: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
16702: LD_INT 0
16704: PPUSH
16705: PPUSH
16706: PPUSH
16707: PPUSH
16708: PPUSH
16709: PPUSH
16710: PPUSH
// result := [ ] ;
16711: LD_ADDR_VAR 0 2
16715: PUSH
16716: EMPTY
16717: ST_TO_ADDR
// if campaign_id = 1 then
16718: LD_OWVAR 69
16722: PUSH
16723: LD_INT 1
16725: EQUAL
16726: IFFALSE 19892
// begin case mission_number of 1 :
16728: LD_OWVAR 70
16732: PUSH
16733: LD_INT 1
16735: DOUBLE
16736: EQUAL
16737: IFTRUE 16741
16739: GO 16817
16741: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
16742: LD_ADDR_VAR 0 2
16746: PUSH
16747: LD_INT 2
16749: PUSH
16750: LD_INT 4
16752: PUSH
16753: LD_INT 11
16755: PUSH
16756: LD_INT 12
16758: PUSH
16759: LD_INT 15
16761: PUSH
16762: LD_INT 16
16764: PUSH
16765: LD_INT 22
16767: PUSH
16768: LD_INT 23
16770: PUSH
16771: LD_INT 26
16773: PUSH
16774: EMPTY
16775: LIST
16776: LIST
16777: LIST
16778: LIST
16779: LIST
16780: LIST
16781: LIST
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 101
16787: PUSH
16788: LD_INT 102
16790: PUSH
16791: LD_INT 106
16793: PUSH
16794: LD_INT 116
16796: PUSH
16797: LD_INT 117
16799: PUSH
16800: LD_INT 118
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: LIST
16807: LIST
16808: LIST
16809: LIST
16810: PUSH
16811: EMPTY
16812: LIST
16813: LIST
16814: ST_TO_ADDR
16815: GO 19890
16817: LD_INT 2
16819: DOUBLE
16820: EQUAL
16821: IFTRUE 16825
16823: GO 16909
16825: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
16826: LD_ADDR_VAR 0 2
16830: PUSH
16831: LD_INT 2
16833: PUSH
16834: LD_INT 4
16836: PUSH
16837: LD_INT 11
16839: PUSH
16840: LD_INT 12
16842: PUSH
16843: LD_INT 15
16845: PUSH
16846: LD_INT 16
16848: PUSH
16849: LD_INT 22
16851: PUSH
16852: LD_INT 23
16854: PUSH
16855: LD_INT 26
16857: PUSH
16858: EMPTY
16859: LIST
16860: LIST
16861: LIST
16862: LIST
16863: LIST
16864: LIST
16865: LIST
16866: LIST
16867: LIST
16868: PUSH
16869: LD_INT 101
16871: PUSH
16872: LD_INT 102
16874: PUSH
16875: LD_INT 105
16877: PUSH
16878: LD_INT 106
16880: PUSH
16881: LD_INT 108
16883: PUSH
16884: LD_INT 116
16886: PUSH
16887: LD_INT 117
16889: PUSH
16890: LD_INT 118
16892: PUSH
16893: EMPTY
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: PUSH
16903: EMPTY
16904: LIST
16905: LIST
16906: ST_TO_ADDR
16907: GO 19890
16909: LD_INT 3
16911: DOUBLE
16912: EQUAL
16913: IFTRUE 16917
16915: GO 17005
16917: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
16918: LD_ADDR_VAR 0 2
16922: PUSH
16923: LD_INT 2
16925: PUSH
16926: LD_INT 4
16928: PUSH
16929: LD_INT 5
16931: PUSH
16932: LD_INT 11
16934: PUSH
16935: LD_INT 12
16937: PUSH
16938: LD_INT 15
16940: PUSH
16941: LD_INT 16
16943: PUSH
16944: LD_INT 22
16946: PUSH
16947: LD_INT 26
16949: PUSH
16950: LD_INT 36
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: LIST
16962: LIST
16963: LIST
16964: PUSH
16965: LD_INT 101
16967: PUSH
16968: LD_INT 102
16970: PUSH
16971: LD_INT 105
16973: PUSH
16974: LD_INT 106
16976: PUSH
16977: LD_INT 108
16979: PUSH
16980: LD_INT 116
16982: PUSH
16983: LD_INT 117
16985: PUSH
16986: LD_INT 118
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: LIST
16995: LIST
16996: LIST
16997: LIST
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: ST_TO_ADDR
17003: GO 19890
17005: LD_INT 4
17007: DOUBLE
17008: EQUAL
17009: IFTRUE 17013
17011: GO 17109
17013: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
17014: LD_ADDR_VAR 0 2
17018: PUSH
17019: LD_INT 2
17021: PUSH
17022: LD_INT 4
17024: PUSH
17025: LD_INT 5
17027: PUSH
17028: LD_INT 8
17030: PUSH
17031: LD_INT 11
17033: PUSH
17034: LD_INT 12
17036: PUSH
17037: LD_INT 15
17039: PUSH
17040: LD_INT 16
17042: PUSH
17043: LD_INT 22
17045: PUSH
17046: LD_INT 23
17048: PUSH
17049: LD_INT 26
17051: PUSH
17052: LD_INT 36
17054: PUSH
17055: EMPTY
17056: LIST
17057: LIST
17058: LIST
17059: LIST
17060: LIST
17061: LIST
17062: LIST
17063: LIST
17064: LIST
17065: LIST
17066: LIST
17067: LIST
17068: PUSH
17069: LD_INT 101
17071: PUSH
17072: LD_INT 102
17074: PUSH
17075: LD_INT 105
17077: PUSH
17078: LD_INT 106
17080: PUSH
17081: LD_INT 108
17083: PUSH
17084: LD_INT 116
17086: PUSH
17087: LD_INT 117
17089: PUSH
17090: LD_INT 118
17092: PUSH
17093: EMPTY
17094: LIST
17095: LIST
17096: LIST
17097: LIST
17098: LIST
17099: LIST
17100: LIST
17101: LIST
17102: PUSH
17103: EMPTY
17104: LIST
17105: LIST
17106: ST_TO_ADDR
17107: GO 19890
17109: LD_INT 5
17111: DOUBLE
17112: EQUAL
17113: IFTRUE 17117
17115: GO 17229
17117: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
17118: LD_ADDR_VAR 0 2
17122: PUSH
17123: LD_INT 2
17125: PUSH
17126: LD_INT 4
17128: PUSH
17129: LD_INT 5
17131: PUSH
17132: LD_INT 6
17134: PUSH
17135: LD_INT 8
17137: PUSH
17138: LD_INT 11
17140: PUSH
17141: LD_INT 12
17143: PUSH
17144: LD_INT 15
17146: PUSH
17147: LD_INT 16
17149: PUSH
17150: LD_INT 22
17152: PUSH
17153: LD_INT 23
17155: PUSH
17156: LD_INT 25
17158: PUSH
17159: LD_INT 26
17161: PUSH
17162: LD_INT 36
17164: PUSH
17165: EMPTY
17166: LIST
17167: LIST
17168: LIST
17169: LIST
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: LIST
17178: LIST
17179: LIST
17180: PUSH
17181: LD_INT 101
17183: PUSH
17184: LD_INT 102
17186: PUSH
17187: LD_INT 105
17189: PUSH
17190: LD_INT 106
17192: PUSH
17193: LD_INT 108
17195: PUSH
17196: LD_INT 109
17198: PUSH
17199: LD_INT 112
17201: PUSH
17202: LD_INT 116
17204: PUSH
17205: LD_INT 117
17207: PUSH
17208: LD_INT 118
17210: PUSH
17211: EMPTY
17212: LIST
17213: LIST
17214: LIST
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: ST_TO_ADDR
17227: GO 19890
17229: LD_INT 6
17231: DOUBLE
17232: EQUAL
17233: IFTRUE 17237
17235: GO 17369
17237: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
17238: LD_ADDR_VAR 0 2
17242: PUSH
17243: LD_INT 2
17245: PUSH
17246: LD_INT 4
17248: PUSH
17249: LD_INT 5
17251: PUSH
17252: LD_INT 6
17254: PUSH
17255: LD_INT 8
17257: PUSH
17258: LD_INT 11
17260: PUSH
17261: LD_INT 12
17263: PUSH
17264: LD_INT 15
17266: PUSH
17267: LD_INT 16
17269: PUSH
17270: LD_INT 20
17272: PUSH
17273: LD_INT 21
17275: PUSH
17276: LD_INT 22
17278: PUSH
17279: LD_INT 23
17281: PUSH
17282: LD_INT 25
17284: PUSH
17285: LD_INT 26
17287: PUSH
17288: LD_INT 30
17290: PUSH
17291: LD_INT 31
17293: PUSH
17294: LD_INT 32
17296: PUSH
17297: LD_INT 36
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: LIST
17304: LIST
17305: LIST
17306: LIST
17307: LIST
17308: LIST
17309: LIST
17310: LIST
17311: LIST
17312: LIST
17313: LIST
17314: LIST
17315: LIST
17316: LIST
17317: LIST
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 101
17323: PUSH
17324: LD_INT 102
17326: PUSH
17327: LD_INT 105
17329: PUSH
17330: LD_INT 106
17332: PUSH
17333: LD_INT 108
17335: PUSH
17336: LD_INT 109
17338: PUSH
17339: LD_INT 112
17341: PUSH
17342: LD_INT 116
17344: PUSH
17345: LD_INT 117
17347: PUSH
17348: LD_INT 118
17350: PUSH
17351: EMPTY
17352: LIST
17353: LIST
17354: LIST
17355: LIST
17356: LIST
17357: LIST
17358: LIST
17359: LIST
17360: LIST
17361: LIST
17362: PUSH
17363: EMPTY
17364: LIST
17365: LIST
17366: ST_TO_ADDR
17367: GO 19890
17369: LD_INT 7
17371: DOUBLE
17372: EQUAL
17373: IFTRUE 17377
17375: GO 17489
17377: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
17378: LD_ADDR_VAR 0 2
17382: PUSH
17383: LD_INT 2
17385: PUSH
17386: LD_INT 4
17388: PUSH
17389: LD_INT 5
17391: PUSH
17392: LD_INT 7
17394: PUSH
17395: LD_INT 11
17397: PUSH
17398: LD_INT 12
17400: PUSH
17401: LD_INT 15
17403: PUSH
17404: LD_INT 16
17406: PUSH
17407: LD_INT 20
17409: PUSH
17410: LD_INT 21
17412: PUSH
17413: LD_INT 22
17415: PUSH
17416: LD_INT 23
17418: PUSH
17419: LD_INT 25
17421: PUSH
17422: LD_INT 26
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: LIST
17429: LIST
17430: LIST
17431: LIST
17432: LIST
17433: LIST
17434: LIST
17435: LIST
17436: LIST
17437: LIST
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 101
17443: PUSH
17444: LD_INT 102
17446: PUSH
17447: LD_INT 103
17449: PUSH
17450: LD_INT 105
17452: PUSH
17453: LD_INT 106
17455: PUSH
17456: LD_INT 108
17458: PUSH
17459: LD_INT 112
17461: PUSH
17462: LD_INT 116
17464: PUSH
17465: LD_INT 117
17467: PUSH
17468: LD_INT 118
17470: PUSH
17471: EMPTY
17472: LIST
17473: LIST
17474: LIST
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: LIST
17480: LIST
17481: LIST
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: ST_TO_ADDR
17487: GO 19890
17489: LD_INT 8
17491: DOUBLE
17492: EQUAL
17493: IFTRUE 17497
17495: GO 17637
17497: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
17498: LD_ADDR_VAR 0 2
17502: PUSH
17503: LD_INT 2
17505: PUSH
17506: LD_INT 4
17508: PUSH
17509: LD_INT 5
17511: PUSH
17512: LD_INT 6
17514: PUSH
17515: LD_INT 7
17517: PUSH
17518: LD_INT 8
17520: PUSH
17521: LD_INT 11
17523: PUSH
17524: LD_INT 12
17526: PUSH
17527: LD_INT 15
17529: PUSH
17530: LD_INT 16
17532: PUSH
17533: LD_INT 20
17535: PUSH
17536: LD_INT 21
17538: PUSH
17539: LD_INT 22
17541: PUSH
17542: LD_INT 23
17544: PUSH
17545: LD_INT 25
17547: PUSH
17548: LD_INT 26
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: LD_INT 31
17556: PUSH
17557: LD_INT 32
17559: PUSH
17560: LD_INT 36
17562: PUSH
17563: EMPTY
17564: LIST
17565: LIST
17566: LIST
17567: LIST
17568: LIST
17569: LIST
17570: LIST
17571: LIST
17572: LIST
17573: LIST
17574: LIST
17575: LIST
17576: LIST
17577: LIST
17578: LIST
17579: LIST
17580: LIST
17581: LIST
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 101
17587: PUSH
17588: LD_INT 102
17590: PUSH
17591: LD_INT 103
17593: PUSH
17594: LD_INT 105
17596: PUSH
17597: LD_INT 106
17599: PUSH
17600: LD_INT 108
17602: PUSH
17603: LD_INT 109
17605: PUSH
17606: LD_INT 112
17608: PUSH
17609: LD_INT 116
17611: PUSH
17612: LD_INT 117
17614: PUSH
17615: LD_INT 118
17617: PUSH
17618: EMPTY
17619: LIST
17620: LIST
17621: LIST
17622: LIST
17623: LIST
17624: LIST
17625: LIST
17626: LIST
17627: LIST
17628: LIST
17629: LIST
17630: PUSH
17631: EMPTY
17632: LIST
17633: LIST
17634: ST_TO_ADDR
17635: GO 19890
17637: LD_INT 9
17639: DOUBLE
17640: EQUAL
17641: IFTRUE 17645
17643: GO 17793
17645: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
17646: LD_ADDR_VAR 0 2
17650: PUSH
17651: LD_INT 2
17653: PUSH
17654: LD_INT 4
17656: PUSH
17657: LD_INT 5
17659: PUSH
17660: LD_INT 6
17662: PUSH
17663: LD_INT 7
17665: PUSH
17666: LD_INT 8
17668: PUSH
17669: LD_INT 11
17671: PUSH
17672: LD_INT 12
17674: PUSH
17675: LD_INT 15
17677: PUSH
17678: LD_INT 16
17680: PUSH
17681: LD_INT 20
17683: PUSH
17684: LD_INT 21
17686: PUSH
17687: LD_INT 22
17689: PUSH
17690: LD_INT 23
17692: PUSH
17693: LD_INT 25
17695: PUSH
17696: LD_INT 26
17698: PUSH
17699: LD_INT 28
17701: PUSH
17702: LD_INT 30
17704: PUSH
17705: LD_INT 31
17707: PUSH
17708: LD_INT 32
17710: PUSH
17711: LD_INT 36
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: LIST
17718: LIST
17719: LIST
17720: LIST
17721: LIST
17722: LIST
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: LIST
17729: LIST
17730: LIST
17731: LIST
17732: LIST
17733: LIST
17734: LIST
17735: LIST
17736: PUSH
17737: LD_INT 101
17739: PUSH
17740: LD_INT 102
17742: PUSH
17743: LD_INT 103
17745: PUSH
17746: LD_INT 105
17748: PUSH
17749: LD_INT 106
17751: PUSH
17752: LD_INT 108
17754: PUSH
17755: LD_INT 109
17757: PUSH
17758: LD_INT 112
17760: PUSH
17761: LD_INT 114
17763: PUSH
17764: LD_INT 116
17766: PUSH
17767: LD_INT 117
17769: PUSH
17770: LD_INT 118
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: LIST
17777: LIST
17778: LIST
17779: LIST
17780: LIST
17781: LIST
17782: LIST
17783: LIST
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: ST_TO_ADDR
17791: GO 19890
17793: LD_INT 10
17795: DOUBLE
17796: EQUAL
17797: IFTRUE 17801
17799: GO 17997
17801: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
17802: LD_ADDR_VAR 0 2
17806: PUSH
17807: LD_INT 2
17809: PUSH
17810: LD_INT 4
17812: PUSH
17813: LD_INT 5
17815: PUSH
17816: LD_INT 6
17818: PUSH
17819: LD_INT 7
17821: PUSH
17822: LD_INT 8
17824: PUSH
17825: LD_INT 9
17827: PUSH
17828: LD_INT 10
17830: PUSH
17831: LD_INT 11
17833: PUSH
17834: LD_INT 12
17836: PUSH
17837: LD_INT 13
17839: PUSH
17840: LD_INT 14
17842: PUSH
17843: LD_INT 15
17845: PUSH
17846: LD_INT 16
17848: PUSH
17849: LD_INT 17
17851: PUSH
17852: LD_INT 18
17854: PUSH
17855: LD_INT 19
17857: PUSH
17858: LD_INT 20
17860: PUSH
17861: LD_INT 21
17863: PUSH
17864: LD_INT 22
17866: PUSH
17867: LD_INT 23
17869: PUSH
17870: LD_INT 24
17872: PUSH
17873: LD_INT 25
17875: PUSH
17876: LD_INT 26
17878: PUSH
17879: LD_INT 28
17881: PUSH
17882: LD_INT 30
17884: PUSH
17885: LD_INT 31
17887: PUSH
17888: LD_INT 32
17890: PUSH
17891: LD_INT 36
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: LIST
17902: LIST
17903: LIST
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: LIST
17909: LIST
17910: LIST
17911: LIST
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: LIST
17920: LIST
17921: LIST
17922: LIST
17923: LIST
17924: PUSH
17925: LD_INT 101
17927: PUSH
17928: LD_INT 102
17930: PUSH
17931: LD_INT 103
17933: PUSH
17934: LD_INT 104
17936: PUSH
17937: LD_INT 105
17939: PUSH
17940: LD_INT 106
17942: PUSH
17943: LD_INT 107
17945: PUSH
17946: LD_INT 108
17948: PUSH
17949: LD_INT 109
17951: PUSH
17952: LD_INT 110
17954: PUSH
17955: LD_INT 111
17957: PUSH
17958: LD_INT 112
17960: PUSH
17961: LD_INT 114
17963: PUSH
17964: LD_INT 116
17966: PUSH
17967: LD_INT 117
17969: PUSH
17970: LD_INT 118
17972: PUSH
17973: EMPTY
17974: LIST
17975: LIST
17976: LIST
17977: LIST
17978: LIST
17979: LIST
17980: LIST
17981: LIST
17982: LIST
17983: LIST
17984: LIST
17985: LIST
17986: LIST
17987: LIST
17988: LIST
17989: LIST
17990: PUSH
17991: EMPTY
17992: LIST
17993: LIST
17994: ST_TO_ADDR
17995: GO 19890
17997: LD_INT 11
17999: DOUBLE
18000: EQUAL
18001: IFTRUE 18005
18003: GO 18209
18005: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
18006: LD_ADDR_VAR 0 2
18010: PUSH
18011: LD_INT 2
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: LD_INT 4
18019: PUSH
18020: LD_INT 5
18022: PUSH
18023: LD_INT 6
18025: PUSH
18026: LD_INT 7
18028: PUSH
18029: LD_INT 8
18031: PUSH
18032: LD_INT 9
18034: PUSH
18035: LD_INT 10
18037: PUSH
18038: LD_INT 11
18040: PUSH
18041: LD_INT 12
18043: PUSH
18044: LD_INT 13
18046: PUSH
18047: LD_INT 14
18049: PUSH
18050: LD_INT 15
18052: PUSH
18053: LD_INT 16
18055: PUSH
18056: LD_INT 17
18058: PUSH
18059: LD_INT 18
18061: PUSH
18062: LD_INT 19
18064: PUSH
18065: LD_INT 20
18067: PUSH
18068: LD_INT 21
18070: PUSH
18071: LD_INT 22
18073: PUSH
18074: LD_INT 23
18076: PUSH
18077: LD_INT 24
18079: PUSH
18080: LD_INT 25
18082: PUSH
18083: LD_INT 26
18085: PUSH
18086: LD_INT 28
18088: PUSH
18089: LD_INT 30
18091: PUSH
18092: LD_INT 31
18094: PUSH
18095: LD_INT 32
18097: PUSH
18098: LD_INT 34
18100: PUSH
18101: LD_INT 36
18103: PUSH
18104: EMPTY
18105: LIST
18106: LIST
18107: LIST
18108: LIST
18109: LIST
18110: LIST
18111: LIST
18112: LIST
18113: LIST
18114: LIST
18115: LIST
18116: LIST
18117: LIST
18118: LIST
18119: LIST
18120: LIST
18121: LIST
18122: LIST
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: LIST
18128: LIST
18129: LIST
18130: LIST
18131: LIST
18132: LIST
18133: LIST
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 101
18139: PUSH
18140: LD_INT 102
18142: PUSH
18143: LD_INT 103
18145: PUSH
18146: LD_INT 104
18148: PUSH
18149: LD_INT 105
18151: PUSH
18152: LD_INT 106
18154: PUSH
18155: LD_INT 107
18157: PUSH
18158: LD_INT 108
18160: PUSH
18161: LD_INT 109
18163: PUSH
18164: LD_INT 110
18166: PUSH
18167: LD_INT 111
18169: PUSH
18170: LD_INT 112
18172: PUSH
18173: LD_INT 114
18175: PUSH
18176: LD_INT 116
18178: PUSH
18179: LD_INT 117
18181: PUSH
18182: LD_INT 118
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: LIST
18189: LIST
18190: LIST
18191: LIST
18192: LIST
18193: LIST
18194: LIST
18195: LIST
18196: LIST
18197: LIST
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: ST_TO_ADDR
18207: GO 19890
18209: LD_INT 12
18211: DOUBLE
18212: EQUAL
18213: IFTRUE 18217
18215: GO 18437
18217: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
18218: LD_ADDR_VAR 0 2
18222: PUSH
18223: LD_INT 1
18225: PUSH
18226: LD_INT 2
18228: PUSH
18229: LD_INT 3
18231: PUSH
18232: LD_INT 4
18234: PUSH
18235: LD_INT 5
18237: PUSH
18238: LD_INT 6
18240: PUSH
18241: LD_INT 7
18243: PUSH
18244: LD_INT 8
18246: PUSH
18247: LD_INT 9
18249: PUSH
18250: LD_INT 10
18252: PUSH
18253: LD_INT 11
18255: PUSH
18256: LD_INT 12
18258: PUSH
18259: LD_INT 13
18261: PUSH
18262: LD_INT 14
18264: PUSH
18265: LD_INT 15
18267: PUSH
18268: LD_INT 16
18270: PUSH
18271: LD_INT 17
18273: PUSH
18274: LD_INT 18
18276: PUSH
18277: LD_INT 19
18279: PUSH
18280: LD_INT 20
18282: PUSH
18283: LD_INT 21
18285: PUSH
18286: LD_INT 22
18288: PUSH
18289: LD_INT 23
18291: PUSH
18292: LD_INT 24
18294: PUSH
18295: LD_INT 25
18297: PUSH
18298: LD_INT 26
18300: PUSH
18301: LD_INT 27
18303: PUSH
18304: LD_INT 28
18306: PUSH
18307: LD_INT 30
18309: PUSH
18310: LD_INT 31
18312: PUSH
18313: LD_INT 32
18315: PUSH
18316: LD_INT 33
18318: PUSH
18319: LD_INT 34
18321: PUSH
18322: LD_INT 36
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: LIST
18329: LIST
18330: LIST
18331: LIST
18332: LIST
18333: LIST
18334: LIST
18335: LIST
18336: LIST
18337: LIST
18338: LIST
18339: LIST
18340: LIST
18341: LIST
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: LIST
18347: LIST
18348: LIST
18349: LIST
18350: LIST
18351: LIST
18352: LIST
18353: LIST
18354: LIST
18355: LIST
18356: LIST
18357: LIST
18358: LIST
18359: LIST
18360: PUSH
18361: LD_INT 101
18363: PUSH
18364: LD_INT 102
18366: PUSH
18367: LD_INT 103
18369: PUSH
18370: LD_INT 104
18372: PUSH
18373: LD_INT 105
18375: PUSH
18376: LD_INT 106
18378: PUSH
18379: LD_INT 107
18381: PUSH
18382: LD_INT 108
18384: PUSH
18385: LD_INT 109
18387: PUSH
18388: LD_INT 110
18390: PUSH
18391: LD_INT 111
18393: PUSH
18394: LD_INT 112
18396: PUSH
18397: LD_INT 113
18399: PUSH
18400: LD_INT 114
18402: PUSH
18403: LD_INT 116
18405: PUSH
18406: LD_INT 117
18408: PUSH
18409: LD_INT 118
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: LIST
18418: LIST
18419: LIST
18420: LIST
18421: LIST
18422: LIST
18423: LIST
18424: LIST
18425: LIST
18426: LIST
18427: LIST
18428: LIST
18429: LIST
18430: PUSH
18431: EMPTY
18432: LIST
18433: LIST
18434: ST_TO_ADDR
18435: GO 19890
18437: LD_INT 13
18439: DOUBLE
18440: EQUAL
18441: IFTRUE 18445
18443: GO 18653
18445: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: LD_INT 1
18453: PUSH
18454: LD_INT 2
18456: PUSH
18457: LD_INT 3
18459: PUSH
18460: LD_INT 4
18462: PUSH
18463: LD_INT 5
18465: PUSH
18466: LD_INT 8
18468: PUSH
18469: LD_INT 9
18471: PUSH
18472: LD_INT 10
18474: PUSH
18475: LD_INT 11
18477: PUSH
18478: LD_INT 12
18480: PUSH
18481: LD_INT 14
18483: PUSH
18484: LD_INT 15
18486: PUSH
18487: LD_INT 16
18489: PUSH
18490: LD_INT 17
18492: PUSH
18493: LD_INT 18
18495: PUSH
18496: LD_INT 19
18498: PUSH
18499: LD_INT 20
18501: PUSH
18502: LD_INT 21
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_INT 23
18510: PUSH
18511: LD_INT 24
18513: PUSH
18514: LD_INT 25
18516: PUSH
18517: LD_INT 26
18519: PUSH
18520: LD_INT 27
18522: PUSH
18523: LD_INT 28
18525: PUSH
18526: LD_INT 30
18528: PUSH
18529: LD_INT 31
18531: PUSH
18532: LD_INT 32
18534: PUSH
18535: LD_INT 33
18537: PUSH
18538: LD_INT 34
18540: PUSH
18541: LD_INT 36
18543: PUSH
18544: EMPTY
18545: LIST
18546: LIST
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: LIST
18552: LIST
18553: LIST
18554: LIST
18555: LIST
18556: LIST
18557: LIST
18558: LIST
18559: LIST
18560: LIST
18561: LIST
18562: LIST
18563: LIST
18564: LIST
18565: LIST
18566: LIST
18567: LIST
18568: LIST
18569: LIST
18570: LIST
18571: LIST
18572: LIST
18573: LIST
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 101
18579: PUSH
18580: LD_INT 102
18582: PUSH
18583: LD_INT 103
18585: PUSH
18586: LD_INT 104
18588: PUSH
18589: LD_INT 105
18591: PUSH
18592: LD_INT 106
18594: PUSH
18595: LD_INT 107
18597: PUSH
18598: LD_INT 108
18600: PUSH
18601: LD_INT 109
18603: PUSH
18604: LD_INT 110
18606: PUSH
18607: LD_INT 111
18609: PUSH
18610: LD_INT 112
18612: PUSH
18613: LD_INT 113
18615: PUSH
18616: LD_INT 114
18618: PUSH
18619: LD_INT 116
18621: PUSH
18622: LD_INT 117
18624: PUSH
18625: LD_INT 118
18627: PUSH
18628: EMPTY
18629: LIST
18630: LIST
18631: LIST
18632: LIST
18633: LIST
18634: LIST
18635: LIST
18636: LIST
18637: LIST
18638: LIST
18639: LIST
18640: LIST
18641: LIST
18642: LIST
18643: LIST
18644: LIST
18645: LIST
18646: PUSH
18647: EMPTY
18648: LIST
18649: LIST
18650: ST_TO_ADDR
18651: GO 19890
18653: LD_INT 14
18655: DOUBLE
18656: EQUAL
18657: IFTRUE 18661
18659: GO 18885
18661: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
18662: LD_ADDR_VAR 0 2
18666: PUSH
18667: LD_INT 1
18669: PUSH
18670: LD_INT 2
18672: PUSH
18673: LD_INT 3
18675: PUSH
18676: LD_INT 4
18678: PUSH
18679: LD_INT 5
18681: PUSH
18682: LD_INT 6
18684: PUSH
18685: LD_INT 7
18687: PUSH
18688: LD_INT 8
18690: PUSH
18691: LD_INT 9
18693: PUSH
18694: LD_INT 10
18696: PUSH
18697: LD_INT 11
18699: PUSH
18700: LD_INT 12
18702: PUSH
18703: LD_INT 13
18705: PUSH
18706: LD_INT 14
18708: PUSH
18709: LD_INT 15
18711: PUSH
18712: LD_INT 16
18714: PUSH
18715: LD_INT 17
18717: PUSH
18718: LD_INT 18
18720: PUSH
18721: LD_INT 19
18723: PUSH
18724: LD_INT 20
18726: PUSH
18727: LD_INT 21
18729: PUSH
18730: LD_INT 22
18732: PUSH
18733: LD_INT 23
18735: PUSH
18736: LD_INT 24
18738: PUSH
18739: LD_INT 25
18741: PUSH
18742: LD_INT 26
18744: PUSH
18745: LD_INT 27
18747: PUSH
18748: LD_INT 28
18750: PUSH
18751: LD_INT 29
18753: PUSH
18754: LD_INT 30
18756: PUSH
18757: LD_INT 31
18759: PUSH
18760: LD_INT 32
18762: PUSH
18763: LD_INT 33
18765: PUSH
18766: LD_INT 34
18768: PUSH
18769: LD_INT 36
18771: PUSH
18772: EMPTY
18773: LIST
18774: LIST
18775: LIST
18776: LIST
18777: LIST
18778: LIST
18779: LIST
18780: LIST
18781: LIST
18782: LIST
18783: LIST
18784: LIST
18785: LIST
18786: LIST
18787: LIST
18788: LIST
18789: LIST
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: LIST
18795: LIST
18796: LIST
18797: LIST
18798: LIST
18799: LIST
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: LIST
18805: LIST
18806: LIST
18807: LIST
18808: PUSH
18809: LD_INT 101
18811: PUSH
18812: LD_INT 102
18814: PUSH
18815: LD_INT 103
18817: PUSH
18818: LD_INT 104
18820: PUSH
18821: LD_INT 105
18823: PUSH
18824: LD_INT 106
18826: PUSH
18827: LD_INT 107
18829: PUSH
18830: LD_INT 108
18832: PUSH
18833: LD_INT 109
18835: PUSH
18836: LD_INT 110
18838: PUSH
18839: LD_INT 111
18841: PUSH
18842: LD_INT 112
18844: PUSH
18845: LD_INT 113
18847: PUSH
18848: LD_INT 114
18850: PUSH
18851: LD_INT 116
18853: PUSH
18854: LD_INT 117
18856: PUSH
18857: LD_INT 118
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: LIST
18864: LIST
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: LIST
18871: LIST
18872: LIST
18873: LIST
18874: LIST
18875: LIST
18876: LIST
18877: LIST
18878: PUSH
18879: EMPTY
18880: LIST
18881: LIST
18882: ST_TO_ADDR
18883: GO 19890
18885: LD_INT 15
18887: DOUBLE
18888: EQUAL
18889: IFTRUE 18893
18891: GO 19117
18893: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
18894: LD_ADDR_VAR 0 2
18898: PUSH
18899: LD_INT 1
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: LD_INT 3
18907: PUSH
18908: LD_INT 4
18910: PUSH
18911: LD_INT 5
18913: PUSH
18914: LD_INT 6
18916: PUSH
18917: LD_INT 7
18919: PUSH
18920: LD_INT 8
18922: PUSH
18923: LD_INT 9
18925: PUSH
18926: LD_INT 10
18928: PUSH
18929: LD_INT 11
18931: PUSH
18932: LD_INT 12
18934: PUSH
18935: LD_INT 13
18937: PUSH
18938: LD_INT 14
18940: PUSH
18941: LD_INT 15
18943: PUSH
18944: LD_INT 16
18946: PUSH
18947: LD_INT 17
18949: PUSH
18950: LD_INT 18
18952: PUSH
18953: LD_INT 19
18955: PUSH
18956: LD_INT 20
18958: PUSH
18959: LD_INT 21
18961: PUSH
18962: LD_INT 22
18964: PUSH
18965: LD_INT 23
18967: PUSH
18968: LD_INT 24
18970: PUSH
18971: LD_INT 25
18973: PUSH
18974: LD_INT 26
18976: PUSH
18977: LD_INT 27
18979: PUSH
18980: LD_INT 28
18982: PUSH
18983: LD_INT 29
18985: PUSH
18986: LD_INT 30
18988: PUSH
18989: LD_INT 31
18991: PUSH
18992: LD_INT 32
18994: PUSH
18995: LD_INT 33
18997: PUSH
18998: LD_INT 34
19000: PUSH
19001: LD_INT 36
19003: PUSH
19004: EMPTY
19005: LIST
19006: LIST
19007: LIST
19008: LIST
19009: LIST
19010: LIST
19011: LIST
19012: LIST
19013: LIST
19014: LIST
19015: LIST
19016: LIST
19017: LIST
19018: LIST
19019: LIST
19020: LIST
19021: LIST
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: LIST
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: LIST
19034: LIST
19035: LIST
19036: LIST
19037: LIST
19038: LIST
19039: LIST
19040: PUSH
19041: LD_INT 101
19043: PUSH
19044: LD_INT 102
19046: PUSH
19047: LD_INT 103
19049: PUSH
19050: LD_INT 104
19052: PUSH
19053: LD_INT 105
19055: PUSH
19056: LD_INT 106
19058: PUSH
19059: LD_INT 107
19061: PUSH
19062: LD_INT 108
19064: PUSH
19065: LD_INT 109
19067: PUSH
19068: LD_INT 110
19070: PUSH
19071: LD_INT 111
19073: PUSH
19074: LD_INT 112
19076: PUSH
19077: LD_INT 113
19079: PUSH
19080: LD_INT 114
19082: PUSH
19083: LD_INT 116
19085: PUSH
19086: LD_INT 117
19088: PUSH
19089: LD_INT 118
19091: PUSH
19092: EMPTY
19093: LIST
19094: LIST
19095: LIST
19096: LIST
19097: LIST
19098: LIST
19099: LIST
19100: LIST
19101: LIST
19102: LIST
19103: LIST
19104: LIST
19105: LIST
19106: LIST
19107: LIST
19108: LIST
19109: LIST
19110: PUSH
19111: EMPTY
19112: LIST
19113: LIST
19114: ST_TO_ADDR
19115: GO 19890
19117: LD_INT 16
19119: DOUBLE
19120: EQUAL
19121: IFTRUE 19125
19123: GO 19261
19125: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
19126: LD_ADDR_VAR 0 2
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: LD_INT 4
19136: PUSH
19137: LD_INT 5
19139: PUSH
19140: LD_INT 7
19142: PUSH
19143: LD_INT 11
19145: PUSH
19146: LD_INT 12
19148: PUSH
19149: LD_INT 15
19151: PUSH
19152: LD_INT 16
19154: PUSH
19155: LD_INT 20
19157: PUSH
19158: LD_INT 21
19160: PUSH
19161: LD_INT 22
19163: PUSH
19164: LD_INT 23
19166: PUSH
19167: LD_INT 25
19169: PUSH
19170: LD_INT 26
19172: PUSH
19173: LD_INT 30
19175: PUSH
19176: LD_INT 31
19178: PUSH
19179: LD_INT 32
19181: PUSH
19182: LD_INT 33
19184: PUSH
19185: LD_INT 34
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: LIST
19194: LIST
19195: LIST
19196: LIST
19197: LIST
19198: LIST
19199: LIST
19200: LIST
19201: LIST
19202: LIST
19203: LIST
19204: LIST
19205: LIST
19206: LIST
19207: LIST
19208: PUSH
19209: LD_INT 101
19211: PUSH
19212: LD_INT 102
19214: PUSH
19215: LD_INT 103
19217: PUSH
19218: LD_INT 106
19220: PUSH
19221: LD_INT 108
19223: PUSH
19224: LD_INT 112
19226: PUSH
19227: LD_INT 113
19229: PUSH
19230: LD_INT 114
19232: PUSH
19233: LD_INT 116
19235: PUSH
19236: LD_INT 117
19238: PUSH
19239: LD_INT 118
19241: PUSH
19242: EMPTY
19243: LIST
19244: LIST
19245: LIST
19246: LIST
19247: LIST
19248: LIST
19249: LIST
19250: LIST
19251: LIST
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: ST_TO_ADDR
19259: GO 19890
19261: LD_INT 17
19263: DOUBLE
19264: EQUAL
19265: IFTRUE 19269
19267: GO 19493
19269: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
19270: LD_ADDR_VAR 0 2
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 3
19283: PUSH
19284: LD_INT 4
19286: PUSH
19287: LD_INT 5
19289: PUSH
19290: LD_INT 6
19292: PUSH
19293: LD_INT 7
19295: PUSH
19296: LD_INT 8
19298: PUSH
19299: LD_INT 9
19301: PUSH
19302: LD_INT 10
19304: PUSH
19305: LD_INT 11
19307: PUSH
19308: LD_INT 12
19310: PUSH
19311: LD_INT 13
19313: PUSH
19314: LD_INT 14
19316: PUSH
19317: LD_INT 15
19319: PUSH
19320: LD_INT 16
19322: PUSH
19323: LD_INT 17
19325: PUSH
19326: LD_INT 18
19328: PUSH
19329: LD_INT 19
19331: PUSH
19332: LD_INT 20
19334: PUSH
19335: LD_INT 21
19337: PUSH
19338: LD_INT 22
19340: PUSH
19341: LD_INT 23
19343: PUSH
19344: LD_INT 24
19346: PUSH
19347: LD_INT 25
19349: PUSH
19350: LD_INT 26
19352: PUSH
19353: LD_INT 27
19355: PUSH
19356: LD_INT 28
19358: PUSH
19359: LD_INT 29
19361: PUSH
19362: LD_INT 30
19364: PUSH
19365: LD_INT 31
19367: PUSH
19368: LD_INT 32
19370: PUSH
19371: LD_INT 33
19373: PUSH
19374: LD_INT 34
19376: PUSH
19377: LD_INT 36
19379: PUSH
19380: EMPTY
19381: LIST
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: LIST
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: LIST
19408: LIST
19409: LIST
19410: LIST
19411: LIST
19412: LIST
19413: LIST
19414: LIST
19415: LIST
19416: PUSH
19417: LD_INT 101
19419: PUSH
19420: LD_INT 102
19422: PUSH
19423: LD_INT 103
19425: PUSH
19426: LD_INT 104
19428: PUSH
19429: LD_INT 105
19431: PUSH
19432: LD_INT 106
19434: PUSH
19435: LD_INT 107
19437: PUSH
19438: LD_INT 108
19440: PUSH
19441: LD_INT 109
19443: PUSH
19444: LD_INT 110
19446: PUSH
19447: LD_INT 111
19449: PUSH
19450: LD_INT 112
19452: PUSH
19453: LD_INT 113
19455: PUSH
19456: LD_INT 114
19458: PUSH
19459: LD_INT 116
19461: PUSH
19462: LD_INT 117
19464: PUSH
19465: LD_INT 118
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: LIST
19472: LIST
19473: LIST
19474: LIST
19475: LIST
19476: LIST
19477: LIST
19478: LIST
19479: LIST
19480: LIST
19481: LIST
19482: LIST
19483: LIST
19484: LIST
19485: LIST
19486: PUSH
19487: EMPTY
19488: LIST
19489: LIST
19490: ST_TO_ADDR
19491: GO 19890
19493: LD_INT 18
19495: DOUBLE
19496: EQUAL
19497: IFTRUE 19501
19499: GO 19649
19501: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
19502: LD_ADDR_VAR 0 2
19506: PUSH
19507: LD_INT 2
19509: PUSH
19510: LD_INT 4
19512: PUSH
19513: LD_INT 5
19515: PUSH
19516: LD_INT 7
19518: PUSH
19519: LD_INT 11
19521: PUSH
19522: LD_INT 12
19524: PUSH
19525: LD_INT 15
19527: PUSH
19528: LD_INT 16
19530: PUSH
19531: LD_INT 20
19533: PUSH
19534: LD_INT 21
19536: PUSH
19537: LD_INT 22
19539: PUSH
19540: LD_INT 23
19542: PUSH
19543: LD_INT 25
19545: PUSH
19546: LD_INT 26
19548: PUSH
19549: LD_INT 30
19551: PUSH
19552: LD_INT 31
19554: PUSH
19555: LD_INT 32
19557: PUSH
19558: LD_INT 33
19560: PUSH
19561: LD_INT 34
19563: PUSH
19564: LD_INT 35
19566: PUSH
19567: LD_INT 36
19569: PUSH
19570: EMPTY
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: LIST
19579: LIST
19580: LIST
19581: LIST
19582: LIST
19583: LIST
19584: LIST
19585: LIST
19586: LIST
19587: LIST
19588: LIST
19589: LIST
19590: LIST
19591: LIST
19592: PUSH
19593: LD_INT 101
19595: PUSH
19596: LD_INT 102
19598: PUSH
19599: LD_INT 103
19601: PUSH
19602: LD_INT 106
19604: PUSH
19605: LD_INT 108
19607: PUSH
19608: LD_INT 112
19610: PUSH
19611: LD_INT 113
19613: PUSH
19614: LD_INT 114
19616: PUSH
19617: LD_INT 115
19619: PUSH
19620: LD_INT 116
19622: PUSH
19623: LD_INT 117
19625: PUSH
19626: LD_INT 118
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: LIST
19635: LIST
19636: LIST
19637: LIST
19638: LIST
19639: LIST
19640: LIST
19641: LIST
19642: PUSH
19643: EMPTY
19644: LIST
19645: LIST
19646: ST_TO_ADDR
19647: GO 19890
19649: LD_INT 19
19651: DOUBLE
19652: EQUAL
19653: IFTRUE 19657
19655: GO 19889
19657: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
19658: LD_ADDR_VAR 0 2
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: LD_INT 2
19668: PUSH
19669: LD_INT 3
19671: PUSH
19672: LD_INT 4
19674: PUSH
19675: LD_INT 5
19677: PUSH
19678: LD_INT 6
19680: PUSH
19681: LD_INT 7
19683: PUSH
19684: LD_INT 8
19686: PUSH
19687: LD_INT 9
19689: PUSH
19690: LD_INT 10
19692: PUSH
19693: LD_INT 11
19695: PUSH
19696: LD_INT 12
19698: PUSH
19699: LD_INT 13
19701: PUSH
19702: LD_INT 14
19704: PUSH
19705: LD_INT 15
19707: PUSH
19708: LD_INT 16
19710: PUSH
19711: LD_INT 17
19713: PUSH
19714: LD_INT 18
19716: PUSH
19717: LD_INT 19
19719: PUSH
19720: LD_INT 20
19722: PUSH
19723: LD_INT 21
19725: PUSH
19726: LD_INT 22
19728: PUSH
19729: LD_INT 23
19731: PUSH
19732: LD_INT 24
19734: PUSH
19735: LD_INT 25
19737: PUSH
19738: LD_INT 26
19740: PUSH
19741: LD_INT 27
19743: PUSH
19744: LD_INT 28
19746: PUSH
19747: LD_INT 29
19749: PUSH
19750: LD_INT 30
19752: PUSH
19753: LD_INT 31
19755: PUSH
19756: LD_INT 32
19758: PUSH
19759: LD_INT 33
19761: PUSH
19762: LD_INT 34
19764: PUSH
19765: LD_INT 35
19767: PUSH
19768: LD_INT 36
19770: PUSH
19771: EMPTY
19772: LIST
19773: LIST
19774: LIST
19775: LIST
19776: LIST
19777: LIST
19778: LIST
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: LIST
19787: LIST
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: LIST
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: LIST
19799: LIST
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: LIST
19805: LIST
19806: LIST
19807: LIST
19808: PUSH
19809: LD_INT 101
19811: PUSH
19812: LD_INT 102
19814: PUSH
19815: LD_INT 103
19817: PUSH
19818: LD_INT 104
19820: PUSH
19821: LD_INT 105
19823: PUSH
19824: LD_INT 106
19826: PUSH
19827: LD_INT 107
19829: PUSH
19830: LD_INT 108
19832: PUSH
19833: LD_INT 109
19835: PUSH
19836: LD_INT 110
19838: PUSH
19839: LD_INT 111
19841: PUSH
19842: LD_INT 112
19844: PUSH
19845: LD_INT 113
19847: PUSH
19848: LD_INT 114
19850: PUSH
19851: LD_INT 115
19853: PUSH
19854: LD_INT 116
19856: PUSH
19857: LD_INT 117
19859: PUSH
19860: LD_INT 118
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: LIST
19868: LIST
19869: LIST
19870: LIST
19871: LIST
19872: LIST
19873: LIST
19874: LIST
19875: LIST
19876: LIST
19877: LIST
19878: LIST
19879: LIST
19880: LIST
19881: LIST
19882: PUSH
19883: EMPTY
19884: LIST
19885: LIST
19886: ST_TO_ADDR
19887: GO 19890
19889: POP
// end else
19890: GO 20121
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
19892: LD_ADDR_VAR 0 2
19896: PUSH
19897: LD_INT 1
19899: PUSH
19900: LD_INT 2
19902: PUSH
19903: LD_INT 3
19905: PUSH
19906: LD_INT 4
19908: PUSH
19909: LD_INT 5
19911: PUSH
19912: LD_INT 6
19914: PUSH
19915: LD_INT 7
19917: PUSH
19918: LD_INT 8
19920: PUSH
19921: LD_INT 9
19923: PUSH
19924: LD_INT 10
19926: PUSH
19927: LD_INT 11
19929: PUSH
19930: LD_INT 12
19932: PUSH
19933: LD_INT 13
19935: PUSH
19936: LD_INT 14
19938: PUSH
19939: LD_INT 15
19941: PUSH
19942: LD_INT 16
19944: PUSH
19945: LD_INT 17
19947: PUSH
19948: LD_INT 18
19950: PUSH
19951: LD_INT 19
19953: PUSH
19954: LD_INT 20
19956: PUSH
19957: LD_INT 21
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_INT 23
19965: PUSH
19966: LD_INT 24
19968: PUSH
19969: LD_INT 25
19971: PUSH
19972: LD_INT 26
19974: PUSH
19975: LD_INT 27
19977: PUSH
19978: LD_INT 28
19980: PUSH
19981: LD_INT 29
19983: PUSH
19984: LD_INT 30
19986: PUSH
19987: LD_INT 31
19989: PUSH
19990: LD_INT 32
19992: PUSH
19993: LD_INT 33
19995: PUSH
19996: LD_INT 34
19998: PUSH
19999: LD_INT 35
20001: PUSH
20002: LD_INT 36
20004: PUSH
20005: EMPTY
20006: LIST
20007: LIST
20008: LIST
20009: LIST
20010: LIST
20011: LIST
20012: LIST
20013: LIST
20014: LIST
20015: LIST
20016: LIST
20017: LIST
20018: LIST
20019: LIST
20020: LIST
20021: LIST
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: LIST
20027: LIST
20028: LIST
20029: LIST
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: LIST
20035: LIST
20036: LIST
20037: LIST
20038: LIST
20039: LIST
20040: LIST
20041: LIST
20042: PUSH
20043: LD_INT 101
20045: PUSH
20046: LD_INT 102
20048: PUSH
20049: LD_INT 103
20051: PUSH
20052: LD_INT 104
20054: PUSH
20055: LD_INT 105
20057: PUSH
20058: LD_INT 106
20060: PUSH
20061: LD_INT 107
20063: PUSH
20064: LD_INT 108
20066: PUSH
20067: LD_INT 109
20069: PUSH
20070: LD_INT 110
20072: PUSH
20073: LD_INT 111
20075: PUSH
20076: LD_INT 112
20078: PUSH
20079: LD_INT 113
20081: PUSH
20082: LD_INT 114
20084: PUSH
20085: LD_INT 115
20087: PUSH
20088: LD_INT 116
20090: PUSH
20091: LD_INT 117
20093: PUSH
20094: LD_INT 118
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: LIST
20101: LIST
20102: LIST
20103: LIST
20104: LIST
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: ST_TO_ADDR
// if result then
20121: LD_VAR 0 2
20125: IFFALSE 20911
// begin normal :=  ;
20127: LD_ADDR_VAR 0 5
20131: PUSH
20132: LD_STRING 
20134: ST_TO_ADDR
// hardcore :=  ;
20135: LD_ADDR_VAR 0 6
20139: PUSH
20140: LD_STRING 
20142: ST_TO_ADDR
// active :=  ;
20143: LD_ADDR_VAR 0 7
20147: PUSH
20148: LD_STRING 
20150: ST_TO_ADDR
// for i = 1 to normalCounter do
20151: LD_ADDR_VAR 0 8
20155: PUSH
20156: DOUBLE
20157: LD_INT 1
20159: DEC
20160: ST_TO_ADDR
20161: LD_EXP 62
20165: PUSH
20166: FOR_TO
20167: IFFALSE 20268
// begin tmp := 0 ;
20169: LD_ADDR_VAR 0 3
20173: PUSH
20174: LD_STRING 0
20176: ST_TO_ADDR
// if result [ 1 ] then
20177: LD_VAR 0 2
20181: PUSH
20182: LD_INT 1
20184: ARRAY
20185: IFFALSE 20250
// if result [ 1 ] [ 1 ] = i then
20187: LD_VAR 0 2
20191: PUSH
20192: LD_INT 1
20194: ARRAY
20195: PUSH
20196: LD_INT 1
20198: ARRAY
20199: PUSH
20200: LD_VAR 0 8
20204: EQUAL
20205: IFFALSE 20250
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
20207: LD_ADDR_VAR 0 2
20211: PUSH
20212: LD_VAR 0 2
20216: PPUSH
20217: LD_INT 1
20219: PPUSH
20220: LD_VAR 0 2
20224: PUSH
20225: LD_INT 1
20227: ARRAY
20228: PPUSH
20229: LD_INT 1
20231: PPUSH
20232: CALL_OW 3
20236: PPUSH
20237: CALL_OW 1
20241: ST_TO_ADDR
// tmp := 1 ;
20242: LD_ADDR_VAR 0 3
20246: PUSH
20247: LD_STRING 1
20249: ST_TO_ADDR
// end ; normal := normal & tmp ;
20250: LD_ADDR_VAR 0 5
20254: PUSH
20255: LD_VAR 0 5
20259: PUSH
20260: LD_VAR 0 3
20264: STR
20265: ST_TO_ADDR
// end ;
20266: GO 20166
20268: POP
20269: POP
// for i = 1 to hardcoreCounter do
20270: LD_ADDR_VAR 0 8
20274: PUSH
20275: DOUBLE
20276: LD_INT 1
20278: DEC
20279: ST_TO_ADDR
20280: LD_EXP 63
20284: PUSH
20285: FOR_TO
20286: IFFALSE 20391
// begin tmp := 0 ;
20288: LD_ADDR_VAR 0 3
20292: PUSH
20293: LD_STRING 0
20295: ST_TO_ADDR
// if result [ 2 ] then
20296: LD_VAR 0 2
20300: PUSH
20301: LD_INT 2
20303: ARRAY
20304: IFFALSE 20373
// if result [ 2 ] [ 1 ] = 100 + i then
20306: LD_VAR 0 2
20310: PUSH
20311: LD_INT 2
20313: ARRAY
20314: PUSH
20315: LD_INT 1
20317: ARRAY
20318: PUSH
20319: LD_INT 100
20321: PUSH
20322: LD_VAR 0 8
20326: PLUS
20327: EQUAL
20328: IFFALSE 20373
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
20330: LD_ADDR_VAR 0 2
20334: PUSH
20335: LD_VAR 0 2
20339: PPUSH
20340: LD_INT 2
20342: PPUSH
20343: LD_VAR 0 2
20347: PUSH
20348: LD_INT 2
20350: ARRAY
20351: PPUSH
20352: LD_INT 1
20354: PPUSH
20355: CALL_OW 3
20359: PPUSH
20360: CALL_OW 1
20364: ST_TO_ADDR
// tmp := 1 ;
20365: LD_ADDR_VAR 0 3
20369: PUSH
20370: LD_STRING 1
20372: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
20373: LD_ADDR_VAR 0 6
20377: PUSH
20378: LD_VAR 0 6
20382: PUSH
20383: LD_VAR 0 3
20387: STR
20388: ST_TO_ADDR
// end ;
20389: GO 20285
20391: POP
20392: POP
// if isGameLoad then
20393: LD_VAR 0 1
20397: IFFALSE 20872
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
20399: LD_ADDR_VAR 0 4
20403: PUSH
20404: LD_EXP 66
20408: PUSH
20409: LD_EXP 65
20413: PUSH
20414: LD_EXP 67
20418: PUSH
20419: LD_EXP 64
20423: PUSH
20424: LD_EXP 68
20428: PUSH
20429: LD_EXP 69
20433: PUSH
20434: LD_EXP 70
20438: PUSH
20439: LD_EXP 71
20443: PUSH
20444: LD_EXP 72
20448: PUSH
20449: LD_EXP 73
20453: PUSH
20454: LD_EXP 74
20458: PUSH
20459: LD_EXP 75
20463: PUSH
20464: LD_EXP 76
20468: PUSH
20469: LD_EXP 77
20473: PUSH
20474: LD_EXP 85
20478: PUSH
20479: LD_EXP 86
20483: PUSH
20484: LD_EXP 87
20488: PUSH
20489: LD_EXP 88
20493: PUSH
20494: LD_EXP 90
20498: PUSH
20499: LD_EXP 91
20503: PUSH
20504: LD_EXP 92
20508: PUSH
20509: LD_EXP 95
20513: PUSH
20514: LD_EXP 97
20518: PUSH
20519: LD_EXP 98
20523: PUSH
20524: LD_EXP 99
20528: PUSH
20529: LD_EXP 101
20533: PUSH
20534: LD_EXP 102
20538: PUSH
20539: LD_EXP 105
20543: PUSH
20544: LD_EXP 106
20548: PUSH
20549: LD_EXP 107
20553: PUSH
20554: LD_EXP 108
20558: PUSH
20559: LD_EXP 109
20563: PUSH
20564: LD_EXP 110
20568: PUSH
20569: LD_EXP 111
20573: PUSH
20574: LD_EXP 112
20578: PUSH
20579: LD_EXP 113
20583: PUSH
20584: LD_EXP 78
20588: PUSH
20589: LD_EXP 79
20593: PUSH
20594: LD_EXP 82
20598: PUSH
20599: LD_EXP 83
20603: PUSH
20604: LD_EXP 84
20608: PUSH
20609: LD_EXP 80
20613: PUSH
20614: LD_EXP 81
20618: PUSH
20619: LD_EXP 89
20623: PUSH
20624: LD_EXP 93
20628: PUSH
20629: LD_EXP 94
20633: PUSH
20634: LD_EXP 96
20638: PUSH
20639: LD_EXP 100
20643: PUSH
20644: LD_EXP 103
20648: PUSH
20649: LD_EXP 104
20653: PUSH
20654: LD_EXP 114
20658: PUSH
20659: LD_EXP 115
20663: PUSH
20664: LD_EXP 116
20668: PUSH
20669: LD_EXP 117
20673: PUSH
20674: EMPTY
20675: LIST
20676: LIST
20677: LIST
20678: LIST
20679: LIST
20680: LIST
20681: LIST
20682: LIST
20683: LIST
20684: LIST
20685: LIST
20686: LIST
20687: LIST
20688: LIST
20689: LIST
20690: LIST
20691: LIST
20692: LIST
20693: LIST
20694: LIST
20695: LIST
20696: LIST
20697: LIST
20698: LIST
20699: LIST
20700: LIST
20701: LIST
20702: LIST
20703: LIST
20704: LIST
20705: LIST
20706: LIST
20707: LIST
20708: LIST
20709: LIST
20710: LIST
20711: LIST
20712: LIST
20713: LIST
20714: LIST
20715: LIST
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: LIST
20723: LIST
20724: LIST
20725: LIST
20726: LIST
20727: LIST
20728: LIST
20729: ST_TO_ADDR
// tmp :=  ;
20730: LD_ADDR_VAR 0 3
20734: PUSH
20735: LD_STRING 
20737: ST_TO_ADDR
// for i = 1 to normalCounter do
20738: LD_ADDR_VAR 0 8
20742: PUSH
20743: DOUBLE
20744: LD_INT 1
20746: DEC
20747: ST_TO_ADDR
20748: LD_EXP 62
20752: PUSH
20753: FOR_TO
20754: IFFALSE 20790
// begin if flags [ i ] then
20756: LD_VAR 0 4
20760: PUSH
20761: LD_VAR 0 8
20765: ARRAY
20766: IFFALSE 20788
// tmp := tmp & i & ; ;
20768: LD_ADDR_VAR 0 3
20772: PUSH
20773: LD_VAR 0 3
20777: PUSH
20778: LD_VAR 0 8
20782: STR
20783: PUSH
20784: LD_STRING ;
20786: STR
20787: ST_TO_ADDR
// end ;
20788: GO 20753
20790: POP
20791: POP
// for i = 1 to hardcoreCounter do
20792: LD_ADDR_VAR 0 8
20796: PUSH
20797: DOUBLE
20798: LD_INT 1
20800: DEC
20801: ST_TO_ADDR
20802: LD_EXP 63
20806: PUSH
20807: FOR_TO
20808: IFFALSE 20854
// begin if flags [ normalCounter + i ] then
20810: LD_VAR 0 4
20814: PUSH
20815: LD_EXP 62
20819: PUSH
20820: LD_VAR 0 8
20824: PLUS
20825: ARRAY
20826: IFFALSE 20852
// tmp := tmp & ( 100 + i ) & ; ;
20828: LD_ADDR_VAR 0 3
20832: PUSH
20833: LD_VAR 0 3
20837: PUSH
20838: LD_INT 100
20840: PUSH
20841: LD_VAR 0 8
20845: PLUS
20846: STR
20847: PUSH
20848: LD_STRING ;
20850: STR
20851: ST_TO_ADDR
// end ;
20852: GO 20807
20854: POP
20855: POP
// if tmp then
20856: LD_VAR 0 3
20860: IFFALSE 20872
// active := tmp ;
20862: LD_ADDR_VAR 0 7
20866: PUSH
20867: LD_VAR 0 3
20871: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
20872: LD_STRING getStreamItemsFromMission("
20874: PUSH
20875: LD_VAR 0 5
20879: STR
20880: PUSH
20881: LD_STRING ","
20883: STR
20884: PUSH
20885: LD_VAR 0 6
20889: STR
20890: PUSH
20891: LD_STRING ","
20893: STR
20894: PUSH
20895: LD_VAR 0 7
20899: STR
20900: PUSH
20901: LD_STRING ")
20903: STR
20904: PPUSH
20905: CALL_OW 559
// end else
20909: GO 20918
// ToLua ( getStreamItemsFromMission("","","") ) ;
20911: LD_STRING getStreamItemsFromMission("","","")
20913: PPUSH
20914: CALL_OW 559
// end ;
20918: LD_VAR 0 2
20922: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
20923: LD_EXP 61
20927: PUSH
20928: LD_EXP 66
20932: AND
20933: IFFALSE 21057
20935: GO 20937
20937: DISABLE
20938: LD_INT 0
20940: PPUSH
20941: PPUSH
// begin enable ;
20942: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
20943: LD_ADDR_VAR 0 2
20947: PUSH
20948: LD_INT 22
20950: PUSH
20951: LD_OWVAR 2
20955: PUSH
20956: EMPTY
20957: LIST
20958: LIST
20959: PUSH
20960: LD_INT 2
20962: PUSH
20963: LD_INT 34
20965: PUSH
20966: LD_INT 7
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PUSH
20973: LD_INT 34
20975: PUSH
20976: LD_INT 45
20978: PUSH
20979: EMPTY
20980: LIST
20981: LIST
20982: PUSH
20983: LD_INT 34
20985: PUSH
20986: LD_INT 28
20988: PUSH
20989: EMPTY
20990: LIST
20991: LIST
20992: PUSH
20993: LD_INT 34
20995: PUSH
20996: LD_INT 47
20998: PUSH
20999: EMPTY
21000: LIST
21001: LIST
21002: PUSH
21003: EMPTY
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 69
21018: ST_TO_ADDR
// if not tmp then
21019: LD_VAR 0 2
21023: NOT
21024: IFFALSE 21028
// exit ;
21026: GO 21057
// for i in tmp do
21028: LD_ADDR_VAR 0 1
21032: PUSH
21033: LD_VAR 0 2
21037: PUSH
21038: FOR_IN
21039: IFFALSE 21055
// begin SetLives ( i , 0 ) ;
21041: LD_VAR 0 1
21045: PPUSH
21046: LD_INT 0
21048: PPUSH
21049: CALL_OW 234
// end ;
21053: GO 21038
21055: POP
21056: POP
// end ;
21057: PPOPN 2
21059: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
21060: LD_EXP 61
21064: PUSH
21065: LD_EXP 67
21069: AND
21070: IFFALSE 21154
21072: GO 21074
21074: DISABLE
21075: LD_INT 0
21077: PPUSH
21078: PPUSH
// begin enable ;
21079: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
21080: LD_ADDR_VAR 0 2
21084: PUSH
21085: LD_INT 22
21087: PUSH
21088: LD_OWVAR 2
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: PUSH
21097: LD_INT 32
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: EMPTY
21104: LIST
21105: LIST
21106: PUSH
21107: EMPTY
21108: LIST
21109: LIST
21110: PPUSH
21111: CALL_OW 69
21115: ST_TO_ADDR
// if not tmp then
21116: LD_VAR 0 2
21120: NOT
21121: IFFALSE 21125
// exit ;
21123: GO 21154
// for i in tmp do
21125: LD_ADDR_VAR 0 1
21129: PUSH
21130: LD_VAR 0 2
21134: PUSH
21135: FOR_IN
21136: IFFALSE 21152
// begin SetLives ( i , 0 ) ;
21138: LD_VAR 0 1
21142: PPUSH
21143: LD_INT 0
21145: PPUSH
21146: CALL_OW 234
// end ;
21150: GO 21135
21152: POP
21153: POP
// end ;
21154: PPOPN 2
21156: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
21157: LD_EXP 61
21161: PUSH
21162: LD_EXP 64
21166: AND
21167: IFFALSE 21260
21169: GO 21171
21171: DISABLE
21172: LD_INT 0
21174: PPUSH
// begin enable ;
21175: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
21176: LD_ADDR_VAR 0 1
21180: PUSH
21181: LD_INT 22
21183: PUSH
21184: LD_OWVAR 2
21188: PUSH
21189: EMPTY
21190: LIST
21191: LIST
21192: PUSH
21193: LD_INT 2
21195: PUSH
21196: LD_INT 25
21198: PUSH
21199: LD_INT 5
21201: PUSH
21202: EMPTY
21203: LIST
21204: LIST
21205: PUSH
21206: LD_INT 25
21208: PUSH
21209: LD_INT 9
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PUSH
21216: LD_INT 25
21218: PUSH
21219: LD_INT 8
21221: PUSH
21222: EMPTY
21223: LIST
21224: LIST
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PPUSH
21236: CALL_OW 69
21240: PUSH
21241: FOR_IN
21242: IFFALSE 21258
// begin SetClass ( i , 1 ) ;
21244: LD_VAR 0 1
21248: PPUSH
21249: LD_INT 1
21251: PPUSH
21252: CALL_OW 336
// end ;
21256: GO 21241
21258: POP
21259: POP
// end ;
21260: PPOPN 1
21262: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
21263: LD_EXP 61
21267: PUSH
21268: LD_EXP 65
21272: AND
21273: PUSH
21274: LD_OWVAR 65
21278: PUSH
21279: LD_INT 7
21281: LESS
21282: AND
21283: IFFALSE 21297
21285: GO 21287
21287: DISABLE
// begin enable ;
21288: ENABLE
// game_speed := 7 ;
21289: LD_ADDR_OWVAR 65
21293: PUSH
21294: LD_INT 7
21296: ST_TO_ADDR
// end ;
21297: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
21298: LD_EXP 61
21302: PUSH
21303: LD_EXP 68
21307: AND
21308: IFFALSE 21510
21310: GO 21312
21312: DISABLE
21313: LD_INT 0
21315: PPUSH
21316: PPUSH
21317: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
21318: LD_ADDR_VAR 0 3
21322: PUSH
21323: LD_INT 81
21325: PUSH
21326: LD_OWVAR 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 21
21337: PUSH
21338: LD_INT 1
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: PPUSH
21349: CALL_OW 69
21353: ST_TO_ADDR
// if not tmp then
21354: LD_VAR 0 3
21358: NOT
21359: IFFALSE 21363
// exit ;
21361: GO 21510
// if tmp > 5 then
21363: LD_VAR 0 3
21367: PUSH
21368: LD_INT 5
21370: GREATER
21371: IFFALSE 21383
// k := 5 else
21373: LD_ADDR_VAR 0 2
21377: PUSH
21378: LD_INT 5
21380: ST_TO_ADDR
21381: GO 21393
// k := tmp ;
21383: LD_ADDR_VAR 0 2
21387: PUSH
21388: LD_VAR 0 3
21392: ST_TO_ADDR
// for i := 1 to k do
21393: LD_ADDR_VAR 0 1
21397: PUSH
21398: DOUBLE
21399: LD_INT 1
21401: DEC
21402: ST_TO_ADDR
21403: LD_VAR 0 2
21407: PUSH
21408: FOR_TO
21409: IFFALSE 21508
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
21411: LD_VAR 0 3
21415: PUSH
21416: LD_VAR 0 1
21420: ARRAY
21421: PPUSH
21422: LD_VAR 0 1
21426: PUSH
21427: LD_INT 4
21429: MOD
21430: PUSH
21431: LD_INT 1
21433: PLUS
21434: PPUSH
21435: CALL_OW 259
21439: PUSH
21440: LD_INT 10
21442: LESS
21443: IFFALSE 21506
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
21445: LD_VAR 0 3
21449: PUSH
21450: LD_VAR 0 1
21454: ARRAY
21455: PPUSH
21456: LD_VAR 0 1
21460: PUSH
21461: LD_INT 4
21463: MOD
21464: PUSH
21465: LD_INT 1
21467: PLUS
21468: PPUSH
21469: LD_VAR 0 3
21473: PUSH
21474: LD_VAR 0 1
21478: ARRAY
21479: PPUSH
21480: LD_VAR 0 1
21484: PUSH
21485: LD_INT 4
21487: MOD
21488: PUSH
21489: LD_INT 1
21491: PLUS
21492: PPUSH
21493: CALL_OW 259
21497: PUSH
21498: LD_INT 1
21500: PLUS
21501: PPUSH
21502: CALL_OW 237
21506: GO 21408
21508: POP
21509: POP
// end ;
21510: PPOPN 3
21512: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
21513: LD_EXP 61
21517: PUSH
21518: LD_EXP 69
21522: AND
21523: IFFALSE 21543
21525: GO 21527
21527: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
21528: LD_INT 4
21530: PPUSH
21531: LD_OWVAR 2
21535: PPUSH
21536: LD_INT 0
21538: PPUSH
21539: CALL_OW 324
21543: END
// every 0 0$1 trigger StreamModeActive and sShovel do
21544: LD_EXP 61
21548: PUSH
21549: LD_EXP 98
21553: AND
21554: IFFALSE 21574
21556: GO 21558
21558: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
21559: LD_INT 19
21561: PPUSH
21562: LD_OWVAR 2
21566: PPUSH
21567: LD_INT 0
21569: PPUSH
21570: CALL_OW 324
21574: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
21575: LD_EXP 61
21579: PUSH
21580: LD_EXP 70
21584: AND
21585: IFFALSE 21687
21587: GO 21589
21589: DISABLE
21590: LD_INT 0
21592: PPUSH
21593: PPUSH
// begin enable ;
21594: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
21595: LD_ADDR_VAR 0 2
21599: PUSH
21600: LD_INT 22
21602: PUSH
21603: LD_OWVAR 2
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PUSH
21612: LD_INT 2
21614: PUSH
21615: LD_INT 34
21617: PUSH
21618: LD_INT 11
21620: PUSH
21621: EMPTY
21622: LIST
21623: LIST
21624: PUSH
21625: LD_INT 34
21627: PUSH
21628: LD_INT 30
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: PUSH
21635: EMPTY
21636: LIST
21637: LIST
21638: LIST
21639: PUSH
21640: EMPTY
21641: LIST
21642: LIST
21643: PPUSH
21644: CALL_OW 69
21648: ST_TO_ADDR
// if not tmp then
21649: LD_VAR 0 2
21653: NOT
21654: IFFALSE 21658
// exit ;
21656: GO 21687
// for i in tmp do
21658: LD_ADDR_VAR 0 1
21662: PUSH
21663: LD_VAR 0 2
21667: PUSH
21668: FOR_IN
21669: IFFALSE 21685
// begin SetLives ( i , 0 ) ;
21671: LD_VAR 0 1
21675: PPUSH
21676: LD_INT 0
21678: PPUSH
21679: CALL_OW 234
// end ;
21683: GO 21668
21685: POP
21686: POP
// end ;
21687: PPOPN 2
21689: END
// every 0 0$1 trigger StreamModeActive and sBunker do
21690: LD_EXP 61
21694: PUSH
21695: LD_EXP 71
21699: AND
21700: IFFALSE 21720
21702: GO 21704
21704: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
21705: LD_INT 32
21707: PPUSH
21708: LD_OWVAR 2
21712: PPUSH
21713: LD_INT 0
21715: PPUSH
21716: CALL_OW 324
21720: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
21721: LD_EXP 61
21725: PUSH
21726: LD_EXP 72
21730: AND
21731: IFFALSE 21912
21733: GO 21735
21735: DISABLE
21736: LD_INT 0
21738: PPUSH
21739: PPUSH
21740: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
21741: LD_ADDR_VAR 0 2
21745: PUSH
21746: LD_INT 22
21748: PUSH
21749: LD_OWVAR 2
21753: PUSH
21754: EMPTY
21755: LIST
21756: LIST
21757: PUSH
21758: LD_INT 33
21760: PUSH
21761: LD_INT 3
21763: PUSH
21764: EMPTY
21765: LIST
21766: LIST
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PPUSH
21772: CALL_OW 69
21776: ST_TO_ADDR
// if not tmp then
21777: LD_VAR 0 2
21781: NOT
21782: IFFALSE 21786
// exit ;
21784: GO 21912
// side := 0 ;
21786: LD_ADDR_VAR 0 3
21790: PUSH
21791: LD_INT 0
21793: ST_TO_ADDR
// for i := 1 to 8 do
21794: LD_ADDR_VAR 0 1
21798: PUSH
21799: DOUBLE
21800: LD_INT 1
21802: DEC
21803: ST_TO_ADDR
21804: LD_INT 8
21806: PUSH
21807: FOR_TO
21808: IFFALSE 21856
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
21810: LD_OWVAR 2
21814: PUSH
21815: LD_VAR 0 1
21819: NONEQUAL
21820: PUSH
21821: LD_OWVAR 2
21825: PPUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: CALL_OW 81
21835: PUSH
21836: LD_INT 2
21838: EQUAL
21839: AND
21840: IFFALSE 21854
// begin side := i ;
21842: LD_ADDR_VAR 0 3
21846: PUSH
21847: LD_VAR 0 1
21851: ST_TO_ADDR
// break ;
21852: GO 21856
// end ;
21854: GO 21807
21856: POP
21857: POP
// if not side then
21858: LD_VAR 0 3
21862: NOT
21863: IFFALSE 21867
// exit ;
21865: GO 21912
// for i := 1 to tmp do
21867: LD_ADDR_VAR 0 1
21871: PUSH
21872: DOUBLE
21873: LD_INT 1
21875: DEC
21876: ST_TO_ADDR
21877: LD_VAR 0 2
21881: PUSH
21882: FOR_TO
21883: IFFALSE 21910
// if Prob ( 60 ) then
21885: LD_INT 60
21887: PPUSH
21888: CALL_OW 13
21892: IFFALSE 21908
// SetSide ( i , side ) ;
21894: LD_VAR 0 1
21898: PPUSH
21899: LD_VAR 0 3
21903: PPUSH
21904: CALL_OW 235
21908: GO 21882
21910: POP
21911: POP
// end ;
21912: PPOPN 3
21914: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
21915: LD_EXP 61
21919: PUSH
21920: LD_EXP 74
21924: AND
21925: IFFALSE 22044
21927: GO 21929
21929: DISABLE
21930: LD_INT 0
21932: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
21933: LD_ADDR_VAR 0 1
21937: PUSH
21938: LD_INT 22
21940: PUSH
21941: LD_OWVAR 2
21945: PUSH
21946: EMPTY
21947: LIST
21948: LIST
21949: PUSH
21950: LD_INT 21
21952: PUSH
21953: LD_INT 1
21955: PUSH
21956: EMPTY
21957: LIST
21958: LIST
21959: PUSH
21960: LD_INT 3
21962: PUSH
21963: LD_INT 23
21965: PUSH
21966: LD_INT 0
21968: PUSH
21969: EMPTY
21970: LIST
21971: LIST
21972: PUSH
21973: EMPTY
21974: LIST
21975: LIST
21976: PUSH
21977: EMPTY
21978: LIST
21979: LIST
21980: LIST
21981: PPUSH
21982: CALL_OW 69
21986: PUSH
21987: FOR_IN
21988: IFFALSE 22042
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 257
21999: PUSH
22000: LD_INT 1
22002: PUSH
22003: LD_INT 2
22005: PUSH
22006: LD_INT 3
22008: PUSH
22009: LD_INT 4
22011: PUSH
22012: EMPTY
22013: LIST
22014: LIST
22015: LIST
22016: LIST
22017: IN
22018: IFFALSE 22040
// SetClass ( un , rand ( 1 , 4 ) ) ;
22020: LD_VAR 0 1
22024: PPUSH
22025: LD_INT 1
22027: PPUSH
22028: LD_INT 4
22030: PPUSH
22031: CALL_OW 12
22035: PPUSH
22036: CALL_OW 336
22040: GO 21987
22042: POP
22043: POP
// end ;
22044: PPOPN 1
22046: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
22047: LD_EXP 61
22051: PUSH
22052: LD_EXP 73
22056: AND
22057: IFFALSE 22136
22059: GO 22061
22061: DISABLE
22062: LD_INT 0
22064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22065: LD_ADDR_VAR 0 1
22069: PUSH
22070: LD_INT 22
22072: PUSH
22073: LD_OWVAR 2
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PUSH
22082: LD_INT 21
22084: PUSH
22085: LD_INT 3
22087: PUSH
22088: EMPTY
22089: LIST
22090: LIST
22091: PUSH
22092: EMPTY
22093: LIST
22094: LIST
22095: PPUSH
22096: CALL_OW 69
22100: ST_TO_ADDR
// if not tmp then
22101: LD_VAR 0 1
22105: NOT
22106: IFFALSE 22110
// exit ;
22108: GO 22136
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
22110: LD_VAR 0 1
22114: PUSH
22115: LD_INT 1
22117: PPUSH
22118: LD_VAR 0 1
22122: PPUSH
22123: CALL_OW 12
22127: ARRAY
22128: PPUSH
22129: LD_INT 100
22131: PPUSH
22132: CALL_OW 234
// end ;
22136: PPOPN 1
22138: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
22139: LD_EXP 61
22143: PUSH
22144: LD_EXP 75
22148: AND
22149: IFFALSE 22247
22151: GO 22153
22153: DISABLE
22154: LD_INT 0
22156: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
22157: LD_ADDR_VAR 0 1
22161: PUSH
22162: LD_INT 22
22164: PUSH
22165: LD_OWVAR 2
22169: PUSH
22170: EMPTY
22171: LIST
22172: LIST
22173: PUSH
22174: LD_INT 21
22176: PUSH
22177: LD_INT 1
22179: PUSH
22180: EMPTY
22181: LIST
22182: LIST
22183: PUSH
22184: EMPTY
22185: LIST
22186: LIST
22187: PPUSH
22188: CALL_OW 69
22192: ST_TO_ADDR
// if not tmp then
22193: LD_VAR 0 1
22197: NOT
22198: IFFALSE 22202
// exit ;
22200: GO 22247
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
22202: LD_VAR 0 1
22206: PUSH
22207: LD_INT 1
22209: PPUSH
22210: LD_VAR 0 1
22214: PPUSH
22215: CALL_OW 12
22219: ARRAY
22220: PPUSH
22221: LD_INT 1
22223: PPUSH
22224: LD_INT 4
22226: PPUSH
22227: CALL_OW 12
22231: PPUSH
22232: LD_INT 3000
22234: PPUSH
22235: LD_INT 9000
22237: PPUSH
22238: CALL_OW 12
22242: PPUSH
22243: CALL_OW 492
// end ;
22247: PPOPN 1
22249: END
// every 0 0$1 trigger StreamModeActive and sDepot do
22250: LD_EXP 61
22254: PUSH
22255: LD_EXP 76
22259: AND
22260: IFFALSE 22280
22262: GO 22264
22264: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
22265: LD_INT 1
22267: PPUSH
22268: LD_OWVAR 2
22272: PPUSH
22273: LD_INT 0
22275: PPUSH
22276: CALL_OW 324
22280: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
22281: LD_EXP 61
22285: PUSH
22286: LD_EXP 77
22290: AND
22291: IFFALSE 22374
22293: GO 22295
22295: DISABLE
22296: LD_INT 0
22298: PPUSH
22299: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
22300: LD_ADDR_VAR 0 2
22304: PUSH
22305: LD_INT 22
22307: PUSH
22308: LD_OWVAR 2
22312: PUSH
22313: EMPTY
22314: LIST
22315: LIST
22316: PUSH
22317: LD_INT 21
22319: PUSH
22320: LD_INT 3
22322: PUSH
22323: EMPTY
22324: LIST
22325: LIST
22326: PUSH
22327: EMPTY
22328: LIST
22329: LIST
22330: PPUSH
22331: CALL_OW 69
22335: ST_TO_ADDR
// if not tmp then
22336: LD_VAR 0 2
22340: NOT
22341: IFFALSE 22345
// exit ;
22343: GO 22374
// for i in tmp do
22345: LD_ADDR_VAR 0 1
22349: PUSH
22350: LD_VAR 0 2
22354: PUSH
22355: FOR_IN
22356: IFFALSE 22372
// SetBLevel ( i , 10 ) ;
22358: LD_VAR 0 1
22362: PPUSH
22363: LD_INT 10
22365: PPUSH
22366: CALL_OW 241
22370: GO 22355
22372: POP
22373: POP
// end ;
22374: PPOPN 2
22376: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
22377: LD_EXP 61
22381: PUSH
22382: LD_EXP 78
22386: AND
22387: IFFALSE 22498
22389: GO 22391
22391: DISABLE
22392: LD_INT 0
22394: PPUSH
22395: PPUSH
22396: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
22397: LD_ADDR_VAR 0 3
22401: PUSH
22402: LD_INT 22
22404: PUSH
22405: LD_OWVAR 2
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: LD_INT 25
22416: PUSH
22417: LD_INT 1
22419: PUSH
22420: EMPTY
22421: LIST
22422: LIST
22423: PUSH
22424: EMPTY
22425: LIST
22426: LIST
22427: PPUSH
22428: CALL_OW 69
22432: ST_TO_ADDR
// if not tmp then
22433: LD_VAR 0 3
22437: NOT
22438: IFFALSE 22442
// exit ;
22440: GO 22498
// un := tmp [ rand ( 1 , tmp ) ] ;
22442: LD_ADDR_VAR 0 2
22446: PUSH
22447: LD_VAR 0 3
22451: PUSH
22452: LD_INT 1
22454: PPUSH
22455: LD_VAR 0 3
22459: PPUSH
22460: CALL_OW 12
22464: ARRAY
22465: ST_TO_ADDR
// if Crawls ( un ) then
22466: LD_VAR 0 2
22470: PPUSH
22471: CALL_OW 318
22475: IFFALSE 22486
// ComWalk ( un ) ;
22477: LD_VAR 0 2
22481: PPUSH
22482: CALL_OW 138
// SetClass ( un , class_sniper ) ;
22486: LD_VAR 0 2
22490: PPUSH
22491: LD_INT 5
22493: PPUSH
22494: CALL_OW 336
// end ;
22498: PPOPN 3
22500: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
22501: LD_EXP 61
22505: PUSH
22506: LD_EXP 79
22510: AND
22511: PUSH
22512: LD_OWVAR 67
22516: PUSH
22517: LD_INT 4
22519: LESS
22520: AND
22521: IFFALSE 22540
22523: GO 22525
22525: DISABLE
// begin Difficulty := Difficulty + 1 ;
22526: LD_ADDR_OWVAR 67
22530: PUSH
22531: LD_OWVAR 67
22535: PUSH
22536: LD_INT 1
22538: PLUS
22539: ST_TO_ADDR
// end ;
22540: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
22541: LD_EXP 61
22545: PUSH
22546: LD_EXP 80
22550: AND
22551: IFFALSE 22654
22553: GO 22555
22555: DISABLE
22556: LD_INT 0
22558: PPUSH
// begin for i := 1 to 5 do
22559: LD_ADDR_VAR 0 1
22563: PUSH
22564: DOUBLE
22565: LD_INT 1
22567: DEC
22568: ST_TO_ADDR
22569: LD_INT 5
22571: PUSH
22572: FOR_TO
22573: IFFALSE 22652
// begin uc_nation := nation_nature ;
22575: LD_ADDR_OWVAR 21
22579: PUSH
22580: LD_INT 0
22582: ST_TO_ADDR
// uc_side := 0 ;
22583: LD_ADDR_OWVAR 20
22587: PUSH
22588: LD_INT 0
22590: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
22591: LD_ADDR_OWVAR 29
22595: PUSH
22596: LD_INT 12
22598: PUSH
22599: LD_INT 12
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: ST_TO_ADDR
// hc_agressivity := 20 ;
22606: LD_ADDR_OWVAR 35
22610: PUSH
22611: LD_INT 20
22613: ST_TO_ADDR
// hc_class := class_tiger ;
22614: LD_ADDR_OWVAR 28
22618: PUSH
22619: LD_INT 14
22621: ST_TO_ADDR
// hc_gallery :=  ;
22622: LD_ADDR_OWVAR 33
22626: PUSH
22627: LD_STRING 
22629: ST_TO_ADDR
// hc_name :=  ;
22630: LD_ADDR_OWVAR 26
22634: PUSH
22635: LD_STRING 
22637: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
22638: CALL_OW 44
22642: PPUSH
22643: LD_INT 0
22645: PPUSH
22646: CALL_OW 51
// end ;
22650: GO 22572
22652: POP
22653: POP
// end ;
22654: PPOPN 1
22656: END
// every 0 0$1 trigger StreamModeActive and sBomb do
22657: LD_EXP 61
22661: PUSH
22662: LD_EXP 81
22666: AND
22667: IFFALSE 22676
22669: GO 22671
22671: DISABLE
// StreamSibBomb ;
22672: CALL 22677 0 0
22676: END
// export function StreamSibBomb ; var i , x , y ; begin
22677: LD_INT 0
22679: PPUSH
22680: PPUSH
22681: PPUSH
22682: PPUSH
// result := false ;
22683: LD_ADDR_VAR 0 1
22687: PUSH
22688: LD_INT 0
22690: ST_TO_ADDR
// for i := 1 to 16 do
22691: LD_ADDR_VAR 0 2
22695: PUSH
22696: DOUBLE
22697: LD_INT 1
22699: DEC
22700: ST_TO_ADDR
22701: LD_INT 16
22703: PUSH
22704: FOR_TO
22705: IFFALSE 22904
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22707: LD_ADDR_VAR 0 3
22711: PUSH
22712: LD_INT 10
22714: PUSH
22715: LD_INT 20
22717: PUSH
22718: LD_INT 30
22720: PUSH
22721: LD_INT 40
22723: PUSH
22724: LD_INT 50
22726: PUSH
22727: LD_INT 60
22729: PUSH
22730: LD_INT 70
22732: PUSH
22733: LD_INT 80
22735: PUSH
22736: LD_INT 90
22738: PUSH
22739: LD_INT 100
22741: PUSH
22742: LD_INT 110
22744: PUSH
22745: LD_INT 120
22747: PUSH
22748: LD_INT 130
22750: PUSH
22751: LD_INT 140
22753: PUSH
22754: LD_INT 150
22756: PUSH
22757: EMPTY
22758: LIST
22759: LIST
22760: LIST
22761: LIST
22762: LIST
22763: LIST
22764: LIST
22765: LIST
22766: LIST
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: PUSH
22774: LD_INT 1
22776: PPUSH
22777: LD_INT 15
22779: PPUSH
22780: CALL_OW 12
22784: ARRAY
22785: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
22786: LD_ADDR_VAR 0 4
22790: PUSH
22791: LD_INT 10
22793: PUSH
22794: LD_INT 20
22796: PUSH
22797: LD_INT 30
22799: PUSH
22800: LD_INT 40
22802: PUSH
22803: LD_INT 50
22805: PUSH
22806: LD_INT 60
22808: PUSH
22809: LD_INT 70
22811: PUSH
22812: LD_INT 80
22814: PUSH
22815: LD_INT 90
22817: PUSH
22818: LD_INT 100
22820: PUSH
22821: LD_INT 110
22823: PUSH
22824: LD_INT 120
22826: PUSH
22827: LD_INT 130
22829: PUSH
22830: LD_INT 140
22832: PUSH
22833: LD_INT 150
22835: PUSH
22836: EMPTY
22837: LIST
22838: LIST
22839: LIST
22840: LIST
22841: LIST
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: LIST
22847: LIST
22848: LIST
22849: LIST
22850: LIST
22851: LIST
22852: PUSH
22853: LD_INT 1
22855: PPUSH
22856: LD_INT 15
22858: PPUSH
22859: CALL_OW 12
22863: ARRAY
22864: ST_TO_ADDR
// if ValidHex ( x , y ) then
22865: LD_VAR 0 3
22869: PPUSH
22870: LD_VAR 0 4
22874: PPUSH
22875: CALL_OW 488
22879: IFFALSE 22902
// begin result := [ x , y ] ;
22881: LD_ADDR_VAR 0 1
22885: PUSH
22886: LD_VAR 0 3
22890: PUSH
22891: LD_VAR 0 4
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: ST_TO_ADDR
// break ;
22900: GO 22904
// end ; end ;
22902: GO 22704
22904: POP
22905: POP
// if result then
22906: LD_VAR 0 1
22910: IFFALSE 22970
// begin ToLua ( playSibBomb() ) ;
22912: LD_STRING playSibBomb()
22914: PPUSH
22915: CALL_OW 559
// wait ( 0 0$14 ) ;
22919: LD_INT 490
22921: PPUSH
22922: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
22926: LD_VAR 0 1
22930: PUSH
22931: LD_INT 1
22933: ARRAY
22934: PPUSH
22935: LD_VAR 0 1
22939: PUSH
22940: LD_INT 2
22942: ARRAY
22943: PPUSH
22944: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
22948: LD_VAR 0 1
22952: PUSH
22953: LD_INT 1
22955: ARRAY
22956: PPUSH
22957: LD_VAR 0 1
22961: PUSH
22962: LD_INT 2
22964: ARRAY
22965: PPUSH
22966: CALL_OW 429
// end ; end ;
22970: LD_VAR 0 1
22974: RET
// every 0 0$1 trigger StreamModeActive and sReset do
22975: LD_EXP 61
22979: PUSH
22980: LD_EXP 83
22984: AND
22985: IFFALSE 22997
22987: GO 22989
22989: DISABLE
// YouLost (  ) ;
22990: LD_STRING 
22992: PPUSH
22993: CALL_OW 104
22997: END
// every 0 0$1 trigger StreamModeActive and sFog do
22998: LD_EXP 61
23002: PUSH
23003: LD_EXP 82
23007: AND
23008: IFFALSE 23022
23010: GO 23012
23012: DISABLE
// FogOff ( your_side ) ;
23013: LD_OWVAR 2
23017: PPUSH
23018: CALL_OW 344
23022: END
// every 0 0$1 trigger StreamModeActive and sSun do
23023: LD_EXP 61
23027: PUSH
23028: LD_EXP 84
23032: AND
23033: IFFALSE 23061
23035: GO 23037
23037: DISABLE
// begin solar_recharge_percent := 0 ;
23038: LD_ADDR_OWVAR 79
23042: PUSH
23043: LD_INT 0
23045: ST_TO_ADDR
// wait ( 5 5$00 ) ;
23046: LD_INT 10500
23048: PPUSH
23049: CALL_OW 67
// solar_recharge_percent := 100 ;
23053: LD_ADDR_OWVAR 79
23057: PUSH
23058: LD_INT 100
23060: ST_TO_ADDR
// end ;
23061: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
23062: LD_EXP 61
23066: PUSH
23067: LD_EXP 85
23071: AND
23072: IFFALSE 23311
23074: GO 23076
23076: DISABLE
23077: LD_INT 0
23079: PPUSH
23080: PPUSH
23081: PPUSH
// begin tmp := [ ] ;
23082: LD_ADDR_VAR 0 3
23086: PUSH
23087: EMPTY
23088: ST_TO_ADDR
// for i := 1 to 6 do
23089: LD_ADDR_VAR 0 1
23093: PUSH
23094: DOUBLE
23095: LD_INT 1
23097: DEC
23098: ST_TO_ADDR
23099: LD_INT 6
23101: PUSH
23102: FOR_TO
23103: IFFALSE 23208
// begin uc_nation := nation_nature ;
23105: LD_ADDR_OWVAR 21
23109: PUSH
23110: LD_INT 0
23112: ST_TO_ADDR
// uc_side := 0 ;
23113: LD_ADDR_OWVAR 20
23117: PUSH
23118: LD_INT 0
23120: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
23121: LD_ADDR_OWVAR 29
23125: PUSH
23126: LD_INT 12
23128: PUSH
23129: LD_INT 12
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: ST_TO_ADDR
// hc_agressivity := 20 ;
23136: LD_ADDR_OWVAR 35
23140: PUSH
23141: LD_INT 20
23143: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
23144: LD_ADDR_OWVAR 28
23148: PUSH
23149: LD_INT 17
23151: ST_TO_ADDR
// hc_gallery :=  ;
23152: LD_ADDR_OWVAR 33
23156: PUSH
23157: LD_STRING 
23159: ST_TO_ADDR
// hc_name :=  ;
23160: LD_ADDR_OWVAR 26
23164: PUSH
23165: LD_STRING 
23167: ST_TO_ADDR
// un := CreateHuman ;
23168: LD_ADDR_VAR 0 2
23172: PUSH
23173: CALL_OW 44
23177: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
23178: LD_VAR 0 2
23182: PPUSH
23183: LD_INT 1
23185: PPUSH
23186: CALL_OW 51
// tmp := tmp ^ un ;
23190: LD_ADDR_VAR 0 3
23194: PUSH
23195: LD_VAR 0 3
23199: PUSH
23200: LD_VAR 0 2
23204: ADD
23205: ST_TO_ADDR
// end ;
23206: GO 23102
23208: POP
23209: POP
// repeat wait ( 0 0$1 ) ;
23210: LD_INT 35
23212: PPUSH
23213: CALL_OW 67
// for un in tmp do
23217: LD_ADDR_VAR 0 2
23221: PUSH
23222: LD_VAR 0 3
23226: PUSH
23227: FOR_IN
23228: IFFALSE 23302
// begin if IsDead ( un ) then
23230: LD_VAR 0 2
23234: PPUSH
23235: CALL_OW 301
23239: IFFALSE 23259
// begin tmp := tmp diff un ;
23241: LD_ADDR_VAR 0 3
23245: PUSH
23246: LD_VAR 0 3
23250: PUSH
23251: LD_VAR 0 2
23255: DIFF
23256: ST_TO_ADDR
// continue ;
23257: GO 23227
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
23259: LD_VAR 0 2
23263: PPUSH
23264: LD_INT 3
23266: PUSH
23267: LD_INT 22
23269: PUSH
23270: LD_INT 0
23272: PUSH
23273: EMPTY
23274: LIST
23275: LIST
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PPUSH
23281: CALL_OW 69
23285: PPUSH
23286: LD_VAR 0 2
23290: PPUSH
23291: CALL_OW 74
23295: PPUSH
23296: CALL_OW 115
// end ;
23300: GO 23227
23302: POP
23303: POP
// until not tmp ;
23304: LD_VAR 0 3
23308: NOT
23309: IFFALSE 23210
// end ;
23311: PPOPN 3
23313: END
// every 0 0$1 trigger StreamModeActive and sTroll do
23314: LD_EXP 61
23318: PUSH
23319: LD_EXP 86
23323: AND
23324: IFFALSE 23378
23326: GO 23328
23328: DISABLE
// begin ToLua ( displayTroll(); ) ;
23329: LD_STRING displayTroll();
23331: PPUSH
23332: CALL_OW 559
// wait ( 3 3$00 ) ;
23336: LD_INT 6300
23338: PPUSH
23339: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23343: LD_STRING hideTroll();
23345: PPUSH
23346: CALL_OW 559
// wait ( 1 1$00 ) ;
23350: LD_INT 2100
23352: PPUSH
23353: CALL_OW 67
// ToLua ( displayTroll(); ) ;
23357: LD_STRING displayTroll();
23359: PPUSH
23360: CALL_OW 559
// wait ( 1 1$00 ) ;
23364: LD_INT 2100
23366: PPUSH
23367: CALL_OW 67
// ToLua ( hideTroll(); ) ;
23371: LD_STRING hideTroll();
23373: PPUSH
23374: CALL_OW 559
// end ;
23378: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
23379: LD_EXP 61
23383: PUSH
23384: LD_EXP 87
23388: AND
23389: IFFALSE 23452
23391: GO 23393
23393: DISABLE
23394: LD_INT 0
23396: PPUSH
// begin p := 0 ;
23397: LD_ADDR_VAR 0 1
23401: PUSH
23402: LD_INT 0
23404: ST_TO_ADDR
// repeat game_speed := 1 ;
23405: LD_ADDR_OWVAR 65
23409: PUSH
23410: LD_INT 1
23412: ST_TO_ADDR
// wait ( 0 0$1 ) ;
23413: LD_INT 35
23415: PPUSH
23416: CALL_OW 67
// p := p + 1 ;
23420: LD_ADDR_VAR 0 1
23424: PUSH
23425: LD_VAR 0 1
23429: PUSH
23430: LD_INT 1
23432: PLUS
23433: ST_TO_ADDR
// until p >= 60 ;
23434: LD_VAR 0 1
23438: PUSH
23439: LD_INT 60
23441: GREATEREQUAL
23442: IFFALSE 23405
// game_speed := 4 ;
23444: LD_ADDR_OWVAR 65
23448: PUSH
23449: LD_INT 4
23451: ST_TO_ADDR
// end ;
23452: PPOPN 1
23454: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
23455: LD_EXP 61
23459: PUSH
23460: LD_EXP 88
23464: AND
23465: IFFALSE 23611
23467: GO 23469
23469: DISABLE
23470: LD_INT 0
23472: PPUSH
23473: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
23474: LD_ADDR_VAR 0 1
23478: PUSH
23479: LD_INT 22
23481: PUSH
23482: LD_OWVAR 2
23486: PUSH
23487: EMPTY
23488: LIST
23489: LIST
23490: PUSH
23491: LD_INT 2
23493: PUSH
23494: LD_INT 30
23496: PUSH
23497: LD_INT 0
23499: PUSH
23500: EMPTY
23501: LIST
23502: LIST
23503: PUSH
23504: LD_INT 30
23506: PUSH
23507: LD_INT 1
23509: PUSH
23510: EMPTY
23511: LIST
23512: LIST
23513: PUSH
23514: EMPTY
23515: LIST
23516: LIST
23517: LIST
23518: PUSH
23519: EMPTY
23520: LIST
23521: LIST
23522: PPUSH
23523: CALL_OW 69
23527: ST_TO_ADDR
// if not depot then
23528: LD_VAR 0 1
23532: NOT
23533: IFFALSE 23537
// exit ;
23535: GO 23611
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
23537: LD_ADDR_VAR 0 2
23541: PUSH
23542: LD_VAR 0 1
23546: PUSH
23547: LD_INT 1
23549: PPUSH
23550: LD_VAR 0 1
23554: PPUSH
23555: CALL_OW 12
23559: ARRAY
23560: PPUSH
23561: CALL_OW 274
23565: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
23566: LD_VAR 0 2
23570: PPUSH
23571: LD_INT 1
23573: PPUSH
23574: LD_INT 0
23576: PPUSH
23577: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
23581: LD_VAR 0 2
23585: PPUSH
23586: LD_INT 2
23588: PPUSH
23589: LD_INT 0
23591: PPUSH
23592: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
23596: LD_VAR 0 2
23600: PPUSH
23601: LD_INT 3
23603: PPUSH
23604: LD_INT 0
23606: PPUSH
23607: CALL_OW 277
// end ;
23611: PPOPN 2
23613: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
23614: LD_EXP 61
23618: PUSH
23619: LD_EXP 89
23623: AND
23624: IFFALSE 23721
23626: GO 23628
23628: DISABLE
23629: LD_INT 0
23631: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
23632: LD_ADDR_VAR 0 1
23636: PUSH
23637: LD_INT 22
23639: PUSH
23640: LD_OWVAR 2
23644: PUSH
23645: EMPTY
23646: LIST
23647: LIST
23648: PUSH
23649: LD_INT 21
23651: PUSH
23652: LD_INT 1
23654: PUSH
23655: EMPTY
23656: LIST
23657: LIST
23658: PUSH
23659: LD_INT 3
23661: PUSH
23662: LD_INT 23
23664: PUSH
23665: LD_INT 0
23667: PUSH
23668: EMPTY
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PUSH
23676: EMPTY
23677: LIST
23678: LIST
23679: LIST
23680: PPUSH
23681: CALL_OW 69
23685: ST_TO_ADDR
// if not tmp then
23686: LD_VAR 0 1
23690: NOT
23691: IFFALSE 23695
// exit ;
23693: GO 23721
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
23695: LD_VAR 0 1
23699: PUSH
23700: LD_INT 1
23702: PPUSH
23703: LD_VAR 0 1
23707: PPUSH
23708: CALL_OW 12
23712: ARRAY
23713: PPUSH
23714: LD_INT 200
23716: PPUSH
23717: CALL_OW 234
// end ;
23721: PPOPN 1
23723: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
23724: LD_EXP 61
23728: PUSH
23729: LD_EXP 90
23733: AND
23734: IFFALSE 23813
23736: GO 23738
23738: DISABLE
23739: LD_INT 0
23741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
23742: LD_ADDR_VAR 0 1
23746: PUSH
23747: LD_INT 22
23749: PUSH
23750: LD_OWVAR 2
23754: PUSH
23755: EMPTY
23756: LIST
23757: LIST
23758: PUSH
23759: LD_INT 21
23761: PUSH
23762: LD_INT 2
23764: PUSH
23765: EMPTY
23766: LIST
23767: LIST
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PPUSH
23773: CALL_OW 69
23777: ST_TO_ADDR
// if not tmp then
23778: LD_VAR 0 1
23782: NOT
23783: IFFALSE 23787
// exit ;
23785: GO 23813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
23787: LD_VAR 0 1
23791: PUSH
23792: LD_INT 1
23794: PPUSH
23795: LD_VAR 0 1
23799: PPUSH
23800: CALL_OW 12
23804: ARRAY
23805: PPUSH
23806: LD_INT 60
23808: PPUSH
23809: CALL_OW 234
// end ;
23813: PPOPN 1
23815: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
23816: LD_EXP 61
23820: PUSH
23821: LD_EXP 91
23825: AND
23826: IFFALSE 23925
23828: GO 23830
23830: DISABLE
23831: LD_INT 0
23833: PPUSH
23834: PPUSH
// begin enable ;
23835: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
23836: LD_ADDR_VAR 0 1
23840: PUSH
23841: LD_INT 22
23843: PUSH
23844: LD_OWVAR 2
23848: PUSH
23849: EMPTY
23850: LIST
23851: LIST
23852: PUSH
23853: LD_INT 61
23855: PUSH
23856: EMPTY
23857: LIST
23858: PUSH
23859: LD_INT 33
23861: PUSH
23862: LD_INT 2
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: LIST
23873: PPUSH
23874: CALL_OW 69
23878: ST_TO_ADDR
// if not tmp then
23879: LD_VAR 0 1
23883: NOT
23884: IFFALSE 23888
// exit ;
23886: GO 23925
// for i in tmp do
23888: LD_ADDR_VAR 0 2
23892: PUSH
23893: LD_VAR 0 1
23897: PUSH
23898: FOR_IN
23899: IFFALSE 23923
// if IsControledBy ( i ) then
23901: LD_VAR 0 2
23905: PPUSH
23906: CALL_OW 312
23910: IFFALSE 23921
// ComUnlink ( i ) ;
23912: LD_VAR 0 2
23916: PPUSH
23917: CALL_OW 136
23921: GO 23898
23923: POP
23924: POP
// end ;
23925: PPOPN 2
23927: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
23928: LD_EXP 61
23932: PUSH
23933: LD_EXP 92
23937: AND
23938: IFFALSE 24078
23940: GO 23942
23942: DISABLE
23943: LD_INT 0
23945: PPUSH
23946: PPUSH
// begin ToLua ( displayPowell(); ) ;
23947: LD_STRING displayPowell();
23949: PPUSH
23950: CALL_OW 559
// uc_side := 0 ;
23954: LD_ADDR_OWVAR 20
23958: PUSH
23959: LD_INT 0
23961: ST_TO_ADDR
// uc_nation := 2 ;
23962: LD_ADDR_OWVAR 21
23966: PUSH
23967: LD_INT 2
23969: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
23970: LD_ADDR_OWVAR 37
23974: PUSH
23975: LD_INT 14
23977: ST_TO_ADDR
// vc_engine := engine_siberite ;
23978: LD_ADDR_OWVAR 39
23982: PUSH
23983: LD_INT 3
23985: ST_TO_ADDR
// vc_control := control_apeman ;
23986: LD_ADDR_OWVAR 38
23990: PUSH
23991: LD_INT 5
23993: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
23994: LD_ADDR_OWVAR 40
23998: PUSH
23999: LD_INT 29
24001: ST_TO_ADDR
// un := CreateVehicle ;
24002: LD_ADDR_VAR 0 2
24006: PUSH
24007: CALL_OW 45
24011: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24012: LD_VAR 0 2
24016: PPUSH
24017: LD_INT 1
24019: PPUSH
24020: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24024: LD_INT 35
24026: PPUSH
24027: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24031: LD_VAR 0 2
24035: PPUSH
24036: LD_INT 22
24038: PUSH
24039: LD_OWVAR 2
24043: PUSH
24044: EMPTY
24045: LIST
24046: LIST
24047: PPUSH
24048: CALL_OW 69
24052: PPUSH
24053: LD_VAR 0 2
24057: PPUSH
24058: CALL_OW 74
24062: PPUSH
24063: CALL_OW 115
// until IsDead ( un ) ;
24067: LD_VAR 0 2
24071: PPUSH
24072: CALL_OW 301
24076: IFFALSE 24024
// end ;
24078: PPOPN 2
24080: END
// every 0 0$1 trigger StreamModeActive and sStu do
24081: LD_EXP 61
24085: PUSH
24086: LD_EXP 100
24090: AND
24091: IFFALSE 24107
24093: GO 24095
24095: DISABLE
// begin ToLua ( displayStucuk(); ) ;
24096: LD_STRING displayStucuk();
24098: PPUSH
24099: CALL_OW 559
// ResetFog ;
24103: CALL_OW 335
// end ;
24107: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
24108: LD_EXP 61
24112: PUSH
24113: LD_EXP 93
24117: AND
24118: IFFALSE 24259
24120: GO 24122
24122: DISABLE
24123: LD_INT 0
24125: PPUSH
24126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24127: LD_ADDR_VAR 0 2
24131: PUSH
24132: LD_INT 22
24134: PUSH
24135: LD_OWVAR 2
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 21
24146: PUSH
24147: LD_INT 1
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: PPUSH
24158: CALL_OW 69
24162: ST_TO_ADDR
// if not tmp then
24163: LD_VAR 0 2
24167: NOT
24168: IFFALSE 24172
// exit ;
24170: GO 24259
// un := tmp [ rand ( 1 , tmp ) ] ;
24172: LD_ADDR_VAR 0 1
24176: PUSH
24177: LD_VAR 0 2
24181: PUSH
24182: LD_INT 1
24184: PPUSH
24185: LD_VAR 0 2
24189: PPUSH
24190: CALL_OW 12
24194: ARRAY
24195: ST_TO_ADDR
// SetSide ( un , 0 ) ;
24196: LD_VAR 0 1
24200: PPUSH
24201: LD_INT 0
24203: PPUSH
24204: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
24208: LD_VAR 0 1
24212: PPUSH
24213: LD_OWVAR 3
24217: PUSH
24218: LD_VAR 0 1
24222: DIFF
24223: PPUSH
24224: LD_VAR 0 1
24228: PPUSH
24229: CALL_OW 74
24233: PPUSH
24234: CALL_OW 115
// wait ( 0 0$20 ) ;
24238: LD_INT 700
24240: PPUSH
24241: CALL_OW 67
// SetSide ( un , your_side ) ;
24245: LD_VAR 0 1
24249: PPUSH
24250: LD_OWVAR 2
24254: PPUSH
24255: CALL_OW 235
// end ;
24259: PPOPN 2
24261: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
24262: LD_EXP 61
24266: PUSH
24267: LD_EXP 94
24271: AND
24272: IFFALSE 24378
24274: GO 24276
24276: DISABLE
24277: LD_INT 0
24279: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
24280: LD_ADDR_VAR 0 1
24284: PUSH
24285: LD_INT 22
24287: PUSH
24288: LD_OWVAR 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 2
24299: PUSH
24300: LD_INT 30
24302: PUSH
24303: LD_INT 0
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PUSH
24310: LD_INT 30
24312: PUSH
24313: LD_INT 1
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: EMPTY
24321: LIST
24322: LIST
24323: LIST
24324: PUSH
24325: EMPTY
24326: LIST
24327: LIST
24328: PPUSH
24329: CALL_OW 69
24333: ST_TO_ADDR
// if not depot then
24334: LD_VAR 0 1
24338: NOT
24339: IFFALSE 24343
// exit ;
24341: GO 24378
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
24343: LD_VAR 0 1
24347: PUSH
24348: LD_INT 1
24350: ARRAY
24351: PPUSH
24352: CALL_OW 250
24356: PPUSH
24357: LD_VAR 0 1
24361: PUSH
24362: LD_INT 1
24364: ARRAY
24365: PPUSH
24366: CALL_OW 251
24370: PPUSH
24371: LD_INT 70
24373: PPUSH
24374: CALL_OW 495
// end ;
24378: PPOPN 1
24380: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
24381: LD_EXP 61
24385: PUSH
24386: LD_EXP 95
24390: AND
24391: IFFALSE 24602
24393: GO 24395
24395: DISABLE
24396: LD_INT 0
24398: PPUSH
24399: PPUSH
24400: PPUSH
24401: PPUSH
24402: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
24403: LD_ADDR_VAR 0 5
24407: PUSH
24408: LD_INT 22
24410: PUSH
24411: LD_OWVAR 2
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: LD_INT 21
24422: PUSH
24423: LD_INT 1
24425: PUSH
24426: EMPTY
24427: LIST
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PPUSH
24434: CALL_OW 69
24438: ST_TO_ADDR
// if not tmp then
24439: LD_VAR 0 5
24443: NOT
24444: IFFALSE 24448
// exit ;
24446: GO 24602
// for i in tmp do
24448: LD_ADDR_VAR 0 1
24452: PUSH
24453: LD_VAR 0 5
24457: PUSH
24458: FOR_IN
24459: IFFALSE 24600
// begin d := rand ( 0 , 5 ) ;
24461: LD_ADDR_VAR 0 4
24465: PUSH
24466: LD_INT 0
24468: PPUSH
24469: LD_INT 5
24471: PPUSH
24472: CALL_OW 12
24476: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
24477: LD_ADDR_VAR 0 2
24481: PUSH
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 250
24491: PPUSH
24492: LD_VAR 0 4
24496: PPUSH
24497: LD_INT 3
24499: PPUSH
24500: LD_INT 12
24502: PPUSH
24503: CALL_OW 12
24507: PPUSH
24508: CALL_OW 272
24512: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
24513: LD_ADDR_VAR 0 3
24517: PUSH
24518: LD_VAR 0 1
24522: PPUSH
24523: CALL_OW 251
24527: PPUSH
24528: LD_VAR 0 4
24532: PPUSH
24533: LD_INT 3
24535: PPUSH
24536: LD_INT 12
24538: PPUSH
24539: CALL_OW 12
24543: PPUSH
24544: CALL_OW 273
24548: ST_TO_ADDR
// if ValidHex ( x , y ) then
24549: LD_VAR 0 2
24553: PPUSH
24554: LD_VAR 0 3
24558: PPUSH
24559: CALL_OW 488
24563: IFFALSE 24598
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
24565: LD_VAR 0 1
24569: PPUSH
24570: LD_VAR 0 2
24574: PPUSH
24575: LD_VAR 0 3
24579: PPUSH
24580: LD_INT 3
24582: PPUSH
24583: LD_INT 6
24585: PPUSH
24586: CALL_OW 12
24590: PPUSH
24591: LD_INT 1
24593: PPUSH
24594: CALL_OW 483
// end ;
24598: GO 24458
24600: POP
24601: POP
// end ;
24602: PPOPN 5
24604: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
24605: LD_EXP 61
24609: PUSH
24610: LD_EXP 96
24614: AND
24615: IFFALSE 24709
24617: GO 24619
24619: DISABLE
24620: LD_INT 0
24622: PPUSH
24623: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
24624: LD_ADDR_VAR 0 2
24628: PUSH
24629: LD_INT 22
24631: PUSH
24632: LD_OWVAR 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: LD_INT 32
24643: PUSH
24644: LD_INT 1
24646: PUSH
24647: EMPTY
24648: LIST
24649: LIST
24650: PUSH
24651: LD_INT 21
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: EMPTY
24658: LIST
24659: LIST
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: LIST
24665: PPUSH
24666: CALL_OW 69
24670: ST_TO_ADDR
// if not tmp then
24671: LD_VAR 0 2
24675: NOT
24676: IFFALSE 24680
// exit ;
24678: GO 24709
// for i in tmp do
24680: LD_ADDR_VAR 0 1
24684: PUSH
24685: LD_VAR 0 2
24689: PUSH
24690: FOR_IN
24691: IFFALSE 24707
// SetFuel ( i , 0 ) ;
24693: LD_VAR 0 1
24697: PPUSH
24698: LD_INT 0
24700: PPUSH
24701: CALL_OW 240
24705: GO 24690
24707: POP
24708: POP
// end ;
24709: PPOPN 2
24711: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
24712: LD_EXP 61
24716: PUSH
24717: LD_EXP 97
24721: AND
24722: IFFALSE 24788
24724: GO 24726
24726: DISABLE
24727: LD_INT 0
24729: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
24730: LD_ADDR_VAR 0 1
24734: PUSH
24735: LD_INT 22
24737: PUSH
24738: LD_OWVAR 2
24742: PUSH
24743: EMPTY
24744: LIST
24745: LIST
24746: PUSH
24747: LD_INT 30
24749: PUSH
24750: LD_INT 29
24752: PUSH
24753: EMPTY
24754: LIST
24755: LIST
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PPUSH
24761: CALL_OW 69
24765: ST_TO_ADDR
// if not tmp then
24766: LD_VAR 0 1
24770: NOT
24771: IFFALSE 24775
// exit ;
24773: GO 24788
// DestroyUnit ( tmp [ 1 ] ) ;
24775: LD_VAR 0 1
24779: PUSH
24780: LD_INT 1
24782: ARRAY
24783: PPUSH
24784: CALL_OW 65
// end ;
24788: PPOPN 1
24790: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
24791: LD_EXP 61
24795: PUSH
24796: LD_EXP 99
24800: AND
24801: IFFALSE 24930
24803: GO 24805
24805: DISABLE
24806: LD_INT 0
24808: PPUSH
// begin uc_side := 0 ;
24809: LD_ADDR_OWVAR 20
24813: PUSH
24814: LD_INT 0
24816: ST_TO_ADDR
// uc_nation := nation_arabian ;
24817: LD_ADDR_OWVAR 21
24821: PUSH
24822: LD_INT 2
24824: ST_TO_ADDR
// hc_gallery :=  ;
24825: LD_ADDR_OWVAR 33
24829: PUSH
24830: LD_STRING 
24832: ST_TO_ADDR
// hc_name :=  ;
24833: LD_ADDR_OWVAR 26
24837: PUSH
24838: LD_STRING 
24840: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
24841: LD_INT 1
24843: PPUSH
24844: LD_INT 11
24846: PPUSH
24847: LD_INT 10
24849: PPUSH
24850: CALL_OW 380
// un := CreateHuman ;
24854: LD_ADDR_VAR 0 1
24858: PUSH
24859: CALL_OW 44
24863: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
24864: LD_VAR 0 1
24868: PPUSH
24869: LD_INT 1
24871: PPUSH
24872: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
24876: LD_INT 35
24878: PPUSH
24879: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
24883: LD_VAR 0 1
24887: PPUSH
24888: LD_INT 22
24890: PUSH
24891: LD_OWVAR 2
24895: PUSH
24896: EMPTY
24897: LIST
24898: LIST
24899: PPUSH
24900: CALL_OW 69
24904: PPUSH
24905: LD_VAR 0 1
24909: PPUSH
24910: CALL_OW 74
24914: PPUSH
24915: CALL_OW 115
// until IsDead ( un ) ;
24919: LD_VAR 0 1
24923: PPUSH
24924: CALL_OW 301
24928: IFFALSE 24876
// end ;
24930: PPOPN 1
24932: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
24933: LD_EXP 61
24937: PUSH
24938: LD_EXP 101
24942: AND
24943: IFFALSE 24955
24945: GO 24947
24947: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
24948: LD_STRING earthquake(getX(game), 0, 32)
24950: PPUSH
24951: CALL_OW 559
24955: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
24956: LD_EXP 61
24960: PUSH
24961: LD_EXP 102
24965: AND
24966: IFFALSE 25057
24968: GO 24970
24970: DISABLE
24971: LD_INT 0
24973: PPUSH
// begin enable ;
24974: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
24975: LD_ADDR_VAR 0 1
24979: PUSH
24980: LD_INT 22
24982: PUSH
24983: LD_OWVAR 2
24987: PUSH
24988: EMPTY
24989: LIST
24990: LIST
24991: PUSH
24992: LD_INT 21
24994: PUSH
24995: LD_INT 2
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 33
25004: PUSH
25005: LD_INT 3
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: LIST
25016: PPUSH
25017: CALL_OW 69
25021: ST_TO_ADDR
// if not tmp then
25022: LD_VAR 0 1
25026: NOT
25027: IFFALSE 25031
// exit ;
25029: GO 25057
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25031: LD_VAR 0 1
25035: PUSH
25036: LD_INT 1
25038: PPUSH
25039: LD_VAR 0 1
25043: PPUSH
25044: CALL_OW 12
25048: ARRAY
25049: PPUSH
25050: LD_INT 1
25052: PPUSH
25053: CALL_OW 234
// end ;
25057: PPOPN 1
25059: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
25060: LD_EXP 61
25064: PUSH
25065: LD_EXP 103
25069: AND
25070: IFFALSE 25211
25072: GO 25074
25074: DISABLE
25075: LD_INT 0
25077: PPUSH
25078: PPUSH
25079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25080: LD_ADDR_VAR 0 3
25084: PUSH
25085: LD_INT 22
25087: PUSH
25088: LD_OWVAR 2
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 25
25099: PUSH
25100: LD_INT 1
25102: PUSH
25103: EMPTY
25104: LIST
25105: LIST
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PPUSH
25111: CALL_OW 69
25115: ST_TO_ADDR
// if not tmp then
25116: LD_VAR 0 3
25120: NOT
25121: IFFALSE 25125
// exit ;
25123: GO 25211
// un := tmp [ rand ( 1 , tmp ) ] ;
25125: LD_ADDR_VAR 0 2
25129: PUSH
25130: LD_VAR 0 3
25134: PUSH
25135: LD_INT 1
25137: PPUSH
25138: LD_VAR 0 3
25142: PPUSH
25143: CALL_OW 12
25147: ARRAY
25148: ST_TO_ADDR
// if Crawls ( un ) then
25149: LD_VAR 0 2
25153: PPUSH
25154: CALL_OW 318
25158: IFFALSE 25169
// ComWalk ( un ) ;
25160: LD_VAR 0 2
25164: PPUSH
25165: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
25169: LD_VAR 0 2
25173: PPUSH
25174: LD_INT 9
25176: PPUSH
25177: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
25181: LD_INT 28
25183: PPUSH
25184: LD_OWVAR 2
25188: PPUSH
25189: LD_INT 2
25191: PPUSH
25192: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
25196: LD_INT 29
25198: PPUSH
25199: LD_OWVAR 2
25203: PPUSH
25204: LD_INT 2
25206: PPUSH
25207: CALL_OW 322
// end ;
25211: PPOPN 3
25213: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
25214: LD_EXP 61
25218: PUSH
25219: LD_EXP 104
25223: AND
25224: IFFALSE 25335
25226: GO 25228
25228: DISABLE
25229: LD_INT 0
25231: PPUSH
25232: PPUSH
25233: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
25234: LD_ADDR_VAR 0 3
25238: PUSH
25239: LD_INT 22
25241: PUSH
25242: LD_OWVAR 2
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 25
25253: PUSH
25254: LD_INT 1
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PPUSH
25265: CALL_OW 69
25269: ST_TO_ADDR
// if not tmp then
25270: LD_VAR 0 3
25274: NOT
25275: IFFALSE 25279
// exit ;
25277: GO 25335
// un := tmp [ rand ( 1 , tmp ) ] ;
25279: LD_ADDR_VAR 0 2
25283: PUSH
25284: LD_VAR 0 3
25288: PUSH
25289: LD_INT 1
25291: PPUSH
25292: LD_VAR 0 3
25296: PPUSH
25297: CALL_OW 12
25301: ARRAY
25302: ST_TO_ADDR
// if Crawls ( un ) then
25303: LD_VAR 0 2
25307: PPUSH
25308: CALL_OW 318
25312: IFFALSE 25323
// ComWalk ( un ) ;
25314: LD_VAR 0 2
25318: PPUSH
25319: CALL_OW 138
// SetClass ( un , class_mortar ) ;
25323: LD_VAR 0 2
25327: PPUSH
25328: LD_INT 8
25330: PPUSH
25331: CALL_OW 336
// end ;
25335: PPOPN 3
25337: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
25338: LD_EXP 61
25342: PUSH
25343: LD_EXP 105
25347: AND
25348: IFFALSE 25492
25350: GO 25352
25352: DISABLE
25353: LD_INT 0
25355: PPUSH
25356: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
25357: LD_ADDR_VAR 0 2
25361: PUSH
25362: LD_INT 22
25364: PUSH
25365: LD_OWVAR 2
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: LD_INT 21
25376: PUSH
25377: LD_INT 2
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: PUSH
25384: LD_INT 2
25386: PUSH
25387: LD_INT 34
25389: PUSH
25390: LD_INT 12
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: PUSH
25397: LD_INT 34
25399: PUSH
25400: LD_INT 51
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 34
25409: PUSH
25410: LD_INT 32
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: LIST
25427: PPUSH
25428: CALL_OW 69
25432: ST_TO_ADDR
// if not tmp then
25433: LD_VAR 0 2
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25492
// for i in tmp do
25442: LD_ADDR_VAR 0 1
25446: PUSH
25447: LD_VAR 0 2
25451: PUSH
25452: FOR_IN
25453: IFFALSE 25490
// if GetCargo ( i , mat_artifact ) = 0 then
25455: LD_VAR 0 1
25459: PPUSH
25460: LD_INT 4
25462: PPUSH
25463: CALL_OW 289
25467: PUSH
25468: LD_INT 0
25470: EQUAL
25471: IFFALSE 25488
// SetCargo ( i , mat_siberit , 100 ) ;
25473: LD_VAR 0 1
25477: PPUSH
25478: LD_INT 3
25480: PPUSH
25481: LD_INT 100
25483: PPUSH
25484: CALL_OW 290
25488: GO 25452
25490: POP
25491: POP
// end ;
25492: PPOPN 2
25494: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
25495: LD_EXP 61
25499: PUSH
25500: LD_EXP 106
25504: AND
25505: IFFALSE 25688
25507: GO 25509
25509: DISABLE
25510: LD_INT 0
25512: PPUSH
25513: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
25514: LD_ADDR_VAR 0 2
25518: PUSH
25519: LD_INT 22
25521: PUSH
25522: LD_OWVAR 2
25526: PUSH
25527: EMPTY
25528: LIST
25529: LIST
25530: PPUSH
25531: CALL_OW 69
25535: ST_TO_ADDR
// if not tmp then
25536: LD_VAR 0 2
25540: NOT
25541: IFFALSE 25545
// exit ;
25543: GO 25688
// for i := 1 to 2 do
25545: LD_ADDR_VAR 0 1
25549: PUSH
25550: DOUBLE
25551: LD_INT 1
25553: DEC
25554: ST_TO_ADDR
25555: LD_INT 2
25557: PUSH
25558: FOR_TO
25559: IFFALSE 25686
// begin uc_side := your_side ;
25561: LD_ADDR_OWVAR 20
25565: PUSH
25566: LD_OWVAR 2
25570: ST_TO_ADDR
// uc_nation := nation_american ;
25571: LD_ADDR_OWVAR 21
25575: PUSH
25576: LD_INT 1
25578: ST_TO_ADDR
// vc_chassis := us_morphling ;
25579: LD_ADDR_OWVAR 37
25583: PUSH
25584: LD_INT 5
25586: ST_TO_ADDR
// vc_engine := engine_siberite ;
25587: LD_ADDR_OWVAR 39
25591: PUSH
25592: LD_INT 3
25594: ST_TO_ADDR
// vc_control := control_computer ;
25595: LD_ADDR_OWVAR 38
25599: PUSH
25600: LD_INT 3
25602: ST_TO_ADDR
// vc_weapon := us_double_laser ;
25603: LD_ADDR_OWVAR 40
25607: PUSH
25608: LD_INT 10
25610: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
25611: LD_VAR 0 2
25615: PUSH
25616: LD_INT 1
25618: ARRAY
25619: PPUSH
25620: CALL_OW 310
25624: NOT
25625: IFFALSE 25672
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
25627: CALL_OW 45
25631: PPUSH
25632: LD_VAR 0 2
25636: PUSH
25637: LD_INT 1
25639: ARRAY
25640: PPUSH
25641: CALL_OW 250
25645: PPUSH
25646: LD_VAR 0 2
25650: PUSH
25651: LD_INT 1
25653: ARRAY
25654: PPUSH
25655: CALL_OW 251
25659: PPUSH
25660: LD_INT 12
25662: PPUSH
25663: LD_INT 1
25665: PPUSH
25666: CALL_OW 50
25670: GO 25684
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
25672: CALL_OW 45
25676: PPUSH
25677: LD_INT 1
25679: PPUSH
25680: CALL_OW 51
// end ;
25684: GO 25558
25686: POP
25687: POP
// end ;
25688: PPOPN 2
25690: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
25691: LD_EXP 61
25695: PUSH
25696: LD_EXP 107
25700: AND
25701: IFFALSE 25923
25703: GO 25705
25705: DISABLE
25706: LD_INT 0
25708: PPUSH
25709: PPUSH
25710: PPUSH
25711: PPUSH
25712: PPUSH
25713: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
25714: LD_ADDR_VAR 0 6
25718: PUSH
25719: LD_INT 22
25721: PUSH
25722: LD_OWVAR 2
25726: PUSH
25727: EMPTY
25728: LIST
25729: LIST
25730: PUSH
25731: LD_INT 21
25733: PUSH
25734: LD_INT 1
25736: PUSH
25737: EMPTY
25738: LIST
25739: LIST
25740: PUSH
25741: LD_INT 3
25743: PUSH
25744: LD_INT 23
25746: PUSH
25747: LD_INT 0
25749: PUSH
25750: EMPTY
25751: LIST
25752: LIST
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: LIST
25762: PPUSH
25763: CALL_OW 69
25767: ST_TO_ADDR
// if not tmp then
25768: LD_VAR 0 6
25772: NOT
25773: IFFALSE 25777
// exit ;
25775: GO 25923
// s1 := rand ( 1 , 4 ) ;
25777: LD_ADDR_VAR 0 2
25781: PUSH
25782: LD_INT 1
25784: PPUSH
25785: LD_INT 4
25787: PPUSH
25788: CALL_OW 12
25792: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
25793: LD_ADDR_VAR 0 4
25797: PUSH
25798: LD_VAR 0 6
25802: PUSH
25803: LD_INT 1
25805: ARRAY
25806: PPUSH
25807: LD_VAR 0 2
25811: PPUSH
25812: CALL_OW 259
25816: ST_TO_ADDR
// if s1 = 1 then
25817: LD_VAR 0 2
25821: PUSH
25822: LD_INT 1
25824: EQUAL
25825: IFFALSE 25845
// s2 := rand ( 2 , 4 ) else
25827: LD_ADDR_VAR 0 3
25831: PUSH
25832: LD_INT 2
25834: PPUSH
25835: LD_INT 4
25837: PPUSH
25838: CALL_OW 12
25842: ST_TO_ADDR
25843: GO 25853
// s2 := 1 ;
25845: LD_ADDR_VAR 0 3
25849: PUSH
25850: LD_INT 1
25852: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
25853: LD_ADDR_VAR 0 5
25857: PUSH
25858: LD_VAR 0 6
25862: PUSH
25863: LD_INT 1
25865: ARRAY
25866: PPUSH
25867: LD_VAR 0 3
25871: PPUSH
25872: CALL_OW 259
25876: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
25877: LD_VAR 0 6
25881: PUSH
25882: LD_INT 1
25884: ARRAY
25885: PPUSH
25886: LD_VAR 0 2
25890: PPUSH
25891: LD_VAR 0 5
25895: PPUSH
25896: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
25900: LD_VAR 0 6
25904: PUSH
25905: LD_INT 1
25907: ARRAY
25908: PPUSH
25909: LD_VAR 0 3
25913: PPUSH
25914: LD_VAR 0 4
25918: PPUSH
25919: CALL_OW 237
// end ;
25923: PPOPN 6
25925: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
25926: LD_EXP 61
25930: PUSH
25931: LD_EXP 108
25935: AND
25936: IFFALSE 26015
25938: GO 25940
25940: DISABLE
25941: LD_INT 0
25943: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
25944: LD_ADDR_VAR 0 1
25948: PUSH
25949: LD_INT 22
25951: PUSH
25952: LD_OWVAR 2
25956: PUSH
25957: EMPTY
25958: LIST
25959: LIST
25960: PUSH
25961: LD_INT 30
25963: PUSH
25964: LD_INT 3
25966: PUSH
25967: EMPTY
25968: LIST
25969: LIST
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PPUSH
25975: CALL_OW 69
25979: ST_TO_ADDR
// if not tmp then
25980: LD_VAR 0 1
25984: NOT
25985: IFFALSE 25989
// exit ;
25987: GO 26015
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
25989: LD_VAR 0 1
25993: PUSH
25994: LD_INT 1
25996: PPUSH
25997: LD_VAR 0 1
26001: PPUSH
26002: CALL_OW 12
26006: ARRAY
26007: PPUSH
26008: LD_INT 1
26010: PPUSH
26011: CALL_OW 234
// end ;
26015: PPOPN 1
26017: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
26018: LD_EXP 61
26022: PUSH
26023: LD_EXP 109
26027: AND
26028: IFFALSE 26140
26030: GO 26032
26032: DISABLE
26033: LD_INT 0
26035: PPUSH
26036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
26037: LD_ADDR_VAR 0 2
26041: PUSH
26042: LD_INT 22
26044: PUSH
26045: LD_OWVAR 2
26049: PUSH
26050: EMPTY
26051: LIST
26052: LIST
26053: PUSH
26054: LD_INT 2
26056: PUSH
26057: LD_INT 30
26059: PUSH
26060: LD_INT 27
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 30
26069: PUSH
26070: LD_INT 26
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 30
26079: PUSH
26080: LD_INT 28
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: PUSH
26087: EMPTY
26088: LIST
26089: LIST
26090: LIST
26091: LIST
26092: PUSH
26093: EMPTY
26094: LIST
26095: LIST
26096: PPUSH
26097: CALL_OW 69
26101: ST_TO_ADDR
// if not tmp then
26102: LD_VAR 0 2
26106: NOT
26107: IFFALSE 26111
// exit ;
26109: GO 26140
// for i in tmp do
26111: LD_ADDR_VAR 0 1
26115: PUSH
26116: LD_VAR 0 2
26120: PUSH
26121: FOR_IN
26122: IFFALSE 26138
// SetLives ( i , 1 ) ;
26124: LD_VAR 0 1
26128: PPUSH
26129: LD_INT 1
26131: PPUSH
26132: CALL_OW 234
26136: GO 26121
26138: POP
26139: POP
// end ;
26140: PPOPN 2
26142: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
26143: LD_EXP 61
26147: PUSH
26148: LD_EXP 110
26152: AND
26153: IFFALSE 26440
26155: GO 26157
26157: DISABLE
26158: LD_INT 0
26160: PPUSH
26161: PPUSH
26162: PPUSH
// begin i := rand ( 1 , 7 ) ;
26163: LD_ADDR_VAR 0 1
26167: PUSH
26168: LD_INT 1
26170: PPUSH
26171: LD_INT 7
26173: PPUSH
26174: CALL_OW 12
26178: ST_TO_ADDR
// case i of 1 :
26179: LD_VAR 0 1
26183: PUSH
26184: LD_INT 1
26186: DOUBLE
26187: EQUAL
26188: IFTRUE 26192
26190: GO 26202
26192: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
26193: LD_STRING earthquake(getX(game), 0, 32)
26195: PPUSH
26196: CALL_OW 559
26200: GO 26440
26202: LD_INT 2
26204: DOUBLE
26205: EQUAL
26206: IFTRUE 26210
26208: GO 26224
26210: POP
// begin ToLua ( displayStucuk(); ) ;
26211: LD_STRING displayStucuk();
26213: PPUSH
26214: CALL_OW 559
// ResetFog ;
26218: CALL_OW 335
// end ; 3 :
26222: GO 26440
26224: LD_INT 3
26226: DOUBLE
26227: EQUAL
26228: IFTRUE 26232
26230: GO 26336
26232: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
26233: LD_ADDR_VAR 0 2
26237: PUSH
26238: LD_INT 22
26240: PUSH
26241: LD_OWVAR 2
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 25
26252: PUSH
26253: LD_INT 1
26255: PUSH
26256: EMPTY
26257: LIST
26258: LIST
26259: PUSH
26260: EMPTY
26261: LIST
26262: LIST
26263: PPUSH
26264: CALL_OW 69
26268: ST_TO_ADDR
// if not tmp then
26269: LD_VAR 0 2
26273: NOT
26274: IFFALSE 26278
// exit ;
26276: GO 26440
// un := tmp [ rand ( 1 , tmp ) ] ;
26278: LD_ADDR_VAR 0 3
26282: PUSH
26283: LD_VAR 0 2
26287: PUSH
26288: LD_INT 1
26290: PPUSH
26291: LD_VAR 0 2
26295: PPUSH
26296: CALL_OW 12
26300: ARRAY
26301: ST_TO_ADDR
// if Crawls ( un ) then
26302: LD_VAR 0 3
26306: PPUSH
26307: CALL_OW 318
26311: IFFALSE 26322
// ComWalk ( un ) ;
26313: LD_VAR 0 3
26317: PPUSH
26318: CALL_OW 138
// SetClass ( un , class_mortar ) ;
26322: LD_VAR 0 3
26326: PPUSH
26327: LD_INT 8
26329: PPUSH
26330: CALL_OW 336
// end ; 4 :
26334: GO 26440
26336: LD_INT 4
26338: DOUBLE
26339: EQUAL
26340: IFTRUE 26344
26342: GO 26418
26344: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
26345: LD_ADDR_VAR 0 2
26349: PUSH
26350: LD_INT 22
26352: PUSH
26353: LD_OWVAR 2
26357: PUSH
26358: EMPTY
26359: LIST
26360: LIST
26361: PUSH
26362: LD_INT 30
26364: PUSH
26365: LD_INT 29
26367: PUSH
26368: EMPTY
26369: LIST
26370: LIST
26371: PUSH
26372: EMPTY
26373: LIST
26374: LIST
26375: PPUSH
26376: CALL_OW 69
26380: ST_TO_ADDR
// if not tmp then
26381: LD_VAR 0 2
26385: NOT
26386: IFFALSE 26390
// exit ;
26388: GO 26440
// CenterNowOnUnits ( tmp [ 1 ] ) ;
26390: LD_VAR 0 2
26394: PUSH
26395: LD_INT 1
26397: ARRAY
26398: PPUSH
26399: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
26403: LD_VAR 0 2
26407: PUSH
26408: LD_INT 1
26410: ARRAY
26411: PPUSH
26412: CALL_OW 65
// end ; 5 .. 7 :
26416: GO 26440
26418: LD_INT 5
26420: DOUBLE
26421: GREATEREQUAL
26422: IFFALSE 26430
26424: LD_INT 7
26426: DOUBLE
26427: LESSEQUAL
26428: IFTRUE 26432
26430: GO 26439
26432: POP
// StreamSibBomb ; end ;
26433: CALL 22677 0 0
26437: GO 26440
26439: POP
// end ;
26440: PPOPN 3
26442: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
26443: LD_EXP 61
26447: PUSH
26448: LD_EXP 111
26452: AND
26453: IFFALSE 26609
26455: GO 26457
26457: DISABLE
26458: LD_INT 0
26460: PPUSH
26461: PPUSH
26462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
26463: LD_ADDR_VAR 0 2
26467: PUSH
26468: LD_INT 81
26470: PUSH
26471: LD_OWVAR 2
26475: PUSH
26476: EMPTY
26477: LIST
26478: LIST
26479: PUSH
26480: LD_INT 2
26482: PUSH
26483: LD_INT 21
26485: PUSH
26486: LD_INT 1
26488: PUSH
26489: EMPTY
26490: LIST
26491: LIST
26492: PUSH
26493: LD_INT 21
26495: PUSH
26496: LD_INT 2
26498: PUSH
26499: EMPTY
26500: LIST
26501: LIST
26502: PUSH
26503: EMPTY
26504: LIST
26505: LIST
26506: LIST
26507: PUSH
26508: EMPTY
26509: LIST
26510: LIST
26511: PPUSH
26512: CALL_OW 69
26516: ST_TO_ADDR
// if not tmp then
26517: LD_VAR 0 2
26521: NOT
26522: IFFALSE 26526
// exit ;
26524: GO 26609
// p := 0 ;
26526: LD_ADDR_VAR 0 3
26530: PUSH
26531: LD_INT 0
26533: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26534: LD_INT 35
26536: PPUSH
26537: CALL_OW 67
// p := p + 1 ;
26541: LD_ADDR_VAR 0 3
26545: PUSH
26546: LD_VAR 0 3
26550: PUSH
26551: LD_INT 1
26553: PLUS
26554: ST_TO_ADDR
// for i in tmp do
26555: LD_ADDR_VAR 0 1
26559: PUSH
26560: LD_VAR 0 2
26564: PUSH
26565: FOR_IN
26566: IFFALSE 26597
// if GetLives ( i ) < 1000 then
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL_OW 256
26577: PUSH
26578: LD_INT 1000
26580: LESS
26581: IFFALSE 26595
// SetLives ( i , 1000 ) ;
26583: LD_VAR 0 1
26587: PPUSH
26588: LD_INT 1000
26590: PPUSH
26591: CALL_OW 234
26595: GO 26565
26597: POP
26598: POP
// until p > 20 ;
26599: LD_VAR 0 3
26603: PUSH
26604: LD_INT 20
26606: GREATER
26607: IFFALSE 26534
// end ;
26609: PPOPN 3
26611: END
// every 0 0$1 trigger StreamModeActive and sTime do
26612: LD_EXP 61
26616: PUSH
26617: LD_EXP 112
26621: AND
26622: IFFALSE 26657
26624: GO 26626
26626: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
26627: LD_INT 28
26629: PPUSH
26630: LD_OWVAR 2
26634: PPUSH
26635: LD_INT 2
26637: PPUSH
26638: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
26642: LD_INT 30
26644: PPUSH
26645: LD_OWVAR 2
26649: PPUSH
26650: LD_INT 2
26652: PPUSH
26653: CALL_OW 322
// end ;
26657: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
26658: LD_EXP 61
26662: PUSH
26663: LD_EXP 113
26667: AND
26668: IFFALSE 26789
26670: GO 26672
26672: DISABLE
26673: LD_INT 0
26675: PPUSH
26676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
26677: LD_ADDR_VAR 0 2
26681: PUSH
26682: LD_INT 22
26684: PUSH
26685: LD_OWVAR 2
26689: PUSH
26690: EMPTY
26691: LIST
26692: LIST
26693: PUSH
26694: LD_INT 21
26696: PUSH
26697: LD_INT 1
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: PUSH
26704: LD_INT 3
26706: PUSH
26707: LD_INT 23
26709: PUSH
26710: LD_INT 0
26712: PUSH
26713: EMPTY
26714: LIST
26715: LIST
26716: PUSH
26717: EMPTY
26718: LIST
26719: LIST
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: LIST
26725: PPUSH
26726: CALL_OW 69
26730: ST_TO_ADDR
// if not tmp then
26731: LD_VAR 0 2
26735: NOT
26736: IFFALSE 26740
// exit ;
26738: GO 26789
// for i in tmp do
26740: LD_ADDR_VAR 0 1
26744: PUSH
26745: LD_VAR 0 2
26749: PUSH
26750: FOR_IN
26751: IFFALSE 26787
// begin if Crawls ( i ) then
26753: LD_VAR 0 1
26757: PPUSH
26758: CALL_OW 318
26762: IFFALSE 26773
// ComWalk ( i ) ;
26764: LD_VAR 0 1
26768: PPUSH
26769: CALL_OW 138
// SetClass ( i , 2 ) ;
26773: LD_VAR 0 1
26777: PPUSH
26778: LD_INT 2
26780: PPUSH
26781: CALL_OW 336
// end ;
26785: GO 26750
26787: POP
26788: POP
// end ;
26789: PPOPN 2
26791: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
26792: LD_EXP 61
26796: PUSH
26797: LD_EXP 114
26801: AND
26802: IFFALSE 27090
26804: GO 26806
26806: DISABLE
26807: LD_INT 0
26809: PPUSH
26810: PPUSH
26811: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
26812: LD_OWVAR 2
26816: PPUSH
26817: LD_INT 9
26819: PPUSH
26820: LD_INT 1
26822: PPUSH
26823: LD_INT 1
26825: PPUSH
26826: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
26830: LD_INT 9
26832: PPUSH
26833: LD_OWVAR 2
26837: PPUSH
26838: CALL_OW 343
// uc_side := 9 ;
26842: LD_ADDR_OWVAR 20
26846: PUSH
26847: LD_INT 9
26849: ST_TO_ADDR
// uc_nation := 2 ;
26850: LD_ADDR_OWVAR 21
26854: PUSH
26855: LD_INT 2
26857: ST_TO_ADDR
// hc_name := Dark Warrior ;
26858: LD_ADDR_OWVAR 26
26862: PUSH
26863: LD_STRING Dark Warrior
26865: ST_TO_ADDR
// hc_gallery :=  ;
26866: LD_ADDR_OWVAR 33
26870: PUSH
26871: LD_STRING 
26873: ST_TO_ADDR
// hc_noskilllimit := true ;
26874: LD_ADDR_OWVAR 76
26878: PUSH
26879: LD_INT 1
26881: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
26882: LD_ADDR_OWVAR 31
26886: PUSH
26887: LD_INT 30
26889: PUSH
26890: LD_INT 30
26892: PUSH
26893: LD_INT 30
26895: PUSH
26896: LD_INT 30
26898: PUSH
26899: EMPTY
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: ST_TO_ADDR
// un := CreateHuman ;
26905: LD_ADDR_VAR 0 3
26909: PUSH
26910: CALL_OW 44
26914: ST_TO_ADDR
// hc_noskilllimit := false ;
26915: LD_ADDR_OWVAR 76
26919: PUSH
26920: LD_INT 0
26922: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
26923: LD_VAR 0 3
26927: PPUSH
26928: LD_INT 1
26930: PPUSH
26931: CALL_OW 51
// ToLua ( playRanger() ) ;
26935: LD_STRING playRanger()
26937: PPUSH
26938: CALL_OW 559
// p := 0 ;
26942: LD_ADDR_VAR 0 2
26946: PUSH
26947: LD_INT 0
26949: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
26950: LD_INT 35
26952: PPUSH
26953: CALL_OW 67
// p := p + 1 ;
26957: LD_ADDR_VAR 0 2
26961: PUSH
26962: LD_VAR 0 2
26966: PUSH
26967: LD_INT 1
26969: PLUS
26970: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
26971: LD_VAR 0 3
26975: PPUSH
26976: CALL_OW 256
26980: PUSH
26981: LD_INT 1000
26983: LESS
26984: IFFALSE 26998
// SetLives ( un , 1000 ) ;
26986: LD_VAR 0 3
26990: PPUSH
26991: LD_INT 1000
26993: PPUSH
26994: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
26998: LD_VAR 0 3
27002: PPUSH
27003: LD_INT 81
27005: PUSH
27006: LD_OWVAR 2
27010: PUSH
27011: EMPTY
27012: LIST
27013: LIST
27014: PUSH
27015: LD_INT 91
27017: PUSH
27018: LD_VAR 0 3
27022: PUSH
27023: LD_INT 30
27025: PUSH
27026: EMPTY
27027: LIST
27028: LIST
27029: LIST
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PPUSH
27035: CALL_OW 69
27039: PPUSH
27040: LD_VAR 0 3
27044: PPUSH
27045: CALL_OW 74
27049: PPUSH
27050: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
27054: LD_VAR 0 2
27058: PUSH
27059: LD_INT 80
27061: GREATER
27062: PUSH
27063: LD_VAR 0 3
27067: PPUSH
27068: CALL_OW 301
27072: OR
27073: IFFALSE 26950
// if un then
27075: LD_VAR 0 3
27079: IFFALSE 27090
// RemoveUnit ( un ) ;
27081: LD_VAR 0 3
27085: PPUSH
27086: CALL_OW 64
// end ;
27090: PPOPN 3
27092: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
27093: LD_EXP 115
27097: IFFALSE 27213
27099: GO 27101
27101: DISABLE
27102: LD_INT 0
27104: PPUSH
27105: PPUSH
27106: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
27107: LD_ADDR_VAR 0 2
27111: PUSH
27112: LD_INT 81
27114: PUSH
27115: LD_OWVAR 2
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: PUSH
27124: LD_INT 21
27126: PUSH
27127: LD_INT 1
27129: PUSH
27130: EMPTY
27131: LIST
27132: LIST
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PPUSH
27138: CALL_OW 69
27142: ST_TO_ADDR
// ToLua ( playComputer() ) ;
27143: LD_STRING playComputer()
27145: PPUSH
27146: CALL_OW 559
// if not tmp then
27150: LD_VAR 0 2
27154: NOT
27155: IFFALSE 27159
// exit ;
27157: GO 27213
// for i in tmp do
27159: LD_ADDR_VAR 0 1
27163: PUSH
27164: LD_VAR 0 2
27168: PUSH
27169: FOR_IN
27170: IFFALSE 27211
// for j := 1 to 4 do
27172: LD_ADDR_VAR 0 3
27176: PUSH
27177: DOUBLE
27178: LD_INT 1
27180: DEC
27181: ST_TO_ADDR
27182: LD_INT 4
27184: PUSH
27185: FOR_TO
27186: IFFALSE 27207
// SetSkill ( i , j , 10 ) ;
27188: LD_VAR 0 1
27192: PPUSH
27193: LD_VAR 0 3
27197: PPUSH
27198: LD_INT 10
27200: PPUSH
27201: CALL_OW 237
27205: GO 27185
27207: POP
27208: POP
27209: GO 27169
27211: POP
27212: POP
// end ;
27213: PPOPN 3
27215: END
// every 0 0$1 trigger s30 do var i , tmp ;
27216: LD_EXP 116
27220: IFFALSE 27289
27222: GO 27224
27224: DISABLE
27225: LD_INT 0
27227: PPUSH
27228: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27229: LD_ADDR_VAR 0 2
27233: PUSH
27234: LD_INT 22
27236: PUSH
27237: LD_OWVAR 2
27241: PUSH
27242: EMPTY
27243: LIST
27244: LIST
27245: PPUSH
27246: CALL_OW 69
27250: ST_TO_ADDR
// if not tmp then
27251: LD_VAR 0 2
27255: NOT
27256: IFFALSE 27260
// exit ;
27258: GO 27289
// for i in tmp do
27260: LD_ADDR_VAR 0 1
27264: PUSH
27265: LD_VAR 0 2
27269: PUSH
27270: FOR_IN
27271: IFFALSE 27287
// SetLives ( i , 300 ) ;
27273: LD_VAR 0 1
27277: PPUSH
27278: LD_INT 300
27280: PPUSH
27281: CALL_OW 234
27285: GO 27270
27287: POP
27288: POP
// end ;
27289: PPOPN 2
27291: END
// every 0 0$1 trigger s60 do var i , tmp ;
27292: LD_EXP 117
27296: IFFALSE 27365
27298: GO 27300
27300: DISABLE
27301: LD_INT 0
27303: PPUSH
27304: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
27305: LD_ADDR_VAR 0 2
27309: PUSH
27310: LD_INT 22
27312: PUSH
27313: LD_OWVAR 2
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PPUSH
27322: CALL_OW 69
27326: ST_TO_ADDR
// if not tmp then
27327: LD_VAR 0 2
27331: NOT
27332: IFFALSE 27336
// exit ;
27334: GO 27365
// for i in tmp do
27336: LD_ADDR_VAR 0 1
27340: PUSH
27341: LD_VAR 0 2
27345: PUSH
27346: FOR_IN
27347: IFFALSE 27363
// SetLives ( i , 600 ) ;
27349: LD_VAR 0 1
27353: PPUSH
27354: LD_INT 600
27356: PPUSH
27357: CALL_OW 234
27361: GO 27346
27363: POP
27364: POP
// end ;
27365: PPOPN 2
27367: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
27368: LD_INT 0
27370: PPUSH
// case cmd of 301 :
27371: LD_VAR 0 1
27375: PUSH
27376: LD_INT 301
27378: DOUBLE
27379: EQUAL
27380: IFTRUE 27384
27382: GO 27416
27384: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
27385: LD_VAR 0 6
27389: PPUSH
27390: LD_VAR 0 7
27394: PPUSH
27395: LD_VAR 0 8
27399: PPUSH
27400: LD_VAR 0 4
27404: PPUSH
27405: LD_VAR 0 5
27409: PPUSH
27410: CALL 28625 0 5
27414: GO 27537
27416: LD_INT 302
27418: DOUBLE
27419: EQUAL
27420: IFTRUE 27424
27422: GO 27461
27424: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
27425: LD_VAR 0 6
27429: PPUSH
27430: LD_VAR 0 7
27434: PPUSH
27435: LD_VAR 0 8
27439: PPUSH
27440: LD_VAR 0 9
27444: PPUSH
27445: LD_VAR 0 4
27449: PPUSH
27450: LD_VAR 0 5
27454: PPUSH
27455: CALL 28716 0 6
27459: GO 27537
27461: LD_INT 303
27463: DOUBLE
27464: EQUAL
27465: IFTRUE 27469
27467: GO 27506
27469: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
27470: LD_VAR 0 6
27474: PPUSH
27475: LD_VAR 0 7
27479: PPUSH
27480: LD_VAR 0 8
27484: PPUSH
27485: LD_VAR 0 9
27489: PPUSH
27490: LD_VAR 0 4
27494: PPUSH
27495: LD_VAR 0 5
27499: PPUSH
27500: CALL 27542 0 6
27504: GO 27537
27506: LD_INT 304
27508: DOUBLE
27509: EQUAL
27510: IFTRUE 27514
27512: GO 27536
27514: POP
// hHackTeleport ( unit , x , y ) ; end ;
27515: LD_VAR 0 2
27519: PPUSH
27520: LD_VAR 0 4
27524: PPUSH
27525: LD_VAR 0 5
27529: PPUSH
27530: CALL 29309 0 3
27534: GO 27537
27536: POP
// end ;
27537: LD_VAR 0 12
27541: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
27542: LD_INT 0
27544: PPUSH
27545: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
27546: LD_VAR 0 1
27550: PUSH
27551: LD_INT 1
27553: LESS
27554: PUSH
27555: LD_VAR 0 1
27559: PUSH
27560: LD_INT 3
27562: GREATER
27563: OR
27564: PUSH
27565: LD_VAR 0 5
27569: PPUSH
27570: LD_VAR 0 6
27574: PPUSH
27575: CALL_OW 428
27579: OR
27580: IFFALSE 27584
// exit ;
27582: GO 28312
// uc_side := your_side ;
27584: LD_ADDR_OWVAR 20
27588: PUSH
27589: LD_OWVAR 2
27593: ST_TO_ADDR
// uc_nation := nation ;
27594: LD_ADDR_OWVAR 21
27598: PUSH
27599: LD_VAR 0 1
27603: ST_TO_ADDR
// bc_level = 1 ;
27604: LD_ADDR_OWVAR 43
27608: PUSH
27609: LD_INT 1
27611: ST_TO_ADDR
// case btype of 1 :
27612: LD_VAR 0 2
27616: PUSH
27617: LD_INT 1
27619: DOUBLE
27620: EQUAL
27621: IFTRUE 27625
27623: GO 27636
27625: POP
// bc_type := b_depot ; 2 :
27626: LD_ADDR_OWVAR 42
27630: PUSH
27631: LD_INT 0
27633: ST_TO_ADDR
27634: GO 28256
27636: LD_INT 2
27638: DOUBLE
27639: EQUAL
27640: IFTRUE 27644
27642: GO 27655
27644: POP
// bc_type := b_warehouse ; 3 :
27645: LD_ADDR_OWVAR 42
27649: PUSH
27650: LD_INT 1
27652: ST_TO_ADDR
27653: GO 28256
27655: LD_INT 3
27657: DOUBLE
27658: EQUAL
27659: IFTRUE 27663
27661: GO 27674
27663: POP
// bc_type := b_lab ; 4 .. 9 :
27664: LD_ADDR_OWVAR 42
27668: PUSH
27669: LD_INT 6
27671: ST_TO_ADDR
27672: GO 28256
27674: LD_INT 4
27676: DOUBLE
27677: GREATEREQUAL
27678: IFFALSE 27686
27680: LD_INT 9
27682: DOUBLE
27683: LESSEQUAL
27684: IFTRUE 27688
27686: GO 27748
27688: POP
// begin bc_type := b_lab_half ;
27689: LD_ADDR_OWVAR 42
27693: PUSH
27694: LD_INT 7
27696: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
27697: LD_ADDR_OWVAR 44
27701: PUSH
27702: LD_INT 10
27704: PUSH
27705: LD_INT 11
27707: PUSH
27708: LD_INT 12
27710: PUSH
27711: LD_INT 15
27713: PUSH
27714: LD_INT 14
27716: PUSH
27717: LD_INT 13
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: LIST
27724: LIST
27725: LIST
27726: LIST
27727: PUSH
27728: LD_VAR 0 2
27732: PUSH
27733: LD_INT 3
27735: MINUS
27736: ARRAY
27737: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
27738: LD_ADDR_OWVAR 45
27742: PUSH
27743: LD_INT 9
27745: ST_TO_ADDR
// end ; 10 .. 13 :
27746: GO 28256
27748: LD_INT 10
27750: DOUBLE
27751: GREATEREQUAL
27752: IFFALSE 27760
27754: LD_INT 13
27756: DOUBLE
27757: LESSEQUAL
27758: IFTRUE 27762
27760: GO 27839
27762: POP
// begin bc_type := b_lab_full ;
27763: LD_ADDR_OWVAR 42
27767: PUSH
27768: LD_INT 8
27770: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
27771: LD_ADDR_OWVAR 44
27775: PUSH
27776: LD_INT 10
27778: PUSH
27779: LD_INT 12
27781: PUSH
27782: LD_INT 14
27784: PUSH
27785: LD_INT 13
27787: PUSH
27788: EMPTY
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: PUSH
27794: LD_VAR 0 2
27798: PUSH
27799: LD_INT 9
27801: MINUS
27802: ARRAY
27803: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
27804: LD_ADDR_OWVAR 45
27808: PUSH
27809: LD_INT 11
27811: PUSH
27812: LD_INT 15
27814: PUSH
27815: LD_INT 12
27817: PUSH
27818: LD_INT 15
27820: PUSH
27821: EMPTY
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: PUSH
27827: LD_VAR 0 2
27831: PUSH
27832: LD_INT 9
27834: MINUS
27835: ARRAY
27836: ST_TO_ADDR
// end ; 14 :
27837: GO 28256
27839: LD_INT 14
27841: DOUBLE
27842: EQUAL
27843: IFTRUE 27847
27845: GO 27858
27847: POP
// bc_type := b_workshop ; 15 :
27848: LD_ADDR_OWVAR 42
27852: PUSH
27853: LD_INT 2
27855: ST_TO_ADDR
27856: GO 28256
27858: LD_INT 15
27860: DOUBLE
27861: EQUAL
27862: IFTRUE 27866
27864: GO 27877
27866: POP
// bc_type := b_factory ; 16 :
27867: LD_ADDR_OWVAR 42
27871: PUSH
27872: LD_INT 3
27874: ST_TO_ADDR
27875: GO 28256
27877: LD_INT 16
27879: DOUBLE
27880: EQUAL
27881: IFTRUE 27885
27883: GO 27896
27885: POP
// bc_type := b_ext_gun ; 17 :
27886: LD_ADDR_OWVAR 42
27890: PUSH
27891: LD_INT 17
27893: ST_TO_ADDR
27894: GO 28256
27896: LD_INT 17
27898: DOUBLE
27899: EQUAL
27900: IFTRUE 27904
27902: GO 27932
27904: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
27905: LD_ADDR_OWVAR 42
27909: PUSH
27910: LD_INT 19
27912: PUSH
27913: LD_INT 23
27915: PUSH
27916: LD_INT 19
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: LIST
27923: PUSH
27924: LD_VAR 0 1
27928: ARRAY
27929: ST_TO_ADDR
27930: GO 28256
27932: LD_INT 18
27934: DOUBLE
27935: EQUAL
27936: IFTRUE 27940
27938: GO 27951
27940: POP
// bc_type := b_ext_radar ; 19 :
27941: LD_ADDR_OWVAR 42
27945: PUSH
27946: LD_INT 20
27948: ST_TO_ADDR
27949: GO 28256
27951: LD_INT 19
27953: DOUBLE
27954: EQUAL
27955: IFTRUE 27959
27957: GO 27970
27959: POP
// bc_type := b_ext_radio ; 20 :
27960: LD_ADDR_OWVAR 42
27964: PUSH
27965: LD_INT 22
27967: ST_TO_ADDR
27968: GO 28256
27970: LD_INT 20
27972: DOUBLE
27973: EQUAL
27974: IFTRUE 27978
27976: GO 27989
27978: POP
// bc_type := b_ext_siberium ; 21 :
27979: LD_ADDR_OWVAR 42
27983: PUSH
27984: LD_INT 21
27986: ST_TO_ADDR
27987: GO 28256
27989: LD_INT 21
27991: DOUBLE
27992: EQUAL
27993: IFTRUE 27997
27995: GO 28008
27997: POP
// bc_type := b_ext_computer ; 22 :
27998: LD_ADDR_OWVAR 42
28002: PUSH
28003: LD_INT 24
28005: ST_TO_ADDR
28006: GO 28256
28008: LD_INT 22
28010: DOUBLE
28011: EQUAL
28012: IFTRUE 28016
28014: GO 28027
28016: POP
// bc_type := b_ext_track ; 23 :
28017: LD_ADDR_OWVAR 42
28021: PUSH
28022: LD_INT 16
28024: ST_TO_ADDR
28025: GO 28256
28027: LD_INT 23
28029: DOUBLE
28030: EQUAL
28031: IFTRUE 28035
28033: GO 28046
28035: POP
// bc_type := b_ext_laser ; 24 :
28036: LD_ADDR_OWVAR 42
28040: PUSH
28041: LD_INT 25
28043: ST_TO_ADDR
28044: GO 28256
28046: LD_INT 24
28048: DOUBLE
28049: EQUAL
28050: IFTRUE 28054
28052: GO 28065
28054: POP
// bc_type := b_control_tower ; 25 :
28055: LD_ADDR_OWVAR 42
28059: PUSH
28060: LD_INT 36
28062: ST_TO_ADDR
28063: GO 28256
28065: LD_INT 25
28067: DOUBLE
28068: EQUAL
28069: IFTRUE 28073
28071: GO 28084
28073: POP
// bc_type := b_breastwork ; 26 :
28074: LD_ADDR_OWVAR 42
28078: PUSH
28079: LD_INT 31
28081: ST_TO_ADDR
28082: GO 28256
28084: LD_INT 26
28086: DOUBLE
28087: EQUAL
28088: IFTRUE 28092
28090: GO 28103
28092: POP
// bc_type := b_bunker ; 27 :
28093: LD_ADDR_OWVAR 42
28097: PUSH
28098: LD_INT 32
28100: ST_TO_ADDR
28101: GO 28256
28103: LD_INT 27
28105: DOUBLE
28106: EQUAL
28107: IFTRUE 28111
28109: GO 28122
28111: POP
// bc_type := b_turret ; 28 :
28112: LD_ADDR_OWVAR 42
28116: PUSH
28117: LD_INT 33
28119: ST_TO_ADDR
28120: GO 28256
28122: LD_INT 28
28124: DOUBLE
28125: EQUAL
28126: IFTRUE 28130
28128: GO 28141
28130: POP
// bc_type := b_armoury ; 29 :
28131: LD_ADDR_OWVAR 42
28135: PUSH
28136: LD_INT 4
28138: ST_TO_ADDR
28139: GO 28256
28141: LD_INT 29
28143: DOUBLE
28144: EQUAL
28145: IFTRUE 28149
28147: GO 28160
28149: POP
// bc_type := b_barracks ; 30 :
28150: LD_ADDR_OWVAR 42
28154: PUSH
28155: LD_INT 5
28157: ST_TO_ADDR
28158: GO 28256
28160: LD_INT 30
28162: DOUBLE
28163: EQUAL
28164: IFTRUE 28168
28166: GO 28179
28168: POP
// bc_type := b_solar_power ; 31 :
28169: LD_ADDR_OWVAR 42
28173: PUSH
28174: LD_INT 27
28176: ST_TO_ADDR
28177: GO 28256
28179: LD_INT 31
28181: DOUBLE
28182: EQUAL
28183: IFTRUE 28187
28185: GO 28198
28187: POP
// bc_type := b_oil_power ; 32 :
28188: LD_ADDR_OWVAR 42
28192: PUSH
28193: LD_INT 26
28195: ST_TO_ADDR
28196: GO 28256
28198: LD_INT 32
28200: DOUBLE
28201: EQUAL
28202: IFTRUE 28206
28204: GO 28217
28206: POP
// bc_type := b_siberite_power ; 33 :
28207: LD_ADDR_OWVAR 42
28211: PUSH
28212: LD_INT 28
28214: ST_TO_ADDR
28215: GO 28256
28217: LD_INT 33
28219: DOUBLE
28220: EQUAL
28221: IFTRUE 28225
28223: GO 28236
28225: POP
// bc_type := b_oil_mine ; 34 :
28226: LD_ADDR_OWVAR 42
28230: PUSH
28231: LD_INT 29
28233: ST_TO_ADDR
28234: GO 28256
28236: LD_INT 34
28238: DOUBLE
28239: EQUAL
28240: IFTRUE 28244
28242: GO 28255
28244: POP
// bc_type := b_siberite_mine ; end ;
28245: LD_ADDR_OWVAR 42
28249: PUSH
28250: LD_INT 30
28252: ST_TO_ADDR
28253: GO 28256
28255: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
28256: LD_ADDR_VAR 0 8
28260: PUSH
28261: LD_VAR 0 5
28265: PPUSH
28266: LD_VAR 0 6
28270: PPUSH
28271: LD_VAR 0 3
28275: PPUSH
28276: CALL_OW 47
28280: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
28281: LD_OWVAR 42
28285: PUSH
28286: LD_INT 32
28288: PUSH
28289: LD_INT 33
28291: PUSH
28292: EMPTY
28293: LIST
28294: LIST
28295: IN
28296: IFFALSE 28312
// PlaceWeaponTurret ( b , weapon ) ;
28298: LD_VAR 0 8
28302: PPUSH
28303: LD_VAR 0 4
28307: PPUSH
28308: CALL_OW 431
// end ;
28312: LD_VAR 0 7
28316: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
28317: LD_INT 0
28319: PPUSH
28320: PPUSH
28321: PPUSH
28322: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28323: LD_ADDR_VAR 0 4
28327: PUSH
28328: LD_INT 22
28330: PUSH
28331: LD_OWVAR 2
28335: PUSH
28336: EMPTY
28337: LIST
28338: LIST
28339: PUSH
28340: LD_INT 2
28342: PUSH
28343: LD_INT 30
28345: PUSH
28346: LD_INT 0
28348: PUSH
28349: EMPTY
28350: LIST
28351: LIST
28352: PUSH
28353: LD_INT 30
28355: PUSH
28356: LD_INT 1
28358: PUSH
28359: EMPTY
28360: LIST
28361: LIST
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: LIST
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PPUSH
28372: CALL_OW 69
28376: ST_TO_ADDR
// if not tmp then
28377: LD_VAR 0 4
28381: NOT
28382: IFFALSE 28386
// exit ;
28384: GO 28445
// for i in tmp do
28386: LD_ADDR_VAR 0 2
28390: PUSH
28391: LD_VAR 0 4
28395: PUSH
28396: FOR_IN
28397: IFFALSE 28443
// for j = 1 to 3 do
28399: LD_ADDR_VAR 0 3
28403: PUSH
28404: DOUBLE
28405: LD_INT 1
28407: DEC
28408: ST_TO_ADDR
28409: LD_INT 3
28411: PUSH
28412: FOR_TO
28413: IFFALSE 28439
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
28415: LD_VAR 0 2
28419: PPUSH
28420: CALL_OW 274
28424: PPUSH
28425: LD_VAR 0 3
28429: PPUSH
28430: LD_INT 99999
28432: PPUSH
28433: CALL_OW 277
28437: GO 28412
28439: POP
28440: POP
28441: GO 28396
28443: POP
28444: POP
// end ;
28445: LD_VAR 0 1
28449: RET
// export function hHackSetLevel10 ; var i , j ; begin
28450: LD_INT 0
28452: PPUSH
28453: PPUSH
28454: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
28455: LD_ADDR_VAR 0 2
28459: PUSH
28460: LD_INT 21
28462: PUSH
28463: LD_INT 1
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: PPUSH
28470: CALL_OW 69
28474: PUSH
28475: FOR_IN
28476: IFFALSE 28528
// if IsSelected ( i ) then
28478: LD_VAR 0 2
28482: PPUSH
28483: CALL_OW 306
28487: IFFALSE 28526
// begin for j := 1 to 4 do
28489: LD_ADDR_VAR 0 3
28493: PUSH
28494: DOUBLE
28495: LD_INT 1
28497: DEC
28498: ST_TO_ADDR
28499: LD_INT 4
28501: PUSH
28502: FOR_TO
28503: IFFALSE 28524
// SetSkill ( i , j , 10 ) ;
28505: LD_VAR 0 2
28509: PPUSH
28510: LD_VAR 0 3
28514: PPUSH
28515: LD_INT 10
28517: PPUSH
28518: CALL_OW 237
28522: GO 28502
28524: POP
28525: POP
// end ;
28526: GO 28475
28528: POP
28529: POP
// end ;
28530: LD_VAR 0 1
28534: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
28535: LD_INT 0
28537: PPUSH
28538: PPUSH
28539: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
28540: LD_ADDR_VAR 0 2
28544: PUSH
28545: LD_INT 22
28547: PUSH
28548: LD_OWVAR 2
28552: PUSH
28553: EMPTY
28554: LIST
28555: LIST
28556: PUSH
28557: LD_INT 21
28559: PUSH
28560: LD_INT 1
28562: PUSH
28563: EMPTY
28564: LIST
28565: LIST
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PPUSH
28571: CALL_OW 69
28575: PUSH
28576: FOR_IN
28577: IFFALSE 28618
// begin for j := 1 to 4 do
28579: LD_ADDR_VAR 0 3
28583: PUSH
28584: DOUBLE
28585: LD_INT 1
28587: DEC
28588: ST_TO_ADDR
28589: LD_INT 4
28591: PUSH
28592: FOR_TO
28593: IFFALSE 28614
// SetSkill ( i , j , 10 ) ;
28595: LD_VAR 0 2
28599: PPUSH
28600: LD_VAR 0 3
28604: PPUSH
28605: LD_INT 10
28607: PPUSH
28608: CALL_OW 237
28612: GO 28592
28614: POP
28615: POP
// end ;
28616: GO 28576
28618: POP
28619: POP
// end ;
28620: LD_VAR 0 1
28624: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
28625: LD_INT 0
28627: PPUSH
// uc_side := your_side ;
28628: LD_ADDR_OWVAR 20
28632: PUSH
28633: LD_OWVAR 2
28637: ST_TO_ADDR
// uc_nation := nation ;
28638: LD_ADDR_OWVAR 21
28642: PUSH
28643: LD_VAR 0 1
28647: ST_TO_ADDR
// InitHc ;
28648: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
28652: LD_INT 0
28654: PPUSH
28655: LD_VAR 0 2
28659: PPUSH
28660: LD_VAR 0 3
28664: PPUSH
28665: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
28669: LD_VAR 0 4
28673: PPUSH
28674: LD_VAR 0 5
28678: PPUSH
28679: CALL_OW 428
28683: PUSH
28684: LD_INT 0
28686: EQUAL
28687: IFFALSE 28711
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
28689: CALL_OW 44
28693: PPUSH
28694: LD_VAR 0 4
28698: PPUSH
28699: LD_VAR 0 5
28703: PPUSH
28704: LD_INT 1
28706: PPUSH
28707: CALL_OW 48
// end ;
28711: LD_VAR 0 6
28715: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
28716: LD_INT 0
28718: PPUSH
28719: PPUSH
// uc_side := your_side ;
28720: LD_ADDR_OWVAR 20
28724: PUSH
28725: LD_OWVAR 2
28729: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
28730: LD_VAR 0 1
28734: PUSH
28735: LD_INT 1
28737: PUSH
28738: LD_INT 2
28740: PUSH
28741: LD_INT 3
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: LD_INT 5
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: LIST
28755: LIST
28756: IN
28757: IFFALSE 28769
// uc_nation := nation_american else
28759: LD_ADDR_OWVAR 21
28763: PUSH
28764: LD_INT 1
28766: ST_TO_ADDR
28767: GO 28812
// if chassis in [ 11 , 12 , 13 , 14 ] then
28769: LD_VAR 0 1
28773: PUSH
28774: LD_INT 11
28776: PUSH
28777: LD_INT 12
28779: PUSH
28780: LD_INT 13
28782: PUSH
28783: LD_INT 14
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: IN
28792: IFFALSE 28804
// uc_nation := nation_arabian else
28794: LD_ADDR_OWVAR 21
28798: PUSH
28799: LD_INT 2
28801: ST_TO_ADDR
28802: GO 28812
// uc_nation := nation_russian ;
28804: LD_ADDR_OWVAR 21
28808: PUSH
28809: LD_INT 3
28811: ST_TO_ADDR
// vc_chassis := chassis ;
28812: LD_ADDR_OWVAR 37
28816: PUSH
28817: LD_VAR 0 1
28821: ST_TO_ADDR
// vc_engine := engine ;
28822: LD_ADDR_OWVAR 39
28826: PUSH
28827: LD_VAR 0 2
28831: ST_TO_ADDR
// vc_control := control ;
28832: LD_ADDR_OWVAR 38
28836: PUSH
28837: LD_VAR 0 3
28841: ST_TO_ADDR
// vc_weapon := weapon ;
28842: LD_ADDR_OWVAR 40
28846: PUSH
28847: LD_VAR 0 4
28851: ST_TO_ADDR
// un := CreateVehicle ;
28852: LD_ADDR_VAR 0 8
28856: PUSH
28857: CALL_OW 45
28861: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
28862: LD_VAR 0 8
28866: PPUSH
28867: LD_INT 0
28869: PPUSH
28870: LD_INT 5
28872: PPUSH
28873: CALL_OW 12
28877: PPUSH
28878: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
28882: LD_VAR 0 8
28886: PPUSH
28887: LD_VAR 0 5
28891: PPUSH
28892: LD_VAR 0 6
28896: PPUSH
28897: LD_INT 1
28899: PPUSH
28900: CALL_OW 48
// end ;
28904: LD_VAR 0 7
28908: RET
// export hInvincible ; every 1 do
28909: GO 28911
28911: DISABLE
// hInvincible := [ ] ;
28912: LD_ADDR_EXP 118
28916: PUSH
28917: EMPTY
28918: ST_TO_ADDR
28919: END
// every 10 do var i ;
28920: GO 28922
28922: DISABLE
28923: LD_INT 0
28925: PPUSH
// begin enable ;
28926: ENABLE
// if not hInvincible then
28927: LD_EXP 118
28931: NOT
28932: IFFALSE 28936
// exit ;
28934: GO 28980
// for i in hInvincible do
28936: LD_ADDR_VAR 0 1
28940: PUSH
28941: LD_EXP 118
28945: PUSH
28946: FOR_IN
28947: IFFALSE 28978
// if GetLives ( i ) < 1000 then
28949: LD_VAR 0 1
28953: PPUSH
28954: CALL_OW 256
28958: PUSH
28959: LD_INT 1000
28961: LESS
28962: IFFALSE 28976
// SetLives ( i , 1000 ) ;
28964: LD_VAR 0 1
28968: PPUSH
28969: LD_INT 1000
28971: PPUSH
28972: CALL_OW 234
28976: GO 28946
28978: POP
28979: POP
// end ;
28980: PPOPN 1
28982: END
// export function hHackInvincible ; var i ; begin
28983: LD_INT 0
28985: PPUSH
28986: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
28987: LD_ADDR_VAR 0 2
28991: PUSH
28992: LD_INT 2
28994: PUSH
28995: LD_INT 21
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 21
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: PPUSH
29020: CALL_OW 69
29024: PUSH
29025: FOR_IN
29026: IFFALSE 29087
// if IsSelected ( i ) then
29028: LD_VAR 0 2
29032: PPUSH
29033: CALL_OW 306
29037: IFFALSE 29085
// begin if i in hInvincible then
29039: LD_VAR 0 2
29043: PUSH
29044: LD_EXP 118
29048: IN
29049: IFFALSE 29069
// hInvincible := hInvincible diff i else
29051: LD_ADDR_EXP 118
29055: PUSH
29056: LD_EXP 118
29060: PUSH
29061: LD_VAR 0 2
29065: DIFF
29066: ST_TO_ADDR
29067: GO 29085
// hInvincible := hInvincible union i ;
29069: LD_ADDR_EXP 118
29073: PUSH
29074: LD_EXP 118
29078: PUSH
29079: LD_VAR 0 2
29083: UNION
29084: ST_TO_ADDR
// end ;
29085: GO 29025
29087: POP
29088: POP
// end ;
29089: LD_VAR 0 1
29093: RET
// export function hHackInvisible ; var i , j ; begin
29094: LD_INT 0
29096: PPUSH
29097: PPUSH
29098: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
29099: LD_ADDR_VAR 0 2
29103: PUSH
29104: LD_INT 21
29106: PUSH
29107: LD_INT 1
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PPUSH
29114: CALL_OW 69
29118: PUSH
29119: FOR_IN
29120: IFFALSE 29144
// if IsSelected ( i ) then
29122: LD_VAR 0 2
29126: PPUSH
29127: CALL_OW 306
29131: IFFALSE 29142
// ComForceInvisible ( i ) ;
29133: LD_VAR 0 2
29137: PPUSH
29138: CALL_OW 496
29142: GO 29119
29144: POP
29145: POP
// end ;
29146: LD_VAR 0 1
29150: RET
// export function hHackChangeYourSide ; begin
29151: LD_INT 0
29153: PPUSH
// if your_side = 8 then
29154: LD_OWVAR 2
29158: PUSH
29159: LD_INT 8
29161: EQUAL
29162: IFFALSE 29174
// your_side := 0 else
29164: LD_ADDR_OWVAR 2
29168: PUSH
29169: LD_INT 0
29171: ST_TO_ADDR
29172: GO 29188
// your_side := your_side + 1 ;
29174: LD_ADDR_OWVAR 2
29178: PUSH
29179: LD_OWVAR 2
29183: PUSH
29184: LD_INT 1
29186: PLUS
29187: ST_TO_ADDR
// end ;
29188: LD_VAR 0 1
29192: RET
// export function hHackChangeUnitSide ; var i , j ; begin
29193: LD_INT 0
29195: PPUSH
29196: PPUSH
29197: PPUSH
// for i in all_units do
29198: LD_ADDR_VAR 0 2
29202: PUSH
29203: LD_OWVAR 3
29207: PUSH
29208: FOR_IN
29209: IFFALSE 29287
// if IsSelected ( i ) then
29211: LD_VAR 0 2
29215: PPUSH
29216: CALL_OW 306
29220: IFFALSE 29285
// begin j := GetSide ( i ) ;
29222: LD_ADDR_VAR 0 3
29226: PUSH
29227: LD_VAR 0 2
29231: PPUSH
29232: CALL_OW 255
29236: ST_TO_ADDR
// if j = 8 then
29237: LD_VAR 0 3
29241: PUSH
29242: LD_INT 8
29244: EQUAL
29245: IFFALSE 29257
// j := 0 else
29247: LD_ADDR_VAR 0 3
29251: PUSH
29252: LD_INT 0
29254: ST_TO_ADDR
29255: GO 29271
// j := j + 1 ;
29257: LD_ADDR_VAR 0 3
29261: PUSH
29262: LD_VAR 0 3
29266: PUSH
29267: LD_INT 1
29269: PLUS
29270: ST_TO_ADDR
// SetSide ( i , j ) ;
29271: LD_VAR 0 2
29275: PPUSH
29276: LD_VAR 0 3
29280: PPUSH
29281: CALL_OW 235
// end ;
29285: GO 29208
29287: POP
29288: POP
// end ;
29289: LD_VAR 0 1
29293: RET
// export function hHackFog ; begin
29294: LD_INT 0
29296: PPUSH
// FogOff ( true ) ;
29297: LD_INT 1
29299: PPUSH
29300: CALL_OW 344
// end ;
29304: LD_VAR 0 1
29308: RET
// export function hHackTeleport ( unit , x , y ) ; begin
29309: LD_INT 0
29311: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
29312: LD_VAR 0 1
29316: PPUSH
29317: LD_VAR 0 2
29321: PPUSH
29322: LD_VAR 0 3
29326: PPUSH
29327: LD_INT 1
29329: PPUSH
29330: LD_INT 1
29332: PPUSH
29333: CALL_OW 483
// CenterOnXY ( x , y ) ;
29337: LD_VAR 0 2
29341: PPUSH
29342: LD_VAR 0 3
29346: PPUSH
29347: CALL_OW 84
// end ;
29351: LD_VAR 0 4
29355: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
29356: LD_INT 0
29358: PPUSH
29359: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
29360: LD_VAR 0 1
29364: NOT
29365: PUSH
29366: LD_VAR 0 2
29370: PPUSH
29371: LD_VAR 0 3
29375: PPUSH
29376: CALL_OW 488
29380: NOT
29381: OR
29382: PUSH
29383: LD_VAR 0 1
29387: PPUSH
29388: CALL_OW 266
29392: PUSH
29393: LD_INT 3
29395: NONEQUAL
29396: PUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 247
29406: PUSH
29407: LD_INT 1
29409: EQUAL
29410: NOT
29411: AND
29412: OR
29413: IFFALSE 29417
// exit ;
29415: GO 29566
// if GetType ( factory ) = unit_human then
29417: LD_VAR 0 1
29421: PPUSH
29422: CALL_OW 247
29426: PUSH
29427: LD_INT 1
29429: EQUAL
29430: IFFALSE 29447
// factory := IsInUnit ( factory ) ;
29432: LD_ADDR_VAR 0 1
29436: PUSH
29437: LD_VAR 0 1
29441: PPUSH
29442: CALL_OW 310
29446: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
29447: LD_VAR 0 1
29451: PPUSH
29452: CALL_OW 266
29456: PUSH
29457: LD_INT 3
29459: NONEQUAL
29460: IFFALSE 29464
// exit ;
29462: GO 29566
// if HexInfo ( x , y ) = factory then
29464: LD_VAR 0 2
29468: PPUSH
29469: LD_VAR 0 3
29473: PPUSH
29474: CALL_OW 428
29478: PUSH
29479: LD_VAR 0 1
29483: EQUAL
29484: IFFALSE 29511
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
29486: LD_ADDR_EXP 119
29490: PUSH
29491: LD_EXP 119
29495: PPUSH
29496: LD_VAR 0 1
29500: PPUSH
29501: LD_INT 0
29503: PPUSH
29504: CALL_OW 1
29508: ST_TO_ADDR
29509: GO 29562
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
29511: LD_ADDR_EXP 119
29515: PUSH
29516: LD_EXP 119
29520: PPUSH
29521: LD_VAR 0 1
29525: PPUSH
29526: LD_VAR 0 1
29530: PPUSH
29531: CALL_OW 255
29535: PUSH
29536: LD_VAR 0 1
29540: PUSH
29541: LD_VAR 0 2
29545: PUSH
29546: LD_VAR 0 3
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: PPUSH
29557: CALL_OW 1
29561: ST_TO_ADDR
// UpdateFactoryWaypoints ;
29562: CALL 29571 0 0
// end ;
29566: LD_VAR 0 4
29570: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
29571: LD_INT 0
29573: PPUSH
29574: PPUSH
29575: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
29576: LD_STRING resetFactoryWaypoint();
29578: PPUSH
29579: CALL_OW 559
// if factoryWaypoints then
29583: LD_EXP 119
29587: IFFALSE 29713
// begin list := PrepareArray ( factoryWaypoints ) ;
29589: LD_ADDR_VAR 0 3
29593: PUSH
29594: LD_EXP 119
29598: PPUSH
29599: NOP4
29603: ST_TO_ADDR
// for i := 1 to list do
29604: LD_ADDR_VAR 0 2
29608: PUSH
29609: DOUBLE
29610: LD_INT 1
29612: DEC
29613: ST_TO_ADDR
29614: LD_VAR 0 3
29618: PUSH
29619: FOR_TO
29620: IFFALSE 29711
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29622: LD_STRING setFactoryWaypointXY(
29624: PUSH
29625: LD_VAR 0 3
29629: PUSH
29630: LD_VAR 0 2
29634: ARRAY
29635: PUSH
29636: LD_INT 1
29638: ARRAY
29639: STR
29640: PUSH
29641: LD_STRING ,
29643: STR
29644: PUSH
29645: LD_VAR 0 3
29649: PUSH
29650: LD_VAR 0 2
29654: ARRAY
29655: PUSH
29656: LD_INT 2
29658: ARRAY
29659: STR
29660: PUSH
29661: LD_STRING ,
29663: STR
29664: PUSH
29665: LD_VAR 0 3
29669: PUSH
29670: LD_VAR 0 2
29674: ARRAY
29675: PUSH
29676: LD_INT 3
29678: ARRAY
29679: STR
29680: PUSH
29681: LD_STRING ,
29683: STR
29684: PUSH
29685: LD_VAR 0 3
29689: PUSH
29690: LD_VAR 0 2
29694: ARRAY
29695: PUSH
29696: LD_INT 4
29698: ARRAY
29699: STR
29700: PUSH
29701: LD_STRING )
29703: STR
29704: PPUSH
29705: CALL_OW 559
29709: GO 29619
29711: POP
29712: POP
// end ; end ;
29713: LD_VAR 0 1
29717: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
29718: LD_INT 0
29720: PPUSH
// if HexInfo ( x , y ) = warehouse then
29721: LD_VAR 0 2
29725: PPUSH
29726: LD_VAR 0 3
29730: PPUSH
29731: CALL_OW 428
29735: PUSH
29736: LD_VAR 0 1
29740: EQUAL
29741: IFFALSE 29768
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
29743: LD_ADDR_EXP 120
29747: PUSH
29748: LD_EXP 120
29752: PPUSH
29753: LD_VAR 0 1
29757: PPUSH
29758: LD_INT 0
29760: PPUSH
29761: CALL_OW 1
29765: ST_TO_ADDR
29766: GO 29819
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
29768: LD_ADDR_EXP 120
29772: PUSH
29773: LD_EXP 120
29777: PPUSH
29778: LD_VAR 0 1
29782: PPUSH
29783: LD_VAR 0 1
29787: PPUSH
29788: CALL_OW 255
29792: PUSH
29793: LD_VAR 0 1
29797: PUSH
29798: LD_VAR 0 2
29802: PUSH
29803: LD_VAR 0 3
29807: PUSH
29808: EMPTY
29809: LIST
29810: LIST
29811: LIST
29812: LIST
29813: PPUSH
29814: CALL_OW 1
29818: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
29819: CALL 29828 0 0
// end ;
29823: LD_VAR 0 4
29827: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
29828: LD_INT 0
29830: PPUSH
29831: PPUSH
29832: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
29833: LD_STRING resetWarehouseGatheringPoints();
29835: PPUSH
29836: CALL_OW 559
// if warehouseGatheringPoints then
29840: LD_EXP 120
29844: IFFALSE 29970
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
29846: LD_ADDR_VAR 0 3
29850: PUSH
29851: LD_EXP 120
29855: PPUSH
29856: NOP4
29860: ST_TO_ADDR
// for i := 1 to list do
29861: LD_ADDR_VAR 0 2
29865: PUSH
29866: DOUBLE
29867: LD_INT 1
29869: DEC
29870: ST_TO_ADDR
29871: LD_VAR 0 3
29875: PUSH
29876: FOR_TO
29877: IFFALSE 29968
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
29879: LD_STRING setWarehouseGatheringPointXY(
29881: PUSH
29882: LD_VAR 0 3
29886: PUSH
29887: LD_VAR 0 2
29891: ARRAY
29892: PUSH
29893: LD_INT 1
29895: ARRAY
29896: STR
29897: PUSH
29898: LD_STRING ,
29900: STR
29901: PUSH
29902: LD_VAR 0 3
29906: PUSH
29907: LD_VAR 0 2
29911: ARRAY
29912: PUSH
29913: LD_INT 2
29915: ARRAY
29916: STR
29917: PUSH
29918: LD_STRING ,
29920: STR
29921: PUSH
29922: LD_VAR 0 3
29926: PUSH
29927: LD_VAR 0 2
29931: ARRAY
29932: PUSH
29933: LD_INT 3
29935: ARRAY
29936: STR
29937: PUSH
29938: LD_STRING ,
29940: STR
29941: PUSH
29942: LD_VAR 0 3
29946: PUSH
29947: LD_VAR 0 2
29951: ARRAY
29952: PUSH
29953: LD_INT 4
29955: ARRAY
29956: STR
29957: PUSH
29958: LD_STRING )
29960: STR
29961: PPUSH
29962: CALL_OW 559
29966: GO 29876
29968: POP
29969: POP
// end ; end ;
29970: LD_VAR 0 1
29974: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
29975: LD_EXP 120
29979: IFFALSE 30664
29981: GO 29983
29983: DISABLE
29984: LD_INT 0
29986: PPUSH
29987: PPUSH
29988: PPUSH
29989: PPUSH
29990: PPUSH
29991: PPUSH
29992: PPUSH
29993: PPUSH
29994: PPUSH
// begin enable ;
29995: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
29996: LD_ADDR_VAR 0 3
30000: PUSH
30001: LD_EXP 120
30005: PPUSH
30006: NOP4
30010: ST_TO_ADDR
// if not list then
30011: LD_VAR 0 3
30015: NOT
30016: IFFALSE 30020
// exit ;
30018: GO 30664
// for i := 1 to list do
30020: LD_ADDR_VAR 0 1
30024: PUSH
30025: DOUBLE
30026: LD_INT 1
30028: DEC
30029: ST_TO_ADDR
30030: LD_VAR 0 3
30034: PUSH
30035: FOR_TO
30036: IFFALSE 30662
// begin depot := list [ i ] [ 2 ] ;
30038: LD_ADDR_VAR 0 8
30042: PUSH
30043: LD_VAR 0 3
30047: PUSH
30048: LD_VAR 0 1
30052: ARRAY
30053: PUSH
30054: LD_INT 2
30056: ARRAY
30057: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
30058: LD_ADDR_VAR 0 5
30062: PUSH
30063: LD_VAR 0 3
30067: PUSH
30068: LD_VAR 0 1
30072: ARRAY
30073: PUSH
30074: LD_INT 1
30076: ARRAY
30077: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
30078: LD_VAR 0 8
30082: PPUSH
30083: CALL_OW 301
30087: PUSH
30088: LD_VAR 0 5
30092: PUSH
30093: LD_VAR 0 8
30097: PPUSH
30098: CALL_OW 255
30102: NONEQUAL
30103: OR
30104: IFFALSE 30133
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
30106: LD_ADDR_EXP 120
30110: PUSH
30111: LD_EXP 120
30115: PPUSH
30116: LD_VAR 0 8
30120: PPUSH
30121: LD_INT 0
30123: PPUSH
30124: CALL_OW 1
30128: ST_TO_ADDR
// exit ;
30129: POP
30130: POP
30131: GO 30664
// end ; x := list [ i ] [ 3 ] ;
30133: LD_ADDR_VAR 0 6
30137: PUSH
30138: LD_VAR 0 3
30142: PUSH
30143: LD_VAR 0 1
30147: ARRAY
30148: PUSH
30149: LD_INT 3
30151: ARRAY
30152: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
30153: LD_ADDR_VAR 0 7
30157: PUSH
30158: LD_VAR 0 3
30162: PUSH
30163: LD_VAR 0 1
30167: ARRAY
30168: PUSH
30169: LD_INT 4
30171: ARRAY
30172: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
30173: LD_ADDR_VAR 0 9
30177: PUSH
30178: LD_VAR 0 6
30182: PPUSH
30183: LD_VAR 0 7
30187: PPUSH
30188: LD_INT 16
30190: PPUSH
30191: CALL 74786 0 3
30195: ST_TO_ADDR
// if not cratesNearbyPoint then
30196: LD_VAR 0 9
30200: NOT
30201: IFFALSE 30207
// exit ;
30203: POP
30204: POP
30205: GO 30664
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
30207: LD_ADDR_VAR 0 4
30211: PUSH
30212: LD_INT 22
30214: PUSH
30215: LD_VAR 0 5
30219: PUSH
30220: EMPTY
30221: LIST
30222: LIST
30223: PUSH
30224: LD_INT 3
30226: PUSH
30227: LD_INT 60
30229: PUSH
30230: EMPTY
30231: LIST
30232: PUSH
30233: EMPTY
30234: LIST
30235: LIST
30236: PUSH
30237: LD_INT 91
30239: PUSH
30240: LD_VAR 0 8
30244: PUSH
30245: LD_INT 6
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: LIST
30252: PUSH
30253: LD_INT 2
30255: PUSH
30256: LD_INT 25
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 25
30268: PUSH
30269: LD_INT 16
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: PPUSH
30287: CALL_OW 69
30291: PUSH
30292: LD_VAR 0 8
30296: PPUSH
30297: CALL_OW 313
30301: PPUSH
30302: LD_INT 3
30304: PUSH
30305: LD_INT 60
30307: PUSH
30308: EMPTY
30309: LIST
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 2
30317: PUSH
30318: LD_INT 25
30320: PUSH
30321: LD_INT 2
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 25
30330: PUSH
30331: LD_INT 16
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: LIST
30342: PUSH
30343: EMPTY
30344: LIST
30345: LIST
30346: PPUSH
30347: CALL_OW 72
30351: UNION
30352: ST_TO_ADDR
// if tmp then
30353: LD_VAR 0 4
30357: IFFALSE 30437
// begin tmp := ShrinkArray ( tmp , 3 ) ;
30359: LD_ADDR_VAR 0 4
30363: PUSH
30364: LD_VAR 0 4
30368: PPUSH
30369: LD_INT 3
30371: PPUSH
30372: CALL 72755 0 2
30376: ST_TO_ADDR
// for j in tmp do
30377: LD_ADDR_VAR 0 2
30381: PUSH
30382: LD_VAR 0 4
30386: PUSH
30387: FOR_IN
30388: IFFALSE 30431
// begin if IsInUnit ( j ) then
30390: LD_VAR 0 2
30394: PPUSH
30395: CALL_OW 310
30399: IFFALSE 30410
// ComExit ( j ) ;
30401: LD_VAR 0 2
30405: PPUSH
30406: CALL 72838 0 1
// AddComCollect ( j , x , y ) ;
30410: LD_VAR 0 2
30414: PPUSH
30415: LD_VAR 0 6
30419: PPUSH
30420: LD_VAR 0 7
30424: PPUSH
30425: CALL_OW 177
// end ;
30429: GO 30387
30431: POP
30432: POP
// exit ;
30433: POP
30434: POP
30435: GO 30664
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
30437: LD_ADDR_VAR 0 4
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_VAR 0 5
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 91
30456: PUSH
30457: LD_VAR 0 8
30461: PUSH
30462: LD_INT 8
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: LIST
30469: PUSH
30470: LD_INT 2
30472: PUSH
30473: LD_INT 34
30475: PUSH
30476: LD_INT 12
30478: PUSH
30479: EMPTY
30480: LIST
30481: LIST
30482: PUSH
30483: LD_INT 34
30485: PUSH
30486: LD_INT 51
30488: PUSH
30489: EMPTY
30490: LIST
30491: LIST
30492: PUSH
30493: LD_INT 34
30495: PUSH
30496: LD_INT 32
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 34
30505: PUSH
30506: LD_INT 89
30508: PUSH
30509: EMPTY
30510: LIST
30511: LIST
30512: PUSH
30513: EMPTY
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: LIST
30524: PPUSH
30525: CALL_OW 69
30529: ST_TO_ADDR
// if tmp then
30530: LD_VAR 0 4
30534: IFFALSE 30660
// begin for j in tmp do
30536: LD_ADDR_VAR 0 2
30540: PUSH
30541: LD_VAR 0 4
30545: PUSH
30546: FOR_IN
30547: IFFALSE 30658
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
30549: LD_VAR 0 2
30553: PPUSH
30554: CALL_OW 262
30558: PUSH
30559: LD_INT 3
30561: EQUAL
30562: PUSH
30563: LD_VAR 0 2
30567: PPUSH
30568: CALL_OW 261
30572: PUSH
30573: LD_INT 20
30575: GREATER
30576: OR
30577: PUSH
30578: LD_VAR 0 2
30582: PPUSH
30583: CALL_OW 314
30587: NOT
30588: AND
30589: PUSH
30590: LD_VAR 0 2
30594: PPUSH
30595: CALL_OW 263
30599: PUSH
30600: LD_INT 1
30602: NONEQUAL
30603: PUSH
30604: LD_VAR 0 2
30608: PPUSH
30609: CALL_OW 311
30613: OR
30614: AND
30615: IFFALSE 30656
// begin ComCollect ( j , x , y ) ;
30617: LD_VAR 0 2
30621: PPUSH
30622: LD_VAR 0 6
30626: PPUSH
30627: LD_VAR 0 7
30631: PPUSH
30632: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
30636: LD_VAR 0 2
30640: PPUSH
30641: LD_VAR 0 8
30645: PPUSH
30646: CALL_OW 172
// exit ;
30650: POP
30651: POP
30652: POP
30653: POP
30654: GO 30664
// end ;
30656: GO 30546
30658: POP
30659: POP
// end ; end ;
30660: GO 30035
30662: POP
30663: POP
// end ; end_of_file
30664: PPOPN 9
30666: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
30667: LD_INT 0
30669: PPUSH
30670: PPUSH
30671: PPUSH
30672: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
30673: LD_VAR 0 1
30677: PPUSH
30678: CALL_OW 264
30682: PUSH
30683: LD_INT 91
30685: EQUAL
30686: IFFALSE 30758
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
30688: LD_INT 68
30690: PPUSH
30691: LD_VAR 0 1
30695: PPUSH
30696: CALL_OW 255
30700: PPUSH
30701: CALL_OW 321
30705: PUSH
30706: LD_INT 2
30708: EQUAL
30709: IFFALSE 30721
// eff := 70 else
30711: LD_ADDR_VAR 0 4
30715: PUSH
30716: LD_INT 70
30718: ST_TO_ADDR
30719: GO 30729
// eff := 30 ;
30721: LD_ADDR_VAR 0 4
30725: PUSH
30726: LD_INT 30
30728: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 250
30738: PPUSH
30739: LD_VAR 0 1
30743: PPUSH
30744: CALL_OW 251
30748: PPUSH
30749: LD_VAR 0 4
30753: PPUSH
30754: CALL_OW 495
// end ; end ;
30758: LD_VAR 0 2
30762: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
30763: LD_INT 0
30765: PPUSH
// end ;
30766: LD_VAR 0 4
30770: RET
// export function SOS_Command ( cmd ) ; begin
30771: LD_INT 0
30773: PPUSH
// end ;
30774: LD_VAR 0 2
30778: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
30779: LD_INT 0
30781: PPUSH
// end ;
30782: LD_VAR 0 6
30786: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
30787: LD_INT 0
30789: PPUSH
30790: PPUSH
// if not vehicle or not factory then
30791: LD_VAR 0 1
30795: NOT
30796: PUSH
30797: LD_VAR 0 2
30801: NOT
30802: OR
30803: IFFALSE 30807
// exit ;
30805: GO 31038
// if factoryWaypoints >= factory then
30807: LD_EXP 119
30811: PUSH
30812: LD_VAR 0 2
30816: GREATEREQUAL
30817: IFFALSE 31038
// if factoryWaypoints [ factory ] then
30819: LD_EXP 119
30823: PUSH
30824: LD_VAR 0 2
30828: ARRAY
30829: IFFALSE 31038
// begin if GetControl ( vehicle ) = control_manual then
30831: LD_VAR 0 1
30835: PPUSH
30836: CALL_OW 263
30840: PUSH
30841: LD_INT 1
30843: EQUAL
30844: IFFALSE 30925
// begin driver := IsDrivenBy ( vehicle ) ;
30846: LD_ADDR_VAR 0 4
30850: PUSH
30851: LD_VAR 0 1
30855: PPUSH
30856: CALL_OW 311
30860: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30861: LD_VAR 0 4
30865: PPUSH
30866: LD_EXP 119
30870: PUSH
30871: LD_VAR 0 2
30875: ARRAY
30876: PUSH
30877: LD_INT 3
30879: ARRAY
30880: PPUSH
30881: LD_EXP 119
30885: PUSH
30886: LD_VAR 0 2
30890: ARRAY
30891: PUSH
30892: LD_INT 4
30894: ARRAY
30895: PPUSH
30896: CALL_OW 171
// AddComExitVehicle ( driver ) ;
30900: LD_VAR 0 4
30904: PPUSH
30905: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
30909: LD_VAR 0 4
30913: PPUSH
30914: LD_VAR 0 2
30918: PPUSH
30919: CALL_OW 180
// end else
30923: GO 31038
// if GetControl ( vehicle ) = control_remote then
30925: LD_VAR 0 1
30929: PPUSH
30930: CALL_OW 263
30934: PUSH
30935: LD_INT 2
30937: EQUAL
30938: IFFALSE 30999
// begin wait ( 0 0$2 ) ;
30940: LD_INT 70
30942: PPUSH
30943: CALL_OW 67
// if Connect ( vehicle ) then
30947: LD_VAR 0 1
30951: PPUSH
30952: CALL 43059 0 1
30956: IFFALSE 30997
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30958: LD_VAR 0 1
30962: PPUSH
30963: LD_EXP 119
30967: PUSH
30968: LD_VAR 0 2
30972: ARRAY
30973: PUSH
30974: LD_INT 3
30976: ARRAY
30977: PPUSH
30978: LD_EXP 119
30982: PUSH
30983: LD_VAR 0 2
30987: ARRAY
30988: PUSH
30989: LD_INT 4
30991: ARRAY
30992: PPUSH
30993: CALL_OW 171
// end else
30997: GO 31038
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
30999: LD_VAR 0 1
31003: PPUSH
31004: LD_EXP 119
31008: PUSH
31009: LD_VAR 0 2
31013: ARRAY
31014: PUSH
31015: LD_INT 3
31017: ARRAY
31018: PPUSH
31019: LD_EXP 119
31023: PUSH
31024: LD_VAR 0 2
31028: ARRAY
31029: PUSH
31030: LD_INT 4
31032: ARRAY
31033: PPUSH
31034: CALL_OW 171
// end ; end ;
31038: LD_VAR 0 3
31042: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
31043: LD_INT 0
31045: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
31046: LD_VAR 0 1
31050: PUSH
31051: LD_INT 250
31053: EQUAL
31054: PUSH
31055: LD_VAR 0 2
31059: PPUSH
31060: CALL_OW 264
31064: PUSH
31065: LD_INT 81
31067: EQUAL
31068: AND
31069: IFFALSE 31090
// MinerPlaceMine ( unit , x , y ) ;
31071: LD_VAR 0 2
31075: PPUSH
31076: LD_VAR 0 4
31080: PPUSH
31081: LD_VAR 0 5
31085: PPUSH
31086: CALL 33475 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
31090: LD_VAR 0 1
31094: PUSH
31095: LD_INT 251
31097: EQUAL
31098: PUSH
31099: LD_VAR 0 2
31103: PPUSH
31104: CALL_OW 264
31108: PUSH
31109: LD_INT 81
31111: EQUAL
31112: AND
31113: IFFALSE 31134
// MinerDetonateMine ( unit , x , y ) ;
31115: LD_VAR 0 2
31119: PPUSH
31120: LD_VAR 0 4
31124: PPUSH
31125: LD_VAR 0 5
31129: PPUSH
31130: CALL 33750 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
31134: LD_VAR 0 1
31138: PUSH
31139: LD_INT 252
31141: EQUAL
31142: PUSH
31143: LD_VAR 0 2
31147: PPUSH
31148: CALL_OW 264
31152: PUSH
31153: LD_INT 81
31155: EQUAL
31156: AND
31157: IFFALSE 31178
// MinerCreateMinefield ( unit , x , y ) ;
31159: LD_VAR 0 2
31163: PPUSH
31164: LD_VAR 0 4
31168: PPUSH
31169: LD_VAR 0 5
31173: PPUSH
31174: CALL 34167 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
31178: LD_VAR 0 1
31182: PUSH
31183: LD_INT 253
31185: EQUAL
31186: PUSH
31187: LD_VAR 0 2
31191: PPUSH
31192: CALL_OW 257
31196: PUSH
31197: LD_INT 5
31199: EQUAL
31200: AND
31201: IFFALSE 31222
// ComBinocular ( unit , x , y ) ;
31203: LD_VAR 0 2
31207: PPUSH
31208: LD_VAR 0 4
31212: PPUSH
31213: LD_VAR 0 5
31217: PPUSH
31218: CALL 34536 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
31222: LD_VAR 0 1
31226: PUSH
31227: LD_INT 254
31229: EQUAL
31230: PUSH
31231: LD_VAR 0 2
31235: PPUSH
31236: CALL_OW 264
31240: PUSH
31241: LD_INT 99
31243: EQUAL
31244: AND
31245: PUSH
31246: LD_VAR 0 3
31250: PPUSH
31251: CALL_OW 263
31255: PUSH
31256: LD_INT 3
31258: EQUAL
31259: AND
31260: IFFALSE 31276
// HackDestroyVehicle ( unit , selectedUnit ) ;
31262: LD_VAR 0 2
31266: PPUSH
31267: LD_VAR 0 3
31271: PPUSH
31272: CALL 32839 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
31276: LD_VAR 0 1
31280: PUSH
31281: LD_INT 255
31283: EQUAL
31284: PUSH
31285: LD_VAR 0 2
31289: PPUSH
31290: CALL_OW 264
31294: PUSH
31295: LD_INT 14
31297: PUSH
31298: LD_INT 53
31300: PUSH
31301: EMPTY
31302: LIST
31303: LIST
31304: IN
31305: AND
31306: PUSH
31307: LD_VAR 0 4
31311: PPUSH
31312: LD_VAR 0 5
31316: PPUSH
31317: CALL_OW 488
31321: AND
31322: IFFALSE 31346
// CutTreeXYR ( unit , x , y , 12 ) ;
31324: LD_VAR 0 2
31328: PPUSH
31329: LD_VAR 0 4
31333: PPUSH
31334: LD_VAR 0 5
31338: PPUSH
31339: LD_INT 12
31341: PPUSH
31342: CALL 31409 0 4
// if cmd = 256 then
31346: LD_VAR 0 1
31350: PUSH
31351: LD_INT 256
31353: EQUAL
31354: IFFALSE 31375
// SetFactoryWaypoint ( unit , x , y ) ;
31356: LD_VAR 0 2
31360: PPUSH
31361: LD_VAR 0 4
31365: PPUSH
31366: LD_VAR 0 5
31370: PPUSH
31371: CALL 29356 0 3
// if cmd = 257 then
31375: LD_VAR 0 1
31379: PUSH
31380: LD_INT 257
31382: EQUAL
31383: IFFALSE 31404
// SetWarehouseGatheringPoint ( unit , x , y ) ;
31385: LD_VAR 0 2
31389: PPUSH
31390: LD_VAR 0 4
31394: PPUSH
31395: LD_VAR 0 5
31399: PPUSH
31400: CALL 29718 0 3
// end ;
31404: LD_VAR 0 6
31408: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
31409: LD_INT 0
31411: PPUSH
31412: PPUSH
31413: PPUSH
31414: PPUSH
31415: PPUSH
31416: PPUSH
31417: PPUSH
31418: PPUSH
31419: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
31420: LD_VAR 0 1
31424: NOT
31425: PUSH
31426: LD_VAR 0 2
31430: PPUSH
31431: LD_VAR 0 3
31435: PPUSH
31436: CALL_OW 488
31440: NOT
31441: OR
31442: PUSH
31443: LD_VAR 0 4
31447: NOT
31448: OR
31449: IFFALSE 31453
// exit ;
31451: GO 31793
// list := [ ] ;
31453: LD_ADDR_VAR 0 13
31457: PUSH
31458: EMPTY
31459: ST_TO_ADDR
// if x - r < 0 then
31460: LD_VAR 0 2
31464: PUSH
31465: LD_VAR 0 4
31469: MINUS
31470: PUSH
31471: LD_INT 0
31473: LESS
31474: IFFALSE 31486
// min_x := 0 else
31476: LD_ADDR_VAR 0 7
31480: PUSH
31481: LD_INT 0
31483: ST_TO_ADDR
31484: GO 31502
// min_x := x - r ;
31486: LD_ADDR_VAR 0 7
31490: PUSH
31491: LD_VAR 0 2
31495: PUSH
31496: LD_VAR 0 4
31500: MINUS
31501: ST_TO_ADDR
// if y - r < 0 then
31502: LD_VAR 0 3
31506: PUSH
31507: LD_VAR 0 4
31511: MINUS
31512: PUSH
31513: LD_INT 0
31515: LESS
31516: IFFALSE 31528
// min_y := 0 else
31518: LD_ADDR_VAR 0 8
31522: PUSH
31523: LD_INT 0
31525: ST_TO_ADDR
31526: GO 31544
// min_y := y - r ;
31528: LD_ADDR_VAR 0 8
31532: PUSH
31533: LD_VAR 0 3
31537: PUSH
31538: LD_VAR 0 4
31542: MINUS
31543: ST_TO_ADDR
// max_x := x + r ;
31544: LD_ADDR_VAR 0 9
31548: PUSH
31549: LD_VAR 0 2
31553: PUSH
31554: LD_VAR 0 4
31558: PLUS
31559: ST_TO_ADDR
// max_y := y + r ;
31560: LD_ADDR_VAR 0 10
31564: PUSH
31565: LD_VAR 0 3
31569: PUSH
31570: LD_VAR 0 4
31574: PLUS
31575: ST_TO_ADDR
// for _x = min_x to max_x do
31576: LD_ADDR_VAR 0 11
31580: PUSH
31581: DOUBLE
31582: LD_VAR 0 7
31586: DEC
31587: ST_TO_ADDR
31588: LD_VAR 0 9
31592: PUSH
31593: FOR_TO
31594: IFFALSE 31711
// for _y = min_y to max_y do
31596: LD_ADDR_VAR 0 12
31600: PUSH
31601: DOUBLE
31602: LD_VAR 0 8
31606: DEC
31607: ST_TO_ADDR
31608: LD_VAR 0 10
31612: PUSH
31613: FOR_TO
31614: IFFALSE 31707
// begin if not ValidHex ( _x , _y ) then
31616: LD_VAR 0 11
31620: PPUSH
31621: LD_VAR 0 12
31625: PPUSH
31626: CALL_OW 488
31630: NOT
31631: IFFALSE 31635
// continue ;
31633: GO 31613
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
31635: LD_VAR 0 11
31639: PPUSH
31640: LD_VAR 0 12
31644: PPUSH
31645: CALL_OW 351
31649: PUSH
31650: LD_VAR 0 11
31654: PPUSH
31655: LD_VAR 0 12
31659: PPUSH
31660: CALL_OW 554
31664: AND
31665: IFFALSE 31705
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
31667: LD_ADDR_VAR 0 13
31671: PUSH
31672: LD_VAR 0 13
31676: PPUSH
31677: LD_VAR 0 13
31681: PUSH
31682: LD_INT 1
31684: PLUS
31685: PPUSH
31686: LD_VAR 0 11
31690: PUSH
31691: LD_VAR 0 12
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PPUSH
31700: CALL_OW 2
31704: ST_TO_ADDR
// end ;
31705: GO 31613
31707: POP
31708: POP
31709: GO 31593
31711: POP
31712: POP
// if not list then
31713: LD_VAR 0 13
31717: NOT
31718: IFFALSE 31722
// exit ;
31720: GO 31793
// for i in list do
31722: LD_ADDR_VAR 0 6
31726: PUSH
31727: LD_VAR 0 13
31731: PUSH
31732: FOR_IN
31733: IFFALSE 31791
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
31735: LD_VAR 0 1
31739: PPUSH
31740: LD_STRING M
31742: PUSH
31743: LD_VAR 0 6
31747: PUSH
31748: LD_INT 1
31750: ARRAY
31751: PUSH
31752: LD_VAR 0 6
31756: PUSH
31757: LD_INT 2
31759: ARRAY
31760: PUSH
31761: LD_INT 0
31763: PUSH
31764: LD_INT 0
31766: PUSH
31767: LD_INT 0
31769: PUSH
31770: LD_INT 0
31772: PUSH
31773: EMPTY
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: PUSH
31782: EMPTY
31783: LIST
31784: PPUSH
31785: CALL_OW 447
31789: GO 31732
31791: POP
31792: POP
// end ;
31793: LD_VAR 0 5
31797: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
31798: LD_EXP 122
31802: NOT
31803: IFFALSE 31853
31805: GO 31807
31807: DISABLE
// begin initHack := true ;
31808: LD_ADDR_EXP 122
31812: PUSH
31813: LD_INT 1
31815: ST_TO_ADDR
// hackTanks := [ ] ;
31816: LD_ADDR_EXP 123
31820: PUSH
31821: EMPTY
31822: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
31823: LD_ADDR_EXP 124
31827: PUSH
31828: EMPTY
31829: ST_TO_ADDR
// hackLimit := 3 ;
31830: LD_ADDR_EXP 125
31834: PUSH
31835: LD_INT 3
31837: ST_TO_ADDR
// hackDist := 12 ;
31838: LD_ADDR_EXP 126
31842: PUSH
31843: LD_INT 12
31845: ST_TO_ADDR
// hackCounter := [ ] ;
31846: LD_ADDR_EXP 127
31850: PUSH
31851: EMPTY
31852: ST_TO_ADDR
// end ;
31853: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
31854: LD_EXP 122
31858: PUSH
31859: LD_INT 34
31861: PUSH
31862: LD_INT 99
31864: PUSH
31865: EMPTY
31866: LIST
31867: LIST
31868: PPUSH
31869: CALL_OW 69
31873: AND
31874: IFFALSE 32127
31876: GO 31878
31878: DISABLE
31879: LD_INT 0
31881: PPUSH
31882: PPUSH
// begin enable ;
31883: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
31884: LD_ADDR_VAR 0 1
31888: PUSH
31889: LD_INT 34
31891: PUSH
31892: LD_INT 99
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PPUSH
31899: CALL_OW 69
31903: PUSH
31904: FOR_IN
31905: IFFALSE 32125
// begin if not i in hackTanks then
31907: LD_VAR 0 1
31911: PUSH
31912: LD_EXP 123
31916: IN
31917: NOT
31918: IFFALSE 32001
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
31920: LD_ADDR_EXP 123
31924: PUSH
31925: LD_EXP 123
31929: PPUSH
31930: LD_EXP 123
31934: PUSH
31935: LD_INT 1
31937: PLUS
31938: PPUSH
31939: LD_VAR 0 1
31943: PPUSH
31944: CALL_OW 1
31948: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
31949: LD_ADDR_EXP 124
31953: PUSH
31954: LD_EXP 124
31958: PPUSH
31959: LD_EXP 124
31963: PUSH
31964: LD_INT 1
31966: PLUS
31967: PPUSH
31968: EMPTY
31969: PPUSH
31970: CALL_OW 1
31974: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
31975: LD_ADDR_EXP 127
31979: PUSH
31980: LD_EXP 127
31984: PPUSH
31985: LD_EXP 127
31989: PUSH
31990: LD_INT 1
31992: PLUS
31993: PPUSH
31994: EMPTY
31995: PPUSH
31996: CALL_OW 1
32000: ST_TO_ADDR
// end ; if not IsOk ( i ) then
32001: LD_VAR 0 1
32005: PPUSH
32006: CALL_OW 302
32010: NOT
32011: IFFALSE 32024
// begin HackUnlinkAll ( i ) ;
32013: LD_VAR 0 1
32017: PPUSH
32018: CALL 32130 0 1
// continue ;
32022: GO 31904
// end ; HackCheckCapturedStatus ( i ) ;
32024: LD_VAR 0 1
32028: PPUSH
32029: CALL 32573 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
32033: LD_ADDR_VAR 0 2
32037: PUSH
32038: LD_INT 81
32040: PUSH
32041: LD_VAR 0 1
32045: PPUSH
32046: CALL_OW 255
32050: PUSH
32051: EMPTY
32052: LIST
32053: LIST
32054: PUSH
32055: LD_INT 33
32057: PUSH
32058: LD_INT 3
32060: PUSH
32061: EMPTY
32062: LIST
32063: LIST
32064: PUSH
32065: LD_INT 91
32067: PUSH
32068: LD_VAR 0 1
32072: PUSH
32073: LD_EXP 126
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 50
32085: PUSH
32086: EMPTY
32087: LIST
32088: PUSH
32089: EMPTY
32090: LIST
32091: LIST
32092: LIST
32093: LIST
32094: PPUSH
32095: CALL_OW 69
32099: ST_TO_ADDR
// if not tmp then
32100: LD_VAR 0 2
32104: NOT
32105: IFFALSE 32109
// continue ;
32107: GO 31904
// HackLink ( i , tmp ) ;
32109: LD_VAR 0 1
32113: PPUSH
32114: LD_VAR 0 2
32118: PPUSH
32119: CALL 32266 0 2
// end ;
32123: GO 31904
32125: POP
32126: POP
// end ;
32127: PPOPN 2
32129: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
32130: LD_INT 0
32132: PPUSH
32133: PPUSH
32134: PPUSH
// if not hack in hackTanks then
32135: LD_VAR 0 1
32139: PUSH
32140: LD_EXP 123
32144: IN
32145: NOT
32146: IFFALSE 32150
// exit ;
32148: GO 32261
// index := GetElementIndex ( hackTanks , hack ) ;
32150: LD_ADDR_VAR 0 4
32154: PUSH
32155: LD_EXP 123
32159: PPUSH
32160: LD_VAR 0 1
32164: PPUSH
32165: CALL 39866 0 2
32169: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
32170: LD_EXP 124
32174: PUSH
32175: LD_VAR 0 4
32179: ARRAY
32180: IFFALSE 32261
// begin for i in hackTanksCaptured [ index ] do
32182: LD_ADDR_VAR 0 3
32186: PUSH
32187: LD_EXP 124
32191: PUSH
32192: LD_VAR 0 4
32196: ARRAY
32197: PUSH
32198: FOR_IN
32199: IFFALSE 32225
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
32201: LD_VAR 0 3
32205: PUSH
32206: LD_INT 1
32208: ARRAY
32209: PPUSH
32210: LD_VAR 0 3
32214: PUSH
32215: LD_INT 2
32217: ARRAY
32218: PPUSH
32219: CALL_OW 235
32223: GO 32198
32225: POP
32226: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
32227: LD_ADDR_EXP 124
32231: PUSH
32232: LD_EXP 124
32236: PPUSH
32237: LD_VAR 0 4
32241: PPUSH
32242: EMPTY
32243: PPUSH
32244: CALL_OW 1
32248: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
32249: LD_VAR 0 1
32253: PPUSH
32254: LD_INT 0
32256: PPUSH
32257: CALL_OW 505
// end ; end ;
32261: LD_VAR 0 2
32265: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
32266: LD_INT 0
32268: PPUSH
32269: PPUSH
32270: PPUSH
// if not hack in hackTanks or not vehicles then
32271: LD_VAR 0 1
32275: PUSH
32276: LD_EXP 123
32280: IN
32281: NOT
32282: PUSH
32283: LD_VAR 0 2
32287: NOT
32288: OR
32289: IFFALSE 32293
// exit ;
32291: GO 32568
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
32293: LD_ADDR_VAR 0 2
32297: PUSH
32298: LD_VAR 0 1
32302: PPUSH
32303: LD_VAR 0 2
32307: PPUSH
32308: LD_INT 1
32310: PPUSH
32311: LD_INT 1
32313: PPUSH
32314: CALL 40516 0 4
32318: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
32319: LD_ADDR_VAR 0 5
32323: PUSH
32324: LD_EXP 123
32328: PPUSH
32329: LD_VAR 0 1
32333: PPUSH
32334: CALL 39866 0 2
32338: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
32339: LD_EXP 124
32343: PUSH
32344: LD_VAR 0 5
32348: ARRAY
32349: PUSH
32350: LD_EXP 125
32354: LESS
32355: IFFALSE 32544
// begin for i := 1 to vehicles do
32357: LD_ADDR_VAR 0 4
32361: PUSH
32362: DOUBLE
32363: LD_INT 1
32365: DEC
32366: ST_TO_ADDR
32367: LD_VAR 0 2
32371: PUSH
32372: FOR_TO
32373: IFFALSE 32542
// begin if hackTanksCaptured [ index ] = hackLimit then
32375: LD_EXP 124
32379: PUSH
32380: LD_VAR 0 5
32384: ARRAY
32385: PUSH
32386: LD_EXP 125
32390: EQUAL
32391: IFFALSE 32395
// break ;
32393: GO 32542
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
32395: LD_ADDR_EXP 127
32399: PUSH
32400: LD_EXP 127
32404: PPUSH
32405: LD_VAR 0 5
32409: PPUSH
32410: LD_EXP 127
32414: PUSH
32415: LD_VAR 0 5
32419: ARRAY
32420: PUSH
32421: LD_INT 1
32423: PLUS
32424: PPUSH
32425: CALL_OW 1
32429: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
32430: LD_ADDR_EXP 124
32434: PUSH
32435: LD_EXP 124
32439: PPUSH
32440: LD_VAR 0 5
32444: PUSH
32445: LD_EXP 124
32449: PUSH
32450: LD_VAR 0 5
32454: ARRAY
32455: PUSH
32456: LD_INT 1
32458: PLUS
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PPUSH
32464: LD_VAR 0 2
32468: PUSH
32469: LD_VAR 0 4
32473: ARRAY
32474: PUSH
32475: LD_VAR 0 2
32479: PUSH
32480: LD_VAR 0 4
32484: ARRAY
32485: PPUSH
32486: CALL_OW 255
32490: PUSH
32491: EMPTY
32492: LIST
32493: LIST
32494: PPUSH
32495: CALL 40081 0 3
32499: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
32500: LD_VAR 0 2
32504: PUSH
32505: LD_VAR 0 4
32509: ARRAY
32510: PPUSH
32511: LD_VAR 0 1
32515: PPUSH
32516: CALL_OW 255
32520: PPUSH
32521: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
32525: LD_VAR 0 2
32529: PUSH
32530: LD_VAR 0 4
32534: ARRAY
32535: PPUSH
32536: CALL_OW 141
// end ;
32540: GO 32372
32542: POP
32543: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32544: LD_VAR 0 1
32548: PPUSH
32549: LD_EXP 124
32553: PUSH
32554: LD_VAR 0 5
32558: ARRAY
32559: PUSH
32560: LD_INT 0
32562: PLUS
32563: PPUSH
32564: CALL_OW 505
// end ;
32568: LD_VAR 0 3
32572: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
32573: LD_INT 0
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
// if not hack in hackTanks then
32579: LD_VAR 0 1
32583: PUSH
32584: LD_EXP 123
32588: IN
32589: NOT
32590: IFFALSE 32594
// exit ;
32592: GO 32834
// index := GetElementIndex ( hackTanks , hack ) ;
32594: LD_ADDR_VAR 0 4
32598: PUSH
32599: LD_EXP 123
32603: PPUSH
32604: LD_VAR 0 1
32608: PPUSH
32609: CALL 39866 0 2
32613: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
32614: LD_ADDR_VAR 0 3
32618: PUSH
32619: DOUBLE
32620: LD_EXP 124
32624: PUSH
32625: LD_VAR 0 4
32629: ARRAY
32630: INC
32631: ST_TO_ADDR
32632: LD_INT 1
32634: PUSH
32635: FOR_DOWNTO
32636: IFFALSE 32808
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
32638: LD_ADDR_VAR 0 5
32642: PUSH
32643: LD_EXP 124
32647: PUSH
32648: LD_VAR 0 4
32652: ARRAY
32653: PUSH
32654: LD_VAR 0 3
32658: ARRAY
32659: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
32660: LD_VAR 0 5
32664: PUSH
32665: LD_INT 1
32667: ARRAY
32668: PPUSH
32669: CALL_OW 302
32673: NOT
32674: PUSH
32675: LD_VAR 0 5
32679: PUSH
32680: LD_INT 1
32682: ARRAY
32683: PPUSH
32684: CALL_OW 255
32688: PUSH
32689: LD_VAR 0 1
32693: PPUSH
32694: CALL_OW 255
32698: NONEQUAL
32699: OR
32700: IFFALSE 32806
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
32702: LD_VAR 0 5
32706: PUSH
32707: LD_INT 1
32709: ARRAY
32710: PPUSH
32711: CALL_OW 305
32715: PUSH
32716: LD_VAR 0 5
32720: PUSH
32721: LD_INT 1
32723: ARRAY
32724: PPUSH
32725: CALL_OW 255
32729: PUSH
32730: LD_VAR 0 1
32734: PPUSH
32735: CALL_OW 255
32739: EQUAL
32740: AND
32741: IFFALSE 32765
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
32743: LD_VAR 0 5
32747: PUSH
32748: LD_INT 1
32750: ARRAY
32751: PPUSH
32752: LD_VAR 0 5
32756: PUSH
32757: LD_INT 2
32759: ARRAY
32760: PPUSH
32761: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
32765: LD_ADDR_EXP 124
32769: PUSH
32770: LD_EXP 124
32774: PPUSH
32775: LD_VAR 0 4
32779: PPUSH
32780: LD_EXP 124
32784: PUSH
32785: LD_VAR 0 4
32789: ARRAY
32790: PPUSH
32791: LD_VAR 0 3
32795: PPUSH
32796: CALL_OW 3
32800: PPUSH
32801: CALL_OW 1
32805: ST_TO_ADDR
// end ; end ;
32806: GO 32635
32808: POP
32809: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
32810: LD_VAR 0 1
32814: PPUSH
32815: LD_EXP 124
32819: PUSH
32820: LD_VAR 0 4
32824: ARRAY
32825: PUSH
32826: LD_INT 0
32828: PLUS
32829: PPUSH
32830: CALL_OW 505
// end ;
32834: LD_VAR 0 2
32838: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
32839: LD_INT 0
32841: PPUSH
32842: PPUSH
32843: PPUSH
32844: PPUSH
// if not hack in hackTanks then
32845: LD_VAR 0 1
32849: PUSH
32850: LD_EXP 123
32854: IN
32855: NOT
32856: IFFALSE 32860
// exit ;
32858: GO 32945
// index := GetElementIndex ( hackTanks , hack ) ;
32860: LD_ADDR_VAR 0 5
32864: PUSH
32865: LD_EXP 123
32869: PPUSH
32870: LD_VAR 0 1
32874: PPUSH
32875: CALL 39866 0 2
32879: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
32880: LD_ADDR_VAR 0 4
32884: PUSH
32885: DOUBLE
32886: LD_INT 1
32888: DEC
32889: ST_TO_ADDR
32890: LD_EXP 124
32894: PUSH
32895: LD_VAR 0 5
32899: ARRAY
32900: PUSH
32901: FOR_TO
32902: IFFALSE 32943
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
32904: LD_EXP 124
32908: PUSH
32909: LD_VAR 0 5
32913: ARRAY
32914: PUSH
32915: LD_VAR 0 4
32919: ARRAY
32920: PUSH
32921: LD_INT 1
32923: ARRAY
32924: PUSH
32925: LD_VAR 0 2
32929: EQUAL
32930: IFFALSE 32941
// KillUnit ( vehicle ) ;
32932: LD_VAR 0 2
32936: PPUSH
32937: CALL_OW 66
32941: GO 32901
32943: POP
32944: POP
// end ;
32945: LD_VAR 0 3
32949: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
32950: LD_EXP 128
32954: NOT
32955: IFFALSE 32990
32957: GO 32959
32959: DISABLE
// begin initMiner := true ;
32960: LD_ADDR_EXP 128
32964: PUSH
32965: LD_INT 1
32967: ST_TO_ADDR
// minersList := [ ] ;
32968: LD_ADDR_EXP 129
32972: PUSH
32973: EMPTY
32974: ST_TO_ADDR
// minerMinesList := [ ] ;
32975: LD_ADDR_EXP 130
32979: PUSH
32980: EMPTY
32981: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
32982: LD_ADDR_EXP 131
32986: PUSH
32987: LD_INT 5
32989: ST_TO_ADDR
// end ;
32990: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
32991: LD_EXP 128
32995: PUSH
32996: LD_INT 34
32998: PUSH
32999: LD_INT 81
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PPUSH
33006: CALL_OW 69
33010: AND
33011: IFFALSE 33472
33013: GO 33015
33015: DISABLE
33016: LD_INT 0
33018: PPUSH
33019: PPUSH
33020: PPUSH
33021: PPUSH
// begin enable ;
33022: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
33023: LD_ADDR_VAR 0 1
33027: PUSH
33028: LD_INT 34
33030: PUSH
33031: LD_INT 81
33033: PUSH
33034: EMPTY
33035: LIST
33036: LIST
33037: PPUSH
33038: CALL_OW 69
33042: PUSH
33043: FOR_IN
33044: IFFALSE 33116
// begin if not i in minersList then
33046: LD_VAR 0 1
33050: PUSH
33051: LD_EXP 129
33055: IN
33056: NOT
33057: IFFALSE 33114
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
33059: LD_ADDR_EXP 129
33063: PUSH
33064: LD_EXP 129
33068: PPUSH
33069: LD_EXP 129
33073: PUSH
33074: LD_INT 1
33076: PLUS
33077: PPUSH
33078: LD_VAR 0 1
33082: PPUSH
33083: CALL_OW 1
33087: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
33088: LD_ADDR_EXP 130
33092: PUSH
33093: LD_EXP 130
33097: PPUSH
33098: LD_EXP 130
33102: PUSH
33103: LD_INT 1
33105: PLUS
33106: PPUSH
33107: EMPTY
33108: PPUSH
33109: CALL_OW 1
33113: ST_TO_ADDR
// end end ;
33114: GO 33043
33116: POP
33117: POP
// for i := minerMinesList downto 1 do
33118: LD_ADDR_VAR 0 1
33122: PUSH
33123: DOUBLE
33124: LD_EXP 130
33128: INC
33129: ST_TO_ADDR
33130: LD_INT 1
33132: PUSH
33133: FOR_DOWNTO
33134: IFFALSE 33470
// begin if IsLive ( minersList [ i ] ) then
33136: LD_EXP 129
33140: PUSH
33141: LD_VAR 0 1
33145: ARRAY
33146: PPUSH
33147: CALL_OW 300
33151: IFFALSE 33179
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
33153: LD_EXP 129
33157: PUSH
33158: LD_VAR 0 1
33162: ARRAY
33163: PPUSH
33164: LD_EXP 130
33168: PUSH
33169: LD_VAR 0 1
33173: ARRAY
33174: PPUSH
33175: CALL_OW 505
// if not minerMinesList [ i ] then
33179: LD_EXP 130
33183: PUSH
33184: LD_VAR 0 1
33188: ARRAY
33189: NOT
33190: IFFALSE 33194
// continue ;
33192: GO 33133
// for j := minerMinesList [ i ] downto 1 do
33194: LD_ADDR_VAR 0 2
33198: PUSH
33199: DOUBLE
33200: LD_EXP 130
33204: PUSH
33205: LD_VAR 0 1
33209: ARRAY
33210: INC
33211: ST_TO_ADDR
33212: LD_INT 1
33214: PUSH
33215: FOR_DOWNTO
33216: IFFALSE 33466
// begin side := GetSide ( minersList [ i ] ) ;
33218: LD_ADDR_VAR 0 3
33222: PUSH
33223: LD_EXP 129
33227: PUSH
33228: LD_VAR 0 1
33232: ARRAY
33233: PPUSH
33234: CALL_OW 255
33238: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
33239: LD_ADDR_VAR 0 4
33243: PUSH
33244: LD_EXP 130
33248: PUSH
33249: LD_VAR 0 1
33253: ARRAY
33254: PUSH
33255: LD_VAR 0 2
33259: ARRAY
33260: PUSH
33261: LD_INT 1
33263: ARRAY
33264: PPUSH
33265: LD_EXP 130
33269: PUSH
33270: LD_VAR 0 1
33274: ARRAY
33275: PUSH
33276: LD_VAR 0 2
33280: ARRAY
33281: PUSH
33282: LD_INT 2
33284: ARRAY
33285: PPUSH
33286: CALL_OW 428
33290: ST_TO_ADDR
// if not tmp then
33291: LD_VAR 0 4
33295: NOT
33296: IFFALSE 33300
// continue ;
33298: GO 33215
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
33300: LD_VAR 0 4
33304: PUSH
33305: LD_INT 81
33307: PUSH
33308: LD_VAR 0 3
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: PPUSH
33317: CALL_OW 69
33321: IN
33322: PUSH
33323: LD_EXP 130
33327: PUSH
33328: LD_VAR 0 1
33332: ARRAY
33333: PUSH
33334: LD_VAR 0 2
33338: ARRAY
33339: PUSH
33340: LD_INT 1
33342: ARRAY
33343: PPUSH
33344: LD_EXP 130
33348: PUSH
33349: LD_VAR 0 1
33353: ARRAY
33354: PUSH
33355: LD_VAR 0 2
33359: ARRAY
33360: PUSH
33361: LD_INT 2
33363: ARRAY
33364: PPUSH
33365: CALL_OW 458
33369: AND
33370: IFFALSE 33464
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
33372: LD_EXP 130
33376: PUSH
33377: LD_VAR 0 1
33381: ARRAY
33382: PUSH
33383: LD_VAR 0 2
33387: ARRAY
33388: PUSH
33389: LD_INT 1
33391: ARRAY
33392: PPUSH
33393: LD_EXP 130
33397: PUSH
33398: LD_VAR 0 1
33402: ARRAY
33403: PUSH
33404: LD_VAR 0 2
33408: ARRAY
33409: PUSH
33410: LD_INT 2
33412: ARRAY
33413: PPUSH
33414: LD_VAR 0 3
33418: PPUSH
33419: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
33423: LD_ADDR_EXP 130
33427: PUSH
33428: LD_EXP 130
33432: PPUSH
33433: LD_VAR 0 1
33437: PPUSH
33438: LD_EXP 130
33442: PUSH
33443: LD_VAR 0 1
33447: ARRAY
33448: PPUSH
33449: LD_VAR 0 2
33453: PPUSH
33454: CALL_OW 3
33458: PPUSH
33459: CALL_OW 1
33463: ST_TO_ADDR
// end ; end ;
33464: GO 33215
33466: POP
33467: POP
// end ;
33468: GO 33133
33470: POP
33471: POP
// end ;
33472: PPOPN 4
33474: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
33475: LD_INT 0
33477: PPUSH
33478: PPUSH
// result := false ;
33479: LD_ADDR_VAR 0 4
33483: PUSH
33484: LD_INT 0
33486: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
33487: LD_VAR 0 1
33491: PPUSH
33492: CALL_OW 264
33496: PUSH
33497: LD_INT 81
33499: EQUAL
33500: NOT
33501: IFFALSE 33505
// exit ;
33503: GO 33745
// index := GetElementIndex ( minersList , unit ) ;
33505: LD_ADDR_VAR 0 5
33509: PUSH
33510: LD_EXP 129
33514: PPUSH
33515: LD_VAR 0 1
33519: PPUSH
33520: CALL 39866 0 2
33524: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
33525: LD_EXP 130
33529: PUSH
33530: LD_VAR 0 5
33534: ARRAY
33535: PUSH
33536: LD_EXP 131
33540: GREATEREQUAL
33541: IFFALSE 33545
// exit ;
33543: GO 33745
// ComMoveXY ( unit , x , y ) ;
33545: LD_VAR 0 1
33549: PPUSH
33550: LD_VAR 0 2
33554: PPUSH
33555: LD_VAR 0 3
33559: PPUSH
33560: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
33564: LD_INT 35
33566: PPUSH
33567: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
33571: LD_VAR 0 1
33575: PPUSH
33576: LD_VAR 0 2
33580: PPUSH
33581: LD_VAR 0 3
33585: PPUSH
33586: CALL 71250 0 3
33590: NOT
33591: PUSH
33592: LD_VAR 0 1
33596: PPUSH
33597: CALL_OW 314
33601: AND
33602: IFFALSE 33606
// exit ;
33604: GO 33745
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
33606: LD_VAR 0 2
33610: PPUSH
33611: LD_VAR 0 3
33615: PPUSH
33616: CALL_OW 428
33620: PUSH
33621: LD_VAR 0 1
33625: EQUAL
33626: PUSH
33627: LD_VAR 0 1
33631: PPUSH
33632: CALL_OW 314
33636: NOT
33637: AND
33638: IFFALSE 33564
// PlaySoundXY ( x , y , PlantMine ) ;
33640: LD_VAR 0 2
33644: PPUSH
33645: LD_VAR 0 3
33649: PPUSH
33650: LD_STRING PlantMine
33652: PPUSH
33653: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
33657: LD_VAR 0 2
33661: PPUSH
33662: LD_VAR 0 3
33666: PPUSH
33667: LD_VAR 0 1
33671: PPUSH
33672: CALL_OW 255
33676: PPUSH
33677: LD_INT 0
33679: PPUSH
33680: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
33684: LD_ADDR_EXP 130
33688: PUSH
33689: LD_EXP 130
33693: PPUSH
33694: LD_VAR 0 5
33698: PUSH
33699: LD_EXP 130
33703: PUSH
33704: LD_VAR 0 5
33708: ARRAY
33709: PUSH
33710: LD_INT 1
33712: PLUS
33713: PUSH
33714: EMPTY
33715: LIST
33716: LIST
33717: PPUSH
33718: LD_VAR 0 2
33722: PUSH
33723: LD_VAR 0 3
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: PPUSH
33732: CALL 40081 0 3
33736: ST_TO_ADDR
// result := true ;
33737: LD_ADDR_VAR 0 4
33741: PUSH
33742: LD_INT 1
33744: ST_TO_ADDR
// end ;
33745: LD_VAR 0 4
33749: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
33750: LD_INT 0
33752: PPUSH
33753: PPUSH
33754: PPUSH
// if not unit in minersList then
33755: LD_VAR 0 1
33759: PUSH
33760: LD_EXP 129
33764: IN
33765: NOT
33766: IFFALSE 33770
// exit ;
33768: GO 34162
// index := GetElementIndex ( minersList , unit ) ;
33770: LD_ADDR_VAR 0 6
33774: PUSH
33775: LD_EXP 129
33779: PPUSH
33780: LD_VAR 0 1
33784: PPUSH
33785: CALL 39866 0 2
33789: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
33790: LD_ADDR_VAR 0 5
33794: PUSH
33795: DOUBLE
33796: LD_EXP 130
33800: PUSH
33801: LD_VAR 0 6
33805: ARRAY
33806: INC
33807: ST_TO_ADDR
33808: LD_INT 1
33810: PUSH
33811: FOR_DOWNTO
33812: IFFALSE 33973
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
33814: LD_EXP 130
33818: PUSH
33819: LD_VAR 0 6
33823: ARRAY
33824: PUSH
33825: LD_VAR 0 5
33829: ARRAY
33830: PUSH
33831: LD_INT 1
33833: ARRAY
33834: PUSH
33835: LD_VAR 0 2
33839: EQUAL
33840: PUSH
33841: LD_EXP 130
33845: PUSH
33846: LD_VAR 0 6
33850: ARRAY
33851: PUSH
33852: LD_VAR 0 5
33856: ARRAY
33857: PUSH
33858: LD_INT 2
33860: ARRAY
33861: PUSH
33862: LD_VAR 0 3
33866: EQUAL
33867: AND
33868: IFFALSE 33971
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
33870: LD_EXP 130
33874: PUSH
33875: LD_VAR 0 6
33879: ARRAY
33880: PUSH
33881: LD_VAR 0 5
33885: ARRAY
33886: PUSH
33887: LD_INT 1
33889: ARRAY
33890: PPUSH
33891: LD_EXP 130
33895: PUSH
33896: LD_VAR 0 6
33900: ARRAY
33901: PUSH
33902: LD_VAR 0 5
33906: ARRAY
33907: PUSH
33908: LD_INT 2
33910: ARRAY
33911: PPUSH
33912: LD_VAR 0 1
33916: PPUSH
33917: CALL_OW 255
33921: PPUSH
33922: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
33926: LD_ADDR_EXP 130
33930: PUSH
33931: LD_EXP 130
33935: PPUSH
33936: LD_VAR 0 6
33940: PPUSH
33941: LD_EXP 130
33945: PUSH
33946: LD_VAR 0 6
33950: ARRAY
33951: PPUSH
33952: LD_VAR 0 5
33956: PPUSH
33957: CALL_OW 3
33961: PPUSH
33962: CALL_OW 1
33966: ST_TO_ADDR
// exit ;
33967: POP
33968: POP
33969: GO 34162
// end ; end ;
33971: GO 33811
33973: POP
33974: POP
// for i := minerMinesList [ index ] downto 1 do
33975: LD_ADDR_VAR 0 5
33979: PUSH
33980: DOUBLE
33981: LD_EXP 130
33985: PUSH
33986: LD_VAR 0 6
33990: ARRAY
33991: INC
33992: ST_TO_ADDR
33993: LD_INT 1
33995: PUSH
33996: FOR_DOWNTO
33997: IFFALSE 34160
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
33999: LD_EXP 130
34003: PUSH
34004: LD_VAR 0 6
34008: ARRAY
34009: PUSH
34010: LD_VAR 0 5
34014: ARRAY
34015: PUSH
34016: LD_INT 1
34018: ARRAY
34019: PPUSH
34020: LD_EXP 130
34024: PUSH
34025: LD_VAR 0 6
34029: ARRAY
34030: PUSH
34031: LD_VAR 0 5
34035: ARRAY
34036: PUSH
34037: LD_INT 2
34039: ARRAY
34040: PPUSH
34041: LD_VAR 0 2
34045: PPUSH
34046: LD_VAR 0 3
34050: PPUSH
34051: CALL_OW 298
34055: PUSH
34056: LD_INT 6
34058: LESS
34059: IFFALSE 34158
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
34061: LD_EXP 130
34065: PUSH
34066: LD_VAR 0 6
34070: ARRAY
34071: PUSH
34072: LD_VAR 0 5
34076: ARRAY
34077: PUSH
34078: LD_INT 1
34080: ARRAY
34081: PPUSH
34082: LD_EXP 130
34086: PUSH
34087: LD_VAR 0 6
34091: ARRAY
34092: PUSH
34093: LD_VAR 0 5
34097: ARRAY
34098: PUSH
34099: LD_INT 2
34101: ARRAY
34102: PPUSH
34103: LD_VAR 0 1
34107: PPUSH
34108: CALL_OW 255
34112: PPUSH
34113: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
34117: LD_ADDR_EXP 130
34121: PUSH
34122: LD_EXP 130
34126: PPUSH
34127: LD_VAR 0 6
34131: PPUSH
34132: LD_EXP 130
34136: PUSH
34137: LD_VAR 0 6
34141: ARRAY
34142: PPUSH
34143: LD_VAR 0 5
34147: PPUSH
34148: CALL_OW 3
34152: PPUSH
34153: CALL_OW 1
34157: ST_TO_ADDR
// end ; end ;
34158: GO 33996
34160: POP
34161: POP
// end ;
34162: LD_VAR 0 4
34166: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
34167: LD_INT 0
34169: PPUSH
34170: PPUSH
34171: PPUSH
34172: PPUSH
34173: PPUSH
34174: PPUSH
34175: PPUSH
34176: PPUSH
34177: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
34178: LD_VAR 0 1
34182: PPUSH
34183: CALL_OW 264
34187: PUSH
34188: LD_INT 81
34190: EQUAL
34191: NOT
34192: PUSH
34193: LD_VAR 0 1
34197: PUSH
34198: LD_EXP 129
34202: IN
34203: NOT
34204: OR
34205: IFFALSE 34209
// exit ;
34207: GO 34531
// index := GetElementIndex ( minersList , unit ) ;
34209: LD_ADDR_VAR 0 6
34213: PUSH
34214: LD_EXP 129
34218: PPUSH
34219: LD_VAR 0 1
34223: PPUSH
34224: CALL 39866 0 2
34228: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
34229: LD_ADDR_VAR 0 8
34233: PUSH
34234: LD_EXP 131
34238: PUSH
34239: LD_EXP 130
34243: PUSH
34244: LD_VAR 0 6
34248: ARRAY
34249: MINUS
34250: ST_TO_ADDR
// if not minesFreeAmount then
34251: LD_VAR 0 8
34255: NOT
34256: IFFALSE 34260
// exit ;
34258: GO 34531
// tmp := [ ] ;
34260: LD_ADDR_VAR 0 7
34264: PUSH
34265: EMPTY
34266: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
34267: LD_ADDR_VAR 0 5
34271: PUSH
34272: DOUBLE
34273: LD_INT 1
34275: DEC
34276: ST_TO_ADDR
34277: LD_VAR 0 8
34281: PUSH
34282: FOR_TO
34283: IFFALSE 34478
// begin _d := rand ( 0 , 5 ) ;
34285: LD_ADDR_VAR 0 11
34289: PUSH
34290: LD_INT 0
34292: PPUSH
34293: LD_INT 5
34295: PPUSH
34296: CALL_OW 12
34300: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
34301: LD_ADDR_VAR 0 12
34305: PUSH
34306: LD_INT 2
34308: PPUSH
34309: LD_INT 6
34311: PPUSH
34312: CALL_OW 12
34316: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
34317: LD_ADDR_VAR 0 9
34321: PUSH
34322: LD_VAR 0 2
34326: PPUSH
34327: LD_VAR 0 11
34331: PPUSH
34332: LD_VAR 0 12
34336: PPUSH
34337: CALL_OW 272
34341: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
34342: LD_ADDR_VAR 0 10
34346: PUSH
34347: LD_VAR 0 3
34351: PPUSH
34352: LD_VAR 0 11
34356: PPUSH
34357: LD_VAR 0 12
34361: PPUSH
34362: CALL_OW 273
34366: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
34367: LD_VAR 0 9
34371: PPUSH
34372: LD_VAR 0 10
34376: PPUSH
34377: CALL_OW 488
34381: PUSH
34382: LD_VAR 0 9
34386: PUSH
34387: LD_VAR 0 10
34391: PUSH
34392: EMPTY
34393: LIST
34394: LIST
34395: PUSH
34396: LD_VAR 0 7
34400: IN
34401: NOT
34402: AND
34403: PUSH
34404: LD_VAR 0 9
34408: PPUSH
34409: LD_VAR 0 10
34413: PPUSH
34414: CALL_OW 458
34418: NOT
34419: AND
34420: IFFALSE 34462
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
34422: LD_ADDR_VAR 0 7
34426: PUSH
34427: LD_VAR 0 7
34431: PPUSH
34432: LD_VAR 0 7
34436: PUSH
34437: LD_INT 1
34439: PLUS
34440: PPUSH
34441: LD_VAR 0 9
34445: PUSH
34446: LD_VAR 0 10
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PPUSH
34455: CALL_OW 1
34459: ST_TO_ADDR
34460: GO 34476
// i := i - 1 ;
34462: LD_ADDR_VAR 0 5
34466: PUSH
34467: LD_VAR 0 5
34471: PUSH
34472: LD_INT 1
34474: MINUS
34475: ST_TO_ADDR
// end ;
34476: GO 34282
34478: POP
34479: POP
// for i in tmp do
34480: LD_ADDR_VAR 0 5
34484: PUSH
34485: LD_VAR 0 7
34489: PUSH
34490: FOR_IN
34491: IFFALSE 34529
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
34493: LD_VAR 0 1
34497: PPUSH
34498: LD_VAR 0 5
34502: PUSH
34503: LD_INT 1
34505: ARRAY
34506: PPUSH
34507: LD_VAR 0 5
34511: PUSH
34512: LD_INT 2
34514: ARRAY
34515: PPUSH
34516: CALL 33475 0 3
34520: NOT
34521: IFFALSE 34527
// exit ;
34523: POP
34524: POP
34525: GO 34531
34527: GO 34490
34529: POP
34530: POP
// end ;
34531: LD_VAR 0 4
34535: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
34536: LD_INT 0
34538: PPUSH
34539: PPUSH
34540: PPUSH
34541: PPUSH
34542: PPUSH
34543: PPUSH
34544: PPUSH
// if not GetClass ( unit ) = class_sniper then
34545: LD_VAR 0 1
34549: PPUSH
34550: CALL_OW 257
34554: PUSH
34555: LD_INT 5
34557: EQUAL
34558: NOT
34559: IFFALSE 34563
// exit ;
34561: GO 34951
// dist := 8 ;
34563: LD_ADDR_VAR 0 5
34567: PUSH
34568: LD_INT 8
34570: ST_TO_ADDR
// viewRange := 12 ;
34571: LD_ADDR_VAR 0 7
34575: PUSH
34576: LD_INT 12
34578: ST_TO_ADDR
// side := GetSide ( unit ) ;
34579: LD_ADDR_VAR 0 6
34583: PUSH
34584: LD_VAR 0 1
34588: PPUSH
34589: CALL_OW 255
34593: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
34594: LD_INT 61
34596: PPUSH
34597: LD_VAR 0 6
34601: PPUSH
34602: CALL_OW 321
34606: PUSH
34607: LD_INT 2
34609: EQUAL
34610: IFFALSE 34620
// viewRange := 16 ;
34612: LD_ADDR_VAR 0 7
34616: PUSH
34617: LD_INT 16
34619: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
34620: LD_VAR 0 1
34624: PPUSH
34625: LD_VAR 0 2
34629: PPUSH
34630: LD_VAR 0 3
34634: PPUSH
34635: CALL_OW 297
34639: PUSH
34640: LD_VAR 0 5
34644: GREATER
34645: IFFALSE 34724
// begin ComMoveXY ( unit , x , y ) ;
34647: LD_VAR 0 1
34651: PPUSH
34652: LD_VAR 0 2
34656: PPUSH
34657: LD_VAR 0 3
34661: PPUSH
34662: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
34666: LD_INT 35
34668: PPUSH
34669: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
34673: LD_VAR 0 1
34677: PPUSH
34678: LD_VAR 0 2
34682: PPUSH
34683: LD_VAR 0 3
34687: PPUSH
34688: CALL 71250 0 3
34692: NOT
34693: IFFALSE 34697
// exit ;
34695: GO 34951
// until GetDistUnitXY ( unit , x , y ) < dist ;
34697: LD_VAR 0 1
34701: PPUSH
34702: LD_VAR 0 2
34706: PPUSH
34707: LD_VAR 0 3
34711: PPUSH
34712: CALL_OW 297
34716: PUSH
34717: LD_VAR 0 5
34721: LESS
34722: IFFALSE 34666
// end ; ComTurnXY ( unit , x , y ) ;
34724: LD_VAR 0 1
34728: PPUSH
34729: LD_VAR 0 2
34733: PPUSH
34734: LD_VAR 0 3
34738: PPUSH
34739: CALL_OW 118
// wait ( 5 ) ;
34743: LD_INT 5
34745: PPUSH
34746: CALL_OW 67
// _d := GetDir ( unit ) ;
34750: LD_ADDR_VAR 0 10
34754: PUSH
34755: LD_VAR 0 1
34759: PPUSH
34760: CALL_OW 254
34764: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
34765: LD_ADDR_VAR 0 8
34769: PUSH
34770: LD_VAR 0 1
34774: PPUSH
34775: CALL_OW 250
34779: PPUSH
34780: LD_VAR 0 10
34784: PPUSH
34785: LD_VAR 0 5
34789: PPUSH
34790: CALL_OW 272
34794: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
34795: LD_ADDR_VAR 0 9
34799: PUSH
34800: LD_VAR 0 1
34804: PPUSH
34805: CALL_OW 251
34809: PPUSH
34810: LD_VAR 0 10
34814: PPUSH
34815: LD_VAR 0 5
34819: PPUSH
34820: CALL_OW 273
34824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
34825: LD_VAR 0 8
34829: PPUSH
34830: LD_VAR 0 9
34834: PPUSH
34835: CALL_OW 488
34839: NOT
34840: IFFALSE 34844
// exit ;
34842: GO 34951
// ComAnimCustom ( unit , 1 ) ;
34844: LD_VAR 0 1
34848: PPUSH
34849: LD_INT 1
34851: PPUSH
34852: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
34856: LD_VAR 0 8
34860: PPUSH
34861: LD_VAR 0 9
34865: PPUSH
34866: LD_VAR 0 6
34870: PPUSH
34871: LD_VAR 0 7
34875: PPUSH
34876: CALL_OW 330
// repeat wait ( 1 ) ;
34880: LD_INT 1
34882: PPUSH
34883: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
34887: LD_VAR 0 1
34891: PPUSH
34892: CALL_OW 316
34896: PUSH
34897: LD_VAR 0 1
34901: PPUSH
34902: CALL_OW 314
34906: OR
34907: PUSH
34908: LD_VAR 0 1
34912: PPUSH
34913: CALL_OW 302
34917: NOT
34918: OR
34919: PUSH
34920: LD_VAR 0 1
34924: PPUSH
34925: CALL_OW 301
34929: OR
34930: IFFALSE 34880
// RemoveSeeing ( _x , _y , side ) ;
34932: LD_VAR 0 8
34936: PPUSH
34937: LD_VAR 0 9
34941: PPUSH
34942: LD_VAR 0 6
34946: PPUSH
34947: CALL_OW 331
// end ; end_of_file
34951: LD_VAR 0 4
34955: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
34956: LD_VAR 0 1
34960: PUSH
34961: LD_INT 200
34963: DOUBLE
34964: GREATEREQUAL
34965: IFFALSE 34973
34967: LD_INT 299
34969: DOUBLE
34970: LESSEQUAL
34971: IFTRUE 34975
34973: GO 35007
34975: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
34976: LD_VAR 0 1
34980: PPUSH
34981: LD_VAR 0 2
34985: PPUSH
34986: LD_VAR 0 3
34990: PPUSH
34991: LD_VAR 0 4
34995: PPUSH
34996: LD_VAR 0 5
35000: PPUSH
35001: CALL 31043 0 5
35005: GO 35084
35007: LD_INT 300
35009: DOUBLE
35010: GREATEREQUAL
35011: IFFALSE 35019
35013: LD_INT 399
35015: DOUBLE
35016: LESSEQUAL
35017: IFTRUE 35021
35019: GO 35083
35021: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
35022: LD_VAR 0 1
35026: PPUSH
35027: LD_VAR 0 2
35031: PPUSH
35032: LD_VAR 0 3
35036: PPUSH
35037: LD_VAR 0 4
35041: PPUSH
35042: LD_VAR 0 5
35046: PPUSH
35047: LD_VAR 0 6
35051: PPUSH
35052: LD_VAR 0 7
35056: PPUSH
35057: LD_VAR 0 8
35061: PPUSH
35062: LD_VAR 0 9
35066: PPUSH
35067: LD_VAR 0 10
35071: PPUSH
35072: LD_VAR 0 11
35076: PPUSH
35077: CALL 27368 0 11
35081: GO 35084
35083: POP
// end ;
35084: PPOPN 11
35086: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
35087: LD_VAR 0 1
35091: PPUSH
35092: LD_VAR 0 2
35096: PPUSH
35097: LD_VAR 0 3
35101: PPUSH
35102: LD_VAR 0 4
35106: PPUSH
35107: LD_VAR 0 5
35111: PPUSH
35112: CALL 30779 0 5
// end ; end_of_file end_of_file
35116: PPOPN 5
35118: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
35119: LD_INT 0
35121: PPUSH
35122: PPUSH
// if exist_mode then
35123: LD_VAR 0 2
35127: IFFALSE 35152
// unit := CreateCharacter ( prefix & ident ) else
35129: LD_ADDR_VAR 0 5
35133: PUSH
35134: LD_VAR 0 3
35138: PUSH
35139: LD_VAR 0 1
35143: STR
35144: PPUSH
35145: CALL_OW 34
35149: ST_TO_ADDR
35150: GO 35167
// unit := NewCharacter ( ident ) ;
35152: LD_ADDR_VAR 0 5
35156: PUSH
35157: LD_VAR 0 1
35161: PPUSH
35162: CALL_OW 25
35166: ST_TO_ADDR
// result := unit ;
35167: LD_ADDR_VAR 0 4
35171: PUSH
35172: LD_VAR 0 5
35176: ST_TO_ADDR
// end ;
35177: LD_VAR 0 4
35181: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
35182: LD_INT 0
35184: PPUSH
35185: PPUSH
// if not side or not nation then
35186: LD_VAR 0 1
35190: NOT
35191: PUSH
35192: LD_VAR 0 2
35196: NOT
35197: OR
35198: IFFALSE 35202
// exit ;
35200: GO 35970
// case nation of nation_american :
35202: LD_VAR 0 2
35206: PUSH
35207: LD_INT 1
35209: DOUBLE
35210: EQUAL
35211: IFTRUE 35215
35213: GO 35429
35215: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
35216: LD_ADDR_VAR 0 4
35220: PUSH
35221: LD_INT 35
35223: PUSH
35224: LD_INT 45
35226: PUSH
35227: LD_INT 46
35229: PUSH
35230: LD_INT 47
35232: PUSH
35233: LD_INT 82
35235: PUSH
35236: LD_INT 83
35238: PUSH
35239: LD_INT 84
35241: PUSH
35242: LD_INT 85
35244: PUSH
35245: LD_INT 86
35247: PUSH
35248: LD_INT 1
35250: PUSH
35251: LD_INT 2
35253: PUSH
35254: LD_INT 6
35256: PUSH
35257: LD_INT 15
35259: PUSH
35260: LD_INT 16
35262: PUSH
35263: LD_INT 7
35265: PUSH
35266: LD_INT 12
35268: PUSH
35269: LD_INT 13
35271: PUSH
35272: LD_INT 10
35274: PUSH
35275: LD_INT 14
35277: PUSH
35278: LD_INT 20
35280: PUSH
35281: LD_INT 21
35283: PUSH
35284: LD_INT 22
35286: PUSH
35287: LD_INT 25
35289: PUSH
35290: LD_INT 32
35292: PUSH
35293: LD_INT 27
35295: PUSH
35296: LD_INT 36
35298: PUSH
35299: LD_INT 69
35301: PUSH
35302: LD_INT 39
35304: PUSH
35305: LD_INT 34
35307: PUSH
35308: LD_INT 40
35310: PUSH
35311: LD_INT 48
35313: PUSH
35314: LD_INT 49
35316: PUSH
35317: LD_INT 50
35319: PUSH
35320: LD_INT 51
35322: PUSH
35323: LD_INT 52
35325: PUSH
35326: LD_INT 53
35328: PUSH
35329: LD_INT 54
35331: PUSH
35332: LD_INT 55
35334: PUSH
35335: LD_INT 56
35337: PUSH
35338: LD_INT 57
35340: PUSH
35341: LD_INT 58
35343: PUSH
35344: LD_INT 59
35346: PUSH
35347: LD_INT 60
35349: PUSH
35350: LD_INT 61
35352: PUSH
35353: LD_INT 62
35355: PUSH
35356: LD_INT 80
35358: PUSH
35359: LD_INT 82
35361: PUSH
35362: LD_INT 83
35364: PUSH
35365: LD_INT 84
35367: PUSH
35368: LD_INT 85
35370: PUSH
35371: LD_INT 86
35373: PUSH
35374: EMPTY
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: LIST
35420: LIST
35421: LIST
35422: LIST
35423: LIST
35424: LIST
35425: LIST
35426: ST_TO_ADDR
35427: GO 35894
35429: LD_INT 2
35431: DOUBLE
35432: EQUAL
35433: IFTRUE 35437
35435: GO 35663
35437: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
35438: LD_ADDR_VAR 0 4
35442: PUSH
35443: LD_INT 35
35445: PUSH
35446: LD_INT 45
35448: PUSH
35449: LD_INT 46
35451: PUSH
35452: LD_INT 47
35454: PUSH
35455: LD_INT 82
35457: PUSH
35458: LD_INT 83
35460: PUSH
35461: LD_INT 84
35463: PUSH
35464: LD_INT 85
35466: PUSH
35467: LD_INT 87
35469: PUSH
35470: LD_INT 70
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: LD_INT 11
35478: PUSH
35479: LD_INT 3
35481: PUSH
35482: LD_INT 4
35484: PUSH
35485: LD_INT 5
35487: PUSH
35488: LD_INT 6
35490: PUSH
35491: LD_INT 15
35493: PUSH
35494: LD_INT 18
35496: PUSH
35497: LD_INT 7
35499: PUSH
35500: LD_INT 17
35502: PUSH
35503: LD_INT 8
35505: PUSH
35506: LD_INT 20
35508: PUSH
35509: LD_INT 21
35511: PUSH
35512: LD_INT 22
35514: PUSH
35515: LD_INT 72
35517: PUSH
35518: LD_INT 26
35520: PUSH
35521: LD_INT 69
35523: PUSH
35524: LD_INT 39
35526: PUSH
35527: LD_INT 40
35529: PUSH
35530: LD_INT 41
35532: PUSH
35533: LD_INT 42
35535: PUSH
35536: LD_INT 43
35538: PUSH
35539: LD_INT 48
35541: PUSH
35542: LD_INT 49
35544: PUSH
35545: LD_INT 50
35547: PUSH
35548: LD_INT 51
35550: PUSH
35551: LD_INT 52
35553: PUSH
35554: LD_INT 53
35556: PUSH
35557: LD_INT 54
35559: PUSH
35560: LD_INT 55
35562: PUSH
35563: LD_INT 56
35565: PUSH
35566: LD_INT 60
35568: PUSH
35569: LD_INT 61
35571: PUSH
35572: LD_INT 62
35574: PUSH
35575: LD_INT 66
35577: PUSH
35578: LD_INT 67
35580: PUSH
35581: LD_INT 68
35583: PUSH
35584: LD_INT 81
35586: PUSH
35587: LD_INT 82
35589: PUSH
35590: LD_INT 83
35592: PUSH
35593: LD_INT 84
35595: PUSH
35596: LD_INT 85
35598: PUSH
35599: LD_INT 87
35601: PUSH
35602: LD_INT 88
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: LIST
35609: LIST
35610: LIST
35611: LIST
35612: LIST
35613: LIST
35614: LIST
35615: LIST
35616: LIST
35617: LIST
35618: LIST
35619: LIST
35620: LIST
35621: LIST
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: LIST
35634: LIST
35635: LIST
35636: LIST
35637: LIST
35638: LIST
35639: LIST
35640: LIST
35641: LIST
35642: LIST
35643: LIST
35644: LIST
35645: LIST
35646: LIST
35647: LIST
35648: LIST
35649: LIST
35650: LIST
35651: LIST
35652: LIST
35653: LIST
35654: LIST
35655: LIST
35656: LIST
35657: LIST
35658: LIST
35659: LIST
35660: ST_TO_ADDR
35661: GO 35894
35663: LD_INT 3
35665: DOUBLE
35666: EQUAL
35667: IFTRUE 35671
35669: GO 35893
35671: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
35672: LD_ADDR_VAR 0 4
35676: PUSH
35677: LD_INT 46
35679: PUSH
35680: LD_INT 47
35682: PUSH
35683: LD_INT 1
35685: PUSH
35686: LD_INT 2
35688: PUSH
35689: LD_INT 82
35691: PUSH
35692: LD_INT 83
35694: PUSH
35695: LD_INT 84
35697: PUSH
35698: LD_INT 85
35700: PUSH
35701: LD_INT 86
35703: PUSH
35704: LD_INT 11
35706: PUSH
35707: LD_INT 9
35709: PUSH
35710: LD_INT 20
35712: PUSH
35713: LD_INT 19
35715: PUSH
35716: LD_INT 21
35718: PUSH
35719: LD_INT 24
35721: PUSH
35722: LD_INT 22
35724: PUSH
35725: LD_INT 25
35727: PUSH
35728: LD_INT 28
35730: PUSH
35731: LD_INT 29
35733: PUSH
35734: LD_INT 30
35736: PUSH
35737: LD_INT 31
35739: PUSH
35740: LD_INT 37
35742: PUSH
35743: LD_INT 38
35745: PUSH
35746: LD_INT 32
35748: PUSH
35749: LD_INT 27
35751: PUSH
35752: LD_INT 33
35754: PUSH
35755: LD_INT 69
35757: PUSH
35758: LD_INT 39
35760: PUSH
35761: LD_INT 34
35763: PUSH
35764: LD_INT 40
35766: PUSH
35767: LD_INT 71
35769: PUSH
35770: LD_INT 23
35772: PUSH
35773: LD_INT 44
35775: PUSH
35776: LD_INT 48
35778: PUSH
35779: LD_INT 49
35781: PUSH
35782: LD_INT 50
35784: PUSH
35785: LD_INT 51
35787: PUSH
35788: LD_INT 52
35790: PUSH
35791: LD_INT 53
35793: PUSH
35794: LD_INT 54
35796: PUSH
35797: LD_INT 55
35799: PUSH
35800: LD_INT 56
35802: PUSH
35803: LD_INT 57
35805: PUSH
35806: LD_INT 58
35808: PUSH
35809: LD_INT 59
35811: PUSH
35812: LD_INT 63
35814: PUSH
35815: LD_INT 64
35817: PUSH
35818: LD_INT 65
35820: PUSH
35821: LD_INT 82
35823: PUSH
35824: LD_INT 83
35826: PUSH
35827: LD_INT 84
35829: PUSH
35830: LD_INT 85
35832: PUSH
35833: LD_INT 86
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: ST_TO_ADDR
35891: GO 35894
35893: POP
// if state > - 1 and state < 3 then
35894: LD_VAR 0 3
35898: PUSH
35899: LD_INT 1
35901: NEG
35902: GREATER
35903: PUSH
35904: LD_VAR 0 3
35908: PUSH
35909: LD_INT 3
35911: LESS
35912: AND
35913: IFFALSE 35970
// for i in result do
35915: LD_ADDR_VAR 0 5
35919: PUSH
35920: LD_VAR 0 4
35924: PUSH
35925: FOR_IN
35926: IFFALSE 35968
// if GetTech ( i , side ) <> state then
35928: LD_VAR 0 5
35932: PPUSH
35933: LD_VAR 0 1
35937: PPUSH
35938: CALL_OW 321
35942: PUSH
35943: LD_VAR 0 3
35947: NONEQUAL
35948: IFFALSE 35966
// result := result diff i ;
35950: LD_ADDR_VAR 0 4
35954: PUSH
35955: LD_VAR 0 4
35959: PUSH
35960: LD_VAR 0 5
35964: DIFF
35965: ST_TO_ADDR
35966: GO 35925
35968: POP
35969: POP
// end ;
35970: LD_VAR 0 4
35974: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
35975: LD_INT 0
35977: PPUSH
35978: PPUSH
35979: PPUSH
// result := true ;
35980: LD_ADDR_VAR 0 3
35984: PUSH
35985: LD_INT 1
35987: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
35988: LD_ADDR_VAR 0 5
35992: PUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: CALL_OW 480
36002: ST_TO_ADDR
// if not tmp then
36003: LD_VAR 0 5
36007: NOT
36008: IFFALSE 36012
// exit ;
36010: GO 36061
// for i in tmp do
36012: LD_ADDR_VAR 0 4
36016: PUSH
36017: LD_VAR 0 5
36021: PUSH
36022: FOR_IN
36023: IFFALSE 36059
// if GetTech ( i , side ) <> state_researched then
36025: LD_VAR 0 4
36029: PPUSH
36030: LD_VAR 0 1
36034: PPUSH
36035: CALL_OW 321
36039: PUSH
36040: LD_INT 2
36042: NONEQUAL
36043: IFFALSE 36057
// begin result := false ;
36045: LD_ADDR_VAR 0 3
36049: PUSH
36050: LD_INT 0
36052: ST_TO_ADDR
// exit ;
36053: POP
36054: POP
36055: GO 36061
// end ;
36057: GO 36022
36059: POP
36060: POP
// end ;
36061: LD_VAR 0 3
36065: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
36066: LD_INT 0
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
36072: PPUSH
36073: PPUSH
36074: PPUSH
36075: PPUSH
36076: PPUSH
36077: PPUSH
36078: PPUSH
36079: PPUSH
36080: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
36081: LD_VAR 0 1
36085: NOT
36086: PUSH
36087: LD_VAR 0 1
36091: PPUSH
36092: CALL_OW 257
36096: PUSH
36097: LD_INT 9
36099: NONEQUAL
36100: OR
36101: IFFALSE 36105
// exit ;
36103: GO 36678
// side := GetSide ( unit ) ;
36105: LD_ADDR_VAR 0 9
36109: PUSH
36110: LD_VAR 0 1
36114: PPUSH
36115: CALL_OW 255
36119: ST_TO_ADDR
// tech_space := tech_spacanom ;
36120: LD_ADDR_VAR 0 12
36124: PUSH
36125: LD_INT 29
36127: ST_TO_ADDR
// tech_time := tech_taurad ;
36128: LD_ADDR_VAR 0 13
36132: PUSH
36133: LD_INT 28
36135: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
36136: LD_ADDR_VAR 0 11
36140: PUSH
36141: LD_VAR 0 1
36145: PPUSH
36146: CALL_OW 310
36150: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
36151: LD_VAR 0 11
36155: PPUSH
36156: CALL_OW 247
36160: PUSH
36161: LD_INT 2
36163: EQUAL
36164: IFFALSE 36168
// exit ;
36166: GO 36678
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
36168: LD_ADDR_VAR 0 8
36172: PUSH
36173: LD_INT 81
36175: PUSH
36176: LD_VAR 0 9
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 3
36187: PUSH
36188: LD_INT 21
36190: PUSH
36191: LD_INT 3
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: EMPTY
36199: LIST
36200: LIST
36201: PUSH
36202: EMPTY
36203: LIST
36204: LIST
36205: PPUSH
36206: CALL_OW 69
36210: ST_TO_ADDR
// if not tmp then
36211: LD_VAR 0 8
36215: NOT
36216: IFFALSE 36220
// exit ;
36218: GO 36678
// if in_unit then
36220: LD_VAR 0 11
36224: IFFALSE 36248
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
36226: LD_ADDR_VAR 0 10
36230: PUSH
36231: LD_VAR 0 8
36235: PPUSH
36236: LD_VAR 0 11
36240: PPUSH
36241: CALL_OW 74
36245: ST_TO_ADDR
36246: GO 36268
// enemy := NearestUnitToUnit ( tmp , unit ) ;
36248: LD_ADDR_VAR 0 10
36252: PUSH
36253: LD_VAR 0 8
36257: PPUSH
36258: LD_VAR 0 1
36262: PPUSH
36263: CALL_OW 74
36267: ST_TO_ADDR
// if not enemy then
36268: LD_VAR 0 10
36272: NOT
36273: IFFALSE 36277
// exit ;
36275: GO 36678
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
36277: LD_VAR 0 11
36281: PUSH
36282: LD_VAR 0 11
36286: PPUSH
36287: LD_VAR 0 10
36291: PPUSH
36292: CALL_OW 296
36296: PUSH
36297: LD_INT 13
36299: GREATER
36300: AND
36301: PUSH
36302: LD_VAR 0 1
36306: PPUSH
36307: LD_VAR 0 10
36311: PPUSH
36312: CALL_OW 296
36316: PUSH
36317: LD_INT 12
36319: GREATER
36320: OR
36321: IFFALSE 36325
// exit ;
36323: GO 36678
// missile := [ 1 ] ;
36325: LD_ADDR_VAR 0 14
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: EMPTY
36334: LIST
36335: ST_TO_ADDR
// if Researched ( side , tech_space ) then
36336: LD_VAR 0 9
36340: PPUSH
36341: LD_VAR 0 12
36345: PPUSH
36346: CALL_OW 325
36350: IFFALSE 36379
// missile := Replace ( missile , missile + 1 , 2 ) ;
36352: LD_ADDR_VAR 0 14
36356: PUSH
36357: LD_VAR 0 14
36361: PPUSH
36362: LD_VAR 0 14
36366: PUSH
36367: LD_INT 1
36369: PLUS
36370: PPUSH
36371: LD_INT 2
36373: PPUSH
36374: CALL_OW 1
36378: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
36379: LD_VAR 0 9
36383: PPUSH
36384: LD_VAR 0 13
36388: PPUSH
36389: CALL_OW 325
36393: PUSH
36394: LD_VAR 0 10
36398: PPUSH
36399: CALL_OW 255
36403: PPUSH
36404: LD_VAR 0 13
36408: PPUSH
36409: CALL_OW 325
36413: NOT
36414: AND
36415: IFFALSE 36444
// missile := Replace ( missile , missile + 1 , 3 ) ;
36417: LD_ADDR_VAR 0 14
36421: PUSH
36422: LD_VAR 0 14
36426: PPUSH
36427: LD_VAR 0 14
36431: PUSH
36432: LD_INT 1
36434: PLUS
36435: PPUSH
36436: LD_INT 3
36438: PPUSH
36439: CALL_OW 1
36443: ST_TO_ADDR
// if missile < 2 then
36444: LD_VAR 0 14
36448: PUSH
36449: LD_INT 2
36451: LESS
36452: IFFALSE 36456
// exit ;
36454: GO 36678
// x := GetX ( enemy ) ;
36456: LD_ADDR_VAR 0 4
36460: PUSH
36461: LD_VAR 0 10
36465: PPUSH
36466: CALL_OW 250
36470: ST_TO_ADDR
// y := GetY ( enemy ) ;
36471: LD_ADDR_VAR 0 5
36475: PUSH
36476: LD_VAR 0 10
36480: PPUSH
36481: CALL_OW 251
36485: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
36486: LD_ADDR_VAR 0 6
36490: PUSH
36491: LD_VAR 0 4
36495: PUSH
36496: LD_INT 1
36498: NEG
36499: PPUSH
36500: LD_INT 1
36502: PPUSH
36503: CALL_OW 12
36507: PLUS
36508: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
36509: LD_ADDR_VAR 0 7
36513: PUSH
36514: LD_VAR 0 5
36518: PUSH
36519: LD_INT 1
36521: NEG
36522: PPUSH
36523: LD_INT 1
36525: PPUSH
36526: CALL_OW 12
36530: PLUS
36531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36532: LD_VAR 0 6
36536: PPUSH
36537: LD_VAR 0 7
36541: PPUSH
36542: CALL_OW 488
36546: NOT
36547: IFFALSE 36569
// begin _x := x ;
36549: LD_ADDR_VAR 0 6
36553: PUSH
36554: LD_VAR 0 4
36558: ST_TO_ADDR
// _y := y ;
36559: LD_ADDR_VAR 0 7
36563: PUSH
36564: LD_VAR 0 5
36568: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
36569: LD_ADDR_VAR 0 3
36573: PUSH
36574: LD_INT 1
36576: PPUSH
36577: LD_VAR 0 14
36581: PPUSH
36582: CALL_OW 12
36586: ST_TO_ADDR
// case i of 1 :
36587: LD_VAR 0 3
36591: PUSH
36592: LD_INT 1
36594: DOUBLE
36595: EQUAL
36596: IFTRUE 36600
36598: GO 36617
36600: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
36601: LD_VAR 0 1
36605: PPUSH
36606: LD_VAR 0 10
36610: PPUSH
36611: CALL_OW 115
36615: GO 36678
36617: LD_INT 2
36619: DOUBLE
36620: EQUAL
36621: IFTRUE 36625
36623: GO 36647
36625: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
36626: LD_VAR 0 1
36630: PPUSH
36631: LD_VAR 0 6
36635: PPUSH
36636: LD_VAR 0 7
36640: PPUSH
36641: CALL_OW 153
36645: GO 36678
36647: LD_INT 3
36649: DOUBLE
36650: EQUAL
36651: IFTRUE 36655
36653: GO 36677
36655: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
36656: LD_VAR 0 1
36660: PPUSH
36661: LD_VAR 0 6
36665: PPUSH
36666: LD_VAR 0 7
36670: PPUSH
36671: CALL_OW 154
36675: GO 36678
36677: POP
// end ;
36678: LD_VAR 0 2
36682: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
36683: LD_INT 0
36685: PPUSH
36686: PPUSH
36687: PPUSH
36688: PPUSH
36689: PPUSH
36690: PPUSH
// if not unit or not building then
36691: LD_VAR 0 1
36695: NOT
36696: PUSH
36697: LD_VAR 0 2
36701: NOT
36702: OR
36703: IFFALSE 36707
// exit ;
36705: GO 36865
// x := GetX ( building ) ;
36707: LD_ADDR_VAR 0 5
36711: PUSH
36712: LD_VAR 0 2
36716: PPUSH
36717: CALL_OW 250
36721: ST_TO_ADDR
// y := GetY ( building ) ;
36722: LD_ADDR_VAR 0 6
36726: PUSH
36727: LD_VAR 0 2
36731: PPUSH
36732: CALL_OW 251
36736: ST_TO_ADDR
// for i = 0 to 5 do
36737: LD_ADDR_VAR 0 4
36741: PUSH
36742: DOUBLE
36743: LD_INT 0
36745: DEC
36746: ST_TO_ADDR
36747: LD_INT 5
36749: PUSH
36750: FOR_TO
36751: IFFALSE 36863
// begin _x := ShiftX ( x , i , 3 ) ;
36753: LD_ADDR_VAR 0 7
36757: PUSH
36758: LD_VAR 0 5
36762: PPUSH
36763: LD_VAR 0 4
36767: PPUSH
36768: LD_INT 3
36770: PPUSH
36771: CALL_OW 272
36775: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
36776: LD_ADDR_VAR 0 8
36780: PUSH
36781: LD_VAR 0 6
36785: PPUSH
36786: LD_VAR 0 4
36790: PPUSH
36791: LD_INT 3
36793: PPUSH
36794: CALL_OW 273
36798: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
36799: LD_VAR 0 7
36803: PPUSH
36804: LD_VAR 0 8
36808: PPUSH
36809: CALL_OW 488
36813: NOT
36814: IFFALSE 36818
// continue ;
36816: GO 36750
// if HexInfo ( _x , _y ) = 0 then
36818: LD_VAR 0 7
36822: PPUSH
36823: LD_VAR 0 8
36827: PPUSH
36828: CALL_OW 428
36832: PUSH
36833: LD_INT 0
36835: EQUAL
36836: IFFALSE 36861
// begin ComMoveXY ( unit , _x , _y ) ;
36838: LD_VAR 0 1
36842: PPUSH
36843: LD_VAR 0 7
36847: PPUSH
36848: LD_VAR 0 8
36852: PPUSH
36853: CALL_OW 111
// exit ;
36857: POP
36858: POP
36859: GO 36865
// end ; end ;
36861: GO 36750
36863: POP
36864: POP
// end ;
36865: LD_VAR 0 3
36869: RET
// export function ScanBase ( side , base_area ) ; begin
36870: LD_INT 0
36872: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
36873: LD_ADDR_VAR 0 3
36877: PUSH
36878: LD_VAR 0 2
36882: PPUSH
36883: LD_INT 81
36885: PUSH
36886: LD_VAR 0 1
36890: PUSH
36891: EMPTY
36892: LIST
36893: LIST
36894: PPUSH
36895: CALL_OW 70
36899: ST_TO_ADDR
// end ;
36900: LD_VAR 0 3
36904: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
36905: LD_INT 0
36907: PPUSH
36908: PPUSH
36909: PPUSH
36910: PPUSH
// result := false ;
36911: LD_ADDR_VAR 0 2
36915: PUSH
36916: LD_INT 0
36918: ST_TO_ADDR
// side := GetSide ( unit ) ;
36919: LD_ADDR_VAR 0 3
36923: PUSH
36924: LD_VAR 0 1
36928: PPUSH
36929: CALL_OW 255
36933: ST_TO_ADDR
// nat := GetNation ( unit ) ;
36934: LD_ADDR_VAR 0 4
36938: PUSH
36939: LD_VAR 0 1
36943: PPUSH
36944: CALL_OW 248
36948: ST_TO_ADDR
// case nat of 1 :
36949: LD_VAR 0 4
36953: PUSH
36954: LD_INT 1
36956: DOUBLE
36957: EQUAL
36958: IFTRUE 36962
36960: GO 36973
36962: POP
// tech := tech_lassight ; 2 :
36963: LD_ADDR_VAR 0 5
36967: PUSH
36968: LD_INT 12
36970: ST_TO_ADDR
36971: GO 37012
36973: LD_INT 2
36975: DOUBLE
36976: EQUAL
36977: IFTRUE 36981
36979: GO 36992
36981: POP
// tech := tech_mortar ; 3 :
36982: LD_ADDR_VAR 0 5
36986: PUSH
36987: LD_INT 41
36989: ST_TO_ADDR
36990: GO 37012
36992: LD_INT 3
36994: DOUBLE
36995: EQUAL
36996: IFTRUE 37000
36998: GO 37011
37000: POP
// tech := tech_bazooka ; end ;
37001: LD_ADDR_VAR 0 5
37005: PUSH
37006: LD_INT 44
37008: ST_TO_ADDR
37009: GO 37012
37011: POP
// if Researched ( side , tech ) then
37012: LD_VAR 0 3
37016: PPUSH
37017: LD_VAR 0 5
37021: PPUSH
37022: CALL_OW 325
37026: IFFALSE 37053
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
37028: LD_ADDR_VAR 0 2
37032: PUSH
37033: LD_INT 5
37035: PUSH
37036: LD_INT 8
37038: PUSH
37039: LD_INT 9
37041: PUSH
37042: EMPTY
37043: LIST
37044: LIST
37045: LIST
37046: PUSH
37047: LD_VAR 0 4
37051: ARRAY
37052: ST_TO_ADDR
// end ;
37053: LD_VAR 0 2
37057: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
37058: LD_INT 0
37060: PPUSH
37061: PPUSH
37062: PPUSH
// if not mines then
37063: LD_VAR 0 2
37067: NOT
37068: IFFALSE 37072
// exit ;
37070: GO 37216
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
37072: LD_ADDR_VAR 0 5
37076: PUSH
37077: LD_INT 81
37079: PUSH
37080: LD_VAR 0 1
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 3
37091: PUSH
37092: LD_INT 21
37094: PUSH
37095: LD_INT 3
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: EMPTY
37103: LIST
37104: LIST
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PPUSH
37110: CALL_OW 69
37114: ST_TO_ADDR
// for i in mines do
37115: LD_ADDR_VAR 0 4
37119: PUSH
37120: LD_VAR 0 2
37124: PUSH
37125: FOR_IN
37126: IFFALSE 37214
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
37128: LD_VAR 0 4
37132: PUSH
37133: LD_INT 1
37135: ARRAY
37136: PPUSH
37137: LD_VAR 0 4
37141: PUSH
37142: LD_INT 2
37144: ARRAY
37145: PPUSH
37146: CALL_OW 458
37150: NOT
37151: IFFALSE 37155
// continue ;
37153: GO 37125
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
37155: LD_VAR 0 4
37159: PUSH
37160: LD_INT 1
37162: ARRAY
37163: PPUSH
37164: LD_VAR 0 4
37168: PUSH
37169: LD_INT 2
37171: ARRAY
37172: PPUSH
37173: CALL_OW 428
37177: PUSH
37178: LD_VAR 0 5
37182: IN
37183: IFFALSE 37212
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
37185: LD_VAR 0 4
37189: PUSH
37190: LD_INT 1
37192: ARRAY
37193: PPUSH
37194: LD_VAR 0 4
37198: PUSH
37199: LD_INT 2
37201: ARRAY
37202: PPUSH
37203: LD_VAR 0 1
37207: PPUSH
37208: CALL_OW 456
// end ;
37212: GO 37125
37214: POP
37215: POP
// end ;
37216: LD_VAR 0 3
37220: RET
// export function Count ( array ) ; begin
37221: LD_INT 0
37223: PPUSH
// result := array + 0 ;
37224: LD_ADDR_VAR 0 2
37228: PUSH
37229: LD_VAR 0 1
37233: PUSH
37234: LD_INT 0
37236: PLUS
37237: ST_TO_ADDR
// end ;
37238: LD_VAR 0 2
37242: RET
// export function IsEmpty ( building ) ; begin
37243: LD_INT 0
37245: PPUSH
// if not building then
37246: LD_VAR 0 1
37250: NOT
37251: IFFALSE 37255
// exit ;
37253: GO 37298
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
37255: LD_ADDR_VAR 0 2
37259: PUSH
37260: LD_VAR 0 1
37264: PUSH
37265: LD_INT 22
37267: PUSH
37268: LD_VAR 0 1
37272: PPUSH
37273: CALL_OW 255
37277: PUSH
37278: EMPTY
37279: LIST
37280: LIST
37281: PUSH
37282: LD_INT 58
37284: PUSH
37285: EMPTY
37286: LIST
37287: PUSH
37288: EMPTY
37289: LIST
37290: LIST
37291: PPUSH
37292: CALL_OW 69
37296: IN
37297: ST_TO_ADDR
// end ;
37298: LD_VAR 0 2
37302: RET
// export function IsNotFull ( building ) ; var places ; begin
37303: LD_INT 0
37305: PPUSH
37306: PPUSH
// if not building then
37307: LD_VAR 0 1
37311: NOT
37312: IFFALSE 37316
// exit ;
37314: GO 37344
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
37316: LD_ADDR_VAR 0 2
37320: PUSH
37321: LD_VAR 0 1
37325: PPUSH
37326: LD_INT 3
37328: PUSH
37329: LD_INT 62
37331: PUSH
37332: EMPTY
37333: LIST
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PPUSH
37339: CALL_OW 72
37343: ST_TO_ADDR
// end ;
37344: LD_VAR 0 2
37348: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
37349: LD_INT 0
37351: PPUSH
37352: PPUSH
37353: PPUSH
37354: PPUSH
// tmp := [ ] ;
37355: LD_ADDR_VAR 0 3
37359: PUSH
37360: EMPTY
37361: ST_TO_ADDR
// list := [ ] ;
37362: LD_ADDR_VAR 0 5
37366: PUSH
37367: EMPTY
37368: ST_TO_ADDR
// for i = 16 to 25 do
37369: LD_ADDR_VAR 0 4
37373: PUSH
37374: DOUBLE
37375: LD_INT 16
37377: DEC
37378: ST_TO_ADDR
37379: LD_INT 25
37381: PUSH
37382: FOR_TO
37383: IFFALSE 37456
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
37385: LD_ADDR_VAR 0 3
37389: PUSH
37390: LD_VAR 0 3
37394: PUSH
37395: LD_INT 22
37397: PUSH
37398: LD_VAR 0 1
37402: PPUSH
37403: CALL_OW 255
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: PUSH
37412: LD_INT 91
37414: PUSH
37415: LD_VAR 0 1
37419: PUSH
37420: LD_INT 6
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 30
37430: PUSH
37431: LD_VAR 0 4
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: PUSH
37445: EMPTY
37446: LIST
37447: PPUSH
37448: CALL_OW 69
37452: ADD
37453: ST_TO_ADDR
37454: GO 37382
37456: POP
37457: POP
// for i = 1 to tmp do
37458: LD_ADDR_VAR 0 4
37462: PUSH
37463: DOUBLE
37464: LD_INT 1
37466: DEC
37467: ST_TO_ADDR
37468: LD_VAR 0 3
37472: PUSH
37473: FOR_TO
37474: IFFALSE 37562
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
37476: LD_ADDR_VAR 0 5
37480: PUSH
37481: LD_VAR 0 5
37485: PUSH
37486: LD_VAR 0 3
37490: PUSH
37491: LD_VAR 0 4
37495: ARRAY
37496: PPUSH
37497: CALL_OW 266
37501: PUSH
37502: LD_VAR 0 3
37506: PUSH
37507: LD_VAR 0 4
37511: ARRAY
37512: PPUSH
37513: CALL_OW 250
37517: PUSH
37518: LD_VAR 0 3
37522: PUSH
37523: LD_VAR 0 4
37527: ARRAY
37528: PPUSH
37529: CALL_OW 251
37533: PUSH
37534: LD_VAR 0 3
37538: PUSH
37539: LD_VAR 0 4
37543: ARRAY
37544: PPUSH
37545: CALL_OW 254
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: PUSH
37556: EMPTY
37557: LIST
37558: ADD
37559: ST_TO_ADDR
37560: GO 37473
37562: POP
37563: POP
// result := list ;
37564: LD_ADDR_VAR 0 2
37568: PUSH
37569: LD_VAR 0 5
37573: ST_TO_ADDR
// end ;
37574: LD_VAR 0 2
37578: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
37579: LD_INT 0
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
// if not factory then
37588: LD_VAR 0 1
37592: NOT
37593: IFFALSE 37597
// exit ;
37595: GO 38190
// if control = control_apeman then
37597: LD_VAR 0 4
37601: PUSH
37602: LD_INT 5
37604: EQUAL
37605: IFFALSE 37714
// begin tmp := UnitsInside ( factory ) ;
37607: LD_ADDR_VAR 0 8
37611: PUSH
37612: LD_VAR 0 1
37616: PPUSH
37617: CALL_OW 313
37621: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
37622: LD_VAR 0 8
37626: PPUSH
37627: LD_INT 25
37629: PUSH
37630: LD_INT 12
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PPUSH
37637: CALL_OW 72
37641: NOT
37642: IFFALSE 37652
// control := control_manual ;
37644: LD_ADDR_VAR 0 4
37648: PUSH
37649: LD_INT 1
37651: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
37652: LD_ADDR_VAR 0 8
37656: PUSH
37657: LD_VAR 0 1
37661: PPUSH
37662: CALL 37349 0 1
37666: ST_TO_ADDR
// if tmp then
37667: LD_VAR 0 8
37671: IFFALSE 37714
// begin for i in tmp do
37673: LD_ADDR_VAR 0 7
37677: PUSH
37678: LD_VAR 0 8
37682: PUSH
37683: FOR_IN
37684: IFFALSE 37712
// if i [ 1 ] = b_ext_radio then
37686: LD_VAR 0 7
37690: PUSH
37691: LD_INT 1
37693: ARRAY
37694: PUSH
37695: LD_INT 22
37697: EQUAL
37698: IFFALSE 37710
// begin control := control_remote ;
37700: LD_ADDR_VAR 0 4
37704: PUSH
37705: LD_INT 2
37707: ST_TO_ADDR
// break ;
37708: GO 37712
// end ;
37710: GO 37683
37712: POP
37713: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
37714: LD_VAR 0 1
37718: PPUSH
37719: LD_VAR 0 2
37723: PPUSH
37724: LD_VAR 0 3
37728: PPUSH
37729: LD_VAR 0 4
37733: PPUSH
37734: LD_VAR 0 5
37738: PPUSH
37739: CALL_OW 448
37743: IFFALSE 37778
// begin result := [ chassis , engine , control , weapon ] ;
37745: LD_ADDR_VAR 0 6
37749: PUSH
37750: LD_VAR 0 2
37754: PUSH
37755: LD_VAR 0 3
37759: PUSH
37760: LD_VAR 0 4
37764: PUSH
37765: LD_VAR 0 5
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: ST_TO_ADDR
// exit ;
37776: GO 38190
// end ; _chassis := AvailableChassisList ( factory ) ;
37778: LD_ADDR_VAR 0 9
37782: PUSH
37783: LD_VAR 0 1
37787: PPUSH
37788: CALL_OW 475
37792: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
37793: LD_ADDR_VAR 0 11
37797: PUSH
37798: LD_VAR 0 1
37802: PPUSH
37803: CALL_OW 476
37807: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
37808: LD_ADDR_VAR 0 12
37812: PUSH
37813: LD_VAR 0 1
37817: PPUSH
37818: CALL_OW 477
37822: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
37823: LD_ADDR_VAR 0 10
37827: PUSH
37828: LD_VAR 0 1
37832: PPUSH
37833: CALL_OW 478
37837: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
37838: LD_VAR 0 9
37842: NOT
37843: PUSH
37844: LD_VAR 0 11
37848: NOT
37849: OR
37850: PUSH
37851: LD_VAR 0 12
37855: NOT
37856: OR
37857: PUSH
37858: LD_VAR 0 10
37862: NOT
37863: OR
37864: IFFALSE 37899
// begin result := [ chassis , engine , control , weapon ] ;
37866: LD_ADDR_VAR 0 6
37870: PUSH
37871: LD_VAR 0 2
37875: PUSH
37876: LD_VAR 0 3
37880: PUSH
37881: LD_VAR 0 4
37885: PUSH
37886: LD_VAR 0 5
37890: PUSH
37891: EMPTY
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: ST_TO_ADDR
// exit ;
37897: GO 38190
// end ; if not chassis in _chassis then
37899: LD_VAR 0 2
37903: PUSH
37904: LD_VAR 0 9
37908: IN
37909: NOT
37910: IFFALSE 37936
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
37912: LD_ADDR_VAR 0 2
37916: PUSH
37917: LD_VAR 0 9
37921: PUSH
37922: LD_INT 1
37924: PPUSH
37925: LD_VAR 0 9
37929: PPUSH
37930: CALL_OW 12
37934: ARRAY
37935: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
37936: LD_VAR 0 2
37940: PPUSH
37941: LD_VAR 0 3
37945: PPUSH
37946: CALL 38195 0 2
37950: NOT
37951: IFFALSE 38010
// repeat engine := _engine [ 1 ] ;
37953: LD_ADDR_VAR 0 3
37957: PUSH
37958: LD_VAR 0 11
37962: PUSH
37963: LD_INT 1
37965: ARRAY
37966: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
37967: LD_ADDR_VAR 0 11
37971: PUSH
37972: LD_VAR 0 11
37976: PPUSH
37977: LD_INT 1
37979: PPUSH
37980: CALL_OW 3
37984: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
37985: LD_VAR 0 2
37989: PPUSH
37990: LD_VAR 0 3
37994: PPUSH
37995: CALL 38195 0 2
37999: PUSH
38000: LD_VAR 0 11
38004: PUSH
38005: EMPTY
38006: EQUAL
38007: OR
38008: IFFALSE 37953
// if not control in _control then
38010: LD_VAR 0 4
38014: PUSH
38015: LD_VAR 0 12
38019: IN
38020: NOT
38021: IFFALSE 38047
// control := _control [ rand ( 1 , _control ) ] ;
38023: LD_ADDR_VAR 0 4
38027: PUSH
38028: LD_VAR 0 12
38032: PUSH
38033: LD_INT 1
38035: PPUSH
38036: LD_VAR 0 12
38040: PPUSH
38041: CALL_OW 12
38045: ARRAY
38046: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
38047: LD_VAR 0 2
38051: PPUSH
38052: LD_VAR 0 5
38056: PPUSH
38057: CALL 38415 0 2
38061: NOT
38062: IFFALSE 38121
// repeat weapon := _weapon [ 1 ] ;
38064: LD_ADDR_VAR 0 5
38068: PUSH
38069: LD_VAR 0 10
38073: PUSH
38074: LD_INT 1
38076: ARRAY
38077: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
38078: LD_ADDR_VAR 0 10
38082: PUSH
38083: LD_VAR 0 10
38087: PPUSH
38088: LD_INT 1
38090: PPUSH
38091: CALL_OW 3
38095: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
38096: LD_VAR 0 2
38100: PPUSH
38101: LD_VAR 0 5
38105: PPUSH
38106: CALL 38415 0 2
38110: PUSH
38111: LD_VAR 0 10
38115: PUSH
38116: EMPTY
38117: EQUAL
38118: OR
38119: IFFALSE 38064
// result := [ ] ;
38121: LD_ADDR_VAR 0 6
38125: PUSH
38126: EMPTY
38127: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
38128: LD_VAR 0 1
38132: PPUSH
38133: LD_VAR 0 2
38137: PPUSH
38138: LD_VAR 0 3
38142: PPUSH
38143: LD_VAR 0 4
38147: PPUSH
38148: LD_VAR 0 5
38152: PPUSH
38153: CALL_OW 448
38157: IFFALSE 38190
// result := [ chassis , engine , control , weapon ] ;
38159: LD_ADDR_VAR 0 6
38163: PUSH
38164: LD_VAR 0 2
38168: PUSH
38169: LD_VAR 0 3
38173: PUSH
38174: LD_VAR 0 4
38178: PUSH
38179: LD_VAR 0 5
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: ST_TO_ADDR
// end ;
38190: LD_VAR 0 6
38194: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
38195: LD_INT 0
38197: PPUSH
// if not chassis or not engine then
38198: LD_VAR 0 1
38202: NOT
38203: PUSH
38204: LD_VAR 0 2
38208: NOT
38209: OR
38210: IFFALSE 38214
// exit ;
38212: GO 38410
// case engine of engine_solar :
38214: LD_VAR 0 2
38218: PUSH
38219: LD_INT 2
38221: DOUBLE
38222: EQUAL
38223: IFTRUE 38227
38225: GO 38265
38227: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
38228: LD_ADDR_VAR 0 3
38232: PUSH
38233: LD_INT 11
38235: PUSH
38236: LD_INT 12
38238: PUSH
38239: LD_INT 13
38241: PUSH
38242: LD_INT 14
38244: PUSH
38245: LD_INT 1
38247: PUSH
38248: LD_INT 2
38250: PUSH
38251: LD_INT 3
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: ST_TO_ADDR
38263: GO 38394
38265: LD_INT 1
38267: DOUBLE
38268: EQUAL
38269: IFTRUE 38273
38271: GO 38335
38273: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
38274: LD_ADDR_VAR 0 3
38278: PUSH
38279: LD_INT 11
38281: PUSH
38282: LD_INT 12
38284: PUSH
38285: LD_INT 13
38287: PUSH
38288: LD_INT 14
38290: PUSH
38291: LD_INT 1
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: LD_INT 3
38299: PUSH
38300: LD_INT 4
38302: PUSH
38303: LD_INT 5
38305: PUSH
38306: LD_INT 21
38308: PUSH
38309: LD_INT 23
38311: PUSH
38312: LD_INT 22
38314: PUSH
38315: LD_INT 24
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: ST_TO_ADDR
38333: GO 38394
38335: LD_INT 3
38337: DOUBLE
38338: EQUAL
38339: IFTRUE 38343
38341: GO 38393
38343: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
38344: LD_ADDR_VAR 0 3
38348: PUSH
38349: LD_INT 13
38351: PUSH
38352: LD_INT 14
38354: PUSH
38355: LD_INT 2
38357: PUSH
38358: LD_INT 3
38360: PUSH
38361: LD_INT 4
38363: PUSH
38364: LD_INT 5
38366: PUSH
38367: LD_INT 21
38369: PUSH
38370: LD_INT 22
38372: PUSH
38373: LD_INT 23
38375: PUSH
38376: LD_INT 24
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: ST_TO_ADDR
38391: GO 38394
38393: POP
// result := ( chassis in result ) ;
38394: LD_ADDR_VAR 0 3
38398: PUSH
38399: LD_VAR 0 1
38403: PUSH
38404: LD_VAR 0 3
38408: IN
38409: ST_TO_ADDR
// end ;
38410: LD_VAR 0 3
38414: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
38415: LD_INT 0
38417: PPUSH
// if not chassis or not weapon then
38418: LD_VAR 0 1
38422: NOT
38423: PUSH
38424: LD_VAR 0 2
38428: NOT
38429: OR
38430: IFFALSE 38434
// exit ;
38432: GO 39494
// case weapon of us_machine_gun :
38434: LD_VAR 0 2
38438: PUSH
38439: LD_INT 2
38441: DOUBLE
38442: EQUAL
38443: IFTRUE 38447
38445: GO 38477
38447: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
38448: LD_ADDR_VAR 0 3
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: LD_INT 3
38461: PUSH
38462: LD_INT 4
38464: PUSH
38465: LD_INT 5
38467: PUSH
38468: EMPTY
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: LIST
38474: ST_TO_ADDR
38475: GO 39478
38477: LD_INT 3
38479: DOUBLE
38480: EQUAL
38481: IFTRUE 38485
38483: GO 38515
38485: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
38486: LD_ADDR_VAR 0 3
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 2
38496: PUSH
38497: LD_INT 3
38499: PUSH
38500: LD_INT 4
38502: PUSH
38503: LD_INT 5
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: ST_TO_ADDR
38513: GO 39478
38515: LD_INT 11
38517: DOUBLE
38518: EQUAL
38519: IFTRUE 38523
38521: GO 38553
38523: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
38524: LD_ADDR_VAR 0 3
38528: PUSH
38529: LD_INT 1
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: LD_INT 3
38537: PUSH
38538: LD_INT 4
38540: PUSH
38541: LD_INT 5
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: ST_TO_ADDR
38551: GO 39478
38553: LD_INT 4
38555: DOUBLE
38556: EQUAL
38557: IFTRUE 38561
38559: GO 38587
38561: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_INT 2
38569: PUSH
38570: LD_INT 3
38572: PUSH
38573: LD_INT 4
38575: PUSH
38576: LD_INT 5
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: LIST
38583: LIST
38584: ST_TO_ADDR
38585: GO 39478
38587: LD_INT 5
38589: DOUBLE
38590: EQUAL
38591: IFTRUE 38595
38593: GO 38621
38595: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
38596: LD_ADDR_VAR 0 3
38600: PUSH
38601: LD_INT 2
38603: PUSH
38604: LD_INT 3
38606: PUSH
38607: LD_INT 4
38609: PUSH
38610: LD_INT 5
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: ST_TO_ADDR
38619: GO 39478
38621: LD_INT 9
38623: DOUBLE
38624: EQUAL
38625: IFTRUE 38629
38627: GO 38655
38629: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
38630: LD_ADDR_VAR 0 3
38634: PUSH
38635: LD_INT 2
38637: PUSH
38638: LD_INT 3
38640: PUSH
38641: LD_INT 4
38643: PUSH
38644: LD_INT 5
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: ST_TO_ADDR
38653: GO 39478
38655: LD_INT 7
38657: DOUBLE
38658: EQUAL
38659: IFTRUE 38663
38661: GO 38689
38663: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
38664: LD_ADDR_VAR 0 3
38668: PUSH
38669: LD_INT 2
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: LD_INT 4
38677: PUSH
38678: LD_INT 5
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: LIST
38685: LIST
38686: ST_TO_ADDR
38687: GO 39478
38689: LD_INT 12
38691: DOUBLE
38692: EQUAL
38693: IFTRUE 38697
38695: GO 38723
38697: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
38698: LD_ADDR_VAR 0 3
38702: PUSH
38703: LD_INT 2
38705: PUSH
38706: LD_INT 3
38708: PUSH
38709: LD_INT 4
38711: PUSH
38712: LD_INT 5
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: ST_TO_ADDR
38721: GO 39478
38723: LD_INT 13
38725: DOUBLE
38726: EQUAL
38727: IFTRUE 38731
38729: GO 38757
38731: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
38732: LD_ADDR_VAR 0 3
38736: PUSH
38737: LD_INT 2
38739: PUSH
38740: LD_INT 3
38742: PUSH
38743: LD_INT 4
38745: PUSH
38746: LD_INT 5
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: ST_TO_ADDR
38755: GO 39478
38757: LD_INT 14
38759: DOUBLE
38760: EQUAL
38761: IFTRUE 38765
38763: GO 38783
38765: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
38766: LD_ADDR_VAR 0 3
38770: PUSH
38771: LD_INT 4
38773: PUSH
38774: LD_INT 5
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: ST_TO_ADDR
38781: GO 39478
38783: LD_INT 6
38785: DOUBLE
38786: EQUAL
38787: IFTRUE 38791
38789: GO 38809
38791: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
38792: LD_ADDR_VAR 0 3
38796: PUSH
38797: LD_INT 4
38799: PUSH
38800: LD_INT 5
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: ST_TO_ADDR
38807: GO 39478
38809: LD_INT 10
38811: DOUBLE
38812: EQUAL
38813: IFTRUE 38817
38815: GO 38835
38817: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
38818: LD_ADDR_VAR 0 3
38822: PUSH
38823: LD_INT 4
38825: PUSH
38826: LD_INT 5
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: ST_TO_ADDR
38833: GO 39478
38835: LD_INT 22
38837: DOUBLE
38838: EQUAL
38839: IFTRUE 38843
38841: GO 38869
38843: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
38844: LD_ADDR_VAR 0 3
38848: PUSH
38849: LD_INT 11
38851: PUSH
38852: LD_INT 12
38854: PUSH
38855: LD_INT 13
38857: PUSH
38858: LD_INT 14
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: ST_TO_ADDR
38867: GO 39478
38869: LD_INT 23
38871: DOUBLE
38872: EQUAL
38873: IFTRUE 38877
38875: GO 38903
38877: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
38878: LD_ADDR_VAR 0 3
38882: PUSH
38883: LD_INT 11
38885: PUSH
38886: LD_INT 12
38888: PUSH
38889: LD_INT 13
38891: PUSH
38892: LD_INT 14
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: ST_TO_ADDR
38901: GO 39478
38903: LD_INT 24
38905: DOUBLE
38906: EQUAL
38907: IFTRUE 38911
38909: GO 38937
38911: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
38912: LD_ADDR_VAR 0 3
38916: PUSH
38917: LD_INT 11
38919: PUSH
38920: LD_INT 12
38922: PUSH
38923: LD_INT 13
38925: PUSH
38926: LD_INT 14
38928: PUSH
38929: EMPTY
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: ST_TO_ADDR
38935: GO 39478
38937: LD_INT 30
38939: DOUBLE
38940: EQUAL
38941: IFTRUE 38945
38943: GO 38971
38945: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
38946: LD_ADDR_VAR 0 3
38950: PUSH
38951: LD_INT 11
38953: PUSH
38954: LD_INT 12
38956: PUSH
38957: LD_INT 13
38959: PUSH
38960: LD_INT 14
38962: PUSH
38963: EMPTY
38964: LIST
38965: LIST
38966: LIST
38967: LIST
38968: ST_TO_ADDR
38969: GO 39478
38971: LD_INT 25
38973: DOUBLE
38974: EQUAL
38975: IFTRUE 38979
38977: GO 38997
38979: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
38980: LD_ADDR_VAR 0 3
38984: PUSH
38985: LD_INT 13
38987: PUSH
38988: LD_INT 14
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: ST_TO_ADDR
38995: GO 39478
38997: LD_INT 27
38999: DOUBLE
39000: EQUAL
39001: IFTRUE 39005
39003: GO 39023
39005: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
39006: LD_ADDR_VAR 0 3
39010: PUSH
39011: LD_INT 13
39013: PUSH
39014: LD_INT 14
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: ST_TO_ADDR
39021: GO 39478
39023: LD_INT 92
39025: DOUBLE
39026: EQUAL
39027: IFTRUE 39031
39029: GO 39057
39031: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
39032: LD_ADDR_VAR 0 3
39036: PUSH
39037: LD_INT 11
39039: PUSH
39040: LD_INT 12
39042: PUSH
39043: LD_INT 13
39045: PUSH
39046: LD_INT 14
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: ST_TO_ADDR
39055: GO 39478
39057: LD_INT 28
39059: DOUBLE
39060: EQUAL
39061: IFTRUE 39065
39063: GO 39083
39065: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
39066: LD_ADDR_VAR 0 3
39070: PUSH
39071: LD_INT 13
39073: PUSH
39074: LD_INT 14
39076: PUSH
39077: EMPTY
39078: LIST
39079: LIST
39080: ST_TO_ADDR
39081: GO 39478
39083: LD_INT 29
39085: DOUBLE
39086: EQUAL
39087: IFTRUE 39091
39089: GO 39109
39091: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
39092: LD_ADDR_VAR 0 3
39096: PUSH
39097: LD_INT 13
39099: PUSH
39100: LD_INT 14
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: ST_TO_ADDR
39107: GO 39478
39109: LD_INT 31
39111: DOUBLE
39112: EQUAL
39113: IFTRUE 39117
39115: GO 39135
39117: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
39118: LD_ADDR_VAR 0 3
39122: PUSH
39123: LD_INT 13
39125: PUSH
39126: LD_INT 14
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: ST_TO_ADDR
39133: GO 39478
39135: LD_INT 26
39137: DOUBLE
39138: EQUAL
39139: IFTRUE 39143
39141: GO 39161
39143: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
39144: LD_ADDR_VAR 0 3
39148: PUSH
39149: LD_INT 13
39151: PUSH
39152: LD_INT 14
39154: PUSH
39155: EMPTY
39156: LIST
39157: LIST
39158: ST_TO_ADDR
39159: GO 39478
39161: LD_INT 42
39163: DOUBLE
39164: EQUAL
39165: IFTRUE 39169
39167: GO 39195
39169: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
39170: LD_ADDR_VAR 0 3
39174: PUSH
39175: LD_INT 21
39177: PUSH
39178: LD_INT 22
39180: PUSH
39181: LD_INT 23
39183: PUSH
39184: LD_INT 24
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: LIST
39191: LIST
39192: ST_TO_ADDR
39193: GO 39478
39195: LD_INT 43
39197: DOUBLE
39198: EQUAL
39199: IFTRUE 39203
39201: GO 39229
39203: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
39204: LD_ADDR_VAR 0 3
39208: PUSH
39209: LD_INT 21
39211: PUSH
39212: LD_INT 22
39214: PUSH
39215: LD_INT 23
39217: PUSH
39218: LD_INT 24
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: ST_TO_ADDR
39227: GO 39478
39229: LD_INT 44
39231: DOUBLE
39232: EQUAL
39233: IFTRUE 39237
39235: GO 39263
39237: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
39238: LD_ADDR_VAR 0 3
39242: PUSH
39243: LD_INT 21
39245: PUSH
39246: LD_INT 22
39248: PUSH
39249: LD_INT 23
39251: PUSH
39252: LD_INT 24
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: ST_TO_ADDR
39261: GO 39478
39263: LD_INT 45
39265: DOUBLE
39266: EQUAL
39267: IFTRUE 39271
39269: GO 39297
39271: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
39272: LD_ADDR_VAR 0 3
39276: PUSH
39277: LD_INT 21
39279: PUSH
39280: LD_INT 22
39282: PUSH
39283: LD_INT 23
39285: PUSH
39286: LD_INT 24
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: ST_TO_ADDR
39295: GO 39478
39297: LD_INT 49
39299: DOUBLE
39300: EQUAL
39301: IFTRUE 39305
39303: GO 39331
39305: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
39306: LD_ADDR_VAR 0 3
39310: PUSH
39311: LD_INT 21
39313: PUSH
39314: LD_INT 22
39316: PUSH
39317: LD_INT 23
39319: PUSH
39320: LD_INT 24
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: ST_TO_ADDR
39329: GO 39478
39331: LD_INT 51
39333: DOUBLE
39334: EQUAL
39335: IFTRUE 39339
39337: GO 39365
39339: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
39340: LD_ADDR_VAR 0 3
39344: PUSH
39345: LD_INT 21
39347: PUSH
39348: LD_INT 22
39350: PUSH
39351: LD_INT 23
39353: PUSH
39354: LD_INT 24
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: ST_TO_ADDR
39363: GO 39478
39365: LD_INT 52
39367: DOUBLE
39368: EQUAL
39369: IFTRUE 39373
39371: GO 39399
39373: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
39374: LD_ADDR_VAR 0 3
39378: PUSH
39379: LD_INT 21
39381: PUSH
39382: LD_INT 22
39384: PUSH
39385: LD_INT 23
39387: PUSH
39388: LD_INT 24
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: ST_TO_ADDR
39397: GO 39478
39399: LD_INT 53
39401: DOUBLE
39402: EQUAL
39403: IFTRUE 39407
39405: GO 39425
39407: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
39408: LD_ADDR_VAR 0 3
39412: PUSH
39413: LD_INT 23
39415: PUSH
39416: LD_INT 24
39418: PUSH
39419: EMPTY
39420: LIST
39421: LIST
39422: ST_TO_ADDR
39423: GO 39478
39425: LD_INT 46
39427: DOUBLE
39428: EQUAL
39429: IFTRUE 39433
39431: GO 39451
39433: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
39434: LD_ADDR_VAR 0 3
39438: PUSH
39439: LD_INT 23
39441: PUSH
39442: LD_INT 24
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: ST_TO_ADDR
39449: GO 39478
39451: LD_INT 47
39453: DOUBLE
39454: EQUAL
39455: IFTRUE 39459
39457: GO 39477
39459: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
39460: LD_ADDR_VAR 0 3
39464: PUSH
39465: LD_INT 23
39467: PUSH
39468: LD_INT 24
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: ST_TO_ADDR
39475: GO 39478
39477: POP
// result := ( chassis in result ) ;
39478: LD_ADDR_VAR 0 3
39482: PUSH
39483: LD_VAR 0 1
39487: PUSH
39488: LD_VAR 0 3
39492: IN
39493: ST_TO_ADDR
// end ;
39494: LD_VAR 0 3
39498: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
39499: LD_INT 0
39501: PPUSH
39502: PPUSH
39503: PPUSH
39504: PPUSH
39505: PPUSH
39506: PPUSH
39507: PPUSH
// result := array ;
39508: LD_ADDR_VAR 0 5
39512: PUSH
39513: LD_VAR 0 1
39517: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
39518: LD_VAR 0 1
39522: NOT
39523: PUSH
39524: LD_VAR 0 2
39528: NOT
39529: OR
39530: PUSH
39531: LD_VAR 0 3
39535: NOT
39536: OR
39537: PUSH
39538: LD_VAR 0 2
39542: PUSH
39543: LD_VAR 0 1
39547: GREATER
39548: OR
39549: PUSH
39550: LD_VAR 0 3
39554: PUSH
39555: LD_VAR 0 1
39559: GREATER
39560: OR
39561: IFFALSE 39565
// exit ;
39563: GO 39861
// if direction then
39565: LD_VAR 0 4
39569: IFFALSE 39633
// begin d := 1 ;
39571: LD_ADDR_VAR 0 9
39575: PUSH
39576: LD_INT 1
39578: ST_TO_ADDR
// if i_from > i_to then
39579: LD_VAR 0 2
39583: PUSH
39584: LD_VAR 0 3
39588: GREATER
39589: IFFALSE 39615
// length := ( array - i_from ) + i_to else
39591: LD_ADDR_VAR 0 11
39595: PUSH
39596: LD_VAR 0 1
39600: PUSH
39601: LD_VAR 0 2
39605: MINUS
39606: PUSH
39607: LD_VAR 0 3
39611: PLUS
39612: ST_TO_ADDR
39613: GO 39631
// length := i_to - i_from ;
39615: LD_ADDR_VAR 0 11
39619: PUSH
39620: LD_VAR 0 3
39624: PUSH
39625: LD_VAR 0 2
39629: MINUS
39630: ST_TO_ADDR
// end else
39631: GO 39694
// begin d := - 1 ;
39633: LD_ADDR_VAR 0 9
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: ST_TO_ADDR
// if i_from > i_to then
39642: LD_VAR 0 2
39646: PUSH
39647: LD_VAR 0 3
39651: GREATER
39652: IFFALSE 39672
// length := i_from - i_to else
39654: LD_ADDR_VAR 0 11
39658: PUSH
39659: LD_VAR 0 2
39663: PUSH
39664: LD_VAR 0 3
39668: MINUS
39669: ST_TO_ADDR
39670: GO 39694
// length := ( array - i_to ) + i_from ;
39672: LD_ADDR_VAR 0 11
39676: PUSH
39677: LD_VAR 0 1
39681: PUSH
39682: LD_VAR 0 3
39686: MINUS
39687: PUSH
39688: LD_VAR 0 2
39692: PLUS
39693: ST_TO_ADDR
// end ; if not length then
39694: LD_VAR 0 11
39698: NOT
39699: IFFALSE 39703
// exit ;
39701: GO 39861
// tmp := array ;
39703: LD_ADDR_VAR 0 10
39707: PUSH
39708: LD_VAR 0 1
39712: ST_TO_ADDR
// for i = 1 to length do
39713: LD_ADDR_VAR 0 6
39717: PUSH
39718: DOUBLE
39719: LD_INT 1
39721: DEC
39722: ST_TO_ADDR
39723: LD_VAR 0 11
39727: PUSH
39728: FOR_TO
39729: IFFALSE 39849
// begin for j = 1 to array do
39731: LD_ADDR_VAR 0 7
39735: PUSH
39736: DOUBLE
39737: LD_INT 1
39739: DEC
39740: ST_TO_ADDR
39741: LD_VAR 0 1
39745: PUSH
39746: FOR_TO
39747: IFFALSE 39835
// begin k := j + d ;
39749: LD_ADDR_VAR 0 8
39753: PUSH
39754: LD_VAR 0 7
39758: PUSH
39759: LD_VAR 0 9
39763: PLUS
39764: ST_TO_ADDR
// if k > array then
39765: LD_VAR 0 8
39769: PUSH
39770: LD_VAR 0 1
39774: GREATER
39775: IFFALSE 39785
// k := 1 ;
39777: LD_ADDR_VAR 0 8
39781: PUSH
39782: LD_INT 1
39784: ST_TO_ADDR
// if not k then
39785: LD_VAR 0 8
39789: NOT
39790: IFFALSE 39802
// k := array ;
39792: LD_ADDR_VAR 0 8
39796: PUSH
39797: LD_VAR 0 1
39801: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
39802: LD_ADDR_VAR 0 10
39806: PUSH
39807: LD_VAR 0 10
39811: PPUSH
39812: LD_VAR 0 8
39816: PPUSH
39817: LD_VAR 0 1
39821: PUSH
39822: LD_VAR 0 7
39826: ARRAY
39827: PPUSH
39828: CALL_OW 1
39832: ST_TO_ADDR
// end ;
39833: GO 39746
39835: POP
39836: POP
// array := tmp ;
39837: LD_ADDR_VAR 0 1
39841: PUSH
39842: LD_VAR 0 10
39846: ST_TO_ADDR
// end ;
39847: GO 39728
39849: POP
39850: POP
// result := array ;
39851: LD_ADDR_VAR 0 5
39855: PUSH
39856: LD_VAR 0 1
39860: ST_TO_ADDR
// end ;
39861: LD_VAR 0 5
39865: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
39866: LD_INT 0
39868: PPUSH
39869: PPUSH
// result := 0 ;
39870: LD_ADDR_VAR 0 3
39874: PUSH
39875: LD_INT 0
39877: ST_TO_ADDR
// if not array or not value in array then
39878: LD_VAR 0 1
39882: NOT
39883: PUSH
39884: LD_VAR 0 2
39888: PUSH
39889: LD_VAR 0 1
39893: IN
39894: NOT
39895: OR
39896: IFFALSE 39900
// exit ;
39898: GO 39954
// for i = 1 to array do
39900: LD_ADDR_VAR 0 4
39904: PUSH
39905: DOUBLE
39906: LD_INT 1
39908: DEC
39909: ST_TO_ADDR
39910: LD_VAR 0 1
39914: PUSH
39915: FOR_TO
39916: IFFALSE 39952
// if value = array [ i ] then
39918: LD_VAR 0 2
39922: PUSH
39923: LD_VAR 0 1
39927: PUSH
39928: LD_VAR 0 4
39932: ARRAY
39933: EQUAL
39934: IFFALSE 39950
// begin result := i ;
39936: LD_ADDR_VAR 0 3
39940: PUSH
39941: LD_VAR 0 4
39945: ST_TO_ADDR
// exit ;
39946: POP
39947: POP
39948: GO 39954
// end ;
39950: GO 39915
39952: POP
39953: POP
// end ;
39954: LD_VAR 0 3
39958: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
39959: LD_INT 0
39961: PPUSH
// vc_chassis := chassis ;
39962: LD_ADDR_OWVAR 37
39966: PUSH
39967: LD_VAR 0 1
39971: ST_TO_ADDR
// vc_engine := engine ;
39972: LD_ADDR_OWVAR 39
39976: PUSH
39977: LD_VAR 0 2
39981: ST_TO_ADDR
// vc_control := control ;
39982: LD_ADDR_OWVAR 38
39986: PUSH
39987: LD_VAR 0 3
39991: ST_TO_ADDR
// vc_weapon := weapon ;
39992: LD_ADDR_OWVAR 40
39996: PUSH
39997: LD_VAR 0 4
40001: ST_TO_ADDR
// vc_fuel_battery := fuel ;
40002: LD_ADDR_OWVAR 41
40006: PUSH
40007: LD_VAR 0 5
40011: ST_TO_ADDR
// end ;
40012: LD_VAR 0 6
40016: RET
// export function WantPlant ( unit ) ; var task ; begin
40017: LD_INT 0
40019: PPUSH
40020: PPUSH
// result := false ;
40021: LD_ADDR_VAR 0 2
40025: PUSH
40026: LD_INT 0
40028: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
40029: LD_ADDR_VAR 0 3
40033: PUSH
40034: LD_VAR 0 1
40038: PPUSH
40039: CALL_OW 437
40043: ST_TO_ADDR
// if task then
40044: LD_VAR 0 3
40048: IFFALSE 40076
// if task [ 1 ] [ 1 ] = p then
40050: LD_VAR 0 3
40054: PUSH
40055: LD_INT 1
40057: ARRAY
40058: PUSH
40059: LD_INT 1
40061: ARRAY
40062: PUSH
40063: LD_STRING p
40065: EQUAL
40066: IFFALSE 40076
// result := true ;
40068: LD_ADDR_VAR 0 2
40072: PUSH
40073: LD_INT 1
40075: ST_TO_ADDR
// end ;
40076: LD_VAR 0 2
40080: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
40081: LD_INT 0
40083: PPUSH
40084: PPUSH
40085: PPUSH
40086: PPUSH
// if pos < 1 then
40087: LD_VAR 0 2
40091: PUSH
40092: LD_INT 1
40094: LESS
40095: IFFALSE 40099
// exit ;
40097: GO 40402
// if pos = 1 then
40099: LD_VAR 0 2
40103: PUSH
40104: LD_INT 1
40106: EQUAL
40107: IFFALSE 40140
// result := Replace ( arr , pos [ 1 ] , value ) else
40109: LD_ADDR_VAR 0 4
40113: PUSH
40114: LD_VAR 0 1
40118: PPUSH
40119: LD_VAR 0 2
40123: PUSH
40124: LD_INT 1
40126: ARRAY
40127: PPUSH
40128: LD_VAR 0 3
40132: PPUSH
40133: CALL_OW 1
40137: ST_TO_ADDR
40138: GO 40402
// begin tmp := arr ;
40140: LD_ADDR_VAR 0 6
40144: PUSH
40145: LD_VAR 0 1
40149: ST_TO_ADDR
// s_arr := [ tmp ] ;
40150: LD_ADDR_VAR 0 7
40154: PUSH
40155: LD_VAR 0 6
40159: PUSH
40160: EMPTY
40161: LIST
40162: ST_TO_ADDR
// for i = 1 to pos - 1 do
40163: LD_ADDR_VAR 0 5
40167: PUSH
40168: DOUBLE
40169: LD_INT 1
40171: DEC
40172: ST_TO_ADDR
40173: LD_VAR 0 2
40177: PUSH
40178: LD_INT 1
40180: MINUS
40181: PUSH
40182: FOR_TO
40183: IFFALSE 40228
// begin tmp := tmp [ pos [ i ] ] ;
40185: LD_ADDR_VAR 0 6
40189: PUSH
40190: LD_VAR 0 6
40194: PUSH
40195: LD_VAR 0 2
40199: PUSH
40200: LD_VAR 0 5
40204: ARRAY
40205: ARRAY
40206: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
40207: LD_ADDR_VAR 0 7
40211: PUSH
40212: LD_VAR 0 7
40216: PUSH
40217: LD_VAR 0 6
40221: PUSH
40222: EMPTY
40223: LIST
40224: ADD
40225: ST_TO_ADDR
// end ;
40226: GO 40182
40228: POP
40229: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
40230: LD_ADDR_VAR 0 6
40234: PUSH
40235: LD_VAR 0 6
40239: PPUSH
40240: LD_VAR 0 2
40244: PUSH
40245: LD_VAR 0 2
40249: ARRAY
40250: PPUSH
40251: LD_VAR 0 3
40255: PPUSH
40256: CALL_OW 1
40260: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
40261: LD_ADDR_VAR 0 7
40265: PUSH
40266: LD_VAR 0 7
40270: PPUSH
40271: LD_VAR 0 7
40275: PPUSH
40276: LD_VAR 0 6
40280: PPUSH
40281: CALL_OW 1
40285: ST_TO_ADDR
// for i = s_arr downto 2 do
40286: LD_ADDR_VAR 0 5
40290: PUSH
40291: DOUBLE
40292: LD_VAR 0 7
40296: INC
40297: ST_TO_ADDR
40298: LD_INT 2
40300: PUSH
40301: FOR_DOWNTO
40302: IFFALSE 40386
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
40304: LD_ADDR_VAR 0 6
40308: PUSH
40309: LD_VAR 0 7
40313: PUSH
40314: LD_VAR 0 5
40318: PUSH
40319: LD_INT 1
40321: MINUS
40322: ARRAY
40323: PPUSH
40324: LD_VAR 0 2
40328: PUSH
40329: LD_VAR 0 5
40333: PUSH
40334: LD_INT 1
40336: MINUS
40337: ARRAY
40338: PPUSH
40339: LD_VAR 0 7
40343: PUSH
40344: LD_VAR 0 5
40348: ARRAY
40349: PPUSH
40350: CALL_OW 1
40354: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
40355: LD_ADDR_VAR 0 7
40359: PUSH
40360: LD_VAR 0 7
40364: PPUSH
40365: LD_VAR 0 5
40369: PUSH
40370: LD_INT 1
40372: MINUS
40373: PPUSH
40374: LD_VAR 0 6
40378: PPUSH
40379: CALL_OW 1
40383: ST_TO_ADDR
// end ;
40384: GO 40301
40386: POP
40387: POP
// result := s_arr [ 1 ] ;
40388: LD_ADDR_VAR 0 4
40392: PUSH
40393: LD_VAR 0 7
40397: PUSH
40398: LD_INT 1
40400: ARRAY
40401: ST_TO_ADDR
// end ; end ;
40402: LD_VAR 0 4
40406: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
40407: LD_INT 0
40409: PPUSH
40410: PPUSH
// if not list then
40411: LD_VAR 0 1
40415: NOT
40416: IFFALSE 40420
// exit ;
40418: GO 40511
// i := list [ pos1 ] ;
40420: LD_ADDR_VAR 0 5
40424: PUSH
40425: LD_VAR 0 1
40429: PUSH
40430: LD_VAR 0 2
40434: ARRAY
40435: ST_TO_ADDR
// if not i then
40436: LD_VAR 0 5
40440: NOT
40441: IFFALSE 40445
// exit ;
40443: GO 40511
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
40445: LD_ADDR_VAR 0 1
40449: PUSH
40450: LD_VAR 0 1
40454: PPUSH
40455: LD_VAR 0 2
40459: PPUSH
40460: LD_VAR 0 1
40464: PUSH
40465: LD_VAR 0 3
40469: ARRAY
40470: PPUSH
40471: CALL_OW 1
40475: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
40476: LD_ADDR_VAR 0 1
40480: PUSH
40481: LD_VAR 0 1
40485: PPUSH
40486: LD_VAR 0 3
40490: PPUSH
40491: LD_VAR 0 5
40495: PPUSH
40496: CALL_OW 1
40500: ST_TO_ADDR
// result := list ;
40501: LD_ADDR_VAR 0 4
40505: PUSH
40506: LD_VAR 0 1
40510: ST_TO_ADDR
// end ;
40511: LD_VAR 0 4
40515: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
40516: LD_INT 0
40518: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
40519: LD_ADDR_VAR 0 5
40523: PUSH
40524: LD_VAR 0 1
40528: PPUSH
40529: CALL_OW 250
40533: PPUSH
40534: LD_VAR 0 1
40538: PPUSH
40539: CALL_OW 251
40543: PPUSH
40544: LD_VAR 0 2
40548: PPUSH
40549: LD_VAR 0 3
40553: PPUSH
40554: LD_VAR 0 4
40558: PPUSH
40559: CALL 40569 0 5
40563: ST_TO_ADDR
// end ;
40564: LD_VAR 0 5
40568: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
40569: LD_INT 0
40571: PPUSH
40572: PPUSH
40573: PPUSH
40574: PPUSH
// if not list then
40575: LD_VAR 0 3
40579: NOT
40580: IFFALSE 40584
// exit ;
40582: GO 40972
// result := [ ] ;
40584: LD_ADDR_VAR 0 6
40588: PUSH
40589: EMPTY
40590: ST_TO_ADDR
// for i in list do
40591: LD_ADDR_VAR 0 7
40595: PUSH
40596: LD_VAR 0 3
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40804
// begin tmp := GetDistUnitXY ( i , x , y ) ;
40604: LD_ADDR_VAR 0 9
40608: PUSH
40609: LD_VAR 0 7
40613: PPUSH
40614: LD_VAR 0 1
40618: PPUSH
40619: LD_VAR 0 2
40623: PPUSH
40624: CALL_OW 297
40628: ST_TO_ADDR
// if not result then
40629: LD_VAR 0 6
40633: NOT
40634: IFFALSE 40660
// result := [ [ i , tmp ] ] else
40636: LD_ADDR_VAR 0 6
40640: PUSH
40641: LD_VAR 0 7
40645: PUSH
40646: LD_VAR 0 9
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: EMPTY
40656: LIST
40657: ST_TO_ADDR
40658: GO 40802
// begin if result [ result ] [ 2 ] < tmp then
40660: LD_VAR 0 6
40664: PUSH
40665: LD_VAR 0 6
40669: ARRAY
40670: PUSH
40671: LD_INT 2
40673: ARRAY
40674: PUSH
40675: LD_VAR 0 9
40679: LESS
40680: IFFALSE 40722
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
40682: LD_ADDR_VAR 0 6
40686: PUSH
40687: LD_VAR 0 6
40691: PPUSH
40692: LD_VAR 0 6
40696: PUSH
40697: LD_INT 1
40699: PLUS
40700: PPUSH
40701: LD_VAR 0 7
40705: PUSH
40706: LD_VAR 0 9
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PPUSH
40715: CALL_OW 2
40719: ST_TO_ADDR
40720: GO 40802
// for j = 1 to result do
40722: LD_ADDR_VAR 0 8
40726: PUSH
40727: DOUBLE
40728: LD_INT 1
40730: DEC
40731: ST_TO_ADDR
40732: LD_VAR 0 6
40736: PUSH
40737: FOR_TO
40738: IFFALSE 40800
// begin if tmp < result [ j ] [ 2 ] then
40740: LD_VAR 0 9
40744: PUSH
40745: LD_VAR 0 6
40749: PUSH
40750: LD_VAR 0 8
40754: ARRAY
40755: PUSH
40756: LD_INT 2
40758: ARRAY
40759: LESS
40760: IFFALSE 40798
// begin result := Insert ( result , j , [ i , tmp ] ) ;
40762: LD_ADDR_VAR 0 6
40766: PUSH
40767: LD_VAR 0 6
40771: PPUSH
40772: LD_VAR 0 8
40776: PPUSH
40777: LD_VAR 0 7
40781: PUSH
40782: LD_VAR 0 9
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: PPUSH
40791: CALL_OW 2
40795: ST_TO_ADDR
// break ;
40796: GO 40800
// end ; end ;
40798: GO 40737
40800: POP
40801: POP
// end ; end ;
40802: GO 40601
40804: POP
40805: POP
// if result and not asc then
40806: LD_VAR 0 6
40810: PUSH
40811: LD_VAR 0 4
40815: NOT
40816: AND
40817: IFFALSE 40892
// begin tmp := result ;
40819: LD_ADDR_VAR 0 9
40823: PUSH
40824: LD_VAR 0 6
40828: ST_TO_ADDR
// for i = tmp downto 1 do
40829: LD_ADDR_VAR 0 7
40833: PUSH
40834: DOUBLE
40835: LD_VAR 0 9
40839: INC
40840: ST_TO_ADDR
40841: LD_INT 1
40843: PUSH
40844: FOR_DOWNTO
40845: IFFALSE 40890
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
40847: LD_ADDR_VAR 0 6
40851: PUSH
40852: LD_VAR 0 6
40856: PPUSH
40857: LD_VAR 0 9
40861: PUSH
40862: LD_VAR 0 7
40866: MINUS
40867: PUSH
40868: LD_INT 1
40870: PLUS
40871: PPUSH
40872: LD_VAR 0 9
40876: PUSH
40877: LD_VAR 0 7
40881: ARRAY
40882: PPUSH
40883: CALL_OW 1
40887: ST_TO_ADDR
40888: GO 40844
40890: POP
40891: POP
// end ; tmp := [ ] ;
40892: LD_ADDR_VAR 0 9
40896: PUSH
40897: EMPTY
40898: ST_TO_ADDR
// if mode then
40899: LD_VAR 0 5
40903: IFFALSE 40972
// begin for i = 1 to result do
40905: LD_ADDR_VAR 0 7
40909: PUSH
40910: DOUBLE
40911: LD_INT 1
40913: DEC
40914: ST_TO_ADDR
40915: LD_VAR 0 6
40919: PUSH
40920: FOR_TO
40921: IFFALSE 40960
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
40923: LD_ADDR_VAR 0 9
40927: PUSH
40928: LD_VAR 0 9
40932: PPUSH
40933: LD_VAR 0 7
40937: PPUSH
40938: LD_VAR 0 6
40942: PUSH
40943: LD_VAR 0 7
40947: ARRAY
40948: PUSH
40949: LD_INT 1
40951: ARRAY
40952: PPUSH
40953: CALL_OW 1
40957: ST_TO_ADDR
40958: GO 40920
40960: POP
40961: POP
// result := tmp ;
40962: LD_ADDR_VAR 0 6
40966: PUSH
40967: LD_VAR 0 9
40971: ST_TO_ADDR
// end ; end ;
40972: LD_VAR 0 6
40976: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
40977: LD_INT 0
40979: PPUSH
40980: PPUSH
40981: PPUSH
40982: PPUSH
40983: PPUSH
40984: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
40985: LD_ADDR_VAR 0 5
40989: PUSH
40990: LD_INT 0
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: LD_INT 0
40998: PUSH
40999: EMPTY
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: ST_TO_ADDR
// if not x or not y then
41007: LD_VAR 0 2
41011: NOT
41012: PUSH
41013: LD_VAR 0 3
41017: NOT
41018: OR
41019: IFFALSE 41023
// exit ;
41021: GO 42673
// if not range then
41023: LD_VAR 0 4
41027: NOT
41028: IFFALSE 41038
// range := 10 ;
41030: LD_ADDR_VAR 0 4
41034: PUSH
41035: LD_INT 10
41037: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
41038: LD_ADDR_VAR 0 8
41042: PUSH
41043: LD_INT 81
41045: PUSH
41046: LD_VAR 0 1
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 92
41057: PUSH
41058: LD_VAR 0 2
41062: PUSH
41063: LD_VAR 0 3
41067: PUSH
41068: LD_VAR 0 4
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: PUSH
41079: LD_INT 3
41081: PUSH
41082: LD_INT 21
41084: PUSH
41085: LD_INT 3
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: LIST
41100: PPUSH
41101: CALL_OW 69
41105: ST_TO_ADDR
// if not tmp then
41106: LD_VAR 0 8
41110: NOT
41111: IFFALSE 41115
// exit ;
41113: GO 42673
// for i in tmp do
41115: LD_ADDR_VAR 0 6
41119: PUSH
41120: LD_VAR 0 8
41124: PUSH
41125: FOR_IN
41126: IFFALSE 42648
// begin points := [ 0 , 0 , 0 ] ;
41128: LD_ADDR_VAR 0 9
41132: PUSH
41133: LD_INT 0
41135: PUSH
41136: LD_INT 0
41138: PUSH
41139: LD_INT 0
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: LIST
41146: ST_TO_ADDR
// bpoints := 1 ;
41147: LD_ADDR_VAR 0 10
41151: PUSH
41152: LD_INT 1
41154: ST_TO_ADDR
// case GetType ( i ) of unit_human :
41155: LD_VAR 0 6
41159: PPUSH
41160: CALL_OW 247
41164: PUSH
41165: LD_INT 1
41167: DOUBLE
41168: EQUAL
41169: IFTRUE 41173
41171: GO 41751
41173: POP
// begin if GetClass ( i ) = 1 then
41174: LD_VAR 0 6
41178: PPUSH
41179: CALL_OW 257
41183: PUSH
41184: LD_INT 1
41186: EQUAL
41187: IFFALSE 41208
// points := [ 10 , 5 , 3 ] ;
41189: LD_ADDR_VAR 0 9
41193: PUSH
41194: LD_INT 10
41196: PUSH
41197: LD_INT 5
41199: PUSH
41200: LD_INT 3
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: LIST
41207: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
41208: LD_VAR 0 6
41212: PPUSH
41213: CALL_OW 257
41217: PUSH
41218: LD_INT 2
41220: PUSH
41221: LD_INT 3
41223: PUSH
41224: LD_INT 4
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: LIST
41231: IN
41232: IFFALSE 41253
// points := [ 3 , 2 , 1 ] ;
41234: LD_ADDR_VAR 0 9
41238: PUSH
41239: LD_INT 3
41241: PUSH
41242: LD_INT 2
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: LIST
41252: ST_TO_ADDR
// if GetClass ( i ) = 5 then
41253: LD_VAR 0 6
41257: PPUSH
41258: CALL_OW 257
41262: PUSH
41263: LD_INT 5
41265: EQUAL
41266: IFFALSE 41287
// points := [ 130 , 5 , 2 ] ;
41268: LD_ADDR_VAR 0 9
41272: PUSH
41273: LD_INT 130
41275: PUSH
41276: LD_INT 5
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: LIST
41286: ST_TO_ADDR
// if GetClass ( i ) = 8 then
41287: LD_VAR 0 6
41291: PPUSH
41292: CALL_OW 257
41296: PUSH
41297: LD_INT 8
41299: EQUAL
41300: IFFALSE 41321
// points := [ 35 , 35 , 30 ] ;
41302: LD_ADDR_VAR 0 9
41306: PUSH
41307: LD_INT 35
41309: PUSH
41310: LD_INT 35
41312: PUSH
41313: LD_INT 30
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: LIST
41320: ST_TO_ADDR
// if GetClass ( i ) = 9 then
41321: LD_VAR 0 6
41325: PPUSH
41326: CALL_OW 257
41330: PUSH
41331: LD_INT 9
41333: EQUAL
41334: IFFALSE 41355
// points := [ 20 , 55 , 40 ] ;
41336: LD_ADDR_VAR 0 9
41340: PUSH
41341: LD_INT 20
41343: PUSH
41344: LD_INT 55
41346: PUSH
41347: LD_INT 40
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: LIST
41354: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
41355: LD_VAR 0 6
41359: PPUSH
41360: CALL_OW 257
41364: PUSH
41365: LD_INT 12
41367: PUSH
41368: LD_INT 16
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: IN
41375: IFFALSE 41396
// points := [ 5 , 3 , 2 ] ;
41377: LD_ADDR_VAR 0 9
41381: PUSH
41382: LD_INT 5
41384: PUSH
41385: LD_INT 3
41387: PUSH
41388: LD_INT 2
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: ST_TO_ADDR
// if GetClass ( i ) = 17 then
41396: LD_VAR 0 6
41400: PPUSH
41401: CALL_OW 257
41405: PUSH
41406: LD_INT 17
41408: EQUAL
41409: IFFALSE 41430
// points := [ 100 , 50 , 75 ] ;
41411: LD_ADDR_VAR 0 9
41415: PUSH
41416: LD_INT 100
41418: PUSH
41419: LD_INT 50
41421: PUSH
41422: LD_INT 75
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
// if GetClass ( i ) = 15 then
41430: LD_VAR 0 6
41434: PPUSH
41435: CALL_OW 257
41439: PUSH
41440: LD_INT 15
41442: EQUAL
41443: IFFALSE 41464
// points := [ 10 , 5 , 3 ] ;
41445: LD_ADDR_VAR 0 9
41449: PUSH
41450: LD_INT 10
41452: PUSH
41453: LD_INT 5
41455: PUSH
41456: LD_INT 3
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: LIST
41463: ST_TO_ADDR
// if GetClass ( i ) = 14 then
41464: LD_VAR 0 6
41468: PPUSH
41469: CALL_OW 257
41473: PUSH
41474: LD_INT 14
41476: EQUAL
41477: IFFALSE 41498
// points := [ 10 , 0 , 0 ] ;
41479: LD_ADDR_VAR 0 9
41483: PUSH
41484: LD_INT 10
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: LIST
41497: ST_TO_ADDR
// if GetClass ( i ) = 11 then
41498: LD_VAR 0 6
41502: PPUSH
41503: CALL_OW 257
41507: PUSH
41508: LD_INT 11
41510: EQUAL
41511: IFFALSE 41532
// points := [ 30 , 10 , 5 ] ;
41513: LD_ADDR_VAR 0 9
41517: PUSH
41518: LD_INT 30
41520: PUSH
41521: LD_INT 10
41523: PUSH
41524: LD_INT 5
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: LIST
41531: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
41532: LD_VAR 0 1
41536: PPUSH
41537: LD_INT 5
41539: PPUSH
41540: CALL_OW 321
41544: PUSH
41545: LD_INT 2
41547: EQUAL
41548: IFFALSE 41565
// bpoints := bpoints * 1.8 ;
41550: LD_ADDR_VAR 0 10
41554: PUSH
41555: LD_VAR 0 10
41559: PUSH
41560: LD_REAL  1.80000000000000E+0000
41563: MUL
41564: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
41565: LD_VAR 0 6
41569: PPUSH
41570: CALL_OW 257
41574: PUSH
41575: LD_INT 1
41577: PUSH
41578: LD_INT 2
41580: PUSH
41581: LD_INT 3
41583: PUSH
41584: LD_INT 4
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: IN
41593: PUSH
41594: LD_VAR 0 1
41598: PPUSH
41599: LD_INT 51
41601: PPUSH
41602: CALL_OW 321
41606: PUSH
41607: LD_INT 2
41609: EQUAL
41610: AND
41611: IFFALSE 41628
// bpoints := bpoints * 1.2 ;
41613: LD_ADDR_VAR 0 10
41617: PUSH
41618: LD_VAR 0 10
41622: PUSH
41623: LD_REAL  1.20000000000000E+0000
41626: MUL
41627: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
41628: LD_VAR 0 6
41632: PPUSH
41633: CALL_OW 257
41637: PUSH
41638: LD_INT 5
41640: PUSH
41641: LD_INT 7
41643: PUSH
41644: LD_INT 9
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: IN
41652: PUSH
41653: LD_VAR 0 1
41657: PPUSH
41658: LD_INT 52
41660: PPUSH
41661: CALL_OW 321
41665: PUSH
41666: LD_INT 2
41668: EQUAL
41669: AND
41670: IFFALSE 41687
// bpoints := bpoints * 1.5 ;
41672: LD_ADDR_VAR 0 10
41676: PUSH
41677: LD_VAR 0 10
41681: PUSH
41682: LD_REAL  1.50000000000000E+0000
41685: MUL
41686: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
41687: LD_VAR 0 1
41691: PPUSH
41692: LD_INT 66
41694: PPUSH
41695: CALL_OW 321
41699: PUSH
41700: LD_INT 2
41702: EQUAL
41703: IFFALSE 41720
// bpoints := bpoints * 1.1 ;
41705: LD_ADDR_VAR 0 10
41709: PUSH
41710: LD_VAR 0 10
41714: PUSH
41715: LD_REAL  1.10000000000000E+0000
41718: MUL
41719: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
41720: LD_ADDR_VAR 0 10
41724: PUSH
41725: LD_VAR 0 10
41729: PUSH
41730: LD_VAR 0 6
41734: PPUSH
41735: LD_INT 1
41737: PPUSH
41738: CALL_OW 259
41742: PUSH
41743: LD_REAL  1.15000000000000E+0000
41746: MUL
41747: MUL
41748: ST_TO_ADDR
// end ; unit_vehicle :
41749: GO 42577
41751: LD_INT 2
41753: DOUBLE
41754: EQUAL
41755: IFTRUE 41759
41757: GO 42565
41759: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
41760: LD_VAR 0 6
41764: PPUSH
41765: CALL_OW 264
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 42
41775: PUSH
41776: LD_INT 24
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: LIST
41783: IN
41784: IFFALSE 41805
// points := [ 25 , 5 , 3 ] ;
41786: LD_ADDR_VAR 0 9
41790: PUSH
41791: LD_INT 25
41793: PUSH
41794: LD_INT 5
41796: PUSH
41797: LD_INT 3
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: LIST
41804: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
41805: LD_VAR 0 6
41809: PPUSH
41810: CALL_OW 264
41814: PUSH
41815: LD_INT 4
41817: PUSH
41818: LD_INT 43
41820: PUSH
41821: LD_INT 25
41823: PUSH
41824: EMPTY
41825: LIST
41826: LIST
41827: LIST
41828: IN
41829: IFFALSE 41850
// points := [ 40 , 15 , 5 ] ;
41831: LD_ADDR_VAR 0 9
41835: PUSH
41836: LD_INT 40
41838: PUSH
41839: LD_INT 15
41841: PUSH
41842: LD_INT 5
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: LIST
41849: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
41850: LD_VAR 0 6
41854: PPUSH
41855: CALL_OW 264
41859: PUSH
41860: LD_INT 3
41862: PUSH
41863: LD_INT 23
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: IN
41870: IFFALSE 41891
// points := [ 7 , 25 , 8 ] ;
41872: LD_ADDR_VAR 0 9
41876: PUSH
41877: LD_INT 7
41879: PUSH
41880: LD_INT 25
41882: PUSH
41883: LD_INT 8
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
41891: LD_VAR 0 6
41895: PPUSH
41896: CALL_OW 264
41900: PUSH
41901: LD_INT 5
41903: PUSH
41904: LD_INT 27
41906: PUSH
41907: LD_INT 44
41909: PUSH
41910: EMPTY
41911: LIST
41912: LIST
41913: LIST
41914: IN
41915: IFFALSE 41936
// points := [ 14 , 50 , 16 ] ;
41917: LD_ADDR_VAR 0 9
41921: PUSH
41922: LD_INT 14
41924: PUSH
41925: LD_INT 50
41927: PUSH
41928: LD_INT 16
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: LIST
41935: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
41936: LD_VAR 0 6
41940: PPUSH
41941: CALL_OW 264
41945: PUSH
41946: LD_INT 6
41948: PUSH
41949: LD_INT 46
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: IN
41956: IFFALSE 41977
// points := [ 32 , 120 , 70 ] ;
41958: LD_ADDR_VAR 0 9
41962: PUSH
41963: LD_INT 32
41965: PUSH
41966: LD_INT 120
41968: PUSH
41969: LD_INT 70
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: LIST
41976: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
41977: LD_VAR 0 6
41981: PPUSH
41982: CALL_OW 264
41986: PUSH
41987: LD_INT 7
41989: PUSH
41990: LD_INT 28
41992: PUSH
41993: LD_INT 45
41995: PUSH
41996: LD_INT 92
41998: PUSH
41999: EMPTY
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: IN
42005: IFFALSE 42026
// points := [ 35 , 20 , 45 ] ;
42007: LD_ADDR_VAR 0 9
42011: PUSH
42012: LD_INT 35
42014: PUSH
42015: LD_INT 20
42017: PUSH
42018: LD_INT 45
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: LIST
42025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
42026: LD_VAR 0 6
42030: PPUSH
42031: CALL_OW 264
42035: PUSH
42036: LD_INT 47
42038: PUSH
42039: EMPTY
42040: LIST
42041: IN
42042: IFFALSE 42063
// points := [ 67 , 45 , 75 ] ;
42044: LD_ADDR_VAR 0 9
42048: PUSH
42049: LD_INT 67
42051: PUSH
42052: LD_INT 45
42054: PUSH
42055: LD_INT 75
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: LIST
42062: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
42063: LD_VAR 0 6
42067: PPUSH
42068: CALL_OW 264
42072: PUSH
42073: LD_INT 26
42075: PUSH
42076: EMPTY
42077: LIST
42078: IN
42079: IFFALSE 42100
// points := [ 120 , 30 , 80 ] ;
42081: LD_ADDR_VAR 0 9
42085: PUSH
42086: LD_INT 120
42088: PUSH
42089: LD_INT 30
42091: PUSH
42092: LD_INT 80
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: LIST
42099: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
42100: LD_VAR 0 6
42104: PPUSH
42105: CALL_OW 264
42109: PUSH
42110: LD_INT 22
42112: PUSH
42113: EMPTY
42114: LIST
42115: IN
42116: IFFALSE 42137
// points := [ 40 , 1 , 1 ] ;
42118: LD_ADDR_VAR 0 9
42122: PUSH
42123: LD_INT 40
42125: PUSH
42126: LD_INT 1
42128: PUSH
42129: LD_INT 1
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: LIST
42136: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
42137: LD_VAR 0 6
42141: PPUSH
42142: CALL_OW 264
42146: PUSH
42147: LD_INT 29
42149: PUSH
42150: EMPTY
42151: LIST
42152: IN
42153: IFFALSE 42174
// points := [ 70 , 200 , 400 ] ;
42155: LD_ADDR_VAR 0 9
42159: PUSH
42160: LD_INT 70
42162: PUSH
42163: LD_INT 200
42165: PUSH
42166: LD_INT 400
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
42174: LD_VAR 0 6
42178: PPUSH
42179: CALL_OW 264
42183: PUSH
42184: LD_INT 14
42186: PUSH
42187: LD_INT 53
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: IN
42194: IFFALSE 42215
// points := [ 40 , 10 , 20 ] ;
42196: LD_ADDR_VAR 0 9
42200: PUSH
42201: LD_INT 40
42203: PUSH
42204: LD_INT 10
42206: PUSH
42207: LD_INT 20
42209: PUSH
42210: EMPTY
42211: LIST
42212: LIST
42213: LIST
42214: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
42215: LD_VAR 0 6
42219: PPUSH
42220: CALL_OW 264
42224: PUSH
42225: LD_INT 9
42227: PUSH
42228: EMPTY
42229: LIST
42230: IN
42231: IFFALSE 42252
// points := [ 5 , 70 , 20 ] ;
42233: LD_ADDR_VAR 0 9
42237: PUSH
42238: LD_INT 5
42240: PUSH
42241: LD_INT 70
42243: PUSH
42244: LD_INT 20
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: LIST
42251: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
42252: LD_VAR 0 6
42256: PPUSH
42257: CALL_OW 264
42261: PUSH
42262: LD_INT 10
42264: PUSH
42265: EMPTY
42266: LIST
42267: IN
42268: IFFALSE 42289
// points := [ 35 , 110 , 70 ] ;
42270: LD_ADDR_VAR 0 9
42274: PUSH
42275: LD_INT 35
42277: PUSH
42278: LD_INT 110
42280: PUSH
42281: LD_INT 70
42283: PUSH
42284: EMPTY
42285: LIST
42286: LIST
42287: LIST
42288: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
42289: LD_VAR 0 6
42293: PPUSH
42294: CALL_OW 265
42298: PUSH
42299: LD_INT 25
42301: EQUAL
42302: IFFALSE 42323
// points := [ 80 , 65 , 100 ] ;
42304: LD_ADDR_VAR 0 9
42308: PUSH
42309: LD_INT 80
42311: PUSH
42312: LD_INT 65
42314: PUSH
42315: LD_INT 100
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: LIST
42322: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
42323: LD_VAR 0 6
42327: PPUSH
42328: CALL_OW 263
42332: PUSH
42333: LD_INT 1
42335: EQUAL
42336: IFFALSE 42371
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
42338: LD_ADDR_VAR 0 10
42342: PUSH
42343: LD_VAR 0 10
42347: PUSH
42348: LD_VAR 0 6
42352: PPUSH
42353: CALL_OW 311
42357: PPUSH
42358: LD_INT 3
42360: PPUSH
42361: CALL_OW 259
42365: PUSH
42366: LD_INT 4
42368: MUL
42369: MUL
42370: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
42371: LD_VAR 0 6
42375: PPUSH
42376: CALL_OW 263
42380: PUSH
42381: LD_INT 2
42383: EQUAL
42384: IFFALSE 42435
// begin j := IsControledBy ( i ) ;
42386: LD_ADDR_VAR 0 7
42390: PUSH
42391: LD_VAR 0 6
42395: PPUSH
42396: CALL_OW 312
42400: ST_TO_ADDR
// if j then
42401: LD_VAR 0 7
42405: IFFALSE 42435
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
42407: LD_ADDR_VAR 0 10
42411: PUSH
42412: LD_VAR 0 10
42416: PUSH
42417: LD_VAR 0 7
42421: PPUSH
42422: LD_INT 3
42424: PPUSH
42425: CALL_OW 259
42429: PUSH
42430: LD_INT 3
42432: MUL
42433: MUL
42434: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
42435: LD_VAR 0 6
42439: PPUSH
42440: CALL_OW 264
42444: PUSH
42445: LD_INT 5
42447: PUSH
42448: LD_INT 6
42450: PUSH
42451: LD_INT 46
42453: PUSH
42454: LD_INT 44
42456: PUSH
42457: LD_INT 47
42459: PUSH
42460: LD_INT 45
42462: PUSH
42463: LD_INT 28
42465: PUSH
42466: LD_INT 7
42468: PUSH
42469: LD_INT 27
42471: PUSH
42472: LD_INT 29
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: IN
42487: PUSH
42488: LD_VAR 0 1
42492: PPUSH
42493: LD_INT 52
42495: PPUSH
42496: CALL_OW 321
42500: PUSH
42501: LD_INT 2
42503: EQUAL
42504: AND
42505: IFFALSE 42522
// bpoints := bpoints * 1.2 ;
42507: LD_ADDR_VAR 0 10
42511: PUSH
42512: LD_VAR 0 10
42516: PUSH
42517: LD_REAL  1.20000000000000E+0000
42520: MUL
42521: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
42522: LD_VAR 0 6
42526: PPUSH
42527: CALL_OW 264
42531: PUSH
42532: LD_INT 6
42534: PUSH
42535: LD_INT 46
42537: PUSH
42538: LD_INT 47
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: LIST
42545: IN
42546: IFFALSE 42563
// bpoints := bpoints * 1.2 ;
42548: LD_ADDR_VAR 0 10
42552: PUSH
42553: LD_VAR 0 10
42557: PUSH
42558: LD_REAL  1.20000000000000E+0000
42561: MUL
42562: ST_TO_ADDR
// end ; unit_building :
42563: GO 42577
42565: LD_INT 3
42567: DOUBLE
42568: EQUAL
42569: IFTRUE 42573
42571: GO 42576
42573: POP
// ; end ;
42574: GO 42577
42576: POP
// for j = 1 to 3 do
42577: LD_ADDR_VAR 0 7
42581: PUSH
42582: DOUBLE
42583: LD_INT 1
42585: DEC
42586: ST_TO_ADDR
42587: LD_INT 3
42589: PUSH
42590: FOR_TO
42591: IFFALSE 42644
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
42593: LD_ADDR_VAR 0 5
42597: PUSH
42598: LD_VAR 0 5
42602: PPUSH
42603: LD_VAR 0 7
42607: PPUSH
42608: LD_VAR 0 5
42612: PUSH
42613: LD_VAR 0 7
42617: ARRAY
42618: PUSH
42619: LD_VAR 0 9
42623: PUSH
42624: LD_VAR 0 7
42628: ARRAY
42629: PUSH
42630: LD_VAR 0 10
42634: MUL
42635: PLUS
42636: PPUSH
42637: CALL_OW 1
42641: ST_TO_ADDR
42642: GO 42590
42644: POP
42645: POP
// end ;
42646: GO 41125
42648: POP
42649: POP
// result := Replace ( result , 4 , tmp ) ;
42650: LD_ADDR_VAR 0 5
42654: PUSH
42655: LD_VAR 0 5
42659: PPUSH
42660: LD_INT 4
42662: PPUSH
42663: LD_VAR 0 8
42667: PPUSH
42668: CALL_OW 1
42672: ST_TO_ADDR
// end ;
42673: LD_VAR 0 5
42677: RET
// export function DangerAtRange ( unit , range ) ; begin
42678: LD_INT 0
42680: PPUSH
// if not unit then
42681: LD_VAR 0 1
42685: NOT
42686: IFFALSE 42690
// exit ;
42688: GO 42735
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
42690: LD_ADDR_VAR 0 3
42694: PUSH
42695: LD_VAR 0 1
42699: PPUSH
42700: CALL_OW 255
42704: PPUSH
42705: LD_VAR 0 1
42709: PPUSH
42710: CALL_OW 250
42714: PPUSH
42715: LD_VAR 0 1
42719: PPUSH
42720: CALL_OW 251
42724: PPUSH
42725: LD_VAR 0 2
42729: PPUSH
42730: CALL 40977 0 4
42734: ST_TO_ADDR
// end ;
42735: LD_VAR 0 3
42739: RET
// export function DangerInArea ( side , area ) ; begin
42740: LD_INT 0
42742: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
42743: LD_ADDR_VAR 0 3
42747: PUSH
42748: LD_VAR 0 2
42752: PPUSH
42753: LD_INT 81
42755: PUSH
42756: LD_VAR 0 1
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: PPUSH
42765: CALL_OW 70
42769: ST_TO_ADDR
// end ;
42770: LD_VAR 0 3
42774: RET
// export function IsExtension ( b ) ; begin
42775: LD_INT 0
42777: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
42778: LD_ADDR_VAR 0 2
42782: PUSH
42783: LD_VAR 0 1
42787: PUSH
42788: LD_INT 23
42790: PUSH
42791: LD_INT 20
42793: PUSH
42794: LD_INT 22
42796: PUSH
42797: LD_INT 17
42799: PUSH
42800: LD_INT 24
42802: PUSH
42803: LD_INT 21
42805: PUSH
42806: LD_INT 19
42808: PUSH
42809: LD_INT 16
42811: PUSH
42812: LD_INT 25
42814: PUSH
42815: LD_INT 18
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: IN
42830: ST_TO_ADDR
// end ;
42831: LD_VAR 0 2
42835: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
42836: LD_INT 0
42838: PPUSH
42839: PPUSH
42840: PPUSH
// result := [ ] ;
42841: LD_ADDR_VAR 0 4
42845: PUSH
42846: EMPTY
42847: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
42848: LD_ADDR_VAR 0 5
42852: PUSH
42853: LD_VAR 0 2
42857: PPUSH
42858: LD_INT 21
42860: PUSH
42861: LD_INT 3
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PPUSH
42868: CALL_OW 70
42872: ST_TO_ADDR
// if not tmp then
42873: LD_VAR 0 5
42877: NOT
42878: IFFALSE 42882
// exit ;
42880: GO 42946
// if checkLink then
42882: LD_VAR 0 3
42886: IFFALSE 42936
// begin for i in tmp do
42888: LD_ADDR_VAR 0 6
42892: PUSH
42893: LD_VAR 0 5
42897: PUSH
42898: FOR_IN
42899: IFFALSE 42934
// if GetBase ( i ) <> base then
42901: LD_VAR 0 6
42905: PPUSH
42906: CALL_OW 274
42910: PUSH
42911: LD_VAR 0 1
42915: NONEQUAL
42916: IFFALSE 42932
// ComLinkToBase ( base , i ) ;
42918: LD_VAR 0 1
42922: PPUSH
42923: LD_VAR 0 6
42927: PPUSH
42928: CALL_OW 169
42932: GO 42898
42934: POP
42935: POP
// end ; result := tmp ;
42936: LD_ADDR_VAR 0 4
42940: PUSH
42941: LD_VAR 0 5
42945: ST_TO_ADDR
// end ;
42946: LD_VAR 0 4
42950: RET
// export function ComComplete ( units , b ) ; var i ; begin
42951: LD_INT 0
42953: PPUSH
42954: PPUSH
// if not units then
42955: LD_VAR 0 1
42959: NOT
42960: IFFALSE 42964
// exit ;
42962: GO 43054
// for i in units do
42964: LD_ADDR_VAR 0 4
42968: PUSH
42969: LD_VAR 0 1
42973: PUSH
42974: FOR_IN
42975: IFFALSE 43052
// if BuildingStatus ( b ) = bs_build then
42977: LD_VAR 0 2
42981: PPUSH
42982: CALL_OW 461
42986: PUSH
42987: LD_INT 1
42989: EQUAL
42990: IFFALSE 43050
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
42992: LD_VAR 0 4
42996: PPUSH
42997: LD_STRING h
42999: PUSH
43000: LD_VAR 0 2
43004: PPUSH
43005: CALL_OW 250
43009: PUSH
43010: LD_VAR 0 2
43014: PPUSH
43015: CALL_OW 251
43019: PUSH
43020: LD_VAR 0 2
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: PUSH
43043: EMPTY
43044: LIST
43045: PPUSH
43046: CALL_OW 446
43050: GO 42974
43052: POP
43053: POP
// end ;
43054: LD_VAR 0 3
43058: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
43059: LD_INT 0
43061: PPUSH
43062: PPUSH
43063: PPUSH
43064: PPUSH
43065: PPUSH
43066: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
43067: LD_VAR 0 1
43071: NOT
43072: PUSH
43073: LD_VAR 0 1
43077: PPUSH
43078: CALL_OW 263
43082: PUSH
43083: LD_INT 2
43085: NONEQUAL
43086: OR
43087: IFFALSE 43091
// exit ;
43089: GO 43407
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
43091: LD_ADDR_VAR 0 6
43095: PUSH
43096: LD_INT 22
43098: PUSH
43099: LD_VAR 0 1
43103: PPUSH
43104: CALL_OW 255
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 2
43115: PUSH
43116: LD_INT 30
43118: PUSH
43119: LD_INT 36
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 34
43128: PUSH
43129: LD_INT 31
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PPUSH
43145: CALL_OW 69
43149: ST_TO_ADDR
// if not tmp then
43150: LD_VAR 0 6
43154: NOT
43155: IFFALSE 43159
// exit ;
43157: GO 43407
// result := [ ] ;
43159: LD_ADDR_VAR 0 2
43163: PUSH
43164: EMPTY
43165: ST_TO_ADDR
// for i in tmp do
43166: LD_ADDR_VAR 0 3
43170: PUSH
43171: LD_VAR 0 6
43175: PUSH
43176: FOR_IN
43177: IFFALSE 43248
// begin t := UnitsInside ( i ) ;
43179: LD_ADDR_VAR 0 4
43183: PUSH
43184: LD_VAR 0 3
43188: PPUSH
43189: CALL_OW 313
43193: ST_TO_ADDR
// if t then
43194: LD_VAR 0 4
43198: IFFALSE 43246
// for j in t do
43200: LD_ADDR_VAR 0 7
43204: PUSH
43205: LD_VAR 0 4
43209: PUSH
43210: FOR_IN
43211: IFFALSE 43244
// result := Replace ( result , result + 1 , j ) ;
43213: LD_ADDR_VAR 0 2
43217: PUSH
43218: LD_VAR 0 2
43222: PPUSH
43223: LD_VAR 0 2
43227: PUSH
43228: LD_INT 1
43230: PLUS
43231: PPUSH
43232: LD_VAR 0 7
43236: PPUSH
43237: CALL_OW 1
43241: ST_TO_ADDR
43242: GO 43210
43244: POP
43245: POP
// end ;
43246: GO 43176
43248: POP
43249: POP
// if not result then
43250: LD_VAR 0 2
43254: NOT
43255: IFFALSE 43259
// exit ;
43257: GO 43407
// mech := result [ 1 ] ;
43259: LD_ADDR_VAR 0 5
43263: PUSH
43264: LD_VAR 0 2
43268: PUSH
43269: LD_INT 1
43271: ARRAY
43272: ST_TO_ADDR
// if result > 1 then
43273: LD_VAR 0 2
43277: PUSH
43278: LD_INT 1
43280: GREATER
43281: IFFALSE 43393
// begin for i = 2 to result do
43283: LD_ADDR_VAR 0 3
43287: PUSH
43288: DOUBLE
43289: LD_INT 2
43291: DEC
43292: ST_TO_ADDR
43293: LD_VAR 0 2
43297: PUSH
43298: FOR_TO
43299: IFFALSE 43391
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
43301: LD_ADDR_VAR 0 4
43305: PUSH
43306: LD_VAR 0 2
43310: PUSH
43311: LD_VAR 0 3
43315: ARRAY
43316: PPUSH
43317: LD_INT 3
43319: PPUSH
43320: CALL_OW 259
43324: PUSH
43325: LD_VAR 0 2
43329: PUSH
43330: LD_VAR 0 3
43334: ARRAY
43335: PPUSH
43336: CALL_OW 432
43340: MINUS
43341: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
43342: LD_VAR 0 4
43346: PUSH
43347: LD_VAR 0 5
43351: PPUSH
43352: LD_INT 3
43354: PPUSH
43355: CALL_OW 259
43359: PUSH
43360: LD_VAR 0 5
43364: PPUSH
43365: CALL_OW 432
43369: MINUS
43370: GREATEREQUAL
43371: IFFALSE 43389
// mech := result [ i ] ;
43373: LD_ADDR_VAR 0 5
43377: PUSH
43378: LD_VAR 0 2
43382: PUSH
43383: LD_VAR 0 3
43387: ARRAY
43388: ST_TO_ADDR
// end ;
43389: GO 43298
43391: POP
43392: POP
// end ; ComLinkTo ( vehicle , mech ) ;
43393: LD_VAR 0 1
43397: PPUSH
43398: LD_VAR 0 5
43402: PPUSH
43403: CALL_OW 135
// end ;
43407: LD_VAR 0 2
43411: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
43412: LD_INT 0
43414: PPUSH
43415: PPUSH
43416: PPUSH
43417: PPUSH
43418: PPUSH
43419: PPUSH
43420: PPUSH
43421: PPUSH
43422: PPUSH
43423: PPUSH
43424: PPUSH
43425: PPUSH
43426: PPUSH
// result := [ ] ;
43427: LD_ADDR_VAR 0 7
43431: PUSH
43432: EMPTY
43433: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
43434: LD_VAR 0 1
43438: PPUSH
43439: CALL_OW 266
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 1
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: IN
43454: NOT
43455: IFFALSE 43459
// exit ;
43457: GO 45093
// if name then
43459: LD_VAR 0 3
43463: IFFALSE 43479
// SetBName ( base_dep , name ) ;
43465: LD_VAR 0 1
43469: PPUSH
43470: LD_VAR 0 3
43474: PPUSH
43475: CALL_OW 500
// base := GetBase ( base_dep ) ;
43479: LD_ADDR_VAR 0 15
43483: PUSH
43484: LD_VAR 0 1
43488: PPUSH
43489: CALL_OW 274
43493: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
43494: LD_ADDR_VAR 0 16
43498: PUSH
43499: LD_VAR 0 1
43503: PPUSH
43504: CALL_OW 255
43508: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
43509: LD_ADDR_VAR 0 17
43513: PUSH
43514: LD_VAR 0 1
43518: PPUSH
43519: CALL_OW 248
43523: ST_TO_ADDR
// if sources then
43524: LD_VAR 0 5
43528: IFFALSE 43575
// for i = 1 to 3 do
43530: LD_ADDR_VAR 0 8
43534: PUSH
43535: DOUBLE
43536: LD_INT 1
43538: DEC
43539: ST_TO_ADDR
43540: LD_INT 3
43542: PUSH
43543: FOR_TO
43544: IFFALSE 43573
// AddResourceType ( base , i , sources [ i ] ) ;
43546: LD_VAR 0 15
43550: PPUSH
43551: LD_VAR 0 8
43555: PPUSH
43556: LD_VAR 0 5
43560: PUSH
43561: LD_VAR 0 8
43565: ARRAY
43566: PPUSH
43567: CALL_OW 276
43571: GO 43543
43573: POP
43574: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
43575: LD_ADDR_VAR 0 18
43579: PUSH
43580: LD_VAR 0 15
43584: PPUSH
43585: LD_VAR 0 2
43589: PPUSH
43590: LD_INT 1
43592: PPUSH
43593: CALL 42836 0 3
43597: ST_TO_ADDR
// InitHc ;
43598: CALL_OW 19
// InitUc ;
43602: CALL_OW 18
// uc_side := side ;
43606: LD_ADDR_OWVAR 20
43610: PUSH
43611: LD_VAR 0 16
43615: ST_TO_ADDR
// uc_nation := nation ;
43616: LD_ADDR_OWVAR 21
43620: PUSH
43621: LD_VAR 0 17
43625: ST_TO_ADDR
// if buildings then
43626: LD_VAR 0 18
43630: IFFALSE 44952
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
43632: LD_ADDR_VAR 0 19
43636: PUSH
43637: LD_VAR 0 18
43641: PPUSH
43642: LD_INT 2
43644: PUSH
43645: LD_INT 30
43647: PUSH
43648: LD_INT 29
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 30
43657: PUSH
43658: LD_INT 30
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: LIST
43669: PPUSH
43670: CALL_OW 72
43674: ST_TO_ADDR
// if tmp then
43675: LD_VAR 0 19
43679: IFFALSE 43727
// for i in tmp do
43681: LD_ADDR_VAR 0 8
43685: PUSH
43686: LD_VAR 0 19
43690: PUSH
43691: FOR_IN
43692: IFFALSE 43725
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
43694: LD_VAR 0 8
43698: PPUSH
43699: CALL_OW 250
43703: PPUSH
43704: LD_VAR 0 8
43708: PPUSH
43709: CALL_OW 251
43713: PPUSH
43714: LD_VAR 0 16
43718: PPUSH
43719: CALL_OW 441
43723: GO 43691
43725: POP
43726: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
43727: LD_VAR 0 18
43731: PPUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 30
43737: PUSH
43738: LD_INT 32
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 30
43747: PUSH
43748: LD_INT 33
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: LIST
43759: PPUSH
43760: CALL_OW 72
43764: IFFALSE 43852
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
43766: LD_ADDR_VAR 0 8
43770: PUSH
43771: LD_VAR 0 18
43775: PPUSH
43776: LD_INT 2
43778: PUSH
43779: LD_INT 30
43781: PUSH
43782: LD_INT 32
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 30
43791: PUSH
43792: LD_INT 33
43794: PUSH
43795: EMPTY
43796: LIST
43797: LIST
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: LIST
43803: PPUSH
43804: CALL_OW 72
43808: PUSH
43809: FOR_IN
43810: IFFALSE 43850
// begin if not GetBWeapon ( i ) then
43812: LD_VAR 0 8
43816: PPUSH
43817: CALL_OW 269
43821: NOT
43822: IFFALSE 43848
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
43824: LD_VAR 0 8
43828: PPUSH
43829: LD_VAR 0 8
43833: PPUSH
43834: LD_VAR 0 2
43838: PPUSH
43839: CALL 45098 0 2
43843: PPUSH
43844: CALL_OW 431
// end ;
43848: GO 43809
43850: POP
43851: POP
// end ; for i = 1 to personel do
43852: LD_ADDR_VAR 0 8
43856: PUSH
43857: DOUBLE
43858: LD_INT 1
43860: DEC
43861: ST_TO_ADDR
43862: LD_VAR 0 6
43866: PUSH
43867: FOR_TO
43868: IFFALSE 44932
// begin if i > 4 then
43870: LD_VAR 0 8
43874: PUSH
43875: LD_INT 4
43877: GREATER
43878: IFFALSE 43882
// break ;
43880: GO 44932
// case i of 1 :
43882: LD_VAR 0 8
43886: PUSH
43887: LD_INT 1
43889: DOUBLE
43890: EQUAL
43891: IFTRUE 43895
43893: GO 43975
43895: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
43896: LD_ADDR_VAR 0 12
43900: PUSH
43901: LD_VAR 0 18
43905: PPUSH
43906: LD_INT 22
43908: PUSH
43909: LD_VAR 0 16
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 58
43920: PUSH
43921: EMPTY
43922: LIST
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: LD_INT 30
43929: PUSH
43930: LD_INT 32
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 30
43939: PUSH
43940: LD_INT 4
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 30
43949: PUSH
43950: LD_INT 5
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: EMPTY
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: LIST
43967: PPUSH
43968: CALL_OW 72
43972: ST_TO_ADDR
43973: GO 44197
43975: LD_INT 2
43977: DOUBLE
43978: EQUAL
43979: IFTRUE 43983
43981: GO 44045
43983: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
43984: LD_ADDR_VAR 0 12
43988: PUSH
43989: LD_VAR 0 18
43993: PPUSH
43994: LD_INT 22
43996: PUSH
43997: LD_VAR 0 16
44001: PUSH
44002: EMPTY
44003: LIST
44004: LIST
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: LD_INT 30
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: EMPTY
44016: LIST
44017: LIST
44018: PUSH
44019: LD_INT 30
44021: PUSH
44022: LD_INT 1
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: LIST
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PPUSH
44038: CALL_OW 72
44042: ST_TO_ADDR
44043: GO 44197
44045: LD_INT 3
44047: DOUBLE
44048: EQUAL
44049: IFTRUE 44053
44051: GO 44115
44053: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
44054: LD_ADDR_VAR 0 12
44058: PUSH
44059: LD_VAR 0 18
44063: PPUSH
44064: LD_INT 22
44066: PUSH
44067: LD_VAR 0 16
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 2
44078: PUSH
44079: LD_INT 30
44081: PUSH
44082: LD_INT 2
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 30
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: EMPTY
44096: LIST
44097: LIST
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PPUSH
44108: CALL_OW 72
44112: ST_TO_ADDR
44113: GO 44197
44115: LD_INT 4
44117: DOUBLE
44118: EQUAL
44119: IFTRUE 44123
44121: GO 44196
44123: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
44124: LD_ADDR_VAR 0 12
44128: PUSH
44129: LD_VAR 0 18
44133: PPUSH
44134: LD_INT 22
44136: PUSH
44137: LD_VAR 0 16
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 2
44148: PUSH
44149: LD_INT 30
44151: PUSH
44152: LD_INT 6
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 30
44161: PUSH
44162: LD_INT 7
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 30
44171: PUSH
44172: LD_INT 8
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PPUSH
44189: CALL_OW 72
44193: ST_TO_ADDR
44194: GO 44197
44196: POP
// if i = 1 then
44197: LD_VAR 0 8
44201: PUSH
44202: LD_INT 1
44204: EQUAL
44205: IFFALSE 44316
// begin tmp := [ ] ;
44207: LD_ADDR_VAR 0 19
44211: PUSH
44212: EMPTY
44213: ST_TO_ADDR
// for j in f do
44214: LD_ADDR_VAR 0 9
44218: PUSH
44219: LD_VAR 0 12
44223: PUSH
44224: FOR_IN
44225: IFFALSE 44298
// if GetBType ( j ) = b_bunker then
44227: LD_VAR 0 9
44231: PPUSH
44232: CALL_OW 266
44236: PUSH
44237: LD_INT 32
44239: EQUAL
44240: IFFALSE 44267
// tmp := Insert ( tmp , 1 , j ) else
44242: LD_ADDR_VAR 0 19
44246: PUSH
44247: LD_VAR 0 19
44251: PPUSH
44252: LD_INT 1
44254: PPUSH
44255: LD_VAR 0 9
44259: PPUSH
44260: CALL_OW 2
44264: ST_TO_ADDR
44265: GO 44296
// tmp := Insert ( tmp , tmp + 1 , j ) ;
44267: LD_ADDR_VAR 0 19
44271: PUSH
44272: LD_VAR 0 19
44276: PPUSH
44277: LD_VAR 0 19
44281: PUSH
44282: LD_INT 1
44284: PLUS
44285: PPUSH
44286: LD_VAR 0 9
44290: PPUSH
44291: CALL_OW 2
44295: ST_TO_ADDR
44296: GO 44224
44298: POP
44299: POP
// if tmp then
44300: LD_VAR 0 19
44304: IFFALSE 44316
// f := tmp ;
44306: LD_ADDR_VAR 0 12
44310: PUSH
44311: LD_VAR 0 19
44315: ST_TO_ADDR
// end ; x := personel [ i ] ;
44316: LD_ADDR_VAR 0 13
44320: PUSH
44321: LD_VAR 0 6
44325: PUSH
44326: LD_VAR 0 8
44330: ARRAY
44331: ST_TO_ADDR
// if x = - 1 then
44332: LD_VAR 0 13
44336: PUSH
44337: LD_INT 1
44339: NEG
44340: EQUAL
44341: IFFALSE 44550
// begin for j in f do
44343: LD_ADDR_VAR 0 9
44347: PUSH
44348: LD_VAR 0 12
44352: PUSH
44353: FOR_IN
44354: IFFALSE 44546
// repeat InitHc ;
44356: CALL_OW 19
// if GetBType ( j ) = b_barracks then
44360: LD_VAR 0 9
44364: PPUSH
44365: CALL_OW 266
44369: PUSH
44370: LD_INT 5
44372: EQUAL
44373: IFFALSE 44443
// begin if UnitsInside ( j ) < 3 then
44375: LD_VAR 0 9
44379: PPUSH
44380: CALL_OW 313
44384: PUSH
44385: LD_INT 3
44387: LESS
44388: IFFALSE 44424
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44390: LD_INT 0
44392: PPUSH
44393: LD_INT 5
44395: PUSH
44396: LD_INT 8
44398: PUSH
44399: LD_INT 9
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: LIST
44406: PUSH
44407: LD_VAR 0 17
44411: ARRAY
44412: PPUSH
44413: LD_VAR 0 4
44417: PPUSH
44418: CALL_OW 380
44422: GO 44441
// PrepareHuman ( false , i , skill ) ;
44424: LD_INT 0
44426: PPUSH
44427: LD_VAR 0 8
44431: PPUSH
44432: LD_VAR 0 4
44436: PPUSH
44437: CALL_OW 380
// end else
44441: GO 44460
// PrepareHuman ( false , i , skill ) ;
44443: LD_INT 0
44445: PPUSH
44446: LD_VAR 0 8
44450: PPUSH
44451: LD_VAR 0 4
44455: PPUSH
44456: CALL_OW 380
// un := CreateHuman ;
44460: LD_ADDR_VAR 0 14
44464: PUSH
44465: CALL_OW 44
44469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44470: LD_ADDR_VAR 0 7
44474: PUSH
44475: LD_VAR 0 7
44479: PPUSH
44480: LD_INT 1
44482: PPUSH
44483: LD_VAR 0 14
44487: PPUSH
44488: CALL_OW 2
44492: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
44493: LD_VAR 0 14
44497: PPUSH
44498: LD_VAR 0 9
44502: PPUSH
44503: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
44507: LD_VAR 0 9
44511: PPUSH
44512: CALL_OW 313
44516: PUSH
44517: LD_INT 6
44519: EQUAL
44520: PUSH
44521: LD_VAR 0 9
44525: PPUSH
44526: CALL_OW 266
44530: PUSH
44531: LD_INT 32
44533: PUSH
44534: LD_INT 31
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: IN
44541: OR
44542: IFFALSE 44356
44544: GO 44353
44546: POP
44547: POP
// end else
44548: GO 44930
// for j = 1 to x do
44550: LD_ADDR_VAR 0 9
44554: PUSH
44555: DOUBLE
44556: LD_INT 1
44558: DEC
44559: ST_TO_ADDR
44560: LD_VAR 0 13
44564: PUSH
44565: FOR_TO
44566: IFFALSE 44928
// begin InitHc ;
44568: CALL_OW 19
// if not f then
44572: LD_VAR 0 12
44576: NOT
44577: IFFALSE 44666
// begin PrepareHuman ( false , i , skill ) ;
44579: LD_INT 0
44581: PPUSH
44582: LD_VAR 0 8
44586: PPUSH
44587: LD_VAR 0 4
44591: PPUSH
44592: CALL_OW 380
// un := CreateHuman ;
44596: LD_ADDR_VAR 0 14
44600: PUSH
44601: CALL_OW 44
44605: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44606: LD_ADDR_VAR 0 7
44610: PUSH
44611: LD_VAR 0 7
44615: PPUSH
44616: LD_INT 1
44618: PPUSH
44619: LD_VAR 0 14
44623: PPUSH
44624: CALL_OW 2
44628: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
44629: LD_VAR 0 14
44633: PPUSH
44634: LD_VAR 0 1
44638: PPUSH
44639: CALL_OW 250
44643: PPUSH
44644: LD_VAR 0 1
44648: PPUSH
44649: CALL_OW 251
44653: PPUSH
44654: LD_INT 10
44656: PPUSH
44657: LD_INT 0
44659: PPUSH
44660: CALL_OW 50
// continue ;
44664: GO 44565
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
44666: LD_VAR 0 12
44670: PUSH
44671: LD_INT 1
44673: ARRAY
44674: PPUSH
44675: CALL_OW 313
44679: PUSH
44680: LD_VAR 0 12
44684: PUSH
44685: LD_INT 1
44687: ARRAY
44688: PPUSH
44689: CALL_OW 266
44693: PUSH
44694: LD_INT 32
44696: PUSH
44697: LD_INT 31
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: IN
44704: AND
44705: PUSH
44706: LD_VAR 0 12
44710: PUSH
44711: LD_INT 1
44713: ARRAY
44714: PPUSH
44715: CALL_OW 313
44719: PUSH
44720: LD_INT 6
44722: EQUAL
44723: OR
44724: IFFALSE 44744
// f := Delete ( f , 1 ) ;
44726: LD_ADDR_VAR 0 12
44730: PUSH
44731: LD_VAR 0 12
44735: PPUSH
44736: LD_INT 1
44738: PPUSH
44739: CALL_OW 3
44743: ST_TO_ADDR
// if not f then
44744: LD_VAR 0 12
44748: NOT
44749: IFFALSE 44767
// begin x := x + 2 ;
44751: LD_ADDR_VAR 0 13
44755: PUSH
44756: LD_VAR 0 13
44760: PUSH
44761: LD_INT 2
44763: PLUS
44764: ST_TO_ADDR
// continue ;
44765: GO 44565
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
44767: LD_VAR 0 12
44771: PUSH
44772: LD_INT 1
44774: ARRAY
44775: PPUSH
44776: CALL_OW 266
44780: PUSH
44781: LD_INT 5
44783: EQUAL
44784: IFFALSE 44858
// begin if UnitsInside ( f [ 1 ] ) < 3 then
44786: LD_VAR 0 12
44790: PUSH
44791: LD_INT 1
44793: ARRAY
44794: PPUSH
44795: CALL_OW 313
44799: PUSH
44800: LD_INT 3
44802: LESS
44803: IFFALSE 44839
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
44805: LD_INT 0
44807: PPUSH
44808: LD_INT 5
44810: PUSH
44811: LD_INT 8
44813: PUSH
44814: LD_INT 9
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: LIST
44821: PUSH
44822: LD_VAR 0 17
44826: ARRAY
44827: PPUSH
44828: LD_VAR 0 4
44832: PPUSH
44833: CALL_OW 380
44837: GO 44856
// PrepareHuman ( false , i , skill ) ;
44839: LD_INT 0
44841: PPUSH
44842: LD_VAR 0 8
44846: PPUSH
44847: LD_VAR 0 4
44851: PPUSH
44852: CALL_OW 380
// end else
44856: GO 44875
// PrepareHuman ( false , i , skill ) ;
44858: LD_INT 0
44860: PPUSH
44861: LD_VAR 0 8
44865: PPUSH
44866: LD_VAR 0 4
44870: PPUSH
44871: CALL_OW 380
// un := CreateHuman ;
44875: LD_ADDR_VAR 0 14
44879: PUSH
44880: CALL_OW 44
44884: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
44885: LD_ADDR_VAR 0 7
44889: PUSH
44890: LD_VAR 0 7
44894: PPUSH
44895: LD_INT 1
44897: PPUSH
44898: LD_VAR 0 14
44902: PPUSH
44903: CALL_OW 2
44907: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
44908: LD_VAR 0 14
44912: PPUSH
44913: LD_VAR 0 12
44917: PUSH
44918: LD_INT 1
44920: ARRAY
44921: PPUSH
44922: CALL_OW 52
// end ;
44926: GO 44565
44928: POP
44929: POP
// end ;
44930: GO 43867
44932: POP
44933: POP
// result := result ^ buildings ;
44934: LD_ADDR_VAR 0 7
44938: PUSH
44939: LD_VAR 0 7
44943: PUSH
44944: LD_VAR 0 18
44948: ADD
44949: ST_TO_ADDR
// end else
44950: GO 45093
// begin for i = 1 to personel do
44952: LD_ADDR_VAR 0 8
44956: PUSH
44957: DOUBLE
44958: LD_INT 1
44960: DEC
44961: ST_TO_ADDR
44962: LD_VAR 0 6
44966: PUSH
44967: FOR_TO
44968: IFFALSE 45091
// begin if i > 4 then
44970: LD_VAR 0 8
44974: PUSH
44975: LD_INT 4
44977: GREATER
44978: IFFALSE 44982
// break ;
44980: GO 45091
// x := personel [ i ] ;
44982: LD_ADDR_VAR 0 13
44986: PUSH
44987: LD_VAR 0 6
44991: PUSH
44992: LD_VAR 0 8
44996: ARRAY
44997: ST_TO_ADDR
// if x = - 1 then
44998: LD_VAR 0 13
45002: PUSH
45003: LD_INT 1
45005: NEG
45006: EQUAL
45007: IFFALSE 45011
// continue ;
45009: GO 44967
// PrepareHuman ( false , i , skill ) ;
45011: LD_INT 0
45013: PPUSH
45014: LD_VAR 0 8
45018: PPUSH
45019: LD_VAR 0 4
45023: PPUSH
45024: CALL_OW 380
// un := CreateHuman ;
45028: LD_ADDR_VAR 0 14
45032: PUSH
45033: CALL_OW 44
45037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
45038: LD_VAR 0 14
45042: PPUSH
45043: LD_VAR 0 1
45047: PPUSH
45048: CALL_OW 250
45052: PPUSH
45053: LD_VAR 0 1
45057: PPUSH
45058: CALL_OW 251
45062: PPUSH
45063: LD_INT 10
45065: PPUSH
45066: LD_INT 0
45068: PPUSH
45069: CALL_OW 50
// result := result ^ un ;
45073: LD_ADDR_VAR 0 7
45077: PUSH
45078: LD_VAR 0 7
45082: PUSH
45083: LD_VAR 0 14
45087: ADD
45088: ST_TO_ADDR
// end ;
45089: GO 44967
45091: POP
45092: POP
// end ; end ;
45093: LD_VAR 0 7
45097: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
45098: LD_INT 0
45100: PPUSH
45101: PPUSH
45102: PPUSH
45103: PPUSH
45104: PPUSH
45105: PPUSH
45106: PPUSH
45107: PPUSH
45108: PPUSH
45109: PPUSH
45110: PPUSH
45111: PPUSH
45112: PPUSH
45113: PPUSH
45114: PPUSH
45115: PPUSH
// result := false ;
45116: LD_ADDR_VAR 0 3
45120: PUSH
45121: LD_INT 0
45123: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
45124: LD_VAR 0 1
45128: NOT
45129: PUSH
45130: LD_VAR 0 1
45134: PPUSH
45135: CALL_OW 266
45139: PUSH
45140: LD_INT 32
45142: PUSH
45143: LD_INT 33
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: IN
45150: NOT
45151: OR
45152: IFFALSE 45156
// exit ;
45154: GO 46265
// nat := GetNation ( tower ) ;
45156: LD_ADDR_VAR 0 12
45160: PUSH
45161: LD_VAR 0 1
45165: PPUSH
45166: CALL_OW 248
45170: ST_TO_ADDR
// side := GetSide ( tower ) ;
45171: LD_ADDR_VAR 0 16
45175: PUSH
45176: LD_VAR 0 1
45180: PPUSH
45181: CALL_OW 255
45185: ST_TO_ADDR
// x := GetX ( tower ) ;
45186: LD_ADDR_VAR 0 10
45190: PUSH
45191: LD_VAR 0 1
45195: PPUSH
45196: CALL_OW 250
45200: ST_TO_ADDR
// y := GetY ( tower ) ;
45201: LD_ADDR_VAR 0 11
45205: PUSH
45206: LD_VAR 0 1
45210: PPUSH
45211: CALL_OW 251
45215: ST_TO_ADDR
// if not x or not y then
45216: LD_VAR 0 10
45220: NOT
45221: PUSH
45222: LD_VAR 0 11
45226: NOT
45227: OR
45228: IFFALSE 45232
// exit ;
45230: GO 46265
// weapon := 0 ;
45232: LD_ADDR_VAR 0 18
45236: PUSH
45237: LD_INT 0
45239: ST_TO_ADDR
// fac_list := [ ] ;
45240: LD_ADDR_VAR 0 17
45244: PUSH
45245: EMPTY
45246: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
45247: LD_ADDR_VAR 0 6
45251: PUSH
45252: LD_VAR 0 1
45256: PPUSH
45257: CALL_OW 274
45261: PPUSH
45262: LD_VAR 0 2
45266: PPUSH
45267: LD_INT 0
45269: PPUSH
45270: CALL 42836 0 3
45274: PPUSH
45275: LD_INT 30
45277: PUSH
45278: LD_INT 3
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PPUSH
45285: CALL_OW 72
45289: ST_TO_ADDR
// if not factories then
45290: LD_VAR 0 6
45294: NOT
45295: IFFALSE 45299
// exit ;
45297: GO 46265
// for i in factories do
45299: LD_ADDR_VAR 0 8
45303: PUSH
45304: LD_VAR 0 6
45308: PUSH
45309: FOR_IN
45310: IFFALSE 45335
// fac_list := fac_list union AvailableWeaponList ( i ) ;
45312: LD_ADDR_VAR 0 17
45316: PUSH
45317: LD_VAR 0 17
45321: PUSH
45322: LD_VAR 0 8
45326: PPUSH
45327: CALL_OW 478
45331: UNION
45332: ST_TO_ADDR
45333: GO 45309
45335: POP
45336: POP
// if not fac_list then
45337: LD_VAR 0 17
45341: NOT
45342: IFFALSE 45346
// exit ;
45344: GO 46265
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
45346: LD_ADDR_VAR 0 5
45350: PUSH
45351: LD_INT 4
45353: PUSH
45354: LD_INT 5
45356: PUSH
45357: LD_INT 9
45359: PUSH
45360: LD_INT 10
45362: PUSH
45363: LD_INT 6
45365: PUSH
45366: LD_INT 7
45368: PUSH
45369: LD_INT 11
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 27
45383: PUSH
45384: LD_INT 28
45386: PUSH
45387: LD_INT 26
45389: PUSH
45390: LD_INT 30
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 43
45401: PUSH
45402: LD_INT 44
45404: PUSH
45405: LD_INT 46
45407: PUSH
45408: LD_INT 45
45410: PUSH
45411: LD_INT 47
45413: PUSH
45414: LD_INT 49
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: LIST
45429: PUSH
45430: LD_VAR 0 12
45434: ARRAY
45435: ST_TO_ADDR
// list := list isect fac_list ;
45436: LD_ADDR_VAR 0 5
45440: PUSH
45441: LD_VAR 0 5
45445: PUSH
45446: LD_VAR 0 17
45450: ISECT
45451: ST_TO_ADDR
// if not list then
45452: LD_VAR 0 5
45456: NOT
45457: IFFALSE 45461
// exit ;
45459: GO 46265
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
45461: LD_VAR 0 12
45465: PUSH
45466: LD_INT 3
45468: EQUAL
45469: PUSH
45470: LD_INT 49
45472: PUSH
45473: LD_VAR 0 5
45477: IN
45478: AND
45479: PUSH
45480: LD_INT 31
45482: PPUSH
45483: LD_VAR 0 16
45487: PPUSH
45488: CALL_OW 321
45492: PUSH
45493: LD_INT 2
45495: EQUAL
45496: AND
45497: IFFALSE 45557
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
45499: LD_INT 22
45501: PUSH
45502: LD_VAR 0 16
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 35
45513: PUSH
45514: LD_INT 49
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 91
45523: PUSH
45524: LD_VAR 0 1
45528: PUSH
45529: LD_INT 10
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: LIST
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: LIST
45541: PPUSH
45542: CALL_OW 69
45546: NOT
45547: IFFALSE 45557
// weapon := ru_time_lapser ;
45549: LD_ADDR_VAR 0 18
45553: PUSH
45554: LD_INT 49
45556: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
45557: LD_VAR 0 12
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: LD_INT 2
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: IN
45572: PUSH
45573: LD_INT 11
45575: PUSH
45576: LD_VAR 0 5
45580: IN
45581: PUSH
45582: LD_INT 30
45584: PUSH
45585: LD_VAR 0 5
45589: IN
45590: OR
45591: AND
45592: PUSH
45593: LD_INT 6
45595: PPUSH
45596: LD_VAR 0 16
45600: PPUSH
45601: CALL_OW 321
45605: PUSH
45606: LD_INT 2
45608: EQUAL
45609: AND
45610: IFFALSE 45775
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
45612: LD_INT 22
45614: PUSH
45615: LD_VAR 0 16
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PUSH
45624: LD_INT 2
45626: PUSH
45627: LD_INT 35
45629: PUSH
45630: LD_INT 11
45632: PUSH
45633: EMPTY
45634: LIST
45635: LIST
45636: PUSH
45637: LD_INT 35
45639: PUSH
45640: LD_INT 30
45642: PUSH
45643: EMPTY
45644: LIST
45645: LIST
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: LIST
45651: PUSH
45652: LD_INT 91
45654: PUSH
45655: LD_VAR 0 1
45659: PUSH
45660: LD_INT 18
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: LIST
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: PPUSH
45673: CALL_OW 69
45677: NOT
45678: PUSH
45679: LD_INT 22
45681: PUSH
45682: LD_VAR 0 16
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 30
45696: PUSH
45697: LD_INT 32
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 30
45706: PUSH
45707: LD_INT 33
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 91
45721: PUSH
45722: LD_VAR 0 1
45726: PUSH
45727: LD_INT 12
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: LIST
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: LIST
45739: PUSH
45740: EMPTY
45741: LIST
45742: PPUSH
45743: CALL_OW 69
45747: PUSH
45748: LD_INT 2
45750: GREATER
45751: AND
45752: IFFALSE 45775
// weapon := [ us_radar , ar_radar ] [ nat ] ;
45754: LD_ADDR_VAR 0 18
45758: PUSH
45759: LD_INT 11
45761: PUSH
45762: LD_INT 30
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_VAR 0 12
45773: ARRAY
45774: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
45775: LD_VAR 0 18
45779: NOT
45780: PUSH
45781: LD_INT 40
45783: PPUSH
45784: LD_VAR 0 16
45788: PPUSH
45789: CALL_OW 321
45793: PUSH
45794: LD_INT 2
45796: EQUAL
45797: AND
45798: PUSH
45799: LD_INT 7
45801: PUSH
45802: LD_VAR 0 5
45806: IN
45807: PUSH
45808: LD_INT 28
45810: PUSH
45811: LD_VAR 0 5
45815: IN
45816: OR
45817: PUSH
45818: LD_INT 45
45820: PUSH
45821: LD_VAR 0 5
45825: IN
45826: OR
45827: AND
45828: IFFALSE 46082
// begin hex := GetHexInfo ( x , y ) ;
45830: LD_ADDR_VAR 0 4
45834: PUSH
45835: LD_VAR 0 10
45839: PPUSH
45840: LD_VAR 0 11
45844: PPUSH
45845: CALL_OW 546
45849: ST_TO_ADDR
// if hex [ 1 ] then
45850: LD_VAR 0 4
45854: PUSH
45855: LD_INT 1
45857: ARRAY
45858: IFFALSE 45862
// exit ;
45860: GO 46265
// height := hex [ 2 ] ;
45862: LD_ADDR_VAR 0 15
45866: PUSH
45867: LD_VAR 0 4
45871: PUSH
45872: LD_INT 2
45874: ARRAY
45875: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
45876: LD_ADDR_VAR 0 14
45880: PUSH
45881: LD_INT 0
45883: PUSH
45884: LD_INT 2
45886: PUSH
45887: LD_INT 3
45889: PUSH
45890: LD_INT 5
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: LIST
45897: LIST
45898: ST_TO_ADDR
// for i in tmp do
45899: LD_ADDR_VAR 0 8
45903: PUSH
45904: LD_VAR 0 14
45908: PUSH
45909: FOR_IN
45910: IFFALSE 46080
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
45912: LD_ADDR_VAR 0 9
45916: PUSH
45917: LD_VAR 0 10
45921: PPUSH
45922: LD_VAR 0 8
45926: PPUSH
45927: LD_INT 5
45929: PPUSH
45930: CALL_OW 272
45934: PUSH
45935: LD_VAR 0 11
45939: PPUSH
45940: LD_VAR 0 8
45944: PPUSH
45945: LD_INT 5
45947: PPUSH
45948: CALL_OW 273
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
45957: LD_VAR 0 9
45961: PUSH
45962: LD_INT 1
45964: ARRAY
45965: PPUSH
45966: LD_VAR 0 9
45970: PUSH
45971: LD_INT 2
45973: ARRAY
45974: PPUSH
45975: CALL_OW 488
45979: IFFALSE 46078
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
45981: LD_ADDR_VAR 0 4
45985: PUSH
45986: LD_VAR 0 9
45990: PUSH
45991: LD_INT 1
45993: ARRAY
45994: PPUSH
45995: LD_VAR 0 9
45999: PUSH
46000: LD_INT 2
46002: ARRAY
46003: PPUSH
46004: CALL_OW 546
46008: ST_TO_ADDR
// if hex [ 1 ] then
46009: LD_VAR 0 4
46013: PUSH
46014: LD_INT 1
46016: ARRAY
46017: IFFALSE 46021
// continue ;
46019: GO 45909
// h := hex [ 2 ] ;
46021: LD_ADDR_VAR 0 13
46025: PUSH
46026: LD_VAR 0 4
46030: PUSH
46031: LD_INT 2
46033: ARRAY
46034: ST_TO_ADDR
// if h + 7 < height then
46035: LD_VAR 0 13
46039: PUSH
46040: LD_INT 7
46042: PLUS
46043: PUSH
46044: LD_VAR 0 15
46048: LESS
46049: IFFALSE 46078
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
46051: LD_ADDR_VAR 0 18
46055: PUSH
46056: LD_INT 7
46058: PUSH
46059: LD_INT 28
46061: PUSH
46062: LD_INT 45
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: LIST
46069: PUSH
46070: LD_VAR 0 12
46074: ARRAY
46075: ST_TO_ADDR
// break ;
46076: GO 46080
// end ; end ; end ;
46078: GO 45909
46080: POP
46081: POP
// end ; if not weapon then
46082: LD_VAR 0 18
46086: NOT
46087: IFFALSE 46147
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
46089: LD_ADDR_VAR 0 5
46093: PUSH
46094: LD_VAR 0 5
46098: PUSH
46099: LD_INT 11
46101: PUSH
46102: LD_INT 30
46104: PUSH
46105: LD_INT 49
46107: PUSH
46108: EMPTY
46109: LIST
46110: LIST
46111: LIST
46112: DIFF
46113: ST_TO_ADDR
// if not list then
46114: LD_VAR 0 5
46118: NOT
46119: IFFALSE 46123
// exit ;
46121: GO 46265
// weapon := list [ rand ( 1 , list ) ] ;
46123: LD_ADDR_VAR 0 18
46127: PUSH
46128: LD_VAR 0 5
46132: PUSH
46133: LD_INT 1
46135: PPUSH
46136: LD_VAR 0 5
46140: PPUSH
46141: CALL_OW 12
46145: ARRAY
46146: ST_TO_ADDR
// end ; if weapon then
46147: LD_VAR 0 18
46151: IFFALSE 46265
// begin tmp := CostOfWeapon ( weapon ) ;
46153: LD_ADDR_VAR 0 14
46157: PUSH
46158: LD_VAR 0 18
46162: PPUSH
46163: CALL_OW 451
46167: ST_TO_ADDR
// j := GetBase ( tower ) ;
46168: LD_ADDR_VAR 0 9
46172: PUSH
46173: LD_VAR 0 1
46177: PPUSH
46178: CALL_OW 274
46182: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
46183: LD_VAR 0 9
46187: PPUSH
46188: LD_INT 1
46190: PPUSH
46191: CALL_OW 275
46195: PUSH
46196: LD_VAR 0 14
46200: PUSH
46201: LD_INT 1
46203: ARRAY
46204: GREATEREQUAL
46205: PUSH
46206: LD_VAR 0 9
46210: PPUSH
46211: LD_INT 2
46213: PPUSH
46214: CALL_OW 275
46218: PUSH
46219: LD_VAR 0 14
46223: PUSH
46224: LD_INT 2
46226: ARRAY
46227: GREATEREQUAL
46228: AND
46229: PUSH
46230: LD_VAR 0 9
46234: PPUSH
46235: LD_INT 3
46237: PPUSH
46238: CALL_OW 275
46242: PUSH
46243: LD_VAR 0 14
46247: PUSH
46248: LD_INT 3
46250: ARRAY
46251: GREATEREQUAL
46252: AND
46253: IFFALSE 46265
// result := weapon ;
46255: LD_ADDR_VAR 0 3
46259: PUSH
46260: LD_VAR 0 18
46264: ST_TO_ADDR
// end ; end ;
46265: LD_VAR 0 3
46269: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
46270: LD_INT 0
46272: PPUSH
46273: PPUSH
// result := true ;
46274: LD_ADDR_VAR 0 3
46278: PUSH
46279: LD_INT 1
46281: ST_TO_ADDR
// if array1 = array2 then
46282: LD_VAR 0 1
46286: PUSH
46287: LD_VAR 0 2
46291: EQUAL
46292: IFFALSE 46352
// begin for i = 1 to array1 do
46294: LD_ADDR_VAR 0 4
46298: PUSH
46299: DOUBLE
46300: LD_INT 1
46302: DEC
46303: ST_TO_ADDR
46304: LD_VAR 0 1
46308: PUSH
46309: FOR_TO
46310: IFFALSE 46348
// if array1 [ i ] <> array2 [ i ] then
46312: LD_VAR 0 1
46316: PUSH
46317: LD_VAR 0 4
46321: ARRAY
46322: PUSH
46323: LD_VAR 0 2
46327: PUSH
46328: LD_VAR 0 4
46332: ARRAY
46333: NONEQUAL
46334: IFFALSE 46346
// begin result := false ;
46336: LD_ADDR_VAR 0 3
46340: PUSH
46341: LD_INT 0
46343: ST_TO_ADDR
// break ;
46344: GO 46348
// end ;
46346: GO 46309
46348: POP
46349: POP
// end else
46350: GO 46360
// result := false ;
46352: LD_ADDR_VAR 0 3
46356: PUSH
46357: LD_INT 0
46359: ST_TO_ADDR
// end ;
46360: LD_VAR 0 3
46364: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
46365: LD_INT 0
46367: PPUSH
46368: PPUSH
// if not array1 or not array2 then
46369: LD_VAR 0 1
46373: NOT
46374: PUSH
46375: LD_VAR 0 2
46379: NOT
46380: OR
46381: IFFALSE 46385
// exit ;
46383: GO 46449
// result := true ;
46385: LD_ADDR_VAR 0 3
46389: PUSH
46390: LD_INT 1
46392: ST_TO_ADDR
// for i = 1 to array1 do
46393: LD_ADDR_VAR 0 4
46397: PUSH
46398: DOUBLE
46399: LD_INT 1
46401: DEC
46402: ST_TO_ADDR
46403: LD_VAR 0 1
46407: PUSH
46408: FOR_TO
46409: IFFALSE 46447
// if array1 [ i ] <> array2 [ i ] then
46411: LD_VAR 0 1
46415: PUSH
46416: LD_VAR 0 4
46420: ARRAY
46421: PUSH
46422: LD_VAR 0 2
46426: PUSH
46427: LD_VAR 0 4
46431: ARRAY
46432: NONEQUAL
46433: IFFALSE 46445
// begin result := false ;
46435: LD_ADDR_VAR 0 3
46439: PUSH
46440: LD_INT 0
46442: ST_TO_ADDR
// break ;
46443: GO 46447
// end ;
46445: GO 46408
46447: POP
46448: POP
// end ;
46449: LD_VAR 0 3
46453: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
46454: LD_INT 0
46456: PPUSH
46457: PPUSH
46458: PPUSH
// pom := GetBase ( fac ) ;
46459: LD_ADDR_VAR 0 5
46463: PUSH
46464: LD_VAR 0 1
46468: PPUSH
46469: CALL_OW 274
46473: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
46474: LD_ADDR_VAR 0 4
46478: PUSH
46479: LD_VAR 0 2
46483: PUSH
46484: LD_INT 1
46486: ARRAY
46487: PPUSH
46488: LD_VAR 0 2
46492: PUSH
46493: LD_INT 2
46495: ARRAY
46496: PPUSH
46497: LD_VAR 0 2
46501: PUSH
46502: LD_INT 3
46504: ARRAY
46505: PPUSH
46506: LD_VAR 0 2
46510: PUSH
46511: LD_INT 4
46513: ARRAY
46514: PPUSH
46515: CALL_OW 449
46519: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46520: LD_ADDR_VAR 0 3
46524: PUSH
46525: LD_VAR 0 5
46529: PPUSH
46530: LD_INT 1
46532: PPUSH
46533: CALL_OW 275
46537: PUSH
46538: LD_VAR 0 4
46542: PUSH
46543: LD_INT 1
46545: ARRAY
46546: GREATEREQUAL
46547: PUSH
46548: LD_VAR 0 5
46552: PPUSH
46553: LD_INT 2
46555: PPUSH
46556: CALL_OW 275
46560: PUSH
46561: LD_VAR 0 4
46565: PUSH
46566: LD_INT 2
46568: ARRAY
46569: GREATEREQUAL
46570: AND
46571: PUSH
46572: LD_VAR 0 5
46576: PPUSH
46577: LD_INT 3
46579: PPUSH
46580: CALL_OW 275
46584: PUSH
46585: LD_VAR 0 4
46589: PUSH
46590: LD_INT 3
46592: ARRAY
46593: GREATEREQUAL
46594: AND
46595: ST_TO_ADDR
// end ;
46596: LD_VAR 0 3
46600: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
46601: LD_INT 0
46603: PPUSH
46604: PPUSH
46605: PPUSH
46606: PPUSH
// pom := GetBase ( building ) ;
46607: LD_ADDR_VAR 0 3
46611: PUSH
46612: LD_VAR 0 1
46616: PPUSH
46617: CALL_OW 274
46621: ST_TO_ADDR
// if not pom then
46622: LD_VAR 0 3
46626: NOT
46627: IFFALSE 46631
// exit ;
46629: GO 46801
// btype := GetBType ( building ) ;
46631: LD_ADDR_VAR 0 5
46635: PUSH
46636: LD_VAR 0 1
46640: PPUSH
46641: CALL_OW 266
46645: ST_TO_ADDR
// if btype = b_armoury then
46646: LD_VAR 0 5
46650: PUSH
46651: LD_INT 4
46653: EQUAL
46654: IFFALSE 46664
// btype := b_barracks ;
46656: LD_ADDR_VAR 0 5
46660: PUSH
46661: LD_INT 5
46663: ST_TO_ADDR
// if btype = b_depot then
46664: LD_VAR 0 5
46668: PUSH
46669: LD_INT 0
46671: EQUAL
46672: IFFALSE 46682
// btype := b_warehouse ;
46674: LD_ADDR_VAR 0 5
46678: PUSH
46679: LD_INT 1
46681: ST_TO_ADDR
// if btype = b_workshop then
46682: LD_VAR 0 5
46686: PUSH
46687: LD_INT 2
46689: EQUAL
46690: IFFALSE 46700
// btype := b_factory ;
46692: LD_ADDR_VAR 0 5
46696: PUSH
46697: LD_INT 3
46699: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46700: LD_ADDR_VAR 0 4
46704: PUSH
46705: LD_VAR 0 5
46709: PPUSH
46710: LD_VAR 0 1
46714: PPUSH
46715: CALL_OW 248
46719: PPUSH
46720: CALL_OW 450
46724: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46725: LD_ADDR_VAR 0 2
46729: PUSH
46730: LD_VAR 0 3
46734: PPUSH
46735: LD_INT 1
46737: PPUSH
46738: CALL_OW 275
46742: PUSH
46743: LD_VAR 0 4
46747: PUSH
46748: LD_INT 1
46750: ARRAY
46751: GREATEREQUAL
46752: PUSH
46753: LD_VAR 0 3
46757: PPUSH
46758: LD_INT 2
46760: PPUSH
46761: CALL_OW 275
46765: PUSH
46766: LD_VAR 0 4
46770: PUSH
46771: LD_INT 2
46773: ARRAY
46774: GREATEREQUAL
46775: AND
46776: PUSH
46777: LD_VAR 0 3
46781: PPUSH
46782: LD_INT 3
46784: PPUSH
46785: CALL_OW 275
46789: PUSH
46790: LD_VAR 0 4
46794: PUSH
46795: LD_INT 3
46797: ARRAY
46798: GREATEREQUAL
46799: AND
46800: ST_TO_ADDR
// end ;
46801: LD_VAR 0 2
46805: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
46806: LD_INT 0
46808: PPUSH
46809: PPUSH
46810: PPUSH
// pom := GetBase ( building ) ;
46811: LD_ADDR_VAR 0 4
46815: PUSH
46816: LD_VAR 0 1
46820: PPUSH
46821: CALL_OW 274
46825: ST_TO_ADDR
// if not pom then
46826: LD_VAR 0 4
46830: NOT
46831: IFFALSE 46835
// exit ;
46833: GO 46936
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
46835: LD_ADDR_VAR 0 5
46839: PUSH
46840: LD_VAR 0 2
46844: PPUSH
46845: LD_VAR 0 1
46849: PPUSH
46850: CALL_OW 248
46854: PPUSH
46855: CALL_OW 450
46859: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
46860: LD_ADDR_VAR 0 3
46864: PUSH
46865: LD_VAR 0 4
46869: PPUSH
46870: LD_INT 1
46872: PPUSH
46873: CALL_OW 275
46877: PUSH
46878: LD_VAR 0 5
46882: PUSH
46883: LD_INT 1
46885: ARRAY
46886: GREATEREQUAL
46887: PUSH
46888: LD_VAR 0 4
46892: PPUSH
46893: LD_INT 2
46895: PPUSH
46896: CALL_OW 275
46900: PUSH
46901: LD_VAR 0 5
46905: PUSH
46906: LD_INT 2
46908: ARRAY
46909: GREATEREQUAL
46910: AND
46911: PUSH
46912: LD_VAR 0 4
46916: PPUSH
46917: LD_INT 3
46919: PPUSH
46920: CALL_OW 275
46924: PUSH
46925: LD_VAR 0 5
46929: PUSH
46930: LD_INT 3
46932: ARRAY
46933: GREATEREQUAL
46934: AND
46935: ST_TO_ADDR
// end ;
46936: LD_VAR 0 3
46940: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
46941: LD_INT 0
46943: PPUSH
46944: PPUSH
46945: PPUSH
46946: PPUSH
46947: PPUSH
46948: PPUSH
46949: PPUSH
46950: PPUSH
46951: PPUSH
46952: PPUSH
46953: PPUSH
// result := false ;
46954: LD_ADDR_VAR 0 8
46958: PUSH
46959: LD_INT 0
46961: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
46962: LD_VAR 0 5
46966: NOT
46967: PUSH
46968: LD_VAR 0 1
46972: NOT
46973: OR
46974: PUSH
46975: LD_VAR 0 2
46979: NOT
46980: OR
46981: PUSH
46982: LD_VAR 0 3
46986: NOT
46987: OR
46988: IFFALSE 46992
// exit ;
46990: GO 47806
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
46992: LD_ADDR_VAR 0 14
46996: PUSH
46997: LD_VAR 0 1
47001: PPUSH
47002: LD_VAR 0 2
47006: PPUSH
47007: LD_VAR 0 3
47011: PPUSH
47012: LD_VAR 0 4
47016: PPUSH
47017: LD_VAR 0 5
47021: PUSH
47022: LD_INT 1
47024: ARRAY
47025: PPUSH
47026: CALL_OW 248
47030: PPUSH
47031: LD_INT 0
47033: PPUSH
47034: CALL 49059 0 6
47038: ST_TO_ADDR
// if not hexes then
47039: LD_VAR 0 14
47043: NOT
47044: IFFALSE 47048
// exit ;
47046: GO 47806
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47048: LD_ADDR_VAR 0 17
47052: PUSH
47053: LD_VAR 0 5
47057: PPUSH
47058: LD_INT 22
47060: PUSH
47061: LD_VAR 0 13
47065: PPUSH
47066: CALL_OW 255
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: LD_INT 30
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: EMPTY
47085: LIST
47086: LIST
47087: PUSH
47088: LD_INT 30
47090: PUSH
47091: LD_INT 1
47093: PUSH
47094: EMPTY
47095: LIST
47096: LIST
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: LIST
47102: PUSH
47103: EMPTY
47104: LIST
47105: LIST
47106: PPUSH
47107: CALL_OW 72
47111: ST_TO_ADDR
// for i = 1 to hexes do
47112: LD_ADDR_VAR 0 9
47116: PUSH
47117: DOUBLE
47118: LD_INT 1
47120: DEC
47121: ST_TO_ADDR
47122: LD_VAR 0 14
47126: PUSH
47127: FOR_TO
47128: IFFALSE 47804
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
47130: LD_ADDR_VAR 0 13
47134: PUSH
47135: LD_VAR 0 14
47139: PUSH
47140: LD_VAR 0 9
47144: ARRAY
47145: PUSH
47146: LD_INT 1
47148: ARRAY
47149: PPUSH
47150: LD_VAR 0 14
47154: PUSH
47155: LD_VAR 0 9
47159: ARRAY
47160: PUSH
47161: LD_INT 2
47163: ARRAY
47164: PPUSH
47165: CALL_OW 428
47169: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
47170: LD_VAR 0 14
47174: PUSH
47175: LD_VAR 0 9
47179: ARRAY
47180: PUSH
47181: LD_INT 1
47183: ARRAY
47184: PPUSH
47185: LD_VAR 0 14
47189: PUSH
47190: LD_VAR 0 9
47194: ARRAY
47195: PUSH
47196: LD_INT 2
47198: ARRAY
47199: PPUSH
47200: CALL_OW 351
47204: PUSH
47205: LD_VAR 0 14
47209: PUSH
47210: LD_VAR 0 9
47214: ARRAY
47215: PUSH
47216: LD_INT 1
47218: ARRAY
47219: PPUSH
47220: LD_VAR 0 14
47224: PUSH
47225: LD_VAR 0 9
47229: ARRAY
47230: PUSH
47231: LD_INT 2
47233: ARRAY
47234: PPUSH
47235: CALL_OW 488
47239: NOT
47240: OR
47241: PUSH
47242: LD_VAR 0 13
47246: PPUSH
47247: CALL_OW 247
47251: PUSH
47252: LD_INT 3
47254: EQUAL
47255: OR
47256: IFFALSE 47262
// exit ;
47258: POP
47259: POP
47260: GO 47806
// if not tmp then
47262: LD_VAR 0 13
47266: NOT
47267: IFFALSE 47271
// continue ;
47269: GO 47127
// result := true ;
47271: LD_ADDR_VAR 0 8
47275: PUSH
47276: LD_INT 1
47278: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
47279: LD_VAR 0 6
47283: PUSH
47284: LD_VAR 0 13
47288: PPUSH
47289: CALL_OW 247
47293: PUSH
47294: LD_INT 2
47296: EQUAL
47297: AND
47298: PUSH
47299: LD_VAR 0 13
47303: PPUSH
47304: CALL_OW 263
47308: PUSH
47309: LD_INT 1
47311: EQUAL
47312: AND
47313: IFFALSE 47477
// begin if IsDrivenBy ( tmp ) then
47315: LD_VAR 0 13
47319: PPUSH
47320: CALL_OW 311
47324: IFFALSE 47328
// continue ;
47326: GO 47127
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
47328: LD_VAR 0 6
47332: PPUSH
47333: LD_INT 3
47335: PUSH
47336: LD_INT 60
47338: PUSH
47339: EMPTY
47340: LIST
47341: PUSH
47342: EMPTY
47343: LIST
47344: LIST
47345: PUSH
47346: LD_INT 3
47348: PUSH
47349: LD_INT 55
47351: PUSH
47352: EMPTY
47353: LIST
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PPUSH
47363: CALL_OW 72
47367: IFFALSE 47475
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
47369: LD_ADDR_VAR 0 18
47373: PUSH
47374: LD_VAR 0 6
47378: PPUSH
47379: LD_INT 3
47381: PUSH
47382: LD_INT 60
47384: PUSH
47385: EMPTY
47386: LIST
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 55
47397: PUSH
47398: EMPTY
47399: LIST
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PPUSH
47409: CALL_OW 72
47413: PUSH
47414: LD_INT 1
47416: ARRAY
47417: ST_TO_ADDR
// if IsInUnit ( driver ) then
47418: LD_VAR 0 18
47422: PPUSH
47423: CALL_OW 310
47427: IFFALSE 47438
// ComExit ( driver ) ;
47429: LD_VAR 0 18
47433: PPUSH
47434: CALL 72838 0 1
// AddComEnterUnit ( driver , tmp ) ;
47438: LD_VAR 0 18
47442: PPUSH
47443: LD_VAR 0 13
47447: PPUSH
47448: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
47452: LD_VAR 0 18
47456: PPUSH
47457: LD_VAR 0 7
47461: PPUSH
47462: CALL_OW 173
// AddComExitVehicle ( driver ) ;
47466: LD_VAR 0 18
47470: PPUSH
47471: CALL_OW 181
// end ; continue ;
47475: GO 47127
// end ; if not cleaners or not tmp in cleaners then
47477: LD_VAR 0 6
47481: NOT
47482: PUSH
47483: LD_VAR 0 13
47487: PUSH
47488: LD_VAR 0 6
47492: IN
47493: NOT
47494: OR
47495: IFFALSE 47802
// begin if dep then
47497: LD_VAR 0 17
47501: IFFALSE 47637
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
47503: LD_ADDR_VAR 0 16
47507: PUSH
47508: LD_VAR 0 17
47512: PUSH
47513: LD_INT 1
47515: ARRAY
47516: PPUSH
47517: CALL_OW 250
47521: PPUSH
47522: LD_VAR 0 17
47526: PUSH
47527: LD_INT 1
47529: ARRAY
47530: PPUSH
47531: CALL_OW 254
47535: PPUSH
47536: LD_INT 5
47538: PPUSH
47539: CALL_OW 272
47543: PUSH
47544: LD_VAR 0 17
47548: PUSH
47549: LD_INT 1
47551: ARRAY
47552: PPUSH
47553: CALL_OW 251
47557: PPUSH
47558: LD_VAR 0 17
47562: PUSH
47563: LD_INT 1
47565: ARRAY
47566: PPUSH
47567: CALL_OW 254
47571: PPUSH
47572: LD_INT 5
47574: PPUSH
47575: CALL_OW 273
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
47584: LD_VAR 0 16
47588: PUSH
47589: LD_INT 1
47591: ARRAY
47592: PPUSH
47593: LD_VAR 0 16
47597: PUSH
47598: LD_INT 2
47600: ARRAY
47601: PPUSH
47602: CALL_OW 488
47606: IFFALSE 47637
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
47608: LD_VAR 0 13
47612: PPUSH
47613: LD_VAR 0 16
47617: PUSH
47618: LD_INT 1
47620: ARRAY
47621: PPUSH
47622: LD_VAR 0 16
47626: PUSH
47627: LD_INT 2
47629: ARRAY
47630: PPUSH
47631: CALL_OW 111
// continue ;
47635: GO 47127
// end ; end ; r := GetDir ( tmp ) ;
47637: LD_ADDR_VAR 0 15
47641: PUSH
47642: LD_VAR 0 13
47646: PPUSH
47647: CALL_OW 254
47651: ST_TO_ADDR
// if r = 5 then
47652: LD_VAR 0 15
47656: PUSH
47657: LD_INT 5
47659: EQUAL
47660: IFFALSE 47670
// r := 0 ;
47662: LD_ADDR_VAR 0 15
47666: PUSH
47667: LD_INT 0
47669: ST_TO_ADDR
// for j = r to 5 do
47670: LD_ADDR_VAR 0 10
47674: PUSH
47675: DOUBLE
47676: LD_VAR 0 15
47680: DEC
47681: ST_TO_ADDR
47682: LD_INT 5
47684: PUSH
47685: FOR_TO
47686: IFFALSE 47800
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
47688: LD_ADDR_VAR 0 11
47692: PUSH
47693: LD_VAR 0 13
47697: PPUSH
47698: CALL_OW 250
47702: PPUSH
47703: LD_VAR 0 10
47707: PPUSH
47708: LD_INT 2
47710: PPUSH
47711: CALL_OW 272
47715: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
47716: LD_ADDR_VAR 0 12
47720: PUSH
47721: LD_VAR 0 13
47725: PPUSH
47726: CALL_OW 251
47730: PPUSH
47731: LD_VAR 0 10
47735: PPUSH
47736: LD_INT 2
47738: PPUSH
47739: CALL_OW 273
47743: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
47744: LD_VAR 0 11
47748: PPUSH
47749: LD_VAR 0 12
47753: PPUSH
47754: CALL_OW 488
47758: PUSH
47759: LD_VAR 0 11
47763: PPUSH
47764: LD_VAR 0 12
47768: PPUSH
47769: CALL_OW 428
47773: NOT
47774: AND
47775: IFFALSE 47798
// begin ComMoveXY ( tmp , _x , _y ) ;
47777: LD_VAR 0 13
47781: PPUSH
47782: LD_VAR 0 11
47786: PPUSH
47787: LD_VAR 0 12
47791: PPUSH
47792: CALL_OW 111
// break ;
47796: GO 47800
// end ; end ;
47798: GO 47685
47800: POP
47801: POP
// end ; end ;
47802: GO 47127
47804: POP
47805: POP
// end ;
47806: LD_VAR 0 8
47810: RET
// export function BuildingTechInvented ( side , btype ) ; begin
47811: LD_INT 0
47813: PPUSH
// result := true ;
47814: LD_ADDR_VAR 0 3
47818: PUSH
47819: LD_INT 1
47821: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
47822: LD_VAR 0 2
47826: PUSH
47827: LD_INT 24
47829: DOUBLE
47830: EQUAL
47831: IFTRUE 47841
47833: LD_INT 33
47835: DOUBLE
47836: EQUAL
47837: IFTRUE 47841
47839: GO 47866
47841: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
47842: LD_ADDR_VAR 0 3
47846: PUSH
47847: LD_INT 32
47849: PPUSH
47850: LD_VAR 0 1
47854: PPUSH
47855: CALL_OW 321
47859: PUSH
47860: LD_INT 2
47862: EQUAL
47863: ST_TO_ADDR
47864: GO 48182
47866: LD_INT 20
47868: DOUBLE
47869: EQUAL
47870: IFTRUE 47874
47872: GO 47899
47874: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
47875: LD_ADDR_VAR 0 3
47879: PUSH
47880: LD_INT 6
47882: PPUSH
47883: LD_VAR 0 1
47887: PPUSH
47888: CALL_OW 321
47892: PUSH
47893: LD_INT 2
47895: EQUAL
47896: ST_TO_ADDR
47897: GO 48182
47899: LD_INT 22
47901: DOUBLE
47902: EQUAL
47903: IFTRUE 47913
47905: LD_INT 36
47907: DOUBLE
47908: EQUAL
47909: IFTRUE 47913
47911: GO 47938
47913: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
47914: LD_ADDR_VAR 0 3
47918: PUSH
47919: LD_INT 15
47921: PPUSH
47922: LD_VAR 0 1
47926: PPUSH
47927: CALL_OW 321
47931: PUSH
47932: LD_INT 2
47934: EQUAL
47935: ST_TO_ADDR
47936: GO 48182
47938: LD_INT 30
47940: DOUBLE
47941: EQUAL
47942: IFTRUE 47946
47944: GO 47971
47946: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
47947: LD_ADDR_VAR 0 3
47951: PUSH
47952: LD_INT 20
47954: PPUSH
47955: LD_VAR 0 1
47959: PPUSH
47960: CALL_OW 321
47964: PUSH
47965: LD_INT 2
47967: EQUAL
47968: ST_TO_ADDR
47969: GO 48182
47971: LD_INT 28
47973: DOUBLE
47974: EQUAL
47975: IFTRUE 47985
47977: LD_INT 21
47979: DOUBLE
47980: EQUAL
47981: IFTRUE 47985
47983: GO 48010
47985: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
47986: LD_ADDR_VAR 0 3
47990: PUSH
47991: LD_INT 21
47993: PPUSH
47994: LD_VAR 0 1
47998: PPUSH
47999: CALL_OW 321
48003: PUSH
48004: LD_INT 2
48006: EQUAL
48007: ST_TO_ADDR
48008: GO 48182
48010: LD_INT 16
48012: DOUBLE
48013: EQUAL
48014: IFTRUE 48018
48016: GO 48043
48018: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
48019: LD_ADDR_VAR 0 3
48023: PUSH
48024: LD_INT 84
48026: PPUSH
48027: LD_VAR 0 1
48031: PPUSH
48032: CALL_OW 321
48036: PUSH
48037: LD_INT 2
48039: EQUAL
48040: ST_TO_ADDR
48041: GO 48182
48043: LD_INT 19
48045: DOUBLE
48046: EQUAL
48047: IFTRUE 48057
48049: LD_INT 23
48051: DOUBLE
48052: EQUAL
48053: IFTRUE 48057
48055: GO 48082
48057: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
48058: LD_ADDR_VAR 0 3
48062: PUSH
48063: LD_INT 83
48065: PPUSH
48066: LD_VAR 0 1
48070: PPUSH
48071: CALL_OW 321
48075: PUSH
48076: LD_INT 2
48078: EQUAL
48079: ST_TO_ADDR
48080: GO 48182
48082: LD_INT 17
48084: DOUBLE
48085: EQUAL
48086: IFTRUE 48090
48088: GO 48115
48090: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
48091: LD_ADDR_VAR 0 3
48095: PUSH
48096: LD_INT 39
48098: PPUSH
48099: LD_VAR 0 1
48103: PPUSH
48104: CALL_OW 321
48108: PUSH
48109: LD_INT 2
48111: EQUAL
48112: ST_TO_ADDR
48113: GO 48182
48115: LD_INT 18
48117: DOUBLE
48118: EQUAL
48119: IFTRUE 48123
48121: GO 48148
48123: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
48124: LD_ADDR_VAR 0 3
48128: PUSH
48129: LD_INT 40
48131: PPUSH
48132: LD_VAR 0 1
48136: PPUSH
48137: CALL_OW 321
48141: PUSH
48142: LD_INT 2
48144: EQUAL
48145: ST_TO_ADDR
48146: GO 48182
48148: LD_INT 27
48150: DOUBLE
48151: EQUAL
48152: IFTRUE 48156
48154: GO 48181
48156: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
48157: LD_ADDR_VAR 0 3
48161: PUSH
48162: LD_INT 35
48164: PPUSH
48165: LD_VAR 0 1
48169: PPUSH
48170: CALL_OW 321
48174: PUSH
48175: LD_INT 2
48177: EQUAL
48178: ST_TO_ADDR
48179: GO 48182
48181: POP
// end ;
48182: LD_VAR 0 3
48186: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
48187: LD_INT 0
48189: PPUSH
48190: PPUSH
48191: PPUSH
48192: PPUSH
48193: PPUSH
48194: PPUSH
48195: PPUSH
48196: PPUSH
48197: PPUSH
48198: PPUSH
48199: PPUSH
// result := false ;
48200: LD_ADDR_VAR 0 6
48204: PUSH
48205: LD_INT 0
48207: ST_TO_ADDR
// if btype = b_depot then
48208: LD_VAR 0 2
48212: PUSH
48213: LD_INT 0
48215: EQUAL
48216: IFFALSE 48228
// begin result := true ;
48218: LD_ADDR_VAR 0 6
48222: PUSH
48223: LD_INT 1
48225: ST_TO_ADDR
// exit ;
48226: GO 49054
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
48228: LD_VAR 0 1
48232: NOT
48233: PUSH
48234: LD_VAR 0 1
48238: PPUSH
48239: CALL_OW 266
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: IN
48254: NOT
48255: OR
48256: PUSH
48257: LD_VAR 0 2
48261: NOT
48262: OR
48263: PUSH
48264: LD_VAR 0 5
48268: PUSH
48269: LD_INT 0
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 2
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: LD_INT 4
48283: PUSH
48284: LD_INT 5
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: IN
48295: NOT
48296: OR
48297: PUSH
48298: LD_VAR 0 3
48302: PPUSH
48303: LD_VAR 0 4
48307: PPUSH
48308: CALL_OW 488
48312: NOT
48313: OR
48314: IFFALSE 48318
// exit ;
48316: GO 49054
// side := GetSide ( depot ) ;
48318: LD_ADDR_VAR 0 9
48322: PUSH
48323: LD_VAR 0 1
48327: PPUSH
48328: CALL_OW 255
48332: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
48333: LD_VAR 0 9
48337: PPUSH
48338: LD_VAR 0 2
48342: PPUSH
48343: CALL 47811 0 2
48347: NOT
48348: IFFALSE 48352
// exit ;
48350: GO 49054
// pom := GetBase ( depot ) ;
48352: LD_ADDR_VAR 0 10
48356: PUSH
48357: LD_VAR 0 1
48361: PPUSH
48362: CALL_OW 274
48366: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
48367: LD_ADDR_VAR 0 11
48371: PUSH
48372: LD_VAR 0 2
48376: PPUSH
48377: LD_VAR 0 1
48381: PPUSH
48382: CALL_OW 248
48386: PPUSH
48387: CALL_OW 450
48391: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
48392: LD_VAR 0 10
48396: PPUSH
48397: LD_INT 1
48399: PPUSH
48400: CALL_OW 275
48404: PUSH
48405: LD_VAR 0 11
48409: PUSH
48410: LD_INT 1
48412: ARRAY
48413: GREATEREQUAL
48414: PUSH
48415: LD_VAR 0 10
48419: PPUSH
48420: LD_INT 2
48422: PPUSH
48423: CALL_OW 275
48427: PUSH
48428: LD_VAR 0 11
48432: PUSH
48433: LD_INT 2
48435: ARRAY
48436: GREATEREQUAL
48437: AND
48438: PUSH
48439: LD_VAR 0 10
48443: PPUSH
48444: LD_INT 3
48446: PPUSH
48447: CALL_OW 275
48451: PUSH
48452: LD_VAR 0 11
48456: PUSH
48457: LD_INT 3
48459: ARRAY
48460: GREATEREQUAL
48461: AND
48462: NOT
48463: IFFALSE 48467
// exit ;
48465: GO 49054
// if GetBType ( depot ) = b_depot then
48467: LD_VAR 0 1
48471: PPUSH
48472: CALL_OW 266
48476: PUSH
48477: LD_INT 0
48479: EQUAL
48480: IFFALSE 48492
// dist := 28 else
48482: LD_ADDR_VAR 0 14
48486: PUSH
48487: LD_INT 28
48489: ST_TO_ADDR
48490: GO 48500
// dist := 36 ;
48492: LD_ADDR_VAR 0 14
48496: PUSH
48497: LD_INT 36
48499: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
48500: LD_VAR 0 1
48504: PPUSH
48505: LD_VAR 0 3
48509: PPUSH
48510: LD_VAR 0 4
48514: PPUSH
48515: CALL_OW 297
48519: PUSH
48520: LD_VAR 0 14
48524: GREATER
48525: IFFALSE 48529
// exit ;
48527: GO 49054
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
48529: LD_ADDR_VAR 0 12
48533: PUSH
48534: LD_VAR 0 2
48538: PPUSH
48539: LD_VAR 0 3
48543: PPUSH
48544: LD_VAR 0 4
48548: PPUSH
48549: LD_VAR 0 5
48553: PPUSH
48554: LD_VAR 0 1
48558: PPUSH
48559: CALL_OW 248
48563: PPUSH
48564: LD_INT 0
48566: PPUSH
48567: CALL 49059 0 6
48571: ST_TO_ADDR
// if not hexes then
48572: LD_VAR 0 12
48576: NOT
48577: IFFALSE 48581
// exit ;
48579: GO 49054
// hex := GetHexInfo ( x , y ) ;
48581: LD_ADDR_VAR 0 15
48585: PUSH
48586: LD_VAR 0 3
48590: PPUSH
48591: LD_VAR 0 4
48595: PPUSH
48596: CALL_OW 546
48600: ST_TO_ADDR
// if hex [ 1 ] then
48601: LD_VAR 0 15
48605: PUSH
48606: LD_INT 1
48608: ARRAY
48609: IFFALSE 48613
// exit ;
48611: GO 49054
// height := hex [ 2 ] ;
48613: LD_ADDR_VAR 0 13
48617: PUSH
48618: LD_VAR 0 15
48622: PUSH
48623: LD_INT 2
48625: ARRAY
48626: ST_TO_ADDR
// for i = 1 to hexes do
48627: LD_ADDR_VAR 0 7
48631: PUSH
48632: DOUBLE
48633: LD_INT 1
48635: DEC
48636: ST_TO_ADDR
48637: LD_VAR 0 12
48641: PUSH
48642: FOR_TO
48643: IFFALSE 48973
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
48645: LD_VAR 0 12
48649: PUSH
48650: LD_VAR 0 7
48654: ARRAY
48655: PUSH
48656: LD_INT 1
48658: ARRAY
48659: PPUSH
48660: LD_VAR 0 12
48664: PUSH
48665: LD_VAR 0 7
48669: ARRAY
48670: PUSH
48671: LD_INT 2
48673: ARRAY
48674: PPUSH
48675: CALL_OW 488
48679: NOT
48680: PUSH
48681: LD_VAR 0 12
48685: PUSH
48686: LD_VAR 0 7
48690: ARRAY
48691: PUSH
48692: LD_INT 1
48694: ARRAY
48695: PPUSH
48696: LD_VAR 0 12
48700: PUSH
48701: LD_VAR 0 7
48705: ARRAY
48706: PUSH
48707: LD_INT 2
48709: ARRAY
48710: PPUSH
48711: CALL_OW 428
48715: PUSH
48716: LD_INT 0
48718: GREATER
48719: OR
48720: PUSH
48721: LD_VAR 0 12
48725: PUSH
48726: LD_VAR 0 7
48730: ARRAY
48731: PUSH
48732: LD_INT 1
48734: ARRAY
48735: PPUSH
48736: LD_VAR 0 12
48740: PUSH
48741: LD_VAR 0 7
48745: ARRAY
48746: PUSH
48747: LD_INT 2
48749: ARRAY
48750: PPUSH
48751: CALL_OW 351
48755: OR
48756: IFFALSE 48762
// exit ;
48758: POP
48759: POP
48760: GO 49054
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48762: LD_ADDR_VAR 0 8
48766: PUSH
48767: LD_VAR 0 12
48771: PUSH
48772: LD_VAR 0 7
48776: ARRAY
48777: PUSH
48778: LD_INT 1
48780: ARRAY
48781: PPUSH
48782: LD_VAR 0 12
48786: PUSH
48787: LD_VAR 0 7
48791: ARRAY
48792: PUSH
48793: LD_INT 2
48795: ARRAY
48796: PPUSH
48797: CALL_OW 546
48801: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
48802: LD_VAR 0 8
48806: PUSH
48807: LD_INT 1
48809: ARRAY
48810: PUSH
48811: LD_VAR 0 8
48815: PUSH
48816: LD_INT 2
48818: ARRAY
48819: PUSH
48820: LD_VAR 0 13
48824: PUSH
48825: LD_INT 2
48827: PLUS
48828: GREATER
48829: OR
48830: PUSH
48831: LD_VAR 0 8
48835: PUSH
48836: LD_INT 2
48838: ARRAY
48839: PUSH
48840: LD_VAR 0 13
48844: PUSH
48845: LD_INT 2
48847: MINUS
48848: LESS
48849: OR
48850: PUSH
48851: LD_VAR 0 8
48855: PUSH
48856: LD_INT 3
48858: ARRAY
48859: PUSH
48860: LD_INT 0
48862: PUSH
48863: LD_INT 8
48865: PUSH
48866: LD_INT 9
48868: PUSH
48869: LD_INT 10
48871: PUSH
48872: LD_INT 11
48874: PUSH
48875: LD_INT 12
48877: PUSH
48878: LD_INT 13
48880: PUSH
48881: LD_INT 16
48883: PUSH
48884: LD_INT 17
48886: PUSH
48887: LD_INT 18
48889: PUSH
48890: LD_INT 19
48892: PUSH
48893: LD_INT 20
48895: PUSH
48896: LD_INT 21
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: LIST
48904: LIST
48905: LIST
48906: LIST
48907: LIST
48908: LIST
48909: LIST
48910: LIST
48911: LIST
48912: LIST
48913: IN
48914: NOT
48915: OR
48916: PUSH
48917: LD_VAR 0 8
48921: PUSH
48922: LD_INT 5
48924: ARRAY
48925: NOT
48926: OR
48927: PUSH
48928: LD_VAR 0 8
48932: PUSH
48933: LD_INT 6
48935: ARRAY
48936: PUSH
48937: LD_INT 1
48939: PUSH
48940: LD_INT 2
48942: PUSH
48943: LD_INT 7
48945: PUSH
48946: LD_INT 9
48948: PUSH
48949: LD_INT 10
48951: PUSH
48952: LD_INT 11
48954: PUSH
48955: EMPTY
48956: LIST
48957: LIST
48958: LIST
48959: LIST
48960: LIST
48961: LIST
48962: IN
48963: NOT
48964: OR
48965: IFFALSE 48971
// exit ;
48967: POP
48968: POP
48969: GO 49054
// end ;
48971: GO 48642
48973: POP
48974: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
48975: LD_VAR 0 9
48979: PPUSH
48980: LD_VAR 0 3
48984: PPUSH
48985: LD_VAR 0 4
48989: PPUSH
48990: LD_INT 20
48992: PPUSH
48993: CALL 40977 0 4
48997: PUSH
48998: LD_INT 4
49000: ARRAY
49001: IFFALSE 49005
// exit ;
49003: GO 49054
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
49005: LD_VAR 0 2
49009: PUSH
49010: LD_INT 29
49012: PUSH
49013: LD_INT 30
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: IN
49020: PUSH
49021: LD_VAR 0 3
49025: PPUSH
49026: LD_VAR 0 4
49030: PPUSH
49031: LD_VAR 0 9
49035: PPUSH
49036: CALL_OW 440
49040: NOT
49041: AND
49042: IFFALSE 49046
// exit ;
49044: GO 49054
// result := true ;
49046: LD_ADDR_VAR 0 6
49050: PUSH
49051: LD_INT 1
49053: ST_TO_ADDR
// end ;
49054: LD_VAR 0 6
49058: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
49059: LD_INT 0
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
49068: PPUSH
49069: PPUSH
49070: PPUSH
49071: PPUSH
49072: PPUSH
49073: PPUSH
49074: PPUSH
49075: PPUSH
49076: PPUSH
49077: PPUSH
49078: PPUSH
49079: PPUSH
49080: PPUSH
49081: PPUSH
49082: PPUSH
49083: PPUSH
49084: PPUSH
49085: PPUSH
49086: PPUSH
49087: PPUSH
49088: PPUSH
49089: PPUSH
49090: PPUSH
49091: PPUSH
49092: PPUSH
49093: PPUSH
49094: PPUSH
49095: PPUSH
49096: PPUSH
49097: PPUSH
49098: PPUSH
49099: PPUSH
49100: PPUSH
49101: PPUSH
49102: PPUSH
49103: PPUSH
49104: PPUSH
49105: PPUSH
49106: PPUSH
49107: PPUSH
49108: PPUSH
49109: PPUSH
49110: PPUSH
49111: PPUSH
49112: PPUSH
49113: PPUSH
49114: PPUSH
49115: PPUSH
49116: PPUSH
49117: PPUSH
49118: PPUSH
// result = [ ] ;
49119: LD_ADDR_VAR 0 7
49123: PUSH
49124: EMPTY
49125: ST_TO_ADDR
// temp_list = [ ] ;
49126: LD_ADDR_VAR 0 9
49130: PUSH
49131: EMPTY
49132: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
49133: LD_VAR 0 4
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 2
49146: PUSH
49147: LD_INT 3
49149: PUSH
49150: LD_INT 4
49152: PUSH
49153: LD_INT 5
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: IN
49164: NOT
49165: PUSH
49166: LD_VAR 0 1
49170: PUSH
49171: LD_INT 0
49173: PUSH
49174: LD_INT 1
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: IN
49181: PUSH
49182: LD_VAR 0 5
49186: PUSH
49187: LD_INT 1
49189: PUSH
49190: LD_INT 2
49192: PUSH
49193: LD_INT 3
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: LIST
49200: IN
49201: NOT
49202: AND
49203: OR
49204: IFFALSE 49208
// exit ;
49206: GO 67599
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
49208: LD_VAR 0 1
49212: PUSH
49213: LD_INT 6
49215: PUSH
49216: LD_INT 7
49218: PUSH
49219: LD_INT 8
49221: PUSH
49222: LD_INT 13
49224: PUSH
49225: LD_INT 12
49227: PUSH
49228: LD_INT 15
49230: PUSH
49231: LD_INT 11
49233: PUSH
49234: LD_INT 14
49236: PUSH
49237: LD_INT 10
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: LIST
49248: LIST
49249: LIST
49250: IN
49251: IFFALSE 49261
// btype = b_lab ;
49253: LD_ADDR_VAR 0 1
49257: PUSH
49258: LD_INT 6
49260: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
49261: LD_VAR 0 6
49265: PUSH
49266: LD_INT 0
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: LIST
49279: IN
49280: NOT
49281: PUSH
49282: LD_VAR 0 1
49286: PUSH
49287: LD_INT 0
49289: PUSH
49290: LD_INT 1
49292: PUSH
49293: LD_INT 2
49295: PUSH
49296: LD_INT 3
49298: PUSH
49299: LD_INT 6
49301: PUSH
49302: LD_INT 36
49304: PUSH
49305: LD_INT 4
49307: PUSH
49308: LD_INT 5
49310: PUSH
49311: LD_INT 31
49313: PUSH
49314: LD_INT 32
49316: PUSH
49317: LD_INT 33
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: IN
49333: NOT
49334: PUSH
49335: LD_VAR 0 6
49339: PUSH
49340: LD_INT 1
49342: EQUAL
49343: AND
49344: OR
49345: PUSH
49346: LD_VAR 0 1
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: LD_INT 3
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: IN
49361: NOT
49362: PUSH
49363: LD_VAR 0 6
49367: PUSH
49368: LD_INT 2
49370: EQUAL
49371: AND
49372: OR
49373: IFFALSE 49383
// mode = 0 ;
49375: LD_ADDR_VAR 0 6
49379: PUSH
49380: LD_INT 0
49382: ST_TO_ADDR
// case mode of 0 :
49383: LD_VAR 0 6
49387: PUSH
49388: LD_INT 0
49390: DOUBLE
49391: EQUAL
49392: IFTRUE 49396
49394: GO 60849
49396: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49397: LD_ADDR_VAR 0 11
49401: PUSH
49402: LD_INT 0
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 0
49414: PUSH
49415: LD_INT 1
49417: NEG
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PUSH
49423: LD_INT 1
49425: PUSH
49426: LD_INT 0
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 1
49435: PUSH
49436: LD_INT 1
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 0
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: LD_INT 0
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: NEG
49467: PUSH
49468: LD_INT 1
49470: NEG
49471: PUSH
49472: EMPTY
49473: LIST
49474: LIST
49475: PUSH
49476: LD_INT 1
49478: NEG
49479: PUSH
49480: LD_INT 2
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 0
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 1
49504: NEG
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 1
49512: PUSH
49513: LD_INT 2
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 0
49522: PUSH
49523: LD_INT 2
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 1
49532: NEG
49533: PUSH
49534: LD_INT 1
49536: PUSH
49537: EMPTY
49538: LIST
49539: LIST
49540: PUSH
49541: LD_INT 1
49543: PUSH
49544: LD_INT 3
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: LD_INT 0
49553: PUSH
49554: LD_INT 3
49556: PUSH
49557: EMPTY
49558: LIST
49559: LIST
49560: PUSH
49561: LD_INT 1
49563: NEG
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: EMPTY
49569: LIST
49570: LIST
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: LIST
49576: LIST
49577: LIST
49578: LIST
49579: LIST
49580: LIST
49581: LIST
49582: LIST
49583: LIST
49584: LIST
49585: LIST
49586: LIST
49587: LIST
49588: LIST
49589: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49590: LD_ADDR_VAR 0 12
49594: PUSH
49595: LD_INT 0
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 0
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 1
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 1
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 1
49648: NEG
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: EMPTY
49654: LIST
49655: LIST
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: LD_INT 1
49663: NEG
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: PUSH
49669: LD_INT 1
49671: PUSH
49672: LD_INT 1
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 2
49682: PUSH
49683: LD_INT 0
49685: PUSH
49686: EMPTY
49687: LIST
49688: LIST
49689: PUSH
49690: LD_INT 2
49692: PUSH
49693: LD_INT 1
49695: PUSH
49696: EMPTY
49697: LIST
49698: LIST
49699: PUSH
49700: LD_INT 1
49702: NEG
49703: PUSH
49704: LD_INT 1
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: LD_INT 2
49713: NEG
49714: PUSH
49715: LD_INT 0
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: PUSH
49722: LD_INT 2
49724: NEG
49725: PUSH
49726: LD_INT 1
49728: NEG
49729: PUSH
49730: EMPTY
49731: LIST
49732: LIST
49733: PUSH
49734: LD_INT 2
49736: NEG
49737: PUSH
49738: LD_INT 1
49740: PUSH
49741: EMPTY
49742: LIST
49743: LIST
49744: PUSH
49745: LD_INT 3
49747: NEG
49748: PUSH
49749: LD_INT 0
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 3
49758: NEG
49759: PUSH
49760: LD_INT 1
49762: NEG
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: LIST
49772: LIST
49773: LIST
49774: LIST
49775: LIST
49776: LIST
49777: LIST
49778: LIST
49779: LIST
49780: LIST
49781: LIST
49782: LIST
49783: LIST
49784: LIST
49785: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49786: LD_ADDR_VAR 0 13
49790: PUSH
49791: LD_INT 0
49793: PUSH
49794: LD_INT 0
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 0
49803: PUSH
49804: LD_INT 1
49806: NEG
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: PUSH
49812: LD_INT 1
49814: PUSH
49815: LD_INT 0
49817: PUSH
49818: EMPTY
49819: LIST
49820: LIST
49821: PUSH
49822: LD_INT 1
49824: PUSH
49825: LD_INT 1
49827: PUSH
49828: EMPTY
49829: LIST
49830: LIST
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: LD_INT 1
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 1
49855: NEG
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: NEG
49868: PUSH
49869: LD_INT 2
49871: NEG
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 2
49879: PUSH
49880: LD_INT 1
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 2
49889: PUSH
49890: LD_INT 2
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: PUSH
49897: LD_INT 1
49899: PUSH
49900: LD_INT 2
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: PUSH
49907: LD_INT 2
49909: NEG
49910: PUSH
49911: LD_INT 1
49913: NEG
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: NEG
49922: PUSH
49923: LD_INT 2
49925: NEG
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 2
49933: NEG
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: LD_INT 2
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 3
49957: NEG
49958: PUSH
49959: LD_INT 3
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: LIST
49972: LIST
49973: LIST
49974: LIST
49975: LIST
49976: LIST
49977: LIST
49978: LIST
49979: LIST
49980: LIST
49981: LIST
49982: LIST
49983: LIST
49984: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49985: LD_ADDR_VAR 0 14
49989: PUSH
49990: LD_INT 0
49992: PUSH
49993: LD_INT 0
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 0
50002: PUSH
50003: LD_INT 1
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: PUSH
50014: LD_INT 0
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: PUSH
50021: LD_INT 1
50023: PUSH
50024: LD_INT 1
50026: PUSH
50027: EMPTY
50028: LIST
50029: LIST
50030: PUSH
50031: LD_INT 0
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 1
50043: NEG
50044: PUSH
50045: LD_INT 0
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 1
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: LD_INT 1
50066: NEG
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: EMPTY
50073: LIST
50074: LIST
50075: PUSH
50076: LD_INT 0
50078: PUSH
50079: LD_INT 2
50081: NEG
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 1
50089: PUSH
50090: LD_INT 1
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 1
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 0
50110: PUSH
50111: LD_INT 2
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 1
50120: NEG
50121: PUSH
50122: LD_INT 1
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: NEG
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: EMPTY
50138: LIST
50139: LIST
50140: PUSH
50141: LD_INT 0
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: PUSH
50152: LD_INT 1
50154: PUSH
50155: LD_INT 2
50157: NEG
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50181: LD_ADDR_VAR 0 15
50185: PUSH
50186: LD_INT 0
50188: PUSH
50189: LD_INT 0
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 0
50198: PUSH
50199: LD_INT 1
50201: NEG
50202: PUSH
50203: EMPTY
50204: LIST
50205: LIST
50206: PUSH
50207: LD_INT 1
50209: PUSH
50210: LD_INT 0
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: EMPTY
50224: LIST
50225: LIST
50226: PUSH
50227: LD_INT 0
50229: PUSH
50230: LD_INT 1
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: PUSH
50237: LD_INT 1
50239: NEG
50240: PUSH
50241: LD_INT 0
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: PUSH
50248: LD_INT 1
50250: NEG
50251: PUSH
50252: LD_INT 1
50254: NEG
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 1
50262: PUSH
50263: LD_INT 1
50265: NEG
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: LD_INT 0
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 1
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 1
50293: NEG
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 2
50304: NEG
50305: PUSH
50306: LD_INT 0
50308: PUSH
50309: EMPTY
50310: LIST
50311: LIST
50312: PUSH
50313: LD_INT 2
50315: NEG
50316: PUSH
50317: LD_INT 1
50319: NEG
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 2
50327: PUSH
50328: LD_INT 1
50330: NEG
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 3
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 3
50348: PUSH
50349: LD_INT 1
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: EMPTY
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50374: LD_ADDR_VAR 0 16
50378: PUSH
50379: LD_INT 0
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 0
50391: PUSH
50392: LD_INT 1
50394: NEG
50395: PUSH
50396: EMPTY
50397: LIST
50398: LIST
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 0
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 1
50412: PUSH
50413: LD_INT 1
50415: PUSH
50416: EMPTY
50417: LIST
50418: LIST
50419: PUSH
50420: LD_INT 0
50422: PUSH
50423: LD_INT 1
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 1
50432: NEG
50433: PUSH
50434: LD_INT 0
50436: PUSH
50437: EMPTY
50438: LIST
50439: LIST
50440: PUSH
50441: LD_INT 1
50443: NEG
50444: PUSH
50445: LD_INT 1
50447: NEG
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 1
50455: NEG
50456: PUSH
50457: LD_INT 2
50459: NEG
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 2
50467: PUSH
50468: LD_INT 1
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 2
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 1
50487: PUSH
50488: LD_INT 2
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 2
50497: NEG
50498: PUSH
50499: LD_INT 1
50501: NEG
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 2
50509: NEG
50510: PUSH
50511: LD_INT 2
50513: NEG
50514: PUSH
50515: EMPTY
50516: LIST
50517: LIST
50518: PUSH
50519: LD_INT 3
50521: PUSH
50522: LD_INT 2
50524: PUSH
50525: EMPTY
50526: LIST
50527: LIST
50528: PUSH
50529: LD_INT 3
50531: PUSH
50532: LD_INT 3
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 2
50541: PUSH
50542: LD_INT 3
50544: PUSH
50545: EMPTY
50546: LIST
50547: LIST
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: LIST
50553: LIST
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50567: LD_ADDR_VAR 0 17
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 0
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 1
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: PUSH
50606: LD_INT 1
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 0
50615: PUSH
50616: LD_INT 1
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 1
50625: NEG
50626: PUSH
50627: LD_INT 0
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 1
50640: NEG
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: LD_INT 2
50652: NEG
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: LD_INT 2
50663: NEG
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: PUSH
50693: LD_INT 1
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 2
50702: PUSH
50703: LD_INT 2
50705: PUSH
50706: EMPTY
50707: LIST
50708: LIST
50709: PUSH
50710: LD_INT 1
50712: PUSH
50713: LD_INT 2
50715: PUSH
50716: EMPTY
50717: LIST
50718: LIST
50719: PUSH
50720: LD_INT 0
50722: PUSH
50723: LD_INT 2
50725: PUSH
50726: EMPTY
50727: LIST
50728: LIST
50729: PUSH
50730: LD_INT 1
50732: NEG
50733: PUSH
50734: LD_INT 1
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 2
50743: NEG
50744: PUSH
50745: LD_INT 0
50747: PUSH
50748: EMPTY
50749: LIST
50750: LIST
50751: PUSH
50752: LD_INT 2
50754: NEG
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: EMPTY
50761: LIST
50762: LIST
50763: PUSH
50764: LD_INT 2
50766: NEG
50767: PUSH
50768: LD_INT 2
50770: NEG
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50797: LD_ADDR_VAR 0 18
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: LD_INT 0
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: LD_INT 1
50817: NEG
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 0
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 1
50835: PUSH
50836: LD_INT 1
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 0
50845: PUSH
50846: LD_INT 1
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: PUSH
50853: LD_INT 1
50855: NEG
50856: PUSH
50857: LD_INT 0
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 1
50866: NEG
50867: PUSH
50868: LD_INT 1
50870: NEG
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 2
50882: NEG
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: PUSH
50888: LD_INT 0
50890: PUSH
50891: LD_INT 2
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 1
50901: PUSH
50902: LD_INT 1
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 2
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: PUSH
50923: LD_INT 1
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 2
50932: PUSH
50933: LD_INT 2
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 1
50942: PUSH
50943: LD_INT 2
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 1
50962: NEG
50963: PUSH
50964: LD_INT 1
50966: PUSH
50967: EMPTY
50968: LIST
50969: LIST
50970: PUSH
50971: LD_INT 2
50973: NEG
50974: PUSH
50975: LD_INT 0
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 2
50984: NEG
50985: PUSH
50986: LD_INT 1
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 2
50996: NEG
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: LIST
51013: LIST
51014: LIST
51015: LIST
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51027: LD_ADDR_VAR 0 19
51031: PUSH
51032: LD_INT 0
51034: PUSH
51035: LD_INT 0
51037: PUSH
51038: EMPTY
51039: LIST
51040: LIST
51041: PUSH
51042: LD_INT 0
51044: PUSH
51045: LD_INT 1
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 1
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 1
51065: PUSH
51066: LD_INT 1
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 0
51075: PUSH
51076: LD_INT 1
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: NEG
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 1
51096: NEG
51097: PUSH
51098: LD_INT 1
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 1
51108: NEG
51109: PUSH
51110: LD_INT 2
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 2
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 1
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 2
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 2
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: EMPTY
51157: LIST
51158: LIST
51159: PUSH
51160: LD_INT 2
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 1
51172: PUSH
51173: LD_INT 2
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 0
51182: PUSH
51183: LD_INT 2
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 1
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 2
51203: NEG
51204: PUSH
51205: LD_INT 0
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: PUSH
51212: LD_INT 2
51214: NEG
51215: PUSH
51216: LD_INT 1
51218: NEG
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 2
51226: NEG
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51257: LD_ADDR_VAR 0 20
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 0
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: LD_INT 1
51277: NEG
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 0
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 1
51295: PUSH
51296: LD_INT 1
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 0
51305: PUSH
51306: LD_INT 1
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 1
51315: NEG
51316: PUSH
51317: LD_INT 0
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 1
51326: NEG
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: EMPTY
51333: LIST
51334: LIST
51335: PUSH
51336: LD_INT 1
51338: NEG
51339: PUSH
51340: LD_INT 2
51342: NEG
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 0
51350: PUSH
51351: LD_INT 2
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 1
51361: PUSH
51362: LD_INT 1
51364: NEG
51365: PUSH
51366: EMPTY
51367: LIST
51368: LIST
51369: PUSH
51370: LD_INT 2
51372: PUSH
51373: LD_INT 0
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 2
51382: PUSH
51383: LD_INT 1
51385: PUSH
51386: EMPTY
51387: LIST
51388: LIST
51389: PUSH
51390: LD_INT 2
51392: PUSH
51393: LD_INT 2
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 1
51402: PUSH
51403: LD_INT 2
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 0
51412: PUSH
51413: LD_INT 2
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 1
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: LD_INT 0
51437: PUSH
51438: EMPTY
51439: LIST
51440: LIST
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: NEG
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 2
51456: NEG
51457: PUSH
51458: LD_INT 2
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51487: LD_ADDR_VAR 0 21
51491: PUSH
51492: LD_INT 0
51494: PUSH
51495: LD_INT 0
51497: PUSH
51498: EMPTY
51499: LIST
51500: LIST
51501: PUSH
51502: LD_INT 0
51504: PUSH
51505: LD_INT 1
51507: NEG
51508: PUSH
51509: EMPTY
51510: LIST
51511: LIST
51512: PUSH
51513: LD_INT 1
51515: PUSH
51516: LD_INT 0
51518: PUSH
51519: EMPTY
51520: LIST
51521: LIST
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: LD_INT 1
51528: PUSH
51529: EMPTY
51530: LIST
51531: LIST
51532: PUSH
51533: LD_INT 0
51535: PUSH
51536: LD_INT 1
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 1
51545: NEG
51546: PUSH
51547: LD_INT 0
51549: PUSH
51550: EMPTY
51551: LIST
51552: LIST
51553: PUSH
51554: LD_INT 1
51556: NEG
51557: PUSH
51558: LD_INT 1
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 2
51602: PUSH
51603: LD_INT 0
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 2
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 2
51622: PUSH
51623: LD_INT 2
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: LD_INT 2
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 0
51642: PUSH
51643: LD_INT 2
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 1
51652: NEG
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: NEG
51664: PUSH
51665: LD_INT 0
51667: PUSH
51668: EMPTY
51669: LIST
51670: LIST
51671: PUSH
51672: LD_INT 2
51674: NEG
51675: PUSH
51676: LD_INT 1
51678: NEG
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 2
51686: NEG
51687: PUSH
51688: LD_INT 2
51690: NEG
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: LIST
51700: LIST
51701: LIST
51702: LIST
51703: LIST
51704: LIST
51705: LIST
51706: LIST
51707: LIST
51708: LIST
51709: LIST
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51717: LD_ADDR_VAR 0 22
51721: PUSH
51722: LD_INT 0
51724: PUSH
51725: LD_INT 0
51727: PUSH
51728: EMPTY
51729: LIST
51730: LIST
51731: PUSH
51732: LD_INT 0
51734: PUSH
51735: LD_INT 1
51737: NEG
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: LD_INT 0
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 1
51755: PUSH
51756: LD_INT 1
51758: PUSH
51759: EMPTY
51760: LIST
51761: LIST
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: LD_INT 1
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: LD_INT 1
51775: NEG
51776: PUSH
51777: LD_INT 0
51779: PUSH
51780: EMPTY
51781: LIST
51782: LIST
51783: PUSH
51784: LD_INT 1
51786: NEG
51787: PUSH
51788: LD_INT 1
51790: NEG
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 1
51798: NEG
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 0
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: LD_INT 1
51821: PUSH
51822: LD_INT 1
51824: NEG
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 2
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 2
51842: PUSH
51843: LD_INT 1
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 2
51852: PUSH
51853: LD_INT 2
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: LD_INT 2
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 0
51872: PUSH
51873: LD_INT 2
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 2
51893: NEG
51894: PUSH
51895: LD_INT 0
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 2
51904: NEG
51905: PUSH
51906: LD_INT 1
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 2
51916: NEG
51917: PUSH
51918: LD_INT 2
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: EMPTY
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51947: LD_ADDR_VAR 0 23
51951: PUSH
51952: LD_INT 0
51954: PUSH
51955: LD_INT 0
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 0
51964: PUSH
51965: LD_INT 1
51967: NEG
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 1
51975: PUSH
51976: LD_INT 0
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 1
51985: PUSH
51986: LD_INT 1
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 0
51995: PUSH
51996: LD_INT 1
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 1
52005: NEG
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 1
52016: NEG
52017: PUSH
52018: LD_INT 1
52020: NEG
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 1
52028: NEG
52029: PUSH
52030: LD_INT 2
52032: NEG
52033: PUSH
52034: EMPTY
52035: LIST
52036: LIST
52037: PUSH
52038: LD_INT 0
52040: PUSH
52041: LD_INT 2
52043: NEG
52044: PUSH
52045: EMPTY
52046: LIST
52047: LIST
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 1
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 2
52072: PUSH
52073: LD_INT 1
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 2
52082: PUSH
52083: LD_INT 2
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 1
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 0
52102: PUSH
52103: LD_INT 2
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 1
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: NEG
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 2
52146: NEG
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 3
52162: NEG
52163: PUSH
52164: EMPTY
52165: LIST
52166: LIST
52167: PUSH
52168: LD_INT 1
52170: NEG
52171: PUSH
52172: LD_INT 3
52174: NEG
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: PUSH
52180: LD_INT 1
52182: PUSH
52183: LD_INT 2
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 2
52193: PUSH
52194: LD_INT 1
52196: NEG
52197: PUSH
52198: EMPTY
52199: LIST
52200: LIST
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: LIST
52221: LIST
52222: LIST
52223: LIST
52224: LIST
52225: LIST
52226: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
52227: LD_ADDR_VAR 0 24
52231: PUSH
52232: LD_INT 0
52234: PUSH
52235: LD_INT 0
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 0
52244: PUSH
52245: LD_INT 1
52247: NEG
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 1
52255: PUSH
52256: LD_INT 0
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 1
52265: PUSH
52266: LD_INT 1
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 0
52275: PUSH
52276: LD_INT 1
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 1
52285: NEG
52286: PUSH
52287: LD_INT 0
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 1
52296: NEG
52297: PUSH
52298: LD_INT 1
52300: NEG
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 1
52308: NEG
52309: PUSH
52310: LD_INT 2
52312: NEG
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PUSH
52318: LD_INT 0
52320: PUSH
52321: LD_INT 2
52323: NEG
52324: PUSH
52325: EMPTY
52326: LIST
52327: LIST
52328: PUSH
52329: LD_INT 1
52331: PUSH
52332: LD_INT 1
52334: NEG
52335: PUSH
52336: EMPTY
52337: LIST
52338: LIST
52339: PUSH
52340: LD_INT 2
52342: PUSH
52343: LD_INT 0
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: PUSH
52353: LD_INT 1
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: PUSH
52363: LD_INT 2
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: LD_INT 1
52372: PUSH
52373: LD_INT 2
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: LD_INT 2
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 2
52403: NEG
52404: PUSH
52405: LD_INT 0
52407: PUSH
52408: EMPTY
52409: LIST
52410: LIST
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: LD_INT 1
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 2
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 1
52438: PUSH
52439: LD_INT 2
52441: NEG
52442: PUSH
52443: EMPTY
52444: LIST
52445: LIST
52446: PUSH
52447: LD_INT 2
52449: PUSH
52450: LD_INT 1
52452: NEG
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 3
52470: PUSH
52471: LD_INT 2
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: EMPTY
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
52503: LD_ADDR_VAR 0 25
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 0
52520: PUSH
52521: LD_INT 1
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: LD_INT 0
52534: PUSH
52535: EMPTY
52536: LIST
52537: LIST
52538: PUSH
52539: LD_INT 1
52541: PUSH
52542: LD_INT 1
52544: PUSH
52545: EMPTY
52546: LIST
52547: LIST
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: LD_INT 1
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: PUSH
52559: LD_INT 1
52561: NEG
52562: PUSH
52563: LD_INT 0
52565: PUSH
52566: EMPTY
52567: LIST
52568: LIST
52569: PUSH
52570: LD_INT 1
52572: NEG
52573: PUSH
52574: LD_INT 1
52576: NEG
52577: PUSH
52578: EMPTY
52579: LIST
52580: LIST
52581: PUSH
52582: LD_INT 1
52584: NEG
52585: PUSH
52586: LD_INT 2
52588: NEG
52589: PUSH
52590: EMPTY
52591: LIST
52592: LIST
52593: PUSH
52594: LD_INT 0
52596: PUSH
52597: LD_INT 2
52599: NEG
52600: PUSH
52601: EMPTY
52602: LIST
52603: LIST
52604: PUSH
52605: LD_INT 1
52607: PUSH
52608: LD_INT 1
52610: NEG
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: LD_INT 0
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 2
52628: PUSH
52629: LD_INT 1
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 2
52638: PUSH
52639: LD_INT 2
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 1
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: LD_INT 2
52661: PUSH
52662: EMPTY
52663: LIST
52664: LIST
52665: PUSH
52666: LD_INT 1
52668: NEG
52669: PUSH
52670: LD_INT 1
52672: PUSH
52673: EMPTY
52674: LIST
52675: LIST
52676: PUSH
52677: LD_INT 2
52679: NEG
52680: PUSH
52681: LD_INT 0
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 1
52694: NEG
52695: PUSH
52696: EMPTY
52697: LIST
52698: LIST
52699: PUSH
52700: LD_INT 2
52702: NEG
52703: PUSH
52704: LD_INT 2
52706: NEG
52707: PUSH
52708: EMPTY
52709: LIST
52710: LIST
52711: PUSH
52712: LD_INT 3
52714: PUSH
52715: LD_INT 1
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: PUSH
52725: LD_INT 2
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 2
52734: PUSH
52735: LD_INT 3
52737: PUSH
52738: EMPTY
52739: LIST
52740: LIST
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: LD_INT 3
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: LIST
52756: LIST
52757: LIST
52758: LIST
52759: LIST
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: LIST
52765: LIST
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52777: LD_ADDR_VAR 0 26
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 0
52787: PUSH
52788: EMPTY
52789: LIST
52790: LIST
52791: PUSH
52792: LD_INT 0
52794: PUSH
52795: LD_INT 1
52797: NEG
52798: PUSH
52799: EMPTY
52800: LIST
52801: LIST
52802: PUSH
52803: LD_INT 1
52805: PUSH
52806: LD_INT 0
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 1
52815: PUSH
52816: LD_INT 1
52818: PUSH
52819: EMPTY
52820: LIST
52821: LIST
52822: PUSH
52823: LD_INT 0
52825: PUSH
52826: LD_INT 1
52828: PUSH
52829: EMPTY
52830: LIST
52831: LIST
52832: PUSH
52833: LD_INT 1
52835: NEG
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 1
52846: NEG
52847: PUSH
52848: LD_INT 1
52850: NEG
52851: PUSH
52852: EMPTY
52853: LIST
52854: LIST
52855: PUSH
52856: LD_INT 1
52858: NEG
52859: PUSH
52860: LD_INT 2
52862: NEG
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 0
52870: PUSH
52871: LD_INT 2
52873: NEG
52874: PUSH
52875: EMPTY
52876: LIST
52877: LIST
52878: PUSH
52879: LD_INT 1
52881: PUSH
52882: LD_INT 1
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: PUSH
52893: LD_INT 0
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 2
52902: PUSH
52903: LD_INT 1
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 2
52912: PUSH
52913: LD_INT 2
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 1
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 0
52932: PUSH
52933: LD_INT 2
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 1
52942: NEG
52943: PUSH
52944: LD_INT 1
52946: PUSH
52947: EMPTY
52948: LIST
52949: LIST
52950: PUSH
52951: LD_INT 2
52953: NEG
52954: PUSH
52955: LD_INT 0
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_INT 2
52964: NEG
52965: PUSH
52966: LD_INT 1
52968: NEG
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: PUSH
52974: LD_INT 2
52976: NEG
52977: PUSH
52978: LD_INT 2
52980: NEG
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 2
52988: PUSH
52989: LD_INT 3
52991: PUSH
52992: EMPTY
52993: LIST
52994: LIST
52995: PUSH
52996: LD_INT 1
52998: PUSH
52999: LD_INT 3
53001: PUSH
53002: EMPTY
53003: LIST
53004: LIST
53005: PUSH
53006: LD_INT 1
53008: NEG
53009: PUSH
53010: LD_INT 2
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: LD_INT 2
53019: NEG
53020: PUSH
53021: LD_INT 1
53023: PUSH
53024: EMPTY
53025: LIST
53026: LIST
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53053: LD_ADDR_VAR 0 27
53057: PUSH
53058: LD_INT 0
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 1
53073: NEG
53074: PUSH
53075: EMPTY
53076: LIST
53077: LIST
53078: PUSH
53079: LD_INT 1
53081: PUSH
53082: LD_INT 0
53084: PUSH
53085: EMPTY
53086: LIST
53087: LIST
53088: PUSH
53089: LD_INT 1
53091: PUSH
53092: LD_INT 1
53094: PUSH
53095: EMPTY
53096: LIST
53097: LIST
53098: PUSH
53099: LD_INT 0
53101: PUSH
53102: LD_INT 1
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 1
53111: NEG
53112: PUSH
53113: LD_INT 0
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 1
53122: NEG
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 1
53134: NEG
53135: PUSH
53136: LD_INT 2
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 0
53146: PUSH
53147: LD_INT 2
53149: NEG
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: PUSH
53155: LD_INT 1
53157: PUSH
53158: LD_INT 1
53160: NEG
53161: PUSH
53162: EMPTY
53163: LIST
53164: LIST
53165: PUSH
53166: LD_INT 2
53168: PUSH
53169: LD_INT 0
53171: PUSH
53172: EMPTY
53173: LIST
53174: LIST
53175: PUSH
53176: LD_INT 2
53178: PUSH
53179: LD_INT 1
53181: PUSH
53182: EMPTY
53183: LIST
53184: LIST
53185: PUSH
53186: LD_INT 2
53188: PUSH
53189: LD_INT 2
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: PUSH
53196: LD_INT 1
53198: PUSH
53199: LD_INT 2
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 0
53208: PUSH
53209: LD_INT 2
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 1
53218: NEG
53219: PUSH
53220: LD_INT 1
53222: PUSH
53223: EMPTY
53224: LIST
53225: LIST
53226: PUSH
53227: LD_INT 2
53229: NEG
53230: PUSH
53231: LD_INT 0
53233: PUSH
53234: EMPTY
53235: LIST
53236: LIST
53237: PUSH
53238: LD_INT 2
53240: NEG
53241: PUSH
53242: LD_INT 1
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 2
53252: NEG
53253: PUSH
53254: LD_INT 2
53256: NEG
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PUSH
53262: LD_INT 1
53264: NEG
53265: PUSH
53266: LD_INT 2
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 2
53275: NEG
53276: PUSH
53277: LD_INT 1
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: PUSH
53284: LD_INT 3
53286: NEG
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: EMPTY
53293: LIST
53294: LIST
53295: PUSH
53296: LD_INT 3
53298: NEG
53299: PUSH
53300: LD_INT 2
53302: NEG
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: LIST
53322: LIST
53323: LIST
53324: LIST
53325: LIST
53326: LIST
53327: LIST
53328: LIST
53329: LIST
53330: LIST
53331: LIST
53332: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
53333: LD_ADDR_VAR 0 28
53337: PUSH
53338: LD_INT 0
53340: PUSH
53341: LD_INT 0
53343: PUSH
53344: EMPTY
53345: LIST
53346: LIST
53347: PUSH
53348: LD_INT 0
53350: PUSH
53351: LD_INT 1
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 1
53361: PUSH
53362: LD_INT 0
53364: PUSH
53365: EMPTY
53366: LIST
53367: LIST
53368: PUSH
53369: LD_INT 1
53371: PUSH
53372: LD_INT 1
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 0
53381: PUSH
53382: LD_INT 1
53384: PUSH
53385: EMPTY
53386: LIST
53387: LIST
53388: PUSH
53389: LD_INT 1
53391: NEG
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 1
53402: NEG
53403: PUSH
53404: LD_INT 1
53406: NEG
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 1
53414: NEG
53415: PUSH
53416: LD_INT 2
53418: NEG
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 0
53426: PUSH
53427: LD_INT 2
53429: NEG
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 1
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 2
53448: PUSH
53449: LD_INT 0
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: PUSH
53459: LD_INT 1
53461: PUSH
53462: EMPTY
53463: LIST
53464: LIST
53465: PUSH
53466: LD_INT 2
53468: PUSH
53469: LD_INT 2
53471: PUSH
53472: EMPTY
53473: LIST
53474: LIST
53475: PUSH
53476: LD_INT 1
53478: PUSH
53479: LD_INT 2
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 0
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: PUSH
53496: LD_INT 1
53498: NEG
53499: PUSH
53500: LD_INT 1
53502: PUSH
53503: EMPTY
53504: LIST
53505: LIST
53506: PUSH
53507: LD_INT 2
53509: NEG
53510: PUSH
53511: LD_INT 0
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 2
53520: NEG
53521: PUSH
53522: LD_INT 1
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 2
53532: NEG
53533: PUSH
53534: LD_INT 2
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 2
53544: NEG
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 1
53556: NEG
53557: PUSH
53558: LD_INT 3
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: LD_INT 1
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 3
53580: NEG
53581: PUSH
53582: LD_INT 2
53584: NEG
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
53615: LD_ADDR_VAR 0 29
53619: PUSH
53620: LD_INT 0
53622: PUSH
53623: LD_INT 0
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 0
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 1
53643: PUSH
53644: LD_INT 0
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: LD_INT 1
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 0
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: EMPTY
53668: LIST
53669: LIST
53670: PUSH
53671: LD_INT 1
53673: NEG
53674: PUSH
53675: LD_INT 0
53677: PUSH
53678: EMPTY
53679: LIST
53680: LIST
53681: PUSH
53682: LD_INT 1
53684: NEG
53685: PUSH
53686: LD_INT 1
53688: NEG
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: PUSH
53694: LD_INT 1
53696: NEG
53697: PUSH
53698: LD_INT 2
53700: NEG
53701: PUSH
53702: EMPTY
53703: LIST
53704: LIST
53705: PUSH
53706: LD_INT 0
53708: PUSH
53709: LD_INT 2
53711: NEG
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: PUSH
53717: LD_INT 1
53719: PUSH
53720: LD_INT 1
53722: NEG
53723: PUSH
53724: EMPTY
53725: LIST
53726: LIST
53727: PUSH
53728: LD_INT 2
53730: PUSH
53731: LD_INT 0
53733: PUSH
53734: EMPTY
53735: LIST
53736: LIST
53737: PUSH
53738: LD_INT 2
53740: PUSH
53741: LD_INT 1
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: PUSH
53748: LD_INT 1
53750: PUSH
53751: LD_INT 2
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: LD_INT 0
53760: PUSH
53761: LD_INT 2
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 1
53770: NEG
53771: PUSH
53772: LD_INT 1
53774: PUSH
53775: EMPTY
53776: LIST
53777: LIST
53778: PUSH
53779: LD_INT 2
53781: NEG
53782: PUSH
53783: LD_INT 1
53785: NEG
53786: PUSH
53787: EMPTY
53788: LIST
53789: LIST
53790: PUSH
53791: LD_INT 2
53793: NEG
53794: PUSH
53795: LD_INT 2
53797: NEG
53798: PUSH
53799: EMPTY
53800: LIST
53801: LIST
53802: PUSH
53803: LD_INT 2
53805: NEG
53806: PUSH
53807: LD_INT 3
53809: NEG
53810: PUSH
53811: EMPTY
53812: LIST
53813: LIST
53814: PUSH
53815: LD_INT 2
53817: PUSH
53818: LD_INT 1
53820: NEG
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 3
53828: PUSH
53829: LD_INT 1
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 1
53838: PUSH
53839: LD_INT 3
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: PUSH
53846: LD_INT 1
53848: NEG
53849: PUSH
53850: LD_INT 2
53852: PUSH
53853: EMPTY
53854: LIST
53855: LIST
53856: PUSH
53857: LD_INT 3
53859: NEG
53860: PUSH
53861: LD_INT 2
53863: NEG
53864: PUSH
53865: EMPTY
53866: LIST
53867: LIST
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: LIST
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
53894: LD_ADDR_VAR 0 30
53898: PUSH
53899: LD_INT 0
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: EMPTY
53906: LIST
53907: LIST
53908: PUSH
53909: LD_INT 0
53911: PUSH
53912: LD_INT 1
53914: NEG
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 1
53922: PUSH
53923: LD_INT 0
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 1
53932: PUSH
53933: LD_INT 1
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 0
53942: PUSH
53943: LD_INT 1
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 1
53952: NEG
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 1
53963: NEG
53964: PUSH
53965: LD_INT 1
53967: NEG
53968: PUSH
53969: EMPTY
53970: LIST
53971: LIST
53972: PUSH
53973: LD_INT 1
53975: NEG
53976: PUSH
53977: LD_INT 2
53979: NEG
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 0
53987: PUSH
53988: LD_INT 2
53990: NEG
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 1
53998: PUSH
53999: LD_INT 1
54001: NEG
54002: PUSH
54003: EMPTY
54004: LIST
54005: LIST
54006: PUSH
54007: LD_INT 2
54009: PUSH
54010: LD_INT 0
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 2
54019: PUSH
54020: LD_INT 1
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 2
54029: PUSH
54030: LD_INT 2
54032: PUSH
54033: EMPTY
54034: LIST
54035: LIST
54036: PUSH
54037: LD_INT 1
54039: PUSH
54040: LD_INT 2
54042: PUSH
54043: EMPTY
54044: LIST
54045: LIST
54046: PUSH
54047: LD_INT 1
54049: NEG
54050: PUSH
54051: LD_INT 1
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 2
54060: NEG
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: EMPTY
54066: LIST
54067: LIST
54068: PUSH
54069: LD_INT 2
54071: NEG
54072: PUSH
54073: LD_INT 1
54075: NEG
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 1
54083: NEG
54084: PUSH
54085: LD_INT 3
54087: NEG
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 1
54095: PUSH
54096: LD_INT 2
54098: NEG
54099: PUSH
54100: EMPTY
54101: LIST
54102: LIST
54103: PUSH
54104: LD_INT 3
54106: PUSH
54107: LD_INT 2
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 3
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 2
54126: NEG
54127: PUSH
54128: LD_INT 1
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 3
54137: NEG
54138: PUSH
54139: LD_INT 1
54141: NEG
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: LIST
54160: LIST
54161: LIST
54162: LIST
54163: LIST
54164: LIST
54165: LIST
54166: LIST
54167: LIST
54168: LIST
54169: LIST
54170: LIST
54171: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54172: LD_ADDR_VAR 0 31
54176: PUSH
54177: LD_INT 0
54179: PUSH
54180: LD_INT 0
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: PUSH
54187: LD_INT 0
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 1
54200: PUSH
54201: LD_INT 0
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 1
54210: PUSH
54211: LD_INT 1
54213: PUSH
54214: EMPTY
54215: LIST
54216: LIST
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: LD_INT 1
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: LD_INT 0
54234: PUSH
54235: EMPTY
54236: LIST
54237: LIST
54238: PUSH
54239: LD_INT 1
54241: NEG
54242: PUSH
54243: LD_INT 1
54245: NEG
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 2
54257: NEG
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 1
54265: PUSH
54266: LD_INT 1
54268: NEG
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 2
54276: PUSH
54277: LD_INT 0
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 2
54286: PUSH
54287: LD_INT 1
54289: PUSH
54290: EMPTY
54291: LIST
54292: LIST
54293: PUSH
54294: LD_INT 2
54296: PUSH
54297: LD_INT 2
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 1
54306: PUSH
54307: LD_INT 2
54309: PUSH
54310: EMPTY
54311: LIST
54312: LIST
54313: PUSH
54314: LD_INT 0
54316: PUSH
54317: LD_INT 2
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: LD_INT 1
54326: NEG
54327: PUSH
54328: LD_INT 1
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 2
54337: NEG
54338: PUSH
54339: LD_INT 1
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: NEG
54350: PUSH
54351: LD_INT 2
54353: NEG
54354: PUSH
54355: EMPTY
54356: LIST
54357: LIST
54358: PUSH
54359: LD_INT 2
54361: NEG
54362: PUSH
54363: LD_INT 3
54365: NEG
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 2
54373: PUSH
54374: LD_INT 1
54376: NEG
54377: PUSH
54378: EMPTY
54379: LIST
54380: LIST
54381: PUSH
54382: LD_INT 3
54384: PUSH
54385: LD_INT 1
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: PUSH
54392: LD_INT 1
54394: PUSH
54395: LD_INT 3
54397: PUSH
54398: EMPTY
54399: LIST
54400: LIST
54401: PUSH
54402: LD_INT 1
54404: NEG
54405: PUSH
54406: LD_INT 2
54408: PUSH
54409: EMPTY
54410: LIST
54411: LIST
54412: PUSH
54413: LD_INT 3
54415: NEG
54416: PUSH
54417: LD_INT 2
54419: NEG
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: EMPTY
54426: LIST
54427: LIST
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: LIST
54436: LIST
54437: LIST
54438: LIST
54439: LIST
54440: LIST
54441: LIST
54442: LIST
54443: LIST
54444: LIST
54445: LIST
54446: LIST
54447: LIST
54448: LIST
54449: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54450: LD_ADDR_VAR 0 32
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 0
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 0
54467: PUSH
54468: LD_INT 1
54470: NEG
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: PUSH
54479: LD_INT 0
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 1
54488: PUSH
54489: LD_INT 1
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: PUSH
54496: LD_INT 0
54498: PUSH
54499: LD_INT 1
54501: PUSH
54502: EMPTY
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 1
54508: NEG
54509: PUSH
54510: LD_INT 0
54512: PUSH
54513: EMPTY
54514: LIST
54515: LIST
54516: PUSH
54517: LD_INT 1
54519: NEG
54520: PUSH
54521: LD_INT 1
54523: NEG
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: PUSH
54529: LD_INT 1
54531: NEG
54532: PUSH
54533: LD_INT 2
54535: NEG
54536: PUSH
54537: EMPTY
54538: LIST
54539: LIST
54540: PUSH
54541: LD_INT 0
54543: PUSH
54544: LD_INT 2
54546: NEG
54547: PUSH
54548: EMPTY
54549: LIST
54550: LIST
54551: PUSH
54552: LD_INT 1
54554: PUSH
54555: LD_INT 1
54557: NEG
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 2
54565: PUSH
54566: LD_INT 1
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 2
54575: PUSH
54576: LD_INT 2
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 2
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 1
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 2
54616: NEG
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: NEG
54628: PUSH
54629: LD_INT 1
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 3
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 1
54651: PUSH
54652: LD_INT 2
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 3
54662: PUSH
54663: LD_INT 2
54665: PUSH
54666: EMPTY
54667: LIST
54668: LIST
54669: PUSH
54670: LD_INT 2
54672: PUSH
54673: LD_INT 3
54675: PUSH
54676: EMPTY
54677: LIST
54678: LIST
54679: PUSH
54680: LD_INT 2
54682: NEG
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: EMPTY
54688: LIST
54689: LIST
54690: PUSH
54691: LD_INT 3
54693: NEG
54694: PUSH
54695: LD_INT 1
54697: NEG
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
54728: LD_ADDR_VAR 0 33
54732: PUSH
54733: LD_INT 0
54735: PUSH
54736: LD_INT 0
54738: PUSH
54739: EMPTY
54740: LIST
54741: LIST
54742: PUSH
54743: LD_INT 0
54745: PUSH
54746: LD_INT 1
54748: NEG
54749: PUSH
54750: EMPTY
54751: LIST
54752: LIST
54753: PUSH
54754: LD_INT 1
54756: PUSH
54757: LD_INT 0
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: PUSH
54764: LD_INT 1
54766: PUSH
54767: LD_INT 1
54769: PUSH
54770: EMPTY
54771: LIST
54772: LIST
54773: PUSH
54774: LD_INT 0
54776: PUSH
54777: LD_INT 1
54779: PUSH
54780: EMPTY
54781: LIST
54782: LIST
54783: PUSH
54784: LD_INT 1
54786: NEG
54787: PUSH
54788: LD_INT 0
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 1
54797: NEG
54798: PUSH
54799: LD_INT 1
54801: NEG
54802: PUSH
54803: EMPTY
54804: LIST
54805: LIST
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: PUSH
54811: LD_INT 2
54813: NEG
54814: PUSH
54815: EMPTY
54816: LIST
54817: LIST
54818: PUSH
54819: LD_INT 1
54821: PUSH
54822: LD_INT 1
54824: NEG
54825: PUSH
54826: EMPTY
54827: LIST
54828: LIST
54829: PUSH
54830: LD_INT 2
54832: PUSH
54833: LD_INT 0
54835: PUSH
54836: EMPTY
54837: LIST
54838: LIST
54839: PUSH
54840: LD_INT 2
54842: PUSH
54843: LD_INT 1
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: PUSH
54850: LD_INT 1
54852: PUSH
54853: LD_INT 2
54855: PUSH
54856: EMPTY
54857: LIST
54858: LIST
54859: PUSH
54860: LD_INT 0
54862: PUSH
54863: LD_INT 2
54865: PUSH
54866: EMPTY
54867: LIST
54868: LIST
54869: PUSH
54870: LD_INT 1
54872: NEG
54873: PUSH
54874: LD_INT 1
54876: PUSH
54877: EMPTY
54878: LIST
54879: LIST
54880: PUSH
54881: LD_INT 2
54883: NEG
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: EMPTY
54889: LIST
54890: LIST
54891: PUSH
54892: LD_INT 2
54894: NEG
54895: PUSH
54896: LD_INT 1
54898: NEG
54899: PUSH
54900: EMPTY
54901: LIST
54902: LIST
54903: PUSH
54904: LD_INT 2
54906: NEG
54907: PUSH
54908: LD_INT 2
54910: NEG
54911: PUSH
54912: EMPTY
54913: LIST
54914: LIST
54915: PUSH
54916: LD_INT 2
54918: NEG
54919: PUSH
54920: LD_INT 3
54922: NEG
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 2
54930: PUSH
54931: LD_INT 1
54933: NEG
54934: PUSH
54935: EMPTY
54936: LIST
54937: LIST
54938: PUSH
54939: LD_INT 3
54941: PUSH
54942: LD_INT 1
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 1
54951: PUSH
54952: LD_INT 3
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: NEG
54962: PUSH
54963: LD_INT 2
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 3
54972: NEG
54973: PUSH
54974: LD_INT 2
54976: NEG
54977: PUSH
54978: EMPTY
54979: LIST
54980: LIST
54981: PUSH
54982: EMPTY
54983: LIST
54984: LIST
54985: LIST
54986: LIST
54987: LIST
54988: LIST
54989: LIST
54990: LIST
54991: LIST
54992: LIST
54993: LIST
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
55007: LD_ADDR_VAR 0 34
55011: PUSH
55012: LD_INT 0
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 0
55024: PUSH
55025: LD_INT 1
55027: NEG
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: PUSH
55036: LD_INT 0
55038: PUSH
55039: EMPTY
55040: LIST
55041: LIST
55042: PUSH
55043: LD_INT 1
55045: PUSH
55046: LD_INT 1
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_INT 0
55055: PUSH
55056: LD_INT 1
55058: PUSH
55059: EMPTY
55060: LIST
55061: LIST
55062: PUSH
55063: LD_INT 1
55065: NEG
55066: PUSH
55067: LD_INT 0
55069: PUSH
55070: EMPTY
55071: LIST
55072: LIST
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: LD_INT 1
55080: NEG
55081: PUSH
55082: EMPTY
55083: LIST
55084: LIST
55085: PUSH
55086: LD_INT 1
55088: NEG
55089: PUSH
55090: LD_INT 2
55092: NEG
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: PUSH
55098: LD_INT 0
55100: PUSH
55101: LD_INT 2
55103: NEG
55104: PUSH
55105: EMPTY
55106: LIST
55107: LIST
55108: PUSH
55109: LD_INT 1
55111: PUSH
55112: LD_INT 1
55114: NEG
55115: PUSH
55116: EMPTY
55117: LIST
55118: LIST
55119: PUSH
55120: LD_INT 2
55122: PUSH
55123: LD_INT 1
55125: PUSH
55126: EMPTY
55127: LIST
55128: LIST
55129: PUSH
55130: LD_INT 2
55132: PUSH
55133: LD_INT 2
55135: PUSH
55136: EMPTY
55137: LIST
55138: LIST
55139: PUSH
55140: LD_INT 1
55142: PUSH
55143: LD_INT 2
55145: PUSH
55146: EMPTY
55147: LIST
55148: LIST
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: LD_INT 1
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_INT 2
55163: NEG
55164: PUSH
55165: LD_INT 0
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 2
55174: NEG
55175: PUSH
55176: LD_INT 1
55178: NEG
55179: PUSH
55180: EMPTY
55181: LIST
55182: LIST
55183: PUSH
55184: LD_INT 2
55186: NEG
55187: PUSH
55188: LD_INT 2
55190: NEG
55191: PUSH
55192: EMPTY
55193: LIST
55194: LIST
55195: PUSH
55196: LD_INT 1
55198: NEG
55199: PUSH
55200: LD_INT 3
55202: NEG
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 1
55210: PUSH
55211: LD_INT 2
55213: NEG
55214: PUSH
55215: EMPTY
55216: LIST
55217: LIST
55218: PUSH
55219: LD_INT 3
55221: PUSH
55222: LD_INT 2
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: PUSH
55229: LD_INT 2
55231: PUSH
55232: LD_INT 3
55234: PUSH
55235: EMPTY
55236: LIST
55237: LIST
55238: PUSH
55239: LD_INT 2
55241: NEG
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: NEG
55253: PUSH
55254: LD_INT 1
55256: NEG
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: EMPTY
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55287: LD_ADDR_VAR 0 35
55291: PUSH
55292: LD_INT 0
55294: PUSH
55295: LD_INT 0
55297: PUSH
55298: EMPTY
55299: LIST
55300: LIST
55301: PUSH
55302: LD_INT 0
55304: PUSH
55305: LD_INT 1
55307: NEG
55308: PUSH
55309: EMPTY
55310: LIST
55311: LIST
55312: PUSH
55313: LD_INT 1
55315: PUSH
55316: LD_INT 0
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: PUSH
55323: LD_INT 1
55325: PUSH
55326: LD_INT 1
55328: PUSH
55329: EMPTY
55330: LIST
55331: LIST
55332: PUSH
55333: LD_INT 0
55335: PUSH
55336: LD_INT 1
55338: PUSH
55339: EMPTY
55340: LIST
55341: LIST
55342: PUSH
55343: LD_INT 1
55345: NEG
55346: PUSH
55347: LD_INT 0
55349: PUSH
55350: EMPTY
55351: LIST
55352: LIST
55353: PUSH
55354: LD_INT 1
55356: NEG
55357: PUSH
55358: LD_INT 1
55360: NEG
55361: PUSH
55362: EMPTY
55363: LIST
55364: LIST
55365: PUSH
55366: LD_INT 2
55368: PUSH
55369: LD_INT 1
55371: PUSH
55372: EMPTY
55373: LIST
55374: LIST
55375: PUSH
55376: LD_INT 2
55378: NEG
55379: PUSH
55380: LD_INT 1
55382: NEG
55383: PUSH
55384: EMPTY
55385: LIST
55386: LIST
55387: PUSH
55388: EMPTY
55389: LIST
55390: LIST
55391: LIST
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55399: LD_ADDR_VAR 0 36
55403: PUSH
55404: LD_INT 0
55406: PUSH
55407: LD_INT 0
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 0
55416: PUSH
55417: LD_INT 1
55419: NEG
55420: PUSH
55421: EMPTY
55422: LIST
55423: LIST
55424: PUSH
55425: LD_INT 1
55427: PUSH
55428: LD_INT 0
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: PUSH
55435: LD_INT 1
55437: PUSH
55438: LD_INT 1
55440: PUSH
55441: EMPTY
55442: LIST
55443: LIST
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: PUSH
55455: LD_INT 1
55457: NEG
55458: PUSH
55459: LD_INT 0
55461: PUSH
55462: EMPTY
55463: LIST
55464: LIST
55465: PUSH
55466: LD_INT 1
55468: NEG
55469: PUSH
55470: LD_INT 1
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: NEG
55481: PUSH
55482: LD_INT 2
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 1
55492: PUSH
55493: LD_INT 2
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55511: LD_ADDR_VAR 0 37
55515: PUSH
55516: LD_INT 0
55518: PUSH
55519: LD_INT 0
55521: PUSH
55522: EMPTY
55523: LIST
55524: LIST
55525: PUSH
55526: LD_INT 0
55528: PUSH
55529: LD_INT 1
55531: NEG
55532: PUSH
55533: EMPTY
55534: LIST
55535: LIST
55536: PUSH
55537: LD_INT 1
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 1
55549: PUSH
55550: LD_INT 1
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 0
55559: PUSH
55560: LD_INT 1
55562: PUSH
55563: EMPTY
55564: LIST
55565: LIST
55566: PUSH
55567: LD_INT 1
55569: NEG
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 1
55580: NEG
55581: PUSH
55582: LD_INT 1
55584: NEG
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: LD_INT 1
55592: PUSH
55593: LD_INT 1
55595: NEG
55596: PUSH
55597: EMPTY
55598: LIST
55599: LIST
55600: PUSH
55601: LD_INT 1
55603: NEG
55604: PUSH
55605: LD_INT 1
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: EMPTY
55613: LIST
55614: LIST
55615: LIST
55616: LIST
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
55623: LD_ADDR_VAR 0 38
55627: PUSH
55628: LD_INT 0
55630: PUSH
55631: LD_INT 0
55633: PUSH
55634: EMPTY
55635: LIST
55636: LIST
55637: PUSH
55638: LD_INT 0
55640: PUSH
55641: LD_INT 1
55643: NEG
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 1
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_INT 1
55661: PUSH
55662: LD_INT 1
55664: PUSH
55665: EMPTY
55666: LIST
55667: LIST
55668: PUSH
55669: LD_INT 0
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: EMPTY
55676: LIST
55677: LIST
55678: PUSH
55679: LD_INT 1
55681: NEG
55682: PUSH
55683: LD_INT 0
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: LD_INT 1
55696: NEG
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 2
55704: PUSH
55705: LD_INT 1
55707: PUSH
55708: EMPTY
55709: LIST
55710: LIST
55711: PUSH
55712: LD_INT 2
55714: NEG
55715: PUSH
55716: LD_INT 1
55718: NEG
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: EMPTY
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
55735: LD_ADDR_VAR 0 39
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 0
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 0
55752: PUSH
55753: LD_INT 1
55755: NEG
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: PUSH
55761: LD_INT 1
55763: PUSH
55764: LD_INT 0
55766: PUSH
55767: EMPTY
55768: LIST
55769: LIST
55770: PUSH
55771: LD_INT 1
55773: PUSH
55774: LD_INT 1
55776: PUSH
55777: EMPTY
55778: LIST
55779: LIST
55780: PUSH
55781: LD_INT 0
55783: PUSH
55784: LD_INT 1
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 0
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 1
55804: NEG
55805: PUSH
55806: LD_INT 1
55808: NEG
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: PUSH
55814: LD_INT 1
55816: NEG
55817: PUSH
55818: LD_INT 2
55820: NEG
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: LD_INT 2
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: EMPTY
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: LIST
55843: LIST
55844: LIST
55845: LIST
55846: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
55847: LD_ADDR_VAR 0 40
55851: PUSH
55852: LD_INT 0
55854: PUSH
55855: LD_INT 0
55857: PUSH
55858: EMPTY
55859: LIST
55860: LIST
55861: PUSH
55862: LD_INT 0
55864: PUSH
55865: LD_INT 1
55867: NEG
55868: PUSH
55869: EMPTY
55870: LIST
55871: LIST
55872: PUSH
55873: LD_INT 1
55875: PUSH
55876: LD_INT 0
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: PUSH
55883: LD_INT 1
55885: PUSH
55886: LD_INT 1
55888: PUSH
55889: EMPTY
55890: LIST
55891: LIST
55892: PUSH
55893: LD_INT 0
55895: PUSH
55896: LD_INT 1
55898: PUSH
55899: EMPTY
55900: LIST
55901: LIST
55902: PUSH
55903: LD_INT 1
55905: NEG
55906: PUSH
55907: LD_INT 0
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 1
55916: NEG
55917: PUSH
55918: LD_INT 1
55920: NEG
55921: PUSH
55922: EMPTY
55923: LIST
55924: LIST
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: LD_INT 1
55931: NEG
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: PUSH
55937: LD_INT 1
55939: NEG
55940: PUSH
55941: LD_INT 1
55943: PUSH
55944: EMPTY
55945: LIST
55946: LIST
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55959: LD_ADDR_VAR 0 41
55963: PUSH
55964: LD_INT 0
55966: PUSH
55967: LD_INT 0
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: PUSH
55974: LD_INT 0
55976: PUSH
55977: LD_INT 1
55979: NEG
55980: PUSH
55981: EMPTY
55982: LIST
55983: LIST
55984: PUSH
55985: LD_INT 1
55987: PUSH
55988: LD_INT 0
55990: PUSH
55991: EMPTY
55992: LIST
55993: LIST
55994: PUSH
55995: LD_INT 1
55997: PUSH
55998: LD_INT 1
56000: PUSH
56001: EMPTY
56002: LIST
56003: LIST
56004: PUSH
56005: LD_INT 0
56007: PUSH
56008: LD_INT 1
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PUSH
56019: LD_INT 0
56021: PUSH
56022: EMPTY
56023: LIST
56024: LIST
56025: PUSH
56026: LD_INT 1
56028: NEG
56029: PUSH
56030: LD_INT 1
56032: NEG
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: PUSH
56038: LD_INT 1
56040: NEG
56041: PUSH
56042: LD_INT 2
56044: NEG
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 1
56052: PUSH
56053: LD_INT 1
56055: NEG
56056: PUSH
56057: EMPTY
56058: LIST
56059: LIST
56060: PUSH
56061: LD_INT 2
56063: PUSH
56064: LD_INT 0
56066: PUSH
56067: EMPTY
56068: LIST
56069: LIST
56070: PUSH
56071: LD_INT 2
56073: PUSH
56074: LD_INT 1
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: LD_INT 2
56083: PUSH
56084: LD_INT 2
56086: PUSH
56087: EMPTY
56088: LIST
56089: LIST
56090: PUSH
56091: LD_INT 1
56093: PUSH
56094: LD_INT 2
56096: PUSH
56097: EMPTY
56098: LIST
56099: LIST
56100: PUSH
56101: LD_INT 1
56103: NEG
56104: PUSH
56105: LD_INT 1
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: LD_INT 2
56114: NEG
56115: PUSH
56116: LD_INT 0
56118: PUSH
56119: EMPTY
56120: LIST
56121: LIST
56122: PUSH
56123: LD_INT 2
56125: NEG
56126: PUSH
56127: LD_INT 1
56129: NEG
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: PUSH
56135: LD_INT 2
56137: NEG
56138: PUSH
56139: LD_INT 2
56141: NEG
56142: PUSH
56143: EMPTY
56144: LIST
56145: LIST
56146: PUSH
56147: LD_INT 2
56149: NEG
56150: PUSH
56151: LD_INT 3
56153: NEG
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: PUSH
56159: LD_INT 2
56161: PUSH
56162: LD_INT 1
56164: NEG
56165: PUSH
56166: EMPTY
56167: LIST
56168: LIST
56169: PUSH
56170: LD_INT 3
56172: PUSH
56173: LD_INT 0
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: PUSH
56180: LD_INT 3
56182: PUSH
56183: LD_INT 1
56185: PUSH
56186: EMPTY
56187: LIST
56188: LIST
56189: PUSH
56190: LD_INT 3
56192: PUSH
56193: LD_INT 2
56195: PUSH
56196: EMPTY
56197: LIST
56198: LIST
56199: PUSH
56200: LD_INT 3
56202: PUSH
56203: LD_INT 3
56205: PUSH
56206: EMPTY
56207: LIST
56208: LIST
56209: PUSH
56210: LD_INT 2
56212: PUSH
56213: LD_INT 3
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 2
56222: NEG
56223: PUSH
56224: LD_INT 1
56226: PUSH
56227: EMPTY
56228: LIST
56229: LIST
56230: PUSH
56231: LD_INT 3
56233: NEG
56234: PUSH
56235: LD_INT 0
56237: PUSH
56238: EMPTY
56239: LIST
56240: LIST
56241: PUSH
56242: LD_INT 3
56244: NEG
56245: PUSH
56246: LD_INT 1
56248: NEG
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: NEG
56257: PUSH
56258: LD_INT 2
56260: NEG
56261: PUSH
56262: EMPTY
56263: LIST
56264: LIST
56265: PUSH
56266: LD_INT 3
56268: NEG
56269: PUSH
56270: LD_INT 3
56272: NEG
56273: PUSH
56274: EMPTY
56275: LIST
56276: LIST
56277: PUSH
56278: EMPTY
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: LIST
56293: LIST
56294: LIST
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: LIST
56301: LIST
56302: LIST
56303: LIST
56304: LIST
56305: LIST
56306: LIST
56307: LIST
56308: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
56309: LD_ADDR_VAR 0 42
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: LD_INT 0
56319: PUSH
56320: EMPTY
56321: LIST
56322: LIST
56323: PUSH
56324: LD_INT 0
56326: PUSH
56327: LD_INT 1
56329: NEG
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: LD_INT 1
56337: PUSH
56338: LD_INT 0
56340: PUSH
56341: EMPTY
56342: LIST
56343: LIST
56344: PUSH
56345: LD_INT 1
56347: PUSH
56348: LD_INT 1
56350: PUSH
56351: EMPTY
56352: LIST
56353: LIST
56354: PUSH
56355: LD_INT 0
56357: PUSH
56358: LD_INT 1
56360: PUSH
56361: EMPTY
56362: LIST
56363: LIST
56364: PUSH
56365: LD_INT 1
56367: NEG
56368: PUSH
56369: LD_INT 0
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: PUSH
56376: LD_INT 1
56378: NEG
56379: PUSH
56380: LD_INT 1
56382: NEG
56383: PUSH
56384: EMPTY
56385: LIST
56386: LIST
56387: PUSH
56388: LD_INT 1
56390: NEG
56391: PUSH
56392: LD_INT 2
56394: NEG
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: PUSH
56400: LD_INT 0
56402: PUSH
56403: LD_INT 2
56405: NEG
56406: PUSH
56407: EMPTY
56408: LIST
56409: LIST
56410: PUSH
56411: LD_INT 1
56413: PUSH
56414: LD_INT 1
56416: NEG
56417: PUSH
56418: EMPTY
56419: LIST
56420: LIST
56421: PUSH
56422: LD_INT 2
56424: PUSH
56425: LD_INT 1
56427: PUSH
56428: EMPTY
56429: LIST
56430: LIST
56431: PUSH
56432: LD_INT 2
56434: PUSH
56435: LD_INT 2
56437: PUSH
56438: EMPTY
56439: LIST
56440: LIST
56441: PUSH
56442: LD_INT 1
56444: PUSH
56445: LD_INT 2
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: PUSH
56452: LD_INT 0
56454: PUSH
56455: LD_INT 2
56457: PUSH
56458: EMPTY
56459: LIST
56460: LIST
56461: PUSH
56462: LD_INT 1
56464: NEG
56465: PUSH
56466: LD_INT 1
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 1
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 2
56499: NEG
56500: PUSH
56501: LD_INT 3
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 1
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 0
56523: PUSH
56524: LD_INT 3
56526: NEG
56527: PUSH
56528: EMPTY
56529: LIST
56530: LIST
56531: PUSH
56532: LD_INT 1
56534: PUSH
56535: LD_INT 2
56537: NEG
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: PUSH
56543: LD_INT 3
56545: PUSH
56546: LD_INT 2
56548: PUSH
56549: EMPTY
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 3
56555: PUSH
56556: LD_INT 3
56558: PUSH
56559: EMPTY
56560: LIST
56561: LIST
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: LD_INT 3
56568: PUSH
56569: EMPTY
56570: LIST
56571: LIST
56572: PUSH
56573: LD_INT 1
56575: PUSH
56576: LD_INT 3
56578: PUSH
56579: EMPTY
56580: LIST
56581: LIST
56582: PUSH
56583: LD_INT 0
56585: PUSH
56586: LD_INT 3
56588: PUSH
56589: EMPTY
56590: LIST
56591: LIST
56592: PUSH
56593: LD_INT 1
56595: NEG
56596: PUSH
56597: LD_INT 2
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: LD_INT 2
56610: NEG
56611: PUSH
56612: EMPTY
56613: LIST
56614: LIST
56615: PUSH
56616: LD_INT 3
56618: NEG
56619: PUSH
56620: LD_INT 3
56622: NEG
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: LIST
56633: LIST
56634: LIST
56635: LIST
56636: LIST
56637: LIST
56638: LIST
56639: LIST
56640: LIST
56641: LIST
56642: LIST
56643: LIST
56644: LIST
56645: LIST
56646: LIST
56647: LIST
56648: LIST
56649: LIST
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: LIST
56657: LIST
56658: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
56659: LD_ADDR_VAR 0 43
56663: PUSH
56664: LD_INT 0
56666: PUSH
56667: LD_INT 0
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: PUSH
56674: LD_INT 0
56676: PUSH
56677: LD_INT 1
56679: NEG
56680: PUSH
56681: EMPTY
56682: LIST
56683: LIST
56684: PUSH
56685: LD_INT 1
56687: PUSH
56688: LD_INT 0
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: PUSH
56695: LD_INT 1
56697: PUSH
56698: LD_INT 1
56700: PUSH
56701: EMPTY
56702: LIST
56703: LIST
56704: PUSH
56705: LD_INT 0
56707: PUSH
56708: LD_INT 1
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: PUSH
56715: LD_INT 1
56717: NEG
56718: PUSH
56719: LD_INT 0
56721: PUSH
56722: EMPTY
56723: LIST
56724: LIST
56725: PUSH
56726: LD_INT 1
56728: NEG
56729: PUSH
56730: LD_INT 1
56732: NEG
56733: PUSH
56734: EMPTY
56735: LIST
56736: LIST
56737: PUSH
56738: LD_INT 1
56740: NEG
56741: PUSH
56742: LD_INT 2
56744: NEG
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: PUSH
56750: LD_INT 0
56752: PUSH
56753: LD_INT 2
56755: NEG
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: PUSH
56764: LD_INT 1
56766: NEG
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 2
56774: PUSH
56775: LD_INT 0
56777: PUSH
56778: EMPTY
56779: LIST
56780: LIST
56781: PUSH
56782: LD_INT 2
56784: PUSH
56785: LD_INT 1
56787: PUSH
56788: EMPTY
56789: LIST
56790: LIST
56791: PUSH
56792: LD_INT 1
56794: PUSH
56795: LD_INT 2
56797: PUSH
56798: EMPTY
56799: LIST
56800: LIST
56801: PUSH
56802: LD_INT 0
56804: PUSH
56805: LD_INT 2
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: LD_INT 1
56814: NEG
56815: PUSH
56816: LD_INT 1
56818: PUSH
56819: EMPTY
56820: LIST
56821: LIST
56822: PUSH
56823: LD_INT 2
56825: NEG
56826: PUSH
56827: LD_INT 0
56829: PUSH
56830: EMPTY
56831: LIST
56832: LIST
56833: PUSH
56834: LD_INT 2
56836: NEG
56837: PUSH
56838: LD_INT 1
56840: NEG
56841: PUSH
56842: EMPTY
56843: LIST
56844: LIST
56845: PUSH
56846: LD_INT 1
56848: NEG
56849: PUSH
56850: LD_INT 3
56852: NEG
56853: PUSH
56854: EMPTY
56855: LIST
56856: LIST
56857: PUSH
56858: LD_INT 0
56860: PUSH
56861: LD_INT 3
56863: NEG
56864: PUSH
56865: EMPTY
56866: LIST
56867: LIST
56868: PUSH
56869: LD_INT 1
56871: PUSH
56872: LD_INT 2
56874: NEG
56875: PUSH
56876: EMPTY
56877: LIST
56878: LIST
56879: PUSH
56880: LD_INT 2
56882: PUSH
56883: LD_INT 1
56885: NEG
56886: PUSH
56887: EMPTY
56888: LIST
56889: LIST
56890: PUSH
56891: LD_INT 3
56893: PUSH
56894: LD_INT 0
56896: PUSH
56897: EMPTY
56898: LIST
56899: LIST
56900: PUSH
56901: LD_INT 3
56903: PUSH
56904: LD_INT 1
56906: PUSH
56907: EMPTY
56908: LIST
56909: LIST
56910: PUSH
56911: LD_INT 1
56913: PUSH
56914: LD_INT 3
56916: PUSH
56917: EMPTY
56918: LIST
56919: LIST
56920: PUSH
56921: LD_INT 0
56923: PUSH
56924: LD_INT 3
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PUSH
56931: LD_INT 1
56933: NEG
56934: PUSH
56935: LD_INT 2
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 2
56944: NEG
56945: PUSH
56946: LD_INT 1
56948: PUSH
56949: EMPTY
56950: LIST
56951: LIST
56952: PUSH
56953: LD_INT 3
56955: NEG
56956: PUSH
56957: LD_INT 0
56959: PUSH
56960: EMPTY
56961: LIST
56962: LIST
56963: PUSH
56964: LD_INT 3
56966: NEG
56967: PUSH
56968: LD_INT 1
56970: NEG
56971: PUSH
56972: EMPTY
56973: LIST
56974: LIST
56975: PUSH
56976: EMPTY
56977: LIST
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: LIST
56983: LIST
56984: LIST
56985: LIST
56986: LIST
56987: LIST
56988: LIST
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: LIST
56996: LIST
56997: LIST
56998: LIST
56999: LIST
57000: LIST
57001: LIST
57002: LIST
57003: LIST
57004: LIST
57005: LIST
57006: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57007: LD_ADDR_VAR 0 44
57011: PUSH
57012: LD_INT 0
57014: PUSH
57015: LD_INT 0
57017: PUSH
57018: EMPTY
57019: LIST
57020: LIST
57021: PUSH
57022: LD_INT 0
57024: PUSH
57025: LD_INT 1
57027: NEG
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: PUSH
57033: LD_INT 1
57035: PUSH
57036: LD_INT 0
57038: PUSH
57039: EMPTY
57040: LIST
57041: LIST
57042: PUSH
57043: LD_INT 1
57045: PUSH
57046: LD_INT 1
57048: PUSH
57049: EMPTY
57050: LIST
57051: LIST
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: LD_INT 1
57058: PUSH
57059: EMPTY
57060: LIST
57061: LIST
57062: PUSH
57063: LD_INT 1
57065: NEG
57066: PUSH
57067: LD_INT 0
57069: PUSH
57070: EMPTY
57071: LIST
57072: LIST
57073: PUSH
57074: LD_INT 1
57076: NEG
57077: PUSH
57078: LD_INT 1
57080: NEG
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: PUSH
57086: LD_INT 1
57088: NEG
57089: PUSH
57090: LD_INT 2
57092: NEG
57093: PUSH
57094: EMPTY
57095: LIST
57096: LIST
57097: PUSH
57098: LD_INT 1
57100: PUSH
57101: LD_INT 1
57103: NEG
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PUSH
57109: LD_INT 2
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: PUSH
57119: LD_INT 2
57121: PUSH
57122: LD_INT 1
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: PUSH
57129: LD_INT 2
57131: PUSH
57132: LD_INT 2
57134: PUSH
57135: EMPTY
57136: LIST
57137: LIST
57138: PUSH
57139: LD_INT 1
57141: PUSH
57142: LD_INT 2
57144: PUSH
57145: EMPTY
57146: LIST
57147: LIST
57148: PUSH
57149: LD_INT 1
57151: NEG
57152: PUSH
57153: LD_INT 1
57155: PUSH
57156: EMPTY
57157: LIST
57158: LIST
57159: PUSH
57160: LD_INT 2
57162: NEG
57163: PUSH
57164: LD_INT 0
57166: PUSH
57167: EMPTY
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 2
57173: NEG
57174: PUSH
57175: LD_INT 1
57177: NEG
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: PUSH
57183: LD_INT 2
57185: NEG
57186: PUSH
57187: LD_INT 2
57189: NEG
57190: PUSH
57191: EMPTY
57192: LIST
57193: LIST
57194: PUSH
57195: LD_INT 2
57197: NEG
57198: PUSH
57199: LD_INT 3
57201: NEG
57202: PUSH
57203: EMPTY
57204: LIST
57205: LIST
57206: PUSH
57207: LD_INT 2
57209: PUSH
57210: LD_INT 1
57212: NEG
57213: PUSH
57214: EMPTY
57215: LIST
57216: LIST
57217: PUSH
57218: LD_INT 3
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: EMPTY
57225: LIST
57226: LIST
57227: PUSH
57228: LD_INT 3
57230: PUSH
57231: LD_INT 1
57233: PUSH
57234: EMPTY
57235: LIST
57236: LIST
57237: PUSH
57238: LD_INT 3
57240: PUSH
57241: LD_INT 2
57243: PUSH
57244: EMPTY
57245: LIST
57246: LIST
57247: PUSH
57248: LD_INT 3
57250: PUSH
57251: LD_INT 3
57253: PUSH
57254: EMPTY
57255: LIST
57256: LIST
57257: PUSH
57258: LD_INT 2
57260: PUSH
57261: LD_INT 3
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: PUSH
57268: LD_INT 2
57270: NEG
57271: PUSH
57272: LD_INT 1
57274: PUSH
57275: EMPTY
57276: LIST
57277: LIST
57278: PUSH
57279: LD_INT 3
57281: NEG
57282: PUSH
57283: LD_INT 0
57285: PUSH
57286: EMPTY
57287: LIST
57288: LIST
57289: PUSH
57290: LD_INT 3
57292: NEG
57293: PUSH
57294: LD_INT 1
57296: NEG
57297: PUSH
57298: EMPTY
57299: LIST
57300: LIST
57301: PUSH
57302: LD_INT 3
57304: NEG
57305: PUSH
57306: LD_INT 2
57308: NEG
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: PUSH
57314: LD_INT 3
57316: NEG
57317: PUSH
57318: LD_INT 3
57320: NEG
57321: PUSH
57322: EMPTY
57323: LIST
57324: LIST
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
57357: LD_ADDR_VAR 0 45
57361: PUSH
57362: LD_INT 0
57364: PUSH
57365: LD_INT 0
57367: PUSH
57368: EMPTY
57369: LIST
57370: LIST
57371: PUSH
57372: LD_INT 0
57374: PUSH
57375: LD_INT 1
57377: NEG
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: PUSH
57383: LD_INT 1
57385: PUSH
57386: LD_INT 0
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_INT 1
57395: PUSH
57396: LD_INT 1
57398: PUSH
57399: EMPTY
57400: LIST
57401: LIST
57402: PUSH
57403: LD_INT 0
57405: PUSH
57406: LD_INT 1
57408: PUSH
57409: EMPTY
57410: LIST
57411: LIST
57412: PUSH
57413: LD_INT 1
57415: NEG
57416: PUSH
57417: LD_INT 0
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: PUSH
57428: LD_INT 1
57430: NEG
57431: PUSH
57432: EMPTY
57433: LIST
57434: LIST
57435: PUSH
57436: LD_INT 1
57438: NEG
57439: PUSH
57440: LD_INT 2
57442: NEG
57443: PUSH
57444: EMPTY
57445: LIST
57446: LIST
57447: PUSH
57448: LD_INT 0
57450: PUSH
57451: LD_INT 2
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 1
57461: PUSH
57462: LD_INT 1
57464: NEG
57465: PUSH
57466: EMPTY
57467: LIST
57468: LIST
57469: PUSH
57470: LD_INT 2
57472: PUSH
57473: LD_INT 1
57475: PUSH
57476: EMPTY
57477: LIST
57478: LIST
57479: PUSH
57480: LD_INT 2
57482: PUSH
57483: LD_INT 2
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: PUSH
57490: LD_INT 1
57492: PUSH
57493: LD_INT 2
57495: PUSH
57496: EMPTY
57497: LIST
57498: LIST
57499: PUSH
57500: LD_INT 0
57502: PUSH
57503: LD_INT 2
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 1
57512: NEG
57513: PUSH
57514: LD_INT 1
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: PUSH
57521: LD_INT 2
57523: NEG
57524: PUSH
57525: LD_INT 1
57527: NEG
57528: PUSH
57529: EMPTY
57530: LIST
57531: LIST
57532: PUSH
57533: LD_INT 2
57535: NEG
57536: PUSH
57537: LD_INT 2
57539: NEG
57540: PUSH
57541: EMPTY
57542: LIST
57543: LIST
57544: PUSH
57545: LD_INT 2
57547: NEG
57548: PUSH
57549: LD_INT 3
57551: NEG
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: LD_INT 1
57559: NEG
57560: PUSH
57561: LD_INT 3
57563: NEG
57564: PUSH
57565: EMPTY
57566: LIST
57567: LIST
57568: PUSH
57569: LD_INT 0
57571: PUSH
57572: LD_INT 3
57574: NEG
57575: PUSH
57576: EMPTY
57577: LIST
57578: LIST
57579: PUSH
57580: LD_INT 1
57582: PUSH
57583: LD_INT 2
57585: NEG
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: PUSH
57591: LD_INT 3
57593: PUSH
57594: LD_INT 2
57596: PUSH
57597: EMPTY
57598: LIST
57599: LIST
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 3
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: EMPTY
57618: LIST
57619: LIST
57620: PUSH
57621: LD_INT 1
57623: PUSH
57624: LD_INT 3
57626: PUSH
57627: EMPTY
57628: LIST
57629: LIST
57630: PUSH
57631: LD_INT 0
57633: PUSH
57634: LD_INT 3
57636: PUSH
57637: EMPTY
57638: LIST
57639: LIST
57640: PUSH
57641: LD_INT 1
57643: NEG
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: PUSH
57652: LD_INT 3
57654: NEG
57655: PUSH
57656: LD_INT 2
57658: NEG
57659: PUSH
57660: EMPTY
57661: LIST
57662: LIST
57663: PUSH
57664: LD_INT 3
57666: NEG
57667: PUSH
57668: LD_INT 3
57670: NEG
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: LIST
57689: LIST
57690: LIST
57691: LIST
57692: LIST
57693: LIST
57694: LIST
57695: LIST
57696: LIST
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
57707: LD_ADDR_VAR 0 46
57711: PUSH
57712: LD_INT 0
57714: PUSH
57715: LD_INT 0
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: PUSH
57722: LD_INT 0
57724: PUSH
57725: LD_INT 1
57727: NEG
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: PUSH
57733: LD_INT 1
57735: PUSH
57736: LD_INT 0
57738: PUSH
57739: EMPTY
57740: LIST
57741: LIST
57742: PUSH
57743: LD_INT 1
57745: PUSH
57746: LD_INT 1
57748: PUSH
57749: EMPTY
57750: LIST
57751: LIST
57752: PUSH
57753: LD_INT 0
57755: PUSH
57756: LD_INT 1
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PUSH
57763: LD_INT 1
57765: NEG
57766: PUSH
57767: LD_INT 0
57769: PUSH
57770: EMPTY
57771: LIST
57772: LIST
57773: PUSH
57774: LD_INT 1
57776: NEG
57777: PUSH
57778: LD_INT 1
57780: NEG
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: PUSH
57786: LD_INT 1
57788: NEG
57789: PUSH
57790: LD_INT 2
57792: NEG
57793: PUSH
57794: EMPTY
57795: LIST
57796: LIST
57797: PUSH
57798: LD_INT 0
57800: PUSH
57801: LD_INT 2
57803: NEG
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: PUSH
57809: LD_INT 1
57811: PUSH
57812: LD_INT 1
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 2
57822: PUSH
57823: LD_INT 0
57825: PUSH
57826: EMPTY
57827: LIST
57828: LIST
57829: PUSH
57830: LD_INT 2
57832: PUSH
57833: LD_INT 1
57835: PUSH
57836: EMPTY
57837: LIST
57838: LIST
57839: PUSH
57840: LD_INT 1
57842: PUSH
57843: LD_INT 2
57845: PUSH
57846: EMPTY
57847: LIST
57848: LIST
57849: PUSH
57850: LD_INT 0
57852: PUSH
57853: LD_INT 2
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: PUSH
57860: LD_INT 1
57862: NEG
57863: PUSH
57864: LD_INT 1
57866: PUSH
57867: EMPTY
57868: LIST
57869: LIST
57870: PUSH
57871: LD_INT 2
57873: NEG
57874: PUSH
57875: LD_INT 0
57877: PUSH
57878: EMPTY
57879: LIST
57880: LIST
57881: PUSH
57882: LD_INT 2
57884: NEG
57885: PUSH
57886: LD_INT 1
57888: NEG
57889: PUSH
57890: EMPTY
57891: LIST
57892: LIST
57893: PUSH
57894: LD_INT 1
57896: NEG
57897: PUSH
57898: LD_INT 3
57900: NEG
57901: PUSH
57902: EMPTY
57903: LIST
57904: LIST
57905: PUSH
57906: LD_INT 0
57908: PUSH
57909: LD_INT 3
57911: NEG
57912: PUSH
57913: EMPTY
57914: LIST
57915: LIST
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 2
57922: NEG
57923: PUSH
57924: EMPTY
57925: LIST
57926: LIST
57927: PUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 1
57933: NEG
57934: PUSH
57935: EMPTY
57936: LIST
57937: LIST
57938: PUSH
57939: LD_INT 3
57941: PUSH
57942: LD_INT 0
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 3
57951: PUSH
57952: LD_INT 1
57954: PUSH
57955: EMPTY
57956: LIST
57957: LIST
57958: PUSH
57959: LD_INT 1
57961: PUSH
57962: LD_INT 3
57964: PUSH
57965: EMPTY
57966: LIST
57967: LIST
57968: PUSH
57969: LD_INT 0
57971: PUSH
57972: LD_INT 3
57974: PUSH
57975: EMPTY
57976: LIST
57977: LIST
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PUSH
57983: LD_INT 2
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: PUSH
57990: LD_INT 2
57992: NEG
57993: PUSH
57994: LD_INT 1
57996: PUSH
57997: EMPTY
57998: LIST
57999: LIST
58000: PUSH
58001: LD_INT 3
58003: NEG
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: EMPTY
58009: LIST
58010: LIST
58011: PUSH
58012: LD_INT 3
58014: NEG
58015: PUSH
58016: LD_INT 1
58018: NEG
58019: PUSH
58020: EMPTY
58021: LIST
58022: LIST
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: LIST
58028: LIST
58029: LIST
58030: LIST
58031: LIST
58032: LIST
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: LIST
58047: LIST
58048: LIST
58049: LIST
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58055: LD_ADDR_VAR 0 47
58059: PUSH
58060: LD_INT 0
58062: PUSH
58063: LD_INT 0
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: PUSH
58070: LD_INT 0
58072: PUSH
58073: LD_INT 1
58075: NEG
58076: PUSH
58077: EMPTY
58078: LIST
58079: LIST
58080: PUSH
58081: LD_INT 1
58083: PUSH
58084: LD_INT 0
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: PUSH
58091: LD_INT 1
58093: PUSH
58094: LD_INT 1
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 0
58103: PUSH
58104: LD_INT 1
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 1
58113: NEG
58114: PUSH
58115: LD_INT 0
58117: PUSH
58118: EMPTY
58119: LIST
58120: LIST
58121: PUSH
58122: LD_INT 1
58124: NEG
58125: PUSH
58126: LD_INT 1
58128: NEG
58129: PUSH
58130: EMPTY
58131: LIST
58132: LIST
58133: PUSH
58134: LD_INT 1
58136: NEG
58137: PUSH
58138: LD_INT 2
58140: NEG
58141: PUSH
58142: EMPTY
58143: LIST
58144: LIST
58145: PUSH
58146: LD_INT 0
58148: PUSH
58149: LD_INT 2
58151: NEG
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: PUSH
58157: LD_INT 1
58159: PUSH
58160: LD_INT 1
58162: NEG
58163: PUSH
58164: EMPTY
58165: LIST
58166: LIST
58167: PUSH
58168: LD_INT 2
58170: NEG
58171: PUSH
58172: LD_INT 1
58174: NEG
58175: PUSH
58176: EMPTY
58177: LIST
58178: LIST
58179: PUSH
58180: LD_INT 2
58182: NEG
58183: PUSH
58184: LD_INT 2
58186: NEG
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: PUSH
58192: EMPTY
58193: LIST
58194: LIST
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: LIST
58203: LIST
58204: LIST
58205: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
58206: LD_ADDR_VAR 0 48
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 0
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 0
58223: PUSH
58224: LD_INT 1
58226: NEG
58227: PUSH
58228: EMPTY
58229: LIST
58230: LIST
58231: PUSH
58232: LD_INT 1
58234: PUSH
58235: LD_INT 0
58237: PUSH
58238: EMPTY
58239: LIST
58240: LIST
58241: PUSH
58242: LD_INT 1
58244: PUSH
58245: LD_INT 1
58247: PUSH
58248: EMPTY
58249: LIST
58250: LIST
58251: PUSH
58252: LD_INT 0
58254: PUSH
58255: LD_INT 1
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 0
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 1
58275: NEG
58276: PUSH
58277: LD_INT 1
58279: NEG
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 1
58287: NEG
58288: PUSH
58289: LD_INT 2
58291: NEG
58292: PUSH
58293: EMPTY
58294: LIST
58295: LIST
58296: PUSH
58297: LD_INT 0
58299: PUSH
58300: LD_INT 2
58302: NEG
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: PUSH
58308: LD_INT 1
58310: PUSH
58311: LD_INT 1
58313: NEG
58314: PUSH
58315: EMPTY
58316: LIST
58317: LIST
58318: PUSH
58319: LD_INT 2
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 1
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: LIST
58346: LIST
58347: LIST
58348: LIST
58349: LIST
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
58353: LD_ADDR_VAR 0 49
58357: PUSH
58358: LD_INT 0
58360: PUSH
58361: LD_INT 0
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 0
58370: PUSH
58371: LD_INT 1
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 0
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 1
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: PUSH
58399: LD_INT 0
58401: PUSH
58402: LD_INT 1
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: PUSH
58409: LD_INT 1
58411: NEG
58412: PUSH
58413: LD_INT 0
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: LD_INT 1
58422: NEG
58423: PUSH
58424: LD_INT 1
58426: NEG
58427: PUSH
58428: EMPTY
58429: LIST
58430: LIST
58431: PUSH
58432: LD_INT 1
58434: PUSH
58435: LD_INT 1
58437: NEG
58438: PUSH
58439: EMPTY
58440: LIST
58441: LIST
58442: PUSH
58443: LD_INT 2
58445: PUSH
58446: LD_INT 0
58448: PUSH
58449: EMPTY
58450: LIST
58451: LIST
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 1
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: PUSH
58463: LD_INT 2
58465: PUSH
58466: LD_INT 2
58468: PUSH
58469: EMPTY
58470: LIST
58471: LIST
58472: PUSH
58473: LD_INT 1
58475: PUSH
58476: LD_INT 2
58478: PUSH
58479: EMPTY
58480: LIST
58481: LIST
58482: PUSH
58483: EMPTY
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: LIST
58489: LIST
58490: LIST
58491: LIST
58492: LIST
58493: LIST
58494: LIST
58495: LIST
58496: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
58497: LD_ADDR_VAR 0 50
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: LD_INT 0
58507: PUSH
58508: EMPTY
58509: LIST
58510: LIST
58511: PUSH
58512: LD_INT 0
58514: PUSH
58515: LD_INT 1
58517: NEG
58518: PUSH
58519: EMPTY
58520: LIST
58521: LIST
58522: PUSH
58523: LD_INT 1
58525: PUSH
58526: LD_INT 0
58528: PUSH
58529: EMPTY
58530: LIST
58531: LIST
58532: PUSH
58533: LD_INT 1
58535: PUSH
58536: LD_INT 1
58538: PUSH
58539: EMPTY
58540: LIST
58541: LIST
58542: PUSH
58543: LD_INT 0
58545: PUSH
58546: LD_INT 1
58548: PUSH
58549: EMPTY
58550: LIST
58551: LIST
58552: PUSH
58553: LD_INT 1
58555: NEG
58556: PUSH
58557: LD_INT 0
58559: PUSH
58560: EMPTY
58561: LIST
58562: LIST
58563: PUSH
58564: LD_INT 1
58566: NEG
58567: PUSH
58568: LD_INT 1
58570: NEG
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: PUSH
58576: LD_INT 2
58578: PUSH
58579: LD_INT 1
58581: PUSH
58582: EMPTY
58583: LIST
58584: LIST
58585: PUSH
58586: LD_INT 2
58588: PUSH
58589: LD_INT 2
58591: PUSH
58592: EMPTY
58593: LIST
58594: LIST
58595: PUSH
58596: LD_INT 1
58598: PUSH
58599: LD_INT 2
58601: PUSH
58602: EMPTY
58603: LIST
58604: LIST
58605: PUSH
58606: LD_INT 0
58608: PUSH
58609: LD_INT 2
58611: PUSH
58612: EMPTY
58613: LIST
58614: LIST
58615: PUSH
58616: LD_INT 1
58618: NEG
58619: PUSH
58620: LD_INT 1
58622: PUSH
58623: EMPTY
58624: LIST
58625: LIST
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: LIST
58632: LIST
58633: LIST
58634: LIST
58635: LIST
58636: LIST
58637: LIST
58638: LIST
58639: LIST
58640: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
58641: LD_ADDR_VAR 0 51
58645: PUSH
58646: LD_INT 0
58648: PUSH
58649: LD_INT 0
58651: PUSH
58652: EMPTY
58653: LIST
58654: LIST
58655: PUSH
58656: LD_INT 0
58658: PUSH
58659: LD_INT 1
58661: NEG
58662: PUSH
58663: EMPTY
58664: LIST
58665: LIST
58666: PUSH
58667: LD_INT 1
58669: PUSH
58670: LD_INT 0
58672: PUSH
58673: EMPTY
58674: LIST
58675: LIST
58676: PUSH
58677: LD_INT 1
58679: PUSH
58680: LD_INT 1
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: PUSH
58687: LD_INT 0
58689: PUSH
58690: LD_INT 1
58692: PUSH
58693: EMPTY
58694: LIST
58695: LIST
58696: PUSH
58697: LD_INT 1
58699: NEG
58700: PUSH
58701: LD_INT 0
58703: PUSH
58704: EMPTY
58705: LIST
58706: LIST
58707: PUSH
58708: LD_INT 1
58710: NEG
58711: PUSH
58712: LD_INT 1
58714: NEG
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: PUSH
58720: LD_INT 1
58722: PUSH
58723: LD_INT 2
58725: PUSH
58726: EMPTY
58727: LIST
58728: LIST
58729: PUSH
58730: LD_INT 0
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: PUSH
58740: LD_INT 1
58742: NEG
58743: PUSH
58744: LD_INT 1
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 2
58753: NEG
58754: PUSH
58755: LD_INT 0
58757: PUSH
58758: EMPTY
58759: LIST
58760: LIST
58761: PUSH
58762: LD_INT 2
58764: NEG
58765: PUSH
58766: LD_INT 1
58768: NEG
58769: PUSH
58770: EMPTY
58771: LIST
58772: LIST
58773: PUSH
58774: EMPTY
58775: LIST
58776: LIST
58777: LIST
58778: LIST
58779: LIST
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: LIST
58787: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58788: LD_ADDR_VAR 0 52
58792: PUSH
58793: LD_INT 0
58795: PUSH
58796: LD_INT 0
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: LD_INT 1
58808: NEG
58809: PUSH
58810: EMPTY
58811: LIST
58812: LIST
58813: PUSH
58814: LD_INT 1
58816: PUSH
58817: LD_INT 0
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: LD_INT 1
58829: PUSH
58830: EMPTY
58831: LIST
58832: LIST
58833: PUSH
58834: LD_INT 0
58836: PUSH
58837: LD_INT 1
58839: PUSH
58840: EMPTY
58841: LIST
58842: LIST
58843: PUSH
58844: LD_INT 1
58846: NEG
58847: PUSH
58848: LD_INT 0
58850: PUSH
58851: EMPTY
58852: LIST
58853: LIST
58854: PUSH
58855: LD_INT 1
58857: NEG
58858: PUSH
58859: LD_INT 1
58861: NEG
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 1
58869: NEG
58870: PUSH
58871: LD_INT 2
58873: NEG
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: PUSH
58879: LD_INT 1
58881: NEG
58882: PUSH
58883: LD_INT 1
58885: PUSH
58886: EMPTY
58887: LIST
58888: LIST
58889: PUSH
58890: LD_INT 2
58892: NEG
58893: PUSH
58894: LD_INT 0
58896: PUSH
58897: EMPTY
58898: LIST
58899: LIST
58900: PUSH
58901: LD_INT 2
58903: NEG
58904: PUSH
58905: LD_INT 1
58907: NEG
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 2
58915: NEG
58916: PUSH
58917: LD_INT 2
58919: NEG
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: LIST
58930: LIST
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: LIST
58936: LIST
58937: LIST
58938: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
58939: LD_ADDR_VAR 0 53
58943: PUSH
58944: LD_INT 0
58946: PUSH
58947: LD_INT 0
58949: PUSH
58950: EMPTY
58951: LIST
58952: LIST
58953: PUSH
58954: LD_INT 0
58956: PUSH
58957: LD_INT 1
58959: NEG
58960: PUSH
58961: EMPTY
58962: LIST
58963: LIST
58964: PUSH
58965: LD_INT 1
58967: PUSH
58968: LD_INT 0
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: PUSH
58975: LD_INT 1
58977: PUSH
58978: LD_INT 1
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: LD_INT 1
58990: PUSH
58991: EMPTY
58992: LIST
58993: LIST
58994: PUSH
58995: LD_INT 1
58997: NEG
58998: PUSH
58999: LD_INT 0
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: PUSH
59006: LD_INT 1
59008: NEG
59009: PUSH
59010: LD_INT 1
59012: NEG
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PUSH
59018: LD_INT 1
59020: NEG
59021: PUSH
59022: LD_INT 2
59024: NEG
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: LD_INT 2
59035: NEG
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: PUSH
59041: LD_INT 1
59043: PUSH
59044: LD_INT 1
59046: NEG
59047: PUSH
59048: EMPTY
59049: LIST
59050: LIST
59051: PUSH
59052: LD_INT 2
59054: PUSH
59055: LD_INT 0
59057: PUSH
59058: EMPTY
59059: LIST
59060: LIST
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: LD_INT 1
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: PUSH
59072: LD_INT 2
59074: PUSH
59075: LD_INT 2
59077: PUSH
59078: EMPTY
59079: LIST
59080: LIST
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: LD_INT 2
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: PUSH
59092: LD_INT 0
59094: PUSH
59095: LD_INT 2
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PUSH
59102: LD_INT 1
59104: NEG
59105: PUSH
59106: LD_INT 1
59108: PUSH
59109: EMPTY
59110: LIST
59111: LIST
59112: PUSH
59113: LD_INT 2
59115: NEG
59116: PUSH
59117: LD_INT 0
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 2
59126: NEG
59127: PUSH
59128: LD_INT 1
59130: NEG
59131: PUSH
59132: EMPTY
59133: LIST
59134: LIST
59135: PUSH
59136: LD_INT 2
59138: NEG
59139: PUSH
59140: LD_INT 2
59142: NEG
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: PUSH
59148: EMPTY
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: LIST
59155: LIST
59156: LIST
59157: LIST
59158: LIST
59159: LIST
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: LIST
59165: LIST
59166: LIST
59167: LIST
59168: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59169: LD_ADDR_VAR 0 54
59173: PUSH
59174: LD_INT 0
59176: PUSH
59177: LD_INT 0
59179: PUSH
59180: EMPTY
59181: LIST
59182: LIST
59183: PUSH
59184: LD_INT 0
59186: PUSH
59187: LD_INT 1
59189: NEG
59190: PUSH
59191: EMPTY
59192: LIST
59193: LIST
59194: PUSH
59195: LD_INT 1
59197: PUSH
59198: LD_INT 0
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: PUSH
59205: LD_INT 1
59207: PUSH
59208: LD_INT 1
59210: PUSH
59211: EMPTY
59212: LIST
59213: LIST
59214: PUSH
59215: LD_INT 0
59217: PUSH
59218: LD_INT 1
59220: PUSH
59221: EMPTY
59222: LIST
59223: LIST
59224: PUSH
59225: LD_INT 1
59227: NEG
59228: PUSH
59229: LD_INT 0
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 1
59238: NEG
59239: PUSH
59240: LD_INT 1
59242: NEG
59243: PUSH
59244: EMPTY
59245: LIST
59246: LIST
59247: PUSH
59248: LD_INT 1
59250: NEG
59251: PUSH
59252: LD_INT 2
59254: NEG
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: PUSH
59260: LD_INT 0
59262: PUSH
59263: LD_INT 2
59265: NEG
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: PUSH
59271: LD_INT 1
59273: PUSH
59274: LD_INT 1
59276: NEG
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 2
59284: PUSH
59285: LD_INT 0
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 2
59294: PUSH
59295: LD_INT 1
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: LD_INT 2
59304: PUSH
59305: LD_INT 2
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: PUSH
59312: LD_INT 1
59314: PUSH
59315: LD_INT 2
59317: PUSH
59318: EMPTY
59319: LIST
59320: LIST
59321: PUSH
59322: LD_INT 0
59324: PUSH
59325: LD_INT 2
59327: PUSH
59328: EMPTY
59329: LIST
59330: LIST
59331: PUSH
59332: LD_INT 1
59334: NEG
59335: PUSH
59336: LD_INT 1
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PUSH
59343: LD_INT 2
59345: NEG
59346: PUSH
59347: LD_INT 0
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 2
59356: NEG
59357: PUSH
59358: LD_INT 1
59360: NEG
59361: PUSH
59362: EMPTY
59363: LIST
59364: LIST
59365: PUSH
59366: LD_INT 2
59368: NEG
59369: PUSH
59370: LD_INT 2
59372: NEG
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: LIST
59398: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59399: LD_ADDR_VAR 0 55
59403: PUSH
59404: LD_INT 0
59406: PUSH
59407: LD_INT 0
59409: PUSH
59410: EMPTY
59411: LIST
59412: LIST
59413: PUSH
59414: LD_INT 0
59416: PUSH
59417: LD_INT 1
59419: NEG
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: PUSH
59425: LD_INT 1
59427: PUSH
59428: LD_INT 0
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: PUSH
59435: LD_INT 1
59437: PUSH
59438: LD_INT 1
59440: PUSH
59441: EMPTY
59442: LIST
59443: LIST
59444: PUSH
59445: LD_INT 0
59447: PUSH
59448: LD_INT 1
59450: PUSH
59451: EMPTY
59452: LIST
59453: LIST
59454: PUSH
59455: LD_INT 1
59457: NEG
59458: PUSH
59459: LD_INT 0
59461: PUSH
59462: EMPTY
59463: LIST
59464: LIST
59465: PUSH
59466: LD_INT 1
59468: NEG
59469: PUSH
59470: LD_INT 1
59472: NEG
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: PUSH
59478: LD_INT 1
59480: NEG
59481: PUSH
59482: LD_INT 2
59484: NEG
59485: PUSH
59486: EMPTY
59487: LIST
59488: LIST
59489: PUSH
59490: LD_INT 0
59492: PUSH
59493: LD_INT 2
59495: NEG
59496: PUSH
59497: EMPTY
59498: LIST
59499: LIST
59500: PUSH
59501: LD_INT 1
59503: PUSH
59504: LD_INT 1
59506: NEG
59507: PUSH
59508: EMPTY
59509: LIST
59510: LIST
59511: PUSH
59512: LD_INT 2
59514: PUSH
59515: LD_INT 0
59517: PUSH
59518: EMPTY
59519: LIST
59520: LIST
59521: PUSH
59522: LD_INT 2
59524: PUSH
59525: LD_INT 1
59527: PUSH
59528: EMPTY
59529: LIST
59530: LIST
59531: PUSH
59532: LD_INT 2
59534: PUSH
59535: LD_INT 2
59537: PUSH
59538: EMPTY
59539: LIST
59540: LIST
59541: PUSH
59542: LD_INT 1
59544: PUSH
59545: LD_INT 2
59547: PUSH
59548: EMPTY
59549: LIST
59550: LIST
59551: PUSH
59552: LD_INT 0
59554: PUSH
59555: LD_INT 2
59557: PUSH
59558: EMPTY
59559: LIST
59560: LIST
59561: PUSH
59562: LD_INT 1
59564: NEG
59565: PUSH
59566: LD_INT 1
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: PUSH
59573: LD_INT 2
59575: NEG
59576: PUSH
59577: LD_INT 0
59579: PUSH
59580: EMPTY
59581: LIST
59582: LIST
59583: PUSH
59584: LD_INT 2
59586: NEG
59587: PUSH
59588: LD_INT 1
59590: NEG
59591: PUSH
59592: EMPTY
59593: LIST
59594: LIST
59595: PUSH
59596: LD_INT 2
59598: NEG
59599: PUSH
59600: LD_INT 2
59602: NEG
59603: PUSH
59604: EMPTY
59605: LIST
59606: LIST
59607: PUSH
59608: EMPTY
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: LIST
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: LIST
59621: LIST
59622: LIST
59623: LIST
59624: LIST
59625: LIST
59626: LIST
59627: LIST
59628: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59629: LD_ADDR_VAR 0 56
59633: PUSH
59634: LD_INT 0
59636: PUSH
59637: LD_INT 0
59639: PUSH
59640: EMPTY
59641: LIST
59642: LIST
59643: PUSH
59644: LD_INT 0
59646: PUSH
59647: LD_INT 1
59649: NEG
59650: PUSH
59651: EMPTY
59652: LIST
59653: LIST
59654: PUSH
59655: LD_INT 1
59657: PUSH
59658: LD_INT 0
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: PUSH
59665: LD_INT 1
59667: PUSH
59668: LD_INT 1
59670: PUSH
59671: EMPTY
59672: LIST
59673: LIST
59674: PUSH
59675: LD_INT 0
59677: PUSH
59678: LD_INT 1
59680: PUSH
59681: EMPTY
59682: LIST
59683: LIST
59684: PUSH
59685: LD_INT 1
59687: NEG
59688: PUSH
59689: LD_INT 0
59691: PUSH
59692: EMPTY
59693: LIST
59694: LIST
59695: PUSH
59696: LD_INT 1
59698: NEG
59699: PUSH
59700: LD_INT 1
59702: NEG
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: PUSH
59708: LD_INT 1
59710: NEG
59711: PUSH
59712: LD_INT 2
59714: NEG
59715: PUSH
59716: EMPTY
59717: LIST
59718: LIST
59719: PUSH
59720: LD_INT 0
59722: PUSH
59723: LD_INT 2
59725: NEG
59726: PUSH
59727: EMPTY
59728: LIST
59729: LIST
59730: PUSH
59731: LD_INT 1
59733: PUSH
59734: LD_INT 1
59736: NEG
59737: PUSH
59738: EMPTY
59739: LIST
59740: LIST
59741: PUSH
59742: LD_INT 2
59744: PUSH
59745: LD_INT 0
59747: PUSH
59748: EMPTY
59749: LIST
59750: LIST
59751: PUSH
59752: LD_INT 2
59754: PUSH
59755: LD_INT 1
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 2
59767: PUSH
59768: EMPTY
59769: LIST
59770: LIST
59771: PUSH
59772: LD_INT 1
59774: PUSH
59775: LD_INT 2
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: PUSH
59782: LD_INT 0
59784: PUSH
59785: LD_INT 2
59787: PUSH
59788: EMPTY
59789: LIST
59790: LIST
59791: PUSH
59792: LD_INT 1
59794: NEG
59795: PUSH
59796: LD_INT 1
59798: PUSH
59799: EMPTY
59800: LIST
59801: LIST
59802: PUSH
59803: LD_INT 2
59805: NEG
59806: PUSH
59807: LD_INT 0
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: PUSH
59814: LD_INT 2
59816: NEG
59817: PUSH
59818: LD_INT 1
59820: NEG
59821: PUSH
59822: EMPTY
59823: LIST
59824: LIST
59825: PUSH
59826: LD_INT 2
59828: NEG
59829: PUSH
59830: LD_INT 2
59832: NEG
59833: PUSH
59834: EMPTY
59835: LIST
59836: LIST
59837: PUSH
59838: EMPTY
59839: LIST
59840: LIST
59841: LIST
59842: LIST
59843: LIST
59844: LIST
59845: LIST
59846: LIST
59847: LIST
59848: LIST
59849: LIST
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: LIST
59858: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
59859: LD_ADDR_VAR 0 57
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: LD_INT 0
59869: PUSH
59870: EMPTY
59871: LIST
59872: LIST
59873: PUSH
59874: LD_INT 0
59876: PUSH
59877: LD_INT 1
59879: NEG
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 1
59887: PUSH
59888: LD_INT 0
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: LD_INT 1
59897: PUSH
59898: LD_INT 1
59900: PUSH
59901: EMPTY
59902: LIST
59903: LIST
59904: PUSH
59905: LD_INT 0
59907: PUSH
59908: LD_INT 1
59910: PUSH
59911: EMPTY
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 1
59917: NEG
59918: PUSH
59919: LD_INT 0
59921: PUSH
59922: EMPTY
59923: LIST
59924: LIST
59925: PUSH
59926: LD_INT 1
59928: NEG
59929: PUSH
59930: LD_INT 1
59932: NEG
59933: PUSH
59934: EMPTY
59935: LIST
59936: LIST
59937: PUSH
59938: LD_INT 1
59940: NEG
59941: PUSH
59942: LD_INT 2
59944: NEG
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: PUSH
59950: LD_INT 0
59952: PUSH
59953: LD_INT 2
59955: NEG
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 1
59963: PUSH
59964: LD_INT 1
59966: NEG
59967: PUSH
59968: EMPTY
59969: LIST
59970: LIST
59971: PUSH
59972: LD_INT 2
59974: PUSH
59975: LD_INT 0
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PUSH
59982: LD_INT 2
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: PUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 2
59997: PUSH
59998: EMPTY
59999: LIST
60000: LIST
60001: PUSH
60002: LD_INT 1
60004: PUSH
60005: LD_INT 2
60007: PUSH
60008: EMPTY
60009: LIST
60010: LIST
60011: PUSH
60012: LD_INT 0
60014: PUSH
60015: LD_INT 2
60017: PUSH
60018: EMPTY
60019: LIST
60020: LIST
60021: PUSH
60022: LD_INT 1
60024: NEG
60025: PUSH
60026: LD_INT 1
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: PUSH
60033: LD_INT 2
60035: NEG
60036: PUSH
60037: LD_INT 0
60039: PUSH
60040: EMPTY
60041: LIST
60042: LIST
60043: PUSH
60044: LD_INT 2
60046: NEG
60047: PUSH
60048: LD_INT 1
60050: NEG
60051: PUSH
60052: EMPTY
60053: LIST
60054: LIST
60055: PUSH
60056: LD_INT 2
60058: NEG
60059: PUSH
60060: LD_INT 2
60062: NEG
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PUSH
60068: EMPTY
60069: LIST
60070: LIST
60071: LIST
60072: LIST
60073: LIST
60074: LIST
60075: LIST
60076: LIST
60077: LIST
60078: LIST
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: LIST
60084: LIST
60085: LIST
60086: LIST
60087: LIST
60088: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
60089: LD_ADDR_VAR 0 58
60093: PUSH
60094: LD_INT 0
60096: PUSH
60097: LD_INT 0
60099: PUSH
60100: EMPTY
60101: LIST
60102: LIST
60103: PUSH
60104: LD_INT 0
60106: PUSH
60107: LD_INT 1
60109: NEG
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 1
60117: PUSH
60118: LD_INT 0
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: LD_INT 1
60127: PUSH
60128: LD_INT 1
60130: PUSH
60131: EMPTY
60132: LIST
60133: LIST
60134: PUSH
60135: LD_INT 0
60137: PUSH
60138: LD_INT 1
60140: PUSH
60141: EMPTY
60142: LIST
60143: LIST
60144: PUSH
60145: LD_INT 1
60147: NEG
60148: PUSH
60149: LD_INT 0
60151: PUSH
60152: EMPTY
60153: LIST
60154: LIST
60155: PUSH
60156: LD_INT 1
60158: NEG
60159: PUSH
60160: LD_INT 1
60162: NEG
60163: PUSH
60164: EMPTY
60165: LIST
60166: LIST
60167: PUSH
60168: LD_INT 1
60170: NEG
60171: PUSH
60172: LD_INT 2
60174: NEG
60175: PUSH
60176: EMPTY
60177: LIST
60178: LIST
60179: PUSH
60180: LD_INT 0
60182: PUSH
60183: LD_INT 2
60185: NEG
60186: PUSH
60187: EMPTY
60188: LIST
60189: LIST
60190: PUSH
60191: LD_INT 1
60193: PUSH
60194: LD_INT 1
60196: NEG
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: LD_INT 0
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 2
60214: PUSH
60215: LD_INT 1
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: LD_INT 2
60227: PUSH
60228: EMPTY
60229: LIST
60230: LIST
60231: PUSH
60232: LD_INT 1
60234: PUSH
60235: LD_INT 2
60237: PUSH
60238: EMPTY
60239: LIST
60240: LIST
60241: PUSH
60242: LD_INT 0
60244: PUSH
60245: LD_INT 2
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: PUSH
60252: LD_INT 1
60254: NEG
60255: PUSH
60256: LD_INT 1
60258: PUSH
60259: EMPTY
60260: LIST
60261: LIST
60262: PUSH
60263: LD_INT 2
60265: NEG
60266: PUSH
60267: LD_INT 0
60269: PUSH
60270: EMPTY
60271: LIST
60272: LIST
60273: PUSH
60274: LD_INT 2
60276: NEG
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: PUSH
60282: EMPTY
60283: LIST
60284: LIST
60285: PUSH
60286: LD_INT 2
60288: NEG
60289: PUSH
60290: LD_INT 2
60292: NEG
60293: PUSH
60294: EMPTY
60295: LIST
60296: LIST
60297: PUSH
60298: EMPTY
60299: LIST
60300: LIST
60301: LIST
60302: LIST
60303: LIST
60304: LIST
60305: LIST
60306: LIST
60307: LIST
60308: LIST
60309: LIST
60310: LIST
60311: LIST
60312: LIST
60313: LIST
60314: LIST
60315: LIST
60316: LIST
60317: LIST
60318: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60319: LD_ADDR_VAR 0 59
60323: PUSH
60324: LD_INT 0
60326: PUSH
60327: LD_INT 0
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 1
60339: NEG
60340: PUSH
60341: EMPTY
60342: LIST
60343: LIST
60344: PUSH
60345: LD_INT 1
60347: PUSH
60348: LD_INT 0
60350: PUSH
60351: EMPTY
60352: LIST
60353: LIST
60354: PUSH
60355: LD_INT 1
60357: PUSH
60358: LD_INT 1
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PUSH
60365: LD_INT 0
60367: PUSH
60368: LD_INT 1
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 1
60377: NEG
60378: PUSH
60379: LD_INT 0
60381: PUSH
60382: EMPTY
60383: LIST
60384: LIST
60385: PUSH
60386: LD_INT 1
60388: NEG
60389: PUSH
60390: LD_INT 1
60392: NEG
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: PUSH
60398: EMPTY
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: LIST
60405: LIST
60406: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60407: LD_ADDR_VAR 0 60
60411: PUSH
60412: LD_INT 0
60414: PUSH
60415: LD_INT 0
60417: PUSH
60418: EMPTY
60419: LIST
60420: LIST
60421: PUSH
60422: LD_INT 0
60424: PUSH
60425: LD_INT 1
60427: NEG
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: PUSH
60433: LD_INT 1
60435: PUSH
60436: LD_INT 0
60438: PUSH
60439: EMPTY
60440: LIST
60441: LIST
60442: PUSH
60443: LD_INT 1
60445: PUSH
60446: LD_INT 1
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PUSH
60453: LD_INT 0
60455: PUSH
60456: LD_INT 1
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: PUSH
60463: LD_INT 1
60465: NEG
60466: PUSH
60467: LD_INT 0
60469: PUSH
60470: EMPTY
60471: LIST
60472: LIST
60473: PUSH
60474: LD_INT 1
60476: NEG
60477: PUSH
60478: LD_INT 1
60480: NEG
60481: PUSH
60482: EMPTY
60483: LIST
60484: LIST
60485: PUSH
60486: EMPTY
60487: LIST
60488: LIST
60489: LIST
60490: LIST
60491: LIST
60492: LIST
60493: LIST
60494: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60495: LD_ADDR_VAR 0 61
60499: PUSH
60500: LD_INT 0
60502: PUSH
60503: LD_INT 0
60505: PUSH
60506: EMPTY
60507: LIST
60508: LIST
60509: PUSH
60510: LD_INT 0
60512: PUSH
60513: LD_INT 1
60515: NEG
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 1
60523: PUSH
60524: LD_INT 0
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: PUSH
60531: LD_INT 1
60533: PUSH
60534: LD_INT 1
60536: PUSH
60537: EMPTY
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 0
60543: PUSH
60544: LD_INT 1
60546: PUSH
60547: EMPTY
60548: LIST
60549: LIST
60550: PUSH
60551: LD_INT 1
60553: NEG
60554: PUSH
60555: LD_INT 0
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 1
60568: NEG
60569: PUSH
60570: EMPTY
60571: LIST
60572: LIST
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: LIST
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60583: LD_ADDR_VAR 0 62
60587: PUSH
60588: LD_INT 0
60590: PUSH
60591: LD_INT 0
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: LD_INT 0
60600: PUSH
60601: LD_INT 1
60603: NEG
60604: PUSH
60605: EMPTY
60606: LIST
60607: LIST
60608: PUSH
60609: LD_INT 1
60611: PUSH
60612: LD_INT 0
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 1
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 1
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 0
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: NEG
60653: PUSH
60654: LD_INT 1
60656: NEG
60657: PUSH
60658: EMPTY
60659: LIST
60660: LIST
60661: PUSH
60662: EMPTY
60663: LIST
60664: LIST
60665: LIST
60666: LIST
60667: LIST
60668: LIST
60669: LIST
60670: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60671: LD_ADDR_VAR 0 63
60675: PUSH
60676: LD_INT 0
60678: PUSH
60679: LD_INT 0
60681: PUSH
60682: EMPTY
60683: LIST
60684: LIST
60685: PUSH
60686: LD_INT 0
60688: PUSH
60689: LD_INT 1
60691: NEG
60692: PUSH
60693: EMPTY
60694: LIST
60695: LIST
60696: PUSH
60697: LD_INT 1
60699: PUSH
60700: LD_INT 0
60702: PUSH
60703: EMPTY
60704: LIST
60705: LIST
60706: PUSH
60707: LD_INT 1
60709: PUSH
60710: LD_INT 1
60712: PUSH
60713: EMPTY
60714: LIST
60715: LIST
60716: PUSH
60717: LD_INT 0
60719: PUSH
60720: LD_INT 1
60722: PUSH
60723: EMPTY
60724: LIST
60725: LIST
60726: PUSH
60727: LD_INT 1
60729: NEG
60730: PUSH
60731: LD_INT 0
60733: PUSH
60734: EMPTY
60735: LIST
60736: LIST
60737: PUSH
60738: LD_INT 1
60740: NEG
60741: PUSH
60742: LD_INT 1
60744: NEG
60745: PUSH
60746: EMPTY
60747: LIST
60748: LIST
60749: PUSH
60750: EMPTY
60751: LIST
60752: LIST
60753: LIST
60754: LIST
60755: LIST
60756: LIST
60757: LIST
60758: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
60759: LD_ADDR_VAR 0 64
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PUSH
60774: LD_INT 0
60776: PUSH
60777: LD_INT 1
60779: NEG
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: PUSH
60785: LD_INT 1
60787: PUSH
60788: LD_INT 0
60790: PUSH
60791: EMPTY
60792: LIST
60793: LIST
60794: PUSH
60795: LD_INT 1
60797: PUSH
60798: LD_INT 1
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 0
60807: PUSH
60808: LD_INT 1
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: LD_INT 1
60817: NEG
60818: PUSH
60819: LD_INT 0
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: PUSH
60826: LD_INT 1
60828: NEG
60829: PUSH
60830: LD_INT 1
60832: NEG
60833: PUSH
60834: EMPTY
60835: LIST
60836: LIST
60837: PUSH
60838: EMPTY
60839: LIST
60840: LIST
60841: LIST
60842: LIST
60843: LIST
60844: LIST
60845: LIST
60846: ST_TO_ADDR
// end ; 1 :
60847: GO 66744
60849: LD_INT 1
60851: DOUBLE
60852: EQUAL
60853: IFTRUE 60857
60855: GO 63480
60857: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
60858: LD_ADDR_VAR 0 11
60862: PUSH
60863: LD_INT 1
60865: NEG
60866: PUSH
60867: LD_INT 3
60869: NEG
60870: PUSH
60871: EMPTY
60872: LIST
60873: LIST
60874: PUSH
60875: LD_INT 0
60877: PUSH
60878: LD_INT 3
60880: NEG
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: PUSH
60886: LD_INT 1
60888: PUSH
60889: LD_INT 2
60891: NEG
60892: PUSH
60893: EMPTY
60894: LIST
60895: LIST
60896: PUSH
60897: EMPTY
60898: LIST
60899: LIST
60900: LIST
60901: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
60902: LD_ADDR_VAR 0 12
60906: PUSH
60907: LD_INT 2
60909: PUSH
60910: LD_INT 1
60912: NEG
60913: PUSH
60914: EMPTY
60915: LIST
60916: LIST
60917: PUSH
60918: LD_INT 3
60920: PUSH
60921: LD_INT 0
60923: PUSH
60924: EMPTY
60925: LIST
60926: LIST
60927: PUSH
60928: LD_INT 3
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: EMPTY
60935: LIST
60936: LIST
60937: PUSH
60938: EMPTY
60939: LIST
60940: LIST
60941: LIST
60942: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
60943: LD_ADDR_VAR 0 13
60947: PUSH
60948: LD_INT 3
60950: PUSH
60951: LD_INT 2
60953: PUSH
60954: EMPTY
60955: LIST
60956: LIST
60957: PUSH
60958: LD_INT 3
60960: PUSH
60961: LD_INT 3
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: PUSH
60968: LD_INT 2
60970: PUSH
60971: LD_INT 3
60973: PUSH
60974: EMPTY
60975: LIST
60976: LIST
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: LIST
60982: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60983: LD_ADDR_VAR 0 14
60987: PUSH
60988: LD_INT 1
60990: PUSH
60991: LD_INT 3
60993: PUSH
60994: EMPTY
60995: LIST
60996: LIST
60997: PUSH
60998: LD_INT 0
61000: PUSH
61001: LD_INT 3
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: PUSH
61008: LD_INT 1
61010: NEG
61011: PUSH
61012: LD_INT 2
61014: PUSH
61015: EMPTY
61016: LIST
61017: LIST
61018: PUSH
61019: EMPTY
61020: LIST
61021: LIST
61022: LIST
61023: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61024: LD_ADDR_VAR 0 15
61028: PUSH
61029: LD_INT 2
61031: NEG
61032: PUSH
61033: LD_INT 1
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 3
61042: NEG
61043: PUSH
61044: LD_INT 0
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PUSH
61051: LD_INT 3
61053: NEG
61054: PUSH
61055: LD_INT 1
61057: NEG
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: PUSH
61063: EMPTY
61064: LIST
61065: LIST
61066: LIST
61067: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61068: LD_ADDR_VAR 0 16
61072: PUSH
61073: LD_INT 2
61075: NEG
61076: PUSH
61077: LD_INT 3
61079: NEG
61080: PUSH
61081: EMPTY
61082: LIST
61083: LIST
61084: PUSH
61085: LD_INT 3
61087: NEG
61088: PUSH
61089: LD_INT 2
61091: NEG
61092: PUSH
61093: EMPTY
61094: LIST
61095: LIST
61096: PUSH
61097: LD_INT 3
61099: NEG
61100: PUSH
61101: LD_INT 3
61103: NEG
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: EMPTY
61110: LIST
61111: LIST
61112: LIST
61113: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61114: LD_ADDR_VAR 0 17
61118: PUSH
61119: LD_INT 1
61121: NEG
61122: PUSH
61123: LD_INT 3
61125: NEG
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: PUSH
61131: LD_INT 0
61133: PUSH
61134: LD_INT 3
61136: NEG
61137: PUSH
61138: EMPTY
61139: LIST
61140: LIST
61141: PUSH
61142: LD_INT 1
61144: PUSH
61145: LD_INT 2
61147: NEG
61148: PUSH
61149: EMPTY
61150: LIST
61151: LIST
61152: PUSH
61153: EMPTY
61154: LIST
61155: LIST
61156: LIST
61157: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61158: LD_ADDR_VAR 0 18
61162: PUSH
61163: LD_INT 2
61165: PUSH
61166: LD_INT 1
61168: NEG
61169: PUSH
61170: EMPTY
61171: LIST
61172: LIST
61173: PUSH
61174: LD_INT 3
61176: PUSH
61177: LD_INT 0
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: LD_INT 1
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PUSH
61194: EMPTY
61195: LIST
61196: LIST
61197: LIST
61198: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61199: LD_ADDR_VAR 0 19
61203: PUSH
61204: LD_INT 3
61206: PUSH
61207: LD_INT 2
61209: PUSH
61210: EMPTY
61211: LIST
61212: LIST
61213: PUSH
61214: LD_INT 3
61216: PUSH
61217: LD_INT 3
61219: PUSH
61220: EMPTY
61221: LIST
61222: LIST
61223: PUSH
61224: LD_INT 2
61226: PUSH
61227: LD_INT 3
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: LIST
61238: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61239: LD_ADDR_VAR 0 20
61243: PUSH
61244: LD_INT 1
61246: PUSH
61247: LD_INT 3
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 0
61256: PUSH
61257: LD_INT 3
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 1
61266: NEG
61267: PUSH
61268: LD_INT 2
61270: PUSH
61271: EMPTY
61272: LIST
61273: LIST
61274: PUSH
61275: EMPTY
61276: LIST
61277: LIST
61278: LIST
61279: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61280: LD_ADDR_VAR 0 21
61284: PUSH
61285: LD_INT 2
61287: NEG
61288: PUSH
61289: LD_INT 1
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 3
61298: NEG
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: EMPTY
61304: LIST
61305: LIST
61306: PUSH
61307: LD_INT 3
61309: NEG
61310: PUSH
61311: LD_INT 1
61313: NEG
61314: PUSH
61315: EMPTY
61316: LIST
61317: LIST
61318: PUSH
61319: EMPTY
61320: LIST
61321: LIST
61322: LIST
61323: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61324: LD_ADDR_VAR 0 22
61328: PUSH
61329: LD_INT 2
61331: NEG
61332: PUSH
61333: LD_INT 3
61335: NEG
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 3
61343: NEG
61344: PUSH
61345: LD_INT 2
61347: NEG
61348: PUSH
61349: EMPTY
61350: LIST
61351: LIST
61352: PUSH
61353: LD_INT 3
61355: NEG
61356: PUSH
61357: LD_INT 3
61359: NEG
61360: PUSH
61361: EMPTY
61362: LIST
61363: LIST
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: LIST
61369: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
61370: LD_ADDR_VAR 0 23
61374: PUSH
61375: LD_INT 0
61377: PUSH
61378: LD_INT 3
61380: NEG
61381: PUSH
61382: EMPTY
61383: LIST
61384: LIST
61385: PUSH
61386: LD_INT 1
61388: NEG
61389: PUSH
61390: LD_INT 4
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 3
61403: NEG
61404: PUSH
61405: EMPTY
61406: LIST
61407: LIST
61408: PUSH
61409: EMPTY
61410: LIST
61411: LIST
61412: LIST
61413: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
61414: LD_ADDR_VAR 0 24
61418: PUSH
61419: LD_INT 3
61421: PUSH
61422: LD_INT 0
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: LD_INT 1
61434: NEG
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PUSH
61440: LD_INT 4
61442: PUSH
61443: LD_INT 1
61445: PUSH
61446: EMPTY
61447: LIST
61448: LIST
61449: PUSH
61450: EMPTY
61451: LIST
61452: LIST
61453: LIST
61454: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
61455: LD_ADDR_VAR 0 25
61459: PUSH
61460: LD_INT 3
61462: PUSH
61463: LD_INT 3
61465: PUSH
61466: EMPTY
61467: LIST
61468: LIST
61469: PUSH
61470: LD_INT 4
61472: PUSH
61473: LD_INT 3
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: PUSH
61480: LD_INT 3
61482: PUSH
61483: LD_INT 4
61485: PUSH
61486: EMPTY
61487: LIST
61488: LIST
61489: PUSH
61490: EMPTY
61491: LIST
61492: LIST
61493: LIST
61494: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
61495: LD_ADDR_VAR 0 26
61499: PUSH
61500: LD_INT 0
61502: PUSH
61503: LD_INT 3
61505: PUSH
61506: EMPTY
61507: LIST
61508: LIST
61509: PUSH
61510: LD_INT 1
61512: PUSH
61513: LD_INT 4
61515: PUSH
61516: EMPTY
61517: LIST
61518: LIST
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: PUSH
61524: LD_INT 3
61526: PUSH
61527: EMPTY
61528: LIST
61529: LIST
61530: PUSH
61531: EMPTY
61532: LIST
61533: LIST
61534: LIST
61535: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
61536: LD_ADDR_VAR 0 27
61540: PUSH
61541: LD_INT 3
61543: NEG
61544: PUSH
61545: LD_INT 0
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: LD_INT 3
61554: NEG
61555: PUSH
61556: LD_INT 1
61558: PUSH
61559: EMPTY
61560: LIST
61561: LIST
61562: PUSH
61563: LD_INT 4
61565: NEG
61566: PUSH
61567: LD_INT 1
61569: NEG
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: PUSH
61575: EMPTY
61576: LIST
61577: LIST
61578: LIST
61579: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
61580: LD_ADDR_VAR 0 28
61584: PUSH
61585: LD_INT 3
61587: NEG
61588: PUSH
61589: LD_INT 3
61591: NEG
61592: PUSH
61593: EMPTY
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 3
61599: NEG
61600: PUSH
61601: LD_INT 4
61603: NEG
61604: PUSH
61605: EMPTY
61606: LIST
61607: LIST
61608: PUSH
61609: LD_INT 4
61611: NEG
61612: PUSH
61613: LD_INT 3
61615: NEG
61616: PUSH
61617: EMPTY
61618: LIST
61619: LIST
61620: PUSH
61621: EMPTY
61622: LIST
61623: LIST
61624: LIST
61625: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
61626: LD_ADDR_VAR 0 29
61630: PUSH
61631: LD_INT 1
61633: NEG
61634: PUSH
61635: LD_INT 3
61637: NEG
61638: PUSH
61639: EMPTY
61640: LIST
61641: LIST
61642: PUSH
61643: LD_INT 0
61645: PUSH
61646: LD_INT 3
61648: NEG
61649: PUSH
61650: EMPTY
61651: LIST
61652: LIST
61653: PUSH
61654: LD_INT 1
61656: PUSH
61657: LD_INT 2
61659: NEG
61660: PUSH
61661: EMPTY
61662: LIST
61663: LIST
61664: PUSH
61665: LD_INT 1
61667: NEG
61668: PUSH
61669: LD_INT 4
61671: NEG
61672: PUSH
61673: EMPTY
61674: LIST
61675: LIST
61676: PUSH
61677: LD_INT 0
61679: PUSH
61680: LD_INT 4
61682: NEG
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: PUSH
61688: LD_INT 1
61690: PUSH
61691: LD_INT 3
61693: NEG
61694: PUSH
61695: EMPTY
61696: LIST
61697: LIST
61698: PUSH
61699: LD_INT 1
61701: NEG
61702: PUSH
61703: LD_INT 5
61705: NEG
61706: PUSH
61707: EMPTY
61708: LIST
61709: LIST
61710: PUSH
61711: LD_INT 0
61713: PUSH
61714: LD_INT 5
61716: NEG
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 1
61724: PUSH
61725: LD_INT 4
61727: NEG
61728: PUSH
61729: EMPTY
61730: LIST
61731: LIST
61732: PUSH
61733: LD_INT 1
61735: NEG
61736: PUSH
61737: LD_INT 6
61739: NEG
61740: PUSH
61741: EMPTY
61742: LIST
61743: LIST
61744: PUSH
61745: LD_INT 0
61747: PUSH
61748: LD_INT 6
61750: NEG
61751: PUSH
61752: EMPTY
61753: LIST
61754: LIST
61755: PUSH
61756: LD_INT 1
61758: PUSH
61759: LD_INT 5
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: EMPTY
61768: LIST
61769: LIST
61770: LIST
61771: LIST
61772: LIST
61773: LIST
61774: LIST
61775: LIST
61776: LIST
61777: LIST
61778: LIST
61779: LIST
61780: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
61781: LD_ADDR_VAR 0 30
61785: PUSH
61786: LD_INT 2
61788: PUSH
61789: LD_INT 1
61791: NEG
61792: PUSH
61793: EMPTY
61794: LIST
61795: LIST
61796: PUSH
61797: LD_INT 3
61799: PUSH
61800: LD_INT 0
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 3
61809: PUSH
61810: LD_INT 1
61812: PUSH
61813: EMPTY
61814: LIST
61815: LIST
61816: PUSH
61817: LD_INT 3
61819: PUSH
61820: LD_INT 1
61822: NEG
61823: PUSH
61824: EMPTY
61825: LIST
61826: LIST
61827: PUSH
61828: LD_INT 4
61830: PUSH
61831: LD_INT 0
61833: PUSH
61834: EMPTY
61835: LIST
61836: LIST
61837: PUSH
61838: LD_INT 4
61840: PUSH
61841: LD_INT 1
61843: PUSH
61844: EMPTY
61845: LIST
61846: LIST
61847: PUSH
61848: LD_INT 4
61850: PUSH
61851: LD_INT 1
61853: NEG
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: PUSH
61859: LD_INT 5
61861: PUSH
61862: LD_INT 0
61864: PUSH
61865: EMPTY
61866: LIST
61867: LIST
61868: PUSH
61869: LD_INT 5
61871: PUSH
61872: LD_INT 1
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: PUSH
61879: LD_INT 5
61881: PUSH
61882: LD_INT 1
61884: NEG
61885: PUSH
61886: EMPTY
61887: LIST
61888: LIST
61889: PUSH
61890: LD_INT 6
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: PUSH
61900: LD_INT 6
61902: PUSH
61903: LD_INT 1
61905: PUSH
61906: EMPTY
61907: LIST
61908: LIST
61909: PUSH
61910: EMPTY
61911: LIST
61912: LIST
61913: LIST
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
61924: LD_ADDR_VAR 0 31
61928: PUSH
61929: LD_INT 3
61931: PUSH
61932: LD_INT 2
61934: PUSH
61935: EMPTY
61936: LIST
61937: LIST
61938: PUSH
61939: LD_INT 3
61941: PUSH
61942: LD_INT 3
61944: PUSH
61945: EMPTY
61946: LIST
61947: LIST
61948: PUSH
61949: LD_INT 2
61951: PUSH
61952: LD_INT 3
61954: PUSH
61955: EMPTY
61956: LIST
61957: LIST
61958: PUSH
61959: LD_INT 4
61961: PUSH
61962: LD_INT 3
61964: PUSH
61965: EMPTY
61966: LIST
61967: LIST
61968: PUSH
61969: LD_INT 4
61971: PUSH
61972: LD_INT 4
61974: PUSH
61975: EMPTY
61976: LIST
61977: LIST
61978: PUSH
61979: LD_INT 3
61981: PUSH
61982: LD_INT 4
61984: PUSH
61985: EMPTY
61986: LIST
61987: LIST
61988: PUSH
61989: LD_INT 5
61991: PUSH
61992: LD_INT 4
61994: PUSH
61995: EMPTY
61996: LIST
61997: LIST
61998: PUSH
61999: LD_INT 5
62001: PUSH
62002: LD_INT 5
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 4
62011: PUSH
62012: LD_INT 5
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 6
62021: PUSH
62022: LD_INT 5
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 6
62031: PUSH
62032: LD_INT 6
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 5
62041: PUSH
62042: LD_INT 6
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: EMPTY
62050: LIST
62051: LIST
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
62063: LD_ADDR_VAR 0 32
62067: PUSH
62068: LD_INT 1
62070: PUSH
62071: LD_INT 3
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: LD_INT 0
62080: PUSH
62081: LD_INT 3
62083: PUSH
62084: EMPTY
62085: LIST
62086: LIST
62087: PUSH
62088: LD_INT 1
62090: NEG
62091: PUSH
62092: LD_INT 2
62094: PUSH
62095: EMPTY
62096: LIST
62097: LIST
62098: PUSH
62099: LD_INT 1
62101: PUSH
62102: LD_INT 4
62104: PUSH
62105: EMPTY
62106: LIST
62107: LIST
62108: PUSH
62109: LD_INT 0
62111: PUSH
62112: LD_INT 4
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: PUSH
62119: LD_INT 1
62121: NEG
62122: PUSH
62123: LD_INT 3
62125: PUSH
62126: EMPTY
62127: LIST
62128: LIST
62129: PUSH
62130: LD_INT 1
62132: PUSH
62133: LD_INT 5
62135: PUSH
62136: EMPTY
62137: LIST
62138: LIST
62139: PUSH
62140: LD_INT 0
62142: PUSH
62143: LD_INT 5
62145: PUSH
62146: EMPTY
62147: LIST
62148: LIST
62149: PUSH
62150: LD_INT 1
62152: NEG
62153: PUSH
62154: LD_INT 4
62156: PUSH
62157: EMPTY
62158: LIST
62159: LIST
62160: PUSH
62161: LD_INT 1
62163: PUSH
62164: LD_INT 6
62166: PUSH
62167: EMPTY
62168: LIST
62169: LIST
62170: PUSH
62171: LD_INT 0
62173: PUSH
62174: LD_INT 6
62176: PUSH
62177: EMPTY
62178: LIST
62179: LIST
62180: PUSH
62181: LD_INT 1
62183: NEG
62184: PUSH
62185: LD_INT 5
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: EMPTY
62193: LIST
62194: LIST
62195: LIST
62196: LIST
62197: LIST
62198: LIST
62199: LIST
62200: LIST
62201: LIST
62202: LIST
62203: LIST
62204: LIST
62205: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
62206: LD_ADDR_VAR 0 33
62210: PUSH
62211: LD_INT 2
62213: NEG
62214: PUSH
62215: LD_INT 1
62217: PUSH
62218: EMPTY
62219: LIST
62220: LIST
62221: PUSH
62222: LD_INT 3
62224: NEG
62225: PUSH
62226: LD_INT 0
62228: PUSH
62229: EMPTY
62230: LIST
62231: LIST
62232: PUSH
62233: LD_INT 3
62235: NEG
62236: PUSH
62237: LD_INT 1
62239: NEG
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 3
62247: NEG
62248: PUSH
62249: LD_INT 1
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 4
62258: NEG
62259: PUSH
62260: LD_INT 0
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PUSH
62267: LD_INT 4
62269: NEG
62270: PUSH
62271: LD_INT 1
62273: NEG
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 4
62281: NEG
62282: PUSH
62283: LD_INT 1
62285: PUSH
62286: EMPTY
62287: LIST
62288: LIST
62289: PUSH
62290: LD_INT 5
62292: NEG
62293: PUSH
62294: LD_INT 0
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: PUSH
62301: LD_INT 5
62303: NEG
62304: PUSH
62305: LD_INT 1
62307: NEG
62308: PUSH
62309: EMPTY
62310: LIST
62311: LIST
62312: PUSH
62313: LD_INT 5
62315: NEG
62316: PUSH
62317: LD_INT 1
62319: PUSH
62320: EMPTY
62321: LIST
62322: LIST
62323: PUSH
62324: LD_INT 6
62326: NEG
62327: PUSH
62328: LD_INT 0
62330: PUSH
62331: EMPTY
62332: LIST
62333: LIST
62334: PUSH
62335: LD_INT 6
62337: NEG
62338: PUSH
62339: LD_INT 1
62341: NEG
62342: PUSH
62343: EMPTY
62344: LIST
62345: LIST
62346: PUSH
62347: EMPTY
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
62361: LD_ADDR_VAR 0 34
62365: PUSH
62366: LD_INT 2
62368: NEG
62369: PUSH
62370: LD_INT 3
62372: NEG
62373: PUSH
62374: EMPTY
62375: LIST
62376: LIST
62377: PUSH
62378: LD_INT 3
62380: NEG
62381: PUSH
62382: LD_INT 2
62384: NEG
62385: PUSH
62386: EMPTY
62387: LIST
62388: LIST
62389: PUSH
62390: LD_INT 3
62392: NEG
62393: PUSH
62394: LD_INT 3
62396: NEG
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 3
62404: NEG
62405: PUSH
62406: LD_INT 4
62408: NEG
62409: PUSH
62410: EMPTY
62411: LIST
62412: LIST
62413: PUSH
62414: LD_INT 4
62416: NEG
62417: PUSH
62418: LD_INT 3
62420: NEG
62421: PUSH
62422: EMPTY
62423: LIST
62424: LIST
62425: PUSH
62426: LD_INT 4
62428: NEG
62429: PUSH
62430: LD_INT 4
62432: NEG
62433: PUSH
62434: EMPTY
62435: LIST
62436: LIST
62437: PUSH
62438: LD_INT 4
62440: NEG
62441: PUSH
62442: LD_INT 5
62444: NEG
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PUSH
62450: LD_INT 5
62452: NEG
62453: PUSH
62454: LD_INT 4
62456: NEG
62457: PUSH
62458: EMPTY
62459: LIST
62460: LIST
62461: PUSH
62462: LD_INT 5
62464: NEG
62465: PUSH
62466: LD_INT 5
62468: NEG
62469: PUSH
62470: EMPTY
62471: LIST
62472: LIST
62473: PUSH
62474: LD_INT 5
62476: NEG
62477: PUSH
62478: LD_INT 6
62480: NEG
62481: PUSH
62482: EMPTY
62483: LIST
62484: LIST
62485: PUSH
62486: LD_INT 6
62488: NEG
62489: PUSH
62490: LD_INT 5
62492: NEG
62493: PUSH
62494: EMPTY
62495: LIST
62496: LIST
62497: PUSH
62498: LD_INT 6
62500: NEG
62501: PUSH
62502: LD_INT 6
62504: NEG
62505: PUSH
62506: EMPTY
62507: LIST
62508: LIST
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: LIST
62514: LIST
62515: LIST
62516: LIST
62517: LIST
62518: LIST
62519: LIST
62520: LIST
62521: LIST
62522: LIST
62523: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
62524: LD_ADDR_VAR 0 41
62528: PUSH
62529: LD_INT 0
62531: PUSH
62532: LD_INT 2
62534: NEG
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 1
62542: NEG
62543: PUSH
62544: LD_INT 3
62546: NEG
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 1
62554: PUSH
62555: LD_INT 2
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: EMPTY
62564: LIST
62565: LIST
62566: LIST
62567: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
62568: LD_ADDR_VAR 0 42
62572: PUSH
62573: LD_INT 2
62575: PUSH
62576: LD_INT 0
62578: PUSH
62579: EMPTY
62580: LIST
62581: LIST
62582: PUSH
62583: LD_INT 2
62585: PUSH
62586: LD_INT 1
62588: NEG
62589: PUSH
62590: EMPTY
62591: LIST
62592: LIST
62593: PUSH
62594: LD_INT 3
62596: PUSH
62597: LD_INT 1
62599: PUSH
62600: EMPTY
62601: LIST
62602: LIST
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: LIST
62608: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
62609: LD_ADDR_VAR 0 43
62613: PUSH
62614: LD_INT 2
62616: PUSH
62617: LD_INT 2
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PUSH
62624: LD_INT 3
62626: PUSH
62627: LD_INT 2
62629: PUSH
62630: EMPTY
62631: LIST
62632: LIST
62633: PUSH
62634: LD_INT 2
62636: PUSH
62637: LD_INT 3
62639: PUSH
62640: EMPTY
62641: LIST
62642: LIST
62643: PUSH
62644: EMPTY
62645: LIST
62646: LIST
62647: LIST
62648: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
62649: LD_ADDR_VAR 0 44
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 2
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: LD_INT 1
62666: PUSH
62667: LD_INT 3
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 1
62676: NEG
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: PUSH
62685: EMPTY
62686: LIST
62687: LIST
62688: LIST
62689: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
62690: LD_ADDR_VAR 0 45
62694: PUSH
62695: LD_INT 2
62697: NEG
62698: PUSH
62699: LD_INT 0
62701: PUSH
62702: EMPTY
62703: LIST
62704: LIST
62705: PUSH
62706: LD_INT 2
62708: NEG
62709: PUSH
62710: LD_INT 1
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PUSH
62717: LD_INT 3
62719: NEG
62720: PUSH
62721: LD_INT 1
62723: NEG
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: EMPTY
62730: LIST
62731: LIST
62732: LIST
62733: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
62734: LD_ADDR_VAR 0 46
62738: PUSH
62739: LD_INT 2
62741: NEG
62742: PUSH
62743: LD_INT 2
62745: NEG
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: PUSH
62751: LD_INT 2
62753: NEG
62754: PUSH
62755: LD_INT 3
62757: NEG
62758: PUSH
62759: EMPTY
62760: LIST
62761: LIST
62762: PUSH
62763: LD_INT 3
62765: NEG
62766: PUSH
62767: LD_INT 2
62769: NEG
62770: PUSH
62771: EMPTY
62772: LIST
62773: LIST
62774: PUSH
62775: EMPTY
62776: LIST
62777: LIST
62778: LIST
62779: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
62780: LD_ADDR_VAR 0 47
62784: PUSH
62785: LD_INT 2
62787: NEG
62788: PUSH
62789: LD_INT 3
62791: NEG
62792: PUSH
62793: EMPTY
62794: LIST
62795: LIST
62796: PUSH
62797: LD_INT 1
62799: NEG
62800: PUSH
62801: LD_INT 3
62803: NEG
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: PUSH
62809: EMPTY
62810: LIST
62811: LIST
62812: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
62813: LD_ADDR_VAR 0 48
62817: PUSH
62818: LD_INT 1
62820: PUSH
62821: LD_INT 2
62823: NEG
62824: PUSH
62825: EMPTY
62826: LIST
62827: LIST
62828: PUSH
62829: LD_INT 2
62831: PUSH
62832: LD_INT 1
62834: NEG
62835: PUSH
62836: EMPTY
62837: LIST
62838: LIST
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
62844: LD_ADDR_VAR 0 49
62848: PUSH
62849: LD_INT 3
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 3
62861: PUSH
62862: LD_INT 2
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: EMPTY
62870: LIST
62871: LIST
62872: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
62873: LD_ADDR_VAR 0 50
62877: PUSH
62878: LD_INT 2
62880: PUSH
62881: LD_INT 3
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: PUSH
62888: LD_INT 1
62890: PUSH
62891: LD_INT 3
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
62902: LD_ADDR_VAR 0 51
62906: PUSH
62907: LD_INT 1
62909: NEG
62910: PUSH
62911: LD_INT 2
62913: PUSH
62914: EMPTY
62915: LIST
62916: LIST
62917: PUSH
62918: LD_INT 2
62920: NEG
62921: PUSH
62922: LD_INT 1
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
62933: LD_ADDR_VAR 0 52
62937: PUSH
62938: LD_INT 3
62940: NEG
62941: PUSH
62942: LD_INT 1
62944: NEG
62945: PUSH
62946: EMPTY
62947: LIST
62948: LIST
62949: PUSH
62950: LD_INT 3
62952: NEG
62953: PUSH
62954: LD_INT 2
62956: NEG
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: PUSH
62962: EMPTY
62963: LIST
62964: LIST
62965: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
62966: LD_ADDR_VAR 0 53
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 3
62977: NEG
62978: PUSH
62979: EMPTY
62980: LIST
62981: LIST
62982: PUSH
62983: LD_INT 0
62985: PUSH
62986: LD_INT 3
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: PUSH
62997: LD_INT 2
62999: NEG
63000: PUSH
63001: EMPTY
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: LIST
63009: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
63010: LD_ADDR_VAR 0 54
63014: PUSH
63015: LD_INT 2
63017: PUSH
63018: LD_INT 1
63020: NEG
63021: PUSH
63022: EMPTY
63023: LIST
63024: LIST
63025: PUSH
63026: LD_INT 3
63028: PUSH
63029: LD_INT 0
63031: PUSH
63032: EMPTY
63033: LIST
63034: LIST
63035: PUSH
63036: LD_INT 3
63038: PUSH
63039: LD_INT 1
63041: PUSH
63042: EMPTY
63043: LIST
63044: LIST
63045: PUSH
63046: EMPTY
63047: LIST
63048: LIST
63049: LIST
63050: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
63051: LD_ADDR_VAR 0 55
63055: PUSH
63056: LD_INT 3
63058: PUSH
63059: LD_INT 2
63061: PUSH
63062: EMPTY
63063: LIST
63064: LIST
63065: PUSH
63066: LD_INT 3
63068: PUSH
63069: LD_INT 3
63071: PUSH
63072: EMPTY
63073: LIST
63074: LIST
63075: PUSH
63076: LD_INT 2
63078: PUSH
63079: LD_INT 3
63081: PUSH
63082: EMPTY
63083: LIST
63084: LIST
63085: PUSH
63086: EMPTY
63087: LIST
63088: LIST
63089: LIST
63090: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63091: LD_ADDR_VAR 0 56
63095: PUSH
63096: LD_INT 1
63098: PUSH
63099: LD_INT 3
63101: PUSH
63102: EMPTY
63103: LIST
63104: LIST
63105: PUSH
63106: LD_INT 0
63108: PUSH
63109: LD_INT 3
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: PUSH
63116: LD_INT 1
63118: NEG
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: EMPTY
63124: LIST
63125: LIST
63126: PUSH
63127: EMPTY
63128: LIST
63129: LIST
63130: LIST
63131: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63132: LD_ADDR_VAR 0 57
63136: PUSH
63137: LD_INT 2
63139: NEG
63140: PUSH
63141: LD_INT 1
63143: PUSH
63144: EMPTY
63145: LIST
63146: LIST
63147: PUSH
63148: LD_INT 3
63150: NEG
63151: PUSH
63152: LD_INT 0
63154: PUSH
63155: EMPTY
63156: LIST
63157: LIST
63158: PUSH
63159: LD_INT 3
63161: NEG
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: EMPTY
63172: LIST
63173: LIST
63174: LIST
63175: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63176: LD_ADDR_VAR 0 58
63180: PUSH
63181: LD_INT 2
63183: NEG
63184: PUSH
63185: LD_INT 3
63187: NEG
63188: PUSH
63189: EMPTY
63190: LIST
63191: LIST
63192: PUSH
63193: LD_INT 3
63195: NEG
63196: PUSH
63197: LD_INT 2
63199: NEG
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: PUSH
63205: LD_INT 3
63207: NEG
63208: PUSH
63209: LD_INT 3
63211: NEG
63212: PUSH
63213: EMPTY
63214: LIST
63215: LIST
63216: PUSH
63217: EMPTY
63218: LIST
63219: LIST
63220: LIST
63221: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
63222: LD_ADDR_VAR 0 59
63226: PUSH
63227: LD_INT 1
63229: NEG
63230: PUSH
63231: LD_INT 2
63233: NEG
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: PUSH
63239: LD_INT 0
63241: PUSH
63242: LD_INT 2
63244: NEG
63245: PUSH
63246: EMPTY
63247: LIST
63248: LIST
63249: PUSH
63250: LD_INT 1
63252: PUSH
63253: LD_INT 1
63255: NEG
63256: PUSH
63257: EMPTY
63258: LIST
63259: LIST
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: LIST
63265: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
63266: LD_ADDR_VAR 0 60
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: LD_INT 1
63276: NEG
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: PUSH
63282: LD_INT 2
63284: PUSH
63285: LD_INT 0
63287: PUSH
63288: EMPTY
63289: LIST
63290: LIST
63291: PUSH
63292: LD_INT 2
63294: PUSH
63295: LD_INT 1
63297: PUSH
63298: EMPTY
63299: LIST
63300: LIST
63301: PUSH
63302: EMPTY
63303: LIST
63304: LIST
63305: LIST
63306: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
63307: LD_ADDR_VAR 0 61
63311: PUSH
63312: LD_INT 2
63314: PUSH
63315: LD_INT 1
63317: PUSH
63318: EMPTY
63319: LIST
63320: LIST
63321: PUSH
63322: LD_INT 2
63324: PUSH
63325: LD_INT 2
63327: PUSH
63328: EMPTY
63329: LIST
63330: LIST
63331: PUSH
63332: LD_INT 1
63334: PUSH
63335: LD_INT 2
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: EMPTY
63343: LIST
63344: LIST
63345: LIST
63346: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
63347: LD_ADDR_VAR 0 62
63351: PUSH
63352: LD_INT 1
63354: PUSH
63355: LD_INT 2
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 0
63364: PUSH
63365: LD_INT 2
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: NEG
63375: PUSH
63376: LD_INT 1
63378: PUSH
63379: EMPTY
63380: LIST
63381: LIST
63382: PUSH
63383: EMPTY
63384: LIST
63385: LIST
63386: LIST
63387: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
63388: LD_ADDR_VAR 0 63
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: LD_INT 1
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: PUSH
63404: LD_INT 2
63406: NEG
63407: PUSH
63408: LD_INT 0
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 2
63417: NEG
63418: PUSH
63419: LD_INT 1
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63432: LD_ADDR_VAR 0 64
63436: PUSH
63437: LD_INT 1
63439: NEG
63440: PUSH
63441: LD_INT 2
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: NEG
63452: PUSH
63453: LD_INT 1
63455: NEG
63456: PUSH
63457: EMPTY
63458: LIST
63459: LIST
63460: PUSH
63461: LD_INT 2
63463: NEG
63464: PUSH
63465: LD_INT 2
63467: NEG
63468: PUSH
63469: EMPTY
63470: LIST
63471: LIST
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: LIST
63477: ST_TO_ADDR
// end ; 2 :
63478: GO 66744
63480: LD_INT 2
63482: DOUBLE
63483: EQUAL
63484: IFTRUE 63488
63486: GO 66743
63488: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
63489: LD_ADDR_VAR 0 29
63493: PUSH
63494: LD_INT 4
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: LD_INT 4
63506: PUSH
63507: LD_INT 1
63509: NEG
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: PUSH
63515: LD_INT 5
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: EMPTY
63522: LIST
63523: LIST
63524: PUSH
63525: LD_INT 5
63527: PUSH
63528: LD_INT 1
63530: PUSH
63531: EMPTY
63532: LIST
63533: LIST
63534: PUSH
63535: LD_INT 4
63537: PUSH
63538: LD_INT 1
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 3
63547: PUSH
63548: LD_INT 0
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: LD_INT 3
63557: PUSH
63558: LD_INT 1
63560: NEG
63561: PUSH
63562: EMPTY
63563: LIST
63564: LIST
63565: PUSH
63566: LD_INT 3
63568: PUSH
63569: LD_INT 2
63571: NEG
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 5
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: LD_INT 3
63589: PUSH
63590: LD_INT 3
63592: PUSH
63593: EMPTY
63594: LIST
63595: LIST
63596: PUSH
63597: LD_INT 3
63599: PUSH
63600: LD_INT 2
63602: PUSH
63603: EMPTY
63604: LIST
63605: LIST
63606: PUSH
63607: LD_INT 4
63609: PUSH
63610: LD_INT 3
63612: PUSH
63613: EMPTY
63614: LIST
63615: LIST
63616: PUSH
63617: LD_INT 4
63619: PUSH
63620: LD_INT 4
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 3
63629: PUSH
63630: LD_INT 4
63632: PUSH
63633: EMPTY
63634: LIST
63635: LIST
63636: PUSH
63637: LD_INT 2
63639: PUSH
63640: LD_INT 3
63642: PUSH
63643: EMPTY
63644: LIST
63645: LIST
63646: PUSH
63647: LD_INT 2
63649: PUSH
63650: LD_INT 2
63652: PUSH
63653: EMPTY
63654: LIST
63655: LIST
63656: PUSH
63657: LD_INT 4
63659: PUSH
63660: LD_INT 2
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: PUSH
63667: LD_INT 2
63669: PUSH
63670: LD_INT 4
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: PUSH
63677: LD_INT 0
63679: PUSH
63680: LD_INT 4
63682: PUSH
63683: EMPTY
63684: LIST
63685: LIST
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: LD_INT 3
63692: PUSH
63693: EMPTY
63694: LIST
63695: LIST
63696: PUSH
63697: LD_INT 1
63699: PUSH
63700: LD_INT 4
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: LD_INT 5
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: PUSH
63717: LD_INT 0
63719: PUSH
63720: LD_INT 5
63722: PUSH
63723: EMPTY
63724: LIST
63725: LIST
63726: PUSH
63727: LD_INT 1
63729: NEG
63730: PUSH
63731: LD_INT 4
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 1
63740: NEG
63741: PUSH
63742: LD_INT 3
63744: PUSH
63745: EMPTY
63746: LIST
63747: LIST
63748: PUSH
63749: LD_INT 2
63751: PUSH
63752: LD_INT 5
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: PUSH
63759: LD_INT 2
63761: NEG
63762: PUSH
63763: LD_INT 3
63765: PUSH
63766: EMPTY
63767: LIST
63768: LIST
63769: PUSH
63770: LD_INT 3
63772: NEG
63773: PUSH
63774: LD_INT 0
63776: PUSH
63777: EMPTY
63778: LIST
63779: LIST
63780: PUSH
63781: LD_INT 3
63783: NEG
63784: PUSH
63785: LD_INT 1
63787: NEG
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PUSH
63793: LD_INT 2
63795: NEG
63796: PUSH
63797: LD_INT 0
63799: PUSH
63800: EMPTY
63801: LIST
63802: LIST
63803: PUSH
63804: LD_INT 2
63806: NEG
63807: PUSH
63808: LD_INT 1
63810: PUSH
63811: EMPTY
63812: LIST
63813: LIST
63814: PUSH
63815: LD_INT 3
63817: NEG
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 4
63828: NEG
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 4
63839: NEG
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 4
63851: NEG
63852: PUSH
63853: LD_INT 2
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 2
63863: NEG
63864: PUSH
63865: LD_INT 2
63867: PUSH
63868: EMPTY
63869: LIST
63870: LIST
63871: PUSH
63872: LD_INT 4
63874: NEG
63875: PUSH
63876: LD_INT 4
63878: NEG
63879: PUSH
63880: EMPTY
63881: LIST
63882: LIST
63883: PUSH
63884: LD_INT 4
63886: NEG
63887: PUSH
63888: LD_INT 5
63890: NEG
63891: PUSH
63892: EMPTY
63893: LIST
63894: LIST
63895: PUSH
63896: LD_INT 3
63898: NEG
63899: PUSH
63900: LD_INT 4
63902: NEG
63903: PUSH
63904: EMPTY
63905: LIST
63906: LIST
63907: PUSH
63908: LD_INT 3
63910: NEG
63911: PUSH
63912: LD_INT 3
63914: NEG
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: PUSH
63920: LD_INT 4
63922: NEG
63923: PUSH
63924: LD_INT 3
63926: NEG
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 5
63934: NEG
63935: PUSH
63936: LD_INT 4
63938: NEG
63939: PUSH
63940: EMPTY
63941: LIST
63942: LIST
63943: PUSH
63944: LD_INT 5
63946: NEG
63947: PUSH
63948: LD_INT 5
63950: NEG
63951: PUSH
63952: EMPTY
63953: LIST
63954: LIST
63955: PUSH
63956: LD_INT 3
63958: NEG
63959: PUSH
63960: LD_INT 5
63962: NEG
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 5
63970: NEG
63971: PUSH
63972: LD_INT 3
63974: NEG
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: LIST
63985: LIST
63986: LIST
63987: LIST
63988: LIST
63989: LIST
63990: LIST
63991: LIST
63992: LIST
63993: LIST
63994: LIST
63995: LIST
63996: LIST
63997: LIST
63998: LIST
63999: LIST
64000: LIST
64001: LIST
64002: LIST
64003: LIST
64004: LIST
64005: LIST
64006: LIST
64007: LIST
64008: LIST
64009: LIST
64010: LIST
64011: LIST
64012: LIST
64013: LIST
64014: LIST
64015: LIST
64016: LIST
64017: LIST
64018: LIST
64019: LIST
64020: LIST
64021: LIST
64022: LIST
64023: LIST
64024: LIST
64025: LIST
64026: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
64027: LD_ADDR_VAR 0 30
64031: PUSH
64032: LD_INT 4
64034: PUSH
64035: LD_INT 4
64037: PUSH
64038: EMPTY
64039: LIST
64040: LIST
64041: PUSH
64042: LD_INT 4
64044: PUSH
64045: LD_INT 3
64047: PUSH
64048: EMPTY
64049: LIST
64050: LIST
64051: PUSH
64052: LD_INT 5
64054: PUSH
64055: LD_INT 4
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: PUSH
64062: LD_INT 5
64064: PUSH
64065: LD_INT 5
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: PUSH
64072: LD_INT 4
64074: PUSH
64075: LD_INT 5
64077: PUSH
64078: EMPTY
64079: LIST
64080: LIST
64081: PUSH
64082: LD_INT 3
64084: PUSH
64085: LD_INT 4
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PUSH
64092: LD_INT 3
64094: PUSH
64095: LD_INT 3
64097: PUSH
64098: EMPTY
64099: LIST
64100: LIST
64101: PUSH
64102: LD_INT 5
64104: PUSH
64105: LD_INT 3
64107: PUSH
64108: EMPTY
64109: LIST
64110: LIST
64111: PUSH
64112: LD_INT 3
64114: PUSH
64115: LD_INT 5
64117: PUSH
64118: EMPTY
64119: LIST
64120: LIST
64121: PUSH
64122: LD_INT 0
64124: PUSH
64125: LD_INT 3
64127: PUSH
64128: EMPTY
64129: LIST
64130: LIST
64131: PUSH
64132: LD_INT 0
64134: PUSH
64135: LD_INT 2
64137: PUSH
64138: EMPTY
64139: LIST
64140: LIST
64141: PUSH
64142: LD_INT 1
64144: PUSH
64145: LD_INT 3
64147: PUSH
64148: EMPTY
64149: LIST
64150: LIST
64151: PUSH
64152: LD_INT 1
64154: PUSH
64155: LD_INT 4
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: PUSH
64162: LD_INT 0
64164: PUSH
64165: LD_INT 4
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: PUSH
64172: LD_INT 1
64174: NEG
64175: PUSH
64176: LD_INT 3
64178: PUSH
64179: EMPTY
64180: LIST
64181: LIST
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: LD_INT 2
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 2
64196: PUSH
64197: LD_INT 4
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: PUSH
64204: LD_INT 2
64206: NEG
64207: PUSH
64208: LD_INT 2
64210: PUSH
64211: EMPTY
64212: LIST
64213: LIST
64214: PUSH
64215: LD_INT 4
64217: NEG
64218: PUSH
64219: LD_INT 0
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: PUSH
64226: LD_INT 4
64228: NEG
64229: PUSH
64230: LD_INT 1
64232: NEG
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 3
64240: NEG
64241: PUSH
64242: LD_INT 0
64244: PUSH
64245: EMPTY
64246: LIST
64247: LIST
64248: PUSH
64249: LD_INT 3
64251: NEG
64252: PUSH
64253: LD_INT 1
64255: PUSH
64256: EMPTY
64257: LIST
64258: LIST
64259: PUSH
64260: LD_INT 4
64262: NEG
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: EMPTY
64268: LIST
64269: LIST
64270: PUSH
64271: LD_INT 5
64273: NEG
64274: PUSH
64275: LD_INT 0
64277: PUSH
64278: EMPTY
64279: LIST
64280: LIST
64281: PUSH
64282: LD_INT 5
64284: NEG
64285: PUSH
64286: LD_INT 1
64288: NEG
64289: PUSH
64290: EMPTY
64291: LIST
64292: LIST
64293: PUSH
64294: LD_INT 5
64296: NEG
64297: PUSH
64298: LD_INT 2
64300: NEG
64301: PUSH
64302: EMPTY
64303: LIST
64304: LIST
64305: PUSH
64306: LD_INT 3
64308: NEG
64309: PUSH
64310: LD_INT 2
64312: PUSH
64313: EMPTY
64314: LIST
64315: LIST
64316: PUSH
64317: LD_INT 3
64319: NEG
64320: PUSH
64321: LD_INT 3
64323: NEG
64324: PUSH
64325: EMPTY
64326: LIST
64327: LIST
64328: PUSH
64329: LD_INT 3
64331: NEG
64332: PUSH
64333: LD_INT 4
64335: NEG
64336: PUSH
64337: EMPTY
64338: LIST
64339: LIST
64340: PUSH
64341: LD_INT 2
64343: NEG
64344: PUSH
64345: LD_INT 3
64347: NEG
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: PUSH
64353: LD_INT 2
64355: NEG
64356: PUSH
64357: LD_INT 2
64359: NEG
64360: PUSH
64361: EMPTY
64362: LIST
64363: LIST
64364: PUSH
64365: LD_INT 3
64367: NEG
64368: PUSH
64369: LD_INT 2
64371: NEG
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: PUSH
64377: LD_INT 4
64379: NEG
64380: PUSH
64381: LD_INT 3
64383: NEG
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: PUSH
64389: LD_INT 4
64391: NEG
64392: PUSH
64393: LD_INT 4
64395: NEG
64396: PUSH
64397: EMPTY
64398: LIST
64399: LIST
64400: PUSH
64401: LD_INT 2
64403: NEG
64404: PUSH
64405: LD_INT 4
64407: NEG
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 4
64415: NEG
64416: PUSH
64417: LD_INT 2
64419: NEG
64420: PUSH
64421: EMPTY
64422: LIST
64423: LIST
64424: PUSH
64425: LD_INT 0
64427: PUSH
64428: LD_INT 4
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 0
64438: PUSH
64439: LD_INT 5
64441: NEG
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: PUSH
64450: LD_INT 4
64452: NEG
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: PUSH
64461: LD_INT 3
64463: NEG
64464: PUSH
64465: EMPTY
64466: LIST
64467: LIST
64468: PUSH
64469: LD_INT 0
64471: PUSH
64472: LD_INT 3
64474: NEG
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 1
64482: NEG
64483: PUSH
64484: LD_INT 4
64486: NEG
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 1
64494: NEG
64495: PUSH
64496: LD_INT 5
64498: NEG
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: LD_INT 3
64509: NEG
64510: PUSH
64511: EMPTY
64512: LIST
64513: LIST
64514: PUSH
64515: LD_INT 2
64517: NEG
64518: PUSH
64519: LD_INT 5
64521: NEG
64522: PUSH
64523: EMPTY
64524: LIST
64525: LIST
64526: PUSH
64527: EMPTY
64528: LIST
64529: LIST
64530: LIST
64531: LIST
64532: LIST
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: LIST
64557: LIST
64558: LIST
64559: LIST
64560: LIST
64561: LIST
64562: LIST
64563: LIST
64564: LIST
64565: LIST
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
64574: LD_ADDR_VAR 0 31
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: LD_INT 4
64584: PUSH
64585: EMPTY
64586: LIST
64587: LIST
64588: PUSH
64589: LD_INT 0
64591: PUSH
64592: LD_INT 3
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: LD_INT 4
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: LD_INT 5
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: LD_INT 0
64621: PUSH
64622: LD_INT 5
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: NEG
64632: PUSH
64633: LD_INT 4
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 1
64642: NEG
64643: PUSH
64644: LD_INT 3
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: PUSH
64654: LD_INT 5
64656: PUSH
64657: EMPTY
64658: LIST
64659: LIST
64660: PUSH
64661: LD_INT 2
64663: NEG
64664: PUSH
64665: LD_INT 3
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 3
64674: NEG
64675: PUSH
64676: LD_INT 0
64678: PUSH
64679: EMPTY
64680: LIST
64681: LIST
64682: PUSH
64683: LD_INT 3
64685: NEG
64686: PUSH
64687: LD_INT 1
64689: NEG
64690: PUSH
64691: EMPTY
64692: LIST
64693: LIST
64694: PUSH
64695: LD_INT 2
64697: NEG
64698: PUSH
64699: LD_INT 0
64701: PUSH
64702: EMPTY
64703: LIST
64704: LIST
64705: PUSH
64706: LD_INT 2
64708: NEG
64709: PUSH
64710: LD_INT 1
64712: PUSH
64713: EMPTY
64714: LIST
64715: LIST
64716: PUSH
64717: LD_INT 3
64719: NEG
64720: PUSH
64721: LD_INT 1
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: LD_INT 4
64730: NEG
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 4
64741: NEG
64742: PUSH
64743: LD_INT 1
64745: NEG
64746: PUSH
64747: EMPTY
64748: LIST
64749: LIST
64750: PUSH
64751: LD_INT 4
64753: NEG
64754: PUSH
64755: LD_INT 2
64757: NEG
64758: PUSH
64759: EMPTY
64760: LIST
64761: LIST
64762: PUSH
64763: LD_INT 2
64765: NEG
64766: PUSH
64767: LD_INT 2
64769: PUSH
64770: EMPTY
64771: LIST
64772: LIST
64773: PUSH
64774: LD_INT 4
64776: NEG
64777: PUSH
64778: LD_INT 4
64780: NEG
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 4
64788: NEG
64789: PUSH
64790: LD_INT 5
64792: NEG
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 3
64800: NEG
64801: PUSH
64802: LD_INT 4
64804: NEG
64805: PUSH
64806: EMPTY
64807: LIST
64808: LIST
64809: PUSH
64810: LD_INT 3
64812: NEG
64813: PUSH
64814: LD_INT 3
64816: NEG
64817: PUSH
64818: EMPTY
64819: LIST
64820: LIST
64821: PUSH
64822: LD_INT 4
64824: NEG
64825: PUSH
64826: LD_INT 3
64828: NEG
64829: PUSH
64830: EMPTY
64831: LIST
64832: LIST
64833: PUSH
64834: LD_INT 5
64836: NEG
64837: PUSH
64838: LD_INT 4
64840: NEG
64841: PUSH
64842: EMPTY
64843: LIST
64844: LIST
64845: PUSH
64846: LD_INT 5
64848: NEG
64849: PUSH
64850: LD_INT 5
64852: NEG
64853: PUSH
64854: EMPTY
64855: LIST
64856: LIST
64857: PUSH
64858: LD_INT 3
64860: NEG
64861: PUSH
64862: LD_INT 5
64864: NEG
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 5
64872: NEG
64873: PUSH
64874: LD_INT 3
64876: NEG
64877: PUSH
64878: EMPTY
64879: LIST
64880: LIST
64881: PUSH
64882: LD_INT 0
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: EMPTY
64890: LIST
64891: LIST
64892: PUSH
64893: LD_INT 0
64895: PUSH
64896: LD_INT 4
64898: NEG
64899: PUSH
64900: EMPTY
64901: LIST
64902: LIST
64903: PUSH
64904: LD_INT 1
64906: PUSH
64907: LD_INT 3
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 1
64917: PUSH
64918: LD_INT 2
64920: NEG
64921: PUSH
64922: EMPTY
64923: LIST
64924: LIST
64925: PUSH
64926: LD_INT 0
64928: PUSH
64929: LD_INT 2
64931: NEG
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 1
64939: NEG
64940: PUSH
64941: LD_INT 3
64943: NEG
64944: PUSH
64945: EMPTY
64946: LIST
64947: LIST
64948: PUSH
64949: LD_INT 1
64951: NEG
64952: PUSH
64953: LD_INT 4
64955: NEG
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 2
64963: PUSH
64964: LD_INT 2
64966: NEG
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 2
64974: NEG
64975: PUSH
64976: LD_INT 4
64978: NEG
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 4
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 4
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 5
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 5
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 4
65027: PUSH
65028: LD_INT 1
65030: PUSH
65031: EMPTY
65032: LIST
65033: LIST
65034: PUSH
65035: LD_INT 3
65037: PUSH
65038: LD_INT 0
65040: PUSH
65041: EMPTY
65042: LIST
65043: LIST
65044: PUSH
65045: LD_INT 3
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 3
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: EMPTY
65064: LIST
65065: LIST
65066: PUSH
65067: LD_INT 5
65069: PUSH
65070: LD_INT 2
65072: PUSH
65073: EMPTY
65074: LIST
65075: LIST
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: LIST
65084: LIST
65085: LIST
65086: LIST
65087: LIST
65088: LIST
65089: LIST
65090: LIST
65091: LIST
65092: LIST
65093: LIST
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
65124: LD_ADDR_VAR 0 32
65128: PUSH
65129: LD_INT 4
65131: NEG
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 4
65142: NEG
65143: PUSH
65144: LD_INT 1
65146: NEG
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 3
65154: NEG
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 3
65165: NEG
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 4
65176: NEG
65177: PUSH
65178: LD_INT 1
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: PUSH
65185: LD_INT 5
65187: NEG
65188: PUSH
65189: LD_INT 0
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 5
65198: NEG
65199: PUSH
65200: LD_INT 1
65202: NEG
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 5
65210: NEG
65211: PUSH
65212: LD_INT 2
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 3
65222: NEG
65223: PUSH
65224: LD_INT 2
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 3
65233: NEG
65234: PUSH
65235: LD_INT 3
65237: NEG
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 3
65245: NEG
65246: PUSH
65247: LD_INT 4
65249: NEG
65250: PUSH
65251: EMPTY
65252: LIST
65253: LIST
65254: PUSH
65255: LD_INT 2
65257: NEG
65258: PUSH
65259: LD_INT 3
65261: NEG
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 2
65269: NEG
65270: PUSH
65271: LD_INT 2
65273: NEG
65274: PUSH
65275: EMPTY
65276: LIST
65277: LIST
65278: PUSH
65279: LD_INT 3
65281: NEG
65282: PUSH
65283: LD_INT 2
65285: NEG
65286: PUSH
65287: EMPTY
65288: LIST
65289: LIST
65290: PUSH
65291: LD_INT 4
65293: NEG
65294: PUSH
65295: LD_INT 3
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: LD_INT 4
65305: NEG
65306: PUSH
65307: LD_INT 4
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: LD_INT 4
65321: NEG
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 4
65329: NEG
65330: PUSH
65331: LD_INT 2
65333: NEG
65334: PUSH
65335: EMPTY
65336: LIST
65337: LIST
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 4
65344: NEG
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: LD_INT 5
65355: NEG
65356: PUSH
65357: EMPTY
65358: LIST
65359: LIST
65360: PUSH
65361: LD_INT 1
65363: PUSH
65364: LD_INT 4
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: LD_INT 3
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 0
65385: PUSH
65386: LD_INT 3
65388: NEG
65389: PUSH
65390: EMPTY
65391: LIST
65392: LIST
65393: PUSH
65394: LD_INT 1
65396: NEG
65397: PUSH
65398: LD_INT 4
65400: NEG
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: PUSH
65410: LD_INT 5
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 2
65420: PUSH
65421: LD_INT 3
65423: NEG
65424: PUSH
65425: EMPTY
65426: LIST
65427: LIST
65428: PUSH
65429: LD_INT 2
65431: NEG
65432: PUSH
65433: LD_INT 5
65435: NEG
65436: PUSH
65437: EMPTY
65438: LIST
65439: LIST
65440: PUSH
65441: LD_INT 3
65443: PUSH
65444: LD_INT 0
65446: PUSH
65447: EMPTY
65448: LIST
65449: LIST
65450: PUSH
65451: LD_INT 3
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 4
65464: PUSH
65465: LD_INT 0
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: LD_INT 4
65474: PUSH
65475: LD_INT 1
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: PUSH
65482: LD_INT 3
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: PUSH
65492: LD_INT 2
65494: PUSH
65495: LD_INT 0
65497: PUSH
65498: EMPTY
65499: LIST
65500: LIST
65501: PUSH
65502: LD_INT 2
65504: PUSH
65505: LD_INT 1
65507: NEG
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: PUSH
65513: LD_INT 2
65515: PUSH
65516: LD_INT 2
65518: NEG
65519: PUSH
65520: EMPTY
65521: LIST
65522: LIST
65523: PUSH
65524: LD_INT 4
65526: PUSH
65527: LD_INT 2
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: LD_INT 4
65536: PUSH
65537: LD_INT 4
65539: PUSH
65540: EMPTY
65541: LIST
65542: LIST
65543: PUSH
65544: LD_INT 4
65546: PUSH
65547: LD_INT 3
65549: PUSH
65550: EMPTY
65551: LIST
65552: LIST
65553: PUSH
65554: LD_INT 5
65556: PUSH
65557: LD_INT 4
65559: PUSH
65560: EMPTY
65561: LIST
65562: LIST
65563: PUSH
65564: LD_INT 5
65566: PUSH
65567: LD_INT 5
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 4
65576: PUSH
65577: LD_INT 5
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: LD_INT 3
65586: PUSH
65587: LD_INT 4
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 3
65596: PUSH
65597: LD_INT 3
65599: PUSH
65600: EMPTY
65601: LIST
65602: LIST
65603: PUSH
65604: LD_INT 5
65606: PUSH
65607: LD_INT 3
65609: PUSH
65610: EMPTY
65611: LIST
65612: LIST
65613: PUSH
65614: LD_INT 3
65616: PUSH
65617: LD_INT 5
65619: PUSH
65620: EMPTY
65621: LIST
65622: LIST
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: LIST
65628: LIST
65629: LIST
65630: LIST
65631: LIST
65632: LIST
65633: LIST
65634: LIST
65635: LIST
65636: LIST
65637: LIST
65638: LIST
65639: LIST
65640: LIST
65641: LIST
65642: LIST
65643: LIST
65644: LIST
65645: LIST
65646: LIST
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: LIST
65667: LIST
65668: LIST
65669: LIST
65670: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
65671: LD_ADDR_VAR 0 33
65675: PUSH
65676: LD_INT 4
65678: NEG
65679: PUSH
65680: LD_INT 4
65682: NEG
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PUSH
65688: LD_INT 4
65690: NEG
65691: PUSH
65692: LD_INT 5
65694: NEG
65695: PUSH
65696: EMPTY
65697: LIST
65698: LIST
65699: PUSH
65700: LD_INT 3
65702: NEG
65703: PUSH
65704: LD_INT 4
65706: NEG
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 3
65714: NEG
65715: PUSH
65716: LD_INT 3
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 4
65726: NEG
65727: PUSH
65728: LD_INT 3
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 5
65738: NEG
65739: PUSH
65740: LD_INT 4
65742: NEG
65743: PUSH
65744: EMPTY
65745: LIST
65746: LIST
65747: PUSH
65748: LD_INT 5
65750: NEG
65751: PUSH
65752: LD_INT 5
65754: NEG
65755: PUSH
65756: EMPTY
65757: LIST
65758: LIST
65759: PUSH
65760: LD_INT 3
65762: NEG
65763: PUSH
65764: LD_INT 5
65766: NEG
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 5
65774: NEG
65775: PUSH
65776: LD_INT 3
65778: NEG
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 0
65786: PUSH
65787: LD_INT 3
65789: NEG
65790: PUSH
65791: EMPTY
65792: LIST
65793: LIST
65794: PUSH
65795: LD_INT 0
65797: PUSH
65798: LD_INT 4
65800: NEG
65801: PUSH
65802: EMPTY
65803: LIST
65804: LIST
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: LD_INT 3
65811: NEG
65812: PUSH
65813: EMPTY
65814: LIST
65815: LIST
65816: PUSH
65817: LD_INT 1
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: LD_INT 2
65833: NEG
65834: PUSH
65835: EMPTY
65836: LIST
65837: LIST
65838: PUSH
65839: LD_INT 1
65841: NEG
65842: PUSH
65843: LD_INT 3
65845: NEG
65846: PUSH
65847: EMPTY
65848: LIST
65849: LIST
65850: PUSH
65851: LD_INT 1
65853: NEG
65854: PUSH
65855: LD_INT 4
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: LD_INT 2
65868: NEG
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: LD_INT 2
65876: NEG
65877: PUSH
65878: LD_INT 4
65880: NEG
65881: PUSH
65882: EMPTY
65883: LIST
65884: LIST
65885: PUSH
65886: LD_INT 4
65888: PUSH
65889: LD_INT 0
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 4
65898: PUSH
65899: LD_INT 1
65901: NEG
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 5
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: EMPTY
65914: LIST
65915: LIST
65916: PUSH
65917: LD_INT 5
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 4
65929: PUSH
65930: LD_INT 1
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: PUSH
65937: LD_INT 3
65939: PUSH
65940: LD_INT 0
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PUSH
65947: LD_INT 3
65949: PUSH
65950: LD_INT 1
65952: NEG
65953: PUSH
65954: EMPTY
65955: LIST
65956: LIST
65957: PUSH
65958: LD_INT 3
65960: PUSH
65961: LD_INT 2
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 5
65971: PUSH
65972: LD_INT 2
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 3
65981: PUSH
65982: LD_INT 3
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PUSH
65989: LD_INT 3
65991: PUSH
65992: LD_INT 2
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 4
66001: PUSH
66002: LD_INT 3
66004: PUSH
66005: EMPTY
66006: LIST
66007: LIST
66008: PUSH
66009: LD_INT 4
66011: PUSH
66012: LD_INT 4
66014: PUSH
66015: EMPTY
66016: LIST
66017: LIST
66018: PUSH
66019: LD_INT 3
66021: PUSH
66022: LD_INT 4
66024: PUSH
66025: EMPTY
66026: LIST
66027: LIST
66028: PUSH
66029: LD_INT 2
66031: PUSH
66032: LD_INT 3
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 2
66041: PUSH
66042: LD_INT 2
66044: PUSH
66045: EMPTY
66046: LIST
66047: LIST
66048: PUSH
66049: LD_INT 4
66051: PUSH
66052: LD_INT 2
66054: PUSH
66055: EMPTY
66056: LIST
66057: LIST
66058: PUSH
66059: LD_INT 2
66061: PUSH
66062: LD_INT 4
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 0
66071: PUSH
66072: LD_INT 4
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 0
66081: PUSH
66082: LD_INT 3
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: LD_INT 4
66094: PUSH
66095: EMPTY
66096: LIST
66097: LIST
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: LD_INT 5
66104: PUSH
66105: EMPTY
66106: LIST
66107: LIST
66108: PUSH
66109: LD_INT 0
66111: PUSH
66112: LD_INT 5
66114: PUSH
66115: EMPTY
66116: LIST
66117: LIST
66118: PUSH
66119: LD_INT 1
66121: NEG
66122: PUSH
66123: LD_INT 4
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: NEG
66133: PUSH
66134: LD_INT 3
66136: PUSH
66137: EMPTY
66138: LIST
66139: LIST
66140: PUSH
66141: LD_INT 2
66143: PUSH
66144: LD_INT 5
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 2
66153: NEG
66154: PUSH
66155: LD_INT 3
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: LIST
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: LIST
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
66209: LD_ADDR_VAR 0 34
66213: PUSH
66214: LD_INT 0
66216: PUSH
66217: LD_INT 4
66219: NEG
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 5
66230: NEG
66231: PUSH
66232: EMPTY
66233: LIST
66234: LIST
66235: PUSH
66236: LD_INT 1
66238: PUSH
66239: LD_INT 4
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 1
66249: PUSH
66250: LD_INT 3
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 3
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: NEG
66272: PUSH
66273: LD_INT 4
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: NEG
66284: PUSH
66285: LD_INT 5
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: PUSH
66296: LD_INT 3
66298: NEG
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: LD_INT 2
66306: NEG
66307: PUSH
66308: LD_INT 5
66310: NEG
66311: PUSH
66312: EMPTY
66313: LIST
66314: LIST
66315: PUSH
66316: LD_INT 3
66318: PUSH
66319: LD_INT 0
66321: PUSH
66322: EMPTY
66323: LIST
66324: LIST
66325: PUSH
66326: LD_INT 3
66328: PUSH
66329: LD_INT 1
66331: NEG
66332: PUSH
66333: EMPTY
66334: LIST
66335: LIST
66336: PUSH
66337: LD_INT 4
66339: PUSH
66340: LD_INT 0
66342: PUSH
66343: EMPTY
66344: LIST
66345: LIST
66346: PUSH
66347: LD_INT 4
66349: PUSH
66350: LD_INT 1
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 3
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 2
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: EMPTY
66374: LIST
66375: LIST
66376: PUSH
66377: LD_INT 2
66379: PUSH
66380: LD_INT 1
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 2
66390: PUSH
66391: LD_INT 2
66393: NEG
66394: PUSH
66395: EMPTY
66396: LIST
66397: LIST
66398: PUSH
66399: LD_INT 4
66401: PUSH
66402: LD_INT 2
66404: PUSH
66405: EMPTY
66406: LIST
66407: LIST
66408: PUSH
66409: LD_INT 4
66411: PUSH
66412: LD_INT 4
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 4
66421: PUSH
66422: LD_INT 3
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 5
66431: PUSH
66432: LD_INT 4
66434: PUSH
66435: EMPTY
66436: LIST
66437: LIST
66438: PUSH
66439: LD_INT 5
66441: PUSH
66442: LD_INT 5
66444: PUSH
66445: EMPTY
66446: LIST
66447: LIST
66448: PUSH
66449: LD_INT 4
66451: PUSH
66452: LD_INT 5
66454: PUSH
66455: EMPTY
66456: LIST
66457: LIST
66458: PUSH
66459: LD_INT 3
66461: PUSH
66462: LD_INT 4
66464: PUSH
66465: EMPTY
66466: LIST
66467: LIST
66468: PUSH
66469: LD_INT 3
66471: PUSH
66472: LD_INT 3
66474: PUSH
66475: EMPTY
66476: LIST
66477: LIST
66478: PUSH
66479: LD_INT 5
66481: PUSH
66482: LD_INT 3
66484: PUSH
66485: EMPTY
66486: LIST
66487: LIST
66488: PUSH
66489: LD_INT 3
66491: PUSH
66492: LD_INT 5
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 0
66501: PUSH
66502: LD_INT 3
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 0
66511: PUSH
66512: LD_INT 2
66514: PUSH
66515: EMPTY
66516: LIST
66517: LIST
66518: PUSH
66519: LD_INT 1
66521: PUSH
66522: LD_INT 3
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 1
66531: PUSH
66532: LD_INT 4
66534: PUSH
66535: EMPTY
66536: LIST
66537: LIST
66538: PUSH
66539: LD_INT 0
66541: PUSH
66542: LD_INT 4
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 1
66551: NEG
66552: PUSH
66553: LD_INT 3
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: NEG
66563: PUSH
66564: LD_INT 2
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: PUSH
66574: LD_INT 4
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: LD_INT 2
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 4
66594: NEG
66595: PUSH
66596: LD_INT 0
66598: PUSH
66599: EMPTY
66600: LIST
66601: LIST
66602: PUSH
66603: LD_INT 4
66605: NEG
66606: PUSH
66607: LD_INT 1
66609: NEG
66610: PUSH
66611: EMPTY
66612: LIST
66613: LIST
66614: PUSH
66615: LD_INT 3
66617: NEG
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 3
66628: NEG
66629: PUSH
66630: LD_INT 1
66632: PUSH
66633: EMPTY
66634: LIST
66635: LIST
66636: PUSH
66637: LD_INT 4
66639: NEG
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 5
66650: NEG
66651: PUSH
66652: LD_INT 0
66654: PUSH
66655: EMPTY
66656: LIST
66657: LIST
66658: PUSH
66659: LD_INT 5
66661: NEG
66662: PUSH
66663: LD_INT 1
66665: NEG
66666: PUSH
66667: EMPTY
66668: LIST
66669: LIST
66670: PUSH
66671: LD_INT 5
66673: NEG
66674: PUSH
66675: LD_INT 2
66677: NEG
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 3
66685: NEG
66686: PUSH
66687: LD_INT 2
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: LIST
66698: LIST
66699: LIST
66700: LIST
66701: LIST
66702: LIST
66703: LIST
66704: LIST
66705: LIST
66706: LIST
66707: LIST
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: LIST
66716: LIST
66717: LIST
66718: LIST
66719: LIST
66720: LIST
66721: LIST
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: LIST
66732: LIST
66733: LIST
66734: LIST
66735: LIST
66736: LIST
66737: LIST
66738: LIST
66739: LIST
66740: ST_TO_ADDR
// end ; end ;
66741: GO 66744
66743: POP
// case btype of b_depot , b_warehouse :
66744: LD_VAR 0 1
66748: PUSH
66749: LD_INT 0
66751: DOUBLE
66752: EQUAL
66753: IFTRUE 66763
66755: LD_INT 1
66757: DOUBLE
66758: EQUAL
66759: IFTRUE 66763
66761: GO 66964
66763: POP
// case nation of nation_american :
66764: LD_VAR 0 5
66768: PUSH
66769: LD_INT 1
66771: DOUBLE
66772: EQUAL
66773: IFTRUE 66777
66775: GO 66833
66777: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
66778: LD_ADDR_VAR 0 9
66782: PUSH
66783: LD_VAR 0 11
66787: PUSH
66788: LD_VAR 0 12
66792: PUSH
66793: LD_VAR 0 13
66797: PUSH
66798: LD_VAR 0 14
66802: PUSH
66803: LD_VAR 0 15
66807: PUSH
66808: LD_VAR 0 16
66812: PUSH
66813: EMPTY
66814: LIST
66815: LIST
66816: LIST
66817: LIST
66818: LIST
66819: LIST
66820: PUSH
66821: LD_VAR 0 4
66825: PUSH
66826: LD_INT 1
66828: PLUS
66829: ARRAY
66830: ST_TO_ADDR
66831: GO 66962
66833: LD_INT 2
66835: DOUBLE
66836: EQUAL
66837: IFTRUE 66841
66839: GO 66897
66841: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
66842: LD_ADDR_VAR 0 9
66846: PUSH
66847: LD_VAR 0 17
66851: PUSH
66852: LD_VAR 0 18
66856: PUSH
66857: LD_VAR 0 19
66861: PUSH
66862: LD_VAR 0 20
66866: PUSH
66867: LD_VAR 0 21
66871: PUSH
66872: LD_VAR 0 22
66876: PUSH
66877: EMPTY
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: PUSH
66885: LD_VAR 0 4
66889: PUSH
66890: LD_INT 1
66892: PLUS
66893: ARRAY
66894: ST_TO_ADDR
66895: GO 66962
66897: LD_INT 3
66899: DOUBLE
66900: EQUAL
66901: IFTRUE 66905
66903: GO 66961
66905: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
66906: LD_ADDR_VAR 0 9
66910: PUSH
66911: LD_VAR 0 23
66915: PUSH
66916: LD_VAR 0 24
66920: PUSH
66921: LD_VAR 0 25
66925: PUSH
66926: LD_VAR 0 26
66930: PUSH
66931: LD_VAR 0 27
66935: PUSH
66936: LD_VAR 0 28
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: PUSH
66949: LD_VAR 0 4
66953: PUSH
66954: LD_INT 1
66956: PLUS
66957: ARRAY
66958: ST_TO_ADDR
66959: GO 66962
66961: POP
66962: GO 67517
66964: LD_INT 2
66966: DOUBLE
66967: EQUAL
66968: IFTRUE 66978
66970: LD_INT 3
66972: DOUBLE
66973: EQUAL
66974: IFTRUE 66978
66976: GO 67034
66978: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
66979: LD_ADDR_VAR 0 9
66983: PUSH
66984: LD_VAR 0 29
66988: PUSH
66989: LD_VAR 0 30
66993: PUSH
66994: LD_VAR 0 31
66998: PUSH
66999: LD_VAR 0 32
67003: PUSH
67004: LD_VAR 0 33
67008: PUSH
67009: LD_VAR 0 34
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: LIST
67020: LIST
67021: PUSH
67022: LD_VAR 0 4
67026: PUSH
67027: LD_INT 1
67029: PLUS
67030: ARRAY
67031: ST_TO_ADDR
67032: GO 67517
67034: LD_INT 16
67036: DOUBLE
67037: EQUAL
67038: IFTRUE 67096
67040: LD_INT 17
67042: DOUBLE
67043: EQUAL
67044: IFTRUE 67096
67046: LD_INT 18
67048: DOUBLE
67049: EQUAL
67050: IFTRUE 67096
67052: LD_INT 19
67054: DOUBLE
67055: EQUAL
67056: IFTRUE 67096
67058: LD_INT 22
67060: DOUBLE
67061: EQUAL
67062: IFTRUE 67096
67064: LD_INT 20
67066: DOUBLE
67067: EQUAL
67068: IFTRUE 67096
67070: LD_INT 21
67072: DOUBLE
67073: EQUAL
67074: IFTRUE 67096
67076: LD_INT 23
67078: DOUBLE
67079: EQUAL
67080: IFTRUE 67096
67082: LD_INT 24
67084: DOUBLE
67085: EQUAL
67086: IFTRUE 67096
67088: LD_INT 25
67090: DOUBLE
67091: EQUAL
67092: IFTRUE 67096
67094: GO 67152
67096: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
67097: LD_ADDR_VAR 0 9
67101: PUSH
67102: LD_VAR 0 35
67106: PUSH
67107: LD_VAR 0 36
67111: PUSH
67112: LD_VAR 0 37
67116: PUSH
67117: LD_VAR 0 38
67121: PUSH
67122: LD_VAR 0 39
67126: PUSH
67127: LD_VAR 0 40
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: LIST
67136: LIST
67137: LIST
67138: LIST
67139: PUSH
67140: LD_VAR 0 4
67144: PUSH
67145: LD_INT 1
67147: PLUS
67148: ARRAY
67149: ST_TO_ADDR
67150: GO 67517
67152: LD_INT 6
67154: DOUBLE
67155: EQUAL
67156: IFTRUE 67208
67158: LD_INT 7
67160: DOUBLE
67161: EQUAL
67162: IFTRUE 67208
67164: LD_INT 8
67166: DOUBLE
67167: EQUAL
67168: IFTRUE 67208
67170: LD_INT 13
67172: DOUBLE
67173: EQUAL
67174: IFTRUE 67208
67176: LD_INT 12
67178: DOUBLE
67179: EQUAL
67180: IFTRUE 67208
67182: LD_INT 15
67184: DOUBLE
67185: EQUAL
67186: IFTRUE 67208
67188: LD_INT 11
67190: DOUBLE
67191: EQUAL
67192: IFTRUE 67208
67194: LD_INT 14
67196: DOUBLE
67197: EQUAL
67198: IFTRUE 67208
67200: LD_INT 10
67202: DOUBLE
67203: EQUAL
67204: IFTRUE 67208
67206: GO 67264
67208: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
67209: LD_ADDR_VAR 0 9
67213: PUSH
67214: LD_VAR 0 41
67218: PUSH
67219: LD_VAR 0 42
67223: PUSH
67224: LD_VAR 0 43
67228: PUSH
67229: LD_VAR 0 44
67233: PUSH
67234: LD_VAR 0 45
67238: PUSH
67239: LD_VAR 0 46
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: LIST
67248: LIST
67249: LIST
67250: LIST
67251: PUSH
67252: LD_VAR 0 4
67256: PUSH
67257: LD_INT 1
67259: PLUS
67260: ARRAY
67261: ST_TO_ADDR
67262: GO 67517
67264: LD_INT 36
67266: DOUBLE
67267: EQUAL
67268: IFTRUE 67272
67270: GO 67328
67272: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
67273: LD_ADDR_VAR 0 9
67277: PUSH
67278: LD_VAR 0 47
67282: PUSH
67283: LD_VAR 0 48
67287: PUSH
67288: LD_VAR 0 49
67292: PUSH
67293: LD_VAR 0 50
67297: PUSH
67298: LD_VAR 0 51
67302: PUSH
67303: LD_VAR 0 52
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: LIST
67312: LIST
67313: LIST
67314: LIST
67315: PUSH
67316: LD_VAR 0 4
67320: PUSH
67321: LD_INT 1
67323: PLUS
67324: ARRAY
67325: ST_TO_ADDR
67326: GO 67517
67328: LD_INT 4
67330: DOUBLE
67331: EQUAL
67332: IFTRUE 67354
67334: LD_INT 5
67336: DOUBLE
67337: EQUAL
67338: IFTRUE 67354
67340: LD_INT 34
67342: DOUBLE
67343: EQUAL
67344: IFTRUE 67354
67346: LD_INT 37
67348: DOUBLE
67349: EQUAL
67350: IFTRUE 67354
67352: GO 67410
67354: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
67355: LD_ADDR_VAR 0 9
67359: PUSH
67360: LD_VAR 0 53
67364: PUSH
67365: LD_VAR 0 54
67369: PUSH
67370: LD_VAR 0 55
67374: PUSH
67375: LD_VAR 0 56
67379: PUSH
67380: LD_VAR 0 57
67384: PUSH
67385: LD_VAR 0 58
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: PUSH
67398: LD_VAR 0 4
67402: PUSH
67403: LD_INT 1
67405: PLUS
67406: ARRAY
67407: ST_TO_ADDR
67408: GO 67517
67410: LD_INT 31
67412: DOUBLE
67413: EQUAL
67414: IFTRUE 67460
67416: LD_INT 32
67418: DOUBLE
67419: EQUAL
67420: IFTRUE 67460
67422: LD_INT 33
67424: DOUBLE
67425: EQUAL
67426: IFTRUE 67460
67428: LD_INT 27
67430: DOUBLE
67431: EQUAL
67432: IFTRUE 67460
67434: LD_INT 26
67436: DOUBLE
67437: EQUAL
67438: IFTRUE 67460
67440: LD_INT 28
67442: DOUBLE
67443: EQUAL
67444: IFTRUE 67460
67446: LD_INT 29
67448: DOUBLE
67449: EQUAL
67450: IFTRUE 67460
67452: LD_INT 30
67454: DOUBLE
67455: EQUAL
67456: IFTRUE 67460
67458: GO 67516
67460: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
67461: LD_ADDR_VAR 0 9
67465: PUSH
67466: LD_VAR 0 59
67470: PUSH
67471: LD_VAR 0 60
67475: PUSH
67476: LD_VAR 0 61
67480: PUSH
67481: LD_VAR 0 62
67485: PUSH
67486: LD_VAR 0 63
67490: PUSH
67491: LD_VAR 0 64
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: PUSH
67504: LD_VAR 0 4
67508: PUSH
67509: LD_INT 1
67511: PLUS
67512: ARRAY
67513: ST_TO_ADDR
67514: GO 67517
67516: POP
// temp_list2 = [ ] ;
67517: LD_ADDR_VAR 0 10
67521: PUSH
67522: EMPTY
67523: ST_TO_ADDR
// for i in temp_list do
67524: LD_ADDR_VAR 0 8
67528: PUSH
67529: LD_VAR 0 9
67533: PUSH
67534: FOR_IN
67535: IFFALSE 67587
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
67537: LD_ADDR_VAR 0 10
67541: PUSH
67542: LD_VAR 0 10
67546: PUSH
67547: LD_VAR 0 8
67551: PUSH
67552: LD_INT 1
67554: ARRAY
67555: PUSH
67556: LD_VAR 0 2
67560: PLUS
67561: PUSH
67562: LD_VAR 0 8
67566: PUSH
67567: LD_INT 2
67569: ARRAY
67570: PUSH
67571: LD_VAR 0 3
67575: PLUS
67576: PUSH
67577: EMPTY
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: ADD
67584: ST_TO_ADDR
67585: GO 67534
67587: POP
67588: POP
// result = temp_list2 ;
67589: LD_ADDR_VAR 0 7
67593: PUSH
67594: LD_VAR 0 10
67598: ST_TO_ADDR
// end ;
67599: LD_VAR 0 7
67603: RET
// export function EnemyInRange ( unit , dist ) ; begin
67604: LD_INT 0
67606: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
67607: LD_ADDR_VAR 0 3
67611: PUSH
67612: LD_VAR 0 1
67616: PPUSH
67617: CALL_OW 255
67621: PPUSH
67622: LD_VAR 0 1
67626: PPUSH
67627: CALL_OW 250
67631: PPUSH
67632: LD_VAR 0 1
67636: PPUSH
67637: CALL_OW 251
67641: PPUSH
67642: LD_VAR 0 2
67646: PPUSH
67647: CALL 40977 0 4
67651: PUSH
67652: LD_INT 4
67654: ARRAY
67655: ST_TO_ADDR
// end ;
67656: LD_VAR 0 3
67660: RET
// export function PlayerSeeMe ( unit ) ; begin
67661: LD_INT 0
67663: PPUSH
// result := See ( your_side , unit ) ;
67664: LD_ADDR_VAR 0 2
67668: PUSH
67669: LD_OWVAR 2
67673: PPUSH
67674: LD_VAR 0 1
67678: PPUSH
67679: CALL_OW 292
67683: ST_TO_ADDR
// end ;
67684: LD_VAR 0 2
67688: RET
// export function ReverseDir ( unit ) ; begin
67689: LD_INT 0
67691: PPUSH
// if not unit then
67692: LD_VAR 0 1
67696: NOT
67697: IFFALSE 67701
// exit ;
67699: GO 67724
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
67701: LD_ADDR_VAR 0 2
67705: PUSH
67706: LD_VAR 0 1
67710: PPUSH
67711: CALL_OW 254
67715: PUSH
67716: LD_INT 3
67718: PLUS
67719: PUSH
67720: LD_INT 6
67722: MOD
67723: ST_TO_ADDR
// end ;
67724: LD_VAR 0 2
67728: RET
// export function ReverseArray ( array ) ; var i ; begin
67729: LD_INT 0
67731: PPUSH
67732: PPUSH
// if not array then
67733: LD_VAR 0 1
67737: NOT
67738: IFFALSE 67742
// exit ;
67740: GO 67797
// result := [ ] ;
67742: LD_ADDR_VAR 0 2
67746: PUSH
67747: EMPTY
67748: ST_TO_ADDR
// for i := array downto 1 do
67749: LD_ADDR_VAR 0 3
67753: PUSH
67754: DOUBLE
67755: LD_VAR 0 1
67759: INC
67760: ST_TO_ADDR
67761: LD_INT 1
67763: PUSH
67764: FOR_DOWNTO
67765: IFFALSE 67795
// result := Join ( result , array [ i ] ) ;
67767: LD_ADDR_VAR 0 2
67771: PUSH
67772: LD_VAR 0 2
67776: PPUSH
67777: LD_VAR 0 1
67781: PUSH
67782: LD_VAR 0 3
67786: ARRAY
67787: PPUSH
67788: CALL 72440 0 2
67792: ST_TO_ADDR
67793: GO 67764
67795: POP
67796: POP
// end ;
67797: LD_VAR 0 2
67801: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
67802: LD_INT 0
67804: PPUSH
67805: PPUSH
67806: PPUSH
67807: PPUSH
67808: PPUSH
67809: PPUSH
// if not unit or not hexes then
67810: LD_VAR 0 1
67814: NOT
67815: PUSH
67816: LD_VAR 0 2
67820: NOT
67821: OR
67822: IFFALSE 67826
// exit ;
67824: GO 67949
// dist := 9999 ;
67826: LD_ADDR_VAR 0 5
67830: PUSH
67831: LD_INT 9999
67833: ST_TO_ADDR
// for i = 1 to hexes do
67834: LD_ADDR_VAR 0 4
67838: PUSH
67839: DOUBLE
67840: LD_INT 1
67842: DEC
67843: ST_TO_ADDR
67844: LD_VAR 0 2
67848: PUSH
67849: FOR_TO
67850: IFFALSE 67937
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67852: LD_ADDR_VAR 0 6
67856: PUSH
67857: LD_VAR 0 1
67861: PPUSH
67862: LD_VAR 0 2
67866: PUSH
67867: LD_VAR 0 4
67871: ARRAY
67872: PUSH
67873: LD_INT 1
67875: ARRAY
67876: PPUSH
67877: LD_VAR 0 2
67881: PUSH
67882: LD_VAR 0 4
67886: ARRAY
67887: PUSH
67888: LD_INT 2
67890: ARRAY
67891: PPUSH
67892: CALL_OW 297
67896: ST_TO_ADDR
// if tdist < dist then
67897: LD_VAR 0 6
67901: PUSH
67902: LD_VAR 0 5
67906: LESS
67907: IFFALSE 67935
// begin hex := hexes [ i ] ;
67909: LD_ADDR_VAR 0 8
67913: PUSH
67914: LD_VAR 0 2
67918: PUSH
67919: LD_VAR 0 4
67923: ARRAY
67924: ST_TO_ADDR
// dist := tdist ;
67925: LD_ADDR_VAR 0 5
67929: PUSH
67930: LD_VAR 0 6
67934: ST_TO_ADDR
// end ; end ;
67935: GO 67849
67937: POP
67938: POP
// result := hex ;
67939: LD_ADDR_VAR 0 3
67943: PUSH
67944: LD_VAR 0 8
67948: ST_TO_ADDR
// end ;
67949: LD_VAR 0 3
67953: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
67954: LD_INT 0
67956: PPUSH
67957: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
67958: LD_VAR 0 1
67962: NOT
67963: PUSH
67964: LD_VAR 0 1
67968: PUSH
67969: LD_INT 21
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 23
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: EMPTY
67990: LIST
67991: LIST
67992: PPUSH
67993: CALL_OW 69
67997: IN
67998: NOT
67999: OR
68000: IFFALSE 68004
// exit ;
68002: GO 68051
// for i = 1 to 3 do
68004: LD_ADDR_VAR 0 3
68008: PUSH
68009: DOUBLE
68010: LD_INT 1
68012: DEC
68013: ST_TO_ADDR
68014: LD_INT 3
68016: PUSH
68017: FOR_TO
68018: IFFALSE 68049
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
68020: LD_VAR 0 1
68024: PPUSH
68025: CALL_OW 250
68029: PPUSH
68030: LD_VAR 0 1
68034: PPUSH
68035: CALL_OW 251
68039: PPUSH
68040: LD_INT 1
68042: PPUSH
68043: CALL_OW 453
68047: GO 68017
68049: POP
68050: POP
// end ;
68051: LD_VAR 0 2
68055: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
68056: LD_INT 0
68058: PPUSH
68059: PPUSH
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
68064: LD_VAR 0 1
68068: NOT
68069: PUSH
68070: LD_VAR 0 2
68074: NOT
68075: OR
68076: PUSH
68077: LD_VAR 0 1
68081: PPUSH
68082: CALL_OW 314
68086: OR
68087: IFFALSE 68091
// exit ;
68089: GO 68558
// if GetLives ( i ) < 250 then
68091: LD_VAR 0 4
68095: PPUSH
68096: CALL_OW 256
68100: PUSH
68101: LD_INT 250
68103: LESS
68104: IFFALSE 68117
// begin ComAutodestruct ( i ) ;
68106: LD_VAR 0 4
68110: PPUSH
68111: CALL 67954 0 1
// exit ;
68115: GO 68558
// end ; x := GetX ( enemy_unit ) ;
68117: LD_ADDR_VAR 0 7
68121: PUSH
68122: LD_VAR 0 2
68126: PPUSH
68127: CALL_OW 250
68131: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
68132: LD_ADDR_VAR 0 8
68136: PUSH
68137: LD_VAR 0 2
68141: PPUSH
68142: CALL_OW 251
68146: ST_TO_ADDR
// if not x or not y then
68147: LD_VAR 0 7
68151: NOT
68152: PUSH
68153: LD_VAR 0 8
68157: NOT
68158: OR
68159: IFFALSE 68163
// exit ;
68161: GO 68558
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
68163: LD_ADDR_VAR 0 6
68167: PUSH
68168: LD_VAR 0 7
68172: PPUSH
68173: LD_INT 0
68175: PPUSH
68176: LD_INT 4
68178: PPUSH
68179: CALL_OW 272
68183: PUSH
68184: LD_VAR 0 8
68188: PPUSH
68189: LD_INT 0
68191: PPUSH
68192: LD_INT 4
68194: PPUSH
68195: CALL_OW 273
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_VAR 0 7
68208: PPUSH
68209: LD_INT 1
68211: PPUSH
68212: LD_INT 4
68214: PPUSH
68215: CALL_OW 272
68219: PUSH
68220: LD_VAR 0 8
68224: PPUSH
68225: LD_INT 1
68227: PPUSH
68228: LD_INT 4
68230: PPUSH
68231: CALL_OW 273
68235: PUSH
68236: EMPTY
68237: LIST
68238: LIST
68239: PUSH
68240: LD_VAR 0 7
68244: PPUSH
68245: LD_INT 2
68247: PPUSH
68248: LD_INT 4
68250: PPUSH
68251: CALL_OW 272
68255: PUSH
68256: LD_VAR 0 8
68260: PPUSH
68261: LD_INT 2
68263: PPUSH
68264: LD_INT 4
68266: PPUSH
68267: CALL_OW 273
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_VAR 0 7
68280: PPUSH
68281: LD_INT 3
68283: PPUSH
68284: LD_INT 4
68286: PPUSH
68287: CALL_OW 272
68291: PUSH
68292: LD_VAR 0 8
68296: PPUSH
68297: LD_INT 3
68299: PPUSH
68300: LD_INT 4
68302: PPUSH
68303: CALL_OW 273
68307: PUSH
68308: EMPTY
68309: LIST
68310: LIST
68311: PUSH
68312: LD_VAR 0 7
68316: PPUSH
68317: LD_INT 4
68319: PPUSH
68320: LD_INT 4
68322: PPUSH
68323: CALL_OW 272
68327: PUSH
68328: LD_VAR 0 8
68332: PPUSH
68333: LD_INT 4
68335: PPUSH
68336: LD_INT 4
68338: PPUSH
68339: CALL_OW 273
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_VAR 0 7
68352: PPUSH
68353: LD_INT 5
68355: PPUSH
68356: LD_INT 4
68358: PPUSH
68359: CALL_OW 272
68363: PUSH
68364: LD_VAR 0 8
68368: PPUSH
68369: LD_INT 5
68371: PPUSH
68372: LD_INT 4
68374: PPUSH
68375: CALL_OW 273
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: LIST
68388: LIST
68389: LIST
68390: LIST
68391: ST_TO_ADDR
// for i = tmp downto 1 do
68392: LD_ADDR_VAR 0 4
68396: PUSH
68397: DOUBLE
68398: LD_VAR 0 6
68402: INC
68403: ST_TO_ADDR
68404: LD_INT 1
68406: PUSH
68407: FOR_DOWNTO
68408: IFFALSE 68509
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
68410: LD_VAR 0 6
68414: PUSH
68415: LD_VAR 0 4
68419: ARRAY
68420: PUSH
68421: LD_INT 1
68423: ARRAY
68424: PPUSH
68425: LD_VAR 0 6
68429: PUSH
68430: LD_VAR 0 4
68434: ARRAY
68435: PUSH
68436: LD_INT 2
68438: ARRAY
68439: PPUSH
68440: CALL_OW 488
68444: NOT
68445: PUSH
68446: LD_VAR 0 6
68450: PUSH
68451: LD_VAR 0 4
68455: ARRAY
68456: PUSH
68457: LD_INT 1
68459: ARRAY
68460: PPUSH
68461: LD_VAR 0 6
68465: PUSH
68466: LD_VAR 0 4
68470: ARRAY
68471: PUSH
68472: LD_INT 2
68474: ARRAY
68475: PPUSH
68476: CALL_OW 428
68480: PUSH
68481: LD_INT 0
68483: NONEQUAL
68484: OR
68485: IFFALSE 68507
// tmp := Delete ( tmp , i ) ;
68487: LD_ADDR_VAR 0 6
68491: PUSH
68492: LD_VAR 0 6
68496: PPUSH
68497: LD_VAR 0 4
68501: PPUSH
68502: CALL_OW 3
68506: ST_TO_ADDR
68507: GO 68407
68509: POP
68510: POP
// j := GetClosestHex ( unit , tmp ) ;
68511: LD_ADDR_VAR 0 5
68515: PUSH
68516: LD_VAR 0 1
68520: PPUSH
68521: LD_VAR 0 6
68525: PPUSH
68526: CALL 67802 0 2
68530: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
68531: LD_VAR 0 1
68535: PPUSH
68536: LD_VAR 0 5
68540: PUSH
68541: LD_INT 1
68543: ARRAY
68544: PPUSH
68545: LD_VAR 0 5
68549: PUSH
68550: LD_INT 2
68552: ARRAY
68553: PPUSH
68554: CALL_OW 111
// end ;
68558: LD_VAR 0 3
68562: RET
// export function PrepareApemanSoldier ( ) ; begin
68563: LD_INT 0
68565: PPUSH
// uc_nation := 0 ;
68566: LD_ADDR_OWVAR 21
68570: PUSH
68571: LD_INT 0
68573: ST_TO_ADDR
// hc_sex := sex_male ;
68574: LD_ADDR_OWVAR 27
68578: PUSH
68579: LD_INT 1
68581: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
68582: LD_ADDR_OWVAR 28
68586: PUSH
68587: LD_INT 15
68589: ST_TO_ADDR
// hc_gallery :=  ;
68590: LD_ADDR_OWVAR 33
68594: PUSH
68595: LD_STRING 
68597: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68598: LD_ADDR_OWVAR 31
68602: PUSH
68603: LD_INT 0
68605: PPUSH
68606: LD_INT 3
68608: PPUSH
68609: CALL_OW 12
68613: PUSH
68614: LD_INT 0
68616: PPUSH
68617: LD_INT 3
68619: PPUSH
68620: CALL_OW 12
68624: PUSH
68625: LD_INT 0
68627: PUSH
68628: LD_INT 0
68630: PUSH
68631: EMPTY
68632: LIST
68633: LIST
68634: LIST
68635: LIST
68636: ST_TO_ADDR
// end ;
68637: LD_VAR 0 1
68641: RET
// export function PrepareApemanEngineer ( ) ; begin
68642: LD_INT 0
68644: PPUSH
// uc_nation := 0 ;
68645: LD_ADDR_OWVAR 21
68649: PUSH
68650: LD_INT 0
68652: ST_TO_ADDR
// hc_sex := sex_male ;
68653: LD_ADDR_OWVAR 27
68657: PUSH
68658: LD_INT 1
68660: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
68661: LD_ADDR_OWVAR 28
68665: PUSH
68666: LD_INT 16
68668: ST_TO_ADDR
// hc_gallery :=  ;
68669: LD_ADDR_OWVAR 33
68673: PUSH
68674: LD_STRING 
68676: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68677: LD_ADDR_OWVAR 31
68681: PUSH
68682: LD_INT 0
68684: PPUSH
68685: LD_INT 3
68687: PPUSH
68688: CALL_OW 12
68692: PUSH
68693: LD_INT 0
68695: PPUSH
68696: LD_INT 3
68698: PPUSH
68699: CALL_OW 12
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: LD_INT 0
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: ST_TO_ADDR
// end ;
68716: LD_VAR 0 1
68720: RET
// export function PrepareApeman ( agressivity ) ; begin
68721: LD_INT 0
68723: PPUSH
// uc_side := 0 ;
68724: LD_ADDR_OWVAR 20
68728: PUSH
68729: LD_INT 0
68731: ST_TO_ADDR
// uc_nation := 0 ;
68732: LD_ADDR_OWVAR 21
68736: PUSH
68737: LD_INT 0
68739: ST_TO_ADDR
// hc_sex := sex_male ;
68740: LD_ADDR_OWVAR 27
68744: PUSH
68745: LD_INT 1
68747: ST_TO_ADDR
// hc_class := class_apeman ;
68748: LD_ADDR_OWVAR 28
68752: PUSH
68753: LD_INT 12
68755: ST_TO_ADDR
// hc_gallery :=  ;
68756: LD_ADDR_OWVAR 33
68760: PUSH
68761: LD_STRING 
68763: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68764: LD_ADDR_OWVAR 35
68768: PUSH
68769: LD_VAR 0 1
68773: NEG
68774: PPUSH
68775: LD_VAR 0 1
68779: PPUSH
68780: CALL_OW 12
68784: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
68785: LD_ADDR_OWVAR 31
68789: PUSH
68790: LD_INT 0
68792: PPUSH
68793: LD_INT 3
68795: PPUSH
68796: CALL_OW 12
68800: PUSH
68801: LD_INT 0
68803: PPUSH
68804: LD_INT 3
68806: PPUSH
68807: CALL_OW 12
68811: PUSH
68812: LD_INT 0
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: LIST
68822: LIST
68823: ST_TO_ADDR
// end ;
68824: LD_VAR 0 2
68828: RET
// export function PrepareTiger ( agressivity ) ; begin
68829: LD_INT 0
68831: PPUSH
// uc_side := 0 ;
68832: LD_ADDR_OWVAR 20
68836: PUSH
68837: LD_INT 0
68839: ST_TO_ADDR
// uc_nation := 0 ;
68840: LD_ADDR_OWVAR 21
68844: PUSH
68845: LD_INT 0
68847: ST_TO_ADDR
// hc_class := class_tiger ;
68848: LD_ADDR_OWVAR 28
68852: PUSH
68853: LD_INT 14
68855: ST_TO_ADDR
// hc_gallery :=  ;
68856: LD_ADDR_OWVAR 33
68860: PUSH
68861: LD_STRING 
68863: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
68864: LD_ADDR_OWVAR 35
68868: PUSH
68869: LD_VAR 0 1
68873: NEG
68874: PPUSH
68875: LD_VAR 0 1
68879: PPUSH
68880: CALL_OW 12
68884: ST_TO_ADDR
// end ;
68885: LD_VAR 0 2
68889: RET
// export function PrepareEnchidna ( ) ; begin
68890: LD_INT 0
68892: PPUSH
// uc_side := 0 ;
68893: LD_ADDR_OWVAR 20
68897: PUSH
68898: LD_INT 0
68900: ST_TO_ADDR
// uc_nation := 0 ;
68901: LD_ADDR_OWVAR 21
68905: PUSH
68906: LD_INT 0
68908: ST_TO_ADDR
// hc_class := class_baggie ;
68909: LD_ADDR_OWVAR 28
68913: PUSH
68914: LD_INT 13
68916: ST_TO_ADDR
// hc_gallery :=  ;
68917: LD_ADDR_OWVAR 33
68921: PUSH
68922: LD_STRING 
68924: ST_TO_ADDR
// end ;
68925: LD_VAR 0 1
68929: RET
// export function PrepareFrog ( ) ; begin
68930: LD_INT 0
68932: PPUSH
// uc_side := 0 ;
68933: LD_ADDR_OWVAR 20
68937: PUSH
68938: LD_INT 0
68940: ST_TO_ADDR
// uc_nation := 0 ;
68941: LD_ADDR_OWVAR 21
68945: PUSH
68946: LD_INT 0
68948: ST_TO_ADDR
// hc_class := class_frog ;
68949: LD_ADDR_OWVAR 28
68953: PUSH
68954: LD_INT 19
68956: ST_TO_ADDR
// hc_gallery :=  ;
68957: LD_ADDR_OWVAR 33
68961: PUSH
68962: LD_STRING 
68964: ST_TO_ADDR
// end ;
68965: LD_VAR 0 1
68969: RET
// export function PrepareFish ( ) ; begin
68970: LD_INT 0
68972: PPUSH
// uc_side := 0 ;
68973: LD_ADDR_OWVAR 20
68977: PUSH
68978: LD_INT 0
68980: ST_TO_ADDR
// uc_nation := 0 ;
68981: LD_ADDR_OWVAR 21
68985: PUSH
68986: LD_INT 0
68988: ST_TO_ADDR
// hc_class := class_fish ;
68989: LD_ADDR_OWVAR 28
68993: PUSH
68994: LD_INT 20
68996: ST_TO_ADDR
// hc_gallery :=  ;
68997: LD_ADDR_OWVAR 33
69001: PUSH
69002: LD_STRING 
69004: ST_TO_ADDR
// end ;
69005: LD_VAR 0 1
69009: RET
// export function PrepareBird ( ) ; begin
69010: LD_INT 0
69012: PPUSH
// uc_side := 0 ;
69013: LD_ADDR_OWVAR 20
69017: PUSH
69018: LD_INT 0
69020: ST_TO_ADDR
// uc_nation := 0 ;
69021: LD_ADDR_OWVAR 21
69025: PUSH
69026: LD_INT 0
69028: ST_TO_ADDR
// hc_class := class_phororhacos ;
69029: LD_ADDR_OWVAR 28
69033: PUSH
69034: LD_INT 18
69036: ST_TO_ADDR
// hc_gallery :=  ;
69037: LD_ADDR_OWVAR 33
69041: PUSH
69042: LD_STRING 
69044: ST_TO_ADDR
// end ;
69045: LD_VAR 0 1
69049: RET
// export function PrepareHorse ( ) ; begin
69050: LD_INT 0
69052: PPUSH
// uc_side := 0 ;
69053: LD_ADDR_OWVAR 20
69057: PUSH
69058: LD_INT 0
69060: ST_TO_ADDR
// uc_nation := 0 ;
69061: LD_ADDR_OWVAR 21
69065: PUSH
69066: LD_INT 0
69068: ST_TO_ADDR
// hc_class := class_horse ;
69069: LD_ADDR_OWVAR 28
69073: PUSH
69074: LD_INT 21
69076: ST_TO_ADDR
// hc_gallery :=  ;
69077: LD_ADDR_OWVAR 33
69081: PUSH
69082: LD_STRING 
69084: ST_TO_ADDR
// end ;
69085: LD_VAR 0 1
69089: RET
// export function PrepareMastodont ( ) ; begin
69090: LD_INT 0
69092: PPUSH
// uc_side := 0 ;
69093: LD_ADDR_OWVAR 20
69097: PUSH
69098: LD_INT 0
69100: ST_TO_ADDR
// uc_nation := 0 ;
69101: LD_ADDR_OWVAR 21
69105: PUSH
69106: LD_INT 0
69108: ST_TO_ADDR
// vc_chassis := class_mastodont ;
69109: LD_ADDR_OWVAR 37
69113: PUSH
69114: LD_INT 31
69116: ST_TO_ADDR
// vc_control := control_rider ;
69117: LD_ADDR_OWVAR 38
69121: PUSH
69122: LD_INT 4
69124: ST_TO_ADDR
// end ;
69125: LD_VAR 0 1
69129: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
69130: LD_INT 0
69132: PPUSH
69133: PPUSH
69134: PPUSH
// uc_side = 0 ;
69135: LD_ADDR_OWVAR 20
69139: PUSH
69140: LD_INT 0
69142: ST_TO_ADDR
// uc_nation = 0 ;
69143: LD_ADDR_OWVAR 21
69147: PUSH
69148: LD_INT 0
69150: ST_TO_ADDR
// InitHc_All ( ) ;
69151: CALL_OW 584
// InitVc ;
69155: CALL_OW 20
// if mastodonts then
69159: LD_VAR 0 6
69163: IFFALSE 69230
// for i = 1 to mastodonts do
69165: LD_ADDR_VAR 0 11
69169: PUSH
69170: DOUBLE
69171: LD_INT 1
69173: DEC
69174: ST_TO_ADDR
69175: LD_VAR 0 6
69179: PUSH
69180: FOR_TO
69181: IFFALSE 69228
// begin vc_chassis := 31 ;
69183: LD_ADDR_OWVAR 37
69187: PUSH
69188: LD_INT 31
69190: ST_TO_ADDR
// vc_control := control_rider ;
69191: LD_ADDR_OWVAR 38
69195: PUSH
69196: LD_INT 4
69198: ST_TO_ADDR
// animal := CreateVehicle ;
69199: LD_ADDR_VAR 0 12
69203: PUSH
69204: CALL_OW 45
69208: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69209: LD_VAR 0 12
69213: PPUSH
69214: LD_VAR 0 8
69218: PPUSH
69219: LD_INT 0
69221: PPUSH
69222: CALL 71358 0 3
// end ;
69226: GO 69180
69228: POP
69229: POP
// if horses then
69230: LD_VAR 0 5
69234: IFFALSE 69301
// for i = 1 to horses do
69236: LD_ADDR_VAR 0 11
69240: PUSH
69241: DOUBLE
69242: LD_INT 1
69244: DEC
69245: ST_TO_ADDR
69246: LD_VAR 0 5
69250: PUSH
69251: FOR_TO
69252: IFFALSE 69299
// begin hc_class := 21 ;
69254: LD_ADDR_OWVAR 28
69258: PUSH
69259: LD_INT 21
69261: ST_TO_ADDR
// hc_gallery :=  ;
69262: LD_ADDR_OWVAR 33
69266: PUSH
69267: LD_STRING 
69269: ST_TO_ADDR
// animal := CreateHuman ;
69270: LD_ADDR_VAR 0 12
69274: PUSH
69275: CALL_OW 44
69279: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69280: LD_VAR 0 12
69284: PPUSH
69285: LD_VAR 0 8
69289: PPUSH
69290: LD_INT 0
69292: PPUSH
69293: CALL 71358 0 3
// end ;
69297: GO 69251
69299: POP
69300: POP
// if birds then
69301: LD_VAR 0 1
69305: IFFALSE 69372
// for i = 1 to birds do
69307: LD_ADDR_VAR 0 11
69311: PUSH
69312: DOUBLE
69313: LD_INT 1
69315: DEC
69316: ST_TO_ADDR
69317: LD_VAR 0 1
69321: PUSH
69322: FOR_TO
69323: IFFALSE 69370
// begin hc_class := 18 ;
69325: LD_ADDR_OWVAR 28
69329: PUSH
69330: LD_INT 18
69332: ST_TO_ADDR
// hc_gallery =  ;
69333: LD_ADDR_OWVAR 33
69337: PUSH
69338: LD_STRING 
69340: ST_TO_ADDR
// animal := CreateHuman ;
69341: LD_ADDR_VAR 0 12
69345: PUSH
69346: CALL_OW 44
69350: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69351: LD_VAR 0 12
69355: PPUSH
69356: LD_VAR 0 8
69360: PPUSH
69361: LD_INT 0
69363: PPUSH
69364: CALL 71358 0 3
// end ;
69368: GO 69322
69370: POP
69371: POP
// if tigers then
69372: LD_VAR 0 2
69376: IFFALSE 69460
// for i = 1 to tigers do
69378: LD_ADDR_VAR 0 11
69382: PUSH
69383: DOUBLE
69384: LD_INT 1
69386: DEC
69387: ST_TO_ADDR
69388: LD_VAR 0 2
69392: PUSH
69393: FOR_TO
69394: IFFALSE 69458
// begin hc_class = class_tiger ;
69396: LD_ADDR_OWVAR 28
69400: PUSH
69401: LD_INT 14
69403: ST_TO_ADDR
// hc_gallery =  ;
69404: LD_ADDR_OWVAR 33
69408: PUSH
69409: LD_STRING 
69411: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
69412: LD_ADDR_OWVAR 35
69416: PUSH
69417: LD_INT 7
69419: NEG
69420: PPUSH
69421: LD_INT 7
69423: PPUSH
69424: CALL_OW 12
69428: ST_TO_ADDR
// animal := CreateHuman ;
69429: LD_ADDR_VAR 0 12
69433: PUSH
69434: CALL_OW 44
69438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69439: LD_VAR 0 12
69443: PPUSH
69444: LD_VAR 0 8
69448: PPUSH
69449: LD_INT 0
69451: PPUSH
69452: CALL 71358 0 3
// end ;
69456: GO 69393
69458: POP
69459: POP
// if apemans then
69460: LD_VAR 0 3
69464: IFFALSE 69587
// for i = 1 to apemans do
69466: LD_ADDR_VAR 0 11
69470: PUSH
69471: DOUBLE
69472: LD_INT 1
69474: DEC
69475: ST_TO_ADDR
69476: LD_VAR 0 3
69480: PUSH
69481: FOR_TO
69482: IFFALSE 69585
// begin hc_class = class_apeman ;
69484: LD_ADDR_OWVAR 28
69488: PUSH
69489: LD_INT 12
69491: ST_TO_ADDR
// hc_gallery =  ;
69492: LD_ADDR_OWVAR 33
69496: PUSH
69497: LD_STRING 
69499: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
69500: LD_ADDR_OWVAR 35
69504: PUSH
69505: LD_INT 2
69507: NEG
69508: PPUSH
69509: LD_INT 2
69511: PPUSH
69512: CALL_OW 12
69516: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
69517: LD_ADDR_OWVAR 31
69521: PUSH
69522: LD_INT 1
69524: PPUSH
69525: LD_INT 3
69527: PPUSH
69528: CALL_OW 12
69532: PUSH
69533: LD_INT 1
69535: PPUSH
69536: LD_INT 3
69538: PPUSH
69539: CALL_OW 12
69543: PUSH
69544: LD_INT 0
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: LIST
69554: LIST
69555: ST_TO_ADDR
// animal := CreateHuman ;
69556: LD_ADDR_VAR 0 12
69560: PUSH
69561: CALL_OW 44
69565: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69566: LD_VAR 0 12
69570: PPUSH
69571: LD_VAR 0 8
69575: PPUSH
69576: LD_INT 0
69578: PPUSH
69579: CALL 71358 0 3
// end ;
69583: GO 69481
69585: POP
69586: POP
// if enchidnas then
69587: LD_VAR 0 4
69591: IFFALSE 69658
// for i = 1 to enchidnas do
69593: LD_ADDR_VAR 0 11
69597: PUSH
69598: DOUBLE
69599: LD_INT 1
69601: DEC
69602: ST_TO_ADDR
69603: LD_VAR 0 4
69607: PUSH
69608: FOR_TO
69609: IFFALSE 69656
// begin hc_class = 13 ;
69611: LD_ADDR_OWVAR 28
69615: PUSH
69616: LD_INT 13
69618: ST_TO_ADDR
// hc_gallery =  ;
69619: LD_ADDR_OWVAR 33
69623: PUSH
69624: LD_STRING 
69626: ST_TO_ADDR
// animal := CreateHuman ;
69627: LD_ADDR_VAR 0 12
69631: PUSH
69632: CALL_OW 44
69636: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
69637: LD_VAR 0 12
69641: PPUSH
69642: LD_VAR 0 8
69646: PPUSH
69647: LD_INT 0
69649: PPUSH
69650: CALL 71358 0 3
// end ;
69654: GO 69608
69656: POP
69657: POP
// if fishes then
69658: LD_VAR 0 7
69662: IFFALSE 69729
// for i = 1 to fishes do
69664: LD_ADDR_VAR 0 11
69668: PUSH
69669: DOUBLE
69670: LD_INT 1
69672: DEC
69673: ST_TO_ADDR
69674: LD_VAR 0 7
69678: PUSH
69679: FOR_TO
69680: IFFALSE 69727
// begin hc_class = 20 ;
69682: LD_ADDR_OWVAR 28
69686: PUSH
69687: LD_INT 20
69689: ST_TO_ADDR
// hc_gallery =  ;
69690: LD_ADDR_OWVAR 33
69694: PUSH
69695: LD_STRING 
69697: ST_TO_ADDR
// animal := CreateHuman ;
69698: LD_ADDR_VAR 0 12
69702: PUSH
69703: CALL_OW 44
69707: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
69708: LD_VAR 0 12
69712: PPUSH
69713: LD_VAR 0 9
69717: PPUSH
69718: LD_INT 0
69720: PPUSH
69721: CALL 71358 0 3
// end ;
69725: GO 69679
69727: POP
69728: POP
// end ;
69729: LD_VAR 0 10
69733: RET
// export function WantHeal ( sci , unit ) ; begin
69734: LD_INT 0
69736: PPUSH
// if GetTaskList ( sci ) > 0 then
69737: LD_VAR 0 1
69741: PPUSH
69742: CALL_OW 437
69746: PUSH
69747: LD_INT 0
69749: GREATER
69750: IFFALSE 69820
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
69752: LD_VAR 0 1
69756: PPUSH
69757: CALL_OW 437
69761: PUSH
69762: LD_INT 1
69764: ARRAY
69765: PUSH
69766: LD_INT 1
69768: ARRAY
69769: PUSH
69770: LD_STRING l
69772: EQUAL
69773: PUSH
69774: LD_VAR 0 1
69778: PPUSH
69779: CALL_OW 437
69783: PUSH
69784: LD_INT 1
69786: ARRAY
69787: PUSH
69788: LD_INT 4
69790: ARRAY
69791: PUSH
69792: LD_VAR 0 2
69796: EQUAL
69797: AND
69798: IFFALSE 69810
// result := true else
69800: LD_ADDR_VAR 0 3
69804: PUSH
69805: LD_INT 1
69807: ST_TO_ADDR
69808: GO 69818
// result := false ;
69810: LD_ADDR_VAR 0 3
69814: PUSH
69815: LD_INT 0
69817: ST_TO_ADDR
// end else
69818: GO 69828
// result := false ;
69820: LD_ADDR_VAR 0 3
69824: PUSH
69825: LD_INT 0
69827: ST_TO_ADDR
// end ;
69828: LD_VAR 0 3
69832: RET
// export function HealTarget ( sci ) ; begin
69833: LD_INT 0
69835: PPUSH
// if not sci then
69836: LD_VAR 0 1
69840: NOT
69841: IFFALSE 69845
// exit ;
69843: GO 69910
// result := 0 ;
69845: LD_ADDR_VAR 0 2
69849: PUSH
69850: LD_INT 0
69852: ST_TO_ADDR
// if GetTaskList ( sci ) then
69853: LD_VAR 0 1
69857: PPUSH
69858: CALL_OW 437
69862: IFFALSE 69910
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
69864: LD_VAR 0 1
69868: PPUSH
69869: CALL_OW 437
69873: PUSH
69874: LD_INT 1
69876: ARRAY
69877: PUSH
69878: LD_INT 1
69880: ARRAY
69881: PUSH
69882: LD_STRING l
69884: EQUAL
69885: IFFALSE 69910
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
69887: LD_ADDR_VAR 0 2
69891: PUSH
69892: LD_VAR 0 1
69896: PPUSH
69897: CALL_OW 437
69901: PUSH
69902: LD_INT 1
69904: ARRAY
69905: PUSH
69906: LD_INT 4
69908: ARRAY
69909: ST_TO_ADDR
// end ;
69910: LD_VAR 0 2
69914: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
69915: LD_INT 0
69917: PPUSH
69918: PPUSH
69919: PPUSH
69920: PPUSH
// if not base_units then
69921: LD_VAR 0 1
69925: NOT
69926: IFFALSE 69930
// exit ;
69928: GO 70017
// result := false ;
69930: LD_ADDR_VAR 0 2
69934: PUSH
69935: LD_INT 0
69937: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
69938: LD_ADDR_VAR 0 5
69942: PUSH
69943: LD_VAR 0 1
69947: PPUSH
69948: LD_INT 21
69950: PUSH
69951: LD_INT 3
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PPUSH
69958: CALL_OW 72
69962: ST_TO_ADDR
// if not tmp then
69963: LD_VAR 0 5
69967: NOT
69968: IFFALSE 69972
// exit ;
69970: GO 70017
// for i in tmp do
69972: LD_ADDR_VAR 0 3
69976: PUSH
69977: LD_VAR 0 5
69981: PUSH
69982: FOR_IN
69983: IFFALSE 70015
// begin result := EnemyInRange ( i , 22 ) ;
69985: LD_ADDR_VAR 0 2
69989: PUSH
69990: LD_VAR 0 3
69994: PPUSH
69995: LD_INT 22
69997: PPUSH
69998: CALL 67604 0 2
70002: ST_TO_ADDR
// if result then
70003: LD_VAR 0 2
70007: IFFALSE 70013
// exit ;
70009: POP
70010: POP
70011: GO 70017
// end ;
70013: GO 69982
70015: POP
70016: POP
// end ;
70017: LD_VAR 0 2
70021: RET
// export function FilterByTag ( units , tag ) ; begin
70022: LD_INT 0
70024: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
70025: LD_ADDR_VAR 0 3
70029: PUSH
70030: LD_VAR 0 1
70034: PPUSH
70035: LD_INT 120
70037: PUSH
70038: LD_VAR 0 2
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PPUSH
70047: CALL_OW 72
70051: ST_TO_ADDR
// end ;
70052: LD_VAR 0 3
70056: RET
// export function IsDriver ( un ) ; begin
70057: LD_INT 0
70059: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
70060: LD_ADDR_VAR 0 2
70064: PUSH
70065: LD_VAR 0 1
70069: PUSH
70070: LD_INT 55
70072: PUSH
70073: EMPTY
70074: LIST
70075: PPUSH
70076: CALL_OW 69
70080: IN
70081: ST_TO_ADDR
// end ;
70082: LD_VAR 0 2
70086: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
70087: LD_INT 0
70089: PPUSH
70090: PPUSH
// list := [ ] ;
70091: LD_ADDR_VAR 0 5
70095: PUSH
70096: EMPTY
70097: ST_TO_ADDR
// case d of 0 :
70098: LD_VAR 0 3
70102: PUSH
70103: LD_INT 0
70105: DOUBLE
70106: EQUAL
70107: IFTRUE 70111
70109: GO 70244
70111: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
70112: LD_ADDR_VAR 0 5
70116: PUSH
70117: LD_VAR 0 1
70121: PUSH
70122: LD_INT 4
70124: MINUS
70125: PUSH
70126: LD_VAR 0 2
70130: PUSH
70131: LD_INT 4
70133: MINUS
70134: PUSH
70135: LD_INT 2
70137: PUSH
70138: EMPTY
70139: LIST
70140: LIST
70141: LIST
70142: PUSH
70143: LD_VAR 0 1
70147: PUSH
70148: LD_INT 3
70150: MINUS
70151: PUSH
70152: LD_VAR 0 2
70156: PUSH
70157: LD_INT 1
70159: PUSH
70160: EMPTY
70161: LIST
70162: LIST
70163: LIST
70164: PUSH
70165: LD_VAR 0 1
70169: PUSH
70170: LD_INT 4
70172: PLUS
70173: PUSH
70174: LD_VAR 0 2
70178: PUSH
70179: LD_INT 4
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: LIST
70186: PUSH
70187: LD_VAR 0 1
70191: PUSH
70192: LD_INT 3
70194: PLUS
70195: PUSH
70196: LD_VAR 0 2
70200: PUSH
70201: LD_INT 3
70203: PLUS
70204: PUSH
70205: LD_INT 5
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: LIST
70212: PUSH
70213: LD_VAR 0 1
70217: PUSH
70218: LD_VAR 0 2
70222: PUSH
70223: LD_INT 4
70225: PLUS
70226: PUSH
70227: LD_INT 0
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: LIST
70234: PUSH
70235: EMPTY
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: ST_TO_ADDR
// end ; 1 :
70242: GO 70942
70244: LD_INT 1
70246: DOUBLE
70247: EQUAL
70248: IFTRUE 70252
70250: GO 70385
70252: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
70253: LD_ADDR_VAR 0 5
70257: PUSH
70258: LD_VAR 0 1
70262: PUSH
70263: LD_VAR 0 2
70267: PUSH
70268: LD_INT 4
70270: MINUS
70271: PUSH
70272: LD_INT 3
70274: PUSH
70275: EMPTY
70276: LIST
70277: LIST
70278: LIST
70279: PUSH
70280: LD_VAR 0 1
70284: PUSH
70285: LD_INT 3
70287: MINUS
70288: PUSH
70289: LD_VAR 0 2
70293: PUSH
70294: LD_INT 3
70296: MINUS
70297: PUSH
70298: LD_INT 2
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: LIST
70305: PUSH
70306: LD_VAR 0 1
70310: PUSH
70311: LD_INT 4
70313: MINUS
70314: PUSH
70315: LD_VAR 0 2
70319: PUSH
70320: LD_INT 1
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: LIST
70327: PUSH
70328: LD_VAR 0 1
70332: PUSH
70333: LD_VAR 0 2
70337: PUSH
70338: LD_INT 3
70340: PLUS
70341: PUSH
70342: LD_INT 0
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: LIST
70349: PUSH
70350: LD_VAR 0 1
70354: PUSH
70355: LD_INT 4
70357: PLUS
70358: PUSH
70359: LD_VAR 0 2
70363: PUSH
70364: LD_INT 4
70366: PLUS
70367: PUSH
70368: LD_INT 5
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: LIST
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: ST_TO_ADDR
// end ; 2 :
70383: GO 70942
70385: LD_INT 2
70387: DOUBLE
70388: EQUAL
70389: IFTRUE 70393
70391: GO 70522
70393: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
70394: LD_ADDR_VAR 0 5
70398: PUSH
70399: LD_VAR 0 1
70403: PUSH
70404: LD_VAR 0 2
70408: PUSH
70409: LD_INT 3
70411: MINUS
70412: PUSH
70413: LD_INT 3
70415: PUSH
70416: EMPTY
70417: LIST
70418: LIST
70419: LIST
70420: PUSH
70421: LD_VAR 0 1
70425: PUSH
70426: LD_INT 4
70428: PLUS
70429: PUSH
70430: LD_VAR 0 2
70434: PUSH
70435: LD_INT 4
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: LIST
70442: PUSH
70443: LD_VAR 0 1
70447: PUSH
70448: LD_VAR 0 2
70452: PUSH
70453: LD_INT 4
70455: PLUS
70456: PUSH
70457: LD_INT 0
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: PUSH
70465: LD_VAR 0 1
70469: PUSH
70470: LD_INT 3
70472: MINUS
70473: PUSH
70474: LD_VAR 0 2
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: LIST
70486: PUSH
70487: LD_VAR 0 1
70491: PUSH
70492: LD_INT 4
70494: MINUS
70495: PUSH
70496: LD_VAR 0 2
70500: PUSH
70501: LD_INT 4
70503: MINUS
70504: PUSH
70505: LD_INT 2
70507: PUSH
70508: EMPTY
70509: LIST
70510: LIST
70511: LIST
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: LIST
70517: LIST
70518: LIST
70519: ST_TO_ADDR
// end ; 3 :
70520: GO 70942
70522: LD_INT 3
70524: DOUBLE
70525: EQUAL
70526: IFTRUE 70530
70528: GO 70663
70530: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
70531: LD_ADDR_VAR 0 5
70535: PUSH
70536: LD_VAR 0 1
70540: PUSH
70541: LD_INT 3
70543: PLUS
70544: PUSH
70545: LD_VAR 0 2
70549: PUSH
70550: LD_INT 4
70552: PUSH
70553: EMPTY
70554: LIST
70555: LIST
70556: LIST
70557: PUSH
70558: LD_VAR 0 1
70562: PUSH
70563: LD_INT 4
70565: PLUS
70566: PUSH
70567: LD_VAR 0 2
70571: PUSH
70572: LD_INT 4
70574: PLUS
70575: PUSH
70576: LD_INT 5
70578: PUSH
70579: EMPTY
70580: LIST
70581: LIST
70582: LIST
70583: PUSH
70584: LD_VAR 0 1
70588: PUSH
70589: LD_INT 4
70591: MINUS
70592: PUSH
70593: LD_VAR 0 2
70597: PUSH
70598: LD_INT 1
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: LIST
70605: PUSH
70606: LD_VAR 0 1
70610: PUSH
70611: LD_VAR 0 2
70615: PUSH
70616: LD_INT 4
70618: MINUS
70619: PUSH
70620: LD_INT 3
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: LIST
70627: PUSH
70628: LD_VAR 0 1
70632: PUSH
70633: LD_INT 3
70635: MINUS
70636: PUSH
70637: LD_VAR 0 2
70641: PUSH
70642: LD_INT 3
70644: MINUS
70645: PUSH
70646: LD_INT 2
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: LIST
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: ST_TO_ADDR
// end ; 4 :
70661: GO 70942
70663: LD_INT 4
70665: DOUBLE
70666: EQUAL
70667: IFTRUE 70671
70669: GO 70804
70671: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
70672: LD_ADDR_VAR 0 5
70676: PUSH
70677: LD_VAR 0 1
70681: PUSH
70682: LD_VAR 0 2
70686: PUSH
70687: LD_INT 4
70689: PLUS
70690: PUSH
70691: LD_INT 0
70693: PUSH
70694: EMPTY
70695: LIST
70696: LIST
70697: LIST
70698: PUSH
70699: LD_VAR 0 1
70703: PUSH
70704: LD_INT 3
70706: PLUS
70707: PUSH
70708: LD_VAR 0 2
70712: PUSH
70713: LD_INT 3
70715: PLUS
70716: PUSH
70717: LD_INT 5
70719: PUSH
70720: EMPTY
70721: LIST
70722: LIST
70723: LIST
70724: PUSH
70725: LD_VAR 0 1
70729: PUSH
70730: LD_INT 4
70732: PLUS
70733: PUSH
70734: LD_VAR 0 2
70738: PUSH
70739: LD_INT 4
70741: PUSH
70742: EMPTY
70743: LIST
70744: LIST
70745: LIST
70746: PUSH
70747: LD_VAR 0 1
70751: PUSH
70752: LD_VAR 0 2
70756: PUSH
70757: LD_INT 3
70759: MINUS
70760: PUSH
70761: LD_INT 3
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: LIST
70768: PUSH
70769: LD_VAR 0 1
70773: PUSH
70774: LD_INT 4
70776: MINUS
70777: PUSH
70778: LD_VAR 0 2
70782: PUSH
70783: LD_INT 4
70785: MINUS
70786: PUSH
70787: LD_INT 2
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: LIST
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: ST_TO_ADDR
// end ; 5 :
70802: GO 70942
70804: LD_INT 5
70806: DOUBLE
70807: EQUAL
70808: IFTRUE 70812
70810: GO 70941
70812: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
70813: LD_ADDR_VAR 0 5
70817: PUSH
70818: LD_VAR 0 1
70822: PUSH
70823: LD_INT 4
70825: MINUS
70826: PUSH
70827: LD_VAR 0 2
70831: PUSH
70832: LD_INT 1
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: LIST
70839: PUSH
70840: LD_VAR 0 1
70844: PUSH
70845: LD_VAR 0 2
70849: PUSH
70850: LD_INT 4
70852: MINUS
70853: PUSH
70854: LD_INT 3
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: LIST
70861: PUSH
70862: LD_VAR 0 1
70866: PUSH
70867: LD_INT 4
70869: PLUS
70870: PUSH
70871: LD_VAR 0 2
70875: PUSH
70876: LD_INT 4
70878: PLUS
70879: PUSH
70880: LD_INT 5
70882: PUSH
70883: EMPTY
70884: LIST
70885: LIST
70886: LIST
70887: PUSH
70888: LD_VAR 0 1
70892: PUSH
70893: LD_INT 3
70895: PLUS
70896: PUSH
70897: LD_VAR 0 2
70901: PUSH
70902: LD_INT 4
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: LIST
70909: PUSH
70910: LD_VAR 0 1
70914: PUSH
70915: LD_VAR 0 2
70919: PUSH
70920: LD_INT 3
70922: PLUS
70923: PUSH
70924: LD_INT 0
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: LIST
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: ST_TO_ADDR
// end ; end ;
70939: GO 70942
70941: POP
// result := list ;
70942: LD_ADDR_VAR 0 4
70946: PUSH
70947: LD_VAR 0 5
70951: ST_TO_ADDR
// end ;
70952: LD_VAR 0 4
70956: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
70957: LD_INT 0
70959: PPUSH
70960: PPUSH
70961: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
70962: LD_VAR 0 1
70966: NOT
70967: PUSH
70968: LD_VAR 0 2
70972: PUSH
70973: LD_INT 1
70975: PUSH
70976: LD_INT 2
70978: PUSH
70979: LD_INT 3
70981: PUSH
70982: LD_INT 4
70984: PUSH
70985: EMPTY
70986: LIST
70987: LIST
70988: LIST
70989: LIST
70990: IN
70991: NOT
70992: OR
70993: IFFALSE 70997
// exit ;
70995: GO 71080
// tmp := [ ] ;
70997: LD_ADDR_VAR 0 5
71001: PUSH
71002: EMPTY
71003: ST_TO_ADDR
// for i in units do
71004: LD_ADDR_VAR 0 4
71008: PUSH
71009: LD_VAR 0 1
71013: PUSH
71014: FOR_IN
71015: IFFALSE 71049
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
71017: LD_ADDR_VAR 0 5
71021: PUSH
71022: LD_VAR 0 5
71026: PPUSH
71027: LD_VAR 0 4
71031: PPUSH
71032: LD_VAR 0 2
71036: PPUSH
71037: CALL_OW 259
71041: PPUSH
71042: CALL 72440 0 2
71046: ST_TO_ADDR
71047: GO 71014
71049: POP
71050: POP
// if not tmp then
71051: LD_VAR 0 5
71055: NOT
71056: IFFALSE 71060
// exit ;
71058: GO 71080
// result := SortListByListDesc ( units , tmp ) ;
71060: LD_ADDR_VAR 0 3
71064: PUSH
71065: LD_VAR 0 1
71069: PPUSH
71070: LD_VAR 0 5
71074: PPUSH
71075: CALL_OW 77
71079: ST_TO_ADDR
// end ;
71080: LD_VAR 0 3
71084: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
71085: LD_INT 0
71087: PPUSH
71088: PPUSH
71089: PPUSH
// result := false ;
71090: LD_ADDR_VAR 0 3
71094: PUSH
71095: LD_INT 0
71097: ST_TO_ADDR
// if not building then
71098: LD_VAR 0 2
71102: NOT
71103: IFFALSE 71107
// exit ;
71105: GO 71245
// x := GetX ( building ) ;
71107: LD_ADDR_VAR 0 4
71111: PUSH
71112: LD_VAR 0 2
71116: PPUSH
71117: CALL_OW 250
71121: ST_TO_ADDR
// y := GetY ( building ) ;
71122: LD_ADDR_VAR 0 5
71126: PUSH
71127: LD_VAR 0 2
71131: PPUSH
71132: CALL_OW 251
71136: ST_TO_ADDR
// if not x or not y then
71137: LD_VAR 0 4
71141: NOT
71142: PUSH
71143: LD_VAR 0 5
71147: NOT
71148: OR
71149: IFFALSE 71153
// exit ;
71151: GO 71245
// if GetTaskList ( unit ) then
71153: LD_VAR 0 1
71157: PPUSH
71158: CALL_OW 437
71162: IFFALSE 71245
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71164: LD_STRING e
71166: PUSH
71167: LD_VAR 0 1
71171: PPUSH
71172: CALL_OW 437
71176: PUSH
71177: LD_INT 1
71179: ARRAY
71180: PUSH
71181: LD_INT 1
71183: ARRAY
71184: EQUAL
71185: PUSH
71186: LD_VAR 0 4
71190: PUSH
71191: LD_VAR 0 1
71195: PPUSH
71196: CALL_OW 437
71200: PUSH
71201: LD_INT 1
71203: ARRAY
71204: PUSH
71205: LD_INT 2
71207: ARRAY
71208: EQUAL
71209: AND
71210: PUSH
71211: LD_VAR 0 5
71215: PUSH
71216: LD_VAR 0 1
71220: PPUSH
71221: CALL_OW 437
71225: PUSH
71226: LD_INT 1
71228: ARRAY
71229: PUSH
71230: LD_INT 3
71232: ARRAY
71233: EQUAL
71234: AND
71235: IFFALSE 71245
// result := true end ;
71237: LD_ADDR_VAR 0 3
71241: PUSH
71242: LD_INT 1
71244: ST_TO_ADDR
// end ;
71245: LD_VAR 0 3
71249: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
71250: LD_INT 0
71252: PPUSH
// result := false ;
71253: LD_ADDR_VAR 0 4
71257: PUSH
71258: LD_INT 0
71260: ST_TO_ADDR
// if GetTaskList ( unit ) then
71261: LD_VAR 0 1
71265: PPUSH
71266: CALL_OW 437
71270: IFFALSE 71353
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
71272: LD_STRING M
71274: PUSH
71275: LD_VAR 0 1
71279: PPUSH
71280: CALL_OW 437
71284: PUSH
71285: LD_INT 1
71287: ARRAY
71288: PUSH
71289: LD_INT 1
71291: ARRAY
71292: EQUAL
71293: PUSH
71294: LD_VAR 0 2
71298: PUSH
71299: LD_VAR 0 1
71303: PPUSH
71304: CALL_OW 437
71308: PUSH
71309: LD_INT 1
71311: ARRAY
71312: PUSH
71313: LD_INT 2
71315: ARRAY
71316: EQUAL
71317: AND
71318: PUSH
71319: LD_VAR 0 3
71323: PUSH
71324: LD_VAR 0 1
71328: PPUSH
71329: CALL_OW 437
71333: PUSH
71334: LD_INT 1
71336: ARRAY
71337: PUSH
71338: LD_INT 3
71340: ARRAY
71341: EQUAL
71342: AND
71343: IFFALSE 71353
// result := true ;
71345: LD_ADDR_VAR 0 4
71349: PUSH
71350: LD_INT 1
71352: ST_TO_ADDR
// end ; end ;
71353: LD_VAR 0 4
71357: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
71358: LD_INT 0
71360: PPUSH
71361: PPUSH
71362: PPUSH
71363: PPUSH
// if not unit or not area then
71364: LD_VAR 0 1
71368: NOT
71369: PUSH
71370: LD_VAR 0 2
71374: NOT
71375: OR
71376: IFFALSE 71380
// exit ;
71378: GO 71543
// tmp := AreaToList ( area , i ) ;
71380: LD_ADDR_VAR 0 6
71384: PUSH
71385: LD_VAR 0 2
71389: PPUSH
71390: LD_VAR 0 5
71394: PPUSH
71395: CALL_OW 517
71399: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
71400: LD_ADDR_VAR 0 5
71404: PUSH
71405: DOUBLE
71406: LD_INT 1
71408: DEC
71409: ST_TO_ADDR
71410: LD_VAR 0 6
71414: PUSH
71415: LD_INT 1
71417: ARRAY
71418: PUSH
71419: FOR_TO
71420: IFFALSE 71541
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
71422: LD_ADDR_VAR 0 7
71426: PUSH
71427: LD_VAR 0 6
71431: PUSH
71432: LD_INT 1
71434: ARRAY
71435: PUSH
71436: LD_VAR 0 5
71440: ARRAY
71441: PUSH
71442: LD_VAR 0 6
71446: PUSH
71447: LD_INT 2
71449: ARRAY
71450: PUSH
71451: LD_VAR 0 5
71455: ARRAY
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
71461: LD_INT 92
71463: PUSH
71464: LD_VAR 0 7
71468: PUSH
71469: LD_INT 1
71471: ARRAY
71472: PUSH
71473: LD_VAR 0 7
71477: PUSH
71478: LD_INT 2
71480: ARRAY
71481: PUSH
71482: LD_INT 3
71484: PUSH
71485: EMPTY
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: PPUSH
71491: CALL_OW 69
71495: PUSH
71496: LD_INT 0
71498: EQUAL
71499: IFFALSE 71539
// begin PlaceUnitArea ( unit , area , mode ) ;
71501: LD_VAR 0 1
71505: PPUSH
71506: LD_VAR 0 2
71510: PPUSH
71511: LD_VAR 0 3
71515: PPUSH
71516: CALL_OW 49
// result := IsPlaced ( unit ) ;
71520: LD_ADDR_VAR 0 4
71524: PUSH
71525: LD_VAR 0 1
71529: PPUSH
71530: CALL_OW 305
71534: ST_TO_ADDR
// exit ;
71535: POP
71536: POP
71537: GO 71543
// end ; end ;
71539: GO 71419
71541: POP
71542: POP
// end ;
71543: LD_VAR 0 4
71547: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
71548: LD_INT 0
71550: PPUSH
71551: PPUSH
71552: PPUSH
// if not side or side > 8 then
71553: LD_VAR 0 1
71557: NOT
71558: PUSH
71559: LD_VAR 0 1
71563: PUSH
71564: LD_INT 8
71566: GREATER
71567: OR
71568: IFFALSE 71572
// exit ;
71570: GO 71759
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
71572: LD_ADDR_VAR 0 4
71576: PUSH
71577: LD_INT 22
71579: PUSH
71580: LD_VAR 0 1
71584: PUSH
71585: EMPTY
71586: LIST
71587: LIST
71588: PUSH
71589: LD_INT 21
71591: PUSH
71592: LD_INT 3
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PPUSH
71603: CALL_OW 69
71607: ST_TO_ADDR
// if not tmp then
71608: LD_VAR 0 4
71612: NOT
71613: IFFALSE 71617
// exit ;
71615: GO 71759
// enable_addtolog := true ;
71617: LD_ADDR_OWVAR 81
71621: PUSH
71622: LD_INT 1
71624: ST_TO_ADDR
// AddToLog ( [ ) ;
71625: LD_STRING [
71627: PPUSH
71628: CALL_OW 561
// for i in tmp do
71632: LD_ADDR_VAR 0 3
71636: PUSH
71637: LD_VAR 0 4
71641: PUSH
71642: FOR_IN
71643: IFFALSE 71750
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
71645: LD_STRING [
71647: PUSH
71648: LD_VAR 0 3
71652: PPUSH
71653: CALL_OW 266
71657: STR
71658: PUSH
71659: LD_STRING , 
71661: STR
71662: PUSH
71663: LD_VAR 0 3
71667: PPUSH
71668: CALL_OW 250
71672: STR
71673: PUSH
71674: LD_STRING , 
71676: STR
71677: PUSH
71678: LD_VAR 0 3
71682: PPUSH
71683: CALL_OW 251
71687: STR
71688: PUSH
71689: LD_STRING , 
71691: STR
71692: PUSH
71693: LD_VAR 0 3
71697: PPUSH
71698: CALL_OW 254
71702: STR
71703: PUSH
71704: LD_STRING , 
71706: STR
71707: PUSH
71708: LD_VAR 0 3
71712: PPUSH
71713: LD_INT 1
71715: PPUSH
71716: CALL_OW 268
71720: STR
71721: PUSH
71722: LD_STRING , 
71724: STR
71725: PUSH
71726: LD_VAR 0 3
71730: PPUSH
71731: LD_INT 2
71733: PPUSH
71734: CALL_OW 268
71738: STR
71739: PUSH
71740: LD_STRING ],
71742: STR
71743: PPUSH
71744: CALL_OW 561
// end ;
71748: GO 71642
71750: POP
71751: POP
// AddToLog ( ]; ) ;
71752: LD_STRING ];
71754: PPUSH
71755: CALL_OW 561
// end ;
71759: LD_VAR 0 2
71763: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
71764: LD_INT 0
71766: PPUSH
71767: PPUSH
71768: PPUSH
71769: PPUSH
71770: PPUSH
// if not area or not rate or not max then
71771: LD_VAR 0 1
71775: NOT
71776: PUSH
71777: LD_VAR 0 2
71781: NOT
71782: OR
71783: PUSH
71784: LD_VAR 0 4
71788: NOT
71789: OR
71790: IFFALSE 71794
// exit ;
71792: GO 71983
// while 1 do
71794: LD_INT 1
71796: IFFALSE 71983
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
71798: LD_ADDR_VAR 0 9
71802: PUSH
71803: LD_VAR 0 1
71807: PPUSH
71808: LD_INT 1
71810: PPUSH
71811: CALL_OW 287
71815: PUSH
71816: LD_INT 10
71818: MUL
71819: ST_TO_ADDR
// r := rate / 10 ;
71820: LD_ADDR_VAR 0 7
71824: PUSH
71825: LD_VAR 0 2
71829: PUSH
71830: LD_INT 10
71832: DIVREAL
71833: ST_TO_ADDR
// time := 1 1$00 ;
71834: LD_ADDR_VAR 0 8
71838: PUSH
71839: LD_INT 2100
71841: ST_TO_ADDR
// if amount < min then
71842: LD_VAR 0 9
71846: PUSH
71847: LD_VAR 0 3
71851: LESS
71852: IFFALSE 71870
// r := r * 2 else
71854: LD_ADDR_VAR 0 7
71858: PUSH
71859: LD_VAR 0 7
71863: PUSH
71864: LD_INT 2
71866: MUL
71867: ST_TO_ADDR
71868: GO 71896
// if amount > max then
71870: LD_VAR 0 9
71874: PUSH
71875: LD_VAR 0 4
71879: GREATER
71880: IFFALSE 71896
// r := r / 2 ;
71882: LD_ADDR_VAR 0 7
71886: PUSH
71887: LD_VAR 0 7
71891: PUSH
71892: LD_INT 2
71894: DIVREAL
71895: ST_TO_ADDR
// time := time / r ;
71896: LD_ADDR_VAR 0 8
71900: PUSH
71901: LD_VAR 0 8
71905: PUSH
71906: LD_VAR 0 7
71910: DIVREAL
71911: ST_TO_ADDR
// if time < 0 then
71912: LD_VAR 0 8
71916: PUSH
71917: LD_INT 0
71919: LESS
71920: IFFALSE 71937
// time := time * - 1 ;
71922: LD_ADDR_VAR 0 8
71926: PUSH
71927: LD_VAR 0 8
71931: PUSH
71932: LD_INT 1
71934: NEG
71935: MUL
71936: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
71937: LD_VAR 0 8
71941: PUSH
71942: LD_INT 35
71944: PPUSH
71945: LD_INT 875
71947: PPUSH
71948: CALL_OW 12
71952: PLUS
71953: PPUSH
71954: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
71958: LD_INT 1
71960: PPUSH
71961: LD_INT 5
71963: PPUSH
71964: CALL_OW 12
71968: PPUSH
71969: LD_VAR 0 1
71973: PPUSH
71974: LD_INT 1
71976: PPUSH
71977: CALL_OW 55
// end ;
71981: GO 71794
// end ;
71983: LD_VAR 0 5
71987: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
71988: LD_INT 0
71990: PPUSH
71991: PPUSH
71992: PPUSH
71993: PPUSH
71994: PPUSH
71995: PPUSH
71996: PPUSH
71997: PPUSH
// if not turrets or not factories then
71998: LD_VAR 0 1
72002: NOT
72003: PUSH
72004: LD_VAR 0 2
72008: NOT
72009: OR
72010: IFFALSE 72014
// exit ;
72012: GO 72321
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
72014: LD_ADDR_VAR 0 10
72018: PUSH
72019: LD_INT 5
72021: PUSH
72022: LD_INT 6
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 2
72031: PUSH
72032: LD_INT 4
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 3
72041: PUSH
72042: LD_INT 5
72044: PUSH
72045: EMPTY
72046: LIST
72047: LIST
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: LIST
72053: PUSH
72054: LD_INT 24
72056: PUSH
72057: LD_INT 25
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 23
72066: PUSH
72067: LD_INT 27
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 42
72080: PUSH
72081: LD_INT 43
72083: PUSH
72084: EMPTY
72085: LIST
72086: LIST
72087: PUSH
72088: LD_INT 44
72090: PUSH
72091: LD_INT 46
72093: PUSH
72094: EMPTY
72095: LIST
72096: LIST
72097: PUSH
72098: LD_INT 45
72100: PUSH
72101: LD_INT 47
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: LIST
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: LIST
72117: ST_TO_ADDR
// result := [ ] ;
72118: LD_ADDR_VAR 0 3
72122: PUSH
72123: EMPTY
72124: ST_TO_ADDR
// for i in turrets do
72125: LD_ADDR_VAR 0 4
72129: PUSH
72130: LD_VAR 0 1
72134: PUSH
72135: FOR_IN
72136: IFFALSE 72319
// begin nat := GetNation ( i ) ;
72138: LD_ADDR_VAR 0 7
72142: PUSH
72143: LD_VAR 0 4
72147: PPUSH
72148: CALL_OW 248
72152: ST_TO_ADDR
// weapon := 0 ;
72153: LD_ADDR_VAR 0 8
72157: PUSH
72158: LD_INT 0
72160: ST_TO_ADDR
// if not nat then
72161: LD_VAR 0 7
72165: NOT
72166: IFFALSE 72170
// continue ;
72168: GO 72135
// for j in list [ nat ] do
72170: LD_ADDR_VAR 0 5
72174: PUSH
72175: LD_VAR 0 10
72179: PUSH
72180: LD_VAR 0 7
72184: ARRAY
72185: PUSH
72186: FOR_IN
72187: IFFALSE 72228
// if GetBWeapon ( i ) = j [ 1 ] then
72189: LD_VAR 0 4
72193: PPUSH
72194: CALL_OW 269
72198: PUSH
72199: LD_VAR 0 5
72203: PUSH
72204: LD_INT 1
72206: ARRAY
72207: EQUAL
72208: IFFALSE 72226
// begin weapon := j [ 2 ] ;
72210: LD_ADDR_VAR 0 8
72214: PUSH
72215: LD_VAR 0 5
72219: PUSH
72220: LD_INT 2
72222: ARRAY
72223: ST_TO_ADDR
// break ;
72224: GO 72228
// end ;
72226: GO 72186
72228: POP
72229: POP
// if not weapon then
72230: LD_VAR 0 8
72234: NOT
72235: IFFALSE 72239
// continue ;
72237: GO 72135
// for k in factories do
72239: LD_ADDR_VAR 0 6
72243: PUSH
72244: LD_VAR 0 2
72248: PUSH
72249: FOR_IN
72250: IFFALSE 72315
// begin weapons := AvailableWeaponList ( k ) ;
72252: LD_ADDR_VAR 0 9
72256: PUSH
72257: LD_VAR 0 6
72261: PPUSH
72262: CALL_OW 478
72266: ST_TO_ADDR
// if not weapons then
72267: LD_VAR 0 9
72271: NOT
72272: IFFALSE 72276
// continue ;
72274: GO 72249
// if weapon in weapons then
72276: LD_VAR 0 8
72280: PUSH
72281: LD_VAR 0 9
72285: IN
72286: IFFALSE 72313
// begin result := [ i , weapon ] ;
72288: LD_ADDR_VAR 0 3
72292: PUSH
72293: LD_VAR 0 4
72297: PUSH
72298: LD_VAR 0 8
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: ST_TO_ADDR
// exit ;
72307: POP
72308: POP
72309: POP
72310: POP
72311: GO 72321
// end ; end ;
72313: GO 72249
72315: POP
72316: POP
// end ;
72317: GO 72135
72319: POP
72320: POP
// end ;
72321: LD_VAR 0 3
72325: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
72326: LD_INT 0
72328: PPUSH
// if not side or side > 8 then
72329: LD_VAR 0 3
72333: NOT
72334: PUSH
72335: LD_VAR 0 3
72339: PUSH
72340: LD_INT 8
72342: GREATER
72343: OR
72344: IFFALSE 72348
// exit ;
72346: GO 72407
// if not range then
72348: LD_VAR 0 4
72352: NOT
72353: IFFALSE 72364
// range := - 12 ;
72355: LD_ADDR_VAR 0 4
72359: PUSH
72360: LD_INT 12
72362: NEG
72363: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
72364: LD_VAR 0 1
72368: PPUSH
72369: LD_VAR 0 2
72373: PPUSH
72374: LD_VAR 0 3
72378: PPUSH
72379: LD_VAR 0 4
72383: PPUSH
72384: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
72388: LD_VAR 0 1
72392: PPUSH
72393: LD_VAR 0 2
72397: PPUSH
72398: LD_VAR 0 3
72402: PPUSH
72403: CALL_OW 331
// end ;
72407: LD_VAR 0 5
72411: RET
// export function Video ( mode ) ; begin
72412: LD_INT 0
72414: PPUSH
// ingame_video = mode ;
72415: LD_ADDR_OWVAR 52
72419: PUSH
72420: LD_VAR 0 1
72424: ST_TO_ADDR
// interface_hidden = mode ;
72425: LD_ADDR_OWVAR 54
72429: PUSH
72430: LD_VAR 0 1
72434: ST_TO_ADDR
// end ;
72435: LD_VAR 0 2
72439: RET
// export function Join ( array , element ) ; begin
72440: LD_INT 0
72442: PPUSH
// result := Replace ( array , array + 1 , element ) ;
72443: LD_ADDR_VAR 0 3
72447: PUSH
72448: LD_VAR 0 1
72452: PPUSH
72453: LD_VAR 0 1
72457: PUSH
72458: LD_INT 1
72460: PLUS
72461: PPUSH
72462: LD_VAR 0 2
72466: PPUSH
72467: CALL_OW 1
72471: ST_TO_ADDR
// end ;
72472: LD_VAR 0 3
72476: RET
// export function JoinUnion ( array , element ) ; begin
72477: LD_INT 0
72479: PPUSH
// result := array union element ;
72480: LD_ADDR_VAR 0 3
72484: PUSH
72485: LD_VAR 0 1
72489: PUSH
72490: LD_VAR 0 2
72494: UNION
72495: ST_TO_ADDR
// end ;
72496: LD_VAR 0 3
72500: RET
// export function GetBehemoths ( side ) ; begin
72501: LD_INT 0
72503: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
72504: LD_ADDR_VAR 0 2
72508: PUSH
72509: LD_INT 22
72511: PUSH
72512: LD_VAR 0 1
72516: PUSH
72517: EMPTY
72518: LIST
72519: LIST
72520: PUSH
72521: LD_INT 31
72523: PUSH
72524: LD_INT 25
72526: PUSH
72527: EMPTY
72528: LIST
72529: LIST
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PPUSH
72535: CALL_OW 69
72539: ST_TO_ADDR
// end ;
72540: LD_VAR 0 2
72544: RET
// export function Shuffle ( array ) ; var i , index ; begin
72545: LD_INT 0
72547: PPUSH
72548: PPUSH
72549: PPUSH
// result := [ ] ;
72550: LD_ADDR_VAR 0 2
72554: PUSH
72555: EMPTY
72556: ST_TO_ADDR
// if not array then
72557: LD_VAR 0 1
72561: NOT
72562: IFFALSE 72566
// exit ;
72564: GO 72665
// Randomize ;
72566: CALL_OW 10
// for i = array downto 1 do
72570: LD_ADDR_VAR 0 3
72574: PUSH
72575: DOUBLE
72576: LD_VAR 0 1
72580: INC
72581: ST_TO_ADDR
72582: LD_INT 1
72584: PUSH
72585: FOR_DOWNTO
72586: IFFALSE 72663
// begin index := rand ( 1 , array ) ;
72588: LD_ADDR_VAR 0 4
72592: PUSH
72593: LD_INT 1
72595: PPUSH
72596: LD_VAR 0 1
72600: PPUSH
72601: CALL_OW 12
72605: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
72606: LD_ADDR_VAR 0 2
72610: PUSH
72611: LD_VAR 0 2
72615: PPUSH
72616: LD_VAR 0 2
72620: PUSH
72621: LD_INT 1
72623: PLUS
72624: PPUSH
72625: LD_VAR 0 1
72629: PUSH
72630: LD_VAR 0 4
72634: ARRAY
72635: PPUSH
72636: CALL_OW 2
72640: ST_TO_ADDR
// array := Delete ( array , index ) ;
72641: LD_ADDR_VAR 0 1
72645: PUSH
72646: LD_VAR 0 1
72650: PPUSH
72651: LD_VAR 0 4
72655: PPUSH
72656: CALL_OW 3
72660: ST_TO_ADDR
// end ;
72661: GO 72585
72663: POP
72664: POP
// end ;
72665: LD_VAR 0 2
72669: RET
// export function GetBaseMaterials ( base ) ; begin
72670: LD_INT 0
72672: PPUSH
// result := [ 0 , 0 , 0 ] ;
72673: LD_ADDR_VAR 0 2
72677: PUSH
72678: LD_INT 0
72680: PUSH
72681: LD_INT 0
72683: PUSH
72684: LD_INT 0
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: LIST
72691: ST_TO_ADDR
// if not base then
72692: LD_VAR 0 1
72696: NOT
72697: IFFALSE 72701
// exit ;
72699: GO 72750
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
72701: LD_ADDR_VAR 0 2
72705: PUSH
72706: LD_VAR 0 1
72710: PPUSH
72711: LD_INT 1
72713: PPUSH
72714: CALL_OW 275
72718: PUSH
72719: LD_VAR 0 1
72723: PPUSH
72724: LD_INT 2
72726: PPUSH
72727: CALL_OW 275
72731: PUSH
72732: LD_VAR 0 1
72736: PPUSH
72737: LD_INT 3
72739: PPUSH
72740: CALL_OW 275
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: LIST
72749: ST_TO_ADDR
// end ;
72750: LD_VAR 0 2
72754: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
72755: LD_INT 0
72757: PPUSH
72758: PPUSH
// result := array ;
72759: LD_ADDR_VAR 0 3
72763: PUSH
72764: LD_VAR 0 1
72768: ST_TO_ADDR
// if size >= result then
72769: LD_VAR 0 2
72773: PUSH
72774: LD_VAR 0 3
72778: GREATEREQUAL
72779: IFFALSE 72783
// exit ;
72781: GO 72833
// if size then
72783: LD_VAR 0 2
72787: IFFALSE 72833
// for i := array downto size do
72789: LD_ADDR_VAR 0 4
72793: PUSH
72794: DOUBLE
72795: LD_VAR 0 1
72799: INC
72800: ST_TO_ADDR
72801: LD_VAR 0 2
72805: PUSH
72806: FOR_DOWNTO
72807: IFFALSE 72831
// result := Delete ( result , result ) ;
72809: LD_ADDR_VAR 0 3
72813: PUSH
72814: LD_VAR 0 3
72818: PPUSH
72819: LD_VAR 0 3
72823: PPUSH
72824: CALL_OW 3
72828: ST_TO_ADDR
72829: GO 72806
72831: POP
72832: POP
// end ;
72833: LD_VAR 0 3
72837: RET
// export function ComExit ( unit ) ; var tmp ; begin
72838: LD_INT 0
72840: PPUSH
72841: PPUSH
// if not IsInUnit ( unit ) then
72842: LD_VAR 0 1
72846: PPUSH
72847: CALL_OW 310
72851: NOT
72852: IFFALSE 72856
// exit ;
72854: GO 72916
// tmp := IsInUnit ( unit ) ;
72856: LD_ADDR_VAR 0 3
72860: PUSH
72861: LD_VAR 0 1
72865: PPUSH
72866: CALL_OW 310
72870: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
72871: LD_VAR 0 3
72875: PPUSH
72876: CALL_OW 247
72880: PUSH
72881: LD_INT 2
72883: EQUAL
72884: IFFALSE 72897
// ComExitVehicle ( unit ) else
72886: LD_VAR 0 1
72890: PPUSH
72891: CALL_OW 121
72895: GO 72906
// ComExitBuilding ( unit ) ;
72897: LD_VAR 0 1
72901: PPUSH
72902: CALL_OW 122
// result := tmp ;
72906: LD_ADDR_VAR 0 2
72910: PUSH
72911: LD_VAR 0 3
72915: ST_TO_ADDR
// end ;
72916: LD_VAR 0 2
72920: RET
// export function ComExitAll ( units ) ; var i ; begin
72921: LD_INT 0
72923: PPUSH
72924: PPUSH
// if not units then
72925: LD_VAR 0 1
72929: NOT
72930: IFFALSE 72934
// exit ;
72932: GO 72960
// for i in units do
72934: LD_ADDR_VAR 0 3
72938: PUSH
72939: LD_VAR 0 1
72943: PUSH
72944: FOR_IN
72945: IFFALSE 72958
// ComExit ( i ) ;
72947: LD_VAR 0 3
72951: PPUSH
72952: CALL 72838 0 1
72956: GO 72944
72958: POP
72959: POP
// end ;
72960: LD_VAR 0 2
72964: RET
// export function ResetHc ; begin
72965: LD_INT 0
72967: PPUSH
// InitHc ;
72968: CALL_OW 19
// hc_importance := 0 ;
72972: LD_ADDR_OWVAR 32
72976: PUSH
72977: LD_INT 0
72979: ST_TO_ADDR
// end ;
72980: LD_VAR 0 1
72984: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
72985: LD_INT 0
72987: PPUSH
72988: PPUSH
72989: PPUSH
// _x := ( x1 + x2 ) div 2 ;
72990: LD_ADDR_VAR 0 6
72994: PUSH
72995: LD_VAR 0 1
72999: PUSH
73000: LD_VAR 0 3
73004: PLUS
73005: PUSH
73006: LD_INT 2
73008: DIV
73009: ST_TO_ADDR
// if _x < 0 then
73010: LD_VAR 0 6
73014: PUSH
73015: LD_INT 0
73017: LESS
73018: IFFALSE 73035
// _x := _x * - 1 ;
73020: LD_ADDR_VAR 0 6
73024: PUSH
73025: LD_VAR 0 6
73029: PUSH
73030: LD_INT 1
73032: NEG
73033: MUL
73034: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
73035: LD_ADDR_VAR 0 7
73039: PUSH
73040: LD_VAR 0 2
73044: PUSH
73045: LD_VAR 0 4
73049: PLUS
73050: PUSH
73051: LD_INT 2
73053: DIV
73054: ST_TO_ADDR
// if _y < 0 then
73055: LD_VAR 0 7
73059: PUSH
73060: LD_INT 0
73062: LESS
73063: IFFALSE 73080
// _y := _y * - 1 ;
73065: LD_ADDR_VAR 0 7
73069: PUSH
73070: LD_VAR 0 7
73074: PUSH
73075: LD_INT 1
73077: NEG
73078: MUL
73079: ST_TO_ADDR
// result := [ _x , _y ] ;
73080: LD_ADDR_VAR 0 5
73084: PUSH
73085: LD_VAR 0 6
73089: PUSH
73090: LD_VAR 0 7
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: ST_TO_ADDR
// end ;
73099: LD_VAR 0 5
73103: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
73104: LD_INT 0
73106: PPUSH
73107: PPUSH
73108: PPUSH
73109: PPUSH
// task := GetTaskList ( unit ) ;
73110: LD_ADDR_VAR 0 7
73114: PUSH
73115: LD_VAR 0 1
73119: PPUSH
73120: CALL_OW 437
73124: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
73125: LD_VAR 0 7
73129: NOT
73130: PUSH
73131: LD_VAR 0 1
73135: PPUSH
73136: LD_VAR 0 2
73140: PPUSH
73141: CALL_OW 308
73145: NOT
73146: AND
73147: IFFALSE 73151
// exit ;
73149: GO 73269
// if IsInArea ( unit , area ) then
73151: LD_VAR 0 1
73155: PPUSH
73156: LD_VAR 0 2
73160: PPUSH
73161: CALL_OW 308
73165: IFFALSE 73183
// begin ComMoveToArea ( unit , goAway ) ;
73167: LD_VAR 0 1
73171: PPUSH
73172: LD_VAR 0 3
73176: PPUSH
73177: CALL_OW 113
// exit ;
73181: GO 73269
// end ; if task [ 1 ] [ 1 ] <> M then
73183: LD_VAR 0 7
73187: PUSH
73188: LD_INT 1
73190: ARRAY
73191: PUSH
73192: LD_INT 1
73194: ARRAY
73195: PUSH
73196: LD_STRING M
73198: NONEQUAL
73199: IFFALSE 73203
// exit ;
73201: GO 73269
// x := task [ 1 ] [ 2 ] ;
73203: LD_ADDR_VAR 0 5
73207: PUSH
73208: LD_VAR 0 7
73212: PUSH
73213: LD_INT 1
73215: ARRAY
73216: PUSH
73217: LD_INT 2
73219: ARRAY
73220: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
73221: LD_ADDR_VAR 0 6
73225: PUSH
73226: LD_VAR 0 7
73230: PUSH
73231: LD_INT 1
73233: ARRAY
73234: PUSH
73235: LD_INT 3
73237: ARRAY
73238: ST_TO_ADDR
// if InArea ( x , y , area ) then
73239: LD_VAR 0 5
73243: PPUSH
73244: LD_VAR 0 6
73248: PPUSH
73249: LD_VAR 0 2
73253: PPUSH
73254: CALL_OW 309
73258: IFFALSE 73269
// ComStop ( unit ) ;
73260: LD_VAR 0 1
73264: PPUSH
73265: CALL_OW 141
// end ;
73269: LD_VAR 0 4
73273: RET
// export function Abs ( value ) ; begin
73274: LD_INT 0
73276: PPUSH
// result := value ;
73277: LD_ADDR_VAR 0 2
73281: PUSH
73282: LD_VAR 0 1
73286: ST_TO_ADDR
// if value < 0 then
73287: LD_VAR 0 1
73291: PUSH
73292: LD_INT 0
73294: LESS
73295: IFFALSE 73312
// result := value * - 1 ;
73297: LD_ADDR_VAR 0 2
73301: PUSH
73302: LD_VAR 0 1
73306: PUSH
73307: LD_INT 1
73309: NEG
73310: MUL
73311: ST_TO_ADDR
// end ;
73312: LD_VAR 0 2
73316: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
73317: LD_INT 0
73319: PPUSH
73320: PPUSH
73321: PPUSH
73322: PPUSH
73323: PPUSH
73324: PPUSH
73325: PPUSH
73326: PPUSH
// if not unit or not building then
73327: LD_VAR 0 1
73331: NOT
73332: PUSH
73333: LD_VAR 0 2
73337: NOT
73338: OR
73339: IFFALSE 73343
// exit ;
73341: GO 73569
// x := GetX ( building ) ;
73343: LD_ADDR_VAR 0 4
73347: PUSH
73348: LD_VAR 0 2
73352: PPUSH
73353: CALL_OW 250
73357: ST_TO_ADDR
// y := GetY ( building ) ;
73358: LD_ADDR_VAR 0 6
73362: PUSH
73363: LD_VAR 0 2
73367: PPUSH
73368: CALL_OW 251
73372: ST_TO_ADDR
// d := GetDir ( building ) ;
73373: LD_ADDR_VAR 0 8
73377: PUSH
73378: LD_VAR 0 2
73382: PPUSH
73383: CALL_OW 254
73387: ST_TO_ADDR
// r := 4 ;
73388: LD_ADDR_VAR 0 9
73392: PUSH
73393: LD_INT 4
73395: ST_TO_ADDR
// for i := 1 to 5 do
73396: LD_ADDR_VAR 0 10
73400: PUSH
73401: DOUBLE
73402: LD_INT 1
73404: DEC
73405: ST_TO_ADDR
73406: LD_INT 5
73408: PUSH
73409: FOR_TO
73410: IFFALSE 73567
// begin _x := ShiftX ( x , d , r + i ) ;
73412: LD_ADDR_VAR 0 5
73416: PUSH
73417: LD_VAR 0 4
73421: PPUSH
73422: LD_VAR 0 8
73426: PPUSH
73427: LD_VAR 0 9
73431: PUSH
73432: LD_VAR 0 10
73436: PLUS
73437: PPUSH
73438: CALL_OW 272
73442: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
73443: LD_ADDR_VAR 0 7
73447: PUSH
73448: LD_VAR 0 6
73452: PPUSH
73453: LD_VAR 0 8
73457: PPUSH
73458: LD_VAR 0 9
73462: PUSH
73463: LD_VAR 0 10
73467: PLUS
73468: PPUSH
73469: CALL_OW 273
73473: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
73474: LD_VAR 0 5
73478: PPUSH
73479: LD_VAR 0 7
73483: PPUSH
73484: CALL_OW 488
73488: PUSH
73489: LD_VAR 0 5
73493: PPUSH
73494: LD_VAR 0 7
73498: PPUSH
73499: CALL_OW 428
73503: PPUSH
73504: CALL_OW 247
73508: PUSH
73509: LD_INT 3
73511: PUSH
73512: LD_INT 2
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: IN
73519: NOT
73520: AND
73521: IFFALSE 73565
// begin ComMoveXY ( unit , _x , _y ) ;
73523: LD_VAR 0 1
73527: PPUSH
73528: LD_VAR 0 5
73532: PPUSH
73533: LD_VAR 0 7
73537: PPUSH
73538: CALL_OW 111
// result := [ _x , _y ] ;
73542: LD_ADDR_VAR 0 3
73546: PUSH
73547: LD_VAR 0 5
73551: PUSH
73552: LD_VAR 0 7
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: ST_TO_ADDR
// exit ;
73561: POP
73562: POP
73563: GO 73569
// end ; end ;
73565: GO 73409
73567: POP
73568: POP
// end ;
73569: LD_VAR 0 3
73573: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
73574: LD_INT 0
73576: PPUSH
73577: PPUSH
73578: PPUSH
// result := 0 ;
73579: LD_ADDR_VAR 0 3
73583: PUSH
73584: LD_INT 0
73586: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
73587: LD_VAR 0 1
73591: PUSH
73592: LD_INT 0
73594: LESS
73595: PUSH
73596: LD_VAR 0 1
73600: PUSH
73601: LD_INT 8
73603: GREATER
73604: OR
73605: PUSH
73606: LD_VAR 0 2
73610: PUSH
73611: LD_INT 0
73613: LESS
73614: OR
73615: PUSH
73616: LD_VAR 0 2
73620: PUSH
73621: LD_INT 8
73623: GREATER
73624: OR
73625: IFFALSE 73629
// exit ;
73627: GO 73704
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
73629: LD_ADDR_VAR 0 4
73633: PUSH
73634: LD_INT 22
73636: PUSH
73637: LD_VAR 0 2
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PPUSH
73646: CALL_OW 69
73650: PUSH
73651: FOR_IN
73652: IFFALSE 73702
// begin un := UnitShoot ( i ) ;
73654: LD_ADDR_VAR 0 5
73658: PUSH
73659: LD_VAR 0 4
73663: PPUSH
73664: CALL_OW 504
73668: ST_TO_ADDR
// if GetSide ( un ) = side1 then
73669: LD_VAR 0 5
73673: PPUSH
73674: CALL_OW 255
73678: PUSH
73679: LD_VAR 0 1
73683: EQUAL
73684: IFFALSE 73700
// begin result := un ;
73686: LD_ADDR_VAR 0 3
73690: PUSH
73691: LD_VAR 0 5
73695: ST_TO_ADDR
// exit ;
73696: POP
73697: POP
73698: GO 73704
// end ; end ;
73700: GO 73651
73702: POP
73703: POP
// end ;
73704: LD_VAR 0 3
73708: RET
// export function GetCargoBay ( units ) ; begin
73709: LD_INT 0
73711: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
73712: LD_ADDR_VAR 0 2
73716: PUSH
73717: LD_VAR 0 1
73721: PPUSH
73722: LD_INT 2
73724: PUSH
73725: LD_INT 34
73727: PUSH
73728: LD_INT 12
73730: PUSH
73731: EMPTY
73732: LIST
73733: LIST
73734: PUSH
73735: LD_INT 34
73737: PUSH
73738: LD_INT 51
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 34
73747: PUSH
73748: LD_INT 32
73750: PUSH
73751: EMPTY
73752: LIST
73753: LIST
73754: PUSH
73755: LD_INT 34
73757: PUSH
73758: LD_INT 89
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: EMPTY
73766: LIST
73767: LIST
73768: LIST
73769: LIST
73770: LIST
73771: PPUSH
73772: CALL_OW 72
73776: ST_TO_ADDR
// end ;
73777: LD_VAR 0 2
73781: RET
// export function Negate ( value ) ; begin
73782: LD_INT 0
73784: PPUSH
// result := not value ;
73785: LD_ADDR_VAR 0 2
73789: PUSH
73790: LD_VAR 0 1
73794: NOT
73795: ST_TO_ADDR
// end ;
73796: LD_VAR 0 2
73800: RET
// export function Inc ( value ) ; begin
73801: LD_INT 0
73803: PPUSH
// result := value + 1 ;
73804: LD_ADDR_VAR 0 2
73808: PUSH
73809: LD_VAR 0 1
73813: PUSH
73814: LD_INT 1
73816: PLUS
73817: ST_TO_ADDR
// end ;
73818: LD_VAR 0 2
73822: RET
// export function Dec ( value ) ; begin
73823: LD_INT 0
73825: PPUSH
// result := value - 1 ;
73826: LD_ADDR_VAR 0 2
73830: PUSH
73831: LD_VAR 0 1
73835: PUSH
73836: LD_INT 1
73838: MINUS
73839: ST_TO_ADDR
// end ;
73840: LD_VAR 0 2
73844: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
73845: LD_INT 0
73847: PPUSH
73848: PPUSH
73849: PPUSH
73850: PPUSH
73851: PPUSH
73852: PPUSH
73853: PPUSH
73854: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
73855: LD_VAR 0 1
73859: PPUSH
73860: LD_VAR 0 2
73864: PPUSH
73865: CALL_OW 488
73869: NOT
73870: PUSH
73871: LD_VAR 0 3
73875: PPUSH
73876: LD_VAR 0 4
73880: PPUSH
73881: CALL_OW 488
73885: NOT
73886: OR
73887: IFFALSE 73900
// begin result := - 1 ;
73889: LD_ADDR_VAR 0 5
73893: PUSH
73894: LD_INT 1
73896: NEG
73897: ST_TO_ADDR
// exit ;
73898: GO 74135
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
73900: LD_ADDR_VAR 0 12
73904: PUSH
73905: LD_VAR 0 1
73909: PPUSH
73910: LD_VAR 0 2
73914: PPUSH
73915: LD_VAR 0 3
73919: PPUSH
73920: LD_VAR 0 4
73924: PPUSH
73925: CALL 72985 0 4
73929: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
73930: LD_ADDR_VAR 0 11
73934: PUSH
73935: LD_VAR 0 1
73939: PPUSH
73940: LD_VAR 0 2
73944: PPUSH
73945: LD_VAR 0 12
73949: PUSH
73950: LD_INT 1
73952: ARRAY
73953: PPUSH
73954: LD_VAR 0 12
73958: PUSH
73959: LD_INT 2
73961: ARRAY
73962: PPUSH
73963: CALL_OW 298
73967: ST_TO_ADDR
// distance := 9999 ;
73968: LD_ADDR_VAR 0 10
73972: PUSH
73973: LD_INT 9999
73975: ST_TO_ADDR
// for i := 0 to 5 do
73976: LD_ADDR_VAR 0 6
73980: PUSH
73981: DOUBLE
73982: LD_INT 0
73984: DEC
73985: ST_TO_ADDR
73986: LD_INT 5
73988: PUSH
73989: FOR_TO
73990: IFFALSE 74133
// begin _x := ShiftX ( x1 , i , centerDist ) ;
73992: LD_ADDR_VAR 0 7
73996: PUSH
73997: LD_VAR 0 1
74001: PPUSH
74002: LD_VAR 0 6
74006: PPUSH
74007: LD_VAR 0 11
74011: PPUSH
74012: CALL_OW 272
74016: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
74017: LD_ADDR_VAR 0 8
74021: PUSH
74022: LD_VAR 0 2
74026: PPUSH
74027: LD_VAR 0 6
74031: PPUSH
74032: LD_VAR 0 11
74036: PPUSH
74037: CALL_OW 273
74041: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
74042: LD_VAR 0 7
74046: PPUSH
74047: LD_VAR 0 8
74051: PPUSH
74052: CALL_OW 488
74056: NOT
74057: IFFALSE 74061
// continue ;
74059: GO 73989
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
74061: LD_ADDR_VAR 0 9
74065: PUSH
74066: LD_VAR 0 12
74070: PUSH
74071: LD_INT 1
74073: ARRAY
74074: PPUSH
74075: LD_VAR 0 12
74079: PUSH
74080: LD_INT 2
74082: ARRAY
74083: PPUSH
74084: LD_VAR 0 7
74088: PPUSH
74089: LD_VAR 0 8
74093: PPUSH
74094: CALL_OW 298
74098: ST_TO_ADDR
// if tmp < distance then
74099: LD_VAR 0 9
74103: PUSH
74104: LD_VAR 0 10
74108: LESS
74109: IFFALSE 74131
// begin result := i ;
74111: LD_ADDR_VAR 0 5
74115: PUSH
74116: LD_VAR 0 6
74120: ST_TO_ADDR
// distance := tmp ;
74121: LD_ADDR_VAR 0 10
74125: PUSH
74126: LD_VAR 0 9
74130: ST_TO_ADDR
// end ; end ;
74131: GO 73989
74133: POP
74134: POP
// end ;
74135: LD_VAR 0 5
74139: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74140: LD_INT 0
74142: PPUSH
74143: PPUSH
// if not driver or not IsInUnit ( driver ) then
74144: LD_VAR 0 1
74148: NOT
74149: PUSH
74150: LD_VAR 0 1
74154: PPUSH
74155: CALL_OW 310
74159: NOT
74160: OR
74161: IFFALSE 74165
// exit ;
74163: GO 74255
// vehicle := IsInUnit ( driver ) ;
74165: LD_ADDR_VAR 0 3
74169: PUSH
74170: LD_VAR 0 1
74174: PPUSH
74175: CALL_OW 310
74179: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74180: LD_VAR 0 1
74184: PPUSH
74185: LD_STRING \
74187: PUSH
74188: LD_INT 0
74190: PUSH
74191: LD_INT 0
74193: PUSH
74194: LD_INT 0
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: LD_INT 0
74202: PUSH
74203: LD_INT 0
74205: PUSH
74206: EMPTY
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: PUSH
74215: LD_STRING E
74217: PUSH
74218: LD_INT 0
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: LD_VAR 0 3
74228: PUSH
74229: LD_INT 0
74231: PUSH
74232: LD_INT 0
74234: PUSH
74235: LD_INT 0
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: PUSH
74247: EMPTY
74248: LIST
74249: LIST
74250: PPUSH
74251: CALL_OW 446
// end ;
74255: LD_VAR 0 2
74259: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
74260: LD_INT 0
74262: PPUSH
74263: PPUSH
// if not driver or not IsInUnit ( driver ) then
74264: LD_VAR 0 1
74268: NOT
74269: PUSH
74270: LD_VAR 0 1
74274: PPUSH
74275: CALL_OW 310
74279: NOT
74280: OR
74281: IFFALSE 74285
// exit ;
74283: GO 74375
// vehicle := IsInUnit ( driver ) ;
74285: LD_ADDR_VAR 0 3
74289: PUSH
74290: LD_VAR 0 1
74294: PPUSH
74295: CALL_OW 310
74299: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
74300: LD_VAR 0 1
74304: PPUSH
74305: LD_STRING \
74307: PUSH
74308: LD_INT 0
74310: PUSH
74311: LD_INT 0
74313: PUSH
74314: LD_INT 0
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: LD_INT 0
74322: PUSH
74323: LD_INT 0
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: LIST
74331: LIST
74332: LIST
74333: LIST
74334: PUSH
74335: LD_STRING E
74337: PUSH
74338: LD_INT 0
74340: PUSH
74341: LD_INT 0
74343: PUSH
74344: LD_VAR 0 3
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: LD_INT 0
74354: PUSH
74355: LD_INT 0
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: LIST
74362: LIST
74363: LIST
74364: LIST
74365: LIST
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PPUSH
74371: CALL_OW 447
// end ;
74375: LD_VAR 0 2
74379: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
74380: LD_INT 0
74382: PPUSH
74383: PPUSH
74384: PPUSH
// tmp := [ ] ;
74385: LD_ADDR_VAR 0 5
74389: PUSH
74390: EMPTY
74391: ST_TO_ADDR
// for i in units do
74392: LD_ADDR_VAR 0 4
74396: PUSH
74397: LD_VAR 0 1
74401: PUSH
74402: FOR_IN
74403: IFFALSE 74441
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
74405: LD_ADDR_VAR 0 5
74409: PUSH
74410: LD_VAR 0 5
74414: PPUSH
74415: LD_VAR 0 5
74419: PUSH
74420: LD_INT 1
74422: PLUS
74423: PPUSH
74424: LD_VAR 0 4
74428: PPUSH
74429: CALL_OW 256
74433: PPUSH
74434: CALL_OW 2
74438: ST_TO_ADDR
74439: GO 74402
74441: POP
74442: POP
// if not tmp then
74443: LD_VAR 0 5
74447: NOT
74448: IFFALSE 74452
// exit ;
74450: GO 74500
// if asc then
74452: LD_VAR 0 2
74456: IFFALSE 74480
// result := SortListByListAsc ( units , tmp ) else
74458: LD_ADDR_VAR 0 3
74462: PUSH
74463: LD_VAR 0 1
74467: PPUSH
74468: LD_VAR 0 5
74472: PPUSH
74473: CALL_OW 76
74477: ST_TO_ADDR
74478: GO 74500
// result := SortListByListDesc ( units , tmp ) ;
74480: LD_ADDR_VAR 0 3
74484: PUSH
74485: LD_VAR 0 1
74489: PPUSH
74490: LD_VAR 0 5
74494: PPUSH
74495: CALL_OW 77
74499: ST_TO_ADDR
// end ;
74500: LD_VAR 0 3
74504: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
74505: LD_INT 0
74507: PPUSH
74508: PPUSH
// task := GetTaskList ( mech ) ;
74509: LD_ADDR_VAR 0 4
74513: PUSH
74514: LD_VAR 0 1
74518: PPUSH
74519: CALL_OW 437
74523: ST_TO_ADDR
// if not task then
74524: LD_VAR 0 4
74528: NOT
74529: IFFALSE 74533
// exit ;
74531: GO 74575
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
74533: LD_ADDR_VAR 0 3
74537: PUSH
74538: LD_VAR 0 4
74542: PUSH
74543: LD_INT 1
74545: ARRAY
74546: PUSH
74547: LD_INT 1
74549: ARRAY
74550: PUSH
74551: LD_STRING r
74553: EQUAL
74554: PUSH
74555: LD_VAR 0 4
74559: PUSH
74560: LD_INT 1
74562: ARRAY
74563: PUSH
74564: LD_INT 4
74566: ARRAY
74567: PUSH
74568: LD_VAR 0 2
74572: EQUAL
74573: AND
74574: ST_TO_ADDR
// end ;
74575: LD_VAR 0 3
74579: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
74580: LD_INT 0
74582: PPUSH
// SetDir ( unit , d ) ;
74583: LD_VAR 0 1
74587: PPUSH
74588: LD_VAR 0 4
74592: PPUSH
74593: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
74597: LD_VAR 0 1
74601: PPUSH
74602: LD_VAR 0 2
74606: PPUSH
74607: LD_VAR 0 3
74611: PPUSH
74612: LD_VAR 0 5
74616: PPUSH
74617: CALL_OW 48
// end ;
74621: LD_VAR 0 6
74625: RET
// export function ToNaturalNumber ( number ) ; begin
74626: LD_INT 0
74628: PPUSH
// result := number div 1 ;
74629: LD_ADDR_VAR 0 2
74633: PUSH
74634: LD_VAR 0 1
74638: PUSH
74639: LD_INT 1
74641: DIV
74642: ST_TO_ADDR
// if number < 0 then
74643: LD_VAR 0 1
74647: PUSH
74648: LD_INT 0
74650: LESS
74651: IFFALSE 74661
// result := 0 ;
74653: LD_ADDR_VAR 0 2
74657: PUSH
74658: LD_INT 0
74660: ST_TO_ADDR
// end ;
74661: LD_VAR 0 2
74665: RET
// export function SortByClass ( units , class ) ; var un ; begin
74666: LD_INT 0
74668: PPUSH
74669: PPUSH
// if not units or not class then
74670: LD_VAR 0 1
74674: NOT
74675: PUSH
74676: LD_VAR 0 2
74680: NOT
74681: OR
74682: IFFALSE 74686
// exit ;
74684: GO 74781
// result := [ ] ;
74686: LD_ADDR_VAR 0 3
74690: PUSH
74691: EMPTY
74692: ST_TO_ADDR
// for un in units do
74693: LD_ADDR_VAR 0 4
74697: PUSH
74698: LD_VAR 0 1
74702: PUSH
74703: FOR_IN
74704: IFFALSE 74779
// if GetClass ( un ) = class then
74706: LD_VAR 0 4
74710: PPUSH
74711: CALL_OW 257
74715: PUSH
74716: LD_VAR 0 2
74720: EQUAL
74721: IFFALSE 74748
// result := Insert ( result , 1 , un ) else
74723: LD_ADDR_VAR 0 3
74727: PUSH
74728: LD_VAR 0 3
74732: PPUSH
74733: LD_INT 1
74735: PPUSH
74736: LD_VAR 0 4
74740: PPUSH
74741: CALL_OW 2
74745: ST_TO_ADDR
74746: GO 74777
// result := Replace ( result , result + 1 , un ) ;
74748: LD_ADDR_VAR 0 3
74752: PUSH
74753: LD_VAR 0 3
74757: PPUSH
74758: LD_VAR 0 3
74762: PUSH
74763: LD_INT 1
74765: PLUS
74766: PPUSH
74767: LD_VAR 0 4
74771: PPUSH
74772: CALL_OW 1
74776: ST_TO_ADDR
74777: GO 74703
74779: POP
74780: POP
// end ;
74781: LD_VAR 0 3
74785: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
74786: LD_INT 0
74788: PPUSH
74789: PPUSH
74790: PPUSH
74791: PPUSH
74792: PPUSH
74793: PPUSH
74794: PPUSH
// result := [ ] ;
74795: LD_ADDR_VAR 0 4
74799: PUSH
74800: EMPTY
74801: ST_TO_ADDR
// if x - r < 0 then
74802: LD_VAR 0 1
74806: PUSH
74807: LD_VAR 0 3
74811: MINUS
74812: PUSH
74813: LD_INT 0
74815: LESS
74816: IFFALSE 74828
// min_x := 0 else
74818: LD_ADDR_VAR 0 8
74822: PUSH
74823: LD_INT 0
74825: ST_TO_ADDR
74826: GO 74844
// min_x := x - r ;
74828: LD_ADDR_VAR 0 8
74832: PUSH
74833: LD_VAR 0 1
74837: PUSH
74838: LD_VAR 0 3
74842: MINUS
74843: ST_TO_ADDR
// if y - r < 0 then
74844: LD_VAR 0 2
74848: PUSH
74849: LD_VAR 0 3
74853: MINUS
74854: PUSH
74855: LD_INT 0
74857: LESS
74858: IFFALSE 74870
// min_y := 0 else
74860: LD_ADDR_VAR 0 7
74864: PUSH
74865: LD_INT 0
74867: ST_TO_ADDR
74868: GO 74886
// min_y := y - r ;
74870: LD_ADDR_VAR 0 7
74874: PUSH
74875: LD_VAR 0 2
74879: PUSH
74880: LD_VAR 0 3
74884: MINUS
74885: ST_TO_ADDR
// max_x := x + r ;
74886: LD_ADDR_VAR 0 9
74890: PUSH
74891: LD_VAR 0 1
74895: PUSH
74896: LD_VAR 0 3
74900: PLUS
74901: ST_TO_ADDR
// max_y := y + r ;
74902: LD_ADDR_VAR 0 10
74906: PUSH
74907: LD_VAR 0 2
74911: PUSH
74912: LD_VAR 0 3
74916: PLUS
74917: ST_TO_ADDR
// for _x = min_x to max_x do
74918: LD_ADDR_VAR 0 5
74922: PUSH
74923: DOUBLE
74924: LD_VAR 0 8
74928: DEC
74929: ST_TO_ADDR
74930: LD_VAR 0 9
74934: PUSH
74935: FOR_TO
74936: IFFALSE 75037
// for _y = min_y to max_y do
74938: LD_ADDR_VAR 0 6
74942: PUSH
74943: DOUBLE
74944: LD_VAR 0 7
74948: DEC
74949: ST_TO_ADDR
74950: LD_VAR 0 10
74954: PUSH
74955: FOR_TO
74956: IFFALSE 75033
// begin if not ValidHex ( _x , _y ) then
74958: LD_VAR 0 5
74962: PPUSH
74963: LD_VAR 0 6
74967: PPUSH
74968: CALL_OW 488
74972: NOT
74973: IFFALSE 74977
// continue ;
74975: GO 74955
// if GetResourceTypeXY ( _x , _y ) then
74977: LD_VAR 0 5
74981: PPUSH
74982: LD_VAR 0 6
74986: PPUSH
74987: CALL_OW 283
74991: IFFALSE 75031
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
74993: LD_ADDR_VAR 0 4
74997: PUSH
74998: LD_VAR 0 4
75002: PPUSH
75003: LD_VAR 0 4
75007: PUSH
75008: LD_INT 1
75010: PLUS
75011: PPUSH
75012: LD_VAR 0 5
75016: PUSH
75017: LD_VAR 0 6
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PPUSH
75026: CALL_OW 1
75030: ST_TO_ADDR
// end ;
75031: GO 74955
75033: POP
75034: POP
75035: GO 74935
75037: POP
75038: POP
// end ;
75039: LD_VAR 0 4
75043: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
75044: LD_INT 0
75046: PPUSH
75047: PPUSH
75048: PPUSH
75049: PPUSH
75050: PPUSH
75051: PPUSH
75052: PPUSH
75053: PPUSH
// if not units then
75054: LD_VAR 0 1
75058: NOT
75059: IFFALSE 75063
// exit ;
75061: GO 75587
// result := UnitFilter ( units , [ f_ok ] ) ;
75063: LD_ADDR_VAR 0 3
75067: PUSH
75068: LD_VAR 0 1
75072: PPUSH
75073: LD_INT 50
75075: PUSH
75076: EMPTY
75077: LIST
75078: PPUSH
75079: CALL_OW 72
75083: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
75084: LD_ADDR_VAR 0 8
75088: PUSH
75089: LD_VAR 0 1
75093: PUSH
75094: LD_INT 1
75096: ARRAY
75097: PPUSH
75098: CALL_OW 255
75102: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
75103: LD_ADDR_VAR 0 10
75107: PUSH
75108: LD_INT 29
75110: PUSH
75111: LD_INT 91
75113: PUSH
75114: LD_INT 49
75116: PUSH
75117: EMPTY
75118: LIST
75119: LIST
75120: LIST
75121: ST_TO_ADDR
// if not result then
75122: LD_VAR 0 3
75126: NOT
75127: IFFALSE 75131
// exit ;
75129: GO 75587
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
75131: LD_ADDR_VAR 0 5
75135: PUSH
75136: LD_INT 81
75138: PUSH
75139: LD_VAR 0 8
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PPUSH
75148: CALL_OW 69
75152: ST_TO_ADDR
// for i in result do
75153: LD_ADDR_VAR 0 4
75157: PUSH
75158: LD_VAR 0 3
75162: PUSH
75163: FOR_IN
75164: IFFALSE 75585
// begin tag := GetTag ( i ) + 1 ;
75166: LD_ADDR_VAR 0 9
75170: PUSH
75171: LD_VAR 0 4
75175: PPUSH
75176: CALL_OW 110
75180: PUSH
75181: LD_INT 1
75183: PLUS
75184: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
75185: LD_ADDR_VAR 0 7
75189: PUSH
75190: LD_VAR 0 4
75194: PPUSH
75195: CALL_OW 250
75199: PPUSH
75200: LD_VAR 0 4
75204: PPUSH
75205: CALL_OW 251
75209: PPUSH
75210: LD_INT 6
75212: PPUSH
75213: CALL 74786 0 3
75217: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
75218: LD_VAR 0 4
75222: PPUSH
75223: CALL_OW 247
75227: PUSH
75228: LD_INT 2
75230: EQUAL
75231: PUSH
75232: LD_VAR 0 7
75236: AND
75237: PUSH
75238: LD_VAR 0 4
75242: PPUSH
75243: CALL_OW 264
75247: PUSH
75248: LD_VAR 0 10
75252: IN
75253: NOT
75254: AND
75255: IFFALSE 75294
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
75257: LD_VAR 0 4
75261: PPUSH
75262: LD_VAR 0 7
75266: PUSH
75267: LD_INT 1
75269: ARRAY
75270: PUSH
75271: LD_INT 1
75273: ARRAY
75274: PPUSH
75275: LD_VAR 0 7
75279: PUSH
75280: LD_INT 1
75282: ARRAY
75283: PUSH
75284: LD_INT 2
75286: ARRAY
75287: PPUSH
75288: CALL_OW 116
75292: GO 75583
// if path > tag then
75294: LD_VAR 0 2
75298: PUSH
75299: LD_VAR 0 9
75303: GREATER
75304: IFFALSE 75512
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
75306: LD_ADDR_VAR 0 6
75310: PUSH
75311: LD_VAR 0 5
75315: PPUSH
75316: LD_INT 91
75318: PUSH
75319: LD_VAR 0 4
75323: PUSH
75324: LD_INT 8
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: LIST
75331: PPUSH
75332: CALL_OW 72
75336: ST_TO_ADDR
// if nearEnemy then
75337: LD_VAR 0 6
75341: IFFALSE 75410
// begin if GetWeapon ( i ) = ru_time_lapser then
75343: LD_VAR 0 4
75347: PPUSH
75348: CALL_OW 264
75352: PUSH
75353: LD_INT 49
75355: EQUAL
75356: IFFALSE 75384
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
75358: LD_VAR 0 4
75362: PPUSH
75363: LD_VAR 0 6
75367: PPUSH
75368: LD_VAR 0 4
75372: PPUSH
75373: CALL_OW 74
75377: PPUSH
75378: CALL_OW 112
75382: GO 75408
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
75384: LD_VAR 0 4
75388: PPUSH
75389: LD_VAR 0 6
75393: PPUSH
75394: LD_VAR 0 4
75398: PPUSH
75399: CALL_OW 74
75403: PPUSH
75404: NOP4
// end else
75408: GO 75510
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
75410: LD_VAR 0 4
75414: PPUSH
75415: LD_VAR 0 2
75419: PUSH
75420: LD_VAR 0 9
75424: ARRAY
75425: PUSH
75426: LD_INT 1
75428: ARRAY
75429: PPUSH
75430: LD_VAR 0 2
75434: PUSH
75435: LD_VAR 0 9
75439: ARRAY
75440: PUSH
75441: LD_INT 2
75443: ARRAY
75444: PPUSH
75445: CALL_OW 297
75449: PUSH
75450: LD_INT 6
75452: GREATER
75453: IFFALSE 75496
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
75455: LD_VAR 0 4
75459: PPUSH
75460: LD_VAR 0 2
75464: PUSH
75465: LD_VAR 0 9
75469: ARRAY
75470: PUSH
75471: LD_INT 1
75473: ARRAY
75474: PPUSH
75475: LD_VAR 0 2
75479: PUSH
75480: LD_VAR 0 9
75484: ARRAY
75485: PUSH
75486: LD_INT 2
75488: ARRAY
75489: PPUSH
75490: CALL_OW 114
75494: GO 75510
// SetTag ( i , tag ) ;
75496: LD_VAR 0 4
75500: PPUSH
75501: LD_VAR 0 9
75505: PPUSH
75506: CALL_OW 109
// end else
75510: GO 75583
// if enemy then
75512: LD_VAR 0 5
75516: IFFALSE 75583
// begin if GetWeapon ( i ) = ru_time_lapser then
75518: LD_VAR 0 4
75522: PPUSH
75523: CALL_OW 264
75527: PUSH
75528: LD_INT 49
75530: EQUAL
75531: IFFALSE 75559
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
75533: LD_VAR 0 4
75537: PPUSH
75538: LD_VAR 0 5
75542: PPUSH
75543: LD_VAR 0 4
75547: PPUSH
75548: CALL_OW 74
75552: PPUSH
75553: CALL_OW 112
75557: GO 75583
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
75559: LD_VAR 0 4
75563: PPUSH
75564: LD_VAR 0 5
75568: PPUSH
75569: LD_VAR 0 4
75573: PPUSH
75574: CALL_OW 74
75578: PPUSH
75579: NOP4
// end ; end ;
75583: GO 75163
75585: POP
75586: POP
// end ;
75587: LD_VAR 0 3
75591: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
75592: LD_INT 0
75594: PPUSH
75595: PPUSH
75596: PPUSH
// if not unit or IsInUnit ( unit ) then
75597: LD_VAR 0 1
75601: NOT
75602: PUSH
75603: LD_VAR 0 1
75607: PPUSH
75608: CALL_OW 310
75612: OR
75613: IFFALSE 75617
// exit ;
75615: GO 75708
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
75617: LD_ADDR_VAR 0 4
75621: PUSH
75622: LD_VAR 0 1
75626: PPUSH
75627: CALL_OW 250
75631: PPUSH
75632: LD_VAR 0 2
75636: PPUSH
75637: LD_INT 1
75639: PPUSH
75640: CALL_OW 272
75644: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
75645: LD_ADDR_VAR 0 5
75649: PUSH
75650: LD_VAR 0 1
75654: PPUSH
75655: CALL_OW 251
75659: PPUSH
75660: LD_VAR 0 2
75664: PPUSH
75665: LD_INT 1
75667: PPUSH
75668: CALL_OW 273
75672: ST_TO_ADDR
// if ValidHex ( x , y ) then
75673: LD_VAR 0 4
75677: PPUSH
75678: LD_VAR 0 5
75682: PPUSH
75683: CALL_OW 488
75687: IFFALSE 75708
// ComTurnXY ( unit , x , y ) ;
75689: LD_VAR 0 1
75693: PPUSH
75694: LD_VAR 0 4
75698: PPUSH
75699: LD_VAR 0 5
75703: PPUSH
75704: CALL_OW 118
// end ;
75708: LD_VAR 0 3
75712: RET
// export function SeeUnits ( side , units ) ; var i ; begin
75713: LD_INT 0
75715: PPUSH
75716: PPUSH
// result := false ;
75717: LD_ADDR_VAR 0 3
75721: PUSH
75722: LD_INT 0
75724: ST_TO_ADDR
// if not units then
75725: LD_VAR 0 2
75729: NOT
75730: IFFALSE 75734
// exit ;
75732: GO 75779
// for i in units do
75734: LD_ADDR_VAR 0 4
75738: PUSH
75739: LD_VAR 0 2
75743: PUSH
75744: FOR_IN
75745: IFFALSE 75777
// if See ( side , i ) then
75747: LD_VAR 0 1
75751: PPUSH
75752: LD_VAR 0 4
75756: PPUSH
75757: CALL_OW 292
75761: IFFALSE 75775
// begin result := true ;
75763: LD_ADDR_VAR 0 3
75767: PUSH
75768: LD_INT 1
75770: ST_TO_ADDR
// exit ;
75771: POP
75772: POP
75773: GO 75779
// end ;
75775: GO 75744
75777: POP
75778: POP
// end ;
75779: LD_VAR 0 3
75783: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
75784: LD_INT 0
75786: PPUSH
75787: PPUSH
75788: PPUSH
75789: PPUSH
// if not unit or not points then
75790: LD_VAR 0 1
75794: NOT
75795: PUSH
75796: LD_VAR 0 2
75800: NOT
75801: OR
75802: IFFALSE 75806
// exit ;
75804: GO 75896
// dist := 99999 ;
75806: LD_ADDR_VAR 0 5
75810: PUSH
75811: LD_INT 99999
75813: ST_TO_ADDR
// for i in points do
75814: LD_ADDR_VAR 0 4
75818: PUSH
75819: LD_VAR 0 2
75823: PUSH
75824: FOR_IN
75825: IFFALSE 75894
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
75827: LD_ADDR_VAR 0 6
75831: PUSH
75832: LD_VAR 0 1
75836: PPUSH
75837: LD_VAR 0 4
75841: PUSH
75842: LD_INT 1
75844: ARRAY
75845: PPUSH
75846: LD_VAR 0 4
75850: PUSH
75851: LD_INT 2
75853: ARRAY
75854: PPUSH
75855: CALL_OW 297
75859: ST_TO_ADDR
// if tmpDist < dist then
75860: LD_VAR 0 6
75864: PUSH
75865: LD_VAR 0 5
75869: LESS
75870: IFFALSE 75892
// begin result := i ;
75872: LD_ADDR_VAR 0 3
75876: PUSH
75877: LD_VAR 0 4
75881: ST_TO_ADDR
// dist := tmpDist ;
75882: LD_ADDR_VAR 0 5
75886: PUSH
75887: LD_VAR 0 6
75891: ST_TO_ADDR
// end ; end ;
75892: GO 75824
75894: POP
75895: POP
// end ;
75896: LD_VAR 0 3
75900: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
75901: LD_INT 0
75903: PPUSH
// uc_side := side ;
75904: LD_ADDR_OWVAR 20
75908: PUSH
75909: LD_VAR 0 1
75913: ST_TO_ADDR
// uc_nation := 3 ;
75914: LD_ADDR_OWVAR 21
75918: PUSH
75919: LD_INT 3
75921: ST_TO_ADDR
// vc_chassis := 25 ;
75922: LD_ADDR_OWVAR 37
75926: PUSH
75927: LD_INT 25
75929: ST_TO_ADDR
// vc_engine := engine_siberite ;
75930: LD_ADDR_OWVAR 39
75934: PUSH
75935: LD_INT 3
75937: ST_TO_ADDR
// vc_control := control_computer ;
75938: LD_ADDR_OWVAR 38
75942: PUSH
75943: LD_INT 3
75945: ST_TO_ADDR
// vc_weapon := 59 ;
75946: LD_ADDR_OWVAR 40
75950: PUSH
75951: LD_INT 59
75953: ST_TO_ADDR
// result := CreateVehicle ;
75954: LD_ADDR_VAR 0 5
75958: PUSH
75959: CALL_OW 45
75963: ST_TO_ADDR
// SetDir ( result , d ) ;
75964: LD_VAR 0 5
75968: PPUSH
75969: LD_VAR 0 4
75973: PPUSH
75974: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
75978: LD_VAR 0 5
75982: PPUSH
75983: LD_VAR 0 2
75987: PPUSH
75988: LD_VAR 0 3
75992: PPUSH
75993: LD_INT 0
75995: PPUSH
75996: CALL_OW 48
// end ;
76000: LD_VAR 0 5
76004: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
76005: LD_INT 0
76007: PPUSH
76008: PPUSH
76009: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
76010: LD_ADDR_VAR 0 2
76014: PUSH
76015: LD_INT 0
76017: PUSH
76018: LD_INT 0
76020: PUSH
76021: LD_INT 0
76023: PUSH
76024: LD_INT 0
76026: PUSH
76027: EMPTY
76028: LIST
76029: LIST
76030: LIST
76031: LIST
76032: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
76033: LD_VAR 0 1
76037: NOT
76038: PUSH
76039: LD_VAR 0 1
76043: PPUSH
76044: CALL_OW 264
76048: PUSH
76049: LD_INT 12
76051: PUSH
76052: LD_INT 51
76054: PUSH
76055: LD_INT 32
76057: PUSH
76058: LD_INT 89
76060: PUSH
76061: EMPTY
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: IN
76067: NOT
76068: OR
76069: IFFALSE 76073
// exit ;
76071: GO 76171
// for i := 1 to 3 do
76073: LD_ADDR_VAR 0 3
76077: PUSH
76078: DOUBLE
76079: LD_INT 1
76081: DEC
76082: ST_TO_ADDR
76083: LD_INT 3
76085: PUSH
76086: FOR_TO
76087: IFFALSE 76169
// begin tmp := GetCargo ( cargo , i ) ;
76089: LD_ADDR_VAR 0 4
76093: PUSH
76094: LD_VAR 0 1
76098: PPUSH
76099: LD_VAR 0 3
76103: PPUSH
76104: CALL_OW 289
76108: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
76109: LD_ADDR_VAR 0 2
76113: PUSH
76114: LD_VAR 0 2
76118: PPUSH
76119: LD_VAR 0 3
76123: PPUSH
76124: LD_VAR 0 4
76128: PPUSH
76129: CALL_OW 1
76133: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
76134: LD_ADDR_VAR 0 2
76138: PUSH
76139: LD_VAR 0 2
76143: PPUSH
76144: LD_INT 4
76146: PPUSH
76147: LD_VAR 0 2
76151: PUSH
76152: LD_INT 4
76154: ARRAY
76155: PUSH
76156: LD_VAR 0 4
76160: PLUS
76161: PPUSH
76162: CALL_OW 1
76166: ST_TO_ADDR
// end ;
76167: GO 76086
76169: POP
76170: POP
// end ;
76171: LD_VAR 0 2
76175: RET
// export function Length ( on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
76176: LD_VAR 0 1
76180: PPUSH
76181: LD_VAR 0 2
76185: PPUSH
76186: LD_VAR 0 3
76190: PPUSH
76191: LD_VAR 0 4
76195: PPUSH
76196: LD_VAR 0 5
76200: PPUSH
76201: LD_VAR 0 6
76205: PPUSH
76206: CALL 15020 0 6
// end ;
76210: PPOPN 6
76212: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
76213: LD_INT 0
76215: PPUSH
// begin if not units then
76216: LD_VAR 0 1
76220: NOT
76221: IFFALSE 76225
// exit ;
76223: GO 76225
// end ;
76225: PPOPN 7
76227: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
76228: CALL 14924 0 0
// end ;
76232: PPOPN 1
76234: END
