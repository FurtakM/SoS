// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 25 0 0
// CreateNature ;
   8: CALL 10024 0 0
// PrepareAmerican ;
  12: CALL 720 0 0
// PrepareRussian ;
  16: CALL 278 0 0
// Action ;
  20: CALL 2114 0 0
// end ;
  24: END
// export debug , currentMissionPrefix ; export joinedToBelkov , hasGnyevko , hasKirilenkova , apeSpotted , attackedByApe , waterfallSpotted , apeRadioKilled , americansDefeated , gnyevkoMeetPokryshkin , followPokryshkin , attackedAllied , burlakAsCommander , activeAmericanScript , gladstoneEscaped , hollandEscaped , melEscaped , canEnd , loseCounter , someoneGetsHurt ; function Init ; begin
  25: LD_INT 0
  27: PPUSH
// debug := false ;
  28: LD_ADDR_EXP 1
  32: PUSH
  33: LD_INT 0
  35: ST_TO_ADDR
// if debug then
  36: LD_EXP 1
  40: IFFALSE 50
// Difficulty := 4 ;
  42: LD_ADDR_OWVAR 67
  46: PUSH
  47: LD_INT 4
  49: ST_TO_ADDR
// currentMissionPrefix := 01_ ;
  50: LD_ADDR_EXP 2
  54: PUSH
  55: LD_STRING 01_
  57: ST_TO_ADDR
// waterfallSpotted := false ;
  58: LD_ADDR_EXP 8
  62: PUSH
  63: LD_INT 0
  65: ST_TO_ADDR
// joinedToBelkov := false ;
  66: LD_ADDR_EXP 3
  70: PUSH
  71: LD_INT 0
  73: ST_TO_ADDR
// apeSpotted := false ;
  74: LD_ADDR_EXP 6
  78: PUSH
  79: LD_INT 0
  81: ST_TO_ADDR
// attackedByApe := false ;
  82: LD_ADDR_EXP 7
  86: PUSH
  87: LD_INT 0
  89: ST_TO_ADDR
// hasGnyevko := false ;
  90: LD_ADDR_EXP 4
  94: PUSH
  95: LD_INT 0
  97: ST_TO_ADDR
// hasKirilenkova := false ;
  98: LD_ADDR_EXP 5
 102: PUSH
 103: LD_INT 0
 105: ST_TO_ADDR
// apeRadioKilled := false ;
 106: LD_ADDR_EXP 9
 110: PUSH
 111: LD_INT 0
 113: ST_TO_ADDR
// americansDefeated := false ;
 114: LD_ADDR_EXP 10
 118: PUSH
 119: LD_INT 0
 121: ST_TO_ADDR
// gnyevkoMeetPokryshkin := false ;
 122: LD_ADDR_EXP 11
 126: PUSH
 127: LD_INT 0
 129: ST_TO_ADDR
// followPokryshkin := false ;
 130: LD_ADDR_EXP 12
 134: PUSH
 135: LD_INT 0
 137: ST_TO_ADDR
// attackedAllied := false ;
 138: LD_ADDR_EXP 13
 142: PUSH
 143: LD_INT 0
 145: ST_TO_ADDR
// burlakAsCommander := false ;
 146: LD_ADDR_EXP 14
 150: PUSH
 151: LD_INT 0
 153: ST_TO_ADDR
// activeAmericanScript := false ;
 154: LD_ADDR_EXP 15
 158: PUSH
 159: LD_INT 0
 161: ST_TO_ADDR
// gladstoneEscaped := false ;
 162: LD_ADDR_EXP 16
 166: PUSH
 167: LD_INT 0
 169: ST_TO_ADDR
// hollandEscaped := false ;
 170: LD_ADDR_EXP 17
 174: PUSH
 175: LD_INT 0
 177: ST_TO_ADDR
// melEscaped := false ;
 178: LD_ADDR_EXP 18
 182: PUSH
 183: LD_INT 0
 185: ST_TO_ADDR
// canEnd := false ;
 186: LD_ADDR_EXP 19
 190: PUSH
 191: LD_INT 0
 193: ST_TO_ADDR
// loseCounter := 0 ;
 194: LD_ADDR_EXP 20
 198: PUSH
 199: LD_INT 0
 201: ST_TO_ADDR
// someoneGetsHurt := false ;
 202: LD_ADDR_EXP 21
 206: PUSH
 207: LD_INT 0
 209: ST_TO_ADDR
// end ;
 210: LD_VAR 0 1
 214: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 0 ] , [ f_nation , nation_nature ] , [ f_not , [ f_class , class_fish ] ] ] ) = 0 do
 215: LD_INT 22
 217: PUSH
 218: LD_INT 0
 220: PUSH
 221: EMPTY
 222: LIST
 223: LIST
 224: PUSH
 225: LD_INT 23
 227: PUSH
 228: LD_INT 0
 230: PUSH
 231: EMPTY
 232: LIST
 233: LIST
 234: PUSH
 235: LD_INT 3
 237: PUSH
 238: LD_INT 25
 240: PUSH
 241: LD_INT 20
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: EMPTY
 249: LIST
 250: LIST
 251: PUSH
 252: EMPTY
 253: LIST
 254: LIST
 255: LIST
 256: PPUSH
 257: CALL_OW 69
 261: PUSH
 262: LD_INT 0
 264: EQUAL
 265: IFFALSE 277
 267: GO 269
 269: DISABLE
// SetAchievement ( ACH_NATURE ) ; end_of_file
 270: LD_STRING ACH_NATURE
 272: PPUSH
 273: CALL_OW 543
 277: END
// export Burlak , Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kurin , Gnyevko , Kirilenkova ; export function PrepareRussian ; var i , tmp ; begin
 278: LD_INT 0
 280: PPUSH
 281: PPUSH
 282: PPUSH
// uc_side := 3 ;
 283: LD_ADDR_OWVAR 20
 287: PUSH
 288: LD_INT 3
 290: ST_TO_ADDR
// uc_nation := nation_russian ;
 291: LD_ADDR_OWVAR 21
 295: PUSH
 296: LD_INT 3
 298: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
 299: LD_ADDR_EXP 22
 303: PUSH
 304: LD_STRING Burlak
 306: PPUSH
 307: LD_INT 0
 309: PPUSH
 310: LD_STRING 
 312: PPUSH
 313: CALL 10397 0 3
 317: ST_TO_ADDR
// uc_side := 6 ;
 318: LD_ADDR_OWVAR 20
 322: PUSH
 323: LD_INT 6
 325: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
 326: LD_ADDR_EXP 29
 330: PUSH
 331: LD_STRING Kurin
 333: PPUSH
 334: LD_INT 0
 336: PPUSH
 337: LD_STRING 
 339: PPUSH
 340: CALL 10397 0 3
 344: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ,  ) ;
 345: LD_ADDR_EXP 23
 349: PUSH
 350: LD_STRING Pokryshkin
 352: PPUSH
 353: LD_INT 0
 355: PPUSH
 356: LD_STRING 
 358: PPUSH
 359: CALL 10397 0 3
 363: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ,  ) ;
 364: LD_ADDR_EXP 24
 368: PUSH
 369: LD_STRING Saseda
 371: PPUSH
 372: LD_INT 0
 374: PPUSH
 375: LD_STRING 
 377: PPUSH
 378: CALL 10397 0 3
 382: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ,  ) ;
 383: LD_ADDR_EXP 25
 387: PUSH
 388: LD_STRING Jaworska
 390: PPUSH
 391: LD_INT 0
 393: PPUSH
 394: LD_STRING 
 396: PPUSH
 397: CALL 10397 0 3
 401: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ,  ) ;
 402: LD_ADDR_EXP 26
 406: PUSH
 407: LD_STRING Balei
 409: PPUSH
 410: LD_INT 0
 412: PPUSH
 413: LD_STRING 
 415: PPUSH
 416: CALL 10397 0 3
 420: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ,  ) ;
 421: LD_ADDR_EXP 27
 425: PUSH
 426: LD_STRING Belkov
 428: PPUSH
 429: LD_INT 0
 431: PPUSH
 432: LD_STRING 
 434: PPUSH
 435: CALL 10397 0 3
 439: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ,  ) ;
 440: LD_ADDR_EXP 28
 444: PUSH
 445: LD_STRING Jaunzeme
 447: PPUSH
 448: LD_INT 0
 450: PPUSH
 451: LD_STRING 
 453: PPUSH
 454: CALL 10397 0 3
 458: ST_TO_ADDR
// uc_side := 5 ;
 459: LD_ADDR_OWVAR 20
 463: PUSH
 464: LD_INT 5
 466: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ,  ) ;
 467: LD_ADDR_EXP 30
 471: PUSH
 472: LD_STRING Gnyevko
 474: PPUSH
 475: LD_INT 0
 477: PPUSH
 478: LD_STRING 
 480: PPUSH
 481: CALL 10397 0 3
 485: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ,  ) ;
 486: LD_ADDR_EXP 31
 490: PUSH
 491: LD_STRING Kirilenkova
 493: PPUSH
 494: LD_INT 0
 496: PPUSH
 497: LD_STRING 
 499: PPUSH
 500: CALL 10397 0 3
 504: ST_TO_ADDR
// tmp := [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] ;
 505: LD_ADDR_VAR 0 3
 509: PUSH
 510: LD_EXP 24
 514: PUSH
 515: LD_EXP 25
 519: PUSH
 520: LD_EXP 26
 524: PUSH
 525: LD_EXP 27
 529: PUSH
 530: LD_EXP 28
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: LIST
 539: LIST
 540: LIST
 541: ST_TO_ADDR
// if Difficulty > 1 then
 542: LD_OWVAR 67
 546: PUSH
 547: LD_INT 1
 549: GREATER
 550: IFFALSE 568
// tmp := tmp diff Jaunzeme ;
 552: LD_ADDR_VAR 0 3
 556: PUSH
 557: LD_VAR 0 3
 561: PUSH
 562: LD_EXP 28
 566: DIFF
 567: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , pokryshkinSpawnArea , false ) ;
 568: LD_EXP 23
 572: PPUSH
 573: LD_INT 5
 575: PPUSH
 576: LD_INT 0
 578: PPUSH
 579: CALL_OW 49
// ComHold ( Pokryshkin ) ;
 583: LD_EXP 23
 587: PPUSH
 588: CALL_OW 140
// for i in tmp do
 592: LD_ADDR_VAR 0 2
 596: PUSH
 597: LD_VAR 0 3
 601: PUSH
 602: FOR_IN
 603: IFFALSE 655
// begin if not PlaceUnitArea ( i , pokryshkinGuardArea , false ) then
 605: LD_VAR 0 2
 609: PPUSH
 610: LD_INT 4
 612: PPUSH
 613: LD_INT 0
 615: PPUSH
 616: CALL_OW 49
 620: NOT
 621: IFFALSE 644
// PlaceUnitXYR ( i , 78 , 55 , 3 , false ) ;
 623: LD_VAR 0 2
 627: PPUSH
 628: LD_INT 78
 630: PPUSH
 631: LD_INT 55
 633: PPUSH
 634: LD_INT 3
 636: PPUSH
 637: LD_INT 0
 639: PPUSH
 640: CALL_OW 50
// ComHold ( i ) ;
 644: LD_VAR 0 2
 648: PPUSH
 649: CALL_OW 140
// end ;
 653: GO 602
 655: POP
 656: POP
// PlaceUnitArea ( Gnyevko , [ gnyevko1Spawn , gnyevko2Spawn , gnyevko3Spawn , gnyevko3Spawn ] [ Difficulty ] , false ) ;
 657: LD_EXP 30
 661: PPUSH
 662: LD_INT 9
 664: PUSH
 665: LD_INT 10
 667: PUSH
 668: LD_INT 11
 670: PUSH
 671: LD_INT 11
 673: PUSH
 674: EMPTY
 675: LIST
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: LD_OWVAR 67
 684: ARRAY
 685: PPUSH
 686: LD_INT 0
 688: PPUSH
 689: CALL_OW 49
// SetLives ( Gnyevko , 500 - ( 50 * Difficulty ) ) ;
 693: LD_EXP 30
 697: PPUSH
 698: LD_INT 500
 700: PUSH
 701: LD_INT 50
 703: PUSH
 704: LD_OWVAR 67
 708: MUL
 709: MINUS
 710: PPUSH
 711: CALL_OW 234
// end ; end_of_file
 715: LD_VAR 0 1
 719: RET
// export Brown , Gladstone , Holland , Mel ; export amApes ; export function PrepareAmerican ; var i , ape ; begin
 720: LD_INT 0
 722: PPUSH
 723: PPUSH
 724: PPUSH
// uc_side := 1 ;
 725: LD_ADDR_OWVAR 20
 729: PUSH
 730: LD_INT 1
 732: ST_TO_ADDR
// uc_nation := nation_american ;
 733: LD_ADDR_OWVAR 21
 737: PUSH
 738: LD_INT 1
 740: ST_TO_ADDR
// hc_class := class_soldier ;
 741: LD_ADDR_OWVAR 28
 745: PUSH
 746: LD_INT 1
 748: ST_TO_ADDR
// hc_sex := sex_male ;
 749: LD_ADDR_OWVAR 27
 753: PUSH
 754: LD_INT 1
 756: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 757: LD_ADDR_OWVAR 33
 761: PUSH
 762: LD_STRING AmGalRemake
 764: ST_TO_ADDR
// hc_face_number := 1 ;
 765: LD_ADDR_OWVAR 34
 769: PUSH
 770: LD_INT 1
 772: ST_TO_ADDR
// hc_name := Charles Brown ;
 773: LD_ADDR_OWVAR 26
 777: PUSH
 778: LD_STRING Charles Brown
 780: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
 781: LD_ADDR_OWVAR 29
 785: PUSH
 786: LD_INT 12
 788: PUSH
 789: LD_INT 11
 791: PUSH
 792: EMPTY
 793: LIST
 794: LIST
 795: ST_TO_ADDR
// hc_basic_skills := [ 3 , 0 , 0 , 0 ] ;
 796: LD_ADDR_OWVAR 30
 800: PUSH
 801: LD_INT 3
 803: PUSH
 804: LD_INT 0
 806: PUSH
 807: LD_INT 0
 809: PUSH
 810: LD_INT 0
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: LIST
 817: LIST
 818: ST_TO_ADDR
// hc_skills := [ 3 , 1 , 1 , 1 ] ;
 819: LD_ADDR_OWVAR 31
 823: PUSH
 824: LD_INT 3
 826: PUSH
 827: LD_INT 1
 829: PUSH
 830: LD_INT 1
 832: PUSH
 833: LD_INT 1
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: LIST
 840: LIST
 841: ST_TO_ADDR
// Brown := CreateHuman ;
 842: LD_ADDR_EXP 32
 846: PUSH
 847: CALL_OW 44
 851: ST_TO_ADDR
// hc_sex := sex_female ;
 852: LD_ADDR_OWVAR 27
 856: PUSH
 857: LD_INT 2
 859: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
 860: LD_ADDR_OWVAR 33
 864: PUSH
 865: LD_STRING AmGalRemake
 867: ST_TO_ADDR
// hc_face_number := 2 ;
 868: LD_ADDR_OWVAR 34
 872: PUSH
 873: LD_INT 2
 875: ST_TO_ADDR
// hc_name := Johanna Holland ;
 876: LD_ADDR_OWVAR 26
 880: PUSH
 881: LD_STRING Johanna Holland
 883: ST_TO_ADDR
// hc_attr := [ 10 , 10 ] ;
 884: LD_ADDR_OWVAR 29
 888: PUSH
 889: LD_INT 10
 891: PUSH
 892: LD_INT 10
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 0 , 1 ] ;
 899: LD_ADDR_OWVAR 30
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: LD_INT 0
 909: PUSH
 910: LD_INT 0
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: LIST
 920: LIST
 921: ST_TO_ADDR
// hc_skills := [ Difficulty , 0 , 1 , 2 ] ;
 922: LD_ADDR_OWVAR 31
 926: PUSH
 927: LD_OWVAR 67
 931: PUSH
 932: LD_INT 0
 934: PUSH
 935: LD_INT 1
 937: PUSH
 938: LD_INT 2
 940: PUSH
 941: EMPTY
 942: LIST
 943: LIST
 944: LIST
 945: LIST
 946: ST_TO_ADDR
// Holland := CreateHuman ;
 947: LD_ADDR_EXP 34
 951: PUSH
 952: CALL_OW 44
 956: ST_TO_ADDR
// SetDir ( Holland , 2 ) ;
 957: LD_EXP 34
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: CALL_OW 233
// PlaceHumanInUnit ( Holland , usBun1 ) ;
 969: LD_EXP 34
 973: PPUSH
 974: LD_INT 3
 976: PPUSH
 977: CALL_OW 52
// Gladstone := PrepareUnit ( Gladstone , false ,  ) ;
 981: LD_ADDR_EXP 33
 985: PUSH
 986: LD_STRING Gladstone
 988: PPUSH
 989: LD_INT 0
 991: PPUSH
 992: LD_STRING 
 994: PPUSH
 995: CALL 10397 0 3
 999: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , usLab ) ;
1000: LD_EXP 33
1004: PPUSH
1005: LD_INT 2
1007: PPUSH
1008: CALL_OW 52
// for i := 1 to [ 4 , 5 , 6 , 7 ] [ Difficulty ] do
1012: LD_ADDR_VAR 0 2
1016: PUSH
1017: DOUBLE
1018: LD_INT 1
1020: DEC
1021: ST_TO_ADDR
1022: LD_INT 4
1024: PUSH
1025: LD_INT 5
1027: PUSH
1028: LD_INT 6
1030: PUSH
1031: LD_INT 7
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: LIST
1038: LIST
1039: PUSH
1040: LD_OWVAR 67
1044: ARRAY
1045: PUSH
1046: FOR_TO
1047: IFFALSE 1100
// begin PrepareApemanEngineer ( ) ;
1049: CALL 44622 0 0
// ape := CreateHuman ;
1053: LD_ADDR_VAR 0 3
1057: PUSH
1058: CALL_OW 44
1062: ST_TO_ADDR
// PlaceUnitArea ( ape , usApeSpawn , false ) ;
1063: LD_VAR 0 3
1067: PPUSH
1068: LD_INT 13
1070: PPUSH
1071: LD_INT 0
1073: PPUSH
1074: CALL_OW 49
// amApes := Join ( amApes , ape ) ;
1078: LD_ADDR_EXP 36
1082: PUSH
1083: LD_EXP 36
1087: PPUSH
1088: LD_VAR 0 3
1092: PPUSH
1093: CALL 48597 0 2
1097: ST_TO_ADDR
// end ;
1098: GO 1046
1100: POP
1101: POP
// SetTag ( amApes [ 1 ] , tApeEng ) ;
1102: LD_EXP 36
1106: PUSH
1107: LD_INT 1
1109: ARRAY
1110: PPUSH
1111: LD_INT 2
1113: PPUSH
1114: CALL_OW 109
// end ;
1118: LD_VAR 0 1
1122: RET
// every 0 0$20 trigger Difficulty > 2 and burlakAsCommander do
1123: LD_OWVAR 67
1127: PUSH
1128: LD_INT 2
1130: GREATER
1131: IFFALSE 1139
1133: PUSH
1134: LD_EXP 14
1138: AND
1139: IFFALSE 1313
1141: GO 1143
1143: DISABLE
// begin uc_side := 1 ;
1144: LD_ADDR_OWVAR 20
1148: PUSH
1149: LD_INT 1
1151: ST_TO_ADDR
// uc_nation := nation_american ;
1152: LD_ADDR_OWVAR 21
1156: PUSH
1157: LD_INT 1
1159: ST_TO_ADDR
// hc_class := class_soldier ;
1160: LD_ADDR_OWVAR 28
1164: PUSH
1165: LD_INT 1
1167: ST_TO_ADDR
// hc_sex := sex_male ;
1168: LD_ADDR_OWVAR 27
1172: PUSH
1173: LD_INT 1
1175: ST_TO_ADDR
// hc_gallery := SecondCharsGal ;
1176: LD_ADDR_OWVAR 33
1180: PUSH
1181: LD_STRING SecondCharsGal
1183: ST_TO_ADDR
// hc_face_number := 56 ;
1184: LD_ADDR_OWVAR 34
1188: PUSH
1189: LD_INT 56
1191: ST_TO_ADDR
// hc_name := Mel Brennan ;
1192: LD_ADDR_OWVAR 26
1196: PUSH
1197: LD_STRING Mel Brennan
1199: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
1200: LD_ADDR_OWVAR 29
1204: PUSH
1205: LD_INT 12
1207: PUSH
1208: LD_INT 11
1210: PUSH
1211: EMPTY
1212: LIST
1213: LIST
1214: ST_TO_ADDR
// hc_basic_skills := [ 1 , 0 , 1 , 0 ] ;
1215: LD_ADDR_OWVAR 30
1219: PUSH
1220: LD_INT 1
1222: PUSH
1223: LD_INT 0
1225: PUSH
1226: LD_INT 1
1228: PUSH
1229: LD_INT 0
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: LIST
1236: LIST
1237: ST_TO_ADDR
// hc_skills := [ Difficulty , 2 , 0 , 0 ] ;
1238: LD_ADDR_OWVAR 31
1242: PUSH
1243: LD_OWVAR 67
1247: PUSH
1248: LD_INT 2
1250: PUSH
1251: LD_INT 0
1253: PUSH
1254: LD_INT 0
1256: PUSH
1257: EMPTY
1258: LIST
1259: LIST
1260: LIST
1261: LIST
1262: ST_TO_ADDR
// Mel := CreateHuman ;
1263: LD_ADDR_EXP 35
1267: PUSH
1268: CALL_OW 44
1272: ST_TO_ADDR
// PlaceUnitXY ( Mel , 77 , 19 , true ) ;
1273: LD_EXP 35
1277: PPUSH
1278: LD_INT 77
1280: PPUSH
1281: LD_INT 19
1283: PPUSH
1284: LD_INT 1
1286: PPUSH
1287: CALL_OW 48
// wait ( 0 0$2 ) ;
1291: LD_INT 70
1293: PPUSH
1294: CALL_OW 67
// ComAgressiveMove ( Mel , 50 , 21 ) ;
1298: LD_EXP 35
1302: PPUSH
1303: LD_INT 50
1305: PPUSH
1306: LD_INT 21
1308: PPUSH
1309: CALL_OW 114
// end ;
1313: END
// every 10 trigger activeAmericanScript do var i , eng , enemyInRange , tmp ;
1314: LD_EXP 15
1318: IFFALSE 1772
1320: GO 1322
1322: DISABLE
1323: LD_INT 0
1325: PPUSH
1326: PPUSH
1327: PPUSH
1328: PPUSH
// begin enable ;
1329: ENABLE
// tmp := UnitFilter ( amApes , [ [ f_not , [ f_tag , tApeEng ] ] ] ) ;
1330: LD_ADDR_VAR 0 4
1334: PUSH
1335: LD_EXP 36
1339: PPUSH
1340: LD_INT 3
1342: PUSH
1343: LD_INT 120
1345: PUSH
1346: LD_INT 2
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PUSH
1357: EMPTY
1358: LIST
1359: PPUSH
1360: CALL_OW 72
1364: ST_TO_ADDR
// eng := UnitFilter ( amApes , [ f_tag , tApeEng ] ) ;
1365: LD_ADDR_VAR 0 2
1369: PUSH
1370: LD_EXP 36
1374: PPUSH
1375: LD_INT 120
1377: PUSH
1378: LD_INT 2
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PPUSH
1385: CALL_OW 72
1389: ST_TO_ADDR
// enemyInRange := FilterUnitsInArea ( amBaseArea , [ f_side , 3 ] ) ;
1390: LD_ADDR_VAR 0 3
1394: PUSH
1395: LD_INT 17
1397: PPUSH
1398: LD_INT 22
1400: PUSH
1401: LD_INT 3
1403: PUSH
1404: EMPTY
1405: LIST
1406: LIST
1407: PPUSH
1408: CALL_OW 70
1412: ST_TO_ADDR
// if IsOk ( Mel ) then
1413: LD_EXP 35
1417: PPUSH
1418: CALL_OW 302
1422: IFFALSE 1444
// tmp := Join ( tmp , Mel ) ;
1424: LD_ADDR_VAR 0 4
1428: PUSH
1429: LD_VAR 0 4
1433: PPUSH
1434: LD_EXP 35
1438: PPUSH
1439: CALL 48597 0 2
1443: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_not , [ f_lives , 1000 ] ] ) then
1444: LD_VAR 0 4
1448: PPUSH
1449: LD_INT 3
1451: PUSH
1452: LD_INT 24
1454: PUSH
1455: LD_INT 1000
1457: PUSH
1458: EMPTY
1459: LIST
1460: LIST
1461: PUSH
1462: EMPTY
1463: LIST
1464: LIST
1465: PPUSH
1466: CALL_OW 72
1470: IFFALSE 1509
// begin if IsInUnit ( Gladstone ) then
1472: LD_EXP 33
1476: PPUSH
1477: CALL_OW 310
1481: IFFALSE 1507
// begin ComExitBuilding ( Gladstone ) ;
1483: LD_EXP 33
1487: PPUSH
1488: CALL_OW 122
// AddComMoveXY ( Gladstone , 39 , 7 ) ;
1492: LD_EXP 33
1496: PPUSH
1497: LD_INT 39
1499: PPUSH
1500: LD_INT 7
1502: PPUSH
1503: CALL_OW 171
// end ; end else
1507: GO 1533
// if not IsInUnit ( Gladstone ) then
1509: LD_EXP 33
1513: PPUSH
1514: CALL_OW 310
1518: NOT
1519: IFFALSE 1533
// ComEnterUnit ( Gladstone , usLab ) ;
1521: LD_EXP 33
1525: PPUSH
1526: LD_INT 2
1528: PPUSH
1529: CALL_OW 120
// if eng then
1533: LD_VAR 0 2
1537: IFFALSE 1606
// if GetLives ( usBun1 ) < 1000 then
1539: LD_INT 3
1541: PPUSH
1542: CALL_OW 256
1546: PUSH
1547: LD_INT 1000
1549: LESS
1550: IFFALSE 1566
// ComRepairBuilding ( eng , usBun1 ) else
1552: LD_VAR 0 2
1556: PPUSH
1557: LD_INT 3
1559: PPUSH
1560: CALL_OW 130
1564: GO 1606
// if GetDistUnitXY ( eng [ 1 ] , 37 , 9 ) > 5 then
1566: LD_VAR 0 2
1570: PUSH
1571: LD_INT 1
1573: ARRAY
1574: PPUSH
1575: LD_INT 37
1577: PPUSH
1578: LD_INT 9
1580: PPUSH
1581: CALL_OW 297
1585: PUSH
1586: LD_INT 5
1588: GREATER
1589: IFFALSE 1606
// ComMoveXY ( eng , 37 , 9 ) ;
1591: LD_VAR 0 2
1595: PPUSH
1596: LD_INT 37
1598: PPUSH
1599: LD_INT 9
1601: PPUSH
1602: CALL_OW 111
// for i in tmp do
1606: LD_ADDR_VAR 0 1
1610: PUSH
1611: LD_VAR 0 4
1615: PUSH
1616: FOR_IN
1617: IFFALSE 1770
// begin if GetLives ( i ) < 600 and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1619: LD_VAR 0 1
1623: PPUSH
1624: CALL_OW 256
1628: PUSH
1629: LD_INT 600
1631: LESS
1632: IFFALSE 1655
1634: PUSH
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_INT 37
1642: PPUSH
1643: LD_INT 9
1645: PPUSH
1646: CALL_OW 297
1650: PUSH
1651: LD_INT 5
1653: GREATER
1654: AND
1655: IFFALSE 1674
// begin ComMoveXY ( i , 37 , 9 ) ;
1657: LD_VAR 0 1
1661: PPUSH
1662: LD_INT 37
1664: PPUSH
1665: LD_INT 9
1667: PPUSH
1668: CALL_OW 111
// continue ;
1672: GO 1616
// end ; if not enemyInRange and GetDistUnitXY ( i , 37 , 9 ) > 5 then
1674: LD_VAR 0 3
1678: NOT
1679: IFFALSE 1702
1681: PUSH
1682: LD_VAR 0 1
1686: PPUSH
1687: LD_INT 37
1689: PPUSH
1690: LD_INT 9
1692: PPUSH
1693: CALL_OW 297
1697: PUSH
1698: LD_INT 5
1700: GREATER
1701: AND
1702: IFFALSE 1721
// begin ComMoveXY ( i , 37 , 9 ) ;
1704: LD_VAR 0 1
1708: PPUSH
1709: LD_INT 37
1711: PPUSH
1712: LD_INT 9
1714: PPUSH
1715: CALL_OW 111
// continue ;
1719: GO 1616
// end ; if enemyInRange and GetLives ( i ) = 1000 then
1721: LD_VAR 0 3
1725: IFFALSE 1742
1727: PUSH
1728: LD_VAR 0 1
1732: PPUSH
1733: CALL_OW 256
1737: PUSH
1738: LD_INT 1000
1740: EQUAL
1741: AND
1742: IFFALSE 1768
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInRange , i ) ) ;
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_VAR 0 3
1753: PPUSH
1754: LD_VAR 0 1
1758: PPUSH
1759: CALL_OW 74
1763: PPUSH
1764: CALL_OW 115
// end ;
1768: GO 1616
1770: POP
1771: POP
// end ; end_of_file
1772: PPOPN 4
1774: END
// every 0 0$1 trigger not attackedByApe do var un ;
1775: LD_EXP 7
1779: NOT
1780: IFFALSE 1856
1782: GO 1784
1784: DISABLE
1785: LD_INT 0
1787: PPUSH
// begin enable ;
1788: ENABLE
// un := UnitShoot ( Burlak ) ;
1789: LD_ADDR_VAR 0 1
1793: PUSH
1794: LD_EXP 22
1798: PPUSH
1799: CALL_OW 504
1803: ST_TO_ADDR
// if un > - 1 then
1804: LD_VAR 0 1
1808: PUSH
1809: LD_INT 1
1811: NEG
1812: GREATER
1813: IFFALSE 1856
// if GetSide ( un ) = 0 and GetClass ( un ) = class_apeman then
1815: LD_VAR 0 1
1819: PPUSH
1820: CALL_OW 255
1824: PUSH
1825: LD_INT 0
1827: EQUAL
1828: IFFALSE 1845
1830: PUSH
1831: LD_VAR 0 1
1835: PPUSH
1836: CALL_OW 257
1840: PUSH
1841: LD_INT 12
1843: EQUAL
1844: AND
1845: IFFALSE 1856
// begin attackedByApe := true ;
1847: LD_ADDR_EXP 7
1851: PUSH
1852: LD_INT 1
1854: ST_TO_ADDR
// disable ;
1855: DISABLE
// end ; end ;
1856: PPOPN 1
1858: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
1859: LD_VAR 0 1
1863: PPUSH
1864: CALL 70293 0 1
// if GetSide ( un ) = 3 and GetType ( un ) = unit_human then
1868: LD_VAR 0 1
1872: PPUSH
1873: CALL_OW 255
1877: PUSH
1878: LD_INT 3
1880: EQUAL
1881: IFFALSE 1898
1883: PUSH
1884: LD_VAR 0 1
1888: PPUSH
1889: CALL_OW 247
1893: PUSH
1894: LD_INT 1
1896: EQUAL
1897: AND
1898: IFFALSE 1915
// loseCounter := Inc ( loseCounter ) ;
1900: LD_ADDR_EXP 20
1904: PUSH
1905: LD_EXP 20
1909: PPUSH
1910: CALL 49970 0 1
1914: ST_TO_ADDR
// if un = Burlak then
1915: LD_VAR 0 1
1919: PUSH
1920: LD_EXP 22
1924: EQUAL
1925: IFFALSE 1934
// YouLost ( Burlak ) ;
1927: LD_STRING Burlak
1929: PPUSH
1930: CALL_OW 104
// end ;
1934: PPOPN 1
1936: END
// on UnitDestroyed_Extra ( un , killerSide , killerUnit ) do begin if not apeRadioKilled and GetTag ( un ) = tApeRadio and GetSide ( un ) = 0 and killerSide = 3 then
1937: LD_EXP 9
1941: NOT
1942: IFFALSE 1959
1944: PUSH
1945: LD_VAR 0 1
1949: PPUSH
1950: CALL_OW 110
1954: PUSH
1955: LD_INT 1
1957: EQUAL
1958: AND
1959: IFFALSE 1976
1961: PUSH
1962: LD_VAR 0 1
1966: PPUSH
1967: CALL_OW 255
1971: PUSH
1972: LD_INT 0
1974: EQUAL
1975: AND
1976: IFFALSE 1988
1978: PUSH
1979: LD_VAR 0 2
1983: PUSH
1984: LD_INT 3
1986: EQUAL
1987: AND
1988: IFFALSE 2000
// apeRadioKilled := un ;
1990: LD_ADDR_EXP 9
1994: PUSH
1995: LD_VAR 0 1
1999: ST_TO_ADDR
// end ;
2000: PPOPN 3
2002: END
// on UnitGoesToRed ( un ) do begin if GetSide ( un ) = 3 then
2003: LD_VAR 0 1
2007: PPUSH
2008: CALL_OW 255
2012: PUSH
2013: LD_INT 3
2015: EQUAL
2016: IFFALSE 2078
// begin someoneGetsHurt := true ;
2018: LD_ADDR_EXP 21
2022: PUSH
2023: LD_INT 1
2025: ST_TO_ADDR
// if un = Burlak and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) then
2026: LD_VAR 0 1
2030: PUSH
2031: LD_EXP 22
2035: EQUAL
2036: IFFALSE 2069
2038: PUSH
2039: LD_INT 22
2041: PUSH
2042: LD_INT 3
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: PUSH
2049: LD_INT 25
2051: PUSH
2052: LD_INT 4
2054: PUSH
2055: EMPTY
2056: LIST
2057: LIST
2058: PUSH
2059: EMPTY
2060: LIST
2061: LIST
2062: PPUSH
2063: CALL_OW 69
2067: NOT
2068: AND
2069: IFFALSE 2078
// begin YouLost ( Burlak ) ;
2071: LD_STRING Burlak
2073: PPUSH
2074: CALL_OW 104
// end ; end ; end ;
2078: PPOPN 1
2080: END
// on Contact ( s1 , s2 ) do begin if s1 = 3 and s2 = 6 then
2081: LD_VAR 0 1
2085: PUSH
2086: LD_INT 3
2088: EQUAL
2089: IFFALSE 2101
2091: PUSH
2092: LD_VAR 0 2
2096: PUSH
2097: LD_INT 6
2099: EQUAL
2100: AND
2101: IFFALSE 2111
// attackedAllied := true ;
2103: LD_ADDR_EXP 13
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// end ; end_of_file
2111: PPOPN 2
2113: END
// export function Action ; begin
2114: LD_INT 0
2116: PPUSH
// InGameOn ;
2117: CALL_OW 8
// CenterNowOnXY ( 78 , 85 ) ;
2121: LD_INT 78
2123: PPUSH
2124: LD_INT 85
2126: PPUSH
2127: CALL_OW 86
// wait ( 0 0$2 ) ;
2131: LD_INT 70
2133: PPUSH
2134: CALL_OW 67
// PlaceUnitXYD ( Burlak , 78 , 85 , 2 , true ) ;
2138: LD_EXP 22
2142: PPUSH
2143: LD_INT 78
2145: PPUSH
2146: LD_INT 85
2148: PPUSH
2149: LD_INT 2
2151: PPUSH
2152: LD_INT 1
2154: PPUSH
2155: CALL 50757 0 5
// ComHold ( Burlak ) ;
2159: LD_EXP 22
2163: PPUSH
2164: CALL_OW 140
// wait ( 0 0$3 ) ;
2168: LD_INT 105
2170: PPUSH
2171: CALL_OW 67
// ComMoveXY ( Burlak , 79 , 89 ) ;
2175: LD_EXP 22
2179: PPUSH
2180: LD_INT 79
2182: PPUSH
2183: LD_INT 89
2185: PPUSH
2186: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2190: LD_INT 18
2192: PPUSH
2193: CALL_OW 67
// Say ( Burlak , D1-Bur-1 ) ;
2197: LD_EXP 22
2201: PPUSH
2202: LD_STRING D1-Bur-1
2204: PPUSH
2205: CALL_OW 88
// ComMoveXY ( Burlak , 81 , 87 ) ;
2209: LD_EXP 22
2213: PPUSH
2214: LD_INT 81
2216: PPUSH
2217: LD_INT 87
2219: PPUSH
2220: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2224: LD_INT 10
2226: PPUSH
2227: CALL_OW 67
// Say ( Burlak , D1-Bur-1a ) ;
2231: LD_EXP 22
2235: PPUSH
2236: LD_STRING D1-Bur-1a
2238: PPUSH
2239: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 90 ) ;
2243: LD_EXP 22
2247: PPUSH
2248: LD_INT 85
2250: PPUSH
2251: LD_INT 90
2253: PPUSH
2254: CALL_OW 111
// wait ( 0 0$0.5 ) ;
2258: LD_INT 18
2260: PPUSH
2261: CALL_OW 67
// Say ( Burlak , D1-Bur-1b ) ;
2265: LD_EXP 22
2269: PPUSH
2270: LD_STRING D1-Bur-1b
2272: PPUSH
2273: CALL_OW 88
// ComMoveXY ( Burlak , 85 , 87 ) ;
2277: LD_EXP 22
2281: PPUSH
2282: LD_INT 85
2284: PPUSH
2285: LD_INT 87
2287: PPUSH
2288: CALL_OW 111
// wait ( 0 0$0.3 ) ;
2292: LD_INT 10
2294: PPUSH
2295: CALL_OW 67
// InGameOff ;
2299: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
2303: LD_STRING M1
2305: PPUSH
2306: CALL_OW 337
// SaveForQuickRestart ;
2310: CALL_OW 22
// if debug then
2314: LD_EXP 1
2318: IFFALSE 2327
// FogOff ( 3 ) ;
2320: LD_INT 3
2322: PPUSH
2323: CALL_OW 344
// wait ( 0 0$10 - ( 0 0$2 * Difficulty ) ) ;
2327: LD_INT 350
2329: PUSH
2330: LD_INT 70
2332: PUSH
2333: LD_OWVAR 67
2337: MUL
2338: MINUS
2339: PPUSH
2340: CALL_OW 67
// if GetDistUnitXY ( Burlak , 80 , 87 ) < 8 then
2344: LD_EXP 22
2348: PPUSH
2349: LD_INT 80
2351: PPUSH
2352: LD_INT 87
2354: PPUSH
2355: CALL_OW 297
2359: PUSH
2360: LD_INT 8
2362: LESS
2363: IFFALSE 2369
// SendApemanAttack ;
2365: CALL 9749 0 0
// end ;
2369: LD_VAR 0 1
2373: RET
// every 0 0$2 trigger IsInArea ( Burlak , waterfallArea ) do
2374: LD_EXP 22
2378: PPUSH
2379: LD_INT 6
2381: PPUSH
2382: CALL_OW 308
2386: IFFALSE 2428
2388: GO 2390
2390: DISABLE
// begin waterfallSpotted := true ;
2391: LD_ADDR_EXP 8
2395: PUSH
2396: LD_INT 1
2398: ST_TO_ADDR
// CenterOnXY ( 75 , 89 ) ;
2399: LD_INT 75
2401: PPUSH
2402: LD_INT 89
2404: PPUSH
2405: CALL_OW 84
// wait ( 0 0$0.2 ) ;
2409: LD_INT 7
2411: PPUSH
2412: CALL_OW 67
// Say ( Burlak , DWaterfall-Bur-1 ) ;
2416: LD_EXP 22
2420: PPUSH
2421: LD_STRING DWaterfall-Bur-1
2423: PPUSH
2424: CALL_OW 88
// end ;
2428: END
// every 0 0$1 trigger GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) < 6 do
2429: LD_EXP 22
2433: PPUSH
2434: LD_INT 25
2436: PUSH
2437: LD_INT 12
2439: PUSH
2440: EMPTY
2441: LIST
2442: LIST
2443: PPUSH
2444: CALL_OW 69
2448: PPUSH
2449: LD_EXP 22
2453: PPUSH
2454: CALL_OW 74
2458: PPUSH
2459: CALL_OW 296
2463: PUSH
2464: LD_INT 6
2466: LESS
2467: IFFALSE 2558
2469: GO 2471
2471: DISABLE
// begin apeSpotted := true ;
2472: LD_ADDR_EXP 6
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// if joinedToBelkov then
2480: LD_EXP 3
2484: IFFALSE 2488
// exit ;
2486: GO 2558
// ComTurnUnit ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ f_class , class_apeman ] ) , Burlak ) ) ;
2488: LD_EXP 22
2492: PPUSH
2493: LD_INT 25
2495: PUSH
2496: LD_INT 12
2498: PUSH
2499: EMPTY
2500: LIST
2501: LIST
2502: PPUSH
2503: CALL_OW 69
2507: PPUSH
2508: LD_EXP 22
2512: PPUSH
2513: CALL_OW 74
2517: PPUSH
2518: CALL_OW 119
// wait ( 0 0$0.3 ) ;
2522: LD_INT 10
2524: PPUSH
2525: CALL_OW 67
// DialogueOn ;
2529: CALL_OW 6
// CenterNowOnUnits ( Burlak ) ;
2533: LD_EXP 22
2537: PPUSH
2538: CALL_OW 87
// Say ( Burlak , D2-Bur-1 ) ;
2542: LD_EXP 22
2546: PPUSH
2547: LD_STRING D2-Bur-1
2549: PPUSH
2550: CALL_OW 88
// DialogueOff ;
2554: CALL_OW 7
// end ;
2558: END
// every 0 0$1 trigger attackedByApe do
2559: LD_EXP 7
2563: IFFALSE 2587
2565: GO 2567
2567: DISABLE
// begin wait ( 0 0$0.3 ) ;
2568: LD_INT 10
2570: PPUSH
2571: CALL_OW 67
// Say ( Burlak , D2-Bur-1a ) ;
2575: LD_EXP 22
2579: PPUSH
2580: LD_STRING D2-Bur-1a
2582: PPUSH
2583: CALL_OW 88
// end ;
2587: END
// every 0 0$2 trigger SeeXY ( 3 , 130 , 97 ) and GetDistUnitXY ( Burlak , 130 , 97 ) < 6 and not joinedToBelkov and not hasGnyevko do
2588: LD_INT 3
2590: PPUSH
2591: LD_INT 130
2593: PPUSH
2594: LD_INT 97
2596: PPUSH
2597: CALL_OW 293
2601: IFFALSE 2624
2603: PUSH
2604: LD_EXP 22
2608: PPUSH
2609: LD_INT 130
2611: PPUSH
2612: LD_INT 97
2614: PPUSH
2615: CALL_OW 297
2619: PUSH
2620: LD_INT 6
2622: LESS
2623: AND
2624: IFFALSE 2633
2626: PUSH
2627: LD_EXP 3
2631: NOT
2632: AND
2633: IFFALSE 2642
2635: PUSH
2636: LD_EXP 4
2640: NOT
2641: AND
2642: IFFALSE 2667
2644: GO 2646
2646: DISABLE
// begin DialogueOn ;
2647: CALL_OW 6
// Say ( Burlak , DCorpse-Bur-1 ) ;
2651: LD_EXP 22
2655: PPUSH
2656: LD_STRING DCorpse-Bur-1
2658: PPUSH
2659: CALL_OW 88
// DialogueOff ;
2663: CALL_OW 7
// end ;
2667: END
// every 0 0$1 trigger apeRadioKilled do var un , tmp , tmp2 ;
2668: LD_EXP 9
2672: IFFALSE 3056
2674: GO 2676
2676: DISABLE
2677: LD_INT 0
2679: PPUSH
2680: PPUSH
2681: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_dist , apeRadioKilled , 12 ] ] ) ;
2682: LD_ADDR_VAR 0 2
2686: PUSH
2687: LD_INT 22
2689: PUSH
2690: LD_INT 3
2692: PUSH
2693: EMPTY
2694: LIST
2695: LIST
2696: PUSH
2697: LD_INT 21
2699: PUSH
2700: LD_INT 1
2702: PUSH
2703: EMPTY
2704: LIST
2705: LIST
2706: PUSH
2707: LD_INT 91
2709: PUSH
2710: LD_EXP 9
2714: PUSH
2715: LD_INT 12
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: LIST
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: PPUSH
2728: CALL_OW 69
2732: ST_TO_ADDR
// if not tmp or FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
2733: LD_VAR 0 2
2737: NOT
2738: IFTRUE 2774
2740: PUSH
2741: LD_INT 22
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: EMPTY
2748: LIST
2749: LIST
2750: PUSH
2751: LD_INT 21
2753: PUSH
2754: LD_INT 1
2756: PUSH
2757: EMPTY
2758: LIST
2759: LIST
2760: PUSH
2761: EMPTY
2762: LIST
2763: LIST
2764: PPUSH
2765: CALL_OW 69
2769: PUSH
2770: LD_INT 1
2772: EQUAL
2773: OR
2774: IFFALSE 2778
// exit ;
2776: GO 3056
// tmp2 := [ Kirilenkova , Belkov , Saseda , Jaworska ] ;
2778: LD_ADDR_VAR 0 3
2782: PUSH
2783: LD_EXP 31
2787: PUSH
2788: LD_EXP 27
2792: PUSH
2793: LD_EXP 24
2797: PUSH
2798: LD_EXP 25
2802: PUSH
2803: EMPTY
2804: LIST
2805: LIST
2806: LIST
2807: LIST
2808: ST_TO_ADDR
// Randomize ;
2809: CALL_OW 10
// un := tmp2 [ rand ( 1 , Count ( tmp2 ) ) ] ;
2813: LD_ADDR_VAR 0 1
2817: PUSH
2818: LD_VAR 0 3
2822: PUSH
2823: LD_INT 1
2825: PPUSH
2826: LD_VAR 0 3
2830: PPUSH
2831: CALL 12621 0 1
2835: PPUSH
2836: CALL_OW 12
2840: ARRAY
2841: ST_TO_ADDR
// if not un in tmp then
2842: LD_VAR 0 1
2846: PUSH
2847: LD_VAR 0 2
2851: IN
2852: NOT
2853: IFFALSE 2865
// un := Burlak ;
2855: LD_ADDR_VAR 0 1
2859: PUSH
2860: LD_EXP 22
2864: ST_TO_ADDR
// DialogueOn ;
2865: CALL_OW 6
// CenterNowOnUnits ( apeRadioKilled ) ;
2869: LD_EXP 9
2873: PPUSH
2874: CALL_OW 87
// case un of Kirilenkova :
2878: LD_VAR 0 1
2882: PUSH
2883: LD_EXP 31
2887: DOUBLE
2888: EQUAL
2889: IFTRUE 2893
2891: GO 2908
2893: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; Belkov :
2894: LD_EXP 31
2898: PPUSH
2899: LD_STRING D2a-Kir-1
2901: PPUSH
2902: CALL_OW 88
2906: GO 3009
2908: LD_EXP 27
2912: DOUBLE
2913: EQUAL
2914: IFTRUE 2918
2916: GO 2933
2918: POP
// Say ( Belkov , D2a-Bel-1 ) ; Burlak :
2919: LD_EXP 27
2923: PPUSH
2924: LD_STRING D2a-Bel-1
2926: PPUSH
2927: CALL_OW 88
2931: GO 3009
2933: LD_EXP 22
2937: DOUBLE
2938: EQUAL
2939: IFTRUE 2943
2941: GO 2958
2943: POP
// Say ( Burlak , D2a-Bur-1 ) ; Jaworska :
2944: LD_EXP 22
2948: PPUSH
2949: LD_STRING D2a-Bur-1
2951: PPUSH
2952: CALL_OW 88
2956: GO 3009
2958: LD_EXP 25
2962: DOUBLE
2963: EQUAL
2964: IFTRUE 2968
2966: GO 2983
2968: POP
// Say ( Jaworska , D2a-RFSol1-1 ) ; Saseda :
2969: LD_EXP 25
2973: PPUSH
2974: LD_STRING D2a-RFSol1-1
2976: PPUSH
2977: CALL_OW 88
2981: GO 3009
2983: LD_EXP 24
2987: DOUBLE
2988: EQUAL
2989: IFTRUE 2993
2991: GO 3008
2993: POP
// Say ( Saseda , D2a-RSol1-1 ) ; end ;
2994: LD_EXP 24
2998: PPUSH
2999: LD_STRING D2a-RSol1-1
3001: PPUSH
3002: CALL_OW 88
3006: GO 3009
3008: POP
// if hasGnyevko then
3009: LD_EXP 4
3013: IFFALSE 3040
// begin if IsOk ( Gnyevko ) then
3015: LD_EXP 30
3019: PPUSH
3020: CALL_OW 302
3024: IFFALSE 3038
// Say ( Gnyevko , D2a-Gny-1 ) ;
3026: LD_EXP 30
3030: PPUSH
3031: LD_STRING D2a-Gny-1
3033: PPUSH
3034: CALL_OW 88
// end else
3038: GO 3052
// Say ( Burlak , D2a-Bur-2 ) ;
3040: LD_EXP 22
3044: PPUSH
3045: LD_STRING D2a-Bur-2
3047: PPUSH
3048: CALL_OW 88
// DialogueOff ;
3052: CALL_OW 7
// end ;
3056: PPOPN 3
3058: END
// every 0 0$1 do var un , tmp ;
3059: GO 3061
3061: DISABLE
3062: LD_INT 0
3064: PPUSH
3065: PPUSH
// begin if Difficulty = 1 then
3066: LD_OWVAR 67
3070: PUSH
3071: LD_INT 1
3073: EQUAL
3074: IFFALSE 3078
// exit ;
3076: GO 3219
// wait ( 8 8$00 - ( 1 1$00 * Difficulty ) ) ;
3078: LD_INT 16800
3080: PUSH
3081: LD_INT 2100
3083: PUSH
3084: LD_OWVAR 67
3088: MUL
3089: MINUS
3090: PPUSH
3091: CALL_OW 67
// if hasGnyevko then
3095: LD_EXP 4
3099: IFFALSE 3103
// exit ;
3101: GO 3219
// tmp := FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_tiger ] ] ) ;
3103: LD_ADDR_VAR 0 2
3107: PUSH
3108: LD_INT 22
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: EMPTY
3115: LIST
3116: LIST
3117: PUSH
3118: LD_INT 25
3120: PUSH
3121: LD_INT 14
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: PUSH
3128: EMPTY
3129: LIST
3130: LIST
3131: PPUSH
3132: CALL_OW 69
3136: ST_TO_ADDR
// un := NearestUnitToUnit ( tmp , Gnyevko ) ;
3137: LD_ADDR_VAR 0 1
3141: PUSH
3142: LD_VAR 0 2
3146: PPUSH
3147: LD_EXP 30
3151: PPUSH
3152: CALL_OW 74
3156: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
3157: LD_INT 35
3159: PPUSH
3160: CALL_OW 67
// if hasGnyevko then
3164: LD_EXP 4
3168: IFFALSE 3181
// begin ComFree ( un ) ;
3170: LD_VAR 0 1
3174: PPUSH
3175: CALL_OW 139
// exit ;
3179: GO 3219
// end ; if not HasTask ( un ) then
3181: LD_VAR 0 1
3185: PPUSH
3186: CALL_OW 314
3190: NOT
3191: IFFALSE 3207
// ComAttackUnit ( un , Gnyevko ) ;
3193: LD_VAR 0 1
3197: PPUSH
3198: LD_EXP 30
3202: PPUSH
3203: CALL_OW 115
// until not IsOk ( un ) ;
3207: LD_VAR 0 1
3211: PPUSH
3212: CALL_OW 302
3216: NOT
3217: IFFALSE 3157
// end ;
3219: PPOPN 2
3221: END
// every 0 0$2 trigger See ( 3 , Gnyevko ) and IsOk ( Gnyevko ) and not hasGnyevko do var un ;
3222: LD_INT 3
3224: PPUSH
3225: LD_EXP 30
3229: PPUSH
3230: CALL_OW 292
3234: IFFALSE 3247
3236: PUSH
3237: LD_EXP 30
3241: PPUSH
3242: CALL_OW 302
3246: AND
3247: IFFALSE 3256
3249: PUSH
3250: LD_EXP 4
3254: NOT
3255: AND
3256: IFFALSE 3679
3258: GO 3260
3260: DISABLE
3261: LD_INT 0
3263: PPUSH
// begin hasGnyevko := true ;
3264: LD_ADDR_EXP 4
3268: PUSH
3269: LD_INT 1
3271: ST_TO_ADDR
// un := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
3272: LD_ADDR_VAR 0 1
3276: PUSH
3277: LD_INT 22
3279: PUSH
3280: LD_INT 3
3282: PUSH
3283: EMPTY
3284: LIST
3285: LIST
3286: PUSH
3287: LD_INT 21
3289: PUSH
3290: LD_INT 1
3292: PUSH
3293: EMPTY
3294: LIST
3295: LIST
3296: PUSH
3297: EMPTY
3298: LIST
3299: LIST
3300: PPUSH
3301: CALL_OW 69
3305: PPUSH
3306: LD_EXP 30
3310: PPUSH
3311: CALL_OW 74
3315: ST_TO_ADDR
// if not un in [ Burlak , Saseda , Jaworska ] then
3316: LD_VAR 0 1
3320: PUSH
3321: LD_EXP 22
3325: PUSH
3326: LD_EXP 24
3330: PUSH
3331: LD_EXP 25
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: IN
3341: NOT
3342: IFFALSE 3354
// un := Burlak ;
3344: LD_ADDR_VAR 0 1
3348: PUSH
3349: LD_EXP 22
3353: ST_TO_ADDR
// ComTurnUnit ( Gnyevko , un ) ;
3354: LD_EXP 30
3358: PPUSH
3359: LD_VAR 0 1
3363: PPUSH
3364: CALL_OW 119
// wait ( 0 0$0.3 ) ;
3368: LD_INT 10
3370: PPUSH
3371: CALL_OW 67
// DialogueOn ;
3375: CALL_OW 6
// CenterNowOnUnits ( Gnyevko ) ;
3379: LD_EXP 30
3383: PPUSH
3384: CALL_OW 87
// case un of Burlak :
3388: LD_VAR 0 1
3392: PUSH
3393: LD_EXP 22
3397: DOUBLE
3398: EQUAL
3399: IFTRUE 3403
3401: GO 3418
3403: POP
// Say ( Burlak , D3-Bur-1 ) ; Saseda :
3404: LD_EXP 22
3408: PPUSH
3409: LD_STRING D3-Bur-1
3411: PPUSH
3412: CALL_OW 88
3416: GO 3469
3418: LD_EXP 24
3422: DOUBLE
3423: EQUAL
3424: IFTRUE 3428
3426: GO 3443
3428: POP
// Say ( Saseda , D3-RSol1-1 ) ; Jaworska :
3429: LD_EXP 24
3433: PPUSH
3434: LD_STRING D3-RSol1-1
3436: PPUSH
3437: CALL_OW 88
3441: GO 3469
3443: LD_EXP 25
3447: DOUBLE
3448: EQUAL
3449: IFTRUE 3453
3451: GO 3468
3453: POP
// Say ( Jaworska , D3-RFSol1-1 ) ; end ;
3454: LD_EXP 25
3458: PPUSH
3459: LD_STRING D3-RFSol1-1
3461: PPUSH
3462: CALL_OW 88
3466: GO 3469
3468: POP
// Say ( Gnyevko , D3-Gny-1 ) ;
3469: LD_EXP 30
3473: PPUSH
3474: LD_STRING D3-Gny-1
3476: PPUSH
3477: CALL_OW 88
// if un = Burlak then
3481: LD_VAR 0 1
3485: PUSH
3486: LD_EXP 22
3490: EQUAL
3491: IFFALSE 3613
// begin if attackedByApe then
3493: LD_EXP 7
3497: IFFALSE 3513
// Say ( Burlak , D3-Bur-2 ) else
3499: LD_EXP 22
3503: PPUSH
3504: LD_STRING D3-Bur-2
3506: PPUSH
3507: CALL_OW 88
3511: GO 3545
// if apeRadioKilled then
3513: LD_EXP 9
3517: IFFALSE 3533
// Say ( Burlak , D3-Bur-2a ) else
3519: LD_EXP 22
3523: PPUSH
3524: LD_STRING D3-Bur-2a
3526: PPUSH
3527: CALL_OW 88
3531: GO 3545
// Say ( Burlak , D3-Bur-2b ) ;
3533: LD_EXP 22
3537: PPUSH
3538: LD_STRING D3-Bur-2b
3540: PPUSH
3541: CALL_OW 88
// if not burlakAsCommander then
3545: LD_EXP 14
3549: NOT
3550: IFFALSE 3566
// Say ( Burlak , D3-Bur-2c ) else
3552: LD_EXP 22
3556: PPUSH
3557: LD_STRING D3-Bur-2c
3559: PPUSH
3560: CALL_OW 88
3564: GO 3599
// if not americansDefeated then
3566: LD_EXP 10
3570: NOT
3571: IFFALSE 3587
// Say ( Burlak , D3-Bur-2d ) else
3573: LD_EXP 22
3577: PPUSH
3578: LD_STRING D3-Bur-2d
3580: PPUSH
3581: CALL_OW 88
3585: GO 3599
// Say ( Burlak , D3-Bur-2e ) ;
3587: LD_EXP 22
3591: PPUSH
3592: LD_STRING D3-Bur-2e
3594: PPUSH
3595: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
3599: LD_EXP 30
3603: PPUSH
3604: LD_STRING D3-Gny-2
3606: PPUSH
3607: CALL_OW 88
// end else
3611: GO 3663
// begin if un = Saseda then
3613: LD_VAR 0 1
3617: PUSH
3618: LD_EXP 24
3622: EQUAL
3623: IFFALSE 3639
// Say ( Saseda , D3-RSol1-2 ) else
3625: LD_EXP 24
3629: PPUSH
3630: LD_STRING D3-RSol1-2
3632: PPUSH
3633: CALL_OW 88
3637: GO 3651
// Say ( Jaworska , D3-RFSol1-2 ) ;
3639: LD_EXP 25
3643: PPUSH
3644: LD_STRING D3-RFSol1-2
3646: PPUSH
3647: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
3651: LD_EXP 30
3655: PPUSH
3656: LD_STRING D3-Gny-2a
3658: PPUSH
3659: CALL_OW 88
// end ; DialogueOff ;
3663: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
3667: LD_EXP 30
3671: PPUSH
3672: LD_INT 3
3674: PPUSH
3675: CALL_OW 235
// end ;
3679: PPOPN 1
3681: END
// function GnyevkoPokryshkinScene ; begin
3682: LD_INT 0
3684: PPUSH
// gnyevkoMeetPokryshkin := true ;
3685: LD_ADDR_EXP 11
3689: PUSH
3690: LD_INT 1
3692: ST_TO_ADDR
// ComHold ( Burlak ) ;
3693: LD_EXP 22
3697: PPUSH
3698: CALL_OW 140
// InGameOn ;
3702: CALL_OW 8
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
3706: LD_INT 76
3708: PPUSH
3709: LD_INT 56
3711: PPUSH
3712: LD_INT 3
3714: PPUSH
3715: LD_INT 12
3717: PPUSH
3718: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
3722: LD_EXP 23
3726: PPUSH
3727: CALL_OW 85
// SetSide ( Gnyevko , 6 ) ;
3731: LD_EXP 30
3735: PPUSH
3736: LD_INT 6
3738: PPUSH
3739: CALL_OW 235
// ComMoveXY ( Gnyevko , 79 , 56 ) ;
3743: LD_EXP 30
3747: PPUSH
3748: LD_INT 79
3750: PPUSH
3751: LD_INT 56
3753: PPUSH
3754: CALL_OW 111
// Say ( Pokryshkin , D4-Pok-1 ) ;
3758: LD_EXP 23
3762: PPUSH
3763: LD_STRING D4-Pok-1
3765: PPUSH
3766: CALL_OW 88
// Say ( Gnyevko , D4-Gny-1a ) ;
3770: LD_EXP 30
3774: PPUSH
3775: LD_STRING D4-Gny-1a
3777: PPUSH
3778: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3782: LD_EXP 30
3786: PPUSH
3787: LD_STRING D4-Gny-2
3789: PPUSH
3790: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3794: LD_EXP 23
3798: PPUSH
3799: LD_STRING D4-Pok-3
3801: PPUSH
3802: CALL_OW 88
// RemoveSeeing ( 76 , 56 , 3 ) ;
3806: LD_INT 76
3808: PPUSH
3809: LD_INT 56
3811: PPUSH
3812: LD_INT 3
3814: PPUSH
3815: CALL_OW 331
// CenterNowOnUnits ( Burlak ) ;
3819: LD_EXP 22
3823: PPUSH
3824: CALL_OW 87
// InGameOff ;
3828: CALL_OW 9
// ComFree ( Burlak ) ;
3832: LD_EXP 22
3836: PPUSH
3837: CALL_OW 139
// end ;
3841: LD_VAR 0 1
3845: RET
// every 0 0$2 trigger UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_see , 3 ] ) do
3846: LD_EXP 24
3850: PUSH
3851: LD_EXP 25
3855: PUSH
3856: LD_EXP 26
3860: PUSH
3861: LD_EXP 27
3865: PUSH
3866: LD_EXP 28
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: PPUSH
3878: LD_INT 101
3880: PUSH
3881: LD_INT 3
3883: PUSH
3884: EMPTY
3885: LIST
3886: LIST
3887: PPUSH
3888: CALL_OW 72
3892: IFFALSE 5506
3894: GO 3896
3896: DISABLE
// begin if hasGnyevko then
3897: LD_EXP 4
3901: IFFALSE 3981
// begin if GetDistUnits ( Burlak , Gnyevko ) > 4 and See ( 6 , Gnyevko ) and not See ( 6 , Burlak ) then
3903: LD_EXP 22
3907: PPUSH
3908: LD_EXP 30
3912: PPUSH
3913: CALL_OW 296
3917: PUSH
3918: LD_INT 4
3920: GREATER
3921: IFFALSE 3937
3923: PUSH
3924: LD_INT 6
3926: PPUSH
3927: LD_EXP 30
3931: PPUSH
3932: CALL_OW 292
3936: AND
3937: IFFALSE 3954
3939: PUSH
3940: LD_INT 6
3942: PPUSH
3943: LD_EXP 22
3947: PPUSH
3948: CALL_OW 292
3952: NOT
3953: AND
3954: IFFALSE 3981
// begin GnyevkoPokryshkinScene ;
3956: CALL 3682 0 0
// repeat wait ( 0 0$1 ) ;
3960: LD_INT 35
3962: PPUSH
3963: CALL_OW 67
// until See ( 6 , Burlak ) ;
3967: LD_INT 6
3969: PPUSH
3970: LD_EXP 22
3974: PPUSH
3975: CALL_OW 292
3979: IFFALSE 3960
// end ; end ; joinedToBelkov := true ;
3981: LD_ADDR_EXP 3
3985: PUSH
3986: LD_INT 1
3988: ST_TO_ADDR
// Video ( true ) ;
3989: LD_INT 1
3991: PPUSH
3992: CALL 48569 0 1
// ChangeSideFog ( 6 , 3 ) ;
3996: LD_INT 6
3998: PPUSH
3999: LD_INT 3
4001: PPUSH
4002: CALL_OW 343
// PlaceSeeing ( 76 , 56 , 3 , 12 ) ;
4006: LD_INT 76
4008: PPUSH
4009: LD_INT 56
4011: PPUSH
4012: LD_INT 3
4014: PPUSH
4015: LD_INT 12
4017: PPUSH
4018: CALL_OW 330
// CenterOnUnits ( Pokryshkin ) ;
4022: LD_EXP 23
4026: PPUSH
4027: CALL_OW 85
// ComMoveUnit ( Pokryshkin , Burlak ) ;
4031: LD_EXP 23
4035: PPUSH
4036: LD_EXP 22
4040: PPUSH
4041: CALL_OW 112
// Say ( Pokryshkin , D4-Pok-1 ) ;
4045: LD_EXP 23
4049: PPUSH
4050: LD_STRING D4-Pok-1
4052: PPUSH
4053: CALL_OW 88
// if gnyevkoMeetPokryshkin then
4057: LD_EXP 11
4061: IFFALSE 4077
// Say ( Gnyevko , D4-Gny-3 ) else
4063: LD_EXP 30
4067: PPUSH
4068: LD_STRING D4-Gny-3
4070: PPUSH
4071: CALL_OW 88
4075: GO 4135
// if hasGnyevko and IsOk ( Gnyevko ) then
4077: LD_EXP 4
4081: IFFALSE 4094
4083: PUSH
4084: LD_EXP 30
4088: PPUSH
4089: CALL_OW 302
4093: AND
4094: IFFALSE 4135
// begin SetSide ( Gnyevko , 6 ) ;
4096: LD_EXP 30
4100: PPUSH
4101: LD_INT 6
4103: PPUSH
4104: CALL_OW 235
// Say ( Gnyevko , D4-Gny-1 ) ;
4108: LD_EXP 30
4112: PPUSH
4113: LD_STRING D4-Gny-1
4115: PPUSH
4116: CALL_OW 88
// ComMoveXY ( Gnyevko , 83 , 60 ) ;
4120: LD_EXP 30
4124: PPUSH
4125: LD_INT 83
4127: PPUSH
4128: LD_INT 60
4130: PPUSH
4131: CALL_OW 111
// end ; ComMoveUnit ( Burlak , Pokryshkin ) ;
4135: LD_EXP 22
4139: PPUSH
4140: LD_EXP 23
4144: PPUSH
4145: CALL_OW 112
// repeat wait ( 3 ) ;
4149: LD_INT 3
4151: PPUSH
4152: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 5 ;
4156: LD_EXP 22
4160: PPUSH
4161: LD_EXP 23
4165: PPUSH
4166: CALL_OW 296
4170: PUSH
4171: LD_INT 5
4173: LESS
4174: IFFALSE 4149
// ComTurnUnit ( Pokryshkin , Burlak ) ;
4176: LD_EXP 23
4180: PPUSH
4181: LD_EXP 22
4185: PPUSH
4186: CALL_OW 119
// ComTurnUnit ( Burlak , Pokryshkin ) ;
4190: LD_EXP 22
4194: PPUSH
4195: LD_EXP 23
4199: PPUSH
4200: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
4204: LD_EXP 22
4208: PPUSH
4209: LD_STRING D4-Bur-3
4211: PPUSH
4212: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
4216: LD_EXP 23
4220: PPUSH
4221: LD_STRING D4-Pok-4
4223: PPUSH
4224: CALL_OW 88
// PlaceUnitXY ( Brown , 31 , 51 , true ) ;
4228: LD_EXP 32
4232: PPUSH
4233: LD_INT 31
4235: PPUSH
4236: LD_INT 51
4238: PPUSH
4239: LD_INT 1
4241: PPUSH
4242: CALL_OW 48
// wait ( 0 0$2 ) ;
4246: LD_INT 70
4248: PPUSH
4249: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
4253: LD_EXP 22
4257: PPUSH
4258: LD_STRING D4-Bur-4
4260: PPUSH
4261: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
4265: LD_EXP 23
4269: PPUSH
4270: LD_STRING D4-Pok-5
4272: PPUSH
4273: CALL_OW 88
// SayRadioNoFace ( Brown , D4-Sol1-5 ) ;
4277: LD_EXP 32
4281: PPUSH
4282: LD_STRING D4-Sol1-5
4284: PPUSH
4285: CALL_OW 586
// Say ( Pokryshkin , D4-Pok-6 ) ;
4289: LD_EXP 23
4293: PPUSH
4294: LD_STRING D4-Pok-6
4296: PPUSH
4297: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-6a ) ;
4301: LD_EXP 23
4305: PPUSH
4306: LD_STRING D4-Pok-6a
4308: PPUSH
4309: CALL_OW 88
// Say ( Burlak , D4-Bur-6 ) ;
4313: LD_EXP 22
4317: PPUSH
4318: LD_STRING D4-Bur-6
4320: PPUSH
4321: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
4325: LD_EXP 23
4329: PPUSH
4330: LD_STRING D4-Pok-7
4332: PPUSH
4333: CALL_OW 88
// Video ( false ) ;
4337: LD_INT 0
4339: PPUSH
4340: CALL 48569 0 1
// RemoveSeeing ( 76 , 56 , 3 ) ;
4344: LD_INT 76
4346: PPUSH
4347: LD_INT 56
4349: PPUSH
4350: LD_INT 3
4352: PPUSH
4353: CALL_OW 331
// ChangeMissionObjectives ( M2 ) ;
4357: LD_STRING M2
4359: PPUSH
4360: CALL_OW 337
// ComFree ( Burlak ) ;
4364: LD_EXP 22
4368: PPUSH
4369: CALL_OW 139
// followPokryshkin := true ;
4373: LD_ADDR_EXP 12
4377: PUSH
4378: LD_INT 1
4380: ST_TO_ADDR
// wait ( 0 0$2 ) ;
4381: LD_INT 70
4383: PPUSH
4384: CALL_OW 67
// MoveToHill ;
4388: CALL 10202 0 0
// PlaceSeeing ( 65 , 57 , 3 , - 9 ) ;
4392: LD_INT 65
4394: PPUSH
4395: LD_INT 57
4397: PPUSH
4398: LD_INT 3
4400: PPUSH
4401: LD_INT 9
4403: NEG
4404: PPUSH
4405: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
4409: LD_INT 35
4411: PPUSH
4412: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 5 ;
4416: LD_EXP 23
4420: PPUSH
4421: LD_INT 65
4423: PPUSH
4424: LD_INT 59
4426: PPUSH
4427: CALL_OW 297
4431: PUSH
4432: LD_INT 5
4434: LESS
4435: IFFALSE 4409
// followPokryshkin := false ;
4437: LD_ADDR_EXP 12
4441: PUSH
4442: LD_INT 0
4444: ST_TO_ADDR
// InGameOn ;
4445: CALL_OW 8
// CenterOnUnits ( Pokryshkin ) ;
4449: LD_EXP 23
4453: PPUSH
4454: CALL_OW 85
// ComMoveXY ( Burlak , 69 , 65 ) ;
4458: LD_EXP 22
4462: PPUSH
4463: LD_INT 69
4465: PPUSH
4466: LD_INT 65
4468: PPUSH
4469: CALL_OW 111
// ComMoveXY ( Brown , 58 , 57 ) ;
4473: LD_EXP 32
4477: PPUSH
4478: LD_INT 58
4480: PPUSH
4481: LD_INT 57
4483: PPUSH
4484: CALL_OW 111
// repeat wait ( 3 ) ;
4488: LD_INT 3
4490: PPUSH
4491: CALL_OW 67
// until GetDistUnitXY ( Brown , 58 , 57 ) < 4 ;
4495: LD_EXP 32
4499: PPUSH
4500: LD_INT 58
4502: PPUSH
4503: LD_INT 57
4505: PPUSH
4506: CALL_OW 297
4510: PUSH
4511: LD_INT 4
4513: LESS
4514: IFFALSE 4488
// SetLives ( Brown , 300 ) ;
4516: LD_EXP 32
4520: PPUSH
4521: LD_INT 300
4523: PPUSH
4524: CALL_OW 234
// Say ( Brown , D5-Sol1-1 ) ;
4528: LD_EXP 32
4532: PPUSH
4533: LD_STRING D5-Sol1-1
4535: PPUSH
4536: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4540: LD_EXP 23
4544: PPUSH
4545: LD_STRING D5-Pok-1
4547: PPUSH
4548: CALL_OW 88
// ComAttackUnit ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] , Brown ) ;
4552: LD_EXP 23
4556: PUSH
4557: LD_EXP 27
4561: PUSH
4562: LD_EXP 26
4566: PUSH
4567: LD_EXP 25
4571: PUSH
4572: LD_EXP 24
4576: PUSH
4577: LD_EXP 28
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: LIST
4586: LIST
4587: LIST
4588: LIST
4589: PPUSH
4590: LD_EXP 32
4594: PPUSH
4595: CALL_OW 115
// ForceSay ( Brown , D5-Sol1-2 ) ;
4599: LD_EXP 32
4603: PPUSH
4604: LD_STRING D5-Sol1-2
4606: PPUSH
4607: CALL_OW 91
// if not dialogue_skipped then
4611: LD_OWVAR 59
4615: NOT
4616: IFFALSE 4634
// begin wait ( 0 0$1 ) ;
4618: LD_INT 35
4620: PPUSH
4621: CALL_OW 67
// KillUnit ( Brown ) ;
4625: LD_EXP 32
4629: PPUSH
4630: CALL_OW 66
// end ; ComWalk ( [ Pokryshkin , Belkov , Balei , Jaworska , Saseda , Jaunzeme ] ) ;
4634: LD_EXP 23
4638: PUSH
4639: LD_EXP 27
4643: PUSH
4644: LD_EXP 26
4648: PUSH
4649: LD_EXP 25
4653: PUSH
4654: LD_EXP 24
4658: PUSH
4659: LD_EXP 28
4663: PUSH
4664: EMPTY
4665: LIST
4666: LIST
4667: LIST
4668: LIST
4669: LIST
4670: LIST
4671: PPUSH
4672: CALL_OW 138
// if hasGnyevko then
4676: LD_EXP 4
4680: IFFALSE 4691
// ComWalk ( Gnyevko ) ;
4682: LD_EXP 30
4686: PPUSH
4687: CALL_OW 138
// AddComMoveXY ( Pokryshkin , 60 , 56 ) ;
4691: LD_EXP 23
4695: PPUSH
4696: LD_INT 60
4698: PPUSH
4699: LD_INT 56
4701: PPUSH
4702: CALL_OW 171
// wait ( 0 0$0.5 ) ;
4706: LD_INT 18
4708: PPUSH
4709: CALL_OW 67
// AddComMoveXY ( Belkov , 61 , 59 ) ;
4713: LD_EXP 27
4717: PPUSH
4718: LD_INT 61
4720: PPUSH
4721: LD_INT 59
4723: PPUSH
4724: CALL_OW 171
// AddComTurnXY ( Pokryshkin , 58 , 57 ) ;
4728: LD_EXP 23
4732: PPUSH
4733: LD_INT 58
4735: PPUSH
4736: LD_INT 57
4738: PPUSH
4739: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4743: LD_EXP 27
4747: PPUSH
4748: LD_INT 58
4750: PPUSH
4751: LD_INT 57
4753: PPUSH
4754: CALL_OW 178
// ComMoveXY ( Burlak , 62 , 58 ) ;
4758: LD_EXP 22
4762: PPUSH
4763: LD_INT 62
4765: PPUSH
4766: LD_INT 58
4768: PPUSH
4769: CALL_OW 111
// AddComTurnXY ( Burlak , 61 , 58 ) ;
4773: LD_EXP 22
4777: PPUSH
4778: LD_INT 61
4780: PPUSH
4781: LD_INT 58
4783: PPUSH
4784: CALL_OW 178
// AddComTurnXY ( Belkov , 58 , 57 ) ;
4788: LD_EXP 27
4792: PPUSH
4793: LD_INT 58
4795: PPUSH
4796: LD_INT 57
4798: PPUSH
4799: CALL_OW 178
// Say ( Pokryshkin , D4-Pok-2 ) ;
4803: LD_EXP 23
4807: PPUSH
4808: LD_STRING D4-Pok-2
4810: PPUSH
4811: CALL_OW 88
// wait ( 0 0$0.3 ) ;
4815: LD_INT 10
4817: PPUSH
4818: CALL_OW 67
// Say ( Burlak , D5-Bur-2 ) ;
4822: LD_EXP 22
4826: PPUSH
4827: LD_STRING D5-Bur-2
4829: PPUSH
4830: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4834: LD_EXP 23
4838: PPUSH
4839: LD_STRING D5-Pok-2
4841: PPUSH
4842: CALL_OW 88
// ComTurnUnit ( Belkov , Burlak ) ;
4846: LD_EXP 27
4850: PPUSH
4851: LD_EXP 22
4855: PPUSH
4856: CALL_OW 119
// Say ( Belkov , D5-Bel-2 ) ;
4860: LD_EXP 27
4864: PPUSH
4865: LD_STRING D5-Bel-2
4867: PPUSH
4868: CALL_OW 88
// ComTurnUnit ( Pokryshkin , Belkov ) ;
4872: LD_EXP 23
4876: PPUSH
4877: LD_EXP 27
4881: PPUSH
4882: CALL_OW 119
// Say ( Pokryshkin , D5-Pok-3 ) ;
4886: LD_EXP 23
4890: PPUSH
4891: LD_STRING D5-Pok-3
4893: PPUSH
4894: CALL_OW 88
// if hasGnyevko then
4898: LD_EXP 4
4902: IFFALSE 4930
// begin ComTurnUnit ( Gnyevko , Burlak ) ;
4904: LD_EXP 30
4908: PPUSH
4909: LD_EXP 22
4913: PPUSH
4914: CALL_OW 119
// Say ( Gnyevko , D5-Gny-3 ) ;
4918: LD_EXP 30
4922: PPUSH
4923: LD_STRING D5-Gny-3
4925: PPUSH
4926: CALL_OW 88
// end ; Say ( Burlak , D5-Bur-3 ) ;
4930: LD_EXP 22
4934: PPUSH
4935: LD_STRING D5-Bur-3
4937: PPUSH
4938: CALL_OW 88
// wait ( 0 0$2 ) ;
4942: LD_INT 70
4944: PPUSH
4945: CALL_OW 67
// ComMoveXY ( Pokryshkin , 78 , 57 ) ;
4949: LD_EXP 23
4953: PPUSH
4954: LD_INT 78
4956: PPUSH
4957: LD_INT 57
4959: PPUSH
4960: CALL_OW 111
// Say ( Pokryshkin , D6-Pok-1 ) ;
4964: LD_EXP 23
4968: PPUSH
4969: LD_STRING D6-Pok-1
4971: PPUSH
4972: CALL_OW 88
// ComMoveXY ( Burlak , 75 , 56 ) ;
4976: LD_EXP 22
4980: PPUSH
4981: LD_INT 75
4983: PPUSH
4984: LD_INT 56
4986: PPUSH
4987: CALL_OW 111
// AddComMoveXY ( Burlak , 83 , 62 ) ;
4991: LD_EXP 22
4995: PPUSH
4996: LD_INT 83
4998: PPUSH
4999: LD_INT 62
5001: PPUSH
5002: CALL_OW 171
// ComMoveXY ( Belkov , 80 , 64 ) ;
5006: LD_EXP 27
5010: PPUSH
5011: LD_INT 80
5013: PPUSH
5014: LD_INT 64
5016: PPUSH
5017: CALL_OW 111
// ComMoveXY ( Jaworska , 83 , 67 ) ;
5021: LD_EXP 25
5025: PPUSH
5026: LD_INT 83
5028: PPUSH
5029: LD_INT 67
5031: PPUSH
5032: CALL_OW 111
// ComMoveXY ( Balei , 81 , 52 ) ;
5036: LD_EXP 26
5040: PPUSH
5041: LD_INT 81
5043: PPUSH
5044: LD_INT 52
5046: PPUSH
5047: CALL_OW 111
// ComMoveXY ( Saseda , 78 , 54 ) ;
5051: LD_EXP 24
5055: PPUSH
5056: LD_INT 78
5058: PPUSH
5059: LD_INT 54
5061: PPUSH
5062: CALL_OW 111
// ComMoveXY ( Jaunzeme , 75 , 62 ) ;
5066: LD_EXP 28
5070: PPUSH
5071: LD_INT 75
5073: PPUSH
5074: LD_INT 62
5076: PPUSH
5077: CALL_OW 111
// if hasGnyevko then
5081: LD_EXP 4
5085: IFFALSE 5116
// begin ComMoveXY ( Gnyevko , 77 , 60 ) ;
5087: LD_EXP 30
5091: PPUSH
5092: LD_INT 77
5094: PPUSH
5095: LD_INT 60
5097: PPUSH
5098: CALL_OW 111
// AddComMoveUnit ( Gnyevko , Burlak ) ;
5102: LD_EXP 30
5106: PPUSH
5107: LD_EXP 22
5111: PPUSH
5112: CALL_OW 172
// end ; Say ( Burlak , D6-Bur-1 ) ;
5116: LD_EXP 22
5120: PPUSH
5121: LD_STRING D6-Bur-1
5123: PPUSH
5124: CALL_OW 88
// RemoveSeeing ( 65 , 57 , 3 ) ;
5128: LD_INT 65
5130: PPUSH
5131: LD_INT 57
5133: PPUSH
5134: LD_INT 3
5136: PPUSH
5137: CALL_OW 331
// AddComMoveXY ( Pokryshkin , 87 , 66 ) ;
5141: LD_EXP 23
5145: PPUSH
5146: LD_INT 87
5148: PPUSH
5149: LD_INT 66
5151: PPUSH
5152: CALL_OW 171
// AddComMoveXY ( Balei , 92 , 60 ) ;
5156: LD_EXP 26
5160: PPUSH
5161: LD_INT 92
5163: PPUSH
5164: LD_INT 60
5166: PPUSH
5167: CALL_OW 171
// AddComMoveXY ( Saseda , 90 , 64 ) ;
5171: LD_EXP 24
5175: PPUSH
5176: LD_INT 90
5178: PPUSH
5179: LD_INT 64
5181: PPUSH
5182: CALL_OW 171
// AddComMoveXY ( Jaworska , 87 , 73 ) ;
5186: LD_EXP 25
5190: PPUSH
5191: LD_INT 87
5193: PPUSH
5194: LD_INT 73
5196: PPUSH
5197: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 87 , 69 ) ;
5201: LD_EXP 28
5205: PPUSH
5206: LD_INT 87
5208: PPUSH
5209: LD_INT 69
5211: PPUSH
5212: CALL_OW 171
// AddComMoveXY ( Belkov , 90 , 71 ) ;
5216: LD_EXP 27
5220: PPUSH
5221: LD_INT 90
5223: PPUSH
5224: LD_INT 71
5226: PPUSH
5227: CALL_OW 171
// if not dialogue_skipped then
5231: LD_OWVAR 59
5235: NOT
5236: IFFALSE 5248
// CenterOnXY ( 84 , 64 ) ;
5238: LD_INT 84
5240: PPUSH
5241: LD_INT 64
5243: PPUSH
5244: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-2 ) ;
5248: LD_EXP 23
5252: PPUSH
5253: LD_STRING D6-Pok-2
5255: PPUSH
5256: CALL_OW 88
// AddComMoveXY ( Jaworska , 113 , 104 ) ;
5260: LD_EXP 25
5264: PPUSH
5265: LD_INT 113
5267: PPUSH
5268: LD_INT 104
5270: PPUSH
5271: CALL_OW 171
// AddComMoveXY ( Jaunzeme , 107 , 106 ) ;
5275: LD_EXP 28
5279: PPUSH
5280: LD_INT 107
5282: PPUSH
5283: LD_INT 106
5285: PPUSH
5286: CALL_OW 171
// AddComMoveXY ( Saseda , 125 , 97 ) ;
5290: LD_EXP 24
5294: PPUSH
5295: LD_INT 125
5297: PPUSH
5298: LD_INT 97
5300: PPUSH
5301: CALL_OW 171
// AddComMoveXY ( Balei , 124 , 101 ) ;
5305: LD_EXP 26
5309: PPUSH
5310: LD_INT 124
5312: PPUSH
5313: LD_INT 101
5315: PPUSH
5316: CALL_OW 171
// AddComMoveXY ( Belkov , 119 , 101 ) ;
5320: LD_EXP 27
5324: PPUSH
5325: LD_INT 119
5327: PPUSH
5328: LD_INT 101
5330: PPUSH
5331: CALL_OW 171
// ComMoveUnit ( Burlak , Pokryshkin ) ;
5335: LD_EXP 22
5339: PPUSH
5340: LD_EXP 23
5344: PPUSH
5345: CALL_OW 112
// Say ( Belkov , D6-Bel-2 ) ;
5349: LD_EXP 27
5353: PPUSH
5354: LD_STRING D6-Bel-2
5356: PPUSH
5357: CALL_OW 88
// AddComMoveXY ( Pokryshkin , 119 , 93 ) ;
5361: LD_EXP 23
5365: PPUSH
5366: LD_INT 119
5368: PPUSH
5369: LD_INT 93
5371: PPUSH
5372: CALL_OW 171
// Say ( Burlak , D6-Bur-2 ) ;
5376: LD_EXP 22
5380: PPUSH
5381: LD_STRING D6-Bur-2
5383: PPUSH
5384: CALL_OW 88
// if not dialogue_skipped then
5388: LD_OWVAR 59
5392: NOT
5393: IFFALSE 5405
// CenterOnXY ( 105 , 82 ) ;
5395: LD_INT 105
5397: PPUSH
5398: LD_INT 82
5400: PPUSH
5401: CALL_OW 84
// Say ( Pokryshkin , D6-Pok-3 ) ;
5405: LD_EXP 23
5409: PPUSH
5410: LD_STRING D6-Pok-3
5412: PPUSH
5413: CALL_OW 88
// ComHold ( Pokryshkin ) ;
5417: LD_EXP 23
5421: PPUSH
5422: CALL_OW 140
// SayRadio ( Kurin , D6-Kur-3 ) ;
5426: LD_EXP 29
5430: PPUSH
5431: LD_STRING D6-Kur-3
5433: PPUSH
5434: CALL_OW 94
// ComHold ( [ Jaworska , Belkov , Saseda , Burlak , Balei , Jaunzeme , Gnyevko ] ) ;
5438: LD_EXP 25
5442: PUSH
5443: LD_EXP 27
5447: PUSH
5448: LD_EXP 24
5452: PUSH
5453: LD_EXP 22
5457: PUSH
5458: LD_EXP 26
5462: PUSH
5463: LD_EXP 28
5467: PUSH
5468: LD_EXP 30
5472: PUSH
5473: EMPTY
5474: LIST
5475: LIST
5476: LIST
5477: LIST
5478: LIST
5479: LIST
5480: LIST
5481: PPUSH
5482: CALL_OW 140
// Say ( Pokryshkin , D6-Pok-4 ) ;
5486: LD_EXP 23
5490: PPUSH
5491: LD_STRING D6-Pok-4
5493: PPUSH
5494: CALL_OW 88
// InGameOff ;
5498: CALL_OW 9
// AttackOnTimsBase ;
5502: CALL 5507 0 0
// end ;
5506: END
// function AttackOnTimsBase ; var i , tmp ; begin
5507: LD_INT 0
5509: PPUSH
5510: PPUSH
5511: PPUSH
// SetAttitude ( 6 , 1 , att_enemy , true ) ;
5512: LD_INT 6
5514: PPUSH
5515: LD_INT 1
5517: PPUSH
5518: LD_INT 2
5520: PPUSH
5521: LD_INT 1
5523: PPUSH
5524: CALL_OW 80
// SetAttitude ( 3 , 1 , att_enemy , true ) ;
5528: LD_INT 3
5530: PPUSH
5531: LD_INT 1
5533: PPUSH
5534: LD_INT 2
5536: PPUSH
5537: LD_INT 1
5539: PPUSH
5540: CALL_OW 80
// tmp := FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) diff Pokryshkin ;
5544: LD_ADDR_VAR 0 3
5548: PUSH
5549: LD_INT 22
5551: PUSH
5552: LD_INT 6
5554: PUSH
5555: EMPTY
5556: LIST
5557: LIST
5558: PUSH
5559: LD_INT 21
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: EMPTY
5570: LIST
5571: LIST
5572: PPUSH
5573: CALL_OW 69
5577: PUSH
5578: LD_EXP 23
5582: DIFF
5583: ST_TO_ADDR
// for i in tmp do
5584: LD_ADDR_VAR 0 2
5588: PUSH
5589: LD_VAR 0 3
5593: PUSH
5594: FOR_IN
5595: IFFALSE 5611
// DoNotAttack ( 1 , i ) ;
5597: LD_INT 1
5599: PPUSH
5600: LD_VAR 0 2
5604: PPUSH
5605: CALL_OW 471
5609: GO 5594
5611: POP
5612: POP
// ComMoveXY ( Pokryshkin , 65 , 40 ) ;
5613: LD_EXP 23
5617: PPUSH
5618: LD_INT 65
5620: PPUSH
5621: LD_INT 40
5623: PPUSH
5624: CALL_OW 111
// ComMoveXY ( tmp , 75 , 51 ) ;
5628: LD_VAR 0 3
5632: PPUSH
5633: LD_INT 75
5635: PPUSH
5636: LD_INT 51
5638: PPUSH
5639: CALL_OW 111
// Say ( Belkov , D6-Bel-4 ) ;
5643: LD_EXP 27
5647: PPUSH
5648: LD_STRING D6-Bel-4
5650: PPUSH
5651: CALL_OW 88
// AddComAgressiveMove ( Pokryshkin , 57 , 30 ) ;
5655: LD_EXP 23
5659: PPUSH
5660: LD_INT 57
5662: PPUSH
5663: LD_INT 30
5665: PPUSH
5666: CALL_OW 174
// AddComAgressiveMove ( tmp , 60 , 35 ) ;
5670: LD_VAR 0 3
5674: PPUSH
5675: LD_INT 60
5677: PPUSH
5678: LD_INT 35
5680: PPUSH
5681: CALL_OW 174
// repeat wait ( 0 0$1 ) ;
5685: LD_INT 35
5687: PPUSH
5688: CALL_OW 67
// until GetDistUnitXY ( Pokryshkin , 65 , 40 ) < 4 ;
5692: LD_EXP 23
5696: PPUSH
5697: LD_INT 65
5699: PPUSH
5700: LD_INT 40
5702: PPUSH
5703: CALL_OW 297
5707: PUSH
5708: LD_INT 4
5710: LESS
5711: IFFALSE 5685
// Say ( Pokryshkin , D7-Pok-1 ) ;
5713: LD_EXP 23
5717: PPUSH
5718: LD_STRING D7-Pok-1
5720: PPUSH
5721: CALL_OW 88
// wait ( 0 0$0.3 ) ;
5725: LD_INT 10
5727: PPUSH
5728: CALL_OW 67
// async ;
5732: ASYNC
// Say ( Holland , D7-FSol1-1 ) ;
5733: LD_EXP 34
5737: PPUSH
5738: LD_STRING D7-FSol1-1
5740: PPUSH
5741: CALL_OW 88
// sync ;
5745: SYNC
// repeat wait ( 0 0$1 ) ;
5746: LD_INT 35
5748: PPUSH
5749: CALL_OW 67
// until not IsOk ( Pokryshkin ) ;
5753: LD_EXP 23
5757: PPUSH
5758: CALL_OW 302
5762: NOT
5763: IFFALSE 5746
// Say ( Belkov , D7a-Bel-1 ) ;
5765: LD_EXP 27
5769: PPUSH
5770: LD_STRING D7a-Bel-1
5772: PPUSH
5773: CALL_OW 88
// ComMoveXY ( tmp , 85 , 63 ) ;
5777: LD_VAR 0 3
5781: PPUSH
5782: LD_INT 85
5784: PPUSH
5785: LD_INT 63
5787: PPUSH
5788: CALL_OW 111
// Say ( Saseda , D7a-RSol1-1 ) ;
5792: LD_EXP 24
5796: PPUSH
5797: LD_STRING D7a-RSol1-1
5799: PPUSH
5800: CALL_OW 88
// Say ( Holland , D7a-FSol1-1 ) ;
5804: LD_EXP 34
5808: PPUSH
5809: LD_STRING D7a-FSol1-1
5811: PPUSH
5812: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
5816: LD_INT 35
5818: PPUSH
5819: CALL_OW 67
// until GetDistUnitXY ( Belkov , 85 , 63 ) < 8 ;
5823: LD_EXP 27
5827: PPUSH
5828: LD_INT 85
5830: PPUSH
5831: LD_INT 63
5833: PPUSH
5834: CALL_OW 297
5838: PUSH
5839: LD_INT 8
5841: LESS
5842: IFFALSE 5816
// for i in tmp do
5844: LD_ADDR_VAR 0 2
5848: PUSH
5849: LD_VAR 0 3
5853: PUSH
5854: FOR_IN
5855: IFFALSE 5871
// NormalAttack ( 1 , i ) ;
5857: LD_INT 1
5859: PPUSH
5860: LD_VAR 0 2
5864: PPUSH
5865: CALL_OW 472
5869: GO 5854
5871: POP
5872: POP
// InGameOn ;
5873: CALL_OW 8
// ComHold ( Burlak ) ;
5877: LD_EXP 22
5881: PPUSH
5882: CALL_OW 140
// CenterNowOnUnits ( Belkov ) ;
5886: LD_EXP 27
5890: PPUSH
5891: CALL_OW 87
// Say ( Belkov , D7b-Bel-1 ) ;
5895: LD_EXP 27
5899: PPUSH
5900: LD_STRING D7b-Bel-1
5902: PPUSH
5903: CALL_OW 88
// ComTurnUnit ( Belkov , Jaworska ) ;
5907: LD_EXP 27
5911: PPUSH
5912: LD_EXP 25
5916: PPUSH
5917: CALL_OW 119
// for i in tmp diff Belkov do
5921: LD_ADDR_VAR 0 2
5925: PUSH
5926: LD_VAR 0 3
5930: PUSH
5931: LD_EXP 27
5935: DIFF
5936: PUSH
5937: FOR_IN
5938: IFFALSE 5956
// ComTurnUnit ( i , Belkov ) ;
5940: LD_VAR 0 2
5944: PPUSH
5945: LD_EXP 27
5949: PPUSH
5950: CALL_OW 119
5954: GO 5937
5956: POP
5957: POP
// Say ( Jaworska , D7b-FSol1-1 ) ;
5958: LD_EXP 25
5962: PPUSH
5963: LD_STRING D7b-FSol1-1
5965: PPUSH
5966: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5970: LD_EXP 27
5974: PPUSH
5975: LD_STRING D7b-Bel-2
5977: PPUSH
5978: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5982: LD_EXP 24
5986: PPUSH
5987: LD_STRING D7b-RSol1-2
5989: PPUSH
5990: CALL_OW 88
// if GetDistUnits ( Belkov , Burlak ) > 10 then
5994: LD_EXP 27
5998: PPUSH
5999: LD_EXP 22
6003: PPUSH
6004: CALL_OW 296
6008: PUSH
6009: LD_INT 10
6011: GREATER
6012: IFFALSE 6110
// begin Say ( Belkov , D7b-Bel-3 ) ;
6014: LD_EXP 27
6018: PPUSH
6019: LD_STRING D7b-Bel-3
6021: PPUSH
6022: CALL_OW 88
// InGameOff ;
6026: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
6030: LD_INT 35
6032: PPUSH
6033: CALL_OW 67
// until GetDistUnits ( Burlak , Belkov ) <= 10 ;
6037: LD_EXP 22
6041: PPUSH
6042: LD_EXP 27
6046: PPUSH
6047: CALL_OW 296
6051: PUSH
6052: LD_INT 10
6054: LESSEQUAL
6055: IFFALSE 6030
// InGameOn ;
6057: CALL_OW 8
// CenterOnUnits ( Burlak ) ;
6061: LD_EXP 22
6065: PPUSH
6066: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
6070: LD_EXP 22
6074: PPUSH
6075: LD_EXP 27
6079: PPUSH
6080: CALL_OW 112
// ComTurnUnit ( Belkov , Burlak ) ;
6084: LD_EXP 27
6088: PPUSH
6089: LD_EXP 22
6093: PPUSH
6094: CALL_OW 119
// Say ( Belkov , D7b-Bel-3a ) ;
6098: LD_EXP 27
6102: PPUSH
6103: LD_STRING D7b-Bel-3a
6105: PPUSH
6106: CALL_OW 88
// end ; CenterOnUnits ( Burlak ) ;
6110: LD_EXP 22
6114: PPUSH
6115: CALL_OW 85
// ComMoveUnit ( Burlak , Belkov ) ;
6119: LD_EXP 22
6123: PPUSH
6124: LD_EXP 27
6128: PPUSH
6129: CALL_OW 112
// Say ( Burlak , D7b-Bur-3 ) ;
6133: LD_EXP 22
6137: PPUSH
6138: LD_STRING D7b-Bur-3
6140: PPUSH
6141: CALL_OW 88
// ComTurnUnit ( Burlak , Belkov ) ;
6145: LD_EXP 22
6149: PPUSH
6150: LD_EXP 27
6154: PPUSH
6155: CALL_OW 119
// ComTurnUnit ( tmp , Burlak ) ;
6159: LD_VAR 0 3
6163: PPUSH
6164: LD_EXP 22
6168: PPUSH
6169: CALL_OW 119
// Say ( Belkov , D7b-Bel-4 ) ;
6173: LD_EXP 27
6177: PPUSH
6178: LD_STRING D7b-Bel-4
6180: PPUSH
6181: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
6185: LD_EXP 22
6189: PPUSH
6190: LD_STRING D7b-Bur-4
6192: PPUSH
6193: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
6197: LD_EXP 27
6201: PPUSH
6202: LD_STRING D7b-Bel-5
6204: PPUSH
6205: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
6209: LD_EXP 25
6213: PPUSH
6214: LD_STRING D7b-FSol1-5
6216: PPUSH
6217: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
6221: LD_EXP 27
6225: PPUSH
6226: LD_STRING D7b-Bel-6
6228: PPUSH
6229: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
6233: LD_EXP 22
6237: PPUSH
6238: LD_STRING D7b-Bur-6
6240: PPUSH
6241: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
6245: LD_EXP 24
6249: PPUSH
6250: LD_STRING D7b-RSol1-6
6252: PPUSH
6253: CALL_OW 88
// InGameOff ;
6257: CALL_OW 9
// for i in tmp do
6261: LD_ADDR_VAR 0 2
6265: PUSH
6266: LD_VAR 0 3
6270: PUSH
6271: FOR_IN
6272: IFFALSE 6288
// SetSide ( i , 3 ) ;
6274: LD_VAR 0 2
6278: PPUSH
6279: LD_INT 3
6281: PPUSH
6282: CALL_OW 235
6286: GO 6271
6288: POP
6289: POP
// ChangeMissionObjectives ( M3 ) ;
6290: LD_STRING M3
6292: PPUSH
6293: CALL_OW 337
// burlakAsCommander := true ;
6297: LD_ADDR_EXP 14
6301: PUSH
6302: LD_INT 1
6304: ST_TO_ADDR
// end ;
6305: LD_VAR 0 1
6309: RET
// every 0 0$1 trigger followPokryshkin and GetDistUnits ( Pokryshkin , Burlak ) > 10 do
6310: LD_EXP 12
6314: IFFALSE 6336
6316: PUSH
6317: LD_EXP 23
6321: PPUSH
6322: LD_EXP 22
6326: PPUSH
6327: CALL_OW 296
6331: PUSH
6332: LD_INT 10
6334: GREATER
6335: AND
6336: IFFALSE 6482
6338: GO 6340
6340: DISABLE
// begin InGameOn ;
6341: CALL_OW 8
// ComTurnUnit ( Pokryshkin , Burlak ) ;
6345: LD_EXP 23
6349: PPUSH
6350: LD_EXP 22
6354: PPUSH
6355: CALL_OW 119
// ComHold ( Burlak ) ;
6359: LD_EXP 22
6363: PPUSH
6364: CALL_OW 140
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
6368: LD_EXP 23
6372: PPUSH
6373: LD_STRING DSplit-Pok-1
6375: PPUSH
6376: CALL_OW 88
// ComMoveUnit ( Burlak , Pokryshkin ) ;
6380: LD_EXP 22
6384: PPUSH
6385: LD_EXP 23
6389: PPUSH
6390: CALL_OW 112
// Say ( Burlak , DSplit-Bur-1 ) ;
6394: LD_EXP 22
6398: PPUSH
6399: LD_STRING DSplit-Bur-1
6401: PPUSH
6402: CALL_OW 88
// repeat wait ( 3 ) ;
6406: LD_INT 3
6408: PPUSH
6409: CALL_OW 67
// until GetDistUnits ( Pokryshkin , Burlak ) < 6 ;
6413: LD_EXP 23
6417: PPUSH
6418: LD_EXP 22
6422: PPUSH
6423: CALL_OW 296
6427: PUSH
6428: LD_INT 6
6430: LESS
6431: IFFALSE 6406
// InGameOff ;
6433: CALL_OW 9
// ComFree ( Burlak ) ;
6437: LD_EXP 22
6441: PPUSH
6442: CALL_OW 139
// if IsOk ( Brown ) then
6446: LD_EXP 32
6450: PPUSH
6451: CALL_OW 302
6455: IFFALSE 6481
// begin ComMoveXY ( Pokryshkin , 65 , 59 ) ;
6457: LD_EXP 23
6461: PPUSH
6462: LD_INT 65
6464: PPUSH
6465: LD_INT 59
6467: PPUSH
6468: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
6472: LD_EXP 23
6476: PPUSH
6477: CALL_OW 197
// end ; enable ;
6481: ENABLE
// end ;
6482: END
// every 0 0$1 trigger attackedAllied and IsOk ( Pokryshkin ) and joinedToBelkov do
6483: LD_EXP 13
6487: IFFALSE 6500
6489: PUSH
6490: LD_EXP 23
6494: PPUSH
6495: CALL_OW 302
6499: AND
6500: IFFALSE 6508
6502: PUSH
6503: LD_EXP 3
6507: AND
6508: IFFALSE 6540
6510: GO 6512
6512: DISABLE
// begin DialogueOn ;
6513: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
6517: LD_EXP 23
6521: PPUSH
6522: LD_STRING DAttack-Pok-1
6524: PPUSH
6525: CALL_OW 88
// DialogueOff ;
6529: CALL_OW 7
// YouLost ( Ally ) ;
6533: LD_STRING Ally
6535: PPUSH
6536: CALL_OW 104
// end ;
6540: END
// every 0 0$2 trigger FilterUnitsInArea ( backwardEntranceArea , [ [ f_side , 3 ] , [ f_class , class_soldier ] ] ) and IsOk ( usBun1 ) do
6541: LD_INT 18
6543: PPUSH
6544: LD_INT 22
6546: PUSH
6547: LD_INT 3
6549: PUSH
6550: EMPTY
6551: LIST
6552: LIST
6553: PUSH
6554: LD_INT 25
6556: PUSH
6557: LD_INT 1
6559: PUSH
6560: EMPTY
6561: LIST
6562: LIST
6563: PUSH
6564: EMPTY
6565: LIST
6566: LIST
6567: PPUSH
6568: CALL_OW 70
6572: IFFALSE 6583
6574: PUSH
6575: LD_INT 3
6577: PPUSH
6578: CALL_OW 302
6582: AND
6583: IFFALSE 6595
6585: GO 6587
6587: DISABLE
// SetAchievement ( ACH_BACKENTRANCE ) ;
6588: LD_STRING ACH_BACKENTRANCE
6590: PPUSH
6591: CALL_OW 543
6595: END
// every 0 0$1 trigger burlakAsCommander do
6596: LD_EXP 14
6600: IFFALSE 6764
6602: GO 6604
6604: DISABLE
// begin if Difficulty > 1 then
6605: LD_OWVAR 67
6609: PUSH
6610: LD_INT 1
6612: GREATER
6613: IFFALSE 6625
// SetLives ( usBun1 , 1000 ) ;
6615: LD_INT 3
6617: PPUSH
6618: LD_INT 1000
6620: PPUSH
6621: CALL_OW 234
// repeat wait ( 0 0$1 ) ;
6625: LD_INT 35
6627: PPUSH
6628: CALL_OW 67
// until SeeUnits ( 1 , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
6632: LD_INT 1
6634: PPUSH
6635: LD_INT 22
6637: PUSH
6638: LD_INT 3
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: PUSH
6645: LD_INT 21
6647: PUSH
6648: LD_INT 1
6650: PUSH
6651: EMPTY
6652: LIST
6653: LIST
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PPUSH
6659: CALL_OW 69
6663: PPUSH
6664: CALL 52042 0 2
6668: IFFALSE 6625
// Say ( Holland , D8-FSol1-1 ) ;
6670: LD_EXP 34
6674: PPUSH
6675: LD_STRING D8-FSol1-1
6677: PPUSH
6678: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
6682: LD_EXP 33
6686: PPUSH
6687: LD_STRING D8-Glad-1
6689: PPUSH
6690: CALL_OW 88
// activeAmericanScript := true ;
6694: LD_ADDR_EXP 15
6698: PUSH
6699: LD_INT 1
6701: ST_TO_ADDR
// Say ( Burlak , D8-Bur-1 ) ;
6702: LD_EXP 22
6706: PPUSH
6707: LD_STRING D8-Bur-1
6709: PPUSH
6710: CALL_OW 88
// repeat wait ( 0 0$2 ) ;
6714: LD_INT 70
6716: PPUSH
6717: CALL_OW 67
// if not IsOk ( usBun1 ) then
6721: LD_INT 3
6723: PPUSH
6724: CALL_OW 302
6728: NOT
6729: IFFALSE 6733
// exit ;
6731: GO 6764
// until FilterUnitsInArea ( behindTreesArea , [ f_side , 3 ] ) ;
6733: LD_INT 14
6735: PPUSH
6736: LD_INT 22
6738: PUSH
6739: LD_INT 3
6741: PUSH
6742: EMPTY
6743: LIST
6744: LIST
6745: PPUSH
6746: CALL_OW 70
6750: IFFALSE 6714
// Say ( Holland , D8-FSol1-2 ) ;
6752: LD_EXP 34
6756: PPUSH
6757: LD_STRING D8-FSol1-2
6759: PPUSH
6760: CALL_OW 88
// end ;
6764: END
// every 0 0$1 trigger IsInArea ( Gladstone , escapeArea ) or IsAt ( Gladstone , 71 , 1 ) do
6765: LD_EXP 33
6769: PPUSH
6770: LD_INT 15
6772: PPUSH
6773: CALL_OW 308
6777: IFTRUE 6796
6779: PUSH
6780: LD_EXP 33
6784: PPUSH
6785: LD_INT 71
6787: PPUSH
6788: LD_INT 1
6790: PPUSH
6791: CALL_OW 307
6795: OR
6796: IFFALSE 6828
6798: GO 6800
6800: DISABLE
// begin RemoveUnit ( Gladstone ) ;
6801: LD_EXP 33
6805: PPUSH
6806: CALL_OW 64
// gladstoneEscaped := true ;
6810: LD_ADDR_EXP 16
6814: PUSH
6815: LD_INT 1
6817: ST_TO_ADDR
// SaveVariable ( 1 , 01_GladstoneEscaped ) ;
6818: LD_INT 1
6820: PPUSH
6821: LD_STRING 01_GladstoneEscaped
6823: PPUSH
6824: CALL_OW 39
// end ;
6828: END
// every 0 0$1 trigger IsInArea ( Holland , escapeArea ) or IsAt ( Holland , 72 , 1 ) do
6829: LD_EXP 34
6833: PPUSH
6834: LD_INT 15
6836: PPUSH
6837: CALL_OW 308
6841: IFTRUE 6860
6843: PUSH
6844: LD_EXP 34
6848: PPUSH
6849: LD_INT 72
6851: PPUSH
6852: LD_INT 1
6854: PPUSH
6855: CALL_OW 307
6859: OR
6860: IFFALSE 6892
6862: GO 6864
6864: DISABLE
// begin RemoveUnit ( Holland ) ;
6865: LD_EXP 34
6869: PPUSH
6870: CALL_OW 64
// hollandEscaped := true ;
6874: LD_ADDR_EXP 17
6878: PUSH
6879: LD_INT 1
6881: ST_TO_ADDR
// SaveVariable ( 1 , 01_HollandEscaped ) ;
6882: LD_INT 1
6884: PPUSH
6885: LD_STRING 01_HollandEscaped
6887: PPUSH
6888: CALL_OW 39
// end ;
6892: END
// every 0 0$1 trigger IsInArea ( Mel , escapeArea ) or IsAt ( Mel , 70 , 1 ) do
6893: LD_EXP 35
6897: PPUSH
6898: LD_INT 15
6900: PPUSH
6901: CALL_OW 308
6905: IFTRUE 6924
6907: PUSH
6908: LD_EXP 35
6912: PPUSH
6913: LD_INT 70
6915: PPUSH
6916: LD_INT 1
6918: PPUSH
6919: CALL_OW 307
6923: OR
6924: IFFALSE 6956
6926: GO 6928
6928: DISABLE
// begin RemoveUnit ( Mel ) ;
6929: LD_EXP 35
6933: PPUSH
6934: CALL_OW 64
// MelEscaped := true ;
6938: LD_ADDR_EXP 18
6942: PUSH
6943: LD_INT 1
6945: ST_TO_ADDR
// SaveVariable ( 1 , 01_MelEscaped ) ;
6946: LD_INT 1
6948: PPUSH
6949: LD_STRING 01_MelEscaped
6951: PPUSH
6952: CALL_OW 39
// end ;
6956: END
// every 0 0$1 trigger not IsOk ( usBun1 ) do var tmp , ape , p ;
6957: LD_INT 3
6959: PPUSH
6960: CALL_OW 302
6964: NOT
6965: IFFALSE 8703
6967: GO 6969
6969: DISABLE
6970: LD_INT 0
6972: PPUSH
6973: PPUSH
6974: PPUSH
// begin activeAmericanScript := false ;
6975: LD_ADDR_EXP 15
6979: PUSH
6980: LD_INT 0
6982: ST_TO_ADDR
// if IsInUnit ( Gladstone ) then
6983: LD_EXP 33
6987: PPUSH
6988: CALL_OW 310
6992: IFFALSE 7003
// ComExitBuilding ( Gladstone ) ;
6994: LD_EXP 33
6998: PPUSH
6999: CALL_OW 122
// AddComMoveXY ( Gladstone , 71 , 1 ) ;
7003: LD_EXP 33
7007: PPUSH
7008: LD_INT 71
7010: PPUSH
7011: LD_INT 1
7013: PPUSH
7014: CALL_OW 171
// ComMoveXY ( Holland , 72 , 1 ) ;
7018: LD_EXP 34
7022: PPUSH
7023: LD_INT 72
7025: PPUSH
7026: LD_INT 1
7028: PPUSH
7029: CALL_OW 111
// ComMoveXY ( Mel , 70 , 1 ) ;
7033: LD_EXP 35
7037: PPUSH
7038: LD_INT 70
7040: PPUSH
7041: LD_INT 1
7043: PPUSH
7044: CALL_OW 111
// Say ( Holland , D8-FSol1-2a ) ;
7048: LD_EXP 34
7052: PPUSH
7053: LD_STRING D8-FSol1-2a
7055: PPUSH
7056: CALL_OW 88
// Say ( Gladstone , D8-Glad-2 ) ;
7060: LD_EXP 33
7064: PPUSH
7065: LD_STRING D8-Glad-2
7067: PPUSH
7068: CALL_OW 88
// wait ( 0 0$1 ) ;
7072: LD_INT 35
7074: PPUSH
7075: CALL_OW 67
// if IsOk ( Gladstone ) then
7079: LD_EXP 33
7083: PPUSH
7084: CALL_OW 302
7088: IFFALSE 7177
// begin DialogueOn ;
7090: CALL_OW 6
// PlaceSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 , - 3 ) ;
7094: LD_EXP 33
7098: PPUSH
7099: CALL_OW 250
7103: PPUSH
7104: LD_EXP 33
7108: PPUSH
7109: CALL_OW 251
7113: PPUSH
7114: LD_INT 3
7116: PPUSH
7117: LD_INT 3
7119: NEG
7120: PPUSH
7121: CALL_OW 330
// CenterNowOnUnits ( Gladstone ) ;
7125: LD_EXP 33
7129: PPUSH
7130: CALL_OW 87
// Say ( Burlak , D8-Bur-2 ) ;
7134: LD_EXP 22
7138: PPUSH
7139: LD_STRING D8-Bur-2
7141: PPUSH
7142: CALL_OW 88
// RemoveSeeing ( GetX ( Gladstone ) , GetY ( Gladstone ) , 3 ) ;
7146: LD_EXP 33
7150: PPUSH
7151: CALL_OW 250
7155: PPUSH
7156: LD_EXP 33
7160: PPUSH
7161: CALL_OW 251
7165: PPUSH
7166: LD_INT 3
7168: PPUSH
7169: CALL_OW 331
// DialogueOff ;
7173: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7177: LD_INT 35
7179: PPUSH
7180: CALL_OW 67
// until not IsOk ( Gladstone ) and not IsOk ( Holland ) ;
7184: LD_EXP 33
7188: PPUSH
7189: CALL_OW 302
7193: NOT
7194: IFFALSE 7208
7196: PUSH
7197: LD_EXP 34
7201: PPUSH
7202: CALL_OW 302
7206: NOT
7207: AND
7208: IFFALSE 7177
// if gladstoneEscaped and hollandEscaped then
7210: LD_EXP 16
7214: IFFALSE 7222
7216: PUSH
7217: LD_EXP 17
7221: AND
7222: IFFALSE 7238
// Say ( Burlak , D9-Bur-1c ) else
7224: LD_EXP 22
7228: PPUSH
7229: LD_STRING D9-Bur-1c
7231: PPUSH
7232: CALL_OW 88
7236: GO 7290
// if hollandEscaped then
7238: LD_EXP 17
7242: IFFALSE 7258
// Say ( Burlak , D9-Bur-1b ) else
7244: LD_EXP 22
7248: PPUSH
7249: LD_STRING D9-Bur-1b
7251: PPUSH
7252: CALL_OW 88
7256: GO 7290
// if gladstoneEscaped then
7258: LD_EXP 16
7262: IFFALSE 7278
// Say ( Burlak , D9-Bur-1a ) else
7264: LD_EXP 22
7268: PPUSH
7269: LD_STRING D9-Bur-1a
7271: PPUSH
7272: CALL_OW 88
7276: GO 7290
// Say ( Burlak , D9-Bur-1 ) ;
7278: LD_EXP 22
7282: PPUSH
7283: LD_STRING D9-Bur-1
7285: PPUSH
7286: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
7290: LD_INT 35
7292: PPUSH
7293: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] ] ) ;
7297: LD_INT 22
7299: PUSH
7300: LD_INT 1
7302: PUSH
7303: EMPTY
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 50
7309: PUSH
7310: EMPTY
7311: LIST
7312: PUSH
7313: EMPTY
7314: LIST
7315: LIST
7316: PPUSH
7317: CALL_OW 69
7321: NOT
7322: IFFALSE 7290
// DialogueOn ;
7324: CALL_OW 6
// Say ( Belkov , D10-Bel-1 ) ;
7328: LD_EXP 27
7332: PPUSH
7333: LD_STRING D10-Bel-1
7335: PPUSH
7336: CALL_OW 88
// Say ( Burlak , D10-Bur-1 ) ;
7340: LD_EXP 22
7344: PPUSH
7345: LD_STRING D10-Bur-1
7347: PPUSH
7348: CALL_OW 88
// if IsOk ( Belkov ) then
7352: LD_EXP 27
7356: PPUSH
7357: CALL_OW 302
7361: IFFALSE 7377
// Say ( Belkov , D10-Bel-1a ) else
7363: LD_EXP 27
7367: PPUSH
7368: LD_STRING D10-Bel-1a
7370: PPUSH
7371: CALL_OW 88
7375: GO 7450
// if IsOk ( Saseda ) then
7377: LD_EXP 24
7381: PPUSH
7382: CALL_OW 302
7386: IFFALSE 7402
// Say ( Saseda , D10-RSol1-1 ) else
7388: LD_EXP 24
7392: PPUSH
7393: LD_STRING D10-RSol1-1
7395: PPUSH
7396: CALL_OW 88
7400: GO 7450
// if IsOk ( Balei ) then
7402: LD_EXP 26
7406: PPUSH
7407: CALL_OW 302
7411: IFFALSE 7427
// Say ( Balei , D10-RSol1-1 ) else
7413: LD_EXP 26
7417: PPUSH
7418: LD_STRING D10-RSol1-1
7420: PPUSH
7421: CALL_OW 88
7425: GO 7450
// if IsOk ( Jaunzeme ) then
7427: LD_EXP 28
7431: PPUSH
7432: CALL_OW 302
7436: IFFALSE 7450
// Say ( Jaunzeme , D10-RSol1-1 ) ;
7438: LD_EXP 28
7442: PPUSH
7443: LD_STRING D10-RSol1-1
7445: PPUSH
7446: CALL_OW 88
// tmp := FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_sex , sex_male ] ] ) diff [ Burlak , Gnyevko ] ;
7450: LD_ADDR_VAR 0 1
7454: PUSH
7455: LD_INT 22
7457: PUSH
7458: LD_INT 3
7460: PUSH
7461: EMPTY
7462: LIST
7463: LIST
7464: PUSH
7465: LD_INT 25
7467: PUSH
7468: LD_INT 1
7470: PUSH
7471: EMPTY
7472: LIST
7473: LIST
7474: PUSH
7475: LD_INT 26
7477: PUSH
7478: LD_INT 1
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: LIST
7489: PPUSH
7490: CALL_OW 69
7494: PUSH
7495: LD_EXP 22
7499: PUSH
7500: LD_EXP 30
7504: PUSH
7505: EMPTY
7506: LIST
7507: LIST
7508: DIFF
7509: ST_TO_ADDR
// if tmp then
7510: LD_VAR 0 1
7514: IFFALSE 7528
// Say ( Burlak , D10-Bur-2 ) ;
7516: LD_EXP 22
7520: PPUSH
7521: LD_STRING D10-Bur-2
7523: PPUSH
7524: CALL_OW 88
// DialogueOff ;
7528: CALL_OW 7
// if gladstoneEscaped or hollandEscaped then
7532: LD_EXP 16
7536: IFTRUE 7544
7538: PUSH
7539: LD_EXP 17
7543: OR
7544: IFFALSE 7555
// ChangeMissionObjectives ( M4b ) else
7546: LD_STRING M4b
7548: PPUSH
7549: CALL_OW 337
7553: GO 7562
// ChangeMissionObjectives ( M4a ) ;
7555: LD_STRING M4a
7557: PPUSH
7558: CALL_OW 337
// canEnd := true ;
7562: LD_ADDR_EXP 19
7566: PUSH
7567: LD_INT 1
7569: ST_TO_ADDR
// SetAreaMapShow ( exitArea , 1 ) ;
7570: LD_INT 16
7572: PPUSH
7573: LD_INT 1
7575: PPUSH
7576: CALL_OW 424
// wait ( rand ( 0 0$20 , 0 0$40 ) ) ;
7580: LD_INT 700
7582: PPUSH
7583: LD_INT 1400
7585: PPUSH
7586: CALL_OW 12
7590: PPUSH
7591: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7595: LD_INT 35
7597: PPUSH
7598: CALL_OW 67
// until PlaceUnitArea ( Kirilenkova , kirilenkovaSpawn , true ) ;
7602: LD_EXP 31
7606: PPUSH
7607: LD_INT 12
7609: PPUSH
7610: LD_INT 1
7612: PPUSH
7613: CALL_OW 49
7617: IFFALSE 7595
// wait ( 0 0$3 ) ;
7619: LD_INT 105
7621: PPUSH
7622: CALL_OW 67
// if not See ( 3 , Kirilenkova ) then
7626: LD_INT 3
7628: PPUSH
7629: LD_EXP 31
7633: PPUSH
7634: CALL_OW 292
7638: NOT
7639: IFFALSE 8156
// begin DialogueOn ;
7641: CALL_OW 6
// InGameOn ;
7645: CALL_OW 8
// SayRadioNoFace ( Kirilenkova , D11b-Kir-1 ) ;
7649: LD_EXP 31
7653: PPUSH
7654: LD_STRING D11b-Kir-1
7656: PPUSH
7657: CALL_OW 586
// if IsOk ( Belkov ) then
7661: LD_EXP 27
7665: PPUSH
7666: CALL_OW 302
7670: IFFALSE 7698
// begin Say ( Belkov , D11b-Bel-1 ) ;
7672: LD_EXP 27
7676: PPUSH
7677: LD_STRING D11b-Bel-1
7679: PPUSH
7680: CALL_OW 88
// Say ( Belkov , D11b-Bel-1a ) ;
7684: LD_EXP 27
7688: PPUSH
7689: LD_STRING D11b-Bel-1a
7691: PPUSH
7692: CALL_OW 88
// end else
7696: GO 7771
// if IsOk ( Jaworska ) then
7698: LD_EXP 25
7702: PPUSH
7703: CALL_OW 302
7707: IFFALSE 7723
// Say ( Jaworska , D11b-RFSol1-1 ) else
7709: LD_EXP 25
7713: PPUSH
7714: LD_STRING D11b-RFSol1-1
7716: PPUSH
7717: CALL_OW 88
7721: GO 7771
// if IsOk ( Saseda ) then
7723: LD_EXP 24
7727: PPUSH
7728: CALL_OW 302
7732: IFFALSE 7748
// Say ( Saseda , D11b-RSol1-1 ) else
7734: LD_EXP 24
7738: PPUSH
7739: LD_STRING D11b-RSol1-1
7741: PPUSH
7742: CALL_OW 88
7746: GO 7771
// if IsOk ( Balei ) then
7748: LD_EXP 26
7752: PPUSH
7753: CALL_OW 302
7757: IFFALSE 7771
// Say ( Balei , D11b-RSol1-1 ) ;
7759: LD_EXP 26
7763: PPUSH
7764: LD_STRING D11b-RSol1-1
7766: PPUSH
7767: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , Kirilenkova , 12 ] ] ) then
7771: LD_INT 22
7773: PUSH
7774: LD_INT 0
7776: PUSH
7777: EMPTY
7778: LIST
7779: LIST
7780: PUSH
7781: LD_INT 25
7783: PUSH
7784: LD_INT 12
7786: PUSH
7787: EMPTY
7788: LIST
7789: LIST
7790: PUSH
7791: LD_INT 91
7793: PUSH
7794: LD_EXP 31
7798: PUSH
7799: LD_INT 12
7801: PUSH
7802: EMPTY
7803: LIST
7804: LIST
7805: LIST
7806: PUSH
7807: EMPTY
7808: LIST
7809: LIST
7810: LIST
7811: PPUSH
7812: CALL_OW 69
7816: IFFALSE 7894
// begin SayRadioNoFace ( Kirilenkova , D11b1-Kir-1 ) ;
7818: LD_EXP 31
7822: PPUSH
7823: LD_STRING D11b1-Kir-1
7825: PPUSH
7826: CALL_OW 586
// if attackedByApe then
7830: LD_EXP 7
7834: IFFALSE 7862
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7836: LD_EXP 22
7840: PPUSH
7841: LD_STRING D11b1-Bur-1
7843: PPUSH
7844: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7848: LD_EXP 27
7852: PPUSH
7853: LD_STRING D11b2-Bel-1
7855: PPUSH
7856: CALL_OW 88
// end else
7860: GO 7892
// if waterfallSpotted then
7862: LD_EXP 8
7866: IFFALSE 7892
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7868: LD_EXP 22
7872: PPUSH
7873: LD_STRING D11b1-Bur-1a
7875: PPUSH
7876: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7880: LD_EXP 27
7884: PPUSH
7885: LD_STRING D11b2-Bel-1
7887: PPUSH
7888: CALL_OW 88
// end ; end else
7892: GO 7936
// begin SayRadioNoFace ( Kirilenkova , D11b2-Kir-1 ) ;
7894: LD_EXP 31
7898: PPUSH
7899: LD_STRING D11b2-Kir-1
7901: PPUSH
7902: CALL_OW 586
// if waterfallSpotted then
7906: LD_EXP 8
7910: IFFALSE 7936
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7912: LD_EXP 22
7916: PPUSH
7917: LD_STRING D11b1-Bur-1a
7919: PPUSH
7920: CALL_OW 88
// Say ( Belkov , D11b2-Bel-1 ) ;
7924: LD_EXP 27
7928: PPUSH
7929: LD_STRING D11b2-Bel-1
7931: PPUSH
7932: CALL_OW 88
// end ; end ; if not waterfallSpotted and not attackedByApe then
7936: LD_EXP 8
7940: NOT
7941: IFFALSE 7950
7943: PUSH
7944: LD_EXP 7
7948: NOT
7949: AND
7950: IFFALSE 8050
// begin if IsOk ( Belkov ) then
7952: LD_EXP 27
7956: PPUSH
7957: CALL_OW 302
7961: IFFALSE 7977
// Say ( Belkov , D11b1-Bel-1 ) else
7963: LD_EXP 27
7967: PPUSH
7968: LD_STRING D11b1-Bel-1
7970: PPUSH
7971: CALL_OW 88
7975: GO 8050
// if IsOk ( Saseda ) then
7977: LD_EXP 24
7981: PPUSH
7982: CALL_OW 302
7986: IFFALSE 8002
// Say ( Saseda , D11b1-RSol1-1 ) else
7988: LD_EXP 24
7992: PPUSH
7993: LD_STRING D11b1-RSol1-1
7995: PPUSH
7996: CALL_OW 88
8000: GO 8050
// if IsOk ( Jaworska ) then
8002: LD_EXP 25
8006: PPUSH
8007: CALL_OW 302
8011: IFFALSE 8027
// Say ( Jaworska , D11b1-RFSol1-1 ) else
8013: LD_EXP 25
8017: PPUSH
8018: LD_STRING D11b1-RFSol1-1
8020: PPUSH
8021: CALL_OW 88
8025: GO 8050
// if IsOk ( Balei ) then
8027: LD_EXP 26
8031: PPUSH
8032: CALL_OW 302
8036: IFFALSE 8050
// Say ( Balei , D11b1-RSol1-1 ) ;
8038: LD_EXP 26
8042: PPUSH
8043: LD_STRING D11b1-RSol1-1
8045: PPUSH
8046: CALL_OW 88
// end ; DialogueOff ;
8050: CALL_OW 7
// InGameOff ;
8054: CALL_OW 9
// p := 60 - ( 10 * Difficulty ) ;
8058: LD_ADDR_VAR 0 3
8062: PUSH
8063: LD_INT 60
8065: PUSH
8066: LD_INT 10
8068: PUSH
8069: LD_OWVAR 67
8073: MUL
8074: MINUS
8075: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8076: LD_INT 35
8078: PPUSH
8079: CALL_OW 67
// p := Dec ( p ) ;
8083: LD_ADDR_VAR 0 3
8087: PUSH
8088: LD_VAR 0 3
8092: PPUSH
8093: CALL 49992 0 1
8097: ST_TO_ADDR
// until p = 0 or See ( 3 , Kirilenkova ) ;
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 0
8105: EQUAL
8106: IFTRUE 8122
8108: PUSH
8109: LD_INT 3
8111: PPUSH
8112: LD_EXP 31
8116: PPUSH
8117: CALL_OW 292
8121: OR
8122: IFFALSE 8076
// if not See ( 3 , Kirilenkova ) then
8124: LD_INT 3
8126: PPUSH
8127: LD_EXP 31
8131: PPUSH
8132: CALL_OW 292
8136: NOT
8137: IFFALSE 8154
// ComMoveXY ( Kirilenkova , 75 , 95 ) ;
8139: LD_EXP 31
8143: PPUSH
8144: LD_INT 75
8146: PPUSH
8147: LD_INT 95
8149: PPUSH
8150: CALL_OW 111
// end else
8154: GO 8392
// begin DialogueOn ;
8156: CALL_OW 6
// SetSide ( Kirilenkova , 3 ) ;
8160: LD_EXP 31
8164: PPUSH
8165: LD_INT 3
8167: PPUSH
8168: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8172: LD_EXP 31
8176: PPUSH
8177: CALL_OW 87
// Say ( Kirilenkova , D11a-Kir-1 ) ;
8181: LD_EXP 31
8185: PPUSH
8186: LD_STRING D11a-Kir-1
8188: PPUSH
8189: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
8193: LD_EXP 31
8197: PPUSH
8198: LD_EXP 27
8202: PPUSH
8203: CALL_OW 296
8207: PUSH
8208: LD_INT 8
8210: LESS
8211: IFFALSE 8225
// Say ( Belkov , D11a-Bel-1 ) ;
8213: LD_EXP 27
8217: PPUSH
8218: LD_STRING D11a-Bel-1
8220: PPUSH
8221: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
8225: LD_EXP 31
8229: PPUSH
8230: LD_STRING D11a-Kir-2
8232: PPUSH
8233: CALL_OW 88
// if GetDistUnits ( Kirilenkova , Belkov ) < 8 then
8237: LD_EXP 31
8241: PPUSH
8242: LD_EXP 27
8246: PPUSH
8247: CALL_OW 296
8251: PUSH
8252: LD_INT 8
8254: LESS
8255: IFFALSE 8271
// Say ( Belkov , D11a-Bel-2 ) else
8257: LD_EXP 27
8261: PPUSH
8262: LD_STRING D11a-Bel-2
8264: PPUSH
8265: CALL_OW 88
8269: GO 8371
// if GetDistUnits ( Kirilenkova , Saseda ) < 8 then
8271: LD_EXP 31
8275: PPUSH
8276: LD_EXP 24
8280: PPUSH
8281: CALL_OW 296
8285: PUSH
8286: LD_INT 8
8288: LESS
8289: IFFALSE 8305
// Say ( Saseda , D11a-RSol1-2 ) else
8291: LD_EXP 24
8295: PPUSH
8296: LD_STRING D11a-RSol1-2
8298: PPUSH
8299: CALL_OW 88
8303: GO 8371
// if GetDistUnits ( Kirilenkova , Jaworska ) < 8 then
8305: LD_EXP 31
8309: PPUSH
8310: LD_EXP 25
8314: PPUSH
8315: CALL_OW 296
8319: PUSH
8320: LD_INT 8
8322: LESS
8323: IFFALSE 8339
// Say ( Jaworska , D11a-RFSol1-2 ) else
8325: LD_EXP 25
8329: PPUSH
8330: LD_STRING D11a-RFSol1-2
8332: PPUSH
8333: CALL_OW 88
8337: GO 8371
// if GetDistUnits ( Kirilenkova , Balei ) < 8 then
8339: LD_EXP 31
8343: PPUSH
8344: LD_EXP 26
8348: PPUSH
8349: CALL_OW 296
8353: PUSH
8354: LD_INT 8
8356: LESS
8357: IFFALSE 8371
// Say ( Balei , D11a-RSol1-2 ) ;
8359: LD_EXP 26
8363: PPUSH
8364: LD_STRING D11a-RSol1-2
8366: PPUSH
8367: CALL_OW 88
// DialogueOff ;
8371: CALL_OW 7
// SetAchievement ( ACH_YELENA ) ;
8375: LD_STRING ACH_YELENA
8377: PPUSH
8378: CALL_OW 543
// hasKirilenkova := true ;
8382: LD_ADDR_EXP 5
8386: PUSH
8387: LD_INT 1
8389: ST_TO_ADDR
// exit ;
8390: GO 8703
// end ; p := 0 ;
8392: LD_ADDR_VAR 0 3
8396: PUSH
8397: LD_INT 0
8399: ST_TO_ADDR
// if Difficulty > 2 then
8400: LD_OWVAR 67
8404: PUSH
8405: LD_INT 2
8407: GREATER
8408: IFFALSE 8488
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
8410: LD_INT 5
8412: NEG
8413: PUSH
8414: LD_INT 8
8416: NEG
8417: PUSH
8418: LD_INT 10
8420: NEG
8421: PUSH
8422: LD_INT 12
8424: NEG
8425: PUSH
8426: EMPTY
8427: LIST
8428: LIST
8429: LIST
8430: LIST
8431: PUSH
8432: LD_OWVAR 67
8436: ARRAY
8437: PPUSH
8438: CALL 44724 0 1
// ape := CreateHuman ;
8442: LD_ADDR_VAR 0 2
8446: PUSH
8447: CALL_OW 44
8451: ST_TO_ADDR
// PlaceUnitXYR ( ape , 65 , 89 , 2 , false ) ;
8452: LD_VAR 0 2
8456: PPUSH
8457: LD_INT 65
8459: PPUSH
8460: LD_INT 89
8462: PPUSH
8463: LD_INT 2
8465: PPUSH
8466: LD_INT 0
8468: PPUSH
8469: CALL_OW 50
// ComMoveXY ( ape , 74 , 94 ) ;
8473: LD_VAR 0 2
8477: PPUSH
8478: LD_INT 74
8480: PPUSH
8481: LD_INT 94
8483: PPUSH
8484: CALL_OW 111
// end ; repeat wait ( 0 0$1 ) ;
8488: LD_INT 35
8490: PPUSH
8491: CALL_OW 67
// p := Inc ( p ) ;
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: LD_VAR 0 3
8504: PPUSH
8505: CALL 49970 0 1
8509: ST_TO_ADDR
// if p > 120 and ape and IsOk ( ape ) and not HasTask ( ape ) then
8510: LD_VAR 0 3
8514: PUSH
8515: LD_INT 120
8517: GREATER
8518: IFFALSE 8526
8520: PUSH
8521: LD_VAR 0 2
8525: AND
8526: IFFALSE 8539
8528: PUSH
8529: LD_VAR 0 2
8533: PPUSH
8534: CALL_OW 302
8538: AND
8539: IFFALSE 8553
8541: PUSH
8542: LD_VAR 0 2
8546: PPUSH
8547: CALL_OW 314
8551: NOT
8552: AND
8553: IFFALSE 8569
// ComAttackUnit ( ape , Kirilenkova ) ;
8555: LD_VAR 0 2
8559: PPUSH
8560: LD_EXP 31
8564: PPUSH
8565: CALL_OW 115
// until See ( 3 , Kirilenkova ) and IsOk ( Kirilenkova ) ;
8569: LD_INT 3
8571: PPUSH
8572: LD_EXP 31
8576: PPUSH
8577: CALL_OW 292
8581: IFFALSE 8594
8583: PUSH
8584: LD_EXP 31
8588: PPUSH
8589: CALL_OW 302
8593: AND
8594: IFFALSE 8488
// if p < 15 then
8596: LD_VAR 0 3
8600: PUSH
8601: LD_INT 15
8603: LESS
8604: IFFALSE 8613
// SetAchievement ( ACH_YELENA ) ;
8606: LD_STRING ACH_YELENA
8608: PPUSH
8609: CALL_OW 543
// ComTurnUnit ( Kirilenkova , Burlak ) ;
8613: LD_EXP 31
8617: PPUSH
8618: LD_EXP 22
8622: PPUSH
8623: CALL_OW 119
// wait ( 0 0$0.3 ) ;
8627: LD_INT 10
8629: PPUSH
8630: CALL_OW 67
// DialogueOn ;
8634: CALL_OW 6
// InGameOn ;
8638: CALL_OW 8
// SetSide ( Kirilenkova , 3 ) ;
8642: LD_EXP 31
8646: PPUSH
8647: LD_INT 3
8649: PPUSH
8650: CALL_OW 235
// CenterNowOnUnits ( Kirilenkova ) ;
8654: LD_EXP 31
8658: PPUSH
8659: CALL_OW 87
// Say ( Kirilenkova , D11c-Kir-1 ) ;
8663: LD_EXP 31
8667: PPUSH
8668: LD_STRING D11c-Kir-1
8670: PPUSH
8671: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
8675: LD_EXP 22
8679: PPUSH
8680: LD_STRING D11c-Bur-1
8682: PPUSH
8683: CALL_OW 88
// DialogueOff ;
8687: CALL_OW 7
// InGameOff ;
8691: CALL_OW 9
// hasKirilenkova := true ;
8695: LD_ADDR_EXP 5
8699: PUSH
8700: LD_INT 1
8702: ST_TO_ADDR
// end ;
8703: PPOPN 3
8705: END
// every 0 0$1 trigger joinedToBelkov and not UnitFilter ( [ Saseda , Jaworska , Balei , Belkov , Jaunzeme ] , [ f_alive ] ) do
8706: LD_EXP 3
8710: IFFALSE 8757
8712: PUSH
8713: LD_EXP 24
8717: PUSH
8718: LD_EXP 25
8722: PUSH
8723: LD_EXP 26
8727: PUSH
8728: LD_EXP 27
8732: PUSH
8733: LD_EXP 28
8737: PUSH
8738: EMPTY
8739: LIST
8740: LIST
8741: LIST
8742: LIST
8743: LIST
8744: PPUSH
8745: LD_INT 51
8747: PUSH
8748: EMPTY
8749: LIST
8750: PPUSH
8751: CALL_OW 72
8755: NOT
8756: AND
8757: IFFALSE 8769
8759: GO 8761
8761: DISABLE
// begin YouLost ( Comrades ) ;
8762: LD_STRING Comrades
8764: PPUSH
8765: CALL_OW 104
// end ;
8769: END
// every 0 0$1 trigger canEnd and IsInArea ( Burlak , exitArea ) do
8770: LD_EXP 19
8774: IFFALSE 8790
8776: PUSH
8777: LD_EXP 22
8781: PPUSH
8782: LD_INT 16
8784: PPUSH
8785: CALL_OW 308
8789: AND
8790: IFFALSE 9179
8792: GO 8794
8794: DISABLE
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
8795: LD_INT 22
8797: PUSH
8798: LD_INT 3
8800: PUSH
8801: EMPTY
8802: LIST
8803: LIST
8804: PUSH
8805: LD_INT 21
8807: PUSH
8808: LD_INT 1
8810: PUSH
8811: EMPTY
8812: LIST
8813: LIST
8814: PUSH
8815: LD_INT 50
8817: PUSH
8818: EMPTY
8819: LIST
8820: PUSH
8821: LD_INT 3
8823: PUSH
8824: LD_INT 95
8826: PUSH
8827: LD_INT 16
8829: PUSH
8830: EMPTY
8831: LIST
8832: LIST
8833: PUSH
8834: EMPTY
8835: LIST
8836: LIST
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: PPUSH
8844: CALL_OW 69
8848: IFFALSE 8857
// Query ( QExit1 ) ;
8850: LD_STRING QExit1
8852: PPUSH
8853: CALL_OW 97
// repeat wait ( 0 0$1 ) ;
8857: LD_INT 35
8859: PPUSH
8860: CALL_OW 67
// until not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) ;
8864: LD_INT 22
8866: PUSH
8867: LD_INT 3
8869: PUSH
8870: EMPTY
8871: LIST
8872: LIST
8873: PUSH
8874: LD_INT 21
8876: PUSH
8877: LD_INT 1
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: PUSH
8884: LD_INT 50
8886: PUSH
8887: EMPTY
8888: LIST
8889: PUSH
8890: LD_INT 3
8892: PUSH
8893: LD_INT 95
8895: PUSH
8896: LD_INT 16
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: PUSH
8907: EMPTY
8908: LIST
8909: LIST
8910: LIST
8911: LIST
8912: PPUSH
8913: CALL_OW 69
8917: NOT
8918: IFFALSE 8857
// if NearestUnitToXY ( [ Belkov , Saseda ] , 157 , 118 ) = Belkov and IsOk ( Belkov ) then
8920: LD_EXP 27
8924: PUSH
8925: LD_EXP 24
8929: PUSH
8930: EMPTY
8931: LIST
8932: LIST
8933: PPUSH
8934: LD_INT 157
8936: PPUSH
8937: LD_INT 118
8939: PPUSH
8940: CALL_OW 73
8944: PUSH
8945: LD_EXP 27
8949: EQUAL
8950: IFFALSE 8963
8952: PUSH
8953: LD_EXP 27
8957: PPUSH
8958: CALL_OW 302
8962: AND
8963: IFFALSE 8979
// Say ( Belkov , D12-Bel-1 ) else
8965: LD_EXP 27
8969: PPUSH
8970: LD_STRING D12-Bel-1
8972: PPUSH
8973: CALL_OW 88
8977: GO 9027
// if IsOk ( Saseda ) then
8979: LD_EXP 24
8983: PPUSH
8984: CALL_OW 302
8988: IFFALSE 9004
// Say ( Saseda , D12-RSol1-1 ) else
8990: LD_EXP 24
8994: PPUSH
8995: LD_STRING D12-RSol1-1
8997: PPUSH
8998: CALL_OW 88
9002: GO 9027
// if IsOk ( Balei ) then
9004: LD_EXP 26
9008: PPUSH
9009: CALL_OW 302
9013: IFFALSE 9027
// Say ( Balei , D12-RSol1-1 ) ;
9015: LD_EXP 26
9019: PPUSH
9020: LD_STRING D12-RSol1-1
9022: PPUSH
9023: CALL_OW 88
// if apeRadioKilled and not hasGnyevko then
9027: LD_EXP 9
9031: IFFALSE 9040
9033: PUSH
9034: LD_EXP 4
9038: NOT
9039: AND
9040: IFFALSE 9175
// begin DialogueOn ;
9042: CALL_OW 6
// Say ( Burlak , D12-Bur-1 ) ;
9046: LD_EXP 22
9050: PPUSH
9051: LD_STRING D12-Bur-1
9053: PPUSH
9054: CALL_OW 88
// Say ( Belkov , D12-Bel-2 ) ;
9058: LD_EXP 27
9062: PPUSH
9063: LD_STRING D12-Bel-2
9065: PPUSH
9066: CALL_OW 88
// DialogueOff ;
9070: CALL_OW 7
// if Query ( QExit2 ) = 1 then
9074: LD_STRING QExit2
9076: PPUSH
9077: CALL_OW 97
9081: PUSH
9082: LD_INT 1
9084: EQUAL
9085: IFFALSE 9093
// begin FinishMission ;
9087: CALL 9180 0 0
// exit ;
9091: GO 9179
// end ; repeat wait ( 0 0$3 ) ;
9093: LD_INT 105
9095: PPUSH
9096: CALL_OW 67
// if not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_not , [ f_inarea , exitArea ] ] ] ) then
9100: LD_INT 22
9102: PUSH
9103: LD_INT 3
9105: PUSH
9106: EMPTY
9107: LIST
9108: LIST
9109: PUSH
9110: LD_INT 21
9112: PUSH
9113: LD_INT 1
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 50
9122: PUSH
9123: EMPTY
9124: LIST
9125: PUSH
9126: LD_INT 3
9128: PUSH
9129: LD_INT 95
9131: PUSH
9132: LD_INT 16
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: PUSH
9143: EMPTY
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: PPUSH
9149: CALL_OW 69
9153: NOT
9154: IFFALSE 9171
// if Query ( QExit2 ) = 1 then
9156: LD_STRING QExit2
9158: PPUSH
9159: CALL_OW 97
9163: PUSH
9164: LD_INT 1
9166: EQUAL
9167: IFFALSE 9171
// break ;
9169: GO 9175
// until false ;
9171: LD_INT 0
9173: IFFALSE 9093
// end ; FinishMission ;
9175: CALL 9180 0 0
// end ;
9179: END
// function FinishMission ; begin
9180: LD_INT 0
9182: PPUSH
// if tick <= 4 4$00 then
9183: LD_OWVAR 1
9187: PUSH
9188: LD_INT 8400
9190: LESSEQUAL
9191: IFFALSE 9200
// SetAchievement ( ACH_RSPEED_1 ) ;
9193: LD_STRING ACH_RSPEED_1
9195: PPUSH
9196: CALL_OW 543
// if not someoneGetsHurt then
9200: LD_EXP 21
9204: NOT
9205: IFFALSE 9214
// SetAchievement ( ACH_BANDAGE ) ;
9207: LD_STRING ACH_BANDAGE
9209: PPUSH
9210: CALL_OW 543
// if gladstoneEscaped and ( hollandEscaped or MelEscaped ) then
9214: LD_EXP 16
9218: IFFALSE 9234
9220: PUSH
9221: LD_EXP 17
9225: IFTRUE 9233
9227: PUSH
9228: LD_EXP 18
9232: OR
9233: AND
9234: IFFALSE 9249
// AddMedal ( NoEscape , - 3 ) else
9236: LD_STRING NoEscape
9238: PPUSH
9239: LD_INT 3
9241: NEG
9242: PPUSH
9243: CALL_OW 101
9247: GO 9305
// if gladstoneEscaped then
9249: LD_EXP 16
9253: IFFALSE 9268
// AddMedal ( NoEscape , - 1 ) else
9255: LD_STRING NoEscape
9257: PPUSH
9258: LD_INT 1
9260: NEG
9261: PPUSH
9262: CALL_OW 101
9266: GO 9305
// if hollandEscaped or MelEscaped then
9268: LD_EXP 17
9272: IFTRUE 9280
9274: PUSH
9275: LD_EXP 18
9279: OR
9280: IFFALSE 9295
// AddMedal ( NoEscape , - 2 ) else
9282: LD_STRING NoEscape
9284: PPUSH
9285: LD_INT 2
9287: NEG
9288: PPUSH
9289: CALL_OW 101
9293: GO 9305
// AddMedal ( NoEscape , 1 ) ;
9295: LD_STRING NoEscape
9297: PPUSH
9298: LD_INT 1
9300: PPUSH
9301: CALL_OW 101
// if hasGnyevko and IsOk ( Gnyevko ) and hasKirilenkova and IsOk ( Kirilenkova ) then
9305: LD_EXP 4
9309: IFFALSE 9322
9311: PUSH
9312: LD_EXP 30
9316: PPUSH
9317: CALL_OW 302
9321: AND
9322: IFFALSE 9330
9324: PUSH
9325: LD_EXP 5
9329: AND
9330: IFFALSE 9343
9332: PUSH
9333: LD_EXP 31
9337: PPUSH
9338: CALL_OW 302
9342: AND
9343: IFFALSE 9357
// AddMedal ( Gnyevko , 1 ) else
9345: LD_STRING Gnyevko
9347: PPUSH
9348: LD_INT 1
9350: PPUSH
9351: CALL_OW 101
9355: GO 9462
// if not IsOk ( Gnyevko ) and not IsOk ( Kirilenkova ) then
9357: LD_EXP 30
9361: PPUSH
9362: CALL_OW 302
9366: NOT
9367: IFFALSE 9381
9369: PUSH
9370: LD_EXP 31
9374: PPUSH
9375: CALL_OW 302
9379: NOT
9380: AND
9381: IFFALSE 9396
// AddMedal ( Gnyevko , - 3 ) else
9383: LD_STRING Gnyevko
9385: PPUSH
9386: LD_INT 3
9388: NEG
9389: PPUSH
9390: CALL_OW 101
9394: GO 9462
// if not hasGnyevko then
9396: LD_EXP 4
9400: NOT
9401: IFFALSE 9416
// AddMedal ( Gnyevko , - 1 ) else
9403: LD_STRING Gnyevko
9405: PPUSH
9406: LD_INT 1
9408: NEG
9409: PPUSH
9410: CALL_OW 101
9414: GO 9462
// if not IsOk ( Gnyevko ) or not IsOk ( Kirilenkova ) or not hasKirilenkova then
9416: LD_EXP 30
9420: PPUSH
9421: CALL_OW 302
9425: NOT
9426: IFTRUE 9440
9428: PUSH
9429: LD_EXP 31
9433: PPUSH
9434: CALL_OW 302
9438: NOT
9439: OR
9440: IFTRUE 9449
9442: PUSH
9443: LD_EXP 5
9447: NOT
9448: OR
9449: IFFALSE 9462
// AddMedal ( Gnyevko , - 2 ) ;
9451: LD_STRING Gnyevko
9453: PPUSH
9454: LD_INT 2
9456: NEG
9457: PPUSH
9458: CALL_OW 101
// if loseCounter then
9462: LD_EXP 20
9466: IFFALSE 9481
// AddMedal ( NoLosses , - 1 ) else
9468: LD_STRING NoLosses
9470: PPUSH
9471: LD_INT 1
9473: NEG
9474: PPUSH
9475: CALL_OW 101
9479: GO 9491
// AddMedal ( NoLosses , 1 ) ;
9481: LD_STRING NoLosses
9483: PPUSH
9484: LD_INT 1
9486: PPUSH
9487: CALL_OW 101
// GiveMedals ( MAIN ) ;
9491: LD_STRING MAIN
9493: PPUSH
9494: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_nation , nation_russian ] ] ) ) ;
9498: LD_INT 22
9500: PUSH
9501: LD_INT 3
9503: PUSH
9504: EMPTY
9505: LIST
9506: LIST
9507: PUSH
9508: LD_INT 21
9510: PUSH
9511: LD_INT 1
9513: PUSH
9514: EMPTY
9515: LIST
9516: LIST
9517: PUSH
9518: LD_INT 50
9520: PUSH
9521: EMPTY
9522: LIST
9523: PUSH
9524: LD_INT 23
9526: PUSH
9527: LD_INT 3
9529: PUSH
9530: EMPTY
9531: LIST
9532: LIST
9533: PUSH
9534: EMPTY
9535: LIST
9536: LIST
9537: LIST
9538: LIST
9539: PPUSH
9540: CALL_OW 69
9544: PPUSH
9545: CALL_OW 43
// SaveCharacters ( Burlak , currentMissionPrefix & Burlak ) ;
9549: LD_EXP 22
9553: PPUSH
9554: LD_EXP 2
9558: PUSH
9559: LD_STRING Burlak
9561: STR
9562: PPUSH
9563: CALL_OW 38
// if IsOk ( Gnyevko ) and hasGnyevko then
9567: LD_EXP 30
9571: PPUSH
9572: CALL_OW 302
9576: IFFALSE 9584
9578: PUSH
9579: LD_EXP 4
9583: AND
9584: IFFALSE 9604
// SaveCharacters ( Gnyevko , currentMissionPrefix & Gnyevko ) ;
9586: LD_EXP 30
9590: PPUSH
9591: LD_EXP 2
9595: PUSH
9596: LD_STRING Gnyevko
9598: STR
9599: PPUSH
9600: CALL_OW 38
// if IsOk ( Belkov ) then
9604: LD_EXP 27
9608: PPUSH
9609: CALL_OW 302
9613: IFFALSE 9633
// SaveCharacters ( Belkov , currentMissionPrefix & Belkov ) ;
9615: LD_EXP 27
9619: PPUSH
9620: LD_EXP 2
9624: PUSH
9625: LD_STRING Belkov
9627: STR
9628: PPUSH
9629: CALL_OW 38
// if IsOk ( Kirilenkova ) and hasKirilenkova then
9633: LD_EXP 31
9637: PPUSH
9638: CALL_OW 302
9642: IFFALSE 9650
9644: PUSH
9645: LD_EXP 5
9649: AND
9650: IFFALSE 9670
// SaveCharacters ( Kirilenkova , currentMissionPrefix & Kirilenkova ) ;
9652: LD_EXP 31
9656: PPUSH
9657: LD_EXP 2
9661: PUSH
9662: LD_STRING Kirilenkova
9664: STR
9665: PPUSH
9666: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] , 01_belkovTeam ) ;
9670: LD_INT 22
9672: PUSH
9673: LD_INT 3
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: PUSH
9680: LD_INT 50
9682: PUSH
9683: EMPTY
9684: LIST
9685: PUSH
9686: LD_INT 21
9688: PUSH
9689: LD_INT 1
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: PPUSH
9701: CALL_OW 69
9705: PUSH
9706: LD_EXP 22
9710: PUSH
9711: LD_EXP 30
9715: PUSH
9716: LD_EXP 27
9720: PUSH
9721: LD_EXP 31
9725: PUSH
9726: EMPTY
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: DIFF
9732: PPUSH
9733: LD_STRING 01_belkovTeam
9735: PPUSH
9736: CALL_OW 38
// YouWin ;
9740: CALL_OW 103
// end ; end_of_file
9744: LD_VAR 0 1
9748: RET
// export function SendApemanAttack ; var ape ; begin
9749: LD_INT 0
9751: PPUSH
9752: PPUSH
// PrepareApeman ( 0 ) ;
9753: LD_INT 0
9755: PPUSH
9756: CALL 44724 0 1
// ape := CreateHuman ;
9760: LD_ADDR_VAR 0 2
9764: PUSH
9765: CALL_OW 44
9769: ST_TO_ADDR
// PlaceUnitXY ( ape , 65 , 89 , false ) ;
9770: LD_VAR 0 2
9774: PPUSH
9775: LD_INT 65
9777: PPUSH
9778: LD_INT 89
9780: PPUSH
9781: LD_INT 0
9783: PPUSH
9784: CALL_OW 48
// ComMoveUnit ( ape , Burlak ) ;
9788: LD_VAR 0 2
9792: PPUSH
9793: LD_EXP 22
9797: PPUSH
9798: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
9802: LD_INT 35
9804: PPUSH
9805: CALL_OW 67
// if joinedToBelkov then
9809: LD_EXP 3
9813: IFFALSE 9832
// begin ComMoveXY ( ape , 66 , 90 ) ;
9815: LD_VAR 0 2
9819: PPUSH
9820: LD_INT 66
9822: PPUSH
9823: LD_INT 90
9825: PPUSH
9826: CALL_OW 111
// exit ;
9830: GO 10019
// end ; until GetDistUnits ( ape , Burlak ) < 5 ;
9832: LD_VAR 0 2
9836: PPUSH
9837: LD_EXP 22
9841: PPUSH
9842: CALL_OW 296
9846: PUSH
9847: LD_INT 5
9849: LESS
9850: IFFALSE 9802
// wait ( 0 0$0.3 ) ;
9852: LD_INT 10
9854: PPUSH
9855: CALL_OW 67
// ComTurnUnit ( ape , Burlak ) ;
9859: LD_VAR 0 2
9863: PPUSH
9864: LD_EXP 22
9868: PPUSH
9869: CALL_OW 119
// if HasTask ( Burlak ) then
9873: LD_EXP 22
9877: PPUSH
9878: CALL_OW 314
9882: IFFALSE 9893
// wait ( 0 0$3 ) else
9884: LD_INT 105
9886: PPUSH
9887: CALL_OW 67
9891: GO 9900
// wait ( 0 0$10 ) ;
9893: LD_INT 350
9895: PPUSH
9896: CALL_OW 67
// if See ( 6 , ape ) or joinedToBelkov then
9900: LD_INT 6
9902: PPUSH
9903: LD_VAR 0 2
9907: PPUSH
9908: CALL_OW 292
9912: IFTRUE 9920
9914: PUSH
9915: LD_EXP 3
9919: OR
9920: IFFALSE 9939
// begin ComMoveXY ( ape , 66 , 90 ) ;
9922: LD_VAR 0 2
9926: PPUSH
9927: LD_INT 66
9929: PPUSH
9930: LD_INT 90
9932: PPUSH
9933: CALL_OW 111
// exit ;
9937: GO 10019
// end ; ComAttackUnit ( ape , Burlak ) ;
9939: LD_VAR 0 2
9943: PPUSH
9944: LD_EXP 22
9948: PPUSH
9949: CALL_OW 115
// repeat wait ( 1 ) ;
9953: LD_INT 1
9955: PPUSH
9956: CALL_OW 67
// until GetLives ( ape ) < 980 and UnitShoot ( ape ) = Burlak and UnitInBattle ( ape ) ;
9960: LD_VAR 0 2
9964: PPUSH
9965: CALL_OW 256
9969: PUSH
9970: LD_INT 980
9972: LESS
9973: IFFALSE 9992
9975: PUSH
9976: LD_VAR 0 2
9980: PPUSH
9981: CALL_OW 504
9985: PUSH
9986: LD_EXP 22
9990: EQUAL
9991: AND
9992: IFFALSE 10005
9994: PUSH
9995: LD_VAR 0 2
9999: PPUSH
10000: CALL_OW 583
10004: AND
10005: IFFALSE 9953
// SetLives ( ape , 200 ) ;
10007: LD_VAR 0 2
10011: PPUSH
10012: LD_INT 200
10014: PPUSH
10015: CALL_OW 234
// end ;
10019: LD_VAR 0 1
10023: RET
// export function CreateNature ; var i , ape , r ; begin
10024: LD_INT 0
10026: PPUSH
10027: PPUSH
10028: PPUSH
10029: PPUSH
// PrepareNature ( 5 , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , 0 , 5 , 1 , 0 , 3 , natureArea , waterArea ) ;
10030: LD_INT 5
10032: PPUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 4
10038: PUSH
10039: LD_INT 5
10041: PUSH
10042: LD_INT 6
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: PUSH
10051: LD_OWVAR 67
10055: ARRAY
10056: PPUSH
10057: LD_INT 0
10059: PPUSH
10060: LD_INT 5
10062: PPUSH
10063: LD_INT 1
10065: PPUSH
10066: LD_INT 0
10068: PPUSH
10069: LD_INT 3
10071: PPUSH
10072: LD_INT 7
10074: PPUSH
10075: LD_INT 8
10077: PPUSH
10078: CALL 45248 0 9
// r := 2 ;
10082: LD_ADDR_VAR 0 4
10086: PUSH
10087: LD_INT 2
10089: ST_TO_ADDR
// for i := 1 to 3 do
10090: LD_ADDR_VAR 0 2
10094: PUSH
10095: DOUBLE
10096: LD_INT 1
10098: DEC
10099: ST_TO_ADDR
10100: LD_INT 3
10102: PUSH
10103: FOR_TO
10104: IFFALSE 10195
// begin PrepareApeman ( [ - 5 , - 8 , - 10 , - 12 ] [ Difficulty ] ) ;
10106: LD_INT 5
10108: NEG
10109: PUSH
10110: LD_INT 8
10112: NEG
10113: PUSH
10114: LD_INT 10
10116: NEG
10117: PUSH
10118: LD_INT 12
10120: NEG
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: LIST
10126: LIST
10127: PUSH
10128: LD_OWVAR 67
10132: ARRAY
10133: PPUSH
10134: CALL 44724 0 1
// ape := CreateHuman ;
10138: LD_ADDR_VAR 0 3
10142: PUSH
10143: CALL_OW 44
10147: ST_TO_ADDR
// if i = r then
10148: LD_VAR 0 2
10152: PUSH
10153: LD_VAR 0 4
10157: EQUAL
10158: IFFALSE 10172
// SetTag ( i , tApeRadio ) ;
10160: LD_VAR 0 2
10164: PPUSH
10165: LD_INT 1
10167: PPUSH
10168: CALL_OW 109
// PlaceUnitXYR ( ape , 66 , 92 , 3 , false ) ;
10172: LD_VAR 0 3
10176: PPUSH
10177: LD_INT 66
10179: PPUSH
10180: LD_INT 92
10182: PPUSH
10183: LD_INT 3
10185: PPUSH
10186: LD_INT 0
10188: PPUSH
10189: CALL_OW 50
// end ;
10193: GO 10103
10195: POP
10196: POP
// end ;
10197: LD_VAR 0 1
10201: RET
// export function MoveToHill ; begin
10202: LD_INT 0
10204: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10205: LD_EXP 23
10209: PPUSH
10210: LD_INT 65
10212: PPUSH
10213: LD_INT 59
10215: PPUSH
10216: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10220: LD_EXP 23
10224: PPUSH
10225: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10229: LD_EXP 24
10233: PPUSH
10234: LD_INT 65
10236: PPUSH
10237: LD_INT 58
10239: PPUSH
10240: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10244: LD_EXP 24
10248: PPUSH
10249: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10253: LD_EXP 25
10257: PPUSH
10258: LD_INT 64
10260: PPUSH
10261: LD_INT 57
10263: PPUSH
10264: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10268: LD_EXP 25
10272: PPUSH
10273: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10277: LD_EXP 26
10281: PPUSH
10282: LD_INT 64
10284: PPUSH
10285: LD_INT 56
10287: PPUSH
10288: CALL_OW 111
// AddComCrawl ( Balei ) ;
10292: LD_EXP 26
10296: PPUSH
10297: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10301: LD_EXP 27
10305: PPUSH
10306: LD_INT 63
10308: PPUSH
10309: LD_INT 55
10311: PPUSH
10312: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10316: LD_EXP 27
10320: PPUSH
10321: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10325: LD_EXP 28
10329: PPUSH
10330: LD_INT 66
10332: PPUSH
10333: LD_INT 58
10335: PPUSH
10336: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10340: LD_EXP 28
10344: PPUSH
10345: CALL_OW 197
// if hasGnyevko and IsOk ( Gnyevko ) then
10349: LD_EXP 4
10353: IFFALSE 10366
10355: PUSH
10356: LD_EXP 30
10360: PPUSH
10361: CALL_OW 302
10365: AND
10366: IFFALSE 10392
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10368: LD_EXP 30
10372: PPUSH
10373: LD_INT 63
10375: PPUSH
10376: LD_INT 54
10378: PPUSH
10379: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10383: LD_EXP 30
10387: PPUSH
10388: CALL_OW 197
// end ; end ; end_of_file
10392: LD_VAR 0 1
10396: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
// if exist_mode then
10401: LD_VAR 0 2
10405: IFFALSE 10451
// begin unit := CreateCharacter ( prefix & ident ) ;
10407: LD_ADDR_VAR 0 5
10411: PUSH
10412: LD_VAR 0 3
10416: PUSH
10417: LD_VAR 0 1
10421: STR
10422: PPUSH
10423: CALL_OW 34
10427: ST_TO_ADDR
// if unit then
10428: LD_VAR 0 5
10432: IFFALSE 10449
// DeleteCharacters ( prefix & ident ) ;
10434: LD_VAR 0 3
10438: PUSH
10439: LD_VAR 0 1
10443: STR
10444: PPUSH
10445: CALL_OW 40
// end else
10449: GO 10466
// unit := NewCharacter ( ident ) ;
10451: LD_ADDR_VAR 0 5
10455: PUSH
10456: LD_VAR 0 1
10460: PPUSH
10461: CALL_OW 25
10465: ST_TO_ADDR
// result := unit ;
10466: LD_ADDR_VAR 0 4
10470: PUSH
10471: LD_VAR 0 5
10475: ST_TO_ADDR
// end ;
10476: LD_VAR 0 4
10480: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
10481: LD_INT 0
10483: PPUSH
10484: PPUSH
// if exist_mode then
10485: LD_VAR 0 2
10489: IFFALSE 10514
// unit := CreateCharacter ( prefix & ident ) else
10491: LD_ADDR_VAR 0 5
10495: PUSH
10496: LD_VAR 0 3
10500: PUSH
10501: LD_VAR 0 1
10505: STR
10506: PPUSH
10507: CALL_OW 34
10511: ST_TO_ADDR
10512: GO 10529
// unit := NewCharacter ( ident ) ;
10514: LD_ADDR_VAR 0 5
10518: PUSH
10519: LD_VAR 0 1
10523: PPUSH
10524: CALL_OW 25
10528: ST_TO_ADDR
// result := unit ;
10529: LD_ADDR_VAR 0 4
10533: PUSH
10534: LD_VAR 0 5
10538: ST_TO_ADDR
// end ;
10539: LD_VAR 0 4
10543: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
10544: LD_INT 0
10546: PPUSH
10547: PPUSH
// if not side or not nation then
10548: LD_VAR 0 1
10552: NOT
10553: IFTRUE 10562
10555: PUSH
10556: LD_VAR 0 2
10560: NOT
10561: OR
10562: IFFALSE 10566
// exit ;
10564: GO 11360
// case nation of nation_american :
10566: LD_VAR 0 2
10570: PUSH
10571: LD_INT 1
10573: DOUBLE
10574: EQUAL
10575: IFTRUE 10579
10577: GO 10801
10579: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
10580: LD_ADDR_VAR 0 4
10584: PUSH
10585: LD_INT 35
10587: PUSH
10588: LD_INT 45
10590: PUSH
10591: LD_INT 46
10593: PUSH
10594: LD_INT 47
10596: PUSH
10597: LD_INT 82
10599: PUSH
10600: LD_INT 83
10602: PUSH
10603: LD_INT 84
10605: PUSH
10606: LD_INT 85
10608: PUSH
10609: LD_INT 86
10611: PUSH
10612: LD_INT 1
10614: PUSH
10615: LD_INT 2
10617: PUSH
10618: LD_INT 6
10620: PUSH
10621: LD_INT 15
10623: PUSH
10624: LD_INT 16
10626: PUSH
10627: LD_INT 7
10629: PUSH
10630: LD_INT 12
10632: PUSH
10633: LD_INT 13
10635: PUSH
10636: LD_INT 10
10638: PUSH
10639: LD_INT 14
10641: PUSH
10642: LD_INT 20
10644: PUSH
10645: LD_INT 21
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 25
10653: PUSH
10654: LD_INT 32
10656: PUSH
10657: LD_INT 27
10659: PUSH
10660: LD_INT 36
10662: PUSH
10663: LD_INT 69
10665: PUSH
10666: LD_INT 39
10668: PUSH
10669: LD_INT 34
10671: PUSH
10672: LD_INT 40
10674: PUSH
10675: LD_INT 48
10677: PUSH
10678: LD_INT 49
10680: PUSH
10681: LD_INT 50
10683: PUSH
10684: LD_INT 51
10686: PUSH
10687: LD_INT 52
10689: PUSH
10690: LD_INT 53
10692: PUSH
10693: LD_INT 54
10695: PUSH
10696: LD_INT 55
10698: PUSH
10699: LD_INT 56
10701: PUSH
10702: LD_INT 57
10704: PUSH
10705: LD_INT 58
10707: PUSH
10708: LD_INT 59
10710: PUSH
10711: LD_INT 60
10713: PUSH
10714: LD_INT 61
10716: PUSH
10717: LD_INT 62
10719: PUSH
10720: LD_INT 80
10722: PUSH
10723: LD_INT 82
10725: PUSH
10726: LD_INT 83
10728: PUSH
10729: LD_INT 84
10731: PUSH
10732: LD_INT 85
10734: PUSH
10735: LD_INT 86
10737: PUSH
10738: LD_INT 90
10740: PUSH
10741: LD_INT 93
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: LIST
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: ST_TO_ADDR
10799: GO 11282
10801: LD_INT 2
10803: DOUBLE
10804: EQUAL
10805: IFTRUE 10809
10807: GO 11043
10809: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
10810: LD_ADDR_VAR 0 4
10814: PUSH
10815: LD_INT 35
10817: PUSH
10818: LD_INT 45
10820: PUSH
10821: LD_INT 46
10823: PUSH
10824: LD_INT 47
10826: PUSH
10827: LD_INT 82
10829: PUSH
10830: LD_INT 83
10832: PUSH
10833: LD_INT 84
10835: PUSH
10836: LD_INT 85
10838: PUSH
10839: LD_INT 87
10841: PUSH
10842: LD_INT 70
10844: PUSH
10845: LD_INT 1
10847: PUSH
10848: LD_INT 11
10850: PUSH
10851: LD_INT 3
10853: PUSH
10854: LD_INT 4
10856: PUSH
10857: LD_INT 5
10859: PUSH
10860: LD_INT 6
10862: PUSH
10863: LD_INT 15
10865: PUSH
10866: LD_INT 18
10868: PUSH
10869: LD_INT 7
10871: PUSH
10872: LD_INT 17
10874: PUSH
10875: LD_INT 8
10877: PUSH
10878: LD_INT 20
10880: PUSH
10881: LD_INT 21
10883: PUSH
10884: LD_INT 22
10886: PUSH
10887: LD_INT 72
10889: PUSH
10890: LD_INT 26
10892: PUSH
10893: LD_INT 69
10895: PUSH
10896: LD_INT 39
10898: PUSH
10899: LD_INT 40
10901: PUSH
10902: LD_INT 41
10904: PUSH
10905: LD_INT 42
10907: PUSH
10908: LD_INT 43
10910: PUSH
10911: LD_INT 48
10913: PUSH
10914: LD_INT 49
10916: PUSH
10917: LD_INT 50
10919: PUSH
10920: LD_INT 51
10922: PUSH
10923: LD_INT 52
10925: PUSH
10926: LD_INT 53
10928: PUSH
10929: LD_INT 54
10931: PUSH
10932: LD_INT 55
10934: PUSH
10935: LD_INT 56
10937: PUSH
10938: LD_INT 60
10940: PUSH
10941: LD_INT 61
10943: PUSH
10944: LD_INT 62
10946: PUSH
10947: LD_INT 66
10949: PUSH
10950: LD_INT 67
10952: PUSH
10953: LD_INT 68
10955: PUSH
10956: LD_INT 81
10958: PUSH
10959: LD_INT 82
10961: PUSH
10962: LD_INT 83
10964: PUSH
10965: LD_INT 84
10967: PUSH
10968: LD_INT 85
10970: PUSH
10971: LD_INT 87
10973: PUSH
10974: LD_INT 88
10976: PUSH
10977: LD_INT 92
10979: PUSH
10980: LD_INT 94
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: LIST
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: ST_TO_ADDR
11041: GO 11282
11043: LD_INT 3
11045: DOUBLE
11046: EQUAL
11047: IFTRUE 11051
11049: GO 11281
11051: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
11052: LD_ADDR_VAR 0 4
11056: PUSH
11057: LD_INT 46
11059: PUSH
11060: LD_INT 47
11062: PUSH
11063: LD_INT 1
11065: PUSH
11066: LD_INT 2
11068: PUSH
11069: LD_INT 82
11071: PUSH
11072: LD_INT 83
11074: PUSH
11075: LD_INT 84
11077: PUSH
11078: LD_INT 85
11080: PUSH
11081: LD_INT 86
11083: PUSH
11084: LD_INT 11
11086: PUSH
11087: LD_INT 9
11089: PUSH
11090: LD_INT 20
11092: PUSH
11093: LD_INT 19
11095: PUSH
11096: LD_INT 21
11098: PUSH
11099: LD_INT 24
11101: PUSH
11102: LD_INT 22
11104: PUSH
11105: LD_INT 25
11107: PUSH
11108: LD_INT 28
11110: PUSH
11111: LD_INT 29
11113: PUSH
11114: LD_INT 30
11116: PUSH
11117: LD_INT 31
11119: PUSH
11120: LD_INT 37
11122: PUSH
11123: LD_INT 38
11125: PUSH
11126: LD_INT 32
11128: PUSH
11129: LD_INT 27
11131: PUSH
11132: LD_INT 33
11134: PUSH
11135: LD_INT 69
11137: PUSH
11138: LD_INT 39
11140: PUSH
11141: LD_INT 34
11143: PUSH
11144: LD_INT 40
11146: PUSH
11147: LD_INT 71
11149: PUSH
11150: LD_INT 23
11152: PUSH
11153: LD_INT 44
11155: PUSH
11156: LD_INT 48
11158: PUSH
11159: LD_INT 49
11161: PUSH
11162: LD_INT 50
11164: PUSH
11165: LD_INT 51
11167: PUSH
11168: LD_INT 52
11170: PUSH
11171: LD_INT 53
11173: PUSH
11174: LD_INT 54
11176: PUSH
11177: LD_INT 55
11179: PUSH
11180: LD_INT 56
11182: PUSH
11183: LD_INT 57
11185: PUSH
11186: LD_INT 58
11188: PUSH
11189: LD_INT 59
11191: PUSH
11192: LD_INT 63
11194: PUSH
11195: LD_INT 64
11197: PUSH
11198: LD_INT 65
11200: PUSH
11201: LD_INT 82
11203: PUSH
11204: LD_INT 83
11206: PUSH
11207: LD_INT 84
11209: PUSH
11210: LD_INT 85
11212: PUSH
11213: LD_INT 86
11215: PUSH
11216: LD_INT 89
11218: PUSH
11219: LD_INT 91
11221: PUSH
11222: EMPTY
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: LIST
11277: LIST
11278: ST_TO_ADDR
11279: GO 11282
11281: POP
// if state > - 1 and state < 3 then
11282: LD_VAR 0 3
11286: PUSH
11287: LD_INT 1
11289: NEG
11290: GREATER
11291: IFFALSE 11303
11293: PUSH
11294: LD_VAR 0 3
11298: PUSH
11299: LD_INT 3
11301: LESS
11302: AND
11303: IFFALSE 11360
// for i in result do
11305: LD_ADDR_VAR 0 5
11309: PUSH
11310: LD_VAR 0 4
11314: PUSH
11315: FOR_IN
11316: IFFALSE 11358
// if GetTech ( i , side ) <> state then
11318: LD_VAR 0 5
11322: PPUSH
11323: LD_VAR 0 1
11327: PPUSH
11328: CALL_OW 321
11332: PUSH
11333: LD_VAR 0 3
11337: NONEQUAL
11338: IFFALSE 11356
// result := result diff i ;
11340: LD_ADDR_VAR 0 4
11344: PUSH
11345: LD_VAR 0 4
11349: PUSH
11350: LD_VAR 0 5
11354: DIFF
11355: ST_TO_ADDR
11356: GO 11315
11358: POP
11359: POP
// end ;
11360: LD_VAR 0 4
11364: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
11365: LD_INT 0
11367: PPUSH
11368: PPUSH
11369: PPUSH
// result := true ;
11370: LD_ADDR_VAR 0 3
11374: PUSH
11375: LD_INT 1
11377: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
11378: LD_ADDR_VAR 0 5
11382: PUSH
11383: LD_VAR 0 2
11387: PPUSH
11388: CALL_OW 480
11392: ST_TO_ADDR
// if not tmp then
11393: LD_VAR 0 5
11397: NOT
11398: IFFALSE 11402
// exit ;
11400: GO 11451
// for i in tmp do
11402: LD_ADDR_VAR 0 4
11406: PUSH
11407: LD_VAR 0 5
11411: PUSH
11412: FOR_IN
11413: IFFALSE 11449
// if GetTech ( i , side ) <> state_researched then
11415: LD_VAR 0 4
11419: PPUSH
11420: LD_VAR 0 1
11424: PPUSH
11425: CALL_OW 321
11429: PUSH
11430: LD_INT 2
11432: NONEQUAL
11433: IFFALSE 11447
// begin result := false ;
11435: LD_ADDR_VAR 0 3
11439: PUSH
11440: LD_INT 0
11442: ST_TO_ADDR
// exit ;
11443: POP
11444: POP
11445: GO 11451
// end ;
11447: GO 11412
11449: POP
11450: POP
// end ;
11451: LD_VAR 0 3
11455: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
11456: LD_INT 0
11458: PPUSH
11459: PPUSH
11460: PPUSH
11461: PPUSH
11462: PPUSH
11463: PPUSH
11464: PPUSH
11465: PPUSH
11466: PPUSH
11467: PPUSH
11468: PPUSH
11469: PPUSH
11470: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
11471: LD_VAR 0 1
11475: NOT
11476: IFTRUE 11493
11478: PUSH
11479: LD_VAR 0 1
11483: PPUSH
11484: CALL_OW 257
11488: PUSH
11489: LD_INT 9
11491: NONEQUAL
11492: OR
11493: IFFALSE 11497
// exit ;
11495: GO 12076
// side := GetSide ( unit ) ;
11497: LD_ADDR_VAR 0 9
11501: PUSH
11502: LD_VAR 0 1
11506: PPUSH
11507: CALL_OW 255
11511: ST_TO_ADDR
// tech_space := tech_spacanom ;
11512: LD_ADDR_VAR 0 12
11516: PUSH
11517: LD_INT 29
11519: ST_TO_ADDR
// tech_time := tech_taurad ;
11520: LD_ADDR_VAR 0 13
11524: PUSH
11525: LD_INT 28
11527: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
11528: LD_ADDR_VAR 0 11
11532: PUSH
11533: LD_VAR 0 1
11537: PPUSH
11538: CALL_OW 310
11542: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
11543: LD_VAR 0 11
11547: PPUSH
11548: CALL_OW 247
11552: PUSH
11553: LD_INT 2
11555: EQUAL
11556: IFFALSE 11560
// exit ;
11558: GO 12076
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11560: LD_ADDR_VAR 0 8
11564: PUSH
11565: LD_INT 81
11567: PUSH
11568: LD_VAR 0 9
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 3
11579: PUSH
11580: LD_INT 21
11582: PUSH
11583: LD_INT 3
11585: PUSH
11586: EMPTY
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: PPUSH
11598: CALL_OW 69
11602: ST_TO_ADDR
// if not tmp then
11603: LD_VAR 0 8
11607: NOT
11608: IFFALSE 11612
// exit ;
11610: GO 12076
// if in_unit then
11612: LD_VAR 0 11
11616: IFFALSE 11640
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
11618: LD_ADDR_VAR 0 10
11622: PUSH
11623: LD_VAR 0 8
11627: PPUSH
11628: LD_VAR 0 11
11632: PPUSH
11633: CALL_OW 74
11637: ST_TO_ADDR
11638: GO 11660
// enemy := NearestUnitToUnit ( tmp , unit ) ;
11640: LD_ADDR_VAR 0 10
11644: PUSH
11645: LD_VAR 0 8
11649: PPUSH
11650: LD_VAR 0 1
11654: PPUSH
11655: CALL_OW 74
11659: ST_TO_ADDR
// if not enemy then
11660: LD_VAR 0 10
11664: NOT
11665: IFFALSE 11669
// exit ;
11667: GO 12076
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
11669: LD_VAR 0 11
11673: IFFALSE 11695
11675: PUSH
11676: LD_VAR 0 11
11680: PPUSH
11681: LD_VAR 0 10
11685: PPUSH
11686: CALL_OW 296
11690: PUSH
11691: LD_INT 13
11693: GREATER
11694: AND
11695: IFTRUE 11717
11697: PUSH
11698: LD_VAR 0 1
11702: PPUSH
11703: LD_VAR 0 10
11707: PPUSH
11708: CALL_OW 296
11712: PUSH
11713: LD_INT 12
11715: GREATER
11716: OR
11717: IFFALSE 11721
// exit ;
11719: GO 12076
// missile := [ 1 ] ;
11721: LD_ADDR_VAR 0 14
11725: PUSH
11726: LD_INT 1
11728: PUSH
11729: EMPTY
11730: LIST
11731: ST_TO_ADDR
// if Researched ( side , tech_space ) then
11732: LD_VAR 0 9
11736: PPUSH
11737: LD_VAR 0 12
11741: PPUSH
11742: CALL_OW 325
11746: IFFALSE 11775
// missile := Replace ( missile , missile + 1 , 2 ) ;
11748: LD_ADDR_VAR 0 14
11752: PUSH
11753: LD_VAR 0 14
11757: PPUSH
11758: LD_VAR 0 14
11762: PUSH
11763: LD_INT 1
11765: PLUS
11766: PPUSH
11767: LD_INT 2
11769: PPUSH
11770: CALL_OW 1
11774: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
11775: LD_VAR 0 9
11779: PPUSH
11780: LD_VAR 0 13
11784: PPUSH
11785: CALL_OW 325
11789: IFFALSE 11813
11791: PUSH
11792: LD_VAR 0 10
11796: PPUSH
11797: CALL_OW 255
11801: PPUSH
11802: LD_VAR 0 13
11806: PPUSH
11807: CALL_OW 325
11811: NOT
11812: AND
11813: IFFALSE 11842
// missile := Replace ( missile , missile + 1 , 3 ) ;
11815: LD_ADDR_VAR 0 14
11819: PUSH
11820: LD_VAR 0 14
11824: PPUSH
11825: LD_VAR 0 14
11829: PUSH
11830: LD_INT 1
11832: PLUS
11833: PPUSH
11834: LD_INT 3
11836: PPUSH
11837: CALL_OW 1
11841: ST_TO_ADDR
// if missile < 2 then
11842: LD_VAR 0 14
11846: PUSH
11847: LD_INT 2
11849: LESS
11850: IFFALSE 11854
// exit ;
11852: GO 12076
// x := GetX ( enemy ) ;
11854: LD_ADDR_VAR 0 4
11858: PUSH
11859: LD_VAR 0 10
11863: PPUSH
11864: CALL_OW 250
11868: ST_TO_ADDR
// y := GetY ( enemy ) ;
11869: LD_ADDR_VAR 0 5
11873: PUSH
11874: LD_VAR 0 10
11878: PPUSH
11879: CALL_OW 251
11883: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
11884: LD_ADDR_VAR 0 6
11888: PUSH
11889: LD_VAR 0 4
11893: PUSH
11894: LD_INT 1
11896: NEG
11897: PPUSH
11898: LD_INT 1
11900: PPUSH
11901: CALL_OW 12
11905: PLUS
11906: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
11907: LD_ADDR_VAR 0 7
11911: PUSH
11912: LD_VAR 0 5
11916: PUSH
11917: LD_INT 1
11919: NEG
11920: PPUSH
11921: LD_INT 1
11923: PPUSH
11924: CALL_OW 12
11928: PLUS
11929: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
11930: LD_VAR 0 6
11934: PPUSH
11935: LD_VAR 0 7
11939: PPUSH
11940: CALL_OW 488
11944: NOT
11945: IFFALSE 11967
// begin _x := x ;
11947: LD_ADDR_VAR 0 6
11951: PUSH
11952: LD_VAR 0 4
11956: ST_TO_ADDR
// _y := y ;
11957: LD_ADDR_VAR 0 7
11961: PUSH
11962: LD_VAR 0 5
11966: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
11967: LD_ADDR_VAR 0 3
11971: PUSH
11972: LD_INT 1
11974: PPUSH
11975: LD_VAR 0 14
11979: PPUSH
11980: CALL_OW 12
11984: ST_TO_ADDR
// case i of 1 :
11985: LD_VAR 0 3
11989: PUSH
11990: LD_INT 1
11992: DOUBLE
11993: EQUAL
11994: IFTRUE 11998
11996: GO 12015
11998: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
11999: LD_VAR 0 1
12003: PPUSH
12004: LD_VAR 0 10
12008: PPUSH
12009: CALL_OW 115
12013: GO 12076
12015: LD_INT 2
12017: DOUBLE
12018: EQUAL
12019: IFTRUE 12023
12021: GO 12045
12023: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
12024: LD_VAR 0 1
12028: PPUSH
12029: LD_VAR 0 6
12033: PPUSH
12034: LD_VAR 0 7
12038: PPUSH
12039: CALL_OW 153
12043: GO 12076
12045: LD_INT 3
12047: DOUBLE
12048: EQUAL
12049: IFTRUE 12053
12051: GO 12075
12053: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
12054: LD_VAR 0 1
12058: PPUSH
12059: LD_VAR 0 6
12063: PPUSH
12064: LD_VAR 0 7
12068: PPUSH
12069: CALL_OW 154
12073: GO 12076
12075: POP
// end ;
12076: LD_VAR 0 2
12080: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
12081: LD_INT 0
12083: PPUSH
12084: PPUSH
12085: PPUSH
12086: PPUSH
12087: PPUSH
12088: PPUSH
// if not unit or not building then
12089: LD_VAR 0 1
12093: NOT
12094: IFTRUE 12103
12096: PUSH
12097: LD_VAR 0 2
12101: NOT
12102: OR
12103: IFFALSE 12107
// exit ;
12105: GO 12265
// x := GetX ( building ) ;
12107: LD_ADDR_VAR 0 5
12111: PUSH
12112: LD_VAR 0 2
12116: PPUSH
12117: CALL_OW 250
12121: ST_TO_ADDR
// y := GetY ( building ) ;
12122: LD_ADDR_VAR 0 6
12126: PUSH
12127: LD_VAR 0 2
12131: PPUSH
12132: CALL_OW 251
12136: ST_TO_ADDR
// for i := 0 to 5 do
12137: LD_ADDR_VAR 0 4
12141: PUSH
12142: DOUBLE
12143: LD_INT 0
12145: DEC
12146: ST_TO_ADDR
12147: LD_INT 5
12149: PUSH
12150: FOR_TO
12151: IFFALSE 12263
// begin _x := ShiftX ( x , i , 3 ) ;
12153: LD_ADDR_VAR 0 7
12157: PUSH
12158: LD_VAR 0 5
12162: PPUSH
12163: LD_VAR 0 4
12167: PPUSH
12168: LD_INT 3
12170: PPUSH
12171: CALL_OW 272
12175: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
12176: LD_ADDR_VAR 0 8
12180: PUSH
12181: LD_VAR 0 6
12185: PPUSH
12186: LD_VAR 0 4
12190: PPUSH
12191: LD_INT 3
12193: PPUSH
12194: CALL_OW 273
12198: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
12199: LD_VAR 0 7
12203: PPUSH
12204: LD_VAR 0 8
12208: PPUSH
12209: CALL_OW 488
12213: NOT
12214: IFFALSE 12218
// continue ;
12216: GO 12150
// if HexInfo ( _x , _y ) = 0 then
12218: LD_VAR 0 7
12222: PPUSH
12223: LD_VAR 0 8
12227: PPUSH
12228: CALL_OW 428
12232: PUSH
12233: LD_INT 0
12235: EQUAL
12236: IFFALSE 12261
// begin ComMoveXY ( unit , _x , _y ) ;
12238: LD_VAR 0 1
12242: PPUSH
12243: LD_VAR 0 7
12247: PPUSH
12248: LD_VAR 0 8
12252: PPUSH
12253: CALL_OW 111
// exit ;
12257: POP
12258: POP
12259: GO 12265
// end ; end ;
12261: GO 12150
12263: POP
12264: POP
// end ;
12265: LD_VAR 0 3
12269: RET
// export function ScanBase ( side , base_area ) ; begin
12270: LD_INT 0
12272: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
12273: LD_ADDR_VAR 0 3
12277: PUSH
12278: LD_VAR 0 2
12282: PPUSH
12283: LD_INT 81
12285: PUSH
12286: LD_VAR 0 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: PPUSH
12295: CALL_OW 70
12299: ST_TO_ADDR
// end ;
12300: LD_VAR 0 3
12304: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
12305: LD_INT 0
12307: PPUSH
12308: PPUSH
12309: PPUSH
12310: PPUSH
// result := false ;
12311: LD_ADDR_VAR 0 2
12315: PUSH
12316: LD_INT 0
12318: ST_TO_ADDR
// side := GetSide ( unit ) ;
12319: LD_ADDR_VAR 0 3
12323: PUSH
12324: LD_VAR 0 1
12328: PPUSH
12329: CALL_OW 255
12333: ST_TO_ADDR
// nat := GetNation ( unit ) ;
12334: LD_ADDR_VAR 0 4
12338: PUSH
12339: LD_VAR 0 1
12343: PPUSH
12344: CALL_OW 248
12348: ST_TO_ADDR
// case nat of 1 :
12349: LD_VAR 0 4
12353: PUSH
12354: LD_INT 1
12356: DOUBLE
12357: EQUAL
12358: IFTRUE 12362
12360: GO 12373
12362: POP
// tech := tech_lassight ; 2 :
12363: LD_ADDR_VAR 0 5
12367: PUSH
12368: LD_INT 12
12370: ST_TO_ADDR
12371: GO 12412
12373: LD_INT 2
12375: DOUBLE
12376: EQUAL
12377: IFTRUE 12381
12379: GO 12392
12381: POP
// tech := tech_mortar ; 3 :
12382: LD_ADDR_VAR 0 5
12386: PUSH
12387: LD_INT 41
12389: ST_TO_ADDR
12390: GO 12412
12392: LD_INT 3
12394: DOUBLE
12395: EQUAL
12396: IFTRUE 12400
12398: GO 12411
12400: POP
// tech := tech_bazooka ; end ;
12401: LD_ADDR_VAR 0 5
12405: PUSH
12406: LD_INT 44
12408: ST_TO_ADDR
12409: GO 12412
12411: POP
// if Researched ( side , tech ) then
12412: LD_VAR 0 3
12416: PPUSH
12417: LD_VAR 0 5
12421: PPUSH
12422: CALL_OW 325
12426: IFFALSE 12453
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
12428: LD_ADDR_VAR 0 2
12432: PUSH
12433: LD_INT 5
12435: PUSH
12436: LD_INT 8
12438: PUSH
12439: LD_INT 9
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: LD_VAR 0 4
12451: ARRAY
12452: ST_TO_ADDR
// end ;
12453: LD_VAR 0 2
12457: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
12458: LD_INT 0
12460: PPUSH
12461: PPUSH
12462: PPUSH
// if not mines then
12463: LD_VAR 0 2
12467: NOT
12468: IFFALSE 12472
// exit ;
12470: GO 12616
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
12472: LD_ADDR_VAR 0 5
12476: PUSH
12477: LD_INT 81
12479: PUSH
12480: LD_VAR 0 1
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 3
12491: PUSH
12492: LD_INT 21
12494: PUSH
12495: LD_INT 3
12497: PUSH
12498: EMPTY
12499: LIST
12500: LIST
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: PPUSH
12510: CALL_OW 69
12514: ST_TO_ADDR
// for i in mines do
12515: LD_ADDR_VAR 0 4
12519: PUSH
12520: LD_VAR 0 2
12524: PUSH
12525: FOR_IN
12526: IFFALSE 12614
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
12528: LD_VAR 0 4
12532: PUSH
12533: LD_INT 1
12535: ARRAY
12536: PPUSH
12537: LD_VAR 0 4
12541: PUSH
12542: LD_INT 2
12544: ARRAY
12545: PPUSH
12546: CALL_OW 458
12550: NOT
12551: IFFALSE 12555
// continue ;
12553: GO 12525
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
12555: LD_VAR 0 4
12559: PUSH
12560: LD_INT 1
12562: ARRAY
12563: PPUSH
12564: LD_VAR 0 4
12568: PUSH
12569: LD_INT 2
12571: ARRAY
12572: PPUSH
12573: CALL_OW 428
12577: PUSH
12578: LD_VAR 0 5
12582: IN
12583: IFFALSE 12612
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
12585: LD_VAR 0 4
12589: PUSH
12590: LD_INT 1
12592: ARRAY
12593: PPUSH
12594: LD_VAR 0 4
12598: PUSH
12599: LD_INT 2
12601: ARRAY
12602: PPUSH
12603: LD_VAR 0 1
12607: PPUSH
12608: CALL_OW 456
// end ;
12612: GO 12525
12614: POP
12615: POP
// end ;
12616: LD_VAR 0 3
12620: RET
// export function Count ( array ) ; begin
12621: LD_INT 0
12623: PPUSH
// result := array + 0 ;
12624: LD_ADDR_VAR 0 2
12628: PUSH
12629: LD_VAR 0 1
12633: PUSH
12634: LD_INT 0
12636: PLUS
12637: ST_TO_ADDR
// end ;
12638: LD_VAR 0 2
12642: RET
// export function IsEmpty ( building ) ; begin
12643: LD_INT 0
12645: PPUSH
// if not building then
12646: LD_VAR 0 1
12650: NOT
12651: IFFALSE 12655
// exit ;
12653: GO 12698
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
12655: LD_ADDR_VAR 0 2
12659: PUSH
12660: LD_VAR 0 1
12664: PUSH
12665: LD_INT 22
12667: PUSH
12668: LD_VAR 0 1
12672: PPUSH
12673: CALL_OW 255
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 58
12684: PUSH
12685: EMPTY
12686: LIST
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: PPUSH
12692: CALL_OW 69
12696: IN
12697: ST_TO_ADDR
// end ;
12698: LD_VAR 0 2
12702: RET
// export function IsNotFull ( building ) ; var places ; begin
12703: LD_INT 0
12705: PPUSH
12706: PPUSH
// if not building then
12707: LD_VAR 0 1
12711: NOT
12712: IFFALSE 12716
// exit ;
12714: GO 12744
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
12716: LD_ADDR_VAR 0 2
12720: PUSH
12721: LD_VAR 0 1
12725: PPUSH
12726: LD_INT 3
12728: PUSH
12729: LD_INT 62
12731: PUSH
12732: EMPTY
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 72
12743: ST_TO_ADDR
// end ;
12744: LD_VAR 0 2
12748: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
12749: LD_INT 0
12751: PPUSH
12752: PPUSH
12753: PPUSH
12754: PPUSH
// tmp := [ ] ;
12755: LD_ADDR_VAR 0 3
12759: PUSH
12760: EMPTY
12761: ST_TO_ADDR
// list := [ ] ;
12762: LD_ADDR_VAR 0 5
12766: PUSH
12767: EMPTY
12768: ST_TO_ADDR
// for i = 16 to 25 do
12769: LD_ADDR_VAR 0 4
12773: PUSH
12774: DOUBLE
12775: LD_INT 16
12777: DEC
12778: ST_TO_ADDR
12779: LD_INT 25
12781: PUSH
12782: FOR_TO
12783: IFFALSE 12856
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
12785: LD_ADDR_VAR 0 3
12789: PUSH
12790: LD_VAR 0 3
12794: PUSH
12795: LD_INT 22
12797: PUSH
12798: LD_VAR 0 1
12802: PPUSH
12803: CALL_OW 255
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 91
12814: PUSH
12815: LD_VAR 0 1
12819: PUSH
12820: LD_INT 6
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: PUSH
12828: LD_INT 30
12830: PUSH
12831: LD_VAR 0 4
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: EMPTY
12846: LIST
12847: PPUSH
12848: CALL_OW 69
12852: ADD
12853: ST_TO_ADDR
12854: GO 12782
12856: POP
12857: POP
// for i = 1 to tmp do
12858: LD_ADDR_VAR 0 4
12862: PUSH
12863: DOUBLE
12864: LD_INT 1
12866: DEC
12867: ST_TO_ADDR
12868: LD_VAR 0 3
12872: PUSH
12873: FOR_TO
12874: IFFALSE 12962
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
12876: LD_ADDR_VAR 0 5
12880: PUSH
12881: LD_VAR 0 5
12885: PUSH
12886: LD_VAR 0 3
12890: PUSH
12891: LD_VAR 0 4
12895: ARRAY
12896: PPUSH
12897: CALL_OW 266
12901: PUSH
12902: LD_VAR 0 3
12906: PUSH
12907: LD_VAR 0 4
12911: ARRAY
12912: PPUSH
12913: CALL_OW 250
12917: PUSH
12918: LD_VAR 0 3
12922: PUSH
12923: LD_VAR 0 4
12927: ARRAY
12928: PPUSH
12929: CALL_OW 251
12933: PUSH
12934: LD_VAR 0 3
12938: PUSH
12939: LD_VAR 0 4
12943: ARRAY
12944: PPUSH
12945: CALL_OW 254
12949: PUSH
12950: EMPTY
12951: LIST
12952: LIST
12953: LIST
12954: LIST
12955: PUSH
12956: EMPTY
12957: LIST
12958: ADD
12959: ST_TO_ADDR
12960: GO 12873
12962: POP
12963: POP
// result := list ;
12964: LD_ADDR_VAR 0 2
12968: PUSH
12969: LD_VAR 0 5
12973: ST_TO_ADDR
// end ;
12974: LD_VAR 0 2
12978: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
12979: LD_INT 0
12981: PPUSH
12982: PPUSH
12983: PPUSH
12984: PPUSH
12985: PPUSH
12986: PPUSH
12987: PPUSH
// if not factory then
12988: LD_VAR 0 1
12992: NOT
12993: IFFALSE 12997
// exit ;
12995: GO 13600
// if control = control_apeman then
12997: LD_VAR 0 4
13001: PUSH
13002: LD_INT 5
13004: EQUAL
13005: IFFALSE 13114
// begin tmp := UnitsInside ( factory ) ;
13007: LD_ADDR_VAR 0 8
13011: PUSH
13012: LD_VAR 0 1
13016: PPUSH
13017: CALL_OW 313
13021: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
13022: LD_VAR 0 8
13026: PPUSH
13027: LD_INT 25
13029: PUSH
13030: LD_INT 12
13032: PUSH
13033: EMPTY
13034: LIST
13035: LIST
13036: PPUSH
13037: CALL_OW 72
13041: NOT
13042: IFFALSE 13052
// control := control_manual ;
13044: LD_ADDR_VAR 0 4
13048: PUSH
13049: LD_INT 1
13051: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
13052: LD_ADDR_VAR 0 8
13056: PUSH
13057: LD_VAR 0 1
13061: PPUSH
13062: CALL 12749 0 1
13066: ST_TO_ADDR
// if tmp then
13067: LD_VAR 0 8
13071: IFFALSE 13114
// begin for i in tmp do
13073: LD_ADDR_VAR 0 7
13077: PUSH
13078: LD_VAR 0 8
13082: PUSH
13083: FOR_IN
13084: IFFALSE 13112
// if i [ 1 ] = b_ext_radio then
13086: LD_VAR 0 7
13090: PUSH
13091: LD_INT 1
13093: ARRAY
13094: PUSH
13095: LD_INT 22
13097: EQUAL
13098: IFFALSE 13110
// begin control := control_remote ;
13100: LD_ADDR_VAR 0 4
13104: PUSH
13105: LD_INT 2
13107: ST_TO_ADDR
// break ;
13108: GO 13112
// end ;
13110: GO 13083
13112: POP
13113: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13114: LD_VAR 0 1
13118: PPUSH
13119: LD_VAR 0 2
13123: PPUSH
13124: LD_VAR 0 3
13128: PPUSH
13129: LD_VAR 0 4
13133: PPUSH
13134: LD_VAR 0 5
13138: PPUSH
13139: CALL_OW 448
13143: IFFALSE 13178
// begin result := [ chassis , engine , control , weapon ] ;
13145: LD_ADDR_VAR 0 6
13149: PUSH
13150: LD_VAR 0 2
13154: PUSH
13155: LD_VAR 0 3
13159: PUSH
13160: LD_VAR 0 4
13164: PUSH
13165: LD_VAR 0 5
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: ST_TO_ADDR
// exit ;
13176: GO 13600
// end ; _chassis := AvailableChassisList ( factory ) ;
13178: LD_ADDR_VAR 0 9
13182: PUSH
13183: LD_VAR 0 1
13187: PPUSH
13188: CALL_OW 475
13192: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
13193: LD_ADDR_VAR 0 11
13197: PUSH
13198: LD_VAR 0 1
13202: PPUSH
13203: CALL_OW 476
13207: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
13208: LD_ADDR_VAR 0 12
13212: PUSH
13213: LD_VAR 0 1
13217: PPUSH
13218: CALL_OW 477
13222: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
13223: LD_ADDR_VAR 0 10
13227: PUSH
13228: LD_VAR 0 1
13232: PPUSH
13233: CALL_OW 478
13237: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
13238: LD_VAR 0 9
13242: NOT
13243: IFTRUE 13252
13245: PUSH
13246: LD_VAR 0 11
13250: NOT
13251: OR
13252: IFTRUE 13261
13254: PUSH
13255: LD_VAR 0 12
13259: NOT
13260: OR
13261: IFTRUE 13270
13263: PUSH
13264: LD_VAR 0 10
13268: NOT
13269: OR
13270: IFFALSE 13305
// begin result := [ chassis , engine , control , weapon ] ;
13272: LD_ADDR_VAR 0 6
13276: PUSH
13277: LD_VAR 0 2
13281: PUSH
13282: LD_VAR 0 3
13286: PUSH
13287: LD_VAR 0 4
13291: PUSH
13292: LD_VAR 0 5
13296: PUSH
13297: EMPTY
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: ST_TO_ADDR
// exit ;
13303: GO 13600
// end ; if not chassis in _chassis then
13305: LD_VAR 0 2
13309: PUSH
13310: LD_VAR 0 9
13314: IN
13315: NOT
13316: IFFALSE 13342
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
13318: LD_ADDR_VAR 0 2
13322: PUSH
13323: LD_VAR 0 9
13327: PUSH
13328: LD_INT 1
13330: PPUSH
13331: LD_VAR 0 9
13335: PPUSH
13336: CALL_OW 12
13340: ARRAY
13341: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
13342: LD_VAR 0 2
13346: PPUSH
13347: LD_VAR 0 3
13351: PPUSH
13352: CALL 13605 0 2
13356: NOT
13357: IFFALSE 13418
// repeat engine := _engine [ 1 ] ;
13359: LD_ADDR_VAR 0 3
13363: PUSH
13364: LD_VAR 0 11
13368: PUSH
13369: LD_INT 1
13371: ARRAY
13372: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
13373: LD_ADDR_VAR 0 11
13377: PUSH
13378: LD_VAR 0 11
13382: PPUSH
13383: LD_INT 1
13385: PPUSH
13386: CALL_OW 3
13390: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
13391: LD_VAR 0 2
13395: PPUSH
13396: LD_VAR 0 3
13400: PPUSH
13401: CALL 13605 0 2
13405: IFTRUE 13416
13407: PUSH
13408: LD_VAR 0 11
13412: PUSH
13413: EMPTY
13414: EQUAL
13415: OR
13416: IFFALSE 13359
// if not control in _control then
13418: LD_VAR 0 4
13422: PUSH
13423: LD_VAR 0 12
13427: IN
13428: NOT
13429: IFFALSE 13455
// control := _control [ rand ( 1 , _control ) ] ;
13431: LD_ADDR_VAR 0 4
13435: PUSH
13436: LD_VAR 0 12
13440: PUSH
13441: LD_INT 1
13443: PPUSH
13444: LD_VAR 0 12
13448: PPUSH
13449: CALL_OW 12
13453: ARRAY
13454: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
13455: LD_VAR 0 2
13459: PPUSH
13460: LD_VAR 0 5
13464: PPUSH
13465: CALL 13827 0 2
13469: NOT
13470: IFFALSE 13531
// repeat weapon := _weapon [ 1 ] ;
13472: LD_ADDR_VAR 0 5
13476: PUSH
13477: LD_VAR 0 10
13481: PUSH
13482: LD_INT 1
13484: ARRAY
13485: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
13486: LD_ADDR_VAR 0 10
13490: PUSH
13491: LD_VAR 0 10
13495: PPUSH
13496: LD_INT 1
13498: PPUSH
13499: CALL_OW 3
13503: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
13504: LD_VAR 0 2
13508: PPUSH
13509: LD_VAR 0 5
13513: PPUSH
13514: CALL 13827 0 2
13518: IFTRUE 13529
13520: PUSH
13521: LD_VAR 0 10
13525: PUSH
13526: EMPTY
13527: EQUAL
13528: OR
13529: IFFALSE 13472
// result := [ ] ;
13531: LD_ADDR_VAR 0 6
13535: PUSH
13536: EMPTY
13537: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
13538: LD_VAR 0 1
13542: PPUSH
13543: LD_VAR 0 2
13547: PPUSH
13548: LD_VAR 0 3
13552: PPUSH
13553: LD_VAR 0 4
13557: PPUSH
13558: LD_VAR 0 5
13562: PPUSH
13563: CALL_OW 448
13567: IFFALSE 13600
// result := [ chassis , engine , control , weapon ] ;
13569: LD_ADDR_VAR 0 6
13573: PUSH
13574: LD_VAR 0 2
13578: PUSH
13579: LD_VAR 0 3
13583: PUSH
13584: LD_VAR 0 4
13588: PUSH
13589: LD_VAR 0 5
13593: PUSH
13594: EMPTY
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: ST_TO_ADDR
// end ;
13600: LD_VAR 0 6
13604: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
13605: LD_INT 0
13607: PPUSH
// if not chassis or not engine then
13608: LD_VAR 0 1
13612: NOT
13613: IFTRUE 13622
13615: PUSH
13616: LD_VAR 0 2
13620: NOT
13621: OR
13622: IFFALSE 13626
// exit ;
13624: GO 13822
// case engine of engine_solar :
13626: LD_VAR 0 2
13630: PUSH
13631: LD_INT 2
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13677
13639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: LD_INT 11
13647: PUSH
13648: LD_INT 12
13650: PUSH
13651: LD_INT 13
13653: PUSH
13654: LD_INT 14
13656: PUSH
13657: LD_INT 1
13659: PUSH
13660: LD_INT 2
13662: PUSH
13663: LD_INT 3
13665: PUSH
13666: EMPTY
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: ST_TO_ADDR
13675: GO 13806
13677: LD_INT 1
13679: DOUBLE
13680: EQUAL
13681: IFTRUE 13685
13683: GO 13747
13685: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
13686: LD_ADDR_VAR 0 3
13690: PUSH
13691: LD_INT 11
13693: PUSH
13694: LD_INT 12
13696: PUSH
13697: LD_INT 13
13699: PUSH
13700: LD_INT 14
13702: PUSH
13703: LD_INT 1
13705: PUSH
13706: LD_INT 2
13708: PUSH
13709: LD_INT 3
13711: PUSH
13712: LD_INT 4
13714: PUSH
13715: LD_INT 5
13717: PUSH
13718: LD_INT 21
13720: PUSH
13721: LD_INT 23
13723: PUSH
13724: LD_INT 22
13726: PUSH
13727: LD_INT 24
13729: PUSH
13730: EMPTY
13731: LIST
13732: LIST
13733: LIST
13734: LIST
13735: LIST
13736: LIST
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: ST_TO_ADDR
13745: GO 13806
13747: LD_INT 3
13749: DOUBLE
13750: EQUAL
13751: IFTRUE 13755
13753: GO 13805
13755: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13756: LD_ADDR_VAR 0 3
13760: PUSH
13761: LD_INT 13
13763: PUSH
13764: LD_INT 14
13766: PUSH
13767: LD_INT 2
13769: PUSH
13770: LD_INT 3
13772: PUSH
13773: LD_INT 4
13775: PUSH
13776: LD_INT 5
13778: PUSH
13779: LD_INT 21
13781: PUSH
13782: LD_INT 22
13784: PUSH
13785: LD_INT 23
13787: PUSH
13788: LD_INT 24
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: ST_TO_ADDR
13803: GO 13806
13805: POP
// result := ( chassis in result ) ;
13806: LD_ADDR_VAR 0 3
13810: PUSH
13811: LD_VAR 0 1
13815: PUSH
13816: LD_VAR 0 3
13820: IN
13821: ST_TO_ADDR
// end ;
13822: LD_VAR 0 3
13826: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
13827: LD_INT 0
13829: PPUSH
// if not chassis or not weapon then
13830: LD_VAR 0 1
13834: NOT
13835: IFTRUE 13844
13837: PUSH
13838: LD_VAR 0 2
13842: NOT
13843: OR
13844: IFFALSE 13848
// exit ;
13846: GO 14942
// case weapon of us_machine_gun :
13848: LD_VAR 0 2
13852: PUSH
13853: LD_INT 2
13855: DOUBLE
13856: EQUAL
13857: IFTRUE 13861
13859: GO 13891
13861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
13862: LD_ADDR_VAR 0 3
13866: PUSH
13867: LD_INT 1
13869: PUSH
13870: LD_INT 2
13872: PUSH
13873: LD_INT 3
13875: PUSH
13876: LD_INT 4
13878: PUSH
13879: LD_INT 5
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: ST_TO_ADDR
13889: GO 14926
13891: LD_INT 3
13893: DOUBLE
13894: EQUAL
13895: IFTRUE 13899
13897: GO 13929
13899: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
13900: LD_ADDR_VAR 0 3
13904: PUSH
13905: LD_INT 1
13907: PUSH
13908: LD_INT 2
13910: PUSH
13911: LD_INT 3
13913: PUSH
13914: LD_INT 4
13916: PUSH
13917: LD_INT 5
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: ST_TO_ADDR
13927: GO 14926
13929: LD_INT 11
13931: DOUBLE
13932: EQUAL
13933: IFTRUE 13937
13935: GO 13967
13937: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
13938: LD_ADDR_VAR 0 3
13942: PUSH
13943: LD_INT 1
13945: PUSH
13946: LD_INT 2
13948: PUSH
13949: LD_INT 3
13951: PUSH
13952: LD_INT 4
13954: PUSH
13955: LD_INT 5
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: ST_TO_ADDR
13965: GO 14926
13967: LD_INT 4
13969: DOUBLE
13970: EQUAL
13971: IFTRUE 13975
13973: GO 14001
13975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
13976: LD_ADDR_VAR 0 3
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 3
13986: PUSH
13987: LD_INT 4
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: ST_TO_ADDR
13999: GO 14926
14001: LD_INT 5
14003: DOUBLE
14004: EQUAL
14005: IFTRUE 14009
14007: GO 14035
14009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
14010: LD_ADDR_VAR 0 3
14014: PUSH
14015: LD_INT 2
14017: PUSH
14018: LD_INT 3
14020: PUSH
14021: LD_INT 4
14023: PUSH
14024: LD_INT 5
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: ST_TO_ADDR
14033: GO 14926
14035: LD_INT 9
14037: DOUBLE
14038: EQUAL
14039: IFTRUE 14043
14041: GO 14069
14043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
14044: LD_ADDR_VAR 0 3
14048: PUSH
14049: LD_INT 2
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: LD_INT 4
14057: PUSH
14058: LD_INT 5
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: ST_TO_ADDR
14067: GO 14926
14069: LD_INT 7
14071: DOUBLE
14072: EQUAL
14073: IFTRUE 14077
14075: GO 14103
14077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
14078: LD_ADDR_VAR 0 3
14082: PUSH
14083: LD_INT 2
14085: PUSH
14086: LD_INT 3
14088: PUSH
14089: LD_INT 4
14091: PUSH
14092: LD_INT 5
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: ST_TO_ADDR
14101: GO 14926
14103: LD_INT 12
14105: DOUBLE
14106: EQUAL
14107: IFTRUE 14111
14109: GO 14137
14111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
14112: LD_ADDR_VAR 0 3
14116: PUSH
14117: LD_INT 2
14119: PUSH
14120: LD_INT 3
14122: PUSH
14123: LD_INT 4
14125: PUSH
14126: LD_INT 5
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: LIST
14133: LIST
14134: ST_TO_ADDR
14135: GO 14926
14137: LD_INT 13
14139: DOUBLE
14140: EQUAL
14141: IFTRUE 14145
14143: GO 14171
14145: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
14146: LD_ADDR_VAR 0 3
14150: PUSH
14151: LD_INT 2
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 4
14159: PUSH
14160: LD_INT 5
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: LIST
14167: LIST
14168: ST_TO_ADDR
14169: GO 14926
14171: LD_INT 14
14173: DOUBLE
14174: EQUAL
14175: IFTRUE 14179
14177: GO 14197
14179: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
14180: LD_ADDR_VAR 0 3
14184: PUSH
14185: LD_INT 4
14187: PUSH
14188: LD_INT 5
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: ST_TO_ADDR
14195: GO 14926
14197: LD_INT 6
14199: DOUBLE
14200: EQUAL
14201: IFTRUE 14205
14203: GO 14223
14205: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
14206: LD_ADDR_VAR 0 3
14210: PUSH
14211: LD_INT 4
14213: PUSH
14214: LD_INT 5
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: ST_TO_ADDR
14221: GO 14926
14223: LD_INT 10
14225: DOUBLE
14226: EQUAL
14227: IFTRUE 14231
14229: GO 14249
14231: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
14232: LD_ADDR_VAR 0 3
14236: PUSH
14237: LD_INT 4
14239: PUSH
14240: LD_INT 5
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: ST_TO_ADDR
14247: GO 14926
14249: LD_INT 22
14251: DOUBLE
14252: EQUAL
14253: IFTRUE 14257
14255: GO 14283
14257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
14258: LD_ADDR_VAR 0 3
14262: PUSH
14263: LD_INT 11
14265: PUSH
14266: LD_INT 12
14268: PUSH
14269: LD_INT 13
14271: PUSH
14272: LD_INT 14
14274: PUSH
14275: EMPTY
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: ST_TO_ADDR
14281: GO 14926
14283: LD_INT 23
14285: DOUBLE
14286: EQUAL
14287: IFTRUE 14291
14289: GO 14317
14291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
14292: LD_ADDR_VAR 0 3
14296: PUSH
14297: LD_INT 11
14299: PUSH
14300: LD_INT 12
14302: PUSH
14303: LD_INT 13
14305: PUSH
14306: LD_INT 14
14308: PUSH
14309: EMPTY
14310: LIST
14311: LIST
14312: LIST
14313: LIST
14314: ST_TO_ADDR
14315: GO 14926
14317: LD_INT 24
14319: DOUBLE
14320: EQUAL
14321: IFTRUE 14325
14323: GO 14351
14325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
14326: LD_ADDR_VAR 0 3
14330: PUSH
14331: LD_INT 11
14333: PUSH
14334: LD_INT 12
14336: PUSH
14337: LD_INT 13
14339: PUSH
14340: LD_INT 14
14342: PUSH
14343: EMPTY
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: ST_TO_ADDR
14349: GO 14926
14351: LD_INT 30
14353: DOUBLE
14354: EQUAL
14355: IFTRUE 14359
14357: GO 14385
14359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
14360: LD_ADDR_VAR 0 3
14364: PUSH
14365: LD_INT 11
14367: PUSH
14368: LD_INT 12
14370: PUSH
14371: LD_INT 13
14373: PUSH
14374: LD_INT 14
14376: PUSH
14377: EMPTY
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: ST_TO_ADDR
14383: GO 14926
14385: LD_INT 25
14387: DOUBLE
14388: EQUAL
14389: IFTRUE 14393
14391: GO 14411
14393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
14394: LD_ADDR_VAR 0 3
14398: PUSH
14399: LD_INT 13
14401: PUSH
14402: LD_INT 14
14404: PUSH
14405: EMPTY
14406: LIST
14407: LIST
14408: ST_TO_ADDR
14409: GO 14926
14411: LD_INT 27
14413: DOUBLE
14414: EQUAL
14415: IFTRUE 14419
14417: GO 14437
14419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
14420: LD_ADDR_VAR 0 3
14424: PUSH
14425: LD_INT 13
14427: PUSH
14428: LD_INT 14
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: ST_TO_ADDR
14435: GO 14926
14437: LD_INT 92
14439: DOUBLE
14440: EQUAL
14441: IFTRUE 14445
14443: GO 14471
14445: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_INT 11
14453: PUSH
14454: LD_INT 12
14456: PUSH
14457: LD_INT 13
14459: PUSH
14460: LD_INT 14
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: ST_TO_ADDR
14469: GO 14926
14471: LD_INT 28
14473: DOUBLE
14474: EQUAL
14475: IFTRUE 14479
14477: GO 14497
14479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
14480: LD_ADDR_VAR 0 3
14484: PUSH
14485: LD_INT 13
14487: PUSH
14488: LD_INT 14
14490: PUSH
14491: EMPTY
14492: LIST
14493: LIST
14494: ST_TO_ADDR
14495: GO 14926
14497: LD_INT 29
14499: DOUBLE
14500: EQUAL
14501: IFTRUE 14505
14503: GO 14523
14505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
14506: LD_ADDR_VAR 0 3
14510: PUSH
14511: LD_INT 13
14513: PUSH
14514: LD_INT 14
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: ST_TO_ADDR
14521: GO 14926
14523: LD_INT 31
14525: DOUBLE
14526: EQUAL
14527: IFTRUE 14531
14529: GO 14549
14531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
14532: LD_ADDR_VAR 0 3
14536: PUSH
14537: LD_INT 13
14539: PUSH
14540: LD_INT 14
14542: PUSH
14543: EMPTY
14544: LIST
14545: LIST
14546: ST_TO_ADDR
14547: GO 14926
14549: LD_INT 26
14551: DOUBLE
14552: EQUAL
14553: IFTRUE 14557
14555: GO 14575
14557: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
14558: LD_ADDR_VAR 0 3
14562: PUSH
14563: LD_INT 13
14565: PUSH
14566: LD_INT 14
14568: PUSH
14569: EMPTY
14570: LIST
14571: LIST
14572: ST_TO_ADDR
14573: GO 14926
14575: LD_INT 42
14577: DOUBLE
14578: EQUAL
14579: IFTRUE 14583
14581: GO 14609
14583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
14584: LD_ADDR_VAR 0 3
14588: PUSH
14589: LD_INT 21
14591: PUSH
14592: LD_INT 22
14594: PUSH
14595: LD_INT 23
14597: PUSH
14598: LD_INT 24
14600: PUSH
14601: EMPTY
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: ST_TO_ADDR
14607: GO 14926
14609: LD_INT 43
14611: DOUBLE
14612: EQUAL
14613: IFTRUE 14617
14615: GO 14643
14617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
14618: LD_ADDR_VAR 0 3
14622: PUSH
14623: LD_INT 21
14625: PUSH
14626: LD_INT 22
14628: PUSH
14629: LD_INT 23
14631: PUSH
14632: LD_INT 24
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: ST_TO_ADDR
14641: GO 14926
14643: LD_INT 44
14645: DOUBLE
14646: EQUAL
14647: IFTRUE 14651
14649: GO 14677
14651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
14652: LD_ADDR_VAR 0 3
14656: PUSH
14657: LD_INT 21
14659: PUSH
14660: LD_INT 22
14662: PUSH
14663: LD_INT 23
14665: PUSH
14666: LD_INT 24
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: LIST
14674: ST_TO_ADDR
14675: GO 14926
14677: LD_INT 45
14679: DOUBLE
14680: EQUAL
14681: IFTRUE 14685
14683: GO 14711
14685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
14686: LD_ADDR_VAR 0 3
14690: PUSH
14691: LD_INT 21
14693: PUSH
14694: LD_INT 22
14696: PUSH
14697: LD_INT 23
14699: PUSH
14700: LD_INT 24
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: LIST
14707: LIST
14708: ST_TO_ADDR
14709: GO 14926
14711: LD_INT 49
14713: DOUBLE
14714: EQUAL
14715: IFTRUE 14719
14717: GO 14745
14719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
14720: LD_ADDR_VAR 0 3
14724: PUSH
14725: LD_INT 21
14727: PUSH
14728: LD_INT 22
14730: PUSH
14731: LD_INT 23
14733: PUSH
14734: LD_INT 24
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: ST_TO_ADDR
14743: GO 14926
14745: LD_INT 51
14747: DOUBLE
14748: EQUAL
14749: IFTRUE 14753
14751: GO 14779
14753: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
14754: LD_ADDR_VAR 0 3
14758: PUSH
14759: LD_INT 21
14761: PUSH
14762: LD_INT 22
14764: PUSH
14765: LD_INT 23
14767: PUSH
14768: LD_INT 24
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: ST_TO_ADDR
14777: GO 14926
14779: LD_INT 52
14781: DOUBLE
14782: EQUAL
14783: IFTRUE 14787
14785: GO 14813
14787: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
14788: LD_ADDR_VAR 0 3
14792: PUSH
14793: LD_INT 21
14795: PUSH
14796: LD_INT 22
14798: PUSH
14799: LD_INT 23
14801: PUSH
14802: LD_INT 24
14804: PUSH
14805: EMPTY
14806: LIST
14807: LIST
14808: LIST
14809: LIST
14810: ST_TO_ADDR
14811: GO 14926
14813: LD_INT 53
14815: DOUBLE
14816: EQUAL
14817: IFTRUE 14821
14819: GO 14839
14821: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
14822: LD_ADDR_VAR 0 3
14826: PUSH
14827: LD_INT 23
14829: PUSH
14830: LD_INT 24
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: ST_TO_ADDR
14837: GO 14926
14839: LD_INT 46
14841: DOUBLE
14842: EQUAL
14843: IFTRUE 14847
14845: GO 14865
14847: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
14848: LD_ADDR_VAR 0 3
14852: PUSH
14853: LD_INT 23
14855: PUSH
14856: LD_INT 24
14858: PUSH
14859: EMPTY
14860: LIST
14861: LIST
14862: ST_TO_ADDR
14863: GO 14926
14865: LD_INT 47
14867: DOUBLE
14868: EQUAL
14869: IFTRUE 14873
14871: GO 14891
14873: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
14874: LD_ADDR_VAR 0 3
14878: PUSH
14879: LD_INT 23
14881: PUSH
14882: LD_INT 24
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: ST_TO_ADDR
14889: GO 14926
14891: LD_INT 98
14893: DOUBLE
14894: EQUAL
14895: IFTRUE 14899
14897: GO 14925
14899: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
14900: LD_ADDR_VAR 0 3
14904: PUSH
14905: LD_INT 21
14907: PUSH
14908: LD_INT 22
14910: PUSH
14911: LD_INT 23
14913: PUSH
14914: LD_INT 24
14916: PUSH
14917: EMPTY
14918: LIST
14919: LIST
14920: LIST
14921: LIST
14922: ST_TO_ADDR
14923: GO 14926
14925: POP
// result := ( chassis in result ) ;
14926: LD_ADDR_VAR 0 3
14930: PUSH
14931: LD_VAR 0 1
14935: PUSH
14936: LD_VAR 0 3
14940: IN
14941: ST_TO_ADDR
// end ;
14942: LD_VAR 0 3
14946: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
14947: LD_INT 0
14949: PPUSH
14950: PPUSH
14951: PPUSH
14952: PPUSH
14953: PPUSH
14954: PPUSH
14955: PPUSH
// result := array ;
14956: LD_ADDR_VAR 0 5
14960: PUSH
14961: LD_VAR 0 1
14965: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
14966: LD_VAR 0 1
14970: NOT
14971: IFTRUE 14980
14973: PUSH
14974: LD_VAR 0 2
14978: NOT
14979: OR
14980: IFTRUE 14989
14982: PUSH
14983: LD_VAR 0 3
14987: NOT
14988: OR
14989: IFTRUE 15003
14991: PUSH
14992: LD_VAR 0 2
14996: PUSH
14997: LD_VAR 0 1
15001: GREATER
15002: OR
15003: IFTRUE 15017
15005: PUSH
15006: LD_VAR 0 3
15010: PUSH
15011: LD_VAR 0 1
15015: GREATER
15016: OR
15017: IFFALSE 15021
// exit ;
15019: GO 15317
// if direction then
15021: LD_VAR 0 4
15025: IFFALSE 15089
// begin d := 1 ;
15027: LD_ADDR_VAR 0 9
15031: PUSH
15032: LD_INT 1
15034: ST_TO_ADDR
// if i_from > i_to then
15035: LD_VAR 0 2
15039: PUSH
15040: LD_VAR 0 3
15044: GREATER
15045: IFFALSE 15071
// length := ( array - i_from ) + i_to else
15047: LD_ADDR_VAR 0 11
15051: PUSH
15052: LD_VAR 0 1
15056: PUSH
15057: LD_VAR 0 2
15061: MINUS
15062: PUSH
15063: LD_VAR 0 3
15067: PLUS
15068: ST_TO_ADDR
15069: GO 15087
// length := i_to - i_from ;
15071: LD_ADDR_VAR 0 11
15075: PUSH
15076: LD_VAR 0 3
15080: PUSH
15081: LD_VAR 0 2
15085: MINUS
15086: ST_TO_ADDR
// end else
15087: GO 15150
// begin d := - 1 ;
15089: LD_ADDR_VAR 0 9
15093: PUSH
15094: LD_INT 1
15096: NEG
15097: ST_TO_ADDR
// if i_from > i_to then
15098: LD_VAR 0 2
15102: PUSH
15103: LD_VAR 0 3
15107: GREATER
15108: IFFALSE 15128
// length := i_from - i_to else
15110: LD_ADDR_VAR 0 11
15114: PUSH
15115: LD_VAR 0 2
15119: PUSH
15120: LD_VAR 0 3
15124: MINUS
15125: ST_TO_ADDR
15126: GO 15150
// length := ( array - i_to ) + i_from ;
15128: LD_ADDR_VAR 0 11
15132: PUSH
15133: LD_VAR 0 1
15137: PUSH
15138: LD_VAR 0 3
15142: MINUS
15143: PUSH
15144: LD_VAR 0 2
15148: PLUS
15149: ST_TO_ADDR
// end ; if not length then
15150: LD_VAR 0 11
15154: NOT
15155: IFFALSE 15159
// exit ;
15157: GO 15317
// tmp := array ;
15159: LD_ADDR_VAR 0 10
15163: PUSH
15164: LD_VAR 0 1
15168: ST_TO_ADDR
// for i = 1 to length do
15169: LD_ADDR_VAR 0 6
15173: PUSH
15174: DOUBLE
15175: LD_INT 1
15177: DEC
15178: ST_TO_ADDR
15179: LD_VAR 0 11
15183: PUSH
15184: FOR_TO
15185: IFFALSE 15305
// begin for j = 1 to array do
15187: LD_ADDR_VAR 0 7
15191: PUSH
15192: DOUBLE
15193: LD_INT 1
15195: DEC
15196: ST_TO_ADDR
15197: LD_VAR 0 1
15201: PUSH
15202: FOR_TO
15203: IFFALSE 15291
// begin k := j + d ;
15205: LD_ADDR_VAR 0 8
15209: PUSH
15210: LD_VAR 0 7
15214: PUSH
15215: LD_VAR 0 9
15219: PLUS
15220: ST_TO_ADDR
// if k > array then
15221: LD_VAR 0 8
15225: PUSH
15226: LD_VAR 0 1
15230: GREATER
15231: IFFALSE 15241
// k := 1 ;
15233: LD_ADDR_VAR 0 8
15237: PUSH
15238: LD_INT 1
15240: ST_TO_ADDR
// if not k then
15241: LD_VAR 0 8
15245: NOT
15246: IFFALSE 15258
// k := array ;
15248: LD_ADDR_VAR 0 8
15252: PUSH
15253: LD_VAR 0 1
15257: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
15258: LD_ADDR_VAR 0 10
15262: PUSH
15263: LD_VAR 0 10
15267: PPUSH
15268: LD_VAR 0 8
15272: PPUSH
15273: LD_VAR 0 1
15277: PUSH
15278: LD_VAR 0 7
15282: ARRAY
15283: PPUSH
15284: CALL_OW 1
15288: ST_TO_ADDR
// end ;
15289: GO 15202
15291: POP
15292: POP
// array := tmp ;
15293: LD_ADDR_VAR 0 1
15297: PUSH
15298: LD_VAR 0 10
15302: ST_TO_ADDR
// end ;
15303: GO 15184
15305: POP
15306: POP
// result := array ;
15307: LD_ADDR_VAR 0 5
15311: PUSH
15312: LD_VAR 0 1
15316: ST_TO_ADDR
// end ;
15317: LD_VAR 0 5
15321: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
15322: LD_INT 0
15324: PPUSH
15325: PPUSH
// result := 0 ;
15326: LD_ADDR_VAR 0 3
15330: PUSH
15331: LD_INT 0
15333: ST_TO_ADDR
// if not array or not value in array then
15334: LD_VAR 0 1
15338: NOT
15339: IFTRUE 15354
15341: PUSH
15342: LD_VAR 0 2
15346: PUSH
15347: LD_VAR 0 1
15351: IN
15352: NOT
15353: OR
15354: IFFALSE 15358
// exit ;
15356: GO 15412
// for i = 1 to array do
15358: LD_ADDR_VAR 0 4
15362: PUSH
15363: DOUBLE
15364: LD_INT 1
15366: DEC
15367: ST_TO_ADDR
15368: LD_VAR 0 1
15372: PUSH
15373: FOR_TO
15374: IFFALSE 15410
// if value = array [ i ] then
15376: LD_VAR 0 2
15380: PUSH
15381: LD_VAR 0 1
15385: PUSH
15386: LD_VAR 0 4
15390: ARRAY
15391: EQUAL
15392: IFFALSE 15408
// begin result := i ;
15394: LD_ADDR_VAR 0 3
15398: PUSH
15399: LD_VAR 0 4
15403: ST_TO_ADDR
// exit ;
15404: POP
15405: POP
15406: GO 15412
// end ;
15408: GO 15373
15410: POP
15411: POP
// end ;
15412: LD_VAR 0 3
15416: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
15417: LD_INT 0
15419: PPUSH
// vc_chassis := chassis ;
15420: LD_ADDR_OWVAR 37
15424: PUSH
15425: LD_VAR 0 1
15429: ST_TO_ADDR
// vc_engine := engine ;
15430: LD_ADDR_OWVAR 39
15434: PUSH
15435: LD_VAR 0 2
15439: ST_TO_ADDR
// vc_control := control ;
15440: LD_ADDR_OWVAR 38
15444: PUSH
15445: LD_VAR 0 3
15449: ST_TO_ADDR
// vc_weapon := weapon ;
15450: LD_ADDR_OWVAR 40
15454: PUSH
15455: LD_VAR 0 4
15459: ST_TO_ADDR
// vc_fuel_battery := fuel ;
15460: LD_ADDR_OWVAR 41
15464: PUSH
15465: LD_VAR 0 5
15469: ST_TO_ADDR
// end ;
15470: LD_VAR 0 6
15474: RET
// export function WantPlant ( unit ) ; var task ; begin
15475: LD_INT 0
15477: PPUSH
15478: PPUSH
// result := false ;
15479: LD_ADDR_VAR 0 2
15483: PUSH
15484: LD_INT 0
15486: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
15487: LD_ADDR_VAR 0 3
15491: PUSH
15492: LD_VAR 0 1
15496: PPUSH
15497: CALL_OW 437
15501: ST_TO_ADDR
// if task then
15502: LD_VAR 0 3
15506: IFFALSE 15534
// if task [ 1 ] [ 1 ] = p then
15508: LD_VAR 0 3
15512: PUSH
15513: LD_INT 1
15515: ARRAY
15516: PUSH
15517: LD_INT 1
15519: ARRAY
15520: PUSH
15521: LD_STRING p
15523: EQUAL
15524: IFFALSE 15534
// result := true ;
15526: LD_ADDR_VAR 0 2
15530: PUSH
15531: LD_INT 1
15533: ST_TO_ADDR
// end ;
15534: LD_VAR 0 2
15538: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
15539: LD_INT 0
15541: PPUSH
15542: PPUSH
15543: PPUSH
15544: PPUSH
// if pos < 1 then
15545: LD_VAR 0 2
15549: PUSH
15550: LD_INT 1
15552: LESS
15553: IFFALSE 15557
// exit ;
15555: GO 15860
// if pos = 1 then
15557: LD_VAR 0 2
15561: PUSH
15562: LD_INT 1
15564: EQUAL
15565: IFFALSE 15598
// result := Replace ( arr , pos [ 1 ] , value ) else
15567: LD_ADDR_VAR 0 4
15571: PUSH
15572: LD_VAR 0 1
15576: PPUSH
15577: LD_VAR 0 2
15581: PUSH
15582: LD_INT 1
15584: ARRAY
15585: PPUSH
15586: LD_VAR 0 3
15590: PPUSH
15591: CALL_OW 1
15595: ST_TO_ADDR
15596: GO 15860
// begin tmp := arr ;
15598: LD_ADDR_VAR 0 6
15602: PUSH
15603: LD_VAR 0 1
15607: ST_TO_ADDR
// s_arr := [ tmp ] ;
15608: LD_ADDR_VAR 0 7
15612: PUSH
15613: LD_VAR 0 6
15617: PUSH
15618: EMPTY
15619: LIST
15620: ST_TO_ADDR
// for i = 1 to pos - 1 do
15621: LD_ADDR_VAR 0 5
15625: PUSH
15626: DOUBLE
15627: LD_INT 1
15629: DEC
15630: ST_TO_ADDR
15631: LD_VAR 0 2
15635: PUSH
15636: LD_INT 1
15638: MINUS
15639: PUSH
15640: FOR_TO
15641: IFFALSE 15686
// begin tmp := tmp [ pos [ i ] ] ;
15643: LD_ADDR_VAR 0 6
15647: PUSH
15648: LD_VAR 0 6
15652: PUSH
15653: LD_VAR 0 2
15657: PUSH
15658: LD_VAR 0 5
15662: ARRAY
15663: ARRAY
15664: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
15665: LD_ADDR_VAR 0 7
15669: PUSH
15670: LD_VAR 0 7
15674: PUSH
15675: LD_VAR 0 6
15679: PUSH
15680: EMPTY
15681: LIST
15682: ADD
15683: ST_TO_ADDR
// end ;
15684: GO 15640
15686: POP
15687: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
15688: LD_ADDR_VAR 0 6
15692: PUSH
15693: LD_VAR 0 6
15697: PPUSH
15698: LD_VAR 0 2
15702: PUSH
15703: LD_VAR 0 2
15707: ARRAY
15708: PPUSH
15709: LD_VAR 0 3
15713: PPUSH
15714: CALL_OW 1
15718: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
15719: LD_ADDR_VAR 0 7
15723: PUSH
15724: LD_VAR 0 7
15728: PPUSH
15729: LD_VAR 0 7
15733: PPUSH
15734: LD_VAR 0 6
15738: PPUSH
15739: CALL_OW 1
15743: ST_TO_ADDR
// for i = s_arr downto 2 do
15744: LD_ADDR_VAR 0 5
15748: PUSH
15749: DOUBLE
15750: LD_VAR 0 7
15754: INC
15755: ST_TO_ADDR
15756: LD_INT 2
15758: PUSH
15759: FOR_DOWNTO
15760: IFFALSE 15844
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
15762: LD_ADDR_VAR 0 6
15766: PUSH
15767: LD_VAR 0 7
15771: PUSH
15772: LD_VAR 0 5
15776: PUSH
15777: LD_INT 1
15779: MINUS
15780: ARRAY
15781: PPUSH
15782: LD_VAR 0 2
15786: PUSH
15787: LD_VAR 0 5
15791: PUSH
15792: LD_INT 1
15794: MINUS
15795: ARRAY
15796: PPUSH
15797: LD_VAR 0 7
15801: PUSH
15802: LD_VAR 0 5
15806: ARRAY
15807: PPUSH
15808: CALL_OW 1
15812: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
15813: LD_ADDR_VAR 0 7
15817: PUSH
15818: LD_VAR 0 7
15822: PPUSH
15823: LD_VAR 0 5
15827: PUSH
15828: LD_INT 1
15830: MINUS
15831: PPUSH
15832: LD_VAR 0 6
15836: PPUSH
15837: CALL_OW 1
15841: ST_TO_ADDR
// end ;
15842: GO 15759
15844: POP
15845: POP
// result := s_arr [ 1 ] ;
15846: LD_ADDR_VAR 0 4
15850: PUSH
15851: LD_VAR 0 7
15855: PUSH
15856: LD_INT 1
15858: ARRAY
15859: ST_TO_ADDR
// end ; end ;
15860: LD_VAR 0 4
15864: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
15865: LD_INT 0
15867: PPUSH
15868: PPUSH
// if not list then
15869: LD_VAR 0 1
15873: NOT
15874: IFFALSE 15878
// exit ;
15876: GO 15969
// i := list [ pos1 ] ;
15878: LD_ADDR_VAR 0 5
15882: PUSH
15883: LD_VAR 0 1
15887: PUSH
15888: LD_VAR 0 2
15892: ARRAY
15893: ST_TO_ADDR
// if not i then
15894: LD_VAR 0 5
15898: NOT
15899: IFFALSE 15903
// exit ;
15901: GO 15969
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 1
15912: PPUSH
15913: LD_VAR 0 2
15917: PPUSH
15918: LD_VAR 0 1
15922: PUSH
15923: LD_VAR 0 3
15927: ARRAY
15928: PPUSH
15929: CALL_OW 1
15933: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
15934: LD_ADDR_VAR 0 1
15938: PUSH
15939: LD_VAR 0 1
15943: PPUSH
15944: LD_VAR 0 3
15948: PPUSH
15949: LD_VAR 0 5
15953: PPUSH
15954: CALL_OW 1
15958: ST_TO_ADDR
// result := list ;
15959: LD_ADDR_VAR 0 4
15963: PUSH
15964: LD_VAR 0 1
15968: ST_TO_ADDR
// end ;
15969: LD_VAR 0 4
15973: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
15974: LD_INT 0
15976: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
15977: LD_ADDR_VAR 0 5
15981: PUSH
15982: LD_VAR 0 1
15986: PPUSH
15987: CALL_OW 250
15991: PPUSH
15992: LD_VAR 0 1
15996: PPUSH
15997: CALL_OW 251
16001: PPUSH
16002: LD_VAR 0 2
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: LD_VAR 0 4
16016: PPUSH
16017: CALL 16399 0 5
16021: ST_TO_ADDR
// end ;
16022: LD_VAR 0 5
16026: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
16027: LD_INT 0
16029: PPUSH
16030: PPUSH
16031: PPUSH
16032: PPUSH
// if not list or not unit then
16033: LD_VAR 0 2
16037: NOT
16038: IFTRUE 16047
16040: PUSH
16041: LD_VAR 0 1
16045: NOT
16046: OR
16047: IFFALSE 16051
// exit ;
16049: GO 16394
// result := [ ] ;
16051: LD_ADDR_VAR 0 5
16055: PUSH
16056: EMPTY
16057: ST_TO_ADDR
// for i in list do
16058: LD_ADDR_VAR 0 6
16062: PUSH
16063: LD_VAR 0 2
16067: PUSH
16068: FOR_IN
16069: IFFALSE 16287
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
16071: LD_ADDR_VAR 0 8
16075: PUSH
16076: LD_VAR 0 1
16080: PPUSH
16081: LD_VAR 0 6
16085: PUSH
16086: LD_INT 1
16088: ARRAY
16089: PPUSH
16090: LD_VAR 0 6
16094: PUSH
16095: LD_INT 2
16097: ARRAY
16098: PPUSH
16099: CALL_OW 297
16103: ST_TO_ADDR
// if not Count ( result ) then
16104: LD_VAR 0 5
16108: PPUSH
16109: CALL 12621 0 1
16113: NOT
16114: IFFALSE 16147
// begin result := Join ( result , [ i , tmp ] ) ;
16116: LD_ADDR_VAR 0 5
16120: PUSH
16121: LD_VAR 0 5
16125: PPUSH
16126: LD_VAR 0 6
16130: PUSH
16131: LD_VAR 0 8
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PPUSH
16140: CALL 48597 0 2
16144: ST_TO_ADDR
// continue ;
16145: GO 16068
// end ; if result [ result ] [ 2 ] <= tmp then
16147: LD_VAR 0 5
16151: PUSH
16152: LD_VAR 0 5
16156: ARRAY
16157: PUSH
16158: LD_INT 2
16160: ARRAY
16161: PUSH
16162: LD_VAR 0 8
16166: LESSEQUAL
16167: IFFALSE 16200
// result := Join ( result , [ i , tmp ] ) else
16169: LD_ADDR_VAR 0 5
16173: PUSH
16174: LD_VAR 0 5
16178: PPUSH
16179: LD_VAR 0 6
16183: PUSH
16184: LD_VAR 0 8
16188: PUSH
16189: EMPTY
16190: LIST
16191: LIST
16192: PPUSH
16193: CALL 48597 0 2
16197: ST_TO_ADDR
16198: GO 16285
// begin for j := 1 to Count ( result ) do
16200: LD_ADDR_VAR 0 7
16204: PUSH
16205: DOUBLE
16206: LD_INT 1
16208: DEC
16209: ST_TO_ADDR
16210: LD_VAR 0 5
16214: PPUSH
16215: CALL 12621 0 1
16219: PUSH
16220: FOR_TO
16221: IFFALSE 16283
// begin if tmp < result [ j ] [ 2 ] then
16223: LD_VAR 0 8
16227: PUSH
16228: LD_VAR 0 5
16232: PUSH
16233: LD_VAR 0 7
16237: ARRAY
16238: PUSH
16239: LD_INT 2
16241: ARRAY
16242: LESS
16243: IFFALSE 16281
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16245: LD_ADDR_VAR 0 5
16249: PUSH
16250: LD_VAR 0 5
16254: PPUSH
16255: LD_VAR 0 7
16259: PPUSH
16260: LD_VAR 0 6
16264: PUSH
16265: LD_VAR 0 8
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PPUSH
16274: CALL_OW 2
16278: ST_TO_ADDR
// break ;
16279: GO 16283
// end ; end ;
16281: GO 16220
16283: POP
16284: POP
// end ; end ;
16285: GO 16068
16287: POP
16288: POP
// if result and not asc then
16289: LD_VAR 0 5
16293: IFFALSE 16302
16295: PUSH
16296: LD_VAR 0 3
16300: NOT
16301: AND
16302: IFFALSE 16319
// result := ReverseArray ( result ) ;
16304: LD_ADDR_VAR 0 5
16308: PUSH
16309: LD_VAR 0 5
16313: PPUSH
16314: CALL 43677 0 1
16318: ST_TO_ADDR
// tmp := [ ] ;
16319: LD_ADDR_VAR 0 8
16323: PUSH
16324: EMPTY
16325: ST_TO_ADDR
// if mode then
16326: LD_VAR 0 4
16330: IFFALSE 16394
// begin for i := 1 to result do
16332: LD_ADDR_VAR 0 6
16336: PUSH
16337: DOUBLE
16338: LD_INT 1
16340: DEC
16341: ST_TO_ADDR
16342: LD_VAR 0 5
16346: PUSH
16347: FOR_TO
16348: IFFALSE 16382
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
16350: LD_ADDR_VAR 0 8
16354: PUSH
16355: LD_VAR 0 8
16359: PPUSH
16360: LD_VAR 0 5
16364: PUSH
16365: LD_VAR 0 6
16369: ARRAY
16370: PUSH
16371: LD_INT 1
16373: ARRAY
16374: PPUSH
16375: CALL 48597 0 2
16379: ST_TO_ADDR
16380: GO 16347
16382: POP
16383: POP
// result := tmp ;
16384: LD_ADDR_VAR 0 5
16388: PUSH
16389: LD_VAR 0 8
16393: ST_TO_ADDR
// end ; end ;
16394: LD_VAR 0 5
16398: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
16399: LD_INT 0
16401: PPUSH
16402: PPUSH
16403: PPUSH
16404: PPUSH
// if not list then
16405: LD_VAR 0 3
16409: NOT
16410: IFFALSE 16414
// exit ;
16412: GO 16804
// result := [ ] ;
16414: LD_ADDR_VAR 0 6
16418: PUSH
16419: EMPTY
16420: ST_TO_ADDR
// for i in list do
16421: LD_ADDR_VAR 0 7
16425: PUSH
16426: LD_VAR 0 3
16430: PUSH
16431: FOR_IN
16432: IFFALSE 16634
// begin tmp := GetDistUnitXY ( i , x , y ) ;
16434: LD_ADDR_VAR 0 9
16438: PUSH
16439: LD_VAR 0 7
16443: PPUSH
16444: LD_VAR 0 1
16448: PPUSH
16449: LD_VAR 0 2
16453: PPUSH
16454: CALL_OW 297
16458: ST_TO_ADDR
// if not result then
16459: LD_VAR 0 6
16463: NOT
16464: IFFALSE 16490
// result := [ [ i , tmp ] ] else
16466: LD_ADDR_VAR 0 6
16470: PUSH
16471: LD_VAR 0 7
16475: PUSH
16476: LD_VAR 0 9
16480: PUSH
16481: EMPTY
16482: LIST
16483: LIST
16484: PUSH
16485: EMPTY
16486: LIST
16487: ST_TO_ADDR
16488: GO 16632
// begin if result [ result ] [ 2 ] <= tmp then
16490: LD_VAR 0 6
16494: PUSH
16495: LD_VAR 0 6
16499: ARRAY
16500: PUSH
16501: LD_INT 2
16503: ARRAY
16504: PUSH
16505: LD_VAR 0 9
16509: LESSEQUAL
16510: IFFALSE 16552
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
16512: LD_ADDR_VAR 0 6
16516: PUSH
16517: LD_VAR 0 6
16521: PPUSH
16522: LD_VAR 0 6
16526: PUSH
16527: LD_INT 1
16529: PLUS
16530: PPUSH
16531: LD_VAR 0 7
16535: PUSH
16536: LD_VAR 0 9
16540: PUSH
16541: EMPTY
16542: LIST
16543: LIST
16544: PPUSH
16545: CALL_OW 2
16549: ST_TO_ADDR
16550: GO 16632
// for j := 1 to result do
16552: LD_ADDR_VAR 0 8
16556: PUSH
16557: DOUBLE
16558: LD_INT 1
16560: DEC
16561: ST_TO_ADDR
16562: LD_VAR 0 6
16566: PUSH
16567: FOR_TO
16568: IFFALSE 16630
// begin if tmp < result [ j ] [ 2 ] then
16570: LD_VAR 0 9
16574: PUSH
16575: LD_VAR 0 6
16579: PUSH
16580: LD_VAR 0 8
16584: ARRAY
16585: PUSH
16586: LD_INT 2
16588: ARRAY
16589: LESS
16590: IFFALSE 16628
// begin result := Insert ( result , j , [ i , tmp ] ) ;
16592: LD_ADDR_VAR 0 6
16596: PUSH
16597: LD_VAR 0 6
16601: PPUSH
16602: LD_VAR 0 8
16606: PPUSH
16607: LD_VAR 0 7
16611: PUSH
16612: LD_VAR 0 9
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: PPUSH
16621: CALL_OW 2
16625: ST_TO_ADDR
// break ;
16626: GO 16630
// end ; end ;
16628: GO 16567
16630: POP
16631: POP
// end ; end ;
16632: GO 16431
16634: POP
16635: POP
// if result and not asc then
16636: LD_VAR 0 6
16640: IFFALSE 16649
16642: PUSH
16643: LD_VAR 0 4
16647: NOT
16648: AND
16649: IFFALSE 16724
// begin tmp := result ;
16651: LD_ADDR_VAR 0 9
16655: PUSH
16656: LD_VAR 0 6
16660: ST_TO_ADDR
// for i = tmp downto 1 do
16661: LD_ADDR_VAR 0 7
16665: PUSH
16666: DOUBLE
16667: LD_VAR 0 9
16671: INC
16672: ST_TO_ADDR
16673: LD_INT 1
16675: PUSH
16676: FOR_DOWNTO
16677: IFFALSE 16722
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
16679: LD_ADDR_VAR 0 6
16683: PUSH
16684: LD_VAR 0 6
16688: PPUSH
16689: LD_VAR 0 9
16693: PUSH
16694: LD_VAR 0 7
16698: MINUS
16699: PUSH
16700: LD_INT 1
16702: PLUS
16703: PPUSH
16704: LD_VAR 0 9
16708: PUSH
16709: LD_VAR 0 7
16713: ARRAY
16714: PPUSH
16715: CALL_OW 1
16719: ST_TO_ADDR
16720: GO 16676
16722: POP
16723: POP
// end ; tmp := [ ] ;
16724: LD_ADDR_VAR 0 9
16728: PUSH
16729: EMPTY
16730: ST_TO_ADDR
// if mode then
16731: LD_VAR 0 5
16735: IFFALSE 16804
// begin for i = 1 to result do
16737: LD_ADDR_VAR 0 7
16741: PUSH
16742: DOUBLE
16743: LD_INT 1
16745: DEC
16746: ST_TO_ADDR
16747: LD_VAR 0 6
16751: PUSH
16752: FOR_TO
16753: IFFALSE 16792
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
16755: LD_ADDR_VAR 0 9
16759: PUSH
16760: LD_VAR 0 9
16764: PPUSH
16765: LD_VAR 0 7
16769: PPUSH
16770: LD_VAR 0 6
16774: PUSH
16775: LD_VAR 0 7
16779: ARRAY
16780: PUSH
16781: LD_INT 1
16783: ARRAY
16784: PPUSH
16785: CALL_OW 1
16789: ST_TO_ADDR
16790: GO 16752
16792: POP
16793: POP
// result := tmp ;
16794: LD_ADDR_VAR 0 6
16798: PUSH
16799: LD_VAR 0 9
16803: ST_TO_ADDR
// end ; end ;
16804: LD_VAR 0 6
16808: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
16809: LD_INT 0
16811: PPUSH
16812: PPUSH
16813: PPUSH
16814: PPUSH
16815: PPUSH
16816: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
16817: LD_ADDR_VAR 0 5
16821: PUSH
16822: LD_INT 0
16824: PUSH
16825: LD_INT 0
16827: PUSH
16828: LD_INT 0
16830: PUSH
16831: EMPTY
16832: PUSH
16833: EMPTY
16834: LIST
16835: LIST
16836: LIST
16837: LIST
16838: ST_TO_ADDR
// if not x or not y then
16839: LD_VAR 0 2
16843: NOT
16844: IFTRUE 16853
16846: PUSH
16847: LD_VAR 0 3
16851: NOT
16852: OR
16853: IFFALSE 16857
// exit ;
16855: GO 18513
// if not range then
16857: LD_VAR 0 4
16861: NOT
16862: IFFALSE 16872
// range := 10 ;
16864: LD_ADDR_VAR 0 4
16868: PUSH
16869: LD_INT 10
16871: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
16872: LD_ADDR_VAR 0 8
16876: PUSH
16877: LD_INT 81
16879: PUSH
16880: LD_VAR 0 1
16884: PUSH
16885: EMPTY
16886: LIST
16887: LIST
16888: PUSH
16889: LD_INT 92
16891: PUSH
16892: LD_VAR 0 2
16896: PUSH
16897: LD_VAR 0 3
16901: PUSH
16902: LD_VAR 0 4
16906: PUSH
16907: EMPTY
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 3
16915: PUSH
16916: LD_INT 21
16918: PUSH
16919: LD_INT 3
16921: PUSH
16922: EMPTY
16923: LIST
16924: LIST
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: PUSH
16930: EMPTY
16931: LIST
16932: LIST
16933: LIST
16934: PPUSH
16935: CALL_OW 69
16939: ST_TO_ADDR
// if not tmp then
16940: LD_VAR 0 8
16944: NOT
16945: IFFALSE 16949
// exit ;
16947: GO 18513
// for i in tmp do
16949: LD_ADDR_VAR 0 6
16953: PUSH
16954: LD_VAR 0 8
16958: PUSH
16959: FOR_IN
16960: IFFALSE 18488
// begin points := [ 0 , 0 , 0 ] ;
16962: LD_ADDR_VAR 0 9
16966: PUSH
16967: LD_INT 0
16969: PUSH
16970: LD_INT 0
16972: PUSH
16973: LD_INT 0
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: ST_TO_ADDR
// bpoints := 1 ;
16981: LD_ADDR_VAR 0 10
16985: PUSH
16986: LD_INT 1
16988: ST_TO_ADDR
// case GetType ( i ) of unit_human :
16989: LD_VAR 0 6
16993: PPUSH
16994: CALL_OW 247
16998: PUSH
16999: LD_INT 1
17001: DOUBLE
17002: EQUAL
17003: IFTRUE 17007
17005: GO 17589
17007: POP
// begin if GetClass ( i ) = 1 then
17008: LD_VAR 0 6
17012: PPUSH
17013: CALL_OW 257
17017: PUSH
17018: LD_INT 1
17020: EQUAL
17021: IFFALSE 17042
// points := [ 10 , 5 , 3 ] ;
17023: LD_ADDR_VAR 0 9
17027: PUSH
17028: LD_INT 10
17030: PUSH
17031: LD_INT 5
17033: PUSH
17034: LD_INT 3
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: LIST
17041: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
17042: LD_VAR 0 6
17046: PPUSH
17047: CALL_OW 257
17051: PUSH
17052: LD_INT 2
17054: PUSH
17055: LD_INT 3
17057: PUSH
17058: LD_INT 4
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: LIST
17065: IN
17066: IFFALSE 17087
// points := [ 3 , 2 , 1 ] ;
17068: LD_ADDR_VAR 0 9
17072: PUSH
17073: LD_INT 3
17075: PUSH
17076: LD_INT 2
17078: PUSH
17079: LD_INT 1
17081: PUSH
17082: EMPTY
17083: LIST
17084: LIST
17085: LIST
17086: ST_TO_ADDR
// if GetClass ( i ) = 5 then
17087: LD_VAR 0 6
17091: PPUSH
17092: CALL_OW 257
17096: PUSH
17097: LD_INT 5
17099: EQUAL
17100: IFFALSE 17121
// points := [ 130 , 5 , 2 ] ;
17102: LD_ADDR_VAR 0 9
17106: PUSH
17107: LD_INT 130
17109: PUSH
17110: LD_INT 5
17112: PUSH
17113: LD_INT 2
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: LIST
17120: ST_TO_ADDR
// if GetClass ( i ) = 8 then
17121: LD_VAR 0 6
17125: PPUSH
17126: CALL_OW 257
17130: PUSH
17131: LD_INT 8
17133: EQUAL
17134: IFFALSE 17155
// points := [ 35 , 35 , 30 ] ;
17136: LD_ADDR_VAR 0 9
17140: PUSH
17141: LD_INT 35
17143: PUSH
17144: LD_INT 35
17146: PUSH
17147: LD_INT 30
17149: PUSH
17150: EMPTY
17151: LIST
17152: LIST
17153: LIST
17154: ST_TO_ADDR
// if GetClass ( i ) = 9 then
17155: LD_VAR 0 6
17159: PPUSH
17160: CALL_OW 257
17164: PUSH
17165: LD_INT 9
17167: EQUAL
17168: IFFALSE 17189
// points := [ 20 , 55 , 40 ] ;
17170: LD_ADDR_VAR 0 9
17174: PUSH
17175: LD_INT 20
17177: PUSH
17178: LD_INT 55
17180: PUSH
17181: LD_INT 40
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
17189: LD_VAR 0 6
17193: PPUSH
17194: CALL_OW 257
17198: PUSH
17199: LD_INT 12
17201: PUSH
17202: LD_INT 16
17204: PUSH
17205: EMPTY
17206: LIST
17207: LIST
17208: IN
17209: IFFALSE 17230
// points := [ 5 , 3 , 2 ] ;
17211: LD_ADDR_VAR 0 9
17215: PUSH
17216: LD_INT 5
17218: PUSH
17219: LD_INT 3
17221: PUSH
17222: LD_INT 2
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: LIST
17229: ST_TO_ADDR
// if GetClass ( i ) = 17 then
17230: LD_VAR 0 6
17234: PPUSH
17235: CALL_OW 257
17239: PUSH
17240: LD_INT 17
17242: EQUAL
17243: IFFALSE 17264
// points := [ 100 , 50 , 75 ] ;
17245: LD_ADDR_VAR 0 9
17249: PUSH
17250: LD_INT 100
17252: PUSH
17253: LD_INT 50
17255: PUSH
17256: LD_INT 75
17258: PUSH
17259: EMPTY
17260: LIST
17261: LIST
17262: LIST
17263: ST_TO_ADDR
// if GetClass ( i ) = 15 then
17264: LD_VAR 0 6
17268: PPUSH
17269: CALL_OW 257
17273: PUSH
17274: LD_INT 15
17276: EQUAL
17277: IFFALSE 17298
// points := [ 10 , 5 , 3 ] ;
17279: LD_ADDR_VAR 0 9
17283: PUSH
17284: LD_INT 10
17286: PUSH
17287: LD_INT 5
17289: PUSH
17290: LD_INT 3
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: LIST
17297: ST_TO_ADDR
// if GetClass ( i ) = 14 then
17298: LD_VAR 0 6
17302: PPUSH
17303: CALL_OW 257
17307: PUSH
17308: LD_INT 14
17310: EQUAL
17311: IFFALSE 17332
// points := [ 10 , 0 , 0 ] ;
17313: LD_ADDR_VAR 0 9
17317: PUSH
17318: LD_INT 10
17320: PUSH
17321: LD_INT 0
17323: PUSH
17324: LD_INT 0
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: LIST
17331: ST_TO_ADDR
// if GetClass ( i ) = 11 then
17332: LD_VAR 0 6
17336: PPUSH
17337: CALL_OW 257
17341: PUSH
17342: LD_INT 11
17344: EQUAL
17345: IFFALSE 17366
// points := [ 30 , 10 , 5 ] ;
17347: LD_ADDR_VAR 0 9
17351: PUSH
17352: LD_INT 30
17354: PUSH
17355: LD_INT 10
17357: PUSH
17358: LD_INT 5
17360: PUSH
17361: EMPTY
17362: LIST
17363: LIST
17364: LIST
17365: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
17366: LD_VAR 0 1
17370: PPUSH
17371: LD_INT 5
17373: PPUSH
17374: CALL_OW 321
17378: PUSH
17379: LD_INT 2
17381: EQUAL
17382: IFFALSE 17399
// bpoints := bpoints * 1.8 ;
17384: LD_ADDR_VAR 0 10
17388: PUSH
17389: LD_VAR 0 10
17393: PUSH
17394: LD_REAL  1.80000000000000E+0000
17397: MUL
17398: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
17399: LD_VAR 0 6
17403: PPUSH
17404: CALL_OW 257
17408: PUSH
17409: LD_INT 1
17411: PUSH
17412: LD_INT 2
17414: PUSH
17415: LD_INT 3
17417: PUSH
17418: LD_INT 4
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: LIST
17425: LIST
17426: IN
17427: IFFALSE 17447
17429: PUSH
17430: LD_VAR 0 1
17434: PPUSH
17435: LD_INT 51
17437: PPUSH
17438: CALL_OW 321
17442: PUSH
17443: LD_INT 2
17445: EQUAL
17446: AND
17447: IFFALSE 17464
// bpoints := bpoints * 1.2 ;
17449: LD_ADDR_VAR 0 10
17453: PUSH
17454: LD_VAR 0 10
17458: PUSH
17459: LD_REAL  1.20000000000000E+0000
17462: MUL
17463: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
17464: LD_VAR 0 6
17468: PPUSH
17469: CALL_OW 257
17473: PUSH
17474: LD_INT 5
17476: PUSH
17477: LD_INT 7
17479: PUSH
17480: LD_INT 9
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: LIST
17487: IN
17488: IFFALSE 17508
17490: PUSH
17491: LD_VAR 0 1
17495: PPUSH
17496: LD_INT 52
17498: PPUSH
17499: CALL_OW 321
17503: PUSH
17504: LD_INT 2
17506: EQUAL
17507: AND
17508: IFFALSE 17525
// bpoints := bpoints * 1.5 ;
17510: LD_ADDR_VAR 0 10
17514: PUSH
17515: LD_VAR 0 10
17519: PUSH
17520: LD_REAL  1.50000000000000E+0000
17523: MUL
17524: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
17525: LD_VAR 0 1
17529: PPUSH
17530: LD_INT 66
17532: PPUSH
17533: CALL_OW 321
17537: PUSH
17538: LD_INT 2
17540: EQUAL
17541: IFFALSE 17558
// bpoints := bpoints * 1.1 ;
17543: LD_ADDR_VAR 0 10
17547: PUSH
17548: LD_VAR 0 10
17552: PUSH
17553: LD_REAL  1.10000000000000E+0000
17556: MUL
17557: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
17558: LD_ADDR_VAR 0 10
17562: PUSH
17563: LD_VAR 0 10
17567: PUSH
17568: LD_VAR 0 6
17572: PPUSH
17573: LD_INT 1
17575: PPUSH
17576: CALL_OW 259
17580: PUSH
17581: LD_REAL  1.15000000000000E+0000
17584: MUL
17585: MUL
17586: ST_TO_ADDR
// end ; unit_vehicle :
17587: GO 18417
17589: LD_INT 2
17591: DOUBLE
17592: EQUAL
17593: IFTRUE 17597
17595: GO 18405
17597: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
17598: LD_VAR 0 6
17602: PPUSH
17603: CALL_OW 264
17607: PUSH
17608: LD_INT 2
17610: PUSH
17611: LD_INT 42
17613: PUSH
17614: LD_INT 24
17616: PUSH
17617: EMPTY
17618: LIST
17619: LIST
17620: LIST
17621: IN
17622: IFFALSE 17643
// points := [ 25 , 5 , 3 ] ;
17624: LD_ADDR_VAR 0 9
17628: PUSH
17629: LD_INT 25
17631: PUSH
17632: LD_INT 5
17634: PUSH
17635: LD_INT 3
17637: PUSH
17638: EMPTY
17639: LIST
17640: LIST
17641: LIST
17642: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
17643: LD_VAR 0 6
17647: PPUSH
17648: CALL_OW 264
17652: PUSH
17653: LD_INT 4
17655: PUSH
17656: LD_INT 43
17658: PUSH
17659: LD_INT 25
17661: PUSH
17662: EMPTY
17663: LIST
17664: LIST
17665: LIST
17666: IN
17667: IFFALSE 17688
// points := [ 40 , 15 , 5 ] ;
17669: LD_ADDR_VAR 0 9
17673: PUSH
17674: LD_INT 40
17676: PUSH
17677: LD_INT 15
17679: PUSH
17680: LD_INT 5
17682: PUSH
17683: EMPTY
17684: LIST
17685: LIST
17686: LIST
17687: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
17688: LD_VAR 0 6
17692: PPUSH
17693: CALL_OW 264
17697: PUSH
17698: LD_INT 3
17700: PUSH
17701: LD_INT 23
17703: PUSH
17704: EMPTY
17705: LIST
17706: LIST
17707: IN
17708: IFFALSE 17729
// points := [ 7 , 25 , 8 ] ;
17710: LD_ADDR_VAR 0 9
17714: PUSH
17715: LD_INT 7
17717: PUSH
17718: LD_INT 25
17720: PUSH
17721: LD_INT 8
17723: PUSH
17724: EMPTY
17725: LIST
17726: LIST
17727: LIST
17728: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
17729: LD_VAR 0 6
17733: PPUSH
17734: CALL_OW 264
17738: PUSH
17739: LD_INT 5
17741: PUSH
17742: LD_INT 27
17744: PUSH
17745: LD_INT 44
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: LIST
17752: IN
17753: IFFALSE 17774
// points := [ 14 , 50 , 16 ] ;
17755: LD_ADDR_VAR 0 9
17759: PUSH
17760: LD_INT 14
17762: PUSH
17763: LD_INT 50
17765: PUSH
17766: LD_INT 16
17768: PUSH
17769: EMPTY
17770: LIST
17771: LIST
17772: LIST
17773: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
17774: LD_VAR 0 6
17778: PPUSH
17779: CALL_OW 264
17783: PUSH
17784: LD_INT 6
17786: PUSH
17787: LD_INT 46
17789: PUSH
17790: EMPTY
17791: LIST
17792: LIST
17793: IN
17794: IFFALSE 17815
// points := [ 32 , 120 , 70 ] ;
17796: LD_ADDR_VAR 0 9
17800: PUSH
17801: LD_INT 32
17803: PUSH
17804: LD_INT 120
17806: PUSH
17807: LD_INT 70
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
17815: LD_VAR 0 6
17819: PPUSH
17820: CALL_OW 264
17824: PUSH
17825: LD_INT 7
17827: PUSH
17828: LD_INT 28
17830: PUSH
17831: LD_INT 45
17833: PUSH
17834: LD_INT 92
17836: PUSH
17837: EMPTY
17838: LIST
17839: LIST
17840: LIST
17841: LIST
17842: IN
17843: IFFALSE 17864
// points := [ 35 , 20 , 45 ] ;
17845: LD_ADDR_VAR 0 9
17849: PUSH
17850: LD_INT 35
17852: PUSH
17853: LD_INT 20
17855: PUSH
17856: LD_INT 45
17858: PUSH
17859: EMPTY
17860: LIST
17861: LIST
17862: LIST
17863: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
17864: LD_VAR 0 6
17868: PPUSH
17869: CALL_OW 264
17873: PUSH
17874: LD_INT 47
17876: PUSH
17877: EMPTY
17878: LIST
17879: IN
17880: IFFALSE 17901
// points := [ 67 , 45 , 75 ] ;
17882: LD_ADDR_VAR 0 9
17886: PUSH
17887: LD_INT 67
17889: PUSH
17890: LD_INT 45
17892: PUSH
17893: LD_INT 75
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
17901: LD_VAR 0 6
17905: PPUSH
17906: CALL_OW 264
17910: PUSH
17911: LD_INT 26
17913: PUSH
17914: EMPTY
17915: LIST
17916: IN
17917: IFFALSE 17938
// points := [ 120 , 30 , 80 ] ;
17919: LD_ADDR_VAR 0 9
17923: PUSH
17924: LD_INT 120
17926: PUSH
17927: LD_INT 30
17929: PUSH
17930: LD_INT 80
17932: PUSH
17933: EMPTY
17934: LIST
17935: LIST
17936: LIST
17937: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
17938: LD_VAR 0 6
17942: PPUSH
17943: CALL_OW 264
17947: PUSH
17948: LD_INT 22
17950: PUSH
17951: EMPTY
17952: LIST
17953: IN
17954: IFFALSE 17975
// points := [ 40 , 1 , 1 ] ;
17956: LD_ADDR_VAR 0 9
17960: PUSH
17961: LD_INT 40
17963: PUSH
17964: LD_INT 1
17966: PUSH
17967: LD_INT 1
17969: PUSH
17970: EMPTY
17971: LIST
17972: LIST
17973: LIST
17974: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
17975: LD_VAR 0 6
17979: PPUSH
17980: CALL_OW 264
17984: PUSH
17985: LD_INT 29
17987: PUSH
17988: EMPTY
17989: LIST
17990: IN
17991: IFFALSE 18012
// points := [ 70 , 200 , 400 ] ;
17993: LD_ADDR_VAR 0 9
17997: PUSH
17998: LD_INT 70
18000: PUSH
18001: LD_INT 200
18003: PUSH
18004: LD_INT 400
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
18012: LD_VAR 0 6
18016: PPUSH
18017: CALL_OW 264
18021: PUSH
18022: LD_INT 14
18024: PUSH
18025: LD_INT 53
18027: PUSH
18028: EMPTY
18029: LIST
18030: LIST
18031: IN
18032: IFFALSE 18053
// points := [ 40 , 10 , 20 ] ;
18034: LD_ADDR_VAR 0 9
18038: PUSH
18039: LD_INT 40
18041: PUSH
18042: LD_INT 10
18044: PUSH
18045: LD_INT 20
18047: PUSH
18048: EMPTY
18049: LIST
18050: LIST
18051: LIST
18052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
18053: LD_VAR 0 6
18057: PPUSH
18058: CALL_OW 264
18062: PUSH
18063: LD_INT 9
18065: PUSH
18066: EMPTY
18067: LIST
18068: IN
18069: IFFALSE 18090
// points := [ 5 , 70 , 20 ] ;
18071: LD_ADDR_VAR 0 9
18075: PUSH
18076: LD_INT 5
18078: PUSH
18079: LD_INT 70
18081: PUSH
18082: LD_INT 20
18084: PUSH
18085: EMPTY
18086: LIST
18087: LIST
18088: LIST
18089: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
18090: LD_VAR 0 6
18094: PPUSH
18095: CALL_OW 264
18099: PUSH
18100: LD_INT 10
18102: PUSH
18103: EMPTY
18104: LIST
18105: IN
18106: IFFALSE 18127
// points := [ 35 , 110 , 70 ] ;
18108: LD_ADDR_VAR 0 9
18112: PUSH
18113: LD_INT 35
18115: PUSH
18116: LD_INT 110
18118: PUSH
18119: LD_INT 70
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
18127: LD_VAR 0 6
18131: PPUSH
18132: CALL_OW 265
18136: PUSH
18137: LD_INT 25
18139: EQUAL
18140: IFFALSE 18161
// points := [ 80 , 65 , 100 ] ;
18142: LD_ADDR_VAR 0 9
18146: PUSH
18147: LD_INT 80
18149: PUSH
18150: LD_INT 65
18152: PUSH
18153: LD_INT 100
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: LIST
18160: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
18161: LD_VAR 0 6
18165: PPUSH
18166: CALL_OW 263
18170: PUSH
18171: LD_INT 1
18173: EQUAL
18174: IFFALSE 18209
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
18176: LD_ADDR_VAR 0 10
18180: PUSH
18181: LD_VAR 0 10
18185: PUSH
18186: LD_VAR 0 6
18190: PPUSH
18191: CALL_OW 311
18195: PPUSH
18196: LD_INT 3
18198: PPUSH
18199: CALL_OW 259
18203: PUSH
18204: LD_INT 4
18206: MUL
18207: MUL
18208: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
18209: LD_VAR 0 6
18213: PPUSH
18214: CALL_OW 263
18218: PUSH
18219: LD_INT 2
18221: EQUAL
18222: IFFALSE 18273
// begin j := IsControledBy ( i ) ;
18224: LD_ADDR_VAR 0 7
18228: PUSH
18229: LD_VAR 0 6
18233: PPUSH
18234: CALL_OW 312
18238: ST_TO_ADDR
// if j then
18239: LD_VAR 0 7
18243: IFFALSE 18273
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
18245: LD_ADDR_VAR 0 10
18249: PUSH
18250: LD_VAR 0 10
18254: PUSH
18255: LD_VAR 0 7
18259: PPUSH
18260: LD_INT 3
18262: PPUSH
18263: CALL_OW 259
18267: PUSH
18268: LD_INT 3
18270: MUL
18271: MUL
18272: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
18273: LD_VAR 0 6
18277: PPUSH
18278: CALL_OW 264
18282: PUSH
18283: LD_INT 5
18285: PUSH
18286: LD_INT 6
18288: PUSH
18289: LD_INT 46
18291: PUSH
18292: LD_INT 44
18294: PUSH
18295: LD_INT 47
18297: PUSH
18298: LD_INT 45
18300: PUSH
18301: LD_INT 28
18303: PUSH
18304: LD_INT 7
18306: PUSH
18307: LD_INT 27
18309: PUSH
18310: LD_INT 29
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: LIST
18317: LIST
18318: LIST
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: LIST
18324: IN
18325: IFFALSE 18345
18327: PUSH
18328: LD_VAR 0 1
18332: PPUSH
18333: LD_INT 52
18335: PPUSH
18336: CALL_OW 321
18340: PUSH
18341: LD_INT 2
18343: EQUAL
18344: AND
18345: IFFALSE 18362
// bpoints := bpoints * 1.2 ;
18347: LD_ADDR_VAR 0 10
18351: PUSH
18352: LD_VAR 0 10
18356: PUSH
18357: LD_REAL  1.20000000000000E+0000
18360: MUL
18361: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
18362: LD_VAR 0 6
18366: PPUSH
18367: CALL_OW 264
18371: PUSH
18372: LD_INT 6
18374: PUSH
18375: LD_INT 46
18377: PUSH
18378: LD_INT 47
18380: PUSH
18381: EMPTY
18382: LIST
18383: LIST
18384: LIST
18385: IN
18386: IFFALSE 18403
// bpoints := bpoints * 1.2 ;
18388: LD_ADDR_VAR 0 10
18392: PUSH
18393: LD_VAR 0 10
18397: PUSH
18398: LD_REAL  1.20000000000000E+0000
18401: MUL
18402: ST_TO_ADDR
// end ; unit_building :
18403: GO 18417
18405: LD_INT 3
18407: DOUBLE
18408: EQUAL
18409: IFTRUE 18413
18411: GO 18416
18413: POP
// ; end ;
18414: GO 18417
18416: POP
// for j = 1 to 3 do
18417: LD_ADDR_VAR 0 7
18421: PUSH
18422: DOUBLE
18423: LD_INT 1
18425: DEC
18426: ST_TO_ADDR
18427: LD_INT 3
18429: PUSH
18430: FOR_TO
18431: IFFALSE 18484
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
18433: LD_ADDR_VAR 0 5
18437: PUSH
18438: LD_VAR 0 5
18442: PPUSH
18443: LD_VAR 0 7
18447: PPUSH
18448: LD_VAR 0 5
18452: PUSH
18453: LD_VAR 0 7
18457: ARRAY
18458: PUSH
18459: LD_VAR 0 9
18463: PUSH
18464: LD_VAR 0 7
18468: ARRAY
18469: PUSH
18470: LD_VAR 0 10
18474: MUL
18475: PLUS
18476: PPUSH
18477: CALL_OW 1
18481: ST_TO_ADDR
18482: GO 18430
18484: POP
18485: POP
// end ;
18486: GO 16959
18488: POP
18489: POP
// result := Replace ( result , 4 , tmp ) ;
18490: LD_ADDR_VAR 0 5
18494: PUSH
18495: LD_VAR 0 5
18499: PPUSH
18500: LD_INT 4
18502: PPUSH
18503: LD_VAR 0 8
18507: PPUSH
18508: CALL_OW 1
18512: ST_TO_ADDR
// end ;
18513: LD_VAR 0 5
18517: RET
// export function DangerAtRange ( unit , range ) ; begin
18518: LD_INT 0
18520: PPUSH
// if not unit then
18521: LD_VAR 0 1
18525: NOT
18526: IFFALSE 18530
// exit ;
18528: GO 18575
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
18530: LD_ADDR_VAR 0 3
18534: PUSH
18535: LD_VAR 0 1
18539: PPUSH
18540: CALL_OW 255
18544: PPUSH
18545: LD_VAR 0 1
18549: PPUSH
18550: CALL_OW 250
18554: PPUSH
18555: LD_VAR 0 1
18559: PPUSH
18560: CALL_OW 251
18564: PPUSH
18565: LD_VAR 0 2
18569: PPUSH
18570: CALL 16809 0 4
18574: ST_TO_ADDR
// end ;
18575: LD_VAR 0 3
18579: RET
// export function DangerInArea ( side , area ) ; begin
18580: LD_INT 0
18582: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
18583: LD_ADDR_VAR 0 3
18587: PUSH
18588: LD_VAR 0 2
18592: PPUSH
18593: LD_INT 81
18595: PUSH
18596: LD_VAR 0 1
18600: PUSH
18601: EMPTY
18602: LIST
18603: LIST
18604: PPUSH
18605: CALL_OW 70
18609: ST_TO_ADDR
// end ;
18610: LD_VAR 0 3
18614: RET
// export function IsExtension ( b ) ; begin
18615: LD_INT 0
18617: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
18618: LD_ADDR_VAR 0 2
18622: PUSH
18623: LD_VAR 0 1
18627: PUSH
18628: LD_INT 23
18630: PUSH
18631: LD_INT 20
18633: PUSH
18634: LD_INT 22
18636: PUSH
18637: LD_INT 17
18639: PUSH
18640: LD_INT 24
18642: PUSH
18643: LD_INT 21
18645: PUSH
18646: LD_INT 19
18648: PUSH
18649: LD_INT 16
18651: PUSH
18652: LD_INT 25
18654: PUSH
18655: LD_INT 18
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: LIST
18662: LIST
18663: LIST
18664: LIST
18665: LIST
18666: LIST
18667: LIST
18668: LIST
18669: IN
18670: ST_TO_ADDR
// end ;
18671: LD_VAR 0 2
18675: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
18676: LD_INT 0
18678: PPUSH
18679: PPUSH
18680: PPUSH
// result := [ ] ;
18681: LD_ADDR_VAR 0 4
18685: PUSH
18686: EMPTY
18687: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
18688: LD_ADDR_VAR 0 5
18692: PUSH
18693: LD_VAR 0 2
18697: PPUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 3
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 70
18712: ST_TO_ADDR
// if not tmp then
18713: LD_VAR 0 5
18717: NOT
18718: IFFALSE 18722
// exit ;
18720: GO 18786
// if checkLink then
18722: LD_VAR 0 3
18726: IFFALSE 18776
// begin for i in tmp do
18728: LD_ADDR_VAR 0 6
18732: PUSH
18733: LD_VAR 0 5
18737: PUSH
18738: FOR_IN
18739: IFFALSE 18774
// if GetBase ( i ) <> base then
18741: LD_VAR 0 6
18745: PPUSH
18746: CALL_OW 274
18750: PUSH
18751: LD_VAR 0 1
18755: NONEQUAL
18756: IFFALSE 18772
// ComLinkToBase ( base , i ) ;
18758: LD_VAR 0 1
18762: PPUSH
18763: LD_VAR 0 6
18767: PPUSH
18768: CALL_OW 169
18772: GO 18738
18774: POP
18775: POP
// end ; result := tmp ;
18776: LD_ADDR_VAR 0 4
18780: PUSH
18781: LD_VAR 0 5
18785: ST_TO_ADDR
// end ;
18786: LD_VAR 0 4
18790: RET
// export function ComComplete ( units , b ) ; var i ; begin
18791: LD_INT 0
18793: PPUSH
18794: PPUSH
// if not units then
18795: LD_VAR 0 1
18799: NOT
18800: IFFALSE 18804
// exit ;
18802: GO 18894
// for i in units do
18804: LD_ADDR_VAR 0 4
18808: PUSH
18809: LD_VAR 0 1
18813: PUSH
18814: FOR_IN
18815: IFFALSE 18892
// if BuildingStatus ( b ) = bs_build then
18817: LD_VAR 0 2
18821: PPUSH
18822: CALL_OW 461
18826: PUSH
18827: LD_INT 1
18829: EQUAL
18830: IFFALSE 18890
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
18832: LD_VAR 0 4
18836: PPUSH
18837: LD_STRING h
18839: PUSH
18840: LD_VAR 0 2
18844: PPUSH
18845: CALL_OW 250
18849: PUSH
18850: LD_VAR 0 2
18854: PPUSH
18855: CALL_OW 251
18859: PUSH
18860: LD_VAR 0 2
18864: PUSH
18865: LD_INT 0
18867: PUSH
18868: LD_INT 0
18870: PUSH
18871: LD_INT 0
18873: PUSH
18874: EMPTY
18875: LIST
18876: LIST
18877: LIST
18878: LIST
18879: LIST
18880: LIST
18881: LIST
18882: PUSH
18883: EMPTY
18884: LIST
18885: PPUSH
18886: CALL_OW 446
18890: GO 18814
18892: POP
18893: POP
// end ;
18894: LD_VAR 0 3
18898: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
18899: LD_INT 0
18901: PPUSH
18902: PPUSH
18903: PPUSH
18904: PPUSH
18905: PPUSH
18906: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
18907: LD_VAR 0 1
18911: NOT
18912: IFTRUE 18929
18914: PUSH
18915: LD_VAR 0 1
18919: PPUSH
18920: CALL_OW 263
18924: PUSH
18925: LD_INT 2
18927: NONEQUAL
18928: OR
18929: IFFALSE 18933
// exit ;
18931: GO 19249
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
18933: LD_ADDR_VAR 0 6
18937: PUSH
18938: LD_INT 22
18940: PUSH
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 255
18950: PUSH
18951: EMPTY
18952: LIST
18953: LIST
18954: PUSH
18955: LD_INT 2
18957: PUSH
18958: LD_INT 30
18960: PUSH
18961: LD_INT 36
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 34
18970: PUSH
18971: LD_INT 31
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: EMPTY
18979: LIST
18980: LIST
18981: LIST
18982: PUSH
18983: EMPTY
18984: LIST
18985: LIST
18986: PPUSH
18987: CALL_OW 69
18991: ST_TO_ADDR
// if not tmp then
18992: LD_VAR 0 6
18996: NOT
18997: IFFALSE 19001
// exit ;
18999: GO 19249
// result := [ ] ;
19001: LD_ADDR_VAR 0 2
19005: PUSH
19006: EMPTY
19007: ST_TO_ADDR
// for i in tmp do
19008: LD_ADDR_VAR 0 3
19012: PUSH
19013: LD_VAR 0 6
19017: PUSH
19018: FOR_IN
19019: IFFALSE 19090
// begin t := UnitsInside ( i ) ;
19021: LD_ADDR_VAR 0 4
19025: PUSH
19026: LD_VAR 0 3
19030: PPUSH
19031: CALL_OW 313
19035: ST_TO_ADDR
// if t then
19036: LD_VAR 0 4
19040: IFFALSE 19088
// for j in t do
19042: LD_ADDR_VAR 0 7
19046: PUSH
19047: LD_VAR 0 4
19051: PUSH
19052: FOR_IN
19053: IFFALSE 19086
// result := Replace ( result , result + 1 , j ) ;
19055: LD_ADDR_VAR 0 2
19059: PUSH
19060: LD_VAR 0 2
19064: PPUSH
19065: LD_VAR 0 2
19069: PUSH
19070: LD_INT 1
19072: PLUS
19073: PPUSH
19074: LD_VAR 0 7
19078: PPUSH
19079: CALL_OW 1
19083: ST_TO_ADDR
19084: GO 19052
19086: POP
19087: POP
// end ;
19088: GO 19018
19090: POP
19091: POP
// if not result then
19092: LD_VAR 0 2
19096: NOT
19097: IFFALSE 19101
// exit ;
19099: GO 19249
// mech := result [ 1 ] ;
19101: LD_ADDR_VAR 0 5
19105: PUSH
19106: LD_VAR 0 2
19110: PUSH
19111: LD_INT 1
19113: ARRAY
19114: ST_TO_ADDR
// if result > 1 then
19115: LD_VAR 0 2
19119: PUSH
19120: LD_INT 1
19122: GREATER
19123: IFFALSE 19235
// begin for i = 2 to result do
19125: LD_ADDR_VAR 0 3
19129: PUSH
19130: DOUBLE
19131: LD_INT 2
19133: DEC
19134: ST_TO_ADDR
19135: LD_VAR 0 2
19139: PUSH
19140: FOR_TO
19141: IFFALSE 19233
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
19143: LD_ADDR_VAR 0 4
19147: PUSH
19148: LD_VAR 0 2
19152: PUSH
19153: LD_VAR 0 3
19157: ARRAY
19158: PPUSH
19159: LD_INT 3
19161: PPUSH
19162: CALL_OW 259
19166: PUSH
19167: LD_VAR 0 2
19171: PUSH
19172: LD_VAR 0 3
19176: ARRAY
19177: PPUSH
19178: CALL_OW 432
19182: MINUS
19183: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
19184: LD_VAR 0 4
19188: PUSH
19189: LD_VAR 0 5
19193: PPUSH
19194: LD_INT 3
19196: PPUSH
19197: CALL_OW 259
19201: PUSH
19202: LD_VAR 0 5
19206: PPUSH
19207: CALL_OW 432
19211: MINUS
19212: GREATEREQUAL
19213: IFFALSE 19231
// mech := result [ i ] ;
19215: LD_ADDR_VAR 0 5
19219: PUSH
19220: LD_VAR 0 2
19224: PUSH
19225: LD_VAR 0 3
19229: ARRAY
19230: ST_TO_ADDR
// end ;
19231: GO 19140
19233: POP
19234: POP
// end ; ComLinkTo ( vehicle , mech ) ;
19235: LD_VAR 0 1
19239: PPUSH
19240: LD_VAR 0 5
19244: PPUSH
19245: CALL_OW 135
// end ;
19249: LD_VAR 0 2
19253: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
19254: LD_INT 0
19256: PPUSH
19257: PPUSH
19258: PPUSH
19259: PPUSH
19260: PPUSH
19261: PPUSH
19262: PPUSH
19263: PPUSH
19264: PPUSH
19265: PPUSH
19266: PPUSH
19267: PPUSH
19268: PPUSH
// result := [ ] ;
19269: LD_ADDR_VAR 0 7
19273: PUSH
19274: EMPTY
19275: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
19276: LD_VAR 0 1
19280: PPUSH
19281: CALL_OW 266
19285: PUSH
19286: LD_INT 0
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: IN
19296: NOT
19297: IFFALSE 19301
// exit ;
19299: GO 20941
// if name then
19301: LD_VAR 0 3
19305: IFFALSE 19321
// SetBName ( base_dep , name ) ;
19307: LD_VAR 0 1
19311: PPUSH
19312: LD_VAR 0 3
19316: PPUSH
19317: CALL_OW 500
// base := GetBase ( base_dep ) ;
19321: LD_ADDR_VAR 0 15
19325: PUSH
19326: LD_VAR 0 1
19330: PPUSH
19331: CALL_OW 274
19335: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
19336: LD_ADDR_VAR 0 16
19340: PUSH
19341: LD_VAR 0 1
19345: PPUSH
19346: CALL_OW 255
19350: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
19351: LD_ADDR_VAR 0 17
19355: PUSH
19356: LD_VAR 0 1
19360: PPUSH
19361: CALL_OW 248
19365: ST_TO_ADDR
// if sources then
19366: LD_VAR 0 5
19370: IFFALSE 19417
// for i = 1 to 3 do
19372: LD_ADDR_VAR 0 8
19376: PUSH
19377: DOUBLE
19378: LD_INT 1
19380: DEC
19381: ST_TO_ADDR
19382: LD_INT 3
19384: PUSH
19385: FOR_TO
19386: IFFALSE 19415
// AddResourceType ( base , i , sources [ i ] ) ;
19388: LD_VAR 0 15
19392: PPUSH
19393: LD_VAR 0 8
19397: PPUSH
19398: LD_VAR 0 5
19402: PUSH
19403: LD_VAR 0 8
19407: ARRAY
19408: PPUSH
19409: CALL_OW 276
19413: GO 19385
19415: POP
19416: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
19417: LD_ADDR_VAR 0 18
19421: PUSH
19422: LD_VAR 0 15
19426: PPUSH
19427: LD_VAR 0 2
19431: PPUSH
19432: LD_INT 1
19434: PPUSH
19435: CALL 18676 0 3
19439: ST_TO_ADDR
// InitHc ;
19440: CALL_OW 19
// InitUc ;
19444: CALL_OW 18
// uc_side := side ;
19448: LD_ADDR_OWVAR 20
19452: PUSH
19453: LD_VAR 0 16
19457: ST_TO_ADDR
// uc_nation := nation ;
19458: LD_ADDR_OWVAR 21
19462: PUSH
19463: LD_VAR 0 17
19467: ST_TO_ADDR
// if buildings then
19468: LD_VAR 0 18
19472: IFFALSE 20800
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
19474: LD_ADDR_VAR 0 19
19478: PUSH
19479: LD_VAR 0 18
19483: PPUSH
19484: LD_INT 2
19486: PUSH
19487: LD_INT 30
19489: PUSH
19490: LD_INT 29
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 30
19499: PUSH
19500: LD_INT 30
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: LIST
19511: PPUSH
19512: CALL_OW 72
19516: ST_TO_ADDR
// if tmp then
19517: LD_VAR 0 19
19521: IFFALSE 19569
// for i in tmp do
19523: LD_ADDR_VAR 0 8
19527: PUSH
19528: LD_VAR 0 19
19532: PUSH
19533: FOR_IN
19534: IFFALSE 19567
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
19536: LD_VAR 0 8
19540: PPUSH
19541: CALL_OW 250
19545: PPUSH
19546: LD_VAR 0 8
19550: PPUSH
19551: CALL_OW 251
19555: PPUSH
19556: LD_VAR 0 16
19560: PPUSH
19561: CALL_OW 441
19565: GO 19533
19567: POP
19568: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
19569: LD_VAR 0 18
19573: PPUSH
19574: LD_INT 2
19576: PUSH
19577: LD_INT 30
19579: PUSH
19580: LD_INT 32
19582: PUSH
19583: EMPTY
19584: LIST
19585: LIST
19586: PUSH
19587: LD_INT 30
19589: PUSH
19590: LD_INT 33
19592: PUSH
19593: EMPTY
19594: LIST
19595: LIST
19596: PUSH
19597: EMPTY
19598: LIST
19599: LIST
19600: LIST
19601: PPUSH
19602: CALL_OW 72
19606: IFFALSE 19694
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
19608: LD_ADDR_VAR 0 8
19612: PUSH
19613: LD_VAR 0 18
19617: PPUSH
19618: LD_INT 2
19620: PUSH
19621: LD_INT 30
19623: PUSH
19624: LD_INT 32
19626: PUSH
19627: EMPTY
19628: LIST
19629: LIST
19630: PUSH
19631: LD_INT 30
19633: PUSH
19634: LD_INT 33
19636: PUSH
19637: EMPTY
19638: LIST
19639: LIST
19640: PUSH
19641: EMPTY
19642: LIST
19643: LIST
19644: LIST
19645: PPUSH
19646: CALL_OW 72
19650: PUSH
19651: FOR_IN
19652: IFFALSE 19692
// begin if not GetBWeapon ( i ) then
19654: LD_VAR 0 8
19658: PPUSH
19659: CALL_OW 269
19663: NOT
19664: IFFALSE 19690
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
19666: LD_VAR 0 8
19670: PPUSH
19671: LD_VAR 0 8
19675: PPUSH
19676: LD_VAR 0 2
19680: PPUSH
19681: CALL 20946 0 2
19685: PPUSH
19686: CALL_OW 431
// end ;
19690: GO 19651
19692: POP
19693: POP
// end ; for i = 1 to personel do
19694: LD_ADDR_VAR 0 8
19698: PUSH
19699: DOUBLE
19700: LD_INT 1
19702: DEC
19703: ST_TO_ADDR
19704: LD_VAR 0 6
19708: PUSH
19709: FOR_TO
19710: IFFALSE 20780
// begin if i > 4 then
19712: LD_VAR 0 8
19716: PUSH
19717: LD_INT 4
19719: GREATER
19720: IFFALSE 19724
// break ;
19722: GO 20780
// case i of 1 :
19724: LD_VAR 0 8
19728: PUSH
19729: LD_INT 1
19731: DOUBLE
19732: EQUAL
19733: IFTRUE 19737
19735: GO 19817
19737: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
19738: LD_ADDR_VAR 0 12
19742: PUSH
19743: LD_VAR 0 18
19747: PPUSH
19748: LD_INT 22
19750: PUSH
19751: LD_VAR 0 16
19755: PUSH
19756: EMPTY
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 58
19762: PUSH
19763: EMPTY
19764: LIST
19765: PUSH
19766: LD_INT 2
19768: PUSH
19769: LD_INT 30
19771: PUSH
19772: LD_INT 32
19774: PUSH
19775: EMPTY
19776: LIST
19777: LIST
19778: PUSH
19779: LD_INT 30
19781: PUSH
19782: LD_INT 4
19784: PUSH
19785: EMPTY
19786: LIST
19787: LIST
19788: PUSH
19789: LD_INT 30
19791: PUSH
19792: LD_INT 5
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: EMPTY
19800: LIST
19801: LIST
19802: LIST
19803: LIST
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: LIST
19809: PPUSH
19810: CALL_OW 72
19814: ST_TO_ADDR
19815: GO 20039
19817: LD_INT 2
19819: DOUBLE
19820: EQUAL
19821: IFTRUE 19825
19823: GO 19887
19825: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
19826: LD_ADDR_VAR 0 12
19830: PUSH
19831: LD_VAR 0 18
19835: PPUSH
19836: LD_INT 22
19838: PUSH
19839: LD_VAR 0 16
19843: PUSH
19844: EMPTY
19845: LIST
19846: LIST
19847: PUSH
19848: LD_INT 2
19850: PUSH
19851: LD_INT 30
19853: PUSH
19854: LD_INT 0
19856: PUSH
19857: EMPTY
19858: LIST
19859: LIST
19860: PUSH
19861: LD_INT 30
19863: PUSH
19864: LD_INT 1
19866: PUSH
19867: EMPTY
19868: LIST
19869: LIST
19870: PUSH
19871: EMPTY
19872: LIST
19873: LIST
19874: LIST
19875: PUSH
19876: EMPTY
19877: LIST
19878: LIST
19879: PPUSH
19880: CALL_OW 72
19884: ST_TO_ADDR
19885: GO 20039
19887: LD_INT 3
19889: DOUBLE
19890: EQUAL
19891: IFTRUE 19895
19893: GO 19957
19895: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
19896: LD_ADDR_VAR 0 12
19900: PUSH
19901: LD_VAR 0 18
19905: PPUSH
19906: LD_INT 22
19908: PUSH
19909: LD_VAR 0 16
19913: PUSH
19914: EMPTY
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 2
19920: PUSH
19921: LD_INT 30
19923: PUSH
19924: LD_INT 2
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 30
19933: PUSH
19934: LD_INT 3
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: EMPTY
19942: LIST
19943: LIST
19944: LIST
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PPUSH
19950: CALL_OW 72
19954: ST_TO_ADDR
19955: GO 20039
19957: LD_INT 4
19959: DOUBLE
19960: EQUAL
19961: IFTRUE 19965
19963: GO 20038
19965: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
19966: LD_ADDR_VAR 0 12
19970: PUSH
19971: LD_VAR 0 18
19975: PPUSH
19976: LD_INT 22
19978: PUSH
19979: LD_VAR 0 16
19983: PUSH
19984: EMPTY
19985: LIST
19986: LIST
19987: PUSH
19988: LD_INT 2
19990: PUSH
19991: LD_INT 30
19993: PUSH
19994: LD_INT 6
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: LD_INT 30
20003: PUSH
20004: LD_INT 7
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: LD_INT 30
20013: PUSH
20014: LD_INT 8
20016: PUSH
20017: EMPTY
20018: LIST
20019: LIST
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: LIST
20026: PUSH
20027: EMPTY
20028: LIST
20029: LIST
20030: PPUSH
20031: CALL_OW 72
20035: ST_TO_ADDR
20036: GO 20039
20038: POP
// if i = 1 then
20039: LD_VAR 0 8
20043: PUSH
20044: LD_INT 1
20046: EQUAL
20047: IFFALSE 20158
// begin tmp := [ ] ;
20049: LD_ADDR_VAR 0 19
20053: PUSH
20054: EMPTY
20055: ST_TO_ADDR
// for j in f do
20056: LD_ADDR_VAR 0 9
20060: PUSH
20061: LD_VAR 0 12
20065: PUSH
20066: FOR_IN
20067: IFFALSE 20140
// if GetBType ( j ) = b_bunker then
20069: LD_VAR 0 9
20073: PPUSH
20074: CALL_OW 266
20078: PUSH
20079: LD_INT 32
20081: EQUAL
20082: IFFALSE 20109
// tmp := Insert ( tmp , 1 , j ) else
20084: LD_ADDR_VAR 0 19
20088: PUSH
20089: LD_VAR 0 19
20093: PPUSH
20094: LD_INT 1
20096: PPUSH
20097: LD_VAR 0 9
20101: PPUSH
20102: CALL_OW 2
20106: ST_TO_ADDR
20107: GO 20138
// tmp := Insert ( tmp , tmp + 1 , j ) ;
20109: LD_ADDR_VAR 0 19
20113: PUSH
20114: LD_VAR 0 19
20118: PPUSH
20119: LD_VAR 0 19
20123: PUSH
20124: LD_INT 1
20126: PLUS
20127: PPUSH
20128: LD_VAR 0 9
20132: PPUSH
20133: CALL_OW 2
20137: ST_TO_ADDR
20138: GO 20066
20140: POP
20141: POP
// if tmp then
20142: LD_VAR 0 19
20146: IFFALSE 20158
// f := tmp ;
20148: LD_ADDR_VAR 0 12
20152: PUSH
20153: LD_VAR 0 19
20157: ST_TO_ADDR
// end ; x := personel [ i ] ;
20158: LD_ADDR_VAR 0 13
20162: PUSH
20163: LD_VAR 0 6
20167: PUSH
20168: LD_VAR 0 8
20172: ARRAY
20173: ST_TO_ADDR
// if x = - 1 then
20174: LD_VAR 0 13
20178: PUSH
20179: LD_INT 1
20181: NEG
20182: EQUAL
20183: IFFALSE 20394
// begin for j in f do
20185: LD_ADDR_VAR 0 9
20189: PUSH
20190: LD_VAR 0 12
20194: PUSH
20195: FOR_IN
20196: IFFALSE 20390
// repeat InitHc ;
20198: CALL_OW 19
// if GetBType ( j ) = b_barracks then
20202: LD_VAR 0 9
20206: PPUSH
20207: CALL_OW 266
20211: PUSH
20212: LD_INT 5
20214: EQUAL
20215: IFFALSE 20285
// begin if UnitsInside ( j ) < 3 then
20217: LD_VAR 0 9
20221: PPUSH
20222: CALL_OW 313
20226: PUSH
20227: LD_INT 3
20229: LESS
20230: IFFALSE 20266
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20232: LD_INT 0
20234: PPUSH
20235: LD_INT 5
20237: PUSH
20238: LD_INT 8
20240: PUSH
20241: LD_INT 9
20243: PUSH
20244: EMPTY
20245: LIST
20246: LIST
20247: LIST
20248: PUSH
20249: LD_VAR 0 17
20253: ARRAY
20254: PPUSH
20255: LD_VAR 0 4
20259: PPUSH
20260: CALL_OW 380
20264: GO 20283
// PrepareHuman ( false , i , skill ) ;
20266: LD_INT 0
20268: PPUSH
20269: LD_VAR 0 8
20273: PPUSH
20274: LD_VAR 0 4
20278: PPUSH
20279: CALL_OW 380
// end else
20283: GO 20302
// PrepareHuman ( false , i , skill ) ;
20285: LD_INT 0
20287: PPUSH
20288: LD_VAR 0 8
20292: PPUSH
20293: LD_VAR 0 4
20297: PPUSH
20298: CALL_OW 380
// un := CreateHuman ;
20302: LD_ADDR_VAR 0 14
20306: PUSH
20307: CALL_OW 44
20311: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20312: LD_ADDR_VAR 0 7
20316: PUSH
20317: LD_VAR 0 7
20321: PPUSH
20322: LD_INT 1
20324: PPUSH
20325: LD_VAR 0 14
20329: PPUSH
20330: CALL_OW 2
20334: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
20335: LD_VAR 0 14
20339: PPUSH
20340: LD_VAR 0 9
20344: PPUSH
20345: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
20349: LD_VAR 0 9
20353: PPUSH
20354: CALL_OW 313
20358: PUSH
20359: LD_INT 6
20361: EQUAL
20362: IFTRUE 20386
20364: PUSH
20365: LD_VAR 0 9
20369: PPUSH
20370: CALL_OW 266
20374: PUSH
20375: LD_INT 32
20377: PUSH
20378: LD_INT 31
20380: PUSH
20381: EMPTY
20382: LIST
20383: LIST
20384: IN
20385: OR
20386: IFFALSE 20198
20388: GO 20195
20390: POP
20391: POP
// end else
20392: GO 20778
// for j = 1 to x do
20394: LD_ADDR_VAR 0 9
20398: PUSH
20399: DOUBLE
20400: LD_INT 1
20402: DEC
20403: ST_TO_ADDR
20404: LD_VAR 0 13
20408: PUSH
20409: FOR_TO
20410: IFFALSE 20776
// begin InitHc ;
20412: CALL_OW 19
// if not f then
20416: LD_VAR 0 12
20420: NOT
20421: IFFALSE 20510
// begin PrepareHuman ( false , i , skill ) ;
20423: LD_INT 0
20425: PPUSH
20426: LD_VAR 0 8
20430: PPUSH
20431: LD_VAR 0 4
20435: PPUSH
20436: CALL_OW 380
// un := CreateHuman ;
20440: LD_ADDR_VAR 0 14
20444: PUSH
20445: CALL_OW 44
20449: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20450: LD_ADDR_VAR 0 7
20454: PUSH
20455: LD_VAR 0 7
20459: PPUSH
20460: LD_INT 1
20462: PPUSH
20463: LD_VAR 0 14
20467: PPUSH
20468: CALL_OW 2
20472: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20473: LD_VAR 0 14
20477: PPUSH
20478: LD_VAR 0 1
20482: PPUSH
20483: CALL_OW 250
20487: PPUSH
20488: LD_VAR 0 1
20492: PPUSH
20493: CALL_OW 251
20497: PPUSH
20498: LD_INT 10
20500: PPUSH
20501: LD_INT 0
20503: PPUSH
20504: CALL_OW 50
// continue ;
20508: GO 20409
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
20510: LD_VAR 0 12
20514: PUSH
20515: LD_INT 1
20517: ARRAY
20518: PPUSH
20519: CALL_OW 313
20523: IFFALSE 20551
20525: PUSH
20526: LD_VAR 0 12
20530: PUSH
20531: LD_INT 1
20533: ARRAY
20534: PPUSH
20535: CALL_OW 266
20539: PUSH
20540: LD_INT 32
20542: PUSH
20543: LD_INT 31
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: IN
20550: AND
20551: IFTRUE 20572
20553: PUSH
20554: LD_VAR 0 12
20558: PUSH
20559: LD_INT 1
20561: ARRAY
20562: PPUSH
20563: CALL_OW 313
20567: PUSH
20568: LD_INT 6
20570: EQUAL
20571: OR
20572: IFFALSE 20592
// f := Delete ( f , 1 ) ;
20574: LD_ADDR_VAR 0 12
20578: PUSH
20579: LD_VAR 0 12
20583: PPUSH
20584: LD_INT 1
20586: PPUSH
20587: CALL_OW 3
20591: ST_TO_ADDR
// if not f then
20592: LD_VAR 0 12
20596: NOT
20597: IFFALSE 20615
// begin x := x + 2 ;
20599: LD_ADDR_VAR 0 13
20603: PUSH
20604: LD_VAR 0 13
20608: PUSH
20609: LD_INT 2
20611: PLUS
20612: ST_TO_ADDR
// continue ;
20613: GO 20409
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
20615: LD_VAR 0 12
20619: PUSH
20620: LD_INT 1
20622: ARRAY
20623: PPUSH
20624: CALL_OW 266
20628: PUSH
20629: LD_INT 5
20631: EQUAL
20632: IFFALSE 20706
// begin if UnitsInside ( f [ 1 ] ) < 3 then
20634: LD_VAR 0 12
20638: PUSH
20639: LD_INT 1
20641: ARRAY
20642: PPUSH
20643: CALL_OW 313
20647: PUSH
20648: LD_INT 3
20650: LESS
20651: IFFALSE 20687
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
20653: LD_INT 0
20655: PPUSH
20656: LD_INT 5
20658: PUSH
20659: LD_INT 8
20661: PUSH
20662: LD_INT 9
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: LIST
20669: PUSH
20670: LD_VAR 0 17
20674: ARRAY
20675: PPUSH
20676: LD_VAR 0 4
20680: PPUSH
20681: CALL_OW 380
20685: GO 20704
// PrepareHuman ( false , i , skill ) ;
20687: LD_INT 0
20689: PPUSH
20690: LD_VAR 0 8
20694: PPUSH
20695: LD_VAR 0 4
20699: PPUSH
20700: CALL_OW 380
// end else
20704: GO 20723
// PrepareHuman ( false , i , skill ) ;
20706: LD_INT 0
20708: PPUSH
20709: LD_VAR 0 8
20713: PPUSH
20714: LD_VAR 0 4
20718: PPUSH
20719: CALL_OW 380
// un := CreateHuman ;
20723: LD_ADDR_VAR 0 14
20727: PUSH
20728: CALL_OW 44
20732: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
20733: LD_ADDR_VAR 0 7
20737: PUSH
20738: LD_VAR 0 7
20742: PPUSH
20743: LD_INT 1
20745: PPUSH
20746: LD_VAR 0 14
20750: PPUSH
20751: CALL_OW 2
20755: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
20756: LD_VAR 0 14
20760: PPUSH
20761: LD_VAR 0 12
20765: PUSH
20766: LD_INT 1
20768: ARRAY
20769: PPUSH
20770: CALL_OW 52
// end ;
20774: GO 20409
20776: POP
20777: POP
// end ;
20778: GO 19709
20780: POP
20781: POP
// result := result ^ buildings ;
20782: LD_ADDR_VAR 0 7
20786: PUSH
20787: LD_VAR 0 7
20791: PUSH
20792: LD_VAR 0 18
20796: ADD
20797: ST_TO_ADDR
// end else
20798: GO 20941
// begin for i = 1 to personel do
20800: LD_ADDR_VAR 0 8
20804: PUSH
20805: DOUBLE
20806: LD_INT 1
20808: DEC
20809: ST_TO_ADDR
20810: LD_VAR 0 6
20814: PUSH
20815: FOR_TO
20816: IFFALSE 20939
// begin if i > 4 then
20818: LD_VAR 0 8
20822: PUSH
20823: LD_INT 4
20825: GREATER
20826: IFFALSE 20830
// break ;
20828: GO 20939
// x := personel [ i ] ;
20830: LD_ADDR_VAR 0 13
20834: PUSH
20835: LD_VAR 0 6
20839: PUSH
20840: LD_VAR 0 8
20844: ARRAY
20845: ST_TO_ADDR
// if x = - 1 then
20846: LD_VAR 0 13
20850: PUSH
20851: LD_INT 1
20853: NEG
20854: EQUAL
20855: IFFALSE 20859
// continue ;
20857: GO 20815
// PrepareHuman ( false , i , skill ) ;
20859: LD_INT 0
20861: PPUSH
20862: LD_VAR 0 8
20866: PPUSH
20867: LD_VAR 0 4
20871: PPUSH
20872: CALL_OW 380
// un := CreateHuman ;
20876: LD_ADDR_VAR 0 14
20880: PUSH
20881: CALL_OW 44
20885: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
20886: LD_VAR 0 14
20890: PPUSH
20891: LD_VAR 0 1
20895: PPUSH
20896: CALL_OW 250
20900: PPUSH
20901: LD_VAR 0 1
20905: PPUSH
20906: CALL_OW 251
20910: PPUSH
20911: LD_INT 10
20913: PPUSH
20914: LD_INT 0
20916: PPUSH
20917: CALL_OW 50
// result := result ^ un ;
20921: LD_ADDR_VAR 0 7
20925: PUSH
20926: LD_VAR 0 7
20930: PUSH
20931: LD_VAR 0 14
20935: ADD
20936: ST_TO_ADDR
// end ;
20937: GO 20815
20939: POP
20940: POP
// end ; end ;
20941: LD_VAR 0 7
20945: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
20946: LD_INT 0
20948: PPUSH
20949: PPUSH
20950: PPUSH
20951: PPUSH
20952: PPUSH
20953: PPUSH
20954: PPUSH
20955: PPUSH
20956: PPUSH
20957: PPUSH
20958: PPUSH
20959: PPUSH
20960: PPUSH
20961: PPUSH
20962: PPUSH
20963: PPUSH
// result := false ;
20964: LD_ADDR_VAR 0 3
20968: PUSH
20969: LD_INT 0
20971: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
20972: LD_VAR 0 1
20976: NOT
20977: IFTRUE 21002
20979: PUSH
20980: LD_VAR 0 1
20984: PPUSH
20985: CALL_OW 266
20989: PUSH
20990: LD_INT 32
20992: PUSH
20993: LD_INT 33
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: IN
21000: NOT
21001: OR
21002: IFFALSE 21006
// exit ;
21004: GO 22141
// nat := GetNation ( tower ) ;
21006: LD_ADDR_VAR 0 12
21010: PUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 248
21020: ST_TO_ADDR
// side := GetSide ( tower ) ;
21021: LD_ADDR_VAR 0 16
21025: PUSH
21026: LD_VAR 0 1
21030: PPUSH
21031: CALL_OW 255
21035: ST_TO_ADDR
// x := GetX ( tower ) ;
21036: LD_ADDR_VAR 0 10
21040: PUSH
21041: LD_VAR 0 1
21045: PPUSH
21046: CALL_OW 250
21050: ST_TO_ADDR
// y := GetY ( tower ) ;
21051: LD_ADDR_VAR 0 11
21055: PUSH
21056: LD_VAR 0 1
21060: PPUSH
21061: CALL_OW 251
21065: ST_TO_ADDR
// if not x or not y then
21066: LD_VAR 0 10
21070: NOT
21071: IFTRUE 21080
21073: PUSH
21074: LD_VAR 0 11
21078: NOT
21079: OR
21080: IFFALSE 21084
// exit ;
21082: GO 22141
// weapon := 0 ;
21084: LD_ADDR_VAR 0 18
21088: PUSH
21089: LD_INT 0
21091: ST_TO_ADDR
// fac_list := [ ] ;
21092: LD_ADDR_VAR 0 17
21096: PUSH
21097: EMPTY
21098: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
21099: LD_ADDR_VAR 0 6
21103: PUSH
21104: LD_VAR 0 1
21108: PPUSH
21109: CALL_OW 274
21113: PPUSH
21114: LD_VAR 0 2
21118: PPUSH
21119: LD_INT 0
21121: PPUSH
21122: CALL 18676 0 3
21126: PPUSH
21127: LD_INT 30
21129: PUSH
21130: LD_INT 3
21132: PUSH
21133: EMPTY
21134: LIST
21135: LIST
21136: PPUSH
21137: CALL_OW 72
21141: ST_TO_ADDR
// if not factories then
21142: LD_VAR 0 6
21146: NOT
21147: IFFALSE 21151
// exit ;
21149: GO 22141
// for i in factories do
21151: LD_ADDR_VAR 0 8
21155: PUSH
21156: LD_VAR 0 6
21160: PUSH
21161: FOR_IN
21162: IFFALSE 21187
// fac_list := fac_list union AvailableWeaponList ( i ) ;
21164: LD_ADDR_VAR 0 17
21168: PUSH
21169: LD_VAR 0 17
21173: PUSH
21174: LD_VAR 0 8
21178: PPUSH
21179: CALL_OW 478
21183: UNION
21184: ST_TO_ADDR
21185: GO 21161
21187: POP
21188: POP
// if not fac_list then
21189: LD_VAR 0 17
21193: NOT
21194: IFFALSE 21198
// exit ;
21196: GO 22141
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
21198: LD_ADDR_VAR 0 5
21202: PUSH
21203: LD_INT 4
21205: PUSH
21206: LD_INT 5
21208: PUSH
21209: LD_INT 9
21211: PUSH
21212: LD_INT 10
21214: PUSH
21215: LD_INT 6
21217: PUSH
21218: LD_INT 7
21220: PUSH
21221: LD_INT 11
21223: PUSH
21224: EMPTY
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: PUSH
21233: LD_INT 27
21235: PUSH
21236: LD_INT 28
21238: PUSH
21239: LD_INT 26
21241: PUSH
21242: LD_INT 30
21244: PUSH
21245: EMPTY
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: PUSH
21251: LD_INT 43
21253: PUSH
21254: LD_INT 44
21256: PUSH
21257: LD_INT 46
21259: PUSH
21260: LD_INT 45
21262: PUSH
21263: LD_INT 47
21265: PUSH
21266: LD_INT 49
21268: PUSH
21269: EMPTY
21270: LIST
21271: LIST
21272: LIST
21273: LIST
21274: LIST
21275: LIST
21276: PUSH
21277: EMPTY
21278: LIST
21279: LIST
21280: LIST
21281: PUSH
21282: LD_VAR 0 12
21286: ARRAY
21287: ST_TO_ADDR
// list := list isect fac_list ;
21288: LD_ADDR_VAR 0 5
21292: PUSH
21293: LD_VAR 0 5
21297: PUSH
21298: LD_VAR 0 17
21302: ISECT
21303: ST_TO_ADDR
// if not list then
21304: LD_VAR 0 5
21308: NOT
21309: IFFALSE 21313
// exit ;
21311: GO 22141
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
21313: LD_VAR 0 12
21317: PUSH
21318: LD_INT 3
21320: EQUAL
21321: IFFALSE 21333
21323: PUSH
21324: LD_INT 49
21326: PUSH
21327: LD_VAR 0 5
21331: IN
21332: AND
21333: IFFALSE 21353
21335: PUSH
21336: LD_INT 31
21338: PPUSH
21339: LD_VAR 0 16
21343: PPUSH
21344: CALL_OW 321
21348: PUSH
21349: LD_INT 2
21351: EQUAL
21352: AND
21353: IFFALSE 21413
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
21355: LD_INT 22
21357: PUSH
21358: LD_VAR 0 16
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 35
21369: PUSH
21370: LD_INT 49
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 91
21379: PUSH
21380: LD_VAR 0 1
21384: PUSH
21385: LD_INT 10
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: LIST
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: LIST
21397: PPUSH
21398: CALL_OW 69
21402: NOT
21403: IFFALSE 21413
// weapon := ru_time_lapser ;
21405: LD_ADDR_VAR 0 18
21409: PUSH
21410: LD_INT 49
21412: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
21413: LD_VAR 0 12
21417: PUSH
21418: LD_INT 1
21420: PUSH
21421: LD_INT 2
21423: PUSH
21424: EMPTY
21425: LIST
21426: LIST
21427: IN
21428: IFFALSE 21452
21430: PUSH
21431: LD_INT 11
21433: PUSH
21434: LD_VAR 0 5
21438: IN
21439: IFTRUE 21451
21441: PUSH
21442: LD_INT 30
21444: PUSH
21445: LD_VAR 0 5
21449: IN
21450: OR
21451: AND
21452: IFFALSE 21472
21454: PUSH
21455: LD_INT 6
21457: PPUSH
21458: LD_VAR 0 16
21462: PPUSH
21463: CALL_OW 321
21467: PUSH
21468: LD_INT 2
21470: EQUAL
21471: AND
21472: IFFALSE 21639
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
21474: LD_INT 22
21476: PUSH
21477: LD_VAR 0 16
21481: PUSH
21482: EMPTY
21483: LIST
21484: LIST
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 35
21491: PUSH
21492: LD_INT 11
21494: PUSH
21495: EMPTY
21496: LIST
21497: LIST
21498: PUSH
21499: LD_INT 35
21501: PUSH
21502: LD_INT 30
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: PUSH
21509: EMPTY
21510: LIST
21511: LIST
21512: LIST
21513: PUSH
21514: LD_INT 91
21516: PUSH
21517: LD_VAR 0 1
21521: PUSH
21522: LD_INT 18
21524: PUSH
21525: EMPTY
21526: LIST
21527: LIST
21528: LIST
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: LIST
21534: PPUSH
21535: CALL_OW 69
21539: NOT
21540: IFFALSE 21616
21542: PUSH
21543: LD_INT 22
21545: PUSH
21546: LD_VAR 0 16
21550: PUSH
21551: EMPTY
21552: LIST
21553: LIST
21554: PUSH
21555: LD_INT 2
21557: PUSH
21558: LD_INT 30
21560: PUSH
21561: LD_INT 32
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: LD_INT 30
21570: PUSH
21571: LD_INT 33
21573: PUSH
21574: EMPTY
21575: LIST
21576: LIST
21577: PUSH
21578: EMPTY
21579: LIST
21580: LIST
21581: LIST
21582: PUSH
21583: LD_INT 91
21585: PUSH
21586: LD_VAR 0 1
21590: PUSH
21591: LD_INT 12
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: LIST
21598: PUSH
21599: EMPTY
21600: LIST
21601: LIST
21602: LIST
21603: PUSH
21604: EMPTY
21605: LIST
21606: PPUSH
21607: CALL_OW 69
21611: PUSH
21612: LD_INT 2
21614: GREATER
21615: AND
21616: IFFALSE 21639
// weapon := [ us_radar , ar_radar ] [ nat ] ;
21618: LD_ADDR_VAR 0 18
21622: PUSH
21623: LD_INT 11
21625: PUSH
21626: LD_INT 30
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: LD_VAR 0 12
21637: ARRAY
21638: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
21639: LD_VAR 0 18
21643: NOT
21644: IFFALSE 21664
21646: PUSH
21647: LD_INT 40
21649: PPUSH
21650: LD_VAR 0 16
21654: PPUSH
21655: CALL_OW 321
21659: PUSH
21660: LD_INT 2
21662: EQUAL
21663: AND
21664: IFFALSE 21700
21666: PUSH
21667: LD_INT 7
21669: PUSH
21670: LD_VAR 0 5
21674: IN
21675: IFTRUE 21687
21677: PUSH
21678: LD_INT 28
21680: PUSH
21681: LD_VAR 0 5
21685: IN
21686: OR
21687: IFTRUE 21699
21689: PUSH
21690: LD_INT 45
21692: PUSH
21693: LD_VAR 0 5
21697: IN
21698: OR
21699: AND
21700: IFFALSE 21954
// begin hex := GetHexInfo ( x , y ) ;
21702: LD_ADDR_VAR 0 4
21706: PUSH
21707: LD_VAR 0 10
21711: PPUSH
21712: LD_VAR 0 11
21716: PPUSH
21717: CALL_OW 546
21721: ST_TO_ADDR
// if hex [ 1 ] then
21722: LD_VAR 0 4
21726: PUSH
21727: LD_INT 1
21729: ARRAY
21730: IFFALSE 21734
// exit ;
21732: GO 22141
// height := hex [ 2 ] ;
21734: LD_ADDR_VAR 0 15
21738: PUSH
21739: LD_VAR 0 4
21743: PUSH
21744: LD_INT 2
21746: ARRAY
21747: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
21748: LD_ADDR_VAR 0 14
21752: PUSH
21753: LD_INT 0
21755: PUSH
21756: LD_INT 2
21758: PUSH
21759: LD_INT 3
21761: PUSH
21762: LD_INT 5
21764: PUSH
21765: EMPTY
21766: LIST
21767: LIST
21768: LIST
21769: LIST
21770: ST_TO_ADDR
// for i in tmp do
21771: LD_ADDR_VAR 0 8
21775: PUSH
21776: LD_VAR 0 14
21780: PUSH
21781: FOR_IN
21782: IFFALSE 21952
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
21784: LD_ADDR_VAR 0 9
21788: PUSH
21789: LD_VAR 0 10
21793: PPUSH
21794: LD_VAR 0 8
21798: PPUSH
21799: LD_INT 5
21801: PPUSH
21802: CALL_OW 272
21806: PUSH
21807: LD_VAR 0 11
21811: PPUSH
21812: LD_VAR 0 8
21816: PPUSH
21817: LD_INT 5
21819: PPUSH
21820: CALL_OW 273
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
21829: LD_VAR 0 9
21833: PUSH
21834: LD_INT 1
21836: ARRAY
21837: PPUSH
21838: LD_VAR 0 9
21842: PUSH
21843: LD_INT 2
21845: ARRAY
21846: PPUSH
21847: CALL_OW 488
21851: IFFALSE 21950
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
21853: LD_ADDR_VAR 0 4
21857: PUSH
21858: LD_VAR 0 9
21862: PUSH
21863: LD_INT 1
21865: ARRAY
21866: PPUSH
21867: LD_VAR 0 9
21871: PUSH
21872: LD_INT 2
21874: ARRAY
21875: PPUSH
21876: CALL_OW 546
21880: ST_TO_ADDR
// if hex [ 1 ] then
21881: LD_VAR 0 4
21885: PUSH
21886: LD_INT 1
21888: ARRAY
21889: IFFALSE 21893
// continue ;
21891: GO 21781
// h := hex [ 2 ] ;
21893: LD_ADDR_VAR 0 13
21897: PUSH
21898: LD_VAR 0 4
21902: PUSH
21903: LD_INT 2
21905: ARRAY
21906: ST_TO_ADDR
// if h + 7 < height then
21907: LD_VAR 0 13
21911: PUSH
21912: LD_INT 7
21914: PLUS
21915: PUSH
21916: LD_VAR 0 15
21920: LESS
21921: IFFALSE 21950
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
21923: LD_ADDR_VAR 0 18
21927: PUSH
21928: LD_INT 7
21930: PUSH
21931: LD_INT 28
21933: PUSH
21934: LD_INT 45
21936: PUSH
21937: EMPTY
21938: LIST
21939: LIST
21940: LIST
21941: PUSH
21942: LD_VAR 0 12
21946: ARRAY
21947: ST_TO_ADDR
// break ;
21948: GO 21952
// end ; end ; end ;
21950: GO 21781
21952: POP
21953: POP
// end ; if not weapon then
21954: LD_VAR 0 18
21958: NOT
21959: IFFALSE 22019
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
21961: LD_ADDR_VAR 0 5
21965: PUSH
21966: LD_VAR 0 5
21970: PUSH
21971: LD_INT 11
21973: PUSH
21974: LD_INT 30
21976: PUSH
21977: LD_INT 49
21979: PUSH
21980: EMPTY
21981: LIST
21982: LIST
21983: LIST
21984: DIFF
21985: ST_TO_ADDR
// if not list then
21986: LD_VAR 0 5
21990: NOT
21991: IFFALSE 21995
// exit ;
21993: GO 22141
// weapon := list [ rand ( 1 , list ) ] ;
21995: LD_ADDR_VAR 0 18
21999: PUSH
22000: LD_VAR 0 5
22004: PUSH
22005: LD_INT 1
22007: PPUSH
22008: LD_VAR 0 5
22012: PPUSH
22013: CALL_OW 12
22017: ARRAY
22018: ST_TO_ADDR
// end ; if weapon then
22019: LD_VAR 0 18
22023: IFFALSE 22141
// begin tmp := CostOfWeapon ( weapon ) ;
22025: LD_ADDR_VAR 0 14
22029: PUSH
22030: LD_VAR 0 18
22034: PPUSH
22035: CALL_OW 451
22039: ST_TO_ADDR
// j := GetBase ( tower ) ;
22040: LD_ADDR_VAR 0 9
22044: PUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 274
22054: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
22055: LD_VAR 0 9
22059: PPUSH
22060: LD_INT 1
22062: PPUSH
22063: CALL_OW 275
22067: PUSH
22068: LD_VAR 0 14
22072: PUSH
22073: LD_INT 1
22075: ARRAY
22076: GREATEREQUAL
22077: IFFALSE 22103
22079: PUSH
22080: LD_VAR 0 9
22084: PPUSH
22085: LD_INT 2
22087: PPUSH
22088: CALL_OW 275
22092: PUSH
22093: LD_VAR 0 14
22097: PUSH
22098: LD_INT 2
22100: ARRAY
22101: GREATEREQUAL
22102: AND
22103: IFFALSE 22129
22105: PUSH
22106: LD_VAR 0 9
22110: PPUSH
22111: LD_INT 3
22113: PPUSH
22114: CALL_OW 275
22118: PUSH
22119: LD_VAR 0 14
22123: PUSH
22124: LD_INT 3
22126: ARRAY
22127: GREATEREQUAL
22128: AND
22129: IFFALSE 22141
// result := weapon ;
22131: LD_ADDR_VAR 0 3
22135: PUSH
22136: LD_VAR 0 18
22140: ST_TO_ADDR
// end ; end ;
22141: LD_VAR 0 3
22145: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
// result := true ;
22150: LD_ADDR_VAR 0 3
22154: PUSH
22155: LD_INT 1
22157: ST_TO_ADDR
// if array1 = array2 then
22158: LD_VAR 0 1
22162: PUSH
22163: LD_VAR 0 2
22167: EQUAL
22168: IFFALSE 22228
// begin for i = 1 to array1 do
22170: LD_ADDR_VAR 0 4
22174: PUSH
22175: DOUBLE
22176: LD_INT 1
22178: DEC
22179: ST_TO_ADDR
22180: LD_VAR 0 1
22184: PUSH
22185: FOR_TO
22186: IFFALSE 22224
// if array1 [ i ] <> array2 [ i ] then
22188: LD_VAR 0 1
22192: PUSH
22193: LD_VAR 0 4
22197: ARRAY
22198: PUSH
22199: LD_VAR 0 2
22203: PUSH
22204: LD_VAR 0 4
22208: ARRAY
22209: NONEQUAL
22210: IFFALSE 22222
// begin result := false ;
22212: LD_ADDR_VAR 0 3
22216: PUSH
22217: LD_INT 0
22219: ST_TO_ADDR
// break ;
22220: GO 22224
// end ;
22222: GO 22185
22224: POP
22225: POP
// end else
22226: GO 22236
// result := false ;
22228: LD_ADDR_VAR 0 3
22232: PUSH
22233: LD_INT 0
22235: ST_TO_ADDR
// end ;
22236: LD_VAR 0 3
22240: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
22241: LD_INT 0
22243: PPUSH
22244: PPUSH
// if not array1 or not array2 then
22245: LD_VAR 0 1
22249: NOT
22250: IFTRUE 22259
22252: PUSH
22253: LD_VAR 0 2
22257: NOT
22258: OR
22259: IFFALSE 22263
// exit ;
22261: GO 22327
// result := true ;
22263: LD_ADDR_VAR 0 3
22267: PUSH
22268: LD_INT 1
22270: ST_TO_ADDR
// for i = 1 to array1 do
22271: LD_ADDR_VAR 0 4
22275: PUSH
22276: DOUBLE
22277: LD_INT 1
22279: DEC
22280: ST_TO_ADDR
22281: LD_VAR 0 1
22285: PUSH
22286: FOR_TO
22287: IFFALSE 22325
// if array1 [ i ] <> array2 [ i ] then
22289: LD_VAR 0 1
22293: PUSH
22294: LD_VAR 0 4
22298: ARRAY
22299: PUSH
22300: LD_VAR 0 2
22304: PUSH
22305: LD_VAR 0 4
22309: ARRAY
22310: NONEQUAL
22311: IFFALSE 22323
// begin result := false ;
22313: LD_ADDR_VAR 0 3
22317: PUSH
22318: LD_INT 0
22320: ST_TO_ADDR
// break ;
22321: GO 22325
// end ;
22323: GO 22286
22325: POP
22326: POP
// end ;
22327: LD_VAR 0 3
22331: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
22332: LD_INT 0
22334: PPUSH
22335: PPUSH
22336: PPUSH
// pom := GetBase ( fac ) ;
22337: LD_ADDR_VAR 0 5
22341: PUSH
22342: LD_VAR 0 1
22346: PPUSH
22347: CALL_OW 274
22351: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
22352: LD_ADDR_VAR 0 4
22356: PUSH
22357: LD_VAR 0 2
22361: PUSH
22362: LD_INT 1
22364: ARRAY
22365: PPUSH
22366: LD_VAR 0 2
22370: PUSH
22371: LD_INT 2
22373: ARRAY
22374: PPUSH
22375: LD_VAR 0 2
22379: PUSH
22380: LD_INT 3
22382: ARRAY
22383: PPUSH
22384: LD_VAR 0 2
22388: PUSH
22389: LD_INT 4
22391: ARRAY
22392: PPUSH
22393: CALL_OW 449
22397: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22398: LD_ADDR_VAR 0 3
22402: PUSH
22403: LD_VAR 0 5
22407: PPUSH
22408: LD_INT 1
22410: PPUSH
22411: CALL_OW 275
22415: PUSH
22416: LD_VAR 0 4
22420: PUSH
22421: LD_INT 1
22423: ARRAY
22424: GREATEREQUAL
22425: IFFALSE 22451
22427: PUSH
22428: LD_VAR 0 5
22432: PPUSH
22433: LD_INT 2
22435: PPUSH
22436: CALL_OW 275
22440: PUSH
22441: LD_VAR 0 4
22445: PUSH
22446: LD_INT 2
22448: ARRAY
22449: GREATEREQUAL
22450: AND
22451: IFFALSE 22477
22453: PUSH
22454: LD_VAR 0 5
22458: PPUSH
22459: LD_INT 3
22461: PPUSH
22462: CALL_OW 275
22466: PUSH
22467: LD_VAR 0 4
22471: PUSH
22472: LD_INT 3
22474: ARRAY
22475: GREATEREQUAL
22476: AND
22477: ST_TO_ADDR
// end ;
22478: LD_VAR 0 3
22482: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
22483: LD_INT 0
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
// pom := GetBase ( building ) ;
22489: LD_ADDR_VAR 0 3
22493: PUSH
22494: LD_VAR 0 1
22498: PPUSH
22499: CALL_OW 274
22503: ST_TO_ADDR
// if not pom then
22504: LD_VAR 0 3
22508: NOT
22509: IFFALSE 22513
// exit ;
22511: GO 22687
// btype := GetBType ( building ) ;
22513: LD_ADDR_VAR 0 5
22517: PUSH
22518: LD_VAR 0 1
22522: PPUSH
22523: CALL_OW 266
22527: ST_TO_ADDR
// if btype = b_armoury then
22528: LD_VAR 0 5
22532: PUSH
22533: LD_INT 4
22535: EQUAL
22536: IFFALSE 22546
// btype := b_barracks ;
22538: LD_ADDR_VAR 0 5
22542: PUSH
22543: LD_INT 5
22545: ST_TO_ADDR
// if btype = b_depot then
22546: LD_VAR 0 5
22550: PUSH
22551: LD_INT 0
22553: EQUAL
22554: IFFALSE 22564
// btype := b_warehouse ;
22556: LD_ADDR_VAR 0 5
22560: PUSH
22561: LD_INT 1
22563: ST_TO_ADDR
// if btype = b_workshop then
22564: LD_VAR 0 5
22568: PUSH
22569: LD_INT 2
22571: EQUAL
22572: IFFALSE 22582
// btype := b_factory ;
22574: LD_ADDR_VAR 0 5
22578: PUSH
22579: LD_INT 3
22581: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22582: LD_ADDR_VAR 0 4
22586: PUSH
22587: LD_VAR 0 5
22591: PPUSH
22592: LD_VAR 0 1
22596: PPUSH
22597: CALL_OW 248
22601: PPUSH
22602: CALL_OW 450
22606: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22607: LD_ADDR_VAR 0 2
22611: PUSH
22612: LD_VAR 0 3
22616: PPUSH
22617: LD_INT 1
22619: PPUSH
22620: CALL_OW 275
22624: PUSH
22625: LD_VAR 0 4
22629: PUSH
22630: LD_INT 1
22632: ARRAY
22633: GREATEREQUAL
22634: IFFALSE 22660
22636: PUSH
22637: LD_VAR 0 3
22641: PPUSH
22642: LD_INT 2
22644: PPUSH
22645: CALL_OW 275
22649: PUSH
22650: LD_VAR 0 4
22654: PUSH
22655: LD_INT 2
22657: ARRAY
22658: GREATEREQUAL
22659: AND
22660: IFFALSE 22686
22662: PUSH
22663: LD_VAR 0 3
22667: PPUSH
22668: LD_INT 3
22670: PPUSH
22671: CALL_OW 275
22675: PUSH
22676: LD_VAR 0 4
22680: PUSH
22681: LD_INT 3
22683: ARRAY
22684: GREATEREQUAL
22685: AND
22686: ST_TO_ADDR
// end ;
22687: LD_VAR 0 2
22691: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
22692: LD_INT 0
22694: PPUSH
22695: PPUSH
22696: PPUSH
// pom := GetBase ( building ) ;
22697: LD_ADDR_VAR 0 4
22701: PUSH
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 274
22711: ST_TO_ADDR
// if not pom then
22712: LD_VAR 0 4
22716: NOT
22717: IFFALSE 22721
// exit ;
22719: GO 22826
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
22721: LD_ADDR_VAR 0 5
22725: PUSH
22726: LD_VAR 0 2
22730: PPUSH
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL_OW 248
22740: PPUSH
22741: CALL_OW 450
22745: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
22746: LD_ADDR_VAR 0 3
22750: PUSH
22751: LD_VAR 0 4
22755: PPUSH
22756: LD_INT 1
22758: PPUSH
22759: CALL_OW 275
22763: PUSH
22764: LD_VAR 0 5
22768: PUSH
22769: LD_INT 1
22771: ARRAY
22772: GREATEREQUAL
22773: IFFALSE 22799
22775: PUSH
22776: LD_VAR 0 4
22780: PPUSH
22781: LD_INT 2
22783: PPUSH
22784: CALL_OW 275
22788: PUSH
22789: LD_VAR 0 5
22793: PUSH
22794: LD_INT 2
22796: ARRAY
22797: GREATEREQUAL
22798: AND
22799: IFFALSE 22825
22801: PUSH
22802: LD_VAR 0 4
22806: PPUSH
22807: LD_INT 3
22809: PPUSH
22810: CALL_OW 275
22814: PUSH
22815: LD_VAR 0 5
22819: PUSH
22820: LD_INT 3
22822: ARRAY
22823: GREATEREQUAL
22824: AND
22825: ST_TO_ADDR
// end ;
22826: LD_VAR 0 3
22830: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
22831: LD_INT 0
22833: PPUSH
22834: PPUSH
22835: PPUSH
22836: PPUSH
22837: PPUSH
22838: PPUSH
22839: PPUSH
22840: PPUSH
22841: PPUSH
22842: PPUSH
22843: PPUSH
// result := false ;
22844: LD_ADDR_VAR 0 8
22848: PUSH
22849: LD_INT 0
22851: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
22852: LD_VAR 0 5
22856: NOT
22857: IFTRUE 22866
22859: PUSH
22860: LD_VAR 0 1
22864: NOT
22865: OR
22866: IFTRUE 22875
22868: PUSH
22869: LD_VAR 0 2
22873: NOT
22874: OR
22875: IFTRUE 22884
22877: PUSH
22878: LD_VAR 0 3
22882: NOT
22883: OR
22884: IFFALSE 22888
// exit ;
22886: GO 23714
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
22888: LD_ADDR_VAR 0 14
22892: PUSH
22893: LD_VAR 0 1
22897: PPUSH
22898: LD_VAR 0 2
22902: PPUSH
22903: LD_VAR 0 3
22907: PPUSH
22908: LD_VAR 0 4
22912: PPUSH
22913: LD_VAR 0 5
22917: PUSH
22918: LD_INT 1
22920: ARRAY
22921: PPUSH
22922: CALL_OW 248
22926: PPUSH
22927: LD_INT 0
22929: PPUSH
22930: CALL 24995 0 6
22934: ST_TO_ADDR
// if not hexes then
22935: LD_VAR 0 14
22939: NOT
22940: IFFALSE 22944
// exit ;
22942: GO 23714
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
22944: LD_ADDR_VAR 0 17
22948: PUSH
22949: LD_VAR 0 5
22953: PPUSH
22954: LD_INT 22
22956: PUSH
22957: LD_VAR 0 13
22961: PPUSH
22962: CALL_OW 255
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: LD_INT 2
22973: PUSH
22974: LD_INT 30
22976: PUSH
22977: LD_INT 0
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: PUSH
22984: LD_INT 30
22986: PUSH
22987: LD_INT 1
22989: PUSH
22990: EMPTY
22991: LIST
22992: LIST
22993: PUSH
22994: EMPTY
22995: LIST
22996: LIST
22997: LIST
22998: PUSH
22999: EMPTY
23000: LIST
23001: LIST
23002: PPUSH
23003: CALL_OW 72
23007: ST_TO_ADDR
// for i = 1 to hexes do
23008: LD_ADDR_VAR 0 9
23012: PUSH
23013: DOUBLE
23014: LD_INT 1
23016: DEC
23017: ST_TO_ADDR
23018: LD_VAR 0 14
23022: PUSH
23023: FOR_TO
23024: IFFALSE 23712
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23026: LD_ADDR_VAR 0 13
23030: PUSH
23031: LD_VAR 0 14
23035: PUSH
23036: LD_VAR 0 9
23040: ARRAY
23041: PUSH
23042: LD_INT 1
23044: ARRAY
23045: PPUSH
23046: LD_VAR 0 14
23050: PUSH
23051: LD_VAR 0 9
23055: ARRAY
23056: PUSH
23057: LD_INT 2
23059: ARRAY
23060: PPUSH
23061: CALL_OW 428
23065: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
23066: LD_VAR 0 14
23070: PUSH
23071: LD_VAR 0 9
23075: ARRAY
23076: PUSH
23077: LD_INT 1
23079: ARRAY
23080: PPUSH
23081: LD_VAR 0 14
23085: PUSH
23086: LD_VAR 0 9
23090: ARRAY
23091: PUSH
23092: LD_INT 2
23094: ARRAY
23095: PPUSH
23096: CALL_OW 351
23100: IFTRUE 23139
23102: PUSH
23103: LD_VAR 0 14
23107: PUSH
23108: LD_VAR 0 9
23112: ARRAY
23113: PUSH
23114: LD_INT 1
23116: ARRAY
23117: PPUSH
23118: LD_VAR 0 14
23122: PUSH
23123: LD_VAR 0 9
23127: ARRAY
23128: PUSH
23129: LD_INT 2
23131: ARRAY
23132: PPUSH
23133: CALL_OW 488
23137: NOT
23138: OR
23139: IFTRUE 23156
23141: PUSH
23142: LD_VAR 0 13
23146: PPUSH
23147: CALL_OW 247
23151: PUSH
23152: LD_INT 3
23154: EQUAL
23155: OR
23156: IFFALSE 23162
// exit ;
23158: POP
23159: POP
23160: GO 23714
// if not tmp then
23162: LD_VAR 0 13
23166: NOT
23167: IFFALSE 23171
// continue ;
23169: GO 23023
// result := true ;
23171: LD_ADDR_VAR 0 8
23175: PUSH
23176: LD_INT 1
23178: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
23179: LD_VAR 0 6
23183: IFFALSE 23200
23185: PUSH
23186: LD_VAR 0 13
23190: PPUSH
23191: CALL_OW 247
23195: PUSH
23196: LD_INT 2
23198: EQUAL
23199: AND
23200: IFFALSE 23217
23202: PUSH
23203: LD_VAR 0 13
23207: PPUSH
23208: CALL_OW 263
23212: PUSH
23213: LD_INT 1
23215: EQUAL
23216: AND
23217: IFFALSE 23381
// begin if IsDrivenBy ( tmp ) then
23219: LD_VAR 0 13
23223: PPUSH
23224: CALL_OW 311
23228: IFFALSE 23232
// continue ;
23230: GO 23023
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
23232: LD_VAR 0 6
23236: PPUSH
23237: LD_INT 3
23239: PUSH
23240: LD_INT 60
23242: PUSH
23243: EMPTY
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PUSH
23250: LD_INT 3
23252: PUSH
23253: LD_INT 55
23255: PUSH
23256: EMPTY
23257: LIST
23258: PUSH
23259: EMPTY
23260: LIST
23261: LIST
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: PPUSH
23267: CALL_OW 72
23271: IFFALSE 23379
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
23273: LD_ADDR_VAR 0 18
23277: PUSH
23278: LD_VAR 0 6
23282: PPUSH
23283: LD_INT 3
23285: PUSH
23286: LD_INT 60
23288: PUSH
23289: EMPTY
23290: LIST
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: LD_INT 3
23298: PUSH
23299: LD_INT 55
23301: PUSH
23302: EMPTY
23303: LIST
23304: PUSH
23305: EMPTY
23306: LIST
23307: LIST
23308: PUSH
23309: EMPTY
23310: LIST
23311: LIST
23312: PPUSH
23313: CALL_OW 72
23317: PUSH
23318: LD_INT 1
23320: ARRAY
23321: ST_TO_ADDR
// if IsInUnit ( driver ) then
23322: LD_VAR 0 18
23326: PPUSH
23327: CALL_OW 310
23331: IFFALSE 23342
// ComExit ( driver ) ;
23333: LD_VAR 0 18
23337: PPUSH
23338: CALL 48995 0 1
// AddComEnterUnit ( driver , tmp ) ;
23342: LD_VAR 0 18
23346: PPUSH
23347: LD_VAR 0 13
23351: PPUSH
23352: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
23356: LD_VAR 0 18
23360: PPUSH
23361: LD_VAR 0 7
23365: PPUSH
23366: CALL_OW 173
// AddComExitVehicle ( driver ) ;
23370: LD_VAR 0 18
23374: PPUSH
23375: CALL_OW 181
// end ; continue ;
23379: GO 23023
// end ; if not cleaners or not tmp in cleaners then
23381: LD_VAR 0 6
23385: NOT
23386: IFTRUE 23401
23388: PUSH
23389: LD_VAR 0 13
23393: PUSH
23394: LD_VAR 0 6
23398: IN
23399: NOT
23400: OR
23401: IFFALSE 23710
// begin if dep then
23403: LD_VAR 0 17
23407: IFFALSE 23543
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
23409: LD_ADDR_VAR 0 16
23413: PUSH
23414: LD_VAR 0 17
23418: PUSH
23419: LD_INT 1
23421: ARRAY
23422: PPUSH
23423: CALL_OW 250
23427: PPUSH
23428: LD_VAR 0 17
23432: PUSH
23433: LD_INT 1
23435: ARRAY
23436: PPUSH
23437: CALL_OW 254
23441: PPUSH
23442: LD_INT 5
23444: PPUSH
23445: CALL_OW 272
23449: PUSH
23450: LD_VAR 0 17
23454: PUSH
23455: LD_INT 1
23457: ARRAY
23458: PPUSH
23459: CALL_OW 251
23463: PPUSH
23464: LD_VAR 0 17
23468: PUSH
23469: LD_INT 1
23471: ARRAY
23472: PPUSH
23473: CALL_OW 254
23477: PPUSH
23478: LD_INT 5
23480: PPUSH
23481: CALL_OW 273
23485: PUSH
23486: EMPTY
23487: LIST
23488: LIST
23489: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
23490: LD_VAR 0 16
23494: PUSH
23495: LD_INT 1
23497: ARRAY
23498: PPUSH
23499: LD_VAR 0 16
23503: PUSH
23504: LD_INT 2
23506: ARRAY
23507: PPUSH
23508: CALL_OW 488
23512: IFFALSE 23543
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
23514: LD_VAR 0 13
23518: PPUSH
23519: LD_VAR 0 16
23523: PUSH
23524: LD_INT 1
23526: ARRAY
23527: PPUSH
23528: LD_VAR 0 16
23532: PUSH
23533: LD_INT 2
23535: ARRAY
23536: PPUSH
23537: CALL_OW 111
// continue ;
23541: GO 23023
// end ; end ; r := GetDir ( tmp ) ;
23543: LD_ADDR_VAR 0 15
23547: PUSH
23548: LD_VAR 0 13
23552: PPUSH
23553: CALL_OW 254
23557: ST_TO_ADDR
// if r = 5 then
23558: LD_VAR 0 15
23562: PUSH
23563: LD_INT 5
23565: EQUAL
23566: IFFALSE 23576
// r := 0 ;
23568: LD_ADDR_VAR 0 15
23572: PUSH
23573: LD_INT 0
23575: ST_TO_ADDR
// for j = r to 5 do
23576: LD_ADDR_VAR 0 10
23580: PUSH
23581: DOUBLE
23582: LD_VAR 0 15
23586: DEC
23587: ST_TO_ADDR
23588: LD_INT 5
23590: PUSH
23591: FOR_TO
23592: IFFALSE 23708
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
23594: LD_ADDR_VAR 0 11
23598: PUSH
23599: LD_VAR 0 13
23603: PPUSH
23604: CALL_OW 250
23608: PPUSH
23609: LD_VAR 0 10
23613: PPUSH
23614: LD_INT 2
23616: PPUSH
23617: CALL_OW 272
23621: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
23622: LD_ADDR_VAR 0 12
23626: PUSH
23627: LD_VAR 0 13
23631: PPUSH
23632: CALL_OW 251
23636: PPUSH
23637: LD_VAR 0 10
23641: PPUSH
23642: LD_INT 2
23644: PPUSH
23645: CALL_OW 273
23649: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
23650: LD_VAR 0 11
23654: PPUSH
23655: LD_VAR 0 12
23659: PPUSH
23660: CALL_OW 488
23664: IFFALSE 23683
23666: PUSH
23667: LD_VAR 0 11
23671: PPUSH
23672: LD_VAR 0 12
23676: PPUSH
23677: CALL_OW 428
23681: NOT
23682: AND
23683: IFFALSE 23706
// begin ComMoveXY ( tmp , _x , _y ) ;
23685: LD_VAR 0 13
23689: PPUSH
23690: LD_VAR 0 11
23694: PPUSH
23695: LD_VAR 0 12
23699: PPUSH
23700: CALL_OW 111
// break ;
23704: GO 23708
// end ; end ;
23706: GO 23591
23708: POP
23709: POP
// end ; end ;
23710: GO 23023
23712: POP
23713: POP
// end ;
23714: LD_VAR 0 8
23718: RET
// export function BuildingTechInvented ( side , btype ) ; begin
23719: LD_INT 0
23721: PPUSH
// result := true ;
23722: LD_ADDR_VAR 0 3
23726: PUSH
23727: LD_INT 1
23729: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
23730: LD_VAR 0 2
23734: PUSH
23735: LD_INT 24
23737: DOUBLE
23738: EQUAL
23739: IFTRUE 23749
23741: LD_INT 33
23743: DOUBLE
23744: EQUAL
23745: IFTRUE 23749
23747: GO 23774
23749: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
23750: LD_ADDR_VAR 0 3
23754: PUSH
23755: LD_INT 32
23757: PPUSH
23758: LD_VAR 0 1
23762: PPUSH
23763: CALL_OW 321
23767: PUSH
23768: LD_INT 2
23770: EQUAL
23771: ST_TO_ADDR
23772: GO 24090
23774: LD_INT 20
23776: DOUBLE
23777: EQUAL
23778: IFTRUE 23782
23780: GO 23807
23782: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
23783: LD_ADDR_VAR 0 3
23787: PUSH
23788: LD_INT 6
23790: PPUSH
23791: LD_VAR 0 1
23795: PPUSH
23796: CALL_OW 321
23800: PUSH
23801: LD_INT 2
23803: EQUAL
23804: ST_TO_ADDR
23805: GO 24090
23807: LD_INT 22
23809: DOUBLE
23810: EQUAL
23811: IFTRUE 23821
23813: LD_INT 36
23815: DOUBLE
23816: EQUAL
23817: IFTRUE 23821
23819: GO 23846
23821: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
23822: LD_ADDR_VAR 0 3
23826: PUSH
23827: LD_INT 15
23829: PPUSH
23830: LD_VAR 0 1
23834: PPUSH
23835: CALL_OW 321
23839: PUSH
23840: LD_INT 2
23842: EQUAL
23843: ST_TO_ADDR
23844: GO 24090
23846: LD_INT 30
23848: DOUBLE
23849: EQUAL
23850: IFTRUE 23854
23852: GO 23879
23854: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
23855: LD_ADDR_VAR 0 3
23859: PUSH
23860: LD_INT 20
23862: PPUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 321
23872: PUSH
23873: LD_INT 2
23875: EQUAL
23876: ST_TO_ADDR
23877: GO 24090
23879: LD_INT 28
23881: DOUBLE
23882: EQUAL
23883: IFTRUE 23893
23885: LD_INT 21
23887: DOUBLE
23888: EQUAL
23889: IFTRUE 23893
23891: GO 23918
23893: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
23894: LD_ADDR_VAR 0 3
23898: PUSH
23899: LD_INT 21
23901: PPUSH
23902: LD_VAR 0 1
23906: PPUSH
23907: CALL_OW 321
23911: PUSH
23912: LD_INT 2
23914: EQUAL
23915: ST_TO_ADDR
23916: GO 24090
23918: LD_INT 16
23920: DOUBLE
23921: EQUAL
23922: IFTRUE 23926
23924: GO 23951
23926: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
23927: LD_ADDR_VAR 0 3
23931: PUSH
23932: LD_INT 84
23934: PPUSH
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 321
23944: PUSH
23945: LD_INT 2
23947: EQUAL
23948: ST_TO_ADDR
23949: GO 24090
23951: LD_INT 19
23953: DOUBLE
23954: EQUAL
23955: IFTRUE 23965
23957: LD_INT 23
23959: DOUBLE
23960: EQUAL
23961: IFTRUE 23965
23963: GO 23990
23965: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
23966: LD_ADDR_VAR 0 3
23970: PUSH
23971: LD_INT 83
23973: PPUSH
23974: LD_VAR 0 1
23978: PPUSH
23979: CALL_OW 321
23983: PUSH
23984: LD_INT 2
23986: EQUAL
23987: ST_TO_ADDR
23988: GO 24090
23990: LD_INT 17
23992: DOUBLE
23993: EQUAL
23994: IFTRUE 23998
23996: GO 24023
23998: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
23999: LD_ADDR_VAR 0 3
24003: PUSH
24004: LD_INT 39
24006: PPUSH
24007: LD_VAR 0 1
24011: PPUSH
24012: CALL_OW 321
24016: PUSH
24017: LD_INT 2
24019: EQUAL
24020: ST_TO_ADDR
24021: GO 24090
24023: LD_INT 18
24025: DOUBLE
24026: EQUAL
24027: IFTRUE 24031
24029: GO 24056
24031: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
24032: LD_ADDR_VAR 0 3
24036: PUSH
24037: LD_INT 40
24039: PPUSH
24040: LD_VAR 0 1
24044: PPUSH
24045: CALL_OW 321
24049: PUSH
24050: LD_INT 2
24052: EQUAL
24053: ST_TO_ADDR
24054: GO 24090
24056: LD_INT 27
24058: DOUBLE
24059: EQUAL
24060: IFTRUE 24064
24062: GO 24089
24064: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
24065: LD_ADDR_VAR 0 3
24069: PUSH
24070: LD_INT 35
24072: PPUSH
24073: LD_VAR 0 1
24077: PPUSH
24078: CALL_OW 321
24082: PUSH
24083: LD_INT 2
24085: EQUAL
24086: ST_TO_ADDR
24087: GO 24090
24089: POP
// end ;
24090: LD_VAR 0 3
24094: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
24095: LD_INT 0
24097: PPUSH
24098: PPUSH
24099: PPUSH
24100: PPUSH
24101: PPUSH
24102: PPUSH
24103: PPUSH
24104: PPUSH
24105: PPUSH
24106: PPUSH
24107: PPUSH
// result := false ;
24108: LD_ADDR_VAR 0 6
24112: PUSH
24113: LD_INT 0
24115: ST_TO_ADDR
// if btype = b_depot then
24116: LD_VAR 0 2
24120: PUSH
24121: LD_INT 0
24123: EQUAL
24124: IFFALSE 24136
// begin result := true ;
24126: LD_ADDR_VAR 0 6
24130: PUSH
24131: LD_INT 1
24133: ST_TO_ADDR
// exit ;
24134: GO 24990
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
24136: LD_VAR 0 1
24140: NOT
24141: IFTRUE 24166
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 266
24153: PUSH
24154: LD_INT 0
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: IN
24164: NOT
24165: OR
24166: IFTRUE 24175
24168: PUSH
24169: LD_VAR 0 2
24173: NOT
24174: OR
24175: IFTRUE 24211
24177: PUSH
24178: LD_VAR 0 5
24182: PUSH
24183: LD_INT 0
24185: PUSH
24186: LD_INT 1
24188: PUSH
24189: LD_INT 2
24191: PUSH
24192: LD_INT 3
24194: PUSH
24195: LD_INT 4
24197: PUSH
24198: LD_INT 5
24200: PUSH
24201: EMPTY
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: IN
24209: NOT
24210: OR
24211: IFTRUE 24230
24213: PUSH
24214: LD_VAR 0 3
24218: PPUSH
24219: LD_VAR 0 4
24223: PPUSH
24224: CALL_OW 488
24228: NOT
24229: OR
24230: IFFALSE 24234
// exit ;
24232: GO 24990
// side := GetSide ( depot ) ;
24234: LD_ADDR_VAR 0 9
24238: PUSH
24239: LD_VAR 0 1
24243: PPUSH
24244: CALL_OW 255
24248: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
24249: LD_VAR 0 9
24253: PPUSH
24254: LD_VAR 0 2
24258: PPUSH
24259: CALL 23719 0 2
24263: NOT
24264: IFFALSE 24268
// exit ;
24266: GO 24990
// pom := GetBase ( depot ) ;
24268: LD_ADDR_VAR 0 10
24272: PUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 274
24282: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
24283: LD_ADDR_VAR 0 11
24287: PUSH
24288: LD_VAR 0 2
24292: PPUSH
24293: LD_VAR 0 1
24297: PPUSH
24298: CALL_OW 248
24302: PPUSH
24303: CALL_OW 450
24307: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
24308: LD_VAR 0 10
24312: PPUSH
24313: LD_INT 1
24315: PPUSH
24316: CALL_OW 275
24320: PUSH
24321: LD_VAR 0 11
24325: PUSH
24326: LD_INT 1
24328: ARRAY
24329: GREATEREQUAL
24330: IFFALSE 24356
24332: PUSH
24333: LD_VAR 0 10
24337: PPUSH
24338: LD_INT 2
24340: PPUSH
24341: CALL_OW 275
24345: PUSH
24346: LD_VAR 0 11
24350: PUSH
24351: LD_INT 2
24353: ARRAY
24354: GREATEREQUAL
24355: AND
24356: IFFALSE 24382
24358: PUSH
24359: LD_VAR 0 10
24363: PPUSH
24364: LD_INT 3
24366: PPUSH
24367: CALL_OW 275
24371: PUSH
24372: LD_VAR 0 11
24376: PUSH
24377: LD_INT 3
24379: ARRAY
24380: GREATEREQUAL
24381: AND
24382: NOT
24383: IFFALSE 24387
// exit ;
24385: GO 24990
// if GetBType ( depot ) = b_depot then
24387: LD_VAR 0 1
24391: PPUSH
24392: CALL_OW 266
24396: PUSH
24397: LD_INT 0
24399: EQUAL
24400: IFFALSE 24412
// dist := 28 else
24402: LD_ADDR_VAR 0 14
24406: PUSH
24407: LD_INT 28
24409: ST_TO_ADDR
24410: GO 24420
// dist := 36 ;
24412: LD_ADDR_VAR 0 14
24416: PUSH
24417: LD_INT 36
24419: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
24420: LD_VAR 0 1
24424: PPUSH
24425: LD_VAR 0 3
24429: PPUSH
24430: LD_VAR 0 4
24434: PPUSH
24435: CALL_OW 297
24439: PUSH
24440: LD_VAR 0 14
24444: GREATER
24445: IFFALSE 24449
// exit ;
24447: GO 24990
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
24449: LD_ADDR_VAR 0 12
24453: PUSH
24454: LD_VAR 0 2
24458: PPUSH
24459: LD_VAR 0 3
24463: PPUSH
24464: LD_VAR 0 4
24468: PPUSH
24469: LD_VAR 0 5
24473: PPUSH
24474: LD_VAR 0 1
24478: PPUSH
24479: CALL_OW 248
24483: PPUSH
24484: LD_INT 0
24486: PPUSH
24487: CALL 24995 0 6
24491: ST_TO_ADDR
// if not hexes then
24492: LD_VAR 0 12
24496: NOT
24497: IFFALSE 24501
// exit ;
24499: GO 24990
// hex := GetHexInfo ( x , y ) ;
24501: LD_ADDR_VAR 0 15
24505: PUSH
24506: LD_VAR 0 3
24510: PPUSH
24511: LD_VAR 0 4
24515: PPUSH
24516: CALL_OW 546
24520: ST_TO_ADDR
// if hex [ 1 ] then
24521: LD_VAR 0 15
24525: PUSH
24526: LD_INT 1
24528: ARRAY
24529: IFFALSE 24533
// exit ;
24531: GO 24990
// height := hex [ 2 ] ;
24533: LD_ADDR_VAR 0 13
24537: PUSH
24538: LD_VAR 0 15
24542: PUSH
24543: LD_INT 2
24545: ARRAY
24546: ST_TO_ADDR
// for i = 1 to hexes do
24547: LD_ADDR_VAR 0 7
24551: PUSH
24552: DOUBLE
24553: LD_INT 1
24555: DEC
24556: ST_TO_ADDR
24557: LD_VAR 0 12
24561: PUSH
24562: FOR_TO
24563: IFFALSE 24907
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
24565: LD_VAR 0 12
24569: PUSH
24570: LD_VAR 0 7
24574: ARRAY
24575: PUSH
24576: LD_INT 1
24578: ARRAY
24579: PPUSH
24580: LD_VAR 0 12
24584: PUSH
24585: LD_VAR 0 7
24589: ARRAY
24590: PUSH
24591: LD_INT 2
24593: ARRAY
24594: PPUSH
24595: CALL_OW 488
24599: NOT
24600: IFTRUE 24642
24602: PUSH
24603: LD_VAR 0 12
24607: PUSH
24608: LD_VAR 0 7
24612: ARRAY
24613: PUSH
24614: LD_INT 1
24616: ARRAY
24617: PPUSH
24618: LD_VAR 0 12
24622: PUSH
24623: LD_VAR 0 7
24627: ARRAY
24628: PUSH
24629: LD_INT 2
24631: ARRAY
24632: PPUSH
24633: CALL_OW 428
24637: PUSH
24638: LD_INT 0
24640: GREATER
24641: OR
24642: IFTRUE 24680
24644: PUSH
24645: LD_VAR 0 12
24649: PUSH
24650: LD_VAR 0 7
24654: ARRAY
24655: PUSH
24656: LD_INT 1
24658: ARRAY
24659: PPUSH
24660: LD_VAR 0 12
24664: PUSH
24665: LD_VAR 0 7
24669: ARRAY
24670: PUSH
24671: LD_INT 2
24673: ARRAY
24674: PPUSH
24675: CALL_OW 351
24679: OR
24680: IFFALSE 24686
// exit ;
24682: POP
24683: POP
24684: GO 24990
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
24686: LD_ADDR_VAR 0 8
24690: PUSH
24691: LD_VAR 0 12
24695: PUSH
24696: LD_VAR 0 7
24700: ARRAY
24701: PUSH
24702: LD_INT 1
24704: ARRAY
24705: PPUSH
24706: LD_VAR 0 12
24710: PUSH
24711: LD_VAR 0 7
24715: ARRAY
24716: PUSH
24717: LD_INT 2
24719: ARRAY
24720: PPUSH
24721: CALL_OW 546
24725: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
24726: LD_VAR 0 8
24730: PUSH
24731: LD_INT 1
24733: ARRAY
24734: IFTRUE 24756
24736: PUSH
24737: LD_VAR 0 8
24741: PUSH
24742: LD_INT 2
24744: ARRAY
24745: PUSH
24746: LD_VAR 0 13
24750: PUSH
24751: LD_INT 2
24753: PLUS
24754: GREATER
24755: OR
24756: IFTRUE 24778
24758: PUSH
24759: LD_VAR 0 8
24763: PUSH
24764: LD_INT 2
24766: ARRAY
24767: PUSH
24768: LD_VAR 0 13
24772: PUSH
24773: LD_INT 2
24775: MINUS
24776: LESS
24777: OR
24778: IFTRUE 24846
24780: PUSH
24781: LD_VAR 0 8
24785: PUSH
24786: LD_INT 3
24788: ARRAY
24789: PUSH
24790: LD_INT 0
24792: PUSH
24793: LD_INT 8
24795: PUSH
24796: LD_INT 9
24798: PUSH
24799: LD_INT 10
24801: PUSH
24802: LD_INT 11
24804: PUSH
24805: LD_INT 12
24807: PUSH
24808: LD_INT 13
24810: PUSH
24811: LD_INT 16
24813: PUSH
24814: LD_INT 17
24816: PUSH
24817: LD_INT 18
24819: PUSH
24820: LD_INT 19
24822: PUSH
24823: LD_INT 20
24825: PUSH
24826: LD_INT 21
24828: PUSH
24829: EMPTY
24830: LIST
24831: LIST
24832: LIST
24833: LIST
24834: LIST
24835: LIST
24836: LIST
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: LIST
24842: LIST
24843: IN
24844: NOT
24845: OR
24846: IFTRUE 24859
24848: PUSH
24849: LD_VAR 0 8
24853: PUSH
24854: LD_INT 5
24856: ARRAY
24857: NOT
24858: OR
24859: IFTRUE 24899
24861: PUSH
24862: LD_VAR 0 8
24866: PUSH
24867: LD_INT 6
24869: ARRAY
24870: PUSH
24871: LD_INT 1
24873: PUSH
24874: LD_INT 2
24876: PUSH
24877: LD_INT 7
24879: PUSH
24880: LD_INT 9
24882: PUSH
24883: LD_INT 10
24885: PUSH
24886: LD_INT 11
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: LIST
24895: LIST
24896: IN
24897: NOT
24898: OR
24899: IFFALSE 24905
// exit ;
24901: POP
24902: POP
24903: GO 24990
// end ;
24905: GO 24562
24907: POP
24908: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
24909: LD_VAR 0 9
24913: PPUSH
24914: LD_VAR 0 3
24918: PPUSH
24919: LD_VAR 0 4
24923: PPUSH
24924: LD_INT 20
24926: PPUSH
24927: CALL 16809 0 4
24931: PUSH
24932: LD_INT 4
24934: ARRAY
24935: IFFALSE 24939
// exit ;
24937: GO 24990
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
24939: LD_VAR 0 2
24943: PUSH
24944: LD_INT 29
24946: PUSH
24947: LD_INT 30
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: IN
24954: IFFALSE 24978
24956: PUSH
24957: LD_VAR 0 3
24961: PPUSH
24962: LD_VAR 0 4
24966: PPUSH
24967: LD_VAR 0 9
24971: PPUSH
24972: CALL_OW 440
24976: NOT
24977: AND
24978: IFFALSE 24982
// exit ;
24980: GO 24990
// result := true ;
24982: LD_ADDR_VAR 0 6
24986: PUSH
24987: LD_INT 1
24989: ST_TO_ADDR
// end ;
24990: LD_VAR 0 6
24994: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
24995: LD_INT 0
24997: PPUSH
24998: PPUSH
24999: PPUSH
25000: PPUSH
25001: PPUSH
25002: PPUSH
25003: PPUSH
25004: PPUSH
25005: PPUSH
25006: PPUSH
25007: PPUSH
25008: PPUSH
25009: PPUSH
25010: PPUSH
25011: PPUSH
25012: PPUSH
25013: PPUSH
25014: PPUSH
25015: PPUSH
25016: PPUSH
25017: PPUSH
25018: PPUSH
25019: PPUSH
25020: PPUSH
25021: PPUSH
25022: PPUSH
25023: PPUSH
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
25032: PPUSH
25033: PPUSH
25034: PPUSH
25035: PPUSH
25036: PPUSH
25037: PPUSH
25038: PPUSH
25039: PPUSH
25040: PPUSH
25041: PPUSH
25042: PPUSH
25043: PPUSH
25044: PPUSH
25045: PPUSH
25046: PPUSH
25047: PPUSH
25048: PPUSH
25049: PPUSH
25050: PPUSH
25051: PPUSH
25052: PPUSH
25053: PPUSH
25054: PPUSH
// result = [ ] ;
25055: LD_ADDR_VAR 0 7
25059: PUSH
25060: EMPTY
25061: ST_TO_ADDR
// temp_list = [ ] ;
25062: LD_ADDR_VAR 0 9
25066: PUSH
25067: EMPTY
25068: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
25069: LD_VAR 0 4
25073: PUSH
25074: LD_INT 0
25076: PUSH
25077: LD_INT 1
25079: PUSH
25080: LD_INT 2
25082: PUSH
25083: LD_INT 3
25085: PUSH
25086: LD_INT 4
25088: PUSH
25089: LD_INT 5
25091: PUSH
25092: EMPTY
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: IN
25100: NOT
25101: IFTRUE 25144
25103: PUSH
25104: LD_VAR 0 1
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: IN
25119: IFFALSE 25143
25121: PUSH
25122: LD_VAR 0 5
25126: PUSH
25127: LD_INT 1
25129: PUSH
25130: LD_INT 2
25132: PUSH
25133: LD_INT 3
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: LIST
25140: IN
25141: NOT
25142: AND
25143: OR
25144: IFFALSE 25148
// exit ;
25146: GO 43547
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
25148: LD_VAR 0 1
25152: PUSH
25153: LD_INT 6
25155: PUSH
25156: LD_INT 7
25158: PUSH
25159: LD_INT 8
25161: PUSH
25162: LD_INT 13
25164: PUSH
25165: LD_INT 12
25167: PUSH
25168: LD_INT 15
25170: PUSH
25171: LD_INT 11
25173: PUSH
25174: LD_INT 14
25176: PUSH
25177: LD_INT 10
25179: PUSH
25180: EMPTY
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: IN
25191: IFFALSE 25201
// btype = b_lab ;
25193: LD_ADDR_VAR 0 1
25197: PUSH
25198: LD_INT 6
25200: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
25201: LD_VAR 0 6
25205: PUSH
25206: LD_INT 0
25208: PUSH
25209: LD_INT 1
25211: PUSH
25212: LD_INT 2
25214: PUSH
25215: EMPTY
25216: LIST
25217: LIST
25218: LIST
25219: IN
25220: NOT
25221: IFTRUE 25289
25223: PUSH
25224: LD_VAR 0 1
25228: PUSH
25229: LD_INT 0
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: LD_INT 2
25237: PUSH
25238: LD_INT 3
25240: PUSH
25241: LD_INT 6
25243: PUSH
25244: LD_INT 36
25246: PUSH
25247: LD_INT 4
25249: PUSH
25250: LD_INT 5
25252: PUSH
25253: LD_INT 31
25255: PUSH
25256: LD_INT 32
25258: PUSH
25259: LD_INT 33
25261: PUSH
25262: EMPTY
25263: LIST
25264: LIST
25265: LIST
25266: LIST
25267: LIST
25268: LIST
25269: LIST
25270: LIST
25271: LIST
25272: LIST
25273: LIST
25274: IN
25275: NOT
25276: IFFALSE 25288
25278: PUSH
25279: LD_VAR 0 6
25283: PUSH
25284: LD_INT 1
25286: EQUAL
25287: AND
25288: OR
25289: IFTRUE 25321
25291: PUSH
25292: LD_VAR 0 1
25296: PUSH
25297: LD_INT 2
25299: PUSH
25300: LD_INT 3
25302: PUSH
25303: EMPTY
25304: LIST
25305: LIST
25306: IN
25307: NOT
25308: IFFALSE 25320
25310: PUSH
25311: LD_VAR 0 6
25315: PUSH
25316: LD_INT 2
25318: EQUAL
25319: AND
25320: OR
25321: IFFALSE 25331
// mode = 0 ;
25323: LD_ADDR_VAR 0 6
25327: PUSH
25328: LD_INT 0
25330: ST_TO_ADDR
// case mode of 0 :
25331: LD_VAR 0 6
25335: PUSH
25336: LD_INT 0
25338: DOUBLE
25339: EQUAL
25340: IFTRUE 25344
25342: GO 36797
25344: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
25345: LD_ADDR_VAR 0 11
25349: PUSH
25350: LD_INT 0
25352: PUSH
25353: LD_INT 0
25355: PUSH
25356: EMPTY
25357: LIST
25358: LIST
25359: PUSH
25360: LD_INT 0
25362: PUSH
25363: LD_INT 1
25365: NEG
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: PUSH
25371: LD_INT 1
25373: PUSH
25374: LD_INT 0
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 1
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 0
25393: PUSH
25394: LD_INT 1
25396: PUSH
25397: EMPTY
25398: LIST
25399: LIST
25400: PUSH
25401: LD_INT 1
25403: NEG
25404: PUSH
25405: LD_INT 0
25407: PUSH
25408: EMPTY
25409: LIST
25410: LIST
25411: PUSH
25412: LD_INT 1
25414: NEG
25415: PUSH
25416: LD_INT 1
25418: NEG
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: PUSH
25424: LD_INT 1
25426: NEG
25427: PUSH
25428: LD_INT 2
25430: NEG
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 0
25438: PUSH
25439: LD_INT 2
25441: NEG
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 1
25449: PUSH
25450: LD_INT 1
25452: NEG
25453: PUSH
25454: EMPTY
25455: LIST
25456: LIST
25457: PUSH
25458: LD_INT 1
25460: PUSH
25461: LD_INT 2
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 0
25470: PUSH
25471: LD_INT 2
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: LD_INT 1
25480: NEG
25481: PUSH
25482: LD_INT 1
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: PUSH
25489: LD_INT 1
25491: PUSH
25492: LD_INT 3
25494: PUSH
25495: EMPTY
25496: LIST
25497: LIST
25498: PUSH
25499: LD_INT 0
25501: PUSH
25502: LD_INT 3
25504: PUSH
25505: EMPTY
25506: LIST
25507: LIST
25508: PUSH
25509: LD_INT 1
25511: NEG
25512: PUSH
25513: LD_INT 2
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PUSH
25520: EMPTY
25521: LIST
25522: LIST
25523: LIST
25524: LIST
25525: LIST
25526: LIST
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: LIST
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: LIST
25537: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
25538: LD_ADDR_VAR 0 12
25542: PUSH
25543: LD_INT 0
25545: PUSH
25546: LD_INT 0
25548: PUSH
25549: EMPTY
25550: LIST
25551: LIST
25552: PUSH
25553: LD_INT 0
25555: PUSH
25556: LD_INT 1
25558: NEG
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: PUSH
25564: LD_INT 1
25566: PUSH
25567: LD_INT 0
25569: PUSH
25570: EMPTY
25571: LIST
25572: LIST
25573: PUSH
25574: LD_INT 1
25576: PUSH
25577: LD_INT 1
25579: PUSH
25580: EMPTY
25581: LIST
25582: LIST
25583: PUSH
25584: LD_INT 0
25586: PUSH
25587: LD_INT 1
25589: PUSH
25590: EMPTY
25591: LIST
25592: LIST
25593: PUSH
25594: LD_INT 1
25596: NEG
25597: PUSH
25598: LD_INT 0
25600: PUSH
25601: EMPTY
25602: LIST
25603: LIST
25604: PUSH
25605: LD_INT 1
25607: NEG
25608: PUSH
25609: LD_INT 1
25611: NEG
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 1
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 2
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 2
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 1
25650: NEG
25651: PUSH
25652: LD_INT 1
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: LD_INT 2
25661: NEG
25662: PUSH
25663: LD_INT 0
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: LD_INT 2
25672: NEG
25673: PUSH
25674: LD_INT 1
25676: NEG
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: PUSH
25682: LD_INT 2
25684: NEG
25685: PUSH
25686: LD_INT 1
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 3
25695: NEG
25696: PUSH
25697: LD_INT 0
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 3
25706: NEG
25707: PUSH
25708: LD_INT 1
25710: NEG
25711: PUSH
25712: EMPTY
25713: LIST
25714: LIST
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: LIST
25720: LIST
25721: LIST
25722: LIST
25723: LIST
25724: LIST
25725: LIST
25726: LIST
25727: LIST
25728: LIST
25729: LIST
25730: LIST
25731: LIST
25732: LIST
25733: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
25734: LD_ADDR_VAR 0 13
25738: PUSH
25739: LD_INT 0
25741: PUSH
25742: LD_INT 0
25744: PUSH
25745: EMPTY
25746: LIST
25747: LIST
25748: PUSH
25749: LD_INT 0
25751: PUSH
25752: LD_INT 1
25754: NEG
25755: PUSH
25756: EMPTY
25757: LIST
25758: LIST
25759: PUSH
25760: LD_INT 1
25762: PUSH
25763: LD_INT 0
25765: PUSH
25766: EMPTY
25767: LIST
25768: LIST
25769: PUSH
25770: LD_INT 1
25772: PUSH
25773: LD_INT 1
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: LD_INT 1
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: PUSH
25790: LD_INT 1
25792: NEG
25793: PUSH
25794: LD_INT 0
25796: PUSH
25797: EMPTY
25798: LIST
25799: LIST
25800: PUSH
25801: LD_INT 1
25803: NEG
25804: PUSH
25805: LD_INT 1
25807: NEG
25808: PUSH
25809: EMPTY
25810: LIST
25811: LIST
25812: PUSH
25813: LD_INT 1
25815: NEG
25816: PUSH
25817: LD_INT 2
25819: NEG
25820: PUSH
25821: EMPTY
25822: LIST
25823: LIST
25824: PUSH
25825: LD_INT 2
25827: PUSH
25828: LD_INT 1
25830: PUSH
25831: EMPTY
25832: LIST
25833: LIST
25834: PUSH
25835: LD_INT 2
25837: PUSH
25838: LD_INT 2
25840: PUSH
25841: EMPTY
25842: LIST
25843: LIST
25844: PUSH
25845: LD_INT 1
25847: PUSH
25848: LD_INT 2
25850: PUSH
25851: EMPTY
25852: LIST
25853: LIST
25854: PUSH
25855: LD_INT 2
25857: NEG
25858: PUSH
25859: LD_INT 1
25861: NEG
25862: PUSH
25863: EMPTY
25864: LIST
25865: LIST
25866: PUSH
25867: LD_INT 2
25869: NEG
25870: PUSH
25871: LD_INT 2
25873: NEG
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: PUSH
25879: LD_INT 2
25881: NEG
25882: PUSH
25883: LD_INT 3
25885: NEG
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: LD_INT 3
25893: NEG
25894: PUSH
25895: LD_INT 2
25897: NEG
25898: PUSH
25899: EMPTY
25900: LIST
25901: LIST
25902: PUSH
25903: LD_INT 3
25905: NEG
25906: PUSH
25907: LD_INT 3
25909: NEG
25910: PUSH
25911: EMPTY
25912: LIST
25913: LIST
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: LIST
25927: LIST
25928: LIST
25929: LIST
25930: LIST
25931: LIST
25932: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
25933: LD_ADDR_VAR 0 14
25937: PUSH
25938: LD_INT 0
25940: PUSH
25941: LD_INT 0
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: LD_INT 1
25953: NEG
25954: PUSH
25955: EMPTY
25956: LIST
25957: LIST
25958: PUSH
25959: LD_INT 1
25961: PUSH
25962: LD_INT 0
25964: PUSH
25965: EMPTY
25966: LIST
25967: LIST
25968: PUSH
25969: LD_INT 1
25971: PUSH
25972: LD_INT 1
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: PUSH
25979: LD_INT 0
25981: PUSH
25982: LD_INT 1
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: PUSH
25989: LD_INT 1
25991: NEG
25992: PUSH
25993: LD_INT 0
25995: PUSH
25996: EMPTY
25997: LIST
25998: LIST
25999: PUSH
26000: LD_INT 1
26002: NEG
26003: PUSH
26004: LD_INT 1
26006: NEG
26007: PUSH
26008: EMPTY
26009: LIST
26010: LIST
26011: PUSH
26012: LD_INT 1
26014: NEG
26015: PUSH
26016: LD_INT 2
26018: NEG
26019: PUSH
26020: EMPTY
26021: LIST
26022: LIST
26023: PUSH
26024: LD_INT 0
26026: PUSH
26027: LD_INT 2
26029: NEG
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: PUSH
26035: LD_INT 1
26037: PUSH
26038: LD_INT 1
26040: NEG
26041: PUSH
26042: EMPTY
26043: LIST
26044: LIST
26045: PUSH
26046: LD_INT 1
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: EMPTY
26053: LIST
26054: LIST
26055: PUSH
26056: LD_INT 0
26058: PUSH
26059: LD_INT 2
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 1
26068: NEG
26069: PUSH
26070: LD_INT 1
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 1
26079: NEG
26080: PUSH
26081: LD_INT 3
26083: NEG
26084: PUSH
26085: EMPTY
26086: LIST
26087: LIST
26088: PUSH
26089: LD_INT 0
26091: PUSH
26092: LD_INT 3
26094: NEG
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: PUSH
26100: LD_INT 1
26102: PUSH
26103: LD_INT 2
26105: NEG
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: PUSH
26111: EMPTY
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: LIST
26126: LIST
26127: LIST
26128: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
26129: LD_ADDR_VAR 0 15
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: LD_INT 0
26139: PUSH
26140: EMPTY
26141: LIST
26142: LIST
26143: PUSH
26144: LD_INT 0
26146: PUSH
26147: LD_INT 1
26149: NEG
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PUSH
26155: LD_INT 1
26157: PUSH
26158: LD_INT 0
26160: PUSH
26161: EMPTY
26162: LIST
26163: LIST
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: LD_INT 1
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 0
26177: PUSH
26178: LD_INT 1
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 1
26187: NEG
26188: PUSH
26189: LD_INT 0
26191: PUSH
26192: EMPTY
26193: LIST
26194: LIST
26195: PUSH
26196: LD_INT 1
26198: NEG
26199: PUSH
26200: LD_INT 1
26202: NEG
26203: PUSH
26204: EMPTY
26205: LIST
26206: LIST
26207: PUSH
26208: LD_INT 1
26210: PUSH
26211: LD_INT 1
26213: NEG
26214: PUSH
26215: EMPTY
26216: LIST
26217: LIST
26218: PUSH
26219: LD_INT 2
26221: PUSH
26222: LD_INT 0
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 2
26231: PUSH
26232: LD_INT 1
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 1
26241: NEG
26242: PUSH
26243: LD_INT 1
26245: PUSH
26246: EMPTY
26247: LIST
26248: LIST
26249: PUSH
26250: LD_INT 2
26252: NEG
26253: PUSH
26254: LD_INT 0
26256: PUSH
26257: EMPTY
26258: LIST
26259: LIST
26260: PUSH
26261: LD_INT 2
26263: NEG
26264: PUSH
26265: LD_INT 1
26267: NEG
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: PUSH
26273: LD_INT 2
26275: PUSH
26276: LD_INT 1
26278: NEG
26279: PUSH
26280: EMPTY
26281: LIST
26282: LIST
26283: PUSH
26284: LD_INT 3
26286: PUSH
26287: LD_INT 0
26289: PUSH
26290: EMPTY
26291: LIST
26292: LIST
26293: PUSH
26294: LD_INT 3
26296: PUSH
26297: LD_INT 1
26299: PUSH
26300: EMPTY
26301: LIST
26302: LIST
26303: PUSH
26304: EMPTY
26305: LIST
26306: LIST
26307: LIST
26308: LIST
26309: LIST
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: LIST
26317: LIST
26318: LIST
26319: LIST
26320: LIST
26321: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
26322: LD_ADDR_VAR 0 16
26326: PUSH
26327: LD_INT 0
26329: PUSH
26330: LD_INT 0
26332: PUSH
26333: EMPTY
26334: LIST
26335: LIST
26336: PUSH
26337: LD_INT 0
26339: PUSH
26340: LD_INT 1
26342: NEG
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: PUSH
26351: LD_INT 0
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: PUSH
26358: LD_INT 1
26360: PUSH
26361: LD_INT 1
26363: PUSH
26364: EMPTY
26365: LIST
26366: LIST
26367: PUSH
26368: LD_INT 0
26370: PUSH
26371: LD_INT 1
26373: PUSH
26374: EMPTY
26375: LIST
26376: LIST
26377: PUSH
26378: LD_INT 1
26380: NEG
26381: PUSH
26382: LD_INT 0
26384: PUSH
26385: EMPTY
26386: LIST
26387: LIST
26388: PUSH
26389: LD_INT 1
26391: NEG
26392: PUSH
26393: LD_INT 1
26395: NEG
26396: PUSH
26397: EMPTY
26398: LIST
26399: LIST
26400: PUSH
26401: LD_INT 1
26403: NEG
26404: PUSH
26405: LD_INT 2
26407: NEG
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: PUSH
26413: LD_INT 2
26415: PUSH
26416: LD_INT 1
26418: PUSH
26419: EMPTY
26420: LIST
26421: LIST
26422: PUSH
26423: LD_INT 2
26425: PUSH
26426: LD_INT 2
26428: PUSH
26429: EMPTY
26430: LIST
26431: LIST
26432: PUSH
26433: LD_INT 1
26435: PUSH
26436: LD_INT 2
26438: PUSH
26439: EMPTY
26440: LIST
26441: LIST
26442: PUSH
26443: LD_INT 2
26445: NEG
26446: PUSH
26447: LD_INT 1
26449: NEG
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 2
26457: NEG
26458: PUSH
26459: LD_INT 2
26461: NEG
26462: PUSH
26463: EMPTY
26464: LIST
26465: LIST
26466: PUSH
26467: LD_INT 3
26469: PUSH
26470: LD_INT 2
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 3
26479: PUSH
26480: LD_INT 3
26482: PUSH
26483: EMPTY
26484: LIST
26485: LIST
26486: PUSH
26487: LD_INT 2
26489: PUSH
26490: LD_INT 3
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: LIST
26501: LIST
26502: LIST
26503: LIST
26504: LIST
26505: LIST
26506: LIST
26507: LIST
26508: LIST
26509: LIST
26510: LIST
26511: LIST
26512: LIST
26513: LIST
26514: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26515: LD_ADDR_VAR 0 17
26519: PUSH
26520: LD_INT 0
26522: PUSH
26523: LD_INT 0
26525: PUSH
26526: EMPTY
26527: LIST
26528: LIST
26529: PUSH
26530: LD_INT 0
26532: PUSH
26533: LD_INT 1
26535: NEG
26536: PUSH
26537: EMPTY
26538: LIST
26539: LIST
26540: PUSH
26541: LD_INT 1
26543: PUSH
26544: LD_INT 0
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: PUSH
26551: LD_INT 1
26553: PUSH
26554: LD_INT 1
26556: PUSH
26557: EMPTY
26558: LIST
26559: LIST
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: LD_INT 1
26566: PUSH
26567: EMPTY
26568: LIST
26569: LIST
26570: PUSH
26571: LD_INT 1
26573: NEG
26574: PUSH
26575: LD_INT 0
26577: PUSH
26578: EMPTY
26579: LIST
26580: LIST
26581: PUSH
26582: LD_INT 1
26584: NEG
26585: PUSH
26586: LD_INT 1
26588: NEG
26589: PUSH
26590: EMPTY
26591: LIST
26592: LIST
26593: PUSH
26594: LD_INT 1
26596: NEG
26597: PUSH
26598: LD_INT 2
26600: NEG
26601: PUSH
26602: EMPTY
26603: LIST
26604: LIST
26605: PUSH
26606: LD_INT 0
26608: PUSH
26609: LD_INT 2
26611: NEG
26612: PUSH
26613: EMPTY
26614: LIST
26615: LIST
26616: PUSH
26617: LD_INT 1
26619: PUSH
26620: LD_INT 1
26622: NEG
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 2
26630: PUSH
26631: LD_INT 0
26633: PUSH
26634: EMPTY
26635: LIST
26636: LIST
26637: PUSH
26638: LD_INT 2
26640: PUSH
26641: LD_INT 1
26643: PUSH
26644: EMPTY
26645: LIST
26646: LIST
26647: PUSH
26648: LD_INT 2
26650: PUSH
26651: LD_INT 2
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: PUSH
26658: LD_INT 1
26660: PUSH
26661: LD_INT 2
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 0
26670: PUSH
26671: LD_INT 2
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: LD_INT 1
26680: NEG
26681: PUSH
26682: LD_INT 1
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 2
26691: NEG
26692: PUSH
26693: LD_INT 0
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 2
26702: NEG
26703: PUSH
26704: LD_INT 1
26706: NEG
26707: PUSH
26708: EMPTY
26709: LIST
26710: LIST
26711: PUSH
26712: LD_INT 2
26714: NEG
26715: PUSH
26716: LD_INT 2
26718: NEG
26719: PUSH
26720: EMPTY
26721: LIST
26722: LIST
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: LIST
26737: LIST
26738: LIST
26739: LIST
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26745: LD_ADDR_VAR 0 18
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: LD_INT 0
26755: PUSH
26756: EMPTY
26757: LIST
26758: LIST
26759: PUSH
26760: LD_INT 0
26762: PUSH
26763: LD_INT 1
26765: NEG
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: PUSH
26771: LD_INT 1
26773: PUSH
26774: LD_INT 0
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 0
26793: PUSH
26794: LD_INT 1
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: LD_INT 1
26803: NEG
26804: PUSH
26805: LD_INT 0
26807: PUSH
26808: EMPTY
26809: LIST
26810: LIST
26811: PUSH
26812: LD_INT 1
26814: NEG
26815: PUSH
26816: LD_INT 1
26818: NEG
26819: PUSH
26820: EMPTY
26821: LIST
26822: LIST
26823: PUSH
26824: LD_INT 1
26826: NEG
26827: PUSH
26828: LD_INT 2
26830: NEG
26831: PUSH
26832: EMPTY
26833: LIST
26834: LIST
26835: PUSH
26836: LD_INT 0
26838: PUSH
26839: LD_INT 2
26841: NEG
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PUSH
26847: LD_INT 1
26849: PUSH
26850: LD_INT 1
26852: NEG
26853: PUSH
26854: EMPTY
26855: LIST
26856: LIST
26857: PUSH
26858: LD_INT 2
26860: PUSH
26861: LD_INT 0
26863: PUSH
26864: EMPTY
26865: LIST
26866: LIST
26867: PUSH
26868: LD_INT 2
26870: PUSH
26871: LD_INT 1
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 2
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 1
26890: PUSH
26891: LD_INT 2
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: LD_INT 0
26900: PUSH
26901: LD_INT 2
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 1
26910: NEG
26911: PUSH
26912: LD_INT 1
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: PUSH
26919: LD_INT 2
26921: NEG
26922: PUSH
26923: LD_INT 0
26925: PUSH
26926: EMPTY
26927: LIST
26928: LIST
26929: PUSH
26930: LD_INT 2
26932: NEG
26933: PUSH
26934: LD_INT 1
26936: NEG
26937: PUSH
26938: EMPTY
26939: LIST
26940: LIST
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: LD_INT 2
26948: NEG
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: PUSH
26954: EMPTY
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26975: LD_ADDR_VAR 0 19
26979: PUSH
26980: LD_INT 0
26982: PUSH
26983: LD_INT 0
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: PUSH
26990: LD_INT 0
26992: PUSH
26993: LD_INT 1
26995: NEG
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 1
27003: PUSH
27004: LD_INT 0
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: PUSH
27014: LD_INT 1
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: LD_INT 0
27023: PUSH
27024: LD_INT 1
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: PUSH
27031: LD_INT 1
27033: NEG
27034: PUSH
27035: LD_INT 0
27037: PUSH
27038: EMPTY
27039: LIST
27040: LIST
27041: PUSH
27042: LD_INT 1
27044: NEG
27045: PUSH
27046: LD_INT 1
27048: NEG
27049: PUSH
27050: EMPTY
27051: LIST
27052: LIST
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: PUSH
27058: LD_INT 2
27060: NEG
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: PUSH
27066: LD_INT 0
27068: PUSH
27069: LD_INT 2
27071: NEG
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 1
27079: PUSH
27080: LD_INT 1
27082: NEG
27083: PUSH
27084: EMPTY
27085: LIST
27086: LIST
27087: PUSH
27088: LD_INT 2
27090: PUSH
27091: LD_INT 0
27093: PUSH
27094: EMPTY
27095: LIST
27096: LIST
27097: PUSH
27098: LD_INT 2
27100: PUSH
27101: LD_INT 1
27103: PUSH
27104: EMPTY
27105: LIST
27106: LIST
27107: PUSH
27108: LD_INT 2
27110: PUSH
27111: LD_INT 2
27113: PUSH
27114: EMPTY
27115: LIST
27116: LIST
27117: PUSH
27118: LD_INT 1
27120: PUSH
27121: LD_INT 2
27123: PUSH
27124: EMPTY
27125: LIST
27126: LIST
27127: PUSH
27128: LD_INT 0
27130: PUSH
27131: LD_INT 2
27133: PUSH
27134: EMPTY
27135: LIST
27136: LIST
27137: PUSH
27138: LD_INT 1
27140: NEG
27141: PUSH
27142: LD_INT 1
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: PUSH
27149: LD_INT 2
27151: NEG
27152: PUSH
27153: LD_INT 0
27155: PUSH
27156: EMPTY
27157: LIST
27158: LIST
27159: PUSH
27160: LD_INT 2
27162: NEG
27163: PUSH
27164: LD_INT 1
27166: NEG
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: PUSH
27172: LD_INT 2
27174: NEG
27175: PUSH
27176: LD_INT 2
27178: NEG
27179: PUSH
27180: EMPTY
27181: LIST
27182: LIST
27183: PUSH
27184: EMPTY
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27205: LD_ADDR_VAR 0 20
27209: PUSH
27210: LD_INT 0
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: EMPTY
27217: LIST
27218: LIST
27219: PUSH
27220: LD_INT 0
27222: PUSH
27223: LD_INT 1
27225: NEG
27226: PUSH
27227: EMPTY
27228: LIST
27229: LIST
27230: PUSH
27231: LD_INT 1
27233: PUSH
27234: LD_INT 0
27236: PUSH
27237: EMPTY
27238: LIST
27239: LIST
27240: PUSH
27241: LD_INT 1
27243: PUSH
27244: LD_INT 1
27246: PUSH
27247: EMPTY
27248: LIST
27249: LIST
27250: PUSH
27251: LD_INT 0
27253: PUSH
27254: LD_INT 1
27256: PUSH
27257: EMPTY
27258: LIST
27259: LIST
27260: PUSH
27261: LD_INT 1
27263: NEG
27264: PUSH
27265: LD_INT 0
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: PUSH
27272: LD_INT 1
27274: NEG
27275: PUSH
27276: LD_INT 1
27278: NEG
27279: PUSH
27280: EMPTY
27281: LIST
27282: LIST
27283: PUSH
27284: LD_INT 1
27286: NEG
27287: PUSH
27288: LD_INT 2
27290: NEG
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 0
27298: PUSH
27299: LD_INT 2
27301: NEG
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 1
27309: PUSH
27310: LD_INT 1
27312: NEG
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: PUSH
27318: LD_INT 2
27320: PUSH
27321: LD_INT 0
27323: PUSH
27324: EMPTY
27325: LIST
27326: LIST
27327: PUSH
27328: LD_INT 2
27330: PUSH
27331: LD_INT 1
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 2
27340: PUSH
27341: LD_INT 2
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: PUSH
27348: LD_INT 1
27350: PUSH
27351: LD_INT 2
27353: PUSH
27354: EMPTY
27355: LIST
27356: LIST
27357: PUSH
27358: LD_INT 0
27360: PUSH
27361: LD_INT 2
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: PUSH
27368: LD_INT 1
27370: NEG
27371: PUSH
27372: LD_INT 1
27374: PUSH
27375: EMPTY
27376: LIST
27377: LIST
27378: PUSH
27379: LD_INT 2
27381: NEG
27382: PUSH
27383: LD_INT 0
27385: PUSH
27386: EMPTY
27387: LIST
27388: LIST
27389: PUSH
27390: LD_INT 2
27392: NEG
27393: PUSH
27394: LD_INT 1
27396: NEG
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: PUSH
27402: LD_INT 2
27404: NEG
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27435: LD_ADDR_VAR 0 21
27439: PUSH
27440: LD_INT 0
27442: PUSH
27443: LD_INT 0
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: PUSH
27450: LD_INT 0
27452: PUSH
27453: LD_INT 1
27455: NEG
27456: PUSH
27457: EMPTY
27458: LIST
27459: LIST
27460: PUSH
27461: LD_INT 1
27463: PUSH
27464: LD_INT 0
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 1
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 0
27483: PUSH
27484: LD_INT 1
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: PUSH
27491: LD_INT 1
27493: NEG
27494: PUSH
27495: LD_INT 0
27497: PUSH
27498: EMPTY
27499: LIST
27500: LIST
27501: PUSH
27502: LD_INT 1
27504: NEG
27505: PUSH
27506: LD_INT 1
27508: NEG
27509: PUSH
27510: EMPTY
27511: LIST
27512: LIST
27513: PUSH
27514: LD_INT 1
27516: NEG
27517: PUSH
27518: LD_INT 2
27520: NEG
27521: PUSH
27522: EMPTY
27523: LIST
27524: LIST
27525: PUSH
27526: LD_INT 0
27528: PUSH
27529: LD_INT 2
27531: NEG
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: LD_INT 1
27542: NEG
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 2
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 2
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 2
27570: PUSH
27571: LD_INT 2
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: LD_INT 1
27580: PUSH
27581: LD_INT 2
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PUSH
27588: LD_INT 0
27590: PUSH
27591: LD_INT 2
27593: PUSH
27594: EMPTY
27595: LIST
27596: LIST
27597: PUSH
27598: LD_INT 1
27600: NEG
27601: PUSH
27602: LD_INT 1
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: LD_INT 2
27611: NEG
27612: PUSH
27613: LD_INT 0
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 2
27622: NEG
27623: PUSH
27624: LD_INT 1
27626: NEG
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: PUSH
27632: LD_INT 2
27634: NEG
27635: PUSH
27636: LD_INT 2
27638: NEG
27639: PUSH
27640: EMPTY
27641: LIST
27642: LIST
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
27665: LD_ADDR_VAR 0 22
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: PUSH
27680: LD_INT 0
27682: PUSH
27683: LD_INT 1
27685: NEG
27686: PUSH
27687: EMPTY
27688: LIST
27689: LIST
27690: PUSH
27691: LD_INT 1
27693: PUSH
27694: LD_INT 0
27696: PUSH
27697: EMPTY
27698: LIST
27699: LIST
27700: PUSH
27701: LD_INT 1
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: EMPTY
27708: LIST
27709: LIST
27710: PUSH
27711: LD_INT 0
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 1
27723: NEG
27724: PUSH
27725: LD_INT 0
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: PUSH
27732: LD_INT 1
27734: NEG
27735: PUSH
27736: LD_INT 1
27738: NEG
27739: PUSH
27740: EMPTY
27741: LIST
27742: LIST
27743: PUSH
27744: LD_INT 1
27746: NEG
27747: PUSH
27748: LD_INT 2
27750: NEG
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 0
27758: PUSH
27759: LD_INT 2
27761: NEG
27762: PUSH
27763: EMPTY
27764: LIST
27765: LIST
27766: PUSH
27767: LD_INT 1
27769: PUSH
27770: LD_INT 1
27772: NEG
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: LD_INT 2
27780: PUSH
27781: LD_INT 0
27783: PUSH
27784: EMPTY
27785: LIST
27786: LIST
27787: PUSH
27788: LD_INT 2
27790: PUSH
27791: LD_INT 1
27793: PUSH
27794: EMPTY
27795: LIST
27796: LIST
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: PUSH
27808: LD_INT 1
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PUSH
27818: LD_INT 0
27820: PUSH
27821: LD_INT 2
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: PUSH
27828: LD_INT 1
27830: NEG
27831: PUSH
27832: LD_INT 1
27834: PUSH
27835: EMPTY
27836: LIST
27837: LIST
27838: PUSH
27839: LD_INT 2
27841: NEG
27842: PUSH
27843: LD_INT 0
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 2
27852: NEG
27853: PUSH
27854: LD_INT 1
27856: NEG
27857: PUSH
27858: EMPTY
27859: LIST
27860: LIST
27861: PUSH
27862: LD_INT 2
27864: NEG
27865: PUSH
27866: LD_INT 2
27868: NEG
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: LIST
27881: LIST
27882: LIST
27883: LIST
27884: LIST
27885: LIST
27886: LIST
27887: LIST
27888: LIST
27889: LIST
27890: LIST
27891: LIST
27892: LIST
27893: LIST
27894: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
27895: LD_ADDR_VAR 0 23
27899: PUSH
27900: LD_INT 0
27902: PUSH
27903: LD_INT 0
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: LD_INT 1
27915: NEG
27916: PUSH
27917: EMPTY
27918: LIST
27919: LIST
27920: PUSH
27921: LD_INT 1
27923: PUSH
27924: LD_INT 0
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: PUSH
27931: LD_INT 1
27933: PUSH
27934: LD_INT 1
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: PUSH
27941: LD_INT 0
27943: PUSH
27944: LD_INT 1
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: PUSH
27951: LD_INT 1
27953: NEG
27954: PUSH
27955: LD_INT 0
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: LD_INT 1
27968: NEG
27969: PUSH
27970: EMPTY
27971: LIST
27972: LIST
27973: PUSH
27974: LD_INT 1
27976: NEG
27977: PUSH
27978: LD_INT 2
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 0
27988: PUSH
27989: LD_INT 2
27991: NEG
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: PUSH
27997: LD_INT 1
27999: PUSH
28000: LD_INT 1
28002: NEG
28003: PUSH
28004: EMPTY
28005: LIST
28006: LIST
28007: PUSH
28008: LD_INT 2
28010: PUSH
28011: LD_INT 0
28013: PUSH
28014: EMPTY
28015: LIST
28016: LIST
28017: PUSH
28018: LD_INT 2
28020: PUSH
28021: LD_INT 1
28023: PUSH
28024: EMPTY
28025: LIST
28026: LIST
28027: PUSH
28028: LD_INT 2
28030: PUSH
28031: LD_INT 2
28033: PUSH
28034: EMPTY
28035: LIST
28036: LIST
28037: PUSH
28038: LD_INT 1
28040: PUSH
28041: LD_INT 2
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: LD_INT 0
28050: PUSH
28051: LD_INT 2
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: PUSH
28058: LD_INT 1
28060: NEG
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: EMPTY
28066: LIST
28067: LIST
28068: PUSH
28069: LD_INT 2
28071: NEG
28072: PUSH
28073: LD_INT 0
28075: PUSH
28076: EMPTY
28077: LIST
28078: LIST
28079: PUSH
28080: LD_INT 2
28082: NEG
28083: PUSH
28084: LD_INT 1
28086: NEG
28087: PUSH
28088: EMPTY
28089: LIST
28090: LIST
28091: PUSH
28092: LD_INT 2
28094: NEG
28095: PUSH
28096: LD_INT 2
28098: NEG
28099: PUSH
28100: EMPTY
28101: LIST
28102: LIST
28103: PUSH
28104: LD_INT 2
28106: NEG
28107: PUSH
28108: LD_INT 3
28110: NEG
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PUSH
28116: LD_INT 1
28118: NEG
28119: PUSH
28120: LD_INT 3
28122: NEG
28123: PUSH
28124: EMPTY
28125: LIST
28126: LIST
28127: PUSH
28128: LD_INT 1
28130: PUSH
28131: LD_INT 2
28133: NEG
28134: PUSH
28135: EMPTY
28136: LIST
28137: LIST
28138: PUSH
28139: LD_INT 2
28141: PUSH
28142: LD_INT 1
28144: NEG
28145: PUSH
28146: EMPTY
28147: LIST
28148: LIST
28149: PUSH
28150: EMPTY
28151: LIST
28152: LIST
28153: LIST
28154: LIST
28155: LIST
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: LIST
28161: LIST
28162: LIST
28163: LIST
28164: LIST
28165: LIST
28166: LIST
28167: LIST
28168: LIST
28169: LIST
28170: LIST
28171: LIST
28172: LIST
28173: LIST
28174: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
28175: LD_ADDR_VAR 0 24
28179: PUSH
28180: LD_INT 0
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 0
28192: PUSH
28193: LD_INT 1
28195: NEG
28196: PUSH
28197: EMPTY
28198: LIST
28199: LIST
28200: PUSH
28201: LD_INT 1
28203: PUSH
28204: LD_INT 0
28206: PUSH
28207: EMPTY
28208: LIST
28209: LIST
28210: PUSH
28211: LD_INT 1
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 0
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 1
28233: NEG
28234: PUSH
28235: LD_INT 0
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: PUSH
28242: LD_INT 1
28244: NEG
28245: PUSH
28246: LD_INT 1
28248: NEG
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 1
28256: NEG
28257: PUSH
28258: LD_INT 2
28260: NEG
28261: PUSH
28262: EMPTY
28263: LIST
28264: LIST
28265: PUSH
28266: LD_INT 0
28268: PUSH
28269: LD_INT 2
28271: NEG
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 1
28279: PUSH
28280: LD_INT 1
28282: NEG
28283: PUSH
28284: EMPTY
28285: LIST
28286: LIST
28287: PUSH
28288: LD_INT 2
28290: PUSH
28291: LD_INT 0
28293: PUSH
28294: EMPTY
28295: LIST
28296: LIST
28297: PUSH
28298: LD_INT 2
28300: PUSH
28301: LD_INT 1
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: PUSH
28308: LD_INT 2
28310: PUSH
28311: LD_INT 2
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: PUSH
28321: LD_INT 2
28323: PUSH
28324: EMPTY
28325: LIST
28326: LIST
28327: PUSH
28328: LD_INT 0
28330: PUSH
28331: LD_INT 2
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: PUSH
28338: LD_INT 1
28340: NEG
28341: PUSH
28342: LD_INT 1
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: PUSH
28349: LD_INT 2
28351: NEG
28352: PUSH
28353: LD_INT 0
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: PUSH
28360: LD_INT 2
28362: NEG
28363: PUSH
28364: LD_INT 1
28366: NEG
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: NEG
28375: PUSH
28376: LD_INT 2
28378: NEG
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: PUSH
28384: LD_INT 1
28386: PUSH
28387: LD_INT 2
28389: NEG
28390: PUSH
28391: EMPTY
28392: LIST
28393: LIST
28394: PUSH
28395: LD_INT 2
28397: PUSH
28398: LD_INT 1
28400: NEG
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 3
28408: PUSH
28409: LD_INT 1
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 3
28418: PUSH
28419: LD_INT 2
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: LIST
28430: LIST
28431: LIST
28432: LIST
28433: LIST
28434: LIST
28435: LIST
28436: LIST
28437: LIST
28438: LIST
28439: LIST
28440: LIST
28441: LIST
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
28451: LD_ADDR_VAR 0 25
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: LD_INT 0
28461: PUSH
28462: EMPTY
28463: LIST
28464: LIST
28465: PUSH
28466: LD_INT 0
28468: PUSH
28469: LD_INT 1
28471: NEG
28472: PUSH
28473: EMPTY
28474: LIST
28475: LIST
28476: PUSH
28477: LD_INT 1
28479: PUSH
28480: LD_INT 0
28482: PUSH
28483: EMPTY
28484: LIST
28485: LIST
28486: PUSH
28487: LD_INT 1
28489: PUSH
28490: LD_INT 1
28492: PUSH
28493: EMPTY
28494: LIST
28495: LIST
28496: PUSH
28497: LD_INT 0
28499: PUSH
28500: LD_INT 1
28502: PUSH
28503: EMPTY
28504: LIST
28505: LIST
28506: PUSH
28507: LD_INT 1
28509: NEG
28510: PUSH
28511: LD_INT 0
28513: PUSH
28514: EMPTY
28515: LIST
28516: LIST
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: LD_INT 1
28524: NEG
28525: PUSH
28526: EMPTY
28527: LIST
28528: LIST
28529: PUSH
28530: LD_INT 1
28532: NEG
28533: PUSH
28534: LD_INT 2
28536: NEG
28537: PUSH
28538: EMPTY
28539: LIST
28540: LIST
28541: PUSH
28542: LD_INT 0
28544: PUSH
28545: LD_INT 2
28547: NEG
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 1
28558: NEG
28559: PUSH
28560: EMPTY
28561: LIST
28562: LIST
28563: PUSH
28564: LD_INT 2
28566: PUSH
28567: LD_INT 0
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: PUSH
28574: LD_INT 2
28576: PUSH
28577: LD_INT 1
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 2
28586: PUSH
28587: LD_INT 2
28589: PUSH
28590: EMPTY
28591: LIST
28592: LIST
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: LD_INT 2
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: LD_INT 0
28606: PUSH
28607: LD_INT 2
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: PUSH
28614: LD_INT 1
28616: NEG
28617: PUSH
28618: LD_INT 1
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: PUSH
28625: LD_INT 2
28627: NEG
28628: PUSH
28629: LD_INT 0
28631: PUSH
28632: EMPTY
28633: LIST
28634: LIST
28635: PUSH
28636: LD_INT 2
28638: NEG
28639: PUSH
28640: LD_INT 1
28642: NEG
28643: PUSH
28644: EMPTY
28645: LIST
28646: LIST
28647: PUSH
28648: LD_INT 2
28650: NEG
28651: PUSH
28652: LD_INT 2
28654: NEG
28655: PUSH
28656: EMPTY
28657: LIST
28658: LIST
28659: PUSH
28660: LD_INT 3
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 3
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 1
28692: PUSH
28693: LD_INT 3
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: LIST
28707: LIST
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: LIST
28713: LIST
28714: LIST
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
28725: LD_ADDR_VAR 0 26
28729: PUSH
28730: LD_INT 0
28732: PUSH
28733: LD_INT 0
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 0
28742: PUSH
28743: LD_INT 1
28745: NEG
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 1
28753: PUSH
28754: LD_INT 0
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: LD_INT 1
28763: PUSH
28764: LD_INT 1
28766: PUSH
28767: EMPTY
28768: LIST
28769: LIST
28770: PUSH
28771: LD_INT 0
28773: PUSH
28774: LD_INT 1
28776: PUSH
28777: EMPTY
28778: LIST
28779: LIST
28780: PUSH
28781: LD_INT 1
28783: NEG
28784: PUSH
28785: LD_INT 0
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 1
28794: NEG
28795: PUSH
28796: LD_INT 1
28798: NEG
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 1
28806: NEG
28807: PUSH
28808: LD_INT 2
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 0
28818: PUSH
28819: LD_INT 2
28821: NEG
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: LD_INT 1
28832: NEG
28833: PUSH
28834: EMPTY
28835: LIST
28836: LIST
28837: PUSH
28838: LD_INT 2
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: EMPTY
28845: LIST
28846: LIST
28847: PUSH
28848: LD_INT 2
28850: PUSH
28851: LD_INT 1
28853: PUSH
28854: EMPTY
28855: LIST
28856: LIST
28857: PUSH
28858: LD_INT 2
28860: PUSH
28861: LD_INT 2
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: PUSH
28868: LD_INT 1
28870: PUSH
28871: LD_INT 2
28873: PUSH
28874: EMPTY
28875: LIST
28876: LIST
28877: PUSH
28878: LD_INT 0
28880: PUSH
28881: LD_INT 2
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: PUSH
28888: LD_INT 1
28890: NEG
28891: PUSH
28892: LD_INT 1
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: PUSH
28899: LD_INT 2
28901: NEG
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: PUSH
28910: LD_INT 2
28912: NEG
28913: PUSH
28914: LD_INT 1
28916: NEG
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 2
28924: NEG
28925: PUSH
28926: LD_INT 2
28928: NEG
28929: PUSH
28930: EMPTY
28931: LIST
28932: LIST
28933: PUSH
28934: LD_INT 2
28936: PUSH
28937: LD_INT 3
28939: PUSH
28940: EMPTY
28941: LIST
28942: LIST
28943: PUSH
28944: LD_INT 1
28946: PUSH
28947: LD_INT 3
28949: PUSH
28950: EMPTY
28951: LIST
28952: LIST
28953: PUSH
28954: LD_INT 1
28956: NEG
28957: PUSH
28958: LD_INT 2
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 2
28967: NEG
28968: PUSH
28969: LD_INT 1
28971: PUSH
28972: EMPTY
28973: LIST
28974: LIST
28975: PUSH
28976: EMPTY
28977: LIST
28978: LIST
28979: LIST
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: LIST
28988: LIST
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: LIST
28994: LIST
28995: LIST
28996: LIST
28997: LIST
28998: LIST
28999: LIST
29000: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29001: LD_ADDR_VAR 0 27
29005: PUSH
29006: LD_INT 0
29008: PUSH
29009: LD_INT 0
29011: PUSH
29012: EMPTY
29013: LIST
29014: LIST
29015: PUSH
29016: LD_INT 0
29018: PUSH
29019: LD_INT 1
29021: NEG
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: PUSH
29027: LD_INT 1
29029: PUSH
29030: LD_INT 0
29032: PUSH
29033: EMPTY
29034: LIST
29035: LIST
29036: PUSH
29037: LD_INT 1
29039: PUSH
29040: LD_INT 1
29042: PUSH
29043: EMPTY
29044: LIST
29045: LIST
29046: PUSH
29047: LD_INT 0
29049: PUSH
29050: LD_INT 1
29052: PUSH
29053: EMPTY
29054: LIST
29055: LIST
29056: PUSH
29057: LD_INT 1
29059: NEG
29060: PUSH
29061: LD_INT 0
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: PUSH
29068: LD_INT 1
29070: NEG
29071: PUSH
29072: LD_INT 1
29074: NEG
29075: PUSH
29076: EMPTY
29077: LIST
29078: LIST
29079: PUSH
29080: LD_INT 1
29082: NEG
29083: PUSH
29084: LD_INT 2
29086: NEG
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: PUSH
29092: LD_INT 0
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: LD_INT 1
29108: NEG
29109: PUSH
29110: EMPTY
29111: LIST
29112: LIST
29113: PUSH
29114: LD_INT 2
29116: PUSH
29117: LD_INT 0
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PUSH
29124: LD_INT 2
29126: PUSH
29127: LD_INT 1
29129: PUSH
29130: EMPTY
29131: LIST
29132: LIST
29133: PUSH
29134: LD_INT 2
29136: PUSH
29137: LD_INT 2
29139: PUSH
29140: EMPTY
29141: LIST
29142: LIST
29143: PUSH
29144: LD_INT 1
29146: PUSH
29147: LD_INT 2
29149: PUSH
29150: EMPTY
29151: LIST
29152: LIST
29153: PUSH
29154: LD_INT 0
29156: PUSH
29157: LD_INT 2
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: NEG
29167: PUSH
29168: LD_INT 1
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 2
29177: NEG
29178: PUSH
29179: LD_INT 0
29181: PUSH
29182: EMPTY
29183: LIST
29184: LIST
29185: PUSH
29186: LD_INT 2
29188: NEG
29189: PUSH
29190: LD_INT 1
29192: NEG
29193: PUSH
29194: EMPTY
29195: LIST
29196: LIST
29197: PUSH
29198: LD_INT 2
29200: NEG
29201: PUSH
29202: LD_INT 2
29204: NEG
29205: PUSH
29206: EMPTY
29207: LIST
29208: LIST
29209: PUSH
29210: LD_INT 1
29212: NEG
29213: PUSH
29214: LD_INT 2
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PUSH
29221: LD_INT 2
29223: NEG
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 3
29234: NEG
29235: PUSH
29236: LD_INT 1
29238: NEG
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: LD_INT 3
29246: NEG
29247: PUSH
29248: LD_INT 2
29250: NEG
29251: PUSH
29252: EMPTY
29253: LIST
29254: LIST
29255: PUSH
29256: EMPTY
29257: LIST
29258: LIST
29259: LIST
29260: LIST
29261: LIST
29262: LIST
29263: LIST
29264: LIST
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
29281: LD_ADDR_VAR 0 28
29285: PUSH
29286: LD_INT 0
29288: PUSH
29289: LD_INT 0
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: PUSH
29296: LD_INT 0
29298: PUSH
29299: LD_INT 1
29301: NEG
29302: PUSH
29303: EMPTY
29304: LIST
29305: LIST
29306: PUSH
29307: LD_INT 1
29309: PUSH
29310: LD_INT 0
29312: PUSH
29313: EMPTY
29314: LIST
29315: LIST
29316: PUSH
29317: LD_INT 1
29319: PUSH
29320: LD_INT 1
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: LD_INT 0
29329: PUSH
29330: LD_INT 1
29332: PUSH
29333: EMPTY
29334: LIST
29335: LIST
29336: PUSH
29337: LD_INT 1
29339: NEG
29340: PUSH
29341: LD_INT 0
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: PUSH
29348: LD_INT 1
29350: NEG
29351: PUSH
29352: LD_INT 1
29354: NEG
29355: PUSH
29356: EMPTY
29357: LIST
29358: LIST
29359: PUSH
29360: LD_INT 1
29362: NEG
29363: PUSH
29364: LD_INT 2
29366: NEG
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 0
29374: PUSH
29375: LD_INT 2
29377: NEG
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: PUSH
29383: LD_INT 1
29385: PUSH
29386: LD_INT 1
29388: NEG
29389: PUSH
29390: EMPTY
29391: LIST
29392: LIST
29393: PUSH
29394: LD_INT 2
29396: PUSH
29397: LD_INT 0
29399: PUSH
29400: EMPTY
29401: LIST
29402: LIST
29403: PUSH
29404: LD_INT 2
29406: PUSH
29407: LD_INT 1
29409: PUSH
29410: EMPTY
29411: LIST
29412: LIST
29413: PUSH
29414: LD_INT 2
29416: PUSH
29417: LD_INT 2
29419: PUSH
29420: EMPTY
29421: LIST
29422: LIST
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: LD_INT 2
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: PUSH
29434: LD_INT 0
29436: PUSH
29437: LD_INT 2
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 1
29446: NEG
29447: PUSH
29448: LD_INT 1
29450: PUSH
29451: EMPTY
29452: LIST
29453: LIST
29454: PUSH
29455: LD_INT 2
29457: NEG
29458: PUSH
29459: LD_INT 0
29461: PUSH
29462: EMPTY
29463: LIST
29464: LIST
29465: PUSH
29466: LD_INT 2
29468: NEG
29469: PUSH
29470: LD_INT 1
29472: NEG
29473: PUSH
29474: EMPTY
29475: LIST
29476: LIST
29477: PUSH
29478: LD_INT 2
29480: NEG
29481: PUSH
29482: LD_INT 2
29484: NEG
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 2
29492: NEG
29493: PUSH
29494: LD_INT 3
29496: NEG
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: NEG
29505: PUSH
29506: LD_INT 3
29508: NEG
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 3
29516: NEG
29517: PUSH
29518: LD_INT 1
29520: NEG
29521: PUSH
29522: EMPTY
29523: LIST
29524: LIST
29525: PUSH
29526: LD_INT 3
29528: NEG
29529: PUSH
29530: LD_INT 2
29532: NEG
29533: PUSH
29534: EMPTY
29535: LIST
29536: LIST
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: LIST
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: LIST
29558: LIST
29559: LIST
29560: LIST
29561: LIST
29562: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29563: LD_ADDR_VAR 0 29
29567: PUSH
29568: LD_INT 0
29570: PUSH
29571: LD_INT 0
29573: PUSH
29574: EMPTY
29575: LIST
29576: LIST
29577: PUSH
29578: LD_INT 0
29580: PUSH
29581: LD_INT 1
29583: NEG
29584: PUSH
29585: EMPTY
29586: LIST
29587: LIST
29588: PUSH
29589: LD_INT 1
29591: PUSH
29592: LD_INT 0
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PUSH
29599: LD_INT 1
29601: PUSH
29602: LD_INT 1
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: LD_INT 0
29611: PUSH
29612: LD_INT 1
29614: PUSH
29615: EMPTY
29616: LIST
29617: LIST
29618: PUSH
29619: LD_INT 1
29621: NEG
29622: PUSH
29623: LD_INT 0
29625: PUSH
29626: EMPTY
29627: LIST
29628: LIST
29629: PUSH
29630: LD_INT 1
29632: NEG
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 1
29644: NEG
29645: PUSH
29646: LD_INT 2
29648: NEG
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: LD_INT 2
29659: NEG
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 1
29667: PUSH
29668: LD_INT 1
29670: NEG
29671: PUSH
29672: EMPTY
29673: LIST
29674: LIST
29675: PUSH
29676: LD_INT 2
29678: PUSH
29679: LD_INT 0
29681: PUSH
29682: EMPTY
29683: LIST
29684: LIST
29685: PUSH
29686: LD_INT 2
29688: PUSH
29689: LD_INT 1
29691: PUSH
29692: EMPTY
29693: LIST
29694: LIST
29695: PUSH
29696: LD_INT 1
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 1
29718: NEG
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: NEG
29730: PUSH
29731: LD_INT 1
29733: NEG
29734: PUSH
29735: EMPTY
29736: LIST
29737: LIST
29738: PUSH
29739: LD_INT 2
29741: NEG
29742: PUSH
29743: LD_INT 2
29745: NEG
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 2
29753: NEG
29754: PUSH
29755: LD_INT 3
29757: NEG
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: PUSH
29763: LD_INT 2
29765: PUSH
29766: LD_INT 1
29768: NEG
29769: PUSH
29770: EMPTY
29771: LIST
29772: LIST
29773: PUSH
29774: LD_INT 3
29776: PUSH
29777: LD_INT 1
29779: PUSH
29780: EMPTY
29781: LIST
29782: LIST
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: LD_INT 3
29789: PUSH
29790: EMPTY
29791: LIST
29792: LIST
29793: PUSH
29794: LD_INT 1
29796: NEG
29797: PUSH
29798: LD_INT 2
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: PUSH
29805: LD_INT 3
29807: NEG
29808: PUSH
29809: LD_INT 2
29811: NEG
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: LIST
29826: LIST
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: LIST
29832: LIST
29833: LIST
29834: LIST
29835: LIST
29836: LIST
29837: LIST
29838: LIST
29839: LIST
29840: LIST
29841: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29842: LD_ADDR_VAR 0 30
29846: PUSH
29847: LD_INT 0
29849: PUSH
29850: LD_INT 0
29852: PUSH
29853: EMPTY
29854: LIST
29855: LIST
29856: PUSH
29857: LD_INT 0
29859: PUSH
29860: LD_INT 1
29862: NEG
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PUSH
29868: LD_INT 1
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: EMPTY
29875: LIST
29876: LIST
29877: PUSH
29878: LD_INT 1
29880: PUSH
29881: LD_INT 1
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: PUSH
29888: LD_INT 0
29890: PUSH
29891: LD_INT 1
29893: PUSH
29894: EMPTY
29895: LIST
29896: LIST
29897: PUSH
29898: LD_INT 1
29900: NEG
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: LD_INT 1
29915: NEG
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: PUSH
29921: LD_INT 1
29923: NEG
29924: PUSH
29925: LD_INT 2
29927: NEG
29928: PUSH
29929: EMPTY
29930: LIST
29931: LIST
29932: PUSH
29933: LD_INT 0
29935: PUSH
29936: LD_INT 2
29938: NEG
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PUSH
29944: LD_INT 1
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: EMPTY
29952: LIST
29953: LIST
29954: PUSH
29955: LD_INT 2
29957: PUSH
29958: LD_INT 0
29960: PUSH
29961: EMPTY
29962: LIST
29963: LIST
29964: PUSH
29965: LD_INT 2
29967: PUSH
29968: LD_INT 1
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 2
29977: PUSH
29978: LD_INT 2
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: LD_INT 1
29987: PUSH
29988: LD_INT 2
29990: PUSH
29991: EMPTY
29992: LIST
29993: LIST
29994: PUSH
29995: LD_INT 1
29997: NEG
29998: PUSH
29999: LD_INT 1
30001: PUSH
30002: EMPTY
30003: LIST
30004: LIST
30005: PUSH
30006: LD_INT 2
30008: NEG
30009: PUSH
30010: LD_INT 0
30012: PUSH
30013: EMPTY
30014: LIST
30015: LIST
30016: PUSH
30017: LD_INT 2
30019: NEG
30020: PUSH
30021: LD_INT 1
30023: NEG
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 1
30031: NEG
30032: PUSH
30033: LD_INT 3
30035: NEG
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 1
30043: PUSH
30044: LD_INT 2
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 3
30054: PUSH
30055: LD_INT 2
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 2
30064: PUSH
30065: LD_INT 3
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 2
30074: NEG
30075: PUSH
30076: LD_INT 1
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: LD_INT 3
30085: NEG
30086: PUSH
30087: LD_INT 1
30089: NEG
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: EMPTY
30096: LIST
30097: LIST
30098: LIST
30099: LIST
30100: LIST
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: LIST
30116: LIST
30117: LIST
30118: LIST
30119: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30120: LD_ADDR_VAR 0 31
30124: PUSH
30125: LD_INT 0
30127: PUSH
30128: LD_INT 0
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 0
30137: PUSH
30138: LD_INT 1
30140: NEG
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: PUSH
30146: LD_INT 1
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: LIST
30154: LIST
30155: PUSH
30156: LD_INT 1
30158: PUSH
30159: LD_INT 1
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 0
30168: PUSH
30169: LD_INT 1
30171: PUSH
30172: EMPTY
30173: LIST
30174: LIST
30175: PUSH
30176: LD_INT 1
30178: NEG
30179: PUSH
30180: LD_INT 0
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: LD_INT 1
30189: NEG
30190: PUSH
30191: LD_INT 1
30193: NEG
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 1
30201: NEG
30202: PUSH
30203: LD_INT 2
30205: NEG
30206: PUSH
30207: EMPTY
30208: LIST
30209: LIST
30210: PUSH
30211: LD_INT 1
30213: PUSH
30214: LD_INT 1
30216: NEG
30217: PUSH
30218: EMPTY
30219: LIST
30220: LIST
30221: PUSH
30222: LD_INT 2
30224: PUSH
30225: LD_INT 0
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: PUSH
30235: LD_INT 1
30237: PUSH
30238: EMPTY
30239: LIST
30240: LIST
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: LD_INT 2
30247: PUSH
30248: EMPTY
30249: LIST
30250: LIST
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: LD_INT 2
30257: PUSH
30258: EMPTY
30259: LIST
30260: LIST
30261: PUSH
30262: LD_INT 0
30264: PUSH
30265: LD_INT 2
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: PUSH
30272: LD_INT 1
30274: NEG
30275: PUSH
30276: LD_INT 1
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: PUSH
30283: LD_INT 2
30285: NEG
30286: PUSH
30287: LD_INT 1
30289: NEG
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 2
30297: NEG
30298: PUSH
30299: LD_INT 2
30301: NEG
30302: PUSH
30303: EMPTY
30304: LIST
30305: LIST
30306: PUSH
30307: LD_INT 2
30309: NEG
30310: PUSH
30311: LD_INT 3
30313: NEG
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 2
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 3
30332: PUSH
30333: LD_INT 1
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 3
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 1
30352: NEG
30353: PUSH
30354: LD_INT 2
30356: PUSH
30357: EMPTY
30358: LIST
30359: LIST
30360: PUSH
30361: LD_INT 3
30363: NEG
30364: PUSH
30365: LD_INT 2
30367: NEG
30368: PUSH
30369: EMPTY
30370: LIST
30371: LIST
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: LIST
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: LIST
30392: LIST
30393: LIST
30394: LIST
30395: LIST
30396: LIST
30397: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30398: LD_ADDR_VAR 0 32
30402: PUSH
30403: LD_INT 0
30405: PUSH
30406: LD_INT 0
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: PUSH
30413: LD_INT 0
30415: PUSH
30416: LD_INT 1
30418: NEG
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 1
30426: PUSH
30427: LD_INT 0
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: LD_INT 1
30436: PUSH
30437: LD_INT 1
30439: PUSH
30440: EMPTY
30441: LIST
30442: LIST
30443: PUSH
30444: LD_INT 0
30446: PUSH
30447: LD_INT 1
30449: PUSH
30450: EMPTY
30451: LIST
30452: LIST
30453: PUSH
30454: LD_INT 1
30456: NEG
30457: PUSH
30458: LD_INT 0
30460: PUSH
30461: EMPTY
30462: LIST
30463: LIST
30464: PUSH
30465: LD_INT 1
30467: NEG
30468: PUSH
30469: LD_INT 1
30471: NEG
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 1
30479: NEG
30480: PUSH
30481: LD_INT 2
30483: NEG
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: PUSH
30489: LD_INT 0
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 1
30502: PUSH
30503: LD_INT 1
30505: NEG
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: PUSH
30511: LD_INT 2
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: PUSH
30521: LD_INT 2
30523: PUSH
30524: LD_INT 2
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: PUSH
30541: LD_INT 0
30543: PUSH
30544: LD_INT 2
30546: PUSH
30547: EMPTY
30548: LIST
30549: LIST
30550: PUSH
30551: LD_INT 1
30553: NEG
30554: PUSH
30555: LD_INT 1
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: PUSH
30562: LD_INT 2
30564: NEG
30565: PUSH
30566: LD_INT 0
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: LD_INT 2
30575: NEG
30576: PUSH
30577: LD_INT 1
30579: NEG
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 1
30587: NEG
30588: PUSH
30589: LD_INT 3
30591: NEG
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 1
30599: PUSH
30600: LD_INT 2
30602: NEG
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: LD_INT 3
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: EMPTY
30615: LIST
30616: LIST
30617: PUSH
30618: LD_INT 2
30620: PUSH
30621: LD_INT 3
30623: PUSH
30624: EMPTY
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 2
30630: NEG
30631: PUSH
30632: LD_INT 1
30634: PUSH
30635: EMPTY
30636: LIST
30637: LIST
30638: PUSH
30639: LD_INT 3
30641: NEG
30642: PUSH
30643: LD_INT 1
30645: NEG
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: LIST
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: LIST
30675: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
30676: LD_ADDR_VAR 0 33
30680: PUSH
30681: LD_INT 0
30683: PUSH
30684: LD_INT 0
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: PUSH
30691: LD_INT 0
30693: PUSH
30694: LD_INT 1
30696: NEG
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: LD_INT 1
30704: PUSH
30705: LD_INT 0
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: PUSH
30712: LD_INT 1
30714: PUSH
30715: LD_INT 1
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 0
30724: PUSH
30725: LD_INT 1
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 1
30734: NEG
30735: PUSH
30736: LD_INT 0
30738: PUSH
30739: EMPTY
30740: LIST
30741: LIST
30742: PUSH
30743: LD_INT 1
30745: NEG
30746: PUSH
30747: LD_INT 1
30749: NEG
30750: PUSH
30751: EMPTY
30752: LIST
30753: LIST
30754: PUSH
30755: LD_INT 1
30757: NEG
30758: PUSH
30759: LD_INT 2
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 1
30769: PUSH
30770: LD_INT 1
30772: NEG
30773: PUSH
30774: EMPTY
30775: LIST
30776: LIST
30777: PUSH
30778: LD_INT 2
30780: PUSH
30781: LD_INT 0
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: PUSH
30788: LD_INT 2
30790: PUSH
30791: LD_INT 1
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: PUSH
30798: LD_INT 1
30800: PUSH
30801: LD_INT 2
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 0
30810: PUSH
30811: LD_INT 2
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 1
30820: NEG
30821: PUSH
30822: LD_INT 1
30824: PUSH
30825: EMPTY
30826: LIST
30827: LIST
30828: PUSH
30829: LD_INT 2
30831: NEG
30832: PUSH
30833: LD_INT 0
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: NEG
30843: PUSH
30844: LD_INT 1
30846: NEG
30847: PUSH
30848: EMPTY
30849: LIST
30850: LIST
30851: PUSH
30852: LD_INT 2
30854: NEG
30855: PUSH
30856: LD_INT 2
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 2
30866: NEG
30867: PUSH
30868: LD_INT 3
30870: NEG
30871: PUSH
30872: EMPTY
30873: LIST
30874: LIST
30875: PUSH
30876: LD_INT 2
30878: PUSH
30879: LD_INT 1
30881: NEG
30882: PUSH
30883: EMPTY
30884: LIST
30885: LIST
30886: PUSH
30887: LD_INT 3
30889: PUSH
30890: LD_INT 1
30892: PUSH
30893: EMPTY
30894: LIST
30895: LIST
30896: PUSH
30897: LD_INT 1
30899: PUSH
30900: LD_INT 3
30902: PUSH
30903: EMPTY
30904: LIST
30905: LIST
30906: PUSH
30907: LD_INT 1
30909: NEG
30910: PUSH
30911: LD_INT 2
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 3
30920: NEG
30921: PUSH
30922: LD_INT 2
30924: NEG
30925: PUSH
30926: EMPTY
30927: LIST
30928: LIST
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: LIST
30938: LIST
30939: LIST
30940: LIST
30941: LIST
30942: LIST
30943: LIST
30944: LIST
30945: LIST
30946: LIST
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: LIST
30952: LIST
30953: LIST
30954: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
30955: LD_ADDR_VAR 0 34
30959: PUSH
30960: LD_INT 0
30962: PUSH
30963: LD_INT 0
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 0
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 1
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 0
31003: PUSH
31004: LD_INT 1
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: NEG
31014: PUSH
31015: LD_INT 0
31017: PUSH
31018: EMPTY
31019: LIST
31020: LIST
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: LD_INT 1
31028: NEG
31029: PUSH
31030: EMPTY
31031: LIST
31032: LIST
31033: PUSH
31034: LD_INT 1
31036: NEG
31037: PUSH
31038: LD_INT 2
31040: NEG
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: LD_INT 2
31051: NEG
31052: PUSH
31053: EMPTY
31054: LIST
31055: LIST
31056: PUSH
31057: LD_INT 1
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: EMPTY
31065: LIST
31066: LIST
31067: PUSH
31068: LD_INT 2
31070: PUSH
31071: LD_INT 1
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: PUSH
31078: LD_INT 2
31080: PUSH
31081: LD_INT 2
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: PUSH
31088: LD_INT 1
31090: PUSH
31091: LD_INT 2
31093: PUSH
31094: EMPTY
31095: LIST
31096: LIST
31097: PUSH
31098: LD_INT 1
31100: NEG
31101: PUSH
31102: LD_INT 1
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: PUSH
31109: LD_INT 2
31111: NEG
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: EMPTY
31117: LIST
31118: LIST
31119: PUSH
31120: LD_INT 2
31122: NEG
31123: PUSH
31124: LD_INT 1
31126: NEG
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 2
31134: NEG
31135: PUSH
31136: LD_INT 2
31138: NEG
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 1
31146: NEG
31147: PUSH
31148: LD_INT 3
31150: NEG
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: PUSH
31156: LD_INT 1
31158: PUSH
31159: LD_INT 2
31161: NEG
31162: PUSH
31163: EMPTY
31164: LIST
31165: LIST
31166: PUSH
31167: LD_INT 3
31169: PUSH
31170: LD_INT 2
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 2
31179: PUSH
31180: LD_INT 3
31182: PUSH
31183: EMPTY
31184: LIST
31185: LIST
31186: PUSH
31187: LD_INT 2
31189: NEG
31190: PUSH
31191: LD_INT 1
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 3
31200: NEG
31201: PUSH
31202: LD_INT 1
31204: NEG
31205: PUSH
31206: EMPTY
31207: LIST
31208: LIST
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: LIST
31214: LIST
31215: LIST
31216: LIST
31217: LIST
31218: LIST
31219: LIST
31220: LIST
31221: LIST
31222: LIST
31223: LIST
31224: LIST
31225: LIST
31226: LIST
31227: LIST
31228: LIST
31229: LIST
31230: LIST
31231: LIST
31232: LIST
31233: LIST
31234: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31235: LD_ADDR_VAR 0 35
31239: PUSH
31240: LD_INT 0
31242: PUSH
31243: LD_INT 0
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: PUSH
31250: LD_INT 0
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: LD_INT 0
31266: PUSH
31267: EMPTY
31268: LIST
31269: LIST
31270: PUSH
31271: LD_INT 1
31273: PUSH
31274: LD_INT 1
31276: PUSH
31277: EMPTY
31278: LIST
31279: LIST
31280: PUSH
31281: LD_INT 0
31283: PUSH
31284: LD_INT 1
31286: PUSH
31287: EMPTY
31288: LIST
31289: LIST
31290: PUSH
31291: LD_INT 1
31293: NEG
31294: PUSH
31295: LD_INT 0
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 1
31304: NEG
31305: PUSH
31306: LD_INT 1
31308: NEG
31309: PUSH
31310: EMPTY
31311: LIST
31312: LIST
31313: PUSH
31314: LD_INT 2
31316: PUSH
31317: LD_INT 1
31319: PUSH
31320: EMPTY
31321: LIST
31322: LIST
31323: PUSH
31324: LD_INT 2
31326: NEG
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: EMPTY
31333: LIST
31334: LIST
31335: PUSH
31336: EMPTY
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31347: LD_ADDR_VAR 0 36
31351: PUSH
31352: LD_INT 0
31354: PUSH
31355: LD_INT 0
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 0
31364: PUSH
31365: LD_INT 1
31367: NEG
31368: PUSH
31369: EMPTY
31370: LIST
31371: LIST
31372: PUSH
31373: LD_INT 1
31375: PUSH
31376: LD_INT 0
31378: PUSH
31379: EMPTY
31380: LIST
31381: LIST
31382: PUSH
31383: LD_INT 1
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: EMPTY
31390: LIST
31391: LIST
31392: PUSH
31393: LD_INT 0
31395: PUSH
31396: LD_INT 1
31398: PUSH
31399: EMPTY
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 1
31405: NEG
31406: PUSH
31407: LD_INT 0
31409: PUSH
31410: EMPTY
31411: LIST
31412: LIST
31413: PUSH
31414: LD_INT 1
31416: NEG
31417: PUSH
31418: LD_INT 1
31420: NEG
31421: PUSH
31422: EMPTY
31423: LIST
31424: LIST
31425: PUSH
31426: LD_INT 1
31428: NEG
31429: PUSH
31430: LD_INT 2
31432: NEG
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: LD_INT 1
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: EMPTY
31449: LIST
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31459: LD_ADDR_VAR 0 37
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: LD_INT 0
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 0
31476: PUSH
31477: LD_INT 1
31479: NEG
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 1
31487: PUSH
31488: LD_INT 0
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 0
31507: PUSH
31508: LD_INT 1
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PUSH
31515: LD_INT 1
31517: NEG
31518: PUSH
31519: LD_INT 0
31521: PUSH
31522: EMPTY
31523: LIST
31524: LIST
31525: PUSH
31526: LD_INT 1
31528: NEG
31529: PUSH
31530: LD_INT 1
31532: NEG
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PUSH
31538: LD_INT 1
31540: PUSH
31541: LD_INT 1
31543: NEG
31544: PUSH
31545: EMPTY
31546: LIST
31547: LIST
31548: PUSH
31549: LD_INT 1
31551: NEG
31552: PUSH
31553: LD_INT 1
31555: PUSH
31556: EMPTY
31557: LIST
31558: LIST
31559: PUSH
31560: EMPTY
31561: LIST
31562: LIST
31563: LIST
31564: LIST
31565: LIST
31566: LIST
31567: LIST
31568: LIST
31569: LIST
31570: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
31571: LD_ADDR_VAR 0 38
31575: PUSH
31576: LD_INT 0
31578: PUSH
31579: LD_INT 0
31581: PUSH
31582: EMPTY
31583: LIST
31584: LIST
31585: PUSH
31586: LD_INT 0
31588: PUSH
31589: LD_INT 1
31591: NEG
31592: PUSH
31593: EMPTY
31594: LIST
31595: LIST
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: LD_INT 0
31602: PUSH
31603: EMPTY
31604: LIST
31605: LIST
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: LD_INT 1
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 0
31619: PUSH
31620: LD_INT 1
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 1
31629: NEG
31630: PUSH
31631: LD_INT 0
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: NEG
31641: PUSH
31642: LD_INT 1
31644: NEG
31645: PUSH
31646: EMPTY
31647: LIST
31648: LIST
31649: PUSH
31650: LD_INT 2
31652: PUSH
31653: LD_INT 1
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 2
31662: NEG
31663: PUSH
31664: LD_INT 1
31666: NEG
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
31683: LD_ADDR_VAR 0 39
31687: PUSH
31688: LD_INT 0
31690: PUSH
31691: LD_INT 0
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: PUSH
31698: LD_INT 0
31700: PUSH
31701: LD_INT 1
31703: NEG
31704: PUSH
31705: EMPTY
31706: LIST
31707: LIST
31708: PUSH
31709: LD_INT 1
31711: PUSH
31712: LD_INT 0
31714: PUSH
31715: EMPTY
31716: LIST
31717: LIST
31718: PUSH
31719: LD_INT 1
31721: PUSH
31722: LD_INT 1
31724: PUSH
31725: EMPTY
31726: LIST
31727: LIST
31728: PUSH
31729: LD_INT 0
31731: PUSH
31732: LD_INT 1
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: PUSH
31739: LD_INT 1
31741: NEG
31742: PUSH
31743: LD_INT 0
31745: PUSH
31746: EMPTY
31747: LIST
31748: LIST
31749: PUSH
31750: LD_INT 1
31752: NEG
31753: PUSH
31754: LD_INT 1
31756: NEG
31757: PUSH
31758: EMPTY
31759: LIST
31760: LIST
31761: PUSH
31762: LD_INT 1
31764: NEG
31765: PUSH
31766: LD_INT 2
31768: NEG
31769: PUSH
31770: EMPTY
31771: LIST
31772: LIST
31773: PUSH
31774: LD_INT 1
31776: PUSH
31777: LD_INT 2
31779: PUSH
31780: EMPTY
31781: LIST
31782: LIST
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: LIST
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
31795: LD_ADDR_VAR 0 40
31799: PUSH
31800: LD_INT 0
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 1
31815: NEG
31816: PUSH
31817: EMPTY
31818: LIST
31819: LIST
31820: PUSH
31821: LD_INT 1
31823: PUSH
31824: LD_INT 0
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 1
31833: PUSH
31834: LD_INT 1
31836: PUSH
31837: EMPTY
31838: LIST
31839: LIST
31840: PUSH
31841: LD_INT 0
31843: PUSH
31844: LD_INT 1
31846: PUSH
31847: EMPTY
31848: LIST
31849: LIST
31850: PUSH
31851: LD_INT 1
31853: NEG
31854: PUSH
31855: LD_INT 0
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: PUSH
31862: LD_INT 1
31864: NEG
31865: PUSH
31866: LD_INT 1
31868: NEG
31869: PUSH
31870: EMPTY
31871: LIST
31872: LIST
31873: PUSH
31874: LD_INT 1
31876: PUSH
31877: LD_INT 1
31879: NEG
31880: PUSH
31881: EMPTY
31882: LIST
31883: LIST
31884: PUSH
31885: LD_INT 1
31887: NEG
31888: PUSH
31889: LD_INT 1
31891: PUSH
31892: EMPTY
31893: LIST
31894: LIST
31895: PUSH
31896: EMPTY
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31907: LD_ADDR_VAR 0 41
31911: PUSH
31912: LD_INT 0
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 0
31924: PUSH
31925: LD_INT 1
31927: NEG
31928: PUSH
31929: EMPTY
31930: LIST
31931: LIST
31932: PUSH
31933: LD_INT 1
31935: PUSH
31936: LD_INT 0
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 1
31945: PUSH
31946: LD_INT 1
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PUSH
31963: LD_INT 1
31965: NEG
31966: PUSH
31967: LD_INT 0
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: PUSH
31974: LD_INT 1
31976: NEG
31977: PUSH
31978: LD_INT 1
31980: NEG
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: LD_INT 2
31992: NEG
31993: PUSH
31994: EMPTY
31995: LIST
31996: LIST
31997: PUSH
31998: LD_INT 1
32000: PUSH
32001: LD_INT 1
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 0
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 2
32021: PUSH
32022: LD_INT 1
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 2
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: PUSH
32042: LD_INT 2
32044: PUSH
32045: EMPTY
32046: LIST
32047: LIST
32048: PUSH
32049: LD_INT 1
32051: NEG
32052: PUSH
32053: LD_INT 1
32055: PUSH
32056: EMPTY
32057: LIST
32058: LIST
32059: PUSH
32060: LD_INT 2
32062: NEG
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: EMPTY
32068: LIST
32069: LIST
32070: PUSH
32071: LD_INT 2
32073: NEG
32074: PUSH
32075: LD_INT 1
32077: NEG
32078: PUSH
32079: EMPTY
32080: LIST
32081: LIST
32082: PUSH
32083: LD_INT 2
32085: NEG
32086: PUSH
32087: LD_INT 2
32089: NEG
32090: PUSH
32091: EMPTY
32092: LIST
32093: LIST
32094: PUSH
32095: LD_INT 2
32097: NEG
32098: PUSH
32099: LD_INT 3
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 3
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 3
32150: PUSH
32151: LD_INT 3
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 2
32160: PUSH
32161: LD_INT 3
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: PUSH
32168: LD_INT 2
32170: NEG
32171: PUSH
32172: LD_INT 1
32174: PUSH
32175: EMPTY
32176: LIST
32177: LIST
32178: PUSH
32179: LD_INT 3
32181: NEG
32182: PUSH
32183: LD_INT 0
32185: PUSH
32186: EMPTY
32187: LIST
32188: LIST
32189: PUSH
32190: LD_INT 3
32192: NEG
32193: PUSH
32194: LD_INT 1
32196: NEG
32197: PUSH
32198: EMPTY
32199: LIST
32200: LIST
32201: PUSH
32202: LD_INT 3
32204: NEG
32205: PUSH
32206: LD_INT 2
32208: NEG
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 3
32216: NEG
32217: PUSH
32218: LD_INT 3
32220: NEG
32221: PUSH
32222: EMPTY
32223: LIST
32224: LIST
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32257: LD_ADDR_VAR 0 42
32261: PUSH
32262: LD_INT 0
32264: PUSH
32265: LD_INT 0
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: PUSH
32272: LD_INT 0
32274: PUSH
32275: LD_INT 1
32277: NEG
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: LD_INT 0
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 1
32295: PUSH
32296: LD_INT 1
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: LD_INT 0
32305: PUSH
32306: LD_INT 1
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: LD_INT 0
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 1
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: NEG
32339: PUSH
32340: LD_INT 2
32342: NEG
32343: PUSH
32344: EMPTY
32345: LIST
32346: LIST
32347: PUSH
32348: LD_INT 0
32350: PUSH
32351: LD_INT 2
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 1
32361: PUSH
32362: LD_INT 1
32364: NEG
32365: PUSH
32366: EMPTY
32367: LIST
32368: LIST
32369: PUSH
32370: LD_INT 2
32372: PUSH
32373: LD_INT 1
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: PUSH
32380: LD_INT 2
32382: PUSH
32383: LD_INT 2
32385: PUSH
32386: EMPTY
32387: LIST
32388: LIST
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: LD_INT 2
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 2
32405: PUSH
32406: EMPTY
32407: LIST
32408: LIST
32409: PUSH
32410: LD_INT 1
32412: NEG
32413: PUSH
32414: LD_INT 1
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 2
32423: NEG
32424: PUSH
32425: LD_INT 1
32427: NEG
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: LD_INT 2
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: LD_INT 3
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 1
32459: NEG
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 0
32471: PUSH
32472: LD_INT 3
32474: NEG
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: LD_INT 1
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 3
32493: PUSH
32494: LD_INT 2
32496: PUSH
32497: EMPTY
32498: LIST
32499: LIST
32500: PUSH
32501: LD_INT 3
32503: PUSH
32504: LD_INT 3
32506: PUSH
32507: EMPTY
32508: LIST
32509: LIST
32510: PUSH
32511: LD_INT 2
32513: PUSH
32514: LD_INT 3
32516: PUSH
32517: EMPTY
32518: LIST
32519: LIST
32520: PUSH
32521: LD_INT 1
32523: PUSH
32524: LD_INT 3
32526: PUSH
32527: EMPTY
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 0
32533: PUSH
32534: LD_INT 3
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: PUSH
32541: LD_INT 1
32543: NEG
32544: PUSH
32545: LD_INT 2
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: PUSH
32552: LD_INT 3
32554: NEG
32555: PUSH
32556: LD_INT 2
32558: NEG
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 3
32566: NEG
32567: PUSH
32568: LD_INT 3
32570: NEG
32571: PUSH
32572: EMPTY
32573: LIST
32574: LIST
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: LIST
32606: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32607: LD_ADDR_VAR 0 43
32611: PUSH
32612: LD_INT 0
32614: PUSH
32615: LD_INT 0
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 0
32624: PUSH
32625: LD_INT 1
32627: NEG
32628: PUSH
32629: EMPTY
32630: LIST
32631: LIST
32632: PUSH
32633: LD_INT 1
32635: PUSH
32636: LD_INT 0
32638: PUSH
32639: EMPTY
32640: LIST
32641: LIST
32642: PUSH
32643: LD_INT 1
32645: PUSH
32646: LD_INT 1
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 0
32655: PUSH
32656: LD_INT 1
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 1
32665: NEG
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 1
32676: NEG
32677: PUSH
32678: LD_INT 1
32680: NEG
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: PUSH
32686: LD_INT 1
32688: NEG
32689: PUSH
32690: LD_INT 2
32692: NEG
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PUSH
32698: LD_INT 0
32700: PUSH
32701: LD_INT 2
32703: NEG
32704: PUSH
32705: EMPTY
32706: LIST
32707: LIST
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 1
32714: NEG
32715: PUSH
32716: EMPTY
32717: LIST
32718: LIST
32719: PUSH
32720: LD_INT 2
32722: PUSH
32723: LD_INT 0
32725: PUSH
32726: EMPTY
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 2
32732: PUSH
32733: LD_INT 1
32735: PUSH
32736: EMPTY
32737: LIST
32738: LIST
32739: PUSH
32740: LD_INT 1
32742: PUSH
32743: LD_INT 2
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 0
32752: PUSH
32753: LD_INT 2
32755: PUSH
32756: EMPTY
32757: LIST
32758: LIST
32759: PUSH
32760: LD_INT 1
32762: NEG
32763: PUSH
32764: LD_INT 1
32766: PUSH
32767: EMPTY
32768: LIST
32769: LIST
32770: PUSH
32771: LD_INT 2
32773: NEG
32774: PUSH
32775: LD_INT 0
32777: PUSH
32778: EMPTY
32779: LIST
32780: LIST
32781: PUSH
32782: LD_INT 2
32784: NEG
32785: PUSH
32786: LD_INT 1
32788: NEG
32789: PUSH
32790: EMPTY
32791: LIST
32792: LIST
32793: PUSH
32794: LD_INT 1
32796: NEG
32797: PUSH
32798: LD_INT 3
32800: NEG
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: LD_INT 0
32808: PUSH
32809: LD_INT 3
32811: NEG
32812: PUSH
32813: EMPTY
32814: LIST
32815: LIST
32816: PUSH
32817: LD_INT 1
32819: PUSH
32820: LD_INT 2
32822: NEG
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 2
32830: PUSH
32831: LD_INT 1
32833: NEG
32834: PUSH
32835: EMPTY
32836: LIST
32837: LIST
32838: PUSH
32839: LD_INT 3
32841: PUSH
32842: LD_INT 0
32844: PUSH
32845: EMPTY
32846: LIST
32847: LIST
32848: PUSH
32849: LD_INT 3
32851: PUSH
32852: LD_INT 1
32854: PUSH
32855: EMPTY
32856: LIST
32857: LIST
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: LD_INT 3
32864: PUSH
32865: EMPTY
32866: LIST
32867: LIST
32868: PUSH
32869: LD_INT 0
32871: PUSH
32872: LD_INT 3
32874: PUSH
32875: EMPTY
32876: LIST
32877: LIST
32878: PUSH
32879: LD_INT 1
32881: NEG
32882: PUSH
32883: LD_INT 2
32885: PUSH
32886: EMPTY
32887: LIST
32888: LIST
32889: PUSH
32890: LD_INT 2
32892: NEG
32893: PUSH
32894: LD_INT 1
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: PUSH
32901: LD_INT 3
32903: NEG
32904: PUSH
32905: LD_INT 0
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: PUSH
32912: LD_INT 3
32914: NEG
32915: PUSH
32916: LD_INT 1
32918: NEG
32919: PUSH
32920: EMPTY
32921: LIST
32922: LIST
32923: PUSH
32924: EMPTY
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
32955: LD_ADDR_VAR 0 44
32959: PUSH
32960: LD_INT 0
32962: PUSH
32963: LD_INT 0
32965: PUSH
32966: EMPTY
32967: LIST
32968: LIST
32969: PUSH
32970: LD_INT 0
32972: PUSH
32973: LD_INT 1
32975: NEG
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: PUSH
32981: LD_INT 1
32983: PUSH
32984: LD_INT 0
32986: PUSH
32987: EMPTY
32988: LIST
32989: LIST
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: LD_INT 1
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 1
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: LD_INT 1
33013: NEG
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: NEG
33025: PUSH
33026: LD_INT 1
33028: NEG
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: LD_INT 2
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 1
33048: PUSH
33049: LD_INT 1
33051: NEG
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: PUSH
33057: LD_INT 2
33059: PUSH
33060: LD_INT 0
33062: PUSH
33063: EMPTY
33064: LIST
33065: LIST
33066: PUSH
33067: LD_INT 2
33069: PUSH
33070: LD_INT 1
33072: PUSH
33073: EMPTY
33074: LIST
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 2
33082: PUSH
33083: EMPTY
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 1
33089: PUSH
33090: LD_INT 2
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 1
33099: NEG
33100: PUSH
33101: LD_INT 1
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 2
33110: NEG
33111: PUSH
33112: LD_INT 0
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 2
33121: NEG
33122: PUSH
33123: LD_INT 1
33125: NEG
33126: PUSH
33127: EMPTY
33128: LIST
33129: LIST
33130: PUSH
33131: LD_INT 2
33133: NEG
33134: PUSH
33135: LD_INT 2
33137: NEG
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: PUSH
33143: LD_INT 2
33145: NEG
33146: PUSH
33147: LD_INT 3
33149: NEG
33150: PUSH
33151: EMPTY
33152: LIST
33153: LIST
33154: PUSH
33155: LD_INT 2
33157: PUSH
33158: LD_INT 1
33160: NEG
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: PUSH
33166: LD_INT 3
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: EMPTY
33173: LIST
33174: LIST
33175: PUSH
33176: LD_INT 3
33178: PUSH
33179: LD_INT 1
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: PUSH
33186: LD_INT 3
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: EMPTY
33193: LIST
33194: LIST
33195: PUSH
33196: LD_INT 3
33198: PUSH
33199: LD_INT 3
33201: PUSH
33202: EMPTY
33203: LIST
33204: LIST
33205: PUSH
33206: LD_INT 2
33208: PUSH
33209: LD_INT 3
33211: PUSH
33212: EMPTY
33213: LIST
33214: LIST
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: EMPTY
33224: LIST
33225: LIST
33226: PUSH
33227: LD_INT 3
33229: NEG
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: PUSH
33238: LD_INT 3
33240: NEG
33241: PUSH
33242: LD_INT 1
33244: NEG
33245: PUSH
33246: EMPTY
33247: LIST
33248: LIST
33249: PUSH
33250: LD_INT 3
33252: NEG
33253: PUSH
33254: LD_INT 2
33256: NEG
33257: PUSH
33258: EMPTY
33259: LIST
33260: LIST
33261: PUSH
33262: LD_INT 3
33264: NEG
33265: PUSH
33266: LD_INT 3
33268: NEG
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
33305: LD_ADDR_VAR 0 45
33309: PUSH
33310: LD_INT 0
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 0
33322: PUSH
33323: LD_INT 1
33325: NEG
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: PUSH
33331: LD_INT 1
33333: PUSH
33334: LD_INT 0
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: PUSH
33341: LD_INT 1
33343: PUSH
33344: LD_INT 1
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 0
33353: PUSH
33354: LD_INT 1
33356: PUSH
33357: EMPTY
33358: LIST
33359: LIST
33360: PUSH
33361: LD_INT 1
33363: NEG
33364: PUSH
33365: LD_INT 0
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: LD_INT 1
33378: NEG
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: NEG
33387: PUSH
33388: LD_INT 2
33390: NEG
33391: PUSH
33392: EMPTY
33393: LIST
33394: LIST
33395: PUSH
33396: LD_INT 0
33398: PUSH
33399: LD_INT 2
33401: NEG
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 1
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: EMPTY
33415: LIST
33416: LIST
33417: PUSH
33418: LD_INT 2
33420: PUSH
33421: LD_INT 1
33423: PUSH
33424: EMPTY
33425: LIST
33426: LIST
33427: PUSH
33428: LD_INT 2
33430: PUSH
33431: LD_INT 2
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: PUSH
33438: LD_INT 1
33440: PUSH
33441: LD_INT 2
33443: PUSH
33444: EMPTY
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 0
33450: PUSH
33451: LD_INT 2
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 1
33460: NEG
33461: PUSH
33462: LD_INT 1
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: LD_INT 2
33495: NEG
33496: PUSH
33497: LD_INT 3
33499: NEG
33500: PUSH
33501: EMPTY
33502: LIST
33503: LIST
33504: PUSH
33505: LD_INT 1
33507: NEG
33508: PUSH
33509: LD_INT 3
33511: NEG
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 0
33519: PUSH
33520: LD_INT 3
33522: NEG
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 1
33530: PUSH
33531: LD_INT 2
33533: NEG
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 3
33541: PUSH
33542: LD_INT 2
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: PUSH
33549: LD_INT 3
33551: PUSH
33552: LD_INT 3
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: PUSH
33559: LD_INT 2
33561: PUSH
33562: LD_INT 3
33564: PUSH
33565: EMPTY
33566: LIST
33567: LIST
33568: PUSH
33569: LD_INT 1
33571: PUSH
33572: LD_INT 3
33574: PUSH
33575: EMPTY
33576: LIST
33577: LIST
33578: PUSH
33579: LD_INT 0
33581: PUSH
33582: LD_INT 3
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: LD_INT 2
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: PUSH
33600: LD_INT 3
33602: NEG
33603: PUSH
33604: LD_INT 2
33606: NEG
33607: PUSH
33608: EMPTY
33609: LIST
33610: LIST
33611: PUSH
33612: LD_INT 3
33614: NEG
33615: PUSH
33616: LD_INT 3
33618: NEG
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: EMPTY
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: LIST
33647: LIST
33648: LIST
33649: LIST
33650: LIST
33651: LIST
33652: LIST
33653: LIST
33654: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
33655: LD_ADDR_VAR 0 46
33659: PUSH
33660: LD_INT 0
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 0
33672: PUSH
33673: LD_INT 1
33675: NEG
33676: PUSH
33677: EMPTY
33678: LIST
33679: LIST
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: LD_INT 0
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 1
33693: PUSH
33694: LD_INT 1
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 0
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 1
33713: NEG
33714: PUSH
33715: LD_INT 0
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 1
33724: NEG
33725: PUSH
33726: LD_INT 1
33728: NEG
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 1
33736: NEG
33737: PUSH
33738: LD_INT 2
33740: NEG
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: PUSH
33746: LD_INT 0
33748: PUSH
33749: LD_INT 2
33751: NEG
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 1
33759: PUSH
33760: LD_INT 1
33762: NEG
33763: PUSH
33764: EMPTY
33765: LIST
33766: LIST
33767: PUSH
33768: LD_INT 2
33770: PUSH
33771: LD_INT 0
33773: PUSH
33774: EMPTY
33775: LIST
33776: LIST
33777: PUSH
33778: LD_INT 2
33780: PUSH
33781: LD_INT 1
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: PUSH
33788: LD_INT 1
33790: PUSH
33791: LD_INT 2
33793: PUSH
33794: EMPTY
33795: LIST
33796: LIST
33797: PUSH
33798: LD_INT 0
33800: PUSH
33801: LD_INT 2
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 1
33810: NEG
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: EMPTY
33827: LIST
33828: LIST
33829: PUSH
33830: LD_INT 2
33832: NEG
33833: PUSH
33834: LD_INT 1
33836: NEG
33837: PUSH
33838: EMPTY
33839: LIST
33840: LIST
33841: PUSH
33842: LD_INT 1
33844: NEG
33845: PUSH
33846: LD_INT 3
33848: NEG
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: LD_INT 3
33859: NEG
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: PUSH
33865: LD_INT 1
33867: PUSH
33868: LD_INT 2
33870: NEG
33871: PUSH
33872: EMPTY
33873: LIST
33874: LIST
33875: PUSH
33876: LD_INT 2
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 3
33889: PUSH
33890: LD_INT 0
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 3
33899: PUSH
33900: LD_INT 1
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: PUSH
33910: LD_INT 3
33912: PUSH
33913: EMPTY
33914: LIST
33915: LIST
33916: PUSH
33917: LD_INT 0
33919: PUSH
33920: LD_INT 3
33922: PUSH
33923: EMPTY
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 1
33929: NEG
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: PUSH
33938: LD_INT 2
33940: NEG
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: PUSH
33949: LD_INT 3
33951: NEG
33952: PUSH
33953: LD_INT 0
33955: PUSH
33956: EMPTY
33957: LIST
33958: LIST
33959: PUSH
33960: LD_INT 3
33962: NEG
33963: PUSH
33964: LD_INT 1
33966: NEG
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: EMPTY
33973: LIST
33974: LIST
33975: LIST
33976: LIST
33977: LIST
33978: LIST
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34003: LD_ADDR_VAR 0 47
34007: PUSH
34008: LD_INT 0
34010: PUSH
34011: LD_INT 0
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 0
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 1
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 1
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 0
34051: PUSH
34052: LD_INT 1
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 1
34061: NEG
34062: PUSH
34063: LD_INT 0
34065: PUSH
34066: EMPTY
34067: LIST
34068: LIST
34069: PUSH
34070: LD_INT 1
34072: NEG
34073: PUSH
34074: LD_INT 1
34076: NEG
34077: PUSH
34078: EMPTY
34079: LIST
34080: LIST
34081: PUSH
34082: LD_INT 1
34084: NEG
34085: PUSH
34086: LD_INT 2
34088: NEG
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 0
34096: PUSH
34097: LD_INT 2
34099: NEG
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: PUSH
34108: LD_INT 1
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: NEG
34119: PUSH
34120: LD_INT 1
34122: NEG
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: NEG
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: EMPTY
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
34154: LD_ADDR_VAR 0 48
34158: PUSH
34159: LD_INT 0
34161: PUSH
34162: LD_INT 0
34164: PUSH
34165: EMPTY
34166: LIST
34167: LIST
34168: PUSH
34169: LD_INT 0
34171: PUSH
34172: LD_INT 1
34174: NEG
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 1
34182: PUSH
34183: LD_INT 0
34185: PUSH
34186: EMPTY
34187: LIST
34188: LIST
34189: PUSH
34190: LD_INT 1
34192: PUSH
34193: LD_INT 1
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 1
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 1
34212: NEG
34213: PUSH
34214: LD_INT 0
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 1
34227: NEG
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: PUSH
34233: LD_INT 1
34235: NEG
34236: PUSH
34237: LD_INT 2
34239: NEG
34240: PUSH
34241: EMPTY
34242: LIST
34243: LIST
34244: PUSH
34245: LD_INT 0
34247: PUSH
34248: LD_INT 2
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 1
34258: PUSH
34259: LD_INT 1
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 2
34269: PUSH
34270: LD_INT 0
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: PUSH
34277: LD_INT 2
34279: PUSH
34280: LD_INT 1
34282: PUSH
34283: EMPTY
34284: LIST
34285: LIST
34286: PUSH
34287: EMPTY
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
34301: LD_ADDR_VAR 0 49
34305: PUSH
34306: LD_INT 0
34308: PUSH
34309: LD_INT 0
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: PUSH
34316: LD_INT 0
34318: PUSH
34319: LD_INT 1
34321: NEG
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 1
34329: PUSH
34330: LD_INT 0
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 1
34339: PUSH
34340: LD_INT 1
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 0
34349: PUSH
34350: LD_INT 1
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 1
34359: NEG
34360: PUSH
34361: LD_INT 0
34363: PUSH
34364: EMPTY
34365: LIST
34366: LIST
34367: PUSH
34368: LD_INT 1
34370: NEG
34371: PUSH
34372: LD_INT 1
34374: NEG
34375: PUSH
34376: EMPTY
34377: LIST
34378: LIST
34379: PUSH
34380: LD_INT 1
34382: PUSH
34383: LD_INT 1
34385: NEG
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 0
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 1
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 2
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 1
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: EMPTY
34432: LIST
34433: LIST
34434: LIST
34435: LIST
34436: LIST
34437: LIST
34438: LIST
34439: LIST
34440: LIST
34441: LIST
34442: LIST
34443: LIST
34444: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
34445: LD_ADDR_VAR 0 50
34449: PUSH
34450: LD_INT 0
34452: PUSH
34453: LD_INT 0
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 0
34462: PUSH
34463: LD_INT 1
34465: NEG
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: PUSH
34471: LD_INT 1
34473: PUSH
34474: LD_INT 0
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: PUSH
34481: LD_INT 1
34483: PUSH
34484: LD_INT 1
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: PUSH
34491: LD_INT 0
34493: PUSH
34494: LD_INT 1
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: NEG
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: EMPTY
34509: LIST
34510: LIST
34511: PUSH
34512: LD_INT 1
34514: NEG
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 2
34526: PUSH
34527: LD_INT 1
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 2
34536: PUSH
34537: LD_INT 2
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 1
34546: PUSH
34547: LD_INT 2
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 0
34556: PUSH
34557: LD_INT 2
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: NEG
34567: PUSH
34568: LD_INT 1
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: LIST
34586: LIST
34587: LIST
34588: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
34589: LD_ADDR_VAR 0 51
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: LD_INT 0
34599: PUSH
34600: EMPTY
34601: LIST
34602: LIST
34603: PUSH
34604: LD_INT 0
34606: PUSH
34607: LD_INT 1
34609: NEG
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 1
34617: PUSH
34618: LD_INT 0
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: LD_INT 1
34630: PUSH
34631: EMPTY
34632: LIST
34633: LIST
34634: PUSH
34635: LD_INT 0
34637: PUSH
34638: LD_INT 1
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 1
34647: NEG
34648: PUSH
34649: LD_INT 0
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: PUSH
34656: LD_INT 1
34658: NEG
34659: PUSH
34660: LD_INT 1
34662: NEG
34663: PUSH
34664: EMPTY
34665: LIST
34666: LIST
34667: PUSH
34668: LD_INT 1
34670: PUSH
34671: LD_INT 2
34673: PUSH
34674: EMPTY
34675: LIST
34676: LIST
34677: PUSH
34678: LD_INT 0
34680: PUSH
34681: LD_INT 2
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 1
34690: NEG
34691: PUSH
34692: LD_INT 1
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 2
34712: NEG
34713: PUSH
34714: LD_INT 1
34716: NEG
34717: PUSH
34718: EMPTY
34719: LIST
34720: LIST
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34736: LD_ADDR_VAR 0 52
34740: PUSH
34741: LD_INT 0
34743: PUSH
34744: LD_INT 0
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: PUSH
34751: LD_INT 0
34753: PUSH
34754: LD_INT 1
34756: NEG
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 1
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 1
34774: PUSH
34775: LD_INT 1
34777: PUSH
34778: EMPTY
34779: LIST
34780: LIST
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: PUSH
34792: LD_INT 1
34794: NEG
34795: PUSH
34796: LD_INT 0
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 1
34805: NEG
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: EMPTY
34812: LIST
34813: LIST
34814: PUSH
34815: LD_INT 1
34817: NEG
34818: PUSH
34819: LD_INT 2
34821: NEG
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: LD_INT 1
34829: NEG
34830: PUSH
34831: LD_INT 1
34833: PUSH
34834: EMPTY
34835: LIST
34836: LIST
34837: PUSH
34838: LD_INT 2
34840: NEG
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: EMPTY
34846: LIST
34847: LIST
34848: PUSH
34849: LD_INT 2
34851: NEG
34852: PUSH
34853: LD_INT 1
34855: NEG
34856: PUSH
34857: EMPTY
34858: LIST
34859: LIST
34860: PUSH
34861: LD_INT 2
34863: NEG
34864: PUSH
34865: LD_INT 2
34867: NEG
34868: PUSH
34869: EMPTY
34870: LIST
34871: LIST
34872: PUSH
34873: EMPTY
34874: LIST
34875: LIST
34876: LIST
34877: LIST
34878: LIST
34879: LIST
34880: LIST
34881: LIST
34882: LIST
34883: LIST
34884: LIST
34885: LIST
34886: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34887: LD_ADDR_VAR 0 53
34891: PUSH
34892: LD_INT 0
34894: PUSH
34895: LD_INT 0
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: PUSH
34902: LD_INT 0
34904: PUSH
34905: LD_INT 1
34907: NEG
34908: PUSH
34909: EMPTY
34910: LIST
34911: LIST
34912: PUSH
34913: LD_INT 1
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 1
34925: PUSH
34926: LD_INT 1
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 1
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 1
34945: NEG
34946: PUSH
34947: LD_INT 0
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: NEG
34957: PUSH
34958: LD_INT 1
34960: NEG
34961: PUSH
34962: EMPTY
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 1
34968: NEG
34969: PUSH
34970: LD_INT 2
34972: NEG
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: LD_INT 1
34994: NEG
34995: PUSH
34996: EMPTY
34997: LIST
34998: LIST
34999: PUSH
35000: LD_INT 2
35002: PUSH
35003: LD_INT 0
35005: PUSH
35006: EMPTY
35007: LIST
35008: LIST
35009: PUSH
35010: LD_INT 2
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 2
35022: PUSH
35023: LD_INT 2
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: PUSH
35030: LD_INT 1
35032: PUSH
35033: LD_INT 2
35035: PUSH
35036: EMPTY
35037: LIST
35038: LIST
35039: PUSH
35040: LD_INT 0
35042: PUSH
35043: LD_INT 2
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: PUSH
35050: LD_INT 1
35052: NEG
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: EMPTY
35058: LIST
35059: LIST
35060: PUSH
35061: LD_INT 2
35063: NEG
35064: PUSH
35065: LD_INT 0
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 2
35074: NEG
35075: PUSH
35076: LD_INT 1
35078: NEG
35079: PUSH
35080: EMPTY
35081: LIST
35082: LIST
35083: PUSH
35084: LD_INT 2
35086: NEG
35087: PUSH
35088: LD_INT 2
35090: NEG
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: EMPTY
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: LIST
35104: LIST
35105: LIST
35106: LIST
35107: LIST
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: LIST
35113: LIST
35114: LIST
35115: LIST
35116: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35117: LD_ADDR_VAR 0 54
35121: PUSH
35122: LD_INT 0
35124: PUSH
35125: LD_INT 0
35127: PUSH
35128: EMPTY
35129: LIST
35130: LIST
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 1
35137: NEG
35138: PUSH
35139: EMPTY
35140: LIST
35141: LIST
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: LD_INT 0
35148: PUSH
35149: EMPTY
35150: LIST
35151: LIST
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: LD_INT 1
35158: PUSH
35159: EMPTY
35160: LIST
35161: LIST
35162: PUSH
35163: LD_INT 0
35165: PUSH
35166: LD_INT 1
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: PUSH
35173: LD_INT 1
35175: NEG
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: EMPTY
35181: LIST
35182: LIST
35183: PUSH
35184: LD_INT 1
35186: NEG
35187: PUSH
35188: LD_INT 1
35190: NEG
35191: PUSH
35192: EMPTY
35193: LIST
35194: LIST
35195: PUSH
35196: LD_INT 1
35198: NEG
35199: PUSH
35200: LD_INT 2
35202: NEG
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 0
35210: PUSH
35211: LD_INT 2
35213: NEG
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 2
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 2
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 2
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: PUSH
35263: LD_INT 2
35265: PUSH
35266: EMPTY
35267: LIST
35268: LIST
35269: PUSH
35270: LD_INT 0
35272: PUSH
35273: LD_INT 2
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: NEG
35283: PUSH
35284: LD_INT 1
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: NEG
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: EMPTY
35299: LIST
35300: LIST
35301: PUSH
35302: LD_INT 2
35304: NEG
35305: PUSH
35306: LD_INT 1
35308: NEG
35309: PUSH
35310: EMPTY
35311: LIST
35312: LIST
35313: PUSH
35314: LD_INT 2
35316: NEG
35317: PUSH
35318: LD_INT 2
35320: NEG
35321: PUSH
35322: EMPTY
35323: LIST
35324: LIST
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35347: LD_ADDR_VAR 0 55
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 0
35357: PUSH
35358: EMPTY
35359: LIST
35360: LIST
35361: PUSH
35362: LD_INT 0
35364: PUSH
35365: LD_INT 1
35367: NEG
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: LD_INT 1
35375: PUSH
35376: LD_INT 0
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: PUSH
35383: LD_INT 1
35385: PUSH
35386: LD_INT 1
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 0
35395: PUSH
35396: LD_INT 1
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 1
35405: NEG
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 1
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 1
35428: NEG
35429: PUSH
35430: LD_INT 2
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 0
35440: PUSH
35441: LD_INT 2
35443: NEG
35444: PUSH
35445: EMPTY
35446: LIST
35447: LIST
35448: PUSH
35449: LD_INT 1
35451: PUSH
35452: LD_INT 1
35454: NEG
35455: PUSH
35456: EMPTY
35457: LIST
35458: LIST
35459: PUSH
35460: LD_INT 2
35462: PUSH
35463: LD_INT 0
35465: PUSH
35466: EMPTY
35467: LIST
35468: LIST
35469: PUSH
35470: LD_INT 2
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: PUSH
35483: LD_INT 2
35485: PUSH
35486: EMPTY
35487: LIST
35488: LIST
35489: PUSH
35490: LD_INT 1
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: EMPTY
35497: LIST
35498: LIST
35499: PUSH
35500: LD_INT 0
35502: PUSH
35503: LD_INT 2
35505: PUSH
35506: EMPTY
35507: LIST
35508: LIST
35509: PUSH
35510: LD_INT 1
35512: NEG
35513: PUSH
35514: LD_INT 1
35516: PUSH
35517: EMPTY
35518: LIST
35519: LIST
35520: PUSH
35521: LD_INT 2
35523: NEG
35524: PUSH
35525: LD_INT 0
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: LD_INT 1
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: LD_INT 2
35546: NEG
35547: PUSH
35548: LD_INT 2
35550: NEG
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35577: LD_ADDR_VAR 0 56
35581: PUSH
35582: LD_INT 0
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 0
35594: PUSH
35595: LD_INT 1
35597: NEG
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 1
35605: PUSH
35606: LD_INT 0
35608: PUSH
35609: EMPTY
35610: LIST
35611: LIST
35612: PUSH
35613: LD_INT 1
35615: PUSH
35616: LD_INT 1
35618: PUSH
35619: EMPTY
35620: LIST
35621: LIST
35622: PUSH
35623: LD_INT 0
35625: PUSH
35626: LD_INT 1
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: PUSH
35633: LD_INT 1
35635: NEG
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 1
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: LD_INT 2
35662: NEG
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: PUSH
35668: LD_INT 0
35670: PUSH
35671: LD_INT 2
35673: NEG
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 1
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 2
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 2
35702: PUSH
35703: LD_INT 1
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: LD_INT 2
35712: PUSH
35713: LD_INT 2
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: PUSH
35720: LD_INT 1
35722: PUSH
35723: LD_INT 2
35725: PUSH
35726: EMPTY
35727: LIST
35728: LIST
35729: PUSH
35730: LD_INT 0
35732: PUSH
35733: LD_INT 2
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: LD_INT 1
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 2
35753: NEG
35754: PUSH
35755: LD_INT 0
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 2
35764: NEG
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 2
35776: NEG
35777: PUSH
35778: LD_INT 2
35780: NEG
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35807: LD_ADDR_VAR 0 57
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: LD_INT 0
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 1
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 0
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: LD_INT 1
35848: PUSH
35849: EMPTY
35850: LIST
35851: LIST
35852: PUSH
35853: LD_INT 0
35855: PUSH
35856: LD_INT 1
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: LD_INT 0
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: LD_INT 2
35892: NEG
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 0
35900: PUSH
35901: LD_INT 2
35903: NEG
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: LD_INT 1
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: LD_INT 2
35922: PUSH
35923: LD_INT 0
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: PUSH
35930: LD_INT 2
35932: PUSH
35933: LD_INT 1
35935: PUSH
35936: EMPTY
35937: LIST
35938: LIST
35939: PUSH
35940: LD_INT 2
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 2
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 0
35962: PUSH
35963: LD_INT 2
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 1
35972: NEG
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 2
35983: NEG
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: LD_INT 2
36006: NEG
36007: PUSH
36008: LD_INT 2
36010: NEG
36011: PUSH
36012: EMPTY
36013: LIST
36014: LIST
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: LIST
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36037: LD_ADDR_VAR 0 58
36041: PUSH
36042: LD_INT 0
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 0
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: EMPTY
36060: LIST
36061: LIST
36062: PUSH
36063: LD_INT 1
36065: PUSH
36066: LD_INT 0
36068: PUSH
36069: EMPTY
36070: LIST
36071: LIST
36072: PUSH
36073: LD_INT 1
36075: PUSH
36076: LD_INT 1
36078: PUSH
36079: EMPTY
36080: LIST
36081: LIST
36082: PUSH
36083: LD_INT 0
36085: PUSH
36086: LD_INT 1
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: LD_INT 0
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: LD_INT 1
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 1
36118: NEG
36119: PUSH
36120: LD_INT 2
36122: NEG
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 0
36130: PUSH
36131: LD_INT 2
36133: NEG
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 1
36141: PUSH
36142: LD_INT 1
36144: NEG
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: LD_INT 2
36162: PUSH
36163: LD_INT 1
36165: PUSH
36166: EMPTY
36167: LIST
36168: LIST
36169: PUSH
36170: LD_INT 2
36172: PUSH
36173: LD_INT 2
36175: PUSH
36176: EMPTY
36177: LIST
36178: LIST
36179: PUSH
36180: LD_INT 1
36182: PUSH
36183: LD_INT 2
36185: PUSH
36186: EMPTY
36187: LIST
36188: LIST
36189: PUSH
36190: LD_INT 0
36192: PUSH
36193: LD_INT 2
36195: PUSH
36196: EMPTY
36197: LIST
36198: LIST
36199: PUSH
36200: LD_INT 1
36202: NEG
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: LD_INT 2
36213: NEG
36214: PUSH
36215: LD_INT 0
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 2
36224: NEG
36225: PUSH
36226: LD_INT 1
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 2
36236: NEG
36237: PUSH
36238: LD_INT 2
36240: NEG
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36267: LD_ADDR_VAR 0 59
36271: PUSH
36272: LD_INT 0
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 0
36284: PUSH
36285: LD_INT 1
36287: NEG
36288: PUSH
36289: EMPTY
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 1
36295: PUSH
36296: LD_INT 0
36298: PUSH
36299: EMPTY
36300: LIST
36301: LIST
36302: PUSH
36303: LD_INT 1
36305: PUSH
36306: LD_INT 1
36308: PUSH
36309: EMPTY
36310: LIST
36311: LIST
36312: PUSH
36313: LD_INT 0
36315: PUSH
36316: LD_INT 1
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: NEG
36326: PUSH
36327: LD_INT 0
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: LD_INT 1
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36355: LD_ADDR_VAR 0 60
36359: PUSH
36360: LD_INT 0
36362: PUSH
36363: LD_INT 0
36365: PUSH
36366: EMPTY
36367: LIST
36368: LIST
36369: PUSH
36370: LD_INT 0
36372: PUSH
36373: LD_INT 1
36375: NEG
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: LD_INT 0
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 1
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 0
36403: PUSH
36404: LD_INT 1
36406: PUSH
36407: EMPTY
36408: LIST
36409: LIST
36410: PUSH
36411: LD_INT 1
36413: NEG
36414: PUSH
36415: LD_INT 0
36417: PUSH
36418: EMPTY
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 1
36424: NEG
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: EMPTY
36435: LIST
36436: LIST
36437: LIST
36438: LIST
36439: LIST
36440: LIST
36441: LIST
36442: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36443: LD_ADDR_VAR 0 61
36447: PUSH
36448: LD_INT 0
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 0
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 1
36471: PUSH
36472: LD_INT 0
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: PUSH
36479: LD_INT 1
36481: PUSH
36482: LD_INT 1
36484: PUSH
36485: EMPTY
36486: LIST
36487: LIST
36488: PUSH
36489: LD_INT 0
36491: PUSH
36492: LD_INT 1
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: LD_INT 0
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: NEG
36513: PUSH
36514: LD_INT 1
36516: NEG
36517: PUSH
36518: EMPTY
36519: LIST
36520: LIST
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36531: LD_ADDR_VAR 0 62
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 0
36541: PUSH
36542: EMPTY
36543: LIST
36544: LIST
36545: PUSH
36546: LD_INT 0
36548: PUSH
36549: LD_INT 1
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: LD_INT 0
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: LD_INT 0
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 1
36600: NEG
36601: PUSH
36602: LD_INT 1
36604: NEG
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36619: LD_ADDR_VAR 0 63
36623: PUSH
36624: LD_INT 0
36626: PUSH
36627: LD_INT 0
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 1
36639: NEG
36640: PUSH
36641: EMPTY
36642: LIST
36643: LIST
36644: PUSH
36645: LD_INT 1
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: PUSH
36658: LD_INT 1
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 0
36667: PUSH
36668: LD_INT 1
36670: PUSH
36671: EMPTY
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: LD_INT 0
36681: PUSH
36682: EMPTY
36683: LIST
36684: LIST
36685: PUSH
36686: LD_INT 1
36688: NEG
36689: PUSH
36690: LD_INT 1
36692: NEG
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: PUSH
36698: EMPTY
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
36707: LD_ADDR_VAR 0 64
36711: PUSH
36712: LD_INT 0
36714: PUSH
36715: LD_INT 0
36717: PUSH
36718: EMPTY
36719: LIST
36720: LIST
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: PUSH
36736: LD_INT 0
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 1
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 0
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 1
36776: NEG
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: ST_TO_ADDR
// end ; 1 :
36795: GO 42692
36797: LD_INT 1
36799: DOUBLE
36800: EQUAL
36801: IFTRUE 36805
36803: GO 39428
36805: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36806: LD_ADDR_VAR 0 11
36810: PUSH
36811: LD_INT 1
36813: NEG
36814: PUSH
36815: LD_INT 3
36817: NEG
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 0
36825: PUSH
36826: LD_INT 3
36828: NEG
36829: PUSH
36830: EMPTY
36831: LIST
36832: LIST
36833: PUSH
36834: LD_INT 1
36836: PUSH
36837: LD_INT 2
36839: NEG
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: LIST
36849: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36850: LD_ADDR_VAR 0 12
36854: PUSH
36855: LD_INT 2
36857: PUSH
36858: LD_INT 1
36860: NEG
36861: PUSH
36862: EMPTY
36863: LIST
36864: LIST
36865: PUSH
36866: LD_INT 3
36868: PUSH
36869: LD_INT 0
36871: PUSH
36872: EMPTY
36873: LIST
36874: LIST
36875: PUSH
36876: LD_INT 3
36878: PUSH
36879: LD_INT 1
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: LIST
36890: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36891: LD_ADDR_VAR 0 13
36895: PUSH
36896: LD_INT 3
36898: PUSH
36899: LD_INT 2
36901: PUSH
36902: EMPTY
36903: LIST
36904: LIST
36905: PUSH
36906: LD_INT 3
36908: PUSH
36909: LD_INT 3
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: LD_INT 3
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: LIST
36930: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36931: LD_ADDR_VAR 0 14
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 3
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 0
36948: PUSH
36949: LD_INT 3
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 1
36958: NEG
36959: PUSH
36960: LD_INT 2
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: EMPTY
36968: LIST
36969: LIST
36970: LIST
36971: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36972: LD_ADDR_VAR 0 15
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: LD_INT 1
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 3
36990: NEG
36991: PUSH
36992: LD_INT 0
36994: PUSH
36995: EMPTY
36996: LIST
36997: LIST
36998: PUSH
36999: LD_INT 3
37001: NEG
37002: PUSH
37003: LD_INT 1
37005: NEG
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: EMPTY
37012: LIST
37013: LIST
37014: LIST
37015: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37016: LD_ADDR_VAR 0 16
37020: PUSH
37021: LD_INT 2
37023: NEG
37024: PUSH
37025: LD_INT 3
37027: NEG
37028: PUSH
37029: EMPTY
37030: LIST
37031: LIST
37032: PUSH
37033: LD_INT 3
37035: NEG
37036: PUSH
37037: LD_INT 2
37039: NEG
37040: PUSH
37041: EMPTY
37042: LIST
37043: LIST
37044: PUSH
37045: LD_INT 3
37047: NEG
37048: PUSH
37049: LD_INT 3
37051: NEG
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: EMPTY
37058: LIST
37059: LIST
37060: LIST
37061: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37062: LD_ADDR_VAR 0 17
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 3
37073: NEG
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 3
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: LD_INT 2
37095: NEG
37096: PUSH
37097: EMPTY
37098: LIST
37099: LIST
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: LIST
37105: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37106: LD_ADDR_VAR 0 18
37110: PUSH
37111: LD_INT 2
37113: PUSH
37114: LD_INT 1
37116: NEG
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: LD_INT 3
37124: PUSH
37125: LD_INT 0
37127: PUSH
37128: EMPTY
37129: LIST
37130: LIST
37131: PUSH
37132: LD_INT 3
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37147: LD_ADDR_VAR 0 19
37151: PUSH
37152: LD_INT 3
37154: PUSH
37155: LD_INT 2
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 3
37164: PUSH
37165: LD_INT 3
37167: PUSH
37168: EMPTY
37169: LIST
37170: LIST
37171: PUSH
37172: LD_INT 2
37174: PUSH
37175: LD_INT 3
37177: PUSH
37178: EMPTY
37179: LIST
37180: LIST
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: LIST
37186: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37187: LD_ADDR_VAR 0 20
37191: PUSH
37192: LD_INT 1
37194: PUSH
37195: LD_INT 3
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 0
37204: PUSH
37205: LD_INT 3
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: NEG
37215: PUSH
37216: LD_INT 2
37218: PUSH
37219: EMPTY
37220: LIST
37221: LIST
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: LIST
37227: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37228: LD_ADDR_VAR 0 21
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: LD_INT 1
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 3
37246: NEG
37247: PUSH
37248: LD_INT 0
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 3
37257: NEG
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: EMPTY
37268: LIST
37269: LIST
37270: LIST
37271: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37272: LD_ADDR_VAR 0 22
37276: PUSH
37277: LD_INT 2
37279: NEG
37280: PUSH
37281: LD_INT 3
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 3
37291: NEG
37292: PUSH
37293: LD_INT 2
37295: NEG
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: PUSH
37301: LD_INT 3
37303: NEG
37304: PUSH
37305: LD_INT 3
37307: NEG
37308: PUSH
37309: EMPTY
37310: LIST
37311: LIST
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: LIST
37317: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
37318: LD_ADDR_VAR 0 23
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 3
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: LD_INT 4
37340: NEG
37341: PUSH
37342: EMPTY
37343: LIST
37344: LIST
37345: PUSH
37346: LD_INT 1
37348: PUSH
37349: LD_INT 3
37351: NEG
37352: PUSH
37353: EMPTY
37354: LIST
37355: LIST
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: LIST
37361: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
37362: LD_ADDR_VAR 0 24
37366: PUSH
37367: LD_INT 3
37369: PUSH
37370: LD_INT 0
37372: PUSH
37373: EMPTY
37374: LIST
37375: LIST
37376: PUSH
37377: LD_INT 3
37379: PUSH
37380: LD_INT 1
37382: NEG
37383: PUSH
37384: EMPTY
37385: LIST
37386: LIST
37387: PUSH
37388: LD_INT 4
37390: PUSH
37391: LD_INT 1
37393: PUSH
37394: EMPTY
37395: LIST
37396: LIST
37397: PUSH
37398: EMPTY
37399: LIST
37400: LIST
37401: LIST
37402: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
37403: LD_ADDR_VAR 0 25
37407: PUSH
37408: LD_INT 3
37410: PUSH
37411: LD_INT 3
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 4
37420: PUSH
37421: LD_INT 3
37423: PUSH
37424: EMPTY
37425: LIST
37426: LIST
37427: PUSH
37428: LD_INT 3
37430: PUSH
37431: LD_INT 4
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: LIST
37442: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
37443: LD_ADDR_VAR 0 26
37447: PUSH
37448: LD_INT 0
37450: PUSH
37451: LD_INT 3
37453: PUSH
37454: EMPTY
37455: LIST
37456: LIST
37457: PUSH
37458: LD_INT 1
37460: PUSH
37461: LD_INT 4
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 1
37470: NEG
37471: PUSH
37472: LD_INT 3
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: EMPTY
37480: LIST
37481: LIST
37482: LIST
37483: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
37484: LD_ADDR_VAR 0 27
37488: PUSH
37489: LD_INT 3
37491: NEG
37492: PUSH
37493: LD_INT 0
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 3
37502: NEG
37503: PUSH
37504: LD_INT 1
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 4
37513: NEG
37514: PUSH
37515: LD_INT 1
37517: NEG
37518: PUSH
37519: EMPTY
37520: LIST
37521: LIST
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: LIST
37527: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
37528: LD_ADDR_VAR 0 28
37532: PUSH
37533: LD_INT 3
37535: NEG
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 3
37547: NEG
37548: PUSH
37549: LD_INT 4
37551: NEG
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 4
37559: NEG
37560: PUSH
37561: LD_INT 3
37563: NEG
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: LIST
37573: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
37574: LD_ADDR_VAR 0 29
37578: PUSH
37579: LD_INT 1
37581: NEG
37582: PUSH
37583: LD_INT 3
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 3
37596: NEG
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: NEG
37608: PUSH
37609: EMPTY
37610: LIST
37611: LIST
37612: PUSH
37613: LD_INT 1
37615: NEG
37616: PUSH
37617: LD_INT 4
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 0
37627: PUSH
37628: LD_INT 4
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 3
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: NEG
37650: PUSH
37651: LD_INT 5
37653: NEG
37654: PUSH
37655: EMPTY
37656: LIST
37657: LIST
37658: PUSH
37659: LD_INT 0
37661: PUSH
37662: LD_INT 5
37664: NEG
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 1
37672: PUSH
37673: LD_INT 4
37675: NEG
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 1
37683: NEG
37684: PUSH
37685: LD_INT 6
37687: NEG
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: LD_INT 0
37695: PUSH
37696: LD_INT 6
37698: NEG
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 1
37706: PUSH
37707: LD_INT 5
37709: NEG
37710: PUSH
37711: EMPTY
37712: LIST
37713: LIST
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: LIST
37728: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
37729: LD_ADDR_VAR 0 30
37733: PUSH
37734: LD_INT 2
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 3
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 3
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: EMPTY
37762: LIST
37763: LIST
37764: PUSH
37765: LD_INT 3
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 4
37778: PUSH
37779: LD_INT 0
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 4
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 4
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 5
37809: PUSH
37810: LD_INT 0
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_INT 5
37819: PUSH
37820: LD_INT 1
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 5
37829: PUSH
37830: LD_INT 1
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 6
37840: PUSH
37841: LD_INT 0
37843: PUSH
37844: EMPTY
37845: LIST
37846: LIST
37847: PUSH
37848: LD_INT 6
37850: PUSH
37851: LD_INT 1
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: EMPTY
37859: LIST
37860: LIST
37861: LIST
37862: LIST
37863: LIST
37864: LIST
37865: LIST
37866: LIST
37867: LIST
37868: LIST
37869: LIST
37870: LIST
37871: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
37872: LD_ADDR_VAR 0 31
37876: PUSH
37877: LD_INT 3
37879: PUSH
37880: LD_INT 2
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 3
37889: PUSH
37890: LD_INT 3
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: PUSH
37900: LD_INT 3
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 4
37909: PUSH
37910: LD_INT 3
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 4
37919: PUSH
37920: LD_INT 4
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 3
37929: PUSH
37930: LD_INT 4
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 5
37939: PUSH
37940: LD_INT 4
37942: PUSH
37943: EMPTY
37944: LIST
37945: LIST
37946: PUSH
37947: LD_INT 5
37949: PUSH
37950: LD_INT 5
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 4
37959: PUSH
37960: LD_INT 5
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 6
37969: PUSH
37970: LD_INT 5
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 6
37979: PUSH
37980: LD_INT 6
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 5
37989: PUSH
37990: LD_INT 6
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
38011: LD_ADDR_VAR 0 32
38015: PUSH
38016: LD_INT 1
38018: PUSH
38019: LD_INT 3
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 0
38028: PUSH
38029: LD_INT 3
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: LD_INT 2
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: LD_INT 4
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 0
38059: PUSH
38060: LD_INT 4
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 1
38069: NEG
38070: PUSH
38071: LD_INT 3
38073: PUSH
38074: EMPTY
38075: LIST
38076: LIST
38077: PUSH
38078: LD_INT 1
38080: PUSH
38081: LD_INT 5
38083: PUSH
38084: EMPTY
38085: LIST
38086: LIST
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: LD_INT 5
38093: PUSH
38094: EMPTY
38095: LIST
38096: LIST
38097: PUSH
38098: LD_INT 1
38100: NEG
38101: PUSH
38102: LD_INT 4
38104: PUSH
38105: EMPTY
38106: LIST
38107: LIST
38108: PUSH
38109: LD_INT 1
38111: PUSH
38112: LD_INT 6
38114: PUSH
38115: EMPTY
38116: LIST
38117: LIST
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 6
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 1
38131: NEG
38132: PUSH
38133: LD_INT 5
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
38154: LD_ADDR_VAR 0 33
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 3
38172: NEG
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 3
38183: NEG
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 3
38195: NEG
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 4
38206: NEG
38207: PUSH
38208: LD_INT 0
38210: PUSH
38211: EMPTY
38212: LIST
38213: LIST
38214: PUSH
38215: LD_INT 4
38217: NEG
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 4
38229: NEG
38230: PUSH
38231: LD_INT 1
38233: PUSH
38234: EMPTY
38235: LIST
38236: LIST
38237: PUSH
38238: LD_INT 5
38240: NEG
38241: PUSH
38242: LD_INT 0
38244: PUSH
38245: EMPTY
38246: LIST
38247: LIST
38248: PUSH
38249: LD_INT 5
38251: NEG
38252: PUSH
38253: LD_INT 1
38255: NEG
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 5
38263: NEG
38264: PUSH
38265: LD_INT 1
38267: PUSH
38268: EMPTY
38269: LIST
38270: LIST
38271: PUSH
38272: LD_INT 6
38274: NEG
38275: PUSH
38276: LD_INT 0
38278: PUSH
38279: EMPTY
38280: LIST
38281: LIST
38282: PUSH
38283: LD_INT 6
38285: NEG
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: EMPTY
38292: LIST
38293: LIST
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
38309: LD_ADDR_VAR 0 34
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: LD_INT 3
38320: NEG
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 3
38328: NEG
38329: PUSH
38330: LD_INT 2
38332: NEG
38333: PUSH
38334: EMPTY
38335: LIST
38336: LIST
38337: PUSH
38338: LD_INT 3
38340: NEG
38341: PUSH
38342: LD_INT 3
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 3
38352: NEG
38353: PUSH
38354: LD_INT 4
38356: NEG
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 4
38364: NEG
38365: PUSH
38366: LD_INT 3
38368: NEG
38369: PUSH
38370: EMPTY
38371: LIST
38372: LIST
38373: PUSH
38374: LD_INT 4
38376: NEG
38377: PUSH
38378: LD_INT 4
38380: NEG
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 4
38388: NEG
38389: PUSH
38390: LD_INT 5
38392: NEG
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 5
38400: NEG
38401: PUSH
38402: LD_INT 4
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 5
38412: NEG
38413: PUSH
38414: LD_INT 5
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 5
38424: NEG
38425: PUSH
38426: LD_INT 6
38428: NEG
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 6
38436: NEG
38437: PUSH
38438: LD_INT 5
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 6
38448: NEG
38449: PUSH
38450: LD_INT 6
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
38472: LD_ADDR_VAR 0 41
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: NEG
38483: PUSH
38484: EMPTY
38485: LIST
38486: LIST
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: LD_INT 3
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: LIST
38515: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
38516: LD_ADDR_VAR 0 42
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: LD_INT 0
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 3
38544: PUSH
38545: LD_INT 1
38547: PUSH
38548: EMPTY
38549: LIST
38550: LIST
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: LIST
38556: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
38557: LD_ADDR_VAR 0 43
38561: PUSH
38562: LD_INT 2
38564: PUSH
38565: LD_INT 2
38567: PUSH
38568: EMPTY
38569: LIST
38570: LIST
38571: PUSH
38572: LD_INT 3
38574: PUSH
38575: LD_INT 2
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: LIST
38596: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
38597: LD_ADDR_VAR 0 44
38601: PUSH
38602: LD_INT 0
38604: PUSH
38605: LD_INT 2
38607: PUSH
38608: EMPTY
38609: LIST
38610: LIST
38611: PUSH
38612: LD_INT 1
38614: PUSH
38615: LD_INT 3
38617: PUSH
38618: EMPTY
38619: LIST
38620: LIST
38621: PUSH
38622: LD_INT 1
38624: NEG
38625: PUSH
38626: LD_INT 2
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: LIST
38637: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38638: LD_ADDR_VAR 0 45
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: LD_INT 0
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 2
38656: NEG
38657: PUSH
38658: LD_INT 1
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 3
38667: NEG
38668: PUSH
38669: LD_INT 1
38671: NEG
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: EMPTY
38678: LIST
38679: LIST
38680: LIST
38681: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
38682: LD_ADDR_VAR 0 46
38686: PUSH
38687: LD_INT 2
38689: NEG
38690: PUSH
38691: LD_INT 2
38693: NEG
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PUSH
38699: LD_INT 2
38701: NEG
38702: PUSH
38703: LD_INT 3
38705: NEG
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 3
38713: NEG
38714: PUSH
38715: LD_INT 2
38717: NEG
38718: PUSH
38719: EMPTY
38720: LIST
38721: LIST
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: LIST
38727: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
38728: LD_ADDR_VAR 0 47
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: LD_INT 3
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 1
38747: NEG
38748: PUSH
38749: LD_INT 3
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38761: LD_ADDR_VAR 0 48
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
38792: LD_ADDR_VAR 0 49
38796: PUSH
38797: LD_INT 3
38799: PUSH
38800: LD_INT 1
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 3
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
38821: LD_ADDR_VAR 0 50
38825: PUSH
38826: LD_INT 2
38828: PUSH
38829: LD_INT 3
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 1
38838: PUSH
38839: LD_INT 3
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38850: LD_ADDR_VAR 0 51
38854: PUSH
38855: LD_INT 1
38857: NEG
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: NEG
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: EMPTY
38878: LIST
38879: LIST
38880: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38881: LD_ADDR_VAR 0 52
38885: PUSH
38886: LD_INT 3
38888: NEG
38889: PUSH
38890: LD_INT 1
38892: NEG
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 3
38900: NEG
38901: PUSH
38902: LD_INT 2
38904: NEG
38905: PUSH
38906: EMPTY
38907: LIST
38908: LIST
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38914: LD_ADDR_VAR 0 53
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: LD_INT 3
38925: NEG
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 0
38933: PUSH
38934: LD_INT 3
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 2
38947: NEG
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: LIST
38957: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38958: LD_ADDR_VAR 0 54
38962: PUSH
38963: LD_INT 2
38965: PUSH
38966: LD_INT 1
38968: NEG
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 3
38976: PUSH
38977: LD_INT 0
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 3
38986: PUSH
38987: LD_INT 1
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: LIST
38998: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38999: LD_ADDR_VAR 0 55
39003: PUSH
39004: LD_INT 3
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: LD_INT 3
39016: PUSH
39017: LD_INT 3
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: LD_INT 3
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
39039: LD_ADDR_VAR 0 56
39043: PUSH
39044: LD_INT 1
39046: PUSH
39047: LD_INT 3
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 0
39056: PUSH
39057: LD_INT 3
39059: PUSH
39060: EMPTY
39061: LIST
39062: LIST
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: LD_INT 2
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: LIST
39079: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
39080: LD_ADDR_VAR 0 57
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: LD_INT 1
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 3
39098: NEG
39099: PUSH
39100: LD_INT 0
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 3
39109: NEG
39110: PUSH
39111: LD_INT 1
39113: NEG
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: LIST
39123: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39124: LD_ADDR_VAR 0 58
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: LD_INT 3
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 3
39143: NEG
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 3
39155: NEG
39156: PUSH
39157: LD_INT 3
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: LIST
39169: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
39170: LD_ADDR_VAR 0 59
39174: PUSH
39175: LD_INT 1
39177: NEG
39178: PUSH
39179: LD_INT 2
39181: NEG
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: LD_INT 2
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 1
39200: PUSH
39201: LD_INT 1
39203: NEG
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
39214: LD_ADDR_VAR 0 60
39218: PUSH
39219: LD_INT 1
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 2
39242: PUSH
39243: LD_INT 1
39245: PUSH
39246: EMPTY
39247: LIST
39248: LIST
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: LIST
39254: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
39255: LD_ADDR_VAR 0 61
39259: PUSH
39260: LD_INT 2
39262: PUSH
39263: LD_INT 1
39265: PUSH
39266: EMPTY
39267: LIST
39268: LIST
39269: PUSH
39270: LD_INT 2
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: EMPTY
39277: LIST
39278: LIST
39279: PUSH
39280: LD_INT 1
39282: PUSH
39283: LD_INT 2
39285: PUSH
39286: EMPTY
39287: LIST
39288: LIST
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: LIST
39294: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
39295: LD_ADDR_VAR 0 62
39299: PUSH
39300: LD_INT 1
39302: PUSH
39303: LD_INT 2
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: LD_INT 2
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: NEG
39323: PUSH
39324: LD_INT 1
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: LIST
39335: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
39336: LD_ADDR_VAR 0 63
39340: PUSH
39341: LD_INT 1
39343: NEG
39344: PUSH
39345: LD_INT 1
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: LD_INT 2
39354: NEG
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: NEG
39366: PUSH
39367: LD_INT 1
39369: NEG
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: LIST
39379: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39380: LD_ADDR_VAR 0 64
39384: PUSH
39385: LD_INT 1
39387: NEG
39388: PUSH
39389: LD_INT 2
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 2
39399: NEG
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: NEG
39412: PUSH
39413: LD_INT 2
39415: NEG
39416: PUSH
39417: EMPTY
39418: LIST
39419: LIST
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: LIST
39425: ST_TO_ADDR
// end ; 2 :
39426: GO 42692
39428: LD_INT 2
39430: DOUBLE
39431: EQUAL
39432: IFTRUE 39436
39434: GO 42691
39436: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
39437: LD_ADDR_VAR 0 29
39441: PUSH
39442: LD_INT 4
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 4
39454: PUSH
39455: LD_INT 1
39457: NEG
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 5
39465: PUSH
39466: LD_INT 0
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 5
39475: PUSH
39476: LD_INT 1
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 4
39485: PUSH
39486: LD_INT 1
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 3
39495: PUSH
39496: LD_INT 0
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 3
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 3
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 5
39527: PUSH
39528: LD_INT 2
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 3
39537: PUSH
39538: LD_INT 3
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 3
39547: PUSH
39548: LD_INT 2
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 4
39557: PUSH
39558: LD_INT 3
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 4
39567: PUSH
39568: LD_INT 4
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 3
39577: PUSH
39578: LD_INT 4
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 2
39587: PUSH
39588: LD_INT 3
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 2
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 4
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 2
39617: PUSH
39618: LD_INT 4
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 4
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 3
39640: PUSH
39641: EMPTY
39642: LIST
39643: LIST
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: LD_INT 4
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 1
39657: PUSH
39658: LD_INT 5
39660: PUSH
39661: EMPTY
39662: LIST
39663: LIST
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: LD_INT 5
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 4
39681: PUSH
39682: EMPTY
39683: LIST
39684: LIST
39685: PUSH
39686: LD_INT 1
39688: NEG
39689: PUSH
39690: LD_INT 3
39692: PUSH
39693: EMPTY
39694: LIST
39695: LIST
39696: PUSH
39697: LD_INT 2
39699: PUSH
39700: LD_INT 5
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: LD_INT 3
39713: PUSH
39714: EMPTY
39715: LIST
39716: LIST
39717: PUSH
39718: LD_INT 3
39720: NEG
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 3
39731: NEG
39732: PUSH
39733: LD_INT 1
39735: NEG
39736: PUSH
39737: EMPTY
39738: LIST
39739: LIST
39740: PUSH
39741: LD_INT 2
39743: NEG
39744: PUSH
39745: LD_INT 0
39747: PUSH
39748: EMPTY
39749: LIST
39750: LIST
39751: PUSH
39752: LD_INT 2
39754: NEG
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 3
39765: NEG
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 4
39776: NEG
39777: PUSH
39778: LD_INT 0
39780: PUSH
39781: EMPTY
39782: LIST
39783: LIST
39784: PUSH
39785: LD_INT 4
39787: NEG
39788: PUSH
39789: LD_INT 1
39791: NEG
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 4
39799: NEG
39800: PUSH
39801: LD_INT 2
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 2
39811: NEG
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 4
39822: NEG
39823: PUSH
39824: LD_INT 4
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 4
39834: NEG
39835: PUSH
39836: LD_INT 5
39838: NEG
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 3
39846: NEG
39847: PUSH
39848: LD_INT 4
39850: NEG
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PUSH
39856: LD_INT 3
39858: NEG
39859: PUSH
39860: LD_INT 3
39862: NEG
39863: PUSH
39864: EMPTY
39865: LIST
39866: LIST
39867: PUSH
39868: LD_INT 4
39870: NEG
39871: PUSH
39872: LD_INT 3
39874: NEG
39875: PUSH
39876: EMPTY
39877: LIST
39878: LIST
39879: PUSH
39880: LD_INT 5
39882: NEG
39883: PUSH
39884: LD_INT 4
39886: NEG
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 5
39894: NEG
39895: PUSH
39896: LD_INT 5
39898: NEG
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 3
39906: NEG
39907: PUSH
39908: LD_INT 5
39910: NEG
39911: PUSH
39912: EMPTY
39913: LIST
39914: LIST
39915: PUSH
39916: LD_INT 5
39918: NEG
39919: PUSH
39920: LD_INT 3
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: LIST
39950: LIST
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
39975: LD_ADDR_VAR 0 30
39979: PUSH
39980: LD_INT 4
39982: PUSH
39983: LD_INT 4
39985: PUSH
39986: EMPTY
39987: LIST
39988: LIST
39989: PUSH
39990: LD_INT 4
39992: PUSH
39993: LD_INT 3
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 5
40002: PUSH
40003: LD_INT 4
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 5
40012: PUSH
40013: LD_INT 5
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 4
40022: PUSH
40023: LD_INT 5
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 3
40032: PUSH
40033: LD_INT 4
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: LD_INT 3
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 5
40052: PUSH
40053: LD_INT 3
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 3
40062: PUSH
40063: LD_INT 5
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 3
40075: PUSH
40076: EMPTY
40077: LIST
40078: LIST
40079: PUSH
40080: LD_INT 0
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: EMPTY
40087: LIST
40088: LIST
40089: PUSH
40090: LD_INT 1
40092: PUSH
40093: LD_INT 3
40095: PUSH
40096: EMPTY
40097: LIST
40098: LIST
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: LD_INT 4
40105: PUSH
40106: EMPTY
40107: LIST
40108: LIST
40109: PUSH
40110: LD_INT 0
40112: PUSH
40113: LD_INT 4
40115: PUSH
40116: EMPTY
40117: LIST
40118: LIST
40119: PUSH
40120: LD_INT 1
40122: NEG
40123: PUSH
40124: LD_INT 3
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: LD_INT 2
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: PUSH
40145: LD_INT 4
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 2
40154: NEG
40155: PUSH
40156: LD_INT 2
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 4
40165: NEG
40166: PUSH
40167: LD_INT 0
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 4
40176: NEG
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 3
40188: NEG
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 3
40199: NEG
40200: PUSH
40201: LD_INT 1
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 4
40210: NEG
40211: PUSH
40212: LD_INT 1
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 5
40221: NEG
40222: PUSH
40223: LD_INT 0
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 5
40232: NEG
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 5
40244: NEG
40245: PUSH
40246: LD_INT 2
40248: NEG
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 3
40256: NEG
40257: PUSH
40258: LD_INT 2
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 3
40267: NEG
40268: PUSH
40269: LD_INT 3
40271: NEG
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PUSH
40277: LD_INT 3
40279: NEG
40280: PUSH
40281: LD_INT 4
40283: NEG
40284: PUSH
40285: EMPTY
40286: LIST
40287: LIST
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: LD_INT 3
40295: NEG
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 2
40303: NEG
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 3
40315: NEG
40316: PUSH
40317: LD_INT 2
40319: NEG
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 4
40327: NEG
40328: PUSH
40329: LD_INT 3
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 4
40339: NEG
40340: PUSH
40341: LD_INT 4
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 2
40351: NEG
40352: PUSH
40353: LD_INT 4
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 4
40363: NEG
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: PUSH
40373: LD_INT 0
40375: PUSH
40376: LD_INT 4
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 5
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 4
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: PUSH
40409: LD_INT 3
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 3
40422: NEG
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: LD_INT 4
40434: NEG
40435: PUSH
40436: EMPTY
40437: LIST
40438: LIST
40439: PUSH
40440: LD_INT 1
40442: NEG
40443: PUSH
40444: LD_INT 5
40446: NEG
40447: PUSH
40448: EMPTY
40449: LIST
40450: LIST
40451: PUSH
40452: LD_INT 2
40454: PUSH
40455: LD_INT 3
40457: NEG
40458: PUSH
40459: EMPTY
40460: LIST
40461: LIST
40462: PUSH
40463: LD_INT 2
40465: NEG
40466: PUSH
40467: LD_INT 5
40469: NEG
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: EMPTY
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: LIST
40488: LIST
40489: LIST
40490: LIST
40491: LIST
40492: LIST
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: LIST
40503: LIST
40504: LIST
40505: LIST
40506: LIST
40507: LIST
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
40522: LD_ADDR_VAR 0 31
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 4
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 3
40542: PUSH
40543: EMPTY
40544: LIST
40545: LIST
40546: PUSH
40547: LD_INT 1
40549: PUSH
40550: LD_INT 4
40552: PUSH
40553: EMPTY
40554: LIST
40555: LIST
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: LD_INT 5
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 0
40569: PUSH
40570: LD_INT 5
40572: PUSH
40573: EMPTY
40574: LIST
40575: LIST
40576: PUSH
40577: LD_INT 1
40579: NEG
40580: PUSH
40581: LD_INT 4
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: LD_INT 3
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 2
40601: PUSH
40602: LD_INT 5
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 2
40611: NEG
40612: PUSH
40613: LD_INT 3
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 3
40622: NEG
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 3
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 2
40645: NEG
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 2
40656: NEG
40657: PUSH
40658: LD_INT 1
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: PUSH
40665: LD_INT 3
40667: NEG
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 4
40678: NEG
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 4
40689: NEG
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 4
40701: NEG
40702: PUSH
40703: LD_INT 2
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: LD_INT 2
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 4
40724: NEG
40725: PUSH
40726: LD_INT 4
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 4
40736: NEG
40737: PUSH
40738: LD_INT 5
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 3
40748: NEG
40749: PUSH
40750: LD_INT 4
40752: NEG
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 3
40760: NEG
40761: PUSH
40762: LD_INT 3
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 4
40772: NEG
40773: PUSH
40774: LD_INT 3
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 5
40784: NEG
40785: PUSH
40786: LD_INT 4
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 5
40796: NEG
40797: PUSH
40798: LD_INT 5
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 3
40808: NEG
40809: PUSH
40810: LD_INT 5
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 5
40820: NEG
40821: PUSH
40822: LD_INT 3
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 3
40835: NEG
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 0
40843: PUSH
40844: LD_INT 4
40846: NEG
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: LD_INT 3
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: LD_INT 2
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: LD_INT 3
40891: NEG
40892: PUSH
40893: EMPTY
40894: LIST
40895: LIST
40896: PUSH
40897: LD_INT 1
40899: NEG
40900: PUSH
40901: LD_INT 4
40903: NEG
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 2
40922: NEG
40923: PUSH
40924: LD_INT 4
40926: NEG
40927: PUSH
40928: EMPTY
40929: LIST
40930: LIST
40931: PUSH
40932: LD_INT 4
40934: PUSH
40935: LD_INT 0
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 4
40944: PUSH
40945: LD_INT 1
40947: NEG
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PUSH
40953: LD_INT 5
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 5
40965: PUSH
40966: LD_INT 1
40968: PUSH
40969: EMPTY
40970: LIST
40971: LIST
40972: PUSH
40973: LD_INT 4
40975: PUSH
40976: LD_INT 1
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 3
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 3
40995: PUSH
40996: LD_INT 1
40998: NEG
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 3
41006: PUSH
41007: LD_INT 2
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 5
41017: PUSH
41018: LD_INT 2
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: LIST
41029: LIST
41030: LIST
41031: LIST
41032: LIST
41033: LIST
41034: LIST
41035: LIST
41036: LIST
41037: LIST
41038: LIST
41039: LIST
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
41072: LD_ADDR_VAR 0 32
41076: PUSH
41077: LD_INT 4
41079: NEG
41080: PUSH
41081: LD_INT 0
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 4
41090: NEG
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 3
41102: NEG
41103: PUSH
41104: LD_INT 0
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 3
41113: NEG
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 4
41124: NEG
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 5
41135: NEG
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 5
41146: NEG
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 5
41158: NEG
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 3
41170: NEG
41171: PUSH
41172: LD_INT 2
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 3
41181: NEG
41182: PUSH
41183: LD_INT 3
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 3
41193: NEG
41194: PUSH
41195: LD_INT 4
41197: NEG
41198: PUSH
41199: EMPTY
41200: LIST
41201: LIST
41202: PUSH
41203: LD_INT 2
41205: NEG
41206: PUSH
41207: LD_INT 3
41209: NEG
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: NEG
41218: PUSH
41219: LD_INT 2
41221: NEG
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: PUSH
41227: LD_INT 3
41229: NEG
41230: PUSH
41231: LD_INT 2
41233: NEG
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 4
41241: NEG
41242: PUSH
41243: LD_INT 3
41245: NEG
41246: PUSH
41247: EMPTY
41248: LIST
41249: LIST
41250: PUSH
41251: LD_INT 4
41253: NEG
41254: PUSH
41255: LD_INT 4
41257: NEG
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 2
41265: NEG
41266: PUSH
41267: LD_INT 4
41269: NEG
41270: PUSH
41271: EMPTY
41272: LIST
41273: LIST
41274: PUSH
41275: LD_INT 4
41277: NEG
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 0
41289: PUSH
41290: LD_INT 4
41292: NEG
41293: PUSH
41294: EMPTY
41295: LIST
41296: LIST
41297: PUSH
41298: LD_INT 0
41300: PUSH
41301: LD_INT 5
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: PUSH
41312: LD_INT 4
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 1
41322: PUSH
41323: LD_INT 3
41325: NEG
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 3
41336: NEG
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: NEG
41345: PUSH
41346: LD_INT 4
41348: NEG
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 5
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: LD_INT 3
41371: NEG
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: NEG
41380: PUSH
41381: LD_INT 5
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 3
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 3
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 4
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 4
41422: PUSH
41423: LD_INT 1
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 3
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: LD_INT 0
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: PUSH
41450: LD_INT 2
41452: PUSH
41453: LD_INT 1
41455: NEG
41456: PUSH
41457: EMPTY
41458: LIST
41459: LIST
41460: PUSH
41461: LD_INT 2
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 4
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 4
41484: PUSH
41485: LD_INT 4
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: PUSH
41492: LD_INT 4
41494: PUSH
41495: LD_INT 3
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 5
41504: PUSH
41505: LD_INT 4
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 5
41514: PUSH
41515: LD_INT 5
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 4
41524: PUSH
41525: LD_INT 5
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 3
41534: PUSH
41535: LD_INT 4
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 3
41544: PUSH
41545: LD_INT 3
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 5
41554: PUSH
41555: LD_INT 3
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 3
41564: PUSH
41565: LD_INT 5
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: LIST
41576: LIST
41577: LIST
41578: LIST
41579: LIST
41580: LIST
41581: LIST
41582: LIST
41583: LIST
41584: LIST
41585: LIST
41586: LIST
41587: LIST
41588: LIST
41589: LIST
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: LIST
41597: LIST
41598: LIST
41599: LIST
41600: LIST
41601: LIST
41602: LIST
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: LIST
41613: LIST
41614: LIST
41615: LIST
41616: LIST
41617: LIST
41618: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
41619: LD_ADDR_VAR 0 33
41623: PUSH
41624: LD_INT 4
41626: NEG
41627: PUSH
41628: LD_INT 4
41630: NEG
41631: PUSH
41632: EMPTY
41633: LIST
41634: LIST
41635: PUSH
41636: LD_INT 4
41638: NEG
41639: PUSH
41640: LD_INT 5
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 3
41650: NEG
41651: PUSH
41652: LD_INT 4
41654: NEG
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 3
41662: NEG
41663: PUSH
41664: LD_INT 3
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 4
41674: NEG
41675: PUSH
41676: LD_INT 3
41678: NEG
41679: PUSH
41680: EMPTY
41681: LIST
41682: LIST
41683: PUSH
41684: LD_INT 5
41686: NEG
41687: PUSH
41688: LD_INT 4
41690: NEG
41691: PUSH
41692: EMPTY
41693: LIST
41694: LIST
41695: PUSH
41696: LD_INT 5
41698: NEG
41699: PUSH
41700: LD_INT 5
41702: NEG
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 3
41710: NEG
41711: PUSH
41712: LD_INT 5
41714: NEG
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 5
41722: NEG
41723: PUSH
41724: LD_INT 3
41726: NEG
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: LD_INT 3
41737: NEG
41738: PUSH
41739: EMPTY
41740: LIST
41741: LIST
41742: PUSH
41743: LD_INT 0
41745: PUSH
41746: LD_INT 4
41748: NEG
41749: PUSH
41750: EMPTY
41751: LIST
41752: LIST
41753: PUSH
41754: LD_INT 1
41756: PUSH
41757: LD_INT 3
41759: NEG
41760: PUSH
41761: EMPTY
41762: LIST
41763: LIST
41764: PUSH
41765: LD_INT 1
41767: PUSH
41768: LD_INT 2
41770: NEG
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: LD_INT 2
41781: NEG
41782: PUSH
41783: EMPTY
41784: LIST
41785: LIST
41786: PUSH
41787: LD_INT 1
41789: NEG
41790: PUSH
41791: LD_INT 3
41793: NEG
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: NEG
41802: PUSH
41803: LD_INT 4
41805: NEG
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 2
41813: PUSH
41814: LD_INT 2
41816: NEG
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: NEG
41825: PUSH
41826: LD_INT 4
41828: NEG
41829: PUSH
41830: EMPTY
41831: LIST
41832: LIST
41833: PUSH
41834: LD_INT 4
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: EMPTY
41841: LIST
41842: LIST
41843: PUSH
41844: LD_INT 4
41846: PUSH
41847: LD_INT 1
41849: NEG
41850: PUSH
41851: EMPTY
41852: LIST
41853: LIST
41854: PUSH
41855: LD_INT 5
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 5
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 4
41877: PUSH
41878: LD_INT 1
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 3
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 3
41897: PUSH
41898: LD_INT 1
41900: NEG
41901: PUSH
41902: EMPTY
41903: LIST
41904: LIST
41905: PUSH
41906: LD_INT 3
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 5
41919: PUSH
41920: LD_INT 2
41922: PUSH
41923: EMPTY
41924: LIST
41925: LIST
41926: PUSH
41927: LD_INT 3
41929: PUSH
41930: LD_INT 3
41932: PUSH
41933: EMPTY
41934: LIST
41935: LIST
41936: PUSH
41937: LD_INT 3
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: EMPTY
41944: LIST
41945: LIST
41946: PUSH
41947: LD_INT 4
41949: PUSH
41950: LD_INT 3
41952: PUSH
41953: EMPTY
41954: LIST
41955: LIST
41956: PUSH
41957: LD_INT 4
41959: PUSH
41960: LD_INT 4
41962: PUSH
41963: EMPTY
41964: LIST
41965: LIST
41966: PUSH
41967: LD_INT 3
41969: PUSH
41970: LD_INT 4
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 2
41979: PUSH
41980: LD_INT 3
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 2
41989: PUSH
41990: LD_INT 2
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 4
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: PUSH
42010: LD_INT 4
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 4
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 0
42029: PUSH
42030: LD_INT 3
42032: PUSH
42033: EMPTY
42034: LIST
42035: LIST
42036: PUSH
42037: LD_INT 1
42039: PUSH
42040: LD_INT 4
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: LD_INT 5
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 0
42059: PUSH
42060: LD_INT 5
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 1
42069: NEG
42070: PUSH
42071: LD_INT 4
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: NEG
42081: PUSH
42082: LD_INT 3
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: PUSH
42089: LD_INT 2
42091: PUSH
42092: LD_INT 5
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 2
42101: NEG
42102: PUSH
42103: LD_INT 3
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: LIST
42125: LIST
42126: LIST
42127: LIST
42128: LIST
42129: LIST
42130: LIST
42131: LIST
42132: LIST
42133: LIST
42134: LIST
42135: LIST
42136: LIST
42137: LIST
42138: LIST
42139: LIST
42140: LIST
42141: LIST
42142: LIST
42143: LIST
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
42157: LD_ADDR_VAR 0 34
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 4
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 0
42175: PUSH
42176: LD_INT 5
42178: NEG
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 4
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: LD_INT 3
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 0
42208: PUSH
42209: LD_INT 3
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 1
42219: NEG
42220: PUSH
42221: LD_INT 4
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 5
42235: NEG
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: LD_INT 3
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 2
42254: NEG
42255: PUSH
42256: LD_INT 5
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 3
42266: PUSH
42267: LD_INT 0
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 3
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 4
42287: PUSH
42288: LD_INT 0
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 4
42297: PUSH
42298: LD_INT 1
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 2
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 2
42327: PUSH
42328: LD_INT 1
42330: NEG
42331: PUSH
42332: EMPTY
42333: LIST
42334: LIST
42335: PUSH
42336: LD_INT 2
42338: PUSH
42339: LD_INT 2
42341: NEG
42342: PUSH
42343: EMPTY
42344: LIST
42345: LIST
42346: PUSH
42347: LD_INT 4
42349: PUSH
42350: LD_INT 2
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: PUSH
42357: LD_INT 4
42359: PUSH
42360: LD_INT 4
42362: PUSH
42363: EMPTY
42364: LIST
42365: LIST
42366: PUSH
42367: LD_INT 4
42369: PUSH
42370: LD_INT 3
42372: PUSH
42373: EMPTY
42374: LIST
42375: LIST
42376: PUSH
42377: LD_INT 5
42379: PUSH
42380: LD_INT 4
42382: PUSH
42383: EMPTY
42384: LIST
42385: LIST
42386: PUSH
42387: LD_INT 5
42389: PUSH
42390: LD_INT 5
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 4
42399: PUSH
42400: LD_INT 5
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 3
42409: PUSH
42410: LD_INT 4
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: LD_INT 3
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 5
42429: PUSH
42430: LD_INT 3
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: PUSH
42440: LD_INT 5
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 3
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: LD_INT 3
42472: PUSH
42473: EMPTY
42474: LIST
42475: LIST
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: LD_INT 4
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PUSH
42487: LD_INT 0
42489: PUSH
42490: LD_INT 4
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: PUSH
42497: LD_INT 1
42499: NEG
42500: PUSH
42501: LD_INT 3
42503: PUSH
42504: EMPTY
42505: LIST
42506: LIST
42507: PUSH
42508: LD_INT 1
42510: NEG
42511: PUSH
42512: LD_INT 2
42514: PUSH
42515: EMPTY
42516: LIST
42517: LIST
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: LD_INT 4
42524: PUSH
42525: EMPTY
42526: LIST
42527: LIST
42528: PUSH
42529: LD_INT 2
42531: NEG
42532: PUSH
42533: LD_INT 2
42535: PUSH
42536: EMPTY
42537: LIST
42538: LIST
42539: PUSH
42540: LD_INT 4
42542: NEG
42543: PUSH
42544: LD_INT 0
42546: PUSH
42547: EMPTY
42548: LIST
42549: LIST
42550: PUSH
42551: LD_INT 4
42553: NEG
42554: PUSH
42555: LD_INT 1
42557: NEG
42558: PUSH
42559: EMPTY
42560: LIST
42561: LIST
42562: PUSH
42563: LD_INT 3
42565: NEG
42566: PUSH
42567: LD_INT 0
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 3
42576: NEG
42577: PUSH
42578: LD_INT 1
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 4
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PUSH
42596: LD_INT 5
42598: NEG
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 5
42609: NEG
42610: PUSH
42611: LD_INT 1
42613: NEG
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 5
42621: NEG
42622: PUSH
42623: LD_INT 2
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 3
42633: NEG
42634: PUSH
42635: LD_INT 2
42637: PUSH
42638: EMPTY
42639: LIST
42640: LIST
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: LIST
42680: LIST
42681: LIST
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: ST_TO_ADDR
// end ; end ;
42689: GO 42692
42691: POP
// case btype of b_depot , b_warehouse :
42692: LD_VAR 0 1
42696: PUSH
42697: LD_INT 0
42699: DOUBLE
42700: EQUAL
42701: IFTRUE 42711
42703: LD_INT 1
42705: DOUBLE
42706: EQUAL
42707: IFTRUE 42711
42709: GO 42912
42711: POP
// case nation of nation_american :
42712: LD_VAR 0 5
42716: PUSH
42717: LD_INT 1
42719: DOUBLE
42720: EQUAL
42721: IFTRUE 42725
42723: GO 42781
42725: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
42726: LD_ADDR_VAR 0 9
42730: PUSH
42731: LD_VAR 0 11
42735: PUSH
42736: LD_VAR 0 12
42740: PUSH
42741: LD_VAR 0 13
42745: PUSH
42746: LD_VAR 0 14
42750: PUSH
42751: LD_VAR 0 15
42755: PUSH
42756: LD_VAR 0 16
42760: PUSH
42761: EMPTY
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: LIST
42768: PUSH
42769: LD_VAR 0 4
42773: PUSH
42774: LD_INT 1
42776: PLUS
42777: ARRAY
42778: ST_TO_ADDR
42779: GO 42910
42781: LD_INT 2
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42789
42787: GO 42845
42789: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
42790: LD_ADDR_VAR 0 9
42794: PUSH
42795: LD_VAR 0 17
42799: PUSH
42800: LD_VAR 0 18
42804: PUSH
42805: LD_VAR 0 19
42809: PUSH
42810: LD_VAR 0 20
42814: PUSH
42815: LD_VAR 0 21
42819: PUSH
42820: LD_VAR 0 22
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: PUSH
42833: LD_VAR 0 4
42837: PUSH
42838: LD_INT 1
42840: PLUS
42841: ARRAY
42842: ST_TO_ADDR
42843: GO 42910
42845: LD_INT 3
42847: DOUBLE
42848: EQUAL
42849: IFTRUE 42853
42851: GO 42909
42853: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
42854: LD_ADDR_VAR 0 9
42858: PUSH
42859: LD_VAR 0 23
42863: PUSH
42864: LD_VAR 0 24
42868: PUSH
42869: LD_VAR 0 25
42873: PUSH
42874: LD_VAR 0 26
42878: PUSH
42879: LD_VAR 0 27
42883: PUSH
42884: LD_VAR 0 28
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: LIST
42895: LIST
42896: PUSH
42897: LD_VAR 0 4
42901: PUSH
42902: LD_INT 1
42904: PLUS
42905: ARRAY
42906: ST_TO_ADDR
42907: GO 42910
42909: POP
42910: GO 43465
42912: LD_INT 2
42914: DOUBLE
42915: EQUAL
42916: IFTRUE 42926
42918: LD_INT 3
42920: DOUBLE
42921: EQUAL
42922: IFTRUE 42926
42924: GO 42982
42926: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
42927: LD_ADDR_VAR 0 9
42931: PUSH
42932: LD_VAR 0 29
42936: PUSH
42937: LD_VAR 0 30
42941: PUSH
42942: LD_VAR 0 31
42946: PUSH
42947: LD_VAR 0 32
42951: PUSH
42952: LD_VAR 0 33
42956: PUSH
42957: LD_VAR 0 34
42961: PUSH
42962: EMPTY
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: PUSH
42970: LD_VAR 0 4
42974: PUSH
42975: LD_INT 1
42977: PLUS
42978: ARRAY
42979: ST_TO_ADDR
42980: GO 43465
42982: LD_INT 16
42984: DOUBLE
42985: EQUAL
42986: IFTRUE 43044
42988: LD_INT 17
42990: DOUBLE
42991: EQUAL
42992: IFTRUE 43044
42994: LD_INT 18
42996: DOUBLE
42997: EQUAL
42998: IFTRUE 43044
43000: LD_INT 19
43002: DOUBLE
43003: EQUAL
43004: IFTRUE 43044
43006: LD_INT 22
43008: DOUBLE
43009: EQUAL
43010: IFTRUE 43044
43012: LD_INT 20
43014: DOUBLE
43015: EQUAL
43016: IFTRUE 43044
43018: LD_INT 21
43020: DOUBLE
43021: EQUAL
43022: IFTRUE 43044
43024: LD_INT 23
43026: DOUBLE
43027: EQUAL
43028: IFTRUE 43044
43030: LD_INT 24
43032: DOUBLE
43033: EQUAL
43034: IFTRUE 43044
43036: LD_INT 25
43038: DOUBLE
43039: EQUAL
43040: IFTRUE 43044
43042: GO 43100
43044: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
43045: LD_ADDR_VAR 0 9
43049: PUSH
43050: LD_VAR 0 35
43054: PUSH
43055: LD_VAR 0 36
43059: PUSH
43060: LD_VAR 0 37
43064: PUSH
43065: LD_VAR 0 38
43069: PUSH
43070: LD_VAR 0 39
43074: PUSH
43075: LD_VAR 0 40
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: LIST
43087: PUSH
43088: LD_VAR 0 4
43092: PUSH
43093: LD_INT 1
43095: PLUS
43096: ARRAY
43097: ST_TO_ADDR
43098: GO 43465
43100: LD_INT 6
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43156
43106: LD_INT 7
43108: DOUBLE
43109: EQUAL
43110: IFTRUE 43156
43112: LD_INT 8
43114: DOUBLE
43115: EQUAL
43116: IFTRUE 43156
43118: LD_INT 13
43120: DOUBLE
43121: EQUAL
43122: IFTRUE 43156
43124: LD_INT 12
43126: DOUBLE
43127: EQUAL
43128: IFTRUE 43156
43130: LD_INT 15
43132: DOUBLE
43133: EQUAL
43134: IFTRUE 43156
43136: LD_INT 11
43138: DOUBLE
43139: EQUAL
43140: IFTRUE 43156
43142: LD_INT 14
43144: DOUBLE
43145: EQUAL
43146: IFTRUE 43156
43148: LD_INT 10
43150: DOUBLE
43151: EQUAL
43152: IFTRUE 43156
43154: GO 43212
43156: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
43157: LD_ADDR_VAR 0 9
43161: PUSH
43162: LD_VAR 0 41
43166: PUSH
43167: LD_VAR 0 42
43171: PUSH
43172: LD_VAR 0 43
43176: PUSH
43177: LD_VAR 0 44
43181: PUSH
43182: LD_VAR 0 45
43186: PUSH
43187: LD_VAR 0 46
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: PUSH
43200: LD_VAR 0 4
43204: PUSH
43205: LD_INT 1
43207: PLUS
43208: ARRAY
43209: ST_TO_ADDR
43210: GO 43465
43212: LD_INT 36
43214: DOUBLE
43215: EQUAL
43216: IFTRUE 43220
43218: GO 43276
43220: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
43221: LD_ADDR_VAR 0 9
43225: PUSH
43226: LD_VAR 0 47
43230: PUSH
43231: LD_VAR 0 48
43235: PUSH
43236: LD_VAR 0 49
43240: PUSH
43241: LD_VAR 0 50
43245: PUSH
43246: LD_VAR 0 51
43250: PUSH
43251: LD_VAR 0 52
43255: PUSH
43256: EMPTY
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: PUSH
43264: LD_VAR 0 4
43268: PUSH
43269: LD_INT 1
43271: PLUS
43272: ARRAY
43273: ST_TO_ADDR
43274: GO 43465
43276: LD_INT 4
43278: DOUBLE
43279: EQUAL
43280: IFTRUE 43302
43282: LD_INT 5
43284: DOUBLE
43285: EQUAL
43286: IFTRUE 43302
43288: LD_INT 34
43290: DOUBLE
43291: EQUAL
43292: IFTRUE 43302
43294: LD_INT 37
43296: DOUBLE
43297: EQUAL
43298: IFTRUE 43302
43300: GO 43358
43302: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
43303: LD_ADDR_VAR 0 9
43307: PUSH
43308: LD_VAR 0 53
43312: PUSH
43313: LD_VAR 0 54
43317: PUSH
43318: LD_VAR 0 55
43322: PUSH
43323: LD_VAR 0 56
43327: PUSH
43328: LD_VAR 0 57
43332: PUSH
43333: LD_VAR 0 58
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: PUSH
43346: LD_VAR 0 4
43350: PUSH
43351: LD_INT 1
43353: PLUS
43354: ARRAY
43355: ST_TO_ADDR
43356: GO 43465
43358: LD_INT 31
43360: DOUBLE
43361: EQUAL
43362: IFTRUE 43408
43364: LD_INT 32
43366: DOUBLE
43367: EQUAL
43368: IFTRUE 43408
43370: LD_INT 33
43372: DOUBLE
43373: EQUAL
43374: IFTRUE 43408
43376: LD_INT 27
43378: DOUBLE
43379: EQUAL
43380: IFTRUE 43408
43382: LD_INT 26
43384: DOUBLE
43385: EQUAL
43386: IFTRUE 43408
43388: LD_INT 28
43390: DOUBLE
43391: EQUAL
43392: IFTRUE 43408
43394: LD_INT 29
43396: DOUBLE
43397: EQUAL
43398: IFTRUE 43408
43400: LD_INT 30
43402: DOUBLE
43403: EQUAL
43404: IFTRUE 43408
43406: GO 43464
43408: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
43409: LD_ADDR_VAR 0 9
43413: PUSH
43414: LD_VAR 0 59
43418: PUSH
43419: LD_VAR 0 60
43423: PUSH
43424: LD_VAR 0 61
43428: PUSH
43429: LD_VAR 0 62
43433: PUSH
43434: LD_VAR 0 63
43438: PUSH
43439: LD_VAR 0 64
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: LIST
43448: LIST
43449: LIST
43450: LIST
43451: PUSH
43452: LD_VAR 0 4
43456: PUSH
43457: LD_INT 1
43459: PLUS
43460: ARRAY
43461: ST_TO_ADDR
43462: GO 43465
43464: POP
// temp_list2 = [ ] ;
43465: LD_ADDR_VAR 0 10
43469: PUSH
43470: EMPTY
43471: ST_TO_ADDR
// for i in temp_list do
43472: LD_ADDR_VAR 0 8
43476: PUSH
43477: LD_VAR 0 9
43481: PUSH
43482: FOR_IN
43483: IFFALSE 43535
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
43485: LD_ADDR_VAR 0 10
43489: PUSH
43490: LD_VAR 0 10
43494: PUSH
43495: LD_VAR 0 8
43499: PUSH
43500: LD_INT 1
43502: ARRAY
43503: PUSH
43504: LD_VAR 0 2
43508: PLUS
43509: PUSH
43510: LD_VAR 0 8
43514: PUSH
43515: LD_INT 2
43517: ARRAY
43518: PUSH
43519: LD_VAR 0 3
43523: PLUS
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: EMPTY
43530: LIST
43531: ADD
43532: ST_TO_ADDR
43533: GO 43482
43535: POP
43536: POP
// result = temp_list2 ;
43537: LD_ADDR_VAR 0 7
43541: PUSH
43542: LD_VAR 0 10
43546: ST_TO_ADDR
// end ;
43547: LD_VAR 0 7
43551: RET
// export function EnemyInRange ( unit , dist ) ; begin
43552: LD_INT 0
43554: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
43555: LD_ADDR_VAR 0 3
43559: PUSH
43560: LD_VAR 0 1
43564: PPUSH
43565: CALL_OW 255
43569: PPUSH
43570: LD_VAR 0 1
43574: PPUSH
43575: CALL_OW 250
43579: PPUSH
43580: LD_VAR 0 1
43584: PPUSH
43585: CALL_OW 251
43589: PPUSH
43590: LD_VAR 0 2
43594: PPUSH
43595: CALL 16809 0 4
43599: PUSH
43600: LD_INT 4
43602: ARRAY
43603: ST_TO_ADDR
// end ;
43604: LD_VAR 0 3
43608: RET
// export function PlayerSeeMe ( unit ) ; begin
43609: LD_INT 0
43611: PPUSH
// result := See ( your_side , unit ) ;
43612: LD_ADDR_VAR 0 2
43616: PUSH
43617: LD_OWVAR 2
43621: PPUSH
43622: LD_VAR 0 1
43626: PPUSH
43627: CALL_OW 292
43631: ST_TO_ADDR
// end ;
43632: LD_VAR 0 2
43636: RET
// export function ReverseDir ( unit ) ; begin
43637: LD_INT 0
43639: PPUSH
// if not unit then
43640: LD_VAR 0 1
43644: NOT
43645: IFFALSE 43649
// exit ;
43647: GO 43672
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
43649: LD_ADDR_VAR 0 2
43653: PUSH
43654: LD_VAR 0 1
43658: PPUSH
43659: CALL_OW 254
43663: PUSH
43664: LD_INT 3
43666: PLUS
43667: PUSH
43668: LD_INT 6
43670: MOD
43671: ST_TO_ADDR
// end ;
43672: LD_VAR 0 2
43676: RET
// export function ReverseArray ( array ) ; var i ; begin
43677: LD_INT 0
43679: PPUSH
43680: PPUSH
// if not array then
43681: LD_VAR 0 1
43685: NOT
43686: IFFALSE 43690
// exit ;
43688: GO 43745
// result := [ ] ;
43690: LD_ADDR_VAR 0 2
43694: PUSH
43695: EMPTY
43696: ST_TO_ADDR
// for i := array downto 1 do
43697: LD_ADDR_VAR 0 3
43701: PUSH
43702: DOUBLE
43703: LD_VAR 0 1
43707: INC
43708: ST_TO_ADDR
43709: LD_INT 1
43711: PUSH
43712: FOR_DOWNTO
43713: IFFALSE 43743
// result := Join ( result , array [ i ] ) ;
43715: LD_ADDR_VAR 0 2
43719: PUSH
43720: LD_VAR 0 2
43724: PPUSH
43725: LD_VAR 0 1
43729: PUSH
43730: LD_VAR 0 3
43734: ARRAY
43735: PPUSH
43736: CALL 48597 0 2
43740: ST_TO_ADDR
43741: GO 43712
43743: POP
43744: POP
// end ;
43745: LD_VAR 0 2
43749: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
43750: LD_INT 0
43752: PPUSH
43753: PPUSH
43754: PPUSH
43755: PPUSH
43756: PPUSH
43757: PPUSH
// if not unit or not hexes then
43758: LD_VAR 0 1
43762: NOT
43763: IFTRUE 43772
43765: PUSH
43766: LD_VAR 0 2
43770: NOT
43771: OR
43772: IFFALSE 43776
// exit ;
43774: GO 43899
// dist := 9999 ;
43776: LD_ADDR_VAR 0 5
43780: PUSH
43781: LD_INT 9999
43783: ST_TO_ADDR
// for i = 1 to hexes do
43784: LD_ADDR_VAR 0 4
43788: PUSH
43789: DOUBLE
43790: LD_INT 1
43792: DEC
43793: ST_TO_ADDR
43794: LD_VAR 0 2
43798: PUSH
43799: FOR_TO
43800: IFFALSE 43887
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
43802: LD_ADDR_VAR 0 6
43806: PUSH
43807: LD_VAR 0 1
43811: PPUSH
43812: LD_VAR 0 2
43816: PUSH
43817: LD_VAR 0 4
43821: ARRAY
43822: PUSH
43823: LD_INT 1
43825: ARRAY
43826: PPUSH
43827: LD_VAR 0 2
43831: PUSH
43832: LD_VAR 0 4
43836: ARRAY
43837: PUSH
43838: LD_INT 2
43840: ARRAY
43841: PPUSH
43842: CALL_OW 297
43846: ST_TO_ADDR
// if tdist < dist then
43847: LD_VAR 0 6
43851: PUSH
43852: LD_VAR 0 5
43856: LESS
43857: IFFALSE 43885
// begin hex := hexes [ i ] ;
43859: LD_ADDR_VAR 0 8
43863: PUSH
43864: LD_VAR 0 2
43868: PUSH
43869: LD_VAR 0 4
43873: ARRAY
43874: ST_TO_ADDR
// dist := tdist ;
43875: LD_ADDR_VAR 0 5
43879: PUSH
43880: LD_VAR 0 6
43884: ST_TO_ADDR
// end ; end ;
43885: GO 43799
43887: POP
43888: POP
// result := hex ;
43889: LD_ADDR_VAR 0 3
43893: PUSH
43894: LD_VAR 0 8
43898: ST_TO_ADDR
// end ;
43899: LD_VAR 0 3
43903: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
43904: LD_INT 0
43906: PPUSH
43907: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
43908: LD_VAR 0 1
43912: NOT
43913: IFTRUE 43952
43915: PUSH
43916: LD_VAR 0 1
43920: PUSH
43921: LD_INT 21
43923: PUSH
43924: LD_INT 2
43926: PUSH
43927: EMPTY
43928: LIST
43929: LIST
43930: PUSH
43931: LD_INT 23
43933: PUSH
43934: LD_INT 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: PPUSH
43945: CALL_OW 69
43949: IN
43950: NOT
43951: OR
43952: IFFALSE 43956
// exit ;
43954: GO 44003
// for i = 1 to 3 do
43956: LD_ADDR_VAR 0 3
43960: PUSH
43961: DOUBLE
43962: LD_INT 1
43964: DEC
43965: ST_TO_ADDR
43966: LD_INT 3
43968: PUSH
43969: FOR_TO
43970: IFFALSE 44001
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
43972: LD_VAR 0 1
43976: PPUSH
43977: CALL_OW 250
43981: PPUSH
43982: LD_VAR 0 1
43986: PPUSH
43987: CALL_OW 251
43991: PPUSH
43992: LD_INT 1
43994: PPUSH
43995: CALL_OW 453
43999: GO 43969
44001: POP
44002: POP
// end ;
44003: LD_VAR 0 2
44007: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
44008: LD_INT 0
44010: PPUSH
44011: PPUSH
44012: PPUSH
44013: PPUSH
44014: PPUSH
44015: PPUSH
// if not unit or not enemy_unit then
44016: LD_VAR 0 1
44020: NOT
44021: IFTRUE 44030
44023: PUSH
44024: LD_VAR 0 2
44028: NOT
44029: OR
44030: IFFALSE 44034
// exit ;
44032: GO 44515
// if GetLives ( i ) < 250 then
44034: LD_VAR 0 4
44038: PPUSH
44039: CALL_OW 256
44043: PUSH
44044: LD_INT 250
44046: LESS
44047: IFFALSE 44060
// begin ComAutodestruct ( i ) ;
44049: LD_VAR 0 4
44053: PPUSH
44054: CALL 43904 0 1
// exit ;
44058: GO 44515
// end ; x := GetX ( enemy_unit ) ;
44060: LD_ADDR_VAR 0 7
44064: PUSH
44065: LD_VAR 0 2
44069: PPUSH
44070: CALL_OW 250
44074: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
44075: LD_ADDR_VAR 0 8
44079: PUSH
44080: LD_VAR 0 2
44084: PPUSH
44085: CALL_OW 251
44089: ST_TO_ADDR
// if not x or not y then
44090: LD_VAR 0 7
44094: NOT
44095: IFTRUE 44104
44097: PUSH
44098: LD_VAR 0 8
44102: NOT
44103: OR
44104: IFFALSE 44108
// exit ;
44106: GO 44515
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
44108: LD_ADDR_VAR 0 6
44112: PUSH
44113: LD_VAR 0 7
44117: PPUSH
44118: LD_INT 0
44120: PPUSH
44121: LD_INT 4
44123: PPUSH
44124: CALL_OW 272
44128: PUSH
44129: LD_VAR 0 8
44133: PPUSH
44134: LD_INT 0
44136: PPUSH
44137: LD_INT 4
44139: PPUSH
44140: CALL_OW 273
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_VAR 0 7
44153: PPUSH
44154: LD_INT 1
44156: PPUSH
44157: LD_INT 4
44159: PPUSH
44160: CALL_OW 272
44164: PUSH
44165: LD_VAR 0 8
44169: PPUSH
44170: LD_INT 1
44172: PPUSH
44173: LD_INT 4
44175: PPUSH
44176: CALL_OW 273
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_VAR 0 7
44189: PPUSH
44190: LD_INT 2
44192: PPUSH
44193: LD_INT 4
44195: PPUSH
44196: CALL_OW 272
44200: PUSH
44201: LD_VAR 0 8
44205: PPUSH
44206: LD_INT 2
44208: PPUSH
44209: LD_INT 4
44211: PPUSH
44212: CALL_OW 273
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_VAR 0 7
44225: PPUSH
44226: LD_INT 3
44228: PPUSH
44229: LD_INT 4
44231: PPUSH
44232: CALL_OW 272
44236: PUSH
44237: LD_VAR 0 8
44241: PPUSH
44242: LD_INT 3
44244: PPUSH
44245: LD_INT 4
44247: PPUSH
44248: CALL_OW 273
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_VAR 0 7
44261: PPUSH
44262: LD_INT 4
44264: PPUSH
44265: LD_INT 4
44267: PPUSH
44268: CALL_OW 272
44272: PUSH
44273: LD_VAR 0 8
44277: PPUSH
44278: LD_INT 4
44280: PPUSH
44281: LD_INT 4
44283: PPUSH
44284: CALL_OW 273
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_VAR 0 7
44297: PPUSH
44298: LD_INT 5
44300: PPUSH
44301: LD_INT 4
44303: PPUSH
44304: CALL_OW 272
44308: PUSH
44309: LD_VAR 0 8
44313: PPUSH
44314: LD_INT 5
44316: PPUSH
44317: LD_INT 4
44319: PPUSH
44320: CALL_OW 273
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: EMPTY
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: LIST
44336: ST_TO_ADDR
// for i = tmp downto 1 do
44337: LD_ADDR_VAR 0 4
44341: PUSH
44342: DOUBLE
44343: LD_VAR 0 6
44347: INC
44348: ST_TO_ADDR
44349: LD_INT 1
44351: PUSH
44352: FOR_DOWNTO
44353: IFFALSE 44456
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
44355: LD_VAR 0 6
44359: PUSH
44360: LD_VAR 0 4
44364: ARRAY
44365: PUSH
44366: LD_INT 1
44368: ARRAY
44369: PPUSH
44370: LD_VAR 0 6
44374: PUSH
44375: LD_VAR 0 4
44379: ARRAY
44380: PUSH
44381: LD_INT 2
44383: ARRAY
44384: PPUSH
44385: CALL_OW 488
44389: NOT
44390: IFTRUE 44432
44392: PUSH
44393: LD_VAR 0 6
44397: PUSH
44398: LD_VAR 0 4
44402: ARRAY
44403: PUSH
44404: LD_INT 1
44406: ARRAY
44407: PPUSH
44408: LD_VAR 0 6
44412: PUSH
44413: LD_VAR 0 4
44417: ARRAY
44418: PUSH
44419: LD_INT 2
44421: ARRAY
44422: PPUSH
44423: CALL_OW 428
44427: PUSH
44428: LD_INT 0
44430: NONEQUAL
44431: OR
44432: IFFALSE 44454
// tmp := Delete ( tmp , i ) ;
44434: LD_ADDR_VAR 0 6
44438: PUSH
44439: LD_VAR 0 6
44443: PPUSH
44444: LD_VAR 0 4
44448: PPUSH
44449: CALL_OW 3
44453: ST_TO_ADDR
44454: GO 44352
44456: POP
44457: POP
// j := GetClosestHex ( unit , tmp ) ;
44458: LD_ADDR_VAR 0 5
44462: PUSH
44463: LD_VAR 0 1
44467: PPUSH
44468: LD_VAR 0 6
44472: PPUSH
44473: CALL 43750 0 2
44477: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
44478: LD_VAR 0 1
44482: PPUSH
44483: LD_VAR 0 5
44487: PUSH
44488: LD_INT 1
44490: ARRAY
44491: PPUSH
44492: LD_VAR 0 5
44496: PUSH
44497: LD_INT 2
44499: ARRAY
44500: PPUSH
44501: CALL_OW 111
// result := j ;
44505: LD_ADDR_VAR 0 3
44509: PUSH
44510: LD_VAR 0 5
44514: ST_TO_ADDR
// end ;
44515: LD_VAR 0 3
44519: RET
// export function PrepareApemanSoldier ( ) ; begin
44520: LD_INT 0
44522: PPUSH
// uc_nation := 0 ;
44523: LD_ADDR_OWVAR 21
44527: PUSH
44528: LD_INT 0
44530: ST_TO_ADDR
// hc_sex := sex_male ;
44531: LD_ADDR_OWVAR 27
44535: PUSH
44536: LD_INT 1
44538: ST_TO_ADDR
// hc_name :=  ;
44539: LD_ADDR_OWVAR 26
44543: PUSH
44544: LD_STRING 
44546: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
44547: LD_ADDR_OWVAR 28
44551: PUSH
44552: LD_INT 15
44554: ST_TO_ADDR
// hc_gallery :=  ;
44555: LD_ADDR_OWVAR 33
44559: PUSH
44560: LD_STRING 
44562: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44563: LD_ADDR_OWVAR 31
44567: PUSH
44568: LD_INT 0
44570: PPUSH
44571: LD_INT 3
44573: PPUSH
44574: CALL_OW 12
44578: PUSH
44579: LD_INT 0
44581: PPUSH
44582: LD_INT 3
44584: PPUSH
44585: CALL_OW 12
44589: PUSH
44590: LD_INT 0
44592: PUSH
44593: LD_INT 0
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: LIST
44600: LIST
44601: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
44602: LD_ADDR_OWVAR 29
44606: PUSH
44607: LD_INT 10
44609: PUSH
44610: LD_INT 12
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: ST_TO_ADDR
// end ;
44617: LD_VAR 0 1
44621: RET
// export function PrepareApemanEngineer ( ) ; begin
44622: LD_INT 0
44624: PPUSH
// uc_nation := 0 ;
44625: LD_ADDR_OWVAR 21
44629: PUSH
44630: LD_INT 0
44632: ST_TO_ADDR
// hc_sex := sex_male ;
44633: LD_ADDR_OWVAR 27
44637: PUSH
44638: LD_INT 1
44640: ST_TO_ADDR
// hc_name :=  ;
44641: LD_ADDR_OWVAR 26
44645: PUSH
44646: LD_STRING 
44648: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
44649: LD_ADDR_OWVAR 28
44653: PUSH
44654: LD_INT 16
44656: ST_TO_ADDR
// hc_gallery :=  ;
44657: LD_ADDR_OWVAR 33
44661: PUSH
44662: LD_STRING 
44664: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44665: LD_ADDR_OWVAR 31
44669: PUSH
44670: LD_INT 0
44672: PPUSH
44673: LD_INT 3
44675: PPUSH
44676: CALL_OW 12
44680: PUSH
44681: LD_INT 0
44683: PPUSH
44684: LD_INT 3
44686: PPUSH
44687: CALL_OW 12
44691: PUSH
44692: LD_INT 0
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
44704: LD_ADDR_OWVAR 29
44708: PUSH
44709: LD_INT 10
44711: PUSH
44712: LD_INT 12
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: ST_TO_ADDR
// end ;
44719: LD_VAR 0 1
44723: RET
// export function PrepareApeman ( agressivity ) ; begin
44724: LD_INT 0
44726: PPUSH
// uc_side := 0 ;
44727: LD_ADDR_OWVAR 20
44731: PUSH
44732: LD_INT 0
44734: ST_TO_ADDR
// uc_nation := 0 ;
44735: LD_ADDR_OWVAR 21
44739: PUSH
44740: LD_INT 0
44742: ST_TO_ADDR
// hc_sex := sex_male ;
44743: LD_ADDR_OWVAR 27
44747: PUSH
44748: LD_INT 1
44750: ST_TO_ADDR
// hc_class := class_apeman ;
44751: LD_ADDR_OWVAR 28
44755: PUSH
44756: LD_INT 12
44758: ST_TO_ADDR
// hc_gallery :=  ;
44759: LD_ADDR_OWVAR 33
44763: PUSH
44764: LD_STRING 
44766: ST_TO_ADDR
// hc_name :=  ;
44767: LD_ADDR_OWVAR 26
44771: PUSH
44772: LD_STRING 
44774: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
44775: LD_ADDR_OWVAR 29
44779: PUSH
44780: LD_INT 10
44782: PUSH
44783: LD_INT 12
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: ST_TO_ADDR
// if agressivity = 0 then
44790: LD_VAR 0 1
44794: PUSH
44795: LD_INT 0
44797: EQUAL
44798: IFFALSE 44810
// hc_agressivity := 0 else
44800: LD_ADDR_OWVAR 35
44804: PUSH
44805: LD_INT 0
44807: ST_TO_ADDR
44808: GO 44831
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44810: LD_ADDR_OWVAR 35
44814: PUSH
44815: LD_VAR 0 1
44819: NEG
44820: PPUSH
44821: LD_VAR 0 1
44825: PPUSH
44826: CALL_OW 12
44830: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
44831: LD_ADDR_OWVAR 31
44835: PUSH
44836: LD_INT 0
44838: PPUSH
44839: LD_INT 3
44841: PPUSH
44842: CALL_OW 12
44846: PUSH
44847: LD_INT 0
44849: PPUSH
44850: LD_INT 3
44852: PPUSH
44853: CALL_OW 12
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: LD_INT 0
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: ST_TO_ADDR
// end ;
44870: LD_VAR 0 2
44874: RET
// export function PrepareTiger ( agressivity ) ; begin
44875: LD_INT 0
44877: PPUSH
// uc_side := 0 ;
44878: LD_ADDR_OWVAR 20
44882: PUSH
44883: LD_INT 0
44885: ST_TO_ADDR
// uc_nation := 0 ;
44886: LD_ADDR_OWVAR 21
44890: PUSH
44891: LD_INT 0
44893: ST_TO_ADDR
// InitHc ;
44894: CALL_OW 19
// hc_class := class_tiger ;
44898: LD_ADDR_OWVAR 28
44902: PUSH
44903: LD_INT 14
44905: ST_TO_ADDR
// hc_gallery :=  ;
44906: LD_ADDR_OWVAR 33
44910: PUSH
44911: LD_STRING 
44913: ST_TO_ADDR
// hc_name :=  ;
44914: LD_ADDR_OWVAR 26
44918: PUSH
44919: LD_STRING 
44921: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
44922: LD_ADDR_OWVAR 35
44926: PUSH
44927: LD_VAR 0 1
44931: NEG
44932: PPUSH
44933: LD_VAR 0 1
44937: PPUSH
44938: CALL_OW 12
44942: ST_TO_ADDR
// end ;
44943: LD_VAR 0 2
44947: RET
// export function PrepareEnchidna ( ) ; begin
44948: LD_INT 0
44950: PPUSH
// uc_side := 0 ;
44951: LD_ADDR_OWVAR 20
44955: PUSH
44956: LD_INT 0
44958: ST_TO_ADDR
// uc_nation := 0 ;
44959: LD_ADDR_OWVAR 21
44963: PUSH
44964: LD_INT 0
44966: ST_TO_ADDR
// InitHc ;
44967: CALL_OW 19
// hc_class := class_baggie ;
44971: LD_ADDR_OWVAR 28
44975: PUSH
44976: LD_INT 13
44978: ST_TO_ADDR
// hc_gallery :=  ;
44979: LD_ADDR_OWVAR 33
44983: PUSH
44984: LD_STRING 
44986: ST_TO_ADDR
// hc_name :=  ;
44987: LD_ADDR_OWVAR 26
44991: PUSH
44992: LD_STRING 
44994: ST_TO_ADDR
// end ;
44995: LD_VAR 0 1
44999: RET
// export function PrepareFrog ( ) ; begin
45000: LD_INT 0
45002: PPUSH
// uc_side := 0 ;
45003: LD_ADDR_OWVAR 20
45007: PUSH
45008: LD_INT 0
45010: ST_TO_ADDR
// uc_nation := 0 ;
45011: LD_ADDR_OWVAR 21
45015: PUSH
45016: LD_INT 0
45018: ST_TO_ADDR
// InitHc ;
45019: CALL_OW 19
// hc_class := class_frog ;
45023: LD_ADDR_OWVAR 28
45027: PUSH
45028: LD_INT 19
45030: ST_TO_ADDR
// hc_gallery :=  ;
45031: LD_ADDR_OWVAR 33
45035: PUSH
45036: LD_STRING 
45038: ST_TO_ADDR
// hc_name :=  ;
45039: LD_ADDR_OWVAR 26
45043: PUSH
45044: LD_STRING 
45046: ST_TO_ADDR
// end ;
45047: LD_VAR 0 1
45051: RET
// export function PrepareFish ( ) ; begin
45052: LD_INT 0
45054: PPUSH
// uc_side := 0 ;
45055: LD_ADDR_OWVAR 20
45059: PUSH
45060: LD_INT 0
45062: ST_TO_ADDR
// uc_nation := 0 ;
45063: LD_ADDR_OWVAR 21
45067: PUSH
45068: LD_INT 0
45070: ST_TO_ADDR
// InitHc ;
45071: CALL_OW 19
// hc_class := class_fish ;
45075: LD_ADDR_OWVAR 28
45079: PUSH
45080: LD_INT 20
45082: ST_TO_ADDR
// hc_gallery :=  ;
45083: LD_ADDR_OWVAR 33
45087: PUSH
45088: LD_STRING 
45090: ST_TO_ADDR
// hc_name :=  ;
45091: LD_ADDR_OWVAR 26
45095: PUSH
45096: LD_STRING 
45098: ST_TO_ADDR
// end ;
45099: LD_VAR 0 1
45103: RET
// export function PrepareBird ( ) ; begin
45104: LD_INT 0
45106: PPUSH
// uc_side := 0 ;
45107: LD_ADDR_OWVAR 20
45111: PUSH
45112: LD_INT 0
45114: ST_TO_ADDR
// uc_nation := 0 ;
45115: LD_ADDR_OWVAR 21
45119: PUSH
45120: LD_INT 0
45122: ST_TO_ADDR
// InitHc ;
45123: CALL_OW 19
// hc_class := class_phororhacos ;
45127: LD_ADDR_OWVAR 28
45131: PUSH
45132: LD_INT 18
45134: ST_TO_ADDR
// hc_gallery :=  ;
45135: LD_ADDR_OWVAR 33
45139: PUSH
45140: LD_STRING 
45142: ST_TO_ADDR
// hc_name :=  ;
45143: LD_ADDR_OWVAR 26
45147: PUSH
45148: LD_STRING 
45150: ST_TO_ADDR
// end ;
45151: LD_VAR 0 1
45155: RET
// export function PrepareHorse ( ) ; begin
45156: LD_INT 0
45158: PPUSH
// uc_side := 0 ;
45159: LD_ADDR_OWVAR 20
45163: PUSH
45164: LD_INT 0
45166: ST_TO_ADDR
// uc_nation := 0 ;
45167: LD_ADDR_OWVAR 21
45171: PUSH
45172: LD_INT 0
45174: ST_TO_ADDR
// InitHc ;
45175: CALL_OW 19
// hc_class := class_horse ;
45179: LD_ADDR_OWVAR 28
45183: PUSH
45184: LD_INT 21
45186: ST_TO_ADDR
// hc_gallery :=  ;
45187: LD_ADDR_OWVAR 33
45191: PUSH
45192: LD_STRING 
45194: ST_TO_ADDR
// hc_name :=  ;
45195: LD_ADDR_OWVAR 26
45199: PUSH
45200: LD_STRING 
45202: ST_TO_ADDR
// end ;
45203: LD_VAR 0 1
45207: RET
// export function PrepareMastodont ( ) ; begin
45208: LD_INT 0
45210: PPUSH
// uc_side := 0 ;
45211: LD_ADDR_OWVAR 20
45215: PUSH
45216: LD_INT 0
45218: ST_TO_ADDR
// uc_nation := 0 ;
45219: LD_ADDR_OWVAR 21
45223: PUSH
45224: LD_INT 0
45226: ST_TO_ADDR
// vc_chassis := class_mastodont ;
45227: LD_ADDR_OWVAR 37
45231: PUSH
45232: LD_INT 31
45234: ST_TO_ADDR
// vc_control := control_rider ;
45235: LD_ADDR_OWVAR 38
45239: PUSH
45240: LD_INT 4
45242: ST_TO_ADDR
// end ;
45243: LD_VAR 0 1
45247: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
45248: LD_INT 0
45250: PPUSH
45251: PPUSH
45252: PPUSH
// uc_side = 0 ;
45253: LD_ADDR_OWVAR 20
45257: PUSH
45258: LD_INT 0
45260: ST_TO_ADDR
// uc_nation = 0 ;
45261: LD_ADDR_OWVAR 21
45265: PUSH
45266: LD_INT 0
45268: ST_TO_ADDR
// InitHc_All ( ) ;
45269: CALL_OW 584
// InitVc ;
45273: CALL_OW 20
// if mastodonts then
45277: LD_VAR 0 6
45281: IFFALSE 45348
// for i = 1 to mastodonts do
45283: LD_ADDR_VAR 0 11
45287: PUSH
45288: DOUBLE
45289: LD_INT 1
45291: DEC
45292: ST_TO_ADDR
45293: LD_VAR 0 6
45297: PUSH
45298: FOR_TO
45299: IFFALSE 45346
// begin vc_chassis := 31 ;
45301: LD_ADDR_OWVAR 37
45305: PUSH
45306: LD_INT 31
45308: ST_TO_ADDR
// vc_control := control_rider ;
45309: LD_ADDR_OWVAR 38
45313: PUSH
45314: LD_INT 4
45316: ST_TO_ADDR
// animal := CreateVehicle ;
45317: LD_ADDR_VAR 0 12
45321: PUSH
45322: CALL_OW 45
45326: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45327: LD_VAR 0 12
45331: PPUSH
45332: LD_VAR 0 8
45336: PPUSH
45337: LD_INT 0
45339: PPUSH
45340: CALL 47490 0 3
// end ;
45344: GO 45298
45346: POP
45347: POP
// if horses then
45348: LD_VAR 0 5
45352: IFFALSE 45419
// for i = 1 to horses do
45354: LD_ADDR_VAR 0 11
45358: PUSH
45359: DOUBLE
45360: LD_INT 1
45362: DEC
45363: ST_TO_ADDR
45364: LD_VAR 0 5
45368: PUSH
45369: FOR_TO
45370: IFFALSE 45417
// begin hc_class := 21 ;
45372: LD_ADDR_OWVAR 28
45376: PUSH
45377: LD_INT 21
45379: ST_TO_ADDR
// hc_gallery :=  ;
45380: LD_ADDR_OWVAR 33
45384: PUSH
45385: LD_STRING 
45387: ST_TO_ADDR
// animal := CreateHuman ;
45388: LD_ADDR_VAR 0 12
45392: PUSH
45393: CALL_OW 44
45397: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45398: LD_VAR 0 12
45402: PPUSH
45403: LD_VAR 0 8
45407: PPUSH
45408: LD_INT 0
45410: PPUSH
45411: CALL 47490 0 3
// end ;
45415: GO 45369
45417: POP
45418: POP
// if birds then
45419: LD_VAR 0 1
45423: IFFALSE 45490
// for i = 1 to birds do
45425: LD_ADDR_VAR 0 11
45429: PUSH
45430: DOUBLE
45431: LD_INT 1
45433: DEC
45434: ST_TO_ADDR
45435: LD_VAR 0 1
45439: PUSH
45440: FOR_TO
45441: IFFALSE 45488
// begin hc_class := 18 ;
45443: LD_ADDR_OWVAR 28
45447: PUSH
45448: LD_INT 18
45450: ST_TO_ADDR
// hc_gallery =  ;
45451: LD_ADDR_OWVAR 33
45455: PUSH
45456: LD_STRING 
45458: ST_TO_ADDR
// animal := CreateHuman ;
45459: LD_ADDR_VAR 0 12
45463: PUSH
45464: CALL_OW 44
45468: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45469: LD_VAR 0 12
45473: PPUSH
45474: LD_VAR 0 8
45478: PPUSH
45479: LD_INT 0
45481: PPUSH
45482: CALL 47490 0 3
// end ;
45486: GO 45440
45488: POP
45489: POP
// if tigers then
45490: LD_VAR 0 2
45494: IFFALSE 45578
// for i = 1 to tigers do
45496: LD_ADDR_VAR 0 11
45500: PUSH
45501: DOUBLE
45502: LD_INT 1
45504: DEC
45505: ST_TO_ADDR
45506: LD_VAR 0 2
45510: PUSH
45511: FOR_TO
45512: IFFALSE 45576
// begin hc_class = class_tiger ;
45514: LD_ADDR_OWVAR 28
45518: PUSH
45519: LD_INT 14
45521: ST_TO_ADDR
// hc_gallery =  ;
45522: LD_ADDR_OWVAR 33
45526: PUSH
45527: LD_STRING 
45529: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
45530: LD_ADDR_OWVAR 35
45534: PUSH
45535: LD_INT 7
45537: NEG
45538: PPUSH
45539: LD_INT 7
45541: PPUSH
45542: CALL_OW 12
45546: ST_TO_ADDR
// animal := CreateHuman ;
45547: LD_ADDR_VAR 0 12
45551: PUSH
45552: CALL_OW 44
45556: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45557: LD_VAR 0 12
45561: PPUSH
45562: LD_VAR 0 8
45566: PPUSH
45567: LD_INT 0
45569: PPUSH
45570: CALL 47490 0 3
// end ;
45574: GO 45511
45576: POP
45577: POP
// if apemans then
45578: LD_VAR 0 3
45582: IFFALSE 45705
// for i = 1 to apemans do
45584: LD_ADDR_VAR 0 11
45588: PUSH
45589: DOUBLE
45590: LD_INT 1
45592: DEC
45593: ST_TO_ADDR
45594: LD_VAR 0 3
45598: PUSH
45599: FOR_TO
45600: IFFALSE 45703
// begin hc_class = class_apeman ;
45602: LD_ADDR_OWVAR 28
45606: PUSH
45607: LD_INT 12
45609: ST_TO_ADDR
// hc_gallery =  ;
45610: LD_ADDR_OWVAR 33
45614: PUSH
45615: LD_STRING 
45617: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
45618: LD_ADDR_OWVAR 35
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PPUSH
45627: LD_INT 2
45629: PPUSH
45630: CALL_OW 12
45634: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
45635: LD_ADDR_OWVAR 31
45639: PUSH
45640: LD_INT 1
45642: PPUSH
45643: LD_INT 3
45645: PPUSH
45646: CALL_OW 12
45650: PUSH
45651: LD_INT 1
45653: PPUSH
45654: LD_INT 3
45656: PPUSH
45657: CALL_OW 12
45661: PUSH
45662: LD_INT 0
45664: PUSH
45665: LD_INT 0
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: ST_TO_ADDR
// animal := CreateHuman ;
45674: LD_ADDR_VAR 0 12
45678: PUSH
45679: CALL_OW 44
45683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45684: LD_VAR 0 12
45688: PPUSH
45689: LD_VAR 0 8
45693: PPUSH
45694: LD_INT 0
45696: PPUSH
45697: CALL 47490 0 3
// end ;
45701: GO 45599
45703: POP
45704: POP
// if enchidnas then
45705: LD_VAR 0 4
45709: IFFALSE 45776
// for i = 1 to enchidnas do
45711: LD_ADDR_VAR 0 11
45715: PUSH
45716: DOUBLE
45717: LD_INT 1
45719: DEC
45720: ST_TO_ADDR
45721: LD_VAR 0 4
45725: PUSH
45726: FOR_TO
45727: IFFALSE 45774
// begin hc_class = 13 ;
45729: LD_ADDR_OWVAR 28
45733: PUSH
45734: LD_INT 13
45736: ST_TO_ADDR
// hc_gallery =  ;
45737: LD_ADDR_OWVAR 33
45741: PUSH
45742: LD_STRING 
45744: ST_TO_ADDR
// animal := CreateHuman ;
45745: LD_ADDR_VAR 0 12
45749: PUSH
45750: CALL_OW 44
45754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
45755: LD_VAR 0 12
45759: PPUSH
45760: LD_VAR 0 8
45764: PPUSH
45765: LD_INT 0
45767: PPUSH
45768: CALL 47490 0 3
// end ;
45772: GO 45726
45774: POP
45775: POP
// if fishes then
45776: LD_VAR 0 7
45780: IFFALSE 45847
// for i = 1 to fishes do
45782: LD_ADDR_VAR 0 11
45786: PUSH
45787: DOUBLE
45788: LD_INT 1
45790: DEC
45791: ST_TO_ADDR
45792: LD_VAR 0 7
45796: PUSH
45797: FOR_TO
45798: IFFALSE 45845
// begin hc_class = 20 ;
45800: LD_ADDR_OWVAR 28
45804: PUSH
45805: LD_INT 20
45807: ST_TO_ADDR
// hc_gallery =  ;
45808: LD_ADDR_OWVAR 33
45812: PUSH
45813: LD_STRING 
45815: ST_TO_ADDR
// animal := CreateHuman ;
45816: LD_ADDR_VAR 0 12
45820: PUSH
45821: CALL_OW 44
45825: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
45826: LD_VAR 0 12
45830: PPUSH
45831: LD_VAR 0 9
45835: PPUSH
45836: LD_INT 0
45838: PPUSH
45839: CALL 47490 0 3
// end ;
45843: GO 45797
45845: POP
45846: POP
// end ;
45847: LD_VAR 0 10
45851: RET
// export function WantHeal ( sci , unit ) ; begin
45852: LD_INT 0
45854: PPUSH
// if GetTaskList ( sci ) > 0 then
45855: LD_VAR 0 1
45859: PPUSH
45860: CALL_OW 437
45864: PUSH
45865: LD_INT 0
45867: GREATER
45868: IFFALSE 45940
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
45870: LD_VAR 0 1
45874: PPUSH
45875: CALL_OW 437
45879: PUSH
45880: LD_INT 1
45882: ARRAY
45883: PUSH
45884: LD_INT 1
45886: ARRAY
45887: PUSH
45888: LD_STRING l
45890: EQUAL
45891: IFFALSE 45918
45893: PUSH
45894: LD_VAR 0 1
45898: PPUSH
45899: CALL_OW 437
45903: PUSH
45904: LD_INT 1
45906: ARRAY
45907: PUSH
45908: LD_INT 4
45910: ARRAY
45911: PUSH
45912: LD_VAR 0 2
45916: EQUAL
45917: AND
45918: IFFALSE 45930
// result := true else
45920: LD_ADDR_VAR 0 3
45924: PUSH
45925: LD_INT 1
45927: ST_TO_ADDR
45928: GO 45938
// result := false ;
45930: LD_ADDR_VAR 0 3
45934: PUSH
45935: LD_INT 0
45937: ST_TO_ADDR
// end else
45938: GO 45948
// result := false ;
45940: LD_ADDR_VAR 0 3
45944: PUSH
45945: LD_INT 0
45947: ST_TO_ADDR
// end ;
45948: LD_VAR 0 3
45952: RET
// export function HealTarget ( sci ) ; begin
45953: LD_INT 0
45955: PPUSH
// if not sci then
45956: LD_VAR 0 1
45960: NOT
45961: IFFALSE 45965
// exit ;
45963: GO 46030
// result := 0 ;
45965: LD_ADDR_VAR 0 2
45969: PUSH
45970: LD_INT 0
45972: ST_TO_ADDR
// if GetTaskList ( sci ) then
45973: LD_VAR 0 1
45977: PPUSH
45978: CALL_OW 437
45982: IFFALSE 46030
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
45984: LD_VAR 0 1
45988: PPUSH
45989: CALL_OW 437
45993: PUSH
45994: LD_INT 1
45996: ARRAY
45997: PUSH
45998: LD_INT 1
46000: ARRAY
46001: PUSH
46002: LD_STRING l
46004: EQUAL
46005: IFFALSE 46030
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
46007: LD_ADDR_VAR 0 2
46011: PUSH
46012: LD_VAR 0 1
46016: PPUSH
46017: CALL_OW 437
46021: PUSH
46022: LD_INT 1
46024: ARRAY
46025: PUSH
46026: LD_INT 4
46028: ARRAY
46029: ST_TO_ADDR
// end ;
46030: LD_VAR 0 2
46034: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
46035: LD_INT 0
46037: PPUSH
46038: PPUSH
46039: PPUSH
46040: PPUSH
// if not base_units then
46041: LD_VAR 0 1
46045: NOT
46046: IFFALSE 46050
// exit ;
46048: GO 46137
// result := false ;
46050: LD_ADDR_VAR 0 2
46054: PUSH
46055: LD_INT 0
46057: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
46058: LD_ADDR_VAR 0 5
46062: PUSH
46063: LD_VAR 0 1
46067: PPUSH
46068: LD_INT 21
46070: PUSH
46071: LD_INT 3
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: PPUSH
46078: CALL_OW 72
46082: ST_TO_ADDR
// if not tmp then
46083: LD_VAR 0 5
46087: NOT
46088: IFFALSE 46092
// exit ;
46090: GO 46137
// for i in tmp do
46092: LD_ADDR_VAR 0 3
46096: PUSH
46097: LD_VAR 0 5
46101: PUSH
46102: FOR_IN
46103: IFFALSE 46135
// begin result := EnemyInRange ( i , 22 ) ;
46105: LD_ADDR_VAR 0 2
46109: PUSH
46110: LD_VAR 0 3
46114: PPUSH
46115: LD_INT 22
46117: PPUSH
46118: CALL 43552 0 2
46122: ST_TO_ADDR
// if result then
46123: LD_VAR 0 2
46127: IFFALSE 46133
// exit ;
46129: POP
46130: POP
46131: GO 46137
// end ;
46133: GO 46102
46135: POP
46136: POP
// end ;
46137: LD_VAR 0 2
46141: RET
// export function FilterByTag ( units , tag ) ; begin
46142: LD_INT 0
46144: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
46145: LD_ADDR_VAR 0 3
46149: PUSH
46150: LD_VAR 0 1
46154: PPUSH
46155: LD_INT 120
46157: PUSH
46158: LD_VAR 0 2
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PPUSH
46167: CALL_OW 72
46171: ST_TO_ADDR
// end ;
46172: LD_VAR 0 3
46176: RET
// export function IsDriver ( un ) ; begin
46177: LD_INT 0
46179: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
46180: LD_ADDR_VAR 0 2
46184: PUSH
46185: LD_VAR 0 1
46189: PUSH
46190: LD_INT 55
46192: PUSH
46193: EMPTY
46194: LIST
46195: PPUSH
46196: CALL_OW 69
46200: IN
46201: ST_TO_ADDR
// end ;
46202: LD_VAR 0 2
46206: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
46207: LD_INT 0
46209: PPUSH
46210: PPUSH
// list := [ ] ;
46211: LD_ADDR_VAR 0 5
46215: PUSH
46216: EMPTY
46217: ST_TO_ADDR
// case d of 0 :
46218: LD_VAR 0 3
46222: PUSH
46223: LD_INT 0
46225: DOUBLE
46226: EQUAL
46227: IFTRUE 46231
46229: GO 46364
46231: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
46232: LD_ADDR_VAR 0 5
46236: PUSH
46237: LD_VAR 0 1
46241: PUSH
46242: LD_INT 4
46244: MINUS
46245: PUSH
46246: LD_VAR 0 2
46250: PUSH
46251: LD_INT 4
46253: MINUS
46254: PUSH
46255: LD_INT 2
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: PUSH
46263: LD_VAR 0 1
46267: PUSH
46268: LD_INT 3
46270: MINUS
46271: PUSH
46272: LD_VAR 0 2
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: LIST
46284: PUSH
46285: LD_VAR 0 1
46289: PUSH
46290: LD_INT 4
46292: PLUS
46293: PUSH
46294: LD_VAR 0 2
46298: PUSH
46299: LD_INT 4
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: LIST
46306: PUSH
46307: LD_VAR 0 1
46311: PUSH
46312: LD_INT 3
46314: PLUS
46315: PUSH
46316: LD_VAR 0 2
46320: PUSH
46321: LD_INT 3
46323: PLUS
46324: PUSH
46325: LD_INT 5
46327: PUSH
46328: EMPTY
46329: LIST
46330: LIST
46331: LIST
46332: PUSH
46333: LD_VAR 0 1
46337: PUSH
46338: LD_VAR 0 2
46342: PUSH
46343: LD_INT 4
46345: PLUS
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: EMPTY
46351: LIST
46352: LIST
46353: LIST
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: LIST
46359: LIST
46360: LIST
46361: ST_TO_ADDR
// end ; 1 :
46362: GO 47062
46364: LD_INT 1
46366: DOUBLE
46367: EQUAL
46368: IFTRUE 46372
46370: GO 46505
46372: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
46373: LD_ADDR_VAR 0 5
46377: PUSH
46378: LD_VAR 0 1
46382: PUSH
46383: LD_VAR 0 2
46387: PUSH
46388: LD_INT 4
46390: MINUS
46391: PUSH
46392: LD_INT 3
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: LIST
46399: PUSH
46400: LD_VAR 0 1
46404: PUSH
46405: LD_INT 3
46407: MINUS
46408: PUSH
46409: LD_VAR 0 2
46413: PUSH
46414: LD_INT 3
46416: MINUS
46417: PUSH
46418: LD_INT 2
46420: PUSH
46421: EMPTY
46422: LIST
46423: LIST
46424: LIST
46425: PUSH
46426: LD_VAR 0 1
46430: PUSH
46431: LD_INT 4
46433: MINUS
46434: PUSH
46435: LD_VAR 0 2
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: LIST
46447: PUSH
46448: LD_VAR 0 1
46452: PUSH
46453: LD_VAR 0 2
46457: PUSH
46458: LD_INT 3
46460: PLUS
46461: PUSH
46462: LD_INT 0
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: LIST
46469: PUSH
46470: LD_VAR 0 1
46474: PUSH
46475: LD_INT 4
46477: PLUS
46478: PUSH
46479: LD_VAR 0 2
46483: PUSH
46484: LD_INT 4
46486: PLUS
46487: PUSH
46488: LD_INT 5
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: LIST
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: ST_TO_ADDR
// end ; 2 :
46503: GO 47062
46505: LD_INT 2
46507: DOUBLE
46508: EQUAL
46509: IFTRUE 46513
46511: GO 46642
46513: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
46514: LD_ADDR_VAR 0 5
46518: PUSH
46519: LD_VAR 0 1
46523: PUSH
46524: LD_VAR 0 2
46528: PUSH
46529: LD_INT 3
46531: MINUS
46532: PUSH
46533: LD_INT 3
46535: PUSH
46536: EMPTY
46537: LIST
46538: LIST
46539: LIST
46540: PUSH
46541: LD_VAR 0 1
46545: PUSH
46546: LD_INT 4
46548: PLUS
46549: PUSH
46550: LD_VAR 0 2
46554: PUSH
46555: LD_INT 4
46557: PUSH
46558: EMPTY
46559: LIST
46560: LIST
46561: LIST
46562: PUSH
46563: LD_VAR 0 1
46567: PUSH
46568: LD_VAR 0 2
46572: PUSH
46573: LD_INT 4
46575: PLUS
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: EMPTY
46581: LIST
46582: LIST
46583: LIST
46584: PUSH
46585: LD_VAR 0 1
46589: PUSH
46590: LD_INT 3
46592: MINUS
46593: PUSH
46594: LD_VAR 0 2
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: LIST
46606: PUSH
46607: LD_VAR 0 1
46611: PUSH
46612: LD_INT 4
46614: MINUS
46615: PUSH
46616: LD_VAR 0 2
46620: PUSH
46621: LD_INT 4
46623: MINUS
46624: PUSH
46625: LD_INT 2
46627: PUSH
46628: EMPTY
46629: LIST
46630: LIST
46631: LIST
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: ST_TO_ADDR
// end ; 3 :
46640: GO 47062
46642: LD_INT 3
46644: DOUBLE
46645: EQUAL
46646: IFTRUE 46650
46648: GO 46783
46650: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
46651: LD_ADDR_VAR 0 5
46655: PUSH
46656: LD_VAR 0 1
46660: PUSH
46661: LD_INT 3
46663: PLUS
46664: PUSH
46665: LD_VAR 0 2
46669: PUSH
46670: LD_INT 4
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: LIST
46677: PUSH
46678: LD_VAR 0 1
46682: PUSH
46683: LD_INT 4
46685: PLUS
46686: PUSH
46687: LD_VAR 0 2
46691: PUSH
46692: LD_INT 4
46694: PLUS
46695: PUSH
46696: LD_INT 5
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: LIST
46703: PUSH
46704: LD_VAR 0 1
46708: PUSH
46709: LD_INT 4
46711: MINUS
46712: PUSH
46713: LD_VAR 0 2
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: LIST
46725: PUSH
46726: LD_VAR 0 1
46730: PUSH
46731: LD_VAR 0 2
46735: PUSH
46736: LD_INT 4
46738: MINUS
46739: PUSH
46740: LD_INT 3
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: LIST
46747: PUSH
46748: LD_VAR 0 1
46752: PUSH
46753: LD_INT 3
46755: MINUS
46756: PUSH
46757: LD_VAR 0 2
46761: PUSH
46762: LD_INT 3
46764: MINUS
46765: PUSH
46766: LD_INT 2
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: ST_TO_ADDR
// end ; 4 :
46781: GO 47062
46783: LD_INT 4
46785: DOUBLE
46786: EQUAL
46787: IFTRUE 46791
46789: GO 46924
46791: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
46792: LD_ADDR_VAR 0 5
46796: PUSH
46797: LD_VAR 0 1
46801: PUSH
46802: LD_VAR 0 2
46806: PUSH
46807: LD_INT 4
46809: PLUS
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: LIST
46818: PUSH
46819: LD_VAR 0 1
46823: PUSH
46824: LD_INT 3
46826: PLUS
46827: PUSH
46828: LD_VAR 0 2
46832: PUSH
46833: LD_INT 3
46835: PLUS
46836: PUSH
46837: LD_INT 5
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: LIST
46844: PUSH
46845: LD_VAR 0 1
46849: PUSH
46850: LD_INT 4
46852: PLUS
46853: PUSH
46854: LD_VAR 0 2
46858: PUSH
46859: LD_INT 4
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: PUSH
46867: LD_VAR 0 1
46871: PUSH
46872: LD_VAR 0 2
46876: PUSH
46877: LD_INT 3
46879: MINUS
46880: PUSH
46881: LD_INT 3
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: LIST
46888: PUSH
46889: LD_VAR 0 1
46893: PUSH
46894: LD_INT 4
46896: MINUS
46897: PUSH
46898: LD_VAR 0 2
46902: PUSH
46903: LD_INT 4
46905: MINUS
46906: PUSH
46907: LD_INT 2
46909: PUSH
46910: EMPTY
46911: LIST
46912: LIST
46913: LIST
46914: PUSH
46915: EMPTY
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: ST_TO_ADDR
// end ; 5 :
46922: GO 47062
46924: LD_INT 5
46926: DOUBLE
46927: EQUAL
46928: IFTRUE 46932
46930: GO 47061
46932: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
46933: LD_ADDR_VAR 0 5
46937: PUSH
46938: LD_VAR 0 1
46942: PUSH
46943: LD_INT 4
46945: MINUS
46946: PUSH
46947: LD_VAR 0 2
46951: PUSH
46952: LD_INT 1
46954: PUSH
46955: EMPTY
46956: LIST
46957: LIST
46958: LIST
46959: PUSH
46960: LD_VAR 0 1
46964: PUSH
46965: LD_VAR 0 2
46969: PUSH
46970: LD_INT 4
46972: MINUS
46973: PUSH
46974: LD_INT 3
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: LIST
46981: PUSH
46982: LD_VAR 0 1
46986: PUSH
46987: LD_INT 4
46989: PLUS
46990: PUSH
46991: LD_VAR 0 2
46995: PUSH
46996: LD_INT 4
46998: PLUS
46999: PUSH
47000: LD_INT 5
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: LIST
47007: PUSH
47008: LD_VAR 0 1
47012: PUSH
47013: LD_INT 3
47015: PLUS
47016: PUSH
47017: LD_VAR 0 2
47021: PUSH
47022: LD_INT 4
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: LIST
47029: PUSH
47030: LD_VAR 0 1
47034: PUSH
47035: LD_VAR 0 2
47039: PUSH
47040: LD_INT 3
47042: PLUS
47043: PUSH
47044: LD_INT 0
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: LIST
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: ST_TO_ADDR
// end ; end ;
47059: GO 47062
47061: POP
// result := list ;
47062: LD_ADDR_VAR 0 4
47066: PUSH
47067: LD_VAR 0 5
47071: ST_TO_ADDR
// end ;
47072: LD_VAR 0 4
47076: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
47077: LD_INT 0
47079: PPUSH
47080: PPUSH
47081: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
47082: LD_VAR 0 1
47086: NOT
47087: IFTRUE 47115
47089: PUSH
47090: LD_VAR 0 2
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: LD_INT 3
47103: PUSH
47104: LD_INT 4
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: LIST
47111: LIST
47112: IN
47113: NOT
47114: OR
47115: IFFALSE 47119
// exit ;
47117: GO 47202
// tmp := [ ] ;
47119: LD_ADDR_VAR 0 5
47123: PUSH
47124: EMPTY
47125: ST_TO_ADDR
// for i in units do
47126: LD_ADDR_VAR 0 4
47130: PUSH
47131: LD_VAR 0 1
47135: PUSH
47136: FOR_IN
47137: IFFALSE 47171
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
47139: LD_ADDR_VAR 0 5
47143: PUSH
47144: LD_VAR 0 5
47148: PPUSH
47149: LD_VAR 0 4
47153: PPUSH
47154: LD_VAR 0 2
47158: PPUSH
47159: CALL_OW 259
47163: PPUSH
47164: CALL 48597 0 2
47168: ST_TO_ADDR
47169: GO 47136
47171: POP
47172: POP
// if not tmp then
47173: LD_VAR 0 5
47177: NOT
47178: IFFALSE 47182
// exit ;
47180: GO 47202
// result := SortListByListDesc ( units , tmp ) ;
47182: LD_ADDR_VAR 0 3
47186: PUSH
47187: LD_VAR 0 1
47191: PPUSH
47192: LD_VAR 0 5
47196: PPUSH
47197: CALL_OW 77
47201: ST_TO_ADDR
// end ;
47202: LD_VAR 0 3
47206: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
47207: LD_INT 0
47209: PPUSH
47210: PPUSH
47211: PPUSH
// result := false ;
47212: LD_ADDR_VAR 0 3
47216: PUSH
47217: LD_INT 0
47219: ST_TO_ADDR
// if not building then
47220: LD_VAR 0 2
47224: NOT
47225: IFFALSE 47229
// exit ;
47227: GO 47373
// x := GetX ( building ) ;
47229: LD_ADDR_VAR 0 4
47233: PUSH
47234: LD_VAR 0 2
47238: PPUSH
47239: CALL_OW 250
47243: ST_TO_ADDR
// y := GetY ( building ) ;
47244: LD_ADDR_VAR 0 5
47248: PUSH
47249: LD_VAR 0 2
47253: PPUSH
47254: CALL_OW 251
47258: ST_TO_ADDR
// if not x or not y then
47259: LD_VAR 0 4
47263: NOT
47264: IFTRUE 47273
47266: PUSH
47267: LD_VAR 0 5
47271: NOT
47272: OR
47273: IFFALSE 47277
// exit ;
47275: GO 47373
// if GetTaskList ( unit ) then
47277: LD_VAR 0 1
47281: PPUSH
47282: CALL_OW 437
47286: IFFALSE 47373
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47288: LD_STRING e
47290: PUSH
47291: LD_VAR 0 1
47295: PPUSH
47296: CALL_OW 437
47300: PUSH
47301: LD_INT 1
47303: ARRAY
47304: PUSH
47305: LD_INT 1
47307: ARRAY
47308: EQUAL
47309: IFFALSE 47336
47311: PUSH
47312: LD_VAR 0 4
47316: PUSH
47317: LD_VAR 0 1
47321: PPUSH
47322: CALL_OW 437
47326: PUSH
47327: LD_INT 1
47329: ARRAY
47330: PUSH
47331: LD_INT 2
47333: ARRAY
47334: EQUAL
47335: AND
47336: IFFALSE 47363
47338: PUSH
47339: LD_VAR 0 5
47343: PUSH
47344: LD_VAR 0 1
47348: PPUSH
47349: CALL_OW 437
47353: PUSH
47354: LD_INT 1
47356: ARRAY
47357: PUSH
47358: LD_INT 3
47360: ARRAY
47361: EQUAL
47362: AND
47363: IFFALSE 47373
// result := true end ;
47365: LD_ADDR_VAR 0 3
47369: PUSH
47370: LD_INT 1
47372: ST_TO_ADDR
// end ;
47373: LD_VAR 0 3
47377: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
47378: LD_INT 0
47380: PPUSH
// result := false ;
47381: LD_ADDR_VAR 0 4
47385: PUSH
47386: LD_INT 0
47388: ST_TO_ADDR
// if GetTaskList ( unit ) then
47389: LD_VAR 0 1
47393: PPUSH
47394: CALL_OW 437
47398: IFFALSE 47485
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
47400: LD_STRING M
47402: PUSH
47403: LD_VAR 0 1
47407: PPUSH
47408: CALL_OW 437
47412: PUSH
47413: LD_INT 1
47415: ARRAY
47416: PUSH
47417: LD_INT 1
47419: ARRAY
47420: EQUAL
47421: IFFALSE 47448
47423: PUSH
47424: LD_VAR 0 2
47428: PUSH
47429: LD_VAR 0 1
47433: PPUSH
47434: CALL_OW 437
47438: PUSH
47439: LD_INT 1
47441: ARRAY
47442: PUSH
47443: LD_INT 2
47445: ARRAY
47446: EQUAL
47447: AND
47448: IFFALSE 47475
47450: PUSH
47451: LD_VAR 0 3
47455: PUSH
47456: LD_VAR 0 1
47460: PPUSH
47461: CALL_OW 437
47465: PUSH
47466: LD_INT 1
47468: ARRAY
47469: PUSH
47470: LD_INT 3
47472: ARRAY
47473: EQUAL
47474: AND
47475: IFFALSE 47485
// result := true ;
47477: LD_ADDR_VAR 0 4
47481: PUSH
47482: LD_INT 1
47484: ST_TO_ADDR
// end ; end ;
47485: LD_VAR 0 4
47489: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
47490: LD_INT 0
47492: PPUSH
47493: PPUSH
47494: PPUSH
47495: PPUSH
// if not unit or not area then
47496: LD_VAR 0 1
47500: NOT
47501: IFTRUE 47510
47503: PUSH
47504: LD_VAR 0 2
47508: NOT
47509: OR
47510: IFFALSE 47514
// exit ;
47512: GO 47690
// tmp := AreaToList ( area , i ) ;
47514: LD_ADDR_VAR 0 6
47518: PUSH
47519: LD_VAR 0 2
47523: PPUSH
47524: LD_VAR 0 5
47528: PPUSH
47529: CALL_OW 517
47533: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
47534: LD_ADDR_VAR 0 5
47538: PUSH
47539: DOUBLE
47540: LD_INT 1
47542: DEC
47543: ST_TO_ADDR
47544: LD_VAR 0 6
47548: PUSH
47549: LD_INT 1
47551: ARRAY
47552: PUSH
47553: FOR_TO
47554: IFFALSE 47688
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
47556: LD_ADDR_VAR 0 7
47560: PUSH
47561: LD_VAR 0 6
47565: PUSH
47566: LD_INT 1
47568: ARRAY
47569: PUSH
47570: LD_VAR 0 5
47574: ARRAY
47575: PUSH
47576: LD_VAR 0 6
47580: PUSH
47581: LD_INT 2
47583: ARRAY
47584: PUSH
47585: LD_VAR 0 5
47589: ARRAY
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
47595: LD_INT 92
47597: PUSH
47598: LD_VAR 0 7
47602: PUSH
47603: LD_INT 1
47605: ARRAY
47606: PUSH
47607: LD_VAR 0 7
47611: PUSH
47612: LD_INT 2
47614: ARRAY
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: LIST
47623: LIST
47624: PPUSH
47625: CALL_OW 69
47629: PUSH
47630: LD_INT 0
47632: EQUAL
47633: IFFALSE 47686
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
47635: LD_VAR 0 1
47639: PPUSH
47640: LD_VAR 0 7
47644: PUSH
47645: LD_INT 1
47647: ARRAY
47648: PPUSH
47649: LD_VAR 0 7
47653: PUSH
47654: LD_INT 2
47656: ARRAY
47657: PPUSH
47658: LD_VAR 0 3
47662: PPUSH
47663: CALL_OW 48
// result := IsPlaced ( unit ) ;
47667: LD_ADDR_VAR 0 4
47671: PUSH
47672: LD_VAR 0 1
47676: PPUSH
47677: CALL_OW 305
47681: ST_TO_ADDR
// exit ;
47682: POP
47683: POP
47684: GO 47690
// end ; end ;
47686: GO 47553
47688: POP
47689: POP
// end ;
47690: LD_VAR 0 4
47694: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
47695: LD_INT 0
47697: PPUSH
47698: PPUSH
47699: PPUSH
// if not side or side > 8 then
47700: LD_VAR 0 1
47704: NOT
47705: IFTRUE 47717
47707: PUSH
47708: LD_VAR 0 1
47712: PUSH
47713: LD_INT 8
47715: GREATER
47716: OR
47717: IFFALSE 47721
// exit ;
47719: GO 47908
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
47721: LD_ADDR_VAR 0 4
47725: PUSH
47726: LD_INT 22
47728: PUSH
47729: LD_VAR 0 1
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 21
47740: PUSH
47741: LD_INT 3
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: EMPTY
47749: LIST
47750: LIST
47751: PPUSH
47752: CALL_OW 69
47756: ST_TO_ADDR
// if not tmp then
47757: LD_VAR 0 4
47761: NOT
47762: IFFALSE 47766
// exit ;
47764: GO 47908
// enable_addtolog := true ;
47766: LD_ADDR_OWVAR 81
47770: PUSH
47771: LD_INT 1
47773: ST_TO_ADDR
// AddToLog ( [ ) ;
47774: LD_STRING [
47776: PPUSH
47777: CALL_OW 561
// for i in tmp do
47781: LD_ADDR_VAR 0 3
47785: PUSH
47786: LD_VAR 0 4
47790: PUSH
47791: FOR_IN
47792: IFFALSE 47899
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
47794: LD_STRING [
47796: PUSH
47797: LD_VAR 0 3
47801: PPUSH
47802: CALL_OW 266
47806: STR
47807: PUSH
47808: LD_STRING , 
47810: STR
47811: PUSH
47812: LD_VAR 0 3
47816: PPUSH
47817: CALL_OW 250
47821: STR
47822: PUSH
47823: LD_STRING , 
47825: STR
47826: PUSH
47827: LD_VAR 0 3
47831: PPUSH
47832: CALL_OW 251
47836: STR
47837: PUSH
47838: LD_STRING , 
47840: STR
47841: PUSH
47842: LD_VAR 0 3
47846: PPUSH
47847: CALL_OW 254
47851: STR
47852: PUSH
47853: LD_STRING , 
47855: STR
47856: PUSH
47857: LD_VAR 0 3
47861: PPUSH
47862: LD_INT 1
47864: PPUSH
47865: CALL_OW 268
47869: STR
47870: PUSH
47871: LD_STRING , 
47873: STR
47874: PUSH
47875: LD_VAR 0 3
47879: PPUSH
47880: LD_INT 2
47882: PPUSH
47883: CALL_OW 268
47887: STR
47888: PUSH
47889: LD_STRING ],
47891: STR
47892: PPUSH
47893: CALL_OW 561
// end ;
47897: GO 47791
47899: POP
47900: POP
// AddToLog ( ]; ) ;
47901: LD_STRING ];
47903: PPUSH
47904: CALL_OW 561
// end ;
47908: LD_VAR 0 2
47912: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
47913: LD_INT 0
47915: PPUSH
47916: PPUSH
47917: PPUSH
47918: PPUSH
47919: PPUSH
// if not area or not rate or not max then
47920: LD_VAR 0 1
47924: NOT
47925: IFTRUE 47934
47927: PUSH
47928: LD_VAR 0 2
47932: NOT
47933: OR
47934: IFTRUE 47943
47936: PUSH
47937: LD_VAR 0 4
47941: NOT
47942: OR
47943: IFFALSE 47947
// exit ;
47945: GO 48136
// while 1 do
47947: LD_INT 1
47949: IFFALSE 48136
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
47951: LD_ADDR_VAR 0 9
47955: PUSH
47956: LD_VAR 0 1
47960: PPUSH
47961: LD_INT 1
47963: PPUSH
47964: CALL_OW 287
47968: PUSH
47969: LD_INT 10
47971: MUL
47972: ST_TO_ADDR
// r := rate / 10 ;
47973: LD_ADDR_VAR 0 7
47977: PUSH
47978: LD_VAR 0 2
47982: PUSH
47983: LD_INT 10
47985: DIVREAL
47986: ST_TO_ADDR
// time := 1 1$00 ;
47987: LD_ADDR_VAR 0 8
47991: PUSH
47992: LD_INT 2100
47994: ST_TO_ADDR
// if amount < min then
47995: LD_VAR 0 9
47999: PUSH
48000: LD_VAR 0 3
48004: LESS
48005: IFFALSE 48023
// r := r * 2 else
48007: LD_ADDR_VAR 0 7
48011: PUSH
48012: LD_VAR 0 7
48016: PUSH
48017: LD_INT 2
48019: MUL
48020: ST_TO_ADDR
48021: GO 48049
// if amount > max then
48023: LD_VAR 0 9
48027: PUSH
48028: LD_VAR 0 4
48032: GREATER
48033: IFFALSE 48049
// r := r / 2 ;
48035: LD_ADDR_VAR 0 7
48039: PUSH
48040: LD_VAR 0 7
48044: PUSH
48045: LD_INT 2
48047: DIVREAL
48048: ST_TO_ADDR
// time := time / r ;
48049: LD_ADDR_VAR 0 8
48053: PUSH
48054: LD_VAR 0 8
48058: PUSH
48059: LD_VAR 0 7
48063: DIVREAL
48064: ST_TO_ADDR
// if time < 0 then
48065: LD_VAR 0 8
48069: PUSH
48070: LD_INT 0
48072: LESS
48073: IFFALSE 48090
// time := time * - 1 ;
48075: LD_ADDR_VAR 0 8
48079: PUSH
48080: LD_VAR 0 8
48084: PUSH
48085: LD_INT 1
48087: NEG
48088: MUL
48089: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
48090: LD_VAR 0 8
48094: PUSH
48095: LD_INT 35
48097: PPUSH
48098: LD_INT 875
48100: PPUSH
48101: CALL_OW 12
48105: PLUS
48106: PPUSH
48107: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
48111: LD_INT 1
48113: PPUSH
48114: LD_INT 5
48116: PPUSH
48117: CALL_OW 12
48121: PPUSH
48122: LD_VAR 0 1
48126: PPUSH
48127: LD_INT 1
48129: PPUSH
48130: CALL_OW 55
// end ;
48134: GO 47947
// end ;
48136: LD_VAR 0 5
48140: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
48141: LD_INT 0
48143: PPUSH
48144: PPUSH
48145: PPUSH
48146: PPUSH
48147: PPUSH
48148: PPUSH
48149: PPUSH
48150: PPUSH
// if not turrets or not factories then
48151: LD_VAR 0 1
48155: NOT
48156: IFTRUE 48165
48158: PUSH
48159: LD_VAR 0 2
48163: NOT
48164: OR
48165: IFFALSE 48169
// exit ;
48167: GO 48476
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
48169: LD_ADDR_VAR 0 10
48173: PUSH
48174: LD_INT 5
48176: PUSH
48177: LD_INT 6
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 4
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 3
48196: PUSH
48197: LD_INT 5
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 24
48211: PUSH
48212: LD_INT 25
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 23
48221: PUSH
48222: LD_INT 27
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 42
48235: PUSH
48236: LD_INT 43
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 44
48245: PUSH
48246: LD_INT 46
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 45
48255: PUSH
48256: LD_INT 47
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: LIST
48272: ST_TO_ADDR
// result := [ ] ;
48273: LD_ADDR_VAR 0 3
48277: PUSH
48278: EMPTY
48279: ST_TO_ADDR
// for i in turrets do
48280: LD_ADDR_VAR 0 4
48284: PUSH
48285: LD_VAR 0 1
48289: PUSH
48290: FOR_IN
48291: IFFALSE 48474
// begin nat := GetNation ( i ) ;
48293: LD_ADDR_VAR 0 7
48297: PUSH
48298: LD_VAR 0 4
48302: PPUSH
48303: CALL_OW 248
48307: ST_TO_ADDR
// weapon := 0 ;
48308: LD_ADDR_VAR 0 8
48312: PUSH
48313: LD_INT 0
48315: ST_TO_ADDR
// if not nat then
48316: LD_VAR 0 7
48320: NOT
48321: IFFALSE 48325
// continue ;
48323: GO 48290
// for j in list [ nat ] do
48325: LD_ADDR_VAR 0 5
48329: PUSH
48330: LD_VAR 0 10
48334: PUSH
48335: LD_VAR 0 7
48339: ARRAY
48340: PUSH
48341: FOR_IN
48342: IFFALSE 48383
// if GetBWeapon ( i ) = j [ 1 ] then
48344: LD_VAR 0 4
48348: PPUSH
48349: CALL_OW 269
48353: PUSH
48354: LD_VAR 0 5
48358: PUSH
48359: LD_INT 1
48361: ARRAY
48362: EQUAL
48363: IFFALSE 48381
// begin weapon := j [ 2 ] ;
48365: LD_ADDR_VAR 0 8
48369: PUSH
48370: LD_VAR 0 5
48374: PUSH
48375: LD_INT 2
48377: ARRAY
48378: ST_TO_ADDR
// break ;
48379: GO 48383
// end ;
48381: GO 48341
48383: POP
48384: POP
// if not weapon then
48385: LD_VAR 0 8
48389: NOT
48390: IFFALSE 48394
// continue ;
48392: GO 48290
// for k in factories do
48394: LD_ADDR_VAR 0 6
48398: PUSH
48399: LD_VAR 0 2
48403: PUSH
48404: FOR_IN
48405: IFFALSE 48470
// begin weapons := AvailableWeaponList ( k ) ;
48407: LD_ADDR_VAR 0 9
48411: PUSH
48412: LD_VAR 0 6
48416: PPUSH
48417: CALL_OW 478
48421: ST_TO_ADDR
// if not weapons then
48422: LD_VAR 0 9
48426: NOT
48427: IFFALSE 48431
// continue ;
48429: GO 48404
// if weapon in weapons then
48431: LD_VAR 0 8
48435: PUSH
48436: LD_VAR 0 9
48440: IN
48441: IFFALSE 48468
// begin result := [ i , weapon ] ;
48443: LD_ADDR_VAR 0 3
48447: PUSH
48448: LD_VAR 0 4
48452: PUSH
48453: LD_VAR 0 8
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: ST_TO_ADDR
// exit ;
48462: POP
48463: POP
48464: POP
48465: POP
48466: GO 48476
// end ; end ;
48468: GO 48404
48470: POP
48471: POP
// end ;
48472: GO 48290
48474: POP
48475: POP
// end ;
48476: LD_VAR 0 3
48480: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
48481: LD_INT 0
48483: PPUSH
// if not side or side > 8 then
48484: LD_VAR 0 3
48488: NOT
48489: IFTRUE 48501
48491: PUSH
48492: LD_VAR 0 3
48496: PUSH
48497: LD_INT 8
48499: GREATER
48500: OR
48501: IFFALSE 48505
// exit ;
48503: GO 48564
// if not range then
48505: LD_VAR 0 4
48509: NOT
48510: IFFALSE 48521
// range := - 12 ;
48512: LD_ADDR_VAR 0 4
48516: PUSH
48517: LD_INT 12
48519: NEG
48520: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
48521: LD_VAR 0 1
48525: PPUSH
48526: LD_VAR 0 2
48530: PPUSH
48531: LD_VAR 0 3
48535: PPUSH
48536: LD_VAR 0 4
48540: PPUSH
48541: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
48545: LD_VAR 0 1
48549: PPUSH
48550: LD_VAR 0 2
48554: PPUSH
48555: LD_VAR 0 3
48559: PPUSH
48560: CALL_OW 331
// end ;
48564: LD_VAR 0 5
48568: RET
// export function Video ( mode ) ; begin
48569: LD_INT 0
48571: PPUSH
// ingame_video = mode ;
48572: LD_ADDR_OWVAR 52
48576: PUSH
48577: LD_VAR 0 1
48581: ST_TO_ADDR
// interface_hidden = mode ;
48582: LD_ADDR_OWVAR 54
48586: PUSH
48587: LD_VAR 0 1
48591: ST_TO_ADDR
// end ;
48592: LD_VAR 0 2
48596: RET
// export function Join ( array , element ) ; begin
48597: LD_INT 0
48599: PPUSH
// result := Replace ( array , array + 1 , element ) ;
48600: LD_ADDR_VAR 0 3
48604: PUSH
48605: LD_VAR 0 1
48609: PPUSH
48610: LD_VAR 0 1
48614: PUSH
48615: LD_INT 1
48617: PLUS
48618: PPUSH
48619: LD_VAR 0 2
48623: PPUSH
48624: CALL_OW 1
48628: ST_TO_ADDR
// end ;
48629: LD_VAR 0 3
48633: RET
// export function JoinUnion ( array , element ) ; begin
48634: LD_INT 0
48636: PPUSH
// result := array union element ;
48637: LD_ADDR_VAR 0 3
48641: PUSH
48642: LD_VAR 0 1
48646: PUSH
48647: LD_VAR 0 2
48651: UNION
48652: ST_TO_ADDR
// end ;
48653: LD_VAR 0 3
48657: RET
// export function GetBehemoths ( side ) ; begin
48658: LD_INT 0
48660: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
48661: LD_ADDR_VAR 0 2
48665: PUSH
48666: LD_INT 22
48668: PUSH
48669: LD_VAR 0 1
48673: PUSH
48674: EMPTY
48675: LIST
48676: LIST
48677: PUSH
48678: LD_INT 31
48680: PUSH
48681: LD_INT 25
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PPUSH
48692: CALL_OW 69
48696: ST_TO_ADDR
// end ;
48697: LD_VAR 0 2
48701: RET
// export function Shuffle ( array ) ; var i , index ; begin
48702: LD_INT 0
48704: PPUSH
48705: PPUSH
48706: PPUSH
// result := [ ] ;
48707: LD_ADDR_VAR 0 2
48711: PUSH
48712: EMPTY
48713: ST_TO_ADDR
// if not array then
48714: LD_VAR 0 1
48718: NOT
48719: IFFALSE 48723
// exit ;
48721: GO 48822
// Randomize ;
48723: CALL_OW 10
// for i = array downto 1 do
48727: LD_ADDR_VAR 0 3
48731: PUSH
48732: DOUBLE
48733: LD_VAR 0 1
48737: INC
48738: ST_TO_ADDR
48739: LD_INT 1
48741: PUSH
48742: FOR_DOWNTO
48743: IFFALSE 48820
// begin index := rand ( 1 , array ) ;
48745: LD_ADDR_VAR 0 4
48749: PUSH
48750: LD_INT 1
48752: PPUSH
48753: LD_VAR 0 1
48757: PPUSH
48758: CALL_OW 12
48762: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
48763: LD_ADDR_VAR 0 2
48767: PUSH
48768: LD_VAR 0 2
48772: PPUSH
48773: LD_VAR 0 2
48777: PUSH
48778: LD_INT 1
48780: PLUS
48781: PPUSH
48782: LD_VAR 0 1
48786: PUSH
48787: LD_VAR 0 4
48791: ARRAY
48792: PPUSH
48793: CALL_OW 2
48797: ST_TO_ADDR
// array := Delete ( array , index ) ;
48798: LD_ADDR_VAR 0 1
48802: PUSH
48803: LD_VAR 0 1
48807: PPUSH
48808: LD_VAR 0 4
48812: PPUSH
48813: CALL_OW 3
48817: ST_TO_ADDR
// end ;
48818: GO 48742
48820: POP
48821: POP
// end ;
48822: LD_VAR 0 2
48826: RET
// export function GetBaseMaterials ( base ) ; begin
48827: LD_INT 0
48829: PPUSH
// result := [ 0 , 0 , 0 ] ;
48830: LD_ADDR_VAR 0 2
48834: PUSH
48835: LD_INT 0
48837: PUSH
48838: LD_INT 0
48840: PUSH
48841: LD_INT 0
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: LIST
48848: ST_TO_ADDR
// if not base then
48849: LD_VAR 0 1
48853: NOT
48854: IFFALSE 48858
// exit ;
48856: GO 48907
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
48858: LD_ADDR_VAR 0 2
48862: PUSH
48863: LD_VAR 0 1
48867: PPUSH
48868: LD_INT 1
48870: PPUSH
48871: CALL_OW 275
48875: PUSH
48876: LD_VAR 0 1
48880: PPUSH
48881: LD_INT 2
48883: PPUSH
48884: CALL_OW 275
48888: PUSH
48889: LD_VAR 0 1
48893: PPUSH
48894: LD_INT 3
48896: PPUSH
48897: CALL_OW 275
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: LIST
48906: ST_TO_ADDR
// end ;
48907: LD_VAR 0 2
48911: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
48912: LD_INT 0
48914: PPUSH
48915: PPUSH
// result := array ;
48916: LD_ADDR_VAR 0 3
48920: PUSH
48921: LD_VAR 0 1
48925: ST_TO_ADDR
// if size >= result then
48926: LD_VAR 0 2
48930: PUSH
48931: LD_VAR 0 3
48935: GREATEREQUAL
48936: IFFALSE 48940
// exit ;
48938: GO 48990
// if size then
48940: LD_VAR 0 2
48944: IFFALSE 48990
// for i := array downto size do
48946: LD_ADDR_VAR 0 4
48950: PUSH
48951: DOUBLE
48952: LD_VAR 0 1
48956: INC
48957: ST_TO_ADDR
48958: LD_VAR 0 2
48962: PUSH
48963: FOR_DOWNTO
48964: IFFALSE 48988
// result := Delete ( result , result ) ;
48966: LD_ADDR_VAR 0 3
48970: PUSH
48971: LD_VAR 0 3
48975: PPUSH
48976: LD_VAR 0 3
48980: PPUSH
48981: CALL_OW 3
48985: ST_TO_ADDR
48986: GO 48963
48988: POP
48989: POP
// end ;
48990: LD_VAR 0 3
48994: RET
// export function ComExit ( unit ) ; var tmp ; begin
48995: LD_INT 0
48997: PPUSH
48998: PPUSH
// if not IsInUnit ( unit ) then
48999: LD_VAR 0 1
49003: PPUSH
49004: CALL_OW 310
49008: NOT
49009: IFFALSE 49013
// exit ;
49011: GO 49073
// tmp := IsInUnit ( unit ) ;
49013: LD_ADDR_VAR 0 3
49017: PUSH
49018: LD_VAR 0 1
49022: PPUSH
49023: CALL_OW 310
49027: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
49028: LD_VAR 0 3
49032: PPUSH
49033: CALL_OW 247
49037: PUSH
49038: LD_INT 2
49040: EQUAL
49041: IFFALSE 49054
// ComExitVehicle ( unit ) else
49043: LD_VAR 0 1
49047: PPUSH
49048: CALL_OW 121
49052: GO 49063
// ComExitBuilding ( unit ) ;
49054: LD_VAR 0 1
49058: PPUSH
49059: CALL_OW 122
// result := tmp ;
49063: LD_ADDR_VAR 0 2
49067: PUSH
49068: LD_VAR 0 3
49072: ST_TO_ADDR
// end ;
49073: LD_VAR 0 2
49077: RET
// export function ComExitAll ( units ) ; var i ; begin
49078: LD_INT 0
49080: PPUSH
49081: PPUSH
// if not units then
49082: LD_VAR 0 1
49086: NOT
49087: IFFALSE 49091
// exit ;
49089: GO 49117
// for i in units do
49091: LD_ADDR_VAR 0 3
49095: PUSH
49096: LD_VAR 0 1
49100: PUSH
49101: FOR_IN
49102: IFFALSE 49115
// ComExit ( i ) ;
49104: LD_VAR 0 3
49108: PPUSH
49109: CALL 48995 0 1
49113: GO 49101
49115: POP
49116: POP
// end ;
49117: LD_VAR 0 2
49121: RET
// export function ResetHc ; begin
49122: LD_INT 0
49124: PPUSH
// InitHc ;
49125: CALL_OW 19
// hc_importance := 0 ;
49129: LD_ADDR_OWVAR 32
49133: PUSH
49134: LD_INT 0
49136: ST_TO_ADDR
// end ;
49137: LD_VAR 0 1
49141: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
49142: LD_INT 0
49144: PPUSH
49145: PPUSH
49146: PPUSH
// _x := ( x1 + x2 ) div 2 ;
49147: LD_ADDR_VAR 0 6
49151: PUSH
49152: LD_VAR 0 1
49156: PUSH
49157: LD_VAR 0 3
49161: PLUS
49162: PUSH
49163: LD_INT 2
49165: DIV
49166: ST_TO_ADDR
// if _x < 0 then
49167: LD_VAR 0 6
49171: PUSH
49172: LD_INT 0
49174: LESS
49175: IFFALSE 49192
// _x := _x * - 1 ;
49177: LD_ADDR_VAR 0 6
49181: PUSH
49182: LD_VAR 0 6
49186: PUSH
49187: LD_INT 1
49189: NEG
49190: MUL
49191: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
49192: LD_ADDR_VAR 0 7
49196: PUSH
49197: LD_VAR 0 2
49201: PUSH
49202: LD_VAR 0 4
49206: PLUS
49207: PUSH
49208: LD_INT 2
49210: DIV
49211: ST_TO_ADDR
// if _y < 0 then
49212: LD_VAR 0 7
49216: PUSH
49217: LD_INT 0
49219: LESS
49220: IFFALSE 49237
// _y := _y * - 1 ;
49222: LD_ADDR_VAR 0 7
49226: PUSH
49227: LD_VAR 0 7
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: MUL
49236: ST_TO_ADDR
// result := [ _x , _y ] ;
49237: LD_ADDR_VAR 0 5
49241: PUSH
49242: LD_VAR 0 6
49246: PUSH
49247: LD_VAR 0 7
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: ST_TO_ADDR
// end ;
49256: LD_VAR 0 5
49260: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
49261: LD_INT 0
49263: PPUSH
49264: PPUSH
49265: PPUSH
49266: PPUSH
// task := GetTaskList ( unit ) ;
49267: LD_ADDR_VAR 0 7
49271: PUSH
49272: LD_VAR 0 1
49276: PPUSH
49277: CALL_OW 437
49281: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
49282: LD_VAR 0 7
49286: NOT
49287: IFFALSE 49306
49289: PUSH
49290: LD_VAR 0 1
49294: PPUSH
49295: LD_VAR 0 2
49299: PPUSH
49300: CALL_OW 308
49304: NOT
49305: AND
49306: IFFALSE 49310
// exit ;
49308: GO 49428
// if IsInArea ( unit , area ) then
49310: LD_VAR 0 1
49314: PPUSH
49315: LD_VAR 0 2
49319: PPUSH
49320: CALL_OW 308
49324: IFFALSE 49342
// begin ComMoveToArea ( unit , goAway ) ;
49326: LD_VAR 0 1
49330: PPUSH
49331: LD_VAR 0 3
49335: PPUSH
49336: CALL_OW 113
// exit ;
49340: GO 49428
// end ; if task [ 1 ] [ 1 ] <> M then
49342: LD_VAR 0 7
49346: PUSH
49347: LD_INT 1
49349: ARRAY
49350: PUSH
49351: LD_INT 1
49353: ARRAY
49354: PUSH
49355: LD_STRING M
49357: NONEQUAL
49358: IFFALSE 49362
// exit ;
49360: GO 49428
// x := task [ 1 ] [ 2 ] ;
49362: LD_ADDR_VAR 0 5
49366: PUSH
49367: LD_VAR 0 7
49371: PUSH
49372: LD_INT 1
49374: ARRAY
49375: PUSH
49376: LD_INT 2
49378: ARRAY
49379: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
49380: LD_ADDR_VAR 0 6
49384: PUSH
49385: LD_VAR 0 7
49389: PUSH
49390: LD_INT 1
49392: ARRAY
49393: PUSH
49394: LD_INT 3
49396: ARRAY
49397: ST_TO_ADDR
// if InArea ( x , y , area ) then
49398: LD_VAR 0 5
49402: PPUSH
49403: LD_VAR 0 6
49407: PPUSH
49408: LD_VAR 0 2
49412: PPUSH
49413: CALL_OW 309
49417: IFFALSE 49428
// ComStop ( unit ) ;
49419: LD_VAR 0 1
49423: PPUSH
49424: CALL_OW 141
// end ;
49428: LD_VAR 0 4
49432: RET
// export function Abs ( value ) ; begin
49433: LD_INT 0
49435: PPUSH
// result := value ;
49436: LD_ADDR_VAR 0 2
49440: PUSH
49441: LD_VAR 0 1
49445: ST_TO_ADDR
// if value < 0 then
49446: LD_VAR 0 1
49450: PUSH
49451: LD_INT 0
49453: LESS
49454: IFFALSE 49471
// result := value * - 1 ;
49456: LD_ADDR_VAR 0 2
49460: PUSH
49461: LD_VAR 0 1
49465: PUSH
49466: LD_INT 1
49468: NEG
49469: MUL
49470: ST_TO_ADDR
// end ;
49471: LD_VAR 0 2
49475: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
49476: LD_INT 0
49478: PPUSH
49479: PPUSH
49480: PPUSH
49481: PPUSH
49482: PPUSH
49483: PPUSH
49484: PPUSH
49485: PPUSH
// if not unit or not building then
49486: LD_VAR 0 1
49490: NOT
49491: IFTRUE 49500
49493: PUSH
49494: LD_VAR 0 2
49498: NOT
49499: OR
49500: IFFALSE 49504
// exit ;
49502: GO 49732
// x := GetX ( building ) ;
49504: LD_ADDR_VAR 0 4
49508: PUSH
49509: LD_VAR 0 2
49513: PPUSH
49514: CALL_OW 250
49518: ST_TO_ADDR
// y := GetY ( building ) ;
49519: LD_ADDR_VAR 0 6
49523: PUSH
49524: LD_VAR 0 2
49528: PPUSH
49529: CALL_OW 251
49533: ST_TO_ADDR
// d := GetDir ( building ) ;
49534: LD_ADDR_VAR 0 8
49538: PUSH
49539: LD_VAR 0 2
49543: PPUSH
49544: CALL_OW 254
49548: ST_TO_ADDR
// r := 4 ;
49549: LD_ADDR_VAR 0 9
49553: PUSH
49554: LD_INT 4
49556: ST_TO_ADDR
// for i := 1 to 5 do
49557: LD_ADDR_VAR 0 10
49561: PUSH
49562: DOUBLE
49563: LD_INT 1
49565: DEC
49566: ST_TO_ADDR
49567: LD_INT 5
49569: PUSH
49570: FOR_TO
49571: IFFALSE 49730
// begin _x := ShiftX ( x , d , r + i ) ;
49573: LD_ADDR_VAR 0 5
49577: PUSH
49578: LD_VAR 0 4
49582: PPUSH
49583: LD_VAR 0 8
49587: PPUSH
49588: LD_VAR 0 9
49592: PUSH
49593: LD_VAR 0 10
49597: PLUS
49598: PPUSH
49599: CALL_OW 272
49603: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
49604: LD_ADDR_VAR 0 7
49608: PUSH
49609: LD_VAR 0 6
49613: PPUSH
49614: LD_VAR 0 8
49618: PPUSH
49619: LD_VAR 0 9
49623: PUSH
49624: LD_VAR 0 10
49628: PLUS
49629: PPUSH
49630: CALL_OW 273
49634: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
49635: LD_VAR 0 5
49639: PPUSH
49640: LD_VAR 0 7
49644: PPUSH
49645: CALL_OW 488
49649: IFFALSE 49684
49651: PUSH
49652: LD_VAR 0 5
49656: PPUSH
49657: LD_VAR 0 7
49661: PPUSH
49662: CALL_OW 428
49666: PPUSH
49667: CALL_OW 247
49671: PUSH
49672: LD_INT 3
49674: PUSH
49675: LD_INT 2
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: IN
49682: NOT
49683: AND
49684: IFFALSE 49728
// begin ComMoveXY ( unit , _x , _y ) ;
49686: LD_VAR 0 1
49690: PPUSH
49691: LD_VAR 0 5
49695: PPUSH
49696: LD_VAR 0 7
49700: PPUSH
49701: CALL_OW 111
// result := [ _x , _y ] ;
49705: LD_ADDR_VAR 0 3
49709: PUSH
49710: LD_VAR 0 5
49714: PUSH
49715: LD_VAR 0 7
49719: PUSH
49720: EMPTY
49721: LIST
49722: LIST
49723: ST_TO_ADDR
// exit ;
49724: POP
49725: POP
49726: GO 49732
// end ; end ;
49728: GO 49570
49730: POP
49731: POP
// end ;
49732: LD_VAR 0 3
49736: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
49737: LD_INT 0
49739: PPUSH
49740: PPUSH
49741: PPUSH
// result := 0 ;
49742: LD_ADDR_VAR 0 3
49746: PUSH
49747: LD_INT 0
49749: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
49750: LD_VAR 0 1
49754: PUSH
49755: LD_INT 0
49757: LESS
49758: IFTRUE 49770
49760: PUSH
49761: LD_VAR 0 1
49765: PUSH
49766: LD_INT 8
49768: GREATER
49769: OR
49770: IFTRUE 49782
49772: PUSH
49773: LD_VAR 0 2
49777: PUSH
49778: LD_INT 0
49780: LESS
49781: OR
49782: IFTRUE 49794
49784: PUSH
49785: LD_VAR 0 2
49789: PUSH
49790: LD_INT 8
49792: GREATER
49793: OR
49794: IFFALSE 49798
// exit ;
49796: GO 49873
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
49798: LD_ADDR_VAR 0 4
49802: PUSH
49803: LD_INT 22
49805: PUSH
49806: LD_VAR 0 2
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PPUSH
49815: CALL_OW 69
49819: PUSH
49820: FOR_IN
49821: IFFALSE 49871
// begin un := UnitShoot ( i ) ;
49823: LD_ADDR_VAR 0 5
49827: PUSH
49828: LD_VAR 0 4
49832: PPUSH
49833: CALL_OW 504
49837: ST_TO_ADDR
// if GetSide ( un ) = side1 then
49838: LD_VAR 0 5
49842: PPUSH
49843: CALL_OW 255
49847: PUSH
49848: LD_VAR 0 1
49852: EQUAL
49853: IFFALSE 49869
// begin result := un ;
49855: LD_ADDR_VAR 0 3
49859: PUSH
49860: LD_VAR 0 5
49864: ST_TO_ADDR
// exit ;
49865: POP
49866: POP
49867: GO 49873
// end ; end ;
49869: GO 49820
49871: POP
49872: POP
// end ;
49873: LD_VAR 0 3
49877: RET
// export function GetCargoBay ( units ) ; begin
49878: LD_INT 0
49880: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
49881: LD_ADDR_VAR 0 2
49885: PUSH
49886: LD_VAR 0 1
49890: PPUSH
49891: LD_INT 2
49893: PUSH
49894: LD_INT 34
49896: PUSH
49897: LD_INT 12
49899: PUSH
49900: EMPTY
49901: LIST
49902: LIST
49903: PUSH
49904: LD_INT 34
49906: PUSH
49907: LD_INT 51
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 34
49916: PUSH
49917: LD_INT 32
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 34
49926: PUSH
49927: LD_INT 89
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: LIST
49939: LIST
49940: PPUSH
49941: CALL_OW 72
49945: ST_TO_ADDR
// end ;
49946: LD_VAR 0 2
49950: RET
// export function Negate ( value ) ; begin
49951: LD_INT 0
49953: PPUSH
// result := not value ;
49954: LD_ADDR_VAR 0 2
49958: PUSH
49959: LD_VAR 0 1
49963: NOT
49964: ST_TO_ADDR
// end ;
49965: LD_VAR 0 2
49969: RET
// export function Inc ( value ) ; begin
49970: LD_INT 0
49972: PPUSH
// result := value + 1 ;
49973: LD_ADDR_VAR 0 2
49977: PUSH
49978: LD_VAR 0 1
49982: PUSH
49983: LD_INT 1
49985: PLUS
49986: ST_TO_ADDR
// end ;
49987: LD_VAR 0 2
49991: RET
// export function Dec ( value ) ; begin
49992: LD_INT 0
49994: PPUSH
// result := value - 1 ;
49995: LD_ADDR_VAR 0 2
49999: PUSH
50000: LD_VAR 0 1
50004: PUSH
50005: LD_INT 1
50007: MINUS
50008: ST_TO_ADDR
// end ;
50009: LD_VAR 0 2
50013: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
50014: LD_INT 0
50016: PPUSH
50017: PPUSH
50018: PPUSH
50019: PPUSH
50020: PPUSH
50021: PPUSH
50022: PPUSH
50023: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
50024: LD_VAR 0 1
50028: PPUSH
50029: LD_VAR 0 2
50033: PPUSH
50034: CALL_OW 488
50038: NOT
50039: IFTRUE 50058
50041: PUSH
50042: LD_VAR 0 3
50046: PPUSH
50047: LD_VAR 0 4
50051: PPUSH
50052: CALL_OW 488
50056: NOT
50057: OR
50058: IFFALSE 50071
// begin result := - 1 ;
50060: LD_ADDR_VAR 0 5
50064: PUSH
50065: LD_INT 1
50067: NEG
50068: ST_TO_ADDR
// exit ;
50069: GO 50306
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
50071: LD_ADDR_VAR 0 12
50075: PUSH
50076: LD_VAR 0 1
50080: PPUSH
50081: LD_VAR 0 2
50085: PPUSH
50086: LD_VAR 0 3
50090: PPUSH
50091: LD_VAR 0 4
50095: PPUSH
50096: CALL 49142 0 4
50100: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
50101: LD_ADDR_VAR 0 11
50105: PUSH
50106: LD_VAR 0 1
50110: PPUSH
50111: LD_VAR 0 2
50115: PPUSH
50116: LD_VAR 0 12
50120: PUSH
50121: LD_INT 1
50123: ARRAY
50124: PPUSH
50125: LD_VAR 0 12
50129: PUSH
50130: LD_INT 2
50132: ARRAY
50133: PPUSH
50134: CALL_OW 298
50138: ST_TO_ADDR
// distance := 9999 ;
50139: LD_ADDR_VAR 0 10
50143: PUSH
50144: LD_INT 9999
50146: ST_TO_ADDR
// for i := 0 to 5 do
50147: LD_ADDR_VAR 0 6
50151: PUSH
50152: DOUBLE
50153: LD_INT 0
50155: DEC
50156: ST_TO_ADDR
50157: LD_INT 5
50159: PUSH
50160: FOR_TO
50161: IFFALSE 50304
// begin _x := ShiftX ( x1 , i , centerDist ) ;
50163: LD_ADDR_VAR 0 7
50167: PUSH
50168: LD_VAR 0 1
50172: PPUSH
50173: LD_VAR 0 6
50177: PPUSH
50178: LD_VAR 0 11
50182: PPUSH
50183: CALL_OW 272
50187: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
50188: LD_ADDR_VAR 0 8
50192: PUSH
50193: LD_VAR 0 2
50197: PPUSH
50198: LD_VAR 0 6
50202: PPUSH
50203: LD_VAR 0 11
50207: PPUSH
50208: CALL_OW 273
50212: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50213: LD_VAR 0 7
50217: PPUSH
50218: LD_VAR 0 8
50222: PPUSH
50223: CALL_OW 488
50227: NOT
50228: IFFALSE 50232
// continue ;
50230: GO 50160
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
50232: LD_ADDR_VAR 0 9
50236: PUSH
50237: LD_VAR 0 12
50241: PUSH
50242: LD_INT 1
50244: ARRAY
50245: PPUSH
50246: LD_VAR 0 12
50250: PUSH
50251: LD_INT 2
50253: ARRAY
50254: PPUSH
50255: LD_VAR 0 7
50259: PPUSH
50260: LD_VAR 0 8
50264: PPUSH
50265: CALL_OW 298
50269: ST_TO_ADDR
// if tmp < distance then
50270: LD_VAR 0 9
50274: PUSH
50275: LD_VAR 0 10
50279: LESS
50280: IFFALSE 50302
// begin result := i ;
50282: LD_ADDR_VAR 0 5
50286: PUSH
50287: LD_VAR 0 6
50291: ST_TO_ADDR
// distance := tmp ;
50292: LD_ADDR_VAR 0 10
50296: PUSH
50297: LD_VAR 0 9
50301: ST_TO_ADDR
// end ; end ;
50302: GO 50160
50304: POP
50305: POP
// end ;
50306: LD_VAR 0 5
50310: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50311: LD_INT 0
50313: PPUSH
50314: PPUSH
// if not driver or not IsInUnit ( driver ) then
50315: LD_VAR 0 1
50319: NOT
50320: IFTRUE 50334
50322: PUSH
50323: LD_VAR 0 1
50327: PPUSH
50328: CALL_OW 310
50332: NOT
50333: OR
50334: IFFALSE 50338
// exit ;
50336: GO 50428
// vehicle := IsInUnit ( driver ) ;
50338: LD_ADDR_VAR 0 3
50342: PUSH
50343: LD_VAR 0 1
50347: PPUSH
50348: CALL_OW 310
50352: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50353: LD_VAR 0 1
50357: PPUSH
50358: LD_STRING \
50360: PUSH
50361: LD_INT 0
50363: PUSH
50364: LD_INT 0
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: LD_INT 0
50372: PUSH
50373: LD_INT 0
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: EMPTY
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: PUSH
50388: LD_STRING E
50390: PUSH
50391: LD_INT 0
50393: PUSH
50394: LD_INT 0
50396: PUSH
50397: LD_VAR 0 3
50401: PUSH
50402: LD_INT 0
50404: PUSH
50405: LD_INT 0
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PPUSH
50424: CALL_OW 446
// end ;
50428: LD_VAR 0 2
50432: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
50433: LD_INT 0
50435: PPUSH
50436: PPUSH
// if not driver or not IsInUnit ( driver ) then
50437: LD_VAR 0 1
50441: NOT
50442: IFTRUE 50456
50444: PUSH
50445: LD_VAR 0 1
50449: PPUSH
50450: CALL_OW 310
50454: NOT
50455: OR
50456: IFFALSE 50460
// exit ;
50458: GO 50550
// vehicle := IsInUnit ( driver ) ;
50460: LD_ADDR_VAR 0 3
50464: PUSH
50465: LD_VAR 0 1
50469: PPUSH
50470: CALL_OW 310
50474: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
50475: LD_VAR 0 1
50479: PPUSH
50480: LD_STRING \
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: LD_INT 0
50494: PUSH
50495: LD_INT 0
50497: PUSH
50498: LD_INT 0
50500: PUSH
50501: EMPTY
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: LIST
50507: LIST
50508: LIST
50509: PUSH
50510: LD_STRING E
50512: PUSH
50513: LD_INT 0
50515: PUSH
50516: LD_INT 0
50518: PUSH
50519: LD_VAR 0 3
50523: PUSH
50524: LD_INT 0
50526: PUSH
50527: LD_INT 0
50529: PUSH
50530: LD_INT 0
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PPUSH
50546: CALL_OW 447
// end ;
50550: LD_VAR 0 2
50554: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
50555: LD_INT 0
50557: PPUSH
50558: PPUSH
50559: PPUSH
// tmp := [ ] ;
50560: LD_ADDR_VAR 0 5
50564: PUSH
50565: EMPTY
50566: ST_TO_ADDR
// for i in units do
50567: LD_ADDR_VAR 0 4
50571: PUSH
50572: LD_VAR 0 1
50576: PUSH
50577: FOR_IN
50578: IFFALSE 50616
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
50580: LD_ADDR_VAR 0 5
50584: PUSH
50585: LD_VAR 0 5
50589: PPUSH
50590: LD_VAR 0 5
50594: PUSH
50595: LD_INT 1
50597: PLUS
50598: PPUSH
50599: LD_VAR 0 4
50603: PPUSH
50604: CALL_OW 256
50608: PPUSH
50609: CALL_OW 2
50613: ST_TO_ADDR
50614: GO 50577
50616: POP
50617: POP
// if not tmp then
50618: LD_VAR 0 5
50622: NOT
50623: IFFALSE 50627
// exit ;
50625: GO 50675
// if asc then
50627: LD_VAR 0 2
50631: IFFALSE 50655
// result := SortListByListAsc ( units , tmp ) else
50633: LD_ADDR_VAR 0 3
50637: PUSH
50638: LD_VAR 0 1
50642: PPUSH
50643: LD_VAR 0 5
50647: PPUSH
50648: CALL_OW 76
50652: ST_TO_ADDR
50653: GO 50675
// result := SortListByListDesc ( units , tmp ) ;
50655: LD_ADDR_VAR 0 3
50659: PUSH
50660: LD_VAR 0 1
50664: PPUSH
50665: LD_VAR 0 5
50669: PPUSH
50670: CALL_OW 77
50674: ST_TO_ADDR
// end ;
50675: LD_VAR 0 3
50679: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
50680: LD_INT 0
50682: PPUSH
50683: PPUSH
// task := GetTaskList ( mech ) ;
50684: LD_ADDR_VAR 0 4
50688: PUSH
50689: LD_VAR 0 1
50693: PPUSH
50694: CALL_OW 437
50698: ST_TO_ADDR
// if not task then
50699: LD_VAR 0 4
50703: NOT
50704: IFFALSE 50708
// exit ;
50706: GO 50752
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
50708: LD_ADDR_VAR 0 3
50712: PUSH
50713: LD_VAR 0 4
50717: PUSH
50718: LD_INT 1
50720: ARRAY
50721: PUSH
50722: LD_INT 1
50724: ARRAY
50725: PUSH
50726: LD_STRING r
50728: EQUAL
50729: IFFALSE 50751
50731: PUSH
50732: LD_VAR 0 4
50736: PUSH
50737: LD_INT 1
50739: ARRAY
50740: PUSH
50741: LD_INT 4
50743: ARRAY
50744: PUSH
50745: LD_VAR 0 2
50749: EQUAL
50750: AND
50751: ST_TO_ADDR
// end ;
50752: LD_VAR 0 3
50756: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
50757: LD_INT 0
50759: PPUSH
// SetDir ( unit , d ) ;
50760: LD_VAR 0 1
50764: PPUSH
50765: LD_VAR 0 4
50769: PPUSH
50770: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
50774: LD_ADDR_VAR 0 6
50778: PUSH
50779: LD_VAR 0 1
50783: PPUSH
50784: LD_VAR 0 2
50788: PPUSH
50789: LD_VAR 0 3
50793: PPUSH
50794: LD_VAR 0 5
50798: PPUSH
50799: CALL_OW 48
50803: ST_TO_ADDR
// end ;
50804: LD_VAR 0 6
50808: RET
// export function ToNaturalNumber ( number ) ; begin
50809: LD_INT 0
50811: PPUSH
// result := number div 1 ;
50812: LD_ADDR_VAR 0 2
50816: PUSH
50817: LD_VAR 0 1
50821: PUSH
50822: LD_INT 1
50824: DIV
50825: ST_TO_ADDR
// if number < 0 then
50826: LD_VAR 0 1
50830: PUSH
50831: LD_INT 0
50833: LESS
50834: IFFALSE 50844
// result := 0 ;
50836: LD_ADDR_VAR 0 2
50840: PUSH
50841: LD_INT 0
50843: ST_TO_ADDR
// end ;
50844: LD_VAR 0 2
50848: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
50849: LD_INT 0
50851: PPUSH
50852: PPUSH
50853: PPUSH
// if not buildings then
50854: LD_VAR 0 1
50858: NOT
50859: IFFALSE 50863
// exit ;
50861: GO 50978
// tmp := [ ] ;
50863: LD_ADDR_VAR 0 5
50867: PUSH
50868: EMPTY
50869: ST_TO_ADDR
// for b in buildings do
50870: LD_ADDR_VAR 0 4
50874: PUSH
50875: LD_VAR 0 1
50879: PUSH
50880: FOR_IN
50881: IFFALSE 50919
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
50883: LD_ADDR_VAR 0 5
50887: PUSH
50888: LD_VAR 0 5
50892: PPUSH
50893: LD_VAR 0 5
50897: PUSH
50898: LD_INT 1
50900: PLUS
50901: PPUSH
50902: LD_VAR 0 4
50906: PPUSH
50907: CALL_OW 266
50911: PPUSH
50912: CALL_OW 1
50916: ST_TO_ADDR
50917: GO 50880
50919: POP
50920: POP
// if not tmp then
50921: LD_VAR 0 5
50925: NOT
50926: IFFALSE 50930
// exit ;
50928: GO 50978
// if asc then
50930: LD_VAR 0 2
50934: IFFALSE 50958
// result := SortListByListAsc ( buildings , tmp ) else
50936: LD_ADDR_VAR 0 3
50940: PUSH
50941: LD_VAR 0 1
50945: PPUSH
50946: LD_VAR 0 5
50950: PPUSH
50951: CALL_OW 76
50955: ST_TO_ADDR
50956: GO 50978
// result := SortListByListDesc ( buildings , tmp ) ;
50958: LD_ADDR_VAR 0 3
50962: PUSH
50963: LD_VAR 0 1
50967: PPUSH
50968: LD_VAR 0 5
50972: PPUSH
50973: CALL_OW 77
50977: ST_TO_ADDR
// end ;
50978: LD_VAR 0 3
50982: RET
// export function SortByClass ( units , class ) ; var un ; begin
50983: LD_INT 0
50985: PPUSH
50986: PPUSH
// if not units or not class then
50987: LD_VAR 0 1
50991: NOT
50992: IFTRUE 51001
50994: PUSH
50995: LD_VAR 0 2
50999: NOT
51000: OR
51001: IFFALSE 51005
// exit ;
51003: GO 51100
// result := [ ] ;
51005: LD_ADDR_VAR 0 3
51009: PUSH
51010: EMPTY
51011: ST_TO_ADDR
// for un in units do
51012: LD_ADDR_VAR 0 4
51016: PUSH
51017: LD_VAR 0 1
51021: PUSH
51022: FOR_IN
51023: IFFALSE 51098
// if GetClass ( un ) = class then
51025: LD_VAR 0 4
51029: PPUSH
51030: CALL_OW 257
51034: PUSH
51035: LD_VAR 0 2
51039: EQUAL
51040: IFFALSE 51067
// result := Insert ( result , 1 , un ) else
51042: LD_ADDR_VAR 0 3
51046: PUSH
51047: LD_VAR 0 3
51051: PPUSH
51052: LD_INT 1
51054: PPUSH
51055: LD_VAR 0 4
51059: PPUSH
51060: CALL_OW 2
51064: ST_TO_ADDR
51065: GO 51096
// result := Replace ( result , result + 1 , un ) ;
51067: LD_ADDR_VAR 0 3
51071: PUSH
51072: LD_VAR 0 3
51076: PPUSH
51077: LD_VAR 0 3
51081: PUSH
51082: LD_INT 1
51084: PLUS
51085: PPUSH
51086: LD_VAR 0 4
51090: PPUSH
51091: CALL_OW 1
51095: ST_TO_ADDR
51096: GO 51022
51098: POP
51099: POP
// end ;
51100: LD_VAR 0 3
51104: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
51105: LD_INT 0
51107: PPUSH
51108: PPUSH
51109: PPUSH
51110: PPUSH
51111: PPUSH
51112: PPUSH
51113: PPUSH
// result := [ ] ;
51114: LD_ADDR_VAR 0 4
51118: PUSH
51119: EMPTY
51120: ST_TO_ADDR
// if x - r < 0 then
51121: LD_VAR 0 1
51125: PUSH
51126: LD_VAR 0 3
51130: MINUS
51131: PUSH
51132: LD_INT 0
51134: LESS
51135: IFFALSE 51147
// min_x := 0 else
51137: LD_ADDR_VAR 0 8
51141: PUSH
51142: LD_INT 0
51144: ST_TO_ADDR
51145: GO 51163
// min_x := x - r ;
51147: LD_ADDR_VAR 0 8
51151: PUSH
51152: LD_VAR 0 1
51156: PUSH
51157: LD_VAR 0 3
51161: MINUS
51162: ST_TO_ADDR
// if y - r < 0 then
51163: LD_VAR 0 2
51167: PUSH
51168: LD_VAR 0 3
51172: MINUS
51173: PUSH
51174: LD_INT 0
51176: LESS
51177: IFFALSE 51189
// min_y := 0 else
51179: LD_ADDR_VAR 0 7
51183: PUSH
51184: LD_INT 0
51186: ST_TO_ADDR
51187: GO 51205
// min_y := y - r ;
51189: LD_ADDR_VAR 0 7
51193: PUSH
51194: LD_VAR 0 2
51198: PUSH
51199: LD_VAR 0 3
51203: MINUS
51204: ST_TO_ADDR
// max_x := x + r ;
51205: LD_ADDR_VAR 0 9
51209: PUSH
51210: LD_VAR 0 1
51214: PUSH
51215: LD_VAR 0 3
51219: PLUS
51220: ST_TO_ADDR
// max_y := y + r ;
51221: LD_ADDR_VAR 0 10
51225: PUSH
51226: LD_VAR 0 2
51230: PUSH
51231: LD_VAR 0 3
51235: PLUS
51236: ST_TO_ADDR
// for _x = min_x to max_x do
51237: LD_ADDR_VAR 0 5
51241: PUSH
51242: DOUBLE
51243: LD_VAR 0 8
51247: DEC
51248: ST_TO_ADDR
51249: LD_VAR 0 9
51253: PUSH
51254: FOR_TO
51255: IFFALSE 51356
// for _y = min_y to max_y do
51257: LD_ADDR_VAR 0 6
51261: PUSH
51262: DOUBLE
51263: LD_VAR 0 7
51267: DEC
51268: ST_TO_ADDR
51269: LD_VAR 0 10
51273: PUSH
51274: FOR_TO
51275: IFFALSE 51352
// begin if not ValidHex ( _x , _y ) then
51277: LD_VAR 0 5
51281: PPUSH
51282: LD_VAR 0 6
51286: PPUSH
51287: CALL_OW 488
51291: NOT
51292: IFFALSE 51296
// continue ;
51294: GO 51274
// if GetResourceTypeXY ( _x , _y ) then
51296: LD_VAR 0 5
51300: PPUSH
51301: LD_VAR 0 6
51305: PPUSH
51306: CALL_OW 283
51310: IFFALSE 51350
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
51312: LD_ADDR_VAR 0 4
51316: PUSH
51317: LD_VAR 0 4
51321: PPUSH
51322: LD_VAR 0 4
51326: PUSH
51327: LD_INT 1
51329: PLUS
51330: PPUSH
51331: LD_VAR 0 5
51335: PUSH
51336: LD_VAR 0 6
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PPUSH
51345: CALL_OW 1
51349: ST_TO_ADDR
// end ;
51350: GO 51274
51352: POP
51353: POP
51354: GO 51254
51356: POP
51357: POP
// end ;
51358: LD_VAR 0 4
51362: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
51363: LD_INT 0
51365: PPUSH
51366: PPUSH
51367: PPUSH
51368: PPUSH
51369: PPUSH
51370: PPUSH
51371: PPUSH
51372: PPUSH
// if not units then
51373: LD_VAR 0 1
51377: NOT
51378: IFFALSE 51382
// exit ;
51380: GO 51914
// result := UnitFilter ( units , [ f_ok ] ) ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_VAR 0 1
51391: PPUSH
51392: LD_INT 50
51394: PUSH
51395: EMPTY
51396: LIST
51397: PPUSH
51398: CALL_OW 72
51402: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
51403: LD_ADDR_VAR 0 8
51407: PUSH
51408: LD_VAR 0 1
51412: PUSH
51413: LD_INT 1
51415: ARRAY
51416: PPUSH
51417: CALL_OW 255
51421: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
51422: LD_ADDR_VAR 0 10
51426: PUSH
51427: LD_INT 29
51429: PUSH
51430: LD_INT 91
51432: PUSH
51433: LD_INT 49
51435: PUSH
51436: EMPTY
51437: LIST
51438: LIST
51439: LIST
51440: ST_TO_ADDR
// if not result then
51441: LD_VAR 0 3
51445: NOT
51446: IFFALSE 51450
// exit ;
51448: GO 51914
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
51450: LD_ADDR_VAR 0 5
51454: PUSH
51455: LD_INT 81
51457: PUSH
51458: LD_VAR 0 8
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PPUSH
51467: CALL_OW 69
51471: ST_TO_ADDR
// for i in result do
51472: LD_ADDR_VAR 0 4
51476: PUSH
51477: LD_VAR 0 3
51481: PUSH
51482: FOR_IN
51483: IFFALSE 51912
// begin tag := GetTag ( i ) + 1 ;
51485: LD_ADDR_VAR 0 9
51489: PUSH
51490: LD_VAR 0 4
51494: PPUSH
51495: CALL_OW 110
51499: PUSH
51500: LD_INT 1
51502: PLUS
51503: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
51504: LD_ADDR_VAR 0 7
51508: PUSH
51509: LD_VAR 0 4
51513: PPUSH
51514: CALL_OW 250
51518: PPUSH
51519: LD_VAR 0 4
51523: PPUSH
51524: CALL_OW 251
51528: PPUSH
51529: LD_INT 4
51531: PPUSH
51532: CALL 51105 0 3
51536: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
51537: LD_VAR 0 4
51541: PPUSH
51542: CALL_OW 247
51546: PUSH
51547: LD_INT 2
51549: EQUAL
51550: IFFALSE 51562
51552: PUSH
51553: LD_VAR 0 7
51557: PUSH
51558: LD_INT 2
51560: GREATER
51561: AND
51562: IFFALSE 51582
51564: PUSH
51565: LD_VAR 0 4
51569: PPUSH
51570: CALL_OW 264
51574: PUSH
51575: LD_VAR 0 10
51579: IN
51580: NOT
51581: AND
51582: IFFALSE 51621
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
51584: LD_VAR 0 4
51588: PPUSH
51589: LD_VAR 0 7
51593: PUSH
51594: LD_INT 1
51596: ARRAY
51597: PUSH
51598: LD_INT 1
51600: ARRAY
51601: PPUSH
51602: LD_VAR 0 7
51606: PUSH
51607: LD_INT 1
51609: ARRAY
51610: PUSH
51611: LD_INT 2
51613: ARRAY
51614: PPUSH
51615: CALL_OW 116
51619: GO 51910
// if path > tag then
51621: LD_VAR 0 2
51625: PUSH
51626: LD_VAR 0 9
51630: GREATER
51631: IFFALSE 51839
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
51633: LD_ADDR_VAR 0 6
51637: PUSH
51638: LD_VAR 0 5
51642: PPUSH
51643: LD_INT 91
51645: PUSH
51646: LD_VAR 0 4
51650: PUSH
51651: LD_INT 8
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: LIST
51658: PPUSH
51659: CALL_OW 72
51663: ST_TO_ADDR
// if nearEnemy then
51664: LD_VAR 0 6
51668: IFFALSE 51737
// begin if GetWeapon ( i ) = ru_time_lapser then
51670: LD_VAR 0 4
51674: PPUSH
51675: CALL_OW 264
51679: PUSH
51680: LD_INT 49
51682: EQUAL
51683: IFFALSE 51711
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
51685: LD_VAR 0 4
51689: PPUSH
51690: LD_VAR 0 6
51694: PPUSH
51695: LD_VAR 0 4
51699: PPUSH
51700: CALL_OW 74
51704: PPUSH
51705: CALL_OW 112
51709: GO 51735
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
51711: LD_VAR 0 4
51715: PPUSH
51716: LD_VAR 0 6
51720: PPUSH
51721: LD_VAR 0 4
51725: PPUSH
51726: CALL_OW 74
51730: PPUSH
51731: CALL 52995 0 2
// end else
51735: GO 51837
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
51737: LD_VAR 0 4
51741: PPUSH
51742: LD_VAR 0 2
51746: PUSH
51747: LD_VAR 0 9
51751: ARRAY
51752: PUSH
51753: LD_INT 1
51755: ARRAY
51756: PPUSH
51757: LD_VAR 0 2
51761: PUSH
51762: LD_VAR 0 9
51766: ARRAY
51767: PUSH
51768: LD_INT 2
51770: ARRAY
51771: PPUSH
51772: CALL_OW 297
51776: PUSH
51777: LD_INT 6
51779: GREATER
51780: IFFALSE 51823
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
51782: LD_VAR 0 4
51786: PPUSH
51787: LD_VAR 0 2
51791: PUSH
51792: LD_VAR 0 9
51796: ARRAY
51797: PUSH
51798: LD_INT 1
51800: ARRAY
51801: PPUSH
51802: LD_VAR 0 2
51806: PUSH
51807: LD_VAR 0 9
51811: ARRAY
51812: PUSH
51813: LD_INT 2
51815: ARRAY
51816: PPUSH
51817: CALL_OW 114
51821: GO 51837
// SetTag ( i , tag ) ;
51823: LD_VAR 0 4
51827: PPUSH
51828: LD_VAR 0 9
51832: PPUSH
51833: CALL_OW 109
// end else
51837: GO 51910
// if enemy then
51839: LD_VAR 0 5
51843: IFFALSE 51910
// begin if GetWeapon ( i ) = ru_time_lapser then
51845: LD_VAR 0 4
51849: PPUSH
51850: CALL_OW 264
51854: PUSH
51855: LD_INT 49
51857: EQUAL
51858: IFFALSE 51886
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
51860: LD_VAR 0 4
51864: PPUSH
51865: LD_VAR 0 5
51869: PPUSH
51870: LD_VAR 0 4
51874: PPUSH
51875: CALL_OW 74
51879: PPUSH
51880: CALL_OW 112
51884: GO 51910
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
51886: LD_VAR 0 4
51890: PPUSH
51891: LD_VAR 0 5
51895: PPUSH
51896: LD_VAR 0 4
51900: PPUSH
51901: CALL_OW 74
51905: PPUSH
51906: CALL 52995 0 2
// end ; end ;
51910: GO 51482
51912: POP
51913: POP
// end ;
51914: LD_VAR 0 3
51918: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
51919: LD_INT 0
51921: PPUSH
51922: PPUSH
51923: PPUSH
// if not unit or IsInUnit ( unit ) then
51924: LD_VAR 0 1
51928: NOT
51929: IFTRUE 51942
51931: PUSH
51932: LD_VAR 0 1
51936: PPUSH
51937: CALL_OW 310
51941: OR
51942: IFFALSE 51946
// exit ;
51944: GO 52037
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
51946: LD_ADDR_VAR 0 4
51950: PUSH
51951: LD_VAR 0 1
51955: PPUSH
51956: CALL_OW 250
51960: PPUSH
51961: LD_VAR 0 2
51965: PPUSH
51966: LD_INT 1
51968: PPUSH
51969: CALL_OW 272
51973: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
51974: LD_ADDR_VAR 0 5
51978: PUSH
51979: LD_VAR 0 1
51983: PPUSH
51984: CALL_OW 251
51988: PPUSH
51989: LD_VAR 0 2
51993: PPUSH
51994: LD_INT 1
51996: PPUSH
51997: CALL_OW 273
52001: ST_TO_ADDR
// if ValidHex ( x , y ) then
52002: LD_VAR 0 4
52006: PPUSH
52007: LD_VAR 0 5
52011: PPUSH
52012: CALL_OW 488
52016: IFFALSE 52037
// ComTurnXY ( unit , x , y ) ;
52018: LD_VAR 0 1
52022: PPUSH
52023: LD_VAR 0 4
52027: PPUSH
52028: LD_VAR 0 5
52032: PPUSH
52033: CALL_OW 118
// end ;
52037: LD_VAR 0 3
52041: RET
// export function SeeUnits ( side , units ) ; var i ; begin
52042: LD_INT 0
52044: PPUSH
52045: PPUSH
// result := false ;
52046: LD_ADDR_VAR 0 3
52050: PUSH
52051: LD_INT 0
52053: ST_TO_ADDR
// if not units then
52054: LD_VAR 0 2
52058: NOT
52059: IFFALSE 52063
// exit ;
52061: GO 52108
// for i in units do
52063: LD_ADDR_VAR 0 4
52067: PUSH
52068: LD_VAR 0 2
52072: PUSH
52073: FOR_IN
52074: IFFALSE 52106
// if See ( side , i ) then
52076: LD_VAR 0 1
52080: PPUSH
52081: LD_VAR 0 4
52085: PPUSH
52086: CALL_OW 292
52090: IFFALSE 52104
// begin result := true ;
52092: LD_ADDR_VAR 0 3
52096: PUSH
52097: LD_INT 1
52099: ST_TO_ADDR
// exit ;
52100: POP
52101: POP
52102: GO 52108
// end ;
52104: GO 52073
52106: POP
52107: POP
// end ;
52108: LD_VAR 0 3
52112: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
52113: LD_INT 0
52115: PPUSH
52116: PPUSH
52117: PPUSH
52118: PPUSH
// if not unit or not points then
52119: LD_VAR 0 1
52123: NOT
52124: IFTRUE 52133
52126: PUSH
52127: LD_VAR 0 2
52131: NOT
52132: OR
52133: IFFALSE 52137
// exit ;
52135: GO 52227
// dist := 99999 ;
52137: LD_ADDR_VAR 0 5
52141: PUSH
52142: LD_INT 99999
52144: ST_TO_ADDR
// for i in points do
52145: LD_ADDR_VAR 0 4
52149: PUSH
52150: LD_VAR 0 2
52154: PUSH
52155: FOR_IN
52156: IFFALSE 52225
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
52158: LD_ADDR_VAR 0 6
52162: PUSH
52163: LD_VAR 0 1
52167: PPUSH
52168: LD_VAR 0 4
52172: PUSH
52173: LD_INT 1
52175: ARRAY
52176: PPUSH
52177: LD_VAR 0 4
52181: PUSH
52182: LD_INT 2
52184: ARRAY
52185: PPUSH
52186: CALL_OW 297
52190: ST_TO_ADDR
// if tmpDist < dist then
52191: LD_VAR 0 6
52195: PUSH
52196: LD_VAR 0 5
52200: LESS
52201: IFFALSE 52223
// begin result := i ;
52203: LD_ADDR_VAR 0 3
52207: PUSH
52208: LD_VAR 0 4
52212: ST_TO_ADDR
// dist := tmpDist ;
52213: LD_ADDR_VAR 0 5
52217: PUSH
52218: LD_VAR 0 6
52222: ST_TO_ADDR
// end ; end ;
52223: GO 52155
52225: POP
52226: POP
// end ;
52227: LD_VAR 0 3
52231: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
52232: LD_INT 0
52234: PPUSH
// uc_side := side ;
52235: LD_ADDR_OWVAR 20
52239: PUSH
52240: LD_VAR 0 1
52244: ST_TO_ADDR
// uc_nation := 3 ;
52245: LD_ADDR_OWVAR 21
52249: PUSH
52250: LD_INT 3
52252: ST_TO_ADDR
// vc_chassis := 25 ;
52253: LD_ADDR_OWVAR 37
52257: PUSH
52258: LD_INT 25
52260: ST_TO_ADDR
// vc_engine := engine_siberite ;
52261: LD_ADDR_OWVAR 39
52265: PUSH
52266: LD_INT 3
52268: ST_TO_ADDR
// vc_control := control_computer ;
52269: LD_ADDR_OWVAR 38
52273: PUSH
52274: LD_INT 3
52276: ST_TO_ADDR
// vc_weapon := 59 ;
52277: LD_ADDR_OWVAR 40
52281: PUSH
52282: LD_INT 59
52284: ST_TO_ADDR
// result := CreateVehicle ;
52285: LD_ADDR_VAR 0 5
52289: PUSH
52290: CALL_OW 45
52294: ST_TO_ADDR
// SetDir ( result , d ) ;
52295: LD_VAR 0 5
52299: PPUSH
52300: LD_VAR 0 4
52304: PPUSH
52305: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
52309: LD_VAR 0 5
52313: PPUSH
52314: LD_VAR 0 2
52318: PPUSH
52319: LD_VAR 0 3
52323: PPUSH
52324: LD_INT 0
52326: PPUSH
52327: CALL_OW 48
// end ;
52331: LD_VAR 0 5
52335: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
52336: LD_INT 0
52338: PPUSH
52339: PPUSH
52340: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
52341: LD_ADDR_VAR 0 2
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 0
52351: PUSH
52352: LD_INT 0
52354: PUSH
52355: LD_INT 0
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
52364: LD_VAR 0 1
52368: NOT
52369: IFTRUE 52402
52371: PUSH
52372: LD_VAR 0 1
52376: PPUSH
52377: CALL_OW 264
52381: PUSH
52382: LD_INT 12
52384: PUSH
52385: LD_INT 51
52387: PUSH
52388: LD_INT 32
52390: PUSH
52391: LD_INT 89
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: IN
52400: NOT
52401: OR
52402: IFFALSE 52406
// exit ;
52404: GO 52504
// for i := 1 to 3 do
52406: LD_ADDR_VAR 0 3
52410: PUSH
52411: DOUBLE
52412: LD_INT 1
52414: DEC
52415: ST_TO_ADDR
52416: LD_INT 3
52418: PUSH
52419: FOR_TO
52420: IFFALSE 52502
// begin tmp := GetCargo ( cargo , i ) ;
52422: LD_ADDR_VAR 0 4
52426: PUSH
52427: LD_VAR 0 1
52431: PPUSH
52432: LD_VAR 0 3
52436: PPUSH
52437: CALL_OW 289
52441: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
52442: LD_ADDR_VAR 0 2
52446: PUSH
52447: LD_VAR 0 2
52451: PPUSH
52452: LD_VAR 0 3
52456: PPUSH
52457: LD_VAR 0 4
52461: PPUSH
52462: CALL_OW 1
52466: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
52467: LD_ADDR_VAR 0 2
52471: PUSH
52472: LD_VAR 0 2
52476: PPUSH
52477: LD_INT 4
52479: PPUSH
52480: LD_VAR 0 2
52484: PUSH
52485: LD_INT 4
52487: ARRAY
52488: PUSH
52489: LD_VAR 0 4
52493: PLUS
52494: PPUSH
52495: CALL_OW 1
52499: ST_TO_ADDR
// end ;
52500: GO 52419
52502: POP
52503: POP
// end ;
52504: LD_VAR 0 2
52508: RET
// export function Length ( array ) ; begin
52509: LD_INT 0
52511: PPUSH
// result := array + 0 ;
52512: LD_ADDR_VAR 0 2
52516: PUSH
52517: LD_VAR 0 1
52521: PUSH
52522: LD_INT 0
52524: PLUS
52525: ST_TO_ADDR
// end ;
52526: LD_VAR 0 2
52530: RET
// export function PrepareArray ( array ) ; begin
52531: LD_INT 0
52533: PPUSH
// result := array diff 0 ;
52534: LD_ADDR_VAR 0 2
52538: PUSH
52539: LD_VAR 0 1
52543: PUSH
52544: LD_INT 0
52546: DIFF
52547: ST_TO_ADDR
// if not result [ 1 ] then
52548: LD_VAR 0 2
52552: PUSH
52553: LD_INT 1
52555: ARRAY
52556: NOT
52557: IFFALSE 52577
// result := Delete ( result , 1 ) ;
52559: LD_ADDR_VAR 0 2
52563: PUSH
52564: LD_VAR 0 2
52568: PPUSH
52569: LD_INT 1
52571: PPUSH
52572: CALL_OW 3
52576: ST_TO_ADDR
// end ;
52577: LD_VAR 0 2
52581: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
52582: LD_INT 0
52584: PPUSH
52585: PPUSH
52586: PPUSH
52587: PPUSH
// sibRocketRange := 25 ;
52588: LD_ADDR_VAR 0 6
52592: PUSH
52593: LD_INT 25
52595: ST_TO_ADDR
// result := false ;
52596: LD_ADDR_VAR 0 4
52600: PUSH
52601: LD_INT 0
52603: ST_TO_ADDR
// for i := 0 to 5 do
52604: LD_ADDR_VAR 0 5
52608: PUSH
52609: DOUBLE
52610: LD_INT 0
52612: DEC
52613: ST_TO_ADDR
52614: LD_INT 5
52616: PUSH
52617: FOR_TO
52618: IFFALSE 52685
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
52620: LD_VAR 0 1
52624: PPUSH
52625: LD_VAR 0 5
52629: PPUSH
52630: LD_VAR 0 6
52634: PPUSH
52635: CALL_OW 272
52639: PPUSH
52640: LD_VAR 0 2
52644: PPUSH
52645: LD_VAR 0 5
52649: PPUSH
52650: LD_VAR 0 6
52654: PPUSH
52655: CALL_OW 273
52659: PPUSH
52660: LD_VAR 0 3
52664: PPUSH
52665: CALL_OW 309
52669: IFFALSE 52683
// begin result := true ;
52671: LD_ADDR_VAR 0 4
52675: PUSH
52676: LD_INT 1
52678: ST_TO_ADDR
// exit ;
52679: POP
52680: POP
52681: GO 52687
// end ;
52683: GO 52617
52685: POP
52686: POP
// end ;
52687: LD_VAR 0 4
52691: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
52692: LD_INT 0
52694: PPUSH
52695: PPUSH
52696: PPUSH
// if btype = b_depot then
52697: LD_VAR 0 2
52701: PUSH
52702: LD_INT 0
52704: EQUAL
52705: IFFALSE 52717
// begin result := true ;
52707: LD_ADDR_VAR 0 3
52711: PUSH
52712: LD_INT 1
52714: ST_TO_ADDR
// exit ;
52715: GO 52837
// end ; pom := GetBase ( depot ) ;
52717: LD_ADDR_VAR 0 4
52721: PUSH
52722: LD_VAR 0 1
52726: PPUSH
52727: CALL_OW 274
52731: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
52732: LD_ADDR_VAR 0 5
52736: PUSH
52737: LD_VAR 0 2
52741: PPUSH
52742: LD_VAR 0 1
52746: PPUSH
52747: CALL_OW 248
52751: PPUSH
52752: CALL_OW 450
52756: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
52757: LD_ADDR_VAR 0 3
52761: PUSH
52762: LD_VAR 0 4
52766: PPUSH
52767: LD_INT 1
52769: PPUSH
52770: CALL_OW 275
52774: PUSH
52775: LD_VAR 0 5
52779: PUSH
52780: LD_INT 1
52782: ARRAY
52783: GREATEREQUAL
52784: IFFALSE 52810
52786: PUSH
52787: LD_VAR 0 4
52791: PPUSH
52792: LD_INT 2
52794: PPUSH
52795: CALL_OW 275
52799: PUSH
52800: LD_VAR 0 5
52804: PUSH
52805: LD_INT 2
52807: ARRAY
52808: GREATEREQUAL
52809: AND
52810: IFFALSE 52836
52812: PUSH
52813: LD_VAR 0 4
52817: PPUSH
52818: LD_INT 3
52820: PPUSH
52821: CALL_OW 275
52825: PUSH
52826: LD_VAR 0 5
52830: PUSH
52831: LD_INT 3
52833: ARRAY
52834: GREATEREQUAL
52835: AND
52836: ST_TO_ADDR
// end ;
52837: LD_VAR 0 3
52841: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
52842: LD_INT 0
52844: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
52845: LD_VAR 0 1
52849: PPUSH
52850: LD_VAR 0 2
52854: PPUSH
52855: LD_INT 0
52857: PPUSH
52858: LD_INT 0
52860: PPUSH
52861: LD_INT 1
52863: PPUSH
52864: LD_INT 0
52866: PPUSH
52867: CALL_OW 587
// end ;
52871: LD_VAR 0 3
52875: RET
// export function CenterOnNow ( unit ) ; begin
52876: LD_INT 0
52878: PPUSH
// result := IsInUnit ( unit ) ;
52879: LD_ADDR_VAR 0 2
52883: PUSH
52884: LD_VAR 0 1
52888: PPUSH
52889: CALL_OW 310
52893: ST_TO_ADDR
// if not result then
52894: LD_VAR 0 2
52898: NOT
52899: IFFALSE 52911
// result := unit ;
52901: LD_ADDR_VAR 0 2
52905: PUSH
52906: LD_VAR 0 1
52910: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
52911: LD_VAR 0 1
52915: PPUSH
52916: CALL_OW 87
// end ;
52920: LD_VAR 0 2
52924: RET
// export function ComMoveHex ( unit , hex ) ; begin
52925: LD_INT 0
52927: PPUSH
// if not hex then
52928: LD_VAR 0 2
52932: NOT
52933: IFFALSE 52937
// exit ;
52935: GO 52990
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
52937: LD_VAR 0 2
52941: PUSH
52942: LD_INT 1
52944: ARRAY
52945: PPUSH
52946: LD_VAR 0 2
52950: PUSH
52951: LD_INT 2
52953: ARRAY
52954: PPUSH
52955: CALL_OW 428
52959: IFFALSE 52963
// exit ;
52961: GO 52990
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
52963: LD_VAR 0 1
52967: PPUSH
52968: LD_VAR 0 2
52972: PUSH
52973: LD_INT 1
52975: ARRAY
52976: PPUSH
52977: LD_VAR 0 2
52981: PUSH
52982: LD_INT 2
52984: ARRAY
52985: PPUSH
52986: CALL_OW 111
// end ;
52990: LD_VAR 0 3
52994: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
52995: LD_INT 0
52997: PPUSH
52998: PPUSH
52999: PPUSH
// if not unit or not enemy then
53000: LD_VAR 0 1
53004: NOT
53005: IFTRUE 53014
53007: PUSH
53008: LD_VAR 0 2
53012: NOT
53013: OR
53014: IFFALSE 53018
// exit ;
53016: GO 53144
// x := GetX ( enemy ) ;
53018: LD_ADDR_VAR 0 4
53022: PUSH
53023: LD_VAR 0 2
53027: PPUSH
53028: CALL_OW 250
53032: ST_TO_ADDR
// y := GetY ( enemy ) ;
53033: LD_ADDR_VAR 0 5
53037: PUSH
53038: LD_VAR 0 2
53042: PPUSH
53043: CALL_OW 251
53047: ST_TO_ADDR
// if ValidHex ( x , y ) then
53048: LD_VAR 0 4
53052: PPUSH
53053: LD_VAR 0 5
53057: PPUSH
53058: CALL_OW 488
53062: IFFALSE 53144
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
53064: LD_VAR 0 2
53068: PPUSH
53069: CALL_OW 247
53073: PUSH
53074: LD_INT 3
53076: PUSH
53077: LD_INT 2
53079: PUSH
53080: EMPTY
53081: LIST
53082: LIST
53083: IN
53084: IFTRUE 53107
53086: PUSH
53087: LD_VAR 0 1
53091: PPUSH
53092: CALL_OW 255
53096: PPUSH
53097: LD_VAR 0 2
53101: PPUSH
53102: CALL_OW 292
53106: OR
53107: IFFALSE 53125
// ComAttackUnit ( unit , enemy ) else
53109: LD_VAR 0 1
53113: PPUSH
53114: LD_VAR 0 2
53118: PPUSH
53119: CALL_OW 115
53123: GO 53144
// ComAgressiveMove ( unit , x , y ) ;
53125: LD_VAR 0 1
53129: PPUSH
53130: LD_VAR 0 4
53134: PPUSH
53135: LD_VAR 0 5
53139: PPUSH
53140: CALL_OW 114
// end ;
53144: LD_VAR 0 3
53148: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
53149: LD_INT 0
53151: PPUSH
53152: PPUSH
53153: PPUSH
// list := AreaToList ( area , 0 ) ;
53154: LD_ADDR_VAR 0 5
53158: PUSH
53159: LD_VAR 0 1
53163: PPUSH
53164: LD_INT 0
53166: PPUSH
53167: CALL_OW 517
53171: ST_TO_ADDR
// if not list then
53172: LD_VAR 0 5
53176: NOT
53177: IFFALSE 53181
// exit ;
53179: GO 53311
// if all then
53181: LD_VAR 0 2
53185: IFFALSE 53273
// begin for i := 1 to list [ 1 ] do
53187: LD_ADDR_VAR 0 4
53191: PUSH
53192: DOUBLE
53193: LD_INT 1
53195: DEC
53196: ST_TO_ADDR
53197: LD_VAR 0 5
53201: PUSH
53202: LD_INT 1
53204: ARRAY
53205: PUSH
53206: FOR_TO
53207: IFFALSE 53269
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
53209: LD_ADDR_VAR 0 3
53213: PUSH
53214: LD_VAR 0 3
53218: PPUSH
53219: LD_VAR 0 3
53223: PUSH
53224: LD_INT 1
53226: PLUS
53227: PPUSH
53228: LD_VAR 0 5
53232: PUSH
53233: LD_INT 1
53235: ARRAY
53236: PUSH
53237: LD_VAR 0 4
53241: ARRAY
53242: PUSH
53243: LD_VAR 0 5
53247: PUSH
53248: LD_INT 2
53250: ARRAY
53251: PUSH
53252: LD_VAR 0 4
53256: ARRAY
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: PPUSH
53262: CALL_OW 1
53266: ST_TO_ADDR
53267: GO 53206
53269: POP
53270: POP
// exit ;
53271: GO 53311
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
53273: LD_ADDR_VAR 0 3
53277: PUSH
53278: LD_VAR 0 5
53282: PUSH
53283: LD_INT 1
53285: ARRAY
53286: PUSH
53287: LD_INT 1
53289: ARRAY
53290: PUSH
53291: LD_VAR 0 5
53295: PUSH
53296: LD_INT 2
53298: ARRAY
53299: PUSH
53300: LD_INT 1
53302: ARRAY
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: EMPTY
53309: LIST
53310: ST_TO_ADDR
// end ;
53311: LD_VAR 0 3
53315: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
53316: LD_INT 0
53318: PPUSH
53319: PPUSH
// list := AreaToList ( area , 0 ) ;
53320: LD_ADDR_VAR 0 4
53324: PUSH
53325: LD_VAR 0 1
53329: PPUSH
53330: LD_INT 0
53332: PPUSH
53333: CALL_OW 517
53337: ST_TO_ADDR
// if not list then
53338: LD_VAR 0 4
53342: NOT
53343: IFFALSE 53347
// exit ;
53345: GO 53388
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
53347: LD_ADDR_VAR 0 3
53351: PUSH
53352: LD_VAR 0 4
53356: PUSH
53357: LD_INT 1
53359: ARRAY
53360: PUSH
53361: LD_INT 1
53363: ARRAY
53364: PUSH
53365: LD_VAR 0 4
53369: PUSH
53370: LD_INT 2
53372: ARRAY
53373: PUSH
53374: LD_INT 1
53376: ARRAY
53377: PUSH
53378: LD_VAR 0 2
53382: PUSH
53383: EMPTY
53384: LIST
53385: LIST
53386: LIST
53387: ST_TO_ADDR
// end ;
53388: LD_VAR 0 3
53392: RET
// export function First ( array ) ; begin
53393: LD_INT 0
53395: PPUSH
// if not array then
53396: LD_VAR 0 1
53400: NOT
53401: IFFALSE 53405
// exit ;
53403: GO 53419
// result := array [ 1 ] ;
53405: LD_ADDR_VAR 0 2
53409: PUSH
53410: LD_VAR 0 1
53414: PUSH
53415: LD_INT 1
53417: ARRAY
53418: ST_TO_ADDR
// end ;
53419: LD_VAR 0 2
53423: RET
// export function Last ( array ) ; begin
53424: LD_INT 0
53426: PPUSH
// if not array then
53427: LD_VAR 0 1
53431: NOT
53432: IFFALSE 53436
// exit ;
53434: GO 53452
// result := array [ array ] ;
53436: LD_ADDR_VAR 0 2
53440: PUSH
53441: LD_VAR 0 1
53445: PUSH
53446: LD_VAR 0 1
53450: ARRAY
53451: ST_TO_ADDR
// end ;
53452: LD_VAR 0 2
53456: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
53457: LD_INT 0
53459: PPUSH
53460: PPUSH
// result := [ ] ;
53461: LD_ADDR_VAR 0 5
53465: PUSH
53466: EMPTY
53467: ST_TO_ADDR
// if not array then
53468: LD_VAR 0 1
53472: NOT
53473: IFFALSE 53477
// exit ;
53475: GO 53589
// for i := 1 to array do
53477: LD_ADDR_VAR 0 6
53481: PUSH
53482: DOUBLE
53483: LD_INT 1
53485: DEC
53486: ST_TO_ADDR
53487: LD_VAR 0 1
53491: PUSH
53492: FOR_TO
53493: IFFALSE 53587
// if array [ i ] [ index ] = value then
53495: LD_VAR 0 1
53499: PUSH
53500: LD_VAR 0 6
53504: ARRAY
53505: PUSH
53506: LD_VAR 0 2
53510: ARRAY
53511: PUSH
53512: LD_VAR 0 3
53516: EQUAL
53517: IFFALSE 53585
// begin if indexColumn then
53519: LD_VAR 0 4
53523: IFFALSE 53559
// result := Join ( result , array [ i ] [ indexColumn ] ) else
53525: LD_ADDR_VAR 0 5
53529: PUSH
53530: LD_VAR 0 5
53534: PPUSH
53535: LD_VAR 0 1
53539: PUSH
53540: LD_VAR 0 6
53544: ARRAY
53545: PUSH
53546: LD_VAR 0 4
53550: ARRAY
53551: PPUSH
53552: CALL 48597 0 2
53556: ST_TO_ADDR
53557: GO 53585
// result := Join ( result , array [ i ] ) ;
53559: LD_ADDR_VAR 0 5
53563: PUSH
53564: LD_VAR 0 5
53568: PPUSH
53569: LD_VAR 0 1
53573: PUSH
53574: LD_VAR 0 6
53578: ARRAY
53579: PPUSH
53580: CALL 48597 0 2
53584: ST_TO_ADDR
// end ;
53585: GO 53492
53587: POP
53588: POP
// end ;
53589: LD_VAR 0 5
53593: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
53594: LD_INT 0
53596: PPUSH
// if not vehicles or not parkingPoint then
53597: LD_VAR 0 1
53601: NOT
53602: IFTRUE 53611
53604: PUSH
53605: LD_VAR 0 2
53609: NOT
53610: OR
53611: IFFALSE 53615
// exit ;
53613: GO 53713
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
53615: LD_ADDR_VAR 0 1
53619: PUSH
53620: LD_VAR 0 1
53624: PPUSH
53625: LD_INT 50
53627: PUSH
53628: EMPTY
53629: LIST
53630: PUSH
53631: LD_INT 3
53633: PUSH
53634: LD_INT 92
53636: PUSH
53637: LD_VAR 0 2
53641: PUSH
53642: LD_INT 1
53644: ARRAY
53645: PUSH
53646: LD_VAR 0 2
53650: PUSH
53651: LD_INT 2
53653: ARRAY
53654: PUSH
53655: LD_INT 8
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: PPUSH
53672: CALL_OW 72
53676: ST_TO_ADDR
// if not vehicles then
53677: LD_VAR 0 1
53681: NOT
53682: IFFALSE 53686
// exit ;
53684: GO 53713
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
53686: LD_VAR 0 1
53690: PPUSH
53691: LD_VAR 0 2
53695: PUSH
53696: LD_INT 1
53698: ARRAY
53699: PPUSH
53700: LD_VAR 0 2
53704: PUSH
53705: LD_INT 2
53707: ARRAY
53708: PPUSH
53709: CALL_OW 111
// end ;
53713: LD_VAR 0 3
53717: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
53718: LD_INT 0
53720: PPUSH
53721: PPUSH
53722: PPUSH
// if not side or not area then
53723: LD_VAR 0 1
53727: NOT
53728: IFTRUE 53737
53730: PUSH
53731: LD_VAR 0 2
53735: NOT
53736: OR
53737: IFFALSE 53741
// exit ;
53739: GO 53860
// tmp := AreaToList ( area , 0 ) ;
53741: LD_ADDR_VAR 0 5
53745: PUSH
53746: LD_VAR 0 2
53750: PPUSH
53751: LD_INT 0
53753: PPUSH
53754: CALL_OW 517
53758: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
53759: LD_ADDR_VAR 0 4
53763: PUSH
53764: DOUBLE
53765: LD_INT 1
53767: DEC
53768: ST_TO_ADDR
53769: LD_VAR 0 5
53773: PUSH
53774: LD_INT 1
53776: ARRAY
53777: PUSH
53778: FOR_TO
53779: IFFALSE 53858
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
53781: LD_VAR 0 5
53785: PUSH
53786: LD_INT 1
53788: ARRAY
53789: PUSH
53790: LD_VAR 0 4
53794: ARRAY
53795: PPUSH
53796: LD_VAR 0 5
53800: PUSH
53801: LD_INT 2
53803: ARRAY
53804: PUSH
53805: LD_VAR 0 4
53809: ARRAY
53810: PPUSH
53811: CALL_OW 351
53815: IFFALSE 53856
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
53817: LD_VAR 0 5
53821: PUSH
53822: LD_INT 1
53824: ARRAY
53825: PUSH
53826: LD_VAR 0 4
53830: ARRAY
53831: PPUSH
53832: LD_VAR 0 5
53836: PUSH
53837: LD_INT 2
53839: ARRAY
53840: PUSH
53841: LD_VAR 0 4
53845: ARRAY
53846: PPUSH
53847: LD_VAR 0 1
53851: PPUSH
53852: CALL_OW 244
// end ;
53856: GO 53778
53858: POP
53859: POP
// end ;
53860: LD_VAR 0 3
53864: RET
// export function UniqueArray ( array ) ; var i ; begin
53865: LD_INT 0
53867: PPUSH
53868: PPUSH
// result := [ ] ;
53869: LD_ADDR_VAR 0 2
53873: PUSH
53874: EMPTY
53875: ST_TO_ADDR
// if not array then
53876: LD_VAR 0 1
53880: NOT
53881: IFFALSE 53885
// exit ;
53883: GO 53946
// for i := 1 to array do
53885: LD_ADDR_VAR 0 3
53889: PUSH
53890: DOUBLE
53891: LD_INT 1
53893: DEC
53894: ST_TO_ADDR
53895: LD_VAR 0 1
53899: PUSH
53900: FOR_TO
53901: IFFALSE 53944
// if not array [ i ] in result then
53903: LD_VAR 0 1
53907: PUSH
53908: LD_VAR 0 3
53912: ARRAY
53913: PUSH
53914: LD_VAR 0 2
53918: IN
53919: NOT
53920: IFFALSE 53942
// result := Join ( result , i ) ;
53922: LD_ADDR_VAR 0 2
53926: PUSH
53927: LD_VAR 0 2
53931: PPUSH
53932: LD_VAR 0 3
53936: PPUSH
53937: CALL 48597 0 2
53941: ST_TO_ADDR
53942: GO 53900
53944: POP
53945: POP
// end ; end_of_file end_of_file
53946: LD_VAR 0 2
53950: RET
// export globalGameSaveCounter ; every 0 0$1 do
53951: GO 53953
53953: DISABLE
// begin enable ;
53954: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
53955: LD_STRING updateTimer(
53957: PUSH
53958: LD_OWVAR 1
53962: STR
53963: PUSH
53964: LD_STRING );
53966: STR
53967: PPUSH
53968: CALL_OW 559
// end ;
53972: END
// every 0 0$1 do
53973: GO 53975
53975: DISABLE
// begin globalGameSaveCounter := 0 ;
53976: LD_ADDR_EXP 37
53980: PUSH
53981: LD_INT 0
53983: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
53984: LD_STRING setGameSaveCounter(0)
53986: PPUSH
53987: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
53991: LD_STRING initStreamRollete();
53993: PPUSH
53994: CALL_OW 559
// InitStreamMode ;
53998: CALL 55350 0 0
// DefineStreamItems ( false ) ;
54002: LD_INT 0
54004: PPUSH
54005: CALL 55814 0 1
// end ;
54009: END
// export function SOS_MapStart ( ) ; begin
54010: LD_INT 0
54012: PPUSH
// if streamModeActive then
54013: LD_EXP 38
54017: IFFALSE 54026
// DefineStreamItems ( true ) ;
54019: LD_INT 1
54021: PPUSH
54022: CALL 55814 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
54026: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
54028: PPUSH
54029: CALL_OW 559
// UpdateLuaVariables ( ) ;
54033: CALL 54050 0 0
// UpdateFactoryWaypoints ( ) ;
54037: CALL 68936 0 0
// UpdateWarehouseGatheringPoints ( ) ;
54041: CALL 69188 0 0
// end ;
54045: LD_VAR 0 1
54049: RET
// function UpdateLuaVariables ( ) ; begin
54050: LD_INT 0
54052: PPUSH
// if globalGameSaveCounter then
54053: LD_EXP 37
54057: IFFALSE 54091
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
54059: LD_ADDR_EXP 37
54063: PUSH
54064: LD_EXP 37
54068: PPUSH
54069: CALL 49970 0 1
54073: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
54074: LD_STRING setGameSaveCounter(
54076: PUSH
54077: LD_EXP 37
54081: STR
54082: PUSH
54083: LD_STRING )
54085: STR
54086: PPUSH
54087: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
54091: LD_STRING setGameDifficulty(
54093: PUSH
54094: LD_OWVAR 67
54098: STR
54099: PUSH
54100: LD_STRING )
54102: STR
54103: PPUSH
54104: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
54108: LD_STRING displayDifficulty(
54110: PUSH
54111: LD_OWVAR 67
54115: STR
54116: PUSH
54117: LD_STRING )
54119: STR
54120: PPUSH
54121: CALL_OW 559
// end ;
54125: LD_VAR 0 1
54129: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
54130: LD_INT 0
54132: PPUSH
// if p2 = stream_mode then
54133: LD_VAR 0 2
54137: PUSH
54138: LD_INT 100
54140: EQUAL
54141: IFFALSE 55144
// begin if not StreamModeActive then
54143: LD_EXP 38
54147: NOT
54148: IFFALSE 54158
// StreamModeActive := true ;
54150: LD_ADDR_EXP 38
54154: PUSH
54155: LD_INT 1
54157: ST_TO_ADDR
// if p3 = 0 then
54158: LD_VAR 0 3
54162: PUSH
54163: LD_INT 0
54165: EQUAL
54166: IFFALSE 54172
// InitStreamMode ;
54168: CALL 55350 0 0
// if p3 = 1 then
54172: LD_VAR 0 3
54176: PUSH
54177: LD_INT 1
54179: EQUAL
54180: IFFALSE 54190
// sRocket := true ;
54182: LD_ADDR_EXP 43
54186: PUSH
54187: LD_INT 1
54189: ST_TO_ADDR
// if p3 = 2 then
54190: LD_VAR 0 3
54194: PUSH
54195: LD_INT 2
54197: EQUAL
54198: IFFALSE 54208
// sSpeed := true ;
54200: LD_ADDR_EXP 42
54204: PUSH
54205: LD_INT 1
54207: ST_TO_ADDR
// if p3 = 3 then
54208: LD_VAR 0 3
54212: PUSH
54213: LD_INT 3
54215: EQUAL
54216: IFFALSE 54226
// sEngine := true ;
54218: LD_ADDR_EXP 44
54222: PUSH
54223: LD_INT 1
54225: ST_TO_ADDR
// if p3 = 4 then
54226: LD_VAR 0 3
54230: PUSH
54231: LD_INT 4
54233: EQUAL
54234: IFFALSE 54244
// sSpec := true ;
54236: LD_ADDR_EXP 41
54240: PUSH
54241: LD_INT 1
54243: ST_TO_ADDR
// if p3 = 5 then
54244: LD_VAR 0 3
54248: PUSH
54249: LD_INT 5
54251: EQUAL
54252: IFFALSE 54262
// sLevel := true ;
54254: LD_ADDR_EXP 45
54258: PUSH
54259: LD_INT 1
54261: ST_TO_ADDR
// if p3 = 6 then
54262: LD_VAR 0 3
54266: PUSH
54267: LD_INT 6
54269: EQUAL
54270: IFFALSE 54280
// sArmoury := true ;
54272: LD_ADDR_EXP 46
54276: PUSH
54277: LD_INT 1
54279: ST_TO_ADDR
// if p3 = 7 then
54280: LD_VAR 0 3
54284: PUSH
54285: LD_INT 7
54287: EQUAL
54288: IFFALSE 54298
// sRadar := true ;
54290: LD_ADDR_EXP 47
54294: PUSH
54295: LD_INT 1
54297: ST_TO_ADDR
// if p3 = 8 then
54298: LD_VAR 0 3
54302: PUSH
54303: LD_INT 8
54305: EQUAL
54306: IFFALSE 54316
// sBunker := true ;
54308: LD_ADDR_EXP 48
54312: PUSH
54313: LD_INT 1
54315: ST_TO_ADDR
// if p3 = 9 then
54316: LD_VAR 0 3
54320: PUSH
54321: LD_INT 9
54323: EQUAL
54324: IFFALSE 54334
// sHack := true ;
54326: LD_ADDR_EXP 49
54330: PUSH
54331: LD_INT 1
54333: ST_TO_ADDR
// if p3 = 10 then
54334: LD_VAR 0 3
54338: PUSH
54339: LD_INT 10
54341: EQUAL
54342: IFFALSE 54352
// sFire := true ;
54344: LD_ADDR_EXP 50
54348: PUSH
54349: LD_INT 1
54351: ST_TO_ADDR
// if p3 = 11 then
54352: LD_VAR 0 3
54356: PUSH
54357: LD_INT 11
54359: EQUAL
54360: IFFALSE 54370
// sRefresh := true ;
54362: LD_ADDR_EXP 51
54366: PUSH
54367: LD_INT 1
54369: ST_TO_ADDR
// if p3 = 12 then
54370: LD_VAR 0 3
54374: PUSH
54375: LD_INT 12
54377: EQUAL
54378: IFFALSE 54388
// sExp := true ;
54380: LD_ADDR_EXP 52
54384: PUSH
54385: LD_INT 1
54387: ST_TO_ADDR
// if p3 = 13 then
54388: LD_VAR 0 3
54392: PUSH
54393: LD_INT 13
54395: EQUAL
54396: IFFALSE 54406
// sDepot := true ;
54398: LD_ADDR_EXP 53
54402: PUSH
54403: LD_INT 1
54405: ST_TO_ADDR
// if p3 = 14 then
54406: LD_VAR 0 3
54410: PUSH
54411: LD_INT 14
54413: EQUAL
54414: IFFALSE 54424
// sFlag := true ;
54416: LD_ADDR_EXP 54
54420: PUSH
54421: LD_INT 1
54423: ST_TO_ADDR
// if p3 = 15 then
54424: LD_VAR 0 3
54428: PUSH
54429: LD_INT 15
54431: EQUAL
54432: IFFALSE 54442
// sKamikadze := true ;
54434: LD_ADDR_EXP 62
54438: PUSH
54439: LD_INT 1
54441: ST_TO_ADDR
// if p3 = 16 then
54442: LD_VAR 0 3
54446: PUSH
54447: LD_INT 16
54449: EQUAL
54450: IFFALSE 54460
// sTroll := true ;
54452: LD_ADDR_EXP 63
54456: PUSH
54457: LD_INT 1
54459: ST_TO_ADDR
// if p3 = 17 then
54460: LD_VAR 0 3
54464: PUSH
54465: LD_INT 17
54467: EQUAL
54468: IFFALSE 54478
// sSlow := true ;
54470: LD_ADDR_EXP 64
54474: PUSH
54475: LD_INT 1
54477: ST_TO_ADDR
// if p3 = 18 then
54478: LD_VAR 0 3
54482: PUSH
54483: LD_INT 18
54485: EQUAL
54486: IFFALSE 54496
// sLack := true ;
54488: LD_ADDR_EXP 65
54492: PUSH
54493: LD_INT 1
54495: ST_TO_ADDR
// if p3 = 19 then
54496: LD_VAR 0 3
54500: PUSH
54501: LD_INT 19
54503: EQUAL
54504: IFFALSE 54514
// sTank := true ;
54506: LD_ADDR_EXP 67
54510: PUSH
54511: LD_INT 1
54513: ST_TO_ADDR
// if p3 = 20 then
54514: LD_VAR 0 3
54518: PUSH
54519: LD_INT 20
54521: EQUAL
54522: IFFALSE 54532
// sRemote := true ;
54524: LD_ADDR_EXP 68
54528: PUSH
54529: LD_INT 1
54531: ST_TO_ADDR
// if p3 = 21 then
54532: LD_VAR 0 3
54536: PUSH
54537: LD_INT 21
54539: EQUAL
54540: IFFALSE 54550
// sPowell := true ;
54542: LD_ADDR_EXP 69
54546: PUSH
54547: LD_INT 1
54549: ST_TO_ADDR
// if p3 = 22 then
54550: LD_VAR 0 3
54554: PUSH
54555: LD_INT 22
54557: EQUAL
54558: IFFALSE 54568
// sTeleport := true ;
54560: LD_ADDR_EXP 72
54564: PUSH
54565: LD_INT 1
54567: ST_TO_ADDR
// if p3 = 23 then
54568: LD_VAR 0 3
54572: PUSH
54573: LD_INT 23
54575: EQUAL
54576: IFFALSE 54586
// sOilTower := true ;
54578: LD_ADDR_EXP 74
54582: PUSH
54583: LD_INT 1
54585: ST_TO_ADDR
// if p3 = 24 then
54586: LD_VAR 0 3
54590: PUSH
54591: LD_INT 24
54593: EQUAL
54594: IFFALSE 54604
// sShovel := true ;
54596: LD_ADDR_EXP 75
54600: PUSH
54601: LD_INT 1
54603: ST_TO_ADDR
// if p3 = 25 then
54604: LD_VAR 0 3
54608: PUSH
54609: LD_INT 25
54611: EQUAL
54612: IFFALSE 54622
// sSheik := true ;
54614: LD_ADDR_EXP 76
54618: PUSH
54619: LD_INT 1
54621: ST_TO_ADDR
// if p3 = 26 then
54622: LD_VAR 0 3
54626: PUSH
54627: LD_INT 26
54629: EQUAL
54630: IFFALSE 54640
// sEarthquake := true ;
54632: LD_ADDR_EXP 78
54636: PUSH
54637: LD_INT 1
54639: ST_TO_ADDR
// if p3 = 27 then
54640: LD_VAR 0 3
54644: PUSH
54645: LD_INT 27
54647: EQUAL
54648: IFFALSE 54658
// sAI := true ;
54650: LD_ADDR_EXP 79
54654: PUSH
54655: LD_INT 1
54657: ST_TO_ADDR
// if p3 = 28 then
54658: LD_VAR 0 3
54662: PUSH
54663: LD_INT 28
54665: EQUAL
54666: IFFALSE 54676
// sCargo := true ;
54668: LD_ADDR_EXP 82
54672: PUSH
54673: LD_INT 1
54675: ST_TO_ADDR
// if p3 = 29 then
54676: LD_VAR 0 3
54680: PUSH
54681: LD_INT 29
54683: EQUAL
54684: IFFALSE 54694
// sDLaser := true ;
54686: LD_ADDR_EXP 83
54690: PUSH
54691: LD_INT 1
54693: ST_TO_ADDR
// if p3 = 30 then
54694: LD_VAR 0 3
54698: PUSH
54699: LD_INT 30
54701: EQUAL
54702: IFFALSE 54712
// sExchange := true ;
54704: LD_ADDR_EXP 84
54708: PUSH
54709: LD_INT 1
54711: ST_TO_ADDR
// if p3 = 31 then
54712: LD_VAR 0 3
54716: PUSH
54717: LD_INT 31
54719: EQUAL
54720: IFFALSE 54730
// sFac := true ;
54722: LD_ADDR_EXP 85
54726: PUSH
54727: LD_INT 1
54729: ST_TO_ADDR
// if p3 = 32 then
54730: LD_VAR 0 3
54734: PUSH
54735: LD_INT 32
54737: EQUAL
54738: IFFALSE 54748
// sPower := true ;
54740: LD_ADDR_EXP 86
54744: PUSH
54745: LD_INT 1
54747: ST_TO_ADDR
// if p3 = 33 then
54748: LD_VAR 0 3
54752: PUSH
54753: LD_INT 33
54755: EQUAL
54756: IFFALSE 54766
// sRandom := true ;
54758: LD_ADDR_EXP 87
54762: PUSH
54763: LD_INT 1
54765: ST_TO_ADDR
// if p3 = 34 then
54766: LD_VAR 0 3
54770: PUSH
54771: LD_INT 34
54773: EQUAL
54774: IFFALSE 54784
// sShield := true ;
54776: LD_ADDR_EXP 88
54780: PUSH
54781: LD_INT 1
54783: ST_TO_ADDR
// if p3 = 35 then
54784: LD_VAR 0 3
54788: PUSH
54789: LD_INT 35
54791: EQUAL
54792: IFFALSE 54802
// sTime := true ;
54794: LD_ADDR_EXP 89
54798: PUSH
54799: LD_INT 1
54801: ST_TO_ADDR
// if p3 = 36 then
54802: LD_VAR 0 3
54806: PUSH
54807: LD_INT 36
54809: EQUAL
54810: IFFALSE 54820
// sTools := true ;
54812: LD_ADDR_EXP 90
54816: PUSH
54817: LD_INT 1
54819: ST_TO_ADDR
// if p3 = 101 then
54820: LD_VAR 0 3
54824: PUSH
54825: LD_INT 101
54827: EQUAL
54828: IFFALSE 54838
// sSold := true ;
54830: LD_ADDR_EXP 55
54834: PUSH
54835: LD_INT 1
54837: ST_TO_ADDR
// if p3 = 102 then
54838: LD_VAR 0 3
54842: PUSH
54843: LD_INT 102
54845: EQUAL
54846: IFFALSE 54856
// sDiff := true ;
54848: LD_ADDR_EXP 56
54852: PUSH
54853: LD_INT 1
54855: ST_TO_ADDR
// if p3 = 103 then
54856: LD_VAR 0 3
54860: PUSH
54861: LD_INT 103
54863: EQUAL
54864: IFFALSE 54874
// sFog := true ;
54866: LD_ADDR_EXP 59
54870: PUSH
54871: LD_INT 1
54873: ST_TO_ADDR
// if p3 = 104 then
54874: LD_VAR 0 3
54878: PUSH
54879: LD_INT 104
54881: EQUAL
54882: IFFALSE 54892
// sReset := true ;
54884: LD_ADDR_EXP 60
54888: PUSH
54889: LD_INT 1
54891: ST_TO_ADDR
// if p3 = 105 then
54892: LD_VAR 0 3
54896: PUSH
54897: LD_INT 105
54899: EQUAL
54900: IFFALSE 54910
// sSun := true ;
54902: LD_ADDR_EXP 61
54906: PUSH
54907: LD_INT 1
54909: ST_TO_ADDR
// if p3 = 106 then
54910: LD_VAR 0 3
54914: PUSH
54915: LD_INT 106
54917: EQUAL
54918: IFFALSE 54928
// sTiger := true ;
54920: LD_ADDR_EXP 57
54924: PUSH
54925: LD_INT 1
54927: ST_TO_ADDR
// if p3 = 107 then
54928: LD_VAR 0 3
54932: PUSH
54933: LD_INT 107
54935: EQUAL
54936: IFFALSE 54946
// sBomb := true ;
54938: LD_ADDR_EXP 58
54942: PUSH
54943: LD_INT 1
54945: ST_TO_ADDR
// if p3 = 108 then
54946: LD_VAR 0 3
54950: PUSH
54951: LD_INT 108
54953: EQUAL
54954: IFFALSE 54964
// sWound := true ;
54956: LD_ADDR_EXP 66
54960: PUSH
54961: LD_INT 1
54963: ST_TO_ADDR
// if p3 = 109 then
54964: LD_VAR 0 3
54968: PUSH
54969: LD_INT 109
54971: EQUAL
54972: IFFALSE 54982
// sBetray := true ;
54974: LD_ADDR_EXP 70
54978: PUSH
54979: LD_INT 1
54981: ST_TO_ADDR
// if p3 = 110 then
54982: LD_VAR 0 3
54986: PUSH
54987: LD_INT 110
54989: EQUAL
54990: IFFALSE 55000
// sContamin := true ;
54992: LD_ADDR_EXP 71
54996: PUSH
54997: LD_INT 1
54999: ST_TO_ADDR
// if p3 = 111 then
55000: LD_VAR 0 3
55004: PUSH
55005: LD_INT 111
55007: EQUAL
55008: IFFALSE 55018
// sOil := true ;
55010: LD_ADDR_EXP 73
55014: PUSH
55015: LD_INT 1
55017: ST_TO_ADDR
// if p3 = 112 then
55018: LD_VAR 0 3
55022: PUSH
55023: LD_INT 112
55025: EQUAL
55026: IFFALSE 55036
// sStu := true ;
55028: LD_ADDR_EXP 77
55032: PUSH
55033: LD_INT 1
55035: ST_TO_ADDR
// if p3 = 113 then
55036: LD_VAR 0 3
55040: PUSH
55041: LD_INT 113
55043: EQUAL
55044: IFFALSE 55054
// sBazooka := true ;
55046: LD_ADDR_EXP 80
55050: PUSH
55051: LD_INT 1
55053: ST_TO_ADDR
// if p3 = 114 then
55054: LD_VAR 0 3
55058: PUSH
55059: LD_INT 114
55061: EQUAL
55062: IFFALSE 55072
// sMortar := true ;
55064: LD_ADDR_EXP 81
55068: PUSH
55069: LD_INT 1
55071: ST_TO_ADDR
// if p3 = 115 then
55072: LD_VAR 0 3
55076: PUSH
55077: LD_INT 115
55079: EQUAL
55080: IFFALSE 55090
// sRanger := true ;
55082: LD_ADDR_EXP 91
55086: PUSH
55087: LD_INT 1
55089: ST_TO_ADDR
// if p3 = 116 then
55090: LD_VAR 0 3
55094: PUSH
55095: LD_INT 116
55097: EQUAL
55098: IFFALSE 55108
// sComputer := true ;
55100: LD_ADDR_EXP 92
55104: PUSH
55105: LD_INT 1
55107: ST_TO_ADDR
// if p3 = 117 then
55108: LD_VAR 0 3
55112: PUSH
55113: LD_INT 117
55115: EQUAL
55116: IFFALSE 55126
// s30 := true ;
55118: LD_ADDR_EXP 93
55122: PUSH
55123: LD_INT 1
55125: ST_TO_ADDR
// if p3 = 118 then
55126: LD_VAR 0 3
55130: PUSH
55131: LD_INT 118
55133: EQUAL
55134: IFFALSE 55144
// s60 := true ;
55136: LD_ADDR_EXP 94
55140: PUSH
55141: LD_INT 1
55143: ST_TO_ADDR
// end ; if p2 = hack_mode then
55144: LD_VAR 0 2
55148: PUSH
55149: LD_INT 101
55151: EQUAL
55152: IFFALSE 55280
// begin case p3 of 1 :
55154: LD_VAR 0 3
55158: PUSH
55159: LD_INT 1
55161: DOUBLE
55162: EQUAL
55163: IFTRUE 55167
55165: GO 55174
55167: POP
// hHackUnlimitedResources ; 2 :
55168: CALL 67543 0 0
55172: GO 55280
55174: LD_INT 2
55176: DOUBLE
55177: EQUAL
55178: IFTRUE 55182
55180: GO 55189
55182: POP
// hHackSetLevel10 ; 3 :
55183: CALL 67676 0 0
55187: GO 55280
55189: LD_INT 3
55191: DOUBLE
55192: EQUAL
55193: IFTRUE 55197
55195: GO 55204
55197: POP
// hHackSetLevel10YourUnits ; 4 :
55198: CALL 67761 0 0
55202: GO 55280
55204: LD_INT 4
55206: DOUBLE
55207: EQUAL
55208: IFTRUE 55212
55210: GO 55219
55212: POP
// hHackInvincible ; 5 :
55213: CALL 68209 0 0
55217: GO 55280
55219: LD_INT 5
55221: DOUBLE
55222: EQUAL
55223: IFTRUE 55227
55225: GO 55234
55227: POP
// hHackInvisible ; 6 :
55228: CALL 68320 0 0
55232: GO 55280
55234: LD_INT 6
55236: DOUBLE
55237: EQUAL
55238: IFTRUE 55242
55240: GO 55249
55242: POP
// hHackChangeYourSide ; 7 :
55243: CALL 68377 0 0
55247: GO 55280
55249: LD_INT 7
55251: DOUBLE
55252: EQUAL
55253: IFTRUE 55257
55255: GO 55264
55257: POP
// hHackChangeUnitSide ; 8 :
55258: CALL 68419 0 0
55262: GO 55280
55264: LD_INT 8
55266: DOUBLE
55267: EQUAL
55268: IFTRUE 55272
55270: GO 55279
55272: POP
// hHackFog ; end ;
55273: CALL 68520 0 0
55277: GO 55280
55279: POP
// end ; if p2 = game_save_mode then
55280: LD_VAR 0 2
55284: PUSH
55285: LD_INT 102
55287: EQUAL
55288: IFFALSE 55345
// begin if p3 = 1 then
55290: LD_VAR 0 3
55294: PUSH
55295: LD_INT 1
55297: EQUAL
55298: IFFALSE 55310
// globalGameSaveCounter := p4 ;
55300: LD_ADDR_EXP 37
55304: PUSH
55305: LD_VAR 0 4
55309: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
55310: LD_VAR 0 3
55314: PUSH
55315: LD_INT 2
55317: EQUAL
55318: IFFALSE 55326
55320: PUSH
55321: LD_EXP 37
55325: AND
55326: IFFALSE 55345
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
55328: LD_STRING setGameSaveCounter(
55330: PUSH
55331: LD_EXP 37
55335: STR
55336: PUSH
55337: LD_STRING )
55339: STR
55340: PPUSH
55341: CALL_OW 559
// end ; end ;
55345: LD_VAR 0 7
55349: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
55350: LD_INT 0
55352: PPUSH
// streamModeActive := false ;
55353: LD_ADDR_EXP 38
55357: PUSH
55358: LD_INT 0
55360: ST_TO_ADDR
// normalCounter := 36 ;
55361: LD_ADDR_EXP 39
55365: PUSH
55366: LD_INT 36
55368: ST_TO_ADDR
// hardcoreCounter := 18 ;
55369: LD_ADDR_EXP 40
55373: PUSH
55374: LD_INT 18
55376: ST_TO_ADDR
// sRocket := false ;
55377: LD_ADDR_EXP 43
55381: PUSH
55382: LD_INT 0
55384: ST_TO_ADDR
// sSpeed := false ;
55385: LD_ADDR_EXP 42
55389: PUSH
55390: LD_INT 0
55392: ST_TO_ADDR
// sEngine := false ;
55393: LD_ADDR_EXP 44
55397: PUSH
55398: LD_INT 0
55400: ST_TO_ADDR
// sSpec := false ;
55401: LD_ADDR_EXP 41
55405: PUSH
55406: LD_INT 0
55408: ST_TO_ADDR
// sLevel := false ;
55409: LD_ADDR_EXP 45
55413: PUSH
55414: LD_INT 0
55416: ST_TO_ADDR
// sArmoury := false ;
55417: LD_ADDR_EXP 46
55421: PUSH
55422: LD_INT 0
55424: ST_TO_ADDR
// sRadar := false ;
55425: LD_ADDR_EXP 47
55429: PUSH
55430: LD_INT 0
55432: ST_TO_ADDR
// sBunker := false ;
55433: LD_ADDR_EXP 48
55437: PUSH
55438: LD_INT 0
55440: ST_TO_ADDR
// sHack := false ;
55441: LD_ADDR_EXP 49
55445: PUSH
55446: LD_INT 0
55448: ST_TO_ADDR
// sFire := false ;
55449: LD_ADDR_EXP 50
55453: PUSH
55454: LD_INT 0
55456: ST_TO_ADDR
// sRefresh := false ;
55457: LD_ADDR_EXP 51
55461: PUSH
55462: LD_INT 0
55464: ST_TO_ADDR
// sExp := false ;
55465: LD_ADDR_EXP 52
55469: PUSH
55470: LD_INT 0
55472: ST_TO_ADDR
// sDepot := false ;
55473: LD_ADDR_EXP 53
55477: PUSH
55478: LD_INT 0
55480: ST_TO_ADDR
// sFlag := false ;
55481: LD_ADDR_EXP 54
55485: PUSH
55486: LD_INT 0
55488: ST_TO_ADDR
// sKamikadze := false ;
55489: LD_ADDR_EXP 62
55493: PUSH
55494: LD_INT 0
55496: ST_TO_ADDR
// sTroll := false ;
55497: LD_ADDR_EXP 63
55501: PUSH
55502: LD_INT 0
55504: ST_TO_ADDR
// sSlow := false ;
55505: LD_ADDR_EXP 64
55509: PUSH
55510: LD_INT 0
55512: ST_TO_ADDR
// sLack := false ;
55513: LD_ADDR_EXP 65
55517: PUSH
55518: LD_INT 0
55520: ST_TO_ADDR
// sTank := false ;
55521: LD_ADDR_EXP 67
55525: PUSH
55526: LD_INT 0
55528: ST_TO_ADDR
// sRemote := false ;
55529: LD_ADDR_EXP 68
55533: PUSH
55534: LD_INT 0
55536: ST_TO_ADDR
// sPowell := false ;
55537: LD_ADDR_EXP 69
55541: PUSH
55542: LD_INT 0
55544: ST_TO_ADDR
// sTeleport := false ;
55545: LD_ADDR_EXP 72
55549: PUSH
55550: LD_INT 0
55552: ST_TO_ADDR
// sOilTower := false ;
55553: LD_ADDR_EXP 74
55557: PUSH
55558: LD_INT 0
55560: ST_TO_ADDR
// sShovel := false ;
55561: LD_ADDR_EXP 75
55565: PUSH
55566: LD_INT 0
55568: ST_TO_ADDR
// sSheik := false ;
55569: LD_ADDR_EXP 76
55573: PUSH
55574: LD_INT 0
55576: ST_TO_ADDR
// sEarthquake := false ;
55577: LD_ADDR_EXP 78
55581: PUSH
55582: LD_INT 0
55584: ST_TO_ADDR
// sAI := false ;
55585: LD_ADDR_EXP 79
55589: PUSH
55590: LD_INT 0
55592: ST_TO_ADDR
// sCargo := false ;
55593: LD_ADDR_EXP 82
55597: PUSH
55598: LD_INT 0
55600: ST_TO_ADDR
// sDLaser := false ;
55601: LD_ADDR_EXP 83
55605: PUSH
55606: LD_INT 0
55608: ST_TO_ADDR
// sExchange := false ;
55609: LD_ADDR_EXP 84
55613: PUSH
55614: LD_INT 0
55616: ST_TO_ADDR
// sFac := false ;
55617: LD_ADDR_EXP 85
55621: PUSH
55622: LD_INT 0
55624: ST_TO_ADDR
// sPower := false ;
55625: LD_ADDR_EXP 86
55629: PUSH
55630: LD_INT 0
55632: ST_TO_ADDR
// sRandom := false ;
55633: LD_ADDR_EXP 87
55637: PUSH
55638: LD_INT 0
55640: ST_TO_ADDR
// sShield := false ;
55641: LD_ADDR_EXP 88
55645: PUSH
55646: LD_INT 0
55648: ST_TO_ADDR
// sTime := false ;
55649: LD_ADDR_EXP 89
55653: PUSH
55654: LD_INT 0
55656: ST_TO_ADDR
// sTools := false ;
55657: LD_ADDR_EXP 90
55661: PUSH
55662: LD_INT 0
55664: ST_TO_ADDR
// sSold := false ;
55665: LD_ADDR_EXP 55
55669: PUSH
55670: LD_INT 0
55672: ST_TO_ADDR
// sDiff := false ;
55673: LD_ADDR_EXP 56
55677: PUSH
55678: LD_INT 0
55680: ST_TO_ADDR
// sFog := false ;
55681: LD_ADDR_EXP 59
55685: PUSH
55686: LD_INT 0
55688: ST_TO_ADDR
// sReset := false ;
55689: LD_ADDR_EXP 60
55693: PUSH
55694: LD_INT 0
55696: ST_TO_ADDR
// sSun := false ;
55697: LD_ADDR_EXP 61
55701: PUSH
55702: LD_INT 0
55704: ST_TO_ADDR
// sTiger := false ;
55705: LD_ADDR_EXP 57
55709: PUSH
55710: LD_INT 0
55712: ST_TO_ADDR
// sBomb := false ;
55713: LD_ADDR_EXP 58
55717: PUSH
55718: LD_INT 0
55720: ST_TO_ADDR
// sWound := false ;
55721: LD_ADDR_EXP 66
55725: PUSH
55726: LD_INT 0
55728: ST_TO_ADDR
// sBetray := false ;
55729: LD_ADDR_EXP 70
55733: PUSH
55734: LD_INT 0
55736: ST_TO_ADDR
// sContamin := false ;
55737: LD_ADDR_EXP 71
55741: PUSH
55742: LD_INT 0
55744: ST_TO_ADDR
// sOil := false ;
55745: LD_ADDR_EXP 73
55749: PUSH
55750: LD_INT 0
55752: ST_TO_ADDR
// sStu := false ;
55753: LD_ADDR_EXP 77
55757: PUSH
55758: LD_INT 0
55760: ST_TO_ADDR
// sBazooka := false ;
55761: LD_ADDR_EXP 80
55765: PUSH
55766: LD_INT 0
55768: ST_TO_ADDR
// sMortar := false ;
55769: LD_ADDR_EXP 81
55773: PUSH
55774: LD_INT 0
55776: ST_TO_ADDR
// sRanger := false ;
55777: LD_ADDR_EXP 91
55781: PUSH
55782: LD_INT 0
55784: ST_TO_ADDR
// sComputer := false ;
55785: LD_ADDR_EXP 92
55789: PUSH
55790: LD_INT 0
55792: ST_TO_ADDR
// s30 := false ;
55793: LD_ADDR_EXP 93
55797: PUSH
55798: LD_INT 0
55800: ST_TO_ADDR
// s60 := false ;
55801: LD_ADDR_EXP 94
55805: PUSH
55806: LD_INT 0
55808: ST_TO_ADDR
// end ;
55809: LD_VAR 0 1
55813: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
55814: LD_INT 0
55816: PPUSH
55817: PPUSH
55818: PPUSH
55819: PPUSH
55820: PPUSH
55821: PPUSH
55822: PPUSH
// result := [ ] ;
55823: LD_ADDR_VAR 0 2
55827: PUSH
55828: EMPTY
55829: ST_TO_ADDR
// if campaign_id = 1 then
55830: LD_OWVAR 69
55834: PUSH
55835: LD_INT 1
55837: EQUAL
55838: IFFALSE 59004
// begin case mission_number of 1 :
55840: LD_OWVAR 70
55844: PUSH
55845: LD_INT 1
55847: DOUBLE
55848: EQUAL
55849: IFTRUE 55853
55851: GO 55929
55853: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
55854: LD_ADDR_VAR 0 2
55858: PUSH
55859: LD_INT 2
55861: PUSH
55862: LD_INT 4
55864: PUSH
55865: LD_INT 11
55867: PUSH
55868: LD_INT 12
55870: PUSH
55871: LD_INT 15
55873: PUSH
55874: LD_INT 16
55876: PUSH
55877: LD_INT 22
55879: PUSH
55880: LD_INT 23
55882: PUSH
55883: LD_INT 26
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: PUSH
55897: LD_INT 101
55899: PUSH
55900: LD_INT 102
55902: PUSH
55903: LD_INT 106
55905: PUSH
55906: LD_INT 116
55908: PUSH
55909: LD_INT 117
55911: PUSH
55912: LD_INT 118
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: ST_TO_ADDR
55927: GO 59002
55929: LD_INT 2
55931: DOUBLE
55932: EQUAL
55933: IFTRUE 55937
55935: GO 56021
55937: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
55938: LD_ADDR_VAR 0 2
55942: PUSH
55943: LD_INT 2
55945: PUSH
55946: LD_INT 4
55948: PUSH
55949: LD_INT 11
55951: PUSH
55952: LD_INT 12
55954: PUSH
55955: LD_INT 15
55957: PUSH
55958: LD_INT 16
55960: PUSH
55961: LD_INT 22
55963: PUSH
55964: LD_INT 23
55966: PUSH
55967: LD_INT 26
55969: PUSH
55970: EMPTY
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 101
55983: PUSH
55984: LD_INT 102
55986: PUSH
55987: LD_INT 105
55989: PUSH
55990: LD_INT 106
55992: PUSH
55993: LD_INT 108
55995: PUSH
55996: LD_INT 116
55998: PUSH
55999: LD_INT 117
56001: PUSH
56002: LD_INT 118
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: LIST
56009: LIST
56010: LIST
56011: LIST
56012: LIST
56013: LIST
56014: PUSH
56015: EMPTY
56016: LIST
56017: LIST
56018: ST_TO_ADDR
56019: GO 59002
56021: LD_INT 3
56023: DOUBLE
56024: EQUAL
56025: IFTRUE 56029
56027: GO 56117
56029: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
56030: LD_ADDR_VAR 0 2
56034: PUSH
56035: LD_INT 2
56037: PUSH
56038: LD_INT 4
56040: PUSH
56041: LD_INT 5
56043: PUSH
56044: LD_INT 11
56046: PUSH
56047: LD_INT 12
56049: PUSH
56050: LD_INT 15
56052: PUSH
56053: LD_INT 16
56055: PUSH
56056: LD_INT 22
56058: PUSH
56059: LD_INT 26
56061: PUSH
56062: LD_INT 36
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: LIST
56069: LIST
56070: LIST
56071: LIST
56072: LIST
56073: LIST
56074: LIST
56075: LIST
56076: PUSH
56077: LD_INT 101
56079: PUSH
56080: LD_INT 102
56082: PUSH
56083: LD_INT 105
56085: PUSH
56086: LD_INT 106
56088: PUSH
56089: LD_INT 108
56091: PUSH
56092: LD_INT 116
56094: PUSH
56095: LD_INT 117
56097: PUSH
56098: LD_INT 118
56100: PUSH
56101: EMPTY
56102: LIST
56103: LIST
56104: LIST
56105: LIST
56106: LIST
56107: LIST
56108: LIST
56109: LIST
56110: PUSH
56111: EMPTY
56112: LIST
56113: LIST
56114: ST_TO_ADDR
56115: GO 59002
56117: LD_INT 4
56119: DOUBLE
56120: EQUAL
56121: IFTRUE 56125
56123: GO 56221
56125: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
56126: LD_ADDR_VAR 0 2
56130: PUSH
56131: LD_INT 2
56133: PUSH
56134: LD_INT 4
56136: PUSH
56137: LD_INT 5
56139: PUSH
56140: LD_INT 8
56142: PUSH
56143: LD_INT 11
56145: PUSH
56146: LD_INT 12
56148: PUSH
56149: LD_INT 15
56151: PUSH
56152: LD_INT 16
56154: PUSH
56155: LD_INT 22
56157: PUSH
56158: LD_INT 23
56160: PUSH
56161: LD_INT 26
56163: PUSH
56164: LD_INT 36
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 101
56183: PUSH
56184: LD_INT 102
56186: PUSH
56187: LD_INT 105
56189: PUSH
56190: LD_INT 106
56192: PUSH
56193: LD_INT 108
56195: PUSH
56196: LD_INT 116
56198: PUSH
56199: LD_INT 117
56201: PUSH
56202: LD_INT 118
56204: PUSH
56205: EMPTY
56206: LIST
56207: LIST
56208: LIST
56209: LIST
56210: LIST
56211: LIST
56212: LIST
56213: LIST
56214: PUSH
56215: EMPTY
56216: LIST
56217: LIST
56218: ST_TO_ADDR
56219: GO 59002
56221: LD_INT 5
56223: DOUBLE
56224: EQUAL
56225: IFTRUE 56229
56227: GO 56341
56229: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
56230: LD_ADDR_VAR 0 2
56234: PUSH
56235: LD_INT 2
56237: PUSH
56238: LD_INT 4
56240: PUSH
56241: LD_INT 5
56243: PUSH
56244: LD_INT 6
56246: PUSH
56247: LD_INT 8
56249: PUSH
56250: LD_INT 11
56252: PUSH
56253: LD_INT 12
56255: PUSH
56256: LD_INT 15
56258: PUSH
56259: LD_INT 16
56261: PUSH
56262: LD_INT 22
56264: PUSH
56265: LD_INT 23
56267: PUSH
56268: LD_INT 25
56270: PUSH
56271: LD_INT 26
56273: PUSH
56274: LD_INT 36
56276: PUSH
56277: EMPTY
56278: LIST
56279: LIST
56280: LIST
56281: LIST
56282: LIST
56283: LIST
56284: LIST
56285: LIST
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: PUSH
56293: LD_INT 101
56295: PUSH
56296: LD_INT 102
56298: PUSH
56299: LD_INT 105
56301: PUSH
56302: LD_INT 106
56304: PUSH
56305: LD_INT 108
56307: PUSH
56308: LD_INT 109
56310: PUSH
56311: LD_INT 112
56313: PUSH
56314: LD_INT 116
56316: PUSH
56317: LD_INT 117
56319: PUSH
56320: LD_INT 118
56322: PUSH
56323: EMPTY
56324: LIST
56325: LIST
56326: LIST
56327: LIST
56328: LIST
56329: LIST
56330: LIST
56331: LIST
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: ST_TO_ADDR
56339: GO 59002
56341: LD_INT 6
56343: DOUBLE
56344: EQUAL
56345: IFTRUE 56349
56347: GO 56481
56349: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
56350: LD_ADDR_VAR 0 2
56354: PUSH
56355: LD_INT 2
56357: PUSH
56358: LD_INT 4
56360: PUSH
56361: LD_INT 5
56363: PUSH
56364: LD_INT 6
56366: PUSH
56367: LD_INT 8
56369: PUSH
56370: LD_INT 11
56372: PUSH
56373: LD_INT 12
56375: PUSH
56376: LD_INT 15
56378: PUSH
56379: LD_INT 16
56381: PUSH
56382: LD_INT 20
56384: PUSH
56385: LD_INT 21
56387: PUSH
56388: LD_INT 22
56390: PUSH
56391: LD_INT 23
56393: PUSH
56394: LD_INT 25
56396: PUSH
56397: LD_INT 26
56399: PUSH
56400: LD_INT 30
56402: PUSH
56403: LD_INT 31
56405: PUSH
56406: LD_INT 32
56408: PUSH
56409: LD_INT 36
56411: PUSH
56412: EMPTY
56413: LIST
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: LIST
56420: LIST
56421: LIST
56422: LIST
56423: LIST
56424: LIST
56425: LIST
56426: LIST
56427: LIST
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 101
56435: PUSH
56436: LD_INT 102
56438: PUSH
56439: LD_INT 105
56441: PUSH
56442: LD_INT 106
56444: PUSH
56445: LD_INT 108
56447: PUSH
56448: LD_INT 109
56450: PUSH
56451: LD_INT 112
56453: PUSH
56454: LD_INT 116
56456: PUSH
56457: LD_INT 117
56459: PUSH
56460: LD_INT 118
56462: PUSH
56463: EMPTY
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: LIST
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: ST_TO_ADDR
56479: GO 59002
56481: LD_INT 7
56483: DOUBLE
56484: EQUAL
56485: IFTRUE 56489
56487: GO 56601
56489: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
56490: LD_ADDR_VAR 0 2
56494: PUSH
56495: LD_INT 2
56497: PUSH
56498: LD_INT 4
56500: PUSH
56501: LD_INT 5
56503: PUSH
56504: LD_INT 7
56506: PUSH
56507: LD_INT 11
56509: PUSH
56510: LD_INT 12
56512: PUSH
56513: LD_INT 15
56515: PUSH
56516: LD_INT 16
56518: PUSH
56519: LD_INT 20
56521: PUSH
56522: LD_INT 21
56524: PUSH
56525: LD_INT 22
56527: PUSH
56528: LD_INT 23
56530: PUSH
56531: LD_INT 25
56533: PUSH
56534: LD_INT 26
56536: PUSH
56537: EMPTY
56538: LIST
56539: LIST
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: LIST
56551: LIST
56552: PUSH
56553: LD_INT 101
56555: PUSH
56556: LD_INT 102
56558: PUSH
56559: LD_INT 103
56561: PUSH
56562: LD_INT 105
56564: PUSH
56565: LD_INT 106
56567: PUSH
56568: LD_INT 108
56570: PUSH
56571: LD_INT 112
56573: PUSH
56574: LD_INT 116
56576: PUSH
56577: LD_INT 117
56579: PUSH
56580: LD_INT 118
56582: PUSH
56583: EMPTY
56584: LIST
56585: LIST
56586: LIST
56587: LIST
56588: LIST
56589: LIST
56590: LIST
56591: LIST
56592: LIST
56593: LIST
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: ST_TO_ADDR
56599: GO 59002
56601: LD_INT 8
56603: DOUBLE
56604: EQUAL
56605: IFTRUE 56609
56607: GO 56749
56609: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
56610: LD_ADDR_VAR 0 2
56614: PUSH
56615: LD_INT 2
56617: PUSH
56618: LD_INT 4
56620: PUSH
56621: LD_INT 5
56623: PUSH
56624: LD_INT 6
56626: PUSH
56627: LD_INT 7
56629: PUSH
56630: LD_INT 8
56632: PUSH
56633: LD_INT 11
56635: PUSH
56636: LD_INT 12
56638: PUSH
56639: LD_INT 15
56641: PUSH
56642: LD_INT 16
56644: PUSH
56645: LD_INT 20
56647: PUSH
56648: LD_INT 21
56650: PUSH
56651: LD_INT 22
56653: PUSH
56654: LD_INT 23
56656: PUSH
56657: LD_INT 25
56659: PUSH
56660: LD_INT 26
56662: PUSH
56663: LD_INT 30
56665: PUSH
56666: LD_INT 31
56668: PUSH
56669: LD_INT 32
56671: PUSH
56672: LD_INT 36
56674: PUSH
56675: EMPTY
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: PUSH
56697: LD_INT 101
56699: PUSH
56700: LD_INT 102
56702: PUSH
56703: LD_INT 103
56705: PUSH
56706: LD_INT 105
56708: PUSH
56709: LD_INT 106
56711: PUSH
56712: LD_INT 108
56714: PUSH
56715: LD_INT 109
56717: PUSH
56718: LD_INT 112
56720: PUSH
56721: LD_INT 116
56723: PUSH
56724: LD_INT 117
56726: PUSH
56727: LD_INT 118
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: LIST
56738: LIST
56739: LIST
56740: LIST
56741: LIST
56742: PUSH
56743: EMPTY
56744: LIST
56745: LIST
56746: ST_TO_ADDR
56747: GO 59002
56749: LD_INT 9
56751: DOUBLE
56752: EQUAL
56753: IFTRUE 56757
56755: GO 56905
56757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
56758: LD_ADDR_VAR 0 2
56762: PUSH
56763: LD_INT 2
56765: PUSH
56766: LD_INT 4
56768: PUSH
56769: LD_INT 5
56771: PUSH
56772: LD_INT 6
56774: PUSH
56775: LD_INT 7
56777: PUSH
56778: LD_INT 8
56780: PUSH
56781: LD_INT 11
56783: PUSH
56784: LD_INT 12
56786: PUSH
56787: LD_INT 15
56789: PUSH
56790: LD_INT 16
56792: PUSH
56793: LD_INT 20
56795: PUSH
56796: LD_INT 21
56798: PUSH
56799: LD_INT 22
56801: PUSH
56802: LD_INT 23
56804: PUSH
56805: LD_INT 25
56807: PUSH
56808: LD_INT 26
56810: PUSH
56811: LD_INT 28
56813: PUSH
56814: LD_INT 30
56816: PUSH
56817: LD_INT 31
56819: PUSH
56820: LD_INT 32
56822: PUSH
56823: LD_INT 36
56825: PUSH
56826: EMPTY
56827: LIST
56828: LIST
56829: LIST
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 101
56851: PUSH
56852: LD_INT 102
56854: PUSH
56855: LD_INT 103
56857: PUSH
56858: LD_INT 105
56860: PUSH
56861: LD_INT 106
56863: PUSH
56864: LD_INT 108
56866: PUSH
56867: LD_INT 109
56869: PUSH
56870: LD_INT 112
56872: PUSH
56873: LD_INT 114
56875: PUSH
56876: LD_INT 116
56878: PUSH
56879: LD_INT 117
56881: PUSH
56882: LD_INT 118
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: LIST
56889: LIST
56890: LIST
56891: LIST
56892: LIST
56893: LIST
56894: LIST
56895: LIST
56896: LIST
56897: LIST
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: ST_TO_ADDR
56903: GO 59002
56905: LD_INT 10
56907: DOUBLE
56908: EQUAL
56909: IFTRUE 56913
56911: GO 57109
56913: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
56914: LD_ADDR_VAR 0 2
56918: PUSH
56919: LD_INT 2
56921: PUSH
56922: LD_INT 4
56924: PUSH
56925: LD_INT 5
56927: PUSH
56928: LD_INT 6
56930: PUSH
56931: LD_INT 7
56933: PUSH
56934: LD_INT 8
56936: PUSH
56937: LD_INT 9
56939: PUSH
56940: LD_INT 10
56942: PUSH
56943: LD_INT 11
56945: PUSH
56946: LD_INT 12
56948: PUSH
56949: LD_INT 13
56951: PUSH
56952: LD_INT 14
56954: PUSH
56955: LD_INT 15
56957: PUSH
56958: LD_INT 16
56960: PUSH
56961: LD_INT 17
56963: PUSH
56964: LD_INT 18
56966: PUSH
56967: LD_INT 19
56969: PUSH
56970: LD_INT 20
56972: PUSH
56973: LD_INT 21
56975: PUSH
56976: LD_INT 22
56978: PUSH
56979: LD_INT 23
56981: PUSH
56982: LD_INT 24
56984: PUSH
56985: LD_INT 25
56987: PUSH
56988: LD_INT 26
56990: PUSH
56991: LD_INT 28
56993: PUSH
56994: LD_INT 30
56996: PUSH
56997: LD_INT 31
56999: PUSH
57000: LD_INT 32
57002: PUSH
57003: LD_INT 36
57005: PUSH
57006: EMPTY
57007: LIST
57008: LIST
57009: LIST
57010: LIST
57011: LIST
57012: LIST
57013: LIST
57014: LIST
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: LIST
57026: LIST
57027: LIST
57028: LIST
57029: LIST
57030: LIST
57031: LIST
57032: LIST
57033: LIST
57034: LIST
57035: LIST
57036: PUSH
57037: LD_INT 101
57039: PUSH
57040: LD_INT 102
57042: PUSH
57043: LD_INT 103
57045: PUSH
57046: LD_INT 104
57048: PUSH
57049: LD_INT 105
57051: PUSH
57052: LD_INT 106
57054: PUSH
57055: LD_INT 107
57057: PUSH
57058: LD_INT 108
57060: PUSH
57061: LD_INT 109
57063: PUSH
57064: LD_INT 110
57066: PUSH
57067: LD_INT 111
57069: PUSH
57070: LD_INT 112
57072: PUSH
57073: LD_INT 114
57075: PUSH
57076: LD_INT 116
57078: PUSH
57079: LD_INT 117
57081: PUSH
57082: LD_INT 118
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: PUSH
57103: EMPTY
57104: LIST
57105: LIST
57106: ST_TO_ADDR
57107: GO 59002
57109: LD_INT 11
57111: DOUBLE
57112: EQUAL
57113: IFTRUE 57117
57115: GO 57321
57117: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
57118: LD_ADDR_VAR 0 2
57122: PUSH
57123: LD_INT 2
57125: PUSH
57126: LD_INT 3
57128: PUSH
57129: LD_INT 4
57131: PUSH
57132: LD_INT 5
57134: PUSH
57135: LD_INT 6
57137: PUSH
57138: LD_INT 7
57140: PUSH
57141: LD_INT 8
57143: PUSH
57144: LD_INT 9
57146: PUSH
57147: LD_INT 10
57149: PUSH
57150: LD_INT 11
57152: PUSH
57153: LD_INT 12
57155: PUSH
57156: LD_INT 13
57158: PUSH
57159: LD_INT 14
57161: PUSH
57162: LD_INT 15
57164: PUSH
57165: LD_INT 16
57167: PUSH
57168: LD_INT 17
57170: PUSH
57171: LD_INT 18
57173: PUSH
57174: LD_INT 19
57176: PUSH
57177: LD_INT 20
57179: PUSH
57180: LD_INT 21
57182: PUSH
57183: LD_INT 22
57185: PUSH
57186: LD_INT 23
57188: PUSH
57189: LD_INT 24
57191: PUSH
57192: LD_INT 25
57194: PUSH
57195: LD_INT 26
57197: PUSH
57198: LD_INT 28
57200: PUSH
57201: LD_INT 30
57203: PUSH
57204: LD_INT 31
57206: PUSH
57207: LD_INT 32
57209: PUSH
57210: LD_INT 34
57212: PUSH
57213: LD_INT 36
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: PUSH
57249: LD_INT 101
57251: PUSH
57252: LD_INT 102
57254: PUSH
57255: LD_INT 103
57257: PUSH
57258: LD_INT 104
57260: PUSH
57261: LD_INT 105
57263: PUSH
57264: LD_INT 106
57266: PUSH
57267: LD_INT 107
57269: PUSH
57270: LD_INT 108
57272: PUSH
57273: LD_INT 109
57275: PUSH
57276: LD_INT 110
57278: PUSH
57279: LD_INT 111
57281: PUSH
57282: LD_INT 112
57284: PUSH
57285: LD_INT 114
57287: PUSH
57288: LD_INT 116
57290: PUSH
57291: LD_INT 117
57293: PUSH
57294: LD_INT 118
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: LIST
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: LIST
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: PUSH
57315: EMPTY
57316: LIST
57317: LIST
57318: ST_TO_ADDR
57319: GO 59002
57321: LD_INT 12
57323: DOUBLE
57324: EQUAL
57325: IFTRUE 57329
57327: GO 57549
57329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
57330: LD_ADDR_VAR 0 2
57334: PUSH
57335: LD_INT 1
57337: PUSH
57338: LD_INT 2
57340: PUSH
57341: LD_INT 3
57343: PUSH
57344: LD_INT 4
57346: PUSH
57347: LD_INT 5
57349: PUSH
57350: LD_INT 6
57352: PUSH
57353: LD_INT 7
57355: PUSH
57356: LD_INT 8
57358: PUSH
57359: LD_INT 9
57361: PUSH
57362: LD_INT 10
57364: PUSH
57365: LD_INT 11
57367: PUSH
57368: LD_INT 12
57370: PUSH
57371: LD_INT 13
57373: PUSH
57374: LD_INT 14
57376: PUSH
57377: LD_INT 15
57379: PUSH
57380: LD_INT 16
57382: PUSH
57383: LD_INT 17
57385: PUSH
57386: LD_INT 18
57388: PUSH
57389: LD_INT 19
57391: PUSH
57392: LD_INT 20
57394: PUSH
57395: LD_INT 21
57397: PUSH
57398: LD_INT 22
57400: PUSH
57401: LD_INT 23
57403: PUSH
57404: LD_INT 24
57406: PUSH
57407: LD_INT 25
57409: PUSH
57410: LD_INT 26
57412: PUSH
57413: LD_INT 27
57415: PUSH
57416: LD_INT 28
57418: PUSH
57419: LD_INT 30
57421: PUSH
57422: LD_INT 31
57424: PUSH
57425: LD_INT 32
57427: PUSH
57428: LD_INT 33
57430: PUSH
57431: LD_INT 34
57433: PUSH
57434: LD_INT 36
57436: PUSH
57437: EMPTY
57438: LIST
57439: LIST
57440: LIST
57441: LIST
57442: LIST
57443: LIST
57444: LIST
57445: LIST
57446: LIST
57447: LIST
57448: LIST
57449: LIST
57450: LIST
57451: LIST
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: LIST
57458: LIST
57459: LIST
57460: LIST
57461: LIST
57462: LIST
57463: LIST
57464: LIST
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: PUSH
57473: LD_INT 101
57475: PUSH
57476: LD_INT 102
57478: PUSH
57479: LD_INT 103
57481: PUSH
57482: LD_INT 104
57484: PUSH
57485: LD_INT 105
57487: PUSH
57488: LD_INT 106
57490: PUSH
57491: LD_INT 107
57493: PUSH
57494: LD_INT 108
57496: PUSH
57497: LD_INT 109
57499: PUSH
57500: LD_INT 110
57502: PUSH
57503: LD_INT 111
57505: PUSH
57506: LD_INT 112
57508: PUSH
57509: LD_INT 113
57511: PUSH
57512: LD_INT 114
57514: PUSH
57515: LD_INT 116
57517: PUSH
57518: LD_INT 117
57520: PUSH
57521: LD_INT 118
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: LIST
57528: LIST
57529: LIST
57530: LIST
57531: LIST
57532: LIST
57533: LIST
57534: LIST
57535: LIST
57536: LIST
57537: LIST
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: ST_TO_ADDR
57547: GO 59002
57549: LD_INT 13
57551: DOUBLE
57552: EQUAL
57553: IFTRUE 57557
57555: GO 57765
57557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
57558: LD_ADDR_VAR 0 2
57562: PUSH
57563: LD_INT 1
57565: PUSH
57566: LD_INT 2
57568: PUSH
57569: LD_INT 3
57571: PUSH
57572: LD_INT 4
57574: PUSH
57575: LD_INT 5
57577: PUSH
57578: LD_INT 8
57580: PUSH
57581: LD_INT 9
57583: PUSH
57584: LD_INT 10
57586: PUSH
57587: LD_INT 11
57589: PUSH
57590: LD_INT 12
57592: PUSH
57593: LD_INT 14
57595: PUSH
57596: LD_INT 15
57598: PUSH
57599: LD_INT 16
57601: PUSH
57602: LD_INT 17
57604: PUSH
57605: LD_INT 18
57607: PUSH
57608: LD_INT 19
57610: PUSH
57611: LD_INT 20
57613: PUSH
57614: LD_INT 21
57616: PUSH
57617: LD_INT 22
57619: PUSH
57620: LD_INT 23
57622: PUSH
57623: LD_INT 24
57625: PUSH
57626: LD_INT 25
57628: PUSH
57629: LD_INT 26
57631: PUSH
57632: LD_INT 27
57634: PUSH
57635: LD_INT 28
57637: PUSH
57638: LD_INT 30
57640: PUSH
57641: LD_INT 31
57643: PUSH
57644: LD_INT 32
57646: PUSH
57647: LD_INT 33
57649: PUSH
57650: LD_INT 34
57652: PUSH
57653: LD_INT 36
57655: PUSH
57656: EMPTY
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: LIST
57664: LIST
57665: LIST
57666: LIST
57667: LIST
57668: LIST
57669: LIST
57670: LIST
57671: LIST
57672: LIST
57673: LIST
57674: LIST
57675: LIST
57676: LIST
57677: LIST
57678: LIST
57679: LIST
57680: LIST
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: LIST
57686: LIST
57687: LIST
57688: PUSH
57689: LD_INT 101
57691: PUSH
57692: LD_INT 102
57694: PUSH
57695: LD_INT 103
57697: PUSH
57698: LD_INT 104
57700: PUSH
57701: LD_INT 105
57703: PUSH
57704: LD_INT 106
57706: PUSH
57707: LD_INT 107
57709: PUSH
57710: LD_INT 108
57712: PUSH
57713: LD_INT 109
57715: PUSH
57716: LD_INT 110
57718: PUSH
57719: LD_INT 111
57721: PUSH
57722: LD_INT 112
57724: PUSH
57725: LD_INT 113
57727: PUSH
57728: LD_INT 114
57730: PUSH
57731: LD_INT 116
57733: PUSH
57734: LD_INT 117
57736: PUSH
57737: LD_INT 118
57739: PUSH
57740: EMPTY
57741: LIST
57742: LIST
57743: LIST
57744: LIST
57745: LIST
57746: LIST
57747: LIST
57748: LIST
57749: LIST
57750: LIST
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: ST_TO_ADDR
57763: GO 59002
57765: LD_INT 14
57767: DOUBLE
57768: EQUAL
57769: IFTRUE 57773
57771: GO 57997
57773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
57774: LD_ADDR_VAR 0 2
57778: PUSH
57779: LD_INT 1
57781: PUSH
57782: LD_INT 2
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: LD_INT 4
57790: PUSH
57791: LD_INT 5
57793: PUSH
57794: LD_INT 6
57796: PUSH
57797: LD_INT 7
57799: PUSH
57800: LD_INT 8
57802: PUSH
57803: LD_INT 9
57805: PUSH
57806: LD_INT 10
57808: PUSH
57809: LD_INT 11
57811: PUSH
57812: LD_INT 12
57814: PUSH
57815: LD_INT 13
57817: PUSH
57818: LD_INT 14
57820: PUSH
57821: LD_INT 15
57823: PUSH
57824: LD_INT 16
57826: PUSH
57827: LD_INT 17
57829: PUSH
57830: LD_INT 18
57832: PUSH
57833: LD_INT 19
57835: PUSH
57836: LD_INT 20
57838: PUSH
57839: LD_INT 21
57841: PUSH
57842: LD_INT 22
57844: PUSH
57845: LD_INT 23
57847: PUSH
57848: LD_INT 24
57850: PUSH
57851: LD_INT 25
57853: PUSH
57854: LD_INT 26
57856: PUSH
57857: LD_INT 27
57859: PUSH
57860: LD_INT 28
57862: PUSH
57863: LD_INT 29
57865: PUSH
57866: LD_INT 30
57868: PUSH
57869: LD_INT 31
57871: PUSH
57872: LD_INT 32
57874: PUSH
57875: LD_INT 33
57877: PUSH
57878: LD_INT 34
57880: PUSH
57881: LD_INT 36
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: LIST
57891: LIST
57892: LIST
57893: LIST
57894: LIST
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: LIST
57902: LIST
57903: LIST
57904: LIST
57905: LIST
57906: LIST
57907: LIST
57908: LIST
57909: LIST
57910: LIST
57911: LIST
57912: LIST
57913: LIST
57914: LIST
57915: LIST
57916: LIST
57917: LIST
57918: LIST
57919: LIST
57920: PUSH
57921: LD_INT 101
57923: PUSH
57924: LD_INT 102
57926: PUSH
57927: LD_INT 103
57929: PUSH
57930: LD_INT 104
57932: PUSH
57933: LD_INT 105
57935: PUSH
57936: LD_INT 106
57938: PUSH
57939: LD_INT 107
57941: PUSH
57942: LD_INT 108
57944: PUSH
57945: LD_INT 109
57947: PUSH
57948: LD_INT 110
57950: PUSH
57951: LD_INT 111
57953: PUSH
57954: LD_INT 112
57956: PUSH
57957: LD_INT 113
57959: PUSH
57960: LD_INT 114
57962: PUSH
57963: LD_INT 116
57965: PUSH
57966: LD_INT 117
57968: PUSH
57969: LD_INT 118
57971: PUSH
57972: EMPTY
57973: LIST
57974: LIST
57975: LIST
57976: LIST
57977: LIST
57978: LIST
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: LIST
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: ST_TO_ADDR
57995: GO 59002
57997: LD_INT 15
57999: DOUBLE
58000: EQUAL
58001: IFTRUE 58005
58003: GO 58229
58005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
58006: LD_ADDR_VAR 0 2
58010: PUSH
58011: LD_INT 1
58013: PUSH
58014: LD_INT 2
58016: PUSH
58017: LD_INT 3
58019: PUSH
58020: LD_INT 4
58022: PUSH
58023: LD_INT 5
58025: PUSH
58026: LD_INT 6
58028: PUSH
58029: LD_INT 7
58031: PUSH
58032: LD_INT 8
58034: PUSH
58035: LD_INT 9
58037: PUSH
58038: LD_INT 10
58040: PUSH
58041: LD_INT 11
58043: PUSH
58044: LD_INT 12
58046: PUSH
58047: LD_INT 13
58049: PUSH
58050: LD_INT 14
58052: PUSH
58053: LD_INT 15
58055: PUSH
58056: LD_INT 16
58058: PUSH
58059: LD_INT 17
58061: PUSH
58062: LD_INT 18
58064: PUSH
58065: LD_INT 19
58067: PUSH
58068: LD_INT 20
58070: PUSH
58071: LD_INT 21
58073: PUSH
58074: LD_INT 22
58076: PUSH
58077: LD_INT 23
58079: PUSH
58080: LD_INT 24
58082: PUSH
58083: LD_INT 25
58085: PUSH
58086: LD_INT 26
58088: PUSH
58089: LD_INT 27
58091: PUSH
58092: LD_INT 28
58094: PUSH
58095: LD_INT 29
58097: PUSH
58098: LD_INT 30
58100: PUSH
58101: LD_INT 31
58103: PUSH
58104: LD_INT 32
58106: PUSH
58107: LD_INT 33
58109: PUSH
58110: LD_INT 34
58112: PUSH
58113: LD_INT 36
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: LIST
58121: LIST
58122: LIST
58123: LIST
58124: LIST
58125: LIST
58126: LIST
58127: LIST
58128: LIST
58129: LIST
58130: LIST
58131: LIST
58132: LIST
58133: LIST
58134: LIST
58135: LIST
58136: LIST
58137: LIST
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: LIST
58143: LIST
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: LIST
58149: LIST
58150: LIST
58151: LIST
58152: PUSH
58153: LD_INT 101
58155: PUSH
58156: LD_INT 102
58158: PUSH
58159: LD_INT 103
58161: PUSH
58162: LD_INT 104
58164: PUSH
58165: LD_INT 105
58167: PUSH
58168: LD_INT 106
58170: PUSH
58171: LD_INT 107
58173: PUSH
58174: LD_INT 108
58176: PUSH
58177: LD_INT 109
58179: PUSH
58180: LD_INT 110
58182: PUSH
58183: LD_INT 111
58185: PUSH
58186: LD_INT 112
58188: PUSH
58189: LD_INT 113
58191: PUSH
58192: LD_INT 114
58194: PUSH
58195: LD_INT 116
58197: PUSH
58198: LD_INT 117
58200: PUSH
58201: LD_INT 118
58203: PUSH
58204: EMPTY
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: LIST
58211: LIST
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: LIST
58221: LIST
58222: PUSH
58223: EMPTY
58224: LIST
58225: LIST
58226: ST_TO_ADDR
58227: GO 59002
58229: LD_INT 16
58231: DOUBLE
58232: EQUAL
58233: IFTRUE 58237
58235: GO 58373
58237: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
58238: LD_ADDR_VAR 0 2
58242: PUSH
58243: LD_INT 2
58245: PUSH
58246: LD_INT 4
58248: PUSH
58249: LD_INT 5
58251: PUSH
58252: LD_INT 7
58254: PUSH
58255: LD_INT 11
58257: PUSH
58258: LD_INT 12
58260: PUSH
58261: LD_INT 15
58263: PUSH
58264: LD_INT 16
58266: PUSH
58267: LD_INT 20
58269: PUSH
58270: LD_INT 21
58272: PUSH
58273: LD_INT 22
58275: PUSH
58276: LD_INT 23
58278: PUSH
58279: LD_INT 25
58281: PUSH
58282: LD_INT 26
58284: PUSH
58285: LD_INT 30
58287: PUSH
58288: LD_INT 31
58290: PUSH
58291: LD_INT 32
58293: PUSH
58294: LD_INT 33
58296: PUSH
58297: LD_INT 34
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: PUSH
58321: LD_INT 101
58323: PUSH
58324: LD_INT 102
58326: PUSH
58327: LD_INT 103
58329: PUSH
58330: LD_INT 106
58332: PUSH
58333: LD_INT 108
58335: PUSH
58336: LD_INT 112
58338: PUSH
58339: LD_INT 113
58341: PUSH
58342: LD_INT 114
58344: PUSH
58345: LD_INT 116
58347: PUSH
58348: LD_INT 117
58350: PUSH
58351: LD_INT 118
58353: PUSH
58354: EMPTY
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: PUSH
58367: EMPTY
58368: LIST
58369: LIST
58370: ST_TO_ADDR
58371: GO 59002
58373: LD_INT 17
58375: DOUBLE
58376: EQUAL
58377: IFTRUE 58381
58379: GO 58605
58381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
58382: LD_ADDR_VAR 0 2
58386: PUSH
58387: LD_INT 1
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 4
58398: PUSH
58399: LD_INT 5
58401: PUSH
58402: LD_INT 6
58404: PUSH
58405: LD_INT 7
58407: PUSH
58408: LD_INT 8
58410: PUSH
58411: LD_INT 9
58413: PUSH
58414: LD_INT 10
58416: PUSH
58417: LD_INT 11
58419: PUSH
58420: LD_INT 12
58422: PUSH
58423: LD_INT 13
58425: PUSH
58426: LD_INT 14
58428: PUSH
58429: LD_INT 15
58431: PUSH
58432: LD_INT 16
58434: PUSH
58435: LD_INT 17
58437: PUSH
58438: LD_INT 18
58440: PUSH
58441: LD_INT 19
58443: PUSH
58444: LD_INT 20
58446: PUSH
58447: LD_INT 21
58449: PUSH
58450: LD_INT 22
58452: PUSH
58453: LD_INT 23
58455: PUSH
58456: LD_INT 24
58458: PUSH
58459: LD_INT 25
58461: PUSH
58462: LD_INT 26
58464: PUSH
58465: LD_INT 27
58467: PUSH
58468: LD_INT 28
58470: PUSH
58471: LD_INT 29
58473: PUSH
58474: LD_INT 30
58476: PUSH
58477: LD_INT 31
58479: PUSH
58480: LD_INT 32
58482: PUSH
58483: LD_INT 33
58485: PUSH
58486: LD_INT 34
58488: PUSH
58489: LD_INT 36
58491: PUSH
58492: EMPTY
58493: LIST
58494: LIST
58495: LIST
58496: LIST
58497: LIST
58498: LIST
58499: LIST
58500: LIST
58501: LIST
58502: LIST
58503: LIST
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: LIST
58510: LIST
58511: LIST
58512: LIST
58513: LIST
58514: LIST
58515: LIST
58516: LIST
58517: LIST
58518: LIST
58519: LIST
58520: LIST
58521: LIST
58522: LIST
58523: LIST
58524: LIST
58525: LIST
58526: LIST
58527: LIST
58528: PUSH
58529: LD_INT 101
58531: PUSH
58532: LD_INT 102
58534: PUSH
58535: LD_INT 103
58537: PUSH
58538: LD_INT 104
58540: PUSH
58541: LD_INT 105
58543: PUSH
58544: LD_INT 106
58546: PUSH
58547: LD_INT 107
58549: PUSH
58550: LD_INT 108
58552: PUSH
58553: LD_INT 109
58555: PUSH
58556: LD_INT 110
58558: PUSH
58559: LD_INT 111
58561: PUSH
58562: LD_INT 112
58564: PUSH
58565: LD_INT 113
58567: PUSH
58568: LD_INT 114
58570: PUSH
58571: LD_INT 116
58573: PUSH
58574: LD_INT 117
58576: PUSH
58577: LD_INT 118
58579: PUSH
58580: EMPTY
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: LIST
58588: LIST
58589: LIST
58590: LIST
58591: LIST
58592: LIST
58593: LIST
58594: LIST
58595: LIST
58596: LIST
58597: LIST
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: ST_TO_ADDR
58603: GO 59002
58605: LD_INT 18
58607: DOUBLE
58608: EQUAL
58609: IFTRUE 58613
58611: GO 58761
58613: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
58614: LD_ADDR_VAR 0 2
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: LD_INT 4
58624: PUSH
58625: LD_INT 5
58627: PUSH
58628: LD_INT 7
58630: PUSH
58631: LD_INT 11
58633: PUSH
58634: LD_INT 12
58636: PUSH
58637: LD_INT 15
58639: PUSH
58640: LD_INT 16
58642: PUSH
58643: LD_INT 20
58645: PUSH
58646: LD_INT 21
58648: PUSH
58649: LD_INT 22
58651: PUSH
58652: LD_INT 23
58654: PUSH
58655: LD_INT 25
58657: PUSH
58658: LD_INT 26
58660: PUSH
58661: LD_INT 30
58663: PUSH
58664: LD_INT 31
58666: PUSH
58667: LD_INT 32
58669: PUSH
58670: LD_INT 33
58672: PUSH
58673: LD_INT 34
58675: PUSH
58676: LD_INT 35
58678: PUSH
58679: LD_INT 36
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: LIST
58689: LIST
58690: LIST
58691: LIST
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: LIST
58703: LIST
58704: PUSH
58705: LD_INT 101
58707: PUSH
58708: LD_INT 102
58710: PUSH
58711: LD_INT 103
58713: PUSH
58714: LD_INT 106
58716: PUSH
58717: LD_INT 108
58719: PUSH
58720: LD_INT 112
58722: PUSH
58723: LD_INT 113
58725: PUSH
58726: LD_INT 114
58728: PUSH
58729: LD_INT 115
58731: PUSH
58732: LD_INT 116
58734: PUSH
58735: LD_INT 117
58737: PUSH
58738: LD_INT 118
58740: PUSH
58741: EMPTY
58742: LIST
58743: LIST
58744: LIST
58745: LIST
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: LIST
58751: LIST
58752: LIST
58753: LIST
58754: PUSH
58755: EMPTY
58756: LIST
58757: LIST
58758: ST_TO_ADDR
58759: GO 59002
58761: LD_INT 19
58763: DOUBLE
58764: EQUAL
58765: IFTRUE 58769
58767: GO 59001
58769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
58770: LD_ADDR_VAR 0 2
58774: PUSH
58775: LD_INT 1
58777: PUSH
58778: LD_INT 2
58780: PUSH
58781: LD_INT 3
58783: PUSH
58784: LD_INT 4
58786: PUSH
58787: LD_INT 5
58789: PUSH
58790: LD_INT 6
58792: PUSH
58793: LD_INT 7
58795: PUSH
58796: LD_INT 8
58798: PUSH
58799: LD_INT 9
58801: PUSH
58802: LD_INT 10
58804: PUSH
58805: LD_INT 11
58807: PUSH
58808: LD_INT 12
58810: PUSH
58811: LD_INT 13
58813: PUSH
58814: LD_INT 14
58816: PUSH
58817: LD_INT 15
58819: PUSH
58820: LD_INT 16
58822: PUSH
58823: LD_INT 17
58825: PUSH
58826: LD_INT 18
58828: PUSH
58829: LD_INT 19
58831: PUSH
58832: LD_INT 20
58834: PUSH
58835: LD_INT 21
58837: PUSH
58838: LD_INT 22
58840: PUSH
58841: LD_INT 23
58843: PUSH
58844: LD_INT 24
58846: PUSH
58847: LD_INT 25
58849: PUSH
58850: LD_INT 26
58852: PUSH
58853: LD_INT 27
58855: PUSH
58856: LD_INT 28
58858: PUSH
58859: LD_INT 29
58861: PUSH
58862: LD_INT 30
58864: PUSH
58865: LD_INT 31
58867: PUSH
58868: LD_INT 32
58870: PUSH
58871: LD_INT 33
58873: PUSH
58874: LD_INT 34
58876: PUSH
58877: LD_INT 35
58879: PUSH
58880: LD_INT 36
58882: PUSH
58883: EMPTY
58884: LIST
58885: LIST
58886: LIST
58887: LIST
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: LIST
58893: LIST
58894: LIST
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: LIST
58902: LIST
58903: LIST
58904: LIST
58905: LIST
58906: LIST
58907: LIST
58908: LIST
58909: LIST
58910: LIST
58911: LIST
58912: LIST
58913: LIST
58914: LIST
58915: LIST
58916: LIST
58917: LIST
58918: LIST
58919: LIST
58920: PUSH
58921: LD_INT 101
58923: PUSH
58924: LD_INT 102
58926: PUSH
58927: LD_INT 103
58929: PUSH
58930: LD_INT 104
58932: PUSH
58933: LD_INT 105
58935: PUSH
58936: LD_INT 106
58938: PUSH
58939: LD_INT 107
58941: PUSH
58942: LD_INT 108
58944: PUSH
58945: LD_INT 109
58947: PUSH
58948: LD_INT 110
58950: PUSH
58951: LD_INT 111
58953: PUSH
58954: LD_INT 112
58956: PUSH
58957: LD_INT 113
58959: PUSH
58960: LD_INT 114
58962: PUSH
58963: LD_INT 115
58965: PUSH
58966: LD_INT 116
58968: PUSH
58969: LD_INT 117
58971: PUSH
58972: LD_INT 118
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: LIST
58979: LIST
58980: LIST
58981: LIST
58982: LIST
58983: LIST
58984: LIST
58985: LIST
58986: LIST
58987: LIST
58988: LIST
58989: LIST
58990: LIST
58991: LIST
58992: LIST
58993: LIST
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: ST_TO_ADDR
58999: GO 59002
59001: POP
// end else
59002: GO 59233
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
59004: LD_ADDR_VAR 0 2
59008: PUSH
59009: LD_INT 1
59011: PUSH
59012: LD_INT 2
59014: PUSH
59015: LD_INT 3
59017: PUSH
59018: LD_INT 4
59020: PUSH
59021: LD_INT 5
59023: PUSH
59024: LD_INT 6
59026: PUSH
59027: LD_INT 7
59029: PUSH
59030: LD_INT 8
59032: PUSH
59033: LD_INT 9
59035: PUSH
59036: LD_INT 10
59038: PUSH
59039: LD_INT 11
59041: PUSH
59042: LD_INT 12
59044: PUSH
59045: LD_INT 13
59047: PUSH
59048: LD_INT 14
59050: PUSH
59051: LD_INT 15
59053: PUSH
59054: LD_INT 16
59056: PUSH
59057: LD_INT 17
59059: PUSH
59060: LD_INT 18
59062: PUSH
59063: LD_INT 19
59065: PUSH
59066: LD_INT 20
59068: PUSH
59069: LD_INT 21
59071: PUSH
59072: LD_INT 22
59074: PUSH
59075: LD_INT 23
59077: PUSH
59078: LD_INT 24
59080: PUSH
59081: LD_INT 25
59083: PUSH
59084: LD_INT 26
59086: PUSH
59087: LD_INT 27
59089: PUSH
59090: LD_INT 28
59092: PUSH
59093: LD_INT 29
59095: PUSH
59096: LD_INT 30
59098: PUSH
59099: LD_INT 31
59101: PUSH
59102: LD_INT 32
59104: PUSH
59105: LD_INT 33
59107: PUSH
59108: LD_INT 34
59110: PUSH
59111: LD_INT 35
59113: PUSH
59114: LD_INT 36
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: LIST
59123: LIST
59124: LIST
59125: LIST
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: LIST
59131: LIST
59132: LIST
59133: LIST
59134: LIST
59135: LIST
59136: LIST
59137: LIST
59138: LIST
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: LIST
59154: PUSH
59155: LD_INT 101
59157: PUSH
59158: LD_INT 102
59160: PUSH
59161: LD_INT 103
59163: PUSH
59164: LD_INT 104
59166: PUSH
59167: LD_INT 105
59169: PUSH
59170: LD_INT 106
59172: PUSH
59173: LD_INT 107
59175: PUSH
59176: LD_INT 108
59178: PUSH
59179: LD_INT 109
59181: PUSH
59182: LD_INT 110
59184: PUSH
59185: LD_INT 111
59187: PUSH
59188: LD_INT 112
59190: PUSH
59191: LD_INT 113
59193: PUSH
59194: LD_INT 114
59196: PUSH
59197: LD_INT 115
59199: PUSH
59200: LD_INT 116
59202: PUSH
59203: LD_INT 117
59205: PUSH
59206: LD_INT 118
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: LIST
59214: LIST
59215: LIST
59216: LIST
59217: LIST
59218: LIST
59219: LIST
59220: LIST
59221: LIST
59222: LIST
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: LIST
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: ST_TO_ADDR
// if result then
59233: LD_VAR 0 2
59237: IFFALSE 60023
// begin normal :=  ;
59239: LD_ADDR_VAR 0 5
59243: PUSH
59244: LD_STRING 
59246: ST_TO_ADDR
// hardcore :=  ;
59247: LD_ADDR_VAR 0 6
59251: PUSH
59252: LD_STRING 
59254: ST_TO_ADDR
// active :=  ;
59255: LD_ADDR_VAR 0 7
59259: PUSH
59260: LD_STRING 
59262: ST_TO_ADDR
// for i = 1 to normalCounter do
59263: LD_ADDR_VAR 0 8
59267: PUSH
59268: DOUBLE
59269: LD_INT 1
59271: DEC
59272: ST_TO_ADDR
59273: LD_EXP 39
59277: PUSH
59278: FOR_TO
59279: IFFALSE 59380
// begin tmp := 0 ;
59281: LD_ADDR_VAR 0 3
59285: PUSH
59286: LD_STRING 0
59288: ST_TO_ADDR
// if result [ 1 ] then
59289: LD_VAR 0 2
59293: PUSH
59294: LD_INT 1
59296: ARRAY
59297: IFFALSE 59362
// if result [ 1 ] [ 1 ] = i then
59299: LD_VAR 0 2
59303: PUSH
59304: LD_INT 1
59306: ARRAY
59307: PUSH
59308: LD_INT 1
59310: ARRAY
59311: PUSH
59312: LD_VAR 0 8
59316: EQUAL
59317: IFFALSE 59362
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
59319: LD_ADDR_VAR 0 2
59323: PUSH
59324: LD_VAR 0 2
59328: PPUSH
59329: LD_INT 1
59331: PPUSH
59332: LD_VAR 0 2
59336: PUSH
59337: LD_INT 1
59339: ARRAY
59340: PPUSH
59341: LD_INT 1
59343: PPUSH
59344: CALL_OW 3
59348: PPUSH
59349: CALL_OW 1
59353: ST_TO_ADDR
// tmp := 1 ;
59354: LD_ADDR_VAR 0 3
59358: PUSH
59359: LD_STRING 1
59361: ST_TO_ADDR
// end ; normal := normal & tmp ;
59362: LD_ADDR_VAR 0 5
59366: PUSH
59367: LD_VAR 0 5
59371: PUSH
59372: LD_VAR 0 3
59376: STR
59377: ST_TO_ADDR
// end ;
59378: GO 59278
59380: POP
59381: POP
// for i = 1 to hardcoreCounter do
59382: LD_ADDR_VAR 0 8
59386: PUSH
59387: DOUBLE
59388: LD_INT 1
59390: DEC
59391: ST_TO_ADDR
59392: LD_EXP 40
59396: PUSH
59397: FOR_TO
59398: IFFALSE 59503
// begin tmp := 0 ;
59400: LD_ADDR_VAR 0 3
59404: PUSH
59405: LD_STRING 0
59407: ST_TO_ADDR
// if result [ 2 ] then
59408: LD_VAR 0 2
59412: PUSH
59413: LD_INT 2
59415: ARRAY
59416: IFFALSE 59485
// if result [ 2 ] [ 1 ] = 100 + i then
59418: LD_VAR 0 2
59422: PUSH
59423: LD_INT 2
59425: ARRAY
59426: PUSH
59427: LD_INT 1
59429: ARRAY
59430: PUSH
59431: LD_INT 100
59433: PUSH
59434: LD_VAR 0 8
59438: PLUS
59439: EQUAL
59440: IFFALSE 59485
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
59442: LD_ADDR_VAR 0 2
59446: PUSH
59447: LD_VAR 0 2
59451: PPUSH
59452: LD_INT 2
59454: PPUSH
59455: LD_VAR 0 2
59459: PUSH
59460: LD_INT 2
59462: ARRAY
59463: PPUSH
59464: LD_INT 1
59466: PPUSH
59467: CALL_OW 3
59471: PPUSH
59472: CALL_OW 1
59476: ST_TO_ADDR
// tmp := 1 ;
59477: LD_ADDR_VAR 0 3
59481: PUSH
59482: LD_STRING 1
59484: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
59485: LD_ADDR_VAR 0 6
59489: PUSH
59490: LD_VAR 0 6
59494: PUSH
59495: LD_VAR 0 3
59499: STR
59500: ST_TO_ADDR
// end ;
59501: GO 59397
59503: POP
59504: POP
// if isGameLoad then
59505: LD_VAR 0 1
59509: IFFALSE 59984
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
59511: LD_ADDR_VAR 0 4
59515: PUSH
59516: LD_EXP 43
59520: PUSH
59521: LD_EXP 42
59525: PUSH
59526: LD_EXP 44
59530: PUSH
59531: LD_EXP 41
59535: PUSH
59536: LD_EXP 45
59540: PUSH
59541: LD_EXP 46
59545: PUSH
59546: LD_EXP 47
59550: PUSH
59551: LD_EXP 48
59555: PUSH
59556: LD_EXP 49
59560: PUSH
59561: LD_EXP 50
59565: PUSH
59566: LD_EXP 51
59570: PUSH
59571: LD_EXP 52
59575: PUSH
59576: LD_EXP 53
59580: PUSH
59581: LD_EXP 54
59585: PUSH
59586: LD_EXP 62
59590: PUSH
59591: LD_EXP 63
59595: PUSH
59596: LD_EXP 64
59600: PUSH
59601: LD_EXP 65
59605: PUSH
59606: LD_EXP 67
59610: PUSH
59611: LD_EXP 68
59615: PUSH
59616: LD_EXP 69
59620: PUSH
59621: LD_EXP 72
59625: PUSH
59626: LD_EXP 74
59630: PUSH
59631: LD_EXP 75
59635: PUSH
59636: LD_EXP 76
59640: PUSH
59641: LD_EXP 78
59645: PUSH
59646: LD_EXP 79
59650: PUSH
59651: LD_EXP 82
59655: PUSH
59656: LD_EXP 83
59660: PUSH
59661: LD_EXP 84
59665: PUSH
59666: LD_EXP 85
59670: PUSH
59671: LD_EXP 86
59675: PUSH
59676: LD_EXP 87
59680: PUSH
59681: LD_EXP 88
59685: PUSH
59686: LD_EXP 89
59690: PUSH
59691: LD_EXP 90
59695: PUSH
59696: LD_EXP 55
59700: PUSH
59701: LD_EXP 56
59705: PUSH
59706: LD_EXP 59
59710: PUSH
59711: LD_EXP 60
59715: PUSH
59716: LD_EXP 61
59720: PUSH
59721: LD_EXP 57
59725: PUSH
59726: LD_EXP 58
59730: PUSH
59731: LD_EXP 66
59735: PUSH
59736: LD_EXP 70
59740: PUSH
59741: LD_EXP 71
59745: PUSH
59746: LD_EXP 73
59750: PUSH
59751: LD_EXP 77
59755: PUSH
59756: LD_EXP 80
59760: PUSH
59761: LD_EXP 81
59765: PUSH
59766: LD_EXP 91
59770: PUSH
59771: LD_EXP 92
59775: PUSH
59776: LD_EXP 93
59780: PUSH
59781: LD_EXP 94
59785: PUSH
59786: EMPTY
59787: LIST
59788: LIST
59789: LIST
59790: LIST
59791: LIST
59792: LIST
59793: LIST
59794: LIST
59795: LIST
59796: LIST
59797: LIST
59798: LIST
59799: LIST
59800: LIST
59801: LIST
59802: LIST
59803: LIST
59804: LIST
59805: LIST
59806: LIST
59807: LIST
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: LIST
59814: LIST
59815: LIST
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: LIST
59830: LIST
59831: LIST
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: LIST
59837: LIST
59838: LIST
59839: LIST
59840: LIST
59841: ST_TO_ADDR
// tmp :=  ;
59842: LD_ADDR_VAR 0 3
59846: PUSH
59847: LD_STRING 
59849: ST_TO_ADDR
// for i = 1 to normalCounter do
59850: LD_ADDR_VAR 0 8
59854: PUSH
59855: DOUBLE
59856: LD_INT 1
59858: DEC
59859: ST_TO_ADDR
59860: LD_EXP 39
59864: PUSH
59865: FOR_TO
59866: IFFALSE 59902
// begin if flags [ i ] then
59868: LD_VAR 0 4
59872: PUSH
59873: LD_VAR 0 8
59877: ARRAY
59878: IFFALSE 59900
// tmp := tmp & i & ; ;
59880: LD_ADDR_VAR 0 3
59884: PUSH
59885: LD_VAR 0 3
59889: PUSH
59890: LD_VAR 0 8
59894: STR
59895: PUSH
59896: LD_STRING ;
59898: STR
59899: ST_TO_ADDR
// end ;
59900: GO 59865
59902: POP
59903: POP
// for i = 1 to hardcoreCounter do
59904: LD_ADDR_VAR 0 8
59908: PUSH
59909: DOUBLE
59910: LD_INT 1
59912: DEC
59913: ST_TO_ADDR
59914: LD_EXP 40
59918: PUSH
59919: FOR_TO
59920: IFFALSE 59966
// begin if flags [ normalCounter + i ] then
59922: LD_VAR 0 4
59926: PUSH
59927: LD_EXP 39
59931: PUSH
59932: LD_VAR 0 8
59936: PLUS
59937: ARRAY
59938: IFFALSE 59964
// tmp := tmp & ( 100 + i ) & ; ;
59940: LD_ADDR_VAR 0 3
59944: PUSH
59945: LD_VAR 0 3
59949: PUSH
59950: LD_INT 100
59952: PUSH
59953: LD_VAR 0 8
59957: PLUS
59958: STR
59959: PUSH
59960: LD_STRING ;
59962: STR
59963: ST_TO_ADDR
// end ;
59964: GO 59919
59966: POP
59967: POP
// if tmp then
59968: LD_VAR 0 3
59972: IFFALSE 59984
// active := tmp ;
59974: LD_ADDR_VAR 0 7
59978: PUSH
59979: LD_VAR 0 3
59983: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
59984: LD_STRING getStreamItemsFromMission("
59986: PUSH
59987: LD_VAR 0 5
59991: STR
59992: PUSH
59993: LD_STRING ","
59995: STR
59996: PUSH
59997: LD_VAR 0 6
60001: STR
60002: PUSH
60003: LD_STRING ","
60005: STR
60006: PUSH
60007: LD_VAR 0 7
60011: STR
60012: PUSH
60013: LD_STRING ")
60015: STR
60016: PPUSH
60017: CALL_OW 559
// end else
60021: GO 60030
// ToLua ( getStreamItemsFromMission("","","") ) ;
60023: LD_STRING getStreamItemsFromMission("","","")
60025: PPUSH
60026: CALL_OW 559
// end ;
60030: LD_VAR 0 2
60034: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
60035: LD_EXP 38
60039: IFFALSE 60047
60041: PUSH
60042: LD_EXP 43
60046: AND
60047: IFFALSE 60171
60049: GO 60051
60051: DISABLE
60052: LD_INT 0
60054: PPUSH
60055: PPUSH
// begin enable ;
60056: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
60057: LD_ADDR_VAR 0 2
60061: PUSH
60062: LD_INT 22
60064: PUSH
60065: LD_OWVAR 2
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 2
60076: PUSH
60077: LD_INT 34
60079: PUSH
60080: LD_INT 7
60082: PUSH
60083: EMPTY
60084: LIST
60085: LIST
60086: PUSH
60087: LD_INT 34
60089: PUSH
60090: LD_INT 45
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: PUSH
60097: LD_INT 34
60099: PUSH
60100: LD_INT 28
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: PUSH
60107: LD_INT 34
60109: PUSH
60110: LD_INT 47
60112: PUSH
60113: EMPTY
60114: LIST
60115: LIST
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: LIST
60121: LIST
60122: LIST
60123: PUSH
60124: EMPTY
60125: LIST
60126: LIST
60127: PPUSH
60128: CALL_OW 69
60132: ST_TO_ADDR
// if not tmp then
60133: LD_VAR 0 2
60137: NOT
60138: IFFALSE 60142
// exit ;
60140: GO 60171
// for i in tmp do
60142: LD_ADDR_VAR 0 1
60146: PUSH
60147: LD_VAR 0 2
60151: PUSH
60152: FOR_IN
60153: IFFALSE 60169
// begin SetLives ( i , 0 ) ;
60155: LD_VAR 0 1
60159: PPUSH
60160: LD_INT 0
60162: PPUSH
60163: CALL_OW 234
// end ;
60167: GO 60152
60169: POP
60170: POP
// end ;
60171: PPOPN 2
60173: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
60174: LD_EXP 38
60178: IFFALSE 60186
60180: PUSH
60181: LD_EXP 44
60185: AND
60186: IFFALSE 60270
60188: GO 60190
60190: DISABLE
60191: LD_INT 0
60193: PPUSH
60194: PPUSH
// begin enable ;
60195: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
60196: LD_ADDR_VAR 0 2
60200: PUSH
60201: LD_INT 22
60203: PUSH
60204: LD_OWVAR 2
60208: PUSH
60209: EMPTY
60210: LIST
60211: LIST
60212: PUSH
60213: LD_INT 32
60215: PUSH
60216: LD_INT 3
60218: PUSH
60219: EMPTY
60220: LIST
60221: LIST
60222: PUSH
60223: EMPTY
60224: LIST
60225: LIST
60226: PPUSH
60227: CALL_OW 69
60231: ST_TO_ADDR
// if not tmp then
60232: LD_VAR 0 2
60236: NOT
60237: IFFALSE 60241
// exit ;
60239: GO 60270
// for i in tmp do
60241: LD_ADDR_VAR 0 1
60245: PUSH
60246: LD_VAR 0 2
60250: PUSH
60251: FOR_IN
60252: IFFALSE 60268
// begin SetLives ( i , 0 ) ;
60254: LD_VAR 0 1
60258: PPUSH
60259: LD_INT 0
60261: PPUSH
60262: CALL_OW 234
// end ;
60266: GO 60251
60268: POP
60269: POP
// end ;
60270: PPOPN 2
60272: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
60273: LD_EXP 38
60277: IFFALSE 60285
60279: PUSH
60280: LD_EXP 41
60284: AND
60285: IFFALSE 60378
60287: GO 60289
60289: DISABLE
60290: LD_INT 0
60292: PPUSH
// begin enable ;
60293: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
60294: LD_ADDR_VAR 0 1
60298: PUSH
60299: LD_INT 22
60301: PUSH
60302: LD_OWVAR 2
60306: PUSH
60307: EMPTY
60308: LIST
60309: LIST
60310: PUSH
60311: LD_INT 2
60313: PUSH
60314: LD_INT 25
60316: PUSH
60317: LD_INT 5
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PUSH
60324: LD_INT 25
60326: PUSH
60327: LD_INT 9
60329: PUSH
60330: EMPTY
60331: LIST
60332: LIST
60333: PUSH
60334: LD_INT 25
60336: PUSH
60337: LD_INT 8
60339: PUSH
60340: EMPTY
60341: LIST
60342: LIST
60343: PUSH
60344: EMPTY
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: PUSH
60350: EMPTY
60351: LIST
60352: LIST
60353: PPUSH
60354: CALL_OW 69
60358: PUSH
60359: FOR_IN
60360: IFFALSE 60376
// begin SetClass ( i , 1 ) ;
60362: LD_VAR 0 1
60366: PPUSH
60367: LD_INT 1
60369: PPUSH
60370: CALL_OW 336
// end ;
60374: GO 60359
60376: POP
60377: POP
// end ;
60378: PPOPN 1
60380: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
60381: LD_EXP 38
60385: IFFALSE 60393
60387: PUSH
60388: LD_EXP 42
60392: AND
60393: IFFALSE 60405
60395: PUSH
60396: LD_OWVAR 65
60400: PUSH
60401: LD_INT 7
60403: LESS
60404: AND
60405: IFFALSE 60419
60407: GO 60409
60409: DISABLE
// begin enable ;
60410: ENABLE
// game_speed := 7 ;
60411: LD_ADDR_OWVAR 65
60415: PUSH
60416: LD_INT 7
60418: ST_TO_ADDR
// end ;
60419: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
60420: LD_EXP 38
60424: IFFALSE 60432
60426: PUSH
60427: LD_EXP 45
60431: AND
60432: IFFALSE 60634
60434: GO 60436
60436: DISABLE
60437: LD_INT 0
60439: PPUSH
60440: PPUSH
60441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
60442: LD_ADDR_VAR 0 3
60446: PUSH
60447: LD_INT 81
60449: PUSH
60450: LD_OWVAR 2
60454: PUSH
60455: EMPTY
60456: LIST
60457: LIST
60458: PUSH
60459: LD_INT 21
60461: PUSH
60462: LD_INT 1
60464: PUSH
60465: EMPTY
60466: LIST
60467: LIST
60468: PUSH
60469: EMPTY
60470: LIST
60471: LIST
60472: PPUSH
60473: CALL_OW 69
60477: ST_TO_ADDR
// if not tmp then
60478: LD_VAR 0 3
60482: NOT
60483: IFFALSE 60487
// exit ;
60485: GO 60634
// if tmp > 5 then
60487: LD_VAR 0 3
60491: PUSH
60492: LD_INT 5
60494: GREATER
60495: IFFALSE 60507
// k := 5 else
60497: LD_ADDR_VAR 0 2
60501: PUSH
60502: LD_INT 5
60504: ST_TO_ADDR
60505: GO 60517
// k := tmp ;
60507: LD_ADDR_VAR 0 2
60511: PUSH
60512: LD_VAR 0 3
60516: ST_TO_ADDR
// for i := 1 to k do
60517: LD_ADDR_VAR 0 1
60521: PUSH
60522: DOUBLE
60523: LD_INT 1
60525: DEC
60526: ST_TO_ADDR
60527: LD_VAR 0 2
60531: PUSH
60532: FOR_TO
60533: IFFALSE 60632
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
60535: LD_VAR 0 3
60539: PUSH
60540: LD_VAR 0 1
60544: ARRAY
60545: PPUSH
60546: LD_VAR 0 1
60550: PUSH
60551: LD_INT 4
60553: MOD
60554: PUSH
60555: LD_INT 1
60557: PLUS
60558: PPUSH
60559: CALL_OW 259
60563: PUSH
60564: LD_INT 10
60566: LESS
60567: IFFALSE 60630
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
60569: LD_VAR 0 3
60573: PUSH
60574: LD_VAR 0 1
60578: ARRAY
60579: PPUSH
60580: LD_VAR 0 1
60584: PUSH
60585: LD_INT 4
60587: MOD
60588: PUSH
60589: LD_INT 1
60591: PLUS
60592: PPUSH
60593: LD_VAR 0 3
60597: PUSH
60598: LD_VAR 0 1
60602: ARRAY
60603: PPUSH
60604: LD_VAR 0 1
60608: PUSH
60609: LD_INT 4
60611: MOD
60612: PUSH
60613: LD_INT 1
60615: PLUS
60616: PPUSH
60617: CALL_OW 259
60621: PUSH
60622: LD_INT 1
60624: PLUS
60625: PPUSH
60626: CALL_OW 237
60630: GO 60532
60632: POP
60633: POP
// end ;
60634: PPOPN 3
60636: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
60637: LD_EXP 38
60641: IFFALSE 60649
60643: PUSH
60644: LD_EXP 46
60648: AND
60649: IFFALSE 60669
60651: GO 60653
60653: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
60654: LD_INT 4
60656: PPUSH
60657: LD_OWVAR 2
60661: PPUSH
60662: LD_INT 0
60664: PPUSH
60665: CALL_OW 324
60669: END
// every 0 0$1 trigger StreamModeActive and sShovel do
60670: LD_EXP 38
60674: IFFALSE 60682
60676: PUSH
60677: LD_EXP 75
60681: AND
60682: IFFALSE 60702
60684: GO 60686
60686: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
60687: LD_INT 19
60689: PPUSH
60690: LD_OWVAR 2
60694: PPUSH
60695: LD_INT 0
60697: PPUSH
60698: CALL_OW 324
60702: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
60703: LD_EXP 38
60707: IFFALSE 60715
60709: PUSH
60710: LD_EXP 47
60714: AND
60715: IFFALSE 60817
60717: GO 60719
60719: DISABLE
60720: LD_INT 0
60722: PPUSH
60723: PPUSH
// begin enable ;
60724: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
60725: LD_ADDR_VAR 0 2
60729: PUSH
60730: LD_INT 22
60732: PUSH
60733: LD_OWVAR 2
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: PUSH
60742: LD_INT 2
60744: PUSH
60745: LD_INT 34
60747: PUSH
60748: LD_INT 11
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 34
60757: PUSH
60758: LD_INT 30
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: LIST
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: PPUSH
60774: CALL_OW 69
60778: ST_TO_ADDR
// if not tmp then
60779: LD_VAR 0 2
60783: NOT
60784: IFFALSE 60788
// exit ;
60786: GO 60817
// for i in tmp do
60788: LD_ADDR_VAR 0 1
60792: PUSH
60793: LD_VAR 0 2
60797: PUSH
60798: FOR_IN
60799: IFFALSE 60815
// begin SetLives ( i , 0 ) ;
60801: LD_VAR 0 1
60805: PPUSH
60806: LD_INT 0
60808: PPUSH
60809: CALL_OW 234
// end ;
60813: GO 60798
60815: POP
60816: POP
// end ;
60817: PPOPN 2
60819: END
// every 0 0$1 trigger StreamModeActive and sBunker do
60820: LD_EXP 38
60824: IFFALSE 60832
60826: PUSH
60827: LD_EXP 48
60831: AND
60832: IFFALSE 60852
60834: GO 60836
60836: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
60837: LD_INT 32
60839: PPUSH
60840: LD_OWVAR 2
60844: PPUSH
60845: LD_INT 0
60847: PPUSH
60848: CALL_OW 324
60852: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
60853: LD_EXP 38
60857: IFFALSE 60865
60859: PUSH
60860: LD_EXP 49
60864: AND
60865: IFFALSE 61048
60867: GO 60869
60869: DISABLE
60870: LD_INT 0
60872: PPUSH
60873: PPUSH
60874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
60875: LD_ADDR_VAR 0 2
60879: PUSH
60880: LD_INT 22
60882: PUSH
60883: LD_OWVAR 2
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: PUSH
60892: LD_INT 33
60894: PUSH
60895: LD_INT 3
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: PUSH
60902: EMPTY
60903: LIST
60904: LIST
60905: PPUSH
60906: CALL_OW 69
60910: ST_TO_ADDR
// if not tmp then
60911: LD_VAR 0 2
60915: NOT
60916: IFFALSE 60920
// exit ;
60918: GO 61048
// side := 0 ;
60920: LD_ADDR_VAR 0 3
60924: PUSH
60925: LD_INT 0
60927: ST_TO_ADDR
// for i := 1 to 8 do
60928: LD_ADDR_VAR 0 1
60932: PUSH
60933: DOUBLE
60934: LD_INT 1
60936: DEC
60937: ST_TO_ADDR
60938: LD_INT 8
60940: PUSH
60941: FOR_TO
60942: IFFALSE 60992
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
60944: LD_OWVAR 2
60948: PUSH
60949: LD_VAR 0 1
60953: NONEQUAL
60954: IFFALSE 60976
60956: PUSH
60957: LD_OWVAR 2
60961: PPUSH
60962: LD_VAR 0 1
60966: PPUSH
60967: CALL_OW 81
60971: PUSH
60972: LD_INT 2
60974: EQUAL
60975: AND
60976: IFFALSE 60990
// begin side := i ;
60978: LD_ADDR_VAR 0 3
60982: PUSH
60983: LD_VAR 0 1
60987: ST_TO_ADDR
// break ;
60988: GO 60992
// end ;
60990: GO 60941
60992: POP
60993: POP
// if not side then
60994: LD_VAR 0 3
60998: NOT
60999: IFFALSE 61003
// exit ;
61001: GO 61048
// for i := 1 to tmp do
61003: LD_ADDR_VAR 0 1
61007: PUSH
61008: DOUBLE
61009: LD_INT 1
61011: DEC
61012: ST_TO_ADDR
61013: LD_VAR 0 2
61017: PUSH
61018: FOR_TO
61019: IFFALSE 61046
// if Prob ( 60 ) then
61021: LD_INT 60
61023: PPUSH
61024: CALL_OW 13
61028: IFFALSE 61044
// SetSide ( i , side ) ;
61030: LD_VAR 0 1
61034: PPUSH
61035: LD_VAR 0 3
61039: PPUSH
61040: CALL_OW 235
61044: GO 61018
61046: POP
61047: POP
// end ;
61048: PPOPN 3
61050: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
61051: LD_EXP 38
61055: IFFALSE 61063
61057: PUSH
61058: LD_EXP 51
61062: AND
61063: IFFALSE 61182
61065: GO 61067
61067: DISABLE
61068: LD_INT 0
61070: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
61071: LD_ADDR_VAR 0 1
61075: PUSH
61076: LD_INT 22
61078: PUSH
61079: LD_OWVAR 2
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: PUSH
61088: LD_INT 21
61090: PUSH
61091: LD_INT 1
61093: PUSH
61094: EMPTY
61095: LIST
61096: LIST
61097: PUSH
61098: LD_INT 3
61100: PUSH
61101: LD_INT 23
61103: PUSH
61104: LD_INT 0
61106: PUSH
61107: EMPTY
61108: LIST
61109: LIST
61110: PUSH
61111: EMPTY
61112: LIST
61113: LIST
61114: PUSH
61115: EMPTY
61116: LIST
61117: LIST
61118: LIST
61119: PPUSH
61120: CALL_OW 69
61124: PUSH
61125: FOR_IN
61126: IFFALSE 61180
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
61128: LD_VAR 0 1
61132: PPUSH
61133: CALL_OW 257
61137: PUSH
61138: LD_INT 1
61140: PUSH
61141: LD_INT 2
61143: PUSH
61144: LD_INT 3
61146: PUSH
61147: LD_INT 4
61149: PUSH
61150: EMPTY
61151: LIST
61152: LIST
61153: LIST
61154: LIST
61155: IN
61156: IFFALSE 61178
// SetClass ( un , rand ( 1 , 4 ) ) ;
61158: LD_VAR 0 1
61162: PPUSH
61163: LD_INT 1
61165: PPUSH
61166: LD_INT 4
61168: PPUSH
61169: CALL_OW 12
61173: PPUSH
61174: CALL_OW 336
61178: GO 61125
61180: POP
61181: POP
// end ;
61182: PPOPN 1
61184: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
61185: LD_EXP 38
61189: IFFALSE 61197
61191: PUSH
61192: LD_EXP 50
61196: AND
61197: IFFALSE 61276
61199: GO 61201
61201: DISABLE
61202: LD_INT 0
61204: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61205: LD_ADDR_VAR 0 1
61209: PUSH
61210: LD_INT 22
61212: PUSH
61213: LD_OWVAR 2
61217: PUSH
61218: EMPTY
61219: LIST
61220: LIST
61221: PUSH
61222: LD_INT 21
61224: PUSH
61225: LD_INT 3
61227: PUSH
61228: EMPTY
61229: LIST
61230: LIST
61231: PUSH
61232: EMPTY
61233: LIST
61234: LIST
61235: PPUSH
61236: CALL_OW 69
61240: ST_TO_ADDR
// if not tmp then
61241: LD_VAR 0 1
61245: NOT
61246: IFFALSE 61250
// exit ;
61248: GO 61276
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
61250: LD_VAR 0 1
61254: PUSH
61255: LD_INT 1
61257: PPUSH
61258: LD_VAR 0 1
61262: PPUSH
61263: CALL_OW 12
61267: ARRAY
61268: PPUSH
61269: LD_INT 100
61271: PPUSH
61272: CALL_OW 234
// end ;
61276: PPOPN 1
61278: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
61279: LD_EXP 38
61283: IFFALSE 61291
61285: PUSH
61286: LD_EXP 52
61290: AND
61291: IFFALSE 61389
61293: GO 61295
61295: DISABLE
61296: LD_INT 0
61298: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
61299: LD_ADDR_VAR 0 1
61303: PUSH
61304: LD_INT 22
61306: PUSH
61307: LD_OWVAR 2
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 21
61318: PUSH
61319: LD_INT 1
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PPUSH
61330: CALL_OW 69
61334: ST_TO_ADDR
// if not tmp then
61335: LD_VAR 0 1
61339: NOT
61340: IFFALSE 61344
// exit ;
61342: GO 61389
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
61344: LD_VAR 0 1
61348: PUSH
61349: LD_INT 1
61351: PPUSH
61352: LD_VAR 0 1
61356: PPUSH
61357: CALL_OW 12
61361: ARRAY
61362: PPUSH
61363: LD_INT 1
61365: PPUSH
61366: LD_INT 4
61368: PPUSH
61369: CALL_OW 12
61373: PPUSH
61374: LD_INT 3000
61376: PPUSH
61377: LD_INT 9000
61379: PPUSH
61380: CALL_OW 12
61384: PPUSH
61385: CALL_OW 492
// end ;
61389: PPOPN 1
61391: END
// every 0 0$1 trigger StreamModeActive and sDepot do
61392: LD_EXP 38
61396: IFFALSE 61404
61398: PUSH
61399: LD_EXP 53
61403: AND
61404: IFFALSE 61424
61406: GO 61408
61408: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
61409: LD_INT 1
61411: PPUSH
61412: LD_OWVAR 2
61416: PPUSH
61417: LD_INT 0
61419: PPUSH
61420: CALL_OW 324
61424: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
61425: LD_EXP 38
61429: IFFALSE 61437
61431: PUSH
61432: LD_EXP 54
61436: AND
61437: IFFALSE 61520
61439: GO 61441
61441: DISABLE
61442: LD_INT 0
61444: PPUSH
61445: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
61446: LD_ADDR_VAR 0 2
61450: PUSH
61451: LD_INT 22
61453: PUSH
61454: LD_OWVAR 2
61458: PUSH
61459: EMPTY
61460: LIST
61461: LIST
61462: PUSH
61463: LD_INT 21
61465: PUSH
61466: LD_INT 3
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: PUSH
61473: EMPTY
61474: LIST
61475: LIST
61476: PPUSH
61477: CALL_OW 69
61481: ST_TO_ADDR
// if not tmp then
61482: LD_VAR 0 2
61486: NOT
61487: IFFALSE 61491
// exit ;
61489: GO 61520
// for i in tmp do
61491: LD_ADDR_VAR 0 1
61495: PUSH
61496: LD_VAR 0 2
61500: PUSH
61501: FOR_IN
61502: IFFALSE 61518
// SetBLevel ( i , 10 ) ;
61504: LD_VAR 0 1
61508: PPUSH
61509: LD_INT 10
61511: PPUSH
61512: CALL_OW 241
61516: GO 61501
61518: POP
61519: POP
// end ;
61520: PPOPN 2
61522: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
61523: LD_EXP 38
61527: IFFALSE 61535
61529: PUSH
61530: LD_EXP 55
61534: AND
61535: IFFALSE 61646
61537: GO 61539
61539: DISABLE
61540: LD_INT 0
61542: PPUSH
61543: PPUSH
61544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61545: LD_ADDR_VAR 0 3
61549: PUSH
61550: LD_INT 22
61552: PUSH
61553: LD_OWVAR 2
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 25
61564: PUSH
61565: LD_INT 1
61567: PUSH
61568: EMPTY
61569: LIST
61570: LIST
61571: PUSH
61572: EMPTY
61573: LIST
61574: LIST
61575: PPUSH
61576: CALL_OW 69
61580: ST_TO_ADDR
// if not tmp then
61581: LD_VAR 0 3
61585: NOT
61586: IFFALSE 61590
// exit ;
61588: GO 61646
// un := tmp [ rand ( 1 , tmp ) ] ;
61590: LD_ADDR_VAR 0 2
61594: PUSH
61595: LD_VAR 0 3
61599: PUSH
61600: LD_INT 1
61602: PPUSH
61603: LD_VAR 0 3
61607: PPUSH
61608: CALL_OW 12
61612: ARRAY
61613: ST_TO_ADDR
// if Crawls ( un ) then
61614: LD_VAR 0 2
61618: PPUSH
61619: CALL_OW 318
61623: IFFALSE 61634
// ComWalk ( un ) ;
61625: LD_VAR 0 2
61629: PPUSH
61630: CALL_OW 138
// SetClass ( un , class_sniper ) ;
61634: LD_VAR 0 2
61638: PPUSH
61639: LD_INT 5
61641: PPUSH
61642: CALL_OW 336
// end ;
61646: PPOPN 3
61648: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
61649: LD_EXP 38
61653: IFFALSE 61661
61655: PUSH
61656: LD_EXP 56
61660: AND
61661: IFFALSE 61673
61663: PUSH
61664: LD_OWVAR 67
61668: PUSH
61669: LD_INT 4
61671: LESS
61672: AND
61673: IFFALSE 61692
61675: GO 61677
61677: DISABLE
// begin Difficulty := Difficulty + 1 ;
61678: LD_ADDR_OWVAR 67
61682: PUSH
61683: LD_OWVAR 67
61687: PUSH
61688: LD_INT 1
61690: PLUS
61691: ST_TO_ADDR
// end ;
61692: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
61693: LD_EXP 38
61697: IFFALSE 61705
61699: PUSH
61700: LD_EXP 57
61704: AND
61705: IFFALSE 61808
61707: GO 61709
61709: DISABLE
61710: LD_INT 0
61712: PPUSH
// begin for i := 1 to 5 do
61713: LD_ADDR_VAR 0 1
61717: PUSH
61718: DOUBLE
61719: LD_INT 1
61721: DEC
61722: ST_TO_ADDR
61723: LD_INT 5
61725: PUSH
61726: FOR_TO
61727: IFFALSE 61806
// begin uc_nation := nation_nature ;
61729: LD_ADDR_OWVAR 21
61733: PUSH
61734: LD_INT 0
61736: ST_TO_ADDR
// uc_side := 0 ;
61737: LD_ADDR_OWVAR 20
61741: PUSH
61742: LD_INT 0
61744: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
61745: LD_ADDR_OWVAR 29
61749: PUSH
61750: LD_INT 12
61752: PUSH
61753: LD_INT 12
61755: PUSH
61756: EMPTY
61757: LIST
61758: LIST
61759: ST_TO_ADDR
// hc_agressivity := 20 ;
61760: LD_ADDR_OWVAR 35
61764: PUSH
61765: LD_INT 20
61767: ST_TO_ADDR
// hc_class := class_tiger ;
61768: LD_ADDR_OWVAR 28
61772: PUSH
61773: LD_INT 14
61775: ST_TO_ADDR
// hc_gallery :=  ;
61776: LD_ADDR_OWVAR 33
61780: PUSH
61781: LD_STRING 
61783: ST_TO_ADDR
// hc_name :=  ;
61784: LD_ADDR_OWVAR 26
61788: PUSH
61789: LD_STRING 
61791: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
61792: CALL_OW 44
61796: PPUSH
61797: LD_INT 0
61799: PPUSH
61800: CALL_OW 51
// end ;
61804: GO 61726
61806: POP
61807: POP
// end ;
61808: PPOPN 1
61810: END
// every 0 0$1 trigger StreamModeActive and sBomb do
61811: LD_EXP 38
61815: IFFALSE 61823
61817: PUSH
61818: LD_EXP 58
61822: AND
61823: IFFALSE 61832
61825: GO 61827
61827: DISABLE
// StreamSibBomb ;
61828: CALL 61833 0 0
61832: END
// export function StreamSibBomb ; var i , x , y ; begin
61833: LD_INT 0
61835: PPUSH
61836: PPUSH
61837: PPUSH
61838: PPUSH
// result := false ;
61839: LD_ADDR_VAR 0 1
61843: PUSH
61844: LD_INT 0
61846: ST_TO_ADDR
// for i := 1 to 16 do
61847: LD_ADDR_VAR 0 2
61851: PUSH
61852: DOUBLE
61853: LD_INT 1
61855: DEC
61856: ST_TO_ADDR
61857: LD_INT 16
61859: PUSH
61860: FOR_TO
61861: IFFALSE 62060
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61863: LD_ADDR_VAR 0 3
61867: PUSH
61868: LD_INT 10
61870: PUSH
61871: LD_INT 20
61873: PUSH
61874: LD_INT 30
61876: PUSH
61877: LD_INT 40
61879: PUSH
61880: LD_INT 50
61882: PUSH
61883: LD_INT 60
61885: PUSH
61886: LD_INT 70
61888: PUSH
61889: LD_INT 80
61891: PUSH
61892: LD_INT 90
61894: PUSH
61895: LD_INT 100
61897: PUSH
61898: LD_INT 110
61900: PUSH
61901: LD_INT 120
61903: PUSH
61904: LD_INT 130
61906: PUSH
61907: LD_INT 140
61909: PUSH
61910: LD_INT 150
61912: PUSH
61913: EMPTY
61914: LIST
61915: LIST
61916: LIST
61917: LIST
61918: LIST
61919: LIST
61920: LIST
61921: LIST
61922: LIST
61923: LIST
61924: LIST
61925: LIST
61926: LIST
61927: LIST
61928: LIST
61929: PUSH
61930: LD_INT 1
61932: PPUSH
61933: LD_INT 15
61935: PPUSH
61936: CALL_OW 12
61940: ARRAY
61941: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
61942: LD_ADDR_VAR 0 4
61946: PUSH
61947: LD_INT 10
61949: PUSH
61950: LD_INT 20
61952: PUSH
61953: LD_INT 30
61955: PUSH
61956: LD_INT 40
61958: PUSH
61959: LD_INT 50
61961: PUSH
61962: LD_INT 60
61964: PUSH
61965: LD_INT 70
61967: PUSH
61968: LD_INT 80
61970: PUSH
61971: LD_INT 90
61973: PUSH
61974: LD_INT 100
61976: PUSH
61977: LD_INT 110
61979: PUSH
61980: LD_INT 120
61982: PUSH
61983: LD_INT 130
61985: PUSH
61986: LD_INT 140
61988: PUSH
61989: LD_INT 150
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: LIST
61996: LIST
61997: LIST
61998: LIST
61999: LIST
62000: LIST
62001: LIST
62002: LIST
62003: LIST
62004: LIST
62005: LIST
62006: LIST
62007: LIST
62008: PUSH
62009: LD_INT 1
62011: PPUSH
62012: LD_INT 15
62014: PPUSH
62015: CALL_OW 12
62019: ARRAY
62020: ST_TO_ADDR
// if ValidHex ( x , y ) then
62021: LD_VAR 0 3
62025: PPUSH
62026: LD_VAR 0 4
62030: PPUSH
62031: CALL_OW 488
62035: IFFALSE 62058
// begin result := [ x , y ] ;
62037: LD_ADDR_VAR 0 1
62041: PUSH
62042: LD_VAR 0 3
62046: PUSH
62047: LD_VAR 0 4
62051: PUSH
62052: EMPTY
62053: LIST
62054: LIST
62055: ST_TO_ADDR
// break ;
62056: GO 62060
// end ; end ;
62058: GO 61860
62060: POP
62061: POP
// if result then
62062: LD_VAR 0 1
62066: IFFALSE 62126
// begin ToLua ( playSibBomb() ) ;
62068: LD_STRING playSibBomb()
62070: PPUSH
62071: CALL_OW 559
// wait ( 0 0$14 ) ;
62075: LD_INT 490
62077: PPUSH
62078: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
62082: LD_VAR 0 1
62086: PUSH
62087: LD_INT 1
62089: ARRAY
62090: PPUSH
62091: LD_VAR 0 1
62095: PUSH
62096: LD_INT 2
62098: ARRAY
62099: PPUSH
62100: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
62104: LD_VAR 0 1
62108: PUSH
62109: LD_INT 1
62111: ARRAY
62112: PPUSH
62113: LD_VAR 0 1
62117: PUSH
62118: LD_INT 2
62120: ARRAY
62121: PPUSH
62122: CALL_OW 429
// end ; end ;
62126: LD_VAR 0 1
62130: RET
// every 0 0$1 trigger StreamModeActive and sReset do
62131: LD_EXP 38
62135: IFFALSE 62143
62137: PUSH
62138: LD_EXP 60
62142: AND
62143: IFFALSE 62155
62145: GO 62147
62147: DISABLE
// YouLost (  ) ;
62148: LD_STRING 
62150: PPUSH
62151: CALL_OW 104
62155: END
// every 0 0$1 trigger StreamModeActive and sFog do
62156: LD_EXP 38
62160: IFFALSE 62168
62162: PUSH
62163: LD_EXP 59
62167: AND
62168: IFFALSE 62182
62170: GO 62172
62172: DISABLE
// FogOff ( your_side ) ;
62173: LD_OWVAR 2
62177: PPUSH
62178: CALL_OW 344
62182: END
// every 0 0$1 trigger StreamModeActive and sSun do
62183: LD_EXP 38
62187: IFFALSE 62195
62189: PUSH
62190: LD_EXP 61
62194: AND
62195: IFFALSE 62223
62197: GO 62199
62199: DISABLE
// begin solar_recharge_percent := 0 ;
62200: LD_ADDR_OWVAR 79
62204: PUSH
62205: LD_INT 0
62207: ST_TO_ADDR
// wait ( 5 5$00 ) ;
62208: LD_INT 10500
62210: PPUSH
62211: CALL_OW 67
// solar_recharge_percent := 100 ;
62215: LD_ADDR_OWVAR 79
62219: PUSH
62220: LD_INT 100
62222: ST_TO_ADDR
// end ;
62223: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
62224: LD_EXP 38
62228: IFFALSE 62236
62230: PUSH
62231: LD_EXP 62
62235: AND
62236: IFFALSE 62475
62238: GO 62240
62240: DISABLE
62241: LD_INT 0
62243: PPUSH
62244: PPUSH
62245: PPUSH
// begin tmp := [ ] ;
62246: LD_ADDR_VAR 0 3
62250: PUSH
62251: EMPTY
62252: ST_TO_ADDR
// for i := 1 to 6 do
62253: LD_ADDR_VAR 0 1
62257: PUSH
62258: DOUBLE
62259: LD_INT 1
62261: DEC
62262: ST_TO_ADDR
62263: LD_INT 6
62265: PUSH
62266: FOR_TO
62267: IFFALSE 62372
// begin uc_nation := nation_nature ;
62269: LD_ADDR_OWVAR 21
62273: PUSH
62274: LD_INT 0
62276: ST_TO_ADDR
// uc_side := 0 ;
62277: LD_ADDR_OWVAR 20
62281: PUSH
62282: LD_INT 0
62284: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
62285: LD_ADDR_OWVAR 29
62289: PUSH
62290: LD_INT 12
62292: PUSH
62293: LD_INT 12
62295: PUSH
62296: EMPTY
62297: LIST
62298: LIST
62299: ST_TO_ADDR
// hc_agressivity := 20 ;
62300: LD_ADDR_OWVAR 35
62304: PUSH
62305: LD_INT 20
62307: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
62308: LD_ADDR_OWVAR 28
62312: PUSH
62313: LD_INT 17
62315: ST_TO_ADDR
// hc_gallery :=  ;
62316: LD_ADDR_OWVAR 33
62320: PUSH
62321: LD_STRING 
62323: ST_TO_ADDR
// hc_name :=  ;
62324: LD_ADDR_OWVAR 26
62328: PUSH
62329: LD_STRING 
62331: ST_TO_ADDR
// un := CreateHuman ;
62332: LD_ADDR_VAR 0 2
62336: PUSH
62337: CALL_OW 44
62341: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
62342: LD_VAR 0 2
62346: PPUSH
62347: LD_INT 1
62349: PPUSH
62350: CALL_OW 51
// tmp := tmp ^ un ;
62354: LD_ADDR_VAR 0 3
62358: PUSH
62359: LD_VAR 0 3
62363: PUSH
62364: LD_VAR 0 2
62368: ADD
62369: ST_TO_ADDR
// end ;
62370: GO 62266
62372: POP
62373: POP
// repeat wait ( 0 0$1 ) ;
62374: LD_INT 35
62376: PPUSH
62377: CALL_OW 67
// for un in tmp do
62381: LD_ADDR_VAR 0 2
62385: PUSH
62386: LD_VAR 0 3
62390: PUSH
62391: FOR_IN
62392: IFFALSE 62466
// begin if IsDead ( un ) then
62394: LD_VAR 0 2
62398: PPUSH
62399: CALL_OW 301
62403: IFFALSE 62423
// begin tmp := tmp diff un ;
62405: LD_ADDR_VAR 0 3
62409: PUSH
62410: LD_VAR 0 3
62414: PUSH
62415: LD_VAR 0 2
62419: DIFF
62420: ST_TO_ADDR
// continue ;
62421: GO 62391
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
62423: LD_VAR 0 2
62427: PPUSH
62428: LD_INT 3
62430: PUSH
62431: LD_INT 22
62433: PUSH
62434: LD_INT 0
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PPUSH
62445: CALL_OW 69
62449: PPUSH
62450: LD_VAR 0 2
62454: PPUSH
62455: CALL_OW 74
62459: PPUSH
62460: CALL_OW 115
// end ;
62464: GO 62391
62466: POP
62467: POP
// until not tmp ;
62468: LD_VAR 0 3
62472: NOT
62473: IFFALSE 62374
// end ;
62475: PPOPN 3
62477: END
// every 0 0$1 trigger StreamModeActive and sTroll do
62478: LD_EXP 38
62482: IFFALSE 62490
62484: PUSH
62485: LD_EXP 63
62489: AND
62490: IFFALSE 62544
62492: GO 62494
62494: DISABLE
// begin ToLua ( displayTroll(); ) ;
62495: LD_STRING displayTroll();
62497: PPUSH
62498: CALL_OW 559
// wait ( 3 3$00 ) ;
62502: LD_INT 6300
62504: PPUSH
62505: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62509: LD_STRING hideTroll();
62511: PPUSH
62512: CALL_OW 559
// wait ( 1 1$00 ) ;
62516: LD_INT 2100
62518: PPUSH
62519: CALL_OW 67
// ToLua ( displayTroll(); ) ;
62523: LD_STRING displayTroll();
62525: PPUSH
62526: CALL_OW 559
// wait ( 1 1$00 ) ;
62530: LD_INT 2100
62532: PPUSH
62533: CALL_OW 67
// ToLua ( hideTroll(); ) ;
62537: LD_STRING hideTroll();
62539: PPUSH
62540: CALL_OW 559
// end ;
62544: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
62545: LD_EXP 38
62549: IFFALSE 62557
62551: PUSH
62552: LD_EXP 64
62556: AND
62557: IFFALSE 62620
62559: GO 62561
62561: DISABLE
62562: LD_INT 0
62564: PPUSH
// begin p := 0 ;
62565: LD_ADDR_VAR 0 1
62569: PUSH
62570: LD_INT 0
62572: ST_TO_ADDR
// repeat game_speed := 1 ;
62573: LD_ADDR_OWVAR 65
62577: PUSH
62578: LD_INT 1
62580: ST_TO_ADDR
// wait ( 0 0$1 ) ;
62581: LD_INT 35
62583: PPUSH
62584: CALL_OW 67
// p := p + 1 ;
62588: LD_ADDR_VAR 0 1
62592: PUSH
62593: LD_VAR 0 1
62597: PUSH
62598: LD_INT 1
62600: PLUS
62601: ST_TO_ADDR
// until p >= 60 ;
62602: LD_VAR 0 1
62606: PUSH
62607: LD_INT 60
62609: GREATEREQUAL
62610: IFFALSE 62573
// game_speed := 4 ;
62612: LD_ADDR_OWVAR 65
62616: PUSH
62617: LD_INT 4
62619: ST_TO_ADDR
// end ;
62620: PPOPN 1
62622: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
62623: LD_EXP 38
62627: IFFALSE 62635
62629: PUSH
62630: LD_EXP 65
62634: AND
62635: IFFALSE 62781
62637: GO 62639
62639: DISABLE
62640: LD_INT 0
62642: PPUSH
62643: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62644: LD_ADDR_VAR 0 1
62648: PUSH
62649: LD_INT 22
62651: PUSH
62652: LD_OWVAR 2
62656: PUSH
62657: EMPTY
62658: LIST
62659: LIST
62660: PUSH
62661: LD_INT 2
62663: PUSH
62664: LD_INT 30
62666: PUSH
62667: LD_INT 0
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: PUSH
62674: LD_INT 30
62676: PUSH
62677: LD_INT 1
62679: PUSH
62680: EMPTY
62681: LIST
62682: LIST
62683: PUSH
62684: EMPTY
62685: LIST
62686: LIST
62687: LIST
62688: PUSH
62689: EMPTY
62690: LIST
62691: LIST
62692: PPUSH
62693: CALL_OW 69
62697: ST_TO_ADDR
// if not depot then
62698: LD_VAR 0 1
62702: NOT
62703: IFFALSE 62707
// exit ;
62705: GO 62781
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
62707: LD_ADDR_VAR 0 2
62711: PUSH
62712: LD_VAR 0 1
62716: PUSH
62717: LD_INT 1
62719: PPUSH
62720: LD_VAR 0 1
62724: PPUSH
62725: CALL_OW 12
62729: ARRAY
62730: PPUSH
62731: CALL_OW 274
62735: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
62736: LD_VAR 0 2
62740: PPUSH
62741: LD_INT 1
62743: PPUSH
62744: LD_INT 0
62746: PPUSH
62747: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
62751: LD_VAR 0 2
62755: PPUSH
62756: LD_INT 2
62758: PPUSH
62759: LD_INT 0
62761: PPUSH
62762: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
62766: LD_VAR 0 2
62770: PPUSH
62771: LD_INT 3
62773: PPUSH
62774: LD_INT 0
62776: PPUSH
62777: CALL_OW 277
// end ;
62781: PPOPN 2
62783: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
62784: LD_EXP 38
62788: IFFALSE 62796
62790: PUSH
62791: LD_EXP 66
62795: AND
62796: IFFALSE 62893
62798: GO 62800
62800: DISABLE
62801: LD_INT 0
62803: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62804: LD_ADDR_VAR 0 1
62808: PUSH
62809: LD_INT 22
62811: PUSH
62812: LD_OWVAR 2
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: LD_INT 21
62823: PUSH
62824: LD_INT 1
62826: PUSH
62827: EMPTY
62828: LIST
62829: LIST
62830: PUSH
62831: LD_INT 3
62833: PUSH
62834: LD_INT 23
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: EMPTY
62841: LIST
62842: LIST
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: LIST
62852: PPUSH
62853: CALL_OW 69
62857: ST_TO_ADDR
// if not tmp then
62858: LD_VAR 0 1
62862: NOT
62863: IFFALSE 62867
// exit ;
62865: GO 62893
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
62867: LD_VAR 0 1
62871: PUSH
62872: LD_INT 1
62874: PPUSH
62875: LD_VAR 0 1
62879: PPUSH
62880: CALL_OW 12
62884: ARRAY
62885: PPUSH
62886: LD_INT 200
62888: PPUSH
62889: CALL_OW 234
// end ;
62893: PPOPN 1
62895: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
62896: LD_EXP 38
62900: IFFALSE 62908
62902: PUSH
62903: LD_EXP 67
62907: AND
62908: IFFALSE 62987
62910: GO 62912
62912: DISABLE
62913: LD_INT 0
62915: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
62916: LD_ADDR_VAR 0 1
62920: PUSH
62921: LD_INT 22
62923: PUSH
62924: LD_OWVAR 2
62928: PUSH
62929: EMPTY
62930: LIST
62931: LIST
62932: PUSH
62933: LD_INT 21
62935: PUSH
62936: LD_INT 2
62938: PUSH
62939: EMPTY
62940: LIST
62941: LIST
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: PPUSH
62947: CALL_OW 69
62951: ST_TO_ADDR
// if not tmp then
62952: LD_VAR 0 1
62956: NOT
62957: IFFALSE 62961
// exit ;
62959: GO 62987
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
62961: LD_VAR 0 1
62965: PUSH
62966: LD_INT 1
62968: PPUSH
62969: LD_VAR 0 1
62973: PPUSH
62974: CALL_OW 12
62978: ARRAY
62979: PPUSH
62980: LD_INT 60
62982: PPUSH
62983: CALL_OW 234
// end ;
62987: PPOPN 1
62989: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
62990: LD_EXP 38
62994: IFFALSE 63002
62996: PUSH
62997: LD_EXP 68
63001: AND
63002: IFFALSE 63101
63004: GO 63006
63006: DISABLE
63007: LD_INT 0
63009: PPUSH
63010: PPUSH
// begin enable ;
63011: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
63012: LD_ADDR_VAR 0 1
63016: PUSH
63017: LD_INT 22
63019: PUSH
63020: LD_OWVAR 2
63024: PUSH
63025: EMPTY
63026: LIST
63027: LIST
63028: PUSH
63029: LD_INT 61
63031: PUSH
63032: EMPTY
63033: LIST
63034: PUSH
63035: LD_INT 33
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: EMPTY
63042: LIST
63043: LIST
63044: PUSH
63045: EMPTY
63046: LIST
63047: LIST
63048: LIST
63049: PPUSH
63050: CALL_OW 69
63054: ST_TO_ADDR
// if not tmp then
63055: LD_VAR 0 1
63059: NOT
63060: IFFALSE 63064
// exit ;
63062: GO 63101
// for i in tmp do
63064: LD_ADDR_VAR 0 2
63068: PUSH
63069: LD_VAR 0 1
63073: PUSH
63074: FOR_IN
63075: IFFALSE 63099
// if IsControledBy ( i ) then
63077: LD_VAR 0 2
63081: PPUSH
63082: CALL_OW 312
63086: IFFALSE 63097
// ComUnlink ( i ) ;
63088: LD_VAR 0 2
63092: PPUSH
63093: CALL_OW 136
63097: GO 63074
63099: POP
63100: POP
// end ;
63101: PPOPN 2
63103: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
63104: LD_EXP 38
63108: IFFALSE 63116
63110: PUSH
63111: LD_EXP 69
63115: AND
63116: IFFALSE 63256
63118: GO 63120
63120: DISABLE
63121: LD_INT 0
63123: PPUSH
63124: PPUSH
// begin ToLua ( displayPowell(); ) ;
63125: LD_STRING displayPowell();
63127: PPUSH
63128: CALL_OW 559
// uc_side := 0 ;
63132: LD_ADDR_OWVAR 20
63136: PUSH
63137: LD_INT 0
63139: ST_TO_ADDR
// uc_nation := 2 ;
63140: LD_ADDR_OWVAR 21
63144: PUSH
63145: LD_INT 2
63147: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
63148: LD_ADDR_OWVAR 37
63152: PUSH
63153: LD_INT 14
63155: ST_TO_ADDR
// vc_engine := engine_siberite ;
63156: LD_ADDR_OWVAR 39
63160: PUSH
63161: LD_INT 3
63163: ST_TO_ADDR
// vc_control := control_apeman ;
63164: LD_ADDR_OWVAR 38
63168: PUSH
63169: LD_INT 5
63171: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
63172: LD_ADDR_OWVAR 40
63176: PUSH
63177: LD_INT 29
63179: ST_TO_ADDR
// un := CreateVehicle ;
63180: LD_ADDR_VAR 0 2
63184: PUSH
63185: CALL_OW 45
63189: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
63190: LD_VAR 0 2
63194: PPUSH
63195: LD_INT 1
63197: PPUSH
63198: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
63202: LD_INT 35
63204: PPUSH
63205: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
63209: LD_VAR 0 2
63213: PPUSH
63214: LD_INT 22
63216: PUSH
63217: LD_OWVAR 2
63221: PUSH
63222: EMPTY
63223: LIST
63224: LIST
63225: PPUSH
63226: CALL_OW 69
63230: PPUSH
63231: LD_VAR 0 2
63235: PPUSH
63236: CALL_OW 74
63240: PPUSH
63241: CALL_OW 115
// until IsDead ( un ) ;
63245: LD_VAR 0 2
63249: PPUSH
63250: CALL_OW 301
63254: IFFALSE 63202
// end ;
63256: PPOPN 2
63258: END
// every 0 0$1 trigger StreamModeActive and sStu do
63259: LD_EXP 38
63263: IFFALSE 63271
63265: PUSH
63266: LD_EXP 77
63270: AND
63271: IFFALSE 63287
63273: GO 63275
63275: DISABLE
// begin ToLua ( displayStucuk(); ) ;
63276: LD_STRING displayStucuk();
63278: PPUSH
63279: CALL_OW 559
// ResetFog ;
63283: CALL_OW 335
// end ;
63287: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
63288: LD_EXP 38
63292: IFFALSE 63300
63294: PUSH
63295: LD_EXP 70
63299: AND
63300: IFFALSE 63441
63302: GO 63304
63304: DISABLE
63305: LD_INT 0
63307: PPUSH
63308: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63309: LD_ADDR_VAR 0 2
63313: PUSH
63314: LD_INT 22
63316: PUSH
63317: LD_OWVAR 2
63321: PUSH
63322: EMPTY
63323: LIST
63324: LIST
63325: PUSH
63326: LD_INT 21
63328: PUSH
63329: LD_INT 1
63331: PUSH
63332: EMPTY
63333: LIST
63334: LIST
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PPUSH
63340: CALL_OW 69
63344: ST_TO_ADDR
// if not tmp then
63345: LD_VAR 0 2
63349: NOT
63350: IFFALSE 63354
// exit ;
63352: GO 63441
// un := tmp [ rand ( 1 , tmp ) ] ;
63354: LD_ADDR_VAR 0 1
63358: PUSH
63359: LD_VAR 0 2
63363: PUSH
63364: LD_INT 1
63366: PPUSH
63367: LD_VAR 0 2
63371: PPUSH
63372: CALL_OW 12
63376: ARRAY
63377: ST_TO_ADDR
// SetSide ( un , 0 ) ;
63378: LD_VAR 0 1
63382: PPUSH
63383: LD_INT 0
63385: PPUSH
63386: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
63390: LD_VAR 0 1
63394: PPUSH
63395: LD_OWVAR 3
63399: PUSH
63400: LD_VAR 0 1
63404: DIFF
63405: PPUSH
63406: LD_VAR 0 1
63410: PPUSH
63411: CALL_OW 74
63415: PPUSH
63416: CALL_OW 115
// wait ( 0 0$20 ) ;
63420: LD_INT 700
63422: PPUSH
63423: CALL_OW 67
// SetSide ( un , your_side ) ;
63427: LD_VAR 0 1
63431: PPUSH
63432: LD_OWVAR 2
63436: PPUSH
63437: CALL_OW 235
// end ;
63441: PPOPN 2
63443: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
63444: LD_EXP 38
63448: IFFALSE 63456
63450: PUSH
63451: LD_EXP 71
63455: AND
63456: IFFALSE 63562
63458: GO 63460
63460: DISABLE
63461: LD_INT 0
63463: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63464: LD_ADDR_VAR 0 1
63468: PUSH
63469: LD_INT 22
63471: PUSH
63472: LD_OWVAR 2
63476: PUSH
63477: EMPTY
63478: LIST
63479: LIST
63480: PUSH
63481: LD_INT 2
63483: PUSH
63484: LD_INT 30
63486: PUSH
63487: LD_INT 0
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PUSH
63494: LD_INT 30
63496: PUSH
63497: LD_INT 1
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: LIST
63512: PPUSH
63513: CALL_OW 69
63517: ST_TO_ADDR
// if not depot then
63518: LD_VAR 0 1
63522: NOT
63523: IFFALSE 63527
// exit ;
63525: GO 63562
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
63527: LD_VAR 0 1
63531: PUSH
63532: LD_INT 1
63534: ARRAY
63535: PPUSH
63536: CALL_OW 250
63540: PPUSH
63541: LD_VAR 0 1
63545: PUSH
63546: LD_INT 1
63548: ARRAY
63549: PPUSH
63550: CALL_OW 251
63554: PPUSH
63555: LD_INT 70
63557: PPUSH
63558: CALL_OW 495
// end ;
63562: PPOPN 1
63564: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
63565: LD_EXP 38
63569: IFFALSE 63577
63571: PUSH
63572: LD_EXP 72
63576: AND
63577: IFFALSE 63788
63579: GO 63581
63581: DISABLE
63582: LD_INT 0
63584: PPUSH
63585: PPUSH
63586: PPUSH
63587: PPUSH
63588: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
63589: LD_ADDR_VAR 0 5
63593: PUSH
63594: LD_INT 22
63596: PUSH
63597: LD_OWVAR 2
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: PUSH
63606: LD_INT 21
63608: PUSH
63609: LD_INT 1
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PPUSH
63620: CALL_OW 69
63624: ST_TO_ADDR
// if not tmp then
63625: LD_VAR 0 5
63629: NOT
63630: IFFALSE 63634
// exit ;
63632: GO 63788
// for i in tmp do
63634: LD_ADDR_VAR 0 1
63638: PUSH
63639: LD_VAR 0 5
63643: PUSH
63644: FOR_IN
63645: IFFALSE 63786
// begin d := rand ( 0 , 5 ) ;
63647: LD_ADDR_VAR 0 4
63651: PUSH
63652: LD_INT 0
63654: PPUSH
63655: LD_INT 5
63657: PPUSH
63658: CALL_OW 12
63662: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
63663: LD_ADDR_VAR 0 2
63667: PUSH
63668: LD_VAR 0 1
63672: PPUSH
63673: CALL_OW 250
63677: PPUSH
63678: LD_VAR 0 4
63682: PPUSH
63683: LD_INT 3
63685: PPUSH
63686: LD_INT 12
63688: PPUSH
63689: CALL_OW 12
63693: PPUSH
63694: CALL_OW 272
63698: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
63699: LD_ADDR_VAR 0 3
63703: PUSH
63704: LD_VAR 0 1
63708: PPUSH
63709: CALL_OW 251
63713: PPUSH
63714: LD_VAR 0 4
63718: PPUSH
63719: LD_INT 3
63721: PPUSH
63722: LD_INT 12
63724: PPUSH
63725: CALL_OW 12
63729: PPUSH
63730: CALL_OW 273
63734: ST_TO_ADDR
// if ValidHex ( x , y ) then
63735: LD_VAR 0 2
63739: PPUSH
63740: LD_VAR 0 3
63744: PPUSH
63745: CALL_OW 488
63749: IFFALSE 63784
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
63751: LD_VAR 0 1
63755: PPUSH
63756: LD_VAR 0 2
63760: PPUSH
63761: LD_VAR 0 3
63765: PPUSH
63766: LD_INT 3
63768: PPUSH
63769: LD_INT 6
63771: PPUSH
63772: CALL_OW 12
63776: PPUSH
63777: LD_INT 1
63779: PPUSH
63780: CALL_OW 483
// end ;
63784: GO 63644
63786: POP
63787: POP
// end ;
63788: PPOPN 5
63790: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
63791: LD_EXP 38
63795: IFFALSE 63803
63797: PUSH
63798: LD_EXP 73
63802: AND
63803: IFFALSE 63897
63805: GO 63807
63807: DISABLE
63808: LD_INT 0
63810: PPUSH
63811: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
63812: LD_ADDR_VAR 0 2
63816: PUSH
63817: LD_INT 22
63819: PUSH
63820: LD_OWVAR 2
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PUSH
63829: LD_INT 32
63831: PUSH
63832: LD_INT 1
63834: PUSH
63835: EMPTY
63836: LIST
63837: LIST
63838: PUSH
63839: LD_INT 21
63841: PUSH
63842: LD_INT 2
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: EMPTY
63850: LIST
63851: LIST
63852: LIST
63853: PPUSH
63854: CALL_OW 69
63858: ST_TO_ADDR
// if not tmp then
63859: LD_VAR 0 2
63863: NOT
63864: IFFALSE 63868
// exit ;
63866: GO 63897
// for i in tmp do
63868: LD_ADDR_VAR 0 1
63872: PUSH
63873: LD_VAR 0 2
63877: PUSH
63878: FOR_IN
63879: IFFALSE 63895
// SetFuel ( i , 0 ) ;
63881: LD_VAR 0 1
63885: PPUSH
63886: LD_INT 0
63888: PPUSH
63889: CALL_OW 240
63893: GO 63878
63895: POP
63896: POP
// end ;
63897: PPOPN 2
63899: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
63900: LD_EXP 38
63904: IFFALSE 63912
63906: PUSH
63907: LD_EXP 74
63911: AND
63912: IFFALSE 63978
63914: GO 63916
63916: DISABLE
63917: LD_INT 0
63919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
63920: LD_ADDR_VAR 0 1
63924: PUSH
63925: LD_INT 22
63927: PUSH
63928: LD_OWVAR 2
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 30
63939: PUSH
63940: LD_INT 29
63942: PUSH
63943: EMPTY
63944: LIST
63945: LIST
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: PPUSH
63951: CALL_OW 69
63955: ST_TO_ADDR
// if not tmp then
63956: LD_VAR 0 1
63960: NOT
63961: IFFALSE 63965
// exit ;
63963: GO 63978
// DestroyUnit ( tmp [ 1 ] ) ;
63965: LD_VAR 0 1
63969: PUSH
63970: LD_INT 1
63972: ARRAY
63973: PPUSH
63974: CALL_OW 65
// end ;
63978: PPOPN 1
63980: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
63981: LD_EXP 38
63985: IFFALSE 63993
63987: PUSH
63988: LD_EXP 76
63992: AND
63993: IFFALSE 64122
63995: GO 63997
63997: DISABLE
63998: LD_INT 0
64000: PPUSH
// begin uc_side := 0 ;
64001: LD_ADDR_OWVAR 20
64005: PUSH
64006: LD_INT 0
64008: ST_TO_ADDR
// uc_nation := nation_arabian ;
64009: LD_ADDR_OWVAR 21
64013: PUSH
64014: LD_INT 2
64016: ST_TO_ADDR
// hc_gallery :=  ;
64017: LD_ADDR_OWVAR 33
64021: PUSH
64022: LD_STRING 
64024: ST_TO_ADDR
// hc_name :=  ;
64025: LD_ADDR_OWVAR 26
64029: PUSH
64030: LD_STRING 
64032: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
64033: LD_INT 1
64035: PPUSH
64036: LD_INT 11
64038: PPUSH
64039: LD_INT 10
64041: PPUSH
64042: CALL_OW 380
// un := CreateHuman ;
64046: LD_ADDR_VAR 0 1
64050: PUSH
64051: CALL_OW 44
64055: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
64056: LD_VAR 0 1
64060: PPUSH
64061: LD_INT 1
64063: PPUSH
64064: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
64068: LD_INT 35
64070: PPUSH
64071: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
64075: LD_VAR 0 1
64079: PPUSH
64080: LD_INT 22
64082: PUSH
64083: LD_OWVAR 2
64087: PUSH
64088: EMPTY
64089: LIST
64090: LIST
64091: PPUSH
64092: CALL_OW 69
64096: PPUSH
64097: LD_VAR 0 1
64101: PPUSH
64102: CALL_OW 74
64106: PPUSH
64107: CALL_OW 115
// until IsDead ( un ) ;
64111: LD_VAR 0 1
64115: PPUSH
64116: CALL_OW 301
64120: IFFALSE 64068
// end ;
64122: PPOPN 1
64124: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
64125: LD_EXP 38
64129: IFFALSE 64137
64131: PUSH
64132: LD_EXP 78
64136: AND
64137: IFFALSE 64149
64139: GO 64141
64141: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
64142: LD_STRING earthquake(getX(game), 0, 32)
64144: PPUSH
64145: CALL_OW 559
64149: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
64150: LD_EXP 38
64154: IFFALSE 64162
64156: PUSH
64157: LD_EXP 79
64161: AND
64162: IFFALSE 64253
64164: GO 64166
64166: DISABLE
64167: LD_INT 0
64169: PPUSH
// begin enable ;
64170: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
64171: LD_ADDR_VAR 0 1
64175: PUSH
64176: LD_INT 22
64178: PUSH
64179: LD_OWVAR 2
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 21
64190: PUSH
64191: LD_INT 2
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 33
64200: PUSH
64201: LD_INT 3
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: EMPTY
64209: LIST
64210: LIST
64211: LIST
64212: PPUSH
64213: CALL_OW 69
64217: ST_TO_ADDR
// if not tmp then
64218: LD_VAR 0 1
64222: NOT
64223: IFFALSE 64227
// exit ;
64225: GO 64253
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
64227: LD_VAR 0 1
64231: PUSH
64232: LD_INT 1
64234: PPUSH
64235: LD_VAR 0 1
64239: PPUSH
64240: CALL_OW 12
64244: ARRAY
64245: PPUSH
64246: LD_INT 1
64248: PPUSH
64249: CALL_OW 234
// end ;
64253: PPOPN 1
64255: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
64256: LD_EXP 38
64260: IFFALSE 64268
64262: PUSH
64263: LD_EXP 80
64267: AND
64268: IFFALSE 64409
64270: GO 64272
64272: DISABLE
64273: LD_INT 0
64275: PPUSH
64276: PPUSH
64277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64278: LD_ADDR_VAR 0 3
64282: PUSH
64283: LD_INT 22
64285: PUSH
64286: LD_OWVAR 2
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 25
64297: PUSH
64298: LD_INT 1
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PPUSH
64309: CALL_OW 69
64313: ST_TO_ADDR
// if not tmp then
64314: LD_VAR 0 3
64318: NOT
64319: IFFALSE 64323
// exit ;
64321: GO 64409
// un := tmp [ rand ( 1 , tmp ) ] ;
64323: LD_ADDR_VAR 0 2
64327: PUSH
64328: LD_VAR 0 3
64332: PUSH
64333: LD_INT 1
64335: PPUSH
64336: LD_VAR 0 3
64340: PPUSH
64341: CALL_OW 12
64345: ARRAY
64346: ST_TO_ADDR
// if Crawls ( un ) then
64347: LD_VAR 0 2
64351: PPUSH
64352: CALL_OW 318
64356: IFFALSE 64367
// ComWalk ( un ) ;
64358: LD_VAR 0 2
64362: PPUSH
64363: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
64367: LD_VAR 0 2
64371: PPUSH
64372: LD_INT 9
64374: PPUSH
64375: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
64379: LD_INT 28
64381: PPUSH
64382: LD_OWVAR 2
64386: PPUSH
64387: LD_INT 2
64389: PPUSH
64390: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
64394: LD_INT 29
64396: PPUSH
64397: LD_OWVAR 2
64401: PPUSH
64402: LD_INT 2
64404: PPUSH
64405: CALL_OW 322
// end ;
64409: PPOPN 3
64411: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
64412: LD_EXP 38
64416: IFFALSE 64424
64418: PUSH
64419: LD_EXP 81
64423: AND
64424: IFFALSE 64535
64426: GO 64428
64428: DISABLE
64429: LD_INT 0
64431: PPUSH
64432: PPUSH
64433: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
64434: LD_ADDR_VAR 0 3
64438: PUSH
64439: LD_INT 22
64441: PUSH
64442: LD_OWVAR 2
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 25
64453: PUSH
64454: LD_INT 1
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: EMPTY
64462: LIST
64463: LIST
64464: PPUSH
64465: CALL_OW 69
64469: ST_TO_ADDR
// if not tmp then
64470: LD_VAR 0 3
64474: NOT
64475: IFFALSE 64479
// exit ;
64477: GO 64535
// un := tmp [ rand ( 1 , tmp ) ] ;
64479: LD_ADDR_VAR 0 2
64483: PUSH
64484: LD_VAR 0 3
64488: PUSH
64489: LD_INT 1
64491: PPUSH
64492: LD_VAR 0 3
64496: PPUSH
64497: CALL_OW 12
64501: ARRAY
64502: ST_TO_ADDR
// if Crawls ( un ) then
64503: LD_VAR 0 2
64507: PPUSH
64508: CALL_OW 318
64512: IFFALSE 64523
// ComWalk ( un ) ;
64514: LD_VAR 0 2
64518: PPUSH
64519: CALL_OW 138
// SetClass ( un , class_mortar ) ;
64523: LD_VAR 0 2
64527: PPUSH
64528: LD_INT 8
64530: PPUSH
64531: CALL_OW 336
// end ;
64535: PPOPN 3
64537: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
64538: LD_EXP 38
64542: IFFALSE 64550
64544: PUSH
64545: LD_EXP 82
64549: AND
64550: IFFALSE 64694
64552: GO 64554
64554: DISABLE
64555: LD_INT 0
64557: PPUSH
64558: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
64559: LD_ADDR_VAR 0 2
64563: PUSH
64564: LD_INT 22
64566: PUSH
64567: LD_OWVAR 2
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 21
64578: PUSH
64579: LD_INT 2
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 2
64588: PUSH
64589: LD_INT 34
64591: PUSH
64592: LD_INT 12
64594: PUSH
64595: EMPTY
64596: LIST
64597: LIST
64598: PUSH
64599: LD_INT 34
64601: PUSH
64602: LD_INT 51
64604: PUSH
64605: EMPTY
64606: LIST
64607: LIST
64608: PUSH
64609: LD_INT 34
64611: PUSH
64612: LD_INT 32
64614: PUSH
64615: EMPTY
64616: LIST
64617: LIST
64618: PUSH
64619: EMPTY
64620: LIST
64621: LIST
64622: LIST
64623: LIST
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: LIST
64629: PPUSH
64630: CALL_OW 69
64634: ST_TO_ADDR
// if not tmp then
64635: LD_VAR 0 2
64639: NOT
64640: IFFALSE 64644
// exit ;
64642: GO 64694
// for i in tmp do
64644: LD_ADDR_VAR 0 1
64648: PUSH
64649: LD_VAR 0 2
64653: PUSH
64654: FOR_IN
64655: IFFALSE 64692
// if GetCargo ( i , mat_artifact ) = 0 then
64657: LD_VAR 0 1
64661: PPUSH
64662: LD_INT 4
64664: PPUSH
64665: CALL_OW 289
64669: PUSH
64670: LD_INT 0
64672: EQUAL
64673: IFFALSE 64690
// SetCargo ( i , mat_siberit , 100 ) ;
64675: LD_VAR 0 1
64679: PPUSH
64680: LD_INT 3
64682: PPUSH
64683: LD_INT 100
64685: PPUSH
64686: CALL_OW 290
64690: GO 64654
64692: POP
64693: POP
// end ;
64694: PPOPN 2
64696: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
64697: LD_EXP 38
64701: IFFALSE 64709
64703: PUSH
64704: LD_EXP 83
64708: AND
64709: IFFALSE 64892
64711: GO 64713
64713: DISABLE
64714: LD_INT 0
64716: PPUSH
64717: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
64718: LD_ADDR_VAR 0 2
64722: PUSH
64723: LD_INT 22
64725: PUSH
64726: LD_OWVAR 2
64730: PUSH
64731: EMPTY
64732: LIST
64733: LIST
64734: PPUSH
64735: CALL_OW 69
64739: ST_TO_ADDR
// if not tmp then
64740: LD_VAR 0 2
64744: NOT
64745: IFFALSE 64749
// exit ;
64747: GO 64892
// for i := 1 to 2 do
64749: LD_ADDR_VAR 0 1
64753: PUSH
64754: DOUBLE
64755: LD_INT 1
64757: DEC
64758: ST_TO_ADDR
64759: LD_INT 2
64761: PUSH
64762: FOR_TO
64763: IFFALSE 64890
// begin uc_side := your_side ;
64765: LD_ADDR_OWVAR 20
64769: PUSH
64770: LD_OWVAR 2
64774: ST_TO_ADDR
// uc_nation := nation_american ;
64775: LD_ADDR_OWVAR 21
64779: PUSH
64780: LD_INT 1
64782: ST_TO_ADDR
// vc_chassis := us_morphling ;
64783: LD_ADDR_OWVAR 37
64787: PUSH
64788: LD_INT 5
64790: ST_TO_ADDR
// vc_engine := engine_siberite ;
64791: LD_ADDR_OWVAR 39
64795: PUSH
64796: LD_INT 3
64798: ST_TO_ADDR
// vc_control := control_computer ;
64799: LD_ADDR_OWVAR 38
64803: PUSH
64804: LD_INT 3
64806: ST_TO_ADDR
// vc_weapon := us_double_laser ;
64807: LD_ADDR_OWVAR 40
64811: PUSH
64812: LD_INT 10
64814: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
64815: LD_VAR 0 2
64819: PUSH
64820: LD_INT 1
64822: ARRAY
64823: PPUSH
64824: CALL_OW 310
64828: NOT
64829: IFFALSE 64876
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
64831: CALL_OW 45
64835: PPUSH
64836: LD_VAR 0 2
64840: PUSH
64841: LD_INT 1
64843: ARRAY
64844: PPUSH
64845: CALL_OW 250
64849: PPUSH
64850: LD_VAR 0 2
64854: PUSH
64855: LD_INT 1
64857: ARRAY
64858: PPUSH
64859: CALL_OW 251
64863: PPUSH
64864: LD_INT 12
64866: PPUSH
64867: LD_INT 1
64869: PPUSH
64870: CALL_OW 50
64874: GO 64888
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
64876: CALL_OW 45
64880: PPUSH
64881: LD_INT 1
64883: PPUSH
64884: CALL_OW 51
// end ;
64888: GO 64762
64890: POP
64891: POP
// end ;
64892: PPOPN 2
64894: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
64895: LD_EXP 38
64899: IFFALSE 64907
64901: PUSH
64902: LD_EXP 84
64906: AND
64907: IFFALSE 65129
64909: GO 64911
64911: DISABLE
64912: LD_INT 0
64914: PPUSH
64915: PPUSH
64916: PPUSH
64917: PPUSH
64918: PPUSH
64919: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
64920: LD_ADDR_VAR 0 6
64924: PUSH
64925: LD_INT 22
64927: PUSH
64928: LD_OWVAR 2
64932: PUSH
64933: EMPTY
64934: LIST
64935: LIST
64936: PUSH
64937: LD_INT 21
64939: PUSH
64940: LD_INT 1
64942: PUSH
64943: EMPTY
64944: LIST
64945: LIST
64946: PUSH
64947: LD_INT 3
64949: PUSH
64950: LD_INT 23
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: LIST
64968: PPUSH
64969: CALL_OW 69
64973: ST_TO_ADDR
// if not tmp then
64974: LD_VAR 0 6
64978: NOT
64979: IFFALSE 64983
// exit ;
64981: GO 65129
// s1 := rand ( 1 , 4 ) ;
64983: LD_ADDR_VAR 0 2
64987: PUSH
64988: LD_INT 1
64990: PPUSH
64991: LD_INT 4
64993: PPUSH
64994: CALL_OW 12
64998: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
64999: LD_ADDR_VAR 0 4
65003: PUSH
65004: LD_VAR 0 6
65008: PUSH
65009: LD_INT 1
65011: ARRAY
65012: PPUSH
65013: LD_VAR 0 2
65017: PPUSH
65018: CALL_OW 259
65022: ST_TO_ADDR
// if s1 = 1 then
65023: LD_VAR 0 2
65027: PUSH
65028: LD_INT 1
65030: EQUAL
65031: IFFALSE 65051
// s2 := rand ( 2 , 4 ) else
65033: LD_ADDR_VAR 0 3
65037: PUSH
65038: LD_INT 2
65040: PPUSH
65041: LD_INT 4
65043: PPUSH
65044: CALL_OW 12
65048: ST_TO_ADDR
65049: GO 65059
// s2 := 1 ;
65051: LD_ADDR_VAR 0 3
65055: PUSH
65056: LD_INT 1
65058: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
65059: LD_ADDR_VAR 0 5
65063: PUSH
65064: LD_VAR 0 6
65068: PUSH
65069: LD_INT 1
65071: ARRAY
65072: PPUSH
65073: LD_VAR 0 3
65077: PPUSH
65078: CALL_OW 259
65082: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
65083: LD_VAR 0 6
65087: PUSH
65088: LD_INT 1
65090: ARRAY
65091: PPUSH
65092: LD_VAR 0 2
65096: PPUSH
65097: LD_VAR 0 5
65101: PPUSH
65102: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
65106: LD_VAR 0 6
65110: PUSH
65111: LD_INT 1
65113: ARRAY
65114: PPUSH
65115: LD_VAR 0 3
65119: PPUSH
65120: LD_VAR 0 4
65124: PPUSH
65125: CALL_OW 237
// end ;
65129: PPOPN 6
65131: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
65132: LD_EXP 38
65136: IFFALSE 65144
65138: PUSH
65139: LD_EXP 85
65143: AND
65144: IFFALSE 65223
65146: GO 65148
65148: DISABLE
65149: LD_INT 0
65151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
65152: LD_ADDR_VAR 0 1
65156: PUSH
65157: LD_INT 22
65159: PUSH
65160: LD_OWVAR 2
65164: PUSH
65165: EMPTY
65166: LIST
65167: LIST
65168: PUSH
65169: LD_INT 30
65171: PUSH
65172: LD_INT 3
65174: PUSH
65175: EMPTY
65176: LIST
65177: LIST
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PPUSH
65183: CALL_OW 69
65187: ST_TO_ADDR
// if not tmp then
65188: LD_VAR 0 1
65192: NOT
65193: IFFALSE 65197
// exit ;
65195: GO 65223
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
65197: LD_VAR 0 1
65201: PUSH
65202: LD_INT 1
65204: PPUSH
65205: LD_VAR 0 1
65209: PPUSH
65210: CALL_OW 12
65214: ARRAY
65215: PPUSH
65216: LD_INT 1
65218: PPUSH
65219: CALL_OW 234
// end ;
65223: PPOPN 1
65225: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
65226: LD_EXP 38
65230: IFFALSE 65238
65232: PUSH
65233: LD_EXP 86
65237: AND
65238: IFFALSE 65350
65240: GO 65242
65242: DISABLE
65243: LD_INT 0
65245: PPUSH
65246: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
65247: LD_ADDR_VAR 0 2
65251: PUSH
65252: LD_INT 22
65254: PUSH
65255: LD_OWVAR 2
65259: PUSH
65260: EMPTY
65261: LIST
65262: LIST
65263: PUSH
65264: LD_INT 2
65266: PUSH
65267: LD_INT 30
65269: PUSH
65270: LD_INT 27
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 30
65279: PUSH
65280: LD_INT 26
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: PUSH
65287: LD_INT 30
65289: PUSH
65290: LD_INT 28
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: PUSH
65297: EMPTY
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PPUSH
65307: CALL_OW 69
65311: ST_TO_ADDR
// if not tmp then
65312: LD_VAR 0 2
65316: NOT
65317: IFFALSE 65321
// exit ;
65319: GO 65350
// for i in tmp do
65321: LD_ADDR_VAR 0 1
65325: PUSH
65326: LD_VAR 0 2
65330: PUSH
65331: FOR_IN
65332: IFFALSE 65348
// SetLives ( i , 1 ) ;
65334: LD_VAR 0 1
65338: PPUSH
65339: LD_INT 1
65341: PPUSH
65342: CALL_OW 234
65346: GO 65331
65348: POP
65349: POP
// end ;
65350: PPOPN 2
65352: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
65353: LD_EXP 38
65357: IFFALSE 65365
65359: PUSH
65360: LD_EXP 87
65364: AND
65365: IFFALSE 65652
65367: GO 65369
65369: DISABLE
65370: LD_INT 0
65372: PPUSH
65373: PPUSH
65374: PPUSH
// begin i := rand ( 1 , 7 ) ;
65375: LD_ADDR_VAR 0 1
65379: PUSH
65380: LD_INT 1
65382: PPUSH
65383: LD_INT 7
65385: PPUSH
65386: CALL_OW 12
65390: ST_TO_ADDR
// case i of 1 :
65391: LD_VAR 0 1
65395: PUSH
65396: LD_INT 1
65398: DOUBLE
65399: EQUAL
65400: IFTRUE 65404
65402: GO 65414
65404: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
65405: LD_STRING earthquake(getX(game), 0, 32)
65407: PPUSH
65408: CALL_OW 559
65412: GO 65652
65414: LD_INT 2
65416: DOUBLE
65417: EQUAL
65418: IFTRUE 65422
65420: GO 65436
65422: POP
// begin ToLua ( displayStucuk(); ) ;
65423: LD_STRING displayStucuk();
65425: PPUSH
65426: CALL_OW 559
// ResetFog ;
65430: CALL_OW 335
// end ; 3 :
65434: GO 65652
65436: LD_INT 3
65438: DOUBLE
65439: EQUAL
65440: IFTRUE 65444
65442: GO 65548
65444: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
65445: LD_ADDR_VAR 0 2
65449: PUSH
65450: LD_INT 22
65452: PUSH
65453: LD_OWVAR 2
65457: PUSH
65458: EMPTY
65459: LIST
65460: LIST
65461: PUSH
65462: LD_INT 25
65464: PUSH
65465: LD_INT 1
65467: PUSH
65468: EMPTY
65469: LIST
65470: LIST
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PPUSH
65476: CALL_OW 69
65480: ST_TO_ADDR
// if not tmp then
65481: LD_VAR 0 2
65485: NOT
65486: IFFALSE 65490
// exit ;
65488: GO 65652
// un := tmp [ rand ( 1 , tmp ) ] ;
65490: LD_ADDR_VAR 0 3
65494: PUSH
65495: LD_VAR 0 2
65499: PUSH
65500: LD_INT 1
65502: PPUSH
65503: LD_VAR 0 2
65507: PPUSH
65508: CALL_OW 12
65512: ARRAY
65513: ST_TO_ADDR
// if Crawls ( un ) then
65514: LD_VAR 0 3
65518: PPUSH
65519: CALL_OW 318
65523: IFFALSE 65534
// ComWalk ( un ) ;
65525: LD_VAR 0 3
65529: PPUSH
65530: CALL_OW 138
// SetClass ( un , class_mortar ) ;
65534: LD_VAR 0 3
65538: PPUSH
65539: LD_INT 8
65541: PPUSH
65542: CALL_OW 336
// end ; 4 :
65546: GO 65652
65548: LD_INT 4
65550: DOUBLE
65551: EQUAL
65552: IFTRUE 65556
65554: GO 65630
65556: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
65557: LD_ADDR_VAR 0 2
65561: PUSH
65562: LD_INT 22
65564: PUSH
65565: LD_OWVAR 2
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 30
65576: PUSH
65577: LD_INT 29
65579: PUSH
65580: EMPTY
65581: LIST
65582: LIST
65583: PUSH
65584: EMPTY
65585: LIST
65586: LIST
65587: PPUSH
65588: CALL_OW 69
65592: ST_TO_ADDR
// if not tmp then
65593: LD_VAR 0 2
65597: NOT
65598: IFFALSE 65602
// exit ;
65600: GO 65652
// CenterNowOnUnits ( tmp [ 1 ] ) ;
65602: LD_VAR 0 2
65606: PUSH
65607: LD_INT 1
65609: ARRAY
65610: PPUSH
65611: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
65615: LD_VAR 0 2
65619: PUSH
65620: LD_INT 1
65622: ARRAY
65623: PPUSH
65624: CALL_OW 65
// end ; 5 .. 7 :
65628: GO 65652
65630: LD_INT 5
65632: DOUBLE
65633: GREATEREQUAL
65634: IFFALSE 65642
65636: LD_INT 7
65638: DOUBLE
65639: LESSEQUAL
65640: IFTRUE 65644
65642: GO 65651
65644: POP
// StreamSibBomb ; end ;
65645: CALL 61833 0 0
65649: GO 65652
65651: POP
// end ;
65652: PPOPN 3
65654: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
65655: LD_EXP 38
65659: IFFALSE 65667
65661: PUSH
65662: LD_EXP 88
65666: AND
65667: IFFALSE 65823
65669: GO 65671
65671: DISABLE
65672: LD_INT 0
65674: PPUSH
65675: PPUSH
65676: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
65677: LD_ADDR_VAR 0 2
65681: PUSH
65682: LD_INT 81
65684: PUSH
65685: LD_OWVAR 2
65689: PUSH
65690: EMPTY
65691: LIST
65692: LIST
65693: PUSH
65694: LD_INT 2
65696: PUSH
65697: LD_INT 21
65699: PUSH
65700: LD_INT 1
65702: PUSH
65703: EMPTY
65704: LIST
65705: LIST
65706: PUSH
65707: LD_INT 21
65709: PUSH
65710: LD_INT 2
65712: PUSH
65713: EMPTY
65714: LIST
65715: LIST
65716: PUSH
65717: EMPTY
65718: LIST
65719: LIST
65720: LIST
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PPUSH
65726: CALL_OW 69
65730: ST_TO_ADDR
// if not tmp then
65731: LD_VAR 0 2
65735: NOT
65736: IFFALSE 65740
// exit ;
65738: GO 65823
// p := 0 ;
65740: LD_ADDR_VAR 0 3
65744: PUSH
65745: LD_INT 0
65747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
65748: LD_INT 35
65750: PPUSH
65751: CALL_OW 67
// p := p + 1 ;
65755: LD_ADDR_VAR 0 3
65759: PUSH
65760: LD_VAR 0 3
65764: PUSH
65765: LD_INT 1
65767: PLUS
65768: ST_TO_ADDR
// for i in tmp do
65769: LD_ADDR_VAR 0 1
65773: PUSH
65774: LD_VAR 0 2
65778: PUSH
65779: FOR_IN
65780: IFFALSE 65811
// if GetLives ( i ) < 1000 then
65782: LD_VAR 0 1
65786: PPUSH
65787: CALL_OW 256
65791: PUSH
65792: LD_INT 1000
65794: LESS
65795: IFFALSE 65809
// SetLives ( i , 1000 ) ;
65797: LD_VAR 0 1
65801: PPUSH
65802: LD_INT 1000
65804: PPUSH
65805: CALL_OW 234
65809: GO 65779
65811: POP
65812: POP
// until p > 20 ;
65813: LD_VAR 0 3
65817: PUSH
65818: LD_INT 20
65820: GREATER
65821: IFFALSE 65748
// end ;
65823: PPOPN 3
65825: END
// every 0 0$1 trigger StreamModeActive and sTime do
65826: LD_EXP 38
65830: IFFALSE 65838
65832: PUSH
65833: LD_EXP 89
65837: AND
65838: IFFALSE 65873
65840: GO 65842
65842: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
65843: LD_INT 28
65845: PPUSH
65846: LD_OWVAR 2
65850: PPUSH
65851: LD_INT 2
65853: PPUSH
65854: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
65858: LD_INT 30
65860: PPUSH
65861: LD_OWVAR 2
65865: PPUSH
65866: LD_INT 2
65868: PPUSH
65869: CALL_OW 322
// end ;
65873: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
65874: LD_EXP 38
65878: IFFALSE 65886
65880: PUSH
65881: LD_EXP 90
65885: AND
65886: IFFALSE 66007
65888: GO 65890
65890: DISABLE
65891: LD_INT 0
65893: PPUSH
65894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
65895: LD_ADDR_VAR 0 2
65899: PUSH
65900: LD_INT 22
65902: PUSH
65903: LD_OWVAR 2
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 21
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: LD_INT 3
65924: PUSH
65925: LD_INT 23
65927: PUSH
65928: LD_INT 0
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: LIST
65943: PPUSH
65944: CALL_OW 69
65948: ST_TO_ADDR
// if not tmp then
65949: LD_VAR 0 2
65953: NOT
65954: IFFALSE 65958
// exit ;
65956: GO 66007
// for i in tmp do
65958: LD_ADDR_VAR 0 1
65962: PUSH
65963: LD_VAR 0 2
65967: PUSH
65968: FOR_IN
65969: IFFALSE 66005
// begin if Crawls ( i ) then
65971: LD_VAR 0 1
65975: PPUSH
65976: CALL_OW 318
65980: IFFALSE 65991
// ComWalk ( i ) ;
65982: LD_VAR 0 1
65986: PPUSH
65987: CALL_OW 138
// SetClass ( i , 2 ) ;
65991: LD_VAR 0 1
65995: PPUSH
65996: LD_INT 2
65998: PPUSH
65999: CALL_OW 336
// end ;
66003: GO 65968
66005: POP
66006: POP
// end ;
66007: PPOPN 2
66009: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
66010: LD_EXP 38
66014: IFFALSE 66022
66016: PUSH
66017: LD_EXP 91
66021: AND
66022: IFFALSE 66312
66024: GO 66026
66026: DISABLE
66027: LD_INT 0
66029: PPUSH
66030: PPUSH
66031: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
66032: LD_OWVAR 2
66036: PPUSH
66037: LD_INT 9
66039: PPUSH
66040: LD_INT 1
66042: PPUSH
66043: LD_INT 1
66045: PPUSH
66046: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
66050: LD_INT 9
66052: PPUSH
66053: LD_OWVAR 2
66057: PPUSH
66058: CALL_OW 343
// uc_side := 9 ;
66062: LD_ADDR_OWVAR 20
66066: PUSH
66067: LD_INT 9
66069: ST_TO_ADDR
// uc_nation := 2 ;
66070: LD_ADDR_OWVAR 21
66074: PUSH
66075: LD_INT 2
66077: ST_TO_ADDR
// hc_name := Dark Warrior ;
66078: LD_ADDR_OWVAR 26
66082: PUSH
66083: LD_STRING Dark Warrior
66085: ST_TO_ADDR
// hc_gallery :=  ;
66086: LD_ADDR_OWVAR 33
66090: PUSH
66091: LD_STRING 
66093: ST_TO_ADDR
// hc_noskilllimit := true ;
66094: LD_ADDR_OWVAR 76
66098: PUSH
66099: LD_INT 1
66101: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
66102: LD_ADDR_OWVAR 31
66106: PUSH
66107: LD_INT 30
66109: PUSH
66110: LD_INT 30
66112: PUSH
66113: LD_INT 30
66115: PUSH
66116: LD_INT 30
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: ST_TO_ADDR
// un := CreateHuman ;
66125: LD_ADDR_VAR 0 3
66129: PUSH
66130: CALL_OW 44
66134: ST_TO_ADDR
// hc_noskilllimit := false ;
66135: LD_ADDR_OWVAR 76
66139: PUSH
66140: LD_INT 0
66142: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
66143: LD_VAR 0 3
66147: PPUSH
66148: LD_INT 1
66150: PPUSH
66151: CALL_OW 51
// ToLua ( playRanger() ) ;
66155: LD_STRING playRanger()
66157: PPUSH
66158: CALL_OW 559
// p := 0 ;
66162: LD_ADDR_VAR 0 2
66166: PUSH
66167: LD_INT 0
66169: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
66170: LD_INT 35
66172: PPUSH
66173: CALL_OW 67
// p := p + 1 ;
66177: LD_ADDR_VAR 0 2
66181: PUSH
66182: LD_VAR 0 2
66186: PUSH
66187: LD_INT 1
66189: PLUS
66190: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
66191: LD_VAR 0 3
66195: PPUSH
66196: CALL_OW 256
66200: PUSH
66201: LD_INT 1000
66203: LESS
66204: IFFALSE 66218
// SetLives ( un , 1000 ) ;
66206: LD_VAR 0 3
66210: PPUSH
66211: LD_INT 1000
66213: PPUSH
66214: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
66218: LD_VAR 0 3
66222: PPUSH
66223: LD_INT 81
66225: PUSH
66226: LD_OWVAR 2
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 91
66237: PUSH
66238: LD_VAR 0 3
66242: PUSH
66243: LD_INT 30
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: LIST
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PPUSH
66255: CALL_OW 69
66259: PPUSH
66260: LD_VAR 0 3
66264: PPUSH
66265: CALL_OW 74
66269: PPUSH
66270: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
66274: LD_VAR 0 2
66278: PUSH
66279: LD_INT 80
66281: GREATER
66282: IFTRUE 66295
66284: PUSH
66285: LD_VAR 0 3
66289: PPUSH
66290: CALL_OW 301
66294: OR
66295: IFFALSE 66170
// if un then
66297: LD_VAR 0 3
66301: IFFALSE 66312
// RemoveUnit ( un ) ;
66303: LD_VAR 0 3
66307: PPUSH
66308: CALL_OW 64
// end ;
66312: PPOPN 3
66314: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
66315: LD_EXP 92
66319: IFFALSE 66435
66321: GO 66323
66323: DISABLE
66324: LD_INT 0
66326: PPUSH
66327: PPUSH
66328: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
66329: LD_ADDR_VAR 0 2
66333: PUSH
66334: LD_INT 81
66336: PUSH
66337: LD_OWVAR 2
66341: PUSH
66342: EMPTY
66343: LIST
66344: LIST
66345: PUSH
66346: LD_INT 21
66348: PUSH
66349: LD_INT 1
66351: PUSH
66352: EMPTY
66353: LIST
66354: LIST
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PPUSH
66360: CALL_OW 69
66364: ST_TO_ADDR
// ToLua ( playComputer() ) ;
66365: LD_STRING playComputer()
66367: PPUSH
66368: CALL_OW 559
// if not tmp then
66372: LD_VAR 0 2
66376: NOT
66377: IFFALSE 66381
// exit ;
66379: GO 66435
// for i in tmp do
66381: LD_ADDR_VAR 0 1
66385: PUSH
66386: LD_VAR 0 2
66390: PUSH
66391: FOR_IN
66392: IFFALSE 66433
// for j := 1 to 4 do
66394: LD_ADDR_VAR 0 3
66398: PUSH
66399: DOUBLE
66400: LD_INT 1
66402: DEC
66403: ST_TO_ADDR
66404: LD_INT 4
66406: PUSH
66407: FOR_TO
66408: IFFALSE 66429
// SetSkill ( i , j , 10 ) ;
66410: LD_VAR 0 1
66414: PPUSH
66415: LD_VAR 0 3
66419: PPUSH
66420: LD_INT 10
66422: PPUSH
66423: CALL_OW 237
66427: GO 66407
66429: POP
66430: POP
66431: GO 66391
66433: POP
66434: POP
// end ;
66435: PPOPN 3
66437: END
// every 0 0$1 trigger s30 do var i , tmp ;
66438: LD_EXP 93
66442: IFFALSE 66511
66444: GO 66446
66446: DISABLE
66447: LD_INT 0
66449: PPUSH
66450: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66451: LD_ADDR_VAR 0 2
66455: PUSH
66456: LD_INT 22
66458: PUSH
66459: LD_OWVAR 2
66463: PUSH
66464: EMPTY
66465: LIST
66466: LIST
66467: PPUSH
66468: CALL_OW 69
66472: ST_TO_ADDR
// if not tmp then
66473: LD_VAR 0 2
66477: NOT
66478: IFFALSE 66482
// exit ;
66480: GO 66511
// for i in tmp do
66482: LD_ADDR_VAR 0 1
66486: PUSH
66487: LD_VAR 0 2
66491: PUSH
66492: FOR_IN
66493: IFFALSE 66509
// SetLives ( i , 300 ) ;
66495: LD_VAR 0 1
66499: PPUSH
66500: LD_INT 300
66502: PPUSH
66503: CALL_OW 234
66507: GO 66492
66509: POP
66510: POP
// end ;
66511: PPOPN 2
66513: END
// every 0 0$1 trigger s60 do var i , tmp ;
66514: LD_EXP 94
66518: IFFALSE 66587
66520: GO 66522
66522: DISABLE
66523: LD_INT 0
66525: PPUSH
66526: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
66527: LD_ADDR_VAR 0 2
66531: PUSH
66532: LD_INT 22
66534: PUSH
66535: LD_OWVAR 2
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PPUSH
66544: CALL_OW 69
66548: ST_TO_ADDR
// if not tmp then
66549: LD_VAR 0 2
66553: NOT
66554: IFFALSE 66558
// exit ;
66556: GO 66587
// for i in tmp do
66558: LD_ADDR_VAR 0 1
66562: PUSH
66563: LD_VAR 0 2
66567: PUSH
66568: FOR_IN
66569: IFFALSE 66585
// SetLives ( i , 600 ) ;
66571: LD_VAR 0 1
66575: PPUSH
66576: LD_INT 600
66578: PPUSH
66579: CALL_OW 234
66583: GO 66568
66585: POP
66586: POP
// end ;
66587: PPOPN 2
66589: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
66590: LD_INT 0
66592: PPUSH
// case cmd of 301 :
66593: LD_VAR 0 1
66597: PUSH
66598: LD_INT 301
66600: DOUBLE
66601: EQUAL
66602: IFTRUE 66606
66604: GO 66638
66606: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
66607: LD_VAR 0 6
66611: PPUSH
66612: LD_VAR 0 7
66616: PPUSH
66617: LD_VAR 0 8
66621: PPUSH
66622: LD_VAR 0 4
66626: PPUSH
66627: LD_VAR 0 5
66631: PPUSH
66632: CALL 67851 0 5
66636: GO 66759
66638: LD_INT 302
66640: DOUBLE
66641: EQUAL
66642: IFTRUE 66646
66644: GO 66683
66646: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
66647: LD_VAR 0 6
66651: PPUSH
66652: LD_VAR 0 7
66656: PPUSH
66657: LD_VAR 0 8
66661: PPUSH
66662: LD_VAR 0 9
66666: PPUSH
66667: LD_VAR 0 4
66671: PPUSH
66672: LD_VAR 0 5
66676: PPUSH
66677: CALL 67942 0 6
66681: GO 66759
66683: LD_INT 303
66685: DOUBLE
66686: EQUAL
66687: IFTRUE 66691
66689: GO 66728
66691: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
66692: LD_VAR 0 6
66696: PPUSH
66697: LD_VAR 0 7
66701: PPUSH
66702: LD_VAR 0 8
66706: PPUSH
66707: LD_VAR 0 9
66711: PPUSH
66712: LD_VAR 0 4
66716: PPUSH
66717: LD_VAR 0 5
66721: PPUSH
66722: CALL 66764 0 6
66726: GO 66759
66728: LD_INT 304
66730: DOUBLE
66731: EQUAL
66732: IFTRUE 66736
66734: GO 66758
66736: POP
// hHackTeleport ( unit , x , y ) ; end ;
66737: LD_VAR 0 2
66741: PPUSH
66742: LD_VAR 0 4
66746: PPUSH
66747: LD_VAR 0 5
66751: PPUSH
66752: CALL 68535 0 3
66756: GO 66759
66758: POP
// end ;
66759: LD_VAR 0 12
66763: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
66764: LD_INT 0
66766: PPUSH
66767: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
66768: LD_VAR 0 1
66772: PUSH
66773: LD_INT 1
66775: LESS
66776: IFTRUE 66788
66778: PUSH
66779: LD_VAR 0 1
66783: PUSH
66784: LD_INT 3
66786: GREATER
66787: OR
66788: IFTRUE 66806
66790: PUSH
66791: LD_VAR 0 5
66795: PPUSH
66796: LD_VAR 0 6
66800: PPUSH
66801: CALL_OW 428
66805: OR
66806: IFFALSE 66810
// exit ;
66808: GO 67538
// uc_side := your_side ;
66810: LD_ADDR_OWVAR 20
66814: PUSH
66815: LD_OWVAR 2
66819: ST_TO_ADDR
// uc_nation := nation ;
66820: LD_ADDR_OWVAR 21
66824: PUSH
66825: LD_VAR 0 1
66829: ST_TO_ADDR
// bc_level = 1 ;
66830: LD_ADDR_OWVAR 43
66834: PUSH
66835: LD_INT 1
66837: ST_TO_ADDR
// case btype of 1 :
66838: LD_VAR 0 2
66842: PUSH
66843: LD_INT 1
66845: DOUBLE
66846: EQUAL
66847: IFTRUE 66851
66849: GO 66862
66851: POP
// bc_type := b_depot ; 2 :
66852: LD_ADDR_OWVAR 42
66856: PUSH
66857: LD_INT 0
66859: ST_TO_ADDR
66860: GO 67482
66862: LD_INT 2
66864: DOUBLE
66865: EQUAL
66866: IFTRUE 66870
66868: GO 66881
66870: POP
// bc_type := b_warehouse ; 3 :
66871: LD_ADDR_OWVAR 42
66875: PUSH
66876: LD_INT 1
66878: ST_TO_ADDR
66879: GO 67482
66881: LD_INT 3
66883: DOUBLE
66884: EQUAL
66885: IFTRUE 66889
66887: GO 66900
66889: POP
// bc_type := b_lab ; 4 .. 9 :
66890: LD_ADDR_OWVAR 42
66894: PUSH
66895: LD_INT 6
66897: ST_TO_ADDR
66898: GO 67482
66900: LD_INT 4
66902: DOUBLE
66903: GREATEREQUAL
66904: IFFALSE 66912
66906: LD_INT 9
66908: DOUBLE
66909: LESSEQUAL
66910: IFTRUE 66914
66912: GO 66974
66914: POP
// begin bc_type := b_lab_half ;
66915: LD_ADDR_OWVAR 42
66919: PUSH
66920: LD_INT 7
66922: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
66923: LD_ADDR_OWVAR 44
66927: PUSH
66928: LD_INT 10
66930: PUSH
66931: LD_INT 11
66933: PUSH
66934: LD_INT 12
66936: PUSH
66937: LD_INT 15
66939: PUSH
66940: LD_INT 14
66942: PUSH
66943: LD_INT 13
66945: PUSH
66946: EMPTY
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: PUSH
66954: LD_VAR 0 2
66958: PUSH
66959: LD_INT 3
66961: MINUS
66962: ARRAY
66963: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
66964: LD_ADDR_OWVAR 45
66968: PUSH
66969: LD_INT 9
66971: ST_TO_ADDR
// end ; 10 .. 13 :
66972: GO 67482
66974: LD_INT 10
66976: DOUBLE
66977: GREATEREQUAL
66978: IFFALSE 66986
66980: LD_INT 13
66982: DOUBLE
66983: LESSEQUAL
66984: IFTRUE 66988
66986: GO 67065
66988: POP
// begin bc_type := b_lab_full ;
66989: LD_ADDR_OWVAR 42
66993: PUSH
66994: LD_INT 8
66996: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
66997: LD_ADDR_OWVAR 44
67001: PUSH
67002: LD_INT 10
67004: PUSH
67005: LD_INT 12
67007: PUSH
67008: LD_INT 14
67010: PUSH
67011: LD_INT 13
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: LIST
67018: LIST
67019: PUSH
67020: LD_VAR 0 2
67024: PUSH
67025: LD_INT 9
67027: MINUS
67028: ARRAY
67029: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
67030: LD_ADDR_OWVAR 45
67034: PUSH
67035: LD_INT 11
67037: PUSH
67038: LD_INT 15
67040: PUSH
67041: LD_INT 12
67043: PUSH
67044: LD_INT 15
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: LIST
67051: LIST
67052: PUSH
67053: LD_VAR 0 2
67057: PUSH
67058: LD_INT 9
67060: MINUS
67061: ARRAY
67062: ST_TO_ADDR
// end ; 14 :
67063: GO 67482
67065: LD_INT 14
67067: DOUBLE
67068: EQUAL
67069: IFTRUE 67073
67071: GO 67084
67073: POP
// bc_type := b_workshop ; 15 :
67074: LD_ADDR_OWVAR 42
67078: PUSH
67079: LD_INT 2
67081: ST_TO_ADDR
67082: GO 67482
67084: LD_INT 15
67086: DOUBLE
67087: EQUAL
67088: IFTRUE 67092
67090: GO 67103
67092: POP
// bc_type := b_factory ; 16 :
67093: LD_ADDR_OWVAR 42
67097: PUSH
67098: LD_INT 3
67100: ST_TO_ADDR
67101: GO 67482
67103: LD_INT 16
67105: DOUBLE
67106: EQUAL
67107: IFTRUE 67111
67109: GO 67122
67111: POP
// bc_type := b_ext_gun ; 17 :
67112: LD_ADDR_OWVAR 42
67116: PUSH
67117: LD_INT 17
67119: ST_TO_ADDR
67120: GO 67482
67122: LD_INT 17
67124: DOUBLE
67125: EQUAL
67126: IFTRUE 67130
67128: GO 67158
67130: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
67131: LD_ADDR_OWVAR 42
67135: PUSH
67136: LD_INT 19
67138: PUSH
67139: LD_INT 23
67141: PUSH
67142: LD_INT 19
67144: PUSH
67145: EMPTY
67146: LIST
67147: LIST
67148: LIST
67149: PUSH
67150: LD_VAR 0 1
67154: ARRAY
67155: ST_TO_ADDR
67156: GO 67482
67158: LD_INT 18
67160: DOUBLE
67161: EQUAL
67162: IFTRUE 67166
67164: GO 67177
67166: POP
// bc_type := b_ext_radar ; 19 :
67167: LD_ADDR_OWVAR 42
67171: PUSH
67172: LD_INT 20
67174: ST_TO_ADDR
67175: GO 67482
67177: LD_INT 19
67179: DOUBLE
67180: EQUAL
67181: IFTRUE 67185
67183: GO 67196
67185: POP
// bc_type := b_ext_radio ; 20 :
67186: LD_ADDR_OWVAR 42
67190: PUSH
67191: LD_INT 22
67193: ST_TO_ADDR
67194: GO 67482
67196: LD_INT 20
67198: DOUBLE
67199: EQUAL
67200: IFTRUE 67204
67202: GO 67215
67204: POP
// bc_type := b_ext_siberium ; 21 :
67205: LD_ADDR_OWVAR 42
67209: PUSH
67210: LD_INT 21
67212: ST_TO_ADDR
67213: GO 67482
67215: LD_INT 21
67217: DOUBLE
67218: EQUAL
67219: IFTRUE 67223
67221: GO 67234
67223: POP
// bc_type := b_ext_computer ; 22 :
67224: LD_ADDR_OWVAR 42
67228: PUSH
67229: LD_INT 24
67231: ST_TO_ADDR
67232: GO 67482
67234: LD_INT 22
67236: DOUBLE
67237: EQUAL
67238: IFTRUE 67242
67240: GO 67253
67242: POP
// bc_type := b_ext_track ; 23 :
67243: LD_ADDR_OWVAR 42
67247: PUSH
67248: LD_INT 16
67250: ST_TO_ADDR
67251: GO 67482
67253: LD_INT 23
67255: DOUBLE
67256: EQUAL
67257: IFTRUE 67261
67259: GO 67272
67261: POP
// bc_type := b_ext_laser ; 24 :
67262: LD_ADDR_OWVAR 42
67266: PUSH
67267: LD_INT 25
67269: ST_TO_ADDR
67270: GO 67482
67272: LD_INT 24
67274: DOUBLE
67275: EQUAL
67276: IFTRUE 67280
67278: GO 67291
67280: POP
// bc_type := b_control_tower ; 25 :
67281: LD_ADDR_OWVAR 42
67285: PUSH
67286: LD_INT 36
67288: ST_TO_ADDR
67289: GO 67482
67291: LD_INT 25
67293: DOUBLE
67294: EQUAL
67295: IFTRUE 67299
67297: GO 67310
67299: POP
// bc_type := b_breastwork ; 26 :
67300: LD_ADDR_OWVAR 42
67304: PUSH
67305: LD_INT 31
67307: ST_TO_ADDR
67308: GO 67482
67310: LD_INT 26
67312: DOUBLE
67313: EQUAL
67314: IFTRUE 67318
67316: GO 67329
67318: POP
// bc_type := b_bunker ; 27 :
67319: LD_ADDR_OWVAR 42
67323: PUSH
67324: LD_INT 32
67326: ST_TO_ADDR
67327: GO 67482
67329: LD_INT 27
67331: DOUBLE
67332: EQUAL
67333: IFTRUE 67337
67335: GO 67348
67337: POP
// bc_type := b_turret ; 28 :
67338: LD_ADDR_OWVAR 42
67342: PUSH
67343: LD_INT 33
67345: ST_TO_ADDR
67346: GO 67482
67348: LD_INT 28
67350: DOUBLE
67351: EQUAL
67352: IFTRUE 67356
67354: GO 67367
67356: POP
// bc_type := b_armoury ; 29 :
67357: LD_ADDR_OWVAR 42
67361: PUSH
67362: LD_INT 4
67364: ST_TO_ADDR
67365: GO 67482
67367: LD_INT 29
67369: DOUBLE
67370: EQUAL
67371: IFTRUE 67375
67373: GO 67386
67375: POP
// bc_type := b_barracks ; 30 :
67376: LD_ADDR_OWVAR 42
67380: PUSH
67381: LD_INT 5
67383: ST_TO_ADDR
67384: GO 67482
67386: LD_INT 30
67388: DOUBLE
67389: EQUAL
67390: IFTRUE 67394
67392: GO 67405
67394: POP
// bc_type := b_solar_power ; 31 :
67395: LD_ADDR_OWVAR 42
67399: PUSH
67400: LD_INT 27
67402: ST_TO_ADDR
67403: GO 67482
67405: LD_INT 31
67407: DOUBLE
67408: EQUAL
67409: IFTRUE 67413
67411: GO 67424
67413: POP
// bc_type := b_oil_power ; 32 :
67414: LD_ADDR_OWVAR 42
67418: PUSH
67419: LD_INT 26
67421: ST_TO_ADDR
67422: GO 67482
67424: LD_INT 32
67426: DOUBLE
67427: EQUAL
67428: IFTRUE 67432
67430: GO 67443
67432: POP
// bc_type := b_siberite_power ; 33 :
67433: LD_ADDR_OWVAR 42
67437: PUSH
67438: LD_INT 28
67440: ST_TO_ADDR
67441: GO 67482
67443: LD_INT 33
67445: DOUBLE
67446: EQUAL
67447: IFTRUE 67451
67449: GO 67462
67451: POP
// bc_type := b_oil_mine ; 34 :
67452: LD_ADDR_OWVAR 42
67456: PUSH
67457: LD_INT 29
67459: ST_TO_ADDR
67460: GO 67482
67462: LD_INT 34
67464: DOUBLE
67465: EQUAL
67466: IFTRUE 67470
67468: GO 67481
67470: POP
// bc_type := b_siberite_mine ; end ;
67471: LD_ADDR_OWVAR 42
67475: PUSH
67476: LD_INT 30
67478: ST_TO_ADDR
67479: GO 67482
67481: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
67482: LD_ADDR_VAR 0 8
67486: PUSH
67487: LD_VAR 0 5
67491: PPUSH
67492: LD_VAR 0 6
67496: PPUSH
67497: LD_VAR 0 3
67501: PPUSH
67502: CALL_OW 47
67506: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
67507: LD_OWVAR 42
67511: PUSH
67512: LD_INT 32
67514: PUSH
67515: LD_INT 33
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: IN
67522: IFFALSE 67538
// PlaceWeaponTurret ( b , weapon ) ;
67524: LD_VAR 0 8
67528: PPUSH
67529: LD_VAR 0 4
67533: PPUSH
67534: CALL_OW 431
// end ;
67538: LD_VAR 0 7
67542: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
67543: LD_INT 0
67545: PPUSH
67546: PPUSH
67547: PPUSH
67548: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67549: LD_ADDR_VAR 0 4
67553: PUSH
67554: LD_INT 22
67556: PUSH
67557: LD_OWVAR 2
67561: PUSH
67562: EMPTY
67563: LIST
67564: LIST
67565: PUSH
67566: LD_INT 2
67568: PUSH
67569: LD_INT 30
67571: PUSH
67572: LD_INT 0
67574: PUSH
67575: EMPTY
67576: LIST
67577: LIST
67578: PUSH
67579: LD_INT 30
67581: PUSH
67582: LD_INT 1
67584: PUSH
67585: EMPTY
67586: LIST
67587: LIST
67588: PUSH
67589: EMPTY
67590: LIST
67591: LIST
67592: LIST
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PPUSH
67598: CALL_OW 69
67602: ST_TO_ADDR
// if not tmp then
67603: LD_VAR 0 4
67607: NOT
67608: IFFALSE 67612
// exit ;
67610: GO 67671
// for i in tmp do
67612: LD_ADDR_VAR 0 2
67616: PUSH
67617: LD_VAR 0 4
67621: PUSH
67622: FOR_IN
67623: IFFALSE 67669
// for j = 1 to 3 do
67625: LD_ADDR_VAR 0 3
67629: PUSH
67630: DOUBLE
67631: LD_INT 1
67633: DEC
67634: ST_TO_ADDR
67635: LD_INT 3
67637: PUSH
67638: FOR_TO
67639: IFFALSE 67665
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
67641: LD_VAR 0 2
67645: PPUSH
67646: CALL_OW 274
67650: PPUSH
67651: LD_VAR 0 3
67655: PPUSH
67656: LD_INT 99999
67658: PPUSH
67659: CALL_OW 277
67663: GO 67638
67665: POP
67666: POP
67667: GO 67622
67669: POP
67670: POP
// end ;
67671: LD_VAR 0 1
67675: RET
// export function hHackSetLevel10 ; var i , j ; begin
67676: LD_INT 0
67678: PPUSH
67679: PPUSH
67680: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
67681: LD_ADDR_VAR 0 2
67685: PUSH
67686: LD_INT 21
67688: PUSH
67689: LD_INT 1
67691: PUSH
67692: EMPTY
67693: LIST
67694: LIST
67695: PPUSH
67696: CALL_OW 69
67700: PUSH
67701: FOR_IN
67702: IFFALSE 67754
// if IsSelected ( i ) then
67704: LD_VAR 0 2
67708: PPUSH
67709: CALL_OW 306
67713: IFFALSE 67752
// begin for j := 1 to 4 do
67715: LD_ADDR_VAR 0 3
67719: PUSH
67720: DOUBLE
67721: LD_INT 1
67723: DEC
67724: ST_TO_ADDR
67725: LD_INT 4
67727: PUSH
67728: FOR_TO
67729: IFFALSE 67750
// SetSkill ( i , j , 10 ) ;
67731: LD_VAR 0 2
67735: PPUSH
67736: LD_VAR 0 3
67740: PPUSH
67741: LD_INT 10
67743: PPUSH
67744: CALL_OW 237
67748: GO 67728
67750: POP
67751: POP
// end ;
67752: GO 67701
67754: POP
67755: POP
// end ;
67756: LD_VAR 0 1
67760: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
67761: LD_INT 0
67763: PPUSH
67764: PPUSH
67765: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
67766: LD_ADDR_VAR 0 2
67770: PUSH
67771: LD_INT 22
67773: PUSH
67774: LD_OWVAR 2
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 21
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: EMPTY
67794: LIST
67795: LIST
67796: PPUSH
67797: CALL_OW 69
67801: PUSH
67802: FOR_IN
67803: IFFALSE 67844
// begin for j := 1 to 4 do
67805: LD_ADDR_VAR 0 3
67809: PUSH
67810: DOUBLE
67811: LD_INT 1
67813: DEC
67814: ST_TO_ADDR
67815: LD_INT 4
67817: PUSH
67818: FOR_TO
67819: IFFALSE 67840
// SetSkill ( i , j , 10 ) ;
67821: LD_VAR 0 2
67825: PPUSH
67826: LD_VAR 0 3
67830: PPUSH
67831: LD_INT 10
67833: PPUSH
67834: CALL_OW 237
67838: GO 67818
67840: POP
67841: POP
// end ;
67842: GO 67802
67844: POP
67845: POP
// end ;
67846: LD_VAR 0 1
67850: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
67851: LD_INT 0
67853: PPUSH
// uc_side := your_side ;
67854: LD_ADDR_OWVAR 20
67858: PUSH
67859: LD_OWVAR 2
67863: ST_TO_ADDR
// uc_nation := nation ;
67864: LD_ADDR_OWVAR 21
67868: PUSH
67869: LD_VAR 0 1
67873: ST_TO_ADDR
// InitHc ;
67874: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
67878: LD_INT 0
67880: PPUSH
67881: LD_VAR 0 2
67885: PPUSH
67886: LD_VAR 0 3
67890: PPUSH
67891: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
67895: LD_VAR 0 4
67899: PPUSH
67900: LD_VAR 0 5
67904: PPUSH
67905: CALL_OW 428
67909: PUSH
67910: LD_INT 0
67912: EQUAL
67913: IFFALSE 67937
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
67915: CALL_OW 44
67919: PPUSH
67920: LD_VAR 0 4
67924: PPUSH
67925: LD_VAR 0 5
67929: PPUSH
67930: LD_INT 1
67932: PPUSH
67933: CALL_OW 48
// end ;
67937: LD_VAR 0 6
67941: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
67942: LD_INT 0
67944: PPUSH
67945: PPUSH
// uc_side := your_side ;
67946: LD_ADDR_OWVAR 20
67950: PUSH
67951: LD_OWVAR 2
67955: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
67956: LD_VAR 0 1
67960: PUSH
67961: LD_INT 1
67963: PUSH
67964: LD_INT 2
67966: PUSH
67967: LD_INT 3
67969: PUSH
67970: LD_INT 4
67972: PUSH
67973: LD_INT 5
67975: PUSH
67976: EMPTY
67977: LIST
67978: LIST
67979: LIST
67980: LIST
67981: LIST
67982: IN
67983: IFFALSE 67995
// uc_nation := nation_american else
67985: LD_ADDR_OWVAR 21
67989: PUSH
67990: LD_INT 1
67992: ST_TO_ADDR
67993: GO 68038
// if chassis in [ 11 , 12 , 13 , 14 ] then
67995: LD_VAR 0 1
67999: PUSH
68000: LD_INT 11
68002: PUSH
68003: LD_INT 12
68005: PUSH
68006: LD_INT 13
68008: PUSH
68009: LD_INT 14
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: LIST
68016: LIST
68017: IN
68018: IFFALSE 68030
// uc_nation := nation_arabian else
68020: LD_ADDR_OWVAR 21
68024: PUSH
68025: LD_INT 2
68027: ST_TO_ADDR
68028: GO 68038
// uc_nation := nation_russian ;
68030: LD_ADDR_OWVAR 21
68034: PUSH
68035: LD_INT 3
68037: ST_TO_ADDR
// vc_chassis := chassis ;
68038: LD_ADDR_OWVAR 37
68042: PUSH
68043: LD_VAR 0 1
68047: ST_TO_ADDR
// vc_engine := engine ;
68048: LD_ADDR_OWVAR 39
68052: PUSH
68053: LD_VAR 0 2
68057: ST_TO_ADDR
// vc_control := control ;
68058: LD_ADDR_OWVAR 38
68062: PUSH
68063: LD_VAR 0 3
68067: ST_TO_ADDR
// vc_weapon := weapon ;
68068: LD_ADDR_OWVAR 40
68072: PUSH
68073: LD_VAR 0 4
68077: ST_TO_ADDR
// un := CreateVehicle ;
68078: LD_ADDR_VAR 0 8
68082: PUSH
68083: CALL_OW 45
68087: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
68088: LD_VAR 0 8
68092: PPUSH
68093: LD_INT 0
68095: PPUSH
68096: LD_INT 5
68098: PPUSH
68099: CALL_OW 12
68103: PPUSH
68104: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
68108: LD_VAR 0 8
68112: PPUSH
68113: LD_VAR 0 5
68117: PPUSH
68118: LD_VAR 0 6
68122: PPUSH
68123: LD_INT 1
68125: PPUSH
68126: CALL_OW 48
// end ;
68130: LD_VAR 0 7
68134: RET
// export hInvincible ; every 1 do
68135: GO 68137
68137: DISABLE
// hInvincible := [ ] ;
68138: LD_ADDR_EXP 95
68142: PUSH
68143: EMPTY
68144: ST_TO_ADDR
68145: END
// every 10 do var i ;
68146: GO 68148
68148: DISABLE
68149: LD_INT 0
68151: PPUSH
// begin enable ;
68152: ENABLE
// if not hInvincible then
68153: LD_EXP 95
68157: NOT
68158: IFFALSE 68162
// exit ;
68160: GO 68206
// for i in hInvincible do
68162: LD_ADDR_VAR 0 1
68166: PUSH
68167: LD_EXP 95
68171: PUSH
68172: FOR_IN
68173: IFFALSE 68204
// if GetLives ( i ) < 1000 then
68175: LD_VAR 0 1
68179: PPUSH
68180: CALL_OW 256
68184: PUSH
68185: LD_INT 1000
68187: LESS
68188: IFFALSE 68202
// SetLives ( i , 1000 ) ;
68190: LD_VAR 0 1
68194: PPUSH
68195: LD_INT 1000
68197: PPUSH
68198: CALL_OW 234
68202: GO 68172
68204: POP
68205: POP
// end ;
68206: PPOPN 1
68208: END
// export function hHackInvincible ; var i ; begin
68209: LD_INT 0
68211: PPUSH
68212: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
68213: LD_ADDR_VAR 0 2
68217: PUSH
68218: LD_INT 2
68220: PUSH
68221: LD_INT 21
68223: PUSH
68224: LD_INT 1
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 21
68233: PUSH
68234: LD_INT 2
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: LIST
68245: PPUSH
68246: CALL_OW 69
68250: PUSH
68251: FOR_IN
68252: IFFALSE 68313
// if IsSelected ( i ) then
68254: LD_VAR 0 2
68258: PPUSH
68259: CALL_OW 306
68263: IFFALSE 68311
// begin if i in hInvincible then
68265: LD_VAR 0 2
68269: PUSH
68270: LD_EXP 95
68274: IN
68275: IFFALSE 68295
// hInvincible := hInvincible diff i else
68277: LD_ADDR_EXP 95
68281: PUSH
68282: LD_EXP 95
68286: PUSH
68287: LD_VAR 0 2
68291: DIFF
68292: ST_TO_ADDR
68293: GO 68311
// hInvincible := hInvincible union i ;
68295: LD_ADDR_EXP 95
68299: PUSH
68300: LD_EXP 95
68304: PUSH
68305: LD_VAR 0 2
68309: UNION
68310: ST_TO_ADDR
// end ;
68311: GO 68251
68313: POP
68314: POP
// end ;
68315: LD_VAR 0 1
68319: RET
// export function hHackInvisible ; var i , j ; begin
68320: LD_INT 0
68322: PPUSH
68323: PPUSH
68324: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
68325: LD_ADDR_VAR 0 2
68329: PUSH
68330: LD_INT 21
68332: PUSH
68333: LD_INT 1
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PPUSH
68340: CALL_OW 69
68344: PUSH
68345: FOR_IN
68346: IFFALSE 68370
// if IsSelected ( i ) then
68348: LD_VAR 0 2
68352: PPUSH
68353: CALL_OW 306
68357: IFFALSE 68368
// ComForceInvisible ( i ) ;
68359: LD_VAR 0 2
68363: PPUSH
68364: CALL_OW 496
68368: GO 68345
68370: POP
68371: POP
// end ;
68372: LD_VAR 0 1
68376: RET
// export function hHackChangeYourSide ; begin
68377: LD_INT 0
68379: PPUSH
// if your_side = 8 then
68380: LD_OWVAR 2
68384: PUSH
68385: LD_INT 8
68387: EQUAL
68388: IFFALSE 68400
// your_side := 0 else
68390: LD_ADDR_OWVAR 2
68394: PUSH
68395: LD_INT 0
68397: ST_TO_ADDR
68398: GO 68414
// your_side := your_side + 1 ;
68400: LD_ADDR_OWVAR 2
68404: PUSH
68405: LD_OWVAR 2
68409: PUSH
68410: LD_INT 1
68412: PLUS
68413: ST_TO_ADDR
// end ;
68414: LD_VAR 0 1
68418: RET
// export function hHackChangeUnitSide ; var i , j ; begin
68419: LD_INT 0
68421: PPUSH
68422: PPUSH
68423: PPUSH
// for i in all_units do
68424: LD_ADDR_VAR 0 2
68428: PUSH
68429: LD_OWVAR 3
68433: PUSH
68434: FOR_IN
68435: IFFALSE 68513
// if IsSelected ( i ) then
68437: LD_VAR 0 2
68441: PPUSH
68442: CALL_OW 306
68446: IFFALSE 68511
// begin j := GetSide ( i ) ;
68448: LD_ADDR_VAR 0 3
68452: PUSH
68453: LD_VAR 0 2
68457: PPUSH
68458: CALL_OW 255
68462: ST_TO_ADDR
// if j = 8 then
68463: LD_VAR 0 3
68467: PUSH
68468: LD_INT 8
68470: EQUAL
68471: IFFALSE 68483
// j := 0 else
68473: LD_ADDR_VAR 0 3
68477: PUSH
68478: LD_INT 0
68480: ST_TO_ADDR
68481: GO 68497
// j := j + 1 ;
68483: LD_ADDR_VAR 0 3
68487: PUSH
68488: LD_VAR 0 3
68492: PUSH
68493: LD_INT 1
68495: PLUS
68496: ST_TO_ADDR
// SetSide ( i , j ) ;
68497: LD_VAR 0 2
68501: PPUSH
68502: LD_VAR 0 3
68506: PPUSH
68507: CALL_OW 235
// end ;
68511: GO 68434
68513: POP
68514: POP
// end ;
68515: LD_VAR 0 1
68519: RET
// export function hHackFog ; begin
68520: LD_INT 0
68522: PPUSH
// FogOff ( true ) ;
68523: LD_INT 1
68525: PPUSH
68526: CALL_OW 344
// end ;
68530: LD_VAR 0 1
68534: RET
// export function hHackTeleport ( unit , x , y ) ; begin
68535: LD_INT 0
68537: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
68538: LD_VAR 0 1
68542: PPUSH
68543: LD_VAR 0 2
68547: PPUSH
68548: LD_VAR 0 3
68552: PPUSH
68553: LD_INT 1
68555: PPUSH
68556: LD_INT 1
68558: PPUSH
68559: CALL_OW 483
// CenterOnXY ( x , y ) ;
68563: LD_VAR 0 2
68567: PPUSH
68568: LD_VAR 0 3
68572: PPUSH
68573: CALL_OW 84
// end ;
68577: LD_VAR 0 4
68581: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
68582: LD_INT 0
68584: PPUSH
68585: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
68586: LD_VAR 0 1
68590: NOT
68591: IFTRUE 68610
68593: PUSH
68594: LD_VAR 0 2
68598: PPUSH
68599: LD_VAR 0 3
68603: PPUSH
68604: CALL_OW 488
68608: NOT
68609: OR
68610: IFTRUE 68645
68612: PUSH
68613: LD_VAR 0 1
68617: PPUSH
68618: CALL_OW 266
68622: PUSH
68623: LD_INT 3
68625: NONEQUAL
68626: IFFALSE 68644
68628: PUSH
68629: LD_VAR 0 1
68633: PPUSH
68634: CALL_OW 247
68638: PUSH
68639: LD_INT 1
68641: EQUAL
68642: NOT
68643: AND
68644: OR
68645: IFFALSE 68649
// exit ;
68647: GO 68931
// if GetType ( factory ) = unit_human then
68649: LD_VAR 0 1
68653: PPUSH
68654: CALL_OW 247
68658: PUSH
68659: LD_INT 1
68661: EQUAL
68662: IFFALSE 68679
// factory := IsInUnit ( factory ) ;
68664: LD_ADDR_VAR 0 1
68668: PUSH
68669: LD_VAR 0 1
68673: PPUSH
68674: CALL_OW 310
68678: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
68679: LD_VAR 0 1
68683: PPUSH
68684: CALL_OW 266
68688: PUSH
68689: LD_INT 3
68691: NONEQUAL
68692: IFFALSE 68696
// exit ;
68694: GO 68931
// for i := 1 to Count ( factoryWaypoints ) do
68696: LD_ADDR_VAR 0 5
68700: PUSH
68701: DOUBLE
68702: LD_INT 1
68704: DEC
68705: ST_TO_ADDR
68706: LD_EXP 96
68710: PPUSH
68711: CALL 12621 0 1
68715: PUSH
68716: FOR_TO
68717: IFFALSE 68879
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
68719: LD_VAR 0 2
68723: PPUSH
68724: LD_VAR 0 3
68728: PPUSH
68729: CALL_OW 428
68733: PUSH
68734: LD_EXP 96
68738: PUSH
68739: LD_VAR 0 5
68743: ARRAY
68744: PUSH
68745: LD_INT 2
68747: ARRAY
68748: EQUAL
68749: IFFALSE 68781
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68751: LD_ADDR_EXP 96
68755: PUSH
68756: LD_EXP 96
68760: PPUSH
68761: LD_VAR 0 5
68765: PPUSH
68766: CALL_OW 3
68770: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68771: CALL 68936 0 0
// exit ;
68775: POP
68776: POP
68777: GO 68931
// end else
68779: GO 68877
// if factory = factoryWaypoints [ i ] [ 2 ] then
68781: LD_VAR 0 1
68785: PUSH
68786: LD_EXP 96
68790: PUSH
68791: LD_VAR 0 5
68795: ARRAY
68796: PUSH
68797: LD_INT 2
68799: ARRAY
68800: EQUAL
68801: IFFALSE 68877
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
68803: LD_ADDR_EXP 96
68807: PUSH
68808: LD_EXP 96
68812: PPUSH
68813: LD_VAR 0 5
68817: PPUSH
68818: CALL_OW 3
68822: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68823: LD_ADDR_EXP 96
68827: PUSH
68828: LD_EXP 96
68832: PPUSH
68833: LD_VAR 0 1
68837: PPUSH
68838: CALL_OW 255
68842: PUSH
68843: LD_VAR 0 1
68847: PUSH
68848: LD_VAR 0 2
68852: PUSH
68853: LD_VAR 0 3
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: LIST
68862: LIST
68863: PPUSH
68864: CALL 48597 0 2
68868: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68869: CALL 68936 0 0
// exit ;
68873: POP
68874: POP
68875: GO 68931
// end ; end ;
68877: GO 68716
68879: POP
68880: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
68881: LD_ADDR_EXP 96
68885: PUSH
68886: LD_EXP 96
68890: PPUSH
68891: LD_VAR 0 1
68895: PPUSH
68896: CALL_OW 255
68900: PUSH
68901: LD_VAR 0 1
68905: PUSH
68906: LD_VAR 0 2
68910: PUSH
68911: LD_VAR 0 3
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: PPUSH
68922: CALL 48597 0 2
68926: ST_TO_ADDR
// UpdateFactoryWaypoints ;
68927: CALL 68936 0 0
// end ;
68931: LD_VAR 0 4
68935: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
68936: LD_INT 0
68938: PPUSH
68939: PPUSH
68940: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
68941: LD_STRING resetFactoryWaypoint();
68943: PPUSH
68944: CALL_OW 559
// if factoryWaypoints then
68948: LD_EXP 96
68952: IFFALSE 69073
// begin list := factoryWaypoints ;
68954: LD_ADDR_VAR 0 3
68958: PUSH
68959: LD_EXP 96
68963: ST_TO_ADDR
// for i := 1 to list do
68964: LD_ADDR_VAR 0 2
68968: PUSH
68969: DOUBLE
68970: LD_INT 1
68972: DEC
68973: ST_TO_ADDR
68974: LD_VAR 0 3
68978: PUSH
68979: FOR_TO
68980: IFFALSE 69071
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
68982: LD_STRING setFactoryWaypointXY(
68984: PUSH
68985: LD_VAR 0 3
68989: PUSH
68990: LD_VAR 0 2
68994: ARRAY
68995: PUSH
68996: LD_INT 1
68998: ARRAY
68999: STR
69000: PUSH
69001: LD_STRING ,
69003: STR
69004: PUSH
69005: LD_VAR 0 3
69009: PUSH
69010: LD_VAR 0 2
69014: ARRAY
69015: PUSH
69016: LD_INT 2
69018: ARRAY
69019: STR
69020: PUSH
69021: LD_STRING ,
69023: STR
69024: PUSH
69025: LD_VAR 0 3
69029: PUSH
69030: LD_VAR 0 2
69034: ARRAY
69035: PUSH
69036: LD_INT 3
69038: ARRAY
69039: STR
69040: PUSH
69041: LD_STRING ,
69043: STR
69044: PUSH
69045: LD_VAR 0 3
69049: PUSH
69050: LD_VAR 0 2
69054: ARRAY
69055: PUSH
69056: LD_INT 4
69058: ARRAY
69059: STR
69060: PUSH
69061: LD_STRING )
69063: STR
69064: PPUSH
69065: CALL_OW 559
69069: GO 68979
69071: POP
69072: POP
// end ; end ;
69073: LD_VAR 0 1
69077: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
69078: LD_INT 0
69080: PPUSH
// if HexInfo ( x , y ) = warehouse then
69081: LD_VAR 0 2
69085: PPUSH
69086: LD_VAR 0 3
69090: PPUSH
69091: CALL_OW 428
69095: PUSH
69096: LD_VAR 0 1
69100: EQUAL
69101: IFFALSE 69128
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
69103: LD_ADDR_EXP 98
69107: PUSH
69108: LD_EXP 98
69112: PPUSH
69113: LD_VAR 0 1
69117: PPUSH
69118: LD_INT 0
69120: PPUSH
69121: CALL_OW 1
69125: ST_TO_ADDR
69126: GO 69179
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
69128: LD_ADDR_EXP 98
69132: PUSH
69133: LD_EXP 98
69137: PPUSH
69138: LD_VAR 0 1
69142: PPUSH
69143: LD_VAR 0 1
69147: PPUSH
69148: CALL_OW 255
69152: PUSH
69153: LD_VAR 0 1
69157: PUSH
69158: LD_VAR 0 2
69162: PUSH
69163: LD_VAR 0 3
69167: PUSH
69168: EMPTY
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: PPUSH
69174: CALL_OW 1
69178: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
69179: CALL 69188 0 0
// end ;
69183: LD_VAR 0 4
69187: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
69188: LD_INT 0
69190: PPUSH
69191: PPUSH
69192: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
69193: LD_STRING resetWarehouseGatheringPoints();
69195: PPUSH
69196: CALL_OW 559
// if warehouseGatheringPoints then
69200: LD_EXP 98
69204: IFFALSE 69330
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
69206: LD_ADDR_VAR 0 3
69210: PUSH
69211: LD_EXP 98
69215: PPUSH
69216: CALL 52531 0 1
69220: ST_TO_ADDR
// for i := 1 to list do
69221: LD_ADDR_VAR 0 2
69225: PUSH
69226: DOUBLE
69227: LD_INT 1
69229: DEC
69230: ST_TO_ADDR
69231: LD_VAR 0 3
69235: PUSH
69236: FOR_TO
69237: IFFALSE 69328
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
69239: LD_STRING setWarehouseGatheringPointXY(
69241: PUSH
69242: LD_VAR 0 3
69246: PUSH
69247: LD_VAR 0 2
69251: ARRAY
69252: PUSH
69253: LD_INT 1
69255: ARRAY
69256: STR
69257: PUSH
69258: LD_STRING ,
69260: STR
69261: PUSH
69262: LD_VAR 0 3
69266: PUSH
69267: LD_VAR 0 2
69271: ARRAY
69272: PUSH
69273: LD_INT 2
69275: ARRAY
69276: STR
69277: PUSH
69278: LD_STRING ,
69280: STR
69281: PUSH
69282: LD_VAR 0 3
69286: PUSH
69287: LD_VAR 0 2
69291: ARRAY
69292: PUSH
69293: LD_INT 3
69295: ARRAY
69296: STR
69297: PUSH
69298: LD_STRING ,
69300: STR
69301: PUSH
69302: LD_VAR 0 3
69306: PUSH
69307: LD_VAR 0 2
69311: ARRAY
69312: PUSH
69313: LD_INT 4
69315: ARRAY
69316: STR
69317: PUSH
69318: LD_STRING )
69320: STR
69321: PPUSH
69322: CALL_OW 559
69326: GO 69236
69328: POP
69329: POP
// end ; end ;
69330: LD_VAR 0 1
69334: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
69335: LD_EXP 98
69339: IFFALSE 70034
69341: GO 69343
69343: DISABLE
69344: LD_INT 0
69346: PPUSH
69347: PPUSH
69348: PPUSH
69349: PPUSH
69350: PPUSH
69351: PPUSH
69352: PPUSH
69353: PPUSH
69354: PPUSH
// begin enable ;
69355: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
69356: LD_ADDR_VAR 0 3
69360: PUSH
69361: LD_EXP 98
69365: PPUSH
69366: CALL 52531 0 1
69370: ST_TO_ADDR
// if not list then
69371: LD_VAR 0 3
69375: NOT
69376: IFFALSE 69380
// exit ;
69378: GO 70034
// for i := 1 to list do
69380: LD_ADDR_VAR 0 1
69384: PUSH
69385: DOUBLE
69386: LD_INT 1
69388: DEC
69389: ST_TO_ADDR
69390: LD_VAR 0 3
69394: PUSH
69395: FOR_TO
69396: IFFALSE 70032
// begin depot := list [ i ] [ 2 ] ;
69398: LD_ADDR_VAR 0 8
69402: PUSH
69403: LD_VAR 0 3
69407: PUSH
69408: LD_VAR 0 1
69412: ARRAY
69413: PUSH
69414: LD_INT 2
69416: ARRAY
69417: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
69418: LD_ADDR_VAR 0 5
69422: PUSH
69423: LD_VAR 0 3
69427: PUSH
69428: LD_VAR 0 1
69432: ARRAY
69433: PUSH
69434: LD_INT 1
69436: ARRAY
69437: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
69438: LD_VAR 0 8
69442: PPUSH
69443: CALL_OW 301
69447: IFTRUE 69466
69449: PUSH
69450: LD_VAR 0 5
69454: PUSH
69455: LD_VAR 0 8
69459: PPUSH
69460: CALL_OW 255
69464: NONEQUAL
69465: OR
69466: IFFALSE 69495
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
69468: LD_ADDR_EXP 98
69472: PUSH
69473: LD_EXP 98
69477: PPUSH
69478: LD_VAR 0 8
69482: PPUSH
69483: LD_INT 0
69485: PPUSH
69486: CALL_OW 1
69490: ST_TO_ADDR
// exit ;
69491: POP
69492: POP
69493: GO 70034
// end ; x := list [ i ] [ 3 ] ;
69495: LD_ADDR_VAR 0 6
69499: PUSH
69500: LD_VAR 0 3
69504: PUSH
69505: LD_VAR 0 1
69509: ARRAY
69510: PUSH
69511: LD_INT 3
69513: ARRAY
69514: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
69515: LD_ADDR_VAR 0 7
69519: PUSH
69520: LD_VAR 0 3
69524: PUSH
69525: LD_VAR 0 1
69529: ARRAY
69530: PUSH
69531: LD_INT 4
69533: ARRAY
69534: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
69535: LD_ADDR_VAR 0 9
69539: PUSH
69540: LD_VAR 0 6
69544: PPUSH
69545: LD_VAR 0 7
69549: PPUSH
69550: LD_INT 16
69552: PPUSH
69553: CALL 51105 0 3
69557: ST_TO_ADDR
// if not cratesNearbyPoint then
69558: LD_VAR 0 9
69562: NOT
69563: IFFALSE 69569
// exit ;
69565: POP
69566: POP
69567: GO 70034
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
69569: LD_ADDR_VAR 0 4
69573: PUSH
69574: LD_INT 22
69576: PUSH
69577: LD_VAR 0 5
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 3
69588: PUSH
69589: LD_INT 60
69591: PUSH
69592: EMPTY
69593: LIST
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 91
69601: PUSH
69602: LD_VAR 0 8
69606: PUSH
69607: LD_INT 6
69609: PUSH
69610: EMPTY
69611: LIST
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 2
69617: PUSH
69618: LD_INT 25
69620: PUSH
69621: LD_INT 2
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 25
69630: PUSH
69631: LD_INT 16
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: LIST
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: PPUSH
69649: CALL_OW 69
69653: PUSH
69654: LD_VAR 0 8
69658: PPUSH
69659: CALL_OW 313
69663: PPUSH
69664: LD_INT 3
69666: PUSH
69667: LD_INT 60
69669: PUSH
69670: EMPTY
69671: LIST
69672: PUSH
69673: EMPTY
69674: LIST
69675: LIST
69676: PUSH
69677: LD_INT 2
69679: PUSH
69680: LD_INT 25
69682: PUSH
69683: LD_INT 2
69685: PUSH
69686: EMPTY
69687: LIST
69688: LIST
69689: PUSH
69690: LD_INT 25
69692: PUSH
69693: LD_INT 16
69695: PUSH
69696: EMPTY
69697: LIST
69698: LIST
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: LIST
69704: PUSH
69705: EMPTY
69706: LIST
69707: LIST
69708: PPUSH
69709: CALL_OW 72
69713: UNION
69714: ST_TO_ADDR
// if tmp then
69715: LD_VAR 0 4
69719: IFFALSE 69799
// begin tmp := ShrinkArray ( tmp , 3 ) ;
69721: LD_ADDR_VAR 0 4
69725: PUSH
69726: LD_VAR 0 4
69730: PPUSH
69731: LD_INT 3
69733: PPUSH
69734: CALL 48912 0 2
69738: ST_TO_ADDR
// for j in tmp do
69739: LD_ADDR_VAR 0 2
69743: PUSH
69744: LD_VAR 0 4
69748: PUSH
69749: FOR_IN
69750: IFFALSE 69793
// begin if IsInUnit ( j ) then
69752: LD_VAR 0 2
69756: PPUSH
69757: CALL_OW 310
69761: IFFALSE 69772
// ComExit ( j ) ;
69763: LD_VAR 0 2
69767: PPUSH
69768: CALL 48995 0 1
// AddComCollect ( j , x , y ) ;
69772: LD_VAR 0 2
69776: PPUSH
69777: LD_VAR 0 6
69781: PPUSH
69782: LD_VAR 0 7
69786: PPUSH
69787: CALL_OW 177
// end ;
69791: GO 69749
69793: POP
69794: POP
// exit ;
69795: POP
69796: POP
69797: GO 70034
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
69799: LD_ADDR_VAR 0 4
69803: PUSH
69804: LD_INT 22
69806: PUSH
69807: LD_VAR 0 5
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 91
69818: PUSH
69819: LD_VAR 0 8
69823: PUSH
69824: LD_INT 8
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 2
69834: PUSH
69835: LD_INT 34
69837: PUSH
69838: LD_INT 12
69840: PUSH
69841: EMPTY
69842: LIST
69843: LIST
69844: PUSH
69845: LD_INT 34
69847: PUSH
69848: LD_INT 51
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: LD_INT 34
69857: PUSH
69858: LD_INT 32
69860: PUSH
69861: EMPTY
69862: LIST
69863: LIST
69864: PUSH
69865: LD_INT 34
69867: PUSH
69868: LD_INT 89
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: LIST
69879: LIST
69880: LIST
69881: PUSH
69882: EMPTY
69883: LIST
69884: LIST
69885: LIST
69886: PPUSH
69887: CALL_OW 69
69891: ST_TO_ADDR
// if tmp then
69892: LD_VAR 0 4
69896: IFFALSE 70030
// begin for j in tmp do
69898: LD_ADDR_VAR 0 2
69902: PUSH
69903: LD_VAR 0 4
69907: PUSH
69908: FOR_IN
69909: IFFALSE 70028
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
69911: LD_VAR 0 2
69915: PPUSH
69916: CALL_OW 262
69920: PUSH
69921: LD_INT 3
69923: EQUAL
69924: IFTRUE 69941
69926: PUSH
69927: LD_VAR 0 2
69931: PPUSH
69932: CALL_OW 261
69936: PUSH
69937: LD_INT 20
69939: GREATER
69940: OR
69941: IFFALSE 69955
69943: PUSH
69944: LD_VAR 0 2
69948: PPUSH
69949: CALL_OW 314
69953: NOT
69954: AND
69955: IFFALSE 69985
69957: PUSH
69958: LD_VAR 0 2
69962: PPUSH
69963: CALL_OW 263
69967: PUSH
69968: LD_INT 1
69970: NONEQUAL
69971: IFTRUE 69984
69973: PUSH
69974: LD_VAR 0 2
69978: PPUSH
69979: CALL_OW 311
69983: OR
69984: AND
69985: IFFALSE 70026
// begin ComCollect ( j , x , y ) ;
69987: LD_VAR 0 2
69991: PPUSH
69992: LD_VAR 0 6
69996: PPUSH
69997: LD_VAR 0 7
70001: PPUSH
70002: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
70006: LD_VAR 0 2
70010: PPUSH
70011: LD_VAR 0 8
70015: PPUSH
70016: CALL_OW 172
// exit ;
70020: POP
70021: POP
70022: POP
70023: POP
70024: GO 70034
// end ;
70026: GO 69908
70028: POP
70029: POP
// end ; end ;
70030: GO 69395
70032: POP
70033: POP
// end ; end_of_file
70034: PPOPN 9
70036: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70037: LD_VAR 0 1
70041: PPUSH
70042: LD_VAR 0 2
70046: PPUSH
70047: LD_VAR 0 3
70051: PPUSH
70052: LD_VAR 0 4
70056: PPUSH
70057: LD_VAR 0 5
70061: PPUSH
70062: LD_VAR 0 6
70066: PPUSH
70067: CALL 54130 0 6
// end ;
70071: PPOPN 6
70073: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70074: LD_INT 0
70076: PPUSH
// begin if not units then
70077: LD_VAR 0 1
70081: NOT
70082: IFFALSE 70086
// exit ;
70084: GO 70120
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
70086: LD_VAR 0 1
70090: PPUSH
70091: LD_VAR 0 2
70095: PPUSH
70096: LD_VAR 0 3
70100: PPUSH
70101: LD_VAR 0 4
70105: PPUSH
70106: LD_VAR 0 5
70110: PPUSH
70111: LD_VAR 0 6
70115: PPUSH
70116: CALL 76740 0 6
// end ;
70120: PPOPN 7
70122: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70123: CALL 54010 0 0
// end ; end_of_file
70127: PPOPN 1
70129: END
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
70130: LD_VAR 0 1
70134: PUSH
70135: LD_INT 200
70137: DOUBLE
70138: GREATEREQUAL
70139: IFFALSE 70147
70141: LD_INT 299
70143: DOUBLE
70144: LESSEQUAL
70145: IFTRUE 70149
70147: GO 70181
70149: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
70150: LD_VAR 0 1
70154: PPUSH
70155: LD_VAR 0 2
70159: PPUSH
70160: LD_VAR 0 3
70164: PPUSH
70165: LD_VAR 0 4
70169: PPUSH
70170: LD_VAR 0 5
70174: PPUSH
70175: CALL 71043 0 5
70179: GO 70258
70181: LD_INT 300
70183: DOUBLE
70184: GREATEREQUAL
70185: IFFALSE 70193
70187: LD_INT 399
70189: DOUBLE
70190: LESSEQUAL
70191: IFTRUE 70195
70193: GO 70257
70195: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
70196: LD_VAR 0 1
70200: PPUSH
70201: LD_VAR 0 2
70205: PPUSH
70206: LD_VAR 0 3
70210: PPUSH
70211: LD_VAR 0 4
70215: PPUSH
70216: LD_VAR 0 5
70220: PPUSH
70221: LD_VAR 0 6
70225: PPUSH
70226: LD_VAR 0 7
70230: PPUSH
70231: LD_VAR 0 8
70235: PPUSH
70236: LD_VAR 0 9
70240: PPUSH
70241: LD_VAR 0 10
70245: PPUSH
70246: LD_VAR 0 11
70250: PPUSH
70251: CALL 66590 0 11
70255: GO 70258
70257: POP
// end ;
70258: PPOPN 11
70260: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
70261: LD_VAR 0 1
70265: PPUSH
70266: LD_VAR 0 2
70270: PPUSH
70271: LD_VAR 0 3
70275: PPUSH
70276: LD_VAR 0 4
70280: PPUSH
70281: LD_VAR 0 5
70285: PPUSH
70286: CALL 70343 0 5
// end ; end_of_file
70290: PPOPN 5
70292: END
// export function SOS_UnitDestroyed ( un ) ; begin
70293: LD_INT 0
70295: PPUSH
// ComRadiation ( un ) ;
70296: LD_VAR 0 1
70300: PPUSH
70301: CALL 71463 0 1
// end ;
70305: LD_VAR 0 2
70309: RET
// export function SOS_UnitKamikazed ( un ) ; begin
70310: LD_INT 0
70312: PPUSH
// ComRadiation ( un ) ;
70313: LD_VAR 0 1
70317: PPUSH
70318: CALL 71463 0 1
// end ;
70322: LD_VAR 0 2
70326: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
70327: LD_INT 0
70329: PPUSH
// end ;
70330: LD_VAR 0 4
70334: RET
// export function SOS_Command ( cmd ) ; begin
70335: LD_INT 0
70337: PPUSH
// end ;
70338: LD_VAR 0 2
70342: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
70343: LD_INT 0
70345: PPUSH
// end ;
70346: LD_VAR 0 6
70350: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
70351: LD_INT 0
70353: PPUSH
70354: PPUSH
70355: PPUSH
70356: PPUSH
70357: PPUSH
// if not vehicle or not factory then
70358: LD_VAR 0 1
70362: NOT
70363: IFTRUE 70372
70365: PUSH
70366: LD_VAR 0 2
70370: NOT
70371: OR
70372: IFFALSE 70376
// exit ;
70374: GO 71038
// weapon := GetWeapon ( vehicle ) ;
70376: LD_ADDR_VAR 0 7
70380: PUSH
70381: LD_VAR 0 1
70385: PPUSH
70386: CALL_OW 264
70390: ST_TO_ADDR
// if weapon = ar_miner then
70391: LD_VAR 0 7
70395: PUSH
70396: LD_INT 81
70398: EQUAL
70399: IFFALSE 70456
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
70401: LD_ADDR_EXP 107
70405: PUSH
70406: LD_EXP 107
70410: PPUSH
70411: LD_EXP 107
70415: PUSH
70416: LD_INT 1
70418: PLUS
70419: PPUSH
70420: LD_VAR 0 1
70424: PPUSH
70425: CALL_OW 1
70429: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
70430: LD_ADDR_EXP 108
70434: PUSH
70435: LD_EXP 108
70439: PPUSH
70440: LD_EXP 108
70444: PUSH
70445: LD_INT 1
70447: PLUS
70448: PPUSH
70449: EMPTY
70450: PPUSH
70451: CALL_OW 1
70455: ST_TO_ADDR
// end ; if not factoryWaypoints then
70456: LD_EXP 96
70460: NOT
70461: IFFALSE 70465
// exit ;
70463: GO 71038
// for i := 1 to Count ( factoryWaypoints ) do
70465: LD_ADDR_VAR 0 4
70469: PUSH
70470: DOUBLE
70471: LD_INT 1
70473: DEC
70474: ST_TO_ADDR
70475: LD_EXP 96
70479: PPUSH
70480: CALL 12621 0 1
70484: PUSH
70485: FOR_TO
70486: IFFALSE 71036
// if factoryWaypoints [ i ] [ 2 ] = factory then
70488: LD_EXP 96
70492: PUSH
70493: LD_VAR 0 4
70497: ARRAY
70498: PUSH
70499: LD_INT 2
70501: ARRAY
70502: PUSH
70503: LD_VAR 0 2
70507: EQUAL
70508: IFFALSE 71034
// begin if GetControl ( vehicle ) = control_manual then
70510: LD_VAR 0 1
70514: PPUSH
70515: CALL_OW 263
70519: PUSH
70520: LD_INT 1
70522: EQUAL
70523: IFFALSE 70887
// begin driver := IsDrivenBy ( vehicle ) ;
70525: LD_ADDR_VAR 0 5
70529: PUSH
70530: LD_VAR 0 1
70534: PPUSH
70535: CALL_OW 311
70539: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
70540: LD_VAR 0 5
70544: PUSH
70545: LD_EXP 97
70549: IN
70550: IFTRUE 70564
70552: PUSH
70553: LD_VAR 0 1
70557: PUSH
70558: LD_EXP 97
70562: IN
70563: OR
70564: IFFALSE 70570
// exit ;
70566: POP
70567: POP
70568: GO 71038
// if not HasTask ( driver ) then
70570: LD_VAR 0 5
70574: PPUSH
70575: CALL_OW 314
70579: NOT
70580: IFFALSE 70885
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
70582: LD_ADDR_EXP 97
70586: PUSH
70587: LD_EXP 97
70591: PPUSH
70592: LD_VAR 0 5
70596: PPUSH
70597: CALL 48597 0 2
70601: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
70602: LD_ADDR_EXP 97
70606: PUSH
70607: LD_EXP 97
70611: PPUSH
70612: LD_VAR 0 1
70616: PPUSH
70617: CALL 48597 0 2
70621: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70622: LD_ADDR_VAR 0 6
70626: PUSH
70627: LD_EXP 96
70631: PUSH
70632: LD_VAR 0 4
70636: ARRAY
70637: PUSH
70638: LD_INT 3
70640: ARRAY
70641: PPUSH
70642: LD_EXP 96
70646: PUSH
70647: LD_VAR 0 4
70651: ARRAY
70652: PUSH
70653: LD_INT 4
70655: ARRAY
70656: PPUSH
70657: CALL_OW 428
70661: ST_TO_ADDR
// if hex then
70662: LD_VAR 0 6
70666: IFFALSE 70684
// ComMoveUnit ( driver , hex ) else
70668: LD_VAR 0 5
70672: PPUSH
70673: LD_VAR 0 6
70677: PPUSH
70678: CALL_OW 112
70682: GO 70768
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
70684: LD_VAR 0 1
70688: PPUSH
70689: LD_EXP 96
70693: PUSH
70694: LD_VAR 0 4
70698: ARRAY
70699: PUSH
70700: LD_INT 3
70702: ARRAY
70703: PPUSH
70704: LD_EXP 96
70708: PUSH
70709: LD_VAR 0 4
70713: ARRAY
70714: PUSH
70715: LD_INT 4
70717: ARRAY
70718: PPUSH
70719: CALL_OW 297
70723: PUSH
70724: LD_INT 0
70726: GREATER
70727: IFFALSE 70768
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70729: LD_VAR 0 5
70733: PPUSH
70734: LD_EXP 96
70738: PUSH
70739: LD_VAR 0 4
70743: ARRAY
70744: PUSH
70745: LD_INT 3
70747: ARRAY
70748: PPUSH
70749: LD_EXP 96
70753: PUSH
70754: LD_VAR 0 4
70758: ARRAY
70759: PUSH
70760: LD_INT 4
70762: ARRAY
70763: PPUSH
70764: CALL_OW 111
// AddComExitVehicle ( driver ) ;
70768: LD_VAR 0 5
70772: PPUSH
70773: CALL_OW 181
// if Multiplayer then
70777: LD_OWVAR 4
70781: IFFALSE 70830
// begin repeat wait ( 10 ) ;
70783: LD_INT 10
70785: PPUSH
70786: CALL_OW 67
// until not IsInUnit ( driver ) ;
70790: LD_VAR 0 5
70794: PPUSH
70795: CALL_OW 310
70799: NOT
70800: IFFALSE 70783
// if not HasTask ( driver ) then
70802: LD_VAR 0 5
70806: PPUSH
70807: CALL_OW 314
70811: NOT
70812: IFFALSE 70828
// ComEnterUnit ( driver , factory ) ;
70814: LD_VAR 0 5
70818: PPUSH
70819: LD_VAR 0 2
70823: PPUSH
70824: CALL_OW 120
// end else
70828: GO 70844
// AddComEnterUnit ( driver , factory ) ;
70830: LD_VAR 0 5
70834: PPUSH
70835: LD_VAR 0 2
70839: PPUSH
70840: CALL_OW 180
// wait ( 0 0$1 ) ;
70844: LD_INT 35
70846: PPUSH
70847: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
70851: LD_ADDR_EXP 97
70855: PUSH
70856: LD_EXP 97
70860: PUSH
70861: LD_VAR 0 5
70865: DIFF
70866: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
70867: LD_ADDR_EXP 97
70871: PUSH
70872: LD_EXP 97
70876: PUSH
70877: LD_VAR 0 1
70881: DIFF
70882: ST_TO_ADDR
// break ;
70883: GO 71036
// end ; end else
70885: GO 71034
// if GetControl ( vehicle ) = control_remote then
70887: LD_VAR 0 1
70891: PPUSH
70892: CALL_OW 263
70896: PUSH
70897: LD_INT 2
70899: EQUAL
70900: IFFALSE 70986
// begin wait ( 0 0$2 ) ;
70902: LD_INT 70
70904: PPUSH
70905: CALL_OW 67
// repeat wait ( 10 ) ;
70909: LD_INT 10
70911: PPUSH
70912: CALL_OW 67
// Connect ( vehicle ) ;
70916: LD_VAR 0 1
70920: PPUSH
70921: CALL 18899 0 1
// until IsControledBy ( vehicle ) ;
70925: LD_VAR 0 1
70929: PPUSH
70930: CALL_OW 312
70934: IFFALSE 70909
// wait ( 10 ) ;
70936: LD_INT 10
70938: PPUSH
70939: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70943: LD_VAR 0 1
70947: PPUSH
70948: LD_EXP 96
70952: PUSH
70953: LD_VAR 0 4
70957: ARRAY
70958: PUSH
70959: LD_INT 3
70961: ARRAY
70962: PPUSH
70963: LD_EXP 96
70967: PUSH
70968: LD_VAR 0 4
70972: ARRAY
70973: PUSH
70974: LD_INT 4
70976: ARRAY
70977: PPUSH
70978: CALL_OW 111
// break ;
70982: GO 71036
// end else
70984: GO 71034
// begin wait ( 0 0$3 ) ;
70986: LD_INT 105
70988: PPUSH
70989: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
70993: LD_VAR 0 1
70997: PPUSH
70998: LD_EXP 96
71002: PUSH
71003: LD_VAR 0 4
71007: ARRAY
71008: PUSH
71009: LD_INT 3
71011: ARRAY
71012: PPUSH
71013: LD_EXP 96
71017: PUSH
71018: LD_VAR 0 4
71022: ARRAY
71023: PUSH
71024: LD_INT 4
71026: ARRAY
71027: PPUSH
71028: CALL_OW 111
// break ;
71032: GO 71036
// end ; end ;
71034: GO 70485
71036: POP
71037: POP
// end ;
71038: LD_VAR 0 3
71042: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
71043: LD_INT 0
71045: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
71046: LD_VAR 0 1
71050: PUSH
71051: LD_INT 250
71053: EQUAL
71054: IFFALSE 71071
71056: PUSH
71057: LD_VAR 0 2
71061: PPUSH
71062: CALL_OW 264
71066: PUSH
71067: LD_INT 81
71069: EQUAL
71070: AND
71071: IFFALSE 71092
// MinerPlaceMine ( unit , x , y ) ;
71073: LD_VAR 0 2
71077: PPUSH
71078: LD_VAR 0 4
71082: PPUSH
71083: LD_VAR 0 5
71087: PPUSH
71088: CALL 74438 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
71092: LD_VAR 0 1
71096: PUSH
71097: LD_INT 251
71099: EQUAL
71100: IFFALSE 71117
71102: PUSH
71103: LD_VAR 0 2
71107: PPUSH
71108: CALL_OW 264
71112: PUSH
71113: LD_INT 81
71115: EQUAL
71116: AND
71117: IFFALSE 71138
// MinerDetonateMine ( unit , x , y ) ;
71119: LD_VAR 0 2
71123: PPUSH
71124: LD_VAR 0 4
71128: PPUSH
71129: LD_VAR 0 5
71133: PPUSH
71134: CALL 74845 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
71138: LD_VAR 0 1
71142: PUSH
71143: LD_INT 252
71145: EQUAL
71146: IFFALSE 71163
71148: PUSH
71149: LD_VAR 0 2
71153: PPUSH
71154: CALL_OW 264
71158: PUSH
71159: LD_INT 81
71161: EQUAL
71162: AND
71163: IFFALSE 71184
// MinerCreateMinefield ( unit , x , y ) ;
71165: LD_VAR 0 2
71169: PPUSH
71170: LD_VAR 0 4
71174: PPUSH
71175: LD_VAR 0 5
71179: PPUSH
71180: CALL 75077 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
71184: LD_VAR 0 1
71188: PUSH
71189: LD_INT 253
71191: EQUAL
71192: IFFALSE 71209
71194: PUSH
71195: LD_VAR 0 2
71199: PPUSH
71200: CALL_OW 257
71204: PUSH
71205: LD_INT 5
71207: EQUAL
71208: AND
71209: IFFALSE 71230
// ComBinocular ( unit , x , y ) ;
71211: LD_VAR 0 2
71215: PPUSH
71216: LD_VAR 0 4
71220: PPUSH
71221: LD_VAR 0 5
71225: PPUSH
71226: CALL 75452 0 3
// if selectedUnit then
71230: LD_VAR 0 3
71234: IFFALSE 71294
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
71236: LD_VAR 0 1
71240: PUSH
71241: LD_INT 254
71243: EQUAL
71244: IFFALSE 71261
71246: PUSH
71247: LD_VAR 0 2
71251: PPUSH
71252: CALL_OW 264
71256: PUSH
71257: LD_INT 99
71259: EQUAL
71260: AND
71261: IFFALSE 71278
71263: PUSH
71264: LD_VAR 0 3
71268: PPUSH
71269: CALL_OW 263
71273: PUSH
71274: LD_INT 3
71276: EQUAL
71277: AND
71278: IFFALSE 71294
// HackDestroyVehicle ( unit , selectedUnit ) ;
71280: LD_VAR 0 2
71284: PPUSH
71285: LD_VAR 0 3
71289: PPUSH
71290: CALL 73628 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
71294: LD_VAR 0 1
71298: PUSH
71299: LD_INT 255
71301: EQUAL
71302: IFFALSE 71326
71304: PUSH
71305: LD_VAR 0 2
71309: PPUSH
71310: CALL_OW 264
71314: PUSH
71315: LD_INT 14
71317: PUSH
71318: LD_INT 53
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: IN
71325: AND
71326: IFFALSE 71344
71328: PUSH
71329: LD_VAR 0 4
71333: PPUSH
71334: LD_VAR 0 5
71338: PPUSH
71339: CALL_OW 488
71343: AND
71344: IFFALSE 71368
// CutTreeXYR ( unit , x , y , 12 ) ;
71346: LD_VAR 0 2
71350: PPUSH
71351: LD_VAR 0 4
71355: PPUSH
71356: LD_VAR 0 5
71360: PPUSH
71361: LD_INT 12
71363: PPUSH
71364: CALL 71559 0 4
// if cmd = 256 then
71368: LD_VAR 0 1
71372: PUSH
71373: LD_INT 256
71375: EQUAL
71376: IFFALSE 71397
// SetFactoryWaypoint ( unit , x , y ) ;
71378: LD_VAR 0 2
71382: PPUSH
71383: LD_VAR 0 4
71387: PPUSH
71388: LD_VAR 0 5
71392: PPUSH
71393: CALL 68582 0 3
// if cmd = 257 then
71397: LD_VAR 0 1
71401: PUSH
71402: LD_INT 257
71404: EQUAL
71405: IFFALSE 71426
// SetWarehouseGatheringPoint ( unit , x , y ) ;
71407: LD_VAR 0 2
71411: PPUSH
71412: LD_VAR 0 4
71416: PPUSH
71417: LD_VAR 0 5
71421: PPUSH
71422: CALL 69078 0 3
// if cmd = 258 then
71426: LD_VAR 0 1
71430: PUSH
71431: LD_INT 258
71433: EQUAL
71434: IFFALSE 71458
// BurnTreeXYR ( unit , x , y , 8 ) ;
71436: LD_VAR 0 2
71440: PPUSH
71441: LD_VAR 0 4
71445: PPUSH
71446: LD_VAR 0 5
71450: PPUSH
71451: LD_INT 8
71453: PPUSH
71454: CALL 71981 0 4
// end ;
71458: LD_VAR 0 6
71462: RET
// export function ComRadiation ( un ) ; var eff ; begin
71463: LD_INT 0
71465: PPUSH
71466: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
71467: LD_VAR 0 1
71471: PPUSH
71472: CALL_OW 264
71476: PUSH
71477: LD_INT 91
71479: NONEQUAL
71480: IFFALSE 71484
// exit ;
71482: GO 71554
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
71484: LD_INT 68
71486: PPUSH
71487: LD_VAR 0 1
71491: PPUSH
71492: CALL_OW 255
71496: PPUSH
71497: CALL_OW 321
71501: PUSH
71502: LD_INT 2
71504: EQUAL
71505: IFFALSE 71517
// eff := 50 else
71507: LD_ADDR_VAR 0 3
71511: PUSH
71512: LD_INT 50
71514: ST_TO_ADDR
71515: GO 71525
// eff := 25 ;
71517: LD_ADDR_VAR 0 3
71521: PUSH
71522: LD_INT 25
71524: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
71525: LD_VAR 0 1
71529: PPUSH
71530: CALL_OW 250
71534: PPUSH
71535: LD_VAR 0 1
71539: PPUSH
71540: CALL_OW 251
71544: PPUSH
71545: LD_VAR 0 3
71549: PPUSH
71550: CALL_OW 495
// end ;
71554: LD_VAR 0 2
71558: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
71559: LD_INT 0
71561: PPUSH
71562: PPUSH
71563: PPUSH
71564: PPUSH
71565: PPUSH
71566: PPUSH
71567: PPUSH
71568: PPUSH
71569: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
71570: LD_VAR 0 1
71574: PPUSH
71575: CALL_OW 302
71579: NOT
71580: IFTRUE 71599
71582: PUSH
71583: LD_VAR 0 2
71587: PPUSH
71588: LD_VAR 0 3
71592: PPUSH
71593: CALL_OW 488
71597: NOT
71598: OR
71599: IFTRUE 71608
71601: PUSH
71602: LD_VAR 0 4
71606: NOT
71607: OR
71608: IFFALSE 71612
// exit ;
71610: GO 71976
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
71612: LD_VAR 0 1
71616: PPUSH
71617: CALL_OW 437
71621: PPUSH
71622: CALL 12621 0 1
71626: PUSH
71627: LD_INT 10
71629: GREATER
71630: IFFALSE 71634
// exit ;
71632: GO 71976
// list := [ ] ;
71634: LD_ADDR_VAR 0 13
71638: PUSH
71639: EMPTY
71640: ST_TO_ADDR
// if x - r < 0 then
71641: LD_VAR 0 2
71645: PUSH
71646: LD_VAR 0 4
71650: MINUS
71651: PUSH
71652: LD_INT 0
71654: LESS
71655: IFFALSE 71667
// min_x := 0 else
71657: LD_ADDR_VAR 0 7
71661: PUSH
71662: LD_INT 0
71664: ST_TO_ADDR
71665: GO 71683
// min_x := x - r ;
71667: LD_ADDR_VAR 0 7
71671: PUSH
71672: LD_VAR 0 2
71676: PUSH
71677: LD_VAR 0 4
71681: MINUS
71682: ST_TO_ADDR
// if y - r < 0 then
71683: LD_VAR 0 3
71687: PUSH
71688: LD_VAR 0 4
71692: MINUS
71693: PUSH
71694: LD_INT 0
71696: LESS
71697: IFFALSE 71709
// min_y := 0 else
71699: LD_ADDR_VAR 0 8
71703: PUSH
71704: LD_INT 0
71706: ST_TO_ADDR
71707: GO 71725
// min_y := y - r ;
71709: LD_ADDR_VAR 0 8
71713: PUSH
71714: LD_VAR 0 3
71718: PUSH
71719: LD_VAR 0 4
71723: MINUS
71724: ST_TO_ADDR
// max_x := x + r ;
71725: LD_ADDR_VAR 0 9
71729: PUSH
71730: LD_VAR 0 2
71734: PUSH
71735: LD_VAR 0 4
71739: PLUS
71740: ST_TO_ADDR
// max_y := y + r ;
71741: LD_ADDR_VAR 0 10
71745: PUSH
71746: LD_VAR 0 3
71750: PUSH
71751: LD_VAR 0 4
71755: PLUS
71756: ST_TO_ADDR
// for _x = min_x to max_x do
71757: LD_ADDR_VAR 0 11
71761: PUSH
71762: DOUBLE
71763: LD_VAR 0 7
71767: DEC
71768: ST_TO_ADDR
71769: LD_VAR 0 9
71773: PUSH
71774: FOR_TO
71775: IFFALSE 71894
// for _y = min_y to max_y do
71777: LD_ADDR_VAR 0 12
71781: PUSH
71782: DOUBLE
71783: LD_VAR 0 8
71787: DEC
71788: ST_TO_ADDR
71789: LD_VAR 0 10
71793: PUSH
71794: FOR_TO
71795: IFFALSE 71890
// begin if not ValidHex ( _x , _y ) then
71797: LD_VAR 0 11
71801: PPUSH
71802: LD_VAR 0 12
71806: PPUSH
71807: CALL_OW 488
71811: NOT
71812: IFFALSE 71816
// continue ;
71814: GO 71794
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
71816: LD_VAR 0 11
71820: PPUSH
71821: LD_VAR 0 12
71825: PPUSH
71826: CALL_OW 351
71830: IFFALSE 71848
71832: PUSH
71833: LD_VAR 0 11
71837: PPUSH
71838: LD_VAR 0 12
71842: PPUSH
71843: CALL_OW 554
71847: AND
71848: IFFALSE 71888
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
71850: LD_ADDR_VAR 0 13
71854: PUSH
71855: LD_VAR 0 13
71859: PPUSH
71860: LD_VAR 0 13
71864: PUSH
71865: LD_INT 1
71867: PLUS
71868: PPUSH
71869: LD_VAR 0 11
71873: PUSH
71874: LD_VAR 0 12
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PPUSH
71883: CALL_OW 2
71887: ST_TO_ADDR
// end ;
71888: GO 71794
71890: POP
71891: POP
71892: GO 71774
71894: POP
71895: POP
// if not list then
71896: LD_VAR 0 13
71900: NOT
71901: IFFALSE 71905
// exit ;
71903: GO 71976
// for i in list do
71905: LD_ADDR_VAR 0 6
71909: PUSH
71910: LD_VAR 0 13
71914: PUSH
71915: FOR_IN
71916: IFFALSE 71974
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
71918: LD_VAR 0 1
71922: PPUSH
71923: LD_STRING M
71925: PUSH
71926: LD_VAR 0 6
71930: PUSH
71931: LD_INT 1
71933: ARRAY
71934: PUSH
71935: LD_VAR 0 6
71939: PUSH
71940: LD_INT 2
71942: ARRAY
71943: PUSH
71944: LD_INT 0
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: LD_INT 0
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: PUSH
71965: EMPTY
71966: LIST
71967: PPUSH
71968: CALL_OW 447
71972: GO 71915
71974: POP
71975: POP
// end ;
71976: LD_VAR 0 5
71980: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
71981: LD_INT 0
71983: PPUSH
71984: PPUSH
71985: PPUSH
71986: PPUSH
71987: PPUSH
71988: PPUSH
71989: PPUSH
71990: PPUSH
71991: PPUSH
71992: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
71993: LD_VAR 0 1
71997: PPUSH
71998: CALL_OW 302
72002: NOT
72003: IFTRUE 72022
72005: PUSH
72006: LD_VAR 0 2
72010: PPUSH
72011: LD_VAR 0 3
72015: PPUSH
72016: CALL_OW 488
72020: NOT
72021: OR
72022: IFTRUE 72031
72024: PUSH
72025: LD_VAR 0 4
72029: NOT
72030: OR
72031: IFFALSE 72035
// exit ;
72033: GO 72574
// if Count ( GetTaskList ( flame ) ) > 10 then
72035: LD_VAR 0 1
72039: PPUSH
72040: CALL_OW 437
72044: PPUSH
72045: CALL 12621 0 1
72049: PUSH
72050: LD_INT 10
72052: GREATER
72053: IFFALSE 72057
// exit ;
72055: GO 72574
// list := [ ] ;
72057: LD_ADDR_VAR 0 13
72061: PUSH
72062: EMPTY
72063: ST_TO_ADDR
// if x - r < 0 then
72064: LD_VAR 0 2
72068: PUSH
72069: LD_VAR 0 4
72073: MINUS
72074: PUSH
72075: LD_INT 0
72077: LESS
72078: IFFALSE 72090
// min_x := 0 else
72080: LD_ADDR_VAR 0 7
72084: PUSH
72085: LD_INT 0
72087: ST_TO_ADDR
72088: GO 72106
// min_x := x - r ;
72090: LD_ADDR_VAR 0 7
72094: PUSH
72095: LD_VAR 0 2
72099: PUSH
72100: LD_VAR 0 4
72104: MINUS
72105: ST_TO_ADDR
// if y - r < 0 then
72106: LD_VAR 0 3
72110: PUSH
72111: LD_VAR 0 4
72115: MINUS
72116: PUSH
72117: LD_INT 0
72119: LESS
72120: IFFALSE 72132
// min_y := 0 else
72122: LD_ADDR_VAR 0 8
72126: PUSH
72127: LD_INT 0
72129: ST_TO_ADDR
72130: GO 72148
// min_y := y - r ;
72132: LD_ADDR_VAR 0 8
72136: PUSH
72137: LD_VAR 0 3
72141: PUSH
72142: LD_VAR 0 4
72146: MINUS
72147: ST_TO_ADDR
// max_x := x + r ;
72148: LD_ADDR_VAR 0 9
72152: PUSH
72153: LD_VAR 0 2
72157: PUSH
72158: LD_VAR 0 4
72162: PLUS
72163: ST_TO_ADDR
// max_y := y + r ;
72164: LD_ADDR_VAR 0 10
72168: PUSH
72169: LD_VAR 0 3
72173: PUSH
72174: LD_VAR 0 4
72178: PLUS
72179: ST_TO_ADDR
// for _x = min_x to max_x do
72180: LD_ADDR_VAR 0 11
72184: PUSH
72185: DOUBLE
72186: LD_VAR 0 7
72190: DEC
72191: ST_TO_ADDR
72192: LD_VAR 0 9
72196: PUSH
72197: FOR_TO
72198: IFFALSE 72317
// for _y = min_y to max_y do
72200: LD_ADDR_VAR 0 12
72204: PUSH
72205: DOUBLE
72206: LD_VAR 0 8
72210: DEC
72211: ST_TO_ADDR
72212: LD_VAR 0 10
72216: PUSH
72217: FOR_TO
72218: IFFALSE 72313
// begin if not ValidHex ( _x , _y ) then
72220: LD_VAR 0 11
72224: PPUSH
72225: LD_VAR 0 12
72229: PPUSH
72230: CALL_OW 488
72234: NOT
72235: IFFALSE 72239
// continue ;
72237: GO 72217
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
72239: LD_VAR 0 11
72243: PPUSH
72244: LD_VAR 0 12
72248: PPUSH
72249: CALL_OW 351
72253: IFFALSE 72271
72255: PUSH
72256: LD_VAR 0 11
72260: PPUSH
72261: LD_VAR 0 12
72265: PPUSH
72266: CALL_OW 554
72270: AND
72271: IFFALSE 72311
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
72273: LD_ADDR_VAR 0 13
72277: PUSH
72278: LD_VAR 0 13
72282: PPUSH
72283: LD_VAR 0 13
72287: PUSH
72288: LD_INT 1
72290: PLUS
72291: PPUSH
72292: LD_VAR 0 11
72296: PUSH
72297: LD_VAR 0 12
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PPUSH
72306: CALL_OW 2
72310: ST_TO_ADDR
// end ;
72311: GO 72217
72313: POP
72314: POP
72315: GO 72197
72317: POP
72318: POP
// if not list then
72319: LD_VAR 0 13
72323: NOT
72324: IFFALSE 72328
// exit ;
72326: GO 72574
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
72328: LD_ADDR_VAR 0 13
72332: PUSH
72333: LD_VAR 0 1
72337: PPUSH
72338: LD_VAR 0 13
72342: PPUSH
72343: LD_INT 1
72345: PPUSH
72346: LD_INT 1
72348: PPUSH
72349: CALL 16027 0 4
72353: ST_TO_ADDR
// ComStop ( flame ) ;
72354: LD_VAR 0 1
72358: PPUSH
72359: CALL_OW 141
// for i in list do
72363: LD_ADDR_VAR 0 6
72367: PUSH
72368: LD_VAR 0 13
72372: PUSH
72373: FOR_IN
72374: IFFALSE 72405
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
72376: LD_VAR 0 1
72380: PPUSH
72381: LD_VAR 0 6
72385: PUSH
72386: LD_INT 1
72388: ARRAY
72389: PPUSH
72390: LD_VAR 0 6
72394: PUSH
72395: LD_INT 2
72397: ARRAY
72398: PPUSH
72399: CALL_OW 176
72403: GO 72373
72405: POP
72406: POP
// repeat wait ( 0 0$1 ) ;
72407: LD_INT 35
72409: PPUSH
72410: CALL_OW 67
// task := GetTaskList ( flame ) ;
72414: LD_ADDR_VAR 0 14
72418: PUSH
72419: LD_VAR 0 1
72423: PPUSH
72424: CALL_OW 437
72428: ST_TO_ADDR
// if not task then
72429: LD_VAR 0 14
72433: NOT
72434: IFFALSE 72438
// exit ;
72436: GO 72574
// if task [ 1 ] [ 1 ] <> | then
72438: LD_VAR 0 14
72442: PUSH
72443: LD_INT 1
72445: ARRAY
72446: PUSH
72447: LD_INT 1
72449: ARRAY
72450: PUSH
72451: LD_STRING |
72453: NONEQUAL
72454: IFFALSE 72458
// exit ;
72456: GO 72574
// _x := task [ 1 ] [ 2 ] ;
72458: LD_ADDR_VAR 0 11
72462: PUSH
72463: LD_VAR 0 14
72467: PUSH
72468: LD_INT 1
72470: ARRAY
72471: PUSH
72472: LD_INT 2
72474: ARRAY
72475: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
72476: LD_ADDR_VAR 0 12
72480: PUSH
72481: LD_VAR 0 14
72485: PUSH
72486: LD_INT 1
72488: ARRAY
72489: PUSH
72490: LD_INT 3
72492: ARRAY
72493: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
72494: LD_VAR 0 11
72498: PPUSH
72499: LD_VAR 0 12
72503: PPUSH
72504: CALL_OW 351
72508: NOT
72509: IFTRUE 72528
72511: PUSH
72512: LD_VAR 0 11
72516: PPUSH
72517: LD_VAR 0 12
72521: PPUSH
72522: CALL_OW 554
72526: NOT
72527: OR
72528: IFFALSE 72562
// begin task := Delete ( task , 1 ) ;
72530: LD_ADDR_VAR 0 14
72534: PUSH
72535: LD_VAR 0 14
72539: PPUSH
72540: LD_INT 1
72542: PPUSH
72543: CALL_OW 3
72547: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
72548: LD_VAR 0 1
72552: PPUSH
72553: LD_VAR 0 14
72557: PPUSH
72558: CALL_OW 446
// end ; until not HasTask ( flame ) ;
72562: LD_VAR 0 1
72566: PPUSH
72567: CALL_OW 314
72571: NOT
72572: IFFALSE 72407
// end ;
72574: LD_VAR 0 5
72578: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
72579: LD_EXP 100
72583: NOT
72584: IFFALSE 72634
72586: GO 72588
72588: DISABLE
// begin initHack := true ;
72589: LD_ADDR_EXP 100
72593: PUSH
72594: LD_INT 1
72596: ST_TO_ADDR
// hackTanks := [ ] ;
72597: LD_ADDR_EXP 101
72601: PUSH
72602: EMPTY
72603: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
72604: LD_ADDR_EXP 102
72608: PUSH
72609: EMPTY
72610: ST_TO_ADDR
// hackLimit := 3 ;
72611: LD_ADDR_EXP 103
72615: PUSH
72616: LD_INT 3
72618: ST_TO_ADDR
// hackDist := 12 ;
72619: LD_ADDR_EXP 104
72623: PUSH
72624: LD_INT 12
72626: ST_TO_ADDR
// hackCounter := [ ] ;
72627: LD_ADDR_EXP 105
72631: PUSH
72632: EMPTY
72633: ST_TO_ADDR
// end ;
72634: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
72635: LD_EXP 100
72639: IFFALSE 72657
72641: PUSH
72642: LD_INT 34
72644: PUSH
72645: LD_INT 99
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PPUSH
72652: CALL_OW 69
72656: AND
72657: IFFALSE 72910
72659: GO 72661
72661: DISABLE
72662: LD_INT 0
72664: PPUSH
72665: PPUSH
// begin enable ;
72666: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
72667: LD_ADDR_VAR 0 1
72671: PUSH
72672: LD_INT 34
72674: PUSH
72675: LD_INT 99
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PPUSH
72682: CALL_OW 69
72686: PUSH
72687: FOR_IN
72688: IFFALSE 72908
// begin if not i in hackTanks then
72690: LD_VAR 0 1
72694: PUSH
72695: LD_EXP 101
72699: IN
72700: NOT
72701: IFFALSE 72784
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
72703: LD_ADDR_EXP 101
72707: PUSH
72708: LD_EXP 101
72712: PPUSH
72713: LD_EXP 101
72717: PUSH
72718: LD_INT 1
72720: PLUS
72721: PPUSH
72722: LD_VAR 0 1
72726: PPUSH
72727: CALL_OW 1
72731: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
72732: LD_ADDR_EXP 102
72736: PUSH
72737: LD_EXP 102
72741: PPUSH
72742: LD_EXP 102
72746: PUSH
72747: LD_INT 1
72749: PLUS
72750: PPUSH
72751: EMPTY
72752: PPUSH
72753: CALL_OW 1
72757: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
72758: LD_ADDR_EXP 105
72762: PUSH
72763: LD_EXP 105
72767: PPUSH
72768: LD_EXP 105
72772: PUSH
72773: LD_INT 1
72775: PLUS
72776: PPUSH
72777: EMPTY
72778: PPUSH
72779: CALL_OW 1
72783: ST_TO_ADDR
// end ; if not IsOk ( i ) then
72784: LD_VAR 0 1
72788: PPUSH
72789: CALL_OW 302
72793: NOT
72794: IFFALSE 72807
// begin HackUnlinkAll ( i ) ;
72796: LD_VAR 0 1
72800: PPUSH
72801: CALL 72913 0 1
// continue ;
72805: GO 72687
// end ; HackCheckCapturedStatus ( i ) ;
72807: LD_VAR 0 1
72811: PPUSH
72812: CALL 73358 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
72816: LD_ADDR_VAR 0 2
72820: PUSH
72821: LD_INT 81
72823: PUSH
72824: LD_VAR 0 1
72828: PPUSH
72829: CALL_OW 255
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 33
72840: PUSH
72841: LD_INT 3
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: PUSH
72848: LD_INT 91
72850: PUSH
72851: LD_VAR 0 1
72855: PUSH
72856: LD_EXP 104
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 50
72868: PUSH
72869: EMPTY
72870: LIST
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: PPUSH
72878: CALL_OW 69
72882: ST_TO_ADDR
// if not tmp then
72883: LD_VAR 0 2
72887: NOT
72888: IFFALSE 72892
// continue ;
72890: GO 72687
// HackLink ( i , tmp ) ;
72892: LD_VAR 0 1
72896: PPUSH
72897: LD_VAR 0 2
72901: PPUSH
72902: CALL 73049 0 2
// end ;
72906: GO 72687
72908: POP
72909: POP
// end ;
72910: PPOPN 2
72912: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
72913: LD_INT 0
72915: PPUSH
72916: PPUSH
72917: PPUSH
// if not hack in hackTanks then
72918: LD_VAR 0 1
72922: PUSH
72923: LD_EXP 101
72927: IN
72928: NOT
72929: IFFALSE 72933
// exit ;
72931: GO 73044
// index := GetElementIndex ( hackTanks , hack ) ;
72933: LD_ADDR_VAR 0 4
72937: PUSH
72938: LD_EXP 101
72942: PPUSH
72943: LD_VAR 0 1
72947: PPUSH
72948: CALL 15322 0 2
72952: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
72953: LD_EXP 102
72957: PUSH
72958: LD_VAR 0 4
72962: ARRAY
72963: IFFALSE 73044
// begin for i in hackTanksCaptured [ index ] do
72965: LD_ADDR_VAR 0 3
72969: PUSH
72970: LD_EXP 102
72974: PUSH
72975: LD_VAR 0 4
72979: ARRAY
72980: PUSH
72981: FOR_IN
72982: IFFALSE 73008
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
72984: LD_VAR 0 3
72988: PUSH
72989: LD_INT 1
72991: ARRAY
72992: PPUSH
72993: LD_VAR 0 3
72997: PUSH
72998: LD_INT 2
73000: ARRAY
73001: PPUSH
73002: CALL_OW 235
73006: GO 72981
73008: POP
73009: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
73010: LD_ADDR_EXP 102
73014: PUSH
73015: LD_EXP 102
73019: PPUSH
73020: LD_VAR 0 4
73024: PPUSH
73025: EMPTY
73026: PPUSH
73027: CALL_OW 1
73031: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
73032: LD_VAR 0 1
73036: PPUSH
73037: LD_INT 0
73039: PPUSH
73040: CALL_OW 505
// end ; end ;
73044: LD_VAR 0 2
73048: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
73049: LD_INT 0
73051: PPUSH
73052: PPUSH
73053: PPUSH
// if not hack in hackTanks or not vehicles then
73054: LD_VAR 0 1
73058: PUSH
73059: LD_EXP 101
73063: IN
73064: NOT
73065: IFTRUE 73074
73067: PUSH
73068: LD_VAR 0 2
73072: NOT
73073: OR
73074: IFFALSE 73078
// exit ;
73076: GO 73353
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
73078: LD_ADDR_VAR 0 2
73082: PUSH
73083: LD_VAR 0 1
73087: PPUSH
73088: LD_VAR 0 2
73092: PPUSH
73093: LD_INT 1
73095: PPUSH
73096: LD_INT 1
73098: PPUSH
73099: CALL 15974 0 4
73103: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
73104: LD_ADDR_VAR 0 5
73108: PUSH
73109: LD_EXP 101
73113: PPUSH
73114: LD_VAR 0 1
73118: PPUSH
73119: CALL 15322 0 2
73123: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
73124: LD_EXP 102
73128: PUSH
73129: LD_VAR 0 5
73133: ARRAY
73134: PUSH
73135: LD_EXP 103
73139: LESS
73140: IFFALSE 73329
// begin for i := 1 to vehicles do
73142: LD_ADDR_VAR 0 4
73146: PUSH
73147: DOUBLE
73148: LD_INT 1
73150: DEC
73151: ST_TO_ADDR
73152: LD_VAR 0 2
73156: PUSH
73157: FOR_TO
73158: IFFALSE 73327
// begin if hackTanksCaptured [ index ] = hackLimit then
73160: LD_EXP 102
73164: PUSH
73165: LD_VAR 0 5
73169: ARRAY
73170: PUSH
73171: LD_EXP 103
73175: EQUAL
73176: IFFALSE 73180
// break ;
73178: GO 73327
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
73180: LD_ADDR_EXP 105
73184: PUSH
73185: LD_EXP 105
73189: PPUSH
73190: LD_VAR 0 5
73194: PPUSH
73195: LD_EXP 105
73199: PUSH
73200: LD_VAR 0 5
73204: ARRAY
73205: PUSH
73206: LD_INT 1
73208: PLUS
73209: PPUSH
73210: CALL_OW 1
73214: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
73215: LD_ADDR_EXP 102
73219: PUSH
73220: LD_EXP 102
73224: PPUSH
73225: LD_VAR 0 5
73229: PUSH
73230: LD_EXP 102
73234: PUSH
73235: LD_VAR 0 5
73239: ARRAY
73240: PUSH
73241: LD_INT 1
73243: PLUS
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PPUSH
73249: LD_VAR 0 2
73253: PUSH
73254: LD_VAR 0 4
73258: ARRAY
73259: PUSH
73260: LD_VAR 0 2
73264: PUSH
73265: LD_VAR 0 4
73269: ARRAY
73270: PPUSH
73271: CALL_OW 255
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PPUSH
73280: CALL 15539 0 3
73284: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
73285: LD_VAR 0 2
73289: PUSH
73290: LD_VAR 0 4
73294: ARRAY
73295: PPUSH
73296: LD_VAR 0 1
73300: PPUSH
73301: CALL_OW 255
73305: PPUSH
73306: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
73310: LD_VAR 0 2
73314: PUSH
73315: LD_VAR 0 4
73319: ARRAY
73320: PPUSH
73321: CALL_OW 141
// end ;
73325: GO 73157
73327: POP
73328: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73329: LD_VAR 0 1
73333: PPUSH
73334: LD_EXP 102
73338: PUSH
73339: LD_VAR 0 5
73343: ARRAY
73344: PUSH
73345: LD_INT 0
73347: PLUS
73348: PPUSH
73349: CALL_OW 505
// end ;
73353: LD_VAR 0 3
73357: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
73358: LD_INT 0
73360: PPUSH
73361: PPUSH
73362: PPUSH
73363: PPUSH
// if not hack in hackTanks then
73364: LD_VAR 0 1
73368: PUSH
73369: LD_EXP 101
73373: IN
73374: NOT
73375: IFFALSE 73379
// exit ;
73377: GO 73623
// index := GetElementIndex ( hackTanks , hack ) ;
73379: LD_ADDR_VAR 0 4
73383: PUSH
73384: LD_EXP 101
73388: PPUSH
73389: LD_VAR 0 1
73393: PPUSH
73394: CALL 15322 0 2
73398: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
73399: LD_ADDR_VAR 0 3
73403: PUSH
73404: DOUBLE
73405: LD_EXP 102
73409: PUSH
73410: LD_VAR 0 4
73414: ARRAY
73415: INC
73416: ST_TO_ADDR
73417: LD_INT 1
73419: PUSH
73420: FOR_DOWNTO
73421: IFFALSE 73597
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
73423: LD_ADDR_VAR 0 5
73427: PUSH
73428: LD_EXP 102
73432: PUSH
73433: LD_VAR 0 4
73437: ARRAY
73438: PUSH
73439: LD_VAR 0 3
73443: ARRAY
73444: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
73445: LD_VAR 0 5
73449: PUSH
73450: LD_INT 1
73452: ARRAY
73453: PPUSH
73454: CALL_OW 302
73458: NOT
73459: IFTRUE 73487
73461: PUSH
73462: LD_VAR 0 5
73466: PUSH
73467: LD_INT 1
73469: ARRAY
73470: PPUSH
73471: CALL_OW 255
73475: PUSH
73476: LD_VAR 0 1
73480: PPUSH
73481: CALL_OW 255
73485: NONEQUAL
73486: OR
73487: IFFALSE 73595
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
73489: LD_VAR 0 5
73493: PUSH
73494: LD_INT 1
73496: ARRAY
73497: PPUSH
73498: CALL_OW 305
73502: IFFALSE 73530
73504: PUSH
73505: LD_VAR 0 5
73509: PUSH
73510: LD_INT 1
73512: ARRAY
73513: PPUSH
73514: CALL_OW 255
73518: PUSH
73519: LD_VAR 0 1
73523: PPUSH
73524: CALL_OW 255
73528: EQUAL
73529: AND
73530: IFFALSE 73554
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
73532: LD_VAR 0 5
73536: PUSH
73537: LD_INT 1
73539: ARRAY
73540: PPUSH
73541: LD_VAR 0 5
73545: PUSH
73546: LD_INT 2
73548: ARRAY
73549: PPUSH
73550: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
73554: LD_ADDR_EXP 102
73558: PUSH
73559: LD_EXP 102
73563: PPUSH
73564: LD_VAR 0 4
73568: PPUSH
73569: LD_EXP 102
73573: PUSH
73574: LD_VAR 0 4
73578: ARRAY
73579: PPUSH
73580: LD_VAR 0 3
73584: PPUSH
73585: CALL_OW 3
73589: PPUSH
73590: CALL_OW 1
73594: ST_TO_ADDR
// end ; end ;
73595: GO 73420
73597: POP
73598: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
73599: LD_VAR 0 1
73603: PPUSH
73604: LD_EXP 102
73608: PUSH
73609: LD_VAR 0 4
73613: ARRAY
73614: PUSH
73615: LD_INT 0
73617: PLUS
73618: PPUSH
73619: CALL_OW 505
// end ;
73623: LD_VAR 0 2
73627: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
73628: LD_INT 0
73630: PPUSH
73631: PPUSH
73632: PPUSH
73633: PPUSH
// if not hack in hackTanks then
73634: LD_VAR 0 1
73638: PUSH
73639: LD_EXP 101
73643: IN
73644: NOT
73645: IFFALSE 73649
// exit ;
73647: GO 73734
// index := GetElementIndex ( hackTanks , hack ) ;
73649: LD_ADDR_VAR 0 5
73653: PUSH
73654: LD_EXP 101
73658: PPUSH
73659: LD_VAR 0 1
73663: PPUSH
73664: CALL 15322 0 2
73668: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
73669: LD_ADDR_VAR 0 4
73673: PUSH
73674: DOUBLE
73675: LD_INT 1
73677: DEC
73678: ST_TO_ADDR
73679: LD_EXP 102
73683: PUSH
73684: LD_VAR 0 5
73688: ARRAY
73689: PUSH
73690: FOR_TO
73691: IFFALSE 73732
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
73693: LD_EXP 102
73697: PUSH
73698: LD_VAR 0 5
73702: ARRAY
73703: PUSH
73704: LD_VAR 0 4
73708: ARRAY
73709: PUSH
73710: LD_INT 1
73712: ARRAY
73713: PUSH
73714: LD_VAR 0 2
73718: EQUAL
73719: IFFALSE 73730
// KillUnit ( vehicle ) ;
73721: LD_VAR 0 2
73725: PPUSH
73726: CALL_OW 66
73730: GO 73690
73732: POP
73733: POP
// end ;
73734: LD_VAR 0 3
73738: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
73739: LD_EXP 106
73743: NOT
73744: IFFALSE 73877
73746: GO 73748
73748: DISABLE
73749: LD_INT 0
73751: PPUSH
// begin initMiner := true ;
73752: LD_ADDR_EXP 106
73756: PUSH
73757: LD_INT 1
73759: ST_TO_ADDR
// minersList := [ ] ;
73760: LD_ADDR_EXP 107
73764: PUSH
73765: EMPTY
73766: ST_TO_ADDR
// minerMinesList := [ ] ;
73767: LD_ADDR_EXP 108
73771: PUSH
73772: EMPTY
73773: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
73774: LD_ADDR_EXP 109
73778: PUSH
73779: LD_INT 10
73781: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
73782: LD_ADDR_VAR 0 1
73786: PUSH
73787: LD_INT 34
73789: PUSH
73790: LD_INT 81
73792: PUSH
73793: EMPTY
73794: LIST
73795: LIST
73796: PPUSH
73797: CALL_OW 69
73801: PUSH
73802: FOR_IN
73803: IFFALSE 73875
// begin if not i in minersList then
73805: LD_VAR 0 1
73809: PUSH
73810: LD_EXP 107
73814: IN
73815: NOT
73816: IFFALSE 73873
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
73818: LD_ADDR_EXP 107
73822: PUSH
73823: LD_EXP 107
73827: PPUSH
73828: LD_EXP 107
73832: PUSH
73833: LD_INT 1
73835: PLUS
73836: PPUSH
73837: LD_VAR 0 1
73841: PPUSH
73842: CALL_OW 1
73846: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
73847: LD_ADDR_EXP 108
73851: PUSH
73852: LD_EXP 108
73856: PPUSH
73857: LD_EXP 108
73861: PUSH
73862: LD_INT 1
73864: PLUS
73865: PPUSH
73866: EMPTY
73867: PPUSH
73868: CALL_OW 1
73872: ST_TO_ADDR
// end end ;
73873: GO 73802
73875: POP
73876: POP
// end ;
73877: PPOPN 1
73879: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
73880: LD_EXP 106
73884: IFFALSE 73915
73886: PUSH
73887: LD_EXP 108
73891: PPUSH
73892: CALL 12621 0 1
73896: IFTRUE 73914
73898: PUSH
73899: LD_INT 34
73901: PUSH
73902: LD_INT 81
73904: PUSH
73905: EMPTY
73906: LIST
73907: LIST
73908: PPUSH
73909: CALL_OW 69
73913: OR
73914: AND
73915: IFFALSE 74435
73917: GO 73919
73919: DISABLE
73920: LD_INT 0
73922: PPUSH
73923: PPUSH
73924: PPUSH
73925: PPUSH
// begin enable ;
73926: ENABLE
// for i := minerMinesList downto 1 do
73927: LD_ADDR_VAR 0 1
73931: PUSH
73932: DOUBLE
73933: LD_EXP 108
73937: INC
73938: ST_TO_ADDR
73939: LD_INT 1
73941: PUSH
73942: FOR_DOWNTO
73943: IFFALSE 74433
// begin side := GetSide ( minersList [ i ] ) ;
73945: LD_ADDR_VAR 0 3
73949: PUSH
73950: LD_EXP 107
73954: PUSH
73955: LD_VAR 0 1
73959: ARRAY
73960: PPUSH
73961: CALL_OW 255
73965: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
73966: LD_EXP 107
73970: PUSH
73971: LD_VAR 0 1
73975: ARRAY
73976: PPUSH
73977: CALL_OW 300
73981: IFFALSE 74002
73983: PUSH
73984: LD_VAR 0 3
73988: PUSH
73989: LD_OWVAR 2
73993: PUSH
73994: LD_INT 9
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: IN
74001: AND
74002: IFFALSE 74035
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
74004: LD_EXP 107
74008: PUSH
74009: LD_VAR 0 1
74013: ARRAY
74014: PPUSH
74015: LD_EXP 108
74019: PUSH
74020: LD_VAR 0 1
74024: ARRAY
74025: PPUSH
74026: CALL 12621 0 1
74030: PPUSH
74031: CALL_OW 505
// if not minerMinesList [ i ] then
74035: LD_EXP 108
74039: PUSH
74040: LD_VAR 0 1
74044: ARRAY
74045: NOT
74046: IFFALSE 74050
// continue ;
74048: GO 73942
// for j := minerMinesList [ i ] downto 1 do
74050: LD_ADDR_VAR 0 2
74054: PUSH
74055: DOUBLE
74056: LD_EXP 108
74060: PUSH
74061: LD_VAR 0 1
74065: ARRAY
74066: INC
74067: ST_TO_ADDR
74068: LD_INT 1
74070: PUSH
74071: FOR_DOWNTO
74072: IFFALSE 74429
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
74074: LD_EXP 107
74078: PUSH
74079: LD_VAR 0 1
74083: ARRAY
74084: PPUSH
74085: CALL_OW 301
74089: IFTRUE 74109
74091: PUSH
74092: LD_EXP 107
74096: PUSH
74097: LD_VAR 0 1
74101: ARRAY
74102: PPUSH
74103: CALL_OW 305
74107: NOT
74108: OR
74109: IFFALSE 74200
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
74111: LD_EXP 108
74115: PUSH
74116: LD_VAR 0 1
74120: ARRAY
74121: PUSH
74122: LD_VAR 0 2
74126: ARRAY
74127: PUSH
74128: LD_INT 1
74130: ARRAY
74131: PPUSH
74132: LD_EXP 108
74136: PUSH
74137: LD_VAR 0 1
74141: ARRAY
74142: PUSH
74143: LD_VAR 0 2
74147: ARRAY
74148: PUSH
74149: LD_INT 2
74151: ARRAY
74152: PPUSH
74153: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74157: LD_ADDR_EXP 108
74161: PUSH
74162: LD_EXP 108
74166: PPUSH
74167: LD_VAR 0 1
74171: PPUSH
74172: LD_EXP 108
74176: PUSH
74177: LD_VAR 0 1
74181: ARRAY
74182: PPUSH
74183: LD_VAR 0 2
74187: PPUSH
74188: CALL_OW 3
74192: PPUSH
74193: CALL_OW 1
74197: ST_TO_ADDR
// continue ;
74198: GO 74071
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
74200: LD_ADDR_VAR 0 4
74204: PUSH
74205: LD_EXP 108
74209: PUSH
74210: LD_VAR 0 1
74214: ARRAY
74215: PUSH
74216: LD_VAR 0 2
74220: ARRAY
74221: PUSH
74222: LD_INT 1
74224: ARRAY
74225: PPUSH
74226: LD_EXP 108
74230: PUSH
74231: LD_VAR 0 1
74235: ARRAY
74236: PUSH
74237: LD_VAR 0 2
74241: ARRAY
74242: PUSH
74243: LD_INT 2
74245: ARRAY
74246: PPUSH
74247: CALL_OW 428
74251: ST_TO_ADDR
// if not tmp then
74252: LD_VAR 0 4
74256: NOT
74257: IFFALSE 74261
// continue ;
74259: GO 74071
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
74261: LD_VAR 0 4
74265: PUSH
74266: LD_INT 81
74268: PUSH
74269: LD_VAR 0 3
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PPUSH
74278: CALL_OW 69
74282: IN
74283: IFFALSE 74333
74285: PUSH
74286: LD_EXP 108
74290: PUSH
74291: LD_VAR 0 1
74295: ARRAY
74296: PUSH
74297: LD_VAR 0 2
74301: ARRAY
74302: PUSH
74303: LD_INT 1
74305: ARRAY
74306: PPUSH
74307: LD_EXP 108
74311: PUSH
74312: LD_VAR 0 1
74316: ARRAY
74317: PUSH
74318: LD_VAR 0 2
74322: ARRAY
74323: PUSH
74324: LD_INT 2
74326: ARRAY
74327: PPUSH
74328: CALL_OW 458
74332: AND
74333: IFFALSE 74427
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
74335: LD_EXP 108
74339: PUSH
74340: LD_VAR 0 1
74344: ARRAY
74345: PUSH
74346: LD_VAR 0 2
74350: ARRAY
74351: PUSH
74352: LD_INT 1
74354: ARRAY
74355: PPUSH
74356: LD_EXP 108
74360: PUSH
74361: LD_VAR 0 1
74365: ARRAY
74366: PUSH
74367: LD_VAR 0 2
74371: ARRAY
74372: PUSH
74373: LD_INT 2
74375: ARRAY
74376: PPUSH
74377: LD_VAR 0 3
74381: PPUSH
74382: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
74386: LD_ADDR_EXP 108
74390: PUSH
74391: LD_EXP 108
74395: PPUSH
74396: LD_VAR 0 1
74400: PPUSH
74401: LD_EXP 108
74405: PUSH
74406: LD_VAR 0 1
74410: ARRAY
74411: PPUSH
74412: LD_VAR 0 2
74416: PPUSH
74417: CALL_OW 3
74421: PPUSH
74422: CALL_OW 1
74426: ST_TO_ADDR
// end ; end ;
74427: GO 74071
74429: POP
74430: POP
// end ;
74431: GO 73942
74433: POP
74434: POP
// end ;
74435: PPOPN 4
74437: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
74438: LD_INT 0
74440: PPUSH
74441: PPUSH
74442: PPUSH
74443: PPUSH
// result := false ;
74444: LD_ADDR_VAR 0 4
74448: PUSH
74449: LD_INT 0
74451: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
74452: LD_VAR 0 1
74456: PPUSH
74457: CALL_OW 264
74461: PUSH
74462: LD_INT 81
74464: EQUAL
74465: NOT
74466: IFFALSE 74470
// exit ;
74468: GO 74840
// side := GetSide ( unit ) ;
74470: LD_ADDR_VAR 0 6
74474: PUSH
74475: LD_VAR 0 1
74479: PPUSH
74480: CALL_OW 255
74484: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
74485: LD_ADDR_VAR 0 5
74489: PUSH
74490: LD_EXP 107
74494: PPUSH
74495: LD_VAR 0 1
74499: PPUSH
74500: CALL 15322 0 2
74504: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
74505: LD_EXP 108
74509: PUSH
74510: LD_VAR 0 5
74514: ARRAY
74515: PUSH
74516: LD_EXP 109
74520: GREATEREQUAL
74521: IFFALSE 74525
// exit ;
74523: GO 74840
// ComMoveXY ( unit , x , y ) ;
74525: LD_VAR 0 1
74529: PPUSH
74530: LD_VAR 0 2
74534: PPUSH
74535: LD_VAR 0 3
74539: PPUSH
74540: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
74544: LD_INT 35
74546: PPUSH
74547: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
74551: LD_VAR 0 1
74555: PPUSH
74556: LD_VAR 0 2
74560: PPUSH
74561: LD_VAR 0 3
74565: PPUSH
74566: CALL 47378 0 3
74570: NOT
74571: IFFALSE 74584
74573: PUSH
74574: LD_VAR 0 1
74578: PPUSH
74579: CALL_OW 314
74583: AND
74584: IFFALSE 74588
// exit ;
74586: GO 74840
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
74588: LD_VAR 0 2
74592: PPUSH
74593: LD_VAR 0 3
74597: PPUSH
74598: CALL_OW 428
74602: PUSH
74603: LD_VAR 0 1
74607: EQUAL
74608: IFFALSE 74622
74610: PUSH
74611: LD_VAR 0 1
74615: PPUSH
74616: CALL_OW 314
74620: NOT
74621: AND
74622: IFFALSE 74544
// if MineAtPos ( x , y ) then
74624: LD_VAR 0 2
74628: PPUSH
74629: LD_VAR 0 3
74633: PPUSH
74634: CALL_OW 458
74638: IFFALSE 74642
// exit ;
74640: GO 74840
// if your_side = side then
74642: LD_OWVAR 2
74646: PUSH
74647: LD_VAR 0 6
74651: EQUAL
74652: IFFALSE 74671
// PlaySoundXY ( x , y , PlantMine ) ;
74654: LD_VAR 0 2
74658: PPUSH
74659: LD_VAR 0 3
74663: PPUSH
74664: LD_STRING PlantMine
74666: PPUSH
74667: CALL_OW 366
// repeat wait ( 1 ) ;
74671: LD_INT 1
74673: PPUSH
74674: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
74678: LD_VAR 0 2
74682: PPUSH
74683: LD_VAR 0 3
74687: PPUSH
74688: LD_VAR 0 6
74692: PPUSH
74693: LD_INT 0
74695: PPUSH
74696: CALL_OW 454
74700: IFFALSE 74671
// if MineAtPos ( x , y ) then
74702: LD_VAR 0 2
74706: PPUSH
74707: LD_VAR 0 3
74711: PPUSH
74712: CALL_OW 458
74716: IFFALSE 74832
// begin for i in minerMinesList [ index ] do
74718: LD_ADDR_VAR 0 7
74722: PUSH
74723: LD_EXP 108
74727: PUSH
74728: LD_VAR 0 5
74732: ARRAY
74733: PUSH
74734: FOR_IN
74735: IFFALSE 74777
// if i [ 1 ] = x and i [ 2 ] = y then
74737: LD_VAR 0 7
74741: PUSH
74742: LD_INT 1
74744: ARRAY
74745: PUSH
74746: LD_VAR 0 2
74750: EQUAL
74751: IFFALSE 74769
74753: PUSH
74754: LD_VAR 0 7
74758: PUSH
74759: LD_INT 2
74761: ARRAY
74762: PUSH
74763: LD_VAR 0 3
74767: EQUAL
74768: AND
74769: IFFALSE 74775
// exit ;
74771: POP
74772: POP
74773: GO 74840
74775: GO 74734
74777: POP
74778: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
74779: LD_ADDR_EXP 108
74783: PUSH
74784: LD_EXP 108
74788: PPUSH
74789: LD_VAR 0 5
74793: PUSH
74794: LD_EXP 108
74798: PUSH
74799: LD_VAR 0 5
74803: ARRAY
74804: PUSH
74805: LD_INT 1
74807: PLUS
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: PPUSH
74813: LD_VAR 0 2
74817: PUSH
74818: LD_VAR 0 3
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PPUSH
74827: CALL 15539 0 3
74831: ST_TO_ADDR
// end ; result := true ;
74832: LD_ADDR_VAR 0 4
74836: PUSH
74837: LD_INT 1
74839: ST_TO_ADDR
// end ;
74840: LD_VAR 0 4
74844: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
74845: LD_INT 0
74847: PPUSH
74848: PPUSH
74849: PPUSH
// if not unit in minersList then
74850: LD_VAR 0 1
74854: PUSH
74855: LD_EXP 107
74859: IN
74860: NOT
74861: IFFALSE 74865
// exit ;
74863: GO 75072
// index := GetElementIndex ( minersList , unit ) ;
74865: LD_ADDR_VAR 0 6
74869: PUSH
74870: LD_EXP 107
74874: PPUSH
74875: LD_VAR 0 1
74879: PPUSH
74880: CALL 15322 0 2
74884: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
74885: LD_ADDR_VAR 0 5
74889: PUSH
74890: DOUBLE
74891: LD_EXP 108
74895: PUSH
74896: LD_VAR 0 6
74900: ARRAY
74901: INC
74902: ST_TO_ADDR
74903: LD_INT 1
74905: PUSH
74906: FOR_DOWNTO
74907: IFFALSE 75070
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
74909: LD_EXP 108
74913: PUSH
74914: LD_VAR 0 6
74918: ARRAY
74919: PUSH
74920: LD_VAR 0 5
74924: ARRAY
74925: PUSH
74926: LD_INT 1
74928: ARRAY
74929: PPUSH
74930: LD_EXP 108
74934: PUSH
74935: LD_VAR 0 6
74939: ARRAY
74940: PUSH
74941: LD_VAR 0 5
74945: ARRAY
74946: PUSH
74947: LD_INT 2
74949: ARRAY
74950: PPUSH
74951: LD_VAR 0 2
74955: PPUSH
74956: LD_VAR 0 3
74960: PPUSH
74961: CALL_OW 298
74965: PUSH
74966: LD_INT 6
74968: LESS
74969: IFFALSE 75068
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
74971: LD_EXP 108
74975: PUSH
74976: LD_VAR 0 6
74980: ARRAY
74981: PUSH
74982: LD_VAR 0 5
74986: ARRAY
74987: PUSH
74988: LD_INT 1
74990: ARRAY
74991: PPUSH
74992: LD_EXP 108
74996: PUSH
74997: LD_VAR 0 6
75001: ARRAY
75002: PUSH
75003: LD_VAR 0 5
75007: ARRAY
75008: PUSH
75009: LD_INT 2
75011: ARRAY
75012: PPUSH
75013: LD_VAR 0 1
75017: PPUSH
75018: CALL_OW 255
75022: PPUSH
75023: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
75027: LD_ADDR_EXP 108
75031: PUSH
75032: LD_EXP 108
75036: PPUSH
75037: LD_VAR 0 6
75041: PPUSH
75042: LD_EXP 108
75046: PUSH
75047: LD_VAR 0 6
75051: ARRAY
75052: PPUSH
75053: LD_VAR 0 5
75057: PPUSH
75058: CALL_OW 3
75062: PPUSH
75063: CALL_OW 1
75067: ST_TO_ADDR
// end ; end ;
75068: GO 74906
75070: POP
75071: POP
// end ;
75072: LD_VAR 0 4
75076: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
75077: LD_INT 0
75079: PPUSH
75080: PPUSH
75081: PPUSH
75082: PPUSH
75083: PPUSH
75084: PPUSH
75085: PPUSH
75086: PPUSH
75087: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
75088: LD_VAR 0 1
75092: PPUSH
75093: CALL_OW 264
75097: PUSH
75098: LD_INT 81
75100: EQUAL
75101: NOT
75102: IFTRUE 75117
75104: PUSH
75105: LD_VAR 0 1
75109: PUSH
75110: LD_EXP 107
75114: IN
75115: NOT
75116: OR
75117: IFFALSE 75121
// exit ;
75119: GO 75447
// index := GetElementIndex ( minersList , unit ) ;
75121: LD_ADDR_VAR 0 6
75125: PUSH
75126: LD_EXP 107
75130: PPUSH
75131: LD_VAR 0 1
75135: PPUSH
75136: CALL 15322 0 2
75140: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
75141: LD_ADDR_VAR 0 8
75145: PUSH
75146: LD_EXP 109
75150: PUSH
75151: LD_EXP 108
75155: PUSH
75156: LD_VAR 0 6
75160: ARRAY
75161: MINUS
75162: ST_TO_ADDR
// if not minesFreeAmount then
75163: LD_VAR 0 8
75167: NOT
75168: IFFALSE 75172
// exit ;
75170: GO 75447
// tmp := [ ] ;
75172: LD_ADDR_VAR 0 7
75176: PUSH
75177: EMPTY
75178: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
75179: LD_ADDR_VAR 0 5
75183: PUSH
75184: DOUBLE
75185: LD_INT 1
75187: DEC
75188: ST_TO_ADDR
75189: LD_VAR 0 8
75193: PUSH
75194: FOR_TO
75195: IFFALSE 75394
// begin _d := rand ( 0 , 5 ) ;
75197: LD_ADDR_VAR 0 11
75201: PUSH
75202: LD_INT 0
75204: PPUSH
75205: LD_INT 5
75207: PPUSH
75208: CALL_OW 12
75212: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
75213: LD_ADDR_VAR 0 12
75217: PUSH
75218: LD_INT 2
75220: PPUSH
75221: LD_INT 6
75223: PPUSH
75224: CALL_OW 12
75228: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
75229: LD_ADDR_VAR 0 9
75233: PUSH
75234: LD_VAR 0 2
75238: PPUSH
75239: LD_VAR 0 11
75243: PPUSH
75244: LD_VAR 0 12
75248: PPUSH
75249: CALL_OW 272
75253: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
75254: LD_ADDR_VAR 0 10
75258: PUSH
75259: LD_VAR 0 3
75263: PPUSH
75264: LD_VAR 0 11
75268: PPUSH
75269: LD_VAR 0 12
75273: PPUSH
75274: CALL_OW 273
75278: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
75279: LD_VAR 0 9
75283: PPUSH
75284: LD_VAR 0 10
75288: PPUSH
75289: CALL_OW 488
75293: IFFALSE 75317
75295: PUSH
75296: LD_VAR 0 9
75300: PUSH
75301: LD_VAR 0 10
75305: PUSH
75306: EMPTY
75307: LIST
75308: LIST
75309: PUSH
75310: LD_VAR 0 7
75314: IN
75315: NOT
75316: AND
75317: IFFALSE 75336
75319: PUSH
75320: LD_VAR 0 9
75324: PPUSH
75325: LD_VAR 0 10
75329: PPUSH
75330: CALL_OW 458
75334: NOT
75335: AND
75336: IFFALSE 75378
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
75338: LD_ADDR_VAR 0 7
75342: PUSH
75343: LD_VAR 0 7
75347: PPUSH
75348: LD_VAR 0 7
75352: PUSH
75353: LD_INT 1
75355: PLUS
75356: PPUSH
75357: LD_VAR 0 9
75361: PUSH
75362: LD_VAR 0 10
75366: PUSH
75367: EMPTY
75368: LIST
75369: LIST
75370: PPUSH
75371: CALL_OW 1
75375: ST_TO_ADDR
75376: GO 75392
// i := i - 1 ;
75378: LD_ADDR_VAR 0 5
75382: PUSH
75383: LD_VAR 0 5
75387: PUSH
75388: LD_INT 1
75390: MINUS
75391: ST_TO_ADDR
// end ;
75392: GO 75194
75394: POP
75395: POP
// for i in tmp do
75396: LD_ADDR_VAR 0 5
75400: PUSH
75401: LD_VAR 0 7
75405: PUSH
75406: FOR_IN
75407: IFFALSE 75445
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
75409: LD_VAR 0 1
75413: PPUSH
75414: LD_VAR 0 5
75418: PUSH
75419: LD_INT 1
75421: ARRAY
75422: PPUSH
75423: LD_VAR 0 5
75427: PUSH
75428: LD_INT 2
75430: ARRAY
75431: PPUSH
75432: CALL 74438 0 3
75436: NOT
75437: IFFALSE 75443
// exit ;
75439: POP
75440: POP
75441: GO 75447
75443: GO 75406
75445: POP
75446: POP
// end ;
75447: LD_VAR 0 4
75451: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
75452: LD_INT 0
75454: PPUSH
75455: PPUSH
75456: PPUSH
75457: PPUSH
75458: PPUSH
75459: PPUSH
75460: PPUSH
75461: PPUSH
75462: PPUSH
// if GetClass ( unit ) <> class_sniper then
75463: LD_VAR 0 1
75467: PPUSH
75468: CALL_OW 257
75472: PUSH
75473: LD_INT 5
75475: NONEQUAL
75476: IFFALSE 75480
// exit ;
75478: GO 75950
// dist := 8 ;
75480: LD_ADDR_VAR 0 5
75484: PUSH
75485: LD_INT 8
75487: ST_TO_ADDR
// viewRange := 12 ;
75488: LD_ADDR_VAR 0 8
75492: PUSH
75493: LD_INT 12
75495: ST_TO_ADDR
// side := GetSide ( unit ) ;
75496: LD_ADDR_VAR 0 6
75500: PUSH
75501: LD_VAR 0 1
75505: PPUSH
75506: CALL_OW 255
75510: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
75511: LD_INT 61
75513: PPUSH
75514: LD_VAR 0 6
75518: PPUSH
75519: CALL_OW 321
75523: PUSH
75524: LD_INT 2
75526: EQUAL
75527: IFFALSE 75537
// viewRange := 16 ;
75529: LD_ADDR_VAR 0 8
75533: PUSH
75534: LD_INT 16
75536: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
75537: LD_VAR 0 1
75541: PPUSH
75542: LD_VAR 0 2
75546: PPUSH
75547: LD_VAR 0 3
75551: PPUSH
75552: CALL_OW 297
75556: PUSH
75557: LD_VAR 0 5
75561: GREATER
75562: IFFALSE 75641
// begin ComMoveXY ( unit , x , y ) ;
75564: LD_VAR 0 1
75568: PPUSH
75569: LD_VAR 0 2
75573: PPUSH
75574: LD_VAR 0 3
75578: PPUSH
75579: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
75583: LD_INT 35
75585: PPUSH
75586: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
75590: LD_VAR 0 1
75594: PPUSH
75595: LD_VAR 0 2
75599: PPUSH
75600: LD_VAR 0 3
75604: PPUSH
75605: CALL 47378 0 3
75609: NOT
75610: IFFALSE 75614
// exit ;
75612: GO 75950
// until GetDistUnitXY ( unit , x , y ) < dist ;
75614: LD_VAR 0 1
75618: PPUSH
75619: LD_VAR 0 2
75623: PPUSH
75624: LD_VAR 0 3
75628: PPUSH
75629: CALL_OW 297
75633: PUSH
75634: LD_VAR 0 5
75638: LESS
75639: IFFALSE 75583
// end ; ComTurnXY ( unit , x , y ) ;
75641: LD_VAR 0 1
75645: PPUSH
75646: LD_VAR 0 2
75650: PPUSH
75651: LD_VAR 0 3
75655: PPUSH
75656: CALL_OW 118
// repeat if Multiplayer then
75660: LD_OWVAR 4
75664: IFFALSE 75675
// wait ( 35 ) else
75666: LD_INT 35
75668: PPUSH
75669: CALL_OW 67
75673: GO 75682
// wait ( 5 ) ;
75675: LD_INT 5
75677: PPUSH
75678: CALL_OW 67
// _d := GetDir ( unit ) ;
75682: LD_ADDR_VAR 0 11
75686: PUSH
75687: LD_VAR 0 1
75691: PPUSH
75692: CALL_OW 254
75696: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
75697: LD_ADDR_VAR 0 7
75701: PUSH
75702: LD_VAR 0 1
75706: PPUSH
75707: CALL_OW 250
75711: PPUSH
75712: LD_VAR 0 1
75716: PPUSH
75717: CALL_OW 251
75721: PPUSH
75722: LD_VAR 0 2
75726: PPUSH
75727: LD_VAR 0 3
75731: PPUSH
75732: CALL 50014 0 4
75736: ST_TO_ADDR
// until dir = _d ;
75737: LD_VAR 0 7
75741: PUSH
75742: LD_VAR 0 11
75746: EQUAL
75747: IFFALSE 75660
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
75749: LD_ADDR_VAR 0 9
75753: PUSH
75754: LD_VAR 0 1
75758: PPUSH
75759: CALL_OW 250
75763: PPUSH
75764: LD_VAR 0 7
75768: PPUSH
75769: LD_VAR 0 5
75773: PPUSH
75774: CALL_OW 272
75778: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
75779: LD_ADDR_VAR 0 10
75783: PUSH
75784: LD_VAR 0 1
75788: PPUSH
75789: CALL_OW 251
75793: PPUSH
75794: LD_VAR 0 7
75798: PPUSH
75799: LD_VAR 0 5
75803: PPUSH
75804: CALL_OW 273
75808: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
75809: LD_VAR 0 9
75813: PPUSH
75814: LD_VAR 0 10
75818: PPUSH
75819: CALL_OW 488
75823: NOT
75824: IFFALSE 75828
// exit ;
75826: GO 75950
// ComAnimCustom ( unit , 1 ) ;
75828: LD_VAR 0 1
75832: PPUSH
75833: LD_INT 1
75835: PPUSH
75836: CALL_OW 592
// p := 0 ;
75840: LD_ADDR_VAR 0 12
75844: PUSH
75845: LD_INT 0
75847: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
75848: LD_VAR 0 9
75852: PPUSH
75853: LD_VAR 0 10
75857: PPUSH
75858: LD_VAR 0 6
75862: PPUSH
75863: LD_VAR 0 8
75867: PPUSH
75868: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
75872: LD_INT 35
75874: PPUSH
75875: CALL_OW 67
// p := Inc ( p ) ;
75879: LD_ADDR_VAR 0 12
75883: PUSH
75884: LD_VAR 0 12
75888: PPUSH
75889: CALL 49970 0 1
75893: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
75894: LD_VAR 0 12
75898: PUSH
75899: LD_INT 3
75901: EQUAL
75902: IFTRUE 75916
75904: PUSH
75905: LD_VAR 0 1
75909: PPUSH
75910: CALL_OW 302
75914: NOT
75915: OR
75916: IFTRUE 75929
75918: PUSH
75919: LD_VAR 0 1
75923: PPUSH
75924: CALL_OW 301
75928: OR
75929: IFFALSE 75872
// RemoveSeeing ( _x , _y , side ) ;
75931: LD_VAR 0 9
75935: PPUSH
75936: LD_VAR 0 10
75940: PPUSH
75941: LD_VAR 0 6
75945: PPUSH
75946: CALL_OW 331
// end ;
75950: LD_VAR 0 4
75954: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
75955: LD_INT 0
75957: PPUSH
75958: PPUSH
75959: PPUSH
75960: PPUSH
75961: PPUSH
75962: PPUSH
75963: PPUSH
75964: PPUSH
75965: PPUSH
75966: PPUSH
75967: PPUSH
// if not unit then
75968: LD_VAR 0 1
75972: NOT
75973: IFFALSE 75977
// exit ;
75975: GO 76248
// side := GetSide ( unit ) ;
75977: LD_ADDR_VAR 0 3
75981: PUSH
75982: LD_VAR 0 1
75986: PPUSH
75987: CALL_OW 255
75991: ST_TO_ADDR
// x := GetX ( unit ) ;
75992: LD_ADDR_VAR 0 5
75996: PUSH
75997: LD_VAR 0 1
76001: PPUSH
76002: CALL_OW 250
76006: ST_TO_ADDR
// y := GetY ( unit ) ;
76007: LD_ADDR_VAR 0 6
76011: PUSH
76012: LD_VAR 0 1
76016: PPUSH
76017: CALL_OW 251
76021: ST_TO_ADDR
// r := 8 ;
76022: LD_ADDR_VAR 0 4
76026: PUSH
76027: LD_INT 8
76029: ST_TO_ADDR
// if x - r < 0 then
76030: LD_VAR 0 5
76034: PUSH
76035: LD_VAR 0 4
76039: MINUS
76040: PUSH
76041: LD_INT 0
76043: LESS
76044: IFFALSE 76056
// min_x := 0 else
76046: LD_ADDR_VAR 0 7
76050: PUSH
76051: LD_INT 0
76053: ST_TO_ADDR
76054: GO 76072
// min_x := x - r ;
76056: LD_ADDR_VAR 0 7
76060: PUSH
76061: LD_VAR 0 5
76065: PUSH
76066: LD_VAR 0 4
76070: MINUS
76071: ST_TO_ADDR
// if y - r < 0 then
76072: LD_VAR 0 6
76076: PUSH
76077: LD_VAR 0 4
76081: MINUS
76082: PUSH
76083: LD_INT 0
76085: LESS
76086: IFFALSE 76098
// min_y := 0 else
76088: LD_ADDR_VAR 0 8
76092: PUSH
76093: LD_INT 0
76095: ST_TO_ADDR
76096: GO 76114
// min_y := y - r ;
76098: LD_ADDR_VAR 0 8
76102: PUSH
76103: LD_VAR 0 6
76107: PUSH
76108: LD_VAR 0 4
76112: MINUS
76113: ST_TO_ADDR
// max_x := x + r ;
76114: LD_ADDR_VAR 0 9
76118: PUSH
76119: LD_VAR 0 5
76123: PUSH
76124: LD_VAR 0 4
76128: PLUS
76129: ST_TO_ADDR
// max_y := y + r ;
76130: LD_ADDR_VAR 0 10
76134: PUSH
76135: LD_VAR 0 6
76139: PUSH
76140: LD_VAR 0 4
76144: PLUS
76145: ST_TO_ADDR
// for _x = min_x to max_x do
76146: LD_ADDR_VAR 0 11
76150: PUSH
76151: DOUBLE
76152: LD_VAR 0 7
76156: DEC
76157: ST_TO_ADDR
76158: LD_VAR 0 9
76162: PUSH
76163: FOR_TO
76164: IFFALSE 76246
// for _y = min_y to max_y do
76166: LD_ADDR_VAR 0 12
76170: PUSH
76171: DOUBLE
76172: LD_VAR 0 8
76176: DEC
76177: ST_TO_ADDR
76178: LD_VAR 0 10
76182: PUSH
76183: FOR_TO
76184: IFFALSE 76242
// begin if not ValidHex ( _x , _y ) then
76186: LD_VAR 0 11
76190: PPUSH
76191: LD_VAR 0 12
76195: PPUSH
76196: CALL_OW 488
76200: NOT
76201: IFFALSE 76205
// continue ;
76203: GO 76183
// if MineAtPos ( _x , _y ) then
76205: LD_VAR 0 11
76209: PPUSH
76210: LD_VAR 0 12
76214: PPUSH
76215: CALL_OW 458
76219: IFFALSE 76240
// ViewMineAtPos ( _x , _y , side ) ;
76221: LD_VAR 0 11
76225: PPUSH
76226: LD_VAR 0 12
76230: PPUSH
76231: LD_VAR 0 3
76235: PPUSH
76236: CALL_OW 457
// end ;
76240: GO 76183
76242: POP
76243: POP
76244: GO 76163
76246: POP
76247: POP
// end ;
76248: LD_VAR 0 2
76252: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
76253: LD_INT 0
76255: PPUSH
76256: PPUSH
76257: PPUSH
76258: PPUSH
76259: PPUSH
76260: PPUSH
76261: PPUSH
// if not units then
76262: LD_VAR 0 1
76266: NOT
76267: IFFALSE 76271
// exit ;
76269: GO 76735
// scaners := [ ] ;
76271: LD_ADDR_VAR 0 6
76275: PUSH
76276: EMPTY
76277: ST_TO_ADDR
// for i in units do
76278: LD_ADDR_VAR 0 3
76282: PUSH
76283: LD_VAR 0 1
76287: PUSH
76288: FOR_IN
76289: IFFALSE 76446
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
76291: LD_VAR 0 3
76295: PPUSH
76296: CALL_OW 264
76300: PUSH
76301: LD_INT 11
76303: NONEQUAL
76304: IFTRUE 76318
76306: PUSH
76307: LD_VAR 0 3
76311: PPUSH
76312: CALL_OW 302
76316: NOT
76317: OR
76318: IFTRUE 76335
76320: PUSH
76321: LD_VAR 0 3
76325: PPUSH
76326: CALL_OW 110
76330: PUSH
76331: LD_INT 502
76333: EQUAL
76334: OR
76335: IFFALSE 76339
// continue ;
76337: GO 76288
// ComStop ( i ) ;
76339: LD_VAR 0 3
76343: PPUSH
76344: CALL_OW 141
// x := GetX ( i ) ;
76348: LD_ADDR_VAR 0 4
76352: PUSH
76353: LD_VAR 0 3
76357: PPUSH
76358: CALL_OW 250
76362: ST_TO_ADDR
// y := GetY ( i ) ;
76363: LD_ADDR_VAR 0 5
76367: PUSH
76368: LD_VAR 0 3
76372: PPUSH
76373: CALL_OW 251
76377: ST_TO_ADDR
// if GetSide ( i ) = your_side then
76378: LD_VAR 0 3
76382: PPUSH
76383: CALL_OW 255
76387: PUSH
76388: LD_OWVAR 2
76392: EQUAL
76393: IFFALSE 76412
// PlaySoundXY ( x , y , mineDetector ) ;
76395: LD_VAR 0 4
76399: PPUSH
76400: LD_VAR 0 5
76404: PPUSH
76405: LD_STRING mineDetector
76407: PPUSH
76408: CALL_OW 366
// scaners := Join ( scaners , i ) ;
76412: LD_ADDR_VAR 0 6
76416: PUSH
76417: LD_VAR 0 6
76421: PPUSH
76422: LD_VAR 0 3
76426: PPUSH
76427: CALL 48597 0 2
76431: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
76432: LD_VAR 0 3
76436: PPUSH
76437: LD_INT 502
76439: PPUSH
76440: CALL_OW 109
// end ;
76444: GO 76288
76446: POP
76447: POP
// if not scaners then
76448: LD_VAR 0 6
76452: NOT
76453: IFFALSE 76457
// exit ;
76455: GO 76735
// wait ( 3 ) ;
76457: LD_INT 3
76459: PPUSH
76460: CALL_OW 67
// timer := 6 ;
76464: LD_ADDR_VAR 0 7
76468: PUSH
76469: LD_INT 6
76471: ST_TO_ADDR
// repeat for i in scaners do
76472: LD_ADDR_VAR 0 3
76476: PUSH
76477: LD_VAR 0 6
76481: PUSH
76482: FOR_IN
76483: IFFALSE 76633
// begin side := GetSide ( i ) ;
76485: LD_ADDR_VAR 0 8
76489: PUSH
76490: LD_VAR 0 3
76494: PPUSH
76495: CALL_OW 255
76499: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
76500: LD_VAR 0 3
76504: PPUSH
76505: CALL_OW 302
76509: NOT
76510: IFTRUE 76523
76512: PUSH
76513: LD_VAR 0 3
76517: PPUSH
76518: CALL_OW 314
76522: OR
76523: IFTRUE 76554
76525: PUSH
76526: LD_VAR 0 3
76530: PPUSH
76531: CALL_OW 263
76535: PUSH
76536: LD_INT 1
76538: EQUAL
76539: IFFALSE 76553
76541: PUSH
76542: LD_VAR 0 3
76546: PPUSH
76547: CALL_OW 311
76551: NOT
76552: AND
76553: OR
76554: IFFALSE 76598
// begin SetUnitDisplayNumber ( i , 0 ) ;
76556: LD_VAR 0 3
76560: PPUSH
76561: LD_INT 0
76563: PPUSH
76564: CALL_OW 505
// SetTag ( i , 0 ) ;
76568: LD_VAR 0 3
76572: PPUSH
76573: LD_INT 0
76575: PPUSH
76576: CALL_OW 109
// scaners := scaners diff i ;
76580: LD_ADDR_VAR 0 6
76584: PUSH
76585: LD_VAR 0 6
76589: PUSH
76590: LD_VAR 0 3
76594: DIFF
76595: ST_TO_ADDR
// continue ;
76596: GO 76482
// end ; if side in [ your_side , 9 ] then
76598: LD_VAR 0 8
76602: PUSH
76603: LD_OWVAR 2
76607: PUSH
76608: LD_INT 9
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: IN
76615: IFFALSE 76631
// SetUnitDisplayNumber ( i , timer ) ;
76617: LD_VAR 0 3
76621: PPUSH
76622: LD_VAR 0 7
76626: PPUSH
76627: CALL_OW 505
// end ;
76631: GO 76482
76633: POP
76634: POP
// if not scaners then
76635: LD_VAR 0 6
76639: NOT
76640: IFFALSE 76644
// exit ;
76642: GO 76735
// timer := Dec ( timer ) ;
76644: LD_ADDR_VAR 0 7
76648: PUSH
76649: LD_VAR 0 7
76653: PPUSH
76654: CALL 49992 0 1
76658: ST_TO_ADDR
// wait ( 0 0$1 ) ;
76659: LD_INT 35
76661: PPUSH
76662: CALL_OW 67
// until timer = 0 ;
76666: LD_VAR 0 7
76670: PUSH
76671: LD_INT 0
76673: EQUAL
76674: IFFALSE 76472
// if not scaners then
76676: LD_VAR 0 6
76680: NOT
76681: IFFALSE 76685
// exit ;
76683: GO 76735
// for i in scaners do
76685: LD_ADDR_VAR 0 3
76689: PUSH
76690: LD_VAR 0 6
76694: PUSH
76695: FOR_IN
76696: IFFALSE 76733
// begin SetUnitDisplayNumber ( i , 0 ) ;
76698: LD_VAR 0 3
76702: PPUSH
76703: LD_INT 0
76705: PPUSH
76706: CALL_OW 505
// SetTag ( i , 0 ) ;
76710: LD_VAR 0 3
76714: PPUSH
76715: LD_INT 0
76717: PPUSH
76718: CALL_OW 109
// RevealDetectorMine ( i ) ;
76722: LD_VAR 0 3
76726: PPUSH
76727: CALL 75955 0 1
// end ;
76731: GO 76695
76733: POP
76734: POP
// end ;
76735: LD_VAR 0 2
76739: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
76740: LD_INT 0
76742: PPUSH
// if p1 = mine_detector_mode then
76743: LD_VAR 0 2
76747: PUSH
76748: LD_INT 103
76750: EQUAL
76751: IFFALSE 76762
// DetectMine ( units ) ;
76753: LD_VAR 0 1
76757: PPUSH
76758: CALL 76253 0 1
// end ;
76762: LD_VAR 0 7
76766: RET
