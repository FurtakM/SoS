// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// RandomizeAll ;
   8: CALL_OW 11
// InGameOn ;
  12: CALL_OW 8
// InitMapConfig ;
  16: CALL 264 0 0
// PrepareNature ;
  20: CALL 9218 0 0
// PrepareRussian ;
  24: CALL 8711 0 0
// PrepareAmericans ;
  28: CALL 8284 0 0
// gladstoneStatus = 1 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 1
  39: ST_TO_ADDR
// johannaStatus = 1 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 1
  47: ST_TO_ADDR
// introEnd = false ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 0
  55: ST_TO_ADDR
// apemansContact = false ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 0
  63: ST_TO_ADDR
// attackedByApeman = false ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 0
  71: ST_TO_ADDR
// spotWaterfall = false ;
  72: LD_ADDR_EXP 6
  76: PUSH
  77: LD_INT 0
  79: ST_TO_ADDR
// gnyevkoSaved = false ;
  80: LD_ADDR_EXP 10
  84: PUSH
  85: LD_INT 0
  87: ST_TO_ADDR
// meetPokryshkin = false ;
  88: LD_ADDR_EXP 12
  92: PUSH
  93: LD_INT 0
  95: ST_TO_ADDR
// goToHill = false ;
  96: LD_ADDR_EXP 13
 100: PUSH
 101: LD_INT 0
 103: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 104: LD_ADDR_EXP 11
 108: PUSH
 109: LD_INT 0
 111: ST_TO_ADDR
// traitor = false ;
 112: LD_ADDR_EXP 16
 116: PUSH
 117: LD_INT 0
 119: ST_TO_ADDR
// gladstoneEscape = false ;
 120: LD_ADDR_EXP 17
 124: PUSH
 125: LD_INT 0
 127: ST_TO_ADDR
// JohannaEscape = false ;
 128: LD_ADDR_EXP 18
 132: PUSH
 133: LD_INT 0
 135: ST_TO_ADDR
// jelenaSaved = false ;
 136: LD_ADDR_EXP 19
 140: PUSH
 141: LD_INT 0
 143: ST_TO_ADDR
// belkovWaitForGorky = false ;
 144: LD_ADDR_EXP 14
 148: PUSH
 149: LD_INT 0
 151: ST_TO_ADDR
// evacuationAvailable = false ;
 152: LD_ADDR_EXP 20
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// lostComradesCounter = 0 ;
 160: LD_ADDR_EXP 21
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 168: LD_ADDR_EXP 9
 172: PUSH
 173: LD_INT 999
 175: PUSH
 176: LD_INT 999
 178: PUSH
 179: EMPTY
 180: LIST
 181: LIST
 182: ST_TO_ADDR
// apemanWithRadio = FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 183: LD_ADDR_EXP 8
 187: PUSH
 188: LD_INT 22
 190: PUSH
 191: LD_INT 0
 193: PUSH
 194: EMPTY
 195: LIST
 196: LIST
 197: PUSH
 198: LD_INT 25
 200: PUSH
 201: LD_INT 12
 203: PUSH
 204: EMPTY
 205: LIST
 206: LIST
 207: PUSH
 208: EMPTY
 209: LIST
 210: LIST
 211: PPUSH
 212: CALL_OW 69
 216: PUSH
 217: LD_INT 1
 219: PPUSH
 220: LD_INT 22
 222: PUSH
 223: LD_INT 0
 225: PUSH
 226: EMPTY
 227: LIST
 228: LIST
 229: PUSH
 230: LD_INT 25
 232: PUSH
 233: LD_INT 12
 235: PUSH
 236: EMPTY
 237: LIST
 238: LIST
 239: PUSH
 240: EMPTY
 241: LIST
 242: LIST
 243: PPUSH
 244: CALL_OW 69
 248: PPUSH
 249: CALL_OW 12
 253: ARRAY
 254: ST_TO_ADDR
// MissionIntro ;
 255: CALL 746 0 0
// end ; end_of_file
 259: LD_VAR 0 1
 263: RET
// export function InitMapConfig ; begin
 264: LD_INT 0
 266: PPUSH
// BaseMapConfig ;
 267: CALL 280 0 0
// MissionMapConfig ;
 271: CALL 366 0 0
// end ;
 275: LD_VAR 0 1
 279: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 280: LD_INT 0
 282: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 283: LD_ADDR_EXP 22
 287: PUSH
 288: LD_INT 5
 290: PUSH
 291: LD_INT 4
 293: PUSH
 294: LD_INT 2
 296: PUSH
 297: LD_INT 2
 299: PUSH
 300: EMPTY
 301: LIST
 302: LIST
 303: LIST
 304: LIST
 305: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 306: LD_ADDR_EXP 23
 310: PUSH
 311: LD_INT 2
 313: PUSH
 314: LD_INT 2
 316: PUSH
 317: LD_INT 2
 319: PUSH
 320: LD_INT 2
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: LIST
 327: LIST
 328: ST_TO_ADDR
// animalsAgression = 0 ;
 329: LD_ADDR_EXP 24
 333: PUSH
 334: LD_INT 0
 336: ST_TO_ADDR
// debugMode = 0 ;
 337: LD_ADDR_EXP 27
 341: PUSH
 342: LD_INT 0
 344: ST_TO_ADDR
// missionPrefix = 01_ ;
 345: LD_ADDR_EXP 25
 349: PUSH
 350: LD_STRING 01_
 352: ST_TO_ADDR
// previousMissionPrefix =  ;
 353: LD_ADDR_EXP 26
 357: PUSH
 358: LD_STRING 
 360: ST_TO_ADDR
// end ;
 361: LD_VAR 0 1
 365: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions ; function MissionMapConfig ; begin
 366: LD_INT 0
 368: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 369: LD_ADDR_EXP 28
 373: PUSH
 374: LD_INT 800
 376: PUSH
 377: LD_INT 900
 379: PUSH
 380: LD_INT 950
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: LIST
 387: PUSH
 388: LD_OWVAR 67
 392: ARRAY
 393: ST_TO_ADDR
// apeAgression = rand ( - 5 , 5 ) * Difficulty ;
 394: LD_ADDR_EXP 29
 398: PUSH
 399: LD_INT 5
 401: NEG
 402: PPUSH
 403: LD_INT 5
 405: PPUSH
 406: CALL_OW 12
 410: PUSH
 411: LD_OWVAR 67
 415: MUL
 416: ST_TO_ADDR
// amApeAmount = [ 3 , 4 , 5 ] [ Difficulty ] ;
 417: LD_ADDR_EXP 30
 421: PUSH
 422: LD_INT 3
 424: PUSH
 425: LD_INT 4
 427: PUSH
 428: LD_INT 5
 430: PUSH
 431: EMPTY
 432: LIST
 433: LIST
 434: LIST
 435: PUSH
 436: LD_OWVAR 67
 440: ARRAY
 441: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 442: LD_ADDR_EXP 31
 446: PUSH
 447: LD_INT 0
 449: PUSH
 450: LD_INT 1
 452: PUSH
 453: LD_INT 2
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: LIST
 460: PUSH
 461: LD_OWVAR 67
 465: ARRAY
 466: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 467: LD_ADDR_EXP 32
 471: PUSH
 472: LD_INT 78
 474: PUSH
 475: LD_INT 87
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 15 , 7 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 482: LD_ADDR_EXP 33
 486: PUSH
 487: LD_INT 15
 489: PUSH
 490: LD_INT 7
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PUSH
 497: LD_INT 99
 499: PUSH
 500: LD_INT 7
 502: PUSH
 503: EMPTY
 504: LIST
 505: LIST
 506: PUSH
 507: LD_INT 131
 509: PUSH
 510: LD_INT 81
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: PUSH
 517: EMPTY
 518: LIST
 519: LIST
 520: LIST
 521: ST_TO_ADDR
// end ;
 522: LD_VAR 0 1
 526: RET
// every 0 0$1 trigger debugMode do var i ;
 527: LD_EXP 27
 531: IFFALSE 743
 533: GO 535
 535: DISABLE
 536: LD_INT 0
 538: PPUSH
// begin enable ;
 539: ENABLE
// FogOff ( your_side ) ;
 540: LD_OWVAR 2
 544: PPUSH
 545: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 549: LD_ADDR_VAR 0 1
 553: PUSH
 554: LD_INT 22
 556: PUSH
 557: LD_OWVAR 2
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 21
 571: PUSH
 572: LD_INT 1
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 21
 581: PUSH
 582: LD_INT 2
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 69
 602: PUSH
 603: FOR_IN
 604: IFFALSE 620
// SetLives ( i , 1000 ) ;
 606: LD_VAR 0 1
 610: PPUSH
 611: LD_INT 1000
 613: PPUSH
 614: CALL_OW 234
 618: GO 603
 620: POP
 621: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 622: LD_ADDR_VAR 0 1
 626: PUSH
 627: LD_INT 22
 629: PUSH
 630: LD_OWVAR 2
 634: PUSH
 635: EMPTY
 636: LIST
 637: LIST
 638: PUSH
 639: LD_INT 2
 641: PUSH
 642: LD_INT 30
 644: PUSH
 645: LD_INT 0
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 30
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: EMPTY
 663: LIST
 664: LIST
 665: LIST
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PPUSH
 671: CALL_OW 69
 675: PUSH
 676: FOR_IN
 677: IFFALSE 741
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 679: LD_VAR 0 1
 683: PPUSH
 684: CALL_OW 274
 688: PPUSH
 689: LD_INT 1
 691: PPUSH
 692: LD_INT 9999
 694: PPUSH
 695: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 699: LD_VAR 0 1
 703: PPUSH
 704: CALL_OW 274
 708: PPUSH
 709: LD_INT 2
 711: PPUSH
 712: LD_INT 9999
 714: PPUSH
 715: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 719: LD_VAR 0 1
 723: PPUSH
 724: CALL_OW 274
 728: PPUSH
 729: LD_INT 3
 731: PPUSH
 732: LD_INT 9999
 734: PPUSH
 735: CALL_OW 277
// end ;
 739: GO 676
 741: POP
 742: POP
// end ; end_of_file
 743: PPOPN 1
 745: END
// export function MissionIntro ; begin
 746: LD_INT 0
 748: PPUSH
// InGameOn ;
 749: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 753: LD_EXP 32
 757: PUSH
 758: LD_INT 1
 760: ARRAY
 761: PUSH
 762: LD_INT 8
 764: MINUS
 765: PPUSH
 766: LD_EXP 32
 770: PUSH
 771: LD_INT 2
 773: ARRAY
 774: PUSH
 775: LD_INT 8
 777: MINUS
 778: PPUSH
 779: CALL_OW 84
// wait ( 0 0$3 ) ;
 783: LD_INT 105
 785: PPUSH
 786: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 790: LD_EXP 38
 794: PPUSH
 795: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 799: LD_EXP 38
 803: PPUSH
 804: LD_STRING D1-Bur-1
 806: PPUSH
 807: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 811: LD_EXP 38
 815: PPUSH
 816: LD_INT 94
 818: PPUSH
 819: LD_INT 89
 821: PPUSH
 822: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 826: LD_INT 94
 828: PPUSH
 829: LD_INT 89
 831: PPUSH
 832: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 836: LD_EXP 38
 840: PPUSH
 841: LD_STRING D1-Bur-1a
 843: PPUSH
 844: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 848: LD_EXP 38
 852: PPUSH
 853: LD_INT 102
 855: PPUSH
 856: LD_INT 88
 858: PPUSH
 859: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 863: LD_INT 102
 865: PPUSH
 866: LD_INT 88
 868: PPUSH
 869: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 873: LD_EXP 38
 877: PPUSH
 878: LD_STRING D1-Bur-1b
 880: PPUSH
 881: CALL_OW 88
// InGameOff ;
 885: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 889: LD_STRING M1
 891: PPUSH
 892: CALL_OW 337
// SaveForQuickRestart ;
 896: CALL_OW 22
// introEnd = true ;
 900: LD_ADDR_EXP 3
 904: PUSH
 905: LD_INT 1
 907: ST_TO_ADDR
// end ;
 908: LD_VAR 0 1
 912: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
 913: LD_EXP 38
 917: PPUSH
 918: LD_INT 74
 920: PPUSH
 921: LD_INT 88
 923: PPUSH
 924: CALL_OW 297
 928: PUSH
 929: LD_INT 5
 931: LESS
 932: PUSH
 933: LD_EXP 3
 937: AND
 938: IFFALSE 963
 940: GO 942
 942: DISABLE
// begin spotWaterfall = true ;
 943: LD_ADDR_EXP 6
 947: PUSH
 948: LD_INT 1
 950: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
 951: LD_EXP 38
 955: PPUSH
 956: LD_STRING DWaterfall-Bur-1
 958: PPUSH
 959: CALL_OW 88
// end ;
 963: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
 964: LD_EXP 38
 968: PPUSH
 969: LD_INT 130
 971: PPUSH
 972: LD_INT 96
 974: PPUSH
 975: CALL_OW 297
 979: PUSH
 980: LD_INT 5
 982: LESS
 983: PUSH
 984: LD_EXP 3
 988: AND
 989: IFFALSE 1006
 991: GO 993
 993: DISABLE
// begin Say ( Burlak , DCorpse-Bur-1 ) ;
 994: LD_EXP 38
 998: PPUSH
 999: LD_STRING DCorpse-Bur-1
1001: PPUSH
1002: CALL_OW 88
// end ;
1006: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1007: LD_EXP 4
1011: NOT
1012: IFFALSE 1106
1014: GO 1016
1016: DISABLE
1017: LD_INT 0
1019: PPUSH
// begin enable ;
1020: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1021: LD_ADDR_VAR 0 1
1025: PUSH
1026: LD_INT 22
1028: PUSH
1029: LD_INT 0
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 25
1038: PUSH
1039: LD_INT 12
1041: PUSH
1042: EMPTY
1043: LIST
1044: LIST
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PPUSH
1050: CALL_OW 69
1054: PUSH
1055: FOR_IN
1056: IFFALSE 1104
// if GetDistUnits ( apeman , Burlak ) < 7 then
1058: LD_VAR 0 1
1062: PPUSH
1063: LD_EXP 38
1067: PPUSH
1068: CALL_OW 296
1072: PUSH
1073: LD_INT 7
1075: LESS
1076: IFFALSE 1102
// begin apemansContact = true ;
1078: LD_ADDR_EXP 4
1082: PUSH
1083: LD_INT 1
1085: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1086: LD_EXP 38
1090: PPUSH
1091: LD_STRING D2-Bur-1
1093: PPUSH
1094: CALL_OW 88
// exit ;
1098: POP
1099: POP
1100: GO 1106
// end ;
1102: GO 1055
1104: POP
1105: POP
// end ;
1106: PPOPN 1
1108: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1109: LD_EXP 5
1113: NOT
1114: IFFALSE 1230
1116: GO 1118
1118: DISABLE
1119: LD_INT 0
1121: PPUSH
1122: PPUSH
// begin enable ;
1123: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1124: LD_ADDR_VAR 0 2
1128: PUSH
1129: LD_INT 22
1131: PUSH
1132: LD_INT 0
1134: PUSH
1135: EMPTY
1136: LIST
1137: LIST
1138: PUSH
1139: LD_INT 25
1141: PUSH
1142: LD_INT 12
1144: PUSH
1145: EMPTY
1146: LIST
1147: LIST
1148: PUSH
1149: EMPTY
1150: LIST
1151: LIST
1152: PPUSH
1153: CALL_OW 69
1157: PUSH
1158: FOR_IN
1159: IFFALSE 1228
// if Attacks ( apeman ) then
1161: LD_VAR 0 2
1165: PPUSH
1166: CALL_OW 320
1170: IFFALSE 1226
// if GetSide ( Attacks ( apeman ) ) = 3 then
1172: LD_VAR 0 2
1176: PPUSH
1177: CALL_OW 320
1181: PPUSH
1182: CALL_OW 255
1186: PUSH
1187: LD_INT 3
1189: EQUAL
1190: IFFALSE 1226
// begin attackedByApeman = true ;
1192: LD_ADDR_EXP 5
1196: PUSH
1197: LD_INT 1
1199: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1200: LD_ADDR_EXP 7
1204: PUSH
1205: LD_VAR 0 2
1209: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1210: LD_EXP 38
1214: PPUSH
1215: LD_STRING D2-Bur-1a
1217: PPUSH
1218: CALL_OW 88
// exit ;
1222: POP
1223: POP
1224: GO 1230
// end ;
1226: GO 1158
1228: POP
1229: POP
// end ;
1230: PPOPN 2
1232: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1233: LD_EXP 8
1237: PPUSH
1238: CALL_OW 303
1242: IFFALSE 1276
1244: GO 1246
1246: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1247: LD_ADDR_EXP 9
1251: PUSH
1252: LD_EXP 8
1256: PPUSH
1257: CALL_OW 250
1261: PUSH
1262: LD_EXP 8
1266: PPUSH
1267: CALL_OW 251
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: ST_TO_ADDR
1276: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1277: LD_EXP 8
1281: PPUSH
1282: CALL_OW 301
1286: PUSH
1287: LD_INT 3
1289: PPUSH
1290: LD_EXP 9
1294: PUSH
1295: LD_INT 1
1297: ARRAY
1298: PPUSH
1299: LD_EXP 9
1303: PUSH
1304: LD_INT 2
1306: ARRAY
1307: PPUSH
1308: CALL_OW 293
1312: AND
1313: IFFALSE 1714
1315: GO 1317
1317: DISABLE
1318: LD_INT 0
1320: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1321: LD_EXP 38
1325: PPUSH
1326: LD_STRING D2a-Bur-1
1328: PPUSH
1329: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1333: LD_INT 22
1335: PUSH
1336: LD_INT 3
1338: PUSH
1339: EMPTY
1340: LIST
1341: LIST
1342: PUSH
1343: LD_INT 21
1345: PUSH
1346: LD_INT 1
1348: PUSH
1349: EMPTY
1350: LIST
1351: LIST
1352: PUSH
1353: EMPTY
1354: LIST
1355: LIST
1356: PPUSH
1357: CALL_OW 69
1361: PUSH
1362: LD_INT 1
1364: EQUAL
1365: IFFALSE 1381
// Say ( Burlak , D2a-Bur-2 ) else
1367: LD_EXP 38
1371: PPUSH
1372: LD_STRING D2a-Bur-2
1374: PPUSH
1375: CALL_OW 88
1379: GO 1714
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1381: LD_ADDR_VAR 0 1
1385: PUSH
1386: LD_INT 22
1388: PUSH
1389: LD_INT 3
1391: PUSH
1392: EMPTY
1393: LIST
1394: LIST
1395: PUSH
1396: LD_INT 21
1398: PUSH
1399: LD_INT 1
1401: PUSH
1402: EMPTY
1403: LIST
1404: LIST
1405: PUSH
1406: EMPTY
1407: LIST
1408: LIST
1409: PPUSH
1410: CALL_OW 69
1414: PPUSH
1415: LD_EXP 9
1419: PUSH
1420: LD_INT 1
1422: ARRAY
1423: PPUSH
1424: LD_EXP 9
1428: PUSH
1429: LD_INT 2
1431: ARRAY
1432: PPUSH
1433: CALL_OW 73
1437: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1438: LD_VAR 0 1
1442: PPUSH
1443: LD_EXP 9
1447: PUSH
1448: LD_INT 1
1450: ARRAY
1451: PPUSH
1452: LD_EXP 9
1456: PUSH
1457: LD_INT 2
1459: ARRAY
1460: PPUSH
1461: CALL_OW 111
// case nearUnit of Burlak :
1465: LD_VAR 0 1
1469: PUSH
1470: LD_EXP 38
1474: DOUBLE
1475: EQUAL
1476: IFTRUE 1480
1478: GO 1495
1480: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1481: LD_EXP 38
1485: PPUSH
1486: LD_STRING D3-Bur-2a
1488: PPUSH
1489: CALL_OW 88
1493: GO 1587
1495: LD_EXP 43
1499: DOUBLE
1500: EQUAL
1501: IFTRUE 1505
1503: GO 1520
1505: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1506: LD_EXP 43
1510: PPUSH
1511: LD_STRING D2a-Bel-1
1513: PPUSH
1514: CALL_OW 88
1518: GO 1587
1520: LD_EXP 45
1524: DOUBLE
1525: EQUAL
1526: IFTRUE 1530
1528: GO 1545
1530: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1531: LD_EXP 45
1535: PPUSH
1536: LD_STRING D2a-Kir-1
1538: PPUSH
1539: CALL_OW 88
1543: GO 1587
1545: POP
// if GetSex ( nearUnit ) = sex_male then
1546: LD_VAR 0 1
1550: PPUSH
1551: CALL_OW 258
1555: PUSH
1556: LD_INT 1
1558: EQUAL
1559: IFFALSE 1575
// Say ( nearUnit , D2a-RSol1-1 ) else
1561: LD_VAR 0 1
1565: PPUSH
1566: LD_STRING D2a-RSol1-1
1568: PPUSH
1569: CALL_OW 88
1573: GO 1587
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1575: LD_VAR 0 1
1579: PPUSH
1580: LD_STRING D2a-RFSol1-1
1582: PPUSH
1583: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1587: LD_EXP 46
1591: PPUSH
1592: CALL_OW 255
1596: PUSH
1597: LD_INT 3
1599: EQUAL
1600: PUSH
1601: LD_EXP 46
1605: PPUSH
1606: CALL_OW 302
1610: AND
1611: IFFALSE 1625
// Say ( Gnyevko , D2a-Gny-1 ) ;
1613: LD_EXP 46
1617: PPUSH
1618: LD_STRING D2a-Gny-1
1620: PPUSH
1621: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1625: LD_EXP 8
1629: PUSH
1630: LD_EXP 7
1634: EQUAL
1635: IFFALSE 1649
// Say ( Burlak , D3-Bur-2 ) ;
1637: LD_EXP 38
1641: PPUSH
1642: LD_STRING D3-Bur-2
1644: PPUSH
1645: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1649: LD_EXP 46
1653: PPUSH
1654: CALL_OW 255
1658: PUSH
1659: LD_INT 8
1661: EQUAL
1662: IFFALSE 1714
// begin Say ( Burlak , D12-Bur-1 ) ;
1664: LD_EXP 38
1668: PPUSH
1669: LD_STRING D12-Bur-1
1671: PPUSH
1672: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1676: LD_EXP 43
1680: PPUSH
1681: CALL_OW 255
1685: PUSH
1686: LD_INT 3
1688: EQUAL
1689: PUSH
1690: LD_EXP 43
1694: PPUSH
1695: CALL_OW 302
1699: AND
1700: IFFALSE 1714
// Say ( Belkov , D12-Bel-2 ) ;
1702: LD_EXP 43
1706: PPUSH
1707: LD_STRING D12-Bel-2
1709: PPUSH
1710: CALL_OW 88
// end ; end ; end ;
1714: PPOPN 1
1716: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1717: LD_INT 3
1719: PPUSH
1720: LD_EXP 46
1724: PPUSH
1725: CALL_OW 292
1729: IFFALSE 2253
1731: GO 1733
1733: DISABLE
1734: LD_INT 0
1736: PPUSH
1737: PPUSH
// begin CenterNowOnUnits ( Gnyevko ) ;
1738: LD_EXP 46
1742: PPUSH
1743: CALL_OW 87
// DialogueOn ;
1747: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1751: LD_ADDR_VAR 0 1
1755: PUSH
1756: LD_INT 22
1758: PUSH
1759: LD_INT 3
1761: PUSH
1762: EMPTY
1763: LIST
1764: LIST
1765: PUSH
1766: LD_INT 21
1768: PUSH
1769: LD_INT 1
1771: PUSH
1772: EMPTY
1773: LIST
1774: LIST
1775: PUSH
1776: EMPTY
1777: LIST
1778: LIST
1779: PPUSH
1780: CALL_OW 69
1784: PPUSH
1785: LD_EXP 46
1789: PPUSH
1790: CALL_OW 74
1794: ST_TO_ADDR
// if nearUnit = Burlak then
1795: LD_VAR 0 1
1799: PUSH
1800: LD_EXP 38
1804: EQUAL
1805: IFFALSE 2123
// begin Say ( Burlak , D3-Bur-1 ) ;
1807: LD_EXP 38
1811: PPUSH
1812: LD_STRING D3-Bur-1
1814: PPUSH
1815: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
1819: LD_EXP 46
1823: PPUSH
1824: LD_STRING D3-Gny-1
1826: PPUSH
1827: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
1831: LD_EXP 38
1835: PPUSH
1836: LD_STRING D3-Bur-2b
1838: PPUSH
1839: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
1843: LD_INT 22
1845: PUSH
1846: LD_INT 3
1848: PUSH
1849: EMPTY
1850: LIST
1851: LIST
1852: PUSH
1853: LD_INT 21
1855: PUSH
1856: LD_INT 1
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: PPUSH
1867: CALL_OW 69
1871: PUSH
1872: LD_INT 1
1874: EQUAL
1875: PUSH
1876: LD_EXP 12
1880: NOT
1881: AND
1882: IFFALSE 1934
// begin Say ( Burlak , D3-Bur-2c ) ;
1884: LD_EXP 38
1888: PPUSH
1889: LD_STRING D3-Bur-2c
1891: PPUSH
1892: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
1896: LD_EXP 46
1900: PPUSH
1901: LD_STRING D3-Gny-2
1903: PPUSH
1904: CALL_OW 88
// DialogueOff ;
1908: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
1912: LD_EXP 46
1916: PPUSH
1917: LD_INT 3
1919: PPUSH
1920: CALL_OW 235
// gnyevkoSaved = true ;
1924: LD_ADDR_EXP 10
1928: PUSH
1929: LD_INT 1
1931: ST_TO_ADDR
// exit ;
1932: GO 2253
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
1934: LD_INT 22
1936: PUSH
1937: LD_INT 3
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: PUSH
1944: LD_INT 21
1946: PUSH
1947: LD_INT 1
1949: PUSH
1950: EMPTY
1951: LIST
1952: LIST
1953: PUSH
1954: EMPTY
1955: LIST
1956: LIST
1957: PPUSH
1958: CALL_OW 69
1962: PUSH
1963: LD_INT 1
1965: GREATER
1966: PUSH
1967: LD_EXP 12
1971: OR
1972: PUSH
1973: LD_EXP 20
1977: NOT
1978: AND
1979: IFFALSE 2031
// begin Say ( Burlak , D3-Bur-2d ) ;
1981: LD_EXP 38
1985: PPUSH
1986: LD_STRING D3-Bur-2d
1988: PPUSH
1989: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
1993: LD_EXP 46
1997: PPUSH
1998: LD_STRING D3-Gny-2
2000: PPUSH
2001: CALL_OW 88
// DialogueOff ;
2005: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2009: LD_EXP 46
2013: PPUSH
2014: LD_INT 3
2016: PPUSH
2017: CALL_OW 235
// gnyevkoSaved = true ;
2021: LD_ADDR_EXP 10
2025: PUSH
2026: LD_INT 1
2028: ST_TO_ADDR
// exit ;
2029: GO 2253
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2031: LD_INT 22
2033: PUSH
2034: LD_INT 3
2036: PUSH
2037: EMPTY
2038: LIST
2039: LIST
2040: PUSH
2041: LD_INT 21
2043: PUSH
2044: LD_INT 1
2046: PUSH
2047: EMPTY
2048: LIST
2049: LIST
2050: PUSH
2051: EMPTY
2052: LIST
2053: LIST
2054: PPUSH
2055: CALL_OW 69
2059: PUSH
2060: LD_INT 1
2062: GREATER
2063: PUSH
2064: LD_EXP 20
2068: AND
2069: IFFALSE 2121
// begin Say ( Burlak , D3-Bur-2e ) ;
2071: LD_EXP 38
2075: PPUSH
2076: LD_STRING D3-Bur-2e
2078: PPUSH
2079: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2083: LD_EXP 46
2087: PPUSH
2088: LD_STRING D3-Gny-2
2090: PPUSH
2091: CALL_OW 88
// DialogueOff ;
2095: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2099: LD_EXP 46
2103: PPUSH
2104: LD_INT 3
2106: PPUSH
2107: CALL_OW 235
// gnyevkoSaved = true ;
2111: LD_ADDR_EXP 10
2115: PUSH
2116: LD_INT 1
2118: ST_TO_ADDR
// exit ;
2119: GO 2253
// end ; end else
2121: GO 2253
// begin if GetSex ( nearUnit ) = sex_male then
2123: LD_VAR 0 1
2127: PPUSH
2128: CALL_OW 258
2132: PUSH
2133: LD_INT 1
2135: EQUAL
2136: IFFALSE 2152
// Say ( nearUnit , D3-RSol1-1 ) else
2138: LD_VAR 0 1
2142: PPUSH
2143: LD_STRING D3-RSol1-1
2145: PPUSH
2146: CALL_OW 88
2150: GO 2164
// Say ( nearUnit , D3-RFSol1-1 ) ;
2152: LD_VAR 0 1
2156: PPUSH
2157: LD_STRING D3-RFSol1-1
2159: PPUSH
2160: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2164: LD_EXP 46
2168: PPUSH
2169: LD_STRING D3-Gny-1
2171: PPUSH
2172: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2176: LD_VAR 0 1
2180: PPUSH
2181: CALL_OW 258
2185: PUSH
2186: LD_INT 1
2188: EQUAL
2189: IFFALSE 2205
// Say ( nearUnit , D3-RSol1-2 ) else
2191: LD_VAR 0 1
2195: PPUSH
2196: LD_STRING D3-RSol1-2
2198: PPUSH
2199: CALL_OW 88
2203: GO 2217
// Say ( nearUnit , D3-RFSol1-2 ) ;
2205: LD_VAR 0 1
2209: PPUSH
2210: LD_STRING D3-RFSol1-2
2212: PPUSH
2213: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2217: LD_EXP 46
2221: PPUSH
2222: LD_STRING D3-Gny-2a
2224: PPUSH
2225: CALL_OW 88
// DialogueOff ;
2229: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2233: LD_EXP 46
2237: PPUSH
2238: LD_INT 3
2240: PPUSH
2241: CALL_OW 235
// gnyevkoSaved = true ;
2245: LD_ADDR_EXP 10
2249: PUSH
2250: LD_INT 1
2252: ST_TO_ADDR
// end ; end ;
2253: PPOPN 2
2255: END
// every 0 0$1 trigger See ( 3 , Pokryshkin ) and not meetPokryshkin do
2256: LD_INT 3
2258: PPUSH
2259: LD_EXP 39
2263: PPUSH
2264: CALL_OW 292
2268: PUSH
2269: LD_EXP 12
2273: NOT
2274: AND
2275: IFFALSE 3110
2277: GO 2279
2279: DISABLE
// begin enable ;
2280: ENABLE
// InGameOn ;
2281: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2285: LD_EXP 39
2289: PPUSH
2290: CALL_OW 87
// ComHold ( [ Burlak , Gnyevko ] ) ;
2294: LD_EXP 38
2298: PUSH
2299: LD_EXP 46
2303: PUSH
2304: EMPTY
2305: LIST
2306: LIST
2307: PPUSH
2308: CALL_OW 140
// DialogueOn ;
2312: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2316: LD_EXP 11
2320: IFFALSE 2572
// begin meetPokryshkin = true ;
2322: LD_ADDR_EXP 12
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2330: LD_INT 6
2332: PPUSH
2333: LD_INT 3
2335: PPUSH
2336: CALL_OW 343
// DialogueOff ;
2340: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2344: LD_EXP 38
2348: PPUSH
2349: LD_EXP 39
2353: PPUSH
2354: CALL_OW 250
2358: PPUSH
2359: LD_EXP 39
2363: PPUSH
2364: CALL_OW 251
2368: PPUSH
2369: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2373: LD_EXP 38
2377: PPUSH
2378: LD_EXP 39
2382: PPUSH
2383: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
2387: LD_EXP 39
2391: PPUSH
2392: LD_EXP 38
2396: PPUSH
2397: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
2401: LD_EXP 46
2405: PPUSH
2406: LD_STRING D4-Gny-3
2408: PPUSH
2409: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
2413: LD_EXP 38
2417: PPUSH
2418: LD_STRING D4-Bur-3
2420: PPUSH
2421: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2425: LD_EXP 39
2429: PPUSH
2430: LD_STRING D4-Pok-4
2432: PPUSH
2433: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2437: LD_EXP 34
2441: PPUSH
2442: LD_INT 18
2444: PPUSH
2445: LD_INT 1
2447: PPUSH
2448: CALL_OW 49
// wait ( 0 0$2 ) ;
2452: LD_INT 70
2454: PPUSH
2455: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
2459: LD_EXP 38
2463: PPUSH
2464: LD_STRING D4-Bur-4
2466: PPUSH
2467: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
2471: LD_EXP 39
2475: PPUSH
2476: LD_STRING D4-Pok-5
2478: PPUSH
2479: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
2483: LD_EXP 34
2487: PPUSH
2488: LD_STRING D4-Sol1-5
2490: PPUSH
2491: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
2495: LD_EXP 39
2499: PPUSH
2500: LD_STRING D4-Pok-6
2502: PPUSH
2503: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
2507: LD_EXP 39
2511: PPUSH
2512: LD_STRING D4-Pok-6a
2514: PPUSH
2515: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
2519: LD_EXP 38
2523: PPUSH
2524: LD_STRING D4-Bur-6
2526: PPUSH
2527: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
2531: LD_EXP 39
2535: PPUSH
2536: LD_STRING D4-Pok-7
2538: PPUSH
2539: CALL_OW 88
// DialogueOff ;
2543: CALL_OW 7
// InGameOff ;
2547: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
2551: LD_STRING M2
2553: PPUSH
2554: CALL_OW 337
// goToHill = true ;
2558: LD_ADDR_EXP 13
2562: PUSH
2563: LD_INT 1
2565: ST_TO_ADDR
// MoveToHill ;
2566: CALL 7382 0 0
// exit ;
2570: GO 3110
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
2572: LD_EXP 38
2576: PUSH
2577: LD_EXP 46
2581: PUSH
2582: EMPTY
2583: LIST
2584: LIST
2585: PPUSH
2586: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
2590: LD_EXP 39
2594: PPUSH
2595: LD_STRING D4-Pok-1
2597: PPUSH
2598: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
2602: LD_EXP 46
2606: PPUSH
2607: CALL_OW 255
2611: PUSH
2612: LD_INT 3
2614: EQUAL
2615: PUSH
2616: LD_EXP 46
2620: PPUSH
2621: CALL_OW 302
2625: AND
2626: IFFALSE 2640
// Say ( Gnyevko , D4-Gny-1 ) ;
2628: LD_EXP 46
2632: PPUSH
2633: LD_STRING D4-Gny-1
2635: PPUSH
2636: CALL_OW 88
// if GetDistUnits ( Burlak , Gnyevko ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
2640: LD_EXP 38
2644: PPUSH
2645: LD_EXP 46
2649: PPUSH
2650: CALL_OW 296
2654: PUSH
2655: LD_INT 8
2657: GREATER
2658: PUSH
2659: LD_EXP 46
2663: PPUSH
2664: CALL_OW 255
2668: PUSH
2669: LD_INT 3
2671: EQUAL
2672: AND
2673: PUSH
2674: LD_EXP 46
2678: PPUSH
2679: CALL_OW 302
2683: AND
2684: IFFALSE 2773
// begin Say ( Pokryshkin , D4-Pok-2 ) ;
2686: LD_EXP 39
2690: PPUSH
2691: LD_STRING D4-Pok-2
2693: PPUSH
2694: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
2698: LD_EXP 46
2702: PPUSH
2703: LD_STRING D4-Gny-2
2705: PPUSH
2706: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
2710: LD_EXP 39
2714: PPUSH
2715: LD_STRING D4-Pok-3
2717: PPUSH
2718: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
2722: LD_ADDR_EXP 11
2726: PUSH
2727: LD_INT 1
2729: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
2730: LD_EXP 46
2734: PPUSH
2735: LD_INT 6
2737: PPUSH
2738: CALL_OW 235
// ComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2742: LD_EXP 46
2746: PPUSH
2747: LD_EXP 39
2751: PPUSH
2752: CALL_OW 250
2756: PPUSH
2757: LD_EXP 39
2761: PPUSH
2762: CALL_OW 251
2766: PPUSH
2767: CALL_OW 111
// end else
2771: GO 3102
// begin meetPokryshkin = true ;
2773: LD_ADDR_EXP 12
2777: PUSH
2778: LD_INT 1
2780: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2781: LD_INT 6
2783: PPUSH
2784: LD_INT 3
2786: PPUSH
2787: CALL_OW 343
// DialogueOff ;
2791: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
2795: LD_EXP 46
2799: PPUSH
2800: CALL_OW 255
2804: PUSH
2805: LD_INT 3
2807: EQUAL
2808: PUSH
2809: LD_EXP 46
2813: PPUSH
2814: CALL_OW 302
2818: AND
2819: IFFALSE 2896
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2821: LD_EXP 38
2825: PUSH
2826: LD_EXP 46
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: PPUSH
2835: LD_EXP 39
2839: PPUSH
2840: CALL_OW 250
2844: PPUSH
2845: LD_EXP 39
2849: PPUSH
2850: CALL_OW 251
2854: PPUSH
2855: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
2859: LD_EXP 38
2863: PUSH
2864: LD_EXP 46
2868: PUSH
2869: EMPTY
2870: LIST
2871: LIST
2872: PPUSH
2873: LD_EXP 39
2877: PPUSH
2878: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
2882: LD_EXP 46
2886: PPUSH
2887: LD_INT 6
2889: PPUSH
2890: CALL_OW 235
// end else
2894: GO 2939
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2896: LD_EXP 38
2900: PPUSH
2901: LD_EXP 39
2905: PPUSH
2906: CALL_OW 250
2910: PPUSH
2911: LD_EXP 39
2915: PPUSH
2916: CALL_OW 251
2920: PPUSH
2921: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2925: LD_EXP 38
2929: PPUSH
2930: LD_EXP 39
2934: PPUSH
2935: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
2939: LD_EXP 39
2943: PPUSH
2944: LD_EXP 38
2948: PPUSH
2949: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
2953: LD_EXP 38
2957: PPUSH
2958: LD_STRING D4-Bur-3
2960: PPUSH
2961: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2965: LD_EXP 39
2969: PPUSH
2970: LD_STRING D4-Pok-4
2972: PPUSH
2973: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2977: LD_EXP 34
2981: PPUSH
2982: LD_INT 18
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: CALL_OW 49
// wait ( 0 0$2 ) ;
2992: LD_INT 70
2994: PPUSH
2995: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
2999: LD_EXP 38
3003: PPUSH
3004: LD_STRING D4-Bur-4
3006: PPUSH
3007: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3011: LD_EXP 39
3015: PPUSH
3016: LD_STRING D4-Pok-5
3018: PPUSH
3019: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3023: LD_EXP 34
3027: PPUSH
3028: LD_STRING D4-Sol1-5
3030: PPUSH
3031: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3035: LD_EXP 39
3039: PPUSH
3040: LD_STRING D4-Pok-6
3042: PPUSH
3043: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3047: LD_EXP 39
3051: PPUSH
3052: LD_STRING D4-Pok-6a
3054: PPUSH
3055: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3059: LD_EXP 38
3063: PPUSH
3064: LD_STRING D4-Bur-6
3066: PPUSH
3067: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3071: LD_EXP 39
3075: PPUSH
3076: LD_STRING D4-Pok-7
3078: PPUSH
3079: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3083: LD_STRING M2
3085: PPUSH
3086: CALL_OW 337
// goToHill = true ;
3090: LD_ADDR_EXP 13
3094: PUSH
3095: LD_INT 1
3097: ST_TO_ADDR
// MoveToHill ;
3098: CALL 7382 0 0
// end ; DialogueOff ;
3102: CALL_OW 7
// InGameOff ;
3106: CALL_OW 9
// end ;
3110: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3111: LD_EXP 38
3115: PPUSH
3116: LD_EXP 39
3120: PPUSH
3121: CALL_OW 296
3125: PUSH
3126: LD_INT 10
3128: GREATER
3129: PUSH
3130: LD_EXP 13
3134: AND
3135: PUSH
3136: LD_EXP 16
3140: NOT
3141: AND
3142: IFFALSE 3343
3144: GO 3146
3146: DISABLE
3147: LD_INT 0
3149: PPUSH
// begin enable ;
3150: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3151: LD_ADDR_VAR 0 1
3155: PUSH
3156: LD_EXP 39
3160: PUSH
3161: LD_EXP 40
3165: PUSH
3166: LD_EXP 41
3170: PUSH
3171: LD_EXP 42
3175: PUSH
3176: LD_EXP 43
3180: PUSH
3181: EMPTY
3182: LIST
3183: LIST
3184: LIST
3185: LIST
3186: LIST
3187: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3188: LD_EXP 46
3192: PPUSH
3193: CALL_OW 255
3197: PUSH
3198: LD_INT 6
3200: EQUAL
3201: PUSH
3202: LD_EXP 10
3206: AND
3207: IFFALSE 3225
// ruSolds = ruSolds ^ Gnyevko ;
3209: LD_ADDR_VAR 0 1
3213: PUSH
3214: LD_VAR 0 1
3218: PUSH
3219: LD_EXP 46
3223: ADD
3224: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3225: LD_VAR 0 1
3229: PPUSH
3230: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3234: LD_EXP 38
3238: PPUSH
3239: CALL_OW 87
// DialogueOn ;
3243: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3247: LD_EXP 39
3251: PPUSH
3252: LD_STRING DSplit-Pok-1
3254: PPUSH
3255: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3259: LD_EXP 38
3263: PPUSH
3264: LD_STRING DSplit-Bur-1
3266: PPUSH
3267: CALL_OW 88
// DialogueOff ;
3271: CALL_OW 7
// InGameOn ;
3275: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3279: LD_EXP 38
3283: PPUSH
3284: LD_EXP 39
3288: PPUSH
3289: CALL_OW 250
3293: PPUSH
3294: LD_EXP 39
3298: PPUSH
3299: CALL_OW 251
3303: PPUSH
3304: CALL_OW 111
// wait ( 0 0$1 ) ;
3308: LD_INT 35
3310: PPUSH
3311: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3315: LD_EXP 38
3319: PPUSH
3320: LD_EXP 39
3324: PPUSH
3325: CALL_OW 296
3329: PUSH
3330: LD_INT 6
3332: LESS
3333: IFFALSE 3279
// InGameOff ;
3335: CALL_OW 9
// MoveToHill ;
3339: CALL 7382 0 0
// end ;
3343: PPOPN 1
3345: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
3346: LD_INT 0
3348: PPUSH
3349: PPUSH
// traitor = true ;
3350: LD_ADDR_EXP 16
3354: PUSH
3355: LD_INT 1
3357: ST_TO_ADDR
// DialogueOn ;
3358: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
3362: LD_EXP 39
3366: PPUSH
3367: LD_STRING DAttack-Pok-1
3369: PPUSH
3370: CALL_OW 88
// DialogueOff ;
3374: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
3378: LD_INT 3
3380: PPUSH
3381: LD_INT 6
3383: PPUSH
3384: LD_INT 2
3386: PPUSH
3387: LD_INT 1
3389: PPUSH
3390: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
3394: LD_INT 22
3396: PUSH
3397: LD_INT 6
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: PUSH
3404: LD_INT 21
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: EMPTY
3411: LIST
3412: LIST
3413: PUSH
3414: EMPTY
3415: LIST
3416: LIST
3417: PPUSH
3418: CALL_OW 69
3422: PPUSH
3423: LD_EXP 38
3427: PPUSH
3428: CALL_OW 115
// end ;
3432: LD_VAR 0 1
3436: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
3437: LD_EXP 39
3441: PPUSH
3442: LD_INT 65
3444: PPUSH
3445: LD_INT 59
3447: PPUSH
3448: CALL_OW 297
3452: PUSH
3453: LD_INT 4
3455: LESS
3456: PUSH
3457: LD_EXP 16
3461: NOT
3462: AND
3463: IFFALSE 3660
3465: GO 3467
3467: DISABLE
// begin InGameOn ;
3468: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
3472: LD_INT 55
3474: PPUSH
3475: LD_INT 50
3477: PPUSH
3478: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
3482: LD_EXP 38
3486: PPUSH
3487: LD_INT 66
3489: PPUSH
3490: LD_INT 57
3492: PPUSH
3493: CALL_OW 111
// AddComHold ( Burlak ) ;
3497: LD_EXP 38
3501: PPUSH
3502: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
3506: LD_EXP 34
3510: PPUSH
3511: LD_INT 59
3513: PPUSH
3514: LD_INT 55
3516: PPUSH
3517: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
3521: LD_INT 35
3523: PPUSH
3524: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
3528: LD_INT 1
3530: PPUSH
3531: LD_EXP 39
3535: PPUSH
3536: CALL_OW 292
3540: IFFALSE 3521
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
3542: LD_EXP 34
3546: PUSH
3547: LD_EXP 39
3551: PUSH
3552: EMPTY
3553: LIST
3554: LIST
3555: PPUSH
3556: CALL_OW 87
// ComStop ( Charles ) ;
3560: LD_EXP 34
3564: PPUSH
3565: CALL_OW 141
// AddComHold ( Charles ) ;
3569: LD_EXP 34
3573: PPUSH
3574: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
3578: LD_EXP 34
3582: PPUSH
3583: LD_EXP 39
3587: PPUSH
3588: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
3592: LD_EXP 34
3596: PPUSH
3597: LD_STRING D5-Sol1-1
3599: PPUSH
3600: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
3604: LD_EXP 39
3608: PPUSH
3609: LD_STRING D5-Pok-1
3611: PPUSH
3612: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
3616: LD_INT 1
3618: PPUSH
3619: LD_INT 6
3621: PPUSH
3622: LD_INT 2
3624: PPUSH
3625: LD_INT 1
3627: PPUSH
3628: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
3632: LD_INT 1
3634: PPUSH
3635: LD_INT 3
3637: PPUSH
3638: LD_INT 2
3640: PPUSH
3641: LD_INT 1
3643: PPUSH
3644: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
3648: LD_EXP 34
3652: PPUSH
3653: LD_STRING D5-Sol1-2
3655: PPUSH
3656: CALL_OW 88
// end ;
3660: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
3661: LD_EXP 34
3665: PPUSH
3666: CALL_OW 301
3670: PUSH
3671: LD_EXP 13
3675: AND
3676: IFFALSE 4204
3678: GO 3680
3680: DISABLE
3681: LD_INT 0
3683: PPUSH
// begin goToHill = false ;
3684: LD_ADDR_EXP 13
3688: PUSH
3689: LD_INT 0
3691: ST_TO_ADDR
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
3692: LD_INT 22
3694: PUSH
3695: LD_INT 6
3697: PUSH
3698: EMPTY
3699: LIST
3700: LIST
3701: PUSH
3702: LD_INT 21
3704: PUSH
3705: LD_INT 1
3707: PUSH
3708: EMPTY
3709: LIST
3710: LIST
3711: PUSH
3712: EMPTY
3713: LIST
3714: LIST
3715: PPUSH
3716: CALL_OW 69
3720: PPUSH
3721: CALL_OW 138
// wait ( 0 0$1 ) ;
3725: LD_INT 35
3727: PPUSH
3728: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
3732: LD_INT 55
3734: PPUSH
3735: LD_INT 50
3737: PPUSH
3738: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
3742: LD_EXP 38
3746: PPUSH
3747: LD_INT 56
3749: PPUSH
3750: LD_INT 56
3752: PPUSH
3753: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
3757: LD_INT 22
3759: PUSH
3760: LD_INT 6
3762: PUSH
3763: EMPTY
3764: LIST
3765: LIST
3766: PUSH
3767: LD_INT 21
3769: PUSH
3770: LD_INT 1
3772: PUSH
3773: EMPTY
3774: LIST
3775: LIST
3776: PUSH
3777: EMPTY
3778: LIST
3779: LIST
3780: PPUSH
3781: CALL_OW 69
3785: PPUSH
3786: LD_INT 56
3788: PPUSH
3789: LD_INT 56
3791: PPUSH
3792: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
3796: LD_EXP 38
3800: PPUSH
3801: LD_STRING D5-Bur-2
3803: PPUSH
3804: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
3808: LD_EXP 39
3812: PPUSH
3813: LD_STRING D5-Pok-2
3815: PPUSH
3816: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
3820: LD_EXP 43
3824: PPUSH
3825: LD_STRING D5-Bel-2
3827: PPUSH
3828: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
3832: LD_EXP 39
3836: PPUSH
3837: LD_STRING D5-Pok-3
3839: PPUSH
3840: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
3844: LD_EXP 46
3848: PPUSH
3849: CALL_OW 255
3853: PUSH
3854: LD_INT 6
3856: EQUAL
3857: IFFALSE 3871
// Say ( Gnyevko , D5-Gny-3 ) ;
3859: LD_EXP 46
3863: PPUSH
3864: LD_STRING D5-Gny-3
3866: PPUSH
3867: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
3871: LD_EXP 38
3875: PPUSH
3876: LD_STRING D5-Bur-3
3878: PPUSH
3879: CALL_OW 88
// wait ( 0 0$2 ) ;
3883: LD_INT 70
3885: PPUSH
3886: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
3890: LD_EXP 38
3894: PPUSH
3895: LD_INT 85
3897: PPUSH
3898: LD_INT 64
3900: PPUSH
3901: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
3905: LD_INT 22
3907: PUSH
3908: LD_INT 6
3910: PUSH
3911: EMPTY
3912: LIST
3913: LIST
3914: PUSH
3915: LD_INT 21
3917: PUSH
3918: LD_INT 1
3920: PUSH
3921: EMPTY
3922: LIST
3923: LIST
3924: PUSH
3925: EMPTY
3926: LIST
3927: LIST
3928: PPUSH
3929: CALL_OW 69
3933: PPUSH
3934: LD_INT 85
3936: PPUSH
3937: LD_INT 64
3939: PPUSH
3940: CALL_OW 111
// CenterNowOnUnits ( Burlak ) ;
3944: LD_EXP 38
3948: PPUSH
3949: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
3953: LD_EXP 39
3957: PPUSH
3958: LD_STRING D6-Pok-1
3960: PPUSH
3961: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3965: LD_EXP 38
3969: PPUSH
3970: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
3974: LD_EXP 38
3978: PPUSH
3979: LD_STRING D6-Bur-1
3981: PPUSH
3982: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
3986: LD_EXP 38
3990: PPUSH
3991: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
3995: LD_EXP 39
3999: PPUSH
4000: LD_STRING D6-Pok-2
4002: PPUSH
4003: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4007: LD_EXP 38
4011: PPUSH
4012: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4016: LD_EXP 43
4020: PPUSH
4021: LD_STRING D6-Bel-2
4023: PPUSH
4024: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4028: LD_EXP 38
4032: PPUSH
4033: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4037: LD_EXP 38
4041: PPUSH
4042: LD_STRING D6-Bur-2
4044: PPUSH
4045: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4049: LD_EXP 38
4053: PPUSH
4054: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4058: LD_EXP 39
4062: PPUSH
4063: LD_STRING D6-Pok-3
4065: PPUSH
4066: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4070: LD_EXP 38
4074: PPUSH
4075: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4079: LD_EXP 47
4083: PPUSH
4084: LD_STRING D6-Kur-3
4086: PPUSH
4087: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4091: LD_EXP 38
4095: PPUSH
4096: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4100: LD_EXP 39
4104: PPUSH
4105: LD_STRING D6-Pok-4
4107: PPUSH
4108: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4112: LD_EXP 38
4116: PPUSH
4117: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4121: LD_EXP 43
4125: PPUSH
4126: LD_STRING D6-Bel-4
4128: PPUSH
4129: CALL_OW 88
// InGameOff ;
4133: CALL_OW 9
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4137: LD_EXP 39
4141: PPUSH
4142: LD_INT 23
4144: PPUSH
4145: CALL_OW 115
// wait ( 0 0$5 ) ;
4149: LD_INT 175
4151: PPUSH
4152: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4156: LD_INT 22
4158: PUSH
4159: LD_INT 6
4161: PUSH
4162: EMPTY
4163: LIST
4164: LIST
4165: PUSH
4166: LD_INT 21
4168: PUSH
4169: LD_INT 1
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PUSH
4176: EMPTY
4177: LIST
4178: LIST
4179: PPUSH
4180: CALL_OW 69
4184: PPUSH
4185: LD_INT 23
4187: PPUSH
4188: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4192: LD_INT 1
4194: PPUSH
4195: LD_EXP 46
4199: PPUSH
4200: CALL_OW 471
// end ;
4204: PPOPN 1
4206: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4207: LD_INT 1
4209: PPUSH
4210: LD_EXP 39
4214: PPUSH
4215: CALL_OW 292
4219: PUSH
4220: LD_EXP 34
4224: PPUSH
4225: CALL_OW 301
4229: AND
4230: IFFALSE 4249
4232: GO 4234
4234: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4235: LD_EXP 35
4239: PPUSH
4240: LD_EXP 39
4244: PPUSH
4245: CALL_OW 115
4249: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4250: LD_INT 3
4252: PPUSH
4253: LD_INT 23
4255: PPUSH
4256: CALL_OW 292
4260: IFFALSE 4289
4262: GO 4264
4264: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4265: LD_EXP 39
4269: PPUSH
4270: LD_STRING D7-Pok-1
4272: PPUSH
4273: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4277: LD_EXP 35
4281: PPUSH
4282: LD_STRING D7-FSol1-1
4284: PPUSH
4285: CALL_OW 88
// end ;
4289: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4290: LD_EXP 39
4294: PPUSH
4295: CALL_OW 303
4299: IFFALSE 4831
4301: GO 4303
4303: DISABLE
4304: LD_INT 0
4306: PPUSH
4307: PPUSH
4308: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4309: LD_ADDR_VAR 0 3
4313: PUSH
4314: LD_INT 22
4316: PUSH
4317: LD_INT 6
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 21
4326: PUSH
4327: LD_INT 1
4329: PUSH
4330: EMPTY
4331: LIST
4332: LIST
4333: PUSH
4334: LD_INT 50
4336: PUSH
4337: EMPTY
4338: LIST
4339: PUSH
4340: EMPTY
4341: LIST
4342: LIST
4343: LIST
4344: PPUSH
4345: CALL_OW 69
4349: PUSH
4350: LD_EXP 43
4354: DIFF
4355: ST_TO_ADDR
// DialogueOn ;
4356: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
4360: LD_EXP 43
4364: PPUSH
4365: LD_STRING D7a-Bel-1
4367: PPUSH
4368: CALL_OW 88
// DialogueOff ;
4372: CALL_OW 7
// for i := 1 to ruSolds do
4376: LD_ADDR_VAR 0 1
4380: PUSH
4381: DOUBLE
4382: LD_INT 1
4384: DEC
4385: ST_TO_ADDR
4386: LD_VAR 0 3
4390: PUSH
4391: FOR_TO
4392: IFFALSE 4450
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
4394: LD_VAR 0 3
4398: PUSH
4399: LD_VAR 0 1
4403: ARRAY
4404: PPUSH
4405: LD_INT 87
4407: PUSH
4408: LD_VAR 0 1
4412: PLUS
4413: PPUSH
4414: LD_INT 63
4416: PUSH
4417: LD_VAR 0 1
4421: PLUS
4422: PPUSH
4423: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
4427: LD_VAR 0 3
4431: PUSH
4432: LD_VAR 0 1
4436: ARRAY
4437: PPUSH
4438: LD_INT 89
4440: PPUSH
4441: LD_INT 67
4443: PPUSH
4444: CALL_OW 178
// end ;
4448: GO 4391
4450: POP
4451: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
4452: LD_EXP 43
4456: PPUSH
4457: LD_INT 89
4459: PPUSH
4460: LD_INT 67
4462: PPUSH
4463: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
4467: LD_EXP 43
4471: PPUSH
4472: LD_INT 88
4474: PPUSH
4475: LD_INT 66
4477: PPUSH
4478: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
4482: LD_EXP 40
4486: PPUSH
4487: LD_STRING D7a-RSol1-1
4489: PPUSH
4490: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
4494: LD_EXP 35
4498: PPUSH
4499: LD_STRING D7a-FSol1-1
4501: PPUSH
4502: CALL_OW 88
// wait ( 0 0$12 ) ;
4506: LD_INT 420
4508: PPUSH
4509: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
4513: LD_EXP 43
4517: PPUSH
4518: LD_STRING D7b-Bel-1
4520: PPUSH
4521: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
4525: LD_EXP 41
4529: PPUSH
4530: LD_STRING D7b-FSol1-1
4532: PPUSH
4533: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
4537: LD_EXP 43
4541: PPUSH
4542: LD_STRING D7b-Bel-2
4544: PPUSH
4545: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
4549: LD_EXP 40
4553: PPUSH
4554: LD_STRING D7b-RSol1-2
4556: PPUSH
4557: CALL_OW 88
// for unit in ruSolds do
4561: LD_ADDR_VAR 0 2
4565: PUSH
4566: LD_VAR 0 3
4570: PUSH
4571: FOR_IN
4572: IFFALSE 4805
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
4574: LD_EXP 38
4578: PPUSH
4579: LD_VAR 0 2
4583: PPUSH
4584: CALL_OW 296
4588: PUSH
4589: LD_INT 7
4591: LESS
4592: IFFALSE 4803
// begin InGameOn ;
4594: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
4598: LD_EXP 43
4602: PUSH
4603: LD_EXP 40
4607: PUSH
4608: EMPTY
4609: LIST
4610: LIST
4611: PPUSH
4612: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
4616: LD_EXP 38
4620: PPUSH
4621: LD_INT 88
4623: PPUSH
4624: LD_INT 66
4626: PPUSH
4627: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
4631: LD_EXP 43
4635: PPUSH
4636: LD_EXP 38
4640: PPUSH
4641: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
4645: LD_EXP 38
4649: PPUSH
4650: LD_INT 90
4652: PPUSH
4653: LD_INT 66
4655: PPUSH
4656: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
4660: LD_EXP 38
4664: PPUSH
4665: LD_STRING D7b-Bur-3
4667: PPUSH
4668: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
4672: LD_EXP 43
4676: PPUSH
4677: LD_STRING D7b-Bel-4
4679: PPUSH
4680: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
4684: LD_EXP 38
4688: PPUSH
4689: LD_STRING D7b-Bur-4
4691: PPUSH
4692: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
4696: LD_EXP 43
4700: PPUSH
4701: LD_STRING D7b-Bel-5
4703: PPUSH
4704: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
4708: LD_EXP 41
4712: PPUSH
4713: LD_STRING D7b-FSol1-5
4715: PPUSH
4716: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
4720: LD_EXP 43
4724: PPUSH
4725: LD_STRING D7b-Bel-6
4727: PPUSH
4728: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
4732: LD_EXP 38
4736: PPUSH
4737: LD_STRING D7b-Bur-6
4739: PPUSH
4740: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
4744: LD_EXP 40
4748: PPUSH
4749: LD_STRING D7b-RSol1-6
4751: PPUSH
4752: CALL_OW 88
// InGameOff ;
4756: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
4760: LD_VAR 0 3
4764: PPUSH
4765: LD_INT 3
4767: PPUSH
4768: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
4772: LD_EXP 43
4776: PPUSH
4777: LD_INT 3
4779: PPUSH
4780: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
4784: LD_STRING M3
4786: PPUSH
4787: CALL_OW 337
// secondAttack = true ;
4791: LD_ADDR_EXP 15
4795: PUSH
4796: LD_INT 1
4798: ST_TO_ADDR
// exit ;
4799: POP
4800: POP
4801: GO 4831
// end ;
4803: GO 4571
4805: POP
4806: POP
// Say ( Belkov , D7b-Bel-3 ) ;
4807: LD_EXP 43
4811: PPUSH
4812: LD_STRING D7b-Bel-3
4814: PPUSH
4815: CALL_OW 88
// InGameOff ;
4819: CALL_OW 9
// belkovWaitForGorky = true ;
4823: LD_ADDR_EXP 14
4827: PUSH
4828: LD_INT 1
4830: ST_TO_ADDR
// end ;
4831: PPOPN 3
4833: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
4834: LD_EXP 14
4838: IFFALSE 5148
4840: GO 4842
4842: DISABLE
4843: LD_INT 0
4845: PPUSH
4846: PPUSH
// begin enable ;
4847: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
4848: LD_ADDR_VAR 0 2
4852: PUSH
4853: LD_INT 22
4855: PUSH
4856: LD_INT 6
4858: PUSH
4859: EMPTY
4860: LIST
4861: LIST
4862: PUSH
4863: LD_INT 21
4865: PUSH
4866: LD_INT 1
4868: PUSH
4869: EMPTY
4870: LIST
4871: LIST
4872: PUSH
4873: EMPTY
4874: LIST
4875: LIST
4876: PPUSH
4877: CALL_OW 69
4881: ST_TO_ADDR
// for unit in ruSolds do
4882: LD_ADDR_VAR 0 1
4886: PUSH
4887: LD_VAR 0 2
4891: PUSH
4892: FOR_IN
4893: IFFALSE 5146
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
4895: LD_EXP 38
4899: PPUSH
4900: LD_VAR 0 1
4904: PPUSH
4905: CALL_OW 296
4909: PUSH
4910: LD_INT 7
4912: LESS
4913: IFFALSE 5144
// begin belkovWaitForGorky = false ;
4915: LD_ADDR_EXP 14
4919: PUSH
4920: LD_INT 0
4922: ST_TO_ADDR
// InGameOn ;
4923: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
4927: LD_EXP 43
4931: PUSH
4932: LD_EXP 40
4936: PUSH
4937: EMPTY
4938: LIST
4939: LIST
4940: PPUSH
4941: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
4945: LD_EXP 38
4949: PPUSH
4950: LD_INT 88
4952: PPUSH
4953: LD_INT 66
4955: PPUSH
4956: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
4960: LD_EXP 43
4964: PPUSH
4965: LD_EXP 38
4969: PPUSH
4970: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
4974: LD_EXP 38
4978: PPUSH
4979: LD_INT 90
4981: PPUSH
4982: LD_INT 66
4984: PPUSH
4985: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
4989: LD_EXP 43
4993: PPUSH
4994: LD_STRING D7b-Bel-3a
4996: PPUSH
4997: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5001: LD_EXP 38
5005: PPUSH
5006: LD_STRING D7b-Bur-3
5008: PPUSH
5009: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5013: LD_EXP 43
5017: PPUSH
5018: LD_STRING D7b-Bel-4
5020: PPUSH
5021: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5025: LD_EXP 38
5029: PPUSH
5030: LD_STRING D7b-Bur-4
5032: PPUSH
5033: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5037: LD_EXP 43
5041: PPUSH
5042: LD_STRING D7b-Bel-5
5044: PPUSH
5045: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5049: LD_EXP 41
5053: PPUSH
5054: LD_STRING D7b-FSol1-5
5056: PPUSH
5057: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5061: LD_EXP 43
5065: PPUSH
5066: LD_STRING D7b-Bel-6
5068: PPUSH
5069: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5073: LD_EXP 38
5077: PPUSH
5078: LD_STRING D7b-Bur-6
5080: PPUSH
5081: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5085: LD_EXP 40
5089: PPUSH
5090: LD_STRING D7a-RSol1-6
5092: PPUSH
5093: CALL_OW 88
// InGameOff ;
5097: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5101: LD_VAR 0 2
5105: PPUSH
5106: LD_INT 3
5108: PPUSH
5109: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5113: LD_EXP 43
5117: PPUSH
5118: LD_INT 3
5120: PPUSH
5121: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5125: LD_STRING M3
5127: PPUSH
5128: CALL_OW 337
// secondAttack = true ;
5132: LD_ADDR_EXP 15
5136: PUSH
5137: LD_INT 1
5139: ST_TO_ADDR
// exit ;
5140: POP
5141: POP
5142: GO 5148
// end ;
5144: GO 4892
5146: POP
5147: POP
// end ;
5148: PPOPN 2
5150: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5151: LD_INT 0
5153: PPUSH
5154: PPUSH
// DialogueOn ;
5155: CALL_OW 6
// Say ( Johanna , D8-FSol1-1 ) ;
5159: LD_EXP 35
5163: PPUSH
5164: LD_STRING D8-FSol1-1
5166: PPUSH
5167: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5171: LD_EXP 36
5175: PPUSH
5176: LD_STRING D8-Glad-1
5178: PPUSH
5179: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5183: LD_EXP 38
5187: PPUSH
5188: LD_STRING D8-Bur-1
5190: PPUSH
5191: CALL_OW 88
// DialogueOff ;
5195: CALL_OW 7
// secondAttack = false ;
5199: LD_ADDR_EXP 15
5203: PUSH
5204: LD_INT 0
5206: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5207: LD_ADDR_VAR 0 2
5211: PUSH
5212: LD_INT 22
5214: PUSH
5215: LD_INT 3
5217: PUSH
5218: EMPTY
5219: LIST
5220: LIST
5221: PUSH
5222: LD_INT 21
5224: PUSH
5225: LD_INT 1
5227: PUSH
5228: EMPTY
5229: LIST
5230: LIST
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PPUSH
5236: CALL_OW 69
5240: PPUSH
5241: LD_INT 23
5243: PPUSH
5244: CALL_OW 74
5248: ST_TO_ADDR
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_apeman ] ] ) ) ;
5249: LD_INT 22
5251: PUSH
5252: LD_INT 1
5254: PUSH
5255: EMPTY
5256: LIST
5257: LIST
5258: PUSH
5259: LD_INT 21
5261: PUSH
5262: LD_INT 1
5264: PUSH
5265: EMPTY
5266: LIST
5267: LIST
5268: PUSH
5269: LD_INT 25
5271: PUSH
5272: LD_INT 12
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: PUSH
5279: EMPTY
5280: LIST
5281: LIST
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: PPUSH
5289: CALL_OW 122
// wait ( 0 0$1 ) ;
5293: LD_INT 35
5295: PPUSH
5296: CALL_OW 67
// AddComAttackUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_class , class_apeman ] ] ) , nearRuUnit ) ;
5300: LD_INT 22
5302: PUSH
5303: LD_INT 1
5305: PUSH
5306: EMPTY
5307: LIST
5308: LIST
5309: PUSH
5310: LD_INT 21
5312: PUSH
5313: LD_INT 1
5315: PUSH
5316: EMPTY
5317: LIST
5318: LIST
5319: PUSH
5320: LD_INT 25
5322: PUSH
5323: LD_INT 12
5325: PUSH
5326: EMPTY
5327: LIST
5328: LIST
5329: PUSH
5330: EMPTY
5331: LIST
5332: LIST
5333: LIST
5334: PPUSH
5335: CALL_OW 69
5339: PPUSH
5340: LD_VAR 0 2
5344: PPUSH
5345: CALL_OW 175
// end ;
5349: LD_VAR 0 1
5353: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
5354: LD_INT 23
5356: PPUSH
5357: CALL_OW 256
5361: PUSH
5362: LD_INT 350
5364: LESS
5365: PUSH
5366: LD_INT 23
5368: PPUSH
5369: CALL_OW 256
5373: PUSH
5374: LD_INT 250
5376: GREATER
5377: AND
5378: PUSH
5379: LD_INT 20
5381: PPUSH
5382: LD_INT 22
5384: PUSH
5385: LD_INT 3
5387: PUSH
5388: EMPTY
5389: LIST
5390: LIST
5391: PUSH
5392: LD_INT 21
5394: PUSH
5395: LD_INT 1
5397: PUSH
5398: EMPTY
5399: LIST
5400: LIST
5401: PUSH
5402: EMPTY
5403: LIST
5404: LIST
5405: PPUSH
5406: CALL_OW 70
5410: PUSH
5411: LD_INT 0
5413: GREATER
5414: AND
5415: IFFALSE 5432
5417: GO 5419
5419: DISABLE
// begin Say ( Johanna , D8-FSol1-2 ) ;
5420: LD_EXP 35
5424: PPUSH
5425: LD_STRING D8-FSol1-2
5427: PPUSH
5428: CALL_OW 88
// end ;
5432: END
// every 0 0$1 trigger IsDying ( am_bun ) do
5433: LD_INT 23
5435: PPUSH
5436: CALL_OW 303
5440: IFFALSE 5502
5442: GO 5444
5444: DISABLE
// begin Say ( Johanna , D8-FSol1-2a ) ;
5445: LD_EXP 35
5449: PPUSH
5450: LD_STRING D8-FSol1-2a
5452: PPUSH
5453: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
5457: LD_EXP 36
5461: PUSH
5462: LD_EXP 35
5466: PUSH
5467: EMPTY
5468: LIST
5469: LIST
5470: PPUSH
5471: LD_INT 21
5473: PPUSH
5474: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
5478: LD_EXP 36
5482: PPUSH
5483: LD_STRING D8-Glad-2
5485: PPUSH
5486: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
5490: LD_EXP 38
5494: PPUSH
5495: LD_STRING D8-Bur-2
5497: PPUSH
5498: CALL_OW 88
// end ;
5502: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
5503: LD_INT 22
5505: PUSH
5506: LD_INT 1
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: LD_INT 50
5525: PUSH
5526: EMPTY
5527: LIST
5528: PUSH
5529: EMPTY
5530: LIST
5531: LIST
5532: LIST
5533: PPUSH
5534: CALL_OW 69
5538: PUSH
5539: LD_INT 0
5541: GREATER
5542: IFFALSE 5670
5544: GO 5546
5546: DISABLE
5547: LD_INT 0
5549: PPUSH
// begin enable ;
5550: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
5551: LD_ADDR_VAR 0 1
5555: PUSH
5556: LD_INT 21
5558: PPUSH
5559: LD_INT 22
5561: PUSH
5562: LD_INT 1
5564: PUSH
5565: EMPTY
5566: LIST
5567: LIST
5568: PUSH
5569: LD_INT 21
5571: PUSH
5572: LD_INT 1
5574: PUSH
5575: EMPTY
5576: LIST
5577: LIST
5578: PUSH
5579: EMPTY
5580: LIST
5581: LIST
5582: PPUSH
5583: CALL_OW 70
5587: PUSH
5588: FOR_IN
5589: IFFALSE 5668
// begin if unit = Gladstone then
5591: LD_VAR 0 1
5595: PUSH
5596: LD_EXP 36
5600: EQUAL
5601: IFFALSE 5631
// begin gladstoneEscape = true ;
5603: LD_ADDR_EXP 17
5607: PUSH
5608: LD_INT 1
5610: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
5611: LD_EXP 36
5615: PPUSH
5616: LD_EXP 25
5620: PUSH
5621: LD_STRING Gladstone
5623: STR
5624: PPUSH
5625: CALL_OW 38
// end else
5629: GO 5657
// begin JohannaEscape = true ;
5631: LD_ADDR_EXP 18
5635: PUSH
5636: LD_INT 1
5638: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
5639: LD_EXP 35
5643: PPUSH
5644: LD_EXP 25
5648: PUSH
5649: LD_STRING Johanna
5651: STR
5652: PPUSH
5653: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 64
// end ;
5666: GO 5588
5668: POP
5669: POP
// end ;
5670: PPOPN 1
5672: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
5673: LD_EXP 36
5677: PPUSH
5678: CALL_OW 301
5682: PUSH
5683: LD_EXP 35
5687: PPUSH
5688: CALL_OW 301
5692: AND
5693: IFFALSE 5710
5695: GO 5697
5697: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
5698: LD_EXP 38
5702: PPUSH
5703: LD_STRING D9-Bur-1
5705: PPUSH
5706: CALL_OW 88
5710: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
5711: LD_EXP 35
5715: PPUSH
5716: CALL_OW 301
5720: PUSH
5721: LD_EXP 17
5725: AND
5726: PUSH
5727: LD_EXP 18
5731: NOT
5732: AND
5733: IFFALSE 5750
5735: GO 5737
5737: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
5738: LD_EXP 38
5742: PPUSH
5743: LD_STRING D9-Bur-1a
5745: PPUSH
5746: CALL_OW 88
5750: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
5751: LD_EXP 36
5755: PPUSH
5756: CALL_OW 301
5760: PUSH
5761: LD_EXP 17
5765: NOT
5766: AND
5767: PUSH
5768: LD_EXP 18
5772: AND
5773: IFFALSE 5790
5775: GO 5777
5777: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
5778: LD_EXP 38
5782: PPUSH
5783: LD_STRING D9-Bur-1b
5785: PPUSH
5786: CALL_OW 88
5790: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
5791: LD_EXP 17
5795: PUSH
5796: LD_EXP 18
5800: AND
5801: IFFALSE 5818
5803: GO 5805
5805: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
5806: LD_EXP 38
5810: PPUSH
5811: LD_STRING D9-Bur-1c
5813: PPUSH
5814: CALL_OW 88
5818: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
5819: LD_INT 22
5821: PUSH
5822: LD_INT 1
5824: PUSH
5825: EMPTY
5826: LIST
5827: LIST
5828: PUSH
5829: LD_INT 21
5831: PUSH
5832: LD_INT 3
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: PUSH
5839: LD_INT 50
5841: PUSH
5842: EMPTY
5843: LIST
5844: PUSH
5845: EMPTY
5846: LIST
5847: LIST
5848: LIST
5849: PPUSH
5850: CALL_OW 69
5854: PUSH
5855: LD_INT 0
5857: EQUAL
5858: IFFALSE 6106
5860: GO 5862
5862: DISABLE
5863: LD_INT 0
5865: PPUSH
5866: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
5867: LD_ADDR_VAR 0 1
5871: PUSH
5872: LD_INT 22
5874: PUSH
5875: LD_INT 3
5877: PUSH
5878: EMPTY
5879: LIST
5880: LIST
5881: PUSH
5882: LD_INT 21
5884: PUSH
5885: LD_INT 1
5887: PUSH
5888: EMPTY
5889: LIST
5890: LIST
5891: PUSH
5892: LD_INT 50
5894: PUSH
5895: EMPTY
5896: LIST
5897: PUSH
5898: EMPTY
5899: LIST
5900: LIST
5901: LIST
5902: PPUSH
5903: CALL_OW 69
5907: PUSH
5908: LD_EXP 38
5912: PUSH
5913: LD_EXP 46
5917: PUSH
5918: LD_EXP 43
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: LIST
5927: DIFF
5928: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
5929: LD_ADDR_VAR 0 2
5933: PUSH
5934: LD_VAR 0 1
5938: PPUSH
5939: LD_INT 26
5941: PUSH
5942: LD_INT 1
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: PPUSH
5949: CALL_OW 72
5953: ST_TO_ADDR
// DialogueOn ;
5954: CALL_OW 6
// if IsOK ( Belkov ) then
5958: LD_EXP 43
5962: PPUSH
5963: CALL_OW 302
5967: IFFALSE 5981
// Say ( Belkov , D10-Bel-1 ) ;
5969: LD_EXP 43
5973: PPUSH
5974: LD_STRING D10-Bel-1
5976: PPUSH
5977: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
5981: LD_VAR 0 1
5985: PUSH
5986: LD_INT 0
5988: GREATER
5989: PUSH
5990: LD_VAR 0 2
5994: PUSH
5995: LD_INT 0
5997: GREATER
5998: PUSH
5999: LD_EXP 43
6003: PPUSH
6004: CALL_OW 302
6008: OR
6009: AND
6010: IFFALSE 6077
// begin Say ( Burlak , D10-Bur-1 ) ;
6012: LD_EXP 38
6016: PPUSH
6017: LD_STRING D10-Bur-1
6019: PPUSH
6020: CALL_OW 88
// if IsOK ( Belkov ) then
6024: LD_EXP 43
6028: PPUSH
6029: CALL_OW 302
6033: IFFALSE 6049
// Say ( Belkov , D10-Bel-1a ) else
6035: LD_EXP 43
6039: PPUSH
6040: LD_STRING D10-Bel-1a
6042: PPUSH
6043: CALL_OW 88
6047: GO 6065
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6049: LD_VAR 0 2
6053: PUSH
6054: LD_INT 1
6056: ARRAY
6057: PPUSH
6058: LD_STRING D10-RSol1-1
6060: PPUSH
6061: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6065: LD_EXP 38
6069: PPUSH
6070: LD_STRING D10-Bur-2
6072: PPUSH
6073: CALL_OW 88
// end ; DialogueOff ;
6077: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6081: LD_STRING M4a
6083: PPUSH
6084: CALL_OW 337
// evacuationAvailable = true ;
6088: LD_ADDR_EXP 20
6092: PUSH
6093: LD_INT 1
6095: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6096: LD_INT 1
6098: PPUSH
6099: LD_INT 1
6101: PPUSH
6102: CALL_OW 424
// end ;
6106: PPOPN 2
6108: END
// every 0 0$15 trigger evacuationAvailable do
6109: LD_EXP 20
6113: IFFALSE 6686
6115: GO 6117
6117: DISABLE
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6118: LD_EXP 45
6122: PPUSH
6123: LD_INT 22
6125: PPUSH
6126: LD_INT 1
6128: PPUSH
6129: CALL_OW 49
// wait ( 0 0$3 ) ;
6133: LD_INT 105
6135: PPUSH
6136: CALL_OW 67
// DialogueOn ;
6140: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6144: LD_EXP 45
6148: PPUSH
6149: LD_STRING D11b-Kir-1
6151: PPUSH
6152: CALL_OW 94
// if IsOK ( Belkov ) then
6156: LD_EXP 43
6160: PPUSH
6161: CALL_OW 302
6165: IFFALSE 6193
// begin Say ( Belkov , D11b-Bel-1 ) ;
6167: LD_EXP 43
6171: PPUSH
6172: LD_STRING D11b-Bel-1
6174: PPUSH
6175: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
6179: LD_EXP 43
6183: PPUSH
6184: LD_STRING D11b-Bel-1a
6186: PPUSH
6187: CALL_OW 94
// end else
6191: GO 6242
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , true ) ;
6193: LD_INT 22
6195: PUSH
6196: LD_INT 3
6198: PUSH
6199: EMPTY
6200: LIST
6201: LIST
6202: PUSH
6203: LD_INT 21
6205: PUSH
6206: LD_INT 1
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: PUSH
6213: LD_INT 50
6215: PUSH
6216: EMPTY
6217: LIST
6218: PUSH
6219: EMPTY
6220: LIST
6221: LIST
6222: LIST
6223: PPUSH
6224: CALL_OW 69
6228: PPUSH
6229: LD_STRING D11b-RSol1-1
6231: PPUSH
6232: LD_STRING D11b-RFSol1-1
6234: PPUSH
6235: LD_INT 1
6237: PPUSH
6238: CALL 7049 0 4
// end ; if FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
6242: LD_INT 22
6244: PUSH
6245: LD_INT 0
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: PUSH
6252: LD_INT 25
6254: PUSH
6255: LD_INT 12
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: PPUSH
6266: CALL_OW 69
6270: PUSH
6271: LD_INT 0
6273: GREATER
6274: IFFALSE 6290
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
6276: LD_EXP 45
6280: PPUSH
6281: LD_STRING D11b1-Kir-1
6283: PPUSH
6284: CALL_OW 94
6288: GO 6302
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
6290: LD_EXP 45
6294: PPUSH
6295: LD_STRING D11b2-Kir-1
6297: PPUSH
6298: CALL_OW 94
// if attackedByApeman and FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
6302: LD_EXP 5
6306: PUSH
6307: LD_INT 22
6309: PUSH
6310: LD_INT 0
6312: PUSH
6313: EMPTY
6314: LIST
6315: LIST
6316: PUSH
6317: LD_INT 25
6319: PUSH
6320: LD_INT 12
6322: PUSH
6323: EMPTY
6324: LIST
6325: LIST
6326: PUSH
6327: EMPTY
6328: LIST
6329: LIST
6330: PPUSH
6331: CALL_OW 69
6335: PUSH
6336: LD_INT 0
6338: GREATER
6339: AND
6340: IFFALSE 6508
// begin Say ( Burlak , D11b1-Bur-1 ) ;
6342: LD_EXP 38
6346: PPUSH
6347: LD_STRING D11b1-Bur-1
6349: PPUSH
6350: CALL_OW 88
// if IsOk ( Belkov ) then
6354: LD_EXP 43
6358: PPUSH
6359: CALL_OW 302
6363: IFFALSE 6379
// Say ( Belkov , D11b2-Bel-1 ) else
6365: LD_EXP 43
6369: PPUSH
6370: LD_STRING D11b2-Bel-1
6372: PPUSH
6373: CALL_OW 88
6377: GO 6428
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6379: LD_INT 22
6381: PUSH
6382: LD_INT 1
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: PUSH
6389: LD_INT 21
6391: PUSH
6392: LD_INT 1
6394: PUSH
6395: EMPTY
6396: LIST
6397: LIST
6398: PUSH
6399: LD_INT 50
6401: PUSH
6402: EMPTY
6403: LIST
6404: PUSH
6405: EMPTY
6406: LIST
6407: LIST
6408: LIST
6409: PPUSH
6410: CALL_OW 69
6414: PPUSH
6415: LD_STRING D11b1-RSol1-1
6417: PPUSH
6418: LD_STRING D11b1-RFSol1-1
6420: PPUSH
6421: LD_INT 0
6423: PPUSH
6424: CALL 7049 0 4
// if IsOk ( Belkov ) then
6428: LD_EXP 43
6432: PPUSH
6433: CALL_OW 302
6437: IFFALSE 6453
// Say ( Belkov , D11b1-Bel-1 ) else
6439: LD_EXP 43
6443: PPUSH
6444: LD_STRING D11b1-Bel-1
6446: PPUSH
6447: CALL_OW 88
6451: GO 6502
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6453: LD_INT 22
6455: PUSH
6456: LD_INT 1
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 21
6465: PUSH
6466: LD_INT 1
6468: PUSH
6469: EMPTY
6470: LIST
6471: LIST
6472: PUSH
6473: LD_INT 50
6475: PUSH
6476: EMPTY
6477: LIST
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: LIST
6483: PPUSH
6484: CALL_OW 69
6488: PPUSH
6489: LD_STRING D11b1-RSol1-1
6491: PPUSH
6492: LD_STRING D11b1-RFSol1-1
6494: PPUSH
6495: LD_INT 0
6497: PPUSH
6498: CALL 7049 0 4
// DialogueOff ;
6502: CALL_OW 7
// exit ;
6506: GO 6686
// end ; if spotWaterfall then
6508: LD_EXP 6
6512: IFFALSE 6606
// begin Say ( Burlak , D11b1-Bur-1a ) ;
6514: LD_EXP 38
6518: PPUSH
6519: LD_STRING D11b1-Bur-1a
6521: PPUSH
6522: CALL_OW 88
// if IsOk ( Belkov ) then
6526: LD_EXP 43
6530: PPUSH
6531: CALL_OW 302
6535: IFFALSE 6551
// Say ( Belkov , D11b2-Bel-1 ) else
6537: LD_EXP 43
6541: PPUSH
6542: LD_STRING D11b2-Bel-1
6544: PPUSH
6545: CALL_OW 88
6549: GO 6600
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6551: LD_INT 22
6553: PUSH
6554: LD_INT 1
6556: PUSH
6557: EMPTY
6558: LIST
6559: LIST
6560: PUSH
6561: LD_INT 21
6563: PUSH
6564: LD_INT 1
6566: PUSH
6567: EMPTY
6568: LIST
6569: LIST
6570: PUSH
6571: LD_INT 50
6573: PUSH
6574: EMPTY
6575: LIST
6576: PUSH
6577: EMPTY
6578: LIST
6579: LIST
6580: LIST
6581: PPUSH
6582: CALL_OW 69
6586: PPUSH
6587: LD_STRING D11b1-RSol1-1
6589: PPUSH
6590: LD_STRING D11b1-RFSol1-1
6592: PPUSH
6593: LD_INT 0
6595: PPUSH
6596: CALL 7049 0 4
// DialogueOff ;
6600: CALL_OW 7
// exit ;
6604: GO 6686
// end ; if IsOk ( Belkov ) then
6606: LD_EXP 43
6610: PPUSH
6611: CALL_OW 302
6615: IFFALSE 6631
// Say ( Belkov , D11b1-Bel-1 ) else
6617: LD_EXP 43
6621: PPUSH
6622: LD_STRING D11b1-Bel-1
6624: PPUSH
6625: CALL_OW 88
6629: GO 6680
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
6631: LD_INT 22
6633: PUSH
6634: LD_INT 1
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: PUSH
6641: LD_INT 21
6643: PUSH
6644: LD_INT 1
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 50
6653: PUSH
6654: EMPTY
6655: LIST
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: LIST
6661: PPUSH
6662: CALL_OW 69
6666: PPUSH
6667: LD_STRING D11b1-RSol1-1
6669: PPUSH
6670: LD_STRING D11b1-RFSol1-1
6672: PPUSH
6673: LD_INT 0
6675: PPUSH
6676: CALL 7049 0 4
// DialogueOff ;
6680: CALL_OW 7
// exit ;
6684: GO 6686
// end ;
6686: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
6687: LD_INT 3
6689: PPUSH
6690: LD_EXP 45
6694: PPUSH
6695: CALL_OW 292
6699: IFFALSE 6929
6701: GO 6703
6703: DISABLE
6704: LD_INT 0
6706: PPUSH
// begin CenterNowOnUnits ( Kirilenkova ) ;
6707: LD_EXP 45
6711: PPUSH
6712: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
6716: LD_ADDR_VAR 0 1
6720: PUSH
6721: LD_INT 22
6723: PUSH
6724: LD_INT 3
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: PUSH
6731: LD_INT 21
6733: PUSH
6734: LD_INT 1
6736: PUSH
6737: EMPTY
6738: LIST
6739: LIST
6740: PUSH
6741: LD_INT 50
6743: PUSH
6744: EMPTY
6745: LIST
6746: PUSH
6747: EMPTY
6748: LIST
6749: LIST
6750: LIST
6751: PPUSH
6752: CALL_OW 69
6756: PPUSH
6757: LD_EXP 45
6761: PPUSH
6762: CALL_OW 74
6766: ST_TO_ADDR
// DialogueOn ;
6767: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
6771: LD_EXP 45
6775: PPUSH
6776: LD_STRING D11a-Kir-1
6778: PPUSH
6779: CALL_OW 88
// if nearUnit = Belkov then
6783: LD_VAR 0 1
6787: PUSH
6788: LD_EXP 43
6792: EQUAL
6793: IFFALSE 6833
// begin Say ( Belkov , D11a-Bel-1 ) ;
6795: LD_EXP 43
6799: PPUSH
6800: LD_STRING D11a-Bel-1
6802: PPUSH
6803: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
6807: LD_EXP 45
6811: PPUSH
6812: LD_STRING D11a-Kir-2
6814: PPUSH
6815: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
6819: LD_EXP 43
6823: PPUSH
6824: LD_STRING D11a-Bel-2
6826: PPUSH
6827: CALL_OW 88
// end else
6831: GO 6874
// begin if GetSex ( nearUnit ) = sex_male then
6833: LD_VAR 0 1
6837: PPUSH
6838: CALL_OW 258
6842: PUSH
6843: LD_INT 1
6845: EQUAL
6846: IFFALSE 6862
// Say ( nearUnit , D11a-RSol1-2 ) else
6848: LD_VAR 0 1
6852: PPUSH
6853: LD_STRING D11a-RSol1-2
6855: PPUSH
6856: CALL_OW 88
6860: GO 6874
// Say ( nearUnit , D11a-RFSol1-2 ) ;
6862: LD_VAR 0 1
6866: PPUSH
6867: LD_STRING D11a-RFSol1-2
6869: PPUSH
6870: CALL_OW 88
// end ; DialogueOff ;
6874: CALL_OW 7
// SetSide ( Kirilenkova , 3 ) ;
6878: LD_EXP 45
6882: PPUSH
6883: LD_INT 3
6885: PPUSH
6886: CALL_OW 235
// jelenaSaved = true ;
6890: LD_ADDR_EXP 19
6894: PUSH
6895: LD_INT 1
6897: ST_TO_ADDR
// wait ( 0 0$5 ) ;
6898: LD_INT 175
6900: PPUSH
6901: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
6905: LD_EXP 45
6909: PPUSH
6910: LD_STRING D11c-Kir-1
6912: PPUSH
6913: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
6917: LD_EXP 38
6921: PPUSH
6922: LD_STRING D11c-Bur-1
6924: PPUSH
6925: CALL_OW 88
// end ;
6929: PPOPN 1
6931: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
6932: LD_EXP 20
6936: PUSH
6937: LD_INT 1
6939: PPUSH
6940: LD_INT 22
6942: PUSH
6943: LD_INT 3
6945: PUSH
6946: EMPTY
6947: LIST
6948: LIST
6949: PUSH
6950: LD_INT 21
6952: PUSH
6953: LD_INT 1
6955: PUSH
6956: EMPTY
6957: LIST
6958: LIST
6959: PUSH
6960: EMPTY
6961: LIST
6962: LIST
6963: PPUSH
6964: CALL_OW 70
6968: PUSH
6969: LD_INT 0
6971: GREATER
6972: AND
6973: IFFALSE 6985
6975: GO 6977
6977: DISABLE
// begin Query ( QExit1 ) ;
6978: LD_STRING QExit1
6980: PPUSH
6981: CALL_OW 97
// end ; end_of_file
6985: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
6986: LD_INT 0
6988: PPUSH
6989: PPUSH
// if exist_mode then
6990: LD_VAR 0 2
6994: IFFALSE 7019
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
6996: LD_ADDR_VAR 0 4
7000: PUSH
7001: LD_EXP 26
7005: PUSH
7006: LD_VAR 0 1
7010: STR
7011: PPUSH
7012: CALL_OW 34
7016: ST_TO_ADDR
7017: GO 7034
// unit := NewCharacter ( ident ) ;
7019: LD_ADDR_VAR 0 4
7023: PUSH
7024: LD_VAR 0 1
7028: PPUSH
7029: CALL_OW 25
7033: ST_TO_ADDR
// result := unit ;
7034: LD_ADDR_VAR 0 3
7038: PUSH
7039: LD_VAR 0 4
7043: ST_TO_ADDR
// end ;
7044: LD_VAR 0 3
7048: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7049: LD_INT 0
7051: PPUSH
7052: PPUSH
7053: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7054: LD_ADDR_VAR 0 1
7058: PUSH
7059: LD_VAR 0 1
7063: PUSH
7064: LD_EXP 38
7068: PUSH
7069: LD_EXP 46
7073: PUSH
7074: LD_EXP 43
7078: PUSH
7079: LD_EXP 45
7083: PUSH
7084: EMPTY
7085: LIST
7086: LIST
7087: LIST
7088: LIST
7089: DIFF
7090: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7091: LD_ADDR_VAR 0 7
7095: PUSH
7096: LD_VAR 0 1
7100: PUSH
7101: LD_INT 1
7103: PPUSH
7104: LD_VAR 0 1
7108: PPUSH
7109: CALL_OW 12
7113: ARRAY
7114: ST_TO_ADDR
// if radio then
7115: LD_VAR 0 4
7119: IFFALSE 7168
// begin if GetSex ( speaker ) = sex_male then
7121: LD_VAR 0 7
7125: PPUSH
7126: CALL_OW 258
7130: PUSH
7131: LD_INT 1
7133: EQUAL
7134: IFFALSE 7152
// SayRadio ( speaker , dialogMID ) else
7136: LD_VAR 0 7
7140: PPUSH
7141: LD_VAR 0 2
7145: PPUSH
7146: CALL_OW 94
7150: GO 7166
// SayRadio ( speaker , dialogFID ) ;
7152: LD_VAR 0 7
7156: PPUSH
7157: LD_VAR 0 3
7161: PPUSH
7162: CALL_OW 94
// end else
7166: GO 7213
// begin if GetSex ( speaker ) = sex_male then
7168: LD_VAR 0 7
7172: PPUSH
7173: CALL_OW 258
7177: PUSH
7178: LD_INT 1
7180: EQUAL
7181: IFFALSE 7199
// Say ( speaker , dialogMID ) else
7183: LD_VAR 0 7
7187: PPUSH
7188: LD_VAR 0 2
7192: PPUSH
7193: CALL_OW 88
7197: GO 7213
// Say ( speaker , dialogFID ) ;
7199: LD_VAR 0 7
7203: PPUSH
7204: LD_VAR 0 3
7208: PPUSH
7209: CALL_OW 88
// end ; result := speaker ;
7213: LD_ADDR_VAR 0 5
7217: PUSH
7218: LD_VAR 0 7
7222: ST_TO_ADDR
// end ;
7223: LD_VAR 0 5
7227: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
7228: LD_INT 0
7230: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
7231: LD_VAR 0 1
7235: PPUSH
7236: CALL_OW 255
7240: PUSH
7241: LD_OWVAR 2
7245: EQUAL
7246: PUSH
7247: LD_VAR 0 1
7251: PPUSH
7252: CALL_OW 302
7256: AND
7257: IFFALSE 7279
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
7259: LD_VAR 0 1
7263: PPUSH
7264: LD_EXP 25
7268: PUSH
7269: LD_VAR 0 2
7273: STR
7274: PPUSH
7275: CALL_OW 38
// end ;
7279: LD_VAR 0 3
7283: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
7284: LD_INT 0
7286: PPUSH
7287: PPUSH
7288: PPUSH
// resultCharactersToSave = [ ] ;
7289: LD_ADDR_VAR 0 5
7293: PUSH
7294: EMPTY
7295: ST_TO_ADDR
// for unit in characters do
7296: LD_ADDR_VAR 0 4
7300: PUSH
7301: LD_VAR 0 1
7305: PUSH
7306: FOR_IN
7307: IFFALSE 7355
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
7309: LD_VAR 0 4
7313: PPUSH
7314: CALL_OW 255
7318: PUSH
7319: LD_OWVAR 2
7323: EQUAL
7324: PUSH
7325: LD_VAR 0 4
7329: PPUSH
7330: CALL_OW 302
7334: AND
7335: IFFALSE 7353
// resultCharactersToSave = resultCharactersToSave ^ unit ;
7337: LD_ADDR_VAR 0 5
7341: PUSH
7342: LD_VAR 0 5
7346: PUSH
7347: LD_VAR 0 4
7351: ADD
7352: ST_TO_ADDR
7353: GO 7306
7355: POP
7356: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
7357: LD_VAR 0 5
7361: PPUSH
7362: LD_EXP 25
7366: PUSH
7367: LD_VAR 0 2
7371: STR
7372: PPUSH
7373: CALL_OW 38
// end ;
7377: LD_VAR 0 3
7381: RET
// export function MoveToHill ; begin
7382: LD_INT 0
7384: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
7385: LD_EXP 39
7389: PPUSH
7390: LD_INT 65
7392: PPUSH
7393: LD_INT 59
7395: PPUSH
7396: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
7400: LD_EXP 39
7404: PPUSH
7405: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
7409: LD_EXP 40
7413: PPUSH
7414: LD_INT 65
7416: PPUSH
7417: LD_INT 58
7419: PPUSH
7420: CALL_OW 111
// AddComCrawl ( Saseda ) ;
7424: LD_EXP 40
7428: PPUSH
7429: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
7433: LD_EXP 41
7437: PPUSH
7438: LD_INT 64
7440: PPUSH
7441: LD_INT 57
7443: PPUSH
7444: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
7448: LD_EXP 41
7452: PPUSH
7453: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
7457: LD_EXP 42
7461: PPUSH
7462: LD_INT 64
7464: PPUSH
7465: LD_INT 56
7467: PPUSH
7468: CALL_OW 111
// AddComCrawl ( Balei ) ;
7472: LD_EXP 42
7476: PPUSH
7477: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
7481: LD_EXP 43
7485: PPUSH
7486: LD_INT 63
7488: PPUSH
7489: LD_INT 55
7491: PPUSH
7492: CALL_OW 111
// AddComCrawl ( Belkov ) ;
7496: LD_EXP 43
7500: PPUSH
7501: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
7505: LD_EXP 44
7509: PPUSH
7510: LD_INT 66
7512: PPUSH
7513: LD_INT 58
7515: PPUSH
7516: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
7520: LD_EXP 44
7524: PPUSH
7525: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
7529: LD_EXP 46
7533: PPUSH
7534: CALL_OW 255
7538: PUSH
7539: LD_INT 6
7541: EQUAL
7542: PUSH
7543: LD_EXP 10
7547: AND
7548: IFFALSE 7574
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
7550: LD_EXP 46
7554: PPUSH
7555: LD_INT 63
7557: PPUSH
7558: LD_INT 54
7560: PPUSH
7561: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
7565: LD_EXP 46
7569: PPUSH
7570: CALL_OW 197
// end ; end ; end_of_file
7574: LD_VAR 0 1
7578: RET
// export function BurlakDying ; begin
7579: LD_INT 0
7581: PPUSH
// YouLost ( Burlak ) ;
7582: LD_STRING Burlak
7584: PPUSH
7585: CALL_OW 104
// end ;
7589: LD_VAR 0 1
7593: RET
// every 0 0$1 trigger kirovSolds = 0 do
7594: LD_EXP 48
7598: PUSH
7599: LD_INT 0
7601: EQUAL
7602: IFFALSE 7614
7604: GO 7606
7606: DISABLE
// begin YouLost ( KirovSoldsDie ) ;
7607: LD_STRING KirovSoldsDie
7609: PPUSH
7610: CALL_OW 104
// end ; end_of_file
7614: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
7615: LD_EXP 20
7619: PUSH
7620: LD_INT 1
7622: PPUSH
7623: LD_INT 22
7625: PUSH
7626: LD_INT 3
7628: PUSH
7629: EMPTY
7630: LIST
7631: LIST
7632: PUSH
7633: LD_INT 21
7635: PUSH
7636: LD_INT 1
7638: PUSH
7639: EMPTY
7640: LIST
7641: LIST
7642: PUSH
7643: EMPTY
7644: LIST
7645: LIST
7646: PPUSH
7647: CALL_OW 71
7651: PUSH
7652: LD_INT 0
7654: EQUAL
7655: AND
7656: IFFALSE 7800
7658: GO 7660
7660: DISABLE
7661: LD_INT 0
7663: PPUSH
// begin case Query ( QExit2 ) of 1 :
7664: LD_STRING QExit2
7666: PPUSH
7667: CALL_OW 97
7671: PUSH
7672: LD_INT 1
7674: DOUBLE
7675: EQUAL
7676: IFTRUE 7680
7678: GO 7780
7680: POP
// begin if IsOk ( Belkov ) then
7681: LD_EXP 43
7685: PPUSH
7686: CALL_OW 302
7690: IFFALSE 7706
// Say ( Belkov , D12-Bel-1 ) else
7692: LD_EXP 43
7696: PPUSH
7697: LD_STRING D12-Bel-1
7699: PPUSH
7700: CALL_OW 88
7704: GO 7766
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
7706: LD_INT 22
7708: PUSH
7709: LD_INT 3
7711: PUSH
7712: EMPTY
7713: LIST
7714: LIST
7715: PUSH
7716: LD_INT 21
7718: PUSH
7719: LD_INT 1
7721: PUSH
7722: EMPTY
7723: LIST
7724: LIST
7725: PUSH
7726: LD_INT 50
7728: PUSH
7729: EMPTY
7730: LIST
7731: PUSH
7732: LD_INT 26
7734: PUSH
7735: LD_INT 1
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: EMPTY
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: PPUSH
7748: CALL_OW 69
7752: PPUSH
7753: LD_STRING D12-RSol1-1
7755: PPUSH
7756: LD_STRING 
7758: PPUSH
7759: LD_INT 0
7761: PPUSH
7762: CALL 7049 0 4
// SetRewards ;
7766: CALL 7803 0 0
// SavePlayerCharacters ;
7770: CALL 8154 0 0
// YouWin ;
7774: CALL_OW 103
// end ; 2 :
7778: GO 7800
7780: LD_INT 2
7782: DOUBLE
7783: EQUAL
7784: IFTRUE 7788
7786: GO 7799
7788: POP
// begin wait ( 0 0$5 ) ;
7789: LD_INT 175
7791: PPUSH
7792: CALL_OW 67
// enable ;
7796: ENABLE
// end ; end ;
7797: GO 7800
7799: POP
// end ;
7800: PPOPN 1
7802: END
// function SetRewards ; begin
7803: LD_INT 0
7805: PPUSH
// if not gladstoneEscape and not JohannaEscape then
7806: LD_EXP 17
7810: NOT
7811: PUSH
7812: LD_EXP 18
7816: NOT
7817: AND
7818: IFFALSE 7830
// AddMedal ( NoEscape , 1 ) ;
7820: LD_STRING NoEscape
7822: PPUSH
7823: LD_INT 1
7825: PPUSH
7826: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
7830: LD_EXP 17
7834: PUSH
7835: LD_EXP 18
7839: NOT
7840: AND
7841: IFFALSE 7854
// AddMedal ( NoEscape , - 1 ) ;
7843: LD_STRING NoEscape
7845: PPUSH
7846: LD_INT 1
7848: NEG
7849: PPUSH
7850: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
7854: LD_EXP 17
7858: NOT
7859: PUSH
7860: LD_EXP 18
7864: AND
7865: IFFALSE 7878
// AddMedal ( NoEscape , - 2 ) ;
7867: LD_STRING NoEscape
7869: PPUSH
7870: LD_INT 2
7872: NEG
7873: PPUSH
7874: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
7878: LD_EXP 17
7882: PUSH
7883: LD_EXP 18
7887: AND
7888: IFFALSE 7901
// AddMedal ( NoEscape , - 3 ) ;
7890: LD_STRING NoEscape
7892: PPUSH
7893: LD_INT 3
7895: NEG
7896: PPUSH
7897: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
7901: LD_EXP 10
7905: PUSH
7906: LD_EXP 46
7910: PPUSH
7911: CALL_OW 302
7915: AND
7916: PUSH
7917: LD_EXP 19
7921: AND
7922: PUSH
7923: LD_EXP 45
7927: PPUSH
7928: CALL_OW 302
7932: AND
7933: IFFALSE 7945
// AddMedal ( Gnyevko , 1 ) ;
7935: LD_STRING Gnyevko
7937: PPUSH
7938: LD_INT 1
7940: PPUSH
7941: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
7945: LD_EXP 10
7949: NOT
7950: PUSH
7951: LD_EXP 19
7955: AND
7956: PUSH
7957: LD_EXP 45
7961: PPUSH
7962: CALL_OW 302
7966: AND
7967: IFFALSE 7980
// AddMedal ( Gnyevko , - 1 ) ;
7969: LD_STRING Gnyevko
7971: PPUSH
7972: LD_INT 1
7974: NEG
7975: PPUSH
7976: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
7980: LD_EXP 10
7984: PUSH
7985: LD_EXP 19
7989: NOT
7990: PUSH
7991: LD_EXP 46
7995: PPUSH
7996: CALL_OW 302
8000: NOT
8001: OR
8002: PUSH
8003: LD_EXP 45
8007: PPUSH
8008: CALL_OW 302
8012: NOT
8013: OR
8014: AND
8015: IFFALSE 8028
// AddMedal ( Gnyevko , - 2 ) ;
8017: LD_STRING Gnyevko
8019: PPUSH
8020: LD_INT 2
8022: NEG
8023: PPUSH
8024: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
8028: LD_EXP 10
8032: NOT
8033: PUSH
8034: LD_EXP 19
8038: NOT
8039: AND
8040: PUSH
8041: LD_EXP 46
8045: PPUSH
8046: CALL_OW 302
8050: NOT
8051: PUSH
8052: LD_EXP 45
8056: PPUSH
8057: CALL_OW 302
8061: NOT
8062: AND
8063: OR
8064: IFFALSE 8077
// AddMedal ( Gnyevko , - 3 ) ;
8066: LD_STRING Gnyevko
8068: PPUSH
8069: LD_INT 3
8071: NEG
8072: PPUSH
8073: CALL_OW 101
// if lostComradesCounter = 0 then
8077: LD_EXP 21
8081: PUSH
8082: LD_INT 0
8084: EQUAL
8085: IFFALSE 8099
// AddMedal ( NoLosses , 1 ) else
8087: LD_STRING NoLosses
8089: PPUSH
8090: LD_INT 1
8092: PPUSH
8093: CALL_OW 101
8097: GO 8109
// AddMedal ( NoLosses , 0 ) ;
8099: LD_STRING NoLosses
8101: PPUSH
8102: LD_INT 0
8104: PPUSH
8105: CALL_OW 101
// GiveMedals ( Main ) ;
8109: LD_STRING Main
8111: PPUSH
8112: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
8116: LD_INT 22
8118: PUSH
8119: LD_INT 3
8121: PUSH
8122: EMPTY
8123: LIST
8124: LIST
8125: PUSH
8126: LD_INT 21
8128: PUSH
8129: LD_INT 1
8131: PUSH
8132: EMPTY
8133: LIST
8134: LIST
8135: PUSH
8136: EMPTY
8137: LIST
8138: LIST
8139: PPUSH
8140: CALL_OW 69
8144: PPUSH
8145: CALL_OW 43
// end ;
8149: LD_VAR 0 1
8153: RET
// function SavePlayerCharacters ; var others ; begin
8154: LD_INT 0
8156: PPUSH
8157: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
8158: LD_EXP 38
8162: PPUSH
8163: LD_STRING Burlak
8165: PPUSH
8166: CALL 7228 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
8170: LD_EXP 46
8174: PPUSH
8175: LD_STRING Gnyevko
8177: PPUSH
8178: CALL 7228 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
8182: LD_EXP 43
8186: PPUSH
8187: LD_STRING Belkov
8189: PPUSH
8190: CALL 7228 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
8194: LD_EXP 45
8198: PPUSH
8199: LD_STRING Kirilenkova
8201: PPUSH
8202: CALL 7228 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
8206: LD_ADDR_VAR 0 2
8210: PUSH
8211: LD_INT 22
8213: PUSH
8214: LD_INT 3
8216: PUSH
8217: EMPTY
8218: LIST
8219: LIST
8220: PUSH
8221: LD_INT 21
8223: PUSH
8224: LD_INT 1
8226: PUSH
8227: EMPTY
8228: LIST
8229: LIST
8230: PUSH
8231: EMPTY
8232: LIST
8233: LIST
8234: PPUSH
8235: CALL_OW 69
8239: PUSH
8240: LD_EXP 38
8244: PUSH
8245: LD_EXP 46
8249: PUSH
8250: LD_EXP 43
8254: PUSH
8255: LD_EXP 45
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: DIFF
8266: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
8267: LD_VAR 0 2
8271: PPUSH
8272: LD_STRING other_survivors
8274: PPUSH
8275: CALL 7284 0 2
// end ; end_of_file
8279: LD_VAR 0 1
8283: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
8284: LD_INT 0
8286: PPUSH
8287: PPUSH
8288: PPUSH
// uc_side = 1 ;
8289: LD_ADDR_OWVAR 20
8293: PUSH
8294: LD_INT 1
8296: ST_TO_ADDR
// hc_class := 1 ;
8297: LD_ADDR_OWVAR 28
8301: PUSH
8302: LD_INT 1
8304: ST_TO_ADDR
// hc_sex := sex_male ;
8305: LD_ADDR_OWVAR 27
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
8313: LD_ADDR_OWVAR 33
8317: PUSH
8318: LD_STRING AmGalRemake
8320: ST_TO_ADDR
// hc_face_number := 1 ;
8321: LD_ADDR_OWVAR 34
8325: PUSH
8326: LD_INT 1
8328: ST_TO_ADDR
// hc_name := Charles Brown ;
8329: LD_ADDR_OWVAR 26
8333: PUSH
8334: LD_STRING Charles Brown
8336: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
8337: LD_ADDR_OWVAR 29
8341: PUSH
8342: LD_INT 12
8344: PUSH
8345: LD_INT 11
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
8352: LD_ADDR_OWVAR 31
8356: PUSH
8357: LD_INT 1
8359: PUSH
8360: LD_INT 0
8362: PUSH
8363: LD_INT 1
8365: PUSH
8366: LD_INT 1
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: LIST
8373: LIST
8374: ST_TO_ADDR
// Charles = CreateHuman ;
8375: LD_ADDR_EXP 34
8379: PUSH
8380: CALL_OW 44
8384: ST_TO_ADDR
// hc_class := 1 ;
8385: LD_ADDR_OWVAR 28
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// hc_sex := sex_female ;
8393: LD_ADDR_OWVAR 27
8397: PUSH
8398: LD_INT 2
8400: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
8401: LD_ADDR_OWVAR 33
8405: PUSH
8406: LD_STRING AmGalRemake
8408: ST_TO_ADDR
// hc_face_number := 2 ;
8409: LD_ADDR_OWVAR 34
8413: PUSH
8414: LD_INT 2
8416: ST_TO_ADDR
// hc_name := Johanna Holland ;
8417: LD_ADDR_OWVAR 26
8421: PUSH
8422: LD_STRING Johanna Holland
8424: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
8425: LD_ADDR_OWVAR 29
8429: PUSH
8430: LD_INT 12
8432: PUSH
8433: LD_INT 11
8435: PUSH
8436: EMPTY
8437: LIST
8438: LIST
8439: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
8440: LD_ADDR_OWVAR 31
8444: PUSH
8445: LD_EXP 31
8449: PUSH
8450: LD_INT 0
8452: PPUSH
8453: LD_INT 2
8455: PPUSH
8456: CALL_OW 12
8460: PUSH
8461: LD_INT 0
8463: PPUSH
8464: LD_INT 2
8466: PPUSH
8467: CALL_OW 12
8471: PUSH
8472: LD_INT 0
8474: PPUSH
8475: LD_INT 2
8477: PPUSH
8478: CALL_OW 12
8482: PUSH
8483: EMPTY
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: ST_TO_ADDR
// Johanna = CreateHuman ;
8489: LD_ADDR_EXP 35
8493: PUSH
8494: CALL_OW 44
8498: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
8499: LD_EXP 35
8503: PPUSH
8504: LD_INT 19
8506: PPUSH
8507: LD_INT 0
8509: PPUSH
8510: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
8514: LD_EXP 35
8518: PPUSH
8519: LD_INT 23
8521: PPUSH
8522: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
8526: LD_ADDR_EXP 36
8530: PUSH
8531: LD_STRING Gladstone
8533: PPUSH
8534: LD_INT 0
8536: PPUSH
8537: CALL 6986 0 2
8541: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
8542: LD_EXP 36
8546: PPUSH
8547: LD_INT 22
8549: PPUSH
8550: CALL_OW 52
// amApemans = [ ] ;
8554: LD_ADDR_EXP 37
8558: PUSH
8559: EMPTY
8560: ST_TO_ADDR
// for i := 1 to amApeAmount do
8561: LD_ADDR_VAR 0 2
8565: PUSH
8566: DOUBLE
8567: LD_INT 1
8569: DEC
8570: ST_TO_ADDR
8571: LD_EXP 30
8575: PUSH
8576: FOR_TO
8577: IFFALSE 8692
// begin hc_class := class_apeman ;
8579: LD_ADDR_OWVAR 28
8583: PUSH
8584: LD_INT 12
8586: ST_TO_ADDR
// hc_gallery :=  ;
8587: LD_ADDR_OWVAR 33
8591: PUSH
8592: LD_STRING 
8594: ST_TO_ADDR
// hc_name :=  ;
8595: LD_ADDR_OWVAR 26
8599: PUSH
8600: LD_STRING 
8602: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
8603: LD_ADDR_OWVAR 31
8607: PUSH
8608: LD_EXP 31
8612: PUSH
8613: LD_INT 0
8615: PPUSH
8616: LD_INT 2
8618: PPUSH
8619: CALL_OW 12
8623: PUSH
8624: LD_INT 0
8626: PPUSH
8627: LD_INT 2
8629: PPUSH
8630: CALL_OW 12
8634: PUSH
8635: LD_INT 0
8637: PPUSH
8638: LD_INT 2
8640: PPUSH
8641: CALL_OW 12
8645: PUSH
8646: EMPTY
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: ST_TO_ADDR
// ape = CreateHuman ;
8652: LD_ADDR_VAR 0 3
8656: PUSH
8657: CALL_OW 44
8661: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
8662: LD_VAR 0 3
8666: PPUSH
8667: LD_INT 22
8669: PPUSH
8670: CALL_OW 52
// amApemans = amApemans ^ ape ;
8674: LD_ADDR_EXP 37
8678: PUSH
8679: LD_EXP 37
8683: PUSH
8684: LD_VAR 0 3
8688: ADD
8689: ST_TO_ADDR
// end ;
8690: GO 8576
8692: POP
8693: POP
// SetLives ( am_bun , americanBunkerHP ) ;
8694: LD_INT 23
8696: PPUSH
8697: LD_EXP 28
8701: PPUSH
8702: CALL_OW 234
// end ; end_of_file
8706: LD_VAR 0 1
8710: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
8711: LD_INT 0
8713: PPUSH
// PrepareHero ;
8714: CALL 8739 0 0
// PreparePokryshkinTeams ;
8718: CALL 8833 0 0
// PrepareJelena ;
8722: CALL 9078 0 0
// PrepareGnyevko ;
8726: CALL 9110 0 0
// PrepareKurin ;
8730: CALL 8801 0 0
// end ;
8734: LD_VAR 0 1
8738: RET
// function PrepareHero ; begin
8739: LD_INT 0
8741: PPUSH
// uc_side = 3 ;
8742: LD_ADDR_OWVAR 20
8746: PUSH
8747: LD_INT 3
8749: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
8750: LD_ADDR_EXP 38
8754: PUSH
8755: LD_STRING Burlak
8757: PPUSH
8758: LD_INT 0
8760: PPUSH
8761: CALL 6986 0 2
8765: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
8766: LD_EXP 38
8770: PPUSH
8771: LD_EXP 32
8775: PUSH
8776: LD_INT 1
8778: ARRAY
8779: PPUSH
8780: LD_EXP 32
8784: PUSH
8785: LD_INT 2
8787: ARRAY
8788: PPUSH
8789: LD_INT 1
8791: PPUSH
8792: CALL_OW 48
// end ;
8796: LD_VAR 0 1
8800: RET
// function PrepareKurin ; begin
8801: LD_INT 0
8803: PPUSH
// uc_side = 6 ;
8804: LD_ADDR_OWVAR 20
8808: PUSH
8809: LD_INT 6
8811: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
8812: LD_ADDR_EXP 47
8816: PUSH
8817: LD_STRING Kurin
8819: PPUSH
8820: LD_INT 0
8822: PPUSH
8823: CALL 6986 0 2
8827: ST_TO_ADDR
// end ;
8828: LD_VAR 0 1
8832: RET
// function PreparePokryshkinTeams ; begin
8833: LD_INT 0
8835: PPUSH
// uc_side = 6 ;
8836: LD_ADDR_OWVAR 20
8840: PUSH
8841: LD_INT 6
8843: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
8844: LD_ADDR_EXP 39
8848: PUSH
8849: LD_STRING Pokryshkin
8851: PPUSH
8852: LD_INT 0
8854: PPUSH
8855: CALL 6986 0 2
8859: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
8860: LD_ADDR_EXP 40
8864: PUSH
8865: LD_STRING Saseda
8867: PPUSH
8868: LD_INT 0
8870: PPUSH
8871: CALL 6986 0 2
8875: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
8876: LD_ADDR_EXP 41
8880: PUSH
8881: LD_STRING Jaworska
8883: PPUSH
8884: LD_INT 0
8886: PPUSH
8887: CALL 6986 0 2
8891: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
8892: LD_ADDR_EXP 42
8896: PUSH
8897: LD_STRING Balei
8899: PPUSH
8900: LD_INT 0
8902: PPUSH
8903: CALL 6986 0 2
8907: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
8908: LD_ADDR_EXP 43
8912: PUSH
8913: LD_STRING Belkov
8915: PPUSH
8916: LD_INT 0
8918: PPUSH
8919: CALL 6986 0 2
8923: ST_TO_ADDR
// Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
8924: LD_ADDR_EXP 44
8928: PUSH
8929: LD_STRING Jaunzeme
8931: PPUSH
8932: LD_INT 0
8934: PPUSH
8935: CALL 6986 0 2
8939: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , Ru2SpawnArea , false ) ;
8940: LD_EXP 39
8944: PPUSH
8945: LD_INT 17
8947: PPUSH
8948: LD_INT 0
8950: PPUSH
8951: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
8955: LD_EXP 40
8959: PPUSH
8960: LD_INT 17
8962: PPUSH
8963: LD_INT 0
8965: PPUSH
8966: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
8970: LD_EXP 41
8974: PPUSH
8975: LD_INT 17
8977: PPUSH
8978: LD_INT 0
8980: PPUSH
8981: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
8985: LD_EXP 42
8989: PPUSH
8990: LD_INT 17
8992: PPUSH
8993: LD_INT 0
8995: PPUSH
8996: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
9000: LD_EXP 43
9004: PPUSH
9005: LD_INT 17
9007: PPUSH
9008: LD_INT 0
9010: PPUSH
9011: CALL_OW 49
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea , false ) ;
9015: LD_EXP 44
9019: PPUSH
9020: LD_INT 17
9022: PPUSH
9023: LD_INT 0
9025: PPUSH
9026: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Jaunzeme , Balei , Belkov , Jaworska ] ;
9030: LD_ADDR_EXP 48
9034: PUSH
9035: LD_EXP 39
9039: PUSH
9040: LD_EXP 40
9044: PUSH
9045: LD_EXP 44
9049: PUSH
9050: LD_EXP 42
9054: PUSH
9055: LD_EXP 43
9059: PUSH
9060: LD_EXP 41
9064: PUSH
9065: EMPTY
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: ST_TO_ADDR
// end ;
9073: LD_VAR 0 1
9077: RET
// function PrepareJelena ; begin
9078: LD_INT 0
9080: PPUSH
// uc_side = 8 ;
9081: LD_ADDR_OWVAR 20
9085: PUSH
9086: LD_INT 8
9088: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
9089: LD_ADDR_EXP 45
9093: PUSH
9094: LD_STRING Kirilenkova
9096: PPUSH
9097: LD_INT 0
9099: PPUSH
9100: CALL 6986 0 2
9104: ST_TO_ADDR
// end ;
9105: LD_VAR 0 1
9109: RET
// function PrepareGnyevko ; var randomPosition ; begin
9110: LD_INT 0
9112: PPUSH
9113: PPUSH
// uc_side = 8 ;
9114: LD_ADDR_OWVAR 20
9118: PUSH
9119: LD_INT 8
9121: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
9122: LD_ADDR_EXP 46
9126: PUSH
9127: LD_STRING Gnyevko
9129: PPUSH
9130: LD_INT 0
9132: PPUSH
9133: CALL 6986 0 2
9137: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
9138: LD_ADDR_VAR 0 2
9142: PUSH
9143: LD_EXP 33
9147: PUSH
9148: LD_INT 1
9150: PPUSH
9151: LD_EXP 33
9155: PPUSH
9156: CALL_OW 12
9160: ARRAY
9161: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
9162: LD_EXP 46
9166: PPUSH
9167: LD_VAR 0 2
9171: PUSH
9172: LD_INT 1
9174: ARRAY
9175: PPUSH
9176: LD_VAR 0 2
9180: PUSH
9181: LD_INT 2
9183: ARRAY
9184: PPUSH
9185: LD_INT 0
9187: PPUSH
9188: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
9192: LD_EXP 46
9196: PPUSH
9197: LD_INT 500
9199: PPUSH
9200: CALL_OW 234
// ComHold ( Gnyevko ) ;
9204: LD_EXP 46
9208: PPUSH
9209: CALL_OW 140
// end ; end_of_file
9213: LD_VAR 0 1
9217: RET
// export function PrepareNature ; var i , un ; begin
9218: LD_INT 0
9220: PPUSH
9221: PPUSH
9222: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
9223: LD_ADDR_VAR 0 2
9227: PUSH
9228: DOUBLE
9229: LD_INT 1
9231: DEC
9232: ST_TO_ADDR
9233: LD_EXP 22
9237: PUSH
9238: LD_INT 1
9240: ARRAY
9241: PUSH
9242: FOR_TO
9243: IFFALSE 9353
// begin uc_side = 0 ;
9245: LD_ADDR_OWVAR 20
9249: PUSH
9250: LD_INT 0
9252: ST_TO_ADDR
// uc_nation = nation_nature ;
9253: LD_ADDR_OWVAR 21
9257: PUSH
9258: LD_INT 0
9260: ST_TO_ADDR
// hc_class = class_apeman ;
9261: LD_ADDR_OWVAR 28
9265: PUSH
9266: LD_INT 12
9268: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9269: LD_ADDR_OWVAR 31
9273: PUSH
9274: LD_EXP 23
9278: PUSH
9279: LD_INT 1
9281: ARRAY
9282: PUSH
9283: LD_EXP 23
9287: PUSH
9288: LD_INT 2
9290: ARRAY
9291: PUSH
9292: LD_EXP 23
9296: PUSH
9297: LD_INT 3
9299: ARRAY
9300: PUSH
9301: LD_EXP 23
9305: PUSH
9306: LD_INT 4
9308: ARRAY
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: ST_TO_ADDR
// hc_agressivity = apeAgression ;
9316: LD_ADDR_OWVAR 35
9320: PUSH
9321: LD_EXP 29
9325: ST_TO_ADDR
// un = CreateHuman ;
9326: LD_ADDR_VAR 0 3
9330: PUSH
9331: CALL_OW 44
9335: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
9336: LD_VAR 0 3
9340: PPUSH
9341: LD_INT 16
9343: PPUSH
9344: LD_INT 0
9346: PPUSH
9347: CALL_OW 49
// end ;
9351: GO 9242
9353: POP
9354: POP
// for i := 1 to animalsAmount [ 2 ] do
9355: LD_ADDR_VAR 0 2
9359: PUSH
9360: DOUBLE
9361: LD_INT 1
9363: DEC
9364: ST_TO_ADDR
9365: LD_EXP 22
9369: PUSH
9370: LD_INT 2
9372: ARRAY
9373: PUSH
9374: FOR_TO
9375: IFFALSE 9470
// begin uc_side = 0 ;
9377: LD_ADDR_OWVAR 20
9381: PUSH
9382: LD_INT 0
9384: ST_TO_ADDR
// uc_nation = nation_nature ;
9385: LD_ADDR_OWVAR 21
9389: PUSH
9390: LD_INT 0
9392: ST_TO_ADDR
// hc_class = class_phororhacos ;
9393: LD_ADDR_OWVAR 28
9397: PUSH
9398: LD_INT 18
9400: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9401: LD_ADDR_OWVAR 31
9405: PUSH
9406: LD_EXP 23
9410: PUSH
9411: LD_INT 1
9413: ARRAY
9414: PUSH
9415: LD_EXP 23
9419: PUSH
9420: LD_INT 2
9422: ARRAY
9423: PUSH
9424: LD_EXP 23
9428: PUSH
9429: LD_INT 3
9431: ARRAY
9432: PUSH
9433: LD_EXP 23
9437: PUSH
9438: LD_INT 4
9440: ARRAY
9441: PUSH
9442: EMPTY
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
9448: LD_ADDR_OWVAR 35
9452: PUSH
9453: LD_EXP 24
9457: ST_TO_ADDR
// un = CreateHuman ;
9458: LD_ADDR_VAR 0 3
9462: PUSH
9463: CALL_OW 44
9467: ST_TO_ADDR
// end ;
9468: GO 9374
9470: POP
9471: POP
// for i := 1 to animalsAmount [ 3 ] do
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_EXP 22
9486: PUSH
9487: LD_INT 3
9489: ARRAY
9490: PUSH
9491: FOR_TO
9492: IFFALSE 9587
// begin uc_side = 0 ;
9494: LD_ADDR_OWVAR 20
9498: PUSH
9499: LD_INT 0
9501: ST_TO_ADDR
// uc_nation = nation_nature ;
9502: LD_ADDR_OWVAR 21
9506: PUSH
9507: LD_INT 0
9509: ST_TO_ADDR
// hc_class = class_tiger ;
9510: LD_ADDR_OWVAR 28
9514: PUSH
9515: LD_INT 14
9517: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9518: LD_ADDR_OWVAR 31
9522: PUSH
9523: LD_EXP 23
9527: PUSH
9528: LD_INT 1
9530: ARRAY
9531: PUSH
9532: LD_EXP 23
9536: PUSH
9537: LD_INT 2
9539: ARRAY
9540: PUSH
9541: LD_EXP 23
9545: PUSH
9546: LD_INT 3
9548: ARRAY
9549: PUSH
9550: LD_EXP 23
9554: PUSH
9555: LD_INT 4
9557: ARRAY
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
9565: LD_ADDR_OWVAR 35
9569: PUSH
9570: LD_EXP 24
9574: ST_TO_ADDR
// un = CreateHuman ;
9575: LD_ADDR_VAR 0 3
9579: PUSH
9580: CALL_OW 44
9584: ST_TO_ADDR
// end ;
9585: GO 9491
9587: POP
9588: POP
// for i := 1 to animalsAmount [ 4 ] do
9589: LD_ADDR_VAR 0 2
9593: PUSH
9594: DOUBLE
9595: LD_INT 1
9597: DEC
9598: ST_TO_ADDR
9599: LD_EXP 22
9603: PUSH
9604: LD_INT 4
9606: ARRAY
9607: PUSH
9608: FOR_TO
9609: IFFALSE 9704
// begin uc_side = 0 ;
9611: LD_ADDR_OWVAR 20
9615: PUSH
9616: LD_INT 0
9618: ST_TO_ADDR
// uc_nation = nation_nature ;
9619: LD_ADDR_OWVAR 21
9623: PUSH
9624: LD_INT 0
9626: ST_TO_ADDR
// hc_class = 21 ;
9627: LD_ADDR_OWVAR 28
9631: PUSH
9632: LD_INT 21
9634: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
9635: LD_ADDR_OWVAR 31
9639: PUSH
9640: LD_EXP 23
9644: PUSH
9645: LD_INT 1
9647: ARRAY
9648: PUSH
9649: LD_EXP 23
9653: PUSH
9654: LD_INT 2
9656: ARRAY
9657: PUSH
9658: LD_EXP 23
9662: PUSH
9663: LD_INT 3
9665: ARRAY
9666: PUSH
9667: LD_EXP 23
9671: PUSH
9672: LD_INT 4
9674: ARRAY
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: LIST
9680: LIST
9681: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
9682: LD_ADDR_OWVAR 35
9686: PUSH
9687: LD_EXP 24
9691: ST_TO_ADDR
// un = CreateHuman ;
9692: LD_ADDR_VAR 0 3
9696: PUSH
9697: CALL_OW 44
9701: ST_TO_ADDR
// end ;
9702: GO 9608
9704: POP
9705: POP
// end ; end_of_file
9706: LD_VAR 0 1
9710: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
9711: LD_VAR 0 1
9715: PUSH
9716: LD_EXP 38
9720: EQUAL
9721: PUSH
9722: LD_EXP 45
9726: PPUSH
9727: CALL_OW 255
9731: PUSH
9732: LD_INT 3
9734: EQUAL
9735: NOT
9736: AND
9737: PUSH
9738: LD_EXP 45
9742: PPUSH
9743: CALL_OW 302
9747: NOT
9748: AND
9749: IFFALSE 9755
// BurlakDying ;
9751: CALL 7579 0 0
// if unit = Gladstone then
9755: LD_VAR 0 1
9759: PUSH
9760: LD_EXP 36
9764: EQUAL
9765: IFFALSE 9775
// gladstoneStatus = 0 ;
9767: LD_ADDR_EXP 1
9771: PUSH
9772: LD_INT 0
9774: ST_TO_ADDR
// if unit = Johanna then
9775: LD_VAR 0 1
9779: PUSH
9780: LD_EXP 35
9784: EQUAL
9785: IFFALSE 9795
// johannaStatus = 0 ;
9787: LD_ADDR_EXP 2
9791: PUSH
9792: LD_INT 0
9794: ST_TO_ADDR
// end ;
9795: PPOPN 1
9797: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
9798: LD_VAR 0 1
9802: PUSH
9803: LD_EXP 38
9807: EQUAL
9808: IFFALSE 9814
// BurlakDying ;
9810: CALL 7579 0 0
// if GetSide ( unit ) = 3 then
9814: LD_VAR 0 1
9818: PPUSH
9819: CALL_OW 255
9823: PUSH
9824: LD_INT 3
9826: EQUAL
9827: IFFALSE 9843
// lostComradesCounter = lostComradesCounter + 1 ;
9829: LD_ADDR_EXP 21
9833: PUSH
9834: LD_EXP 21
9838: PUSH
9839: LD_INT 1
9841: PLUS
9842: ST_TO_ADDR
// if unit in kirovSolds then
9843: LD_VAR 0 1
9847: PUSH
9848: LD_EXP 48
9852: IN
9853: IFFALSE 9871
// kirovSolds = kirovSolds diff unit ;
9855: LD_ADDR_EXP 48
9859: PUSH
9860: LD_EXP 48
9864: PUSH
9865: LD_VAR 0 1
9869: DIFF
9870: ST_TO_ADDR
// end ;
9871: PPOPN 1
9873: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
9874: LD_VAR 0 1
9878: PUSH
9879: LD_INT 3
9881: EQUAL
9882: PUSH
9883: LD_VAR 0 2
9887: PUSH
9888: LD_INT 1
9890: EQUAL
9891: AND
9892: PUSH
9893: LD_VAR 0 1
9897: PUSH
9898: LD_INT 1
9900: EQUAL
9901: PUSH
9902: LD_VAR 0 2
9906: PUSH
9907: LD_INT 3
9909: EQUAL
9910: AND
9911: PUSH
9912: LD_EXP 15
9916: PUSH
9917: LD_INT 1
9919: EQUAL
9920: AND
9921: OR
9922: IFFALSE 9928
// Dial_SecondAttack ;
9924: CALL 5151 0 0
// if side1 = 3 and side2 = 6 and not traitor then
9928: LD_VAR 0 1
9932: PUSH
9933: LD_INT 3
9935: EQUAL
9936: PUSH
9937: LD_VAR 0 2
9941: PUSH
9942: LD_INT 6
9944: EQUAL
9945: AND
9946: PUSH
9947: LD_EXP 16
9951: NOT
9952: AND
9953: IFFALSE 9959
// Dialogue_AttackComrade ;
9955: CALL 3346 0 0
// end ; end_of_file
9959: PPOPN 2
9961: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
9962: LD_INT 0
9964: PPUSH
9965: PPUSH
// if not missionNumber then
9966: LD_VAR 0 2
9970: NOT
9971: IFFALSE 9975
// exit ;
9973: GO 10105
// achiv := false ;
9975: LD_ADDR_VAR 0 7
9979: PUSH
9980: LD_INT 0
9982: ST_TO_ADDR
// case campaignNumber of 1 :
9983: LD_VAR 0 1
9987: PUSH
9988: LD_INT 1
9990: DOUBLE
9991: EQUAL
9992: IFTRUE 9996
9994: GO 10007
9996: POP
// achiv := ACH_GOTA ; 2 :
9997: LD_ADDR_VAR 0 7
10001: PUSH
10002: LD_STRING ACH_GOTA
10004: ST_TO_ADDR
10005: GO 10057
10007: LD_INT 2
10009: DOUBLE
10010: EQUAL
10011: IFTRUE 10015
10013: GO 10018
10015: POP
// ; 3 :
10016: GO 10057
10018: LD_INT 3
10020: DOUBLE
10021: EQUAL
10022: IFTRUE 10026
10024: GO 10037
10026: POP
// achiv := ACH_MOTSU ; 4 :
10027: LD_ADDR_VAR 0 7
10031: PUSH
10032: LD_STRING ACH_MOTSU
10034: ST_TO_ADDR
10035: GO 10057
10037: LD_INT 4
10039: DOUBLE
10040: EQUAL
10041: IFTRUE 10045
10043: GO 10056
10045: POP
// achiv := ACH_LOP ; end ;
10046: LD_ADDR_VAR 0 7
10050: PUSH
10051: LD_STRING ACH_LOP
10053: ST_TO_ADDR
10054: GO 10057
10056: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
10057: LD_OWVAR 67
10061: PUSH
10062: LD_INT 3
10064: EQUAL
10065: PUSH
10066: LD_VAR 0 7
10070: AND
10071: PUSH
10072: LD_VAR 0 3
10076: AND
10077: PUSH
10078: LD_VAR 0 4
10082: AND
10083: PUSH
10084: LD_VAR 0 5
10088: AND
10089: IFFALSE 10105
// SetAchievementEX ( achiv , missionNumber ) ;
10091: LD_VAR 0 7
10095: PPUSH
10096: LD_VAR 0 2
10100: PPUSH
10101: CALL_OW 564
// end ;
10105: LD_VAR 0 6
10109: RET
// export function SA_BehemothConstructed ; begin
10110: LD_INT 0
10112: PPUSH
// SetAchievement ( ACH_SMC ) ;
10113: LD_STRING ACH_SMC
10115: PPUSH
10116: CALL_OW 543
// end ;
10120: LD_VAR 0 1
10124: RET
