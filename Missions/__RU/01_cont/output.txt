// starting begin InitMission ;
   0: CALL 5 0 0
// end ;
   4: END
// export gladstoneStatus ; export johannaStatus ; export introEnd , apemansContact , attackedByApeman , attackedByApemanNearLake ; export spotWaterfall ; export apemanAttackedBurlak , apemanWithRadio , radioDropPosition ; export gnyevkoSaved , gnyevkoWaitWithPokryshkin , meetPokryshkin , goToHill ; export belkovWaitForGorky , secondAttack ; export traitor ; export gladstoneEscape , JohannaEscape ; export jelenaSaved ; export evacuationAvailable ; export lostComradesCounter ; export amRetreat ; function InitMission ; begin
   5: LD_INT 0
   7: PPUSH
// ResetFog ;
   8: CALL_OW 335
// RandomizeAll ;
  12: CALL_OW 11
// InGameOn ;
  16: CALL_OW 8
// InitMapConfig ;
  20: CALL 282 0 0
// PrepareNature ;
  24: CALL 12178 0 0
// PrepareRussian ;
  28: CALL 11476 0 0
// PrepareAmericans ;
  32: CALL 11049 0 0
// gladstoneStatus = 1 ;
  36: LD_ADDR_EXP 1
  40: PUSH
  41: LD_INT 1
  43: ST_TO_ADDR
// johannaStatus = 1 ;
  44: LD_ADDR_EXP 2
  48: PUSH
  49: LD_INT 1
  51: ST_TO_ADDR
// introEnd = false ;
  52: LD_ADDR_EXP 3
  56: PUSH
  57: LD_INT 0
  59: ST_TO_ADDR
// apemansContact = false ;
  60: LD_ADDR_EXP 4
  64: PUSH
  65: LD_INT 0
  67: ST_TO_ADDR
// attackedByApeman = false ;
  68: LD_ADDR_EXP 5
  72: PUSH
  73: LD_INT 0
  75: ST_TO_ADDR
// spotWaterfall = false ;
  76: LD_ADDR_EXP 7
  80: PUSH
  81: LD_INT 0
  83: ST_TO_ADDR
// gnyevkoSaved = false ;
  84: LD_ADDR_EXP 11
  88: PUSH
  89: LD_INT 0
  91: ST_TO_ADDR
// meetPokryshkin = false ;
  92: LD_ADDR_EXP 13
  96: PUSH
  97: LD_INT 0
  99: ST_TO_ADDR
// goToHill = false ;
 100: LD_ADDR_EXP 14
 104: PUSH
 105: LD_INT 0
 107: ST_TO_ADDR
// gnyevkoWaitWithPokryshkin = false ;
 108: LD_ADDR_EXP 12
 112: PUSH
 113: LD_INT 0
 115: ST_TO_ADDR
// traitor = false ;
 116: LD_ADDR_EXP 17
 120: PUSH
 121: LD_INT 0
 123: ST_TO_ADDR
// gladstoneEscape = false ;
 124: LD_ADDR_EXP 18
 128: PUSH
 129: LD_INT 0
 131: ST_TO_ADDR
// JohannaEscape = false ;
 132: LD_ADDR_EXP 19
 136: PUSH
 137: LD_INT 0
 139: ST_TO_ADDR
// jelenaSaved = false ;
 140: LD_ADDR_EXP 20
 144: PUSH
 145: LD_INT 0
 147: ST_TO_ADDR
// belkovWaitForGorky = false ;
 148: LD_ADDR_EXP 15
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// evacuationAvailable = false ;
 156: LD_ADDR_EXP 21
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// amRetreat = false ;
 164: LD_ADDR_EXP 23
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// lostComradesCounter = 0 ;
 172: LD_ADDR_EXP 22
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// radioDropPosition = [ 999 , 999 ] ;
 180: LD_ADDR_EXP 10
 184: PUSH
 185: LD_INT 999
 187: PUSH
 188: LD_INT 999
 190: PUSH
 191: EMPTY
 192: LIST
 193: LIST
 194: ST_TO_ADDR
// apemanWithRadio = FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) [ Rand ( 1 , FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) ) ] ;
 195: LD_ADDR_EXP 9
 199: PUSH
 200: LD_INT 24
 202: PPUSH
 203: LD_INT 22
 205: PUSH
 206: LD_INT 0
 208: PUSH
 209: EMPTY
 210: LIST
 211: LIST
 212: PUSH
 213: LD_INT 25
 215: PUSH
 216: LD_INT 12
 218: PUSH
 219: EMPTY
 220: LIST
 221: LIST
 222: PUSH
 223: EMPTY
 224: LIST
 225: LIST
 226: PPUSH
 227: CALL_OW 70
 231: PUSH
 232: LD_INT 1
 234: PPUSH
 235: LD_INT 24
 237: PPUSH
 238: LD_INT 22
 240: PUSH
 241: LD_INT 0
 243: PUSH
 244: EMPTY
 245: LIST
 246: LIST
 247: PUSH
 248: LD_INT 25
 250: PUSH
 251: LD_INT 12
 253: PUSH
 254: EMPTY
 255: LIST
 256: LIST
 257: PUSH
 258: EMPTY
 259: LIST
 260: LIST
 261: PPUSH
 262: CALL_OW 70
 266: PPUSH
 267: CALL_OW 12
 271: ARRAY
 272: ST_TO_ADDR
// MissionIntro ;
 273: CALL 838 0 0
// end ; end_of_file
 277: LD_VAR 0 1
 281: RET
// export function InitMapConfig ; begin
 282: LD_INT 0
 284: PPUSH
// BaseMapConfig ;
 285: CALL 298 0 0
// MissionMapConfig ;
 289: CALL 384 0 0
// end ;
 293: LD_VAR 0 1
 297: RET
// export animalsAmount , animalsStats , animalsAgression , missionPrefix , previousMissionPrefix , debugMode ; function BaseMapConfig ; begin
 298: LD_INT 0
 300: PPUSH
// animalsAmount = [ 5 , 4 , 2 , 2 ] ;
 301: LD_ADDR_EXP 24
 305: PUSH
 306: LD_INT 5
 308: PUSH
 309: LD_INT 4
 311: PUSH
 312: LD_INT 2
 314: PUSH
 315: LD_INT 2
 317: PUSH
 318: EMPTY
 319: LIST
 320: LIST
 321: LIST
 322: LIST
 323: ST_TO_ADDR
// animalsStats = [ 2 , 2 , 2 , 2 ] ;
 324: LD_ADDR_EXP 25
 328: PUSH
 329: LD_INT 2
 331: PUSH
 332: LD_INT 2
 334: PUSH
 335: LD_INT 2
 337: PUSH
 338: LD_INT 2
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: LIST
 345: LIST
 346: ST_TO_ADDR
// animalsAgression = 0 ;
 347: LD_ADDR_EXP 26
 351: PUSH
 352: LD_INT 0
 354: ST_TO_ADDR
// debugMode = 0 ;
 355: LD_ADDR_EXP 29
 359: PUSH
 360: LD_INT 0
 362: ST_TO_ADDR
// missionPrefix = 01_ ;
 363: LD_ADDR_EXP 27
 367: PUSH
 368: LD_STRING 01_
 370: ST_TO_ADDR
// previousMissionPrefix =  ;
 371: LD_ADDR_EXP 28
 375: PUSH
 376: LD_STRING 
 378: ST_TO_ADDR
// end ;
 379: LD_VAR 0 1
 383: RET
// export americanBunkerHP , apeAgression , amApeAmount , JohannadSkillLevel , burlakSpawnPosition , gnyevkoSpawnPositions , gnyevkoStartHP , apeAttackGnyevkoTime , apeAttackJelenaTime ; function MissionMapConfig ; begin
 384: LD_INT 0
 386: PPUSH
// americanBunkerHP = [ 800 , 900 , 950 ] [ Difficulty ] ;
 387: LD_ADDR_EXP 30
 391: PUSH
 392: LD_INT 800
 394: PUSH
 395: LD_INT 900
 397: PUSH
 398: LD_INT 950
 400: PUSH
 401: EMPTY
 402: LIST
 403: LIST
 404: LIST
 405: PUSH
 406: LD_OWVAR 67
 410: ARRAY
 411: ST_TO_ADDR
// apeAgression = rand ( 3 , 5 ) * Difficulty ;
 412: LD_ADDR_EXP 31
 416: PUSH
 417: LD_INT 3
 419: PPUSH
 420: LD_INT 5
 422: PPUSH
 423: CALL_OW 12
 427: PUSH
 428: LD_OWVAR 67
 432: MUL
 433: ST_TO_ADDR
// amApeAmount = [ 5 , 6 , 6 ] [ Difficulty ] ;
 434: LD_ADDR_EXP 32
 438: PUSH
 439: LD_INT 5
 441: PUSH
 442: LD_INT 6
 444: PUSH
 445: LD_INT 6
 447: PUSH
 448: EMPTY
 449: LIST
 450: LIST
 451: LIST
 452: PUSH
 453: LD_OWVAR 67
 457: ARRAY
 458: ST_TO_ADDR
// JohannadSkillLevel = [ 0 , 1 , 2 ] [ Difficulty ] ;
 459: LD_ADDR_EXP 33
 463: PUSH
 464: LD_INT 0
 466: PUSH
 467: LD_INT 1
 469: PUSH
 470: LD_INT 2
 472: PUSH
 473: EMPTY
 474: LIST
 475: LIST
 476: LIST
 477: PUSH
 478: LD_OWVAR 67
 482: ARRAY
 483: ST_TO_ADDR
// burlakSpawnPosition = [ 78 , 87 ] ;
 484: LD_ADDR_EXP 34
 488: PUSH
 489: LD_INT 78
 491: PUSH
 492: LD_INT 87
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: ST_TO_ADDR
// gnyevkoSpawnPositions = [ [ 72 , 115 ] , [ 99 , 7 ] , [ 131 , 81 ] ] ;
 499: LD_ADDR_EXP 35
 503: PUSH
 504: LD_INT 72
 506: PUSH
 507: LD_INT 115
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 99
 516: PUSH
 517: LD_INT 7
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: LD_INT 131
 526: PUSH
 527: LD_INT 81
 529: PUSH
 530: EMPTY
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: LIST
 538: ST_TO_ADDR
// gnyevkoStartHP = [ 600 , 550 , 500 ] [ Difficulty ] ;
 539: LD_ADDR_EXP 36
 543: PUSH
 544: LD_INT 600
 546: PUSH
 547: LD_INT 550
 549: PUSH
 550: LD_INT 500
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: LD_OWVAR 67
 562: ARRAY
 563: ST_TO_ADDR
// apeAttackGnyevkoTime = [ 10 10$0 , 8 8$0 , 6 6$0 ] [ Difficulty ] ;
 564: LD_ADDR_EXP 37
 568: PUSH
 569: LD_INT 21000
 571: PUSH
 572: LD_INT 16800
 574: PUSH
 575: LD_INT 12600
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: LIST
 582: PUSH
 583: LD_OWVAR 67
 587: ARRAY
 588: ST_TO_ADDR
// apeAttackJelenaTime = [ 3 3$00 , 2 2$30 , 2 2$00 ] [ Difficulty ] ;
 589: LD_ADDR_EXP 38
 593: PUSH
 594: LD_INT 6300
 596: PUSH
 597: LD_INT 5250
 599: PUSH
 600: LD_INT 4200
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: LIST
 607: PUSH
 608: LD_OWVAR 67
 612: ARRAY
 613: ST_TO_ADDR
// end ;
 614: LD_VAR 0 1
 618: RET
// every 0 0$1 trigger debugMode do var i ;
 619: LD_EXP 29
 623: IFFALSE 835
 625: GO 627
 627: DISABLE
 628: LD_INT 0
 630: PPUSH
// begin enable ;
 631: ENABLE
// FogOff ( your_side ) ;
 632: LD_OWVAR 2
 636: PPUSH
 637: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 641: LD_ADDR_VAR 0 1
 645: PUSH
 646: LD_INT 22
 648: PUSH
 649: LD_OWVAR 2
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 2
 660: PUSH
 661: LD_INT 21
 663: PUSH
 664: LD_INT 1
 666: PUSH
 667: EMPTY
 668: LIST
 669: LIST
 670: PUSH
 671: LD_INT 21
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: EMPTY
 682: LIST
 683: LIST
 684: LIST
 685: PUSH
 686: EMPTY
 687: LIST
 688: LIST
 689: PPUSH
 690: CALL_OW 69
 694: PUSH
 695: FOR_IN
 696: IFFALSE 712
// SetLives ( i , 1000 ) ;
 698: LD_VAR 0 1
 702: PPUSH
 703: LD_INT 1000
 705: PPUSH
 706: CALL_OW 234
 710: GO 695
 712: POP
 713: POP
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 714: LD_ADDR_VAR 0 1
 718: PUSH
 719: LD_INT 22
 721: PUSH
 722: LD_OWVAR 2
 726: PUSH
 727: EMPTY
 728: LIST
 729: LIST
 730: PUSH
 731: LD_INT 2
 733: PUSH
 734: LD_INT 30
 736: PUSH
 737: LD_INT 0
 739: PUSH
 740: EMPTY
 741: LIST
 742: LIST
 743: PUSH
 744: LD_INT 30
 746: PUSH
 747: LD_INT 1
 749: PUSH
 750: EMPTY
 751: LIST
 752: LIST
 753: PUSH
 754: EMPTY
 755: LIST
 756: LIST
 757: LIST
 758: PUSH
 759: EMPTY
 760: LIST
 761: LIST
 762: PPUSH
 763: CALL_OW 69
 767: PUSH
 768: FOR_IN
 769: IFFALSE 833
// begin SetResourceType ( GetBase ( i ) , mat_cans , 9999 ) ;
 771: LD_VAR 0 1
 775: PPUSH
 776: CALL_OW 274
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: LD_INT 9999
 786: PPUSH
 787: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_oil , 9999 ) ;
 791: LD_VAR 0 1
 795: PPUSH
 796: CALL_OW 274
 800: PPUSH
 801: LD_INT 2
 803: PPUSH
 804: LD_INT 9999
 806: PPUSH
 807: CALL_OW 277
// SetResourceType ( GetBase ( i ) , mat_siberit , 9999 ) ;
 811: LD_VAR 0 1
 815: PPUSH
 816: CALL_OW 274
 820: PPUSH
 821: LD_INT 3
 823: PPUSH
 824: LD_INT 9999
 826: PPUSH
 827: CALL_OW 277
// end ;
 831: GO 768
 833: POP
 834: POP
// end ; end_of_file
 835: PPOPN 1
 837: END
// export function MissionIntro ; begin
 838: LD_INT 0
 840: PPUSH
// InGameOn ;
 841: CALL_OW 8
// CenterOnXY ( burlakSpawnPosition [ 1 ] - 8 , burlakSpawnPosition [ 2 ] - 8 ) ;
 845: LD_EXP 34
 849: PUSH
 850: LD_INT 1
 852: ARRAY
 853: PUSH
 854: LD_INT 8
 856: MINUS
 857: PPUSH
 858: LD_EXP 34
 862: PUSH
 863: LD_INT 2
 865: ARRAY
 866: PUSH
 867: LD_INT 8
 869: MINUS
 870: PPUSH
 871: CALL_OW 84
// wait ( 0 0$3 ) ;
 875: LD_INT 105
 877: PPUSH
 878: CALL_OW 67
// CenterNowOnUnits ( Burlak ) ;
 882: LD_EXP 43
 886: PPUSH
 887: CALL_OW 87
// Say ( Burlak , D1-Bur-1 ) ;
 891: LD_EXP 43
 895: PPUSH
 896: LD_STRING D1-Bur-1
 898: PPUSH
 899: CALL_OW 88
// ComMoveXY ( Burlak , 94 , 89 ) ;
 903: LD_EXP 43
 907: PPUSH
 908: LD_INT 94
 910: PPUSH
 911: LD_INT 89
 913: PPUSH
 914: CALL_OW 111
// CenterOnXY ( 94 , 89 ) ;
 918: LD_INT 94
 920: PPUSH
 921: LD_INT 89
 923: PPUSH
 924: CALL_OW 84
// Say ( Burlak , D1-Bur-1a ) ;
 928: LD_EXP 43
 932: PPUSH
 933: LD_STRING D1-Bur-1a
 935: PPUSH
 936: CALL_OW 88
// ComMoveXY ( Burlak , 102 , 88 ) ;
 940: LD_EXP 43
 944: PPUSH
 945: LD_INT 102
 947: PPUSH
 948: LD_INT 88
 950: PPUSH
 951: CALL_OW 111
// CenterOnXY ( 102 , 88 ) ;
 955: LD_INT 102
 957: PPUSH
 958: LD_INT 88
 960: PPUSH
 961: CALL_OW 84
// Say ( Burlak , D1-Bur-1b ) ;
 965: LD_EXP 43
 969: PPUSH
 970: LD_STRING D1-Bur-1b
 972: PPUSH
 973: CALL_OW 88
// InGameOff ;
 977: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
 981: LD_STRING M1
 983: PPUSH
 984: CALL_OW 337
// SaveForQuickRestart ;
 988: CALL_OW 22
// introEnd = true ;
 992: LD_ADDR_EXP 3
 996: PUSH
 997: LD_INT 1
 999: ST_TO_ADDR
// end ;
1000: LD_VAR 0 1
1004: RET
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 74 , 88 ) < 5 and introEnd do
1005: LD_EXP 43
1009: PPUSH
1010: LD_INT 74
1012: PPUSH
1013: LD_INT 88
1015: PPUSH
1016: CALL_OW 297
1020: PUSH
1021: LD_INT 5
1023: LESS
1024: PUSH
1025: LD_EXP 3
1029: AND
1030: IFFALSE 1055
1032: GO 1034
1034: DISABLE
// begin spotWaterfall = true ;
1035: LD_ADDR_EXP 7
1039: PUSH
1040: LD_INT 1
1042: ST_TO_ADDR
// Say ( Burlak , DWaterfall-Bur-1 ) ;
1043: LD_EXP 43
1047: PPUSH
1048: LD_STRING DWaterfall-Bur-1
1050: PPUSH
1051: CALL_OW 88
// end ;
1055: END
// every 0 0$1 trigger GetDistUnitXY ( Burlak , 130 , 96 ) < 5 and introEnd do
1056: LD_EXP 43
1060: PPUSH
1061: LD_INT 130
1063: PPUSH
1064: LD_INT 96
1066: PPUSH
1067: CALL_OW 297
1071: PUSH
1072: LD_INT 5
1074: LESS
1075: PUSH
1076: LD_EXP 3
1080: AND
1081: IFFALSE 1098
1083: GO 1085
1085: DISABLE
// Say ( Burlak , DCorpse-Bur-1 ) ;
1086: LD_EXP 43
1090: PPUSH
1091: LD_STRING DCorpse-Bur-1
1093: PPUSH
1094: CALL_OW 88
1098: END
// every 0 0$1 trigger not apemansContact do var apeman ;
1099: LD_EXP 4
1103: NOT
1104: IFFALSE 1198
1106: GO 1108
1108: DISABLE
1109: LD_INT 0
1111: PPUSH
// begin enable ;
1112: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1113: LD_ADDR_VAR 0 1
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 0
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 25
1130: PUSH
1131: LD_INT 12
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: PUSH
1147: FOR_IN
1148: IFFALSE 1196
// if GetDistUnits ( apeman , Burlak ) < 7 then
1150: LD_VAR 0 1
1154: PPUSH
1155: LD_EXP 43
1159: PPUSH
1160: CALL_OW 296
1164: PUSH
1165: LD_INT 7
1167: LESS
1168: IFFALSE 1194
// begin apemansContact = true ;
1170: LD_ADDR_EXP 4
1174: PUSH
1175: LD_INT 1
1177: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1 ) ;
1178: LD_EXP 43
1182: PPUSH
1183: LD_STRING D2-Bur-1
1185: PPUSH
1186: CALL_OW 88
// exit ;
1190: POP
1191: POP
1192: GO 1198
// end ;
1194: GO 1147
1196: POP
1197: POP
// end ;
1198: PPOPN 1
1200: END
// every 0 0$1 trigger not attackedByApeman do var un , apeman ;
1201: LD_EXP 5
1205: NOT
1206: IFFALSE 1322
1208: GO 1210
1210: DISABLE
1211: LD_INT 0
1213: PPUSH
1214: PPUSH
// begin enable ;
1215: ENABLE
// for apeman in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1216: LD_ADDR_VAR 0 2
1220: PUSH
1221: LD_INT 22
1223: PUSH
1224: LD_INT 0
1226: PUSH
1227: EMPTY
1228: LIST
1229: LIST
1230: PUSH
1231: LD_INT 25
1233: PUSH
1234: LD_INT 12
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: EMPTY
1242: LIST
1243: LIST
1244: PPUSH
1245: CALL_OW 69
1249: PUSH
1250: FOR_IN
1251: IFFALSE 1320
// if Attacks ( apeman ) then
1253: LD_VAR 0 2
1257: PPUSH
1258: CALL_OW 320
1262: IFFALSE 1318
// if GetSide ( Attacks ( apeman ) ) = 3 then
1264: LD_VAR 0 2
1268: PPUSH
1269: CALL_OW 320
1273: PPUSH
1274: CALL_OW 255
1278: PUSH
1279: LD_INT 3
1281: EQUAL
1282: IFFALSE 1318
// begin attackedByApeman = true ;
1284: LD_ADDR_EXP 5
1288: PUSH
1289: LD_INT 1
1291: ST_TO_ADDR
// apemanAttackedBurlak = apeman ;
1292: LD_ADDR_EXP 8
1296: PUSH
1297: LD_VAR 0 2
1301: ST_TO_ADDR
// Say ( Burlak , D2-Bur-1a ) ;
1302: LD_EXP 43
1306: PPUSH
1307: LD_STRING D2-Bur-1a
1309: PPUSH
1310: CALL_OW 88
// exit ;
1314: POP
1315: POP
1316: GO 1322
// end ;
1318: GO 1250
1320: POP
1321: POP
// end ;
1322: PPOPN 2
1324: END
// every 0 0$1 trigger not attackedByApemanNearLake do var un , apeman ;
1325: LD_EXP 6
1329: NOT
1330: IFFALSE 1427
1332: GO 1334
1334: DISABLE
1335: LD_INT 0
1337: PPUSH
1338: PPUSH
// begin enable ;
1339: ENABLE
// for apeman in FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_INT 24
1347: PPUSH
1348: LD_INT 22
1350: PUSH
1351: LD_INT 0
1353: PUSH
1354: EMPTY
1355: LIST
1356: LIST
1357: PUSH
1358: LD_INT 25
1360: PUSH
1361: LD_INT 12
1363: PUSH
1364: EMPTY
1365: LIST
1366: LIST
1367: PUSH
1368: EMPTY
1369: LIST
1370: LIST
1371: PPUSH
1372: CALL_OW 70
1376: PUSH
1377: FOR_IN
1378: IFFALSE 1425
// if Attacks ( apeman ) then
1380: LD_VAR 0 2
1384: PPUSH
1385: CALL_OW 320
1389: IFFALSE 1423
// if GetSide ( Attacks ( apeman ) ) = 3 then
1391: LD_VAR 0 2
1395: PPUSH
1396: CALL_OW 320
1400: PPUSH
1401: CALL_OW 255
1405: PUSH
1406: LD_INT 3
1408: EQUAL
1409: IFFALSE 1423
// begin attackedByApemanNearLake = true ;
1411: LD_ADDR_EXP 6
1415: PUSH
1416: LD_INT 1
1418: ST_TO_ADDR
// exit ;
1419: POP
1420: POP
1421: GO 1427
// end ;
1423: GO 1377
1425: POP
1426: POP
// end ;
1427: PPOPN 2
1429: END
// every 1 trigger IsDying ( apemanWithRadio ) do
1430: LD_EXP 9
1434: PPUSH
1435: CALL_OW 303
1439: IFFALSE 1473
1441: GO 1443
1443: DISABLE
// radioDropPosition = [ GetX ( apemanWithRadio ) , GetY ( apemanWithRadio ) ] ;
1444: LD_ADDR_EXP 10
1448: PUSH
1449: LD_EXP 9
1453: PPUSH
1454: CALL_OW 250
1458: PUSH
1459: LD_EXP 9
1463: PPUSH
1464: CALL_OW 251
1468: PUSH
1469: EMPTY
1470: LIST
1471: LIST
1472: ST_TO_ADDR
1473: END
// every 0 0$1 trigger IsDead ( apemanWithRadio ) and SeeXY ( 3 , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) do var nearUnit ;
1474: LD_EXP 9
1478: PPUSH
1479: CALL_OW 301
1483: PUSH
1484: LD_INT 3
1486: PPUSH
1487: LD_EXP 10
1491: PUSH
1492: LD_INT 1
1494: ARRAY
1495: PPUSH
1496: LD_EXP 10
1500: PUSH
1501: LD_INT 2
1503: ARRAY
1504: PPUSH
1505: CALL_OW 293
1509: AND
1510: IFFALSE 1911
1512: GO 1514
1514: DISABLE
1515: LD_INT 0
1517: PPUSH
// begin Say ( Burlak , D2a-Bur-1 ) ;
1518: LD_EXP 43
1522: PPUSH
1523: LD_STRING D2a-Bur-1
1525: PPUSH
1526: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 then
1530: LD_INT 22
1532: PUSH
1533: LD_INT 3
1535: PUSH
1536: EMPTY
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 21
1542: PUSH
1543: LD_INT 1
1545: PUSH
1546: EMPTY
1547: LIST
1548: LIST
1549: PUSH
1550: EMPTY
1551: LIST
1552: LIST
1553: PPUSH
1554: CALL_OW 69
1558: PUSH
1559: LD_INT 1
1561: EQUAL
1562: IFFALSE 1578
// Say ( Burlak , D2a-Bur-2 ) else
1564: LD_EXP 43
1568: PPUSH
1569: LD_STRING D2a-Bur-2
1571: PPUSH
1572: CALL_OW 88
1576: GO 1911
// begin nearUnit = NearestUnitToXY ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1578: LD_ADDR_VAR 0 1
1582: PUSH
1583: LD_INT 22
1585: PUSH
1586: LD_INT 3
1588: PUSH
1589: EMPTY
1590: LIST
1591: LIST
1592: PUSH
1593: LD_INT 21
1595: PUSH
1596: LD_INT 1
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: PPUSH
1607: CALL_OW 69
1611: PPUSH
1612: LD_EXP 10
1616: PUSH
1617: LD_INT 1
1619: ARRAY
1620: PPUSH
1621: LD_EXP 10
1625: PUSH
1626: LD_INT 2
1628: ARRAY
1629: PPUSH
1630: CALL_OW 73
1634: ST_TO_ADDR
// ComMoveXY ( nearUnit , radioDropPosition [ 1 ] , radioDropPosition [ 2 ] ) ;
1635: LD_VAR 0 1
1639: PPUSH
1640: LD_EXP 10
1644: PUSH
1645: LD_INT 1
1647: ARRAY
1648: PPUSH
1649: LD_EXP 10
1653: PUSH
1654: LD_INT 2
1656: ARRAY
1657: PPUSH
1658: CALL_OW 111
// case nearUnit of Burlak :
1662: LD_VAR 0 1
1666: PUSH
1667: LD_EXP 43
1671: DOUBLE
1672: EQUAL
1673: IFTRUE 1677
1675: GO 1692
1677: POP
// Say ( Burlak , D3-Bur-2a ) ; Belkov :
1678: LD_EXP 43
1682: PPUSH
1683: LD_STRING D3-Bur-2a
1685: PPUSH
1686: CALL_OW 88
1690: GO 1784
1692: LD_EXP 48
1696: DOUBLE
1697: EQUAL
1698: IFTRUE 1702
1700: GO 1717
1702: POP
// Say ( Belkov , D2a-Bel-1 ) ; Kirilenkova :
1703: LD_EXP 48
1707: PPUSH
1708: LD_STRING D2a-Bel-1
1710: PPUSH
1711: CALL_OW 88
1715: GO 1784
1717: LD_EXP 50
1721: DOUBLE
1722: EQUAL
1723: IFTRUE 1727
1725: GO 1742
1727: POP
// Say ( Kirilenkova , D2a-Kir-1 ) ; else
1728: LD_EXP 50
1732: PPUSH
1733: LD_STRING D2a-Kir-1
1735: PPUSH
1736: CALL_OW 88
1740: GO 1784
1742: POP
// if GetSex ( nearUnit ) = sex_male then
1743: LD_VAR 0 1
1747: PPUSH
1748: CALL_OW 258
1752: PUSH
1753: LD_INT 1
1755: EQUAL
1756: IFFALSE 1772
// Say ( nearUnit , D2a-RSol1-1 ) else
1758: LD_VAR 0 1
1762: PPUSH
1763: LD_STRING D2a-RSol1-1
1765: PPUSH
1766: CALL_OW 88
1770: GO 1784
// Say ( nearUnit , D2a-RFSol1-1 ) ; end ;
1772: LD_VAR 0 1
1776: PPUSH
1777: LD_STRING D2a-RFSol1-1
1779: PPUSH
1780: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) ) then
1784: LD_EXP 51
1788: PPUSH
1789: CALL_OW 255
1793: PUSH
1794: LD_INT 3
1796: EQUAL
1797: PUSH
1798: LD_EXP 51
1802: PPUSH
1803: CALL_OW 302
1807: AND
1808: IFFALSE 1822
// Say ( Gnyevko , D2a-Gny-1 ) ;
1810: LD_EXP 51
1814: PPUSH
1815: LD_STRING D2a-Gny-1
1817: PPUSH
1818: CALL_OW 88
// if ( apemanWithRadio = apemanAttackedBurlak ) then
1822: LD_EXP 9
1826: PUSH
1827: LD_EXP 8
1831: EQUAL
1832: IFFALSE 1846
// Say ( Burlak , D3-Bur-2 ) ;
1834: LD_EXP 43
1838: PPUSH
1839: LD_STRING D3-Bur-2
1841: PPUSH
1842: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 8 ) then
1846: LD_EXP 51
1850: PPUSH
1851: CALL_OW 255
1855: PUSH
1856: LD_INT 8
1858: EQUAL
1859: IFFALSE 1911
// begin Say ( Burlak , D12-Bur-1 ) ;
1861: LD_EXP 43
1865: PPUSH
1866: LD_STRING D12-Bur-1
1868: PPUSH
1869: CALL_OW 88
// if GetSide ( Belkov ) = 3 and IsOK ( Belkov ) then
1873: LD_EXP 48
1877: PPUSH
1878: CALL_OW 255
1882: PUSH
1883: LD_INT 3
1885: EQUAL
1886: PUSH
1887: LD_EXP 48
1891: PPUSH
1892: CALL_OW 302
1896: AND
1897: IFFALSE 1911
// Say ( Belkov , D12-Bel-2 ) ;
1899: LD_EXP 48
1903: PPUSH
1904: LD_STRING D12-Bel-2
1906: PPUSH
1907: CALL_OW 88
// end ; end ; end ;
1911: PPOPN 1
1913: END
// every 0 0$1 trigger See ( 3 , Gnyevko ) do var nearUnit , randomUnit ;
1914: LD_INT 3
1916: PPUSH
1917: LD_EXP 51
1921: PPUSH
1922: CALL_OW 292
1926: IFFALSE 2464
1928: GO 1930
1930: DISABLE
1931: LD_INT 0
1933: PPUSH
1934: PPUSH
// begin SetLives ( Gnyevko , gnyevkoStartHP ) ;
1935: LD_EXP 51
1939: PPUSH
1940: LD_EXP 36
1944: PPUSH
1945: CALL_OW 234
// CenterNowOnUnits ( Gnyevko ) ;
1949: LD_EXP 51
1953: PPUSH
1954: CALL_OW 87
// DialogueOn ;
1958: CALL_OW 6
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , Gnyevko ) ;
1962: LD_ADDR_VAR 0 1
1966: PUSH
1967: LD_INT 22
1969: PUSH
1970: LD_INT 3
1972: PUSH
1973: EMPTY
1974: LIST
1975: LIST
1976: PUSH
1977: LD_INT 21
1979: PUSH
1980: LD_INT 1
1982: PUSH
1983: EMPTY
1984: LIST
1985: LIST
1986: PUSH
1987: EMPTY
1988: LIST
1989: LIST
1990: PPUSH
1991: CALL_OW 69
1995: PPUSH
1996: LD_EXP 51
2000: PPUSH
2001: CALL_OW 74
2005: ST_TO_ADDR
// if nearUnit = Burlak then
2006: LD_VAR 0 1
2010: PUSH
2011: LD_EXP 43
2015: EQUAL
2016: IFFALSE 2334
// begin Say ( Burlak , D3-Bur-1 ) ;
2018: LD_EXP 43
2022: PPUSH
2023: LD_STRING D3-Bur-1
2025: PPUSH
2026: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2030: LD_EXP 51
2034: PPUSH
2035: LD_STRING D3-Gny-1
2037: PPUSH
2038: CALL_OW 88
// Say ( Burlak , D3-Bur-2b ) ;
2042: LD_EXP 43
2046: PPUSH
2047: LD_STRING D3-Bur-2b
2049: PPUSH
2050: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 1 and not meetPokryshkin then
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: PUSH
2064: LD_INT 21
2066: PUSH
2067: LD_INT 1
2069: PUSH
2070: EMPTY
2071: LIST
2072: LIST
2073: PUSH
2074: EMPTY
2075: LIST
2076: LIST
2077: PPUSH
2078: CALL_OW 69
2082: PUSH
2083: LD_INT 1
2085: EQUAL
2086: PUSH
2087: LD_EXP 13
2091: NOT
2092: AND
2093: IFFALSE 2145
// begin Say ( Burlak , D3-Bur-2c ) ;
2095: LD_EXP 43
2099: PPUSH
2100: LD_STRING D3-Bur-2c
2102: PPUSH
2103: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2107: LD_EXP 51
2111: PPUSH
2112: LD_STRING D3-Gny-2
2114: PPUSH
2115: CALL_OW 88
// DialogueOff ;
2119: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2123: LD_EXP 51
2127: PPUSH
2128: LD_INT 3
2130: PPUSH
2131: CALL_OW 235
// gnyevkoSaved = true ;
2135: LD_ADDR_EXP 11
2139: PUSH
2140: LD_INT 1
2142: ST_TO_ADDR
// exit ;
2143: GO 2464
// end ; if ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 or meetPokryshkin ) and not evacuationAvailable then
2145: LD_INT 22
2147: PUSH
2148: LD_INT 3
2150: PUSH
2151: EMPTY
2152: LIST
2153: LIST
2154: PUSH
2155: LD_INT 21
2157: PUSH
2158: LD_INT 1
2160: PUSH
2161: EMPTY
2162: LIST
2163: LIST
2164: PUSH
2165: EMPTY
2166: LIST
2167: LIST
2168: PPUSH
2169: CALL_OW 69
2173: PUSH
2174: LD_INT 1
2176: GREATER
2177: PUSH
2178: LD_EXP 13
2182: OR
2183: PUSH
2184: LD_EXP 21
2188: NOT
2189: AND
2190: IFFALSE 2242
// begin Say ( Burlak , D3-Bur-2d ) ;
2192: LD_EXP 43
2196: PPUSH
2197: LD_STRING D3-Bur-2d
2199: PPUSH
2200: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2204: LD_EXP 51
2208: PPUSH
2209: LD_STRING D3-Gny-2
2211: PPUSH
2212: CALL_OW 88
// DialogueOff ;
2216: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2220: LD_EXP 51
2224: PPUSH
2225: LD_INT 3
2227: PPUSH
2228: CALL_OW 235
// gnyevkoSaved = true ;
2232: LD_ADDR_EXP 11
2236: PUSH
2237: LD_INT 1
2239: ST_TO_ADDR
// exit ;
2240: GO 2464
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 1 and evacuationAvailable then
2242: LD_INT 22
2244: PUSH
2245: LD_INT 3
2247: PUSH
2248: EMPTY
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: EMPTY
2259: LIST
2260: LIST
2261: PUSH
2262: EMPTY
2263: LIST
2264: LIST
2265: PPUSH
2266: CALL_OW 69
2270: PUSH
2271: LD_INT 1
2273: GREATER
2274: PUSH
2275: LD_EXP 21
2279: AND
2280: IFFALSE 2332
// begin Say ( Burlak , D3-Bur-2e ) ;
2282: LD_EXP 43
2286: PPUSH
2287: LD_STRING D3-Bur-2e
2289: PPUSH
2290: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2 ) ;
2294: LD_EXP 51
2298: PPUSH
2299: LD_STRING D3-Gny-2
2301: PPUSH
2302: CALL_OW 88
// DialogueOff ;
2306: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2310: LD_EXP 51
2314: PPUSH
2315: LD_INT 3
2317: PPUSH
2318: CALL_OW 235
// gnyevkoSaved = true ;
2322: LD_ADDR_EXP 11
2326: PUSH
2327: LD_INT 1
2329: ST_TO_ADDR
// exit ;
2330: GO 2464
// end ; end else
2332: GO 2464
// begin if GetSex ( nearUnit ) = sex_male then
2334: LD_VAR 0 1
2338: PPUSH
2339: CALL_OW 258
2343: PUSH
2344: LD_INT 1
2346: EQUAL
2347: IFFALSE 2363
// Say ( nearUnit , D3-RSol1-1 ) else
2349: LD_VAR 0 1
2353: PPUSH
2354: LD_STRING D3-RSol1-1
2356: PPUSH
2357: CALL_OW 88
2361: GO 2375
// Say ( nearUnit , D3-RFSol1-1 ) ;
2363: LD_VAR 0 1
2367: PPUSH
2368: LD_STRING D3-RFSol1-1
2370: PPUSH
2371: CALL_OW 88
// Say ( Gnyevko , D3-Gny-1 ) ;
2375: LD_EXP 51
2379: PPUSH
2380: LD_STRING D3-Gny-1
2382: PPUSH
2383: CALL_OW 88
// if GetSex ( nearUnit ) = sex_male then
2387: LD_VAR 0 1
2391: PPUSH
2392: CALL_OW 258
2396: PUSH
2397: LD_INT 1
2399: EQUAL
2400: IFFALSE 2416
// Say ( nearUnit , D3-RSol1-2 ) else
2402: LD_VAR 0 1
2406: PPUSH
2407: LD_STRING D3-RSol1-2
2409: PPUSH
2410: CALL_OW 88
2414: GO 2428
// Say ( nearUnit , D3-RFSol1-2 ) ;
2416: LD_VAR 0 1
2420: PPUSH
2421: LD_STRING D3-RFSol1-2
2423: PPUSH
2424: CALL_OW 88
// Say ( Gnyevko , D3-Gny-2a ) ;
2428: LD_EXP 51
2432: PPUSH
2433: LD_STRING D3-Gny-2a
2435: PPUSH
2436: CALL_OW 88
// DialogueOff ;
2440: CALL_OW 7
// SetSide ( Gnyevko , 3 ) ;
2444: LD_EXP 51
2448: PPUSH
2449: LD_INT 3
2451: PPUSH
2452: CALL_OW 235
// gnyevkoSaved = true ;
2456: LD_ADDR_EXP 11
2460: PUSH
2461: LD_INT 1
2463: ST_TO_ADDR
// end ; end ;
2464: PPOPN 2
2466: END
// every 1 trigger not gnyevkoSaved or not jelenaSaved do var ape ;
2467: LD_EXP 11
2471: NOT
2472: PUSH
2473: LD_EXP 20
2477: NOT
2478: OR
2479: IFFALSE 2674
2481: GO 2483
2483: DISABLE
2484: LD_INT 0
2486: PPUSH
// begin enable ;
2487: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$02 then
2488: LD_EXP 11
2492: NOT
2493: PUSH
2494: LD_EXP 37
2498: PUSH
2499: LD_INT 70
2501: GREATER
2502: AND
2503: IFFALSE 2581
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2505: LD_ADDR_VAR 0 1
2509: PUSH
2510: LD_INT 22
2512: PUSH
2513: LD_INT 0
2515: PUSH
2516: EMPTY
2517: LIST
2518: LIST
2519: PUSH
2520: LD_INT 25
2522: PUSH
2523: LD_INT 12
2525: PUSH
2526: EMPTY
2527: LIST
2528: LIST
2529: PUSH
2530: EMPTY
2531: LIST
2532: LIST
2533: PPUSH
2534: CALL_OW 69
2538: PUSH
2539: FOR_IN
2540: IFFALSE 2579
// GetAwayFromXY ( ape , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 10 , false ) ;
2542: LD_VAR 0 1
2546: PPUSH
2547: LD_EXP 51
2551: PPUSH
2552: CALL_OW 250
2556: PPUSH
2557: LD_EXP 51
2561: PPUSH
2562: CALL_OW 251
2566: PPUSH
2567: LD_INT 10
2569: PPUSH
2570: LD_INT 0
2572: PPUSH
2573: CALL 8161 0 5
2577: GO 2539
2579: POP
2580: POP
// if not jelenaSaved and apeAttackJelenaTime > 0 0$02 then
2581: LD_EXP 20
2585: NOT
2586: PUSH
2587: LD_EXP 38
2591: PUSH
2592: LD_INT 70
2594: GREATER
2595: AND
2596: IFFALSE 2674
// for ape in FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) do
2598: LD_ADDR_VAR 0 1
2602: PUSH
2603: LD_INT 22
2605: PUSH
2606: LD_INT 0
2608: PUSH
2609: EMPTY
2610: LIST
2611: LIST
2612: PUSH
2613: LD_INT 25
2615: PUSH
2616: LD_INT 12
2618: PUSH
2619: EMPTY
2620: LIST
2621: LIST
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: PPUSH
2627: CALL_OW 69
2631: PUSH
2632: FOR_IN
2633: IFFALSE 2672
// GetAwayFromXY ( ape , GetX ( Kirilenkova ) , GetY ( Kirilenkova ) , 10 , false ) ;
2635: LD_VAR 0 1
2639: PPUSH
2640: LD_EXP 50
2644: PPUSH
2645: CALL_OW 250
2649: PPUSH
2650: LD_EXP 50
2654: PPUSH
2655: CALL_OW 251
2659: PPUSH
2660: LD_INT 10
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL 8161 0 5
2670: GO 2632
2672: POP
2673: POP
// end ;
2674: PPOPN 1
2676: END
// every 0 0$1 trigger not gnyevkoSaved or not jelenaSaved do
2677: LD_EXP 11
2681: NOT
2682: PUSH
2683: LD_EXP 20
2687: NOT
2688: OR
2689: IFFALSE 2768
2691: GO 2693
2693: DISABLE
// begin enable ;
2694: ENABLE
// if not gnyevkoSaved and apeAttackGnyevkoTime > 0 0$00 then
2695: LD_EXP 11
2699: NOT
2700: PUSH
2701: LD_EXP 37
2705: PUSH
2706: LD_INT 0
2708: GREATER
2709: AND
2710: IFFALSE 2726
// apeAttackGnyevkoTime = apeAttackGnyevkoTime - 0 0$01 ;
2712: LD_ADDR_EXP 37
2716: PUSH
2717: LD_EXP 37
2721: PUSH
2722: LD_INT 35
2724: MINUS
2725: ST_TO_ADDR
// if IsPlaced ( Kirilenkova ) and not jelenaSaved and apeAttackJelenaTime > 0 0$00 then
2726: LD_EXP 50
2730: PPUSH
2731: CALL_OW 305
2735: PUSH
2736: LD_EXP 20
2740: NOT
2741: AND
2742: PUSH
2743: LD_EXP 38
2747: PUSH
2748: LD_INT 0
2750: GREATER
2751: AND
2752: IFFALSE 2768
// apeAttackJelenaTime = apeAttackJelenaTime - 0 0$01 ;
2754: LD_ADDR_EXP 38
2758: PUSH
2759: LD_EXP 38
2763: PUSH
2764: LD_INT 35
2766: MINUS
2767: ST_TO_ADDR
// end ;
2768: END
// every 0 0$1 trigger ( See ( 3 , Pokryshkin ) or See ( 6 , Burlak ) or See ( 6 , Gnyevko ) ) and not meetPokryshkin do
2769: LD_INT 3
2771: PPUSH
2772: LD_EXP 44
2776: PPUSH
2777: CALL_OW 292
2781: PUSH
2782: LD_INT 6
2784: PPUSH
2785: LD_EXP 43
2789: PPUSH
2790: CALL_OW 292
2794: OR
2795: PUSH
2796: LD_INT 6
2798: PPUSH
2799: LD_EXP 51
2803: PPUSH
2804: CALL_OW 292
2808: OR
2809: PUSH
2810: LD_EXP 13
2814: NOT
2815: AND
2816: IFFALSE 3703
2818: GO 2820
2820: DISABLE
// begin enable ;
2821: ENABLE
// InGameOn ;
2822: CALL_OW 8
// CenterNowOnUnits ( Pokryshkin ) ;
2826: LD_EXP 44
2830: PPUSH
2831: CALL_OW 87
// ComWalk ( Gnyevko ) ;
2835: LD_EXP 51
2839: PPUSH
2840: CALL_OW 138
// AddComHold ( [ Burlak , Gnyevko ] ) ;
2844: LD_EXP 43
2848: PUSH
2849: LD_EXP 51
2853: PUSH
2854: EMPTY
2855: LIST
2856: LIST
2857: PPUSH
2858: CALL_OW 200
// DialogueOn ;
2862: CALL_OW 6
// if gnyevkoWaitWithPokryshkin then
2866: LD_EXP 12
2870: IFFALSE 3122
// begin meetPokryshkin = true ;
2872: LD_ADDR_EXP 13
2876: PUSH
2877: LD_INT 1
2879: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
2880: LD_INT 6
2882: PPUSH
2883: LD_INT 3
2885: PPUSH
2886: CALL_OW 343
// DialogueOff ;
2890: CALL_OW 7
// ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
2894: LD_EXP 43
2898: PPUSH
2899: LD_EXP 44
2903: PPUSH
2904: CALL_OW 250
2908: PPUSH
2909: LD_EXP 44
2913: PPUSH
2914: CALL_OW 251
2918: PPUSH
2919: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
2923: LD_EXP 43
2927: PPUSH
2928: LD_EXP 44
2932: PPUSH
2933: CALL_OW 179
// ComTurnUnit ( Pokryshkin , Burlak ) ;
2937: LD_EXP 44
2941: PPUSH
2942: LD_EXP 43
2946: PPUSH
2947: CALL_OW 119
// Say ( Gnyevko , D4-Gny-3 ) ;
2951: LD_EXP 51
2955: PPUSH
2956: LD_STRING D4-Gny-3
2958: PPUSH
2959: CALL_OW 88
// Say ( Burlak , D4-Bur-3 ) ;
2963: LD_EXP 43
2967: PPUSH
2968: LD_STRING D4-Bur-3
2970: PPUSH
2971: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
2975: LD_EXP 44
2979: PPUSH
2980: LD_STRING D4-Pok-4
2982: PPUSH
2983: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
2987: LD_EXP 39
2991: PPUSH
2992: LD_INT 18
2994: PPUSH
2995: LD_INT 1
2997: PPUSH
2998: CALL_OW 49
// wait ( 0 0$2 ) ;
3002: LD_INT 70
3004: PPUSH
3005: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3009: LD_EXP 43
3013: PPUSH
3014: LD_STRING D4-Bur-4
3016: PPUSH
3017: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3021: LD_EXP 44
3025: PPUSH
3026: LD_STRING D4-Pok-5
3028: PPUSH
3029: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3033: LD_EXP 39
3037: PPUSH
3038: LD_STRING D4-Sol1-5
3040: PPUSH
3041: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3045: LD_EXP 44
3049: PPUSH
3050: LD_STRING D4-Pok-6
3052: PPUSH
3053: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3057: LD_EXP 44
3061: PPUSH
3062: LD_STRING D4-Pok-6a
3064: PPUSH
3065: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3069: LD_EXP 43
3073: PPUSH
3074: LD_STRING D4-Bur-6
3076: PPUSH
3077: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3081: LD_EXP 44
3085: PPUSH
3086: LD_STRING D4-Pok-7
3088: PPUSH
3089: CALL_OW 88
// DialogueOff ;
3093: CALL_OW 7
// InGameOff ;
3097: CALL_OW 9
// ChangeMissionObjectives ( M2 ) ;
3101: LD_STRING M2
3103: PPUSH
3104: CALL_OW 337
// goToHill = true ;
3108: LD_ADDR_EXP 14
3112: PUSH
3113: LD_INT 1
3115: ST_TO_ADDR
// MoveToHill ;
3116: CALL 10041 0 0
// exit ;
3120: GO 3703
// end ; ComStop ( [ Burlak , Gnyevko ] ) ;
3122: LD_EXP 43
3126: PUSH
3127: LD_EXP 51
3131: PUSH
3132: EMPTY
3133: LIST
3134: LIST
3135: PPUSH
3136: CALL_OW 141
// Say ( Pokryshkin , D4-Pok-1 ) ;
3140: LD_EXP 44
3144: PPUSH
3145: LD_STRING D4-Pok-1
3147: PPUSH
3148: CALL_OW 88
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3152: LD_EXP 51
3156: PPUSH
3157: CALL_OW 255
3161: PUSH
3162: LD_INT 3
3164: EQUAL
3165: PUSH
3166: LD_EXP 51
3170: PPUSH
3171: CALL_OW 302
3175: AND
3176: IFFALSE 3190
// Say ( Gnyevko , D4-Gny-1 ) ;
3178: LD_EXP 51
3182: PPUSH
3183: LD_STRING D4-Gny-1
3185: PPUSH
3186: CALL_OW 88
// if GetDistUnits ( Burlak , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ) > 8 and GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3190: LD_EXP 43
3194: PPUSH
3195: LD_INT 22
3197: PUSH
3198: LD_INT 6
3200: PUSH
3201: EMPTY
3202: LIST
3203: LIST
3204: PUSH
3205: LD_INT 21
3207: PUSH
3208: LD_INT 1
3210: PUSH
3211: EMPTY
3212: LIST
3213: LIST
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PPUSH
3219: CALL_OW 69
3223: PPUSH
3224: LD_EXP 43
3228: PPUSH
3229: CALL_OW 74
3233: PPUSH
3234: CALL_OW 296
3238: PUSH
3239: LD_INT 8
3241: GREATER
3242: PUSH
3243: LD_EXP 51
3247: PPUSH
3248: CALL_OW 255
3252: PUSH
3253: LD_INT 3
3255: EQUAL
3256: AND
3257: PUSH
3258: LD_EXP 51
3262: PPUSH
3263: CALL_OW 302
3267: AND
3268: IFFALSE 3366
// begin ComWalk ( Gnyevko ) ;
3270: LD_EXP 51
3274: PPUSH
3275: CALL_OW 138
// Say ( Pokryshkin , D4-Pok-2 ) ;
3279: LD_EXP 44
3283: PPUSH
3284: LD_STRING D4-Pok-2
3286: PPUSH
3287: CALL_OW 88
// Say ( Gnyevko , D4-Gny-2 ) ;
3291: LD_EXP 51
3295: PPUSH
3296: LD_STRING D4-Gny-2
3298: PPUSH
3299: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-3 ) ;
3303: LD_EXP 44
3307: PPUSH
3308: LD_STRING D4-Pok-3
3310: PPUSH
3311: CALL_OW 88
// gnyevkoWaitWithPokryshkin = true ;
3315: LD_ADDR_EXP 12
3319: PUSH
3320: LD_INT 1
3322: ST_TO_ADDR
// SetSide ( Gnyevko , 6 ) ;
3323: LD_EXP 51
3327: PPUSH
3328: LD_INT 6
3330: PPUSH
3331: CALL_OW 235
// AddComMoveXY ( Gnyevko , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3335: LD_EXP 51
3339: PPUSH
3340: LD_EXP 44
3344: PPUSH
3345: CALL_OW 250
3349: PPUSH
3350: LD_EXP 44
3354: PPUSH
3355: CALL_OW 251
3359: PPUSH
3360: CALL_OW 171
// end else
3364: GO 3695
// begin meetPokryshkin = true ;
3366: LD_ADDR_EXP 13
3370: PUSH
3371: LD_INT 1
3373: ST_TO_ADDR
// ChangeSideFog ( 6 , 3 ) ;
3374: LD_INT 6
3376: PPUSH
3377: LD_INT 3
3379: PPUSH
3380: CALL_OW 343
// DialogueOff ;
3384: CALL_OW 7
// if GetSide ( Gnyevko ) = 3 and IsOK ( Gnyevko ) then
3388: LD_EXP 51
3392: PPUSH
3393: CALL_OW 255
3397: PUSH
3398: LD_INT 3
3400: EQUAL
3401: PUSH
3402: LD_EXP 51
3406: PPUSH
3407: CALL_OW 302
3411: AND
3412: IFFALSE 3489
// begin ComMoveXY ( [ Burlak , Gnyevko ] , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3414: LD_EXP 43
3418: PUSH
3419: LD_EXP 51
3423: PUSH
3424: EMPTY
3425: LIST
3426: LIST
3427: PPUSH
3428: LD_EXP 44
3432: PPUSH
3433: CALL_OW 250
3437: PPUSH
3438: LD_EXP 44
3442: PPUSH
3443: CALL_OW 251
3447: PPUSH
3448: CALL_OW 111
// AddComTurnUnit ( [ Burlak , Gnyevko ] , Pokryshkin ) ;
3452: LD_EXP 43
3456: PUSH
3457: LD_EXP 51
3461: PUSH
3462: EMPTY
3463: LIST
3464: LIST
3465: PPUSH
3466: LD_EXP 44
3470: PPUSH
3471: CALL_OW 179
// SetSide ( Gnyevko , 6 ) ;
3475: LD_EXP 51
3479: PPUSH
3480: LD_INT 6
3482: PPUSH
3483: CALL_OW 235
// end else
3487: GO 3532
// begin ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3489: LD_EXP 43
3493: PPUSH
3494: LD_EXP 44
3498: PPUSH
3499: CALL_OW 250
3503: PPUSH
3504: LD_EXP 44
3508: PPUSH
3509: CALL_OW 251
3513: PPUSH
3514: CALL_OW 111
// AddComTurnUnit ( Burlak , Pokryshkin ) ;
3518: LD_EXP 43
3522: PPUSH
3523: LD_EXP 44
3527: PPUSH
3528: CALL_OW 179
// end ; ComTurnUnit ( Pokryshkin , Burlak ) ;
3532: LD_EXP 44
3536: PPUSH
3537: LD_EXP 43
3541: PPUSH
3542: CALL_OW 119
// Say ( Burlak , D4-Bur-3 ) ;
3546: LD_EXP 43
3550: PPUSH
3551: LD_STRING D4-Bur-3
3553: PPUSH
3554: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-4 ) ;
3558: LD_EXP 44
3562: PPUSH
3563: LD_STRING D4-Pok-4
3565: PPUSH
3566: CALL_OW 88
// PlaceUnitArea ( Charles , CharlesSpawnArea , true ) ;
3570: LD_EXP 39
3574: PPUSH
3575: LD_INT 18
3577: PPUSH
3578: LD_INT 1
3580: PPUSH
3581: CALL_OW 49
// wait ( 0 0$2 ) ;
3585: LD_INT 70
3587: PPUSH
3588: CALL_OW 67
// Say ( Burlak , D4-Bur-4 ) ;
3592: LD_EXP 43
3596: PPUSH
3597: LD_STRING D4-Bur-4
3599: PPUSH
3600: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-5 ) ;
3604: LD_EXP 44
3608: PPUSH
3609: LD_STRING D4-Pok-5
3611: PPUSH
3612: CALL_OW 88
// SayRadio ( Charles , D4-Sol1-5 ) ;
3616: LD_EXP 39
3620: PPUSH
3621: LD_STRING D4-Sol1-5
3623: PPUSH
3624: CALL_OW 94
// Say ( Pokryshkin , D4-Pok-6 ) ;
3628: LD_EXP 44
3632: PPUSH
3633: LD_STRING D4-Pok-6
3635: PPUSH
3636: CALL_OW 88
// SayRadio ( Pokryshkin , D4-Pok-6a ) ;
3640: LD_EXP 44
3644: PPUSH
3645: LD_STRING D4-Pok-6a
3647: PPUSH
3648: CALL_OW 94
// Say ( Burlak , D4-Bur-6 ) ;
3652: LD_EXP 43
3656: PPUSH
3657: LD_STRING D4-Bur-6
3659: PPUSH
3660: CALL_OW 88
// Say ( Pokryshkin , D4-Pok-7 ) ;
3664: LD_EXP 44
3668: PPUSH
3669: LD_STRING D4-Pok-7
3671: PPUSH
3672: CALL_OW 88
// ChangeMissionObjectives ( M2 ) ;
3676: LD_STRING M2
3678: PPUSH
3679: CALL_OW 337
// goToHill = true ;
3683: LD_ADDR_EXP 14
3687: PUSH
3688: LD_INT 1
3690: ST_TO_ADDR
// MoveToHill ;
3691: CALL 10041 0 0
// end ; DialogueOff ;
3695: CALL_OW 7
// InGameOff ;
3699: CALL_OW 9
// end ;
3703: END
// every 0 0$1 trigger GetDistUnits ( Burlak , Pokryshkin ) > 10 and goToHill and not traitor do var ruSolds ;
3704: LD_EXP 43
3708: PPUSH
3709: LD_EXP 44
3713: PPUSH
3714: CALL_OW 296
3718: PUSH
3719: LD_INT 10
3721: GREATER
3722: PUSH
3723: LD_EXP 14
3727: AND
3728: PUSH
3729: LD_EXP 17
3733: NOT
3734: AND
3735: IFFALSE 3936
3737: GO 3739
3739: DISABLE
3740: LD_INT 0
3742: PPUSH
// begin enable ;
3743: ENABLE
// ruSolds = [ Pokryshkin , Saseda , Jaworska , Balei , Belkov ] ;
3744: LD_ADDR_VAR 0 1
3748: PUSH
3749: LD_EXP 44
3753: PUSH
3754: LD_EXP 45
3758: PUSH
3759: LD_EXP 46
3763: PUSH
3764: LD_EXP 47
3768: PUSH
3769: LD_EXP 48
3773: PUSH
3774: EMPTY
3775: LIST
3776: LIST
3777: LIST
3778: LIST
3779: LIST
3780: ST_TO_ADDR
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
3781: LD_EXP 51
3785: PPUSH
3786: CALL_OW 255
3790: PUSH
3791: LD_INT 6
3793: EQUAL
3794: PUSH
3795: LD_EXP 11
3799: AND
3800: IFFALSE 3818
// ruSolds = ruSolds ^ Gnyevko ;
3802: LD_ADDR_VAR 0 1
3806: PUSH
3807: LD_VAR 0 1
3811: PUSH
3812: LD_EXP 51
3816: ADD
3817: ST_TO_ADDR
// ComStop ( ruSolds ) ;
3818: LD_VAR 0 1
3822: PPUSH
3823: CALL_OW 141
// CenterNowOnUnits ( Burlak ) ;
3827: LD_EXP 43
3831: PPUSH
3832: CALL_OW 87
// DialogueOn ;
3836: CALL_OW 6
// Say ( Pokryshkin , DSplit-Pok-1 ) ;
3840: LD_EXP 44
3844: PPUSH
3845: LD_STRING DSplit-Pok-1
3847: PPUSH
3848: CALL_OW 88
// Say ( Burlak , DSplit-Bur-1 ) ;
3852: LD_EXP 43
3856: PPUSH
3857: LD_STRING DSplit-Bur-1
3859: PPUSH
3860: CALL_OW 88
// DialogueOff ;
3864: CALL_OW 7
// InGameOn ;
3868: CALL_OW 8
// repeat ComMoveXY ( Burlak , GetX ( Pokryshkin ) , GetY ( Pokryshkin ) ) ;
3872: LD_EXP 43
3876: PPUSH
3877: LD_EXP 44
3881: PPUSH
3882: CALL_OW 250
3886: PPUSH
3887: LD_EXP 44
3891: PPUSH
3892: CALL_OW 251
3896: PPUSH
3897: CALL_OW 111
// wait ( 0 0$1 ) ;
3901: LD_INT 35
3903: PPUSH
3904: CALL_OW 67
// until GetDistUnits ( Burlak , Pokryshkin ) < 6 ;
3908: LD_EXP 43
3912: PPUSH
3913: LD_EXP 44
3917: PPUSH
3918: CALL_OW 296
3922: PUSH
3923: LD_INT 6
3925: LESS
3926: IFFALSE 3872
// InGameOff ;
3928: CALL_OW 9
// MoveToHill ;
3932: CALL 10041 0 0
// end ;
3936: PPOPN 1
3938: END
// export function Dialogue_AttackComrade ; var ruSolds ; begin
3939: LD_INT 0
3941: PPUSH
3942: PPUSH
// traitor = true ;
3943: LD_ADDR_EXP 17
3947: PUSH
3948: LD_INT 1
3950: ST_TO_ADDR
// DialogueOn ;
3951: CALL_OW 6
// Say ( Pokryshkin , DAttack-Pok-1 ) ;
3955: LD_EXP 44
3959: PPUSH
3960: LD_STRING DAttack-Pok-1
3962: PPUSH
3963: CALL_OW 88
// DialogueOff ;
3967: CALL_OW 7
// SetAttitude ( 3 , 6 , att_enemy , true ) ;
3971: LD_INT 3
3973: PPUSH
3974: LD_INT 6
3976: PPUSH
3977: LD_INT 2
3979: PPUSH
3980: LD_INT 1
3982: PPUSH
3983: CALL_OW 80
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , Burlak ) ;
3987: LD_INT 22
3989: PUSH
3990: LD_INT 6
3992: PUSH
3993: EMPTY
3994: LIST
3995: LIST
3996: PUSH
3997: LD_INT 21
3999: PUSH
4000: LD_INT 1
4002: PUSH
4003: EMPTY
4004: LIST
4005: LIST
4006: PUSH
4007: EMPTY
4008: LIST
4009: LIST
4010: PPUSH
4011: CALL_OW 69
4015: PPUSH
4016: LD_EXP 43
4020: PPUSH
4021: CALL_OW 115
// end ;
4025: LD_VAR 0 1
4029: RET
// every 0 0$1 trigger GetDistUnitXY ( Pokryshkin , 65 , 59 ) < 4 and not traitor do
4030: LD_EXP 44
4034: PPUSH
4035: LD_INT 65
4037: PPUSH
4038: LD_INT 59
4040: PPUSH
4041: CALL_OW 297
4045: PUSH
4046: LD_INT 4
4048: LESS
4049: PUSH
4050: LD_EXP 17
4054: NOT
4055: AND
4056: IFFALSE 4253
4058: GO 4060
4060: DISABLE
// begin InGameOn ;
4061: CALL_OW 8
// CenterOnXY ( 55 , 50 ) ;
4065: LD_INT 55
4067: PPUSH
4068: LD_INT 50
4070: PPUSH
4071: CALL_OW 84
// ComMoveXY ( Burlak , 66 , 57 ) ;
4075: LD_EXP 43
4079: PPUSH
4080: LD_INT 66
4082: PPUSH
4083: LD_INT 57
4085: PPUSH
4086: CALL_OW 111
// AddComHold ( Burlak ) ;
4090: LD_EXP 43
4094: PPUSH
4095: CALL_OW 200
// ComMoveXY ( Charles , 59 , 55 ) ;
4099: LD_EXP 39
4103: PPUSH
4104: LD_INT 59
4106: PPUSH
4107: LD_INT 55
4109: PPUSH
4110: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
4114: LD_INT 35
4116: PPUSH
4117: CALL_OW 67
// until See ( 1 , Pokryshkin ) ;
4121: LD_INT 1
4123: PPUSH
4124: LD_EXP 44
4128: PPUSH
4129: CALL_OW 292
4133: IFFALSE 4114
// CenterNowOnUnits ( [ Charles , Pokryshkin ] ) ;
4135: LD_EXP 39
4139: PUSH
4140: LD_EXP 44
4144: PUSH
4145: EMPTY
4146: LIST
4147: LIST
4148: PPUSH
4149: CALL_OW 87
// ComStop ( Charles ) ;
4153: LD_EXP 39
4157: PPUSH
4158: CALL_OW 141
// AddComHold ( Charles ) ;
4162: LD_EXP 39
4166: PPUSH
4167: CALL_OW 200
// AddComTurnUnit ( Charles , Pokryshkin ) ;
4171: LD_EXP 39
4175: PPUSH
4176: LD_EXP 44
4180: PPUSH
4181: CALL_OW 179
// Say ( Charles , D5-Sol1-1 ) ;
4185: LD_EXP 39
4189: PPUSH
4190: LD_STRING D5-Sol1-1
4192: PPUSH
4193: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-1 ) ;
4197: LD_EXP 44
4201: PPUSH
4202: LD_STRING D5-Pok-1
4204: PPUSH
4205: CALL_OW 88
// SetAttitude ( 1 , 6 , att_enemy , true ) ;
4209: LD_INT 1
4211: PPUSH
4212: LD_INT 6
4214: PPUSH
4215: LD_INT 2
4217: PPUSH
4218: LD_INT 1
4220: PPUSH
4221: CALL_OW 80
// SetAttitude ( 1 , 3 , att_enemy , true ) ;
4225: LD_INT 1
4227: PPUSH
4228: LD_INT 3
4230: PPUSH
4231: LD_INT 2
4233: PPUSH
4234: LD_INT 1
4236: PPUSH
4237: CALL_OW 80
// Say ( Charles , D5-Sol1-2 ) ;
4241: LD_EXP 39
4245: PPUSH
4246: LD_STRING D5-Sol1-2
4248: PPUSH
4249: CALL_OW 88
// end ;
4253: END
// every 0 0$1 trigger IsDead ( Charles ) and goToHill do var ruSolds ;
4254: LD_EXP 39
4258: PPUSH
4259: CALL_OW 301
4263: PUSH
4264: LD_EXP 14
4268: AND
4269: IFFALSE 4854
4271: GO 4273
4273: DISABLE
4274: LD_INT 0
4276: PPUSH
// begin goToHill = false ;
4277: LD_ADDR_EXP 14
4281: PUSH
4282: LD_INT 0
4284: ST_TO_ADDR
// ComStop ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4285: LD_INT 22
4287: PUSH
4288: LD_INT 6
4290: PUSH
4291: EMPTY
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 21
4297: PUSH
4298: LD_INT 1
4300: PUSH
4301: EMPTY
4302: LIST
4303: LIST
4304: PUSH
4305: EMPTY
4306: LIST
4307: LIST
4308: PPUSH
4309: CALL_OW 69
4313: PPUSH
4314: CALL_OW 141
// ComWalk ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ) ;
4318: LD_INT 22
4320: PUSH
4321: LD_INT 6
4323: PUSH
4324: EMPTY
4325: LIST
4326: LIST
4327: PUSH
4328: LD_INT 21
4330: PUSH
4331: LD_INT 1
4333: PUSH
4334: EMPTY
4335: LIST
4336: LIST
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: PPUSH
4342: CALL_OW 69
4346: PPUSH
4347: CALL_OW 138
// wait ( 0 0$1 ) ;
4351: LD_INT 35
4353: PPUSH
4354: CALL_OW 67
// CenterOnXY ( 55 , 50 ) ;
4358: LD_INT 55
4360: PPUSH
4361: LD_INT 50
4363: PPUSH
4364: CALL_OW 84
// ComMoveXY ( Burlak , 56 , 56 ) ;
4368: LD_EXP 43
4372: PPUSH
4373: LD_INT 56
4375: PPUSH
4376: LD_INT 56
4378: PPUSH
4379: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 56 , 56 ) ;
4383: LD_INT 22
4385: PUSH
4386: LD_INT 6
4388: PUSH
4389: EMPTY
4390: LIST
4391: LIST
4392: PUSH
4393: LD_INT 21
4395: PUSH
4396: LD_INT 1
4398: PUSH
4399: EMPTY
4400: LIST
4401: LIST
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 69
4411: PPUSH
4412: LD_INT 56
4414: PPUSH
4415: LD_INT 56
4417: PPUSH
4418: CALL_OW 111
// Say ( Burlak , D5-Bur-2 ) ;
4422: LD_EXP 43
4426: PPUSH
4427: LD_STRING D5-Bur-2
4429: PPUSH
4430: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-2 ) ;
4434: LD_EXP 44
4438: PPUSH
4439: LD_STRING D5-Pok-2
4441: PPUSH
4442: CALL_OW 88
// Say ( Belkov , D5-Bel-2 ) ;
4446: LD_EXP 48
4450: PPUSH
4451: LD_STRING D5-Bel-2
4453: PPUSH
4454: CALL_OW 88
// Say ( Pokryshkin , D5-Pok-3 ) ;
4458: LD_EXP 44
4462: PPUSH
4463: LD_STRING D5-Pok-3
4465: PPUSH
4466: CALL_OW 88
// if ( GetSide ( Gnyevko ) = 6 ) then
4470: LD_EXP 51
4474: PPUSH
4475: CALL_OW 255
4479: PUSH
4480: LD_INT 6
4482: EQUAL
4483: IFFALSE 4497
// Say ( Gnyevko , D5-Gny-3 ) ;
4485: LD_EXP 51
4489: PPUSH
4490: LD_STRING D5-Gny-3
4492: PPUSH
4493: CALL_OW 88
// Say ( Burlak , D5-Bur-3 ) ;
4497: LD_EXP 43
4501: PPUSH
4502: LD_STRING D5-Bur-3
4504: PPUSH
4505: CALL_OW 88
// interface_hidden = true ;
4509: LD_ADDR_OWVAR 54
4513: PUSH
4514: LD_INT 1
4516: ST_TO_ADDR
// IngameOff ;
4517: CALL_OW 9
// wait ( 0 0$2 ) ;
4521: LD_INT 70
4523: PPUSH
4524: CALL_OW 67
// ComMoveXY ( Burlak , 85 , 64 ) ;
4528: LD_EXP 43
4532: PPUSH
4533: LD_INT 85
4535: PPUSH
4536: LD_INT 64
4538: PPUSH
4539: CALL_OW 111
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , 85 , 64 ) ;
4543: LD_INT 22
4545: PUSH
4546: LD_INT 6
4548: PUSH
4549: EMPTY
4550: LIST
4551: LIST
4552: PUSH
4553: LD_INT 21
4555: PUSH
4556: LD_INT 1
4558: PUSH
4559: EMPTY
4560: LIST
4561: LIST
4562: PUSH
4563: EMPTY
4564: LIST
4565: LIST
4566: PPUSH
4567: CALL_OW 69
4571: PPUSH
4572: LD_INT 85
4574: PPUSH
4575: LD_INT 64
4577: PPUSH
4578: CALL_OW 111
// InGameOn ;
4582: CALL_OW 8
// CenterNowOnUnits ( Burlak ) ;
4586: LD_EXP 43
4590: PPUSH
4591: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-1 ) ;
4595: LD_EXP 44
4599: PPUSH
4600: LD_STRING D6-Pok-1
4602: PPUSH
4603: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4607: LD_EXP 43
4611: PPUSH
4612: CALL_OW 87
// Say ( Burlak , D6-Bur-1 ) ;
4616: LD_EXP 43
4620: PPUSH
4621: LD_STRING D6-Bur-1
4623: PPUSH
4624: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4628: LD_EXP 43
4632: PPUSH
4633: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-2 ) ;
4637: LD_EXP 44
4641: PPUSH
4642: LD_STRING D6-Pok-2
4644: PPUSH
4645: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4649: LD_EXP 43
4653: PPUSH
4654: CALL_OW 87
// Say ( Belkov , D6-Bel-2 ) ;
4658: LD_EXP 48
4662: PPUSH
4663: LD_STRING D6-Bel-2
4665: PPUSH
4666: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4670: LD_EXP 43
4674: PPUSH
4675: CALL_OW 87
// Say ( Burlak , D6-Bur-2 ) ;
4679: LD_EXP 43
4683: PPUSH
4684: LD_STRING D6-Bur-2
4686: PPUSH
4687: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4691: LD_EXP 43
4695: PPUSH
4696: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-3 ) ;
4700: LD_EXP 44
4704: PPUSH
4705: LD_STRING D6-Pok-3
4707: PPUSH
4708: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4712: LD_EXP 43
4716: PPUSH
4717: CALL_OW 87
// SayRadio ( Kurin , D6-Kur-3 ) ;
4721: LD_EXP 52
4725: PPUSH
4726: LD_STRING D6-Kur-3
4728: PPUSH
4729: CALL_OW 94
// CenterNowOnUnits ( Burlak ) ;
4733: LD_EXP 43
4737: PPUSH
4738: CALL_OW 87
// Say ( Pokryshkin , D6-Pok-4 ) ;
4742: LD_EXP 44
4746: PPUSH
4747: LD_STRING D6-Pok-4
4749: PPUSH
4750: CALL_OW 88
// CenterNowOnUnits ( Burlak ) ;
4754: LD_EXP 43
4758: PPUSH
4759: CALL_OW 87
// Say ( Belkov , D6-Bel-4 ) ;
4763: LD_EXP 48
4767: PPUSH
4768: LD_STRING D6-Bel-4
4770: PPUSH
4771: CALL_OW 88
// InGameOff ;
4775: CALL_OW 9
// interface_hidden = false ;
4779: LD_ADDR_OWVAR 54
4783: PUSH
4784: LD_INT 0
4786: ST_TO_ADDR
// ComAttackUnit ( Pokryshkin , am_bun ) ;
4787: LD_EXP 44
4791: PPUSH
4792: LD_INT 23
4794: PPUSH
4795: CALL_OW 115
// wait ( 0 0$5 ) ;
4799: LD_INT 175
4801: PPUSH
4802: CALL_OW 67
// ComAttackUnit ( FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
4806: LD_INT 22
4808: PUSH
4809: LD_INT 6
4811: PUSH
4812: EMPTY
4813: LIST
4814: LIST
4815: PUSH
4816: LD_INT 21
4818: PUSH
4819: LD_INT 1
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PUSH
4826: EMPTY
4827: LIST
4828: LIST
4829: PPUSH
4830: CALL_OW 69
4834: PPUSH
4835: LD_INT 23
4837: PPUSH
4838: CALL_OW 115
// DoNotAttack ( 1 , Gnyevko ) ;
4842: LD_INT 1
4844: PPUSH
4845: LD_EXP 51
4849: PPUSH
4850: CALL_OW 471
// end ;
4854: PPOPN 1
4856: END
// every 0 0$1 trigger See ( 1 , Pokryshkin ) and IsDead ( Charles ) do
4857: LD_INT 1
4859: PPUSH
4860: LD_EXP 44
4864: PPUSH
4865: CALL_OW 292
4869: PUSH
4870: LD_EXP 39
4874: PPUSH
4875: CALL_OW 301
4879: AND
4880: IFFALSE 4899
4882: GO 4884
4884: DISABLE
// ComAttackUnit ( Johanna , Pokryshkin ) ;
4885: LD_EXP 40
4889: PPUSH
4890: LD_EXP 44
4894: PPUSH
4895: CALL_OW 115
4899: END
// every 0 0$1 trigger See ( 3 , am_bun ) do
4900: LD_INT 3
4902: PPUSH
4903: LD_INT 23
4905: PPUSH
4906: CALL_OW 292
4910: IFFALSE 4939
4912: GO 4914
4914: DISABLE
// begin Say ( Pokryshkin , D7-Pok-1 ) ;
4915: LD_EXP 44
4919: PPUSH
4920: LD_STRING D7-Pok-1
4922: PPUSH
4923: CALL_OW 88
// Say ( Johanna , D7-FSol1-1 ) ;
4927: LD_EXP 40
4931: PPUSH
4932: LD_STRING D7-FSol1-1
4934: PPUSH
4935: CALL_OW 88
// end ;
4939: END
// every 0 0$1 trigger IsDying ( Pokryshkin ) do var i , unit , ruSolds ;
4940: LD_EXP 44
4944: PPUSH
4945: CALL_OW 303
4949: IFFALSE 5481
4951: GO 4953
4953: DISABLE
4954: LD_INT 0
4956: PPUSH
4957: PPUSH
4958: PPUSH
// begin ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff Belkov ;
4959: LD_ADDR_VAR 0 3
4963: PUSH
4964: LD_INT 22
4966: PUSH
4967: LD_INT 6
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: PUSH
4974: LD_INT 21
4976: PUSH
4977: LD_INT 1
4979: PUSH
4980: EMPTY
4981: LIST
4982: LIST
4983: PUSH
4984: LD_INT 50
4986: PUSH
4987: EMPTY
4988: LIST
4989: PUSH
4990: EMPTY
4991: LIST
4992: LIST
4993: LIST
4994: PPUSH
4995: CALL_OW 69
4999: PUSH
5000: LD_EXP 48
5004: DIFF
5005: ST_TO_ADDR
// DialogueOn ;
5006: CALL_OW 6
// Say ( Belkov , D7a-Bel-1 ) ;
5010: LD_EXP 48
5014: PPUSH
5015: LD_STRING D7a-Bel-1
5017: PPUSH
5018: CALL_OW 88
// DialogueOff ;
5022: CALL_OW 7
// for i := 1 to ruSolds do
5026: LD_ADDR_VAR 0 1
5030: PUSH
5031: DOUBLE
5032: LD_INT 1
5034: DEC
5035: ST_TO_ADDR
5036: LD_VAR 0 3
5040: PUSH
5041: FOR_TO
5042: IFFALSE 5100
// begin ComMoveXY ( ruSolds [ i ] , 87 + i , 63 + i ) ;
5044: LD_VAR 0 3
5048: PUSH
5049: LD_VAR 0 1
5053: ARRAY
5054: PPUSH
5055: LD_INT 87
5057: PUSH
5058: LD_VAR 0 1
5062: PLUS
5063: PPUSH
5064: LD_INT 63
5066: PUSH
5067: LD_VAR 0 1
5071: PLUS
5072: PPUSH
5073: CALL_OW 111
// AddComTurnXY ( ruSolds [ i ] , 89 , 67 ) ;
5077: LD_VAR 0 3
5081: PUSH
5082: LD_VAR 0 1
5086: ARRAY
5087: PPUSH
5088: LD_INT 89
5090: PPUSH
5091: LD_INT 67
5093: PPUSH
5094: CALL_OW 178
// end ;
5098: GO 5041
5100: POP
5101: POP
// ComMoveXY ( Belkov , 89 , 67 ) ;
5102: LD_EXP 48
5106: PPUSH
5107: LD_INT 89
5109: PPUSH
5110: LD_INT 67
5112: PPUSH
5113: CALL_OW 111
// AddComTurnXY ( Belkov , 88 , 66 ) ;
5117: LD_EXP 48
5121: PPUSH
5122: LD_INT 88
5124: PPUSH
5125: LD_INT 66
5127: PPUSH
5128: CALL_OW 178
// Say ( Saseda , D7a-RSol1-1 ) ;
5132: LD_EXP 45
5136: PPUSH
5137: LD_STRING D7a-RSol1-1
5139: PPUSH
5140: CALL_OW 88
// Say ( Johanna , D7a-FSol1-1 ) ;
5144: LD_EXP 40
5148: PPUSH
5149: LD_STRING D7a-FSol1-1
5151: PPUSH
5152: CALL_OW 88
// wait ( 0 0$12 ) ;
5156: LD_INT 420
5158: PPUSH
5159: CALL_OW 67
// Say ( Belkov , D7b-Bel-1 ) ;
5163: LD_EXP 48
5167: PPUSH
5168: LD_STRING D7b-Bel-1
5170: PPUSH
5171: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-1 ) ;
5175: LD_EXP 46
5179: PPUSH
5180: LD_STRING D7b-FSol1-1
5182: PPUSH
5183: CALL_OW 88
// Say ( Belkov , D7b-Bel-2 ) ;
5187: LD_EXP 48
5191: PPUSH
5192: LD_STRING D7b-Bel-2
5194: PPUSH
5195: CALL_OW 88
// Say ( Saseda , D7b-RSol1-2 ) ;
5199: LD_EXP 45
5203: PPUSH
5204: LD_STRING D7b-RSol1-2
5206: PPUSH
5207: CALL_OW 88
// for unit in ruSolds do
5211: LD_ADDR_VAR 0 2
5215: PUSH
5216: LD_VAR 0 3
5220: PUSH
5221: FOR_IN
5222: IFFALSE 5455
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5224: LD_EXP 43
5228: PPUSH
5229: LD_VAR 0 2
5233: PPUSH
5234: CALL_OW 296
5238: PUSH
5239: LD_INT 7
5241: LESS
5242: IFFALSE 5453
// begin InGameOn ;
5244: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5248: LD_EXP 48
5252: PUSH
5253: LD_EXP 45
5257: PUSH
5258: EMPTY
5259: LIST
5260: LIST
5261: PPUSH
5262: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5266: LD_EXP 43
5270: PPUSH
5271: LD_INT 88
5273: PPUSH
5274: LD_INT 66
5276: PPUSH
5277: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5281: LD_EXP 48
5285: PPUSH
5286: LD_EXP 43
5290: PPUSH
5291: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5295: LD_EXP 43
5299: PPUSH
5300: LD_INT 90
5302: PPUSH
5303: LD_INT 66
5305: PPUSH
5306: CALL_OW 178
// Say ( Burlak , D7b-Bur-3 ) ;
5310: LD_EXP 43
5314: PPUSH
5315: LD_STRING D7b-Bur-3
5317: PPUSH
5318: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5322: LD_EXP 48
5326: PPUSH
5327: LD_STRING D7b-Bel-4
5329: PPUSH
5330: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5334: LD_EXP 43
5338: PPUSH
5339: LD_STRING D7b-Bur-4
5341: PPUSH
5342: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5346: LD_EXP 48
5350: PPUSH
5351: LD_STRING D7b-Bel-5
5353: PPUSH
5354: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5358: LD_EXP 46
5362: PPUSH
5363: LD_STRING D7b-FSol1-5
5365: PPUSH
5366: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5370: LD_EXP 48
5374: PPUSH
5375: LD_STRING D7b-Bel-6
5377: PPUSH
5378: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5382: LD_EXP 43
5386: PPUSH
5387: LD_STRING D7b-Bur-6
5389: PPUSH
5390: CALL_OW 88
// Say ( Saseda , D7b-RSol1-6 ) ;
5394: LD_EXP 45
5398: PPUSH
5399: LD_STRING D7b-RSol1-6
5401: PPUSH
5402: CALL_OW 88
// InGameOff ;
5406: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5410: LD_VAR 0 3
5414: PPUSH
5415: LD_INT 3
5417: PPUSH
5418: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5422: LD_EXP 48
5426: PPUSH
5427: LD_INT 3
5429: PPUSH
5430: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5434: LD_STRING M3
5436: PPUSH
5437: CALL_OW 337
// secondAttack = true ;
5441: LD_ADDR_EXP 16
5445: PUSH
5446: LD_INT 1
5448: ST_TO_ADDR
// exit ;
5449: POP
5450: POP
5451: GO 5481
// end ;
5453: GO 5221
5455: POP
5456: POP
// Say ( Belkov , D7b-Bel-3 ) ;
5457: LD_EXP 48
5461: PPUSH
5462: LD_STRING D7b-Bel-3
5464: PPUSH
5465: CALL_OW 88
// InGameOff ;
5469: CALL_OW 9
// belkovWaitForGorky = true ;
5473: LD_ADDR_EXP 15
5477: PUSH
5478: LD_INT 1
5480: ST_TO_ADDR
// end ;
5481: PPOPN 3
5483: END
// every 0 0$1 trigger belkovWaitForGorky do var unit , ruSolds ;
5484: LD_EXP 15
5488: IFFALSE 5798
5490: GO 5492
5492: DISABLE
5493: LD_INT 0
5495: PPUSH
5496: PPUSH
// begin enable ;
5497: ENABLE
// ruSolds = FilterAllUnits ( [ [ f_side , 6 ] , [ f_type , unit_human ] ] ) ;
5498: LD_ADDR_VAR 0 2
5502: PUSH
5503: LD_INT 22
5505: PUSH
5506: LD_INT 6
5508: PUSH
5509: EMPTY
5510: LIST
5511: LIST
5512: PUSH
5513: LD_INT 21
5515: PUSH
5516: LD_INT 1
5518: PUSH
5519: EMPTY
5520: LIST
5521: LIST
5522: PUSH
5523: EMPTY
5524: LIST
5525: LIST
5526: PPUSH
5527: CALL_OW 69
5531: ST_TO_ADDR
// for unit in ruSolds do
5532: LD_ADDR_VAR 0 1
5536: PUSH
5537: LD_VAR 0 2
5541: PUSH
5542: FOR_IN
5543: IFFALSE 5796
// if ( GetDistUnits ( Burlak , unit ) ) < 7 then
5545: LD_EXP 43
5549: PPUSH
5550: LD_VAR 0 1
5554: PPUSH
5555: CALL_OW 296
5559: PUSH
5560: LD_INT 7
5562: LESS
5563: IFFALSE 5794
// begin belkovWaitForGorky = false ;
5565: LD_ADDR_EXP 15
5569: PUSH
5570: LD_INT 0
5572: ST_TO_ADDR
// InGameOn ;
5573: CALL_OW 8
// CenterNowOnUnits ( [ Belkov , Saseda ] ) ;
5577: LD_EXP 48
5581: PUSH
5582: LD_EXP 45
5586: PUSH
5587: EMPTY
5588: LIST
5589: LIST
5590: PPUSH
5591: CALL_OW 87
// ComMoveXY ( Burlak , 88 , 66 ) ;
5595: LD_EXP 43
5599: PPUSH
5600: LD_INT 88
5602: PPUSH
5603: LD_INT 66
5605: PPUSH
5606: CALL_OW 111
// ComTurnUnit ( Belkov , Burlak ) ;
5610: LD_EXP 48
5614: PPUSH
5615: LD_EXP 43
5619: PPUSH
5620: CALL_OW 119
// AddComTurnXY ( Burlak , 90 , 66 ) ;
5624: LD_EXP 43
5628: PPUSH
5629: LD_INT 90
5631: PPUSH
5632: LD_INT 66
5634: PPUSH
5635: CALL_OW 178
// Say ( Belkov , D7b-Bel-3a ) ;
5639: LD_EXP 48
5643: PPUSH
5644: LD_STRING D7b-Bel-3a
5646: PPUSH
5647: CALL_OW 88
// Say ( Burlak , D7b-Bur-3 ) ;
5651: LD_EXP 43
5655: PPUSH
5656: LD_STRING D7b-Bur-3
5658: PPUSH
5659: CALL_OW 88
// Say ( Belkov , D7b-Bel-4 ) ;
5663: LD_EXP 48
5667: PPUSH
5668: LD_STRING D7b-Bel-4
5670: PPUSH
5671: CALL_OW 88
// Say ( Burlak , D7b-Bur-4 ) ;
5675: LD_EXP 43
5679: PPUSH
5680: LD_STRING D7b-Bur-4
5682: PPUSH
5683: CALL_OW 88
// Say ( Belkov , D7b-Bel-5 ) ;
5687: LD_EXP 48
5691: PPUSH
5692: LD_STRING D7b-Bel-5
5694: PPUSH
5695: CALL_OW 88
// Say ( Jaworska , D7b-FSol1-5 ) ;
5699: LD_EXP 46
5703: PPUSH
5704: LD_STRING D7b-FSol1-5
5706: PPUSH
5707: CALL_OW 88
// Say ( Belkov , D7b-Bel-6 ) ;
5711: LD_EXP 48
5715: PPUSH
5716: LD_STRING D7b-Bel-6
5718: PPUSH
5719: CALL_OW 88
// Say ( Burlak , D7b-Bur-6 ) ;
5723: LD_EXP 43
5727: PPUSH
5728: LD_STRING D7b-Bur-6
5730: PPUSH
5731: CALL_OW 88
// Say ( Saseda , D7a-RSol1-6 ) ;
5735: LD_EXP 45
5739: PPUSH
5740: LD_STRING D7a-RSol1-6
5742: PPUSH
5743: CALL_OW 88
// InGameOff ;
5747: CALL_OW 9
// SetSide ( ruSolds , 3 ) ;
5751: LD_VAR 0 2
5755: PPUSH
5756: LD_INT 3
5758: PPUSH
5759: CALL_OW 235
// SetSide ( Belkov , 3 ) ;
5763: LD_EXP 48
5767: PPUSH
5768: LD_INT 3
5770: PPUSH
5771: CALL_OW 235
// ChangeMissionObjectives ( M3 ) ;
5775: LD_STRING M3
5777: PPUSH
5778: CALL_OW 337
// secondAttack = true ;
5782: LD_ADDR_EXP 16
5786: PUSH
5787: LD_INT 1
5789: ST_TO_ADDR
// exit ;
5790: POP
5791: POP
5792: GO 5798
// end ;
5794: GO 5542
5796: POP
5797: POP
// end ;
5798: PPOPN 2
5800: END
// export function Dial_SecondAttack ; var nearRuUnit ; begin
5801: LD_INT 0
5803: PPUSH
5804: PPUSH
// Say ( Johanna , D8-FSol1-1 ) ;
5805: LD_EXP 40
5809: PPUSH
5810: LD_STRING D8-FSol1-1
5812: PPUSH
5813: CALL_OW 88
// Say ( Gladstone , D8-Glad-1 ) ;
5817: LD_EXP 41
5821: PPUSH
5822: LD_STRING D8-Glad-1
5824: PPUSH
5825: CALL_OW 88
// Say ( Burlak , D8-Bur-1 ) ;
5829: LD_EXP 43
5833: PPUSH
5834: LD_STRING D8-Bur-1
5836: PPUSH
5837: CALL_OW 88
// secondAttack = false ;
5841: LD_ADDR_EXP 16
5845: PUSH
5846: LD_INT 0
5848: ST_TO_ADDR
// nearRuUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) , am_bun ) ;
5849: LD_ADDR_VAR 0 2
5853: PUSH
5854: LD_INT 22
5856: PUSH
5857: LD_INT 3
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PUSH
5864: LD_INT 21
5866: PUSH
5867: LD_INT 1
5869: PUSH
5870: EMPTY
5871: LIST
5872: LIST
5873: PUSH
5874: EMPTY
5875: LIST
5876: LIST
5877: PPUSH
5878: CALL_OW 69
5882: PPUSH
5883: LD_INT 23
5885: PPUSH
5886: CALL_OW 74
5890: ST_TO_ADDR
// ComExitBuilding ( amApemans ) ;
5891: LD_EXP 42
5895: PPUSH
5896: CALL_OW 122
// wait ( 0 0$1 ) ;
5900: LD_INT 35
5902: PPUSH
5903: CALL_OW 67
// AddComAttackUnit ( amApemans , nearRuUnit ) ;
5907: LD_EXP 42
5911: PPUSH
5912: LD_VAR 0 2
5916: PPUSH
5917: CALL_OW 175
// end ;
5921: LD_VAR 0 1
5925: RET
// every 0 0$1 trigger GetLives ( am_bun ) < 350 and GetLives ( am_bun ) > 250 and FilterUnitsInArea ( TreeArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 and not amRetreat do
5926: LD_INT 23
5928: PPUSH
5929: CALL_OW 256
5933: PUSH
5934: LD_INT 350
5936: LESS
5937: PUSH
5938: LD_INT 23
5940: PPUSH
5941: CALL_OW 256
5945: PUSH
5946: LD_INT 250
5948: GREATER
5949: AND
5950: PUSH
5951: LD_INT 20
5953: PPUSH
5954: LD_INT 22
5956: PUSH
5957: LD_INT 3
5959: PUSH
5960: EMPTY
5961: LIST
5962: LIST
5963: PUSH
5964: LD_INT 21
5966: PUSH
5967: LD_INT 1
5969: PUSH
5970: EMPTY
5971: LIST
5972: LIST
5973: PUSH
5974: EMPTY
5975: LIST
5976: LIST
5977: PPUSH
5978: CALL_OW 70
5982: PUSH
5983: LD_INT 0
5985: GREATER
5986: AND
5987: PUSH
5988: LD_EXP 23
5992: NOT
5993: AND
5994: IFFALSE 6011
5996: GO 5998
5998: DISABLE
// Say ( Johanna , D8-FSol1-2 ) ;
5999: LD_EXP 40
6003: PPUSH
6004: LD_STRING D8-FSol1-2
6006: PPUSH
6007: CALL_OW 88
6011: END
// every 0 0$1 trigger IsDying ( am_bun ) and IsOK ( am_lab ) and not amRetreat do
6012: LD_INT 23
6014: PPUSH
6015: CALL_OW 303
6019: PUSH
6020: LD_INT 22
6022: PPUSH
6023: CALL_OW 302
6027: AND
6028: PUSH
6029: LD_EXP 23
6033: NOT
6034: AND
6035: IFFALSE 6105
6037: GO 6039
6039: DISABLE
// begin amRetreat = true ;
6040: LD_ADDR_EXP 23
6044: PUSH
6045: LD_INT 1
6047: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6048: LD_EXP 40
6052: PPUSH
6053: LD_STRING D8-FSol1-2a
6055: PPUSH
6056: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6060: LD_EXP 41
6064: PUSH
6065: LD_EXP 40
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: LD_INT 21
6076: PPUSH
6077: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6081: LD_EXP 41
6085: PPUSH
6086: LD_STRING D8-Glad-2
6088: PPUSH
6089: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6093: LD_EXP 43
6097: PPUSH
6098: LD_STRING D8-Bur-2
6100: PPUSH
6101: CALL_OW 88
// end ;
6105: END
// every 0 0$1 trigger IsDying ( am_lab ) and IsOK ( am_bun ) and not amRetreat do
6106: LD_INT 22
6108: PPUSH
6109: CALL_OW 303
6113: PUSH
6114: LD_INT 23
6116: PPUSH
6117: CALL_OW 302
6121: AND
6122: PUSH
6123: LD_EXP 23
6127: NOT
6128: AND
6129: IFFALSE 6199
6131: GO 6133
6133: DISABLE
// begin amRetreat = true ;
6134: LD_ADDR_EXP 23
6138: PUSH
6139: LD_INT 1
6141: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6142: LD_EXP 40
6146: PPUSH
6147: LD_STRING D8-FSol1-2a
6149: PPUSH
6150: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6154: LD_EXP 41
6158: PUSH
6159: LD_EXP 40
6163: PUSH
6164: EMPTY
6165: LIST
6166: LIST
6167: PPUSH
6168: LD_INT 21
6170: PPUSH
6171: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6175: LD_EXP 41
6179: PPUSH
6180: LD_STRING D8-Glad-2
6182: PPUSH
6183: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6187: LD_EXP 43
6191: PPUSH
6192: LD_STRING D8-Bur-2
6194: PPUSH
6195: CALL_OW 88
// end ;
6199: END
// every 0 0$1 trigger GetLives ( am_bun ) < 500 and Difficulty = 3 and not amRetreat do
6200: LD_INT 23
6202: PPUSH
6203: CALL_OW 256
6207: PUSH
6208: LD_INT 500
6210: LESS
6211: PUSH
6212: LD_OWVAR 67
6216: PUSH
6217: LD_INT 3
6219: EQUAL
6220: AND
6221: PUSH
6222: LD_EXP 23
6226: NOT
6227: AND
6228: IFFALSE 6298
6230: GO 6232
6232: DISABLE
// begin amRetreat = true ;
6233: LD_ADDR_EXP 23
6237: PUSH
6238: LD_INT 1
6240: ST_TO_ADDR
// Say ( Johanna , D8-FSol1-2a ) ;
6241: LD_EXP 40
6245: PPUSH
6246: LD_STRING D8-FSol1-2a
6248: PPUSH
6249: CALL_OW 88
// ComMoveToArea ( [ Gladstone , Johanna ] , AmericanExitArea ) ;
6253: LD_EXP 41
6257: PUSH
6258: LD_EXP 40
6262: PUSH
6263: EMPTY
6264: LIST
6265: LIST
6266: PPUSH
6267: LD_INT 21
6269: PPUSH
6270: CALL_OW 113
// Say ( Gladstone , D8-Glad-2 ) ;
6274: LD_EXP 41
6278: PPUSH
6279: LD_STRING D8-Glad-2
6281: PPUSH
6282: CALL_OW 88
// Say ( Burlak , D8-Bur-2 ) ;
6286: LD_EXP 43
6290: PPUSH
6291: LD_STRING D8-Bur-2
6293: PPUSH
6294: CALL_OW 88
// end ;
6298: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) > 0 do var unit ;
6299: LD_INT 22
6301: PUSH
6302: LD_INT 1
6304: PUSH
6305: EMPTY
6306: LIST
6307: LIST
6308: PUSH
6309: LD_INT 21
6311: PUSH
6312: LD_INT 1
6314: PUSH
6315: EMPTY
6316: LIST
6317: LIST
6318: PUSH
6319: LD_INT 50
6321: PUSH
6322: EMPTY
6323: LIST
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: LIST
6329: PPUSH
6330: CALL_OW 69
6334: PUSH
6335: LD_INT 0
6337: GREATER
6338: IFFALSE 6466
6340: GO 6342
6342: DISABLE
6343: LD_INT 0
6345: PPUSH
// begin enable ;
6346: ENABLE
// for unit in FilterUnitsInArea ( AmericanExitArea , [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
6347: LD_ADDR_VAR 0 1
6351: PUSH
6352: LD_INT 21
6354: PPUSH
6355: LD_INT 22
6357: PUSH
6358: LD_INT 1
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: PUSH
6365: LD_INT 21
6367: PUSH
6368: LD_INT 1
6370: PUSH
6371: EMPTY
6372: LIST
6373: LIST
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: PPUSH
6379: CALL_OW 70
6383: PUSH
6384: FOR_IN
6385: IFFALSE 6464
// begin if unit = Gladstone then
6387: LD_VAR 0 1
6391: PUSH
6392: LD_EXP 41
6396: EQUAL
6397: IFFALSE 6427
// begin gladstoneEscape = true ;
6399: LD_ADDR_EXP 18
6403: PUSH
6404: LD_INT 1
6406: ST_TO_ADDR
// SaveCharacters ( Gladstone , missionPrefix & Gladstone ) ;
6407: LD_EXP 41
6411: PPUSH
6412: LD_EXP 27
6416: PUSH
6417: LD_STRING Gladstone
6419: STR
6420: PPUSH
6421: CALL_OW 38
// end else
6425: GO 6453
// begin JohannaEscape = true ;
6427: LD_ADDR_EXP 19
6431: PUSH
6432: LD_INT 1
6434: ST_TO_ADDR
// SaveCharacters ( Johanna , missionPrefix & Johanna ) ;
6435: LD_EXP 40
6439: PPUSH
6440: LD_EXP 27
6444: PUSH
6445: LD_STRING Johanna
6447: STR
6448: PPUSH
6449: CALL_OW 38
// end ; RemoveUnit ( unit ) ;
6453: LD_VAR 0 1
6457: PPUSH
6458: CALL_OW 64
// end ;
6462: GO 6384
6464: POP
6465: POP
// end ;
6466: PPOPN 1
6468: END
// every 0 0$1 trigger IsDead ( Gladstone ) and IsDead ( Johanna ) do
6469: LD_EXP 41
6473: PPUSH
6474: CALL_OW 301
6478: PUSH
6479: LD_EXP 40
6483: PPUSH
6484: CALL_OW 301
6488: AND
6489: IFFALSE 6506
6491: GO 6493
6493: DISABLE
// Say ( Burlak , D9-Bur-1 ) ;
6494: LD_EXP 43
6498: PPUSH
6499: LD_STRING D9-Bur-1
6501: PPUSH
6502: CALL_OW 88
6506: END
// every 0 0$1 trigger IsDead ( Johanna ) and gladstoneEscape and not JohannaEscape do
6507: LD_EXP 40
6511: PPUSH
6512: CALL_OW 301
6516: PUSH
6517: LD_EXP 18
6521: AND
6522: PUSH
6523: LD_EXP 19
6527: NOT
6528: AND
6529: IFFALSE 6546
6531: GO 6533
6533: DISABLE
// Say ( Burlak , D9-Bur-1a ) ;
6534: LD_EXP 43
6538: PPUSH
6539: LD_STRING D9-Bur-1a
6541: PPUSH
6542: CALL_OW 88
6546: END
// every 0 0$1 trigger IsDead ( Gladstone ) and not gladstoneEscape and JohannaEscape do
6547: LD_EXP 41
6551: PPUSH
6552: CALL_OW 301
6556: PUSH
6557: LD_EXP 18
6561: NOT
6562: AND
6563: PUSH
6564: LD_EXP 19
6568: AND
6569: IFFALSE 6586
6571: GO 6573
6573: DISABLE
// Say ( Burlak , D9-Bur-1b ) ;
6574: LD_EXP 43
6578: PPUSH
6579: LD_STRING D9-Bur-1b
6581: PPUSH
6582: CALL_OW 88
6586: END
// every 0 0$1 trigger gladstoneEscape and JohannaEscape do
6587: LD_EXP 18
6591: PUSH
6592: LD_EXP 19
6596: AND
6597: IFFALSE 6614
6599: GO 6601
6601: DISABLE
// Say ( Burlak , D9-Bur-1c ) ;
6602: LD_EXP 43
6606: PPUSH
6607: LD_STRING D9-Bur-1c
6609: PPUSH
6610: CALL_OW 88
6614: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) = 0 do var ruKirovSolds , ruKirovSoldsMaleRandom ;
6615: LD_INT 22
6617: PUSH
6618: LD_INT 1
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: PUSH
6625: LD_INT 21
6627: PUSH
6628: LD_INT 3
6630: PUSH
6631: EMPTY
6632: LIST
6633: LIST
6634: PUSH
6635: LD_INT 50
6637: PUSH
6638: EMPTY
6639: LIST
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: PPUSH
6646: CALL_OW 69
6650: PUSH
6651: LD_INT 0
6653: EQUAL
6654: IFFALSE 6902
6656: GO 6658
6658: DISABLE
6659: LD_INT 0
6661: PPUSH
6662: PPUSH
// begin ruKirovSolds = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) diff [ Burlak , Gnyevko , Belkov ] ;
6663: LD_ADDR_VAR 0 1
6667: PUSH
6668: LD_INT 22
6670: PUSH
6671: LD_INT 3
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: PUSH
6678: LD_INT 21
6680: PUSH
6681: LD_INT 1
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: PUSH
6688: LD_INT 50
6690: PUSH
6691: EMPTY
6692: LIST
6693: PUSH
6694: EMPTY
6695: LIST
6696: LIST
6697: LIST
6698: PPUSH
6699: CALL_OW 69
6703: PUSH
6704: LD_EXP 43
6708: PUSH
6709: LD_EXP 51
6713: PUSH
6714: LD_EXP 48
6718: PUSH
6719: EMPTY
6720: LIST
6721: LIST
6722: LIST
6723: DIFF
6724: ST_TO_ADDR
// ruKirovSoldsMaleRandom = UnitFilter ( ruKirovSolds , [ f_sex , sex_male ] ) ;
6725: LD_ADDR_VAR 0 2
6729: PUSH
6730: LD_VAR 0 1
6734: PPUSH
6735: LD_INT 26
6737: PUSH
6738: LD_INT 1
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PPUSH
6745: CALL_OW 72
6749: ST_TO_ADDR
// DialogueOn ;
6750: CALL_OW 6
// if IsOK ( Belkov ) then
6754: LD_EXP 48
6758: PPUSH
6759: CALL_OW 302
6763: IFFALSE 6777
// Say ( Belkov , D10-Bel-1 ) ;
6765: LD_EXP 48
6769: PPUSH
6770: LD_STRING D10-Bel-1
6772: PPUSH
6773: CALL_OW 88
// if ruKirovSolds > 0 and ( ruKirovSoldsMaleRandom > 0 or IsOk ( Belkov ) ) then
6777: LD_VAR 0 1
6781: PUSH
6782: LD_INT 0
6784: GREATER
6785: PUSH
6786: LD_VAR 0 2
6790: PUSH
6791: LD_INT 0
6793: GREATER
6794: PUSH
6795: LD_EXP 48
6799: PPUSH
6800: CALL_OW 302
6804: OR
6805: AND
6806: IFFALSE 6873
// begin Say ( Burlak , D10-Bur-1 ) ;
6808: LD_EXP 43
6812: PPUSH
6813: LD_STRING D10-Bur-1
6815: PPUSH
6816: CALL_OW 88
// if IsOK ( Belkov ) then
6820: LD_EXP 48
6824: PPUSH
6825: CALL_OW 302
6829: IFFALSE 6845
// Say ( Belkov , D10-Bel-1a ) else
6831: LD_EXP 48
6835: PPUSH
6836: LD_STRING D10-Bel-1a
6838: PPUSH
6839: CALL_OW 88
6843: GO 6861
// Say ( ruKirovSoldsMaleRandom [ 1 ] , D10-RSol1-1 ) ;
6845: LD_VAR 0 2
6849: PUSH
6850: LD_INT 1
6852: ARRAY
6853: PPUSH
6854: LD_STRING D10-RSol1-1
6856: PPUSH
6857: CALL_OW 88
// Say ( Burlak , D10-Bur-2 ) ;
6861: LD_EXP 43
6865: PPUSH
6866: LD_STRING D10-Bur-2
6868: PPUSH
6869: CALL_OW 88
// end ; DialogueOff ;
6873: CALL_OW 7
// ChangeMissionObjectives ( M4a ) ;
6877: LD_STRING M4a
6879: PPUSH
6880: CALL_OW 337
// evacuationAvailable = true ;
6884: LD_ADDR_EXP 21
6888: PUSH
6889: LD_INT 1
6891: ST_TO_ADDR
// SetAreaMapShow ( ExitArea , 1 ) ;
6892: LD_INT 1
6894: PPUSH
6895: LD_INT 1
6897: PPUSH
6898: CALL_OW 424
// end ;
6902: PPOPN 2
6904: END
// every 0 0$15 trigger evacuationAvailable and GetSide ( Kirilenkova ) = 6 do var randomSold ;
6905: LD_EXP 21
6909: PUSH
6910: LD_EXP 50
6914: PPUSH
6915: CALL_OW 255
6919: PUSH
6920: LD_INT 6
6922: EQUAL
6923: AND
6924: IFFALSE 7463
6926: GO 6928
6928: DISABLE
6929: LD_INT 0
6931: PPUSH
// begin PlaceUnitArea ( Kirilenkova , JelenaSpawnArea , true ) ;
6932: LD_EXP 50
6936: PPUSH
6937: LD_INT 22
6939: PPUSH
6940: LD_INT 1
6942: PPUSH
6943: CALL_OW 49
// wait ( 0 0$3 ) ;
6947: LD_INT 105
6949: PPUSH
6950: CALL_OW 67
// DialogueOn ;
6954: CALL_OW 6
// SayRadio ( Kirilenkova , D11b-Kir-1 ) ;
6958: LD_EXP 50
6962: PPUSH
6963: LD_STRING D11b-Kir-1
6965: PPUSH
6966: CALL_OW 94
// if IsOK ( Belkov ) then
6970: LD_EXP 48
6974: PPUSH
6975: CALL_OW 302
6979: IFFALSE 7007
// begin Say ( Belkov , D11b-Bel-1 ) ;
6981: LD_EXP 48
6985: PPUSH
6986: LD_STRING D11b-Bel-1
6988: PPUSH
6989: CALL_OW 88
// SayRadio ( Belkov , D11b-Bel-1a ) ;
6993: LD_EXP 48
6997: PPUSH
6998: LD_STRING D11b-Bel-1a
7000: PPUSH
7001: CALL_OW 94
// end else
7005: GO 7062
// begin randomSold = DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b-RSol1-1 , D11b-RFSol1-1 , false ) ;
7007: LD_ADDR_VAR 0 1
7011: PUSH
7012: LD_INT 22
7014: PUSH
7015: LD_INT 3
7017: PUSH
7018: EMPTY
7019: LIST
7020: LIST
7021: PUSH
7022: LD_INT 21
7024: PUSH
7025: LD_INT 1
7027: PUSH
7028: EMPTY
7029: LIST
7030: LIST
7031: PUSH
7032: LD_INT 50
7034: PUSH
7035: EMPTY
7036: LIST
7037: PUSH
7038: EMPTY
7039: LIST
7040: LIST
7041: LIST
7042: PPUSH
7043: CALL_OW 69
7047: PPUSH
7048: LD_STRING D11b-RSol1-1
7050: PPUSH
7051: LD_STRING D11b-RFSol1-1
7053: PPUSH
7054: LD_INT 0
7056: PPUSH
7057: CALL 7828 0 4
7061: ST_TO_ADDR
// end ; if FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7062: LD_INT 24
7064: PPUSH
7065: LD_INT 22
7067: PUSH
7068: LD_INT 0
7070: PUSH
7071: EMPTY
7072: LIST
7073: LIST
7074: PUSH
7075: LD_INT 25
7077: PUSH
7078: LD_INT 12
7080: PUSH
7081: EMPTY
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: PPUSH
7089: CALL_OW 70
7093: PUSH
7094: LD_INT 0
7096: GREATER
7097: IFFALSE 7113
// SayRadio ( Kirilenkova , D11b1-Kir-1 ) else
7099: LD_EXP 50
7103: PPUSH
7104: LD_STRING D11b1-Kir-1
7106: PPUSH
7107: CALL_OW 94
7111: GO 7125
// SayRadio ( Kirilenkova , D11b2-Kir-1 ) ;
7113: LD_EXP 50
7117: PPUSH
7118: LD_STRING D11b2-Kir-1
7120: PPUSH
7121: CALL_OW 94
// if attackedByApemanNearLake and FilterUnitsInArea ( ApeLakeArea , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) > 0 then
7125: LD_EXP 6
7129: PUSH
7130: LD_INT 24
7132: PPUSH
7133: LD_INT 22
7135: PUSH
7136: LD_INT 0
7138: PUSH
7139: EMPTY
7140: LIST
7141: LIST
7142: PUSH
7143: LD_INT 25
7145: PUSH
7146: LD_INT 12
7148: PUSH
7149: EMPTY
7150: LIST
7151: LIST
7152: PUSH
7153: EMPTY
7154: LIST
7155: LIST
7156: PPUSH
7157: CALL_OW 70
7161: PUSH
7162: LD_INT 0
7164: GREATER
7165: AND
7166: IFFALSE 7301
// begin Say ( Burlak , D11b1-Bur-1 ) ;
7168: LD_EXP 43
7172: PPUSH
7173: LD_STRING D11b1-Bur-1
7175: PPUSH
7176: CALL_OW 88
// if IsOk ( Belkov ) then
7180: LD_EXP 48
7184: PPUSH
7185: CALL_OW 302
7189: IFFALSE 7205
// Say ( Belkov , D11b2-Bel-1 ) else
7191: LD_EXP 48
7195: PPUSH
7196: LD_STRING D11b2-Bel-1
7198: PPUSH
7199: CALL_OW 88
7203: GO 7246
// begin if GetSex ( randomSold ) = sex_male then
7205: LD_VAR 0 1
7209: PPUSH
7210: CALL_OW 258
7214: PUSH
7215: LD_INT 1
7217: EQUAL
7218: IFFALSE 7234
// Say ( randomSold , D11b1-RSol1-1 ) else
7220: LD_VAR 0 1
7224: PPUSH
7225: LD_STRING D11b1-RSol1-1
7227: PPUSH
7228: CALL_OW 88
7232: GO 7246
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7234: LD_VAR 0 1
7238: PPUSH
7239: LD_STRING D11b1-RFSol1-1
7241: PPUSH
7242: CALL_OW 88
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , D11b1-RSol1-1 , D11b1-RFSol1-1 , false ) ;
7246: LD_INT 22
7248: PUSH
7249: LD_INT 1
7251: PUSH
7252: EMPTY
7253: LIST
7254: LIST
7255: PUSH
7256: LD_INT 21
7258: PUSH
7259: LD_INT 1
7261: PUSH
7262: EMPTY
7263: LIST
7264: LIST
7265: PUSH
7266: LD_INT 50
7268: PUSH
7269: EMPTY
7270: LIST
7271: PUSH
7272: EMPTY
7273: LIST
7274: LIST
7275: LIST
7276: PPUSH
7277: CALL_OW 69
7281: PPUSH
7282: LD_STRING D11b1-RSol1-1
7284: PPUSH
7285: LD_STRING D11b1-RFSol1-1
7287: PPUSH
7288: LD_INT 0
7290: PPUSH
7291: CALL 7828 0 4
// DialogueOff ;
7295: CALL_OW 7
// exit ;
7299: GO 7463
// end ; if spotWaterfall then
7301: LD_EXP 7
7305: IFFALSE 7391
// begin Say ( Burlak , D11b1-Bur-1a ) ;
7307: LD_EXP 43
7311: PPUSH
7312: LD_STRING D11b1-Bur-1a
7314: PPUSH
7315: CALL_OW 88
// if IsOk ( Belkov ) then
7319: LD_EXP 48
7323: PPUSH
7324: CALL_OW 302
7328: IFFALSE 7344
// Say ( Belkov , D11b2-Bel-1 ) else
7330: LD_EXP 48
7334: PPUSH
7335: LD_STRING D11b2-Bel-1
7337: PPUSH
7338: CALL_OW 88
7342: GO 7385
// begin if GetSex ( randomSold ) = sex_male then
7344: LD_VAR 0 1
7348: PPUSH
7349: CALL_OW 258
7353: PUSH
7354: LD_INT 1
7356: EQUAL
7357: IFFALSE 7373
// Say ( randomSold , D11b1-RSol1-1 ) else
7359: LD_VAR 0 1
7363: PPUSH
7364: LD_STRING D11b1-RSol1-1
7366: PPUSH
7367: CALL_OW 88
7371: GO 7385
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7373: LD_VAR 0 1
7377: PPUSH
7378: LD_STRING D11b1-RFSol1-1
7380: PPUSH
7381: CALL_OW 88
// end ; DialogueOff ;
7385: CALL_OW 7
// exit ;
7389: GO 7463
// end ; if IsOk ( Belkov ) then
7391: LD_EXP 48
7395: PPUSH
7396: CALL_OW 302
7400: IFFALSE 7416
// Say ( Belkov , D11b1-Bel-1 ) else
7402: LD_EXP 48
7406: PPUSH
7407: LD_STRING D11b1-Bel-1
7409: PPUSH
7410: CALL_OW 88
7414: GO 7457
// begin if GetSex ( randomSold ) = sex_male then
7416: LD_VAR 0 1
7420: PPUSH
7421: CALL_OW 258
7425: PUSH
7426: LD_INT 1
7428: EQUAL
7429: IFFALSE 7445
// Say ( randomSold , D11b1-RSol1-1 ) else
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_STRING D11b1-RSol1-1
7438: PPUSH
7439: CALL_OW 88
7443: GO 7457
// Say ( randomSold , D11b1-RFSol1-1 ) ;
7445: LD_VAR 0 1
7449: PPUSH
7450: LD_STRING D11b1-RFSol1-1
7452: PPUSH
7453: CALL_OW 88
// end ; DialogueOff ;
7457: CALL_OW 7
// exit ;
7461: GO 7463
// end ;
7463: PPOPN 1
7465: END
// every 0 0$1 trigger See ( 3 , Kirilenkova ) do var nearUnit ;
7466: LD_INT 3
7468: PPUSH
7469: LD_EXP 50
7473: PPUSH
7474: CALL_OW 292
7478: IFFALSE 7708
7480: GO 7482
7482: DISABLE
7483: LD_INT 0
7485: PPUSH
// begin SetSide ( Kirilenkova , 3 ) ;
7486: LD_EXP 50
7490: PPUSH
7491: LD_INT 3
7493: PPUSH
7494: CALL_OW 235
// jelenaSaved = true ;
7498: LD_ADDR_EXP 20
7502: PUSH
7503: LD_INT 1
7505: ST_TO_ADDR
// CenterNowOnUnits ( Kirilenkova ) ;
7506: LD_EXP 50
7510: PPUSH
7511: CALL_OW 87
// nearUnit = NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] ] ) , Kirilenkova ) ;
7515: LD_ADDR_VAR 0 1
7519: PUSH
7520: LD_INT 22
7522: PUSH
7523: LD_INT 3
7525: PUSH
7526: EMPTY
7527: LIST
7528: LIST
7529: PUSH
7530: LD_INT 21
7532: PUSH
7533: LD_INT 1
7535: PUSH
7536: EMPTY
7537: LIST
7538: LIST
7539: PUSH
7540: LD_INT 50
7542: PUSH
7543: EMPTY
7544: LIST
7545: PUSH
7546: EMPTY
7547: LIST
7548: LIST
7549: LIST
7550: PPUSH
7551: CALL_OW 69
7555: PPUSH
7556: LD_EXP 50
7560: PPUSH
7561: CALL_OW 74
7565: ST_TO_ADDR
// DialogueOn ;
7566: CALL_OW 6
// Say ( Kirilenkova , D11a-Kir-1 ) ;
7570: LD_EXP 50
7574: PPUSH
7575: LD_STRING D11a-Kir-1
7577: PPUSH
7578: CALL_OW 88
// if nearUnit = Belkov then
7582: LD_VAR 0 1
7586: PUSH
7587: LD_EXP 48
7591: EQUAL
7592: IFFALSE 7632
// begin Say ( Belkov , D11a-Bel-1 ) ;
7594: LD_EXP 48
7598: PPUSH
7599: LD_STRING D11a-Bel-1
7601: PPUSH
7602: CALL_OW 88
// Say ( Kirilenkova , D11a-Kir-2 ) ;
7606: LD_EXP 50
7610: PPUSH
7611: LD_STRING D11a-Kir-2
7613: PPUSH
7614: CALL_OW 88
// Say ( Belkov , D11a-Bel-2 ) ;
7618: LD_EXP 48
7622: PPUSH
7623: LD_STRING D11a-Bel-2
7625: PPUSH
7626: CALL_OW 88
// end else
7630: GO 7673
// begin if GetSex ( nearUnit ) = sex_male then
7632: LD_VAR 0 1
7636: PPUSH
7637: CALL_OW 258
7641: PUSH
7642: LD_INT 1
7644: EQUAL
7645: IFFALSE 7661
// Say ( nearUnit , D11a-RSol1-2 ) else
7647: LD_VAR 0 1
7651: PPUSH
7652: LD_STRING D11a-RSol1-2
7654: PPUSH
7655: CALL_OW 88
7659: GO 7673
// Say ( nearUnit , D11a-RFSol1-2 ) ;
7661: LD_VAR 0 1
7665: PPUSH
7666: LD_STRING D11a-RFSol1-2
7668: PPUSH
7669: CALL_OW 88
// end ; DialogueOff ;
7673: CALL_OW 7
// wait ( 0 0$5 ) ;
7677: LD_INT 175
7679: PPUSH
7680: CALL_OW 67
// Say ( Kirilenkova , D11c-Kir-1 ) ;
7684: LD_EXP 50
7688: PPUSH
7689: LD_STRING D11c-Kir-1
7691: PPUSH
7692: CALL_OW 88
// Say ( Burlak , D11c-Bur-1 ) ;
7696: LD_EXP 43
7700: PPUSH
7701: LD_STRING D11c-Bur-1
7703: PPUSH
7704: CALL_OW 88
// end ;
7708: PPOPN 1
7710: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsInArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) > 0 do
7711: LD_EXP 21
7715: PUSH
7716: LD_INT 1
7718: PPUSH
7719: LD_INT 22
7721: PUSH
7722: LD_INT 3
7724: PUSH
7725: EMPTY
7726: LIST
7727: LIST
7728: PUSH
7729: LD_INT 21
7731: PUSH
7732: LD_INT 1
7734: PUSH
7735: EMPTY
7736: LIST
7737: LIST
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PPUSH
7743: CALL_OW 70
7747: PUSH
7748: LD_INT 0
7750: GREATER
7751: AND
7752: IFFALSE 7764
7754: GO 7756
7756: DISABLE
// begin Query ( QExit1 ) ;
7757: LD_STRING QExit1
7759: PPUSH
7760: CALL_OW 97
// end ; end_of_file
7764: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
7765: LD_INT 0
7767: PPUSH
7768: PPUSH
// if exist_mode then
7769: LD_VAR 0 2
7773: IFFALSE 7798
// unit := CreateCharacter ( previousMissionPrefix & ident ) else
7775: LD_ADDR_VAR 0 4
7779: PUSH
7780: LD_EXP 28
7784: PUSH
7785: LD_VAR 0 1
7789: STR
7790: PPUSH
7791: CALL_OW 34
7795: ST_TO_ADDR
7796: GO 7813
// unit := NewCharacter ( ident ) ;
7798: LD_ADDR_VAR 0 4
7802: PUSH
7803: LD_VAR 0 1
7807: PPUSH
7808: CALL_OW 25
7812: ST_TO_ADDR
// result := unit ;
7813: LD_ADDR_VAR 0 3
7817: PUSH
7818: LD_VAR 0 4
7822: ST_TO_ADDR
// end ;
7823: LD_VAR 0 3
7827: RET
// export function DialogRandom ( characters , dialogMID , dialogFID , radio ) ; var i , speaker ; begin
7828: LD_INT 0
7830: PPUSH
7831: PPUSH
7832: PPUSH
// characters := characters diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
7833: LD_ADDR_VAR 0 1
7837: PUSH
7838: LD_VAR 0 1
7842: PUSH
7843: LD_EXP 43
7847: PUSH
7848: LD_EXP 51
7852: PUSH
7853: LD_EXP 48
7857: PUSH
7858: LD_EXP 50
7862: PUSH
7863: EMPTY
7864: LIST
7865: LIST
7866: LIST
7867: LIST
7868: DIFF
7869: ST_TO_ADDR
// speaker := characters [ rand ( 1 , characters ) ] ;
7870: LD_ADDR_VAR 0 7
7874: PUSH
7875: LD_VAR 0 1
7879: PUSH
7880: LD_INT 1
7882: PPUSH
7883: LD_VAR 0 1
7887: PPUSH
7888: CALL_OW 12
7892: ARRAY
7893: ST_TO_ADDR
// if radio then
7894: LD_VAR 0 4
7898: IFFALSE 7947
// begin if GetSex ( speaker ) = sex_male then
7900: LD_VAR 0 7
7904: PPUSH
7905: CALL_OW 258
7909: PUSH
7910: LD_INT 1
7912: EQUAL
7913: IFFALSE 7931
// SayRadio ( speaker , dialogMID ) else
7915: LD_VAR 0 7
7919: PPUSH
7920: LD_VAR 0 2
7924: PPUSH
7925: CALL_OW 94
7929: GO 7945
// SayRadio ( speaker , dialogFID ) ;
7931: LD_VAR 0 7
7935: PPUSH
7936: LD_VAR 0 3
7940: PPUSH
7941: CALL_OW 94
// end else
7945: GO 7992
// begin if GetSex ( speaker ) = sex_male then
7947: LD_VAR 0 7
7951: PPUSH
7952: CALL_OW 258
7956: PUSH
7957: LD_INT 1
7959: EQUAL
7960: IFFALSE 7978
// Say ( speaker , dialogMID ) else
7962: LD_VAR 0 7
7966: PPUSH
7967: LD_VAR 0 2
7971: PPUSH
7972: CALL_OW 88
7976: GO 7992
// Say ( speaker , dialogFID ) ;
7978: LD_VAR 0 7
7982: PPUSH
7983: LD_VAR 0 3
7987: PPUSH
7988: CALL_OW 88
// end ; result := speaker ;
7992: LD_ADDR_VAR 0 5
7996: PUSH
7997: LD_VAR 0 7
8001: ST_TO_ADDR
// end ;
8002: LD_VAR 0 5
8006: RET
// export function ExtSaveCharacter ( character , characterStringID ) ; begin
8007: LD_INT 0
8009: PPUSH
// if GetSide ( character ) = your_side and IsOK ( character ) then
8010: LD_VAR 0 1
8014: PPUSH
8015: CALL_OW 255
8019: PUSH
8020: LD_OWVAR 2
8024: EQUAL
8025: PUSH
8026: LD_VAR 0 1
8030: PPUSH
8031: CALL_OW 302
8035: AND
8036: IFFALSE 8058
// SaveCharacters ( character , missionPrefix & characterStringID ) ;
8038: LD_VAR 0 1
8042: PPUSH
8043: LD_EXP 27
8047: PUSH
8048: LD_VAR 0 2
8052: STR
8053: PPUSH
8054: CALL_OW 38
// end ;
8058: LD_VAR 0 3
8062: RET
// export function ExtSaveCharacters ( characters , charactersStringID ) ; var unit , resultCharactersToSave ; begin
8063: LD_INT 0
8065: PPUSH
8066: PPUSH
8067: PPUSH
// resultCharactersToSave = [ ] ;
8068: LD_ADDR_VAR 0 5
8072: PUSH
8073: EMPTY
8074: ST_TO_ADDR
// for unit in characters do
8075: LD_ADDR_VAR 0 4
8079: PUSH
8080: LD_VAR 0 1
8084: PUSH
8085: FOR_IN
8086: IFFALSE 8134
// if GetSide ( unit ) = your_side and IsOK ( unit ) then
8088: LD_VAR 0 4
8092: PPUSH
8093: CALL_OW 255
8097: PUSH
8098: LD_OWVAR 2
8102: EQUAL
8103: PUSH
8104: LD_VAR 0 4
8108: PPUSH
8109: CALL_OW 302
8113: AND
8114: IFFALSE 8132
// resultCharactersToSave = resultCharactersToSave ^ unit ;
8116: LD_ADDR_VAR 0 5
8120: PUSH
8121: LD_VAR 0 5
8125: PUSH
8126: LD_VAR 0 4
8130: ADD
8131: ST_TO_ADDR
8132: GO 8085
8134: POP
8135: POP
// SaveCharacters ( resultCharactersToSave , missionPrefix & charactersStringID ) ;
8136: LD_VAR 0 5
8140: PPUSH
8141: LD_EXP 27
8145: PUSH
8146: LD_VAR 0 2
8150: STR
8151: PPUSH
8152: CALL_OW 38
// end ;
8156: LD_VAR 0 3
8160: RET
// export function GetAwayFromXY ( unit1 , x , y , dist , add ) ; var list_nearest , list_coords , temp_dir , dir_list , b , min_dist , temp_dist , c , rand_num , rand_near_hex , attempts ; begin
8161: LD_INT 0
8163: PPUSH
8164: PPUSH
8165: PPUSH
8166: PPUSH
8167: PPUSH
8168: PPUSH
8169: PPUSH
8170: PPUSH
8171: PPUSH
8172: PPUSH
8173: PPUSH
8174: PPUSH
// if not IsOk ( unit1 ) or dist = 1 or not ValidHex ( x , y ) or GetDistUnitXY ( unit1 , x , y ) >= dist or not add in [ true , false ] then
8175: LD_VAR 0 1
8179: PPUSH
8180: CALL_OW 302
8184: NOT
8185: PUSH
8186: LD_VAR 0 4
8190: PUSH
8191: LD_INT 1
8193: EQUAL
8194: OR
8195: PUSH
8196: LD_VAR 0 2
8200: PPUSH
8201: LD_VAR 0 3
8205: PPUSH
8206: CALL_OW 488
8210: NOT
8211: OR
8212: PUSH
8213: LD_VAR 0 1
8217: PPUSH
8218: LD_VAR 0 2
8222: PPUSH
8223: LD_VAR 0 3
8227: PPUSH
8228: CALL_OW 297
8232: PUSH
8233: LD_VAR 0 4
8237: GREATEREQUAL
8238: OR
8239: PUSH
8240: LD_VAR 0 5
8244: PUSH
8245: LD_INT 1
8247: PUSH
8248: LD_INT 0
8250: PUSH
8251: EMPTY
8252: LIST
8253: LIST
8254: IN
8255: NOT
8256: OR
8257: IFFALSE 8261
// exit ;
8259: GO 9818
// attempts = 0 ;
8261: LD_ADDR_VAR 0 17
8265: PUSH
8266: LD_INT 0
8268: ST_TO_ADDR
// repeat list_nearest = [ ] ;
8269: LD_ADDR_VAR 0 7
8273: PUSH
8274: EMPTY
8275: ST_TO_ADDR
// list_coords = [ ] ;
8276: LD_ADDR_VAR 0 8
8280: PUSH
8281: EMPTY
8282: ST_TO_ADDR
// temp_dir = GetTurnDirection ( x , y , GetX ( unit1 ) , GetY ( unit1 ) ) ;
8283: LD_ADDR_VAR 0 9
8287: PUSH
8288: LD_VAR 0 2
8292: PPUSH
8293: LD_VAR 0 3
8297: PPUSH
8298: LD_VAR 0 1
8302: PPUSH
8303: CALL_OW 250
8307: PPUSH
8308: LD_VAR 0 1
8312: PPUSH
8313: CALL_OW 251
8317: PPUSH
8318: CALL 9823 0 4
8322: ST_TO_ADDR
// if attempts = 0 then
8323: LD_VAR 0 17
8327: PUSH
8328: LD_INT 0
8330: EQUAL
8331: IFFALSE 8439
// begin dir_list = [ temp_dir , temp_dir + 1 , temp_dir - 1 ] ;
8333: LD_ADDR_VAR 0 10
8337: PUSH
8338: LD_VAR 0 9
8342: PUSH
8343: LD_VAR 0 9
8347: PUSH
8348: LD_INT 1
8350: PLUS
8351: PUSH
8352: LD_VAR 0 9
8356: PUSH
8357: LD_INT 1
8359: MINUS
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: LIST
8365: ST_TO_ADDR
// if dir_list [ 2 ] = 6 then
8366: LD_VAR 0 10
8370: PUSH
8371: LD_INT 2
8373: ARRAY
8374: PUSH
8375: LD_INT 6
8377: EQUAL
8378: IFFALSE 8401
// dir_list = Replace ( dir_list , 2 , 0 ) ;
8380: LD_ADDR_VAR 0 10
8384: PUSH
8385: LD_VAR 0 10
8389: PPUSH
8390: LD_INT 2
8392: PPUSH
8393: LD_INT 0
8395: PPUSH
8396: CALL_OW 1
8400: ST_TO_ADDR
// if dir_list [ 3 ] = - 1 then
8401: LD_VAR 0 10
8405: PUSH
8406: LD_INT 3
8408: ARRAY
8409: PUSH
8410: LD_INT 1
8412: NEG
8413: EQUAL
8414: IFFALSE 8437
// dir_list = Replace ( dir_list , 3 , 5 ) ;
8416: LD_ADDR_VAR 0 10
8420: PUSH
8421: LD_VAR 0 10
8425: PPUSH
8426: LD_INT 3
8428: PPUSH
8429: LD_INT 5
8431: PPUSH
8432: CALL_OW 1
8436: ST_TO_ADDR
// end else
8437: GO 8476
// dir_list = [ 0 , 1 , 2 , 3 , 4 , 5 ] diff temp_dir ;
8439: LD_ADDR_VAR 0 10
8443: PUSH
8444: LD_INT 0
8446: PUSH
8447: LD_INT 1
8449: PUSH
8450: LD_INT 2
8452: PUSH
8453: LD_INT 3
8455: PUSH
8456: LD_INT 4
8458: PUSH
8459: LD_INT 5
8461: PUSH
8462: EMPTY
8463: LIST
8464: LIST
8465: LIST
8466: LIST
8467: LIST
8468: LIST
8469: PUSH
8470: LD_VAR 0 9
8474: DIFF
8475: ST_TO_ADDR
// for c = 1 to ( dir_list + 0 ) do
8476: LD_ADDR_VAR 0 14
8480: PUSH
8481: DOUBLE
8482: LD_INT 1
8484: DEC
8485: ST_TO_ADDR
8486: LD_VAR 0 10
8490: PUSH
8491: LD_INT 0
8493: PLUS
8494: PUSH
8495: FOR_TO
8496: IFFALSE 8818
// case dir_list [ c ] of 0 :
8498: LD_VAR 0 10
8502: PUSH
8503: LD_VAR 0 14
8507: ARRAY
8508: PUSH
8509: LD_INT 0
8511: DOUBLE
8512: EQUAL
8513: IFTRUE 8517
8515: GO 8558
8517: POP
// list_coords = Insert ( list_coords , 1 , [ x , y - dist ] ) ; 1 :
8518: LD_ADDR_VAR 0 8
8522: PUSH
8523: LD_VAR 0 8
8527: PPUSH
8528: LD_INT 1
8530: PPUSH
8531: LD_VAR 0 2
8535: PUSH
8536: LD_VAR 0 3
8540: PUSH
8541: LD_VAR 0 4
8545: MINUS
8546: PUSH
8547: EMPTY
8548: LIST
8549: LIST
8550: PPUSH
8551: CALL_OW 2
8555: ST_TO_ADDR
8556: GO 8816
8558: LD_INT 1
8560: DOUBLE
8561: EQUAL
8562: IFTRUE 8566
8564: GO 8607
8566: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y ] ) ; 2 :
8567: LD_ADDR_VAR 0 8
8571: PUSH
8572: LD_VAR 0 8
8576: PPUSH
8577: LD_INT 1
8579: PPUSH
8580: LD_VAR 0 2
8584: PUSH
8585: LD_VAR 0 4
8589: PLUS
8590: PUSH
8591: LD_VAR 0 3
8595: PUSH
8596: EMPTY
8597: LIST
8598: LIST
8599: PPUSH
8600: CALL_OW 2
8604: ST_TO_ADDR
8605: GO 8816
8607: LD_INT 2
8609: DOUBLE
8610: EQUAL
8611: IFTRUE 8615
8613: GO 8662
8615: POP
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + dist ] ) ; 3 :
8616: LD_ADDR_VAR 0 8
8620: PUSH
8621: LD_VAR 0 8
8625: PPUSH
8626: LD_INT 1
8628: PPUSH
8629: LD_VAR 0 2
8633: PUSH
8634: LD_VAR 0 4
8638: PLUS
8639: PUSH
8640: LD_VAR 0 3
8644: PUSH
8645: LD_VAR 0 4
8649: PLUS
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PPUSH
8655: CALL_OW 2
8659: ST_TO_ADDR
8660: GO 8816
8662: LD_INT 3
8664: DOUBLE
8665: EQUAL
8666: IFTRUE 8670
8668: GO 8711
8670: POP
// list_coords = Insert ( list_coords , 1 , [ x , y + dist ] ) ; 4 :
8671: LD_ADDR_VAR 0 8
8675: PUSH
8676: LD_VAR 0 8
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: LD_VAR 0 2
8688: PUSH
8689: LD_VAR 0 3
8693: PUSH
8694: LD_VAR 0 4
8698: PLUS
8699: PUSH
8700: EMPTY
8701: LIST
8702: LIST
8703: PPUSH
8704: CALL_OW 2
8708: ST_TO_ADDR
8709: GO 8816
8711: LD_INT 4
8713: DOUBLE
8714: EQUAL
8715: IFTRUE 8719
8717: GO 8760
8719: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y ] ) ; 5 :
8720: LD_ADDR_VAR 0 8
8724: PUSH
8725: LD_VAR 0 8
8729: PPUSH
8730: LD_INT 1
8732: PPUSH
8733: LD_VAR 0 2
8737: PUSH
8738: LD_VAR 0 4
8742: MINUS
8743: PUSH
8744: LD_VAR 0 3
8748: PUSH
8749: EMPTY
8750: LIST
8751: LIST
8752: PPUSH
8753: CALL_OW 2
8757: ST_TO_ADDR
8758: GO 8816
8760: LD_INT 5
8762: DOUBLE
8763: EQUAL
8764: IFTRUE 8768
8766: GO 8815
8768: POP
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - dist ] ) ; end ;
8769: LD_ADDR_VAR 0 8
8773: PUSH
8774: LD_VAR 0 8
8778: PPUSH
8779: LD_INT 1
8781: PPUSH
8782: LD_VAR 0 2
8786: PUSH
8787: LD_VAR 0 4
8791: MINUS
8792: PUSH
8793: LD_VAR 0 3
8797: PUSH
8798: LD_VAR 0 4
8802: MINUS
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PPUSH
8808: CALL_OW 2
8812: ST_TO_ADDR
8813: GO 8816
8815: POP
8816: GO 8495
8818: POP
8819: POP
// if dist < 30 then
8820: LD_VAR 0 4
8824: PUSH
8825: LD_INT 30
8827: LESS
8828: IFFALSE 8840
// c = 1 else
8830: LD_ADDR_VAR 0 14
8834: PUSH
8835: LD_INT 1
8837: ST_TO_ADDR
8838: GO 8848
// c = 2 ;
8840: LD_ADDR_VAR 0 14
8844: PUSH
8845: LD_INT 2
8847: ST_TO_ADDR
// b = 1 ;
8848: LD_ADDR_VAR 0 11
8852: PUSH
8853: LD_INT 1
8855: ST_TO_ADDR
// while b <= ( dist - 1 ) do
8856: LD_VAR 0 11
8860: PUSH
8861: LD_VAR 0 4
8865: PUSH
8866: LD_INT 1
8868: MINUS
8869: LESSEQUAL
8870: IFFALSE 9298
// begin if 0 in dir_list and 1 in dir_list then
8872: LD_INT 0
8874: PUSH
8875: LD_VAR 0 10
8879: IN
8880: PUSH
8881: LD_INT 1
8883: PUSH
8884: LD_VAR 0 10
8888: IN
8889: AND
8890: IFFALSE 8942
// list_coords = Insert ( list_coords , 1 , [ x + b , y - dist + b ] ) ;
8892: LD_ADDR_VAR 0 8
8896: PUSH
8897: LD_VAR 0 8
8901: PPUSH
8902: LD_INT 1
8904: PPUSH
8905: LD_VAR 0 2
8909: PUSH
8910: LD_VAR 0 11
8914: PLUS
8915: PUSH
8916: LD_VAR 0 3
8920: PUSH
8921: LD_VAR 0 4
8925: MINUS
8926: PUSH
8927: LD_VAR 0 11
8931: PLUS
8932: PUSH
8933: EMPTY
8934: LIST
8935: LIST
8936: PPUSH
8937: CALL_OW 2
8941: ST_TO_ADDR
// if 1 in dir_list and 2 in dir_list then
8942: LD_INT 1
8944: PUSH
8945: LD_VAR 0 10
8949: IN
8950: PUSH
8951: LD_INT 2
8953: PUSH
8954: LD_VAR 0 10
8958: IN
8959: AND
8960: IFFALSE 9006
// list_coords = Insert ( list_coords , 1 , [ x + dist , y + b ] ) ;
8962: LD_ADDR_VAR 0 8
8966: PUSH
8967: LD_VAR 0 8
8971: PPUSH
8972: LD_INT 1
8974: PPUSH
8975: LD_VAR 0 2
8979: PUSH
8980: LD_VAR 0 4
8984: PLUS
8985: PUSH
8986: LD_VAR 0 3
8990: PUSH
8991: LD_VAR 0 11
8995: PLUS
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PPUSH
9001: CALL_OW 2
9005: ST_TO_ADDR
// if 2 in dir_list and 3 in dir_list then
9006: LD_INT 2
9008: PUSH
9009: LD_VAR 0 10
9013: IN
9014: PUSH
9015: LD_INT 3
9017: PUSH
9018: LD_VAR 0 10
9022: IN
9023: AND
9024: IFFALSE 9076
// list_coords = Insert ( list_coords , 1 , [ x + dist - b , y + dist ] ) ;
9026: LD_ADDR_VAR 0 8
9030: PUSH
9031: LD_VAR 0 8
9035: PPUSH
9036: LD_INT 1
9038: PPUSH
9039: LD_VAR 0 2
9043: PUSH
9044: LD_VAR 0 4
9048: PLUS
9049: PUSH
9050: LD_VAR 0 11
9054: MINUS
9055: PUSH
9056: LD_VAR 0 3
9060: PUSH
9061: LD_VAR 0 4
9065: PLUS
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 2
9075: ST_TO_ADDR
// if 3 in dir_list and 4 in dir_list then
9076: LD_INT 3
9078: PUSH
9079: LD_VAR 0 10
9083: IN
9084: PUSH
9085: LD_INT 4
9087: PUSH
9088: LD_VAR 0 10
9092: IN
9093: AND
9094: IFFALSE 9146
// list_coords = Insert ( list_coords , 1 , [ x - b , y + dist - b ] ) ;
9096: LD_ADDR_VAR 0 8
9100: PUSH
9101: LD_VAR 0 8
9105: PPUSH
9106: LD_INT 1
9108: PPUSH
9109: LD_VAR 0 2
9113: PUSH
9114: LD_VAR 0 11
9118: MINUS
9119: PUSH
9120: LD_VAR 0 3
9124: PUSH
9125: LD_VAR 0 4
9129: PLUS
9130: PUSH
9131: LD_VAR 0 11
9135: MINUS
9136: PUSH
9137: EMPTY
9138: LIST
9139: LIST
9140: PPUSH
9141: CALL_OW 2
9145: ST_TO_ADDR
// if 4 in dir_list and 5 in dir_list then
9146: LD_INT 4
9148: PUSH
9149: LD_VAR 0 10
9153: IN
9154: PUSH
9155: LD_INT 5
9157: PUSH
9158: LD_VAR 0 10
9162: IN
9163: AND
9164: IFFALSE 9210
// list_coords = Insert ( list_coords , 1 , [ x - dist , y - b ] ) ;
9166: LD_ADDR_VAR 0 8
9170: PUSH
9171: LD_VAR 0 8
9175: PPUSH
9176: LD_INT 1
9178: PPUSH
9179: LD_VAR 0 2
9183: PUSH
9184: LD_VAR 0 4
9188: MINUS
9189: PUSH
9190: LD_VAR 0 3
9194: PUSH
9195: LD_VAR 0 11
9199: MINUS
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: PPUSH
9205: CALL_OW 2
9209: ST_TO_ADDR
// if 5 in dir_list and 0 in dir_list then
9210: LD_INT 5
9212: PUSH
9213: LD_VAR 0 10
9217: IN
9218: PUSH
9219: LD_INT 0
9221: PUSH
9222: LD_VAR 0 10
9226: IN
9227: AND
9228: IFFALSE 9280
// list_coords = Insert ( list_coords , 1 , [ x - dist + b , y - dist ] ) ;
9230: LD_ADDR_VAR 0 8
9234: PUSH
9235: LD_VAR 0 8
9239: PPUSH
9240: LD_INT 1
9242: PPUSH
9243: LD_VAR 0 2
9247: PUSH
9248: LD_VAR 0 4
9252: MINUS
9253: PUSH
9254: LD_VAR 0 11
9258: PLUS
9259: PUSH
9260: LD_VAR 0 3
9264: PUSH
9265: LD_VAR 0 4
9269: MINUS
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PPUSH
9275: CALL_OW 2
9279: ST_TO_ADDR
// b = b + c end ;
9280: LD_ADDR_VAR 0 11
9284: PUSH
9285: LD_VAR 0 11
9289: PUSH
9290: LD_VAR 0 14
9294: PLUS
9295: ST_TO_ADDR
9296: GO 8856
// if list_coords = 0 then
9298: LD_VAR 0 8
9302: PUSH
9303: LD_INT 0
9305: EQUAL
9306: IFFALSE 9310
// exit ;
9308: GO 9818
// repeat min_dist = 5000 ;
9310: LD_ADDR_VAR 0 12
9314: PUSH
9315: LD_INT 5000
9317: ST_TO_ADDR
// for b in list_coords do
9318: LD_ADDR_VAR 0 11
9322: PUSH
9323: LD_VAR 0 8
9327: PUSH
9328: FOR_IN
9329: IFFALSE 9388
// begin temp_dist = GetDistUnitXY ( unit1 , b [ 1 ] , b [ 2 ] ) ;
9331: LD_ADDR_VAR 0 13
9335: PUSH
9336: LD_VAR 0 1
9340: PPUSH
9341: LD_VAR 0 11
9345: PUSH
9346: LD_INT 1
9348: ARRAY
9349: PPUSH
9350: LD_VAR 0 11
9354: PUSH
9355: LD_INT 2
9357: ARRAY
9358: PPUSH
9359: CALL_OW 297
9363: ST_TO_ADDR
// if temp_dist < min_dist then
9364: LD_VAR 0 13
9368: PUSH
9369: LD_VAR 0 12
9373: LESS
9374: IFFALSE 9386
// min_dist = temp_dist ;
9376: LD_ADDR_VAR 0 12
9380: PUSH
9381: LD_VAR 0 13
9385: ST_TO_ADDR
// end ;
9386: GO 9328
9388: POP
9389: POP
// c = 0 ;
9390: LD_ADDR_VAR 0 14
9394: PUSH
9395: LD_INT 0
9397: ST_TO_ADDR
// repeat c = c + 1 ;
9398: LD_ADDR_VAR 0 14
9402: PUSH
9403: LD_VAR 0 14
9407: PUSH
9408: LD_INT 1
9410: PLUS
9411: ST_TO_ADDR
// if GetDistUnitXY ( unit1 , list_coords [ c ] [ 1 ] , list_coords [ c ] [ 2 ] ) = min_dist then
9412: LD_VAR 0 1
9416: PPUSH
9417: LD_VAR 0 8
9421: PUSH
9422: LD_VAR 0 14
9426: ARRAY
9427: PUSH
9428: LD_INT 1
9430: ARRAY
9431: PPUSH
9432: LD_VAR 0 8
9436: PUSH
9437: LD_VAR 0 14
9441: ARRAY
9442: PUSH
9443: LD_INT 2
9445: ARRAY
9446: PPUSH
9447: CALL_OW 297
9451: PUSH
9452: LD_VAR 0 12
9456: EQUAL
9457: IFFALSE 9522
// begin list_nearest = Insert ( list_nearest , 1 , list_coords [ c ] ) ;
9459: LD_ADDR_VAR 0 7
9463: PUSH
9464: LD_VAR 0 7
9468: PPUSH
9469: LD_INT 1
9471: PPUSH
9472: LD_VAR 0 8
9476: PUSH
9477: LD_VAR 0 14
9481: ARRAY
9482: PPUSH
9483: CALL_OW 2
9487: ST_TO_ADDR
// list_coords = Delete ( list_coords , c ) ;
9488: LD_ADDR_VAR 0 8
9492: PUSH
9493: LD_VAR 0 8
9497: PPUSH
9498: LD_VAR 0 14
9502: PPUSH
9503: CALL_OW 3
9507: ST_TO_ADDR
// c = c - 1 ;
9508: LD_ADDR_VAR 0 14
9512: PUSH
9513: LD_VAR 0 14
9517: PUSH
9518: LD_INT 1
9520: MINUS
9521: ST_TO_ADDR
// end ; until c = list_coords ;
9522: LD_VAR 0 14
9526: PUSH
9527: LD_VAR 0 8
9531: EQUAL
9532: IFFALSE 9398
// c = 0 ;
9534: LD_ADDR_VAR 0 14
9538: PUSH
9539: LD_INT 0
9541: ST_TO_ADDR
// if list_nearest > 0 then
9542: LD_VAR 0 7
9546: PUSH
9547: LD_INT 0
9549: GREATER
9550: IFFALSE 9692
// begin repeat rand_num = Rand ( 1 , list_nearest ) ;
9552: LD_ADDR_VAR 0 15
9556: PUSH
9557: LD_INT 1
9559: PPUSH
9560: LD_VAR 0 7
9564: PPUSH
9565: CALL_OW 12
9569: ST_TO_ADDR
// rand_near_hex = list_nearest [ rand_num ] ;
9570: LD_ADDR_VAR 0 16
9574: PUSH
9575: LD_VAR 0 7
9579: PUSH
9580: LD_VAR 0 15
9584: ARRAY
9585: ST_TO_ADDR
// if ValidHex ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) > 0 and HexInfo ( rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) = 0 then
9586: LD_VAR 0 16
9590: PUSH
9591: LD_INT 1
9593: ARRAY
9594: PPUSH
9595: LD_VAR 0 16
9599: PUSH
9600: LD_INT 2
9602: ARRAY
9603: PPUSH
9604: CALL_OW 488
9608: PUSH
9609: LD_INT 0
9611: GREATER
9612: PUSH
9613: LD_VAR 0 16
9617: PUSH
9618: LD_INT 1
9620: ARRAY
9621: PPUSH
9622: LD_VAR 0 16
9626: PUSH
9627: LD_INT 2
9629: ARRAY
9630: PPUSH
9631: CALL_OW 428
9635: PUSH
9636: LD_INT 0
9638: EQUAL
9639: AND
9640: IFFALSE 9652
// c = 1 else
9642: LD_ADDR_VAR 0 14
9646: PUSH
9647: LD_INT 1
9649: ST_TO_ADDR
9650: GO 9672
// list_nearest = Delete ( list_nearest , rand_num ) ;
9652: LD_ADDR_VAR 0 7
9656: PUSH
9657: LD_VAR 0 7
9661: PPUSH
9662: LD_VAR 0 15
9666: PPUSH
9667: CALL_OW 3
9671: ST_TO_ADDR
// until c = 1 or list_nearest = 0 ;
9672: LD_VAR 0 14
9676: PUSH
9677: LD_INT 1
9679: EQUAL
9680: PUSH
9681: LD_VAR 0 7
9685: PUSH
9686: LD_INT 0
9688: EQUAL
9689: OR
9690: IFFALSE 9552
// end ; until c = 1 or list_coords = 0 ;
9692: LD_VAR 0 14
9696: PUSH
9697: LD_INT 1
9699: EQUAL
9700: PUSH
9701: LD_VAR 0 8
9705: PUSH
9706: LD_INT 0
9708: EQUAL
9709: OR
9710: IFFALSE 9310
// attempts = attempts + 1 ;
9712: LD_ADDR_VAR 0 17
9716: PUSH
9717: LD_VAR 0 17
9721: PUSH
9722: LD_INT 1
9724: PLUS
9725: ST_TO_ADDR
// until c = 1 or attempts > 1 ;
9726: LD_VAR 0 14
9730: PUSH
9731: LD_INT 1
9733: EQUAL
9734: PUSH
9735: LD_VAR 0 17
9739: PUSH
9740: LD_INT 1
9742: GREATER
9743: OR
9744: IFFALSE 8269
// if c = 1 then
9746: LD_VAR 0 14
9750: PUSH
9751: LD_INT 1
9753: EQUAL
9754: IFFALSE 9818
// if add then
9756: LD_VAR 0 5
9760: IFFALSE 9791
// AddComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) else
9762: LD_VAR 0 1
9766: PPUSH
9767: LD_VAR 0 16
9771: PUSH
9772: LD_INT 1
9774: ARRAY
9775: PPUSH
9776: LD_VAR 0 16
9780: PUSH
9781: LD_INT 2
9783: ARRAY
9784: PPUSH
9785: CALL_OW 171
9789: GO 9818
// ComMoveXY ( unit1 , rand_near_hex [ 1 ] , rand_near_hex [ 2 ] ) ;
9791: LD_VAR 0 1
9795: PPUSH
9796: LD_VAR 0 16
9800: PUSH
9801: LD_INT 1
9803: ARRAY
9804: PPUSH
9805: LD_VAR 0 16
9809: PUSH
9810: LD_INT 2
9812: ARRAY
9813: PPUSH
9814: CALL_OW 111
// end ;
9818: LD_VAR 0 6
9822: RET
// export function GetTurnDirection ( x1 , y1 , x , y ) ; var dist_1 , dist_2 , b , temp_dist , dir ; begin
9823: LD_INT 0
9825: PPUSH
9826: PPUSH
9827: PPUSH
9828: PPUSH
9829: PPUSH
9830: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x , y ) then
9831: LD_VAR 0 1
9835: PPUSH
9836: LD_VAR 0 2
9840: PPUSH
9841: CALL_OW 488
9845: NOT
9846: PUSH
9847: LD_VAR 0 3
9851: PPUSH
9852: LD_VAR 0 4
9856: PPUSH
9857: CALL_OW 488
9861: NOT
9862: OR
9863: IFFALSE 9876
// begin result = - 1 ;
9865: LD_ADDR_VAR 0 5
9869: PUSH
9870: LD_INT 1
9872: NEG
9873: ST_TO_ADDR
// exit ;
9874: GO 10036
// end ; dist_1 = GetDistXY ( x1 , y1 , x , y ) ;
9876: LD_ADDR_VAR 0 6
9880: PUSH
9881: LD_VAR 0 1
9885: PPUSH
9886: LD_VAR 0 2
9890: PPUSH
9891: LD_VAR 0 3
9895: PPUSH
9896: LD_VAR 0 4
9900: PPUSH
9901: CALL_OW 298
9905: ST_TO_ADDR
// dist_2 = 99999 ;
9906: LD_ADDR_VAR 0 7
9910: PUSH
9911: LD_INT 99999
9913: ST_TO_ADDR
// for b = 0 to 5 do
9914: LD_ADDR_VAR 0 8
9918: PUSH
9919: DOUBLE
9920: LD_INT 0
9922: DEC
9923: ST_TO_ADDR
9924: LD_INT 5
9926: PUSH
9927: FOR_TO
9928: IFFALSE 10024
// begin temp_dist = GetDistXY ( ShiftX ( x1 , b , dist_1 ) , ShiftY ( y1 , b , dist_1 ) , x , y ) ;
9930: LD_ADDR_VAR 0 9
9934: PUSH
9935: LD_VAR 0 1
9939: PPUSH
9940: LD_VAR 0 8
9944: PPUSH
9945: LD_VAR 0 6
9949: PPUSH
9950: CALL_OW 272
9954: PPUSH
9955: LD_VAR 0 2
9959: PPUSH
9960: LD_VAR 0 8
9964: PPUSH
9965: LD_VAR 0 6
9969: PPUSH
9970: CALL_OW 273
9974: PPUSH
9975: LD_VAR 0 3
9979: PPUSH
9980: LD_VAR 0 4
9984: PPUSH
9985: CALL_OW 298
9989: ST_TO_ADDR
// if temp_dist < dist_2 then
9990: LD_VAR 0 9
9994: PUSH
9995: LD_VAR 0 7
9999: LESS
10000: IFFALSE 10022
// begin dist_2 = temp_dist ;
10002: LD_ADDR_VAR 0 7
10006: PUSH
10007: LD_VAR 0 9
10011: ST_TO_ADDR
// dir = b ;
10012: LD_ADDR_VAR 0 10
10016: PUSH
10017: LD_VAR 0 8
10021: ST_TO_ADDR
// end ; end ;
10022: GO 9927
10024: POP
10025: POP
// result = dir ;
10026: LD_ADDR_VAR 0 5
10030: PUSH
10031: LD_VAR 0 10
10035: ST_TO_ADDR
// end ;
10036: LD_VAR 0 5
10040: RET
// export function MoveToHill ; begin
10041: LD_INT 0
10043: PPUSH
// ComMoveXY ( Pokryshkin , 65 , 59 ) ;
10044: LD_EXP 44
10048: PPUSH
10049: LD_INT 65
10051: PPUSH
10052: LD_INT 59
10054: PPUSH
10055: CALL_OW 111
// AddComCrawl ( Pokryshkin ) ;
10059: LD_EXP 44
10063: PPUSH
10064: CALL_OW 197
// ComMoveXY ( Saseda , 65 , 58 ) ;
10068: LD_EXP 45
10072: PPUSH
10073: LD_INT 65
10075: PPUSH
10076: LD_INT 58
10078: PPUSH
10079: CALL_OW 111
// AddComCrawl ( Saseda ) ;
10083: LD_EXP 45
10087: PPUSH
10088: CALL_OW 197
// ComMoveXY ( Jaworska , 64 , 57 ) ;
10092: LD_EXP 46
10096: PPUSH
10097: LD_INT 64
10099: PPUSH
10100: LD_INT 57
10102: PPUSH
10103: CALL_OW 111
// AddComCrawl ( Jaworska ) ;
10107: LD_EXP 46
10111: PPUSH
10112: CALL_OW 197
// ComMoveXY ( Balei , 64 , 56 ) ;
10116: LD_EXP 47
10120: PPUSH
10121: LD_INT 64
10123: PPUSH
10124: LD_INT 56
10126: PPUSH
10127: CALL_OW 111
// AddComCrawl ( Balei ) ;
10131: LD_EXP 47
10135: PPUSH
10136: CALL_OW 197
// ComMoveXY ( Belkov , 63 , 55 ) ;
10140: LD_EXP 48
10144: PPUSH
10145: LD_INT 63
10147: PPUSH
10148: LD_INT 55
10150: PPUSH
10151: CALL_OW 111
// AddComCrawl ( Belkov ) ;
10155: LD_EXP 48
10159: PPUSH
10160: CALL_OW 197
// ComMoveXY ( Jaunzeme , 66 , 58 ) ;
10164: LD_EXP 49
10168: PPUSH
10169: LD_INT 66
10171: PPUSH
10172: LD_INT 58
10174: PPUSH
10175: CALL_OW 111
// AddComCrawl ( Jaunzeme ) ;
10179: LD_EXP 49
10183: PPUSH
10184: CALL_OW 197
// if ( GetSide ( Gnyevko ) = 6 and gnyevkoSaved ) then
10188: LD_EXP 51
10192: PPUSH
10193: CALL_OW 255
10197: PUSH
10198: LD_INT 6
10200: EQUAL
10201: PUSH
10202: LD_EXP 11
10206: AND
10207: IFFALSE 10233
// begin ComMoveXY ( Gnyevko , 63 , 54 ) ;
10209: LD_EXP 51
10213: PPUSH
10214: LD_INT 63
10216: PPUSH
10217: LD_INT 54
10219: PPUSH
10220: CALL_OW 111
// AddComCrawl ( Gnyevko ) ;
10224: LD_EXP 51
10228: PPUSH
10229: CALL_OW 197
// end ; end ; end_of_file
10233: LD_VAR 0 1
10237: RET
// export function BurlakDying ; begin
10238: LD_INT 0
10240: PPUSH
// YouLost ( Burlak ) ;
10241: LD_STRING Burlak
10243: PPUSH
10244: CALL_OW 104
// end ;
10248: LD_VAR 0 1
10252: RET
// every 0 0$1 trigger kirovSolds = 0 do
10253: LD_EXP 53
10257: PUSH
10258: LD_INT 0
10260: EQUAL
10261: IFFALSE 10273
10263: GO 10265
10265: DISABLE
// YouLost ( KirovSoldsDie ) ; end_of_file
10266: LD_STRING KirovSoldsDie
10268: PPUSH
10269: CALL_OW 104
10273: END
// every 0 0$1 trigger evacuationAvailable and FilterUnitsExceptArea ( ExitArea , [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do var dec ;
10274: LD_EXP 21
10278: PUSH
10279: LD_INT 1
10281: PPUSH
10282: LD_INT 22
10284: PUSH
10285: LD_INT 3
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: PUSH
10292: LD_INT 21
10294: PUSH
10295: LD_INT 1
10297: PUSH
10298: EMPTY
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: PPUSH
10306: CALL_OW 71
10310: PUSH
10311: LD_INT 0
10313: EQUAL
10314: AND
10315: IFFALSE 10509
10317: GO 10319
10319: DISABLE
10320: LD_INT 0
10322: PPUSH
// begin if ( IsOK ( Kirilenkova ) and GetSide ( Kirilenkova ) = 8 ) or ( IsOK ( Gnyevko ) and GetSide ( Gnyevko ) = 8 ) then
10323: LD_EXP 50
10327: PPUSH
10328: CALL_OW 302
10332: PUSH
10333: LD_EXP 50
10337: PPUSH
10338: CALL_OW 255
10342: PUSH
10343: LD_INT 8
10345: EQUAL
10346: AND
10347: PUSH
10348: LD_EXP 51
10352: PPUSH
10353: CALL_OW 302
10357: PUSH
10358: LD_EXP 51
10362: PPUSH
10363: CALL_OW 255
10367: PUSH
10368: LD_INT 8
10370: EQUAL
10371: AND
10372: OR
10373: IFFALSE 10505
// begin case Query ( QExit2 ) of 1 :
10375: LD_STRING QExit2
10377: PPUSH
10378: CALL_OW 97
10382: PUSH
10383: LD_INT 1
10385: DOUBLE
10386: EQUAL
10387: IFTRUE 10391
10389: GO 10483
10391: POP
// begin if IsOk ( Belkov ) then
10392: LD_EXP 48
10396: PPUSH
10397: CALL_OW 302
10401: IFFALSE 10417
// Say ( Belkov , D12-Bel-1 ) else
10403: LD_EXP 48
10407: PPUSH
10408: LD_STRING D12-Bel-1
10410: PPUSH
10411: CALL_OW 88
10415: GO 10477
// DialogRandom ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_ok ] , [ f_sex , sex_male ] ] ) , D12-RSol1-1 ,  , false ) ;
10417: LD_INT 22
10419: PUSH
10420: LD_INT 3
10422: PUSH
10423: EMPTY
10424: LIST
10425: LIST
10426: PUSH
10427: LD_INT 21
10429: PUSH
10430: LD_INT 1
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: PUSH
10437: LD_INT 50
10439: PUSH
10440: EMPTY
10441: LIST
10442: PUSH
10443: LD_INT 26
10445: PUSH
10446: LD_INT 1
10448: PUSH
10449: EMPTY
10450: LIST
10451: LIST
10452: PUSH
10453: EMPTY
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: PPUSH
10459: CALL_OW 69
10463: PPUSH
10464: LD_STRING D12-RSol1-1
10466: PPUSH
10467: LD_STRING 
10469: PPUSH
10470: LD_INT 0
10472: PPUSH
10473: CALL 7828 0 4
// FinishMission ;
10477: CALL 10512 0 0
// end ; 2 :
10481: GO 10503
10483: LD_INT 2
10485: DOUBLE
10486: EQUAL
10487: IFTRUE 10491
10489: GO 10502
10491: POP
// begin wait ( 0 0$5 ) ;
10492: LD_INT 175
10494: PPUSH
10495: CALL_OW 67
// enable ;
10499: ENABLE
// end ; end ;
10500: GO 10503
10502: POP
// end else
10503: GO 10509
// FinishMission ;
10505: CALL 10512 0 0
// end ;
10509: PPOPN 1
10511: END
// function FinishMission ; begin
10512: LD_INT 0
10514: PPUSH
// SetRewards ;
10515: CALL 10536 0 0
// SavePlayerCharacters ;
10519: CALL 10887 0 0
// SaveGlobalVariables ;
10523: CALL 11017 0 0
// YouWin ;
10527: CALL_OW 103
// end ;
10531: LD_VAR 0 1
10535: RET
// function SetRewards ; begin
10536: LD_INT 0
10538: PPUSH
// if not gladstoneEscape and not JohannaEscape then
10539: LD_EXP 18
10543: NOT
10544: PUSH
10545: LD_EXP 19
10549: NOT
10550: AND
10551: IFFALSE 10563
// AddMedal ( NoEscape , 1 ) ;
10553: LD_STRING NoEscape
10555: PPUSH
10556: LD_INT 1
10558: PPUSH
10559: CALL_OW 101
// if gladstoneEscape and not JohannaEscape then
10563: LD_EXP 18
10567: PUSH
10568: LD_EXP 19
10572: NOT
10573: AND
10574: IFFALSE 10587
// AddMedal ( NoEscape , - 1 ) ;
10576: LD_STRING NoEscape
10578: PPUSH
10579: LD_INT 1
10581: NEG
10582: PPUSH
10583: CALL_OW 101
// if not gladstoneEscape and JohannaEscape then
10587: LD_EXP 18
10591: NOT
10592: PUSH
10593: LD_EXP 19
10597: AND
10598: IFFALSE 10611
// AddMedal ( NoEscape , - 2 ) ;
10600: LD_STRING NoEscape
10602: PPUSH
10603: LD_INT 2
10605: NEG
10606: PPUSH
10607: CALL_OW 101
// if gladstoneEscape and JohannaEscape then
10611: LD_EXP 18
10615: PUSH
10616: LD_EXP 19
10620: AND
10621: IFFALSE 10634
// AddMedal ( NoEscape , - 3 ) ;
10623: LD_STRING NoEscape
10625: PPUSH
10626: LD_INT 3
10628: NEG
10629: PPUSH
10630: CALL_OW 101
// if gnyevkoSaved and IsOK ( Gnyevko ) and jelenaSaved and IsOK ( Kirilenkova ) then
10634: LD_EXP 11
10638: PUSH
10639: LD_EXP 51
10643: PPUSH
10644: CALL_OW 302
10648: AND
10649: PUSH
10650: LD_EXP 20
10654: AND
10655: PUSH
10656: LD_EXP 50
10660: PPUSH
10661: CALL_OW 302
10665: AND
10666: IFFALSE 10678
// AddMedal ( Gnyevko , 1 ) ;
10668: LD_STRING Gnyevko
10670: PPUSH
10671: LD_INT 1
10673: PPUSH
10674: CALL_OW 101
// if not gnyevkoSaved and jelenaSaved and IsOK ( Kirilenkova ) then
10678: LD_EXP 11
10682: NOT
10683: PUSH
10684: LD_EXP 20
10688: AND
10689: PUSH
10690: LD_EXP 50
10694: PPUSH
10695: CALL_OW 302
10699: AND
10700: IFFALSE 10713
// AddMedal ( Gnyevko , - 1 ) ;
10702: LD_STRING Gnyevko
10704: PPUSH
10705: LD_INT 1
10707: NEG
10708: PPUSH
10709: CALL_OW 101
// if gnyevkoSaved and ( not jelenaSaved or not IsOK ( Gnyevko ) or not IsOK ( Kirilenkova ) ) then
10713: LD_EXP 11
10717: PUSH
10718: LD_EXP 20
10722: NOT
10723: PUSH
10724: LD_EXP 51
10728: PPUSH
10729: CALL_OW 302
10733: NOT
10734: OR
10735: PUSH
10736: LD_EXP 50
10740: PPUSH
10741: CALL_OW 302
10745: NOT
10746: OR
10747: AND
10748: IFFALSE 10761
// AddMedal ( Gnyevko , - 2 ) ;
10750: LD_STRING Gnyevko
10752: PPUSH
10753: LD_INT 2
10755: NEG
10756: PPUSH
10757: CALL_OW 101
// if ( not gnyevkoSaved and not jelenaSaved ) or ( not IsOK ( Gnyevko ) and not IsOK ( Kirilenkova ) ) then
10761: LD_EXP 11
10765: NOT
10766: PUSH
10767: LD_EXP 20
10771: NOT
10772: AND
10773: PUSH
10774: LD_EXP 51
10778: PPUSH
10779: CALL_OW 302
10783: NOT
10784: PUSH
10785: LD_EXP 50
10789: PPUSH
10790: CALL_OW 302
10794: NOT
10795: AND
10796: OR
10797: IFFALSE 10810
// AddMedal ( Gnyevko , - 3 ) ;
10799: LD_STRING Gnyevko
10801: PPUSH
10802: LD_INT 3
10804: NEG
10805: PPUSH
10806: CALL_OW 101
// if lostComradesCounter = 0 then
10810: LD_EXP 22
10814: PUSH
10815: LD_INT 0
10817: EQUAL
10818: IFFALSE 10832
// AddMedal ( NoLosses , 1 ) else
10820: LD_STRING NoLosses
10822: PPUSH
10823: LD_INT 1
10825: PPUSH
10826: CALL_OW 101
10830: GO 10842
// AddMedal ( NoLosses , 0 ) ;
10832: LD_STRING NoLosses
10834: PPUSH
10835: LD_INT 0
10837: PPUSH
10838: CALL_OW 101
// GiveMedals ( Main ) ;
10842: LD_STRING Main
10844: PPUSH
10845: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) ) ;
10849: LD_INT 22
10851: PUSH
10852: LD_INT 3
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: PUSH
10859: LD_INT 21
10861: PUSH
10862: LD_INT 1
10864: PUSH
10865: EMPTY
10866: LIST
10867: LIST
10868: PUSH
10869: EMPTY
10870: LIST
10871: LIST
10872: PPUSH
10873: CALL_OW 69
10877: PPUSH
10878: CALL_OW 43
// end ;
10882: LD_VAR 0 1
10886: RET
// function SavePlayerCharacters ; var others ; begin
10887: LD_INT 0
10889: PPUSH
10890: PPUSH
// ExtSaveCharacter ( Burlak , Burlak ) ;
10891: LD_EXP 43
10895: PPUSH
10896: LD_STRING Burlak
10898: PPUSH
10899: CALL 8007 0 2
// ExtSaveCharacter ( Gnyevko , Gnyevko ) ;
10903: LD_EXP 51
10907: PPUSH
10908: LD_STRING Gnyevko
10910: PPUSH
10911: CALL 8007 0 2
// ExtSaveCharacter ( Belkov , Belkov ) ;
10915: LD_EXP 48
10919: PPUSH
10920: LD_STRING Belkov
10922: PPUSH
10923: CALL 8007 0 2
// ExtSaveCharacter ( Kirilenkova , Kirilenkova ) ;
10927: LD_EXP 50
10931: PPUSH
10932: LD_STRING Kirilenkova
10934: PPUSH
10935: CALL 8007 0 2
// others = FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) diff [ Burlak , Gnyevko , Belkov , Kirilenkova ] ;
10939: LD_ADDR_VAR 0 2
10943: PUSH
10944: LD_INT 22
10946: PUSH
10947: LD_INT 3
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: PUSH
10954: LD_INT 21
10956: PUSH
10957: LD_INT 1
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: PUSH
10964: EMPTY
10965: LIST
10966: LIST
10967: PPUSH
10968: CALL_OW 69
10972: PUSH
10973: LD_EXP 43
10977: PUSH
10978: LD_EXP 51
10982: PUSH
10983: LD_EXP 48
10987: PUSH
10988: LD_EXP 50
10992: PUSH
10993: EMPTY
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: DIFF
10999: ST_TO_ADDR
// ExtSaveCharacters ( others , other_survivors ) ;
11000: LD_VAR 0 2
11004: PPUSH
11005: LD_STRING other_survivors
11007: PPUSH
11008: CALL 8063 0 2
// end ;
11012: LD_VAR 0 1
11016: RET
// function SaveGlobalVariables ; begin
11017: LD_INT 0
11019: PPUSH
// SaveVariable ( gladstoneStatus , 01_GladstoneStatus ) ;
11020: LD_EXP 1
11024: PPUSH
11025: LD_STRING 01_GladstoneStatus
11027: PPUSH
11028: CALL_OW 39
// SaveVariable ( johannaStatus , 01_JohannaStatus ) ;
11032: LD_EXP 2
11036: PPUSH
11037: LD_STRING 01_JohannaStatus
11039: PPUSH
11040: CALL_OW 39
// end ; end_of_file
11044: LD_VAR 0 1
11048: RET
// export Charles , Johanna , Gladstone ; export amApemans ; export function PrepareAmericans ; var i , ape ; begin
11049: LD_INT 0
11051: PPUSH
11052: PPUSH
11053: PPUSH
// uc_side = 1 ;
11054: LD_ADDR_OWVAR 20
11058: PUSH
11059: LD_INT 1
11061: ST_TO_ADDR
// hc_class := 1 ;
11062: LD_ADDR_OWVAR 28
11066: PUSH
11067: LD_INT 1
11069: ST_TO_ADDR
// hc_sex := sex_male ;
11070: LD_ADDR_OWVAR 27
11074: PUSH
11075: LD_INT 1
11077: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11078: LD_ADDR_OWVAR 33
11082: PUSH
11083: LD_STRING AmGalRemake
11085: ST_TO_ADDR
// hc_face_number := 1 ;
11086: LD_ADDR_OWVAR 34
11090: PUSH
11091: LD_INT 1
11093: ST_TO_ADDR
// hc_name := Charles Brown ;
11094: LD_ADDR_OWVAR 26
11098: PUSH
11099: LD_STRING Charles Brown
11101: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11102: LD_ADDR_OWVAR 29
11106: PUSH
11107: LD_INT 12
11109: PUSH
11110: LD_INT 11
11112: PUSH
11113: EMPTY
11114: LIST
11115: LIST
11116: ST_TO_ADDR
// hc_skills := [ 1 , 0 , 1 , 1 ] ;
11117: LD_ADDR_OWVAR 31
11121: PUSH
11122: LD_INT 1
11124: PUSH
11125: LD_INT 0
11127: PUSH
11128: LD_INT 1
11130: PUSH
11131: LD_INT 1
11133: PUSH
11134: EMPTY
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: ST_TO_ADDR
// Charles = CreateHuman ;
11140: LD_ADDR_EXP 39
11144: PUSH
11145: CALL_OW 44
11149: ST_TO_ADDR
// hc_class := 1 ;
11150: LD_ADDR_OWVAR 28
11154: PUSH
11155: LD_INT 1
11157: ST_TO_ADDR
// hc_sex := sex_female ;
11158: LD_ADDR_OWVAR 27
11162: PUSH
11163: LD_INT 2
11165: ST_TO_ADDR
// hc_gallery := AmGalRemake ;
11166: LD_ADDR_OWVAR 33
11170: PUSH
11171: LD_STRING AmGalRemake
11173: ST_TO_ADDR
// hc_face_number := 2 ;
11174: LD_ADDR_OWVAR 34
11178: PUSH
11179: LD_INT 2
11181: ST_TO_ADDR
// hc_name := Johanna Holland ;
11182: LD_ADDR_OWVAR 26
11186: PUSH
11187: LD_STRING Johanna Holland
11189: ST_TO_ADDR
// hc_attr := [ 12 , 11 ] ;
11190: LD_ADDR_OWVAR 29
11194: PUSH
11195: LD_INT 12
11197: PUSH
11198: LD_INT 11
11200: PUSH
11201: EMPTY
11202: LIST
11203: LIST
11204: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11205: LD_ADDR_OWVAR 31
11209: PUSH
11210: LD_EXP 33
11214: PUSH
11215: LD_INT 0
11217: PPUSH
11218: LD_INT 2
11220: PPUSH
11221: CALL_OW 12
11225: PUSH
11226: LD_INT 0
11228: PPUSH
11229: LD_INT 2
11231: PPUSH
11232: CALL_OW 12
11236: PUSH
11237: LD_INT 0
11239: PPUSH
11240: LD_INT 2
11242: PPUSH
11243: CALL_OW 12
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: ST_TO_ADDR
// Johanna = CreateHuman ;
11254: LD_ADDR_EXP 40
11258: PUSH
11259: CALL_OW 44
11263: ST_TO_ADDR
// PlaceUnitArea ( Johanna , JohannaSpawnArea , false ) ;
11264: LD_EXP 40
11268: PPUSH
11269: LD_INT 19
11271: PPUSH
11272: LD_INT 0
11274: PPUSH
11275: CALL_OW 49
// ComEnterUnit ( Johanna , am_bun ) ;
11279: LD_EXP 40
11283: PPUSH
11284: LD_INT 23
11286: PPUSH
11287: CALL_OW 120
// Gladstone := PrepareUnit ( Gladstone , false ) ;
11291: LD_ADDR_EXP 41
11295: PUSH
11296: LD_STRING Gladstone
11298: PPUSH
11299: LD_INT 0
11301: PPUSH
11302: CALL 7765 0 2
11306: ST_TO_ADDR
// PlaceHumanInUnit ( Gladstone , am_lab ) ;
11307: LD_EXP 41
11311: PPUSH
11312: LD_INT 22
11314: PPUSH
11315: CALL_OW 52
// amApemans = [ ] ;
11319: LD_ADDR_EXP 42
11323: PUSH
11324: EMPTY
11325: ST_TO_ADDR
// for i := 1 to amApeAmount do
11326: LD_ADDR_VAR 0 2
11330: PUSH
11331: DOUBLE
11332: LD_INT 1
11334: DEC
11335: ST_TO_ADDR
11336: LD_EXP 32
11340: PUSH
11341: FOR_TO
11342: IFFALSE 11457
// begin hc_class := class_apeman ;
11344: LD_ADDR_OWVAR 28
11348: PUSH
11349: LD_INT 12
11351: ST_TO_ADDR
// hc_gallery :=  ;
11352: LD_ADDR_OWVAR 33
11356: PUSH
11357: LD_STRING 
11359: ST_TO_ADDR
// hc_name :=  ;
11360: LD_ADDR_OWVAR 26
11364: PUSH
11365: LD_STRING 
11367: ST_TO_ADDR
// hc_skills := [ JohannadSkillLevel , rand ( 0 , 2 ) , rand ( 0 , 2 ) , rand ( 0 , 2 ) ] ;
11368: LD_ADDR_OWVAR 31
11372: PUSH
11373: LD_EXP 33
11377: PUSH
11378: LD_INT 0
11380: PPUSH
11381: LD_INT 2
11383: PPUSH
11384: CALL_OW 12
11388: PUSH
11389: LD_INT 0
11391: PPUSH
11392: LD_INT 2
11394: PPUSH
11395: CALL_OW 12
11399: PUSH
11400: LD_INT 0
11402: PPUSH
11403: LD_INT 2
11405: PPUSH
11406: CALL_OW 12
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: ST_TO_ADDR
// ape = CreateHuman ;
11417: LD_ADDR_VAR 0 3
11421: PUSH
11422: CALL_OW 44
11426: ST_TO_ADDR
// PlaceHumanInUnit ( ape , am_lab ) ;
11427: LD_VAR 0 3
11431: PPUSH
11432: LD_INT 22
11434: PPUSH
11435: CALL_OW 52
// amApemans = amApemans ^ ape ;
11439: LD_ADDR_EXP 42
11443: PUSH
11444: LD_EXP 42
11448: PUSH
11449: LD_VAR 0 3
11453: ADD
11454: ST_TO_ADDR
// end ;
11455: GO 11341
11457: POP
11458: POP
// SetLives ( am_bun , americanBunkerHP ) ;
11459: LD_INT 23
11461: PPUSH
11462: LD_EXP 30
11466: PPUSH
11467: CALL_OW 234
// end ; end_of_file
11471: LD_VAR 0 1
11475: RET
// export Burlak ; export Pokryshkin , Saseda , Jaworska , Balei , Belkov , Jaunzeme ; export Kirilenkova ; export Gnyevko ; export Kurin ; export kirovSolds ; export function PrepareRussian ; begin
11476: LD_INT 0
11478: PPUSH
// PrepareHero ;
11479: CALL 11504 0 0
// PreparePokryshkinTeams ;
11483: CALL 11598 0 0
// PrepareJelena ;
11487: CALL 11863 0 0
// PrepareGnyevko ;
11491: CALL 11895 0 0
// PrepareKurin ;
11495: CALL 11566 0 0
// end ;
11499: LD_VAR 0 1
11503: RET
// function PrepareHero ; begin
11504: LD_INT 0
11506: PPUSH
// uc_side = 3 ;
11507: LD_ADDR_OWVAR 20
11511: PUSH
11512: LD_INT 3
11514: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ) ;
11515: LD_ADDR_EXP 43
11519: PUSH
11520: LD_STRING Burlak
11522: PPUSH
11523: LD_INT 0
11525: PPUSH
11526: CALL 7765 0 2
11530: ST_TO_ADDR
// PlaceUnitXY ( Burlak , burlakSpawnPosition [ 1 ] , burlakSpawnPosition [ 2 ] , true ) ;
11531: LD_EXP 43
11535: PPUSH
11536: LD_EXP 34
11540: PUSH
11541: LD_INT 1
11543: ARRAY
11544: PPUSH
11545: LD_EXP 34
11549: PUSH
11550: LD_INT 2
11552: ARRAY
11553: PPUSH
11554: LD_INT 1
11556: PPUSH
11557: CALL_OW 48
// end ;
11561: LD_VAR 0 1
11565: RET
// function PrepareKurin ; begin
11566: LD_INT 0
11568: PPUSH
// uc_side = 6 ;
11569: LD_ADDR_OWVAR 20
11573: PUSH
11574: LD_INT 6
11576: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ) ;
11577: LD_ADDR_EXP 52
11581: PUSH
11582: LD_STRING Kurin
11584: PPUSH
11585: LD_INT 0
11587: PPUSH
11588: CALL 7765 0 2
11592: ST_TO_ADDR
// end ;
11593: LD_VAR 0 1
11597: RET
// function PreparePokryshkinTeams ; begin
11598: LD_INT 0
11600: PPUSH
// uc_side = 6 ;
11601: LD_ADDR_OWVAR 20
11605: PUSH
11606: LD_INT 6
11608: ST_TO_ADDR
// Pokryshkin := PrepareUnit ( Pokryshkin , false ) ;
11609: LD_ADDR_EXP 44
11613: PUSH
11614: LD_STRING Pokryshkin
11616: PPUSH
11617: LD_INT 0
11619: PPUSH
11620: CALL 7765 0 2
11624: ST_TO_ADDR
// Saseda := PrepareUnit ( Saseda , false ) ;
11625: LD_ADDR_EXP 45
11629: PUSH
11630: LD_STRING Saseda
11632: PPUSH
11633: LD_INT 0
11635: PPUSH
11636: CALL 7765 0 2
11640: ST_TO_ADDR
// Jaworska := PrepareUnit ( Jaworska , false ) ;
11641: LD_ADDR_EXP 46
11645: PUSH
11646: LD_STRING Jaworska
11648: PPUSH
11649: LD_INT 0
11651: PPUSH
11652: CALL 7765 0 2
11656: ST_TO_ADDR
// Balei := PrepareUnit ( Balei , false ) ;
11657: LD_ADDR_EXP 47
11661: PUSH
11662: LD_STRING Balei
11664: PPUSH
11665: LD_INT 0
11667: PPUSH
11668: CALL 7765 0 2
11672: ST_TO_ADDR
// Belkov := PrepareUnit ( Belkov , false ) ;
11673: LD_ADDR_EXP 48
11677: PUSH
11678: LD_STRING Belkov
11680: PPUSH
11681: LD_INT 0
11683: PPUSH
11684: CALL 7765 0 2
11688: ST_TO_ADDR
// PlaceUnitArea ( Pokryshkin , PokryshkinSpawnArea , false ) ;
11689: LD_EXP 44
11693: PPUSH
11694: LD_INT 25
11696: PPUSH
11697: LD_INT 0
11699: PPUSH
11700: CALL_OW 49
// PlaceUnitArea ( Saseda , Ru2SpawnArea , false ) ;
11704: LD_EXP 45
11708: PPUSH
11709: LD_INT 17
11711: PPUSH
11712: LD_INT 0
11714: PPUSH
11715: CALL_OW 49
// PlaceUnitArea ( Jaworska , Ru2SpawnArea , false ) ;
11719: LD_EXP 46
11723: PPUSH
11724: LD_INT 17
11726: PPUSH
11727: LD_INT 0
11729: PPUSH
11730: CALL_OW 49
// PlaceUnitArea ( Balei , Ru2SpawnArea , false ) ;
11734: LD_EXP 47
11738: PPUSH
11739: LD_INT 17
11741: PPUSH
11742: LD_INT 0
11744: PPUSH
11745: CALL_OW 49
// PlaceUnitArea ( Belkov , Ru2SpawnArea , false ) ;
11749: LD_EXP 48
11753: PPUSH
11754: LD_INT 17
11756: PPUSH
11757: LD_INT 0
11759: PPUSH
11760: CALL_OW 49
// kirovSolds = [ Pokryshkin , Saseda , Balei , Belkov , Jaworska ] ;
11764: LD_ADDR_EXP 53
11768: PUSH
11769: LD_EXP 44
11773: PUSH
11774: LD_EXP 45
11778: PUSH
11779: LD_EXP 47
11783: PUSH
11784: LD_EXP 48
11788: PUSH
11789: LD_EXP 46
11793: PUSH
11794: EMPTY
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: ST_TO_ADDR
// if Difficulty < 3 then
11801: LD_OWVAR 67
11805: PUSH
11806: LD_INT 3
11808: LESS
11809: IFFALSE 11858
// begin Jaunzeme := PrepareUnit ( Jaunzeme , false ) ;
11811: LD_ADDR_EXP 49
11815: PUSH
11816: LD_STRING Jaunzeme
11818: PPUSH
11819: LD_INT 0
11821: PPUSH
11822: CALL 7765 0 2
11826: ST_TO_ADDR
// PlaceUnitArea ( Jaunzeme , Ru2SpawnArea2 , false ) ;
11827: LD_EXP 49
11831: PPUSH
11832: LD_INT 26
11834: PPUSH
11835: LD_INT 0
11837: PPUSH
11838: CALL_OW 49
// kirovSolds = kirovSolds ^ Jaunzeme ;
11842: LD_ADDR_EXP 53
11846: PUSH
11847: LD_EXP 53
11851: PUSH
11852: LD_EXP 49
11856: ADD
11857: ST_TO_ADDR
// end ; end ;
11858: LD_VAR 0 1
11862: RET
// function PrepareJelena ; begin
11863: LD_INT 0
11865: PPUSH
// uc_side = 8 ;
11866: LD_ADDR_OWVAR 20
11870: PUSH
11871: LD_INT 8
11873: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , false ) ;
11874: LD_ADDR_EXP 50
11878: PUSH
11879: LD_STRING Kirilenkova
11881: PPUSH
11882: LD_INT 0
11884: PPUSH
11885: CALL 7765 0 2
11889: ST_TO_ADDR
// end ;
11890: LD_VAR 0 1
11894: RET
// function PrepareGnyevko ; var un , i , randomPosition ; begin
11895: LD_INT 0
11897: PPUSH
11898: PPUSH
11899: PPUSH
11900: PPUSH
// uc_side = 8 ;
11901: LD_ADDR_OWVAR 20
11905: PUSH
11906: LD_INT 8
11908: ST_TO_ADDR
// Gnyevko := PrepareUnit ( Gnyevko , false ) ;
11909: LD_ADDR_EXP 51
11913: PUSH
11914: LD_STRING Gnyevko
11916: PPUSH
11917: LD_INT 0
11919: PPUSH
11920: CALL 7765 0 2
11924: ST_TO_ADDR
// randomPosition = gnyevkoSpawnPositions [ rand ( 1 , gnyevkoSpawnPositions ) ] ;
11925: LD_ADDR_VAR 0 4
11929: PUSH
11930: LD_EXP 35
11934: PUSH
11935: LD_INT 1
11937: PPUSH
11938: LD_EXP 35
11942: PPUSH
11943: CALL_OW 12
11947: ARRAY
11948: ST_TO_ADDR
// PlaceUnitXY ( Gnyevko , randomPosition [ 1 ] , randomPosition [ 2 ] , false ) ;
11949: LD_EXP 51
11953: PPUSH
11954: LD_VAR 0 4
11958: PUSH
11959: LD_INT 1
11961: ARRAY
11962: PPUSH
11963: LD_VAR 0 4
11967: PUSH
11968: LD_INT 2
11970: ARRAY
11971: PPUSH
11972: LD_INT 0
11974: PPUSH
11975: CALL_OW 48
// SetLives ( Gnyevko , 500 ) ;
11979: LD_EXP 51
11983: PPUSH
11984: LD_INT 500
11986: PPUSH
11987: CALL_OW 234
// ComHold ( Gnyevko ) ;
11991: LD_EXP 51
11995: PPUSH
11996: CALL_OW 140
// for i := 1 to animalsAmount [ 1 ] - [ 3 , 2 , 1 ] [ Difficulty ] do
12000: LD_ADDR_VAR 0 3
12004: PUSH
12005: DOUBLE
12006: LD_INT 1
12008: DEC
12009: ST_TO_ADDR
12010: LD_EXP 24
12014: PUSH
12015: LD_INT 1
12017: ARRAY
12018: PUSH
12019: LD_INT 3
12021: PUSH
12022: LD_INT 2
12024: PUSH
12025: LD_INT 1
12027: PUSH
12028: EMPTY
12029: LIST
12030: LIST
12031: LIST
12032: PUSH
12033: LD_OWVAR 67
12037: ARRAY
12038: MINUS
12039: PUSH
12040: FOR_TO
12041: IFFALSE 12171
// begin uc_side = 0 ;
12043: LD_ADDR_OWVAR 20
12047: PUSH
12048: LD_INT 0
12050: ST_TO_ADDR
// uc_nation = nation_nature ;
12051: LD_ADDR_OWVAR 21
12055: PUSH
12056: LD_INT 0
12058: ST_TO_ADDR
// hc_class = class_apeman ;
12059: LD_ADDR_OWVAR 28
12063: PUSH
12064: LD_INT 12
12066: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12067: LD_ADDR_OWVAR 31
12071: PUSH
12072: LD_EXP 25
12076: PUSH
12077: LD_INT 1
12079: ARRAY
12080: PUSH
12081: LD_EXP 25
12085: PUSH
12086: LD_INT 2
12088: ARRAY
12089: PUSH
12090: LD_EXP 25
12094: PUSH
12095: LD_INT 3
12097: ARRAY
12098: PUSH
12099: LD_EXP 25
12103: PUSH
12104: LD_INT 4
12106: ARRAY
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12114: LD_ADDR_OWVAR 35
12118: PUSH
12119: LD_EXP 31
12123: ST_TO_ADDR
// un = CreateHuman ;
12124: LD_ADDR_VAR 0 2
12128: PUSH
12129: CALL_OW 44
12133: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( Gnyevko ) , GetY ( Gnyevko ) , 8 , false ) ;
12134: LD_VAR 0 2
12138: PPUSH
12139: LD_EXP 51
12143: PPUSH
12144: CALL_OW 250
12148: PPUSH
12149: LD_EXP 51
12153: PPUSH
12154: CALL_OW 251
12158: PPUSH
12159: LD_INT 8
12161: PPUSH
12162: LD_INT 0
12164: PPUSH
12165: CALL_OW 50
// end ;
12169: GO 12040
12171: POP
12172: POP
// end ; end_of_file
12173: LD_VAR 0 1
12177: RET
// export function PrepareNature ; var i , un ; begin
12178: LD_INT 0
12180: PPUSH
12181: PPUSH
12182: PPUSH
// for i := 1 to animalsAmount [ 1 ] do
12183: LD_ADDR_VAR 0 2
12187: PUSH
12188: DOUBLE
12189: LD_INT 1
12191: DEC
12192: ST_TO_ADDR
12193: LD_EXP 24
12197: PUSH
12198: LD_INT 1
12200: ARRAY
12201: PUSH
12202: FOR_TO
12203: IFFALSE 12313
// begin uc_side = 0 ;
12205: LD_ADDR_OWVAR 20
12209: PUSH
12210: LD_INT 0
12212: ST_TO_ADDR
// uc_nation = nation_nature ;
12213: LD_ADDR_OWVAR 21
12217: PUSH
12218: LD_INT 0
12220: ST_TO_ADDR
// hc_class = class_apeman ;
12221: LD_ADDR_OWVAR 28
12225: PUSH
12226: LD_INT 12
12228: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12229: LD_ADDR_OWVAR 31
12233: PUSH
12234: LD_EXP 25
12238: PUSH
12239: LD_INT 1
12241: ARRAY
12242: PUSH
12243: LD_EXP 25
12247: PUSH
12248: LD_INT 2
12250: ARRAY
12251: PUSH
12252: LD_EXP 25
12256: PUSH
12257: LD_INT 3
12259: ARRAY
12260: PUSH
12261: LD_EXP 25
12265: PUSH
12266: LD_INT 4
12268: ARRAY
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: ST_TO_ADDR
// hc_agressivity = apeAgression ;
12276: LD_ADDR_OWVAR 35
12280: PUSH
12281: LD_EXP 31
12285: ST_TO_ADDR
// un = CreateHuman ;
12286: LD_ADDR_VAR 0 3
12290: PUSH
12291: CALL_OW 44
12295: ST_TO_ADDR
// PlaceUnitArea ( un , ApemanSpawnArea , false ) ;
12296: LD_VAR 0 3
12300: PPUSH
12301: LD_INT 16
12303: PPUSH
12304: LD_INT 0
12306: PPUSH
12307: CALL_OW 49
// end ;
12311: GO 12202
12313: POP
12314: POP
// for i := 1 to animalsAmount [ 2 ] do
12315: LD_ADDR_VAR 0 2
12319: PUSH
12320: DOUBLE
12321: LD_INT 1
12323: DEC
12324: ST_TO_ADDR
12325: LD_EXP 24
12329: PUSH
12330: LD_INT 2
12332: ARRAY
12333: PUSH
12334: FOR_TO
12335: IFFALSE 12445
// begin uc_side = 0 ;
12337: LD_ADDR_OWVAR 20
12341: PUSH
12342: LD_INT 0
12344: ST_TO_ADDR
// uc_nation = nation_nature ;
12345: LD_ADDR_OWVAR 21
12349: PUSH
12350: LD_INT 0
12352: ST_TO_ADDR
// hc_class = class_phororhacos ;
12353: LD_ADDR_OWVAR 28
12357: PUSH
12358: LD_INT 18
12360: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12361: LD_ADDR_OWVAR 31
12365: PUSH
12366: LD_EXP 25
12370: PUSH
12371: LD_INT 1
12373: ARRAY
12374: PUSH
12375: LD_EXP 25
12379: PUSH
12380: LD_INT 2
12382: ARRAY
12383: PUSH
12384: LD_EXP 25
12388: PUSH
12389: LD_INT 3
12391: ARRAY
12392: PUSH
12393: LD_EXP 25
12397: PUSH
12398: LD_INT 4
12400: ARRAY
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12408: LD_ADDR_OWVAR 35
12412: PUSH
12413: LD_EXP 26
12417: ST_TO_ADDR
// un = CreateHuman ;
12418: LD_ADDR_VAR 0 3
12422: PUSH
12423: CALL_OW 44
12427: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12428: LD_VAR 0 3
12432: PPUSH
12433: LD_INT 15
12435: PPUSH
12436: LD_INT 0
12438: PPUSH
12439: CALL_OW 49
// end ;
12443: GO 12334
12445: POP
12446: POP
// for i := 1 to animalsAmount [ 3 ] do
12447: LD_ADDR_VAR 0 2
12451: PUSH
12452: DOUBLE
12453: LD_INT 1
12455: DEC
12456: ST_TO_ADDR
12457: LD_EXP 24
12461: PUSH
12462: LD_INT 3
12464: ARRAY
12465: PUSH
12466: FOR_TO
12467: IFFALSE 12577
// begin uc_side = 0 ;
12469: LD_ADDR_OWVAR 20
12473: PUSH
12474: LD_INT 0
12476: ST_TO_ADDR
// uc_nation = nation_nature ;
12477: LD_ADDR_OWVAR 21
12481: PUSH
12482: LD_INT 0
12484: ST_TO_ADDR
// hc_class = class_tiger ;
12485: LD_ADDR_OWVAR 28
12489: PUSH
12490: LD_INT 14
12492: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12493: LD_ADDR_OWVAR 31
12497: PUSH
12498: LD_EXP 25
12502: PUSH
12503: LD_INT 1
12505: ARRAY
12506: PUSH
12507: LD_EXP 25
12511: PUSH
12512: LD_INT 2
12514: ARRAY
12515: PUSH
12516: LD_EXP 25
12520: PUSH
12521: LD_INT 3
12523: ARRAY
12524: PUSH
12525: LD_EXP 25
12529: PUSH
12530: LD_INT 4
12532: ARRAY
12533: PUSH
12534: EMPTY
12535: LIST
12536: LIST
12537: LIST
12538: LIST
12539: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12540: LD_ADDR_OWVAR 35
12544: PUSH
12545: LD_EXP 26
12549: ST_TO_ADDR
// un = CreateHuman ;
12550: LD_ADDR_VAR 0 3
12554: PUSH
12555: CALL_OW 44
12559: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12560: LD_VAR 0 3
12564: PPUSH
12565: LD_INT 15
12567: PPUSH
12568: LD_INT 0
12570: PPUSH
12571: CALL_OW 49
// end ;
12575: GO 12466
12577: POP
12578: POP
// for i := 1 to animalsAmount [ 4 ] do
12579: LD_ADDR_VAR 0 2
12583: PUSH
12584: DOUBLE
12585: LD_INT 1
12587: DEC
12588: ST_TO_ADDR
12589: LD_EXP 24
12593: PUSH
12594: LD_INT 4
12596: ARRAY
12597: PUSH
12598: FOR_TO
12599: IFFALSE 12709
// begin uc_side = 0 ;
12601: LD_ADDR_OWVAR 20
12605: PUSH
12606: LD_INT 0
12608: ST_TO_ADDR
// uc_nation = nation_nature ;
12609: LD_ADDR_OWVAR 21
12613: PUSH
12614: LD_INT 0
12616: ST_TO_ADDR
// hc_class = 21 ;
12617: LD_ADDR_OWVAR 28
12621: PUSH
12622: LD_INT 21
12624: ST_TO_ADDR
// hc_skills = [ animalsStats [ 1 ] , animalsStats [ 2 ] , animalsStats [ 3 ] , animalsStats [ 4 ] ] ;
12625: LD_ADDR_OWVAR 31
12629: PUSH
12630: LD_EXP 25
12634: PUSH
12635: LD_INT 1
12637: ARRAY
12638: PUSH
12639: LD_EXP 25
12643: PUSH
12644: LD_INT 2
12646: ARRAY
12647: PUSH
12648: LD_EXP 25
12652: PUSH
12653: LD_INT 3
12655: ARRAY
12656: PUSH
12657: LD_EXP 25
12661: PUSH
12662: LD_INT 4
12664: ARRAY
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: ST_TO_ADDR
// hc_agressivity = animalsAgression ;
12672: LD_ADDR_OWVAR 35
12676: PUSH
12677: LD_EXP 26
12681: ST_TO_ADDR
// un = CreateHuman ;
12682: LD_ADDR_VAR 0 3
12686: PUSH
12687: CALL_OW 44
12691: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea , false ) ;
12692: LD_VAR 0 3
12696: PPUSH
12697: LD_INT 15
12699: PPUSH
12700: LD_INT 0
12702: PPUSH
12703: CALL_OW 49
// end ;
12707: GO 12598
12709: POP
12710: POP
// end ; end_of_file
12711: LD_VAR 0 1
12715: RET
// on UnitGoesToRed ( unit ) do begin if unit = Burlak and not GetSide ( Kirilenkova ) = 3 and not IsOK ( Kirilenkova ) then
12716: LD_VAR 0 1
12720: PUSH
12721: LD_EXP 43
12725: EQUAL
12726: PUSH
12727: LD_EXP 50
12731: PPUSH
12732: CALL_OW 255
12736: PUSH
12737: LD_INT 3
12739: EQUAL
12740: NOT
12741: AND
12742: PUSH
12743: LD_EXP 50
12747: PPUSH
12748: CALL_OW 302
12752: NOT
12753: AND
12754: IFFALSE 12760
// BurlakDying ;
12756: CALL 10238 0 0
// if unit = Gladstone then
12760: LD_VAR 0 1
12764: PUSH
12765: LD_EXP 41
12769: EQUAL
12770: IFFALSE 12780
// gladstoneStatus = 0 ;
12772: LD_ADDR_EXP 1
12776: PUSH
12777: LD_INT 0
12779: ST_TO_ADDR
// if unit = Johanna then
12780: LD_VAR 0 1
12784: PUSH
12785: LD_EXP 40
12789: EQUAL
12790: IFFALSE 12800
// johannaStatus = 0 ;
12792: LD_ADDR_EXP 2
12796: PUSH
12797: LD_INT 0
12799: ST_TO_ADDR
// end ;
12800: PPOPN 1
12802: END
// on UnitDestroyed ( unit ) do begin if unit = Burlak then
12803: LD_VAR 0 1
12807: PUSH
12808: LD_EXP 43
12812: EQUAL
12813: IFFALSE 12819
// BurlakDying ;
12815: CALL 10238 0 0
// if GetSide ( unit ) = 3 then
12819: LD_VAR 0 1
12823: PPUSH
12824: CALL_OW 255
12828: PUSH
12829: LD_INT 3
12831: EQUAL
12832: IFFALSE 12848
// lostComradesCounter = lostComradesCounter + 1 ;
12834: LD_ADDR_EXP 22
12838: PUSH
12839: LD_EXP 22
12843: PUSH
12844: LD_INT 1
12846: PLUS
12847: ST_TO_ADDR
// if unit in kirovSolds then
12848: LD_VAR 0 1
12852: PUSH
12853: LD_EXP 53
12857: IN
12858: IFFALSE 12876
// kirovSolds = kirovSolds diff unit ;
12860: LD_ADDR_EXP 53
12864: PUSH
12865: LD_EXP 53
12869: PUSH
12870: LD_VAR 0 1
12874: DIFF
12875: ST_TO_ADDR
// end ;
12876: PPOPN 1
12878: END
// on Contact ( side1 , side2 ) do begin if ( side1 = 3 and side2 = 1 ) or ( side1 = 1 and side2 = 3 ) and secondAttack = 1 then
12879: LD_VAR 0 1
12883: PUSH
12884: LD_INT 3
12886: EQUAL
12887: PUSH
12888: LD_VAR 0 2
12892: PUSH
12893: LD_INT 1
12895: EQUAL
12896: AND
12897: PUSH
12898: LD_VAR 0 1
12902: PUSH
12903: LD_INT 1
12905: EQUAL
12906: PUSH
12907: LD_VAR 0 2
12911: PUSH
12912: LD_INT 3
12914: EQUAL
12915: AND
12916: PUSH
12917: LD_EXP 16
12921: PUSH
12922: LD_INT 1
12924: EQUAL
12925: AND
12926: OR
12927: IFFALSE 12933
// Dial_SecondAttack ;
12929: CALL 5801 0 0
// if side1 = 3 and side2 = 6 and not traitor then
12933: LD_VAR 0 1
12937: PUSH
12938: LD_INT 3
12940: EQUAL
12941: PUSH
12942: LD_VAR 0 2
12946: PUSH
12947: LD_INT 6
12949: EQUAL
12950: AND
12951: PUSH
12952: LD_EXP 17
12956: NOT
12957: AND
12958: IFFALSE 12964
// Dialogue_AttackComrade ;
12960: CALL 3939 0 0
// end ; end_of_file
12964: PPOPN 2
12966: END
// export function SA_EndMission ( campaignNumber , missionNumber , medal1 , medal2 , medal3 ) ; var achiv ; begin
12967: LD_INT 0
12969: PPUSH
12970: PPUSH
// if not missionNumber then
12971: LD_VAR 0 2
12975: NOT
12976: IFFALSE 12980
// exit ;
12978: GO 13110
// achiv := false ;
12980: LD_ADDR_VAR 0 7
12984: PUSH
12985: LD_INT 0
12987: ST_TO_ADDR
// case campaignNumber of 1 :
12988: LD_VAR 0 1
12992: PUSH
12993: LD_INT 1
12995: DOUBLE
12996: EQUAL
12997: IFTRUE 13001
12999: GO 13012
13001: POP
// achiv := ACH_GOTA ; 2 :
13002: LD_ADDR_VAR 0 7
13006: PUSH
13007: LD_STRING ACH_GOTA
13009: ST_TO_ADDR
13010: GO 13062
13012: LD_INT 2
13014: DOUBLE
13015: EQUAL
13016: IFTRUE 13020
13018: GO 13023
13020: POP
// ; 3 :
13021: GO 13062
13023: LD_INT 3
13025: DOUBLE
13026: EQUAL
13027: IFTRUE 13031
13029: GO 13042
13031: POP
// achiv := ACH_MOTSU ; 4 :
13032: LD_ADDR_VAR 0 7
13036: PUSH
13037: LD_STRING ACH_MOTSU
13039: ST_TO_ADDR
13040: GO 13062
13042: LD_INT 4
13044: DOUBLE
13045: EQUAL
13046: IFTRUE 13050
13048: GO 13061
13050: POP
// achiv := ACH_LOP ; end ;
13051: LD_ADDR_VAR 0 7
13055: PUSH
13056: LD_STRING ACH_LOP
13058: ST_TO_ADDR
13059: GO 13062
13061: POP
// if Difficulty = 3 and achiv and medal1 and medal2 and medal3 then
13062: LD_OWVAR 67
13066: PUSH
13067: LD_INT 3
13069: EQUAL
13070: PUSH
13071: LD_VAR 0 7
13075: AND
13076: PUSH
13077: LD_VAR 0 3
13081: AND
13082: PUSH
13083: LD_VAR 0 4
13087: AND
13088: PUSH
13089: LD_VAR 0 5
13093: AND
13094: IFFALSE 13110
// SetAchievementEX ( achiv , missionNumber ) ;
13096: LD_VAR 0 7
13100: PPUSH
13101: LD_VAR 0 2
13105: PPUSH
13106: CALL_OW 564
// end ;
13110: LD_VAR 0 6
13114: RET
// export function SA_BehemothConstructed ; begin
13115: LD_INT 0
13117: PPUSH
// SetAchievement ( ACH_SMC ) ;
13118: LD_STRING ACH_SMC
13120: PPUSH
13121: CALL_OW 543
// end ;
13125: LD_VAR 0 1
13129: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin case p2 of 1 :
13130: LD_VAR 0 2
13134: PUSH
13135: LD_INT 1
13137: DOUBLE
13138: EQUAL
13139: IFTRUE 13143
13141: GO 13150
13143: POP
// HackUnlimitedResources ; 2 :
13144: CALL 13334 0 0
13148: GO 13331
13150: LD_INT 2
13152: DOUBLE
13153: EQUAL
13154: IFTRUE 13158
13156: GO 13165
13158: POP
// HackSetLevel10 ; 3 :
13159: CALL 13467 0 0
13163: GO 13331
13165: LD_INT 3
13167: DOUBLE
13168: EQUAL
13169: IFTRUE 13173
13171: GO 13180
13173: POP
// HackSetLevel10YourUnits ; 4 :
13174: CALL 13552 0 0
13178: GO 13331
13180: LD_INT 4
13182: DOUBLE
13183: EQUAL
13184: IFTRUE 13188
13186: GO 13210
13188: POP
// HackSpawnHuman ( p3 , p4 , p5 ) ; 5 :
13189: LD_VAR 0 3
13193: PPUSH
13194: LD_VAR 0 4
13198: PPUSH
13199: LD_VAR 0 5
13203: PPUSH
13204: CALL 13642 0 3
13208: GO 13331
13210: LD_INT 5
13212: DOUBLE
13213: EQUAL
13214: IFTRUE 13218
13216: GO 13225
13218: POP
// HackSpawnVehicle ; 6 :
13219: CALL 13703 0 0
13223: GO 13331
13225: LD_INT 6
13227: DOUBLE
13228: EQUAL
13229: IFTRUE 13233
13231: GO 13240
13233: POP
// HackInvincible ; 7 :
13234: CALL 14778 0 0
13238: GO 13331
13240: LD_INT 7
13242: DOUBLE
13243: EQUAL
13244: IFTRUE 13248
13246: GO 13255
13248: POP
// HackInvisible ; 8 :
13249: CALL 14889 0 0
13253: GO 13331
13255: LD_INT 8
13257: DOUBLE
13258: EQUAL
13259: IFTRUE 13263
13261: GO 13270
13263: POP
// HackChangeYourSide ; 9 :
13264: CALL 14946 0 0
13268: GO 13331
13270: LD_INT 9
13272: DOUBLE
13273: EQUAL
13274: IFTRUE 13278
13276: GO 13285
13278: POP
// HackChangeUnitSide ; 10 :
13279: CALL 14988 0 0
13283: GO 13331
13285: LD_INT 10
13287: DOUBLE
13288: EQUAL
13289: IFTRUE 13293
13291: GO 13300
13293: POP
// HackFog ; 11 :
13294: CALL 15089 0 0
13298: GO 13331
13300: LD_INT 11
13302: DOUBLE
13303: EQUAL
13304: IFTRUE 13308
13306: GO 13315
13308: POP
// HackApeman ; 12 :
13309: CALL 15104 0 0
13313: GO 13331
13315: LD_INT 12
13317: DOUBLE
13318: EQUAL
13319: IFTRUE 13323
13321: GO 13330
13323: POP
// HackBoom ; end ;
13324: CALL 15189 0 0
13328: GO 13331
13330: POP
// end ;
13331: PPOPN 6
13333: END
// export function HackUnlimitedResources ; var i , j , tmp ; begin
13334: LD_INT 0
13336: PPUSH
13337: PPUSH
13338: PPUSH
13339: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13340: LD_ADDR_VAR 0 4
13344: PUSH
13345: LD_INT 22
13347: PUSH
13348: LD_OWVAR 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: LD_INT 2
13359: PUSH
13360: LD_INT 30
13362: PUSH
13363: LD_INT 0
13365: PUSH
13366: EMPTY
13367: LIST
13368: LIST
13369: PUSH
13370: LD_INT 30
13372: PUSH
13373: LD_INT 1
13375: PUSH
13376: EMPTY
13377: LIST
13378: LIST
13379: PUSH
13380: EMPTY
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: EMPTY
13386: LIST
13387: LIST
13388: PPUSH
13389: CALL_OW 69
13393: ST_TO_ADDR
// if not tmp then
13394: LD_VAR 0 4
13398: NOT
13399: IFFALSE 13403
// exit ;
13401: GO 13462
// for i in tmp do
13403: LD_ADDR_VAR 0 2
13407: PUSH
13408: LD_VAR 0 4
13412: PUSH
13413: FOR_IN
13414: IFFALSE 13460
// for j = 1 to 3 do
13416: LD_ADDR_VAR 0 3
13420: PUSH
13421: DOUBLE
13422: LD_INT 1
13424: DEC
13425: ST_TO_ADDR
13426: LD_INT 3
13428: PUSH
13429: FOR_TO
13430: IFFALSE 13456
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
13432: LD_VAR 0 2
13436: PPUSH
13437: CALL_OW 274
13441: PPUSH
13442: LD_VAR 0 3
13446: PPUSH
13447: LD_INT 99999
13449: PPUSH
13450: CALL_OW 277
13454: GO 13429
13456: POP
13457: POP
13458: GO 13413
13460: POP
13461: POP
// end ;
13462: LD_VAR 0 1
13466: RET
// export function HackSetLevel10 ; var i , j ; begin
13467: LD_INT 0
13469: PPUSH
13470: PPUSH
13471: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
13472: LD_ADDR_VAR 0 2
13476: PUSH
13477: LD_INT 21
13479: PUSH
13480: LD_INT 1
13482: PUSH
13483: EMPTY
13484: LIST
13485: LIST
13486: PPUSH
13487: CALL_OW 69
13491: PUSH
13492: FOR_IN
13493: IFFALSE 13545
// if IsSelected ( i ) then
13495: LD_VAR 0 2
13499: PPUSH
13500: CALL_OW 306
13504: IFFALSE 13543
// begin for j := 1 to 4 do
13506: LD_ADDR_VAR 0 3
13510: PUSH
13511: DOUBLE
13512: LD_INT 1
13514: DEC
13515: ST_TO_ADDR
13516: LD_INT 4
13518: PUSH
13519: FOR_TO
13520: IFFALSE 13541
// SetSkill ( i , j , 10 ) ;
13522: LD_VAR 0 2
13526: PPUSH
13527: LD_VAR 0 3
13531: PPUSH
13532: LD_INT 10
13534: PPUSH
13535: CALL_OW 237
13539: GO 13519
13541: POP
13542: POP
// end ;
13543: GO 13492
13545: POP
13546: POP
// end ;
13547: LD_VAR 0 1
13551: RET
// export function HackSetLevel10YourUnits ; var i , j ; begin
13552: LD_INT 0
13554: PPUSH
13555: PPUSH
13556: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
13557: LD_ADDR_VAR 0 2
13561: PUSH
13562: LD_INT 22
13564: PUSH
13565: LD_OWVAR 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 21
13576: PUSH
13577: LD_INT 1
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: PUSH
13593: FOR_IN
13594: IFFALSE 13635
// begin for j := 1 to 4 do
13596: LD_ADDR_VAR 0 3
13600: PUSH
13601: DOUBLE
13602: LD_INT 1
13604: DEC
13605: ST_TO_ADDR
13606: LD_INT 4
13608: PUSH
13609: FOR_TO
13610: IFFALSE 13631
// SetSkill ( i , j , 10 ) ;
13612: LD_VAR 0 2
13616: PPUSH
13617: LD_VAR 0 3
13621: PPUSH
13622: LD_INT 10
13624: PPUSH
13625: CALL_OW 237
13629: GO 13609
13631: POP
13632: POP
// end ;
13633: GO 13593
13635: POP
13636: POP
// end ;
13637: LD_VAR 0 1
13641: RET
// export function HackSpawnHuman ( nation , class , skill ) ; begin
13642: LD_INT 0
13644: PPUSH
// uc_side := your_side ;
13645: LD_ADDR_OWVAR 20
13649: PUSH
13650: LD_OWVAR 2
13654: ST_TO_ADDR
// uc_nation := nation ;
13655: LD_ADDR_OWVAR 21
13659: PUSH
13660: LD_VAR 0 1
13664: ST_TO_ADDR
// InitHc ;
13665: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
13669: LD_INT 0
13671: PPUSH
13672: LD_VAR 0 2
13676: PPUSH
13677: LD_VAR 0 3
13681: PPUSH
13682: CALL_OW 380
// PlaceUnitAnywhere ( CreateHuman , true ) ;
13686: CALL_OW 44
13690: PPUSH
13691: LD_INT 1
13693: PPUSH
13694: CALL_OW 51
// end ;
13698: LD_VAR 0 4
13702: RET
// export function HackSpawnVehicle ; begin
13703: LD_INT 0
13705: PPUSH
// uc_side := your_side ;
13706: LD_ADDR_OWVAR 20
13710: PUSH
13711: LD_OWVAR 2
13715: ST_TO_ADDR
// uc_nation := rand ( 1 , 3 ) ;
13716: LD_ADDR_OWVAR 21
13720: PUSH
13721: LD_INT 1
13723: PPUSH
13724: LD_INT 3
13726: PPUSH
13727: CALL_OW 12
13731: ST_TO_ADDR
// InitVc ;
13732: CALL_OW 20
// case uc_nation of 1 :
13736: LD_OWVAR 21
13740: PUSH
13741: LD_INT 1
13743: DOUBLE
13744: EQUAL
13745: IFTRUE 13749
13747: GO 14056
13749: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
13750: LD_ADDR_OWVAR 37
13754: PUSH
13755: LD_INT 1
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: LD_INT 3
13763: PUSH
13764: LD_INT 4
13766: PUSH
13767: LD_INT 5
13769: PUSH
13770: LD_INT 11
13772: PUSH
13773: LD_INT 12
13775: PUSH
13776: LD_INT 13
13778: PUSH
13779: LD_INT 14
13781: PUSH
13782: LD_INT 21
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_INT 23
13790: PUSH
13791: LD_INT 24
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: LIST
13808: PUSH
13809: LD_INT 1
13811: PPUSH
13812: LD_INT 13
13814: PPUSH
13815: CALL_OW 12
13819: ARRAY
13820: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
13821: LD_ADDR_OWVAR 38
13825: PUSH
13826: LD_INT 1
13828: PUSH
13829: LD_INT 3
13831: PUSH
13832: LD_INT 4
13834: PUSH
13835: LD_INT 5
13837: PUSH
13838: EMPTY
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: PUSH
13844: LD_INT 1
13846: PPUSH
13847: LD_INT 4
13849: PPUSH
13850: CALL_OW 12
13854: ARRAY
13855: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
13856: LD_ADDR_OWVAR 39
13860: PUSH
13861: LD_INT 1
13863: PUSH
13864: LD_INT 2
13866: PUSH
13867: LD_INT 3
13869: PUSH
13870: EMPTY
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 1
13877: PPUSH
13878: LD_INT 3
13880: PPUSH
13881: CALL_OW 12
13885: ARRAY
13886: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
13887: LD_ADDR_OWVAR 40
13891: PUSH
13892: LD_INT 14
13894: PUSH
13895: LD_INT 12
13897: PUSH
13898: LD_INT 13
13900: PUSH
13901: LD_INT 5
13903: PUSH
13904: LD_INT 10
13906: PUSH
13907: LD_INT 4
13909: PUSH
13910: LD_INT 6
13912: PUSH
13913: LD_INT 9
13915: PUSH
13916: LD_INT 3
13918: PUSH
13919: LD_INT 2
13921: PUSH
13922: LD_INT 11
13924: PUSH
13925: LD_INT 7
13927: PUSH
13928: LD_INT 8
13930: PUSH
13931: LD_INT 15
13933: PUSH
13934: LD_INT 32
13936: PUSH
13937: LD_INT 31
13939: PUSH
13940: LD_INT 24
13942: PUSH
13943: LD_INT 26
13945: PUSH
13946: LD_INT 25
13948: PUSH
13949: LD_INT 27
13951: PUSH
13952: LD_INT 23
13954: PUSH
13955: LD_INT 22
13957: PUSH
13958: LD_INT 30
13960: PUSH
13961: LD_INT 28
13963: PUSH
13964: LD_INT 29
13966: PUSH
13967: LD_INT 53
13969: PUSH
13970: LD_INT 51
13972: PUSH
13973: LD_INT 52
13975: PUSH
13976: LD_INT 43
13978: PUSH
13979: LD_INT 44
13981: PUSH
13982: LD_INT 46
13984: PUSH
13985: LD_INT 42
13987: PUSH
13988: LD_INT 47
13990: PUSH
13991: LD_INT 45
13993: PUSH
13994: LD_INT 48
13996: PUSH
13997: LD_INT 55
13999: PUSH
14000: LD_INT 49
14002: PUSH
14003: EMPTY
14004: LIST
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: LIST
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: LIST
14019: LIST
14020: LIST
14021: LIST
14022: LIST
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: LIST
14037: LIST
14038: LIST
14039: LIST
14040: LIST
14041: PUSH
14042: LD_INT 1
14044: PPUSH
14045: LD_INT 37
14047: PPUSH
14048: CALL_OW 12
14052: ARRAY
14053: ST_TO_ADDR
// end ; 2 :
14054: GO 14687
14056: LD_INT 2
14058: DOUBLE
14059: EQUAL
14060: IFTRUE 14064
14062: GO 14371
14064: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14065: LD_ADDR_OWVAR 37
14069: PUSH
14070: LD_INT 1
14072: PUSH
14073: LD_INT 2
14075: PUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 4
14081: PUSH
14082: LD_INT 5
14084: PUSH
14085: LD_INT 11
14087: PUSH
14088: LD_INT 12
14090: PUSH
14091: LD_INT 13
14093: PUSH
14094: LD_INT 14
14096: PUSH
14097: LD_INT 21
14099: PUSH
14100: LD_INT 22
14102: PUSH
14103: LD_INT 23
14105: PUSH
14106: LD_INT 24
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: LIST
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: LIST
14119: LIST
14120: LIST
14121: LIST
14122: LIST
14123: PUSH
14124: LD_INT 1
14126: PPUSH
14127: LD_INT 13
14129: PPUSH
14130: CALL_OW 12
14134: ARRAY
14135: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14136: LD_ADDR_OWVAR 38
14140: PUSH
14141: LD_INT 1
14143: PUSH
14144: LD_INT 3
14146: PUSH
14147: LD_INT 4
14149: PUSH
14150: LD_INT 5
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: LIST
14157: LIST
14158: PUSH
14159: LD_INT 1
14161: PPUSH
14162: LD_INT 4
14164: PPUSH
14165: CALL_OW 12
14169: ARRAY
14170: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14171: LD_ADDR_OWVAR 39
14175: PUSH
14176: LD_INT 1
14178: PUSH
14179: LD_INT 2
14181: PUSH
14182: LD_INT 3
14184: PUSH
14185: EMPTY
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 1
14192: PPUSH
14193: LD_INT 3
14195: PPUSH
14196: CALL_OW 12
14200: ARRAY
14201: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14202: LD_ADDR_OWVAR 40
14206: PUSH
14207: LD_INT 14
14209: PUSH
14210: LD_INT 12
14212: PUSH
14213: LD_INT 13
14215: PUSH
14216: LD_INT 5
14218: PUSH
14219: LD_INT 10
14221: PUSH
14222: LD_INT 4
14224: PUSH
14225: LD_INT 6
14227: PUSH
14228: LD_INT 9
14230: PUSH
14231: LD_INT 3
14233: PUSH
14234: LD_INT 2
14236: PUSH
14237: LD_INT 11
14239: PUSH
14240: LD_INT 7
14242: PUSH
14243: LD_INT 8
14245: PUSH
14246: LD_INT 15
14248: PUSH
14249: LD_INT 32
14251: PUSH
14252: LD_INT 31
14254: PUSH
14255: LD_INT 24
14257: PUSH
14258: LD_INT 26
14260: PUSH
14261: LD_INT 25
14263: PUSH
14264: LD_INT 27
14266: PUSH
14267: LD_INT 23
14269: PUSH
14270: LD_INT 22
14272: PUSH
14273: LD_INT 30
14275: PUSH
14276: LD_INT 28
14278: PUSH
14279: LD_INT 29
14281: PUSH
14282: LD_INT 53
14284: PUSH
14285: LD_INT 51
14287: PUSH
14288: LD_INT 52
14290: PUSH
14291: LD_INT 43
14293: PUSH
14294: LD_INT 44
14296: PUSH
14297: LD_INT 46
14299: PUSH
14300: LD_INT 42
14302: PUSH
14303: LD_INT 47
14305: PUSH
14306: LD_INT 45
14308: PUSH
14309: LD_INT 48
14311: PUSH
14312: LD_INT 55
14314: PUSH
14315: LD_INT 49
14317: PUSH
14318: EMPTY
14319: LIST
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: LIST
14327: LIST
14328: LIST
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: LIST
14334: LIST
14335: LIST
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 1
14359: PPUSH
14360: LD_INT 37
14362: PPUSH
14363: CALL_OW 12
14367: ARRAY
14368: ST_TO_ADDR
// end ; 3 :
14369: GO 14687
14371: LD_INT 3
14373: DOUBLE
14374: EQUAL
14375: IFTRUE 14379
14377: GO 14686
14379: POP
// begin vc_chassis = [ 1 , 2 , 3 , 4 , 5 , 11 , 12 , 13 , 14 , 21 , 22 , 23 , 24 ] [ Rand ( 1 , 13 ) ] ;
14380: LD_ADDR_OWVAR 37
14384: PUSH
14385: LD_INT 1
14387: PUSH
14388: LD_INT 2
14390: PUSH
14391: LD_INT 3
14393: PUSH
14394: LD_INT 4
14396: PUSH
14397: LD_INT 5
14399: PUSH
14400: LD_INT 11
14402: PUSH
14403: LD_INT 12
14405: PUSH
14406: LD_INT 13
14408: PUSH
14409: LD_INT 14
14411: PUSH
14412: LD_INT 21
14414: PUSH
14415: LD_INT 22
14417: PUSH
14418: LD_INT 23
14420: PUSH
14421: LD_INT 24
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: PUSH
14439: LD_INT 1
14441: PPUSH
14442: LD_INT 13
14444: PPUSH
14445: CALL_OW 12
14449: ARRAY
14450: ST_TO_ADDR
// vc_control = [ 1 , 3 , 4 , 5 ] [ Rand ( 1 , 4 ) ] ;
14451: LD_ADDR_OWVAR 38
14455: PUSH
14456: LD_INT 1
14458: PUSH
14459: LD_INT 3
14461: PUSH
14462: LD_INT 4
14464: PUSH
14465: LD_INT 5
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 1
14476: PPUSH
14477: LD_INT 4
14479: PPUSH
14480: CALL_OW 12
14484: ARRAY
14485: ST_TO_ADDR
// vc_engine = [ 1 , 2 , 3 ] [ Rand ( 1 , 3 ) ] ;
14486: LD_ADDR_OWVAR 39
14490: PUSH
14491: LD_INT 1
14493: PUSH
14494: LD_INT 2
14496: PUSH
14497: LD_INT 3
14499: PUSH
14500: EMPTY
14501: LIST
14502: LIST
14503: LIST
14504: PUSH
14505: LD_INT 1
14507: PPUSH
14508: LD_INT 3
14510: PPUSH
14511: CALL_OW 12
14515: ARRAY
14516: ST_TO_ADDR
// vc_weapon = [ 14 , 12 , 13 , 5 , 10 , 4 , 6 , 9 , 3 , 2 , 11 , 7 , 8 , 15 , 32 , 31 , 24 , 26 , 25 , 27 , 23 , 22 , 30 , 28 , 29 , 53 , 51 , 52 , 43 , 44 , 46 , 42 , 47 , 45 , 48 , 55 , 49 ] [ Rand ( 1 , 37 ) ] ;
14517: LD_ADDR_OWVAR 40
14521: PUSH
14522: LD_INT 14
14524: PUSH
14525: LD_INT 12
14527: PUSH
14528: LD_INT 13
14530: PUSH
14531: LD_INT 5
14533: PUSH
14534: LD_INT 10
14536: PUSH
14537: LD_INT 4
14539: PUSH
14540: LD_INT 6
14542: PUSH
14543: LD_INT 9
14545: PUSH
14546: LD_INT 3
14548: PUSH
14549: LD_INT 2
14551: PUSH
14552: LD_INT 11
14554: PUSH
14555: LD_INT 7
14557: PUSH
14558: LD_INT 8
14560: PUSH
14561: LD_INT 15
14563: PUSH
14564: LD_INT 32
14566: PUSH
14567: LD_INT 31
14569: PUSH
14570: LD_INT 24
14572: PUSH
14573: LD_INT 26
14575: PUSH
14576: LD_INT 25
14578: PUSH
14579: LD_INT 27
14581: PUSH
14582: LD_INT 23
14584: PUSH
14585: LD_INT 22
14587: PUSH
14588: LD_INT 30
14590: PUSH
14591: LD_INT 28
14593: PUSH
14594: LD_INT 29
14596: PUSH
14597: LD_INT 53
14599: PUSH
14600: LD_INT 51
14602: PUSH
14603: LD_INT 52
14605: PUSH
14606: LD_INT 43
14608: PUSH
14609: LD_INT 44
14611: PUSH
14612: LD_INT 46
14614: PUSH
14615: LD_INT 42
14617: PUSH
14618: LD_INT 47
14620: PUSH
14621: LD_INT 45
14623: PUSH
14624: LD_INT 48
14626: PUSH
14627: LD_INT 55
14629: PUSH
14630: LD_INT 49
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: LIST
14637: LIST
14638: LIST
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: LIST
14644: LIST
14645: LIST
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: LIST
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 1
14674: PPUSH
14675: LD_INT 37
14677: PPUSH
14678: CALL_OW 12
14682: ARRAY
14683: ST_TO_ADDR
// end ; end ;
14684: GO 14687
14686: POP
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14687: CALL_OW 45
14691: PPUSH
14692: LD_INT 1
14694: PPUSH
14695: CALL_OW 51
// end ;
14699: LD_VAR 0 1
14703: RET
// export invincible ; every 1 do
14704: GO 14706
14706: DISABLE
// invincible := [ ] ;
14707: LD_ADDR_EXP 54
14711: PUSH
14712: EMPTY
14713: ST_TO_ADDR
14714: END
// every 10 do var i ;
14715: GO 14717
14717: DISABLE
14718: LD_INT 0
14720: PPUSH
// begin enable ;
14721: ENABLE
// if not invincible then
14722: LD_EXP 54
14726: NOT
14727: IFFALSE 14731
// exit ;
14729: GO 14775
// for i in invincible do
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: LD_EXP 54
14740: PUSH
14741: FOR_IN
14742: IFFALSE 14773
// if GetLives ( i ) < 1000 then
14744: LD_VAR 0 1
14748: PPUSH
14749: CALL_OW 256
14753: PUSH
14754: LD_INT 1000
14756: LESS
14757: IFFALSE 14771
// SetLives ( i , 1000 ) ;
14759: LD_VAR 0 1
14763: PPUSH
14764: LD_INT 1000
14766: PPUSH
14767: CALL_OW 234
14771: GO 14741
14773: POP
14774: POP
// end ;
14775: PPOPN 1
14777: END
// export function HackInvincible ; var i ; begin
14778: LD_INT 0
14780: PPUSH
14781: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
14782: LD_ADDR_VAR 0 2
14786: PUSH
14787: LD_INT 2
14789: PUSH
14790: LD_INT 21
14792: PUSH
14793: LD_INT 1
14795: PUSH
14796: EMPTY
14797: LIST
14798: LIST
14799: PUSH
14800: LD_INT 21
14802: PUSH
14803: LD_INT 2
14805: PUSH
14806: EMPTY
14807: LIST
14808: LIST
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: PPUSH
14815: CALL_OW 69
14819: PUSH
14820: FOR_IN
14821: IFFALSE 14882
// if IsSelected ( i ) then
14823: LD_VAR 0 2
14827: PPUSH
14828: CALL_OW 306
14832: IFFALSE 14880
// begin if i in invincible then
14834: LD_VAR 0 2
14838: PUSH
14839: LD_EXP 54
14843: IN
14844: IFFALSE 14864
// invincible := invincible diff i else
14846: LD_ADDR_EXP 54
14850: PUSH
14851: LD_EXP 54
14855: PUSH
14856: LD_VAR 0 2
14860: DIFF
14861: ST_TO_ADDR
14862: GO 14880
// invincible := invincible union i ;
14864: LD_ADDR_EXP 54
14868: PUSH
14869: LD_EXP 54
14873: PUSH
14874: LD_VAR 0 2
14878: UNION
14879: ST_TO_ADDR
// end ;
14880: GO 14820
14882: POP
14883: POP
// end ;
14884: LD_VAR 0 1
14888: RET
// export function HackInvisible ; var i , j ; begin
14889: LD_INT 0
14891: PPUSH
14892: PPUSH
14893: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
14894: LD_ADDR_VAR 0 2
14898: PUSH
14899: LD_INT 21
14901: PUSH
14902: LD_INT 1
14904: PUSH
14905: EMPTY
14906: LIST
14907: LIST
14908: PPUSH
14909: CALL_OW 69
14913: PUSH
14914: FOR_IN
14915: IFFALSE 14939
// if IsSelected ( i ) then
14917: LD_VAR 0 2
14921: PPUSH
14922: CALL_OW 306
14926: IFFALSE 14937
// begin ComForceInvisible ( i ) ;
14928: LD_VAR 0 2
14932: PPUSH
14933: CALL_OW 496
// end ;
14937: GO 14914
14939: POP
14940: POP
// end ;
14941: LD_VAR 0 1
14945: RET
// export function HackChangeYourSide ; begin
14946: LD_INT 0
14948: PPUSH
// if your_side = 8 then
14949: LD_OWVAR 2
14953: PUSH
14954: LD_INT 8
14956: EQUAL
14957: IFFALSE 14969
// your_side := 0 else
14959: LD_ADDR_OWVAR 2
14963: PUSH
14964: LD_INT 0
14966: ST_TO_ADDR
14967: GO 14983
// your_side := your_side + 1 ;
14969: LD_ADDR_OWVAR 2
14973: PUSH
14974: LD_OWVAR 2
14978: PUSH
14979: LD_INT 1
14981: PLUS
14982: ST_TO_ADDR
// end ;
14983: LD_VAR 0 1
14987: RET
// export function HackChangeUnitSide ; var i , j ; begin
14988: LD_INT 0
14990: PPUSH
14991: PPUSH
14992: PPUSH
// for i in all_units do
14993: LD_ADDR_VAR 0 2
14997: PUSH
14998: LD_OWVAR 3
15002: PUSH
15003: FOR_IN
15004: IFFALSE 15082
// if IsSelected ( i ) then
15006: LD_VAR 0 2
15010: PPUSH
15011: CALL_OW 306
15015: IFFALSE 15080
// begin j := GetSide ( i ) ;
15017: LD_ADDR_VAR 0 3
15021: PUSH
15022: LD_VAR 0 2
15026: PPUSH
15027: CALL_OW 255
15031: ST_TO_ADDR
// if j = 8 then
15032: LD_VAR 0 3
15036: PUSH
15037: LD_INT 8
15039: EQUAL
15040: IFFALSE 15052
// j := 0 else
15042: LD_ADDR_VAR 0 3
15046: PUSH
15047: LD_INT 0
15049: ST_TO_ADDR
15050: GO 15066
// j := j + 1 ;
15052: LD_ADDR_VAR 0 3
15056: PUSH
15057: LD_VAR 0 3
15061: PUSH
15062: LD_INT 1
15064: PLUS
15065: ST_TO_ADDR
// SetSide ( i , j ) ;
15066: LD_VAR 0 2
15070: PPUSH
15071: LD_VAR 0 3
15075: PPUSH
15076: CALL_OW 235
// end ;
15080: GO 15003
15082: POP
15083: POP
// end ;
15084: LD_VAR 0 1
15088: RET
// export function HackFog ; begin
15089: LD_INT 0
15091: PPUSH
// FogOff ( true ) ;
15092: LD_INT 1
15094: PPUSH
15095: CALL_OW 344
// end ;
15099: LD_VAR 0 1
15103: RET
// export function HackApeman ; begin
15104: LD_INT 0
15106: PPUSH
// uc_side := your_side ;
15107: LD_ADDR_OWVAR 20
15111: PUSH
15112: LD_OWVAR 2
15116: ST_TO_ADDR
// uc_nation := 0 ;
15117: LD_ADDR_OWVAR 21
15121: PUSH
15122: LD_INT 0
15124: ST_TO_ADDR
// hc_name :=  ;
15125: LD_ADDR_OWVAR 26
15129: PUSH
15130: LD_STRING 
15132: ST_TO_ADDR
// hc_gallery :=  ;
15133: LD_ADDR_OWVAR 33
15137: PUSH
15138: LD_STRING 
15140: ST_TO_ADDR
// hc_skills := [ 0 , 0 , 0 , 0 ] ;
15141: LD_ADDR_OWVAR 31
15145: PUSH
15146: LD_INT 0
15148: PUSH
15149: LD_INT 0
15151: PUSH
15152: LD_INT 0
15154: PUSH
15155: LD_INT 0
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: ST_TO_ADDR
// hc_class := class_apeman ;
15164: LD_ADDR_OWVAR 28
15168: PUSH
15169: LD_INT 12
15171: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateHuman , true ) ;
15172: CALL_OW 44
15176: PPUSH
15177: LD_INT 1
15179: PPUSH
15180: CALL_OW 51
// end ;
15184: LD_VAR 0 1
15188: RET
// export function HackBoom ; begin
15189: LD_INT 0
15191: PPUSH
// uc_side := your_side ;
15192: LD_ADDR_OWVAR 20
15196: PUSH
15197: LD_OWVAR 2
15201: ST_TO_ADDR
// uc_nation := 1 ;
15202: LD_ADDR_OWVAR 21
15206: PUSH
15207: LD_INT 1
15209: ST_TO_ADDR
// vc_chassis := us_morphling ;
15210: LD_ADDR_OWVAR 37
15214: PUSH
15215: LD_INT 5
15217: ST_TO_ADDR
// vc_engine := engine_siberite ;
15218: LD_ADDR_OWVAR 39
15222: PUSH
15223: LD_INT 3
15225: ST_TO_ADDR
// vc_control := control_computer ;
15226: LD_ADDR_OWVAR 38
15230: PUSH
15231: LD_INT 3
15233: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
15234: LD_ADDR_OWVAR 40
15238: PUSH
15239: LD_INT 8
15241: ST_TO_ADDR
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15242: CALL_OW 45
15246: PPUSH
15247: LD_INT 1
15249: PPUSH
15250: CALL_OW 51
// end ;
15254: LD_VAR 0 1
15258: RET
